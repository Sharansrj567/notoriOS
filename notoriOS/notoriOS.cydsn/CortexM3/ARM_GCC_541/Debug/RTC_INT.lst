ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	RTC_EverySecondHandler, %function
  24              	RTC_EverySecondHandler:
  25              	.LFB63:
  26              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 2


  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  27              		.loc 1 55 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  37              		.loc 1 58 0
  38 0004 0020     		movs	r0, #0
  39 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  40              		.loc 1 64 0
  41 000a 00BF     		nop
  42 000c 80BD     		pop	{r7, pc}
  43              		.cfi_endproc
  44              	.LFE63:
  45              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  46 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  47              		.align	2
  48              		.thumb
  49              		.thumb_func
  50              		.type	RTC_EveryMinuteHandler, %function
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 3


  51              	RTC_EveryMinuteHandler:
  52              	.LFB64:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  53              		.loc 1 82 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57 0000 80B5     		push	{r7, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 7, -8
  60              		.cfi_offset 14, -4
  61 0002 00AF     		add	r7, sp, #0
  62              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
  63              		.loc 1 85 0
  64 0004 0120     		movs	r0, #1
  65 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
  66              		.loc 1 91 0
  67 000a 00BF     		nop
  68 000c 80BD     		pop	{r7, pc}
  69              		.cfi_endproc
  70              	.LFE64:
  71              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
  72 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
  73              		.align	2
  74              		.thumb
  75              		.thumb_func
  76              		.type	RTC_EveryHourHandler, %function
  77              	RTC_EveryHourHandler:
  78              	.LFB65:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 4


  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
  79              		.loc 1 109 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
  89              		.loc 1 112 0
  90 0004 0220     		movs	r0, #2
  91 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
  92              		.loc 1 118 0
  93 000a 00BF     		nop
  94 000c 80BD     		pop	{r7, pc}
  95              		.cfi_endproc
  96              	.LFE65:
  97              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
  98 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
  99              		.align	2
 100              		.thumb
 101              		.thumb_func
 102              		.type	RTC_EveryDayHandler, %function
 103              	RTC_EveryDayHandler:
 104              	.LFB66:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 5


 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 105              		.loc 1 136 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 80B5     		push	{r7, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 00AF     		add	r7, sp, #0
 114              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 115              		.loc 1 139 0
 116 0004 0320     		movs	r0, #3
 117 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 118              		.loc 1 145 0
 119 000a 00BF     		nop
 120 000c 80BD     		pop	{r7, pc}
 121              		.cfi_endproc
 122              	.LFE66:
 123              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 124 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 125              		.align	2
 126              		.thumb
 127              		.thumb_func
 128              		.type	RTC_EveryWeekHandler, %function
 129              	RTC_EveryWeekHandler:
 130              	.LFB67:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 6


 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 131              		.loc 1 163 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135 0000 80B5     		push	{r7, lr}
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 7, -8
 138              		.cfi_offset 14, -4
 139 0002 00AF     		add	r7, sp, #0
 140              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 141              		.loc 1 166 0
 142 0004 0420     		movs	r0, #4
 143 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 144              		.loc 1 172 0
 145 000a 00BF     		nop
 146 000c 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE67:
 149              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 150 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 151              		.align	2
 152              		.thumb
 153              		.thumb_func
 154              		.type	RTC_EveryMonthHandler, %function
 155              	RTC_EveryMonthHandler:
 156              	.LFB68:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 7


 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 157              		.loc 1 190 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 00AF     		add	r7, sp, #0
 166              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 167              		.loc 1 193 0
 168 0004 0520     		movs	r0, #5
 169 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 170              		.loc 1 199 0
 171 000a 00BF     		nop
 172 000c 80BD     		pop	{r7, pc}
 173              		.cfi_endproc
 174              	.LFE68:
 175              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 176 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 177              		.align	2
 178              		.thumb
 179              		.thumb_func
 180              		.type	RTC_EveryYearHandler, %function
 181              	RTC_EveryYearHandler:
 182              	.LFB69:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 8


 183              		.loc 1 217 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0000 80B5     		push	{r7, lr}
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 7, -8
 190              		.cfi_offset 14, -4
 191 0002 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 193              		.loc 1 220 0
 194 0004 0620     		movs	r0, #6
 195 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 196              		.loc 1 226 0
 197 000a 00BF     		nop
 198 000c 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE69:
 201              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 202 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 203              		.align	2
 204              		.global	RTC_ISR
 205              		.thumb
 206              		.thumb_func
 207              		.type	RTC_ISR, %function
 208              	RTC_ISR:
 209              	.LFB70:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 9


 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 210              		.loc 1 268 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 8
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 82B0     		sub	sp, sp, #8
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 222              		.loc 1 276 0
 223 0006 0420     		movs	r0, #4
 224 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 225              		.loc 1 279 0
 226 000c 9E4B     		ldr	r3, .L48
 227 000e 1B78     		ldrb	r3, [r3]
 228 0010 DBB2     		uxtb	r3, r3
 229 0012 0133     		adds	r3, r3, #1
 230 0014 DAB2     		uxtb	r2, r3
 231 0016 9C4B     		ldr	r3, .L48
 232 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 10


 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 233              		.loc 1 282 0
 234 001a 9B4B     		ldr	r3, .L48
 235 001c 1B78     		ldrb	r3, [r3]
 236 001e DBB2     		uxtb	r3, r3
 237 0020 3B2B     		cmp	r3, #59
 238 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 239              		.loc 1 285 0
 240 0026 984B     		ldr	r3, .L48
 241 0028 5B78     		ldrb	r3, [r3, #1]
 242 002a DBB2     		uxtb	r3, r3
 243 002c 0133     		adds	r3, r3, #1
 244 002e DAB2     		uxtb	r2, r3
 245 0030 954B     		ldr	r3, .L48
 246 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 247              		.loc 1 288 0
 248 0034 944B     		ldr	r3, .L48
 249 0036 0022     		movs	r2, #0
 250 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 251              		.loc 1 290 0
 252 003a 934B     		ldr	r3, .L48
 253 003c 5B78     		ldrb	r3, [r3, #1]
 254 003e DBB2     		uxtb	r3, r3
 255 0040 3B2B     		cmp	r3, #59
 256 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 257              		.loc 1 293 0
 258 0046 904B     		ldr	r3, .L48
 259 0048 9B78     		ldrb	r3, [r3, #2]
 260 004a DBB2     		uxtb	r3, r3
 261 004c 0133     		adds	r3, r3, #1
 262 004e DAB2     		uxtb	r2, r3
 263 0050 8D4B     		ldr	r3, .L48
 264 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 265              		.loc 1 296 0
 266 0054 8C4B     		ldr	r3, .L48
 267 0056 0022     		movs	r2, #0
 268 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 269              		.loc 1 299 0
 270 005a 8B4B     		ldr	r3, .L48
 271 005c 9B78     		ldrb	r3, [r3, #2]
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 11


 272 005e DBB2     		uxtb	r3, r3
 273 0060 172B     		cmp	r3, #23
 274 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 275              		.loc 1 302 0
 276 0066 884B     		ldr	r3, .L48
 277 0068 1B79     		ldrb	r3, [r3, #4]
 278 006a DBB2     		uxtb	r3, r3
 279 006c 0133     		adds	r3, r3, #1
 280 006e DAB2     		uxtb	r2, r3
 281 0070 854B     		ldr	r3, .L48
 282 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 283              		.loc 1 305 0
 284 0074 844B     		ldr	r3, .L48
 285 0076 0022     		movs	r2, #0
 286 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 287              		.loc 1 308 0
 288 007a 834B     		ldr	r3, .L48
 289 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 290 007e 9BB2     		uxth	r3, r3
 291 0080 0133     		adds	r3, r3, #1
 292 0082 9AB2     		uxth	r2, r3
 293 0084 804B     		ldr	r3, .L48
 294 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 295              		.loc 1 311 0
 296 0088 7F4B     		ldr	r3, .L48
 297 008a DB78     		ldrb	r3, [r3, #3]
 298 008c DBB2     		uxtb	r3, r3
 299 008e 0133     		adds	r3, r3, #1
 300 0090 DAB2     		uxtb	r2, r3
 301 0092 7D4B     		ldr	r3, .L48
 302 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 303              		.loc 1 314 0
 304 0096 7C4B     		ldr	r3, .L48
 305 0098 DB78     		ldrb	r3, [r3, #3]
 306 009a DBB2     		uxtb	r3, r3
 307 009c 072B     		cmp	r3, #7
 308 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 309              		.loc 1 317 0
 310 00a0 794B     		ldr	r3, .L48
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 12


 311 00a2 0122     		movs	r2, #1
 312 00a4 DA70     		strb	r2, [r3, #3]
 313              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 314              		.loc 1 325 0
 315 00a6 794B     		ldr	r3, .L48+4
 316 00a8 1B78     		ldrb	r3, [r3]
 317 00aa DBB2     		uxtb	r3, r3
 318 00ac 03F00203 		and	r3, r3, #2
 319 00b0 002B     		cmp	r3, #0
 320 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 321              		.loc 1 326 0 discriminator 1
 322 00b4 744B     		ldr	r3, .L48
 323 00b6 1B7A     		ldrb	r3, [r3, #8]
 324 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 325              		.loc 1 325 0 discriminator 1
 326 00ba 022B     		cmp	r3, #2
 327 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 328              		.loc 1 327 0
 329 00be 724B     		ldr	r3, .L48
 330 00c0 1B79     		ldrb	r3, [r3, #4]
 331 00c2 DBB2     		uxtb	r3, r3
 332 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 333              		.loc 1 328 0
 334 00c6 704B     		ldr	r3, .L48
 335 00c8 1B7A     		ldrb	r3, [r3, #8]
 336 00ca DBB2     		uxtb	r3, r3
 337 00cc 013B     		subs	r3, r3, #1
 338 00ce 704A     		ldr	r2, .L48+8
 339 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 340 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 341              		.loc 1 326 0
 342 00d4 9942     		cmp	r1, r3
 343 00d6 2AD8     		bhi	.L14
 344              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 345              		.loc 1 329 0
 346 00d8 6C4B     		ldr	r3, .L48+4
 347 00da 1B78     		ldrb	r3, [r3]
 348 00dc DBB2     		uxtb	r3, r3
 349 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 350              		.loc 1 328 0
 351 00e2 002B     		cmp	r3, #0
 352 00e4 0FD0     		beq	.L15
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 13


 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 353              		.loc 1 330 0
 354 00e6 684B     		ldr	r3, .L48
 355 00e8 1B7A     		ldrb	r3, [r3, #8]
 356 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 357              		.loc 1 329 0
 358 00ec 022B     		cmp	r3, #2
 359 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 360              		.loc 1 331 0
 361 00f0 654B     		ldr	r3, .L48
 362 00f2 1B79     		ldrb	r3, [r3, #4]
 363 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 364              		.loc 1 332 0
 365 00f6 644B     		ldr	r3, .L48
 366 00f8 1B7A     		ldrb	r3, [r3, #8]
 367 00fa DBB2     		uxtb	r3, r3
 368 00fc 013B     		subs	r3, r3, #1
 369 00fe 6449     		ldr	r1, .L48+8
 370 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 371              		.loc 1 330 0
 372 0102 9A42     		cmp	r2, r3
 373 0104 13D8     		bhi	.L14
 374              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 375              		.loc 1 333 0
 376 0106 614B     		ldr	r3, .L48+4
 377 0108 1B78     		ldrb	r3, [r3]
 378 010a DBB2     		uxtb	r3, r3
 379 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 380              		.loc 1 332 0
 381 0110 002B     		cmp	r3, #0
 382 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 383              		.loc 1 334 0
 384 0116 5C4B     		ldr	r3, .L48
 385 0118 1B79     		ldrb	r3, [r3, #4]
 386 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 387              		.loc 1 335 0
 388 011c 5A4B     		ldr	r3, .L48
 389 011e 1B7A     		ldrb	r3, [r3, #8]
 390 0120 DBB2     		uxtb	r3, r3
 391 0122 013B     		subs	r3, r3, #1
 392 0124 5A49     		ldr	r1, .L48+8
 393 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 394              		.loc 1 333 0
 395 0128 9A42     		cmp	r2, r3
 396 012a 40F2E880 		bls	.L16
 397              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 14


 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 398              		.loc 1 338 0
 399 012e 564B     		ldr	r3, .L48
 400 0130 1B7A     		ldrb	r3, [r3, #8]
 401 0132 DBB2     		uxtb	r3, r3
 402 0134 0133     		adds	r3, r3, #1
 403 0136 DAB2     		uxtb	r2, r3
 404 0138 534B     		ldr	r3, .L48
 405 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 406              		.loc 1 341 0
 407 013c 524B     		ldr	r3, .L48
 408 013e 0122     		movs	r2, #1
 409 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 410              		.loc 1 344 0
 411 0142 514B     		ldr	r3, .L48
 412 0144 1B7A     		ldrb	r3, [r3, #8]
 413 0146 DBB2     		uxtb	r3, r3
 414 0148 0C2B     		cmp	r3, #12
 415 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 416              		.loc 1 347 0
 417 014e 4E4B     		ldr	r3, .L48
 418 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 419 0152 9BB2     		uxth	r3, r3
 420 0154 0133     		adds	r3, r3, #1
 421 0156 9AB2     		uxth	r2, r3
 422 0158 4B4B     		ldr	r3, .L48
 423 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 424              		.loc 1 350 0
 425 015c 4A4B     		ldr	r3, .L48
 426 015e 0122     		movs	r2, #1
 427 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 428              		.loc 1 353 0
 429 0162 494B     		ldr	r3, .L48
 430 0164 0122     		movs	r2, #1
 431 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 432              		.loc 1 356 0
 433 0168 474B     		ldr	r3, .L48
 434 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 435 016c 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 15


 436 016e 494A     		ldr	r2, .L48+12
 437 0170 A2FB0312 		umull	r1, r2, r2, r3
 438 0174 D209     		lsrs	r2, r2, #7
 439 0176 4FF4C871 		mov	r1, #400
 440 017a 01FB02F2 		mul	r2, r1, r2
 441 017e 9B1A     		subs	r3, r3, r2
 442 0180 9BB2     		uxth	r3, r3
 443 0182 002B     		cmp	r3, #0
 444 0184 15D0     		beq	.L18
 445              		.loc 1 356 0 is_stmt 0 discriminator 1
 446 0186 404B     		ldr	r3, .L48
 447 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 448 018a 9BB2     		uxth	r3, r3
 449 018c 03F00303 		and	r3, r3, #3
 450 0190 9BB2     		uxth	r3, r3
 451 0192 002B     		cmp	r3, #0
 452 0194 16D1     		bne	.L19
 453              		.loc 1 356 0 discriminator 2
 454 0196 3C4B     		ldr	r3, .L48
 455 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 456 019a 9BB2     		uxth	r3, r3
 457 019c 3D4A     		ldr	r2, .L48+12
 458 019e A2FB0312 		umull	r1, r2, r2, r3
 459 01a2 5209     		lsrs	r2, r2, #5
 460 01a4 6421     		movs	r1, #100
 461 01a6 01FB02F2 		mul	r2, r1, r2
 462 01aa 9B1A     		subs	r3, r3, r2
 463 01ac 9BB2     		uxth	r3, r3
 464 01ae 002B     		cmp	r3, #0
 465 01b0 08D0     		beq	.L19
 466              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 467              		.loc 1 359 0 is_stmt 1
 468 01b2 364B     		ldr	r3, .L48+4
 469 01b4 1B78     		ldrb	r3, [r3]
 470 01b6 DBB2     		uxtb	r3, r3
 471 01b8 43F00203 		orr	r3, r3, #2
 472 01bc DAB2     		uxtb	r2, r3
 473 01be 334B     		ldr	r3, .L48+4
 474 01c0 1A70     		strb	r2, [r3]
 475 01c2 07E0     		b	.L20
 476              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 477              		.loc 1 364 0
 478 01c4 314B     		ldr	r3, .L48+4
 479 01c6 1B78     		ldrb	r3, [r3]
 480 01c8 DBB2     		uxtb	r3, r3
 481 01ca 23F00203 		bic	r3, r3, #2
 482 01ce DAB2     		uxtb	r2, r3
 483 01d0 2E4B     		ldr	r3, .L48+4
 484 01d2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 16


 485              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 486              		.loc 1 368 0
 487 01d4 304B     		ldr	r3, .L48+16
 488 01d6 1B78     		ldrb	r3, [r3]
 489 01d8 DBB2     		uxtb	r3, r3
 490 01da 5BB2     		sxtb	r3, r3
 491 01dc 002B     		cmp	r3, #0
 492 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 493              		.loc 1 372 0
 494 01e0 2E4B     		ldr	r3, .L48+20
 495 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 496 01e4 9AB2     		uxth	r2, r3
 497 01e6 284B     		ldr	r3, .L48
 498 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 499 01ea 9BB2     		uxth	r3, r3
 500 01ec 9A42     		cmp	r2, r3
 501 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 502              		.loc 1 375 0
 503 01f0 2B4B     		ldr	r3, .L48+24
 504 01f2 1B78     		ldrb	r3, [r3]
 505 01f4 DBB2     		uxtb	r3, r3
 506 01f6 63F07F03 		orn	r3, r3, #127
 507 01fa DAB2     		uxtb	r2, r3
 508 01fc 284B     		ldr	r3, .L48+24
 509 01fe 1A70     		strb	r2, [r3]
 510 0200 07E0     		b	.L21
 511              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 512              		.loc 1 380 0
 513 0202 274B     		ldr	r3, .L48+24
 514 0204 1B78     		ldrb	r3, [r3]
 515 0206 DBB2     		uxtb	r3, r3
 516 0208 03F07F03 		and	r3, r3, #127
 517 020c DAB2     		uxtb	r2, r3
 518 020e 244B     		ldr	r3, .L48+24
 519 0210 1A70     		strb	r2, [r3]
 520              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 17


 521              		.loc 1 385 0
 522 0212 214B     		ldr	r3, .L48+16
 523 0214 1B78     		ldrb	r3, [r3]
 524 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 525              		.loc 1 386 0
 526 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 527 021a 002B     		cmp	r3, #0
 528 021c 13D0     		beq	.L23
 529              		.loc 1 386 0 is_stmt 0 discriminator 1
 530 021e 204B     		ldr	r3, .L48+24
 531 0220 1B78     		ldrb	r3, [r3]
 532 0222 DAB2     		uxtb	r2, r3
 533 0224 FB79     		ldrb	r3, [r7, #7]
 534 0226 1340     		ands	r3, r3, r2
 535 0228 DBB2     		uxtb	r3, r3
 536 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 537 022c 9A42     		cmp	r2, r3
 538 022e 0AD1     		bne	.L23
 539              		.loc 1 386 0 discriminator 2
 540 0230 164B     		ldr	r3, .L48+4
 541 0232 1B78     		ldrb	r3, [r3]
 542 0234 DBB2     		uxtb	r3, r3
 543 0236 43F00803 		orr	r3, r3, #8
 544 023a DAB2     		uxtb	r2, r3
 545 023c 134B     		ldr	r3, .L48+4
 546 023e 1A70     		strb	r2, [r3]
 547 0240 174B     		ldr	r3, .L48+24
 548 0242 0022     		movs	r2, #0
 549 0244 1A70     		strb	r2, [r3]
 550              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 551              		.loc 1 391 0 is_stmt 1
 552 0246 174B     		ldr	r3, .L48+28
 553 0248 1B78     		ldrb	r3, [r3]
 554 024a DBB2     		uxtb	r3, r3
 555 024c 03F04003 		and	r3, r3, #64
 556 0250 002B     		cmp	r3, #0
 557 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 558              		.loc 1 394 0
 559 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 560              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 561              		.loc 1 400 0
 562 0258 0F4B     		ldr	r3, .L48+16
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 18


 563 025a 1B78     		ldrb	r3, [r3]
 564 025c DBB2     		uxtb	r3, r3
 565 025e 03F04003 		and	r3, r3, #64
 566 0262 002B     		cmp	r3, #0
 567 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 568              		.loc 1 403 0
 569 0266 0D4B     		ldr	r3, .L48+20
 570 0268 1B7A     		ldrb	r3, [r3, #8]
 571 026a DAB2     		uxtb	r2, r3
 572 026c 064B     		ldr	r3, .L48
 573 026e 1B7A     		ldrb	r3, [r3, #8]
 574 0270 DBB2     		uxtb	r3, r3
 575 0272 9A42     		cmp	r2, r3
 576 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 577              		.loc 1 406 0
 578 0276 0A4B     		ldr	r3, .L48+24
 579 0278 1B78     		ldrb	r3, [r3]
 580 027a DBB2     		uxtb	r3, r3
 581 027c 43F04003 		orr	r3, r3, #64
 582 0280 DAB2     		uxtb	r2, r3
 583 0282 074B     		ldr	r3, .L48+24
 584 0284 1A70     		strb	r2, [r3]
 585 0286 17E0     		b	.L24
 586              	.L49:
 587              		.align	2
 588              	.L48:
 589 0288 00000000 		.word	RTC_currentTimeDate
 590 028c 00000000 		.word	RTC_statusDateTime
 591 0290 00000000 		.word	RTC_daysInMonths
 592 0294 1F85EB51 		.word	1374389535
 593 0298 00000000 		.word	RTC_alarmCfgMask
 594 029c 00000000 		.word	RTC_alarmCfgTimeDate
 595 02a0 00000000 		.word	RTC_alarmCurStatus
 596 02a4 00000000 		.word	RTC_intervalCfgMask
 597              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 598              		.loc 1 411 0
 599 02a8 964B     		ldr	r3, .L50
 600 02aa 1B78     		ldrb	r3, [r3]
 601 02ac DBB2     		uxtb	r3, r3
 602 02ae 23F04003 		bic	r3, r3, #64
 603 02b2 DAB2     		uxtb	r2, r3
 604 02b4 934B     		ldr	r3, .L50
 605 02b6 1A70     		strb	r2, [r3]
 606              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 19


 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 607              		.loc 1 436 0
 608 02b8 934B     		ldr	r3, .L50+4
 609 02ba 1B78     		ldrb	r3, [r3]
 610 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 611              		.loc 1 437 0
 612 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 613 02c0 002B     		cmp	r3, #0
 614 02c2 13D0     		beq	.L26
 615              		.loc 1 437 0 is_stmt 0 discriminator 1
 616 02c4 8F4B     		ldr	r3, .L50
 617 02c6 1B78     		ldrb	r3, [r3]
 618 02c8 DAB2     		uxtb	r2, r3
 619 02ca FB79     		ldrb	r3, [r7, #7]
 620 02cc 1340     		ands	r3, r3, r2
 621 02ce DBB2     		uxtb	r3, r3
 622 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 623 02d2 9A42     		cmp	r2, r3
 624 02d4 0AD1     		bne	.L26
 625              		.loc 1 437 0 discriminator 2
 626 02d6 8D4B     		ldr	r3, .L50+8
 627 02d8 1B78     		ldrb	r3, [r3]
 628 02da DBB2     		uxtb	r3, r3
 629 02dc 43F00803 		orr	r3, r3, #8
 630 02e0 DAB2     		uxtb	r2, r3
 631 02e2 8A4B     		ldr	r3, .L50+8
 632 02e4 1A70     		strb	r2, [r3]
 633 02e6 874B     		ldr	r3, .L50
 634 02e8 0022     		movs	r2, #0
 635 02ea 1A70     		strb	r2, [r3]
 636              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 20


 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 637              		.loc 1 442 0 is_stmt 1
 638 02ec 884B     		ldr	r3, .L50+12
 639 02ee 1B78     		ldrb	r3, [r3]
 640 02f0 DBB2     		uxtb	r3, r3
 641 02f2 03F02003 		and	r3, r3, #32
 642 02f6 002B     		cmp	r3, #0
 643 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 644              		.loc 1 445 0
 645 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 646              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 647              		.loc 1 450 0
 648 02fe 824B     		ldr	r3, .L50+4
 649 0300 1B78     		ldrb	r3, [r3]
 650 0302 DBB2     		uxtb	r3, r3
 651 0304 03F00803 		and	r3, r3, #8
 652 0308 002B     		cmp	r3, #0
 653 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 654              		.loc 1 453 0
 655 030c 814B     		ldr	r3, .L50+16
 656 030e DB78     		ldrb	r3, [r3, #3]
 657 0310 DAB2     		uxtb	r2, r3
 658 0312 814B     		ldr	r3, .L50+20
 659 0314 DB78     		ldrb	r3, [r3, #3]
 660 0316 DBB2     		uxtb	r3, r3
 661 0318 9A42     		cmp	r2, r3
 662 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 663              		.loc 1 456 0
 664 031c 794B     		ldr	r3, .L50
 665 031e 1B78     		ldrb	r3, [r3]
 666 0320 DBB2     		uxtb	r3, r3
 667 0322 43F00803 		orr	r3, r3, #8
 668 0326 DAB2     		uxtb	r2, r3
 669 0328 764B     		ldr	r3, .L50
 670 032a 1A70     		strb	r2, [r3]
 671 032c 07E0     		b	.L27
 672              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 21


 673              		.loc 1 461 0
 674 032e 754B     		ldr	r3, .L50
 675 0330 1B78     		ldrb	r3, [r3]
 676 0332 DBB2     		uxtb	r3, r3
 677 0334 23F00803 		bic	r3, r3, #8
 678 0338 DAB2     		uxtb	r2, r3
 679 033a 724B     		ldr	r3, .L50
 680 033c 1A70     		strb	r2, [r3]
 681              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 682              		.loc 1 466 0
 683 033e 724B     		ldr	r3, .L50+4
 684 0340 1B78     		ldrb	r3, [r3]
 685 0342 DBB2     		uxtb	r3, r3
 686 0344 03F02003 		and	r3, r3, #32
 687 0348 002B     		cmp	r3, #0
 688 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 689              		.loc 1 469 0
 690 034c 714B     		ldr	r3, .L50+16
 691 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 692 0350 9AB2     		uxth	r2, r3
 693 0352 714B     		ldr	r3, .L50+20
 694 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 695 0356 9BB2     		uxth	r3, r3
 696 0358 9A42     		cmp	r2, r3
 697 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 698              		.loc 1 472 0
 699 035c 694B     		ldr	r3, .L50
 700 035e 1B78     		ldrb	r3, [r3]
 701 0360 DBB2     		uxtb	r3, r3
 702 0362 43F02003 		orr	r3, r3, #32
 703 0366 DAB2     		uxtb	r2, r3
 704 0368 664B     		ldr	r3, .L50
 705 036a 1A70     		strb	r2, [r3]
 706 036c 07E0     		b	.L29
 707              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 708              		.loc 1 477 0
 709 036e 654B     		ldr	r3, .L50
 710 0370 1B78     		ldrb	r3, [r3]
 711 0372 DBB2     		uxtb	r3, r3
 712 0374 23F02003 		bic	r3, r3, #32
 713 0378 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 22


 714 037a 624B     		ldr	r3, .L50
 715 037c 1A70     		strb	r2, [r3]
 716              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 717              		.loc 1 482 0
 718 037e 624B     		ldr	r3, .L50+4
 719 0380 1B78     		ldrb	r3, [r3]
 720 0382 DBB2     		uxtb	r3, r3
 721 0384 03F01003 		and	r3, r3, #16
 722 0388 002B     		cmp	r3, #0
 723 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 724              		.loc 1 485 0
 725 038c 614B     		ldr	r3, .L50+16
 726 038e 1B79     		ldrb	r3, [r3, #4]
 727 0390 DAB2     		uxtb	r2, r3
 728 0392 614B     		ldr	r3, .L50+20
 729 0394 1B79     		ldrb	r3, [r3, #4]
 730 0396 DBB2     		uxtb	r3, r3
 731 0398 9A42     		cmp	r2, r3
 732 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 733              		.loc 1 488 0
 734 039c 594B     		ldr	r3, .L50
 735 039e 1B78     		ldrb	r3, [r3]
 736 03a0 DBB2     		uxtb	r3, r3
 737 03a2 43F01003 		orr	r3, r3, #16
 738 03a6 DAB2     		uxtb	r2, r3
 739 03a8 564B     		ldr	r3, .L50
 740 03aa 1A70     		strb	r2, [r3]
 741 03ac 07E0     		b	.L31
 742              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 743              		.loc 1 493 0
 744 03ae 554B     		ldr	r3, .L50
 745 03b0 1B78     		ldrb	r3, [r3]
 746 03b2 DBB2     		uxtb	r3, r3
 747 03b4 23F01003 		bic	r3, r3, #16
 748 03b8 DAB2     		uxtb	r2, r3
 749 03ba 524B     		ldr	r3, .L50
 750 03bc 1A70     		strb	r2, [r3]
 751              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 23


 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 752              		.loc 1 518 0
 753 03be 524B     		ldr	r3, .L50+4
 754 03c0 1B78     		ldrb	r3, [r3]
 755 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 756              		.loc 1 519 0
 757 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 758 03c6 002B     		cmp	r3, #0
 759 03c8 13D0     		beq	.L33
 760              		.loc 1 519 0 is_stmt 0 discriminator 1
 761 03ca 4E4B     		ldr	r3, .L50
 762 03cc 1B78     		ldrb	r3, [r3]
 763 03ce DAB2     		uxtb	r2, r3
 764 03d0 FB79     		ldrb	r3, [r7, #7]
 765 03d2 1340     		ands	r3, r3, r2
 766 03d4 DBB2     		uxtb	r3, r3
 767 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 768 03d8 9A42     		cmp	r2, r3
 769 03da 0AD1     		bne	.L33
 770              		.loc 1 519 0 discriminator 2
 771 03dc 4B4B     		ldr	r3, .L50+8
 772 03de 1B78     		ldrb	r3, [r3]
 773 03e0 DBB2     		uxtb	r3, r3
 774 03e2 43F00803 		orr	r3, r3, #8
 775 03e6 DAB2     		uxtb	r2, r3
 776 03e8 484B     		ldr	r3, .L50+8
 777 03ea 1A70     		strb	r2, [r3]
 778 03ec 454B     		ldr	r3, .L50
 779 03ee 0022     		movs	r2, #0
 780 03f0 1A70     		strb	r2, [r3]
 781              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 24


 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 782              		.loc 1 524 0 is_stmt 1
 783 03f2 474B     		ldr	r3, .L50+12
 784 03f4 1B78     		ldrb	r3, [r3]
 785 03f6 DBB2     		uxtb	r3, r3
 786 03f8 03F00803 		and	r3, r3, #8
 787 03fc 002B     		cmp	r3, #0
 788 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 789              		.loc 1 527 0
 790 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 791              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 792              		.loc 1 530 0
 793 0404 444B     		ldr	r3, .L50+20
 794 0406 DB78     		ldrb	r3, [r3, #3]
 795 0408 DBB2     		uxtb	r3, r3
 796 040a 012B     		cmp	r3, #1
 797 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 798              		.loc 1 533 0
 799 040e 404B     		ldr	r3, .L50+12
 800 0410 1B78     		ldrb	r3, [r3]
 801 0412 DBB2     		uxtb	r3, r3
 802 0414 03F01003 		and	r3, r3, #16
 803 0418 002B     		cmp	r3, #0
 804 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 805              		.loc 1 536 0
 806 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 807              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 808              		.loc 1 543 0
 809 0420 3D4B     		ldr	r3, .L50+20
 810 0422 9B78     		ldrb	r3, [r3, #2]
 811 0424 DBB2     		uxtb	r3, r3
 812 0426 0B2B     		cmp	r3, #11
 813 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 814              		.loc 1 546 0
 815 042a 384B     		ldr	r3, .L50+8
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 25


 816 042c 1B78     		ldrb	r3, [r3]
 817 042e DBB2     		uxtb	r3, r3
 818 0430 23F00403 		bic	r3, r3, #4
 819 0434 DAB2     		uxtb	r2, r3
 820 0436 354B     		ldr	r3, .L50+8
 821 0438 1A70     		strb	r2, [r3]
 822 043a 07E0     		b	.L36
 823              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 824              		.loc 1 551 0
 825 043c 334B     		ldr	r3, .L50+8
 826 043e 1B78     		ldrb	r3, [r3]
 827 0440 DBB2     		uxtb	r3, r3
 828 0442 43F00403 		orr	r3, r3, #4
 829 0446 DAB2     		uxtb	r2, r3
 830 0448 304B     		ldr	r3, .L50+8
 831 044a 1A70     		strb	r2, [r3]
 832              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 26


 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 27


 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 28


 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 29


 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 30


 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 31


 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 833              		.loc 1 879 0
 834 044c 2E4B     		ldr	r3, .L50+4
 835 044e 1B78     		ldrb	r3, [r3]
 836 0450 DBB2     		uxtb	r3, r3
 837 0452 03F00403 		and	r3, r3, #4
 838 0456 002B     		cmp	r3, #0
 839 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 840              		.loc 1 881 0
 841 045a 2E4B     		ldr	r3, .L50+16
 842 045c 9B78     		ldrb	r3, [r3, #2]
 843 045e DAB2     		uxtb	r2, r3
 844 0460 2D4B     		ldr	r3, .L50+20
 845 0462 9B78     		ldrb	r3, [r3, #2]
 846 0464 DBB2     		uxtb	r3, r3
 847 0466 9A42     		cmp	r2, r3
 848 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 849              		.loc 1 883 0
 850 046a 264B     		ldr	r3, .L50
 851 046c 1B78     		ldrb	r3, [r3]
 852 046e DBB2     		uxtb	r3, r3
 853 0470 43F00403 		orr	r3, r3, #4
 854 0474 DAB2     		uxtb	r2, r3
 855 0476 234B     		ldr	r3, .L50
 856 0478 1A70     		strb	r2, [r3]
 857 047a 07E0     		b	.L37
 858              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 859              		.loc 1 887 0
 860 047c 214B     		ldr	r3, .L50
 861 047e 1B78     		ldrb	r3, [r3]
 862 0480 DBB2     		uxtb	r3, r3
 863 0482 23F00403 		bic	r3, r3, #4
 864 0486 DAB2     		uxtb	r2, r3
 865 0488 1E4B     		ldr	r3, .L50
 866 048a 1A70     		strb	r2, [r3]
 867              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 868              		.loc 1 892 0
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 32


 869 048c 1E4B     		ldr	r3, .L50+4
 870 048e 1B78     		ldrb	r3, [r3]
 871 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 872              		.loc 1 893 0
 873 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 874 0494 002B     		cmp	r3, #0
 875 0496 13D0     		beq	.L39
 876              		.loc 1 893 0 is_stmt 0 discriminator 1
 877 0498 1A4B     		ldr	r3, .L50
 878 049a 1B78     		ldrb	r3, [r3]
 879 049c DAB2     		uxtb	r2, r3
 880 049e FB79     		ldrb	r3, [r7, #7]
 881 04a0 1340     		ands	r3, r3, r2
 882 04a2 DBB2     		uxtb	r3, r3
 883 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 884 04a6 9A42     		cmp	r2, r3
 885 04a8 0AD1     		bne	.L39
 886              		.loc 1 893 0 discriminator 2
 887 04aa 184B     		ldr	r3, .L50+8
 888 04ac 1B78     		ldrb	r3, [r3]
 889 04ae DBB2     		uxtb	r3, r3
 890 04b0 43F00803 		orr	r3, r3, #8
 891 04b4 DAB2     		uxtb	r2, r3
 892 04b6 154B     		ldr	r3, .L50+8
 893 04b8 1A70     		strb	r2, [r3]
 894 04ba 124B     		ldr	r3, .L50
 895 04bc 0022     		movs	r2, #0
 896 04be 1A70     		strb	r2, [r3]
 897              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 898              		.loc 1 898 0 is_stmt 1
 899 04c0 134B     		ldr	r3, .L50+12
 900 04c2 1B78     		ldrb	r3, [r3]
 901 04c4 DBB2     		uxtb	r3, r3
 902 04c6 03F00403 		and	r3, r3, #4
 903 04ca 002B     		cmp	r3, #0
 904 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 905              		.loc 1 900 0
 906 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 907              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 908              		.loc 1 905 0
 909 04d2 0D4B     		ldr	r3, .L50+4
 910 04d4 1B78     		ldrb	r3, [r3]
 911 04d6 DBB2     		uxtb	r3, r3
 912 04d8 03F00203 		and	r3, r3, #2
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 33


 913 04dc 002B     		cmp	r3, #0
 914 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 915              		.loc 1 907 0
 916 04e0 0C4B     		ldr	r3, .L50+16
 917 04e2 5B78     		ldrb	r3, [r3, #1]
 918 04e4 DAB2     		uxtb	r2, r3
 919 04e6 0C4B     		ldr	r3, .L50+20
 920 04e8 5B78     		ldrb	r3, [r3, #1]
 921 04ea DBB2     		uxtb	r3, r3
 922 04ec 9A42     		cmp	r2, r3
 923 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 924              		.loc 1 909 0
 925 04f0 044B     		ldr	r3, .L50
 926 04f2 1B78     		ldrb	r3, [r3]
 927 04f4 DBB2     		uxtb	r3, r3
 928 04f6 43F00203 		orr	r3, r3, #2
 929 04fa DAB2     		uxtb	r2, r3
 930 04fc 014B     		ldr	r3, .L50
 931 04fe 1A70     		strb	r2, [r3]
 932 0500 14E0     		b	.L40
 933              	.L51:
 934 0502 00BF     		.align	2
 935              	.L50:
 936 0504 00000000 		.word	RTC_alarmCurStatus
 937 0508 00000000 		.word	RTC_alarmCfgMask
 938 050c 00000000 		.word	RTC_statusDateTime
 939 0510 00000000 		.word	RTC_intervalCfgMask
 940 0514 00000000 		.word	RTC_alarmCfgTimeDate
 941 0518 00000000 		.word	RTC_currentTimeDate
 942              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 943              		.loc 1 913 0
 944 051c 384B     		ldr	r3, .L52
 945 051e 1B78     		ldrb	r3, [r3]
 946 0520 DBB2     		uxtb	r3, r3
 947 0522 23F00203 		bic	r3, r3, #2
 948 0526 DAB2     		uxtb	r2, r3
 949 0528 354B     		ldr	r3, .L52
 950 052a 1A70     		strb	r2, [r3]
 951              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 952              		.loc 1 918 0
 953 052c 354B     		ldr	r3, .L52+4
 954 052e 1B78     		ldrb	r3, [r3]
 955 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 34


 956              		.loc 1 919 0
 957 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 958 0534 002B     		cmp	r3, #0
 959 0536 13D0     		beq	.L42
 960              		.loc 1 919 0 is_stmt 0 discriminator 1
 961 0538 314B     		ldr	r3, .L52
 962 053a 1B78     		ldrb	r3, [r3]
 963 053c DAB2     		uxtb	r2, r3
 964 053e FB79     		ldrb	r3, [r7, #7]
 965 0540 1340     		ands	r3, r3, r2
 966 0542 DBB2     		uxtb	r3, r3
 967 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 968 0546 9A42     		cmp	r2, r3
 969 0548 0AD1     		bne	.L42
 970              		.loc 1 919 0 discriminator 2
 971 054a 2F4B     		ldr	r3, .L52+8
 972 054c 1B78     		ldrb	r3, [r3]
 973 054e DBB2     		uxtb	r3, r3
 974 0550 43F00803 		orr	r3, r3, #8
 975 0554 DAB2     		uxtb	r2, r3
 976 0556 2C4B     		ldr	r3, .L52+8
 977 0558 1A70     		strb	r2, [r3]
 978 055a 294B     		ldr	r3, .L52
 979 055c 0022     		movs	r2, #0
 980 055e 1A70     		strb	r2, [r3]
 981              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 982              		.loc 1 924 0 is_stmt 1
 983 0560 2A4B     		ldr	r3, .L52+12
 984 0562 1B78     		ldrb	r3, [r3]
 985 0564 DBB2     		uxtb	r3, r3
 986 0566 03F00203 		and	r3, r3, #2
 987 056a 002B     		cmp	r3, #0
 988 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 989              		.loc 1 926 0
 990 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 991              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 992              		.loc 1 931 0
 993 0572 244B     		ldr	r3, .L52+4
 994 0574 1B78     		ldrb	r3, [r3]
 995 0576 DBB2     		uxtb	r3, r3
 996 0578 03F00103 		and	r3, r3, #1
 997 057c 002B     		cmp	r3, #0
 998 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 35


 999              		.loc 1 933 0
 1000 0580 234B     		ldr	r3, .L52+16
 1001 0582 1B78     		ldrb	r3, [r3]
 1002 0584 DAB2     		uxtb	r2, r3
 1003 0586 234B     		ldr	r3, .L52+20
 1004 0588 1B78     		ldrb	r3, [r3]
 1005 058a DBB2     		uxtb	r3, r3
 1006 058c 9A42     		cmp	r2, r3
 1007 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1008              		.loc 1 935 0
 1009 0590 1B4B     		ldr	r3, .L52
 1010 0592 1B78     		ldrb	r3, [r3]
 1011 0594 DBB2     		uxtb	r3, r3
 1012 0596 43F00103 		orr	r3, r3, #1
 1013 059a DAB2     		uxtb	r2, r3
 1014 059c 184B     		ldr	r3, .L52
 1015 059e 1A70     		strb	r2, [r3]
 1016 05a0 07E0     		b	.L43
 1017              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1018              		.loc 1 939 0
 1019 05a2 174B     		ldr	r3, .L52
 1020 05a4 1B78     		ldrb	r3, [r3]
 1021 05a6 DBB2     		uxtb	r3, r3
 1022 05a8 23F00103 		bic	r3, r3, #1
 1023 05ac DAB2     		uxtb	r2, r3
 1024 05ae 144B     		ldr	r3, .L52
 1025 05b0 1A70     		strb	r2, [r3]
 1026              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1027              		.loc 1 944 0
 1028 05b2 144B     		ldr	r3, .L52+4
 1029 05b4 1B78     		ldrb	r3, [r3]
 1030 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1031              		.loc 1 945 0
 1032 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1033 05ba 002B     		cmp	r3, #0
 1034 05bc 13D0     		beq	.L45
 1035              		.loc 1 945 0 is_stmt 0 discriminator 1
 1036 05be 104B     		ldr	r3, .L52
 1037 05c0 1B78     		ldrb	r3, [r3]
 1038 05c2 DAB2     		uxtb	r2, r3
 1039 05c4 FB79     		ldrb	r3, [r7, #7]
 1040 05c6 1340     		ands	r3, r3, r2
 1041 05c8 DBB2     		uxtb	r3, r3
 1042 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1043 05cc 9A42     		cmp	r2, r3
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 36


 1044 05ce 0AD1     		bne	.L45
 1045              		.loc 1 945 0 discriminator 2
 1046 05d0 0D4B     		ldr	r3, .L52+8
 1047 05d2 1B78     		ldrb	r3, [r3]
 1048 05d4 DBB2     		uxtb	r3, r3
 1049 05d6 43F00803 		orr	r3, r3, #8
 1050 05da DAB2     		uxtb	r2, r3
 1051 05dc 0A4B     		ldr	r3, .L52+8
 1052 05de 1A70     		strb	r2, [r3]
 1053 05e0 074B     		ldr	r3, .L52
 1054 05e2 0022     		movs	r2, #0
 1055 05e4 1A70     		strb	r2, [r3]
 1056              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1057              		.loc 1 948 0 is_stmt 1
 1058 05e6 094B     		ldr	r3, .L52+12
 1059 05e8 1B78     		ldrb	r3, [r3]
 1060 05ea DBB2     		uxtb	r3, r3
 1061 05ec 03F00103 		and	r3, r3, #1
 1062 05f0 002B     		cmp	r3, #0
 1063 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1064              		.loc 1 950 0
 1065 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1066              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1067              		.loc 1 956 0
 1068 05f8 00BF     		nop
 1069 05fa 0837     		adds	r7, r7, #8
 1070              		.cfi_def_cfa_offset 8
 1071 05fc BD46     		mov	sp, r7
 1072              		.cfi_def_cfa_register 13
 1073              		@ sp needed
 1074 05fe 80BD     		pop	{r7, pc}
 1075              	.L53:
 1076              		.align	2
 1077              	.L52:
 1078 0600 00000000 		.word	RTC_alarmCurStatus
 1079 0604 00000000 		.word	RTC_alarmCfgMask
 1080 0608 00000000 		.word	RTC_statusDateTime
 1081 060c 00000000 		.word	RTC_intervalCfgMask
 1082 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1083 0614 00000000 		.word	RTC_currentTimeDate
 1084              		.cfi_endproc
 1085              	.LFE70:
 1086              		.size	RTC_ISR, .-RTC_ISR
 1087              		.text
 1088              	.Letext0:
 1089              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 37


 1090              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1091              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1092              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1093              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1094              		.section	.debug_info,"",%progbits
 1095              	.Ldebug_info0:
 1096 0000 53020000 		.4byte	0x253
 1097 0004 0400     		.2byte	0x4
 1098 0006 00000000 		.4byte	.Ldebug_abbrev0
 1099 000a 04       		.byte	0x4
 1100 000b 01       		.uleb128 0x1
 1101 000c 0A000000 		.4byte	.LASF40
 1102 0010 0C       		.byte	0xc
 1103 0011 03030000 		.4byte	.LASF41
 1104 0015 06010000 		.4byte	.LASF42
 1105 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1106 001d 00000000 		.4byte	0
 1107 0021 00000000 		.4byte	.Ldebug_line0
 1108 0025 02       		.uleb128 0x2
 1109 0026 01       		.byte	0x1
 1110 0027 06       		.byte	0x6
 1111 0028 F7020000 		.4byte	.LASF0
 1112 002c 02       		.uleb128 0x2
 1113 002d 01       		.byte	0x1
 1114 002e 08       		.byte	0x8
 1115 002f 4F010000 		.4byte	.LASF1
 1116 0033 02       		.uleb128 0x2
 1117 0034 02       		.byte	0x2
 1118 0035 05       		.byte	0x5
 1119 0036 B6020000 		.4byte	.LASF2
 1120 003a 02       		.uleb128 0x2
 1121 003b 02       		.byte	0x2
 1122 003c 07       		.byte	0x7
 1123 003d 8E010000 		.4byte	.LASF3
 1124 0041 03       		.uleb128 0x3
 1125 0042 AC000000 		.4byte	.LASF9
 1126 0046 02       		.byte	0x2
 1127 0047 3F       		.byte	0x3f
 1128 0048 4C000000 		.4byte	0x4c
 1129 004c 02       		.uleb128 0x2
 1130 004d 04       		.byte	0x4
 1131 004e 05       		.byte	0x5
 1132 004f B6000000 		.4byte	.LASF4
 1133 0053 02       		.uleb128 0x2
 1134 0054 04       		.byte	0x4
 1135 0055 07       		.byte	0x7
 1136 0056 7C010000 		.4byte	.LASF5
 1137 005a 02       		.uleb128 0x2
 1138 005b 08       		.byte	0x8
 1139 005c 05       		.byte	0x5
 1140 005d 8E020000 		.4byte	.LASF6
 1141 0061 02       		.uleb128 0x2
 1142 0062 08       		.byte	0x8
 1143 0063 07       		.byte	0x7
 1144 0064 14020000 		.4byte	.LASF7
 1145 0068 04       		.uleb128 0x4
 1146 0069 04       		.byte	0x4
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 38


 1147 006a 05       		.byte	0x5
 1148 006b 696E7400 		.ascii	"int\000"
 1149 006f 02       		.uleb128 0x2
 1150 0070 04       		.byte	0x4
 1151 0071 07       		.byte	0x7
 1152 0072 F1010000 		.4byte	.LASF8
 1153 0076 03       		.uleb128 0x3
 1154 0077 67020000 		.4byte	.LASF10
 1155 007b 03       		.byte	0x3
 1156 007c 2C       		.byte	0x2c
 1157 007d 41000000 		.4byte	0x41
 1158 0081 05       		.uleb128 0x5
 1159 0082 C0020000 		.4byte	.LASF11
 1160 0086 04       		.byte	0x4
 1161 0087 E401     		.2byte	0x1e4
 1162 0089 2C000000 		.4byte	0x2c
 1163 008d 05       		.uleb128 0x5
 1164 008e DD010000 		.4byte	.LASF12
 1165 0092 04       		.byte	0x4
 1166 0093 E501     		.2byte	0x1e5
 1167 0095 3A000000 		.4byte	0x3a
 1168 0099 02       		.uleb128 0x2
 1169 009a 04       		.byte	0x4
 1170 009b 04       		.byte	0x4
 1171 009c 00010000 		.4byte	.LASF13
 1172 00a0 02       		.uleb128 0x2
 1173 00a1 08       		.byte	0x8
 1174 00a2 04       		.byte	0x4
 1175 00a3 D6010000 		.4byte	.LASF14
 1176 00a7 02       		.uleb128 0x2
 1177 00a8 01       		.byte	0x1
 1178 00a9 08       		.byte	0x8
 1179 00aa 9C020000 		.4byte	.LASF15
 1180 00ae 06       		.uleb128 0x6
 1181 00af 81000000 		.4byte	0x81
 1182 00b3 07       		.uleb128 0x7
 1183 00b4 0C       		.byte	0xc
 1184 00b5 05       		.byte	0x5
 1185 00b6 30       		.byte	0x30
 1186 00b7 1C010000 		.4byte	0x11c
 1187 00bb 08       		.uleb128 0x8
 1188 00bc 53656300 		.ascii	"Sec\000"
 1189 00c0 05       		.byte	0x5
 1190 00c1 32       		.byte	0x32
 1191 00c2 81000000 		.4byte	0x81
 1192 00c6 00       		.byte	0
 1193 00c7 08       		.uleb128 0x8
 1194 00c8 4D696E00 		.ascii	"Min\000"
 1195 00cc 05       		.byte	0x5
 1196 00cd 33       		.byte	0x33
 1197 00ce 81000000 		.4byte	0x81
 1198 00d2 01       		.byte	0x1
 1199 00d3 09       		.uleb128 0x9
 1200 00d4 78020000 		.4byte	.LASF16
 1201 00d8 05       		.byte	0x5
 1202 00d9 34       		.byte	0x34
 1203 00da 81000000 		.4byte	0x81
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 39


 1204 00de 02       		.byte	0x2
 1205 00df 09       		.uleb128 0x9
 1206 00e0 00000000 		.4byte	.LASF17
 1207 00e4 05       		.byte	0x5
 1208 00e5 35       		.byte	0x35
 1209 00e6 81000000 		.4byte	0x81
 1210 00ea 03       		.byte	0x3
 1211 00eb 09       		.uleb128 0x9
 1212 00ec CB010000 		.4byte	.LASF18
 1213 00f0 05       		.byte	0x5
 1214 00f1 36       		.byte	0x36
 1215 00f2 81000000 		.4byte	0x81
 1216 00f6 04       		.byte	0x4
 1217 00f7 09       		.uleb128 0x9
 1218 00f8 A1010000 		.4byte	.LASF19
 1219 00fc 05       		.byte	0x5
 1220 00fd 37       		.byte	0x37
 1221 00fe 8D000000 		.4byte	0x8d
 1222 0102 06       		.byte	0x6
 1223 0103 09       		.uleb128 0x9
 1224 0104 AB010000 		.4byte	.LASF20
 1225 0108 05       		.byte	0x5
 1226 0109 38       		.byte	0x38
 1227 010a 81000000 		.4byte	0x81
 1228 010e 08       		.byte	0x8
 1229 010f 09       		.uleb128 0x9
 1230 0110 C6010000 		.4byte	.LASF21
 1231 0114 05       		.byte	0x5
 1232 0115 39       		.byte	0x39
 1233 0116 8D000000 		.4byte	0x8d
 1234 011a 0A       		.byte	0xa
 1235 011b 00       		.byte	0
 1236 011c 03       		.uleb128 0x3
 1237 011d DD020000 		.4byte	.LASF22
 1238 0121 05       		.byte	0x5
 1239 0122 3A       		.byte	0x3a
 1240 0123 27010000 		.4byte	0x127
 1241 0127 06       		.uleb128 0x6
 1242 0128 B3000000 		.4byte	0xb3
 1243 012c 02       		.uleb128 0x2
 1244 012d 08       		.byte	0x8
 1245 012e 04       		.byte	0x4
 1246 012f EB020000 		.4byte	.LASF23
 1247 0133 02       		.uleb128 0x2
 1248 0134 04       		.byte	0x4
 1249 0135 07       		.byte	0x7
 1250 0136 6F020000 		.4byte	.LASF24
 1251 013a 0A       		.uleb128 0xa
 1252 013b 65010000 		.4byte	.LASF25
 1253 013f 01       		.byte	0x1
 1254 0140 36       		.byte	0x36
 1255 0141 00000000 		.4byte	.LFB63
 1256 0145 0E000000 		.4byte	.LFE63-.LFB63
 1257 0149 01       		.uleb128 0x1
 1258 014a 9C       		.byte	0x9c
 1259 014b 0A       		.uleb128 0xa
 1260 014c C6020000 		.4byte	.LASF26
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 40


 1261 0150 01       		.byte	0x1
 1262 0151 51       		.byte	0x51
 1263 0152 00000000 		.4byte	.LFB64
 1264 0156 0E000000 		.4byte	.LFE64-.LFB64
 1265 015a 01       		.uleb128 0x1
 1266 015b 9C       		.byte	0x9c
 1267 015c 0A       		.uleb128 0xa
 1268 015d A1020000 		.4byte	.LASF27
 1269 0161 01       		.byte	0x1
 1270 0162 6C       		.byte	0x6c
 1271 0163 00000000 		.4byte	.LFB65
 1272 0167 0E000000 		.4byte	.LFE65-.LFB65
 1273 016b 01       		.uleb128 0x1
 1274 016c 9C       		.byte	0x9c
 1275 016d 0A       		.uleb128 0xa
 1276 016e 98000000 		.4byte	.LASF28
 1277 0172 01       		.byte	0x1
 1278 0173 87       		.byte	0x87
 1279 0174 00000000 		.4byte	.LFB66
 1280 0178 0E000000 		.4byte	.LFE66-.LFB66
 1281 017c 01       		.uleb128 0x1
 1282 017d 9C       		.byte	0x9c
 1283 017e 0A       		.uleb128 0xa
 1284 017f 3E020000 		.4byte	.LASF29
 1285 0183 01       		.byte	0x1
 1286 0184 A2       		.byte	0xa2
 1287 0185 00000000 		.4byte	.LFB67
 1288 0189 0E000000 		.4byte	.LFE67-.LFB67
 1289 018d 01       		.uleb128 0x1
 1290 018e 9C       		.byte	0x9c
 1291 018f 0A       		.uleb128 0xa
 1292 0190 FE010000 		.4byte	.LASF30
 1293 0194 01       		.byte	0x1
 1294 0195 BD       		.byte	0xbd
 1295 0196 00000000 		.4byte	.LFB68
 1296 019a 0E000000 		.4byte	.LFE68-.LFB68
 1297 019e 01       		.uleb128 0x1
 1298 019f 9C       		.byte	0x9c
 1299 01a0 0A       		.uleb128 0xa
 1300 01a1 EB000000 		.4byte	.LASF31
 1301 01a5 01       		.byte	0x1
 1302 01a6 D8       		.byte	0xd8
 1303 01a7 00000000 		.4byte	.LFB69
 1304 01ab 0E000000 		.4byte	.LFE69-.LFB69
 1305 01af 01       		.uleb128 0x1
 1306 01b0 9C       		.byte	0x9c
 1307 01b1 0B       		.uleb128 0xb
 1308 01b2 5D010000 		.4byte	.LASF43
 1309 01b6 01       		.byte	0x1
 1310 01b7 0B01     		.2byte	0x10b
 1311 01b9 00000000 		.4byte	.LFB70
 1312 01bd 18060000 		.4byte	.LFE70-.LFB70
 1313 01c1 01       		.uleb128 0x1
 1314 01c2 9C       		.byte	0x9c
 1315 01c3 D7010000 		.4byte	0x1d7
 1316 01c7 0C       		.uleb128 0xc
 1317 01c8 BF000000 		.4byte	.LASF44
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 41


 1318 01cc 01       		.byte	0x1
 1319 01cd 0D01     		.2byte	0x10d
 1320 01cf 81000000 		.4byte	0x81
 1321 01d3 02       		.uleb128 0x2
 1322 01d4 91       		.byte	0x91
 1323 01d5 77       		.sleb128 -9
 1324 01d6 00       		.byte	0
 1325 01d7 0D       		.uleb128 0xd
 1326 01d8 B1010000 		.4byte	.LASF32
 1327 01dc 05       		.byte	0x5
 1328 01dd 2D01     		.2byte	0x12d
 1329 01df 1C010000 		.4byte	0x11c
 1330 01e3 0D       		.uleb128 0xd
 1331 01e4 53020000 		.4byte	.LASF33
 1332 01e8 05       		.byte	0x5
 1333 01e9 2E01     		.2byte	0x12e
 1334 01eb 1C010000 		.4byte	0x11c
 1335 01ef 0D       		.uleb128 0xd
 1336 01f0 DA000000 		.4byte	.LASF34
 1337 01f4 05       		.byte	0x5
 1338 01f5 3901     		.2byte	0x139
 1339 01f7 AE000000 		.4byte	0xae
 1340 01fb 0D       		.uleb128 0xd
 1341 01fc 2B020000 		.4byte	.LASF35
 1342 0200 05       		.byte	0x5
 1343 0201 3A01     		.2byte	0x13a
 1344 0203 AE000000 		.4byte	0xae
 1345 0207 0D       		.uleb128 0xd
 1346 0208 24030000 		.4byte	.LASF36
 1347 020c 05       		.byte	0x5
 1348 020d 3B01     		.2byte	0x13b
 1349 020f AE000000 		.4byte	0xae
 1350 0213 0D       		.uleb128 0xd
 1351 0214 C7000000 		.4byte	.LASF37
 1352 0218 05       		.byte	0x5
 1353 0219 3C01     		.2byte	0x13c
 1354 021b AE000000 		.4byte	0xae
 1355 021f 0E       		.uleb128 0xe
 1356 0220 2F020000 		.4byte	0x22f
 1357 0224 2F020000 		.4byte	0x22f
 1358 0228 0F       		.uleb128 0xf
 1359 0229 33010000 		.4byte	0x133
 1360 022d 0B       		.byte	0xb
 1361 022e 00       		.byte	0
 1362 022f 10       		.uleb128 0x10
 1363 0230 81000000 		.4byte	0x81
 1364 0234 0D       		.uleb128 0xd
 1365 0235 7D020000 		.4byte	.LASF38
 1366 0239 05       		.byte	0x5
 1367 023a 3E01     		.2byte	0x13e
 1368 023c 40020000 		.4byte	0x240
 1369 0240 10       		.uleb128 0x10
 1370 0241 1F020000 		.4byte	0x21f
 1371 0245 0D       		.uleb128 0xd
 1372 0246 E4010000 		.4byte	.LASF39
 1373 024a 06       		.byte	0x6
 1374 024b 1207     		.2byte	0x712
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 42


 1375 024d 51020000 		.4byte	0x251
 1376 0251 06       		.uleb128 0x6
 1377 0252 76000000 		.4byte	0x76
 1378 0256 00       		.byte	0
 1379              		.section	.debug_abbrev,"",%progbits
 1380              	.Ldebug_abbrev0:
 1381 0000 01       		.uleb128 0x1
 1382 0001 11       		.uleb128 0x11
 1383 0002 01       		.byte	0x1
 1384 0003 25       		.uleb128 0x25
 1385 0004 0E       		.uleb128 0xe
 1386 0005 13       		.uleb128 0x13
 1387 0006 0B       		.uleb128 0xb
 1388 0007 03       		.uleb128 0x3
 1389 0008 0E       		.uleb128 0xe
 1390 0009 1B       		.uleb128 0x1b
 1391 000a 0E       		.uleb128 0xe
 1392 000b 55       		.uleb128 0x55
 1393 000c 17       		.uleb128 0x17
 1394 000d 11       		.uleb128 0x11
 1395 000e 01       		.uleb128 0x1
 1396 000f 10       		.uleb128 0x10
 1397 0010 17       		.uleb128 0x17
 1398 0011 00       		.byte	0
 1399 0012 00       		.byte	0
 1400 0013 02       		.uleb128 0x2
 1401 0014 24       		.uleb128 0x24
 1402 0015 00       		.byte	0
 1403 0016 0B       		.uleb128 0xb
 1404 0017 0B       		.uleb128 0xb
 1405 0018 3E       		.uleb128 0x3e
 1406 0019 0B       		.uleb128 0xb
 1407 001a 03       		.uleb128 0x3
 1408 001b 0E       		.uleb128 0xe
 1409 001c 00       		.byte	0
 1410 001d 00       		.byte	0
 1411 001e 03       		.uleb128 0x3
 1412 001f 16       		.uleb128 0x16
 1413 0020 00       		.byte	0
 1414 0021 03       		.uleb128 0x3
 1415 0022 0E       		.uleb128 0xe
 1416 0023 3A       		.uleb128 0x3a
 1417 0024 0B       		.uleb128 0xb
 1418 0025 3B       		.uleb128 0x3b
 1419 0026 0B       		.uleb128 0xb
 1420 0027 49       		.uleb128 0x49
 1421 0028 13       		.uleb128 0x13
 1422 0029 00       		.byte	0
 1423 002a 00       		.byte	0
 1424 002b 04       		.uleb128 0x4
 1425 002c 24       		.uleb128 0x24
 1426 002d 00       		.byte	0
 1427 002e 0B       		.uleb128 0xb
 1428 002f 0B       		.uleb128 0xb
 1429 0030 3E       		.uleb128 0x3e
 1430 0031 0B       		.uleb128 0xb
 1431 0032 03       		.uleb128 0x3
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 43


 1432 0033 08       		.uleb128 0x8
 1433 0034 00       		.byte	0
 1434 0035 00       		.byte	0
 1435 0036 05       		.uleb128 0x5
 1436 0037 16       		.uleb128 0x16
 1437 0038 00       		.byte	0
 1438 0039 03       		.uleb128 0x3
 1439 003a 0E       		.uleb128 0xe
 1440 003b 3A       		.uleb128 0x3a
 1441 003c 0B       		.uleb128 0xb
 1442 003d 3B       		.uleb128 0x3b
 1443 003e 05       		.uleb128 0x5
 1444 003f 49       		.uleb128 0x49
 1445 0040 13       		.uleb128 0x13
 1446 0041 00       		.byte	0
 1447 0042 00       		.byte	0
 1448 0043 06       		.uleb128 0x6
 1449 0044 35       		.uleb128 0x35
 1450 0045 00       		.byte	0
 1451 0046 49       		.uleb128 0x49
 1452 0047 13       		.uleb128 0x13
 1453 0048 00       		.byte	0
 1454 0049 00       		.byte	0
 1455 004a 07       		.uleb128 0x7
 1456 004b 13       		.uleb128 0x13
 1457 004c 01       		.byte	0x1
 1458 004d 0B       		.uleb128 0xb
 1459 004e 0B       		.uleb128 0xb
 1460 004f 3A       		.uleb128 0x3a
 1461 0050 0B       		.uleb128 0xb
 1462 0051 3B       		.uleb128 0x3b
 1463 0052 0B       		.uleb128 0xb
 1464 0053 01       		.uleb128 0x1
 1465 0054 13       		.uleb128 0x13
 1466 0055 00       		.byte	0
 1467 0056 00       		.byte	0
 1468 0057 08       		.uleb128 0x8
 1469 0058 0D       		.uleb128 0xd
 1470 0059 00       		.byte	0
 1471 005a 03       		.uleb128 0x3
 1472 005b 08       		.uleb128 0x8
 1473 005c 3A       		.uleb128 0x3a
 1474 005d 0B       		.uleb128 0xb
 1475 005e 3B       		.uleb128 0x3b
 1476 005f 0B       		.uleb128 0xb
 1477 0060 49       		.uleb128 0x49
 1478 0061 13       		.uleb128 0x13
 1479 0062 38       		.uleb128 0x38
 1480 0063 0B       		.uleb128 0xb
 1481 0064 00       		.byte	0
 1482 0065 00       		.byte	0
 1483 0066 09       		.uleb128 0x9
 1484 0067 0D       		.uleb128 0xd
 1485 0068 00       		.byte	0
 1486 0069 03       		.uleb128 0x3
 1487 006a 0E       		.uleb128 0xe
 1488 006b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 44


 1489 006c 0B       		.uleb128 0xb
 1490 006d 3B       		.uleb128 0x3b
 1491 006e 0B       		.uleb128 0xb
 1492 006f 49       		.uleb128 0x49
 1493 0070 13       		.uleb128 0x13
 1494 0071 38       		.uleb128 0x38
 1495 0072 0B       		.uleb128 0xb
 1496 0073 00       		.byte	0
 1497 0074 00       		.byte	0
 1498 0075 0A       		.uleb128 0xa
 1499 0076 2E       		.uleb128 0x2e
 1500 0077 00       		.byte	0
 1501 0078 03       		.uleb128 0x3
 1502 0079 0E       		.uleb128 0xe
 1503 007a 3A       		.uleb128 0x3a
 1504 007b 0B       		.uleb128 0xb
 1505 007c 3B       		.uleb128 0x3b
 1506 007d 0B       		.uleb128 0xb
 1507 007e 27       		.uleb128 0x27
 1508 007f 19       		.uleb128 0x19
 1509 0080 11       		.uleb128 0x11
 1510 0081 01       		.uleb128 0x1
 1511 0082 12       		.uleb128 0x12
 1512 0083 06       		.uleb128 0x6
 1513 0084 40       		.uleb128 0x40
 1514 0085 18       		.uleb128 0x18
 1515 0086 9642     		.uleb128 0x2116
 1516 0088 19       		.uleb128 0x19
 1517 0089 00       		.byte	0
 1518 008a 00       		.byte	0
 1519 008b 0B       		.uleb128 0xb
 1520 008c 2E       		.uleb128 0x2e
 1521 008d 01       		.byte	0x1
 1522 008e 3F       		.uleb128 0x3f
 1523 008f 19       		.uleb128 0x19
 1524 0090 03       		.uleb128 0x3
 1525 0091 0E       		.uleb128 0xe
 1526 0092 3A       		.uleb128 0x3a
 1527 0093 0B       		.uleb128 0xb
 1528 0094 3B       		.uleb128 0x3b
 1529 0095 05       		.uleb128 0x5
 1530 0096 27       		.uleb128 0x27
 1531 0097 19       		.uleb128 0x19
 1532 0098 11       		.uleb128 0x11
 1533 0099 01       		.uleb128 0x1
 1534 009a 12       		.uleb128 0x12
 1535 009b 06       		.uleb128 0x6
 1536 009c 40       		.uleb128 0x40
 1537 009d 18       		.uleb128 0x18
 1538 009e 9642     		.uleb128 0x2116
 1539 00a0 19       		.uleb128 0x19
 1540 00a1 01       		.uleb128 0x1
 1541 00a2 13       		.uleb128 0x13
 1542 00a3 00       		.byte	0
 1543 00a4 00       		.byte	0
 1544 00a5 0C       		.uleb128 0xc
 1545 00a6 34       		.uleb128 0x34
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 45


 1546 00a7 00       		.byte	0
 1547 00a8 03       		.uleb128 0x3
 1548 00a9 0E       		.uleb128 0xe
 1549 00aa 3A       		.uleb128 0x3a
 1550 00ab 0B       		.uleb128 0xb
 1551 00ac 3B       		.uleb128 0x3b
 1552 00ad 05       		.uleb128 0x5
 1553 00ae 49       		.uleb128 0x49
 1554 00af 13       		.uleb128 0x13
 1555 00b0 02       		.uleb128 0x2
 1556 00b1 18       		.uleb128 0x18
 1557 00b2 00       		.byte	0
 1558 00b3 00       		.byte	0
 1559 00b4 0D       		.uleb128 0xd
 1560 00b5 34       		.uleb128 0x34
 1561 00b6 00       		.byte	0
 1562 00b7 03       		.uleb128 0x3
 1563 00b8 0E       		.uleb128 0xe
 1564 00b9 3A       		.uleb128 0x3a
 1565 00ba 0B       		.uleb128 0xb
 1566 00bb 3B       		.uleb128 0x3b
 1567 00bc 05       		.uleb128 0x5
 1568 00bd 49       		.uleb128 0x49
 1569 00be 13       		.uleb128 0x13
 1570 00bf 3F       		.uleb128 0x3f
 1571 00c0 19       		.uleb128 0x19
 1572 00c1 3C       		.uleb128 0x3c
 1573 00c2 19       		.uleb128 0x19
 1574 00c3 00       		.byte	0
 1575 00c4 00       		.byte	0
 1576 00c5 0E       		.uleb128 0xe
 1577 00c6 01       		.uleb128 0x1
 1578 00c7 01       		.byte	0x1
 1579 00c8 49       		.uleb128 0x49
 1580 00c9 13       		.uleb128 0x13
 1581 00ca 01       		.uleb128 0x1
 1582 00cb 13       		.uleb128 0x13
 1583 00cc 00       		.byte	0
 1584 00cd 00       		.byte	0
 1585 00ce 0F       		.uleb128 0xf
 1586 00cf 21       		.uleb128 0x21
 1587 00d0 00       		.byte	0
 1588 00d1 49       		.uleb128 0x49
 1589 00d2 13       		.uleb128 0x13
 1590 00d3 2F       		.uleb128 0x2f
 1591 00d4 0B       		.uleb128 0xb
 1592 00d5 00       		.byte	0
 1593 00d6 00       		.byte	0
 1594 00d7 10       		.uleb128 0x10
 1595 00d8 26       		.uleb128 0x26
 1596 00d9 00       		.byte	0
 1597 00da 49       		.uleb128 0x49
 1598 00db 13       		.uleb128 0x13
 1599 00dc 00       		.byte	0
 1600 00dd 00       		.byte	0
 1601 00de 00       		.byte	0
 1602              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 46


 1603 0000 54000000 		.4byte	0x54
 1604 0004 0200     		.2byte	0x2
 1605 0006 00000000 		.4byte	.Ldebug_info0
 1606 000a 04       		.byte	0x4
 1607 000b 00       		.byte	0
 1608 000c 0000     		.2byte	0
 1609 000e 0000     		.2byte	0
 1610 0010 00000000 		.4byte	.LFB63
 1611 0014 0E000000 		.4byte	.LFE63-.LFB63
 1612 0018 00000000 		.4byte	.LFB64
 1613 001c 0E000000 		.4byte	.LFE64-.LFB64
 1614 0020 00000000 		.4byte	.LFB65
 1615 0024 0E000000 		.4byte	.LFE65-.LFB65
 1616 0028 00000000 		.4byte	.LFB66
 1617 002c 0E000000 		.4byte	.LFE66-.LFB66
 1618 0030 00000000 		.4byte	.LFB67
 1619 0034 0E000000 		.4byte	.LFE67-.LFB67
 1620 0038 00000000 		.4byte	.LFB68
 1621 003c 0E000000 		.4byte	.LFE68-.LFB68
 1622 0040 00000000 		.4byte	.LFB69
 1623 0044 0E000000 		.4byte	.LFE69-.LFB69
 1624 0048 00000000 		.4byte	.LFB70
 1625 004c 18060000 		.4byte	.LFE70-.LFB70
 1626 0050 00000000 		.4byte	0
 1627 0054 00000000 		.4byte	0
 1628              		.section	.debug_ranges,"",%progbits
 1629              	.Ldebug_ranges0:
 1630 0000 00000000 		.4byte	.LFB63
 1631 0004 0E000000 		.4byte	.LFE63
 1632 0008 00000000 		.4byte	.LFB64
 1633 000c 0E000000 		.4byte	.LFE64
 1634 0010 00000000 		.4byte	.LFB65
 1635 0014 0E000000 		.4byte	.LFE65
 1636 0018 00000000 		.4byte	.LFB66
 1637 001c 0E000000 		.4byte	.LFE66
 1638 0020 00000000 		.4byte	.LFB67
 1639 0024 0E000000 		.4byte	.LFE67
 1640 0028 00000000 		.4byte	.LFB68
 1641 002c 0E000000 		.4byte	.LFE68
 1642 0030 00000000 		.4byte	.LFB69
 1643 0034 0E000000 		.4byte	.LFE69
 1644 0038 00000000 		.4byte	.LFB70
 1645 003c 18060000 		.4byte	.LFE70
 1646 0040 00000000 		.4byte	0
 1647 0044 00000000 		.4byte	0
 1648              		.section	.debug_line,"",%progbits
 1649              	.Ldebug_line0:
 1650 0000 B9020000 		.section	.debug_str,"MS",%progbits,1
 1650      02005801 
 1650      00000201 
 1650      FB0E0D00 
 1650      01010101 
 1651              	.LASF17:
 1652 0000 4461794F 		.ascii	"DayOfWeek\000"
 1652      66576565 
 1652      6B00
 1653              	.LASF40:
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 47


 1654 000a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1654      43313120 
 1654      352E342E 
 1654      31203230 
 1654      31363036 
 1655 003d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1655      20726576 
 1655      6973696F 
 1655      6E203233 
 1655      37373135 
 1656 0070 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1656      66756E63 
 1656      74696F6E 
 1656      2D736563 
 1656      74696F6E 
 1657              	.LASF28:
 1658 0098 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 1658      45766572 
 1658      79446179 
 1658      48616E64 
 1658      6C657200 
 1659              	.LASF9:
 1660 00ac 5F5F696E 		.ascii	"__int32_t\000"
 1660      7433325F 
 1660      7400
 1661              	.LASF4:
 1662 00b6 6C6F6E67 		.ascii	"long int\000"
 1662      20696E74 
 1662      00
 1663              	.LASF44:
 1664 00bf 5254435F 		.ascii	"RTC_tmp\000"
 1664      746D7000 
 1665              	.LASF37:
 1666 00c7 5254435F 		.ascii	"RTC_statusDateTime\000"
 1666      73746174 
 1666      75734461 
 1666      74655469 
 1666      6D6500
 1667              	.LASF34:
 1668 00da 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 1668      616C6172 
 1668      6D436667 
 1668      4D61736B 
 1668      00
 1669              	.LASF31:
 1670 00eb 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 1670      45766572 
 1670      79596561 
 1670      7248616E 
 1670      646C6572 
 1671              	.LASF13:
 1672 0100 666C6F61 		.ascii	"float\000"
 1672      7400
 1673              	.LASF42:
 1674 0106 433A5C55 		.ascii	"C:\\Users\\bk\\Documents\\GitHub\\Open Storm\\notor"
 1674      73657273 
 1674      5C626B5C 
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 48


 1674      446F6375 
 1674      6D656E74 
 1675 0133 694F535C 		.ascii	"iOS\\notoriOS\\notoriOS.cydsn\000"
 1675      6E6F746F 
 1675      72694F53 
 1675      5C6E6F74 
 1675      6F72694F 
 1676              	.LASF1:
 1677 014f 756E7369 		.ascii	"unsigned char\000"
 1677      676E6564 
 1677      20636861 
 1677      7200
 1678              	.LASF43:
 1679 015d 5254435F 		.ascii	"RTC_ISR\000"
 1679      49535200 
 1680              	.LASF25:
 1681 0165 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 1681      45766572 
 1681      79536563 
 1681      6F6E6448 
 1681      616E646C 
 1682              	.LASF5:
 1683 017c 6C6F6E67 		.ascii	"long unsigned int\000"
 1683      20756E73 
 1683      69676E65 
 1683      6420696E 
 1683      7400
 1684              	.LASF3:
 1685 018e 73686F72 		.ascii	"short unsigned int\000"
 1685      7420756E 
 1685      7369676E 
 1685      65642069 
 1685      6E7400
 1686              	.LASF19:
 1687 01a1 4461794F 		.ascii	"DayOfYear\000"
 1687      66596561 
 1687      7200
 1688              	.LASF20:
 1689 01ab 4D6F6E74 		.ascii	"Month\000"
 1689      6800
 1690              	.LASF32:
 1691 01b1 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 1691      616C6172 
 1691      6D436667 
 1691      54696D65 
 1691      44617465 
 1692              	.LASF21:
 1693 01c6 59656172 		.ascii	"Year\000"
 1693      00
 1694              	.LASF18:
 1695 01cb 4461794F 		.ascii	"DayOfMonth\000"
 1695      664D6F6E 
 1695      746800
 1696              	.LASF14:
 1697 01d6 646F7562 		.ascii	"double\000"
 1697      6C6500
 1698              	.LASF12:
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 49


 1699 01dd 75696E74 		.ascii	"uint16\000"
 1699      313600
 1700              	.LASF39:
 1701 01e4 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1701      52784275 
 1701      66666572 
 1701      00
 1702              	.LASF8:
 1703 01f1 756E7369 		.ascii	"unsigned int\000"
 1703      676E6564 
 1703      20696E74 
 1703      00
 1704              	.LASF30:
 1705 01fe 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 1705      45766572 
 1705      794D6F6E 
 1705      74684861 
 1705      6E646C65 
 1706              	.LASF7:
 1707 0214 6C6F6E67 		.ascii	"long long unsigned int\000"
 1707      206C6F6E 
 1707      6720756E 
 1707      7369676E 
 1707      65642069 
 1708              	.LASF35:
 1709 022b 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 1709      616C6172 
 1709      6D437572 
 1709      53746174 
 1709      757300
 1710              	.LASF29:
 1711 023e 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 1711      45766572 
 1711      79576565 
 1711      6B48616E 
 1711      646C6572 
 1712              	.LASF33:
 1713 0253 5254435F 		.ascii	"RTC_currentTimeDate\000"
 1713      63757272 
 1713      656E7454 
 1713      696D6544 
 1713      61746500 
 1714              	.LASF10:
 1715 0267 696E7433 		.ascii	"int32_t\000"
 1715      325F7400 
 1716              	.LASF24:
 1717 026f 73697A65 		.ascii	"sizetype\000"
 1717      74797065 
 1717      00
 1718              	.LASF16:
 1719 0278 486F7572 		.ascii	"Hour\000"
 1719      00
 1720              	.LASF38:
 1721 027d 5254435F 		.ascii	"RTC_daysInMonths\000"
 1721      64617973 
 1721      496E4D6F 
 1721      6E746873 
ARM GAS  C:\Users\bk\AppData\Local\Temp\ccYXbcgm.s 			page 50


 1721      00
 1722              	.LASF6:
 1723 028e 6C6F6E67 		.ascii	"long long int\000"
 1723      206C6F6E 
 1723      6720696E 
 1723      7400
 1724              	.LASF15:
 1725 029c 63686172 		.ascii	"char\000"
 1725      00
 1726              	.LASF27:
 1727 02a1 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 1727      45766572 
 1727      79486F75 
 1727      7248616E 
 1727      646C6572 
 1728              	.LASF2:
 1729 02b6 73686F72 		.ascii	"short int\000"
 1729      7420696E 
 1729      7400
 1730              	.LASF11:
 1731 02c0 75696E74 		.ascii	"uint8\000"
 1731      3800
 1732              	.LASF26:
 1733 02c6 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 1733      45766572 
 1733      794D696E 
 1733      75746548 
 1733      616E646C 
 1734              	.LASF22:
 1735 02dd 5254435F 		.ascii	"RTC_TIME_DATE\000"
 1735      54494D45 
 1735      5F444154 
 1735      4500
 1736              	.LASF23:
 1737 02eb 6C6F6E67 		.ascii	"long double\000"
 1737      20646F75 
 1737      626C6500 
 1738              	.LASF0:
 1739 02f7 7369676E 		.ascii	"signed char\000"
 1739      65642063 
 1739      68617200 
 1740              	.LASF41:
 1741 0303 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 1741      72617465 
 1741      645F536F 
 1741      75726365 
 1741      5C50536F 
 1742              	.LASF36:
 1743 0324 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 1743      696E7465 
 1743      7276616C 
 1743      4366674D 
 1743      61736B00 
 1744              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
