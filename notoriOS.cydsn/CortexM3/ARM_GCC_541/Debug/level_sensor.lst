ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"level_sensor.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	inbox,100,4
  33              		.comm	http_request,10000,4
  34              		.comm	http_body,10000,4
  35              		.comm	http_route,200,4
  36              		.comm	system_info,28,4
  37              		.comm	system_settings,104,4
  38              		.comm	alarmMeasure,6,4
  39              		.comm	timeToMeasure,1,1
  40              		.comm	alarmSync,6,4
  41              		.comm	timeToSync,1,1
  42              		.comm	timeToSycnRemoteParams,1,1
  43              		.comm	hey,1,1
  44              		.comm	alarmAppLED,6,4
  45              		.comm	timeToAppLED,1,1
  46              		.bss
  47              		.align	2
  48              	uart_chars:
  49 0000 00000000 		.space	257
  49      00000000 
  49      00000000 
  49      00000000 
  49      00000000 
  50              	num_chars:
  51 0101 00       		.space	1
  52              		.data
  53              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 2


  54              		.type	line, %object
  55              		.size	line, 4
  56              	line:
  57 0000 00000000 		.word	uart_chars
  58              		.bss
  59 0102 0000     		.align	2
  60              	match:
  61 0104 00000000 		.space	4
  62              		.align	2
  63              	pattern:
  64 0108 00000000 		.space	4
  65              		.section	.text.uart_string,"ax",%progbits
  66              		.align	2
  67              		.global	uart_string
  68              		.thumb
  69              		.thumb_func
  70              		.type	uart_string, %function
  71              	uart_string:
  72              	.LFB64:
  73              		.file 1 "level_sensor.c"
   1:level_sensor.c **** #include "level_sensor.h"
   2:level_sensor.c **** #include "notoriOS.h"
   3:level_sensor.c **** 
   4:level_sensor.c **** /* === Driver Functions === */
   5:level_sensor.c **** 
   6:level_sensor.c **** //Sensor related global calls
   7:level_sensor.c **** 
   8:level_sensor.c **** 
   9:level_sensor.c **** // Circular buffer of recently received chars.
  10:level_sensor.c **** // Initialize all the members of the array uart_chars to 0. 
  11:level_sensor.c **** static char uart_chars[257] = {0};
  12:level_sensor.c **** static uint8_t num_chars = 0;
  13:level_sensor.c **** 
  14:level_sensor.c **** static const char *line = uart_chars;
  15:level_sensor.c **** // Only pointers can be null, where null is a special address used to signify that the pointer is n
  16:level_sensor.c **** // Pointers are not initialized to null by default, you must do so if you want them initialized.
  17:level_sensor.c **** static const char *match = NULL;
  18:level_sensor.c **** static const char *pattern = NULL;
  19:level_sensor.c **** 
  20:level_sensor.c **** 
  21:level_sensor.c **** // This is only defined in c file so this function will return the location in memory where that va
  22:level_sensor.c **** const char *uart_string(void) {
  74              		.loc 1 22 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 7, -4
  82 0002 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
  23:level_sensor.c ****     // Variables in front of a variable is casting 
  24:level_sensor.c ****     // uart_chars may be a different variable type, make sure to cast it as a char
  25:level_sensor.c ****   return (char*)uart_chars;
  84              		.loc 1 25 0
  85 0004 024B     		ldr	r3, .L3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 3


  26:level_sensor.c **** }
  86              		.loc 1 26 0
  87 0006 1846     		mov	r0, r3
  88 0008 BD46     		mov	sp, r7
  89              		.cfi_def_cfa_register 13
  90              		@ sp needed
  91 000a 80BC     		pop	{r7}
  92              		.cfi_restore 7
  93              		.cfi_def_cfa_offset 0
  94 000c 7047     		bx	lr
  95              	.L4:
  96 000e 00BF     		.align	2
  97              	.L3:
  98 0010 00000000 		.word	uart_chars
  99              		.cfi_endproc
 100              	.LFE64:
 101              		.size	uart_string, .-uart_string
 102              		.section	.text.uart_len,"ax",%progbits
 103              		.align	2
 104              		.global	uart_len
 105              		.thumb
 106              		.thumb_func
 107              		.type	uart_len, %function
 108              	uart_len:
 109              	.LFB65:
  27:level_sensor.c **** 
  28:level_sensor.c **** // Return the number of characters of the level sensor reading
  29:level_sensor.c **** uint8_t uart_len(void) {
 110              		.loc 1 29 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
 116              		.cfi_def_cfa_offset 4
 117              		.cfi_offset 7, -4
 118 0002 00AF     		add	r7, sp, #0
 119              		.cfi_def_cfa_register 7
  30:level_sensor.c ****   return num_chars;
 120              		.loc 1 30 0
 121 0004 024B     		ldr	r3, .L7
 122 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  31:level_sensor.c **** }
 123              		.loc 1 31 0
 124 0008 1846     		mov	r0, r3
 125 000a BD46     		mov	sp, r7
 126              		.cfi_def_cfa_register 13
 127              		@ sp needed
 128 000c 80BC     		pop	{r7}
 129              		.cfi_restore 7
 130              		.cfi_def_cfa_offset 0
 131 000e 7047     		bx	lr
 132              	.L8:
 133              		.align	2
 134              	.L7:
 135 0010 01010000 		.word	num_chars
 136              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 4


 137              	.LFE65:
 138              		.size	uart_len, .-uart_len
 139              		.section	.text.uart_clear,"ax",%progbits
 140              		.align	2
 141              		.global	uart_clear
 142              		.thumb
 143              		.thumb_func
 144              		.type	uart_clear, %function
 145              	uart_clear:
 146              	.LFB66:
  32:level_sensor.c **** 
  33:level_sensor.c **** // Clears the sensor data 
  34:level_sensor.c **** void uart_clear(void) {
 147              		.loc 1 34 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151 0000 80B5     		push	{r7, lr}
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
  35:level_sensor.c ****   // UART_ClearRxBuffer(): Clears the receiver memory buffer and hardware RX FIFO of all received d
  36:level_sensor.c ****   Level_Sensor_UART_ClearRxBuffer();
 157              		.loc 1 36 0
 158 0004 FFF7FEFF 		bl	Level_Sensor_UART_ClearRxBuffer
  37:level_sensor.c ****   // void *memset(void *str, int c, size_t n) where str is a pointer to the block of memory to fill
  38:level_sensor.c ****   // The value is passed as an int, but the function fills the block of memory using the unsigned c
  39:level_sensor.c ****   // n is the number of bytes to be set to the value.
  40:level_sensor.c ****   memset((void*)uart_chars, 0, 256);
 159              		.loc 1 40 0
 160 0008 4FF48072 		mov	r2, #256
 161 000c 0021     		movs	r1, #0
 162 000e 0448     		ldr	r0, .L10
 163 0010 FFF7FEFF 		bl	memset
  41:level_sensor.c ****   num_chars = 0;
 164              		.loc 1 41 0
 165 0014 034B     		ldr	r3, .L10+4
 166 0016 0022     		movs	r2, #0
 167 0018 1A70     		strb	r2, [r3]
  42:level_sensor.c **** }
 168              		.loc 1 42 0
 169 001a 00BF     		nop
 170 001c 80BD     		pop	{r7, pc}
 171              	.L11:
 172 001e 00BF     		.align	2
 173              	.L10:
 174 0020 00000000 		.word	uart_chars
 175 0024 01010000 		.word	num_chars
 176              		.cfi_endproc
 177              	.LFE66:
 178              		.size	uart_clear, .-uart_clear
 179              		.section	.text.Level_Sensor_ISR,"ax",%progbits
 180              		.align	2
 181              		.global	Level_Sensor_ISR
 182              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 5


 183              		.thumb_func
 184              		.type	Level_Sensor_ISR, %function
 185              	Level_Sensor_ISR:
 186              	.LFB67:
  43:level_sensor.c **** 
  44:level_sensor.c **** // ISR: Interrupt Service Routine
  45:level_sensor.c **** CY_ISR(Level_Sensor_ISR) {
 187              		.loc 1 45 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 8
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 82B0     		sub	sp, sp, #8
 196              		.cfi_def_cfa_offset 16
 197 0004 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
  46:level_sensor.c ****     /* Store received char in uart_chars.
  47:level_sensor.c ****     Returns the last received byte of data. Level_Sensor_UART_GetChar() is designed for ASCII chara
  48:level_sensor.c ****     1 to 255 are values for valid characters and 0 indicats an error occurred or no data is present
  49:level_sensor.c ****     char rx_char = Level_Sensor_UART_GetChar();
 199              		.loc 1 49 0
 200 0006 FFF7FEFF 		bl	Level_Sensor_UART_GetChar
 201 000a 0346     		mov	r3, r0
 202 000c FB71     		strb	r3, [r7, #7]
  50:level_sensor.c ****     // UART_GetChar() returns data, then set the entire uart_chars array to rx_char.
  51:level_sensor.c ****     if (rx_char) uart_chars[num_chars++] = rx_char;
 203              		.loc 1 51 0
 204 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 205 0010 002B     		cmp	r3, #0
 206 0012 09D0     		beq	.L13
 207              		.loc 1 51 0 is_stmt 0 discriminator 1
 208 0014 114B     		ldr	r3, .L16
 209 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 210 0018 5A1C     		adds	r2, r3, #1
 211 001a D1B2     		uxtb	r1, r2
 212 001c 0F4A     		ldr	r2, .L16
 213 001e 1170     		strb	r1, [r2]
 214 0020 1946     		mov	r1, r3
 215 0022 0F4A     		ldr	r2, .L16+4
 216 0024 FB79     		ldrb	r3, [r7, #7]
 217 0026 5354     		strb	r3, [r2, r1]
 218              	.L13:
  52:level_sensor.c **** 
  53:level_sensor.c ****     /* Check pattern at end of line */
  54:level_sensor.c ****     if (rx_char == '\r') {
 219              		.loc 1 54 0 is_stmt 1
 220 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 221 002a 0D2B     		cmp	r3, #13
 222 002c 11D1     		bne	.L15
  55:level_sensor.c ****         // strstr(): char *strstr(const char *haystack, const char *needle). haystack - main C stri
  56:level_sensor.c ****         match = strstr(line, pattern);
 223              		.loc 1 56 0
 224 002e 0D4B     		ldr	r3, .L16+8
 225 0030 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 6


 226 0032 0D4B     		ldr	r3, .L16+12
 227 0034 1B68     		ldr	r3, [r3]
 228 0036 1946     		mov	r1, r3
 229 0038 1046     		mov	r0, r2
 230 003a FFF7FEFF 		bl	strstr
 231 003e 0246     		mov	r2, r0
 232 0040 0A4B     		ldr	r3, .L16+16
 233 0042 1A60     		str	r2, [r3]
  57:level_sensor.c ****         line = uart_chars + num_chars;
 234              		.loc 1 57 0
 235 0044 054B     		ldr	r3, .L16
 236 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 237 0048 1A46     		mov	r2, r3
 238 004a 054B     		ldr	r3, .L16+4
 239 004c 1344     		add	r3, r3, r2
 240 004e 054A     		ldr	r2, .L16+8
 241 0050 1360     		str	r3, [r2]
 242              	.L15:
  58:level_sensor.c ****     }
  59:level_sensor.c **** }
 243              		.loc 1 59 0
 244 0052 00BF     		nop
 245 0054 0837     		adds	r7, r7, #8
 246              		.cfi_def_cfa_offset 8
 247 0056 BD46     		mov	sp, r7
 248              		.cfi_def_cfa_register 13
 249              		@ sp needed
 250 0058 80BD     		pop	{r7, pc}
 251              	.L17:
 252 005a 00BF     		.align	2
 253              	.L16:
 254 005c 01010000 		.word	num_chars
 255 0060 00000000 		.word	uart_chars
 256 0064 00000000 		.word	line
 257 0068 08010000 		.word	pattern
 258 006c 04010000 		.word	match
 259              		.cfi_endproc
 260              	.LFE67:
 261              		.size	Level_Sensor_ISR, .-Level_Sensor_ISR
 262              		.section	.rodata
 263              		.align	2
 264              	.LC0:
 265 0000 5200     		.ascii	"R\000"
 266              		.section	.text.level_sensor_take_reading,"ax",%progbits
 267              		.align	2
 268              		.global	level_sensor_take_reading
 269              		.thumb
 270              		.thumb_func
 271              		.type	level_sensor_take_reading, %function
 272              	level_sensor_take_reading:
 273              	.LFB68:
  60:level_sensor.c **** 
  61:level_sensor.c **** // takes level sensor measurements and calculates average level sensor reading
  62:level_sensor.c **** level_sensor_t level_sensor_take_reading(){
 274              		.loc 1 62 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 7


 277              		@ frame_needed = 1, uses_anonymous_args = 0
 278 0000 B0B5     		push	{r4, r5, r7, lr}
 279              		.cfi_def_cfa_offset 16
 280              		.cfi_offset 4, -16
 281              		.cfi_offset 5, -12
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284 0002 8AB0     		sub	sp, sp, #40
 285              		.cfi_def_cfa_offset 56
 286 0004 00AF     		add	r7, sp, #0
 287              		.cfi_def_cfa_register 7
 288 0006 7860     		str	r0, [r7, #4]
  63:level_sensor.c ****     
  64:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
  65:level_sensor.c ****     level_sensor_t level_sensor_output;
  66:level_sensor.c ****     level_sensor_output.num_invalid_readings = 0;
 289              		.loc 1 66 0
 290 0008 0023     		movs	r3, #0
 291 000a 87F82130 		strb	r3, [r7, #33]
  67:level_sensor.c ****     level_sensor_output.num_valid_readings = 0;
 292              		.loc 1 67 0
 293 000e 0023     		movs	r3, #0
 294 0010 87F82030 		strb	r3, [r7, #32]
  68:level_sensor.c ****     
  69:level_sensor.c ****     uart_clear();
 295              		.loc 1 69 0
 296 0014 FFF7FEFF 		bl	uart_clear
  70:level_sensor.c ****     
  71:level_sensor.c ****     // Start sensor power, uart, and isr
  72:level_sensor.c ****     Level_Sensor_Power_Write(ON);   // Pulls Level Sensor power pin high (turns it on).
 297              		.loc 1 72 0
 298 0018 0120     		movs	r0, #1
 299 001a FFF7FEFF 		bl	Level_Sensor_Power_Write
  73:level_sensor.c ****     CyDelay(200u); // Sensor bootup sequence ~200ms -- senosor will spit out ID info, but we don't 
 300              		.loc 1 73 0
 301 001e C820     		movs	r0, #200
 302 0020 FFF7FEFF 		bl	CyDelay
  74:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_DIG_HIZ); // RX_SetDriveMode(): Sets the drive mode for eac
 303              		.loc 1 74 0
 304 0024 0220     		movs	r0, #2
 305 0026 FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
  75:level_sensor.c ****     Level_Sensor_UART_Start(); // Level_Sensor_UART_Start() sets the initVar variable, calls the Le
 306              		.loc 1 75 0
 307 002a FFF7FEFF 		bl	Level_Sensor_UART_Start
  76:level_sensor.c ****     Level_Sensor_ISR_StartEx(Level_Sensor_ISR); // Sets up the interrupt and enables it.
 308              		.loc 1 76 0
 309 002e 3848     		ldr	r0, .L27
 310 0030 FFF7FEFF 		bl	Level_Sensor_ISR_StartEx
  77:level_sensor.c ****     
  78:level_sensor.c ****     // Wait to take  reading
  79:level_sensor.c ****     // Sensor will take ~200ms to send first reading, and 200ms for subsequent readings
  80:level_sensor.c ****     CyDelay(2000u); // Take a few seconds to get readings, 2 secs ~10 readings
 311              		.loc 1 80 0
 312 0034 4FF4FA60 		mov	r0, #2000
 313 0038 FFF7FEFF 		bl	CyDelay
  81:level_sensor.c ****     
  82:level_sensor.c ****     //stop all sensor processes
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 8


  83:level_sensor.c ****     Level_Sensor_UART_Stop(); // Disables the UART operation.
 314              		.loc 1 83 0
 315 003c FFF7FEFF 		bl	Level_Sensor_UART_Stop
  84:level_sensor.c ****     Level_Sensor_ISR_Stop(); // Disables and removes the interrupt.
 316              		.loc 1 84 0
 317 0040 FFF7FEFF 		bl	Level_Sensor_ISR_Stop
  85:level_sensor.c ****     Level_Sensor_Power_Write(OFF); // Pulls Level Sensor Power pin low (turns it off).
 318              		.loc 1 85 0
 319 0044 0020     		movs	r0, #0
 320 0046 FFF7FEFF 		bl	Level_Sensor_Power_Write
  86:level_sensor.c ****     // RX_SetDriveMode(): Sets the drive mode for each of the Pins component's pins.
  87:level_sensor.c ****     // String Drive Mode means it will only be outputting a voltage (don't send any data) when pull
  88:level_sensor.c ****     // UART in PSOC starts high. Then pulls low to get data. When turn sensor off, still using powe
  89:level_sensor.c ****     // So turning it to Strong Drive has it stay low.
  90:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_STRONG);
 321              		.loc 1 90 0
 322 004a 0C20     		movs	r0, #12
 323 004c FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
  91:level_sensor.c ****     // Stops writing the value to the physical port.
  92:level_sensor.c ****     // Just because turn power of sensor off, pin could still be high and getting power. This ensur
  93:level_sensor.c ****     Level_Sensor_RX_Write(OFF);
 324              		.loc 1 93 0
 325 0050 0020     		movs	r0, #0
 326 0052 FFF7FEFF 		bl	Level_Sensor_RX_Write
  94:level_sensor.c **** 
  95:level_sensor.c ****     /* Return parsed reading */
  96:level_sensor.c ****     // Parse string and put all values into array
  97:level_sensor.c ****     // The sensor will power on and do a few things, after which the readigs will follow with the s
  98:level_sensor.c ****     // Readings are stashed between "R" and "\000"
  99:level_sensor.c ****     char *token;
 100:level_sensor.c ****     // strtok(): breaks uart_chars into smaller string when sees "R".
 101:level_sensor.c ****     token = strtok(uart_chars, "R");
 327              		.loc 1 101 0
 328 0056 2F49     		ldr	r1, .L27+4
 329 0058 2F48     		ldr	r0, .L27+8
 330 005a FFF7FEFF 		bl	strtok
 331 005e 7862     		str	r0, [r7, #36]
 102:level_sensor.c ****     /* walk through other tokens */
 103:level_sensor.c ****    while( token != NULL ) 
 332              		.loc 1 103 0
 333 0060 33E0     		b	.L19
 334              	.L24:
 104:level_sensor.c ****    {
 105:level_sensor.c ****       if(strstr(token, "\r") != NULL){ // Full reading is delimieted by "R" + reading + "\r"
 335              		.loc 1 105 0
 336 0062 0D21     		movs	r1, #13
 337 0064 786A     		ldr	r0, [r7, #36]
 338 0066 FFF7FEFF 		bl	strchr
 339 006a 0346     		mov	r3, r0
 340 006c 002B     		cmp	r3, #0
 341 006e 27D0     		beq	.L20
 342              	.LBB2:
 106:level_sensor.c ****         // int atoi(const char *str) converts the string argument str to an integer (type int).
 107:level_sensor.c ****         uint16 reading = atoi(token);
 343              		.loc 1 107 0
 344 0070 786A     		ldr	r0, [r7, #36]
 345 0072 FFF7FEFF 		bl	atoi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 9


 346 0076 0346     		mov	r3, r0
 347 0078 7B84     		strh	r3, [r7, #34]	@ movhi
 108:level_sensor.c ****         if(reading != 0){
 348              		.loc 1 108 0
 349 007a 7B8C     		ldrh	r3, [r7, #34]
 350 007c 002B     		cmp	r3, #0
 351 007e 1FD0     		beq	.L20
 109:level_sensor.c ****             if(reading != READING_INVALID){ // Invald readings by maxbotix
 352              		.loc 1 109 0
 353 0080 7B8C     		ldrh	r3, [r7, #34]
 354 0082 42F20F72 		movw	r2, #9999
 355 0086 9342     		cmp	r3, r2
 356 0088 14D0     		beq	.L21
 110:level_sensor.c ****                 // Set the level readings array of the length of number of valid readings equal to 
 111:level_sensor.c ****                 level_sensor_output.all_level_readings[level_sensor_output.num_valid_readings] = re
 357              		.loc 1 111 0
 358 008a 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 359 008e B7F92220 		ldrsh	r2, [r7, #34]
 360 0092 5B00     		lsls	r3, r3, #1
 361 0094 07F12801 		add	r1, r7, #40
 362 0098 0B44     		add	r3, r3, r1
 363 009a 23F8202C 		strh	r2, [r3, #-32]	@ movhi
 112:level_sensor.c ****                 // If number of valid readings less than 11 total readings, increase the count of v
 113:level_sensor.c ****                 if(level_sensor_output.num_valid_readings < N_READINGS){
 364              		.loc 1 113 0
 365 009e 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 366 00a2 0A2B     		cmp	r3, #10
 367 00a4 15D8     		bhi	.L26
 114:level_sensor.c ****                     level_sensor_output.num_valid_readings++;
 368              		.loc 1 114 0
 369 00a6 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 370 00aa 0133     		adds	r3, r3, #1
 371 00ac DBB2     		uxtb	r3, r3
 372 00ae 87F82030 		strb	r3, [r7, #32]
 373 00b2 05E0     		b	.L20
 374              	.L21:
 115:level_sensor.c ****                 }else{
 116:level_sensor.c ****                  break;   
 117:level_sensor.c ****                 }
 118:level_sensor.c ****                 
 119:level_sensor.c ****             }else{
 120:level_sensor.c ****                 // Otherwise increase the count of invalid readings
 121:level_sensor.c ****                 level_sensor_output.num_invalid_readings++;
 375              		.loc 1 121 0
 376 00b4 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 377 00b8 0133     		adds	r3, r3, #1
 378 00ba DBB2     		uxtb	r3, r3
 379 00bc 87F82130 		strb	r3, [r7, #33]
 380              	.L20:
 381              	.LBE2:
 122:level_sensor.c ****             }
 123:level_sensor.c ****         }
 124:level_sensor.c ****       }
 125:level_sensor.c ****       token = strtok(NULL, "R"); // This "NULL" says to continue where you left off last time.
 382              		.loc 1 125 0
 383 00c0 1449     		ldr	r1, .L27+4
 384 00c2 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 10


 385 00c4 FFF7FEFF 		bl	strtok
 386 00c8 7862     		str	r0, [r7, #36]
 387              	.L19:
 103:level_sensor.c ****    {
 388              		.loc 1 103 0
 389 00ca 7B6A     		ldr	r3, [r7, #36]
 390 00cc 002B     		cmp	r3, #0
 391 00ce C8D1     		bne	.L24
 392 00d0 00E0     		b	.L23
 393              	.L26:
 394              	.LBB3:
 116:level_sensor.c ****                 }
 395              		.loc 1 116 0
 396 00d2 00BF     		nop
 397              	.L23:
 398              	.LBE3:
 126:level_sensor.c ****    }
 127:level_sensor.c ****     // Calculate median level reading
 128:level_sensor.c ****     level_sensor_output.level_reading = find_median(level_sensor_output.all_level_readings,level_se
 399              		.loc 1 128 0
 400 00d4 97F82020 		ldrb	r2, [r7, #32]	@ zero_extendqisi2
 401 00d8 07F10803 		add	r3, r7, #8
 402 00dc 1146     		mov	r1, r2
 403 00de 1846     		mov	r0, r3
 404 00e0 FFF7FEFF 		bl	find_median
 405 00e4 0346     		mov	r3, r0
 406 00e6 1BB2     		sxth	r3, r3
 407 00e8 FB83     		strh	r3, [r7, #30]	@ movhi
 129:level_sensor.c ****     
 130:level_sensor.c ****     return level_sensor_output;
 408              		.loc 1 130 0
 409 00ea 7B68     		ldr	r3, [r7, #4]
 410 00ec 1D46     		mov	r5, r3
 411 00ee 07F10804 		add	r4, r7, #8
 412 00f2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 413 00f4 2860     		str	r0, [r5]	@ unaligned
 414 00f6 6960     		str	r1, [r5, #4]	@ unaligned
 415 00f8 AA60     		str	r2, [r5, #8]	@ unaligned
 416 00fa EB60     		str	r3, [r5, #12]	@ unaligned
 417 00fc 03CC     		ldmia	r4!, {r0, r1}
 418 00fe 2861     		str	r0, [r5, #16]	@ unaligned
 419 0100 6961     		str	r1, [r5, #20]	@ unaligned
 420 0102 2388     		ldrh	r3, [r4]	@ unaligned
 421 0104 2B83     		strh	r3, [r5, #24]	@ unaligned
 131:level_sensor.c **** }
 422              		.loc 1 131 0
 423 0106 7868     		ldr	r0, [r7, #4]
 424 0108 2837     		adds	r7, r7, #40
 425              		.cfi_def_cfa_offset 16
 426 010a BD46     		mov	sp, r7
 427              		.cfi_def_cfa_register 13
 428              		@ sp needed
 429 010c B0BD     		pop	{r4, r5, r7, pc}
 430              	.L28:
 431 010e 00BF     		.align	2
 432              	.L27:
 433 0110 00000000 		.word	Level_Sensor_ISR
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 11


 434 0114 00000000 		.word	.LC0
 435 0118 00000000 		.word	uart_chars
 436              		.cfi_endproc
 437              	.LFE68:
 438              		.size	level_sensor_take_reading, .-level_sensor_take_reading
 439              		.section	.rodata
 440 0002 0000     		.align	2
 441              	.LC1:
 442 0004 54455354 		.ascii	"TEST_LEVEL_SENSOR\000"
 442      5F4C4556 
 442      454C5F53 
 442      454E534F 
 442      5200
 443 0016 0000     		.align	2
 444              	.LC2:
 445 0018 6E57414E 		.ascii	"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.\000"
 445      5445443D 
 445      25642C6E 
 445      52454345 
 445      49564544 
 446              		.section	.text.level_sensor_test,"ax",%progbits
 447              		.align	2
 448              		.global	level_sensor_test
 449              		.thumb
 450              		.thumb_func
 451              		.type	level_sensor_test, %function
 452              	level_sensor_test:
 453              	.LFB69:
 132:level_sensor.c **** 
 133:level_sensor.c **** // Level sensor test
 134:level_sensor.c **** test_t level_sensor_test(){
 454              		.loc 1 134 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 424
 457              		@ frame_needed = 1, uses_anonymous_args = 0
 458 0000 B0B5     		push	{r4, r5, r7, lr}
 459              		.cfi_def_cfa_offset 16
 460              		.cfi_offset 4, -16
 461              		.cfi_offset 5, -12
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 EEB0     		sub	sp, sp, #440
 465              		.cfi_def_cfa_offset 456
 466 0004 04AF     		add	r7, sp, #16
 467              		.cfi_def_cfa 7, 440
 468 0006 3B1D     		adds	r3, r7, #4
 469 0008 1860     		str	r0, [r3]
 135:level_sensor.c ****     
 136:level_sensor.c ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 137:level_sensor.c ****     test.status = 0; // set test status to zero
 470              		.loc 1 137 0
 471 000a 07F12403 		add	r3, r7, #36
 472 000e 0022     		movs	r2, #0
 473 0010 83F88020 		strb	r2, [r3, #128]
 138:level_sensor.c ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_LEVEL_SENSOR");
 474              		.loc 1 138 0
 475 0014 07F12403 		add	r3, r7, #36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 12


 476 0018 2A4A     		ldr	r2, .L33
 477 001a 1C46     		mov	r4, r3
 478 001c 1546     		mov	r5, r2
 479 001e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 480 0020 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 481 0022 2B68     		ldr	r3, [r5]
 482 0024 2380     		strh	r3, [r4]	@ movhi
 139:level_sensor.c **** 
 140:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 141:level_sensor.c ****     level_sensor_t sensor = level_sensor_take_reading();
 483              		.loc 1 141 0
 484 0026 07F10803 		add	r3, r7, #8
 485 002a 1846     		mov	r0, r3
 486 002c FFF7FEFF 		bl	level_sensor_take_reading
 142:level_sensor.c ****     
 143:level_sensor.c ****     // print the max number of readings (11), the number of actual readings, the number of valid re
 144:level_sensor.c ****     snprintf(test.reason,sizeof(test.reason),"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.",
 145:level_sensor.c ****         N_READINGS,
 146:level_sensor.c ****         sensor.num_valid_readings+sensor.num_invalid_readings,
 487              		.loc 1 146 0
 488 0030 07F10803 		add	r3, r7, #8
 489 0034 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 144:level_sensor.c ****         N_READINGS,
 490              		.loc 1 144 0
 491 0036 1A46     		mov	r2, r3
 492              		.loc 1 146 0
 493 0038 07F10803 		add	r3, r7, #8
 494 003c 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 144:level_sensor.c ****         N_READINGS,
 495              		.loc 1 144 0
 496 003e 1344     		add	r3, r3, r2
 147:level_sensor.c ****         sensor.num_valid_readings,
 497              		.loc 1 147 0
 498 0040 07F10802 		add	r2, r7, #8
 499 0044 127E     		ldrb	r2, [r2, #24]	@ zero_extendqisi2
 144:level_sensor.c ****         N_READINGS,
 500              		.loc 1 144 0
 501 0046 1146     		mov	r1, r2
 148:level_sensor.c ****         sensor.level_reading
 502              		.loc 1 148 0
 503 0048 07F10802 		add	r2, r7, #8
 504 004c B2F91620 		ldrsh	r2, [r2, #22]
 144:level_sensor.c ****         N_READINGS,
 505              		.loc 1 144 0
 506 0050 1446     		mov	r4, r2
 507 0052 07F12402 		add	r2, r7, #36
 508 0056 02F18100 		add	r0, r2, #129
 509 005a 0294     		str	r4, [sp, #8]
 510 005c 0191     		str	r1, [sp, #4]
 511 005e 0093     		str	r3, [sp]
 512 0060 0B23     		movs	r3, #11
 513 0062 194A     		ldr	r2, .L33+4
 514 0064 4FF48071 		mov	r1, #256
 515 0068 FFF7FEFF 		bl	snprintf
 149:level_sensor.c ****     );
 150:level_sensor.c ****    
 151:level_sensor.c ****     // if the number valid readings is the max number of readings (11), then the test passes with t
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 13


 152:level_sensor.c ****     if(sensor.num_valid_readings == N_READINGS){//pass
 516              		.loc 1 152 0
 517 006c 07F10803 		add	r3, r7, #8
 518 0070 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 519 0072 0B2B     		cmp	r3, #11
 520 0074 05D1     		bne	.L30
 153:level_sensor.c ****         test.status = 1;
 521              		.loc 1 153 0
 522 0076 07F12403 		add	r3, r7, #36
 523 007a 0122     		movs	r2, #1
 524 007c 83F88020 		strb	r2, [r3, #128]
 525 0080 0EE0     		b	.L31
 526              	.L30:
 154:level_sensor.c ****     // if the number of valid readings is greater than zero and less than the max number of reading
 155:level_sensor.c ****     }else if((sensor.num_valid_readings > 0) && (sensor.num_valid_readings < N_READINGS)){//pass
 527              		.loc 1 155 0
 528 0082 07F10803 		add	r3, r7, #8
 529 0086 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 530 0088 002B     		cmp	r3, #0
 531 008a 09D0     		beq	.L31
 532              		.loc 1 155 0 is_stmt 0 discriminator 1
 533 008c 07F10803 		add	r3, r7, #8
 534 0090 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 535 0092 0A2B     		cmp	r3, #10
 536 0094 04D8     		bhi	.L31
 156:level_sensor.c ****         test.status = 2; //not bad, since we got some OK readings
 537              		.loc 1 156 0 is_stmt 1
 538 0096 07F12403 		add	r3, r7, #36
 539 009a 0222     		movs	r2, #2
 540 009c 83F88020 		strb	r2, [r3, #128]
 541              	.L31:
 157:level_sensor.c ****     }
 158:level_sensor.c ****         
 159:level_sensor.c ****     return test;
 542              		.loc 1 159 0
 543 00a0 3B1D     		adds	r3, r7, #4
 544 00a2 1A68     		ldr	r2, [r3]
 545 00a4 07F12403 		add	r3, r7, #36
 546 00a8 1046     		mov	r0, r2
 547 00aa 1946     		mov	r1, r3
 548 00ac 40F28113 		movw	r3, #385
 549 00b0 1A46     		mov	r2, r3
 550 00b2 FFF7FEFF 		bl	memcpy
 160:level_sensor.c **** }
 551              		.loc 1 160 0
 552 00b6 3B1D     		adds	r3, r7, #4
 553 00b8 1868     		ldr	r0, [r3]
 554 00ba 07F5D477 		add	r7, r7, #424
 555              		.cfi_def_cfa_offset 16
 556 00be BD46     		mov	sp, r7
 557              		.cfi_def_cfa_register 13
 558              		@ sp needed
 559 00c0 B0BD     		pop	{r4, r5, r7, pc}
 560              	.L34:
 561 00c2 00BF     		.align	2
 562              	.L33:
 563 00c4 04000000 		.word	.LC1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 14


 564 00c8 18000000 		.word	.LC2
 565              		.cfi_endproc
 566              	.LFE69:
 567              		.size	level_sensor_test, .-level_sensor_test
 568              		.global	__aeabi_i2d
 569              		.global	__aeabi_ddiv
 570              		.global	__aeabi_d2iz
 571              		.section	.text.find_median,"ax",%progbits
 572              		.align	2
 573              		.global	find_median
 574              		.thumb
 575              		.thumb_func
 576              		.type	find_median, %function
 577              	find_median:
 578              	.LFB70:
 161:level_sensor.c **** 
 162:level_sensor.c **** 
 163:level_sensor.c **** // function to calculate the median of the array, after array is sorted
 164:level_sensor.c **** uint16 find_median(int16 array[] , uint8 n)
 165:level_sensor.c **** {
 579              		.loc 1 165 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 16
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583 0000 90B5     		push	{r4, r7, lr}
 584              		.cfi_def_cfa_offset 12
 585              		.cfi_offset 4, -12
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 85B0     		sub	sp, sp, #20
 589              		.cfi_def_cfa_offset 32
 590 0004 00AF     		add	r7, sp, #0
 591              		.cfi_def_cfa_register 7
 592 0006 7860     		str	r0, [r7, #4]
 593 0008 0B46     		mov	r3, r1
 594 000a FB70     		strb	r3, [r7, #3]
 166:level_sensor.c ****     int16 median=0;
 595              		.loc 1 166 0
 596 000c 0023     		movs	r3, #0
 597 000e FB81     		strh	r3, [r7, #14]	@ movhi
 167:level_sensor.c ****     sort(array,n);
 598              		.loc 1 167 0
 599 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 600 0012 1BB2     		sxth	r3, r3
 601 0014 1946     		mov	r1, r3
 602 0016 7868     		ldr	r0, [r7, #4]
 603 0018 FFF7FEFF 		bl	sort
 168:level_sensor.c ****     
 169:level_sensor.c ****     // if number of elements are even
 170:level_sensor.c ****     if(n%2 == 0)
 604              		.loc 1 170 0
 605 001c FB78     		ldrb	r3, [r7, #3]
 606 001e 03F00103 		and	r3, r3, #1
 607 0022 DBB2     		uxtb	r3, r3
 608 0024 002B     		cmp	r3, #0
 609 0026 25D1     		bne	.L36
 171:level_sensor.c ****         // median is the average of the  two middle sorted numbers
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 15


 172:level_sensor.c ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 610              		.loc 1 172 0
 611 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 612 002a 013B     		subs	r3, r3, #1
 613 002c DA0F     		lsrs	r2, r3, #31
 614 002e 1344     		add	r3, r3, r2
 615 0030 5B10     		asrs	r3, r3, #1
 616 0032 5B00     		lsls	r3, r3, #1
 617 0034 7A68     		ldr	r2, [r7, #4]
 618 0036 1344     		add	r3, r3, r2
 619 0038 B3F90030 		ldrsh	r3, [r3]
 620 003c 1946     		mov	r1, r3
 621 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 622 0040 5B08     		lsrs	r3, r3, #1
 623 0042 DBB2     		uxtb	r3, r3
 624 0044 5B00     		lsls	r3, r3, #1
 625 0046 7A68     		ldr	r2, [r7, #4]
 626 0048 1344     		add	r3, r3, r2
 627 004a B3F90030 		ldrsh	r3, [r3]
 628 004e 0B44     		add	r3, r3, r1
 629 0050 1846     		mov	r0, r3
 630 0052 FFF7FEFF 		bl	__aeabi_i2d
 631 0056 4FF00002 		mov	r2, #0
 632 005a 4FF08043 		mov	r3, #1073741824
 633 005e FFF7FEFF 		bl	__aeabi_ddiv
 634 0062 0346     		mov	r3, r0
 635 0064 0C46     		mov	r4, r1
 636 0066 1846     		mov	r0, r3
 637 0068 2146     		mov	r1, r4
 638 006a FFF7FEFF 		bl	__aeabi_d2iz
 639 006e 0346     		mov	r3, r0
 640 0070 FB81     		strh	r3, [r7, #14]	@ movhi
 641 0072 07E0     		b	.L37
 642              	.L36:
 173:level_sensor.c ****     // if number of elements are odd
 174:level_sensor.c ****     else
 175:level_sensor.c ****         // median is the the middle sorted number 
 176:level_sensor.c ****         median = array[n/2];
 643              		.loc 1 176 0
 644 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 645 0076 5B08     		lsrs	r3, r3, #1
 646 0078 DBB2     		uxtb	r3, r3
 647 007a 5B00     		lsls	r3, r3, #1
 648 007c 7A68     		ldr	r2, [r7, #4]
 649 007e 1344     		add	r3, r3, r2
 650 0080 1B88     		ldrh	r3, [r3]	@ movhi
 651 0082 FB81     		strh	r3, [r7, #14]	@ movhi
 652              	.L37:
 177:level_sensor.c ****     
 178:level_sensor.c ****     return median;
 653              		.loc 1 178 0
 654 0084 FB89     		ldrh	r3, [r7, #14]
 179:level_sensor.c **** }
 655              		.loc 1 179 0
 656 0086 1846     		mov	r0, r3
 657 0088 1437     		adds	r7, r7, #20
 658              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 16


 659 008a BD46     		mov	sp, r7
 660              		.cfi_def_cfa_register 13
 661              		@ sp needed
 662 008c 90BD     		pop	{r4, r7, pc}
 663              		.cfi_endproc
 664              	.LFE70:
 665              		.size	find_median, .-find_median
 666              		.section	.text.sort,"ax",%progbits
 667              		.align	2
 668              		.global	sort
 669              		.thumb
 670              		.thumb_func
 671              		.type	sort, %function
 672              	sort:
 673              	.LFB71:
 180:level_sensor.c **** 
 181:level_sensor.c **** // function to sort the elements in the level readings array
 182:level_sensor.c **** void sort(int16 a[],int16 n) { 
 674              		.loc 1 182 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 16
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 84B0     		sub	sp, sp, #16
 683              		.cfi_def_cfa_offset 24
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 687 0008 0B46     		mov	r3, r1
 688 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 183:level_sensor.c ****    int16 i,j;
 184:level_sensor.c **** 
 185:level_sensor.c ****    for(i = 0;i < n-1;i++) {
 689              		.loc 1 185 0
 690 000c 0023     		movs	r3, #0
 691 000e FB81     		strh	r3, [r7, #14]	@ movhi
 692 0010 37E0     		b	.L40
 693              	.L44:
 186:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 694              		.loc 1 186 0
 695 0012 0023     		movs	r3, #0
 696 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 697 0016 24E0     		b	.L41
 698              	.L43:
 187:level_sensor.c ****          if(a[j] > a[j+1])
 699              		.loc 1 187 0
 700 0018 B7F90C30 		ldrsh	r3, [r7, #12]
 701 001c 5B00     		lsls	r3, r3, #1
 702 001e 7A68     		ldr	r2, [r7, #4]
 703 0020 1344     		add	r3, r3, r2
 704 0022 B3F90020 		ldrsh	r2, [r3]
 705 0026 B7F90C30 		ldrsh	r3, [r7, #12]
 706 002a 0133     		adds	r3, r3, #1
 707 002c 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 17


 708 002e 7968     		ldr	r1, [r7, #4]
 709 0030 0B44     		add	r3, r3, r1
 710 0032 B3F90030 		ldrsh	r3, [r3]
 711 0036 9A42     		cmp	r2, r3
 712 0038 0DDD     		ble	.L42
 188:level_sensor.c ****             swap(&a[j],&a[j+1]); // swap the address of a[j] and a[j+1]
 713              		.loc 1 188 0
 714 003a B7F90C30 		ldrsh	r3, [r7, #12]
 715 003e 5B00     		lsls	r3, r3, #1
 716 0040 7A68     		ldr	r2, [r7, #4]
 717 0042 D018     		adds	r0, r2, r3
 718 0044 B7F90C30 		ldrsh	r3, [r7, #12]
 719 0048 0133     		adds	r3, r3, #1
 720 004a 5B00     		lsls	r3, r3, #1
 721 004c 7A68     		ldr	r2, [r7, #4]
 722 004e 1344     		add	r3, r3, r2
 723 0050 1946     		mov	r1, r3
 724 0052 FFF7FEFF 		bl	swap
 725              	.L42:
 186:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 726              		.loc 1 186 0 discriminator 2
 727 0056 B7F90C30 		ldrsh	r3, [r7, #12]
 728 005a 9BB2     		uxth	r3, r3
 729 005c 0133     		adds	r3, r3, #1
 730 005e 9BB2     		uxth	r3, r3
 731 0060 BB81     		strh	r3, [r7, #12]	@ movhi
 732              	.L41:
 186:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 733              		.loc 1 186 0 is_stmt 0 discriminator 1
 734 0062 B7F90C20 		ldrsh	r2, [r7, #12]
 735 0066 B7F90210 		ldrsh	r1, [r7, #2]
 736 006a B7F90E30 		ldrsh	r3, [r7, #14]
 737 006e CB1A     		subs	r3, r1, r3
 738 0070 013B     		subs	r3, r3, #1
 739 0072 9A42     		cmp	r2, r3
 740 0074 D0DB     		blt	.L43
 185:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 741              		.loc 1 185 0 is_stmt 1 discriminator 2
 742 0076 B7F90E30 		ldrsh	r3, [r7, #14]
 743 007a 9BB2     		uxth	r3, r3
 744 007c 0133     		adds	r3, r3, #1
 745 007e 9BB2     		uxth	r3, r3
 746 0080 FB81     		strh	r3, [r7, #14]	@ movhi
 747              	.L40:
 185:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 748              		.loc 1 185 0 is_stmt 0 discriminator 1
 749 0082 B7F90E20 		ldrsh	r2, [r7, #14]
 750 0086 B7F90230 		ldrsh	r3, [r7, #2]
 751 008a 013B     		subs	r3, r3, #1
 752 008c 9A42     		cmp	r2, r3
 753 008e C0DB     		blt	.L44
 189:level_sensor.c ****       }
 190:level_sensor.c ****    }
 191:level_sensor.c **** }
 754              		.loc 1 191 0 is_stmt 1
 755 0090 00BF     		nop
 756 0092 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 18


 757              		.cfi_def_cfa_offset 8
 758 0094 BD46     		mov	sp, r7
 759              		.cfi_def_cfa_register 13
 760              		@ sp needed
 761 0096 80BD     		pop	{r7, pc}
 762              		.cfi_endproc
 763              	.LFE71:
 764              		.size	sort, .-sort
 765              		.section	.text.swap,"ax",%progbits
 766              		.align	2
 767              		.global	swap
 768              		.thumb
 769              		.thumb_func
 770              		.type	swap, %function
 771              	swap:
 772              	.LFB72:
 192:level_sensor.c **** 
 193:level_sensor.c **** // function to swap elements in the level readings array in order to sort them
 194:level_sensor.c **** void swap(int16 *p,int16 *q) {
 773              		.loc 1 194 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 16
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778 0000 80B4     		push	{r7}
 779              		.cfi_def_cfa_offset 4
 780              		.cfi_offset 7, -4
 781 0002 85B0     		sub	sp, sp, #20
 782              		.cfi_def_cfa_offset 24
 783 0004 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 785 0006 7860     		str	r0, [r7, #4]
 786 0008 3960     		str	r1, [r7]
 195:level_sensor.c ****    int16 t;
 196:level_sensor.c ****    
 197:level_sensor.c ****    t=*p; 
 787              		.loc 1 197 0
 788 000a 7B68     		ldr	r3, [r7, #4]
 789 000c 1B88     		ldrh	r3, [r3]	@ movhi
 790 000e FB81     		strh	r3, [r7, #14]	@ movhi
 198:level_sensor.c ****    *p=*q; 
 791              		.loc 1 198 0
 792 0010 3B68     		ldr	r3, [r7]
 793 0012 B3F90020 		ldrsh	r2, [r3]
 794 0016 7B68     		ldr	r3, [r7, #4]
 795 0018 1A80     		strh	r2, [r3]	@ movhi
 199:level_sensor.c ****    *q=t;
 796              		.loc 1 199 0
 797 001a 3B68     		ldr	r3, [r7]
 798 001c FA89     		ldrh	r2, [r7, #14]	@ movhi
 799 001e 1A80     		strh	r2, [r3]	@ movhi
 200:level_sensor.c **** }
 800              		.loc 1 200 0
 801 0020 00BF     		nop
 802 0022 1437     		adds	r7, r7, #20
 803              		.cfi_def_cfa_offset 4
 804 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 19


 805              		.cfi_def_cfa_register 13
 806              		@ sp needed
 807 0026 80BC     		pop	{r7}
 808              		.cfi_restore 7
 809              		.cfi_def_cfa_offset 0
 810 0028 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE72:
 813              		.size	swap, .-swap
 814 002a 00BF     		.text
 815              	.Letext0:
 816              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 817              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 818              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 819              		.file 5 "testing.h"
 820              		.file 6 "level_sensor.h"
 821              		.file 7 "data.h"
 822              		.file 8 "modem.h"
 823              		.file 9 "notoriOS.h"
 824              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 825              		.file 11 "App_LED.h"
 826              		.section	.debug_info,"",%progbits
 827              	.Ldebug_info0:
 828 0000 8F070000 		.4byte	0x78f
 829 0004 0400     		.2byte	0x4
 830 0006 00000000 		.4byte	.Ldebug_abbrev0
 831 000a 04       		.byte	0x4
 832 000b 01       		.uleb128 0x1
 833 000c A4000000 		.4byte	.LASF106
 834 0010 0C       		.byte	0xc
 835 0011 E6020000 		.4byte	.LASF107
 836 0015 46040000 		.4byte	.LASF108
 837 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 838 001d 00000000 		.4byte	0
 839 0021 00000000 		.4byte	.Ldebug_line0
 840 0025 02       		.uleb128 0x2
 841 0026 01       		.byte	0x1
 842 0027 06       		.byte	0x6
 843 0028 DA020000 		.4byte	.LASF0
 844 002c 03       		.uleb128 0x3
 845 002d 58020000 		.4byte	.LASF4
 846 0031 02       		.byte	0x2
 847 0032 1D       		.byte	0x1d
 848 0033 37000000 		.4byte	0x37
 849 0037 02       		.uleb128 0x2
 850 0038 01       		.byte	0x1
 851 0039 08       		.byte	0x8
 852 003a 93020000 		.4byte	.LASF1
 853 003e 02       		.uleb128 0x2
 854 003f 02       		.byte	0x2
 855 0040 05       		.byte	0x5
 856 0041 66000000 		.4byte	.LASF2
 857 0045 02       		.uleb128 0x2
 858 0046 02       		.byte	0x2
 859 0047 07       		.byte	0x7
 860 0048 73030000 		.4byte	.LASF3
 861 004c 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 20


 862 004d F8030000 		.4byte	.LASF5
 863 0051 02       		.byte	0x2
 864 0052 3F       		.byte	0x3f
 865 0053 57000000 		.4byte	0x57
 866 0057 02       		.uleb128 0x2
 867 0058 04       		.byte	0x4
 868 0059 05       		.byte	0x5
 869 005a 1F020000 		.4byte	.LASF6
 870 005e 02       		.uleb128 0x2
 871 005f 04       		.byte	0x4
 872 0060 07       		.byte	0x7
 873 0061 91040000 		.4byte	.LASF7
 874 0065 02       		.uleb128 0x2
 875 0066 08       		.byte	0x8
 876 0067 05       		.byte	0x5
 877 0068 32010000 		.4byte	.LASF8
 878 006c 02       		.uleb128 0x2
 879 006d 08       		.byte	0x8
 880 006e 07       		.byte	0x7
 881 006f F6010000 		.4byte	.LASF9
 882 0073 04       		.uleb128 0x4
 883 0074 04       		.byte	0x4
 884 0075 05       		.byte	0x5
 885 0076 696E7400 		.ascii	"int\000"
 886 007a 02       		.uleb128 0x2
 887 007b 04       		.byte	0x4
 888 007c 07       		.byte	0x7
 889 007d 05030000 		.4byte	.LASF10
 890 0081 03       		.uleb128 0x3
 891 0082 88010000 		.4byte	.LASF11
 892 0086 03       		.byte	0x3
 893 0087 18       		.byte	0x18
 894 0088 2C000000 		.4byte	0x2c
 895 008c 03       		.uleb128 0x3
 896 008d F0030000 		.4byte	.LASF12
 897 0091 03       		.byte	0x3
 898 0092 2C       		.byte	0x2c
 899 0093 4C000000 		.4byte	0x4c
 900 0097 02       		.uleb128 0x2
 901 0098 08       		.byte	0x8
 902 0099 04       		.byte	0x4
 903 009a 87020000 		.4byte	.LASF13
 904 009e 02       		.uleb128 0x2
 905 009f 04       		.byte	0x4
 906 00a0 07       		.byte	0x7
 907 00a1 8D000000 		.4byte	.LASF14
 908 00a5 05       		.uleb128 0x5
 909 00a6 04       		.byte	0x4
 910 00a7 AB000000 		.4byte	0xab
 911 00ab 02       		.uleb128 0x2
 912 00ac 01       		.byte	0x1
 913 00ad 08       		.byte	0x8
 914 00ae 13020000 		.4byte	.LASF15
 915 00b2 05       		.uleb128 0x5
 916 00b3 04       		.byte	0x4
 917 00b4 B8000000 		.4byte	0xb8
 918 00b8 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 21


 919 00b9 AB000000 		.4byte	0xab
 920 00bd 07       		.uleb128 0x7
 921 00be AB000000 		.4byte	0xab
 922 00c2 CD000000 		.4byte	0xcd
 923 00c6 08       		.uleb128 0x8
 924 00c7 9E000000 		.4byte	0x9e
 925 00cb 17       		.byte	0x17
 926 00cc 00       		.byte	0
 927 00cd 02       		.uleb128 0x2
 928 00ce 08       		.byte	0x8
 929 00cf 04       		.byte	0x4
 930 00d0 B7040000 		.4byte	.LASF16
 931 00d4 02       		.uleb128 0x2
 932 00d5 04       		.byte	0x4
 933 00d6 04       		.byte	0x4
 934 00d7 D5010000 		.4byte	.LASF17
 935 00db 09       		.uleb128 0x9
 936 00dc A2010000 		.4byte	.LASF18
 937 00e0 04       		.byte	0x4
 938 00e1 9201     		.2byte	0x192
 939 00e3 37000000 		.4byte	0x37
 940 00e7 09       		.uleb128 0x9
 941 00e8 81010000 		.4byte	.LASF19
 942 00ec 04       		.byte	0x4
 943 00ed 9301     		.2byte	0x193
 944 00ef 45000000 		.4byte	0x45
 945 00f3 09       		.uleb128 0x9
 946 00f4 0D020000 		.4byte	.LASF20
 947 00f8 04       		.byte	0x4
 948 00f9 9601     		.2byte	0x196
 949 00fb 3E000000 		.4byte	0x3e
 950 00ff 09       		.uleb128 0x9
 951 0100 DB010000 		.4byte	.LASF21
 952 0104 04       		.byte	0x4
 953 0105 9701     		.2byte	0x197
 954 0107 57000000 		.4byte	0x57
 955 010b 0A       		.uleb128 0xa
 956 010c 8101     		.2byte	0x181
 957 010e 05       		.byte	0x5
 958 010f 0A       		.byte	0xa
 959 0110 39010000 		.4byte	0x139
 960 0114 0B       		.uleb128 0xb
 961 0115 2D050000 		.4byte	.LASF22
 962 0119 05       		.byte	0x5
 963 011a 0C       		.byte	0xc
 964 011b 39010000 		.4byte	0x139
 965 011f 00       		.byte	0
 966 0120 0B       		.uleb128 0xb
 967 0121 9E030000 		.4byte	.LASF23
 968 0125 05       		.byte	0x5
 969 0126 0D       		.byte	0xd
 970 0127 DB000000 		.4byte	0xdb
 971 012b 80       		.byte	0x80
 972 012c 0B       		.uleb128 0xb
 973 012d 18020000 		.4byte	.LASF24
 974 0131 05       		.byte	0x5
 975 0132 0F       		.byte	0xf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 22


 976 0133 49010000 		.4byte	0x149
 977 0137 81       		.byte	0x81
 978 0138 00       		.byte	0
 979 0139 07       		.uleb128 0x7
 980 013a AB000000 		.4byte	0xab
 981 013e 49010000 		.4byte	0x149
 982 0142 08       		.uleb128 0x8
 983 0143 9E000000 		.4byte	0x9e
 984 0147 7F       		.byte	0x7f
 985 0148 00       		.byte	0
 986 0149 07       		.uleb128 0x7
 987 014a AB000000 		.4byte	0xab
 988 014e 59010000 		.4byte	0x159
 989 0152 08       		.uleb128 0x8
 990 0153 9E000000 		.4byte	0x9e
 991 0157 FF       		.byte	0xff
 992 0158 00       		.byte	0
 993 0159 03       		.uleb128 0x3
 994 015a 1A050000 		.4byte	.LASF25
 995 015e 05       		.byte	0x5
 996 015f 10       		.byte	0x10
 997 0160 0B010000 		.4byte	0x10b
 998 0164 0C       		.uleb128 0xc
 999 0165 1A       		.byte	0x1a
 1000 0166 06       		.byte	0x6
 1001 0167 10       		.byte	0x10
 1002 0168 9D010000 		.4byte	0x19d
 1003 016c 0B       		.uleb128 0xb
 1004 016d 7A000000 		.4byte	.LASF26
 1005 0171 06       		.byte	0x6
 1006 0172 11       		.byte	0x11
 1007 0173 9D010000 		.4byte	0x19d
 1008 0177 00       		.byte	0
 1009 0178 0B       		.uleb128 0xb
 1010 0179 EB040000 		.4byte	.LASF27
 1011 017d 06       		.byte	0x6
 1012 017e 12       		.byte	0x12
 1013 017f F3000000 		.4byte	0xf3
 1014 0183 16       		.byte	0x16
 1015 0184 0B       		.uleb128 0xb
 1016 0185 6C050000 		.4byte	.LASF28
 1017 0189 06       		.byte	0x6
 1018 018a 13       		.byte	0x13
 1019 018b DB000000 		.4byte	0xdb
 1020 018f 18       		.byte	0x18
 1021 0190 0B       		.uleb128 0xb
 1022 0191 E1010000 		.4byte	.LASF29
 1023 0195 06       		.byte	0x6
 1024 0196 14       		.byte	0x14
 1025 0197 DB000000 		.4byte	0xdb
 1026 019b 19       		.byte	0x19
 1027 019c 00       		.byte	0
 1028 019d 07       		.uleb128 0x7
 1029 019e F3000000 		.4byte	0xf3
 1030 01a2 AD010000 		.4byte	0x1ad
 1031 01a6 08       		.uleb128 0x8
 1032 01a7 9E000000 		.4byte	0x9e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 23


 1033 01ab 0A       		.byte	0xa
 1034 01ac 00       		.byte	0
 1035 01ad 03       		.uleb128 0x3
 1036 01ae 10040000 		.4byte	.LASF30
 1037 01b2 06       		.byte	0x6
 1038 01b3 15       		.byte	0x15
 1039 01b4 64010000 		.4byte	0x164
 1040 01b8 0C       		.uleb128 0xc
 1041 01b9 2C       		.byte	0x2c
 1042 01ba 07       		.byte	0x7
 1043 01bb 14       		.byte	0x14
 1044 01bc E5010000 		.4byte	0x1e5
 1045 01c0 0D       		.uleb128 0xd
 1046 01c1 6B657900 		.ascii	"key\000"
 1047 01c5 07       		.byte	0x7
 1048 01c6 15       		.byte	0x15
 1049 01c7 E5010000 		.4byte	0x1e5
 1050 01cb 00       		.byte	0
 1051 01cc 0B       		.uleb128 0xb
 1052 01cd 69010000 		.4byte	.LASF31
 1053 01d1 07       		.byte	0x7
 1054 01d2 16       		.byte	0x16
 1055 01d3 E5010000 		.4byte	0x1e5
 1056 01d7 14       		.byte	0x14
 1057 01d8 0B       		.uleb128 0xb
 1058 01d9 B2010000 		.4byte	.LASF32
 1059 01dd 07       		.byte	0x7
 1060 01de 17       		.byte	0x17
 1061 01df FF000000 		.4byte	0xff
 1062 01e3 28       		.byte	0x28
 1063 01e4 00       		.byte	0
 1064 01e5 07       		.uleb128 0x7
 1065 01e6 AB000000 		.4byte	0xab
 1066 01ea F5010000 		.4byte	0x1f5
 1067 01ee 08       		.uleb128 0x8
 1068 01ef 9E000000 		.4byte	0x9e
 1069 01f3 13       		.byte	0x13
 1070 01f4 00       		.byte	0
 1071 01f5 03       		.uleb128 0x3
 1072 01f6 12030000 		.4byte	.LASF33
 1073 01fa 07       		.byte	0x7
 1074 01fb 19       		.byte	0x19
 1075 01fc B8010000 		.4byte	0x1b8
 1076 0200 0C       		.uleb128 0xc
 1077 0201 3C       		.byte	0x3c
 1078 0202 08       		.byte	0x8
 1079 0203 35       		.byte	0x35
 1080 0204 2D020000 		.4byte	0x22d
 1081 0208 0B       		.uleb128 0xb
 1082 0209 19000000 		.4byte	.LASF34
 1083 020d 08       		.byte	0x8
 1084 020e 36       		.byte	0x36
 1085 020f E5010000 		.4byte	0x1e5
 1086 0213 00       		.byte	0
 1087 0214 0B       		.uleb128 0xb
 1088 0215 0B000000 		.4byte	.LASF35
 1089 0219 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 24


 1090 021a 37       		.byte	0x37
 1091 021b E5010000 		.4byte	0x1e5
 1092 021f 14       		.byte	0x14
 1093 0220 0B       		.uleb128 0xb
 1094 0221 EB030000 		.4byte	.LASF36
 1095 0225 08       		.byte	0x8
 1096 0226 38       		.byte	0x38
 1097 0227 E5010000 		.4byte	0x1e5
 1098 022b 28       		.byte	0x28
 1099 022c 00       		.byte	0
 1100 022d 03       		.uleb128 0x3
 1101 022e D0040000 		.4byte	.LASF37
 1102 0232 08       		.byte	0x8
 1103 0233 3A       		.byte	0x3a
 1104 0234 00020000 		.4byte	0x200
 1105 0238 0C       		.uleb128 0xc
 1106 0239 20       		.byte	0x20
 1107 023a 08       		.byte	0x8
 1108 023b 3C       		.byte	0x3c
 1109 023c A1020000 		.4byte	0x2a1
 1110 0240 0B       		.uleb128 0xb
 1111 0241 1E030000 		.4byte	.LASF38
 1112 0245 08       		.byte	0x8
 1113 0246 3D       		.byte	0x3d
 1114 0247 73000000 		.4byte	0x73
 1115 024b 00       		.byte	0
 1116 024c 0D       		.uleb128 0xd
 1117 024d 62657200 		.ascii	"ber\000"
 1118 0251 08       		.byte	0x8
 1119 0252 3E       		.byte	0x3e
 1120 0253 73000000 		.4byte	0x73
 1121 0257 04       		.byte	0x4
 1122 0258 0B       		.uleb128 0xb
 1123 0259 AD010000 		.4byte	.LASF39
 1124 025d 08       		.byte	0x8
 1125 025e 3F       		.byte	0x3f
 1126 025f 73000000 		.4byte	0x73
 1127 0263 08       		.byte	0x8
 1128 0264 0B       		.uleb128 0xb
 1129 0265 58010000 		.4byte	.LASF40
 1130 0269 08       		.byte	0x8
 1131 026a 40       		.byte	0x40
 1132 026b 73000000 		.4byte	0x73
 1133 026f 0C       		.byte	0xc
 1134 0270 0B       		.uleb128 0xb
 1135 0271 41040000 		.4byte	.LASF41
 1136 0275 08       		.byte	0x8
 1137 0276 41       		.byte	0x41
 1138 0277 73000000 		.4byte	0x73
 1139 027b 10       		.byte	0x10
 1140 027c 0B       		.uleb128 0xb
 1141 027d A1020000 		.4byte	.LASF42
 1142 0281 08       		.byte	0x8
 1143 0282 42       		.byte	0x42
 1144 0283 73000000 		.4byte	0x73
 1145 0287 14       		.byte	0x14
 1146 0288 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 25


 1147 0289 86030000 		.4byte	.LASF43
 1148 028d 08       		.byte	0x8
 1149 028e 43       		.byte	0x43
 1150 028f 73000000 		.4byte	0x73
 1151 0293 18       		.byte	0x18
 1152 0294 0B       		.uleb128 0xb
 1153 0295 CB030000 		.4byte	.LASF44
 1154 0299 08       		.byte	0x8
 1155 029a 44       		.byte	0x44
 1156 029b 73000000 		.4byte	0x73
 1157 029f 1C       		.byte	0x1c
 1158 02a0 00       		.byte	0
 1159 02a1 03       		.uleb128 0x3
 1160 02a2 02040000 		.4byte	.LASF45
 1161 02a6 08       		.byte	0x8
 1162 02a7 46       		.byte	0x46
 1163 02a8 38020000 		.4byte	0x238
 1164 02ac 0C       		.uleb128 0xc
 1165 02ad 05       		.byte	0x5
 1166 02ae 08       		.byte	0x8
 1167 02af 52       		.byte	0x52
 1168 02b0 F1020000 		.4byte	0x2f1
 1169 02b4 0B       		.uleb128 0xb
 1170 02b5 7F050000 		.4byte	.LASF46
 1171 02b9 08       		.byte	0x8
 1172 02ba 54       		.byte	0x54
 1173 02bb DB000000 		.4byte	0xdb
 1174 02bf 00       		.byte	0
 1175 02c0 0B       		.uleb128 0xb
 1176 02c1 5F030000 		.4byte	.LASF47
 1177 02c5 08       		.byte	0x8
 1178 02c6 56       		.byte	0x56
 1179 02c7 F1020000 		.4byte	0x2f1
 1180 02cb 01       		.byte	0x1
 1181 02cc 0B       		.uleb128 0xb
 1182 02cd B2050000 		.4byte	.LASF48
 1183 02d1 08       		.byte	0x8
 1184 02d2 58       		.byte	0x58
 1185 02d3 DB000000 		.4byte	0xdb
 1186 02d7 02       		.byte	0x2
 1187 02d8 0B       		.uleb128 0xb
 1188 02d9 24030000 		.4byte	.LASF49
 1189 02dd 08       		.byte	0x8
 1190 02de 5A       		.byte	0x5a
 1191 02df DB000000 		.4byte	0xdb
 1192 02e3 03       		.byte	0x3
 1193 02e4 0B       		.uleb128 0xb
 1194 02e5 C4040000 		.4byte	.LASF50
 1195 02e9 08       		.byte	0x8
 1196 02ea 5D       		.byte	0x5d
 1197 02eb DB000000 		.4byte	0xdb
 1198 02ef 04       		.byte	0x4
 1199 02f0 00       		.byte	0
 1200 02f1 02       		.uleb128 0x2
 1201 02f2 01       		.byte	0x1
 1202 02f3 02       		.byte	0x2
 1203 02f4 1F040000 		.4byte	.LASF51
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 26


 1204 02f8 03       		.uleb128 0x3
 1205 02f9 48030000 		.4byte	.LASF52
 1206 02fd 08       		.byte	0x8
 1207 02fe 5F       		.byte	0x5f
 1208 02ff AC020000 		.4byte	0x2ac
 1209 0303 0C       		.uleb128 0xc
 1210 0304 06       		.byte	0x6
 1211 0305 09       		.byte	0x9
 1212 0306 2E       		.byte	0x2e
 1213 0307 3C030000 		.4byte	0x33c
 1214 030b 0B       		.uleb128 0xb
 1215 030c 57000000 		.4byte	.LASF53
 1216 0310 09       		.byte	0x9
 1217 0311 30       		.byte	0x30
 1218 0312 E7000000 		.4byte	0xe7
 1219 0316 00       		.byte	0
 1220 0317 0B       		.uleb128 0xb
 1221 0318 3A000000 		.4byte	.LASF54
 1222 031c 09       		.byte	0x9
 1223 031d 31       		.byte	0x31
 1224 031e F3000000 		.4byte	0xf3
 1225 0322 02       		.byte	0x2
 1226 0323 0B       		.uleb128 0xb
 1227 0324 DD040000 		.4byte	.LASF55
 1228 0328 09       		.byte	0x9
 1229 0329 32       		.byte	0x32
 1230 032a DB000000 		.4byte	0xdb
 1231 032e 04       		.byte	0x4
 1232 032f 0B       		.uleb128 0xb
 1233 0330 37050000 		.4byte	.LASF56
 1234 0334 09       		.byte	0x9
 1235 0335 33       		.byte	0x33
 1236 0336 DB000000 		.4byte	0xdb
 1237 033a 05       		.byte	0x5
 1238 033b 00       		.byte	0
 1239 033c 03       		.uleb128 0x3
 1240 033d 6B020000 		.4byte	.LASF57
 1241 0341 09       		.byte	0x9
 1242 0342 36       		.byte	0x36
 1243 0343 47030000 		.4byte	0x347
 1244 0347 0E       		.uleb128 0xe
 1245 0348 03030000 		.4byte	0x303
 1246 034c 0C       		.uleb128 0xc
 1247 034d 1C       		.byte	0x1c
 1248 034e 09       		.byte	0x9
 1249 034f 39       		.byte	0x39
 1250 0350 6D030000 		.4byte	0x36d
 1251 0354 0B       		.uleb128 0xb
 1252 0355 38020000 		.4byte	.LASF58
 1253 0359 09       		.byte	0x9
 1254 035a 3B       		.byte	0x3b
 1255 035b 6D030000 		.4byte	0x36d
 1256 035f 00       		.byte	0
 1257 0360 0B       		.uleb128 0xb
 1258 0361 4A010000 		.4byte	.LASF59
 1259 0365 09       		.byte	0x9
 1260 0366 3C       		.byte	0x3c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 27


 1261 0367 BD000000 		.4byte	0xbd
 1262 036b 04       		.byte	0x4
 1263 036c 00       		.byte	0
 1264 036d 05       		.uleb128 0x5
 1265 036e 04       		.byte	0x4
 1266 036f 2D020000 		.4byte	0x22d
 1267 0373 03       		.uleb128 0x3
 1268 0374 68030000 		.4byte	.LASF60
 1269 0378 09       		.byte	0x9
 1270 0379 3E       		.byte	0x3e
 1271 037a 4C030000 		.4byte	0x34c
 1272 037e 0C       		.uleb128 0xc
 1273 037f 68       		.byte	0x68
 1274 0380 09       		.byte	0x9
 1275 0381 44       		.byte	0x44
 1276 0382 9F030000 		.4byte	0x39f
 1277 0386 0B       		.uleb128 0xb
 1278 0387 96000000 		.4byte	.LASF61
 1279 038b 09       		.byte	0x9
 1280 038c 49       		.byte	0x49
 1281 038d 9F030000 		.4byte	0x39f
 1282 0391 00       		.byte	0
 1283 0392 0B       		.uleb128 0xb
 1284 0393 64050000 		.4byte	.LASF62
 1285 0397 09       		.byte	0x9
 1286 0398 4A       		.byte	0x4a
 1287 0399 73000000 		.4byte	0x73
 1288 039d 64       		.byte	0x64
 1289 039e 00       		.byte	0
 1290 039f 07       		.uleb128 0x7
 1291 03a0 AB000000 		.4byte	0xab
 1292 03a4 AF030000 		.4byte	0x3af
 1293 03a8 08       		.uleb128 0x8
 1294 03a9 9E000000 		.4byte	0x9e
 1295 03ad 63       		.byte	0x63
 1296 03ae 00       		.byte	0
 1297 03af 03       		.uleb128 0x3
 1298 03b0 2B000000 		.4byte	.LASF63
 1299 03b4 09       		.byte	0x9
 1300 03b5 50       		.byte	0x50
 1301 03b6 7E030000 		.4byte	0x37e
 1302 03ba 0F       		.uleb128 0xf
 1303 03bb 21050000 		.4byte	.LASF64
 1304 03bf 01       		.byte	0x1
 1305 03c0 16       		.byte	0x16
 1306 03c1 B2000000 		.4byte	0xb2
 1307 03c5 00000000 		.4byte	.LFB64
 1308 03c9 14000000 		.4byte	.LFE64-.LFB64
 1309 03cd 01       		.uleb128 0x1
 1310 03ce 9C       		.byte	0x9c
 1311 03cf 0F       		.uleb128 0xf
 1312 03d0 62020000 		.4byte	.LASF65
 1313 03d4 01       		.byte	0x1
 1314 03d5 1D       		.byte	0x1d
 1315 03d6 81000000 		.4byte	0x81
 1316 03da 00000000 		.4byte	.LFB65
 1317 03de 14000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 28


 1318 03e2 01       		.uleb128 0x1
 1319 03e3 9C       		.byte	0x9c
 1320 03e4 10       		.uleb128 0x10
 1321 03e5 20000000 		.4byte	.LASF109
 1322 03e9 01       		.byte	0x1
 1323 03ea 22       		.byte	0x22
 1324 03eb 00000000 		.4byte	.LFB66
 1325 03ef 28000000 		.4byte	.LFE66-.LFB66
 1326 03f3 01       		.uleb128 0x1
 1327 03f4 9C       		.byte	0x9c
 1328 03f5 11       		.uleb128 0x11
 1329 03f6 BD020000 		.4byte	.LASF66
 1330 03fa 01       		.byte	0x1
 1331 03fb 2D       		.byte	0x2d
 1332 03fc 00000000 		.4byte	.LFB67
 1333 0400 70000000 		.4byte	.LFE67-.LFB67
 1334 0404 01       		.uleb128 0x1
 1335 0405 9C       		.byte	0x9c
 1336 0406 19040000 		.4byte	0x419
 1337 040a 12       		.uleb128 0x12
 1338 040b FF040000 		.4byte	.LASF68
 1339 040f 01       		.byte	0x1
 1340 0410 31       		.byte	0x31
 1341 0411 AB000000 		.4byte	0xab
 1342 0415 02       		.uleb128 0x2
 1343 0416 91       		.byte	0x91
 1344 0417 77       		.sleb128 -9
 1345 0418 00       		.byte	0
 1346 0419 13       		.uleb128 0x13
 1347 041a A5030000 		.4byte	.LASF67
 1348 041e 01       		.byte	0x1
 1349 041f 3E       		.byte	0x3e
 1350 0420 AD010000 		.4byte	0x1ad
 1351 0424 00000000 		.4byte	.LFB68
 1352 0428 1C010000 		.4byte	.LFE68-.LFB68
 1353 042c 01       		.uleb128 0x1
 1354 042d 9C       		.byte	0x9c
 1355 042e 63040000 		.4byte	0x463
 1356 0432 12       		.uleb128 0x12
 1357 0433 A3040000 		.4byte	.LASF69
 1358 0437 01       		.byte	0x1
 1359 0438 41       		.byte	0x41
 1360 0439 AD010000 		.4byte	0x1ad
 1361 043d 02       		.uleb128 0x2
 1362 043e 91       		.byte	0x91
 1363 043f 50       		.sleb128 -48
 1364 0440 12       		.uleb128 0x12
 1365 0441 07050000 		.4byte	.LASF70
 1366 0445 01       		.byte	0x1
 1367 0446 63       		.byte	0x63
 1368 0447 A5000000 		.4byte	0xa5
 1369 044b 02       		.uleb128 0x2
 1370 044c 91       		.byte	0x91
 1371 044d 6C       		.sleb128 -20
 1372 044e 14       		.uleb128 0x14
 1373 044f 00000000 		.4byte	.Ldebug_ranges0+0
 1374 0453 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 29


 1375 0454 89040000 		.4byte	.LASF71
 1376 0458 01       		.byte	0x1
 1377 0459 6B       		.byte	0x6b
 1378 045a E7000000 		.4byte	0xe7
 1379 045e 02       		.uleb128 0x2
 1380 045f 91       		.byte	0x91
 1381 0460 6A       		.sleb128 -22
 1382 0461 00       		.byte	0
 1383 0462 00       		.byte	0
 1384 0463 13       		.uleb128 0x13
 1385 0464 6F010000 		.4byte	.LASF72
 1386 0468 01       		.byte	0x1
 1387 0469 86       		.byte	0x86
 1388 046a 59010000 		.4byte	0x159
 1389 046e 00000000 		.4byte	.LFB69
 1390 0472 CC000000 		.4byte	.LFE69-.LFB69
 1391 0476 01       		.uleb128 0x1
 1392 0477 9C       		.byte	0x9c
 1393 0478 9B040000 		.4byte	0x49b
 1394 047c 12       		.uleb128 0x12
 1395 047d 3C040000 		.4byte	.LASF73
 1396 0481 01       		.byte	0x1
 1397 0482 88       		.byte	0x88
 1398 0483 59010000 		.4byte	0x159
 1399 0487 03       		.uleb128 0x3
 1400 0488 91       		.byte	0x91
 1401 0489 EC7C     		.sleb128 -404
 1402 048b 12       		.uleb128 0x12
 1403 048c AB050000 		.4byte	.LASF74
 1404 0490 01       		.byte	0x1
 1405 0491 8D       		.byte	0x8d
 1406 0492 AD010000 		.4byte	0x1ad
 1407 0496 03       		.uleb128 0x3
 1408 0497 91       		.byte	0x91
 1409 0498 D07C     		.sleb128 -432
 1410 049a 00       		.byte	0
 1411 049b 15       		.uleb128 0x15
 1412 049c 71020000 		.4byte	.LASF110
 1413 04a0 01       		.byte	0x1
 1414 04a1 A4       		.byte	0xa4
 1415 04a2 E7000000 		.4byte	0xe7
 1416 04a6 00000000 		.4byte	.LFB70
 1417 04aa 8E000000 		.4byte	.LFE70-.LFB70
 1418 04ae 01       		.uleb128 0x1
 1419 04af 9C       		.byte	0x9c
 1420 04b0 DD040000 		.4byte	0x4dd
 1421 04b4 16       		.uleb128 0x16
 1422 04b5 BE040000 		.4byte	.LASF75
 1423 04b9 01       		.byte	0x1
 1424 04ba A4       		.byte	0xa4
 1425 04bb DD040000 		.4byte	0x4dd
 1426 04bf 02       		.uleb128 0x2
 1427 04c0 91       		.byte	0x91
 1428 04c1 64       		.sleb128 -28
 1429 04c2 17       		.uleb128 0x17
 1430 04c3 6E00     		.ascii	"n\000"
 1431 04c5 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 30


 1432 04c6 A4       		.byte	0xa4
 1433 04c7 DB000000 		.4byte	0xdb
 1434 04cb 02       		.uleb128 0x2
 1435 04cc 91       		.byte	0x91
 1436 04cd 63       		.sleb128 -29
 1437 04ce 12       		.uleb128 0x12
 1438 04cf 50000000 		.4byte	.LASF76
 1439 04d3 01       		.byte	0x1
 1440 04d4 A6       		.byte	0xa6
 1441 04d5 F3000000 		.4byte	0xf3
 1442 04d9 02       		.uleb128 0x2
 1443 04da 91       		.byte	0x91
 1444 04db 6E       		.sleb128 -18
 1445 04dc 00       		.byte	0
 1446 04dd 05       		.uleb128 0x5
 1447 04de 04       		.byte	0x4
 1448 04df F3000000 		.4byte	0xf3
 1449 04e3 11       		.uleb128 0x11
 1450 04e4 14000000 		.4byte	.LASF77
 1451 04e8 01       		.byte	0x1
 1452 04e9 B6       		.byte	0xb6
 1453 04ea 00000000 		.4byte	.LFB71
 1454 04ee 98000000 		.4byte	.LFE71-.LFB71
 1455 04f2 01       		.uleb128 0x1
 1456 04f3 9C       		.byte	0x9c
 1457 04f4 29050000 		.4byte	0x529
 1458 04f8 17       		.uleb128 0x17
 1459 04f9 6100     		.ascii	"a\000"
 1460 04fb 01       		.byte	0x1
 1461 04fc B6       		.byte	0xb6
 1462 04fd DD040000 		.4byte	0x4dd
 1463 0501 02       		.uleb128 0x2
 1464 0502 91       		.byte	0x91
 1465 0503 6C       		.sleb128 -20
 1466 0504 17       		.uleb128 0x17
 1467 0505 6E00     		.ascii	"n\000"
 1468 0507 01       		.byte	0x1
 1469 0508 B6       		.byte	0xb6
 1470 0509 F3000000 		.4byte	0xf3
 1471 050d 02       		.uleb128 0x2
 1472 050e 91       		.byte	0x91
 1473 050f 6A       		.sleb128 -22
 1474 0510 18       		.uleb128 0x18
 1475 0511 6900     		.ascii	"i\000"
 1476 0513 01       		.byte	0x1
 1477 0514 B7       		.byte	0xb7
 1478 0515 F3000000 		.4byte	0xf3
 1479 0519 02       		.uleb128 0x2
 1480 051a 91       		.byte	0x91
 1481 051b 76       		.sleb128 -10
 1482 051c 18       		.uleb128 0x18
 1483 051d 6A00     		.ascii	"j\000"
 1484 051f 01       		.byte	0x1
 1485 0520 B7       		.byte	0xb7
 1486 0521 F3000000 		.4byte	0xf3
 1487 0525 02       		.uleb128 0x2
 1488 0526 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 31


 1489 0527 74       		.sleb128 -12
 1490 0528 00       		.byte	0
 1491 0529 19       		.uleb128 0x19
 1492 052a 45010000 		.4byte	.LASF78
 1493 052e 01       		.byte	0x1
 1494 052f C2       		.byte	0xc2
 1495 0530 00000000 		.4byte	.LFB72
 1496 0534 2A000000 		.4byte	.LFE72-.LFB72
 1497 0538 01       		.uleb128 0x1
 1498 0539 9C       		.byte	0x9c
 1499 053a 63050000 		.4byte	0x563
 1500 053e 17       		.uleb128 0x17
 1501 053f 7000     		.ascii	"p\000"
 1502 0541 01       		.byte	0x1
 1503 0542 C2       		.byte	0xc2
 1504 0543 DD040000 		.4byte	0x4dd
 1505 0547 02       		.uleb128 0x2
 1506 0548 91       		.byte	0x91
 1507 0549 6C       		.sleb128 -20
 1508 054a 17       		.uleb128 0x17
 1509 054b 7100     		.ascii	"q\000"
 1510 054d 01       		.byte	0x1
 1511 054e C2       		.byte	0xc2
 1512 054f DD040000 		.4byte	0x4dd
 1513 0553 02       		.uleb128 0x2
 1514 0554 91       		.byte	0x91
 1515 0555 68       		.sleb128 -24
 1516 0556 18       		.uleb128 0x18
 1517 0557 7400     		.ascii	"t\000"
 1518 0559 01       		.byte	0x1
 1519 055a C3       		.byte	0xc3
 1520 055b F3000000 		.4byte	0xf3
 1521 055f 02       		.uleb128 0x2
 1522 0560 91       		.byte	0x91
 1523 0561 76       		.sleb128 -10
 1524 0562 00       		.byte	0
 1525 0563 07       		.uleb128 0x7
 1526 0564 AB000000 		.4byte	0xab
 1527 0568 74050000 		.4byte	0x574
 1528 056c 1A       		.uleb128 0x1a
 1529 056d 9E000000 		.4byte	0x9e
 1530 0571 0001     		.2byte	0x100
 1531 0573 00       		.byte	0
 1532 0574 12       		.uleb128 0x12
 1533 0575 00000000 		.4byte	.LASF79
 1534 0579 01       		.byte	0x1
 1535 057a 0B       		.byte	0xb
 1536 057b 63050000 		.4byte	0x563
 1537 057f 05       		.uleb128 0x5
 1538 0580 03       		.byte	0x3
 1539 0581 00000000 		.4byte	uart_chars
 1540 0585 12       		.uleb128 0x12
 1541 0586 70000000 		.4byte	.LASF80
 1542 058a 01       		.byte	0x1
 1543 058b 0C       		.byte	0xc
 1544 058c 81000000 		.4byte	0x81
 1545 0590 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 32


 1546 0591 03       		.byte	0x3
 1547 0592 01010000 		.4byte	num_chars
 1548 0596 12       		.uleb128 0x12
 1549 0597 A8010000 		.4byte	.LASF81
 1550 059b 01       		.byte	0x1
 1551 059c 0E       		.byte	0xe
 1552 059d B2000000 		.4byte	0xb2
 1553 05a1 05       		.uleb128 0x5
 1554 05a2 03       		.byte	0x3
 1555 05a3 00000000 		.4byte	line
 1556 05a7 12       		.uleb128 0x12
 1557 05a8 F9040000 		.4byte	.LASF82
 1558 05ac 01       		.byte	0x1
 1559 05ad 11       		.byte	0x11
 1560 05ae B2000000 		.4byte	0xb2
 1561 05b2 05       		.uleb128 0x5
 1562 05b3 03       		.byte	0x3
 1563 05b4 04010000 		.4byte	match
 1564 05b8 12       		.uleb128 0x12
 1565 05b9 43020000 		.4byte	.LASF83
 1566 05bd 01       		.byte	0x1
 1567 05be 12       		.byte	0x12
 1568 05bf B2000000 		.4byte	0xb2
 1569 05c3 05       		.uleb128 0x5
 1570 05c4 03       		.byte	0x3
 1571 05c5 08010000 		.4byte	pattern
 1572 05c9 1B       		.uleb128 0x1b
 1573 05ca DE030000 		.4byte	.LASF84
 1574 05ce 0A       		.byte	0xa
 1575 05cf 1207     		.2byte	0x712
 1576 05d1 D5050000 		.4byte	0x5d5
 1577 05d5 0E       		.uleb128 0xe
 1578 05d6 8C000000 		.4byte	0x8c
 1579 05da 1C       		.uleb128 0x1c
 1580 05db 28020000 		.4byte	.LASF85
 1581 05df 07       		.byte	0x7
 1582 05e0 11       		.byte	0x11
 1583 05e1 F1020000 		.4byte	0x2f1
 1584 05e5 05       		.uleb128 0x5
 1585 05e6 03       		.byte	0x3
 1586 05e7 00000000 		.4byte	buffer_overflow
 1587 05eb 1C       		.uleb128 0x1c
 1588 05ec 90010000 		.4byte	.LASF86
 1589 05f0 07       		.byte	0x7
 1590 05f1 22       		.byte	0x22
 1591 05f2 E7000000 		.4byte	0xe7
 1592 05f6 05       		.uleb128 0x5
 1593 05f7 03       		.byte	0x3
 1594 05f8 00000000 		.4byte	dataPointsInStack
 1595 05fc 1C       		.uleb128 0x1c
 1596 05fd BC010000 		.4byte	.LASF87
 1597 0601 07       		.byte	0x7
 1598 0602 23       		.byte	0x23
 1599 0603 E7000000 		.4byte	0xe7
 1600 0607 05       		.uleb128 0x5
 1601 0608 03       		.byte	0x3
 1602 0609 00000000 		.4byte	dataPointsInStackDesired
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 33


 1603 060d 07       		.uleb128 0x7
 1604 060e F5010000 		.4byte	0x1f5
 1605 0612 1D060000 		.4byte	0x61d
 1606 0616 08       		.uleb128 0x8
 1607 0617 9E000000 		.4byte	0x9e
 1608 061b 95       		.byte	0x95
 1609 061c 00       		.byte	0
 1610 061d 1C       		.uleb128 0x1c
 1611 061e 40010000 		.4byte	.LASF88
 1612 0622 07       		.byte	0x7
 1613 0623 24       		.byte	0x24
 1614 0624 0D060000 		.4byte	0x60d
 1615 0628 05       		.uleb128 0x5
 1616 0629 03       		.byte	0x3
 1617 062a 00000000 		.4byte	data
 1618 062e 1C       		.uleb128 0x1c
 1619 062f CE020000 		.4byte	.LASF89
 1620 0633 08       		.byte	0x8
 1621 0634 1F       		.byte	0x1f
 1622 0635 DB000000 		.4byte	0xdb
 1623 0639 05       		.uleb128 0x5
 1624 063a 03       		.byte	0x3
 1625 063b 00000000 		.4byte	modem_state
 1626 063f 1C       		.uleb128 0x1c
 1627 0640 A6020000 		.4byte	.LASF90
 1628 0644 08       		.byte	0x8
 1629 0645 62       		.byte	0x62
 1630 0646 FF000000 		.4byte	0xff
 1631 064a 05       		.uleb128 0x5
 1632 064b 03       		.byte	0x3
 1633 064c 00000000 		.4byte	modem_start_time_stamp
 1634 0650 1C       		.uleb128 0x1c
 1635 0651 38020000 		.4byte	.LASF58
 1636 0655 08       		.byte	0x8
 1637 0656 63       		.byte	0x63
 1638 0657 2D020000 		.4byte	0x22d
 1639 065b 05       		.uleb128 0x5
 1640 065c 03       		.byte	0x3
 1641 065d 00000000 		.4byte	modem_info
 1642 0661 1C       		.uleb128 0x1c
 1643 0662 2E030000 		.4byte	.LASF91
 1644 0666 08       		.byte	0x8
 1645 0667 64       		.byte	0x64
 1646 0668 A1020000 		.4byte	0x2a1
 1647 066c 05       		.uleb128 0x5
 1648 066d 03       		.byte	0x3
 1649 066e 00000000 		.4byte	modem_stats
 1650 0672 1C       		.uleb128 0x1c
 1651 0673 4F050000 		.4byte	.LASF92
 1652 0677 08       		.byte	0x8
 1653 0678 65       		.byte	0x65
 1654 0679 F8020000 		.4byte	0x2f8
 1655 067d 05       		.uleb128 0x5
 1656 067e 03       		.byte	0x3
 1657 067f 00000000 		.4byte	updatable_parameters
 1658 0683 1C       		.uleb128 0x1c
 1659 0684 9E000000 		.4byte	.LASF93
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 34


 1660 0688 0B       		.byte	0xb
 1661 0689 12       		.byte	0x12
 1662 068a 9F030000 		.4byte	0x39f
 1663 068e 05       		.uleb128 0x5
 1664 068f 03       		.byte	0x3
 1665 0690 00000000 		.4byte	inbox
 1666 0694 07       		.uleb128 0x7
 1667 0695 AB000000 		.4byte	0xab
 1668 0699 A5060000 		.4byte	0x6a5
 1669 069d 1A       		.uleb128 0x1a
 1670 069e 9E000000 		.4byte	0x9e
 1671 06a2 0F27     		.2byte	0x270f
 1672 06a4 00       		.byte	0
 1673 06a5 1C       		.uleb128 0x1c
 1674 06a6 93050000 		.4byte	.LASF94
 1675 06aa 09       		.byte	0x9
 1676 06ab 18       		.byte	0x18
 1677 06ac 94060000 		.4byte	0x694
 1678 06b0 05       		.uleb128 0x5
 1679 06b1 03       		.byte	0x3
 1680 06b2 00000000 		.4byte	http_request
 1681 06b6 1C       		.uleb128 0x1c
 1682 06b7 89050000 		.4byte	.LASF95
 1683 06bb 09       		.byte	0x9
 1684 06bc 19       		.byte	0x19
 1685 06bd 94060000 		.4byte	0x694
 1686 06c1 05       		.uleb128 0x5
 1687 06c2 03       		.byte	0x3
 1688 06c3 00000000 		.4byte	http_body
 1689 06c7 07       		.uleb128 0x7
 1690 06c8 AB000000 		.4byte	0xab
 1691 06cc D7060000 		.4byte	0x6d7
 1692 06d0 08       		.uleb128 0x8
 1693 06d1 9E000000 		.4byte	0x9e
 1694 06d5 C7       		.byte	0xc7
 1695 06d6 00       		.byte	0
 1696 06d7 1C       		.uleb128 0x1c
 1697 06d8 7E040000 		.4byte	.LASF96
 1698 06dc 09       		.byte	0x9
 1699 06dd 1A       		.byte	0x1a
 1700 06de C7060000 		.4byte	0x6c7
 1701 06e2 05       		.uleb128 0x5
 1702 06e3 03       		.byte	0x3
 1703 06e4 00000000 		.4byte	http_route
 1704 06e8 1C       		.uleb128 0x1c
 1705 06e9 BF030000 		.4byte	.LASF97
 1706 06ed 09       		.byte	0x9
 1707 06ee 41       		.byte	0x41
 1708 06ef 73030000 		.4byte	0x373
 1709 06f3 05       		.uleb128 0x5
 1710 06f4 03       		.byte	0x3
 1711 06f5 00000000 		.4byte	system_info
 1712 06f9 1C       		.uleb128 0x1c
 1713 06fa F5020000 		.4byte	.LASF98
 1714 06fe 09       		.byte	0x9
 1715 06ff 53       		.byte	0x53
 1716 0700 AF030000 		.4byte	0x3af
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 35


 1717 0704 05       		.uleb128 0x5
 1718 0705 03       		.byte	0x3
 1719 0706 00000000 		.4byte	system_settings
 1720 070a 1C       		.uleb128 0x1c
 1721 070b 4B020000 		.4byte	.LASF99
 1722 070f 09       		.byte	0x9
 1723 0710 6F       		.byte	0x6f
 1724 0711 3C030000 		.4byte	0x33c
 1725 0715 05       		.uleb128 0x5
 1726 0716 03       		.byte	0x3
 1727 0717 00000000 		.4byte	alarmMeasure
 1728 071b 1C       		.uleb128 0x1c
 1729 071c 3A030000 		.4byte	.LASF100
 1730 0720 09       		.byte	0x9
 1731 0721 70       		.byte	0x70
 1732 0722 DB000000 		.4byte	0xdb
 1733 0726 05       		.uleb128 0x5
 1734 0727 03       		.byte	0x3
 1735 0728 00000000 		.4byte	timeToMeasure
 1736 072c 1C       		.uleb128 0x1c
 1737 072d 7D020000 		.4byte	.LASF101
 1738 0731 09       		.byte	0x9
 1739 0732 71       		.byte	0x71
 1740 0733 3C030000 		.4byte	0x33c
 1741 0737 05       		.uleb128 0x5
 1742 0738 03       		.byte	0x3
 1743 0739 00000000 		.4byte	alarmSync
 1744 073d 1C       		.uleb128 0x1c
 1745 073e A0050000 		.4byte	.LASF102
 1746 0742 09       		.byte	0x9
 1747 0743 72       		.byte	0x72
 1748 0744 DB000000 		.4byte	0xdb
 1749 0748 05       		.uleb128 0x5
 1750 0749 03       		.byte	0x3
 1751 074a 00000000 		.4byte	timeToSync
 1752 074e 1C       		.uleb128 0x1c
 1753 074f 25040000 		.4byte	.LASF103
 1754 0753 09       		.byte	0x9
 1755 0754 73       		.byte	0x73
 1756 0755 DB000000 		.4byte	0xdb
 1757 0759 05       		.uleb128 0x5
 1758 075a 03       		.byte	0x3
 1759 075b 00000000 		.4byte	timeToSycnRemoteParams
 1760 075f 1D       		.uleb128 0x1d
 1761 0760 68657900 		.ascii	"hey\000"
 1762 0764 09       		.byte	0x9
 1763 0765 74       		.byte	0x74
 1764 0766 DB000000 		.4byte	0xdb
 1765 076a 05       		.uleb128 0x5
 1766 076b 03       		.byte	0x3
 1767 076c 00000000 		.4byte	hey
 1768 0770 1C       		.uleb128 0x1c
 1769 0771 5D010000 		.4byte	.LASF104
 1770 0775 09       		.byte	0x9
 1771 0776 77       		.byte	0x77
 1772 0777 3C030000 		.4byte	0x33c
 1773 077b 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 36


 1774 077c 03       		.byte	0x3
 1775 077d 00000000 		.4byte	alarmAppLED
 1776 0781 1C       		.uleb128 0x1c
 1777 0782 0D050000 		.4byte	.LASF105
 1778 0786 09       		.byte	0x9
 1779 0787 78       		.byte	0x78
 1780 0788 DB000000 		.4byte	0xdb
 1781 078c 05       		.uleb128 0x5
 1782 078d 03       		.byte	0x3
 1783 078e 00000000 		.4byte	timeToAppLED
 1784 0792 00       		.byte	0
 1785              		.section	.debug_abbrev,"",%progbits
 1786              	.Ldebug_abbrev0:
 1787 0000 01       		.uleb128 0x1
 1788 0001 11       		.uleb128 0x11
 1789 0002 01       		.byte	0x1
 1790 0003 25       		.uleb128 0x25
 1791 0004 0E       		.uleb128 0xe
 1792 0005 13       		.uleb128 0x13
 1793 0006 0B       		.uleb128 0xb
 1794 0007 03       		.uleb128 0x3
 1795 0008 0E       		.uleb128 0xe
 1796 0009 1B       		.uleb128 0x1b
 1797 000a 0E       		.uleb128 0xe
 1798 000b 55       		.uleb128 0x55
 1799 000c 17       		.uleb128 0x17
 1800 000d 11       		.uleb128 0x11
 1801 000e 01       		.uleb128 0x1
 1802 000f 10       		.uleb128 0x10
 1803 0010 17       		.uleb128 0x17
 1804 0011 00       		.byte	0
 1805 0012 00       		.byte	0
 1806 0013 02       		.uleb128 0x2
 1807 0014 24       		.uleb128 0x24
 1808 0015 00       		.byte	0
 1809 0016 0B       		.uleb128 0xb
 1810 0017 0B       		.uleb128 0xb
 1811 0018 3E       		.uleb128 0x3e
 1812 0019 0B       		.uleb128 0xb
 1813 001a 03       		.uleb128 0x3
 1814 001b 0E       		.uleb128 0xe
 1815 001c 00       		.byte	0
 1816 001d 00       		.byte	0
 1817 001e 03       		.uleb128 0x3
 1818 001f 16       		.uleb128 0x16
 1819 0020 00       		.byte	0
 1820 0021 03       		.uleb128 0x3
 1821 0022 0E       		.uleb128 0xe
 1822 0023 3A       		.uleb128 0x3a
 1823 0024 0B       		.uleb128 0xb
 1824 0025 3B       		.uleb128 0x3b
 1825 0026 0B       		.uleb128 0xb
 1826 0027 49       		.uleb128 0x49
 1827 0028 13       		.uleb128 0x13
 1828 0029 00       		.byte	0
 1829 002a 00       		.byte	0
 1830 002b 04       		.uleb128 0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 37


 1831 002c 24       		.uleb128 0x24
 1832 002d 00       		.byte	0
 1833 002e 0B       		.uleb128 0xb
 1834 002f 0B       		.uleb128 0xb
 1835 0030 3E       		.uleb128 0x3e
 1836 0031 0B       		.uleb128 0xb
 1837 0032 03       		.uleb128 0x3
 1838 0033 08       		.uleb128 0x8
 1839 0034 00       		.byte	0
 1840 0035 00       		.byte	0
 1841 0036 05       		.uleb128 0x5
 1842 0037 0F       		.uleb128 0xf
 1843 0038 00       		.byte	0
 1844 0039 0B       		.uleb128 0xb
 1845 003a 0B       		.uleb128 0xb
 1846 003b 49       		.uleb128 0x49
 1847 003c 13       		.uleb128 0x13
 1848 003d 00       		.byte	0
 1849 003e 00       		.byte	0
 1850 003f 06       		.uleb128 0x6
 1851 0040 26       		.uleb128 0x26
 1852 0041 00       		.byte	0
 1853 0042 49       		.uleb128 0x49
 1854 0043 13       		.uleb128 0x13
 1855 0044 00       		.byte	0
 1856 0045 00       		.byte	0
 1857 0046 07       		.uleb128 0x7
 1858 0047 01       		.uleb128 0x1
 1859 0048 01       		.byte	0x1
 1860 0049 49       		.uleb128 0x49
 1861 004a 13       		.uleb128 0x13
 1862 004b 01       		.uleb128 0x1
 1863 004c 13       		.uleb128 0x13
 1864 004d 00       		.byte	0
 1865 004e 00       		.byte	0
 1866 004f 08       		.uleb128 0x8
 1867 0050 21       		.uleb128 0x21
 1868 0051 00       		.byte	0
 1869 0052 49       		.uleb128 0x49
 1870 0053 13       		.uleb128 0x13
 1871 0054 2F       		.uleb128 0x2f
 1872 0055 0B       		.uleb128 0xb
 1873 0056 00       		.byte	0
 1874 0057 00       		.byte	0
 1875 0058 09       		.uleb128 0x9
 1876 0059 16       		.uleb128 0x16
 1877 005a 00       		.byte	0
 1878 005b 03       		.uleb128 0x3
 1879 005c 0E       		.uleb128 0xe
 1880 005d 3A       		.uleb128 0x3a
 1881 005e 0B       		.uleb128 0xb
 1882 005f 3B       		.uleb128 0x3b
 1883 0060 05       		.uleb128 0x5
 1884 0061 49       		.uleb128 0x49
 1885 0062 13       		.uleb128 0x13
 1886 0063 00       		.byte	0
 1887 0064 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 38


 1888 0065 0A       		.uleb128 0xa
 1889 0066 13       		.uleb128 0x13
 1890 0067 01       		.byte	0x1
 1891 0068 0B       		.uleb128 0xb
 1892 0069 05       		.uleb128 0x5
 1893 006a 3A       		.uleb128 0x3a
 1894 006b 0B       		.uleb128 0xb
 1895 006c 3B       		.uleb128 0x3b
 1896 006d 0B       		.uleb128 0xb
 1897 006e 01       		.uleb128 0x1
 1898 006f 13       		.uleb128 0x13
 1899 0070 00       		.byte	0
 1900 0071 00       		.byte	0
 1901 0072 0B       		.uleb128 0xb
 1902 0073 0D       		.uleb128 0xd
 1903 0074 00       		.byte	0
 1904 0075 03       		.uleb128 0x3
 1905 0076 0E       		.uleb128 0xe
 1906 0077 3A       		.uleb128 0x3a
 1907 0078 0B       		.uleb128 0xb
 1908 0079 3B       		.uleb128 0x3b
 1909 007a 0B       		.uleb128 0xb
 1910 007b 49       		.uleb128 0x49
 1911 007c 13       		.uleb128 0x13
 1912 007d 38       		.uleb128 0x38
 1913 007e 0B       		.uleb128 0xb
 1914 007f 00       		.byte	0
 1915 0080 00       		.byte	0
 1916 0081 0C       		.uleb128 0xc
 1917 0082 13       		.uleb128 0x13
 1918 0083 01       		.byte	0x1
 1919 0084 0B       		.uleb128 0xb
 1920 0085 0B       		.uleb128 0xb
 1921 0086 3A       		.uleb128 0x3a
 1922 0087 0B       		.uleb128 0xb
 1923 0088 3B       		.uleb128 0x3b
 1924 0089 0B       		.uleb128 0xb
 1925 008a 01       		.uleb128 0x1
 1926 008b 13       		.uleb128 0x13
 1927 008c 00       		.byte	0
 1928 008d 00       		.byte	0
 1929 008e 0D       		.uleb128 0xd
 1930 008f 0D       		.uleb128 0xd
 1931 0090 00       		.byte	0
 1932 0091 03       		.uleb128 0x3
 1933 0092 08       		.uleb128 0x8
 1934 0093 3A       		.uleb128 0x3a
 1935 0094 0B       		.uleb128 0xb
 1936 0095 3B       		.uleb128 0x3b
 1937 0096 0B       		.uleb128 0xb
 1938 0097 49       		.uleb128 0x49
 1939 0098 13       		.uleb128 0x13
 1940 0099 38       		.uleb128 0x38
 1941 009a 0B       		.uleb128 0xb
 1942 009b 00       		.byte	0
 1943 009c 00       		.byte	0
 1944 009d 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 39


 1945 009e 35       		.uleb128 0x35
 1946 009f 00       		.byte	0
 1947 00a0 49       		.uleb128 0x49
 1948 00a1 13       		.uleb128 0x13
 1949 00a2 00       		.byte	0
 1950 00a3 00       		.byte	0
 1951 00a4 0F       		.uleb128 0xf
 1952 00a5 2E       		.uleb128 0x2e
 1953 00a6 00       		.byte	0
 1954 00a7 3F       		.uleb128 0x3f
 1955 00a8 19       		.uleb128 0x19
 1956 00a9 03       		.uleb128 0x3
 1957 00aa 0E       		.uleb128 0xe
 1958 00ab 3A       		.uleb128 0x3a
 1959 00ac 0B       		.uleb128 0xb
 1960 00ad 3B       		.uleb128 0x3b
 1961 00ae 0B       		.uleb128 0xb
 1962 00af 27       		.uleb128 0x27
 1963 00b0 19       		.uleb128 0x19
 1964 00b1 49       		.uleb128 0x49
 1965 00b2 13       		.uleb128 0x13
 1966 00b3 11       		.uleb128 0x11
 1967 00b4 01       		.uleb128 0x1
 1968 00b5 12       		.uleb128 0x12
 1969 00b6 06       		.uleb128 0x6
 1970 00b7 40       		.uleb128 0x40
 1971 00b8 18       		.uleb128 0x18
 1972 00b9 9742     		.uleb128 0x2117
 1973 00bb 19       		.uleb128 0x19
 1974 00bc 00       		.byte	0
 1975 00bd 00       		.byte	0
 1976 00be 10       		.uleb128 0x10
 1977 00bf 2E       		.uleb128 0x2e
 1978 00c0 00       		.byte	0
 1979 00c1 3F       		.uleb128 0x3f
 1980 00c2 19       		.uleb128 0x19
 1981 00c3 03       		.uleb128 0x3
 1982 00c4 0E       		.uleb128 0xe
 1983 00c5 3A       		.uleb128 0x3a
 1984 00c6 0B       		.uleb128 0xb
 1985 00c7 3B       		.uleb128 0x3b
 1986 00c8 0B       		.uleb128 0xb
 1987 00c9 27       		.uleb128 0x27
 1988 00ca 19       		.uleb128 0x19
 1989 00cb 11       		.uleb128 0x11
 1990 00cc 01       		.uleb128 0x1
 1991 00cd 12       		.uleb128 0x12
 1992 00ce 06       		.uleb128 0x6
 1993 00cf 40       		.uleb128 0x40
 1994 00d0 18       		.uleb128 0x18
 1995 00d1 9642     		.uleb128 0x2116
 1996 00d3 19       		.uleb128 0x19
 1997 00d4 00       		.byte	0
 1998 00d5 00       		.byte	0
 1999 00d6 11       		.uleb128 0x11
 2000 00d7 2E       		.uleb128 0x2e
 2001 00d8 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 40


 2002 00d9 3F       		.uleb128 0x3f
 2003 00da 19       		.uleb128 0x19
 2004 00db 03       		.uleb128 0x3
 2005 00dc 0E       		.uleb128 0xe
 2006 00dd 3A       		.uleb128 0x3a
 2007 00de 0B       		.uleb128 0xb
 2008 00df 3B       		.uleb128 0x3b
 2009 00e0 0B       		.uleb128 0xb
 2010 00e1 27       		.uleb128 0x27
 2011 00e2 19       		.uleb128 0x19
 2012 00e3 11       		.uleb128 0x11
 2013 00e4 01       		.uleb128 0x1
 2014 00e5 12       		.uleb128 0x12
 2015 00e6 06       		.uleb128 0x6
 2016 00e7 40       		.uleb128 0x40
 2017 00e8 18       		.uleb128 0x18
 2018 00e9 9642     		.uleb128 0x2116
 2019 00eb 19       		.uleb128 0x19
 2020 00ec 01       		.uleb128 0x1
 2021 00ed 13       		.uleb128 0x13
 2022 00ee 00       		.byte	0
 2023 00ef 00       		.byte	0
 2024 00f0 12       		.uleb128 0x12
 2025 00f1 34       		.uleb128 0x34
 2026 00f2 00       		.byte	0
 2027 00f3 03       		.uleb128 0x3
 2028 00f4 0E       		.uleb128 0xe
 2029 00f5 3A       		.uleb128 0x3a
 2030 00f6 0B       		.uleb128 0xb
 2031 00f7 3B       		.uleb128 0x3b
 2032 00f8 0B       		.uleb128 0xb
 2033 00f9 49       		.uleb128 0x49
 2034 00fa 13       		.uleb128 0x13
 2035 00fb 02       		.uleb128 0x2
 2036 00fc 18       		.uleb128 0x18
 2037 00fd 00       		.byte	0
 2038 00fe 00       		.byte	0
 2039 00ff 13       		.uleb128 0x13
 2040 0100 2E       		.uleb128 0x2e
 2041 0101 01       		.byte	0x1
 2042 0102 3F       		.uleb128 0x3f
 2043 0103 19       		.uleb128 0x19
 2044 0104 03       		.uleb128 0x3
 2045 0105 0E       		.uleb128 0xe
 2046 0106 3A       		.uleb128 0x3a
 2047 0107 0B       		.uleb128 0xb
 2048 0108 3B       		.uleb128 0x3b
 2049 0109 0B       		.uleb128 0xb
 2050 010a 49       		.uleb128 0x49
 2051 010b 13       		.uleb128 0x13
 2052 010c 11       		.uleb128 0x11
 2053 010d 01       		.uleb128 0x1
 2054 010e 12       		.uleb128 0x12
 2055 010f 06       		.uleb128 0x6
 2056 0110 40       		.uleb128 0x40
 2057 0111 18       		.uleb128 0x18
 2058 0112 9642     		.uleb128 0x2116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 41


 2059 0114 19       		.uleb128 0x19
 2060 0115 01       		.uleb128 0x1
 2061 0116 13       		.uleb128 0x13
 2062 0117 00       		.byte	0
 2063 0118 00       		.byte	0
 2064 0119 14       		.uleb128 0x14
 2065 011a 0B       		.uleb128 0xb
 2066 011b 01       		.byte	0x1
 2067 011c 55       		.uleb128 0x55
 2068 011d 17       		.uleb128 0x17
 2069 011e 00       		.byte	0
 2070 011f 00       		.byte	0
 2071 0120 15       		.uleb128 0x15
 2072 0121 2E       		.uleb128 0x2e
 2073 0122 01       		.byte	0x1
 2074 0123 3F       		.uleb128 0x3f
 2075 0124 19       		.uleb128 0x19
 2076 0125 03       		.uleb128 0x3
 2077 0126 0E       		.uleb128 0xe
 2078 0127 3A       		.uleb128 0x3a
 2079 0128 0B       		.uleb128 0xb
 2080 0129 3B       		.uleb128 0x3b
 2081 012a 0B       		.uleb128 0xb
 2082 012b 27       		.uleb128 0x27
 2083 012c 19       		.uleb128 0x19
 2084 012d 49       		.uleb128 0x49
 2085 012e 13       		.uleb128 0x13
 2086 012f 11       		.uleb128 0x11
 2087 0130 01       		.uleb128 0x1
 2088 0131 12       		.uleb128 0x12
 2089 0132 06       		.uleb128 0x6
 2090 0133 40       		.uleb128 0x40
 2091 0134 18       		.uleb128 0x18
 2092 0135 9642     		.uleb128 0x2116
 2093 0137 19       		.uleb128 0x19
 2094 0138 01       		.uleb128 0x1
 2095 0139 13       		.uleb128 0x13
 2096 013a 00       		.byte	0
 2097 013b 00       		.byte	0
 2098 013c 16       		.uleb128 0x16
 2099 013d 05       		.uleb128 0x5
 2100 013e 00       		.byte	0
 2101 013f 03       		.uleb128 0x3
 2102 0140 0E       		.uleb128 0xe
 2103 0141 3A       		.uleb128 0x3a
 2104 0142 0B       		.uleb128 0xb
 2105 0143 3B       		.uleb128 0x3b
 2106 0144 0B       		.uleb128 0xb
 2107 0145 49       		.uleb128 0x49
 2108 0146 13       		.uleb128 0x13
 2109 0147 02       		.uleb128 0x2
 2110 0148 18       		.uleb128 0x18
 2111 0149 00       		.byte	0
 2112 014a 00       		.byte	0
 2113 014b 17       		.uleb128 0x17
 2114 014c 05       		.uleb128 0x5
 2115 014d 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 42


 2116 014e 03       		.uleb128 0x3
 2117 014f 08       		.uleb128 0x8
 2118 0150 3A       		.uleb128 0x3a
 2119 0151 0B       		.uleb128 0xb
 2120 0152 3B       		.uleb128 0x3b
 2121 0153 0B       		.uleb128 0xb
 2122 0154 49       		.uleb128 0x49
 2123 0155 13       		.uleb128 0x13
 2124 0156 02       		.uleb128 0x2
 2125 0157 18       		.uleb128 0x18
 2126 0158 00       		.byte	0
 2127 0159 00       		.byte	0
 2128 015a 18       		.uleb128 0x18
 2129 015b 34       		.uleb128 0x34
 2130 015c 00       		.byte	0
 2131 015d 03       		.uleb128 0x3
 2132 015e 08       		.uleb128 0x8
 2133 015f 3A       		.uleb128 0x3a
 2134 0160 0B       		.uleb128 0xb
 2135 0161 3B       		.uleb128 0x3b
 2136 0162 0B       		.uleb128 0xb
 2137 0163 49       		.uleb128 0x49
 2138 0164 13       		.uleb128 0x13
 2139 0165 02       		.uleb128 0x2
 2140 0166 18       		.uleb128 0x18
 2141 0167 00       		.byte	0
 2142 0168 00       		.byte	0
 2143 0169 19       		.uleb128 0x19
 2144 016a 2E       		.uleb128 0x2e
 2145 016b 01       		.byte	0x1
 2146 016c 3F       		.uleb128 0x3f
 2147 016d 19       		.uleb128 0x19
 2148 016e 03       		.uleb128 0x3
 2149 016f 0E       		.uleb128 0xe
 2150 0170 3A       		.uleb128 0x3a
 2151 0171 0B       		.uleb128 0xb
 2152 0172 3B       		.uleb128 0x3b
 2153 0173 0B       		.uleb128 0xb
 2154 0174 27       		.uleb128 0x27
 2155 0175 19       		.uleb128 0x19
 2156 0176 11       		.uleb128 0x11
 2157 0177 01       		.uleb128 0x1
 2158 0178 12       		.uleb128 0x12
 2159 0179 06       		.uleb128 0x6
 2160 017a 40       		.uleb128 0x40
 2161 017b 18       		.uleb128 0x18
 2162 017c 9742     		.uleb128 0x2117
 2163 017e 19       		.uleb128 0x19
 2164 017f 01       		.uleb128 0x1
 2165 0180 13       		.uleb128 0x13
 2166 0181 00       		.byte	0
 2167 0182 00       		.byte	0
 2168 0183 1A       		.uleb128 0x1a
 2169 0184 21       		.uleb128 0x21
 2170 0185 00       		.byte	0
 2171 0186 49       		.uleb128 0x49
 2172 0187 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 43


 2173 0188 2F       		.uleb128 0x2f
 2174 0189 05       		.uleb128 0x5
 2175 018a 00       		.byte	0
 2176 018b 00       		.byte	0
 2177 018c 1B       		.uleb128 0x1b
 2178 018d 34       		.uleb128 0x34
 2179 018e 00       		.byte	0
 2180 018f 03       		.uleb128 0x3
 2181 0190 0E       		.uleb128 0xe
 2182 0191 3A       		.uleb128 0x3a
 2183 0192 0B       		.uleb128 0xb
 2184 0193 3B       		.uleb128 0x3b
 2185 0194 05       		.uleb128 0x5
 2186 0195 49       		.uleb128 0x49
 2187 0196 13       		.uleb128 0x13
 2188 0197 3F       		.uleb128 0x3f
 2189 0198 19       		.uleb128 0x19
 2190 0199 3C       		.uleb128 0x3c
 2191 019a 19       		.uleb128 0x19
 2192 019b 00       		.byte	0
 2193 019c 00       		.byte	0
 2194 019d 1C       		.uleb128 0x1c
 2195 019e 34       		.uleb128 0x34
 2196 019f 00       		.byte	0
 2197 01a0 03       		.uleb128 0x3
 2198 01a1 0E       		.uleb128 0xe
 2199 01a2 3A       		.uleb128 0x3a
 2200 01a3 0B       		.uleb128 0xb
 2201 01a4 3B       		.uleb128 0x3b
 2202 01a5 0B       		.uleb128 0xb
 2203 01a6 49       		.uleb128 0x49
 2204 01a7 13       		.uleb128 0x13
 2205 01a8 3F       		.uleb128 0x3f
 2206 01a9 19       		.uleb128 0x19
 2207 01aa 02       		.uleb128 0x2
 2208 01ab 18       		.uleb128 0x18
 2209 01ac 00       		.byte	0
 2210 01ad 00       		.byte	0
 2211 01ae 1D       		.uleb128 0x1d
 2212 01af 34       		.uleb128 0x34
 2213 01b0 00       		.byte	0
 2214 01b1 03       		.uleb128 0x3
 2215 01b2 08       		.uleb128 0x8
 2216 01b3 3A       		.uleb128 0x3a
 2217 01b4 0B       		.uleb128 0xb
 2218 01b5 3B       		.uleb128 0x3b
 2219 01b6 0B       		.uleb128 0xb
 2220 01b7 49       		.uleb128 0x49
 2221 01b8 13       		.uleb128 0x13
 2222 01b9 3F       		.uleb128 0x3f
 2223 01ba 19       		.uleb128 0x19
 2224 01bb 02       		.uleb128 0x2
 2225 01bc 18       		.uleb128 0x18
 2226 01bd 00       		.byte	0
 2227 01be 00       		.byte	0
 2228 01bf 00       		.byte	0
 2229              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 44


 2230 0000 5C000000 		.4byte	0x5c
 2231 0004 0200     		.2byte	0x2
 2232 0006 00000000 		.4byte	.Ldebug_info0
 2233 000a 04       		.byte	0x4
 2234 000b 00       		.byte	0
 2235 000c 0000     		.2byte	0
 2236 000e 0000     		.2byte	0
 2237 0010 00000000 		.4byte	.LFB64
 2238 0014 14000000 		.4byte	.LFE64-.LFB64
 2239 0018 00000000 		.4byte	.LFB65
 2240 001c 14000000 		.4byte	.LFE65-.LFB65
 2241 0020 00000000 		.4byte	.LFB66
 2242 0024 28000000 		.4byte	.LFE66-.LFB66
 2243 0028 00000000 		.4byte	.LFB67
 2244 002c 70000000 		.4byte	.LFE67-.LFB67
 2245 0030 00000000 		.4byte	.LFB68
 2246 0034 1C010000 		.4byte	.LFE68-.LFB68
 2247 0038 00000000 		.4byte	.LFB69
 2248 003c CC000000 		.4byte	.LFE69-.LFB69
 2249 0040 00000000 		.4byte	.LFB70
 2250 0044 8E000000 		.4byte	.LFE70-.LFB70
 2251 0048 00000000 		.4byte	.LFB71
 2252 004c 98000000 		.4byte	.LFE71-.LFB71
 2253 0050 00000000 		.4byte	.LFB72
 2254 0054 2A000000 		.4byte	.LFE72-.LFB72
 2255 0058 00000000 		.4byte	0
 2256 005c 00000000 		.4byte	0
 2257              		.section	.debug_ranges,"",%progbits
 2258              	.Ldebug_ranges0:
 2259 0000 70000000 		.4byte	.LBB2
 2260 0004 C0000000 		.4byte	.LBE2
 2261 0008 D2000000 		.4byte	.LBB3
 2262 000c D4000000 		.4byte	.LBE3
 2263 0010 00000000 		.4byte	0
 2264 0014 00000000 		.4byte	0
 2265 0018 00000000 		.4byte	.LFB64
 2266 001c 14000000 		.4byte	.LFE64
 2267 0020 00000000 		.4byte	.LFB65
 2268 0024 14000000 		.4byte	.LFE65
 2269 0028 00000000 		.4byte	.LFB66
 2270 002c 28000000 		.4byte	.LFE66
 2271 0030 00000000 		.4byte	.LFB67
 2272 0034 70000000 		.4byte	.LFE67
 2273 0038 00000000 		.4byte	.LFB68
 2274 003c 1C010000 		.4byte	.LFE68
 2275 0040 00000000 		.4byte	.LFB69
 2276 0044 CC000000 		.4byte	.LFE69
 2277 0048 00000000 		.4byte	.LFB70
 2278 004c 8E000000 		.4byte	.LFE70
 2279 0050 00000000 		.4byte	.LFB71
 2280 0054 98000000 		.4byte	.LFE71
 2281 0058 00000000 		.4byte	.LFB72
 2282 005c 2A000000 		.4byte	.LFE72
 2283 0060 00000000 		.4byte	0
 2284 0064 00000000 		.4byte	0
 2285              		.section	.debug_line,"",%progbits
 2286              	.Ldebug_line0:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 45


 2287 0000 B0020000 		.section	.debug_str,"MS",%progbits,1
 2287      0200A301 
 2287      00000201 
 2287      FB0E0D00 
 2287      01010101 
 2288              	.LASF79:
 2289 0000 75617274 		.ascii	"uart_chars\000"
 2289      5F636861 
 2289      727300
 2290              	.LASF35:
 2291 000b 6D6F6465 		.ascii	"model_id\000"
 2291      6C5F6964 
 2291      00
 2292              	.LASF77:
 2293 0014 736F7274 		.ascii	"sort\000"
 2293      00
 2294              	.LASF34:
 2295 0019 73696D5F 		.ascii	"sim_id\000"
 2295      696400
 2296              	.LASF109:
 2297 0020 75617274 		.ascii	"uart_clear\000"
 2297      5F636C65 
 2297      617200
 2298              	.LASF63:
 2299 002b 7379735F 		.ascii	"sys_settings_t\000"
 2299      73657474 
 2299      696E6773 
 2299      5F7400
 2300              	.LASF54:
 2301 003a 63757272 		.ascii	"currentCountDownValue\000"
 2301      656E7443 
 2301      6F756E74 
 2301      446F776E 
 2301      56616C75 
 2302              	.LASF76:
 2303 0050 6D656469 		.ascii	"median\000"
 2303      616E00
 2304              	.LASF53:
 2305 0057 636F756E 		.ascii	"countDownValue\000"
 2305      74446F77 
 2305      6E56616C 
 2305      756500
 2306              	.LASF2:
 2307 0066 73686F72 		.ascii	"short int\000"
 2307      7420696E 
 2307      7400
 2308              	.LASF80:
 2309 0070 6E756D5F 		.ascii	"num_chars\000"
 2309      63686172 
 2309      7300
 2310              	.LASF26:
 2311 007a 616C6C5F 		.ascii	"all_level_readings\000"
 2311      6C657665 
 2311      6C5F7265 
 2311      6164696E 
 2311      677300
 2312              	.LASF14:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 46


 2313 008d 73697A65 		.ascii	"sizetype\000"
 2313      74797065 
 2313      00
 2314              	.LASF61:
 2315 0096 65705F68 		.ascii	"ep_host\000"
 2315      6F737400 
 2316              	.LASF93:
 2317 009e 696E626F 		.ascii	"inbox\000"
 2317      7800
 2318              	.LASF106:
 2319 00a4 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2319      43313120 
 2319      352E342E 
 2319      31203230 
 2319      31363036 
 2320 00d7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2320      20726576 
 2320      6973696F 
 2320      6E203233 
 2320      37373135 
 2321 010a 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2321      66756E63 
 2321      74696F6E 
 2321      2D736563 
 2321      74696F6E 
 2322              	.LASF8:
 2323 0132 6C6F6E67 		.ascii	"long long int\000"
 2323      206C6F6E 
 2323      6720696E 
 2323      7400
 2324              	.LASF88:
 2325 0140 64617461 		.ascii	"data\000"
 2325      00
 2326              	.LASF78:
 2327 0145 73776170 		.ascii	"swap\000"
 2327      00
 2328              	.LASF59:
 2329 014a 63686970 		.ascii	"chip_uniqueId\000"
 2329      5F756E69 
 2329      71756549 
 2329      6400
 2330              	.LASF40:
 2331 0158 65636E6F 		.ascii	"ecno\000"
 2331      00
 2332              	.LASF104:
 2333 015d 616C6172 		.ascii	"alarmAppLED\000"
 2333      6D417070 
 2333      4C454400 
 2334              	.LASF31:
 2335 0169 76616C75 		.ascii	"value\000"
 2335      6500
 2336              	.LASF72:
 2337 016f 6C657665 		.ascii	"level_sensor_test\000"
 2337      6C5F7365 
 2337      6E736F72 
 2337      5F746573 
 2337      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 47


 2338              	.LASF19:
 2339 0181 75696E74 		.ascii	"uint16\000"
 2339      313600
 2340              	.LASF11:
 2341 0188 75696E74 		.ascii	"uint8_t\000"
 2341      385F7400 
 2342              	.LASF86:
 2343 0190 64617461 		.ascii	"dataPointsInStack\000"
 2343      506F696E 
 2343      7473496E 
 2343      53746163 
 2343      6B00
 2344              	.LASF18:
 2345 01a2 75696E74 		.ascii	"uint8\000"
 2345      3800
 2346              	.LASF81:
 2347 01a8 6C696E65 		.ascii	"line\000"
 2347      00
 2348              	.LASF39:
 2349 01ad 72736370 		.ascii	"rscp\000"
 2349      00
 2350              	.LASF32:
 2351 01b2 74696D65 		.ascii	"timeStamp\000"
 2351      5374616D 
 2351      7000
 2352              	.LASF87:
 2353 01bc 64617461 		.ascii	"dataPointsInStackDesired\000"
 2353      506F696E 
 2353      7473496E 
 2353      53746163 
 2353      6B446573 
 2354              	.LASF17:
 2355 01d5 666C6F61 		.ascii	"float\000"
 2355      7400
 2356              	.LASF21:
 2357 01db 696E7433 		.ascii	"int32\000"
 2357      3200
 2358              	.LASF29:
 2359 01e1 6E756D5F 		.ascii	"num_invalid_readings\000"
 2359      696E7661 
 2359      6C69645F 
 2359      72656164 
 2359      696E6773 
 2360              	.LASF9:
 2361 01f6 6C6F6E67 		.ascii	"long long unsigned int\000"
 2361      206C6F6E 
 2361      6720756E 
 2361      7369676E 
 2361      65642069 
 2362              	.LASF20:
 2363 020d 696E7431 		.ascii	"int16\000"
 2363      3600
 2364              	.LASF15:
 2365 0213 63686172 		.ascii	"char\000"
 2365      00
 2366              	.LASF24:
 2367 0218 72656173 		.ascii	"reason\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 48


 2367      6F6E00
 2368              	.LASF6:
 2369 021f 6C6F6E67 		.ascii	"long int\000"
 2369      20696E74 
 2369      00
 2370              	.LASF85:
 2371 0228 62756666 		.ascii	"buffer_overflow\000"
 2371      65725F6F 
 2371      76657266 
 2371      6C6F7700 
 2372              	.LASF58:
 2373 0238 6D6F6465 		.ascii	"modem_info\000"
 2373      6D5F696E 
 2373      666F00
 2374              	.LASF83:
 2375 0243 70617474 		.ascii	"pattern\000"
 2375      65726E00 
 2376              	.LASF99:
 2377 024b 616C6172 		.ascii	"alarmMeasure\000"
 2377      6D4D6561 
 2377      73757265 
 2377      00
 2378              	.LASF4:
 2379 0258 5F5F7569 		.ascii	"__uint8_t\000"
 2379      6E74385F 
 2379      7400
 2380              	.LASF65:
 2381 0262 75617274 		.ascii	"uart_len\000"
 2381      5F6C656E 
 2381      00
 2382              	.LASF57:
 2383 026b 616C6172 		.ascii	"alarm\000"
 2383      6D00
 2384              	.LASF110:
 2385 0271 66696E64 		.ascii	"find_median\000"
 2385      5F6D6564 
 2385      69616E00 
 2386              	.LASF101:
 2387 027d 616C6172 		.ascii	"alarmSync\000"
 2387      6D53796E 
 2387      6300
 2388              	.LASF13:
 2389 0287 6C6F6E67 		.ascii	"long double\000"
 2389      20646F75 
 2389      626C6500 
 2390              	.LASF1:
 2391 0293 756E7369 		.ascii	"unsigned char\000"
 2391      676E6564 
 2391      20636861 
 2391      7200
 2392              	.LASF42:
 2393 02a1 72737270 		.ascii	"rsrp\000"
 2393      00
 2394              	.LASF90:
 2395 02a6 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2395      6D5F7374 
 2395      6172745F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 49


 2395      74696D65 
 2395      5F737461 
 2396              	.LASF66:
 2397 02bd 4C657665 		.ascii	"Level_Sensor_ISR\000"
 2397      6C5F5365 
 2397      6E736F72 
 2397      5F495352 
 2397      00
 2398              	.LASF89:
 2399 02ce 6D6F6465 		.ascii	"modem_state\000"
 2399      6D5F7374 
 2399      61746500 
 2400              	.LASF0:
 2401 02da 7369676E 		.ascii	"signed char\000"
 2401      65642063 
 2401      68617200 
 2402              	.LASF107:
 2403 02e6 6C657665 		.ascii	"level_sensor.c\000"
 2403      6C5F7365 
 2403      6E736F72 
 2403      2E6300
 2404              	.LASF98:
 2405 02f5 73797374 		.ascii	"system_settings\000"
 2405      656D5F73 
 2405      65747469 
 2405      6E677300 
 2406              	.LASF10:
 2407 0305 756E7369 		.ascii	"unsigned int\000"
 2407      676E6564 
 2407      20696E74 
 2407      00
 2408              	.LASF33:
 2409 0312 6B65795F 		.ascii	"key_value_t\000"
 2409      76616C75 
 2409      655F7400 
 2410              	.LASF38:
 2411 031e 72786C65 		.ascii	"rxlev\000"
 2411      7600
 2412              	.LASF49:
 2413 0324 73796E63 		.ascii	"sync_time\000"
 2413      5F74696D 
 2413      6500
 2414              	.LASF91:
 2415 032e 6D6F6465 		.ascii	"modem_stats\000"
 2415      6D5F7374 
 2415      61747300 
 2416              	.LASF100:
 2417 033a 74696D65 		.ascii	"timeToMeasure\000"
 2417      546F4D65 
 2417      61737572 
 2417      6500
 2418              	.LASF52:
 2419 0348 75706461 		.ascii	"updatable_parameters_t\000"
 2419      7461626C 
 2419      655F7061 
 2419      72616D65 
 2419      74657273 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 50


 2420              	.LASF47:
 2421 035f 73696D5F 		.ascii	"sim_type\000"
 2421      74797065 
 2421      00
 2422              	.LASF60:
 2423 0368 7379735F 		.ascii	"sys_info_t\000"
 2423      696E666F 
 2423      5F7400
 2424              	.LASF3:
 2425 0373 73686F72 		.ascii	"short unsigned int\000"
 2425      7420756E 
 2425      7369676E 
 2425      65642069 
 2425      6E7400
 2426              	.LASF43:
 2427 0386 74696D65 		.ascii	"time_to_network_connect\000"
 2427      5F746F5F 
 2427      6E657477 
 2427      6F726B5F 
 2427      636F6E6E 
 2428              	.LASF23:
 2429 039e 73746174 		.ascii	"status\000"
 2429      757300
 2430              	.LASF67:
 2431 03a5 6C657665 		.ascii	"level_sensor_take_reading\000"
 2431      6C5F7365 
 2431      6E736F72 
 2431      5F74616B 
 2431      655F7265 
 2432              	.LASF97:
 2433 03bf 73797374 		.ascii	"system_info\000"
 2433      656D5F69 
 2433      6E666F00 
 2434              	.LASF44:
 2435 03cb 74696D65 		.ascii	"time_to_acquire_ip\000"
 2435      5F746F5F 
 2435      61637175 
 2435      6972655F 
 2435      697000
 2436              	.LASF84:
 2437 03de 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2437      52784275 
 2437      66666572 
 2437      00
 2438              	.LASF36:
 2439 03eb 696D6569 		.ascii	"imei\000"
 2439      00
 2440              	.LASF12:
 2441 03f0 696E7433 		.ascii	"int32_t\000"
 2441      325F7400 
 2442              	.LASF5:
 2443 03f8 5F5F696E 		.ascii	"__int32_t\000"
 2443      7433325F 
 2443      7400
 2444              	.LASF45:
 2445 0402 6D6F6465 		.ascii	"modem_stats_t\000"
 2445      6D5F7374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 51


 2445      6174735F 
 2445      7400
 2446              	.LASF30:
 2447 0410 6C657665 		.ascii	"level_sensor_t\000"
 2447      6C5F7365 
 2447      6E736F72 
 2447      5F7400
 2448              	.LASF51:
 2449 041f 5F426F6F 		.ascii	"_Bool\000"
 2449      6C00
 2450              	.LASF103:
 2451 0425 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2451      546F5379 
 2451      636E5265 
 2451      6D6F7465 
 2451      50617261 
 2452              	.LASF73:
 2453 043c 74657374 		.ascii	"test\000"
 2453      00
 2454              	.LASF41:
 2455 0441 72737271 		.ascii	"rsrq\000"
 2455      00
 2456              	.LASF108:
 2457 0446 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2457      73657273 
 2457      5C64616E 
 2457      747A5C44 
 2457      6F63756D 
 2458 0473 72694F53 		.ascii	"riOS.cydsn\000"
 2458      2E637964 
 2458      736E00
 2459              	.LASF96:
 2460 047e 68747470 		.ascii	"http_route\000"
 2460      5F726F75 
 2460      746500
 2461              	.LASF71:
 2462 0489 72656164 		.ascii	"reading\000"
 2462      696E6700 
 2463              	.LASF7:
 2464 0491 6C6F6E67 		.ascii	"long unsigned int\000"
 2464      20756E73 
 2464      69676E65 
 2464      6420696E 
 2464      7400
 2465              	.LASF69:
 2466 04a3 6C657665 		.ascii	"level_sensor_output\000"
 2466      6C5F7365 
 2466      6E736F72 
 2466      5F6F7574 
 2466      70757400 
 2467              	.LASF16:
 2468 04b7 646F7562 		.ascii	"double\000"
 2468      6C6500
 2469              	.LASF75:
 2470 04be 61727261 		.ascii	"array\000"
 2470      7900
 2471              	.LASF50:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 52


 2472 04c4 64656275 		.ascii	"debug_level\000"
 2472      675F6C65 
 2472      76656C00 
 2473              	.LASF37:
 2474 04d0 6D6F6465 		.ascii	"modem_info_t\000"
 2474      6D5F696E 
 2474      666F5F74 
 2474      00
 2475              	.LASF55:
 2476 04dd 636F756E 		.ascii	"countDownType\000"
 2476      74446F77 
 2476      6E547970 
 2476      6500
 2477              	.LASF27:
 2478 04eb 6C657665 		.ascii	"level_reading\000"
 2478      6C5F7265 
 2478      6164696E 
 2478      6700
 2479              	.LASF82:
 2480 04f9 6D617463 		.ascii	"match\000"
 2480      6800
 2481              	.LASF68:
 2482 04ff 72785F63 		.ascii	"rx_char\000"
 2482      68617200 
 2483              	.LASF70:
 2484 0507 746F6B65 		.ascii	"token\000"
 2484      6E00
 2485              	.LASF105:
 2486 050d 74696D65 		.ascii	"timeToAppLED\000"
 2486      546F4170 
 2486      704C4544 
 2486      00
 2487              	.LASF25:
 2488 051a 74657374 		.ascii	"test_t\000"
 2488      5F7400
 2489              	.LASF64:
 2490 0521 75617274 		.ascii	"uart_string\000"
 2490      5F737472 
 2490      696E6700 
 2491              	.LASF22:
 2492 052d 74657374 		.ascii	"test_name\000"
 2492      5F6E616D 
 2492      6500
 2493              	.LASF56:
 2494 0537 636F756E 		.ascii	"countDownResetCondition\000"
 2494      74446F77 
 2494      6E526573 
 2494      6574436F 
 2494      6E646974 
 2495              	.LASF92:
 2496 054f 75706461 		.ascii	"updatable_parameters\000"
 2496      7461626C 
 2496      655F7061 
 2496      72616D65 
 2496      74657273 
 2497              	.LASF62:
 2498 0564 65705F70 		.ascii	"ep_port\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRjEuo9.s 			page 53


 2498      6F727400 
 2499              	.LASF28:
 2500 056c 6E756D5F 		.ascii	"num_valid_readings\000"
 2500      76616C69 
 2500      645F7265 
 2500      6164696E 
 2500      677300
 2501              	.LASF46:
 2502 057f 6E6F6465 		.ascii	"node_type\000"
 2502      5F747970 
 2502      6500
 2503              	.LASF95:
 2504 0589 68747470 		.ascii	"http_body\000"
 2504      5F626F64 
 2504      7900
 2505              	.LASF94:
 2506 0593 68747470 		.ascii	"http_request\000"
 2506      5F726571 
 2506      75657374 
 2506      00
 2507              	.LASF102:
 2508 05a0 74696D65 		.ascii	"timeToSync\000"
 2508      546F5379 
 2508      6E6300
 2509              	.LASF74:
 2510 05ab 73656E73 		.ascii	"sensor\000"
 2510      6F7200
 2511              	.LASF48:
 2512 05b2 6D656173 		.ascii	"measure_time\000"
 2512      7572655F 
 2512      74696D65 
 2512      00
 2513              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
