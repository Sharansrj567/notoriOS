ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"level_sensor.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,7,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.bss
  50              		.align	2
  51              	uart_chars:
  52 0000 00000000 		.space	257
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              	num_chars:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 2


  54 0101 00       		.space	1
  55              		.data
  56              		.align	2
  57              		.type	line, %object
  58              		.size	line, 4
  59              	line:
  60 0000 00000000 		.word	uart_chars
  61              		.bss
  62 0102 0000     		.align	2
  63              	match:
  64 0104 00000000 		.space	4
  65              		.align	2
  66              	pattern:
  67 0108 00000000 		.space	4
  68              		.section	.text.uart_string,"ax",%progbits
  69              		.align	2
  70              		.global	uart_string
  71              		.thumb
  72              		.thumb_func
  73              		.type	uart_string, %function
  74              	uart_string:
  75              	.LFB64:
  76              		.file 1 "level_sensor.c"
   1:level_sensor.c **** #include "level_sensor.h"
   2:level_sensor.c **** #include "notoriOS.h"
   3:level_sensor.c **** #include "debug.h"
   4:level_sensor.c **** 
   5:level_sensor.c **** /* === Driver Functions === */
   6:level_sensor.c **** 
   7:level_sensor.c **** //Sensor related global calls
   8:level_sensor.c **** 
   9:level_sensor.c **** 
  10:level_sensor.c **** // Circular buffer of recently received chars.
  11:level_sensor.c **** // Initialize all the members of the array uart_chars to 0. 
  12:level_sensor.c **** static char uart_chars[257] = {0};
  13:level_sensor.c **** static uint8_t num_chars = 0;
  14:level_sensor.c **** 
  15:level_sensor.c **** static const char *line = uart_chars;
  16:level_sensor.c **** // Only pointers can be null, where null is a special address used to signify that the pointer is n
  17:level_sensor.c **** // Pointers are not initialized to null by default, you must do so if you want them initialized.
  18:level_sensor.c **** static const char *match = NULL;
  19:level_sensor.c **** static const char *pattern = NULL;
  20:level_sensor.c **** 
  21:level_sensor.c **** 
  22:level_sensor.c **** // This is only defined in c file so this function will return the location in memory where that va
  23:level_sensor.c **** const char *uart_string(void) {
  77              		.loc 1 23 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  24:level_sensor.c ****     // Variables in front of a variable is casting 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 3


  25:level_sensor.c ****     // uart_chars may be a different variable type, make sure to cast it as a char
  26:level_sensor.c ****   return (char*)uart_chars;
  87              		.loc 1 26 0
  88 0004 024B     		ldr	r3, .L3
  27:level_sensor.c **** }
  89              		.loc 1 27 0
  90 0006 1846     		mov	r0, r3
  91 0008 BD46     		mov	sp, r7
  92              		.cfi_def_cfa_register 13
  93              		@ sp needed
  94 000a 80BC     		pop	{r7}
  95              		.cfi_restore 7
  96              		.cfi_def_cfa_offset 0
  97 000c 7047     		bx	lr
  98              	.L4:
  99 000e 00BF     		.align	2
 100              	.L3:
 101 0010 00000000 		.word	uart_chars
 102              		.cfi_endproc
 103              	.LFE64:
 104              		.size	uart_string, .-uart_string
 105              		.section	.text.uart_len,"ax",%progbits
 106              		.align	2
 107              		.global	uart_len
 108              		.thumb
 109              		.thumb_func
 110              		.type	uart_len, %function
 111              	uart_len:
 112              	.LFB65:
  28:level_sensor.c **** 
  29:level_sensor.c **** // Return the number of characters of the level sensor reading
  30:level_sensor.c **** uint8_t uart_len(void) {
 113              		.loc 1 30 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0000 80B4     		push	{r7}
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0002 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
  31:level_sensor.c ****   return num_chars;
 123              		.loc 1 31 0
 124 0004 024B     		ldr	r3, .L7
 125 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  32:level_sensor.c **** }
 126              		.loc 1 32 0
 127 0008 1846     		mov	r0, r3
 128 000a BD46     		mov	sp, r7
 129              		.cfi_def_cfa_register 13
 130              		@ sp needed
 131 000c 80BC     		pop	{r7}
 132              		.cfi_restore 7
 133              		.cfi_def_cfa_offset 0
 134 000e 7047     		bx	lr
 135              	.L8:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 4


 136              		.align	2
 137              	.L7:
 138 0010 01010000 		.word	num_chars
 139              		.cfi_endproc
 140              	.LFE65:
 141              		.size	uart_len, .-uart_len
 142              		.section	.text.uart_clear,"ax",%progbits
 143              		.align	2
 144              		.global	uart_clear
 145              		.thumb
 146              		.thumb_func
 147              		.type	uart_clear, %function
 148              	uart_clear:
 149              	.LFB66:
  33:level_sensor.c **** 
  34:level_sensor.c **** // Clears the sensor data 
  35:level_sensor.c **** void uart_clear(void) {
 150              		.loc 1 35 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 80B5     		push	{r7, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 00AF     		add	r7, sp, #0
 159              		.cfi_def_cfa_register 7
  36:level_sensor.c ****   // UART_ClearRxBuffer(): Clears the receiver memory buffer and hardware RX FIFO of all received d
  37:level_sensor.c ****   Level_Sensor_UART_ClearRxBuffer();
 160              		.loc 1 37 0
 161 0004 FFF7FEFF 		bl	Level_Sensor_UART_ClearRxBuffer
  38:level_sensor.c ****   // void *memset(void *str, int c, size_t n) where str is a pointer to the block of memory to fill
  39:level_sensor.c ****   // The value is passed as an int, but the function fills the block of memory using the unsigned c
  40:level_sensor.c ****   // n is the number of bytes to be set to the value.
  41:level_sensor.c ****   memset((void*)uart_chars, 0, 256);
 162              		.loc 1 41 0
 163 0008 4FF48072 		mov	r2, #256
 164 000c 0021     		movs	r1, #0
 165 000e 0448     		ldr	r0, .L10
 166 0010 FFF7FEFF 		bl	memset
  42:level_sensor.c ****   num_chars = 0;
 167              		.loc 1 42 0
 168 0014 034B     		ldr	r3, .L10+4
 169 0016 0022     		movs	r2, #0
 170 0018 1A70     		strb	r2, [r3]
  43:level_sensor.c **** }
 171              		.loc 1 43 0
 172 001a 00BF     		nop
 173 001c 80BD     		pop	{r7, pc}
 174              	.L11:
 175 001e 00BF     		.align	2
 176              	.L10:
 177 0020 00000000 		.word	uart_chars
 178 0024 01010000 		.word	num_chars
 179              		.cfi_endproc
 180              	.LFE66:
 181              		.size	uart_clear, .-uart_clear
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 5


 182              		.section	.text.Level_Sensor_ISR,"ax",%progbits
 183              		.align	2
 184              		.global	Level_Sensor_ISR
 185              		.thumb
 186              		.thumb_func
 187              		.type	Level_Sensor_ISR, %function
 188              	Level_Sensor_ISR:
 189              	.LFB67:
  44:level_sensor.c **** 
  45:level_sensor.c **** // ISR: Interrupt Service Routine
  46:level_sensor.c **** CY_ISR(Level_Sensor_ISR) {
 190              		.loc 1 46 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 82B0     		sub	sp, sp, #8
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
  47:level_sensor.c ****     /* Store received char in uart_chars.
  48:level_sensor.c ****     Returns the last received byte of data. Level_Sensor_UART_GetChar() is designed for ASCII chara
  49:level_sensor.c ****     1 to 255 are values for valid characters and 0 indicats an error occurred or no data is present
  50:level_sensor.c ****     char rx_char = Level_Sensor_UART_GetChar();
 202              		.loc 1 50 0
 203 0006 FFF7FEFF 		bl	Level_Sensor_UART_GetChar
 204 000a 0346     		mov	r3, r0
 205 000c FB71     		strb	r3, [r7, #7]
  51:level_sensor.c ****     // UART_GetChar() returns data, then set the entire uart_chars array to rx_char.
  52:level_sensor.c ****     if (rx_char) uart_chars[num_chars++] = rx_char;
 206              		.loc 1 52 0
 207 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 208 0010 002B     		cmp	r3, #0
 209 0012 09D0     		beq	.L13
 210              		.loc 1 52 0 is_stmt 0 discriminator 1
 211 0014 114B     		ldr	r3, .L16
 212 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 0018 5A1C     		adds	r2, r3, #1
 214 001a D1B2     		uxtb	r1, r2
 215 001c 0F4A     		ldr	r2, .L16
 216 001e 1170     		strb	r1, [r2]
 217 0020 1946     		mov	r1, r3
 218 0022 0F4A     		ldr	r2, .L16+4
 219 0024 FB79     		ldrb	r3, [r7, #7]
 220 0026 5354     		strb	r3, [r2, r1]
 221              	.L13:
  53:level_sensor.c **** 
  54:level_sensor.c ****     /* Check pattern at end of line */
  55:level_sensor.c ****     if (rx_char == '\r') {
 222              		.loc 1 55 0 is_stmt 1
 223 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 224 002a 0D2B     		cmp	r3, #13
 225 002c 11D1     		bne	.L15
  56:level_sensor.c ****         // strstr(): char *strstr(const char *haystack, const char *needle). haystack - main C stri
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 6


  57:level_sensor.c ****         match = strstr(line, pattern);
 226              		.loc 1 57 0
 227 002e 0D4B     		ldr	r3, .L16+8
 228 0030 1A68     		ldr	r2, [r3]
 229 0032 0D4B     		ldr	r3, .L16+12
 230 0034 1B68     		ldr	r3, [r3]
 231 0036 1946     		mov	r1, r3
 232 0038 1046     		mov	r0, r2
 233 003a FFF7FEFF 		bl	strstr
 234 003e 0246     		mov	r2, r0
 235 0040 0A4B     		ldr	r3, .L16+16
 236 0042 1A60     		str	r2, [r3]
  58:level_sensor.c ****         line = uart_chars + num_chars;
 237              		.loc 1 58 0
 238 0044 054B     		ldr	r3, .L16
 239 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 240 0048 1A46     		mov	r2, r3
 241 004a 054B     		ldr	r3, .L16+4
 242 004c 1344     		add	r3, r3, r2
 243 004e 054A     		ldr	r2, .L16+8
 244 0050 1360     		str	r3, [r2]
 245              	.L15:
  59:level_sensor.c ****     }
  60:level_sensor.c **** }
 246              		.loc 1 60 0
 247 0052 00BF     		nop
 248 0054 0837     		adds	r7, r7, #8
 249              		.cfi_def_cfa_offset 8
 250 0056 BD46     		mov	sp, r7
 251              		.cfi_def_cfa_register 13
 252              		@ sp needed
 253 0058 80BD     		pop	{r7, pc}
 254              	.L17:
 255 005a 00BF     		.align	2
 256              	.L16:
 257 005c 01010000 		.word	num_chars
 258 0060 00000000 		.word	uart_chars
 259 0064 00000000 		.word	line
 260 0068 08010000 		.word	pattern
 261 006c 04010000 		.word	match
 262              		.cfi_endproc
 263              	.LFE67:
 264              		.size	Level_Sensor_ISR, .-Level_Sensor_ISR
 265              		.section	.text.Level_Sensor_Update,"ax",%progbits
 266              		.align	2
 267              		.global	Level_Sensor_Update
 268              		.thumb
 269              		.thumb_func
 270              		.type	Level_Sensor_Update, %function
 271              	Level_Sensor_Update:
 272              	.LFB68:
  61:level_sensor.c **** 
  62:level_sensor.c **** void Level_Sensor_Update(char * message){
 273              		.loc 1 62 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 7


 277 0000 80B5     		push	{r7, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 7, -8
 280              		.cfi_offset 14, -4
 281 0002 82B0     		sub	sp, sp, #8
 282              		.cfi_def_cfa_offset 16
 283 0004 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 285 0006 7860     		str	r0, [r7, #4]
  63:level_sensor.c ****     strcpy(level_sensor_inbox, message);
 286              		.loc 1 63 0
 287 0008 7968     		ldr	r1, [r7, #4]
 288 000a 0348     		ldr	r0, .L19
 289 000c FFF7FEFF 		bl	strcpy
  64:level_sensor.c **** }
 290              		.loc 1 64 0
 291 0010 00BF     		nop
 292 0012 0837     		adds	r7, r7, #8
 293              		.cfi_def_cfa_offset 8
 294 0014 BD46     		mov	sp, r7
 295              		.cfi_def_cfa_register 13
 296              		@ sp needed
 297 0016 80BD     		pop	{r7, pc}
 298              	.L20:
 299              		.align	2
 300              	.L19:
 301 0018 00000000 		.word	level_sensor_inbox
 302              		.cfi_endproc
 303              	.LFE68:
 304              		.size	Level_Sensor_Update, .-Level_Sensor_Update
 305              		.section	.rodata
 306              		.align	2
 307              	.LC0:
 308 0000 4F464600 		.ascii	"OFF\000"
 309              		.align	2
 310              	.LC1:
 311 0004 256C6400 		.ascii	"%ld\000"
 312              		.align	2
 313              	.LC2:
 314 0008 256400   		.ascii	"%d\000"
 315 000b 00       		.align	2
 316              	.LC3:
 317 000c 6D617862 		.ascii	"maxbotix_depth=%s\000"
 317      6F746978 
 317      5F646570 
 317      74683D25 
 317      7300
 318 001e 0000     		.align	2
 319              	.LC4:
 320 0020 6D617862 		.ascii	"maxbotix_depth\000"
 320      6F746978 
 320      5F646570 
 320      746800
 321 002f 00       		.align	2
 322              	.LC5:
 323 0030 612B00   		.ascii	"a+\000"
 324 0033 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 8


 325              	.LC6:
 326 0034 64617461 		.ascii	"data.txt\000"
 326      2E747874 
 326      00
 327 003d 000000   		.align	2
 328              	.LC7:
 329 0040 206D6178 		.ascii	" maxbotix_depth: \000"
 329      626F7469 
 329      785F6465 
 329      7074683A 
 329      2000
 330 0052 0000     		.align	2
 331              	.LC8:
 332 0054 2000     		.ascii	" \000"
 333 0056 0000     		.align	2
 334              	.LC9:
 335 0058 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 335      64206E6F 
 335      74206765 
 335      74207661 
 335      6C696420 
 336              		.align	2
 337              	.LC10:
 338 0084 2D3100   		.ascii	"-1\000"
 339              		.section	.text.level_sensor,"ax",%progbits
 340              		.align	2
 341              		.global	level_sensor
 342              		.thumb
 343              		.thumb_func
 344              		.type	level_sensor, %function
 345              	level_sensor:
 346              	.LFB69:
  65:level_sensor.c **** 
  66:level_sensor.c **** uint8 level_sensor(){
 347              		.loc 1 66 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 88
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 0000 80B5     		push	{r7, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 96B0     		sub	sp, sp, #88
 356              		.cfi_def_cfa_offset 96
 357 0004 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
  67:level_sensor.c ****     char * compare_location;
  68:level_sensor.c ****     
  69:level_sensor.c ****     compare_location = strstr(app_led_inbox,"OFF");        
 359              		.loc 1 69 0
 360 0006 2C49     		ldr	r1, .L27
 361 0008 2C48     		ldr	r0, .L27+4
 362 000a FFF7FEFF 		bl	strstr
 363 000e 7865     		str	r0, [r7, #84]
  70:level_sensor.c ****     if(compare_location!=NULL){
 364              		.loc 1 70 0
 365 0010 7B6D     		ldr	r3, [r7, #84]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 9


 366 0012 002B     		cmp	r3, #0
 367 0014 01D0     		beq	.L22
  71:level_sensor.c ****         return 0; // this app is disabled, don't do anything
 368              		.loc 1 71 0
 369 0016 0023     		movs	r3, #0
 370 0018 49E0     		b	.L26
 371              	.L22:
  72:level_sensor.c ****     }
  73:level_sensor.c ****     
  74:level_sensor.c ****     
  75:level_sensor.c ****     
  76:level_sensor.c ****     // otherwise, assume it's on and they want our depth measurements
  77:level_sensor.c ****     
  78:level_sensor.c ****     // below is copied and adapted from makeMeasurements in modem.c (that function will be deleted 
  79:level_sensor.c ****     
  80:level_sensor.c ****     // Get clock time and save to timeStamp
  81:level_sensor.c ****     long timeStamp = getTimeStamp();
 372              		.loc 1 81 0
 373 001a FFF7FEFF 		bl	getTimeStamp
 374 001e 3865     		str	r0, [r7, #80]
  82:level_sensor.c ****     char c_timeStamp[32];
  83:level_sensor.c ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 375              		.loc 1 83 0
 376 0020 07F13000 		add	r0, r7, #48
 377 0024 3B6D     		ldr	r3, [r7, #80]
 378 0026 264A     		ldr	r2, .L27+8
 379 0028 2021     		movs	r1, #32
 380 002a FFF7FEFF 		bl	snprintf
  84:level_sensor.c ****     
  85:level_sensor.c ****     // Holds string for value that will be written 
  86:level_sensor.c ****     char value[DATA_MAX_KEY_LENGTH];
  87:level_sensor.c ****     
  88:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
  89:level_sensor.c ****     level_sensor_t m_level_sensor;
  90:level_sensor.c ****     
  91:level_sensor.c ****     // Take level sensor readings and save them to m_level_sensor
  92:level_sensor.c ****     m_level_sensor = level_sensor_take_reading();
 381              		.loc 1 92 0
 382 002e 3B46     		mov	r3, r7
 383 0030 1846     		mov	r0, r3
 384 0032 FFF7FEFF 		bl	level_sensor_take_reading
  93:level_sensor.c **** 
  94:level_sensor.c ****     // If the number of valid level sensor readings is greater than 0, then print the level sensor 
  95:level_sensor.c ****     if(m_level_sensor.num_valid_readings > 0){
 385              		.loc 1 95 0
 386 0036 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 387 0038 002B     		cmp	r3, #0
 388 003a 2ED0     		beq	.L24
  96:level_sensor.c ****         snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 389              		.loc 1 96 0
 390 003c B7F91630 		ldrsh	r3, [r7, #22]
 391 0040 07F11C00 		add	r0, r7, #28
 392 0044 1F4A     		ldr	r2, .L27+12
 393 0046 1421     		movs	r1, #20
 394 0048 FFF7FEFF 		bl	snprintf
  97:level_sensor.c ****         printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 395              		.loc 1 97 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 10


 396 004c 07F11C03 		add	r3, r7, #28
 397 0050 1A46     		mov	r2, r3
 398 0052 1D49     		ldr	r1, .L27+16
 399 0054 0020     		movs	r0, #0
 400 0056 FFF7FEFF 		bl	printNotif
  98:level_sensor.c ****         pushData("maxbotix_depth",value,timeStamp);
 401              		.loc 1 98 0
 402 005a 07F11C03 		add	r3, r7, #28
 403 005e 3A6D     		ldr	r2, [r7, #80]
 404 0060 1946     		mov	r1, r3
 405 0062 1A48     		ldr	r0, .L27+20
 406 0064 FFF7FEFF 		bl	pushData
  99:level_sensor.c ****         
 100:level_sensor.c ****         // Print measurement to SD card to file called data.txt
 101:level_sensor.c ****         SD_write("data.txt", "a+", c_timeStamp);
 407              		.loc 1 101 0
 408 0068 07F13003 		add	r3, r7, #48
 409 006c 1A46     		mov	r2, r3
 410 006e 1849     		ldr	r1, .L27+24
 411 0070 1848     		ldr	r0, .L27+28
 412 0072 FFF7FEFF 		bl	SD_write
 102:level_sensor.c ****         SD_write("data.txt", "a+", " maxbotix_depth: ");
 413              		.loc 1 102 0
 414 0076 184A     		ldr	r2, .L27+32
 415 0078 1549     		ldr	r1, .L27+24
 416 007a 1648     		ldr	r0, .L27+28
 417 007c FFF7FEFF 		bl	SD_write
 103:level_sensor.c ****         SD_write("data.txt", "a+", value);
 418              		.loc 1 103 0
 419 0080 07F11C03 		add	r3, r7, #28
 420 0084 1A46     		mov	r2, r3
 421 0086 1249     		ldr	r1, .L27+24
 422 0088 1248     		ldr	r0, .L27+28
 423 008a FFF7FEFF 		bl	SD_write
 104:level_sensor.c ****         SD_write("data.txt", "a+", " ");
 424              		.loc 1 104 0
 425 008e 134A     		ldr	r2, .L27+36
 426 0090 0F49     		ldr	r1, .L27+24
 427 0092 1048     		ldr	r0, .L27+28
 428 0094 FFF7FEFF 		bl	SD_write
 429 0098 08E0     		b	.L25
 430              	.L24:
 105:level_sensor.c ****     }else{
 106:level_sensor.c ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 431              		.loc 1 106 0
 432 009a 1149     		ldr	r1, .L27+40
 433 009c 0220     		movs	r0, #2
 434 009e FFF7FEFF 		bl	printNotif
 107:level_sensor.c ****         pushData("maxbotix_depth","-1",timeStamp); // error code, never get this from a sensor
 435              		.loc 1 107 0
 436 00a2 3A6D     		ldr	r2, [r7, #80]
 437 00a4 0F49     		ldr	r1, .L27+44
 438 00a6 0948     		ldr	r0, .L27+20
 439 00a8 FFF7FEFF 		bl	pushData
 440              	.L25:
 108:level_sensor.c ****     }
 109:level_sensor.c ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 11


 110:level_sensor.c ****     
 111:level_sensor.c ****     
 112:level_sensor.c ****     return 0;
 441              		.loc 1 112 0
 442 00ac 0023     		movs	r3, #0
 443              	.L26:
 113:level_sensor.c **** }
 444              		.loc 1 113 0 discriminator 1
 445 00ae 1846     		mov	r0, r3
 446 00b0 5837     		adds	r7, r7, #88
 447              		.cfi_def_cfa_offset 8
 448 00b2 BD46     		mov	sp, r7
 449              		.cfi_def_cfa_register 13
 450              		@ sp needed
 451 00b4 80BD     		pop	{r7, pc}
 452              	.L28:
 453 00b6 00BF     		.align	2
 454              	.L27:
 455 00b8 00000000 		.word	.LC0
 456 00bc 00000000 		.word	app_led_inbox
 457 00c0 04000000 		.word	.LC1
 458 00c4 08000000 		.word	.LC2
 459 00c8 0C000000 		.word	.LC3
 460 00cc 20000000 		.word	.LC4
 461 00d0 30000000 		.word	.LC5
 462 00d4 34000000 		.word	.LC6
 463 00d8 40000000 		.word	.LC7
 464 00dc 54000000 		.word	.LC8
 465 00e0 58000000 		.word	.LC9
 466 00e4 84000000 		.word	.LC10
 467              		.cfi_endproc
 468              	.LFE69:
 469              		.size	level_sensor, .-level_sensor
 470              		.section	.rodata
 471 0087 00       		.align	2
 472              	.LC11:
 473 0088 5200     		.ascii	"R\000"
 474              		.section	.text.level_sensor_take_reading,"ax",%progbits
 475              		.align	2
 476              		.global	level_sensor_take_reading
 477              		.thumb
 478              		.thumb_func
 479              		.type	level_sensor_take_reading, %function
 480              	level_sensor_take_reading:
 481              	.LFB70:
 114:level_sensor.c **** 
 115:level_sensor.c **** // takes level sensor measurements and calculates average level sensor reading
 116:level_sensor.c **** level_sensor_t level_sensor_take_reading(){
 482              		.loc 1 116 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 40
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486 0000 B0B5     		push	{r4, r5, r7, lr}
 487              		.cfi_def_cfa_offset 16
 488              		.cfi_offset 4, -16
 489              		.cfi_offset 5, -12
 490              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 12


 491              		.cfi_offset 14, -4
 492 0002 8AB0     		sub	sp, sp, #40
 493              		.cfi_def_cfa_offset 56
 494 0004 00AF     		add	r7, sp, #0
 495              		.cfi_def_cfa_register 7
 496 0006 7860     		str	r0, [r7, #4]
 117:level_sensor.c ****     
 118:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 119:level_sensor.c ****     level_sensor_t level_sensor_output;
 120:level_sensor.c ****     level_sensor_output.num_invalid_readings = 0;
 497              		.loc 1 120 0
 498 0008 0023     		movs	r3, #0
 499 000a 87F82130 		strb	r3, [r7, #33]
 121:level_sensor.c ****     level_sensor_output.num_valid_readings = 0;
 500              		.loc 1 121 0
 501 000e 0023     		movs	r3, #0
 502 0010 87F82030 		strb	r3, [r7, #32]
 122:level_sensor.c ****     
 123:level_sensor.c ****     uart_clear();
 503              		.loc 1 123 0
 504 0014 FFF7FEFF 		bl	uart_clear
 124:level_sensor.c ****     
 125:level_sensor.c ****     // Start sensor power, uart, and isr
 126:level_sensor.c ****     Level_Sensor_Power_Write(ON);   // Pulls Level Sensor power pin high (turns it on).
 505              		.loc 1 126 0
 506 0018 0120     		movs	r0, #1
 507 001a FFF7FEFF 		bl	Level_Sensor_Power_Write
 127:level_sensor.c ****     CyDelay(200u); // Sensor bootup sequence ~200ms -- senosor will spit out ID info, but we don't 
 508              		.loc 1 127 0
 509 001e C820     		movs	r0, #200
 510 0020 FFF7FEFF 		bl	CyDelay
 128:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_DIG_HIZ); // RX_SetDriveMode(): Sets the drive mode for eac
 511              		.loc 1 128 0
 512 0024 0220     		movs	r0, #2
 513 0026 FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
 129:level_sensor.c ****     Level_Sensor_UART_Start(); // Level_Sensor_UART_Start() sets the initVar variable, calls the Le
 514              		.loc 1 129 0
 515 002a FFF7FEFF 		bl	Level_Sensor_UART_Start
 130:level_sensor.c ****     Level_Sensor_ISR_StartEx(Level_Sensor_ISR); // Sets up the interrupt and enables it.
 516              		.loc 1 130 0
 517 002e 3848     		ldr	r0, .L38
 518 0030 FFF7FEFF 		bl	Level_Sensor_ISR_StartEx
 131:level_sensor.c ****     
 132:level_sensor.c ****     // Wait to take  reading
 133:level_sensor.c ****     // Sensor will take ~200ms to send first reading, and 200ms for subsequent readings
 134:level_sensor.c ****     CyDelay(2000u); // Take a few seconds to get readings, 2 secs ~10 readings
 519              		.loc 1 134 0
 520 0034 4FF4FA60 		mov	r0, #2000
 521 0038 FFF7FEFF 		bl	CyDelay
 135:level_sensor.c ****     
 136:level_sensor.c ****     //stop all sensor processes
 137:level_sensor.c ****     Level_Sensor_UART_Stop(); // Disables the UART operation.
 522              		.loc 1 137 0
 523 003c FFF7FEFF 		bl	Level_Sensor_UART_Stop
 138:level_sensor.c ****     Level_Sensor_ISR_Stop(); // Disables and removes the interrupt.
 524              		.loc 1 138 0
 525 0040 FFF7FEFF 		bl	Level_Sensor_ISR_Stop
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 13


 139:level_sensor.c ****     Level_Sensor_Power_Write(OFF); // Pulls Level Sensor Power pin low (turns it off).
 526              		.loc 1 139 0
 527 0044 0020     		movs	r0, #0
 528 0046 FFF7FEFF 		bl	Level_Sensor_Power_Write
 140:level_sensor.c ****     // RX_SetDriveMode(): Sets the drive mode for each of the Pins component's pins.
 141:level_sensor.c ****     // String Drive Mode means it will only be outputting a voltage (don't send any data) when pull
 142:level_sensor.c ****     // UART in PSOC starts high. Then pulls low to get data. When turn sensor off, still using powe
 143:level_sensor.c ****     // So turning it to Strong Drive has it stay low.
 144:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_STRONG);
 529              		.loc 1 144 0
 530 004a 0C20     		movs	r0, #12
 531 004c FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
 145:level_sensor.c ****     // Stops writing the value to the physical port.
 146:level_sensor.c ****     // Just because turn power of sensor off, pin could still be high and getting power. This ensur
 147:level_sensor.c ****     Level_Sensor_RX_Write(OFF);
 532              		.loc 1 147 0
 533 0050 0020     		movs	r0, #0
 534 0052 FFF7FEFF 		bl	Level_Sensor_RX_Write
 148:level_sensor.c **** 
 149:level_sensor.c ****     /* Return parsed reading */
 150:level_sensor.c ****     // Parse string and put all values into array
 151:level_sensor.c ****     // The sensor will power on and do a few things, after which the readigs will follow with the s
 152:level_sensor.c ****     // Readings are stashed between "R" and "\000"
 153:level_sensor.c ****     char *token;
 154:level_sensor.c ****     // strtok(): breaks uart_chars into smaller string when sees "R".
 155:level_sensor.c ****     token = strtok(uart_chars, "R");
 535              		.loc 1 155 0
 536 0056 2F49     		ldr	r1, .L38+4
 537 0058 2F48     		ldr	r0, .L38+8
 538 005a FFF7FEFF 		bl	strtok
 539 005e 7862     		str	r0, [r7, #36]
 156:level_sensor.c ****     /* walk through other tokens */
 157:level_sensor.c ****    while( token != NULL ) 
 540              		.loc 1 157 0
 541 0060 33E0     		b	.L30
 542              	.L35:
 158:level_sensor.c ****    {
 159:level_sensor.c ****       if(strstr(token, "\r") != NULL){ // Full reading is delimieted by "R" + reading + "\r"
 543              		.loc 1 159 0
 544 0062 0D21     		movs	r1, #13
 545 0064 786A     		ldr	r0, [r7, #36]
 546 0066 FFF7FEFF 		bl	strchr
 547 006a 0346     		mov	r3, r0
 548 006c 002B     		cmp	r3, #0
 549 006e 27D0     		beq	.L31
 550              	.LBB2:
 160:level_sensor.c ****         // int atoi(const char *str) converts the string argument str to an integer (type int).
 161:level_sensor.c ****         uint16 reading = atoi(token);
 551              		.loc 1 161 0
 552 0070 786A     		ldr	r0, [r7, #36]
 553 0072 FFF7FEFF 		bl	atoi
 554 0076 0346     		mov	r3, r0
 555 0078 7B84     		strh	r3, [r7, #34]	@ movhi
 162:level_sensor.c ****         if(reading != 0){
 556              		.loc 1 162 0
 557 007a 7B8C     		ldrh	r3, [r7, #34]
 558 007c 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 14


 559 007e 1FD0     		beq	.L31
 163:level_sensor.c ****             if(reading != READING_INVALID){ // Invald readings by maxbotix
 560              		.loc 1 163 0
 561 0080 7B8C     		ldrh	r3, [r7, #34]
 562 0082 42F20F72 		movw	r2, #9999
 563 0086 9342     		cmp	r3, r2
 564 0088 14D0     		beq	.L32
 164:level_sensor.c ****                 // Set the level readings array of the length of number of valid readings equal to 
 165:level_sensor.c ****                 level_sensor_output.all_level_readings[level_sensor_output.num_valid_readings] = re
 565              		.loc 1 165 0
 566 008a 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 567 008e B7F92220 		ldrsh	r2, [r7, #34]
 568 0092 5B00     		lsls	r3, r3, #1
 569 0094 07F12801 		add	r1, r7, #40
 570 0098 0B44     		add	r3, r3, r1
 571 009a 23F8202C 		strh	r2, [r3, #-32]	@ movhi
 166:level_sensor.c ****                 // If number of valid readings less than 11 total readings, increase the count of v
 167:level_sensor.c ****                 if(level_sensor_output.num_valid_readings < N_READINGS){
 572              		.loc 1 167 0
 573 009e 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 574 00a2 0A2B     		cmp	r3, #10
 575 00a4 15D8     		bhi	.L37
 168:level_sensor.c ****                     level_sensor_output.num_valid_readings++;
 576              		.loc 1 168 0
 577 00a6 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 578 00aa 0133     		adds	r3, r3, #1
 579 00ac DBB2     		uxtb	r3, r3
 580 00ae 87F82030 		strb	r3, [r7, #32]
 581 00b2 05E0     		b	.L31
 582              	.L32:
 169:level_sensor.c ****                 }else{
 170:level_sensor.c ****                  break;   
 171:level_sensor.c ****                 }
 172:level_sensor.c ****                 
 173:level_sensor.c ****             }else{
 174:level_sensor.c ****                 // Otherwise increase the count of invalid readings
 175:level_sensor.c ****                 level_sensor_output.num_invalid_readings++;
 583              		.loc 1 175 0
 584 00b4 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 585 00b8 0133     		adds	r3, r3, #1
 586 00ba DBB2     		uxtb	r3, r3
 587 00bc 87F82130 		strb	r3, [r7, #33]
 588              	.L31:
 589              	.LBE2:
 176:level_sensor.c ****             }
 177:level_sensor.c ****         }
 178:level_sensor.c ****       }
 179:level_sensor.c ****       token = strtok(NULL, "R"); // This "NULL" says to continue where you left off last time.
 590              		.loc 1 179 0
 591 00c0 1449     		ldr	r1, .L38+4
 592 00c2 0020     		movs	r0, #0
 593 00c4 FFF7FEFF 		bl	strtok
 594 00c8 7862     		str	r0, [r7, #36]
 595              	.L30:
 157:level_sensor.c ****    {
 596              		.loc 1 157 0
 597 00ca 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 15


 598 00cc 002B     		cmp	r3, #0
 599 00ce C8D1     		bne	.L35
 600 00d0 00E0     		b	.L34
 601              	.L37:
 602              	.LBB3:
 170:level_sensor.c ****                 }
 603              		.loc 1 170 0
 604 00d2 00BF     		nop
 605              	.L34:
 606              	.LBE3:
 180:level_sensor.c ****    }
 181:level_sensor.c ****     // Calculate median level reading
 182:level_sensor.c ****     level_sensor_output.level_reading = find_median(level_sensor_output.all_level_readings,level_se
 607              		.loc 1 182 0
 608 00d4 97F82020 		ldrb	r2, [r7, #32]	@ zero_extendqisi2
 609 00d8 07F10803 		add	r3, r7, #8
 610 00dc 1146     		mov	r1, r2
 611 00de 1846     		mov	r0, r3
 612 00e0 FFF7FEFF 		bl	find_median
 613 00e4 0346     		mov	r3, r0
 614 00e6 1BB2     		sxth	r3, r3
 615 00e8 FB83     		strh	r3, [r7, #30]	@ movhi
 183:level_sensor.c ****     
 184:level_sensor.c ****     return level_sensor_output;
 616              		.loc 1 184 0
 617 00ea 7B68     		ldr	r3, [r7, #4]
 618 00ec 1D46     		mov	r5, r3
 619 00ee 07F10804 		add	r4, r7, #8
 620 00f2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 621 00f4 2860     		str	r0, [r5]	@ unaligned
 622 00f6 6960     		str	r1, [r5, #4]	@ unaligned
 623 00f8 AA60     		str	r2, [r5, #8]	@ unaligned
 624 00fa EB60     		str	r3, [r5, #12]	@ unaligned
 625 00fc 03CC     		ldmia	r4!, {r0, r1}
 626 00fe 2861     		str	r0, [r5, #16]	@ unaligned
 627 0100 6961     		str	r1, [r5, #20]	@ unaligned
 628 0102 2388     		ldrh	r3, [r4]	@ unaligned
 629 0104 2B83     		strh	r3, [r5, #24]	@ unaligned
 185:level_sensor.c **** }
 630              		.loc 1 185 0
 631 0106 7868     		ldr	r0, [r7, #4]
 632 0108 2837     		adds	r7, r7, #40
 633              		.cfi_def_cfa_offset 16
 634 010a BD46     		mov	sp, r7
 635              		.cfi_def_cfa_register 13
 636              		@ sp needed
 637 010c B0BD     		pop	{r4, r5, r7, pc}
 638              	.L39:
 639 010e 00BF     		.align	2
 640              	.L38:
 641 0110 00000000 		.word	Level_Sensor_ISR
 642 0114 88000000 		.word	.LC11
 643 0118 00000000 		.word	uart_chars
 644              		.cfi_endproc
 645              	.LFE70:
 646              		.size	level_sensor_take_reading, .-level_sensor_take_reading
 647              		.section	.rodata
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 16


 648 008a 0000     		.align	2
 649              	.LC12:
 650 008c 54455354 		.ascii	"TEST_LEVEL_SENSOR\000"
 650      5F4C4556 
 650      454C5F53 
 650      454E534F 
 650      5200
 651 009e 0000     		.align	2
 652              	.LC13:
 653 00a0 6E57414E 		.ascii	"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.\000"
 653      5445443D 
 653      25642C6E 
 653      52454345 
 653      49564544 
 654              		.section	.text.level_sensor_test,"ax",%progbits
 655              		.align	2
 656              		.global	level_sensor_test
 657              		.thumb
 658              		.thumb_func
 659              		.type	level_sensor_test, %function
 660              	level_sensor_test:
 661              	.LFB71:
 186:level_sensor.c **** 
 187:level_sensor.c **** // Level sensor test
 188:level_sensor.c **** test_t level_sensor_test(){
 662              		.loc 1 188 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 424
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666 0000 B0B5     		push	{r4, r5, r7, lr}
 667              		.cfi_def_cfa_offset 16
 668              		.cfi_offset 4, -16
 669              		.cfi_offset 5, -12
 670              		.cfi_offset 7, -8
 671              		.cfi_offset 14, -4
 672 0002 EEB0     		sub	sp, sp, #440
 673              		.cfi_def_cfa_offset 456
 674 0004 04AF     		add	r7, sp, #16
 675              		.cfi_def_cfa 7, 440
 676 0006 3B1D     		adds	r3, r7, #4
 677 0008 1860     		str	r0, [r3]
 189:level_sensor.c ****     
 190:level_sensor.c ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 191:level_sensor.c ****     test.status = 0; // set test status to zero
 678              		.loc 1 191 0
 679 000a 07F12403 		add	r3, r7, #36
 680 000e 0022     		movs	r2, #0
 681 0010 83F88020 		strb	r2, [r3, #128]
 192:level_sensor.c ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_LEVEL_SENSOR");
 682              		.loc 1 192 0
 683 0014 07F12403 		add	r3, r7, #36
 684 0018 2A4A     		ldr	r2, .L44
 685 001a 1C46     		mov	r4, r3
 686 001c 1546     		mov	r5, r2
 687 001e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 688 0020 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 689 0022 2B68     		ldr	r3, [r5]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 17


 690 0024 2380     		strh	r3, [r4]	@ movhi
 193:level_sensor.c **** 
 194:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 195:level_sensor.c ****     level_sensor_t sensor = level_sensor_take_reading();
 691              		.loc 1 195 0
 692 0026 07F10803 		add	r3, r7, #8
 693 002a 1846     		mov	r0, r3
 694 002c FFF7FEFF 		bl	level_sensor_take_reading
 196:level_sensor.c ****     
 197:level_sensor.c ****     // print the max number of readings (11), the number of actual readings, the number of valid re
 198:level_sensor.c ****     snprintf(test.reason,sizeof(test.reason),"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.",
 199:level_sensor.c ****         N_READINGS,
 200:level_sensor.c ****         sensor.num_valid_readings+sensor.num_invalid_readings,
 695              		.loc 1 200 0
 696 0030 07F10803 		add	r3, r7, #8
 697 0034 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 198:level_sensor.c ****         N_READINGS,
 698              		.loc 1 198 0
 699 0036 1A46     		mov	r2, r3
 700              		.loc 1 200 0
 701 0038 07F10803 		add	r3, r7, #8
 702 003c 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 198:level_sensor.c ****         N_READINGS,
 703              		.loc 1 198 0
 704 003e 1344     		add	r3, r3, r2
 201:level_sensor.c ****         sensor.num_valid_readings,
 705              		.loc 1 201 0
 706 0040 07F10802 		add	r2, r7, #8
 707 0044 127E     		ldrb	r2, [r2, #24]	@ zero_extendqisi2
 198:level_sensor.c ****         N_READINGS,
 708              		.loc 1 198 0
 709 0046 1146     		mov	r1, r2
 202:level_sensor.c ****         sensor.level_reading
 710              		.loc 1 202 0
 711 0048 07F10802 		add	r2, r7, #8
 712 004c B2F91620 		ldrsh	r2, [r2, #22]
 198:level_sensor.c ****         N_READINGS,
 713              		.loc 1 198 0
 714 0050 1446     		mov	r4, r2
 715 0052 07F12402 		add	r2, r7, #36
 716 0056 02F18100 		add	r0, r2, #129
 717 005a 0294     		str	r4, [sp, #8]
 718 005c 0191     		str	r1, [sp, #4]
 719 005e 0093     		str	r3, [sp]
 720 0060 0B23     		movs	r3, #11
 721 0062 194A     		ldr	r2, .L44+4
 722 0064 4FF48071 		mov	r1, #256
 723 0068 FFF7FEFF 		bl	snprintf
 203:level_sensor.c ****     );
 204:level_sensor.c ****    
 205:level_sensor.c ****     // if the number valid readings is the max number of readings (11), then the test passes with t
 206:level_sensor.c ****     if(sensor.num_valid_readings == N_READINGS){//pass
 724              		.loc 1 206 0
 725 006c 07F10803 		add	r3, r7, #8
 726 0070 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 727 0072 0B2B     		cmp	r3, #11
 728 0074 05D1     		bne	.L41
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 18


 207:level_sensor.c ****         test.status = 1;
 729              		.loc 1 207 0
 730 0076 07F12403 		add	r3, r7, #36
 731 007a 0122     		movs	r2, #1
 732 007c 83F88020 		strb	r2, [r3, #128]
 733 0080 0EE0     		b	.L42
 734              	.L41:
 208:level_sensor.c ****     // if the number of valid readings is greater than zero and less than the max number of reading
 209:level_sensor.c ****     }else if((sensor.num_valid_readings > 0) && (sensor.num_valid_readings < N_READINGS)){//pass
 735              		.loc 1 209 0
 736 0082 07F10803 		add	r3, r7, #8
 737 0086 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 738 0088 002B     		cmp	r3, #0
 739 008a 09D0     		beq	.L42
 740              		.loc 1 209 0 is_stmt 0 discriminator 1
 741 008c 07F10803 		add	r3, r7, #8
 742 0090 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 743 0092 0A2B     		cmp	r3, #10
 744 0094 04D8     		bhi	.L42
 210:level_sensor.c ****         test.status = 2; //not bad, since we got some OK readings
 745              		.loc 1 210 0 is_stmt 1
 746 0096 07F12403 		add	r3, r7, #36
 747 009a 0222     		movs	r2, #2
 748 009c 83F88020 		strb	r2, [r3, #128]
 749              	.L42:
 211:level_sensor.c ****     }
 212:level_sensor.c ****         
 213:level_sensor.c ****     return test;
 750              		.loc 1 213 0
 751 00a0 3B1D     		adds	r3, r7, #4
 752 00a2 1A68     		ldr	r2, [r3]
 753 00a4 07F12403 		add	r3, r7, #36
 754 00a8 1046     		mov	r0, r2
 755 00aa 1946     		mov	r1, r3
 756 00ac 40F28113 		movw	r3, #385
 757 00b0 1A46     		mov	r2, r3
 758 00b2 FFF7FEFF 		bl	memcpy
 214:level_sensor.c **** }
 759              		.loc 1 214 0
 760 00b6 3B1D     		adds	r3, r7, #4
 761 00b8 1868     		ldr	r0, [r3]
 762 00ba 07F5D477 		add	r7, r7, #424
 763              		.cfi_def_cfa_offset 16
 764 00be BD46     		mov	sp, r7
 765              		.cfi_def_cfa_register 13
 766              		@ sp needed
 767 00c0 B0BD     		pop	{r4, r5, r7, pc}
 768              	.L45:
 769 00c2 00BF     		.align	2
 770              	.L44:
 771 00c4 8C000000 		.word	.LC12
 772 00c8 A0000000 		.word	.LC13
 773              		.cfi_endproc
 774              	.LFE71:
 775              		.size	level_sensor_test, .-level_sensor_test
 776              		.global	__aeabi_i2d
 777              		.global	__aeabi_ddiv
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 19


 778              		.global	__aeabi_d2iz
 779              		.section	.text.find_median,"ax",%progbits
 780              		.align	2
 781              		.global	find_median
 782              		.thumb
 783              		.thumb_func
 784              		.type	find_median, %function
 785              	find_median:
 786              	.LFB72:
 215:level_sensor.c **** 
 216:level_sensor.c **** 
 217:level_sensor.c **** // function to calculate the median of the array, after array is sorted
 218:level_sensor.c **** uint16 find_median(int16 array[] , uint8 n)
 219:level_sensor.c **** {
 787              		.loc 1 219 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 16
 790              		@ frame_needed = 1, uses_anonymous_args = 0
 791 0000 90B5     		push	{r4, r7, lr}
 792              		.cfi_def_cfa_offset 12
 793              		.cfi_offset 4, -12
 794              		.cfi_offset 7, -8
 795              		.cfi_offset 14, -4
 796 0002 85B0     		sub	sp, sp, #20
 797              		.cfi_def_cfa_offset 32
 798 0004 00AF     		add	r7, sp, #0
 799              		.cfi_def_cfa_register 7
 800 0006 7860     		str	r0, [r7, #4]
 801 0008 0B46     		mov	r3, r1
 802 000a FB70     		strb	r3, [r7, #3]
 220:level_sensor.c ****     int16 median=0;
 803              		.loc 1 220 0
 804 000c 0023     		movs	r3, #0
 805 000e FB81     		strh	r3, [r7, #14]	@ movhi
 221:level_sensor.c ****     sort(array,n);
 806              		.loc 1 221 0
 807 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 808 0012 1BB2     		sxth	r3, r3
 809 0014 1946     		mov	r1, r3
 810 0016 7868     		ldr	r0, [r7, #4]
 811 0018 FFF7FEFF 		bl	sort
 222:level_sensor.c ****     
 223:level_sensor.c ****     // if number of elements are even
 224:level_sensor.c ****     if(n%2 == 0)
 812              		.loc 1 224 0
 813 001c FB78     		ldrb	r3, [r7, #3]
 814 001e 03F00103 		and	r3, r3, #1
 815 0022 DBB2     		uxtb	r3, r3
 816 0024 002B     		cmp	r3, #0
 817 0026 25D1     		bne	.L47
 225:level_sensor.c ****         // median is the average of the  two middle sorted numbers
 226:level_sensor.c ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 818              		.loc 1 226 0
 819 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 820 002a 013B     		subs	r3, r3, #1
 821 002c DA0F     		lsrs	r2, r3, #31
 822 002e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 20


 823 0030 5B10     		asrs	r3, r3, #1
 824 0032 5B00     		lsls	r3, r3, #1
 825 0034 7A68     		ldr	r2, [r7, #4]
 826 0036 1344     		add	r3, r3, r2
 827 0038 B3F90030 		ldrsh	r3, [r3]
 828 003c 1946     		mov	r1, r3
 829 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 830 0040 5B08     		lsrs	r3, r3, #1
 831 0042 DBB2     		uxtb	r3, r3
 832 0044 5B00     		lsls	r3, r3, #1
 833 0046 7A68     		ldr	r2, [r7, #4]
 834 0048 1344     		add	r3, r3, r2
 835 004a B3F90030 		ldrsh	r3, [r3]
 836 004e 0B44     		add	r3, r3, r1
 837 0050 1846     		mov	r0, r3
 838 0052 FFF7FEFF 		bl	__aeabi_i2d
 839 0056 4FF00002 		mov	r2, #0
 840 005a 4FF08043 		mov	r3, #1073741824
 841 005e FFF7FEFF 		bl	__aeabi_ddiv
 842 0062 0346     		mov	r3, r0
 843 0064 0C46     		mov	r4, r1
 844 0066 1846     		mov	r0, r3
 845 0068 2146     		mov	r1, r4
 846 006a FFF7FEFF 		bl	__aeabi_d2iz
 847 006e 0346     		mov	r3, r0
 848 0070 FB81     		strh	r3, [r7, #14]	@ movhi
 849 0072 07E0     		b	.L48
 850              	.L47:
 227:level_sensor.c ****     // if number of elements are odd
 228:level_sensor.c ****     else
 229:level_sensor.c ****         // median is the the middle sorted number 
 230:level_sensor.c ****         median = array[n/2];
 851              		.loc 1 230 0
 852 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 853 0076 5B08     		lsrs	r3, r3, #1
 854 0078 DBB2     		uxtb	r3, r3
 855 007a 5B00     		lsls	r3, r3, #1
 856 007c 7A68     		ldr	r2, [r7, #4]
 857 007e 1344     		add	r3, r3, r2
 858 0080 1B88     		ldrh	r3, [r3]	@ movhi
 859 0082 FB81     		strh	r3, [r7, #14]	@ movhi
 860              	.L48:
 231:level_sensor.c ****     
 232:level_sensor.c ****     return median;
 861              		.loc 1 232 0
 862 0084 FB89     		ldrh	r3, [r7, #14]
 233:level_sensor.c **** }
 863              		.loc 1 233 0
 864 0086 1846     		mov	r0, r3
 865 0088 1437     		adds	r7, r7, #20
 866              		.cfi_def_cfa_offset 12
 867 008a BD46     		mov	sp, r7
 868              		.cfi_def_cfa_register 13
 869              		@ sp needed
 870 008c 90BD     		pop	{r4, r7, pc}
 871              		.cfi_endproc
 872              	.LFE72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 21


 873              		.size	find_median, .-find_median
 874              		.section	.text.sort,"ax",%progbits
 875              		.align	2
 876              		.global	sort
 877              		.thumb
 878              		.thumb_func
 879              		.type	sort, %function
 880              	sort:
 881              	.LFB73:
 234:level_sensor.c **** 
 235:level_sensor.c **** // function to sort the elements in the level readings array
 236:level_sensor.c **** void sort(int16 a[],int16 n) { 
 882              		.loc 1 236 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 16
 885              		@ frame_needed = 1, uses_anonymous_args = 0
 886 0000 80B5     		push	{r7, lr}
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 7, -8
 889              		.cfi_offset 14, -4
 890 0002 84B0     		sub	sp, sp, #16
 891              		.cfi_def_cfa_offset 24
 892 0004 00AF     		add	r7, sp, #0
 893              		.cfi_def_cfa_register 7
 894 0006 7860     		str	r0, [r7, #4]
 895 0008 0B46     		mov	r3, r1
 896 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 237:level_sensor.c ****    int16 i,j;
 238:level_sensor.c **** 
 239:level_sensor.c ****    for(i = 0;i < n-1;i++) {
 897              		.loc 1 239 0
 898 000c 0023     		movs	r3, #0
 899 000e FB81     		strh	r3, [r7, #14]	@ movhi
 900 0010 37E0     		b	.L51
 901              	.L55:
 240:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 902              		.loc 1 240 0
 903 0012 0023     		movs	r3, #0
 904 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 905 0016 24E0     		b	.L52
 906              	.L54:
 241:level_sensor.c ****          if(a[j] > a[j+1])
 907              		.loc 1 241 0
 908 0018 B7F90C30 		ldrsh	r3, [r7, #12]
 909 001c 5B00     		lsls	r3, r3, #1
 910 001e 7A68     		ldr	r2, [r7, #4]
 911 0020 1344     		add	r3, r3, r2
 912 0022 B3F90020 		ldrsh	r2, [r3]
 913 0026 B7F90C30 		ldrsh	r3, [r7, #12]
 914 002a 0133     		adds	r3, r3, #1
 915 002c 5B00     		lsls	r3, r3, #1
 916 002e 7968     		ldr	r1, [r7, #4]
 917 0030 0B44     		add	r3, r3, r1
 918 0032 B3F90030 		ldrsh	r3, [r3]
 919 0036 9A42     		cmp	r2, r3
 920 0038 0DDD     		ble	.L53
 242:level_sensor.c ****             swap(&a[j],&a[j+1]); // swap the address of a[j] and a[j+1]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 22


 921              		.loc 1 242 0
 922 003a B7F90C30 		ldrsh	r3, [r7, #12]
 923 003e 5B00     		lsls	r3, r3, #1
 924 0040 7A68     		ldr	r2, [r7, #4]
 925 0042 D018     		adds	r0, r2, r3
 926 0044 B7F90C30 		ldrsh	r3, [r7, #12]
 927 0048 0133     		adds	r3, r3, #1
 928 004a 5B00     		lsls	r3, r3, #1
 929 004c 7A68     		ldr	r2, [r7, #4]
 930 004e 1344     		add	r3, r3, r2
 931 0050 1946     		mov	r1, r3
 932 0052 FFF7FEFF 		bl	swap
 933              	.L53:
 240:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 934              		.loc 1 240 0 discriminator 2
 935 0056 B7F90C30 		ldrsh	r3, [r7, #12]
 936 005a 9BB2     		uxth	r3, r3
 937 005c 0133     		adds	r3, r3, #1
 938 005e 9BB2     		uxth	r3, r3
 939 0060 BB81     		strh	r3, [r7, #12]	@ movhi
 940              	.L52:
 240:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 941              		.loc 1 240 0 is_stmt 0 discriminator 1
 942 0062 B7F90C20 		ldrsh	r2, [r7, #12]
 943 0066 B7F90210 		ldrsh	r1, [r7, #2]
 944 006a B7F90E30 		ldrsh	r3, [r7, #14]
 945 006e CB1A     		subs	r3, r1, r3
 946 0070 013B     		subs	r3, r3, #1
 947 0072 9A42     		cmp	r2, r3
 948 0074 D0DB     		blt	.L54
 239:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 949              		.loc 1 239 0 is_stmt 1 discriminator 2
 950 0076 B7F90E30 		ldrsh	r3, [r7, #14]
 951 007a 9BB2     		uxth	r3, r3
 952 007c 0133     		adds	r3, r3, #1
 953 007e 9BB2     		uxth	r3, r3
 954 0080 FB81     		strh	r3, [r7, #14]	@ movhi
 955              	.L51:
 239:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 956              		.loc 1 239 0 is_stmt 0 discriminator 1
 957 0082 B7F90E20 		ldrsh	r2, [r7, #14]
 958 0086 B7F90230 		ldrsh	r3, [r7, #2]
 959 008a 013B     		subs	r3, r3, #1
 960 008c 9A42     		cmp	r2, r3
 961 008e C0DB     		blt	.L55
 243:level_sensor.c ****       }
 244:level_sensor.c ****    }
 245:level_sensor.c **** }
 962              		.loc 1 245 0 is_stmt 1
 963 0090 00BF     		nop
 964 0092 1037     		adds	r7, r7, #16
 965              		.cfi_def_cfa_offset 8
 966 0094 BD46     		mov	sp, r7
 967              		.cfi_def_cfa_register 13
 968              		@ sp needed
 969 0096 80BD     		pop	{r7, pc}
 970              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 23


 971              	.LFE73:
 972              		.size	sort, .-sort
 973              		.section	.text.swap,"ax",%progbits
 974              		.align	2
 975              		.global	swap
 976              		.thumb
 977              		.thumb_func
 978              		.type	swap, %function
 979              	swap:
 980              	.LFB74:
 246:level_sensor.c **** 
 247:level_sensor.c **** // function to swap elements in the level readings array in order to sort them
 248:level_sensor.c **** void swap(int16 *p,int16 *q) {
 981              		.loc 1 248 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 16
 984              		@ frame_needed = 1, uses_anonymous_args = 0
 985              		@ link register save eliminated.
 986 0000 80B4     		push	{r7}
 987              		.cfi_def_cfa_offset 4
 988              		.cfi_offset 7, -4
 989 0002 85B0     		sub	sp, sp, #20
 990              		.cfi_def_cfa_offset 24
 991 0004 00AF     		add	r7, sp, #0
 992              		.cfi_def_cfa_register 7
 993 0006 7860     		str	r0, [r7, #4]
 994 0008 3960     		str	r1, [r7]
 249:level_sensor.c ****    int16 t;
 250:level_sensor.c ****    
 251:level_sensor.c ****    t=*p; 
 995              		.loc 1 251 0
 996 000a 7B68     		ldr	r3, [r7, #4]
 997 000c 1B88     		ldrh	r3, [r3]	@ movhi
 998 000e FB81     		strh	r3, [r7, #14]	@ movhi
 252:level_sensor.c ****    *p=*q; 
 999              		.loc 1 252 0
 1000 0010 3B68     		ldr	r3, [r7]
 1001 0012 B3F90020 		ldrsh	r2, [r3]
 1002 0016 7B68     		ldr	r3, [r7, #4]
 1003 0018 1A80     		strh	r2, [r3]	@ movhi
 253:level_sensor.c ****    *q=t;
 1004              		.loc 1 253 0
 1005 001a 3B68     		ldr	r3, [r7]
 1006 001c FA89     		ldrh	r2, [r7, #14]	@ movhi
 1007 001e 1A80     		strh	r2, [r3]	@ movhi
 254:level_sensor.c **** }
 1008              		.loc 1 254 0
 1009 0020 00BF     		nop
 1010 0022 1437     		adds	r7, r7, #20
 1011              		.cfi_def_cfa_offset 4
 1012 0024 BD46     		mov	sp, r7
 1013              		.cfi_def_cfa_register 13
 1014              		@ sp needed
 1015 0026 80BC     		pop	{r7}
 1016              		.cfi_restore 7
 1017              		.cfi_def_cfa_offset 0
 1018 0028 7047     		bx	lr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 24


 1019              		.cfi_endproc
 1020              	.LFE74:
 1021              		.size	swap, .-swap
 1022 002a 00BF     		.text
 1023              	.Letext0:
 1024              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1025              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1026              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1027              		.file 5 "testing.h"
 1028              		.file 6 "level_sensor.h"
 1029              		.file 7 "data.h"
 1030              		.file 8 "modem.h"
 1031              		.file 9 "notoriOS.h"
 1032              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1033              		.file 11 "App_LED.h"
 1034              		.section	.debug_info,"",%progbits
 1035              	.Ldebug_info0:
 1036 0000 70080000 		.4byte	0x870
 1037 0004 0400     		.2byte	0x4
 1038 0006 00000000 		.4byte	.Ldebug_abbrev0
 1039 000a 04       		.byte	0x4
 1040 000b 01       		.uleb128 0x1
 1041 000c 86000000 		.4byte	.LASF117
 1042 0010 0C       		.byte	0xc
 1043 0011 61010000 		.4byte	.LASF118
 1044 0015 1C000000 		.4byte	.LASF119
 1045 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 1046 001d 00000000 		.4byte	0
 1047 0021 00000000 		.4byte	.Ldebug_line0
 1048 0025 02       		.uleb128 0x2
 1049 0026 01       		.byte	0x1
 1050 0027 06       		.byte	0x6
 1051 0028 A3010000 		.4byte	.LASF0
 1052 002c 03       		.uleb128 0x3
 1053 002d 64000000 		.4byte	.LASF4
 1054 0031 02       		.byte	0x2
 1055 0032 1D       		.byte	0x1d
 1056 0033 37000000 		.4byte	0x37
 1057 0037 02       		.uleb128 0x2
 1058 0038 01       		.byte	0x1
 1059 0039 08       		.byte	0x8
 1060 003a 89040000 		.4byte	.LASF1
 1061 003e 02       		.uleb128 0x2
 1062 003f 02       		.byte	0x2
 1063 0040 05       		.byte	0x5
 1064 0041 5C030000 		.4byte	.LASF2
 1065 0045 02       		.uleb128 0x2
 1066 0046 02       		.byte	0x2
 1067 0047 07       		.byte	0x7
 1068 0048 92050000 		.4byte	.LASF3
 1069 004c 03       		.uleb128 0x3
 1070 004d 5E050000 		.4byte	.LASF5
 1071 0051 02       		.byte	0x2
 1072 0052 3F       		.byte	0x3f
 1073 0053 57000000 		.4byte	0x57
 1074 0057 02       		.uleb128 0x2
 1075 0058 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 25


 1076 0059 05       		.byte	0x5
 1077 005a 1E020000 		.4byte	.LASF6
 1078 005e 02       		.uleb128 0x2
 1079 005f 04       		.byte	0x4
 1080 0060 07       		.byte	0x7
 1081 0061 04030000 		.4byte	.LASF7
 1082 0065 02       		.uleb128 0x2
 1083 0066 08       		.byte	0x8
 1084 0067 05       		.byte	0x5
 1085 0068 95010000 		.4byte	.LASF8
 1086 006c 02       		.uleb128 0x2
 1087 006d 08       		.byte	0x8
 1088 006e 07       		.byte	0x7
 1089 006f 1F010000 		.4byte	.LASF9
 1090 0073 04       		.uleb128 0x4
 1091 0074 04       		.byte	0x4
 1092 0075 05       		.byte	0x5
 1093 0076 696E7400 		.ascii	"int\000"
 1094 007a 02       		.uleb128 0x2
 1095 007b 04       		.byte	0x4
 1096 007c 07       		.byte	0x7
 1097 007d D8020000 		.4byte	.LASF10
 1098 0081 03       		.uleb128 0x3
 1099 0082 22060000 		.4byte	.LASF11
 1100 0086 03       		.byte	0x3
 1101 0087 18       		.byte	0x18
 1102 0088 2C000000 		.4byte	0x2c
 1103 008c 03       		.uleb128 0x3
 1104 008d 81040000 		.4byte	.LASF12
 1105 0091 03       		.byte	0x3
 1106 0092 2C       		.byte	0x2c
 1107 0093 4C000000 		.4byte	0x4c
 1108 0097 02       		.uleb128 0x2
 1109 0098 08       		.byte	0x8
 1110 0099 04       		.byte	0x4
 1111 009a 36050000 		.4byte	.LASF13
 1112 009e 02       		.uleb128 0x2
 1113 009f 04       		.byte	0x4
 1114 00a0 07       		.byte	0x7
 1115 00a1 D8030000 		.4byte	.LASF14
 1116 00a5 05       		.uleb128 0x5
 1117 00a6 04       		.byte	0x4
 1118 00a7 AB000000 		.4byte	0xab
 1119 00ab 02       		.uleb128 0x2
 1120 00ac 01       		.byte	0x1
 1121 00ad 08       		.byte	0x8
 1122 00ae 4E050000 		.4byte	.LASF15
 1123 00b2 05       		.uleb128 0x5
 1124 00b3 04       		.byte	0x4
 1125 00b4 B8000000 		.4byte	0xb8
 1126 00b8 06       		.uleb128 0x6
 1127 00b9 AB000000 		.4byte	0xab
 1128 00bd 07       		.uleb128 0x7
 1129 00be AB000000 		.4byte	0xab
 1130 00c2 CD000000 		.4byte	0xcd
 1131 00c6 08       		.uleb128 0x8
 1132 00c7 9E000000 		.4byte	0x9e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 26


 1133 00cb 17       		.byte	0x17
 1134 00cc 00       		.byte	0
 1135 00cd 02       		.uleb128 0x2
 1136 00ce 08       		.byte	0x8
 1137 00cf 04       		.byte	0x4
 1138 00d0 5C060000 		.4byte	.LASF16
 1139 00d4 02       		.uleb128 0x2
 1140 00d5 04       		.byte	0x4
 1141 00d6 04       		.byte	0x4
 1142 00d7 4E040000 		.4byte	.LASF17
 1143 00db 09       		.uleb128 0x9
 1144 00dc 43020000 		.4byte	.LASF18
 1145 00e0 04       		.byte	0x4
 1146 00e1 9201     		.2byte	0x192
 1147 00e3 37000000 		.4byte	0x37
 1148 00e7 09       		.uleb128 0x9
 1149 00e8 00000000 		.4byte	.LASF19
 1150 00ec 04       		.byte	0x4
 1151 00ed 9301     		.2byte	0x193
 1152 00ef 45000000 		.4byte	0x45
 1153 00f3 09       		.uleb128 0x9
 1154 00f4 2A060000 		.4byte	.LASF20
 1155 00f8 04       		.byte	0x4
 1156 00f9 9601     		.2byte	0x196
 1157 00fb 3E000000 		.4byte	0x3e
 1158 00ff 09       		.uleb128 0x9
 1159 0100 6A020000 		.4byte	.LASF21
 1160 0104 04       		.byte	0x4
 1161 0105 9701     		.2byte	0x197
 1162 0107 57000000 		.4byte	0x57
 1163 010b 0A       		.uleb128 0xa
 1164 010c 8101     		.2byte	0x181
 1165 010e 05       		.byte	0x5
 1166 010f 0A       		.byte	0xa
 1167 0110 39010000 		.4byte	0x139
 1168 0114 0B       		.uleb128 0xb
 1169 0115 E1030000 		.4byte	.LASF22
 1170 0119 05       		.byte	0x5
 1171 011a 0C       		.byte	0xc
 1172 011b 39010000 		.4byte	0x139
 1173 011f 00       		.byte	0
 1174 0120 0B       		.uleb128 0xb
 1175 0121 CC050000 		.4byte	.LASF23
 1176 0125 05       		.byte	0x5
 1177 0126 0D       		.byte	0xd
 1178 0127 DB000000 		.4byte	0xdb
 1179 012b 80       		.byte	0x80
 1180 012c 0B       		.uleb128 0xb
 1181 012d E3040000 		.4byte	.LASF24
 1182 0131 05       		.byte	0x5
 1183 0132 0F       		.byte	0xf
 1184 0133 49010000 		.4byte	0x149
 1185 0137 81       		.byte	0x81
 1186 0138 00       		.byte	0
 1187 0139 07       		.uleb128 0x7
 1188 013a AB000000 		.4byte	0xab
 1189 013e 49010000 		.4byte	0x149
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 27


 1190 0142 08       		.uleb128 0x8
 1191 0143 9E000000 		.4byte	0x9e
 1192 0147 7F       		.byte	0x7f
 1193 0148 00       		.byte	0
 1194 0149 07       		.uleb128 0x7
 1195 014a AB000000 		.4byte	0xab
 1196 014e 59010000 		.4byte	0x159
 1197 0152 08       		.uleb128 0x8
 1198 0153 9E000000 		.4byte	0x9e
 1199 0157 FF       		.byte	0xff
 1200 0158 00       		.byte	0
 1201 0159 03       		.uleb128 0x3
 1202 015a A7040000 		.4byte	.LASF25
 1203 015e 05       		.byte	0x5
 1204 015f 10       		.byte	0x10
 1205 0160 0B010000 		.4byte	0x10b
 1206 0164 0C       		.uleb128 0xc
 1207 0165 1A       		.byte	0x1a
 1208 0166 06       		.byte	0x6
 1209 0167 10       		.byte	0x10
 1210 0168 9D010000 		.4byte	0x19d
 1211 016c 0B       		.uleb128 0xb
 1212 016d 9F020000 		.4byte	.LASF26
 1213 0171 06       		.byte	0x6
 1214 0172 11       		.byte	0x11
 1215 0173 9D010000 		.4byte	0x19d
 1216 0177 00       		.byte	0
 1217 0178 0B       		.uleb128 0xb
 1218 0179 84050000 		.4byte	.LASF27
 1219 017d 06       		.byte	0x6
 1220 017e 12       		.byte	0x12
 1221 017f F3000000 		.4byte	0xf3
 1222 0183 16       		.byte	0x16
 1223 0184 0B       		.uleb128 0xb
 1224 0185 F1020000 		.4byte	.LASF28
 1225 0189 06       		.byte	0x6
 1226 018a 13       		.byte	0x13
 1227 018b DB000000 		.4byte	0xdb
 1228 018f 18       		.byte	0x18
 1229 0190 0B       		.uleb128 0xb
 1230 0191 07000000 		.4byte	.LASF29
 1231 0195 06       		.byte	0x6
 1232 0196 14       		.byte	0x14
 1233 0197 DB000000 		.4byte	0xdb
 1234 019b 19       		.byte	0x19
 1235 019c 00       		.byte	0
 1236 019d 07       		.uleb128 0x7
 1237 019e F3000000 		.4byte	0xf3
 1238 01a2 AD010000 		.4byte	0x1ad
 1239 01a6 08       		.uleb128 0x8
 1240 01a7 9E000000 		.4byte	0x9e
 1241 01ab 0A       		.byte	0xa
 1242 01ac 00       		.byte	0
 1243 01ad 03       		.uleb128 0x3
 1244 01ae 66040000 		.4byte	.LASF30
 1245 01b2 06       		.byte	0x6
 1246 01b3 15       		.byte	0x15
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 28


 1247 01b4 64010000 		.4byte	0x164
 1248 01b8 0C       		.uleb128 0xc
 1249 01b9 2C       		.byte	0x2c
 1250 01ba 07       		.byte	0x7
 1251 01bb 14       		.byte	0x14
 1252 01bc E5010000 		.4byte	0x1e5
 1253 01c0 0D       		.uleb128 0xd
 1254 01c1 6B657900 		.ascii	"key\000"
 1255 01c5 07       		.byte	0x7
 1256 01c6 15       		.byte	0x15
 1257 01c7 E5010000 		.4byte	0x1e5
 1258 01cb 00       		.byte	0
 1259 01cc 0B       		.uleb128 0xb
 1260 01cd C8020000 		.4byte	.LASF31
 1261 01d1 07       		.byte	0x7
 1262 01d2 16       		.byte	0x16
 1263 01d3 E5010000 		.4byte	0x1e5
 1264 01d7 14       		.byte	0x14
 1265 01d8 0B       		.uleb128 0xb
 1266 01d9 02040000 		.4byte	.LASF32
 1267 01dd 07       		.byte	0x7
 1268 01de 17       		.byte	0x17
 1269 01df FF000000 		.4byte	0xff
 1270 01e3 28       		.byte	0x28
 1271 01e4 00       		.byte	0
 1272 01e5 07       		.uleb128 0x7
 1273 01e6 AB000000 		.4byte	0xab
 1274 01ea F5010000 		.4byte	0x1f5
 1275 01ee 08       		.uleb128 0x8
 1276 01ef 9E000000 		.4byte	0x9e
 1277 01f3 13       		.byte	0x13
 1278 01f4 00       		.byte	0
 1279 01f5 03       		.uleb128 0x3
 1280 01f6 E5020000 		.4byte	.LASF33
 1281 01fa 07       		.byte	0x7
 1282 01fb 19       		.byte	0x19
 1283 01fc B8010000 		.4byte	0x1b8
 1284 0200 0C       		.uleb128 0xc
 1285 0201 3C       		.byte	0x3c
 1286 0202 08       		.byte	0x8
 1287 0203 36       		.byte	0x36
 1288 0204 2D020000 		.4byte	0x22d
 1289 0208 0B       		.uleb128 0xb
 1290 0209 A5050000 		.4byte	.LASF34
 1291 020d 08       		.byte	0x8
 1292 020e 37       		.byte	0x37
 1293 020f E5010000 		.4byte	0x1e5
 1294 0213 00       		.byte	0
 1295 0214 0B       		.uleb128 0xb
 1296 0215 96020000 		.4byte	.LASF35
 1297 0219 08       		.byte	0x8
 1298 021a 38       		.byte	0x38
 1299 021b E5010000 		.4byte	0x1e5
 1300 021f 14       		.byte	0x14
 1301 0220 0B       		.uleb128 0xb
 1302 0221 DE040000 		.4byte	.LASF36
 1303 0225 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 29


 1304 0226 39       		.byte	0x39
 1305 0227 E5010000 		.4byte	0x1e5
 1306 022b 28       		.byte	0x28
 1307 022c 00       		.byte	0
 1308 022d 03       		.uleb128 0x3
 1309 022e 0B020000 		.4byte	.LASF37
 1310 0232 08       		.byte	0x8
 1311 0233 3B       		.byte	0x3b
 1312 0234 00020000 		.4byte	0x200
 1313 0238 0C       		.uleb128 0xc
 1314 0239 20       		.byte	0x20
 1315 023a 08       		.byte	0x8
 1316 023b 3D       		.byte	0x3d
 1317 023c A1020000 		.4byte	0x2a1
 1318 0240 0B       		.uleb128 0xb
 1319 0241 18020000 		.4byte	.LASF38
 1320 0245 08       		.byte	0x8
 1321 0246 3E       		.byte	0x3e
 1322 0247 73000000 		.4byte	0x73
 1323 024b 00       		.byte	0
 1324 024c 0D       		.uleb128 0xd
 1325 024d 62657200 		.ascii	"ber\000"
 1326 0251 08       		.byte	0x8
 1327 0252 3F       		.byte	0x3f
 1328 0253 73000000 		.4byte	0x73
 1329 0257 04       		.byte	0x4
 1330 0258 0B       		.uleb128 0xb
 1331 0259 CD040000 		.4byte	.LASF39
 1332 025d 08       		.byte	0x8
 1333 025e 40       		.byte	0x40
 1334 025f 73000000 		.4byte	0x73
 1335 0263 08       		.byte	0x8
 1336 0264 0B       		.uleb128 0xb
 1337 0265 AF010000 		.4byte	.LASF40
 1338 0269 08       		.byte	0x8
 1339 026a 41       		.byte	0x41
 1340 026b 73000000 		.4byte	0x73
 1341 026f 0C       		.byte	0xc
 1342 0270 0B       		.uleb128 0xb
 1343 0271 B3040000 		.4byte	.LASF41
 1344 0275 08       		.byte	0x8
 1345 0276 42       		.byte	0x42
 1346 0277 73000000 		.4byte	0x73
 1347 027b 10       		.byte	0x10
 1348 027c 0B       		.uleb128 0xb
 1349 027d AE040000 		.4byte	.LASF42
 1350 0281 08       		.byte	0x8
 1351 0282 43       		.byte	0x43
 1352 0283 73000000 		.4byte	0x73
 1353 0287 14       		.byte	0x14
 1354 0288 0B       		.uleb128 0xb
 1355 0289 D1010000 		.4byte	.LASF43
 1356 028d 08       		.byte	0x8
 1357 028e 44       		.byte	0x44
 1358 028f 73000000 		.4byte	0x73
 1359 0293 18       		.byte	0x18
 1360 0294 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 30


 1361 0295 49030000 		.4byte	.LASF44
 1362 0299 08       		.byte	0x8
 1363 029a 45       		.byte	0x45
 1364 029b 73000000 		.4byte	0x73
 1365 029f 1C       		.byte	0x1c
 1366 02a0 00       		.byte	0
 1367 02a1 03       		.uleb128 0x3
 1368 02a2 F2040000 		.4byte	.LASF45
 1369 02a6 08       		.byte	0x8
 1370 02a7 47       		.byte	0x47
 1371 02a8 38020000 		.4byte	0x238
 1372 02ac 0C       		.uleb128 0xc
 1373 02ad 07       		.byte	0x7
 1374 02ae 08       		.byte	0x8
 1375 02af 53       		.byte	0x53
 1376 02b0 09030000 		.4byte	0x309
 1377 02b4 0B       		.uleb128 0xb
 1378 02b5 70020000 		.4byte	.LASF46
 1379 02b9 08       		.byte	0x8
 1380 02ba 55       		.byte	0x55
 1381 02bb DB000000 		.4byte	0xdb
 1382 02bf 00       		.byte	0
 1383 02c0 0B       		.uleb128 0xb
 1384 02c1 3E060000 		.4byte	.LASF47
 1385 02c5 08       		.byte	0x8
 1386 02c6 57       		.byte	0x57
 1387 02c7 09030000 		.4byte	0x309
 1388 02cb 01       		.byte	0x1
 1389 02cc 0B       		.uleb128 0xb
 1390 02cd 68050000 		.4byte	.LASF48
 1391 02d1 08       		.byte	0x8
 1392 02d2 59       		.byte	0x59
 1393 02d3 DB000000 		.4byte	0xdb
 1394 02d7 02       		.byte	0x2
 1395 02d8 0B       		.uleb128 0xb
 1396 02d9 B8040000 		.4byte	.LASF49
 1397 02dd 08       		.byte	0x8
 1398 02de 5B       		.byte	0x5b
 1399 02df DB000000 		.4byte	0xdb
 1400 02e3 03       		.byte	0x3
 1401 02e4 0B       		.uleb128 0xb
 1402 02e5 BC020000 		.4byte	.LASF50
 1403 02e9 08       		.byte	0x8
 1404 02ea 5E       		.byte	0x5e
 1405 02eb DB000000 		.4byte	0xdb
 1406 02ef 04       		.byte	0x4
 1407 02f0 0B       		.uleb128 0xb
 1408 02f1 EC050000 		.4byte	.LASF51
 1409 02f5 08       		.byte	0x8
 1410 02f6 63       		.byte	0x63
 1411 02f7 DB000000 		.4byte	0xdb
 1412 02fb 05       		.byte	0x5
 1413 02fc 0B       		.uleb128 0xb
 1414 02fd 11050000 		.4byte	.LASF52
 1415 0301 08       		.byte	0x8
 1416 0302 65       		.byte	0x65
 1417 0303 DB000000 		.4byte	0xdb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 31


 1418 0307 06       		.byte	0x6
 1419 0308 00       		.byte	0
 1420 0309 02       		.uleb128 0x2
 1421 030a 01       		.byte	0x1
 1422 030b 02       		.byte	0x2
 1423 030c 7B040000 		.4byte	.LASF53
 1424 0310 03       		.uleb128 0x3
 1425 0311 94030000 		.4byte	.LASF54
 1426 0315 08       		.byte	0x8
 1427 0316 67       		.byte	0x67
 1428 0317 AC020000 		.4byte	0x2ac
 1429 031b 0C       		.uleb128 0xc
 1430 031c 06       		.byte	0x6
 1431 031d 09       		.byte	0x9
 1432 031e 2E       		.byte	0x2e
 1433 031f 54030000 		.4byte	0x354
 1434 0323 0B       		.uleb128 0xb
 1435 0324 B4010000 		.4byte	.LASF55
 1436 0328 09       		.byte	0x9
 1437 0329 30       		.byte	0x30
 1438 032a E7000000 		.4byte	0xe7
 1439 032e 00       		.byte	0
 1440 032f 0B       		.uleb128 0xb
 1441 0330 27020000 		.4byte	.LASF56
 1442 0334 09       		.byte	0x9
 1443 0335 31       		.byte	0x31
 1444 0336 F3000000 		.4byte	0xf3
 1445 033a 02       		.byte	0x2
 1446 033b 0B       		.uleb128 0xb
 1447 033c 30060000 		.4byte	.LASF57
 1448 0340 09       		.byte	0x9
 1449 0341 32       		.byte	0x32
 1450 0342 DB000000 		.4byte	0xdb
 1451 0346 04       		.byte	0x4
 1452 0347 0B       		.uleb128 0xb
 1453 0348 6E000000 		.4byte	.LASF58
 1454 034c 09       		.byte	0x9
 1455 034d 33       		.byte	0x33
 1456 034e DB000000 		.4byte	0xdb
 1457 0352 05       		.byte	0x5
 1458 0353 00       		.byte	0
 1459 0354 03       		.uleb128 0x3
 1460 0355 3D020000 		.4byte	.LASF59
 1461 0359 09       		.byte	0x9
 1462 035a 36       		.byte	0x36
 1463 035b 5F030000 		.4byte	0x35f
 1464 035f 0E       		.uleb128 0xe
 1465 0360 1B030000 		.4byte	0x31b
 1466 0364 0C       		.uleb128 0xc
 1467 0365 1C       		.byte	0x1c
 1468 0366 09       		.byte	0x9
 1469 0367 39       		.byte	0x39
 1470 0368 85030000 		.4byte	0x385
 1471 036c 0B       		.uleb128 0xb
 1472 036d 2F030000 		.4byte	.LASF60
 1473 0371 09       		.byte	0x9
 1474 0372 3B       		.byte	0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 32


 1475 0373 85030000 		.4byte	0x385
 1476 0377 00       		.byte	0
 1477 0378 0B       		.uleb128 0xb
 1478 0379 88020000 		.4byte	.LASF61
 1479 037d 09       		.byte	0x9
 1480 037e 3C       		.byte	0x3c
 1481 037f BD000000 		.4byte	0xbd
 1482 0383 04       		.byte	0x4
 1483 0384 00       		.byte	0
 1484 0385 05       		.uleb128 0x5
 1485 0386 04       		.byte	0x4
 1486 0387 2D020000 		.4byte	0x22d
 1487 038b 03       		.uleb128 0x3
 1488 038c 89030000 		.4byte	.LASF62
 1489 0390 09       		.byte	0x9
 1490 0391 3E       		.byte	0x3e
 1491 0392 64030000 		.4byte	0x364
 1492 0396 0C       		.uleb128 0xc
 1493 0397 68       		.byte	0x68
 1494 0398 09       		.byte	0x9
 1495 0399 44       		.byte	0x44
 1496 039a B7030000 		.4byte	0x3b7
 1497 039e 0B       		.uleb128 0xb
 1498 039f 3A030000 		.4byte	.LASF63
 1499 03a3 09       		.byte	0x9
 1500 03a4 49       		.byte	0x49
 1501 03a5 B7030000 		.4byte	0x3b7
 1502 03a9 00       		.byte	0
 1503 03aa 0B       		.uleb128 0xb
 1504 03ab 27030000 		.4byte	.LASF64
 1505 03af 09       		.byte	0x9
 1506 03b0 4A       		.byte	0x4a
 1507 03b1 73000000 		.4byte	0x73
 1508 03b5 64       		.byte	0x64
 1509 03b6 00       		.byte	0
 1510 03b7 07       		.uleb128 0x7
 1511 03b8 AB000000 		.4byte	0xab
 1512 03bc C7030000 		.4byte	0x3c7
 1513 03c0 08       		.uleb128 0x8
 1514 03c1 9E000000 		.4byte	0x9e
 1515 03c5 63       		.byte	0x63
 1516 03c6 00       		.byte	0
 1517 03c7 03       		.uleb128 0x3
 1518 03c8 13060000 		.4byte	.LASF65
 1519 03cc 09       		.byte	0x9
 1520 03cd 50       		.byte	0x50
 1521 03ce 96030000 		.4byte	0x396
 1522 03d2 0F       		.uleb128 0xf
 1523 03d3 16030000 		.4byte	.LASF66
 1524 03d7 01       		.byte	0x1
 1525 03d8 17       		.byte	0x17
 1526 03d9 B2000000 		.4byte	0xb2
 1527 03dd 00000000 		.4byte	.LFB64
 1528 03e1 14000000 		.4byte	.LFE64-.LFB64
 1529 03e5 01       		.uleb128 0x1
 1530 03e6 9C       		.byte	0x9c
 1531 03e7 0F       		.uleb128 0xf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 33


 1532 03e8 27040000 		.4byte	.LASF67
 1533 03ec 01       		.byte	0x1
 1534 03ed 1E       		.byte	0x1e
 1535 03ee 81000000 		.4byte	0x81
 1536 03f2 00000000 		.4byte	.LFB65
 1537 03f6 14000000 		.4byte	.LFE65-.LFB65
 1538 03fa 01       		.uleb128 0x1
 1539 03fb 9C       		.byte	0x9c
 1540 03fc 10       		.uleb128 0x10
 1541 03fd C2040000 		.4byte	.LASF120
 1542 0401 01       		.byte	0x1
 1543 0402 23       		.byte	0x23
 1544 0403 00000000 		.4byte	.LFB66
 1545 0407 28000000 		.4byte	.LFE66-.LFB66
 1546 040b 01       		.uleb128 0x1
 1547 040c 9C       		.byte	0x9c
 1548 040d 11       		.uleb128 0x11
 1549 040e C7030000 		.4byte	.LASF68
 1550 0412 01       		.byte	0x1
 1551 0413 2E       		.byte	0x2e
 1552 0414 00000000 		.4byte	.LFB67
 1553 0418 70000000 		.4byte	.LFE67-.LFB67
 1554 041c 01       		.uleb128 0x1
 1555 041d 9C       		.byte	0x9c
 1556 041e 31040000 		.4byte	0x431
 1557 0422 12       		.uleb128 0x12
 1558 0423 EA040000 		.4byte	.LASF71
 1559 0427 01       		.byte	0x1
 1560 0428 32       		.byte	0x32
 1561 0429 AB000000 		.4byte	0xab
 1562 042d 02       		.uleb128 0x2
 1563 042e 91       		.byte	0x91
 1564 042f 77       		.sleb128 -9
 1565 0430 00       		.byte	0
 1566 0431 11       		.uleb128 0x11
 1567 0432 AC050000 		.4byte	.LASF69
 1568 0436 01       		.byte	0x1
 1569 0437 3E       		.byte	0x3e
 1570 0438 00000000 		.4byte	.LFB68
 1571 043c 1C000000 		.4byte	.LFE68-.LFB68
 1572 0440 01       		.uleb128 0x1
 1573 0441 9C       		.byte	0x9c
 1574 0442 55040000 		.4byte	0x455
 1575 0446 13       		.uleb128 0x13
 1576 0447 47060000 		.4byte	.LASF82
 1577 044b 01       		.byte	0x1
 1578 044c 3E       		.byte	0x3e
 1579 044d A5000000 		.4byte	0xa5
 1580 0451 02       		.uleb128 0x2
 1581 0452 91       		.byte	0x91
 1582 0453 74       		.sleb128 -12
 1583 0454 00       		.byte	0
 1584 0455 14       		.uleb128 0x14
 1585 0456 F4010000 		.4byte	.LASF70
 1586 045a 01       		.byte	0x1
 1587 045b 42       		.byte	0x42
 1588 045c DB000000 		.4byte	0xdb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 34


 1589 0460 00000000 		.4byte	.LFB69
 1590 0464 E8000000 		.4byte	.LFE69-.LFB69
 1591 0468 01       		.uleb128 0x1
 1592 0469 9C       		.byte	0x9c
 1593 046a B7040000 		.4byte	0x4b7
 1594 046e 12       		.uleb128 0x12
 1595 046f 3D040000 		.4byte	.LASF72
 1596 0473 01       		.byte	0x1
 1597 0474 43       		.byte	0x43
 1598 0475 A5000000 		.4byte	0xa5
 1599 0479 02       		.uleb128 0x2
 1600 047a 91       		.byte	0x91
 1601 047b 74       		.sleb128 -12
 1602 047c 12       		.uleb128 0x12
 1603 047d 02040000 		.4byte	.LASF32
 1604 0481 01       		.byte	0x1
 1605 0482 51       		.byte	0x51
 1606 0483 57000000 		.4byte	0x57
 1607 0487 02       		.uleb128 0x2
 1608 0488 91       		.byte	0x91
 1609 0489 70       		.sleb128 -16
 1610 048a 12       		.uleb128 0x12
 1611 048b 42050000 		.4byte	.LASF73
 1612 048f 01       		.byte	0x1
 1613 0490 52       		.byte	0x52
 1614 0491 B7040000 		.4byte	0x4b7
 1615 0495 02       		.uleb128 0x2
 1616 0496 91       		.byte	0x91
 1617 0497 50       		.sleb128 -48
 1618 0498 12       		.uleb128 0x12
 1619 0499 C8020000 		.4byte	.LASF31
 1620 049d 01       		.byte	0x1
 1621 049e 56       		.byte	0x56
 1622 049f E5010000 		.4byte	0x1e5
 1623 04a3 03       		.uleb128 0x3
 1624 04a4 91       		.byte	0x91
 1625 04a5 BC7F     		.sleb128 -68
 1626 04a7 12       		.uleb128 0x12
 1627 04a8 75050000 		.4byte	.LASF74
 1628 04ac 01       		.byte	0x1
 1629 04ad 59       		.byte	0x59
 1630 04ae AD010000 		.4byte	0x1ad
 1631 04b2 03       		.uleb128 0x3
 1632 04b3 91       		.byte	0x91
 1633 04b4 A07F     		.sleb128 -96
 1634 04b6 00       		.byte	0
 1635 04b7 07       		.uleb128 0x7
 1636 04b8 AB000000 		.4byte	0xab
 1637 04bc C7040000 		.4byte	0x4c7
 1638 04c0 08       		.uleb128 0x8
 1639 04c1 9E000000 		.4byte	0x9e
 1640 04c5 1F       		.byte	0x1f
 1641 04c6 00       		.byte	0
 1642 04c7 14       		.uleb128 0x14
 1643 04c8 F9050000 		.4byte	.LASF75
 1644 04cc 01       		.byte	0x1
 1645 04cd 74       		.byte	0x74
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 35


 1646 04ce AD010000 		.4byte	0x1ad
 1647 04d2 00000000 		.4byte	.LFB70
 1648 04d6 1C010000 		.4byte	.LFE70-.LFB70
 1649 04da 01       		.uleb128 0x1
 1650 04db 9C       		.byte	0x9c
 1651 04dc 11050000 		.4byte	0x511
 1652 04e0 12       		.uleb128 0x12
 1653 04e1 49020000 		.4byte	.LASF76
 1654 04e5 01       		.byte	0x1
 1655 04e6 77       		.byte	0x77
 1656 04e7 AD010000 		.4byte	0x1ad
 1657 04eb 02       		.uleb128 0x2
 1658 04ec 91       		.byte	0x91
 1659 04ed 50       		.sleb128 -48
 1660 04ee 12       		.uleb128 0x12
 1661 04ef 75040000 		.4byte	.LASF77
 1662 04f3 01       		.byte	0x1
 1663 04f4 99       		.byte	0x99
 1664 04f5 A5000000 		.4byte	0xa5
 1665 04f9 02       		.uleb128 0x2
 1666 04fa 91       		.byte	0x91
 1667 04fb 6C       		.sleb128 -20
 1668 04fc 15       		.uleb128 0x15
 1669 04fd 00000000 		.4byte	.Ldebug_ranges0+0
 1670 0501 12       		.uleb128 0x12
 1671 0502 7A020000 		.4byte	.LASF78
 1672 0506 01       		.byte	0x1
 1673 0507 A1       		.byte	0xa1
 1674 0508 E7000000 		.4byte	0xe7
 1675 050c 02       		.uleb128 0x2
 1676 050d 91       		.byte	0x91
 1677 050e 6A       		.sleb128 -22
 1678 050f 00       		.byte	0
 1679 0510 00       		.byte	0
 1680 0511 14       		.uleb128 0x14
 1681 0512 54040000 		.4byte	.LASF79
 1682 0516 01       		.byte	0x1
 1683 0517 BC       		.byte	0xbc
 1684 0518 59010000 		.4byte	0x159
 1685 051c 00000000 		.4byte	.LFB71
 1686 0520 CC000000 		.4byte	.LFE71-.LFB71
 1687 0524 01       		.uleb128 0x1
 1688 0525 9C       		.byte	0x9c
 1689 0526 49050000 		.4byte	0x549
 1690 052a 12       		.uleb128 0x12
 1691 052b 42010000 		.4byte	.LASF80
 1692 052f 01       		.byte	0x1
 1693 0530 BE       		.byte	0xbe
 1694 0531 59010000 		.4byte	0x159
 1695 0535 03       		.uleb128 0x3
 1696 0536 91       		.byte	0x91
 1697 0537 EC7C     		.sleb128 -404
 1698 0539 12       		.uleb128 0x12
 1699 053a 42030000 		.4byte	.LASF81
 1700 053e 01       		.byte	0x1
 1701 053f C3       		.byte	0xc3
 1702 0540 AD010000 		.4byte	0x1ad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 36


 1703 0544 03       		.uleb128 0x3
 1704 0545 91       		.byte	0x91
 1705 0546 D07C     		.sleb128 -432
 1706 0548 00       		.byte	0
 1707 0549 16       		.uleb128 0x16
 1708 054a C0050000 		.4byte	.LASF121
 1709 054e 01       		.byte	0x1
 1710 054f DA       		.byte	0xda
 1711 0550 E7000000 		.4byte	0xe7
 1712 0554 00000000 		.4byte	.LFB72
 1713 0558 8E000000 		.4byte	.LFE72-.LFB72
 1714 055c 01       		.uleb128 0x1
 1715 055d 9C       		.byte	0x9c
 1716 055e 8B050000 		.4byte	0x58b
 1717 0562 13       		.uleb128 0x13
 1718 0563 82020000 		.4byte	.LASF83
 1719 0567 01       		.byte	0x1
 1720 0568 DA       		.byte	0xda
 1721 0569 8B050000 		.4byte	0x58b
 1722 056d 02       		.uleb128 0x2
 1723 056e 91       		.byte	0x91
 1724 056f 64       		.sleb128 -28
 1725 0570 17       		.uleb128 0x17
 1726 0571 6E00     		.ascii	"n\000"
 1727 0573 01       		.byte	0x1
 1728 0574 DA       		.byte	0xda
 1729 0575 DB000000 		.4byte	0xdb
 1730 0579 02       		.uleb128 0x2
 1731 057a 91       		.byte	0x91
 1732 057b 63       		.sleb128 -29
 1733 057c 12       		.uleb128 0x12
 1734 057d 70010000 		.4byte	.LASF84
 1735 0581 01       		.byte	0x1
 1736 0582 DC       		.byte	0xdc
 1737 0583 F3000000 		.4byte	0xf3
 1738 0587 02       		.uleb128 0x2
 1739 0588 91       		.byte	0x91
 1740 0589 6E       		.sleb128 -18
 1741 058a 00       		.byte	0
 1742 058b 05       		.uleb128 0x5
 1743 058c 04       		.byte	0x4
 1744 058d F3000000 		.4byte	0xf3
 1745 0591 11       		.uleb128 0x11
 1746 0592 B7020000 		.4byte	.LASF85
 1747 0596 01       		.byte	0x1
 1748 0597 EC       		.byte	0xec
 1749 0598 00000000 		.4byte	.LFB73
 1750 059c 98000000 		.4byte	.LFE73-.LFB73
 1751 05a0 01       		.uleb128 0x1
 1752 05a1 9C       		.byte	0x9c
 1753 05a2 D7050000 		.4byte	0x5d7
 1754 05a6 17       		.uleb128 0x17
 1755 05a7 6100     		.ascii	"a\000"
 1756 05a9 01       		.byte	0x1
 1757 05aa EC       		.byte	0xec
 1758 05ab 8B050000 		.4byte	0x58b
 1759 05af 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 37


 1760 05b0 91       		.byte	0x91
 1761 05b1 6C       		.sleb128 -20
 1762 05b2 17       		.uleb128 0x17
 1763 05b3 6E00     		.ascii	"n\000"
 1764 05b5 01       		.byte	0x1
 1765 05b6 EC       		.byte	0xec
 1766 05b7 F3000000 		.4byte	0xf3
 1767 05bb 02       		.uleb128 0x2
 1768 05bc 91       		.byte	0x91
 1769 05bd 6A       		.sleb128 -22
 1770 05be 18       		.uleb128 0x18
 1771 05bf 6900     		.ascii	"i\000"
 1772 05c1 01       		.byte	0x1
 1773 05c2 ED       		.byte	0xed
 1774 05c3 F3000000 		.4byte	0xf3
 1775 05c7 02       		.uleb128 0x2
 1776 05c8 91       		.byte	0x91
 1777 05c9 76       		.sleb128 -10
 1778 05ca 18       		.uleb128 0x18
 1779 05cb 6A00     		.ascii	"j\000"
 1780 05cd 01       		.byte	0x1
 1781 05ce ED       		.byte	0xed
 1782 05cf F3000000 		.4byte	0xf3
 1783 05d3 02       		.uleb128 0x2
 1784 05d4 91       		.byte	0x91
 1785 05d5 74       		.sleb128 -12
 1786 05d6 00       		.byte	0
 1787 05d7 19       		.uleb128 0x19
 1788 05d8 38040000 		.4byte	.LASF86
 1789 05dc 01       		.byte	0x1
 1790 05dd F8       		.byte	0xf8
 1791 05de 00000000 		.4byte	.LFB74
 1792 05e2 2A000000 		.4byte	.LFE74-.LFB74
 1793 05e6 01       		.uleb128 0x1
 1794 05e7 9C       		.byte	0x9c
 1795 05e8 11060000 		.4byte	0x611
 1796 05ec 17       		.uleb128 0x17
 1797 05ed 7000     		.ascii	"p\000"
 1798 05ef 01       		.byte	0x1
 1799 05f0 F8       		.byte	0xf8
 1800 05f1 8B050000 		.4byte	0x58b
 1801 05f5 02       		.uleb128 0x2
 1802 05f6 91       		.byte	0x91
 1803 05f7 6C       		.sleb128 -20
 1804 05f8 17       		.uleb128 0x17
 1805 05f9 7100     		.ascii	"q\000"
 1806 05fb 01       		.byte	0x1
 1807 05fc F8       		.byte	0xf8
 1808 05fd 8B050000 		.4byte	0x58b
 1809 0601 02       		.uleb128 0x2
 1810 0602 91       		.byte	0x91
 1811 0603 68       		.sleb128 -24
 1812 0604 18       		.uleb128 0x18
 1813 0605 7400     		.ascii	"t\000"
 1814 0607 01       		.byte	0x1
 1815 0608 F9       		.byte	0xf9
 1816 0609 F3000000 		.4byte	0xf3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 38


 1817 060d 02       		.uleb128 0x2
 1818 060e 91       		.byte	0x91
 1819 060f 76       		.sleb128 -10
 1820 0610 00       		.byte	0
 1821 0611 07       		.uleb128 0x7
 1822 0612 AB000000 		.4byte	0xab
 1823 0616 22060000 		.4byte	0x622
 1824 061a 1A       		.uleb128 0x1a
 1825 061b 9E000000 		.4byte	0x9e
 1826 061f 0001     		.2byte	0x100
 1827 0621 00       		.byte	0
 1828 0622 12       		.uleb128 0x12
 1829 0623 14010000 		.4byte	.LASF87
 1830 0627 01       		.byte	0x1
 1831 0628 0C       		.byte	0xc
 1832 0629 11060000 		.4byte	0x611
 1833 062d 05       		.uleb128 0x5
 1834 062e 03       		.byte	0x3
 1835 062f 00000000 		.4byte	uart_chars
 1836 0633 12       		.uleb128 0x12
 1837 0634 BD030000 		.4byte	.LASF88
 1838 0638 01       		.byte	0x1
 1839 0639 0D       		.byte	0xd
 1840 063a 81000000 		.4byte	0x81
 1841 063e 05       		.uleb128 0x5
 1842 063f 03       		.byte	0x3
 1843 0640 01010000 		.4byte	num_chars
 1844 0644 12       		.uleb128 0x12
 1845 0645 B2020000 		.4byte	.LASF89
 1846 0649 01       		.byte	0x1
 1847 064a 0F       		.byte	0xf
 1848 064b B2000000 		.4byte	0xb2
 1849 064f 05       		.uleb128 0x5
 1850 0650 03       		.byte	0x3
 1851 0651 00000000 		.4byte	line
 1852 0655 12       		.uleb128 0x12
 1853 0656 0C040000 		.4byte	.LASF90
 1854 065a 01       		.byte	0x1
 1855 065b 12       		.byte	0x12
 1856 065c B2000000 		.4byte	0xb2
 1857 0660 05       		.uleb128 0x5
 1858 0661 03       		.byte	0x3
 1859 0662 04010000 		.4byte	match
 1860 0666 12       		.uleb128 0x12
 1861 0667 30040000 		.4byte	.LASF91
 1862 066b 01       		.byte	0x1
 1863 066c 13       		.byte	0x13
 1864 066d B2000000 		.4byte	0xb2
 1865 0671 05       		.uleb128 0x5
 1866 0672 03       		.byte	0x3
 1867 0673 08010000 		.4byte	pattern
 1868 0677 1B       		.uleb128 0x1b
 1869 0678 54010000 		.4byte	.LASF92
 1870 067c 0A       		.byte	0xa
 1871 067d 1207     		.2byte	0x712
 1872 067f 83060000 		.4byte	0x683
 1873 0683 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 39


 1874 0684 8C000000 		.4byte	0x8c
 1875 0688 1C       		.uleb128 0x1c
 1876 0689 23050000 		.4byte	.LASF93
 1877 068d 06       		.byte	0x6
 1878 068e 25       		.byte	0x25
 1879 068f B7030000 		.4byte	0x3b7
 1880 0693 05       		.uleb128 0x5
 1881 0694 03       		.byte	0x3
 1882 0695 00000000 		.4byte	level_sensor_inbox
 1883 0699 1C       		.uleb128 0x1c
 1884 069a 54000000 		.4byte	.LASF94
 1885 069e 07       		.byte	0x7
 1886 069f 11       		.byte	0x11
 1887 06a0 09030000 		.4byte	0x309
 1888 06a4 05       		.uleb128 0x5
 1889 06a5 03       		.byte	0x3
 1890 06a6 00000000 		.4byte	buffer_overflow
 1891 06aa 1C       		.uleb128 0x1c
 1892 06ab AB030000 		.4byte	.LASF95
 1893 06af 07       		.byte	0x7
 1894 06b0 22       		.byte	0x22
 1895 06b1 E7000000 		.4byte	0xe7
 1896 06b5 05       		.uleb128 0x5
 1897 06b6 03       		.byte	0x3
 1898 06b7 00000000 		.4byte	dataPointsInStack
 1899 06bb 1C       		.uleb128 0x1c
 1900 06bc D3050000 		.4byte	.LASF96
 1901 06c0 07       		.byte	0x7
 1902 06c1 23       		.byte	0x23
 1903 06c2 E7000000 		.4byte	0xe7
 1904 06c6 05       		.uleb128 0x5
 1905 06c7 03       		.byte	0x3
 1906 06c8 00000000 		.4byte	dataPointsInStackDesired
 1907 06cc 07       		.uleb128 0x7
 1908 06cd F5010000 		.4byte	0x1f5
 1909 06d1 DC060000 		.4byte	0x6dc
 1910 06d5 08       		.uleb128 0x8
 1911 06d6 9E000000 		.4byte	0x9e
 1912 06da 95       		.byte	0x95
 1913 06db 00       		.byte	0
 1914 06dc 1C       		.uleb128 0x1c
 1915 06dd 22030000 		.4byte	.LASF97
 1916 06e1 07       		.byte	0x7
 1917 06e2 24       		.byte	0x24
 1918 06e3 CC060000 		.4byte	0x6cc
 1919 06e7 05       		.uleb128 0x5
 1920 06e8 03       		.byte	0x3
 1921 06e9 00000000 		.4byte	data
 1922 06ed 1C       		.uleb128 0x1c
 1923 06ee 36010000 		.4byte	.LASF98
 1924 06f2 08       		.byte	0x8
 1925 06f3 20       		.byte	0x20
 1926 06f4 DB000000 		.4byte	0xdb
 1927 06f8 05       		.uleb128 0x5
 1928 06f9 03       		.byte	0x3
 1929 06fa 00000000 		.4byte	modem_state
 1930 06fe 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 40


 1931 06ff 72030000 		.4byte	.LASF99
 1932 0703 08       		.byte	0x8
 1933 0704 6A       		.byte	0x6a
 1934 0705 FF000000 		.4byte	0xff
 1935 0709 05       		.uleb128 0x5
 1936 070a 03       		.byte	0x3
 1937 070b 00000000 		.4byte	modem_start_time_stamp
 1938 070f 1C       		.uleb128 0x1c
 1939 0710 2F030000 		.4byte	.LASF60
 1940 0714 08       		.byte	0x8
 1941 0715 6B       		.byte	0x6b
 1942 0716 2D020000 		.4byte	0x22d
 1943 071a 05       		.uleb128 0x5
 1944 071b 03       		.byte	0x3
 1945 071c 00000000 		.4byte	modem_info
 1946 0720 1C       		.uleb128 0x1c
 1947 0721 89010000 		.4byte	.LASF100
 1948 0725 08       		.byte	0x8
 1949 0726 6C       		.byte	0x6c
 1950 0727 A1020000 		.4byte	0x2a1
 1951 072b 05       		.uleb128 0x5
 1952 072c 03       		.byte	0x3
 1953 072d 00000000 		.4byte	modem_stats
 1954 0731 1C       		.uleb128 0x1c
 1955 0732 12040000 		.4byte	.LASF101
 1956 0736 08       		.byte	0x8
 1957 0737 6D       		.byte	0x6d
 1958 0738 10030000 		.4byte	0x310
 1959 073c 05       		.uleb128 0x5
 1960 073d 03       		.byte	0x3
 1961 073e 00000000 		.4byte	updatable_parameters
 1962 0742 1C       		.uleb128 0x1c
 1963 0743 63060000 		.4byte	.LASF102
 1964 0747 0B       		.byte	0xb
 1965 0748 12       		.byte	0x12
 1966 0749 B7030000 		.4byte	0x3b7
 1967 074d 05       		.uleb128 0x5
 1968 074e 03       		.byte	0x3
 1969 074f 00000000 		.4byte	app_led_inbox
 1970 0753 07       		.uleb128 0x7
 1971 0754 AB000000 		.4byte	0xab
 1972 0758 64070000 		.4byte	0x764
 1973 075c 1A       		.uleb128 0x1a
 1974 075d 9E000000 		.4byte	0x9e
 1975 0761 0F27     		.2byte	0x270f
 1976 0763 00       		.byte	0
 1977 0764 1C       		.uleb128 0x1c
 1978 0765 4F060000 		.4byte	.LASF103
 1979 0769 09       		.byte	0x9
 1980 076a 18       		.byte	0x18
 1981 076b 53070000 		.4byte	0x753
 1982 076f 05       		.uleb128 0x5
 1983 0770 03       		.byte	0x3
 1984 0771 00000000 		.4byte	http_request
 1985 0775 1C       		.uleb128 0x1c
 1986 0776 01020000 		.4byte	.LASF104
 1987 077a 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 41


 1988 077b 19       		.byte	0x19
 1989 077c 53070000 		.4byte	0x753
 1990 0780 05       		.uleb128 0x5
 1991 0781 03       		.byte	0x3
 1992 0782 00000000 		.4byte	http_body
 1993 0786 07       		.uleb128 0x7
 1994 0787 AB000000 		.4byte	0xab
 1995 078b 96070000 		.4byte	0x796
 1996 078f 08       		.uleb128 0x8
 1997 0790 9E000000 		.4byte	0x9e
 1998 0794 C7       		.byte	0xc7
 1999 0795 00       		.byte	0
 2000 0796 1C       		.uleb128 0x1c
 2001 0797 53050000 		.4byte	.LASF105
 2002 079b 09       		.byte	0x9
 2003 079c 1A       		.byte	0x1a
 2004 079d 86070000 		.4byte	0x786
 2005 07a1 05       		.uleb128 0x5
 2006 07a2 03       		.byte	0x3
 2007 07a3 00000000 		.4byte	http_route
 2008 07a7 1C       		.uleb128 0x1c
 2009 07a8 D2040000 		.4byte	.LASF106
 2010 07ac 09       		.byte	0x9
 2011 07ad 41       		.byte	0x41
 2012 07ae 8B030000 		.4byte	0x38b
 2013 07b2 05       		.uleb128 0x5
 2014 07b3 03       		.byte	0x3
 2015 07b4 00000000 		.4byte	system_info
 2016 07b8 1C       		.uleb128 0x1c
 2017 07b9 97040000 		.4byte	.LASF107
 2018 07bd 09       		.byte	0x9
 2019 07be 53       		.byte	0x53
 2020 07bf C7030000 		.4byte	0x3c7
 2021 07c3 05       		.uleb128 0x5
 2022 07c4 03       		.byte	0x3
 2023 07c5 00000000 		.4byte	system_settings
 2024 07c9 1C       		.uleb128 0x1c
 2025 07ca 47010000 		.4byte	.LASF108
 2026 07ce 09       		.byte	0x9
 2027 07cf 6F       		.byte	0x6f
 2028 07d0 54030000 		.4byte	0x354
 2029 07d4 05       		.uleb128 0x5
 2030 07d5 03       		.byte	0x3
 2031 07d6 00000000 		.4byte	alarmMeasure
 2032 07da 1C       		.uleb128 0x1c
 2033 07db C3010000 		.4byte	.LASF109
 2034 07df 09       		.byte	0x9
 2035 07e0 70       		.byte	0x70
 2036 07e1 DB000000 		.4byte	0xdb
 2037 07e5 05       		.uleb128 0x5
 2038 07e6 03       		.byte	0x3
 2039 07e7 00000000 		.4byte	timeToMeasure
 2040 07eb 1C       		.uleb128 0x1c
 2041 07ec CE020000 		.4byte	.LASF110
 2042 07f0 09       		.byte	0x9
 2043 07f1 71       		.byte	0x71
 2044 07f2 54030000 		.4byte	0x354
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 42


 2045 07f6 05       		.uleb128 0x5
 2046 07f7 03       		.byte	0x3
 2047 07f8 00000000 		.4byte	alarmSync
 2048 07fc 1C       		.uleb128 0x1c
 2049 07fd E9010000 		.4byte	.LASF111
 2050 0801 09       		.byte	0x9
 2051 0802 72       		.byte	0x72
 2052 0803 DB000000 		.4byte	0xdb
 2053 0807 05       		.uleb128 0x5
 2054 0808 03       		.byte	0x3
 2055 0809 00000000 		.4byte	timeToSync
 2056 080d 1C       		.uleb128 0x1c
 2057 080e EB030000 		.4byte	.LASF112
 2058 0812 09       		.byte	0x9
 2059 0813 73       		.byte	0x73
 2060 0814 DB000000 		.4byte	0xdb
 2061 0818 05       		.uleb128 0x5
 2062 0819 03       		.byte	0x3
 2063 081a 00000000 		.4byte	timeToSycnRemoteParams
 2064 081e 1D       		.uleb128 0x1d
 2065 081f 68657900 		.ascii	"hey\000"
 2066 0823 09       		.byte	0x9
 2067 0824 74       		.byte	0x74
 2068 0825 DB000000 		.4byte	0xdb
 2069 0829 05       		.uleb128 0x5
 2070 082a 03       		.byte	0x3
 2071 082b 00000000 		.4byte	hey
 2072 082f 1C       		.uleb128 0x1c
 2073 0830 66030000 		.4byte	.LASF113
 2074 0834 09       		.byte	0x9
 2075 0835 77       		.byte	0x77
 2076 0836 54030000 		.4byte	0x354
 2077 083a 05       		.uleb128 0x5
 2078 083b 03       		.byte	0x3
 2079 083c 00000000 		.4byte	alarmAppLED
 2080 0840 1C       		.uleb128 0x1c
 2081 0841 5D020000 		.4byte	.LASF114
 2082 0845 09       		.byte	0x9
 2083 0846 78       		.byte	0x78
 2084 0847 DB000000 		.4byte	0xdb
 2085 084b 05       		.uleb128 0x5
 2086 084c 03       		.byte	0x3
 2087 084d 00000000 		.4byte	timeToAppLED
 2088 0851 1C       		.uleb128 0x1c
 2089 0852 00050000 		.4byte	.LASF115
 2090 0856 09       		.byte	0x9
 2091 0857 7A       		.byte	0x7a
 2092 0858 54030000 		.4byte	0x354
 2093 085c 05       		.uleb128 0x5
 2094 085d 03       		.byte	0x3
 2095 085e 00000000 		.4byte	alarmLevelSensor
 2096 0862 1C       		.uleb128 0x1c
 2097 0863 77010000 		.4byte	.LASF116
 2098 0867 09       		.byte	0x9
 2099 0868 7B       		.byte	0x7b
 2100 0869 DB000000 		.4byte	0xdb
 2101 086d 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 43


 2102 086e 03       		.byte	0x3
 2103 086f 00000000 		.4byte	timetoLevelSensor
 2104 0873 00       		.byte	0
 2105              		.section	.debug_abbrev,"",%progbits
 2106              	.Ldebug_abbrev0:
 2107 0000 01       		.uleb128 0x1
 2108 0001 11       		.uleb128 0x11
 2109 0002 01       		.byte	0x1
 2110 0003 25       		.uleb128 0x25
 2111 0004 0E       		.uleb128 0xe
 2112 0005 13       		.uleb128 0x13
 2113 0006 0B       		.uleb128 0xb
 2114 0007 03       		.uleb128 0x3
 2115 0008 0E       		.uleb128 0xe
 2116 0009 1B       		.uleb128 0x1b
 2117 000a 0E       		.uleb128 0xe
 2118 000b 55       		.uleb128 0x55
 2119 000c 17       		.uleb128 0x17
 2120 000d 11       		.uleb128 0x11
 2121 000e 01       		.uleb128 0x1
 2122 000f 10       		.uleb128 0x10
 2123 0010 17       		.uleb128 0x17
 2124 0011 00       		.byte	0
 2125 0012 00       		.byte	0
 2126 0013 02       		.uleb128 0x2
 2127 0014 24       		.uleb128 0x24
 2128 0015 00       		.byte	0
 2129 0016 0B       		.uleb128 0xb
 2130 0017 0B       		.uleb128 0xb
 2131 0018 3E       		.uleb128 0x3e
 2132 0019 0B       		.uleb128 0xb
 2133 001a 03       		.uleb128 0x3
 2134 001b 0E       		.uleb128 0xe
 2135 001c 00       		.byte	0
 2136 001d 00       		.byte	0
 2137 001e 03       		.uleb128 0x3
 2138 001f 16       		.uleb128 0x16
 2139 0020 00       		.byte	0
 2140 0021 03       		.uleb128 0x3
 2141 0022 0E       		.uleb128 0xe
 2142 0023 3A       		.uleb128 0x3a
 2143 0024 0B       		.uleb128 0xb
 2144 0025 3B       		.uleb128 0x3b
 2145 0026 0B       		.uleb128 0xb
 2146 0027 49       		.uleb128 0x49
 2147 0028 13       		.uleb128 0x13
 2148 0029 00       		.byte	0
 2149 002a 00       		.byte	0
 2150 002b 04       		.uleb128 0x4
 2151 002c 24       		.uleb128 0x24
 2152 002d 00       		.byte	0
 2153 002e 0B       		.uleb128 0xb
 2154 002f 0B       		.uleb128 0xb
 2155 0030 3E       		.uleb128 0x3e
 2156 0031 0B       		.uleb128 0xb
 2157 0032 03       		.uleb128 0x3
 2158 0033 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 44


 2159 0034 00       		.byte	0
 2160 0035 00       		.byte	0
 2161 0036 05       		.uleb128 0x5
 2162 0037 0F       		.uleb128 0xf
 2163 0038 00       		.byte	0
 2164 0039 0B       		.uleb128 0xb
 2165 003a 0B       		.uleb128 0xb
 2166 003b 49       		.uleb128 0x49
 2167 003c 13       		.uleb128 0x13
 2168 003d 00       		.byte	0
 2169 003e 00       		.byte	0
 2170 003f 06       		.uleb128 0x6
 2171 0040 26       		.uleb128 0x26
 2172 0041 00       		.byte	0
 2173 0042 49       		.uleb128 0x49
 2174 0043 13       		.uleb128 0x13
 2175 0044 00       		.byte	0
 2176 0045 00       		.byte	0
 2177 0046 07       		.uleb128 0x7
 2178 0047 01       		.uleb128 0x1
 2179 0048 01       		.byte	0x1
 2180 0049 49       		.uleb128 0x49
 2181 004a 13       		.uleb128 0x13
 2182 004b 01       		.uleb128 0x1
 2183 004c 13       		.uleb128 0x13
 2184 004d 00       		.byte	0
 2185 004e 00       		.byte	0
 2186 004f 08       		.uleb128 0x8
 2187 0050 21       		.uleb128 0x21
 2188 0051 00       		.byte	0
 2189 0052 49       		.uleb128 0x49
 2190 0053 13       		.uleb128 0x13
 2191 0054 2F       		.uleb128 0x2f
 2192 0055 0B       		.uleb128 0xb
 2193 0056 00       		.byte	0
 2194 0057 00       		.byte	0
 2195 0058 09       		.uleb128 0x9
 2196 0059 16       		.uleb128 0x16
 2197 005a 00       		.byte	0
 2198 005b 03       		.uleb128 0x3
 2199 005c 0E       		.uleb128 0xe
 2200 005d 3A       		.uleb128 0x3a
 2201 005e 0B       		.uleb128 0xb
 2202 005f 3B       		.uleb128 0x3b
 2203 0060 05       		.uleb128 0x5
 2204 0061 49       		.uleb128 0x49
 2205 0062 13       		.uleb128 0x13
 2206 0063 00       		.byte	0
 2207 0064 00       		.byte	0
 2208 0065 0A       		.uleb128 0xa
 2209 0066 13       		.uleb128 0x13
 2210 0067 01       		.byte	0x1
 2211 0068 0B       		.uleb128 0xb
 2212 0069 05       		.uleb128 0x5
 2213 006a 3A       		.uleb128 0x3a
 2214 006b 0B       		.uleb128 0xb
 2215 006c 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 45


 2216 006d 0B       		.uleb128 0xb
 2217 006e 01       		.uleb128 0x1
 2218 006f 13       		.uleb128 0x13
 2219 0070 00       		.byte	0
 2220 0071 00       		.byte	0
 2221 0072 0B       		.uleb128 0xb
 2222 0073 0D       		.uleb128 0xd
 2223 0074 00       		.byte	0
 2224 0075 03       		.uleb128 0x3
 2225 0076 0E       		.uleb128 0xe
 2226 0077 3A       		.uleb128 0x3a
 2227 0078 0B       		.uleb128 0xb
 2228 0079 3B       		.uleb128 0x3b
 2229 007a 0B       		.uleb128 0xb
 2230 007b 49       		.uleb128 0x49
 2231 007c 13       		.uleb128 0x13
 2232 007d 38       		.uleb128 0x38
 2233 007e 0B       		.uleb128 0xb
 2234 007f 00       		.byte	0
 2235 0080 00       		.byte	0
 2236 0081 0C       		.uleb128 0xc
 2237 0082 13       		.uleb128 0x13
 2238 0083 01       		.byte	0x1
 2239 0084 0B       		.uleb128 0xb
 2240 0085 0B       		.uleb128 0xb
 2241 0086 3A       		.uleb128 0x3a
 2242 0087 0B       		.uleb128 0xb
 2243 0088 3B       		.uleb128 0x3b
 2244 0089 0B       		.uleb128 0xb
 2245 008a 01       		.uleb128 0x1
 2246 008b 13       		.uleb128 0x13
 2247 008c 00       		.byte	0
 2248 008d 00       		.byte	0
 2249 008e 0D       		.uleb128 0xd
 2250 008f 0D       		.uleb128 0xd
 2251 0090 00       		.byte	0
 2252 0091 03       		.uleb128 0x3
 2253 0092 08       		.uleb128 0x8
 2254 0093 3A       		.uleb128 0x3a
 2255 0094 0B       		.uleb128 0xb
 2256 0095 3B       		.uleb128 0x3b
 2257 0096 0B       		.uleb128 0xb
 2258 0097 49       		.uleb128 0x49
 2259 0098 13       		.uleb128 0x13
 2260 0099 38       		.uleb128 0x38
 2261 009a 0B       		.uleb128 0xb
 2262 009b 00       		.byte	0
 2263 009c 00       		.byte	0
 2264 009d 0E       		.uleb128 0xe
 2265 009e 35       		.uleb128 0x35
 2266 009f 00       		.byte	0
 2267 00a0 49       		.uleb128 0x49
 2268 00a1 13       		.uleb128 0x13
 2269 00a2 00       		.byte	0
 2270 00a3 00       		.byte	0
 2271 00a4 0F       		.uleb128 0xf
 2272 00a5 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 46


 2273 00a6 00       		.byte	0
 2274 00a7 3F       		.uleb128 0x3f
 2275 00a8 19       		.uleb128 0x19
 2276 00a9 03       		.uleb128 0x3
 2277 00aa 0E       		.uleb128 0xe
 2278 00ab 3A       		.uleb128 0x3a
 2279 00ac 0B       		.uleb128 0xb
 2280 00ad 3B       		.uleb128 0x3b
 2281 00ae 0B       		.uleb128 0xb
 2282 00af 27       		.uleb128 0x27
 2283 00b0 19       		.uleb128 0x19
 2284 00b1 49       		.uleb128 0x49
 2285 00b2 13       		.uleb128 0x13
 2286 00b3 11       		.uleb128 0x11
 2287 00b4 01       		.uleb128 0x1
 2288 00b5 12       		.uleb128 0x12
 2289 00b6 06       		.uleb128 0x6
 2290 00b7 40       		.uleb128 0x40
 2291 00b8 18       		.uleb128 0x18
 2292 00b9 9742     		.uleb128 0x2117
 2293 00bb 19       		.uleb128 0x19
 2294 00bc 00       		.byte	0
 2295 00bd 00       		.byte	0
 2296 00be 10       		.uleb128 0x10
 2297 00bf 2E       		.uleb128 0x2e
 2298 00c0 00       		.byte	0
 2299 00c1 3F       		.uleb128 0x3f
 2300 00c2 19       		.uleb128 0x19
 2301 00c3 03       		.uleb128 0x3
 2302 00c4 0E       		.uleb128 0xe
 2303 00c5 3A       		.uleb128 0x3a
 2304 00c6 0B       		.uleb128 0xb
 2305 00c7 3B       		.uleb128 0x3b
 2306 00c8 0B       		.uleb128 0xb
 2307 00c9 27       		.uleb128 0x27
 2308 00ca 19       		.uleb128 0x19
 2309 00cb 11       		.uleb128 0x11
 2310 00cc 01       		.uleb128 0x1
 2311 00cd 12       		.uleb128 0x12
 2312 00ce 06       		.uleb128 0x6
 2313 00cf 40       		.uleb128 0x40
 2314 00d0 18       		.uleb128 0x18
 2315 00d1 9642     		.uleb128 0x2116
 2316 00d3 19       		.uleb128 0x19
 2317 00d4 00       		.byte	0
 2318 00d5 00       		.byte	0
 2319 00d6 11       		.uleb128 0x11
 2320 00d7 2E       		.uleb128 0x2e
 2321 00d8 01       		.byte	0x1
 2322 00d9 3F       		.uleb128 0x3f
 2323 00da 19       		.uleb128 0x19
 2324 00db 03       		.uleb128 0x3
 2325 00dc 0E       		.uleb128 0xe
 2326 00dd 3A       		.uleb128 0x3a
 2327 00de 0B       		.uleb128 0xb
 2328 00df 3B       		.uleb128 0x3b
 2329 00e0 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 47


 2330 00e1 27       		.uleb128 0x27
 2331 00e2 19       		.uleb128 0x19
 2332 00e3 11       		.uleb128 0x11
 2333 00e4 01       		.uleb128 0x1
 2334 00e5 12       		.uleb128 0x12
 2335 00e6 06       		.uleb128 0x6
 2336 00e7 40       		.uleb128 0x40
 2337 00e8 18       		.uleb128 0x18
 2338 00e9 9642     		.uleb128 0x2116
 2339 00eb 19       		.uleb128 0x19
 2340 00ec 01       		.uleb128 0x1
 2341 00ed 13       		.uleb128 0x13
 2342 00ee 00       		.byte	0
 2343 00ef 00       		.byte	0
 2344 00f0 12       		.uleb128 0x12
 2345 00f1 34       		.uleb128 0x34
 2346 00f2 00       		.byte	0
 2347 00f3 03       		.uleb128 0x3
 2348 00f4 0E       		.uleb128 0xe
 2349 00f5 3A       		.uleb128 0x3a
 2350 00f6 0B       		.uleb128 0xb
 2351 00f7 3B       		.uleb128 0x3b
 2352 00f8 0B       		.uleb128 0xb
 2353 00f9 49       		.uleb128 0x49
 2354 00fa 13       		.uleb128 0x13
 2355 00fb 02       		.uleb128 0x2
 2356 00fc 18       		.uleb128 0x18
 2357 00fd 00       		.byte	0
 2358 00fe 00       		.byte	0
 2359 00ff 13       		.uleb128 0x13
 2360 0100 05       		.uleb128 0x5
 2361 0101 00       		.byte	0
 2362 0102 03       		.uleb128 0x3
 2363 0103 0E       		.uleb128 0xe
 2364 0104 3A       		.uleb128 0x3a
 2365 0105 0B       		.uleb128 0xb
 2366 0106 3B       		.uleb128 0x3b
 2367 0107 0B       		.uleb128 0xb
 2368 0108 49       		.uleb128 0x49
 2369 0109 13       		.uleb128 0x13
 2370 010a 02       		.uleb128 0x2
 2371 010b 18       		.uleb128 0x18
 2372 010c 00       		.byte	0
 2373 010d 00       		.byte	0
 2374 010e 14       		.uleb128 0x14
 2375 010f 2E       		.uleb128 0x2e
 2376 0110 01       		.byte	0x1
 2377 0111 3F       		.uleb128 0x3f
 2378 0112 19       		.uleb128 0x19
 2379 0113 03       		.uleb128 0x3
 2380 0114 0E       		.uleb128 0xe
 2381 0115 3A       		.uleb128 0x3a
 2382 0116 0B       		.uleb128 0xb
 2383 0117 3B       		.uleb128 0x3b
 2384 0118 0B       		.uleb128 0xb
 2385 0119 49       		.uleb128 0x49
 2386 011a 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 48


 2387 011b 11       		.uleb128 0x11
 2388 011c 01       		.uleb128 0x1
 2389 011d 12       		.uleb128 0x12
 2390 011e 06       		.uleb128 0x6
 2391 011f 40       		.uleb128 0x40
 2392 0120 18       		.uleb128 0x18
 2393 0121 9642     		.uleb128 0x2116
 2394 0123 19       		.uleb128 0x19
 2395 0124 01       		.uleb128 0x1
 2396 0125 13       		.uleb128 0x13
 2397 0126 00       		.byte	0
 2398 0127 00       		.byte	0
 2399 0128 15       		.uleb128 0x15
 2400 0129 0B       		.uleb128 0xb
 2401 012a 01       		.byte	0x1
 2402 012b 55       		.uleb128 0x55
 2403 012c 17       		.uleb128 0x17
 2404 012d 00       		.byte	0
 2405 012e 00       		.byte	0
 2406 012f 16       		.uleb128 0x16
 2407 0130 2E       		.uleb128 0x2e
 2408 0131 01       		.byte	0x1
 2409 0132 3F       		.uleb128 0x3f
 2410 0133 19       		.uleb128 0x19
 2411 0134 03       		.uleb128 0x3
 2412 0135 0E       		.uleb128 0xe
 2413 0136 3A       		.uleb128 0x3a
 2414 0137 0B       		.uleb128 0xb
 2415 0138 3B       		.uleb128 0x3b
 2416 0139 0B       		.uleb128 0xb
 2417 013a 27       		.uleb128 0x27
 2418 013b 19       		.uleb128 0x19
 2419 013c 49       		.uleb128 0x49
 2420 013d 13       		.uleb128 0x13
 2421 013e 11       		.uleb128 0x11
 2422 013f 01       		.uleb128 0x1
 2423 0140 12       		.uleb128 0x12
 2424 0141 06       		.uleb128 0x6
 2425 0142 40       		.uleb128 0x40
 2426 0143 18       		.uleb128 0x18
 2427 0144 9642     		.uleb128 0x2116
 2428 0146 19       		.uleb128 0x19
 2429 0147 01       		.uleb128 0x1
 2430 0148 13       		.uleb128 0x13
 2431 0149 00       		.byte	0
 2432 014a 00       		.byte	0
 2433 014b 17       		.uleb128 0x17
 2434 014c 05       		.uleb128 0x5
 2435 014d 00       		.byte	0
 2436 014e 03       		.uleb128 0x3
 2437 014f 08       		.uleb128 0x8
 2438 0150 3A       		.uleb128 0x3a
 2439 0151 0B       		.uleb128 0xb
 2440 0152 3B       		.uleb128 0x3b
 2441 0153 0B       		.uleb128 0xb
 2442 0154 49       		.uleb128 0x49
 2443 0155 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 49


 2444 0156 02       		.uleb128 0x2
 2445 0157 18       		.uleb128 0x18
 2446 0158 00       		.byte	0
 2447 0159 00       		.byte	0
 2448 015a 18       		.uleb128 0x18
 2449 015b 34       		.uleb128 0x34
 2450 015c 00       		.byte	0
 2451 015d 03       		.uleb128 0x3
 2452 015e 08       		.uleb128 0x8
 2453 015f 3A       		.uleb128 0x3a
 2454 0160 0B       		.uleb128 0xb
 2455 0161 3B       		.uleb128 0x3b
 2456 0162 0B       		.uleb128 0xb
 2457 0163 49       		.uleb128 0x49
 2458 0164 13       		.uleb128 0x13
 2459 0165 02       		.uleb128 0x2
 2460 0166 18       		.uleb128 0x18
 2461 0167 00       		.byte	0
 2462 0168 00       		.byte	0
 2463 0169 19       		.uleb128 0x19
 2464 016a 2E       		.uleb128 0x2e
 2465 016b 01       		.byte	0x1
 2466 016c 3F       		.uleb128 0x3f
 2467 016d 19       		.uleb128 0x19
 2468 016e 03       		.uleb128 0x3
 2469 016f 0E       		.uleb128 0xe
 2470 0170 3A       		.uleb128 0x3a
 2471 0171 0B       		.uleb128 0xb
 2472 0172 3B       		.uleb128 0x3b
 2473 0173 0B       		.uleb128 0xb
 2474 0174 27       		.uleb128 0x27
 2475 0175 19       		.uleb128 0x19
 2476 0176 11       		.uleb128 0x11
 2477 0177 01       		.uleb128 0x1
 2478 0178 12       		.uleb128 0x12
 2479 0179 06       		.uleb128 0x6
 2480 017a 40       		.uleb128 0x40
 2481 017b 18       		.uleb128 0x18
 2482 017c 9742     		.uleb128 0x2117
 2483 017e 19       		.uleb128 0x19
 2484 017f 01       		.uleb128 0x1
 2485 0180 13       		.uleb128 0x13
 2486 0181 00       		.byte	0
 2487 0182 00       		.byte	0
 2488 0183 1A       		.uleb128 0x1a
 2489 0184 21       		.uleb128 0x21
 2490 0185 00       		.byte	0
 2491 0186 49       		.uleb128 0x49
 2492 0187 13       		.uleb128 0x13
 2493 0188 2F       		.uleb128 0x2f
 2494 0189 05       		.uleb128 0x5
 2495 018a 00       		.byte	0
 2496 018b 00       		.byte	0
 2497 018c 1B       		.uleb128 0x1b
 2498 018d 34       		.uleb128 0x34
 2499 018e 00       		.byte	0
 2500 018f 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 50


 2501 0190 0E       		.uleb128 0xe
 2502 0191 3A       		.uleb128 0x3a
 2503 0192 0B       		.uleb128 0xb
 2504 0193 3B       		.uleb128 0x3b
 2505 0194 05       		.uleb128 0x5
 2506 0195 49       		.uleb128 0x49
 2507 0196 13       		.uleb128 0x13
 2508 0197 3F       		.uleb128 0x3f
 2509 0198 19       		.uleb128 0x19
 2510 0199 3C       		.uleb128 0x3c
 2511 019a 19       		.uleb128 0x19
 2512 019b 00       		.byte	0
 2513 019c 00       		.byte	0
 2514 019d 1C       		.uleb128 0x1c
 2515 019e 34       		.uleb128 0x34
 2516 019f 00       		.byte	0
 2517 01a0 03       		.uleb128 0x3
 2518 01a1 0E       		.uleb128 0xe
 2519 01a2 3A       		.uleb128 0x3a
 2520 01a3 0B       		.uleb128 0xb
 2521 01a4 3B       		.uleb128 0x3b
 2522 01a5 0B       		.uleb128 0xb
 2523 01a6 49       		.uleb128 0x49
 2524 01a7 13       		.uleb128 0x13
 2525 01a8 3F       		.uleb128 0x3f
 2526 01a9 19       		.uleb128 0x19
 2527 01aa 02       		.uleb128 0x2
 2528 01ab 18       		.uleb128 0x18
 2529 01ac 00       		.byte	0
 2530 01ad 00       		.byte	0
 2531 01ae 1D       		.uleb128 0x1d
 2532 01af 34       		.uleb128 0x34
 2533 01b0 00       		.byte	0
 2534 01b1 03       		.uleb128 0x3
 2535 01b2 08       		.uleb128 0x8
 2536 01b3 3A       		.uleb128 0x3a
 2537 01b4 0B       		.uleb128 0xb
 2538 01b5 3B       		.uleb128 0x3b
 2539 01b6 0B       		.uleb128 0xb
 2540 01b7 49       		.uleb128 0x49
 2541 01b8 13       		.uleb128 0x13
 2542 01b9 3F       		.uleb128 0x3f
 2543 01ba 19       		.uleb128 0x19
 2544 01bb 02       		.uleb128 0x2
 2545 01bc 18       		.uleb128 0x18
 2546 01bd 00       		.byte	0
 2547 01be 00       		.byte	0
 2548 01bf 00       		.byte	0
 2549              		.section	.debug_aranges,"",%progbits
 2550 0000 6C000000 		.4byte	0x6c
 2551 0004 0200     		.2byte	0x2
 2552 0006 00000000 		.4byte	.Ldebug_info0
 2553 000a 04       		.byte	0x4
 2554 000b 00       		.byte	0
 2555 000c 0000     		.2byte	0
 2556 000e 0000     		.2byte	0
 2557 0010 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 51


 2558 0014 14000000 		.4byte	.LFE64-.LFB64
 2559 0018 00000000 		.4byte	.LFB65
 2560 001c 14000000 		.4byte	.LFE65-.LFB65
 2561 0020 00000000 		.4byte	.LFB66
 2562 0024 28000000 		.4byte	.LFE66-.LFB66
 2563 0028 00000000 		.4byte	.LFB67
 2564 002c 70000000 		.4byte	.LFE67-.LFB67
 2565 0030 00000000 		.4byte	.LFB68
 2566 0034 1C000000 		.4byte	.LFE68-.LFB68
 2567 0038 00000000 		.4byte	.LFB69
 2568 003c E8000000 		.4byte	.LFE69-.LFB69
 2569 0040 00000000 		.4byte	.LFB70
 2570 0044 1C010000 		.4byte	.LFE70-.LFB70
 2571 0048 00000000 		.4byte	.LFB71
 2572 004c CC000000 		.4byte	.LFE71-.LFB71
 2573 0050 00000000 		.4byte	.LFB72
 2574 0054 8E000000 		.4byte	.LFE72-.LFB72
 2575 0058 00000000 		.4byte	.LFB73
 2576 005c 98000000 		.4byte	.LFE73-.LFB73
 2577 0060 00000000 		.4byte	.LFB74
 2578 0064 2A000000 		.4byte	.LFE74-.LFB74
 2579 0068 00000000 		.4byte	0
 2580 006c 00000000 		.4byte	0
 2581              		.section	.debug_ranges,"",%progbits
 2582              	.Ldebug_ranges0:
 2583 0000 70000000 		.4byte	.LBB2
 2584 0004 C0000000 		.4byte	.LBE2
 2585 0008 D2000000 		.4byte	.LBB3
 2586 000c D4000000 		.4byte	.LBE3
 2587 0010 00000000 		.4byte	0
 2588 0014 00000000 		.4byte	0
 2589 0018 00000000 		.4byte	.LFB64
 2590 001c 14000000 		.4byte	.LFE64
 2591 0020 00000000 		.4byte	.LFB65
 2592 0024 14000000 		.4byte	.LFE65
 2593 0028 00000000 		.4byte	.LFB66
 2594 002c 28000000 		.4byte	.LFE66
 2595 0030 00000000 		.4byte	.LFB67
 2596 0034 70000000 		.4byte	.LFE67
 2597 0038 00000000 		.4byte	.LFB68
 2598 003c 1C000000 		.4byte	.LFE68
 2599 0040 00000000 		.4byte	.LFB69
 2600 0044 E8000000 		.4byte	.LFE69
 2601 0048 00000000 		.4byte	.LFB70
 2602 004c 1C010000 		.4byte	.LFE70
 2603 0050 00000000 		.4byte	.LFB71
 2604 0054 CC000000 		.4byte	.LFE71
 2605 0058 00000000 		.4byte	.LFB72
 2606 005c 8E000000 		.4byte	.LFE72
 2607 0060 00000000 		.4byte	.LFB73
 2608 0064 98000000 		.4byte	.LFE73
 2609 0068 00000000 		.4byte	.LFB74
 2610 006c 2A000000 		.4byte	.LFE74
 2611 0070 00000000 		.4byte	0
 2612 0074 00000000 		.4byte	0
 2613              		.section	.debug_line,"",%progbits
 2614              	.Ldebug_line0:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 52


 2615 0000 EC020000 		.section	.debug_str,"MS",%progbits,1
 2615      0200A301 
 2615      00000201 
 2615      FB0E0D00 
 2615      01010101 
 2616              	.LASF19:
 2617 0000 75696E74 		.ascii	"uint16\000"
 2617      313600
 2618              	.LASF29:
 2619 0007 6E756D5F 		.ascii	"num_invalid_readings\000"
 2619      696E7661 
 2619      6C69645F 
 2619      72656164 
 2619      696E6773 
 2620              	.LASF119:
 2621 001c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2621      73657273 
 2621      5C64616E 
 2621      747A5C44 
 2621      6F63756D 
 2622 0049 72694F53 		.ascii	"riOS.cydsn\000"
 2622      2E637964 
 2622      736E00
 2623              	.LASF94:
 2624 0054 62756666 		.ascii	"buffer_overflow\000"
 2624      65725F6F 
 2624      76657266 
 2624      6C6F7700 
 2625              	.LASF4:
 2626 0064 5F5F7569 		.ascii	"__uint8_t\000"
 2626      6E74385F 
 2626      7400
 2627              	.LASF58:
 2628 006e 636F756E 		.ascii	"countDownResetCondition\000"
 2628      74446F77 
 2628      6E526573 
 2628      6574436F 
 2628      6E646974 
 2629              	.LASF117:
 2630 0086 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2630      43313120 
 2630      352E342E 
 2630      31203230 
 2630      31363036 
 2631 00b9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2631      20726576 
 2631      6973696F 
 2631      6E203233 
 2631      37373135 
 2632 00ec 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2632      66756E63 
 2632      74696F6E 
 2632      2D736563 
 2632      74696F6E 
 2633              	.LASF87:
 2634 0114 75617274 		.ascii	"uart_chars\000"
 2634      5F636861 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 53


 2634      727300
 2635              	.LASF9:
 2636 011f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2636      206C6F6E 
 2636      6720756E 
 2636      7369676E 
 2636      65642069 
 2637              	.LASF98:
 2638 0136 6D6F6465 		.ascii	"modem_state\000"
 2638      6D5F7374 
 2638      61746500 
 2639              	.LASF80:
 2640 0142 74657374 		.ascii	"test\000"
 2640      00
 2641              	.LASF108:
 2642 0147 616C6172 		.ascii	"alarmMeasure\000"
 2642      6D4D6561 
 2642      73757265 
 2642      00
 2643              	.LASF92:
 2644 0154 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2644      52784275 
 2644      66666572 
 2644      00
 2645              	.LASF118:
 2646 0161 6C657665 		.ascii	"level_sensor.c\000"
 2646      6C5F7365 
 2646      6E736F72 
 2646      2E6300
 2647              	.LASF84:
 2648 0170 6D656469 		.ascii	"median\000"
 2648      616E00
 2649              	.LASF116:
 2650 0177 74696D65 		.ascii	"timetoLevelSensor\000"
 2650      746F4C65 
 2650      76656C53 
 2650      656E736F 
 2650      7200
 2651              	.LASF100:
 2652 0189 6D6F6465 		.ascii	"modem_stats\000"
 2652      6D5F7374 
 2652      61747300 
 2653              	.LASF8:
 2654 0195 6C6F6E67 		.ascii	"long long int\000"
 2654      206C6F6E 
 2654      6720696E 
 2654      7400
 2655              	.LASF0:
 2656 01a3 7369676E 		.ascii	"signed char\000"
 2656      65642063 
 2656      68617200 
 2657              	.LASF40:
 2658 01af 65636E6F 		.ascii	"ecno\000"
 2658      00
 2659              	.LASF55:
 2660 01b4 636F756E 		.ascii	"countDownValue\000"
 2660      74446F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 54


 2660      6E56616C 
 2660      756500
 2661              	.LASF109:
 2662 01c3 74696D65 		.ascii	"timeToMeasure\000"
 2662      546F4D65 
 2662      61737572 
 2662      6500
 2663              	.LASF43:
 2664 01d1 74696D65 		.ascii	"time_to_network_connect\000"
 2664      5F746F5F 
 2664      6E657477 
 2664      6F726B5F 
 2664      636F6E6E 
 2665              	.LASF111:
 2666 01e9 74696D65 		.ascii	"timeToSync\000"
 2666      546F5379 
 2666      6E6300
 2667              	.LASF70:
 2668 01f4 6C657665 		.ascii	"level_sensor\000"
 2668      6C5F7365 
 2668      6E736F72 
 2668      00
 2669              	.LASF104:
 2670 0201 68747470 		.ascii	"http_body\000"
 2670      5F626F64 
 2670      7900
 2671              	.LASF37:
 2672 020b 6D6F6465 		.ascii	"modem_info_t\000"
 2672      6D5F696E 
 2672      666F5F74 
 2672      00
 2673              	.LASF38:
 2674 0218 72786C65 		.ascii	"rxlev\000"
 2674      7600
 2675              	.LASF6:
 2676 021e 6C6F6E67 		.ascii	"long int\000"
 2676      20696E74 
 2676      00
 2677              	.LASF56:
 2678 0227 63757272 		.ascii	"currentCountDownValue\000"
 2678      656E7443 
 2678      6F756E74 
 2678      446F776E 
 2678      56616C75 
 2679              	.LASF59:
 2680 023d 616C6172 		.ascii	"alarm\000"
 2680      6D00
 2681              	.LASF18:
 2682 0243 75696E74 		.ascii	"uint8\000"
 2682      3800
 2683              	.LASF76:
 2684 0249 6C657665 		.ascii	"level_sensor_output\000"
 2684      6C5F7365 
 2684      6E736F72 
 2684      5F6F7574 
 2684      70757400 
 2685              	.LASF114:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 55


 2686 025d 74696D65 		.ascii	"timeToAppLED\000"
 2686      546F4170 
 2686      704C4544 
 2686      00
 2687              	.LASF21:
 2688 026a 696E7433 		.ascii	"int32\000"
 2688      3200
 2689              	.LASF46:
 2690 0270 6E6F6465 		.ascii	"node_type\000"
 2690      5F747970 
 2690      6500
 2691              	.LASF78:
 2692 027a 72656164 		.ascii	"reading\000"
 2692      696E6700 
 2693              	.LASF83:
 2694 0282 61727261 		.ascii	"array\000"
 2694      7900
 2695              	.LASF61:
 2696 0288 63686970 		.ascii	"chip_uniqueId\000"
 2696      5F756E69 
 2696      71756549 
 2696      6400
 2697              	.LASF35:
 2698 0296 6D6F6465 		.ascii	"model_id\000"
 2698      6C5F6964 
 2698      00
 2699              	.LASF26:
 2700 029f 616C6C5F 		.ascii	"all_level_readings\000"
 2700      6C657665 
 2700      6C5F7265 
 2700      6164696E 
 2700      677300
 2701              	.LASF89:
 2702 02b2 6C696E65 		.ascii	"line\000"
 2702      00
 2703              	.LASF85:
 2704 02b7 736F7274 		.ascii	"sort\000"
 2704      00
 2705              	.LASF50:
 2706 02bc 64656275 		.ascii	"debug_level\000"
 2706      675F6C65 
 2706      76656C00 
 2707              	.LASF31:
 2708 02c8 76616C75 		.ascii	"value\000"
 2708      6500
 2709              	.LASF110:
 2710 02ce 616C6172 		.ascii	"alarmSync\000"
 2710      6D53796E 
 2710      6300
 2711              	.LASF10:
 2712 02d8 756E7369 		.ascii	"unsigned int\000"
 2712      676E6564 
 2712      20696E74 
 2712      00
 2713              	.LASF33:
 2714 02e5 6B65795F 		.ascii	"key_value_t\000"
 2714      76616C75 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 56


 2714      655F7400 
 2715              	.LASF28:
 2716 02f1 6E756D5F 		.ascii	"num_valid_readings\000"
 2716      76616C69 
 2716      645F7265 
 2716      6164696E 
 2716      677300
 2717              	.LASF7:
 2718 0304 6C6F6E67 		.ascii	"long unsigned int\000"
 2718      20756E73 
 2718      69676E65 
 2718      6420696E 
 2718      7400
 2719              	.LASF66:
 2720 0316 75617274 		.ascii	"uart_string\000"
 2720      5F737472 
 2720      696E6700 
 2721              	.LASF97:
 2722 0322 64617461 		.ascii	"data\000"
 2722      00
 2723              	.LASF64:
 2724 0327 65705F70 		.ascii	"ep_port\000"
 2724      6F727400 
 2725              	.LASF60:
 2726 032f 6D6F6465 		.ascii	"modem_info\000"
 2726      6D5F696E 
 2726      666F00
 2727              	.LASF63:
 2728 033a 65705F68 		.ascii	"ep_host\000"
 2728      6F737400 
 2729              	.LASF81:
 2730 0342 73656E73 		.ascii	"sensor\000"
 2730      6F7200
 2731              	.LASF44:
 2732 0349 74696D65 		.ascii	"time_to_acquire_ip\000"
 2732      5F746F5F 
 2732      61637175 
 2732      6972655F 
 2732      697000
 2733              	.LASF2:
 2734 035c 73686F72 		.ascii	"short int\000"
 2734      7420696E 
 2734      7400
 2735              	.LASF113:
 2736 0366 616C6172 		.ascii	"alarmAppLED\000"
 2736      6D417070 
 2736      4C454400 
 2737              	.LASF99:
 2738 0372 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2738      6D5F7374 
 2738      6172745F 
 2738      74696D65 
 2738      5F737461 
 2739              	.LASF62:
 2740 0389 7379735F 		.ascii	"sys_info_t\000"
 2740      696E666F 
 2740      5F7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 57


 2741              	.LASF54:
 2742 0394 75706461 		.ascii	"updatable_parameters_t\000"
 2742      7461626C 
 2742      655F7061 
 2742      72616D65 
 2742      74657273 
 2743              	.LASF95:
 2744 03ab 64617461 		.ascii	"dataPointsInStack\000"
 2744      506F696E 
 2744      7473496E 
 2744      53746163 
 2744      6B00
 2745              	.LASF88:
 2746 03bd 6E756D5F 		.ascii	"num_chars\000"
 2746      63686172 
 2746      7300
 2747              	.LASF68:
 2748 03c7 4C657665 		.ascii	"Level_Sensor_ISR\000"
 2748      6C5F5365 
 2748      6E736F72 
 2748      5F495352 
 2748      00
 2749              	.LASF14:
 2750 03d8 73697A65 		.ascii	"sizetype\000"
 2750      74797065 
 2750      00
 2751              	.LASF22:
 2752 03e1 74657374 		.ascii	"test_name\000"
 2752      5F6E616D 
 2752      6500
 2753              	.LASF112:
 2754 03eb 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2754      546F5379 
 2754      636E5265 
 2754      6D6F7465 
 2754      50617261 
 2755              	.LASF32:
 2756 0402 74696D65 		.ascii	"timeStamp\000"
 2756      5374616D 
 2756      7000
 2757              	.LASF90:
 2758 040c 6D617463 		.ascii	"match\000"
 2758      6800
 2759              	.LASF101:
 2760 0412 75706461 		.ascii	"updatable_parameters\000"
 2760      7461626C 
 2760      655F7061 
 2760      72616D65 
 2760      74657273 
 2761              	.LASF67:
 2762 0427 75617274 		.ascii	"uart_len\000"
 2762      5F6C656E 
 2762      00
 2763              	.LASF91:
 2764 0430 70617474 		.ascii	"pattern\000"
 2764      65726E00 
 2765              	.LASF86:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 58


 2766 0438 73776170 		.ascii	"swap\000"
 2766      00
 2767              	.LASF72:
 2768 043d 636F6D70 		.ascii	"compare_location\000"
 2768      6172655F 
 2768      6C6F6361 
 2768      74696F6E 
 2768      00
 2769              	.LASF17:
 2770 044e 666C6F61 		.ascii	"float\000"
 2770      7400
 2771              	.LASF79:
 2772 0454 6C657665 		.ascii	"level_sensor_test\000"
 2772      6C5F7365 
 2772      6E736F72 
 2772      5F746573 
 2772      7400
 2773              	.LASF30:
 2774 0466 6C657665 		.ascii	"level_sensor_t\000"
 2774      6C5F7365 
 2774      6E736F72 
 2774      5F7400
 2775              	.LASF77:
 2776 0475 746F6B65 		.ascii	"token\000"
 2776      6E00
 2777              	.LASF53:
 2778 047b 5F426F6F 		.ascii	"_Bool\000"
 2778      6C00
 2779              	.LASF12:
 2780 0481 696E7433 		.ascii	"int32_t\000"
 2780      325F7400 
 2781              	.LASF1:
 2782 0489 756E7369 		.ascii	"unsigned char\000"
 2782      676E6564 
 2782      20636861 
 2782      7200
 2783              	.LASF107:
 2784 0497 73797374 		.ascii	"system_settings\000"
 2784      656D5F73 
 2784      65747469 
 2784      6E677300 
 2785              	.LASF25:
 2786 04a7 74657374 		.ascii	"test_t\000"
 2786      5F7400
 2787              	.LASF42:
 2788 04ae 72737270 		.ascii	"rsrp\000"
 2788      00
 2789              	.LASF41:
 2790 04b3 72737271 		.ascii	"rsrq\000"
 2790      00
 2791              	.LASF49:
 2792 04b8 73796E63 		.ascii	"sync_time\000"
 2792      5F74696D 
 2792      6500
 2793              	.LASF120:
 2794 04c2 75617274 		.ascii	"uart_clear\000"
 2794      5F636C65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 59


 2794      617200
 2795              	.LASF39:
 2796 04cd 72736370 		.ascii	"rscp\000"
 2796      00
 2797              	.LASF106:
 2798 04d2 73797374 		.ascii	"system_info\000"
 2798      656D5F69 
 2798      6E666F00 
 2799              	.LASF36:
 2800 04de 696D6569 		.ascii	"imei\000"
 2800      00
 2801              	.LASF24:
 2802 04e3 72656173 		.ascii	"reason\000"
 2802      6F6E00
 2803              	.LASF71:
 2804 04ea 72785F63 		.ascii	"rx_char\000"
 2804      68617200 
 2805              	.LASF45:
 2806 04f2 6D6F6465 		.ascii	"modem_stats_t\000"
 2806      6D5F7374 
 2806      6174735F 
 2806      7400
 2807              	.LASF115:
 2808 0500 616C6172 		.ascii	"alarmLevelSensor\000"
 2808      6D4C6576 
 2808      656C5365 
 2808      6E736F72 
 2808      00
 2809              	.LASF52:
 2810 0511 4C657665 		.ascii	"Level_Sensor_freq\000"
 2810      6C5F5365 
 2810      6E736F72 
 2810      5F667265 
 2810      7100
 2811              	.LASF93:
 2812 0523 6C657665 		.ascii	"level_sensor_inbox\000"
 2812      6C5F7365 
 2812      6E736F72 
 2812      5F696E62 
 2812      6F7800
 2813              	.LASF13:
 2814 0536 6C6F6E67 		.ascii	"long double\000"
 2814      20646F75 
 2814      626C6500 
 2815              	.LASF73:
 2816 0542 635F7469 		.ascii	"c_timeStamp\000"
 2816      6D655374 
 2816      616D7000 
 2817              	.LASF15:
 2818 054e 63686172 		.ascii	"char\000"
 2818      00
 2819              	.LASF105:
 2820 0553 68747470 		.ascii	"http_route\000"
 2820      5F726F75 
 2820      746500
 2821              	.LASF5:
 2822 055e 5F5F696E 		.ascii	"__int32_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 60


 2822      7433325F 
 2822      7400
 2823              	.LASF48:
 2824 0568 6D656173 		.ascii	"measure_time\000"
 2824      7572655F 
 2824      74696D65 
 2824      00
 2825              	.LASF74:
 2826 0575 6D5F6C65 		.ascii	"m_level_sensor\000"
 2826      76656C5F 
 2826      73656E73 
 2826      6F7200
 2827              	.LASF27:
 2828 0584 6C657665 		.ascii	"level_reading\000"
 2828      6C5F7265 
 2828      6164696E 
 2828      6700
 2829              	.LASF3:
 2830 0592 73686F72 		.ascii	"short unsigned int\000"
 2830      7420756E 
 2830      7369676E 
 2830      65642069 
 2830      6E7400
 2831              	.LASF34:
 2832 05a5 73696D5F 		.ascii	"sim_id\000"
 2832      696400
 2833              	.LASF69:
 2834 05ac 4C657665 		.ascii	"Level_Sensor_Update\000"
 2834      6C5F5365 
 2834      6E736F72 
 2834      5F557064 
 2834      61746500 
 2835              	.LASF121:
 2836 05c0 66696E64 		.ascii	"find_median\000"
 2836      5F6D6564 
 2836      69616E00 
 2837              	.LASF23:
 2838 05cc 73746174 		.ascii	"status\000"
 2838      757300
 2839              	.LASF96:
 2840 05d3 64617461 		.ascii	"dataPointsInStackDesired\000"
 2840      506F696E 
 2840      7473496E 
 2840      53746163 
 2840      6B446573 
 2841              	.LASF51:
 2842 05ec 4170705F 		.ascii	"App_LED_freq\000"
 2842      4C45445F 
 2842      66726571 
 2842      00
 2843              	.LASF75:
 2844 05f9 6C657665 		.ascii	"level_sensor_take_reading\000"
 2844      6C5F7365 
 2844      6E736F72 
 2844      5F74616B 
 2844      655F7265 
 2845              	.LASF65:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccDxfnmX.s 			page 61


 2846 0613 7379735F 		.ascii	"sys_settings_t\000"
 2846      73657474 
 2846      696E6773 
 2846      5F7400
 2847              	.LASF11:
 2848 0622 75696E74 		.ascii	"uint8_t\000"
 2848      385F7400 
 2849              	.LASF20:
 2850 062a 696E7431 		.ascii	"int16\000"
 2850      3600
 2851              	.LASF57:
 2852 0630 636F756E 		.ascii	"countDownType\000"
 2852      74446F77 
 2852      6E547970 
 2852      6500
 2853              	.LASF47:
 2854 063e 73696D5F 		.ascii	"sim_type\000"
 2854      74797065 
 2854      00
 2855              	.LASF82:
 2856 0647 6D657373 		.ascii	"message\000"
 2856      61676500 
 2857              	.LASF103:
 2858 064f 68747470 		.ascii	"http_request\000"
 2858      5F726571 
 2858      75657374 
 2858      00
 2859              	.LASF16:
 2860 065c 646F7562 		.ascii	"double\000"
 2860      6C6500
 2861              	.LASF102:
 2862 0663 6170705F 		.ascii	"app_led_inbox\000"
 2862      6C65645F 
 2862      696E626F 
 2862      7800
 2863              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
