ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"level_sensor.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,6,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.bss
  50              		.align	2
  51              	uart_chars:
  52 0000 00000000 		.space	257
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              	num_chars:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 2


  54 0101 00       		.space	1
  55              		.data
  56              		.align	2
  57              		.type	line, %object
  58              		.size	line, 4
  59              	line:
  60 0000 00000000 		.word	uart_chars
  61              		.bss
  62 0102 0000     		.align	2
  63              	match:
  64 0104 00000000 		.space	4
  65              		.align	2
  66              	pattern:
  67 0108 00000000 		.space	4
  68              		.section	.text.uart_string,"ax",%progbits
  69              		.align	2
  70              		.global	uart_string
  71              		.thumb
  72              		.thumb_func
  73              		.type	uart_string, %function
  74              	uart_string:
  75              	.LFB64:
  76              		.file 1 "level_sensor.c"
   1:level_sensor.c **** #include "level_sensor.h"
   2:level_sensor.c **** #include "notoriOS.h"
   3:level_sensor.c **** 
   4:level_sensor.c **** /* === Driver Functions === */
   5:level_sensor.c **** 
   6:level_sensor.c **** //Sensor related global calls
   7:level_sensor.c **** 
   8:level_sensor.c **** 
   9:level_sensor.c **** // Circular buffer of recently received chars.
  10:level_sensor.c **** // Initialize all the members of the array uart_chars to 0. 
  11:level_sensor.c **** static char uart_chars[257] = {0};
  12:level_sensor.c **** static uint8_t num_chars = 0;
  13:level_sensor.c **** 
  14:level_sensor.c **** static const char *line = uart_chars;
  15:level_sensor.c **** // Only pointers can be null, where null is a special address used to signify that the pointer is n
  16:level_sensor.c **** // Pointers are not initialized to null by default, you must do so if you want them initialized.
  17:level_sensor.c **** static const char *match = NULL;
  18:level_sensor.c **** static const char *pattern = NULL;
  19:level_sensor.c **** 
  20:level_sensor.c **** 
  21:level_sensor.c **** // This is only defined in c file so this function will return the location in memory where that va
  22:level_sensor.c **** const char *uart_string(void) {
  77              		.loc 1 22 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  23:level_sensor.c ****     // Variables in front of a variable is casting 
  24:level_sensor.c ****     // uart_chars may be a different variable type, make sure to cast it as a char
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 3


  25:level_sensor.c ****   return (char*)uart_chars;
  87              		.loc 1 25 0
  88 0004 024B     		ldr	r3, .L3
  26:level_sensor.c **** }
  89              		.loc 1 26 0
  90 0006 1846     		mov	r0, r3
  91 0008 BD46     		mov	sp, r7
  92              		.cfi_def_cfa_register 13
  93              		@ sp needed
  94 000a 80BC     		pop	{r7}
  95              		.cfi_restore 7
  96              		.cfi_def_cfa_offset 0
  97 000c 7047     		bx	lr
  98              	.L4:
  99 000e 00BF     		.align	2
 100              	.L3:
 101 0010 00000000 		.word	uart_chars
 102              		.cfi_endproc
 103              	.LFE64:
 104              		.size	uart_string, .-uart_string
 105              		.section	.text.uart_len,"ax",%progbits
 106              		.align	2
 107              		.global	uart_len
 108              		.thumb
 109              		.thumb_func
 110              		.type	uart_len, %function
 111              	uart_len:
 112              	.LFB65:
  27:level_sensor.c **** 
  28:level_sensor.c **** // Return the number of characters of the level sensor reading
  29:level_sensor.c **** uint8_t uart_len(void) {
 113              		.loc 1 29 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0000 80B4     		push	{r7}
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0002 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
  30:level_sensor.c ****   return num_chars;
 123              		.loc 1 30 0
 124 0004 024B     		ldr	r3, .L7
 125 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  31:level_sensor.c **** }
 126              		.loc 1 31 0
 127 0008 1846     		mov	r0, r3
 128 000a BD46     		mov	sp, r7
 129              		.cfi_def_cfa_register 13
 130              		@ sp needed
 131 000c 80BC     		pop	{r7}
 132              		.cfi_restore 7
 133              		.cfi_def_cfa_offset 0
 134 000e 7047     		bx	lr
 135              	.L8:
 136              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 4


 137              	.L7:
 138 0010 01010000 		.word	num_chars
 139              		.cfi_endproc
 140              	.LFE65:
 141              		.size	uart_len, .-uart_len
 142              		.section	.text.uart_clear,"ax",%progbits
 143              		.align	2
 144              		.global	uart_clear
 145              		.thumb
 146              		.thumb_func
 147              		.type	uart_clear, %function
 148              	uart_clear:
 149              	.LFB66:
  32:level_sensor.c **** 
  33:level_sensor.c **** // Clears the sensor data 
  34:level_sensor.c **** void uart_clear(void) {
 150              		.loc 1 34 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 80B5     		push	{r7, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 00AF     		add	r7, sp, #0
 159              		.cfi_def_cfa_register 7
  35:level_sensor.c ****   // UART_ClearRxBuffer(): Clears the receiver memory buffer and hardware RX FIFO of all received d
  36:level_sensor.c ****   Level_Sensor_UART_ClearRxBuffer();
 160              		.loc 1 36 0
 161 0004 FFF7FEFF 		bl	Level_Sensor_UART_ClearRxBuffer
  37:level_sensor.c ****   // void *memset(void *str, int c, size_t n) where str is a pointer to the block of memory to fill
  38:level_sensor.c ****   // The value is passed as an int, but the function fills the block of memory using the unsigned c
  39:level_sensor.c ****   // n is the number of bytes to be set to the value.
  40:level_sensor.c ****   memset((void*)uart_chars, 0, 256);
 162              		.loc 1 40 0
 163 0008 4FF48072 		mov	r2, #256
 164 000c 0021     		movs	r1, #0
 165 000e 0448     		ldr	r0, .L10
 166 0010 FFF7FEFF 		bl	memset
  41:level_sensor.c ****   num_chars = 0;
 167              		.loc 1 41 0
 168 0014 034B     		ldr	r3, .L10+4
 169 0016 0022     		movs	r2, #0
 170 0018 1A70     		strb	r2, [r3]
  42:level_sensor.c **** }
 171              		.loc 1 42 0
 172 001a 00BF     		nop
 173 001c 80BD     		pop	{r7, pc}
 174              	.L11:
 175 001e 00BF     		.align	2
 176              	.L10:
 177 0020 00000000 		.word	uart_chars
 178 0024 01010000 		.word	num_chars
 179              		.cfi_endproc
 180              	.LFE66:
 181              		.size	uart_clear, .-uart_clear
 182              		.section	.text.Level_Sensor_ISR,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 5


 183              		.align	2
 184              		.global	Level_Sensor_ISR
 185              		.thumb
 186              		.thumb_func
 187              		.type	Level_Sensor_ISR, %function
 188              	Level_Sensor_ISR:
 189              	.LFB67:
  43:level_sensor.c **** 
  44:level_sensor.c **** // ISR: Interrupt Service Routine
  45:level_sensor.c **** CY_ISR(Level_Sensor_ISR) {
 190              		.loc 1 45 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 82B0     		sub	sp, sp, #8
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
  46:level_sensor.c ****     /* Store received char in uart_chars.
  47:level_sensor.c ****     Returns the last received byte of data. Level_Sensor_UART_GetChar() is designed for ASCII chara
  48:level_sensor.c ****     1 to 255 are values for valid characters and 0 indicats an error occurred or no data is present
  49:level_sensor.c ****     char rx_char = Level_Sensor_UART_GetChar();
 202              		.loc 1 49 0
 203 0006 FFF7FEFF 		bl	Level_Sensor_UART_GetChar
 204 000a 0346     		mov	r3, r0
 205 000c FB71     		strb	r3, [r7, #7]
  50:level_sensor.c ****     // UART_GetChar() returns data, then set the entire uart_chars array to rx_char.
  51:level_sensor.c ****     if (rx_char) uart_chars[num_chars++] = rx_char;
 206              		.loc 1 51 0
 207 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 208 0010 002B     		cmp	r3, #0
 209 0012 09D0     		beq	.L13
 210              		.loc 1 51 0 is_stmt 0 discriminator 1
 211 0014 114B     		ldr	r3, .L16
 212 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 0018 5A1C     		adds	r2, r3, #1
 214 001a D1B2     		uxtb	r1, r2
 215 001c 0F4A     		ldr	r2, .L16
 216 001e 1170     		strb	r1, [r2]
 217 0020 1946     		mov	r1, r3
 218 0022 0F4A     		ldr	r2, .L16+4
 219 0024 FB79     		ldrb	r3, [r7, #7]
 220 0026 5354     		strb	r3, [r2, r1]
 221              	.L13:
  52:level_sensor.c **** 
  53:level_sensor.c ****     /* Check pattern at end of line */
  54:level_sensor.c ****     if (rx_char == '\r') {
 222              		.loc 1 54 0 is_stmt 1
 223 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 224 002a 0D2B     		cmp	r3, #13
 225 002c 11D1     		bne	.L15
  55:level_sensor.c ****         // strstr(): char *strstr(const char *haystack, const char *needle). haystack - main C stri
  56:level_sensor.c ****         match = strstr(line, pattern);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 6


 226              		.loc 1 56 0
 227 002e 0D4B     		ldr	r3, .L16+8
 228 0030 1A68     		ldr	r2, [r3]
 229 0032 0D4B     		ldr	r3, .L16+12
 230 0034 1B68     		ldr	r3, [r3]
 231 0036 1946     		mov	r1, r3
 232 0038 1046     		mov	r0, r2
 233 003a FFF7FEFF 		bl	strstr
 234 003e 0246     		mov	r2, r0
 235 0040 0A4B     		ldr	r3, .L16+16
 236 0042 1A60     		str	r2, [r3]
  57:level_sensor.c ****         line = uart_chars + num_chars;
 237              		.loc 1 57 0
 238 0044 054B     		ldr	r3, .L16
 239 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 240 0048 1A46     		mov	r2, r3
 241 004a 054B     		ldr	r3, .L16+4
 242 004c 1344     		add	r3, r3, r2
 243 004e 054A     		ldr	r2, .L16+8
 244 0050 1360     		str	r3, [r2]
 245              	.L15:
  58:level_sensor.c ****     }
  59:level_sensor.c **** }
 246              		.loc 1 59 0
 247 0052 00BF     		nop
 248 0054 0837     		adds	r7, r7, #8
 249              		.cfi_def_cfa_offset 8
 250 0056 BD46     		mov	sp, r7
 251              		.cfi_def_cfa_register 13
 252              		@ sp needed
 253 0058 80BD     		pop	{r7, pc}
 254              	.L17:
 255 005a 00BF     		.align	2
 256              	.L16:
 257 005c 01010000 		.word	num_chars
 258 0060 00000000 		.word	uart_chars
 259 0064 00000000 		.word	line
 260 0068 08010000 		.word	pattern
 261 006c 04010000 		.word	match
 262              		.cfi_endproc
 263              	.LFE67:
 264              		.size	Level_Sensor_ISR, .-Level_Sensor_ISR
 265              		.section	.text.Level_Sensor_Update,"ax",%progbits
 266              		.align	2
 267              		.global	Level_Sensor_Update
 268              		.thumb
 269              		.thumb_func
 270              		.type	Level_Sensor_Update, %function
 271              	Level_Sensor_Update:
 272              	.LFB68:
  60:level_sensor.c **** 
  61:level_sensor.c **** void Level_Sensor_Update(char * message){
 273              		.loc 1 61 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 7


 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 7, -8
 280              		.cfi_offset 14, -4
 281 0002 82B0     		sub	sp, sp, #8
 282              		.cfi_def_cfa_offset 16
 283 0004 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 285 0006 7860     		str	r0, [r7, #4]
  62:level_sensor.c ****     strcpy(level_sensor_inbox, message);
 286              		.loc 1 62 0
 287 0008 7968     		ldr	r1, [r7, #4]
 288 000a 0348     		ldr	r0, .L19
 289 000c FFF7FEFF 		bl	strcpy
  63:level_sensor.c **** }
 290              		.loc 1 63 0
 291 0010 00BF     		nop
 292 0012 0837     		adds	r7, r7, #8
 293              		.cfi_def_cfa_offset 8
 294 0014 BD46     		mov	sp, r7
 295              		.cfi_def_cfa_register 13
 296              		@ sp needed
 297 0016 80BD     		pop	{r7, pc}
 298              	.L20:
 299              		.align	2
 300              	.L19:
 301 0018 00000000 		.word	level_sensor_inbox
 302              		.cfi_endproc
 303              	.LFE68:
 304              		.size	Level_Sensor_Update, .-Level_Sensor_Update
 305              		.section	.rodata
 306              		.align	2
 307              	.LC0:
 308 0000 4F464600 		.ascii	"OFF\000"
 309              		.align	2
 310              	.LC1:
 311 0004 256C6400 		.ascii	"%ld\000"
 312              		.align	2
 313              	.LC2:
 314 0008 256400   		.ascii	"%d\000"
 315 000b 00       		.align	2
 316              	.LC3:
 317 000c 6D617862 		.ascii	"maxbotix_depth=%s\000"
 317      6F746978 
 317      5F646570 
 317      74683D25 
 317      7300
 318 001e 0000     		.align	2
 319              	.LC4:
 320 0020 6D617862 		.ascii	"maxbotix_depth\000"
 320      6F746978 
 320      5F646570 
 320      746800
 321 002f 00       		.align	2
 322              	.LC5:
 323 0030 612B00   		.ascii	"a+\000"
 324 0033 00       		.align	2
 325              	.LC6:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 8


 326 0034 64617461 		.ascii	"data.txt\000"
 326      2E747874 
 326      00
 327 003d 000000   		.align	2
 328              	.LC7:
 329 0040 206D6178 		.ascii	" maxbotix_depth: \000"
 329      626F7469 
 329      785F6465 
 329      7074683A 
 329      2000
 330 0052 0000     		.align	2
 331              	.LC8:
 332 0054 2000     		.ascii	" \000"
 333 0056 0000     		.align	2
 334              	.LC9:
 335 0058 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 335      64206E6F 
 335      74206765 
 335      74207661 
 335      6C696420 
 336              		.section	.text.level_sensor,"ax",%progbits
 337              		.align	2
 338              		.global	level_sensor
 339              		.thumb
 340              		.thumb_func
 341              		.type	level_sensor, %function
 342              	level_sensor:
 343              	.LFB69:
  64:level_sensor.c **** 
  65:level_sensor.c **** uint8 level_sensor(){
 344              		.loc 1 65 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 88
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348 0000 80B5     		push	{r7, lr}
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 96B0     		sub	sp, sp, #88
 353              		.cfi_def_cfa_offset 96
 354 0004 00AF     		add	r7, sp, #0
 355              		.cfi_def_cfa_register 7
  66:level_sensor.c ****     char * compare_location;
  67:level_sensor.c ****     
  68:level_sensor.c ****     compare_location = strstr(app_led_inbox,"OFF");        
 356              		.loc 1 68 0
 357 0006 3449     		ldr	r1, .L27
 358 0008 3448     		ldr	r0, .L27+4
 359 000a FFF7FEFF 		bl	strstr
 360 000e 7865     		str	r0, [r7, #84]
  69:level_sensor.c ****     if(compare_location!=NULL){
 361              		.loc 1 69 0
 362 0010 7B6D     		ldr	r3, [r7, #84]
 363 0012 002B     		cmp	r3, #0
 364 0014 01D0     		beq	.L22
  70:level_sensor.c ****         return 0; // this app is disabled, don't do anything
 365              		.loc 1 70 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 9


 366 0016 0023     		movs	r3, #0
 367 0018 5AE0     		b	.L26
 368              	.L22:
  71:level_sensor.c ****     }
  72:level_sensor.c ****     
  73:level_sensor.c ****     
  74:level_sensor.c ****     
  75:level_sensor.c ****     // otherwise, assume it's on and they want our depth measurements
  76:level_sensor.c ****     
  77:level_sensor.c ****     // below is copied and adapted from makeMeasurements in modem.c (that function will be deleted 
  78:level_sensor.c ****     
  79:level_sensor.c ****     // Get clock time and save to timeStamp
  80:level_sensor.c ****     long timeStamp = getTimeStamp();
 369              		.loc 1 80 0
 370 001a FFF7FEFF 		bl	getTimeStamp
 371 001e 3865     		str	r0, [r7, #80]
  81:level_sensor.c ****     char c_timeStamp[32];
  82:level_sensor.c ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 372              		.loc 1 82 0
 373 0020 07F13000 		add	r0, r7, #48
 374 0024 3B6D     		ldr	r3, [r7, #80]
 375 0026 2E4A     		ldr	r2, .L27+8
 376 0028 2021     		movs	r1, #32
 377 002a FFF7FEFF 		bl	snprintf
  83:level_sensor.c ****     
  84:level_sensor.c ****     // Holds string for value that will be written 
  85:level_sensor.c ****     char value[DATA_MAX_KEY_LENGTH];
  86:level_sensor.c ****     
  87:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
  88:level_sensor.c ****     level_sensor_t m_level_sensor;
  89:level_sensor.c ****     
  90:level_sensor.c ****     // Take level sensor readings and save them to m_level_sensor
  91:level_sensor.c ****     m_level_sensor = level_sensor_take_reading();
 378              		.loc 1 91 0
 379 002e 3B46     		mov	r3, r7
 380 0030 1846     		mov	r0, r3
 381 0032 FFF7FEFF 		bl	level_sensor_take_reading
  92:level_sensor.c ****     
  93:level_sensor.c ****     // JUST FOR TESTING: pushing invalid readings to grafana to check connection
  94:level_sensor.c ****     snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 382              		.loc 1 94 0
 383 0036 B7F91630 		ldrsh	r3, [r7, #22]
 384 003a 07F11C00 		add	r0, r7, #28
 385 003e 294A     		ldr	r2, .L27+12
 386 0040 1421     		movs	r1, #20
 387 0042 FFF7FEFF 		bl	snprintf
  95:level_sensor.c ****     printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 388              		.loc 1 95 0
 389 0046 07F11C03 		add	r3, r7, #28
 390 004a 1A46     		mov	r2, r3
 391 004c 2649     		ldr	r1, .L27+16
 392 004e 0020     		movs	r0, #0
 393 0050 FFF7FEFF 		bl	printNotif
  96:level_sensor.c ****     pushData("maxbotix_depth",value,timeStamp);
 394              		.loc 1 96 0
 395 0054 07F11C03 		add	r3, r7, #28
 396 0058 3A6D     		ldr	r2, [r7, #80]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 10


 397 005a 1946     		mov	r1, r3
 398 005c 2348     		ldr	r0, .L27+20
 399 005e FFF7FEFF 		bl	pushData
  97:level_sensor.c **** 
  98:level_sensor.c ****     // If the number of valid level sensor readings is greater than 0, then print the level sensor 
  99:level_sensor.c ****     if(m_level_sensor.num_valid_readings > 0){
 400              		.loc 1 99 0
 401 0062 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 402 0064 002B     		cmp	r3, #0
 403 0066 2ED0     		beq	.L24
 100:level_sensor.c ****         snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 404              		.loc 1 100 0
 405 0068 B7F91630 		ldrsh	r3, [r7, #22]
 406 006c 07F11C00 		add	r0, r7, #28
 407 0070 1C4A     		ldr	r2, .L27+12
 408 0072 1421     		movs	r1, #20
 409 0074 FFF7FEFF 		bl	snprintf
 101:level_sensor.c ****         printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 410              		.loc 1 101 0
 411 0078 07F11C03 		add	r3, r7, #28
 412 007c 1A46     		mov	r2, r3
 413 007e 1A49     		ldr	r1, .L27+16
 414 0080 0020     		movs	r0, #0
 415 0082 FFF7FEFF 		bl	printNotif
 102:level_sensor.c ****         pushData("maxbotix_depth",value,timeStamp);
 416              		.loc 1 102 0
 417 0086 07F11C03 		add	r3, r7, #28
 418 008a 3A6D     		ldr	r2, [r7, #80]
 419 008c 1946     		mov	r1, r3
 420 008e 1748     		ldr	r0, .L27+20
 421 0090 FFF7FEFF 		bl	pushData
 103:level_sensor.c ****         
 104:level_sensor.c ****         // Print measurement to SD card to file called data.txt
 105:level_sensor.c ****         SD_write("data.txt", "a+", c_timeStamp);
 422              		.loc 1 105 0
 423 0094 07F13003 		add	r3, r7, #48
 424 0098 1A46     		mov	r2, r3
 425 009a 1549     		ldr	r1, .L27+24
 426 009c 1548     		ldr	r0, .L27+28
 427 009e FFF7FEFF 		bl	SD_write
 106:level_sensor.c ****         SD_write("data.txt", "a+", " maxbotix_depth: ");
 428              		.loc 1 106 0
 429 00a2 154A     		ldr	r2, .L27+32
 430 00a4 1249     		ldr	r1, .L27+24
 431 00a6 1348     		ldr	r0, .L27+28
 432 00a8 FFF7FEFF 		bl	SD_write
 107:level_sensor.c ****         SD_write("data.txt", "a+", value);
 433              		.loc 1 107 0
 434 00ac 07F11C03 		add	r3, r7, #28
 435 00b0 1A46     		mov	r2, r3
 436 00b2 0F49     		ldr	r1, .L27+24
 437 00b4 0F48     		ldr	r0, .L27+28
 438 00b6 FFF7FEFF 		bl	SD_write
 108:level_sensor.c ****         SD_write("data.txt", "a+", " ");
 439              		.loc 1 108 0
 440 00ba 104A     		ldr	r2, .L27+36
 441 00bc 0C49     		ldr	r1, .L27+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 11


 442 00be 0D48     		ldr	r0, .L27+28
 443 00c0 FFF7FEFF 		bl	SD_write
 444 00c4 03E0     		b	.L25
 445              	.L24:
 109:level_sensor.c ****     }else{
 110:level_sensor.c ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 446              		.loc 1 110 0
 447 00c6 0E49     		ldr	r1, .L27+40
 448 00c8 0220     		movs	r0, #2
 449 00ca FFF7FEFF 		bl	printNotif
 450              	.L25:
 111:level_sensor.c ****         //pushData("maxbotix_depth","error",timeStamp);
 112:level_sensor.c ****     }
 113:level_sensor.c ****     
 114:level_sensor.c ****     
 115:level_sensor.c ****     
 116:level_sensor.c ****     return 0;
 451              		.loc 1 116 0
 452 00ce 0023     		movs	r3, #0
 453              	.L26:
 117:level_sensor.c **** }
 454              		.loc 1 117 0 discriminator 1
 455 00d0 1846     		mov	r0, r3
 456 00d2 5837     		adds	r7, r7, #88
 457              		.cfi_def_cfa_offset 8
 458 00d4 BD46     		mov	sp, r7
 459              		.cfi_def_cfa_register 13
 460              		@ sp needed
 461 00d6 80BD     		pop	{r7, pc}
 462              	.L28:
 463              		.align	2
 464              	.L27:
 465 00d8 00000000 		.word	.LC0
 466 00dc 00000000 		.word	app_led_inbox
 467 00e0 04000000 		.word	.LC1
 468 00e4 08000000 		.word	.LC2
 469 00e8 0C000000 		.word	.LC3
 470 00ec 20000000 		.word	.LC4
 471 00f0 30000000 		.word	.LC5
 472 00f4 34000000 		.word	.LC6
 473 00f8 40000000 		.word	.LC7
 474 00fc 54000000 		.word	.LC8
 475 0100 58000000 		.word	.LC9
 476              		.cfi_endproc
 477              	.LFE69:
 478              		.size	level_sensor, .-level_sensor
 479              		.section	.rodata
 480              		.align	2
 481              	.LC10:
 482 0084 5200     		.ascii	"R\000"
 483              		.section	.text.level_sensor_take_reading,"ax",%progbits
 484              		.align	2
 485              		.global	level_sensor_take_reading
 486              		.thumb
 487              		.thumb_func
 488              		.type	level_sensor_take_reading, %function
 489              	level_sensor_take_reading:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 12


 490              	.LFB70:
 118:level_sensor.c **** 
 119:level_sensor.c **** // takes level sensor measurements and calculates average level sensor reading
 120:level_sensor.c **** level_sensor_t level_sensor_take_reading(){
 491              		.loc 1 120 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 40
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495 0000 B0B5     		push	{r4, r5, r7, lr}
 496              		.cfi_def_cfa_offset 16
 497              		.cfi_offset 4, -16
 498              		.cfi_offset 5, -12
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 8AB0     		sub	sp, sp, #40
 502              		.cfi_def_cfa_offset 56
 503 0004 00AF     		add	r7, sp, #0
 504              		.cfi_def_cfa_register 7
 505 0006 7860     		str	r0, [r7, #4]
 121:level_sensor.c ****     
 122:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 123:level_sensor.c ****     level_sensor_t level_sensor_output;
 124:level_sensor.c ****     level_sensor_output.num_invalid_readings = 0;
 506              		.loc 1 124 0
 507 0008 0023     		movs	r3, #0
 508 000a 87F82130 		strb	r3, [r7, #33]
 125:level_sensor.c ****     level_sensor_output.num_valid_readings = 0;
 509              		.loc 1 125 0
 510 000e 0023     		movs	r3, #0
 511 0010 87F82030 		strb	r3, [r7, #32]
 126:level_sensor.c ****     
 127:level_sensor.c ****     uart_clear();
 512              		.loc 1 127 0
 513 0014 FFF7FEFF 		bl	uart_clear
 128:level_sensor.c ****     
 129:level_sensor.c ****     // Start sensor power, uart, and isr
 130:level_sensor.c ****     Level_Sensor_Power_Write(ON);   // Pulls Level Sensor power pin high (turns it on).
 514              		.loc 1 130 0
 515 0018 0120     		movs	r0, #1
 516 001a FFF7FEFF 		bl	Level_Sensor_Power_Write
 131:level_sensor.c ****     CyDelay(200u); // Sensor bootup sequence ~200ms -- senosor will spit out ID info, but we don't 
 517              		.loc 1 131 0
 518 001e C820     		movs	r0, #200
 519 0020 FFF7FEFF 		bl	CyDelay
 132:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_DIG_HIZ); // RX_SetDriveMode(): Sets the drive mode for eac
 520              		.loc 1 132 0
 521 0024 0220     		movs	r0, #2
 522 0026 FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
 133:level_sensor.c ****     Level_Sensor_UART_Start(); // Level_Sensor_UART_Start() sets the initVar variable, calls the Le
 523              		.loc 1 133 0
 524 002a FFF7FEFF 		bl	Level_Sensor_UART_Start
 134:level_sensor.c ****     Level_Sensor_ISR_StartEx(Level_Sensor_ISR); // Sets up the interrupt and enables it.
 525              		.loc 1 134 0
 526 002e 3848     		ldr	r0, .L38
 527 0030 FFF7FEFF 		bl	Level_Sensor_ISR_StartEx
 135:level_sensor.c ****     
 136:level_sensor.c ****     // Wait to take  reading
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 13


 137:level_sensor.c ****     // Sensor will take ~200ms to send first reading, and 200ms for subsequent readings
 138:level_sensor.c ****     CyDelay(2000u); // Take a few seconds to get readings, 2 secs ~10 readings
 528              		.loc 1 138 0
 529 0034 4FF4FA60 		mov	r0, #2000
 530 0038 FFF7FEFF 		bl	CyDelay
 139:level_sensor.c ****     
 140:level_sensor.c ****     //stop all sensor processes
 141:level_sensor.c ****     Level_Sensor_UART_Stop(); // Disables the UART operation.
 531              		.loc 1 141 0
 532 003c FFF7FEFF 		bl	Level_Sensor_UART_Stop
 142:level_sensor.c ****     Level_Sensor_ISR_Stop(); // Disables and removes the interrupt.
 533              		.loc 1 142 0
 534 0040 FFF7FEFF 		bl	Level_Sensor_ISR_Stop
 143:level_sensor.c ****     Level_Sensor_Power_Write(OFF); // Pulls Level Sensor Power pin low (turns it off).
 535              		.loc 1 143 0
 536 0044 0020     		movs	r0, #0
 537 0046 FFF7FEFF 		bl	Level_Sensor_Power_Write
 144:level_sensor.c ****     // RX_SetDriveMode(): Sets the drive mode for each of the Pins component's pins.
 145:level_sensor.c ****     // String Drive Mode means it will only be outputting a voltage (don't send any data) when pull
 146:level_sensor.c ****     // UART in PSOC starts high. Then pulls low to get data. When turn sensor off, still using powe
 147:level_sensor.c ****     // So turning it to Strong Drive has it stay low.
 148:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_STRONG);
 538              		.loc 1 148 0
 539 004a 0C20     		movs	r0, #12
 540 004c FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
 149:level_sensor.c ****     // Stops writing the value to the physical port.
 150:level_sensor.c ****     // Just because turn power of sensor off, pin could still be high and getting power. This ensur
 151:level_sensor.c ****     Level_Sensor_RX_Write(OFF);
 541              		.loc 1 151 0
 542 0050 0020     		movs	r0, #0
 543 0052 FFF7FEFF 		bl	Level_Sensor_RX_Write
 152:level_sensor.c **** 
 153:level_sensor.c ****     /* Return parsed reading */
 154:level_sensor.c ****     // Parse string and put all values into array
 155:level_sensor.c ****     // The sensor will power on and do a few things, after which the readigs will follow with the s
 156:level_sensor.c ****     // Readings are stashed between "R" and "\000"
 157:level_sensor.c ****     char *token;
 158:level_sensor.c ****     // strtok(): breaks uart_chars into smaller string when sees "R".
 159:level_sensor.c ****     token = strtok(uart_chars, "R");
 544              		.loc 1 159 0
 545 0056 2F49     		ldr	r1, .L38+4
 546 0058 2F48     		ldr	r0, .L38+8
 547 005a FFF7FEFF 		bl	strtok
 548 005e 7862     		str	r0, [r7, #36]
 160:level_sensor.c ****     /* walk through other tokens */
 161:level_sensor.c ****    while( token != NULL ) 
 549              		.loc 1 161 0
 550 0060 33E0     		b	.L30
 551              	.L35:
 162:level_sensor.c ****    {
 163:level_sensor.c ****       if(strstr(token, "\r") != NULL){ // Full reading is delimieted by "R" + reading + "\r"
 552              		.loc 1 163 0
 553 0062 0D21     		movs	r1, #13
 554 0064 786A     		ldr	r0, [r7, #36]
 555 0066 FFF7FEFF 		bl	strchr
 556 006a 0346     		mov	r3, r0
 557 006c 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 14


 558 006e 27D0     		beq	.L31
 559              	.LBB2:
 164:level_sensor.c ****         // int atoi(const char *str) converts the string argument str to an integer (type int).
 165:level_sensor.c ****         uint16 reading = atoi(token);
 560              		.loc 1 165 0
 561 0070 786A     		ldr	r0, [r7, #36]
 562 0072 FFF7FEFF 		bl	atoi
 563 0076 0346     		mov	r3, r0
 564 0078 7B84     		strh	r3, [r7, #34]	@ movhi
 166:level_sensor.c ****         if(reading != 0){
 565              		.loc 1 166 0
 566 007a 7B8C     		ldrh	r3, [r7, #34]
 567 007c 002B     		cmp	r3, #0
 568 007e 1FD0     		beq	.L31
 167:level_sensor.c ****             if(reading != READING_INVALID){ // Invald readings by maxbotix
 569              		.loc 1 167 0
 570 0080 7B8C     		ldrh	r3, [r7, #34]
 571 0082 42F20F72 		movw	r2, #9999
 572 0086 9342     		cmp	r3, r2
 573 0088 14D0     		beq	.L32
 168:level_sensor.c ****                 // Set the level readings array of the length of number of valid readings equal to 
 169:level_sensor.c ****                 level_sensor_output.all_level_readings[level_sensor_output.num_valid_readings] = re
 574              		.loc 1 169 0
 575 008a 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 576 008e B7F92220 		ldrsh	r2, [r7, #34]
 577 0092 5B00     		lsls	r3, r3, #1
 578 0094 07F12801 		add	r1, r7, #40
 579 0098 0B44     		add	r3, r3, r1
 580 009a 23F8202C 		strh	r2, [r3, #-32]	@ movhi
 170:level_sensor.c ****                 // If number of valid readings less than 11 total readings, increase the count of v
 171:level_sensor.c ****                 if(level_sensor_output.num_valid_readings < N_READINGS){
 581              		.loc 1 171 0
 582 009e 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 583 00a2 0A2B     		cmp	r3, #10
 584 00a4 15D8     		bhi	.L37
 172:level_sensor.c ****                     level_sensor_output.num_valid_readings++;
 585              		.loc 1 172 0
 586 00a6 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 587 00aa 0133     		adds	r3, r3, #1
 588 00ac DBB2     		uxtb	r3, r3
 589 00ae 87F82030 		strb	r3, [r7, #32]
 590 00b2 05E0     		b	.L31
 591              	.L32:
 173:level_sensor.c ****                 }else{
 174:level_sensor.c ****                  break;   
 175:level_sensor.c ****                 }
 176:level_sensor.c ****                 
 177:level_sensor.c ****             }else{
 178:level_sensor.c ****                 // Otherwise increase the count of invalid readings
 179:level_sensor.c ****                 level_sensor_output.num_invalid_readings++;
 592              		.loc 1 179 0
 593 00b4 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 594 00b8 0133     		adds	r3, r3, #1
 595 00ba DBB2     		uxtb	r3, r3
 596 00bc 87F82130 		strb	r3, [r7, #33]
 597              	.L31:
 598              	.LBE2:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 15


 180:level_sensor.c ****             }
 181:level_sensor.c ****         }
 182:level_sensor.c ****       }
 183:level_sensor.c ****       token = strtok(NULL, "R"); // This "NULL" says to continue where you left off last time.
 599              		.loc 1 183 0
 600 00c0 1449     		ldr	r1, .L38+4
 601 00c2 0020     		movs	r0, #0
 602 00c4 FFF7FEFF 		bl	strtok
 603 00c8 7862     		str	r0, [r7, #36]
 604              	.L30:
 161:level_sensor.c ****    {
 605              		.loc 1 161 0
 606 00ca 7B6A     		ldr	r3, [r7, #36]
 607 00cc 002B     		cmp	r3, #0
 608 00ce C8D1     		bne	.L35
 609 00d0 00E0     		b	.L34
 610              	.L37:
 611              	.LBB3:
 174:level_sensor.c ****                 }
 612              		.loc 1 174 0
 613 00d2 00BF     		nop
 614              	.L34:
 615              	.LBE3:
 184:level_sensor.c ****    }
 185:level_sensor.c ****     // Calculate median level reading
 186:level_sensor.c ****     level_sensor_output.level_reading = find_median(level_sensor_output.all_level_readings,level_se
 616              		.loc 1 186 0
 617 00d4 97F82020 		ldrb	r2, [r7, #32]	@ zero_extendqisi2
 618 00d8 07F10803 		add	r3, r7, #8
 619 00dc 1146     		mov	r1, r2
 620 00de 1846     		mov	r0, r3
 621 00e0 FFF7FEFF 		bl	find_median
 622 00e4 0346     		mov	r3, r0
 623 00e6 1BB2     		sxth	r3, r3
 624 00e8 FB83     		strh	r3, [r7, #30]	@ movhi
 187:level_sensor.c ****     
 188:level_sensor.c ****     return level_sensor_output;
 625              		.loc 1 188 0
 626 00ea 7B68     		ldr	r3, [r7, #4]
 627 00ec 1D46     		mov	r5, r3
 628 00ee 07F10804 		add	r4, r7, #8
 629 00f2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 630 00f4 2860     		str	r0, [r5]	@ unaligned
 631 00f6 6960     		str	r1, [r5, #4]	@ unaligned
 632 00f8 AA60     		str	r2, [r5, #8]	@ unaligned
 633 00fa EB60     		str	r3, [r5, #12]	@ unaligned
 634 00fc 03CC     		ldmia	r4!, {r0, r1}
 635 00fe 2861     		str	r0, [r5, #16]	@ unaligned
 636 0100 6961     		str	r1, [r5, #20]	@ unaligned
 637 0102 2388     		ldrh	r3, [r4]	@ unaligned
 638 0104 2B83     		strh	r3, [r5, #24]	@ unaligned
 189:level_sensor.c **** }
 639              		.loc 1 189 0
 640 0106 7868     		ldr	r0, [r7, #4]
 641 0108 2837     		adds	r7, r7, #40
 642              		.cfi_def_cfa_offset 16
 643 010a BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 16


 644              		.cfi_def_cfa_register 13
 645              		@ sp needed
 646 010c B0BD     		pop	{r4, r5, r7, pc}
 647              	.L39:
 648 010e 00BF     		.align	2
 649              	.L38:
 650 0110 00000000 		.word	Level_Sensor_ISR
 651 0114 84000000 		.word	.LC10
 652 0118 00000000 		.word	uart_chars
 653              		.cfi_endproc
 654              	.LFE70:
 655              		.size	level_sensor_take_reading, .-level_sensor_take_reading
 656              		.section	.rodata
 657 0086 0000     		.align	2
 658              	.LC11:
 659 0088 54455354 		.ascii	"TEST_LEVEL_SENSOR\000"
 659      5F4C4556 
 659      454C5F53 
 659      454E534F 
 659      5200
 660 009a 0000     		.align	2
 661              	.LC12:
 662 009c 6E57414E 		.ascii	"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.\000"
 662      5445443D 
 662      25642C6E 
 662      52454345 
 662      49564544 
 663              		.section	.text.level_sensor_test,"ax",%progbits
 664              		.align	2
 665              		.global	level_sensor_test
 666              		.thumb
 667              		.thumb_func
 668              		.type	level_sensor_test, %function
 669              	level_sensor_test:
 670              	.LFB71:
 190:level_sensor.c **** 
 191:level_sensor.c **** // Level sensor test
 192:level_sensor.c **** test_t level_sensor_test(){
 671              		.loc 1 192 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 424
 674              		@ frame_needed = 1, uses_anonymous_args = 0
 675 0000 B0B5     		push	{r4, r5, r7, lr}
 676              		.cfi_def_cfa_offset 16
 677              		.cfi_offset 4, -16
 678              		.cfi_offset 5, -12
 679              		.cfi_offset 7, -8
 680              		.cfi_offset 14, -4
 681 0002 EEB0     		sub	sp, sp, #440
 682              		.cfi_def_cfa_offset 456
 683 0004 04AF     		add	r7, sp, #16
 684              		.cfi_def_cfa 7, 440
 685 0006 3B1D     		adds	r3, r7, #4
 686 0008 1860     		str	r0, [r3]
 193:level_sensor.c ****     
 194:level_sensor.c ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 195:level_sensor.c ****     test.status = 0; // set test status to zero
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 17


 687              		.loc 1 195 0
 688 000a 07F12403 		add	r3, r7, #36
 689 000e 0022     		movs	r2, #0
 690 0010 83F88020 		strb	r2, [r3, #128]
 196:level_sensor.c ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_LEVEL_SENSOR");
 691              		.loc 1 196 0
 692 0014 07F12403 		add	r3, r7, #36
 693 0018 2A4A     		ldr	r2, .L44
 694 001a 1C46     		mov	r4, r3
 695 001c 1546     		mov	r5, r2
 696 001e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 697 0020 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 698 0022 2B68     		ldr	r3, [r5]
 699 0024 2380     		strh	r3, [r4]	@ movhi
 197:level_sensor.c **** 
 198:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 199:level_sensor.c ****     level_sensor_t sensor = level_sensor_take_reading();
 700              		.loc 1 199 0
 701 0026 07F10803 		add	r3, r7, #8
 702 002a 1846     		mov	r0, r3
 703 002c FFF7FEFF 		bl	level_sensor_take_reading
 200:level_sensor.c ****     
 201:level_sensor.c ****     // print the max number of readings (11), the number of actual readings, the number of valid re
 202:level_sensor.c ****     snprintf(test.reason,sizeof(test.reason),"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.",
 203:level_sensor.c ****         N_READINGS,
 204:level_sensor.c ****         sensor.num_valid_readings+sensor.num_invalid_readings,
 704              		.loc 1 204 0
 705 0030 07F10803 		add	r3, r7, #8
 706 0034 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 202:level_sensor.c ****         N_READINGS,
 707              		.loc 1 202 0
 708 0036 1A46     		mov	r2, r3
 709              		.loc 1 204 0
 710 0038 07F10803 		add	r3, r7, #8
 711 003c 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 202:level_sensor.c ****         N_READINGS,
 712              		.loc 1 202 0
 713 003e 1344     		add	r3, r3, r2
 205:level_sensor.c ****         sensor.num_valid_readings,
 714              		.loc 1 205 0
 715 0040 07F10802 		add	r2, r7, #8
 716 0044 127E     		ldrb	r2, [r2, #24]	@ zero_extendqisi2
 202:level_sensor.c ****         N_READINGS,
 717              		.loc 1 202 0
 718 0046 1146     		mov	r1, r2
 206:level_sensor.c ****         sensor.level_reading
 719              		.loc 1 206 0
 720 0048 07F10802 		add	r2, r7, #8
 721 004c B2F91620 		ldrsh	r2, [r2, #22]
 202:level_sensor.c ****         N_READINGS,
 722              		.loc 1 202 0
 723 0050 1446     		mov	r4, r2
 724 0052 07F12402 		add	r2, r7, #36
 725 0056 02F18100 		add	r0, r2, #129
 726 005a 0294     		str	r4, [sp, #8]
 727 005c 0191     		str	r1, [sp, #4]
 728 005e 0093     		str	r3, [sp]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 18


 729 0060 0B23     		movs	r3, #11
 730 0062 194A     		ldr	r2, .L44+4
 731 0064 4FF48071 		mov	r1, #256
 732 0068 FFF7FEFF 		bl	snprintf
 207:level_sensor.c ****     );
 208:level_sensor.c ****    
 209:level_sensor.c ****     // if the number valid readings is the max number of readings (11), then the test passes with t
 210:level_sensor.c ****     if(sensor.num_valid_readings == N_READINGS){//pass
 733              		.loc 1 210 0
 734 006c 07F10803 		add	r3, r7, #8
 735 0070 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 736 0072 0B2B     		cmp	r3, #11
 737 0074 05D1     		bne	.L41
 211:level_sensor.c ****         test.status = 1;
 738              		.loc 1 211 0
 739 0076 07F12403 		add	r3, r7, #36
 740 007a 0122     		movs	r2, #1
 741 007c 83F88020 		strb	r2, [r3, #128]
 742 0080 0EE0     		b	.L42
 743              	.L41:
 212:level_sensor.c ****     // if the number of valid readings is greater than zero and less than the max number of reading
 213:level_sensor.c ****     }else if((sensor.num_valid_readings > 0) && (sensor.num_valid_readings < N_READINGS)){//pass
 744              		.loc 1 213 0
 745 0082 07F10803 		add	r3, r7, #8
 746 0086 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 747 0088 002B     		cmp	r3, #0
 748 008a 09D0     		beq	.L42
 749              		.loc 1 213 0 is_stmt 0 discriminator 1
 750 008c 07F10803 		add	r3, r7, #8
 751 0090 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 752 0092 0A2B     		cmp	r3, #10
 753 0094 04D8     		bhi	.L42
 214:level_sensor.c ****         test.status = 2; //not bad, since we got some OK readings
 754              		.loc 1 214 0 is_stmt 1
 755 0096 07F12403 		add	r3, r7, #36
 756 009a 0222     		movs	r2, #2
 757 009c 83F88020 		strb	r2, [r3, #128]
 758              	.L42:
 215:level_sensor.c ****     }
 216:level_sensor.c ****         
 217:level_sensor.c ****     return test;
 759              		.loc 1 217 0
 760 00a0 3B1D     		adds	r3, r7, #4
 761 00a2 1A68     		ldr	r2, [r3]
 762 00a4 07F12403 		add	r3, r7, #36
 763 00a8 1046     		mov	r0, r2
 764 00aa 1946     		mov	r1, r3
 765 00ac 40F28113 		movw	r3, #385
 766 00b0 1A46     		mov	r2, r3
 767 00b2 FFF7FEFF 		bl	memcpy
 218:level_sensor.c **** }
 768              		.loc 1 218 0
 769 00b6 3B1D     		adds	r3, r7, #4
 770 00b8 1868     		ldr	r0, [r3]
 771 00ba 07F5D477 		add	r7, r7, #424
 772              		.cfi_def_cfa_offset 16
 773 00be BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 19


 774              		.cfi_def_cfa_register 13
 775              		@ sp needed
 776 00c0 B0BD     		pop	{r4, r5, r7, pc}
 777              	.L45:
 778 00c2 00BF     		.align	2
 779              	.L44:
 780 00c4 88000000 		.word	.LC11
 781 00c8 9C000000 		.word	.LC12
 782              		.cfi_endproc
 783              	.LFE71:
 784              		.size	level_sensor_test, .-level_sensor_test
 785              		.global	__aeabi_i2d
 786              		.global	__aeabi_ddiv
 787              		.global	__aeabi_d2iz
 788              		.section	.text.find_median,"ax",%progbits
 789              		.align	2
 790              		.global	find_median
 791              		.thumb
 792              		.thumb_func
 793              		.type	find_median, %function
 794              	find_median:
 795              	.LFB72:
 219:level_sensor.c **** 
 220:level_sensor.c **** 
 221:level_sensor.c **** // function to calculate the median of the array, after array is sorted
 222:level_sensor.c **** uint16 find_median(int16 array[] , uint8 n)
 223:level_sensor.c **** {
 796              		.loc 1 223 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 16
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0000 90B5     		push	{r4, r7, lr}
 801              		.cfi_def_cfa_offset 12
 802              		.cfi_offset 4, -12
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 85B0     		sub	sp, sp, #20
 806              		.cfi_def_cfa_offset 32
 807 0004 00AF     		add	r7, sp, #0
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 810 0008 0B46     		mov	r3, r1
 811 000a FB70     		strb	r3, [r7, #3]
 224:level_sensor.c ****     int16 median=0;
 812              		.loc 1 224 0
 813 000c 0023     		movs	r3, #0
 814 000e FB81     		strh	r3, [r7, #14]	@ movhi
 225:level_sensor.c ****     sort(array,n);
 815              		.loc 1 225 0
 816 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 817 0012 1BB2     		sxth	r3, r3
 818 0014 1946     		mov	r1, r3
 819 0016 7868     		ldr	r0, [r7, #4]
 820 0018 FFF7FEFF 		bl	sort
 226:level_sensor.c ****     
 227:level_sensor.c ****     // if number of elements are even
 228:level_sensor.c ****     if(n%2 == 0)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 20


 821              		.loc 1 228 0
 822 001c FB78     		ldrb	r3, [r7, #3]
 823 001e 03F00103 		and	r3, r3, #1
 824 0022 DBB2     		uxtb	r3, r3
 825 0024 002B     		cmp	r3, #0
 826 0026 25D1     		bne	.L47
 229:level_sensor.c ****         // median is the average of the  two middle sorted numbers
 230:level_sensor.c ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 827              		.loc 1 230 0
 828 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 829 002a 013B     		subs	r3, r3, #1
 830 002c DA0F     		lsrs	r2, r3, #31
 831 002e 1344     		add	r3, r3, r2
 832 0030 5B10     		asrs	r3, r3, #1
 833 0032 5B00     		lsls	r3, r3, #1
 834 0034 7A68     		ldr	r2, [r7, #4]
 835 0036 1344     		add	r3, r3, r2
 836 0038 B3F90030 		ldrsh	r3, [r3]
 837 003c 1946     		mov	r1, r3
 838 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 839 0040 5B08     		lsrs	r3, r3, #1
 840 0042 DBB2     		uxtb	r3, r3
 841 0044 5B00     		lsls	r3, r3, #1
 842 0046 7A68     		ldr	r2, [r7, #4]
 843 0048 1344     		add	r3, r3, r2
 844 004a B3F90030 		ldrsh	r3, [r3]
 845 004e 0B44     		add	r3, r3, r1
 846 0050 1846     		mov	r0, r3
 847 0052 FFF7FEFF 		bl	__aeabi_i2d
 848 0056 4FF00002 		mov	r2, #0
 849 005a 4FF08043 		mov	r3, #1073741824
 850 005e FFF7FEFF 		bl	__aeabi_ddiv
 851 0062 0346     		mov	r3, r0
 852 0064 0C46     		mov	r4, r1
 853 0066 1846     		mov	r0, r3
 854 0068 2146     		mov	r1, r4
 855 006a FFF7FEFF 		bl	__aeabi_d2iz
 856 006e 0346     		mov	r3, r0
 857 0070 FB81     		strh	r3, [r7, #14]	@ movhi
 858 0072 07E0     		b	.L48
 859              	.L47:
 231:level_sensor.c ****     // if number of elements are odd
 232:level_sensor.c ****     else
 233:level_sensor.c ****         // median is the the middle sorted number 
 234:level_sensor.c ****         median = array[n/2];
 860              		.loc 1 234 0
 861 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 862 0076 5B08     		lsrs	r3, r3, #1
 863 0078 DBB2     		uxtb	r3, r3
 864 007a 5B00     		lsls	r3, r3, #1
 865 007c 7A68     		ldr	r2, [r7, #4]
 866 007e 1344     		add	r3, r3, r2
 867 0080 1B88     		ldrh	r3, [r3]	@ movhi
 868 0082 FB81     		strh	r3, [r7, #14]	@ movhi
 869              	.L48:
 235:level_sensor.c ****     
 236:level_sensor.c ****     return median;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 21


 870              		.loc 1 236 0
 871 0084 FB89     		ldrh	r3, [r7, #14]
 237:level_sensor.c **** }
 872              		.loc 1 237 0
 873 0086 1846     		mov	r0, r3
 874 0088 1437     		adds	r7, r7, #20
 875              		.cfi_def_cfa_offset 12
 876 008a BD46     		mov	sp, r7
 877              		.cfi_def_cfa_register 13
 878              		@ sp needed
 879 008c 90BD     		pop	{r4, r7, pc}
 880              		.cfi_endproc
 881              	.LFE72:
 882              		.size	find_median, .-find_median
 883              		.section	.text.sort,"ax",%progbits
 884              		.align	2
 885              		.global	sort
 886              		.thumb
 887              		.thumb_func
 888              		.type	sort, %function
 889              	sort:
 890              	.LFB73:
 238:level_sensor.c **** 
 239:level_sensor.c **** // function to sort the elements in the level readings array
 240:level_sensor.c **** void sort(int16 a[],int16 n) { 
 891              		.loc 1 240 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 16
 894              		@ frame_needed = 1, uses_anonymous_args = 0
 895 0000 80B5     		push	{r7, lr}
 896              		.cfi_def_cfa_offset 8
 897              		.cfi_offset 7, -8
 898              		.cfi_offset 14, -4
 899 0002 84B0     		sub	sp, sp, #16
 900              		.cfi_def_cfa_offset 24
 901 0004 00AF     		add	r7, sp, #0
 902              		.cfi_def_cfa_register 7
 903 0006 7860     		str	r0, [r7, #4]
 904 0008 0B46     		mov	r3, r1
 905 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 241:level_sensor.c ****    int16 i,j;
 242:level_sensor.c **** 
 243:level_sensor.c ****    for(i = 0;i < n-1;i++) {
 906              		.loc 1 243 0
 907 000c 0023     		movs	r3, #0
 908 000e FB81     		strh	r3, [r7, #14]	@ movhi
 909 0010 37E0     		b	.L51
 910              	.L55:
 244:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 911              		.loc 1 244 0
 912 0012 0023     		movs	r3, #0
 913 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 914 0016 24E0     		b	.L52
 915              	.L54:
 245:level_sensor.c ****          if(a[j] > a[j+1])
 916              		.loc 1 245 0
 917 0018 B7F90C30 		ldrsh	r3, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 22


 918 001c 5B00     		lsls	r3, r3, #1
 919 001e 7A68     		ldr	r2, [r7, #4]
 920 0020 1344     		add	r3, r3, r2
 921 0022 B3F90020 		ldrsh	r2, [r3]
 922 0026 B7F90C30 		ldrsh	r3, [r7, #12]
 923 002a 0133     		adds	r3, r3, #1
 924 002c 5B00     		lsls	r3, r3, #1
 925 002e 7968     		ldr	r1, [r7, #4]
 926 0030 0B44     		add	r3, r3, r1
 927 0032 B3F90030 		ldrsh	r3, [r3]
 928 0036 9A42     		cmp	r2, r3
 929 0038 0DDD     		ble	.L53
 246:level_sensor.c ****             swap(&a[j],&a[j+1]); // swap the address of a[j] and a[j+1]
 930              		.loc 1 246 0
 931 003a B7F90C30 		ldrsh	r3, [r7, #12]
 932 003e 5B00     		lsls	r3, r3, #1
 933 0040 7A68     		ldr	r2, [r7, #4]
 934 0042 D018     		adds	r0, r2, r3
 935 0044 B7F90C30 		ldrsh	r3, [r7, #12]
 936 0048 0133     		adds	r3, r3, #1
 937 004a 5B00     		lsls	r3, r3, #1
 938 004c 7A68     		ldr	r2, [r7, #4]
 939 004e 1344     		add	r3, r3, r2
 940 0050 1946     		mov	r1, r3
 941 0052 FFF7FEFF 		bl	swap
 942              	.L53:
 244:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 943              		.loc 1 244 0 discriminator 2
 944 0056 B7F90C30 		ldrsh	r3, [r7, #12]
 945 005a 9BB2     		uxth	r3, r3
 946 005c 0133     		adds	r3, r3, #1
 947 005e 9BB2     		uxth	r3, r3
 948 0060 BB81     		strh	r3, [r7, #12]	@ movhi
 949              	.L52:
 244:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 950              		.loc 1 244 0 is_stmt 0 discriminator 1
 951 0062 B7F90C20 		ldrsh	r2, [r7, #12]
 952 0066 B7F90210 		ldrsh	r1, [r7, #2]
 953 006a B7F90E30 		ldrsh	r3, [r7, #14]
 954 006e CB1A     		subs	r3, r1, r3
 955 0070 013B     		subs	r3, r3, #1
 956 0072 9A42     		cmp	r2, r3
 957 0074 D0DB     		blt	.L54
 243:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 958              		.loc 1 243 0 is_stmt 1 discriminator 2
 959 0076 B7F90E30 		ldrsh	r3, [r7, #14]
 960 007a 9BB2     		uxth	r3, r3
 961 007c 0133     		adds	r3, r3, #1
 962 007e 9BB2     		uxth	r3, r3
 963 0080 FB81     		strh	r3, [r7, #14]	@ movhi
 964              	.L51:
 243:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 965              		.loc 1 243 0 is_stmt 0 discriminator 1
 966 0082 B7F90E20 		ldrsh	r2, [r7, #14]
 967 0086 B7F90230 		ldrsh	r3, [r7, #2]
 968 008a 013B     		subs	r3, r3, #1
 969 008c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 23


 970 008e C0DB     		blt	.L55
 247:level_sensor.c ****       }
 248:level_sensor.c ****    }
 249:level_sensor.c **** }
 971              		.loc 1 249 0 is_stmt 1
 972 0090 00BF     		nop
 973 0092 1037     		adds	r7, r7, #16
 974              		.cfi_def_cfa_offset 8
 975 0094 BD46     		mov	sp, r7
 976              		.cfi_def_cfa_register 13
 977              		@ sp needed
 978 0096 80BD     		pop	{r7, pc}
 979              		.cfi_endproc
 980              	.LFE73:
 981              		.size	sort, .-sort
 982              		.section	.text.swap,"ax",%progbits
 983              		.align	2
 984              		.global	swap
 985              		.thumb
 986              		.thumb_func
 987              		.type	swap, %function
 988              	swap:
 989              	.LFB74:
 250:level_sensor.c **** 
 251:level_sensor.c **** // function to swap elements in the level readings array in order to sort them
 252:level_sensor.c **** void swap(int16 *p,int16 *q) {
 990              		.loc 1 252 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 16
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995 0000 80B4     		push	{r7}
 996              		.cfi_def_cfa_offset 4
 997              		.cfi_offset 7, -4
 998 0002 85B0     		sub	sp, sp, #20
 999              		.cfi_def_cfa_offset 24
 1000 0004 00AF     		add	r7, sp, #0
 1001              		.cfi_def_cfa_register 7
 1002 0006 7860     		str	r0, [r7, #4]
 1003 0008 3960     		str	r1, [r7]
 253:level_sensor.c ****    int16 t;
 254:level_sensor.c ****    
 255:level_sensor.c ****    t=*p; 
 1004              		.loc 1 255 0
 1005 000a 7B68     		ldr	r3, [r7, #4]
 1006 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1007 000e FB81     		strh	r3, [r7, #14]	@ movhi
 256:level_sensor.c ****    *p=*q; 
 1008              		.loc 1 256 0
 1009 0010 3B68     		ldr	r3, [r7]
 1010 0012 B3F90020 		ldrsh	r2, [r3]
 1011 0016 7B68     		ldr	r3, [r7, #4]
 1012 0018 1A80     		strh	r2, [r3]	@ movhi
 257:level_sensor.c ****    *q=t;
 1013              		.loc 1 257 0
 1014 001a 3B68     		ldr	r3, [r7]
 1015 001c FA89     		ldrh	r2, [r7, #14]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 24


 1016 001e 1A80     		strh	r2, [r3]	@ movhi
 258:level_sensor.c **** }
 1017              		.loc 1 258 0
 1018 0020 00BF     		nop
 1019 0022 1437     		adds	r7, r7, #20
 1020              		.cfi_def_cfa_offset 4
 1021 0024 BD46     		mov	sp, r7
 1022              		.cfi_def_cfa_register 13
 1023              		@ sp needed
 1024 0026 80BC     		pop	{r7}
 1025              		.cfi_restore 7
 1026              		.cfi_def_cfa_offset 0
 1027 0028 7047     		bx	lr
 1028              		.cfi_endproc
 1029              	.LFE74:
 1030              		.size	swap, .-swap
 1031 002a 00BF     		.text
 1032              	.Letext0:
 1033              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1034              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1035              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1036              		.file 5 "testing.h"
 1037              		.file 6 "level_sensor.h"
 1038              		.file 7 "data.h"
 1039              		.file 8 "modem.h"
 1040              		.file 9 "notoriOS.h"
 1041              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1042              		.file 11 "App_LED.h"
 1043              		.section	.debug_info,"",%progbits
 1044              	.Ldebug_info0:
 1045 0000 64080000 		.4byte	0x864
 1046 0004 0400     		.2byte	0x4
 1047 0006 00000000 		.4byte	.Ldebug_abbrev0
 1048 000a 04       		.byte	0x4
 1049 000b 01       		.uleb128 0x1
 1050 000c 86000000 		.4byte	.LASF116
 1051 0010 0C       		.byte	0xc
 1052 0011 61010000 		.4byte	.LASF117
 1053 0015 1C000000 		.4byte	.LASF118
 1054 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 1055 001d 00000000 		.4byte	0
 1056 0021 00000000 		.4byte	.Ldebug_line0
 1057 0025 02       		.uleb128 0x2
 1058 0026 01       		.byte	0x1
 1059 0027 06       		.byte	0x6
 1060 0028 A3010000 		.4byte	.LASF0
 1061 002c 03       		.uleb128 0x3
 1062 002d 64000000 		.4byte	.LASF4
 1063 0031 02       		.byte	0x2
 1064 0032 1D       		.byte	0x1d
 1065 0033 37000000 		.4byte	0x37
 1066 0037 02       		.uleb128 0x2
 1067 0038 01       		.byte	0x1
 1068 0039 08       		.byte	0x8
 1069 003a 7F040000 		.4byte	.LASF1
 1070 003e 02       		.uleb128 0x2
 1071 003f 02       		.byte	0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 25


 1072 0040 05       		.byte	0x5
 1073 0041 52030000 		.4byte	.LASF2
 1074 0045 02       		.uleb128 0x2
 1075 0046 02       		.byte	0x2
 1076 0047 07       		.byte	0x7
 1077 0048 88050000 		.4byte	.LASF3
 1078 004c 03       		.uleb128 0x3
 1079 004d 54050000 		.4byte	.LASF5
 1080 0051 02       		.byte	0x2
 1081 0052 3F       		.byte	0x3f
 1082 0053 57000000 		.4byte	0x57
 1083 0057 02       		.uleb128 0x2
 1084 0058 04       		.byte	0x4
 1085 0059 05       		.byte	0x5
 1086 005a 1E020000 		.4byte	.LASF6
 1087 005e 02       		.uleb128 0x2
 1088 005f 04       		.byte	0x4
 1089 0060 07       		.byte	0x7
 1090 0061 FA020000 		.4byte	.LASF7
 1091 0065 02       		.uleb128 0x2
 1092 0066 08       		.byte	0x8
 1093 0067 05       		.byte	0x5
 1094 0068 95010000 		.4byte	.LASF8
 1095 006c 02       		.uleb128 0x2
 1096 006d 08       		.byte	0x8
 1097 006e 07       		.byte	0x7
 1098 006f 1F010000 		.4byte	.LASF9
 1099 0073 04       		.uleb128 0x4
 1100 0074 04       		.byte	0x4
 1101 0075 05       		.byte	0x5
 1102 0076 696E7400 		.ascii	"int\000"
 1103 007a 02       		.uleb128 0x2
 1104 007b 04       		.byte	0x4
 1105 007c 07       		.byte	0x7
 1106 007d CE020000 		.4byte	.LASF10
 1107 0081 03       		.uleb128 0x3
 1108 0082 18060000 		.4byte	.LASF11
 1109 0086 03       		.byte	0x3
 1110 0087 18       		.byte	0x18
 1111 0088 2C000000 		.4byte	0x2c
 1112 008c 03       		.uleb128 0x3
 1113 008d 77040000 		.4byte	.LASF12
 1114 0091 03       		.byte	0x3
 1115 0092 2C       		.byte	0x2c
 1116 0093 4C000000 		.4byte	0x4c
 1117 0097 02       		.uleb128 0x2
 1118 0098 08       		.byte	0x8
 1119 0099 04       		.byte	0x4
 1120 009a 2C050000 		.4byte	.LASF13
 1121 009e 02       		.uleb128 0x2
 1122 009f 04       		.byte	0x4
 1123 00a0 07       		.byte	0x7
 1124 00a1 CE030000 		.4byte	.LASF14
 1125 00a5 05       		.uleb128 0x5
 1126 00a6 04       		.byte	0x4
 1127 00a7 AB000000 		.4byte	0xab
 1128 00ab 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 26


 1129 00ac 01       		.byte	0x1
 1130 00ad 08       		.byte	0x8
 1131 00ae 44050000 		.4byte	.LASF15
 1132 00b2 05       		.uleb128 0x5
 1133 00b3 04       		.byte	0x4
 1134 00b4 B8000000 		.4byte	0xb8
 1135 00b8 06       		.uleb128 0x6
 1136 00b9 AB000000 		.4byte	0xab
 1137 00bd 07       		.uleb128 0x7
 1138 00be AB000000 		.4byte	0xab
 1139 00c2 CD000000 		.4byte	0xcd
 1140 00c6 08       		.uleb128 0x8
 1141 00c7 9E000000 		.4byte	0x9e
 1142 00cb 17       		.byte	0x17
 1143 00cc 00       		.byte	0
 1144 00cd 02       		.uleb128 0x2
 1145 00ce 08       		.byte	0x8
 1146 00cf 04       		.byte	0x4
 1147 00d0 52060000 		.4byte	.LASF16
 1148 00d4 02       		.uleb128 0x2
 1149 00d5 04       		.byte	0x4
 1150 00d6 04       		.byte	0x4
 1151 00d7 44040000 		.4byte	.LASF17
 1152 00db 09       		.uleb128 0x9
 1153 00dc 43020000 		.4byte	.LASF18
 1154 00e0 04       		.byte	0x4
 1155 00e1 9201     		.2byte	0x192
 1156 00e3 37000000 		.4byte	0x37
 1157 00e7 09       		.uleb128 0x9
 1158 00e8 00000000 		.4byte	.LASF19
 1159 00ec 04       		.byte	0x4
 1160 00ed 9301     		.2byte	0x193
 1161 00ef 45000000 		.4byte	0x45
 1162 00f3 09       		.uleb128 0x9
 1163 00f4 20060000 		.4byte	.LASF20
 1164 00f8 04       		.byte	0x4
 1165 00f9 9601     		.2byte	0x196
 1166 00fb 3E000000 		.4byte	0x3e
 1167 00ff 09       		.uleb128 0x9
 1168 0100 6A020000 		.4byte	.LASF21
 1169 0104 04       		.byte	0x4
 1170 0105 9701     		.2byte	0x197
 1171 0107 57000000 		.4byte	0x57
 1172 010b 0A       		.uleb128 0xa
 1173 010c 8101     		.2byte	0x181
 1174 010e 05       		.byte	0x5
 1175 010f 0A       		.byte	0xa
 1176 0110 39010000 		.4byte	0x139
 1177 0114 0B       		.uleb128 0xb
 1178 0115 D7030000 		.4byte	.LASF22
 1179 0119 05       		.byte	0x5
 1180 011a 0C       		.byte	0xc
 1181 011b 39010000 		.4byte	0x139
 1182 011f 00       		.byte	0
 1183 0120 0B       		.uleb128 0xb
 1184 0121 C2050000 		.4byte	.LASF23
 1185 0125 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 27


 1186 0126 0D       		.byte	0xd
 1187 0127 DB000000 		.4byte	0xdb
 1188 012b 80       		.byte	0x80
 1189 012c 0B       		.uleb128 0xb
 1190 012d D9040000 		.4byte	.LASF24
 1191 0131 05       		.byte	0x5
 1192 0132 0F       		.byte	0xf
 1193 0133 49010000 		.4byte	0x149
 1194 0137 81       		.byte	0x81
 1195 0138 00       		.byte	0
 1196 0139 07       		.uleb128 0x7
 1197 013a AB000000 		.4byte	0xab
 1198 013e 49010000 		.4byte	0x149
 1199 0142 08       		.uleb128 0x8
 1200 0143 9E000000 		.4byte	0x9e
 1201 0147 7F       		.byte	0x7f
 1202 0148 00       		.byte	0
 1203 0149 07       		.uleb128 0x7
 1204 014a AB000000 		.4byte	0xab
 1205 014e 59010000 		.4byte	0x159
 1206 0152 08       		.uleb128 0x8
 1207 0153 9E000000 		.4byte	0x9e
 1208 0157 FF       		.byte	0xff
 1209 0158 00       		.byte	0
 1210 0159 03       		.uleb128 0x3
 1211 015a 9D040000 		.4byte	.LASF25
 1212 015e 05       		.byte	0x5
 1213 015f 10       		.byte	0x10
 1214 0160 0B010000 		.4byte	0x10b
 1215 0164 0C       		.uleb128 0xc
 1216 0165 1A       		.byte	0x1a
 1217 0166 06       		.byte	0x6
 1218 0167 10       		.byte	0x10
 1219 0168 9D010000 		.4byte	0x19d
 1220 016c 0B       		.uleb128 0xb
 1221 016d 95020000 		.4byte	.LASF26
 1222 0171 06       		.byte	0x6
 1223 0172 11       		.byte	0x11
 1224 0173 9D010000 		.4byte	0x19d
 1225 0177 00       		.byte	0
 1226 0178 0B       		.uleb128 0xb
 1227 0179 7A050000 		.4byte	.LASF27
 1228 017d 06       		.byte	0x6
 1229 017e 12       		.byte	0x12
 1230 017f F3000000 		.4byte	0xf3
 1231 0183 16       		.byte	0x16
 1232 0184 0B       		.uleb128 0xb
 1233 0185 E7020000 		.4byte	.LASF28
 1234 0189 06       		.byte	0x6
 1235 018a 13       		.byte	0x13
 1236 018b DB000000 		.4byte	0xdb
 1237 018f 18       		.byte	0x18
 1238 0190 0B       		.uleb128 0xb
 1239 0191 07000000 		.4byte	.LASF29
 1240 0195 06       		.byte	0x6
 1241 0196 14       		.byte	0x14
 1242 0197 DB000000 		.4byte	0xdb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 28


 1243 019b 19       		.byte	0x19
 1244 019c 00       		.byte	0
 1245 019d 07       		.uleb128 0x7
 1246 019e F3000000 		.4byte	0xf3
 1247 01a2 AD010000 		.4byte	0x1ad
 1248 01a6 08       		.uleb128 0x8
 1249 01a7 9E000000 		.4byte	0x9e
 1250 01ab 0A       		.byte	0xa
 1251 01ac 00       		.byte	0
 1252 01ad 03       		.uleb128 0x3
 1253 01ae 5C040000 		.4byte	.LASF30
 1254 01b2 06       		.byte	0x6
 1255 01b3 15       		.byte	0x15
 1256 01b4 64010000 		.4byte	0x164
 1257 01b8 0C       		.uleb128 0xc
 1258 01b9 2C       		.byte	0x2c
 1259 01ba 07       		.byte	0x7
 1260 01bb 14       		.byte	0x14
 1261 01bc E5010000 		.4byte	0x1e5
 1262 01c0 0D       		.uleb128 0xd
 1263 01c1 6B657900 		.ascii	"key\000"
 1264 01c5 07       		.byte	0x7
 1265 01c6 15       		.byte	0x15
 1266 01c7 E5010000 		.4byte	0x1e5
 1267 01cb 00       		.byte	0
 1268 01cc 0B       		.uleb128 0xb
 1269 01cd BE020000 		.4byte	.LASF31
 1270 01d1 07       		.byte	0x7
 1271 01d2 16       		.byte	0x16
 1272 01d3 E5010000 		.4byte	0x1e5
 1273 01d7 14       		.byte	0x14
 1274 01d8 0B       		.uleb128 0xb
 1275 01d9 F8030000 		.4byte	.LASF32
 1276 01dd 07       		.byte	0x7
 1277 01de 17       		.byte	0x17
 1278 01df FF000000 		.4byte	0xff
 1279 01e3 28       		.byte	0x28
 1280 01e4 00       		.byte	0
 1281 01e5 07       		.uleb128 0x7
 1282 01e6 AB000000 		.4byte	0xab
 1283 01ea F5010000 		.4byte	0x1f5
 1284 01ee 08       		.uleb128 0x8
 1285 01ef 9E000000 		.4byte	0x9e
 1286 01f3 13       		.byte	0x13
 1287 01f4 00       		.byte	0
 1288 01f5 03       		.uleb128 0x3
 1289 01f6 DB020000 		.4byte	.LASF33
 1290 01fa 07       		.byte	0x7
 1291 01fb 19       		.byte	0x19
 1292 01fc B8010000 		.4byte	0x1b8
 1293 0200 0C       		.uleb128 0xc
 1294 0201 3C       		.byte	0x3c
 1295 0202 08       		.byte	0x8
 1296 0203 35       		.byte	0x35
 1297 0204 2D020000 		.4byte	0x22d
 1298 0208 0B       		.uleb128 0xb
 1299 0209 9B050000 		.4byte	.LASF34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 29


 1300 020d 08       		.byte	0x8
 1301 020e 36       		.byte	0x36
 1302 020f E5010000 		.4byte	0x1e5
 1303 0213 00       		.byte	0
 1304 0214 0B       		.uleb128 0xb
 1305 0215 8C020000 		.4byte	.LASF35
 1306 0219 08       		.byte	0x8
 1307 021a 37       		.byte	0x37
 1308 021b E5010000 		.4byte	0x1e5
 1309 021f 14       		.byte	0x14
 1310 0220 0B       		.uleb128 0xb
 1311 0221 D4040000 		.4byte	.LASF36
 1312 0225 08       		.byte	0x8
 1313 0226 38       		.byte	0x38
 1314 0227 E5010000 		.4byte	0x1e5
 1315 022b 28       		.byte	0x28
 1316 022c 00       		.byte	0
 1317 022d 03       		.uleb128 0x3
 1318 022e 0B020000 		.4byte	.LASF37
 1319 0232 08       		.byte	0x8
 1320 0233 3A       		.byte	0x3a
 1321 0234 00020000 		.4byte	0x200
 1322 0238 0C       		.uleb128 0xc
 1323 0239 20       		.byte	0x20
 1324 023a 08       		.byte	0x8
 1325 023b 3C       		.byte	0x3c
 1326 023c A1020000 		.4byte	0x2a1
 1327 0240 0B       		.uleb128 0xb
 1328 0241 18020000 		.4byte	.LASF38
 1329 0245 08       		.byte	0x8
 1330 0246 3D       		.byte	0x3d
 1331 0247 73000000 		.4byte	0x73
 1332 024b 00       		.byte	0
 1333 024c 0D       		.uleb128 0xd
 1334 024d 62657200 		.ascii	"ber\000"
 1335 0251 08       		.byte	0x8
 1336 0252 3E       		.byte	0x3e
 1337 0253 73000000 		.4byte	0x73
 1338 0257 04       		.byte	0x4
 1339 0258 0B       		.uleb128 0xb
 1340 0259 C3040000 		.4byte	.LASF39
 1341 025d 08       		.byte	0x8
 1342 025e 3F       		.byte	0x3f
 1343 025f 73000000 		.4byte	0x73
 1344 0263 08       		.byte	0x8
 1345 0264 0B       		.uleb128 0xb
 1346 0265 AF010000 		.4byte	.LASF40
 1347 0269 08       		.byte	0x8
 1348 026a 40       		.byte	0x40
 1349 026b 73000000 		.4byte	0x73
 1350 026f 0C       		.byte	0xc
 1351 0270 0B       		.uleb128 0xb
 1352 0271 A9040000 		.4byte	.LASF41
 1353 0275 08       		.byte	0x8
 1354 0276 41       		.byte	0x41
 1355 0277 73000000 		.4byte	0x73
 1356 027b 10       		.byte	0x10
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 30


 1357 027c 0B       		.uleb128 0xb
 1358 027d A4040000 		.4byte	.LASF42
 1359 0281 08       		.byte	0x8
 1360 0282 42       		.byte	0x42
 1361 0283 73000000 		.4byte	0x73
 1362 0287 14       		.byte	0x14
 1363 0288 0B       		.uleb128 0xb
 1364 0289 D1010000 		.4byte	.LASF43
 1365 028d 08       		.byte	0x8
 1366 028e 43       		.byte	0x43
 1367 028f 73000000 		.4byte	0x73
 1368 0293 18       		.byte	0x18
 1369 0294 0B       		.uleb128 0xb
 1370 0295 3F030000 		.4byte	.LASF44
 1371 0299 08       		.byte	0x8
 1372 029a 44       		.byte	0x44
 1373 029b 73000000 		.4byte	0x73
 1374 029f 1C       		.byte	0x1c
 1375 02a0 00       		.byte	0
 1376 02a1 03       		.uleb128 0x3
 1377 02a2 E8040000 		.4byte	.LASF45
 1378 02a6 08       		.byte	0x8
 1379 02a7 46       		.byte	0x46
 1380 02a8 38020000 		.4byte	0x238
 1381 02ac 0C       		.uleb128 0xc
 1382 02ad 06       		.byte	0x6
 1383 02ae 08       		.byte	0x8
 1384 02af 52       		.byte	0x52
 1385 02b0 FD020000 		.4byte	0x2fd
 1386 02b4 0B       		.uleb128 0xb
 1387 02b5 34060000 		.4byte	.LASF46
 1388 02b9 08       		.byte	0x8
 1389 02ba 56       		.byte	0x56
 1390 02bb FD020000 		.4byte	0x2fd
 1391 02bf 00       		.byte	0
 1392 02c0 0B       		.uleb128 0xb
 1393 02c1 5E050000 		.4byte	.LASF47
 1394 02c5 08       		.byte	0x8
 1395 02c6 58       		.byte	0x58
 1396 02c7 DB000000 		.4byte	0xdb
 1397 02cb 01       		.byte	0x1
 1398 02cc 0B       		.uleb128 0xb
 1399 02cd AE040000 		.4byte	.LASF48
 1400 02d1 08       		.byte	0x8
 1401 02d2 5A       		.byte	0x5a
 1402 02d3 DB000000 		.4byte	0xdb
 1403 02d7 02       		.byte	0x2
 1404 02d8 0B       		.uleb128 0xb
 1405 02d9 B2020000 		.4byte	.LASF49
 1406 02dd 08       		.byte	0x8
 1407 02de 5D       		.byte	0x5d
 1408 02df DB000000 		.4byte	0xdb
 1409 02e3 03       		.byte	0x3
 1410 02e4 0B       		.uleb128 0xb
 1411 02e5 E2050000 		.4byte	.LASF50
 1412 02e9 08       		.byte	0x8
 1413 02ea 62       		.byte	0x62
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 31


 1414 02eb DB000000 		.4byte	0xdb
 1415 02ef 04       		.byte	0x4
 1416 02f0 0B       		.uleb128 0xb
 1417 02f1 07050000 		.4byte	.LASF51
 1418 02f5 08       		.byte	0x8
 1419 02f6 64       		.byte	0x64
 1420 02f7 DB000000 		.4byte	0xdb
 1421 02fb 05       		.byte	0x5
 1422 02fc 00       		.byte	0
 1423 02fd 02       		.uleb128 0x2
 1424 02fe 01       		.byte	0x1
 1425 02ff 02       		.byte	0x2
 1426 0300 71040000 		.4byte	.LASF52
 1427 0304 03       		.uleb128 0x3
 1428 0305 8A030000 		.4byte	.LASF53
 1429 0309 08       		.byte	0x8
 1430 030a 66       		.byte	0x66
 1431 030b AC020000 		.4byte	0x2ac
 1432 030f 0C       		.uleb128 0xc
 1433 0310 06       		.byte	0x6
 1434 0311 09       		.byte	0x9
 1435 0312 2E       		.byte	0x2e
 1436 0313 48030000 		.4byte	0x348
 1437 0317 0B       		.uleb128 0xb
 1438 0318 B4010000 		.4byte	.LASF54
 1439 031c 09       		.byte	0x9
 1440 031d 30       		.byte	0x30
 1441 031e E7000000 		.4byte	0xe7
 1442 0322 00       		.byte	0
 1443 0323 0B       		.uleb128 0xb
 1444 0324 27020000 		.4byte	.LASF55
 1445 0328 09       		.byte	0x9
 1446 0329 31       		.byte	0x31
 1447 032a F3000000 		.4byte	0xf3
 1448 032e 02       		.byte	0x2
 1449 032f 0B       		.uleb128 0xb
 1450 0330 26060000 		.4byte	.LASF56
 1451 0334 09       		.byte	0x9
 1452 0335 32       		.byte	0x32
 1453 0336 DB000000 		.4byte	0xdb
 1454 033a 04       		.byte	0x4
 1455 033b 0B       		.uleb128 0xb
 1456 033c 6E000000 		.4byte	.LASF57
 1457 0340 09       		.byte	0x9
 1458 0341 33       		.byte	0x33
 1459 0342 DB000000 		.4byte	0xdb
 1460 0346 05       		.byte	0x5
 1461 0347 00       		.byte	0
 1462 0348 03       		.uleb128 0x3
 1463 0349 3D020000 		.4byte	.LASF58
 1464 034d 09       		.byte	0x9
 1465 034e 36       		.byte	0x36
 1466 034f 53030000 		.4byte	0x353
 1467 0353 0E       		.uleb128 0xe
 1468 0354 0F030000 		.4byte	0x30f
 1469 0358 0C       		.uleb128 0xc
 1470 0359 1C       		.byte	0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 32


 1471 035a 09       		.byte	0x9
 1472 035b 39       		.byte	0x39
 1473 035c 79030000 		.4byte	0x379
 1474 0360 0B       		.uleb128 0xb
 1475 0361 25030000 		.4byte	.LASF59
 1476 0365 09       		.byte	0x9
 1477 0366 3B       		.byte	0x3b
 1478 0367 79030000 		.4byte	0x379
 1479 036b 00       		.byte	0
 1480 036c 0B       		.uleb128 0xb
 1481 036d 7E020000 		.4byte	.LASF60
 1482 0371 09       		.byte	0x9
 1483 0372 3C       		.byte	0x3c
 1484 0373 BD000000 		.4byte	0xbd
 1485 0377 04       		.byte	0x4
 1486 0378 00       		.byte	0
 1487 0379 05       		.uleb128 0x5
 1488 037a 04       		.byte	0x4
 1489 037b 2D020000 		.4byte	0x22d
 1490 037f 03       		.uleb128 0x3
 1491 0380 7F030000 		.4byte	.LASF61
 1492 0384 09       		.byte	0x9
 1493 0385 3E       		.byte	0x3e
 1494 0386 58030000 		.4byte	0x358
 1495 038a 0C       		.uleb128 0xc
 1496 038b 68       		.byte	0x68
 1497 038c 09       		.byte	0x9
 1498 038d 44       		.byte	0x44
 1499 038e AB030000 		.4byte	0x3ab
 1500 0392 0B       		.uleb128 0xb
 1501 0393 30030000 		.4byte	.LASF62
 1502 0397 09       		.byte	0x9
 1503 0398 49       		.byte	0x49
 1504 0399 AB030000 		.4byte	0x3ab
 1505 039d 00       		.byte	0
 1506 039e 0B       		.uleb128 0xb
 1507 039f 1D030000 		.4byte	.LASF63
 1508 03a3 09       		.byte	0x9
 1509 03a4 4A       		.byte	0x4a
 1510 03a5 73000000 		.4byte	0x73
 1511 03a9 64       		.byte	0x64
 1512 03aa 00       		.byte	0
 1513 03ab 07       		.uleb128 0x7
 1514 03ac AB000000 		.4byte	0xab
 1515 03b0 BB030000 		.4byte	0x3bb
 1516 03b4 08       		.uleb128 0x8
 1517 03b5 9E000000 		.4byte	0x9e
 1518 03b9 63       		.byte	0x63
 1519 03ba 00       		.byte	0
 1520 03bb 03       		.uleb128 0x3
 1521 03bc 09060000 		.4byte	.LASF64
 1522 03c0 09       		.byte	0x9
 1523 03c1 50       		.byte	0x50
 1524 03c2 8A030000 		.4byte	0x38a
 1525 03c6 0F       		.uleb128 0xf
 1526 03c7 0C030000 		.4byte	.LASF65
 1527 03cb 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 33


 1528 03cc 16       		.byte	0x16
 1529 03cd B2000000 		.4byte	0xb2
 1530 03d1 00000000 		.4byte	.LFB64
 1531 03d5 14000000 		.4byte	.LFE64-.LFB64
 1532 03d9 01       		.uleb128 0x1
 1533 03da 9C       		.byte	0x9c
 1534 03db 0F       		.uleb128 0xf
 1535 03dc 1D040000 		.4byte	.LASF66
 1536 03e0 01       		.byte	0x1
 1537 03e1 1D       		.byte	0x1d
 1538 03e2 81000000 		.4byte	0x81
 1539 03e6 00000000 		.4byte	.LFB65
 1540 03ea 14000000 		.4byte	.LFE65-.LFB65
 1541 03ee 01       		.uleb128 0x1
 1542 03ef 9C       		.byte	0x9c
 1543 03f0 10       		.uleb128 0x10
 1544 03f1 B8040000 		.4byte	.LASF119
 1545 03f5 01       		.byte	0x1
 1546 03f6 22       		.byte	0x22
 1547 03f7 00000000 		.4byte	.LFB66
 1548 03fb 28000000 		.4byte	.LFE66-.LFB66
 1549 03ff 01       		.uleb128 0x1
 1550 0400 9C       		.byte	0x9c
 1551 0401 11       		.uleb128 0x11
 1552 0402 BD030000 		.4byte	.LASF67
 1553 0406 01       		.byte	0x1
 1554 0407 2D       		.byte	0x2d
 1555 0408 00000000 		.4byte	.LFB67
 1556 040c 70000000 		.4byte	.LFE67-.LFB67
 1557 0410 01       		.uleb128 0x1
 1558 0411 9C       		.byte	0x9c
 1559 0412 25040000 		.4byte	0x425
 1560 0416 12       		.uleb128 0x12
 1561 0417 E0040000 		.4byte	.LASF70
 1562 041b 01       		.byte	0x1
 1563 041c 31       		.byte	0x31
 1564 041d AB000000 		.4byte	0xab
 1565 0421 02       		.uleb128 0x2
 1566 0422 91       		.byte	0x91
 1567 0423 77       		.sleb128 -9
 1568 0424 00       		.byte	0
 1569 0425 11       		.uleb128 0x11
 1570 0426 A2050000 		.4byte	.LASF68
 1571 042a 01       		.byte	0x1
 1572 042b 3D       		.byte	0x3d
 1573 042c 00000000 		.4byte	.LFB68
 1574 0430 1C000000 		.4byte	.LFE68-.LFB68
 1575 0434 01       		.uleb128 0x1
 1576 0435 9C       		.byte	0x9c
 1577 0436 49040000 		.4byte	0x449
 1578 043a 13       		.uleb128 0x13
 1579 043b 3D060000 		.4byte	.LASF81
 1580 043f 01       		.byte	0x1
 1581 0440 3D       		.byte	0x3d
 1582 0441 A5000000 		.4byte	0xa5
 1583 0445 02       		.uleb128 0x2
 1584 0446 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 34


 1585 0447 74       		.sleb128 -12
 1586 0448 00       		.byte	0
 1587 0449 14       		.uleb128 0x14
 1588 044a F4010000 		.4byte	.LASF69
 1589 044e 01       		.byte	0x1
 1590 044f 41       		.byte	0x41
 1591 0450 DB000000 		.4byte	0xdb
 1592 0454 00000000 		.4byte	.LFB69
 1593 0458 04010000 		.4byte	.LFE69-.LFB69
 1594 045c 01       		.uleb128 0x1
 1595 045d 9C       		.byte	0x9c
 1596 045e AB040000 		.4byte	0x4ab
 1597 0462 12       		.uleb128 0x12
 1598 0463 33040000 		.4byte	.LASF71
 1599 0467 01       		.byte	0x1
 1600 0468 42       		.byte	0x42
 1601 0469 A5000000 		.4byte	0xa5
 1602 046d 02       		.uleb128 0x2
 1603 046e 91       		.byte	0x91
 1604 046f 74       		.sleb128 -12
 1605 0470 12       		.uleb128 0x12
 1606 0471 F8030000 		.4byte	.LASF32
 1607 0475 01       		.byte	0x1
 1608 0476 50       		.byte	0x50
 1609 0477 57000000 		.4byte	0x57
 1610 047b 02       		.uleb128 0x2
 1611 047c 91       		.byte	0x91
 1612 047d 70       		.sleb128 -16
 1613 047e 12       		.uleb128 0x12
 1614 047f 38050000 		.4byte	.LASF72
 1615 0483 01       		.byte	0x1
 1616 0484 51       		.byte	0x51
 1617 0485 AB040000 		.4byte	0x4ab
 1618 0489 02       		.uleb128 0x2
 1619 048a 91       		.byte	0x91
 1620 048b 50       		.sleb128 -48
 1621 048c 12       		.uleb128 0x12
 1622 048d BE020000 		.4byte	.LASF31
 1623 0491 01       		.byte	0x1
 1624 0492 55       		.byte	0x55
 1625 0493 E5010000 		.4byte	0x1e5
 1626 0497 03       		.uleb128 0x3
 1627 0498 91       		.byte	0x91
 1628 0499 BC7F     		.sleb128 -68
 1629 049b 12       		.uleb128 0x12
 1630 049c 6B050000 		.4byte	.LASF73
 1631 04a0 01       		.byte	0x1
 1632 04a1 58       		.byte	0x58
 1633 04a2 AD010000 		.4byte	0x1ad
 1634 04a6 03       		.uleb128 0x3
 1635 04a7 91       		.byte	0x91
 1636 04a8 A07F     		.sleb128 -96
 1637 04aa 00       		.byte	0
 1638 04ab 07       		.uleb128 0x7
 1639 04ac AB000000 		.4byte	0xab
 1640 04b0 BB040000 		.4byte	0x4bb
 1641 04b4 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 35


 1642 04b5 9E000000 		.4byte	0x9e
 1643 04b9 1F       		.byte	0x1f
 1644 04ba 00       		.byte	0
 1645 04bb 14       		.uleb128 0x14
 1646 04bc EF050000 		.4byte	.LASF74
 1647 04c0 01       		.byte	0x1
 1648 04c1 78       		.byte	0x78
 1649 04c2 AD010000 		.4byte	0x1ad
 1650 04c6 00000000 		.4byte	.LFB70
 1651 04ca 1C010000 		.4byte	.LFE70-.LFB70
 1652 04ce 01       		.uleb128 0x1
 1653 04cf 9C       		.byte	0x9c
 1654 04d0 05050000 		.4byte	0x505
 1655 04d4 12       		.uleb128 0x12
 1656 04d5 49020000 		.4byte	.LASF75
 1657 04d9 01       		.byte	0x1
 1658 04da 7B       		.byte	0x7b
 1659 04db AD010000 		.4byte	0x1ad
 1660 04df 02       		.uleb128 0x2
 1661 04e0 91       		.byte	0x91
 1662 04e1 50       		.sleb128 -48
 1663 04e2 12       		.uleb128 0x12
 1664 04e3 6B040000 		.4byte	.LASF76
 1665 04e7 01       		.byte	0x1
 1666 04e8 9D       		.byte	0x9d
 1667 04e9 A5000000 		.4byte	0xa5
 1668 04ed 02       		.uleb128 0x2
 1669 04ee 91       		.byte	0x91
 1670 04ef 6C       		.sleb128 -20
 1671 04f0 15       		.uleb128 0x15
 1672 04f1 00000000 		.4byte	.Ldebug_ranges0+0
 1673 04f5 12       		.uleb128 0x12
 1674 04f6 70020000 		.4byte	.LASF77
 1675 04fa 01       		.byte	0x1
 1676 04fb A5       		.byte	0xa5
 1677 04fc E7000000 		.4byte	0xe7
 1678 0500 02       		.uleb128 0x2
 1679 0501 91       		.byte	0x91
 1680 0502 6A       		.sleb128 -22
 1681 0503 00       		.byte	0
 1682 0504 00       		.byte	0
 1683 0505 14       		.uleb128 0x14
 1684 0506 4A040000 		.4byte	.LASF78
 1685 050a 01       		.byte	0x1
 1686 050b C0       		.byte	0xc0
 1687 050c 59010000 		.4byte	0x159
 1688 0510 00000000 		.4byte	.LFB71
 1689 0514 CC000000 		.4byte	.LFE71-.LFB71
 1690 0518 01       		.uleb128 0x1
 1691 0519 9C       		.byte	0x9c
 1692 051a 3D050000 		.4byte	0x53d
 1693 051e 12       		.uleb128 0x12
 1694 051f 42010000 		.4byte	.LASF79
 1695 0523 01       		.byte	0x1
 1696 0524 C2       		.byte	0xc2
 1697 0525 59010000 		.4byte	0x159
 1698 0529 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 36


 1699 052a 91       		.byte	0x91
 1700 052b EC7C     		.sleb128 -404
 1701 052d 12       		.uleb128 0x12
 1702 052e 38030000 		.4byte	.LASF80
 1703 0532 01       		.byte	0x1
 1704 0533 C7       		.byte	0xc7
 1705 0534 AD010000 		.4byte	0x1ad
 1706 0538 03       		.uleb128 0x3
 1707 0539 91       		.byte	0x91
 1708 053a D07C     		.sleb128 -432
 1709 053c 00       		.byte	0
 1710 053d 16       		.uleb128 0x16
 1711 053e B6050000 		.4byte	.LASF120
 1712 0542 01       		.byte	0x1
 1713 0543 DE       		.byte	0xde
 1714 0544 E7000000 		.4byte	0xe7
 1715 0548 00000000 		.4byte	.LFB72
 1716 054c 8E000000 		.4byte	.LFE72-.LFB72
 1717 0550 01       		.uleb128 0x1
 1718 0551 9C       		.byte	0x9c
 1719 0552 7F050000 		.4byte	0x57f
 1720 0556 13       		.uleb128 0x13
 1721 0557 78020000 		.4byte	.LASF82
 1722 055b 01       		.byte	0x1
 1723 055c DE       		.byte	0xde
 1724 055d 7F050000 		.4byte	0x57f
 1725 0561 02       		.uleb128 0x2
 1726 0562 91       		.byte	0x91
 1727 0563 64       		.sleb128 -28
 1728 0564 17       		.uleb128 0x17
 1729 0565 6E00     		.ascii	"n\000"
 1730 0567 01       		.byte	0x1
 1731 0568 DE       		.byte	0xde
 1732 0569 DB000000 		.4byte	0xdb
 1733 056d 02       		.uleb128 0x2
 1734 056e 91       		.byte	0x91
 1735 056f 63       		.sleb128 -29
 1736 0570 12       		.uleb128 0x12
 1737 0571 70010000 		.4byte	.LASF83
 1738 0575 01       		.byte	0x1
 1739 0576 E0       		.byte	0xe0
 1740 0577 F3000000 		.4byte	0xf3
 1741 057b 02       		.uleb128 0x2
 1742 057c 91       		.byte	0x91
 1743 057d 6E       		.sleb128 -18
 1744 057e 00       		.byte	0
 1745 057f 05       		.uleb128 0x5
 1746 0580 04       		.byte	0x4
 1747 0581 F3000000 		.4byte	0xf3
 1748 0585 11       		.uleb128 0x11
 1749 0586 AD020000 		.4byte	.LASF84
 1750 058a 01       		.byte	0x1
 1751 058b F0       		.byte	0xf0
 1752 058c 00000000 		.4byte	.LFB73
 1753 0590 98000000 		.4byte	.LFE73-.LFB73
 1754 0594 01       		.uleb128 0x1
 1755 0595 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 37


 1756 0596 CB050000 		.4byte	0x5cb
 1757 059a 17       		.uleb128 0x17
 1758 059b 6100     		.ascii	"a\000"
 1759 059d 01       		.byte	0x1
 1760 059e F0       		.byte	0xf0
 1761 059f 7F050000 		.4byte	0x57f
 1762 05a3 02       		.uleb128 0x2
 1763 05a4 91       		.byte	0x91
 1764 05a5 6C       		.sleb128 -20
 1765 05a6 17       		.uleb128 0x17
 1766 05a7 6E00     		.ascii	"n\000"
 1767 05a9 01       		.byte	0x1
 1768 05aa F0       		.byte	0xf0
 1769 05ab F3000000 		.4byte	0xf3
 1770 05af 02       		.uleb128 0x2
 1771 05b0 91       		.byte	0x91
 1772 05b1 6A       		.sleb128 -22
 1773 05b2 18       		.uleb128 0x18
 1774 05b3 6900     		.ascii	"i\000"
 1775 05b5 01       		.byte	0x1
 1776 05b6 F1       		.byte	0xf1
 1777 05b7 F3000000 		.4byte	0xf3
 1778 05bb 02       		.uleb128 0x2
 1779 05bc 91       		.byte	0x91
 1780 05bd 76       		.sleb128 -10
 1781 05be 18       		.uleb128 0x18
 1782 05bf 6A00     		.ascii	"j\000"
 1783 05c1 01       		.byte	0x1
 1784 05c2 F1       		.byte	0xf1
 1785 05c3 F3000000 		.4byte	0xf3
 1786 05c7 02       		.uleb128 0x2
 1787 05c8 91       		.byte	0x91
 1788 05c9 74       		.sleb128 -12
 1789 05ca 00       		.byte	0
 1790 05cb 19       		.uleb128 0x19
 1791 05cc 2E040000 		.4byte	.LASF85
 1792 05d0 01       		.byte	0x1
 1793 05d1 FC       		.byte	0xfc
 1794 05d2 00000000 		.4byte	.LFB74
 1795 05d6 2A000000 		.4byte	.LFE74-.LFB74
 1796 05da 01       		.uleb128 0x1
 1797 05db 9C       		.byte	0x9c
 1798 05dc 05060000 		.4byte	0x605
 1799 05e0 17       		.uleb128 0x17
 1800 05e1 7000     		.ascii	"p\000"
 1801 05e3 01       		.byte	0x1
 1802 05e4 FC       		.byte	0xfc
 1803 05e5 7F050000 		.4byte	0x57f
 1804 05e9 02       		.uleb128 0x2
 1805 05ea 91       		.byte	0x91
 1806 05eb 6C       		.sleb128 -20
 1807 05ec 17       		.uleb128 0x17
 1808 05ed 7100     		.ascii	"q\000"
 1809 05ef 01       		.byte	0x1
 1810 05f0 FC       		.byte	0xfc
 1811 05f1 7F050000 		.4byte	0x57f
 1812 05f5 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 38


 1813 05f6 91       		.byte	0x91
 1814 05f7 68       		.sleb128 -24
 1815 05f8 18       		.uleb128 0x18
 1816 05f9 7400     		.ascii	"t\000"
 1817 05fb 01       		.byte	0x1
 1818 05fc FD       		.byte	0xfd
 1819 05fd F3000000 		.4byte	0xf3
 1820 0601 02       		.uleb128 0x2
 1821 0602 91       		.byte	0x91
 1822 0603 76       		.sleb128 -10
 1823 0604 00       		.byte	0
 1824 0605 07       		.uleb128 0x7
 1825 0606 AB000000 		.4byte	0xab
 1826 060a 16060000 		.4byte	0x616
 1827 060e 1A       		.uleb128 0x1a
 1828 060f 9E000000 		.4byte	0x9e
 1829 0613 0001     		.2byte	0x100
 1830 0615 00       		.byte	0
 1831 0616 12       		.uleb128 0x12
 1832 0617 14010000 		.4byte	.LASF86
 1833 061b 01       		.byte	0x1
 1834 061c 0B       		.byte	0xb
 1835 061d 05060000 		.4byte	0x605
 1836 0621 05       		.uleb128 0x5
 1837 0622 03       		.byte	0x3
 1838 0623 00000000 		.4byte	uart_chars
 1839 0627 12       		.uleb128 0x12
 1840 0628 B3030000 		.4byte	.LASF87
 1841 062c 01       		.byte	0x1
 1842 062d 0C       		.byte	0xc
 1843 062e 81000000 		.4byte	0x81
 1844 0632 05       		.uleb128 0x5
 1845 0633 03       		.byte	0x3
 1846 0634 01010000 		.4byte	num_chars
 1847 0638 12       		.uleb128 0x12
 1848 0639 A8020000 		.4byte	.LASF88
 1849 063d 01       		.byte	0x1
 1850 063e 0E       		.byte	0xe
 1851 063f B2000000 		.4byte	0xb2
 1852 0643 05       		.uleb128 0x5
 1853 0644 03       		.byte	0x3
 1854 0645 00000000 		.4byte	line
 1855 0649 12       		.uleb128 0x12
 1856 064a 02040000 		.4byte	.LASF89
 1857 064e 01       		.byte	0x1
 1858 064f 11       		.byte	0x11
 1859 0650 B2000000 		.4byte	0xb2
 1860 0654 05       		.uleb128 0x5
 1861 0655 03       		.byte	0x3
 1862 0656 04010000 		.4byte	match
 1863 065a 12       		.uleb128 0x12
 1864 065b 26040000 		.4byte	.LASF90
 1865 065f 01       		.byte	0x1
 1866 0660 12       		.byte	0x12
 1867 0661 B2000000 		.4byte	0xb2
 1868 0665 05       		.uleb128 0x5
 1869 0666 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 39


 1870 0667 08010000 		.4byte	pattern
 1871 066b 1B       		.uleb128 0x1b
 1872 066c 54010000 		.4byte	.LASF91
 1873 0670 0A       		.byte	0xa
 1874 0671 1207     		.2byte	0x712
 1875 0673 77060000 		.4byte	0x677
 1876 0677 0E       		.uleb128 0xe
 1877 0678 8C000000 		.4byte	0x8c
 1878 067c 1C       		.uleb128 0x1c
 1879 067d 19050000 		.4byte	.LASF92
 1880 0681 06       		.byte	0x6
 1881 0682 25       		.byte	0x25
 1882 0683 AB030000 		.4byte	0x3ab
 1883 0687 05       		.uleb128 0x5
 1884 0688 03       		.byte	0x3
 1885 0689 00000000 		.4byte	level_sensor_inbox
 1886 068d 1C       		.uleb128 0x1c
 1887 068e 54000000 		.4byte	.LASF93
 1888 0692 07       		.byte	0x7
 1889 0693 11       		.byte	0x11
 1890 0694 FD020000 		.4byte	0x2fd
 1891 0698 05       		.uleb128 0x5
 1892 0699 03       		.byte	0x3
 1893 069a 00000000 		.4byte	buffer_overflow
 1894 069e 1C       		.uleb128 0x1c
 1895 069f A1030000 		.4byte	.LASF94
 1896 06a3 07       		.byte	0x7
 1897 06a4 22       		.byte	0x22
 1898 06a5 E7000000 		.4byte	0xe7
 1899 06a9 05       		.uleb128 0x5
 1900 06aa 03       		.byte	0x3
 1901 06ab 00000000 		.4byte	dataPointsInStack
 1902 06af 1C       		.uleb128 0x1c
 1903 06b0 C9050000 		.4byte	.LASF95
 1904 06b4 07       		.byte	0x7
 1905 06b5 23       		.byte	0x23
 1906 06b6 E7000000 		.4byte	0xe7
 1907 06ba 05       		.uleb128 0x5
 1908 06bb 03       		.byte	0x3
 1909 06bc 00000000 		.4byte	dataPointsInStackDesired
 1910 06c0 07       		.uleb128 0x7
 1911 06c1 F5010000 		.4byte	0x1f5
 1912 06c5 D0060000 		.4byte	0x6d0
 1913 06c9 08       		.uleb128 0x8
 1914 06ca 9E000000 		.4byte	0x9e
 1915 06ce 95       		.byte	0x95
 1916 06cf 00       		.byte	0
 1917 06d0 1C       		.uleb128 0x1c
 1918 06d1 18030000 		.4byte	.LASF96
 1919 06d5 07       		.byte	0x7
 1920 06d6 24       		.byte	0x24
 1921 06d7 C0060000 		.4byte	0x6c0
 1922 06db 05       		.uleb128 0x5
 1923 06dc 03       		.byte	0x3
 1924 06dd 00000000 		.4byte	data
 1925 06e1 1C       		.uleb128 0x1c
 1926 06e2 36010000 		.4byte	.LASF97
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 40


 1927 06e6 08       		.byte	0x8
 1928 06e7 1F       		.byte	0x1f
 1929 06e8 DB000000 		.4byte	0xdb
 1930 06ec 05       		.uleb128 0x5
 1931 06ed 03       		.byte	0x3
 1932 06ee 00000000 		.4byte	modem_state
 1933 06f2 1C       		.uleb128 0x1c
 1934 06f3 68030000 		.4byte	.LASF98
 1935 06f7 08       		.byte	0x8
 1936 06f8 69       		.byte	0x69
 1937 06f9 FF000000 		.4byte	0xff
 1938 06fd 05       		.uleb128 0x5
 1939 06fe 03       		.byte	0x3
 1940 06ff 00000000 		.4byte	modem_start_time_stamp
 1941 0703 1C       		.uleb128 0x1c
 1942 0704 25030000 		.4byte	.LASF59
 1943 0708 08       		.byte	0x8
 1944 0709 6A       		.byte	0x6a
 1945 070a 2D020000 		.4byte	0x22d
 1946 070e 05       		.uleb128 0x5
 1947 070f 03       		.byte	0x3
 1948 0710 00000000 		.4byte	modem_info
 1949 0714 1C       		.uleb128 0x1c
 1950 0715 89010000 		.4byte	.LASF99
 1951 0719 08       		.byte	0x8
 1952 071a 6B       		.byte	0x6b
 1953 071b A1020000 		.4byte	0x2a1
 1954 071f 05       		.uleb128 0x5
 1955 0720 03       		.byte	0x3
 1956 0721 00000000 		.4byte	modem_stats
 1957 0725 1C       		.uleb128 0x1c
 1958 0726 08040000 		.4byte	.LASF100
 1959 072a 08       		.byte	0x8
 1960 072b 6C       		.byte	0x6c
 1961 072c 04030000 		.4byte	0x304
 1962 0730 05       		.uleb128 0x5
 1963 0731 03       		.byte	0x3
 1964 0732 00000000 		.4byte	updatable_parameters
 1965 0736 1C       		.uleb128 0x1c
 1966 0737 59060000 		.4byte	.LASF101
 1967 073b 0B       		.byte	0xb
 1968 073c 12       		.byte	0x12
 1969 073d AB030000 		.4byte	0x3ab
 1970 0741 05       		.uleb128 0x5
 1971 0742 03       		.byte	0x3
 1972 0743 00000000 		.4byte	app_led_inbox
 1973 0747 07       		.uleb128 0x7
 1974 0748 AB000000 		.4byte	0xab
 1975 074c 58070000 		.4byte	0x758
 1976 0750 1A       		.uleb128 0x1a
 1977 0751 9E000000 		.4byte	0x9e
 1978 0755 0F27     		.2byte	0x270f
 1979 0757 00       		.byte	0
 1980 0758 1C       		.uleb128 0x1c
 1981 0759 45060000 		.4byte	.LASF102
 1982 075d 09       		.byte	0x9
 1983 075e 18       		.byte	0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 41


 1984 075f 47070000 		.4byte	0x747
 1985 0763 05       		.uleb128 0x5
 1986 0764 03       		.byte	0x3
 1987 0765 00000000 		.4byte	http_request
 1988 0769 1C       		.uleb128 0x1c
 1989 076a 01020000 		.4byte	.LASF103
 1990 076e 09       		.byte	0x9
 1991 076f 19       		.byte	0x19
 1992 0770 47070000 		.4byte	0x747
 1993 0774 05       		.uleb128 0x5
 1994 0775 03       		.byte	0x3
 1995 0776 00000000 		.4byte	http_body
 1996 077a 07       		.uleb128 0x7
 1997 077b AB000000 		.4byte	0xab
 1998 077f 8A070000 		.4byte	0x78a
 1999 0783 08       		.uleb128 0x8
 2000 0784 9E000000 		.4byte	0x9e
 2001 0788 C7       		.byte	0xc7
 2002 0789 00       		.byte	0
 2003 078a 1C       		.uleb128 0x1c
 2004 078b 49050000 		.4byte	.LASF104
 2005 078f 09       		.byte	0x9
 2006 0790 1A       		.byte	0x1a
 2007 0791 7A070000 		.4byte	0x77a
 2008 0795 05       		.uleb128 0x5
 2009 0796 03       		.byte	0x3
 2010 0797 00000000 		.4byte	http_route
 2011 079b 1C       		.uleb128 0x1c
 2012 079c C8040000 		.4byte	.LASF105
 2013 07a0 09       		.byte	0x9
 2014 07a1 41       		.byte	0x41
 2015 07a2 7F030000 		.4byte	0x37f
 2016 07a6 05       		.uleb128 0x5
 2017 07a7 03       		.byte	0x3
 2018 07a8 00000000 		.4byte	system_info
 2019 07ac 1C       		.uleb128 0x1c
 2020 07ad 8D040000 		.4byte	.LASF106
 2021 07b1 09       		.byte	0x9
 2022 07b2 53       		.byte	0x53
 2023 07b3 BB030000 		.4byte	0x3bb
 2024 07b7 05       		.uleb128 0x5
 2025 07b8 03       		.byte	0x3
 2026 07b9 00000000 		.4byte	system_settings
 2027 07bd 1C       		.uleb128 0x1c
 2028 07be 47010000 		.4byte	.LASF107
 2029 07c2 09       		.byte	0x9
 2030 07c3 6F       		.byte	0x6f
 2031 07c4 48030000 		.4byte	0x348
 2032 07c8 05       		.uleb128 0x5
 2033 07c9 03       		.byte	0x3
 2034 07ca 00000000 		.4byte	alarmMeasure
 2035 07ce 1C       		.uleb128 0x1c
 2036 07cf C3010000 		.4byte	.LASF108
 2037 07d3 09       		.byte	0x9
 2038 07d4 70       		.byte	0x70
 2039 07d5 DB000000 		.4byte	0xdb
 2040 07d9 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 42


 2041 07da 03       		.byte	0x3
 2042 07db 00000000 		.4byte	timeToMeasure
 2043 07df 1C       		.uleb128 0x1c
 2044 07e0 C4020000 		.4byte	.LASF109
 2045 07e4 09       		.byte	0x9
 2046 07e5 71       		.byte	0x71
 2047 07e6 48030000 		.4byte	0x348
 2048 07ea 05       		.uleb128 0x5
 2049 07eb 03       		.byte	0x3
 2050 07ec 00000000 		.4byte	alarmSync
 2051 07f0 1C       		.uleb128 0x1c
 2052 07f1 E9010000 		.4byte	.LASF110
 2053 07f5 09       		.byte	0x9
 2054 07f6 72       		.byte	0x72
 2055 07f7 DB000000 		.4byte	0xdb
 2056 07fb 05       		.uleb128 0x5
 2057 07fc 03       		.byte	0x3
 2058 07fd 00000000 		.4byte	timeToSync
 2059 0801 1C       		.uleb128 0x1c
 2060 0802 E1030000 		.4byte	.LASF111
 2061 0806 09       		.byte	0x9
 2062 0807 73       		.byte	0x73
 2063 0808 DB000000 		.4byte	0xdb
 2064 080c 05       		.uleb128 0x5
 2065 080d 03       		.byte	0x3
 2066 080e 00000000 		.4byte	timeToSycnRemoteParams
 2067 0812 1D       		.uleb128 0x1d
 2068 0813 68657900 		.ascii	"hey\000"
 2069 0817 09       		.byte	0x9
 2070 0818 74       		.byte	0x74
 2071 0819 DB000000 		.4byte	0xdb
 2072 081d 05       		.uleb128 0x5
 2073 081e 03       		.byte	0x3
 2074 081f 00000000 		.4byte	hey
 2075 0823 1C       		.uleb128 0x1c
 2076 0824 5C030000 		.4byte	.LASF112
 2077 0828 09       		.byte	0x9
 2078 0829 77       		.byte	0x77
 2079 082a 48030000 		.4byte	0x348
 2080 082e 05       		.uleb128 0x5
 2081 082f 03       		.byte	0x3
 2082 0830 00000000 		.4byte	alarmAppLED
 2083 0834 1C       		.uleb128 0x1c
 2084 0835 5D020000 		.4byte	.LASF113
 2085 0839 09       		.byte	0x9
 2086 083a 78       		.byte	0x78
 2087 083b DB000000 		.4byte	0xdb
 2088 083f 05       		.uleb128 0x5
 2089 0840 03       		.byte	0x3
 2090 0841 00000000 		.4byte	timeToAppLED
 2091 0845 1C       		.uleb128 0x1c
 2092 0846 F6040000 		.4byte	.LASF114
 2093 084a 09       		.byte	0x9
 2094 084b 7A       		.byte	0x7a
 2095 084c 48030000 		.4byte	0x348
 2096 0850 05       		.uleb128 0x5
 2097 0851 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 43


 2098 0852 00000000 		.4byte	alarmLevelSensor
 2099 0856 1C       		.uleb128 0x1c
 2100 0857 77010000 		.4byte	.LASF115
 2101 085b 09       		.byte	0x9
 2102 085c 7B       		.byte	0x7b
 2103 085d DB000000 		.4byte	0xdb
 2104 0861 05       		.uleb128 0x5
 2105 0862 03       		.byte	0x3
 2106 0863 00000000 		.4byte	timetoLevelSensor
 2107 0867 00       		.byte	0
 2108              		.section	.debug_abbrev,"",%progbits
 2109              	.Ldebug_abbrev0:
 2110 0000 01       		.uleb128 0x1
 2111 0001 11       		.uleb128 0x11
 2112 0002 01       		.byte	0x1
 2113 0003 25       		.uleb128 0x25
 2114 0004 0E       		.uleb128 0xe
 2115 0005 13       		.uleb128 0x13
 2116 0006 0B       		.uleb128 0xb
 2117 0007 03       		.uleb128 0x3
 2118 0008 0E       		.uleb128 0xe
 2119 0009 1B       		.uleb128 0x1b
 2120 000a 0E       		.uleb128 0xe
 2121 000b 55       		.uleb128 0x55
 2122 000c 17       		.uleb128 0x17
 2123 000d 11       		.uleb128 0x11
 2124 000e 01       		.uleb128 0x1
 2125 000f 10       		.uleb128 0x10
 2126 0010 17       		.uleb128 0x17
 2127 0011 00       		.byte	0
 2128 0012 00       		.byte	0
 2129 0013 02       		.uleb128 0x2
 2130 0014 24       		.uleb128 0x24
 2131 0015 00       		.byte	0
 2132 0016 0B       		.uleb128 0xb
 2133 0017 0B       		.uleb128 0xb
 2134 0018 3E       		.uleb128 0x3e
 2135 0019 0B       		.uleb128 0xb
 2136 001a 03       		.uleb128 0x3
 2137 001b 0E       		.uleb128 0xe
 2138 001c 00       		.byte	0
 2139 001d 00       		.byte	0
 2140 001e 03       		.uleb128 0x3
 2141 001f 16       		.uleb128 0x16
 2142 0020 00       		.byte	0
 2143 0021 03       		.uleb128 0x3
 2144 0022 0E       		.uleb128 0xe
 2145 0023 3A       		.uleb128 0x3a
 2146 0024 0B       		.uleb128 0xb
 2147 0025 3B       		.uleb128 0x3b
 2148 0026 0B       		.uleb128 0xb
 2149 0027 49       		.uleb128 0x49
 2150 0028 13       		.uleb128 0x13
 2151 0029 00       		.byte	0
 2152 002a 00       		.byte	0
 2153 002b 04       		.uleb128 0x4
 2154 002c 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 44


 2155 002d 00       		.byte	0
 2156 002e 0B       		.uleb128 0xb
 2157 002f 0B       		.uleb128 0xb
 2158 0030 3E       		.uleb128 0x3e
 2159 0031 0B       		.uleb128 0xb
 2160 0032 03       		.uleb128 0x3
 2161 0033 08       		.uleb128 0x8
 2162 0034 00       		.byte	0
 2163 0035 00       		.byte	0
 2164 0036 05       		.uleb128 0x5
 2165 0037 0F       		.uleb128 0xf
 2166 0038 00       		.byte	0
 2167 0039 0B       		.uleb128 0xb
 2168 003a 0B       		.uleb128 0xb
 2169 003b 49       		.uleb128 0x49
 2170 003c 13       		.uleb128 0x13
 2171 003d 00       		.byte	0
 2172 003e 00       		.byte	0
 2173 003f 06       		.uleb128 0x6
 2174 0040 26       		.uleb128 0x26
 2175 0041 00       		.byte	0
 2176 0042 49       		.uleb128 0x49
 2177 0043 13       		.uleb128 0x13
 2178 0044 00       		.byte	0
 2179 0045 00       		.byte	0
 2180 0046 07       		.uleb128 0x7
 2181 0047 01       		.uleb128 0x1
 2182 0048 01       		.byte	0x1
 2183 0049 49       		.uleb128 0x49
 2184 004a 13       		.uleb128 0x13
 2185 004b 01       		.uleb128 0x1
 2186 004c 13       		.uleb128 0x13
 2187 004d 00       		.byte	0
 2188 004e 00       		.byte	0
 2189 004f 08       		.uleb128 0x8
 2190 0050 21       		.uleb128 0x21
 2191 0051 00       		.byte	0
 2192 0052 49       		.uleb128 0x49
 2193 0053 13       		.uleb128 0x13
 2194 0054 2F       		.uleb128 0x2f
 2195 0055 0B       		.uleb128 0xb
 2196 0056 00       		.byte	0
 2197 0057 00       		.byte	0
 2198 0058 09       		.uleb128 0x9
 2199 0059 16       		.uleb128 0x16
 2200 005a 00       		.byte	0
 2201 005b 03       		.uleb128 0x3
 2202 005c 0E       		.uleb128 0xe
 2203 005d 3A       		.uleb128 0x3a
 2204 005e 0B       		.uleb128 0xb
 2205 005f 3B       		.uleb128 0x3b
 2206 0060 05       		.uleb128 0x5
 2207 0061 49       		.uleb128 0x49
 2208 0062 13       		.uleb128 0x13
 2209 0063 00       		.byte	0
 2210 0064 00       		.byte	0
 2211 0065 0A       		.uleb128 0xa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 45


 2212 0066 13       		.uleb128 0x13
 2213 0067 01       		.byte	0x1
 2214 0068 0B       		.uleb128 0xb
 2215 0069 05       		.uleb128 0x5
 2216 006a 3A       		.uleb128 0x3a
 2217 006b 0B       		.uleb128 0xb
 2218 006c 3B       		.uleb128 0x3b
 2219 006d 0B       		.uleb128 0xb
 2220 006e 01       		.uleb128 0x1
 2221 006f 13       		.uleb128 0x13
 2222 0070 00       		.byte	0
 2223 0071 00       		.byte	0
 2224 0072 0B       		.uleb128 0xb
 2225 0073 0D       		.uleb128 0xd
 2226 0074 00       		.byte	0
 2227 0075 03       		.uleb128 0x3
 2228 0076 0E       		.uleb128 0xe
 2229 0077 3A       		.uleb128 0x3a
 2230 0078 0B       		.uleb128 0xb
 2231 0079 3B       		.uleb128 0x3b
 2232 007a 0B       		.uleb128 0xb
 2233 007b 49       		.uleb128 0x49
 2234 007c 13       		.uleb128 0x13
 2235 007d 38       		.uleb128 0x38
 2236 007e 0B       		.uleb128 0xb
 2237 007f 00       		.byte	0
 2238 0080 00       		.byte	0
 2239 0081 0C       		.uleb128 0xc
 2240 0082 13       		.uleb128 0x13
 2241 0083 01       		.byte	0x1
 2242 0084 0B       		.uleb128 0xb
 2243 0085 0B       		.uleb128 0xb
 2244 0086 3A       		.uleb128 0x3a
 2245 0087 0B       		.uleb128 0xb
 2246 0088 3B       		.uleb128 0x3b
 2247 0089 0B       		.uleb128 0xb
 2248 008a 01       		.uleb128 0x1
 2249 008b 13       		.uleb128 0x13
 2250 008c 00       		.byte	0
 2251 008d 00       		.byte	0
 2252 008e 0D       		.uleb128 0xd
 2253 008f 0D       		.uleb128 0xd
 2254 0090 00       		.byte	0
 2255 0091 03       		.uleb128 0x3
 2256 0092 08       		.uleb128 0x8
 2257 0093 3A       		.uleb128 0x3a
 2258 0094 0B       		.uleb128 0xb
 2259 0095 3B       		.uleb128 0x3b
 2260 0096 0B       		.uleb128 0xb
 2261 0097 49       		.uleb128 0x49
 2262 0098 13       		.uleb128 0x13
 2263 0099 38       		.uleb128 0x38
 2264 009a 0B       		.uleb128 0xb
 2265 009b 00       		.byte	0
 2266 009c 00       		.byte	0
 2267 009d 0E       		.uleb128 0xe
 2268 009e 35       		.uleb128 0x35
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 46


 2269 009f 00       		.byte	0
 2270 00a0 49       		.uleb128 0x49
 2271 00a1 13       		.uleb128 0x13
 2272 00a2 00       		.byte	0
 2273 00a3 00       		.byte	0
 2274 00a4 0F       		.uleb128 0xf
 2275 00a5 2E       		.uleb128 0x2e
 2276 00a6 00       		.byte	0
 2277 00a7 3F       		.uleb128 0x3f
 2278 00a8 19       		.uleb128 0x19
 2279 00a9 03       		.uleb128 0x3
 2280 00aa 0E       		.uleb128 0xe
 2281 00ab 3A       		.uleb128 0x3a
 2282 00ac 0B       		.uleb128 0xb
 2283 00ad 3B       		.uleb128 0x3b
 2284 00ae 0B       		.uleb128 0xb
 2285 00af 27       		.uleb128 0x27
 2286 00b0 19       		.uleb128 0x19
 2287 00b1 49       		.uleb128 0x49
 2288 00b2 13       		.uleb128 0x13
 2289 00b3 11       		.uleb128 0x11
 2290 00b4 01       		.uleb128 0x1
 2291 00b5 12       		.uleb128 0x12
 2292 00b6 06       		.uleb128 0x6
 2293 00b7 40       		.uleb128 0x40
 2294 00b8 18       		.uleb128 0x18
 2295 00b9 9742     		.uleb128 0x2117
 2296 00bb 19       		.uleb128 0x19
 2297 00bc 00       		.byte	0
 2298 00bd 00       		.byte	0
 2299 00be 10       		.uleb128 0x10
 2300 00bf 2E       		.uleb128 0x2e
 2301 00c0 00       		.byte	0
 2302 00c1 3F       		.uleb128 0x3f
 2303 00c2 19       		.uleb128 0x19
 2304 00c3 03       		.uleb128 0x3
 2305 00c4 0E       		.uleb128 0xe
 2306 00c5 3A       		.uleb128 0x3a
 2307 00c6 0B       		.uleb128 0xb
 2308 00c7 3B       		.uleb128 0x3b
 2309 00c8 0B       		.uleb128 0xb
 2310 00c9 27       		.uleb128 0x27
 2311 00ca 19       		.uleb128 0x19
 2312 00cb 11       		.uleb128 0x11
 2313 00cc 01       		.uleb128 0x1
 2314 00cd 12       		.uleb128 0x12
 2315 00ce 06       		.uleb128 0x6
 2316 00cf 40       		.uleb128 0x40
 2317 00d0 18       		.uleb128 0x18
 2318 00d1 9642     		.uleb128 0x2116
 2319 00d3 19       		.uleb128 0x19
 2320 00d4 00       		.byte	0
 2321 00d5 00       		.byte	0
 2322 00d6 11       		.uleb128 0x11
 2323 00d7 2E       		.uleb128 0x2e
 2324 00d8 01       		.byte	0x1
 2325 00d9 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 47


 2326 00da 19       		.uleb128 0x19
 2327 00db 03       		.uleb128 0x3
 2328 00dc 0E       		.uleb128 0xe
 2329 00dd 3A       		.uleb128 0x3a
 2330 00de 0B       		.uleb128 0xb
 2331 00df 3B       		.uleb128 0x3b
 2332 00e0 0B       		.uleb128 0xb
 2333 00e1 27       		.uleb128 0x27
 2334 00e2 19       		.uleb128 0x19
 2335 00e3 11       		.uleb128 0x11
 2336 00e4 01       		.uleb128 0x1
 2337 00e5 12       		.uleb128 0x12
 2338 00e6 06       		.uleb128 0x6
 2339 00e7 40       		.uleb128 0x40
 2340 00e8 18       		.uleb128 0x18
 2341 00e9 9642     		.uleb128 0x2116
 2342 00eb 19       		.uleb128 0x19
 2343 00ec 01       		.uleb128 0x1
 2344 00ed 13       		.uleb128 0x13
 2345 00ee 00       		.byte	0
 2346 00ef 00       		.byte	0
 2347 00f0 12       		.uleb128 0x12
 2348 00f1 34       		.uleb128 0x34
 2349 00f2 00       		.byte	0
 2350 00f3 03       		.uleb128 0x3
 2351 00f4 0E       		.uleb128 0xe
 2352 00f5 3A       		.uleb128 0x3a
 2353 00f6 0B       		.uleb128 0xb
 2354 00f7 3B       		.uleb128 0x3b
 2355 00f8 0B       		.uleb128 0xb
 2356 00f9 49       		.uleb128 0x49
 2357 00fa 13       		.uleb128 0x13
 2358 00fb 02       		.uleb128 0x2
 2359 00fc 18       		.uleb128 0x18
 2360 00fd 00       		.byte	0
 2361 00fe 00       		.byte	0
 2362 00ff 13       		.uleb128 0x13
 2363 0100 05       		.uleb128 0x5
 2364 0101 00       		.byte	0
 2365 0102 03       		.uleb128 0x3
 2366 0103 0E       		.uleb128 0xe
 2367 0104 3A       		.uleb128 0x3a
 2368 0105 0B       		.uleb128 0xb
 2369 0106 3B       		.uleb128 0x3b
 2370 0107 0B       		.uleb128 0xb
 2371 0108 49       		.uleb128 0x49
 2372 0109 13       		.uleb128 0x13
 2373 010a 02       		.uleb128 0x2
 2374 010b 18       		.uleb128 0x18
 2375 010c 00       		.byte	0
 2376 010d 00       		.byte	0
 2377 010e 14       		.uleb128 0x14
 2378 010f 2E       		.uleb128 0x2e
 2379 0110 01       		.byte	0x1
 2380 0111 3F       		.uleb128 0x3f
 2381 0112 19       		.uleb128 0x19
 2382 0113 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 48


 2383 0114 0E       		.uleb128 0xe
 2384 0115 3A       		.uleb128 0x3a
 2385 0116 0B       		.uleb128 0xb
 2386 0117 3B       		.uleb128 0x3b
 2387 0118 0B       		.uleb128 0xb
 2388 0119 49       		.uleb128 0x49
 2389 011a 13       		.uleb128 0x13
 2390 011b 11       		.uleb128 0x11
 2391 011c 01       		.uleb128 0x1
 2392 011d 12       		.uleb128 0x12
 2393 011e 06       		.uleb128 0x6
 2394 011f 40       		.uleb128 0x40
 2395 0120 18       		.uleb128 0x18
 2396 0121 9642     		.uleb128 0x2116
 2397 0123 19       		.uleb128 0x19
 2398 0124 01       		.uleb128 0x1
 2399 0125 13       		.uleb128 0x13
 2400 0126 00       		.byte	0
 2401 0127 00       		.byte	0
 2402 0128 15       		.uleb128 0x15
 2403 0129 0B       		.uleb128 0xb
 2404 012a 01       		.byte	0x1
 2405 012b 55       		.uleb128 0x55
 2406 012c 17       		.uleb128 0x17
 2407 012d 00       		.byte	0
 2408 012e 00       		.byte	0
 2409 012f 16       		.uleb128 0x16
 2410 0130 2E       		.uleb128 0x2e
 2411 0131 01       		.byte	0x1
 2412 0132 3F       		.uleb128 0x3f
 2413 0133 19       		.uleb128 0x19
 2414 0134 03       		.uleb128 0x3
 2415 0135 0E       		.uleb128 0xe
 2416 0136 3A       		.uleb128 0x3a
 2417 0137 0B       		.uleb128 0xb
 2418 0138 3B       		.uleb128 0x3b
 2419 0139 0B       		.uleb128 0xb
 2420 013a 27       		.uleb128 0x27
 2421 013b 19       		.uleb128 0x19
 2422 013c 49       		.uleb128 0x49
 2423 013d 13       		.uleb128 0x13
 2424 013e 11       		.uleb128 0x11
 2425 013f 01       		.uleb128 0x1
 2426 0140 12       		.uleb128 0x12
 2427 0141 06       		.uleb128 0x6
 2428 0142 40       		.uleb128 0x40
 2429 0143 18       		.uleb128 0x18
 2430 0144 9642     		.uleb128 0x2116
 2431 0146 19       		.uleb128 0x19
 2432 0147 01       		.uleb128 0x1
 2433 0148 13       		.uleb128 0x13
 2434 0149 00       		.byte	0
 2435 014a 00       		.byte	0
 2436 014b 17       		.uleb128 0x17
 2437 014c 05       		.uleb128 0x5
 2438 014d 00       		.byte	0
 2439 014e 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 49


 2440 014f 08       		.uleb128 0x8
 2441 0150 3A       		.uleb128 0x3a
 2442 0151 0B       		.uleb128 0xb
 2443 0152 3B       		.uleb128 0x3b
 2444 0153 0B       		.uleb128 0xb
 2445 0154 49       		.uleb128 0x49
 2446 0155 13       		.uleb128 0x13
 2447 0156 02       		.uleb128 0x2
 2448 0157 18       		.uleb128 0x18
 2449 0158 00       		.byte	0
 2450 0159 00       		.byte	0
 2451 015a 18       		.uleb128 0x18
 2452 015b 34       		.uleb128 0x34
 2453 015c 00       		.byte	0
 2454 015d 03       		.uleb128 0x3
 2455 015e 08       		.uleb128 0x8
 2456 015f 3A       		.uleb128 0x3a
 2457 0160 0B       		.uleb128 0xb
 2458 0161 3B       		.uleb128 0x3b
 2459 0162 0B       		.uleb128 0xb
 2460 0163 49       		.uleb128 0x49
 2461 0164 13       		.uleb128 0x13
 2462 0165 02       		.uleb128 0x2
 2463 0166 18       		.uleb128 0x18
 2464 0167 00       		.byte	0
 2465 0168 00       		.byte	0
 2466 0169 19       		.uleb128 0x19
 2467 016a 2E       		.uleb128 0x2e
 2468 016b 01       		.byte	0x1
 2469 016c 3F       		.uleb128 0x3f
 2470 016d 19       		.uleb128 0x19
 2471 016e 03       		.uleb128 0x3
 2472 016f 0E       		.uleb128 0xe
 2473 0170 3A       		.uleb128 0x3a
 2474 0171 0B       		.uleb128 0xb
 2475 0172 3B       		.uleb128 0x3b
 2476 0173 0B       		.uleb128 0xb
 2477 0174 27       		.uleb128 0x27
 2478 0175 19       		.uleb128 0x19
 2479 0176 11       		.uleb128 0x11
 2480 0177 01       		.uleb128 0x1
 2481 0178 12       		.uleb128 0x12
 2482 0179 06       		.uleb128 0x6
 2483 017a 40       		.uleb128 0x40
 2484 017b 18       		.uleb128 0x18
 2485 017c 9742     		.uleb128 0x2117
 2486 017e 19       		.uleb128 0x19
 2487 017f 01       		.uleb128 0x1
 2488 0180 13       		.uleb128 0x13
 2489 0181 00       		.byte	0
 2490 0182 00       		.byte	0
 2491 0183 1A       		.uleb128 0x1a
 2492 0184 21       		.uleb128 0x21
 2493 0185 00       		.byte	0
 2494 0186 49       		.uleb128 0x49
 2495 0187 13       		.uleb128 0x13
 2496 0188 2F       		.uleb128 0x2f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 50


 2497 0189 05       		.uleb128 0x5
 2498 018a 00       		.byte	0
 2499 018b 00       		.byte	0
 2500 018c 1B       		.uleb128 0x1b
 2501 018d 34       		.uleb128 0x34
 2502 018e 00       		.byte	0
 2503 018f 03       		.uleb128 0x3
 2504 0190 0E       		.uleb128 0xe
 2505 0191 3A       		.uleb128 0x3a
 2506 0192 0B       		.uleb128 0xb
 2507 0193 3B       		.uleb128 0x3b
 2508 0194 05       		.uleb128 0x5
 2509 0195 49       		.uleb128 0x49
 2510 0196 13       		.uleb128 0x13
 2511 0197 3F       		.uleb128 0x3f
 2512 0198 19       		.uleb128 0x19
 2513 0199 3C       		.uleb128 0x3c
 2514 019a 19       		.uleb128 0x19
 2515 019b 00       		.byte	0
 2516 019c 00       		.byte	0
 2517 019d 1C       		.uleb128 0x1c
 2518 019e 34       		.uleb128 0x34
 2519 019f 00       		.byte	0
 2520 01a0 03       		.uleb128 0x3
 2521 01a1 0E       		.uleb128 0xe
 2522 01a2 3A       		.uleb128 0x3a
 2523 01a3 0B       		.uleb128 0xb
 2524 01a4 3B       		.uleb128 0x3b
 2525 01a5 0B       		.uleb128 0xb
 2526 01a6 49       		.uleb128 0x49
 2527 01a7 13       		.uleb128 0x13
 2528 01a8 3F       		.uleb128 0x3f
 2529 01a9 19       		.uleb128 0x19
 2530 01aa 02       		.uleb128 0x2
 2531 01ab 18       		.uleb128 0x18
 2532 01ac 00       		.byte	0
 2533 01ad 00       		.byte	0
 2534 01ae 1D       		.uleb128 0x1d
 2535 01af 34       		.uleb128 0x34
 2536 01b0 00       		.byte	0
 2537 01b1 03       		.uleb128 0x3
 2538 01b2 08       		.uleb128 0x8
 2539 01b3 3A       		.uleb128 0x3a
 2540 01b4 0B       		.uleb128 0xb
 2541 01b5 3B       		.uleb128 0x3b
 2542 01b6 0B       		.uleb128 0xb
 2543 01b7 49       		.uleb128 0x49
 2544 01b8 13       		.uleb128 0x13
 2545 01b9 3F       		.uleb128 0x3f
 2546 01ba 19       		.uleb128 0x19
 2547 01bb 02       		.uleb128 0x2
 2548 01bc 18       		.uleb128 0x18
 2549 01bd 00       		.byte	0
 2550 01be 00       		.byte	0
 2551 01bf 00       		.byte	0
 2552              		.section	.debug_aranges,"",%progbits
 2553 0000 6C000000 		.4byte	0x6c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 51


 2554 0004 0200     		.2byte	0x2
 2555 0006 00000000 		.4byte	.Ldebug_info0
 2556 000a 04       		.byte	0x4
 2557 000b 00       		.byte	0
 2558 000c 0000     		.2byte	0
 2559 000e 0000     		.2byte	0
 2560 0010 00000000 		.4byte	.LFB64
 2561 0014 14000000 		.4byte	.LFE64-.LFB64
 2562 0018 00000000 		.4byte	.LFB65
 2563 001c 14000000 		.4byte	.LFE65-.LFB65
 2564 0020 00000000 		.4byte	.LFB66
 2565 0024 28000000 		.4byte	.LFE66-.LFB66
 2566 0028 00000000 		.4byte	.LFB67
 2567 002c 70000000 		.4byte	.LFE67-.LFB67
 2568 0030 00000000 		.4byte	.LFB68
 2569 0034 1C000000 		.4byte	.LFE68-.LFB68
 2570 0038 00000000 		.4byte	.LFB69
 2571 003c 04010000 		.4byte	.LFE69-.LFB69
 2572 0040 00000000 		.4byte	.LFB70
 2573 0044 1C010000 		.4byte	.LFE70-.LFB70
 2574 0048 00000000 		.4byte	.LFB71
 2575 004c CC000000 		.4byte	.LFE71-.LFB71
 2576 0050 00000000 		.4byte	.LFB72
 2577 0054 8E000000 		.4byte	.LFE72-.LFB72
 2578 0058 00000000 		.4byte	.LFB73
 2579 005c 98000000 		.4byte	.LFE73-.LFB73
 2580 0060 00000000 		.4byte	.LFB74
 2581 0064 2A000000 		.4byte	.LFE74-.LFB74
 2582 0068 00000000 		.4byte	0
 2583 006c 00000000 		.4byte	0
 2584              		.section	.debug_ranges,"",%progbits
 2585              	.Ldebug_ranges0:
 2586 0000 70000000 		.4byte	.LBB2
 2587 0004 C0000000 		.4byte	.LBE2
 2588 0008 D2000000 		.4byte	.LBB3
 2589 000c D4000000 		.4byte	.LBE3
 2590 0010 00000000 		.4byte	0
 2591 0014 00000000 		.4byte	0
 2592 0018 00000000 		.4byte	.LFB64
 2593 001c 14000000 		.4byte	.LFE64
 2594 0020 00000000 		.4byte	.LFB65
 2595 0024 14000000 		.4byte	.LFE65
 2596 0028 00000000 		.4byte	.LFB66
 2597 002c 28000000 		.4byte	.LFE66
 2598 0030 00000000 		.4byte	.LFB67
 2599 0034 70000000 		.4byte	.LFE67
 2600 0038 00000000 		.4byte	.LFB68
 2601 003c 1C000000 		.4byte	.LFE68
 2602 0040 00000000 		.4byte	.LFB69
 2603 0044 04010000 		.4byte	.LFE69
 2604 0048 00000000 		.4byte	.LFB70
 2605 004c 1C010000 		.4byte	.LFE70
 2606 0050 00000000 		.4byte	.LFB71
 2607 0054 CC000000 		.4byte	.LFE71
 2608 0058 00000000 		.4byte	.LFB72
 2609 005c 8E000000 		.4byte	.LFE72
 2610 0060 00000000 		.4byte	.LFB73
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 52


 2611 0064 98000000 		.4byte	.LFE73
 2612 0068 00000000 		.4byte	.LFB74
 2613 006c 2A000000 		.4byte	.LFE74
 2614 0070 00000000 		.4byte	0
 2615 0074 00000000 		.4byte	0
 2616              		.section	.debug_line,"",%progbits
 2617              	.Ldebug_line0:
 2618 0000 EE020000 		.section	.debug_str,"MS",%progbits,1
 2618      0200A301 
 2618      00000201 
 2618      FB0E0D00 
 2618      01010101 
 2619              	.LASF19:
 2620 0000 75696E74 		.ascii	"uint16\000"
 2620      313600
 2621              	.LASF29:
 2622 0007 6E756D5F 		.ascii	"num_invalid_readings\000"
 2622      696E7661 
 2622      6C69645F 
 2622      72656164 
 2622      696E6773 
 2623              	.LASF118:
 2624 001c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2624      73657273 
 2624      5C64616E 
 2624      747A5C44 
 2624      6F63756D 
 2625 0049 72694F53 		.ascii	"riOS.cydsn\000"
 2625      2E637964 
 2625      736E00
 2626              	.LASF93:
 2627 0054 62756666 		.ascii	"buffer_overflow\000"
 2627      65725F6F 
 2627      76657266 
 2627      6C6F7700 
 2628              	.LASF4:
 2629 0064 5F5F7569 		.ascii	"__uint8_t\000"
 2629      6E74385F 
 2629      7400
 2630              	.LASF57:
 2631 006e 636F756E 		.ascii	"countDownResetCondition\000"
 2631      74446F77 
 2631      6E526573 
 2631      6574436F 
 2631      6E646974 
 2632              	.LASF116:
 2633 0086 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2633      43313120 
 2633      352E342E 
 2633      31203230 
 2633      31363036 
 2634 00b9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2634      20726576 
 2634      6973696F 
 2634      6E203233 
 2634      37373135 
 2635 00ec 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 53


 2635      66756E63 
 2635      74696F6E 
 2635      2D736563 
 2635      74696F6E 
 2636              	.LASF86:
 2637 0114 75617274 		.ascii	"uart_chars\000"
 2637      5F636861 
 2637      727300
 2638              	.LASF9:
 2639 011f 6C6F6E67 		.ascii	"long long unsigned int\000"
 2639      206C6F6E 
 2639      6720756E 
 2639      7369676E 
 2639      65642069 
 2640              	.LASF97:
 2641 0136 6D6F6465 		.ascii	"modem_state\000"
 2641      6D5F7374 
 2641      61746500 
 2642              	.LASF79:
 2643 0142 74657374 		.ascii	"test\000"
 2643      00
 2644              	.LASF107:
 2645 0147 616C6172 		.ascii	"alarmMeasure\000"
 2645      6D4D6561 
 2645      73757265 
 2645      00
 2646              	.LASF91:
 2647 0154 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2647      52784275 
 2647      66666572 
 2647      00
 2648              	.LASF117:
 2649 0161 6C657665 		.ascii	"level_sensor.c\000"
 2649      6C5F7365 
 2649      6E736F72 
 2649      2E6300
 2650              	.LASF83:
 2651 0170 6D656469 		.ascii	"median\000"
 2651      616E00
 2652              	.LASF115:
 2653 0177 74696D65 		.ascii	"timetoLevelSensor\000"
 2653      746F4C65 
 2653      76656C53 
 2653      656E736F 
 2653      7200
 2654              	.LASF99:
 2655 0189 6D6F6465 		.ascii	"modem_stats\000"
 2655      6D5F7374 
 2655      61747300 
 2656              	.LASF8:
 2657 0195 6C6F6E67 		.ascii	"long long int\000"
 2657      206C6F6E 
 2657      6720696E 
 2657      7400
 2658              	.LASF0:
 2659 01a3 7369676E 		.ascii	"signed char\000"
 2659      65642063 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 54


 2659      68617200 
 2660              	.LASF40:
 2661 01af 65636E6F 		.ascii	"ecno\000"
 2661      00
 2662              	.LASF54:
 2663 01b4 636F756E 		.ascii	"countDownValue\000"
 2663      74446F77 
 2663      6E56616C 
 2663      756500
 2664              	.LASF108:
 2665 01c3 74696D65 		.ascii	"timeToMeasure\000"
 2665      546F4D65 
 2665      61737572 
 2665      6500
 2666              	.LASF43:
 2667 01d1 74696D65 		.ascii	"time_to_network_connect\000"
 2667      5F746F5F 
 2667      6E657477 
 2667      6F726B5F 
 2667      636F6E6E 
 2668              	.LASF110:
 2669 01e9 74696D65 		.ascii	"timeToSync\000"
 2669      546F5379 
 2669      6E6300
 2670              	.LASF69:
 2671 01f4 6C657665 		.ascii	"level_sensor\000"
 2671      6C5F7365 
 2671      6E736F72 
 2671      00
 2672              	.LASF103:
 2673 0201 68747470 		.ascii	"http_body\000"
 2673      5F626F64 
 2673      7900
 2674              	.LASF37:
 2675 020b 6D6F6465 		.ascii	"modem_info_t\000"
 2675      6D5F696E 
 2675      666F5F74 
 2675      00
 2676              	.LASF38:
 2677 0218 72786C65 		.ascii	"rxlev\000"
 2677      7600
 2678              	.LASF6:
 2679 021e 6C6F6E67 		.ascii	"long int\000"
 2679      20696E74 
 2679      00
 2680              	.LASF55:
 2681 0227 63757272 		.ascii	"currentCountDownValue\000"
 2681      656E7443 
 2681      6F756E74 
 2681      446F776E 
 2681      56616C75 
 2682              	.LASF58:
 2683 023d 616C6172 		.ascii	"alarm\000"
 2683      6D00
 2684              	.LASF18:
 2685 0243 75696E74 		.ascii	"uint8\000"
 2685      3800
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 55


 2686              	.LASF75:
 2687 0249 6C657665 		.ascii	"level_sensor_output\000"
 2687      6C5F7365 
 2687      6E736F72 
 2687      5F6F7574 
 2687      70757400 
 2688              	.LASF113:
 2689 025d 74696D65 		.ascii	"timeToAppLED\000"
 2689      546F4170 
 2689      704C4544 
 2689      00
 2690              	.LASF21:
 2691 026a 696E7433 		.ascii	"int32\000"
 2691      3200
 2692              	.LASF77:
 2693 0270 72656164 		.ascii	"reading\000"
 2693      696E6700 
 2694              	.LASF82:
 2695 0278 61727261 		.ascii	"array\000"
 2695      7900
 2696              	.LASF60:
 2697 027e 63686970 		.ascii	"chip_uniqueId\000"
 2697      5F756E69 
 2697      71756549 
 2697      6400
 2698              	.LASF35:
 2699 028c 6D6F6465 		.ascii	"model_id\000"
 2699      6C5F6964 
 2699      00
 2700              	.LASF26:
 2701 0295 616C6C5F 		.ascii	"all_level_readings\000"
 2701      6C657665 
 2701      6C5F7265 
 2701      6164696E 
 2701      677300
 2702              	.LASF88:
 2703 02a8 6C696E65 		.ascii	"line\000"
 2703      00
 2704              	.LASF84:
 2705 02ad 736F7274 		.ascii	"sort\000"
 2705      00
 2706              	.LASF49:
 2707 02b2 64656275 		.ascii	"debug_level\000"
 2707      675F6C65 
 2707      76656C00 
 2708              	.LASF31:
 2709 02be 76616C75 		.ascii	"value\000"
 2709      6500
 2710              	.LASF109:
 2711 02c4 616C6172 		.ascii	"alarmSync\000"
 2711      6D53796E 
 2711      6300
 2712              	.LASF10:
 2713 02ce 756E7369 		.ascii	"unsigned int\000"
 2713      676E6564 
 2713      20696E74 
 2713      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 56


 2714              	.LASF33:
 2715 02db 6B65795F 		.ascii	"key_value_t\000"
 2715      76616C75 
 2715      655F7400 
 2716              	.LASF28:
 2717 02e7 6E756D5F 		.ascii	"num_valid_readings\000"
 2717      76616C69 
 2717      645F7265 
 2717      6164696E 
 2717      677300
 2718              	.LASF7:
 2719 02fa 6C6F6E67 		.ascii	"long unsigned int\000"
 2719      20756E73 
 2719      69676E65 
 2719      6420696E 
 2719      7400
 2720              	.LASF65:
 2721 030c 75617274 		.ascii	"uart_string\000"
 2721      5F737472 
 2721      696E6700 
 2722              	.LASF96:
 2723 0318 64617461 		.ascii	"data\000"
 2723      00
 2724              	.LASF63:
 2725 031d 65705F70 		.ascii	"ep_port\000"
 2725      6F727400 
 2726              	.LASF59:
 2727 0325 6D6F6465 		.ascii	"modem_info\000"
 2727      6D5F696E 
 2727      666F00
 2728              	.LASF62:
 2729 0330 65705F68 		.ascii	"ep_host\000"
 2729      6F737400 
 2730              	.LASF80:
 2731 0338 73656E73 		.ascii	"sensor\000"
 2731      6F7200
 2732              	.LASF44:
 2733 033f 74696D65 		.ascii	"time_to_acquire_ip\000"
 2733      5F746F5F 
 2733      61637175 
 2733      6972655F 
 2733      697000
 2734              	.LASF2:
 2735 0352 73686F72 		.ascii	"short int\000"
 2735      7420696E 
 2735      7400
 2736              	.LASF112:
 2737 035c 616C6172 		.ascii	"alarmAppLED\000"
 2737      6D417070 
 2737      4C454400 
 2738              	.LASF98:
 2739 0368 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2739      6D5F7374 
 2739      6172745F 
 2739      74696D65 
 2739      5F737461 
 2740              	.LASF61:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 57


 2741 037f 7379735F 		.ascii	"sys_info_t\000"
 2741      696E666F 
 2741      5F7400
 2742              	.LASF53:
 2743 038a 75706461 		.ascii	"updatable_parameters_t\000"
 2743      7461626C 
 2743      655F7061 
 2743      72616D65 
 2743      74657273 
 2744              	.LASF94:
 2745 03a1 64617461 		.ascii	"dataPointsInStack\000"
 2745      506F696E 
 2745      7473496E 
 2745      53746163 
 2745      6B00
 2746              	.LASF87:
 2747 03b3 6E756D5F 		.ascii	"num_chars\000"
 2747      63686172 
 2747      7300
 2748              	.LASF67:
 2749 03bd 4C657665 		.ascii	"Level_Sensor_ISR\000"
 2749      6C5F5365 
 2749      6E736F72 
 2749      5F495352 
 2749      00
 2750              	.LASF14:
 2751 03ce 73697A65 		.ascii	"sizetype\000"
 2751      74797065 
 2751      00
 2752              	.LASF22:
 2753 03d7 74657374 		.ascii	"test_name\000"
 2753      5F6E616D 
 2753      6500
 2754              	.LASF111:
 2755 03e1 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2755      546F5379 
 2755      636E5265 
 2755      6D6F7465 
 2755      50617261 
 2756              	.LASF32:
 2757 03f8 74696D65 		.ascii	"timeStamp\000"
 2757      5374616D 
 2757      7000
 2758              	.LASF89:
 2759 0402 6D617463 		.ascii	"match\000"
 2759      6800
 2760              	.LASF100:
 2761 0408 75706461 		.ascii	"updatable_parameters\000"
 2761      7461626C 
 2761      655F7061 
 2761      72616D65 
 2761      74657273 
 2762              	.LASF66:
 2763 041d 75617274 		.ascii	"uart_len\000"
 2763      5F6C656E 
 2763      00
 2764              	.LASF90:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 58


 2765 0426 70617474 		.ascii	"pattern\000"
 2765      65726E00 
 2766              	.LASF85:
 2767 042e 73776170 		.ascii	"swap\000"
 2767      00
 2768              	.LASF71:
 2769 0433 636F6D70 		.ascii	"compare_location\000"
 2769      6172655F 
 2769      6C6F6361 
 2769      74696F6E 
 2769      00
 2770              	.LASF17:
 2771 0444 666C6F61 		.ascii	"float\000"
 2771      7400
 2772              	.LASF78:
 2773 044a 6C657665 		.ascii	"level_sensor_test\000"
 2773      6C5F7365 
 2773      6E736F72 
 2773      5F746573 
 2773      7400
 2774              	.LASF30:
 2775 045c 6C657665 		.ascii	"level_sensor_t\000"
 2775      6C5F7365 
 2775      6E736F72 
 2775      5F7400
 2776              	.LASF76:
 2777 046b 746F6B65 		.ascii	"token\000"
 2777      6E00
 2778              	.LASF52:
 2779 0471 5F426F6F 		.ascii	"_Bool\000"
 2779      6C00
 2780              	.LASF12:
 2781 0477 696E7433 		.ascii	"int32_t\000"
 2781      325F7400 
 2782              	.LASF1:
 2783 047f 756E7369 		.ascii	"unsigned char\000"
 2783      676E6564 
 2783      20636861 
 2783      7200
 2784              	.LASF106:
 2785 048d 73797374 		.ascii	"system_settings\000"
 2785      656D5F73 
 2785      65747469 
 2785      6E677300 
 2786              	.LASF25:
 2787 049d 74657374 		.ascii	"test_t\000"
 2787      5F7400
 2788              	.LASF42:
 2789 04a4 72737270 		.ascii	"rsrp\000"
 2789      00
 2790              	.LASF41:
 2791 04a9 72737271 		.ascii	"rsrq\000"
 2791      00
 2792              	.LASF48:
 2793 04ae 73796E63 		.ascii	"sync_time\000"
 2793      5F74696D 
 2793      6500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 59


 2794              	.LASF119:
 2795 04b8 75617274 		.ascii	"uart_clear\000"
 2795      5F636C65 
 2795      617200
 2796              	.LASF39:
 2797 04c3 72736370 		.ascii	"rscp\000"
 2797      00
 2798              	.LASF105:
 2799 04c8 73797374 		.ascii	"system_info\000"
 2799      656D5F69 
 2799      6E666F00 
 2800              	.LASF36:
 2801 04d4 696D6569 		.ascii	"imei\000"
 2801      00
 2802              	.LASF24:
 2803 04d9 72656173 		.ascii	"reason\000"
 2803      6F6E00
 2804              	.LASF70:
 2805 04e0 72785F63 		.ascii	"rx_char\000"
 2805      68617200 
 2806              	.LASF45:
 2807 04e8 6D6F6465 		.ascii	"modem_stats_t\000"
 2807      6D5F7374 
 2807      6174735F 
 2807      7400
 2808              	.LASF114:
 2809 04f6 616C6172 		.ascii	"alarmLevelSensor\000"
 2809      6D4C6576 
 2809      656C5365 
 2809      6E736F72 
 2809      00
 2810              	.LASF51:
 2811 0507 4C657665 		.ascii	"Level_Sensor_freq\000"
 2811      6C5F5365 
 2811      6E736F72 
 2811      5F667265 
 2811      7100
 2812              	.LASF92:
 2813 0519 6C657665 		.ascii	"level_sensor_inbox\000"
 2813      6C5F7365 
 2813      6E736F72 
 2813      5F696E62 
 2813      6F7800
 2814              	.LASF13:
 2815 052c 6C6F6E67 		.ascii	"long double\000"
 2815      20646F75 
 2815      626C6500 
 2816              	.LASF72:
 2817 0538 635F7469 		.ascii	"c_timeStamp\000"
 2817      6D655374 
 2817      616D7000 
 2818              	.LASF15:
 2819 0544 63686172 		.ascii	"char\000"
 2819      00
 2820              	.LASF104:
 2821 0549 68747470 		.ascii	"http_route\000"
 2821      5F726F75 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 60


 2821      746500
 2822              	.LASF5:
 2823 0554 5F5F696E 		.ascii	"__int32_t\000"
 2823      7433325F 
 2823      7400
 2824              	.LASF47:
 2825 055e 6D656173 		.ascii	"measure_time\000"
 2825      7572655F 
 2825      74696D65 
 2825      00
 2826              	.LASF73:
 2827 056b 6D5F6C65 		.ascii	"m_level_sensor\000"
 2827      76656C5F 
 2827      73656E73 
 2827      6F7200
 2828              	.LASF27:
 2829 057a 6C657665 		.ascii	"level_reading\000"
 2829      6C5F7265 
 2829      6164696E 
 2829      6700
 2830              	.LASF3:
 2831 0588 73686F72 		.ascii	"short unsigned int\000"
 2831      7420756E 
 2831      7369676E 
 2831      65642069 
 2831      6E7400
 2832              	.LASF34:
 2833 059b 73696D5F 		.ascii	"sim_id\000"
 2833      696400
 2834              	.LASF68:
 2835 05a2 4C657665 		.ascii	"Level_Sensor_Update\000"
 2835      6C5F5365 
 2835      6E736F72 
 2835      5F557064 
 2835      61746500 
 2836              	.LASF120:
 2837 05b6 66696E64 		.ascii	"find_median\000"
 2837      5F6D6564 
 2837      69616E00 
 2838              	.LASF23:
 2839 05c2 73746174 		.ascii	"status\000"
 2839      757300
 2840              	.LASF95:
 2841 05c9 64617461 		.ascii	"dataPointsInStackDesired\000"
 2841      506F696E 
 2841      7473496E 
 2841      53746163 
 2841      6B446573 
 2842              	.LASF50:
 2843 05e2 4170705F 		.ascii	"App_LED_freq\000"
 2843      4C45445F 
 2843      66726571 
 2843      00
 2844              	.LASF74:
 2845 05ef 6C657665 		.ascii	"level_sensor_take_reading\000"
 2845      6C5F7365 
 2845      6E736F72 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccaRA1mg.s 			page 61


 2845      5F74616B 
 2845      655F7265 
 2846              	.LASF64:
 2847 0609 7379735F 		.ascii	"sys_settings_t\000"
 2847      73657474 
 2847      696E6773 
 2847      5F7400
 2848              	.LASF11:
 2849 0618 75696E74 		.ascii	"uint8_t\000"
 2849      385F7400 
 2850              	.LASF20:
 2851 0620 696E7431 		.ascii	"int16\000"
 2851      3600
 2852              	.LASF56:
 2853 0626 636F756E 		.ascii	"countDownType\000"
 2853      74446F77 
 2853      6E547970 
 2853      6500
 2854              	.LASF46:
 2855 0634 73696D5F 		.ascii	"sim_type\000"
 2855      74797065 
 2855      00
 2856              	.LASF81:
 2857 063d 6D657373 		.ascii	"message\000"
 2857      61676500 
 2858              	.LASF102:
 2859 0645 68747470 		.ascii	"http_request\000"
 2859      5F726571 
 2859      75657374 
 2859      00
 2860              	.LASF16:
 2861 0652 646F7562 		.ascii	"double\000"
 2861      6C6500
 2862              	.LASF101:
 2863 0659 6170705F 		.ascii	"app_led_inbox\000"
 2863      6C65645F 
 2863      696E626F 
 2863      7800
 2864              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
