ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"level_sensor.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	buffer_overflow,1,1
  22              		.comm	dataPointsInStack,2,2
  23              		.comm	dataPointsInStackDesired,2,2
  24              		.comm	data,6600,4
  25              		.comm	modem_state,1,1
  26              		.comm	modem_start_time_stamp,4,4
  27              		.comm	modem_info,60,4
  28              		.comm	modem_stats,32,4
  29              		.comm	updatable_parameters,7,4
  30              		.syntax unified
  31              		.global _printf_float
  32              		.thumb
  33              		.syntax unified
  34              		.comm	App_LED_enabled,1,1
  35              		.comm	app_led_inbox,100,4
  36              		.comm	http_request,10000,4
  37              		.comm	http_body,10000,4
  38              		.comm	http_route,200,4
  39              		.comm	system_info,28,4
  40              		.comm	system_settings,104,4
  41              		.comm	alarmMeasure,6,4
  42              		.comm	timeToMeasure,1,1
  43              		.comm	alarmSync,6,4
  44              		.comm	timeToSync,1,1
  45              		.comm	timeToSycnRemoteParams,1,1
  46              		.comm	hey,1,1
  47              		.comm	alarmAppLED,6,4
  48              		.comm	timeToAppLED,1,1
  49              		.comm	alarmLevelSensor,6,4
  50              		.comm	timetoLevelSensor,1,1
  51              		.bss
  52              		.align	2
  53              	uart_chars:
  54 0000 00000000 		.space	257
  54      00000000 
  54      00000000 
  54      00000000 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 2


  54      00000000 
  55              	num_chars:
  56 0101 00       		.space	1
  57              		.data
  58              		.align	2
  59              		.type	line, %object
  60              		.size	line, 4
  61              	line:
  62 0000 00000000 		.word	uart_chars
  63              		.bss
  64 0102 0000     		.align	2
  65              	match:
  66 0104 00000000 		.space	4
  67              		.align	2
  68              	pattern:
  69 0108 00000000 		.space	4
  70              		.section	.text.uart_string,"ax",%progbits
  71              		.align	2
  72              		.global	uart_string
  73              		.thumb
  74              		.thumb_func
  75              		.type	uart_string, %function
  76              	uart_string:
  77              	.LFB64:
  78              		.file 1 "level_sensor.c"
   1:level_sensor.c **** #include "level_sensor.h"
   2:level_sensor.c **** #include "notoriOS.h"
   3:level_sensor.c **** #include "debug.h"
   4:level_sensor.c **** 
   5:level_sensor.c **** /* === Driver Functions === */
   6:level_sensor.c **** 
   7:level_sensor.c **** //Sensor related global calls
   8:level_sensor.c **** 
   9:level_sensor.c **** 
  10:level_sensor.c **** // Circular buffer of recently received chars.
  11:level_sensor.c **** // Initialize all the members of the array uart_chars to 0. 
  12:level_sensor.c **** static char uart_chars[257] = {0};
  13:level_sensor.c **** static uint8_t num_chars = 0;
  14:level_sensor.c **** 
  15:level_sensor.c **** static const char *line = uart_chars;
  16:level_sensor.c **** // Only pointers can be null, where null is a special address used to signify that the pointer is n
  17:level_sensor.c **** // Pointers are not initialized to null by default, you must do so if you want them initialized.
  18:level_sensor.c **** static const char *match = NULL;
  19:level_sensor.c **** static const char *pattern = NULL;
  20:level_sensor.c **** 
  21:level_sensor.c **** 
  22:level_sensor.c **** // This is only defined in c file so this function will return the location in memory where that va
  23:level_sensor.c **** const char *uart_string(void) {
  79              		.loc 1 23 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84 0000 80B4     		push	{r7}
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 7, -4
  87 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 3


  88              		.cfi_def_cfa_register 7
  24:level_sensor.c ****     // Variables in front of a variable is casting 
  25:level_sensor.c ****     // uart_chars may be a different variable type, make sure to cast it as a char
  26:level_sensor.c ****   return (char*)uart_chars;
  89              		.loc 1 26 0
  90 0004 024B     		ldr	r3, .L3
  27:level_sensor.c **** }
  91              		.loc 1 27 0
  92 0006 1846     		mov	r0, r3
  93 0008 BD46     		mov	sp, r7
  94              		.cfi_def_cfa_register 13
  95              		@ sp needed
  96 000a 80BC     		pop	{r7}
  97              		.cfi_restore 7
  98              		.cfi_def_cfa_offset 0
  99 000c 7047     		bx	lr
 100              	.L4:
 101 000e 00BF     		.align	2
 102              	.L3:
 103 0010 00000000 		.word	uart_chars
 104              		.cfi_endproc
 105              	.LFE64:
 106              		.size	uart_string, .-uart_string
 107              		.section	.text.uart_len,"ax",%progbits
 108              		.align	2
 109              		.global	uart_len
 110              		.thumb
 111              		.thumb_func
 112              		.type	uart_len, %function
 113              	uart_len:
 114              	.LFB65:
  28:level_sensor.c **** 
  29:level_sensor.c **** // Return the number of characters of the level sensor reading
  30:level_sensor.c **** uint8_t uart_len(void) {
 115              		.loc 1 30 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 7, -4
 123 0002 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
  31:level_sensor.c ****   return num_chars;
 125              		.loc 1 31 0
 126 0004 024B     		ldr	r3, .L7
 127 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  32:level_sensor.c **** }
 128              		.loc 1 32 0
 129 0008 1846     		mov	r0, r3
 130 000a BD46     		mov	sp, r7
 131              		.cfi_def_cfa_register 13
 132              		@ sp needed
 133 000c 80BC     		pop	{r7}
 134              		.cfi_restore 7
 135              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 4


 136 000e 7047     		bx	lr
 137              	.L8:
 138              		.align	2
 139              	.L7:
 140 0010 01010000 		.word	num_chars
 141              		.cfi_endproc
 142              	.LFE65:
 143              		.size	uart_len, .-uart_len
 144              		.section	.text.uart_clear,"ax",%progbits
 145              		.align	2
 146              		.global	uart_clear
 147              		.thumb
 148              		.thumb_func
 149              		.type	uart_clear, %function
 150              	uart_clear:
 151              	.LFB66:
  33:level_sensor.c **** 
  34:level_sensor.c **** // Clears the sensor data 
  35:level_sensor.c **** void uart_clear(void) {
 152              		.loc 1 35 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 80B5     		push	{r7, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 160 0002 00AF     		add	r7, sp, #0
 161              		.cfi_def_cfa_register 7
  36:level_sensor.c ****   // UART_ClearRxBuffer(): Clears the receiver memory buffer and hardware RX FIFO of all received d
  37:level_sensor.c ****   Level_Sensor_UART_ClearRxBuffer();
 162              		.loc 1 37 0
 163 0004 FFF7FEFF 		bl	Level_Sensor_UART_ClearRxBuffer
  38:level_sensor.c ****   // void *memset(void *str, int c, size_t n) where str is a pointer to the block of memory to fill
  39:level_sensor.c ****   // The value is passed as an int, but the function fills the block of memory using the unsigned c
  40:level_sensor.c ****   // n is the number of bytes to be set to the value.
  41:level_sensor.c ****   memset((void*)uart_chars, 0, 256);
 164              		.loc 1 41 0
 165 0008 4FF48072 		mov	r2, #256
 166 000c 0021     		movs	r1, #0
 167 000e 0448     		ldr	r0, .L10
 168 0010 FFF7FEFF 		bl	memset
  42:level_sensor.c ****   num_chars = 0;
 169              		.loc 1 42 0
 170 0014 034B     		ldr	r3, .L10+4
 171 0016 0022     		movs	r2, #0
 172 0018 1A70     		strb	r2, [r3]
  43:level_sensor.c **** }
 173              		.loc 1 43 0
 174 001a 00BF     		nop
 175 001c 80BD     		pop	{r7, pc}
 176              	.L11:
 177 001e 00BF     		.align	2
 178              	.L10:
 179 0020 00000000 		.word	uart_chars
 180 0024 01010000 		.word	num_chars
 181              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 5


 182              	.LFE66:
 183              		.size	uart_clear, .-uart_clear
 184              		.section	.text.Level_Sensor_ISR,"ax",%progbits
 185              		.align	2
 186              		.global	Level_Sensor_ISR
 187              		.thumb
 188              		.thumb_func
 189              		.type	Level_Sensor_ISR, %function
 190              	Level_Sensor_ISR:
 191              	.LFB67:
  44:level_sensor.c **** 
  45:level_sensor.c **** // ISR: Interrupt Service Routine
  46:level_sensor.c **** CY_ISR(Level_Sensor_ISR) {
 192              		.loc 1 46 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 8
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196 0000 80B5     		push	{r7, lr}
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 82B0     		sub	sp, sp, #8
 201              		.cfi_def_cfa_offset 16
 202 0004 00AF     		add	r7, sp, #0
 203              		.cfi_def_cfa_register 7
  47:level_sensor.c ****     /* Store received char in uart_chars.
  48:level_sensor.c ****     Returns the last received byte of data. Level_Sensor_UART_GetChar() is designed for ASCII chara
  49:level_sensor.c ****     1 to 255 are values for valid characters and 0 indicats an error occurred or no data is present
  50:level_sensor.c ****     char rx_char = Level_Sensor_UART_GetChar();
 204              		.loc 1 50 0
 205 0006 FFF7FEFF 		bl	Level_Sensor_UART_GetChar
 206 000a 0346     		mov	r3, r0
 207 000c FB71     		strb	r3, [r7, #7]
  51:level_sensor.c ****     // UART_GetChar() returns data, then set the entire uart_chars array to rx_char.
  52:level_sensor.c ****     if (rx_char) uart_chars[num_chars++] = rx_char;
 208              		.loc 1 52 0
 209 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 210 0010 002B     		cmp	r3, #0
 211 0012 09D0     		beq	.L13
 212              		.loc 1 52 0 is_stmt 0 discriminator 1
 213 0014 114B     		ldr	r3, .L16
 214 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 215 0018 5A1C     		adds	r2, r3, #1
 216 001a D1B2     		uxtb	r1, r2
 217 001c 0F4A     		ldr	r2, .L16
 218 001e 1170     		strb	r1, [r2]
 219 0020 1946     		mov	r1, r3
 220 0022 0F4A     		ldr	r2, .L16+4
 221 0024 FB79     		ldrb	r3, [r7, #7]
 222 0026 5354     		strb	r3, [r2, r1]
 223              	.L13:
  53:level_sensor.c **** 
  54:level_sensor.c ****     /* Check pattern at end of line */
  55:level_sensor.c ****     if (rx_char == '\r') {
 224              		.loc 1 55 0 is_stmt 1
 225 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 226 002a 0D2B     		cmp	r3, #13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 6


 227 002c 11D1     		bne	.L15
  56:level_sensor.c ****         // strstr(): char *strstr(const char *haystack, const char *needle). haystack - main C stri
  57:level_sensor.c ****         match = strstr(line, pattern);
 228              		.loc 1 57 0
 229 002e 0D4B     		ldr	r3, .L16+8
 230 0030 1A68     		ldr	r2, [r3]
 231 0032 0D4B     		ldr	r3, .L16+12
 232 0034 1B68     		ldr	r3, [r3]
 233 0036 1946     		mov	r1, r3
 234 0038 1046     		mov	r0, r2
 235 003a FFF7FEFF 		bl	strstr
 236 003e 0246     		mov	r2, r0
 237 0040 0A4B     		ldr	r3, .L16+16
 238 0042 1A60     		str	r2, [r3]
  58:level_sensor.c ****         line = uart_chars + num_chars;
 239              		.loc 1 58 0
 240 0044 054B     		ldr	r3, .L16
 241 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 242 0048 1A46     		mov	r2, r3
 243 004a 054B     		ldr	r3, .L16+4
 244 004c 1344     		add	r3, r3, r2
 245 004e 054A     		ldr	r2, .L16+8
 246 0050 1360     		str	r3, [r2]
 247              	.L15:
  59:level_sensor.c ****     }
  60:level_sensor.c **** }
 248              		.loc 1 60 0
 249 0052 00BF     		nop
 250 0054 0837     		adds	r7, r7, #8
 251              		.cfi_def_cfa_offset 8
 252 0056 BD46     		mov	sp, r7
 253              		.cfi_def_cfa_register 13
 254              		@ sp needed
 255 0058 80BD     		pop	{r7, pc}
 256              	.L17:
 257 005a 00BF     		.align	2
 258              	.L16:
 259 005c 01010000 		.word	num_chars
 260 0060 00000000 		.word	uart_chars
 261 0064 00000000 		.word	line
 262 0068 08010000 		.word	pattern
 263 006c 04010000 		.word	match
 264              		.cfi_endproc
 265              	.LFE67:
 266              		.size	Level_Sensor_ISR, .-Level_Sensor_ISR
 267              		.section	.text.Level_Sensor_Update,"ax",%progbits
 268              		.align	2
 269              		.global	Level_Sensor_Update
 270              		.thumb
 271              		.thumb_func
 272              		.type	Level_Sensor_Update, %function
 273              	Level_Sensor_Update:
 274              	.LFB68:
  61:level_sensor.c **** 
  62:level_sensor.c **** void Level_Sensor_Update(char * message){
 275              		.loc 1 62 0
 276              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 7


 277              		@ args = 0, pretend = 0, frame = 8
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279 0000 80B5     		push	{r7, lr}
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 7, -8
 282              		.cfi_offset 14, -4
 283 0002 82B0     		sub	sp, sp, #8
 284              		.cfi_def_cfa_offset 16
 285 0004 00AF     		add	r7, sp, #0
 286              		.cfi_def_cfa_register 7
 287 0006 7860     		str	r0, [r7, #4]
  63:level_sensor.c ****     strcpy(level_sensor_inbox, message);
 288              		.loc 1 63 0
 289 0008 7968     		ldr	r1, [r7, #4]
 290 000a 0348     		ldr	r0, .L19
 291 000c FFF7FEFF 		bl	strcpy
  64:level_sensor.c **** }
 292              		.loc 1 64 0
 293 0010 00BF     		nop
 294 0012 0837     		adds	r7, r7, #8
 295              		.cfi_def_cfa_offset 8
 296 0014 BD46     		mov	sp, r7
 297              		.cfi_def_cfa_register 13
 298              		@ sp needed
 299 0016 80BD     		pop	{r7, pc}
 300              	.L20:
 301              		.align	2
 302              	.L19:
 303 0018 00000000 		.word	level_sensor_inbox
 304              		.cfi_endproc
 305              	.LFE68:
 306              		.size	Level_Sensor_Update, .-Level_Sensor_Update
 307              		.section	.rodata
 308              		.align	2
 309              	.LC0:
 310 0000 4F464600 		.ascii	"OFF\000"
 311              		.align	2
 312              	.LC1:
 313 0004 4F4E00   		.ascii	"ON\000"
 314 0007 00       		.align	2
 315              	.LC2:
 316 0008 256C6400 		.ascii	"%ld\000"
 317              		.align	2
 318              	.LC3:
 319 000c 256400   		.ascii	"%d\000"
 320 000f 00       		.align	2
 321              	.LC4:
 322 0010 6D617862 		.ascii	"maxbotix_depth=%s\000"
 322      6F746978 
 322      5F646570 
 322      74683D25 
 322      7300
 323 0022 0000     		.align	2
 324              	.LC5:
 325 0024 6D617862 		.ascii	"maxbotix_depth\000"
 325      6F746978 
 325      5F646570 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 8


 325      746800
 326 0033 00       		.align	2
 327              	.LC6:
 328 0034 612B00   		.ascii	"a+\000"
 329 0037 00       		.align	2
 330              	.LC7:
 331 0038 64617461 		.ascii	"data.txt\000"
 331      2E747874 
 331      00
 332 0041 000000   		.align	2
 333              	.LC8:
 334 0044 206D6178 		.ascii	" maxbotix_depth: \000"
 334      626F7469 
 334      785F6465 
 334      7074683A 
 334      2000
 335 0056 0000     		.align	2
 336              	.LC9:
 337 0058 2000     		.ascii	" \000"
 338 005a 0000     		.align	2
 339              	.LC10:
 340 005c 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 340      64206E6F 
 340      74206765 
 340      74207661 
 340      6C696420 
 341              		.align	2
 342              	.LC11:
 343 0088 2D3100   		.ascii	"-1\000"
 344              		.section	.text.level_sensor,"ax",%progbits
 345              		.align	2
 346              		.global	level_sensor
 347              		.thumb
 348              		.thumb_func
 349              		.type	level_sensor, %function
 350              	level_sensor:
 351              	.LFB69:
  65:level_sensor.c **** 
  66:level_sensor.c **** uint8 level_sensor(){
 352              		.loc 1 66 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 88
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0000 80B5     		push	{r7, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0002 96B0     		sub	sp, sp, #88
 361              		.cfi_def_cfa_offset 96
 362 0004 00AF     		add	r7, sp, #0
 363              		.cfi_def_cfa_register 7
  67:level_sensor.c ****     char * compare_location;
  68:level_sensor.c ****     
  69:level_sensor.c ****     compare_location = strstr(level_sensor_inbox,"OFF");        
 364              		.loc 1 69 0
 365 0006 3149     		ldr	r1, .L27
 366 0008 3148     		ldr	r0, .L27+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 9


 367 000a FFF7FEFF 		bl	strstr
 368 000e 7865     		str	r0, [r7, #84]
  70:level_sensor.c ****     if(compare_location!=NULL){
 369              		.loc 1 70 0
 370 0010 7B6D     		ldr	r3, [r7, #84]
 371 0012 002B     		cmp	r3, #0
 372 0014 01D0     		beq	.L22
  71:level_sensor.c ****         return 0; // this app is disabled, don't do anything
 373              		.loc 1 71 0
 374 0016 0023     		movs	r3, #0
 375 0018 53E0     		b	.L23
 376              	.L22:
  72:level_sensor.c ****     }
  73:level_sensor.c ****     
  74:level_sensor.c **** 
  75:level_sensor.c ****     compare_location = strstr(level_sensor_inbox,"ON");        
 377              		.loc 1 75 0
 378 001a 2E49     		ldr	r1, .L27+8
 379 001c 2C48     		ldr	r0, .L27+4
 380 001e FFF7FEFF 		bl	strstr
 381 0022 7865     		str	r0, [r7, #84]
  76:level_sensor.c ****     if(compare_location!=NULL){
 382              		.loc 1 76 0
 383 0024 7B6D     		ldr	r3, [r7, #84]
 384 0026 002B     		cmp	r3, #0
 385 0028 4AD0     		beq	.L24
 386              	.LBB2:
  77:level_sensor.c **** 
  78:level_sensor.c ****         // below is copied and adapted from makeMeasurements in modem.c 
  79:level_sensor.c ****         // (duplicated so that normal depth and GI nodes still work)
  80:level_sensor.c ****         
  81:level_sensor.c ****         // Get clock time and save to timeStamp
  82:level_sensor.c ****         long timeStamp = getTimeStamp();
 387              		.loc 1 82 0
 388 002a FFF7FEFF 		bl	getTimeStamp
 389 002e 3865     		str	r0, [r7, #80]
  83:level_sensor.c ****         char c_timeStamp[32];
  84:level_sensor.c ****         snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 390              		.loc 1 84 0
 391 0030 3846     		mov	r0, r7
 392 0032 3B6D     		ldr	r3, [r7, #80]
 393 0034 284A     		ldr	r2, .L27+12
 394 0036 2021     		movs	r1, #32
 395 0038 FFF7FEFF 		bl	snprintf
  85:level_sensor.c ****         
  86:level_sensor.c ****         // Holds string for value that will be written 
  87:level_sensor.c ****         char value[DATA_MAX_KEY_LENGTH];
  88:level_sensor.c ****         
  89:level_sensor.c ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
  90:level_sensor.c ****         level_sensor_t m_level_sensor;
  91:level_sensor.c ****         
  92:level_sensor.c ****         // Take level sensor readings and save them to m_level_sensor
  93:level_sensor.c ****         m_level_sensor = level_sensor_take_reading();
 396              		.loc 1 93 0
 397 003c 07F12003 		add	r3, r7, #32
 398 0040 1846     		mov	r0, r3
 399 0042 FFF7FEFF 		bl	level_sensor_take_reading
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 10


  94:level_sensor.c **** 
  95:level_sensor.c ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
  96:level_sensor.c ****         if(m_level_sensor.num_valid_readings > 0){
 400              		.loc 1 96 0
 401 0046 97F83830 		ldrb	r3, [r7, #56]	@ zero_extendqisi2
 402 004a 002B     		cmp	r3, #0
 403 004c 2DD0     		beq	.L25
  97:level_sensor.c ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 404              		.loc 1 97 0
 405 004e B7F93630 		ldrsh	r3, [r7, #54]
 406 0052 07F13C00 		add	r0, r7, #60
 407 0056 214A     		ldr	r2, .L27+16
 408 0058 1421     		movs	r1, #20
 409 005a FFF7FEFF 		bl	snprintf
  98:level_sensor.c ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 410              		.loc 1 98 0
 411 005e 07F13C03 		add	r3, r7, #60
 412 0062 1A46     		mov	r2, r3
 413 0064 1E49     		ldr	r1, .L27+20
 414 0066 0020     		movs	r0, #0
 415 0068 FFF7FEFF 		bl	printNotif
  99:level_sensor.c ****             pushData("maxbotix_depth",value,timeStamp);
 416              		.loc 1 99 0
 417 006c 07F13C03 		add	r3, r7, #60
 418 0070 3A6D     		ldr	r2, [r7, #80]
 419 0072 1946     		mov	r1, r3
 420 0074 1B48     		ldr	r0, .L27+24
 421 0076 FFF7FEFF 		bl	pushData
 100:level_sensor.c ****             
 101:level_sensor.c ****             // Print measurement to SD card to file called data.txt
 102:level_sensor.c ****             SD_write("data.txt", "a+", c_timeStamp);
 422              		.loc 1 102 0
 423 007a 3B46     		mov	r3, r7
 424 007c 1A46     		mov	r2, r3
 425 007e 1A49     		ldr	r1, .L27+28
 426 0080 1A48     		ldr	r0, .L27+32
 427 0082 FFF7FEFF 		bl	SD_write
 103:level_sensor.c ****             SD_write("data.txt", "a+", " maxbotix_depth: ");
 428              		.loc 1 103 0
 429 0086 1A4A     		ldr	r2, .L27+36
 430 0088 1749     		ldr	r1, .L27+28
 431 008a 1848     		ldr	r0, .L27+32
 432 008c FFF7FEFF 		bl	SD_write
 104:level_sensor.c ****             SD_write("data.txt", "a+", value);
 433              		.loc 1 104 0
 434 0090 07F13C03 		add	r3, r7, #60
 435 0094 1A46     		mov	r2, r3
 436 0096 1449     		ldr	r1, .L27+28
 437 0098 1448     		ldr	r0, .L27+32
 438 009a FFF7FEFF 		bl	SD_write
 105:level_sensor.c ****             SD_write("data.txt", "a+", " ");
 439              		.loc 1 105 0
 440 009e 154A     		ldr	r2, .L27+40
 441 00a0 1149     		ldr	r1, .L27+28
 442 00a2 1248     		ldr	r0, .L27+32
 443 00a4 FFF7FEFF 		bl	SD_write
 444 00a8 08E0     		b	.L26
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 11


 445              	.L25:
 106:level_sensor.c ****         }else{
 107:level_sensor.c ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 446              		.loc 1 107 0
 447 00aa 1349     		ldr	r1, .L27+44
 448 00ac 0220     		movs	r0, #2
 449 00ae FFF7FEFF 		bl	printNotif
 108:level_sensor.c ****             pushData("maxbotix_depth","-1",timeStamp); // error code, never get this from a sensor
 450              		.loc 1 108 0
 451 00b2 3A6D     		ldr	r2, [r7, #80]
 452 00b4 1149     		ldr	r1, .L27+48
 453 00b6 0B48     		ldr	r0, .L27+24
 454 00b8 FFF7FEFF 		bl	pushData
 455              	.L26:
 109:level_sensor.c ****         }
 110:level_sensor.c ****         
 111:level_sensor.c **** 
 112:level_sensor.c ****         return 0;
 456              		.loc 1 112 0
 457 00bc 0023     		movs	r3, #0
 458 00be 00E0     		b	.L23
 459              	.L24:
 460              	.LBE2:
 113:level_sensor.c ****     }
 114:level_sensor.c ****     
 115:level_sensor.c ****     return 0; // i think this needs to be rewritten to be more like a light switch
 461              		.loc 1 115 0
 462 00c0 0023     		movs	r3, #0
 463              	.L23:
 116:level_sensor.c ****     // i.e. it stays on until you turn it off.
 117:level_sensor.c **** }
 464              		.loc 1 117 0 discriminator 1
 465 00c2 1846     		mov	r0, r3
 466 00c4 5837     		adds	r7, r7, #88
 467              		.cfi_def_cfa_offset 8
 468 00c6 BD46     		mov	sp, r7
 469              		.cfi_def_cfa_register 13
 470              		@ sp needed
 471 00c8 80BD     		pop	{r7, pc}
 472              	.L28:
 473 00ca 00BF     		.align	2
 474              	.L27:
 475 00cc 00000000 		.word	.LC0
 476 00d0 00000000 		.word	level_sensor_inbox
 477 00d4 04000000 		.word	.LC1
 478 00d8 08000000 		.word	.LC2
 479 00dc 0C000000 		.word	.LC3
 480 00e0 10000000 		.word	.LC4
 481 00e4 24000000 		.word	.LC5
 482 00e8 34000000 		.word	.LC6
 483 00ec 38000000 		.word	.LC7
 484 00f0 44000000 		.word	.LC8
 485 00f4 58000000 		.word	.LC9
 486 00f8 5C000000 		.word	.LC10
 487 00fc 88000000 		.word	.LC11
 488              		.cfi_endproc
 489              	.LFE69:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 12


 490              		.size	level_sensor, .-level_sensor
 491              		.section	.rodata
 492 008b 00       		.align	2
 493              	.LC12:
 494 008c 5200     		.ascii	"R\000"
 495              		.section	.text.level_sensor_take_reading,"ax",%progbits
 496              		.align	2
 497              		.global	level_sensor_take_reading
 498              		.thumb
 499              		.thumb_func
 500              		.type	level_sensor_take_reading, %function
 501              	level_sensor_take_reading:
 502              	.LFB70:
 118:level_sensor.c **** 
 119:level_sensor.c **** // takes level sensor measurements and calculates average level sensor reading
 120:level_sensor.c **** level_sensor_t level_sensor_take_reading(){
 503              		.loc 1 120 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 40
 506              		@ frame_needed = 1, uses_anonymous_args = 0
 507 0000 B0B5     		push	{r4, r5, r7, lr}
 508              		.cfi_def_cfa_offset 16
 509              		.cfi_offset 4, -16
 510              		.cfi_offset 5, -12
 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 8AB0     		sub	sp, sp, #40
 514              		.cfi_def_cfa_offset 56
 515 0004 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 0006 7860     		str	r0, [r7, #4]
 121:level_sensor.c ****     
 122:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 123:level_sensor.c ****     level_sensor_t level_sensor_output;
 124:level_sensor.c ****     level_sensor_output.num_invalid_readings = 0;
 518              		.loc 1 124 0
 519 0008 0023     		movs	r3, #0
 520 000a 87F82130 		strb	r3, [r7, #33]
 125:level_sensor.c ****     level_sensor_output.num_valid_readings = 0;
 521              		.loc 1 125 0
 522 000e 0023     		movs	r3, #0
 523 0010 87F82030 		strb	r3, [r7, #32]
 126:level_sensor.c ****     
 127:level_sensor.c ****     uart_clear();
 524              		.loc 1 127 0
 525 0014 FFF7FEFF 		bl	uart_clear
 128:level_sensor.c ****     
 129:level_sensor.c ****     // Start sensor power, uart, and isr
 130:level_sensor.c ****     Level_Sensor_Power_Write(ON);   // Pulls Level Sensor power pin high (turns it on).
 526              		.loc 1 130 0
 527 0018 0120     		movs	r0, #1
 528 001a FFF7FEFF 		bl	Level_Sensor_Power_Write
 131:level_sensor.c ****     CyDelay(200u); // Sensor bootup sequence ~200ms -- senosor will spit out ID info, but we don't 
 529              		.loc 1 131 0
 530 001e C820     		movs	r0, #200
 531 0020 FFF7FEFF 		bl	CyDelay
 132:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_DIG_HIZ); // RX_SetDriveMode(): Sets the drive mode for eac
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 13


 532              		.loc 1 132 0
 533 0024 0220     		movs	r0, #2
 534 0026 FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
 133:level_sensor.c ****     Level_Sensor_UART_Start(); // Level_Sensor_UART_Start() sets the initVar variable, calls the Le
 535              		.loc 1 133 0
 536 002a FFF7FEFF 		bl	Level_Sensor_UART_Start
 134:level_sensor.c ****     Level_Sensor_ISR_StartEx(Level_Sensor_ISR); // Sets up the interrupt and enables it.
 537              		.loc 1 134 0
 538 002e 3848     		ldr	r0, .L38
 539 0030 FFF7FEFF 		bl	Level_Sensor_ISR_StartEx
 135:level_sensor.c ****     
 136:level_sensor.c ****     // Wait to take  reading
 137:level_sensor.c ****     // Sensor will take ~200ms to send first reading, and 200ms for subsequent readings
 138:level_sensor.c ****     CyDelay(2000u); // Take a few seconds to get readings, 2 secs ~10 readings
 540              		.loc 1 138 0
 541 0034 4FF4FA60 		mov	r0, #2000
 542 0038 FFF7FEFF 		bl	CyDelay
 139:level_sensor.c ****     
 140:level_sensor.c ****     //stop all sensor processes
 141:level_sensor.c ****     Level_Sensor_UART_Stop(); // Disables the UART operation.
 543              		.loc 1 141 0
 544 003c FFF7FEFF 		bl	Level_Sensor_UART_Stop
 142:level_sensor.c ****     Level_Sensor_ISR_Stop(); // Disables and removes the interrupt.
 545              		.loc 1 142 0
 546 0040 FFF7FEFF 		bl	Level_Sensor_ISR_Stop
 143:level_sensor.c ****     Level_Sensor_Power_Write(OFF); // Pulls Level Sensor Power pin low (turns it off).
 547              		.loc 1 143 0
 548 0044 0020     		movs	r0, #0
 549 0046 FFF7FEFF 		bl	Level_Sensor_Power_Write
 144:level_sensor.c ****     // RX_SetDriveMode(): Sets the drive mode for each of the Pins component's pins.
 145:level_sensor.c ****     // String Drive Mode means it will only be outputting a voltage (don't send any data) when pull
 146:level_sensor.c ****     // UART in PSOC starts high. Then pulls low to get data. When turn sensor off, still using powe
 147:level_sensor.c ****     // So turning it to Strong Drive has it stay low.
 148:level_sensor.c ****     Level_Sensor_RX_SetDriveMode(PIN_DM_STRONG);
 550              		.loc 1 148 0
 551 004a 0C20     		movs	r0, #12
 552 004c FFF7FEFF 		bl	Level_Sensor_RX_SetDriveMode
 149:level_sensor.c ****     // Stops writing the value to the physical port.
 150:level_sensor.c ****     // Just because turn power of sensor off, pin could still be high and getting power. This ensur
 151:level_sensor.c ****     Level_Sensor_RX_Write(OFF);
 553              		.loc 1 151 0
 554 0050 0020     		movs	r0, #0
 555 0052 FFF7FEFF 		bl	Level_Sensor_RX_Write
 152:level_sensor.c **** 
 153:level_sensor.c ****     /* Return parsed reading */
 154:level_sensor.c ****     // Parse string and put all values into array
 155:level_sensor.c ****     // The sensor will power on and do a few things, after which the readigs will follow with the s
 156:level_sensor.c ****     // Readings are stashed between "R" and "\000"
 157:level_sensor.c ****     char *token;
 158:level_sensor.c ****     // strtok(): breaks uart_chars into smaller string when sees "R".
 159:level_sensor.c ****     token = strtok(uart_chars, "R");
 556              		.loc 1 159 0
 557 0056 2F49     		ldr	r1, .L38+4
 558 0058 2F48     		ldr	r0, .L38+8
 559 005a FFF7FEFF 		bl	strtok
 560 005e 7862     		str	r0, [r7, #36]
 160:level_sensor.c ****     /* walk through other tokens */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 14


 161:level_sensor.c ****    while( token != NULL ) 
 561              		.loc 1 161 0
 562 0060 33E0     		b	.L30
 563              	.L35:
 162:level_sensor.c ****    {
 163:level_sensor.c ****       if(strstr(token, "\r") != NULL){ // Full reading is delimieted by "R" + reading + "\r"
 564              		.loc 1 163 0
 565 0062 0D21     		movs	r1, #13
 566 0064 786A     		ldr	r0, [r7, #36]
 567 0066 FFF7FEFF 		bl	strchr
 568 006a 0346     		mov	r3, r0
 569 006c 002B     		cmp	r3, #0
 570 006e 27D0     		beq	.L31
 571              	.LBB3:
 164:level_sensor.c ****         // int atoi(const char *str) converts the string argument str to an integer (type int).
 165:level_sensor.c ****         uint16 reading = atoi(token);
 572              		.loc 1 165 0
 573 0070 786A     		ldr	r0, [r7, #36]
 574 0072 FFF7FEFF 		bl	atoi
 575 0076 0346     		mov	r3, r0
 576 0078 7B84     		strh	r3, [r7, #34]	@ movhi
 166:level_sensor.c ****         if(reading != 0){
 577              		.loc 1 166 0
 578 007a 7B8C     		ldrh	r3, [r7, #34]
 579 007c 002B     		cmp	r3, #0
 580 007e 1FD0     		beq	.L31
 167:level_sensor.c ****             if(reading != READING_INVALID){ // Invald readings by maxbotix
 581              		.loc 1 167 0
 582 0080 7B8C     		ldrh	r3, [r7, #34]
 583 0082 42F20F72 		movw	r2, #9999
 584 0086 9342     		cmp	r3, r2
 585 0088 14D0     		beq	.L32
 168:level_sensor.c ****                 // Set the level readings array of the length of number of valid readings equal to 
 169:level_sensor.c ****                 level_sensor_output.all_level_readings[level_sensor_output.num_valid_readings] = re
 586              		.loc 1 169 0
 587 008a 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 588 008e B7F92220 		ldrsh	r2, [r7, #34]
 589 0092 5B00     		lsls	r3, r3, #1
 590 0094 07F12801 		add	r1, r7, #40
 591 0098 0B44     		add	r3, r3, r1
 592 009a 23F8202C 		strh	r2, [r3, #-32]	@ movhi
 170:level_sensor.c ****                 // If number of valid readings less than 11 total readings, increase the count of v
 171:level_sensor.c ****                 if(level_sensor_output.num_valid_readings < N_READINGS){
 593              		.loc 1 171 0
 594 009e 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 595 00a2 0A2B     		cmp	r3, #10
 596 00a4 15D8     		bhi	.L37
 172:level_sensor.c ****                     level_sensor_output.num_valid_readings++;
 597              		.loc 1 172 0
 598 00a6 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 599 00aa 0133     		adds	r3, r3, #1
 600 00ac DBB2     		uxtb	r3, r3
 601 00ae 87F82030 		strb	r3, [r7, #32]
 602 00b2 05E0     		b	.L31
 603              	.L32:
 173:level_sensor.c ****                 }else{
 174:level_sensor.c ****                  break;   
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 15


 175:level_sensor.c ****                 }
 176:level_sensor.c ****                 
 177:level_sensor.c ****             }else{
 178:level_sensor.c ****                 // Otherwise increase the count of invalid readings
 179:level_sensor.c ****                 level_sensor_output.num_invalid_readings++;
 604              		.loc 1 179 0
 605 00b4 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 606 00b8 0133     		adds	r3, r3, #1
 607 00ba DBB2     		uxtb	r3, r3
 608 00bc 87F82130 		strb	r3, [r7, #33]
 609              	.L31:
 610              	.LBE3:
 180:level_sensor.c ****             }
 181:level_sensor.c ****         }
 182:level_sensor.c ****       }
 183:level_sensor.c ****       token = strtok(NULL, "R"); // This "NULL" says to continue where you left off last time.
 611              		.loc 1 183 0
 612 00c0 1449     		ldr	r1, .L38+4
 613 00c2 0020     		movs	r0, #0
 614 00c4 FFF7FEFF 		bl	strtok
 615 00c8 7862     		str	r0, [r7, #36]
 616              	.L30:
 161:level_sensor.c ****    {
 617              		.loc 1 161 0
 618 00ca 7B6A     		ldr	r3, [r7, #36]
 619 00cc 002B     		cmp	r3, #0
 620 00ce C8D1     		bne	.L35
 621 00d0 00E0     		b	.L34
 622              	.L37:
 623              	.LBB4:
 174:level_sensor.c ****                 }
 624              		.loc 1 174 0
 625 00d2 00BF     		nop
 626              	.L34:
 627              	.LBE4:
 184:level_sensor.c ****    }
 185:level_sensor.c ****     // Calculate median level reading
 186:level_sensor.c ****     level_sensor_output.level_reading = find_median(level_sensor_output.all_level_readings,level_se
 628              		.loc 1 186 0
 629 00d4 97F82020 		ldrb	r2, [r7, #32]	@ zero_extendqisi2
 630 00d8 07F10803 		add	r3, r7, #8
 631 00dc 1146     		mov	r1, r2
 632 00de 1846     		mov	r0, r3
 633 00e0 FFF7FEFF 		bl	find_median
 634 00e4 0346     		mov	r3, r0
 635 00e6 1BB2     		sxth	r3, r3
 636 00e8 FB83     		strh	r3, [r7, #30]	@ movhi
 187:level_sensor.c ****     
 188:level_sensor.c ****     return level_sensor_output;
 637              		.loc 1 188 0
 638 00ea 7B68     		ldr	r3, [r7, #4]
 639 00ec 1D46     		mov	r5, r3
 640 00ee 07F10804 		add	r4, r7, #8
 641 00f2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 642 00f4 2860     		str	r0, [r5]	@ unaligned
 643 00f6 6960     		str	r1, [r5, #4]	@ unaligned
 644 00f8 AA60     		str	r2, [r5, #8]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 16


 645 00fa EB60     		str	r3, [r5, #12]	@ unaligned
 646 00fc 03CC     		ldmia	r4!, {r0, r1}
 647 00fe 2861     		str	r0, [r5, #16]	@ unaligned
 648 0100 6961     		str	r1, [r5, #20]	@ unaligned
 649 0102 2388     		ldrh	r3, [r4]	@ unaligned
 650 0104 2B83     		strh	r3, [r5, #24]	@ unaligned
 189:level_sensor.c **** }
 651              		.loc 1 189 0
 652 0106 7868     		ldr	r0, [r7, #4]
 653 0108 2837     		adds	r7, r7, #40
 654              		.cfi_def_cfa_offset 16
 655 010a BD46     		mov	sp, r7
 656              		.cfi_def_cfa_register 13
 657              		@ sp needed
 658 010c B0BD     		pop	{r4, r5, r7, pc}
 659              	.L39:
 660 010e 00BF     		.align	2
 661              	.L38:
 662 0110 00000000 		.word	Level_Sensor_ISR
 663 0114 8C000000 		.word	.LC12
 664 0118 00000000 		.word	uart_chars
 665              		.cfi_endproc
 666              	.LFE70:
 667              		.size	level_sensor_take_reading, .-level_sensor_take_reading
 668              		.section	.rodata
 669 008e 0000     		.align	2
 670              	.LC13:
 671 0090 54455354 		.ascii	"TEST_LEVEL_SENSOR\000"
 671      5F4C4556 
 671      454C5F53 
 671      454E534F 
 671      5200
 672 00a2 0000     		.align	2
 673              	.LC14:
 674 00a4 6E57414E 		.ascii	"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.\000"
 674      5445443D 
 674      25642C6E 
 674      52454345 
 674      49564544 
 675              		.section	.text.level_sensor_test,"ax",%progbits
 676              		.align	2
 677              		.global	level_sensor_test
 678              		.thumb
 679              		.thumb_func
 680              		.type	level_sensor_test, %function
 681              	level_sensor_test:
 682              	.LFB71:
 190:level_sensor.c **** 
 191:level_sensor.c **** // Level sensor test
 192:level_sensor.c **** test_t level_sensor_test(){
 683              		.loc 1 192 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 424
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687 0000 B0B5     		push	{r4, r5, r7, lr}
 688              		.cfi_def_cfa_offset 16
 689              		.cfi_offset 4, -16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 17


 690              		.cfi_offset 5, -12
 691              		.cfi_offset 7, -8
 692              		.cfi_offset 14, -4
 693 0002 EEB0     		sub	sp, sp, #440
 694              		.cfi_def_cfa_offset 456
 695 0004 04AF     		add	r7, sp, #16
 696              		.cfi_def_cfa 7, 440
 697 0006 3B1D     		adds	r3, r7, #4
 698 0008 1860     		str	r0, [r3]
 193:level_sensor.c ****     
 194:level_sensor.c ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 195:level_sensor.c ****     test.status = 0; // set test status to zero
 699              		.loc 1 195 0
 700 000a 07F12403 		add	r3, r7, #36
 701 000e 0022     		movs	r2, #0
 702 0010 83F88020 		strb	r2, [r3, #128]
 196:level_sensor.c ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_LEVEL_SENSOR");
 703              		.loc 1 196 0
 704 0014 07F12403 		add	r3, r7, #36
 705 0018 2A4A     		ldr	r2, .L44
 706 001a 1C46     		mov	r4, r3
 707 001c 1546     		mov	r5, r2
 708 001e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 709 0020 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 710 0022 2B68     		ldr	r3, [r5]
 711 0024 2380     		strh	r3, [r4]	@ movhi
 197:level_sensor.c **** 
 198:level_sensor.c ****     // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data type t
 199:level_sensor.c ****     level_sensor_t sensor = level_sensor_take_reading();
 712              		.loc 1 199 0
 713 0026 07F10803 		add	r3, r7, #8
 714 002a 1846     		mov	r0, r3
 715 002c FFF7FEFF 		bl	level_sensor_take_reading
 200:level_sensor.c ****     
 201:level_sensor.c ****     // print the max number of readings (11), the number of actual readings, the number of valid re
 202:level_sensor.c ****     snprintf(test.reason,sizeof(test.reason),"nWANTED=%d,nRECEIVED=%d,nVALID=%d,nMEDIAN=%d.",
 203:level_sensor.c ****         N_READINGS,
 204:level_sensor.c ****         sensor.num_valid_readings+sensor.num_invalid_readings,
 716              		.loc 1 204 0
 717 0030 07F10803 		add	r3, r7, #8
 718 0034 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 202:level_sensor.c ****         N_READINGS,
 719              		.loc 1 202 0
 720 0036 1A46     		mov	r2, r3
 721              		.loc 1 204 0
 722 0038 07F10803 		add	r3, r7, #8
 723 003c 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 202:level_sensor.c ****         N_READINGS,
 724              		.loc 1 202 0
 725 003e 1344     		add	r3, r3, r2
 205:level_sensor.c ****         sensor.num_valid_readings,
 726              		.loc 1 205 0
 727 0040 07F10802 		add	r2, r7, #8
 728 0044 127E     		ldrb	r2, [r2, #24]	@ zero_extendqisi2
 202:level_sensor.c ****         N_READINGS,
 729              		.loc 1 202 0
 730 0046 1146     		mov	r1, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 18


 206:level_sensor.c ****         sensor.level_reading
 731              		.loc 1 206 0
 732 0048 07F10802 		add	r2, r7, #8
 733 004c B2F91620 		ldrsh	r2, [r2, #22]
 202:level_sensor.c ****         N_READINGS,
 734              		.loc 1 202 0
 735 0050 1446     		mov	r4, r2
 736 0052 07F12402 		add	r2, r7, #36
 737 0056 02F18100 		add	r0, r2, #129
 738 005a 0294     		str	r4, [sp, #8]
 739 005c 0191     		str	r1, [sp, #4]
 740 005e 0093     		str	r3, [sp]
 741 0060 0B23     		movs	r3, #11
 742 0062 194A     		ldr	r2, .L44+4
 743 0064 4FF48071 		mov	r1, #256
 744 0068 FFF7FEFF 		bl	snprintf
 207:level_sensor.c ****     );
 208:level_sensor.c ****    
 209:level_sensor.c ****     // if the number valid readings is the max number of readings (11), then the test passes with t
 210:level_sensor.c ****     if(sensor.num_valid_readings == N_READINGS){//pass
 745              		.loc 1 210 0
 746 006c 07F10803 		add	r3, r7, #8
 747 0070 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 748 0072 0B2B     		cmp	r3, #11
 749 0074 05D1     		bne	.L41
 211:level_sensor.c ****         test.status = 1;
 750              		.loc 1 211 0
 751 0076 07F12403 		add	r3, r7, #36
 752 007a 0122     		movs	r2, #1
 753 007c 83F88020 		strb	r2, [r3, #128]
 754 0080 0EE0     		b	.L42
 755              	.L41:
 212:level_sensor.c ****     // if the number of valid readings is greater than zero and less than the max number of reading
 213:level_sensor.c ****     }else if((sensor.num_valid_readings > 0) && (sensor.num_valid_readings < N_READINGS)){//pass
 756              		.loc 1 213 0
 757 0082 07F10803 		add	r3, r7, #8
 758 0086 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 759 0088 002B     		cmp	r3, #0
 760 008a 09D0     		beq	.L42
 761              		.loc 1 213 0 is_stmt 0 discriminator 1
 762 008c 07F10803 		add	r3, r7, #8
 763 0090 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 764 0092 0A2B     		cmp	r3, #10
 765 0094 04D8     		bhi	.L42
 214:level_sensor.c ****         test.status = 2; //not bad, since we got some OK readings
 766              		.loc 1 214 0 is_stmt 1
 767 0096 07F12403 		add	r3, r7, #36
 768 009a 0222     		movs	r2, #2
 769 009c 83F88020 		strb	r2, [r3, #128]
 770              	.L42:
 215:level_sensor.c ****     }
 216:level_sensor.c ****         
 217:level_sensor.c ****     return test;
 771              		.loc 1 217 0
 772 00a0 3B1D     		adds	r3, r7, #4
 773 00a2 1A68     		ldr	r2, [r3]
 774 00a4 07F12403 		add	r3, r7, #36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 19


 775 00a8 1046     		mov	r0, r2
 776 00aa 1946     		mov	r1, r3
 777 00ac 40F28113 		movw	r3, #385
 778 00b0 1A46     		mov	r2, r3
 779 00b2 FFF7FEFF 		bl	memcpy
 218:level_sensor.c **** }
 780              		.loc 1 218 0
 781 00b6 3B1D     		adds	r3, r7, #4
 782 00b8 1868     		ldr	r0, [r3]
 783 00ba 07F5D477 		add	r7, r7, #424
 784              		.cfi_def_cfa_offset 16
 785 00be BD46     		mov	sp, r7
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 00c0 B0BD     		pop	{r4, r5, r7, pc}
 789              	.L45:
 790 00c2 00BF     		.align	2
 791              	.L44:
 792 00c4 90000000 		.word	.LC13
 793 00c8 A4000000 		.word	.LC14
 794              		.cfi_endproc
 795              	.LFE71:
 796              		.size	level_sensor_test, .-level_sensor_test
 797              		.global	__aeabi_i2d
 798              		.global	__aeabi_ddiv
 799              		.global	__aeabi_d2iz
 800              		.section	.text.find_median,"ax",%progbits
 801              		.align	2
 802              		.global	find_median
 803              		.thumb
 804              		.thumb_func
 805              		.type	find_median, %function
 806              	find_median:
 807              	.LFB72:
 219:level_sensor.c **** 
 220:level_sensor.c **** 
 221:level_sensor.c **** // function to calculate the median of the array, after array is sorted
 222:level_sensor.c **** uint16 find_median(int16 array[] , uint8 n)
 223:level_sensor.c **** {
 808              		.loc 1 223 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 16
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812 0000 90B5     		push	{r4, r7, lr}
 813              		.cfi_def_cfa_offset 12
 814              		.cfi_offset 4, -12
 815              		.cfi_offset 7, -8
 816              		.cfi_offset 14, -4
 817 0002 85B0     		sub	sp, sp, #20
 818              		.cfi_def_cfa_offset 32
 819 0004 00AF     		add	r7, sp, #0
 820              		.cfi_def_cfa_register 7
 821 0006 7860     		str	r0, [r7, #4]
 822 0008 0B46     		mov	r3, r1
 823 000a FB70     		strb	r3, [r7, #3]
 224:level_sensor.c ****     int16 median=0;
 824              		.loc 1 224 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 20


 825 000c 0023     		movs	r3, #0
 826 000e FB81     		strh	r3, [r7, #14]	@ movhi
 225:level_sensor.c ****     sort(array,n);
 827              		.loc 1 225 0
 828 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 829 0012 1BB2     		sxth	r3, r3
 830 0014 1946     		mov	r1, r3
 831 0016 7868     		ldr	r0, [r7, #4]
 832 0018 FFF7FEFF 		bl	sort
 226:level_sensor.c ****     
 227:level_sensor.c ****     // if number of elements are even
 228:level_sensor.c ****     if(n%2 == 0)
 833              		.loc 1 228 0
 834 001c FB78     		ldrb	r3, [r7, #3]
 835 001e 03F00103 		and	r3, r3, #1
 836 0022 DBB2     		uxtb	r3, r3
 837 0024 002B     		cmp	r3, #0
 838 0026 25D1     		bne	.L47
 229:level_sensor.c ****         // median is the average of the  two middle sorted numbers
 230:level_sensor.c ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 839              		.loc 1 230 0
 840 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 841 002a 013B     		subs	r3, r3, #1
 842 002c DA0F     		lsrs	r2, r3, #31
 843 002e 1344     		add	r3, r3, r2
 844 0030 5B10     		asrs	r3, r3, #1
 845 0032 5B00     		lsls	r3, r3, #1
 846 0034 7A68     		ldr	r2, [r7, #4]
 847 0036 1344     		add	r3, r3, r2
 848 0038 B3F90030 		ldrsh	r3, [r3]
 849 003c 1946     		mov	r1, r3
 850 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 851 0040 5B08     		lsrs	r3, r3, #1
 852 0042 DBB2     		uxtb	r3, r3
 853 0044 5B00     		lsls	r3, r3, #1
 854 0046 7A68     		ldr	r2, [r7, #4]
 855 0048 1344     		add	r3, r3, r2
 856 004a B3F90030 		ldrsh	r3, [r3]
 857 004e 0B44     		add	r3, r3, r1
 858 0050 1846     		mov	r0, r3
 859 0052 FFF7FEFF 		bl	__aeabi_i2d
 860 0056 4FF00002 		mov	r2, #0
 861 005a 4FF08043 		mov	r3, #1073741824
 862 005e FFF7FEFF 		bl	__aeabi_ddiv
 863 0062 0346     		mov	r3, r0
 864 0064 0C46     		mov	r4, r1
 865 0066 1846     		mov	r0, r3
 866 0068 2146     		mov	r1, r4
 867 006a FFF7FEFF 		bl	__aeabi_d2iz
 868 006e 0346     		mov	r3, r0
 869 0070 FB81     		strh	r3, [r7, #14]	@ movhi
 870 0072 07E0     		b	.L48
 871              	.L47:
 231:level_sensor.c ****     // if number of elements are odd
 232:level_sensor.c ****     else
 233:level_sensor.c ****         // median is the the middle sorted number 
 234:level_sensor.c ****         median = array[n/2];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 21


 872              		.loc 1 234 0
 873 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 874 0076 5B08     		lsrs	r3, r3, #1
 875 0078 DBB2     		uxtb	r3, r3
 876 007a 5B00     		lsls	r3, r3, #1
 877 007c 7A68     		ldr	r2, [r7, #4]
 878 007e 1344     		add	r3, r3, r2
 879 0080 1B88     		ldrh	r3, [r3]	@ movhi
 880 0082 FB81     		strh	r3, [r7, #14]	@ movhi
 881              	.L48:
 235:level_sensor.c ****     
 236:level_sensor.c ****     return median;
 882              		.loc 1 236 0
 883 0084 FB89     		ldrh	r3, [r7, #14]
 237:level_sensor.c **** }
 884              		.loc 1 237 0
 885 0086 1846     		mov	r0, r3
 886 0088 1437     		adds	r7, r7, #20
 887              		.cfi_def_cfa_offset 12
 888 008a BD46     		mov	sp, r7
 889              		.cfi_def_cfa_register 13
 890              		@ sp needed
 891 008c 90BD     		pop	{r4, r7, pc}
 892              		.cfi_endproc
 893              	.LFE72:
 894              		.size	find_median, .-find_median
 895              		.section	.text.sort,"ax",%progbits
 896              		.align	2
 897              		.global	sort
 898              		.thumb
 899              		.thumb_func
 900              		.type	sort, %function
 901              	sort:
 902              	.LFB73:
 238:level_sensor.c **** 
 239:level_sensor.c **** // function to sort the elements in the level readings array
 240:level_sensor.c **** void sort(int16 a[],int16 n) { 
 903              		.loc 1 240 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 16
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 80B5     		push	{r7, lr}
 908              		.cfi_def_cfa_offset 8
 909              		.cfi_offset 7, -8
 910              		.cfi_offset 14, -4
 911 0002 84B0     		sub	sp, sp, #16
 912              		.cfi_def_cfa_offset 24
 913 0004 00AF     		add	r7, sp, #0
 914              		.cfi_def_cfa_register 7
 915 0006 7860     		str	r0, [r7, #4]
 916 0008 0B46     		mov	r3, r1
 917 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 241:level_sensor.c ****    int16 i,j;
 242:level_sensor.c **** 
 243:level_sensor.c ****    for(i = 0;i < n-1;i++) {
 918              		.loc 1 243 0
 919 000c 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 22


 920 000e FB81     		strh	r3, [r7, #14]	@ movhi
 921 0010 37E0     		b	.L51
 922              	.L55:
 244:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 923              		.loc 1 244 0
 924 0012 0023     		movs	r3, #0
 925 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 926 0016 24E0     		b	.L52
 927              	.L54:
 245:level_sensor.c ****          if(a[j] > a[j+1])
 928              		.loc 1 245 0
 929 0018 B7F90C30 		ldrsh	r3, [r7, #12]
 930 001c 5B00     		lsls	r3, r3, #1
 931 001e 7A68     		ldr	r2, [r7, #4]
 932 0020 1344     		add	r3, r3, r2
 933 0022 B3F90020 		ldrsh	r2, [r3]
 934 0026 B7F90C30 		ldrsh	r3, [r7, #12]
 935 002a 0133     		adds	r3, r3, #1
 936 002c 5B00     		lsls	r3, r3, #1
 937 002e 7968     		ldr	r1, [r7, #4]
 938 0030 0B44     		add	r3, r3, r1
 939 0032 B3F90030 		ldrsh	r3, [r3]
 940 0036 9A42     		cmp	r2, r3
 941 0038 0DDD     		ble	.L53
 246:level_sensor.c ****             swap(&a[j],&a[j+1]); // swap the address of a[j] and a[j+1]
 942              		.loc 1 246 0
 943 003a B7F90C30 		ldrsh	r3, [r7, #12]
 944 003e 5B00     		lsls	r3, r3, #1
 945 0040 7A68     		ldr	r2, [r7, #4]
 946 0042 D018     		adds	r0, r2, r3
 947 0044 B7F90C30 		ldrsh	r3, [r7, #12]
 948 0048 0133     		adds	r3, r3, #1
 949 004a 5B00     		lsls	r3, r3, #1
 950 004c 7A68     		ldr	r2, [r7, #4]
 951 004e 1344     		add	r3, r3, r2
 952 0050 1946     		mov	r1, r3
 953 0052 FFF7FEFF 		bl	swap
 954              	.L53:
 244:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 955              		.loc 1 244 0 discriminator 2
 956 0056 B7F90C30 		ldrsh	r3, [r7, #12]
 957 005a 9BB2     		uxth	r3, r3
 958 005c 0133     		adds	r3, r3, #1
 959 005e 9BB2     		uxth	r3, r3
 960 0060 BB81     		strh	r3, [r7, #12]	@ movhi
 961              	.L52:
 244:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 962              		.loc 1 244 0 is_stmt 0 discriminator 1
 963 0062 B7F90C20 		ldrsh	r2, [r7, #12]
 964 0066 B7F90210 		ldrsh	r1, [r7, #2]
 965 006a B7F90E30 		ldrsh	r3, [r7, #14]
 966 006e CB1A     		subs	r3, r1, r3
 967 0070 013B     		subs	r3, r3, #1
 968 0072 9A42     		cmp	r2, r3
 969 0074 D0DB     		blt	.L54
 243:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 970              		.loc 1 243 0 is_stmt 1 discriminator 2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 23


 971 0076 B7F90E30 		ldrsh	r3, [r7, #14]
 972 007a 9BB2     		uxth	r3, r3
 973 007c 0133     		adds	r3, r3, #1
 974 007e 9BB2     		uxth	r3, r3
 975 0080 FB81     		strh	r3, [r7, #14]	@ movhi
 976              	.L51:
 243:level_sensor.c ****       for(j = 0;j < n-i-1;j++) {
 977              		.loc 1 243 0 is_stmt 0 discriminator 1
 978 0082 B7F90E20 		ldrsh	r2, [r7, #14]
 979 0086 B7F90230 		ldrsh	r3, [r7, #2]
 980 008a 013B     		subs	r3, r3, #1
 981 008c 9A42     		cmp	r2, r3
 982 008e C0DB     		blt	.L55
 247:level_sensor.c ****       }
 248:level_sensor.c ****    }
 249:level_sensor.c **** }
 983              		.loc 1 249 0 is_stmt 1
 984 0090 00BF     		nop
 985 0092 1037     		adds	r7, r7, #16
 986              		.cfi_def_cfa_offset 8
 987 0094 BD46     		mov	sp, r7
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 0096 80BD     		pop	{r7, pc}
 991              		.cfi_endproc
 992              	.LFE73:
 993              		.size	sort, .-sort
 994              		.section	.text.swap,"ax",%progbits
 995              		.align	2
 996              		.global	swap
 997              		.thumb
 998              		.thumb_func
 999              		.type	swap, %function
 1000              	swap:
 1001              	.LFB74:
 250:level_sensor.c **** 
 251:level_sensor.c **** // function to swap elements in the level readings array in order to sort them
 252:level_sensor.c **** void swap(int16 *p,int16 *q) {
 1002              		.loc 1 252 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 16
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 1007 0000 80B4     		push	{r7}
 1008              		.cfi_def_cfa_offset 4
 1009              		.cfi_offset 7, -4
 1010 0002 85B0     		sub	sp, sp, #20
 1011              		.cfi_def_cfa_offset 24
 1012 0004 00AF     		add	r7, sp, #0
 1013              		.cfi_def_cfa_register 7
 1014 0006 7860     		str	r0, [r7, #4]
 1015 0008 3960     		str	r1, [r7]
 253:level_sensor.c ****    int16 t;
 254:level_sensor.c ****    
 255:level_sensor.c ****    t=*p; 
 1016              		.loc 1 255 0
 1017 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 24


 1018 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1019 000e FB81     		strh	r3, [r7, #14]	@ movhi
 256:level_sensor.c ****    *p=*q; 
 1020              		.loc 1 256 0
 1021 0010 3B68     		ldr	r3, [r7]
 1022 0012 B3F90020 		ldrsh	r2, [r3]
 1023 0016 7B68     		ldr	r3, [r7, #4]
 1024 0018 1A80     		strh	r2, [r3]	@ movhi
 257:level_sensor.c ****    *q=t;
 1025              		.loc 1 257 0
 1026 001a 3B68     		ldr	r3, [r7]
 1027 001c FA89     		ldrh	r2, [r7, #14]	@ movhi
 1028 001e 1A80     		strh	r2, [r3]	@ movhi
 258:level_sensor.c **** }
 1029              		.loc 1 258 0
 1030 0020 00BF     		nop
 1031 0022 1437     		adds	r7, r7, #20
 1032              		.cfi_def_cfa_offset 4
 1033 0024 BD46     		mov	sp, r7
 1034              		.cfi_def_cfa_register 13
 1035              		@ sp needed
 1036 0026 80BC     		pop	{r7}
 1037              		.cfi_restore 7
 1038              		.cfi_def_cfa_offset 0
 1039 0028 7047     		bx	lr
 1040              		.cfi_endproc
 1041              	.LFE74:
 1042              		.size	swap, .-swap
 1043 002a 00BF     		.text
 1044              	.Letext0:
 1045              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1046              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1047              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1048              		.file 5 "testing.h"
 1049              		.file 6 "level_sensor.h"
 1050              		.file 7 "data.h"
 1051              		.file 8 "modem.h"
 1052              		.file 9 "notoriOS.h"
 1053              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1054              		.file 11 "App_LED.h"
 1055              		.section	.debug_info,"",%progbits
 1056              	.Ldebug_info0:
 1057 0000 9B080000 		.4byte	0x89b
 1058 0004 0400     		.2byte	0x4
 1059 0006 00000000 		.4byte	.Ldebug_abbrev0
 1060 000a 04       		.byte	0x4
 1061 000b 01       		.uleb128 0x1
 1062 000c 86000000 		.4byte	.LASF119
 1063 0010 0C       		.byte	0xc
 1064 0011 61010000 		.4byte	.LASF120
 1065 0015 1C000000 		.4byte	.LASF121
 1066 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 1067 001d 00000000 		.4byte	0
 1068 0021 00000000 		.4byte	.Ldebug_line0
 1069 0025 02       		.uleb128 0x2
 1070 0026 01       		.byte	0x1
 1071 0027 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 25


 1072 0028 A3010000 		.4byte	.LASF0
 1073 002c 03       		.uleb128 0x3
 1074 002d 64000000 		.4byte	.LASF4
 1075 0031 02       		.byte	0x2
 1076 0032 1D       		.byte	0x1d
 1077 0033 37000000 		.4byte	0x37
 1078 0037 02       		.uleb128 0x2
 1079 0038 01       		.byte	0x1
 1080 0039 08       		.byte	0x8
 1081 003a 8C040000 		.4byte	.LASF1
 1082 003e 02       		.uleb128 0x2
 1083 003f 02       		.byte	0x2
 1084 0040 05       		.byte	0x5
 1085 0041 5F030000 		.4byte	.LASF2
 1086 0045 02       		.uleb128 0x2
 1087 0046 02       		.byte	0x2
 1088 0047 07       		.byte	0x7
 1089 0048 A2050000 		.4byte	.LASF3
 1090 004c 03       		.uleb128 0x3
 1091 004d 6E050000 		.4byte	.LASF5
 1092 0051 02       		.byte	0x2
 1093 0052 3F       		.byte	0x3f
 1094 0053 57000000 		.4byte	0x57
 1095 0057 02       		.uleb128 0x2
 1096 0058 04       		.byte	0x4
 1097 0059 05       		.byte	0x5
 1098 005a 1E020000 		.4byte	.LASF6
 1099 005e 02       		.uleb128 0x2
 1100 005f 04       		.byte	0x4
 1101 0060 07       		.byte	0x7
 1102 0061 07030000 		.4byte	.LASF7
 1103 0065 02       		.uleb128 0x2
 1104 0066 08       		.byte	0x8
 1105 0067 05       		.byte	0x5
 1106 0068 95010000 		.4byte	.LASF8
 1107 006c 02       		.uleb128 0x2
 1108 006d 08       		.byte	0x8
 1109 006e 07       		.byte	0x7
 1110 006f 1F010000 		.4byte	.LASF9
 1111 0073 04       		.uleb128 0x4
 1112 0074 04       		.byte	0x4
 1113 0075 05       		.byte	0x5
 1114 0076 696E7400 		.ascii	"int\000"
 1115 007a 02       		.uleb128 0x2
 1116 007b 04       		.byte	0x4
 1117 007c 07       		.byte	0x7
 1118 007d 56050000 		.4byte	.LASF10
 1119 0081 03       		.uleb128 0x3
 1120 0082 47060000 		.4byte	.LASF11
 1121 0086 03       		.byte	0x3
 1122 0087 18       		.byte	0x18
 1123 0088 2C000000 		.4byte	0x2c
 1124 008c 03       		.uleb128 0x3
 1125 008d 84040000 		.4byte	.LASF12
 1126 0091 03       		.byte	0x3
 1127 0092 2C       		.byte	0x2c
 1128 0093 4C000000 		.4byte	0x4c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 26


 1129 0097 02       		.uleb128 0x2
 1130 0098 08       		.byte	0x8
 1131 0099 04       		.byte	0x4
 1132 009a 39050000 		.4byte	.LASF13
 1133 009e 02       		.uleb128 0x2
 1134 009f 04       		.byte	0x4
 1135 00a0 07       		.byte	0x7
 1136 00a1 DB030000 		.4byte	.LASF14
 1137 00a5 05       		.uleb128 0x5
 1138 00a6 04       		.byte	0x4
 1139 00a7 AB000000 		.4byte	0xab
 1140 00ab 02       		.uleb128 0x2
 1141 00ac 01       		.byte	0x1
 1142 00ad 08       		.byte	0x8
 1143 00ae 51050000 		.4byte	.LASF15
 1144 00b2 05       		.uleb128 0x5
 1145 00b3 04       		.byte	0x4
 1146 00b4 B8000000 		.4byte	0xb8
 1147 00b8 06       		.uleb128 0x6
 1148 00b9 AB000000 		.4byte	0xab
 1149 00bd 07       		.uleb128 0x7
 1150 00be AB000000 		.4byte	0xab
 1151 00c2 CD000000 		.4byte	0xcd
 1152 00c6 08       		.uleb128 0x8
 1153 00c7 9E000000 		.4byte	0x9e
 1154 00cb 17       		.byte	0x17
 1155 00cc 00       		.byte	0
 1156 00cd 02       		.uleb128 0x2
 1157 00ce 08       		.byte	0x8
 1158 00cf 04       		.byte	0x4
 1159 00d0 81060000 		.4byte	.LASF16
 1160 00d4 02       		.uleb128 0x2
 1161 00d5 04       		.byte	0x4
 1162 00d6 04       		.byte	0x4
 1163 00d7 51040000 		.4byte	.LASF17
 1164 00db 09       		.uleb128 0x9
 1165 00dc 43020000 		.4byte	.LASF18
 1166 00e0 04       		.byte	0x4
 1167 00e1 9201     		.2byte	0x192
 1168 00e3 37000000 		.4byte	0x37
 1169 00e7 09       		.uleb128 0x9
 1170 00e8 00000000 		.4byte	.LASF19
 1171 00ec 04       		.byte	0x4
 1172 00ed 9301     		.2byte	0x193
 1173 00ef 45000000 		.4byte	0x45
 1174 00f3 09       		.uleb128 0x9
 1175 00f4 4F060000 		.4byte	.LASF20
 1176 00f8 04       		.byte	0x4
 1177 00f9 9601     		.2byte	0x196
 1178 00fb 3E000000 		.4byte	0x3e
 1179 00ff 09       		.uleb128 0x9
 1180 0100 6A020000 		.4byte	.LASF21
 1181 0104 04       		.byte	0x4
 1182 0105 9701     		.2byte	0x197
 1183 0107 57000000 		.4byte	0x57
 1184 010b 0A       		.uleb128 0xa
 1185 010c 8101     		.2byte	0x181
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 27


 1186 010e 05       		.byte	0x5
 1187 010f 0A       		.byte	0xa
 1188 0110 39010000 		.4byte	0x139
 1189 0114 0B       		.uleb128 0xb
 1190 0115 E4030000 		.4byte	.LASF22
 1191 0119 05       		.byte	0x5
 1192 011a 0C       		.byte	0xc
 1193 011b 39010000 		.4byte	0x139
 1194 011f 00       		.byte	0
 1195 0120 0B       		.uleb128 0xb
 1196 0121 DC050000 		.4byte	.LASF23
 1197 0125 05       		.byte	0x5
 1198 0126 0D       		.byte	0xd
 1199 0127 DB000000 		.4byte	0xdb
 1200 012b 80       		.byte	0x80
 1201 012c 0B       		.uleb128 0xb
 1202 012d E6040000 		.4byte	.LASF24
 1203 0131 05       		.byte	0x5
 1204 0132 0F       		.byte	0xf
 1205 0133 49010000 		.4byte	0x149
 1206 0137 81       		.byte	0x81
 1207 0138 00       		.byte	0
 1208 0139 07       		.uleb128 0x7
 1209 013a AB000000 		.4byte	0xab
 1210 013e 49010000 		.4byte	0x149
 1211 0142 08       		.uleb128 0x8
 1212 0143 9E000000 		.4byte	0x9e
 1213 0147 7F       		.byte	0x7f
 1214 0148 00       		.byte	0
 1215 0149 07       		.uleb128 0x7
 1216 014a AB000000 		.4byte	0xab
 1217 014e 59010000 		.4byte	0x159
 1218 0152 08       		.uleb128 0x8
 1219 0153 9E000000 		.4byte	0x9e
 1220 0157 FF       		.byte	0xff
 1221 0158 00       		.byte	0
 1222 0159 03       		.uleb128 0x3
 1223 015a AA040000 		.4byte	.LASF25
 1224 015e 05       		.byte	0x5
 1225 015f 10       		.byte	0x10
 1226 0160 0B010000 		.4byte	0x10b
 1227 0164 0C       		.uleb128 0xc
 1228 0165 1A       		.byte	0x1a
 1229 0166 06       		.byte	0x6
 1230 0167 10       		.byte	0x10
 1231 0168 9D010000 		.4byte	0x19d
 1232 016c 0B       		.uleb128 0xb
 1233 016d 9F020000 		.4byte	.LASF26
 1234 0171 06       		.byte	0x6
 1235 0172 11       		.byte	0x11
 1236 0173 9D010000 		.4byte	0x19d
 1237 0177 00       		.byte	0
 1238 0178 0B       		.uleb128 0xb
 1239 0179 94050000 		.4byte	.LASF27
 1240 017d 06       		.byte	0x6
 1241 017e 12       		.byte	0x12
 1242 017f F3000000 		.4byte	0xf3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 28


 1243 0183 16       		.byte	0x16
 1244 0184 0B       		.uleb128 0xb
 1245 0185 F4020000 		.4byte	.LASF28
 1246 0189 06       		.byte	0x6
 1247 018a 13       		.byte	0x13
 1248 018b DB000000 		.4byte	0xdb
 1249 018f 18       		.byte	0x18
 1250 0190 0B       		.uleb128 0xb
 1251 0191 07000000 		.4byte	.LASF29
 1252 0195 06       		.byte	0x6
 1253 0196 14       		.byte	0x14
 1254 0197 DB000000 		.4byte	0xdb
 1255 019b 19       		.byte	0x19
 1256 019c 00       		.byte	0
 1257 019d 07       		.uleb128 0x7
 1258 019e F3000000 		.4byte	0xf3
 1259 01a2 AD010000 		.4byte	0x1ad
 1260 01a6 08       		.uleb128 0x8
 1261 01a7 9E000000 		.4byte	0x9e
 1262 01ab 0A       		.byte	0xa
 1263 01ac 00       		.byte	0
 1264 01ad 03       		.uleb128 0x3
 1265 01ae 69040000 		.4byte	.LASF30
 1266 01b2 06       		.byte	0x6
 1267 01b3 15       		.byte	0x15
 1268 01b4 64010000 		.4byte	0x164
 1269 01b8 0C       		.uleb128 0xc
 1270 01b9 2C       		.byte	0x2c
 1271 01ba 07       		.byte	0x7
 1272 01bb 14       		.byte	0x14
 1273 01bc E5010000 		.4byte	0x1e5
 1274 01c0 0D       		.uleb128 0xd
 1275 01c1 6B657900 		.ascii	"key\000"
 1276 01c5 07       		.byte	0x7
 1277 01c6 15       		.byte	0x15
 1278 01c7 E5010000 		.4byte	0x1e5
 1279 01cb 00       		.byte	0
 1280 01cc 0B       		.uleb128 0xb
 1281 01cd C8020000 		.4byte	.LASF31
 1282 01d1 07       		.byte	0x7
 1283 01d2 16       		.byte	0x16
 1284 01d3 E5010000 		.4byte	0x1e5
 1285 01d7 14       		.byte	0x14
 1286 01d8 0B       		.uleb128 0xb
 1287 01d9 05040000 		.4byte	.LASF32
 1288 01dd 07       		.byte	0x7
 1289 01de 17       		.byte	0x17
 1290 01df FF000000 		.4byte	0xff
 1291 01e3 28       		.byte	0x28
 1292 01e4 00       		.byte	0
 1293 01e5 07       		.uleb128 0x7
 1294 01e6 AB000000 		.4byte	0xab
 1295 01ea F5010000 		.4byte	0x1f5
 1296 01ee 08       		.uleb128 0x8
 1297 01ef 9E000000 		.4byte	0x9e
 1298 01f3 13       		.byte	0x13
 1299 01f4 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 29


 1300 01f5 03       		.uleb128 0x3
 1301 01f6 E8020000 		.4byte	.LASF33
 1302 01fa 07       		.byte	0x7
 1303 01fb 19       		.byte	0x19
 1304 01fc B8010000 		.4byte	0x1b8
 1305 0200 0C       		.uleb128 0xc
 1306 0201 3C       		.byte	0x3c
 1307 0202 08       		.byte	0x8
 1308 0203 36       		.byte	0x36
 1309 0204 2D020000 		.4byte	0x22d
 1310 0208 0B       		.uleb128 0xb
 1311 0209 B5050000 		.4byte	.LASF34
 1312 020d 08       		.byte	0x8
 1313 020e 37       		.byte	0x37
 1314 020f E5010000 		.4byte	0x1e5
 1315 0213 00       		.byte	0
 1316 0214 0B       		.uleb128 0xb
 1317 0215 96020000 		.4byte	.LASF35
 1318 0219 08       		.byte	0x8
 1319 021a 38       		.byte	0x38
 1320 021b E5010000 		.4byte	0x1e5
 1321 021f 14       		.byte	0x14
 1322 0220 0B       		.uleb128 0xb
 1323 0221 E1040000 		.4byte	.LASF36
 1324 0225 08       		.byte	0x8
 1325 0226 39       		.byte	0x39
 1326 0227 E5010000 		.4byte	0x1e5
 1327 022b 28       		.byte	0x28
 1328 022c 00       		.byte	0
 1329 022d 03       		.uleb128 0x3
 1330 022e 0B020000 		.4byte	.LASF37
 1331 0232 08       		.byte	0x8
 1332 0233 3B       		.byte	0x3b
 1333 0234 00020000 		.4byte	0x200
 1334 0238 0C       		.uleb128 0xc
 1335 0239 20       		.byte	0x20
 1336 023a 08       		.byte	0x8
 1337 023b 3D       		.byte	0x3d
 1338 023c A1020000 		.4byte	0x2a1
 1339 0240 0B       		.uleb128 0xb
 1340 0241 18020000 		.4byte	.LASF38
 1341 0245 08       		.byte	0x8
 1342 0246 3E       		.byte	0x3e
 1343 0247 73000000 		.4byte	0x73
 1344 024b 00       		.byte	0
 1345 024c 0D       		.uleb128 0xd
 1346 024d 62657200 		.ascii	"ber\000"
 1347 0251 08       		.byte	0x8
 1348 0252 3F       		.byte	0x3f
 1349 0253 73000000 		.4byte	0x73
 1350 0257 04       		.byte	0x4
 1351 0258 0B       		.uleb128 0xb
 1352 0259 D0040000 		.4byte	.LASF39
 1353 025d 08       		.byte	0x8
 1354 025e 40       		.byte	0x40
 1355 025f 73000000 		.4byte	0x73
 1356 0263 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 30


 1357 0264 0B       		.uleb128 0xb
 1358 0265 AF010000 		.4byte	.LASF40
 1359 0269 08       		.byte	0x8
 1360 026a 41       		.byte	0x41
 1361 026b 73000000 		.4byte	0x73
 1362 026f 0C       		.byte	0xc
 1363 0270 0B       		.uleb128 0xb
 1364 0271 B6040000 		.4byte	.LASF41
 1365 0275 08       		.byte	0x8
 1366 0276 42       		.byte	0x42
 1367 0277 73000000 		.4byte	0x73
 1368 027b 10       		.byte	0x10
 1369 027c 0B       		.uleb128 0xb
 1370 027d B1040000 		.4byte	.LASF42
 1371 0281 08       		.byte	0x8
 1372 0282 43       		.byte	0x43
 1373 0283 73000000 		.4byte	0x73
 1374 0287 14       		.byte	0x14
 1375 0288 0B       		.uleb128 0xb
 1376 0289 D1010000 		.4byte	.LASF43
 1377 028d 08       		.byte	0x8
 1378 028e 44       		.byte	0x44
 1379 028f 73000000 		.4byte	0x73
 1380 0293 18       		.byte	0x18
 1381 0294 0B       		.uleb128 0xb
 1382 0295 4C030000 		.4byte	.LASF44
 1383 0299 08       		.byte	0x8
 1384 029a 45       		.byte	0x45
 1385 029b 73000000 		.4byte	0x73
 1386 029f 1C       		.byte	0x1c
 1387 02a0 00       		.byte	0
 1388 02a1 03       		.uleb128 0x3
 1389 02a2 F5040000 		.4byte	.LASF45
 1390 02a6 08       		.byte	0x8
 1391 02a7 47       		.byte	0x47
 1392 02a8 38020000 		.4byte	0x238
 1393 02ac 0C       		.uleb128 0xc
 1394 02ad 07       		.byte	0x7
 1395 02ae 08       		.byte	0x8
 1396 02af 53       		.byte	0x53
 1397 02b0 09030000 		.4byte	0x309
 1398 02b4 0B       		.uleb128 0xb
 1399 02b5 70020000 		.4byte	.LASF46
 1400 02b9 08       		.byte	0x8
 1401 02ba 55       		.byte	0x55
 1402 02bb DB000000 		.4byte	0xdb
 1403 02bf 00       		.byte	0
 1404 02c0 0B       		.uleb128 0xb
 1405 02c1 63060000 		.4byte	.LASF47
 1406 02c5 08       		.byte	0x8
 1407 02c6 57       		.byte	0x57
 1408 02c7 09030000 		.4byte	0x309
 1409 02cb 01       		.byte	0x1
 1410 02cc 0B       		.uleb128 0xb
 1411 02cd 78050000 		.4byte	.LASF48
 1412 02d1 08       		.byte	0x8
 1413 02d2 59       		.byte	0x59
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 31


 1414 02d3 DB000000 		.4byte	0xdb
 1415 02d7 02       		.byte	0x2
 1416 02d8 0B       		.uleb128 0xb
 1417 02d9 BB040000 		.4byte	.LASF49
 1418 02dd 08       		.byte	0x8
 1419 02de 5B       		.byte	0x5b
 1420 02df DB000000 		.4byte	0xdb
 1421 02e3 03       		.byte	0x3
 1422 02e4 0B       		.uleb128 0xb
 1423 02e5 BC020000 		.4byte	.LASF50
 1424 02e9 08       		.byte	0x8
 1425 02ea 5E       		.byte	0x5e
 1426 02eb DB000000 		.4byte	0xdb
 1427 02ef 04       		.byte	0x4
 1428 02f0 0B       		.uleb128 0xb
 1429 02f1 11060000 		.4byte	.LASF51
 1430 02f5 08       		.byte	0x8
 1431 02f6 63       		.byte	0x63
 1432 02f7 DB000000 		.4byte	0xdb
 1433 02fb 05       		.byte	0x5
 1434 02fc 0B       		.uleb128 0xb
 1435 02fd 14050000 		.4byte	.LASF52
 1436 0301 08       		.byte	0x8
 1437 0302 65       		.byte	0x65
 1438 0303 DB000000 		.4byte	0xdb
 1439 0307 06       		.byte	0x6
 1440 0308 00       		.byte	0
 1441 0309 02       		.uleb128 0x2
 1442 030a 01       		.byte	0x1
 1443 030b 02       		.byte	0x2
 1444 030c 7E040000 		.4byte	.LASF53
 1445 0310 03       		.uleb128 0x3
 1446 0311 97030000 		.4byte	.LASF54
 1447 0315 08       		.byte	0x8
 1448 0316 67       		.byte	0x67
 1449 0317 AC020000 		.4byte	0x2ac
 1450 031b 0C       		.uleb128 0xc
 1451 031c 06       		.byte	0x6
 1452 031d 09       		.byte	0x9
 1453 031e 2E       		.byte	0x2e
 1454 031f 54030000 		.4byte	0x354
 1455 0323 0B       		.uleb128 0xb
 1456 0324 B4010000 		.4byte	.LASF55
 1457 0328 09       		.byte	0x9
 1458 0329 30       		.byte	0x30
 1459 032a E7000000 		.4byte	0xe7
 1460 032e 00       		.byte	0
 1461 032f 0B       		.uleb128 0xb
 1462 0330 27020000 		.4byte	.LASF56
 1463 0334 09       		.byte	0x9
 1464 0335 31       		.byte	0x31
 1465 0336 F3000000 		.4byte	0xf3
 1466 033a 02       		.byte	0x2
 1467 033b 0B       		.uleb128 0xb
 1468 033c 55060000 		.4byte	.LASF57
 1469 0340 09       		.byte	0x9
 1470 0341 32       		.byte	0x32
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 32


 1471 0342 DB000000 		.4byte	0xdb
 1472 0346 04       		.byte	0x4
 1473 0347 0B       		.uleb128 0xb
 1474 0348 6E000000 		.4byte	.LASF58
 1475 034c 09       		.byte	0x9
 1476 034d 33       		.byte	0x33
 1477 034e DB000000 		.4byte	0xdb
 1478 0352 05       		.byte	0x5
 1479 0353 00       		.byte	0
 1480 0354 03       		.uleb128 0x3
 1481 0355 3D020000 		.4byte	.LASF59
 1482 0359 09       		.byte	0x9
 1483 035a 36       		.byte	0x36
 1484 035b 5F030000 		.4byte	0x35f
 1485 035f 0E       		.uleb128 0xe
 1486 0360 1B030000 		.4byte	0x31b
 1487 0364 0C       		.uleb128 0xc
 1488 0365 1C       		.byte	0x1c
 1489 0366 09       		.byte	0x9
 1490 0367 39       		.byte	0x39
 1491 0368 85030000 		.4byte	0x385
 1492 036c 0B       		.uleb128 0xb
 1493 036d 32030000 		.4byte	.LASF60
 1494 0371 09       		.byte	0x9
 1495 0372 3B       		.byte	0x3b
 1496 0373 85030000 		.4byte	0x385
 1497 0377 00       		.byte	0
 1498 0378 0B       		.uleb128 0xb
 1499 0379 88020000 		.4byte	.LASF61
 1500 037d 09       		.byte	0x9
 1501 037e 3C       		.byte	0x3c
 1502 037f BD000000 		.4byte	0xbd
 1503 0383 04       		.byte	0x4
 1504 0384 00       		.byte	0
 1505 0385 05       		.uleb128 0x5
 1506 0386 04       		.byte	0x4
 1507 0387 2D020000 		.4byte	0x22d
 1508 038b 03       		.uleb128 0x3
 1509 038c 8C030000 		.4byte	.LASF62
 1510 0390 09       		.byte	0x9
 1511 0391 3E       		.byte	0x3e
 1512 0392 64030000 		.4byte	0x364
 1513 0396 0C       		.uleb128 0xc
 1514 0397 68       		.byte	0x68
 1515 0398 09       		.byte	0x9
 1516 0399 44       		.byte	0x44
 1517 039a B7030000 		.4byte	0x3b7
 1518 039e 0B       		.uleb128 0xb
 1519 039f 3D030000 		.4byte	.LASF63
 1520 03a3 09       		.byte	0x9
 1521 03a4 49       		.byte	0x49
 1522 03a5 B7030000 		.4byte	0x3b7
 1523 03a9 00       		.byte	0
 1524 03aa 0B       		.uleb128 0xb
 1525 03ab 2A030000 		.4byte	.LASF64
 1526 03af 09       		.byte	0x9
 1527 03b0 4A       		.byte	0x4a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 33


 1528 03b1 73000000 		.4byte	0x73
 1529 03b5 64       		.byte	0x64
 1530 03b6 00       		.byte	0
 1531 03b7 07       		.uleb128 0x7
 1532 03b8 AB000000 		.4byte	0xab
 1533 03bc C7030000 		.4byte	0x3c7
 1534 03c0 08       		.uleb128 0x8
 1535 03c1 9E000000 		.4byte	0x9e
 1536 03c5 63       		.byte	0x63
 1537 03c6 00       		.byte	0
 1538 03c7 03       		.uleb128 0x3
 1539 03c8 38060000 		.4byte	.LASF65
 1540 03cc 09       		.byte	0x9
 1541 03cd 50       		.byte	0x50
 1542 03ce 96030000 		.4byte	0x396
 1543 03d2 0F       		.uleb128 0xf
 1544 03d3 19030000 		.4byte	.LASF66
 1545 03d7 01       		.byte	0x1
 1546 03d8 17       		.byte	0x17
 1547 03d9 B2000000 		.4byte	0xb2
 1548 03dd 00000000 		.4byte	.LFB64
 1549 03e1 14000000 		.4byte	.LFE64-.LFB64
 1550 03e5 01       		.uleb128 0x1
 1551 03e6 9C       		.byte	0x9c
 1552 03e7 0F       		.uleb128 0xf
 1553 03e8 2A040000 		.4byte	.LASF67
 1554 03ec 01       		.byte	0x1
 1555 03ed 1E       		.byte	0x1e
 1556 03ee 81000000 		.4byte	0x81
 1557 03f2 00000000 		.4byte	.LFB65
 1558 03f6 14000000 		.4byte	.LFE65-.LFB65
 1559 03fa 01       		.uleb128 0x1
 1560 03fb 9C       		.byte	0x9c
 1561 03fc 10       		.uleb128 0x10
 1562 03fd C5040000 		.4byte	.LASF122
 1563 0401 01       		.byte	0x1
 1564 0402 23       		.byte	0x23
 1565 0403 00000000 		.4byte	.LFB66
 1566 0407 28000000 		.4byte	.LFE66-.LFB66
 1567 040b 01       		.uleb128 0x1
 1568 040c 9C       		.byte	0x9c
 1569 040d 11       		.uleb128 0x11
 1570 040e CA030000 		.4byte	.LASF68
 1571 0412 01       		.byte	0x1
 1572 0413 2E       		.byte	0x2e
 1573 0414 00000000 		.4byte	.LFB67
 1574 0418 70000000 		.4byte	.LFE67-.LFB67
 1575 041c 01       		.uleb128 0x1
 1576 041d 9C       		.byte	0x9c
 1577 041e 31040000 		.4byte	0x431
 1578 0422 12       		.uleb128 0x12
 1579 0423 ED040000 		.4byte	.LASF71
 1580 0427 01       		.byte	0x1
 1581 0428 32       		.byte	0x32
 1582 0429 AB000000 		.4byte	0xab
 1583 042d 02       		.uleb128 0x2
 1584 042e 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 34


 1585 042f 77       		.sleb128 -9
 1586 0430 00       		.byte	0
 1587 0431 11       		.uleb128 0x11
 1588 0432 BC050000 		.4byte	.LASF69
 1589 0436 01       		.byte	0x1
 1590 0437 3E       		.byte	0x3e
 1591 0438 00000000 		.4byte	.LFB68
 1592 043c 1C000000 		.4byte	.LFE68-.LFB68
 1593 0440 01       		.uleb128 0x1
 1594 0441 9C       		.byte	0x9c
 1595 0442 55040000 		.4byte	0x455
 1596 0446 13       		.uleb128 0x13
 1597 0447 6C060000 		.4byte	.LASF82
 1598 044b 01       		.byte	0x1
 1599 044c 3E       		.byte	0x3e
 1600 044d A5000000 		.4byte	0xa5
 1601 0451 02       		.uleb128 0x2
 1602 0452 91       		.byte	0x91
 1603 0453 74       		.sleb128 -12
 1604 0454 00       		.byte	0
 1605 0455 14       		.uleb128 0x14
 1606 0456 F4010000 		.4byte	.LASF70
 1607 045a 01       		.byte	0x1
 1608 045b 42       		.byte	0x42
 1609 045c DB000000 		.4byte	0xdb
 1610 0460 00000000 		.4byte	.LFB69
 1611 0464 00010000 		.4byte	.LFE69-.LFB69
 1612 0468 01       		.uleb128 0x1
 1613 0469 9C       		.byte	0x9c
 1614 046a C0040000 		.4byte	0x4c0
 1615 046e 12       		.uleb128 0x12
 1616 046f 40040000 		.4byte	.LASF72
 1617 0473 01       		.byte	0x1
 1618 0474 43       		.byte	0x43
 1619 0475 A5000000 		.4byte	0xa5
 1620 0479 02       		.uleb128 0x2
 1621 047a 91       		.byte	0x91
 1622 047b 74       		.sleb128 -12
 1623 047c 15       		.uleb128 0x15
 1624 047d 2A000000 		.4byte	.LBB2
 1625 0481 96000000 		.4byte	.LBE2-.LBB2
 1626 0485 12       		.uleb128 0x12
 1627 0486 05040000 		.4byte	.LASF32
 1628 048a 01       		.byte	0x1
 1629 048b 52       		.byte	0x52
 1630 048c 57000000 		.4byte	0x57
 1631 0490 02       		.uleb128 0x2
 1632 0491 91       		.byte	0x91
 1633 0492 70       		.sleb128 -16
 1634 0493 12       		.uleb128 0x12
 1635 0494 45050000 		.4byte	.LASF73
 1636 0498 01       		.byte	0x1
 1637 0499 53       		.byte	0x53
 1638 049a C0040000 		.4byte	0x4c0
 1639 049e 03       		.uleb128 0x3
 1640 049f 91       		.byte	0x91
 1641 04a0 A07F     		.sleb128 -96
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 35


 1642 04a2 12       		.uleb128 0x12
 1643 04a3 C8020000 		.4byte	.LASF31
 1644 04a7 01       		.byte	0x1
 1645 04a8 57       		.byte	0x57
 1646 04a9 E5010000 		.4byte	0x1e5
 1647 04ad 02       		.uleb128 0x2
 1648 04ae 91       		.byte	0x91
 1649 04af 5C       		.sleb128 -36
 1650 04b0 12       		.uleb128 0x12
 1651 04b1 85050000 		.4byte	.LASF74
 1652 04b5 01       		.byte	0x1
 1653 04b6 5A       		.byte	0x5a
 1654 04b7 AD010000 		.4byte	0x1ad
 1655 04bb 02       		.uleb128 0x2
 1656 04bc 91       		.byte	0x91
 1657 04bd 40       		.sleb128 -64
 1658 04be 00       		.byte	0
 1659 04bf 00       		.byte	0
 1660 04c0 07       		.uleb128 0x7
 1661 04c1 AB000000 		.4byte	0xab
 1662 04c5 D0040000 		.4byte	0x4d0
 1663 04c9 08       		.uleb128 0x8
 1664 04ca 9E000000 		.4byte	0x9e
 1665 04ce 1F       		.byte	0x1f
 1666 04cf 00       		.byte	0
 1667 04d0 14       		.uleb128 0x14
 1668 04d1 1E060000 		.4byte	.LASF75
 1669 04d5 01       		.byte	0x1
 1670 04d6 78       		.byte	0x78
 1671 04d7 AD010000 		.4byte	0x1ad
 1672 04db 00000000 		.4byte	.LFB70
 1673 04df 1C010000 		.4byte	.LFE70-.LFB70
 1674 04e3 01       		.uleb128 0x1
 1675 04e4 9C       		.byte	0x9c
 1676 04e5 1A050000 		.4byte	0x51a
 1677 04e9 12       		.uleb128 0x12
 1678 04ea 49020000 		.4byte	.LASF76
 1679 04ee 01       		.byte	0x1
 1680 04ef 7B       		.byte	0x7b
 1681 04f0 AD010000 		.4byte	0x1ad
 1682 04f4 02       		.uleb128 0x2
 1683 04f5 91       		.byte	0x91
 1684 04f6 50       		.sleb128 -48
 1685 04f7 12       		.uleb128 0x12
 1686 04f8 78040000 		.4byte	.LASF77
 1687 04fc 01       		.byte	0x1
 1688 04fd 9D       		.byte	0x9d
 1689 04fe A5000000 		.4byte	0xa5
 1690 0502 02       		.uleb128 0x2
 1691 0503 91       		.byte	0x91
 1692 0504 6C       		.sleb128 -20
 1693 0505 16       		.uleb128 0x16
 1694 0506 00000000 		.4byte	.Ldebug_ranges0+0
 1695 050a 12       		.uleb128 0x12
 1696 050b 7A020000 		.4byte	.LASF78
 1697 050f 01       		.byte	0x1
 1698 0510 A5       		.byte	0xa5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 36


 1699 0511 E7000000 		.4byte	0xe7
 1700 0515 02       		.uleb128 0x2
 1701 0516 91       		.byte	0x91
 1702 0517 6A       		.sleb128 -22
 1703 0518 00       		.byte	0
 1704 0519 00       		.byte	0
 1705 051a 14       		.uleb128 0x14
 1706 051b 57040000 		.4byte	.LASF79
 1707 051f 01       		.byte	0x1
 1708 0520 C0       		.byte	0xc0
 1709 0521 59010000 		.4byte	0x159
 1710 0525 00000000 		.4byte	.LFB71
 1711 0529 CC000000 		.4byte	.LFE71-.LFB71
 1712 052d 01       		.uleb128 0x1
 1713 052e 9C       		.byte	0x9c
 1714 052f 52050000 		.4byte	0x552
 1715 0533 12       		.uleb128 0x12
 1716 0534 42010000 		.4byte	.LASF80
 1717 0538 01       		.byte	0x1
 1718 0539 C2       		.byte	0xc2
 1719 053a 59010000 		.4byte	0x159
 1720 053e 03       		.uleb128 0x3
 1721 053f 91       		.byte	0x91
 1722 0540 EC7C     		.sleb128 -404
 1723 0542 12       		.uleb128 0x12
 1724 0543 45030000 		.4byte	.LASF81
 1725 0547 01       		.byte	0x1
 1726 0548 C7       		.byte	0xc7
 1727 0549 AD010000 		.4byte	0x1ad
 1728 054d 03       		.uleb128 0x3
 1729 054e 91       		.byte	0x91
 1730 054f D07C     		.sleb128 -432
 1731 0551 00       		.byte	0
 1732 0552 17       		.uleb128 0x17
 1733 0553 D0050000 		.4byte	.LASF123
 1734 0557 01       		.byte	0x1
 1735 0558 DE       		.byte	0xde
 1736 0559 E7000000 		.4byte	0xe7
 1737 055d 00000000 		.4byte	.LFB72
 1738 0561 8E000000 		.4byte	.LFE72-.LFB72
 1739 0565 01       		.uleb128 0x1
 1740 0566 9C       		.byte	0x9c
 1741 0567 94050000 		.4byte	0x594
 1742 056b 13       		.uleb128 0x13
 1743 056c 82020000 		.4byte	.LASF83
 1744 0570 01       		.byte	0x1
 1745 0571 DE       		.byte	0xde
 1746 0572 94050000 		.4byte	0x594
 1747 0576 02       		.uleb128 0x2
 1748 0577 91       		.byte	0x91
 1749 0578 64       		.sleb128 -28
 1750 0579 18       		.uleb128 0x18
 1751 057a 6E00     		.ascii	"n\000"
 1752 057c 01       		.byte	0x1
 1753 057d DE       		.byte	0xde
 1754 057e DB000000 		.4byte	0xdb
 1755 0582 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 37


 1756 0583 91       		.byte	0x91
 1757 0584 63       		.sleb128 -29
 1758 0585 12       		.uleb128 0x12
 1759 0586 70010000 		.4byte	.LASF84
 1760 058a 01       		.byte	0x1
 1761 058b E0       		.byte	0xe0
 1762 058c F3000000 		.4byte	0xf3
 1763 0590 02       		.uleb128 0x2
 1764 0591 91       		.byte	0x91
 1765 0592 6E       		.sleb128 -18
 1766 0593 00       		.byte	0
 1767 0594 05       		.uleb128 0x5
 1768 0595 04       		.byte	0x4
 1769 0596 F3000000 		.4byte	0xf3
 1770 059a 11       		.uleb128 0x11
 1771 059b B7020000 		.4byte	.LASF85
 1772 059f 01       		.byte	0x1
 1773 05a0 F0       		.byte	0xf0
 1774 05a1 00000000 		.4byte	.LFB73
 1775 05a5 98000000 		.4byte	.LFE73-.LFB73
 1776 05a9 01       		.uleb128 0x1
 1777 05aa 9C       		.byte	0x9c
 1778 05ab E0050000 		.4byte	0x5e0
 1779 05af 18       		.uleb128 0x18
 1780 05b0 6100     		.ascii	"a\000"
 1781 05b2 01       		.byte	0x1
 1782 05b3 F0       		.byte	0xf0
 1783 05b4 94050000 		.4byte	0x594
 1784 05b8 02       		.uleb128 0x2
 1785 05b9 91       		.byte	0x91
 1786 05ba 6C       		.sleb128 -20
 1787 05bb 18       		.uleb128 0x18
 1788 05bc 6E00     		.ascii	"n\000"
 1789 05be 01       		.byte	0x1
 1790 05bf F0       		.byte	0xf0
 1791 05c0 F3000000 		.4byte	0xf3
 1792 05c4 02       		.uleb128 0x2
 1793 05c5 91       		.byte	0x91
 1794 05c6 6A       		.sleb128 -22
 1795 05c7 19       		.uleb128 0x19
 1796 05c8 6900     		.ascii	"i\000"
 1797 05ca 01       		.byte	0x1
 1798 05cb F1       		.byte	0xf1
 1799 05cc F3000000 		.4byte	0xf3
 1800 05d0 02       		.uleb128 0x2
 1801 05d1 91       		.byte	0x91
 1802 05d2 76       		.sleb128 -10
 1803 05d3 19       		.uleb128 0x19
 1804 05d4 6A00     		.ascii	"j\000"
 1805 05d6 01       		.byte	0x1
 1806 05d7 F1       		.byte	0xf1
 1807 05d8 F3000000 		.4byte	0xf3
 1808 05dc 02       		.uleb128 0x2
 1809 05dd 91       		.byte	0x91
 1810 05de 74       		.sleb128 -12
 1811 05df 00       		.byte	0
 1812 05e0 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 38


 1813 05e1 3B040000 		.4byte	.LASF86
 1814 05e5 01       		.byte	0x1
 1815 05e6 FC       		.byte	0xfc
 1816 05e7 00000000 		.4byte	.LFB74
 1817 05eb 2A000000 		.4byte	.LFE74-.LFB74
 1818 05ef 01       		.uleb128 0x1
 1819 05f0 9C       		.byte	0x9c
 1820 05f1 1A060000 		.4byte	0x61a
 1821 05f5 18       		.uleb128 0x18
 1822 05f6 7000     		.ascii	"p\000"
 1823 05f8 01       		.byte	0x1
 1824 05f9 FC       		.byte	0xfc
 1825 05fa 94050000 		.4byte	0x594
 1826 05fe 02       		.uleb128 0x2
 1827 05ff 91       		.byte	0x91
 1828 0600 6C       		.sleb128 -20
 1829 0601 18       		.uleb128 0x18
 1830 0602 7100     		.ascii	"q\000"
 1831 0604 01       		.byte	0x1
 1832 0605 FC       		.byte	0xfc
 1833 0606 94050000 		.4byte	0x594
 1834 060a 02       		.uleb128 0x2
 1835 060b 91       		.byte	0x91
 1836 060c 68       		.sleb128 -24
 1837 060d 19       		.uleb128 0x19
 1838 060e 7400     		.ascii	"t\000"
 1839 0610 01       		.byte	0x1
 1840 0611 FD       		.byte	0xfd
 1841 0612 F3000000 		.4byte	0xf3
 1842 0616 02       		.uleb128 0x2
 1843 0617 91       		.byte	0x91
 1844 0618 76       		.sleb128 -10
 1845 0619 00       		.byte	0
 1846 061a 07       		.uleb128 0x7
 1847 061b AB000000 		.4byte	0xab
 1848 061f 2B060000 		.4byte	0x62b
 1849 0623 1B       		.uleb128 0x1b
 1850 0624 9E000000 		.4byte	0x9e
 1851 0628 0001     		.2byte	0x100
 1852 062a 00       		.byte	0
 1853 062b 12       		.uleb128 0x12
 1854 062c 14010000 		.4byte	.LASF87
 1855 0630 01       		.byte	0x1
 1856 0631 0C       		.byte	0xc
 1857 0632 1A060000 		.4byte	0x61a
 1858 0636 05       		.uleb128 0x5
 1859 0637 03       		.byte	0x3
 1860 0638 00000000 		.4byte	uart_chars
 1861 063c 12       		.uleb128 0x12
 1862 063d C0030000 		.4byte	.LASF88
 1863 0641 01       		.byte	0x1
 1864 0642 0D       		.byte	0xd
 1865 0643 81000000 		.4byte	0x81
 1866 0647 05       		.uleb128 0x5
 1867 0648 03       		.byte	0x3
 1868 0649 01010000 		.4byte	num_chars
 1869 064d 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 39


 1870 064e B2020000 		.4byte	.LASF89
 1871 0652 01       		.byte	0x1
 1872 0653 0F       		.byte	0xf
 1873 0654 B2000000 		.4byte	0xb2
 1874 0658 05       		.uleb128 0x5
 1875 0659 03       		.byte	0x3
 1876 065a 00000000 		.4byte	line
 1877 065e 12       		.uleb128 0x12
 1878 065f 0F040000 		.4byte	.LASF90
 1879 0663 01       		.byte	0x1
 1880 0664 12       		.byte	0x12
 1881 0665 B2000000 		.4byte	0xb2
 1882 0669 05       		.uleb128 0x5
 1883 066a 03       		.byte	0x3
 1884 066b 04010000 		.4byte	match
 1885 066f 12       		.uleb128 0x12
 1886 0670 33040000 		.4byte	.LASF91
 1887 0674 01       		.byte	0x1
 1888 0675 13       		.byte	0x13
 1889 0676 B2000000 		.4byte	0xb2
 1890 067a 05       		.uleb128 0x5
 1891 067b 03       		.byte	0x3
 1892 067c 08010000 		.4byte	pattern
 1893 0680 1C       		.uleb128 0x1c
 1894 0681 54010000 		.4byte	.LASF92
 1895 0685 0A       		.byte	0xa
 1896 0686 1207     		.2byte	0x712
 1897 0688 8C060000 		.4byte	0x68c
 1898 068c 0E       		.uleb128 0xe
 1899 068d 8C000000 		.4byte	0x8c
 1900 0691 1D       		.uleb128 0x1d
 1901 0692 26050000 		.4byte	.LASF93
 1902 0696 06       		.byte	0x6
 1903 0697 25       		.byte	0x25
 1904 0698 B7030000 		.4byte	0x3b7
 1905 069c 05       		.uleb128 0x5
 1906 069d 03       		.byte	0x3
 1907 069e 00000000 		.4byte	level_sensor_inbox
 1908 06a2 1D       		.uleb128 0x1d
 1909 06a3 E3050000 		.4byte	.LASF94
 1910 06a7 06       		.byte	0x6
 1911 06a8 27       		.byte	0x27
 1912 06a9 09030000 		.4byte	0x309
 1913 06ad 05       		.uleb128 0x5
 1914 06ae 03       		.byte	0x3
 1915 06af 00000000 		.4byte	level_sensor_enabled
 1916 06b3 1D       		.uleb128 0x1d
 1917 06b4 54000000 		.4byte	.LASF95
 1918 06b8 07       		.byte	0x7
 1919 06b9 11       		.byte	0x11
 1920 06ba 09030000 		.4byte	0x309
 1921 06be 05       		.uleb128 0x5
 1922 06bf 03       		.byte	0x3
 1923 06c0 00000000 		.4byte	buffer_overflow
 1924 06c4 1D       		.uleb128 0x1d
 1925 06c5 AE030000 		.4byte	.LASF96
 1926 06c9 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 40


 1927 06ca 22       		.byte	0x22
 1928 06cb E7000000 		.4byte	0xe7
 1929 06cf 05       		.uleb128 0x5
 1930 06d0 03       		.byte	0x3
 1931 06d1 00000000 		.4byte	dataPointsInStack
 1932 06d5 1D       		.uleb128 0x1d
 1933 06d6 F8050000 		.4byte	.LASF97
 1934 06da 07       		.byte	0x7
 1935 06db 23       		.byte	0x23
 1936 06dc E7000000 		.4byte	0xe7
 1937 06e0 05       		.uleb128 0x5
 1938 06e1 03       		.byte	0x3
 1939 06e2 00000000 		.4byte	dataPointsInStackDesired
 1940 06e6 07       		.uleb128 0x7
 1941 06e7 F5010000 		.4byte	0x1f5
 1942 06eb F6060000 		.4byte	0x6f6
 1943 06ef 08       		.uleb128 0x8
 1944 06f0 9E000000 		.4byte	0x9e
 1945 06f4 95       		.byte	0x95
 1946 06f5 00       		.byte	0
 1947 06f6 1D       		.uleb128 0x1d
 1948 06f7 25030000 		.4byte	.LASF98
 1949 06fb 07       		.byte	0x7
 1950 06fc 24       		.byte	0x24
 1951 06fd E6060000 		.4byte	0x6e6
 1952 0701 05       		.uleb128 0x5
 1953 0702 03       		.byte	0x3
 1954 0703 00000000 		.4byte	data
 1955 0707 1D       		.uleb128 0x1d
 1956 0708 36010000 		.4byte	.LASF99
 1957 070c 08       		.byte	0x8
 1958 070d 20       		.byte	0x20
 1959 070e DB000000 		.4byte	0xdb
 1960 0712 05       		.uleb128 0x5
 1961 0713 03       		.byte	0x3
 1962 0714 00000000 		.4byte	modem_state
 1963 0718 1D       		.uleb128 0x1d
 1964 0719 75030000 		.4byte	.LASF100
 1965 071d 08       		.byte	0x8
 1966 071e 6A       		.byte	0x6a
 1967 071f FF000000 		.4byte	0xff
 1968 0723 05       		.uleb128 0x5
 1969 0724 03       		.byte	0x3
 1970 0725 00000000 		.4byte	modem_start_time_stamp
 1971 0729 1D       		.uleb128 0x1d
 1972 072a 32030000 		.4byte	.LASF60
 1973 072e 08       		.byte	0x8
 1974 072f 6B       		.byte	0x6b
 1975 0730 2D020000 		.4byte	0x22d
 1976 0734 05       		.uleb128 0x5
 1977 0735 03       		.byte	0x3
 1978 0736 00000000 		.4byte	modem_info
 1979 073a 1D       		.uleb128 0x1d
 1980 073b 89010000 		.4byte	.LASF101
 1981 073f 08       		.byte	0x8
 1982 0740 6C       		.byte	0x6c
 1983 0741 A1020000 		.4byte	0x2a1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 41


 1984 0745 05       		.uleb128 0x5
 1985 0746 03       		.byte	0x3
 1986 0747 00000000 		.4byte	modem_stats
 1987 074b 1D       		.uleb128 0x1d
 1988 074c 15040000 		.4byte	.LASF102
 1989 0750 08       		.byte	0x8
 1990 0751 6D       		.byte	0x6d
 1991 0752 10030000 		.4byte	0x310
 1992 0756 05       		.uleb128 0x5
 1993 0757 03       		.byte	0x3
 1994 0758 00000000 		.4byte	updatable_parameters
 1995 075c 1D       		.uleb128 0x1d
 1996 075d D8020000 		.4byte	.LASF103
 1997 0761 0B       		.byte	0xb
 1998 0762 07       		.byte	0x7
 1999 0763 09030000 		.4byte	0x309
 2000 0767 05       		.uleb128 0x5
 2001 0768 03       		.byte	0x3
 2002 0769 00000000 		.4byte	App_LED_enabled
 2003 076d 1D       		.uleb128 0x1d
 2004 076e 88060000 		.4byte	.LASF104
 2005 0772 0B       		.byte	0xb
 2006 0773 08       		.byte	0x8
 2007 0774 B7030000 		.4byte	0x3b7
 2008 0778 05       		.uleb128 0x5
 2009 0779 03       		.byte	0x3
 2010 077a 00000000 		.4byte	app_led_inbox
 2011 077e 07       		.uleb128 0x7
 2012 077f AB000000 		.4byte	0xab
 2013 0783 8F070000 		.4byte	0x78f
 2014 0787 1B       		.uleb128 0x1b
 2015 0788 9E000000 		.4byte	0x9e
 2016 078c 0F27     		.2byte	0x270f
 2017 078e 00       		.byte	0
 2018 078f 1D       		.uleb128 0x1d
 2019 0790 74060000 		.4byte	.LASF105
 2020 0794 09       		.byte	0x9
 2021 0795 18       		.byte	0x18
 2022 0796 7E070000 		.4byte	0x77e
 2023 079a 05       		.uleb128 0x5
 2024 079b 03       		.byte	0x3
 2025 079c 00000000 		.4byte	http_request
 2026 07a0 1D       		.uleb128 0x1d
 2027 07a1 01020000 		.4byte	.LASF106
 2028 07a5 09       		.byte	0x9
 2029 07a6 19       		.byte	0x19
 2030 07a7 7E070000 		.4byte	0x77e
 2031 07ab 05       		.uleb128 0x5
 2032 07ac 03       		.byte	0x3
 2033 07ad 00000000 		.4byte	http_body
 2034 07b1 07       		.uleb128 0x7
 2035 07b2 AB000000 		.4byte	0xab
 2036 07b6 C1070000 		.4byte	0x7c1
 2037 07ba 08       		.uleb128 0x8
 2038 07bb 9E000000 		.4byte	0x9e
 2039 07bf C7       		.byte	0xc7
 2040 07c0 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 42


 2041 07c1 1D       		.uleb128 0x1d
 2042 07c2 63050000 		.4byte	.LASF107
 2043 07c6 09       		.byte	0x9
 2044 07c7 1A       		.byte	0x1a
 2045 07c8 B1070000 		.4byte	0x7b1
 2046 07cc 05       		.uleb128 0x5
 2047 07cd 03       		.byte	0x3
 2048 07ce 00000000 		.4byte	http_route
 2049 07d2 1D       		.uleb128 0x1d
 2050 07d3 D5040000 		.4byte	.LASF108
 2051 07d7 09       		.byte	0x9
 2052 07d8 41       		.byte	0x41
 2053 07d9 8B030000 		.4byte	0x38b
 2054 07dd 05       		.uleb128 0x5
 2055 07de 03       		.byte	0x3
 2056 07df 00000000 		.4byte	system_info
 2057 07e3 1D       		.uleb128 0x1d
 2058 07e4 9A040000 		.4byte	.LASF109
 2059 07e8 09       		.byte	0x9
 2060 07e9 53       		.byte	0x53
 2061 07ea C7030000 		.4byte	0x3c7
 2062 07ee 05       		.uleb128 0x5
 2063 07ef 03       		.byte	0x3
 2064 07f0 00000000 		.4byte	system_settings
 2065 07f4 1D       		.uleb128 0x1d
 2066 07f5 47010000 		.4byte	.LASF110
 2067 07f9 09       		.byte	0x9
 2068 07fa 6F       		.byte	0x6f
 2069 07fb 54030000 		.4byte	0x354
 2070 07ff 05       		.uleb128 0x5
 2071 0800 03       		.byte	0x3
 2072 0801 00000000 		.4byte	alarmMeasure
 2073 0805 1D       		.uleb128 0x1d
 2074 0806 C3010000 		.4byte	.LASF111
 2075 080a 09       		.byte	0x9
 2076 080b 70       		.byte	0x70
 2077 080c DB000000 		.4byte	0xdb
 2078 0810 05       		.uleb128 0x5
 2079 0811 03       		.byte	0x3
 2080 0812 00000000 		.4byte	timeToMeasure
 2081 0816 1D       		.uleb128 0x1d
 2082 0817 CE020000 		.4byte	.LASF112
 2083 081b 09       		.byte	0x9
 2084 081c 71       		.byte	0x71
 2085 081d 54030000 		.4byte	0x354
 2086 0821 05       		.uleb128 0x5
 2087 0822 03       		.byte	0x3
 2088 0823 00000000 		.4byte	alarmSync
 2089 0827 1D       		.uleb128 0x1d
 2090 0828 E9010000 		.4byte	.LASF113
 2091 082c 09       		.byte	0x9
 2092 082d 72       		.byte	0x72
 2093 082e DB000000 		.4byte	0xdb
 2094 0832 05       		.uleb128 0x5
 2095 0833 03       		.byte	0x3
 2096 0834 00000000 		.4byte	timeToSync
 2097 0838 1D       		.uleb128 0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 43


 2098 0839 EE030000 		.4byte	.LASF114
 2099 083d 09       		.byte	0x9
 2100 083e 73       		.byte	0x73
 2101 083f DB000000 		.4byte	0xdb
 2102 0843 05       		.uleb128 0x5
 2103 0844 03       		.byte	0x3
 2104 0845 00000000 		.4byte	timeToSycnRemoteParams
 2105 0849 1E       		.uleb128 0x1e
 2106 084a 68657900 		.ascii	"hey\000"
 2107 084e 09       		.byte	0x9
 2108 084f 74       		.byte	0x74
 2109 0850 DB000000 		.4byte	0xdb
 2110 0854 05       		.uleb128 0x5
 2111 0855 03       		.byte	0x3
 2112 0856 00000000 		.4byte	hey
 2113 085a 1D       		.uleb128 0x1d
 2114 085b 69030000 		.4byte	.LASF115
 2115 085f 09       		.byte	0x9
 2116 0860 77       		.byte	0x77
 2117 0861 54030000 		.4byte	0x354
 2118 0865 05       		.uleb128 0x5
 2119 0866 03       		.byte	0x3
 2120 0867 00000000 		.4byte	alarmAppLED
 2121 086b 1D       		.uleb128 0x1d
 2122 086c 5D020000 		.4byte	.LASF116
 2123 0870 09       		.byte	0x9
 2124 0871 78       		.byte	0x78
 2125 0872 DB000000 		.4byte	0xdb
 2126 0876 05       		.uleb128 0x5
 2127 0877 03       		.byte	0x3
 2128 0878 00000000 		.4byte	timeToAppLED
 2129 087c 1D       		.uleb128 0x1d
 2130 087d 03050000 		.4byte	.LASF117
 2131 0881 09       		.byte	0x9
 2132 0882 7A       		.byte	0x7a
 2133 0883 54030000 		.4byte	0x354
 2134 0887 05       		.uleb128 0x5
 2135 0888 03       		.byte	0x3
 2136 0889 00000000 		.4byte	alarmLevelSensor
 2137 088d 1D       		.uleb128 0x1d
 2138 088e 77010000 		.4byte	.LASF118
 2139 0892 09       		.byte	0x9
 2140 0893 7B       		.byte	0x7b
 2141 0894 DB000000 		.4byte	0xdb
 2142 0898 05       		.uleb128 0x5
 2143 0899 03       		.byte	0x3
 2144 089a 00000000 		.4byte	timetoLevelSensor
 2145 089e 00       		.byte	0
 2146              		.section	.debug_abbrev,"",%progbits
 2147              	.Ldebug_abbrev0:
 2148 0000 01       		.uleb128 0x1
 2149 0001 11       		.uleb128 0x11
 2150 0002 01       		.byte	0x1
 2151 0003 25       		.uleb128 0x25
 2152 0004 0E       		.uleb128 0xe
 2153 0005 13       		.uleb128 0x13
 2154 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 44


 2155 0007 03       		.uleb128 0x3
 2156 0008 0E       		.uleb128 0xe
 2157 0009 1B       		.uleb128 0x1b
 2158 000a 0E       		.uleb128 0xe
 2159 000b 55       		.uleb128 0x55
 2160 000c 17       		.uleb128 0x17
 2161 000d 11       		.uleb128 0x11
 2162 000e 01       		.uleb128 0x1
 2163 000f 10       		.uleb128 0x10
 2164 0010 17       		.uleb128 0x17
 2165 0011 00       		.byte	0
 2166 0012 00       		.byte	0
 2167 0013 02       		.uleb128 0x2
 2168 0014 24       		.uleb128 0x24
 2169 0015 00       		.byte	0
 2170 0016 0B       		.uleb128 0xb
 2171 0017 0B       		.uleb128 0xb
 2172 0018 3E       		.uleb128 0x3e
 2173 0019 0B       		.uleb128 0xb
 2174 001a 03       		.uleb128 0x3
 2175 001b 0E       		.uleb128 0xe
 2176 001c 00       		.byte	0
 2177 001d 00       		.byte	0
 2178 001e 03       		.uleb128 0x3
 2179 001f 16       		.uleb128 0x16
 2180 0020 00       		.byte	0
 2181 0021 03       		.uleb128 0x3
 2182 0022 0E       		.uleb128 0xe
 2183 0023 3A       		.uleb128 0x3a
 2184 0024 0B       		.uleb128 0xb
 2185 0025 3B       		.uleb128 0x3b
 2186 0026 0B       		.uleb128 0xb
 2187 0027 49       		.uleb128 0x49
 2188 0028 13       		.uleb128 0x13
 2189 0029 00       		.byte	0
 2190 002a 00       		.byte	0
 2191 002b 04       		.uleb128 0x4
 2192 002c 24       		.uleb128 0x24
 2193 002d 00       		.byte	0
 2194 002e 0B       		.uleb128 0xb
 2195 002f 0B       		.uleb128 0xb
 2196 0030 3E       		.uleb128 0x3e
 2197 0031 0B       		.uleb128 0xb
 2198 0032 03       		.uleb128 0x3
 2199 0033 08       		.uleb128 0x8
 2200 0034 00       		.byte	0
 2201 0035 00       		.byte	0
 2202 0036 05       		.uleb128 0x5
 2203 0037 0F       		.uleb128 0xf
 2204 0038 00       		.byte	0
 2205 0039 0B       		.uleb128 0xb
 2206 003a 0B       		.uleb128 0xb
 2207 003b 49       		.uleb128 0x49
 2208 003c 13       		.uleb128 0x13
 2209 003d 00       		.byte	0
 2210 003e 00       		.byte	0
 2211 003f 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 45


 2212 0040 26       		.uleb128 0x26
 2213 0041 00       		.byte	0
 2214 0042 49       		.uleb128 0x49
 2215 0043 13       		.uleb128 0x13
 2216 0044 00       		.byte	0
 2217 0045 00       		.byte	0
 2218 0046 07       		.uleb128 0x7
 2219 0047 01       		.uleb128 0x1
 2220 0048 01       		.byte	0x1
 2221 0049 49       		.uleb128 0x49
 2222 004a 13       		.uleb128 0x13
 2223 004b 01       		.uleb128 0x1
 2224 004c 13       		.uleb128 0x13
 2225 004d 00       		.byte	0
 2226 004e 00       		.byte	0
 2227 004f 08       		.uleb128 0x8
 2228 0050 21       		.uleb128 0x21
 2229 0051 00       		.byte	0
 2230 0052 49       		.uleb128 0x49
 2231 0053 13       		.uleb128 0x13
 2232 0054 2F       		.uleb128 0x2f
 2233 0055 0B       		.uleb128 0xb
 2234 0056 00       		.byte	0
 2235 0057 00       		.byte	0
 2236 0058 09       		.uleb128 0x9
 2237 0059 16       		.uleb128 0x16
 2238 005a 00       		.byte	0
 2239 005b 03       		.uleb128 0x3
 2240 005c 0E       		.uleb128 0xe
 2241 005d 3A       		.uleb128 0x3a
 2242 005e 0B       		.uleb128 0xb
 2243 005f 3B       		.uleb128 0x3b
 2244 0060 05       		.uleb128 0x5
 2245 0061 49       		.uleb128 0x49
 2246 0062 13       		.uleb128 0x13
 2247 0063 00       		.byte	0
 2248 0064 00       		.byte	0
 2249 0065 0A       		.uleb128 0xa
 2250 0066 13       		.uleb128 0x13
 2251 0067 01       		.byte	0x1
 2252 0068 0B       		.uleb128 0xb
 2253 0069 05       		.uleb128 0x5
 2254 006a 3A       		.uleb128 0x3a
 2255 006b 0B       		.uleb128 0xb
 2256 006c 3B       		.uleb128 0x3b
 2257 006d 0B       		.uleb128 0xb
 2258 006e 01       		.uleb128 0x1
 2259 006f 13       		.uleb128 0x13
 2260 0070 00       		.byte	0
 2261 0071 00       		.byte	0
 2262 0072 0B       		.uleb128 0xb
 2263 0073 0D       		.uleb128 0xd
 2264 0074 00       		.byte	0
 2265 0075 03       		.uleb128 0x3
 2266 0076 0E       		.uleb128 0xe
 2267 0077 3A       		.uleb128 0x3a
 2268 0078 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 46


 2269 0079 3B       		.uleb128 0x3b
 2270 007a 0B       		.uleb128 0xb
 2271 007b 49       		.uleb128 0x49
 2272 007c 13       		.uleb128 0x13
 2273 007d 38       		.uleb128 0x38
 2274 007e 0B       		.uleb128 0xb
 2275 007f 00       		.byte	0
 2276 0080 00       		.byte	0
 2277 0081 0C       		.uleb128 0xc
 2278 0082 13       		.uleb128 0x13
 2279 0083 01       		.byte	0x1
 2280 0084 0B       		.uleb128 0xb
 2281 0085 0B       		.uleb128 0xb
 2282 0086 3A       		.uleb128 0x3a
 2283 0087 0B       		.uleb128 0xb
 2284 0088 3B       		.uleb128 0x3b
 2285 0089 0B       		.uleb128 0xb
 2286 008a 01       		.uleb128 0x1
 2287 008b 13       		.uleb128 0x13
 2288 008c 00       		.byte	0
 2289 008d 00       		.byte	0
 2290 008e 0D       		.uleb128 0xd
 2291 008f 0D       		.uleb128 0xd
 2292 0090 00       		.byte	0
 2293 0091 03       		.uleb128 0x3
 2294 0092 08       		.uleb128 0x8
 2295 0093 3A       		.uleb128 0x3a
 2296 0094 0B       		.uleb128 0xb
 2297 0095 3B       		.uleb128 0x3b
 2298 0096 0B       		.uleb128 0xb
 2299 0097 49       		.uleb128 0x49
 2300 0098 13       		.uleb128 0x13
 2301 0099 38       		.uleb128 0x38
 2302 009a 0B       		.uleb128 0xb
 2303 009b 00       		.byte	0
 2304 009c 00       		.byte	0
 2305 009d 0E       		.uleb128 0xe
 2306 009e 35       		.uleb128 0x35
 2307 009f 00       		.byte	0
 2308 00a0 49       		.uleb128 0x49
 2309 00a1 13       		.uleb128 0x13
 2310 00a2 00       		.byte	0
 2311 00a3 00       		.byte	0
 2312 00a4 0F       		.uleb128 0xf
 2313 00a5 2E       		.uleb128 0x2e
 2314 00a6 00       		.byte	0
 2315 00a7 3F       		.uleb128 0x3f
 2316 00a8 19       		.uleb128 0x19
 2317 00a9 03       		.uleb128 0x3
 2318 00aa 0E       		.uleb128 0xe
 2319 00ab 3A       		.uleb128 0x3a
 2320 00ac 0B       		.uleb128 0xb
 2321 00ad 3B       		.uleb128 0x3b
 2322 00ae 0B       		.uleb128 0xb
 2323 00af 27       		.uleb128 0x27
 2324 00b0 19       		.uleb128 0x19
 2325 00b1 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 47


 2326 00b2 13       		.uleb128 0x13
 2327 00b3 11       		.uleb128 0x11
 2328 00b4 01       		.uleb128 0x1
 2329 00b5 12       		.uleb128 0x12
 2330 00b6 06       		.uleb128 0x6
 2331 00b7 40       		.uleb128 0x40
 2332 00b8 18       		.uleb128 0x18
 2333 00b9 9742     		.uleb128 0x2117
 2334 00bb 19       		.uleb128 0x19
 2335 00bc 00       		.byte	0
 2336 00bd 00       		.byte	0
 2337 00be 10       		.uleb128 0x10
 2338 00bf 2E       		.uleb128 0x2e
 2339 00c0 00       		.byte	0
 2340 00c1 3F       		.uleb128 0x3f
 2341 00c2 19       		.uleb128 0x19
 2342 00c3 03       		.uleb128 0x3
 2343 00c4 0E       		.uleb128 0xe
 2344 00c5 3A       		.uleb128 0x3a
 2345 00c6 0B       		.uleb128 0xb
 2346 00c7 3B       		.uleb128 0x3b
 2347 00c8 0B       		.uleb128 0xb
 2348 00c9 27       		.uleb128 0x27
 2349 00ca 19       		.uleb128 0x19
 2350 00cb 11       		.uleb128 0x11
 2351 00cc 01       		.uleb128 0x1
 2352 00cd 12       		.uleb128 0x12
 2353 00ce 06       		.uleb128 0x6
 2354 00cf 40       		.uleb128 0x40
 2355 00d0 18       		.uleb128 0x18
 2356 00d1 9642     		.uleb128 0x2116
 2357 00d3 19       		.uleb128 0x19
 2358 00d4 00       		.byte	0
 2359 00d5 00       		.byte	0
 2360 00d6 11       		.uleb128 0x11
 2361 00d7 2E       		.uleb128 0x2e
 2362 00d8 01       		.byte	0x1
 2363 00d9 3F       		.uleb128 0x3f
 2364 00da 19       		.uleb128 0x19
 2365 00db 03       		.uleb128 0x3
 2366 00dc 0E       		.uleb128 0xe
 2367 00dd 3A       		.uleb128 0x3a
 2368 00de 0B       		.uleb128 0xb
 2369 00df 3B       		.uleb128 0x3b
 2370 00e0 0B       		.uleb128 0xb
 2371 00e1 27       		.uleb128 0x27
 2372 00e2 19       		.uleb128 0x19
 2373 00e3 11       		.uleb128 0x11
 2374 00e4 01       		.uleb128 0x1
 2375 00e5 12       		.uleb128 0x12
 2376 00e6 06       		.uleb128 0x6
 2377 00e7 40       		.uleb128 0x40
 2378 00e8 18       		.uleb128 0x18
 2379 00e9 9642     		.uleb128 0x2116
 2380 00eb 19       		.uleb128 0x19
 2381 00ec 01       		.uleb128 0x1
 2382 00ed 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 48


 2383 00ee 00       		.byte	0
 2384 00ef 00       		.byte	0
 2385 00f0 12       		.uleb128 0x12
 2386 00f1 34       		.uleb128 0x34
 2387 00f2 00       		.byte	0
 2388 00f3 03       		.uleb128 0x3
 2389 00f4 0E       		.uleb128 0xe
 2390 00f5 3A       		.uleb128 0x3a
 2391 00f6 0B       		.uleb128 0xb
 2392 00f7 3B       		.uleb128 0x3b
 2393 00f8 0B       		.uleb128 0xb
 2394 00f9 49       		.uleb128 0x49
 2395 00fa 13       		.uleb128 0x13
 2396 00fb 02       		.uleb128 0x2
 2397 00fc 18       		.uleb128 0x18
 2398 00fd 00       		.byte	0
 2399 00fe 00       		.byte	0
 2400 00ff 13       		.uleb128 0x13
 2401 0100 05       		.uleb128 0x5
 2402 0101 00       		.byte	0
 2403 0102 03       		.uleb128 0x3
 2404 0103 0E       		.uleb128 0xe
 2405 0104 3A       		.uleb128 0x3a
 2406 0105 0B       		.uleb128 0xb
 2407 0106 3B       		.uleb128 0x3b
 2408 0107 0B       		.uleb128 0xb
 2409 0108 49       		.uleb128 0x49
 2410 0109 13       		.uleb128 0x13
 2411 010a 02       		.uleb128 0x2
 2412 010b 18       		.uleb128 0x18
 2413 010c 00       		.byte	0
 2414 010d 00       		.byte	0
 2415 010e 14       		.uleb128 0x14
 2416 010f 2E       		.uleb128 0x2e
 2417 0110 01       		.byte	0x1
 2418 0111 3F       		.uleb128 0x3f
 2419 0112 19       		.uleb128 0x19
 2420 0113 03       		.uleb128 0x3
 2421 0114 0E       		.uleb128 0xe
 2422 0115 3A       		.uleb128 0x3a
 2423 0116 0B       		.uleb128 0xb
 2424 0117 3B       		.uleb128 0x3b
 2425 0118 0B       		.uleb128 0xb
 2426 0119 49       		.uleb128 0x49
 2427 011a 13       		.uleb128 0x13
 2428 011b 11       		.uleb128 0x11
 2429 011c 01       		.uleb128 0x1
 2430 011d 12       		.uleb128 0x12
 2431 011e 06       		.uleb128 0x6
 2432 011f 40       		.uleb128 0x40
 2433 0120 18       		.uleb128 0x18
 2434 0121 9642     		.uleb128 0x2116
 2435 0123 19       		.uleb128 0x19
 2436 0124 01       		.uleb128 0x1
 2437 0125 13       		.uleb128 0x13
 2438 0126 00       		.byte	0
 2439 0127 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 49


 2440 0128 15       		.uleb128 0x15
 2441 0129 0B       		.uleb128 0xb
 2442 012a 01       		.byte	0x1
 2443 012b 11       		.uleb128 0x11
 2444 012c 01       		.uleb128 0x1
 2445 012d 12       		.uleb128 0x12
 2446 012e 06       		.uleb128 0x6
 2447 012f 00       		.byte	0
 2448 0130 00       		.byte	0
 2449 0131 16       		.uleb128 0x16
 2450 0132 0B       		.uleb128 0xb
 2451 0133 01       		.byte	0x1
 2452 0134 55       		.uleb128 0x55
 2453 0135 17       		.uleb128 0x17
 2454 0136 00       		.byte	0
 2455 0137 00       		.byte	0
 2456 0138 17       		.uleb128 0x17
 2457 0139 2E       		.uleb128 0x2e
 2458 013a 01       		.byte	0x1
 2459 013b 3F       		.uleb128 0x3f
 2460 013c 19       		.uleb128 0x19
 2461 013d 03       		.uleb128 0x3
 2462 013e 0E       		.uleb128 0xe
 2463 013f 3A       		.uleb128 0x3a
 2464 0140 0B       		.uleb128 0xb
 2465 0141 3B       		.uleb128 0x3b
 2466 0142 0B       		.uleb128 0xb
 2467 0143 27       		.uleb128 0x27
 2468 0144 19       		.uleb128 0x19
 2469 0145 49       		.uleb128 0x49
 2470 0146 13       		.uleb128 0x13
 2471 0147 11       		.uleb128 0x11
 2472 0148 01       		.uleb128 0x1
 2473 0149 12       		.uleb128 0x12
 2474 014a 06       		.uleb128 0x6
 2475 014b 40       		.uleb128 0x40
 2476 014c 18       		.uleb128 0x18
 2477 014d 9642     		.uleb128 0x2116
 2478 014f 19       		.uleb128 0x19
 2479 0150 01       		.uleb128 0x1
 2480 0151 13       		.uleb128 0x13
 2481 0152 00       		.byte	0
 2482 0153 00       		.byte	0
 2483 0154 18       		.uleb128 0x18
 2484 0155 05       		.uleb128 0x5
 2485 0156 00       		.byte	0
 2486 0157 03       		.uleb128 0x3
 2487 0158 08       		.uleb128 0x8
 2488 0159 3A       		.uleb128 0x3a
 2489 015a 0B       		.uleb128 0xb
 2490 015b 3B       		.uleb128 0x3b
 2491 015c 0B       		.uleb128 0xb
 2492 015d 49       		.uleb128 0x49
 2493 015e 13       		.uleb128 0x13
 2494 015f 02       		.uleb128 0x2
 2495 0160 18       		.uleb128 0x18
 2496 0161 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 50


 2497 0162 00       		.byte	0
 2498 0163 19       		.uleb128 0x19
 2499 0164 34       		.uleb128 0x34
 2500 0165 00       		.byte	0
 2501 0166 03       		.uleb128 0x3
 2502 0167 08       		.uleb128 0x8
 2503 0168 3A       		.uleb128 0x3a
 2504 0169 0B       		.uleb128 0xb
 2505 016a 3B       		.uleb128 0x3b
 2506 016b 0B       		.uleb128 0xb
 2507 016c 49       		.uleb128 0x49
 2508 016d 13       		.uleb128 0x13
 2509 016e 02       		.uleb128 0x2
 2510 016f 18       		.uleb128 0x18
 2511 0170 00       		.byte	0
 2512 0171 00       		.byte	0
 2513 0172 1A       		.uleb128 0x1a
 2514 0173 2E       		.uleb128 0x2e
 2515 0174 01       		.byte	0x1
 2516 0175 3F       		.uleb128 0x3f
 2517 0176 19       		.uleb128 0x19
 2518 0177 03       		.uleb128 0x3
 2519 0178 0E       		.uleb128 0xe
 2520 0179 3A       		.uleb128 0x3a
 2521 017a 0B       		.uleb128 0xb
 2522 017b 3B       		.uleb128 0x3b
 2523 017c 0B       		.uleb128 0xb
 2524 017d 27       		.uleb128 0x27
 2525 017e 19       		.uleb128 0x19
 2526 017f 11       		.uleb128 0x11
 2527 0180 01       		.uleb128 0x1
 2528 0181 12       		.uleb128 0x12
 2529 0182 06       		.uleb128 0x6
 2530 0183 40       		.uleb128 0x40
 2531 0184 18       		.uleb128 0x18
 2532 0185 9742     		.uleb128 0x2117
 2533 0187 19       		.uleb128 0x19
 2534 0188 01       		.uleb128 0x1
 2535 0189 13       		.uleb128 0x13
 2536 018a 00       		.byte	0
 2537 018b 00       		.byte	0
 2538 018c 1B       		.uleb128 0x1b
 2539 018d 21       		.uleb128 0x21
 2540 018e 00       		.byte	0
 2541 018f 49       		.uleb128 0x49
 2542 0190 13       		.uleb128 0x13
 2543 0191 2F       		.uleb128 0x2f
 2544 0192 05       		.uleb128 0x5
 2545 0193 00       		.byte	0
 2546 0194 00       		.byte	0
 2547 0195 1C       		.uleb128 0x1c
 2548 0196 34       		.uleb128 0x34
 2549 0197 00       		.byte	0
 2550 0198 03       		.uleb128 0x3
 2551 0199 0E       		.uleb128 0xe
 2552 019a 3A       		.uleb128 0x3a
 2553 019b 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 51


 2554 019c 3B       		.uleb128 0x3b
 2555 019d 05       		.uleb128 0x5
 2556 019e 49       		.uleb128 0x49
 2557 019f 13       		.uleb128 0x13
 2558 01a0 3F       		.uleb128 0x3f
 2559 01a1 19       		.uleb128 0x19
 2560 01a2 3C       		.uleb128 0x3c
 2561 01a3 19       		.uleb128 0x19
 2562 01a4 00       		.byte	0
 2563 01a5 00       		.byte	0
 2564 01a6 1D       		.uleb128 0x1d
 2565 01a7 34       		.uleb128 0x34
 2566 01a8 00       		.byte	0
 2567 01a9 03       		.uleb128 0x3
 2568 01aa 0E       		.uleb128 0xe
 2569 01ab 3A       		.uleb128 0x3a
 2570 01ac 0B       		.uleb128 0xb
 2571 01ad 3B       		.uleb128 0x3b
 2572 01ae 0B       		.uleb128 0xb
 2573 01af 49       		.uleb128 0x49
 2574 01b0 13       		.uleb128 0x13
 2575 01b1 3F       		.uleb128 0x3f
 2576 01b2 19       		.uleb128 0x19
 2577 01b3 02       		.uleb128 0x2
 2578 01b4 18       		.uleb128 0x18
 2579 01b5 00       		.byte	0
 2580 01b6 00       		.byte	0
 2581 01b7 1E       		.uleb128 0x1e
 2582 01b8 34       		.uleb128 0x34
 2583 01b9 00       		.byte	0
 2584 01ba 03       		.uleb128 0x3
 2585 01bb 08       		.uleb128 0x8
 2586 01bc 3A       		.uleb128 0x3a
 2587 01bd 0B       		.uleb128 0xb
 2588 01be 3B       		.uleb128 0x3b
 2589 01bf 0B       		.uleb128 0xb
 2590 01c0 49       		.uleb128 0x49
 2591 01c1 13       		.uleb128 0x13
 2592 01c2 3F       		.uleb128 0x3f
 2593 01c3 19       		.uleb128 0x19
 2594 01c4 02       		.uleb128 0x2
 2595 01c5 18       		.uleb128 0x18
 2596 01c6 00       		.byte	0
 2597 01c7 00       		.byte	0
 2598 01c8 00       		.byte	0
 2599              		.section	.debug_aranges,"",%progbits
 2600 0000 6C000000 		.4byte	0x6c
 2601 0004 0200     		.2byte	0x2
 2602 0006 00000000 		.4byte	.Ldebug_info0
 2603 000a 04       		.byte	0x4
 2604 000b 00       		.byte	0
 2605 000c 0000     		.2byte	0
 2606 000e 0000     		.2byte	0
 2607 0010 00000000 		.4byte	.LFB64
 2608 0014 14000000 		.4byte	.LFE64-.LFB64
 2609 0018 00000000 		.4byte	.LFB65
 2610 001c 14000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 52


 2611 0020 00000000 		.4byte	.LFB66
 2612 0024 28000000 		.4byte	.LFE66-.LFB66
 2613 0028 00000000 		.4byte	.LFB67
 2614 002c 70000000 		.4byte	.LFE67-.LFB67
 2615 0030 00000000 		.4byte	.LFB68
 2616 0034 1C000000 		.4byte	.LFE68-.LFB68
 2617 0038 00000000 		.4byte	.LFB69
 2618 003c 00010000 		.4byte	.LFE69-.LFB69
 2619 0040 00000000 		.4byte	.LFB70
 2620 0044 1C010000 		.4byte	.LFE70-.LFB70
 2621 0048 00000000 		.4byte	.LFB71
 2622 004c CC000000 		.4byte	.LFE71-.LFB71
 2623 0050 00000000 		.4byte	.LFB72
 2624 0054 8E000000 		.4byte	.LFE72-.LFB72
 2625 0058 00000000 		.4byte	.LFB73
 2626 005c 98000000 		.4byte	.LFE73-.LFB73
 2627 0060 00000000 		.4byte	.LFB74
 2628 0064 2A000000 		.4byte	.LFE74-.LFB74
 2629 0068 00000000 		.4byte	0
 2630 006c 00000000 		.4byte	0
 2631              		.section	.debug_ranges,"",%progbits
 2632              	.Ldebug_ranges0:
 2633 0000 70000000 		.4byte	.LBB3
 2634 0004 C0000000 		.4byte	.LBE3
 2635 0008 D2000000 		.4byte	.LBB4
 2636 000c D4000000 		.4byte	.LBE4
 2637 0010 00000000 		.4byte	0
 2638 0014 00000000 		.4byte	0
 2639 0018 00000000 		.4byte	.LFB64
 2640 001c 14000000 		.4byte	.LFE64
 2641 0020 00000000 		.4byte	.LFB65
 2642 0024 14000000 		.4byte	.LFE65
 2643 0028 00000000 		.4byte	.LFB66
 2644 002c 28000000 		.4byte	.LFE66
 2645 0030 00000000 		.4byte	.LFB67
 2646 0034 70000000 		.4byte	.LFE67
 2647 0038 00000000 		.4byte	.LFB68
 2648 003c 1C000000 		.4byte	.LFE68
 2649 0040 00000000 		.4byte	.LFB69
 2650 0044 00010000 		.4byte	.LFE69
 2651 0048 00000000 		.4byte	.LFB70
 2652 004c 1C010000 		.4byte	.LFE70
 2653 0050 00000000 		.4byte	.LFB71
 2654 0054 CC000000 		.4byte	.LFE71
 2655 0058 00000000 		.4byte	.LFB72
 2656 005c 8E000000 		.4byte	.LFE72
 2657 0060 00000000 		.4byte	.LFB73
 2658 0064 98000000 		.4byte	.LFE73
 2659 0068 00000000 		.4byte	.LFB74
 2660 006c 2A000000 		.4byte	.LFE74
 2661 0070 00000000 		.4byte	0
 2662 0074 00000000 		.4byte	0
 2663              		.section	.debug_line,"",%progbits
 2664              	.Ldebug_line0:
 2665 0000 ED020000 		.section	.debug_str,"MS",%progbits,1
 2665      0200A301 
 2665      00000201 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 53


 2665      FB0E0D00 
 2665      01010101 
 2666              	.LASF19:
 2667 0000 75696E74 		.ascii	"uint16\000"
 2667      313600
 2668              	.LASF29:
 2669 0007 6E756D5F 		.ascii	"num_invalid_readings\000"
 2669      696E7661 
 2669      6C69645F 
 2669      72656164 
 2669      696E6773 
 2670              	.LASF121:
 2671 001c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2671      73657273 
 2671      5C64616E 
 2671      747A5C44 
 2671      6F63756D 
 2672 0049 72694F53 		.ascii	"riOS.cydsn\000"
 2672      2E637964 
 2672      736E00
 2673              	.LASF95:
 2674 0054 62756666 		.ascii	"buffer_overflow\000"
 2674      65725F6F 
 2674      76657266 
 2674      6C6F7700 
 2675              	.LASF4:
 2676 0064 5F5F7569 		.ascii	"__uint8_t\000"
 2676      6E74385F 
 2676      7400
 2677              	.LASF58:
 2678 006e 636F756E 		.ascii	"countDownResetCondition\000"
 2678      74446F77 
 2678      6E526573 
 2678      6574436F 
 2678      6E646974 
 2679              	.LASF119:
 2680 0086 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2680      43313120 
 2680      352E342E 
 2680      31203230 
 2680      31363036 
 2681 00b9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2681      20726576 
 2681      6973696F 
 2681      6E203233 
 2681      37373135 
 2682 00ec 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2682      66756E63 
 2682      74696F6E 
 2682      2D736563 
 2682      74696F6E 
 2683              	.LASF87:
 2684 0114 75617274 		.ascii	"uart_chars\000"
 2684      5F636861 
 2684      727300
 2685              	.LASF9:
 2686 011f 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 54


 2686      206C6F6E 
 2686      6720756E 
 2686      7369676E 
 2686      65642069 
 2687              	.LASF99:
 2688 0136 6D6F6465 		.ascii	"modem_state\000"
 2688      6D5F7374 
 2688      61746500 
 2689              	.LASF80:
 2690 0142 74657374 		.ascii	"test\000"
 2690      00
 2691              	.LASF110:
 2692 0147 616C6172 		.ascii	"alarmMeasure\000"
 2692      6D4D6561 
 2692      73757265 
 2692      00
 2693              	.LASF92:
 2694 0154 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2694      52784275 
 2694      66666572 
 2694      00
 2695              	.LASF120:
 2696 0161 6C657665 		.ascii	"level_sensor.c\000"
 2696      6C5F7365 
 2696      6E736F72 
 2696      2E6300
 2697              	.LASF84:
 2698 0170 6D656469 		.ascii	"median\000"
 2698      616E00
 2699              	.LASF118:
 2700 0177 74696D65 		.ascii	"timetoLevelSensor\000"
 2700      746F4C65 
 2700      76656C53 
 2700      656E736F 
 2700      7200
 2701              	.LASF101:
 2702 0189 6D6F6465 		.ascii	"modem_stats\000"
 2702      6D5F7374 
 2702      61747300 
 2703              	.LASF8:
 2704 0195 6C6F6E67 		.ascii	"long long int\000"
 2704      206C6F6E 
 2704      6720696E 
 2704      7400
 2705              	.LASF0:
 2706 01a3 7369676E 		.ascii	"signed char\000"
 2706      65642063 
 2706      68617200 
 2707              	.LASF40:
 2708 01af 65636E6F 		.ascii	"ecno\000"
 2708      00
 2709              	.LASF55:
 2710 01b4 636F756E 		.ascii	"countDownValue\000"
 2710      74446F77 
 2710      6E56616C 
 2710      756500
 2711              	.LASF111:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 55


 2712 01c3 74696D65 		.ascii	"timeToMeasure\000"
 2712      546F4D65 
 2712      61737572 
 2712      6500
 2713              	.LASF43:
 2714 01d1 74696D65 		.ascii	"time_to_network_connect\000"
 2714      5F746F5F 
 2714      6E657477 
 2714      6F726B5F 
 2714      636F6E6E 
 2715              	.LASF113:
 2716 01e9 74696D65 		.ascii	"timeToSync\000"
 2716      546F5379 
 2716      6E6300
 2717              	.LASF70:
 2718 01f4 6C657665 		.ascii	"level_sensor\000"
 2718      6C5F7365 
 2718      6E736F72 
 2718      00
 2719              	.LASF106:
 2720 0201 68747470 		.ascii	"http_body\000"
 2720      5F626F64 
 2720      7900
 2721              	.LASF37:
 2722 020b 6D6F6465 		.ascii	"modem_info_t\000"
 2722      6D5F696E 
 2722      666F5F74 
 2722      00
 2723              	.LASF38:
 2724 0218 72786C65 		.ascii	"rxlev\000"
 2724      7600
 2725              	.LASF6:
 2726 021e 6C6F6E67 		.ascii	"long int\000"
 2726      20696E74 
 2726      00
 2727              	.LASF56:
 2728 0227 63757272 		.ascii	"currentCountDownValue\000"
 2728      656E7443 
 2728      6F756E74 
 2728      446F776E 
 2728      56616C75 
 2729              	.LASF59:
 2730 023d 616C6172 		.ascii	"alarm\000"
 2730      6D00
 2731              	.LASF18:
 2732 0243 75696E74 		.ascii	"uint8\000"
 2732      3800
 2733              	.LASF76:
 2734 0249 6C657665 		.ascii	"level_sensor_output\000"
 2734      6C5F7365 
 2734      6E736F72 
 2734      5F6F7574 
 2734      70757400 
 2735              	.LASF116:
 2736 025d 74696D65 		.ascii	"timeToAppLED\000"
 2736      546F4170 
 2736      704C4544 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 56


 2736      00
 2737              	.LASF21:
 2738 026a 696E7433 		.ascii	"int32\000"
 2738      3200
 2739              	.LASF46:
 2740 0270 6E6F6465 		.ascii	"node_type\000"
 2740      5F747970 
 2740      6500
 2741              	.LASF78:
 2742 027a 72656164 		.ascii	"reading\000"
 2742      696E6700 
 2743              	.LASF83:
 2744 0282 61727261 		.ascii	"array\000"
 2744      7900
 2745              	.LASF61:
 2746 0288 63686970 		.ascii	"chip_uniqueId\000"
 2746      5F756E69 
 2746      71756549 
 2746      6400
 2747              	.LASF35:
 2748 0296 6D6F6465 		.ascii	"model_id\000"
 2748      6C5F6964 
 2748      00
 2749              	.LASF26:
 2750 029f 616C6C5F 		.ascii	"all_level_readings\000"
 2750      6C657665 
 2750      6C5F7265 
 2750      6164696E 
 2750      677300
 2751              	.LASF89:
 2752 02b2 6C696E65 		.ascii	"line\000"
 2752      00
 2753              	.LASF85:
 2754 02b7 736F7274 		.ascii	"sort\000"
 2754      00
 2755              	.LASF50:
 2756 02bc 64656275 		.ascii	"debug_level\000"
 2756      675F6C65 
 2756      76656C00 
 2757              	.LASF31:
 2758 02c8 76616C75 		.ascii	"value\000"
 2758      6500
 2759              	.LASF112:
 2760 02ce 616C6172 		.ascii	"alarmSync\000"
 2760      6D53796E 
 2760      6300
 2761              	.LASF103:
 2762 02d8 4170705F 		.ascii	"App_LED_enabled\000"
 2762      4C45445F 
 2762      656E6162 
 2762      6C656400 
 2763              	.LASF33:
 2764 02e8 6B65795F 		.ascii	"key_value_t\000"
 2764      76616C75 
 2764      655F7400 
 2765              	.LASF28:
 2766 02f4 6E756D5F 		.ascii	"num_valid_readings\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 57


 2766      76616C69 
 2766      645F7265 
 2766      6164696E 
 2766      677300
 2767              	.LASF7:
 2768 0307 6C6F6E67 		.ascii	"long unsigned int\000"
 2768      20756E73 
 2768      69676E65 
 2768      6420696E 
 2768      7400
 2769              	.LASF66:
 2770 0319 75617274 		.ascii	"uart_string\000"
 2770      5F737472 
 2770      696E6700 
 2771              	.LASF98:
 2772 0325 64617461 		.ascii	"data\000"
 2772      00
 2773              	.LASF64:
 2774 032a 65705F70 		.ascii	"ep_port\000"
 2774      6F727400 
 2775              	.LASF60:
 2776 0332 6D6F6465 		.ascii	"modem_info\000"
 2776      6D5F696E 
 2776      666F00
 2777              	.LASF63:
 2778 033d 65705F68 		.ascii	"ep_host\000"
 2778      6F737400 
 2779              	.LASF81:
 2780 0345 73656E73 		.ascii	"sensor\000"
 2780      6F7200
 2781              	.LASF44:
 2782 034c 74696D65 		.ascii	"time_to_acquire_ip\000"
 2782      5F746F5F 
 2782      61637175 
 2782      6972655F 
 2782      697000
 2783              	.LASF2:
 2784 035f 73686F72 		.ascii	"short int\000"
 2784      7420696E 
 2784      7400
 2785              	.LASF115:
 2786 0369 616C6172 		.ascii	"alarmAppLED\000"
 2786      6D417070 
 2786      4C454400 
 2787              	.LASF100:
 2788 0375 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2788      6D5F7374 
 2788      6172745F 
 2788      74696D65 
 2788      5F737461 
 2789              	.LASF62:
 2790 038c 7379735F 		.ascii	"sys_info_t\000"
 2790      696E666F 
 2790      5F7400
 2791              	.LASF54:
 2792 0397 75706461 		.ascii	"updatable_parameters_t\000"
 2792      7461626C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 58


 2792      655F7061 
 2792      72616D65 
 2792      74657273 
 2793              	.LASF96:
 2794 03ae 64617461 		.ascii	"dataPointsInStack\000"
 2794      506F696E 
 2794      7473496E 
 2794      53746163 
 2794      6B00
 2795              	.LASF88:
 2796 03c0 6E756D5F 		.ascii	"num_chars\000"
 2796      63686172 
 2796      7300
 2797              	.LASF68:
 2798 03ca 4C657665 		.ascii	"Level_Sensor_ISR\000"
 2798      6C5F5365 
 2798      6E736F72 
 2798      5F495352 
 2798      00
 2799              	.LASF14:
 2800 03db 73697A65 		.ascii	"sizetype\000"
 2800      74797065 
 2800      00
 2801              	.LASF22:
 2802 03e4 74657374 		.ascii	"test_name\000"
 2802      5F6E616D 
 2802      6500
 2803              	.LASF114:
 2804 03ee 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2804      546F5379 
 2804      636E5265 
 2804      6D6F7465 
 2804      50617261 
 2805              	.LASF32:
 2806 0405 74696D65 		.ascii	"timeStamp\000"
 2806      5374616D 
 2806      7000
 2807              	.LASF90:
 2808 040f 6D617463 		.ascii	"match\000"
 2808      6800
 2809              	.LASF102:
 2810 0415 75706461 		.ascii	"updatable_parameters\000"
 2810      7461626C 
 2810      655F7061 
 2810      72616D65 
 2810      74657273 
 2811              	.LASF67:
 2812 042a 75617274 		.ascii	"uart_len\000"
 2812      5F6C656E 
 2812      00
 2813              	.LASF91:
 2814 0433 70617474 		.ascii	"pattern\000"
 2814      65726E00 
 2815              	.LASF86:
 2816 043b 73776170 		.ascii	"swap\000"
 2816      00
 2817              	.LASF72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 59


 2818 0440 636F6D70 		.ascii	"compare_location\000"
 2818      6172655F 
 2818      6C6F6361 
 2818      74696F6E 
 2818      00
 2819              	.LASF17:
 2820 0451 666C6F61 		.ascii	"float\000"
 2820      7400
 2821              	.LASF79:
 2822 0457 6C657665 		.ascii	"level_sensor_test\000"
 2822      6C5F7365 
 2822      6E736F72 
 2822      5F746573 
 2822      7400
 2823              	.LASF30:
 2824 0469 6C657665 		.ascii	"level_sensor_t\000"
 2824      6C5F7365 
 2824      6E736F72 
 2824      5F7400
 2825              	.LASF77:
 2826 0478 746F6B65 		.ascii	"token\000"
 2826      6E00
 2827              	.LASF53:
 2828 047e 5F426F6F 		.ascii	"_Bool\000"
 2828      6C00
 2829              	.LASF12:
 2830 0484 696E7433 		.ascii	"int32_t\000"
 2830      325F7400 
 2831              	.LASF1:
 2832 048c 756E7369 		.ascii	"unsigned char\000"
 2832      676E6564 
 2832      20636861 
 2832      7200
 2833              	.LASF109:
 2834 049a 73797374 		.ascii	"system_settings\000"
 2834      656D5F73 
 2834      65747469 
 2834      6E677300 
 2835              	.LASF25:
 2836 04aa 74657374 		.ascii	"test_t\000"
 2836      5F7400
 2837              	.LASF42:
 2838 04b1 72737270 		.ascii	"rsrp\000"
 2838      00
 2839              	.LASF41:
 2840 04b6 72737271 		.ascii	"rsrq\000"
 2840      00
 2841              	.LASF49:
 2842 04bb 73796E63 		.ascii	"sync_time\000"
 2842      5F74696D 
 2842      6500
 2843              	.LASF122:
 2844 04c5 75617274 		.ascii	"uart_clear\000"
 2844      5F636C65 
 2844      617200
 2845              	.LASF39:
 2846 04d0 72736370 		.ascii	"rscp\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 60


 2846      00
 2847              	.LASF108:
 2848 04d5 73797374 		.ascii	"system_info\000"
 2848      656D5F69 
 2848      6E666F00 
 2849              	.LASF36:
 2850 04e1 696D6569 		.ascii	"imei\000"
 2850      00
 2851              	.LASF24:
 2852 04e6 72656173 		.ascii	"reason\000"
 2852      6F6E00
 2853              	.LASF71:
 2854 04ed 72785F63 		.ascii	"rx_char\000"
 2854      68617200 
 2855              	.LASF45:
 2856 04f5 6D6F6465 		.ascii	"modem_stats_t\000"
 2856      6D5F7374 
 2856      6174735F 
 2856      7400
 2857              	.LASF117:
 2858 0503 616C6172 		.ascii	"alarmLevelSensor\000"
 2858      6D4C6576 
 2858      656C5365 
 2858      6E736F72 
 2858      00
 2859              	.LASF52:
 2860 0514 4C657665 		.ascii	"Level_Sensor_freq\000"
 2860      6C5F5365 
 2860      6E736F72 
 2860      5F667265 
 2860      7100
 2861              	.LASF93:
 2862 0526 6C657665 		.ascii	"level_sensor_inbox\000"
 2862      6C5F7365 
 2862      6E736F72 
 2862      5F696E62 
 2862      6F7800
 2863              	.LASF13:
 2864 0539 6C6F6E67 		.ascii	"long double\000"
 2864      20646F75 
 2864      626C6500 
 2865              	.LASF73:
 2866 0545 635F7469 		.ascii	"c_timeStamp\000"
 2866      6D655374 
 2866      616D7000 
 2867              	.LASF15:
 2868 0551 63686172 		.ascii	"char\000"
 2868      00
 2869              	.LASF10:
 2870 0556 756E7369 		.ascii	"unsigned int\000"
 2870      676E6564 
 2870      20696E74 
 2870      00
 2871              	.LASF107:
 2872 0563 68747470 		.ascii	"http_route\000"
 2872      5F726F75 
 2872      746500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 61


 2873              	.LASF5:
 2874 056e 5F5F696E 		.ascii	"__int32_t\000"
 2874      7433325F 
 2874      7400
 2875              	.LASF48:
 2876 0578 6D656173 		.ascii	"measure_time\000"
 2876      7572655F 
 2876      74696D65 
 2876      00
 2877              	.LASF74:
 2878 0585 6D5F6C65 		.ascii	"m_level_sensor\000"
 2878      76656C5F 
 2878      73656E73 
 2878      6F7200
 2879              	.LASF27:
 2880 0594 6C657665 		.ascii	"level_reading\000"
 2880      6C5F7265 
 2880      6164696E 
 2880      6700
 2881              	.LASF3:
 2882 05a2 73686F72 		.ascii	"short unsigned int\000"
 2882      7420756E 
 2882      7369676E 
 2882      65642069 
 2882      6E7400
 2883              	.LASF34:
 2884 05b5 73696D5F 		.ascii	"sim_id\000"
 2884      696400
 2885              	.LASF69:
 2886 05bc 4C657665 		.ascii	"Level_Sensor_Update\000"
 2886      6C5F5365 
 2886      6E736F72 
 2886      5F557064 
 2886      61746500 
 2887              	.LASF123:
 2888 05d0 66696E64 		.ascii	"find_median\000"
 2888      5F6D6564 
 2888      69616E00 
 2889              	.LASF23:
 2890 05dc 73746174 		.ascii	"status\000"
 2890      757300
 2891              	.LASF94:
 2892 05e3 6C657665 		.ascii	"level_sensor_enabled\000"
 2892      6C5F7365 
 2892      6E736F72 
 2892      5F656E61 
 2892      626C6564 
 2893              	.LASF97:
 2894 05f8 64617461 		.ascii	"dataPointsInStackDesired\000"
 2894      506F696E 
 2894      7473496E 
 2894      53746163 
 2894      6B446573 
 2895              	.LASF51:
 2896 0611 4170705F 		.ascii	"App_LED_freq\000"
 2896      4C45445F 
 2896      66726571 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccVLnpBV.s 			page 62


 2896      00
 2897              	.LASF75:
 2898 061e 6C657665 		.ascii	"level_sensor_take_reading\000"
 2898      6C5F7365 
 2898      6E736F72 
 2898      5F74616B 
 2898      655F7265 
 2899              	.LASF65:
 2900 0638 7379735F 		.ascii	"sys_settings_t\000"
 2900      73657474 
 2900      696E6773 
 2900      5F7400
 2901              	.LASF11:
 2902 0647 75696E74 		.ascii	"uint8_t\000"
 2902      385F7400 
 2903              	.LASF20:
 2904 064f 696E7431 		.ascii	"int16\000"
 2904      3600
 2905              	.LASF57:
 2906 0655 636F756E 		.ascii	"countDownType\000"
 2906      74446F77 
 2906      6E547970 
 2906      6500
 2907              	.LASF47:
 2908 0663 73696D5F 		.ascii	"sim_type\000"
 2908      74797065 
 2908      00
 2909              	.LASF82:
 2910 066c 6D657373 		.ascii	"message\000"
 2910      61676500 
 2911              	.LASF105:
 2912 0674 68747470 		.ascii	"http_request\000"
 2912      5F726571 
 2912      75657374 
 2912      00
 2913              	.LASF16:
 2914 0681 646F7562 		.ascii	"double\000"
 2914      6C6500
 2915              	.LASF104:
 2916 0688 6170705F 		.ascii	"app_led_inbox\000"
 2916      6C65645F 
 2916      696E626F 
 2916      7800
 2917              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
