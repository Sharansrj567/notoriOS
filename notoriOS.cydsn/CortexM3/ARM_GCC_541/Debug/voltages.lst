ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"voltages.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,7,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.global	__aeabi_f2d
  50              		.global	__aeabi_dsub
  51              		.global	__aeabi_d2f
  52              		.global	__aeabi_fmul
  53              		.global	__aeabi_fsub
  54              		.section	.text.voltage_take_readings,"ax",%progbits
  55              		.align	2
  56              		.global	voltage_take_readings
  57              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 2


  58              		.thumb_func
  59              		.type	voltage_take_readings, %function
  60              	voltage_take_readings:
  61              	.LFB64:
  62              		.file 1 "voltages.c"
   1:voltages.c    **** #include "voltages.h"
   2:voltages.c    **** #include "notoriOS.h"
   3:voltages.c    **** #include <math.h>
   4:voltages.c    **** 
   5:voltages.c    **** // Function to take voltage readings and save them in the voltage_t datatype
   6:voltages.c    **** voltage_t voltage_take_readings(){
  63              		.loc 1 6 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 96
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67 0000 B0B5     		push	{r4, r5, r7, lr}
  68              		.cfi_def_cfa_offset 16
  69              		.cfi_offset 4, -16
  70              		.cfi_offset 5, -12
  71              		.cfi_offset 7, -8
  72              		.cfi_offset 14, -4
  73 0002 98B0     		sub	sp, sp, #96
  74              		.cfi_def_cfa_offset 112
  75 0004 00AF     		add	r7, sp, #0
  76              		.cfi_def_cfa_register 7
  77 0006 7860     		str	r0, [r7, #4]
   7:voltages.c    ****     
   8:voltages.c    ****     voltage_t voltage;  // Create variable voltage of data structure voltage_t.
   9:voltages.c    ****      
  10:voltages.c    **** 	Battery_Voltage_Enable_Write(ON);   // Flip on the Battery Voltage ADC pin high (turns it on).
  78              		.loc 1 10 0
  79 0008 0120     		movs	r0, #1
  80 000a FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  11:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
  81              		.loc 1 11 0
  82 000e 0120     		movs	r0, #1
  83 0010 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  12:voltages.c    ****     
  13:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
  84              		.loc 1 13 0
  85 0014 0A20     		movs	r0, #10
  86 0016 FFF7FEFF 		bl	CyDelay
  14:voltages.c    ****     
  15:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
  87              		.loc 1 15 0
  88 001a FFF7FEFF 		bl	AMux_Start
  16:voltages.c    ****  
  17:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
  89              		.loc 1 17 0
  90 001e FFF7FEFF 		bl	ADC_RestoreConfig
  18:voltages.c    ****     
  19:voltages.c    ****     ADC_Start();        // Start the ADC
  91              		.loc 1 19 0
  92 0022 FFF7FEFF 		bl	ADC_Start
  93              	.LBB2:
  20:voltages.c    ****     
  21:voltages.c    ****     float channels[AMux_CHANNELS];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 3


  22:voltages.c    ****     
  23:voltages.c    ****     for(uint8 c = 0; c< AMux_CHANNELS + 1; c++) // Sweep the MUX Channels
  94              		.loc 1 23 0
  95 0026 0023     		movs	r3, #0
  96 0028 87F85F30 		strb	r3, [r7, #95]
  97 002c 34E0     		b	.L2
  98              	.L5:
  99              	.LBB3:
  24:voltages.c    ****     {
  25:voltages.c    ****         
  26:voltages.c    ****         int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 
  27:voltages.c    ****         
  28:voltages.c    ****         AMux_Select(c); // This functions first disconnects all channels then connects the given ch
 100              		.loc 1 28 0
 101 002e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 102 0032 1846     		mov	r0, r3
 103 0034 FFF7FEFF 		bl	AMux_Select
 104              	.LBB4:
  29:voltages.c    ****         
  30:voltages.c    ****         for(uint16 i=0; i< N_SAMPLES; i++){
 105              		.loc 1 30 0
 106 0038 0023     		movs	r3, #0
 107 003a A7F85C30 		strh	r3, [r7, #92]	@ movhi
 108 003e 0FE0     		b	.L3
 109              	.L4:
  31:voltages.c    ****             
  32:voltages.c    ****             readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the
 110              		.loc 1 32 0 discriminator 3
 111 0040 B7F85C40 		ldrh	r4, [r7, #92]
 112 0044 FFF7FEFF 		bl	ADC_Read32
 113 0048 0246     		mov	r2, r0
 114 004a A300     		lsls	r3, r4, #2
 115 004c 07F16001 		add	r1, r7, #96
 116 0050 0B44     		add	r3, r3, r1
 117 0052 43F8582C 		str	r2, [r3, #-88]
  30:voltages.c    ****             
 118              		.loc 1 30 0 discriminator 3
 119 0056 B7F85C30 		ldrh	r3, [r7, #92]
 120 005a 0133     		adds	r3, r3, #1
 121 005c A7F85C30 		strh	r3, [r7, #92]	@ movhi
 122              	.L3:
  30:voltages.c    ****             
 123              		.loc 1 30 0 is_stmt 0 discriminator 1
 124 0060 B7F85C30 		ldrh	r3, [r7, #92]
 125 0064 0A2B     		cmp	r3, #10
 126 0066 EBD9     		bls	.L4
 127              	.LBE4:
  33:voltages.c    ****         }
  34:voltages.c    ****         
  35:voltages.c    ****         // Converts the ADC output to Volts as a floating point number. 
  36:voltages.c    ****         // Get the median of readings and return that.
  37:voltages.c    ****         channels[c] = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get median of re
 128              		.loc 1 37 0 is_stmt 1 discriminator 2
 129 0068 97F85F40 		ldrb	r4, [r7, #95]	@ zero_extendqisi2
 130 006c 07F10803 		add	r3, r7, #8
 131 0070 0B21     		movs	r1, #11
 132 0072 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 4


 133 0074 FFF7FEFF 		bl	find_median32
 134 0078 0346     		mov	r3, r0
 135 007a 1846     		mov	r0, r3
 136 007c FFF7FEFF 		bl	ADC_CountsTo_Volts
 137 0080 0246     		mov	r2, r0
 138 0082 A300     		lsls	r3, r4, #2
 139 0084 07F16001 		add	r1, r7, #96
 140 0088 0B44     		add	r3, r3, r1
 141 008a 43F82C2C 		str	r2, [r3, #-44]	@ float
 142              	.LBE3:
  23:voltages.c    ****     {
 143              		.loc 1 23 0 discriminator 2
 144 008e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 145 0092 0133     		adds	r3, r3, #1
 146 0094 87F85F30 		strb	r3, [r7, #95]
 147              	.L2:
  23:voltages.c    ****     {
 148              		.loc 1 23 0 is_stmt 0 discriminator 1
 149 0098 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 150 009c 042B     		cmp	r3, #4
 151 009e C6D9     		bls	.L5
 152              	.LBE2:
  38:voltages.c    ****     }
  39:voltages.c    ****     
  40:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 153              		.loc 1 40 0 is_stmt 1
 154 00a0 FFF7FEFF 		bl	AMux_Start
  41:voltages.c    ****     
  42:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 155              		.loc 1 42 0
 156 00a4 FFF7FEFF 		bl	ADC_SaveConfig
  43:voltages.c    ****     
  44:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 157              		.loc 1 44 0
 158 00a8 FFF7FEFF 		bl	ADC_Stop
  45:voltages.c    ****     
  46:voltages.c    ****     Battery_Voltage_Enable_Write(OFF);  // Pulls Battery ADC pin low (turns it off).
 159              		.loc 1 46 0
 160 00ac 0020     		movs	r0, #0
 161 00ae FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  47:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 162              		.loc 1 47 0
 163 00b2 0020     		movs	r0, #0
 164 00b4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  48:voltages.c    ****     
  49:voltages.c    ****     float offset = channels[0] - 1.024; // Should be 1.024 exactly. BK saw an offset when measuring
 165              		.loc 1 49 0
 166 00b8 7B6B     		ldr	r3, [r7, #52]	@ float
 167 00ba 1846     		mov	r0, r3
 168 00bc FFF7FEFF 		bl	__aeabi_f2d
 169 00c0 19A3     		adr	r3, .L7
 170 00c2 D3E90023 		ldrd	r2, [r3]
 171 00c6 FFF7FEFF 		bl	__aeabi_dsub
 172 00ca 0346     		mov	r3, r0
 173 00cc 0C46     		mov	r4, r1
 174 00ce 1846     		mov	r0, r3
 175 00d0 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 5


 176 00d2 FFF7FEFF 		bl	__aeabi_d2f
 177 00d6 0346     		mov	r3, r0
 178 00d8 BB65     		str	r3, [r7, #88]	@ float
  50:voltages.c    ****     voltage.voltage_battery = (channels[ADC_MUX_VBAT] * 11) - offset; // Voltage divider is (1/10) 
 179              		.loc 1 50 0
 180 00da BB6B     		ldr	r3, [r7, #56]	@ float
 181 00dc 1449     		ldr	r1, .L7+8
 182 00de 1846     		mov	r0, r3
 183 00e0 FFF7FEFF 		bl	__aeabi_fmul
 184 00e4 0346     		mov	r3, r0
 185 00e6 B96D     		ldr	r1, [r7, #88]	@ float
 186 00e8 1846     		mov	r0, r3
 187 00ea FFF7FEFF 		bl	__aeabi_fsub
 188 00ee 0346     		mov	r3, r0
 189 00f0 7B64     		str	r3, [r7, #68]	@ float
  51:voltages.c    ****     voltage.voltage_solar = channels[ADC_MUX_VSOL] - offset; // Just want voltage here
 190              		.loc 1 51 0
 191 00f2 FB6B     		ldr	r3, [r7, #60]	@ float
 192 00f4 B96D     		ldr	r1, [r7, #88]	@ float
 193 00f6 1846     		mov	r0, r3
 194 00f8 FFF7FEFF 		bl	__aeabi_fsub
 195 00fc 0346     		mov	r3, r0
 196 00fe BB64     		str	r3, [r7, #72]	@ float
  52:voltages.c    ****     // Voltage across sensor resistor gives 100mV drop for max current, which is 800mA
  53:voltages.c    ****     //voltage.voltage_charge_current = 0.1*(channels[ADC_MUX_CHRG] - voltage.voltage_battery);
  54:voltages.c    ****     voltage.voltage_pressure = channels[ADC_MUX_PRTRANS]; // Pressure transducer reading
 197              		.loc 1 54 0
 198 0100 3B6C     		ldr	r3, [r7, #64]	@ float
 199 0102 3B65     		str	r3, [r7, #80]	@ float
  55:voltages.c    **** 
  56:voltages.c    ****     voltage.valid = 1;
 200              		.loc 1 56 0
 201 0104 0123     		movs	r3, #1
 202 0106 87F85430 		strb	r3, [r7, #84]
  57:voltages.c    ****     
  58:voltages.c    ****     return voltage;
 203              		.loc 1 58 0
 204 010a 7B68     		ldr	r3, [r7, #4]
 205 010c 1D46     		mov	r5, r3
 206 010e 07F14404 		add	r4, r7, #68
 207 0112 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 208 0114 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 209 0116 2368     		ldr	r3, [r4]
 210 0118 2B60     		str	r3, [r5]
  59:voltages.c    **** }
 211              		.loc 1 59 0
 212 011a 7868     		ldr	r0, [r7, #4]
 213 011c 6037     		adds	r7, r7, #96
 214              		.cfi_def_cfa_offset 16
 215 011e BD46     		mov	sp, r7
 216              		.cfi_def_cfa_register 13
 217              		@ sp needed
 218 0120 B0BD     		pop	{r4, r5, r7, pc}
 219              	.L8:
 220 0122 00BFAFF3 		.align	3
 220      0080
 221              	.L7:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 6


 222 0128 FCA9F1D2 		.word	-755914244
 223 012c 4D62F03F 		.word	1072718413
 224 0130 00003041 		.word	1093664768
 225              		.cfi_endproc
 226              	.LFE64:
 227              		.size	voltage_take_readings, .-voltage_take_readings
 228              		.global	__aeabi_fdiv
 229              		.global	__aeabi_ddiv
 230              		.global	__aeabi_dmul
 231              		.section	.text.pressure_sensor_readings,"ax",%progbits
 232              		.align	2
 233              		.global	pressure_sensor_readings
 234              		.thumb
 235              		.thumb_func
 236              		.type	pressure_sensor_readings, %function
 237              	pressure_sensor_readings:
 238              	.LFB65:
  60:voltages.c    **** 
  61:voltages.c    **** // Function to take Pressure sensor readings and save them in the pressure_t datatype
  62:voltages.c    **** pressure_t pressure_sensor_readings(){
 239              		.loc 1 62 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 88
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 90B5     		push	{r4, r7, lr}
 244              		.cfi_def_cfa_offset 12
 245              		.cfi_offset 4, -12
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0002 97B0     		sub	sp, sp, #92
 249              		.cfi_def_cfa_offset 104
 250 0004 00AF     		add	r7, sp, #0
 251              		.cfi_def_cfa_register 7
 252 0006 7860     		str	r0, [r7, #4]
  63:voltages.c    ****     
  64:voltages.c    ****     pressure_t pressure;  // Create variable voltage of data structure voltage_t.
  65:voltages.c    ****     float channels[AMux_CHANNELS];
  66:voltages.c    ****     int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 11
  67:voltages.c    ****     
  68:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
 253              		.loc 1 68 0
 254 0008 FFF7FEFF 		bl	AMux_Start
  69:voltages.c    ****  
  70:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
 255              		.loc 1 70 0
 256 000c FFF7FEFF 		bl	ADC_RestoreConfig
  71:voltages.c    ****     
  72:voltages.c    ****     ADC_Start();        // Start the ADC
 257              		.loc 1 72 0
 258 0010 FFF7FEFF 		bl	ADC_Start
  73:voltages.c    ****     
  74:voltages.c    ****     AMux_Select(ADC_MUX_PRTRANS); // This functions first disconnects all channels then connects th
 259              		.loc 1 74 0
 260 0014 0320     		movs	r0, #3
 261 0016 FFF7FEFF 		bl	AMux_Select
 262              	.LBB5:
  75:voltages.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 7


  76:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 263              		.loc 1 76 0
 264 001a 0023     		movs	r3, #0
 265 001c A7F85630 		strh	r3, [r7, #86]	@ movhi
 266 0020 0FE0     		b	.L10
 267              	.L11:
  77:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 268              		.loc 1 77 0 discriminator 3
 269 0022 B7F85640 		ldrh	r4, [r7, #86]
 270 0026 FFF7FEFF 		bl	ADC_Read32
 271 002a 0246     		mov	r2, r0
 272 002c A300     		lsls	r3, r4, #2
 273 002e 07F15801 		add	r1, r7, #88
 274 0032 0B44     		add	r3, r3, r1
 275 0034 43F8502C 		str	r2, [r3, #-80]
  76:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 276              		.loc 1 76 0 discriminator 3
 277 0038 B7F85630 		ldrh	r3, [r7, #86]
 278 003c 0133     		adds	r3, r3, #1
 279 003e A7F85630 		strh	r3, [r7, #86]	@ movhi
 280              	.L10:
  76:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 281              		.loc 1 76 0 is_stmt 0 discriminator 1
 282 0042 B7F85630 		ldrh	r3, [r7, #86]
 283 0046 0A2B     		cmp	r3, #10
 284 0048 EBD9     		bls	.L11
 285              	.LBE5:
  78:voltages.c    ****     }
  79:voltages.c    ****     
  80:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
  81:voltages.c    ****     // Get the median of readings and return that.
  82:voltages.c    ****     pressure.pressure_voltage_off = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Ge
 286              		.loc 1 82 0 is_stmt 1
 287 004a 07F10803 		add	r3, r7, #8
 288 004e 0B21     		movs	r1, #11
 289 0050 1846     		mov	r0, r3
 290 0052 FFF7FEFF 		bl	find_median32
 291 0056 0346     		mov	r3, r0
 292 0058 1846     		mov	r0, r3
 293 005a FFF7FEFF 		bl	ADC_CountsTo_Volts
 294 005e 0346     		mov	r3, r0
 295 0060 BB64     		str	r3, [r7, #72]	@ float
  83:voltages.c    ****     pressure.pressure_voltage_off = floorf(pressure.pressure_voltage_off * 100) / 100;
 296              		.loc 1 83 0
 297 0062 BB6C     		ldr	r3, [r7, #72]	@ float
 298 0064 4849     		ldr	r1, .L15+16
 299 0066 1846     		mov	r0, r3
 300 0068 FFF7FEFF 		bl	__aeabi_fmul
 301 006c 0346     		mov	r3, r0
 302 006e 1846     		mov	r0, r3
 303 0070 FFF7FEFF 		bl	floorf
 304 0074 0346     		mov	r3, r0
 305 0076 4449     		ldr	r1, .L15+16
 306 0078 1846     		mov	r0, r3
 307 007a FFF7FEFF 		bl	__aeabi_fdiv
 308 007e 0346     		mov	r3, r0
 309 0080 BB64     		str	r3, [r7, #72]	@ float
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 8


  84:voltages.c    ****     
  85:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
 310              		.loc 1 85 0
 311 0082 0120     		movs	r0, #1
 312 0084 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  86:voltages.c    ****     
  87:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
 313              		.loc 1 87 0
 314 0088 0A20     		movs	r0, #10
 315 008a FFF7FEFF 		bl	CyDelay
 316              	.LBB6:
  88:voltages.c    ****   
  89:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 317              		.loc 1 89 0
 318 008e 0023     		movs	r3, #0
 319 0090 A7F85430 		strh	r3, [r7, #84]	@ movhi
 320 0094 0FE0     		b	.L12
 321              	.L13:
  90:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 322              		.loc 1 90 0 discriminator 3
 323 0096 B7F85440 		ldrh	r4, [r7, #84]
 324 009a FFF7FEFF 		bl	ADC_Read32
 325 009e 0246     		mov	r2, r0
 326 00a0 A300     		lsls	r3, r4, #2
 327 00a2 07F15801 		add	r1, r7, #88
 328 00a6 0B44     		add	r3, r3, r1
 329 00a8 43F8502C 		str	r2, [r3, #-80]
  89:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 330              		.loc 1 89 0 discriminator 3
 331 00ac B7F85430 		ldrh	r3, [r7, #84]
 332 00b0 0133     		adds	r3, r3, #1
 333 00b2 A7F85430 		strh	r3, [r7, #84]	@ movhi
 334              	.L12:
  89:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 335              		.loc 1 89 0 is_stmt 0 discriminator 1
 336 00b6 B7F85430 		ldrh	r3, [r7, #84]
 337 00ba 0A2B     		cmp	r3, #10
 338 00bc EBD9     		bls	.L13
 339              	.LBE6:
  91:voltages.c    ****     }
  92:voltages.c    ****     
  93:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
  94:voltages.c    ****     // Get the median of readings and return that.
  95:voltages.c    ****     pressure.pressure_voltage_on = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get
 340              		.loc 1 95 0 is_stmt 1
 341 00be 07F10803 		add	r3, r7, #8
 342 00c2 0B21     		movs	r1, #11
 343 00c4 1846     		mov	r0, r3
 344 00c6 FFF7FEFF 		bl	find_median32
 345 00ca 0346     		mov	r3, r0
 346 00cc 1846     		mov	r0, r3
 347 00ce FFF7FEFF 		bl	ADC_CountsTo_Volts
 348 00d2 0346     		mov	r3, r0
 349 00d4 7B64     		str	r3, [r7, #68]	@ float
  96:voltages.c    ****     
  97:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 350              		.loc 1 97 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 9


 351 00d6 FFF7FEFF 		bl	AMux_Start
  98:voltages.c    ****     
  99:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 352              		.loc 1 99 0
 353 00da FFF7FEFF 		bl	ADC_SaveConfig
 100:voltages.c    ****     
 101:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 354              		.loc 1 101 0
 355 00de FFF7FEFF 		bl	ADC_Stop
 102:voltages.c    ****     
 103:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 356              		.loc 1 103 0
 357 00e2 0020     		movs	r0, #0
 358 00e4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
 104:voltages.c    ****     // Calculate the pressure transducer current output.
 105:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 106:voltages.c    ****     // Should fall between 4 and 20mA
 107:voltages.c    ****     pressure.pressure_current = (pressure.pressure_voltage_on/ 150.0)*1000; 
 359              		.loc 1 107 0
 360 00e8 7B6C     		ldr	r3, [r7, #68]	@ float
 361 00ea 1846     		mov	r0, r3
 362 00ec FFF7FEFF 		bl	__aeabi_f2d
 363 00f0 21A3     		adr	r3, .L15
 364 00f2 D3E90023 		ldrd	r2, [r3]
 365 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 366 00fa 0346     		mov	r3, r0
 367 00fc 0C46     		mov	r4, r1
 368 00fe 1846     		mov	r0, r3
 369 0100 2146     		mov	r1, r4
 370 0102 4FF00002 		mov	r2, #0
 371 0106 214B     		ldr	r3, .L15+20
 372 0108 FFF7FEFF 		bl	__aeabi_dmul
 373 010c 0346     		mov	r3, r0
 374 010e 0C46     		mov	r4, r1
 375 0110 1846     		mov	r0, r3
 376 0112 2146     		mov	r1, r4
 377 0114 FFF7FEFF 		bl	__aeabi_d2f
 378 0118 0346     		mov	r3, r0
 379 011a FB64     		str	r3, [r7, #76]	@ float
 108:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 109:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 110:voltages.c    ****     // Should fall between 0 and 10 ft
 111:voltages.c    ****     pressure.pressure_depth = ((10.0*pressure.pressure_voltage_on)/(0.016*150))-(10.0/4.0);   
 380              		.loc 1 111 0
 381 011c 7B6C     		ldr	r3, [r7, #68]	@ float
 382 011e 1846     		mov	r0, r3
 383 0120 FFF7FEFF 		bl	__aeabi_f2d
 384 0124 4FF00002 		mov	r2, #0
 385 0128 194B     		ldr	r3, .L15+24
 386 012a FFF7FEFF 		bl	__aeabi_dmul
 387 012e 0346     		mov	r3, r0
 388 0130 0C46     		mov	r4, r1
 389 0132 1846     		mov	r0, r3
 390 0134 2146     		mov	r1, r4
 391 0136 12A3     		adr	r3, .L15+8
 392 0138 D3E90023 		ldrd	r2, [r3]
 393 013c FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 10


 394 0140 0346     		mov	r3, r0
 395 0142 0C46     		mov	r4, r1
 396 0144 1846     		mov	r0, r3
 397 0146 2146     		mov	r1, r4
 398 0148 4FF00002 		mov	r2, #0
 399 014c 114B     		ldr	r3, .L15+28
 400 014e FFF7FEFF 		bl	__aeabi_dsub
 401 0152 0346     		mov	r3, r0
 402 0154 0C46     		mov	r4, r1
 403 0156 1846     		mov	r0, r3
 404 0158 2146     		mov	r1, r4
 405 015a FFF7FEFF 		bl	__aeabi_d2f
 406 015e 0346     		mov	r3, r0
 407 0160 3B65     		str	r3, [r7, #80]	@ float
 112:voltages.c    ****     return pressure;
 408              		.loc 1 112 0
 409 0162 7B68     		ldr	r3, [r7, #4]
 410 0164 1C46     		mov	r4, r3
 411 0166 07F14403 		add	r3, r7, #68
 412 016a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 413 016c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 113:voltages.c    **** }
 414              		.loc 1 113 0
 415 0170 7868     		ldr	r0, [r7, #4]
 416 0172 5C37     		adds	r7, r7, #92
 417              		.cfi_def_cfa_offset 12
 418 0174 BD46     		mov	sp, r7
 419              		.cfi_def_cfa_register 13
 420              		@ sp needed
 421 0176 90BD     		pop	{r4, r7, pc}
 422              	.L16:
 423              		.align	3
 424              	.L15:
 425 0178 00000000 		.word	0
 426 017c 00C06240 		.word	1080213504
 427 0180 33333333 		.word	858993459
 428 0184 33330340 		.word	1073951539
 429 0188 0000C842 		.word	1120403456
 430 018c 00408F40 		.word	1083129856
 431 0190 00002440 		.word	1076101120
 432 0194 00000440 		.word	1074003968
 433              		.cfi_endproc
 434              	.LFE65:
 435              		.size	pressure_sensor_readings, .-pressure_sensor_readings
 436              		.section	.text.pressure_calculations,"ax",%progbits
 437              		.align	2
 438              		.global	pressure_calculations
 439              		.thumb
 440              		.thumb_func
 441              		.type	pressure_calculations, %function
 442              	pressure_calculations:
 443              	.LFB66:
 114:voltages.c    **** 
 115:voltages.c    **** // Function to calculate the pressure transducer current and depth estimate.
 116:voltages.c    **** pressure_t pressure_calculations(voltage_t voltage){
 444              		.loc 1 116 0
 445              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 11


 446              		@ args = 24, pretend = 16, frame = 24
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448 0000 84B0     		sub	sp, sp, #16
 449              		.cfi_def_cfa_offset 16
 450 0002 90B5     		push	{r4, r7, lr}
 451              		.cfi_def_cfa_offset 28
 452              		.cfi_offset 4, -28
 453              		.cfi_offset 7, -24
 454              		.cfi_offset 14, -20
 455 0004 87B0     		sub	sp, sp, #28
 456              		.cfi_def_cfa_offset 56
 457 0006 00AF     		add	r7, sp, #0
 458              		.cfi_def_cfa_register 7
 459 0008 7860     		str	r0, [r7, #4]
 460 000a 07F12C00 		add	r0, r7, #44
 461 000e 80E80E00 		stmia	r0, {r1, r2, r3}
 117:voltages.c    ****     // Create variable pressure of data structure type pressure_t.
 118:voltages.c    ****     pressure_t pressure;
 119:voltages.c    ****     
 120:voltages.c    ****     // Calculate the pressure transducer current output.
 121:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 122:voltages.c    ****     // Should fall between 4 and 20mA
 123:voltages.c    ****     pressure.pressure_current = (voltage.voltage_pressure/ 150.0)/1000; 
 462              		.loc 1 123 0
 463 0012 BB6B     		ldr	r3, [r7, #56]	@ float
 464 0014 1846     		mov	r0, r3
 465 0016 FFF7FEFF 		bl	__aeabi_f2d
 466 001a 23A3     		adr	r3, .L19
 467 001c D3E90023 		ldrd	r2, [r3]
 468 0020 FFF7FEFF 		bl	__aeabi_ddiv
 469 0024 0346     		mov	r3, r0
 470 0026 0C46     		mov	r4, r1
 471 0028 1846     		mov	r0, r3
 472 002a 2146     		mov	r1, r4
 473 002c 4FF00002 		mov	r2, #0
 474 0030 214B     		ldr	r3, .L19+16
 475 0032 FFF7FEFF 		bl	__aeabi_ddiv
 476 0036 0346     		mov	r3, r0
 477 0038 0C46     		mov	r4, r1
 478 003a 1846     		mov	r0, r3
 479 003c 2146     		mov	r1, r4
 480 003e FFF7FEFF 		bl	__aeabi_d2f
 481 0042 0346     		mov	r3, r0
 482 0044 3B61     		str	r3, [r7, #16]	@ float
 124:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 125:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 126:voltages.c    ****     // Should fall between 0 and 10 ft
 127:voltages.c    ****     pressure.pressure_depth = ((10.0*voltage.voltage_pressure)/(0.016*150))-(10.0/4.0); 
 483              		.loc 1 127 0
 484 0046 BB6B     		ldr	r3, [r7, #56]	@ float
 485 0048 1846     		mov	r0, r3
 486 004a FFF7FEFF 		bl	__aeabi_f2d
 487 004e 4FF00002 		mov	r2, #0
 488 0052 1A4B     		ldr	r3, .L19+20
 489 0054 FFF7FEFF 		bl	__aeabi_dmul
 490 0058 0346     		mov	r3, r0
 491 005a 0C46     		mov	r4, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 12


 492 005c 1846     		mov	r0, r3
 493 005e 2146     		mov	r1, r4
 494 0060 13A3     		adr	r3, .L19+8
 495 0062 D3E90023 		ldrd	r2, [r3]
 496 0066 FFF7FEFF 		bl	__aeabi_ddiv
 497 006a 0346     		mov	r3, r0
 498 006c 0C46     		mov	r4, r1
 499 006e 1846     		mov	r0, r3
 500 0070 2146     		mov	r1, r4
 501 0072 4FF00002 		mov	r2, #0
 502 0076 124B     		ldr	r3, .L19+24
 503 0078 FFF7FEFF 		bl	__aeabi_dsub
 504 007c 0346     		mov	r3, r0
 505 007e 0C46     		mov	r4, r1
 506 0080 1846     		mov	r0, r3
 507 0082 2146     		mov	r1, r4
 508 0084 FFF7FEFF 		bl	__aeabi_d2f
 509 0088 0346     		mov	r3, r0
 510 008a 7B61     		str	r3, [r7, #20]	@ float
 128:voltages.c    ****     return pressure;
 511              		.loc 1 128 0
 512 008c 7B68     		ldr	r3, [r7, #4]
 513 008e 1C46     		mov	r4, r3
 514 0090 07F10803 		add	r3, r7, #8
 515 0094 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 516 0096 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 129:voltages.c    **** }
 517              		.loc 1 129 0
 518 009a 7868     		ldr	r0, [r7, #4]
 519 009c 1C37     		adds	r7, r7, #28
 520              		.cfi_def_cfa_offset 28
 521 009e BD46     		mov	sp, r7
 522              		.cfi_def_cfa_register 13
 523              		@ sp needed
 524 00a0 BDE89040 		pop	{r4, r7, lr}
 525              		.cfi_restore 14
 526              		.cfi_restore 7
 527              		.cfi_restore 4
 528              		.cfi_def_cfa_offset 16
 529 00a4 04B0     		add	sp, sp, #16
 530              		.cfi_def_cfa_offset 0
 531 00a6 7047     		bx	lr
 532              	.L20:
 533              		.align	3
 534              	.L19:
 535 00a8 00000000 		.word	0
 536 00ac 00C06240 		.word	1080213504
 537 00b0 33333333 		.word	858993459
 538 00b4 33330340 		.word	1073951539
 539 00b8 00408F40 		.word	1083129856
 540 00bc 00002440 		.word	1076101120
 541 00c0 00000440 		.word	1074003968
 542              		.cfi_endproc
 543              	.LFE66:
 544              		.size	pressure_calculations, .-pressure_calculations
 545              		.section	.text.sort32,"ax",%progbits
 546              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 13


 547              		.global	sort32
 548              		.thumb
 549              		.thumb_func
 550              		.type	sort32, %function
 551              	sort32:
 552              	.LFB67:
 130:voltages.c    ****     
 131:voltages.c    ****     
 132:voltages.c    **** 
 133:voltages.c    **** // Function to sort the elements in the level readings array
 134:voltages.c    **** void sort32(int32 a[],int32 n) { 
 553              		.loc 1 134 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 16
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 80B5     		push	{r7, lr}
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 84B0     		sub	sp, sp, #16
 562              		.cfi_def_cfa_offset 24
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_def_cfa_register 7
 565 0006 7860     		str	r0, [r7, #4]
 566 0008 3960     		str	r1, [r7]
 135:voltages.c    ****    int32 i,j;
 136:voltages.c    **** 
 137:voltages.c    ****    for(i = 0;i < n-1;i++) {
 567              		.loc 1 137 0
 568 000a 0023     		movs	r3, #0
 569 000c FB60     		str	r3, [r7, #12]
 570 000e 28E0     		b	.L22
 571              	.L26:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 572              		.loc 1 138 0
 573 0010 0023     		movs	r3, #0
 574 0012 BB60     		str	r3, [r7, #8]
 575 0014 1BE0     		b	.L23
 576              	.L25:
 139:voltages.c    ****          if(a[j] > a[j+1])
 577              		.loc 1 139 0
 578 0016 BB68     		ldr	r3, [r7, #8]
 579 0018 9B00     		lsls	r3, r3, #2
 580 001a 7A68     		ldr	r2, [r7, #4]
 581 001c 1344     		add	r3, r3, r2
 582 001e 1A68     		ldr	r2, [r3]
 583 0020 BB68     		ldr	r3, [r7, #8]
 584 0022 0133     		adds	r3, r3, #1
 585 0024 9B00     		lsls	r3, r3, #2
 586 0026 7968     		ldr	r1, [r7, #4]
 587 0028 0B44     		add	r3, r3, r1
 588 002a 1B68     		ldr	r3, [r3]
 589 002c 9A42     		cmp	r2, r3
 590 002e 0BDD     		ble	.L24
 140:voltages.c    ****             swap32(&a[j],&a[j+1]);  // Swap the address of a[j] and a[j+1]
 591              		.loc 1 140 0
 592 0030 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 14


 593 0032 9B00     		lsls	r3, r3, #2
 594 0034 7A68     		ldr	r2, [r7, #4]
 595 0036 D018     		adds	r0, r2, r3
 596 0038 BB68     		ldr	r3, [r7, #8]
 597 003a 0133     		adds	r3, r3, #1
 598 003c 9B00     		lsls	r3, r3, #2
 599 003e 7A68     		ldr	r2, [r7, #4]
 600 0040 1344     		add	r3, r3, r2
 601 0042 1946     		mov	r1, r3
 602 0044 FFF7FEFF 		bl	swap32
 603              	.L24:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 604              		.loc 1 138 0 discriminator 2
 605 0048 BB68     		ldr	r3, [r7, #8]
 606 004a 0133     		adds	r3, r3, #1
 607 004c BB60     		str	r3, [r7, #8]
 608              	.L23:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 609              		.loc 1 138 0 is_stmt 0 discriminator 1
 610 004e 3A68     		ldr	r2, [r7]
 611 0050 FB68     		ldr	r3, [r7, #12]
 612 0052 D31A     		subs	r3, r2, r3
 613 0054 5A1E     		subs	r2, r3, #1
 614 0056 BB68     		ldr	r3, [r7, #8]
 615 0058 9A42     		cmp	r2, r3
 616 005a DCDC     		bgt	.L25
 137:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 617              		.loc 1 137 0 is_stmt 1 discriminator 2
 618 005c FB68     		ldr	r3, [r7, #12]
 619 005e 0133     		adds	r3, r3, #1
 620 0060 FB60     		str	r3, [r7, #12]
 621              	.L22:
 137:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 622              		.loc 1 137 0 is_stmt 0 discriminator 1
 623 0062 3B68     		ldr	r3, [r7]
 624 0064 5A1E     		subs	r2, r3, #1
 625 0066 FB68     		ldr	r3, [r7, #12]
 626 0068 9A42     		cmp	r2, r3
 627 006a D1DC     		bgt	.L26
 141:voltages.c    ****       }
 142:voltages.c    ****    }
 143:voltages.c    **** }
 628              		.loc 1 143 0 is_stmt 1
 629 006c 00BF     		nop
 630 006e 1037     		adds	r7, r7, #16
 631              		.cfi_def_cfa_offset 8
 632 0070 BD46     		mov	sp, r7
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 0072 80BD     		pop	{r7, pc}
 636              		.cfi_endproc
 637              	.LFE67:
 638              		.size	sort32, .-sort32
 639              		.section	.text.swap32,"ax",%progbits
 640              		.align	2
 641              		.global	swap32
 642              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 15


 643              		.thumb_func
 644              		.type	swap32, %function
 645              	swap32:
 646              	.LFB68:
 144:voltages.c    **** 
 145:voltages.c    **** // Function to swap elements in the level readings array in order to sort them
 146:voltages.c    **** void swap32(int32 *p,int32 *q){
 647              		.loc 1 146 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 16
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 0000 80B4     		push	{r7}
 653              		.cfi_def_cfa_offset 4
 654              		.cfi_offset 7, -4
 655 0002 85B0     		sub	sp, sp, #20
 656              		.cfi_def_cfa_offset 24
 657 0004 00AF     		add	r7, sp, #0
 658              		.cfi_def_cfa_register 7
 659 0006 7860     		str	r0, [r7, #4]
 660 0008 3960     		str	r1, [r7]
 147:voltages.c    ****    int32 t;
 148:voltages.c    ****    
 149:voltages.c    ****    t=*p; 
 661              		.loc 1 149 0
 662 000a 7B68     		ldr	r3, [r7, #4]
 663 000c 1B68     		ldr	r3, [r3]
 664 000e FB60     		str	r3, [r7, #12]
 150:voltages.c    ****    *p=*q; 
 665              		.loc 1 150 0
 666 0010 3B68     		ldr	r3, [r7]
 667 0012 1A68     		ldr	r2, [r3]
 668 0014 7B68     		ldr	r3, [r7, #4]
 669 0016 1A60     		str	r2, [r3]
 151:voltages.c    ****    *q=t;
 670              		.loc 1 151 0
 671 0018 3B68     		ldr	r3, [r7]
 672 001a FA68     		ldr	r2, [r7, #12]
 673 001c 1A60     		str	r2, [r3]
 152:voltages.c    **** }
 674              		.loc 1 152 0
 675 001e 00BF     		nop
 676 0020 1437     		adds	r7, r7, #20
 677              		.cfi_def_cfa_offset 4
 678 0022 BD46     		mov	sp, r7
 679              		.cfi_def_cfa_register 13
 680              		@ sp needed
 681 0024 80BC     		pop	{r7}
 682              		.cfi_restore 7
 683              		.cfi_def_cfa_offset 0
 684 0026 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE68:
 687              		.size	swap32, .-swap32
 688              		.global	__aeabi_i2d
 689              		.global	__aeabi_d2iz
 690              		.section	.text.find_median32,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 16


 691              		.align	2
 692              		.global	find_median32
 693              		.thumb
 694              		.thumb_func
 695              		.type	find_median32, %function
 696              	find_median32:
 697              	.LFB69:
 153:voltages.c    **** 
 154:voltages.c    **** // Function to calculate the median of the array, after array is sorted
 155:voltages.c    **** int32 find_median32(int32 array[] , int32 n)
 156:voltages.c    **** {
 698              		.loc 1 156 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 16
 701              		@ frame_needed = 1, uses_anonymous_args = 0
 702 0000 90B5     		push	{r4, r7, lr}
 703              		.cfi_def_cfa_offset 12
 704              		.cfi_offset 4, -12
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 0002 85B0     		sub	sp, sp, #20
 708              		.cfi_def_cfa_offset 32
 709 0004 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
 711 0006 7860     		str	r0, [r7, #4]
 712 0008 3960     		str	r1, [r7]
 157:voltages.c    ****     int32 median=0;
 713              		.loc 1 157 0
 714 000a 0023     		movs	r3, #0
 715 000c FB60     		str	r3, [r7, #12]
 158:voltages.c    ****     sort32(array,n);
 716              		.loc 1 158 0
 717 000e 3968     		ldr	r1, [r7]
 718 0010 7868     		ldr	r0, [r7, #4]
 719 0012 FFF7FEFF 		bl	sort32
 159:voltages.c    ****     
 160:voltages.c    ****     // If number of elements are even
 161:voltages.c    ****     if(n%2 == 0)
 720              		.loc 1 161 0
 721 0016 3B68     		ldr	r3, [r7]
 722 0018 03F00103 		and	r3, r3, #1
 723 001c 002B     		cmp	r3, #0
 724 001e 23D1     		bne	.L29
 162:voltages.c    ****         // Median is the average of the  two middle sorted numbers
 163:voltages.c    ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 725              		.loc 1 163 0
 726 0020 3B68     		ldr	r3, [r7]
 727 0022 013B     		subs	r3, r3, #1
 728 0024 DA0F     		lsrs	r2, r3, #31
 729 0026 1344     		add	r3, r3, r2
 730 0028 5B10     		asrs	r3, r3, #1
 731 002a 9B00     		lsls	r3, r3, #2
 732 002c 7A68     		ldr	r2, [r7, #4]
 733 002e 1344     		add	r3, r3, r2
 734 0030 1A68     		ldr	r2, [r3]
 735 0032 3B68     		ldr	r3, [r7]
 736 0034 D90F     		lsrs	r1, r3, #31
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 17


 737 0036 0B44     		add	r3, r3, r1
 738 0038 5B10     		asrs	r3, r3, #1
 739 003a 9B00     		lsls	r3, r3, #2
 740 003c 7968     		ldr	r1, [r7, #4]
 741 003e 0B44     		add	r3, r3, r1
 742 0040 1B68     		ldr	r3, [r3]
 743 0042 1344     		add	r3, r3, r2
 744 0044 1846     		mov	r0, r3
 745 0046 FFF7FEFF 		bl	__aeabi_i2d
 746 004a 4FF00002 		mov	r2, #0
 747 004e 4FF08043 		mov	r3, #1073741824
 748 0052 FFF7FEFF 		bl	__aeabi_ddiv
 749 0056 0346     		mov	r3, r0
 750 0058 0C46     		mov	r4, r1
 751 005a 1846     		mov	r0, r3
 752 005c 2146     		mov	r1, r4
 753 005e FFF7FEFF 		bl	__aeabi_d2iz
 754 0062 0346     		mov	r3, r0
 755 0064 FB60     		str	r3, [r7, #12]
 756 0066 08E0     		b	.L30
 757              	.L29:
 164:voltages.c    ****     // If number of elements are odd
 165:voltages.c    ****     else
 166:voltages.c    ****         // Median is the the middle sorted number. 
 167:voltages.c    ****         median = array[n/2];
 758              		.loc 1 167 0
 759 0068 3B68     		ldr	r3, [r7]
 760 006a DA0F     		lsrs	r2, r3, #31
 761 006c 1344     		add	r3, r3, r2
 762 006e 5B10     		asrs	r3, r3, #1
 763 0070 9B00     		lsls	r3, r3, #2
 764 0072 7A68     		ldr	r2, [r7, #4]
 765 0074 1344     		add	r3, r3, r2
 766 0076 1B68     		ldr	r3, [r3]
 767 0078 FB60     		str	r3, [r7, #12]
 768              	.L30:
 168:voltages.c    ****     
 169:voltages.c    ****     return median;
 769              		.loc 1 169 0
 770 007a FB68     		ldr	r3, [r7, #12]
 170:voltages.c    **** }
 771              		.loc 1 170 0
 772 007c 1846     		mov	r0, r3
 773 007e 1437     		adds	r7, r7, #20
 774              		.cfi_def_cfa_offset 12
 775 0080 BD46     		mov	sp, r7
 776              		.cfi_def_cfa_register 13
 777              		@ sp needed
 778 0082 90BD     		pop	{r4, r7, pc}
 779              		.cfi_endproc
 780              	.LFE69:
 781              		.size	find_median32, .-find_median32
 782              		.section	.rodata
 783              		.align	2
 784              	.LC0:
 785 0000 54455354 		.ascii	"TEST_ANALOG_VOLTAGES\000"
 785      5F414E41 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 18


 785      4C4F475F 
 785      564F4C54 
 785      41474553 
 786 0015 000000   		.align	2
 787              	.LC1:
 788 0018 56424154 		.ascii	"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f\000"
 788      3D252E33 
 788      662C5653 
 788      4F4C3D25 
 788      2E33662C 
 789              		.section	.text.voltages_test,"ax",%progbits
 790              		.align	2
 791              		.global	voltages_test
 792              		.thumb
 793              		.thumb_func
 794              		.type	voltages_test, %function
 795              	voltages_test:
 796              	.LFB70:
 171:voltages.c    **** 
 172:voltages.c    **** // Test the voltage readings
 173:voltages.c    **** test_t voltages_test(){
 797              		.loc 1 173 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 416
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 802              		.cfi_def_cfa_offset 24
 803              		.cfi_offset 4, -24
 804              		.cfi_offset 5, -20
 805              		.cfi_offset 7, -16
 806              		.cfi_offset 8, -12
 807              		.cfi_offset 9, -8
 808              		.cfi_offset 14, -4
 809 0004 EEB0     		sub	sp, sp, #440
 810              		.cfi_def_cfa_offset 464
 811 0006 06AF     		add	r7, sp, #24
 812              		.cfi_def_cfa 7, 440
 813 0008 3B1D     		adds	r3, r7, #4
 814 000a 1860     		str	r0, [r3]
 174:voltages.c    ****     // Create variable test of the data structure test_t
 175:voltages.c    ****     test_t test;
 176:voltages.c    ****     test.status = 0;
 815              		.loc 1 176 0
 816 000c 07F11C03 		add	r3, r7, #28
 817 0010 0022     		movs	r2, #0
 818 0012 83F88020 		strb	r2, [r3, #128]
 177:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_ANALOG_VOLTAGES");
 819              		.loc 1 177 0
 820 0016 07F11C03 		add	r3, r7, #28
 821 001a 264A     		ldr	r2, .L34
 822 001c 1C46     		mov	r4, r3
 823 001e 1546     		mov	r5, r2
 824 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 825 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 826 0024 95E80300 		ldmia	r5, {r0, r1}
 827 0028 2060     		str	r0, [r4]
 828 002a 0434     		adds	r4, r4, #4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 19


 829 002c 2170     		strb	r1, [r4]
 178:voltages.c    ****     
 179:voltages.c    ****     voltage_t voltage = voltage_take_readings();
 830              		.loc 1 179 0
 831 002e 07F10803 		add	r3, r7, #8
 832 0032 1846     		mov	r0, r3
 833 0034 FFF7FEFF 		bl	voltage_take_readings
 180:voltages.c    ****     
 181:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 182:voltages.c    ****     
 183:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f",
 184:voltages.c    ****             voltage.voltage_battery,
 834              		.loc 1 184 0
 835 0038 07F10803 		add	r3, r7, #8
 836 003c 1B68     		ldr	r3, [r3]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 837              		.loc 1 183 0
 838 003e 1846     		mov	r0, r3
 839 0040 FFF7FEFF 		bl	__aeabi_f2d
 840 0044 0446     		mov	r4, r0
 841 0046 0D46     		mov	r5, r1
 185:voltages.c    ****             voltage.voltage_solar,
 842              		.loc 1 185 0
 843 0048 07F10803 		add	r3, r7, #8
 844 004c 5B68     		ldr	r3, [r3, #4]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 845              		.loc 1 183 0
 846 004e 1846     		mov	r0, r3
 847 0050 FFF7FEFF 		bl	__aeabi_f2d
 848 0054 8046     		mov	r8, r0
 849 0056 8946     		mov	r9, r1
 186:voltages.c    ****             voltage.voltage_charge_current);
 850              		.loc 1 186 0
 851 0058 07F10803 		add	r3, r7, #8
 852 005c 9B68     		ldr	r3, [r3, #8]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 853              		.loc 1 183 0
 854 005e 1846     		mov	r0, r3
 855 0060 FFF7FEFF 		bl	__aeabi_f2d
 856 0064 0246     		mov	r2, r0
 857 0066 0B46     		mov	r3, r1
 858 0068 07F11C01 		add	r1, r7, #28
 859 006c 01F18100 		add	r0, r1, #129
 860 0070 CDE90423 		strd	r2, [sp, #16]
 861 0074 CDE90289 		strd	r8, [sp, #8]
 862 0078 CDE90045 		strd	r4, [sp]
 863 007c 0E4A     		ldr	r2, .L34+4
 864 007e 4FF48071 		mov	r1, #256
 865 0082 FFF7FEFF 		bl	snprintf
 187:voltages.c    ****     
 188:voltages.c    ****     test.status = 1;
 866              		.loc 1 188 0
 867 0086 07F11C03 		add	r3, r7, #28
 868 008a 0122     		movs	r2, #1
 869 008c 83F88020 		strb	r2, [r3, #128]
 189:voltages.c    ****     
 190:voltages.c    ****     return test;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 20


 870              		.loc 1 190 0
 871 0090 3B1D     		adds	r3, r7, #4
 872 0092 1A68     		ldr	r2, [r3]
 873 0094 07F11C03 		add	r3, r7, #28
 874 0098 1046     		mov	r0, r2
 875 009a 1946     		mov	r1, r3
 876 009c 40F28113 		movw	r3, #385
 877 00a0 1A46     		mov	r2, r3
 878 00a2 FFF7FEFF 		bl	memcpy
 191:voltages.c    **** }
 879              		.loc 1 191 0
 880 00a6 3B1D     		adds	r3, r7, #4
 881 00a8 1868     		ldr	r0, [r3]
 882 00aa 07F5D077 		add	r7, r7, #416
 883              		.cfi_def_cfa_offset 24
 884 00ae BD46     		mov	sp, r7
 885              		.cfi_def_cfa_register 13
 886              		@ sp needed
 887 00b0 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 888              	.L35:
 889              		.align	2
 890              	.L34:
 891 00b4 00000000 		.word	.LC0
 892 00b8 18000000 		.word	.LC1
 893              		.cfi_endproc
 894              	.LFE70:
 895              		.size	voltages_test, .-voltages_test
 896              		.section	.rodata
 897 0036 0000     		.align	2
 898              	.LC2:
 899 0038 54455354 		.ascii	"TEST_PRESSURE_SENSOR\000"
 899      5F505245 
 899      53535552 
 899      455F5345 
 899      4E534F52 
 900 004d 000000   		.align	2
 901              	.LC3:
 902 0050 50524553 		.ascii	"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f\000"
 902      53555245 
 902      3D252E33 
 902      662C5052 
 902      45535F43 
 903              		.global	__aeabi_fcmpeq
 904              		.section	.text.pressure_sensor_test,"ax",%progbits
 905              		.align	2
 906              		.global	pressure_sensor_test
 907              		.thumb
 908              		.thumb_func
 909              		.type	pressure_sensor_test, %function
 910              	pressure_sensor_test:
 911              	.LFB71:
 192:voltages.c    **** 
 193:voltages.c    **** // Test the pressure sensor readings
 194:voltages.c    **** test_t pressure_sensor_test(){
 912              		.loc 1 194 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 416
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 21


 915              		@ frame_needed = 1, uses_anonymous_args = 0
 916 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 917              		.cfi_def_cfa_offset 24
 918              		.cfi_offset 4, -24
 919              		.cfi_offset 5, -20
 920              		.cfi_offset 7, -16
 921              		.cfi_offset 8, -12
 922              		.cfi_offset 9, -8
 923              		.cfi_offset 14, -4
 924 0004 EEB0     		sub	sp, sp, #440
 925              		.cfi_def_cfa_offset 464
 926 0006 06AF     		add	r7, sp, #24
 927              		.cfi_def_cfa 7, 440
 928 0008 3B1D     		adds	r3, r7, #4
 929 000a 1860     		str	r0, [r3]
 195:voltages.c    ****     // Create variable test of the data structure test_t
 196:voltages.c    ****     test_t test;
 197:voltages.c    ****     test.status = 0;
 930              		.loc 1 197 0
 931 000c 07F11C03 		add	r3, r7, #28
 932 0010 0022     		movs	r2, #0
 933 0012 83F88020 		strb	r2, [r3, #128]
 198:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_PRESSURE_SENSOR");
 934              		.loc 1 198 0
 935 0016 07F11C03 		add	r3, r7, #28
 936 001a 374A     		ldr	r2, .L41
 937 001c 1C46     		mov	r4, r3
 938 001e 1546     		mov	r5, r2
 939 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 940 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 941 0024 95E80300 		ldmia	r5, {r0, r1}
 942 0028 2060     		str	r0, [r4]
 943 002a 0434     		adds	r4, r4, #4
 944 002c 2170     		strb	r1, [r4]
 199:voltages.c    ****     
 200:voltages.c    ****     pressure_t pressure = pressure_sensor_readings();
 945              		.loc 1 200 0
 946 002e 07F10C03 		add	r3, r7, #12
 947 0032 1846     		mov	r0, r3
 948 0034 FFF7FEFF 		bl	pressure_sensor_readings
 201:voltages.c    ****     
 202:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 203:voltages.c    ****     
 204:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f",
 205:voltages.c    ****             pressure.pressure_voltage_on,
 949              		.loc 1 205 0
 950 0038 07F10C03 		add	r3, r7, #12
 951 003c 1B68     		ldr	r3, [r3]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 952              		.loc 1 204 0
 953 003e 1846     		mov	r0, r3
 954 0040 FFF7FEFF 		bl	__aeabi_f2d
 955 0044 0446     		mov	r4, r0
 956 0046 0D46     		mov	r5, r1
 206:voltages.c    ****             pressure.pressure_current,
 957              		.loc 1 206 0
 958 0048 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 22


 959 004c 9B68     		ldr	r3, [r3, #8]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 960              		.loc 1 204 0
 961 004e 1846     		mov	r0, r3
 962 0050 FFF7FEFF 		bl	__aeabi_f2d
 963 0054 8046     		mov	r8, r0
 964 0056 8946     		mov	r9, r1
 207:voltages.c    ****             pressure.pressure_depth);
 965              		.loc 1 207 0
 966 0058 07F10C03 		add	r3, r7, #12
 967 005c DB68     		ldr	r3, [r3, #12]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 968              		.loc 1 204 0
 969 005e 1846     		mov	r0, r3
 970 0060 FFF7FEFF 		bl	__aeabi_f2d
 971 0064 0246     		mov	r2, r0
 972 0066 0B46     		mov	r3, r1
 973 0068 07F11C01 		add	r1, r7, #28
 974 006c 01F18100 		add	r0, r1, #129
 975 0070 CDE90423 		strd	r2, [sp, #16]
 976 0074 CDE90289 		strd	r8, [sp, #8]
 977 0078 CDE90045 		strd	r4, [sp]
 978 007c 1F4A     		ldr	r2, .L41+4
 979 007e 4FF48071 		mov	r1, #256
 980 0082 FFF7FEFF 		bl	snprintf
 208:voltages.c    ****     pressure.pressure_voltage_on = floorf(pressure.pressure_voltage_on * 100) / 100;
 981              		.loc 1 208 0
 982 0086 07F10C03 		add	r3, r7, #12
 983 008a 1B68     		ldr	r3, [r3]	@ float
 984 008c 1C49     		ldr	r1, .L41+8
 985 008e 1846     		mov	r0, r3
 986 0090 FFF7FEFF 		bl	__aeabi_fmul
 987 0094 0346     		mov	r3, r0
 988 0096 1846     		mov	r0, r3
 989 0098 FFF7FEFF 		bl	floorf
 990 009c 0346     		mov	r3, r0
 991 009e 1849     		ldr	r1, .L41+8
 992 00a0 1846     		mov	r0, r3
 993 00a2 FFF7FEFF 		bl	__aeabi_fdiv
 994 00a6 0346     		mov	r3, r0
 995 00a8 1A46     		mov	r2, r3
 996 00aa 07F10C03 		add	r3, r7, #12
 997 00ae 1A60     		str	r2, [r3]	@ float
 209:voltages.c    ****     if (pressure.pressure_voltage_off != pressure.pressure_voltage_on) {
 998              		.loc 1 209 0
 999 00b0 07F10C03 		add	r3, r7, #12
 1000 00b4 5A68     		ldr	r2, [r3, #4]	@ float
 1001 00b6 07F10C03 		add	r3, r7, #12
 1002 00ba 1B68     		ldr	r3, [r3]	@ float
 1003 00bc 1946     		mov	r1, r3
 1004 00be 1046     		mov	r0, r2
 1005 00c0 FFF7FEFF 		bl	__aeabi_fcmpeq
 1006 00c4 0346     		mov	r3, r0
 1007 00c6 002B     		cmp	r3, #0
 1008 00c8 04D1     		bne	.L37
 210:voltages.c    ****         test.status = 1;
 1009              		.loc 1 210 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 23


 1010 00ca 07F11C03 		add	r3, r7, #28
 1011 00ce 0122     		movs	r2, #1
 1012 00d0 83F88020 		strb	r2, [r3, #128]
 1013              	.L37:
 211:voltages.c    ****     }
 212:voltages.c    ****     
 213:voltages.c    ****     return test;
 1014              		.loc 1 213 0
 1015 00d4 3B1D     		adds	r3, r7, #4
 1016 00d6 1A68     		ldr	r2, [r3]
 1017 00d8 07F11C03 		add	r3, r7, #28
 1018 00dc 1046     		mov	r0, r2
 1019 00de 1946     		mov	r1, r3
 1020 00e0 40F28113 		movw	r3, #385
 1021 00e4 1A46     		mov	r2, r3
 1022 00e6 FFF7FEFF 		bl	memcpy
 214:voltages.c    **** }
 1023              		.loc 1 214 0
 1024 00ea 3B1D     		adds	r3, r7, #4
 1025 00ec 1868     		ldr	r0, [r3]
 1026 00ee 07F5D077 		add	r7, r7, #416
 1027              		.cfi_def_cfa_offset 24
 1028 00f2 BD46     		mov	sp, r7
 1029              		.cfi_def_cfa_register 13
 1030              		@ sp needed
 1031 00f4 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1032              	.L42:
 1033              		.align	2
 1034              	.L41:
 1035 00f8 38000000 		.word	.LC2
 1036 00fc 50000000 		.word	.LC3
 1037 0100 0000C842 		.word	1120403456
 1038              		.cfi_endproc
 1039              	.LFE71:
 1040              		.size	pressure_sensor_test, .-pressure_sensor_test
 1041              		.text
 1042              	.Letext0:
 1043              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1044              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1045              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1046              		.file 5 "testing.h"
 1047              		.file 6 "voltages.h"
 1048              		.file 7 "data.h"
 1049              		.file 8 "modem.h"
 1050              		.file 9 "notoriOS.h"
 1051              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1052              		.file 11 "level_sensor.h"
 1053              		.file 12 "App_LED.h"
 1054              		.section	.debug_info,"",%progbits
 1055              	.Ldebug_info0:
 1056 0000 70080000 		.4byte	0x870
 1057 0004 0400     		.2byte	0x4
 1058 0006 00000000 		.4byte	.Ldebug_abbrev0
 1059 000a 04       		.byte	0x4
 1060 000b 01       		.uleb128 0x1
 1061 000c 6E000000 		.4byte	.LASF111
 1062 0010 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 24


 1063 0011 7D050000 		.4byte	.LASF112
 1064 0015 07000000 		.4byte	.LASF113
 1065 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1066 001d 00000000 		.4byte	0
 1067 0021 00000000 		.4byte	.Ldebug_line0
 1068 0025 02       		.uleb128 0x2
 1069 0026 01       		.byte	0x1
 1070 0027 06       		.byte	0x6
 1071 0028 84010000 		.4byte	.LASF0
 1072 002c 02       		.uleb128 0x2
 1073 002d 01       		.byte	0x1
 1074 002e 08       		.byte	0x8
 1075 002f 51040000 		.4byte	.LASF1
 1076 0033 02       		.uleb128 0x2
 1077 0034 02       		.byte	0x2
 1078 0035 05       		.byte	0x5
 1079 0036 6B030000 		.4byte	.LASF2
 1080 003a 02       		.uleb128 0x2
 1081 003b 02       		.byte	0x2
 1082 003c 07       		.byte	0x7
 1083 003d 63050000 		.4byte	.LASF3
 1084 0041 03       		.uleb128 0x3
 1085 0042 52050000 		.4byte	.LASF9
 1086 0046 02       		.byte	0x2
 1087 0047 3F       		.byte	0x3f
 1088 0048 4C000000 		.4byte	0x4c
 1089 004c 02       		.uleb128 0x2
 1090 004d 04       		.byte	0x4
 1091 004e 05       		.byte	0x5
 1092 004f F3010000 		.4byte	.LASF4
 1093 0053 02       		.uleb128 0x2
 1094 0054 04       		.byte	0x4
 1095 0055 07       		.byte	0x7
 1096 0056 F2020000 		.4byte	.LASF5
 1097 005a 02       		.uleb128 0x2
 1098 005b 08       		.byte	0x8
 1099 005c 05       		.byte	0x5
 1100 005d 76010000 		.4byte	.LASF6
 1101 0061 02       		.uleb128 0x2
 1102 0062 08       		.byte	0x8
 1103 0063 07       		.byte	0x7
 1104 0064 FC000000 		.4byte	.LASF7
 1105 0068 04       		.uleb128 0x4
 1106 0069 04       		.byte	0x4
 1107 006a 05       		.byte	0x5
 1108 006b 696E7400 		.ascii	"int\000"
 1109 006f 02       		.uleb128 0x2
 1110 0070 04       		.byte	0x4
 1111 0071 07       		.byte	0x7
 1112 0072 D9020000 		.4byte	.LASF8
 1113 0076 03       		.uleb128 0x3
 1114 0077 49040000 		.4byte	.LASF10
 1115 007b 03       		.byte	0x3
 1116 007c 2C       		.byte	0x2c
 1117 007d 41000000 		.4byte	0x41
 1118 0081 05       		.uleb128 0x5
 1119 0082 33020000 		.4byte	.LASF11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 25


 1120 0086 04       		.byte	0x4
 1121 0087 9201     		.2byte	0x192
 1122 0089 2C000000 		.4byte	0x2c
 1123 008d 05       		.uleb128 0x5
 1124 008e 00000000 		.4byte	.LASF12
 1125 0092 04       		.byte	0x4
 1126 0093 9301     		.2byte	0x193
 1127 0095 3A000000 		.4byte	0x3a
 1128 0099 05       		.uleb128 0x5
 1129 009a E4050000 		.4byte	.LASF13
 1130 009e 04       		.byte	0x4
 1131 009f 9601     		.2byte	0x196
 1132 00a1 33000000 		.4byte	0x33
 1133 00a5 05       		.uleb128 0x5
 1134 00a6 46020000 		.4byte	.LASF14
 1135 00aa 04       		.byte	0x4
 1136 00ab 9701     		.2byte	0x197
 1137 00ad 4C000000 		.4byte	0x4c
 1138 00b1 02       		.uleb128 0x2
 1139 00b2 04       		.byte	0x4
 1140 00b3 04       		.byte	0x4
 1141 00b4 3D040000 		.4byte	.LASF15
 1142 00b8 02       		.uleb128 0x2
 1143 00b9 08       		.byte	0x8
 1144 00ba 04       		.byte	0x4
 1145 00bb 19060000 		.4byte	.LASF16
 1146 00bf 02       		.uleb128 0x2
 1147 00c0 01       		.byte	0x1
 1148 00c1 08       		.byte	0x8
 1149 00c2 42050000 		.4byte	.LASF17
 1150 00c6 02       		.uleb128 0x2
 1151 00c7 08       		.byte	0x8
 1152 00c8 04       		.byte	0x4
 1153 00c9 36050000 		.4byte	.LASF18
 1154 00cd 02       		.uleb128 0x2
 1155 00ce 04       		.byte	0x4
 1156 00cf 07       		.byte	0x7
 1157 00d0 CD030000 		.4byte	.LASF19
 1158 00d4 06       		.uleb128 0x6
 1159 00d5 BF000000 		.4byte	0xbf
 1160 00d9 E4000000 		.4byte	0xe4
 1161 00dd 07       		.uleb128 0x7
 1162 00de CD000000 		.4byte	0xcd
 1163 00e2 17       		.byte	0x17
 1164 00e3 00       		.byte	0
 1165 00e4 08       		.uleb128 0x8
 1166 00e5 8101     		.2byte	0x181
 1167 00e7 05       		.byte	0x5
 1168 00e8 0A       		.byte	0xa
 1169 00e9 12010000 		.4byte	0x112
 1170 00ed 09       		.uleb128 0x9
 1171 00ee D6030000 		.4byte	.LASF20
 1172 00f2 05       		.byte	0x5
 1173 00f3 0C       		.byte	0xc
 1174 00f4 12010000 		.4byte	0x112
 1175 00f8 00       		.byte	0
 1176 00f9 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 26


 1177 00fa 9E050000 		.4byte	.LASF21
 1178 00fe 05       		.byte	0x5
 1179 00ff 0D       		.byte	0xd
 1180 0100 81000000 		.4byte	0x81
 1181 0104 80       		.byte	0x80
 1182 0105 09       		.uleb128 0x9
 1183 0106 D4040000 		.4byte	.LASF22
 1184 010a 05       		.byte	0x5
 1185 010b 0F       		.byte	0xf
 1186 010c 22010000 		.4byte	0x122
 1187 0110 81       		.byte	0x81
 1188 0111 00       		.byte	0
 1189 0112 06       		.uleb128 0x6
 1190 0113 BF000000 		.4byte	0xbf
 1191 0117 22010000 		.4byte	0x122
 1192 011b 07       		.uleb128 0x7
 1193 011c CD000000 		.4byte	0xcd
 1194 0120 7F       		.byte	0x7f
 1195 0121 00       		.byte	0
 1196 0122 06       		.uleb128 0x6
 1197 0123 BF000000 		.4byte	0xbf
 1198 0127 32010000 		.4byte	0x132
 1199 012b 07       		.uleb128 0x7
 1200 012c CD000000 		.4byte	0xcd
 1201 0130 FF       		.byte	0xff
 1202 0131 00       		.byte	0
 1203 0132 03       		.uleb128 0x3
 1204 0133 9F040000 		.4byte	.LASF23
 1205 0137 05       		.byte	0x5
 1206 0138 10       		.byte	0x10
 1207 0139 E4000000 		.4byte	0xe4
 1208 013d 0A       		.uleb128 0xa
 1209 013e 14       		.byte	0x14
 1210 013f 06       		.byte	0x6
 1211 0140 11       		.byte	0x11
 1212 0141 82010000 		.4byte	0x182
 1213 0145 09       		.uleb128 0x9
 1214 0146 04030000 		.4byte	.LASF24
 1215 014a 06       		.byte	0x6
 1216 014b 12       		.byte	0x12
 1217 014c B1000000 		.4byte	0xb1
 1218 0150 00       		.byte	0
 1219 0151 09       		.uleb128 0x9
 1220 0152 34030000 		.4byte	.LASF25
 1221 0156 06       		.byte	0x6
 1222 0157 13       		.byte	0x13
 1223 0158 B1000000 		.4byte	0xb1
 1224 015c 04       		.byte	0x4
 1225 015d 09       		.uleb128 0x9
 1226 015e C6010000 		.4byte	.LASF26
 1227 0162 06       		.byte	0x6
 1228 0163 14       		.byte	0x14
 1229 0164 B1000000 		.4byte	0xb1
 1230 0168 08       		.byte	0x8
 1231 0169 09       		.uleb128 0x9
 1232 016a 1F040000 		.4byte	.LASF27
 1233 016e 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 27


 1234 016f 15       		.byte	0x15
 1235 0170 B1000000 		.4byte	0xb1
 1236 0174 0C       		.byte	0xc
 1237 0175 09       		.uleb128 0x9
 1238 0176 FA040000 		.4byte	.LASF28
 1239 017a 06       		.byte	0x6
 1240 017b 16       		.byte	0x16
 1241 017c 81000000 		.4byte	0x81
 1242 0180 10       		.byte	0x10
 1243 0181 00       		.byte	0
 1244 0182 03       		.uleb128 0x3
 1245 0183 98030000 		.4byte	.LASF29
 1246 0187 06       		.byte	0x6
 1247 0188 17       		.byte	0x17
 1248 0189 3D010000 		.4byte	0x13d
 1249 018d 0A       		.uleb128 0xa
 1250 018e 10       		.byte	0x10
 1251 018f 06       		.byte	0x6
 1252 0190 19       		.byte	0x19
 1253 0191 C6010000 		.4byte	0x1c6
 1254 0195 09       		.uleb128 0x9
 1255 0196 C5020000 		.4byte	.LASF30
 1256 019a 06       		.byte	0x6
 1257 019b 1A       		.byte	0x1a
 1258 019c B1000000 		.4byte	0xb1
 1259 01a0 00       		.byte	0
 1260 01a1 09       		.uleb128 0x9
 1261 01a2 1E020000 		.4byte	.LASF31
 1262 01a6 06       		.byte	0x6
 1263 01a7 1B       		.byte	0x1b
 1264 01a8 B1000000 		.4byte	0xb1
 1265 01ac 04       		.byte	0x4
 1266 01ad 09       		.uleb128 0x9
 1267 01ae E9040000 		.4byte	.LASF32
 1268 01b2 06       		.byte	0x6
 1269 01b3 1C       		.byte	0x1c
 1270 01b4 B1000000 		.4byte	0xb1
 1271 01b8 08       		.byte	0x8
 1272 01b9 09       		.uleb128 0x9
 1273 01ba A6040000 		.4byte	.LASF33
 1274 01be 06       		.byte	0x6
 1275 01bf 1D       		.byte	0x1d
 1276 01c0 B1000000 		.4byte	0xb1
 1277 01c4 0C       		.byte	0xc
 1278 01c5 00       		.byte	0
 1279 01c6 03       		.uleb128 0x3
 1280 01c7 01060000 		.4byte	.LASF34
 1281 01cb 06       		.byte	0x6
 1282 01cc 1E       		.byte	0x1e
 1283 01cd 8D010000 		.4byte	0x18d
 1284 01d1 0A       		.uleb128 0xa
 1285 01d2 2C       		.byte	0x2c
 1286 01d3 07       		.byte	0x7
 1287 01d4 14       		.byte	0x14
 1288 01d5 FE010000 		.4byte	0x1fe
 1289 01d9 0B       		.uleb128 0xb
 1290 01da 6B657900 		.ascii	"key\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 28


 1291 01de 07       		.byte	0x7
 1292 01df 15       		.byte	0x15
 1293 01e0 FE010000 		.4byte	0x1fe
 1294 01e4 00       		.byte	0
 1295 01e5 09       		.uleb128 0x9
 1296 01e6 9C020000 		.4byte	.LASF35
 1297 01ea 07       		.byte	0x7
 1298 01eb 16       		.byte	0x16
 1299 01ec FE010000 		.4byte	0x1fe
 1300 01f0 14       		.byte	0x14
 1301 01f1 09       		.uleb128 0x9
 1302 01f2 F7030000 		.4byte	.LASF36
 1303 01f6 07       		.byte	0x7
 1304 01f7 17       		.byte	0x17
 1305 01f8 A5000000 		.4byte	0xa5
 1306 01fc 28       		.byte	0x28
 1307 01fd 00       		.byte	0
 1308 01fe 06       		.uleb128 0x6
 1309 01ff BF000000 		.4byte	0xbf
 1310 0203 0E020000 		.4byte	0x20e
 1311 0207 07       		.uleb128 0x7
 1312 0208 CD000000 		.4byte	0xcd
 1313 020c 13       		.byte	0x13
 1314 020d 00       		.byte	0
 1315 020e 03       		.uleb128 0x3
 1316 020f E6020000 		.4byte	.LASF37
 1317 0213 07       		.byte	0x7
 1318 0214 19       		.byte	0x19
 1319 0215 D1010000 		.4byte	0x1d1
 1320 0219 0A       		.uleb128 0xa
 1321 021a 3C       		.byte	0x3c
 1322 021b 08       		.byte	0x8
 1323 021c 36       		.byte	0x36
 1324 021d 46020000 		.4byte	0x246
 1325 0221 09       		.uleb128 0x9
 1326 0222 76050000 		.4byte	.LASF38
 1327 0226 08       		.byte	0x8
 1328 0227 37       		.byte	0x37
 1329 0228 FE010000 		.4byte	0x1fe
 1330 022c 00       		.byte	0
 1331 022d 09       		.uleb128 0x9
 1332 022e 6A020000 		.4byte	.LASF39
 1333 0232 08       		.byte	0x8
 1334 0233 38       		.byte	0x38
 1335 0234 FE010000 		.4byte	0x1fe
 1336 0238 14       		.byte	0x14
 1337 0239 09       		.uleb128 0x9
 1338 023a CF040000 		.4byte	.LASF40
 1339 023e 08       		.byte	0x8
 1340 023f 39       		.byte	0x39
 1341 0240 FE010000 		.4byte	0x1fe
 1342 0244 28       		.byte	0x28
 1343 0245 00       		.byte	0
 1344 0246 03       		.uleb128 0x3
 1345 0247 DD010000 		.4byte	.LASF41
 1346 024b 08       		.byte	0x8
 1347 024c 3B       		.byte	0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 29


 1348 024d 19020000 		.4byte	0x219
 1349 0251 0A       		.uleb128 0xa
 1350 0252 20       		.byte	0x20
 1351 0253 08       		.byte	0x8
 1352 0254 3D       		.byte	0x3d
 1353 0255 BA020000 		.4byte	0x2ba
 1354 0259 09       		.uleb128 0x9
 1355 025a FC010000 		.4byte	.LASF42
 1356 025e 08       		.byte	0x8
 1357 025f 3E       		.byte	0x3e
 1358 0260 68000000 		.4byte	0x68
 1359 0264 00       		.byte	0
 1360 0265 0B       		.uleb128 0xb
 1361 0266 62657200 		.ascii	"ber\000"
 1362 026a 08       		.byte	0x8
 1363 026b 3F       		.byte	0x3f
 1364 026c 68000000 		.4byte	0x68
 1365 0270 04       		.byte	0x4
 1366 0271 09       		.uleb128 0x9
 1367 0272 B5040000 		.4byte	.LASF43
 1368 0276 08       		.byte	0x8
 1369 0277 40       		.byte	0x40
 1370 0278 68000000 		.4byte	0x68
 1371 027c 08       		.byte	0x8
 1372 027d 09       		.uleb128 0x9
 1373 027e 90010000 		.4byte	.LASF44
 1374 0282 08       		.byte	0x8
 1375 0283 41       		.byte	0x41
 1376 0284 68000000 		.4byte	0x68
 1377 0288 0C       		.byte	0xc
 1378 0289 09       		.uleb128 0x9
 1379 028a 89040000 		.4byte	.LASF45
 1380 028e 08       		.byte	0x8
 1381 028f 42       		.byte	0x42
 1382 0290 68000000 		.4byte	0x68
 1383 0294 10       		.byte	0x10
 1384 0295 09       		.uleb128 0x9
 1385 0296 84040000 		.4byte	.LASF46
 1386 029a 08       		.byte	0x8
 1387 029b 43       		.byte	0x43
 1388 029c 68000000 		.4byte	0x68
 1389 02a0 14       		.byte	0x14
 1390 02a1 09       		.uleb128 0x9
 1391 02a2 A3010000 		.4byte	.LASF47
 1392 02a6 08       		.byte	0x8
 1393 02a7 44       		.byte	0x44
 1394 02a8 68000000 		.4byte	0x68
 1395 02ac 18       		.byte	0x18
 1396 02ad 09       		.uleb128 0x9
 1397 02ae 58030000 		.4byte	.LASF48
 1398 02b2 08       		.byte	0x8
 1399 02b3 45       		.byte	0x45
 1400 02b4 68000000 		.4byte	0x68
 1401 02b8 1C       		.byte	0x1c
 1402 02b9 00       		.byte	0
 1403 02ba 03       		.uleb128 0x3
 1404 02bb DB040000 		.4byte	.LASF49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 30


 1405 02bf 08       		.byte	0x8
 1406 02c0 47       		.byte	0x47
 1407 02c1 51020000 		.4byte	0x251
 1408 02c5 0A       		.uleb128 0xa
 1409 02c6 07       		.byte	0x7
 1410 02c7 08       		.byte	0x8
 1411 02c8 53       		.byte	0x53
 1412 02c9 22030000 		.4byte	0x322
 1413 02cd 09       		.uleb128 0x9
 1414 02ce 4C020000 		.4byte	.LASF50
 1415 02d2 08       		.byte	0x8
 1416 02d3 55       		.byte	0x55
 1417 02d4 81000000 		.4byte	0x81
 1418 02d8 00       		.byte	0
 1419 02d9 09       		.uleb128 0x9
 1420 02da F8050000 		.4byte	.LASF51
 1421 02de 08       		.byte	0x8
 1422 02df 57       		.byte	0x57
 1423 02e0 22030000 		.4byte	0x322
 1424 02e4 01       		.byte	0x1
 1425 02e5 09       		.uleb128 0x9
 1426 02e6 0C060000 		.4byte	.LASF52
 1427 02ea 08       		.byte	0x8
 1428 02eb 59       		.byte	0x59
 1429 02ec 81000000 		.4byte	0x81
 1430 02f0 02       		.byte	0x2
 1431 02f1 09       		.uleb128 0x9
 1432 02f2 8E040000 		.4byte	.LASF53
 1433 02f6 08       		.byte	0x8
 1434 02f7 5B       		.byte	0x5b
 1435 02f8 81000000 		.4byte	0x81
 1436 02fc 03       		.byte	0x3
 1437 02fd 09       		.uleb128 0x9
 1438 02fe 90020000 		.4byte	.LASF54
 1439 0302 08       		.byte	0x8
 1440 0303 5E       		.byte	0x5e
 1441 0304 81000000 		.4byte	0x81
 1442 0308 04       		.byte	0x4
 1443 0309 09       		.uleb128 0x9
 1444 030a BE050000 		.4byte	.LASF55
 1445 030e 08       		.byte	0x8
 1446 030f 63       		.byte	0x63
 1447 0310 81000000 		.4byte	0x81
 1448 0314 05       		.byte	0x5
 1449 0315 09       		.uleb128 0x9
 1450 0316 11050000 		.4byte	.LASF56
 1451 031a 08       		.byte	0x8
 1452 031b 65       		.byte	0x65
 1453 031c 81000000 		.4byte	0x81
 1454 0320 06       		.byte	0x6
 1455 0321 00       		.byte	0
 1456 0322 02       		.uleb128 0x2
 1457 0323 01       		.byte	0x1
 1458 0324 02       		.byte	0x2
 1459 0325 43040000 		.4byte	.LASF57
 1460 0329 03       		.uleb128 0x3
 1461 032a 13010000 		.4byte	.LASF58
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 31


 1462 032e 08       		.byte	0x8
 1463 032f 67       		.byte	0x67
 1464 0330 C5020000 		.4byte	0x2c5
 1465 0334 0A       		.uleb128 0xa
 1466 0335 06       		.byte	0x6
 1467 0336 09       		.byte	0x9
 1468 0337 2E       		.byte	0x2e
 1469 0338 6D030000 		.4byte	0x36d
 1470 033c 09       		.uleb128 0x9
 1471 033d 73020000 		.4byte	.LASF59
 1472 0341 09       		.byte	0x9
 1473 0342 30       		.byte	0x30
 1474 0343 8D000000 		.4byte	0x8d
 1475 0347 00       		.byte	0
 1476 0348 09       		.uleb128 0x9
 1477 0349 02020000 		.4byte	.LASF60
 1478 034d 09       		.byte	0x9
 1479 034e 31       		.byte	0x31
 1480 034f 99000000 		.4byte	0x99
 1481 0353 02       		.byte	0x2
 1482 0354 09       		.uleb128 0x9
 1483 0355 EA050000 		.4byte	.LASF61
 1484 0359 09       		.byte	0x9
 1485 035a 32       		.byte	0x32
 1486 035b 81000000 		.4byte	0x81
 1487 035f 04       		.byte	0x4
 1488 0360 09       		.uleb128 0x9
 1489 0361 56000000 		.4byte	.LASF62
 1490 0365 09       		.byte	0x9
 1491 0366 33       		.byte	0x33
 1492 0367 81000000 		.4byte	0x81
 1493 036b 05       		.byte	0x5
 1494 036c 00       		.byte	0
 1495 036d 03       		.uleb128 0x3
 1496 036e 18020000 		.4byte	.LASF63
 1497 0372 09       		.byte	0x9
 1498 0373 36       		.byte	0x36
 1499 0374 78030000 		.4byte	0x378
 1500 0378 0C       		.uleb128 0xc
 1501 0379 34030000 		.4byte	0x334
 1502 037d 0A       		.uleb128 0xa
 1503 037e 1C       		.byte	0x1c
 1504 037f 09       		.byte	0x9
 1505 0380 39       		.byte	0x39
 1506 0381 9E030000 		.4byte	0x39e
 1507 0385 09       		.uleb128 0x9
 1508 0386 21030000 		.4byte	.LASF64
 1509 038a 09       		.byte	0x9
 1510 038b 3B       		.byte	0x3b
 1511 038c 9E030000 		.4byte	0x39e
 1512 0390 00       		.byte	0
 1513 0391 09       		.uleb128 0x9
 1514 0392 5C020000 		.4byte	.LASF65
 1515 0396 09       		.byte	0x9
 1516 0397 3C       		.byte	0x3c
 1517 0398 D4000000 		.4byte	0xd4
 1518 039c 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 32


 1519 039d 00       		.byte	0
 1520 039e 0D       		.uleb128 0xd
 1521 039f 04       		.byte	0x4
 1522 03a0 46020000 		.4byte	0x246
 1523 03a4 03       		.uleb128 0x3
 1524 03a5 A2030000 		.4byte	.LASF66
 1525 03a9 09       		.byte	0x9
 1526 03aa 3E       		.byte	0x3e
 1527 03ab 7D030000 		.4byte	0x37d
 1528 03af 0A       		.uleb128 0xa
 1529 03b0 68       		.byte	0x68
 1530 03b1 09       		.byte	0x9
 1531 03b2 44       		.byte	0x44
 1532 03b3 D0030000 		.4byte	0x3d0
 1533 03b7 09       		.uleb128 0x9
 1534 03b8 2C030000 		.4byte	.LASF67
 1535 03bc 09       		.byte	0x9
 1536 03bd 49       		.byte	0x49
 1537 03be D0030000 		.4byte	0x3d0
 1538 03c2 00       		.byte	0
 1539 03c3 09       		.uleb128 0x9
 1540 03c4 19030000 		.4byte	.LASF68
 1541 03c8 09       		.byte	0x9
 1542 03c9 4A       		.byte	0x4a
 1543 03ca 68000000 		.4byte	0x68
 1544 03ce 64       		.byte	0x64
 1545 03cf 00       		.byte	0
 1546 03d0 06       		.uleb128 0x6
 1547 03d1 BF000000 		.4byte	0xbf
 1548 03d5 E0030000 		.4byte	0x3e0
 1549 03d9 07       		.uleb128 0x7
 1550 03da CD000000 		.4byte	0xcd
 1551 03de 63       		.byte	0x63
 1552 03df 00       		.byte	0
 1553 03e0 03       		.uleb128 0x3
 1554 03e1 CB050000 		.4byte	.LASF69
 1555 03e5 09       		.byte	0x9
 1556 03e6 50       		.byte	0x50
 1557 03e7 AF030000 		.4byte	0x3af
 1558 03eb 0E       		.uleb128 0xe
 1559 03ec 88050000 		.4byte	.LASF74
 1560 03f0 01       		.byte	0x1
 1561 03f1 06       		.byte	0x6
 1562 03f2 82010000 		.4byte	0x182
 1563 03f6 00000000 		.4byte	.LFB64
 1564 03fa 34010000 		.4byte	.LFE64-.LFB64
 1565 03fe 01       		.uleb128 0x1
 1566 03ff 9C       		.byte	0x9c
 1567 0400 74040000 		.4byte	0x474
 1568 0404 0F       		.uleb128 0xf
 1569 0405 2A010000 		.4byte	.LASF70
 1570 0409 01       		.byte	0x1
 1571 040a 08       		.byte	0x8
 1572 040b 82010000 		.4byte	0x182
 1573 040f 02       		.uleb128 0x2
 1574 0410 91       		.byte	0x91
 1575 0411 54       		.sleb128 -44
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 33


 1576 0412 0F       		.uleb128 0xf
 1577 0413 EA010000 		.4byte	.LASF71
 1578 0417 01       		.byte	0x1
 1579 0418 15       		.byte	0x15
 1580 0419 74040000 		.4byte	0x474
 1581 041d 02       		.uleb128 0x2
 1582 041e 91       		.byte	0x91
 1583 041f 44       		.sleb128 -60
 1584 0420 0F       		.uleb128 0xf
 1585 0421 5C050000 		.4byte	.LASF72
 1586 0425 01       		.byte	0x1
 1587 0426 31       		.byte	0x31
 1588 0427 B1000000 		.4byte	0xb1
 1589 042b 02       		.uleb128 0x2
 1590 042c 91       		.byte	0x91
 1591 042d 68       		.sleb128 -24
 1592 042e 10       		.uleb128 0x10
 1593 042f 26000000 		.4byte	.LBB2
 1594 0433 7A000000 		.4byte	.LBE2-.LBB2
 1595 0437 11       		.uleb128 0x11
 1596 0438 6300     		.ascii	"c\000"
 1597 043a 01       		.byte	0x1
 1598 043b 17       		.byte	0x17
 1599 043c 81000000 		.4byte	0x81
 1600 0440 02       		.uleb128 0x2
 1601 0441 91       		.byte	0x91
 1602 0442 6F       		.sleb128 -17
 1603 0443 10       		.uleb128 0x10
 1604 0444 2E000000 		.4byte	.LBB3
 1605 0448 60000000 		.4byte	.LBE3-.LBB3
 1606 044c 0F       		.uleb128 0xf
 1607 044d BA040000 		.4byte	.LASF73
 1608 0451 01       		.byte	0x1
 1609 0452 1A       		.byte	0x1a
 1610 0453 84040000 		.4byte	0x484
 1611 0457 03       		.uleb128 0x3
 1612 0458 91       		.byte	0x91
 1613 0459 987F     		.sleb128 -104
 1614 045b 10       		.uleb128 0x10
 1615 045c 38000000 		.4byte	.LBB4
 1616 0460 30000000 		.4byte	.LBE4-.LBB4
 1617 0464 11       		.uleb128 0x11
 1618 0465 6900     		.ascii	"i\000"
 1619 0467 01       		.byte	0x1
 1620 0468 1E       		.byte	0x1e
 1621 0469 8D000000 		.4byte	0x8d
 1622 046d 02       		.uleb128 0x2
 1623 046e 91       		.byte	0x91
 1624 046f 6C       		.sleb128 -20
 1625 0470 00       		.byte	0
 1626 0471 00       		.byte	0
 1627 0472 00       		.byte	0
 1628 0473 00       		.byte	0
 1629 0474 06       		.uleb128 0x6
 1630 0475 B1000000 		.4byte	0xb1
 1631 0479 84040000 		.4byte	0x484
 1632 047d 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 34


 1633 047e CD000000 		.4byte	0xcd
 1634 0482 03       		.byte	0x3
 1635 0483 00       		.byte	0
 1636 0484 06       		.uleb128 0x6
 1637 0485 A5000000 		.4byte	0xa5
 1638 0489 94040000 		.4byte	0x494
 1639 048d 07       		.uleb128 0x7
 1640 048e CD000000 		.4byte	0xcd
 1641 0492 0A       		.byte	0xa
 1642 0493 00       		.byte	0
 1643 0494 0E       		.uleb128 0xe
 1644 0495 A2020000 		.4byte	.LASF75
 1645 0499 01       		.byte	0x1
 1646 049a 3E       		.byte	0x3e
 1647 049b C6010000 		.4byte	0x1c6
 1648 049f 00000000 		.4byte	.LFB65
 1649 04a3 98010000 		.4byte	.LFE65-.LFB65
 1650 04a7 01       		.uleb128 0x1
 1651 04a8 9C       		.byte	0x9c
 1652 04a9 09050000 		.4byte	0x509
 1653 04ad 0F       		.uleb128 0xf
 1654 04ae 16040000 		.4byte	.LASF76
 1655 04b2 01       		.byte	0x1
 1656 04b3 40       		.byte	0x40
 1657 04b4 C6010000 		.4byte	0x1c6
 1658 04b8 02       		.uleb128 0x2
 1659 04b9 91       		.byte	0x91
 1660 04ba 5C       		.sleb128 -36
 1661 04bb 0F       		.uleb128 0xf
 1662 04bc EA010000 		.4byte	.LASF71
 1663 04c0 01       		.byte	0x1
 1664 04c1 41       		.byte	0x41
 1665 04c2 74040000 		.4byte	0x474
 1666 04c6 02       		.uleb128 0x2
 1667 04c7 91       		.byte	0x91
 1668 04c8 4C       		.sleb128 -52
 1669 04c9 0F       		.uleb128 0xf
 1670 04ca BA040000 		.4byte	.LASF73
 1671 04ce 01       		.byte	0x1
 1672 04cf 42       		.byte	0x42
 1673 04d0 84040000 		.4byte	0x484
 1674 04d4 03       		.uleb128 0x3
 1675 04d5 91       		.byte	0x91
 1676 04d6 A07F     		.sleb128 -96
 1677 04d8 12       		.uleb128 0x12
 1678 04d9 1A000000 		.4byte	.LBB5
 1679 04dd 30000000 		.4byte	.LBE5-.LBB5
 1680 04e1 F2040000 		.4byte	0x4f2
 1681 04e5 11       		.uleb128 0x11
 1682 04e6 6900     		.ascii	"i\000"
 1683 04e8 01       		.byte	0x1
 1684 04e9 4C       		.byte	0x4c
 1685 04ea 8D000000 		.4byte	0x8d
 1686 04ee 02       		.uleb128 0x2
 1687 04ef 91       		.byte	0x91
 1688 04f0 6E       		.sleb128 -18
 1689 04f1 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 35


 1690 04f2 10       		.uleb128 0x10
 1691 04f3 8E000000 		.4byte	.LBB6
 1692 04f7 30000000 		.4byte	.LBE6-.LBB6
 1693 04fb 11       		.uleb128 0x11
 1694 04fc 6900     		.ascii	"i\000"
 1695 04fe 01       		.byte	0x1
 1696 04ff 59       		.byte	0x59
 1697 0500 8D000000 		.4byte	0x8d
 1698 0504 02       		.uleb128 0x2
 1699 0505 91       		.byte	0x91
 1700 0506 6C       		.sleb128 -20
 1701 0507 00       		.byte	0
 1702 0508 00       		.byte	0
 1703 0509 13       		.uleb128 0x13
 1704 050a 42030000 		.4byte	.LASF79
 1705 050e 01       		.byte	0x1
 1706 050f 74       		.byte	0x74
 1707 0510 C6010000 		.4byte	0x1c6
 1708 0514 00000000 		.4byte	.LFB66
 1709 0518 C4000000 		.4byte	.LFE66-.LFB66
 1710 051c 01       		.uleb128 0x1
 1711 051d 9C       		.byte	0x9c
 1712 051e 3F050000 		.4byte	0x53f
 1713 0522 14       		.uleb128 0x14
 1714 0523 2A010000 		.4byte	.LASF70
 1715 0527 01       		.byte	0x1
 1716 0528 74       		.byte	0x74
 1717 0529 82010000 		.4byte	0x182
 1718 052d 02       		.uleb128 0x2
 1719 052e 91       		.byte	0x91
 1720 052f 74       		.sleb128 -12
 1721 0530 0F       		.uleb128 0xf
 1722 0531 16040000 		.4byte	.LASF76
 1723 0535 01       		.byte	0x1
 1724 0536 76       		.byte	0x76
 1725 0537 C6010000 		.4byte	0x1c6
 1726 053b 02       		.uleb128 0x2
 1727 053c 91       		.byte	0x91
 1728 053d 50       		.sleb128 -48
 1729 053e 00       		.byte	0
 1730 053f 15       		.uleb128 0x15
 1731 0540 4F000000 		.4byte	.LASF77
 1732 0544 01       		.byte	0x1
 1733 0545 86       		.byte	0x86
 1734 0546 00000000 		.4byte	.LFB67
 1735 054a 74000000 		.4byte	.LFE67-.LFB67
 1736 054e 01       		.uleb128 0x1
 1737 054f 9C       		.byte	0x9c
 1738 0550 85050000 		.4byte	0x585
 1739 0554 16       		.uleb128 0x16
 1740 0555 6100     		.ascii	"a\000"
 1741 0557 01       		.byte	0x1
 1742 0558 86       		.byte	0x86
 1743 0559 85050000 		.4byte	0x585
 1744 055d 02       		.uleb128 0x2
 1745 055e 91       		.byte	0x91
 1746 055f 6C       		.sleb128 -20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 36


 1747 0560 16       		.uleb128 0x16
 1748 0561 6E00     		.ascii	"n\000"
 1749 0563 01       		.byte	0x1
 1750 0564 86       		.byte	0x86
 1751 0565 A5000000 		.4byte	0xa5
 1752 0569 02       		.uleb128 0x2
 1753 056a 91       		.byte	0x91
 1754 056b 68       		.sleb128 -24
 1755 056c 11       		.uleb128 0x11
 1756 056d 6900     		.ascii	"i\000"
 1757 056f 01       		.byte	0x1
 1758 0570 87       		.byte	0x87
 1759 0571 A5000000 		.4byte	0xa5
 1760 0575 02       		.uleb128 0x2
 1761 0576 91       		.byte	0x91
 1762 0577 74       		.sleb128 -12
 1763 0578 11       		.uleb128 0x11
 1764 0579 6A00     		.ascii	"j\000"
 1765 057b 01       		.byte	0x1
 1766 057c 87       		.byte	0x87
 1767 057d A5000000 		.4byte	0xa5
 1768 0581 02       		.uleb128 0x2
 1769 0582 91       		.byte	0x91
 1770 0583 70       		.sleb128 -16
 1771 0584 00       		.byte	0
 1772 0585 0D       		.uleb128 0xd
 1773 0586 04       		.byte	0x4
 1774 0587 A5000000 		.4byte	0xa5
 1775 058b 17       		.uleb128 0x17
 1776 058c 98040000 		.4byte	.LASF78
 1777 0590 01       		.byte	0x1
 1778 0591 92       		.byte	0x92
 1779 0592 00000000 		.4byte	.LFB68
 1780 0596 28000000 		.4byte	.LFE68-.LFB68
 1781 059a 01       		.uleb128 0x1
 1782 059b 9C       		.byte	0x9c
 1783 059c C5050000 		.4byte	0x5c5
 1784 05a0 16       		.uleb128 0x16
 1785 05a1 7000     		.ascii	"p\000"
 1786 05a3 01       		.byte	0x1
 1787 05a4 92       		.byte	0x92
 1788 05a5 85050000 		.4byte	0x585
 1789 05a9 02       		.uleb128 0x2
 1790 05aa 91       		.byte	0x91
 1791 05ab 6C       		.sleb128 -20
 1792 05ac 16       		.uleb128 0x16
 1793 05ad 7100     		.ascii	"q\000"
 1794 05af 01       		.byte	0x1
 1795 05b0 92       		.byte	0x92
 1796 05b1 85050000 		.4byte	0x585
 1797 05b5 02       		.uleb128 0x2
 1798 05b6 91       		.byte	0x91
 1799 05b7 68       		.sleb128 -24
 1800 05b8 11       		.uleb128 0x11
 1801 05b9 7400     		.ascii	"t\000"
 1802 05bb 01       		.byte	0x1
 1803 05bc 93       		.byte	0x93
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 37


 1804 05bd A5000000 		.4byte	0xa5
 1805 05c1 02       		.uleb128 0x2
 1806 05c2 91       		.byte	0x91
 1807 05c3 74       		.sleb128 -12
 1808 05c4 00       		.byte	0
 1809 05c5 13       		.uleb128 0x13
 1810 05c6 82020000 		.4byte	.LASF80
 1811 05ca 01       		.byte	0x1
 1812 05cb 9B       		.byte	0x9b
 1813 05cc A5000000 		.4byte	0xa5
 1814 05d0 00000000 		.4byte	.LFB69
 1815 05d4 84000000 		.4byte	.LFE69-.LFB69
 1816 05d8 01       		.uleb128 0x1
 1817 05d9 9C       		.byte	0x9c
 1818 05da 07060000 		.4byte	0x607
 1819 05de 14       		.uleb128 0x14
 1820 05df 56020000 		.4byte	.LASF81
 1821 05e3 01       		.byte	0x1
 1822 05e4 9B       		.byte	0x9b
 1823 05e5 85050000 		.4byte	0x585
 1824 05e9 02       		.uleb128 0x2
 1825 05ea 91       		.byte	0x91
 1826 05eb 64       		.sleb128 -28
 1827 05ec 16       		.uleb128 0x16
 1828 05ed 6E00     		.ascii	"n\000"
 1829 05ef 01       		.byte	0x1
 1830 05f0 9B       		.byte	0x9b
 1831 05f1 A5000000 		.4byte	0xa5
 1832 05f5 02       		.uleb128 0x2
 1833 05f6 91       		.byte	0x91
 1834 05f7 60       		.sleb128 -32
 1835 05f8 0F       		.uleb128 0xf
 1836 05f9 51010000 		.4byte	.LASF82
 1837 05fd 01       		.byte	0x1
 1838 05fe 9D       		.byte	0x9d
 1839 05ff A5000000 		.4byte	0xa5
 1840 0603 02       		.uleb128 0x2
 1841 0604 91       		.byte	0x91
 1842 0605 6C       		.sleb128 -20
 1843 0606 00       		.byte	0
 1844 0607 0E       		.uleb128 0xe
 1845 0608 AD030000 		.4byte	.LASF83
 1846 060c 01       		.byte	0x1
 1847 060d AD       		.byte	0xad
 1848 060e 32010000 		.4byte	0x132
 1849 0612 00000000 		.4byte	.LFB70
 1850 0616 BC000000 		.4byte	.LFE70-.LFB70
 1851 061a 01       		.uleb128 0x1
 1852 061b 9C       		.byte	0x9c
 1853 061c 3F060000 		.4byte	0x63f
 1854 0620 0F       		.uleb128 0xf
 1855 0621 32010000 		.4byte	.LASF84
 1856 0625 01       		.byte	0x1
 1857 0626 AF       		.byte	0xaf
 1858 0627 32010000 		.4byte	0x132
 1859 062b 03       		.uleb128 0x3
 1860 062c 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 38


 1861 062d E47C     		.sleb128 -412
 1862 062f 0F       		.uleb128 0xf
 1863 0630 2A010000 		.4byte	.LASF70
 1864 0634 01       		.byte	0x1
 1865 0635 B3       		.byte	0xb3
 1866 0636 82010000 		.4byte	0x182
 1867 063a 03       		.uleb128 0x3
 1868 063b 91       		.byte	0x91
 1869 063c D07C     		.sleb128 -432
 1870 063e 00       		.byte	0
 1871 063f 0E       		.uleb128 0xe
 1872 0640 5F040000 		.4byte	.LASF85
 1873 0644 01       		.byte	0x1
 1874 0645 C2       		.byte	0xc2
 1875 0646 32010000 		.4byte	0x132
 1876 064a 00000000 		.4byte	.LFB71
 1877 064e 04010000 		.4byte	.LFE71-.LFB71
 1878 0652 01       		.uleb128 0x1
 1879 0653 9C       		.byte	0x9c
 1880 0654 77060000 		.4byte	0x677
 1881 0658 0F       		.uleb128 0xf
 1882 0659 32010000 		.4byte	.LASF84
 1883 065d 01       		.byte	0x1
 1884 065e C4       		.byte	0xc4
 1885 065f 32010000 		.4byte	0x132
 1886 0663 03       		.uleb128 0x3
 1887 0664 91       		.byte	0x91
 1888 0665 E47C     		.sleb128 -412
 1889 0667 0F       		.uleb128 0xf
 1890 0668 16040000 		.4byte	.LASF76
 1891 066c 01       		.byte	0x1
 1892 066d C8       		.byte	0xc8
 1893 066e C6010000 		.4byte	0x1c6
 1894 0672 03       		.uleb128 0x3
 1895 0673 91       		.byte	0x91
 1896 0674 D47C     		.sleb128 -428
 1897 0676 00       		.byte	0
 1898 0677 18       		.uleb128 0x18
 1899 0678 44010000 		.4byte	.LASF86
 1900 067c 0A       		.byte	0xa
 1901 067d 1207     		.2byte	0x712
 1902 067f 83060000 		.4byte	0x683
 1903 0683 0C       		.uleb128 0xc
 1904 0684 76000000 		.4byte	0x76
 1905 0688 19       		.uleb128 0x19
 1906 0689 23050000 		.4byte	.LASF87
 1907 068d 0B       		.byte	0xb
 1908 068e 25       		.byte	0x25
 1909 068f D0030000 		.4byte	0x3d0
 1910 0693 05       		.uleb128 0x5
 1911 0694 03       		.byte	0x3
 1912 0695 00000000 		.4byte	level_sensor_inbox
 1913 0699 19       		.uleb128 0x19
 1914 069a 3F000000 		.4byte	.LASF88
 1915 069e 07       		.byte	0x7
 1916 069f 11       		.byte	0x11
 1917 06a0 22030000 		.4byte	0x322
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 39


 1918 06a4 05       		.uleb128 0x5
 1919 06a5 03       		.byte	0x3
 1920 06a6 00000000 		.4byte	buffer_overflow
 1921 06aa 19       		.uleb128 0x19
 1922 06ab BB030000 		.4byte	.LASF89
 1923 06af 07       		.byte	0x7
 1924 06b0 22       		.byte	0x22
 1925 06b1 8D000000 		.4byte	0x8d
 1926 06b5 05       		.uleb128 0x5
 1927 06b6 03       		.byte	0x3
 1928 06b7 00000000 		.4byte	dataPointsInStack
 1929 06bb 19       		.uleb128 0x19
 1930 06bc A5050000 		.4byte	.LASF90
 1931 06c0 07       		.byte	0x7
 1932 06c1 23       		.byte	0x23
 1933 06c2 8D000000 		.4byte	0x8d
 1934 06c6 05       		.uleb128 0x5
 1935 06c7 03       		.byte	0x3
 1936 06c8 00000000 		.4byte	dataPointsInStackDesired
 1937 06cc 06       		.uleb128 0x6
 1938 06cd 0E020000 		.4byte	0x20e
 1939 06d1 DC060000 		.4byte	0x6dc
 1940 06d5 07       		.uleb128 0x7
 1941 06d6 CD000000 		.4byte	0xcd
 1942 06da 95       		.byte	0x95
 1943 06db 00       		.byte	0
 1944 06dc 19       		.uleb128 0x19
 1945 06dd 14030000 		.4byte	.LASF91
 1946 06e1 07       		.byte	0x7
 1947 06e2 24       		.byte	0x24
 1948 06e3 CC060000 		.4byte	0x6cc
 1949 06e7 05       		.uleb128 0x5
 1950 06e8 03       		.byte	0x3
 1951 06e9 00000000 		.4byte	data
 1952 06ed 19       		.uleb128 0x19
 1953 06ee 2E060000 		.4byte	.LASF92
 1954 06f2 08       		.byte	0x8
 1955 06f3 20       		.byte	0x20
 1956 06f4 81000000 		.4byte	0x81
 1957 06f8 05       		.uleb128 0x5
 1958 06f9 03       		.byte	0x3
 1959 06fa 00000000 		.4byte	modem_state
 1960 06fe 19       		.uleb128 0x19
 1961 06ff 81030000 		.4byte	.LASF93
 1962 0703 08       		.byte	0x8
 1963 0704 6A       		.byte	0x6a
 1964 0705 A5000000 		.4byte	0xa5
 1965 0709 05       		.uleb128 0x5
 1966 070a 03       		.byte	0x3
 1967 070b 00000000 		.4byte	modem_start_time_stamp
 1968 070f 19       		.uleb128 0x19
 1969 0710 21030000 		.4byte	.LASF64
 1970 0714 08       		.byte	0x8
 1971 0715 6B       		.byte	0x6b
 1972 0716 46020000 		.4byte	0x246
 1973 071a 05       		.uleb128 0x5
 1974 071b 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 40


 1975 071c 00000000 		.4byte	modem_info
 1976 0720 19       		.uleb128 0x19
 1977 0721 6A010000 		.4byte	.LASF94
 1978 0725 08       		.byte	0x8
 1979 0726 6C       		.byte	0x6c
 1980 0727 BA020000 		.4byte	0x2ba
 1981 072b 05       		.uleb128 0x5
 1982 072c 03       		.byte	0x3
 1983 072d 00000000 		.4byte	modem_stats
 1984 0731 19       		.uleb128 0x19
 1985 0732 01040000 		.4byte	.LASF95
 1986 0736 08       		.byte	0x8
 1987 0737 6D       		.byte	0x6d
 1988 0738 29030000 		.4byte	0x329
 1989 073c 05       		.uleb128 0x5
 1990 073d 03       		.byte	0x3
 1991 073e 00000000 		.4byte	updatable_parameters
 1992 0742 19       		.uleb128 0x19
 1993 0743 20060000 		.4byte	.LASF96
 1994 0747 0C       		.byte	0xc
 1995 0748 12       		.byte	0x12
 1996 0749 D0030000 		.4byte	0x3d0
 1997 074d 05       		.uleb128 0x5
 1998 074e 03       		.byte	0x3
 1999 074f 00000000 		.4byte	app_led_inbox
 2000 0753 06       		.uleb128 0x6
 2001 0754 BF000000 		.4byte	0xbf
 2002 0758 64070000 		.4byte	0x764
 2003 075c 1A       		.uleb128 0x1a
 2004 075d CD000000 		.4byte	0xcd
 2005 0761 0F27     		.2byte	0x270f
 2006 0763 00       		.byte	0
 2007 0764 19       		.uleb128 0x19
 2008 0765 30040000 		.4byte	.LASF97
 2009 0769 09       		.byte	0x9
 2010 076a 18       		.byte	0x18
 2011 076b 53070000 		.4byte	0x753
 2012 076f 05       		.uleb128 0x5
 2013 0770 03       		.byte	0x3
 2014 0771 00000000 		.4byte	http_request
 2015 0775 19       		.uleb128 0x19
 2016 0776 DA050000 		.4byte	.LASF98
 2017 077a 09       		.byte	0x9
 2018 077b 19       		.byte	0x19
 2019 077c 53070000 		.4byte	0x753
 2020 0780 05       		.uleb128 0x5
 2021 0781 03       		.byte	0x3
 2022 0782 00000000 		.4byte	http_body
 2023 0786 06       		.uleb128 0x6
 2024 0787 BF000000 		.4byte	0xbf
 2025 078b 96070000 		.4byte	0x796
 2026 078f 07       		.uleb128 0x7
 2027 0790 CD000000 		.4byte	0xcd
 2028 0794 C7       		.byte	0xc7
 2029 0795 00       		.byte	0
 2030 0796 19       		.uleb128 0x19
 2031 0797 47050000 		.4byte	.LASF99
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 41


 2032 079b 09       		.byte	0x9
 2033 079c 1A       		.byte	0x1a
 2034 079d 86070000 		.4byte	0x786
 2035 07a1 05       		.uleb128 0x5
 2036 07a2 03       		.byte	0x3
 2037 07a3 00000000 		.4byte	http_route
 2038 07a7 19       		.uleb128 0x19
 2039 07a8 C3040000 		.4byte	.LASF100
 2040 07ac 09       		.byte	0x9
 2041 07ad 41       		.byte	0x41
 2042 07ae A4030000 		.4byte	0x3a4
 2043 07b2 05       		.uleb128 0x5
 2044 07b3 03       		.byte	0x3
 2045 07b4 00000000 		.4byte	system_info
 2046 07b8 19       		.uleb128 0x19
 2047 07b9 74040000 		.4byte	.LASF101
 2048 07bd 09       		.byte	0x9
 2049 07be 53       		.byte	0x53
 2050 07bf E0030000 		.4byte	0x3e0
 2051 07c3 05       		.uleb128 0x5
 2052 07c4 03       		.byte	0x3
 2053 07c5 00000000 		.4byte	system_settings
 2054 07c9 19       		.uleb128 0x19
 2055 07ca 37010000 		.4byte	.LASF102
 2056 07ce 09       		.byte	0x9
 2057 07cf 6F       		.byte	0x6f
 2058 07d0 6D030000 		.4byte	0x36d
 2059 07d4 05       		.uleb128 0x5
 2060 07d5 03       		.byte	0x3
 2061 07d6 00000000 		.4byte	alarmMeasure
 2062 07da 19       		.uleb128 0x19
 2063 07db 95010000 		.4byte	.LASF103
 2064 07df 09       		.byte	0x9
 2065 07e0 70       		.byte	0x70
 2066 07e1 81000000 		.4byte	0x81
 2067 07e5 05       		.uleb128 0x5
 2068 07e6 03       		.byte	0x3
 2069 07e7 00000000 		.4byte	timeToMeasure
 2070 07eb 19       		.uleb128 0x19
 2071 07ec BB020000 		.4byte	.LASF104
 2072 07f0 09       		.byte	0x9
 2073 07f1 71       		.byte	0x71
 2074 07f2 6D030000 		.4byte	0x36d
 2075 07f6 05       		.uleb128 0x5
 2076 07f7 03       		.byte	0x3
 2077 07f8 00000000 		.4byte	alarmSync
 2078 07fc 19       		.uleb128 0x19
 2079 07fd BB010000 		.4byte	.LASF105
 2080 0801 09       		.byte	0x9
 2081 0802 72       		.byte	0x72
 2082 0803 81000000 		.4byte	0x81
 2083 0807 05       		.uleb128 0x5
 2084 0808 03       		.byte	0x3
 2085 0809 00000000 		.4byte	timeToSync
 2086 080d 19       		.uleb128 0x19
 2087 080e E0030000 		.4byte	.LASF106
 2088 0812 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 42


 2089 0813 73       		.byte	0x73
 2090 0814 81000000 		.4byte	0x81
 2091 0818 05       		.uleb128 0x5
 2092 0819 03       		.byte	0x3
 2093 081a 00000000 		.4byte	timeToSycnRemoteParams
 2094 081e 1B       		.uleb128 0x1b
 2095 081f 68657900 		.ascii	"hey\000"
 2096 0823 09       		.byte	0x9
 2097 0824 74       		.byte	0x74
 2098 0825 81000000 		.4byte	0x81
 2099 0829 05       		.uleb128 0x5
 2100 082a 03       		.byte	0x3
 2101 082b 00000000 		.4byte	hey
 2102 082f 19       		.uleb128 0x19
 2103 0830 75030000 		.4byte	.LASF107
 2104 0834 09       		.byte	0x9
 2105 0835 77       		.byte	0x77
 2106 0836 6D030000 		.4byte	0x36d
 2107 083a 05       		.uleb128 0x5
 2108 083b 03       		.byte	0x3
 2109 083c 00000000 		.4byte	alarmAppLED
 2110 0840 19       		.uleb128 0x19
 2111 0841 39020000 		.4byte	.LASF108
 2112 0845 09       		.byte	0x9
 2113 0846 78       		.byte	0x78
 2114 0847 81000000 		.4byte	0x81
 2115 084b 05       		.uleb128 0x5
 2116 084c 03       		.byte	0x3
 2117 084d 00000000 		.4byte	timeToAppLED
 2118 0851 19       		.uleb128 0x19
 2119 0852 00050000 		.4byte	.LASF109
 2120 0856 09       		.byte	0x9
 2121 0857 7A       		.byte	0x7a
 2122 0858 6D030000 		.4byte	0x36d
 2123 085c 05       		.uleb128 0x5
 2124 085d 03       		.byte	0x3
 2125 085e 00000000 		.4byte	alarmLevelSensor
 2126 0862 19       		.uleb128 0x19
 2127 0863 58010000 		.4byte	.LASF110
 2128 0867 09       		.byte	0x9
 2129 0868 7B       		.byte	0x7b
 2130 0869 81000000 		.4byte	0x81
 2131 086d 05       		.uleb128 0x5
 2132 086e 03       		.byte	0x3
 2133 086f 00000000 		.4byte	timetoLevelSensor
 2134 0873 00       		.byte	0
 2135              		.section	.debug_abbrev,"",%progbits
 2136              	.Ldebug_abbrev0:
 2137 0000 01       		.uleb128 0x1
 2138 0001 11       		.uleb128 0x11
 2139 0002 01       		.byte	0x1
 2140 0003 25       		.uleb128 0x25
 2141 0004 0E       		.uleb128 0xe
 2142 0005 13       		.uleb128 0x13
 2143 0006 0B       		.uleb128 0xb
 2144 0007 03       		.uleb128 0x3
 2145 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 43


 2146 0009 1B       		.uleb128 0x1b
 2147 000a 0E       		.uleb128 0xe
 2148 000b 55       		.uleb128 0x55
 2149 000c 17       		.uleb128 0x17
 2150 000d 11       		.uleb128 0x11
 2151 000e 01       		.uleb128 0x1
 2152 000f 10       		.uleb128 0x10
 2153 0010 17       		.uleb128 0x17
 2154 0011 00       		.byte	0
 2155 0012 00       		.byte	0
 2156 0013 02       		.uleb128 0x2
 2157 0014 24       		.uleb128 0x24
 2158 0015 00       		.byte	0
 2159 0016 0B       		.uleb128 0xb
 2160 0017 0B       		.uleb128 0xb
 2161 0018 3E       		.uleb128 0x3e
 2162 0019 0B       		.uleb128 0xb
 2163 001a 03       		.uleb128 0x3
 2164 001b 0E       		.uleb128 0xe
 2165 001c 00       		.byte	0
 2166 001d 00       		.byte	0
 2167 001e 03       		.uleb128 0x3
 2168 001f 16       		.uleb128 0x16
 2169 0020 00       		.byte	0
 2170 0021 03       		.uleb128 0x3
 2171 0022 0E       		.uleb128 0xe
 2172 0023 3A       		.uleb128 0x3a
 2173 0024 0B       		.uleb128 0xb
 2174 0025 3B       		.uleb128 0x3b
 2175 0026 0B       		.uleb128 0xb
 2176 0027 49       		.uleb128 0x49
 2177 0028 13       		.uleb128 0x13
 2178 0029 00       		.byte	0
 2179 002a 00       		.byte	0
 2180 002b 04       		.uleb128 0x4
 2181 002c 24       		.uleb128 0x24
 2182 002d 00       		.byte	0
 2183 002e 0B       		.uleb128 0xb
 2184 002f 0B       		.uleb128 0xb
 2185 0030 3E       		.uleb128 0x3e
 2186 0031 0B       		.uleb128 0xb
 2187 0032 03       		.uleb128 0x3
 2188 0033 08       		.uleb128 0x8
 2189 0034 00       		.byte	0
 2190 0035 00       		.byte	0
 2191 0036 05       		.uleb128 0x5
 2192 0037 16       		.uleb128 0x16
 2193 0038 00       		.byte	0
 2194 0039 03       		.uleb128 0x3
 2195 003a 0E       		.uleb128 0xe
 2196 003b 3A       		.uleb128 0x3a
 2197 003c 0B       		.uleb128 0xb
 2198 003d 3B       		.uleb128 0x3b
 2199 003e 05       		.uleb128 0x5
 2200 003f 49       		.uleb128 0x49
 2201 0040 13       		.uleb128 0x13
 2202 0041 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 44


 2203 0042 00       		.byte	0
 2204 0043 06       		.uleb128 0x6
 2205 0044 01       		.uleb128 0x1
 2206 0045 01       		.byte	0x1
 2207 0046 49       		.uleb128 0x49
 2208 0047 13       		.uleb128 0x13
 2209 0048 01       		.uleb128 0x1
 2210 0049 13       		.uleb128 0x13
 2211 004a 00       		.byte	0
 2212 004b 00       		.byte	0
 2213 004c 07       		.uleb128 0x7
 2214 004d 21       		.uleb128 0x21
 2215 004e 00       		.byte	0
 2216 004f 49       		.uleb128 0x49
 2217 0050 13       		.uleb128 0x13
 2218 0051 2F       		.uleb128 0x2f
 2219 0052 0B       		.uleb128 0xb
 2220 0053 00       		.byte	0
 2221 0054 00       		.byte	0
 2222 0055 08       		.uleb128 0x8
 2223 0056 13       		.uleb128 0x13
 2224 0057 01       		.byte	0x1
 2225 0058 0B       		.uleb128 0xb
 2226 0059 05       		.uleb128 0x5
 2227 005a 3A       		.uleb128 0x3a
 2228 005b 0B       		.uleb128 0xb
 2229 005c 3B       		.uleb128 0x3b
 2230 005d 0B       		.uleb128 0xb
 2231 005e 01       		.uleb128 0x1
 2232 005f 13       		.uleb128 0x13
 2233 0060 00       		.byte	0
 2234 0061 00       		.byte	0
 2235 0062 09       		.uleb128 0x9
 2236 0063 0D       		.uleb128 0xd
 2237 0064 00       		.byte	0
 2238 0065 03       		.uleb128 0x3
 2239 0066 0E       		.uleb128 0xe
 2240 0067 3A       		.uleb128 0x3a
 2241 0068 0B       		.uleb128 0xb
 2242 0069 3B       		.uleb128 0x3b
 2243 006a 0B       		.uleb128 0xb
 2244 006b 49       		.uleb128 0x49
 2245 006c 13       		.uleb128 0x13
 2246 006d 38       		.uleb128 0x38
 2247 006e 0B       		.uleb128 0xb
 2248 006f 00       		.byte	0
 2249 0070 00       		.byte	0
 2250 0071 0A       		.uleb128 0xa
 2251 0072 13       		.uleb128 0x13
 2252 0073 01       		.byte	0x1
 2253 0074 0B       		.uleb128 0xb
 2254 0075 0B       		.uleb128 0xb
 2255 0076 3A       		.uleb128 0x3a
 2256 0077 0B       		.uleb128 0xb
 2257 0078 3B       		.uleb128 0x3b
 2258 0079 0B       		.uleb128 0xb
 2259 007a 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 45


 2260 007b 13       		.uleb128 0x13
 2261 007c 00       		.byte	0
 2262 007d 00       		.byte	0
 2263 007e 0B       		.uleb128 0xb
 2264 007f 0D       		.uleb128 0xd
 2265 0080 00       		.byte	0
 2266 0081 03       		.uleb128 0x3
 2267 0082 08       		.uleb128 0x8
 2268 0083 3A       		.uleb128 0x3a
 2269 0084 0B       		.uleb128 0xb
 2270 0085 3B       		.uleb128 0x3b
 2271 0086 0B       		.uleb128 0xb
 2272 0087 49       		.uleb128 0x49
 2273 0088 13       		.uleb128 0x13
 2274 0089 38       		.uleb128 0x38
 2275 008a 0B       		.uleb128 0xb
 2276 008b 00       		.byte	0
 2277 008c 00       		.byte	0
 2278 008d 0C       		.uleb128 0xc
 2279 008e 35       		.uleb128 0x35
 2280 008f 00       		.byte	0
 2281 0090 49       		.uleb128 0x49
 2282 0091 13       		.uleb128 0x13
 2283 0092 00       		.byte	0
 2284 0093 00       		.byte	0
 2285 0094 0D       		.uleb128 0xd
 2286 0095 0F       		.uleb128 0xf
 2287 0096 00       		.byte	0
 2288 0097 0B       		.uleb128 0xb
 2289 0098 0B       		.uleb128 0xb
 2290 0099 49       		.uleb128 0x49
 2291 009a 13       		.uleb128 0x13
 2292 009b 00       		.byte	0
 2293 009c 00       		.byte	0
 2294 009d 0E       		.uleb128 0xe
 2295 009e 2E       		.uleb128 0x2e
 2296 009f 01       		.byte	0x1
 2297 00a0 3F       		.uleb128 0x3f
 2298 00a1 19       		.uleb128 0x19
 2299 00a2 03       		.uleb128 0x3
 2300 00a3 0E       		.uleb128 0xe
 2301 00a4 3A       		.uleb128 0x3a
 2302 00a5 0B       		.uleb128 0xb
 2303 00a6 3B       		.uleb128 0x3b
 2304 00a7 0B       		.uleb128 0xb
 2305 00a8 49       		.uleb128 0x49
 2306 00a9 13       		.uleb128 0x13
 2307 00aa 11       		.uleb128 0x11
 2308 00ab 01       		.uleb128 0x1
 2309 00ac 12       		.uleb128 0x12
 2310 00ad 06       		.uleb128 0x6
 2311 00ae 40       		.uleb128 0x40
 2312 00af 18       		.uleb128 0x18
 2313 00b0 9642     		.uleb128 0x2116
 2314 00b2 19       		.uleb128 0x19
 2315 00b3 01       		.uleb128 0x1
 2316 00b4 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 46


 2317 00b5 00       		.byte	0
 2318 00b6 00       		.byte	0
 2319 00b7 0F       		.uleb128 0xf
 2320 00b8 34       		.uleb128 0x34
 2321 00b9 00       		.byte	0
 2322 00ba 03       		.uleb128 0x3
 2323 00bb 0E       		.uleb128 0xe
 2324 00bc 3A       		.uleb128 0x3a
 2325 00bd 0B       		.uleb128 0xb
 2326 00be 3B       		.uleb128 0x3b
 2327 00bf 0B       		.uleb128 0xb
 2328 00c0 49       		.uleb128 0x49
 2329 00c1 13       		.uleb128 0x13
 2330 00c2 02       		.uleb128 0x2
 2331 00c3 18       		.uleb128 0x18
 2332 00c4 00       		.byte	0
 2333 00c5 00       		.byte	0
 2334 00c6 10       		.uleb128 0x10
 2335 00c7 0B       		.uleb128 0xb
 2336 00c8 01       		.byte	0x1
 2337 00c9 11       		.uleb128 0x11
 2338 00ca 01       		.uleb128 0x1
 2339 00cb 12       		.uleb128 0x12
 2340 00cc 06       		.uleb128 0x6
 2341 00cd 00       		.byte	0
 2342 00ce 00       		.byte	0
 2343 00cf 11       		.uleb128 0x11
 2344 00d0 34       		.uleb128 0x34
 2345 00d1 00       		.byte	0
 2346 00d2 03       		.uleb128 0x3
 2347 00d3 08       		.uleb128 0x8
 2348 00d4 3A       		.uleb128 0x3a
 2349 00d5 0B       		.uleb128 0xb
 2350 00d6 3B       		.uleb128 0x3b
 2351 00d7 0B       		.uleb128 0xb
 2352 00d8 49       		.uleb128 0x49
 2353 00d9 13       		.uleb128 0x13
 2354 00da 02       		.uleb128 0x2
 2355 00db 18       		.uleb128 0x18
 2356 00dc 00       		.byte	0
 2357 00dd 00       		.byte	0
 2358 00de 12       		.uleb128 0x12
 2359 00df 0B       		.uleb128 0xb
 2360 00e0 01       		.byte	0x1
 2361 00e1 11       		.uleb128 0x11
 2362 00e2 01       		.uleb128 0x1
 2363 00e3 12       		.uleb128 0x12
 2364 00e4 06       		.uleb128 0x6
 2365 00e5 01       		.uleb128 0x1
 2366 00e6 13       		.uleb128 0x13
 2367 00e7 00       		.byte	0
 2368 00e8 00       		.byte	0
 2369 00e9 13       		.uleb128 0x13
 2370 00ea 2E       		.uleb128 0x2e
 2371 00eb 01       		.byte	0x1
 2372 00ec 3F       		.uleb128 0x3f
 2373 00ed 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 47


 2374 00ee 03       		.uleb128 0x3
 2375 00ef 0E       		.uleb128 0xe
 2376 00f0 3A       		.uleb128 0x3a
 2377 00f1 0B       		.uleb128 0xb
 2378 00f2 3B       		.uleb128 0x3b
 2379 00f3 0B       		.uleb128 0xb
 2380 00f4 27       		.uleb128 0x27
 2381 00f5 19       		.uleb128 0x19
 2382 00f6 49       		.uleb128 0x49
 2383 00f7 13       		.uleb128 0x13
 2384 00f8 11       		.uleb128 0x11
 2385 00f9 01       		.uleb128 0x1
 2386 00fa 12       		.uleb128 0x12
 2387 00fb 06       		.uleb128 0x6
 2388 00fc 40       		.uleb128 0x40
 2389 00fd 18       		.uleb128 0x18
 2390 00fe 9642     		.uleb128 0x2116
 2391 0100 19       		.uleb128 0x19
 2392 0101 01       		.uleb128 0x1
 2393 0102 13       		.uleb128 0x13
 2394 0103 00       		.byte	0
 2395 0104 00       		.byte	0
 2396 0105 14       		.uleb128 0x14
 2397 0106 05       		.uleb128 0x5
 2398 0107 00       		.byte	0
 2399 0108 03       		.uleb128 0x3
 2400 0109 0E       		.uleb128 0xe
 2401 010a 3A       		.uleb128 0x3a
 2402 010b 0B       		.uleb128 0xb
 2403 010c 3B       		.uleb128 0x3b
 2404 010d 0B       		.uleb128 0xb
 2405 010e 49       		.uleb128 0x49
 2406 010f 13       		.uleb128 0x13
 2407 0110 02       		.uleb128 0x2
 2408 0111 18       		.uleb128 0x18
 2409 0112 00       		.byte	0
 2410 0113 00       		.byte	0
 2411 0114 15       		.uleb128 0x15
 2412 0115 2E       		.uleb128 0x2e
 2413 0116 01       		.byte	0x1
 2414 0117 3F       		.uleb128 0x3f
 2415 0118 19       		.uleb128 0x19
 2416 0119 03       		.uleb128 0x3
 2417 011a 0E       		.uleb128 0xe
 2418 011b 3A       		.uleb128 0x3a
 2419 011c 0B       		.uleb128 0xb
 2420 011d 3B       		.uleb128 0x3b
 2421 011e 0B       		.uleb128 0xb
 2422 011f 27       		.uleb128 0x27
 2423 0120 19       		.uleb128 0x19
 2424 0121 11       		.uleb128 0x11
 2425 0122 01       		.uleb128 0x1
 2426 0123 12       		.uleb128 0x12
 2427 0124 06       		.uleb128 0x6
 2428 0125 40       		.uleb128 0x40
 2429 0126 18       		.uleb128 0x18
 2430 0127 9642     		.uleb128 0x2116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 48


 2431 0129 19       		.uleb128 0x19
 2432 012a 01       		.uleb128 0x1
 2433 012b 13       		.uleb128 0x13
 2434 012c 00       		.byte	0
 2435 012d 00       		.byte	0
 2436 012e 16       		.uleb128 0x16
 2437 012f 05       		.uleb128 0x5
 2438 0130 00       		.byte	0
 2439 0131 03       		.uleb128 0x3
 2440 0132 08       		.uleb128 0x8
 2441 0133 3A       		.uleb128 0x3a
 2442 0134 0B       		.uleb128 0xb
 2443 0135 3B       		.uleb128 0x3b
 2444 0136 0B       		.uleb128 0xb
 2445 0137 49       		.uleb128 0x49
 2446 0138 13       		.uleb128 0x13
 2447 0139 02       		.uleb128 0x2
 2448 013a 18       		.uleb128 0x18
 2449 013b 00       		.byte	0
 2450 013c 00       		.byte	0
 2451 013d 17       		.uleb128 0x17
 2452 013e 2E       		.uleb128 0x2e
 2453 013f 01       		.byte	0x1
 2454 0140 3F       		.uleb128 0x3f
 2455 0141 19       		.uleb128 0x19
 2456 0142 03       		.uleb128 0x3
 2457 0143 0E       		.uleb128 0xe
 2458 0144 3A       		.uleb128 0x3a
 2459 0145 0B       		.uleb128 0xb
 2460 0146 3B       		.uleb128 0x3b
 2461 0147 0B       		.uleb128 0xb
 2462 0148 27       		.uleb128 0x27
 2463 0149 19       		.uleb128 0x19
 2464 014a 11       		.uleb128 0x11
 2465 014b 01       		.uleb128 0x1
 2466 014c 12       		.uleb128 0x12
 2467 014d 06       		.uleb128 0x6
 2468 014e 40       		.uleb128 0x40
 2469 014f 18       		.uleb128 0x18
 2470 0150 9742     		.uleb128 0x2117
 2471 0152 19       		.uleb128 0x19
 2472 0153 01       		.uleb128 0x1
 2473 0154 13       		.uleb128 0x13
 2474 0155 00       		.byte	0
 2475 0156 00       		.byte	0
 2476 0157 18       		.uleb128 0x18
 2477 0158 34       		.uleb128 0x34
 2478 0159 00       		.byte	0
 2479 015a 03       		.uleb128 0x3
 2480 015b 0E       		.uleb128 0xe
 2481 015c 3A       		.uleb128 0x3a
 2482 015d 0B       		.uleb128 0xb
 2483 015e 3B       		.uleb128 0x3b
 2484 015f 05       		.uleb128 0x5
 2485 0160 49       		.uleb128 0x49
 2486 0161 13       		.uleb128 0x13
 2487 0162 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 49


 2488 0163 19       		.uleb128 0x19
 2489 0164 3C       		.uleb128 0x3c
 2490 0165 19       		.uleb128 0x19
 2491 0166 00       		.byte	0
 2492 0167 00       		.byte	0
 2493 0168 19       		.uleb128 0x19
 2494 0169 34       		.uleb128 0x34
 2495 016a 00       		.byte	0
 2496 016b 03       		.uleb128 0x3
 2497 016c 0E       		.uleb128 0xe
 2498 016d 3A       		.uleb128 0x3a
 2499 016e 0B       		.uleb128 0xb
 2500 016f 3B       		.uleb128 0x3b
 2501 0170 0B       		.uleb128 0xb
 2502 0171 49       		.uleb128 0x49
 2503 0172 13       		.uleb128 0x13
 2504 0173 3F       		.uleb128 0x3f
 2505 0174 19       		.uleb128 0x19
 2506 0175 02       		.uleb128 0x2
 2507 0176 18       		.uleb128 0x18
 2508 0177 00       		.byte	0
 2509 0178 00       		.byte	0
 2510 0179 1A       		.uleb128 0x1a
 2511 017a 21       		.uleb128 0x21
 2512 017b 00       		.byte	0
 2513 017c 49       		.uleb128 0x49
 2514 017d 13       		.uleb128 0x13
 2515 017e 2F       		.uleb128 0x2f
 2516 017f 05       		.uleb128 0x5
 2517 0180 00       		.byte	0
 2518 0181 00       		.byte	0
 2519 0182 1B       		.uleb128 0x1b
 2520 0183 34       		.uleb128 0x34
 2521 0184 00       		.byte	0
 2522 0185 03       		.uleb128 0x3
 2523 0186 08       		.uleb128 0x8
 2524 0187 3A       		.uleb128 0x3a
 2525 0188 0B       		.uleb128 0xb
 2526 0189 3B       		.uleb128 0x3b
 2527 018a 0B       		.uleb128 0xb
 2528 018b 49       		.uleb128 0x49
 2529 018c 13       		.uleb128 0x13
 2530 018d 3F       		.uleb128 0x3f
 2531 018e 19       		.uleb128 0x19
 2532 018f 02       		.uleb128 0x2
 2533 0190 18       		.uleb128 0x18
 2534 0191 00       		.byte	0
 2535 0192 00       		.byte	0
 2536 0193 00       		.byte	0
 2537              		.section	.debug_aranges,"",%progbits
 2538 0000 54000000 		.4byte	0x54
 2539 0004 0200     		.2byte	0x2
 2540 0006 00000000 		.4byte	.Ldebug_info0
 2541 000a 04       		.byte	0x4
 2542 000b 00       		.byte	0
 2543 000c 0000     		.2byte	0
 2544 000e 0000     		.2byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 50


 2545 0010 00000000 		.4byte	.LFB64
 2546 0014 34010000 		.4byte	.LFE64-.LFB64
 2547 0018 00000000 		.4byte	.LFB65
 2548 001c 98010000 		.4byte	.LFE65-.LFB65
 2549 0020 00000000 		.4byte	.LFB66
 2550 0024 C4000000 		.4byte	.LFE66-.LFB66
 2551 0028 00000000 		.4byte	.LFB67
 2552 002c 74000000 		.4byte	.LFE67-.LFB67
 2553 0030 00000000 		.4byte	.LFB68
 2554 0034 28000000 		.4byte	.LFE68-.LFB68
 2555 0038 00000000 		.4byte	.LFB69
 2556 003c 84000000 		.4byte	.LFE69-.LFB69
 2557 0040 00000000 		.4byte	.LFB70
 2558 0044 BC000000 		.4byte	.LFE70-.LFB70
 2559 0048 00000000 		.4byte	.LFB71
 2560 004c 04010000 		.4byte	.LFE71-.LFB71
 2561 0050 00000000 		.4byte	0
 2562 0054 00000000 		.4byte	0
 2563              		.section	.debug_ranges,"",%progbits
 2564              	.Ldebug_ranges0:
 2565 0000 00000000 		.4byte	.LFB64
 2566 0004 34010000 		.4byte	.LFE64
 2567 0008 00000000 		.4byte	.LFB65
 2568 000c 98010000 		.4byte	.LFE65
 2569 0010 00000000 		.4byte	.LFB66
 2570 0014 C4000000 		.4byte	.LFE66
 2571 0018 00000000 		.4byte	.LFB67
 2572 001c 74000000 		.4byte	.LFE67
 2573 0020 00000000 		.4byte	.LFB68
 2574 0024 28000000 		.4byte	.LFE68
 2575 0028 00000000 		.4byte	.LFB69
 2576 002c 84000000 		.4byte	.LFE69
 2577 0030 00000000 		.4byte	.LFB70
 2578 0034 BC000000 		.4byte	.LFE70
 2579 0038 00000000 		.4byte	.LFB71
 2580 003c 04010000 		.4byte	.LFE71
 2581 0040 00000000 		.4byte	0
 2582 0044 00000000 		.4byte	0
 2583              		.section	.debug_line,"",%progbits
 2584              	.Ldebug_line0:
 2585 0000 F2020000 		.section	.debug_str,"MS",%progbits,1
 2585      0200AD01 
 2585      00000201 
 2585      FB0E0D00 
 2585      01010101 
 2586              	.LASF12:
 2587 0000 75696E74 		.ascii	"uint16\000"
 2587      313600
 2588              	.LASF113:
 2589 0007 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2589      73657273 
 2589      5C64616E 
 2589      747A5C44 
 2589      6F63756D 
 2590 0034 72694F53 		.ascii	"riOS.cydsn\000"
 2590      2E637964 
 2590      736E00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 51


 2591              	.LASF88:
 2592 003f 62756666 		.ascii	"buffer_overflow\000"
 2592      65725F6F 
 2592      76657266 
 2592      6C6F7700 
 2593              	.LASF77:
 2594 004f 736F7274 		.ascii	"sort32\000"
 2594      333200
 2595              	.LASF62:
 2596 0056 636F756E 		.ascii	"countDownResetCondition\000"
 2596      74446F77 
 2596      6E526573 
 2596      6574436F 
 2596      6E646974 
 2597              	.LASF111:
 2598 006e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2598      43313120 
 2598      352E342E 
 2598      31203230 
 2598      31363036 
 2599 00a1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2599      20726576 
 2599      6973696F 
 2599      6E203233 
 2599      37373135 
 2600 00d4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2600      66756E63 
 2600      74696F6E 
 2600      2D736563 
 2600      74696F6E 
 2601              	.LASF7:
 2602 00fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 2602      206C6F6E 
 2602      6720756E 
 2602      7369676E 
 2602      65642069 
 2603              	.LASF58:
 2604 0113 75706461 		.ascii	"updatable_parameters_t\000"
 2604      7461626C 
 2604      655F7061 
 2604      72616D65 
 2604      74657273 
 2605              	.LASF70:
 2606 012a 766F6C74 		.ascii	"voltage\000"
 2606      61676500 
 2607              	.LASF84:
 2608 0132 74657374 		.ascii	"test\000"
 2608      00
 2609              	.LASF102:
 2610 0137 616C6172 		.ascii	"alarmMeasure\000"
 2610      6D4D6561 
 2610      73757265 
 2610      00
 2611              	.LASF86:
 2612 0144 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2612      52784275 
 2612      66666572 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 52


 2612      00
 2613              	.LASF82:
 2614 0151 6D656469 		.ascii	"median\000"
 2614      616E00
 2615              	.LASF110:
 2616 0158 74696D65 		.ascii	"timetoLevelSensor\000"
 2616      746F4C65 
 2616      76656C53 
 2616      656E736F 
 2616      7200
 2617              	.LASF94:
 2618 016a 6D6F6465 		.ascii	"modem_stats\000"
 2618      6D5F7374 
 2618      61747300 
 2619              	.LASF6:
 2620 0176 6C6F6E67 		.ascii	"long long int\000"
 2620      206C6F6E 
 2620      6720696E 
 2620      7400
 2621              	.LASF0:
 2622 0184 7369676E 		.ascii	"signed char\000"
 2622      65642063 
 2622      68617200 
 2623              	.LASF44:
 2624 0190 65636E6F 		.ascii	"ecno\000"
 2624      00
 2625              	.LASF103:
 2626 0195 74696D65 		.ascii	"timeToMeasure\000"
 2626      546F4D65 
 2626      61737572 
 2626      6500
 2627              	.LASF47:
 2628 01a3 74696D65 		.ascii	"time_to_network_connect\000"
 2628      5F746F5F 
 2628      6E657477 
 2628      6F726B5F 
 2628      636F6E6E 
 2629              	.LASF105:
 2630 01bb 74696D65 		.ascii	"timeToSync\000"
 2630      546F5379 
 2630      6E6300
 2631              	.LASF26:
 2632 01c6 766F6C74 		.ascii	"voltage_charge_current\000"
 2632      6167655F 
 2632      63686172 
 2632      67655F63 
 2632      75727265 
 2633              	.LASF41:
 2634 01dd 6D6F6465 		.ascii	"modem_info_t\000"
 2634      6D5F696E 
 2634      666F5F74 
 2634      00
 2635              	.LASF71:
 2636 01ea 6368616E 		.ascii	"channels\000"
 2636      6E656C73 
 2636      00
 2637              	.LASF4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 53


 2638 01f3 6C6F6E67 		.ascii	"long int\000"
 2638      20696E74 
 2638      00
 2639              	.LASF42:
 2640 01fc 72786C65 		.ascii	"rxlev\000"
 2640      7600
 2641              	.LASF60:
 2642 0202 63757272 		.ascii	"currentCountDownValue\000"
 2642      656E7443 
 2642      6F756E74 
 2642      446F776E 
 2642      56616C75 
 2643              	.LASF63:
 2644 0218 616C6172 		.ascii	"alarm\000"
 2644      6D00
 2645              	.LASF31:
 2646 021e 70726573 		.ascii	"pressure_voltage_off\000"
 2646      73757265 
 2646      5F766F6C 
 2646      74616765 
 2646      5F6F6666 
 2647              	.LASF11:
 2648 0233 75696E74 		.ascii	"uint8\000"
 2648      3800
 2649              	.LASF108:
 2650 0239 74696D65 		.ascii	"timeToAppLED\000"
 2650      546F4170 
 2650      704C4544 
 2650      00
 2651              	.LASF14:
 2652 0246 696E7433 		.ascii	"int32\000"
 2652      3200
 2653              	.LASF50:
 2654 024c 6E6F6465 		.ascii	"node_type\000"
 2654      5F747970 
 2654      6500
 2655              	.LASF81:
 2656 0256 61727261 		.ascii	"array\000"
 2656      7900
 2657              	.LASF65:
 2658 025c 63686970 		.ascii	"chip_uniqueId\000"
 2658      5F756E69 
 2658      71756549 
 2658      6400
 2659              	.LASF39:
 2660 026a 6D6F6465 		.ascii	"model_id\000"
 2660      6C5F6964 
 2660      00
 2661              	.LASF59:
 2662 0273 636F756E 		.ascii	"countDownValue\000"
 2662      74446F77 
 2662      6E56616C 
 2662      756500
 2663              	.LASF80:
 2664 0282 66696E64 		.ascii	"find_median32\000"
 2664      5F6D6564 
 2664      69616E33 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 54


 2664      3200
 2665              	.LASF54:
 2666 0290 64656275 		.ascii	"debug_level\000"
 2666      675F6C65 
 2666      76656C00 
 2667              	.LASF35:
 2668 029c 76616C75 		.ascii	"value\000"
 2668      6500
 2669              	.LASF75:
 2670 02a2 70726573 		.ascii	"pressure_sensor_readings\000"
 2670      73757265 
 2670      5F73656E 
 2670      736F725F 
 2670      72656164 
 2671              	.LASF104:
 2672 02bb 616C6172 		.ascii	"alarmSync\000"
 2672      6D53796E 
 2672      6300
 2673              	.LASF30:
 2674 02c5 70726573 		.ascii	"pressure_voltage_on\000"
 2674      73757265 
 2674      5F766F6C 
 2674      74616765 
 2674      5F6F6E00 
 2675              	.LASF8:
 2676 02d9 756E7369 		.ascii	"unsigned int\000"
 2676      676E6564 
 2676      20696E74 
 2676      00
 2677              	.LASF37:
 2678 02e6 6B65795F 		.ascii	"key_value_t\000"
 2678      76616C75 
 2678      655F7400 
 2679              	.LASF5:
 2680 02f2 6C6F6E67 		.ascii	"long unsigned int\000"
 2680      20756E73 
 2680      69676E65 
 2680      6420696E 
 2680      7400
 2681              	.LASF24:
 2682 0304 766F6C74 		.ascii	"voltage_battery\000"
 2682      6167655F 
 2682      62617474 
 2682      65727900 
 2683              	.LASF91:
 2684 0314 64617461 		.ascii	"data\000"
 2684      00
 2685              	.LASF68:
 2686 0319 65705F70 		.ascii	"ep_port\000"
 2686      6F727400 
 2687              	.LASF64:
 2688 0321 6D6F6465 		.ascii	"modem_info\000"
 2688      6D5F696E 
 2688      666F00
 2689              	.LASF67:
 2690 032c 65705F68 		.ascii	"ep_host\000"
 2690      6F737400 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 55


 2691              	.LASF25:
 2692 0334 766F6C74 		.ascii	"voltage_solar\000"
 2692      6167655F 
 2692      736F6C61 
 2692      7200
 2693              	.LASF79:
 2694 0342 70726573 		.ascii	"pressure_calculations\000"
 2694      73757265 
 2694      5F63616C 
 2694      63756C61 
 2694      74696F6E 
 2695              	.LASF48:
 2696 0358 74696D65 		.ascii	"time_to_acquire_ip\000"
 2696      5F746F5F 
 2696      61637175 
 2696      6972655F 
 2696      697000
 2697              	.LASF2:
 2698 036b 73686F72 		.ascii	"short int\000"
 2698      7420696E 
 2698      7400
 2699              	.LASF107:
 2700 0375 616C6172 		.ascii	"alarmAppLED\000"
 2700      6D417070 
 2700      4C454400 
 2701              	.LASF93:
 2702 0381 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2702      6D5F7374 
 2702      6172745F 
 2702      74696D65 
 2702      5F737461 
 2703              	.LASF29:
 2704 0398 766F6C74 		.ascii	"voltage_t\000"
 2704      6167655F 
 2704      7400
 2705              	.LASF66:
 2706 03a2 7379735F 		.ascii	"sys_info_t\000"
 2706      696E666F 
 2706      5F7400
 2707              	.LASF83:
 2708 03ad 766F6C74 		.ascii	"voltages_test\000"
 2708      61676573 
 2708      5F746573 
 2708      7400
 2709              	.LASF89:
 2710 03bb 64617461 		.ascii	"dataPointsInStack\000"
 2710      506F696E 
 2710      7473496E 
 2710      53746163 
 2710      6B00
 2711              	.LASF19:
 2712 03cd 73697A65 		.ascii	"sizetype\000"
 2712      74797065 
 2712      00
 2713              	.LASF20:
 2714 03d6 74657374 		.ascii	"test_name\000"
 2714      5F6E616D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 56


 2714      6500
 2715              	.LASF106:
 2716 03e0 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2716      546F5379 
 2716      636E5265 
 2716      6D6F7465 
 2716      50617261 
 2717              	.LASF36:
 2718 03f7 74696D65 		.ascii	"timeStamp\000"
 2718      5374616D 
 2718      7000
 2719              	.LASF95:
 2720 0401 75706461 		.ascii	"updatable_parameters\000"
 2720      7461626C 
 2720      655F7061 
 2720      72616D65 
 2720      74657273 
 2721              	.LASF76:
 2722 0416 70726573 		.ascii	"pressure\000"
 2722      73757265 
 2722      00
 2723              	.LASF27:
 2724 041f 766F6C74 		.ascii	"voltage_pressure\000"
 2724      6167655F 
 2724      70726573 
 2724      73757265 
 2724      00
 2725              	.LASF97:
 2726 0430 68747470 		.ascii	"http_request\000"
 2726      5F726571 
 2726      75657374 
 2726      00
 2727              	.LASF15:
 2728 043d 666C6F61 		.ascii	"float\000"
 2728      7400
 2729              	.LASF57:
 2730 0443 5F426F6F 		.ascii	"_Bool\000"
 2730      6C00
 2731              	.LASF10:
 2732 0449 696E7433 		.ascii	"int32_t\000"
 2732      325F7400 
 2733              	.LASF1:
 2734 0451 756E7369 		.ascii	"unsigned char\000"
 2734      676E6564 
 2734      20636861 
 2734      7200
 2735              	.LASF85:
 2736 045f 70726573 		.ascii	"pressure_sensor_test\000"
 2736      73757265 
 2736      5F73656E 
 2736      736F725F 
 2736      74657374 
 2737              	.LASF101:
 2738 0474 73797374 		.ascii	"system_settings\000"
 2738      656D5F73 
 2738      65747469 
 2738      6E677300 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 57


 2739              	.LASF46:
 2740 0484 72737270 		.ascii	"rsrp\000"
 2740      00
 2741              	.LASF45:
 2742 0489 72737271 		.ascii	"rsrq\000"
 2742      00
 2743              	.LASF53:
 2744 048e 73796E63 		.ascii	"sync_time\000"
 2744      5F74696D 
 2744      6500
 2745              	.LASF78:
 2746 0498 73776170 		.ascii	"swap32\000"
 2746      333200
 2747              	.LASF23:
 2748 049f 74657374 		.ascii	"test_t\000"
 2748      5F7400
 2749              	.LASF33:
 2750 04a6 70726573 		.ascii	"pressure_depth\000"
 2750      73757265 
 2750      5F646570 
 2750      746800
 2751              	.LASF43:
 2752 04b5 72736370 		.ascii	"rscp\000"
 2752      00
 2753              	.LASF73:
 2754 04ba 72656164 		.ascii	"readings\000"
 2754      696E6773 
 2754      00
 2755              	.LASF100:
 2756 04c3 73797374 		.ascii	"system_info\000"
 2756      656D5F69 
 2756      6E666F00 
 2757              	.LASF40:
 2758 04cf 696D6569 		.ascii	"imei\000"
 2758      00
 2759              	.LASF22:
 2760 04d4 72656173 		.ascii	"reason\000"
 2760      6F6E00
 2761              	.LASF49:
 2762 04db 6D6F6465 		.ascii	"modem_stats_t\000"
 2762      6D5F7374 
 2762      6174735F 
 2762      7400
 2763              	.LASF32:
 2764 04e9 70726573 		.ascii	"pressure_current\000"
 2764      73757265 
 2764      5F637572 
 2764      72656E74 
 2764      00
 2765              	.LASF28:
 2766 04fa 76616C69 		.ascii	"valid\000"
 2766      6400
 2767              	.LASF109:
 2768 0500 616C6172 		.ascii	"alarmLevelSensor\000"
 2768      6D4C6576 
 2768      656C5365 
 2768      6E736F72 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 58


 2768      00
 2769              	.LASF56:
 2770 0511 4C657665 		.ascii	"Level_Sensor_freq\000"
 2770      6C5F5365 
 2770      6E736F72 
 2770      5F667265 
 2770      7100
 2771              	.LASF87:
 2772 0523 6C657665 		.ascii	"level_sensor_inbox\000"
 2772      6C5F7365 
 2772      6E736F72 
 2772      5F696E62 
 2772      6F7800
 2773              	.LASF18:
 2774 0536 6C6F6E67 		.ascii	"long double\000"
 2774      20646F75 
 2774      626C6500 
 2775              	.LASF17:
 2776 0542 63686172 		.ascii	"char\000"
 2776      00
 2777              	.LASF99:
 2778 0547 68747470 		.ascii	"http_route\000"
 2778      5F726F75 
 2778      746500
 2779              	.LASF9:
 2780 0552 5F5F696E 		.ascii	"__int32_t\000"
 2780      7433325F 
 2780      7400
 2781              	.LASF72:
 2782 055c 6F666673 		.ascii	"offset\000"
 2782      657400
 2783              	.LASF3:
 2784 0563 73686F72 		.ascii	"short unsigned int\000"
 2784      7420756E 
 2784      7369676E 
 2784      65642069 
 2784      6E7400
 2785              	.LASF38:
 2786 0576 73696D5F 		.ascii	"sim_id\000"
 2786      696400
 2787              	.LASF112:
 2788 057d 766F6C74 		.ascii	"voltages.c\000"
 2788      61676573 
 2788      2E6300
 2789              	.LASF74:
 2790 0588 766F6C74 		.ascii	"voltage_take_readings\000"
 2790      6167655F 
 2790      74616B65 
 2790      5F726561 
 2790      64696E67 
 2791              	.LASF21:
 2792 059e 73746174 		.ascii	"status\000"
 2792      757300
 2793              	.LASF90:
 2794 05a5 64617461 		.ascii	"dataPointsInStackDesired\000"
 2794      506F696E 
 2794      7473496E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccRHtKtn.s 			page 59


 2794      53746163 
 2794      6B446573 
 2795              	.LASF55:
 2796 05be 4170705F 		.ascii	"App_LED_freq\000"
 2796      4C45445F 
 2796      66726571 
 2796      00
 2797              	.LASF69:
 2798 05cb 7379735F 		.ascii	"sys_settings_t\000"
 2798      73657474 
 2798      696E6773 
 2798      5F7400
 2799              	.LASF98:
 2800 05da 68747470 		.ascii	"http_body\000"
 2800      5F626F64 
 2800      7900
 2801              	.LASF13:
 2802 05e4 696E7431 		.ascii	"int16\000"
 2802      3600
 2803              	.LASF61:
 2804 05ea 636F756E 		.ascii	"countDownType\000"
 2804      74446F77 
 2804      6E547970 
 2804      6500
 2805              	.LASF51:
 2806 05f8 73696D5F 		.ascii	"sim_type\000"
 2806      74797065 
 2806      00
 2807              	.LASF34:
 2808 0601 70726573 		.ascii	"pressure_t\000"
 2808      73757265 
 2808      5F7400
 2809              	.LASF52:
 2810 060c 6D656173 		.ascii	"measure_time\000"
 2810      7572655F 
 2810      74696D65 
 2810      00
 2811              	.LASF16:
 2812 0619 646F7562 		.ascii	"double\000"
 2812      6C6500
 2813              	.LASF96:
 2814 0620 6170705F 		.ascii	"app_led_inbox\000"
 2814      6C65645F 
 2814      696E626F 
 2814      7800
 2815              	.LASF92:
 2816 062e 6D6F6465 		.ascii	"modem_state\000"
 2816      6D5F7374 
 2816      61746500 
 2817              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
