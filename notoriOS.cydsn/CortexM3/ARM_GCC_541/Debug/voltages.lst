ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"voltages.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	buffer_overflow,1,1
  22              		.comm	dataPointsInStack,2,2
  23              		.comm	dataPointsInStackDesired,2,2
  24              		.comm	data,6600,4
  25              		.comm	modem_state,1,1
  26              		.comm	modem_start_time_stamp,4,4
  27              		.comm	modem_info,60,4
  28              		.comm	modem_stats,32,4
  29              		.comm	updatable_parameters,7,4
  30              		.syntax unified
  31              		.global _printf_float
  32              		.thumb
  33              		.syntax unified
  34              		.comm	App_LED_enabled,1,1
  35              		.comm	app_led_inbox,100,4
  36              		.comm	http_request,10000,4
  37              		.comm	http_body,10000,4
  38              		.comm	http_route,200,4
  39              		.comm	system_info,28,4
  40              		.comm	system_settings,104,4
  41              		.comm	alarmMeasure,6,4
  42              		.comm	timeToMeasure,1,1
  43              		.comm	alarmSync,6,4
  44              		.comm	timeToSync,1,1
  45              		.comm	timeToSycnRemoteParams,1,1
  46              		.comm	hey,1,1
  47              		.comm	alarmAppLED,6,4
  48              		.comm	timeToAppLED,1,1
  49              		.comm	alarmLevelSensor,6,4
  50              		.comm	timetoLevelSensor,1,1
  51              		.global	__aeabi_f2d
  52              		.global	__aeabi_dsub
  53              		.global	__aeabi_d2f
  54              		.global	__aeabi_fmul
  55              		.global	__aeabi_fsub
  56              		.section	.text.voltage_take_readings,"ax",%progbits
  57              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 2


  58              		.global	voltage_take_readings
  59              		.thumb
  60              		.thumb_func
  61              		.type	voltage_take_readings, %function
  62              	voltage_take_readings:
  63              	.LFB64:
  64              		.file 1 "voltages.c"
   1:voltages.c    **** #include "voltages.h"
   2:voltages.c    **** #include "notoriOS.h"
   3:voltages.c    **** #include <math.h>
   4:voltages.c    **** 
   5:voltages.c    **** // Function to take voltage readings and save them in the voltage_t datatype
   6:voltages.c    **** voltage_t voltage_take_readings(){
  65              		.loc 1 6 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 96
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0000 B0B5     		push	{r4, r5, r7, lr}
  70              		.cfi_def_cfa_offset 16
  71              		.cfi_offset 4, -16
  72              		.cfi_offset 5, -12
  73              		.cfi_offset 7, -8
  74              		.cfi_offset 14, -4
  75 0002 98B0     		sub	sp, sp, #96
  76              		.cfi_def_cfa_offset 112
  77 0004 00AF     		add	r7, sp, #0
  78              		.cfi_def_cfa_register 7
  79 0006 7860     		str	r0, [r7, #4]
   7:voltages.c    ****     
   8:voltages.c    ****     voltage_t voltage;  // Create variable voltage of data structure voltage_t.
   9:voltages.c    ****      
  10:voltages.c    **** 	Battery_Voltage_Enable_Write(ON);   // Flip on the Battery Voltage ADC pin high (turns it on).
  80              		.loc 1 10 0
  81 0008 0120     		movs	r0, #1
  82 000a FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  11:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
  83              		.loc 1 11 0
  84 000e 0120     		movs	r0, #1
  85 0010 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  12:voltages.c    ****     
  13:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
  86              		.loc 1 13 0
  87 0014 0A20     		movs	r0, #10
  88 0016 FFF7FEFF 		bl	CyDelay
  14:voltages.c    ****     
  15:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
  89              		.loc 1 15 0
  90 001a FFF7FEFF 		bl	AMux_Start
  16:voltages.c    ****  
  17:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
  91              		.loc 1 17 0
  92 001e FFF7FEFF 		bl	ADC_RestoreConfig
  18:voltages.c    ****     
  19:voltages.c    ****     ADC_Start();        // Start the ADC
  93              		.loc 1 19 0
  94 0022 FFF7FEFF 		bl	ADC_Start
  95              	.LBB2:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 3


  20:voltages.c    ****     
  21:voltages.c    ****     float channels[AMux_CHANNELS];
  22:voltages.c    ****     
  23:voltages.c    ****     for(uint8 c = 0; c< AMux_CHANNELS + 1; c++) // Sweep the MUX Channels
  96              		.loc 1 23 0
  97 0026 0023     		movs	r3, #0
  98 0028 87F85F30 		strb	r3, [r7, #95]
  99 002c 34E0     		b	.L2
 100              	.L5:
 101              	.LBB3:
  24:voltages.c    ****     {
  25:voltages.c    ****         
  26:voltages.c    ****         int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 
  27:voltages.c    ****         
  28:voltages.c    ****         AMux_Select(c); // This functions first disconnects all channels then connects the given ch
 102              		.loc 1 28 0
 103 002e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 104 0032 1846     		mov	r0, r3
 105 0034 FFF7FEFF 		bl	AMux_Select
 106              	.LBB4:
  29:voltages.c    ****         
  30:voltages.c    ****         for(uint16 i=0; i< N_SAMPLES; i++){
 107              		.loc 1 30 0
 108 0038 0023     		movs	r3, #0
 109 003a A7F85C30 		strh	r3, [r7, #92]	@ movhi
 110 003e 0FE0     		b	.L3
 111              	.L4:
  31:voltages.c    ****             
  32:voltages.c    ****             readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the
 112              		.loc 1 32 0 discriminator 3
 113 0040 B7F85C40 		ldrh	r4, [r7, #92]
 114 0044 FFF7FEFF 		bl	ADC_Read32
 115 0048 0246     		mov	r2, r0
 116 004a A300     		lsls	r3, r4, #2
 117 004c 07F16001 		add	r1, r7, #96
 118 0050 0B44     		add	r3, r3, r1
 119 0052 43F8582C 		str	r2, [r3, #-88]
  30:voltages.c    ****             
 120              		.loc 1 30 0 discriminator 3
 121 0056 B7F85C30 		ldrh	r3, [r7, #92]
 122 005a 0133     		adds	r3, r3, #1
 123 005c A7F85C30 		strh	r3, [r7, #92]	@ movhi
 124              	.L3:
  30:voltages.c    ****             
 125              		.loc 1 30 0 is_stmt 0 discriminator 1
 126 0060 B7F85C30 		ldrh	r3, [r7, #92]
 127 0064 0A2B     		cmp	r3, #10
 128 0066 EBD9     		bls	.L4
 129              	.LBE4:
  33:voltages.c    ****         }
  34:voltages.c    ****         
  35:voltages.c    ****         // Converts the ADC output to Volts as a floating point number. 
  36:voltages.c    ****         // Get the median of readings and return that.
  37:voltages.c    ****         channels[c] = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get median of re
 130              		.loc 1 37 0 is_stmt 1 discriminator 2
 131 0068 97F85F40 		ldrb	r4, [r7, #95]	@ zero_extendqisi2
 132 006c 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 4


 133 0070 0B21     		movs	r1, #11
 134 0072 1846     		mov	r0, r3
 135 0074 FFF7FEFF 		bl	find_median32
 136 0078 0346     		mov	r3, r0
 137 007a 1846     		mov	r0, r3
 138 007c FFF7FEFF 		bl	ADC_CountsTo_Volts
 139 0080 0246     		mov	r2, r0
 140 0082 A300     		lsls	r3, r4, #2
 141 0084 07F16001 		add	r1, r7, #96
 142 0088 0B44     		add	r3, r3, r1
 143 008a 43F82C2C 		str	r2, [r3, #-44]	@ float
 144              	.LBE3:
  23:voltages.c    ****     {
 145              		.loc 1 23 0 discriminator 2
 146 008e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 147 0092 0133     		adds	r3, r3, #1
 148 0094 87F85F30 		strb	r3, [r7, #95]
 149              	.L2:
  23:voltages.c    ****     {
 150              		.loc 1 23 0 is_stmt 0 discriminator 1
 151 0098 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 152 009c 042B     		cmp	r3, #4
 153 009e C6D9     		bls	.L5
 154              	.LBE2:
  38:voltages.c    ****     }
  39:voltages.c    ****     
  40:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 155              		.loc 1 40 0 is_stmt 1
 156 00a0 FFF7FEFF 		bl	AMux_Start
  41:voltages.c    ****     
  42:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 157              		.loc 1 42 0
 158 00a4 FFF7FEFF 		bl	ADC_SaveConfig
  43:voltages.c    ****     
  44:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 159              		.loc 1 44 0
 160 00a8 FFF7FEFF 		bl	ADC_Stop
  45:voltages.c    ****     
  46:voltages.c    ****     Battery_Voltage_Enable_Write(OFF);  // Pulls Battery ADC pin low (turns it off).
 161              		.loc 1 46 0
 162 00ac 0020     		movs	r0, #0
 163 00ae FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  47:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 164              		.loc 1 47 0
 165 00b2 0020     		movs	r0, #0
 166 00b4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  48:voltages.c    ****     
  49:voltages.c    ****     float offset = channels[0] - 1.024; // Should be 1.024 exactly. BK saw an offset when measuring
 167              		.loc 1 49 0
 168 00b8 7B6B     		ldr	r3, [r7, #52]	@ float
 169 00ba 1846     		mov	r0, r3
 170 00bc FFF7FEFF 		bl	__aeabi_f2d
 171 00c0 19A3     		adr	r3, .L7
 172 00c2 D3E90023 		ldrd	r2, [r3]
 173 00c6 FFF7FEFF 		bl	__aeabi_dsub
 174 00ca 0346     		mov	r3, r0
 175 00cc 0C46     		mov	r4, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 5


 176 00ce 1846     		mov	r0, r3
 177 00d0 2146     		mov	r1, r4
 178 00d2 FFF7FEFF 		bl	__aeabi_d2f
 179 00d6 0346     		mov	r3, r0
 180 00d8 BB65     		str	r3, [r7, #88]	@ float
  50:voltages.c    ****     voltage.voltage_battery = (channels[ADC_MUX_VBAT] * 11) - offset; // Voltage divider is (1/10) 
 181              		.loc 1 50 0
 182 00da BB6B     		ldr	r3, [r7, #56]	@ float
 183 00dc 1449     		ldr	r1, .L7+8
 184 00de 1846     		mov	r0, r3
 185 00e0 FFF7FEFF 		bl	__aeabi_fmul
 186 00e4 0346     		mov	r3, r0
 187 00e6 B96D     		ldr	r1, [r7, #88]	@ float
 188 00e8 1846     		mov	r0, r3
 189 00ea FFF7FEFF 		bl	__aeabi_fsub
 190 00ee 0346     		mov	r3, r0
 191 00f0 7B64     		str	r3, [r7, #68]	@ float
  51:voltages.c    ****     voltage.voltage_solar = channels[ADC_MUX_VSOL] - offset; // Just want voltage here
 192              		.loc 1 51 0
 193 00f2 FB6B     		ldr	r3, [r7, #60]	@ float
 194 00f4 B96D     		ldr	r1, [r7, #88]	@ float
 195 00f6 1846     		mov	r0, r3
 196 00f8 FFF7FEFF 		bl	__aeabi_fsub
 197 00fc 0346     		mov	r3, r0
 198 00fe BB64     		str	r3, [r7, #72]	@ float
  52:voltages.c    ****     // Voltage across sensor resistor gives 100mV drop for max current, which is 800mA
  53:voltages.c    ****     //voltage.voltage_charge_current = 0.1*(channels[ADC_MUX_CHRG] - voltage.voltage_battery);
  54:voltages.c    ****     voltage.voltage_pressure = channels[ADC_MUX_PRTRANS]; // Pressure transducer reading
 199              		.loc 1 54 0
 200 0100 3B6C     		ldr	r3, [r7, #64]	@ float
 201 0102 3B65     		str	r3, [r7, #80]	@ float
  55:voltages.c    **** 
  56:voltages.c    ****     voltage.valid = 1;
 202              		.loc 1 56 0
 203 0104 0123     		movs	r3, #1
 204 0106 87F85430 		strb	r3, [r7, #84]
  57:voltages.c    ****     
  58:voltages.c    ****     return voltage;
 205              		.loc 1 58 0
 206 010a 7B68     		ldr	r3, [r7, #4]
 207 010c 1D46     		mov	r5, r3
 208 010e 07F14404 		add	r4, r7, #68
 209 0112 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 210 0114 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 211 0116 2368     		ldr	r3, [r4]
 212 0118 2B60     		str	r3, [r5]
  59:voltages.c    **** }
 213              		.loc 1 59 0
 214 011a 7868     		ldr	r0, [r7, #4]
 215 011c 6037     		adds	r7, r7, #96
 216              		.cfi_def_cfa_offset 16
 217 011e BD46     		mov	sp, r7
 218              		.cfi_def_cfa_register 13
 219              		@ sp needed
 220 0120 B0BD     		pop	{r4, r5, r7, pc}
 221              	.L8:
 222 0122 00BFAFF3 		.align	3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 6


 222      0080
 223              	.L7:
 224 0128 FCA9F1D2 		.word	-755914244
 225 012c 4D62F03F 		.word	1072718413
 226 0130 00003041 		.word	1093664768
 227              		.cfi_endproc
 228              	.LFE64:
 229              		.size	voltage_take_readings, .-voltage_take_readings
 230              		.global	__aeabi_fdiv
 231              		.global	__aeabi_ddiv
 232              		.global	__aeabi_dmul
 233              		.section	.text.pressure_sensor_readings,"ax",%progbits
 234              		.align	2
 235              		.global	pressure_sensor_readings
 236              		.thumb
 237              		.thumb_func
 238              		.type	pressure_sensor_readings, %function
 239              	pressure_sensor_readings:
 240              	.LFB65:
  60:voltages.c    **** 
  61:voltages.c    **** // Function to take Pressure sensor readings and save them in the pressure_t datatype
  62:voltages.c    **** pressure_t pressure_sensor_readings(){
 241              		.loc 1 62 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 88
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 90B5     		push	{r4, r7, lr}
 246              		.cfi_def_cfa_offset 12
 247              		.cfi_offset 4, -12
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 97B0     		sub	sp, sp, #92
 251              		.cfi_def_cfa_offset 104
 252 0004 00AF     		add	r7, sp, #0
 253              		.cfi_def_cfa_register 7
 254 0006 7860     		str	r0, [r7, #4]
  63:voltages.c    ****     
  64:voltages.c    ****     pressure_t pressure;  // Create variable voltage of data structure voltage_t.
  65:voltages.c    ****     float channels[AMux_CHANNELS];
  66:voltages.c    ****     int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 11
  67:voltages.c    ****     
  68:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
 255              		.loc 1 68 0
 256 0008 FFF7FEFF 		bl	AMux_Start
  69:voltages.c    ****  
  70:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
 257              		.loc 1 70 0
 258 000c FFF7FEFF 		bl	ADC_RestoreConfig
  71:voltages.c    ****     
  72:voltages.c    ****     ADC_Start();        // Start the ADC
 259              		.loc 1 72 0
 260 0010 FFF7FEFF 		bl	ADC_Start
  73:voltages.c    ****     
  74:voltages.c    ****     AMux_Select(ADC_MUX_PRTRANS); // This functions first disconnects all channels then connects th
 261              		.loc 1 74 0
 262 0014 0320     		movs	r0, #3
 263 0016 FFF7FEFF 		bl	AMux_Select
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 7


 264              	.LBB5:
  75:voltages.c    ****     
  76:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 265              		.loc 1 76 0
 266 001a 0023     		movs	r3, #0
 267 001c A7F85630 		strh	r3, [r7, #86]	@ movhi
 268 0020 0FE0     		b	.L10
 269              	.L11:
  77:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 270              		.loc 1 77 0 discriminator 3
 271 0022 B7F85640 		ldrh	r4, [r7, #86]
 272 0026 FFF7FEFF 		bl	ADC_Read32
 273 002a 0246     		mov	r2, r0
 274 002c A300     		lsls	r3, r4, #2
 275 002e 07F15801 		add	r1, r7, #88
 276 0032 0B44     		add	r3, r3, r1
 277 0034 43F8502C 		str	r2, [r3, #-80]
  76:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 278              		.loc 1 76 0 discriminator 3
 279 0038 B7F85630 		ldrh	r3, [r7, #86]
 280 003c 0133     		adds	r3, r3, #1
 281 003e A7F85630 		strh	r3, [r7, #86]	@ movhi
 282              	.L10:
  76:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 283              		.loc 1 76 0 is_stmt 0 discriminator 1
 284 0042 B7F85630 		ldrh	r3, [r7, #86]
 285 0046 0A2B     		cmp	r3, #10
 286 0048 EBD9     		bls	.L11
 287              	.LBE5:
  78:voltages.c    ****     }
  79:voltages.c    ****     
  80:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
  81:voltages.c    ****     // Get the median of readings and return that.
  82:voltages.c    ****     pressure.pressure_voltage_off = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Ge
 288              		.loc 1 82 0 is_stmt 1
 289 004a 07F10803 		add	r3, r7, #8
 290 004e 0B21     		movs	r1, #11
 291 0050 1846     		mov	r0, r3
 292 0052 FFF7FEFF 		bl	find_median32
 293 0056 0346     		mov	r3, r0
 294 0058 1846     		mov	r0, r3
 295 005a FFF7FEFF 		bl	ADC_CountsTo_Volts
 296 005e 0346     		mov	r3, r0
 297 0060 BB64     		str	r3, [r7, #72]	@ float
  83:voltages.c    ****     pressure.pressure_voltage_off = floorf(pressure.pressure_voltage_off * 100) / 100;
 298              		.loc 1 83 0
 299 0062 BB6C     		ldr	r3, [r7, #72]	@ float
 300 0064 4849     		ldr	r1, .L15+16
 301 0066 1846     		mov	r0, r3
 302 0068 FFF7FEFF 		bl	__aeabi_fmul
 303 006c 0346     		mov	r3, r0
 304 006e 1846     		mov	r0, r3
 305 0070 FFF7FEFF 		bl	floorf
 306 0074 0346     		mov	r3, r0
 307 0076 4449     		ldr	r1, .L15+16
 308 0078 1846     		mov	r0, r3
 309 007a FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 8


 310 007e 0346     		mov	r3, r0
 311 0080 BB64     		str	r3, [r7, #72]	@ float
  84:voltages.c    ****     
  85:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
 312              		.loc 1 85 0
 313 0082 0120     		movs	r0, #1
 314 0084 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  86:voltages.c    ****     
  87:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
 315              		.loc 1 87 0
 316 0088 0A20     		movs	r0, #10
 317 008a FFF7FEFF 		bl	CyDelay
 318              	.LBB6:
  88:voltages.c    ****   
  89:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 319              		.loc 1 89 0
 320 008e 0023     		movs	r3, #0
 321 0090 A7F85430 		strh	r3, [r7, #84]	@ movhi
 322 0094 0FE0     		b	.L12
 323              	.L13:
  90:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 324              		.loc 1 90 0 discriminator 3
 325 0096 B7F85440 		ldrh	r4, [r7, #84]
 326 009a FFF7FEFF 		bl	ADC_Read32
 327 009e 0246     		mov	r2, r0
 328 00a0 A300     		lsls	r3, r4, #2
 329 00a2 07F15801 		add	r1, r7, #88
 330 00a6 0B44     		add	r3, r3, r1
 331 00a8 43F8502C 		str	r2, [r3, #-80]
  89:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 332              		.loc 1 89 0 discriminator 3
 333 00ac B7F85430 		ldrh	r3, [r7, #84]
 334 00b0 0133     		adds	r3, r3, #1
 335 00b2 A7F85430 		strh	r3, [r7, #84]	@ movhi
 336              	.L12:
  89:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 337              		.loc 1 89 0 is_stmt 0 discriminator 1
 338 00b6 B7F85430 		ldrh	r3, [r7, #84]
 339 00ba 0A2B     		cmp	r3, #10
 340 00bc EBD9     		bls	.L13
 341              	.LBE6:
  91:voltages.c    ****     }
  92:voltages.c    ****     
  93:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
  94:voltages.c    ****     // Get the median of readings and return that.
  95:voltages.c    ****     pressure.pressure_voltage_on = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get
 342              		.loc 1 95 0 is_stmt 1
 343 00be 07F10803 		add	r3, r7, #8
 344 00c2 0B21     		movs	r1, #11
 345 00c4 1846     		mov	r0, r3
 346 00c6 FFF7FEFF 		bl	find_median32
 347 00ca 0346     		mov	r3, r0
 348 00cc 1846     		mov	r0, r3
 349 00ce FFF7FEFF 		bl	ADC_CountsTo_Volts
 350 00d2 0346     		mov	r3, r0
 351 00d4 7B64     		str	r3, [r7, #68]	@ float
  96:voltages.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 9


  97:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 352              		.loc 1 97 0
 353 00d6 FFF7FEFF 		bl	AMux_Start
  98:voltages.c    ****     
  99:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 354              		.loc 1 99 0
 355 00da FFF7FEFF 		bl	ADC_SaveConfig
 100:voltages.c    ****     
 101:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 356              		.loc 1 101 0
 357 00de FFF7FEFF 		bl	ADC_Stop
 102:voltages.c    ****     
 103:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 358              		.loc 1 103 0
 359 00e2 0020     		movs	r0, #0
 360 00e4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
 104:voltages.c    ****     // Calculate the pressure transducer current output.
 105:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 106:voltages.c    ****     // Should fall between 4 and 20mA
 107:voltages.c    ****     pressure.pressure_current = (pressure.pressure_voltage_on/ 150.0)*1000; 
 361              		.loc 1 107 0
 362 00e8 7B6C     		ldr	r3, [r7, #68]	@ float
 363 00ea 1846     		mov	r0, r3
 364 00ec FFF7FEFF 		bl	__aeabi_f2d
 365 00f0 21A3     		adr	r3, .L15
 366 00f2 D3E90023 		ldrd	r2, [r3]
 367 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 368 00fa 0346     		mov	r3, r0
 369 00fc 0C46     		mov	r4, r1
 370 00fe 1846     		mov	r0, r3
 371 0100 2146     		mov	r1, r4
 372 0102 4FF00002 		mov	r2, #0
 373 0106 214B     		ldr	r3, .L15+20
 374 0108 FFF7FEFF 		bl	__aeabi_dmul
 375 010c 0346     		mov	r3, r0
 376 010e 0C46     		mov	r4, r1
 377 0110 1846     		mov	r0, r3
 378 0112 2146     		mov	r1, r4
 379 0114 FFF7FEFF 		bl	__aeabi_d2f
 380 0118 0346     		mov	r3, r0
 381 011a FB64     		str	r3, [r7, #76]	@ float
 108:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 109:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 110:voltages.c    ****     // Should fall between 0 and 10 ft
 111:voltages.c    ****     pressure.pressure_depth = ((10.0*pressure.pressure_voltage_on)/(0.016*150))-(10.0/4.0);   
 382              		.loc 1 111 0
 383 011c 7B6C     		ldr	r3, [r7, #68]	@ float
 384 011e 1846     		mov	r0, r3
 385 0120 FFF7FEFF 		bl	__aeabi_f2d
 386 0124 4FF00002 		mov	r2, #0
 387 0128 194B     		ldr	r3, .L15+24
 388 012a FFF7FEFF 		bl	__aeabi_dmul
 389 012e 0346     		mov	r3, r0
 390 0130 0C46     		mov	r4, r1
 391 0132 1846     		mov	r0, r3
 392 0134 2146     		mov	r1, r4
 393 0136 12A3     		adr	r3, .L15+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 10


 394 0138 D3E90023 		ldrd	r2, [r3]
 395 013c FFF7FEFF 		bl	__aeabi_ddiv
 396 0140 0346     		mov	r3, r0
 397 0142 0C46     		mov	r4, r1
 398 0144 1846     		mov	r0, r3
 399 0146 2146     		mov	r1, r4
 400 0148 4FF00002 		mov	r2, #0
 401 014c 114B     		ldr	r3, .L15+28
 402 014e FFF7FEFF 		bl	__aeabi_dsub
 403 0152 0346     		mov	r3, r0
 404 0154 0C46     		mov	r4, r1
 405 0156 1846     		mov	r0, r3
 406 0158 2146     		mov	r1, r4
 407 015a FFF7FEFF 		bl	__aeabi_d2f
 408 015e 0346     		mov	r3, r0
 409 0160 3B65     		str	r3, [r7, #80]	@ float
 112:voltages.c    ****     return pressure;
 410              		.loc 1 112 0
 411 0162 7B68     		ldr	r3, [r7, #4]
 412 0164 1C46     		mov	r4, r3
 413 0166 07F14403 		add	r3, r7, #68
 414 016a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 415 016c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 113:voltages.c    **** }
 416              		.loc 1 113 0
 417 0170 7868     		ldr	r0, [r7, #4]
 418 0172 5C37     		adds	r7, r7, #92
 419              		.cfi_def_cfa_offset 12
 420 0174 BD46     		mov	sp, r7
 421              		.cfi_def_cfa_register 13
 422              		@ sp needed
 423 0176 90BD     		pop	{r4, r7, pc}
 424              	.L16:
 425              		.align	3
 426              	.L15:
 427 0178 00000000 		.word	0
 428 017c 00C06240 		.word	1080213504
 429 0180 33333333 		.word	858993459
 430 0184 33330340 		.word	1073951539
 431 0188 0000C842 		.word	1120403456
 432 018c 00408F40 		.word	1083129856
 433 0190 00002440 		.word	1076101120
 434 0194 00000440 		.word	1074003968
 435              		.cfi_endproc
 436              	.LFE65:
 437              		.size	pressure_sensor_readings, .-pressure_sensor_readings
 438              		.section	.text.pressure_calculations,"ax",%progbits
 439              		.align	2
 440              		.global	pressure_calculations
 441              		.thumb
 442              		.thumb_func
 443              		.type	pressure_calculations, %function
 444              	pressure_calculations:
 445              	.LFB66:
 114:voltages.c    **** 
 115:voltages.c    **** // Function to calculate the pressure transducer current and depth estimate.
 116:voltages.c    **** pressure_t pressure_calculations(voltage_t voltage){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 11


 446              		.loc 1 116 0
 447              		.cfi_startproc
 448              		@ args = 24, pretend = 16, frame = 24
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450 0000 84B0     		sub	sp, sp, #16
 451              		.cfi_def_cfa_offset 16
 452 0002 90B5     		push	{r4, r7, lr}
 453              		.cfi_def_cfa_offset 28
 454              		.cfi_offset 4, -28
 455              		.cfi_offset 7, -24
 456              		.cfi_offset 14, -20
 457 0004 87B0     		sub	sp, sp, #28
 458              		.cfi_def_cfa_offset 56
 459 0006 00AF     		add	r7, sp, #0
 460              		.cfi_def_cfa_register 7
 461 0008 7860     		str	r0, [r7, #4]
 462 000a 07F12C00 		add	r0, r7, #44
 463 000e 80E80E00 		stmia	r0, {r1, r2, r3}
 117:voltages.c    ****     // Create variable pressure of data structure type pressure_t.
 118:voltages.c    ****     pressure_t pressure;
 119:voltages.c    ****     
 120:voltages.c    ****     // Calculate the pressure transducer current output.
 121:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 122:voltages.c    ****     // Should fall between 4 and 20mA
 123:voltages.c    ****     pressure.pressure_current = (voltage.voltage_pressure/ 150.0)/1000; 
 464              		.loc 1 123 0
 465 0012 BB6B     		ldr	r3, [r7, #56]	@ float
 466 0014 1846     		mov	r0, r3
 467 0016 FFF7FEFF 		bl	__aeabi_f2d
 468 001a 23A3     		adr	r3, .L19
 469 001c D3E90023 		ldrd	r2, [r3]
 470 0020 FFF7FEFF 		bl	__aeabi_ddiv
 471 0024 0346     		mov	r3, r0
 472 0026 0C46     		mov	r4, r1
 473 0028 1846     		mov	r0, r3
 474 002a 2146     		mov	r1, r4
 475 002c 4FF00002 		mov	r2, #0
 476 0030 214B     		ldr	r3, .L19+16
 477 0032 FFF7FEFF 		bl	__aeabi_ddiv
 478 0036 0346     		mov	r3, r0
 479 0038 0C46     		mov	r4, r1
 480 003a 1846     		mov	r0, r3
 481 003c 2146     		mov	r1, r4
 482 003e FFF7FEFF 		bl	__aeabi_d2f
 483 0042 0346     		mov	r3, r0
 484 0044 3B61     		str	r3, [r7, #16]	@ float
 124:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 125:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 126:voltages.c    ****     // Should fall between 0 and 10 ft
 127:voltages.c    ****     pressure.pressure_depth = ((10.0*voltage.voltage_pressure)/(0.016*150))-(10.0/4.0); 
 485              		.loc 1 127 0
 486 0046 BB6B     		ldr	r3, [r7, #56]	@ float
 487 0048 1846     		mov	r0, r3
 488 004a FFF7FEFF 		bl	__aeabi_f2d
 489 004e 4FF00002 		mov	r2, #0
 490 0052 1A4B     		ldr	r3, .L19+20
 491 0054 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 12


 492 0058 0346     		mov	r3, r0
 493 005a 0C46     		mov	r4, r1
 494 005c 1846     		mov	r0, r3
 495 005e 2146     		mov	r1, r4
 496 0060 13A3     		adr	r3, .L19+8
 497 0062 D3E90023 		ldrd	r2, [r3]
 498 0066 FFF7FEFF 		bl	__aeabi_ddiv
 499 006a 0346     		mov	r3, r0
 500 006c 0C46     		mov	r4, r1
 501 006e 1846     		mov	r0, r3
 502 0070 2146     		mov	r1, r4
 503 0072 4FF00002 		mov	r2, #0
 504 0076 124B     		ldr	r3, .L19+24
 505 0078 FFF7FEFF 		bl	__aeabi_dsub
 506 007c 0346     		mov	r3, r0
 507 007e 0C46     		mov	r4, r1
 508 0080 1846     		mov	r0, r3
 509 0082 2146     		mov	r1, r4
 510 0084 FFF7FEFF 		bl	__aeabi_d2f
 511 0088 0346     		mov	r3, r0
 512 008a 7B61     		str	r3, [r7, #20]	@ float
 128:voltages.c    ****     return pressure;
 513              		.loc 1 128 0
 514 008c 7B68     		ldr	r3, [r7, #4]
 515 008e 1C46     		mov	r4, r3
 516 0090 07F10803 		add	r3, r7, #8
 517 0094 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 518 0096 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 129:voltages.c    **** }
 519              		.loc 1 129 0
 520 009a 7868     		ldr	r0, [r7, #4]
 521 009c 1C37     		adds	r7, r7, #28
 522              		.cfi_def_cfa_offset 28
 523 009e BD46     		mov	sp, r7
 524              		.cfi_def_cfa_register 13
 525              		@ sp needed
 526 00a0 BDE89040 		pop	{r4, r7, lr}
 527              		.cfi_restore 14
 528              		.cfi_restore 7
 529              		.cfi_restore 4
 530              		.cfi_def_cfa_offset 16
 531 00a4 04B0     		add	sp, sp, #16
 532              		.cfi_def_cfa_offset 0
 533 00a6 7047     		bx	lr
 534              	.L20:
 535              		.align	3
 536              	.L19:
 537 00a8 00000000 		.word	0
 538 00ac 00C06240 		.word	1080213504
 539 00b0 33333333 		.word	858993459
 540 00b4 33330340 		.word	1073951539
 541 00b8 00408F40 		.word	1083129856
 542 00bc 00002440 		.word	1076101120
 543 00c0 00000440 		.word	1074003968
 544              		.cfi_endproc
 545              	.LFE66:
 546              		.size	pressure_calculations, .-pressure_calculations
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 13


 547              		.section	.text.sort32,"ax",%progbits
 548              		.align	2
 549              		.global	sort32
 550              		.thumb
 551              		.thumb_func
 552              		.type	sort32, %function
 553              	sort32:
 554              	.LFB67:
 130:voltages.c    ****     
 131:voltages.c    ****     
 132:voltages.c    **** 
 133:voltages.c    **** // Function to sort the elements in the level readings array
 134:voltages.c    **** void sort32(int32 a[],int32 n) { 
 555              		.loc 1 134 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 16
 558              		@ frame_needed = 1, uses_anonymous_args = 0
 559 0000 80B5     		push	{r7, lr}
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 7, -8
 562              		.cfi_offset 14, -4
 563 0002 84B0     		sub	sp, sp, #16
 564              		.cfi_def_cfa_offset 24
 565 0004 00AF     		add	r7, sp, #0
 566              		.cfi_def_cfa_register 7
 567 0006 7860     		str	r0, [r7, #4]
 568 0008 3960     		str	r1, [r7]
 135:voltages.c    ****    int32 i,j;
 136:voltages.c    **** 
 137:voltages.c    ****    for(i = 0;i < n-1;i++) {
 569              		.loc 1 137 0
 570 000a 0023     		movs	r3, #0
 571 000c FB60     		str	r3, [r7, #12]
 572 000e 28E0     		b	.L22
 573              	.L26:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 574              		.loc 1 138 0
 575 0010 0023     		movs	r3, #0
 576 0012 BB60     		str	r3, [r7, #8]
 577 0014 1BE0     		b	.L23
 578              	.L25:
 139:voltages.c    ****          if(a[j] > a[j+1])
 579              		.loc 1 139 0
 580 0016 BB68     		ldr	r3, [r7, #8]
 581 0018 9B00     		lsls	r3, r3, #2
 582 001a 7A68     		ldr	r2, [r7, #4]
 583 001c 1344     		add	r3, r3, r2
 584 001e 1A68     		ldr	r2, [r3]
 585 0020 BB68     		ldr	r3, [r7, #8]
 586 0022 0133     		adds	r3, r3, #1
 587 0024 9B00     		lsls	r3, r3, #2
 588 0026 7968     		ldr	r1, [r7, #4]
 589 0028 0B44     		add	r3, r3, r1
 590 002a 1B68     		ldr	r3, [r3]
 591 002c 9A42     		cmp	r2, r3
 592 002e 0BDD     		ble	.L24
 140:voltages.c    ****             swap32(&a[j],&a[j+1]);  // Swap the address of a[j] and a[j+1]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 14


 593              		.loc 1 140 0
 594 0030 BB68     		ldr	r3, [r7, #8]
 595 0032 9B00     		lsls	r3, r3, #2
 596 0034 7A68     		ldr	r2, [r7, #4]
 597 0036 D018     		adds	r0, r2, r3
 598 0038 BB68     		ldr	r3, [r7, #8]
 599 003a 0133     		adds	r3, r3, #1
 600 003c 9B00     		lsls	r3, r3, #2
 601 003e 7A68     		ldr	r2, [r7, #4]
 602 0040 1344     		add	r3, r3, r2
 603 0042 1946     		mov	r1, r3
 604 0044 FFF7FEFF 		bl	swap32
 605              	.L24:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 606              		.loc 1 138 0 discriminator 2
 607 0048 BB68     		ldr	r3, [r7, #8]
 608 004a 0133     		adds	r3, r3, #1
 609 004c BB60     		str	r3, [r7, #8]
 610              	.L23:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 611              		.loc 1 138 0 is_stmt 0 discriminator 1
 612 004e 3A68     		ldr	r2, [r7]
 613 0050 FB68     		ldr	r3, [r7, #12]
 614 0052 D31A     		subs	r3, r2, r3
 615 0054 5A1E     		subs	r2, r3, #1
 616 0056 BB68     		ldr	r3, [r7, #8]
 617 0058 9A42     		cmp	r2, r3
 618 005a DCDC     		bgt	.L25
 137:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 619              		.loc 1 137 0 is_stmt 1 discriminator 2
 620 005c FB68     		ldr	r3, [r7, #12]
 621 005e 0133     		adds	r3, r3, #1
 622 0060 FB60     		str	r3, [r7, #12]
 623              	.L22:
 137:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 624              		.loc 1 137 0 is_stmt 0 discriminator 1
 625 0062 3B68     		ldr	r3, [r7]
 626 0064 5A1E     		subs	r2, r3, #1
 627 0066 FB68     		ldr	r3, [r7, #12]
 628 0068 9A42     		cmp	r2, r3
 629 006a D1DC     		bgt	.L26
 141:voltages.c    ****       }
 142:voltages.c    ****    }
 143:voltages.c    **** }
 630              		.loc 1 143 0 is_stmt 1
 631 006c 00BF     		nop
 632 006e 1037     		adds	r7, r7, #16
 633              		.cfi_def_cfa_offset 8
 634 0070 BD46     		mov	sp, r7
 635              		.cfi_def_cfa_register 13
 636              		@ sp needed
 637 0072 80BD     		pop	{r7, pc}
 638              		.cfi_endproc
 639              	.LFE67:
 640              		.size	sort32, .-sort32
 641              		.section	.text.swap32,"ax",%progbits
 642              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 15


 643              		.global	swap32
 644              		.thumb
 645              		.thumb_func
 646              		.type	swap32, %function
 647              	swap32:
 648              	.LFB68:
 144:voltages.c    **** 
 145:voltages.c    **** // Function to swap elements in the level readings array in order to sort them
 146:voltages.c    **** void swap32(int32 *p,int32 *q){
 649              		.loc 1 146 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 16
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654 0000 80B4     		push	{r7}
 655              		.cfi_def_cfa_offset 4
 656              		.cfi_offset 7, -4
 657 0002 85B0     		sub	sp, sp, #20
 658              		.cfi_def_cfa_offset 24
 659 0004 00AF     		add	r7, sp, #0
 660              		.cfi_def_cfa_register 7
 661 0006 7860     		str	r0, [r7, #4]
 662 0008 3960     		str	r1, [r7]
 147:voltages.c    ****    int32 t;
 148:voltages.c    ****    
 149:voltages.c    ****    t=*p; 
 663              		.loc 1 149 0
 664 000a 7B68     		ldr	r3, [r7, #4]
 665 000c 1B68     		ldr	r3, [r3]
 666 000e FB60     		str	r3, [r7, #12]
 150:voltages.c    ****    *p=*q; 
 667              		.loc 1 150 0
 668 0010 3B68     		ldr	r3, [r7]
 669 0012 1A68     		ldr	r2, [r3]
 670 0014 7B68     		ldr	r3, [r7, #4]
 671 0016 1A60     		str	r2, [r3]
 151:voltages.c    ****    *q=t;
 672              		.loc 1 151 0
 673 0018 3B68     		ldr	r3, [r7]
 674 001a FA68     		ldr	r2, [r7, #12]
 675 001c 1A60     		str	r2, [r3]
 152:voltages.c    **** }
 676              		.loc 1 152 0
 677 001e 00BF     		nop
 678 0020 1437     		adds	r7, r7, #20
 679              		.cfi_def_cfa_offset 4
 680 0022 BD46     		mov	sp, r7
 681              		.cfi_def_cfa_register 13
 682              		@ sp needed
 683 0024 80BC     		pop	{r7}
 684              		.cfi_restore 7
 685              		.cfi_def_cfa_offset 0
 686 0026 7047     		bx	lr
 687              		.cfi_endproc
 688              	.LFE68:
 689              		.size	swap32, .-swap32
 690              		.global	__aeabi_i2d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 16


 691              		.global	__aeabi_d2iz
 692              		.section	.text.find_median32,"ax",%progbits
 693              		.align	2
 694              		.global	find_median32
 695              		.thumb
 696              		.thumb_func
 697              		.type	find_median32, %function
 698              	find_median32:
 699              	.LFB69:
 153:voltages.c    **** 
 154:voltages.c    **** // Function to calculate the median of the array, after array is sorted
 155:voltages.c    **** int32 find_median32(int32 array[] , int32 n)
 156:voltages.c    **** {
 700              		.loc 1 156 0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 16
 703              		@ frame_needed = 1, uses_anonymous_args = 0
 704 0000 90B5     		push	{r4, r7, lr}
 705              		.cfi_def_cfa_offset 12
 706              		.cfi_offset 4, -12
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0002 85B0     		sub	sp, sp, #20
 710              		.cfi_def_cfa_offset 32
 711 0004 00AF     		add	r7, sp, #0
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 714 0008 3960     		str	r1, [r7]
 157:voltages.c    ****     int32 median=0;
 715              		.loc 1 157 0
 716 000a 0023     		movs	r3, #0
 717 000c FB60     		str	r3, [r7, #12]
 158:voltages.c    ****     sort32(array,n);
 718              		.loc 1 158 0
 719 000e 3968     		ldr	r1, [r7]
 720 0010 7868     		ldr	r0, [r7, #4]
 721 0012 FFF7FEFF 		bl	sort32
 159:voltages.c    ****     
 160:voltages.c    ****     // If number of elements are even
 161:voltages.c    ****     if(n%2 == 0)
 722              		.loc 1 161 0
 723 0016 3B68     		ldr	r3, [r7]
 724 0018 03F00103 		and	r3, r3, #1
 725 001c 002B     		cmp	r3, #0
 726 001e 23D1     		bne	.L29
 162:voltages.c    ****         // Median is the average of the  two middle sorted numbers
 163:voltages.c    ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 727              		.loc 1 163 0
 728 0020 3B68     		ldr	r3, [r7]
 729 0022 013B     		subs	r3, r3, #1
 730 0024 DA0F     		lsrs	r2, r3, #31
 731 0026 1344     		add	r3, r3, r2
 732 0028 5B10     		asrs	r3, r3, #1
 733 002a 9B00     		lsls	r3, r3, #2
 734 002c 7A68     		ldr	r2, [r7, #4]
 735 002e 1344     		add	r3, r3, r2
 736 0030 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 17


 737 0032 3B68     		ldr	r3, [r7]
 738 0034 D90F     		lsrs	r1, r3, #31
 739 0036 0B44     		add	r3, r3, r1
 740 0038 5B10     		asrs	r3, r3, #1
 741 003a 9B00     		lsls	r3, r3, #2
 742 003c 7968     		ldr	r1, [r7, #4]
 743 003e 0B44     		add	r3, r3, r1
 744 0040 1B68     		ldr	r3, [r3]
 745 0042 1344     		add	r3, r3, r2
 746 0044 1846     		mov	r0, r3
 747 0046 FFF7FEFF 		bl	__aeabi_i2d
 748 004a 4FF00002 		mov	r2, #0
 749 004e 4FF08043 		mov	r3, #1073741824
 750 0052 FFF7FEFF 		bl	__aeabi_ddiv
 751 0056 0346     		mov	r3, r0
 752 0058 0C46     		mov	r4, r1
 753 005a 1846     		mov	r0, r3
 754 005c 2146     		mov	r1, r4
 755 005e FFF7FEFF 		bl	__aeabi_d2iz
 756 0062 0346     		mov	r3, r0
 757 0064 FB60     		str	r3, [r7, #12]
 758 0066 08E0     		b	.L30
 759              	.L29:
 164:voltages.c    ****     // If number of elements are odd
 165:voltages.c    ****     else
 166:voltages.c    ****         // Median is the the middle sorted number. 
 167:voltages.c    ****         median = array[n/2];
 760              		.loc 1 167 0
 761 0068 3B68     		ldr	r3, [r7]
 762 006a DA0F     		lsrs	r2, r3, #31
 763 006c 1344     		add	r3, r3, r2
 764 006e 5B10     		asrs	r3, r3, #1
 765 0070 9B00     		lsls	r3, r3, #2
 766 0072 7A68     		ldr	r2, [r7, #4]
 767 0074 1344     		add	r3, r3, r2
 768 0076 1B68     		ldr	r3, [r3]
 769 0078 FB60     		str	r3, [r7, #12]
 770              	.L30:
 168:voltages.c    ****     
 169:voltages.c    ****     return median;
 771              		.loc 1 169 0
 772 007a FB68     		ldr	r3, [r7, #12]
 170:voltages.c    **** }
 773              		.loc 1 170 0
 774 007c 1846     		mov	r0, r3
 775 007e 1437     		adds	r7, r7, #20
 776              		.cfi_def_cfa_offset 12
 777 0080 BD46     		mov	sp, r7
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 0082 90BD     		pop	{r4, r7, pc}
 781              		.cfi_endproc
 782              	.LFE69:
 783              		.size	find_median32, .-find_median32
 784              		.section	.rodata
 785              		.align	2
 786              	.LC0:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 18


 787 0000 54455354 		.ascii	"TEST_ANALOG_VOLTAGES\000"
 787      5F414E41 
 787      4C4F475F 
 787      564F4C54 
 787      41474553 
 788 0015 000000   		.align	2
 789              	.LC1:
 790 0018 56424154 		.ascii	"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f\000"
 790      3D252E33 
 790      662C5653 
 790      4F4C3D25 
 790      2E33662C 
 791              		.section	.text.voltages_test,"ax",%progbits
 792              		.align	2
 793              		.global	voltages_test
 794              		.thumb
 795              		.thumb_func
 796              		.type	voltages_test, %function
 797              	voltages_test:
 798              	.LFB70:
 171:voltages.c    **** 
 172:voltages.c    **** // Test the voltage readings
 173:voltages.c    **** test_t voltages_test(){
 799              		.loc 1 173 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 416
 802              		@ frame_needed = 1, uses_anonymous_args = 0
 803 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 804              		.cfi_def_cfa_offset 24
 805              		.cfi_offset 4, -24
 806              		.cfi_offset 5, -20
 807              		.cfi_offset 7, -16
 808              		.cfi_offset 8, -12
 809              		.cfi_offset 9, -8
 810              		.cfi_offset 14, -4
 811 0004 EEB0     		sub	sp, sp, #440
 812              		.cfi_def_cfa_offset 464
 813 0006 06AF     		add	r7, sp, #24
 814              		.cfi_def_cfa 7, 440
 815 0008 3B1D     		adds	r3, r7, #4
 816 000a 1860     		str	r0, [r3]
 174:voltages.c    ****     // Create variable test of the data structure test_t
 175:voltages.c    ****     test_t test;
 176:voltages.c    ****     test.status = 0;
 817              		.loc 1 176 0
 818 000c 07F11C03 		add	r3, r7, #28
 819 0010 0022     		movs	r2, #0
 820 0012 83F88020 		strb	r2, [r3, #128]
 177:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_ANALOG_VOLTAGES");
 821              		.loc 1 177 0
 822 0016 07F11C03 		add	r3, r7, #28
 823 001a 264A     		ldr	r2, .L34
 824 001c 1C46     		mov	r4, r3
 825 001e 1546     		mov	r5, r2
 826 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 827 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 828 0024 95E80300 		ldmia	r5, {r0, r1}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 19


 829 0028 2060     		str	r0, [r4]
 830 002a 0434     		adds	r4, r4, #4
 831 002c 2170     		strb	r1, [r4]
 178:voltages.c    ****     
 179:voltages.c    ****     voltage_t voltage = voltage_take_readings();
 832              		.loc 1 179 0
 833 002e 07F10803 		add	r3, r7, #8
 834 0032 1846     		mov	r0, r3
 835 0034 FFF7FEFF 		bl	voltage_take_readings
 180:voltages.c    ****     
 181:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 182:voltages.c    ****     
 183:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f",
 184:voltages.c    ****             voltage.voltage_battery,
 836              		.loc 1 184 0
 837 0038 07F10803 		add	r3, r7, #8
 838 003c 1B68     		ldr	r3, [r3]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 839              		.loc 1 183 0
 840 003e 1846     		mov	r0, r3
 841 0040 FFF7FEFF 		bl	__aeabi_f2d
 842 0044 0446     		mov	r4, r0
 843 0046 0D46     		mov	r5, r1
 185:voltages.c    ****             voltage.voltage_solar,
 844              		.loc 1 185 0
 845 0048 07F10803 		add	r3, r7, #8
 846 004c 5B68     		ldr	r3, [r3, #4]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 847              		.loc 1 183 0
 848 004e 1846     		mov	r0, r3
 849 0050 FFF7FEFF 		bl	__aeabi_f2d
 850 0054 8046     		mov	r8, r0
 851 0056 8946     		mov	r9, r1
 186:voltages.c    ****             voltage.voltage_charge_current);
 852              		.loc 1 186 0
 853 0058 07F10803 		add	r3, r7, #8
 854 005c 9B68     		ldr	r3, [r3, #8]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 855              		.loc 1 183 0
 856 005e 1846     		mov	r0, r3
 857 0060 FFF7FEFF 		bl	__aeabi_f2d
 858 0064 0246     		mov	r2, r0
 859 0066 0B46     		mov	r3, r1
 860 0068 07F11C01 		add	r1, r7, #28
 861 006c 01F18100 		add	r0, r1, #129
 862 0070 CDE90423 		strd	r2, [sp, #16]
 863 0074 CDE90289 		strd	r8, [sp, #8]
 864 0078 CDE90045 		strd	r4, [sp]
 865 007c 0E4A     		ldr	r2, .L34+4
 866 007e 4FF48071 		mov	r1, #256
 867 0082 FFF7FEFF 		bl	snprintf
 187:voltages.c    ****     
 188:voltages.c    ****     test.status = 1;
 868              		.loc 1 188 0
 869 0086 07F11C03 		add	r3, r7, #28
 870 008a 0122     		movs	r2, #1
 871 008c 83F88020 		strb	r2, [r3, #128]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 20


 189:voltages.c    ****     
 190:voltages.c    ****     return test;
 872              		.loc 1 190 0
 873 0090 3B1D     		adds	r3, r7, #4
 874 0092 1A68     		ldr	r2, [r3]
 875 0094 07F11C03 		add	r3, r7, #28
 876 0098 1046     		mov	r0, r2
 877 009a 1946     		mov	r1, r3
 878 009c 40F28113 		movw	r3, #385
 879 00a0 1A46     		mov	r2, r3
 880 00a2 FFF7FEFF 		bl	memcpy
 191:voltages.c    **** }
 881              		.loc 1 191 0
 882 00a6 3B1D     		adds	r3, r7, #4
 883 00a8 1868     		ldr	r0, [r3]
 884 00aa 07F5D077 		add	r7, r7, #416
 885              		.cfi_def_cfa_offset 24
 886 00ae BD46     		mov	sp, r7
 887              		.cfi_def_cfa_register 13
 888              		@ sp needed
 889 00b0 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 890              	.L35:
 891              		.align	2
 892              	.L34:
 893 00b4 00000000 		.word	.LC0
 894 00b8 18000000 		.word	.LC1
 895              		.cfi_endproc
 896              	.LFE70:
 897              		.size	voltages_test, .-voltages_test
 898              		.section	.rodata
 899 0036 0000     		.align	2
 900              	.LC2:
 901 0038 54455354 		.ascii	"TEST_PRESSURE_SENSOR\000"
 901      5F505245 
 901      53535552 
 901      455F5345 
 901      4E534F52 
 902 004d 000000   		.align	2
 903              	.LC3:
 904 0050 50524553 		.ascii	"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f\000"
 904      53555245 
 904      3D252E33 
 904      662C5052 
 904      45535F43 
 905              		.global	__aeabi_fcmpeq
 906              		.section	.text.pressure_sensor_test,"ax",%progbits
 907              		.align	2
 908              		.global	pressure_sensor_test
 909              		.thumb
 910              		.thumb_func
 911              		.type	pressure_sensor_test, %function
 912              	pressure_sensor_test:
 913              	.LFB71:
 192:voltages.c    **** 
 193:voltages.c    **** // Test the pressure sensor readings
 194:voltages.c    **** test_t pressure_sensor_test(){
 914              		.loc 1 194 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 21


 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 416
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 919              		.cfi_def_cfa_offset 24
 920              		.cfi_offset 4, -24
 921              		.cfi_offset 5, -20
 922              		.cfi_offset 7, -16
 923              		.cfi_offset 8, -12
 924              		.cfi_offset 9, -8
 925              		.cfi_offset 14, -4
 926 0004 EEB0     		sub	sp, sp, #440
 927              		.cfi_def_cfa_offset 464
 928 0006 06AF     		add	r7, sp, #24
 929              		.cfi_def_cfa 7, 440
 930 0008 3B1D     		adds	r3, r7, #4
 931 000a 1860     		str	r0, [r3]
 195:voltages.c    ****     // Create variable test of the data structure test_t
 196:voltages.c    ****     test_t test;
 197:voltages.c    ****     test.status = 0;
 932              		.loc 1 197 0
 933 000c 07F11C03 		add	r3, r7, #28
 934 0010 0022     		movs	r2, #0
 935 0012 83F88020 		strb	r2, [r3, #128]
 198:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_PRESSURE_SENSOR");
 936              		.loc 1 198 0
 937 0016 07F11C03 		add	r3, r7, #28
 938 001a 374A     		ldr	r2, .L41
 939 001c 1C46     		mov	r4, r3
 940 001e 1546     		mov	r5, r2
 941 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 942 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 943 0024 95E80300 		ldmia	r5, {r0, r1}
 944 0028 2060     		str	r0, [r4]
 945 002a 0434     		adds	r4, r4, #4
 946 002c 2170     		strb	r1, [r4]
 199:voltages.c    ****     
 200:voltages.c    ****     pressure_t pressure = pressure_sensor_readings();
 947              		.loc 1 200 0
 948 002e 07F10C03 		add	r3, r7, #12
 949 0032 1846     		mov	r0, r3
 950 0034 FFF7FEFF 		bl	pressure_sensor_readings
 201:voltages.c    ****     
 202:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 203:voltages.c    ****     
 204:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f",
 205:voltages.c    ****             pressure.pressure_voltage_on,
 951              		.loc 1 205 0
 952 0038 07F10C03 		add	r3, r7, #12
 953 003c 1B68     		ldr	r3, [r3]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 954              		.loc 1 204 0
 955 003e 1846     		mov	r0, r3
 956 0040 FFF7FEFF 		bl	__aeabi_f2d
 957 0044 0446     		mov	r4, r0
 958 0046 0D46     		mov	r5, r1
 206:voltages.c    ****             pressure.pressure_current,
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 22


 959              		.loc 1 206 0
 960 0048 07F10C03 		add	r3, r7, #12
 961 004c 9B68     		ldr	r3, [r3, #8]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 962              		.loc 1 204 0
 963 004e 1846     		mov	r0, r3
 964 0050 FFF7FEFF 		bl	__aeabi_f2d
 965 0054 8046     		mov	r8, r0
 966 0056 8946     		mov	r9, r1
 207:voltages.c    ****             pressure.pressure_depth);
 967              		.loc 1 207 0
 968 0058 07F10C03 		add	r3, r7, #12
 969 005c DB68     		ldr	r3, [r3, #12]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 970              		.loc 1 204 0
 971 005e 1846     		mov	r0, r3
 972 0060 FFF7FEFF 		bl	__aeabi_f2d
 973 0064 0246     		mov	r2, r0
 974 0066 0B46     		mov	r3, r1
 975 0068 07F11C01 		add	r1, r7, #28
 976 006c 01F18100 		add	r0, r1, #129
 977 0070 CDE90423 		strd	r2, [sp, #16]
 978 0074 CDE90289 		strd	r8, [sp, #8]
 979 0078 CDE90045 		strd	r4, [sp]
 980 007c 1F4A     		ldr	r2, .L41+4
 981 007e 4FF48071 		mov	r1, #256
 982 0082 FFF7FEFF 		bl	snprintf
 208:voltages.c    ****     pressure.pressure_voltage_on = floorf(pressure.pressure_voltage_on * 100) / 100;
 983              		.loc 1 208 0
 984 0086 07F10C03 		add	r3, r7, #12
 985 008a 1B68     		ldr	r3, [r3]	@ float
 986 008c 1C49     		ldr	r1, .L41+8
 987 008e 1846     		mov	r0, r3
 988 0090 FFF7FEFF 		bl	__aeabi_fmul
 989 0094 0346     		mov	r3, r0
 990 0096 1846     		mov	r0, r3
 991 0098 FFF7FEFF 		bl	floorf
 992 009c 0346     		mov	r3, r0
 993 009e 1849     		ldr	r1, .L41+8
 994 00a0 1846     		mov	r0, r3
 995 00a2 FFF7FEFF 		bl	__aeabi_fdiv
 996 00a6 0346     		mov	r3, r0
 997 00a8 1A46     		mov	r2, r3
 998 00aa 07F10C03 		add	r3, r7, #12
 999 00ae 1A60     		str	r2, [r3]	@ float
 209:voltages.c    ****     if (pressure.pressure_voltage_off != pressure.pressure_voltage_on) {
 1000              		.loc 1 209 0
 1001 00b0 07F10C03 		add	r3, r7, #12
 1002 00b4 5A68     		ldr	r2, [r3, #4]	@ float
 1003 00b6 07F10C03 		add	r3, r7, #12
 1004 00ba 1B68     		ldr	r3, [r3]	@ float
 1005 00bc 1946     		mov	r1, r3
 1006 00be 1046     		mov	r0, r2
 1007 00c0 FFF7FEFF 		bl	__aeabi_fcmpeq
 1008 00c4 0346     		mov	r3, r0
 1009 00c6 002B     		cmp	r3, #0
 1010 00c8 04D1     		bne	.L37
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 23


 210:voltages.c    ****         test.status = 1;
 1011              		.loc 1 210 0
 1012 00ca 07F11C03 		add	r3, r7, #28
 1013 00ce 0122     		movs	r2, #1
 1014 00d0 83F88020 		strb	r2, [r3, #128]
 1015              	.L37:
 211:voltages.c    ****     }
 212:voltages.c    ****     
 213:voltages.c    ****     return test;
 1016              		.loc 1 213 0
 1017 00d4 3B1D     		adds	r3, r7, #4
 1018 00d6 1A68     		ldr	r2, [r3]
 1019 00d8 07F11C03 		add	r3, r7, #28
 1020 00dc 1046     		mov	r0, r2
 1021 00de 1946     		mov	r1, r3
 1022 00e0 40F28113 		movw	r3, #385
 1023 00e4 1A46     		mov	r2, r3
 1024 00e6 FFF7FEFF 		bl	memcpy
 214:voltages.c    **** }
 1025              		.loc 1 214 0
 1026 00ea 3B1D     		adds	r3, r7, #4
 1027 00ec 1868     		ldr	r0, [r3]
 1028 00ee 07F5D077 		add	r7, r7, #416
 1029              		.cfi_def_cfa_offset 24
 1030 00f2 BD46     		mov	sp, r7
 1031              		.cfi_def_cfa_register 13
 1032              		@ sp needed
 1033 00f4 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1034              	.L42:
 1035              		.align	2
 1036              	.L41:
 1037 00f8 38000000 		.word	.LC2
 1038 00fc 50000000 		.word	.LC3
 1039 0100 0000C842 		.word	1120403456
 1040              		.cfi_endproc
 1041              	.LFE71:
 1042              		.size	pressure_sensor_test, .-pressure_sensor_test
 1043              		.text
 1044              	.Letext0:
 1045              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1046              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1047              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1048              		.file 5 "testing.h"
 1049              		.file 6 "voltages.h"
 1050              		.file 7 "data.h"
 1051              		.file 8 "modem.h"
 1052              		.file 9 "notoriOS.h"
 1053              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1054              		.file 11 "level_sensor.h"
 1055              		.file 12 "App_LED.h"
 1056              		.section	.debug_info,"",%progbits
 1057              	.Ldebug_info0:
 1058 0000 92080000 		.4byte	0x892
 1059 0004 0400     		.2byte	0x4
 1060 0006 00000000 		.4byte	.Ldebug_abbrev0
 1061 000a 04       		.byte	0x4
 1062 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 24


 1063 000c 6E000000 		.4byte	.LASF113
 1064 0010 0C       		.byte	0xc
 1065 0011 8D050000 		.4byte	.LASF114
 1066 0015 07000000 		.4byte	.LASF115
 1067 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1068 001d 00000000 		.4byte	0
 1069 0021 00000000 		.4byte	.Ldebug_line0
 1070 0025 02       		.uleb128 0x2
 1071 0026 01       		.byte	0x1
 1072 0027 06       		.byte	0x6
 1073 0028 84010000 		.4byte	.LASF0
 1074 002c 02       		.uleb128 0x2
 1075 002d 01       		.byte	0x1
 1076 002e 08       		.byte	0x8
 1077 002f 54040000 		.4byte	.LASF1
 1078 0033 02       		.uleb128 0x2
 1079 0034 02       		.byte	0x2
 1080 0035 05       		.byte	0x5
 1081 0036 6E030000 		.4byte	.LASF2
 1082 003a 02       		.uleb128 0x2
 1083 003b 02       		.byte	0x2
 1084 003c 07       		.byte	0x7
 1085 003d 73050000 		.4byte	.LASF3
 1086 0041 03       		.uleb128 0x3
 1087 0042 62050000 		.4byte	.LASF9
 1088 0046 02       		.byte	0x2
 1089 0047 3F       		.byte	0x3f
 1090 0048 4C000000 		.4byte	0x4c
 1091 004c 02       		.uleb128 0x2
 1092 004d 04       		.byte	0x4
 1093 004e 05       		.byte	0x5
 1094 004f F3010000 		.4byte	.LASF4
 1095 0053 02       		.uleb128 0x2
 1096 0054 04       		.byte	0x4
 1097 0055 07       		.byte	0x7
 1098 0056 F5020000 		.4byte	.LASF5
 1099 005a 02       		.uleb128 0x2
 1100 005b 08       		.byte	0x8
 1101 005c 05       		.byte	0x5
 1102 005d 76010000 		.4byte	.LASF6
 1103 0061 02       		.uleb128 0x2
 1104 0062 08       		.byte	0x8
 1105 0063 07       		.byte	0x7
 1106 0064 FC000000 		.4byte	.LASF7
 1107 0068 04       		.uleb128 0x4
 1108 0069 04       		.byte	0x4
 1109 006a 05       		.byte	0x5
 1110 006b 696E7400 		.ascii	"int\000"
 1111 006f 02       		.uleb128 0x2
 1112 0070 04       		.byte	0x4
 1113 0071 07       		.byte	0x7
 1114 0072 4A050000 		.4byte	.LASF8
 1115 0076 03       		.uleb128 0x3
 1116 0077 4C040000 		.4byte	.LASF10
 1117 007b 03       		.byte	0x3
 1118 007c 2C       		.byte	0x2c
 1119 007d 41000000 		.4byte	0x41
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 25


 1120 0081 05       		.uleb128 0x5
 1121 0082 33020000 		.4byte	.LASF11
 1122 0086 04       		.byte	0x4
 1123 0087 9201     		.2byte	0x192
 1124 0089 2C000000 		.4byte	0x2c
 1125 008d 05       		.uleb128 0x5
 1126 008e 00000000 		.4byte	.LASF12
 1127 0092 04       		.byte	0x4
 1128 0093 9301     		.2byte	0x193
 1129 0095 3A000000 		.4byte	0x3a
 1130 0099 05       		.uleb128 0x5
 1131 009a 09060000 		.4byte	.LASF13
 1132 009e 04       		.byte	0x4
 1133 009f 9601     		.2byte	0x196
 1134 00a1 33000000 		.4byte	0x33
 1135 00a5 05       		.uleb128 0x5
 1136 00a6 46020000 		.4byte	.LASF14
 1137 00aa 04       		.byte	0x4
 1138 00ab 9701     		.2byte	0x197
 1139 00ad 4C000000 		.4byte	0x4c
 1140 00b1 02       		.uleb128 0x2
 1141 00b2 04       		.byte	0x4
 1142 00b3 04       		.byte	0x4
 1143 00b4 40040000 		.4byte	.LASF15
 1144 00b8 02       		.uleb128 0x2
 1145 00b9 08       		.byte	0x8
 1146 00ba 04       		.byte	0x4
 1147 00bb 3E060000 		.4byte	.LASF16
 1148 00bf 02       		.uleb128 0x2
 1149 00c0 01       		.byte	0x1
 1150 00c1 08       		.byte	0x8
 1151 00c2 45050000 		.4byte	.LASF17
 1152 00c6 02       		.uleb128 0x2
 1153 00c7 08       		.byte	0x8
 1154 00c8 04       		.byte	0x4
 1155 00c9 39050000 		.4byte	.LASF18
 1156 00cd 02       		.uleb128 0x2
 1157 00ce 04       		.byte	0x4
 1158 00cf 07       		.byte	0x7
 1159 00d0 D0030000 		.4byte	.LASF19
 1160 00d4 06       		.uleb128 0x6
 1161 00d5 BF000000 		.4byte	0xbf
 1162 00d9 E4000000 		.4byte	0xe4
 1163 00dd 07       		.uleb128 0x7
 1164 00de CD000000 		.4byte	0xcd
 1165 00e2 17       		.byte	0x17
 1166 00e3 00       		.byte	0
 1167 00e4 08       		.uleb128 0x8
 1168 00e5 8101     		.2byte	0x181
 1169 00e7 05       		.byte	0x5
 1170 00e8 0A       		.byte	0xa
 1171 00e9 12010000 		.4byte	0x112
 1172 00ed 09       		.uleb128 0x9
 1173 00ee D9030000 		.4byte	.LASF20
 1174 00f2 05       		.byte	0x5
 1175 00f3 0C       		.byte	0xc
 1176 00f4 12010000 		.4byte	0x112
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 26


 1177 00f8 00       		.byte	0
 1178 00f9 09       		.uleb128 0x9
 1179 00fa AE050000 		.4byte	.LASF21
 1180 00fe 05       		.byte	0x5
 1181 00ff 0D       		.byte	0xd
 1182 0100 81000000 		.4byte	0x81
 1183 0104 80       		.byte	0x80
 1184 0105 09       		.uleb128 0x9
 1185 0106 D7040000 		.4byte	.LASF22
 1186 010a 05       		.byte	0x5
 1187 010b 0F       		.byte	0xf
 1188 010c 22010000 		.4byte	0x122
 1189 0110 81       		.byte	0x81
 1190 0111 00       		.byte	0
 1191 0112 06       		.uleb128 0x6
 1192 0113 BF000000 		.4byte	0xbf
 1193 0117 22010000 		.4byte	0x122
 1194 011b 07       		.uleb128 0x7
 1195 011c CD000000 		.4byte	0xcd
 1196 0120 7F       		.byte	0x7f
 1197 0121 00       		.byte	0
 1198 0122 06       		.uleb128 0x6
 1199 0123 BF000000 		.4byte	0xbf
 1200 0127 32010000 		.4byte	0x132
 1201 012b 07       		.uleb128 0x7
 1202 012c CD000000 		.4byte	0xcd
 1203 0130 FF       		.byte	0xff
 1204 0131 00       		.byte	0
 1205 0132 03       		.uleb128 0x3
 1206 0133 A2040000 		.4byte	.LASF23
 1207 0137 05       		.byte	0x5
 1208 0138 10       		.byte	0x10
 1209 0139 E4000000 		.4byte	0xe4
 1210 013d 0A       		.uleb128 0xa
 1211 013e 14       		.byte	0x14
 1212 013f 06       		.byte	0x6
 1213 0140 11       		.byte	0x11
 1214 0141 82010000 		.4byte	0x182
 1215 0145 09       		.uleb128 0x9
 1216 0146 07030000 		.4byte	.LASF24
 1217 014a 06       		.byte	0x6
 1218 014b 12       		.byte	0x12
 1219 014c B1000000 		.4byte	0xb1
 1220 0150 00       		.byte	0
 1221 0151 09       		.uleb128 0x9
 1222 0152 37030000 		.4byte	.LASF25
 1223 0156 06       		.byte	0x6
 1224 0157 13       		.byte	0x13
 1225 0158 B1000000 		.4byte	0xb1
 1226 015c 04       		.byte	0x4
 1227 015d 09       		.uleb128 0x9
 1228 015e C6010000 		.4byte	.LASF26
 1229 0162 06       		.byte	0x6
 1230 0163 14       		.byte	0x14
 1231 0164 B1000000 		.4byte	0xb1
 1232 0168 08       		.byte	0x8
 1233 0169 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 27


 1234 016a 22040000 		.4byte	.LASF27
 1235 016e 06       		.byte	0x6
 1236 016f 15       		.byte	0x15
 1237 0170 B1000000 		.4byte	0xb1
 1238 0174 0C       		.byte	0xc
 1239 0175 09       		.uleb128 0x9
 1240 0176 FD040000 		.4byte	.LASF28
 1241 017a 06       		.byte	0x6
 1242 017b 16       		.byte	0x16
 1243 017c 81000000 		.4byte	0x81
 1244 0180 10       		.byte	0x10
 1245 0181 00       		.byte	0
 1246 0182 03       		.uleb128 0x3
 1247 0183 9B030000 		.4byte	.LASF29
 1248 0187 06       		.byte	0x6
 1249 0188 17       		.byte	0x17
 1250 0189 3D010000 		.4byte	0x13d
 1251 018d 0A       		.uleb128 0xa
 1252 018e 10       		.byte	0x10
 1253 018f 06       		.byte	0x6
 1254 0190 19       		.byte	0x19
 1255 0191 C6010000 		.4byte	0x1c6
 1256 0195 09       		.uleb128 0x9
 1257 0196 C5020000 		.4byte	.LASF30
 1258 019a 06       		.byte	0x6
 1259 019b 1A       		.byte	0x1a
 1260 019c B1000000 		.4byte	0xb1
 1261 01a0 00       		.byte	0
 1262 01a1 09       		.uleb128 0x9
 1263 01a2 1E020000 		.4byte	.LASF31
 1264 01a6 06       		.byte	0x6
 1265 01a7 1B       		.byte	0x1b
 1266 01a8 B1000000 		.4byte	0xb1
 1267 01ac 04       		.byte	0x4
 1268 01ad 09       		.uleb128 0x9
 1269 01ae EC040000 		.4byte	.LASF32
 1270 01b2 06       		.byte	0x6
 1271 01b3 1C       		.byte	0x1c
 1272 01b4 B1000000 		.4byte	0xb1
 1273 01b8 08       		.byte	0x8
 1274 01b9 09       		.uleb128 0x9
 1275 01ba A9040000 		.4byte	.LASF33
 1276 01be 06       		.byte	0x6
 1277 01bf 1D       		.byte	0x1d
 1278 01c0 B1000000 		.4byte	0xb1
 1279 01c4 0C       		.byte	0xc
 1280 01c5 00       		.byte	0
 1281 01c6 03       		.uleb128 0x3
 1282 01c7 26060000 		.4byte	.LASF34
 1283 01cb 06       		.byte	0x6
 1284 01cc 1E       		.byte	0x1e
 1285 01cd 8D010000 		.4byte	0x18d
 1286 01d1 0A       		.uleb128 0xa
 1287 01d2 2C       		.byte	0x2c
 1288 01d3 07       		.byte	0x7
 1289 01d4 14       		.byte	0x14
 1290 01d5 FE010000 		.4byte	0x1fe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 28


 1291 01d9 0B       		.uleb128 0xb
 1292 01da 6B657900 		.ascii	"key\000"
 1293 01de 07       		.byte	0x7
 1294 01df 15       		.byte	0x15
 1295 01e0 FE010000 		.4byte	0x1fe
 1296 01e4 00       		.byte	0
 1297 01e5 09       		.uleb128 0x9
 1298 01e6 9C020000 		.4byte	.LASF35
 1299 01ea 07       		.byte	0x7
 1300 01eb 16       		.byte	0x16
 1301 01ec FE010000 		.4byte	0x1fe
 1302 01f0 14       		.byte	0x14
 1303 01f1 09       		.uleb128 0x9
 1304 01f2 FA030000 		.4byte	.LASF36
 1305 01f6 07       		.byte	0x7
 1306 01f7 17       		.byte	0x17
 1307 01f8 A5000000 		.4byte	0xa5
 1308 01fc 28       		.byte	0x28
 1309 01fd 00       		.byte	0
 1310 01fe 06       		.uleb128 0x6
 1311 01ff BF000000 		.4byte	0xbf
 1312 0203 0E020000 		.4byte	0x20e
 1313 0207 07       		.uleb128 0x7
 1314 0208 CD000000 		.4byte	0xcd
 1315 020c 13       		.byte	0x13
 1316 020d 00       		.byte	0
 1317 020e 03       		.uleb128 0x3
 1318 020f E9020000 		.4byte	.LASF37
 1319 0213 07       		.byte	0x7
 1320 0214 19       		.byte	0x19
 1321 0215 D1010000 		.4byte	0x1d1
 1322 0219 0A       		.uleb128 0xa
 1323 021a 3C       		.byte	0x3c
 1324 021b 08       		.byte	0x8
 1325 021c 36       		.byte	0x36
 1326 021d 46020000 		.4byte	0x246
 1327 0221 09       		.uleb128 0x9
 1328 0222 86050000 		.4byte	.LASF38
 1329 0226 08       		.byte	0x8
 1330 0227 37       		.byte	0x37
 1331 0228 FE010000 		.4byte	0x1fe
 1332 022c 00       		.byte	0
 1333 022d 09       		.uleb128 0x9
 1334 022e 6A020000 		.4byte	.LASF39
 1335 0232 08       		.byte	0x8
 1336 0233 38       		.byte	0x38
 1337 0234 FE010000 		.4byte	0x1fe
 1338 0238 14       		.byte	0x14
 1339 0239 09       		.uleb128 0x9
 1340 023a D2040000 		.4byte	.LASF40
 1341 023e 08       		.byte	0x8
 1342 023f 39       		.byte	0x39
 1343 0240 FE010000 		.4byte	0x1fe
 1344 0244 28       		.byte	0x28
 1345 0245 00       		.byte	0
 1346 0246 03       		.uleb128 0x3
 1347 0247 DD010000 		.4byte	.LASF41
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 29


 1348 024b 08       		.byte	0x8
 1349 024c 3B       		.byte	0x3b
 1350 024d 19020000 		.4byte	0x219
 1351 0251 0A       		.uleb128 0xa
 1352 0252 20       		.byte	0x20
 1353 0253 08       		.byte	0x8
 1354 0254 3D       		.byte	0x3d
 1355 0255 BA020000 		.4byte	0x2ba
 1356 0259 09       		.uleb128 0x9
 1357 025a FC010000 		.4byte	.LASF42
 1358 025e 08       		.byte	0x8
 1359 025f 3E       		.byte	0x3e
 1360 0260 68000000 		.4byte	0x68
 1361 0264 00       		.byte	0
 1362 0265 0B       		.uleb128 0xb
 1363 0266 62657200 		.ascii	"ber\000"
 1364 026a 08       		.byte	0x8
 1365 026b 3F       		.byte	0x3f
 1366 026c 68000000 		.4byte	0x68
 1367 0270 04       		.byte	0x4
 1368 0271 09       		.uleb128 0x9
 1369 0272 B8040000 		.4byte	.LASF43
 1370 0276 08       		.byte	0x8
 1371 0277 40       		.byte	0x40
 1372 0278 68000000 		.4byte	0x68
 1373 027c 08       		.byte	0x8
 1374 027d 09       		.uleb128 0x9
 1375 027e 90010000 		.4byte	.LASF44
 1376 0282 08       		.byte	0x8
 1377 0283 41       		.byte	0x41
 1378 0284 68000000 		.4byte	0x68
 1379 0288 0C       		.byte	0xc
 1380 0289 09       		.uleb128 0x9
 1381 028a 8C040000 		.4byte	.LASF45
 1382 028e 08       		.byte	0x8
 1383 028f 42       		.byte	0x42
 1384 0290 68000000 		.4byte	0x68
 1385 0294 10       		.byte	0x10
 1386 0295 09       		.uleb128 0x9
 1387 0296 87040000 		.4byte	.LASF46
 1388 029a 08       		.byte	0x8
 1389 029b 43       		.byte	0x43
 1390 029c 68000000 		.4byte	0x68
 1391 02a0 14       		.byte	0x14
 1392 02a1 09       		.uleb128 0x9
 1393 02a2 A3010000 		.4byte	.LASF47
 1394 02a6 08       		.byte	0x8
 1395 02a7 44       		.byte	0x44
 1396 02a8 68000000 		.4byte	0x68
 1397 02ac 18       		.byte	0x18
 1398 02ad 09       		.uleb128 0x9
 1399 02ae 5B030000 		.4byte	.LASF48
 1400 02b2 08       		.byte	0x8
 1401 02b3 45       		.byte	0x45
 1402 02b4 68000000 		.4byte	0x68
 1403 02b8 1C       		.byte	0x1c
 1404 02b9 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 30


 1405 02ba 03       		.uleb128 0x3
 1406 02bb DE040000 		.4byte	.LASF49
 1407 02bf 08       		.byte	0x8
 1408 02c0 47       		.byte	0x47
 1409 02c1 51020000 		.4byte	0x251
 1410 02c5 0A       		.uleb128 0xa
 1411 02c6 07       		.byte	0x7
 1412 02c7 08       		.byte	0x8
 1413 02c8 53       		.byte	0x53
 1414 02c9 22030000 		.4byte	0x322
 1415 02cd 09       		.uleb128 0x9
 1416 02ce 4C020000 		.4byte	.LASF50
 1417 02d2 08       		.byte	0x8
 1418 02d3 55       		.byte	0x55
 1419 02d4 81000000 		.4byte	0x81
 1420 02d8 00       		.byte	0
 1421 02d9 09       		.uleb128 0x9
 1422 02da 1D060000 		.4byte	.LASF51
 1423 02de 08       		.byte	0x8
 1424 02df 57       		.byte	0x57
 1425 02e0 22030000 		.4byte	0x322
 1426 02e4 01       		.byte	0x1
 1427 02e5 09       		.uleb128 0x9
 1428 02e6 31060000 		.4byte	.LASF52
 1429 02ea 08       		.byte	0x8
 1430 02eb 59       		.byte	0x59
 1431 02ec 81000000 		.4byte	0x81
 1432 02f0 02       		.byte	0x2
 1433 02f1 09       		.uleb128 0x9
 1434 02f2 91040000 		.4byte	.LASF53
 1435 02f6 08       		.byte	0x8
 1436 02f7 5B       		.byte	0x5b
 1437 02f8 81000000 		.4byte	0x81
 1438 02fc 03       		.byte	0x3
 1439 02fd 09       		.uleb128 0x9
 1440 02fe 90020000 		.4byte	.LASF54
 1441 0302 08       		.byte	0x8
 1442 0303 5E       		.byte	0x5e
 1443 0304 81000000 		.4byte	0x81
 1444 0308 04       		.byte	0x4
 1445 0309 09       		.uleb128 0x9
 1446 030a E3050000 		.4byte	.LASF55
 1447 030e 08       		.byte	0x8
 1448 030f 63       		.byte	0x63
 1449 0310 81000000 		.4byte	0x81
 1450 0314 05       		.byte	0x5
 1451 0315 09       		.uleb128 0x9
 1452 0316 14050000 		.4byte	.LASF56
 1453 031a 08       		.byte	0x8
 1454 031b 65       		.byte	0x65
 1455 031c 81000000 		.4byte	0x81
 1456 0320 06       		.byte	0x6
 1457 0321 00       		.byte	0
 1458 0322 02       		.uleb128 0x2
 1459 0323 01       		.byte	0x1
 1460 0324 02       		.byte	0x2
 1461 0325 46040000 		.4byte	.LASF57
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 31


 1462 0329 03       		.uleb128 0x3
 1463 032a 13010000 		.4byte	.LASF58
 1464 032e 08       		.byte	0x8
 1465 032f 67       		.byte	0x67
 1466 0330 C5020000 		.4byte	0x2c5
 1467 0334 0A       		.uleb128 0xa
 1468 0335 06       		.byte	0x6
 1469 0336 09       		.byte	0x9
 1470 0337 2E       		.byte	0x2e
 1471 0338 6D030000 		.4byte	0x36d
 1472 033c 09       		.uleb128 0x9
 1473 033d 73020000 		.4byte	.LASF59
 1474 0341 09       		.byte	0x9
 1475 0342 30       		.byte	0x30
 1476 0343 8D000000 		.4byte	0x8d
 1477 0347 00       		.byte	0
 1478 0348 09       		.uleb128 0x9
 1479 0349 02020000 		.4byte	.LASF60
 1480 034d 09       		.byte	0x9
 1481 034e 31       		.byte	0x31
 1482 034f 99000000 		.4byte	0x99
 1483 0353 02       		.byte	0x2
 1484 0354 09       		.uleb128 0x9
 1485 0355 0F060000 		.4byte	.LASF61
 1486 0359 09       		.byte	0x9
 1487 035a 32       		.byte	0x32
 1488 035b 81000000 		.4byte	0x81
 1489 035f 04       		.byte	0x4
 1490 0360 09       		.uleb128 0x9
 1491 0361 56000000 		.4byte	.LASF62
 1492 0365 09       		.byte	0x9
 1493 0366 33       		.byte	0x33
 1494 0367 81000000 		.4byte	0x81
 1495 036b 05       		.byte	0x5
 1496 036c 00       		.byte	0
 1497 036d 03       		.uleb128 0x3
 1498 036e 18020000 		.4byte	.LASF63
 1499 0372 09       		.byte	0x9
 1500 0373 36       		.byte	0x36
 1501 0374 78030000 		.4byte	0x378
 1502 0378 0C       		.uleb128 0xc
 1503 0379 34030000 		.4byte	0x334
 1504 037d 0A       		.uleb128 0xa
 1505 037e 1C       		.byte	0x1c
 1506 037f 09       		.byte	0x9
 1507 0380 39       		.byte	0x39
 1508 0381 9E030000 		.4byte	0x39e
 1509 0385 09       		.uleb128 0x9
 1510 0386 24030000 		.4byte	.LASF64
 1511 038a 09       		.byte	0x9
 1512 038b 3B       		.byte	0x3b
 1513 038c 9E030000 		.4byte	0x39e
 1514 0390 00       		.byte	0
 1515 0391 09       		.uleb128 0x9
 1516 0392 5C020000 		.4byte	.LASF65
 1517 0396 09       		.byte	0x9
 1518 0397 3C       		.byte	0x3c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 32


 1519 0398 D4000000 		.4byte	0xd4
 1520 039c 04       		.byte	0x4
 1521 039d 00       		.byte	0
 1522 039e 0D       		.uleb128 0xd
 1523 039f 04       		.byte	0x4
 1524 03a0 46020000 		.4byte	0x246
 1525 03a4 03       		.uleb128 0x3
 1526 03a5 A5030000 		.4byte	.LASF66
 1527 03a9 09       		.byte	0x9
 1528 03aa 3E       		.byte	0x3e
 1529 03ab 7D030000 		.4byte	0x37d
 1530 03af 0A       		.uleb128 0xa
 1531 03b0 68       		.byte	0x68
 1532 03b1 09       		.byte	0x9
 1533 03b2 44       		.byte	0x44
 1534 03b3 D0030000 		.4byte	0x3d0
 1535 03b7 09       		.uleb128 0x9
 1536 03b8 2F030000 		.4byte	.LASF67
 1537 03bc 09       		.byte	0x9
 1538 03bd 49       		.byte	0x49
 1539 03be D0030000 		.4byte	0x3d0
 1540 03c2 00       		.byte	0
 1541 03c3 09       		.uleb128 0x9
 1542 03c4 1C030000 		.4byte	.LASF68
 1543 03c8 09       		.byte	0x9
 1544 03c9 4A       		.byte	0x4a
 1545 03ca 68000000 		.4byte	0x68
 1546 03ce 64       		.byte	0x64
 1547 03cf 00       		.byte	0
 1548 03d0 06       		.uleb128 0x6
 1549 03d1 BF000000 		.4byte	0xbf
 1550 03d5 E0030000 		.4byte	0x3e0
 1551 03d9 07       		.uleb128 0x7
 1552 03da CD000000 		.4byte	0xcd
 1553 03de 63       		.byte	0x63
 1554 03df 00       		.byte	0
 1555 03e0 03       		.uleb128 0x3
 1556 03e1 F0050000 		.4byte	.LASF69
 1557 03e5 09       		.byte	0x9
 1558 03e6 50       		.byte	0x50
 1559 03e7 AF030000 		.4byte	0x3af
 1560 03eb 0E       		.uleb128 0xe
 1561 03ec 98050000 		.4byte	.LASF74
 1562 03f0 01       		.byte	0x1
 1563 03f1 06       		.byte	0x6
 1564 03f2 82010000 		.4byte	0x182
 1565 03f6 00000000 		.4byte	.LFB64
 1566 03fa 34010000 		.4byte	.LFE64-.LFB64
 1567 03fe 01       		.uleb128 0x1
 1568 03ff 9C       		.byte	0x9c
 1569 0400 74040000 		.4byte	0x474
 1570 0404 0F       		.uleb128 0xf
 1571 0405 2A010000 		.4byte	.LASF70
 1572 0409 01       		.byte	0x1
 1573 040a 08       		.byte	0x8
 1574 040b 82010000 		.4byte	0x182
 1575 040f 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 33


 1576 0410 91       		.byte	0x91
 1577 0411 54       		.sleb128 -44
 1578 0412 0F       		.uleb128 0xf
 1579 0413 EA010000 		.4byte	.LASF71
 1580 0417 01       		.byte	0x1
 1581 0418 15       		.byte	0x15
 1582 0419 74040000 		.4byte	0x474
 1583 041d 02       		.uleb128 0x2
 1584 041e 91       		.byte	0x91
 1585 041f 44       		.sleb128 -60
 1586 0420 0F       		.uleb128 0xf
 1587 0421 6C050000 		.4byte	.LASF72
 1588 0425 01       		.byte	0x1
 1589 0426 31       		.byte	0x31
 1590 0427 B1000000 		.4byte	0xb1
 1591 042b 02       		.uleb128 0x2
 1592 042c 91       		.byte	0x91
 1593 042d 68       		.sleb128 -24
 1594 042e 10       		.uleb128 0x10
 1595 042f 26000000 		.4byte	.LBB2
 1596 0433 7A000000 		.4byte	.LBE2-.LBB2
 1597 0437 11       		.uleb128 0x11
 1598 0438 6300     		.ascii	"c\000"
 1599 043a 01       		.byte	0x1
 1600 043b 17       		.byte	0x17
 1601 043c 81000000 		.4byte	0x81
 1602 0440 02       		.uleb128 0x2
 1603 0441 91       		.byte	0x91
 1604 0442 6F       		.sleb128 -17
 1605 0443 10       		.uleb128 0x10
 1606 0444 2E000000 		.4byte	.LBB3
 1607 0448 60000000 		.4byte	.LBE3-.LBB3
 1608 044c 0F       		.uleb128 0xf
 1609 044d BD040000 		.4byte	.LASF73
 1610 0451 01       		.byte	0x1
 1611 0452 1A       		.byte	0x1a
 1612 0453 84040000 		.4byte	0x484
 1613 0457 03       		.uleb128 0x3
 1614 0458 91       		.byte	0x91
 1615 0459 987F     		.sleb128 -104
 1616 045b 10       		.uleb128 0x10
 1617 045c 38000000 		.4byte	.LBB4
 1618 0460 30000000 		.4byte	.LBE4-.LBB4
 1619 0464 11       		.uleb128 0x11
 1620 0465 6900     		.ascii	"i\000"
 1621 0467 01       		.byte	0x1
 1622 0468 1E       		.byte	0x1e
 1623 0469 8D000000 		.4byte	0x8d
 1624 046d 02       		.uleb128 0x2
 1625 046e 91       		.byte	0x91
 1626 046f 6C       		.sleb128 -20
 1627 0470 00       		.byte	0
 1628 0471 00       		.byte	0
 1629 0472 00       		.byte	0
 1630 0473 00       		.byte	0
 1631 0474 06       		.uleb128 0x6
 1632 0475 B1000000 		.4byte	0xb1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 34


 1633 0479 84040000 		.4byte	0x484
 1634 047d 07       		.uleb128 0x7
 1635 047e CD000000 		.4byte	0xcd
 1636 0482 03       		.byte	0x3
 1637 0483 00       		.byte	0
 1638 0484 06       		.uleb128 0x6
 1639 0485 A5000000 		.4byte	0xa5
 1640 0489 94040000 		.4byte	0x494
 1641 048d 07       		.uleb128 0x7
 1642 048e CD000000 		.4byte	0xcd
 1643 0492 0A       		.byte	0xa
 1644 0493 00       		.byte	0
 1645 0494 0E       		.uleb128 0xe
 1646 0495 A2020000 		.4byte	.LASF75
 1647 0499 01       		.byte	0x1
 1648 049a 3E       		.byte	0x3e
 1649 049b C6010000 		.4byte	0x1c6
 1650 049f 00000000 		.4byte	.LFB65
 1651 04a3 98010000 		.4byte	.LFE65-.LFB65
 1652 04a7 01       		.uleb128 0x1
 1653 04a8 9C       		.byte	0x9c
 1654 04a9 09050000 		.4byte	0x509
 1655 04ad 0F       		.uleb128 0xf
 1656 04ae 19040000 		.4byte	.LASF76
 1657 04b2 01       		.byte	0x1
 1658 04b3 40       		.byte	0x40
 1659 04b4 C6010000 		.4byte	0x1c6
 1660 04b8 02       		.uleb128 0x2
 1661 04b9 91       		.byte	0x91
 1662 04ba 5C       		.sleb128 -36
 1663 04bb 0F       		.uleb128 0xf
 1664 04bc EA010000 		.4byte	.LASF71
 1665 04c0 01       		.byte	0x1
 1666 04c1 41       		.byte	0x41
 1667 04c2 74040000 		.4byte	0x474
 1668 04c6 02       		.uleb128 0x2
 1669 04c7 91       		.byte	0x91
 1670 04c8 4C       		.sleb128 -52
 1671 04c9 0F       		.uleb128 0xf
 1672 04ca BD040000 		.4byte	.LASF73
 1673 04ce 01       		.byte	0x1
 1674 04cf 42       		.byte	0x42
 1675 04d0 84040000 		.4byte	0x484
 1676 04d4 03       		.uleb128 0x3
 1677 04d5 91       		.byte	0x91
 1678 04d6 A07F     		.sleb128 -96
 1679 04d8 12       		.uleb128 0x12
 1680 04d9 1A000000 		.4byte	.LBB5
 1681 04dd 30000000 		.4byte	.LBE5-.LBB5
 1682 04e1 F2040000 		.4byte	0x4f2
 1683 04e5 11       		.uleb128 0x11
 1684 04e6 6900     		.ascii	"i\000"
 1685 04e8 01       		.byte	0x1
 1686 04e9 4C       		.byte	0x4c
 1687 04ea 8D000000 		.4byte	0x8d
 1688 04ee 02       		.uleb128 0x2
 1689 04ef 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 35


 1690 04f0 6E       		.sleb128 -18
 1691 04f1 00       		.byte	0
 1692 04f2 10       		.uleb128 0x10
 1693 04f3 8E000000 		.4byte	.LBB6
 1694 04f7 30000000 		.4byte	.LBE6-.LBB6
 1695 04fb 11       		.uleb128 0x11
 1696 04fc 6900     		.ascii	"i\000"
 1697 04fe 01       		.byte	0x1
 1698 04ff 59       		.byte	0x59
 1699 0500 8D000000 		.4byte	0x8d
 1700 0504 02       		.uleb128 0x2
 1701 0505 91       		.byte	0x91
 1702 0506 6C       		.sleb128 -20
 1703 0507 00       		.byte	0
 1704 0508 00       		.byte	0
 1705 0509 13       		.uleb128 0x13
 1706 050a 45030000 		.4byte	.LASF79
 1707 050e 01       		.byte	0x1
 1708 050f 74       		.byte	0x74
 1709 0510 C6010000 		.4byte	0x1c6
 1710 0514 00000000 		.4byte	.LFB66
 1711 0518 C4000000 		.4byte	.LFE66-.LFB66
 1712 051c 01       		.uleb128 0x1
 1713 051d 9C       		.byte	0x9c
 1714 051e 3F050000 		.4byte	0x53f
 1715 0522 14       		.uleb128 0x14
 1716 0523 2A010000 		.4byte	.LASF70
 1717 0527 01       		.byte	0x1
 1718 0528 74       		.byte	0x74
 1719 0529 82010000 		.4byte	0x182
 1720 052d 02       		.uleb128 0x2
 1721 052e 91       		.byte	0x91
 1722 052f 74       		.sleb128 -12
 1723 0530 0F       		.uleb128 0xf
 1724 0531 19040000 		.4byte	.LASF76
 1725 0535 01       		.byte	0x1
 1726 0536 76       		.byte	0x76
 1727 0537 C6010000 		.4byte	0x1c6
 1728 053b 02       		.uleb128 0x2
 1729 053c 91       		.byte	0x91
 1730 053d 50       		.sleb128 -48
 1731 053e 00       		.byte	0
 1732 053f 15       		.uleb128 0x15
 1733 0540 4F000000 		.4byte	.LASF77
 1734 0544 01       		.byte	0x1
 1735 0545 86       		.byte	0x86
 1736 0546 00000000 		.4byte	.LFB67
 1737 054a 74000000 		.4byte	.LFE67-.LFB67
 1738 054e 01       		.uleb128 0x1
 1739 054f 9C       		.byte	0x9c
 1740 0550 85050000 		.4byte	0x585
 1741 0554 16       		.uleb128 0x16
 1742 0555 6100     		.ascii	"a\000"
 1743 0557 01       		.byte	0x1
 1744 0558 86       		.byte	0x86
 1745 0559 85050000 		.4byte	0x585
 1746 055d 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 36


 1747 055e 91       		.byte	0x91
 1748 055f 6C       		.sleb128 -20
 1749 0560 16       		.uleb128 0x16
 1750 0561 6E00     		.ascii	"n\000"
 1751 0563 01       		.byte	0x1
 1752 0564 86       		.byte	0x86
 1753 0565 A5000000 		.4byte	0xa5
 1754 0569 02       		.uleb128 0x2
 1755 056a 91       		.byte	0x91
 1756 056b 68       		.sleb128 -24
 1757 056c 11       		.uleb128 0x11
 1758 056d 6900     		.ascii	"i\000"
 1759 056f 01       		.byte	0x1
 1760 0570 87       		.byte	0x87
 1761 0571 A5000000 		.4byte	0xa5
 1762 0575 02       		.uleb128 0x2
 1763 0576 91       		.byte	0x91
 1764 0577 74       		.sleb128 -12
 1765 0578 11       		.uleb128 0x11
 1766 0579 6A00     		.ascii	"j\000"
 1767 057b 01       		.byte	0x1
 1768 057c 87       		.byte	0x87
 1769 057d A5000000 		.4byte	0xa5
 1770 0581 02       		.uleb128 0x2
 1771 0582 91       		.byte	0x91
 1772 0583 70       		.sleb128 -16
 1773 0584 00       		.byte	0
 1774 0585 0D       		.uleb128 0xd
 1775 0586 04       		.byte	0x4
 1776 0587 A5000000 		.4byte	0xa5
 1777 058b 17       		.uleb128 0x17
 1778 058c 9B040000 		.4byte	.LASF78
 1779 0590 01       		.byte	0x1
 1780 0591 92       		.byte	0x92
 1781 0592 00000000 		.4byte	.LFB68
 1782 0596 28000000 		.4byte	.LFE68-.LFB68
 1783 059a 01       		.uleb128 0x1
 1784 059b 9C       		.byte	0x9c
 1785 059c C5050000 		.4byte	0x5c5
 1786 05a0 16       		.uleb128 0x16
 1787 05a1 7000     		.ascii	"p\000"
 1788 05a3 01       		.byte	0x1
 1789 05a4 92       		.byte	0x92
 1790 05a5 85050000 		.4byte	0x585
 1791 05a9 02       		.uleb128 0x2
 1792 05aa 91       		.byte	0x91
 1793 05ab 6C       		.sleb128 -20
 1794 05ac 16       		.uleb128 0x16
 1795 05ad 7100     		.ascii	"q\000"
 1796 05af 01       		.byte	0x1
 1797 05b0 92       		.byte	0x92
 1798 05b1 85050000 		.4byte	0x585
 1799 05b5 02       		.uleb128 0x2
 1800 05b6 91       		.byte	0x91
 1801 05b7 68       		.sleb128 -24
 1802 05b8 11       		.uleb128 0x11
 1803 05b9 7400     		.ascii	"t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 37


 1804 05bb 01       		.byte	0x1
 1805 05bc 93       		.byte	0x93
 1806 05bd A5000000 		.4byte	0xa5
 1807 05c1 02       		.uleb128 0x2
 1808 05c2 91       		.byte	0x91
 1809 05c3 74       		.sleb128 -12
 1810 05c4 00       		.byte	0
 1811 05c5 13       		.uleb128 0x13
 1812 05c6 82020000 		.4byte	.LASF80
 1813 05ca 01       		.byte	0x1
 1814 05cb 9B       		.byte	0x9b
 1815 05cc A5000000 		.4byte	0xa5
 1816 05d0 00000000 		.4byte	.LFB69
 1817 05d4 84000000 		.4byte	.LFE69-.LFB69
 1818 05d8 01       		.uleb128 0x1
 1819 05d9 9C       		.byte	0x9c
 1820 05da 07060000 		.4byte	0x607
 1821 05de 14       		.uleb128 0x14
 1822 05df 56020000 		.4byte	.LASF81
 1823 05e3 01       		.byte	0x1
 1824 05e4 9B       		.byte	0x9b
 1825 05e5 85050000 		.4byte	0x585
 1826 05e9 02       		.uleb128 0x2
 1827 05ea 91       		.byte	0x91
 1828 05eb 64       		.sleb128 -28
 1829 05ec 16       		.uleb128 0x16
 1830 05ed 6E00     		.ascii	"n\000"
 1831 05ef 01       		.byte	0x1
 1832 05f0 9B       		.byte	0x9b
 1833 05f1 A5000000 		.4byte	0xa5
 1834 05f5 02       		.uleb128 0x2
 1835 05f6 91       		.byte	0x91
 1836 05f7 60       		.sleb128 -32
 1837 05f8 0F       		.uleb128 0xf
 1838 05f9 51010000 		.4byte	.LASF82
 1839 05fd 01       		.byte	0x1
 1840 05fe 9D       		.byte	0x9d
 1841 05ff A5000000 		.4byte	0xa5
 1842 0603 02       		.uleb128 0x2
 1843 0604 91       		.byte	0x91
 1844 0605 6C       		.sleb128 -20
 1845 0606 00       		.byte	0
 1846 0607 0E       		.uleb128 0xe
 1847 0608 B0030000 		.4byte	.LASF83
 1848 060c 01       		.byte	0x1
 1849 060d AD       		.byte	0xad
 1850 060e 32010000 		.4byte	0x132
 1851 0612 00000000 		.4byte	.LFB70
 1852 0616 BC000000 		.4byte	.LFE70-.LFB70
 1853 061a 01       		.uleb128 0x1
 1854 061b 9C       		.byte	0x9c
 1855 061c 3F060000 		.4byte	0x63f
 1856 0620 0F       		.uleb128 0xf
 1857 0621 32010000 		.4byte	.LASF84
 1858 0625 01       		.byte	0x1
 1859 0626 AF       		.byte	0xaf
 1860 0627 32010000 		.4byte	0x132
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 38


 1861 062b 03       		.uleb128 0x3
 1862 062c 91       		.byte	0x91
 1863 062d E47C     		.sleb128 -412
 1864 062f 0F       		.uleb128 0xf
 1865 0630 2A010000 		.4byte	.LASF70
 1866 0634 01       		.byte	0x1
 1867 0635 B3       		.byte	0xb3
 1868 0636 82010000 		.4byte	0x182
 1869 063a 03       		.uleb128 0x3
 1870 063b 91       		.byte	0x91
 1871 063c D07C     		.sleb128 -432
 1872 063e 00       		.byte	0
 1873 063f 0E       		.uleb128 0xe
 1874 0640 62040000 		.4byte	.LASF85
 1875 0644 01       		.byte	0x1
 1876 0645 C2       		.byte	0xc2
 1877 0646 32010000 		.4byte	0x132
 1878 064a 00000000 		.4byte	.LFB71
 1879 064e 04010000 		.4byte	.LFE71-.LFB71
 1880 0652 01       		.uleb128 0x1
 1881 0653 9C       		.byte	0x9c
 1882 0654 77060000 		.4byte	0x677
 1883 0658 0F       		.uleb128 0xf
 1884 0659 32010000 		.4byte	.LASF84
 1885 065d 01       		.byte	0x1
 1886 065e C4       		.byte	0xc4
 1887 065f 32010000 		.4byte	0x132
 1888 0663 03       		.uleb128 0x3
 1889 0664 91       		.byte	0x91
 1890 0665 E47C     		.sleb128 -412
 1891 0667 0F       		.uleb128 0xf
 1892 0668 19040000 		.4byte	.LASF76
 1893 066c 01       		.byte	0x1
 1894 066d C8       		.byte	0xc8
 1895 066e C6010000 		.4byte	0x1c6
 1896 0672 03       		.uleb128 0x3
 1897 0673 91       		.byte	0x91
 1898 0674 D47C     		.sleb128 -428
 1899 0676 00       		.byte	0
 1900 0677 18       		.uleb128 0x18
 1901 0678 44010000 		.4byte	.LASF86
 1902 067c 0A       		.byte	0xa
 1903 067d 1207     		.2byte	0x712
 1904 067f 83060000 		.4byte	0x683
 1905 0683 0C       		.uleb128 0xc
 1906 0684 76000000 		.4byte	0x76
 1907 0688 19       		.uleb128 0x19
 1908 0689 26050000 		.4byte	.LASF87
 1909 068d 0B       		.byte	0xb
 1910 068e 25       		.byte	0x25
 1911 068f D0030000 		.4byte	0x3d0
 1912 0693 05       		.uleb128 0x5
 1913 0694 03       		.byte	0x3
 1914 0695 00000000 		.4byte	level_sensor_inbox
 1915 0699 19       		.uleb128 0x19
 1916 069a B5050000 		.4byte	.LASF88
 1917 069e 0B       		.byte	0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 39


 1918 069f 27       		.byte	0x27
 1919 06a0 22030000 		.4byte	0x322
 1920 06a4 05       		.uleb128 0x5
 1921 06a5 03       		.byte	0x3
 1922 06a6 00000000 		.4byte	level_sensor_enabled
 1923 06aa 19       		.uleb128 0x19
 1924 06ab 3F000000 		.4byte	.LASF89
 1925 06af 07       		.byte	0x7
 1926 06b0 11       		.byte	0x11
 1927 06b1 22030000 		.4byte	0x322
 1928 06b5 05       		.uleb128 0x5
 1929 06b6 03       		.byte	0x3
 1930 06b7 00000000 		.4byte	buffer_overflow
 1931 06bb 19       		.uleb128 0x19
 1932 06bc BE030000 		.4byte	.LASF90
 1933 06c0 07       		.byte	0x7
 1934 06c1 22       		.byte	0x22
 1935 06c2 8D000000 		.4byte	0x8d
 1936 06c6 05       		.uleb128 0x5
 1937 06c7 03       		.byte	0x3
 1938 06c8 00000000 		.4byte	dataPointsInStack
 1939 06cc 19       		.uleb128 0x19
 1940 06cd CA050000 		.4byte	.LASF91
 1941 06d1 07       		.byte	0x7
 1942 06d2 23       		.byte	0x23
 1943 06d3 8D000000 		.4byte	0x8d
 1944 06d7 05       		.uleb128 0x5
 1945 06d8 03       		.byte	0x3
 1946 06d9 00000000 		.4byte	dataPointsInStackDesired
 1947 06dd 06       		.uleb128 0x6
 1948 06de 0E020000 		.4byte	0x20e
 1949 06e2 ED060000 		.4byte	0x6ed
 1950 06e6 07       		.uleb128 0x7
 1951 06e7 CD000000 		.4byte	0xcd
 1952 06eb 95       		.byte	0x95
 1953 06ec 00       		.byte	0
 1954 06ed 19       		.uleb128 0x19
 1955 06ee 17030000 		.4byte	.LASF92
 1956 06f2 07       		.byte	0x7
 1957 06f3 24       		.byte	0x24
 1958 06f4 DD060000 		.4byte	0x6dd
 1959 06f8 05       		.uleb128 0x5
 1960 06f9 03       		.byte	0x3
 1961 06fa 00000000 		.4byte	data
 1962 06fe 19       		.uleb128 0x19
 1963 06ff 53060000 		.4byte	.LASF93
 1964 0703 08       		.byte	0x8
 1965 0704 20       		.byte	0x20
 1966 0705 81000000 		.4byte	0x81
 1967 0709 05       		.uleb128 0x5
 1968 070a 03       		.byte	0x3
 1969 070b 00000000 		.4byte	modem_state
 1970 070f 19       		.uleb128 0x19
 1971 0710 84030000 		.4byte	.LASF94
 1972 0714 08       		.byte	0x8
 1973 0715 6A       		.byte	0x6a
 1974 0716 A5000000 		.4byte	0xa5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 40


 1975 071a 05       		.uleb128 0x5
 1976 071b 03       		.byte	0x3
 1977 071c 00000000 		.4byte	modem_start_time_stamp
 1978 0720 19       		.uleb128 0x19
 1979 0721 24030000 		.4byte	.LASF64
 1980 0725 08       		.byte	0x8
 1981 0726 6B       		.byte	0x6b
 1982 0727 46020000 		.4byte	0x246
 1983 072b 05       		.uleb128 0x5
 1984 072c 03       		.byte	0x3
 1985 072d 00000000 		.4byte	modem_info
 1986 0731 19       		.uleb128 0x19
 1987 0732 6A010000 		.4byte	.LASF95
 1988 0736 08       		.byte	0x8
 1989 0737 6C       		.byte	0x6c
 1990 0738 BA020000 		.4byte	0x2ba
 1991 073c 05       		.uleb128 0x5
 1992 073d 03       		.byte	0x3
 1993 073e 00000000 		.4byte	modem_stats
 1994 0742 19       		.uleb128 0x19
 1995 0743 04040000 		.4byte	.LASF96
 1996 0747 08       		.byte	0x8
 1997 0748 6D       		.byte	0x6d
 1998 0749 29030000 		.4byte	0x329
 1999 074d 05       		.uleb128 0x5
 2000 074e 03       		.byte	0x3
 2001 074f 00000000 		.4byte	updatable_parameters
 2002 0753 19       		.uleb128 0x19
 2003 0754 D9020000 		.4byte	.LASF97
 2004 0758 0C       		.byte	0xc
 2005 0759 07       		.byte	0x7
 2006 075a 22030000 		.4byte	0x322
 2007 075e 05       		.uleb128 0x5
 2008 075f 03       		.byte	0x3
 2009 0760 00000000 		.4byte	App_LED_enabled
 2010 0764 19       		.uleb128 0x19
 2011 0765 45060000 		.4byte	.LASF98
 2012 0769 0C       		.byte	0xc
 2013 076a 08       		.byte	0x8
 2014 076b D0030000 		.4byte	0x3d0
 2015 076f 05       		.uleb128 0x5
 2016 0770 03       		.byte	0x3
 2017 0771 00000000 		.4byte	app_led_inbox
 2018 0775 06       		.uleb128 0x6
 2019 0776 BF000000 		.4byte	0xbf
 2020 077a 86070000 		.4byte	0x786
 2021 077e 1A       		.uleb128 0x1a
 2022 077f CD000000 		.4byte	0xcd
 2023 0783 0F27     		.2byte	0x270f
 2024 0785 00       		.byte	0
 2025 0786 19       		.uleb128 0x19
 2026 0787 33040000 		.4byte	.LASF99
 2027 078b 09       		.byte	0x9
 2028 078c 18       		.byte	0x18
 2029 078d 75070000 		.4byte	0x775
 2030 0791 05       		.uleb128 0x5
 2031 0792 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 41


 2032 0793 00000000 		.4byte	http_request
 2033 0797 19       		.uleb128 0x19
 2034 0798 FF050000 		.4byte	.LASF100
 2035 079c 09       		.byte	0x9
 2036 079d 19       		.byte	0x19
 2037 079e 75070000 		.4byte	0x775
 2038 07a2 05       		.uleb128 0x5
 2039 07a3 03       		.byte	0x3
 2040 07a4 00000000 		.4byte	http_body
 2041 07a8 06       		.uleb128 0x6
 2042 07a9 BF000000 		.4byte	0xbf
 2043 07ad B8070000 		.4byte	0x7b8
 2044 07b1 07       		.uleb128 0x7
 2045 07b2 CD000000 		.4byte	0xcd
 2046 07b6 C7       		.byte	0xc7
 2047 07b7 00       		.byte	0
 2048 07b8 19       		.uleb128 0x19
 2049 07b9 57050000 		.4byte	.LASF101
 2050 07bd 09       		.byte	0x9
 2051 07be 1A       		.byte	0x1a
 2052 07bf A8070000 		.4byte	0x7a8
 2053 07c3 05       		.uleb128 0x5
 2054 07c4 03       		.byte	0x3
 2055 07c5 00000000 		.4byte	http_route
 2056 07c9 19       		.uleb128 0x19
 2057 07ca C6040000 		.4byte	.LASF102
 2058 07ce 09       		.byte	0x9
 2059 07cf 41       		.byte	0x41
 2060 07d0 A4030000 		.4byte	0x3a4
 2061 07d4 05       		.uleb128 0x5
 2062 07d5 03       		.byte	0x3
 2063 07d6 00000000 		.4byte	system_info
 2064 07da 19       		.uleb128 0x19
 2065 07db 77040000 		.4byte	.LASF103
 2066 07df 09       		.byte	0x9
 2067 07e0 53       		.byte	0x53
 2068 07e1 E0030000 		.4byte	0x3e0
 2069 07e5 05       		.uleb128 0x5
 2070 07e6 03       		.byte	0x3
 2071 07e7 00000000 		.4byte	system_settings
 2072 07eb 19       		.uleb128 0x19
 2073 07ec 37010000 		.4byte	.LASF104
 2074 07f0 09       		.byte	0x9
 2075 07f1 6F       		.byte	0x6f
 2076 07f2 6D030000 		.4byte	0x36d
 2077 07f6 05       		.uleb128 0x5
 2078 07f7 03       		.byte	0x3
 2079 07f8 00000000 		.4byte	alarmMeasure
 2080 07fc 19       		.uleb128 0x19
 2081 07fd 95010000 		.4byte	.LASF105
 2082 0801 09       		.byte	0x9
 2083 0802 70       		.byte	0x70
 2084 0803 81000000 		.4byte	0x81
 2085 0807 05       		.uleb128 0x5
 2086 0808 03       		.byte	0x3
 2087 0809 00000000 		.4byte	timeToMeasure
 2088 080d 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 42


 2089 080e BB020000 		.4byte	.LASF106
 2090 0812 09       		.byte	0x9
 2091 0813 71       		.byte	0x71
 2092 0814 6D030000 		.4byte	0x36d
 2093 0818 05       		.uleb128 0x5
 2094 0819 03       		.byte	0x3
 2095 081a 00000000 		.4byte	alarmSync
 2096 081e 19       		.uleb128 0x19
 2097 081f BB010000 		.4byte	.LASF107
 2098 0823 09       		.byte	0x9
 2099 0824 72       		.byte	0x72
 2100 0825 81000000 		.4byte	0x81
 2101 0829 05       		.uleb128 0x5
 2102 082a 03       		.byte	0x3
 2103 082b 00000000 		.4byte	timeToSync
 2104 082f 19       		.uleb128 0x19
 2105 0830 E3030000 		.4byte	.LASF108
 2106 0834 09       		.byte	0x9
 2107 0835 73       		.byte	0x73
 2108 0836 81000000 		.4byte	0x81
 2109 083a 05       		.uleb128 0x5
 2110 083b 03       		.byte	0x3
 2111 083c 00000000 		.4byte	timeToSycnRemoteParams
 2112 0840 1B       		.uleb128 0x1b
 2113 0841 68657900 		.ascii	"hey\000"
 2114 0845 09       		.byte	0x9
 2115 0846 74       		.byte	0x74
 2116 0847 81000000 		.4byte	0x81
 2117 084b 05       		.uleb128 0x5
 2118 084c 03       		.byte	0x3
 2119 084d 00000000 		.4byte	hey
 2120 0851 19       		.uleb128 0x19
 2121 0852 78030000 		.4byte	.LASF109
 2122 0856 09       		.byte	0x9
 2123 0857 77       		.byte	0x77
 2124 0858 6D030000 		.4byte	0x36d
 2125 085c 05       		.uleb128 0x5
 2126 085d 03       		.byte	0x3
 2127 085e 00000000 		.4byte	alarmAppLED
 2128 0862 19       		.uleb128 0x19
 2129 0863 39020000 		.4byte	.LASF110
 2130 0867 09       		.byte	0x9
 2131 0868 78       		.byte	0x78
 2132 0869 81000000 		.4byte	0x81
 2133 086d 05       		.uleb128 0x5
 2134 086e 03       		.byte	0x3
 2135 086f 00000000 		.4byte	timeToAppLED
 2136 0873 19       		.uleb128 0x19
 2137 0874 03050000 		.4byte	.LASF111
 2138 0878 09       		.byte	0x9
 2139 0879 7A       		.byte	0x7a
 2140 087a 6D030000 		.4byte	0x36d
 2141 087e 05       		.uleb128 0x5
 2142 087f 03       		.byte	0x3
 2143 0880 00000000 		.4byte	alarmLevelSensor
 2144 0884 19       		.uleb128 0x19
 2145 0885 58010000 		.4byte	.LASF112
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 43


 2146 0889 09       		.byte	0x9
 2147 088a 7B       		.byte	0x7b
 2148 088b 81000000 		.4byte	0x81
 2149 088f 05       		.uleb128 0x5
 2150 0890 03       		.byte	0x3
 2151 0891 00000000 		.4byte	timetoLevelSensor
 2152 0895 00       		.byte	0
 2153              		.section	.debug_abbrev,"",%progbits
 2154              	.Ldebug_abbrev0:
 2155 0000 01       		.uleb128 0x1
 2156 0001 11       		.uleb128 0x11
 2157 0002 01       		.byte	0x1
 2158 0003 25       		.uleb128 0x25
 2159 0004 0E       		.uleb128 0xe
 2160 0005 13       		.uleb128 0x13
 2161 0006 0B       		.uleb128 0xb
 2162 0007 03       		.uleb128 0x3
 2163 0008 0E       		.uleb128 0xe
 2164 0009 1B       		.uleb128 0x1b
 2165 000a 0E       		.uleb128 0xe
 2166 000b 55       		.uleb128 0x55
 2167 000c 17       		.uleb128 0x17
 2168 000d 11       		.uleb128 0x11
 2169 000e 01       		.uleb128 0x1
 2170 000f 10       		.uleb128 0x10
 2171 0010 17       		.uleb128 0x17
 2172 0011 00       		.byte	0
 2173 0012 00       		.byte	0
 2174 0013 02       		.uleb128 0x2
 2175 0014 24       		.uleb128 0x24
 2176 0015 00       		.byte	0
 2177 0016 0B       		.uleb128 0xb
 2178 0017 0B       		.uleb128 0xb
 2179 0018 3E       		.uleb128 0x3e
 2180 0019 0B       		.uleb128 0xb
 2181 001a 03       		.uleb128 0x3
 2182 001b 0E       		.uleb128 0xe
 2183 001c 00       		.byte	0
 2184 001d 00       		.byte	0
 2185 001e 03       		.uleb128 0x3
 2186 001f 16       		.uleb128 0x16
 2187 0020 00       		.byte	0
 2188 0021 03       		.uleb128 0x3
 2189 0022 0E       		.uleb128 0xe
 2190 0023 3A       		.uleb128 0x3a
 2191 0024 0B       		.uleb128 0xb
 2192 0025 3B       		.uleb128 0x3b
 2193 0026 0B       		.uleb128 0xb
 2194 0027 49       		.uleb128 0x49
 2195 0028 13       		.uleb128 0x13
 2196 0029 00       		.byte	0
 2197 002a 00       		.byte	0
 2198 002b 04       		.uleb128 0x4
 2199 002c 24       		.uleb128 0x24
 2200 002d 00       		.byte	0
 2201 002e 0B       		.uleb128 0xb
 2202 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 44


 2203 0030 3E       		.uleb128 0x3e
 2204 0031 0B       		.uleb128 0xb
 2205 0032 03       		.uleb128 0x3
 2206 0033 08       		.uleb128 0x8
 2207 0034 00       		.byte	0
 2208 0035 00       		.byte	0
 2209 0036 05       		.uleb128 0x5
 2210 0037 16       		.uleb128 0x16
 2211 0038 00       		.byte	0
 2212 0039 03       		.uleb128 0x3
 2213 003a 0E       		.uleb128 0xe
 2214 003b 3A       		.uleb128 0x3a
 2215 003c 0B       		.uleb128 0xb
 2216 003d 3B       		.uleb128 0x3b
 2217 003e 05       		.uleb128 0x5
 2218 003f 49       		.uleb128 0x49
 2219 0040 13       		.uleb128 0x13
 2220 0041 00       		.byte	0
 2221 0042 00       		.byte	0
 2222 0043 06       		.uleb128 0x6
 2223 0044 01       		.uleb128 0x1
 2224 0045 01       		.byte	0x1
 2225 0046 49       		.uleb128 0x49
 2226 0047 13       		.uleb128 0x13
 2227 0048 01       		.uleb128 0x1
 2228 0049 13       		.uleb128 0x13
 2229 004a 00       		.byte	0
 2230 004b 00       		.byte	0
 2231 004c 07       		.uleb128 0x7
 2232 004d 21       		.uleb128 0x21
 2233 004e 00       		.byte	0
 2234 004f 49       		.uleb128 0x49
 2235 0050 13       		.uleb128 0x13
 2236 0051 2F       		.uleb128 0x2f
 2237 0052 0B       		.uleb128 0xb
 2238 0053 00       		.byte	0
 2239 0054 00       		.byte	0
 2240 0055 08       		.uleb128 0x8
 2241 0056 13       		.uleb128 0x13
 2242 0057 01       		.byte	0x1
 2243 0058 0B       		.uleb128 0xb
 2244 0059 05       		.uleb128 0x5
 2245 005a 3A       		.uleb128 0x3a
 2246 005b 0B       		.uleb128 0xb
 2247 005c 3B       		.uleb128 0x3b
 2248 005d 0B       		.uleb128 0xb
 2249 005e 01       		.uleb128 0x1
 2250 005f 13       		.uleb128 0x13
 2251 0060 00       		.byte	0
 2252 0061 00       		.byte	0
 2253 0062 09       		.uleb128 0x9
 2254 0063 0D       		.uleb128 0xd
 2255 0064 00       		.byte	0
 2256 0065 03       		.uleb128 0x3
 2257 0066 0E       		.uleb128 0xe
 2258 0067 3A       		.uleb128 0x3a
 2259 0068 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 45


 2260 0069 3B       		.uleb128 0x3b
 2261 006a 0B       		.uleb128 0xb
 2262 006b 49       		.uleb128 0x49
 2263 006c 13       		.uleb128 0x13
 2264 006d 38       		.uleb128 0x38
 2265 006e 0B       		.uleb128 0xb
 2266 006f 00       		.byte	0
 2267 0070 00       		.byte	0
 2268 0071 0A       		.uleb128 0xa
 2269 0072 13       		.uleb128 0x13
 2270 0073 01       		.byte	0x1
 2271 0074 0B       		.uleb128 0xb
 2272 0075 0B       		.uleb128 0xb
 2273 0076 3A       		.uleb128 0x3a
 2274 0077 0B       		.uleb128 0xb
 2275 0078 3B       		.uleb128 0x3b
 2276 0079 0B       		.uleb128 0xb
 2277 007a 01       		.uleb128 0x1
 2278 007b 13       		.uleb128 0x13
 2279 007c 00       		.byte	0
 2280 007d 00       		.byte	0
 2281 007e 0B       		.uleb128 0xb
 2282 007f 0D       		.uleb128 0xd
 2283 0080 00       		.byte	0
 2284 0081 03       		.uleb128 0x3
 2285 0082 08       		.uleb128 0x8
 2286 0083 3A       		.uleb128 0x3a
 2287 0084 0B       		.uleb128 0xb
 2288 0085 3B       		.uleb128 0x3b
 2289 0086 0B       		.uleb128 0xb
 2290 0087 49       		.uleb128 0x49
 2291 0088 13       		.uleb128 0x13
 2292 0089 38       		.uleb128 0x38
 2293 008a 0B       		.uleb128 0xb
 2294 008b 00       		.byte	0
 2295 008c 00       		.byte	0
 2296 008d 0C       		.uleb128 0xc
 2297 008e 35       		.uleb128 0x35
 2298 008f 00       		.byte	0
 2299 0090 49       		.uleb128 0x49
 2300 0091 13       		.uleb128 0x13
 2301 0092 00       		.byte	0
 2302 0093 00       		.byte	0
 2303 0094 0D       		.uleb128 0xd
 2304 0095 0F       		.uleb128 0xf
 2305 0096 00       		.byte	0
 2306 0097 0B       		.uleb128 0xb
 2307 0098 0B       		.uleb128 0xb
 2308 0099 49       		.uleb128 0x49
 2309 009a 13       		.uleb128 0x13
 2310 009b 00       		.byte	0
 2311 009c 00       		.byte	0
 2312 009d 0E       		.uleb128 0xe
 2313 009e 2E       		.uleb128 0x2e
 2314 009f 01       		.byte	0x1
 2315 00a0 3F       		.uleb128 0x3f
 2316 00a1 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 46


 2317 00a2 03       		.uleb128 0x3
 2318 00a3 0E       		.uleb128 0xe
 2319 00a4 3A       		.uleb128 0x3a
 2320 00a5 0B       		.uleb128 0xb
 2321 00a6 3B       		.uleb128 0x3b
 2322 00a7 0B       		.uleb128 0xb
 2323 00a8 49       		.uleb128 0x49
 2324 00a9 13       		.uleb128 0x13
 2325 00aa 11       		.uleb128 0x11
 2326 00ab 01       		.uleb128 0x1
 2327 00ac 12       		.uleb128 0x12
 2328 00ad 06       		.uleb128 0x6
 2329 00ae 40       		.uleb128 0x40
 2330 00af 18       		.uleb128 0x18
 2331 00b0 9642     		.uleb128 0x2116
 2332 00b2 19       		.uleb128 0x19
 2333 00b3 01       		.uleb128 0x1
 2334 00b4 13       		.uleb128 0x13
 2335 00b5 00       		.byte	0
 2336 00b6 00       		.byte	0
 2337 00b7 0F       		.uleb128 0xf
 2338 00b8 34       		.uleb128 0x34
 2339 00b9 00       		.byte	0
 2340 00ba 03       		.uleb128 0x3
 2341 00bb 0E       		.uleb128 0xe
 2342 00bc 3A       		.uleb128 0x3a
 2343 00bd 0B       		.uleb128 0xb
 2344 00be 3B       		.uleb128 0x3b
 2345 00bf 0B       		.uleb128 0xb
 2346 00c0 49       		.uleb128 0x49
 2347 00c1 13       		.uleb128 0x13
 2348 00c2 02       		.uleb128 0x2
 2349 00c3 18       		.uleb128 0x18
 2350 00c4 00       		.byte	0
 2351 00c5 00       		.byte	0
 2352 00c6 10       		.uleb128 0x10
 2353 00c7 0B       		.uleb128 0xb
 2354 00c8 01       		.byte	0x1
 2355 00c9 11       		.uleb128 0x11
 2356 00ca 01       		.uleb128 0x1
 2357 00cb 12       		.uleb128 0x12
 2358 00cc 06       		.uleb128 0x6
 2359 00cd 00       		.byte	0
 2360 00ce 00       		.byte	0
 2361 00cf 11       		.uleb128 0x11
 2362 00d0 34       		.uleb128 0x34
 2363 00d1 00       		.byte	0
 2364 00d2 03       		.uleb128 0x3
 2365 00d3 08       		.uleb128 0x8
 2366 00d4 3A       		.uleb128 0x3a
 2367 00d5 0B       		.uleb128 0xb
 2368 00d6 3B       		.uleb128 0x3b
 2369 00d7 0B       		.uleb128 0xb
 2370 00d8 49       		.uleb128 0x49
 2371 00d9 13       		.uleb128 0x13
 2372 00da 02       		.uleb128 0x2
 2373 00db 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 47


 2374 00dc 00       		.byte	0
 2375 00dd 00       		.byte	0
 2376 00de 12       		.uleb128 0x12
 2377 00df 0B       		.uleb128 0xb
 2378 00e0 01       		.byte	0x1
 2379 00e1 11       		.uleb128 0x11
 2380 00e2 01       		.uleb128 0x1
 2381 00e3 12       		.uleb128 0x12
 2382 00e4 06       		.uleb128 0x6
 2383 00e5 01       		.uleb128 0x1
 2384 00e6 13       		.uleb128 0x13
 2385 00e7 00       		.byte	0
 2386 00e8 00       		.byte	0
 2387 00e9 13       		.uleb128 0x13
 2388 00ea 2E       		.uleb128 0x2e
 2389 00eb 01       		.byte	0x1
 2390 00ec 3F       		.uleb128 0x3f
 2391 00ed 19       		.uleb128 0x19
 2392 00ee 03       		.uleb128 0x3
 2393 00ef 0E       		.uleb128 0xe
 2394 00f0 3A       		.uleb128 0x3a
 2395 00f1 0B       		.uleb128 0xb
 2396 00f2 3B       		.uleb128 0x3b
 2397 00f3 0B       		.uleb128 0xb
 2398 00f4 27       		.uleb128 0x27
 2399 00f5 19       		.uleb128 0x19
 2400 00f6 49       		.uleb128 0x49
 2401 00f7 13       		.uleb128 0x13
 2402 00f8 11       		.uleb128 0x11
 2403 00f9 01       		.uleb128 0x1
 2404 00fa 12       		.uleb128 0x12
 2405 00fb 06       		.uleb128 0x6
 2406 00fc 40       		.uleb128 0x40
 2407 00fd 18       		.uleb128 0x18
 2408 00fe 9642     		.uleb128 0x2116
 2409 0100 19       		.uleb128 0x19
 2410 0101 01       		.uleb128 0x1
 2411 0102 13       		.uleb128 0x13
 2412 0103 00       		.byte	0
 2413 0104 00       		.byte	0
 2414 0105 14       		.uleb128 0x14
 2415 0106 05       		.uleb128 0x5
 2416 0107 00       		.byte	0
 2417 0108 03       		.uleb128 0x3
 2418 0109 0E       		.uleb128 0xe
 2419 010a 3A       		.uleb128 0x3a
 2420 010b 0B       		.uleb128 0xb
 2421 010c 3B       		.uleb128 0x3b
 2422 010d 0B       		.uleb128 0xb
 2423 010e 49       		.uleb128 0x49
 2424 010f 13       		.uleb128 0x13
 2425 0110 02       		.uleb128 0x2
 2426 0111 18       		.uleb128 0x18
 2427 0112 00       		.byte	0
 2428 0113 00       		.byte	0
 2429 0114 15       		.uleb128 0x15
 2430 0115 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 48


 2431 0116 01       		.byte	0x1
 2432 0117 3F       		.uleb128 0x3f
 2433 0118 19       		.uleb128 0x19
 2434 0119 03       		.uleb128 0x3
 2435 011a 0E       		.uleb128 0xe
 2436 011b 3A       		.uleb128 0x3a
 2437 011c 0B       		.uleb128 0xb
 2438 011d 3B       		.uleb128 0x3b
 2439 011e 0B       		.uleb128 0xb
 2440 011f 27       		.uleb128 0x27
 2441 0120 19       		.uleb128 0x19
 2442 0121 11       		.uleb128 0x11
 2443 0122 01       		.uleb128 0x1
 2444 0123 12       		.uleb128 0x12
 2445 0124 06       		.uleb128 0x6
 2446 0125 40       		.uleb128 0x40
 2447 0126 18       		.uleb128 0x18
 2448 0127 9642     		.uleb128 0x2116
 2449 0129 19       		.uleb128 0x19
 2450 012a 01       		.uleb128 0x1
 2451 012b 13       		.uleb128 0x13
 2452 012c 00       		.byte	0
 2453 012d 00       		.byte	0
 2454 012e 16       		.uleb128 0x16
 2455 012f 05       		.uleb128 0x5
 2456 0130 00       		.byte	0
 2457 0131 03       		.uleb128 0x3
 2458 0132 08       		.uleb128 0x8
 2459 0133 3A       		.uleb128 0x3a
 2460 0134 0B       		.uleb128 0xb
 2461 0135 3B       		.uleb128 0x3b
 2462 0136 0B       		.uleb128 0xb
 2463 0137 49       		.uleb128 0x49
 2464 0138 13       		.uleb128 0x13
 2465 0139 02       		.uleb128 0x2
 2466 013a 18       		.uleb128 0x18
 2467 013b 00       		.byte	0
 2468 013c 00       		.byte	0
 2469 013d 17       		.uleb128 0x17
 2470 013e 2E       		.uleb128 0x2e
 2471 013f 01       		.byte	0x1
 2472 0140 3F       		.uleb128 0x3f
 2473 0141 19       		.uleb128 0x19
 2474 0142 03       		.uleb128 0x3
 2475 0143 0E       		.uleb128 0xe
 2476 0144 3A       		.uleb128 0x3a
 2477 0145 0B       		.uleb128 0xb
 2478 0146 3B       		.uleb128 0x3b
 2479 0147 0B       		.uleb128 0xb
 2480 0148 27       		.uleb128 0x27
 2481 0149 19       		.uleb128 0x19
 2482 014a 11       		.uleb128 0x11
 2483 014b 01       		.uleb128 0x1
 2484 014c 12       		.uleb128 0x12
 2485 014d 06       		.uleb128 0x6
 2486 014e 40       		.uleb128 0x40
 2487 014f 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 49


 2488 0150 9742     		.uleb128 0x2117
 2489 0152 19       		.uleb128 0x19
 2490 0153 01       		.uleb128 0x1
 2491 0154 13       		.uleb128 0x13
 2492 0155 00       		.byte	0
 2493 0156 00       		.byte	0
 2494 0157 18       		.uleb128 0x18
 2495 0158 34       		.uleb128 0x34
 2496 0159 00       		.byte	0
 2497 015a 03       		.uleb128 0x3
 2498 015b 0E       		.uleb128 0xe
 2499 015c 3A       		.uleb128 0x3a
 2500 015d 0B       		.uleb128 0xb
 2501 015e 3B       		.uleb128 0x3b
 2502 015f 05       		.uleb128 0x5
 2503 0160 49       		.uleb128 0x49
 2504 0161 13       		.uleb128 0x13
 2505 0162 3F       		.uleb128 0x3f
 2506 0163 19       		.uleb128 0x19
 2507 0164 3C       		.uleb128 0x3c
 2508 0165 19       		.uleb128 0x19
 2509 0166 00       		.byte	0
 2510 0167 00       		.byte	0
 2511 0168 19       		.uleb128 0x19
 2512 0169 34       		.uleb128 0x34
 2513 016a 00       		.byte	0
 2514 016b 03       		.uleb128 0x3
 2515 016c 0E       		.uleb128 0xe
 2516 016d 3A       		.uleb128 0x3a
 2517 016e 0B       		.uleb128 0xb
 2518 016f 3B       		.uleb128 0x3b
 2519 0170 0B       		.uleb128 0xb
 2520 0171 49       		.uleb128 0x49
 2521 0172 13       		.uleb128 0x13
 2522 0173 3F       		.uleb128 0x3f
 2523 0174 19       		.uleb128 0x19
 2524 0175 02       		.uleb128 0x2
 2525 0176 18       		.uleb128 0x18
 2526 0177 00       		.byte	0
 2527 0178 00       		.byte	0
 2528 0179 1A       		.uleb128 0x1a
 2529 017a 21       		.uleb128 0x21
 2530 017b 00       		.byte	0
 2531 017c 49       		.uleb128 0x49
 2532 017d 13       		.uleb128 0x13
 2533 017e 2F       		.uleb128 0x2f
 2534 017f 05       		.uleb128 0x5
 2535 0180 00       		.byte	0
 2536 0181 00       		.byte	0
 2537 0182 1B       		.uleb128 0x1b
 2538 0183 34       		.uleb128 0x34
 2539 0184 00       		.byte	0
 2540 0185 03       		.uleb128 0x3
 2541 0186 08       		.uleb128 0x8
 2542 0187 3A       		.uleb128 0x3a
 2543 0188 0B       		.uleb128 0xb
 2544 0189 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 50


 2545 018a 0B       		.uleb128 0xb
 2546 018b 49       		.uleb128 0x49
 2547 018c 13       		.uleb128 0x13
 2548 018d 3F       		.uleb128 0x3f
 2549 018e 19       		.uleb128 0x19
 2550 018f 02       		.uleb128 0x2
 2551 0190 18       		.uleb128 0x18
 2552 0191 00       		.byte	0
 2553 0192 00       		.byte	0
 2554 0193 00       		.byte	0
 2555              		.section	.debug_aranges,"",%progbits
 2556 0000 54000000 		.4byte	0x54
 2557 0004 0200     		.2byte	0x2
 2558 0006 00000000 		.4byte	.Ldebug_info0
 2559 000a 04       		.byte	0x4
 2560 000b 00       		.byte	0
 2561 000c 0000     		.2byte	0
 2562 000e 0000     		.2byte	0
 2563 0010 00000000 		.4byte	.LFB64
 2564 0014 34010000 		.4byte	.LFE64-.LFB64
 2565 0018 00000000 		.4byte	.LFB65
 2566 001c 98010000 		.4byte	.LFE65-.LFB65
 2567 0020 00000000 		.4byte	.LFB66
 2568 0024 C4000000 		.4byte	.LFE66-.LFB66
 2569 0028 00000000 		.4byte	.LFB67
 2570 002c 74000000 		.4byte	.LFE67-.LFB67
 2571 0030 00000000 		.4byte	.LFB68
 2572 0034 28000000 		.4byte	.LFE68-.LFB68
 2573 0038 00000000 		.4byte	.LFB69
 2574 003c 84000000 		.4byte	.LFE69-.LFB69
 2575 0040 00000000 		.4byte	.LFB70
 2576 0044 BC000000 		.4byte	.LFE70-.LFB70
 2577 0048 00000000 		.4byte	.LFB71
 2578 004c 04010000 		.4byte	.LFE71-.LFB71
 2579 0050 00000000 		.4byte	0
 2580 0054 00000000 		.4byte	0
 2581              		.section	.debug_ranges,"",%progbits
 2582              	.Ldebug_ranges0:
 2583 0000 00000000 		.4byte	.LFB64
 2584 0004 34010000 		.4byte	.LFE64
 2585 0008 00000000 		.4byte	.LFB65
 2586 000c 98010000 		.4byte	.LFE65
 2587 0010 00000000 		.4byte	.LFB66
 2588 0014 C4000000 		.4byte	.LFE66
 2589 0018 00000000 		.4byte	.LFB67
 2590 001c 74000000 		.4byte	.LFE67
 2591 0020 00000000 		.4byte	.LFB68
 2592 0024 28000000 		.4byte	.LFE68
 2593 0028 00000000 		.4byte	.LFB69
 2594 002c 84000000 		.4byte	.LFE69
 2595 0030 00000000 		.4byte	.LFB70
 2596 0034 BC000000 		.4byte	.LFE70
 2597 0038 00000000 		.4byte	.LFB71
 2598 003c 04010000 		.4byte	.LFE71
 2599 0040 00000000 		.4byte	0
 2600 0044 00000000 		.4byte	0
 2601              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 51


 2602              	.Ldebug_line0:
 2603 0000 F2020000 		.section	.debug_str,"MS",%progbits,1
 2603      0200AD01 
 2603      00000201 
 2603      FB0E0D00 
 2603      01010101 
 2604              	.LASF12:
 2605 0000 75696E74 		.ascii	"uint16\000"
 2605      313600
 2606              	.LASF115:
 2607 0007 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2607      73657273 
 2607      5C64616E 
 2607      747A5C44 
 2607      6F63756D 
 2608 0034 72694F53 		.ascii	"riOS.cydsn\000"
 2608      2E637964 
 2608      736E00
 2609              	.LASF89:
 2610 003f 62756666 		.ascii	"buffer_overflow\000"
 2610      65725F6F 
 2610      76657266 
 2610      6C6F7700 
 2611              	.LASF77:
 2612 004f 736F7274 		.ascii	"sort32\000"
 2612      333200
 2613              	.LASF62:
 2614 0056 636F756E 		.ascii	"countDownResetCondition\000"
 2614      74446F77 
 2614      6E526573 
 2614      6574436F 
 2614      6E646974 
 2615              	.LASF113:
 2616 006e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2616      43313120 
 2616      352E342E 
 2616      31203230 
 2616      31363036 
 2617 00a1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2617      20726576 
 2617      6973696F 
 2617      6E203233 
 2617      37373135 
 2618 00d4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2618      66756E63 
 2618      74696F6E 
 2618      2D736563 
 2618      74696F6E 
 2619              	.LASF7:
 2620 00fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 2620      206C6F6E 
 2620      6720756E 
 2620      7369676E 
 2620      65642069 
 2621              	.LASF58:
 2622 0113 75706461 		.ascii	"updatable_parameters_t\000"
 2622      7461626C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 52


 2622      655F7061 
 2622      72616D65 
 2622      74657273 
 2623              	.LASF70:
 2624 012a 766F6C74 		.ascii	"voltage\000"
 2624      61676500 
 2625              	.LASF84:
 2626 0132 74657374 		.ascii	"test\000"
 2626      00
 2627              	.LASF104:
 2628 0137 616C6172 		.ascii	"alarmMeasure\000"
 2628      6D4D6561 
 2628      73757265 
 2628      00
 2629              	.LASF86:
 2630 0144 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2630      52784275 
 2630      66666572 
 2630      00
 2631              	.LASF82:
 2632 0151 6D656469 		.ascii	"median\000"
 2632      616E00
 2633              	.LASF112:
 2634 0158 74696D65 		.ascii	"timetoLevelSensor\000"
 2634      746F4C65 
 2634      76656C53 
 2634      656E736F 
 2634      7200
 2635              	.LASF95:
 2636 016a 6D6F6465 		.ascii	"modem_stats\000"
 2636      6D5F7374 
 2636      61747300 
 2637              	.LASF6:
 2638 0176 6C6F6E67 		.ascii	"long long int\000"
 2638      206C6F6E 
 2638      6720696E 
 2638      7400
 2639              	.LASF0:
 2640 0184 7369676E 		.ascii	"signed char\000"
 2640      65642063 
 2640      68617200 
 2641              	.LASF44:
 2642 0190 65636E6F 		.ascii	"ecno\000"
 2642      00
 2643              	.LASF105:
 2644 0195 74696D65 		.ascii	"timeToMeasure\000"
 2644      546F4D65 
 2644      61737572 
 2644      6500
 2645              	.LASF47:
 2646 01a3 74696D65 		.ascii	"time_to_network_connect\000"
 2646      5F746F5F 
 2646      6E657477 
 2646      6F726B5F 
 2646      636F6E6E 
 2647              	.LASF107:
 2648 01bb 74696D65 		.ascii	"timeToSync\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 53


 2648      546F5379 
 2648      6E6300
 2649              	.LASF26:
 2650 01c6 766F6C74 		.ascii	"voltage_charge_current\000"
 2650      6167655F 
 2650      63686172 
 2650      67655F63 
 2650      75727265 
 2651              	.LASF41:
 2652 01dd 6D6F6465 		.ascii	"modem_info_t\000"
 2652      6D5F696E 
 2652      666F5F74 
 2652      00
 2653              	.LASF71:
 2654 01ea 6368616E 		.ascii	"channels\000"
 2654      6E656C73 
 2654      00
 2655              	.LASF4:
 2656 01f3 6C6F6E67 		.ascii	"long int\000"
 2656      20696E74 
 2656      00
 2657              	.LASF42:
 2658 01fc 72786C65 		.ascii	"rxlev\000"
 2658      7600
 2659              	.LASF60:
 2660 0202 63757272 		.ascii	"currentCountDownValue\000"
 2660      656E7443 
 2660      6F756E74 
 2660      446F776E 
 2660      56616C75 
 2661              	.LASF63:
 2662 0218 616C6172 		.ascii	"alarm\000"
 2662      6D00
 2663              	.LASF31:
 2664 021e 70726573 		.ascii	"pressure_voltage_off\000"
 2664      73757265 
 2664      5F766F6C 
 2664      74616765 
 2664      5F6F6666 
 2665              	.LASF11:
 2666 0233 75696E74 		.ascii	"uint8\000"
 2666      3800
 2667              	.LASF110:
 2668 0239 74696D65 		.ascii	"timeToAppLED\000"
 2668      546F4170 
 2668      704C4544 
 2668      00
 2669              	.LASF14:
 2670 0246 696E7433 		.ascii	"int32\000"
 2670      3200
 2671              	.LASF50:
 2672 024c 6E6F6465 		.ascii	"node_type\000"
 2672      5F747970 
 2672      6500
 2673              	.LASF81:
 2674 0256 61727261 		.ascii	"array\000"
 2674      7900
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 54


 2675              	.LASF65:
 2676 025c 63686970 		.ascii	"chip_uniqueId\000"
 2676      5F756E69 
 2676      71756549 
 2676      6400
 2677              	.LASF39:
 2678 026a 6D6F6465 		.ascii	"model_id\000"
 2678      6C5F6964 
 2678      00
 2679              	.LASF59:
 2680 0273 636F756E 		.ascii	"countDownValue\000"
 2680      74446F77 
 2680      6E56616C 
 2680      756500
 2681              	.LASF80:
 2682 0282 66696E64 		.ascii	"find_median32\000"
 2682      5F6D6564 
 2682      69616E33 
 2682      3200
 2683              	.LASF54:
 2684 0290 64656275 		.ascii	"debug_level\000"
 2684      675F6C65 
 2684      76656C00 
 2685              	.LASF35:
 2686 029c 76616C75 		.ascii	"value\000"
 2686      6500
 2687              	.LASF75:
 2688 02a2 70726573 		.ascii	"pressure_sensor_readings\000"
 2688      73757265 
 2688      5F73656E 
 2688      736F725F 
 2688      72656164 
 2689              	.LASF106:
 2690 02bb 616C6172 		.ascii	"alarmSync\000"
 2690      6D53796E 
 2690      6300
 2691              	.LASF30:
 2692 02c5 70726573 		.ascii	"pressure_voltage_on\000"
 2692      73757265 
 2692      5F766F6C 
 2692      74616765 
 2692      5F6F6E00 
 2693              	.LASF97:
 2694 02d9 4170705F 		.ascii	"App_LED_enabled\000"
 2694      4C45445F 
 2694      656E6162 
 2694      6C656400 
 2695              	.LASF37:
 2696 02e9 6B65795F 		.ascii	"key_value_t\000"
 2696      76616C75 
 2696      655F7400 
 2697              	.LASF5:
 2698 02f5 6C6F6E67 		.ascii	"long unsigned int\000"
 2698      20756E73 
 2698      69676E65 
 2698      6420696E 
 2698      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 55


 2699              	.LASF24:
 2700 0307 766F6C74 		.ascii	"voltage_battery\000"
 2700      6167655F 
 2700      62617474 
 2700      65727900 
 2701              	.LASF92:
 2702 0317 64617461 		.ascii	"data\000"
 2702      00
 2703              	.LASF68:
 2704 031c 65705F70 		.ascii	"ep_port\000"
 2704      6F727400 
 2705              	.LASF64:
 2706 0324 6D6F6465 		.ascii	"modem_info\000"
 2706      6D5F696E 
 2706      666F00
 2707              	.LASF67:
 2708 032f 65705F68 		.ascii	"ep_host\000"
 2708      6F737400 
 2709              	.LASF25:
 2710 0337 766F6C74 		.ascii	"voltage_solar\000"
 2710      6167655F 
 2710      736F6C61 
 2710      7200
 2711              	.LASF79:
 2712 0345 70726573 		.ascii	"pressure_calculations\000"
 2712      73757265 
 2712      5F63616C 
 2712      63756C61 
 2712      74696F6E 
 2713              	.LASF48:
 2714 035b 74696D65 		.ascii	"time_to_acquire_ip\000"
 2714      5F746F5F 
 2714      61637175 
 2714      6972655F 
 2714      697000
 2715              	.LASF2:
 2716 036e 73686F72 		.ascii	"short int\000"
 2716      7420696E 
 2716      7400
 2717              	.LASF109:
 2718 0378 616C6172 		.ascii	"alarmAppLED\000"
 2718      6D417070 
 2718      4C454400 
 2719              	.LASF94:
 2720 0384 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2720      6D5F7374 
 2720      6172745F 
 2720      74696D65 
 2720      5F737461 
 2721              	.LASF29:
 2722 039b 766F6C74 		.ascii	"voltage_t\000"
 2722      6167655F 
 2722      7400
 2723              	.LASF66:
 2724 03a5 7379735F 		.ascii	"sys_info_t\000"
 2724      696E666F 
 2724      5F7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 56


 2725              	.LASF83:
 2726 03b0 766F6C74 		.ascii	"voltages_test\000"
 2726      61676573 
 2726      5F746573 
 2726      7400
 2727              	.LASF90:
 2728 03be 64617461 		.ascii	"dataPointsInStack\000"
 2728      506F696E 
 2728      7473496E 
 2728      53746163 
 2728      6B00
 2729              	.LASF19:
 2730 03d0 73697A65 		.ascii	"sizetype\000"
 2730      74797065 
 2730      00
 2731              	.LASF20:
 2732 03d9 74657374 		.ascii	"test_name\000"
 2732      5F6E616D 
 2732      6500
 2733              	.LASF108:
 2734 03e3 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2734      546F5379 
 2734      636E5265 
 2734      6D6F7465 
 2734      50617261 
 2735              	.LASF36:
 2736 03fa 74696D65 		.ascii	"timeStamp\000"
 2736      5374616D 
 2736      7000
 2737              	.LASF96:
 2738 0404 75706461 		.ascii	"updatable_parameters\000"
 2738      7461626C 
 2738      655F7061 
 2738      72616D65 
 2738      74657273 
 2739              	.LASF76:
 2740 0419 70726573 		.ascii	"pressure\000"
 2740      73757265 
 2740      00
 2741              	.LASF27:
 2742 0422 766F6C74 		.ascii	"voltage_pressure\000"
 2742      6167655F 
 2742      70726573 
 2742      73757265 
 2742      00
 2743              	.LASF99:
 2744 0433 68747470 		.ascii	"http_request\000"
 2744      5F726571 
 2744      75657374 
 2744      00
 2745              	.LASF15:
 2746 0440 666C6F61 		.ascii	"float\000"
 2746      7400
 2747              	.LASF57:
 2748 0446 5F426F6F 		.ascii	"_Bool\000"
 2748      6C00
 2749              	.LASF10:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 57


 2750 044c 696E7433 		.ascii	"int32_t\000"
 2750      325F7400 
 2751              	.LASF1:
 2752 0454 756E7369 		.ascii	"unsigned char\000"
 2752      676E6564 
 2752      20636861 
 2752      7200
 2753              	.LASF85:
 2754 0462 70726573 		.ascii	"pressure_sensor_test\000"
 2754      73757265 
 2754      5F73656E 
 2754      736F725F 
 2754      74657374 
 2755              	.LASF103:
 2756 0477 73797374 		.ascii	"system_settings\000"
 2756      656D5F73 
 2756      65747469 
 2756      6E677300 
 2757              	.LASF46:
 2758 0487 72737270 		.ascii	"rsrp\000"
 2758      00
 2759              	.LASF45:
 2760 048c 72737271 		.ascii	"rsrq\000"
 2760      00
 2761              	.LASF53:
 2762 0491 73796E63 		.ascii	"sync_time\000"
 2762      5F74696D 
 2762      6500
 2763              	.LASF78:
 2764 049b 73776170 		.ascii	"swap32\000"
 2764      333200
 2765              	.LASF23:
 2766 04a2 74657374 		.ascii	"test_t\000"
 2766      5F7400
 2767              	.LASF33:
 2768 04a9 70726573 		.ascii	"pressure_depth\000"
 2768      73757265 
 2768      5F646570 
 2768      746800
 2769              	.LASF43:
 2770 04b8 72736370 		.ascii	"rscp\000"
 2770      00
 2771              	.LASF73:
 2772 04bd 72656164 		.ascii	"readings\000"
 2772      696E6773 
 2772      00
 2773              	.LASF102:
 2774 04c6 73797374 		.ascii	"system_info\000"
 2774      656D5F69 
 2774      6E666F00 
 2775              	.LASF40:
 2776 04d2 696D6569 		.ascii	"imei\000"
 2776      00
 2777              	.LASF22:
 2778 04d7 72656173 		.ascii	"reason\000"
 2778      6F6E00
 2779              	.LASF49:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 58


 2780 04de 6D6F6465 		.ascii	"modem_stats_t\000"
 2780      6D5F7374 
 2780      6174735F 
 2780      7400
 2781              	.LASF32:
 2782 04ec 70726573 		.ascii	"pressure_current\000"
 2782      73757265 
 2782      5F637572 
 2782      72656E74 
 2782      00
 2783              	.LASF28:
 2784 04fd 76616C69 		.ascii	"valid\000"
 2784      6400
 2785              	.LASF111:
 2786 0503 616C6172 		.ascii	"alarmLevelSensor\000"
 2786      6D4C6576 
 2786      656C5365 
 2786      6E736F72 
 2786      00
 2787              	.LASF56:
 2788 0514 4C657665 		.ascii	"Level_Sensor_freq\000"
 2788      6C5F5365 
 2788      6E736F72 
 2788      5F667265 
 2788      7100
 2789              	.LASF87:
 2790 0526 6C657665 		.ascii	"level_sensor_inbox\000"
 2790      6C5F7365 
 2790      6E736F72 
 2790      5F696E62 
 2790      6F7800
 2791              	.LASF18:
 2792 0539 6C6F6E67 		.ascii	"long double\000"
 2792      20646F75 
 2792      626C6500 
 2793              	.LASF17:
 2794 0545 63686172 		.ascii	"char\000"
 2794      00
 2795              	.LASF8:
 2796 054a 756E7369 		.ascii	"unsigned int\000"
 2796      676E6564 
 2796      20696E74 
 2796      00
 2797              	.LASF101:
 2798 0557 68747470 		.ascii	"http_route\000"
 2798      5F726F75 
 2798      746500
 2799              	.LASF9:
 2800 0562 5F5F696E 		.ascii	"__int32_t\000"
 2800      7433325F 
 2800      7400
 2801              	.LASF72:
 2802 056c 6F666673 		.ascii	"offset\000"
 2802      657400
 2803              	.LASF3:
 2804 0573 73686F72 		.ascii	"short unsigned int\000"
 2804      7420756E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 59


 2804      7369676E 
 2804      65642069 
 2804      6E7400
 2805              	.LASF38:
 2806 0586 73696D5F 		.ascii	"sim_id\000"
 2806      696400
 2807              	.LASF114:
 2808 058d 766F6C74 		.ascii	"voltages.c\000"
 2808      61676573 
 2808      2E6300
 2809              	.LASF74:
 2810 0598 766F6C74 		.ascii	"voltage_take_readings\000"
 2810      6167655F 
 2810      74616B65 
 2810      5F726561 
 2810      64696E67 
 2811              	.LASF21:
 2812 05ae 73746174 		.ascii	"status\000"
 2812      757300
 2813              	.LASF88:
 2814 05b5 6C657665 		.ascii	"level_sensor_enabled\000"
 2814      6C5F7365 
 2814      6E736F72 
 2814      5F656E61 
 2814      626C6564 
 2815              	.LASF91:
 2816 05ca 64617461 		.ascii	"dataPointsInStackDesired\000"
 2816      506F696E 
 2816      7473496E 
 2816      53746163 
 2816      6B446573 
 2817              	.LASF55:
 2818 05e3 4170705F 		.ascii	"App_LED_freq\000"
 2818      4C45445F 
 2818      66726571 
 2818      00
 2819              	.LASF69:
 2820 05f0 7379735F 		.ascii	"sys_settings_t\000"
 2820      73657474 
 2820      696E6773 
 2820      5F7400
 2821              	.LASF100:
 2822 05ff 68747470 		.ascii	"http_body\000"
 2822      5F626F64 
 2822      7900
 2823              	.LASF13:
 2824 0609 696E7431 		.ascii	"int16\000"
 2824      3600
 2825              	.LASF61:
 2826 060f 636F756E 		.ascii	"countDownType\000"
 2826      74446F77 
 2826      6E547970 
 2826      6500
 2827              	.LASF51:
 2828 061d 73696D5F 		.ascii	"sim_type\000"
 2828      74797065 
 2828      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsSvTLd.s 			page 60


 2829              	.LASF34:
 2830 0626 70726573 		.ascii	"pressure_t\000"
 2830      73757265 
 2830      5F7400
 2831              	.LASF52:
 2832 0631 6D656173 		.ascii	"measure_time\000"
 2832      7572655F 
 2832      74696D65 
 2832      00
 2833              	.LASF16:
 2834 063e 646F7562 		.ascii	"double\000"
 2834      6C6500
 2835              	.LASF98:
 2836 0645 6170705F 		.ascii	"app_led_inbox\000"
 2836      6C65645F 
 2836      696E626F 
 2836      7800
 2837              	.LASF93:
 2838 0653 6D6F6465 		.ascii	"modem_state\000"
 2838      6D5F7374 
 2838      61746500 
 2839              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
