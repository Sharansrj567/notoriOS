ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"voltages.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	buffer_overflow,1,1
  24              		.comm	dataPointsInStack,2,2
  25              		.comm	dataPointsInStackDesired,2,2
  26              		.comm	data,6600,4
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,8,4
  32              		.syntax unified
  33              		.global _printf_float
  34              		.thumb
  35              		.syntax unified
  36              		.comm	App_LED_enabled,1,1
  37              		.comm	app_led_inbox,100,4
  38              		.comm	http_request,10000,4
  39              		.comm	http_body,10000,4
  40              		.comm	http_route,200,4
  41              		.comm	system_info,28,4
  42              		.comm	system_settings,104,4
  43              		.comm	alarmMeasure,6,4
  44              		.comm	timeToMeasure,1,1
  45              		.comm	alarmSync,6,4
  46              		.comm	timeToSync,1,1
  47              		.comm	timeToSycnRemoteParams,1,1
  48              		.comm	hey,1,1
  49              		.comm	alarmAppLED,6,4
  50              		.comm	timeToAppLED,1,1
  51              		.comm	alarmLevelSensor,6,4
  52              		.comm	timetoLevelSensor,1,1
  53              		.comm	alarmDownstreamLevelSensor,6,4
  54              		.comm	timetoDownstreamLevelSensor,1,1
  55              		.global	__aeabi_f2d
  56              		.global	__aeabi_dsub
  57              		.global	__aeabi_d2f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 2


  58              		.global	__aeabi_fmul
  59              		.global	__aeabi_fsub
  60              		.section	.text.voltage_take_readings,"ax",%progbits
  61              		.align	2
  62              		.global	voltage_take_readings
  63              		.thumb
  64              		.thumb_func
  65              		.type	voltage_take_readings, %function
  66              	voltage_take_readings:
  67              	.LFB64:
  68              		.file 1 "voltages.c"
   1:voltages.c    **** #include "voltages.h"
   2:voltages.c    **** #include "notoriOS.h"
   3:voltages.c    **** #include <math.h>
   4:voltages.c    **** 
   5:voltages.c    **** // Function to take voltage readings and save them in the voltage_t datatype
   6:voltages.c    **** voltage_t voltage_take_readings(){
  69              		.loc 1 6 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 96
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 B0B5     		push	{r4, r5, r7, lr}
  74              		.cfi_def_cfa_offset 16
  75              		.cfi_offset 4, -16
  76              		.cfi_offset 5, -12
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 98B0     		sub	sp, sp, #96
  80              		.cfi_def_cfa_offset 112
  81 0004 00AF     		add	r7, sp, #0
  82              		.cfi_def_cfa_register 7
  83 0006 7860     		str	r0, [r7, #4]
   7:voltages.c    ****     
   8:voltages.c    ****     voltage_t voltage;  // Create variable voltage of data structure voltage_t.
   9:voltages.c    ****      
  10:voltages.c    **** 	Battery_Voltage_Enable_Write(ON);   // Flip on the Battery Voltage ADC pin high (turns it on).
  84              		.loc 1 10 0
  85 0008 0120     		movs	r0, #1
  86 000a FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  11:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
  87              		.loc 1 11 0
  88 000e 0120     		movs	r0, #1
  89 0010 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  12:voltages.c    ****     
  13:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
  90              		.loc 1 13 0
  91 0014 0A20     		movs	r0, #10
  92 0016 FFF7FEFF 		bl	CyDelay
  14:voltages.c    ****     
  15:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
  93              		.loc 1 15 0
  94 001a FFF7FEFF 		bl	AMux_Start
  16:voltages.c    ****  
  17:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
  95              		.loc 1 17 0
  96 001e FFF7FEFF 		bl	ADC_RestoreConfig
  18:voltages.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 3


  19:voltages.c    ****     ADC_Start();        // Start the ADC
  97              		.loc 1 19 0
  98 0022 FFF7FEFF 		bl	ADC_Start
  99              	.LBB2:
  20:voltages.c    ****     
  21:voltages.c    ****     float channels[AMux_CHANNELS];
  22:voltages.c    ****     
  23:voltages.c    ****     for(uint8 c = 0; c< AMux_CHANNELS + 1; c++) // Sweep the MUX Channels
 100              		.loc 1 23 0
 101 0026 0023     		movs	r3, #0
 102 0028 87F85F30 		strb	r3, [r7, #95]
 103 002c 34E0     		b	.L2
 104              	.L5:
 105              	.LBB3:
  24:voltages.c    ****     {
  25:voltages.c    ****         
  26:voltages.c    ****         int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 
  27:voltages.c    ****         
  28:voltages.c    ****         AMux_Select(c); // This functions first disconnects all channels then connects the given ch
 106              		.loc 1 28 0
 107 002e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 108 0032 1846     		mov	r0, r3
 109 0034 FFF7FEFF 		bl	AMux_Select
 110              	.LBB4:
  29:voltages.c    ****         
  30:voltages.c    ****         for(uint16 i=0; i< N_SAMPLES; i++){
 111              		.loc 1 30 0
 112 0038 0023     		movs	r3, #0
 113 003a A7F85C30 		strh	r3, [r7, #92]	@ movhi
 114 003e 0FE0     		b	.L3
 115              	.L4:
  31:voltages.c    ****             
  32:voltages.c    ****             readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the
 116              		.loc 1 32 0 discriminator 3
 117 0040 B7F85C40 		ldrh	r4, [r7, #92]
 118 0044 FFF7FEFF 		bl	ADC_Read32
 119 0048 0246     		mov	r2, r0
 120 004a A300     		lsls	r3, r4, #2
 121 004c 07F16001 		add	r1, r7, #96
 122 0050 0B44     		add	r3, r3, r1
 123 0052 43F8582C 		str	r2, [r3, #-88]
  30:voltages.c    ****             
 124              		.loc 1 30 0 discriminator 3
 125 0056 B7F85C30 		ldrh	r3, [r7, #92]
 126 005a 0133     		adds	r3, r3, #1
 127 005c A7F85C30 		strh	r3, [r7, #92]	@ movhi
 128              	.L3:
  30:voltages.c    ****             
 129              		.loc 1 30 0 is_stmt 0 discriminator 1
 130 0060 B7F85C30 		ldrh	r3, [r7, #92]
 131 0064 0A2B     		cmp	r3, #10
 132 0066 EBD9     		bls	.L4
 133              	.LBE4:
  33:voltages.c    ****         }
  34:voltages.c    ****         
  35:voltages.c    ****         // Converts the ADC output to Volts as a floating point number. 
  36:voltages.c    ****         // Get the median of readings and return that.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 4


  37:voltages.c    ****         channels[c] = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get median of re
 134              		.loc 1 37 0 is_stmt 1 discriminator 2
 135 0068 97F85F40 		ldrb	r4, [r7, #95]	@ zero_extendqisi2
 136 006c 07F10803 		add	r3, r7, #8
 137 0070 0B21     		movs	r1, #11
 138 0072 1846     		mov	r0, r3
 139 0074 FFF7FEFF 		bl	find_median32
 140 0078 0346     		mov	r3, r0
 141 007a 1846     		mov	r0, r3
 142 007c FFF7FEFF 		bl	ADC_CountsTo_Volts
 143 0080 0246     		mov	r2, r0
 144 0082 A300     		lsls	r3, r4, #2
 145 0084 07F16001 		add	r1, r7, #96
 146 0088 0B44     		add	r3, r3, r1
 147 008a 43F82C2C 		str	r2, [r3, #-44]	@ float
 148              	.LBE3:
  23:voltages.c    ****     {
 149              		.loc 1 23 0 discriminator 2
 150 008e 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 151 0092 0133     		adds	r3, r3, #1
 152 0094 87F85F30 		strb	r3, [r7, #95]
 153              	.L2:
  23:voltages.c    ****     {
 154              		.loc 1 23 0 is_stmt 0 discriminator 1
 155 0098 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 156 009c 042B     		cmp	r3, #4
 157 009e C6D9     		bls	.L5
 158              	.LBE2:
  38:voltages.c    ****     }
  39:voltages.c    ****     
  40:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 159              		.loc 1 40 0 is_stmt 1
 160 00a0 FFF7FEFF 		bl	AMux_Start
  41:voltages.c    ****     
  42:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 161              		.loc 1 42 0
 162 00a4 FFF7FEFF 		bl	ADC_SaveConfig
  43:voltages.c    ****     
  44:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 163              		.loc 1 44 0
 164 00a8 FFF7FEFF 		bl	ADC_Stop
  45:voltages.c    ****     
  46:voltages.c    ****     Battery_Voltage_Enable_Write(OFF);  // Pulls Battery ADC pin low (turns it off).
 165              		.loc 1 46 0
 166 00ac 0020     		movs	r0, #0
 167 00ae FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  47:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 168              		.loc 1 47 0
 169 00b2 0020     		movs	r0, #0
 170 00b4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  48:voltages.c    ****     
  49:voltages.c    ****     float offset = channels[0] - 1.024; // Should be 1.024 exactly. BK saw an offset when measuring
 171              		.loc 1 49 0
 172 00b8 7B6B     		ldr	r3, [r7, #52]	@ float
 173 00ba 1846     		mov	r0, r3
 174 00bc FFF7FEFF 		bl	__aeabi_f2d
 175 00c0 19A3     		adr	r3, .L7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 5


 176 00c2 D3E90023 		ldrd	r2, [r3]
 177 00c6 FFF7FEFF 		bl	__aeabi_dsub
 178 00ca 0346     		mov	r3, r0
 179 00cc 0C46     		mov	r4, r1
 180 00ce 1846     		mov	r0, r3
 181 00d0 2146     		mov	r1, r4
 182 00d2 FFF7FEFF 		bl	__aeabi_d2f
 183 00d6 0346     		mov	r3, r0
 184 00d8 BB65     		str	r3, [r7, #88]	@ float
  50:voltages.c    ****     voltage.voltage_battery = (channels[ADC_MUX_VBAT] * 11) - offset; // Voltage divider is (1/10) 
 185              		.loc 1 50 0
 186 00da BB6B     		ldr	r3, [r7, #56]	@ float
 187 00dc 1449     		ldr	r1, .L7+8
 188 00de 1846     		mov	r0, r3
 189 00e0 FFF7FEFF 		bl	__aeabi_fmul
 190 00e4 0346     		mov	r3, r0
 191 00e6 B96D     		ldr	r1, [r7, #88]	@ float
 192 00e8 1846     		mov	r0, r3
 193 00ea FFF7FEFF 		bl	__aeabi_fsub
 194 00ee 0346     		mov	r3, r0
 195 00f0 7B64     		str	r3, [r7, #68]	@ float
  51:voltages.c    ****     voltage.voltage_solar = channels[ADC_MUX_VSOL] - offset; // Just want voltage here
 196              		.loc 1 51 0
 197 00f2 FB6B     		ldr	r3, [r7, #60]	@ float
 198 00f4 B96D     		ldr	r1, [r7, #88]	@ float
 199 00f6 1846     		mov	r0, r3
 200 00f8 FFF7FEFF 		bl	__aeabi_fsub
 201 00fc 0346     		mov	r3, r0
 202 00fe BB64     		str	r3, [r7, #72]	@ float
  52:voltages.c    ****     // Voltage across sensor resistor gives 100mV drop for max current, which is 800mA
  53:voltages.c    ****     //voltage.voltage_charge_current = 0.1*(channels[ADC_MUX_CHRG] - voltage.voltage_battery);
  54:voltages.c    ****     voltage.voltage_pressure = channels[ADC_MUX_PRTRANS]; // Pressure transducer reading
 203              		.loc 1 54 0
 204 0100 3B6C     		ldr	r3, [r7, #64]	@ float
 205 0102 3B65     		str	r3, [r7, #80]	@ float
  55:voltages.c    **** 
  56:voltages.c    ****     voltage.valid = 1;
 206              		.loc 1 56 0
 207 0104 0123     		movs	r3, #1
 208 0106 87F85430 		strb	r3, [r7, #84]
  57:voltages.c    ****     
  58:voltages.c    ****     return voltage;
 209              		.loc 1 58 0
 210 010a 7B68     		ldr	r3, [r7, #4]
 211 010c 1D46     		mov	r5, r3
 212 010e 07F14404 		add	r4, r7, #68
 213 0112 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 214 0114 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 215 0116 2368     		ldr	r3, [r4]
 216 0118 2B60     		str	r3, [r5]
  59:voltages.c    **** }
 217              		.loc 1 59 0
 218 011a 7868     		ldr	r0, [r7, #4]
 219 011c 6037     		adds	r7, r7, #96
 220              		.cfi_def_cfa_offset 16
 221 011e BD46     		mov	sp, r7
 222              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 6


 223              		@ sp needed
 224 0120 B0BD     		pop	{r4, r5, r7, pc}
 225              	.L8:
 226 0122 00BFAFF3 		.align	3
 226      0080
 227              	.L7:
 228 0128 FCA9F1D2 		.word	-755914244
 229 012c 4D62F03F 		.word	1072718413
 230 0130 00003041 		.word	1093664768
 231              		.cfi_endproc
 232              	.LFE64:
 233              		.size	voltage_take_readings, .-voltage_take_readings
 234              		.global	__aeabi_fdiv
 235              		.global	__aeabi_ddiv
 236              		.global	__aeabi_dmul
 237              		.section	.text.pressure_sensor_readings,"ax",%progbits
 238              		.align	2
 239              		.global	pressure_sensor_readings
 240              		.thumb
 241              		.thumb_func
 242              		.type	pressure_sensor_readings, %function
 243              	pressure_sensor_readings:
 244              	.LFB65:
  60:voltages.c    **** 
  61:voltages.c    **** // Function to take Pressure sensor readings and save them in the pressure_t datatype
  62:voltages.c    **** pressure_t pressure_sensor_readings(){
 245              		.loc 1 62 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 88
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249 0000 90B5     		push	{r4, r7, lr}
 250              		.cfi_def_cfa_offset 12
 251              		.cfi_offset 4, -12
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 0002 97B0     		sub	sp, sp, #92
 255              		.cfi_def_cfa_offset 104
 256 0004 00AF     		add	r7, sp, #0
 257              		.cfi_def_cfa_register 7
 258 0006 7860     		str	r0, [r7, #4]
  63:voltages.c    ****     
  64:voltages.c    ****     pressure_t pressure;  // Create variable voltage of data structure voltage_t.
  65:voltages.c    ****     float channels[AMux_CHANNELS];
  66:voltages.c    ****     int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 11
  67:voltages.c    ****     
  68:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
 259              		.loc 1 68 0
 260 0008 FFF7FEFF 		bl	AMux_Start
  69:voltages.c    ****  
  70:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
 261              		.loc 1 70 0
 262 000c FFF7FEFF 		bl	ADC_RestoreConfig
  71:voltages.c    ****     
  72:voltages.c    ****     ADC_Start();        // Start the ADC
 263              		.loc 1 72 0
 264 0010 FFF7FEFF 		bl	ADC_Start
  73:voltages.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 7


  74:voltages.c    ****     AMux_Select(ADC_MUX_PRTRANS); // This functions first disconnects all channels then connects th
 265              		.loc 1 74 0
 266 0014 0320     		movs	r0, #3
 267 0016 FFF7FEFF 		bl	AMux_Select
 268              	.LBB5:
  75:voltages.c    ****     
  76:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 269              		.loc 1 76 0
 270 001a 0023     		movs	r3, #0
 271 001c A7F85630 		strh	r3, [r7, #86]	@ movhi
 272 0020 0FE0     		b	.L10
 273              	.L11:
  77:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 274              		.loc 1 77 0 discriminator 3
 275 0022 B7F85640 		ldrh	r4, [r7, #86]
 276 0026 FFF7FEFF 		bl	ADC_Read32
 277 002a 0246     		mov	r2, r0
 278 002c A300     		lsls	r3, r4, #2
 279 002e 07F15801 		add	r1, r7, #88
 280 0032 0B44     		add	r3, r3, r1
 281 0034 43F8502C 		str	r2, [r3, #-80]
  76:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 282              		.loc 1 76 0 discriminator 3
 283 0038 B7F85630 		ldrh	r3, [r7, #86]
 284 003c 0133     		adds	r3, r3, #1
 285 003e A7F85630 		strh	r3, [r7, #86]	@ movhi
 286              	.L10:
  76:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 287              		.loc 1 76 0 is_stmt 0 discriminator 1
 288 0042 B7F85630 		ldrh	r3, [r7, #86]
 289 0046 0A2B     		cmp	r3, #10
 290 0048 EBD9     		bls	.L11
 291              	.LBE5:
  78:voltages.c    ****     }
  79:voltages.c    ****     
  80:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
  81:voltages.c    ****     // Get the median of readings and return that.
  82:voltages.c    ****     pressure.pressure_voltage_off = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Ge
 292              		.loc 1 82 0 is_stmt 1
 293 004a 07F10803 		add	r3, r7, #8
 294 004e 0B21     		movs	r1, #11
 295 0050 1846     		mov	r0, r3
 296 0052 FFF7FEFF 		bl	find_median32
 297 0056 0346     		mov	r3, r0
 298 0058 1846     		mov	r0, r3
 299 005a FFF7FEFF 		bl	ADC_CountsTo_Volts
 300 005e 0346     		mov	r3, r0
 301 0060 BB64     		str	r3, [r7, #72]	@ float
  83:voltages.c    ****     pressure.pressure_voltage_off = floorf(pressure.pressure_voltage_off * 100) / 100;
 302              		.loc 1 83 0
 303 0062 BB6C     		ldr	r3, [r7, #72]	@ float
 304 0064 4849     		ldr	r1, .L15+16
 305 0066 1846     		mov	r0, r3
 306 0068 FFF7FEFF 		bl	__aeabi_fmul
 307 006c 0346     		mov	r3, r0
 308 006e 1846     		mov	r0, r3
 309 0070 FFF7FEFF 		bl	floorf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 8


 310 0074 0346     		mov	r3, r0
 311 0076 4449     		ldr	r1, .L15+16
 312 0078 1846     		mov	r0, r3
 313 007a FFF7FEFF 		bl	__aeabi_fdiv
 314 007e 0346     		mov	r3, r0
 315 0080 BB64     		str	r3, [r7, #72]	@ float
  84:voltages.c    ****     
  85:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
 316              		.loc 1 85 0
 317 0082 0120     		movs	r0, #1
 318 0084 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  86:voltages.c    ****     
  87:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
 319              		.loc 1 87 0
 320 0088 0A20     		movs	r0, #10
 321 008a FFF7FEFF 		bl	CyDelay
 322              	.LBB6:
  88:voltages.c    ****   
  89:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 323              		.loc 1 89 0
 324 008e 0023     		movs	r3, #0
 325 0090 A7F85430 		strh	r3, [r7, #84]	@ movhi
 326 0094 0FE0     		b	.L12
 327              	.L13:
  90:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 328              		.loc 1 90 0 discriminator 3
 329 0096 B7F85440 		ldrh	r4, [r7, #84]
 330 009a FFF7FEFF 		bl	ADC_Read32
 331 009e 0246     		mov	r2, r0
 332 00a0 A300     		lsls	r3, r4, #2
 333 00a2 07F15801 		add	r1, r7, #88
 334 00a6 0B44     		add	r3, r3, r1
 335 00a8 43F8502C 		str	r2, [r3, #-80]
  89:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 336              		.loc 1 89 0 discriminator 3
 337 00ac B7F85430 		ldrh	r3, [r7, #84]
 338 00b0 0133     		adds	r3, r3, #1
 339 00b2 A7F85430 		strh	r3, [r7, #84]	@ movhi
 340              	.L12:
  89:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 341              		.loc 1 89 0 is_stmt 0 discriminator 1
 342 00b6 B7F85430 		ldrh	r3, [r7, #84]
 343 00ba 0A2B     		cmp	r3, #10
 344 00bc EBD9     		bls	.L13
 345              	.LBE6:
  91:voltages.c    ****     }
  92:voltages.c    ****     
  93:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
  94:voltages.c    ****     // Get the median of readings and return that.
  95:voltages.c    ****     pressure.pressure_voltage_on = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get
 346              		.loc 1 95 0 is_stmt 1
 347 00be 07F10803 		add	r3, r7, #8
 348 00c2 0B21     		movs	r1, #11
 349 00c4 1846     		mov	r0, r3
 350 00c6 FFF7FEFF 		bl	find_median32
 351 00ca 0346     		mov	r3, r0
 352 00cc 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 9


 353 00ce FFF7FEFF 		bl	ADC_CountsTo_Volts
 354 00d2 0346     		mov	r3, r0
 355 00d4 7B64     		str	r3, [r7, #68]	@ float
  96:voltages.c    ****     
  97:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 356              		.loc 1 97 0
 357 00d6 FFF7FEFF 		bl	AMux_Start
  98:voltages.c    ****     
  99:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 358              		.loc 1 99 0
 359 00da FFF7FEFF 		bl	ADC_SaveConfig
 100:voltages.c    ****     
 101:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 360              		.loc 1 101 0
 361 00de FFF7FEFF 		bl	ADC_Stop
 102:voltages.c    ****     
 103:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 362              		.loc 1 103 0
 363 00e2 0020     		movs	r0, #0
 364 00e4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
 104:voltages.c    ****     // Calculate the pressure transducer current output.
 105:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 106:voltages.c    ****     // Should fall between 4 and 20mA
 107:voltages.c    ****     pressure.pressure_current = (pressure.pressure_voltage_on/ 150.0)*1000; 
 365              		.loc 1 107 0
 366 00e8 7B6C     		ldr	r3, [r7, #68]	@ float
 367 00ea 1846     		mov	r0, r3
 368 00ec FFF7FEFF 		bl	__aeabi_f2d
 369 00f0 21A3     		adr	r3, .L15
 370 00f2 D3E90023 		ldrd	r2, [r3]
 371 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 372 00fa 0346     		mov	r3, r0
 373 00fc 0C46     		mov	r4, r1
 374 00fe 1846     		mov	r0, r3
 375 0100 2146     		mov	r1, r4
 376 0102 4FF00002 		mov	r2, #0
 377 0106 214B     		ldr	r3, .L15+20
 378 0108 FFF7FEFF 		bl	__aeabi_dmul
 379 010c 0346     		mov	r3, r0
 380 010e 0C46     		mov	r4, r1
 381 0110 1846     		mov	r0, r3
 382 0112 2146     		mov	r1, r4
 383 0114 FFF7FEFF 		bl	__aeabi_d2f
 384 0118 0346     		mov	r3, r0
 385 011a FB64     		str	r3, [r7, #76]	@ float
 108:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 109:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 110:voltages.c    ****     // Should fall between 0 and 10 ft
 111:voltages.c    ****     pressure.pressure_depth = ((10.0*pressure.pressure_voltage_on)/(0.016*150))-(10.0/4.0);   
 386              		.loc 1 111 0
 387 011c 7B6C     		ldr	r3, [r7, #68]	@ float
 388 011e 1846     		mov	r0, r3
 389 0120 FFF7FEFF 		bl	__aeabi_f2d
 390 0124 4FF00002 		mov	r2, #0
 391 0128 194B     		ldr	r3, .L15+24
 392 012a FFF7FEFF 		bl	__aeabi_dmul
 393 012e 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 10


 394 0130 0C46     		mov	r4, r1
 395 0132 1846     		mov	r0, r3
 396 0134 2146     		mov	r1, r4
 397 0136 12A3     		adr	r3, .L15+8
 398 0138 D3E90023 		ldrd	r2, [r3]
 399 013c FFF7FEFF 		bl	__aeabi_ddiv
 400 0140 0346     		mov	r3, r0
 401 0142 0C46     		mov	r4, r1
 402 0144 1846     		mov	r0, r3
 403 0146 2146     		mov	r1, r4
 404 0148 4FF00002 		mov	r2, #0
 405 014c 114B     		ldr	r3, .L15+28
 406 014e FFF7FEFF 		bl	__aeabi_dsub
 407 0152 0346     		mov	r3, r0
 408 0154 0C46     		mov	r4, r1
 409 0156 1846     		mov	r0, r3
 410 0158 2146     		mov	r1, r4
 411 015a FFF7FEFF 		bl	__aeabi_d2f
 412 015e 0346     		mov	r3, r0
 413 0160 3B65     		str	r3, [r7, #80]	@ float
 112:voltages.c    ****     return pressure;
 414              		.loc 1 112 0
 415 0162 7B68     		ldr	r3, [r7, #4]
 416 0164 1C46     		mov	r4, r3
 417 0166 07F14403 		add	r3, r7, #68
 418 016a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 419 016c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 113:voltages.c    **** }
 420              		.loc 1 113 0
 421 0170 7868     		ldr	r0, [r7, #4]
 422 0172 5C37     		adds	r7, r7, #92
 423              		.cfi_def_cfa_offset 12
 424 0174 BD46     		mov	sp, r7
 425              		.cfi_def_cfa_register 13
 426              		@ sp needed
 427 0176 90BD     		pop	{r4, r7, pc}
 428              	.L16:
 429              		.align	3
 430              	.L15:
 431 0178 00000000 		.word	0
 432 017c 00C06240 		.word	1080213504
 433 0180 33333333 		.word	858993459
 434 0184 33330340 		.word	1073951539
 435 0188 0000C842 		.word	1120403456
 436 018c 00408F40 		.word	1083129856
 437 0190 00002440 		.word	1076101120
 438 0194 00000440 		.word	1074003968
 439              		.cfi_endproc
 440              	.LFE65:
 441              		.size	pressure_sensor_readings, .-pressure_sensor_readings
 442              		.section	.text.pressure_calculations,"ax",%progbits
 443              		.align	2
 444              		.global	pressure_calculations
 445              		.thumb
 446              		.thumb_func
 447              		.type	pressure_calculations, %function
 448              	pressure_calculations:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 11


 449              	.LFB66:
 114:voltages.c    **** 
 115:voltages.c    **** // Function to calculate the pressure transducer current and depth estimate.
 116:voltages.c    **** pressure_t pressure_calculations(voltage_t voltage){
 450              		.loc 1 116 0
 451              		.cfi_startproc
 452              		@ args = 24, pretend = 16, frame = 24
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454 0000 84B0     		sub	sp, sp, #16
 455              		.cfi_def_cfa_offset 16
 456 0002 90B5     		push	{r4, r7, lr}
 457              		.cfi_def_cfa_offset 28
 458              		.cfi_offset 4, -28
 459              		.cfi_offset 7, -24
 460              		.cfi_offset 14, -20
 461 0004 87B0     		sub	sp, sp, #28
 462              		.cfi_def_cfa_offset 56
 463 0006 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 465 0008 7860     		str	r0, [r7, #4]
 466 000a 07F12C00 		add	r0, r7, #44
 467 000e 80E80E00 		stmia	r0, {r1, r2, r3}
 117:voltages.c    ****     // Create variable pressure of data structure type pressure_t.
 118:voltages.c    ****     pressure_t pressure;
 119:voltages.c    ****     
 120:voltages.c    ****     // Calculate the pressure transducer current output.
 121:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 122:voltages.c    ****     // Should fall between 4 and 20mA
 123:voltages.c    ****     pressure.pressure_current = (voltage.voltage_pressure/ 150.0)/1000; 
 468              		.loc 1 123 0
 469 0012 BB6B     		ldr	r3, [r7, #56]	@ float
 470 0014 1846     		mov	r0, r3
 471 0016 FFF7FEFF 		bl	__aeabi_f2d
 472 001a 23A3     		adr	r3, .L19
 473 001c D3E90023 		ldrd	r2, [r3]
 474 0020 FFF7FEFF 		bl	__aeabi_ddiv
 475 0024 0346     		mov	r3, r0
 476 0026 0C46     		mov	r4, r1
 477 0028 1846     		mov	r0, r3
 478 002a 2146     		mov	r1, r4
 479 002c 4FF00002 		mov	r2, #0
 480 0030 214B     		ldr	r3, .L19+16
 481 0032 FFF7FEFF 		bl	__aeabi_ddiv
 482 0036 0346     		mov	r3, r0
 483 0038 0C46     		mov	r4, r1
 484 003a 1846     		mov	r0, r3
 485 003c 2146     		mov	r1, r4
 486 003e FFF7FEFF 		bl	__aeabi_d2f
 487 0042 0346     		mov	r3, r0
 488 0044 3B61     		str	r3, [r7, #16]	@ float
 124:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 125:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 126:voltages.c    ****     // Should fall between 0 and 10 ft
 127:voltages.c    ****     pressure.pressure_depth = ((10.0*voltage.voltage_pressure)/(0.016*150))-(10.0/4.0); 
 489              		.loc 1 127 0
 490 0046 BB6B     		ldr	r3, [r7, #56]	@ float
 491 0048 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 12


 492 004a FFF7FEFF 		bl	__aeabi_f2d
 493 004e 4FF00002 		mov	r2, #0
 494 0052 1A4B     		ldr	r3, .L19+20
 495 0054 FFF7FEFF 		bl	__aeabi_dmul
 496 0058 0346     		mov	r3, r0
 497 005a 0C46     		mov	r4, r1
 498 005c 1846     		mov	r0, r3
 499 005e 2146     		mov	r1, r4
 500 0060 13A3     		adr	r3, .L19+8
 501 0062 D3E90023 		ldrd	r2, [r3]
 502 0066 FFF7FEFF 		bl	__aeabi_ddiv
 503 006a 0346     		mov	r3, r0
 504 006c 0C46     		mov	r4, r1
 505 006e 1846     		mov	r0, r3
 506 0070 2146     		mov	r1, r4
 507 0072 4FF00002 		mov	r2, #0
 508 0076 124B     		ldr	r3, .L19+24
 509 0078 FFF7FEFF 		bl	__aeabi_dsub
 510 007c 0346     		mov	r3, r0
 511 007e 0C46     		mov	r4, r1
 512 0080 1846     		mov	r0, r3
 513 0082 2146     		mov	r1, r4
 514 0084 FFF7FEFF 		bl	__aeabi_d2f
 515 0088 0346     		mov	r3, r0
 516 008a 7B61     		str	r3, [r7, #20]	@ float
 128:voltages.c    ****     return pressure;
 517              		.loc 1 128 0
 518 008c 7B68     		ldr	r3, [r7, #4]
 519 008e 1C46     		mov	r4, r3
 520 0090 07F10803 		add	r3, r7, #8
 521 0094 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 522 0096 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 129:voltages.c    **** }
 523              		.loc 1 129 0
 524 009a 7868     		ldr	r0, [r7, #4]
 525 009c 1C37     		adds	r7, r7, #28
 526              		.cfi_def_cfa_offset 28
 527 009e BD46     		mov	sp, r7
 528              		.cfi_def_cfa_register 13
 529              		@ sp needed
 530 00a0 BDE89040 		pop	{r4, r7, lr}
 531              		.cfi_restore 14
 532              		.cfi_restore 7
 533              		.cfi_restore 4
 534              		.cfi_def_cfa_offset 16
 535 00a4 04B0     		add	sp, sp, #16
 536              		.cfi_def_cfa_offset 0
 537 00a6 7047     		bx	lr
 538              	.L20:
 539              		.align	3
 540              	.L19:
 541 00a8 00000000 		.word	0
 542 00ac 00C06240 		.word	1080213504
 543 00b0 33333333 		.word	858993459
 544 00b4 33330340 		.word	1073951539
 545 00b8 00408F40 		.word	1083129856
 546 00bc 00002440 		.word	1076101120
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 13


 547 00c0 00000440 		.word	1074003968
 548              		.cfi_endproc
 549              	.LFE66:
 550              		.size	pressure_calculations, .-pressure_calculations
 551              		.section	.text.sort32,"ax",%progbits
 552              		.align	2
 553              		.global	sort32
 554              		.thumb
 555              		.thumb_func
 556              		.type	sort32, %function
 557              	sort32:
 558              	.LFB67:
 130:voltages.c    ****     
 131:voltages.c    ****     
 132:voltages.c    **** 
 133:voltages.c    **** // Function to sort the elements in the level readings array
 134:voltages.c    **** void sort32(int32 a[],int32 n) { 
 559              		.loc 1 134 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 16
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0000 80B5     		push	{r7, lr}
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 7, -8
 566              		.cfi_offset 14, -4
 567 0002 84B0     		sub	sp, sp, #16
 568              		.cfi_def_cfa_offset 24
 569 0004 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 571 0006 7860     		str	r0, [r7, #4]
 572 0008 3960     		str	r1, [r7]
 135:voltages.c    ****    int32 i,j;
 136:voltages.c    **** 
 137:voltages.c    ****    for(i = 0;i < n-1;i++) {
 573              		.loc 1 137 0
 574 000a 0023     		movs	r3, #0
 575 000c FB60     		str	r3, [r7, #12]
 576 000e 28E0     		b	.L22
 577              	.L26:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 578              		.loc 1 138 0
 579 0010 0023     		movs	r3, #0
 580 0012 BB60     		str	r3, [r7, #8]
 581 0014 1BE0     		b	.L23
 582              	.L25:
 139:voltages.c    ****          if(a[j] > a[j+1])
 583              		.loc 1 139 0
 584 0016 BB68     		ldr	r3, [r7, #8]
 585 0018 9B00     		lsls	r3, r3, #2
 586 001a 7A68     		ldr	r2, [r7, #4]
 587 001c 1344     		add	r3, r3, r2
 588 001e 1A68     		ldr	r2, [r3]
 589 0020 BB68     		ldr	r3, [r7, #8]
 590 0022 0133     		adds	r3, r3, #1
 591 0024 9B00     		lsls	r3, r3, #2
 592 0026 7968     		ldr	r1, [r7, #4]
 593 0028 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 14


 594 002a 1B68     		ldr	r3, [r3]
 595 002c 9A42     		cmp	r2, r3
 596 002e 0BDD     		ble	.L24
 140:voltages.c    ****             swap32(&a[j],&a[j+1]);  // Swap the address of a[j] and a[j+1]
 597              		.loc 1 140 0
 598 0030 BB68     		ldr	r3, [r7, #8]
 599 0032 9B00     		lsls	r3, r3, #2
 600 0034 7A68     		ldr	r2, [r7, #4]
 601 0036 D018     		adds	r0, r2, r3
 602 0038 BB68     		ldr	r3, [r7, #8]
 603 003a 0133     		adds	r3, r3, #1
 604 003c 9B00     		lsls	r3, r3, #2
 605 003e 7A68     		ldr	r2, [r7, #4]
 606 0040 1344     		add	r3, r3, r2
 607 0042 1946     		mov	r1, r3
 608 0044 FFF7FEFF 		bl	swap32
 609              	.L24:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 610              		.loc 1 138 0 discriminator 2
 611 0048 BB68     		ldr	r3, [r7, #8]
 612 004a 0133     		adds	r3, r3, #1
 613 004c BB60     		str	r3, [r7, #8]
 614              	.L23:
 138:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 615              		.loc 1 138 0 is_stmt 0 discriminator 1
 616 004e 3A68     		ldr	r2, [r7]
 617 0050 FB68     		ldr	r3, [r7, #12]
 618 0052 D31A     		subs	r3, r2, r3
 619 0054 5A1E     		subs	r2, r3, #1
 620 0056 BB68     		ldr	r3, [r7, #8]
 621 0058 9A42     		cmp	r2, r3
 622 005a DCDC     		bgt	.L25
 137:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 623              		.loc 1 137 0 is_stmt 1 discriminator 2
 624 005c FB68     		ldr	r3, [r7, #12]
 625 005e 0133     		adds	r3, r3, #1
 626 0060 FB60     		str	r3, [r7, #12]
 627              	.L22:
 137:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 628              		.loc 1 137 0 is_stmt 0 discriminator 1
 629 0062 3B68     		ldr	r3, [r7]
 630 0064 5A1E     		subs	r2, r3, #1
 631 0066 FB68     		ldr	r3, [r7, #12]
 632 0068 9A42     		cmp	r2, r3
 633 006a D1DC     		bgt	.L26
 141:voltages.c    ****       }
 142:voltages.c    ****    }
 143:voltages.c    **** }
 634              		.loc 1 143 0 is_stmt 1
 635 006c 00BF     		nop
 636 006e 1037     		adds	r7, r7, #16
 637              		.cfi_def_cfa_offset 8
 638 0070 BD46     		mov	sp, r7
 639              		.cfi_def_cfa_register 13
 640              		@ sp needed
 641 0072 80BD     		pop	{r7, pc}
 642              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 15


 643              	.LFE67:
 644              		.size	sort32, .-sort32
 645              		.section	.text.swap32,"ax",%progbits
 646              		.align	2
 647              		.global	swap32
 648              		.thumb
 649              		.thumb_func
 650              		.type	swap32, %function
 651              	swap32:
 652              	.LFB68:
 144:voltages.c    **** 
 145:voltages.c    **** // Function to swap elements in the level readings array in order to sort them
 146:voltages.c    **** void swap32(int32 *p,int32 *q){
 653              		.loc 1 146 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 16
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 0000 80B4     		push	{r7}
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 0002 85B0     		sub	sp, sp, #20
 662              		.cfi_def_cfa_offset 24
 663 0004 00AF     		add	r7, sp, #0
 664              		.cfi_def_cfa_register 7
 665 0006 7860     		str	r0, [r7, #4]
 666 0008 3960     		str	r1, [r7]
 147:voltages.c    ****    int32 t;
 148:voltages.c    ****    
 149:voltages.c    ****    t=*p; 
 667              		.loc 1 149 0
 668 000a 7B68     		ldr	r3, [r7, #4]
 669 000c 1B68     		ldr	r3, [r3]
 670 000e FB60     		str	r3, [r7, #12]
 150:voltages.c    ****    *p=*q; 
 671              		.loc 1 150 0
 672 0010 3B68     		ldr	r3, [r7]
 673 0012 1A68     		ldr	r2, [r3]
 674 0014 7B68     		ldr	r3, [r7, #4]
 675 0016 1A60     		str	r2, [r3]
 151:voltages.c    ****    *q=t;
 676              		.loc 1 151 0
 677 0018 3B68     		ldr	r3, [r7]
 678 001a FA68     		ldr	r2, [r7, #12]
 679 001c 1A60     		str	r2, [r3]
 152:voltages.c    **** }
 680              		.loc 1 152 0
 681 001e 00BF     		nop
 682 0020 1437     		adds	r7, r7, #20
 683              		.cfi_def_cfa_offset 4
 684 0022 BD46     		mov	sp, r7
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 0024 80BC     		pop	{r7}
 688              		.cfi_restore 7
 689              		.cfi_def_cfa_offset 0
 690 0026 7047     		bx	lr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 16


 691              		.cfi_endproc
 692              	.LFE68:
 693              		.size	swap32, .-swap32
 694              		.global	__aeabi_i2d
 695              		.global	__aeabi_d2iz
 696              		.section	.text.find_median32,"ax",%progbits
 697              		.align	2
 698              		.global	find_median32
 699              		.thumb
 700              		.thumb_func
 701              		.type	find_median32, %function
 702              	find_median32:
 703              	.LFB69:
 153:voltages.c    **** 
 154:voltages.c    **** // Function to calculate the median of the array, after array is sorted
 155:voltages.c    **** int32 find_median32(int32 array[] , int32 n)
 156:voltages.c    **** {
 704              		.loc 1 156 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 16
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708 0000 90B5     		push	{r4, r7, lr}
 709              		.cfi_def_cfa_offset 12
 710              		.cfi_offset 4, -12
 711              		.cfi_offset 7, -8
 712              		.cfi_offset 14, -4
 713 0002 85B0     		sub	sp, sp, #20
 714              		.cfi_def_cfa_offset 32
 715 0004 00AF     		add	r7, sp, #0
 716              		.cfi_def_cfa_register 7
 717 0006 7860     		str	r0, [r7, #4]
 718 0008 3960     		str	r1, [r7]
 157:voltages.c    ****     int32 median=0;
 719              		.loc 1 157 0
 720 000a 0023     		movs	r3, #0
 721 000c FB60     		str	r3, [r7, #12]
 158:voltages.c    ****     sort32(array,n);
 722              		.loc 1 158 0
 723 000e 3968     		ldr	r1, [r7]
 724 0010 7868     		ldr	r0, [r7, #4]
 725 0012 FFF7FEFF 		bl	sort32
 159:voltages.c    ****     
 160:voltages.c    ****     // If number of elements are even
 161:voltages.c    ****     if(n%2 == 0)
 726              		.loc 1 161 0
 727 0016 3B68     		ldr	r3, [r7]
 728 0018 03F00103 		and	r3, r3, #1
 729 001c 002B     		cmp	r3, #0
 730 001e 23D1     		bne	.L29
 162:voltages.c    ****         // Median is the average of the  two middle sorted numbers
 163:voltages.c    ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 731              		.loc 1 163 0
 732 0020 3B68     		ldr	r3, [r7]
 733 0022 013B     		subs	r3, r3, #1
 734 0024 DA0F     		lsrs	r2, r3, #31
 735 0026 1344     		add	r3, r3, r2
 736 0028 5B10     		asrs	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 17


 737 002a 9B00     		lsls	r3, r3, #2
 738 002c 7A68     		ldr	r2, [r7, #4]
 739 002e 1344     		add	r3, r3, r2
 740 0030 1A68     		ldr	r2, [r3]
 741 0032 3B68     		ldr	r3, [r7]
 742 0034 D90F     		lsrs	r1, r3, #31
 743 0036 0B44     		add	r3, r3, r1
 744 0038 5B10     		asrs	r3, r3, #1
 745 003a 9B00     		lsls	r3, r3, #2
 746 003c 7968     		ldr	r1, [r7, #4]
 747 003e 0B44     		add	r3, r3, r1
 748 0040 1B68     		ldr	r3, [r3]
 749 0042 1344     		add	r3, r3, r2
 750 0044 1846     		mov	r0, r3
 751 0046 FFF7FEFF 		bl	__aeabi_i2d
 752 004a 4FF00002 		mov	r2, #0
 753 004e 4FF08043 		mov	r3, #1073741824
 754 0052 FFF7FEFF 		bl	__aeabi_ddiv
 755 0056 0346     		mov	r3, r0
 756 0058 0C46     		mov	r4, r1
 757 005a 1846     		mov	r0, r3
 758 005c 2146     		mov	r1, r4
 759 005e FFF7FEFF 		bl	__aeabi_d2iz
 760 0062 0346     		mov	r3, r0
 761 0064 FB60     		str	r3, [r7, #12]
 762 0066 08E0     		b	.L30
 763              	.L29:
 164:voltages.c    ****     // If number of elements are odd
 165:voltages.c    ****     else
 166:voltages.c    ****         // Median is the the middle sorted number. 
 167:voltages.c    ****         median = array[n/2];
 764              		.loc 1 167 0
 765 0068 3B68     		ldr	r3, [r7]
 766 006a DA0F     		lsrs	r2, r3, #31
 767 006c 1344     		add	r3, r3, r2
 768 006e 5B10     		asrs	r3, r3, #1
 769 0070 9B00     		lsls	r3, r3, #2
 770 0072 7A68     		ldr	r2, [r7, #4]
 771 0074 1344     		add	r3, r3, r2
 772 0076 1B68     		ldr	r3, [r3]
 773 0078 FB60     		str	r3, [r7, #12]
 774              	.L30:
 168:voltages.c    ****     
 169:voltages.c    ****     return median;
 775              		.loc 1 169 0
 776 007a FB68     		ldr	r3, [r7, #12]
 170:voltages.c    **** }
 777              		.loc 1 170 0
 778 007c 1846     		mov	r0, r3
 779 007e 1437     		adds	r7, r7, #20
 780              		.cfi_def_cfa_offset 12
 781 0080 BD46     		mov	sp, r7
 782              		.cfi_def_cfa_register 13
 783              		@ sp needed
 784 0082 90BD     		pop	{r4, r7, pc}
 785              		.cfi_endproc
 786              	.LFE69:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 18


 787              		.size	find_median32, .-find_median32
 788              		.section	.rodata
 789              		.align	2
 790              	.LC0:
 791 0000 54455354 		.ascii	"TEST_ANALOG_VOLTAGES\000"
 791      5F414E41 
 791      4C4F475F 
 791      564F4C54 
 791      41474553 
 792 0015 000000   		.align	2
 793              	.LC1:
 794 0018 56424154 		.ascii	"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f\000"
 794      3D252E33 
 794      662C5653 
 794      4F4C3D25 
 794      2E33662C 
 795              		.section	.text.voltages_test,"ax",%progbits
 796              		.align	2
 797              		.global	voltages_test
 798              		.thumb
 799              		.thumb_func
 800              		.type	voltages_test, %function
 801              	voltages_test:
 802              	.LFB70:
 171:voltages.c    **** 
 172:voltages.c    **** // Test the voltage readings
 173:voltages.c    **** test_t voltages_test(){
 803              		.loc 1 173 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 416
 806              		@ frame_needed = 1, uses_anonymous_args = 0
 807 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 808              		.cfi_def_cfa_offset 24
 809              		.cfi_offset 4, -24
 810              		.cfi_offset 5, -20
 811              		.cfi_offset 7, -16
 812              		.cfi_offset 8, -12
 813              		.cfi_offset 9, -8
 814              		.cfi_offset 14, -4
 815 0004 EEB0     		sub	sp, sp, #440
 816              		.cfi_def_cfa_offset 464
 817 0006 06AF     		add	r7, sp, #24
 818              		.cfi_def_cfa 7, 440
 819 0008 3B1D     		adds	r3, r7, #4
 820 000a 1860     		str	r0, [r3]
 174:voltages.c    ****     // Create variable test of the data structure test_t
 175:voltages.c    ****     test_t test;
 176:voltages.c    ****     test.status = 0;
 821              		.loc 1 176 0
 822 000c 07F11C03 		add	r3, r7, #28
 823 0010 0022     		movs	r2, #0
 824 0012 83F88020 		strb	r2, [r3, #128]
 177:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_ANALOG_VOLTAGES");
 825              		.loc 1 177 0
 826 0016 07F11C03 		add	r3, r7, #28
 827 001a 264A     		ldr	r2, .L34
 828 001c 1C46     		mov	r4, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 19


 829 001e 1546     		mov	r5, r2
 830 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 831 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 832 0024 95E80300 		ldmia	r5, {r0, r1}
 833 0028 2060     		str	r0, [r4]
 834 002a 0434     		adds	r4, r4, #4
 835 002c 2170     		strb	r1, [r4]
 178:voltages.c    ****     
 179:voltages.c    ****     voltage_t voltage = voltage_take_readings();
 836              		.loc 1 179 0
 837 002e 07F10803 		add	r3, r7, #8
 838 0032 1846     		mov	r0, r3
 839 0034 FFF7FEFF 		bl	voltage_take_readings
 180:voltages.c    ****     
 181:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 182:voltages.c    ****     
 183:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f",
 184:voltages.c    ****             voltage.voltage_battery,
 840              		.loc 1 184 0
 841 0038 07F10803 		add	r3, r7, #8
 842 003c 1B68     		ldr	r3, [r3]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 843              		.loc 1 183 0
 844 003e 1846     		mov	r0, r3
 845 0040 FFF7FEFF 		bl	__aeabi_f2d
 846 0044 0446     		mov	r4, r0
 847 0046 0D46     		mov	r5, r1
 185:voltages.c    ****             voltage.voltage_solar,
 848              		.loc 1 185 0
 849 0048 07F10803 		add	r3, r7, #8
 850 004c 5B68     		ldr	r3, [r3, #4]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 851              		.loc 1 183 0
 852 004e 1846     		mov	r0, r3
 853 0050 FFF7FEFF 		bl	__aeabi_f2d
 854 0054 8046     		mov	r8, r0
 855 0056 8946     		mov	r9, r1
 186:voltages.c    ****             voltage.voltage_charge_current);
 856              		.loc 1 186 0
 857 0058 07F10803 		add	r3, r7, #8
 858 005c 9B68     		ldr	r3, [r3, #8]	@ float
 183:voltages.c    ****             voltage.voltage_battery,
 859              		.loc 1 183 0
 860 005e 1846     		mov	r0, r3
 861 0060 FFF7FEFF 		bl	__aeabi_f2d
 862 0064 0246     		mov	r2, r0
 863 0066 0B46     		mov	r3, r1
 864 0068 07F11C01 		add	r1, r7, #28
 865 006c 01F18100 		add	r0, r1, #129
 866 0070 CDE90423 		strd	r2, [sp, #16]
 867 0074 CDE90289 		strd	r8, [sp, #8]
 868 0078 CDE90045 		strd	r4, [sp]
 869 007c 0E4A     		ldr	r2, .L34+4
 870 007e 4FF48071 		mov	r1, #256
 871 0082 FFF7FEFF 		bl	snprintf
 187:voltages.c    ****     
 188:voltages.c    ****     test.status = 1;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 20


 872              		.loc 1 188 0
 873 0086 07F11C03 		add	r3, r7, #28
 874 008a 0122     		movs	r2, #1
 875 008c 83F88020 		strb	r2, [r3, #128]
 189:voltages.c    ****     
 190:voltages.c    ****     return test;
 876              		.loc 1 190 0
 877 0090 3B1D     		adds	r3, r7, #4
 878 0092 1A68     		ldr	r2, [r3]
 879 0094 07F11C03 		add	r3, r7, #28
 880 0098 1046     		mov	r0, r2
 881 009a 1946     		mov	r1, r3
 882 009c 40F28113 		movw	r3, #385
 883 00a0 1A46     		mov	r2, r3
 884 00a2 FFF7FEFF 		bl	memcpy
 191:voltages.c    **** }
 885              		.loc 1 191 0
 886 00a6 3B1D     		adds	r3, r7, #4
 887 00a8 1868     		ldr	r0, [r3]
 888 00aa 07F5D077 		add	r7, r7, #416
 889              		.cfi_def_cfa_offset 24
 890 00ae BD46     		mov	sp, r7
 891              		.cfi_def_cfa_register 13
 892              		@ sp needed
 893 00b0 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 894              	.L35:
 895              		.align	2
 896              	.L34:
 897 00b4 00000000 		.word	.LC0
 898 00b8 18000000 		.word	.LC1
 899              		.cfi_endproc
 900              	.LFE70:
 901              		.size	voltages_test, .-voltages_test
 902              		.section	.rodata
 903 0036 0000     		.align	2
 904              	.LC2:
 905 0038 54455354 		.ascii	"TEST_PRESSURE_SENSOR\000"
 905      5F505245 
 905      53535552 
 905      455F5345 
 905      4E534F52 
 906 004d 000000   		.align	2
 907              	.LC3:
 908 0050 50524553 		.ascii	"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f\000"
 908      53555245 
 908      3D252E33 
 908      662C5052 
 908      45535F43 
 909              		.global	__aeabi_fcmpeq
 910              		.section	.text.pressure_sensor_test,"ax",%progbits
 911              		.align	2
 912              		.global	pressure_sensor_test
 913              		.thumb
 914              		.thumb_func
 915              		.type	pressure_sensor_test, %function
 916              	pressure_sensor_test:
 917              	.LFB71:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 21


 192:voltages.c    **** 
 193:voltages.c    **** // Test the pressure sensor readings
 194:voltages.c    **** test_t pressure_sensor_test(){
 918              		.loc 1 194 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 416
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 923              		.cfi_def_cfa_offset 24
 924              		.cfi_offset 4, -24
 925              		.cfi_offset 5, -20
 926              		.cfi_offset 7, -16
 927              		.cfi_offset 8, -12
 928              		.cfi_offset 9, -8
 929              		.cfi_offset 14, -4
 930 0004 EEB0     		sub	sp, sp, #440
 931              		.cfi_def_cfa_offset 464
 932 0006 06AF     		add	r7, sp, #24
 933              		.cfi_def_cfa 7, 440
 934 0008 3B1D     		adds	r3, r7, #4
 935 000a 1860     		str	r0, [r3]
 195:voltages.c    ****     // Create variable test of the data structure test_t
 196:voltages.c    ****     test_t test;
 197:voltages.c    ****     test.status = 0;
 936              		.loc 1 197 0
 937 000c 07F11C03 		add	r3, r7, #28
 938 0010 0022     		movs	r2, #0
 939 0012 83F88020 		strb	r2, [r3, #128]
 198:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_PRESSURE_SENSOR");
 940              		.loc 1 198 0
 941 0016 07F11C03 		add	r3, r7, #28
 942 001a 374A     		ldr	r2, .L41
 943 001c 1C46     		mov	r4, r3
 944 001e 1546     		mov	r5, r2
 945 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 946 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 947 0024 95E80300 		ldmia	r5, {r0, r1}
 948 0028 2060     		str	r0, [r4]
 949 002a 0434     		adds	r4, r4, #4
 950 002c 2170     		strb	r1, [r4]
 199:voltages.c    ****     
 200:voltages.c    ****     pressure_t pressure = pressure_sensor_readings();
 951              		.loc 1 200 0
 952 002e 07F10C03 		add	r3, r7, #12
 953 0032 1846     		mov	r0, r3
 954 0034 FFF7FEFF 		bl	pressure_sensor_readings
 201:voltages.c    ****     
 202:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 203:voltages.c    ****     
 204:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f",
 205:voltages.c    ****             pressure.pressure_voltage_on,
 955              		.loc 1 205 0
 956 0038 07F10C03 		add	r3, r7, #12
 957 003c 1B68     		ldr	r3, [r3]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 958              		.loc 1 204 0
 959 003e 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 22


 960 0040 FFF7FEFF 		bl	__aeabi_f2d
 961 0044 0446     		mov	r4, r0
 962 0046 0D46     		mov	r5, r1
 206:voltages.c    ****             pressure.pressure_current,
 963              		.loc 1 206 0
 964 0048 07F10C03 		add	r3, r7, #12
 965 004c 9B68     		ldr	r3, [r3, #8]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 966              		.loc 1 204 0
 967 004e 1846     		mov	r0, r3
 968 0050 FFF7FEFF 		bl	__aeabi_f2d
 969 0054 8046     		mov	r8, r0
 970 0056 8946     		mov	r9, r1
 207:voltages.c    ****             pressure.pressure_depth);
 971              		.loc 1 207 0
 972 0058 07F10C03 		add	r3, r7, #12
 973 005c DB68     		ldr	r3, [r3, #12]	@ float
 204:voltages.c    ****             pressure.pressure_voltage_on,
 974              		.loc 1 204 0
 975 005e 1846     		mov	r0, r3
 976 0060 FFF7FEFF 		bl	__aeabi_f2d
 977 0064 0246     		mov	r2, r0
 978 0066 0B46     		mov	r3, r1
 979 0068 07F11C01 		add	r1, r7, #28
 980 006c 01F18100 		add	r0, r1, #129
 981 0070 CDE90423 		strd	r2, [sp, #16]
 982 0074 CDE90289 		strd	r8, [sp, #8]
 983 0078 CDE90045 		strd	r4, [sp]
 984 007c 1F4A     		ldr	r2, .L41+4
 985 007e 4FF48071 		mov	r1, #256
 986 0082 FFF7FEFF 		bl	snprintf
 208:voltages.c    ****     pressure.pressure_voltage_on = floorf(pressure.pressure_voltage_on * 100) / 100;
 987              		.loc 1 208 0
 988 0086 07F10C03 		add	r3, r7, #12
 989 008a 1B68     		ldr	r3, [r3]	@ float
 990 008c 1C49     		ldr	r1, .L41+8
 991 008e 1846     		mov	r0, r3
 992 0090 FFF7FEFF 		bl	__aeabi_fmul
 993 0094 0346     		mov	r3, r0
 994 0096 1846     		mov	r0, r3
 995 0098 FFF7FEFF 		bl	floorf
 996 009c 0346     		mov	r3, r0
 997 009e 1849     		ldr	r1, .L41+8
 998 00a0 1846     		mov	r0, r3
 999 00a2 FFF7FEFF 		bl	__aeabi_fdiv
 1000 00a6 0346     		mov	r3, r0
 1001 00a8 1A46     		mov	r2, r3
 1002 00aa 07F10C03 		add	r3, r7, #12
 1003 00ae 1A60     		str	r2, [r3]	@ float
 209:voltages.c    ****     if (pressure.pressure_voltage_off != pressure.pressure_voltage_on) {
 1004              		.loc 1 209 0
 1005 00b0 07F10C03 		add	r3, r7, #12
 1006 00b4 5A68     		ldr	r2, [r3, #4]	@ float
 1007 00b6 07F10C03 		add	r3, r7, #12
 1008 00ba 1B68     		ldr	r3, [r3]	@ float
 1009 00bc 1946     		mov	r1, r3
 1010 00be 1046     		mov	r0, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 23


 1011 00c0 FFF7FEFF 		bl	__aeabi_fcmpeq
 1012 00c4 0346     		mov	r3, r0
 1013 00c6 002B     		cmp	r3, #0
 1014 00c8 04D1     		bne	.L37
 210:voltages.c    ****         test.status = 1;
 1015              		.loc 1 210 0
 1016 00ca 07F11C03 		add	r3, r7, #28
 1017 00ce 0122     		movs	r2, #1
 1018 00d0 83F88020 		strb	r2, [r3, #128]
 1019              	.L37:
 211:voltages.c    ****     }
 212:voltages.c    ****     
 213:voltages.c    ****     return test;
 1020              		.loc 1 213 0
 1021 00d4 3B1D     		adds	r3, r7, #4
 1022 00d6 1A68     		ldr	r2, [r3]
 1023 00d8 07F11C03 		add	r3, r7, #28
 1024 00dc 1046     		mov	r0, r2
 1025 00de 1946     		mov	r1, r3
 1026 00e0 40F28113 		movw	r3, #385
 1027 00e4 1A46     		mov	r2, r3
 1028 00e6 FFF7FEFF 		bl	memcpy
 214:voltages.c    **** }
 1029              		.loc 1 214 0
 1030 00ea 3B1D     		adds	r3, r7, #4
 1031 00ec 1868     		ldr	r0, [r3]
 1032 00ee 07F5D077 		add	r7, r7, #416
 1033              		.cfi_def_cfa_offset 24
 1034 00f2 BD46     		mov	sp, r7
 1035              		.cfi_def_cfa_register 13
 1036              		@ sp needed
 1037 00f4 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1038              	.L42:
 1039              		.align	2
 1040              	.L41:
 1041 00f8 38000000 		.word	.LC2
 1042 00fc 50000000 		.word	.LC3
 1043 0100 0000C842 		.word	1120403456
 1044              		.cfi_endproc
 1045              	.LFE71:
 1046              		.size	pressure_sensor_test, .-pressure_sensor_test
 1047              		.text
 1048              	.Letext0:
 1049              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1050              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1051              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1052              		.file 5 "testing.h"
 1053              		.file 6 "voltages.h"
 1054              		.file 7 "data.h"
 1055              		.file 8 "modem.h"
 1056              		.file 9 "notoriOS.h"
 1057              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1058              		.file 11 "level_sensor.h"
 1059              		.file 12 "downstream_level_sensor.h"
 1060              		.file 13 "App_LED.h"
 1061              		.section	.debug_info,"",%progbits
 1062              	.Ldebug_info0:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 24


 1063 0000 E2080000 		.4byte	0x8e2
 1064 0004 0400     		.2byte	0x4
 1065 0006 00000000 		.4byte	.Ldebug_abbrev0
 1066 000a 04       		.byte	0x4
 1067 000b 01       		.uleb128 0x1
 1068 000c 6E000000 		.4byte	.LASF118
 1069 0010 0C       		.byte	0xc
 1070 0011 E4050000 		.4byte	.LASF119
 1071 0015 07000000 		.4byte	.LASF120
 1072 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1073 001d 00000000 		.4byte	0
 1074 0021 00000000 		.4byte	.Ldebug_line0
 1075 0025 02       		.uleb128 0x2
 1076 0026 01       		.byte	0x1
 1077 0027 06       		.byte	0x6
 1078 0028 84010000 		.4byte	.LASF0
 1079 002c 02       		.uleb128 0x2
 1080 002d 01       		.byte	0x1
 1081 002e 08       		.byte	0x8
 1082 002f AB040000 		.4byte	.LASF1
 1083 0033 02       		.uleb128 0x2
 1084 0034 02       		.byte	0x2
 1085 0035 05       		.byte	0x5
 1086 0036 89030000 		.4byte	.LASF2
 1087 003a 02       		.uleb128 0x2
 1088 003b 02       		.byte	0x2
 1089 003c 07       		.byte	0x7
 1090 003d CA050000 		.4byte	.LASF3
 1091 0041 03       		.uleb128 0x3
 1092 0042 B9050000 		.4byte	.LASF9
 1093 0046 02       		.byte	0x2
 1094 0047 3F       		.byte	0x3f
 1095 0048 4C000000 		.4byte	0x4c
 1096 004c 02       		.uleb128 0x2
 1097 004d 04       		.byte	0x4
 1098 004e 05       		.byte	0x5
 1099 004f 0E020000 		.4byte	.LASF4
 1100 0053 02       		.uleb128 0x2
 1101 0054 04       		.byte	0x4
 1102 0055 07       		.byte	0x7
 1103 0056 10030000 		.4byte	.LASF5
 1104 005a 02       		.uleb128 0x2
 1105 005b 08       		.byte	0x8
 1106 005c 05       		.byte	0x5
 1107 005d 76010000 		.4byte	.LASF6
 1108 0061 02       		.uleb128 0x2
 1109 0062 08       		.byte	0x8
 1110 0063 07       		.byte	0x7
 1111 0064 FC000000 		.4byte	.LASF7
 1112 0068 04       		.uleb128 0x4
 1113 0069 04       		.byte	0x4
 1114 006a 05       		.byte	0x5
 1115 006b 696E7400 		.ascii	"int\000"
 1116 006f 02       		.uleb128 0x2
 1117 0070 04       		.byte	0x4
 1118 0071 07       		.byte	0x7
 1119 0072 A1050000 		.4byte	.LASF8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 25


 1120 0076 03       		.uleb128 0x3
 1121 0077 A3040000 		.4byte	.LASF10
 1122 007b 03       		.byte	0x3
 1123 007c 2C       		.byte	0x2c
 1124 007d 41000000 		.4byte	0x41
 1125 0081 05       		.uleb128 0x5
 1126 0082 4E020000 		.4byte	.LASF11
 1127 0086 04       		.byte	0x4
 1128 0087 9201     		.2byte	0x192
 1129 0089 2C000000 		.4byte	0x2c
 1130 008d 05       		.uleb128 0x5
 1131 008e 00000000 		.4byte	.LASF12
 1132 0092 04       		.byte	0x4
 1133 0093 9301     		.2byte	0x193
 1134 0095 3A000000 		.4byte	0x3a
 1135 0099 05       		.uleb128 0x5
 1136 009a 7D060000 		.4byte	.LASF13
 1137 009e 04       		.byte	0x4
 1138 009f 9601     		.2byte	0x196
 1139 00a1 33000000 		.4byte	0x33
 1140 00a5 05       		.uleb128 0x5
 1141 00a6 61020000 		.4byte	.LASF14
 1142 00aa 04       		.byte	0x4
 1143 00ab 9701     		.2byte	0x197
 1144 00ad 4C000000 		.4byte	0x4c
 1145 00b1 02       		.uleb128 0x2
 1146 00b2 04       		.byte	0x4
 1147 00b3 04       		.byte	0x4
 1148 00b4 97040000 		.4byte	.LASF15
 1149 00b8 02       		.uleb128 0x2
 1150 00b9 08       		.byte	0x8
 1151 00ba 04       		.byte	0x4
 1152 00bb B2060000 		.4byte	.LASF16
 1153 00bf 02       		.uleb128 0x2
 1154 00c0 01       		.byte	0x1
 1155 00c1 08       		.byte	0x8
 1156 00c2 9C050000 		.4byte	.LASF17
 1157 00c6 02       		.uleb128 0x2
 1158 00c7 08       		.byte	0x8
 1159 00c8 04       		.byte	0x4
 1160 00c9 90050000 		.4byte	.LASF18
 1161 00cd 02       		.uleb128 0x2
 1162 00ce 04       		.byte	0x4
 1163 00cf 07       		.byte	0x7
 1164 00d0 0B040000 		.4byte	.LASF19
 1165 00d4 06       		.uleb128 0x6
 1166 00d5 BF000000 		.4byte	0xbf
 1167 00d9 E4000000 		.4byte	0xe4
 1168 00dd 07       		.uleb128 0x7
 1169 00de CD000000 		.4byte	0xcd
 1170 00e2 17       		.byte	0x17
 1171 00e3 00       		.byte	0
 1172 00e4 08       		.uleb128 0x8
 1173 00e5 8101     		.2byte	0x181
 1174 00e7 05       		.byte	0x5
 1175 00e8 0A       		.byte	0xa
 1176 00e9 12010000 		.4byte	0x112
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 26


 1177 00ed 09       		.uleb128 0x9
 1178 00ee 30040000 		.4byte	.LASF20
 1179 00f2 05       		.byte	0x5
 1180 00f3 0C       		.byte	0xc
 1181 00f4 12010000 		.4byte	0x112
 1182 00f8 00       		.byte	0
 1183 00f9 09       		.uleb128 0x9
 1184 00fa 22060000 		.4byte	.LASF21
 1185 00fe 05       		.byte	0x5
 1186 00ff 0D       		.byte	0xd
 1187 0100 81000000 		.4byte	0x81
 1188 0104 80       		.byte	0x80
 1189 0105 09       		.uleb128 0x9
 1190 0106 2E050000 		.4byte	.LASF22
 1191 010a 05       		.byte	0x5
 1192 010b 0F       		.byte	0xf
 1193 010c 22010000 		.4byte	0x122
 1194 0110 81       		.byte	0x81
 1195 0111 00       		.byte	0
 1196 0112 06       		.uleb128 0x6
 1197 0113 BF000000 		.4byte	0xbf
 1198 0117 22010000 		.4byte	0x122
 1199 011b 07       		.uleb128 0x7
 1200 011c CD000000 		.4byte	0xcd
 1201 0120 7F       		.byte	0x7f
 1202 0121 00       		.byte	0
 1203 0122 06       		.uleb128 0x6
 1204 0123 BF000000 		.4byte	0xbf
 1205 0127 32010000 		.4byte	0x132
 1206 012b 07       		.uleb128 0x7
 1207 012c CD000000 		.4byte	0xcd
 1208 0130 FF       		.byte	0xff
 1209 0131 00       		.byte	0
 1210 0132 03       		.uleb128 0x3
 1211 0133 F9040000 		.4byte	.LASF23
 1212 0137 05       		.byte	0x5
 1213 0138 10       		.byte	0x10
 1214 0139 E4000000 		.4byte	0xe4
 1215 013d 0A       		.uleb128 0xa
 1216 013e 14       		.byte	0x14
 1217 013f 06       		.byte	0x6
 1218 0140 11       		.byte	0x11
 1219 0141 82010000 		.4byte	0x182
 1220 0145 09       		.uleb128 0x9
 1221 0146 22030000 		.4byte	.LASF24
 1222 014a 06       		.byte	0x6
 1223 014b 12       		.byte	0x12
 1224 014c B1000000 		.4byte	0xb1
 1225 0150 00       		.byte	0
 1226 0151 09       		.uleb128 0x9
 1227 0152 52030000 		.4byte	.LASF25
 1228 0156 06       		.byte	0x6
 1229 0157 13       		.byte	0x13
 1230 0158 B1000000 		.4byte	0xb1
 1231 015c 04       		.byte	0x4
 1232 015d 09       		.uleb128 0x9
 1233 015e C6010000 		.4byte	.LASF26
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 27


 1234 0162 06       		.byte	0x6
 1235 0163 14       		.byte	0x14
 1236 0164 B1000000 		.4byte	0xb1
 1237 0168 08       		.byte	0x8
 1238 0169 09       		.uleb128 0x9
 1239 016a 79040000 		.4byte	.LASF27
 1240 016e 06       		.byte	0x6
 1241 016f 15       		.byte	0x15
 1242 0170 B1000000 		.4byte	0xb1
 1243 0174 0C       		.byte	0xc
 1244 0175 09       		.uleb128 0x9
 1245 0176 54050000 		.4byte	.LASF28
 1246 017a 06       		.byte	0x6
 1247 017b 16       		.byte	0x16
 1248 017c 81000000 		.4byte	0x81
 1249 0180 10       		.byte	0x10
 1250 0181 00       		.byte	0
 1251 0182 03       		.uleb128 0x3
 1252 0183 B6030000 		.4byte	.LASF29
 1253 0187 06       		.byte	0x6
 1254 0188 17       		.byte	0x17
 1255 0189 3D010000 		.4byte	0x13d
 1256 018d 0A       		.uleb128 0xa
 1257 018e 10       		.byte	0x10
 1258 018f 06       		.byte	0x6
 1259 0190 19       		.byte	0x19
 1260 0191 C6010000 		.4byte	0x1c6
 1261 0195 09       		.uleb128 0x9
 1262 0196 E0020000 		.4byte	.LASF30
 1263 019a 06       		.byte	0x6
 1264 019b 1A       		.byte	0x1a
 1265 019c B1000000 		.4byte	0xb1
 1266 01a0 00       		.byte	0
 1267 01a1 09       		.uleb128 0x9
 1268 01a2 39020000 		.4byte	.LASF31
 1269 01a6 06       		.byte	0x6
 1270 01a7 1B       		.byte	0x1b
 1271 01a8 B1000000 		.4byte	0xb1
 1272 01ac 04       		.byte	0x4
 1273 01ad 09       		.uleb128 0x9
 1274 01ae 43050000 		.4byte	.LASF32
 1275 01b2 06       		.byte	0x6
 1276 01b3 1C       		.byte	0x1c
 1277 01b4 B1000000 		.4byte	0xb1
 1278 01b8 08       		.byte	0x8
 1279 01b9 09       		.uleb128 0x9
 1280 01ba 00050000 		.4byte	.LASF33
 1281 01be 06       		.byte	0x6
 1282 01bf 1D       		.byte	0x1d
 1283 01c0 B1000000 		.4byte	0xb1
 1284 01c4 0C       		.byte	0xc
 1285 01c5 00       		.byte	0
 1286 01c6 03       		.uleb128 0x3
 1287 01c7 9A060000 		.4byte	.LASF34
 1288 01cb 06       		.byte	0x6
 1289 01cc 1E       		.byte	0x1e
 1290 01cd 8D010000 		.4byte	0x18d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 28


 1291 01d1 0A       		.uleb128 0xa
 1292 01d2 2C       		.byte	0x2c
 1293 01d3 07       		.byte	0x7
 1294 01d4 14       		.byte	0x14
 1295 01d5 FE010000 		.4byte	0x1fe
 1296 01d9 0B       		.uleb128 0xb
 1297 01da 6B657900 		.ascii	"key\000"
 1298 01de 07       		.byte	0x7
 1299 01df 15       		.byte	0x15
 1300 01e0 FE010000 		.4byte	0x1fe
 1301 01e4 00       		.byte	0
 1302 01e5 09       		.uleb128 0x9
 1303 01e6 B7020000 		.4byte	.LASF35
 1304 01ea 07       		.byte	0x7
 1305 01eb 16       		.byte	0x16
 1306 01ec FE010000 		.4byte	0x1fe
 1307 01f0 14       		.byte	0x14
 1308 01f1 09       		.uleb128 0x9
 1309 01f2 51040000 		.4byte	.LASF36
 1310 01f6 07       		.byte	0x7
 1311 01f7 17       		.byte	0x17
 1312 01f8 A5000000 		.4byte	0xa5
 1313 01fc 28       		.byte	0x28
 1314 01fd 00       		.byte	0
 1315 01fe 06       		.uleb128 0x6
 1316 01ff BF000000 		.4byte	0xbf
 1317 0203 0E020000 		.4byte	0x20e
 1318 0207 07       		.uleb128 0x7
 1319 0208 CD000000 		.4byte	0xcd
 1320 020c 13       		.byte	0x13
 1321 020d 00       		.byte	0
 1322 020e 03       		.uleb128 0x3
 1323 020f 04030000 		.4byte	.LASF37
 1324 0213 07       		.byte	0x7
 1325 0214 19       		.byte	0x19
 1326 0215 D1010000 		.4byte	0x1d1
 1327 0219 0A       		.uleb128 0xa
 1328 021a 3C       		.byte	0x3c
 1329 021b 08       		.byte	0x8
 1330 021c 36       		.byte	0x36
 1331 021d 46020000 		.4byte	0x246
 1332 0221 09       		.uleb128 0x9
 1333 0222 DD050000 		.4byte	.LASF38
 1334 0226 08       		.byte	0x8
 1335 0227 37       		.byte	0x37
 1336 0228 FE010000 		.4byte	0x1fe
 1337 022c 00       		.byte	0
 1338 022d 09       		.uleb128 0x9
 1339 022e 85020000 		.4byte	.LASF39
 1340 0232 08       		.byte	0x8
 1341 0233 38       		.byte	0x38
 1342 0234 FE010000 		.4byte	0x1fe
 1343 0238 14       		.byte	0x14
 1344 0239 09       		.uleb128 0x9
 1345 023a 29050000 		.4byte	.LASF40
 1346 023e 08       		.byte	0x8
 1347 023f 39       		.byte	0x39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 29


 1348 0240 FE010000 		.4byte	0x1fe
 1349 0244 28       		.byte	0x28
 1350 0245 00       		.byte	0
 1351 0246 03       		.uleb128 0x3
 1352 0247 DD010000 		.4byte	.LASF41
 1353 024b 08       		.byte	0x8
 1354 024c 3B       		.byte	0x3b
 1355 024d 19020000 		.4byte	0x219
 1356 0251 0A       		.uleb128 0xa
 1357 0252 20       		.byte	0x20
 1358 0253 08       		.byte	0x8
 1359 0254 3D       		.byte	0x3d
 1360 0255 BA020000 		.4byte	0x2ba
 1361 0259 09       		.uleb128 0x9
 1362 025a 17020000 		.4byte	.LASF42
 1363 025e 08       		.byte	0x8
 1364 025f 3E       		.byte	0x3e
 1365 0260 68000000 		.4byte	0x68
 1366 0264 00       		.byte	0
 1367 0265 0B       		.uleb128 0xb
 1368 0266 62657200 		.ascii	"ber\000"
 1369 026a 08       		.byte	0x8
 1370 026b 3F       		.byte	0x3f
 1371 026c 68000000 		.4byte	0x68
 1372 0270 04       		.byte	0x4
 1373 0271 09       		.uleb128 0x9
 1374 0272 0F050000 		.4byte	.LASF43
 1375 0276 08       		.byte	0x8
 1376 0277 40       		.byte	0x40
 1377 0278 68000000 		.4byte	0x68
 1378 027c 08       		.byte	0x8
 1379 027d 09       		.uleb128 0x9
 1380 027e 90010000 		.4byte	.LASF44
 1381 0282 08       		.byte	0x8
 1382 0283 41       		.byte	0x41
 1383 0284 68000000 		.4byte	0x68
 1384 0288 0C       		.byte	0xc
 1385 0289 09       		.uleb128 0x9
 1386 028a E3040000 		.4byte	.LASF45
 1387 028e 08       		.byte	0x8
 1388 028f 42       		.byte	0x42
 1389 0290 68000000 		.4byte	0x68
 1390 0294 10       		.byte	0x10
 1391 0295 09       		.uleb128 0x9
 1392 0296 DE040000 		.4byte	.LASF46
 1393 029a 08       		.byte	0x8
 1394 029b 43       		.byte	0x43
 1395 029c 68000000 		.4byte	0x68
 1396 02a0 14       		.byte	0x14
 1397 02a1 09       		.uleb128 0x9
 1398 02a2 A3010000 		.4byte	.LASF47
 1399 02a6 08       		.byte	0x8
 1400 02a7 44       		.byte	0x44
 1401 02a8 68000000 		.4byte	0x68
 1402 02ac 18       		.byte	0x18
 1403 02ad 09       		.uleb128 0x9
 1404 02ae 76030000 		.4byte	.LASF48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 30


 1405 02b2 08       		.byte	0x8
 1406 02b3 45       		.byte	0x45
 1407 02b4 68000000 		.4byte	0x68
 1408 02b8 1C       		.byte	0x1c
 1409 02b9 00       		.byte	0
 1410 02ba 03       		.uleb128 0x3
 1411 02bb 35050000 		.4byte	.LASF49
 1412 02bf 08       		.byte	0x8
 1413 02c0 47       		.byte	0x47
 1414 02c1 51020000 		.4byte	0x251
 1415 02c5 0A       		.uleb128 0xa
 1416 02c6 08       		.byte	0x8
 1417 02c7 08       		.byte	0x8
 1418 02c8 53       		.byte	0x53
 1419 02c9 2E030000 		.4byte	0x32e
 1420 02cd 09       		.uleb128 0x9
 1421 02ce 67020000 		.4byte	.LASF50
 1422 02d2 08       		.byte	0x8
 1423 02d3 55       		.byte	0x55
 1424 02d4 81000000 		.4byte	0x81
 1425 02d8 00       		.byte	0
 1426 02d9 09       		.uleb128 0x9
 1427 02da 91060000 		.4byte	.LASF51
 1428 02de 08       		.byte	0x8
 1429 02df 57       		.byte	0x57
 1430 02e0 2E030000 		.4byte	0x32e
 1431 02e4 01       		.byte	0x1
 1432 02e5 09       		.uleb128 0x9
 1433 02e6 A5060000 		.4byte	.LASF52
 1434 02ea 08       		.byte	0x8
 1435 02eb 59       		.byte	0x59
 1436 02ec 81000000 		.4byte	0x81
 1437 02f0 02       		.byte	0x2
 1438 02f1 09       		.uleb128 0x9
 1439 02f2 E8040000 		.4byte	.LASF53
 1440 02f6 08       		.byte	0x8
 1441 02f7 5B       		.byte	0x5b
 1442 02f8 81000000 		.4byte	0x81
 1443 02fc 03       		.byte	0x3
 1444 02fd 09       		.uleb128 0x9
 1445 02fe AB020000 		.4byte	.LASF54
 1446 0302 08       		.byte	0x8
 1447 0303 5E       		.byte	0x5e
 1448 0304 81000000 		.4byte	0x81
 1449 0308 04       		.byte	0x4
 1450 0309 09       		.uleb128 0x9
 1451 030a 57060000 		.4byte	.LASF55
 1452 030e 08       		.byte	0x8
 1453 030f 63       		.byte	0x63
 1454 0310 81000000 		.4byte	0x81
 1455 0314 05       		.byte	0x5
 1456 0315 09       		.uleb128 0x9
 1457 0316 6B050000 		.4byte	.LASF56
 1458 031a 08       		.byte	0x8
 1459 031b 65       		.byte	0x65
 1460 031c 81000000 		.4byte	0x81
 1461 0320 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 31


 1462 0321 09       		.uleb128 0x9
 1463 0322 EF050000 		.4byte	.LASF57
 1464 0326 08       		.byte	0x8
 1465 0327 66       		.byte	0x66
 1466 0328 81000000 		.4byte	0x81
 1467 032c 07       		.byte	0x7
 1468 032d 00       		.byte	0
 1469 032e 02       		.uleb128 0x2
 1470 032f 01       		.byte	0x1
 1471 0330 02       		.byte	0x2
 1472 0331 9D040000 		.4byte	.LASF58
 1473 0335 03       		.uleb128 0x3
 1474 0336 13010000 		.4byte	.LASF59
 1475 033a 08       		.byte	0x8
 1476 033b 68       		.byte	0x68
 1477 033c C5020000 		.4byte	0x2c5
 1478 0340 0A       		.uleb128 0xa
 1479 0341 06       		.byte	0x6
 1480 0342 09       		.byte	0x9
 1481 0343 2F       		.byte	0x2f
 1482 0344 79030000 		.4byte	0x379
 1483 0348 09       		.uleb128 0x9
 1484 0349 8E020000 		.4byte	.LASF60
 1485 034d 09       		.byte	0x9
 1486 034e 31       		.byte	0x31
 1487 034f 8D000000 		.4byte	0x8d
 1488 0353 00       		.byte	0
 1489 0354 09       		.uleb128 0x9
 1490 0355 1D020000 		.4byte	.LASF61
 1491 0359 09       		.byte	0x9
 1492 035a 32       		.byte	0x32
 1493 035b 99000000 		.4byte	0x99
 1494 035f 02       		.byte	0x2
 1495 0360 09       		.uleb128 0x9
 1496 0361 83060000 		.4byte	.LASF62
 1497 0365 09       		.byte	0x9
 1498 0366 33       		.byte	0x33
 1499 0367 81000000 		.4byte	0x81
 1500 036b 04       		.byte	0x4
 1501 036c 09       		.uleb128 0x9
 1502 036d 56000000 		.4byte	.LASF63
 1503 0371 09       		.byte	0x9
 1504 0372 34       		.byte	0x34
 1505 0373 81000000 		.4byte	0x81
 1506 0377 05       		.byte	0x5
 1507 0378 00       		.byte	0
 1508 0379 03       		.uleb128 0x3
 1509 037a 33020000 		.4byte	.LASF64
 1510 037e 09       		.byte	0x9
 1511 037f 37       		.byte	0x37
 1512 0380 84030000 		.4byte	0x384
 1513 0384 0C       		.uleb128 0xc
 1514 0385 40030000 		.4byte	0x340
 1515 0389 0A       		.uleb128 0xa
 1516 038a 1C       		.byte	0x1c
 1517 038b 09       		.byte	0x9
 1518 038c 3A       		.byte	0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 32


 1519 038d AA030000 		.4byte	0x3aa
 1520 0391 09       		.uleb128 0x9
 1521 0392 3F030000 		.4byte	.LASF65
 1522 0396 09       		.byte	0x9
 1523 0397 3C       		.byte	0x3c
 1524 0398 AA030000 		.4byte	0x3aa
 1525 039c 00       		.byte	0
 1526 039d 09       		.uleb128 0x9
 1527 039e 77020000 		.4byte	.LASF66
 1528 03a2 09       		.byte	0x9
 1529 03a3 3D       		.byte	0x3d
 1530 03a4 D4000000 		.4byte	0xd4
 1531 03a8 04       		.byte	0x4
 1532 03a9 00       		.byte	0
 1533 03aa 0D       		.uleb128 0xd
 1534 03ab 04       		.byte	0x4
 1535 03ac 46020000 		.4byte	0x246
 1536 03b0 03       		.uleb128 0x3
 1537 03b1 E0030000 		.4byte	.LASF67
 1538 03b5 09       		.byte	0x9
 1539 03b6 3F       		.byte	0x3f
 1540 03b7 89030000 		.4byte	0x389
 1541 03bb 0A       		.uleb128 0xa
 1542 03bc 68       		.byte	0x68
 1543 03bd 09       		.byte	0x9
 1544 03be 45       		.byte	0x45
 1545 03bf DC030000 		.4byte	0x3dc
 1546 03c3 09       		.uleb128 0x9
 1547 03c4 4A030000 		.4byte	.LASF68
 1548 03c8 09       		.byte	0x9
 1549 03c9 4A       		.byte	0x4a
 1550 03ca DC030000 		.4byte	0x3dc
 1551 03ce 00       		.byte	0
 1552 03cf 09       		.uleb128 0x9
 1553 03d0 37030000 		.4byte	.LASF69
 1554 03d4 09       		.byte	0x9
 1555 03d5 4B       		.byte	0x4b
 1556 03d6 68000000 		.4byte	0x68
 1557 03da 64       		.byte	0x64
 1558 03db 00       		.byte	0
 1559 03dc 06       		.uleb128 0x6
 1560 03dd BF000000 		.4byte	0xbf
 1561 03e1 EC030000 		.4byte	0x3ec
 1562 03e5 07       		.uleb128 0x7
 1563 03e6 CD000000 		.4byte	0xcd
 1564 03ea 63       		.byte	0x63
 1565 03eb 00       		.byte	0
 1566 03ec 03       		.uleb128 0x3
 1567 03ed 64060000 		.4byte	.LASF70
 1568 03f1 09       		.byte	0x9
 1569 03f2 51       		.byte	0x51
 1570 03f3 BB030000 		.4byte	0x3bb
 1571 03f7 0E       		.uleb128 0xe
 1572 03f8 0C060000 		.4byte	.LASF75
 1573 03fc 01       		.byte	0x1
 1574 03fd 06       		.byte	0x6
 1575 03fe 82010000 		.4byte	0x182
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 33


 1576 0402 00000000 		.4byte	.LFB64
 1577 0406 34010000 		.4byte	.LFE64-.LFB64
 1578 040a 01       		.uleb128 0x1
 1579 040b 9C       		.byte	0x9c
 1580 040c 80040000 		.4byte	0x480
 1581 0410 0F       		.uleb128 0xf
 1582 0411 2A010000 		.4byte	.LASF71
 1583 0415 01       		.byte	0x1
 1584 0416 08       		.byte	0x8
 1585 0417 82010000 		.4byte	0x182
 1586 041b 02       		.uleb128 0x2
 1587 041c 91       		.byte	0x91
 1588 041d 54       		.sleb128 -44
 1589 041e 0F       		.uleb128 0xf
 1590 041f 05020000 		.4byte	.LASF72
 1591 0423 01       		.byte	0x1
 1592 0424 15       		.byte	0x15
 1593 0425 80040000 		.4byte	0x480
 1594 0429 02       		.uleb128 0x2
 1595 042a 91       		.byte	0x91
 1596 042b 44       		.sleb128 -60
 1597 042c 0F       		.uleb128 0xf
 1598 042d C3050000 		.4byte	.LASF73
 1599 0431 01       		.byte	0x1
 1600 0432 31       		.byte	0x31
 1601 0433 B1000000 		.4byte	0xb1
 1602 0437 02       		.uleb128 0x2
 1603 0438 91       		.byte	0x91
 1604 0439 68       		.sleb128 -24
 1605 043a 10       		.uleb128 0x10
 1606 043b 26000000 		.4byte	.LBB2
 1607 043f 7A000000 		.4byte	.LBE2-.LBB2
 1608 0443 11       		.uleb128 0x11
 1609 0444 6300     		.ascii	"c\000"
 1610 0446 01       		.byte	0x1
 1611 0447 17       		.byte	0x17
 1612 0448 81000000 		.4byte	0x81
 1613 044c 02       		.uleb128 0x2
 1614 044d 91       		.byte	0x91
 1615 044e 6F       		.sleb128 -17
 1616 044f 10       		.uleb128 0x10
 1617 0450 2E000000 		.4byte	.LBB3
 1618 0454 60000000 		.4byte	.LBE3-.LBB3
 1619 0458 0F       		.uleb128 0xf
 1620 0459 14050000 		.4byte	.LASF74
 1621 045d 01       		.byte	0x1
 1622 045e 1A       		.byte	0x1a
 1623 045f 90040000 		.4byte	0x490
 1624 0463 03       		.uleb128 0x3
 1625 0464 91       		.byte	0x91
 1626 0465 987F     		.sleb128 -104
 1627 0467 10       		.uleb128 0x10
 1628 0468 38000000 		.4byte	.LBB4
 1629 046c 30000000 		.4byte	.LBE4-.LBB4
 1630 0470 11       		.uleb128 0x11
 1631 0471 6900     		.ascii	"i\000"
 1632 0473 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 34


 1633 0474 1E       		.byte	0x1e
 1634 0475 8D000000 		.4byte	0x8d
 1635 0479 02       		.uleb128 0x2
 1636 047a 91       		.byte	0x91
 1637 047b 6C       		.sleb128 -20
 1638 047c 00       		.byte	0
 1639 047d 00       		.byte	0
 1640 047e 00       		.byte	0
 1641 047f 00       		.byte	0
 1642 0480 06       		.uleb128 0x6
 1643 0481 B1000000 		.4byte	0xb1
 1644 0485 90040000 		.4byte	0x490
 1645 0489 07       		.uleb128 0x7
 1646 048a CD000000 		.4byte	0xcd
 1647 048e 03       		.byte	0x3
 1648 048f 00       		.byte	0
 1649 0490 06       		.uleb128 0x6
 1650 0491 A5000000 		.4byte	0xa5
 1651 0495 A0040000 		.4byte	0x4a0
 1652 0499 07       		.uleb128 0x7
 1653 049a CD000000 		.4byte	0xcd
 1654 049e 0A       		.byte	0xa
 1655 049f 00       		.byte	0
 1656 04a0 0E       		.uleb128 0xe
 1657 04a1 BD020000 		.4byte	.LASF76
 1658 04a5 01       		.byte	0x1
 1659 04a6 3E       		.byte	0x3e
 1660 04a7 C6010000 		.4byte	0x1c6
 1661 04ab 00000000 		.4byte	.LFB65
 1662 04af 98010000 		.4byte	.LFE65-.LFB65
 1663 04b3 01       		.uleb128 0x1
 1664 04b4 9C       		.byte	0x9c
 1665 04b5 15050000 		.4byte	0x515
 1666 04b9 0F       		.uleb128 0xf
 1667 04ba 70040000 		.4byte	.LASF77
 1668 04be 01       		.byte	0x1
 1669 04bf 40       		.byte	0x40
 1670 04c0 C6010000 		.4byte	0x1c6
 1671 04c4 02       		.uleb128 0x2
 1672 04c5 91       		.byte	0x91
 1673 04c6 5C       		.sleb128 -36
 1674 04c7 0F       		.uleb128 0xf
 1675 04c8 05020000 		.4byte	.LASF72
 1676 04cc 01       		.byte	0x1
 1677 04cd 41       		.byte	0x41
 1678 04ce 80040000 		.4byte	0x480
 1679 04d2 02       		.uleb128 0x2
 1680 04d3 91       		.byte	0x91
 1681 04d4 4C       		.sleb128 -52
 1682 04d5 0F       		.uleb128 0xf
 1683 04d6 14050000 		.4byte	.LASF74
 1684 04da 01       		.byte	0x1
 1685 04db 42       		.byte	0x42
 1686 04dc 90040000 		.4byte	0x490
 1687 04e0 03       		.uleb128 0x3
 1688 04e1 91       		.byte	0x91
 1689 04e2 A07F     		.sleb128 -96
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 35


 1690 04e4 12       		.uleb128 0x12
 1691 04e5 1A000000 		.4byte	.LBB5
 1692 04e9 30000000 		.4byte	.LBE5-.LBB5
 1693 04ed FE040000 		.4byte	0x4fe
 1694 04f1 11       		.uleb128 0x11
 1695 04f2 6900     		.ascii	"i\000"
 1696 04f4 01       		.byte	0x1
 1697 04f5 4C       		.byte	0x4c
 1698 04f6 8D000000 		.4byte	0x8d
 1699 04fa 02       		.uleb128 0x2
 1700 04fb 91       		.byte	0x91
 1701 04fc 6E       		.sleb128 -18
 1702 04fd 00       		.byte	0
 1703 04fe 10       		.uleb128 0x10
 1704 04ff 8E000000 		.4byte	.LBB6
 1705 0503 30000000 		.4byte	.LBE6-.LBB6
 1706 0507 11       		.uleb128 0x11
 1707 0508 6900     		.ascii	"i\000"
 1708 050a 01       		.byte	0x1
 1709 050b 59       		.byte	0x59
 1710 050c 8D000000 		.4byte	0x8d
 1711 0510 02       		.uleb128 0x2
 1712 0511 91       		.byte	0x91
 1713 0512 6C       		.sleb128 -20
 1714 0513 00       		.byte	0
 1715 0514 00       		.byte	0
 1716 0515 13       		.uleb128 0x13
 1717 0516 60030000 		.4byte	.LASF80
 1718 051a 01       		.byte	0x1
 1719 051b 74       		.byte	0x74
 1720 051c C6010000 		.4byte	0x1c6
 1721 0520 00000000 		.4byte	.LFB66
 1722 0524 C4000000 		.4byte	.LFE66-.LFB66
 1723 0528 01       		.uleb128 0x1
 1724 0529 9C       		.byte	0x9c
 1725 052a 4B050000 		.4byte	0x54b
 1726 052e 14       		.uleb128 0x14
 1727 052f 2A010000 		.4byte	.LASF71
 1728 0533 01       		.byte	0x1
 1729 0534 74       		.byte	0x74
 1730 0535 82010000 		.4byte	0x182
 1731 0539 02       		.uleb128 0x2
 1732 053a 91       		.byte	0x91
 1733 053b 74       		.sleb128 -12
 1734 053c 0F       		.uleb128 0xf
 1735 053d 70040000 		.4byte	.LASF77
 1736 0541 01       		.byte	0x1
 1737 0542 76       		.byte	0x76
 1738 0543 C6010000 		.4byte	0x1c6
 1739 0547 02       		.uleb128 0x2
 1740 0548 91       		.byte	0x91
 1741 0549 50       		.sleb128 -48
 1742 054a 00       		.byte	0
 1743 054b 15       		.uleb128 0x15
 1744 054c 4F000000 		.4byte	.LASF78
 1745 0550 01       		.byte	0x1
 1746 0551 86       		.byte	0x86
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 36


 1747 0552 00000000 		.4byte	.LFB67
 1748 0556 74000000 		.4byte	.LFE67-.LFB67
 1749 055a 01       		.uleb128 0x1
 1750 055b 9C       		.byte	0x9c
 1751 055c 91050000 		.4byte	0x591
 1752 0560 16       		.uleb128 0x16
 1753 0561 6100     		.ascii	"a\000"
 1754 0563 01       		.byte	0x1
 1755 0564 86       		.byte	0x86
 1756 0565 91050000 		.4byte	0x591
 1757 0569 02       		.uleb128 0x2
 1758 056a 91       		.byte	0x91
 1759 056b 6C       		.sleb128 -20
 1760 056c 16       		.uleb128 0x16
 1761 056d 6E00     		.ascii	"n\000"
 1762 056f 01       		.byte	0x1
 1763 0570 86       		.byte	0x86
 1764 0571 A5000000 		.4byte	0xa5
 1765 0575 02       		.uleb128 0x2
 1766 0576 91       		.byte	0x91
 1767 0577 68       		.sleb128 -24
 1768 0578 11       		.uleb128 0x11
 1769 0579 6900     		.ascii	"i\000"
 1770 057b 01       		.byte	0x1
 1771 057c 87       		.byte	0x87
 1772 057d A5000000 		.4byte	0xa5
 1773 0581 02       		.uleb128 0x2
 1774 0582 91       		.byte	0x91
 1775 0583 74       		.sleb128 -12
 1776 0584 11       		.uleb128 0x11
 1777 0585 6A00     		.ascii	"j\000"
 1778 0587 01       		.byte	0x1
 1779 0588 87       		.byte	0x87
 1780 0589 A5000000 		.4byte	0xa5
 1781 058d 02       		.uleb128 0x2
 1782 058e 91       		.byte	0x91
 1783 058f 70       		.sleb128 -16
 1784 0590 00       		.byte	0
 1785 0591 0D       		.uleb128 0xd
 1786 0592 04       		.byte	0x4
 1787 0593 A5000000 		.4byte	0xa5
 1788 0597 17       		.uleb128 0x17
 1789 0598 F2040000 		.4byte	.LASF79
 1790 059c 01       		.byte	0x1
 1791 059d 92       		.byte	0x92
 1792 059e 00000000 		.4byte	.LFB68
 1793 05a2 28000000 		.4byte	.LFE68-.LFB68
 1794 05a6 01       		.uleb128 0x1
 1795 05a7 9C       		.byte	0x9c
 1796 05a8 D1050000 		.4byte	0x5d1
 1797 05ac 16       		.uleb128 0x16
 1798 05ad 7000     		.ascii	"p\000"
 1799 05af 01       		.byte	0x1
 1800 05b0 92       		.byte	0x92
 1801 05b1 91050000 		.4byte	0x591
 1802 05b5 02       		.uleb128 0x2
 1803 05b6 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 37


 1804 05b7 6C       		.sleb128 -20
 1805 05b8 16       		.uleb128 0x16
 1806 05b9 7100     		.ascii	"q\000"
 1807 05bb 01       		.byte	0x1
 1808 05bc 92       		.byte	0x92
 1809 05bd 91050000 		.4byte	0x591
 1810 05c1 02       		.uleb128 0x2
 1811 05c2 91       		.byte	0x91
 1812 05c3 68       		.sleb128 -24
 1813 05c4 11       		.uleb128 0x11
 1814 05c5 7400     		.ascii	"t\000"
 1815 05c7 01       		.byte	0x1
 1816 05c8 93       		.byte	0x93
 1817 05c9 A5000000 		.4byte	0xa5
 1818 05cd 02       		.uleb128 0x2
 1819 05ce 91       		.byte	0x91
 1820 05cf 74       		.sleb128 -12
 1821 05d0 00       		.byte	0
 1822 05d1 13       		.uleb128 0x13
 1823 05d2 9D020000 		.4byte	.LASF81
 1824 05d6 01       		.byte	0x1
 1825 05d7 9B       		.byte	0x9b
 1826 05d8 A5000000 		.4byte	0xa5
 1827 05dc 00000000 		.4byte	.LFB69
 1828 05e0 84000000 		.4byte	.LFE69-.LFB69
 1829 05e4 01       		.uleb128 0x1
 1830 05e5 9C       		.byte	0x9c
 1831 05e6 13060000 		.4byte	0x613
 1832 05ea 14       		.uleb128 0x14
 1833 05eb 71020000 		.4byte	.LASF82
 1834 05ef 01       		.byte	0x1
 1835 05f0 9B       		.byte	0x9b
 1836 05f1 91050000 		.4byte	0x591
 1837 05f5 02       		.uleb128 0x2
 1838 05f6 91       		.byte	0x91
 1839 05f7 64       		.sleb128 -28
 1840 05f8 16       		.uleb128 0x16
 1841 05f9 6E00     		.ascii	"n\000"
 1842 05fb 01       		.byte	0x1
 1843 05fc 9B       		.byte	0x9b
 1844 05fd A5000000 		.4byte	0xa5
 1845 0601 02       		.uleb128 0x2
 1846 0602 91       		.byte	0x91
 1847 0603 60       		.sleb128 -32
 1848 0604 0F       		.uleb128 0xf
 1849 0605 51010000 		.4byte	.LASF83
 1850 0609 01       		.byte	0x1
 1851 060a 9D       		.byte	0x9d
 1852 060b A5000000 		.4byte	0xa5
 1853 060f 02       		.uleb128 0x2
 1854 0610 91       		.byte	0x91
 1855 0611 6C       		.sleb128 -20
 1856 0612 00       		.byte	0
 1857 0613 0E       		.uleb128 0xe
 1858 0614 EB030000 		.4byte	.LASF84
 1859 0618 01       		.byte	0x1
 1860 0619 AD       		.byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 38


 1861 061a 32010000 		.4byte	0x132
 1862 061e 00000000 		.4byte	.LFB70
 1863 0622 BC000000 		.4byte	.LFE70-.LFB70
 1864 0626 01       		.uleb128 0x1
 1865 0627 9C       		.byte	0x9c
 1866 0628 4B060000 		.4byte	0x64b
 1867 062c 0F       		.uleb128 0xf
 1868 062d 32010000 		.4byte	.LASF85
 1869 0631 01       		.byte	0x1
 1870 0632 AF       		.byte	0xaf
 1871 0633 32010000 		.4byte	0x132
 1872 0637 03       		.uleb128 0x3
 1873 0638 91       		.byte	0x91
 1874 0639 E47C     		.sleb128 -412
 1875 063b 0F       		.uleb128 0xf
 1876 063c 2A010000 		.4byte	.LASF71
 1877 0640 01       		.byte	0x1
 1878 0641 B3       		.byte	0xb3
 1879 0642 82010000 		.4byte	0x182
 1880 0646 03       		.uleb128 0x3
 1881 0647 91       		.byte	0x91
 1882 0648 D07C     		.sleb128 -432
 1883 064a 00       		.byte	0
 1884 064b 0E       		.uleb128 0xe
 1885 064c B9040000 		.4byte	.LASF86
 1886 0650 01       		.byte	0x1
 1887 0651 C2       		.byte	0xc2
 1888 0652 32010000 		.4byte	0x132
 1889 0656 00000000 		.4byte	.LFB71
 1890 065a 04010000 		.4byte	.LFE71-.LFB71
 1891 065e 01       		.uleb128 0x1
 1892 065f 9C       		.byte	0x9c
 1893 0660 83060000 		.4byte	0x683
 1894 0664 0F       		.uleb128 0xf
 1895 0665 32010000 		.4byte	.LASF85
 1896 0669 01       		.byte	0x1
 1897 066a C4       		.byte	0xc4
 1898 066b 32010000 		.4byte	0x132
 1899 066f 03       		.uleb128 0x3
 1900 0670 91       		.byte	0x91
 1901 0671 E47C     		.sleb128 -412
 1902 0673 0F       		.uleb128 0xf
 1903 0674 70040000 		.4byte	.LASF77
 1904 0678 01       		.byte	0x1
 1905 0679 C8       		.byte	0xc8
 1906 067a C6010000 		.4byte	0x1c6
 1907 067e 03       		.uleb128 0x3
 1908 067f 91       		.byte	0x91
 1909 0680 D47C     		.sleb128 -428
 1910 0682 00       		.byte	0
 1911 0683 18       		.uleb128 0x18
 1912 0684 44010000 		.4byte	.LASF87
 1913 0688 0A       		.byte	0xa
 1914 0689 1207     		.2byte	0x712
 1915 068b 8F060000 		.4byte	0x68f
 1916 068f 0C       		.uleb128 0xc
 1917 0690 76000000 		.4byte	0x76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 39


 1918 0694 19       		.uleb128 0x19
 1919 0695 7D050000 		.4byte	.LASF88
 1920 0699 0B       		.byte	0xb
 1921 069a 25       		.byte	0x25
 1922 069b DC030000 		.4byte	0x3dc
 1923 069f 05       		.uleb128 0x5
 1924 06a0 03       		.byte	0x3
 1925 06a1 00000000 		.4byte	level_sensor_inbox
 1926 06a5 19       		.uleb128 0x19
 1927 06a6 29060000 		.4byte	.LASF89
 1928 06aa 0B       		.byte	0xb
 1929 06ab 27       		.byte	0x27
 1930 06ac 2E030000 		.4byte	0x32e
 1931 06b0 05       		.uleb128 0x5
 1932 06b1 03       		.byte	0x3
 1933 06b2 00000000 		.4byte	level_sensor_enabled
 1934 06b6 19       		.uleb128 0x19
 1935 06b7 C7060000 		.4byte	.LASF90
 1936 06bb 0C       		.byte	0xc
 1937 06bc 0F       		.byte	0xf
 1938 06bd DC030000 		.4byte	0x3dc
 1939 06c1 05       		.uleb128 0x5
 1940 06c2 03       		.byte	0x3
 1941 06c3 00000000 		.4byte	downstream_level_sensor_inbox
 1942 06c7 19       		.uleb128 0x19
 1943 06c8 C0030000 		.4byte	.LASF91
 1944 06cc 0C       		.byte	0xc
 1945 06cd 11       		.byte	0x11
 1946 06ce 2E030000 		.4byte	0x32e
 1947 06d2 05       		.uleb128 0x5
 1948 06d3 03       		.byte	0x3
 1949 06d4 00000000 		.4byte	downstream_level_sensor_enabled
 1950 06d8 19       		.uleb128 0x19
 1951 06d9 3F000000 		.4byte	.LASF92
 1952 06dd 07       		.byte	0x7
 1953 06de 11       		.byte	0x11
 1954 06df 2E030000 		.4byte	0x32e
 1955 06e3 05       		.uleb128 0x5
 1956 06e4 03       		.byte	0x3
 1957 06e5 00000000 		.4byte	buffer_overflow
 1958 06e9 19       		.uleb128 0x19
 1959 06ea F9030000 		.4byte	.LASF93
 1960 06ee 07       		.byte	0x7
 1961 06ef 22       		.byte	0x22
 1962 06f0 8D000000 		.4byte	0x8d
 1963 06f4 05       		.uleb128 0x5
 1964 06f5 03       		.byte	0x3
 1965 06f6 00000000 		.4byte	dataPointsInStack
 1966 06fa 19       		.uleb128 0x19
 1967 06fb 3E060000 		.4byte	.LASF94
 1968 06ff 07       		.byte	0x7
 1969 0700 23       		.byte	0x23
 1970 0701 8D000000 		.4byte	0x8d
 1971 0705 05       		.uleb128 0x5
 1972 0706 03       		.byte	0x3
 1973 0707 00000000 		.4byte	dataPointsInStackDesired
 1974 070b 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 40


 1975 070c 0E020000 		.4byte	0x20e
 1976 0710 1B070000 		.4byte	0x71b
 1977 0714 07       		.uleb128 0x7
 1978 0715 CD000000 		.4byte	0xcd
 1979 0719 95       		.byte	0x95
 1980 071a 00       		.byte	0
 1981 071b 19       		.uleb128 0x19
 1982 071c 32030000 		.4byte	.LASF95
 1983 0720 07       		.byte	0x7
 1984 0721 24       		.byte	0x24
 1985 0722 0B070000 		.4byte	0x70b
 1986 0726 05       		.uleb128 0x5
 1987 0727 03       		.byte	0x3
 1988 0728 00000000 		.4byte	data
 1989 072c 19       		.uleb128 0x19
 1990 072d E5060000 		.4byte	.LASF96
 1991 0731 08       		.byte	0x8
 1992 0732 20       		.byte	0x20
 1993 0733 81000000 		.4byte	0x81
 1994 0737 05       		.uleb128 0x5
 1995 0738 03       		.byte	0x3
 1996 0739 00000000 		.4byte	modem_state
 1997 073d 19       		.uleb128 0x19
 1998 073e 9F030000 		.4byte	.LASF97
 1999 0742 08       		.byte	0x8
 2000 0743 6B       		.byte	0x6b
 2001 0744 A5000000 		.4byte	0xa5
 2002 0748 05       		.uleb128 0x5
 2003 0749 03       		.byte	0x3
 2004 074a 00000000 		.4byte	modem_start_time_stamp
 2005 074e 19       		.uleb128 0x19
 2006 074f 3F030000 		.4byte	.LASF65
 2007 0753 08       		.byte	0x8
 2008 0754 6C       		.byte	0x6c
 2009 0755 46020000 		.4byte	0x246
 2010 0759 05       		.uleb128 0x5
 2011 075a 03       		.byte	0x3
 2012 075b 00000000 		.4byte	modem_info
 2013 075f 19       		.uleb128 0x19
 2014 0760 6A010000 		.4byte	.LASF98
 2015 0764 08       		.byte	0x8
 2016 0765 6D       		.byte	0x6d
 2017 0766 BA020000 		.4byte	0x2ba
 2018 076a 05       		.uleb128 0x5
 2019 076b 03       		.byte	0x3
 2020 076c 00000000 		.4byte	modem_stats
 2021 0770 19       		.uleb128 0x19
 2022 0771 5B040000 		.4byte	.LASF99
 2023 0775 08       		.byte	0x8
 2024 0776 6E       		.byte	0x6e
 2025 0777 35030000 		.4byte	0x335
 2026 077b 05       		.uleb128 0x5
 2027 077c 03       		.byte	0x3
 2028 077d 00000000 		.4byte	updatable_parameters
 2029 0781 19       		.uleb128 0x19
 2030 0782 F4020000 		.4byte	.LASF100
 2031 0786 0D       		.byte	0xd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 41


 2032 0787 07       		.byte	0x7
 2033 0788 2E030000 		.4byte	0x32e
 2034 078c 05       		.uleb128 0x5
 2035 078d 03       		.byte	0x3
 2036 078e 00000000 		.4byte	App_LED_enabled
 2037 0792 19       		.uleb128 0x19
 2038 0793 B9060000 		.4byte	.LASF101
 2039 0797 0D       		.byte	0xd
 2040 0798 08       		.byte	0x8
 2041 0799 DC030000 		.4byte	0x3dc
 2042 079d 05       		.uleb128 0x5
 2043 079e 03       		.byte	0x3
 2044 079f 00000000 		.4byte	app_led_inbox
 2045 07a3 06       		.uleb128 0x6
 2046 07a4 BF000000 		.4byte	0xbf
 2047 07a8 B4070000 		.4byte	0x7b4
 2048 07ac 1A       		.uleb128 0x1a
 2049 07ad CD000000 		.4byte	0xcd
 2050 07b1 0F27     		.2byte	0x270f
 2051 07b3 00       		.byte	0
 2052 07b4 19       		.uleb128 0x19
 2053 07b5 8A040000 		.4byte	.LASF102
 2054 07b9 09       		.byte	0x9
 2055 07ba 19       		.byte	0x19
 2056 07bb A3070000 		.4byte	0x7a3
 2057 07bf 05       		.uleb128 0x5
 2058 07c0 03       		.byte	0x3
 2059 07c1 00000000 		.4byte	http_request
 2060 07c5 19       		.uleb128 0x19
 2061 07c6 73060000 		.4byte	.LASF103
 2062 07ca 09       		.byte	0x9
 2063 07cb 1A       		.byte	0x1a
 2064 07cc A3070000 		.4byte	0x7a3
 2065 07d0 05       		.uleb128 0x5
 2066 07d1 03       		.byte	0x3
 2067 07d2 00000000 		.4byte	http_body
 2068 07d6 06       		.uleb128 0x6
 2069 07d7 BF000000 		.4byte	0xbf
 2070 07db E6070000 		.4byte	0x7e6
 2071 07df 07       		.uleb128 0x7
 2072 07e0 CD000000 		.4byte	0xcd
 2073 07e4 C7       		.byte	0xc7
 2074 07e5 00       		.byte	0
 2075 07e6 19       		.uleb128 0x19
 2076 07e7 AE050000 		.4byte	.LASF104
 2077 07eb 09       		.byte	0x9
 2078 07ec 1B       		.byte	0x1b
 2079 07ed D6070000 		.4byte	0x7d6
 2080 07f1 05       		.uleb128 0x5
 2081 07f2 03       		.byte	0x3
 2082 07f3 00000000 		.4byte	http_route
 2083 07f7 19       		.uleb128 0x19
 2084 07f8 1D050000 		.4byte	.LASF105
 2085 07fc 09       		.byte	0x9
 2086 07fd 42       		.byte	0x42
 2087 07fe B0030000 		.4byte	0x3b0
 2088 0802 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 42


 2089 0803 03       		.byte	0x3
 2090 0804 00000000 		.4byte	system_info
 2091 0808 19       		.uleb128 0x19
 2092 0809 CE040000 		.4byte	.LASF106
 2093 080d 09       		.byte	0x9
 2094 080e 54       		.byte	0x54
 2095 080f EC030000 		.4byte	0x3ec
 2096 0813 05       		.uleb128 0x5
 2097 0814 03       		.byte	0x3
 2098 0815 00000000 		.4byte	system_settings
 2099 0819 19       		.uleb128 0x19
 2100 081a 37010000 		.4byte	.LASF107
 2101 081e 09       		.byte	0x9
 2102 081f 70       		.byte	0x70
 2103 0820 79030000 		.4byte	0x379
 2104 0824 05       		.uleb128 0x5
 2105 0825 03       		.byte	0x3
 2106 0826 00000000 		.4byte	alarmMeasure
 2107 082a 19       		.uleb128 0x19
 2108 082b 95010000 		.4byte	.LASF108
 2109 082f 09       		.byte	0x9
 2110 0830 71       		.byte	0x71
 2111 0831 81000000 		.4byte	0x81
 2112 0835 05       		.uleb128 0x5
 2113 0836 03       		.byte	0x3
 2114 0837 00000000 		.4byte	timeToMeasure
 2115 083b 19       		.uleb128 0x19
 2116 083c D6020000 		.4byte	.LASF109
 2117 0840 09       		.byte	0x9
 2118 0841 72       		.byte	0x72
 2119 0842 79030000 		.4byte	0x379
 2120 0846 05       		.uleb128 0x5
 2121 0847 03       		.byte	0x3
 2122 0848 00000000 		.4byte	alarmSync
 2123 084c 19       		.uleb128 0x19
 2124 084d BB010000 		.4byte	.LASF110
 2125 0851 09       		.byte	0x9
 2126 0852 73       		.byte	0x73
 2127 0853 81000000 		.4byte	0x81
 2128 0857 05       		.uleb128 0x5
 2129 0858 03       		.byte	0x3
 2130 0859 00000000 		.4byte	timeToSync
 2131 085d 19       		.uleb128 0x19
 2132 085e 3A040000 		.4byte	.LASF111
 2133 0862 09       		.byte	0x9
 2134 0863 74       		.byte	0x74
 2135 0864 81000000 		.4byte	0x81
 2136 0868 05       		.uleb128 0x5
 2137 0869 03       		.byte	0x3
 2138 086a 00000000 		.4byte	timeToSycnRemoteParams
 2139 086e 1B       		.uleb128 0x1b
 2140 086f 68657900 		.ascii	"hey\000"
 2141 0873 09       		.byte	0x9
 2142 0874 75       		.byte	0x75
 2143 0875 81000000 		.4byte	0x81
 2144 0879 05       		.uleb128 0x5
 2145 087a 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 43


 2146 087b 00000000 		.4byte	hey
 2147 087f 19       		.uleb128 0x19
 2148 0880 93030000 		.4byte	.LASF112
 2149 0884 09       		.byte	0x9
 2150 0885 79       		.byte	0x79
 2151 0886 79030000 		.4byte	0x379
 2152 088a 05       		.uleb128 0x5
 2153 088b 03       		.byte	0x3
 2154 088c 00000000 		.4byte	alarmAppLED
 2155 0890 19       		.uleb128 0x19
 2156 0891 54020000 		.4byte	.LASF113
 2157 0895 09       		.byte	0x9
 2158 0896 7A       		.byte	0x7a
 2159 0897 81000000 		.4byte	0x81
 2160 089b 05       		.uleb128 0x5
 2161 089c 03       		.byte	0x3
 2162 089d 00000000 		.4byte	timeToAppLED
 2163 08a1 19       		.uleb128 0x19
 2164 08a2 5A050000 		.4byte	.LASF114
 2165 08a6 09       		.byte	0x9
 2166 08a7 7C       		.byte	0x7c
 2167 08a8 79030000 		.4byte	0x379
 2168 08ac 05       		.uleb128 0x5
 2169 08ad 03       		.byte	0x3
 2170 08ae 00000000 		.4byte	alarmLevelSensor
 2171 08b2 19       		.uleb128 0x19
 2172 08b3 58010000 		.4byte	.LASF115
 2173 08b7 09       		.byte	0x9
 2174 08b8 7D       		.byte	0x7d
 2175 08b9 81000000 		.4byte	0x81
 2176 08bd 05       		.uleb128 0x5
 2177 08be 03       		.byte	0x3
 2178 08bf 00000000 		.4byte	timetoLevelSensor
 2179 08c3 19       		.uleb128 0x19
 2180 08c4 EA010000 		.4byte	.LASF116
 2181 08c8 09       		.byte	0x9
 2182 08c9 7F       		.byte	0x7f
 2183 08ca 79030000 		.4byte	0x379
 2184 08ce 05       		.uleb128 0x5
 2185 08cf 03       		.byte	0x3
 2186 08d0 00000000 		.4byte	alarmDownstreamLevelSensor
 2187 08d4 19       		.uleb128 0x19
 2188 08d5 14040000 		.4byte	.LASF117
 2189 08d9 09       		.byte	0x9
 2190 08da 80       		.byte	0x80
 2191 08db 81000000 		.4byte	0x81
 2192 08df 05       		.uleb128 0x5
 2193 08e0 03       		.byte	0x3
 2194 08e1 00000000 		.4byte	timetoDownstreamLevelSensor
 2195 08e5 00       		.byte	0
 2196              		.section	.debug_abbrev,"",%progbits
 2197              	.Ldebug_abbrev0:
 2198 0000 01       		.uleb128 0x1
 2199 0001 11       		.uleb128 0x11
 2200 0002 01       		.byte	0x1
 2201 0003 25       		.uleb128 0x25
 2202 0004 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 44


 2203 0005 13       		.uleb128 0x13
 2204 0006 0B       		.uleb128 0xb
 2205 0007 03       		.uleb128 0x3
 2206 0008 0E       		.uleb128 0xe
 2207 0009 1B       		.uleb128 0x1b
 2208 000a 0E       		.uleb128 0xe
 2209 000b 55       		.uleb128 0x55
 2210 000c 17       		.uleb128 0x17
 2211 000d 11       		.uleb128 0x11
 2212 000e 01       		.uleb128 0x1
 2213 000f 10       		.uleb128 0x10
 2214 0010 17       		.uleb128 0x17
 2215 0011 00       		.byte	0
 2216 0012 00       		.byte	0
 2217 0013 02       		.uleb128 0x2
 2218 0014 24       		.uleb128 0x24
 2219 0015 00       		.byte	0
 2220 0016 0B       		.uleb128 0xb
 2221 0017 0B       		.uleb128 0xb
 2222 0018 3E       		.uleb128 0x3e
 2223 0019 0B       		.uleb128 0xb
 2224 001a 03       		.uleb128 0x3
 2225 001b 0E       		.uleb128 0xe
 2226 001c 00       		.byte	0
 2227 001d 00       		.byte	0
 2228 001e 03       		.uleb128 0x3
 2229 001f 16       		.uleb128 0x16
 2230 0020 00       		.byte	0
 2231 0021 03       		.uleb128 0x3
 2232 0022 0E       		.uleb128 0xe
 2233 0023 3A       		.uleb128 0x3a
 2234 0024 0B       		.uleb128 0xb
 2235 0025 3B       		.uleb128 0x3b
 2236 0026 0B       		.uleb128 0xb
 2237 0027 49       		.uleb128 0x49
 2238 0028 13       		.uleb128 0x13
 2239 0029 00       		.byte	0
 2240 002a 00       		.byte	0
 2241 002b 04       		.uleb128 0x4
 2242 002c 24       		.uleb128 0x24
 2243 002d 00       		.byte	0
 2244 002e 0B       		.uleb128 0xb
 2245 002f 0B       		.uleb128 0xb
 2246 0030 3E       		.uleb128 0x3e
 2247 0031 0B       		.uleb128 0xb
 2248 0032 03       		.uleb128 0x3
 2249 0033 08       		.uleb128 0x8
 2250 0034 00       		.byte	0
 2251 0035 00       		.byte	0
 2252 0036 05       		.uleb128 0x5
 2253 0037 16       		.uleb128 0x16
 2254 0038 00       		.byte	0
 2255 0039 03       		.uleb128 0x3
 2256 003a 0E       		.uleb128 0xe
 2257 003b 3A       		.uleb128 0x3a
 2258 003c 0B       		.uleb128 0xb
 2259 003d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 45


 2260 003e 05       		.uleb128 0x5
 2261 003f 49       		.uleb128 0x49
 2262 0040 13       		.uleb128 0x13
 2263 0041 00       		.byte	0
 2264 0042 00       		.byte	0
 2265 0043 06       		.uleb128 0x6
 2266 0044 01       		.uleb128 0x1
 2267 0045 01       		.byte	0x1
 2268 0046 49       		.uleb128 0x49
 2269 0047 13       		.uleb128 0x13
 2270 0048 01       		.uleb128 0x1
 2271 0049 13       		.uleb128 0x13
 2272 004a 00       		.byte	0
 2273 004b 00       		.byte	0
 2274 004c 07       		.uleb128 0x7
 2275 004d 21       		.uleb128 0x21
 2276 004e 00       		.byte	0
 2277 004f 49       		.uleb128 0x49
 2278 0050 13       		.uleb128 0x13
 2279 0051 2F       		.uleb128 0x2f
 2280 0052 0B       		.uleb128 0xb
 2281 0053 00       		.byte	0
 2282 0054 00       		.byte	0
 2283 0055 08       		.uleb128 0x8
 2284 0056 13       		.uleb128 0x13
 2285 0057 01       		.byte	0x1
 2286 0058 0B       		.uleb128 0xb
 2287 0059 05       		.uleb128 0x5
 2288 005a 3A       		.uleb128 0x3a
 2289 005b 0B       		.uleb128 0xb
 2290 005c 3B       		.uleb128 0x3b
 2291 005d 0B       		.uleb128 0xb
 2292 005e 01       		.uleb128 0x1
 2293 005f 13       		.uleb128 0x13
 2294 0060 00       		.byte	0
 2295 0061 00       		.byte	0
 2296 0062 09       		.uleb128 0x9
 2297 0063 0D       		.uleb128 0xd
 2298 0064 00       		.byte	0
 2299 0065 03       		.uleb128 0x3
 2300 0066 0E       		.uleb128 0xe
 2301 0067 3A       		.uleb128 0x3a
 2302 0068 0B       		.uleb128 0xb
 2303 0069 3B       		.uleb128 0x3b
 2304 006a 0B       		.uleb128 0xb
 2305 006b 49       		.uleb128 0x49
 2306 006c 13       		.uleb128 0x13
 2307 006d 38       		.uleb128 0x38
 2308 006e 0B       		.uleb128 0xb
 2309 006f 00       		.byte	0
 2310 0070 00       		.byte	0
 2311 0071 0A       		.uleb128 0xa
 2312 0072 13       		.uleb128 0x13
 2313 0073 01       		.byte	0x1
 2314 0074 0B       		.uleb128 0xb
 2315 0075 0B       		.uleb128 0xb
 2316 0076 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 46


 2317 0077 0B       		.uleb128 0xb
 2318 0078 3B       		.uleb128 0x3b
 2319 0079 0B       		.uleb128 0xb
 2320 007a 01       		.uleb128 0x1
 2321 007b 13       		.uleb128 0x13
 2322 007c 00       		.byte	0
 2323 007d 00       		.byte	0
 2324 007e 0B       		.uleb128 0xb
 2325 007f 0D       		.uleb128 0xd
 2326 0080 00       		.byte	0
 2327 0081 03       		.uleb128 0x3
 2328 0082 08       		.uleb128 0x8
 2329 0083 3A       		.uleb128 0x3a
 2330 0084 0B       		.uleb128 0xb
 2331 0085 3B       		.uleb128 0x3b
 2332 0086 0B       		.uleb128 0xb
 2333 0087 49       		.uleb128 0x49
 2334 0088 13       		.uleb128 0x13
 2335 0089 38       		.uleb128 0x38
 2336 008a 0B       		.uleb128 0xb
 2337 008b 00       		.byte	0
 2338 008c 00       		.byte	0
 2339 008d 0C       		.uleb128 0xc
 2340 008e 35       		.uleb128 0x35
 2341 008f 00       		.byte	0
 2342 0090 49       		.uleb128 0x49
 2343 0091 13       		.uleb128 0x13
 2344 0092 00       		.byte	0
 2345 0093 00       		.byte	0
 2346 0094 0D       		.uleb128 0xd
 2347 0095 0F       		.uleb128 0xf
 2348 0096 00       		.byte	0
 2349 0097 0B       		.uleb128 0xb
 2350 0098 0B       		.uleb128 0xb
 2351 0099 49       		.uleb128 0x49
 2352 009a 13       		.uleb128 0x13
 2353 009b 00       		.byte	0
 2354 009c 00       		.byte	0
 2355 009d 0E       		.uleb128 0xe
 2356 009e 2E       		.uleb128 0x2e
 2357 009f 01       		.byte	0x1
 2358 00a0 3F       		.uleb128 0x3f
 2359 00a1 19       		.uleb128 0x19
 2360 00a2 03       		.uleb128 0x3
 2361 00a3 0E       		.uleb128 0xe
 2362 00a4 3A       		.uleb128 0x3a
 2363 00a5 0B       		.uleb128 0xb
 2364 00a6 3B       		.uleb128 0x3b
 2365 00a7 0B       		.uleb128 0xb
 2366 00a8 49       		.uleb128 0x49
 2367 00a9 13       		.uleb128 0x13
 2368 00aa 11       		.uleb128 0x11
 2369 00ab 01       		.uleb128 0x1
 2370 00ac 12       		.uleb128 0x12
 2371 00ad 06       		.uleb128 0x6
 2372 00ae 40       		.uleb128 0x40
 2373 00af 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 47


 2374 00b0 9642     		.uleb128 0x2116
 2375 00b2 19       		.uleb128 0x19
 2376 00b3 01       		.uleb128 0x1
 2377 00b4 13       		.uleb128 0x13
 2378 00b5 00       		.byte	0
 2379 00b6 00       		.byte	0
 2380 00b7 0F       		.uleb128 0xf
 2381 00b8 34       		.uleb128 0x34
 2382 00b9 00       		.byte	0
 2383 00ba 03       		.uleb128 0x3
 2384 00bb 0E       		.uleb128 0xe
 2385 00bc 3A       		.uleb128 0x3a
 2386 00bd 0B       		.uleb128 0xb
 2387 00be 3B       		.uleb128 0x3b
 2388 00bf 0B       		.uleb128 0xb
 2389 00c0 49       		.uleb128 0x49
 2390 00c1 13       		.uleb128 0x13
 2391 00c2 02       		.uleb128 0x2
 2392 00c3 18       		.uleb128 0x18
 2393 00c4 00       		.byte	0
 2394 00c5 00       		.byte	0
 2395 00c6 10       		.uleb128 0x10
 2396 00c7 0B       		.uleb128 0xb
 2397 00c8 01       		.byte	0x1
 2398 00c9 11       		.uleb128 0x11
 2399 00ca 01       		.uleb128 0x1
 2400 00cb 12       		.uleb128 0x12
 2401 00cc 06       		.uleb128 0x6
 2402 00cd 00       		.byte	0
 2403 00ce 00       		.byte	0
 2404 00cf 11       		.uleb128 0x11
 2405 00d0 34       		.uleb128 0x34
 2406 00d1 00       		.byte	0
 2407 00d2 03       		.uleb128 0x3
 2408 00d3 08       		.uleb128 0x8
 2409 00d4 3A       		.uleb128 0x3a
 2410 00d5 0B       		.uleb128 0xb
 2411 00d6 3B       		.uleb128 0x3b
 2412 00d7 0B       		.uleb128 0xb
 2413 00d8 49       		.uleb128 0x49
 2414 00d9 13       		.uleb128 0x13
 2415 00da 02       		.uleb128 0x2
 2416 00db 18       		.uleb128 0x18
 2417 00dc 00       		.byte	0
 2418 00dd 00       		.byte	0
 2419 00de 12       		.uleb128 0x12
 2420 00df 0B       		.uleb128 0xb
 2421 00e0 01       		.byte	0x1
 2422 00e1 11       		.uleb128 0x11
 2423 00e2 01       		.uleb128 0x1
 2424 00e3 12       		.uleb128 0x12
 2425 00e4 06       		.uleb128 0x6
 2426 00e5 01       		.uleb128 0x1
 2427 00e6 13       		.uleb128 0x13
 2428 00e7 00       		.byte	0
 2429 00e8 00       		.byte	0
 2430 00e9 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 48


 2431 00ea 2E       		.uleb128 0x2e
 2432 00eb 01       		.byte	0x1
 2433 00ec 3F       		.uleb128 0x3f
 2434 00ed 19       		.uleb128 0x19
 2435 00ee 03       		.uleb128 0x3
 2436 00ef 0E       		.uleb128 0xe
 2437 00f0 3A       		.uleb128 0x3a
 2438 00f1 0B       		.uleb128 0xb
 2439 00f2 3B       		.uleb128 0x3b
 2440 00f3 0B       		.uleb128 0xb
 2441 00f4 27       		.uleb128 0x27
 2442 00f5 19       		.uleb128 0x19
 2443 00f6 49       		.uleb128 0x49
 2444 00f7 13       		.uleb128 0x13
 2445 00f8 11       		.uleb128 0x11
 2446 00f9 01       		.uleb128 0x1
 2447 00fa 12       		.uleb128 0x12
 2448 00fb 06       		.uleb128 0x6
 2449 00fc 40       		.uleb128 0x40
 2450 00fd 18       		.uleb128 0x18
 2451 00fe 9642     		.uleb128 0x2116
 2452 0100 19       		.uleb128 0x19
 2453 0101 01       		.uleb128 0x1
 2454 0102 13       		.uleb128 0x13
 2455 0103 00       		.byte	0
 2456 0104 00       		.byte	0
 2457 0105 14       		.uleb128 0x14
 2458 0106 05       		.uleb128 0x5
 2459 0107 00       		.byte	0
 2460 0108 03       		.uleb128 0x3
 2461 0109 0E       		.uleb128 0xe
 2462 010a 3A       		.uleb128 0x3a
 2463 010b 0B       		.uleb128 0xb
 2464 010c 3B       		.uleb128 0x3b
 2465 010d 0B       		.uleb128 0xb
 2466 010e 49       		.uleb128 0x49
 2467 010f 13       		.uleb128 0x13
 2468 0110 02       		.uleb128 0x2
 2469 0111 18       		.uleb128 0x18
 2470 0112 00       		.byte	0
 2471 0113 00       		.byte	0
 2472 0114 15       		.uleb128 0x15
 2473 0115 2E       		.uleb128 0x2e
 2474 0116 01       		.byte	0x1
 2475 0117 3F       		.uleb128 0x3f
 2476 0118 19       		.uleb128 0x19
 2477 0119 03       		.uleb128 0x3
 2478 011a 0E       		.uleb128 0xe
 2479 011b 3A       		.uleb128 0x3a
 2480 011c 0B       		.uleb128 0xb
 2481 011d 3B       		.uleb128 0x3b
 2482 011e 0B       		.uleb128 0xb
 2483 011f 27       		.uleb128 0x27
 2484 0120 19       		.uleb128 0x19
 2485 0121 11       		.uleb128 0x11
 2486 0122 01       		.uleb128 0x1
 2487 0123 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 49


 2488 0124 06       		.uleb128 0x6
 2489 0125 40       		.uleb128 0x40
 2490 0126 18       		.uleb128 0x18
 2491 0127 9642     		.uleb128 0x2116
 2492 0129 19       		.uleb128 0x19
 2493 012a 01       		.uleb128 0x1
 2494 012b 13       		.uleb128 0x13
 2495 012c 00       		.byte	0
 2496 012d 00       		.byte	0
 2497 012e 16       		.uleb128 0x16
 2498 012f 05       		.uleb128 0x5
 2499 0130 00       		.byte	0
 2500 0131 03       		.uleb128 0x3
 2501 0132 08       		.uleb128 0x8
 2502 0133 3A       		.uleb128 0x3a
 2503 0134 0B       		.uleb128 0xb
 2504 0135 3B       		.uleb128 0x3b
 2505 0136 0B       		.uleb128 0xb
 2506 0137 49       		.uleb128 0x49
 2507 0138 13       		.uleb128 0x13
 2508 0139 02       		.uleb128 0x2
 2509 013a 18       		.uleb128 0x18
 2510 013b 00       		.byte	0
 2511 013c 00       		.byte	0
 2512 013d 17       		.uleb128 0x17
 2513 013e 2E       		.uleb128 0x2e
 2514 013f 01       		.byte	0x1
 2515 0140 3F       		.uleb128 0x3f
 2516 0141 19       		.uleb128 0x19
 2517 0142 03       		.uleb128 0x3
 2518 0143 0E       		.uleb128 0xe
 2519 0144 3A       		.uleb128 0x3a
 2520 0145 0B       		.uleb128 0xb
 2521 0146 3B       		.uleb128 0x3b
 2522 0147 0B       		.uleb128 0xb
 2523 0148 27       		.uleb128 0x27
 2524 0149 19       		.uleb128 0x19
 2525 014a 11       		.uleb128 0x11
 2526 014b 01       		.uleb128 0x1
 2527 014c 12       		.uleb128 0x12
 2528 014d 06       		.uleb128 0x6
 2529 014e 40       		.uleb128 0x40
 2530 014f 18       		.uleb128 0x18
 2531 0150 9742     		.uleb128 0x2117
 2532 0152 19       		.uleb128 0x19
 2533 0153 01       		.uleb128 0x1
 2534 0154 13       		.uleb128 0x13
 2535 0155 00       		.byte	0
 2536 0156 00       		.byte	0
 2537 0157 18       		.uleb128 0x18
 2538 0158 34       		.uleb128 0x34
 2539 0159 00       		.byte	0
 2540 015a 03       		.uleb128 0x3
 2541 015b 0E       		.uleb128 0xe
 2542 015c 3A       		.uleb128 0x3a
 2543 015d 0B       		.uleb128 0xb
 2544 015e 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 50


 2545 015f 05       		.uleb128 0x5
 2546 0160 49       		.uleb128 0x49
 2547 0161 13       		.uleb128 0x13
 2548 0162 3F       		.uleb128 0x3f
 2549 0163 19       		.uleb128 0x19
 2550 0164 3C       		.uleb128 0x3c
 2551 0165 19       		.uleb128 0x19
 2552 0166 00       		.byte	0
 2553 0167 00       		.byte	0
 2554 0168 19       		.uleb128 0x19
 2555 0169 34       		.uleb128 0x34
 2556 016a 00       		.byte	0
 2557 016b 03       		.uleb128 0x3
 2558 016c 0E       		.uleb128 0xe
 2559 016d 3A       		.uleb128 0x3a
 2560 016e 0B       		.uleb128 0xb
 2561 016f 3B       		.uleb128 0x3b
 2562 0170 0B       		.uleb128 0xb
 2563 0171 49       		.uleb128 0x49
 2564 0172 13       		.uleb128 0x13
 2565 0173 3F       		.uleb128 0x3f
 2566 0174 19       		.uleb128 0x19
 2567 0175 02       		.uleb128 0x2
 2568 0176 18       		.uleb128 0x18
 2569 0177 00       		.byte	0
 2570 0178 00       		.byte	0
 2571 0179 1A       		.uleb128 0x1a
 2572 017a 21       		.uleb128 0x21
 2573 017b 00       		.byte	0
 2574 017c 49       		.uleb128 0x49
 2575 017d 13       		.uleb128 0x13
 2576 017e 2F       		.uleb128 0x2f
 2577 017f 05       		.uleb128 0x5
 2578 0180 00       		.byte	0
 2579 0181 00       		.byte	0
 2580 0182 1B       		.uleb128 0x1b
 2581 0183 34       		.uleb128 0x34
 2582 0184 00       		.byte	0
 2583 0185 03       		.uleb128 0x3
 2584 0186 08       		.uleb128 0x8
 2585 0187 3A       		.uleb128 0x3a
 2586 0188 0B       		.uleb128 0xb
 2587 0189 3B       		.uleb128 0x3b
 2588 018a 0B       		.uleb128 0xb
 2589 018b 49       		.uleb128 0x49
 2590 018c 13       		.uleb128 0x13
 2591 018d 3F       		.uleb128 0x3f
 2592 018e 19       		.uleb128 0x19
 2593 018f 02       		.uleb128 0x2
 2594 0190 18       		.uleb128 0x18
 2595 0191 00       		.byte	0
 2596 0192 00       		.byte	0
 2597 0193 00       		.byte	0
 2598              		.section	.debug_aranges,"",%progbits
 2599 0000 54000000 		.4byte	0x54
 2600 0004 0200     		.2byte	0x2
 2601 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 51


 2602 000a 04       		.byte	0x4
 2603 000b 00       		.byte	0
 2604 000c 0000     		.2byte	0
 2605 000e 0000     		.2byte	0
 2606 0010 00000000 		.4byte	.LFB64
 2607 0014 34010000 		.4byte	.LFE64-.LFB64
 2608 0018 00000000 		.4byte	.LFB65
 2609 001c 98010000 		.4byte	.LFE65-.LFB65
 2610 0020 00000000 		.4byte	.LFB66
 2611 0024 C4000000 		.4byte	.LFE66-.LFB66
 2612 0028 00000000 		.4byte	.LFB67
 2613 002c 74000000 		.4byte	.LFE67-.LFB67
 2614 0030 00000000 		.4byte	.LFB68
 2615 0034 28000000 		.4byte	.LFE68-.LFB68
 2616 0038 00000000 		.4byte	.LFB69
 2617 003c 84000000 		.4byte	.LFE69-.LFB69
 2618 0040 00000000 		.4byte	.LFB70
 2619 0044 BC000000 		.4byte	.LFE70-.LFB70
 2620 0048 00000000 		.4byte	.LFB71
 2621 004c 04010000 		.4byte	.LFE71-.LFB71
 2622 0050 00000000 		.4byte	0
 2623 0054 00000000 		.4byte	0
 2624              		.section	.debug_ranges,"",%progbits
 2625              	.Ldebug_ranges0:
 2626 0000 00000000 		.4byte	.LFB64
 2627 0004 34010000 		.4byte	.LFE64
 2628 0008 00000000 		.4byte	.LFB65
 2629 000c 98010000 		.4byte	.LFE65
 2630 0010 00000000 		.4byte	.LFB66
 2631 0014 C4000000 		.4byte	.LFE66
 2632 0018 00000000 		.4byte	.LFB67
 2633 001c 74000000 		.4byte	.LFE67
 2634 0020 00000000 		.4byte	.LFB68
 2635 0024 28000000 		.4byte	.LFE68
 2636 0028 00000000 		.4byte	.LFB69
 2637 002c 84000000 		.4byte	.LFE69
 2638 0030 00000000 		.4byte	.LFB70
 2639 0034 BC000000 		.4byte	.LFE70
 2640 0038 00000000 		.4byte	.LFB71
 2641 003c 04010000 		.4byte	.LFE71
 2642 0040 00000000 		.4byte	0
 2643 0044 00000000 		.4byte	0
 2644              		.section	.debug_line,"",%progbits
 2645              	.Ldebug_line0:
 2646 0000 0F030000 		.section	.debug_str,"MS",%progbits,1
 2646      0200CA01 
 2646      00000201 
 2646      FB0E0D00 
 2646      01010101 
 2647              	.LASF12:
 2648 0000 75696E74 		.ascii	"uint16\000"
 2648      313600
 2649              	.LASF120:
 2650 0007 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2650      73657273 
 2650      5C64616E 
 2650      747A5C44 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 52


 2650      6F63756D 
 2651 0034 72694F53 		.ascii	"riOS.cydsn\000"
 2651      2E637964 
 2651      736E00
 2652              	.LASF92:
 2653 003f 62756666 		.ascii	"buffer_overflow\000"
 2653      65725F6F 
 2653      76657266 
 2653      6C6F7700 
 2654              	.LASF78:
 2655 004f 736F7274 		.ascii	"sort32\000"
 2655      333200
 2656              	.LASF63:
 2657 0056 636F756E 		.ascii	"countDownResetCondition\000"
 2657      74446F77 
 2657      6E526573 
 2657      6574436F 
 2657      6E646974 
 2658              	.LASF118:
 2659 006e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2659      43313120 
 2659      352E342E 
 2659      31203230 
 2659      31363036 
 2660 00a1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2660      20726576 
 2660      6973696F 
 2660      6E203233 
 2660      37373135 
 2661 00d4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2661      66756E63 
 2661      74696F6E 
 2661      2D736563 
 2661      74696F6E 
 2662              	.LASF7:
 2663 00fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 2663      206C6F6E 
 2663      6720756E 
 2663      7369676E 
 2663      65642069 
 2664              	.LASF59:
 2665 0113 75706461 		.ascii	"updatable_parameters_t\000"
 2665      7461626C 
 2665      655F7061 
 2665      72616D65 
 2665      74657273 
 2666              	.LASF71:
 2667 012a 766F6C74 		.ascii	"voltage\000"
 2667      61676500 
 2668              	.LASF85:
 2669 0132 74657374 		.ascii	"test\000"
 2669      00
 2670              	.LASF107:
 2671 0137 616C6172 		.ascii	"alarmMeasure\000"
 2671      6D4D6561 
 2671      73757265 
 2671      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 53


 2672              	.LASF87:
 2673 0144 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2673      52784275 
 2673      66666572 
 2673      00
 2674              	.LASF83:
 2675 0151 6D656469 		.ascii	"median\000"
 2675      616E00
 2676              	.LASF115:
 2677 0158 74696D65 		.ascii	"timetoLevelSensor\000"
 2677      746F4C65 
 2677      76656C53 
 2677      656E736F 
 2677      7200
 2678              	.LASF98:
 2679 016a 6D6F6465 		.ascii	"modem_stats\000"
 2679      6D5F7374 
 2679      61747300 
 2680              	.LASF6:
 2681 0176 6C6F6E67 		.ascii	"long long int\000"
 2681      206C6F6E 
 2681      6720696E 
 2681      7400
 2682              	.LASF0:
 2683 0184 7369676E 		.ascii	"signed char\000"
 2683      65642063 
 2683      68617200 
 2684              	.LASF44:
 2685 0190 65636E6F 		.ascii	"ecno\000"
 2685      00
 2686              	.LASF108:
 2687 0195 74696D65 		.ascii	"timeToMeasure\000"
 2687      546F4D65 
 2687      61737572 
 2687      6500
 2688              	.LASF47:
 2689 01a3 74696D65 		.ascii	"time_to_network_connect\000"
 2689      5F746F5F 
 2689      6E657477 
 2689      6F726B5F 
 2689      636F6E6E 
 2690              	.LASF110:
 2691 01bb 74696D65 		.ascii	"timeToSync\000"
 2691      546F5379 
 2691      6E6300
 2692              	.LASF26:
 2693 01c6 766F6C74 		.ascii	"voltage_charge_current\000"
 2693      6167655F 
 2693      63686172 
 2693      67655F63 
 2693      75727265 
 2694              	.LASF41:
 2695 01dd 6D6F6465 		.ascii	"modem_info_t\000"
 2695      6D5F696E 
 2695      666F5F74 
 2695      00
 2696              	.LASF116:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 54


 2697 01ea 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 2697      6D446F77 
 2697      6E737472 
 2697      65616D4C 
 2697      6576656C 
 2698              	.LASF72:
 2699 0205 6368616E 		.ascii	"channels\000"
 2699      6E656C73 
 2699      00
 2700              	.LASF4:
 2701 020e 6C6F6E67 		.ascii	"long int\000"
 2701      20696E74 
 2701      00
 2702              	.LASF42:
 2703 0217 72786C65 		.ascii	"rxlev\000"
 2703      7600
 2704              	.LASF61:
 2705 021d 63757272 		.ascii	"currentCountDownValue\000"
 2705      656E7443 
 2705      6F756E74 
 2705      446F776E 
 2705      56616C75 
 2706              	.LASF64:
 2707 0233 616C6172 		.ascii	"alarm\000"
 2707      6D00
 2708              	.LASF31:
 2709 0239 70726573 		.ascii	"pressure_voltage_off\000"
 2709      73757265 
 2709      5F766F6C 
 2709      74616765 
 2709      5F6F6666 
 2710              	.LASF11:
 2711 024e 75696E74 		.ascii	"uint8\000"
 2711      3800
 2712              	.LASF113:
 2713 0254 74696D65 		.ascii	"timeToAppLED\000"
 2713      546F4170 
 2713      704C4544 
 2713      00
 2714              	.LASF14:
 2715 0261 696E7433 		.ascii	"int32\000"
 2715      3200
 2716              	.LASF50:
 2717 0267 6E6F6465 		.ascii	"node_type\000"
 2717      5F747970 
 2717      6500
 2718              	.LASF82:
 2719 0271 61727261 		.ascii	"array\000"
 2719      7900
 2720              	.LASF66:
 2721 0277 63686970 		.ascii	"chip_uniqueId\000"
 2721      5F756E69 
 2721      71756549 
 2721      6400
 2722              	.LASF39:
 2723 0285 6D6F6465 		.ascii	"model_id\000"
 2723      6C5F6964 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 55


 2723      00
 2724              	.LASF60:
 2725 028e 636F756E 		.ascii	"countDownValue\000"
 2725      74446F77 
 2725      6E56616C 
 2725      756500
 2726              	.LASF81:
 2727 029d 66696E64 		.ascii	"find_median32\000"
 2727      5F6D6564 
 2727      69616E33 
 2727      3200
 2728              	.LASF54:
 2729 02ab 64656275 		.ascii	"debug_level\000"
 2729      675F6C65 
 2729      76656C00 
 2730              	.LASF35:
 2731 02b7 76616C75 		.ascii	"value\000"
 2731      6500
 2732              	.LASF76:
 2733 02bd 70726573 		.ascii	"pressure_sensor_readings\000"
 2733      73757265 
 2733      5F73656E 
 2733      736F725F 
 2733      72656164 
 2734              	.LASF109:
 2735 02d6 616C6172 		.ascii	"alarmSync\000"
 2735      6D53796E 
 2735      6300
 2736              	.LASF30:
 2737 02e0 70726573 		.ascii	"pressure_voltage_on\000"
 2737      73757265 
 2737      5F766F6C 
 2737      74616765 
 2737      5F6F6E00 
 2738              	.LASF100:
 2739 02f4 4170705F 		.ascii	"App_LED_enabled\000"
 2739      4C45445F 
 2739      656E6162 
 2739      6C656400 
 2740              	.LASF37:
 2741 0304 6B65795F 		.ascii	"key_value_t\000"
 2741      76616C75 
 2741      655F7400 
 2742              	.LASF5:
 2743 0310 6C6F6E67 		.ascii	"long unsigned int\000"
 2743      20756E73 
 2743      69676E65 
 2743      6420696E 
 2743      7400
 2744              	.LASF24:
 2745 0322 766F6C74 		.ascii	"voltage_battery\000"
 2745      6167655F 
 2745      62617474 
 2745      65727900 
 2746              	.LASF95:
 2747 0332 64617461 		.ascii	"data\000"
 2747      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 56


 2748              	.LASF69:
 2749 0337 65705F70 		.ascii	"ep_port\000"
 2749      6F727400 
 2750              	.LASF65:
 2751 033f 6D6F6465 		.ascii	"modem_info\000"
 2751      6D5F696E 
 2751      666F00
 2752              	.LASF68:
 2753 034a 65705F68 		.ascii	"ep_host\000"
 2753      6F737400 
 2754              	.LASF25:
 2755 0352 766F6C74 		.ascii	"voltage_solar\000"
 2755      6167655F 
 2755      736F6C61 
 2755      7200
 2756              	.LASF80:
 2757 0360 70726573 		.ascii	"pressure_calculations\000"
 2757      73757265 
 2757      5F63616C 
 2757      63756C61 
 2757      74696F6E 
 2758              	.LASF48:
 2759 0376 74696D65 		.ascii	"time_to_acquire_ip\000"
 2759      5F746F5F 
 2759      61637175 
 2759      6972655F 
 2759      697000
 2760              	.LASF2:
 2761 0389 73686F72 		.ascii	"short int\000"
 2761      7420696E 
 2761      7400
 2762              	.LASF112:
 2763 0393 616C6172 		.ascii	"alarmAppLED\000"
 2763      6D417070 
 2763      4C454400 
 2764              	.LASF97:
 2765 039f 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2765      6D5F7374 
 2765      6172745F 
 2765      74696D65 
 2765      5F737461 
 2766              	.LASF29:
 2767 03b6 766F6C74 		.ascii	"voltage_t\000"
 2767      6167655F 
 2767      7400
 2768              	.LASF91:
 2769 03c0 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 2769      73747265 
 2769      616D5F6C 
 2769      6576656C 
 2769      5F73656E 
 2770              	.LASF67:
 2771 03e0 7379735F 		.ascii	"sys_info_t\000"
 2771      696E666F 
 2771      5F7400
 2772              	.LASF84:
 2773 03eb 766F6C74 		.ascii	"voltages_test\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 57


 2773      61676573 
 2773      5F746573 
 2773      7400
 2774              	.LASF93:
 2775 03f9 64617461 		.ascii	"dataPointsInStack\000"
 2775      506F696E 
 2775      7473496E 
 2775      53746163 
 2775      6B00
 2776              	.LASF19:
 2777 040b 73697A65 		.ascii	"sizetype\000"
 2777      74797065 
 2777      00
 2778              	.LASF117:
 2779 0414 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 2779      746F446F 
 2779      776E7374 
 2779      7265616D 
 2779      4C657665 
 2780              	.LASF20:
 2781 0430 74657374 		.ascii	"test_name\000"
 2781      5F6E616D 
 2781      6500
 2782              	.LASF111:
 2783 043a 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2783      546F5379 
 2783      636E5265 
 2783      6D6F7465 
 2783      50617261 
 2784              	.LASF36:
 2785 0451 74696D65 		.ascii	"timeStamp\000"
 2785      5374616D 
 2785      7000
 2786              	.LASF99:
 2787 045b 75706461 		.ascii	"updatable_parameters\000"
 2787      7461626C 
 2787      655F7061 
 2787      72616D65 
 2787      74657273 
 2788              	.LASF77:
 2789 0470 70726573 		.ascii	"pressure\000"
 2789      73757265 
 2789      00
 2790              	.LASF27:
 2791 0479 766F6C74 		.ascii	"voltage_pressure\000"
 2791      6167655F 
 2791      70726573 
 2791      73757265 
 2791      00
 2792              	.LASF102:
 2793 048a 68747470 		.ascii	"http_request\000"
 2793      5F726571 
 2793      75657374 
 2793      00
 2794              	.LASF15:
 2795 0497 666C6F61 		.ascii	"float\000"
 2795      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 58


 2796              	.LASF58:
 2797 049d 5F426F6F 		.ascii	"_Bool\000"
 2797      6C00
 2798              	.LASF10:
 2799 04a3 696E7433 		.ascii	"int32_t\000"
 2799      325F7400 
 2800              	.LASF1:
 2801 04ab 756E7369 		.ascii	"unsigned char\000"
 2801      676E6564 
 2801      20636861 
 2801      7200
 2802              	.LASF86:
 2803 04b9 70726573 		.ascii	"pressure_sensor_test\000"
 2803      73757265 
 2803      5F73656E 
 2803      736F725F 
 2803      74657374 
 2804              	.LASF106:
 2805 04ce 73797374 		.ascii	"system_settings\000"
 2805      656D5F73 
 2805      65747469 
 2805      6E677300 
 2806              	.LASF46:
 2807 04de 72737270 		.ascii	"rsrp\000"
 2807      00
 2808              	.LASF45:
 2809 04e3 72737271 		.ascii	"rsrq\000"
 2809      00
 2810              	.LASF53:
 2811 04e8 73796E63 		.ascii	"sync_time\000"
 2811      5F74696D 
 2811      6500
 2812              	.LASF79:
 2813 04f2 73776170 		.ascii	"swap32\000"
 2813      333200
 2814              	.LASF23:
 2815 04f9 74657374 		.ascii	"test_t\000"
 2815      5F7400
 2816              	.LASF33:
 2817 0500 70726573 		.ascii	"pressure_depth\000"
 2817      73757265 
 2817      5F646570 
 2817      746800
 2818              	.LASF43:
 2819 050f 72736370 		.ascii	"rscp\000"
 2819      00
 2820              	.LASF74:
 2821 0514 72656164 		.ascii	"readings\000"
 2821      696E6773 
 2821      00
 2822              	.LASF105:
 2823 051d 73797374 		.ascii	"system_info\000"
 2823      656D5F69 
 2823      6E666F00 
 2824              	.LASF40:
 2825 0529 696D6569 		.ascii	"imei\000"
 2825      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 59


 2826              	.LASF22:
 2827 052e 72656173 		.ascii	"reason\000"
 2827      6F6E00
 2828              	.LASF49:
 2829 0535 6D6F6465 		.ascii	"modem_stats_t\000"
 2829      6D5F7374 
 2829      6174735F 
 2829      7400
 2830              	.LASF32:
 2831 0543 70726573 		.ascii	"pressure_current\000"
 2831      73757265 
 2831      5F637572 
 2831      72656E74 
 2831      00
 2832              	.LASF28:
 2833 0554 76616C69 		.ascii	"valid\000"
 2833      6400
 2834              	.LASF114:
 2835 055a 616C6172 		.ascii	"alarmLevelSensor\000"
 2835      6D4C6576 
 2835      656C5365 
 2835      6E736F72 
 2835      00
 2836              	.LASF56:
 2837 056b 4C657665 		.ascii	"Level_Sensor_freq\000"
 2837      6C5F5365 
 2837      6E736F72 
 2837      5F667265 
 2837      7100
 2838              	.LASF88:
 2839 057d 6C657665 		.ascii	"level_sensor_inbox\000"
 2839      6C5F7365 
 2839      6E736F72 
 2839      5F696E62 
 2839      6F7800
 2840              	.LASF18:
 2841 0590 6C6F6E67 		.ascii	"long double\000"
 2841      20646F75 
 2841      626C6500 
 2842              	.LASF17:
 2843 059c 63686172 		.ascii	"char\000"
 2843      00
 2844              	.LASF8:
 2845 05a1 756E7369 		.ascii	"unsigned int\000"
 2845      676E6564 
 2845      20696E74 
 2845      00
 2846              	.LASF104:
 2847 05ae 68747470 		.ascii	"http_route\000"
 2847      5F726F75 
 2847      746500
 2848              	.LASF9:
 2849 05b9 5F5F696E 		.ascii	"__int32_t\000"
 2849      7433325F 
 2849      7400
 2850              	.LASF73:
 2851 05c3 6F666673 		.ascii	"offset\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 60


 2851      657400
 2852              	.LASF3:
 2853 05ca 73686F72 		.ascii	"short unsigned int\000"
 2853      7420756E 
 2853      7369676E 
 2853      65642069 
 2853      6E7400
 2854              	.LASF38:
 2855 05dd 73696D5F 		.ascii	"sim_id\000"
 2855      696400
 2856              	.LASF119:
 2857 05e4 766F6C74 		.ascii	"voltages.c\000"
 2857      61676573 
 2857      2E6300
 2858              	.LASF57:
 2859 05ef 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 2859      73747265 
 2859      616D5F4C 
 2859      6576656C 
 2859      5F53656E 
 2860              	.LASF75:
 2861 060c 766F6C74 		.ascii	"voltage_take_readings\000"
 2861      6167655F 
 2861      74616B65 
 2861      5F726561 
 2861      64696E67 
 2862              	.LASF21:
 2863 0622 73746174 		.ascii	"status\000"
 2863      757300
 2864              	.LASF89:
 2865 0629 6C657665 		.ascii	"level_sensor_enabled\000"
 2865      6C5F7365 
 2865      6E736F72 
 2865      5F656E61 
 2865      626C6564 
 2866              	.LASF94:
 2867 063e 64617461 		.ascii	"dataPointsInStackDesired\000"
 2867      506F696E 
 2867      7473496E 
 2867      53746163 
 2867      6B446573 
 2868              	.LASF55:
 2869 0657 4170705F 		.ascii	"App_LED_freq\000"
 2869      4C45445F 
 2869      66726571 
 2869      00
 2870              	.LASF70:
 2871 0664 7379735F 		.ascii	"sys_settings_t\000"
 2871      73657474 
 2871      696E6773 
 2871      5F7400
 2872              	.LASF103:
 2873 0673 68747470 		.ascii	"http_body\000"
 2873      5F626F64 
 2873      7900
 2874              	.LASF13:
 2875 067d 696E7431 		.ascii	"int16\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccn5EnqA.s 			page 61


 2875      3600
 2876              	.LASF62:
 2877 0683 636F756E 		.ascii	"countDownType\000"
 2877      74446F77 
 2877      6E547970 
 2877      6500
 2878              	.LASF51:
 2879 0691 73696D5F 		.ascii	"sim_type\000"
 2879      74797065 
 2879      00
 2880              	.LASF34:
 2881 069a 70726573 		.ascii	"pressure_t\000"
 2881      73757265 
 2881      5F7400
 2882              	.LASF52:
 2883 06a5 6D656173 		.ascii	"measure_time\000"
 2883      7572655F 
 2883      74696D65 
 2883      00
 2884              	.LASF16:
 2885 06b2 646F7562 		.ascii	"double\000"
 2885      6C6500
 2886              	.LASF101:
 2887 06b9 6170705F 		.ascii	"app_led_inbox\000"
 2887      6C65645F 
 2887      696E626F 
 2887      7800
 2888              	.LASF90:
 2889 06c7 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 2889      73747265 
 2889      616D5F6C 
 2889      6576656C 
 2889      5F73656E 
 2890              	.LASF96:
 2891 06e5 6D6F6465 		.ascii	"modem_state\000"
 2891      6D5F7374 
 2891      61746500 
 2892              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
