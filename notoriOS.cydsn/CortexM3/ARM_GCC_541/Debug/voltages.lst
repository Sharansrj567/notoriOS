ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"voltages.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.global	__aeabi_f2d
  44              		.global	__aeabi_dsub
  45              		.global	__aeabi_d2f
  46              		.global	__aeabi_fmul
  47              		.global	__aeabi_fsub
  48              		.section	.text.voltage_take_readings,"ax",%progbits
  49              		.align	2
  50              		.global	voltage_take_readings
  51              		.thumb
  52              		.thumb_func
  53              		.type	voltage_take_readings, %function
  54              	voltage_take_readings:
  55              	.LFB64:
  56              		.file 1 "voltages.c"
   1:voltages.c    **** #include "voltages.h"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 2


   2:voltages.c    **** #include "notoriOS.h"
   3:voltages.c    **** #include <math.h>
   4:voltages.c    **** 
   5:voltages.c    **** // Function to take voltage readings and save them in the voltage_t datatype
   6:voltages.c    **** voltage_t voltage_take_readings(){
  57              		.loc 1 6 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 112
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61 0000 B0B5     		push	{r4, r5, r7, lr}
  62              		.cfi_def_cfa_offset 16
  63              		.cfi_offset 4, -16
  64              		.cfi_offset 5, -12
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 9CB0     		sub	sp, sp, #112
  68              		.cfi_def_cfa_offset 128
  69 0004 00AF     		add	r7, sp, #0
  70              		.cfi_def_cfa_register 7
  71 0006 7860     		str	r0, [r7, #4]
   7:voltages.c    ****     
   8:voltages.c    ****     // if valve type put voltage across valve potentiometer
   9:voltages.c    ****     Valve_POS_Power_Write(1);
  72              		.loc 1 9 0
  73 0008 0120     		movs	r0, #1
  74 000a FFF7FEFF 		bl	Valve_POS_Power_Write
  10:voltages.c    ****     
  11:voltages.c    ****     voltage_t voltage;  // Create variable voltage of data structure voltage_t.
  12:voltages.c    ****      
  13:voltages.c    **** 	Battery_Voltage_Enable_Write(ON);   // Flip on the Battery Voltage ADC pin high (turns it on).
  75              		.loc 1 13 0
  76 000e 0120     		movs	r0, #1
  77 0010 FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  14:voltages.c    ****     
  15:voltages.c    ****     //for valve type, using pressure_voltage power pin so ignore these if the pin is already high
  16:voltages.c    ****     if (!(updatable_parameters.node_type == NODE_TYPE_VALVE)){
  78              		.loc 1 16 0
  79 0014 504B     		ldr	r3, .L9+8
  80 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  81 0018 042B     		cmp	r3, #4
  82 001a 02D0     		beq	.L2
  17:voltages.c    ****         Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high
  83              		.loc 1 17 0
  84 001c 0120     		movs	r0, #1
  85 001e FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
  86              	.L2:
  18:voltages.c    ****     }
  19:voltages.c    ****     
  20:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
  87              		.loc 1 20 0
  88 0022 0A20     		movs	r0, #10
  89 0024 FFF7FEFF 		bl	CyDelay
  21:voltages.c    ****     
  22:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
  90              		.loc 1 22 0
  91 0028 FFF7FEFF 		bl	AMux_Start
  23:voltages.c    ****  
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 3


  24:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
  92              		.loc 1 24 0
  93 002c FFF7FEFF 		bl	ADC_RestoreConfig
  25:voltages.c    ****     
  26:voltages.c    ****     ADC_Start();        // Start the ADC
  94              		.loc 1 26 0
  95 0030 FFF7FEFF 		bl	ADC_Start
  96              	.LBB2:
  27:voltages.c    ****     
  28:voltages.c    ****     
  29:voltages.c    ****     float channels[AMux_CHANNELS];
  30:voltages.c    ****     
  31:voltages.c    ****     for(uint8 c = 0; c< AMux_CHANNELS + 1; c++) // Sweep the MUX Channels
  97              		.loc 1 31 0
  98 0034 0023     		movs	r3, #0
  99 0036 87F86F30 		strb	r3, [r7, #111]
 100 003a 34E0     		b	.L3
 101              	.L6:
 102              	.LBB3:
  32:voltages.c    ****     {
  33:voltages.c    ****         
  34:voltages.c    ****         int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 
  35:voltages.c    ****         
  36:voltages.c    ****         AMux_Select(c); // This functions first disconnects all channels then connects the given ch
 103              		.loc 1 36 0
 104 003c 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 105 0040 1846     		mov	r0, r3
 106 0042 FFF7FEFF 		bl	AMux_Select
 107              	.LBB4:
  37:voltages.c    ****         
  38:voltages.c    ****         for(uint16 i=0; i< N_SAMPLES; i++){
 108              		.loc 1 38 0
 109 0046 0023     		movs	r3, #0
 110 0048 A7F86C30 		strh	r3, [r7, #108]	@ movhi
 111 004c 0FE0     		b	.L4
 112              	.L5:
  39:voltages.c    ****             
  40:voltages.c    ****             readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the
 113              		.loc 1 40 0 discriminator 3
 114 004e B7F86C40 		ldrh	r4, [r7, #108]
 115 0052 FFF7FEFF 		bl	ADC_Read32
 116 0056 0246     		mov	r2, r0
 117 0058 A300     		lsls	r3, r4, #2
 118 005a 07F17001 		add	r1, r7, #112
 119 005e 0B44     		add	r3, r3, r1
 120 0060 43F8682C 		str	r2, [r3, #-104]
  38:voltages.c    ****             
 121              		.loc 1 38 0 discriminator 3
 122 0064 B7F86C30 		ldrh	r3, [r7, #108]
 123 0068 0133     		adds	r3, r3, #1
 124 006a A7F86C30 		strh	r3, [r7, #108]	@ movhi
 125              	.L4:
  38:voltages.c    ****             
 126              		.loc 1 38 0 is_stmt 0 discriminator 1
 127 006e B7F86C30 		ldrh	r3, [r7, #108]
 128 0072 0A2B     		cmp	r3, #10
 129 0074 EBD9     		bls	.L5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 4


 130              	.LBE4:
  41:voltages.c    ****         }
  42:voltages.c    ****         
  43:voltages.c    ****         // Converts the ADC output to Volts as a floating point number. 
  44:voltages.c    ****         // Get the median of readings and return that.
  45:voltages.c    ****         channels[c] = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get median of re
 131              		.loc 1 45 0 is_stmt 1 discriminator 2
 132 0076 97F86F40 		ldrb	r4, [r7, #111]	@ zero_extendqisi2
 133 007a 07F10803 		add	r3, r7, #8
 134 007e 0B21     		movs	r1, #11
 135 0080 1846     		mov	r0, r3
 136 0082 FFF7FEFF 		bl	find_median32
 137 0086 0346     		mov	r3, r0
 138 0088 1846     		mov	r0, r3
 139 008a FFF7FEFF 		bl	ADC_CountsTo_Volts
 140 008e 0246     		mov	r2, r0
 141 0090 A300     		lsls	r3, r4, #2
 142 0092 07F17001 		add	r1, r7, #112
 143 0096 0B44     		add	r3, r3, r1
 144 0098 43F83C2C 		str	r2, [r3, #-60]	@ float
 145              	.LBE3:
  31:voltages.c    ****     {
 146              		.loc 1 31 0 discriminator 2
 147 009c 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 148 00a0 0133     		adds	r3, r3, #1
 149 00a2 87F86F30 		strb	r3, [r7, #111]
 150              	.L3:
  31:voltages.c    ****     {
 151              		.loc 1 31 0 is_stmt 0 discriminator 1
 152 00a6 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 153 00aa 062B     		cmp	r3, #6
 154 00ac C6D9     		bls	.L6
 155              	.LBE2:
  46:voltages.c    ****     }
  47:voltages.c    ****     
  48:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 156              		.loc 1 48 0 is_stmt 1
 157 00ae FFF7FEFF 		bl	AMux_Start
  49:voltages.c    ****     
  50:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 158              		.loc 1 50 0
 159 00b2 FFF7FEFF 		bl	ADC_SaveConfig
  51:voltages.c    ****     
  52:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 160              		.loc 1 52 0
 161 00b6 FFF7FEFF 		bl	ADC_Stop
  53:voltages.c    ****     
  54:voltages.c    ****     Battery_Voltage_Enable_Write(OFF);  // Pulls Battery ADC pin low (turns it off).
 162              		.loc 1 54 0
 163 00ba 0020     		movs	r0, #0
 164 00bc FFF7FEFF 		bl	Battery_Voltage_Enable_Write
  55:voltages.c    ****     
  56:voltages.c    ****     //for valve type, using pressure_voltage power pin so ignore these if the pin is already high
  57:voltages.c    ****     if (!(updatable_parameters.node_type ==NODE_TYPE_VALVE)){
 165              		.loc 1 57 0
 166 00c0 254B     		ldr	r3, .L9+8
 167 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 5


 168 00c4 042B     		cmp	r3, #4
 169 00c6 02D0     		beq	.L7
  58:voltages.c    ****         Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off
 170              		.loc 1 58 0
 171 00c8 0020     		movs	r0, #0
 172 00ca FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
 173              	.L7:
  59:voltages.c    ****     }
  60:voltages.c    ****     
  61:voltages.c    ****     
  62:voltages.c    ****     float offset = channels[0] - 1.024; // Should be 1.024 exactly. BK saw an offset when measuring
 174              		.loc 1 62 0
 175 00ce 7B6B     		ldr	r3, [r7, #52]	@ float
 176 00d0 1846     		mov	r0, r3
 177 00d2 FFF7FEFF 		bl	__aeabi_f2d
 178 00d6 1EA3     		adr	r3, .L9
 179 00d8 D3E90023 		ldrd	r2, [r3]
 180 00dc FFF7FEFF 		bl	__aeabi_dsub
 181 00e0 0346     		mov	r3, r0
 182 00e2 0C46     		mov	r4, r1
 183 00e4 1846     		mov	r0, r3
 184 00e6 2146     		mov	r1, r4
 185 00e8 FFF7FEFF 		bl	__aeabi_d2f
 186 00ec 0346     		mov	r3, r0
 187 00ee BB66     		str	r3, [r7, #104]	@ float
  63:voltages.c    ****     voltage.voltage_battery = (channels[ADC_MUX_VBAT] * 11) - offset; // Voltage divider is (1/10) 
 188              		.loc 1 63 0
 189 00f0 BB6B     		ldr	r3, [r7, #56]	@ float
 190 00f2 1A49     		ldr	r1, .L9+12
 191 00f4 1846     		mov	r0, r3
 192 00f6 FFF7FEFF 		bl	__aeabi_fmul
 193 00fa 0346     		mov	r3, r0
 194 00fc B96E     		ldr	r1, [r7, #104]	@ float
 195 00fe 1846     		mov	r0, r3
 196 0100 FFF7FEFF 		bl	__aeabi_fsub
 197 0104 0346     		mov	r3, r0
 198 0106 FB64     		str	r3, [r7, #76]	@ float
  64:voltages.c    ****     voltage.voltage_solar = channels[ADC_MUX_VSOL] - offset; // Just want voltage here
 199              		.loc 1 64 0
 200 0108 FB6B     		ldr	r3, [r7, #60]	@ float
 201 010a B96E     		ldr	r1, [r7, #104]	@ float
 202 010c 1846     		mov	r0, r3
 203 010e FFF7FEFF 		bl	__aeabi_fsub
 204 0112 0346     		mov	r3, r0
 205 0114 3B65     		str	r3, [r7, #80]	@ float
  65:voltages.c    ****     // Voltage across sensor resistor gives 100mV drop for max current, which is 800mA
  66:voltages.c    ****     //voltage.voltage_charge_current = 0.1*(channels[ADC_MUX_CHRG] - voltage.voltage_battery);
  67:voltages.c    ****     voltage.voltage_pressure = channels[ADC_MUX_PRTRANS]; // Pressure transducer reading
 206              		.loc 1 67 0
 207 0116 3B6C     		ldr	r3, [r7, #64]	@ float
 208 0118 BB65     		str	r3, [r7, #88]	@ float
  68:voltages.c    **** 
  69:voltages.c    ****     // VALVE
  70:voltages.c    ****     voltage.voltage_valve_pos = channels[ADC_MUX_Valve_POS_reading]; // blue wire reading (opened p
 209              		.loc 1 70 0
 210 011a 7B6C     		ldr	r3, [r7, #68]	@ float
 211 011c FB65     		str	r3, [r7, #92]	@ float
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 6


  71:voltages.c    ****     voltage.voltage_valve_pot_power = channels[ADC_MUX_Valve_POS_Power]; // brown wire power supply
 212              		.loc 1 71 0
 213 011e BB6C     		ldr	r3, [r7, #72]	@ float
 214 0120 3B66     		str	r3, [r7, #96]	@ float
  72:voltages.c    ****     // same pin as Valve_POS_Power
  73:voltages.c    ****     
  74:voltages.c    ****     voltage.valid = 1;
 215              		.loc 1 74 0
 216 0122 0123     		movs	r3, #1
 217 0124 87F86430 		strb	r3, [r7, #100]
  75:voltages.c    ****     
  76:voltages.c    **** 
  77:voltages.c    ****     // if valve type put voltage across valve potentiometer
  78:voltages.c    ****     Valve_POS_Power_Write(0);
 218              		.loc 1 78 0
 219 0128 0020     		movs	r0, #0
 220 012a FFF7FEFF 		bl	Valve_POS_Power_Write
  79:voltages.c    ****     
  80:voltages.c    ****     return voltage;
 221              		.loc 1 80 0
 222 012e 7B68     		ldr	r3, [r7, #4]
 223 0130 1D46     		mov	r5, r3
 224 0132 07F14C04 		add	r4, r7, #76
 225 0136 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 226 0138 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 227 013a 94E80700 		ldmia	r4, {r0, r1, r2}
 228 013e 85E80700 		stmia	r5, {r0, r1, r2}
  81:voltages.c    **** }
 229              		.loc 1 81 0
 230 0142 7868     		ldr	r0, [r7, #4]
 231 0144 7037     		adds	r7, r7, #112
 232              		.cfi_def_cfa_offset 16
 233 0146 BD46     		mov	sp, r7
 234              		.cfi_def_cfa_register 13
 235              		@ sp needed
 236 0148 B0BD     		pop	{r4, r5, r7, pc}
 237              	.L10:
 238 014a 00BFAFF3 		.align	3
 238      0080
 239              	.L9:
 240 0150 FCA9F1D2 		.word	-755914244
 241 0154 4D62F03F 		.word	1072718413
 242 0158 00000000 		.word	updatable_parameters
 243 015c 00003041 		.word	1093664768
 244              		.cfi_endproc
 245              	.LFE64:
 246              		.size	voltage_take_readings, .-voltage_take_readings
 247              		.global	__aeabi_fdiv
 248              		.global	__aeabi_ddiv
 249              		.global	__aeabi_dmul
 250              		.section	.text.pressure_sensor_readings,"ax",%progbits
 251              		.align	2
 252              		.global	pressure_sensor_readings
 253              		.thumb
 254              		.thumb_func
 255              		.type	pressure_sensor_readings, %function
 256              	pressure_sensor_readings:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 7


 257              	.LFB65:
  82:voltages.c    **** 
  83:voltages.c    **** // Function to take Pressure sensor readings and save them in the pressure_t datatype
  84:voltages.c    **** pressure_t pressure_sensor_readings(){
 258              		.loc 1 84 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 96
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262 0000 90B5     		push	{r4, r7, lr}
 263              		.cfi_def_cfa_offset 12
 264              		.cfi_offset 4, -12
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 99B0     		sub	sp, sp, #100
 268              		.cfi_def_cfa_offset 112
 269 0004 00AF     		add	r7, sp, #0
 270              		.cfi_def_cfa_register 7
 271 0006 7860     		str	r0, [r7, #4]
  85:voltages.c    ****     
  86:voltages.c    ****     pressure_t pressure;  // Create variable voltage of data structure voltage_t.
  87:voltages.c    ****     float channels[AMux_CHANNELS];
  88:voltages.c    ****     int32 readings[N_SAMPLES];  // Creates new int32 array called readings of size N_SAMPLES = 11
  89:voltages.c    ****     
  90:voltages.c    ****     AMux_Start();       // Start the Analog Multiplexer
 272              		.loc 1 90 0
 273 0008 FFF7FEFF 		bl	AMux_Start
  91:voltages.c    ****  
  92:voltages.c    ****     ADC_RestoreConfig();// Have to call this and save (See below). Otherwise ADC won't work through
 274              		.loc 1 92 0
 275 000c FFF7FEFF 		bl	ADC_RestoreConfig
  93:voltages.c    ****     
  94:voltages.c    ****     ADC_Start();        // Start the ADC
 276              		.loc 1 94 0
 277 0010 FFF7FEFF 		bl	ADC_Start
  95:voltages.c    ****     
  96:voltages.c    ****     AMux_Select(ADC_MUX_PRTRANS); // This functions first disconnects all channels then connects th
 278              		.loc 1 96 0
 279 0014 0320     		movs	r0, #3
 280 0016 FFF7FEFF 		bl	AMux_Select
 281              	.LBB5:
  97:voltages.c    ****     
  98:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 282              		.loc 1 98 0
 283 001a 0023     		movs	r3, #0
 284 001c A7F85E30 		strh	r3, [r7, #94]	@ movhi
 285 0020 0FE0     		b	.L12
 286              	.L13:
  99:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 287              		.loc 1 99 0 discriminator 3
 288 0022 B7F85E40 		ldrh	r4, [r7, #94]
 289 0026 FFF7FEFF 		bl	ADC_Read32
 290 002a 0246     		mov	r2, r0
 291 002c A300     		lsls	r3, r4, #2
 292 002e 07F16001 		add	r1, r7, #96
 293 0032 0B44     		add	r3, r3, r1
 294 0034 43F8582C 		str	r2, [r3, #-88]
  98:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 8


 295              		.loc 1 98 0 discriminator 3
 296 0038 B7F85E30 		ldrh	r3, [r7, #94]
 297 003c 0133     		adds	r3, r3, #1
 298 003e A7F85E30 		strh	r3, [r7, #94]	@ movhi
 299              	.L12:
  98:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 300              		.loc 1 98 0 is_stmt 0 discriminator 1
 301 0042 B7F85E30 		ldrh	r3, [r7, #94]
 302 0046 0A2B     		cmp	r3, #10
 303 0048 EBD9     		bls	.L13
 304              	.LBE5:
 100:voltages.c    ****     }
 101:voltages.c    ****     
 102:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
 103:voltages.c    ****     // Get the median of readings and return that.
 104:voltages.c    ****     pressure.pressure_voltage_off = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Ge
 305              		.loc 1 104 0 is_stmt 1
 306 004a 07F10803 		add	r3, r7, #8
 307 004e 0B21     		movs	r1, #11
 308 0050 1846     		mov	r0, r3
 309 0052 FFF7FEFF 		bl	find_median32
 310 0056 0346     		mov	r3, r0
 311 0058 1846     		mov	r0, r3
 312 005a FFF7FEFF 		bl	ADC_CountsTo_Volts
 313 005e 0346     		mov	r3, r0
 314 0060 3B65     		str	r3, [r7, #80]	@ float
 105:voltages.c    ****     pressure.pressure_voltage_off = floorf(pressure.pressure_voltage_off * 100) / 100;
 315              		.loc 1 105 0
 316 0062 3B6D     		ldr	r3, [r7, #80]	@ float
 317 0064 4849     		ldr	r1, .L17+16
 318 0066 1846     		mov	r0, r3
 319 0068 FFF7FEFF 		bl	__aeabi_fmul
 320 006c 0346     		mov	r3, r0
 321 006e 1846     		mov	r0, r3
 322 0070 FFF7FEFF 		bl	floorf
 323 0074 0346     		mov	r3, r0
 324 0076 4449     		ldr	r1, .L17+16
 325 0078 1846     		mov	r0, r3
 326 007a FFF7FEFF 		bl	__aeabi_fdiv
 327 007e 0346     		mov	r3, r0
 328 0080 3B65     		str	r3, [r7, #80]	@ float
 106:voltages.c    ****     
 107:voltages.c    ****     Pressure_Voltage_Enable_Write(ON);  // Flip on the Pressure Transducer Voltage ADC pin high (tu
 329              		.loc 1 107 0
 330 0082 0120     		movs	r0, #1
 331 0084 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
 108:voltages.c    ****     
 109:voltages.c    **** 	CyDelay(10u);	    // 10 seconds delay to give time to flip on ADC pin.
 332              		.loc 1 109 0
 333 0088 0A20     		movs	r0, #10
 334 008a FFF7FEFF 		bl	CyDelay
 335              	.LBB6:
 110:voltages.c    ****   
 111:voltages.c    ****     for(uint16 i=0; i< N_SAMPLES; i++){   
 336              		.loc 1 111 0
 337 008e 0023     		movs	r3, #0
 338 0090 A7F85C30 		strh	r3, [r7, #92]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 9


 339 0094 0FE0     		b	.L14
 340              	.L15:
 112:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 341              		.loc 1 112 0 discriminator 3
 342 0096 B7F85C40 		ldrh	r4, [r7, #92]
 343 009a FFF7FEFF 		bl	ADC_Read32
 344 009e 0246     		mov	r2, r0
 345 00a0 A300     		lsls	r3, r4, #2
 346 00a2 07F16001 		add	r1, r7, #96
 347 00a6 0B44     		add	r3, r3, r1
 348 00a8 43F8582C 		str	r2, [r3, #-88]
 111:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 349              		.loc 1 111 0 discriminator 3
 350 00ac B7F85C30 		ldrh	r3, [r7, #92]
 351 00b0 0133     		adds	r3, r3, #1
 352 00b2 A7F85C30 		strh	r3, [r7, #92]	@ movhi
 353              	.L14:
 111:voltages.c    ****         readings[i] = ADC_Read32(); // When called, it will start ADC conversions, wait for the con
 354              		.loc 1 111 0 is_stmt 0 discriminator 1
 355 00b6 B7F85C30 		ldrh	r3, [r7, #92]
 356 00ba 0A2B     		cmp	r3, #10
 357 00bc EBD9     		bls	.L15
 358              	.LBE6:
 113:voltages.c    ****     }
 114:voltages.c    ****     
 115:voltages.c    ****     // Converts the ADC output to Volts as a floating point number. 
 116:voltages.c    ****     // Get the median of readings and return that.
 117:voltages.c    ****     pressure.pressure_voltage_on = ADC_CountsTo_Volts(find_median32(readings,N_SAMPLES));    // Get
 359              		.loc 1 117 0 is_stmt 1
 360 00be 07F10803 		add	r3, r7, #8
 361 00c2 0B21     		movs	r1, #11
 362 00c4 1846     		mov	r0, r3
 363 00c6 FFF7FEFF 		bl	find_median32
 364 00ca 0346     		mov	r3, r0
 365 00cc 1846     		mov	r0, r3
 366 00ce FFF7FEFF 		bl	ADC_CountsTo_Volts
 367 00d2 0346     		mov	r3, r0
 368 00d4 FB64     		str	r3, [r7, #76]	@ float
 118:voltages.c    ****     
 119:voltages.c    ****     AMux_Stop();        // Disconnects all Analog Multiplex channels.
 369              		.loc 1 119 0
 370 00d6 FFF7FEFF 		bl	AMux_Start
 120:voltages.c    ****     
 121:voltages.c    ****     ADC_SaveConfig();   // Save the register configuration which are not retention.
 371              		.loc 1 121 0
 372 00da FFF7FEFF 		bl	ADC_SaveConfig
 122:voltages.c    ****     
 123:voltages.c    ****     ADC_Stop();         // Stops and powers down the ADC component and the internal clock if the ex
 373              		.loc 1 123 0
 374 00de FFF7FEFF 		bl	ADC_Stop
 124:voltages.c    ****     
 125:voltages.c    ****     Pressure_Voltage_Enable_Write(OFF);  // Pulls Pressure Transducer ADC pin low (turns it off).
 375              		.loc 1 125 0
 376 00e2 0020     		movs	r0, #0
 377 00e4 FFF7FEFF 		bl	Pressure_Voltage_Enable_Write
 126:voltages.c    ****     // Calculate the pressure transducer current output.
 127:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 10


 128:voltages.c    ****     // Should fall between 4 and 20mA
 129:voltages.c    ****     pressure.pressure_current = (pressure.pressure_voltage_on/ 150.0)*1000; 
 378              		.loc 1 129 0
 379 00e8 FB6C     		ldr	r3, [r7, #76]	@ float
 380 00ea 1846     		mov	r0, r3
 381 00ec FFF7FEFF 		bl	__aeabi_f2d
 382 00f0 21A3     		adr	r3, .L17
 383 00f2 D3E90023 		ldrd	r2, [r3]
 384 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 385 00fa 0346     		mov	r3, r0
 386 00fc 0C46     		mov	r4, r1
 387 00fe 1846     		mov	r0, r3
 388 0100 2146     		mov	r1, r4
 389 0102 4FF00002 		mov	r2, #0
 390 0106 214B     		ldr	r3, .L17+20
 391 0108 FFF7FEFF 		bl	__aeabi_dmul
 392 010c 0346     		mov	r3, r0
 393 010e 0C46     		mov	r4, r1
 394 0110 1846     		mov	r0, r3
 395 0112 2146     		mov	r1, r4
 396 0114 FFF7FEFF 		bl	__aeabi_d2f
 397 0118 0346     		mov	r3, r0
 398 011a 7B65     		str	r3, [r7, #84]	@ float
 130:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 131:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 132:voltages.c    ****     // Should fall between 0 and 10 ft
 133:voltages.c    ****     pressure.pressure_depth = ((10.0*pressure.pressure_voltage_on)/(0.016*150))-(10.0/4.0);   
 399              		.loc 1 133 0
 400 011c FB6C     		ldr	r3, [r7, #76]	@ float
 401 011e 1846     		mov	r0, r3
 402 0120 FFF7FEFF 		bl	__aeabi_f2d
 403 0124 4FF00002 		mov	r2, #0
 404 0128 194B     		ldr	r3, .L17+24
 405 012a FFF7FEFF 		bl	__aeabi_dmul
 406 012e 0346     		mov	r3, r0
 407 0130 0C46     		mov	r4, r1
 408 0132 1846     		mov	r0, r3
 409 0134 2146     		mov	r1, r4
 410 0136 12A3     		adr	r3, .L17+8
 411 0138 D3E90023 		ldrd	r2, [r3]
 412 013c FFF7FEFF 		bl	__aeabi_ddiv
 413 0140 0346     		mov	r3, r0
 414 0142 0C46     		mov	r4, r1
 415 0144 1846     		mov	r0, r3
 416 0146 2146     		mov	r1, r4
 417 0148 4FF00002 		mov	r2, #0
 418 014c 114B     		ldr	r3, .L17+28
 419 014e FFF7FEFF 		bl	__aeabi_dsub
 420 0152 0346     		mov	r3, r0
 421 0154 0C46     		mov	r4, r1
 422 0156 1846     		mov	r0, r3
 423 0158 2146     		mov	r1, r4
 424 015a FFF7FEFF 		bl	__aeabi_d2f
 425 015e 0346     		mov	r3, r0
 426 0160 BB65     		str	r3, [r7, #88]	@ float
 134:voltages.c    ****     return pressure;
 427              		.loc 1 134 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 11


 428 0162 7B68     		ldr	r3, [r7, #4]
 429 0164 1C46     		mov	r4, r3
 430 0166 07F14C03 		add	r3, r7, #76
 431 016a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 432 016c 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 135:voltages.c    **** }
 433              		.loc 1 135 0
 434 0170 7868     		ldr	r0, [r7, #4]
 435 0172 6437     		adds	r7, r7, #100
 436              		.cfi_def_cfa_offset 12
 437 0174 BD46     		mov	sp, r7
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 0176 90BD     		pop	{r4, r7, pc}
 441              	.L18:
 442              		.align	3
 443              	.L17:
 444 0178 00000000 		.word	0
 445 017c 00C06240 		.word	1080213504
 446 0180 33333333 		.word	858993459
 447 0184 33330340 		.word	1073951539
 448 0188 0000C842 		.word	1120403456
 449 018c 00408F40 		.word	1083129856
 450 0190 00002440 		.word	1076101120
 451 0194 00000440 		.word	1074003968
 452              		.cfi_endproc
 453              	.LFE65:
 454              		.size	pressure_sensor_readings, .-pressure_sensor_readings
 455              		.section	.text.pressure_calculations,"ax",%progbits
 456              		.align	2
 457              		.global	pressure_calculations
 458              		.thumb
 459              		.thumb_func
 460              		.type	pressure_calculations, %function
 461              	pressure_calculations:
 462              	.LFB66:
 136:voltages.c    **** 
 137:voltages.c    **** // Function to calculate the pressure transducer current and depth estimate.
 138:voltages.c    **** pressure_t pressure_calculations(voltage_t voltage){
 463              		.loc 1 138 0
 464              		.cfi_startproc
 465              		@ args = 32, pretend = 16, frame = 24
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467 0000 84B0     		sub	sp, sp, #16
 468              		.cfi_def_cfa_offset 16
 469 0002 90B5     		push	{r4, r7, lr}
 470              		.cfi_def_cfa_offset 28
 471              		.cfi_offset 4, -28
 472              		.cfi_offset 7, -24
 473              		.cfi_offset 14, -20
 474 0004 87B0     		sub	sp, sp, #28
 475              		.cfi_def_cfa_offset 56
 476 0006 00AF     		add	r7, sp, #0
 477              		.cfi_def_cfa_register 7
 478 0008 7860     		str	r0, [r7, #4]
 479 000a 07F12C00 		add	r0, r7, #44
 480 000e 80E80E00 		stmia	r0, {r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 12


 139:voltages.c    ****     // Create variable pressure of data structure type pressure_t.
 140:voltages.c    ****     pressure_t pressure;
 141:voltages.c    ****     
 142:voltages.c    ****     // Calculate the pressure transducer current output.
 143:voltages.c    ****     // i=V/R where i= currrent, V= voltage, and R= resistance= 150 ohms. Divide by 1000 to get curr
 144:voltages.c    ****     // Should fall between 4 and 20mA
 145:voltages.c    ****     pressure.pressure_current = (voltage.voltage_pressure/ 150.0)/1000; 
 481              		.loc 1 145 0
 482 0012 BB6B     		ldr	r3, [r7, #56]	@ float
 483 0014 1846     		mov	r0, r3
 484 0016 FFF7FEFF 		bl	__aeabi_f2d
 485 001a 23A3     		adr	r3, .L21
 486 001c D3E90023 		ldrd	r2, [r3]
 487 0020 FFF7FEFF 		bl	__aeabi_ddiv
 488 0024 0346     		mov	r3, r0
 489 0026 0C46     		mov	r4, r1
 490 0028 1846     		mov	r0, r3
 491 002a 2146     		mov	r1, r4
 492 002c 4FF00002 		mov	r2, #0
 493 0030 214B     		ldr	r3, .L21+16
 494 0032 FFF7FEFF 		bl	__aeabi_ddiv
 495 0036 0346     		mov	r3, r0
 496 0038 0C46     		mov	r4, r1
 497 003a 1846     		mov	r0, r3
 498 003c 2146     		mov	r1, r4
 499 003e FFF7FEFF 		bl	__aeabi_d2f
 500 0042 0346     		mov	r3, r0
 501 0044 3B61     		str	r3, [r7, #16]	@ float
 146:voltages.c    ****     // Calculate the estimated depth from the pressure transducer.
 147:voltages.c    ****     // d = (Dmax*V/0.016R) - (Dmax/4) where d= depth, V= voltage, R= resistance= 150 ohms, Dmax = s
 148:voltages.c    ****     // Should fall between 0 and 10 ft
 149:voltages.c    ****     pressure.pressure_depth = ((10.0*voltage.voltage_pressure)/(0.016*150))-(10.0/4.0); 
 502              		.loc 1 149 0
 503 0046 BB6B     		ldr	r3, [r7, #56]	@ float
 504 0048 1846     		mov	r0, r3
 505 004a FFF7FEFF 		bl	__aeabi_f2d
 506 004e 4FF00002 		mov	r2, #0
 507 0052 1A4B     		ldr	r3, .L21+20
 508 0054 FFF7FEFF 		bl	__aeabi_dmul
 509 0058 0346     		mov	r3, r0
 510 005a 0C46     		mov	r4, r1
 511 005c 1846     		mov	r0, r3
 512 005e 2146     		mov	r1, r4
 513 0060 13A3     		adr	r3, .L21+8
 514 0062 D3E90023 		ldrd	r2, [r3]
 515 0066 FFF7FEFF 		bl	__aeabi_ddiv
 516 006a 0346     		mov	r3, r0
 517 006c 0C46     		mov	r4, r1
 518 006e 1846     		mov	r0, r3
 519 0070 2146     		mov	r1, r4
 520 0072 4FF00002 		mov	r2, #0
 521 0076 124B     		ldr	r3, .L21+24
 522 0078 FFF7FEFF 		bl	__aeabi_dsub
 523 007c 0346     		mov	r3, r0
 524 007e 0C46     		mov	r4, r1
 525 0080 1846     		mov	r0, r3
 526 0082 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 13


 527 0084 FFF7FEFF 		bl	__aeabi_d2f
 528 0088 0346     		mov	r3, r0
 529 008a 7B61     		str	r3, [r7, #20]	@ float
 150:voltages.c    ****     return pressure;
 530              		.loc 1 150 0
 531 008c 7B68     		ldr	r3, [r7, #4]
 532 008e 1C46     		mov	r4, r3
 533 0090 07F10803 		add	r3, r7, #8
 534 0094 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 535 0096 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 151:voltages.c    **** }
 536              		.loc 1 151 0
 537 009a 7868     		ldr	r0, [r7, #4]
 538 009c 1C37     		adds	r7, r7, #28
 539              		.cfi_def_cfa_offset 28
 540 009e BD46     		mov	sp, r7
 541              		.cfi_def_cfa_register 13
 542              		@ sp needed
 543 00a0 BDE89040 		pop	{r4, r7, lr}
 544              		.cfi_restore 14
 545              		.cfi_restore 7
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 16
 548 00a4 04B0     		add	sp, sp, #16
 549              		.cfi_def_cfa_offset 0
 550 00a6 7047     		bx	lr
 551              	.L22:
 552              		.align	3
 553              	.L21:
 554 00a8 00000000 		.word	0
 555 00ac 00C06240 		.word	1080213504
 556 00b0 33333333 		.word	858993459
 557 00b4 33330340 		.word	1073951539
 558 00b8 00408F40 		.word	1083129856
 559 00bc 00002440 		.word	1076101120
 560 00c0 00000440 		.word	1074003968
 561              		.cfi_endproc
 562              	.LFE66:
 563              		.size	pressure_calculations, .-pressure_calculations
 564              		.section	.text.sort32,"ax",%progbits
 565              		.align	2
 566              		.global	sort32
 567              		.thumb
 568              		.thumb_func
 569              		.type	sort32, %function
 570              	sort32:
 571              	.LFB67:
 152:voltages.c    ****     
 153:voltages.c    ****     
 154:voltages.c    **** 
 155:voltages.c    **** // Function to sort the elements in the level readings array
 156:voltages.c    **** void sort32(int32 a[],int32 n) { 
 572              		.loc 1 156 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 16
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 14


 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 7, -8
 579              		.cfi_offset 14, -4
 580 0002 84B0     		sub	sp, sp, #16
 581              		.cfi_def_cfa_offset 24
 582 0004 00AF     		add	r7, sp, #0
 583              		.cfi_def_cfa_register 7
 584 0006 7860     		str	r0, [r7, #4]
 585 0008 3960     		str	r1, [r7]
 157:voltages.c    ****    int32 i,j;
 158:voltages.c    **** 
 159:voltages.c    ****    for(i = 0;i < n-1;i++) {
 586              		.loc 1 159 0
 587 000a 0023     		movs	r3, #0
 588 000c FB60     		str	r3, [r7, #12]
 589 000e 28E0     		b	.L24
 590              	.L28:
 160:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 591              		.loc 1 160 0
 592 0010 0023     		movs	r3, #0
 593 0012 BB60     		str	r3, [r7, #8]
 594 0014 1BE0     		b	.L25
 595              	.L27:
 161:voltages.c    ****          if(a[j] > a[j+1])
 596              		.loc 1 161 0
 597 0016 BB68     		ldr	r3, [r7, #8]
 598 0018 9B00     		lsls	r3, r3, #2
 599 001a 7A68     		ldr	r2, [r7, #4]
 600 001c 1344     		add	r3, r3, r2
 601 001e 1A68     		ldr	r2, [r3]
 602 0020 BB68     		ldr	r3, [r7, #8]
 603 0022 0133     		adds	r3, r3, #1
 604 0024 9B00     		lsls	r3, r3, #2
 605 0026 7968     		ldr	r1, [r7, #4]
 606 0028 0B44     		add	r3, r3, r1
 607 002a 1B68     		ldr	r3, [r3]
 608 002c 9A42     		cmp	r2, r3
 609 002e 0BDD     		ble	.L26
 162:voltages.c    ****             swap32(&a[j],&a[j+1]);  // Swap the address of a[j] and a[j+1]
 610              		.loc 1 162 0
 611 0030 BB68     		ldr	r3, [r7, #8]
 612 0032 9B00     		lsls	r3, r3, #2
 613 0034 7A68     		ldr	r2, [r7, #4]
 614 0036 D018     		adds	r0, r2, r3
 615 0038 BB68     		ldr	r3, [r7, #8]
 616 003a 0133     		adds	r3, r3, #1
 617 003c 9B00     		lsls	r3, r3, #2
 618 003e 7A68     		ldr	r2, [r7, #4]
 619 0040 1344     		add	r3, r3, r2
 620 0042 1946     		mov	r1, r3
 621 0044 FFF7FEFF 		bl	swap32
 622              	.L26:
 160:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 623              		.loc 1 160 0 discriminator 2
 624 0048 BB68     		ldr	r3, [r7, #8]
 625 004a 0133     		adds	r3, r3, #1
 626 004c BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 15


 627              	.L25:
 160:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 628              		.loc 1 160 0 is_stmt 0 discriminator 1
 629 004e 3A68     		ldr	r2, [r7]
 630 0050 FB68     		ldr	r3, [r7, #12]
 631 0052 D31A     		subs	r3, r2, r3
 632 0054 5A1E     		subs	r2, r3, #1
 633 0056 BB68     		ldr	r3, [r7, #8]
 634 0058 9A42     		cmp	r2, r3
 635 005a DCDC     		bgt	.L27
 159:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 636              		.loc 1 159 0 is_stmt 1 discriminator 2
 637 005c FB68     		ldr	r3, [r7, #12]
 638 005e 0133     		adds	r3, r3, #1
 639 0060 FB60     		str	r3, [r7, #12]
 640              	.L24:
 159:voltages.c    ****       for(j = 0;j < n-i-1;j++) {
 641              		.loc 1 159 0 is_stmt 0 discriminator 1
 642 0062 3B68     		ldr	r3, [r7]
 643 0064 5A1E     		subs	r2, r3, #1
 644 0066 FB68     		ldr	r3, [r7, #12]
 645 0068 9A42     		cmp	r2, r3
 646 006a D1DC     		bgt	.L28
 163:voltages.c    ****       }
 164:voltages.c    ****    }
 165:voltages.c    **** }
 647              		.loc 1 165 0 is_stmt 1
 648 006c 00BF     		nop
 649 006e 1037     		adds	r7, r7, #16
 650              		.cfi_def_cfa_offset 8
 651 0070 BD46     		mov	sp, r7
 652              		.cfi_def_cfa_register 13
 653              		@ sp needed
 654 0072 80BD     		pop	{r7, pc}
 655              		.cfi_endproc
 656              	.LFE67:
 657              		.size	sort32, .-sort32
 658              		.section	.text.swap32,"ax",%progbits
 659              		.align	2
 660              		.global	swap32
 661              		.thumb
 662              		.thumb_func
 663              		.type	swap32, %function
 664              	swap32:
 665              	.LFB68:
 166:voltages.c    **** 
 167:voltages.c    **** // Function to swap elements in the level readings array in order to sort them
 168:voltages.c    **** void swap32(int32 *p,int32 *q){
 666              		.loc 1 168 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 16
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 0000 80B4     		push	{r7}
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 16


 675              		.cfi_def_cfa_offset 24
 676 0004 00AF     		add	r7, sp, #0
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
 679 0008 3960     		str	r1, [r7]
 169:voltages.c    ****    int32 t;
 170:voltages.c    ****    
 171:voltages.c    ****    t=*p; 
 680              		.loc 1 171 0
 681 000a 7B68     		ldr	r3, [r7, #4]
 682 000c 1B68     		ldr	r3, [r3]
 683 000e FB60     		str	r3, [r7, #12]
 172:voltages.c    ****    *p=*q; 
 684              		.loc 1 172 0
 685 0010 3B68     		ldr	r3, [r7]
 686 0012 1A68     		ldr	r2, [r3]
 687 0014 7B68     		ldr	r3, [r7, #4]
 688 0016 1A60     		str	r2, [r3]
 173:voltages.c    ****    *q=t;
 689              		.loc 1 173 0
 690 0018 3B68     		ldr	r3, [r7]
 691 001a FA68     		ldr	r2, [r7, #12]
 692 001c 1A60     		str	r2, [r3]
 174:voltages.c    **** }
 693              		.loc 1 174 0
 694 001e 00BF     		nop
 695 0020 1437     		adds	r7, r7, #20
 696              		.cfi_def_cfa_offset 4
 697 0022 BD46     		mov	sp, r7
 698              		.cfi_def_cfa_register 13
 699              		@ sp needed
 700 0024 80BC     		pop	{r7}
 701              		.cfi_restore 7
 702              		.cfi_def_cfa_offset 0
 703 0026 7047     		bx	lr
 704              		.cfi_endproc
 705              	.LFE68:
 706              		.size	swap32, .-swap32
 707              		.global	__aeabi_i2d
 708              		.global	__aeabi_d2iz
 709              		.section	.text.find_median32,"ax",%progbits
 710              		.align	2
 711              		.global	find_median32
 712              		.thumb
 713              		.thumb_func
 714              		.type	find_median32, %function
 715              	find_median32:
 716              	.LFB69:
 175:voltages.c    **** 
 176:voltages.c    **** // Function to calculate the median of the array, after array is sorted
 177:voltages.c    **** int32 find_median32(int32 array[] , int32 n)
 178:voltages.c    **** {
 717              		.loc 1 178 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 16
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 17


 722              		.cfi_def_cfa_offset 12
 723              		.cfi_offset 4, -12
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 85B0     		sub	sp, sp, #20
 727              		.cfi_def_cfa_offset 32
 728 0004 00AF     		add	r7, sp, #0
 729              		.cfi_def_cfa_register 7
 730 0006 7860     		str	r0, [r7, #4]
 731 0008 3960     		str	r1, [r7]
 179:voltages.c    ****     int32 median=0;
 732              		.loc 1 179 0
 733 000a 0023     		movs	r3, #0
 734 000c FB60     		str	r3, [r7, #12]
 180:voltages.c    ****     sort32(array,n);
 735              		.loc 1 180 0
 736 000e 3968     		ldr	r1, [r7]
 737 0010 7868     		ldr	r0, [r7, #4]
 738 0012 FFF7FEFF 		bl	sort32
 181:voltages.c    ****     
 182:voltages.c    ****     // If number of elements are even
 183:voltages.c    ****     if(n%2 == 0)
 739              		.loc 1 183 0
 740 0016 3B68     		ldr	r3, [r7]
 741 0018 03F00103 		and	r3, r3, #1
 742 001c 002B     		cmp	r3, #0
 743 001e 23D1     		bne	.L31
 184:voltages.c    ****         // Median is the average of the  two middle sorted numbers
 185:voltages.c    ****         median = (array[(n-1)/2] + array[n/2])/2.0;
 744              		.loc 1 185 0
 745 0020 3B68     		ldr	r3, [r7]
 746 0022 013B     		subs	r3, r3, #1
 747 0024 DA0F     		lsrs	r2, r3, #31
 748 0026 1344     		add	r3, r3, r2
 749 0028 5B10     		asrs	r3, r3, #1
 750 002a 9B00     		lsls	r3, r3, #2
 751 002c 7A68     		ldr	r2, [r7, #4]
 752 002e 1344     		add	r3, r3, r2
 753 0030 1A68     		ldr	r2, [r3]
 754 0032 3B68     		ldr	r3, [r7]
 755 0034 D90F     		lsrs	r1, r3, #31
 756 0036 0B44     		add	r3, r3, r1
 757 0038 5B10     		asrs	r3, r3, #1
 758 003a 9B00     		lsls	r3, r3, #2
 759 003c 7968     		ldr	r1, [r7, #4]
 760 003e 0B44     		add	r3, r3, r1
 761 0040 1B68     		ldr	r3, [r3]
 762 0042 1344     		add	r3, r3, r2
 763 0044 1846     		mov	r0, r3
 764 0046 FFF7FEFF 		bl	__aeabi_i2d
 765 004a 4FF00002 		mov	r2, #0
 766 004e 4FF08043 		mov	r3, #1073741824
 767 0052 FFF7FEFF 		bl	__aeabi_ddiv
 768 0056 0346     		mov	r3, r0
 769 0058 0C46     		mov	r4, r1
 770 005a 1846     		mov	r0, r3
 771 005c 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 18


 772 005e FFF7FEFF 		bl	__aeabi_d2iz
 773 0062 0346     		mov	r3, r0
 774 0064 FB60     		str	r3, [r7, #12]
 775 0066 08E0     		b	.L32
 776              	.L31:
 186:voltages.c    ****     // If number of elements are odd
 187:voltages.c    ****     else
 188:voltages.c    ****         // Median is the the middle sorted number. 
 189:voltages.c    ****         median = array[n/2];
 777              		.loc 1 189 0
 778 0068 3B68     		ldr	r3, [r7]
 779 006a DA0F     		lsrs	r2, r3, #31
 780 006c 1344     		add	r3, r3, r2
 781 006e 5B10     		asrs	r3, r3, #1
 782 0070 9B00     		lsls	r3, r3, #2
 783 0072 7A68     		ldr	r2, [r7, #4]
 784 0074 1344     		add	r3, r3, r2
 785 0076 1B68     		ldr	r3, [r3]
 786 0078 FB60     		str	r3, [r7, #12]
 787              	.L32:
 190:voltages.c    ****     
 191:voltages.c    ****     return median;
 788              		.loc 1 191 0
 789 007a FB68     		ldr	r3, [r7, #12]
 192:voltages.c    **** }
 790              		.loc 1 192 0
 791 007c 1846     		mov	r0, r3
 792 007e 1437     		adds	r7, r7, #20
 793              		.cfi_def_cfa_offset 12
 794 0080 BD46     		mov	sp, r7
 795              		.cfi_def_cfa_register 13
 796              		@ sp needed
 797 0082 90BD     		pop	{r4, r7, pc}
 798              		.cfi_endproc
 799              	.LFE69:
 800              		.size	find_median32, .-find_median32
 801              		.section	.rodata
 802              		.align	2
 803              	.LC0:
 804 0000 54455354 		.ascii	"TEST_ANALOG_VOLTAGES\000"
 804      5F414E41 
 804      4C4F475F 
 804      564F4C54 
 804      41474553 
 805 0015 000000   		.align	2
 806              	.LC1:
 807 0018 56424154 		.ascii	"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f\000"
 807      3D252E33 
 807      662C5653 
 807      4F4C3D25 
 807      2E33662C 
 808              		.section	.text.voltages_test,"ax",%progbits
 809              		.align	2
 810              		.global	voltages_test
 811              		.thumb
 812              		.thumb_func
 813              		.type	voltages_test, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 19


 814              	voltages_test:
 815              	.LFB70:
 193:voltages.c    **** 
 194:voltages.c    **** // Test the voltage readings
 195:voltages.c    **** test_t voltages_test(){
 816              		.loc 1 195 0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 424
 819              		@ frame_needed = 1, uses_anonymous_args = 0
 820 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 821              		.cfi_def_cfa_offset 24
 822              		.cfi_offset 4, -24
 823              		.cfi_offset 5, -20
 824              		.cfi_offset 7, -16
 825              		.cfi_offset 8, -12
 826              		.cfi_offset 9, -8
 827              		.cfi_offset 14, -4
 828 0004 F0B0     		sub	sp, sp, #448
 829              		.cfi_def_cfa_offset 472
 830 0006 06AF     		add	r7, sp, #24
 831              		.cfi_def_cfa 7, 448
 832 0008 3B1D     		adds	r3, r7, #4
 833 000a 1860     		str	r0, [r3]
 196:voltages.c    ****     // Create variable test of the data structure test_t
 197:voltages.c    ****     test_t test;
 198:voltages.c    ****     test.status = 0;
 834              		.loc 1 198 0
 835 000c 07F12403 		add	r3, r7, #36
 836 0010 0022     		movs	r2, #0
 837 0012 83F88020 		strb	r2, [r3, #128]
 199:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_ANALOG_VOLTAGES");
 838              		.loc 1 199 0
 839 0016 07F12403 		add	r3, r7, #36
 840 001a 264A     		ldr	r2, .L36
 841 001c 1C46     		mov	r4, r3
 842 001e 1546     		mov	r5, r2
 843 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 844 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 845 0024 95E80300 		ldmia	r5, {r0, r1}
 846 0028 2060     		str	r0, [r4]
 847 002a 0434     		adds	r4, r4, #4
 848 002c 2170     		strb	r1, [r4]
 200:voltages.c    ****     
 201:voltages.c    ****     voltage_t voltage = voltage_take_readings();
 849              		.loc 1 201 0
 850 002e 07F10803 		add	r3, r7, #8
 851 0032 1846     		mov	r0, r3
 852 0034 FFF7FEFF 		bl	voltage_take_readings
 202:voltages.c    ****     
 203:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 204:voltages.c    ****     
 205:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"VBAT=%.3f,VSOL=%.3f,CHRG=%.3f",
 206:voltages.c    ****             voltage.voltage_battery,
 853              		.loc 1 206 0
 854 0038 07F10803 		add	r3, r7, #8
 855 003c 1B68     		ldr	r3, [r3]	@ float
 205:voltages.c    ****             voltage.voltage_battery,
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 20


 856              		.loc 1 205 0
 857 003e 1846     		mov	r0, r3
 858 0040 FFF7FEFF 		bl	__aeabi_f2d
 859 0044 0446     		mov	r4, r0
 860 0046 0D46     		mov	r5, r1
 207:voltages.c    ****             voltage.voltage_solar,
 861              		.loc 1 207 0
 862 0048 07F10803 		add	r3, r7, #8
 863 004c 5B68     		ldr	r3, [r3, #4]	@ float
 205:voltages.c    ****             voltage.voltage_battery,
 864              		.loc 1 205 0
 865 004e 1846     		mov	r0, r3
 866 0050 FFF7FEFF 		bl	__aeabi_f2d
 867 0054 8046     		mov	r8, r0
 868 0056 8946     		mov	r9, r1
 208:voltages.c    ****             voltage.voltage_charge_current);
 869              		.loc 1 208 0
 870 0058 07F10803 		add	r3, r7, #8
 871 005c 9B68     		ldr	r3, [r3, #8]	@ float
 205:voltages.c    ****             voltage.voltage_battery,
 872              		.loc 1 205 0
 873 005e 1846     		mov	r0, r3
 874 0060 FFF7FEFF 		bl	__aeabi_f2d
 875 0064 0246     		mov	r2, r0
 876 0066 0B46     		mov	r3, r1
 877 0068 07F12401 		add	r1, r7, #36
 878 006c 01F18100 		add	r0, r1, #129
 879 0070 CDE90423 		strd	r2, [sp, #16]
 880 0074 CDE90289 		strd	r8, [sp, #8]
 881 0078 CDE90045 		strd	r4, [sp]
 882 007c 0E4A     		ldr	r2, .L36+4
 883 007e 4FF48071 		mov	r1, #256
 884 0082 FFF7FEFF 		bl	snprintf
 209:voltages.c    ****     
 210:voltages.c    ****     test.status = 1;
 885              		.loc 1 210 0
 886 0086 07F12403 		add	r3, r7, #36
 887 008a 0122     		movs	r2, #1
 888 008c 83F88020 		strb	r2, [r3, #128]
 211:voltages.c    ****     
 212:voltages.c    ****     return test;
 889              		.loc 1 212 0
 890 0090 3B1D     		adds	r3, r7, #4
 891 0092 1A68     		ldr	r2, [r3]
 892 0094 07F12403 		add	r3, r7, #36
 893 0098 1046     		mov	r0, r2
 894 009a 1946     		mov	r1, r3
 895 009c 40F28113 		movw	r3, #385
 896 00a0 1A46     		mov	r2, r3
 897 00a2 FFF7FEFF 		bl	memcpy
 213:voltages.c    **** }
 898              		.loc 1 213 0
 899 00a6 3B1D     		adds	r3, r7, #4
 900 00a8 1868     		ldr	r0, [r3]
 901 00aa 07F5D477 		add	r7, r7, #424
 902              		.cfi_def_cfa_offset 24
 903 00ae BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 21


 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 00b0 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 907              	.L37:
 908              		.align	2
 909              	.L36:
 910 00b4 00000000 		.word	.LC0
 911 00b8 18000000 		.word	.LC1
 912              		.cfi_endproc
 913              	.LFE70:
 914              		.size	voltages_test, .-voltages_test
 915              		.section	.rodata
 916 0036 0000     		.align	2
 917              	.LC2:
 918 0038 54455354 		.ascii	"TEST_PRESSURE_SENSOR\000"
 918      5F505245 
 918      53535552 
 918      455F5345 
 918      4E534F52 
 919 004d 000000   		.align	2
 920              	.LC3:
 921 0050 50524553 		.ascii	"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f\000"
 921      53555245 
 921      3D252E33 
 921      662C5052 
 921      45535F43 
 922              		.global	__aeabi_fcmpeq
 923              		.section	.text.pressure_sensor_test,"ax",%progbits
 924              		.align	2
 925              		.global	pressure_sensor_test
 926              		.thumb
 927              		.thumb_func
 928              		.type	pressure_sensor_test, %function
 929              	pressure_sensor_test:
 930              	.LFB71:
 214:voltages.c    **** 
 215:voltages.c    **** // Test the pressure sensor readings
 216:voltages.c    **** test_t pressure_sensor_test(){
 931              		.loc 1 216 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 416
 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 936              		.cfi_def_cfa_offset 24
 937              		.cfi_offset 4, -24
 938              		.cfi_offset 5, -20
 939              		.cfi_offset 7, -16
 940              		.cfi_offset 8, -12
 941              		.cfi_offset 9, -8
 942              		.cfi_offset 14, -4
 943 0004 EEB0     		sub	sp, sp, #440
 944              		.cfi_def_cfa_offset 464
 945 0006 06AF     		add	r7, sp, #24
 946              		.cfi_def_cfa 7, 440
 947 0008 3B1D     		adds	r3, r7, #4
 948 000a 1860     		str	r0, [r3]
 217:voltages.c    ****     // Create variable test of the data structure test_t
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 22


 218:voltages.c    ****     test_t test;
 219:voltages.c    ****     test.status = 0;
 949              		.loc 1 219 0
 950 000c 07F11C03 		add	r3, r7, #28
 951 0010 0022     		movs	r2, #0
 952 0012 83F88020 		strb	r2, [r3, #128]
 220:voltages.c    ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_PRESSURE_SENSOR");
 953              		.loc 1 220 0
 954 0016 07F11C03 		add	r3, r7, #28
 955 001a 374A     		ldr	r2, .L43
 956 001c 1C46     		mov	r4, r3
 957 001e 1546     		mov	r5, r2
 958 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 959 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 960 0024 95E80300 		ldmia	r5, {r0, r1}
 961 0028 2060     		str	r0, [r4]
 962 002a 0434     		adds	r4, r4, #4
 963 002c 2170     		strb	r1, [r4]
 221:voltages.c    ****     
 222:voltages.c    ****     pressure_t pressure = pressure_sensor_readings();
 964              		.loc 1 222 0
 965 002e 07F10C03 		add	r3, r7, #12
 966 0032 1846     		mov	r0, r3
 967 0034 FFF7FEFF 		bl	pressure_sensor_readings
 223:voltages.c    ****     
 224:voltages.c    ****     //do some checks here if you want the test to meet some voltage requirement
 225:voltages.c    ****     
 226:voltages.c    ****     snprintf(test.reason,sizeof(test.reason),"PRESSURE=%.3f,PRES_CURRENT=%.3f,PRES_DEPTH=%.3f",
 227:voltages.c    ****             pressure.pressure_voltage_on,
 968              		.loc 1 227 0
 969 0038 07F10C03 		add	r3, r7, #12
 970 003c 1B68     		ldr	r3, [r3]	@ float
 226:voltages.c    ****             pressure.pressure_voltage_on,
 971              		.loc 1 226 0
 972 003e 1846     		mov	r0, r3
 973 0040 FFF7FEFF 		bl	__aeabi_f2d
 974 0044 0446     		mov	r4, r0
 975 0046 0D46     		mov	r5, r1
 228:voltages.c    ****             pressure.pressure_current,
 976              		.loc 1 228 0
 977 0048 07F10C03 		add	r3, r7, #12
 978 004c 9B68     		ldr	r3, [r3, #8]	@ float
 226:voltages.c    ****             pressure.pressure_voltage_on,
 979              		.loc 1 226 0
 980 004e 1846     		mov	r0, r3
 981 0050 FFF7FEFF 		bl	__aeabi_f2d
 982 0054 8046     		mov	r8, r0
 983 0056 8946     		mov	r9, r1
 229:voltages.c    ****             pressure.pressure_depth);
 984              		.loc 1 229 0
 985 0058 07F10C03 		add	r3, r7, #12
 986 005c DB68     		ldr	r3, [r3, #12]	@ float
 226:voltages.c    ****             pressure.pressure_voltage_on,
 987              		.loc 1 226 0
 988 005e 1846     		mov	r0, r3
 989 0060 FFF7FEFF 		bl	__aeabi_f2d
 990 0064 0246     		mov	r2, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 23


 991 0066 0B46     		mov	r3, r1
 992 0068 07F11C01 		add	r1, r7, #28
 993 006c 01F18100 		add	r0, r1, #129
 994 0070 CDE90423 		strd	r2, [sp, #16]
 995 0074 CDE90289 		strd	r8, [sp, #8]
 996 0078 CDE90045 		strd	r4, [sp]
 997 007c 1F4A     		ldr	r2, .L43+4
 998 007e 4FF48071 		mov	r1, #256
 999 0082 FFF7FEFF 		bl	snprintf
 230:voltages.c    ****     pressure.pressure_voltage_on = floorf(pressure.pressure_voltage_on * 100) / 100;
 1000              		.loc 1 230 0
 1001 0086 07F10C03 		add	r3, r7, #12
 1002 008a 1B68     		ldr	r3, [r3]	@ float
 1003 008c 1C49     		ldr	r1, .L43+8
 1004 008e 1846     		mov	r0, r3
 1005 0090 FFF7FEFF 		bl	__aeabi_fmul
 1006 0094 0346     		mov	r3, r0
 1007 0096 1846     		mov	r0, r3
 1008 0098 FFF7FEFF 		bl	floorf
 1009 009c 0346     		mov	r3, r0
 1010 009e 1849     		ldr	r1, .L43+8
 1011 00a0 1846     		mov	r0, r3
 1012 00a2 FFF7FEFF 		bl	__aeabi_fdiv
 1013 00a6 0346     		mov	r3, r0
 1014 00a8 1A46     		mov	r2, r3
 1015 00aa 07F10C03 		add	r3, r7, #12
 1016 00ae 1A60     		str	r2, [r3]	@ float
 231:voltages.c    ****     if (pressure.pressure_voltage_off != pressure.pressure_voltage_on) {
 1017              		.loc 1 231 0
 1018 00b0 07F10C03 		add	r3, r7, #12
 1019 00b4 5A68     		ldr	r2, [r3, #4]	@ float
 1020 00b6 07F10C03 		add	r3, r7, #12
 1021 00ba 1B68     		ldr	r3, [r3]	@ float
 1022 00bc 1946     		mov	r1, r3
 1023 00be 1046     		mov	r0, r2
 1024 00c0 FFF7FEFF 		bl	__aeabi_fcmpeq
 1025 00c4 0346     		mov	r3, r0
 1026 00c6 002B     		cmp	r3, #0
 1027 00c8 04D1     		bne	.L39
 232:voltages.c    ****         test.status = 1;
 1028              		.loc 1 232 0
 1029 00ca 07F11C03 		add	r3, r7, #28
 1030 00ce 0122     		movs	r2, #1
 1031 00d0 83F88020 		strb	r2, [r3, #128]
 1032              	.L39:
 233:voltages.c    ****     }
 234:voltages.c    ****     
 235:voltages.c    ****     return test;
 1033              		.loc 1 235 0
 1034 00d4 3B1D     		adds	r3, r7, #4
 1035 00d6 1A68     		ldr	r2, [r3]
 1036 00d8 07F11C03 		add	r3, r7, #28
 1037 00dc 1046     		mov	r0, r2
 1038 00de 1946     		mov	r1, r3
 1039 00e0 40F28113 		movw	r3, #385
 1040 00e4 1A46     		mov	r2, r3
 1041 00e6 FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 24


 236:voltages.c    **** }
 1042              		.loc 1 236 0
 1043 00ea 3B1D     		adds	r3, r7, #4
 1044 00ec 1868     		ldr	r0, [r3]
 1045 00ee 07F5D077 		add	r7, r7, #416
 1046              		.cfi_def_cfa_offset 24
 1047 00f2 BD46     		mov	sp, r7
 1048              		.cfi_def_cfa_register 13
 1049              		@ sp needed
 1050 00f4 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1051              	.L44:
 1052              		.align	2
 1053              	.L43:
 1054 00f8 38000000 		.word	.LC2
 1055 00fc 50000000 		.word	.LC3
 1056 0100 0000C842 		.word	1120403456
 1057              		.cfi_endproc
 1058              	.LFE71:
 1059              		.size	pressure_sensor_test, .-pressure_sensor_test
 1060              		.text
 1061              	.Letext0:
 1062              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1063              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1064              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1065              		.file 5 "testing.h"
 1066              		.file 6 "voltages.h"
 1067              		.file 7 "data.h"
 1068              		.file 8 "modem.h"
 1069              		.file 9 "notoriOS.h"
 1070              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 1071              		.section	.debug_info,"",%progbits
 1072              	.Ldebug_info0:
 1073 0000 0B080000 		.4byte	0x80b
 1074 0004 0400     		.2byte	0x4
 1075 0006 00000000 		.4byte	.Ldebug_abbrev0
 1076 000a 04       		.byte	0x4
 1077 000b 01       		.uleb128 0x1
 1078 000c BE000000 		.4byte	.LASF105
 1079 0010 0C       		.byte	0xc
 1080 0011 58010000 		.4byte	.LASF106
 1081 0015 4C020000 		.4byte	.LASF107
 1082 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1083 001d 00000000 		.4byte	0
 1084 0021 00000000 		.4byte	.Ldebug_line0
 1085 0025 02       		.uleb128 0x2
 1086 0026 01       		.byte	0x1
 1087 0027 06       		.byte	0x6
 1088 0028 44030000 		.4byte	.LASF0
 1089 002c 02       		.uleb128 0x2
 1090 002d 01       		.byte	0x1
 1091 002e 08       		.byte	0x8
 1092 002f DF020000 		.4byte	.LASF1
 1093 0033 02       		.uleb128 0x2
 1094 0034 02       		.byte	0x2
 1095 0035 05       		.byte	0x5
 1096 0036 96000000 		.4byte	.LASF2
 1097 003a 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 25


 1098 003b 02       		.byte	0x2
 1099 003c 07       		.byte	0x7
 1100 003d E7030000 		.4byte	.LASF3
 1101 0041 03       		.uleb128 0x3
 1102 0042 27050000 		.4byte	.LASF9
 1103 0046 02       		.byte	0x2
 1104 0047 3F       		.byte	0x3f
 1105 0048 4C000000 		.4byte	0x4c
 1106 004c 02       		.uleb128 0x2
 1107 004d 04       		.byte	0x4
 1108 004e 05       		.byte	0x5
 1109 004f 43020000 		.4byte	.LASF4
 1110 0053 02       		.uleb128 0x2
 1111 0054 04       		.byte	0x4
 1112 0055 07       		.byte	0x7
 1113 0056 E1040000 		.4byte	.LASF5
 1114 005a 02       		.uleb128 0x2
 1115 005b 08       		.byte	0x8
 1116 005c 05       		.byte	0x5
 1117 005d 11020000 		.4byte	.LASF6
 1118 0061 02       		.uleb128 0x2
 1119 0062 08       		.byte	0x8
 1120 0063 07       		.byte	0x7
 1121 0064 50030000 		.4byte	.LASF7
 1122 0068 04       		.uleb128 0x4
 1123 0069 04       		.byte	0x4
 1124 006a 05       		.byte	0x5
 1125 006b 696E7400 		.ascii	"int\000"
 1126 006f 02       		.uleb128 0x2
 1127 0070 04       		.byte	0x4
 1128 0071 07       		.byte	0x7
 1129 0072 85030000 		.4byte	.LASF8
 1130 0076 03       		.uleb128 0x3
 1131 0077 69040000 		.4byte	.LASF10
 1132 007b 03       		.byte	0x3
 1133 007c 2C       		.byte	0x2c
 1134 007d 41000000 		.4byte	0x41
 1135 0081 05       		.uleb128 0x5
 1136 0082 AA010000 		.4byte	.LASF11
 1137 0086 04       		.byte	0x4
 1138 0087 9201     		.2byte	0x192
 1139 0089 2C000000 		.4byte	0x2c
 1140 008d 05       		.uleb128 0x5
 1141 008e CF040000 		.4byte	.LASF12
 1142 0092 04       		.byte	0x4
 1143 0093 9301     		.2byte	0x193
 1144 0095 3A000000 		.4byte	0x3a
 1145 0099 05       		.uleb128 0x5
 1146 009a 1F020000 		.4byte	.LASF13
 1147 009e 04       		.byte	0x4
 1148 009f 9601     		.2byte	0x196
 1149 00a1 33000000 		.4byte	0x33
 1150 00a5 05       		.uleb128 0x5
 1151 00a6 0B020000 		.4byte	.LASF14
 1152 00aa 04       		.byte	0x4
 1153 00ab 9701     		.2byte	0x197
 1154 00ad 4C000000 		.4byte	0x4c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 26


 1155 00b1 02       		.uleb128 0x2
 1156 00b2 04       		.byte	0x4
 1157 00b3 04       		.byte	0x4
 1158 00b4 F7010000 		.4byte	.LASF15
 1159 00b8 02       		.uleb128 0x2
 1160 00b9 08       		.byte	0x8
 1161 00ba 04       		.byte	0x4
 1162 00bb F3040000 		.4byte	.LASF16
 1163 00bf 02       		.uleb128 0x2
 1164 00c0 01       		.byte	0x1
 1165 00c1 08       		.byte	0x8
 1166 00c2 37020000 		.4byte	.LASF17
 1167 00c6 02       		.uleb128 0x2
 1168 00c7 08       		.byte	0x8
 1169 00c8 04       		.byte	0x4
 1170 00c9 D3020000 		.4byte	.LASF18
 1171 00cd 02       		.uleb128 0x2
 1172 00ce 04       		.byte	0x4
 1173 00cf 07       		.byte	0x7
 1174 00d0 AD000000 		.4byte	.LASF19
 1175 00d4 06       		.uleb128 0x6
 1176 00d5 BF000000 		.4byte	0xbf
 1177 00d9 E4000000 		.4byte	0xe4
 1178 00dd 07       		.uleb128 0x7
 1179 00de CD000000 		.4byte	0xcd
 1180 00e2 17       		.byte	0x17
 1181 00e3 00       		.byte	0
 1182 00e4 08       		.uleb128 0x8
 1183 00e5 8101     		.2byte	0x181
 1184 00e7 05       		.byte	0x5
 1185 00e8 0A       		.byte	0xa
 1186 00e9 12010000 		.4byte	0x112
 1187 00ed 09       		.uleb128 0x9
 1188 00ee 50050000 		.4byte	.LASF20
 1189 00f2 05       		.byte	0x5
 1190 00f3 0C       		.byte	0xc
 1191 00f4 12010000 		.4byte	0x112
 1192 00f8 00       		.byte	0
 1193 00f9 09       		.uleb128 0x9
 1194 00fa 12040000 		.4byte	.LASF21
 1195 00fe 05       		.byte	0x5
 1196 00ff 0D       		.byte	0xd
 1197 0100 81000000 		.4byte	0x81
 1198 0104 80       		.byte	0x80
 1199 0105 09       		.uleb128 0x9
 1200 0106 3C020000 		.4byte	.LASF22
 1201 010a 05       		.byte	0x5
 1202 010b 0F       		.byte	0xf
 1203 010c 22010000 		.4byte	0x122
 1204 0110 81       		.byte	0x81
 1205 0111 00       		.byte	0
 1206 0112 06       		.uleb128 0x6
 1207 0113 BF000000 		.4byte	0xbf
 1208 0117 22010000 		.4byte	0x122
 1209 011b 07       		.uleb128 0x7
 1210 011c CD000000 		.4byte	0xcd
 1211 0120 7F       		.byte	0x7f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 27


 1212 0121 00       		.byte	0
 1213 0122 06       		.uleb128 0x6
 1214 0123 BF000000 		.4byte	0xbf
 1215 0127 32010000 		.4byte	0x132
 1216 012b 07       		.uleb128 0x7
 1217 012c CD000000 		.4byte	0xcd
 1218 0130 FF       		.byte	0xff
 1219 0131 00       		.byte	0
 1220 0132 03       		.uleb128 0x3
 1221 0133 49050000 		.4byte	.LASF23
 1222 0137 05       		.byte	0x5
 1223 0138 10       		.byte	0x10
 1224 0139 E4000000 		.4byte	0xe4
 1225 013d 0A       		.uleb128 0xa
 1226 013e 1C       		.byte	0x1c
 1227 013f 06       		.byte	0x6
 1228 0140 14       		.byte	0x14
 1229 0141 9A010000 		.4byte	0x19a
 1230 0145 09       		.uleb128 0x9
 1231 0146 88010000 		.4byte	.LASF24
 1232 014a 06       		.byte	0x6
 1233 014b 15       		.byte	0x15
 1234 014c B1000000 		.4byte	0xb1
 1235 0150 00       		.byte	0
 1236 0151 09       		.uleb128 0x9
 1237 0152 1D000000 		.4byte	.LASF25
 1238 0156 06       		.byte	0x6
 1239 0157 16       		.byte	0x16
 1240 0158 B1000000 		.4byte	0xb1
 1241 015c 04       		.byte	0x4
 1242 015d 09       		.uleb128 0x9
 1243 015e A1050000 		.4byte	.LASF26
 1244 0162 06       		.byte	0x6
 1245 0163 17       		.byte	0x17
 1246 0164 B1000000 		.4byte	0xb1
 1247 0168 08       		.byte	0x8
 1248 0169 09       		.uleb128 0x9
 1249 016a 63010000 		.4byte	.LASF27
 1250 016e 06       		.byte	0x6
 1251 016f 18       		.byte	0x18
 1252 0170 B1000000 		.4byte	0xb1
 1253 0174 0C       		.byte	0xc
 1254 0175 09       		.uleb128 0x9
 1255 0176 25020000 		.4byte	.LASF28
 1256 017a 06       		.byte	0x6
 1257 017b 19       		.byte	0x19
 1258 017c B1000000 		.4byte	0xb1
 1259 0180 10       		.byte	0x10
 1260 0181 09       		.uleb128 0x9
 1261 0182 8B040000 		.4byte	.LASF29
 1262 0186 06       		.byte	0x6
 1263 0187 1A       		.byte	0x1a
 1264 0188 B1000000 		.4byte	0xb1
 1265 018c 14       		.byte	0x14
 1266 018d 09       		.uleb128 0x9
 1267 018e 02030000 		.4byte	.LASF30
 1268 0192 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 28


 1269 0193 1B       		.byte	0x1b
 1270 0194 81000000 		.4byte	0x81
 1271 0198 18       		.byte	0x18
 1272 0199 00       		.byte	0
 1273 019a 03       		.uleb128 0x3
 1274 019b 5F040000 		.4byte	.LASF31
 1275 019f 06       		.byte	0x6
 1276 01a0 1C       		.byte	0x1c
 1277 01a1 3D010000 		.4byte	0x13d
 1278 01a5 0A       		.uleb128 0xa
 1279 01a6 10       		.byte	0x10
 1280 01a7 06       		.byte	0x6
 1281 01a8 1E       		.byte	0x1e
 1282 01a9 DE010000 		.4byte	0x1de
 1283 01ad 09       		.uleb128 0x9
 1284 01ae 8C020000 		.4byte	.LASF32
 1285 01b2 06       		.byte	0x6
 1286 01b3 1F       		.byte	0x1f
 1287 01b4 B1000000 		.4byte	0xb1
 1288 01b8 00       		.byte	0
 1289 01b9 09       		.uleb128 0x9
 1290 01ba 19040000 		.4byte	.LASF33
 1291 01be 06       		.byte	0x6
 1292 01bf 20       		.byte	0x20
 1293 01c0 B1000000 		.4byte	0xb1
 1294 01c4 04       		.byte	0x4
 1295 01c5 09       		.uleb128 0x9
 1296 01c6 C3050000 		.4byte	.LASF34
 1297 01ca 06       		.byte	0x6
 1298 01cb 21       		.byte	0x21
 1299 01cc B1000000 		.4byte	0xb1
 1300 01d0 08       		.byte	0x8
 1301 01d1 09       		.uleb128 0x9
 1302 01d2 A7020000 		.4byte	.LASF35
 1303 01d6 06       		.byte	0x6
 1304 01d7 22       		.byte	0x22
 1305 01d8 B1000000 		.4byte	0xb1
 1306 01dc 0C       		.byte	0xc
 1307 01dd 00       		.byte	0
 1308 01de 03       		.uleb128 0x3
 1309 01df C8030000 		.4byte	.LASF36
 1310 01e3 06       		.byte	0x6
 1311 01e4 23       		.byte	0x23
 1312 01e5 A5010000 		.4byte	0x1a5
 1313 01e9 0A       		.uleb128 0xa
 1314 01ea 2C       		.byte	0x2c
 1315 01eb 07       		.byte	0x7
 1316 01ec 14       		.byte	0x14
 1317 01ed 16020000 		.4byte	0x216
 1318 01f1 0B       		.uleb128 0xb
 1319 01f2 6B657900 		.ascii	"key\000"
 1320 01f6 07       		.byte	0x7
 1321 01f7 15       		.byte	0x15
 1322 01f8 16020000 		.4byte	0x216
 1323 01fc 00       		.byte	0
 1324 01fd 09       		.uleb128 0x9
 1325 01fe 82010000 		.4byte	.LASF37
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 29


 1326 0202 07       		.byte	0x7
 1327 0203 16       		.byte	0x16
 1328 0204 16020000 		.4byte	0x216
 1329 0208 14       		.byte	0x14
 1330 0209 09       		.uleb128 0x9
 1331 020a BE010000 		.4byte	.LASF38
 1332 020e 07       		.byte	0x7
 1333 020f 17       		.byte	0x17
 1334 0210 A5000000 		.4byte	0xa5
 1335 0214 28       		.byte	0x28
 1336 0215 00       		.byte	0
 1337 0216 06       		.uleb128 0x6
 1338 0217 BF000000 		.4byte	0xbf
 1339 021b 26020000 		.4byte	0x226
 1340 021f 07       		.uleb128 0x7
 1341 0220 CD000000 		.4byte	0xcd
 1342 0224 13       		.byte	0x13
 1343 0225 00       		.byte	0
 1344 0226 03       		.uleb128 0x3
 1345 0227 92030000 		.4byte	.LASF39
 1346 022b 07       		.byte	0x7
 1347 022c 19       		.byte	0x19
 1348 022d E9010000 		.4byte	0x1e9
 1349 0231 0A       		.uleb128 0xa
 1350 0232 3C       		.byte	0x3c
 1351 0233 08       		.byte	0x8
 1352 0234 37       		.byte	0x37
 1353 0235 5E020000 		.4byte	0x25e
 1354 0239 09       		.uleb128 0x9
 1355 023a 16000000 		.4byte	.LASF40
 1356 023e 08       		.byte	0x8
 1357 023f 38       		.byte	0x38
 1358 0240 16020000 		.4byte	0x216
 1359 0244 00       		.byte	0
 1360 0245 09       		.uleb128 0x9
 1361 0246 00000000 		.4byte	.LASF41
 1362 024a 08       		.byte	0x8
 1363 024b 39       		.byte	0x39
 1364 024c 16020000 		.4byte	0x216
 1365 0250 14       		.byte	0x14
 1366 0251 09       		.uleb128 0x9
 1367 0252 5A040000 		.4byte	.LASF42
 1368 0256 08       		.byte	0x8
 1369 0257 3A       		.byte	0x3a
 1370 0258 16020000 		.4byte	0x216
 1371 025c 28       		.byte	0x28
 1372 025d 00       		.byte	0
 1373 025e 03       		.uleb128 0x3
 1374 025f 0C050000 		.4byte	.LASF43
 1375 0263 08       		.byte	0x8
 1376 0264 3C       		.byte	0x3c
 1377 0265 31020000 		.4byte	0x231
 1378 0269 0A       		.uleb128 0xa
 1379 026a 20       		.byte	0x20
 1380 026b 08       		.byte	0x8
 1381 026c 3E       		.byte	0x3e
 1382 026d D2020000 		.4byte	0x2d2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 30


 1383 0271 09       		.uleb128 0x9
 1384 0272 9E030000 		.4byte	.LASF44
 1385 0276 08       		.byte	0x8
 1386 0277 3F       		.byte	0x3f
 1387 0278 68000000 		.4byte	0x68
 1388 027c 00       		.byte	0
 1389 027d 0B       		.uleb128 0xb
 1390 027e 62657200 		.ascii	"ber\000"
 1391 0282 08       		.byte	0x8
 1392 0283 40       		.byte	0x40
 1393 0284 68000000 		.4byte	0x68
 1394 0288 04       		.byte	0x4
 1395 0289 09       		.uleb128 0x9
 1396 028a B9010000 		.4byte	.LASF45
 1397 028e 08       		.byte	0x8
 1398 028f 41       		.byte	0x41
 1399 0290 68000000 		.4byte	0x68
 1400 0294 08       		.byte	0x8
 1401 0295 09       		.uleb128 0x9
 1402 0296 7D010000 		.4byte	.LASF46
 1403 029a 08       		.byte	0x8
 1404 029b 42       		.byte	0x42
 1405 029c 68000000 		.4byte	0x68
 1406 02a0 0C       		.byte	0xc
 1407 02a1 09       		.uleb128 0x9
 1408 02a2 CA040000 		.4byte	.LASF47
 1409 02a6 08       		.byte	0x8
 1410 02a7 43       		.byte	0x43
 1411 02a8 68000000 		.4byte	0x68
 1412 02ac 10       		.byte	0x10
 1413 02ad 09       		.uleb128 0x9
 1414 02ae C0040000 		.4byte	.LASF48
 1415 02b2 08       		.byte	0x8
 1416 02b3 44       		.byte	0x44
 1417 02b4 68000000 		.4byte	0x68
 1418 02b8 14       		.byte	0x14
 1419 02b9 09       		.uleb128 0x9
 1420 02ba FA030000 		.4byte	.LASF49
 1421 02be 08       		.byte	0x8
 1422 02bf 45       		.byte	0x45
 1423 02c0 68000000 		.4byte	0x68
 1424 02c4 18       		.byte	0x18
 1425 02c5 09       		.uleb128 0x9
 1426 02c6 3A040000 		.4byte	.LASF50
 1427 02ca 08       		.byte	0x8
 1428 02cb 46       		.byte	0x46
 1429 02cc 68000000 		.4byte	0x68
 1430 02d0 1C       		.byte	0x1c
 1431 02d1 00       		.byte	0
 1432 02d2 03       		.uleb128 0x3
 1433 02d3 71040000 		.4byte	.LASF51
 1434 02d7 08       		.byte	0x8
 1435 02d8 48       		.byte	0x48
 1436 02d9 69020000 		.4byte	0x269
 1437 02dd 0A       		.uleb128 0xa
 1438 02de 05       		.byte	0x5
 1439 02df 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 31


 1440 02e0 54       		.byte	0x54
 1441 02e1 22030000 		.4byte	0x322
 1442 02e5 09       		.uleb128 0x9
 1443 02e6 97050000 		.4byte	.LASF52
 1444 02ea 08       		.byte	0x8
 1445 02eb 56       		.byte	0x56
 1446 02ec 81000000 		.4byte	0x81
 1447 02f0 00       		.byte	0
 1448 02f1 09       		.uleb128 0x9
 1449 02f2 D3030000 		.4byte	.LASF53
 1450 02f6 08       		.byte	0x8
 1451 02f7 58       		.byte	0x58
 1452 02f8 22030000 		.4byte	0x322
 1453 02fc 01       		.byte	0x1
 1454 02fd 09       		.uleb128 0x9
 1455 02fe BC020000 		.4byte	.LASF54
 1456 0302 08       		.byte	0x8
 1457 0303 5A       		.byte	0x5a
 1458 0304 81000000 		.4byte	0x81
 1459 0308 02       		.byte	0x2
 1460 0309 09       		.uleb128 0x9
 1461 030a A4030000 		.4byte	.LASF55
 1462 030e 08       		.byte	0x8
 1463 030f 5C       		.byte	0x5c
 1464 0310 81000000 		.4byte	0x81
 1465 0314 03       		.byte	0x3
 1466 0315 09       		.uleb128 0x9
 1467 0316 00050000 		.4byte	.LASF56
 1468 031a 08       		.byte	0x8
 1469 031b 5F       		.byte	0x5f
 1470 031c 81000000 		.4byte	0x81
 1471 0320 04       		.byte	0x4
 1472 0321 00       		.byte	0
 1473 0322 02       		.uleb128 0x2
 1474 0323 01       		.byte	0x1
 1475 0324 02       		.byte	0x2
 1476 0325 A3040000 		.4byte	.LASF57
 1477 0329 03       		.uleb128 0x3
 1478 032a 1F030000 		.4byte	.LASF58
 1479 032e 08       		.byte	0x8
 1480 032f 61       		.byte	0x61
 1481 0330 DD020000 		.4byte	0x2dd
 1482 0334 0A       		.uleb128 0xa
 1483 0335 06       		.byte	0x6
 1484 0336 09       		.byte	0x9
 1485 0337 2E       		.byte	0x2e
 1486 0338 6D030000 		.4byte	0x36d
 1487 033c 09       		.uleb128 0x9
 1488 033d 87000000 		.4byte	.LASF59
 1489 0341 09       		.byte	0x9
 1490 0342 30       		.byte	0x30
 1491 0343 8D000000 		.4byte	0x8d
 1492 0347 00       		.byte	0
 1493 0348 09       		.uleb128 0x9
 1494 0349 3A000000 		.4byte	.LASF60
 1495 034d 09       		.byte	0x9
 1496 034e 31       		.byte	0x31
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 32


 1497 034f 99000000 		.4byte	0x99
 1498 0353 02       		.byte	0x2
 1499 0354 09       		.uleb128 0x9
 1500 0355 19050000 		.4byte	.LASF61
 1501 0359 09       		.byte	0x9
 1502 035a 32       		.byte	0x32
 1503 035b 81000000 		.4byte	0x81
 1504 035f 04       		.byte	0x4
 1505 0360 09       		.uleb128 0x9
 1506 0361 31050000 		.4byte	.LASF62
 1507 0365 09       		.byte	0x9
 1508 0366 33       		.byte	0x33
 1509 0367 81000000 		.4byte	0x81
 1510 036b 05       		.byte	0x5
 1511 036c 00       		.byte	0
 1512 036d 03       		.uleb128 0x3
 1513 036e B6020000 		.4byte	.LASF63
 1514 0372 09       		.byte	0x9
 1515 0373 36       		.byte	0x36
 1516 0374 78030000 		.4byte	0x378
 1517 0378 0C       		.uleb128 0xc
 1518 0379 34030000 		.4byte	0x334
 1519 037d 0A       		.uleb128 0xa
 1520 037e 1C       		.byte	0x1c
 1521 037f 09       		.byte	0x9
 1522 0380 39       		.byte	0x39
 1523 0381 9E030000 		.4byte	0x39e
 1524 0385 09       		.uleb128 0x9
 1525 0386 81020000 		.4byte	.LASF64
 1526 038a 09       		.byte	0x9
 1527 038b 3B       		.byte	0x3b
 1528 038c 9E030000 		.4byte	0x39e
 1529 0390 00       		.byte	0
 1530 0391 09       		.uleb128 0x9
 1531 0392 77030000 		.4byte	.LASF65
 1532 0396 09       		.byte	0x9
 1533 0397 3C       		.byte	0x3c
 1534 0398 D4000000 		.4byte	0xd4
 1535 039c 04       		.byte	0x4
 1536 039d 00       		.byte	0
 1537 039e 0D       		.uleb128 0xd
 1538 039f 04       		.byte	0x4
 1539 03a0 5E020000 		.4byte	0x25e
 1540 03a4 03       		.uleb128 0x3
 1541 03a5 DC030000 		.4byte	.LASF66
 1542 03a9 09       		.byte	0x9
 1543 03aa 3E       		.byte	0x3e
 1544 03ab 7D030000 		.4byte	0x37d
 1545 03af 0A       		.uleb128 0xa
 1546 03b0 68       		.byte	0x68
 1547 03b1 09       		.byte	0x9
 1548 03b2 44       		.byte	0x44
 1549 03b3 D0030000 		.4byte	0x3d0
 1550 03b7 09       		.uleb128 0x9
 1551 03b8 B6000000 		.4byte	.LASF67
 1552 03bc 09       		.byte	0x9
 1553 03bd 49       		.byte	0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 33


 1554 03be D0030000 		.4byte	0x3d0
 1555 03c2 00       		.byte	0
 1556 03c3 09       		.uleb128 0x9
 1557 03c4 6F050000 		.4byte	.LASF68
 1558 03c8 09       		.byte	0x9
 1559 03c9 4A       		.byte	0x4a
 1560 03ca 68000000 		.4byte	0x68
 1561 03ce 64       		.byte	0x64
 1562 03cf 00       		.byte	0
 1563 03d0 06       		.uleb128 0x6
 1564 03d1 BF000000 		.4byte	0xbf
 1565 03d5 E0030000 		.4byte	0x3e0
 1566 03d9 07       		.uleb128 0x7
 1567 03da CD000000 		.4byte	0xcd
 1568 03de 63       		.byte	0x63
 1569 03df 00       		.byte	0
 1570 03e0 03       		.uleb128 0x3
 1571 03e1 2B000000 		.4byte	.LASF69
 1572 03e5 09       		.byte	0x9
 1573 03e6 50       		.byte	0x50
 1574 03e7 AF030000 		.4byte	0x3af
 1575 03eb 0E       		.uleb128 0xe
 1576 03ec C8010000 		.4byte	.LASF74
 1577 03f0 01       		.byte	0x1
 1578 03f1 06       		.byte	0x6
 1579 03f2 9A010000 		.4byte	0x19a
 1580 03f6 00000000 		.4byte	.LFB64
 1581 03fa 60010000 		.4byte	.LFE64-.LFB64
 1582 03fe 01       		.uleb128 0x1
 1583 03ff 9C       		.byte	0x9c
 1584 0400 75040000 		.4byte	0x475
 1585 0404 0F       		.uleb128 0xf
 1586 0405 79020000 		.4byte	.LASF70
 1587 0409 01       		.byte	0x1
 1588 040a 0B       		.byte	0xb
 1589 040b 9A010000 		.4byte	0x19a
 1590 040f 02       		.uleb128 0x2
 1591 0410 91       		.byte	0x91
 1592 0411 4C       		.sleb128 -52
 1593 0412 0F       		.uleb128 0xf
 1594 0413 74010000 		.4byte	.LASF71
 1595 0417 01       		.byte	0x1
 1596 0418 1D       		.byte	0x1d
 1597 0419 75040000 		.4byte	0x475
 1598 041d 03       		.uleb128 0x3
 1599 041e 91       		.byte	0x91
 1600 041f B47F     		.sleb128 -76
 1601 0421 0F       		.uleb128 0xf
 1602 0422 50000000 		.4byte	.LASF72
 1603 0426 01       		.byte	0x1
 1604 0427 3E       		.byte	0x3e
 1605 0428 B1000000 		.4byte	0xb1
 1606 042c 02       		.uleb128 0x2
 1607 042d 91       		.byte	0x91
 1608 042e 68       		.sleb128 -24
 1609 042f 10       		.uleb128 0x10
 1610 0430 34000000 		.4byte	.LBB2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 34


 1611 0434 7A000000 		.4byte	.LBE2-.LBB2
 1612 0438 11       		.uleb128 0x11
 1613 0439 6300     		.ascii	"c\000"
 1614 043b 01       		.byte	0x1
 1615 043c 1F       		.byte	0x1f
 1616 043d 81000000 		.4byte	0x81
 1617 0441 02       		.uleb128 0x2
 1618 0442 91       		.byte	0x91
 1619 0443 6F       		.sleb128 -17
 1620 0444 10       		.uleb128 0x10
 1621 0445 3C000000 		.4byte	.LBB3
 1622 0449 60000000 		.4byte	.LBE3-.LBB3
 1623 044d 0F       		.uleb128 0xf
 1624 044e D4050000 		.4byte	.LASF73
 1625 0452 01       		.byte	0x1
 1626 0453 22       		.byte	0x22
 1627 0454 85040000 		.4byte	0x485
 1628 0458 03       		.uleb128 0x3
 1629 0459 91       		.byte	0x91
 1630 045a 887F     		.sleb128 -120
 1631 045c 10       		.uleb128 0x10
 1632 045d 46000000 		.4byte	.LBB4
 1633 0461 30000000 		.4byte	.LBE4-.LBB4
 1634 0465 11       		.uleb128 0x11
 1635 0466 6900     		.ascii	"i\000"
 1636 0468 01       		.byte	0x1
 1637 0469 26       		.byte	0x26
 1638 046a 8D000000 		.4byte	0x8d
 1639 046e 02       		.uleb128 0x2
 1640 046f 91       		.byte	0x91
 1641 0470 6C       		.sleb128 -20
 1642 0471 00       		.byte	0
 1643 0472 00       		.byte	0
 1644 0473 00       		.byte	0
 1645 0474 00       		.byte	0
 1646 0475 06       		.uleb128 0x6
 1647 0476 B1000000 		.4byte	0xb1
 1648 047a 85040000 		.4byte	0x485
 1649 047e 07       		.uleb128 0x7
 1650 047f CD000000 		.4byte	0xcd
 1651 0483 05       		.byte	0x5
 1652 0484 00       		.byte	0
 1653 0485 06       		.uleb128 0x6
 1654 0486 A5000000 		.4byte	0xa5
 1655 048a 95040000 		.4byte	0x495
 1656 048e 07       		.uleb128 0x7
 1657 048f CD000000 		.4byte	0xcd
 1658 0493 0A       		.byte	0xa
 1659 0494 00       		.byte	0
 1660 0495 0E       		.uleb128 0xe
 1661 0496 67000000 		.4byte	.LASF75
 1662 049a 01       		.byte	0x1
 1663 049b 54       		.byte	0x54
 1664 049c DE010000 		.4byte	0x1de
 1665 04a0 00000000 		.4byte	.LFB65
 1666 04a4 98010000 		.4byte	.LFE65-.LFB65
 1667 04a8 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 35


 1668 04a9 9C       		.byte	0x9c
 1669 04aa 0A050000 		.4byte	0x50a
 1670 04ae 0F       		.uleb128 0xf
 1671 04af B0010000 		.4byte	.LASF76
 1672 04b3 01       		.byte	0x1
 1673 04b4 56       		.byte	0x56
 1674 04b5 DE010000 		.4byte	0x1de
 1675 04b9 02       		.uleb128 0x2
 1676 04ba 91       		.byte	0x91
 1677 04bb 5C       		.sleb128 -36
 1678 04bc 0F       		.uleb128 0xf
 1679 04bd 74010000 		.4byte	.LASF71
 1680 04c1 01       		.byte	0x1
 1681 04c2 57       		.byte	0x57
 1682 04c3 75040000 		.4byte	0x475
 1683 04c7 02       		.uleb128 0x2
 1684 04c8 91       		.byte	0x91
 1685 04c9 44       		.sleb128 -60
 1686 04ca 0F       		.uleb128 0xf
 1687 04cb D4050000 		.4byte	.LASF73
 1688 04cf 01       		.byte	0x1
 1689 04d0 58       		.byte	0x58
 1690 04d1 85040000 		.4byte	0x485
 1691 04d5 03       		.uleb128 0x3
 1692 04d6 91       		.byte	0x91
 1693 04d7 987F     		.sleb128 -104
 1694 04d9 12       		.uleb128 0x12
 1695 04da 1A000000 		.4byte	.LBB5
 1696 04de 30000000 		.4byte	.LBE5-.LBB5
 1697 04e2 F3040000 		.4byte	0x4f3
 1698 04e6 11       		.uleb128 0x11
 1699 04e7 6900     		.ascii	"i\000"
 1700 04e9 01       		.byte	0x1
 1701 04ea 62       		.byte	0x62
 1702 04eb 8D000000 		.4byte	0x8d
 1703 04ef 02       		.uleb128 0x2
 1704 04f0 91       		.byte	0x91
 1705 04f1 6E       		.sleb128 -18
 1706 04f2 00       		.byte	0
 1707 04f3 10       		.uleb128 0x10
 1708 04f4 8E000000 		.4byte	.LBB6
 1709 04f8 30000000 		.4byte	.LBE6-.LBB6
 1710 04fc 11       		.uleb128 0x11
 1711 04fd 6900     		.ascii	"i\000"
 1712 04ff 01       		.byte	0x1
 1713 0500 6F       		.byte	0x6f
 1714 0501 8D000000 		.4byte	0x8d
 1715 0505 02       		.uleb128 0x2
 1716 0506 91       		.byte	0x91
 1717 0507 6C       		.sleb128 -20
 1718 0508 00       		.byte	0
 1719 0509 00       		.byte	0
 1720 050a 13       		.uleb128 0x13
 1721 050b 77050000 		.4byte	.LASF79
 1722 050f 01       		.byte	0x1
 1723 0510 8A       		.byte	0x8a
 1724 0511 DE010000 		.4byte	0x1de
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 36


 1725 0515 00000000 		.4byte	.LFB66
 1726 0519 C4000000 		.4byte	.LFE66-.LFB66
 1727 051d 01       		.uleb128 0x1
 1728 051e 9C       		.byte	0x9c
 1729 051f 40050000 		.4byte	0x540
 1730 0523 14       		.uleb128 0x14
 1731 0524 79020000 		.4byte	.LASF70
 1732 0528 01       		.byte	0x1
 1733 0529 8A       		.byte	0x8a
 1734 052a 9A010000 		.4byte	0x19a
 1735 052e 02       		.uleb128 0x2
 1736 052f 91       		.byte	0x91
 1737 0530 74       		.sleb128 -12
 1738 0531 0F       		.uleb128 0xf
 1739 0532 B0010000 		.4byte	.LASF76
 1740 0536 01       		.byte	0x1
 1741 0537 8C       		.byte	0x8c
 1742 0538 DE010000 		.4byte	0x1de
 1743 053c 02       		.uleb128 0x2
 1744 053d 91       		.byte	0x91
 1745 053e 50       		.sleb128 -48
 1746 053f 00       		.byte	0
 1747 0540 15       		.uleb128 0x15
 1748 0541 A0020000 		.4byte	.LASF77
 1749 0545 01       		.byte	0x1
 1750 0546 9C       		.byte	0x9c
 1751 0547 00000000 		.4byte	.LFB67
 1752 054b 74000000 		.4byte	.LFE67-.LFB67
 1753 054f 01       		.uleb128 0x1
 1754 0550 9C       		.byte	0x9c
 1755 0551 86050000 		.4byte	0x586
 1756 0555 16       		.uleb128 0x16
 1757 0556 6100     		.ascii	"a\000"
 1758 0558 01       		.byte	0x1
 1759 0559 9C       		.byte	0x9c
 1760 055a 86050000 		.4byte	0x586
 1761 055e 02       		.uleb128 0x2
 1762 055f 91       		.byte	0x91
 1763 0560 6C       		.sleb128 -20
 1764 0561 16       		.uleb128 0x16
 1765 0562 6E00     		.ascii	"n\000"
 1766 0564 01       		.byte	0x1
 1767 0565 9C       		.byte	0x9c
 1768 0566 A5000000 		.4byte	0xa5
 1769 056a 02       		.uleb128 0x2
 1770 056b 91       		.byte	0x91
 1771 056c 68       		.sleb128 -24
 1772 056d 11       		.uleb128 0x11
 1773 056e 6900     		.ascii	"i\000"
 1774 0570 01       		.byte	0x1
 1775 0571 9D       		.byte	0x9d
 1776 0572 A5000000 		.4byte	0xa5
 1777 0576 02       		.uleb128 0x2
 1778 0577 91       		.byte	0x91
 1779 0578 74       		.sleb128 -12
 1780 0579 11       		.uleb128 0x11
 1781 057a 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 37


 1782 057c 01       		.byte	0x1
 1783 057d 9D       		.byte	0x9d
 1784 057e A5000000 		.4byte	0xa5
 1785 0582 02       		.uleb128 0x2
 1786 0583 91       		.byte	0x91
 1787 0584 70       		.sleb128 -16
 1788 0585 00       		.byte	0
 1789 0586 0D       		.uleb128 0xd
 1790 0587 04       		.byte	0x4
 1791 0588 A5000000 		.4byte	0xa5
 1792 058c 17       		.uleb128 0x17
 1793 058d 4C010000 		.4byte	.LASF78
 1794 0591 01       		.byte	0x1
 1795 0592 A8       		.byte	0xa8
 1796 0593 00000000 		.4byte	.LFB68
 1797 0597 28000000 		.4byte	.LFE68-.LFB68
 1798 059b 01       		.uleb128 0x1
 1799 059c 9C       		.byte	0x9c
 1800 059d C6050000 		.4byte	0x5c6
 1801 05a1 16       		.uleb128 0x16
 1802 05a2 7000     		.ascii	"p\000"
 1803 05a4 01       		.byte	0x1
 1804 05a5 A8       		.byte	0xa8
 1805 05a6 86050000 		.4byte	0x586
 1806 05aa 02       		.uleb128 0x2
 1807 05ab 91       		.byte	0x91
 1808 05ac 6C       		.sleb128 -20
 1809 05ad 16       		.uleb128 0x16
 1810 05ae 7100     		.ascii	"q\000"
 1811 05b0 01       		.byte	0x1
 1812 05b1 A8       		.byte	0xa8
 1813 05b2 86050000 		.4byte	0x586
 1814 05b6 02       		.uleb128 0x2
 1815 05b7 91       		.byte	0x91
 1816 05b8 68       		.sleb128 -24
 1817 05b9 11       		.uleb128 0x11
 1818 05ba 7400     		.ascii	"t\000"
 1819 05bc 01       		.byte	0x1
 1820 05bd A9       		.byte	0xa9
 1821 05be A5000000 		.4byte	0xa5
 1822 05c2 02       		.uleb128 0x2
 1823 05c3 91       		.byte	0x91
 1824 05c4 74       		.sleb128 -12
 1825 05c5 00       		.byte	0
 1826 05c6 13       		.uleb128 0x13
 1827 05c7 36030000 		.4byte	.LASF80
 1828 05cb 01       		.byte	0x1
 1829 05cc B1       		.byte	0xb1
 1830 05cd A5000000 		.4byte	0xa5
 1831 05d1 00000000 		.4byte	.LFB69
 1832 05d5 84000000 		.4byte	.LFE69-.LFB69
 1833 05d9 01       		.uleb128 0x1
 1834 05da 9C       		.byte	0x9c
 1835 05db 08060000 		.4byte	0x608
 1836 05df 14       		.uleb128 0x14
 1837 05e0 FA040000 		.4byte	.LASF81
 1838 05e4 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 38


 1839 05e5 B1       		.byte	0xb1
 1840 05e6 86050000 		.4byte	0x586
 1841 05ea 02       		.uleb128 0x2
 1842 05eb 91       		.byte	0x91
 1843 05ec 64       		.sleb128 -28
 1844 05ed 16       		.uleb128 0x16
 1845 05ee 6E00     		.ascii	"n\000"
 1846 05f0 01       		.byte	0x1
 1847 05f1 B1       		.byte	0xb1
 1848 05f2 A5000000 		.4byte	0xa5
 1849 05f6 02       		.uleb128 0x2
 1850 05f7 91       		.byte	0x91
 1851 05f8 60       		.sleb128 -32
 1852 05f9 0F       		.uleb128 0xf
 1853 05fa 80000000 		.4byte	.LASF82
 1854 05fe 01       		.byte	0x1
 1855 05ff B3       		.byte	0xb3
 1856 0600 A5000000 		.4byte	0xa5
 1857 0604 02       		.uleb128 0x2
 1858 0605 91       		.byte	0x91
 1859 0606 6C       		.sleb128 -20
 1860 0607 00       		.byte	0
 1861 0608 0E       		.uleb128 0xe
 1862 0609 FD010000 		.4byte	.LASF83
 1863 060d 01       		.byte	0x1
 1864 060e C3       		.byte	0xc3
 1865 060f 32010000 		.4byte	0x132
 1866 0613 00000000 		.4byte	.LFB70
 1867 0617 BC000000 		.4byte	.LFE70-.LFB70
 1868 061b 01       		.uleb128 0x1
 1869 061c 9C       		.byte	0x9c
 1870 061d 40060000 		.4byte	0x640
 1871 0621 0F       		.uleb128 0xf
 1872 0622 C5040000 		.4byte	.LASF84
 1873 0626 01       		.byte	0x1
 1874 0627 C5       		.byte	0xc5
 1875 0628 32010000 		.4byte	0x132
 1876 062c 03       		.uleb128 0x3
 1877 062d 91       		.byte	0x91
 1878 062e E47C     		.sleb128 -412
 1879 0630 0F       		.uleb128 0xf
 1880 0631 79020000 		.4byte	.LASF70
 1881 0635 01       		.byte	0x1
 1882 0636 C9       		.byte	0xc9
 1883 0637 9A010000 		.4byte	0x19a
 1884 063b 03       		.uleb128 0x3
 1885 063c 91       		.byte	0x91
 1886 063d C87C     		.sleb128 -440
 1887 063f 00       		.byte	0
 1888 0640 0E       		.uleb128 0xe
 1889 0641 ED020000 		.4byte	.LASF85
 1890 0645 01       		.byte	0x1
 1891 0646 D8       		.byte	0xd8
 1892 0647 32010000 		.4byte	0x132
 1893 064b 00000000 		.4byte	.LFB71
 1894 064f 04010000 		.4byte	.LFE71-.LFB71
 1895 0653 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 39


 1896 0654 9C       		.byte	0x9c
 1897 0655 78060000 		.4byte	0x678
 1898 0659 0F       		.uleb128 0xf
 1899 065a C5040000 		.4byte	.LASF84
 1900 065e 01       		.byte	0x1
 1901 065f DA       		.byte	0xda
 1902 0660 32010000 		.4byte	0x132
 1903 0664 03       		.uleb128 0x3
 1904 0665 91       		.byte	0x91
 1905 0666 E47C     		.sleb128 -412
 1906 0668 0F       		.uleb128 0xf
 1907 0669 B0010000 		.4byte	.LASF76
 1908 066d 01       		.byte	0x1
 1909 066e DE       		.byte	0xde
 1910 066f DE010000 		.4byte	0x1de
 1911 0673 03       		.uleb128 0x3
 1912 0674 91       		.byte	0x91
 1913 0675 D47C     		.sleb128 -428
 1914 0677 00       		.byte	0
 1915 0678 18       		.uleb128 0x18
 1916 0679 4D040000 		.4byte	.LASF86
 1917 067d 0A       		.byte	0xa
 1918 067e 1207     		.2byte	0x712
 1919 0680 84060000 		.4byte	0x684
 1920 0684 0C       		.uleb128 0xc
 1921 0685 76000000 		.4byte	0x76
 1922 0689 19       		.uleb128 0x19
 1923 068a 57000000 		.4byte	.LASF87
 1924 068e 07       		.byte	0x7
 1925 068f 11       		.byte	0x11
 1926 0690 22030000 		.4byte	0x322
 1927 0694 05       		.uleb128 0x5
 1928 0695 03       		.byte	0x3
 1929 0696 00000000 		.4byte	buffer_overflow
 1930 069a 19       		.uleb128 0x19
 1931 069b 98010000 		.4byte	.LASF88
 1932 069f 07       		.byte	0x7
 1933 06a0 22       		.byte	0x22
 1934 06a1 8D000000 		.4byte	0x8d
 1935 06a5 05       		.uleb128 0x5
 1936 06a6 03       		.byte	0x3
 1937 06a7 00000000 		.4byte	dataPointsInStack
 1938 06ab 19       		.uleb128 0x19
 1939 06ac DE010000 		.4byte	.LASF89
 1940 06b0 07       		.byte	0x7
 1941 06b1 23       		.byte	0x23
 1942 06b2 8D000000 		.4byte	0x8d
 1943 06b6 05       		.uleb128 0x5
 1944 06b7 03       		.byte	0x3
 1945 06b8 00000000 		.4byte	dataPointsInStackDesired
 1946 06bc 06       		.uleb128 0x6
 1947 06bd 26020000 		.4byte	0x226
 1948 06c1 CC060000 		.4byte	0x6cc
 1949 06c5 07       		.uleb128 0x7
 1950 06c6 CD000000 		.4byte	0xcd
 1951 06ca 95       		.byte	0x95
 1952 06cb 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 40


 1953 06cc 19       		.uleb128 0x19
 1954 06cd 53010000 		.4byte	.LASF90
 1955 06d1 07       		.byte	0x7
 1956 06d2 24       		.byte	0x24
 1957 06d3 BC060000 		.4byte	0x6bc
 1958 06d7 05       		.uleb128 0x5
 1959 06d8 03       		.byte	0x3
 1960 06d9 00000000 		.4byte	data
 1961 06dd 19       		.uleb128 0x19
 1962 06de 7F040000 		.4byte	.LASF91
 1963 06e2 08       		.byte	0x8
 1964 06e3 21       		.byte	0x21
 1965 06e4 81000000 		.4byte	0x81
 1966 06e8 05       		.uleb128 0x5
 1967 06e9 03       		.byte	0x3
 1968 06ea 00000000 		.4byte	modem_state
 1969 06ee 19       		.uleb128 0x19
 1970 06ef 08030000 		.4byte	.LASF92
 1971 06f3 08       		.byte	0x8
 1972 06f4 64       		.byte	0x64
 1973 06f5 A5000000 		.4byte	0xa5
 1974 06f9 05       		.uleb128 0x5
 1975 06fa 03       		.byte	0x3
 1976 06fb 00000000 		.4byte	modem_start_time_stamp
 1977 06ff 19       		.uleb128 0x19
 1978 0700 81020000 		.4byte	.LASF64
 1979 0704 08       		.byte	0x8
 1980 0705 65       		.byte	0x65
 1981 0706 5E020000 		.4byte	0x25e
 1982 070a 05       		.uleb128 0x5
 1983 070b 03       		.byte	0x3
 1984 070c 00000000 		.4byte	modem_info
 1985 0710 19       		.uleb128 0x19
 1986 0711 AE030000 		.4byte	.LASF93
 1987 0715 08       		.byte	0x8
 1988 0716 66       		.byte	0x66
 1989 0717 D2020000 		.4byte	0x2d2
 1990 071b 05       		.uleb128 0x5
 1991 071c 03       		.byte	0x3
 1992 071d 00000000 		.4byte	modem_stats
 1993 0721 19       		.uleb128 0x19
 1994 0722 5A050000 		.4byte	.LASF94
 1995 0726 08       		.byte	0x8
 1996 0727 67       		.byte	0x67
 1997 0728 29030000 		.4byte	0x329
 1998 072c 05       		.uleb128 0x5
 1999 072d 03       		.byte	0x3
 2000 072e 00000000 		.4byte	updatable_parameters
 2001 0732 06       		.uleb128 0x6
 2002 0733 BF000000 		.4byte	0xbf
 2003 0737 43070000 		.4byte	0x743
 2004 073b 1A       		.uleb128 0x1a
 2005 073c CD000000 		.4byte	0xcd
 2006 0740 0F27     		.2byte	0x270f
 2007 0742 00       		.byte	0
 2008 0743 19       		.uleb128 0x19
 2009 0744 A0000000 		.4byte	.LASF95
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 41


 2010 0748 09       		.byte	0x9
 2011 0749 18       		.byte	0x18
 2012 074a 32070000 		.4byte	0x732
 2013 074e 05       		.uleb128 0x5
 2014 074f 03       		.byte	0x3
 2015 0750 00000000 		.4byte	http_request
 2016 0754 19       		.uleb128 0x19
 2017 0755 8D050000 		.4byte	.LASF96
 2018 0759 09       		.byte	0x9
 2019 075a 19       		.byte	0x19
 2020 075b 32070000 		.4byte	0x732
 2021 075f 05       		.uleb128 0x5
 2022 0760 03       		.byte	0x3
 2023 0761 00000000 		.4byte	http_body
 2024 0765 06       		.uleb128 0x6
 2025 0766 BF000000 		.4byte	0xbf
 2026 076a 75070000 		.4byte	0x775
 2027 076e 07       		.uleb128 0x7
 2028 076f CD000000 		.4byte	0xcd
 2029 0773 C7       		.byte	0xc7
 2030 0774 00       		.byte	0
 2031 0775 19       		.uleb128 0x19
 2032 0776 D6040000 		.4byte	.LASF97
 2033 077a 09       		.byte	0x9
 2034 077b 1A       		.byte	0x1a
 2035 077c 65070000 		.4byte	0x765
 2036 0780 05       		.uleb128 0x5
 2037 0781 03       		.byte	0x3
 2038 0782 00000000 		.4byte	http_route
 2039 0786 19       		.uleb128 0x19
 2040 0787 2E040000 		.4byte	.LASF98
 2041 078b 09       		.byte	0x9
 2042 078c 41       		.byte	0x41
 2043 078d A4030000 		.4byte	0x3a4
 2044 0791 05       		.uleb128 0x5
 2045 0792 03       		.byte	0x3
 2046 0793 00000000 		.4byte	system_info
 2047 0797 19       		.uleb128 0x19
 2048 0798 67030000 		.4byte	.LASF99
 2049 079c 09       		.byte	0x9
 2050 079d 53       		.byte	0x53
 2051 079e E0030000 		.4byte	0x3e0
 2052 07a2 05       		.uleb128 0x5
 2053 07a3 03       		.byte	0x3
 2054 07a4 00000000 		.4byte	system_settings
 2055 07a8 19       		.uleb128 0x19
 2056 07a9 09000000 		.4byte	.LASF100
 2057 07ad 09       		.byte	0x9
 2058 07ae 6F       		.byte	0x6f
 2059 07af 6D030000 		.4byte	0x36d
 2060 07b3 05       		.uleb128 0x5
 2061 07b4 03       		.byte	0x3
 2062 07b5 00000000 		.4byte	alarmMeasure
 2063 07b9 19       		.uleb128 0x19
 2064 07ba BA030000 		.4byte	.LASF101
 2065 07be 09       		.byte	0x9
 2066 07bf 70       		.byte	0x70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 42


 2067 07c0 81000000 		.4byte	0x81
 2068 07c4 05       		.uleb128 0x5
 2069 07c5 03       		.byte	0x3
 2070 07c6 00000000 		.4byte	timeToMeasure
 2071 07ca 19       		.uleb128 0x19
 2072 07cb C9020000 		.4byte	.LASF102
 2073 07cf 09       		.byte	0x9
 2074 07d0 71       		.byte	0x71
 2075 07d1 6D030000 		.4byte	0x36d
 2076 07d5 05       		.uleb128 0x5
 2077 07d6 03       		.byte	0x3
 2078 07d7 00000000 		.4byte	alarmSync
 2079 07db 19       		.uleb128 0x19
 2080 07dc B8050000 		.4byte	.LASF103
 2081 07e0 09       		.byte	0x9
 2082 07e1 72       		.byte	0x72
 2083 07e2 81000000 		.4byte	0x81
 2084 07e6 05       		.uleb128 0x5
 2085 07e7 03       		.byte	0x3
 2086 07e8 00000000 		.4byte	timeToSync
 2087 07ec 19       		.uleb128 0x19
 2088 07ed A9040000 		.4byte	.LASF104
 2089 07f1 09       		.byte	0x9
 2090 07f2 73       		.byte	0x73
 2091 07f3 81000000 		.4byte	0x81
 2092 07f7 05       		.uleb128 0x5
 2093 07f8 03       		.byte	0x3
 2094 07f9 00000000 		.4byte	timeToSycnRemoteParams
 2095 07fd 1B       		.uleb128 0x1b
 2096 07fe 68657900 		.ascii	"hey\000"
 2097 0802 09       		.byte	0x9
 2098 0803 74       		.byte	0x74
 2099 0804 81000000 		.4byte	0x81
 2100 0808 05       		.uleb128 0x5
 2101 0809 03       		.byte	0x3
 2102 080a 00000000 		.4byte	hey
 2103 080e 00       		.byte	0
 2104              		.section	.debug_abbrev,"",%progbits
 2105              	.Ldebug_abbrev0:
 2106 0000 01       		.uleb128 0x1
 2107 0001 11       		.uleb128 0x11
 2108 0002 01       		.byte	0x1
 2109 0003 25       		.uleb128 0x25
 2110 0004 0E       		.uleb128 0xe
 2111 0005 13       		.uleb128 0x13
 2112 0006 0B       		.uleb128 0xb
 2113 0007 03       		.uleb128 0x3
 2114 0008 0E       		.uleb128 0xe
 2115 0009 1B       		.uleb128 0x1b
 2116 000a 0E       		.uleb128 0xe
 2117 000b 55       		.uleb128 0x55
 2118 000c 17       		.uleb128 0x17
 2119 000d 11       		.uleb128 0x11
 2120 000e 01       		.uleb128 0x1
 2121 000f 10       		.uleb128 0x10
 2122 0010 17       		.uleb128 0x17
 2123 0011 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 43


 2124 0012 00       		.byte	0
 2125 0013 02       		.uleb128 0x2
 2126 0014 24       		.uleb128 0x24
 2127 0015 00       		.byte	0
 2128 0016 0B       		.uleb128 0xb
 2129 0017 0B       		.uleb128 0xb
 2130 0018 3E       		.uleb128 0x3e
 2131 0019 0B       		.uleb128 0xb
 2132 001a 03       		.uleb128 0x3
 2133 001b 0E       		.uleb128 0xe
 2134 001c 00       		.byte	0
 2135 001d 00       		.byte	0
 2136 001e 03       		.uleb128 0x3
 2137 001f 16       		.uleb128 0x16
 2138 0020 00       		.byte	0
 2139 0021 03       		.uleb128 0x3
 2140 0022 0E       		.uleb128 0xe
 2141 0023 3A       		.uleb128 0x3a
 2142 0024 0B       		.uleb128 0xb
 2143 0025 3B       		.uleb128 0x3b
 2144 0026 0B       		.uleb128 0xb
 2145 0027 49       		.uleb128 0x49
 2146 0028 13       		.uleb128 0x13
 2147 0029 00       		.byte	0
 2148 002a 00       		.byte	0
 2149 002b 04       		.uleb128 0x4
 2150 002c 24       		.uleb128 0x24
 2151 002d 00       		.byte	0
 2152 002e 0B       		.uleb128 0xb
 2153 002f 0B       		.uleb128 0xb
 2154 0030 3E       		.uleb128 0x3e
 2155 0031 0B       		.uleb128 0xb
 2156 0032 03       		.uleb128 0x3
 2157 0033 08       		.uleb128 0x8
 2158 0034 00       		.byte	0
 2159 0035 00       		.byte	0
 2160 0036 05       		.uleb128 0x5
 2161 0037 16       		.uleb128 0x16
 2162 0038 00       		.byte	0
 2163 0039 03       		.uleb128 0x3
 2164 003a 0E       		.uleb128 0xe
 2165 003b 3A       		.uleb128 0x3a
 2166 003c 0B       		.uleb128 0xb
 2167 003d 3B       		.uleb128 0x3b
 2168 003e 05       		.uleb128 0x5
 2169 003f 49       		.uleb128 0x49
 2170 0040 13       		.uleb128 0x13
 2171 0041 00       		.byte	0
 2172 0042 00       		.byte	0
 2173 0043 06       		.uleb128 0x6
 2174 0044 01       		.uleb128 0x1
 2175 0045 01       		.byte	0x1
 2176 0046 49       		.uleb128 0x49
 2177 0047 13       		.uleb128 0x13
 2178 0048 01       		.uleb128 0x1
 2179 0049 13       		.uleb128 0x13
 2180 004a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 44


 2181 004b 00       		.byte	0
 2182 004c 07       		.uleb128 0x7
 2183 004d 21       		.uleb128 0x21
 2184 004e 00       		.byte	0
 2185 004f 49       		.uleb128 0x49
 2186 0050 13       		.uleb128 0x13
 2187 0051 2F       		.uleb128 0x2f
 2188 0052 0B       		.uleb128 0xb
 2189 0053 00       		.byte	0
 2190 0054 00       		.byte	0
 2191 0055 08       		.uleb128 0x8
 2192 0056 13       		.uleb128 0x13
 2193 0057 01       		.byte	0x1
 2194 0058 0B       		.uleb128 0xb
 2195 0059 05       		.uleb128 0x5
 2196 005a 3A       		.uleb128 0x3a
 2197 005b 0B       		.uleb128 0xb
 2198 005c 3B       		.uleb128 0x3b
 2199 005d 0B       		.uleb128 0xb
 2200 005e 01       		.uleb128 0x1
 2201 005f 13       		.uleb128 0x13
 2202 0060 00       		.byte	0
 2203 0061 00       		.byte	0
 2204 0062 09       		.uleb128 0x9
 2205 0063 0D       		.uleb128 0xd
 2206 0064 00       		.byte	0
 2207 0065 03       		.uleb128 0x3
 2208 0066 0E       		.uleb128 0xe
 2209 0067 3A       		.uleb128 0x3a
 2210 0068 0B       		.uleb128 0xb
 2211 0069 3B       		.uleb128 0x3b
 2212 006a 0B       		.uleb128 0xb
 2213 006b 49       		.uleb128 0x49
 2214 006c 13       		.uleb128 0x13
 2215 006d 38       		.uleb128 0x38
 2216 006e 0B       		.uleb128 0xb
 2217 006f 00       		.byte	0
 2218 0070 00       		.byte	0
 2219 0071 0A       		.uleb128 0xa
 2220 0072 13       		.uleb128 0x13
 2221 0073 01       		.byte	0x1
 2222 0074 0B       		.uleb128 0xb
 2223 0075 0B       		.uleb128 0xb
 2224 0076 3A       		.uleb128 0x3a
 2225 0077 0B       		.uleb128 0xb
 2226 0078 3B       		.uleb128 0x3b
 2227 0079 0B       		.uleb128 0xb
 2228 007a 01       		.uleb128 0x1
 2229 007b 13       		.uleb128 0x13
 2230 007c 00       		.byte	0
 2231 007d 00       		.byte	0
 2232 007e 0B       		.uleb128 0xb
 2233 007f 0D       		.uleb128 0xd
 2234 0080 00       		.byte	0
 2235 0081 03       		.uleb128 0x3
 2236 0082 08       		.uleb128 0x8
 2237 0083 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 45


 2238 0084 0B       		.uleb128 0xb
 2239 0085 3B       		.uleb128 0x3b
 2240 0086 0B       		.uleb128 0xb
 2241 0087 49       		.uleb128 0x49
 2242 0088 13       		.uleb128 0x13
 2243 0089 38       		.uleb128 0x38
 2244 008a 0B       		.uleb128 0xb
 2245 008b 00       		.byte	0
 2246 008c 00       		.byte	0
 2247 008d 0C       		.uleb128 0xc
 2248 008e 35       		.uleb128 0x35
 2249 008f 00       		.byte	0
 2250 0090 49       		.uleb128 0x49
 2251 0091 13       		.uleb128 0x13
 2252 0092 00       		.byte	0
 2253 0093 00       		.byte	0
 2254 0094 0D       		.uleb128 0xd
 2255 0095 0F       		.uleb128 0xf
 2256 0096 00       		.byte	0
 2257 0097 0B       		.uleb128 0xb
 2258 0098 0B       		.uleb128 0xb
 2259 0099 49       		.uleb128 0x49
 2260 009a 13       		.uleb128 0x13
 2261 009b 00       		.byte	0
 2262 009c 00       		.byte	0
 2263 009d 0E       		.uleb128 0xe
 2264 009e 2E       		.uleb128 0x2e
 2265 009f 01       		.byte	0x1
 2266 00a0 3F       		.uleb128 0x3f
 2267 00a1 19       		.uleb128 0x19
 2268 00a2 03       		.uleb128 0x3
 2269 00a3 0E       		.uleb128 0xe
 2270 00a4 3A       		.uleb128 0x3a
 2271 00a5 0B       		.uleb128 0xb
 2272 00a6 3B       		.uleb128 0x3b
 2273 00a7 0B       		.uleb128 0xb
 2274 00a8 49       		.uleb128 0x49
 2275 00a9 13       		.uleb128 0x13
 2276 00aa 11       		.uleb128 0x11
 2277 00ab 01       		.uleb128 0x1
 2278 00ac 12       		.uleb128 0x12
 2279 00ad 06       		.uleb128 0x6
 2280 00ae 40       		.uleb128 0x40
 2281 00af 18       		.uleb128 0x18
 2282 00b0 9642     		.uleb128 0x2116
 2283 00b2 19       		.uleb128 0x19
 2284 00b3 01       		.uleb128 0x1
 2285 00b4 13       		.uleb128 0x13
 2286 00b5 00       		.byte	0
 2287 00b6 00       		.byte	0
 2288 00b7 0F       		.uleb128 0xf
 2289 00b8 34       		.uleb128 0x34
 2290 00b9 00       		.byte	0
 2291 00ba 03       		.uleb128 0x3
 2292 00bb 0E       		.uleb128 0xe
 2293 00bc 3A       		.uleb128 0x3a
 2294 00bd 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 46


 2295 00be 3B       		.uleb128 0x3b
 2296 00bf 0B       		.uleb128 0xb
 2297 00c0 49       		.uleb128 0x49
 2298 00c1 13       		.uleb128 0x13
 2299 00c2 02       		.uleb128 0x2
 2300 00c3 18       		.uleb128 0x18
 2301 00c4 00       		.byte	0
 2302 00c5 00       		.byte	0
 2303 00c6 10       		.uleb128 0x10
 2304 00c7 0B       		.uleb128 0xb
 2305 00c8 01       		.byte	0x1
 2306 00c9 11       		.uleb128 0x11
 2307 00ca 01       		.uleb128 0x1
 2308 00cb 12       		.uleb128 0x12
 2309 00cc 06       		.uleb128 0x6
 2310 00cd 00       		.byte	0
 2311 00ce 00       		.byte	0
 2312 00cf 11       		.uleb128 0x11
 2313 00d0 34       		.uleb128 0x34
 2314 00d1 00       		.byte	0
 2315 00d2 03       		.uleb128 0x3
 2316 00d3 08       		.uleb128 0x8
 2317 00d4 3A       		.uleb128 0x3a
 2318 00d5 0B       		.uleb128 0xb
 2319 00d6 3B       		.uleb128 0x3b
 2320 00d7 0B       		.uleb128 0xb
 2321 00d8 49       		.uleb128 0x49
 2322 00d9 13       		.uleb128 0x13
 2323 00da 02       		.uleb128 0x2
 2324 00db 18       		.uleb128 0x18
 2325 00dc 00       		.byte	0
 2326 00dd 00       		.byte	0
 2327 00de 12       		.uleb128 0x12
 2328 00df 0B       		.uleb128 0xb
 2329 00e0 01       		.byte	0x1
 2330 00e1 11       		.uleb128 0x11
 2331 00e2 01       		.uleb128 0x1
 2332 00e3 12       		.uleb128 0x12
 2333 00e4 06       		.uleb128 0x6
 2334 00e5 01       		.uleb128 0x1
 2335 00e6 13       		.uleb128 0x13
 2336 00e7 00       		.byte	0
 2337 00e8 00       		.byte	0
 2338 00e9 13       		.uleb128 0x13
 2339 00ea 2E       		.uleb128 0x2e
 2340 00eb 01       		.byte	0x1
 2341 00ec 3F       		.uleb128 0x3f
 2342 00ed 19       		.uleb128 0x19
 2343 00ee 03       		.uleb128 0x3
 2344 00ef 0E       		.uleb128 0xe
 2345 00f0 3A       		.uleb128 0x3a
 2346 00f1 0B       		.uleb128 0xb
 2347 00f2 3B       		.uleb128 0x3b
 2348 00f3 0B       		.uleb128 0xb
 2349 00f4 27       		.uleb128 0x27
 2350 00f5 19       		.uleb128 0x19
 2351 00f6 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 47


 2352 00f7 13       		.uleb128 0x13
 2353 00f8 11       		.uleb128 0x11
 2354 00f9 01       		.uleb128 0x1
 2355 00fa 12       		.uleb128 0x12
 2356 00fb 06       		.uleb128 0x6
 2357 00fc 40       		.uleb128 0x40
 2358 00fd 18       		.uleb128 0x18
 2359 00fe 9642     		.uleb128 0x2116
 2360 0100 19       		.uleb128 0x19
 2361 0101 01       		.uleb128 0x1
 2362 0102 13       		.uleb128 0x13
 2363 0103 00       		.byte	0
 2364 0104 00       		.byte	0
 2365 0105 14       		.uleb128 0x14
 2366 0106 05       		.uleb128 0x5
 2367 0107 00       		.byte	0
 2368 0108 03       		.uleb128 0x3
 2369 0109 0E       		.uleb128 0xe
 2370 010a 3A       		.uleb128 0x3a
 2371 010b 0B       		.uleb128 0xb
 2372 010c 3B       		.uleb128 0x3b
 2373 010d 0B       		.uleb128 0xb
 2374 010e 49       		.uleb128 0x49
 2375 010f 13       		.uleb128 0x13
 2376 0110 02       		.uleb128 0x2
 2377 0111 18       		.uleb128 0x18
 2378 0112 00       		.byte	0
 2379 0113 00       		.byte	0
 2380 0114 15       		.uleb128 0x15
 2381 0115 2E       		.uleb128 0x2e
 2382 0116 01       		.byte	0x1
 2383 0117 3F       		.uleb128 0x3f
 2384 0118 19       		.uleb128 0x19
 2385 0119 03       		.uleb128 0x3
 2386 011a 0E       		.uleb128 0xe
 2387 011b 3A       		.uleb128 0x3a
 2388 011c 0B       		.uleb128 0xb
 2389 011d 3B       		.uleb128 0x3b
 2390 011e 0B       		.uleb128 0xb
 2391 011f 27       		.uleb128 0x27
 2392 0120 19       		.uleb128 0x19
 2393 0121 11       		.uleb128 0x11
 2394 0122 01       		.uleb128 0x1
 2395 0123 12       		.uleb128 0x12
 2396 0124 06       		.uleb128 0x6
 2397 0125 40       		.uleb128 0x40
 2398 0126 18       		.uleb128 0x18
 2399 0127 9642     		.uleb128 0x2116
 2400 0129 19       		.uleb128 0x19
 2401 012a 01       		.uleb128 0x1
 2402 012b 13       		.uleb128 0x13
 2403 012c 00       		.byte	0
 2404 012d 00       		.byte	0
 2405 012e 16       		.uleb128 0x16
 2406 012f 05       		.uleb128 0x5
 2407 0130 00       		.byte	0
 2408 0131 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 48


 2409 0132 08       		.uleb128 0x8
 2410 0133 3A       		.uleb128 0x3a
 2411 0134 0B       		.uleb128 0xb
 2412 0135 3B       		.uleb128 0x3b
 2413 0136 0B       		.uleb128 0xb
 2414 0137 49       		.uleb128 0x49
 2415 0138 13       		.uleb128 0x13
 2416 0139 02       		.uleb128 0x2
 2417 013a 18       		.uleb128 0x18
 2418 013b 00       		.byte	0
 2419 013c 00       		.byte	0
 2420 013d 17       		.uleb128 0x17
 2421 013e 2E       		.uleb128 0x2e
 2422 013f 01       		.byte	0x1
 2423 0140 3F       		.uleb128 0x3f
 2424 0141 19       		.uleb128 0x19
 2425 0142 03       		.uleb128 0x3
 2426 0143 0E       		.uleb128 0xe
 2427 0144 3A       		.uleb128 0x3a
 2428 0145 0B       		.uleb128 0xb
 2429 0146 3B       		.uleb128 0x3b
 2430 0147 0B       		.uleb128 0xb
 2431 0148 27       		.uleb128 0x27
 2432 0149 19       		.uleb128 0x19
 2433 014a 11       		.uleb128 0x11
 2434 014b 01       		.uleb128 0x1
 2435 014c 12       		.uleb128 0x12
 2436 014d 06       		.uleb128 0x6
 2437 014e 40       		.uleb128 0x40
 2438 014f 18       		.uleb128 0x18
 2439 0150 9742     		.uleb128 0x2117
 2440 0152 19       		.uleb128 0x19
 2441 0153 01       		.uleb128 0x1
 2442 0154 13       		.uleb128 0x13
 2443 0155 00       		.byte	0
 2444 0156 00       		.byte	0
 2445 0157 18       		.uleb128 0x18
 2446 0158 34       		.uleb128 0x34
 2447 0159 00       		.byte	0
 2448 015a 03       		.uleb128 0x3
 2449 015b 0E       		.uleb128 0xe
 2450 015c 3A       		.uleb128 0x3a
 2451 015d 0B       		.uleb128 0xb
 2452 015e 3B       		.uleb128 0x3b
 2453 015f 05       		.uleb128 0x5
 2454 0160 49       		.uleb128 0x49
 2455 0161 13       		.uleb128 0x13
 2456 0162 3F       		.uleb128 0x3f
 2457 0163 19       		.uleb128 0x19
 2458 0164 3C       		.uleb128 0x3c
 2459 0165 19       		.uleb128 0x19
 2460 0166 00       		.byte	0
 2461 0167 00       		.byte	0
 2462 0168 19       		.uleb128 0x19
 2463 0169 34       		.uleb128 0x34
 2464 016a 00       		.byte	0
 2465 016b 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 49


 2466 016c 0E       		.uleb128 0xe
 2467 016d 3A       		.uleb128 0x3a
 2468 016e 0B       		.uleb128 0xb
 2469 016f 3B       		.uleb128 0x3b
 2470 0170 0B       		.uleb128 0xb
 2471 0171 49       		.uleb128 0x49
 2472 0172 13       		.uleb128 0x13
 2473 0173 3F       		.uleb128 0x3f
 2474 0174 19       		.uleb128 0x19
 2475 0175 02       		.uleb128 0x2
 2476 0176 18       		.uleb128 0x18
 2477 0177 00       		.byte	0
 2478 0178 00       		.byte	0
 2479 0179 1A       		.uleb128 0x1a
 2480 017a 21       		.uleb128 0x21
 2481 017b 00       		.byte	0
 2482 017c 49       		.uleb128 0x49
 2483 017d 13       		.uleb128 0x13
 2484 017e 2F       		.uleb128 0x2f
 2485 017f 05       		.uleb128 0x5
 2486 0180 00       		.byte	0
 2487 0181 00       		.byte	0
 2488 0182 1B       		.uleb128 0x1b
 2489 0183 34       		.uleb128 0x34
 2490 0184 00       		.byte	0
 2491 0185 03       		.uleb128 0x3
 2492 0186 08       		.uleb128 0x8
 2493 0187 3A       		.uleb128 0x3a
 2494 0188 0B       		.uleb128 0xb
 2495 0189 3B       		.uleb128 0x3b
 2496 018a 0B       		.uleb128 0xb
 2497 018b 49       		.uleb128 0x49
 2498 018c 13       		.uleb128 0x13
 2499 018d 3F       		.uleb128 0x3f
 2500 018e 19       		.uleb128 0x19
 2501 018f 02       		.uleb128 0x2
 2502 0190 18       		.uleb128 0x18
 2503 0191 00       		.byte	0
 2504 0192 00       		.byte	0
 2505 0193 00       		.byte	0
 2506              		.section	.debug_aranges,"",%progbits
 2507 0000 54000000 		.4byte	0x54
 2508 0004 0200     		.2byte	0x2
 2509 0006 00000000 		.4byte	.Ldebug_info0
 2510 000a 04       		.byte	0x4
 2511 000b 00       		.byte	0
 2512 000c 0000     		.2byte	0
 2513 000e 0000     		.2byte	0
 2514 0010 00000000 		.4byte	.LFB64
 2515 0014 60010000 		.4byte	.LFE64-.LFB64
 2516 0018 00000000 		.4byte	.LFB65
 2517 001c 98010000 		.4byte	.LFE65-.LFB65
 2518 0020 00000000 		.4byte	.LFB66
 2519 0024 C4000000 		.4byte	.LFE66-.LFB66
 2520 0028 00000000 		.4byte	.LFB67
 2521 002c 74000000 		.4byte	.LFE67-.LFB67
 2522 0030 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 50


 2523 0034 28000000 		.4byte	.LFE68-.LFB68
 2524 0038 00000000 		.4byte	.LFB69
 2525 003c 84000000 		.4byte	.LFE69-.LFB69
 2526 0040 00000000 		.4byte	.LFB70
 2527 0044 BC000000 		.4byte	.LFE70-.LFB70
 2528 0048 00000000 		.4byte	.LFB71
 2529 004c 04010000 		.4byte	.LFE71-.LFB71
 2530 0050 00000000 		.4byte	0
 2531 0054 00000000 		.4byte	0
 2532              		.section	.debug_ranges,"",%progbits
 2533              	.Ldebug_ranges0:
 2534 0000 00000000 		.4byte	.LFB64
 2535 0004 60010000 		.4byte	.LFE64
 2536 0008 00000000 		.4byte	.LFB65
 2537 000c 98010000 		.4byte	.LFE65
 2538 0010 00000000 		.4byte	.LFB66
 2539 0014 C4000000 		.4byte	.LFE66
 2540 0018 00000000 		.4byte	.LFB67
 2541 001c 74000000 		.4byte	.LFE67
 2542 0020 00000000 		.4byte	.LFB68
 2543 0024 28000000 		.4byte	.LFE68
 2544 0028 00000000 		.4byte	.LFB69
 2545 002c 84000000 		.4byte	.LFE69
 2546 0030 00000000 		.4byte	.LFB70
 2547 0034 BC000000 		.4byte	.LFE70
 2548 0038 00000000 		.4byte	.LFB71
 2549 003c 04010000 		.4byte	.LFE71
 2550 0040 00000000 		.4byte	0
 2551 0044 00000000 		.4byte	0
 2552              		.section	.debug_line,"",%progbits
 2553              	.Ldebug_line0:
 2554 0000 DA020000 		.section	.debug_str,"MS",%progbits,1
 2554      02008E01 
 2554      00000201 
 2554      FB0E0D00 
 2554      01010101 
 2555              	.LASF41:
 2556 0000 6D6F6465 		.ascii	"model_id\000"
 2556      6C5F6964 
 2556      00
 2557              	.LASF100:
 2558 0009 616C6172 		.ascii	"alarmMeasure\000"
 2558      6D4D6561 
 2558      73757265 
 2558      00
 2559              	.LASF40:
 2560 0016 73696D5F 		.ascii	"sim_id\000"
 2560      696400
 2561              	.LASF25:
 2562 001d 766F6C74 		.ascii	"voltage_solar\000"
 2562      6167655F 
 2562      736F6C61 
 2562      7200
 2563              	.LASF69:
 2564 002b 7379735F 		.ascii	"sys_settings_t\000"
 2564      73657474 
 2564      696E6773 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 51


 2564      5F7400
 2565              	.LASF60:
 2566 003a 63757272 		.ascii	"currentCountDownValue\000"
 2566      656E7443 
 2566      6F756E74 
 2566      446F776E 
 2566      56616C75 
 2567              	.LASF72:
 2568 0050 6F666673 		.ascii	"offset\000"
 2568      657400
 2569              	.LASF87:
 2570 0057 62756666 		.ascii	"buffer_overflow\000"
 2570      65725F6F 
 2570      76657266 
 2570      6C6F7700 
 2571              	.LASF75:
 2572 0067 70726573 		.ascii	"pressure_sensor_readings\000"
 2572      73757265 
 2572      5F73656E 
 2572      736F725F 
 2572      72656164 
 2573              	.LASF82:
 2574 0080 6D656469 		.ascii	"median\000"
 2574      616E00
 2575              	.LASF59:
 2576 0087 636F756E 		.ascii	"countDownValue\000"
 2576      74446F77 
 2576      6E56616C 
 2576      756500
 2577              	.LASF2:
 2578 0096 73686F72 		.ascii	"short int\000"
 2578      7420696E 
 2578      7400
 2579              	.LASF95:
 2580 00a0 68747470 		.ascii	"http_request\000"
 2580      5F726571 
 2580      75657374 
 2580      00
 2581              	.LASF19:
 2582 00ad 73697A65 		.ascii	"sizetype\000"
 2582      74797065 
 2582      00
 2583              	.LASF67:
 2584 00b6 65705F68 		.ascii	"ep_host\000"
 2584      6F737400 
 2585              	.LASF105:
 2586 00be 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2586      43313120 
 2586      352E342E 
 2586      31203230 
 2586      31363036 
 2587 00f1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2587      20726576 
 2587      6973696F 
 2587      6E203233 
 2587      37373135 
 2588 0124 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 52


 2588      66756E63 
 2588      74696F6E 
 2588      2D736563 
 2588      74696F6E 
 2589              	.LASF78:
 2590 014c 73776170 		.ascii	"swap32\000"
 2590      333200
 2591              	.LASF90:
 2592 0153 64617461 		.ascii	"data\000"
 2592      00
 2593              	.LASF106:
 2594 0158 766F6C74 		.ascii	"voltages.c\000"
 2594      61676573 
 2594      2E6300
 2595              	.LASF27:
 2596 0163 766F6C74 		.ascii	"voltage_pressure\000"
 2596      6167655F 
 2596      70726573 
 2596      73757265 
 2596      00
 2597              	.LASF71:
 2598 0174 6368616E 		.ascii	"channels\000"
 2598      6E656C73 
 2598      00
 2599              	.LASF46:
 2600 017d 65636E6F 		.ascii	"ecno\000"
 2600      00
 2601              	.LASF37:
 2602 0182 76616C75 		.ascii	"value\000"
 2602      6500
 2603              	.LASF24:
 2604 0188 766F6C74 		.ascii	"voltage_battery\000"
 2604      6167655F 
 2604      62617474 
 2604      65727900 
 2605              	.LASF88:
 2606 0198 64617461 		.ascii	"dataPointsInStack\000"
 2606      506F696E 
 2606      7473496E 
 2606      53746163 
 2606      6B00
 2607              	.LASF11:
 2608 01aa 75696E74 		.ascii	"uint8\000"
 2608      3800
 2609              	.LASF76:
 2610 01b0 70726573 		.ascii	"pressure\000"
 2610      73757265 
 2610      00
 2611              	.LASF45:
 2612 01b9 72736370 		.ascii	"rscp\000"
 2612      00
 2613              	.LASF38:
 2614 01be 74696D65 		.ascii	"timeStamp\000"
 2614      5374616D 
 2614      7000
 2615              	.LASF74:
 2616 01c8 766F6C74 		.ascii	"voltage_take_readings\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 53


 2616      6167655F 
 2616      74616B65 
 2616      5F726561 
 2616      64696E67 
 2617              	.LASF89:
 2618 01de 64617461 		.ascii	"dataPointsInStackDesired\000"
 2618      506F696E 
 2618      7473496E 
 2618      53746163 
 2618      6B446573 
 2619              	.LASF15:
 2620 01f7 666C6F61 		.ascii	"float\000"
 2620      7400
 2621              	.LASF83:
 2622 01fd 766F6C74 		.ascii	"voltages_test\000"
 2622      61676573 
 2622      5F746573 
 2622      7400
 2623              	.LASF14:
 2624 020b 696E7433 		.ascii	"int32\000"
 2624      3200
 2625              	.LASF6:
 2626 0211 6C6F6E67 		.ascii	"long long int\000"
 2626      206C6F6E 
 2626      6720696E 
 2626      7400
 2627              	.LASF13:
 2628 021f 696E7431 		.ascii	"int16\000"
 2628      3600
 2629              	.LASF28:
 2630 0225 766F6C74 		.ascii	"voltage_valve_pos\000"
 2630      6167655F 
 2630      76616C76 
 2630      655F706F 
 2630      7300
 2631              	.LASF17:
 2632 0237 63686172 		.ascii	"char\000"
 2632      00
 2633              	.LASF22:
 2634 023c 72656173 		.ascii	"reason\000"
 2634      6F6E00
 2635              	.LASF4:
 2636 0243 6C6F6E67 		.ascii	"long int\000"
 2636      20696E74 
 2636      00
 2637              	.LASF107:
 2638 024c 473A5C4D 		.ascii	"G:\\My Drive\\notoriOS\\notoriOS\\notoriOS.cydsn\000"
 2638      79204472 
 2638      6976655C 
 2638      6E6F746F 
 2638      72694F53 
 2639              	.LASF70:
 2640 0279 766F6C74 		.ascii	"voltage\000"
 2640      61676500 
 2641              	.LASF64:
 2642 0281 6D6F6465 		.ascii	"modem_info\000"
 2642      6D5F696E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 54


 2642      666F00
 2643              	.LASF32:
 2644 028c 70726573 		.ascii	"pressure_voltage_on\000"
 2644      73757265 
 2644      5F766F6C 
 2644      74616765 
 2644      5F6F6E00 
 2645              	.LASF77:
 2646 02a0 736F7274 		.ascii	"sort32\000"
 2646      333200
 2647              	.LASF35:
 2648 02a7 70726573 		.ascii	"pressure_depth\000"
 2648      73757265 
 2648      5F646570 
 2648      746800
 2649              	.LASF63:
 2650 02b6 616C6172 		.ascii	"alarm\000"
 2650      6D00
 2651              	.LASF54:
 2652 02bc 6D656173 		.ascii	"measure_time\000"
 2652      7572655F 
 2652      74696D65 
 2652      00
 2653              	.LASF102:
 2654 02c9 616C6172 		.ascii	"alarmSync\000"
 2654      6D53796E 
 2654      6300
 2655              	.LASF18:
 2656 02d3 6C6F6E67 		.ascii	"long double\000"
 2656      20646F75 
 2656      626C6500 
 2657              	.LASF1:
 2658 02df 756E7369 		.ascii	"unsigned char\000"
 2658      676E6564 
 2658      20636861 
 2658      7200
 2659              	.LASF85:
 2660 02ed 70726573 		.ascii	"pressure_sensor_test\000"
 2660      73757265 
 2660      5F73656E 
 2660      736F725F 
 2660      74657374 
 2661              	.LASF30:
 2662 0302 76616C69 		.ascii	"valid\000"
 2662      6400
 2663              	.LASF92:
 2664 0308 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2664      6D5F7374 
 2664      6172745F 
 2664      74696D65 
 2664      5F737461 
 2665              	.LASF58:
 2666 031f 75706461 		.ascii	"updatable_parameters_t\000"
 2666      7461626C 
 2666      655F7061 
 2666      72616D65 
 2666      74657273 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 55


 2667              	.LASF80:
 2668 0336 66696E64 		.ascii	"find_median32\000"
 2668      5F6D6564 
 2668      69616E33 
 2668      3200
 2669              	.LASF0:
 2670 0344 7369676E 		.ascii	"signed char\000"
 2670      65642063 
 2670      68617200 
 2671              	.LASF7:
 2672 0350 6C6F6E67 		.ascii	"long long unsigned int\000"
 2672      206C6F6E 
 2672      6720756E 
 2672      7369676E 
 2672      65642069 
 2673              	.LASF99:
 2674 0367 73797374 		.ascii	"system_settings\000"
 2674      656D5F73 
 2674      65747469 
 2674      6E677300 
 2675              	.LASF65:
 2676 0377 63686970 		.ascii	"chip_uniqueId\000"
 2676      5F756E69 
 2676      71756549 
 2676      6400
 2677              	.LASF8:
 2678 0385 756E7369 		.ascii	"unsigned int\000"
 2678      676E6564 
 2678      20696E74 
 2678      00
 2679              	.LASF39:
 2680 0392 6B65795F 		.ascii	"key_value_t\000"
 2680      76616C75 
 2680      655F7400 
 2681              	.LASF44:
 2682 039e 72786C65 		.ascii	"rxlev\000"
 2682      7600
 2683              	.LASF55:
 2684 03a4 73796E63 		.ascii	"sync_time\000"
 2684      5F74696D 
 2684      6500
 2685              	.LASF93:
 2686 03ae 6D6F6465 		.ascii	"modem_stats\000"
 2686      6D5F7374 
 2686      61747300 
 2687              	.LASF101:
 2688 03ba 74696D65 		.ascii	"timeToMeasure\000"
 2688      546F4D65 
 2688      61737572 
 2688      6500
 2689              	.LASF36:
 2690 03c8 70726573 		.ascii	"pressure_t\000"
 2690      73757265 
 2690      5F7400
 2691              	.LASF53:
 2692 03d3 73696D5F 		.ascii	"sim_type\000"
 2692      74797065 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 56


 2692      00
 2693              	.LASF66:
 2694 03dc 7379735F 		.ascii	"sys_info_t\000"
 2694      696E666F 
 2694      5F7400
 2695              	.LASF3:
 2696 03e7 73686F72 		.ascii	"short unsigned int\000"
 2696      7420756E 
 2696      7369676E 
 2696      65642069 
 2696      6E7400
 2697              	.LASF49:
 2698 03fa 74696D65 		.ascii	"time_to_network_connect\000"
 2698      5F746F5F 
 2698      6E657477 
 2698      6F726B5F 
 2698      636F6E6E 
 2699              	.LASF21:
 2700 0412 73746174 		.ascii	"status\000"
 2700      757300
 2701              	.LASF33:
 2702 0419 70726573 		.ascii	"pressure_voltage_off\000"
 2702      73757265 
 2702      5F766F6C 
 2702      74616765 
 2702      5F6F6666 
 2703              	.LASF98:
 2704 042e 73797374 		.ascii	"system_info\000"
 2704      656D5F69 
 2704      6E666F00 
 2705              	.LASF50:
 2706 043a 74696D65 		.ascii	"time_to_acquire_ip\000"
 2706      5F746F5F 
 2706      61637175 
 2706      6972655F 
 2706      697000
 2707              	.LASF86:
 2708 044d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2708      52784275 
 2708      66666572 
 2708      00
 2709              	.LASF42:
 2710 045a 696D6569 		.ascii	"imei\000"
 2710      00
 2711              	.LASF31:
 2712 045f 766F6C74 		.ascii	"voltage_t\000"
 2712      6167655F 
 2712      7400
 2713              	.LASF10:
 2714 0469 696E7433 		.ascii	"int32_t\000"
 2714      325F7400 
 2715              	.LASF51:
 2716 0471 6D6F6465 		.ascii	"modem_stats_t\000"
 2716      6D5F7374 
 2716      6174735F 
 2716      7400
 2717              	.LASF91:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 57


 2718 047f 6D6F6465 		.ascii	"modem_state\000"
 2718      6D5F7374 
 2718      61746500 
 2719              	.LASF29:
 2720 048b 766F6C74 		.ascii	"voltage_valve_pot_power\000"
 2720      6167655F 
 2720      76616C76 
 2720      655F706F 
 2720      745F706F 
 2721              	.LASF57:
 2722 04a3 5F426F6F 		.ascii	"_Bool\000"
 2722      6C00
 2723              	.LASF104:
 2724 04a9 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2724      546F5379 
 2724      636E5265 
 2724      6D6F7465 
 2724      50617261 
 2725              	.LASF48:
 2726 04c0 72737270 		.ascii	"rsrp\000"
 2726      00
 2727              	.LASF84:
 2728 04c5 74657374 		.ascii	"test\000"
 2728      00
 2729              	.LASF47:
 2730 04ca 72737271 		.ascii	"rsrq\000"
 2730      00
 2731              	.LASF12:
 2732 04cf 75696E74 		.ascii	"uint16\000"
 2732      313600
 2733              	.LASF97:
 2734 04d6 68747470 		.ascii	"http_route\000"
 2734      5F726F75 
 2734      746500
 2735              	.LASF5:
 2736 04e1 6C6F6E67 		.ascii	"long unsigned int\000"
 2736      20756E73 
 2736      69676E65 
 2736      6420696E 
 2736      7400
 2737              	.LASF16:
 2738 04f3 646F7562 		.ascii	"double\000"
 2738      6C6500
 2739              	.LASF81:
 2740 04fa 61727261 		.ascii	"array\000"
 2740      7900
 2741              	.LASF56:
 2742 0500 64656275 		.ascii	"debug_level\000"
 2742      675F6C65 
 2742      76656C00 
 2743              	.LASF43:
 2744 050c 6D6F6465 		.ascii	"modem_info_t\000"
 2744      6D5F696E 
 2744      666F5F74 
 2744      00
 2745              	.LASF61:
 2746 0519 636F756E 		.ascii	"countDownType\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 58


 2746      74446F77 
 2746      6E547970 
 2746      6500
 2747              	.LASF9:
 2748 0527 5F5F696E 		.ascii	"__int32_t\000"
 2748      7433325F 
 2748      7400
 2749              	.LASF62:
 2750 0531 636F756E 		.ascii	"countDownResetCondition\000"
 2750      74446F77 
 2750      6E526573 
 2750      6574436F 
 2750      6E646974 
 2751              	.LASF23:
 2752 0549 74657374 		.ascii	"test_t\000"
 2752      5F7400
 2753              	.LASF20:
 2754 0550 74657374 		.ascii	"test_name\000"
 2754      5F6E616D 
 2754      6500
 2755              	.LASF94:
 2756 055a 75706461 		.ascii	"updatable_parameters\000"
 2756      7461626C 
 2756      655F7061 
 2756      72616D65 
 2756      74657273 
 2757              	.LASF68:
 2758 056f 65705F70 		.ascii	"ep_port\000"
 2758      6F727400 
 2759              	.LASF79:
 2760 0577 70726573 		.ascii	"pressure_calculations\000"
 2760      73757265 
 2760      5F63616C 
 2760      63756C61 
 2760      74696F6E 
 2761              	.LASF96:
 2762 058d 68747470 		.ascii	"http_body\000"
 2762      5F626F64 
 2762      7900
 2763              	.LASF52:
 2764 0597 6E6F6465 		.ascii	"node_type\000"
 2764      5F747970 
 2764      6500
 2765              	.LASF26:
 2766 05a1 766F6C74 		.ascii	"voltage_charge_current\000"
 2766      6167655F 
 2766      63686172 
 2766      67655F63 
 2766      75727265 
 2767              	.LASF103:
 2768 05b8 74696D65 		.ascii	"timeToSync\000"
 2768      546F5379 
 2768      6E6300
 2769              	.LASF34:
 2770 05c3 70726573 		.ascii	"pressure_current\000"
 2770      73757265 
 2770      5F637572 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccCZ9f72.s 			page 59


 2770      72656E74 
 2770      00
 2771              	.LASF73:
 2772 05d4 72656164 		.ascii	"readings\000"
 2772      696E6773 
 2772      00
 2773              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
