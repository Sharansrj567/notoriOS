ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	buffer_overflow,1,1
  24              		.comm	dataPointsInStack,2,2
  25              		.comm	dataPointsInStackDesired,2,2
  26              		.comm	data,6600,4
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,8,4
  32              		.syntax unified
  33              		.global _printf_float
  34              		.thumb
  35              		.syntax unified
  36              		.comm	App_LED_enabled,1,1
  37              		.comm	app_led_inbox,100,4
  38              		.comm	http_request,10000,4
  39              		.comm	http_body,10000,4
  40              		.comm	http_route,200,4
  41              		.comm	system_info,28,4
  42              		.comm	system_settings,104,4
  43              		.comm	alarmMeasure,6,4
  44              		.comm	timeToMeasure,1,1
  45              		.comm	alarmSync,6,4
  46              		.comm	timeToSync,1,1
  47              		.comm	timeToSycnRemoteParams,1,1
  48              		.comm	hey,1,1
  49              		.comm	alarmAppLED,6,4
  50              		.comm	timeToAppLED,1,1
  51              		.comm	alarmLevelSensor,6,4
  52              		.comm	timetoLevelSensor,1,1
  53              		.comm	alarmDownstreamLevelSensor,6,4
  54              		.comm	timetoDownstreamLevelSensor,1,1
  55              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  56              		.align	2
  57              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 2


  58              		.thumb_func
  59              		.type	RTC_EverySecondHandler, %function
  60              	RTC_EverySecondHandler:
  61              	.LFB64:
  62              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 3


  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  63              		.loc 1 55 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67 0000 80B5     		push	{r7, lr}
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 7, -8
  70              		.cfi_offset 14, -4
  71 0002 00AF     		add	r7, sp, #0
  72              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  73              		.loc 1 58 0
  74 0004 0020     		movs	r0, #0
  75 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  76              		.loc 1 64 0
  77 000a 00BF     		nop
  78 000c 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE64:
  81              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  82 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  83              		.align	2
  84              		.thumb
  85              		.thumb_func
  86              		.type	RTC_EveryMinuteHandler, %function
  87              	RTC_EveryMinuteHandler:
  88              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  89              		.loc 1 82 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 4


  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 1, uses_anonymous_args = 0
  93 0000 80B5     		push	{r7, lr}
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
  99              		.loc 1 85 0
 100 0004 0120     		movs	r0, #1
 101 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
 102              		.loc 1 91 0
 103 000a 00BF     		nop
 104 000c 80BD     		pop	{r7, pc}
 105              		.cfi_endproc
 106              	.LFE65:
 107              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
 108 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 112              		.type	RTC_EveryHourHandler, %function
 113              	RTC_EveryHourHandler:
 114              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 115              		.loc 1 109 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 5


 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 7, -8
 122              		.cfi_offset 14, -4
 123 0002 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 125              		.loc 1 112 0
 126 0004 0220     		movs	r0, #2
 127 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 128              		.loc 1 118 0
 129 000a 00BF     		nop
 130 000c 80BD     		pop	{r7, pc}
 131              		.cfi_endproc
 132              	.LFE66:
 133              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 134 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 135              		.align	2
 136              		.thumb
 137              		.thumb_func
 138              		.type	RTC_EveryDayHandler, %function
 139              	RTC_EveryDayHandler:
 140              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 141              		.loc 1 136 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145 0000 80B5     		push	{r7, lr}
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 7, -8
 148              		.cfi_offset 14, -4
 149 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 6


 150              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 151              		.loc 1 139 0
 152 0004 0320     		movs	r0, #3
 153 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 154              		.loc 1 145 0
 155 000a 00BF     		nop
 156 000c 80BD     		pop	{r7, pc}
 157              		.cfi_endproc
 158              	.LFE67:
 159              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 160 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 161              		.align	2
 162              		.thumb
 163              		.thumb_func
 164              		.type	RTC_EveryWeekHandler, %function
 165              	RTC_EveryWeekHandler:
 166              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 167              		.loc 1 163 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171 0000 80B5     		push	{r7, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 7, -8
 174              		.cfi_offset 14, -4
 175 0002 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 7


 177              		.loc 1 166 0
 178 0004 0420     		movs	r0, #4
 179 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 180              		.loc 1 172 0
 181 000a 00BF     		nop
 182 000c 80BD     		pop	{r7, pc}
 183              		.cfi_endproc
 184              	.LFE68:
 185              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 186 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 187              		.align	2
 188              		.thumb
 189              		.thumb_func
 190              		.type	RTC_EveryMonthHandler, %function
 191              	RTC_EveryMonthHandler:
 192              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 193              		.loc 1 190 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
 198              		.cfi_def_cfa_offset 8
 199              		.cfi_offset 7, -8
 200              		.cfi_offset 14, -4
 201 0002 00AF     		add	r7, sp, #0
 202              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 203              		.loc 1 193 0
 204 0004 0520     		movs	r0, #5
 205 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 8


 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 206              		.loc 1 199 0
 207 000a 00BF     		nop
 208 000c 80BD     		pop	{r7, pc}
 209              		.cfi_endproc
 210              	.LFE69:
 211              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 212 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 213              		.align	2
 214              		.thumb
 215              		.thumb_func
 216              		.type	RTC_EveryYearHandler, %function
 217              	RTC_EveryYearHandler:
 218              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 219              		.loc 1 217 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 1, uses_anonymous_args = 0
 223 0000 80B5     		push	{r7, lr}
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 7, -8
 226              		.cfi_offset 14, -4
 227 0002 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 229              		.loc 1 220 0
 230 0004 0620     		movs	r0, #6
 231 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 9


 226:Generated_Source\PSoC5/RTC_INT.c **** }
 232              		.loc 1 226 0
 233 000a 00BF     		nop
 234 000c 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE70:
 237              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 238 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 239              		.align	2
 240              		.global	RTC_ISR
 241              		.thumb
 242              		.thumb_func
 243              		.type	RTC_ISR, %function
 244              	RTC_ISR:
 245              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 10


 246              		.loc 1 268 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 8
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250 0000 80B5     		push	{r7, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 0002 82B0     		sub	sp, sp, #8
 255              		.cfi_def_cfa_offset 16
 256 0004 00AF     		add	r7, sp, #0
 257              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 258              		.loc 1 276 0
 259 0006 0420     		movs	r0, #4
 260 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 261              		.loc 1 279 0
 262 000c 9E4B     		ldr	r3, .L48
 263 000e 1B78     		ldrb	r3, [r3]
 264 0010 DBB2     		uxtb	r3, r3
 265 0012 0133     		adds	r3, r3, #1
 266 0014 DAB2     		uxtb	r2, r3
 267 0016 9C4B     		ldr	r3, .L48
 268 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 269              		.loc 1 282 0
 270 001a 9B4B     		ldr	r3, .L48
 271 001c 1B78     		ldrb	r3, [r3]
 272 001e DBB2     		uxtb	r3, r3
 273 0020 3B2B     		cmp	r3, #59
 274 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 275              		.loc 1 285 0
 276 0026 984B     		ldr	r3, .L48
 277 0028 5B78     		ldrb	r3, [r3, #1]
 278 002a DBB2     		uxtb	r3, r3
 279 002c 0133     		adds	r3, r3, #1
 280 002e DAB2     		uxtb	r2, r3
 281 0030 954B     		ldr	r3, .L48
 282 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 11


 283              		.loc 1 288 0
 284 0034 944B     		ldr	r3, .L48
 285 0036 0022     		movs	r2, #0
 286 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 287              		.loc 1 290 0
 288 003a 934B     		ldr	r3, .L48
 289 003c 5B78     		ldrb	r3, [r3, #1]
 290 003e DBB2     		uxtb	r3, r3
 291 0040 3B2B     		cmp	r3, #59
 292 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 293              		.loc 1 293 0
 294 0046 904B     		ldr	r3, .L48
 295 0048 9B78     		ldrb	r3, [r3, #2]
 296 004a DBB2     		uxtb	r3, r3
 297 004c 0133     		adds	r3, r3, #1
 298 004e DAB2     		uxtb	r2, r3
 299 0050 8D4B     		ldr	r3, .L48
 300 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 301              		.loc 1 296 0
 302 0054 8C4B     		ldr	r3, .L48
 303 0056 0022     		movs	r2, #0
 304 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 305              		.loc 1 299 0
 306 005a 8B4B     		ldr	r3, .L48
 307 005c 9B78     		ldrb	r3, [r3, #2]
 308 005e DBB2     		uxtb	r3, r3
 309 0060 172B     		cmp	r3, #23
 310 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 311              		.loc 1 302 0
 312 0066 884B     		ldr	r3, .L48
 313 0068 1B79     		ldrb	r3, [r3, #4]
 314 006a DBB2     		uxtb	r3, r3
 315 006c 0133     		adds	r3, r3, #1
 316 006e DAB2     		uxtb	r2, r3
 317 0070 854B     		ldr	r3, .L48
 318 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 319              		.loc 1 305 0
 320 0074 844B     		ldr	r3, .L48
 321 0076 0022     		movs	r2, #0
 322 0078 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 12


 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 323              		.loc 1 308 0
 324 007a 834B     		ldr	r3, .L48
 325 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 326 007e 9BB2     		uxth	r3, r3
 327 0080 0133     		adds	r3, r3, #1
 328 0082 9AB2     		uxth	r2, r3
 329 0084 804B     		ldr	r3, .L48
 330 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 331              		.loc 1 311 0
 332 0088 7F4B     		ldr	r3, .L48
 333 008a DB78     		ldrb	r3, [r3, #3]
 334 008c DBB2     		uxtb	r3, r3
 335 008e 0133     		adds	r3, r3, #1
 336 0090 DAB2     		uxtb	r2, r3
 337 0092 7D4B     		ldr	r3, .L48
 338 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 339              		.loc 1 314 0
 340 0096 7C4B     		ldr	r3, .L48
 341 0098 DB78     		ldrb	r3, [r3, #3]
 342 009a DBB2     		uxtb	r3, r3
 343 009c 072B     		cmp	r3, #7
 344 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 345              		.loc 1 317 0
 346 00a0 794B     		ldr	r3, .L48
 347 00a2 0122     		movs	r2, #1
 348 00a4 DA70     		strb	r2, [r3, #3]
 349              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 350              		.loc 1 325 0
 351 00a6 794B     		ldr	r3, .L48+4
 352 00a8 1B78     		ldrb	r3, [r3]
 353 00aa DBB2     		uxtb	r3, r3
 354 00ac 03F00203 		and	r3, r3, #2
 355 00b0 002B     		cmp	r3, #0
 356 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 357              		.loc 1 326 0 discriminator 1
 358 00b4 744B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 13


 359 00b6 1B7A     		ldrb	r3, [r3, #8]
 360 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 361              		.loc 1 325 0 discriminator 1
 362 00ba 022B     		cmp	r3, #2
 363 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 364              		.loc 1 327 0
 365 00be 724B     		ldr	r3, .L48
 366 00c0 1B79     		ldrb	r3, [r3, #4]
 367 00c2 DBB2     		uxtb	r3, r3
 368 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 369              		.loc 1 328 0
 370 00c6 704B     		ldr	r3, .L48
 371 00c8 1B7A     		ldrb	r3, [r3, #8]
 372 00ca DBB2     		uxtb	r3, r3
 373 00cc 013B     		subs	r3, r3, #1
 374 00ce 704A     		ldr	r2, .L48+8
 375 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 376 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 377              		.loc 1 326 0
 378 00d4 9942     		cmp	r1, r3
 379 00d6 2AD8     		bhi	.L14
 380              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 381              		.loc 1 329 0
 382 00d8 6C4B     		ldr	r3, .L48+4
 383 00da 1B78     		ldrb	r3, [r3]
 384 00dc DBB2     		uxtb	r3, r3
 385 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 386              		.loc 1 328 0
 387 00e2 002B     		cmp	r3, #0
 388 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 389              		.loc 1 330 0
 390 00e6 684B     		ldr	r3, .L48
 391 00e8 1B7A     		ldrb	r3, [r3, #8]
 392 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 393              		.loc 1 329 0
 394 00ec 022B     		cmp	r3, #2
 395 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 396              		.loc 1 331 0
 397 00f0 654B     		ldr	r3, .L48
 398 00f2 1B79     		ldrb	r3, [r3, #4]
 399 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 400              		.loc 1 332 0
 401 00f6 644B     		ldr	r3, .L48
 402 00f8 1B7A     		ldrb	r3, [r3, #8]
 403 00fa DBB2     		uxtb	r3, r3
 404 00fc 013B     		subs	r3, r3, #1
 405 00fe 6449     		ldr	r1, .L48+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 14


 406 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 407              		.loc 1 330 0
 408 0102 9A42     		cmp	r2, r3
 409 0104 13D8     		bhi	.L14
 410              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 411              		.loc 1 333 0
 412 0106 614B     		ldr	r3, .L48+4
 413 0108 1B78     		ldrb	r3, [r3]
 414 010a DBB2     		uxtb	r3, r3
 415 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 416              		.loc 1 332 0
 417 0110 002B     		cmp	r3, #0
 418 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 419              		.loc 1 334 0
 420 0116 5C4B     		ldr	r3, .L48
 421 0118 1B79     		ldrb	r3, [r3, #4]
 422 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 423              		.loc 1 335 0
 424 011c 5A4B     		ldr	r3, .L48
 425 011e 1B7A     		ldrb	r3, [r3, #8]
 426 0120 DBB2     		uxtb	r3, r3
 427 0122 013B     		subs	r3, r3, #1
 428 0124 5A49     		ldr	r1, .L48+8
 429 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 430              		.loc 1 333 0
 431 0128 9A42     		cmp	r2, r3
 432 012a 40F2E880 		bls	.L16
 433              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 434              		.loc 1 338 0
 435 012e 564B     		ldr	r3, .L48
 436 0130 1B7A     		ldrb	r3, [r3, #8]
 437 0132 DBB2     		uxtb	r3, r3
 438 0134 0133     		adds	r3, r3, #1
 439 0136 DAB2     		uxtb	r2, r3
 440 0138 534B     		ldr	r3, .L48
 441 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 442              		.loc 1 341 0
 443 013c 524B     		ldr	r3, .L48
 444 013e 0122     		movs	r2, #1
 445 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 446              		.loc 1 344 0
 447 0142 514B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 15


 448 0144 1B7A     		ldrb	r3, [r3, #8]
 449 0146 DBB2     		uxtb	r3, r3
 450 0148 0C2B     		cmp	r3, #12
 451 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 452              		.loc 1 347 0
 453 014e 4E4B     		ldr	r3, .L48
 454 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 455 0152 9BB2     		uxth	r3, r3
 456 0154 0133     		adds	r3, r3, #1
 457 0156 9AB2     		uxth	r2, r3
 458 0158 4B4B     		ldr	r3, .L48
 459 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 460              		.loc 1 350 0
 461 015c 4A4B     		ldr	r3, .L48
 462 015e 0122     		movs	r2, #1
 463 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 464              		.loc 1 353 0
 465 0162 494B     		ldr	r3, .L48
 466 0164 0122     		movs	r2, #1
 467 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 468              		.loc 1 356 0
 469 0168 474B     		ldr	r3, .L48
 470 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 471 016c 9BB2     		uxth	r3, r3
 472 016e 494A     		ldr	r2, .L48+12
 473 0170 A2FB0312 		umull	r1, r2, r2, r3
 474 0174 D209     		lsrs	r2, r2, #7
 475 0176 4FF4C871 		mov	r1, #400
 476 017a 01FB02F2 		mul	r2, r1, r2
 477 017e 9B1A     		subs	r3, r3, r2
 478 0180 9BB2     		uxth	r3, r3
 479 0182 002B     		cmp	r3, #0
 480 0184 15D0     		beq	.L18
 481              		.loc 1 356 0 is_stmt 0 discriminator 1
 482 0186 404B     		ldr	r3, .L48
 483 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 484 018a 9BB2     		uxth	r3, r3
 485 018c 03F00303 		and	r3, r3, #3
 486 0190 9BB2     		uxth	r3, r3
 487 0192 002B     		cmp	r3, #0
 488 0194 16D1     		bne	.L19
 489              		.loc 1 356 0 discriminator 2
 490 0196 3C4B     		ldr	r3, .L48
 491 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 492 019a 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 16


 493 019c 3D4A     		ldr	r2, .L48+12
 494 019e A2FB0312 		umull	r1, r2, r2, r3
 495 01a2 5209     		lsrs	r2, r2, #5
 496 01a4 6421     		movs	r1, #100
 497 01a6 01FB02F2 		mul	r2, r1, r2
 498 01aa 9B1A     		subs	r3, r3, r2
 499 01ac 9BB2     		uxth	r3, r3
 500 01ae 002B     		cmp	r3, #0
 501 01b0 08D0     		beq	.L19
 502              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 503              		.loc 1 359 0 is_stmt 1
 504 01b2 364B     		ldr	r3, .L48+4
 505 01b4 1B78     		ldrb	r3, [r3]
 506 01b6 DBB2     		uxtb	r3, r3
 507 01b8 43F00203 		orr	r3, r3, #2
 508 01bc DAB2     		uxtb	r2, r3
 509 01be 334B     		ldr	r3, .L48+4
 510 01c0 1A70     		strb	r2, [r3]
 511 01c2 07E0     		b	.L20
 512              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 513              		.loc 1 364 0
 514 01c4 314B     		ldr	r3, .L48+4
 515 01c6 1B78     		ldrb	r3, [r3]
 516 01c8 DBB2     		uxtb	r3, r3
 517 01ca 23F00203 		bic	r3, r3, #2
 518 01ce DAB2     		uxtb	r2, r3
 519 01d0 2E4B     		ldr	r3, .L48+4
 520 01d2 1A70     		strb	r2, [r3]
 521              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 522              		.loc 1 368 0
 523 01d4 304B     		ldr	r3, .L48+16
 524 01d6 1B78     		ldrb	r3, [r3]
 525 01d8 DBB2     		uxtb	r3, r3
 526 01da 5BB2     		sxtb	r3, r3
 527 01dc 002B     		cmp	r3, #0
 528 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 529              		.loc 1 372 0
 530 01e0 2E4B     		ldr	r3, .L48+20
 531 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 532 01e4 9AB2     		uxth	r2, r3
 533 01e6 284B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 17


 534 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 535 01ea 9BB2     		uxth	r3, r3
 536 01ec 9A42     		cmp	r2, r3
 537 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 538              		.loc 1 375 0
 539 01f0 2B4B     		ldr	r3, .L48+24
 540 01f2 1B78     		ldrb	r3, [r3]
 541 01f4 DBB2     		uxtb	r3, r3
 542 01f6 63F07F03 		orn	r3, r3, #127
 543 01fa DAB2     		uxtb	r2, r3
 544 01fc 284B     		ldr	r3, .L48+24
 545 01fe 1A70     		strb	r2, [r3]
 546 0200 07E0     		b	.L21
 547              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 548              		.loc 1 380 0
 549 0202 274B     		ldr	r3, .L48+24
 550 0204 1B78     		ldrb	r3, [r3]
 551 0206 DBB2     		uxtb	r3, r3
 552 0208 03F07F03 		and	r3, r3, #127
 553 020c DAB2     		uxtb	r2, r3
 554 020e 244B     		ldr	r3, .L48+24
 555 0210 1A70     		strb	r2, [r3]
 556              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 557              		.loc 1 385 0
 558 0212 214B     		ldr	r3, .L48+16
 559 0214 1B78     		ldrb	r3, [r3]
 560 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 561              		.loc 1 386 0
 562 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 563 021a 002B     		cmp	r3, #0
 564 021c 13D0     		beq	.L23
 565              		.loc 1 386 0 is_stmt 0 discriminator 1
 566 021e 204B     		ldr	r3, .L48+24
 567 0220 1B78     		ldrb	r3, [r3]
 568 0222 DAB2     		uxtb	r2, r3
 569 0224 FB79     		ldrb	r3, [r7, #7]
 570 0226 1340     		ands	r3, r3, r2
 571 0228 DBB2     		uxtb	r3, r3
 572 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 573 022c 9A42     		cmp	r2, r3
 574 022e 0AD1     		bne	.L23
 575              		.loc 1 386 0 discriminator 2
 576 0230 164B     		ldr	r3, .L48+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 18


 577 0232 1B78     		ldrb	r3, [r3]
 578 0234 DBB2     		uxtb	r3, r3
 579 0236 43F00803 		orr	r3, r3, #8
 580 023a DAB2     		uxtb	r2, r3
 581 023c 134B     		ldr	r3, .L48+4
 582 023e 1A70     		strb	r2, [r3]
 583 0240 174B     		ldr	r3, .L48+24
 584 0242 0022     		movs	r2, #0
 585 0244 1A70     		strb	r2, [r3]
 586              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 587              		.loc 1 391 0 is_stmt 1
 588 0246 174B     		ldr	r3, .L48+28
 589 0248 1B78     		ldrb	r3, [r3]
 590 024a DBB2     		uxtb	r3, r3
 591 024c 03F04003 		and	r3, r3, #64
 592 0250 002B     		cmp	r3, #0
 593 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 594              		.loc 1 394 0
 595 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 596              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 597              		.loc 1 400 0
 598 0258 0F4B     		ldr	r3, .L48+16
 599 025a 1B78     		ldrb	r3, [r3]
 600 025c DBB2     		uxtb	r3, r3
 601 025e 03F04003 		and	r3, r3, #64
 602 0262 002B     		cmp	r3, #0
 603 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 604              		.loc 1 403 0
 605 0266 0D4B     		ldr	r3, .L48+20
 606 0268 1B7A     		ldrb	r3, [r3, #8]
 607 026a DAB2     		uxtb	r2, r3
 608 026c 064B     		ldr	r3, .L48
 609 026e 1B7A     		ldrb	r3, [r3, #8]
 610 0270 DBB2     		uxtb	r3, r3
 611 0272 9A42     		cmp	r2, r3
 612 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 613              		.loc 1 406 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 19


 614 0276 0A4B     		ldr	r3, .L48+24
 615 0278 1B78     		ldrb	r3, [r3]
 616 027a DBB2     		uxtb	r3, r3
 617 027c 43F04003 		orr	r3, r3, #64
 618 0280 DAB2     		uxtb	r2, r3
 619 0282 074B     		ldr	r3, .L48+24
 620 0284 1A70     		strb	r2, [r3]
 621 0286 17E0     		b	.L24
 622              	.L49:
 623              		.align	2
 624              	.L48:
 625 0288 00000000 		.word	RTC_currentTimeDate
 626 028c 00000000 		.word	RTC_statusDateTime
 627 0290 00000000 		.word	RTC_daysInMonths
 628 0294 1F85EB51 		.word	1374389535
 629 0298 00000000 		.word	RTC_alarmCfgMask
 630 029c 00000000 		.word	RTC_alarmCfgTimeDate
 631 02a0 00000000 		.word	RTC_alarmCurStatus
 632 02a4 00000000 		.word	RTC_intervalCfgMask
 633              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 634              		.loc 1 411 0
 635 02a8 964B     		ldr	r3, .L50
 636 02aa 1B78     		ldrb	r3, [r3]
 637 02ac DBB2     		uxtb	r3, r3
 638 02ae 23F04003 		bic	r3, r3, #64
 639 02b2 DAB2     		uxtb	r2, r3
 640 02b4 934B     		ldr	r3, .L50
 641 02b6 1A70     		strb	r2, [r3]
 642              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 20


 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 643              		.loc 1 436 0
 644 02b8 934B     		ldr	r3, .L50+4
 645 02ba 1B78     		ldrb	r3, [r3]
 646 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 647              		.loc 1 437 0
 648 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 649 02c0 002B     		cmp	r3, #0
 650 02c2 13D0     		beq	.L26
 651              		.loc 1 437 0 is_stmt 0 discriminator 1
 652 02c4 8F4B     		ldr	r3, .L50
 653 02c6 1B78     		ldrb	r3, [r3]
 654 02c8 DAB2     		uxtb	r2, r3
 655 02ca FB79     		ldrb	r3, [r7, #7]
 656 02cc 1340     		ands	r3, r3, r2
 657 02ce DBB2     		uxtb	r3, r3
 658 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 659 02d2 9A42     		cmp	r2, r3
 660 02d4 0AD1     		bne	.L26
 661              		.loc 1 437 0 discriminator 2
 662 02d6 8D4B     		ldr	r3, .L50+8
 663 02d8 1B78     		ldrb	r3, [r3]
 664 02da DBB2     		uxtb	r3, r3
 665 02dc 43F00803 		orr	r3, r3, #8
 666 02e0 DAB2     		uxtb	r2, r3
 667 02e2 8A4B     		ldr	r3, .L50+8
 668 02e4 1A70     		strb	r2, [r3]
 669 02e6 874B     		ldr	r3, .L50
 670 02e8 0022     		movs	r2, #0
 671 02ea 1A70     		strb	r2, [r3]
 672              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 673              		.loc 1 442 0 is_stmt 1
 674 02ec 884B     		ldr	r3, .L50+12
 675 02ee 1B78     		ldrb	r3, [r3]
 676 02f0 DBB2     		uxtb	r3, r3
 677 02f2 03F02003 		and	r3, r3, #32
 678 02f6 002B     		cmp	r3, #0
 679 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 680              		.loc 1 445 0
 681 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 682              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 683              		.loc 1 450 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 21


 684 02fe 824B     		ldr	r3, .L50+4
 685 0300 1B78     		ldrb	r3, [r3]
 686 0302 DBB2     		uxtb	r3, r3
 687 0304 03F00803 		and	r3, r3, #8
 688 0308 002B     		cmp	r3, #0
 689 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 690              		.loc 1 453 0
 691 030c 814B     		ldr	r3, .L50+16
 692 030e DB78     		ldrb	r3, [r3, #3]
 693 0310 DAB2     		uxtb	r2, r3
 694 0312 814B     		ldr	r3, .L50+20
 695 0314 DB78     		ldrb	r3, [r3, #3]
 696 0316 DBB2     		uxtb	r3, r3
 697 0318 9A42     		cmp	r2, r3
 698 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 699              		.loc 1 456 0
 700 031c 794B     		ldr	r3, .L50
 701 031e 1B78     		ldrb	r3, [r3]
 702 0320 DBB2     		uxtb	r3, r3
 703 0322 43F00803 		orr	r3, r3, #8
 704 0326 DAB2     		uxtb	r2, r3
 705 0328 764B     		ldr	r3, .L50
 706 032a 1A70     		strb	r2, [r3]
 707 032c 07E0     		b	.L27
 708              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 709              		.loc 1 461 0
 710 032e 754B     		ldr	r3, .L50
 711 0330 1B78     		ldrb	r3, [r3]
 712 0332 DBB2     		uxtb	r3, r3
 713 0334 23F00803 		bic	r3, r3, #8
 714 0338 DAB2     		uxtb	r2, r3
 715 033a 724B     		ldr	r3, .L50
 716 033c 1A70     		strb	r2, [r3]
 717              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 718              		.loc 1 466 0
 719 033e 724B     		ldr	r3, .L50+4
 720 0340 1B78     		ldrb	r3, [r3]
 721 0342 DBB2     		uxtb	r3, r3
 722 0344 03F02003 		and	r3, r3, #32
 723 0348 002B     		cmp	r3, #0
 724 034a 18D0     		beq	.L29
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 22


 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 725              		.loc 1 469 0
 726 034c 714B     		ldr	r3, .L50+16
 727 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 728 0350 9AB2     		uxth	r2, r3
 729 0352 714B     		ldr	r3, .L50+20
 730 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 731 0356 9BB2     		uxth	r3, r3
 732 0358 9A42     		cmp	r2, r3
 733 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 734              		.loc 1 472 0
 735 035c 694B     		ldr	r3, .L50
 736 035e 1B78     		ldrb	r3, [r3]
 737 0360 DBB2     		uxtb	r3, r3
 738 0362 43F02003 		orr	r3, r3, #32
 739 0366 DAB2     		uxtb	r2, r3
 740 0368 664B     		ldr	r3, .L50
 741 036a 1A70     		strb	r2, [r3]
 742 036c 07E0     		b	.L29
 743              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 744              		.loc 1 477 0
 745 036e 654B     		ldr	r3, .L50
 746 0370 1B78     		ldrb	r3, [r3]
 747 0372 DBB2     		uxtb	r3, r3
 748 0374 23F02003 		bic	r3, r3, #32
 749 0378 DAB2     		uxtb	r2, r3
 750 037a 624B     		ldr	r3, .L50
 751 037c 1A70     		strb	r2, [r3]
 752              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 753              		.loc 1 482 0
 754 037e 624B     		ldr	r3, .L50+4
 755 0380 1B78     		ldrb	r3, [r3]
 756 0382 DBB2     		uxtb	r3, r3
 757 0384 03F01003 		and	r3, r3, #16
 758 0388 002B     		cmp	r3, #0
 759 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 760              		.loc 1 485 0
 761 038c 614B     		ldr	r3, .L50+16
 762 038e 1B79     		ldrb	r3, [r3, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 23


 763 0390 DAB2     		uxtb	r2, r3
 764 0392 614B     		ldr	r3, .L50+20
 765 0394 1B79     		ldrb	r3, [r3, #4]
 766 0396 DBB2     		uxtb	r3, r3
 767 0398 9A42     		cmp	r2, r3
 768 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 769              		.loc 1 488 0
 770 039c 594B     		ldr	r3, .L50
 771 039e 1B78     		ldrb	r3, [r3]
 772 03a0 DBB2     		uxtb	r3, r3
 773 03a2 43F01003 		orr	r3, r3, #16
 774 03a6 DAB2     		uxtb	r2, r3
 775 03a8 564B     		ldr	r3, .L50
 776 03aa 1A70     		strb	r2, [r3]
 777 03ac 07E0     		b	.L31
 778              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 779              		.loc 1 493 0
 780 03ae 554B     		ldr	r3, .L50
 781 03b0 1B78     		ldrb	r3, [r3]
 782 03b2 DBB2     		uxtb	r3, r3
 783 03b4 23F01003 		bic	r3, r3, #16
 784 03b8 DAB2     		uxtb	r2, r3
 785 03ba 524B     		ldr	r3, .L50
 786 03bc 1A70     		strb	r2, [r3]
 787              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 24


 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 788              		.loc 1 518 0
 789 03be 524B     		ldr	r3, .L50+4
 790 03c0 1B78     		ldrb	r3, [r3]
 791 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 792              		.loc 1 519 0
 793 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 794 03c6 002B     		cmp	r3, #0
 795 03c8 13D0     		beq	.L33
 796              		.loc 1 519 0 is_stmt 0 discriminator 1
 797 03ca 4E4B     		ldr	r3, .L50
 798 03cc 1B78     		ldrb	r3, [r3]
 799 03ce DAB2     		uxtb	r2, r3
 800 03d0 FB79     		ldrb	r3, [r7, #7]
 801 03d2 1340     		ands	r3, r3, r2
 802 03d4 DBB2     		uxtb	r3, r3
 803 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 804 03d8 9A42     		cmp	r2, r3
 805 03da 0AD1     		bne	.L33
 806              		.loc 1 519 0 discriminator 2
 807 03dc 4B4B     		ldr	r3, .L50+8
 808 03de 1B78     		ldrb	r3, [r3]
 809 03e0 DBB2     		uxtb	r3, r3
 810 03e2 43F00803 		orr	r3, r3, #8
 811 03e6 DAB2     		uxtb	r2, r3
 812 03e8 484B     		ldr	r3, .L50+8
 813 03ea 1A70     		strb	r2, [r3]
 814 03ec 454B     		ldr	r3, .L50
 815 03ee 0022     		movs	r2, #0
 816 03f0 1A70     		strb	r2, [r3]
 817              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 818              		.loc 1 524 0 is_stmt 1
 819 03f2 474B     		ldr	r3, .L50+12
 820 03f4 1B78     		ldrb	r3, [r3]
 821 03f6 DBB2     		uxtb	r3, r3
 822 03f8 03F00803 		and	r3, r3, #8
 823 03fc 002B     		cmp	r3, #0
 824 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 825              		.loc 1 527 0
 826 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 827              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 828              		.loc 1 530 0
 829 0404 444B     		ldr	r3, .L50+20
 830 0406 DB78     		ldrb	r3, [r3, #3]
 831 0408 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 25


 832 040a 012B     		cmp	r3, #1
 833 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 834              		.loc 1 533 0
 835 040e 404B     		ldr	r3, .L50+12
 836 0410 1B78     		ldrb	r3, [r3]
 837 0412 DBB2     		uxtb	r3, r3
 838 0414 03F01003 		and	r3, r3, #16
 839 0418 002B     		cmp	r3, #0
 840 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 841              		.loc 1 536 0
 842 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 843              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 844              		.loc 1 543 0
 845 0420 3D4B     		ldr	r3, .L50+20
 846 0422 9B78     		ldrb	r3, [r3, #2]
 847 0424 DBB2     		uxtb	r3, r3
 848 0426 0B2B     		cmp	r3, #11
 849 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 850              		.loc 1 546 0
 851 042a 384B     		ldr	r3, .L50+8
 852 042c 1B78     		ldrb	r3, [r3]
 853 042e DBB2     		uxtb	r3, r3
 854 0430 23F00403 		bic	r3, r3, #4
 855 0434 DAB2     		uxtb	r2, r3
 856 0436 354B     		ldr	r3, .L50+8
 857 0438 1A70     		strb	r2, [r3]
 858 043a 07E0     		b	.L36
 859              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 860              		.loc 1 551 0
 861 043c 334B     		ldr	r3, .L50+8
 862 043e 1B78     		ldrb	r3, [r3]
 863 0440 DBB2     		uxtb	r3, r3
 864 0442 43F00403 		orr	r3, r3, #4
 865 0446 DAB2     		uxtb	r2, r3
 866 0448 304B     		ldr	r3, .L50+8
 867 044a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 26


 868              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 27


 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 28


 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 29


 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 30


 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 31


 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 869              		.loc 1 879 0
 870 044c 2E4B     		ldr	r3, .L50+4
 871 044e 1B78     		ldrb	r3, [r3]
 872 0450 DBB2     		uxtb	r3, r3
 873 0452 03F00403 		and	r3, r3, #4
 874 0456 002B     		cmp	r3, #0
 875 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 876              		.loc 1 881 0
 877 045a 2E4B     		ldr	r3, .L50+16
 878 045c 9B78     		ldrb	r3, [r3, #2]
 879 045e DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 32


 880 0460 2D4B     		ldr	r3, .L50+20
 881 0462 9B78     		ldrb	r3, [r3, #2]
 882 0464 DBB2     		uxtb	r3, r3
 883 0466 9A42     		cmp	r2, r3
 884 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 885              		.loc 1 883 0
 886 046a 264B     		ldr	r3, .L50
 887 046c 1B78     		ldrb	r3, [r3]
 888 046e DBB2     		uxtb	r3, r3
 889 0470 43F00403 		orr	r3, r3, #4
 890 0474 DAB2     		uxtb	r2, r3
 891 0476 234B     		ldr	r3, .L50
 892 0478 1A70     		strb	r2, [r3]
 893 047a 07E0     		b	.L37
 894              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 895              		.loc 1 887 0
 896 047c 214B     		ldr	r3, .L50
 897 047e 1B78     		ldrb	r3, [r3]
 898 0480 DBB2     		uxtb	r3, r3
 899 0482 23F00403 		bic	r3, r3, #4
 900 0486 DAB2     		uxtb	r2, r3
 901 0488 1E4B     		ldr	r3, .L50
 902 048a 1A70     		strb	r2, [r3]
 903              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 904              		.loc 1 892 0
 905 048c 1E4B     		ldr	r3, .L50+4
 906 048e 1B78     		ldrb	r3, [r3]
 907 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 908              		.loc 1 893 0
 909 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 910 0494 002B     		cmp	r3, #0
 911 0496 13D0     		beq	.L39
 912              		.loc 1 893 0 is_stmt 0 discriminator 1
 913 0498 1A4B     		ldr	r3, .L50
 914 049a 1B78     		ldrb	r3, [r3]
 915 049c DAB2     		uxtb	r2, r3
 916 049e FB79     		ldrb	r3, [r7, #7]
 917 04a0 1340     		ands	r3, r3, r2
 918 04a2 DBB2     		uxtb	r3, r3
 919 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 920 04a6 9A42     		cmp	r2, r3
 921 04a8 0AD1     		bne	.L39
 922              		.loc 1 893 0 discriminator 2
 923 04aa 184B     		ldr	r3, .L50+8
 924 04ac 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 33


 925 04ae DBB2     		uxtb	r3, r3
 926 04b0 43F00803 		orr	r3, r3, #8
 927 04b4 DAB2     		uxtb	r2, r3
 928 04b6 154B     		ldr	r3, .L50+8
 929 04b8 1A70     		strb	r2, [r3]
 930 04ba 124B     		ldr	r3, .L50
 931 04bc 0022     		movs	r2, #0
 932 04be 1A70     		strb	r2, [r3]
 933              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 934              		.loc 1 898 0 is_stmt 1
 935 04c0 134B     		ldr	r3, .L50+12
 936 04c2 1B78     		ldrb	r3, [r3]
 937 04c4 DBB2     		uxtb	r3, r3
 938 04c6 03F00403 		and	r3, r3, #4
 939 04ca 002B     		cmp	r3, #0
 940 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 941              		.loc 1 900 0
 942 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 943              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 944              		.loc 1 905 0
 945 04d2 0D4B     		ldr	r3, .L50+4
 946 04d4 1B78     		ldrb	r3, [r3]
 947 04d6 DBB2     		uxtb	r3, r3
 948 04d8 03F00203 		and	r3, r3, #2
 949 04dc 002B     		cmp	r3, #0
 950 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 951              		.loc 1 907 0
 952 04e0 0C4B     		ldr	r3, .L50+16
 953 04e2 5B78     		ldrb	r3, [r3, #1]
 954 04e4 DAB2     		uxtb	r2, r3
 955 04e6 0C4B     		ldr	r3, .L50+20
 956 04e8 5B78     		ldrb	r3, [r3, #1]
 957 04ea DBB2     		uxtb	r3, r3
 958 04ec 9A42     		cmp	r2, r3
 959 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 960              		.loc 1 909 0
 961 04f0 044B     		ldr	r3, .L50
 962 04f2 1B78     		ldrb	r3, [r3]
 963 04f4 DBB2     		uxtb	r3, r3
 964 04f6 43F00203 		orr	r3, r3, #2
 965 04fa DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 34


 966 04fc 014B     		ldr	r3, .L50
 967 04fe 1A70     		strb	r2, [r3]
 968 0500 14E0     		b	.L40
 969              	.L51:
 970 0502 00BF     		.align	2
 971              	.L50:
 972 0504 00000000 		.word	RTC_alarmCurStatus
 973 0508 00000000 		.word	RTC_alarmCfgMask
 974 050c 00000000 		.word	RTC_statusDateTime
 975 0510 00000000 		.word	RTC_intervalCfgMask
 976 0514 00000000 		.word	RTC_alarmCfgTimeDate
 977 0518 00000000 		.word	RTC_currentTimeDate
 978              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 979              		.loc 1 913 0
 980 051c 384B     		ldr	r3, .L52
 981 051e 1B78     		ldrb	r3, [r3]
 982 0520 DBB2     		uxtb	r3, r3
 983 0522 23F00203 		bic	r3, r3, #2
 984 0526 DAB2     		uxtb	r2, r3
 985 0528 354B     		ldr	r3, .L52
 986 052a 1A70     		strb	r2, [r3]
 987              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 988              		.loc 1 918 0
 989 052c 354B     		ldr	r3, .L52+4
 990 052e 1B78     		ldrb	r3, [r3]
 991 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 992              		.loc 1 919 0
 993 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 994 0534 002B     		cmp	r3, #0
 995 0536 13D0     		beq	.L42
 996              		.loc 1 919 0 is_stmt 0 discriminator 1
 997 0538 314B     		ldr	r3, .L52
 998 053a 1B78     		ldrb	r3, [r3]
 999 053c DAB2     		uxtb	r2, r3
 1000 053e FB79     		ldrb	r3, [r7, #7]
 1001 0540 1340     		ands	r3, r3, r2
 1002 0542 DBB2     		uxtb	r3, r3
 1003 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1004 0546 9A42     		cmp	r2, r3
 1005 0548 0AD1     		bne	.L42
 1006              		.loc 1 919 0 discriminator 2
 1007 054a 2F4B     		ldr	r3, .L52+8
 1008 054c 1B78     		ldrb	r3, [r3]
 1009 054e DBB2     		uxtb	r3, r3
 1010 0550 43F00803 		orr	r3, r3, #8
 1011 0554 DAB2     		uxtb	r2, r3
 1012 0556 2C4B     		ldr	r3, .L52+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 35


 1013 0558 1A70     		strb	r2, [r3]
 1014 055a 294B     		ldr	r3, .L52
 1015 055c 0022     		movs	r2, #0
 1016 055e 1A70     		strb	r2, [r3]
 1017              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1018              		.loc 1 924 0 is_stmt 1
 1019 0560 2A4B     		ldr	r3, .L52+12
 1020 0562 1B78     		ldrb	r3, [r3]
 1021 0564 DBB2     		uxtb	r3, r3
 1022 0566 03F00203 		and	r3, r3, #2
 1023 056a 002B     		cmp	r3, #0
 1024 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1025              		.loc 1 926 0
 1026 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1027              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1028              		.loc 1 931 0
 1029 0572 244B     		ldr	r3, .L52+4
 1030 0574 1B78     		ldrb	r3, [r3]
 1031 0576 DBB2     		uxtb	r3, r3
 1032 0578 03F00103 		and	r3, r3, #1
 1033 057c 002B     		cmp	r3, #0
 1034 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1035              		.loc 1 933 0
 1036 0580 234B     		ldr	r3, .L52+16
 1037 0582 1B78     		ldrb	r3, [r3]
 1038 0584 DAB2     		uxtb	r2, r3
 1039 0586 234B     		ldr	r3, .L52+20
 1040 0588 1B78     		ldrb	r3, [r3]
 1041 058a DBB2     		uxtb	r3, r3
 1042 058c 9A42     		cmp	r2, r3
 1043 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1044              		.loc 1 935 0
 1045 0590 1B4B     		ldr	r3, .L52
 1046 0592 1B78     		ldrb	r3, [r3]
 1047 0594 DBB2     		uxtb	r3, r3
 1048 0596 43F00103 		orr	r3, r3, #1
 1049 059a DAB2     		uxtb	r2, r3
 1050 059c 184B     		ldr	r3, .L52
 1051 059e 1A70     		strb	r2, [r3]
 1052 05a0 07E0     		b	.L43
 1053              	.L44:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 36


 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1054              		.loc 1 939 0
 1055 05a2 174B     		ldr	r3, .L52
 1056 05a4 1B78     		ldrb	r3, [r3]
 1057 05a6 DBB2     		uxtb	r3, r3
 1058 05a8 23F00103 		bic	r3, r3, #1
 1059 05ac DAB2     		uxtb	r2, r3
 1060 05ae 144B     		ldr	r3, .L52
 1061 05b0 1A70     		strb	r2, [r3]
 1062              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1063              		.loc 1 944 0
 1064 05b2 144B     		ldr	r3, .L52+4
 1065 05b4 1B78     		ldrb	r3, [r3]
 1066 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1067              		.loc 1 945 0
 1068 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1069 05ba 002B     		cmp	r3, #0
 1070 05bc 13D0     		beq	.L45
 1071              		.loc 1 945 0 is_stmt 0 discriminator 1
 1072 05be 104B     		ldr	r3, .L52
 1073 05c0 1B78     		ldrb	r3, [r3]
 1074 05c2 DAB2     		uxtb	r2, r3
 1075 05c4 FB79     		ldrb	r3, [r7, #7]
 1076 05c6 1340     		ands	r3, r3, r2
 1077 05c8 DBB2     		uxtb	r3, r3
 1078 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1079 05cc 9A42     		cmp	r2, r3
 1080 05ce 0AD1     		bne	.L45
 1081              		.loc 1 945 0 discriminator 2
 1082 05d0 0D4B     		ldr	r3, .L52+8
 1083 05d2 1B78     		ldrb	r3, [r3]
 1084 05d4 DBB2     		uxtb	r3, r3
 1085 05d6 43F00803 		orr	r3, r3, #8
 1086 05da DAB2     		uxtb	r2, r3
 1087 05dc 0A4B     		ldr	r3, .L52+8
 1088 05de 1A70     		strb	r2, [r3]
 1089 05e0 074B     		ldr	r3, .L52
 1090 05e2 0022     		movs	r2, #0
 1091 05e4 1A70     		strb	r2, [r3]
 1092              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1093              		.loc 1 948 0 is_stmt 1
 1094 05e6 094B     		ldr	r3, .L52+12
 1095 05e8 1B78     		ldrb	r3, [r3]
 1096 05ea DBB2     		uxtb	r3, r3
 1097 05ec 03F00103 		and	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 37


 1098 05f0 002B     		cmp	r3, #0
 1099 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1100              		.loc 1 950 0
 1101 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1102              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1103              		.loc 1 956 0
 1104 05f8 00BF     		nop
 1105 05fa 0837     		adds	r7, r7, #8
 1106              		.cfi_def_cfa_offset 8
 1107 05fc BD46     		mov	sp, r7
 1108              		.cfi_def_cfa_register 13
 1109              		@ sp needed
 1110 05fe 80BD     		pop	{r7, pc}
 1111              	.L53:
 1112              		.align	2
 1113              	.L52:
 1114 0600 00000000 		.word	RTC_alarmCurStatus
 1115 0604 00000000 		.word	RTC_alarmCfgMask
 1116 0608 00000000 		.word	RTC_statusDateTime
 1117 060c 00000000 		.word	RTC_intervalCfgMask
 1118 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1119 0614 00000000 		.word	RTC_currentTimeDate
 1120              		.cfi_endproc
 1121              	.LFE71:
 1122              		.size	RTC_ISR, .-RTC_ISR
 1123              		.text
 1124              	.Letext0:
 1125              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1126              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1127              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1128              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1129              		.file 6 "./data.h"
 1130              		.file 7 "./modem.h"
 1131              		.file 8 "./notoriOS.h"
 1132              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1133              		.file 10 "./level_sensor.h"
 1134              		.file 11 "./downstream_level_sensor.h"
 1135              		.file 12 "./App_LED.h"
 1136              		.section	.debug_info,"",%progbits
 1137              	.Ldebug_info0:
 1138 0000 F2060000 		.4byte	0x6f2
 1139 0004 0400     		.2byte	0x4
 1140 0006 00000000 		.4byte	.Ldebug_abbrev0
 1141 000a 04       		.byte	0x4
 1142 000b 01       		.uleb128 0x1
 1143 000c 81000000 		.4byte	.LASF108
 1144 0010 0C       		.byte	0xc
 1145 0011 F4050000 		.4byte	.LASF109
 1146 0015 F8040000 		.4byte	.LASF110
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 38


 1147 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1148 001d 00000000 		.4byte	0
 1149 0021 00000000 		.4byte	.Ldebug_line0
 1150 0025 02       		.uleb128 0x2
 1151 0026 01       		.byte	0x1
 1152 0027 06       		.byte	0x6
 1153 0028 3D030000 		.4byte	.LASF0
 1154 002c 02       		.uleb128 0x2
 1155 002d 01       		.byte	0x1
 1156 002e 08       		.byte	0x8
 1157 002f F2020000 		.4byte	.LASF1
 1158 0033 02       		.uleb128 0x2
 1159 0034 02       		.byte	0x2
 1160 0035 05       		.byte	0x5
 1161 0036 66000000 		.4byte	.LASF2
 1162 003a 02       		.uleb128 0x2
 1163 003b 02       		.byte	0x2
 1164 003c 07       		.byte	0x7
 1165 003d 16040000 		.4byte	.LASF3
 1166 0041 03       		.uleb128 0x3
 1167 0042 03020000 		.4byte	.LASF9
 1168 0046 02       		.byte	0x2
 1169 0047 3F       		.byte	0x3f
 1170 0048 4C000000 		.4byte	0x4c
 1171 004c 02       		.uleb128 0x2
 1172 004d 04       		.byte	0x4
 1173 004e 05       		.byte	0x5
 1174 004f 12020000 		.4byte	.LASF4
 1175 0053 02       		.uleb128 0x2
 1176 0054 04       		.byte	0x4
 1177 0055 07       		.byte	0x7
 1178 0056 52050000 		.4byte	.LASF5
 1179 005a 02       		.uleb128 0x2
 1180 005b 08       		.byte	0x8
 1181 005c 05       		.byte	0x5
 1182 005d F5010000 		.4byte	.LASF6
 1183 0061 02       		.uleb128 0x2
 1184 0062 08       		.byte	0x8
 1185 0063 07       		.byte	0x7
 1186 0064 66030000 		.4byte	.LASF7
 1187 0068 04       		.uleb128 0x4
 1188 0069 04       		.byte	0x4
 1189 006a 05       		.byte	0x5
 1190 006b 696E7400 		.ascii	"int\000"
 1191 006f 02       		.uleb128 0x2
 1192 0070 04       		.byte	0x4
 1193 0071 07       		.byte	0x7
 1194 0072 A1030000 		.4byte	.LASF8
 1195 0076 03       		.uleb128 0x3
 1196 0077 98040000 		.4byte	.LASF10
 1197 007b 03       		.byte	0x3
 1198 007c 2C       		.byte	0x2c
 1199 007d 41000000 		.4byte	0x41
 1200 0081 05       		.uleb128 0x5
 1201 0082 94010000 		.4byte	.LASF11
 1202 0086 04       		.byte	0x4
 1203 0087 9201     		.2byte	0x192
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 39


 1204 0089 2C000000 		.4byte	0x2c
 1205 008d 05       		.uleb128 0x5
 1206 008e 60010000 		.4byte	.LASF12
 1207 0092 04       		.byte	0x4
 1208 0093 9301     		.2byte	0x193
 1209 0095 3A000000 		.4byte	0x3a
 1210 0099 05       		.uleb128 0x5
 1211 009a A7010000 		.4byte	.LASF13
 1212 009e 04       		.byte	0x4
 1213 009f 9601     		.2byte	0x196
 1214 00a1 33000000 		.4byte	0x33
 1215 00a5 05       		.uleb128 0x5
 1216 00a6 64050000 		.4byte	.LASF14
 1217 00aa 04       		.byte	0x4
 1218 00ab 9701     		.2byte	0x197
 1219 00ad 4C000000 		.4byte	0x4c
 1220 00b1 02       		.uleb128 0x2
 1221 00b2 04       		.byte	0x4
 1222 00b3 04       		.byte	0x4
 1223 00b4 D0010000 		.4byte	.LASF15
 1224 00b8 02       		.uleb128 0x2
 1225 00b9 08       		.byte	0x8
 1226 00ba 04       		.byte	0x4
 1227 00bb 6A050000 		.4byte	.LASF16
 1228 00bf 02       		.uleb128 0x2
 1229 00c0 01       		.byte	0x1
 1230 00c1 08       		.byte	0x8
 1231 00c2 0D020000 		.4byte	.LASF17
 1232 00c6 06       		.uleb128 0x6
 1233 00c7 81000000 		.4byte	0x81
 1234 00cb 07       		.uleb128 0x7
 1235 00cc 0C       		.byte	0xc
 1236 00cd 05       		.byte	0x5
 1237 00ce 30       		.byte	0x30
 1238 00cf 34010000 		.4byte	0x134
 1239 00d3 08       		.uleb128 0x8
 1240 00d4 53656300 		.ascii	"Sec\000"
 1241 00d8 05       		.byte	0x5
 1242 00d9 32       		.byte	0x32
 1243 00da 81000000 		.4byte	0x81
 1244 00de 00       		.byte	0
 1245 00df 08       		.uleb128 0x8
 1246 00e0 4D696E00 		.ascii	"Min\000"
 1247 00e4 05       		.byte	0x5
 1248 00e5 33       		.byte	0x33
 1249 00e6 81000000 		.4byte	0x81
 1250 00ea 01       		.byte	0x1
 1251 00eb 09       		.uleb128 0x9
 1252 00ec 36010000 		.4byte	.LASF18
 1253 00f0 05       		.byte	0x5
 1254 00f1 34       		.byte	0x34
 1255 00f2 81000000 		.4byte	0x81
 1256 00f6 02       		.byte	0x2
 1257 00f7 09       		.uleb128 0x9
 1258 00f8 D6010000 		.4byte	.LASF19
 1259 00fc 05       		.byte	0x5
 1260 00fd 35       		.byte	0x35
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 40


 1261 00fe 81000000 		.4byte	0x81
 1262 0102 03       		.byte	0x3
 1263 0103 09       		.uleb128 0x9
 1264 0104 E8040000 		.4byte	.LASF20
 1265 0108 05       		.byte	0x5
 1266 0109 36       		.byte	0x36
 1267 010a 81000000 		.4byte	0x81
 1268 010e 04       		.byte	0x4
 1269 010f 09       		.uleb128 0x9
 1270 0110 DD060000 		.4byte	.LASF21
 1271 0114 05       		.byte	0x5
 1272 0115 37       		.byte	0x37
 1273 0116 8D000000 		.4byte	0x8d
 1274 011a 06       		.byte	0x6
 1275 011b 09       		.uleb128 0x9
 1276 011c 7A020000 		.4byte	.LASF22
 1277 0120 05       		.byte	0x5
 1278 0121 38       		.byte	0x38
 1279 0122 81000000 		.4byte	0x81
 1280 0126 08       		.byte	0x8
 1281 0127 09       		.uleb128 0x9
 1282 0128 59020000 		.4byte	.LASF23
 1283 012c 05       		.byte	0x5
 1284 012d 39       		.byte	0x39
 1285 012e 8D000000 		.4byte	0x8d
 1286 0132 0A       		.byte	0xa
 1287 0133 00       		.byte	0
 1288 0134 03       		.uleb128 0x3
 1289 0135 67060000 		.4byte	.LASF24
 1290 0139 05       		.byte	0x5
 1291 013a 3A       		.byte	0x3a
 1292 013b 3F010000 		.4byte	0x13f
 1293 013f 06       		.uleb128 0x6
 1294 0140 CB000000 		.4byte	0xcb
 1295 0144 02       		.uleb128 0x2
 1296 0145 08       		.byte	0x8
 1297 0146 04       		.byte	0x4
 1298 0147 C3020000 		.4byte	.LASF25
 1299 014b 02       		.uleb128 0x2
 1300 014c 04       		.byte	0x4
 1301 014d 07       		.byte	0x7
 1302 014e 70000000 		.4byte	.LASF26
 1303 0152 0A       		.uleb128 0xa
 1304 0153 BF000000 		.4byte	0xbf
 1305 0157 62010000 		.4byte	0x162
 1306 015b 0B       		.uleb128 0xb
 1307 015c 4B010000 		.4byte	0x14b
 1308 0160 17       		.byte	0x17
 1309 0161 00       		.byte	0
 1310 0162 07       		.uleb128 0x7
 1311 0163 2C       		.byte	0x2c
 1312 0164 06       		.byte	0x6
 1313 0165 14       		.byte	0x14
 1314 0166 8F010000 		.4byte	0x18f
 1315 016a 08       		.uleb128 0x8
 1316 016b 6B657900 		.ascii	"key\000"
 1317 016f 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 41


 1318 0170 15       		.byte	0x15
 1319 0171 8F010000 		.4byte	0x18f
 1320 0175 00       		.byte	0
 1321 0176 09       		.uleb128 0x9
 1322 0177 5A010000 		.4byte	.LASF27
 1323 017b 06       		.byte	0x6
 1324 017c 16       		.byte	0x16
 1325 017d 8F010000 		.4byte	0x18f
 1326 0181 14       		.byte	0x14
 1327 0182 09       		.uleb128 0x9
 1328 0183 AD010000 		.4byte	.LASF28
 1329 0187 06       		.byte	0x6
 1330 0188 17       		.byte	0x17
 1331 0189 A5000000 		.4byte	0xa5
 1332 018d 28       		.byte	0x28
 1333 018e 00       		.byte	0
 1334 018f 0A       		.uleb128 0xa
 1335 0190 BF000000 		.4byte	0xbf
 1336 0194 9F010000 		.4byte	0x19f
 1337 0198 0B       		.uleb128 0xb
 1338 0199 4B010000 		.4byte	0x14b
 1339 019d 13       		.byte	0x13
 1340 019e 00       		.byte	0
 1341 019f 03       		.uleb128 0x3
 1342 01a0 AE030000 		.4byte	.LASF29
 1343 01a4 06       		.byte	0x6
 1344 01a5 19       		.byte	0x19
 1345 01a6 62010000 		.4byte	0x162
 1346 01aa 07       		.uleb128 0x7
 1347 01ab 3C       		.byte	0x3c
 1348 01ac 07       		.byte	0x7
 1349 01ad 36       		.byte	0x36
 1350 01ae D7010000 		.4byte	0x1d7
 1351 01b2 09       		.uleb128 0x9
 1352 01b3 1A000000 		.4byte	.LASF30
 1353 01b7 07       		.byte	0x7
 1354 01b8 37       		.byte	0x37
 1355 01b9 8F010000 		.4byte	0x18f
 1356 01bd 00       		.byte	0
 1357 01be 09       		.uleb128 0x9
 1358 01bf 00000000 		.4byte	.LASF31
 1359 01c3 07       		.byte	0x7
 1360 01c4 38       		.byte	0x38
 1361 01c5 8F010000 		.4byte	0x18f
 1362 01c9 14       		.byte	0x14
 1363 01ca 09       		.uleb128 0x9
 1364 01cb 93040000 		.4byte	.LASF32
 1365 01cf 07       		.byte	0x7
 1366 01d0 39       		.byte	0x39
 1367 01d1 8F010000 		.4byte	0x18f
 1368 01d5 28       		.byte	0x28
 1369 01d6 00       		.byte	0
 1370 01d7 03       		.uleb128 0x3
 1371 01d8 B1050000 		.4byte	.LASF33
 1372 01dc 07       		.byte	0x7
 1373 01dd 3B       		.byte	0x3b
 1374 01de AA010000 		.4byte	0x1aa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 42


 1375 01e2 07       		.uleb128 0x7
 1376 01e3 20       		.byte	0x20
 1377 01e4 07       		.byte	0x7
 1378 01e5 3D       		.byte	0x3d
 1379 01e6 4B020000 		.4byte	0x24b
 1380 01ea 09       		.uleb128 0x9
 1381 01eb BA030000 		.4byte	.LASF34
 1382 01ef 07       		.byte	0x7
 1383 01f0 3E       		.byte	0x3e
 1384 01f1 68000000 		.4byte	0x68
 1385 01f5 00       		.byte	0
 1386 01f6 08       		.uleb128 0x8
 1387 01f7 62657200 		.ascii	"ber\000"
 1388 01fb 07       		.byte	0x7
 1389 01fc 3F       		.byte	0x3f
 1390 01fd 68000000 		.4byte	0x68
 1391 0201 04       		.byte	0x4
 1392 0202 09       		.uleb128 0x9
 1393 0203 A2010000 		.4byte	.LASF35
 1394 0207 07       		.byte	0x7
 1395 0208 40       		.byte	0x40
 1396 0209 68000000 		.4byte	0x68
 1397 020d 08       		.byte	0x8
 1398 020e 09       		.uleb128 0x9
 1399 020f 49010000 		.4byte	.LASF36
 1400 0213 07       		.byte	0x7
 1401 0214 41       		.byte	0x41
 1402 0215 68000000 		.4byte	0x68
 1403 0219 0C       		.byte	0xc
 1404 021a 09       		.uleb128 0x9
 1405 021b F3040000 		.4byte	.LASF37
 1406 021f 07       		.byte	0x7
 1407 0220 42       		.byte	0x42
 1408 0221 68000000 		.4byte	0x68
 1409 0225 10       		.byte	0x10
 1410 0226 09       		.uleb128 0x9
 1411 0227 00030000 		.4byte	.LASF38
 1412 022b 07       		.byte	0x7
 1413 022c 43       		.byte	0x43
 1414 022d 68000000 		.4byte	0x68
 1415 0231 14       		.byte	0x14
 1416 0232 09       		.uleb128 0x9
 1417 0233 29040000 		.4byte	.LASF39
 1418 0237 07       		.byte	0x7
 1419 0238 44       		.byte	0x44
 1420 0239 68000000 		.4byte	0x68
 1421 023d 18       		.byte	0x18
 1422 023e 09       		.uleb128 0x9
 1423 023f 60040000 		.4byte	.LASF40
 1424 0243 07       		.byte	0x7
 1425 0244 45       		.byte	0x45
 1426 0245 68000000 		.4byte	0x68
 1427 0249 1C       		.byte	0x1c
 1428 024a 00       		.byte	0
 1429 024b 03       		.uleb128 0x3
 1430 024c A8040000 		.4byte	.LASF41
 1431 0250 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 43


 1432 0251 47       		.byte	0x47
 1433 0252 E2010000 		.4byte	0x1e2
 1434 0256 07       		.uleb128 0x7
 1435 0257 08       		.byte	0x8
 1436 0258 07       		.byte	0x7
 1437 0259 53       		.byte	0x53
 1438 025a BF020000 		.4byte	0x2bf
 1439 025e 09       		.uleb128 0x9
 1440 025f 93060000 		.4byte	.LASF42
 1441 0263 07       		.byte	0x7
 1442 0264 55       		.byte	0x55
 1443 0265 81000000 		.4byte	0x81
 1444 0269 00       		.byte	0
 1445 026a 09       		.uleb128 0x9
 1446 026b 02040000 		.4byte	.LASF43
 1447 026f 07       		.byte	0x7
 1448 0270 57       		.byte	0x57
 1449 0271 BF020000 		.4byte	0x2bf
 1450 0275 01       		.byte	0x1
 1451 0276 09       		.uleb128 0x9
 1452 0277 9A020000 		.4byte	.LASF44
 1453 027b 07       		.byte	0x7
 1454 027c 59       		.byte	0x59
 1455 027d 81000000 		.4byte	0x81
 1456 0281 02       		.byte	0x2
 1457 0282 09       		.uleb128 0x9
 1458 0283 C0030000 		.4byte	.LASF45
 1459 0287 07       		.byte	0x7
 1460 0288 5B       		.byte	0x5b
 1461 0289 81000000 		.4byte	0x81
 1462 028d 03       		.byte	0x3
 1463 028e 09       		.uleb128 0x9
 1464 028f A5050000 		.4byte	.LASF46
 1465 0293 07       		.byte	0x7
 1466 0294 5E       		.byte	0x5e
 1467 0295 81000000 		.4byte	0x81
 1468 0299 04       		.byte	0x4
 1469 029a 09       		.uleb128 0x9
 1470 029b 29010000 		.4byte	.LASF47
 1471 029f 07       		.byte	0x7
 1472 02a0 63       		.byte	0x63
 1473 02a1 81000000 		.4byte	0x81
 1474 02a5 05       		.byte	0x5
 1475 02a6 09       		.uleb128 0x9
 1476 02a7 A7020000 		.4byte	.LASF48
 1477 02ab 07       		.byte	0x7
 1478 02ac 65       		.byte	0x65
 1479 02ad 81000000 		.4byte	0x81
 1480 02b1 06       		.byte	0x6
 1481 02b2 09       		.uleb128 0x9
 1482 02b3 49030000 		.4byte	.LASF49
 1483 02b7 07       		.byte	0x7
 1484 02b8 66       		.byte	0x66
 1485 02b9 81000000 		.4byte	0x81
 1486 02bd 07       		.byte	0x7
 1487 02be 00       		.byte	0
 1488 02bf 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 44


 1489 02c0 01       		.byte	0x1
 1490 02c1 02       		.byte	0x2
 1491 02c2 B6040000 		.4byte	.LASF50
 1492 02c6 03       		.uleb128 0x3
 1493 02c7 EB030000 		.4byte	.LASF51
 1494 02cb 07       		.byte	0x7
 1495 02cc 68       		.byte	0x68
 1496 02cd 56020000 		.4byte	0x256
 1497 02d1 07       		.uleb128 0x7
 1498 02d2 06       		.byte	0x6
 1499 02d3 08       		.byte	0x8
 1500 02d4 2F       		.byte	0x2f
 1501 02d5 0A030000 		.4byte	0x30a
 1502 02d9 09       		.uleb128 0x9
 1503 02da 57000000 		.4byte	.LASF52
 1504 02de 08       		.byte	0x8
 1505 02df 31       		.byte	0x31
 1506 02e0 8D000000 		.4byte	0x8d
 1507 02e4 00       		.byte	0
 1508 02e5 09       		.uleb128 0x9
 1509 02e6 41000000 		.4byte	.LASF53
 1510 02ea 08       		.byte	0x8
 1511 02eb 32       		.byte	0x32
 1512 02ec 99000000 		.4byte	0x99
 1513 02f0 02       		.byte	0x2
 1514 02f1 09       		.uleb128 0x9
 1515 02f2 BE050000 		.4byte	.LASF54
 1516 02f6 08       		.byte	0x8
 1517 02f7 33       		.byte	0x33
 1518 02f8 81000000 		.4byte	0x81
 1519 02fc 04       		.byte	0x4
 1520 02fd 09       		.uleb128 0x9
 1521 02fe C5060000 		.4byte	.LASF55
 1522 0302 08       		.byte	0x8
 1523 0303 34       		.byte	0x34
 1524 0304 81000000 		.4byte	0x81
 1525 0308 05       		.byte	0x5
 1526 0309 00       		.byte	0
 1527 030a 03       		.uleb128 0x3
 1528 030b 94020000 		.4byte	.LASF56
 1529 030f 08       		.byte	0x8
 1530 0310 37       		.byte	0x37
 1531 0311 15030000 		.4byte	0x315
 1532 0315 06       		.uleb128 0x6
 1533 0316 D1020000 		.4byte	0x2d1
 1534 031a 07       		.uleb128 0x7
 1535 031b 1C       		.byte	0x1c
 1536 031c 08       		.byte	0x8
 1537 031d 3A       		.byte	0x3a
 1538 031e 3B030000 		.4byte	0x33b
 1539 0322 09       		.uleb128 0x9
 1540 0323 2B020000 		.4byte	.LASF57
 1541 0327 08       		.byte	0x8
 1542 0328 3C       		.byte	0x3c
 1543 0329 3B030000 		.4byte	0x33b
 1544 032d 00       		.byte	0
 1545 032e 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 45


 1546 032f 3B010000 		.4byte	.LASF58
 1547 0333 08       		.byte	0x8
 1548 0334 3D       		.byte	0x3d
 1549 0335 52010000 		.4byte	0x152
 1550 0339 04       		.byte	0x4
 1551 033a 00       		.byte	0
 1552 033b 0C       		.uleb128 0xc
 1553 033c 04       		.byte	0x4
 1554 033d D7010000 		.4byte	0x1d7
 1555 0341 03       		.uleb128 0x3
 1556 0342 0B040000 		.4byte	.LASF59
 1557 0346 08       		.byte	0x8
 1558 0347 3F       		.byte	0x3f
 1559 0348 1A030000 		.4byte	0x31a
 1560 034c 07       		.uleb128 0x7
 1561 034d 68       		.byte	0x68
 1562 034e 08       		.byte	0x8
 1563 034f 45       		.byte	0x45
 1564 0350 6D030000 		.4byte	0x36d
 1565 0354 09       		.uleb128 0x9
 1566 0355 79000000 		.4byte	.LASF60
 1567 0359 08       		.byte	0x8
 1568 035a 4A       		.byte	0x4a
 1569 035b 6D030000 		.4byte	0x36d
 1570 035f 00       		.byte	0
 1571 0360 09       		.uleb128 0x9
 1572 0361 DF050000 		.4byte	.LASF61
 1573 0365 08       		.byte	0x8
 1574 0366 4B       		.byte	0x4b
 1575 0367 68000000 		.4byte	0x68
 1576 036b 64       		.byte	0x64
 1577 036c 00       		.byte	0
 1578 036d 0A       		.uleb128 0xa
 1579 036e BF000000 		.4byte	0xbf
 1580 0372 7D030000 		.4byte	0x37d
 1581 0376 0B       		.uleb128 0xb
 1582 0377 4B010000 		.4byte	0x14b
 1583 037b 63       		.byte	0x63
 1584 037c 00       		.byte	0
 1585 037d 03       		.uleb128 0x3
 1586 037e 32000000 		.4byte	.LASF62
 1587 0382 08       		.byte	0x8
 1588 0383 51       		.byte	0x51
 1589 0384 4C030000 		.4byte	0x34c
 1590 0388 0D       		.uleb128 0xd
 1591 0389 71050000 		.4byte	.LASF63
 1592 038d 01       		.byte	0x1
 1593 038e 36       		.byte	0x36
 1594 038f 00000000 		.4byte	.LFB64
 1595 0393 0E000000 		.4byte	.LFE64-.LFB64
 1596 0397 01       		.uleb128 0x1
 1597 0398 9C       		.byte	0x9c
 1598 0399 0D       		.uleb128 0xd
 1599 039a 3B050000 		.4byte	.LASF64
 1600 039e 01       		.byte	0x1
 1601 039f 51       		.byte	0x51
 1602 03a0 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 46


 1603 03a4 0E000000 		.4byte	.LFE65-.LFB65
 1604 03a8 01       		.uleb128 0x1
 1605 03a9 9C       		.byte	0x9c
 1606 03aa 0D       		.uleb128 0xd
 1607 03ab D3040000 		.4byte	.LASF65
 1608 03af 01       		.byte	0x1
 1609 03b0 6C       		.byte	0x6c
 1610 03b1 00000000 		.4byte	.LFB66
 1611 03b5 0E000000 		.4byte	.LFE66-.LFB66
 1612 03b9 01       		.uleb128 0x1
 1613 03ba 9C       		.byte	0x9c
 1614 03bb 0D       		.uleb128 0xd
 1615 03bc 80020000 		.4byte	.LASF66
 1616 03c0 01       		.byte	0x1
 1617 03c1 87       		.byte	0x87
 1618 03c2 00000000 		.4byte	.LFB67
 1619 03c6 0E000000 		.4byte	.LFE67-.LFB67
 1620 03ca 01       		.uleb128 0x1
 1621 03cb 9C       		.byte	0x9c
 1622 03cc 0D       		.uleb128 0xd
 1623 03cd 0F010000 		.4byte	.LASF67
 1624 03d1 01       		.byte	0x1
 1625 03d2 A2       		.byte	0xa2
 1626 03d3 00000000 		.4byte	.LFB68
 1627 03d7 0E000000 		.4byte	.LFE68-.LFB68
 1628 03db 01       		.uleb128 0x1
 1629 03dc 9C       		.byte	0x9c
 1630 03dd 0D       		.uleb128 0xd
 1631 03de 36020000 		.4byte	.LASF68
 1632 03e2 01       		.byte	0x1
 1633 03e3 BD       		.byte	0xbd
 1634 03e4 00000000 		.4byte	.LFB69
 1635 03e8 0E000000 		.4byte	.LFE69-.LFB69
 1636 03ec 01       		.uleb128 0x1
 1637 03ed 9C       		.byte	0x9c
 1638 03ee 0D       		.uleb128 0xd
 1639 03ef 27060000 		.4byte	.LASF69
 1640 03f3 01       		.byte	0x1
 1641 03f4 D8       		.byte	0xd8
 1642 03f5 00000000 		.4byte	.LFB70
 1643 03f9 0E000000 		.4byte	.LFE70-.LFB70
 1644 03fd 01       		.uleb128 0x1
 1645 03fe 9C       		.byte	0x9c
 1646 03ff 0E       		.uleb128 0xe
 1647 0400 9A010000 		.4byte	.LASF111
 1648 0404 01       		.byte	0x1
 1649 0405 0B01     		.2byte	0x10b
 1650 0407 00000000 		.4byte	.LFB71
 1651 040b 18060000 		.4byte	.LFE71-.LFB71
 1652 040f 01       		.uleb128 0x1
 1653 0410 9C       		.byte	0x9c
 1654 0411 25040000 		.4byte	0x425
 1655 0415 0F       		.uleb128 0xf
 1656 0416 A0040000 		.4byte	.LASF112
 1657 041a 01       		.byte	0x1
 1658 041b 0D01     		.2byte	0x10d
 1659 041d 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 47


 1660 0421 02       		.uleb128 0x2
 1661 0422 91       		.byte	0x91
 1662 0423 77       		.sleb128 -9
 1663 0424 00       		.byte	0
 1664 0425 10       		.uleb128 0x10
 1665 0426 1C030000 		.4byte	.LASF70
 1666 042a 05       		.byte	0x5
 1667 042b 2D01     		.2byte	0x12d
 1668 042d 34010000 		.4byte	0x134
 1669 0431 10       		.uleb128 0x10
 1670 0432 8D030000 		.4byte	.LASF71
 1671 0436 05       		.byte	0x5
 1672 0437 2E01     		.2byte	0x12e
 1673 0439 34010000 		.4byte	0x134
 1674 043d 10       		.uleb128 0x10
 1675 043e 09000000 		.4byte	.LASF72
 1676 0442 05       		.byte	0x5
 1677 0443 3901     		.2byte	0x139
 1678 0445 C6000000 		.4byte	0xc6
 1679 0449 10       		.uleb128 0x10
 1680 044a CA030000 		.4byte	.LASF73
 1681 044e 05       		.byte	0x5
 1682 044f 3A01     		.2byte	0x13a
 1683 0451 C6000000 		.4byte	0xc6
 1684 0455 10       		.uleb128 0x10
 1685 0456 75060000 		.4byte	.LASF74
 1686 045a 05       		.byte	0x5
 1687 045b 3B01     		.2byte	0x13b
 1688 045d C6000000 		.4byte	0xc6
 1689 0461 10       		.uleb128 0x10
 1690 0462 CC050000 		.4byte	.LASF75
 1691 0466 05       		.byte	0x5
 1692 0467 3C01     		.2byte	0x13c
 1693 0469 C6000000 		.4byte	0xc6
 1694 046d 0A       		.uleb128 0xa
 1695 046e 7D040000 		.4byte	0x47d
 1696 0472 7D040000 		.4byte	0x47d
 1697 0476 0B       		.uleb128 0xb
 1698 0477 4B010000 		.4byte	0x14b
 1699 047b 0B       		.byte	0xb
 1700 047c 00       		.byte	0
 1701 047d 11       		.uleb128 0x11
 1702 047e 81000000 		.4byte	0x81
 1703 0482 10       		.uleb128 0x10
 1704 0483 21000000 		.4byte	.LASF76
 1705 0487 05       		.byte	0x5
 1706 0488 3E01     		.2byte	0x13e
 1707 048a 8E040000 		.4byte	0x48e
 1708 048e 11       		.uleb128 0x11
 1709 048f 6D040000 		.4byte	0x46d
 1710 0493 10       		.uleb128 0x10
 1711 0494 5A060000 		.4byte	.LASF77
 1712 0498 09       		.byte	0x9
 1713 0499 1207     		.2byte	0x712
 1714 049b 9F040000 		.4byte	0x49f
 1715 049f 06       		.uleb128 0x6
 1716 04a0 76000000 		.4byte	0x76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 48


 1717 04a4 12       		.uleb128 0x12
 1718 04a5 41040000 		.4byte	.LASF78
 1719 04a9 0A       		.byte	0xa
 1720 04aa 25       		.byte	0x25
 1721 04ab 6D030000 		.4byte	0x36d
 1722 04af 05       		.uleb128 0x5
 1723 04b0 03       		.byte	0x3
 1724 04b1 00000000 		.4byte	level_sensor_inbox
 1725 04b5 12       		.uleb128 0x12
 1726 04b6 E0010000 		.4byte	.LASF79
 1727 04ba 0A       		.byte	0xa
 1728 04bb 27       		.byte	0x27
 1729 04bc BF020000 		.4byte	0x2bf
 1730 04c0 05       		.uleb128 0x5
 1731 04c1 03       		.byte	0x3
 1732 04c2 00000000 		.4byte	level_sensor_enabled
 1733 04c6 12       		.uleb128 0x12
 1734 04c7 3C060000 		.4byte	.LASF80
 1735 04cb 0B       		.byte	0xb
 1736 04cc 0F       		.byte	0xf
 1737 04cd 6D030000 		.4byte	0x36d
 1738 04d1 05       		.uleb128 0x5
 1739 04d2 03       		.byte	0x3
 1740 04d3 00000000 		.4byte	downstream_level_sensor_inbox
 1741 04d7 12       		.uleb128 0x12
 1742 04d8 73040000 		.4byte	.LASF81
 1743 04dc 0B       		.byte	0xb
 1744 04dd 11       		.byte	0x11
 1745 04de BF020000 		.4byte	0x2bf
 1746 04e2 05       		.uleb128 0x5
 1747 04e3 03       		.byte	0x3
 1748 04e4 00000000 		.4byte	downstream_level_sensor_enabled
 1749 04e8 12       		.uleb128 0x12
 1750 04e9 1B020000 		.4byte	.LASF82
 1751 04ed 06       		.byte	0x6
 1752 04ee 11       		.byte	0x11
 1753 04ef BF020000 		.4byte	0x2bf
 1754 04f3 05       		.uleb128 0x5
 1755 04f4 03       		.byte	0x3
 1756 04f5 00000000 		.4byte	buffer_overflow
 1757 04f9 12       		.uleb128 0x12
 1758 04fa 82010000 		.4byte	.LASF83
 1759 04fe 06       		.byte	0x6
 1760 04ff 22       		.byte	0x22
 1761 0500 8D000000 		.4byte	0x8d
 1762 0504 05       		.uleb128 0x5
 1763 0505 03       		.byte	0x3
 1764 0506 00000000 		.4byte	dataPointsInStack
 1765 050a 12       		.uleb128 0x12
 1766 050b B7010000 		.4byte	.LASF84
 1767 050f 06       		.byte	0x6
 1768 0510 23       		.byte	0x23
 1769 0511 8D000000 		.4byte	0x8d
 1770 0515 05       		.uleb128 0x5
 1771 0516 03       		.byte	0x3
 1772 0517 00000000 		.4byte	dataPointsInStackDesired
 1773 051b 0A       		.uleb128 0xa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 49


 1774 051c 9F010000 		.4byte	0x19f
 1775 0520 2B050000 		.4byte	0x52b
 1776 0524 0B       		.uleb128 0xb
 1777 0525 4B010000 		.4byte	0x14b
 1778 0529 95       		.byte	0x95
 1779 052a 00       		.byte	0
 1780 052b 12       		.uleb128 0x12
 1781 052c 24010000 		.4byte	.LASF85
 1782 0530 06       		.byte	0x6
 1783 0531 24       		.byte	0x24
 1784 0532 1B050000 		.4byte	0x51b
 1785 0536 05       		.uleb128 0x5
 1786 0537 03       		.byte	0x3
 1787 0538 00000000 		.4byte	data
 1788 053c 12       		.uleb128 0x12
 1789 053d 31030000 		.4byte	.LASF86
 1790 0541 07       		.byte	0x7
 1791 0542 20       		.byte	0x20
 1792 0543 81000000 		.4byte	0x81
 1793 0547 05       		.uleb128 0x5
 1794 0548 03       		.byte	0x3
 1795 0549 00000000 		.4byte	modem_state
 1796 054d 12       		.uleb128 0x12
 1797 054e 05030000 		.4byte	.LASF87
 1798 0552 07       		.byte	0x7
 1799 0553 6B       		.byte	0x6b
 1800 0554 A5000000 		.4byte	0xa5
 1801 0558 05       		.uleb128 0x5
 1802 0559 03       		.byte	0x3
 1803 055a 00000000 		.4byte	modem_start_time_stamp
 1804 055e 12       		.uleb128 0x12
 1805 055f 2B020000 		.4byte	.LASF57
 1806 0563 07       		.byte	0x7
 1807 0564 6C       		.byte	0x6c
 1808 0565 D7010000 		.4byte	0x1d7
 1809 0569 05       		.uleb128 0x5
 1810 056a 03       		.byte	0x3
 1811 056b 00000000 		.4byte	modem_info
 1812 056f 12       		.uleb128 0x12
 1813 0570 88050000 		.4byte	.LASF88
 1814 0574 07       		.byte	0x7
 1815 0575 6D       		.byte	0x6d
 1816 0576 4B020000 		.4byte	0x24b
 1817 057a 05       		.uleb128 0x5
 1818 057b 03       		.byte	0x3
 1819 057c 00000000 		.4byte	modem_stats
 1820 0580 12       		.uleb128 0x12
 1821 0581 DD020000 		.4byte	.LASF89
 1822 0585 07       		.byte	0x7
 1823 0586 6E       		.byte	0x6e
 1824 0587 C6020000 		.4byte	0x2c6
 1825 058b 05       		.uleb128 0x5
 1826 058c 03       		.byte	0x3
 1827 058d 00000000 		.4byte	updatable_parameters
 1828 0591 12       		.uleb128 0x12
 1829 0592 9D060000 		.4byte	.LASF90
 1830 0596 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 50


 1831 0597 07       		.byte	0x7
 1832 0598 BF020000 		.4byte	0x2bf
 1833 059c 05       		.uleb128 0x5
 1834 059d 03       		.byte	0x3
 1835 059e 00000000 		.4byte	App_LED_enabled
 1836 05a2 12       		.uleb128 0x12
 1837 05a3 CF020000 		.4byte	.LASF91
 1838 05a7 0C       		.byte	0xc
 1839 05a8 08       		.byte	0x8
 1840 05a9 6D030000 		.4byte	0x36d
 1841 05ad 05       		.uleb128 0x5
 1842 05ae 03       		.byte	0x3
 1843 05af 00000000 		.4byte	app_led_inbox
 1844 05b3 0A       		.uleb128 0xa
 1845 05b4 BF000000 		.4byte	0xbf
 1846 05b8 C4050000 		.4byte	0x5c4
 1847 05bc 13       		.uleb128 0x13
 1848 05bd 4B010000 		.4byte	0x14b
 1849 05c1 0F27     		.2byte	0x270f
 1850 05c3 00       		.byte	0
 1851 05c4 12       		.uleb128 0x12
 1852 05c5 AD060000 		.4byte	.LASF92
 1853 05c9 08       		.byte	0x8
 1854 05ca 19       		.byte	0x19
 1855 05cb B3050000 		.4byte	0x5b3
 1856 05cf 05       		.uleb128 0x5
 1857 05d0 03       		.byte	0x3
 1858 05d1 00000000 		.4byte	http_request
 1859 05d5 12       		.uleb128 0x12
 1860 05d6 89060000 		.4byte	.LASF93
 1861 05da 08       		.byte	0x8
 1862 05db 1A       		.byte	0x1a
 1863 05dc B3050000 		.4byte	0x5b3
 1864 05e0 05       		.uleb128 0x5
 1865 05e1 03       		.byte	0x3
 1866 05e2 00000000 		.4byte	http_body
 1867 05e6 0A       		.uleb128 0xa
 1868 05e7 BF000000 		.4byte	0xbf
 1869 05eb F6050000 		.4byte	0x5f6
 1870 05ef 0B       		.uleb128 0xb
 1871 05f0 4B010000 		.4byte	0x14b
 1872 05f4 C7       		.byte	0xc7
 1873 05f5 00       		.byte	0
 1874 05f6 12       		.uleb128 0x12
 1875 05f7 30050000 		.4byte	.LASF94
 1876 05fb 08       		.byte	0x8
 1877 05fc 1B       		.byte	0x1b
 1878 05fd E6050000 		.4byte	0x5e6
 1879 0601 05       		.uleb128 0x5
 1880 0602 03       		.byte	0x3
 1881 0603 00000000 		.4byte	http_route
 1882 0607 12       		.uleb128 0x12
 1883 0608 54040000 		.4byte	.LASF95
 1884 060c 08       		.byte	0x8
 1885 060d 42       		.byte	0x42
 1886 060e 41030000 		.4byte	0x341
 1887 0612 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 51


 1888 0613 03       		.byte	0x3
 1889 0614 00000000 		.4byte	system_info
 1890 0618 12       		.uleb128 0x12
 1891 0619 7D030000 		.4byte	.LASF96
 1892 061d 08       		.byte	0x8
 1893 061e 54       		.byte	0x54
 1894 061f 7D030000 		.4byte	0x37d
 1895 0623 05       		.uleb128 0x5
 1896 0624 03       		.byte	0x3
 1897 0625 00000000 		.4byte	system_settings
 1898 0629 12       		.uleb128 0x12
 1899 062a 4C020000 		.4byte	.LASF97
 1900 062e 08       		.byte	0x8
 1901 062f 70       		.byte	0x70
 1902 0630 0A030000 		.4byte	0x30a
 1903 0634 05       		.uleb128 0x5
 1904 0635 03       		.byte	0x3
 1905 0636 00000000 		.4byte	alarmMeasure
 1906 063a 12       		.uleb128 0x12
 1907 063b DD030000 		.4byte	.LASF98
 1908 063f 08       		.byte	0x8
 1909 0640 71       		.byte	0x71
 1910 0641 81000000 		.4byte	0x81
 1911 0645 05       		.uleb128 0x5
 1912 0646 03       		.byte	0x3
 1913 0647 00000000 		.4byte	timeToMeasure
 1914 064b 12       		.uleb128 0x12
 1915 064c B9020000 		.4byte	.LASF99
 1916 0650 08       		.byte	0x8
 1917 0651 72       		.byte	0x72
 1918 0652 0A030000 		.4byte	0x30a
 1919 0656 05       		.uleb128 0x5
 1920 0657 03       		.byte	0x3
 1921 0658 00000000 		.4byte	alarmSync
 1922 065c 12       		.uleb128 0x12
 1923 065d BA060000 		.4byte	.LASF100
 1924 0661 08       		.byte	0x8
 1925 0662 73       		.byte	0x73
 1926 0663 81000000 		.4byte	0x81
 1927 0667 05       		.uleb128 0x5
 1928 0668 03       		.byte	0x3
 1929 0669 00000000 		.4byte	timeToSync
 1930 066d 12       		.uleb128 0x12
 1931 066e BC040000 		.4byte	.LASF101
 1932 0672 08       		.byte	0x8
 1933 0673 74       		.byte	0x74
 1934 0674 81000000 		.4byte	0x81
 1935 0678 05       		.uleb128 0x5
 1936 0679 03       		.byte	0x3
 1937 067a 00000000 		.4byte	timeToSycnRemoteParams
 1938 067e 14       		.uleb128 0x14
 1939 067f 68657900 		.ascii	"hey\000"
 1940 0683 08       		.byte	0x8
 1941 0684 75       		.byte	0x75
 1942 0685 81000000 		.4byte	0x81
 1943 0689 05       		.uleb128 0x5
 1944 068a 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 52


 1945 068b 00000000 		.4byte	hey
 1946 068f 12       		.uleb128 0x12
 1947 0690 4E010000 		.4byte	.LASF102
 1948 0694 08       		.byte	0x8
 1949 0695 79       		.byte	0x79
 1950 0696 0A030000 		.4byte	0x30a
 1951 069a 05       		.uleb128 0x5
 1952 069b 03       		.byte	0x3
 1953 069c 00000000 		.4byte	alarmAppLED
 1954 06a0 12       		.uleb128 0x12
 1955 06a1 E7050000 		.4byte	.LASF103
 1956 06a5 08       		.byte	0x8
 1957 06a6 7A       		.byte	0x7a
 1958 06a7 81000000 		.4byte	0x81
 1959 06ab 05       		.uleb128 0x5
 1960 06ac 03       		.byte	0x3
 1961 06ad 00000000 		.4byte	timeToAppLED
 1962 06b1 12       		.uleb128 0x12
 1963 06b2 94050000 		.4byte	.LASF104
 1964 06b6 08       		.byte	0x8
 1965 06b7 7C       		.byte	0x7c
 1966 06b8 0A030000 		.4byte	0x30a
 1967 06bc 05       		.uleb128 0x5
 1968 06bd 03       		.byte	0x3
 1969 06be 00000000 		.4byte	alarmLevelSensor
 1970 06c2 12       		.uleb128 0x12
 1971 06c3 15060000 		.4byte	.LASF105
 1972 06c7 08       		.byte	0x8
 1973 06c8 7D       		.byte	0x7d
 1974 06c9 81000000 		.4byte	0x81
 1975 06cd 05       		.uleb128 0x5
 1976 06ce 03       		.byte	0x3
 1977 06cf 00000000 		.4byte	timetoLevelSensor
 1978 06d3 12       		.uleb128 0x12
 1979 06d4 67010000 		.4byte	.LASF106
 1980 06d8 08       		.byte	0x8
 1981 06d9 7F       		.byte	0x7f
 1982 06da 0A030000 		.4byte	0x30a
 1983 06de 05       		.uleb128 0x5
 1984 06df 03       		.byte	0x3
 1985 06e0 00000000 		.4byte	alarmDownstreamLevelSensor
 1986 06e4 12       		.uleb128 0x12
 1987 06e5 5E020000 		.4byte	.LASF107
 1988 06e9 08       		.byte	0x8
 1989 06ea 80       		.byte	0x80
 1990 06eb 81000000 		.4byte	0x81
 1991 06ef 05       		.uleb128 0x5
 1992 06f0 03       		.byte	0x3
 1993 06f1 00000000 		.4byte	timetoDownstreamLevelSensor
 1994 06f5 00       		.byte	0
 1995              		.section	.debug_abbrev,"",%progbits
 1996              	.Ldebug_abbrev0:
 1997 0000 01       		.uleb128 0x1
 1998 0001 11       		.uleb128 0x11
 1999 0002 01       		.byte	0x1
 2000 0003 25       		.uleb128 0x25
 2001 0004 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 53


 2002 0005 13       		.uleb128 0x13
 2003 0006 0B       		.uleb128 0xb
 2004 0007 03       		.uleb128 0x3
 2005 0008 0E       		.uleb128 0xe
 2006 0009 1B       		.uleb128 0x1b
 2007 000a 0E       		.uleb128 0xe
 2008 000b 55       		.uleb128 0x55
 2009 000c 17       		.uleb128 0x17
 2010 000d 11       		.uleb128 0x11
 2011 000e 01       		.uleb128 0x1
 2012 000f 10       		.uleb128 0x10
 2013 0010 17       		.uleb128 0x17
 2014 0011 00       		.byte	0
 2015 0012 00       		.byte	0
 2016 0013 02       		.uleb128 0x2
 2017 0014 24       		.uleb128 0x24
 2018 0015 00       		.byte	0
 2019 0016 0B       		.uleb128 0xb
 2020 0017 0B       		.uleb128 0xb
 2021 0018 3E       		.uleb128 0x3e
 2022 0019 0B       		.uleb128 0xb
 2023 001a 03       		.uleb128 0x3
 2024 001b 0E       		.uleb128 0xe
 2025 001c 00       		.byte	0
 2026 001d 00       		.byte	0
 2027 001e 03       		.uleb128 0x3
 2028 001f 16       		.uleb128 0x16
 2029 0020 00       		.byte	0
 2030 0021 03       		.uleb128 0x3
 2031 0022 0E       		.uleb128 0xe
 2032 0023 3A       		.uleb128 0x3a
 2033 0024 0B       		.uleb128 0xb
 2034 0025 3B       		.uleb128 0x3b
 2035 0026 0B       		.uleb128 0xb
 2036 0027 49       		.uleb128 0x49
 2037 0028 13       		.uleb128 0x13
 2038 0029 00       		.byte	0
 2039 002a 00       		.byte	0
 2040 002b 04       		.uleb128 0x4
 2041 002c 24       		.uleb128 0x24
 2042 002d 00       		.byte	0
 2043 002e 0B       		.uleb128 0xb
 2044 002f 0B       		.uleb128 0xb
 2045 0030 3E       		.uleb128 0x3e
 2046 0031 0B       		.uleb128 0xb
 2047 0032 03       		.uleb128 0x3
 2048 0033 08       		.uleb128 0x8
 2049 0034 00       		.byte	0
 2050 0035 00       		.byte	0
 2051 0036 05       		.uleb128 0x5
 2052 0037 16       		.uleb128 0x16
 2053 0038 00       		.byte	0
 2054 0039 03       		.uleb128 0x3
 2055 003a 0E       		.uleb128 0xe
 2056 003b 3A       		.uleb128 0x3a
 2057 003c 0B       		.uleb128 0xb
 2058 003d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 54


 2059 003e 05       		.uleb128 0x5
 2060 003f 49       		.uleb128 0x49
 2061 0040 13       		.uleb128 0x13
 2062 0041 00       		.byte	0
 2063 0042 00       		.byte	0
 2064 0043 06       		.uleb128 0x6
 2065 0044 35       		.uleb128 0x35
 2066 0045 00       		.byte	0
 2067 0046 49       		.uleb128 0x49
 2068 0047 13       		.uleb128 0x13
 2069 0048 00       		.byte	0
 2070 0049 00       		.byte	0
 2071 004a 07       		.uleb128 0x7
 2072 004b 13       		.uleb128 0x13
 2073 004c 01       		.byte	0x1
 2074 004d 0B       		.uleb128 0xb
 2075 004e 0B       		.uleb128 0xb
 2076 004f 3A       		.uleb128 0x3a
 2077 0050 0B       		.uleb128 0xb
 2078 0051 3B       		.uleb128 0x3b
 2079 0052 0B       		.uleb128 0xb
 2080 0053 01       		.uleb128 0x1
 2081 0054 13       		.uleb128 0x13
 2082 0055 00       		.byte	0
 2083 0056 00       		.byte	0
 2084 0057 08       		.uleb128 0x8
 2085 0058 0D       		.uleb128 0xd
 2086 0059 00       		.byte	0
 2087 005a 03       		.uleb128 0x3
 2088 005b 08       		.uleb128 0x8
 2089 005c 3A       		.uleb128 0x3a
 2090 005d 0B       		.uleb128 0xb
 2091 005e 3B       		.uleb128 0x3b
 2092 005f 0B       		.uleb128 0xb
 2093 0060 49       		.uleb128 0x49
 2094 0061 13       		.uleb128 0x13
 2095 0062 38       		.uleb128 0x38
 2096 0063 0B       		.uleb128 0xb
 2097 0064 00       		.byte	0
 2098 0065 00       		.byte	0
 2099 0066 09       		.uleb128 0x9
 2100 0067 0D       		.uleb128 0xd
 2101 0068 00       		.byte	0
 2102 0069 03       		.uleb128 0x3
 2103 006a 0E       		.uleb128 0xe
 2104 006b 3A       		.uleb128 0x3a
 2105 006c 0B       		.uleb128 0xb
 2106 006d 3B       		.uleb128 0x3b
 2107 006e 0B       		.uleb128 0xb
 2108 006f 49       		.uleb128 0x49
 2109 0070 13       		.uleb128 0x13
 2110 0071 38       		.uleb128 0x38
 2111 0072 0B       		.uleb128 0xb
 2112 0073 00       		.byte	0
 2113 0074 00       		.byte	0
 2114 0075 0A       		.uleb128 0xa
 2115 0076 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 55


 2116 0077 01       		.byte	0x1
 2117 0078 49       		.uleb128 0x49
 2118 0079 13       		.uleb128 0x13
 2119 007a 01       		.uleb128 0x1
 2120 007b 13       		.uleb128 0x13
 2121 007c 00       		.byte	0
 2122 007d 00       		.byte	0
 2123 007e 0B       		.uleb128 0xb
 2124 007f 21       		.uleb128 0x21
 2125 0080 00       		.byte	0
 2126 0081 49       		.uleb128 0x49
 2127 0082 13       		.uleb128 0x13
 2128 0083 2F       		.uleb128 0x2f
 2129 0084 0B       		.uleb128 0xb
 2130 0085 00       		.byte	0
 2131 0086 00       		.byte	0
 2132 0087 0C       		.uleb128 0xc
 2133 0088 0F       		.uleb128 0xf
 2134 0089 00       		.byte	0
 2135 008a 0B       		.uleb128 0xb
 2136 008b 0B       		.uleb128 0xb
 2137 008c 49       		.uleb128 0x49
 2138 008d 13       		.uleb128 0x13
 2139 008e 00       		.byte	0
 2140 008f 00       		.byte	0
 2141 0090 0D       		.uleb128 0xd
 2142 0091 2E       		.uleb128 0x2e
 2143 0092 00       		.byte	0
 2144 0093 03       		.uleb128 0x3
 2145 0094 0E       		.uleb128 0xe
 2146 0095 3A       		.uleb128 0x3a
 2147 0096 0B       		.uleb128 0xb
 2148 0097 3B       		.uleb128 0x3b
 2149 0098 0B       		.uleb128 0xb
 2150 0099 27       		.uleb128 0x27
 2151 009a 19       		.uleb128 0x19
 2152 009b 11       		.uleb128 0x11
 2153 009c 01       		.uleb128 0x1
 2154 009d 12       		.uleb128 0x12
 2155 009e 06       		.uleb128 0x6
 2156 009f 40       		.uleb128 0x40
 2157 00a0 18       		.uleb128 0x18
 2158 00a1 9642     		.uleb128 0x2116
 2159 00a3 19       		.uleb128 0x19
 2160 00a4 00       		.byte	0
 2161 00a5 00       		.byte	0
 2162 00a6 0E       		.uleb128 0xe
 2163 00a7 2E       		.uleb128 0x2e
 2164 00a8 01       		.byte	0x1
 2165 00a9 3F       		.uleb128 0x3f
 2166 00aa 19       		.uleb128 0x19
 2167 00ab 03       		.uleb128 0x3
 2168 00ac 0E       		.uleb128 0xe
 2169 00ad 3A       		.uleb128 0x3a
 2170 00ae 0B       		.uleb128 0xb
 2171 00af 3B       		.uleb128 0x3b
 2172 00b0 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 56


 2173 00b1 27       		.uleb128 0x27
 2174 00b2 19       		.uleb128 0x19
 2175 00b3 11       		.uleb128 0x11
 2176 00b4 01       		.uleb128 0x1
 2177 00b5 12       		.uleb128 0x12
 2178 00b6 06       		.uleb128 0x6
 2179 00b7 40       		.uleb128 0x40
 2180 00b8 18       		.uleb128 0x18
 2181 00b9 9642     		.uleb128 0x2116
 2182 00bb 19       		.uleb128 0x19
 2183 00bc 01       		.uleb128 0x1
 2184 00bd 13       		.uleb128 0x13
 2185 00be 00       		.byte	0
 2186 00bf 00       		.byte	0
 2187 00c0 0F       		.uleb128 0xf
 2188 00c1 34       		.uleb128 0x34
 2189 00c2 00       		.byte	0
 2190 00c3 03       		.uleb128 0x3
 2191 00c4 0E       		.uleb128 0xe
 2192 00c5 3A       		.uleb128 0x3a
 2193 00c6 0B       		.uleb128 0xb
 2194 00c7 3B       		.uleb128 0x3b
 2195 00c8 05       		.uleb128 0x5
 2196 00c9 49       		.uleb128 0x49
 2197 00ca 13       		.uleb128 0x13
 2198 00cb 02       		.uleb128 0x2
 2199 00cc 18       		.uleb128 0x18
 2200 00cd 00       		.byte	0
 2201 00ce 00       		.byte	0
 2202 00cf 10       		.uleb128 0x10
 2203 00d0 34       		.uleb128 0x34
 2204 00d1 00       		.byte	0
 2205 00d2 03       		.uleb128 0x3
 2206 00d3 0E       		.uleb128 0xe
 2207 00d4 3A       		.uleb128 0x3a
 2208 00d5 0B       		.uleb128 0xb
 2209 00d6 3B       		.uleb128 0x3b
 2210 00d7 05       		.uleb128 0x5
 2211 00d8 49       		.uleb128 0x49
 2212 00d9 13       		.uleb128 0x13
 2213 00da 3F       		.uleb128 0x3f
 2214 00db 19       		.uleb128 0x19
 2215 00dc 3C       		.uleb128 0x3c
 2216 00dd 19       		.uleb128 0x19
 2217 00de 00       		.byte	0
 2218 00df 00       		.byte	0
 2219 00e0 11       		.uleb128 0x11
 2220 00e1 26       		.uleb128 0x26
 2221 00e2 00       		.byte	0
 2222 00e3 49       		.uleb128 0x49
 2223 00e4 13       		.uleb128 0x13
 2224 00e5 00       		.byte	0
 2225 00e6 00       		.byte	0
 2226 00e7 12       		.uleb128 0x12
 2227 00e8 34       		.uleb128 0x34
 2228 00e9 00       		.byte	0
 2229 00ea 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 57


 2230 00eb 0E       		.uleb128 0xe
 2231 00ec 3A       		.uleb128 0x3a
 2232 00ed 0B       		.uleb128 0xb
 2233 00ee 3B       		.uleb128 0x3b
 2234 00ef 0B       		.uleb128 0xb
 2235 00f0 49       		.uleb128 0x49
 2236 00f1 13       		.uleb128 0x13
 2237 00f2 3F       		.uleb128 0x3f
 2238 00f3 19       		.uleb128 0x19
 2239 00f4 02       		.uleb128 0x2
 2240 00f5 18       		.uleb128 0x18
 2241 00f6 00       		.byte	0
 2242 00f7 00       		.byte	0
 2243 00f8 13       		.uleb128 0x13
 2244 00f9 21       		.uleb128 0x21
 2245 00fa 00       		.byte	0
 2246 00fb 49       		.uleb128 0x49
 2247 00fc 13       		.uleb128 0x13
 2248 00fd 2F       		.uleb128 0x2f
 2249 00fe 05       		.uleb128 0x5
 2250 00ff 00       		.byte	0
 2251 0100 00       		.byte	0
 2252 0101 14       		.uleb128 0x14
 2253 0102 34       		.uleb128 0x34
 2254 0103 00       		.byte	0
 2255 0104 03       		.uleb128 0x3
 2256 0105 08       		.uleb128 0x8
 2257 0106 3A       		.uleb128 0x3a
 2258 0107 0B       		.uleb128 0xb
 2259 0108 3B       		.uleb128 0x3b
 2260 0109 0B       		.uleb128 0xb
 2261 010a 49       		.uleb128 0x49
 2262 010b 13       		.uleb128 0x13
 2263 010c 3F       		.uleb128 0x3f
 2264 010d 19       		.uleb128 0x19
 2265 010e 02       		.uleb128 0x2
 2266 010f 18       		.uleb128 0x18
 2267 0110 00       		.byte	0
 2268 0111 00       		.byte	0
 2269 0112 00       		.byte	0
 2270              		.section	.debug_aranges,"",%progbits
 2271 0000 54000000 		.4byte	0x54
 2272 0004 0200     		.2byte	0x2
 2273 0006 00000000 		.4byte	.Ldebug_info0
 2274 000a 04       		.byte	0x4
 2275 000b 00       		.byte	0
 2276 000c 0000     		.2byte	0
 2277 000e 0000     		.2byte	0
 2278 0010 00000000 		.4byte	.LFB64
 2279 0014 0E000000 		.4byte	.LFE64-.LFB64
 2280 0018 00000000 		.4byte	.LFB65
 2281 001c 0E000000 		.4byte	.LFE65-.LFB65
 2282 0020 00000000 		.4byte	.LFB66
 2283 0024 0E000000 		.4byte	.LFE66-.LFB66
 2284 0028 00000000 		.4byte	.LFB67
 2285 002c 0E000000 		.4byte	.LFE67-.LFB67
 2286 0030 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 58


 2287 0034 0E000000 		.4byte	.LFE68-.LFB68
 2288 0038 00000000 		.4byte	.LFB69
 2289 003c 0E000000 		.4byte	.LFE69-.LFB69
 2290 0040 00000000 		.4byte	.LFB70
 2291 0044 0E000000 		.4byte	.LFE70-.LFB70
 2292 0048 00000000 		.4byte	.LFB71
 2293 004c 18060000 		.4byte	.LFE71-.LFB71
 2294 0050 00000000 		.4byte	0
 2295 0054 00000000 		.4byte	0
 2296              		.section	.debug_ranges,"",%progbits
 2297              	.Ldebug_ranges0:
 2298 0000 00000000 		.4byte	.LFB64
 2299 0004 0E000000 		.4byte	.LFE64
 2300 0008 00000000 		.4byte	.LFB65
 2301 000c 0E000000 		.4byte	.LFE65
 2302 0010 00000000 		.4byte	.LFB66
 2303 0014 0E000000 		.4byte	.LFE66
 2304 0018 00000000 		.4byte	.LFB67
 2305 001c 0E000000 		.4byte	.LFE67
 2306 0020 00000000 		.4byte	.LFB68
 2307 0024 0E000000 		.4byte	.LFE68
 2308 0028 00000000 		.4byte	.LFB69
 2309 002c 0E000000 		.4byte	.LFE69
 2310 0030 00000000 		.4byte	.LFB70
 2311 0034 0E000000 		.4byte	.LFE70
 2312 0038 00000000 		.4byte	.LFB71
 2313 003c 18060000 		.4byte	.LFE71
 2314 0040 00000000 		.4byte	0
 2315 0044 00000000 		.4byte	0
 2316              		.section	.debug_line,"",%progbits
 2317              	.Ldebug_line0:
 2318 0000 24030000 		.section	.debug_str,"MS",%progbits,1
 2318      0200C301 
 2318      00000201 
 2318      FB0E0D00 
 2318      01010101 
 2319              	.LASF31:
 2320 0000 6D6F6465 		.ascii	"model_id\000"
 2320      6C5F6964 
 2320      00
 2321              	.LASF72:
 2322 0009 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2322      616C6172 
 2322      6D436667 
 2322      4D61736B 
 2322      00
 2323              	.LASF30:
 2324 001a 73696D5F 		.ascii	"sim_id\000"
 2324      696400
 2325              	.LASF76:
 2326 0021 5254435F 		.ascii	"RTC_daysInMonths\000"
 2326      64617973 
 2326      496E4D6F 
 2326      6E746873 
 2326      00
 2327              	.LASF62:
 2328 0032 7379735F 		.ascii	"sys_settings_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 59


 2328      73657474 
 2328      696E6773 
 2328      5F7400
 2329              	.LASF53:
 2330 0041 63757272 		.ascii	"currentCountDownValue\000"
 2330      656E7443 
 2330      6F756E74 
 2330      446F776E 
 2330      56616C75 
 2331              	.LASF52:
 2332 0057 636F756E 		.ascii	"countDownValue\000"
 2332      74446F77 
 2332      6E56616C 
 2332      756500
 2333              	.LASF2:
 2334 0066 73686F72 		.ascii	"short int\000"
 2334      7420696E 
 2334      7400
 2335              	.LASF26:
 2336 0070 73697A65 		.ascii	"sizetype\000"
 2336      74797065 
 2336      00
 2337              	.LASF60:
 2338 0079 65705F68 		.ascii	"ep_host\000"
 2338      6F737400 
 2339              	.LASF108:
 2340 0081 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2340      43313120 
 2340      352E342E 
 2340      31203230 
 2340      31363036 
 2341 00b4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2341      20726576 
 2341      6973696F 
 2341      6E203233 
 2341      37373135 
 2342 00e7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2342      66756E63 
 2342      74696F6E 
 2342      2D736563 
 2342      74696F6E 
 2343              	.LASF67:
 2344 010f 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 2344      45766572 
 2344      79576565 
 2344      6B48616E 
 2344      646C6572 
 2345              	.LASF85:
 2346 0124 64617461 		.ascii	"data\000"
 2346      00
 2347              	.LASF47:
 2348 0129 4170705F 		.ascii	"App_LED_freq\000"
 2348      4C45445F 
 2348      66726571 
 2348      00
 2349              	.LASF18:
 2350 0136 486F7572 		.ascii	"Hour\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 60


 2350      00
 2351              	.LASF58:
 2352 013b 63686970 		.ascii	"chip_uniqueId\000"
 2352      5F756E69 
 2352      71756549 
 2352      6400
 2353              	.LASF36:
 2354 0149 65636E6F 		.ascii	"ecno\000"
 2354      00
 2355              	.LASF102:
 2356 014e 616C6172 		.ascii	"alarmAppLED\000"
 2356      6D417070 
 2356      4C454400 
 2357              	.LASF27:
 2358 015a 76616C75 		.ascii	"value\000"
 2358      6500
 2359              	.LASF12:
 2360 0160 75696E74 		.ascii	"uint16\000"
 2360      313600
 2361              	.LASF106:
 2362 0167 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 2362      6D446F77 
 2362      6E737472 
 2362      65616D4C 
 2362      6576656C 
 2363              	.LASF83:
 2364 0182 64617461 		.ascii	"dataPointsInStack\000"
 2364      506F696E 
 2364      7473496E 
 2364      53746163 
 2364      6B00
 2365              	.LASF11:
 2366 0194 75696E74 		.ascii	"uint8\000"
 2366      3800
 2367              	.LASF111:
 2368 019a 5254435F 		.ascii	"RTC_ISR\000"
 2368      49535200 
 2369              	.LASF35:
 2370 01a2 72736370 		.ascii	"rscp\000"
 2370      00
 2371              	.LASF13:
 2372 01a7 696E7431 		.ascii	"int16\000"
 2372      3600
 2373              	.LASF28:
 2374 01ad 74696D65 		.ascii	"timeStamp\000"
 2374      5374616D 
 2374      7000
 2375              	.LASF84:
 2376 01b7 64617461 		.ascii	"dataPointsInStackDesired\000"
 2376      506F696E 
 2376      7473496E 
 2376      53746163 
 2376      6B446573 
 2377              	.LASF15:
 2378 01d0 666C6F61 		.ascii	"float\000"
 2378      7400
 2379              	.LASF19:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 61


 2380 01d6 4461794F 		.ascii	"DayOfWeek\000"
 2380      66576565 
 2380      6B00
 2381              	.LASF79:
 2382 01e0 6C657665 		.ascii	"level_sensor_enabled\000"
 2382      6C5F7365 
 2382      6E736F72 
 2382      5F656E61 
 2382      626C6564 
 2383              	.LASF6:
 2384 01f5 6C6F6E67 		.ascii	"long long int\000"
 2384      206C6F6E 
 2384      6720696E 
 2384      7400
 2385              	.LASF9:
 2386 0203 5F5F696E 		.ascii	"__int32_t\000"
 2386      7433325F 
 2386      7400
 2387              	.LASF17:
 2388 020d 63686172 		.ascii	"char\000"
 2388      00
 2389              	.LASF4:
 2390 0212 6C6F6E67 		.ascii	"long int\000"
 2390      20696E74 
 2390      00
 2391              	.LASF82:
 2392 021b 62756666 		.ascii	"buffer_overflow\000"
 2392      65725F6F 
 2392      76657266 
 2392      6C6F7700 
 2393              	.LASF57:
 2394 022b 6D6F6465 		.ascii	"modem_info\000"
 2394      6D5F696E 
 2394      666F00
 2395              	.LASF68:
 2396 0236 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2396      45766572 
 2396      794D6F6E 
 2396      74684861 
 2396      6E646C65 
 2397              	.LASF97:
 2398 024c 616C6172 		.ascii	"alarmMeasure\000"
 2398      6D4D6561 
 2398      73757265 
 2398      00
 2399              	.LASF23:
 2400 0259 59656172 		.ascii	"Year\000"
 2400      00
 2401              	.LASF107:
 2402 025e 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 2402      746F446F 
 2402      776E7374 
 2402      7265616D 
 2402      4C657665 
 2403              	.LASF22:
 2404 027a 4D6F6E74 		.ascii	"Month\000"
 2404      6800
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 62


 2405              	.LASF66:
 2406 0280 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2406      45766572 
 2406      79446179 
 2406      48616E64 
 2406      6C657200 
 2407              	.LASF56:
 2408 0294 616C6172 		.ascii	"alarm\000"
 2408      6D00
 2409              	.LASF44:
 2410 029a 6D656173 		.ascii	"measure_time\000"
 2410      7572655F 
 2410      74696D65 
 2410      00
 2411              	.LASF48:
 2412 02a7 4C657665 		.ascii	"Level_Sensor_freq\000"
 2412      6C5F5365 
 2412      6E736F72 
 2412      5F667265 
 2412      7100
 2413              	.LASF99:
 2414 02b9 616C6172 		.ascii	"alarmSync\000"
 2414      6D53796E 
 2414      6300
 2415              	.LASF25:
 2416 02c3 6C6F6E67 		.ascii	"long double\000"
 2416      20646F75 
 2416      626C6500 
 2417              	.LASF91:
 2418 02cf 6170705F 		.ascii	"app_led_inbox\000"
 2418      6C65645F 
 2418      696E626F 
 2418      7800
 2419              	.LASF89:
 2420 02dd 75706461 		.ascii	"updatable_parameters\000"
 2420      7461626C 
 2420      655F7061 
 2420      72616D65 
 2420      74657273 
 2421              	.LASF1:
 2422 02f2 756E7369 		.ascii	"unsigned char\000"
 2422      676E6564 
 2422      20636861 
 2422      7200
 2423              	.LASF38:
 2424 0300 72737270 		.ascii	"rsrp\000"
 2424      00
 2425              	.LASF87:
 2426 0305 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2426      6D5F7374 
 2426      6172745F 
 2426      74696D65 
 2426      5F737461 
 2427              	.LASF70:
 2428 031c 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2428      616C6172 
 2428      6D436667 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 63


 2428      54696D65 
 2428      44617465 
 2429              	.LASF86:
 2430 0331 6D6F6465 		.ascii	"modem_state\000"
 2430      6D5F7374 
 2430      61746500 
 2431              	.LASF0:
 2432 033d 7369676E 		.ascii	"signed char\000"
 2432      65642063 
 2432      68617200 
 2433              	.LASF49:
 2434 0349 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 2434      73747265 
 2434      616D5F4C 
 2434      6576656C 
 2434      5F53656E 
 2435              	.LASF7:
 2436 0366 6C6F6E67 		.ascii	"long long unsigned int\000"
 2436      206C6F6E 
 2436      6720756E 
 2436      7369676E 
 2436      65642069 
 2437              	.LASF96:
 2438 037d 73797374 		.ascii	"system_settings\000"
 2438      656D5F73 
 2438      65747469 
 2438      6E677300 
 2439              	.LASF71:
 2440 038d 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2440      63757272 
 2440      656E7454 
 2440      696D6544 
 2440      61746500 
 2441              	.LASF8:
 2442 03a1 756E7369 		.ascii	"unsigned int\000"
 2442      676E6564 
 2442      20696E74 
 2442      00
 2443              	.LASF29:
 2444 03ae 6B65795F 		.ascii	"key_value_t\000"
 2444      76616C75 
 2444      655F7400 
 2445              	.LASF34:
 2446 03ba 72786C65 		.ascii	"rxlev\000"
 2446      7600
 2447              	.LASF45:
 2448 03c0 73796E63 		.ascii	"sync_time\000"
 2448      5F74696D 
 2448      6500
 2449              	.LASF73:
 2450 03ca 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2450      616C6172 
 2450      6D437572 
 2450      53746174 
 2450      757300
 2451              	.LASF98:
 2452 03dd 74696D65 		.ascii	"timeToMeasure\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 64


 2452      546F4D65 
 2452      61737572 
 2452      6500
 2453              	.LASF51:
 2454 03eb 75706461 		.ascii	"updatable_parameters_t\000"
 2454      7461626C 
 2454      655F7061 
 2454      72616D65 
 2454      74657273 
 2455              	.LASF43:
 2456 0402 73696D5F 		.ascii	"sim_type\000"
 2456      74797065 
 2456      00
 2457              	.LASF59:
 2458 040b 7379735F 		.ascii	"sys_info_t\000"
 2458      696E666F 
 2458      5F7400
 2459              	.LASF3:
 2460 0416 73686F72 		.ascii	"short unsigned int\000"
 2460      7420756E 
 2460      7369676E 
 2460      65642069 
 2460      6E7400
 2461              	.LASF39:
 2462 0429 74696D65 		.ascii	"time_to_network_connect\000"
 2462      5F746F5F 
 2462      6E657477 
 2462      6F726B5F 
 2462      636F6E6E 
 2463              	.LASF78:
 2464 0441 6C657665 		.ascii	"level_sensor_inbox\000"
 2464      6C5F7365 
 2464      6E736F72 
 2464      5F696E62 
 2464      6F7800
 2465              	.LASF95:
 2466 0454 73797374 		.ascii	"system_info\000"
 2466      656D5F69 
 2466      6E666F00 
 2467              	.LASF40:
 2468 0460 74696D65 		.ascii	"time_to_acquire_ip\000"
 2468      5F746F5F 
 2468      61637175 
 2468      6972655F 
 2468      697000
 2469              	.LASF81:
 2470 0473 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 2470      73747265 
 2470      616D5F6C 
 2470      6576656C 
 2470      5F73656E 
 2471              	.LASF32:
 2472 0493 696D6569 		.ascii	"imei\000"
 2472      00
 2473              	.LASF10:
 2474 0498 696E7433 		.ascii	"int32_t\000"
 2474      325F7400 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 65


 2475              	.LASF112:
 2476 04a0 5254435F 		.ascii	"RTC_tmp\000"
 2476      746D7000 
 2477              	.LASF41:
 2478 04a8 6D6F6465 		.ascii	"modem_stats_t\000"
 2478      6D5F7374 
 2478      6174735F 
 2478      7400
 2479              	.LASF50:
 2480 04b6 5F426F6F 		.ascii	"_Bool\000"
 2480      6C00
 2481              	.LASF101:
 2482 04bc 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2482      546F5379 
 2482      636E5265 
 2482      6D6F7465 
 2482      50617261 
 2483              	.LASF65:
 2484 04d3 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2484      45766572 
 2484      79486F75 
 2484      7248616E 
 2484      646C6572 
 2485              	.LASF20:
 2486 04e8 4461794F 		.ascii	"DayOfMonth\000"
 2486      664D6F6E 
 2486      746800
 2487              	.LASF37:
 2488 04f3 72737271 		.ascii	"rsrq\000"
 2488      00
 2489              	.LASF110:
 2490 04f8 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2490      73657273 
 2490      5C64616E 
 2490      747A5C44 
 2490      6F63756D 
 2491 0525 72694F53 		.ascii	"riOS.cydsn\000"
 2491      2E637964 
 2491      736E00
 2492              	.LASF94:
 2493 0530 68747470 		.ascii	"http_route\000"
 2493      5F726F75 
 2493      746500
 2494              	.LASF64:
 2495 053b 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2495      45766572 
 2495      794D696E 
 2495      75746548 
 2495      616E646C 
 2496              	.LASF5:
 2497 0552 6C6F6E67 		.ascii	"long unsigned int\000"
 2497      20756E73 
 2497      69676E65 
 2497      6420696E 
 2497      7400
 2498              	.LASF14:
 2499 0564 696E7433 		.ascii	"int32\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 66


 2499      3200
 2500              	.LASF16:
 2501 056a 646F7562 		.ascii	"double\000"
 2501      6C6500
 2502              	.LASF63:
 2503 0571 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2503      45766572 
 2503      79536563 
 2503      6F6E6448 
 2503      616E646C 
 2504              	.LASF88:
 2505 0588 6D6F6465 		.ascii	"modem_stats\000"
 2505      6D5F7374 
 2505      61747300 
 2506              	.LASF104:
 2507 0594 616C6172 		.ascii	"alarmLevelSensor\000"
 2507      6D4C6576 
 2507      656C5365 
 2507      6E736F72 
 2507      00
 2508              	.LASF46:
 2509 05a5 64656275 		.ascii	"debug_level\000"
 2509      675F6C65 
 2509      76656C00 
 2510              	.LASF33:
 2511 05b1 6D6F6465 		.ascii	"modem_info_t\000"
 2511      6D5F696E 
 2511      666F5F74 
 2511      00
 2512              	.LASF54:
 2513 05be 636F756E 		.ascii	"countDownType\000"
 2513      74446F77 
 2513      6E547970 
 2513      6500
 2514              	.LASF75:
 2515 05cc 5254435F 		.ascii	"RTC_statusDateTime\000"
 2515      73746174 
 2515      75734461 
 2515      74655469 
 2515      6D6500
 2516              	.LASF61:
 2517 05df 65705F70 		.ascii	"ep_port\000"
 2517      6F727400 
 2518              	.LASF103:
 2519 05e7 74696D65 		.ascii	"timeToAppLED\000"
 2519      546F4170 
 2519      704C4544 
 2519      00
 2520              	.LASF109:
 2521 05f4 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2521      72617465 
 2521      645F536F 
 2521      75726365 
 2521      5C50536F 
 2522              	.LASF105:
 2523 0615 74696D65 		.ascii	"timetoLevelSensor\000"
 2523      746F4C65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 67


 2523      76656C53 
 2523      656E736F 
 2523      7200
 2524              	.LASF69:
 2525 0627 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2525      45766572 
 2525      79596561 
 2525      7248616E 
 2525      646C6572 
 2526              	.LASF80:
 2527 063c 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 2527      73747265 
 2527      616D5F6C 
 2527      6576656C 
 2527      5F73656E 
 2528              	.LASF77:
 2529 065a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2529      52784275 
 2529      66666572 
 2529      00
 2530              	.LASF24:
 2531 0667 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2531      54494D45 
 2531      5F444154 
 2531      4500
 2532              	.LASF74:
 2533 0675 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2533      696E7465 
 2533      7276616C 
 2533      4366674D 
 2533      61736B00 
 2534              	.LASF93:
 2535 0689 68747470 		.ascii	"http_body\000"
 2535      5F626F64 
 2535      7900
 2536              	.LASF42:
 2537 0693 6E6F6465 		.ascii	"node_type\000"
 2537      5F747970 
 2537      6500
 2538              	.LASF90:
 2539 069d 4170705F 		.ascii	"App_LED_enabled\000"
 2539      4C45445F 
 2539      656E6162 
 2539      6C656400 
 2540              	.LASF92:
 2541 06ad 68747470 		.ascii	"http_request\000"
 2541      5F726571 
 2541      75657374 
 2541      00
 2542              	.LASF100:
 2543 06ba 74696D65 		.ascii	"timeToSync\000"
 2543      546F5379 
 2543      6E6300
 2544              	.LASF55:
 2545 06c5 636F756E 		.ascii	"countDownResetCondition\000"
 2545      74446F77 
 2545      6E526573 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccOIt5nh.s 			page 68


 2545      6574436F 
 2545      6E646974 
 2546              	.LASF21:
 2547 06dd 4461794F 		.ascii	"DayOfYear\000"
 2547      66596561 
 2547      7200
 2548              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
