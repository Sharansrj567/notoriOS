ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,10,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	App_LED_enabled,1,1
  33              		.comm	app_led_inbox,100,4
  34              		.comm	level_sensor_inbox,100,4
  35              		.comm	level_sensor_enabled,1,1
  36              		.comm	downstream_level_sensor_inbox,100,4
  37              		.comm	downstream_level_sensor_enabled,1,1
  38              		.comm	valve_diameter,4,4
  39              		.comm	valve_type,10,4
  40              		.comm	valve_enabled,1,1
  41              		.comm	valve_inbox,100,4
  42              		.comm	autosampler_enabled,1,1
  43              		.comm	autosampler_inbox,100,4
  44              		.comm	http_request,10000,4
  45              		.comm	http_body,10000,4
  46              		.comm	http_route,200,4
  47              		.comm	system_info,28,4
  48              		.comm	system_settings,104,4
  49              		.comm	alarmMeasure,6,4
  50              		.comm	timeToMeasure,1,1
  51              		.comm	alarmSync,6,4
  52              		.comm	timeToSync,1,1
  53              		.comm	timeToSycnRemoteParams,1,1
  54              		.comm	hey,1,1
  55              		.comm	alarmAppLED,6,4
  56              		.comm	timeToAppLED,1,1
  57              		.comm	alarmLevelSensor,6,4
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 2


  58              		.comm	timeToLevelSensor,1,1
  59              		.comm	alarmDownstreamLevelSensor,6,4
  60              		.comm	timeToDownstreamLevelSensor,1,1
  61              		.comm	alarmValve,6,4
  62              		.comm	timeToValve,1,1
  63              		.comm	alarmAutosampler,6,4
  64              		.comm	timeToAutosampler,1,1
  65              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  66              		.align	2
  67              		.thumb
  68              		.thumb_func
  69              		.type	RTC_EverySecondHandler, %function
  70              	RTC_EverySecondHandler:
  71              	.LFB64:
  72              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 3


  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  73              		.loc 1 55 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 00AF     		add	r7, sp, #0
  82              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  83              		.loc 1 58 0
  84 0004 0020     		movs	r0, #0
  85 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  86              		.loc 1 64 0
  87 000a 00BF     		nop
  88 000c 80BD     		pop	{r7, pc}
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  92 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  93              		.align	2
  94              		.thumb
  95              		.thumb_func
  96              		.type	RTC_EveryMinuteHandler, %function
  97              	RTC_EveryMinuteHandler:
  98              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 4


  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  99              		.loc 1 82 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103 0000 80B5     		push	{r7, lr}
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 7, -8
 106              		.cfi_offset 14, -4
 107 0002 00AF     		add	r7, sp, #0
 108              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
 109              		.loc 1 85 0
 110 0004 0120     		movs	r0, #1
 111 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
 112              		.loc 1 91 0
 113 000a 00BF     		nop
 114 000c 80BD     		pop	{r7, pc}
 115              		.cfi_endproc
 116              	.LFE65:
 117              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
 118 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 119              		.align	2
 120              		.thumb
 121              		.thumb_func
 122              		.type	RTC_EveryHourHandler, %function
 123              	RTC_EveryHourHandler:
 124              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 5


 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 125              		.loc 1 109 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 1, uses_anonymous_args = 0
 129 0000 80B5     		push	{r7, lr}
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 7, -8
 132              		.cfi_offset 14, -4
 133 0002 00AF     		add	r7, sp, #0
 134              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 135              		.loc 1 112 0
 136 0004 0220     		movs	r0, #2
 137 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 138              		.loc 1 118 0
 139 000a 00BF     		nop
 140 000c 80BD     		pop	{r7, pc}
 141              		.cfi_endproc
 142              	.LFE66:
 143              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 144 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 145              		.align	2
 146              		.thumb
 147              		.thumb_func
 148              		.type	RTC_EveryDayHandler, %function
 149              	RTC_EveryDayHandler:
 150              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 6


 136:Generated_Source\PSoC5/RTC_INT.c **** {
 151              		.loc 1 136 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 0000 80B5     		push	{r7, lr}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 00AF     		add	r7, sp, #0
 160              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 161              		.loc 1 139 0
 162 0004 0320     		movs	r0, #3
 163 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 164              		.loc 1 145 0
 165 000a 00BF     		nop
 166 000c 80BD     		pop	{r7, pc}
 167              		.cfi_endproc
 168              	.LFE67:
 169              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 170 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 171              		.align	2
 172              		.thumb
 173              		.thumb_func
 174              		.type	RTC_EveryWeekHandler, %function
 175              	RTC_EveryWeekHandler:
 176              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 177              		.loc 1 163 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 7


 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 00AF     		add	r7, sp, #0
 186              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 187              		.loc 1 166 0
 188 0004 0420     		movs	r0, #4
 189 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 190              		.loc 1 172 0
 191 000a 00BF     		nop
 192 000c 80BD     		pop	{r7, pc}
 193              		.cfi_endproc
 194              	.LFE68:
 195              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 196 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 197              		.align	2
 198              		.thumb
 199              		.thumb_func
 200              		.type	RTC_EveryMonthHandler, %function
 201              	RTC_EveryMonthHandler:
 202              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 203              		.loc 1 190 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207 0000 80B5     		push	{r7, lr}
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 8


 210              		.cfi_offset 14, -4
 211 0002 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 213              		.loc 1 193 0
 214 0004 0520     		movs	r0, #5
 215 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 216              		.loc 1 199 0
 217 000a 00BF     		nop
 218 000c 80BD     		pop	{r7, pc}
 219              		.cfi_endproc
 220              	.LFE69:
 221              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 222 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 223              		.align	2
 224              		.thumb
 225              		.thumb_func
 226              		.type	RTC_EveryYearHandler, %function
 227              	RTC_EveryYearHandler:
 228              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 229              		.loc 1 217 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 00AF     		add	r7, sp, #0
 238              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 9


 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 239              		.loc 1 220 0
 240 0004 0620     		movs	r0, #6
 241 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 242              		.loc 1 226 0
 243 000a 00BF     		nop
 244 000c 80BD     		pop	{r7, pc}
 245              		.cfi_endproc
 246              	.LFE70:
 247              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 248 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 249              		.align	2
 250              		.global	RTC_ISR
 251              		.thumb
 252              		.thumb_func
 253              		.type	RTC_ISR, %function
 254              	RTC_ISR:
 255              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 10


 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 256              		.loc 1 268 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 8
 259              		@ frame_needed = 1, uses_anonymous_args = 0
 260 0000 80B5     		push	{r7, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 7, -8
 263              		.cfi_offset 14, -4
 264 0002 82B0     		sub	sp, sp, #8
 265              		.cfi_def_cfa_offset 16
 266 0004 00AF     		add	r7, sp, #0
 267              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 268              		.loc 1 276 0
 269 0006 0420     		movs	r0, #4
 270 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 271              		.loc 1 279 0
 272 000c 9E4B     		ldr	r3, .L48
 273 000e 1B78     		ldrb	r3, [r3]
 274 0010 DBB2     		uxtb	r3, r3
 275 0012 0133     		adds	r3, r3, #1
 276 0014 DAB2     		uxtb	r2, r3
 277 0016 9C4B     		ldr	r3, .L48
 278 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 279              		.loc 1 282 0
 280 001a 9B4B     		ldr	r3, .L48
 281 001c 1B78     		ldrb	r3, [r3]
 282 001e DBB2     		uxtb	r3, r3
 283 0020 3B2B     		cmp	r3, #59
 284 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 285              		.loc 1 285 0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 11


 286 0026 984B     		ldr	r3, .L48
 287 0028 5B78     		ldrb	r3, [r3, #1]
 288 002a DBB2     		uxtb	r3, r3
 289 002c 0133     		adds	r3, r3, #1
 290 002e DAB2     		uxtb	r2, r3
 291 0030 954B     		ldr	r3, .L48
 292 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 293              		.loc 1 288 0
 294 0034 944B     		ldr	r3, .L48
 295 0036 0022     		movs	r2, #0
 296 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 297              		.loc 1 290 0
 298 003a 934B     		ldr	r3, .L48
 299 003c 5B78     		ldrb	r3, [r3, #1]
 300 003e DBB2     		uxtb	r3, r3
 301 0040 3B2B     		cmp	r3, #59
 302 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 303              		.loc 1 293 0
 304 0046 904B     		ldr	r3, .L48
 305 0048 9B78     		ldrb	r3, [r3, #2]
 306 004a DBB2     		uxtb	r3, r3
 307 004c 0133     		adds	r3, r3, #1
 308 004e DAB2     		uxtb	r2, r3
 309 0050 8D4B     		ldr	r3, .L48
 310 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 311              		.loc 1 296 0
 312 0054 8C4B     		ldr	r3, .L48
 313 0056 0022     		movs	r2, #0
 314 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 315              		.loc 1 299 0
 316 005a 8B4B     		ldr	r3, .L48
 317 005c 9B78     		ldrb	r3, [r3, #2]
 318 005e DBB2     		uxtb	r3, r3
 319 0060 172B     		cmp	r3, #23
 320 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 321              		.loc 1 302 0
 322 0066 884B     		ldr	r3, .L48
 323 0068 1B79     		ldrb	r3, [r3, #4]
 324 006a DBB2     		uxtb	r3, r3
 325 006c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 12


 326 006e DAB2     		uxtb	r2, r3
 327 0070 854B     		ldr	r3, .L48
 328 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 329              		.loc 1 305 0
 330 0074 844B     		ldr	r3, .L48
 331 0076 0022     		movs	r2, #0
 332 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 333              		.loc 1 308 0
 334 007a 834B     		ldr	r3, .L48
 335 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 336 007e 9BB2     		uxth	r3, r3
 337 0080 0133     		adds	r3, r3, #1
 338 0082 9AB2     		uxth	r2, r3
 339 0084 804B     		ldr	r3, .L48
 340 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 341              		.loc 1 311 0
 342 0088 7F4B     		ldr	r3, .L48
 343 008a DB78     		ldrb	r3, [r3, #3]
 344 008c DBB2     		uxtb	r3, r3
 345 008e 0133     		adds	r3, r3, #1
 346 0090 DAB2     		uxtb	r2, r3
 347 0092 7D4B     		ldr	r3, .L48
 348 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 349              		.loc 1 314 0
 350 0096 7C4B     		ldr	r3, .L48
 351 0098 DB78     		ldrb	r3, [r3, #3]
 352 009a DBB2     		uxtb	r3, r3
 353 009c 072B     		cmp	r3, #7
 354 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 355              		.loc 1 317 0
 356 00a0 794B     		ldr	r3, .L48
 357 00a2 0122     		movs	r2, #1
 358 00a4 DA70     		strb	r2, [r3, #3]
 359              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 13


 360              		.loc 1 325 0
 361 00a6 794B     		ldr	r3, .L48+4
 362 00a8 1B78     		ldrb	r3, [r3]
 363 00aa DBB2     		uxtb	r3, r3
 364 00ac 03F00203 		and	r3, r3, #2
 365 00b0 002B     		cmp	r3, #0
 366 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 367              		.loc 1 326 0 discriminator 1
 368 00b4 744B     		ldr	r3, .L48
 369 00b6 1B7A     		ldrb	r3, [r3, #8]
 370 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 371              		.loc 1 325 0 discriminator 1
 372 00ba 022B     		cmp	r3, #2
 373 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 374              		.loc 1 327 0
 375 00be 724B     		ldr	r3, .L48
 376 00c0 1B79     		ldrb	r3, [r3, #4]
 377 00c2 DBB2     		uxtb	r3, r3
 378 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 379              		.loc 1 328 0
 380 00c6 704B     		ldr	r3, .L48
 381 00c8 1B7A     		ldrb	r3, [r3, #8]
 382 00ca DBB2     		uxtb	r3, r3
 383 00cc 013B     		subs	r3, r3, #1
 384 00ce 704A     		ldr	r2, .L48+8
 385 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 386 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 387              		.loc 1 326 0
 388 00d4 9942     		cmp	r1, r3
 389 00d6 2AD8     		bhi	.L14
 390              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 391              		.loc 1 329 0
 392 00d8 6C4B     		ldr	r3, .L48+4
 393 00da 1B78     		ldrb	r3, [r3]
 394 00dc DBB2     		uxtb	r3, r3
 395 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 396              		.loc 1 328 0
 397 00e2 002B     		cmp	r3, #0
 398 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 399              		.loc 1 330 0
 400 00e6 684B     		ldr	r3, .L48
 401 00e8 1B7A     		ldrb	r3, [r3, #8]
 402 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 403              		.loc 1 329 0
 404 00ec 022B     		cmp	r3, #2
 405 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 406              		.loc 1 331 0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 14


 407 00f0 654B     		ldr	r3, .L48
 408 00f2 1B79     		ldrb	r3, [r3, #4]
 409 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 410              		.loc 1 332 0
 411 00f6 644B     		ldr	r3, .L48
 412 00f8 1B7A     		ldrb	r3, [r3, #8]
 413 00fa DBB2     		uxtb	r3, r3
 414 00fc 013B     		subs	r3, r3, #1
 415 00fe 6449     		ldr	r1, .L48+8
 416 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 417              		.loc 1 330 0
 418 0102 9A42     		cmp	r2, r3
 419 0104 13D8     		bhi	.L14
 420              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 421              		.loc 1 333 0
 422 0106 614B     		ldr	r3, .L48+4
 423 0108 1B78     		ldrb	r3, [r3]
 424 010a DBB2     		uxtb	r3, r3
 425 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 426              		.loc 1 332 0
 427 0110 002B     		cmp	r3, #0
 428 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 429              		.loc 1 334 0
 430 0116 5C4B     		ldr	r3, .L48
 431 0118 1B79     		ldrb	r3, [r3, #4]
 432 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 433              		.loc 1 335 0
 434 011c 5A4B     		ldr	r3, .L48
 435 011e 1B7A     		ldrb	r3, [r3, #8]
 436 0120 DBB2     		uxtb	r3, r3
 437 0122 013B     		subs	r3, r3, #1
 438 0124 5A49     		ldr	r1, .L48+8
 439 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 440              		.loc 1 333 0
 441 0128 9A42     		cmp	r2, r3
 442 012a 40F2E880 		bls	.L16
 443              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 444              		.loc 1 338 0
 445 012e 564B     		ldr	r3, .L48
 446 0130 1B7A     		ldrb	r3, [r3, #8]
 447 0132 DBB2     		uxtb	r3, r3
 448 0134 0133     		adds	r3, r3, #1
 449 0136 DAB2     		uxtb	r2, r3
 450 0138 534B     		ldr	r3, .L48
 451 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 15


 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 452              		.loc 1 341 0
 453 013c 524B     		ldr	r3, .L48
 454 013e 0122     		movs	r2, #1
 455 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 456              		.loc 1 344 0
 457 0142 514B     		ldr	r3, .L48
 458 0144 1B7A     		ldrb	r3, [r3, #8]
 459 0146 DBB2     		uxtb	r3, r3
 460 0148 0C2B     		cmp	r3, #12
 461 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 462              		.loc 1 347 0
 463 014e 4E4B     		ldr	r3, .L48
 464 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 465 0152 9BB2     		uxth	r3, r3
 466 0154 0133     		adds	r3, r3, #1
 467 0156 9AB2     		uxth	r2, r3
 468 0158 4B4B     		ldr	r3, .L48
 469 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 470              		.loc 1 350 0
 471 015c 4A4B     		ldr	r3, .L48
 472 015e 0122     		movs	r2, #1
 473 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 474              		.loc 1 353 0
 475 0162 494B     		ldr	r3, .L48
 476 0164 0122     		movs	r2, #1
 477 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 478              		.loc 1 356 0
 479 0168 474B     		ldr	r3, .L48
 480 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 481 016c 9BB2     		uxth	r3, r3
 482 016e 494A     		ldr	r2, .L48+12
 483 0170 A2FB0312 		umull	r1, r2, r2, r3
 484 0174 D209     		lsrs	r2, r2, #7
 485 0176 4FF4C871 		mov	r1, #400
 486 017a 01FB02F2 		mul	r2, r1, r2
 487 017e 9B1A     		subs	r3, r3, r2
 488 0180 9BB2     		uxth	r3, r3
 489 0182 002B     		cmp	r3, #0
 490 0184 15D0     		beq	.L18
 491              		.loc 1 356 0 is_stmt 0 discriminator 1
 492 0186 404B     		ldr	r3, .L48
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 16


 493 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 494 018a 9BB2     		uxth	r3, r3
 495 018c 03F00303 		and	r3, r3, #3
 496 0190 9BB2     		uxth	r3, r3
 497 0192 002B     		cmp	r3, #0
 498 0194 16D1     		bne	.L19
 499              		.loc 1 356 0 discriminator 2
 500 0196 3C4B     		ldr	r3, .L48
 501 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 502 019a 9BB2     		uxth	r3, r3
 503 019c 3D4A     		ldr	r2, .L48+12
 504 019e A2FB0312 		umull	r1, r2, r2, r3
 505 01a2 5209     		lsrs	r2, r2, #5
 506 01a4 6421     		movs	r1, #100
 507 01a6 01FB02F2 		mul	r2, r1, r2
 508 01aa 9B1A     		subs	r3, r3, r2
 509 01ac 9BB2     		uxth	r3, r3
 510 01ae 002B     		cmp	r3, #0
 511 01b0 08D0     		beq	.L19
 512              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 513              		.loc 1 359 0 is_stmt 1
 514 01b2 364B     		ldr	r3, .L48+4
 515 01b4 1B78     		ldrb	r3, [r3]
 516 01b6 DBB2     		uxtb	r3, r3
 517 01b8 43F00203 		orr	r3, r3, #2
 518 01bc DAB2     		uxtb	r2, r3
 519 01be 334B     		ldr	r3, .L48+4
 520 01c0 1A70     		strb	r2, [r3]
 521 01c2 07E0     		b	.L20
 522              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 523              		.loc 1 364 0
 524 01c4 314B     		ldr	r3, .L48+4
 525 01c6 1B78     		ldrb	r3, [r3]
 526 01c8 DBB2     		uxtb	r3, r3
 527 01ca 23F00203 		bic	r3, r3, #2
 528 01ce DAB2     		uxtb	r2, r3
 529 01d0 2E4B     		ldr	r3, .L48+4
 530 01d2 1A70     		strb	r2, [r3]
 531              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 532              		.loc 1 368 0
 533 01d4 304B     		ldr	r3, .L48+16
 534 01d6 1B78     		ldrb	r3, [r3]
 535 01d8 DBB2     		uxtb	r3, r3
 536 01da 5BB2     		sxtb	r3, r3
 537 01dc 002B     		cmp	r3, #0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 17


 538 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 539              		.loc 1 372 0
 540 01e0 2E4B     		ldr	r3, .L48+20
 541 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 542 01e4 9AB2     		uxth	r2, r3
 543 01e6 284B     		ldr	r3, .L48
 544 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 545 01ea 9BB2     		uxth	r3, r3
 546 01ec 9A42     		cmp	r2, r3
 547 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 548              		.loc 1 375 0
 549 01f0 2B4B     		ldr	r3, .L48+24
 550 01f2 1B78     		ldrb	r3, [r3]
 551 01f4 DBB2     		uxtb	r3, r3
 552 01f6 63F07F03 		orn	r3, r3, #127
 553 01fa DAB2     		uxtb	r2, r3
 554 01fc 284B     		ldr	r3, .L48+24
 555 01fe 1A70     		strb	r2, [r3]
 556 0200 07E0     		b	.L21
 557              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 558              		.loc 1 380 0
 559 0202 274B     		ldr	r3, .L48+24
 560 0204 1B78     		ldrb	r3, [r3]
 561 0206 DBB2     		uxtb	r3, r3
 562 0208 03F07F03 		and	r3, r3, #127
 563 020c DAB2     		uxtb	r2, r3
 564 020e 244B     		ldr	r3, .L48+24
 565 0210 1A70     		strb	r2, [r3]
 566              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 567              		.loc 1 385 0
 568 0212 214B     		ldr	r3, .L48+16
 569 0214 1B78     		ldrb	r3, [r3]
 570 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 571              		.loc 1 386 0
 572 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 573 021a 002B     		cmp	r3, #0
 574 021c 13D0     		beq	.L23
 575              		.loc 1 386 0 is_stmt 0 discriminator 1
 576 021e 204B     		ldr	r3, .L48+24
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 18


 577 0220 1B78     		ldrb	r3, [r3]
 578 0222 DAB2     		uxtb	r2, r3
 579 0224 FB79     		ldrb	r3, [r7, #7]
 580 0226 1340     		ands	r3, r3, r2
 581 0228 DBB2     		uxtb	r3, r3
 582 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 583 022c 9A42     		cmp	r2, r3
 584 022e 0AD1     		bne	.L23
 585              		.loc 1 386 0 discriminator 2
 586 0230 164B     		ldr	r3, .L48+4
 587 0232 1B78     		ldrb	r3, [r3]
 588 0234 DBB2     		uxtb	r3, r3
 589 0236 43F00803 		orr	r3, r3, #8
 590 023a DAB2     		uxtb	r2, r3
 591 023c 134B     		ldr	r3, .L48+4
 592 023e 1A70     		strb	r2, [r3]
 593 0240 174B     		ldr	r3, .L48+24
 594 0242 0022     		movs	r2, #0
 595 0244 1A70     		strb	r2, [r3]
 596              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 597              		.loc 1 391 0 is_stmt 1
 598 0246 174B     		ldr	r3, .L48+28
 599 0248 1B78     		ldrb	r3, [r3]
 600 024a DBB2     		uxtb	r3, r3
 601 024c 03F04003 		and	r3, r3, #64
 602 0250 002B     		cmp	r3, #0
 603 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 604              		.loc 1 394 0
 605 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 606              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 607              		.loc 1 400 0
 608 0258 0F4B     		ldr	r3, .L48+16
 609 025a 1B78     		ldrb	r3, [r3]
 610 025c DBB2     		uxtb	r3, r3
 611 025e 03F04003 		and	r3, r3, #64
 612 0262 002B     		cmp	r3, #0
 613 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 614              		.loc 1 403 0
 615 0266 0D4B     		ldr	r3, .L48+20
 616 0268 1B7A     		ldrb	r3, [r3, #8]
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 19


 617 026a DAB2     		uxtb	r2, r3
 618 026c 064B     		ldr	r3, .L48
 619 026e 1B7A     		ldrb	r3, [r3, #8]
 620 0270 DBB2     		uxtb	r3, r3
 621 0272 9A42     		cmp	r2, r3
 622 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 623              		.loc 1 406 0
 624 0276 0A4B     		ldr	r3, .L48+24
 625 0278 1B78     		ldrb	r3, [r3]
 626 027a DBB2     		uxtb	r3, r3
 627 027c 43F04003 		orr	r3, r3, #64
 628 0280 DAB2     		uxtb	r2, r3
 629 0282 074B     		ldr	r3, .L48+24
 630 0284 1A70     		strb	r2, [r3]
 631 0286 17E0     		b	.L24
 632              	.L49:
 633              		.align	2
 634              	.L48:
 635 0288 00000000 		.word	RTC_currentTimeDate
 636 028c 00000000 		.word	RTC_statusDateTime
 637 0290 00000000 		.word	RTC_daysInMonths
 638 0294 1F85EB51 		.word	1374389535
 639 0298 00000000 		.word	RTC_alarmCfgMask
 640 029c 00000000 		.word	RTC_alarmCfgTimeDate
 641 02a0 00000000 		.word	RTC_alarmCurStatus
 642 02a4 00000000 		.word	RTC_intervalCfgMask
 643              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 644              		.loc 1 411 0
 645 02a8 964B     		ldr	r3, .L50
 646 02aa 1B78     		ldrb	r3, [r3]
 647 02ac DBB2     		uxtb	r3, r3
 648 02ae 23F04003 		bic	r3, r3, #64
 649 02b2 DAB2     		uxtb	r2, r3
 650 02b4 934B     		ldr	r3, .L50
 651 02b6 1A70     		strb	r2, [r3]
 652              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 20


 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 653              		.loc 1 436 0
 654 02b8 934B     		ldr	r3, .L50+4
 655 02ba 1B78     		ldrb	r3, [r3]
 656 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 657              		.loc 1 437 0
 658 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 659 02c0 002B     		cmp	r3, #0
 660 02c2 13D0     		beq	.L26
 661              		.loc 1 437 0 is_stmt 0 discriminator 1
 662 02c4 8F4B     		ldr	r3, .L50
 663 02c6 1B78     		ldrb	r3, [r3]
 664 02c8 DAB2     		uxtb	r2, r3
 665 02ca FB79     		ldrb	r3, [r7, #7]
 666 02cc 1340     		ands	r3, r3, r2
 667 02ce DBB2     		uxtb	r3, r3
 668 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 669 02d2 9A42     		cmp	r2, r3
 670 02d4 0AD1     		bne	.L26
 671              		.loc 1 437 0 discriminator 2
 672 02d6 8D4B     		ldr	r3, .L50+8
 673 02d8 1B78     		ldrb	r3, [r3]
 674 02da DBB2     		uxtb	r3, r3
 675 02dc 43F00803 		orr	r3, r3, #8
 676 02e0 DAB2     		uxtb	r2, r3
 677 02e2 8A4B     		ldr	r3, .L50+8
 678 02e4 1A70     		strb	r2, [r3]
 679 02e6 874B     		ldr	r3, .L50
 680 02e8 0022     		movs	r2, #0
 681 02ea 1A70     		strb	r2, [r3]
 682              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 683              		.loc 1 442 0 is_stmt 1
 684 02ec 884B     		ldr	r3, .L50+12
 685 02ee 1B78     		ldrb	r3, [r3]
 686 02f0 DBB2     		uxtb	r3, r3
 687 02f2 03F02003 		and	r3, r3, #32
 688 02f6 002B     		cmp	r3, #0
 689 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 21


 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 690              		.loc 1 445 0
 691 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 692              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 693              		.loc 1 450 0
 694 02fe 824B     		ldr	r3, .L50+4
 695 0300 1B78     		ldrb	r3, [r3]
 696 0302 DBB2     		uxtb	r3, r3
 697 0304 03F00803 		and	r3, r3, #8
 698 0308 002B     		cmp	r3, #0
 699 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 700              		.loc 1 453 0
 701 030c 814B     		ldr	r3, .L50+16
 702 030e DB78     		ldrb	r3, [r3, #3]
 703 0310 DAB2     		uxtb	r2, r3
 704 0312 814B     		ldr	r3, .L50+20
 705 0314 DB78     		ldrb	r3, [r3, #3]
 706 0316 DBB2     		uxtb	r3, r3
 707 0318 9A42     		cmp	r2, r3
 708 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 709              		.loc 1 456 0
 710 031c 794B     		ldr	r3, .L50
 711 031e 1B78     		ldrb	r3, [r3]
 712 0320 DBB2     		uxtb	r3, r3
 713 0322 43F00803 		orr	r3, r3, #8
 714 0326 DAB2     		uxtb	r2, r3
 715 0328 764B     		ldr	r3, .L50
 716 032a 1A70     		strb	r2, [r3]
 717 032c 07E0     		b	.L27
 718              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 719              		.loc 1 461 0
 720 032e 754B     		ldr	r3, .L50
 721 0330 1B78     		ldrb	r3, [r3]
 722 0332 DBB2     		uxtb	r3, r3
 723 0334 23F00803 		bic	r3, r3, #8
 724 0338 DAB2     		uxtb	r2, r3
 725 033a 724B     		ldr	r3, .L50
 726 033c 1A70     		strb	r2, [r3]
 727              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 22


 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 728              		.loc 1 466 0
 729 033e 724B     		ldr	r3, .L50+4
 730 0340 1B78     		ldrb	r3, [r3]
 731 0342 DBB2     		uxtb	r3, r3
 732 0344 03F02003 		and	r3, r3, #32
 733 0348 002B     		cmp	r3, #0
 734 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 735              		.loc 1 469 0
 736 034c 714B     		ldr	r3, .L50+16
 737 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 738 0350 9AB2     		uxth	r2, r3
 739 0352 714B     		ldr	r3, .L50+20
 740 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 741 0356 9BB2     		uxth	r3, r3
 742 0358 9A42     		cmp	r2, r3
 743 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 744              		.loc 1 472 0
 745 035c 694B     		ldr	r3, .L50
 746 035e 1B78     		ldrb	r3, [r3]
 747 0360 DBB2     		uxtb	r3, r3
 748 0362 43F02003 		orr	r3, r3, #32
 749 0366 DAB2     		uxtb	r2, r3
 750 0368 664B     		ldr	r3, .L50
 751 036a 1A70     		strb	r2, [r3]
 752 036c 07E0     		b	.L29
 753              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 754              		.loc 1 477 0
 755 036e 654B     		ldr	r3, .L50
 756 0370 1B78     		ldrb	r3, [r3]
 757 0372 DBB2     		uxtb	r3, r3
 758 0374 23F02003 		bic	r3, r3, #32
 759 0378 DAB2     		uxtb	r2, r3
 760 037a 624B     		ldr	r3, .L50
 761 037c 1A70     		strb	r2, [r3]
 762              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 763              		.loc 1 482 0
 764 037e 624B     		ldr	r3, .L50+4
 765 0380 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 23


 766 0382 DBB2     		uxtb	r3, r3
 767 0384 03F01003 		and	r3, r3, #16
 768 0388 002B     		cmp	r3, #0
 769 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 770              		.loc 1 485 0
 771 038c 614B     		ldr	r3, .L50+16
 772 038e 1B79     		ldrb	r3, [r3, #4]
 773 0390 DAB2     		uxtb	r2, r3
 774 0392 614B     		ldr	r3, .L50+20
 775 0394 1B79     		ldrb	r3, [r3, #4]
 776 0396 DBB2     		uxtb	r3, r3
 777 0398 9A42     		cmp	r2, r3
 778 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 779              		.loc 1 488 0
 780 039c 594B     		ldr	r3, .L50
 781 039e 1B78     		ldrb	r3, [r3]
 782 03a0 DBB2     		uxtb	r3, r3
 783 03a2 43F01003 		orr	r3, r3, #16
 784 03a6 DAB2     		uxtb	r2, r3
 785 03a8 564B     		ldr	r3, .L50
 786 03aa 1A70     		strb	r2, [r3]
 787 03ac 07E0     		b	.L31
 788              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 789              		.loc 1 493 0
 790 03ae 554B     		ldr	r3, .L50
 791 03b0 1B78     		ldrb	r3, [r3]
 792 03b2 DBB2     		uxtb	r3, r3
 793 03b4 23F01003 		bic	r3, r3, #16
 794 03b8 DAB2     		uxtb	r2, r3
 795 03ba 524B     		ldr	r3, .L50
 796 03bc 1A70     		strb	r2, [r3]
 797              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 24


 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 798              		.loc 1 518 0
 799 03be 524B     		ldr	r3, .L50+4
 800 03c0 1B78     		ldrb	r3, [r3]
 801 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 802              		.loc 1 519 0
 803 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 804 03c6 002B     		cmp	r3, #0
 805 03c8 13D0     		beq	.L33
 806              		.loc 1 519 0 is_stmt 0 discriminator 1
 807 03ca 4E4B     		ldr	r3, .L50
 808 03cc 1B78     		ldrb	r3, [r3]
 809 03ce DAB2     		uxtb	r2, r3
 810 03d0 FB79     		ldrb	r3, [r7, #7]
 811 03d2 1340     		ands	r3, r3, r2
 812 03d4 DBB2     		uxtb	r3, r3
 813 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 814 03d8 9A42     		cmp	r2, r3
 815 03da 0AD1     		bne	.L33
 816              		.loc 1 519 0 discriminator 2
 817 03dc 4B4B     		ldr	r3, .L50+8
 818 03de 1B78     		ldrb	r3, [r3]
 819 03e0 DBB2     		uxtb	r3, r3
 820 03e2 43F00803 		orr	r3, r3, #8
 821 03e6 DAB2     		uxtb	r2, r3
 822 03e8 484B     		ldr	r3, .L50+8
 823 03ea 1A70     		strb	r2, [r3]
 824 03ec 454B     		ldr	r3, .L50
 825 03ee 0022     		movs	r2, #0
 826 03f0 1A70     		strb	r2, [r3]
 827              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 828              		.loc 1 524 0 is_stmt 1
 829 03f2 474B     		ldr	r3, .L50+12
 830 03f4 1B78     		ldrb	r3, [r3]
 831 03f6 DBB2     		uxtb	r3, r3
 832 03f8 03F00803 		and	r3, r3, #8
 833 03fc 002B     		cmp	r3, #0
 834 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 25


 835              		.loc 1 527 0
 836 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 837              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 838              		.loc 1 530 0
 839 0404 444B     		ldr	r3, .L50+20
 840 0406 DB78     		ldrb	r3, [r3, #3]
 841 0408 DBB2     		uxtb	r3, r3
 842 040a 012B     		cmp	r3, #1
 843 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 844              		.loc 1 533 0
 845 040e 404B     		ldr	r3, .L50+12
 846 0410 1B78     		ldrb	r3, [r3]
 847 0412 DBB2     		uxtb	r3, r3
 848 0414 03F01003 		and	r3, r3, #16
 849 0418 002B     		cmp	r3, #0
 850 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 851              		.loc 1 536 0
 852 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 853              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 854              		.loc 1 543 0
 855 0420 3D4B     		ldr	r3, .L50+20
 856 0422 9B78     		ldrb	r3, [r3, #2]
 857 0424 DBB2     		uxtb	r3, r3
 858 0426 0B2B     		cmp	r3, #11
 859 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 860              		.loc 1 546 0
 861 042a 384B     		ldr	r3, .L50+8
 862 042c 1B78     		ldrb	r3, [r3]
 863 042e DBB2     		uxtb	r3, r3
 864 0430 23F00403 		bic	r3, r3, #4
 865 0434 DAB2     		uxtb	r2, r3
 866 0436 354B     		ldr	r3, .L50+8
 867 0438 1A70     		strb	r2, [r3]
 868 043a 07E0     		b	.L36
 869              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 26


 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 870              		.loc 1 551 0
 871 043c 334B     		ldr	r3, .L50+8
 872 043e 1B78     		ldrb	r3, [r3]
 873 0440 DBB2     		uxtb	r3, r3
 874 0442 43F00403 		orr	r3, r3, #4
 875 0446 DAB2     		uxtb	r2, r3
 876 0448 304B     		ldr	r3, .L50+8
 877 044a 1A70     		strb	r2, [r3]
 878              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 27


 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 28


 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 29


 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 30


 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 31


 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 879              		.loc 1 879 0
 880 044c 2E4B     		ldr	r3, .L50+4
 881 044e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 32


 882 0450 DBB2     		uxtb	r3, r3
 883 0452 03F00403 		and	r3, r3, #4
 884 0456 002B     		cmp	r3, #0
 885 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 886              		.loc 1 881 0
 887 045a 2E4B     		ldr	r3, .L50+16
 888 045c 9B78     		ldrb	r3, [r3, #2]
 889 045e DAB2     		uxtb	r2, r3
 890 0460 2D4B     		ldr	r3, .L50+20
 891 0462 9B78     		ldrb	r3, [r3, #2]
 892 0464 DBB2     		uxtb	r3, r3
 893 0466 9A42     		cmp	r2, r3
 894 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 895              		.loc 1 883 0
 896 046a 264B     		ldr	r3, .L50
 897 046c 1B78     		ldrb	r3, [r3]
 898 046e DBB2     		uxtb	r3, r3
 899 0470 43F00403 		orr	r3, r3, #4
 900 0474 DAB2     		uxtb	r2, r3
 901 0476 234B     		ldr	r3, .L50
 902 0478 1A70     		strb	r2, [r3]
 903 047a 07E0     		b	.L37
 904              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 905              		.loc 1 887 0
 906 047c 214B     		ldr	r3, .L50
 907 047e 1B78     		ldrb	r3, [r3]
 908 0480 DBB2     		uxtb	r3, r3
 909 0482 23F00403 		bic	r3, r3, #4
 910 0486 DAB2     		uxtb	r2, r3
 911 0488 1E4B     		ldr	r3, .L50
 912 048a 1A70     		strb	r2, [r3]
 913              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 914              		.loc 1 892 0
 915 048c 1E4B     		ldr	r3, .L50+4
 916 048e 1B78     		ldrb	r3, [r3]
 917 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 918              		.loc 1 893 0
 919 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 920 0494 002B     		cmp	r3, #0
 921 0496 13D0     		beq	.L39
 922              		.loc 1 893 0 is_stmt 0 discriminator 1
 923 0498 1A4B     		ldr	r3, .L50
 924 049a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 33


 925 049c DAB2     		uxtb	r2, r3
 926 049e FB79     		ldrb	r3, [r7, #7]
 927 04a0 1340     		ands	r3, r3, r2
 928 04a2 DBB2     		uxtb	r3, r3
 929 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 930 04a6 9A42     		cmp	r2, r3
 931 04a8 0AD1     		bne	.L39
 932              		.loc 1 893 0 discriminator 2
 933 04aa 184B     		ldr	r3, .L50+8
 934 04ac 1B78     		ldrb	r3, [r3]
 935 04ae DBB2     		uxtb	r3, r3
 936 04b0 43F00803 		orr	r3, r3, #8
 937 04b4 DAB2     		uxtb	r2, r3
 938 04b6 154B     		ldr	r3, .L50+8
 939 04b8 1A70     		strb	r2, [r3]
 940 04ba 124B     		ldr	r3, .L50
 941 04bc 0022     		movs	r2, #0
 942 04be 1A70     		strb	r2, [r3]
 943              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 944              		.loc 1 898 0 is_stmt 1
 945 04c0 134B     		ldr	r3, .L50+12
 946 04c2 1B78     		ldrb	r3, [r3]
 947 04c4 DBB2     		uxtb	r3, r3
 948 04c6 03F00403 		and	r3, r3, #4
 949 04ca 002B     		cmp	r3, #0
 950 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 951              		.loc 1 900 0
 952 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 953              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 954              		.loc 1 905 0
 955 04d2 0D4B     		ldr	r3, .L50+4
 956 04d4 1B78     		ldrb	r3, [r3]
 957 04d6 DBB2     		uxtb	r3, r3
 958 04d8 03F00203 		and	r3, r3, #2
 959 04dc 002B     		cmp	r3, #0
 960 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 961              		.loc 1 907 0
 962 04e0 0C4B     		ldr	r3, .L50+16
 963 04e2 5B78     		ldrb	r3, [r3, #1]
 964 04e4 DAB2     		uxtb	r2, r3
 965 04e6 0C4B     		ldr	r3, .L50+20
 966 04e8 5B78     		ldrb	r3, [r3, #1]
 967 04ea DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 34


 968 04ec 9A42     		cmp	r2, r3
 969 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 970              		.loc 1 909 0
 971 04f0 044B     		ldr	r3, .L50
 972 04f2 1B78     		ldrb	r3, [r3]
 973 04f4 DBB2     		uxtb	r3, r3
 974 04f6 43F00203 		orr	r3, r3, #2
 975 04fa DAB2     		uxtb	r2, r3
 976 04fc 014B     		ldr	r3, .L50
 977 04fe 1A70     		strb	r2, [r3]
 978 0500 14E0     		b	.L40
 979              	.L51:
 980 0502 00BF     		.align	2
 981              	.L50:
 982 0504 00000000 		.word	RTC_alarmCurStatus
 983 0508 00000000 		.word	RTC_alarmCfgMask
 984 050c 00000000 		.word	RTC_statusDateTime
 985 0510 00000000 		.word	RTC_intervalCfgMask
 986 0514 00000000 		.word	RTC_alarmCfgTimeDate
 987 0518 00000000 		.word	RTC_currentTimeDate
 988              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 989              		.loc 1 913 0
 990 051c 384B     		ldr	r3, .L52
 991 051e 1B78     		ldrb	r3, [r3]
 992 0520 DBB2     		uxtb	r3, r3
 993 0522 23F00203 		bic	r3, r3, #2
 994 0526 DAB2     		uxtb	r2, r3
 995 0528 354B     		ldr	r3, .L52
 996 052a 1A70     		strb	r2, [r3]
 997              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 998              		.loc 1 918 0
 999 052c 354B     		ldr	r3, .L52+4
 1000 052e 1B78     		ldrb	r3, [r3]
 1001 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 1002              		.loc 1 919 0
 1003 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1004 0534 002B     		cmp	r3, #0
 1005 0536 13D0     		beq	.L42
 1006              		.loc 1 919 0 is_stmt 0 discriminator 1
 1007 0538 314B     		ldr	r3, .L52
 1008 053a 1B78     		ldrb	r3, [r3]
 1009 053c DAB2     		uxtb	r2, r3
 1010 053e FB79     		ldrb	r3, [r7, #7]
 1011 0540 1340     		ands	r3, r3, r2
 1012 0542 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 35


 1013 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1014 0546 9A42     		cmp	r2, r3
 1015 0548 0AD1     		bne	.L42
 1016              		.loc 1 919 0 discriminator 2
 1017 054a 2F4B     		ldr	r3, .L52+8
 1018 054c 1B78     		ldrb	r3, [r3]
 1019 054e DBB2     		uxtb	r3, r3
 1020 0550 43F00803 		orr	r3, r3, #8
 1021 0554 DAB2     		uxtb	r2, r3
 1022 0556 2C4B     		ldr	r3, .L52+8
 1023 0558 1A70     		strb	r2, [r3]
 1024 055a 294B     		ldr	r3, .L52
 1025 055c 0022     		movs	r2, #0
 1026 055e 1A70     		strb	r2, [r3]
 1027              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1028              		.loc 1 924 0 is_stmt 1
 1029 0560 2A4B     		ldr	r3, .L52+12
 1030 0562 1B78     		ldrb	r3, [r3]
 1031 0564 DBB2     		uxtb	r3, r3
 1032 0566 03F00203 		and	r3, r3, #2
 1033 056a 002B     		cmp	r3, #0
 1034 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1035              		.loc 1 926 0
 1036 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1037              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1038              		.loc 1 931 0
 1039 0572 244B     		ldr	r3, .L52+4
 1040 0574 1B78     		ldrb	r3, [r3]
 1041 0576 DBB2     		uxtb	r3, r3
 1042 0578 03F00103 		and	r3, r3, #1
 1043 057c 002B     		cmp	r3, #0
 1044 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1045              		.loc 1 933 0
 1046 0580 234B     		ldr	r3, .L52+16
 1047 0582 1B78     		ldrb	r3, [r3]
 1048 0584 DAB2     		uxtb	r2, r3
 1049 0586 234B     		ldr	r3, .L52+20
 1050 0588 1B78     		ldrb	r3, [r3]
 1051 058a DBB2     		uxtb	r3, r3
 1052 058c 9A42     		cmp	r2, r3
 1053 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 36


 1054              		.loc 1 935 0
 1055 0590 1B4B     		ldr	r3, .L52
 1056 0592 1B78     		ldrb	r3, [r3]
 1057 0594 DBB2     		uxtb	r3, r3
 1058 0596 43F00103 		orr	r3, r3, #1
 1059 059a DAB2     		uxtb	r2, r3
 1060 059c 184B     		ldr	r3, .L52
 1061 059e 1A70     		strb	r2, [r3]
 1062 05a0 07E0     		b	.L43
 1063              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1064              		.loc 1 939 0
 1065 05a2 174B     		ldr	r3, .L52
 1066 05a4 1B78     		ldrb	r3, [r3]
 1067 05a6 DBB2     		uxtb	r3, r3
 1068 05a8 23F00103 		bic	r3, r3, #1
 1069 05ac DAB2     		uxtb	r2, r3
 1070 05ae 144B     		ldr	r3, .L52
 1071 05b0 1A70     		strb	r2, [r3]
 1072              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1073              		.loc 1 944 0
 1074 05b2 144B     		ldr	r3, .L52+4
 1075 05b4 1B78     		ldrb	r3, [r3]
 1076 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1077              		.loc 1 945 0
 1078 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1079 05ba 002B     		cmp	r3, #0
 1080 05bc 13D0     		beq	.L45
 1081              		.loc 1 945 0 is_stmt 0 discriminator 1
 1082 05be 104B     		ldr	r3, .L52
 1083 05c0 1B78     		ldrb	r3, [r3]
 1084 05c2 DAB2     		uxtb	r2, r3
 1085 05c4 FB79     		ldrb	r3, [r7, #7]
 1086 05c6 1340     		ands	r3, r3, r2
 1087 05c8 DBB2     		uxtb	r3, r3
 1088 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1089 05cc 9A42     		cmp	r2, r3
 1090 05ce 0AD1     		bne	.L45
 1091              		.loc 1 945 0 discriminator 2
 1092 05d0 0D4B     		ldr	r3, .L52+8
 1093 05d2 1B78     		ldrb	r3, [r3]
 1094 05d4 DBB2     		uxtb	r3, r3
 1095 05d6 43F00803 		orr	r3, r3, #8
 1096 05da DAB2     		uxtb	r2, r3
 1097 05dc 0A4B     		ldr	r3, .L52+8
 1098 05de 1A70     		strb	r2, [r3]
 1099 05e0 074B     		ldr	r3, .L52
 1100 05e2 0022     		movs	r2, #0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 37


 1101 05e4 1A70     		strb	r2, [r3]
 1102              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1103              		.loc 1 948 0 is_stmt 1
 1104 05e6 094B     		ldr	r3, .L52+12
 1105 05e8 1B78     		ldrb	r3, [r3]
 1106 05ea DBB2     		uxtb	r3, r3
 1107 05ec 03F00103 		and	r3, r3, #1
 1108 05f0 002B     		cmp	r3, #0
 1109 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1110              		.loc 1 950 0
 1111 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1112              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1113              		.loc 1 956 0
 1114 05f8 00BF     		nop
 1115 05fa 0837     		adds	r7, r7, #8
 1116              		.cfi_def_cfa_offset 8
 1117 05fc BD46     		mov	sp, r7
 1118              		.cfi_def_cfa_register 13
 1119              		@ sp needed
 1120 05fe 80BD     		pop	{r7, pc}
 1121              	.L53:
 1122              		.align	2
 1123              	.L52:
 1124 0600 00000000 		.word	RTC_alarmCurStatus
 1125 0604 00000000 		.word	RTC_alarmCfgMask
 1126 0608 00000000 		.word	RTC_statusDateTime
 1127 060c 00000000 		.word	RTC_intervalCfgMask
 1128 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1129 0614 00000000 		.word	RTC_currentTimeDate
 1130              		.cfi_endproc
 1131              	.LFE71:
 1132              		.size	RTC_ISR, .-RTC_ISR
 1133              		.text
 1134              	.Letext0:
 1135              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1136              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1137              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1138              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1139              		.file 6 "./data.h"
 1140              		.file 7 "./modem.h"
 1141              		.file 8 "./notoriOS.h"
 1142              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1143              		.file 10 "./App_LED.h"
 1144              		.file 11 "./level_sensor.h"
 1145              		.file 12 "./downstream_level_sensor.h"
 1146              		.file 13 "./valve.h"
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 38


 1147              		.file 14 "./autosampler.h"
 1148              		.section	.debug_info,"",%progbits
 1149              	.Ldebug_info0:
 1150 0000 D0070000 		.4byte	0x7d0
 1151 0004 0400     		.2byte	0x4
 1152 0006 00000000 		.4byte	.Ldebug_abbrev0
 1153 000a 04       		.byte	0x4
 1154 000b 01       		.uleb128 0x1
 1155 000c 7D000000 		.4byte	.LASF121
 1156 0010 0C       		.byte	0xc
 1157 0011 5F010000 		.4byte	.LASF122
 1158 0015 87040000 		.4byte	.LASF123
 1159 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1160 001d 00000000 		.4byte	0
 1161 0021 00000000 		.4byte	.Ldebug_line0
 1162 0025 02       		.uleb128 0x2
 1163 0026 01       		.byte	0x1
 1164 0027 06       		.byte	0x6
 1165 0028 4A000000 		.4byte	.LASF0
 1166 002c 02       		.uleb128 0x2
 1167 002d 01       		.byte	0x1
 1168 002e 08       		.byte	0x8
 1169 002f 05050000 		.4byte	.LASF1
 1170 0033 02       		.uleb128 0x2
 1171 0034 02       		.byte	0x2
 1172 0035 05       		.byte	0x5
 1173 0036 60050000 		.4byte	.LASF2
 1174 003a 02       		.uleb128 0x2
 1175 003b 02       		.byte	0x2
 1176 003c 07       		.byte	0x7
 1177 003d 4B060000 		.4byte	.LASF3
 1178 0041 03       		.uleb128 0x3
 1179 0042 34060000 		.4byte	.LASF9
 1180 0046 02       		.byte	0x2
 1181 0047 3F       		.byte	0x3f
 1182 0048 4C000000 		.4byte	0x4c
 1183 004c 02       		.uleb128 0x2
 1184 004d 04       		.byte	0x4
 1185 004e 05       		.byte	0x5
 1186 004f 27020000 		.4byte	.LASF4
 1187 0053 02       		.uleb128 0x2
 1188 0054 04       		.byte	0x4
 1189 0055 07       		.byte	0x7
 1190 0056 F3020000 		.4byte	.LASF5
 1191 005a 02       		.uleb128 0x2
 1192 005b 08       		.byte	0x8
 1193 005c 05       		.byte	0x5
 1194 005d 80010000 		.4byte	.LASF6
 1195 0061 02       		.uleb128 0x2
 1196 0062 08       		.byte	0x8
 1197 0063 07       		.byte	0x7
 1198 0064 11010000 		.4byte	.LASF7
 1199 0068 04       		.uleb128 0x4
 1200 0069 04       		.byte	0x4
 1201 006a 05       		.byte	0x5
 1202 006b 696E7400 		.ascii	"int\000"
 1203 006f 02       		.uleb128 0x2
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 39


 1204 0070 04       		.byte	0x4
 1205 0071 07       		.byte	0x7
 1206 0072 FC050000 		.4byte	.LASF8
 1207 0076 03       		.uleb128 0x3
 1208 0077 FD040000 		.4byte	.LASF10
 1209 007b 03       		.byte	0x3
 1210 007c 2C       		.byte	0x2c
 1211 007d 41000000 		.4byte	0x41
 1212 0081 05       		.uleb128 0x5
 1213 0082 4C020000 		.4byte	.LASF11
 1214 0086 04       		.byte	0x4
 1215 0087 9201     		.2byte	0x192
 1216 0089 2C000000 		.4byte	0x2c
 1217 008d 05       		.uleb128 0x5
 1218 008e 08000000 		.4byte	.LASF12
 1219 0092 04       		.byte	0x4
 1220 0093 9301     		.2byte	0x193
 1221 0095 3A000000 		.4byte	0x3a
 1222 0099 05       		.uleb128 0x5
 1223 009a 28040000 		.4byte	.LASF13
 1224 009e 04       		.byte	0x4
 1225 009f 9601     		.2byte	0x196
 1226 00a1 33000000 		.4byte	0x33
 1227 00a5 05       		.uleb128 0x5
 1228 00a6 72020000 		.4byte	.LASF14
 1229 00aa 04       		.byte	0x4
 1230 00ab 9701     		.2byte	0x197
 1231 00ad 4C000000 		.4byte	0x4c
 1232 00b1 05       		.uleb128 0x5
 1233 00b2 17040000 		.4byte	.LASF15
 1234 00b6 04       		.byte	0x4
 1235 00b7 9801     		.2byte	0x198
 1236 00b9 BD000000 		.4byte	0xbd
 1237 00bd 02       		.uleb128 0x2
 1238 00be 04       		.byte	0x4
 1239 00bf 04       		.byte	0x4
 1240 00c0 D4040000 		.4byte	.LASF16
 1241 00c4 02       		.uleb128 0x2
 1242 00c5 08       		.byte	0x8
 1243 00c6 04       		.byte	0x4
 1244 00c7 75070000 		.4byte	.LASF17
 1245 00cb 02       		.uleb128 0x2
 1246 00cc 01       		.byte	0x1
 1247 00cd 08       		.byte	0x8
 1248 00ce F7050000 		.4byte	.LASF18
 1249 00d2 06       		.uleb128 0x6
 1250 00d3 81000000 		.4byte	0x81
 1251 00d7 07       		.uleb128 0x7
 1252 00d8 0C       		.byte	0xc
 1253 00d9 05       		.byte	0x5
 1254 00da 30       		.byte	0x30
 1255 00db 40010000 		.4byte	0x140
 1256 00df 08       		.uleb128 0x8
 1257 00e0 53656300 		.ascii	"Sec\000"
 1258 00e4 05       		.byte	0x5
 1259 00e5 32       		.byte	0x32
 1260 00e6 81000000 		.4byte	0x81
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 40


 1261 00ea 00       		.byte	0
 1262 00eb 08       		.uleb128 0x8
 1263 00ec 4D696E00 		.ascii	"Min\000"
 1264 00f0 05       		.byte	0x5
 1265 00f1 33       		.byte	0x33
 1266 00f2 81000000 		.4byte	0x81
 1267 00f6 01       		.byte	0x1
 1268 00f7 09       		.uleb128 0x9
 1269 00f8 28010000 		.4byte	.LASF19
 1270 00fc 05       		.byte	0x5
 1271 00fd 34       		.byte	0x34
 1272 00fe 81000000 		.4byte	0x81
 1273 0102 02       		.byte	0x2
 1274 0103 09       		.uleb128 0x9
 1275 0104 79050000 		.4byte	.LASF20
 1276 0108 05       		.byte	0x5
 1277 0109 35       		.byte	0x35
 1278 010a 81000000 		.4byte	0x81
 1279 010e 03       		.byte	0x3
 1280 010f 09       		.uleb128 0x9
 1281 0110 13030000 		.4byte	.LASF21
 1282 0114 05       		.byte	0x5
 1283 0115 36       		.byte	0x36
 1284 0116 81000000 		.4byte	0x81
 1285 011a 04       		.byte	0x4
 1286 011b 09       		.uleb128 0x9
 1287 011c 5E070000 		.4byte	.LASF22
 1288 0120 05       		.byte	0x5
 1289 0121 37       		.byte	0x37
 1290 0122 8D000000 		.4byte	0x8d
 1291 0126 06       		.byte	0x6
 1292 0127 09       		.uleb128 0x9
 1293 0128 0B010000 		.4byte	.LASF23
 1294 012c 05       		.byte	0x5
 1295 012d 38       		.byte	0x38
 1296 012e 81000000 		.4byte	0x81
 1297 0132 08       		.byte	0x8
 1298 0133 09       		.uleb128 0x9
 1299 0134 DA040000 		.4byte	.LASF24
 1300 0138 05       		.byte	0x5
 1301 0139 39       		.byte	0x39
 1302 013a 8D000000 		.4byte	0x8d
 1303 013e 0A       		.byte	0xa
 1304 013f 00       		.byte	0
 1305 0140 03       		.uleb128 0x3
 1306 0141 4F040000 		.4byte	.LASF25
 1307 0145 05       		.byte	0x5
 1308 0146 3A       		.byte	0x3a
 1309 0147 4B010000 		.4byte	0x14b
 1310 014b 06       		.uleb128 0x6
 1311 014c D7000000 		.4byte	0xd7
 1312 0150 02       		.uleb128 0x2
 1313 0151 08       		.byte	0x8
 1314 0152 04       		.byte	0x4
 1315 0153 EB050000 		.4byte	.LASF26
 1316 0157 02       		.uleb128 0x2
 1317 0158 04       		.byte	0x4
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 41


 1318 0159 07       		.byte	0x7
 1319 015a 1F040000 		.4byte	.LASF27
 1320 015e 0A       		.uleb128 0xa
 1321 015f CB000000 		.4byte	0xcb
 1322 0163 6E010000 		.4byte	0x16e
 1323 0167 0B       		.uleb128 0xb
 1324 0168 57010000 		.4byte	0x157
 1325 016c 17       		.byte	0x17
 1326 016d 00       		.byte	0
 1327 016e 07       		.uleb128 0x7
 1328 016f 2C       		.byte	0x2c
 1329 0170 06       		.byte	0x6
 1330 0171 14       		.byte	0x14
 1331 0172 9B010000 		.4byte	0x19b
 1332 0176 08       		.uleb128 0x8
 1333 0177 6B657900 		.ascii	"key\000"
 1334 017b 06       		.byte	0x6
 1335 017c 15       		.byte	0x15
 1336 017d 9B010000 		.4byte	0x19b
 1337 0181 00       		.byte	0
 1338 0182 09       		.uleb128 0x9
 1339 0183 C7020000 		.4byte	.LASF28
 1340 0187 06       		.byte	0x6
 1341 0188 16       		.byte	0x16
 1342 0189 9B010000 		.4byte	0x19b
 1343 018d 14       		.byte	0x14
 1344 018e 09       		.uleb128 0x9
 1345 018f 45040000 		.4byte	.LASF29
 1346 0193 06       		.byte	0x6
 1347 0194 17       		.byte	0x17
 1348 0195 A5000000 		.4byte	0xa5
 1349 0199 28       		.byte	0x28
 1350 019a 00       		.byte	0
 1351 019b 0A       		.uleb128 0xa
 1352 019c CB000000 		.4byte	0xcb
 1353 01a0 AB010000 		.4byte	0x1ab
 1354 01a4 0B       		.uleb128 0xb
 1355 01a5 57010000 		.4byte	0x157
 1356 01a9 13       		.byte	0x13
 1357 01aa 00       		.byte	0
 1358 01ab 03       		.uleb128 0x3
 1359 01ac E7020000 		.4byte	.LASF30
 1360 01b0 06       		.byte	0x6
 1361 01b1 19       		.byte	0x19
 1362 01b2 6E010000 		.4byte	0x16e
 1363 01b6 07       		.uleb128 0x7
 1364 01b7 3C       		.byte	0x3c
 1365 01b8 07       		.byte	0x7
 1366 01b9 36       		.byte	0x36
 1367 01ba E3010000 		.4byte	0x1e3
 1368 01be 09       		.uleb128 0x9
 1369 01bf 5E060000 		.4byte	.LASF31
 1370 01c3 07       		.byte	0x7
 1371 01c4 37       		.byte	0x37
 1372 01c5 9B010000 		.4byte	0x19b
 1373 01c9 00       		.byte	0
 1374 01ca 09       		.uleb128 0x9
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 42


 1375 01cb 90020000 		.4byte	.LASF32
 1376 01cf 07       		.byte	0x7
 1377 01d0 38       		.byte	0x38
 1378 01d1 9B010000 		.4byte	0x19b
 1379 01d5 14       		.byte	0x14
 1380 01d6 09       		.uleb128 0x9
 1381 01d7 8F050000 		.4byte	.LASF33
 1382 01db 07       		.byte	0x7
 1383 01dc 39       		.byte	0x39
 1384 01dd 9B010000 		.4byte	0x19b
 1385 01e1 28       		.byte	0x28
 1386 01e2 00       		.byte	0
 1387 01e3 03       		.uleb128 0x3
 1388 01e4 F9010000 		.4byte	.LASF34
 1389 01e8 07       		.byte	0x7
 1390 01e9 3B       		.byte	0x3b
 1391 01ea B6010000 		.4byte	0x1b6
 1392 01ee 07       		.uleb128 0x7
 1393 01ef 20       		.byte	0x20
 1394 01f0 07       		.byte	0x7
 1395 01f1 3D       		.byte	0x3d
 1396 01f2 57020000 		.4byte	0x257
 1397 01f6 09       		.uleb128 0x9
 1398 01f7 21020000 		.4byte	.LASF35
 1399 01fb 07       		.byte	0x7
 1400 01fc 3E       		.byte	0x3e
 1401 01fd 68000000 		.4byte	0x68
 1402 0201 00       		.byte	0
 1403 0202 08       		.uleb128 0x8
 1404 0203 62657200 		.ascii	"ber\000"
 1405 0207 07       		.byte	0x7
 1406 0208 3F       		.byte	0x3f
 1407 0209 68000000 		.4byte	0x68
 1408 020d 04       		.byte	0x4
 1409 020e 09       		.uleb128 0x9
 1410 020f 74050000 		.4byte	.LASF36
 1411 0213 07       		.byte	0x7
 1412 0214 40       		.byte	0x40
 1413 0215 68000000 		.4byte	0x68
 1414 0219 08       		.byte	0x8
 1415 021a 09       		.uleb128 0x9
 1416 021b 8E010000 		.4byte	.LASF37
 1417 021f 07       		.byte	0x7
 1418 0220 41       		.byte	0x41
 1419 0221 68000000 		.4byte	0x68
 1420 0225 0C       		.byte	0xc
 1421 0226 09       		.uleb128 0x9
 1422 0227 47050000 		.4byte	.LASF38
 1423 022b 07       		.byte	0x7
 1424 022c 42       		.byte	0x42
 1425 022d 68000000 		.4byte	0x68
 1426 0231 10       		.byte	0x10
 1427 0232 09       		.uleb128 0x9
 1428 0233 94050000 		.4byte	.LASF39
 1429 0237 07       		.byte	0x7
 1430 0238 43       		.byte	0x43
 1431 0239 68000000 		.4byte	0x68
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 43


 1432 023d 14       		.byte	0x14
 1433 023e 09       		.uleb128 0x9
 1434 023f A7010000 		.4byte	.LASF40
 1435 0243 07       		.byte	0x7
 1436 0244 44       		.byte	0x44
 1437 0245 68000000 		.4byte	0x68
 1438 0249 18       		.byte	0x18
 1439 024a 09       		.uleb128 0x9
 1440 024b 5B030000 		.4byte	.LASF41
 1441 024f 07       		.byte	0x7
 1442 0250 45       		.byte	0x45
 1443 0251 68000000 		.4byte	0x68
 1444 0255 1C       		.byte	0x1c
 1445 0256 00       		.byte	0
 1446 0257 03       		.uleb128 0x3
 1447 0258 A7050000 		.4byte	.LASF42
 1448 025c 07       		.byte	0x7
 1449 025d 47       		.byte	0x47
 1450 025e EE010000 		.4byte	0x1ee
 1451 0262 07       		.uleb128 0x7
 1452 0263 0A       		.byte	0xa
 1453 0264 07       		.byte	0x7
 1454 0265 53       		.byte	0x53
 1455 0266 E3020000 		.4byte	0x2e3
 1456 026a 09       		.uleb128 0x9
 1457 026b 78020000 		.4byte	.LASF43
 1458 026f 07       		.byte	0x7
 1459 0270 55       		.byte	0x55
 1460 0271 81000000 		.4byte	0x81
 1461 0275 00       		.byte	0
 1462 0276 09       		.uleb128 0x9
 1463 0277 55070000 		.4byte	.LASF44
 1464 027b 07       		.byte	0x7
 1465 027c 57       		.byte	0x57
 1466 027d E3020000 		.4byte	0x2e3
 1467 0281 01       		.byte	0x1
 1468 0282 09       		.uleb128 0x9
 1469 0283 3E060000 		.4byte	.LASF45
 1470 0287 07       		.byte	0x7
 1471 0288 59       		.byte	0x59
 1472 0289 81000000 		.4byte	0x81
 1473 028d 02       		.byte	0x2
 1474 028e 09       		.uleb128 0x9
 1475 028f 6A050000 		.4byte	.LASF46
 1476 0293 07       		.byte	0x7
 1477 0294 5B       		.byte	0x5b
 1478 0295 81000000 		.4byte	0x81
 1479 0299 03       		.byte	0x3
 1480 029a 09       		.uleb128 0x9
 1481 029b A8020000 		.4byte	.LASF47
 1482 029f 07       		.byte	0x7
 1483 02a0 5E       		.byte	0x5e
 1484 02a1 81000000 		.4byte	0x81
 1485 02a5 04       		.byte	0x4
 1486 02a6 09       		.uleb128 0x9
 1487 02a7 E1060000 		.4byte	.LASF48
 1488 02ab 07       		.byte	0x7
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 44


 1489 02ac 63       		.byte	0x63
 1490 02ad 81000000 		.4byte	0x81
 1491 02b1 05       		.byte	0x5
 1492 02b2 09       		.uleb128 0x9
 1493 02b3 C6050000 		.4byte	.LASF49
 1494 02b7 07       		.byte	0x7
 1495 02b8 65       		.byte	0x65
 1496 02b9 81000000 		.4byte	0x81
 1497 02bd 06       		.byte	0x6
 1498 02be 09       		.uleb128 0x9
 1499 02bf 65060000 		.4byte	.LASF50
 1500 02c3 07       		.byte	0x7
 1501 02c4 66       		.byte	0x66
 1502 02c5 81000000 		.4byte	0x81
 1503 02c9 07       		.byte	0x7
 1504 02ca 09       		.uleb128 0x9
 1505 02cb 3C050000 		.4byte	.LASF51
 1506 02cf 07       		.byte	0x7
 1507 02d0 67       		.byte	0x67
 1508 02d1 81000000 		.4byte	0x81
 1509 02d5 08       		.byte	0x8
 1510 02d6 09       		.uleb128 0x9
 1511 02d7 36070000 		.4byte	.LASF52
 1512 02db 07       		.byte	0x7
 1513 02dc 68       		.byte	0x68
 1514 02dd 81000000 		.4byte	0x81
 1515 02e1 09       		.byte	0x9
 1516 02e2 00       		.byte	0
 1517 02e3 02       		.uleb128 0x2
 1518 02e4 01       		.byte	0x1
 1519 02e5 02       		.byte	0x2
 1520 02e6 F7040000 		.4byte	.LASF53
 1521 02ea 03       		.uleb128 0x3
 1522 02eb C0030000 		.4byte	.LASF54
 1523 02ef 07       		.byte	0x7
 1524 02f0 6E       		.byte	0x6e
 1525 02f1 62020000 		.4byte	0x262
 1526 02f5 07       		.uleb128 0x7
 1527 02f6 06       		.byte	0x6
 1528 02f7 08       		.byte	0x8
 1529 02f8 35       		.byte	0x35
 1530 02f9 2E030000 		.4byte	0x32e
 1531 02fd 09       		.uleb128 0x9
 1532 02fe 99020000 		.4byte	.LASF55
 1533 0302 08       		.byte	0x8
 1534 0303 37       		.byte	0x37
 1535 0304 8D000000 		.4byte	0x8d
 1536 0308 00       		.byte	0
 1537 0309 09       		.uleb128 0x9
 1538 030a 30020000 		.4byte	.LASF56
 1539 030e 08       		.byte	0x8
 1540 030f 38       		.byte	0x38
 1541 0310 99000000 		.4byte	0x99
 1542 0314 02       		.byte	0x2
 1543 0315 09       		.uleb128 0x9
 1544 0316 47070000 		.4byte	.LASF57
 1545 031a 08       		.byte	0x8
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 45


 1546 031b 39       		.byte	0x39
 1547 031c 81000000 		.4byte	0x81
 1548 0320 04       		.byte	0x4
 1549 0321 09       		.uleb128 0x9
 1550 0322 DF040000 		.4byte	.LASF58
 1551 0326 08       		.byte	0x8
 1552 0327 3A       		.byte	0x3a
 1553 0328 81000000 		.4byte	0x81
 1554 032c 05       		.byte	0x5
 1555 032d 00       		.byte	0
 1556 032e 03       		.uleb128 0x3
 1557 032f 46020000 		.4byte	.LASF59
 1558 0333 08       		.byte	0x8
 1559 0334 3D       		.byte	0x3d
 1560 0335 39030000 		.4byte	0x339
 1561 0339 06       		.uleb128 0x6
 1562 033a F5020000 		.4byte	0x2f5
 1563 033e 07       		.uleb128 0x7
 1564 033f 1C       		.byte	0x1c
 1565 0340 08       		.byte	0x8
 1566 0341 40       		.byte	0x40
 1567 0342 5F030000 		.4byte	0x35f
 1568 0346 09       		.uleb128 0x9
 1569 0347 2B030000 		.4byte	.LASF60
 1570 034b 08       		.byte	0x8
 1571 034c 42       		.byte	0x42
 1572 034d 5F030000 		.4byte	0x35f
 1573 0351 00       		.byte	0
 1574 0352 09       		.uleb128 0x9
 1575 0353 82020000 		.4byte	.LASF61
 1576 0357 08       		.byte	0x8
 1577 0358 43       		.byte	0x43
 1578 0359 5E010000 		.4byte	0x15e
 1579 035d 04       		.byte	0x4
 1580 035e 00       		.byte	0
 1581 035f 0C       		.uleb128 0xc
 1582 0360 04       		.byte	0x4
 1583 0361 E3010000 		.4byte	0x1e3
 1584 0365 03       		.uleb128 0x3
 1585 0366 B5030000 		.4byte	.LASF62
 1586 036a 08       		.byte	0x8
 1587 036b 45       		.byte	0x45
 1588 036c 3E030000 		.4byte	0x33e
 1589 0370 07       		.uleb128 0x7
 1590 0371 68       		.byte	0x68
 1591 0372 08       		.byte	0x8
 1592 0373 4B       		.byte	0x4b
 1593 0374 91030000 		.4byte	0x391
 1594 0378 09       		.uleb128 0x9
 1595 0379 36030000 		.4byte	.LASF63
 1596 037d 08       		.byte	0x8
 1597 037e 50       		.byte	0x50
 1598 037f 91030000 		.4byte	0x391
 1599 0383 00       		.byte	0
 1600 0384 09       		.uleb128 0x9
 1601 0385 23030000 		.4byte	.LASF64
 1602 0389 08       		.byte	0x8
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 46


 1603 038a 51       		.byte	0x51
 1604 038b 68000000 		.4byte	0x68
 1605 038f 64       		.byte	0x64
 1606 0390 00       		.byte	0
 1607 0391 0A       		.uleb128 0xa
 1608 0392 CB000000 		.4byte	0xcb
 1609 0396 A1030000 		.4byte	0x3a1
 1610 039a 0B       		.uleb128 0xb
 1611 039b 57010000 		.4byte	0x157
 1612 039f 63       		.byte	0x63
 1613 03a0 00       		.byte	0
 1614 03a1 03       		.uleb128 0x3
 1615 03a2 EE060000 		.4byte	.LASF65
 1616 03a6 08       		.byte	0x8
 1617 03a7 57       		.byte	0x57
 1618 03a8 70030000 		.4byte	0x370
 1619 03ac 0D       		.uleb128 0xd
 1620 03ad 33000000 		.4byte	.LASF66
 1621 03b1 01       		.byte	0x1
 1622 03b2 36       		.byte	0x36
 1623 03b3 00000000 		.4byte	.LFB64
 1624 03b7 0E000000 		.4byte	.LFE64-.LFB64
 1625 03bb 01       		.uleb128 0x1
 1626 03bc 9C       		.byte	0x9c
 1627 03bd 0D       		.uleb128 0xd
 1628 03be 82060000 		.4byte	.LASF67
 1629 03c2 01       		.byte	0x1
 1630 03c3 51       		.byte	0x51
 1631 03c4 00000000 		.4byte	.LFB65
 1632 03c8 0E000000 		.4byte	.LFE65-.LFB65
 1633 03cc 01       		.uleb128 0x1
 1634 03cd 9C       		.byte	0x9c
 1635 03ce 0D       		.uleb128 0xd
 1636 03cf 27050000 		.4byte	.LASF68
 1637 03d3 01       		.byte	0x1
 1638 03d4 6C       		.byte	0x6c
 1639 03d5 00000000 		.4byte	.LFB66
 1640 03d9 0E000000 		.4byte	.LFE66-.LFB66
 1641 03dd 01       		.uleb128 0x1
 1642 03de 9C       		.byte	0x9c
 1643 03df 0D       		.uleb128 0xd
 1644 03e0 93010000 		.4byte	.LASF69
 1645 03e4 01       		.byte	0x1
 1646 03e5 87       		.byte	0x87
 1647 03e6 00000000 		.4byte	.LFB67
 1648 03ea 0E000000 		.4byte	.LFE67-.LFB67
 1649 03ee 01       		.uleb128 0x1
 1650 03ef 9C       		.byte	0x9c
 1651 03f0 0D       		.uleb128 0xd
 1652 03f1 72040000 		.4byte	.LASF70
 1653 03f5 01       		.byte	0x1
 1654 03f6 A2       		.byte	0xa2
 1655 03f7 00000000 		.4byte	.LFB68
 1656 03fb 0E000000 		.4byte	.LFE68-.LFB68
 1657 03ff 01       		.uleb128 0x1
 1658 0400 9C       		.byte	0x9c
 1659 0401 0D       		.uleb128 0xd
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 47


 1660 0402 E3010000 		.4byte	.LASF71
 1661 0406 01       		.byte	0x1
 1662 0407 BD       		.byte	0xbd
 1663 0408 00000000 		.4byte	.LFB69
 1664 040c 0E000000 		.4byte	.LFE69-.LFB69
 1665 0410 01       		.uleb128 0x1
 1666 0411 9C       		.byte	0x9c
 1667 0412 0D       		.uleb128 0xd
 1668 0413 56000000 		.4byte	.LASF72
 1669 0417 01       		.byte	0x1
 1670 0418 D8       		.byte	0xd8
 1671 0419 00000000 		.4byte	.LFB70
 1672 041d 0E000000 		.4byte	.LFE70-.LFB70
 1673 0421 01       		.uleb128 0x1
 1674 0422 9C       		.byte	0x9c
 1675 0423 0E       		.uleb128 0xe
 1676 0424 00000000 		.4byte	.LASF124
 1677 0428 01       		.byte	0x1
 1678 0429 0B01     		.2byte	0x10b
 1679 042b 00000000 		.4byte	.LFB71
 1680 042f 18060000 		.4byte	.LFE71-.LFB71
 1681 0433 01       		.uleb128 0x1
 1682 0434 9C       		.byte	0x9c
 1683 0435 49040000 		.4byte	0x449
 1684 0439 0F       		.uleb128 0xf
 1685 043a 99060000 		.4byte	.LASF125
 1686 043e 01       		.byte	0x1
 1687 043f 0D01     		.2byte	0x10d
 1688 0441 81000000 		.4byte	0x81
 1689 0445 02       		.uleb128 0x2
 1690 0446 91       		.byte	0x91
 1691 0447 77       		.sleb128 -9
 1692 0448 00       		.byte	0
 1693 0449 10       		.uleb128 0x10
 1694 044a 1F060000 		.4byte	.LASF73
 1695 044e 05       		.byte	0x5
 1696 044f 2D01     		.2byte	0x12d
 1697 0451 40010000 		.4byte	0x140
 1698 0455 10       		.uleb128 0x10
 1699 0456 13050000 		.4byte	.LASF74
 1700 045a 05       		.byte	0x5
 1701 045b 2E01     		.2byte	0x12e
 1702 045d 40010000 		.4byte	0x140
 1703 0461 10       		.uleb128 0x10
 1704 0462 3E030000 		.4byte	.LASF75
 1705 0466 05       		.byte	0x5
 1706 0467 3901     		.2byte	0x139
 1707 0469 D2000000 		.4byte	0xd2
 1708 046d 10       		.uleb128 0x10
 1709 046e B4020000 		.4byte	.LASF76
 1710 0472 05       		.byte	0x5
 1711 0473 3A01     		.2byte	0x13a
 1712 0475 D2000000 		.4byte	0xd2
 1713 0479 10       		.uleb128 0x10
 1714 047a 4C050000 		.4byte	.LASF77
 1715 047e 05       		.byte	0x5
 1716 047f 3B01     		.2byte	0x13b
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 48


 1717 0481 D2000000 		.4byte	0xd2
 1718 0485 10       		.uleb128 0x10
 1719 0486 52020000 		.4byte	.LASF78
 1720 048a 05       		.byte	0x5
 1721 048b 3C01     		.2byte	0x13c
 1722 048d D2000000 		.4byte	0xd2
 1723 0491 0A       		.uleb128 0xa
 1724 0492 A1040000 		.4byte	0x4a1
 1725 0496 A1040000 		.4byte	0x4a1
 1726 049a 0B       		.uleb128 0xb
 1727 049b 57010000 		.4byte	0x157
 1728 049f 0B       		.byte	0xb
 1729 04a0 00       		.byte	0
 1730 04a1 11       		.uleb128 0x11
 1731 04a2 81000000 		.4byte	0x81
 1732 04a6 10       		.uleb128 0x10
 1733 04a7 E9030000 		.4byte	.LASF79
 1734 04ab 05       		.byte	0x5
 1735 04ac 3E01     		.2byte	0x13e
 1736 04ae B2040000 		.4byte	0x4b2
 1737 04b2 11       		.uleb128 0x11
 1738 04b3 91040000 		.4byte	0x491
 1739 04b7 10       		.uleb128 0x10
 1740 04b8 46010000 		.4byte	.LASF80
 1741 04bc 09       		.byte	0x9
 1742 04bd 1207     		.2byte	0x712
 1743 04bf C3040000 		.4byte	0x4c3
 1744 04c3 06       		.uleb128 0x6
 1745 04c4 76000000 		.4byte	0x76
 1746 04c8 12       		.uleb128 0x12
 1747 04c9 23000000 		.4byte	.LASF81
 1748 04cd 06       		.byte	0x6
 1749 04ce 11       		.byte	0x11
 1750 04cf E3020000 		.4byte	0x2e3
 1751 04d3 05       		.uleb128 0x5
 1752 04d4 03       		.byte	0x3
 1753 04d5 00000000 		.4byte	buffer_overflow
 1754 04d9 12       		.uleb128 0x12
 1755 04da D7030000 		.4byte	.LASF82
 1756 04de 06       		.byte	0x6
 1757 04df 22       		.byte	0x22
 1758 04e0 8D000000 		.4byte	0x8d
 1759 04e4 05       		.uleb128 0x5
 1760 04e5 03       		.byte	0x3
 1761 04e6 00000000 		.4byte	dataPointsInStack
 1762 04ea 12       		.uleb128 0x12
 1763 04eb C8060000 		.4byte	.LASF83
 1764 04ef 06       		.byte	0x6
 1765 04f0 23       		.byte	0x23
 1766 04f1 8D000000 		.4byte	0x8d
 1767 04f5 05       		.uleb128 0x5
 1768 04f6 03       		.byte	0x3
 1769 04f7 00000000 		.4byte	dataPointsInStackDesired
 1770 04fb 0A       		.uleb128 0xa
 1771 04fc AB010000 		.4byte	0x1ab
 1772 0500 0B050000 		.4byte	0x50b
 1773 0504 0B       		.uleb128 0xb
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 49


 1774 0505 57010000 		.4byte	0x157
 1775 0509 95       		.byte	0x95
 1776 050a 00       		.byte	0
 1777 050b 12       		.uleb128 0x12
 1778 050c 1E030000 		.4byte	.LASF84
 1779 0510 06       		.byte	0x6
 1780 0511 24       		.byte	0x24
 1781 0512 FB040000 		.4byte	0x4fb
 1782 0516 05       		.uleb128 0x5
 1783 0517 03       		.byte	0x3
 1784 0518 00000000 		.4byte	data
 1785 051c 12       		.uleb128 0x12
 1786 051d 2D010000 		.4byte	.LASF85
 1787 0521 07       		.byte	0x7
 1788 0522 20       		.byte	0x20
 1789 0523 81000000 		.4byte	0x81
 1790 0527 05       		.uleb128 0x5
 1791 0528 03       		.byte	0x3
 1792 0529 00000000 		.4byte	modem_state
 1793 052d 12       		.uleb128 0x12
 1794 052e 7E030000 		.4byte	.LASF86
 1795 0532 07       		.byte	0x7
 1796 0533 71       		.byte	0x71
 1797 0534 A5000000 		.4byte	0xa5
 1798 0538 05       		.uleb128 0x5
 1799 0539 03       		.byte	0x3
 1800 053a 00000000 		.4byte	modem_start_time_stamp
 1801 053e 12       		.uleb128 0x12
 1802 053f 2B030000 		.4byte	.LASF60
 1803 0543 07       		.byte	0x7
 1804 0544 72       		.byte	0x72
 1805 0545 E3010000 		.4byte	0x1e3
 1806 0549 05       		.uleb128 0x5
 1807 054a 03       		.byte	0x3
 1808 054b 00000000 		.4byte	modem_info
 1809 054f 12       		.uleb128 0x12
 1810 0550 53010000 		.4byte	.LASF87
 1811 0554 07       		.byte	0x7
 1812 0555 73       		.byte	0x73
 1813 0556 57020000 		.4byte	0x257
 1814 055a 05       		.uleb128 0x5
 1815 055b 03       		.byte	0x3
 1816 055c 00000000 		.4byte	modem_stats
 1817 0560 12       		.uleb128 0x12
 1818 0561 5D040000 		.4byte	.LASF88
 1819 0565 07       		.byte	0x7
 1820 0566 74       		.byte	0x74
 1821 0567 EA020000 		.4byte	0x2ea
 1822 056b 05       		.uleb128 0x5
 1823 056c 03       		.byte	0x3
 1824 056d 00000000 		.4byte	updatable_parameters
 1825 0571 12       		.uleb128 0x12
 1826 0572 D7020000 		.4byte	.LASF89
 1827 0576 0A       		.byte	0xa
 1828 0577 07       		.byte	0x7
 1829 0578 81000000 		.4byte	0x81
 1830 057c 05       		.uleb128 0x5
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 50


 1831 057d 03       		.byte	0x3
 1832 057e 00000000 		.4byte	App_LED_enabled
 1833 0582 12       		.uleb128 0x12
 1834 0583 7C070000 		.4byte	.LASF90
 1835 0587 0A       		.byte	0xa
 1836 0588 08       		.byte	0x8
 1837 0589 91030000 		.4byte	0x391
 1838 058d 05       		.uleb128 0x5
 1839 058e 03       		.byte	0x3
 1840 058f 00000000 		.4byte	app_led_inbox
 1841 0593 12       		.uleb128 0x12
 1842 0594 D8050000 		.4byte	.LASF91
 1843 0598 0B       		.byte	0xb
 1844 0599 25       		.byte	0x25
 1845 059a 91030000 		.4byte	0x391
 1846 059e 05       		.uleb128 0x5
 1847 059f 03       		.byte	0x3
 1848 05a0 00000000 		.4byte	level_sensor_inbox
 1849 05a4 12       		.uleb128 0x12
 1850 05a5 B3060000 		.4byte	.LASF92
 1851 05a9 0B       		.byte	0xb
 1852 05aa 27       		.byte	0x27
 1853 05ab E3020000 		.4byte	0x2e3
 1854 05af 05       		.uleb128 0x5
 1855 05b0 03       		.byte	0x3
 1856 05b1 00000000 		.4byte	level_sensor_enabled
 1857 05b5 12       		.uleb128 0x12
 1858 05b6 8A070000 		.4byte	.LASF93
 1859 05ba 0C       		.byte	0xc
 1860 05bb 0F       		.byte	0xf
 1861 05bc 91030000 		.4byte	0x391
 1862 05c0 05       		.uleb128 0x5
 1863 05c1 03       		.byte	0x3
 1864 05c2 00000000 		.4byte	downstream_level_sensor_inbox
 1865 05c6 12       		.uleb128 0x12
 1866 05c7 95030000 		.4byte	.LASF94
 1867 05cb 0C       		.byte	0xc
 1868 05cc 11       		.byte	0x11
 1869 05cd E3020000 		.4byte	0x2e3
 1870 05d1 05       		.uleb128 0x5
 1871 05d2 03       		.byte	0x3
 1872 05d3 00000000 		.4byte	downstream_level_sensor_enabled
 1873 05d7 12       		.uleb128 0x12
 1874 05d8 D4010000 		.4byte	.LASF95
 1875 05dc 0D       		.byte	0xd
 1876 05dd 2A       		.byte	0x2a
 1877 05de B1000000 		.4byte	0xb1
 1878 05e2 05       		.uleb128 0x5
 1879 05e3 03       		.byte	0x3
 1880 05e4 00000000 		.4byte	valve_diameter
 1881 05e8 0A       		.uleb128 0xa
 1882 05e9 CB000000 		.4byte	0xcb
 1883 05ed F8050000 		.4byte	0x5f8
 1884 05f1 0B       		.uleb128 0xb
 1885 05f2 57010000 		.4byte	0x157
 1886 05f6 09       		.byte	0x9
 1887 05f7 00       		.byte	0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 51


 1888 05f8 12       		.uleb128 0x12
 1889 05f9 0C040000 		.4byte	.LASF96
 1890 05fd 0D       		.byte	0xd
 1891 05fe 2B       		.byte	0x2b
 1892 05ff E8050000 		.4byte	0x5e8
 1893 0603 05       		.uleb128 0x5
 1894 0604 03       		.byte	0x3
 1895 0605 00000000 		.4byte	valve_type
 1896 0609 12       		.uleb128 0x12
 1897 060a 99050000 		.4byte	.LASF97
 1898 060e 0D       		.byte	0xd
 1899 060f 30       		.byte	0x30
 1900 0610 81000000 		.4byte	0x81
 1901 0614 05       		.uleb128 0x5
 1902 0615 03       		.byte	0x3
 1903 0616 00000000 		.4byte	valve_enabled
 1904 061a 12       		.uleb128 0x12
 1905 061b 2A070000 		.4byte	.LASF98
 1906 061f 0D       		.byte	0xd
 1907 0620 31       		.byte	0x31
 1908 0621 91030000 		.4byte	0x391
 1909 0625 05       		.uleb128 0x5
 1910 0626 03       		.byte	0x3
 1911 0627 00000000 		.4byte	valve_inbox
 1912 062b 12       		.uleb128 0x12
 1913 062c 0F000000 		.4byte	.LASF99
 1914 0630 0E       		.byte	0xe
 1915 0631 69       		.byte	0x69
 1916 0632 81000000 		.4byte	0x81
 1917 0636 05       		.uleb128 0x5
 1918 0637 03       		.byte	0x3
 1919 0638 00000000 		.4byte	autosampler_enabled
 1920 063c 12       		.uleb128 0x12
 1921 063d FA030000 		.4byte	.LASF100
 1922 0641 0E       		.byte	0xe
 1923 0642 6B       		.byte	0x6b
 1924 0643 91030000 		.4byte	0x391
 1925 0647 05       		.uleb128 0x5
 1926 0648 03       		.byte	0x3
 1927 0649 00000000 		.4byte	autosampler_inbox
 1928 064d 0A       		.uleb128 0xa
 1929 064e CB000000 		.4byte	0xcb
 1930 0652 5E060000 		.4byte	0x65e
 1931 0656 13       		.uleb128 0x13
 1932 0657 57010000 		.4byte	0x157
 1933 065b 0F27     		.2byte	0x270f
 1934 065d 00       		.byte	0
 1935 065e 12       		.uleb128 0x12
 1936 065f 68070000 		.4byte	.LASF101
 1937 0663 08       		.byte	0x8
 1938 0664 1F       		.byte	0x1f
 1939 0665 4D060000 		.4byte	0x64d
 1940 0669 05       		.uleb128 0x5
 1941 066a 03       		.byte	0x3
 1942 066b 00000000 		.4byte	http_request
 1943 066f 12       		.uleb128 0x12
 1944 0670 CA010000 		.4byte	.LASF102
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 52


 1945 0674 08       		.byte	0x8
 1946 0675 20       		.byte	0x20
 1947 0676 4D060000 		.4byte	0x64d
 1948 067a 05       		.uleb128 0x5
 1949 067b 03       		.byte	0x3
 1950 067c 00000000 		.4byte	http_body
 1951 0680 0A       		.uleb128 0xa
 1952 0681 CB000000 		.4byte	0xcb
 1953 0685 90060000 		.4byte	0x690
 1954 0689 0B       		.uleb128 0xb
 1955 068a 57010000 		.4byte	0x157
 1956 068e C7       		.byte	0xc7
 1957 068f 00       		.byte	0
 1958 0690 12       		.uleb128 0x12
 1959 0691 14060000 		.4byte	.LASF103
 1960 0695 08       		.byte	0x8
 1961 0696 21       		.byte	0x21
 1962 0697 80060000 		.4byte	0x680
 1963 069b 05       		.uleb128 0x5
 1964 069c 03       		.byte	0x3
 1965 069d 00000000 		.4byte	http_route
 1966 06a1 12       		.uleb128 0x12
 1967 06a2 83050000 		.4byte	.LASF104
 1968 06a6 08       		.byte	0x8
 1969 06a7 48       		.byte	0x48
 1970 06a8 65030000 		.4byte	0x365
 1971 06ac 05       		.uleb128 0x5
 1972 06ad 03       		.byte	0x3
 1973 06ae 00000000 		.4byte	system_info
 1974 06b2 12       		.uleb128 0x12
 1975 06b3 6E030000 		.4byte	.LASF105
 1976 06b7 08       		.byte	0x8
 1977 06b8 5A       		.byte	0x5a
 1978 06b9 A1030000 		.4byte	0x3a1
 1979 06bd 05       		.uleb128 0x5
 1980 06be 03       		.byte	0x3
 1981 06bf 00000000 		.4byte	system_settings
 1982 06c3 12       		.uleb128 0x12
 1983 06c4 39010000 		.4byte	.LASF106
 1984 06c8 08       		.byte	0x8
 1985 06c9 76       		.byte	0x76
 1986 06ca 2E030000 		.4byte	0x32e
 1987 06ce 05       		.uleb128 0x5
 1988 06cf 03       		.byte	0x3
 1989 06d0 00000000 		.4byte	alarmMeasure
 1990 06d4 12       		.uleb128 0x12
 1991 06d5 05030000 		.4byte	.LASF107
 1992 06d9 08       		.byte	0x8
 1993 06da 77       		.byte	0x77
 1994 06db 81000000 		.4byte	0x81
 1995 06df 05       		.uleb128 0x5
 1996 06e0 03       		.byte	0x3
 1997 06e1 00000000 		.4byte	timeToMeasure
 1998 06e5 12       		.uleb128 0x12
 1999 06e6 CD020000 		.4byte	.LASF108
 2000 06ea 08       		.byte	0x8
 2001 06eb 78       		.byte	0x78
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 53


 2002 06ec 2E030000 		.4byte	0x32e
 2003 06f0 05       		.uleb128 0x5
 2004 06f1 03       		.byte	0x3
 2005 06f2 00000000 		.4byte	alarmSync
 2006 06f6 12       		.uleb128 0x12
 2007 06f7 BF010000 		.4byte	.LASF109
 2008 06fb 08       		.byte	0x8
 2009 06fc 79       		.byte	0x79
 2010 06fd 81000000 		.4byte	0x81
 2011 0701 05       		.uleb128 0x5
 2012 0702 03       		.byte	0x3
 2013 0703 00000000 		.4byte	timeToSync
 2014 0707 12       		.uleb128 0x12
 2015 0708 2E040000 		.4byte	.LASF110
 2016 070c 08       		.byte	0x8
 2017 070d 7A       		.byte	0x7a
 2018 070e 81000000 		.4byte	0x81
 2019 0712 05       		.uleb128 0x5
 2020 0713 03       		.byte	0x3
 2021 0714 00000000 		.4byte	timeToSycnRemoteParams
 2022 0718 14       		.uleb128 0x14
 2023 0719 68657900 		.ascii	"hey\000"
 2024 071d 08       		.byte	0x8
 2025 071e 7B       		.byte	0x7b
 2026 071f 81000000 		.4byte	0x81
 2027 0723 05       		.uleb128 0x5
 2028 0724 03       		.byte	0x3
 2029 0725 00000000 		.4byte	hey
 2030 0729 12       		.uleb128 0x12
 2031 072a 4F030000 		.4byte	.LASF111
 2032 072e 08       		.byte	0x8
 2033 072f 7F       		.byte	0x7f
 2034 0730 2E030000 		.4byte	0x32e
 2035 0734 05       		.uleb128 0x5
 2036 0735 03       		.byte	0x3
 2037 0736 00000000 		.4byte	alarmAppLED
 2038 073a 12       		.uleb128 0x12
 2039 073b 65020000 		.4byte	.LASF112
 2040 073f 08       		.byte	0x8
 2041 0740 80       		.byte	0x80
 2042 0741 81000000 		.4byte	0x81
 2043 0745 05       		.uleb128 0x5
 2044 0746 03       		.byte	0x3
 2045 0747 00000000 		.4byte	timeToAppLED
 2046 074b 12       		.uleb128 0x12
 2047 074c B5050000 		.4byte	.LASF113
 2048 0750 08       		.byte	0x8
 2049 0751 82       		.byte	0x82
 2050 0752 2E030000 		.4byte	0x32e
 2051 0756 05       		.uleb128 0x5
 2052 0757 03       		.byte	0x3
 2053 0758 00000000 		.4byte	alarmLevelSensor
 2054 075c 12       		.uleb128 0x12
 2055 075d A1060000 		.4byte	.LASF114
 2056 0761 08       		.byte	0x8
 2057 0762 83       		.byte	0x83
 2058 0763 81000000 		.4byte	0x81
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 54


 2059 0767 05       		.uleb128 0x5
 2060 0768 03       		.byte	0x3
 2061 0769 00000000 		.4byte	timeToLevelSensor
 2062 076d 12       		.uleb128 0x12
 2063 076e 06020000 		.4byte	.LASF115
 2064 0772 08       		.byte	0x8
 2065 0773 85       		.byte	0x85
 2066 0774 2E030000 		.4byte	0x32e
 2067 0778 05       		.uleb128 0x5
 2068 0779 03       		.byte	0x3
 2069 077a 00000000 		.4byte	alarmDownstreamLevelSensor
 2070 077e 12       		.uleb128 0x12
 2071 077f FD060000 		.4byte	.LASF116
 2072 0783 08       		.byte	0x8
 2073 0784 86       		.byte	0x86
 2074 0785 81000000 		.4byte	0x81
 2075 0789 05       		.uleb128 0x5
 2076 078a 03       		.byte	0x3
 2077 078b 00000000 		.4byte	timeToDownstreamLevelSensor
 2078 078f 12       		.uleb128 0x12
 2079 0790 09060000 		.4byte	.LASF117
 2080 0794 08       		.byte	0x8
 2081 0795 88       		.byte	0x88
 2082 0796 2E030000 		.4byte	0x32e
 2083 079a 05       		.uleb128 0x5
 2084 079b 03       		.byte	0x3
 2085 079c 00000000 		.4byte	alarmValve
 2086 07a0 12       		.uleb128 0x12
 2087 07a1 C8040000 		.4byte	.LASF118
 2088 07a5 08       		.byte	0x8
 2089 07a6 89       		.byte	0x89
 2090 07a7 81000000 		.4byte	0x81
 2091 07ab 05       		.uleb128 0x5
 2092 07ac 03       		.byte	0x3
 2093 07ad 00000000 		.4byte	timeToValve
 2094 07b1 12       		.uleb128 0x12
 2095 07b2 19070000 		.4byte	.LASF119
 2096 07b6 08       		.byte	0x8
 2097 07b7 8B       		.byte	0x8b
 2098 07b8 2E030000 		.4byte	0x32e
 2099 07bc 05       		.uleb128 0x5
 2100 07bd 03       		.byte	0x3
 2101 07be 00000000 		.4byte	alarmAutosampler
 2102 07c2 12       		.uleb128 0x12
 2103 07c3 6B000000 		.4byte	.LASF120
 2104 07c7 08       		.byte	0x8
 2105 07c8 8C       		.byte	0x8c
 2106 07c9 81000000 		.4byte	0x81
 2107 07cd 05       		.uleb128 0x5
 2108 07ce 03       		.byte	0x3
 2109 07cf 00000000 		.4byte	timeToAutosampler
 2110 07d3 00       		.byte	0
 2111              		.section	.debug_abbrev,"",%progbits
 2112              	.Ldebug_abbrev0:
 2113 0000 01       		.uleb128 0x1
 2114 0001 11       		.uleb128 0x11
 2115 0002 01       		.byte	0x1
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 55


 2116 0003 25       		.uleb128 0x25
 2117 0004 0E       		.uleb128 0xe
 2118 0005 13       		.uleb128 0x13
 2119 0006 0B       		.uleb128 0xb
 2120 0007 03       		.uleb128 0x3
 2121 0008 0E       		.uleb128 0xe
 2122 0009 1B       		.uleb128 0x1b
 2123 000a 0E       		.uleb128 0xe
 2124 000b 55       		.uleb128 0x55
 2125 000c 17       		.uleb128 0x17
 2126 000d 11       		.uleb128 0x11
 2127 000e 01       		.uleb128 0x1
 2128 000f 10       		.uleb128 0x10
 2129 0010 17       		.uleb128 0x17
 2130 0011 00       		.byte	0
 2131 0012 00       		.byte	0
 2132 0013 02       		.uleb128 0x2
 2133 0014 24       		.uleb128 0x24
 2134 0015 00       		.byte	0
 2135 0016 0B       		.uleb128 0xb
 2136 0017 0B       		.uleb128 0xb
 2137 0018 3E       		.uleb128 0x3e
 2138 0019 0B       		.uleb128 0xb
 2139 001a 03       		.uleb128 0x3
 2140 001b 0E       		.uleb128 0xe
 2141 001c 00       		.byte	0
 2142 001d 00       		.byte	0
 2143 001e 03       		.uleb128 0x3
 2144 001f 16       		.uleb128 0x16
 2145 0020 00       		.byte	0
 2146 0021 03       		.uleb128 0x3
 2147 0022 0E       		.uleb128 0xe
 2148 0023 3A       		.uleb128 0x3a
 2149 0024 0B       		.uleb128 0xb
 2150 0025 3B       		.uleb128 0x3b
 2151 0026 0B       		.uleb128 0xb
 2152 0027 49       		.uleb128 0x49
 2153 0028 13       		.uleb128 0x13
 2154 0029 00       		.byte	0
 2155 002a 00       		.byte	0
 2156 002b 04       		.uleb128 0x4
 2157 002c 24       		.uleb128 0x24
 2158 002d 00       		.byte	0
 2159 002e 0B       		.uleb128 0xb
 2160 002f 0B       		.uleb128 0xb
 2161 0030 3E       		.uleb128 0x3e
 2162 0031 0B       		.uleb128 0xb
 2163 0032 03       		.uleb128 0x3
 2164 0033 08       		.uleb128 0x8
 2165 0034 00       		.byte	0
 2166 0035 00       		.byte	0
 2167 0036 05       		.uleb128 0x5
 2168 0037 16       		.uleb128 0x16
 2169 0038 00       		.byte	0
 2170 0039 03       		.uleb128 0x3
 2171 003a 0E       		.uleb128 0xe
 2172 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 56


 2173 003c 0B       		.uleb128 0xb
 2174 003d 3B       		.uleb128 0x3b
 2175 003e 05       		.uleb128 0x5
 2176 003f 49       		.uleb128 0x49
 2177 0040 13       		.uleb128 0x13
 2178 0041 00       		.byte	0
 2179 0042 00       		.byte	0
 2180 0043 06       		.uleb128 0x6
 2181 0044 35       		.uleb128 0x35
 2182 0045 00       		.byte	0
 2183 0046 49       		.uleb128 0x49
 2184 0047 13       		.uleb128 0x13
 2185 0048 00       		.byte	0
 2186 0049 00       		.byte	0
 2187 004a 07       		.uleb128 0x7
 2188 004b 13       		.uleb128 0x13
 2189 004c 01       		.byte	0x1
 2190 004d 0B       		.uleb128 0xb
 2191 004e 0B       		.uleb128 0xb
 2192 004f 3A       		.uleb128 0x3a
 2193 0050 0B       		.uleb128 0xb
 2194 0051 3B       		.uleb128 0x3b
 2195 0052 0B       		.uleb128 0xb
 2196 0053 01       		.uleb128 0x1
 2197 0054 13       		.uleb128 0x13
 2198 0055 00       		.byte	0
 2199 0056 00       		.byte	0
 2200 0057 08       		.uleb128 0x8
 2201 0058 0D       		.uleb128 0xd
 2202 0059 00       		.byte	0
 2203 005a 03       		.uleb128 0x3
 2204 005b 08       		.uleb128 0x8
 2205 005c 3A       		.uleb128 0x3a
 2206 005d 0B       		.uleb128 0xb
 2207 005e 3B       		.uleb128 0x3b
 2208 005f 0B       		.uleb128 0xb
 2209 0060 49       		.uleb128 0x49
 2210 0061 13       		.uleb128 0x13
 2211 0062 38       		.uleb128 0x38
 2212 0063 0B       		.uleb128 0xb
 2213 0064 00       		.byte	0
 2214 0065 00       		.byte	0
 2215 0066 09       		.uleb128 0x9
 2216 0067 0D       		.uleb128 0xd
 2217 0068 00       		.byte	0
 2218 0069 03       		.uleb128 0x3
 2219 006a 0E       		.uleb128 0xe
 2220 006b 3A       		.uleb128 0x3a
 2221 006c 0B       		.uleb128 0xb
 2222 006d 3B       		.uleb128 0x3b
 2223 006e 0B       		.uleb128 0xb
 2224 006f 49       		.uleb128 0x49
 2225 0070 13       		.uleb128 0x13
 2226 0071 38       		.uleb128 0x38
 2227 0072 0B       		.uleb128 0xb
 2228 0073 00       		.byte	0
 2229 0074 00       		.byte	0
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 57


 2230 0075 0A       		.uleb128 0xa
 2231 0076 01       		.uleb128 0x1
 2232 0077 01       		.byte	0x1
 2233 0078 49       		.uleb128 0x49
 2234 0079 13       		.uleb128 0x13
 2235 007a 01       		.uleb128 0x1
 2236 007b 13       		.uleb128 0x13
 2237 007c 00       		.byte	0
 2238 007d 00       		.byte	0
 2239 007e 0B       		.uleb128 0xb
 2240 007f 21       		.uleb128 0x21
 2241 0080 00       		.byte	0
 2242 0081 49       		.uleb128 0x49
 2243 0082 13       		.uleb128 0x13
 2244 0083 2F       		.uleb128 0x2f
 2245 0084 0B       		.uleb128 0xb
 2246 0085 00       		.byte	0
 2247 0086 00       		.byte	0
 2248 0087 0C       		.uleb128 0xc
 2249 0088 0F       		.uleb128 0xf
 2250 0089 00       		.byte	0
 2251 008a 0B       		.uleb128 0xb
 2252 008b 0B       		.uleb128 0xb
 2253 008c 49       		.uleb128 0x49
 2254 008d 13       		.uleb128 0x13
 2255 008e 00       		.byte	0
 2256 008f 00       		.byte	0
 2257 0090 0D       		.uleb128 0xd
 2258 0091 2E       		.uleb128 0x2e
 2259 0092 00       		.byte	0
 2260 0093 03       		.uleb128 0x3
 2261 0094 0E       		.uleb128 0xe
 2262 0095 3A       		.uleb128 0x3a
 2263 0096 0B       		.uleb128 0xb
 2264 0097 3B       		.uleb128 0x3b
 2265 0098 0B       		.uleb128 0xb
 2266 0099 27       		.uleb128 0x27
 2267 009a 19       		.uleb128 0x19
 2268 009b 11       		.uleb128 0x11
 2269 009c 01       		.uleb128 0x1
 2270 009d 12       		.uleb128 0x12
 2271 009e 06       		.uleb128 0x6
 2272 009f 40       		.uleb128 0x40
 2273 00a0 18       		.uleb128 0x18
 2274 00a1 9642     		.uleb128 0x2116
 2275 00a3 19       		.uleb128 0x19
 2276 00a4 00       		.byte	0
 2277 00a5 00       		.byte	0
 2278 00a6 0E       		.uleb128 0xe
 2279 00a7 2E       		.uleb128 0x2e
 2280 00a8 01       		.byte	0x1
 2281 00a9 3F       		.uleb128 0x3f
 2282 00aa 19       		.uleb128 0x19
 2283 00ab 03       		.uleb128 0x3
 2284 00ac 0E       		.uleb128 0xe
 2285 00ad 3A       		.uleb128 0x3a
 2286 00ae 0B       		.uleb128 0xb
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 58


 2287 00af 3B       		.uleb128 0x3b
 2288 00b0 05       		.uleb128 0x5
 2289 00b1 27       		.uleb128 0x27
 2290 00b2 19       		.uleb128 0x19
 2291 00b3 11       		.uleb128 0x11
 2292 00b4 01       		.uleb128 0x1
 2293 00b5 12       		.uleb128 0x12
 2294 00b6 06       		.uleb128 0x6
 2295 00b7 40       		.uleb128 0x40
 2296 00b8 18       		.uleb128 0x18
 2297 00b9 9642     		.uleb128 0x2116
 2298 00bb 19       		.uleb128 0x19
 2299 00bc 01       		.uleb128 0x1
 2300 00bd 13       		.uleb128 0x13
 2301 00be 00       		.byte	0
 2302 00bf 00       		.byte	0
 2303 00c0 0F       		.uleb128 0xf
 2304 00c1 34       		.uleb128 0x34
 2305 00c2 00       		.byte	0
 2306 00c3 03       		.uleb128 0x3
 2307 00c4 0E       		.uleb128 0xe
 2308 00c5 3A       		.uleb128 0x3a
 2309 00c6 0B       		.uleb128 0xb
 2310 00c7 3B       		.uleb128 0x3b
 2311 00c8 05       		.uleb128 0x5
 2312 00c9 49       		.uleb128 0x49
 2313 00ca 13       		.uleb128 0x13
 2314 00cb 02       		.uleb128 0x2
 2315 00cc 18       		.uleb128 0x18
 2316 00cd 00       		.byte	0
 2317 00ce 00       		.byte	0
 2318 00cf 10       		.uleb128 0x10
 2319 00d0 34       		.uleb128 0x34
 2320 00d1 00       		.byte	0
 2321 00d2 03       		.uleb128 0x3
 2322 00d3 0E       		.uleb128 0xe
 2323 00d4 3A       		.uleb128 0x3a
 2324 00d5 0B       		.uleb128 0xb
 2325 00d6 3B       		.uleb128 0x3b
 2326 00d7 05       		.uleb128 0x5
 2327 00d8 49       		.uleb128 0x49
 2328 00d9 13       		.uleb128 0x13
 2329 00da 3F       		.uleb128 0x3f
 2330 00db 19       		.uleb128 0x19
 2331 00dc 3C       		.uleb128 0x3c
 2332 00dd 19       		.uleb128 0x19
 2333 00de 00       		.byte	0
 2334 00df 00       		.byte	0
 2335 00e0 11       		.uleb128 0x11
 2336 00e1 26       		.uleb128 0x26
 2337 00e2 00       		.byte	0
 2338 00e3 49       		.uleb128 0x49
 2339 00e4 13       		.uleb128 0x13
 2340 00e5 00       		.byte	0
 2341 00e6 00       		.byte	0
 2342 00e7 12       		.uleb128 0x12
 2343 00e8 34       		.uleb128 0x34
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 59


 2344 00e9 00       		.byte	0
 2345 00ea 03       		.uleb128 0x3
 2346 00eb 0E       		.uleb128 0xe
 2347 00ec 3A       		.uleb128 0x3a
 2348 00ed 0B       		.uleb128 0xb
 2349 00ee 3B       		.uleb128 0x3b
 2350 00ef 0B       		.uleb128 0xb
 2351 00f0 49       		.uleb128 0x49
 2352 00f1 13       		.uleb128 0x13
 2353 00f2 3F       		.uleb128 0x3f
 2354 00f3 19       		.uleb128 0x19
 2355 00f4 02       		.uleb128 0x2
 2356 00f5 18       		.uleb128 0x18
 2357 00f6 00       		.byte	0
 2358 00f7 00       		.byte	0
 2359 00f8 13       		.uleb128 0x13
 2360 00f9 21       		.uleb128 0x21
 2361 00fa 00       		.byte	0
 2362 00fb 49       		.uleb128 0x49
 2363 00fc 13       		.uleb128 0x13
 2364 00fd 2F       		.uleb128 0x2f
 2365 00fe 05       		.uleb128 0x5
 2366 00ff 00       		.byte	0
 2367 0100 00       		.byte	0
 2368 0101 14       		.uleb128 0x14
 2369 0102 34       		.uleb128 0x34
 2370 0103 00       		.byte	0
 2371 0104 03       		.uleb128 0x3
 2372 0105 08       		.uleb128 0x8
 2373 0106 3A       		.uleb128 0x3a
 2374 0107 0B       		.uleb128 0xb
 2375 0108 3B       		.uleb128 0x3b
 2376 0109 0B       		.uleb128 0xb
 2377 010a 49       		.uleb128 0x49
 2378 010b 13       		.uleb128 0x13
 2379 010c 3F       		.uleb128 0x3f
 2380 010d 19       		.uleb128 0x19
 2381 010e 02       		.uleb128 0x2
 2382 010f 18       		.uleb128 0x18
 2383 0110 00       		.byte	0
 2384 0111 00       		.byte	0
 2385 0112 00       		.byte	0
 2386              		.section	.debug_aranges,"",%progbits
 2387 0000 54000000 		.4byte	0x54
 2388 0004 0200     		.2byte	0x2
 2389 0006 00000000 		.4byte	.Ldebug_info0
 2390 000a 04       		.byte	0x4
 2391 000b 00       		.byte	0
 2392 000c 0000     		.2byte	0
 2393 000e 0000     		.2byte	0
 2394 0010 00000000 		.4byte	.LFB64
 2395 0014 0E000000 		.4byte	.LFE64-.LFB64
 2396 0018 00000000 		.4byte	.LFB65
 2397 001c 0E000000 		.4byte	.LFE65-.LFB65
 2398 0020 00000000 		.4byte	.LFB66
 2399 0024 0E000000 		.4byte	.LFE66-.LFB66
 2400 0028 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 60


 2401 002c 0E000000 		.4byte	.LFE67-.LFB67
 2402 0030 00000000 		.4byte	.LFB68
 2403 0034 0E000000 		.4byte	.LFE68-.LFB68
 2404 0038 00000000 		.4byte	.LFB69
 2405 003c 0E000000 		.4byte	.LFE69-.LFB69
 2406 0040 00000000 		.4byte	.LFB70
 2407 0044 0E000000 		.4byte	.LFE70-.LFB70
 2408 0048 00000000 		.4byte	.LFB71
 2409 004c 18060000 		.4byte	.LFE71-.LFB71
 2410 0050 00000000 		.4byte	0
 2411 0054 00000000 		.4byte	0
 2412              		.section	.debug_ranges,"",%progbits
 2413              	.Ldebug_ranges0:
 2414 0000 00000000 		.4byte	.LFB64
 2415 0004 0E000000 		.4byte	.LFE64
 2416 0008 00000000 		.4byte	.LFB65
 2417 000c 0E000000 		.4byte	.LFE65
 2418 0010 00000000 		.4byte	.LFB66
 2419 0014 0E000000 		.4byte	.LFE66
 2420 0018 00000000 		.4byte	.LFB67
 2421 001c 0E000000 		.4byte	.LFE67
 2422 0020 00000000 		.4byte	.LFB68
 2423 0024 0E000000 		.4byte	.LFE68
 2424 0028 00000000 		.4byte	.LFB69
 2425 002c 0E000000 		.4byte	.LFE69
 2426 0030 00000000 		.4byte	.LFB70
 2427 0034 0E000000 		.4byte	.LFE70
 2428 0038 00000000 		.4byte	.LFB71
 2429 003c 18060000 		.4byte	.LFE71
 2430 0040 00000000 		.4byte	0
 2431 0044 00000000 		.4byte	0
 2432              		.section	.debug_line,"",%progbits
 2433              	.Ldebug_line0:
 2434 0000 44030000 		.section	.debug_str,"MS",%progbits,1
 2434      0200E301 
 2434      00000201 
 2434      FB0E0D00 
 2434      01010101 
 2435              	.LASF124:
 2436 0000 5254435F 		.ascii	"RTC_ISR\000"
 2436      49535200 
 2437              	.LASF12:
 2438 0008 75696E74 		.ascii	"uint16\000"
 2438      313600
 2439              	.LASF99:
 2440 000f 6175746F 		.ascii	"autosampler_enabled\000"
 2440      73616D70 
 2440      6C65725F 
 2440      656E6162 
 2440      6C656400 
 2441              	.LASF81:
 2442 0023 62756666 		.ascii	"buffer_overflow\000"
 2442      65725F6F 
 2442      76657266 
 2442      6C6F7700 
 2443              	.LASF66:
 2444 0033 5254435F 		.ascii	"RTC_EverySecondHandler\000"
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 61


 2444      45766572 
 2444      79536563 
 2444      6F6E6448 
 2444      616E646C 
 2445              	.LASF0:
 2446 004a 7369676E 		.ascii	"signed char\000"
 2446      65642063 
 2446      68617200 
 2447              	.LASF72:
 2448 0056 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2448      45766572 
 2448      79596561 
 2448      7248616E 
 2448      646C6572 
 2449              	.LASF120:
 2450 006b 74696D65 		.ascii	"timeToAutosampler\000"
 2450      546F4175 
 2450      746F7361 
 2450      6D706C65 
 2450      7200
 2451              	.LASF121:
 2452 007d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2452      43313120 
 2452      352E342E 
 2452      31203230 
 2452      31363036 
 2453 00b0 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2453      20726576 
 2453      6973696F 
 2453      6E203233 
 2453      37373135 
 2454 00e3 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2454      66756E63 
 2454      74696F6E 
 2454      2D736563 
 2454      74696F6E 
 2455              	.LASF23:
 2456 010b 4D6F6E74 		.ascii	"Month\000"
 2456      6800
 2457              	.LASF7:
 2458 0111 6C6F6E67 		.ascii	"long long unsigned int\000"
 2458      206C6F6E 
 2458      6720756E 
 2458      7369676E 
 2458      65642069 
 2459              	.LASF19:
 2460 0128 486F7572 		.ascii	"Hour\000"
 2460      00
 2461              	.LASF85:
 2462 012d 6D6F6465 		.ascii	"modem_state\000"
 2462      6D5F7374 
 2462      61746500 
 2463              	.LASF106:
 2464 0139 616C6172 		.ascii	"alarmMeasure\000"
 2464      6D4D6561 
 2464      73757265 
 2464      00
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 62


 2465              	.LASF80:
 2466 0146 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2466      52784275 
 2466      66666572 
 2466      00
 2467              	.LASF87:
 2468 0153 6D6F6465 		.ascii	"modem_stats\000"
 2468      6D5F7374 
 2468      61747300 
 2469              	.LASF122:
 2470 015f 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2470      72617465 
 2470      645F536F 
 2470      75726365 
 2470      5C50536F 
 2471              	.LASF6:
 2472 0180 6C6F6E67 		.ascii	"long long int\000"
 2472      206C6F6E 
 2472      6720696E 
 2472      7400
 2473              	.LASF37:
 2474 018e 65636E6F 		.ascii	"ecno\000"
 2474      00
 2475              	.LASF69:
 2476 0193 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2476      45766572 
 2476      79446179 
 2476      48616E64 
 2476      6C657200 
 2477              	.LASF40:
 2478 01a7 74696D65 		.ascii	"time_to_network_connect\000"
 2478      5F746F5F 
 2478      6E657477 
 2478      6F726B5F 
 2478      636F6E6E 
 2479              	.LASF109:
 2480 01bf 74696D65 		.ascii	"timeToSync\000"
 2480      546F5379 
 2480      6E6300
 2481              	.LASF102:
 2482 01ca 68747470 		.ascii	"http_body\000"
 2482      5F626F64 
 2482      7900
 2483              	.LASF95:
 2484 01d4 76616C76 		.ascii	"valve_diameter\000"
 2484      655F6469 
 2484      616D6574 
 2484      657200
 2485              	.LASF71:
 2486 01e3 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2486      45766572 
 2486      794D6F6E 
 2486      74684861 
 2486      6E646C65 
 2487              	.LASF34:
 2488 01f9 6D6F6465 		.ascii	"modem_info_t\000"
 2488      6D5F696E 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 63


 2488      666F5F74 
 2488      00
 2489              	.LASF115:
 2490 0206 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 2490      6D446F77 
 2490      6E737472 
 2490      65616D4C 
 2490      6576656C 
 2491              	.LASF35:
 2492 0221 72786C65 		.ascii	"rxlev\000"
 2492      7600
 2493              	.LASF4:
 2494 0227 6C6F6E67 		.ascii	"long int\000"
 2494      20696E74 
 2494      00
 2495              	.LASF56:
 2496 0230 63757272 		.ascii	"currentCountDownValue\000"
 2496      656E7443 
 2496      6F756E74 
 2496      446F776E 
 2496      56616C75 
 2497              	.LASF59:
 2498 0246 616C6172 		.ascii	"alarm\000"
 2498      6D00
 2499              	.LASF11:
 2500 024c 75696E74 		.ascii	"uint8\000"
 2500      3800
 2501              	.LASF78:
 2502 0252 5254435F 		.ascii	"RTC_statusDateTime\000"
 2502      73746174 
 2502      75734461 
 2502      74655469 
 2502      6D6500
 2503              	.LASF112:
 2504 0265 74696D65 		.ascii	"timeToAppLED\000"
 2504      546F4170 
 2504      704C4544 
 2504      00
 2505              	.LASF14:
 2506 0272 696E7433 		.ascii	"int32\000"
 2506      3200
 2507              	.LASF43:
 2508 0278 6E6F6465 		.ascii	"node_type\000"
 2508      5F747970 
 2508      6500
 2509              	.LASF61:
 2510 0282 63686970 		.ascii	"chip_uniqueId\000"
 2510      5F756E69 
 2510      71756549 
 2510      6400
 2511              	.LASF32:
 2512 0290 6D6F6465 		.ascii	"model_id\000"
 2512      6C5F6964 
 2512      00
 2513              	.LASF55:
 2514 0299 636F756E 		.ascii	"countDownValue\000"
 2514      74446F77 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 64


 2514      6E56616C 
 2514      756500
 2515              	.LASF47:
 2516 02a8 64656275 		.ascii	"debug_level\000"
 2516      675F6C65 
 2516      76656C00 
 2517              	.LASF76:
 2518 02b4 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2518      616C6172 
 2518      6D437572 
 2518      53746174 
 2518      757300
 2519              	.LASF28:
 2520 02c7 76616C75 		.ascii	"value\000"
 2520      6500
 2521              	.LASF108:
 2522 02cd 616C6172 		.ascii	"alarmSync\000"
 2522      6D53796E 
 2522      6300
 2523              	.LASF89:
 2524 02d7 4170705F 		.ascii	"App_LED_enabled\000"
 2524      4C45445F 
 2524      656E6162 
 2524      6C656400 
 2525              	.LASF30:
 2526 02e7 6B65795F 		.ascii	"key_value_t\000"
 2526      76616C75 
 2526      655F7400 
 2527              	.LASF5:
 2528 02f3 6C6F6E67 		.ascii	"long unsigned int\000"
 2528      20756E73 
 2528      69676E65 
 2528      6420696E 
 2528      7400
 2529              	.LASF107:
 2530 0305 74696D65 		.ascii	"timeToMeasure\000"
 2530      546F4D65 
 2530      61737572 
 2530      6500
 2531              	.LASF21:
 2532 0313 4461794F 		.ascii	"DayOfMonth\000"
 2532      664D6F6E 
 2532      746800
 2533              	.LASF84:
 2534 031e 64617461 		.ascii	"data\000"
 2534      00
 2535              	.LASF64:
 2536 0323 65705F70 		.ascii	"ep_port\000"
 2536      6F727400 
 2537              	.LASF60:
 2538 032b 6D6F6465 		.ascii	"modem_info\000"
 2538      6D5F696E 
 2538      666F00
 2539              	.LASF63:
 2540 0336 65705F68 		.ascii	"ep_host\000"
 2540      6F737400 
 2541              	.LASF75:
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 65


 2542 033e 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2542      616C6172 
 2542      6D436667 
 2542      4D61736B 
 2542      00
 2543              	.LASF111:
 2544 034f 616C6172 		.ascii	"alarmAppLED\000"
 2544      6D417070 
 2544      4C454400 
 2545              	.LASF41:
 2546 035b 74696D65 		.ascii	"time_to_acquire_ip\000"
 2546      5F746F5F 
 2546      61637175 
 2546      6972655F 
 2546      697000
 2547              	.LASF105:
 2548 036e 73797374 		.ascii	"system_settings\000"
 2548      656D5F73 
 2548      65747469 
 2548      6E677300 
 2549              	.LASF86:
 2550 037e 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2550      6D5F7374 
 2550      6172745F 
 2550      74696D65 
 2550      5F737461 
 2551              	.LASF94:
 2552 0395 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 2552      73747265 
 2552      616D5F6C 
 2552      6576656C 
 2552      5F73656E 
 2553              	.LASF62:
 2554 03b5 7379735F 		.ascii	"sys_info_t\000"
 2554      696E666F 
 2554      5F7400
 2555              	.LASF54:
 2556 03c0 75706461 		.ascii	"updatable_parameters_t\000"
 2556      7461626C 
 2556      655F7061 
 2556      72616D65 
 2556      74657273 
 2557              	.LASF82:
 2558 03d7 64617461 		.ascii	"dataPointsInStack\000"
 2558      506F696E 
 2558      7473496E 
 2558      53746163 
 2558      6B00
 2559              	.LASF79:
 2560 03e9 5254435F 		.ascii	"RTC_daysInMonths\000"
 2560      64617973 
 2560      496E4D6F 
 2560      6E746873 
 2560      00
 2561              	.LASF100:
 2562 03fa 6175746F 		.ascii	"autosampler_inbox\000"
 2562      73616D70 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 66


 2562      6C65725F 
 2562      696E626F 
 2562      7800
 2563              	.LASF96:
 2564 040c 76616C76 		.ascii	"valve_type\000"
 2564      655F7479 
 2564      706500
 2565              	.LASF15:
 2566 0417 666C6F61 		.ascii	"float32\000"
 2566      74333200 
 2567              	.LASF27:
 2568 041f 73697A65 		.ascii	"sizetype\000"
 2568      74797065 
 2568      00
 2569              	.LASF13:
 2570 0428 696E7431 		.ascii	"int16\000"
 2570      3600
 2571              	.LASF110:
 2572 042e 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2572      546F5379 
 2572      636E5265 
 2572      6D6F7465 
 2572      50617261 
 2573              	.LASF29:
 2574 0445 74696D65 		.ascii	"timeStamp\000"
 2574      5374616D 
 2574      7000
 2575              	.LASF25:
 2576 044f 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2576      54494D45 
 2576      5F444154 
 2576      4500
 2577              	.LASF88:
 2578 045d 75706461 		.ascii	"updatable_parameters\000"
 2578      7461626C 
 2578      655F7061 
 2578      72616D65 
 2578      74657273 
 2579              	.LASF70:
 2580 0472 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 2580      45766572 
 2580      79576565 
 2580      6B48616E 
 2580      646C6572 
 2581              	.LASF123:
 2582 0487 433A5C55 		.ascii	"C:\\Users\\jniej\\OneDrive\\Documents\\GitHub\\noto"
 2582      73657273 
 2582      5C6A6E69 
 2582      656A5C4F 
 2582      6E654472 
 2583 04b4 72694F53 		.ascii	"riOS\\notoriOS.cydsn\000"
 2583      5C6E6F74 
 2583      6F72694F 
 2583      532E6379 
 2583      64736E00 
 2584              	.LASF118:
 2585 04c8 74696D65 		.ascii	"timeToValve\000"
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 67


 2585      546F5661 
 2585      6C766500 
 2586              	.LASF16:
 2587 04d4 666C6F61 		.ascii	"float\000"
 2587      7400
 2588              	.LASF24:
 2589 04da 59656172 		.ascii	"Year\000"
 2589      00
 2590              	.LASF58:
 2591 04df 636F756E 		.ascii	"countDownResetCondition\000"
 2591      74446F77 
 2591      6E526573 
 2591      6574436F 
 2591      6E646974 
 2592              	.LASF53:
 2593 04f7 5F426F6F 		.ascii	"_Bool\000"
 2593      6C00
 2594              	.LASF10:
 2595 04fd 696E7433 		.ascii	"int32_t\000"
 2595      325F7400 
 2596              	.LASF1:
 2597 0505 756E7369 		.ascii	"unsigned char\000"
 2597      676E6564 
 2597      20636861 
 2597      7200
 2598              	.LASF74:
 2599 0513 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2599      63757272 
 2599      656E7454 
 2599      696D6544 
 2599      61746500 
 2600              	.LASF68:
 2601 0527 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2601      45766572 
 2601      79486F75 
 2601      7248616E 
 2601      646C6572 
 2602              	.LASF51:
 2603 053c 56616C76 		.ascii	"Valve_freq\000"
 2603      655F6672 
 2603      657100
 2604              	.LASF38:
 2605 0547 72737271 		.ascii	"rsrq\000"
 2605      00
 2606              	.LASF77:
 2607 054c 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2607      696E7465 
 2607      7276616C 
 2607      4366674D 
 2607      61736B00 
 2608              	.LASF2:
 2609 0560 73686F72 		.ascii	"short int\000"
 2609      7420696E 
 2609      7400
 2610              	.LASF46:
 2611 056a 73796E63 		.ascii	"sync_time\000"
 2611      5F74696D 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 68


 2611      6500
 2612              	.LASF36:
 2613 0574 72736370 		.ascii	"rscp\000"
 2613      00
 2614              	.LASF20:
 2615 0579 4461794F 		.ascii	"DayOfWeek\000"
 2615      66576565 
 2615      6B00
 2616              	.LASF104:
 2617 0583 73797374 		.ascii	"system_info\000"
 2617      656D5F69 
 2617      6E666F00 
 2618              	.LASF33:
 2619 058f 696D6569 		.ascii	"imei\000"
 2619      00
 2620              	.LASF39:
 2621 0594 72737270 		.ascii	"rsrp\000"
 2621      00
 2622              	.LASF97:
 2623 0599 76616C76 		.ascii	"valve_enabled\000"
 2623      655F656E 
 2623      61626C65 
 2623      6400
 2624              	.LASF42:
 2625 05a7 6D6F6465 		.ascii	"modem_stats_t\000"
 2625      6D5F7374 
 2625      6174735F 
 2625      7400
 2626              	.LASF113:
 2627 05b5 616C6172 		.ascii	"alarmLevelSensor\000"
 2627      6D4C6576 
 2627      656C5365 
 2627      6E736F72 
 2627      00
 2628              	.LASF49:
 2629 05c6 4C657665 		.ascii	"Level_Sensor_freq\000"
 2629      6C5F5365 
 2629      6E736F72 
 2629      5F667265 
 2629      7100
 2630              	.LASF91:
 2631 05d8 6C657665 		.ascii	"level_sensor_inbox\000"
 2631      6C5F7365 
 2631      6E736F72 
 2631      5F696E62 
 2631      6F7800
 2632              	.LASF26:
 2633 05eb 6C6F6E67 		.ascii	"long double\000"
 2633      20646F75 
 2633      626C6500 
 2634              	.LASF18:
 2635 05f7 63686172 		.ascii	"char\000"
 2635      00
 2636              	.LASF8:
 2637 05fc 756E7369 		.ascii	"unsigned int\000"
 2637      676E6564 
 2637      20696E74 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 69


 2637      00
 2638              	.LASF117:
 2639 0609 616C6172 		.ascii	"alarmValve\000"
 2639      6D56616C 
 2639      766500
 2640              	.LASF103:
 2641 0614 68747470 		.ascii	"http_route\000"
 2641      5F726F75 
 2641      746500
 2642              	.LASF73:
 2643 061f 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2643      616C6172 
 2643      6D436667 
 2643      54696D65 
 2643      44617465 
 2644              	.LASF9:
 2645 0634 5F5F696E 		.ascii	"__int32_t\000"
 2645      7433325F 
 2645      7400
 2646              	.LASF45:
 2647 063e 6D656173 		.ascii	"measure_time\000"
 2647      7572655F 
 2647      74696D65 
 2647      00
 2648              	.LASF3:
 2649 064b 73686F72 		.ascii	"short unsigned int\000"
 2649      7420756E 
 2649      7369676E 
 2649      65642069 
 2649      6E7400
 2650              	.LASF31:
 2651 065e 73696D5F 		.ascii	"sim_id\000"
 2651      696400
 2652              	.LASF50:
 2653 0665 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 2653      73747265 
 2653      616D5F4C 
 2653      6576656C 
 2653      5F53656E 
 2654              	.LASF67:
 2655 0682 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2655      45766572 
 2655      794D696E 
 2655      75746548 
 2655      616E646C 
 2656              	.LASF125:
 2657 0699 5254435F 		.ascii	"RTC_tmp\000"
 2657      746D7000 
 2658              	.LASF114:
 2659 06a1 74696D65 		.ascii	"timeToLevelSensor\000"
 2659      546F4C65 
 2659      76656C53 
 2659      656E736F 
 2659      7200
 2660              	.LASF92:
 2661 06b3 6C657665 		.ascii	"level_sensor_enabled\000"
 2661      6C5F7365 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 70


 2661      6E736F72 
 2661      5F656E61 
 2661      626C6564 
 2662              	.LASF83:
 2663 06c8 64617461 		.ascii	"dataPointsInStackDesired\000"
 2663      506F696E 
 2663      7473496E 
 2663      53746163 
 2663      6B446573 
 2664              	.LASF48:
 2665 06e1 4170705F 		.ascii	"App_LED_freq\000"
 2665      4C45445F 
 2665      66726571 
 2665      00
 2666              	.LASF65:
 2667 06ee 7379735F 		.ascii	"sys_settings_t\000"
 2667      73657474 
 2667      696E6773 
 2667      5F7400
 2668              	.LASF116:
 2669 06fd 74696D65 		.ascii	"timeToDownstreamLevelSensor\000"
 2669      546F446F 
 2669      776E7374 
 2669      7265616D 
 2669      4C657665 
 2670              	.LASF119:
 2671 0719 616C6172 		.ascii	"alarmAutosampler\000"
 2671      6D417574 
 2671      6F73616D 
 2671      706C6572 
 2671      00
 2672              	.LASF98:
 2673 072a 76616C76 		.ascii	"valve_inbox\000"
 2673      655F696E 
 2673      626F7800 
 2674              	.LASF52:
 2675 0736 4175746F 		.ascii	"Autosampler_freq\000"
 2675      73616D70 
 2675      6C65725F 
 2675      66726571 
 2675      00
 2676              	.LASF57:
 2677 0747 636F756E 		.ascii	"countDownType\000"
 2677      74446F77 
 2677      6E547970 
 2677      6500
 2678              	.LASF44:
 2679 0755 73696D5F 		.ascii	"sim_type\000"
 2679      74797065 
 2679      00
 2680              	.LASF22:
 2681 075e 4461794F 		.ascii	"DayOfYear\000"
 2681      66596561 
 2681      7200
 2682              	.LASF101:
 2683 0768 68747470 		.ascii	"http_request\000"
 2683      5F726571 
ARM GAS  C:\Users\jniej\AppData\Local\Temp\ccaxPZhF.s 			page 71


 2683      75657374 
 2683      00
 2684              	.LASF17:
 2685 0775 646F7562 		.ascii	"double\000"
 2685      6C6500
 2686              	.LASF90:
 2687 077c 6170705F 		.ascii	"app_led_inbox\000"
 2687      6C65645F 
 2687      696E626F 
 2687      7800
 2688              	.LASF93:
 2689 078a 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 2689      73747265 
 2689      616D5F6C 
 2689      6576656C 
 2689      5F73656E 
 2690              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
