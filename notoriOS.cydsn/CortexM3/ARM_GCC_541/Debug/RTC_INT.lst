ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	valve_enabled,1,1
  24              		.comm	valve_inbox,100,4
  25              		.comm	buffer_overflow,1,1
  26              		.comm	dataPointsInStack,2,2
  27              		.comm	dataPointsInStackDesired,2,2
  28              		.comm	data,6600,4
  29              		.comm	modem_state,1,1
  30              		.comm	modem_start_time_stamp,4,4
  31              		.comm	modem_info,60,4
  32              		.comm	modem_stats,32,4
  33              		.comm	updatable_parameters,9,4
  34              		.syntax unified
  35              		.global _printf_float
  36              		.thumb
  37              		.syntax unified
  38              		.comm	App_LED_enabled,1,1
  39              		.comm	app_led_inbox,100,4
  40              		.comm	http_request,10000,4
  41              		.comm	http_body,10000,4
  42              		.comm	http_route,200,4
  43              		.comm	system_info,28,4
  44              		.comm	system_settings,104,4
  45              		.comm	alarmMeasure,6,4
  46              		.comm	timeToMeasure,1,1
  47              		.comm	alarmSync,6,4
  48              		.comm	timeToSync,1,1
  49              		.comm	timeToSycnRemoteParams,1,1
  50              		.comm	hey,1,1
  51              		.comm	alarmAppLED,6,4
  52              		.comm	timeToAppLED,1,1
  53              		.comm	alarmLevelSensor,6,4
  54              		.comm	timetoLevelSensor,1,1
  55              		.comm	alarmDownstreamLevelSensor,6,4
  56              		.comm	timetoDownstreamLevelSensor,1,1
  57              		.comm	alarmValve,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 2


  58              		.comm	timeToValve,1,1
  59              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  60              		.align	2
  61              		.thumb
  62              		.thumb_func
  63              		.type	RTC_EverySecondHandler, %function
  64              	RTC_EverySecondHandler:
  65              	.LFB64:
  66              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 3


  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  67              		.loc 1 55 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 1, uses_anonymous_args = 0
  71 0000 80B5     		push	{r7, lr}
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 7, -8
  74              		.cfi_offset 14, -4
  75 0002 00AF     		add	r7, sp, #0
  76              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  77              		.loc 1 58 0
  78 0004 0020     		movs	r0, #0
  79 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  80              		.loc 1 64 0
  81 000a 00BF     		nop
  82 000c 80BD     		pop	{r7, pc}
  83              		.cfi_endproc
  84              	.LFE64:
  85              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  86 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  87              		.align	2
  88              		.thumb
  89              		.thumb_func
  90              		.type	RTC_EveryMinuteHandler, %function
  91              	RTC_EveryMinuteHandler:
  92              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 4


  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  93              		.loc 1 82 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97 0000 80B5     		push	{r7, lr}
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
 101 0002 00AF     		add	r7, sp, #0
 102              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
 103              		.loc 1 85 0
 104 0004 0120     		movs	r0, #1
 105 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
 106              		.loc 1 91 0
 107 000a 00BF     		nop
 108 000c 80BD     		pop	{r7, pc}
 109              		.cfi_endproc
 110              	.LFE65:
 111              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
 112 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 113              		.align	2
 114              		.thumb
 115              		.thumb_func
 116              		.type	RTC_EveryHourHandler, %function
 117              	RTC_EveryHourHandler:
 118              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 119              		.loc 1 109 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 5


 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 1, uses_anonymous_args = 0
 123 0000 80B5     		push	{r7, lr}
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 7, -8
 126              		.cfi_offset 14, -4
 127 0002 00AF     		add	r7, sp, #0
 128              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 129              		.loc 1 112 0
 130 0004 0220     		movs	r0, #2
 131 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 132              		.loc 1 118 0
 133 000a 00BF     		nop
 134 000c 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE66:
 137              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 138 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 139              		.align	2
 140              		.thumb
 141              		.thumb_func
 142              		.type	RTC_EveryDayHandler, %function
 143              	RTC_EveryDayHandler:
 144              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 145              		.loc 1 136 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 6


 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 00AF     		add	r7, sp, #0
 154              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 155              		.loc 1 139 0
 156 0004 0320     		movs	r0, #3
 157 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 158              		.loc 1 145 0
 159 000a 00BF     		nop
 160 000c 80BD     		pop	{r7, pc}
 161              		.cfi_endproc
 162              	.LFE67:
 163              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 164 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 165              		.align	2
 166              		.thumb
 167              		.thumb_func
 168              		.type	RTC_EveryWeekHandler, %function
 169              	RTC_EveryWeekHandler:
 170              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 171              		.loc 1 163 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175 0000 80B5     		push	{r7, lr}
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 7, -8
 178              		.cfi_offset 14, -4
 179 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 7


 180              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 181              		.loc 1 166 0
 182 0004 0420     		movs	r0, #4
 183 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 184              		.loc 1 172 0
 185 000a 00BF     		nop
 186 000c 80BD     		pop	{r7, pc}
 187              		.cfi_endproc
 188              	.LFE68:
 189              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 190 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 191              		.align	2
 192              		.thumb
 193              		.thumb_func
 194              		.type	RTC_EveryMonthHandler, %function
 195              	RTC_EveryMonthHandler:
 196              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 197              		.loc 1 190 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201 0000 80B5     		push	{r7, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 00AF     		add	r7, sp, #0
 206              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 8


 207              		.loc 1 193 0
 208 0004 0520     		movs	r0, #5
 209 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 210              		.loc 1 199 0
 211 000a 00BF     		nop
 212 000c 80BD     		pop	{r7, pc}
 213              		.cfi_endproc
 214              	.LFE69:
 215              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 216 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 217              		.align	2
 218              		.thumb
 219              		.thumb_func
 220              		.type	RTC_EveryYearHandler, %function
 221              	RTC_EveryYearHandler:
 222              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 223              		.loc 1 217 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227 0000 80B5     		push	{r7, lr}
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 7, -8
 230              		.cfi_offset 14, -4
 231 0002 00AF     		add	r7, sp, #0
 232              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 233              		.loc 1 220 0
 234 0004 0620     		movs	r0, #6
 235 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 9


 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 236              		.loc 1 226 0
 237 000a 00BF     		nop
 238 000c 80BD     		pop	{r7, pc}
 239              		.cfi_endproc
 240              	.LFE70:
 241              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 242 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 243              		.align	2
 244              		.global	RTC_ISR
 245              		.thumb
 246              		.thumb_func
 247              		.type	RTC_ISR, %function
 248              	RTC_ISR:
 249              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 10


 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 250              		.loc 1 268 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 80B5     		push	{r7, lr}
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 0002 82B0     		sub	sp, sp, #8
 259              		.cfi_def_cfa_offset 16
 260 0004 00AF     		add	r7, sp, #0
 261              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 262              		.loc 1 276 0
 263 0006 0420     		movs	r0, #4
 264 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 265              		.loc 1 279 0
 266 000c 9E4B     		ldr	r3, .L48
 267 000e 1B78     		ldrb	r3, [r3]
 268 0010 DBB2     		uxtb	r3, r3
 269 0012 0133     		adds	r3, r3, #1
 270 0014 DAB2     		uxtb	r2, r3
 271 0016 9C4B     		ldr	r3, .L48
 272 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 273              		.loc 1 282 0
 274 001a 9B4B     		ldr	r3, .L48
 275 001c 1B78     		ldrb	r3, [r3]
 276 001e DBB2     		uxtb	r3, r3
 277 0020 3B2B     		cmp	r3, #59
 278 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 279              		.loc 1 285 0
 280 0026 984B     		ldr	r3, .L48
 281 0028 5B78     		ldrb	r3, [r3, #1]
 282 002a DBB2     		uxtb	r3, r3
 283 002c 0133     		adds	r3, r3, #1
 284 002e DAB2     		uxtb	r2, r3
 285 0030 954B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 11


 286 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 287              		.loc 1 288 0
 288 0034 944B     		ldr	r3, .L48
 289 0036 0022     		movs	r2, #0
 290 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 291              		.loc 1 290 0
 292 003a 934B     		ldr	r3, .L48
 293 003c 5B78     		ldrb	r3, [r3, #1]
 294 003e DBB2     		uxtb	r3, r3
 295 0040 3B2B     		cmp	r3, #59
 296 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 297              		.loc 1 293 0
 298 0046 904B     		ldr	r3, .L48
 299 0048 9B78     		ldrb	r3, [r3, #2]
 300 004a DBB2     		uxtb	r3, r3
 301 004c 0133     		adds	r3, r3, #1
 302 004e DAB2     		uxtb	r2, r3
 303 0050 8D4B     		ldr	r3, .L48
 304 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 305              		.loc 1 296 0
 306 0054 8C4B     		ldr	r3, .L48
 307 0056 0022     		movs	r2, #0
 308 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 309              		.loc 1 299 0
 310 005a 8B4B     		ldr	r3, .L48
 311 005c 9B78     		ldrb	r3, [r3, #2]
 312 005e DBB2     		uxtb	r3, r3
 313 0060 172B     		cmp	r3, #23
 314 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 315              		.loc 1 302 0
 316 0066 884B     		ldr	r3, .L48
 317 0068 1B79     		ldrb	r3, [r3, #4]
 318 006a DBB2     		uxtb	r3, r3
 319 006c 0133     		adds	r3, r3, #1
 320 006e DAB2     		uxtb	r2, r3
 321 0070 854B     		ldr	r3, .L48
 322 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 12


 323              		.loc 1 305 0
 324 0074 844B     		ldr	r3, .L48
 325 0076 0022     		movs	r2, #0
 326 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 327              		.loc 1 308 0
 328 007a 834B     		ldr	r3, .L48
 329 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 330 007e 9BB2     		uxth	r3, r3
 331 0080 0133     		adds	r3, r3, #1
 332 0082 9AB2     		uxth	r2, r3
 333 0084 804B     		ldr	r3, .L48
 334 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 335              		.loc 1 311 0
 336 0088 7F4B     		ldr	r3, .L48
 337 008a DB78     		ldrb	r3, [r3, #3]
 338 008c DBB2     		uxtb	r3, r3
 339 008e 0133     		adds	r3, r3, #1
 340 0090 DAB2     		uxtb	r2, r3
 341 0092 7D4B     		ldr	r3, .L48
 342 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 343              		.loc 1 314 0
 344 0096 7C4B     		ldr	r3, .L48
 345 0098 DB78     		ldrb	r3, [r3, #3]
 346 009a DBB2     		uxtb	r3, r3
 347 009c 072B     		cmp	r3, #7
 348 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 349              		.loc 1 317 0
 350 00a0 794B     		ldr	r3, .L48
 351 00a2 0122     		movs	r2, #1
 352 00a4 DA70     		strb	r2, [r3, #3]
 353              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 354              		.loc 1 325 0
 355 00a6 794B     		ldr	r3, .L48+4
 356 00a8 1B78     		ldrb	r3, [r3]
 357 00aa DBB2     		uxtb	r3, r3
 358 00ac 03F00203 		and	r3, r3, #2
 359 00b0 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 13


 360 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 361              		.loc 1 326 0 discriminator 1
 362 00b4 744B     		ldr	r3, .L48
 363 00b6 1B7A     		ldrb	r3, [r3, #8]
 364 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 365              		.loc 1 325 0 discriminator 1
 366 00ba 022B     		cmp	r3, #2
 367 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 368              		.loc 1 327 0
 369 00be 724B     		ldr	r3, .L48
 370 00c0 1B79     		ldrb	r3, [r3, #4]
 371 00c2 DBB2     		uxtb	r3, r3
 372 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 373              		.loc 1 328 0
 374 00c6 704B     		ldr	r3, .L48
 375 00c8 1B7A     		ldrb	r3, [r3, #8]
 376 00ca DBB2     		uxtb	r3, r3
 377 00cc 013B     		subs	r3, r3, #1
 378 00ce 704A     		ldr	r2, .L48+8
 379 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 380 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 381              		.loc 1 326 0
 382 00d4 9942     		cmp	r1, r3
 383 00d6 2AD8     		bhi	.L14
 384              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 385              		.loc 1 329 0
 386 00d8 6C4B     		ldr	r3, .L48+4
 387 00da 1B78     		ldrb	r3, [r3]
 388 00dc DBB2     		uxtb	r3, r3
 389 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 390              		.loc 1 328 0
 391 00e2 002B     		cmp	r3, #0
 392 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 393              		.loc 1 330 0
 394 00e6 684B     		ldr	r3, .L48
 395 00e8 1B7A     		ldrb	r3, [r3, #8]
 396 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 397              		.loc 1 329 0
 398 00ec 022B     		cmp	r3, #2
 399 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 400              		.loc 1 331 0
 401 00f0 654B     		ldr	r3, .L48
 402 00f2 1B79     		ldrb	r3, [r3, #4]
 403 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 404              		.loc 1 332 0
 405 00f6 644B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 14


 406 00f8 1B7A     		ldrb	r3, [r3, #8]
 407 00fa DBB2     		uxtb	r3, r3
 408 00fc 013B     		subs	r3, r3, #1
 409 00fe 6449     		ldr	r1, .L48+8
 410 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 411              		.loc 1 330 0
 412 0102 9A42     		cmp	r2, r3
 413 0104 13D8     		bhi	.L14
 414              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 415              		.loc 1 333 0
 416 0106 614B     		ldr	r3, .L48+4
 417 0108 1B78     		ldrb	r3, [r3]
 418 010a DBB2     		uxtb	r3, r3
 419 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 420              		.loc 1 332 0
 421 0110 002B     		cmp	r3, #0
 422 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 423              		.loc 1 334 0
 424 0116 5C4B     		ldr	r3, .L48
 425 0118 1B79     		ldrb	r3, [r3, #4]
 426 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 427              		.loc 1 335 0
 428 011c 5A4B     		ldr	r3, .L48
 429 011e 1B7A     		ldrb	r3, [r3, #8]
 430 0120 DBB2     		uxtb	r3, r3
 431 0122 013B     		subs	r3, r3, #1
 432 0124 5A49     		ldr	r1, .L48+8
 433 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 434              		.loc 1 333 0
 435 0128 9A42     		cmp	r2, r3
 436 012a 40F2E880 		bls	.L16
 437              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 438              		.loc 1 338 0
 439 012e 564B     		ldr	r3, .L48
 440 0130 1B7A     		ldrb	r3, [r3, #8]
 441 0132 DBB2     		uxtb	r3, r3
 442 0134 0133     		adds	r3, r3, #1
 443 0136 DAB2     		uxtb	r2, r3
 444 0138 534B     		ldr	r3, .L48
 445 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 446              		.loc 1 341 0
 447 013c 524B     		ldr	r3, .L48
 448 013e 0122     		movs	r2, #1
 449 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 15


 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 450              		.loc 1 344 0
 451 0142 514B     		ldr	r3, .L48
 452 0144 1B7A     		ldrb	r3, [r3, #8]
 453 0146 DBB2     		uxtb	r3, r3
 454 0148 0C2B     		cmp	r3, #12
 455 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 456              		.loc 1 347 0
 457 014e 4E4B     		ldr	r3, .L48
 458 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 459 0152 9BB2     		uxth	r3, r3
 460 0154 0133     		adds	r3, r3, #1
 461 0156 9AB2     		uxth	r2, r3
 462 0158 4B4B     		ldr	r3, .L48
 463 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 464              		.loc 1 350 0
 465 015c 4A4B     		ldr	r3, .L48
 466 015e 0122     		movs	r2, #1
 467 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 468              		.loc 1 353 0
 469 0162 494B     		ldr	r3, .L48
 470 0164 0122     		movs	r2, #1
 471 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 472              		.loc 1 356 0
 473 0168 474B     		ldr	r3, .L48
 474 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 475 016c 9BB2     		uxth	r3, r3
 476 016e 494A     		ldr	r2, .L48+12
 477 0170 A2FB0312 		umull	r1, r2, r2, r3
 478 0174 D209     		lsrs	r2, r2, #7
 479 0176 4FF4C871 		mov	r1, #400
 480 017a 01FB02F2 		mul	r2, r1, r2
 481 017e 9B1A     		subs	r3, r3, r2
 482 0180 9BB2     		uxth	r3, r3
 483 0182 002B     		cmp	r3, #0
 484 0184 15D0     		beq	.L18
 485              		.loc 1 356 0 is_stmt 0 discriminator 1
 486 0186 404B     		ldr	r3, .L48
 487 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 488 018a 9BB2     		uxth	r3, r3
 489 018c 03F00303 		and	r3, r3, #3
 490 0190 9BB2     		uxth	r3, r3
 491 0192 002B     		cmp	r3, #0
 492 0194 16D1     		bne	.L19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 16


 493              		.loc 1 356 0 discriminator 2
 494 0196 3C4B     		ldr	r3, .L48
 495 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 496 019a 9BB2     		uxth	r3, r3
 497 019c 3D4A     		ldr	r2, .L48+12
 498 019e A2FB0312 		umull	r1, r2, r2, r3
 499 01a2 5209     		lsrs	r2, r2, #5
 500 01a4 6421     		movs	r1, #100
 501 01a6 01FB02F2 		mul	r2, r1, r2
 502 01aa 9B1A     		subs	r3, r3, r2
 503 01ac 9BB2     		uxth	r3, r3
 504 01ae 002B     		cmp	r3, #0
 505 01b0 08D0     		beq	.L19
 506              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 507              		.loc 1 359 0 is_stmt 1
 508 01b2 364B     		ldr	r3, .L48+4
 509 01b4 1B78     		ldrb	r3, [r3]
 510 01b6 DBB2     		uxtb	r3, r3
 511 01b8 43F00203 		orr	r3, r3, #2
 512 01bc DAB2     		uxtb	r2, r3
 513 01be 334B     		ldr	r3, .L48+4
 514 01c0 1A70     		strb	r2, [r3]
 515 01c2 07E0     		b	.L20
 516              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 517              		.loc 1 364 0
 518 01c4 314B     		ldr	r3, .L48+4
 519 01c6 1B78     		ldrb	r3, [r3]
 520 01c8 DBB2     		uxtb	r3, r3
 521 01ca 23F00203 		bic	r3, r3, #2
 522 01ce DAB2     		uxtb	r2, r3
 523 01d0 2E4B     		ldr	r3, .L48+4
 524 01d2 1A70     		strb	r2, [r3]
 525              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 526              		.loc 1 368 0
 527 01d4 304B     		ldr	r3, .L48+16
 528 01d6 1B78     		ldrb	r3, [r3]
 529 01d8 DBB2     		uxtb	r3, r3
 530 01da 5BB2     		sxtb	r3, r3
 531 01dc 002B     		cmp	r3, #0
 532 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 533              		.loc 1 372 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 17


 534 01e0 2E4B     		ldr	r3, .L48+20
 535 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 536 01e4 9AB2     		uxth	r2, r3
 537 01e6 284B     		ldr	r3, .L48
 538 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 539 01ea 9BB2     		uxth	r3, r3
 540 01ec 9A42     		cmp	r2, r3
 541 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 542              		.loc 1 375 0
 543 01f0 2B4B     		ldr	r3, .L48+24
 544 01f2 1B78     		ldrb	r3, [r3]
 545 01f4 DBB2     		uxtb	r3, r3
 546 01f6 63F07F03 		orn	r3, r3, #127
 547 01fa DAB2     		uxtb	r2, r3
 548 01fc 284B     		ldr	r3, .L48+24
 549 01fe 1A70     		strb	r2, [r3]
 550 0200 07E0     		b	.L21
 551              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 552              		.loc 1 380 0
 553 0202 274B     		ldr	r3, .L48+24
 554 0204 1B78     		ldrb	r3, [r3]
 555 0206 DBB2     		uxtb	r3, r3
 556 0208 03F07F03 		and	r3, r3, #127
 557 020c DAB2     		uxtb	r2, r3
 558 020e 244B     		ldr	r3, .L48+24
 559 0210 1A70     		strb	r2, [r3]
 560              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 561              		.loc 1 385 0
 562 0212 214B     		ldr	r3, .L48+16
 563 0214 1B78     		ldrb	r3, [r3]
 564 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 565              		.loc 1 386 0
 566 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 567 021a 002B     		cmp	r3, #0
 568 021c 13D0     		beq	.L23
 569              		.loc 1 386 0 is_stmt 0 discriminator 1
 570 021e 204B     		ldr	r3, .L48+24
 571 0220 1B78     		ldrb	r3, [r3]
 572 0222 DAB2     		uxtb	r2, r3
 573 0224 FB79     		ldrb	r3, [r7, #7]
 574 0226 1340     		ands	r3, r3, r2
 575 0228 DBB2     		uxtb	r3, r3
 576 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 18


 577 022c 9A42     		cmp	r2, r3
 578 022e 0AD1     		bne	.L23
 579              		.loc 1 386 0 discriminator 2
 580 0230 164B     		ldr	r3, .L48+4
 581 0232 1B78     		ldrb	r3, [r3]
 582 0234 DBB2     		uxtb	r3, r3
 583 0236 43F00803 		orr	r3, r3, #8
 584 023a DAB2     		uxtb	r2, r3
 585 023c 134B     		ldr	r3, .L48+4
 586 023e 1A70     		strb	r2, [r3]
 587 0240 174B     		ldr	r3, .L48+24
 588 0242 0022     		movs	r2, #0
 589 0244 1A70     		strb	r2, [r3]
 590              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 591              		.loc 1 391 0 is_stmt 1
 592 0246 174B     		ldr	r3, .L48+28
 593 0248 1B78     		ldrb	r3, [r3]
 594 024a DBB2     		uxtb	r3, r3
 595 024c 03F04003 		and	r3, r3, #64
 596 0250 002B     		cmp	r3, #0
 597 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 598              		.loc 1 394 0
 599 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 600              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 601              		.loc 1 400 0
 602 0258 0F4B     		ldr	r3, .L48+16
 603 025a 1B78     		ldrb	r3, [r3]
 604 025c DBB2     		uxtb	r3, r3
 605 025e 03F04003 		and	r3, r3, #64
 606 0262 002B     		cmp	r3, #0
 607 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 608              		.loc 1 403 0
 609 0266 0D4B     		ldr	r3, .L48+20
 610 0268 1B7A     		ldrb	r3, [r3, #8]
 611 026a DAB2     		uxtb	r2, r3
 612 026c 064B     		ldr	r3, .L48
 613 026e 1B7A     		ldrb	r3, [r3, #8]
 614 0270 DBB2     		uxtb	r3, r3
 615 0272 9A42     		cmp	r2, r3
 616 0274 18D1     		bne	.L25
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 19


 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 617              		.loc 1 406 0
 618 0276 0A4B     		ldr	r3, .L48+24
 619 0278 1B78     		ldrb	r3, [r3]
 620 027a DBB2     		uxtb	r3, r3
 621 027c 43F04003 		orr	r3, r3, #64
 622 0280 DAB2     		uxtb	r2, r3
 623 0282 074B     		ldr	r3, .L48+24
 624 0284 1A70     		strb	r2, [r3]
 625 0286 17E0     		b	.L24
 626              	.L49:
 627              		.align	2
 628              	.L48:
 629 0288 00000000 		.word	RTC_currentTimeDate
 630 028c 00000000 		.word	RTC_statusDateTime
 631 0290 00000000 		.word	RTC_daysInMonths
 632 0294 1F85EB51 		.word	1374389535
 633 0298 00000000 		.word	RTC_alarmCfgMask
 634 029c 00000000 		.word	RTC_alarmCfgTimeDate
 635 02a0 00000000 		.word	RTC_alarmCurStatus
 636 02a4 00000000 		.word	RTC_intervalCfgMask
 637              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 638              		.loc 1 411 0
 639 02a8 964B     		ldr	r3, .L50
 640 02aa 1B78     		ldrb	r3, [r3]
 641 02ac DBB2     		uxtb	r3, r3
 642 02ae 23F04003 		bic	r3, r3, #64
 643 02b2 DAB2     		uxtb	r2, r3
 644 02b4 934B     		ldr	r3, .L50
 645 02b6 1A70     		strb	r2, [r3]
 646              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 20


 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 647              		.loc 1 436 0
 648 02b8 934B     		ldr	r3, .L50+4
 649 02ba 1B78     		ldrb	r3, [r3]
 650 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 651              		.loc 1 437 0
 652 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 653 02c0 002B     		cmp	r3, #0
 654 02c2 13D0     		beq	.L26
 655              		.loc 1 437 0 is_stmt 0 discriminator 1
 656 02c4 8F4B     		ldr	r3, .L50
 657 02c6 1B78     		ldrb	r3, [r3]
 658 02c8 DAB2     		uxtb	r2, r3
 659 02ca FB79     		ldrb	r3, [r7, #7]
 660 02cc 1340     		ands	r3, r3, r2
 661 02ce DBB2     		uxtb	r3, r3
 662 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 663 02d2 9A42     		cmp	r2, r3
 664 02d4 0AD1     		bne	.L26
 665              		.loc 1 437 0 discriminator 2
 666 02d6 8D4B     		ldr	r3, .L50+8
 667 02d8 1B78     		ldrb	r3, [r3]
 668 02da DBB2     		uxtb	r3, r3
 669 02dc 43F00803 		orr	r3, r3, #8
 670 02e0 DAB2     		uxtb	r2, r3
 671 02e2 8A4B     		ldr	r3, .L50+8
 672 02e4 1A70     		strb	r2, [r3]
 673 02e6 874B     		ldr	r3, .L50
 674 02e8 0022     		movs	r2, #0
 675 02ea 1A70     		strb	r2, [r3]
 676              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 677              		.loc 1 442 0 is_stmt 1
 678 02ec 884B     		ldr	r3, .L50+12
 679 02ee 1B78     		ldrb	r3, [r3]
 680 02f0 DBB2     		uxtb	r3, r3
 681 02f2 03F02003 		and	r3, r3, #32
 682 02f6 002B     		cmp	r3, #0
 683 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 684              		.loc 1 445 0
 685 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 686              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 21


 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 687              		.loc 1 450 0
 688 02fe 824B     		ldr	r3, .L50+4
 689 0300 1B78     		ldrb	r3, [r3]
 690 0302 DBB2     		uxtb	r3, r3
 691 0304 03F00803 		and	r3, r3, #8
 692 0308 002B     		cmp	r3, #0
 693 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 694              		.loc 1 453 0
 695 030c 814B     		ldr	r3, .L50+16
 696 030e DB78     		ldrb	r3, [r3, #3]
 697 0310 DAB2     		uxtb	r2, r3
 698 0312 814B     		ldr	r3, .L50+20
 699 0314 DB78     		ldrb	r3, [r3, #3]
 700 0316 DBB2     		uxtb	r3, r3
 701 0318 9A42     		cmp	r2, r3
 702 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 703              		.loc 1 456 0
 704 031c 794B     		ldr	r3, .L50
 705 031e 1B78     		ldrb	r3, [r3]
 706 0320 DBB2     		uxtb	r3, r3
 707 0322 43F00803 		orr	r3, r3, #8
 708 0326 DAB2     		uxtb	r2, r3
 709 0328 764B     		ldr	r3, .L50
 710 032a 1A70     		strb	r2, [r3]
 711 032c 07E0     		b	.L27
 712              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 713              		.loc 1 461 0
 714 032e 754B     		ldr	r3, .L50
 715 0330 1B78     		ldrb	r3, [r3]
 716 0332 DBB2     		uxtb	r3, r3
 717 0334 23F00803 		bic	r3, r3, #8
 718 0338 DAB2     		uxtb	r2, r3
 719 033a 724B     		ldr	r3, .L50
 720 033c 1A70     		strb	r2, [r3]
 721              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 722              		.loc 1 466 0
 723 033e 724B     		ldr	r3, .L50+4
 724 0340 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 22


 725 0342 DBB2     		uxtb	r3, r3
 726 0344 03F02003 		and	r3, r3, #32
 727 0348 002B     		cmp	r3, #0
 728 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 729              		.loc 1 469 0
 730 034c 714B     		ldr	r3, .L50+16
 731 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 732 0350 9AB2     		uxth	r2, r3
 733 0352 714B     		ldr	r3, .L50+20
 734 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 735 0356 9BB2     		uxth	r3, r3
 736 0358 9A42     		cmp	r2, r3
 737 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 738              		.loc 1 472 0
 739 035c 694B     		ldr	r3, .L50
 740 035e 1B78     		ldrb	r3, [r3]
 741 0360 DBB2     		uxtb	r3, r3
 742 0362 43F02003 		orr	r3, r3, #32
 743 0366 DAB2     		uxtb	r2, r3
 744 0368 664B     		ldr	r3, .L50
 745 036a 1A70     		strb	r2, [r3]
 746 036c 07E0     		b	.L29
 747              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 748              		.loc 1 477 0
 749 036e 654B     		ldr	r3, .L50
 750 0370 1B78     		ldrb	r3, [r3]
 751 0372 DBB2     		uxtb	r3, r3
 752 0374 23F02003 		bic	r3, r3, #32
 753 0378 DAB2     		uxtb	r2, r3
 754 037a 624B     		ldr	r3, .L50
 755 037c 1A70     		strb	r2, [r3]
 756              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 757              		.loc 1 482 0
 758 037e 624B     		ldr	r3, .L50+4
 759 0380 1B78     		ldrb	r3, [r3]
 760 0382 DBB2     		uxtb	r3, r3
 761 0384 03F01003 		and	r3, r3, #16
 762 0388 002B     		cmp	r3, #0
 763 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 23


 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 764              		.loc 1 485 0
 765 038c 614B     		ldr	r3, .L50+16
 766 038e 1B79     		ldrb	r3, [r3, #4]
 767 0390 DAB2     		uxtb	r2, r3
 768 0392 614B     		ldr	r3, .L50+20
 769 0394 1B79     		ldrb	r3, [r3, #4]
 770 0396 DBB2     		uxtb	r3, r3
 771 0398 9A42     		cmp	r2, r3
 772 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 773              		.loc 1 488 0
 774 039c 594B     		ldr	r3, .L50
 775 039e 1B78     		ldrb	r3, [r3]
 776 03a0 DBB2     		uxtb	r3, r3
 777 03a2 43F01003 		orr	r3, r3, #16
 778 03a6 DAB2     		uxtb	r2, r3
 779 03a8 564B     		ldr	r3, .L50
 780 03aa 1A70     		strb	r2, [r3]
 781 03ac 07E0     		b	.L31
 782              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 783              		.loc 1 493 0
 784 03ae 554B     		ldr	r3, .L50
 785 03b0 1B78     		ldrb	r3, [r3]
 786 03b2 DBB2     		uxtb	r3, r3
 787 03b4 23F01003 		bic	r3, r3, #16
 788 03b8 DAB2     		uxtb	r2, r3
 789 03ba 524B     		ldr	r3, .L50
 790 03bc 1A70     		strb	r2, [r3]
 791              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 24


 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 792              		.loc 1 518 0
 793 03be 524B     		ldr	r3, .L50+4
 794 03c0 1B78     		ldrb	r3, [r3]
 795 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 796              		.loc 1 519 0
 797 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 798 03c6 002B     		cmp	r3, #0
 799 03c8 13D0     		beq	.L33
 800              		.loc 1 519 0 is_stmt 0 discriminator 1
 801 03ca 4E4B     		ldr	r3, .L50
 802 03cc 1B78     		ldrb	r3, [r3]
 803 03ce DAB2     		uxtb	r2, r3
 804 03d0 FB79     		ldrb	r3, [r7, #7]
 805 03d2 1340     		ands	r3, r3, r2
 806 03d4 DBB2     		uxtb	r3, r3
 807 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 808 03d8 9A42     		cmp	r2, r3
 809 03da 0AD1     		bne	.L33
 810              		.loc 1 519 0 discriminator 2
 811 03dc 4B4B     		ldr	r3, .L50+8
 812 03de 1B78     		ldrb	r3, [r3]
 813 03e0 DBB2     		uxtb	r3, r3
 814 03e2 43F00803 		orr	r3, r3, #8
 815 03e6 DAB2     		uxtb	r2, r3
 816 03e8 484B     		ldr	r3, .L50+8
 817 03ea 1A70     		strb	r2, [r3]
 818 03ec 454B     		ldr	r3, .L50
 819 03ee 0022     		movs	r2, #0
 820 03f0 1A70     		strb	r2, [r3]
 821              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 822              		.loc 1 524 0 is_stmt 1
 823 03f2 474B     		ldr	r3, .L50+12
 824 03f4 1B78     		ldrb	r3, [r3]
 825 03f6 DBB2     		uxtb	r3, r3
 826 03f8 03F00803 		and	r3, r3, #8
 827 03fc 002B     		cmp	r3, #0
 828 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 829              		.loc 1 527 0
 830 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 831              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 25


 832              		.loc 1 530 0
 833 0404 444B     		ldr	r3, .L50+20
 834 0406 DB78     		ldrb	r3, [r3, #3]
 835 0408 DBB2     		uxtb	r3, r3
 836 040a 012B     		cmp	r3, #1
 837 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 838              		.loc 1 533 0
 839 040e 404B     		ldr	r3, .L50+12
 840 0410 1B78     		ldrb	r3, [r3]
 841 0412 DBB2     		uxtb	r3, r3
 842 0414 03F01003 		and	r3, r3, #16
 843 0418 002B     		cmp	r3, #0
 844 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 845              		.loc 1 536 0
 846 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 847              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 848              		.loc 1 543 0
 849 0420 3D4B     		ldr	r3, .L50+20
 850 0422 9B78     		ldrb	r3, [r3, #2]
 851 0424 DBB2     		uxtb	r3, r3
 852 0426 0B2B     		cmp	r3, #11
 853 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 854              		.loc 1 546 0
 855 042a 384B     		ldr	r3, .L50+8
 856 042c 1B78     		ldrb	r3, [r3]
 857 042e DBB2     		uxtb	r3, r3
 858 0430 23F00403 		bic	r3, r3, #4
 859 0434 DAB2     		uxtb	r2, r3
 860 0436 354B     		ldr	r3, .L50+8
 861 0438 1A70     		strb	r2, [r3]
 862 043a 07E0     		b	.L36
 863              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 864              		.loc 1 551 0
 865 043c 334B     		ldr	r3, .L50+8
 866 043e 1B78     		ldrb	r3, [r3]
 867 0440 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 26


 868 0442 43F00403 		orr	r3, r3, #4
 869 0446 DAB2     		uxtb	r2, r3
 870 0448 304B     		ldr	r3, .L50+8
 871 044a 1A70     		strb	r2, [r3]
 872              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 27


 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 28


 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 29


 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 30


 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 31


 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 873              		.loc 1 879 0
 874 044c 2E4B     		ldr	r3, .L50+4
 875 044e 1B78     		ldrb	r3, [r3]
 876 0450 DBB2     		uxtb	r3, r3
 877 0452 03F00403 		and	r3, r3, #4
 878 0456 002B     		cmp	r3, #0
 879 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 32


 880              		.loc 1 881 0
 881 045a 2E4B     		ldr	r3, .L50+16
 882 045c 9B78     		ldrb	r3, [r3, #2]
 883 045e DAB2     		uxtb	r2, r3
 884 0460 2D4B     		ldr	r3, .L50+20
 885 0462 9B78     		ldrb	r3, [r3, #2]
 886 0464 DBB2     		uxtb	r3, r3
 887 0466 9A42     		cmp	r2, r3
 888 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 889              		.loc 1 883 0
 890 046a 264B     		ldr	r3, .L50
 891 046c 1B78     		ldrb	r3, [r3]
 892 046e DBB2     		uxtb	r3, r3
 893 0470 43F00403 		orr	r3, r3, #4
 894 0474 DAB2     		uxtb	r2, r3
 895 0476 234B     		ldr	r3, .L50
 896 0478 1A70     		strb	r2, [r3]
 897 047a 07E0     		b	.L37
 898              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 899              		.loc 1 887 0
 900 047c 214B     		ldr	r3, .L50
 901 047e 1B78     		ldrb	r3, [r3]
 902 0480 DBB2     		uxtb	r3, r3
 903 0482 23F00403 		bic	r3, r3, #4
 904 0486 DAB2     		uxtb	r2, r3
 905 0488 1E4B     		ldr	r3, .L50
 906 048a 1A70     		strb	r2, [r3]
 907              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 908              		.loc 1 892 0
 909 048c 1E4B     		ldr	r3, .L50+4
 910 048e 1B78     		ldrb	r3, [r3]
 911 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 912              		.loc 1 893 0
 913 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 914 0494 002B     		cmp	r3, #0
 915 0496 13D0     		beq	.L39
 916              		.loc 1 893 0 is_stmt 0 discriminator 1
 917 0498 1A4B     		ldr	r3, .L50
 918 049a 1B78     		ldrb	r3, [r3]
 919 049c DAB2     		uxtb	r2, r3
 920 049e FB79     		ldrb	r3, [r7, #7]
 921 04a0 1340     		ands	r3, r3, r2
 922 04a2 DBB2     		uxtb	r3, r3
 923 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 924 04a6 9A42     		cmp	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 33


 925 04a8 0AD1     		bne	.L39
 926              		.loc 1 893 0 discriminator 2
 927 04aa 184B     		ldr	r3, .L50+8
 928 04ac 1B78     		ldrb	r3, [r3]
 929 04ae DBB2     		uxtb	r3, r3
 930 04b0 43F00803 		orr	r3, r3, #8
 931 04b4 DAB2     		uxtb	r2, r3
 932 04b6 154B     		ldr	r3, .L50+8
 933 04b8 1A70     		strb	r2, [r3]
 934 04ba 124B     		ldr	r3, .L50
 935 04bc 0022     		movs	r2, #0
 936 04be 1A70     		strb	r2, [r3]
 937              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 938              		.loc 1 898 0 is_stmt 1
 939 04c0 134B     		ldr	r3, .L50+12
 940 04c2 1B78     		ldrb	r3, [r3]
 941 04c4 DBB2     		uxtb	r3, r3
 942 04c6 03F00403 		and	r3, r3, #4
 943 04ca 002B     		cmp	r3, #0
 944 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 945              		.loc 1 900 0
 946 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 947              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 948              		.loc 1 905 0
 949 04d2 0D4B     		ldr	r3, .L50+4
 950 04d4 1B78     		ldrb	r3, [r3]
 951 04d6 DBB2     		uxtb	r3, r3
 952 04d8 03F00203 		and	r3, r3, #2
 953 04dc 002B     		cmp	r3, #0
 954 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 955              		.loc 1 907 0
 956 04e0 0C4B     		ldr	r3, .L50+16
 957 04e2 5B78     		ldrb	r3, [r3, #1]
 958 04e4 DAB2     		uxtb	r2, r3
 959 04e6 0C4B     		ldr	r3, .L50+20
 960 04e8 5B78     		ldrb	r3, [r3, #1]
 961 04ea DBB2     		uxtb	r3, r3
 962 04ec 9A42     		cmp	r2, r3
 963 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 964              		.loc 1 909 0
 965 04f0 044B     		ldr	r3, .L50
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 34


 966 04f2 1B78     		ldrb	r3, [r3]
 967 04f4 DBB2     		uxtb	r3, r3
 968 04f6 43F00203 		orr	r3, r3, #2
 969 04fa DAB2     		uxtb	r2, r3
 970 04fc 014B     		ldr	r3, .L50
 971 04fe 1A70     		strb	r2, [r3]
 972 0500 14E0     		b	.L40
 973              	.L51:
 974 0502 00BF     		.align	2
 975              	.L50:
 976 0504 00000000 		.word	RTC_alarmCurStatus
 977 0508 00000000 		.word	RTC_alarmCfgMask
 978 050c 00000000 		.word	RTC_statusDateTime
 979 0510 00000000 		.word	RTC_intervalCfgMask
 980 0514 00000000 		.word	RTC_alarmCfgTimeDate
 981 0518 00000000 		.word	RTC_currentTimeDate
 982              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 983              		.loc 1 913 0
 984 051c 384B     		ldr	r3, .L52
 985 051e 1B78     		ldrb	r3, [r3]
 986 0520 DBB2     		uxtb	r3, r3
 987 0522 23F00203 		bic	r3, r3, #2
 988 0526 DAB2     		uxtb	r2, r3
 989 0528 354B     		ldr	r3, .L52
 990 052a 1A70     		strb	r2, [r3]
 991              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 992              		.loc 1 918 0
 993 052c 354B     		ldr	r3, .L52+4
 994 052e 1B78     		ldrb	r3, [r3]
 995 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 996              		.loc 1 919 0
 997 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 998 0534 002B     		cmp	r3, #0
 999 0536 13D0     		beq	.L42
 1000              		.loc 1 919 0 is_stmt 0 discriminator 1
 1001 0538 314B     		ldr	r3, .L52
 1002 053a 1B78     		ldrb	r3, [r3]
 1003 053c DAB2     		uxtb	r2, r3
 1004 053e FB79     		ldrb	r3, [r7, #7]
 1005 0540 1340     		ands	r3, r3, r2
 1006 0542 DBB2     		uxtb	r3, r3
 1007 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1008 0546 9A42     		cmp	r2, r3
 1009 0548 0AD1     		bne	.L42
 1010              		.loc 1 919 0 discriminator 2
 1011 054a 2F4B     		ldr	r3, .L52+8
 1012 054c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 35


 1013 054e DBB2     		uxtb	r3, r3
 1014 0550 43F00803 		orr	r3, r3, #8
 1015 0554 DAB2     		uxtb	r2, r3
 1016 0556 2C4B     		ldr	r3, .L52+8
 1017 0558 1A70     		strb	r2, [r3]
 1018 055a 294B     		ldr	r3, .L52
 1019 055c 0022     		movs	r2, #0
 1020 055e 1A70     		strb	r2, [r3]
 1021              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1022              		.loc 1 924 0 is_stmt 1
 1023 0560 2A4B     		ldr	r3, .L52+12
 1024 0562 1B78     		ldrb	r3, [r3]
 1025 0564 DBB2     		uxtb	r3, r3
 1026 0566 03F00203 		and	r3, r3, #2
 1027 056a 002B     		cmp	r3, #0
 1028 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1029              		.loc 1 926 0
 1030 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1031              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1032              		.loc 1 931 0
 1033 0572 244B     		ldr	r3, .L52+4
 1034 0574 1B78     		ldrb	r3, [r3]
 1035 0576 DBB2     		uxtb	r3, r3
 1036 0578 03F00103 		and	r3, r3, #1
 1037 057c 002B     		cmp	r3, #0
 1038 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1039              		.loc 1 933 0
 1040 0580 234B     		ldr	r3, .L52+16
 1041 0582 1B78     		ldrb	r3, [r3]
 1042 0584 DAB2     		uxtb	r2, r3
 1043 0586 234B     		ldr	r3, .L52+20
 1044 0588 1B78     		ldrb	r3, [r3]
 1045 058a DBB2     		uxtb	r3, r3
 1046 058c 9A42     		cmp	r2, r3
 1047 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1048              		.loc 1 935 0
 1049 0590 1B4B     		ldr	r3, .L52
 1050 0592 1B78     		ldrb	r3, [r3]
 1051 0594 DBB2     		uxtb	r3, r3
 1052 0596 43F00103 		orr	r3, r3, #1
 1053 059a DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 36


 1054 059c 184B     		ldr	r3, .L52
 1055 059e 1A70     		strb	r2, [r3]
 1056 05a0 07E0     		b	.L43
 1057              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1058              		.loc 1 939 0
 1059 05a2 174B     		ldr	r3, .L52
 1060 05a4 1B78     		ldrb	r3, [r3]
 1061 05a6 DBB2     		uxtb	r3, r3
 1062 05a8 23F00103 		bic	r3, r3, #1
 1063 05ac DAB2     		uxtb	r2, r3
 1064 05ae 144B     		ldr	r3, .L52
 1065 05b0 1A70     		strb	r2, [r3]
 1066              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1067              		.loc 1 944 0
 1068 05b2 144B     		ldr	r3, .L52+4
 1069 05b4 1B78     		ldrb	r3, [r3]
 1070 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1071              		.loc 1 945 0
 1072 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1073 05ba 002B     		cmp	r3, #0
 1074 05bc 13D0     		beq	.L45
 1075              		.loc 1 945 0 is_stmt 0 discriminator 1
 1076 05be 104B     		ldr	r3, .L52
 1077 05c0 1B78     		ldrb	r3, [r3]
 1078 05c2 DAB2     		uxtb	r2, r3
 1079 05c4 FB79     		ldrb	r3, [r7, #7]
 1080 05c6 1340     		ands	r3, r3, r2
 1081 05c8 DBB2     		uxtb	r3, r3
 1082 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1083 05cc 9A42     		cmp	r2, r3
 1084 05ce 0AD1     		bne	.L45
 1085              		.loc 1 945 0 discriminator 2
 1086 05d0 0D4B     		ldr	r3, .L52+8
 1087 05d2 1B78     		ldrb	r3, [r3]
 1088 05d4 DBB2     		uxtb	r3, r3
 1089 05d6 43F00803 		orr	r3, r3, #8
 1090 05da DAB2     		uxtb	r2, r3
 1091 05dc 0A4B     		ldr	r3, .L52+8
 1092 05de 1A70     		strb	r2, [r3]
 1093 05e0 074B     		ldr	r3, .L52
 1094 05e2 0022     		movs	r2, #0
 1095 05e4 1A70     		strb	r2, [r3]
 1096              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1097              		.loc 1 948 0 is_stmt 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 37


 1098 05e6 094B     		ldr	r3, .L52+12
 1099 05e8 1B78     		ldrb	r3, [r3]
 1100 05ea DBB2     		uxtb	r3, r3
 1101 05ec 03F00103 		and	r3, r3, #1
 1102 05f0 002B     		cmp	r3, #0
 1103 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1104              		.loc 1 950 0
 1105 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1106              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1107              		.loc 1 956 0
 1108 05f8 00BF     		nop
 1109 05fa 0837     		adds	r7, r7, #8
 1110              		.cfi_def_cfa_offset 8
 1111 05fc BD46     		mov	sp, r7
 1112              		.cfi_def_cfa_register 13
 1113              		@ sp needed
 1114 05fe 80BD     		pop	{r7, pc}
 1115              	.L53:
 1116              		.align	2
 1117              	.L52:
 1118 0600 00000000 		.word	RTC_alarmCurStatus
 1119 0604 00000000 		.word	RTC_alarmCfgMask
 1120 0608 00000000 		.word	RTC_statusDateTime
 1121 060c 00000000 		.word	RTC_intervalCfgMask
 1122 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1123 0614 00000000 		.word	RTC_currentTimeDate
 1124              		.cfi_endproc
 1125              	.LFE71:
 1126              		.size	RTC_ISR, .-RTC_ISR
 1127              		.text
 1128              	.Letext0:
 1129              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1130              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1131              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1132              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1133              		.file 6 "./data.h"
 1134              		.file 7 "./modem.h"
 1135              		.file 8 "./notoriOS.h"
 1136              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1137              		.file 10 "./level_sensor.h"
 1138              		.file 11 "./downstream_level_sensor.h"
 1139              		.file 12 "./valve.h"
 1140              		.file 13 "./App_LED.h"
 1141              		.section	.debug_info,"",%progbits
 1142              	.Ldebug_info0:
 1143 0000 42070000 		.4byte	0x742
 1144 0004 0400     		.2byte	0x4
 1145 0006 00000000 		.4byte	.Ldebug_abbrev0
 1146 000a 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 38


 1147 000b 01       		.uleb128 0x1
 1148 000c 9F000000 		.4byte	.LASF113
 1149 0010 0C       		.byte	0xc
 1150 0011 28060000 		.4byte	.LASF114
 1151 0015 2C050000 		.4byte	.LASF115
 1152 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1153 001d 00000000 		.4byte	0
 1154 0021 00000000 		.4byte	.Ldebug_line0
 1155 0025 02       		.uleb128 0x2
 1156 0026 01       		.byte	0x1
 1157 0027 06       		.byte	0x6
 1158 0028 6B030000 		.4byte	.LASF0
 1159 002c 02       		.uleb128 0x2
 1160 002d 01       		.byte	0x1
 1161 002e 08       		.byte	0x8
 1162 002f 20030000 		.4byte	.LASF1
 1163 0033 02       		.uleb128 0x2
 1164 0034 02       		.byte	0x2
 1165 0035 05       		.byte	0x5
 1166 0036 74000000 		.4byte	.LASF2
 1167 003a 02       		.uleb128 0x2
 1168 003b 02       		.byte	0x2
 1169 003c 07       		.byte	0x7
 1170 003d 44040000 		.4byte	.LASF3
 1171 0041 03       		.uleb128 0x3
 1172 0042 31020000 		.4byte	.LASF9
 1173 0046 02       		.byte	0x2
 1174 0047 3F       		.byte	0x3f
 1175 0048 4C000000 		.4byte	0x4c
 1176 004c 02       		.uleb128 0x2
 1177 004d 04       		.byte	0x4
 1178 004e 05       		.byte	0x5
 1179 004f 40020000 		.4byte	.LASF4
 1180 0053 02       		.uleb128 0x2
 1181 0054 04       		.byte	0x4
 1182 0055 07       		.byte	0x7
 1183 0056 86050000 		.4byte	.LASF5
 1184 005a 02       		.uleb128 0x2
 1185 005b 08       		.byte	0x8
 1186 005c 05       		.byte	0x5
 1187 005d 23020000 		.4byte	.LASF6
 1188 0061 02       		.uleb128 0x2
 1189 0062 08       		.byte	0x8
 1190 0063 07       		.byte	0x7
 1191 0064 94030000 		.4byte	.LASF7
 1192 0068 04       		.uleb128 0x4
 1193 0069 04       		.byte	0x4
 1194 006a 05       		.byte	0x5
 1195 006b 696E7400 		.ascii	"int\000"
 1196 006f 02       		.uleb128 0x2
 1197 0070 04       		.byte	0x4
 1198 0071 07       		.byte	0x7
 1199 0072 CF030000 		.4byte	.LASF8
 1200 0076 03       		.uleb128 0x3
 1201 0077 C6040000 		.4byte	.LASF10
 1202 007b 03       		.byte	0x3
 1203 007c 2C       		.byte	0x2c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 39


 1204 007d 41000000 		.4byte	0x41
 1205 0081 05       		.uleb128 0x5
 1206 0082 BE010000 		.4byte	.LASF11
 1207 0086 04       		.byte	0x4
 1208 0087 9201     		.2byte	0x192
 1209 0089 2C000000 		.4byte	0x2c
 1210 008d 05       		.uleb128 0x5
 1211 008e 8A010000 		.4byte	.LASF12
 1212 0092 04       		.byte	0x4
 1213 0093 9301     		.2byte	0x193
 1214 0095 3A000000 		.4byte	0x3a
 1215 0099 05       		.uleb128 0x5
 1216 009a D5010000 		.4byte	.LASF13
 1217 009e 04       		.byte	0x4
 1218 009f 9601     		.2byte	0x196
 1219 00a1 33000000 		.4byte	0x33
 1220 00a5 05       		.uleb128 0x5
 1221 00a6 98050000 		.4byte	.LASF14
 1222 00aa 04       		.byte	0x4
 1223 00ab 9701     		.2byte	0x197
 1224 00ad 4C000000 		.4byte	0x4c
 1225 00b1 02       		.uleb128 0x2
 1226 00b2 04       		.byte	0x4
 1227 00b3 04       		.byte	0x4
 1228 00b4 FE010000 		.4byte	.LASF15
 1229 00b8 02       		.uleb128 0x2
 1230 00b9 08       		.byte	0x8
 1231 00ba 04       		.byte	0x4
 1232 00bb 9E050000 		.4byte	.LASF16
 1233 00bf 02       		.uleb128 0x2
 1234 00c0 01       		.byte	0x1
 1235 00c1 08       		.byte	0x8
 1236 00c2 3B020000 		.4byte	.LASF17
 1237 00c6 06       		.uleb128 0x6
 1238 00c7 81000000 		.4byte	0x81
 1239 00cb 07       		.uleb128 0x7
 1240 00cc 0C       		.byte	0xc
 1241 00cd 05       		.byte	0x5
 1242 00ce 30       		.byte	0x30
 1243 00cf 34010000 		.4byte	0x134
 1244 00d3 08       		.uleb128 0x8
 1245 00d4 53656300 		.ascii	"Sec\000"
 1246 00d8 05       		.byte	0x5
 1247 00d9 32       		.byte	0x32
 1248 00da 81000000 		.4byte	0x81
 1249 00de 00       		.byte	0
 1250 00df 08       		.uleb128 0x8
 1251 00e0 4D696E00 		.ascii	"Min\000"
 1252 00e4 05       		.byte	0x5
 1253 00e5 33       		.byte	0x33
 1254 00e6 81000000 		.4byte	0x81
 1255 00ea 01       		.byte	0x1
 1256 00eb 09       		.uleb128 0x9
 1257 00ec 54010000 		.4byte	.LASF18
 1258 00f0 05       		.byte	0x5
 1259 00f1 34       		.byte	0x34
 1260 00f2 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 40


 1261 00f6 02       		.byte	0x2
 1262 00f7 09       		.uleb128 0x9
 1263 00f8 04020000 		.4byte	.LASF19
 1264 00fc 05       		.byte	0x5
 1265 00fd 35       		.byte	0x35
 1266 00fe 81000000 		.4byte	0x81
 1267 0102 03       		.byte	0x3
 1268 0103 09       		.uleb128 0x9
 1269 0104 16050000 		.4byte	.LASF20
 1270 0108 05       		.byte	0x5
 1271 0109 36       		.byte	0x36
 1272 010a 81000000 		.4byte	0x81
 1273 010e 04       		.byte	0x4
 1274 010f 09       		.uleb128 0x9
 1275 0110 19070000 		.4byte	.LASF21
 1276 0114 05       		.byte	0x5
 1277 0115 37       		.byte	0x37
 1278 0116 8D000000 		.4byte	0x8d
 1279 011a 06       		.byte	0x6
 1280 011b 09       		.uleb128 0x9
 1281 011c A8020000 		.4byte	.LASF22
 1282 0120 05       		.byte	0x5
 1283 0121 38       		.byte	0x38
 1284 0122 81000000 		.4byte	0x81
 1285 0126 08       		.byte	0x8
 1286 0127 09       		.uleb128 0x9
 1287 0128 87020000 		.4byte	.LASF23
 1288 012c 05       		.byte	0x5
 1289 012d 39       		.byte	0x39
 1290 012e 8D000000 		.4byte	0x8d
 1291 0132 0A       		.byte	0xa
 1292 0133 00       		.byte	0
 1293 0134 03       		.uleb128 0x3
 1294 0135 9B060000 		.4byte	.LASF24
 1295 0139 05       		.byte	0x5
 1296 013a 3A       		.byte	0x3a
 1297 013b 3F010000 		.4byte	0x13f
 1298 013f 06       		.uleb128 0x6
 1299 0140 CB000000 		.4byte	0xcb
 1300 0144 02       		.uleb128 0x2
 1301 0145 08       		.byte	0x8
 1302 0146 04       		.byte	0x4
 1303 0147 F1020000 		.4byte	.LASF25
 1304 014b 02       		.uleb128 0x2
 1305 014c 04       		.byte	0x4
 1306 014d 07       		.byte	0x7
 1307 014e 7E000000 		.4byte	.LASF26
 1308 0152 0A       		.uleb128 0xa
 1309 0153 BF000000 		.4byte	0xbf
 1310 0157 62010000 		.4byte	0x162
 1311 015b 0B       		.uleb128 0xb
 1312 015c 4B010000 		.4byte	0x14b
 1313 0160 17       		.byte	0x17
 1314 0161 00       		.byte	0
 1315 0162 07       		.uleb128 0x7
 1316 0163 2C       		.byte	0x2c
 1317 0164 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 41


 1318 0165 14       		.byte	0x14
 1319 0166 8F010000 		.4byte	0x18f
 1320 016a 08       		.uleb128 0x8
 1321 016b 6B657900 		.ascii	"key\000"
 1322 016f 06       		.byte	0x6
 1323 0170 15       		.byte	0x15
 1324 0171 8F010000 		.4byte	0x18f
 1325 0175 00       		.byte	0
 1326 0176 09       		.uleb128 0x9
 1327 0177 78010000 		.4byte	.LASF27
 1328 017b 06       		.byte	0x6
 1329 017c 16       		.byte	0x16
 1330 017d 8F010000 		.4byte	0x18f
 1331 0181 14       		.byte	0x14
 1332 0182 09       		.uleb128 0x9
 1333 0183 DB010000 		.4byte	.LASF28
 1334 0187 06       		.byte	0x6
 1335 0188 17       		.byte	0x17
 1336 0189 A5000000 		.4byte	0xa5
 1337 018d 28       		.byte	0x28
 1338 018e 00       		.byte	0
 1339 018f 0A       		.uleb128 0xa
 1340 0190 BF000000 		.4byte	0xbf
 1341 0194 9F010000 		.4byte	0x19f
 1342 0198 0B       		.uleb128 0xb
 1343 0199 4B010000 		.4byte	0x14b
 1344 019d 13       		.byte	0x13
 1345 019e 00       		.byte	0
 1346 019f 03       		.uleb128 0x3
 1347 01a0 DC030000 		.4byte	.LASF29
 1348 01a4 06       		.byte	0x6
 1349 01a5 19       		.byte	0x19
 1350 01a6 62010000 		.4byte	0x162
 1351 01aa 07       		.uleb128 0x7
 1352 01ab 3C       		.byte	0x3c
 1353 01ac 07       		.byte	0x7
 1354 01ad 36       		.byte	0x36
 1355 01ae D7010000 		.4byte	0x1d7
 1356 01b2 09       		.uleb128 0x9
 1357 01b3 28000000 		.4byte	.LASF30
 1358 01b7 07       		.byte	0x7
 1359 01b8 37       		.byte	0x37
 1360 01b9 8F010000 		.4byte	0x18f
 1361 01bd 00       		.byte	0
 1362 01be 09       		.uleb128 0x9
 1363 01bf 0E000000 		.4byte	.LASF31
 1364 01c3 07       		.byte	0x7
 1365 01c4 38       		.byte	0x38
 1366 01c5 8F010000 		.4byte	0x18f
 1367 01c9 14       		.byte	0x14
 1368 01ca 09       		.uleb128 0x9
 1369 01cb C1040000 		.4byte	.LASF32
 1370 01cf 07       		.byte	0x7
 1371 01d0 39       		.byte	0x39
 1372 01d1 8F010000 		.4byte	0x18f
 1373 01d5 28       		.byte	0x28
 1374 01d6 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 42


 1375 01d7 03       		.uleb128 0x3
 1376 01d8 E5050000 		.4byte	.LASF33
 1377 01dc 07       		.byte	0x7
 1378 01dd 3B       		.byte	0x3b
 1379 01de AA010000 		.4byte	0x1aa
 1380 01e2 07       		.uleb128 0x7
 1381 01e3 20       		.byte	0x20
 1382 01e4 07       		.byte	0x7
 1383 01e5 3D       		.byte	0x3d
 1384 01e6 4B020000 		.4byte	0x24b
 1385 01ea 09       		.uleb128 0x9
 1386 01eb E8030000 		.4byte	.LASF34
 1387 01ef 07       		.byte	0x7
 1388 01f0 3E       		.byte	0x3e
 1389 01f1 68000000 		.4byte	0x68
 1390 01f5 00       		.byte	0
 1391 01f6 08       		.uleb128 0x8
 1392 01f7 62657200 		.ascii	"ber\000"
 1393 01fb 07       		.byte	0x7
 1394 01fc 3F       		.byte	0x3f
 1395 01fd 68000000 		.4byte	0x68
 1396 0201 04       		.byte	0x4
 1397 0202 09       		.uleb128 0x9
 1398 0203 D0010000 		.4byte	.LASF35
 1399 0207 07       		.byte	0x7
 1400 0208 40       		.byte	0x40
 1401 0209 68000000 		.4byte	0x68
 1402 020d 08       		.byte	0x8
 1403 020e 09       		.uleb128 0x9
 1404 020f 67010000 		.4byte	.LASF36
 1405 0213 07       		.byte	0x7
 1406 0214 41       		.byte	0x41
 1407 0215 68000000 		.4byte	0x68
 1408 0219 0C       		.byte	0xc
 1409 021a 09       		.uleb128 0x9
 1410 021b 9A000000 		.4byte	.LASF37
 1411 021f 07       		.byte	0x7
 1412 0220 42       		.byte	0x42
 1413 0221 68000000 		.4byte	0x68
 1414 0225 10       		.byte	0x10
 1415 0226 09       		.uleb128 0x9
 1416 0227 2E030000 		.4byte	.LASF38
 1417 022b 07       		.byte	0x7
 1418 022c 43       		.byte	0x43
 1419 022d 68000000 		.4byte	0x68
 1420 0231 14       		.byte	0x14
 1421 0232 09       		.uleb128 0x9
 1422 0233 57040000 		.4byte	.LASF39
 1423 0237 07       		.byte	0x7
 1424 0238 44       		.byte	0x44
 1425 0239 68000000 		.4byte	0x68
 1426 023d 18       		.byte	0x18
 1427 023e 09       		.uleb128 0x9
 1428 023f 8E040000 		.4byte	.LASF40
 1429 0243 07       		.byte	0x7
 1430 0244 45       		.byte	0x45
 1431 0245 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 43


 1432 0249 1C       		.byte	0x1c
 1433 024a 00       		.byte	0
 1434 024b 03       		.uleb128 0x3
 1435 024c D6040000 		.4byte	.LASF41
 1436 0250 07       		.byte	0x7
 1437 0251 47       		.byte	0x47
 1438 0252 E2010000 		.4byte	0x1e2
 1439 0256 07       		.uleb128 0x7
 1440 0257 09       		.byte	0x9
 1441 0258 07       		.byte	0x7
 1442 0259 53       		.byte	0x53
 1443 025a CB020000 		.4byte	0x2cb
 1444 025e 09       		.uleb128 0x9
 1445 025f CF060000 		.4byte	.LASF42
 1446 0263 07       		.byte	0x7
 1447 0264 55       		.byte	0x55
 1448 0265 81000000 		.4byte	0x81
 1449 0269 00       		.byte	0
 1450 026a 09       		.uleb128 0x9
 1451 026b 30040000 		.4byte	.LASF43
 1452 026f 07       		.byte	0x7
 1453 0270 57       		.byte	0x57
 1454 0271 CB020000 		.4byte	0x2cb
 1455 0275 01       		.byte	0x1
 1456 0276 09       		.uleb128 0x9
 1457 0277 C8020000 		.4byte	.LASF44
 1458 027b 07       		.byte	0x7
 1459 027c 59       		.byte	0x59
 1460 027d 81000000 		.4byte	0x81
 1461 0281 02       		.byte	0x2
 1462 0282 09       		.uleb128 0x9
 1463 0283 EE030000 		.4byte	.LASF45
 1464 0287 07       		.byte	0x7
 1465 0288 5B       		.byte	0x5b
 1466 0289 81000000 		.4byte	0x81
 1467 028d 03       		.byte	0x3
 1468 028e 09       		.uleb128 0x9
 1469 028f D9050000 		.4byte	.LASF46
 1470 0293 07       		.byte	0x7
 1471 0294 5E       		.byte	0x5e
 1472 0295 81000000 		.4byte	0x81
 1473 0299 04       		.byte	0x4
 1474 029a 09       		.uleb128 0x9
 1475 029b 47010000 		.4byte	.LASF47
 1476 029f 07       		.byte	0x7
 1477 02a0 63       		.byte	0x63
 1478 02a1 81000000 		.4byte	0x81
 1479 02a5 05       		.byte	0x5
 1480 02a6 09       		.uleb128 0x9
 1481 02a7 D5020000 		.4byte	.LASF48
 1482 02ab 07       		.byte	0x7
 1483 02ac 65       		.byte	0x65
 1484 02ad 81000000 		.4byte	0x81
 1485 02b1 06       		.byte	0x6
 1486 02b2 09       		.uleb128 0x9
 1487 02b3 77030000 		.4byte	.LASF49
 1488 02b7 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 44


 1489 02b8 66       		.byte	0x66
 1490 02b9 81000000 		.4byte	0x81
 1491 02bd 07       		.byte	0x7
 1492 02be 09       		.uleb128 0x9
 1493 02bf 87000000 		.4byte	.LASF50
 1494 02c3 07       		.byte	0x7
 1495 02c4 67       		.byte	0x67
 1496 02c5 81000000 		.4byte	0x81
 1497 02c9 08       		.byte	0x8
 1498 02ca 00       		.byte	0
 1499 02cb 02       		.uleb128 0x2
 1500 02cc 01       		.byte	0x1
 1501 02cd 02       		.byte	0x2
 1502 02ce E4040000 		.4byte	.LASF51
 1503 02d2 03       		.uleb128 0x3
 1504 02d3 19040000 		.4byte	.LASF52
 1505 02d7 07       		.byte	0x7
 1506 02d8 69       		.byte	0x69
 1507 02d9 56020000 		.4byte	0x256
 1508 02dd 07       		.uleb128 0x7
 1509 02de 06       		.byte	0x6
 1510 02df 08       		.byte	0x8
 1511 02e0 30       		.byte	0x30
 1512 02e1 16030000 		.4byte	0x316
 1513 02e5 09       		.uleb128 0x9
 1514 02e6 65000000 		.4byte	.LASF53
 1515 02ea 08       		.byte	0x8
 1516 02eb 32       		.byte	0x32
 1517 02ec 8D000000 		.4byte	0x8d
 1518 02f0 00       		.byte	0
 1519 02f1 09       		.uleb128 0x9
 1520 02f2 4F000000 		.4byte	.LASF54
 1521 02f6 08       		.byte	0x8
 1522 02f7 33       		.byte	0x33
 1523 02f8 99000000 		.4byte	0x99
 1524 02fc 02       		.byte	0x2
 1525 02fd 09       		.uleb128 0x9
 1526 02fe F2050000 		.4byte	.LASF55
 1527 0302 08       		.byte	0x8
 1528 0303 34       		.byte	0x34
 1529 0304 81000000 		.4byte	0x81
 1530 0308 04       		.byte	0x4
 1531 0309 09       		.uleb128 0x9
 1532 030a 01070000 		.4byte	.LASF56
 1533 030e 08       		.byte	0x8
 1534 030f 35       		.byte	0x35
 1535 0310 81000000 		.4byte	0x81
 1536 0314 05       		.byte	0x5
 1537 0315 00       		.byte	0
 1538 0316 03       		.uleb128 0x3
 1539 0317 C2020000 		.4byte	.LASF57
 1540 031b 08       		.byte	0x8
 1541 031c 38       		.byte	0x38
 1542 031d 21030000 		.4byte	0x321
 1543 0321 06       		.uleb128 0x6
 1544 0322 DD020000 		.4byte	0x2dd
 1545 0326 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 45


 1546 0327 1C       		.byte	0x1c
 1547 0328 08       		.byte	0x8
 1548 0329 3B       		.byte	0x3b
 1549 032a 47030000 		.4byte	0x347
 1550 032e 09       		.uleb128 0x9
 1551 032f 59020000 		.4byte	.LASF58
 1552 0333 08       		.byte	0x8
 1553 0334 3D       		.byte	0x3d
 1554 0335 47030000 		.4byte	0x347
 1555 0339 00       		.byte	0
 1556 033a 09       		.uleb128 0x9
 1557 033b 59010000 		.4byte	.LASF59
 1558 033f 08       		.byte	0x8
 1559 0340 3E       		.byte	0x3e
 1560 0341 52010000 		.4byte	0x152
 1561 0345 04       		.byte	0x4
 1562 0346 00       		.byte	0
 1563 0347 0C       		.uleb128 0xc
 1564 0348 04       		.byte	0x4
 1565 0349 D7010000 		.4byte	0x1d7
 1566 034d 03       		.uleb128 0x3
 1567 034e 39040000 		.4byte	.LASF60
 1568 0352 08       		.byte	0x8
 1569 0353 40       		.byte	0x40
 1570 0354 26030000 		.4byte	0x326
 1571 0358 07       		.uleb128 0x7
 1572 0359 68       		.byte	0x68
 1573 035a 08       		.byte	0x8
 1574 035b 46       		.byte	0x46
 1575 035c 79030000 		.4byte	0x379
 1576 0360 09       		.uleb128 0x9
 1577 0361 92000000 		.4byte	.LASF61
 1578 0365 08       		.byte	0x8
 1579 0366 4B       		.byte	0x4b
 1580 0367 79030000 		.4byte	0x379
 1581 036b 00       		.byte	0
 1582 036c 09       		.uleb128 0x9
 1583 036d 13060000 		.4byte	.LASF62
 1584 0371 08       		.byte	0x8
 1585 0372 4C       		.byte	0x4c
 1586 0373 68000000 		.4byte	0x68
 1587 0377 64       		.byte	0x64
 1588 0378 00       		.byte	0
 1589 0379 0A       		.uleb128 0xa
 1590 037a BF000000 		.4byte	0xbf
 1591 037e 89030000 		.4byte	0x389
 1592 0382 0B       		.uleb128 0xb
 1593 0383 4B010000 		.4byte	0x14b
 1594 0387 63       		.byte	0x63
 1595 0388 00       		.byte	0
 1596 0389 03       		.uleb128 0x3
 1597 038a 40000000 		.4byte	.LASF63
 1598 038e 08       		.byte	0x8
 1599 038f 52       		.byte	0x52
 1600 0390 58030000 		.4byte	0x358
 1601 0394 0D       		.uleb128 0xd
 1602 0395 A5050000 		.4byte	.LASF64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 46


 1603 0399 01       		.byte	0x1
 1604 039a 36       		.byte	0x36
 1605 039b 00000000 		.4byte	.LFB64
 1606 039f 0E000000 		.4byte	.LFE64-.LFB64
 1607 03a3 01       		.uleb128 0x1
 1608 03a4 9C       		.byte	0x9c
 1609 03a5 0D       		.uleb128 0xd
 1610 03a6 6F050000 		.4byte	.LASF65
 1611 03aa 01       		.byte	0x1
 1612 03ab 51       		.byte	0x51
 1613 03ac 00000000 		.4byte	.LFB65
 1614 03b0 0E000000 		.4byte	.LFE65-.LFB65
 1615 03b4 01       		.uleb128 0x1
 1616 03b5 9C       		.byte	0x9c
 1617 03b6 0D       		.uleb128 0xd
 1618 03b7 01050000 		.4byte	.LASF66
 1619 03bb 01       		.byte	0x1
 1620 03bc 6C       		.byte	0x6c
 1621 03bd 00000000 		.4byte	.LFB66
 1622 03c1 0E000000 		.4byte	.LFE66-.LFB66
 1623 03c5 01       		.uleb128 0x1
 1624 03c6 9C       		.byte	0x9c
 1625 03c7 0D       		.uleb128 0xd
 1626 03c8 AE020000 		.4byte	.LASF67
 1627 03cc 01       		.byte	0x1
 1628 03cd 87       		.byte	0x87
 1629 03ce 00000000 		.4byte	.LFB67
 1630 03d2 0E000000 		.4byte	.LFE67-.LFB67
 1631 03d6 01       		.uleb128 0x1
 1632 03d7 9C       		.byte	0x9c
 1633 03d8 0D       		.uleb128 0xd
 1634 03d9 2D010000 		.4byte	.LASF68
 1635 03dd 01       		.byte	0x1
 1636 03de A2       		.byte	0xa2
 1637 03df 00000000 		.4byte	.LFB68
 1638 03e3 0E000000 		.4byte	.LFE68-.LFB68
 1639 03e7 01       		.uleb128 0x1
 1640 03e8 9C       		.byte	0x9c
 1641 03e9 0D       		.uleb128 0xd
 1642 03ea 64020000 		.4byte	.LASF69
 1643 03ee 01       		.byte	0x1
 1644 03ef BD       		.byte	0xbd
 1645 03f0 00000000 		.4byte	.LFB69
 1646 03f4 0E000000 		.4byte	.LFE69-.LFB69
 1647 03f8 01       		.uleb128 0x1
 1648 03f9 9C       		.byte	0x9c
 1649 03fa 0D       		.uleb128 0xd
 1650 03fb 5B060000 		.4byte	.LASF70
 1651 03ff 01       		.byte	0x1
 1652 0400 D8       		.byte	0xd8
 1653 0401 00000000 		.4byte	.LFB70
 1654 0405 0E000000 		.4byte	.LFE70-.LFB70
 1655 0409 01       		.uleb128 0x1
 1656 040a 9C       		.byte	0x9c
 1657 040b 0E       		.uleb128 0xe
 1658 040c BD060000 		.4byte	.LASF116
 1659 0410 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 47


 1660 0411 0B01     		.2byte	0x10b
 1661 0413 00000000 		.4byte	.LFB71
 1662 0417 18060000 		.4byte	.LFE71-.LFB71
 1663 041b 01       		.uleb128 0x1
 1664 041c 9C       		.byte	0x9c
 1665 041d 31040000 		.4byte	0x431
 1666 0421 0F       		.uleb128 0xf
 1667 0422 CE040000 		.4byte	.LASF117
 1668 0426 01       		.byte	0x1
 1669 0427 0D01     		.2byte	0x10d
 1670 0429 81000000 		.4byte	0x81
 1671 042d 02       		.uleb128 0x2
 1672 042e 91       		.byte	0x91
 1673 042f 77       		.sleb128 -9
 1674 0430 00       		.byte	0
 1675 0431 10       		.uleb128 0x10
 1676 0432 4A030000 		.4byte	.LASF71
 1677 0436 05       		.byte	0x5
 1678 0437 2D01     		.2byte	0x12d
 1679 0439 34010000 		.4byte	0x134
 1680 043d 10       		.uleb128 0x10
 1681 043e BB030000 		.4byte	.LASF72
 1682 0442 05       		.byte	0x5
 1683 0443 2E01     		.2byte	0x12e
 1684 0445 34010000 		.4byte	0x134
 1685 0449 10       		.uleb128 0x10
 1686 044a 17000000 		.4byte	.LASF73
 1687 044e 05       		.byte	0x5
 1688 044f 3901     		.2byte	0x139
 1689 0451 C6000000 		.4byte	0xc6
 1690 0455 10       		.uleb128 0x10
 1691 0456 F8030000 		.4byte	.LASF74
 1692 045a 05       		.byte	0x5
 1693 045b 3A01     		.2byte	0x13a
 1694 045d C6000000 		.4byte	0xc6
 1695 0461 10       		.uleb128 0x10
 1696 0462 A9060000 		.4byte	.LASF75
 1697 0466 05       		.byte	0x5
 1698 0467 3B01     		.2byte	0x13b
 1699 0469 C6000000 		.4byte	0xc6
 1700 046d 10       		.uleb128 0x10
 1701 046e 00060000 		.4byte	.LASF76
 1702 0472 05       		.byte	0x5
 1703 0473 3C01     		.2byte	0x13c
 1704 0475 C6000000 		.4byte	0xc6
 1705 0479 0A       		.uleb128 0xa
 1706 047a 89040000 		.4byte	0x489
 1707 047e 89040000 		.4byte	0x489
 1708 0482 0B       		.uleb128 0xb
 1709 0483 4B010000 		.4byte	0x14b
 1710 0487 0B       		.byte	0xb
 1711 0488 00       		.byte	0
 1712 0489 11       		.uleb128 0x11
 1713 048a 81000000 		.4byte	0x81
 1714 048e 10       		.uleb128 0x10
 1715 048f 2F000000 		.4byte	.LASF77
 1716 0493 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 48


 1717 0494 3E01     		.2byte	0x13e
 1718 0496 9A040000 		.4byte	0x49a
 1719 049a 11       		.uleb128 0x11
 1720 049b 79040000 		.4byte	0x479
 1721 049f 10       		.uleb128 0x10
 1722 04a0 8E060000 		.4byte	.LASF78
 1723 04a4 09       		.byte	0x9
 1724 04a5 1207     		.2byte	0x712
 1725 04a7 AB040000 		.4byte	0x4ab
 1726 04ab 06       		.uleb128 0x6
 1727 04ac 76000000 		.4byte	0x76
 1728 04b0 12       		.uleb128 0x12
 1729 04b1 6F040000 		.4byte	.LASF79
 1730 04b5 0A       		.byte	0xa
 1731 04b6 25       		.byte	0x25
 1732 04b7 79030000 		.4byte	0x379
 1733 04bb 05       		.uleb128 0x5
 1734 04bc 03       		.byte	0x3
 1735 04bd 00000000 		.4byte	level_sensor_inbox
 1736 04c1 12       		.uleb128 0x12
 1737 04c2 0E020000 		.4byte	.LASF80
 1738 04c6 0A       		.byte	0xa
 1739 04c7 27       		.byte	0x27
 1740 04c8 CB020000 		.4byte	0x2cb
 1741 04cc 05       		.uleb128 0x5
 1742 04cd 03       		.byte	0x3
 1743 04ce 00000000 		.4byte	level_sensor_enabled
 1744 04d2 12       		.uleb128 0x12
 1745 04d3 70060000 		.4byte	.LASF81
 1746 04d7 0B       		.byte	0xb
 1747 04d8 0F       		.byte	0xf
 1748 04d9 79030000 		.4byte	0x379
 1749 04dd 05       		.uleb128 0x5
 1750 04de 03       		.byte	0x3
 1751 04df 00000000 		.4byte	downstream_level_sensor_inbox
 1752 04e3 12       		.uleb128 0x12
 1753 04e4 A1040000 		.4byte	.LASF82
 1754 04e8 0B       		.byte	0xb
 1755 04e9 11       		.byte	0x11
 1756 04ea CB020000 		.4byte	0x2cb
 1757 04ee 05       		.uleb128 0x5
 1758 04ef 03       		.byte	0x3
 1759 04f0 00000000 		.4byte	downstream_level_sensor_enabled
 1760 04f4 12       		.uleb128 0x12
 1761 04f5 00000000 		.4byte	.LASF83
 1762 04f9 0C       		.byte	0xc
 1763 04fa 2D       		.byte	0x2d
 1764 04fb 81000000 		.4byte	0x81
 1765 04ff 05       		.uleb128 0x5
 1766 0500 03       		.byte	0x3
 1767 0501 00000000 		.4byte	valve_enabled
 1768 0505 12       		.uleb128 0x12
 1769 0506 7E010000 		.4byte	.LASF84
 1770 050a 0C       		.byte	0xc
 1771 050b 2E       		.byte	0x2e
 1772 050c 79030000 		.4byte	0x379
 1773 0510 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 49


 1774 0511 03       		.byte	0x3
 1775 0512 00000000 		.4byte	valve_inbox
 1776 0516 12       		.uleb128 0x12
 1777 0517 49020000 		.4byte	.LASF85
 1778 051b 06       		.byte	0x6
 1779 051c 11       		.byte	0x11
 1780 051d CB020000 		.4byte	0x2cb
 1781 0521 05       		.uleb128 0x5
 1782 0522 03       		.byte	0x3
 1783 0523 00000000 		.4byte	buffer_overflow
 1784 0527 12       		.uleb128 0x12
 1785 0528 AC010000 		.4byte	.LASF86
 1786 052c 06       		.byte	0x6
 1787 052d 22       		.byte	0x22
 1788 052e 8D000000 		.4byte	0x8d
 1789 0532 05       		.uleb128 0x5
 1790 0533 03       		.byte	0x3
 1791 0534 00000000 		.4byte	dataPointsInStack
 1792 0538 12       		.uleb128 0x12
 1793 0539 E5010000 		.4byte	.LASF87
 1794 053d 06       		.byte	0x6
 1795 053e 23       		.byte	0x23
 1796 053f 8D000000 		.4byte	0x8d
 1797 0543 05       		.uleb128 0x5
 1798 0544 03       		.byte	0x3
 1799 0545 00000000 		.4byte	dataPointsInStackDesired
 1800 0549 0A       		.uleb128 0xa
 1801 054a 9F010000 		.4byte	0x19f
 1802 054e 59050000 		.4byte	0x559
 1803 0552 0B       		.uleb128 0xb
 1804 0553 4B010000 		.4byte	0x14b
 1805 0557 95       		.byte	0x95
 1806 0558 00       		.byte	0
 1807 0559 12       		.uleb128 0x12
 1808 055a 42010000 		.4byte	.LASF88
 1809 055e 06       		.byte	0x6
 1810 055f 24       		.byte	0x24
 1811 0560 49050000 		.4byte	0x549
 1812 0564 05       		.uleb128 0x5
 1813 0565 03       		.byte	0x3
 1814 0566 00000000 		.4byte	data
 1815 056a 12       		.uleb128 0x12
 1816 056b 5F030000 		.4byte	.LASF89
 1817 056f 07       		.byte	0x7
 1818 0570 20       		.byte	0x20
 1819 0571 81000000 		.4byte	0x81
 1820 0575 05       		.uleb128 0x5
 1821 0576 03       		.byte	0x3
 1822 0577 00000000 		.4byte	modem_state
 1823 057b 12       		.uleb128 0x12
 1824 057c 33030000 		.4byte	.LASF90
 1825 0580 07       		.byte	0x7
 1826 0581 6C       		.byte	0x6c
 1827 0582 A5000000 		.4byte	0xa5
 1828 0586 05       		.uleb128 0x5
 1829 0587 03       		.byte	0x3
 1830 0588 00000000 		.4byte	modem_start_time_stamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 50


 1831 058c 12       		.uleb128 0x12
 1832 058d 59020000 		.4byte	.LASF58
 1833 0591 07       		.byte	0x7
 1834 0592 6D       		.byte	0x6d
 1835 0593 D7010000 		.4byte	0x1d7
 1836 0597 05       		.uleb128 0x5
 1837 0598 03       		.byte	0x3
 1838 0599 00000000 		.4byte	modem_info
 1839 059d 12       		.uleb128 0x12
 1840 059e BC050000 		.4byte	.LASF91
 1841 05a2 07       		.byte	0x7
 1842 05a3 6E       		.byte	0x6e
 1843 05a4 4B020000 		.4byte	0x24b
 1844 05a8 05       		.uleb128 0x5
 1845 05a9 03       		.byte	0x3
 1846 05aa 00000000 		.4byte	modem_stats
 1847 05ae 12       		.uleb128 0x12
 1848 05af 0B030000 		.4byte	.LASF92
 1849 05b3 07       		.byte	0x7
 1850 05b4 6F       		.byte	0x6f
 1851 05b5 D2020000 		.4byte	0x2d2
 1852 05b9 05       		.uleb128 0x5
 1853 05ba 03       		.byte	0x3
 1854 05bb 00000000 		.4byte	updatable_parameters
 1855 05bf 12       		.uleb128 0x12
 1856 05c0 D9060000 		.4byte	.LASF93
 1857 05c4 0D       		.byte	0xd
 1858 05c5 07       		.byte	0x7
 1859 05c6 81000000 		.4byte	0x81
 1860 05ca 05       		.uleb128 0x5
 1861 05cb 03       		.byte	0x3
 1862 05cc 00000000 		.4byte	App_LED_enabled
 1863 05d0 12       		.uleb128 0x12
 1864 05d1 FD020000 		.4byte	.LASF94
 1865 05d5 0D       		.byte	0xd
 1866 05d6 08       		.byte	0x8
 1867 05d7 79030000 		.4byte	0x379
 1868 05db 05       		.uleb128 0x5
 1869 05dc 03       		.byte	0x3
 1870 05dd 00000000 		.4byte	app_led_inbox
 1871 05e1 0A       		.uleb128 0xa
 1872 05e2 BF000000 		.4byte	0xbf
 1873 05e6 F2050000 		.4byte	0x5f2
 1874 05ea 13       		.uleb128 0x13
 1875 05eb 4B010000 		.4byte	0x14b
 1876 05ef 0F27     		.2byte	0x270f
 1877 05f1 00       		.byte	0
 1878 05f2 12       		.uleb128 0x12
 1879 05f3 E9060000 		.4byte	.LASF95
 1880 05f7 08       		.byte	0x8
 1881 05f8 1A       		.byte	0x1a
 1882 05f9 E1050000 		.4byte	0x5e1
 1883 05fd 05       		.uleb128 0x5
 1884 05fe 03       		.byte	0x3
 1885 05ff 00000000 		.4byte	http_request
 1886 0603 12       		.uleb128 0x12
 1887 0604 C5060000 		.4byte	.LASF96
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 51


 1888 0608 08       		.byte	0x8
 1889 0609 1B       		.byte	0x1b
 1890 060a E1050000 		.4byte	0x5e1
 1891 060e 05       		.uleb128 0x5
 1892 060f 03       		.byte	0x3
 1893 0610 00000000 		.4byte	http_body
 1894 0614 0A       		.uleb128 0xa
 1895 0615 BF000000 		.4byte	0xbf
 1896 0619 24060000 		.4byte	0x624
 1897 061d 0B       		.uleb128 0xb
 1898 061e 4B010000 		.4byte	0x14b
 1899 0622 C7       		.byte	0xc7
 1900 0623 00       		.byte	0
 1901 0624 12       		.uleb128 0x12
 1902 0625 64050000 		.4byte	.LASF97
 1903 0629 08       		.byte	0x8
 1904 062a 1C       		.byte	0x1c
 1905 062b 14060000 		.4byte	0x614
 1906 062f 05       		.uleb128 0x5
 1907 0630 03       		.byte	0x3
 1908 0631 00000000 		.4byte	http_route
 1909 0635 12       		.uleb128 0x12
 1910 0636 82040000 		.4byte	.LASF98
 1911 063a 08       		.byte	0x8
 1912 063b 43       		.byte	0x43
 1913 063c 4D030000 		.4byte	0x34d
 1914 0640 05       		.uleb128 0x5
 1915 0641 03       		.byte	0x3
 1916 0642 00000000 		.4byte	system_info
 1917 0646 12       		.uleb128 0x12
 1918 0647 AB030000 		.4byte	.LASF99
 1919 064b 08       		.byte	0x8
 1920 064c 55       		.byte	0x55
 1921 064d 89030000 		.4byte	0x389
 1922 0651 05       		.uleb128 0x5
 1923 0652 03       		.byte	0x3
 1924 0653 00000000 		.4byte	system_settings
 1925 0657 12       		.uleb128 0x12
 1926 0658 7A020000 		.4byte	.LASF100
 1927 065c 08       		.byte	0x8
 1928 065d 71       		.byte	0x71
 1929 065e 16030000 		.4byte	0x316
 1930 0662 05       		.uleb128 0x5
 1931 0663 03       		.byte	0x3
 1932 0664 00000000 		.4byte	alarmMeasure
 1933 0668 12       		.uleb128 0x12
 1934 0669 0B040000 		.4byte	.LASF101
 1935 066d 08       		.byte	0x8
 1936 066e 72       		.byte	0x72
 1937 066f 81000000 		.4byte	0x81
 1938 0673 05       		.uleb128 0x5
 1939 0674 03       		.byte	0x3
 1940 0675 00000000 		.4byte	timeToMeasure
 1941 0679 12       		.uleb128 0x12
 1942 067a E7020000 		.4byte	.LASF102
 1943 067e 08       		.byte	0x8
 1944 067f 73       		.byte	0x73
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 52


 1945 0680 16030000 		.4byte	0x316
 1946 0684 05       		.uleb128 0x5
 1947 0685 03       		.byte	0x3
 1948 0686 00000000 		.4byte	alarmSync
 1949 068a 12       		.uleb128 0x12
 1950 068b F6060000 		.4byte	.LASF103
 1951 068f 08       		.byte	0x8
 1952 0690 74       		.byte	0x74
 1953 0691 81000000 		.4byte	0x81
 1954 0695 05       		.uleb128 0x5
 1955 0696 03       		.byte	0x3
 1956 0697 00000000 		.4byte	timeToSync
 1957 069b 12       		.uleb128 0x12
 1958 069c EA040000 		.4byte	.LASF104
 1959 06a0 08       		.byte	0x8
 1960 06a1 75       		.byte	0x75
 1961 06a2 81000000 		.4byte	0x81
 1962 06a6 05       		.uleb128 0x5
 1963 06a7 03       		.byte	0x3
 1964 06a8 00000000 		.4byte	timeToSycnRemoteParams
 1965 06ac 14       		.uleb128 0x14
 1966 06ad 68657900 		.ascii	"hey\000"
 1967 06b1 08       		.byte	0x8
 1968 06b2 76       		.byte	0x76
 1969 06b3 81000000 		.4byte	0x81
 1970 06b7 05       		.uleb128 0x5
 1971 06b8 03       		.byte	0x3
 1972 06b9 00000000 		.4byte	hey
 1973 06bd 12       		.uleb128 0x12
 1974 06be 6C010000 		.4byte	.LASF105
 1975 06c2 08       		.byte	0x8
 1976 06c3 7A       		.byte	0x7a
 1977 06c4 16030000 		.4byte	0x316
 1978 06c8 05       		.uleb128 0x5
 1979 06c9 03       		.byte	0x3
 1980 06ca 00000000 		.4byte	alarmAppLED
 1981 06ce 12       		.uleb128 0x12
 1982 06cf 1B060000 		.4byte	.LASF106
 1983 06d3 08       		.byte	0x8
 1984 06d4 7B       		.byte	0x7b
 1985 06d5 81000000 		.4byte	0x81
 1986 06d9 05       		.uleb128 0x5
 1987 06da 03       		.byte	0x3
 1988 06db 00000000 		.4byte	timeToAppLED
 1989 06df 12       		.uleb128 0x12
 1990 06e0 C8050000 		.4byte	.LASF107
 1991 06e4 08       		.byte	0x8
 1992 06e5 7D       		.byte	0x7d
 1993 06e6 16030000 		.4byte	0x316
 1994 06ea 05       		.uleb128 0x5
 1995 06eb 03       		.byte	0x3
 1996 06ec 00000000 		.4byte	alarmLevelSensor
 1997 06f0 12       		.uleb128 0x12
 1998 06f1 49060000 		.4byte	.LASF108
 1999 06f5 08       		.byte	0x8
 2000 06f6 7E       		.byte	0x7e
 2001 06f7 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 53


 2002 06fb 05       		.uleb128 0x5
 2003 06fc 03       		.byte	0x3
 2004 06fd 00000000 		.4byte	timetoLevelSensor
 2005 0701 12       		.uleb128 0x12
 2006 0702 91010000 		.4byte	.LASF109
 2007 0706 08       		.byte	0x8
 2008 0707 80       		.byte	0x80
 2009 0708 16030000 		.4byte	0x316
 2010 070c 05       		.uleb128 0x5
 2011 070d 03       		.byte	0x3
 2012 070e 00000000 		.4byte	alarmDownstreamLevelSensor
 2013 0712 12       		.uleb128 0x12
 2014 0713 8C020000 		.4byte	.LASF110
 2015 0717 08       		.byte	0x8
 2016 0718 81       		.byte	0x81
 2017 0719 81000000 		.4byte	0x81
 2018 071d 05       		.uleb128 0x5
 2019 071e 03       		.byte	0x3
 2020 071f 00000000 		.4byte	timetoDownstreamLevelSensor
 2021 0723 12       		.uleb128 0x12
 2022 0724 21050000 		.4byte	.LASF111
 2023 0728 08       		.byte	0x8
 2024 0729 83       		.byte	0x83
 2025 072a 16030000 		.4byte	0x316
 2026 072e 05       		.uleb128 0x5
 2027 072f 03       		.byte	0x3
 2028 0730 00000000 		.4byte	alarmValve
 2029 0734 12       		.uleb128 0x12
 2030 0735 C4010000 		.4byte	.LASF112
 2031 0739 08       		.byte	0x8
 2032 073a 84       		.byte	0x84
 2033 073b 81000000 		.4byte	0x81
 2034 073f 05       		.uleb128 0x5
 2035 0740 03       		.byte	0x3
 2036 0741 00000000 		.4byte	timeToValve
 2037 0745 00       		.byte	0
 2038              		.section	.debug_abbrev,"",%progbits
 2039              	.Ldebug_abbrev0:
 2040 0000 01       		.uleb128 0x1
 2041 0001 11       		.uleb128 0x11
 2042 0002 01       		.byte	0x1
 2043 0003 25       		.uleb128 0x25
 2044 0004 0E       		.uleb128 0xe
 2045 0005 13       		.uleb128 0x13
 2046 0006 0B       		.uleb128 0xb
 2047 0007 03       		.uleb128 0x3
 2048 0008 0E       		.uleb128 0xe
 2049 0009 1B       		.uleb128 0x1b
 2050 000a 0E       		.uleb128 0xe
 2051 000b 55       		.uleb128 0x55
 2052 000c 17       		.uleb128 0x17
 2053 000d 11       		.uleb128 0x11
 2054 000e 01       		.uleb128 0x1
 2055 000f 10       		.uleb128 0x10
 2056 0010 17       		.uleb128 0x17
 2057 0011 00       		.byte	0
 2058 0012 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 54


 2059 0013 02       		.uleb128 0x2
 2060 0014 24       		.uleb128 0x24
 2061 0015 00       		.byte	0
 2062 0016 0B       		.uleb128 0xb
 2063 0017 0B       		.uleb128 0xb
 2064 0018 3E       		.uleb128 0x3e
 2065 0019 0B       		.uleb128 0xb
 2066 001a 03       		.uleb128 0x3
 2067 001b 0E       		.uleb128 0xe
 2068 001c 00       		.byte	0
 2069 001d 00       		.byte	0
 2070 001e 03       		.uleb128 0x3
 2071 001f 16       		.uleb128 0x16
 2072 0020 00       		.byte	0
 2073 0021 03       		.uleb128 0x3
 2074 0022 0E       		.uleb128 0xe
 2075 0023 3A       		.uleb128 0x3a
 2076 0024 0B       		.uleb128 0xb
 2077 0025 3B       		.uleb128 0x3b
 2078 0026 0B       		.uleb128 0xb
 2079 0027 49       		.uleb128 0x49
 2080 0028 13       		.uleb128 0x13
 2081 0029 00       		.byte	0
 2082 002a 00       		.byte	0
 2083 002b 04       		.uleb128 0x4
 2084 002c 24       		.uleb128 0x24
 2085 002d 00       		.byte	0
 2086 002e 0B       		.uleb128 0xb
 2087 002f 0B       		.uleb128 0xb
 2088 0030 3E       		.uleb128 0x3e
 2089 0031 0B       		.uleb128 0xb
 2090 0032 03       		.uleb128 0x3
 2091 0033 08       		.uleb128 0x8
 2092 0034 00       		.byte	0
 2093 0035 00       		.byte	0
 2094 0036 05       		.uleb128 0x5
 2095 0037 16       		.uleb128 0x16
 2096 0038 00       		.byte	0
 2097 0039 03       		.uleb128 0x3
 2098 003a 0E       		.uleb128 0xe
 2099 003b 3A       		.uleb128 0x3a
 2100 003c 0B       		.uleb128 0xb
 2101 003d 3B       		.uleb128 0x3b
 2102 003e 05       		.uleb128 0x5
 2103 003f 49       		.uleb128 0x49
 2104 0040 13       		.uleb128 0x13
 2105 0041 00       		.byte	0
 2106 0042 00       		.byte	0
 2107 0043 06       		.uleb128 0x6
 2108 0044 35       		.uleb128 0x35
 2109 0045 00       		.byte	0
 2110 0046 49       		.uleb128 0x49
 2111 0047 13       		.uleb128 0x13
 2112 0048 00       		.byte	0
 2113 0049 00       		.byte	0
 2114 004a 07       		.uleb128 0x7
 2115 004b 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 55


 2116 004c 01       		.byte	0x1
 2117 004d 0B       		.uleb128 0xb
 2118 004e 0B       		.uleb128 0xb
 2119 004f 3A       		.uleb128 0x3a
 2120 0050 0B       		.uleb128 0xb
 2121 0051 3B       		.uleb128 0x3b
 2122 0052 0B       		.uleb128 0xb
 2123 0053 01       		.uleb128 0x1
 2124 0054 13       		.uleb128 0x13
 2125 0055 00       		.byte	0
 2126 0056 00       		.byte	0
 2127 0057 08       		.uleb128 0x8
 2128 0058 0D       		.uleb128 0xd
 2129 0059 00       		.byte	0
 2130 005a 03       		.uleb128 0x3
 2131 005b 08       		.uleb128 0x8
 2132 005c 3A       		.uleb128 0x3a
 2133 005d 0B       		.uleb128 0xb
 2134 005e 3B       		.uleb128 0x3b
 2135 005f 0B       		.uleb128 0xb
 2136 0060 49       		.uleb128 0x49
 2137 0061 13       		.uleb128 0x13
 2138 0062 38       		.uleb128 0x38
 2139 0063 0B       		.uleb128 0xb
 2140 0064 00       		.byte	0
 2141 0065 00       		.byte	0
 2142 0066 09       		.uleb128 0x9
 2143 0067 0D       		.uleb128 0xd
 2144 0068 00       		.byte	0
 2145 0069 03       		.uleb128 0x3
 2146 006a 0E       		.uleb128 0xe
 2147 006b 3A       		.uleb128 0x3a
 2148 006c 0B       		.uleb128 0xb
 2149 006d 3B       		.uleb128 0x3b
 2150 006e 0B       		.uleb128 0xb
 2151 006f 49       		.uleb128 0x49
 2152 0070 13       		.uleb128 0x13
 2153 0071 38       		.uleb128 0x38
 2154 0072 0B       		.uleb128 0xb
 2155 0073 00       		.byte	0
 2156 0074 00       		.byte	0
 2157 0075 0A       		.uleb128 0xa
 2158 0076 01       		.uleb128 0x1
 2159 0077 01       		.byte	0x1
 2160 0078 49       		.uleb128 0x49
 2161 0079 13       		.uleb128 0x13
 2162 007a 01       		.uleb128 0x1
 2163 007b 13       		.uleb128 0x13
 2164 007c 00       		.byte	0
 2165 007d 00       		.byte	0
 2166 007e 0B       		.uleb128 0xb
 2167 007f 21       		.uleb128 0x21
 2168 0080 00       		.byte	0
 2169 0081 49       		.uleb128 0x49
 2170 0082 13       		.uleb128 0x13
 2171 0083 2F       		.uleb128 0x2f
 2172 0084 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 56


 2173 0085 00       		.byte	0
 2174 0086 00       		.byte	0
 2175 0087 0C       		.uleb128 0xc
 2176 0088 0F       		.uleb128 0xf
 2177 0089 00       		.byte	0
 2178 008a 0B       		.uleb128 0xb
 2179 008b 0B       		.uleb128 0xb
 2180 008c 49       		.uleb128 0x49
 2181 008d 13       		.uleb128 0x13
 2182 008e 00       		.byte	0
 2183 008f 00       		.byte	0
 2184 0090 0D       		.uleb128 0xd
 2185 0091 2E       		.uleb128 0x2e
 2186 0092 00       		.byte	0
 2187 0093 03       		.uleb128 0x3
 2188 0094 0E       		.uleb128 0xe
 2189 0095 3A       		.uleb128 0x3a
 2190 0096 0B       		.uleb128 0xb
 2191 0097 3B       		.uleb128 0x3b
 2192 0098 0B       		.uleb128 0xb
 2193 0099 27       		.uleb128 0x27
 2194 009a 19       		.uleb128 0x19
 2195 009b 11       		.uleb128 0x11
 2196 009c 01       		.uleb128 0x1
 2197 009d 12       		.uleb128 0x12
 2198 009e 06       		.uleb128 0x6
 2199 009f 40       		.uleb128 0x40
 2200 00a0 18       		.uleb128 0x18
 2201 00a1 9642     		.uleb128 0x2116
 2202 00a3 19       		.uleb128 0x19
 2203 00a4 00       		.byte	0
 2204 00a5 00       		.byte	0
 2205 00a6 0E       		.uleb128 0xe
 2206 00a7 2E       		.uleb128 0x2e
 2207 00a8 01       		.byte	0x1
 2208 00a9 3F       		.uleb128 0x3f
 2209 00aa 19       		.uleb128 0x19
 2210 00ab 03       		.uleb128 0x3
 2211 00ac 0E       		.uleb128 0xe
 2212 00ad 3A       		.uleb128 0x3a
 2213 00ae 0B       		.uleb128 0xb
 2214 00af 3B       		.uleb128 0x3b
 2215 00b0 05       		.uleb128 0x5
 2216 00b1 27       		.uleb128 0x27
 2217 00b2 19       		.uleb128 0x19
 2218 00b3 11       		.uleb128 0x11
 2219 00b4 01       		.uleb128 0x1
 2220 00b5 12       		.uleb128 0x12
 2221 00b6 06       		.uleb128 0x6
 2222 00b7 40       		.uleb128 0x40
 2223 00b8 18       		.uleb128 0x18
 2224 00b9 9642     		.uleb128 0x2116
 2225 00bb 19       		.uleb128 0x19
 2226 00bc 01       		.uleb128 0x1
 2227 00bd 13       		.uleb128 0x13
 2228 00be 00       		.byte	0
 2229 00bf 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 57


 2230 00c0 0F       		.uleb128 0xf
 2231 00c1 34       		.uleb128 0x34
 2232 00c2 00       		.byte	0
 2233 00c3 03       		.uleb128 0x3
 2234 00c4 0E       		.uleb128 0xe
 2235 00c5 3A       		.uleb128 0x3a
 2236 00c6 0B       		.uleb128 0xb
 2237 00c7 3B       		.uleb128 0x3b
 2238 00c8 05       		.uleb128 0x5
 2239 00c9 49       		.uleb128 0x49
 2240 00ca 13       		.uleb128 0x13
 2241 00cb 02       		.uleb128 0x2
 2242 00cc 18       		.uleb128 0x18
 2243 00cd 00       		.byte	0
 2244 00ce 00       		.byte	0
 2245 00cf 10       		.uleb128 0x10
 2246 00d0 34       		.uleb128 0x34
 2247 00d1 00       		.byte	0
 2248 00d2 03       		.uleb128 0x3
 2249 00d3 0E       		.uleb128 0xe
 2250 00d4 3A       		.uleb128 0x3a
 2251 00d5 0B       		.uleb128 0xb
 2252 00d6 3B       		.uleb128 0x3b
 2253 00d7 05       		.uleb128 0x5
 2254 00d8 49       		.uleb128 0x49
 2255 00d9 13       		.uleb128 0x13
 2256 00da 3F       		.uleb128 0x3f
 2257 00db 19       		.uleb128 0x19
 2258 00dc 3C       		.uleb128 0x3c
 2259 00dd 19       		.uleb128 0x19
 2260 00de 00       		.byte	0
 2261 00df 00       		.byte	0
 2262 00e0 11       		.uleb128 0x11
 2263 00e1 26       		.uleb128 0x26
 2264 00e2 00       		.byte	0
 2265 00e3 49       		.uleb128 0x49
 2266 00e4 13       		.uleb128 0x13
 2267 00e5 00       		.byte	0
 2268 00e6 00       		.byte	0
 2269 00e7 12       		.uleb128 0x12
 2270 00e8 34       		.uleb128 0x34
 2271 00e9 00       		.byte	0
 2272 00ea 03       		.uleb128 0x3
 2273 00eb 0E       		.uleb128 0xe
 2274 00ec 3A       		.uleb128 0x3a
 2275 00ed 0B       		.uleb128 0xb
 2276 00ee 3B       		.uleb128 0x3b
 2277 00ef 0B       		.uleb128 0xb
 2278 00f0 49       		.uleb128 0x49
 2279 00f1 13       		.uleb128 0x13
 2280 00f2 3F       		.uleb128 0x3f
 2281 00f3 19       		.uleb128 0x19
 2282 00f4 02       		.uleb128 0x2
 2283 00f5 18       		.uleb128 0x18
 2284 00f6 00       		.byte	0
 2285 00f7 00       		.byte	0
 2286 00f8 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 58


 2287 00f9 21       		.uleb128 0x21
 2288 00fa 00       		.byte	0
 2289 00fb 49       		.uleb128 0x49
 2290 00fc 13       		.uleb128 0x13
 2291 00fd 2F       		.uleb128 0x2f
 2292 00fe 05       		.uleb128 0x5
 2293 00ff 00       		.byte	0
 2294 0100 00       		.byte	0
 2295 0101 14       		.uleb128 0x14
 2296 0102 34       		.uleb128 0x34
 2297 0103 00       		.byte	0
 2298 0104 03       		.uleb128 0x3
 2299 0105 08       		.uleb128 0x8
 2300 0106 3A       		.uleb128 0x3a
 2301 0107 0B       		.uleb128 0xb
 2302 0108 3B       		.uleb128 0x3b
 2303 0109 0B       		.uleb128 0xb
 2304 010a 49       		.uleb128 0x49
 2305 010b 13       		.uleb128 0x13
 2306 010c 3F       		.uleb128 0x3f
 2307 010d 19       		.uleb128 0x19
 2308 010e 02       		.uleb128 0x2
 2309 010f 18       		.uleb128 0x18
 2310 0110 00       		.byte	0
 2311 0111 00       		.byte	0
 2312 0112 00       		.byte	0
 2313              		.section	.debug_aranges,"",%progbits
 2314 0000 54000000 		.4byte	0x54
 2315 0004 0200     		.2byte	0x2
 2316 0006 00000000 		.4byte	.Ldebug_info0
 2317 000a 04       		.byte	0x4
 2318 000b 00       		.byte	0
 2319 000c 0000     		.2byte	0
 2320 000e 0000     		.2byte	0
 2321 0010 00000000 		.4byte	.LFB64
 2322 0014 0E000000 		.4byte	.LFE64-.LFB64
 2323 0018 00000000 		.4byte	.LFB65
 2324 001c 0E000000 		.4byte	.LFE65-.LFB65
 2325 0020 00000000 		.4byte	.LFB66
 2326 0024 0E000000 		.4byte	.LFE66-.LFB66
 2327 0028 00000000 		.4byte	.LFB67
 2328 002c 0E000000 		.4byte	.LFE67-.LFB67
 2329 0030 00000000 		.4byte	.LFB68
 2330 0034 0E000000 		.4byte	.LFE68-.LFB68
 2331 0038 00000000 		.4byte	.LFB69
 2332 003c 0E000000 		.4byte	.LFE69-.LFB69
 2333 0040 00000000 		.4byte	.LFB70
 2334 0044 0E000000 		.4byte	.LFE70-.LFB70
 2335 0048 00000000 		.4byte	.LFB71
 2336 004c 18060000 		.4byte	.LFE71-.LFB71
 2337 0050 00000000 		.4byte	0
 2338 0054 00000000 		.4byte	0
 2339              		.section	.debug_ranges,"",%progbits
 2340              	.Ldebug_ranges0:
 2341 0000 00000000 		.4byte	.LFB64
 2342 0004 0E000000 		.4byte	.LFE64
 2343 0008 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 59


 2344 000c 0E000000 		.4byte	.LFE65
 2345 0010 00000000 		.4byte	.LFB66
 2346 0014 0E000000 		.4byte	.LFE66
 2347 0018 00000000 		.4byte	.LFB67
 2348 001c 0E000000 		.4byte	.LFE67
 2349 0020 00000000 		.4byte	.LFB68
 2350 0024 0E000000 		.4byte	.LFE68
 2351 0028 00000000 		.4byte	.LFB69
 2352 002c 0E000000 		.4byte	.LFE69
 2353 0030 00000000 		.4byte	.LFB70
 2354 0034 0E000000 		.4byte	.LFE70
 2355 0038 00000000 		.4byte	.LFB71
 2356 003c 18060000 		.4byte	.LFE71
 2357 0040 00000000 		.4byte	0
 2358 0044 00000000 		.4byte	0
 2359              		.section	.debug_line,"",%progbits
 2360              	.Ldebug_line0:
 2361 0000 31030000 		.section	.debug_str,"MS",%progbits,1
 2361      0200D001 
 2361      00000201 
 2361      FB0E0D00 
 2361      01010101 
 2362              	.LASF83:
 2363 0000 76616C76 		.ascii	"valve_enabled\000"
 2363      655F656E 
 2363      61626C65 
 2363      6400
 2364              	.LASF31:
 2365 000e 6D6F6465 		.ascii	"model_id\000"
 2365      6C5F6964 
 2365      00
 2366              	.LASF73:
 2367 0017 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2367      616C6172 
 2367      6D436667 
 2367      4D61736B 
 2367      00
 2368              	.LASF30:
 2369 0028 73696D5F 		.ascii	"sim_id\000"
 2369      696400
 2370              	.LASF77:
 2371 002f 5254435F 		.ascii	"RTC_daysInMonths\000"
 2371      64617973 
 2371      496E4D6F 
 2371      6E746873 
 2371      00
 2372              	.LASF63:
 2373 0040 7379735F 		.ascii	"sys_settings_t\000"
 2373      73657474 
 2373      696E6773 
 2373      5F7400
 2374              	.LASF54:
 2375 004f 63757272 		.ascii	"currentCountDownValue\000"
 2375      656E7443 
 2375      6F756E74 
 2375      446F776E 
 2375      56616C75 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 60


 2376              	.LASF53:
 2377 0065 636F756E 		.ascii	"countDownValue\000"
 2377      74446F77 
 2377      6E56616C 
 2377      756500
 2378              	.LASF2:
 2379 0074 73686F72 		.ascii	"short int\000"
 2379      7420696E 
 2379      7400
 2380              	.LASF26:
 2381 007e 73697A65 		.ascii	"sizetype\000"
 2381      74797065 
 2381      00
 2382              	.LASF50:
 2383 0087 76616C76 		.ascii	"valve_freq\000"
 2383      655F6672 
 2383      657100
 2384              	.LASF61:
 2385 0092 65705F68 		.ascii	"ep_host\000"
 2385      6F737400 
 2386              	.LASF37:
 2387 009a 72737271 		.ascii	"rsrq\000"
 2387      00
 2388              	.LASF113:
 2389 009f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2389      43313120 
 2389      352E342E 
 2389      31203230 
 2389      31363036 
 2390 00d2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2390      20726576 
 2390      6973696F 
 2390      6E203233 
 2390      37373135 
 2391 0105 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2391      66756E63 
 2391      74696F6E 
 2391      2D736563 
 2391      74696F6E 
 2392              	.LASF68:
 2393 012d 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 2393      45766572 
 2393      79576565 
 2393      6B48616E 
 2393      646C6572 
 2394              	.LASF88:
 2395 0142 64617461 		.ascii	"data\000"
 2395      00
 2396              	.LASF47:
 2397 0147 4170705F 		.ascii	"App_LED_freq\000"
 2397      4C45445F 
 2397      66726571 
 2397      00
 2398              	.LASF18:
 2399 0154 486F7572 		.ascii	"Hour\000"
 2399      00
 2400              	.LASF59:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 61


 2401 0159 63686970 		.ascii	"chip_uniqueId\000"
 2401      5F756E69 
 2401      71756549 
 2401      6400
 2402              	.LASF36:
 2403 0167 65636E6F 		.ascii	"ecno\000"
 2403      00
 2404              	.LASF105:
 2405 016c 616C6172 		.ascii	"alarmAppLED\000"
 2405      6D417070 
 2405      4C454400 
 2406              	.LASF27:
 2407 0178 76616C75 		.ascii	"value\000"
 2407      6500
 2408              	.LASF84:
 2409 017e 76616C76 		.ascii	"valve_inbox\000"
 2409      655F696E 
 2409      626F7800 
 2410              	.LASF12:
 2411 018a 75696E74 		.ascii	"uint16\000"
 2411      313600
 2412              	.LASF109:
 2413 0191 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 2413      6D446F77 
 2413      6E737472 
 2413      65616D4C 
 2413      6576656C 
 2414              	.LASF86:
 2415 01ac 64617461 		.ascii	"dataPointsInStack\000"
 2415      506F696E 
 2415      7473496E 
 2415      53746163 
 2415      6B00
 2416              	.LASF11:
 2417 01be 75696E74 		.ascii	"uint8\000"
 2417      3800
 2418              	.LASF112:
 2419 01c4 74696D65 		.ascii	"timeToValve\000"
 2419      546F5661 
 2419      6C766500 
 2420              	.LASF35:
 2421 01d0 72736370 		.ascii	"rscp\000"
 2421      00
 2422              	.LASF13:
 2423 01d5 696E7431 		.ascii	"int16\000"
 2423      3600
 2424              	.LASF28:
 2425 01db 74696D65 		.ascii	"timeStamp\000"
 2425      5374616D 
 2425      7000
 2426              	.LASF87:
 2427 01e5 64617461 		.ascii	"dataPointsInStackDesired\000"
 2427      506F696E 
 2427      7473496E 
 2427      53746163 
 2427      6B446573 
 2428              	.LASF15:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 62


 2429 01fe 666C6F61 		.ascii	"float\000"
 2429      7400
 2430              	.LASF19:
 2431 0204 4461794F 		.ascii	"DayOfWeek\000"
 2431      66576565 
 2431      6B00
 2432              	.LASF80:
 2433 020e 6C657665 		.ascii	"level_sensor_enabled\000"
 2433      6C5F7365 
 2433      6E736F72 
 2433      5F656E61 
 2433      626C6564 
 2434              	.LASF6:
 2435 0223 6C6F6E67 		.ascii	"long long int\000"
 2435      206C6F6E 
 2435      6720696E 
 2435      7400
 2436              	.LASF9:
 2437 0231 5F5F696E 		.ascii	"__int32_t\000"
 2437      7433325F 
 2437      7400
 2438              	.LASF17:
 2439 023b 63686172 		.ascii	"char\000"
 2439      00
 2440              	.LASF4:
 2441 0240 6C6F6E67 		.ascii	"long int\000"
 2441      20696E74 
 2441      00
 2442              	.LASF85:
 2443 0249 62756666 		.ascii	"buffer_overflow\000"
 2443      65725F6F 
 2443      76657266 
 2443      6C6F7700 
 2444              	.LASF58:
 2445 0259 6D6F6465 		.ascii	"modem_info\000"
 2445      6D5F696E 
 2445      666F00
 2446              	.LASF69:
 2447 0264 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2447      45766572 
 2447      794D6F6E 
 2447      74684861 
 2447      6E646C65 
 2448              	.LASF100:
 2449 027a 616C6172 		.ascii	"alarmMeasure\000"
 2449      6D4D6561 
 2449      73757265 
 2449      00
 2450              	.LASF23:
 2451 0287 59656172 		.ascii	"Year\000"
 2451      00
 2452              	.LASF110:
 2453 028c 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 2453      746F446F 
 2453      776E7374 
 2453      7265616D 
 2453      4C657665 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 63


 2454              	.LASF22:
 2455 02a8 4D6F6E74 		.ascii	"Month\000"
 2455      6800
 2456              	.LASF67:
 2457 02ae 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2457      45766572 
 2457      79446179 
 2457      48616E64 
 2457      6C657200 
 2458              	.LASF57:
 2459 02c2 616C6172 		.ascii	"alarm\000"
 2459      6D00
 2460              	.LASF44:
 2461 02c8 6D656173 		.ascii	"measure_time\000"
 2461      7572655F 
 2461      74696D65 
 2461      00
 2462              	.LASF48:
 2463 02d5 4C657665 		.ascii	"Level_Sensor_freq\000"
 2463      6C5F5365 
 2463      6E736F72 
 2463      5F667265 
 2463      7100
 2464              	.LASF102:
 2465 02e7 616C6172 		.ascii	"alarmSync\000"
 2465      6D53796E 
 2465      6300
 2466              	.LASF25:
 2467 02f1 6C6F6E67 		.ascii	"long double\000"
 2467      20646F75 
 2467      626C6500 
 2468              	.LASF94:
 2469 02fd 6170705F 		.ascii	"app_led_inbox\000"
 2469      6C65645F 
 2469      696E626F 
 2469      7800
 2470              	.LASF92:
 2471 030b 75706461 		.ascii	"updatable_parameters\000"
 2471      7461626C 
 2471      655F7061 
 2471      72616D65 
 2471      74657273 
 2472              	.LASF1:
 2473 0320 756E7369 		.ascii	"unsigned char\000"
 2473      676E6564 
 2473      20636861 
 2473      7200
 2474              	.LASF38:
 2475 032e 72737270 		.ascii	"rsrp\000"
 2475      00
 2476              	.LASF90:
 2477 0333 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2477      6D5F7374 
 2477      6172745F 
 2477      74696D65 
 2477      5F737461 
 2478              	.LASF71:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 64


 2479 034a 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2479      616C6172 
 2479      6D436667 
 2479      54696D65 
 2479      44617465 
 2480              	.LASF89:
 2481 035f 6D6F6465 		.ascii	"modem_state\000"
 2481      6D5F7374 
 2481      61746500 
 2482              	.LASF0:
 2483 036b 7369676E 		.ascii	"signed char\000"
 2483      65642063 
 2483      68617200 
 2484              	.LASF49:
 2485 0377 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 2485      73747265 
 2485      616D5F4C 
 2485      6576656C 
 2485      5F53656E 
 2486              	.LASF7:
 2487 0394 6C6F6E67 		.ascii	"long long unsigned int\000"
 2487      206C6F6E 
 2487      6720756E 
 2487      7369676E 
 2487      65642069 
 2488              	.LASF99:
 2489 03ab 73797374 		.ascii	"system_settings\000"
 2489      656D5F73 
 2489      65747469 
 2489      6E677300 
 2490              	.LASF72:
 2491 03bb 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2491      63757272 
 2491      656E7454 
 2491      696D6544 
 2491      61746500 
 2492              	.LASF8:
 2493 03cf 756E7369 		.ascii	"unsigned int\000"
 2493      676E6564 
 2493      20696E74 
 2493      00
 2494              	.LASF29:
 2495 03dc 6B65795F 		.ascii	"key_value_t\000"
 2495      76616C75 
 2495      655F7400 
 2496              	.LASF34:
 2497 03e8 72786C65 		.ascii	"rxlev\000"
 2497      7600
 2498              	.LASF45:
 2499 03ee 73796E63 		.ascii	"sync_time\000"
 2499      5F74696D 
 2499      6500
 2500              	.LASF74:
 2501 03f8 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2501      616C6172 
 2501      6D437572 
 2501      53746174 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 65


 2501      757300
 2502              	.LASF101:
 2503 040b 74696D65 		.ascii	"timeToMeasure\000"
 2503      546F4D65 
 2503      61737572 
 2503      6500
 2504              	.LASF52:
 2505 0419 75706461 		.ascii	"updatable_parameters_t\000"
 2505      7461626C 
 2505      655F7061 
 2505      72616D65 
 2505      74657273 
 2506              	.LASF43:
 2507 0430 73696D5F 		.ascii	"sim_type\000"
 2507      74797065 
 2507      00
 2508              	.LASF60:
 2509 0439 7379735F 		.ascii	"sys_info_t\000"
 2509      696E666F 
 2509      5F7400
 2510              	.LASF3:
 2511 0444 73686F72 		.ascii	"short unsigned int\000"
 2511      7420756E 
 2511      7369676E 
 2511      65642069 
 2511      6E7400
 2512              	.LASF39:
 2513 0457 74696D65 		.ascii	"time_to_network_connect\000"
 2513      5F746F5F 
 2513      6E657477 
 2513      6F726B5F 
 2513      636F6E6E 
 2514              	.LASF79:
 2515 046f 6C657665 		.ascii	"level_sensor_inbox\000"
 2515      6C5F7365 
 2515      6E736F72 
 2515      5F696E62 
 2515      6F7800
 2516              	.LASF98:
 2517 0482 73797374 		.ascii	"system_info\000"
 2517      656D5F69 
 2517      6E666F00 
 2518              	.LASF40:
 2519 048e 74696D65 		.ascii	"time_to_acquire_ip\000"
 2519      5F746F5F 
 2519      61637175 
 2519      6972655F 
 2519      697000
 2520              	.LASF82:
 2521 04a1 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 2521      73747265 
 2521      616D5F6C 
 2521      6576656C 
 2521      5F73656E 
 2522              	.LASF32:
 2523 04c1 696D6569 		.ascii	"imei\000"
 2523      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 66


 2524              	.LASF10:
 2525 04c6 696E7433 		.ascii	"int32_t\000"
 2525      325F7400 
 2526              	.LASF117:
 2527 04ce 5254435F 		.ascii	"RTC_tmp\000"
 2527      746D7000 
 2528              	.LASF41:
 2529 04d6 6D6F6465 		.ascii	"modem_stats_t\000"
 2529      6D5F7374 
 2529      6174735F 
 2529      7400
 2530              	.LASF51:
 2531 04e4 5F426F6F 		.ascii	"_Bool\000"
 2531      6C00
 2532              	.LASF104:
 2533 04ea 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2533      546F5379 
 2533      636E5265 
 2533      6D6F7465 
 2533      50617261 
 2534              	.LASF66:
 2535 0501 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2535      45766572 
 2535      79486F75 
 2535      7248616E 
 2535      646C6572 
 2536              	.LASF20:
 2537 0516 4461794F 		.ascii	"DayOfMonth\000"
 2537      664D6F6E 
 2537      746800
 2538              	.LASF111:
 2539 0521 616C6172 		.ascii	"alarmValve\000"
 2539      6D56616C 
 2539      766500
 2540              	.LASF115:
 2541 052c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2541      73657273 
 2541      5C64616E 
 2541      747A5C44 
 2541      6F63756D 
 2542 0559 72694F53 		.ascii	"riOS.cydsn\000"
 2542      2E637964 
 2542      736E00
 2543              	.LASF97:
 2544 0564 68747470 		.ascii	"http_route\000"
 2544      5F726F75 
 2544      746500
 2545              	.LASF65:
 2546 056f 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2546      45766572 
 2546      794D696E 
 2546      75746548 
 2546      616E646C 
 2547              	.LASF5:
 2548 0586 6C6F6E67 		.ascii	"long unsigned int\000"
 2548      20756E73 
 2548      69676E65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 67


 2548      6420696E 
 2548      7400
 2549              	.LASF14:
 2550 0598 696E7433 		.ascii	"int32\000"
 2550      3200
 2551              	.LASF16:
 2552 059e 646F7562 		.ascii	"double\000"
 2552      6C6500
 2553              	.LASF64:
 2554 05a5 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2554      45766572 
 2554      79536563 
 2554      6F6E6448 
 2554      616E646C 
 2555              	.LASF91:
 2556 05bc 6D6F6465 		.ascii	"modem_stats\000"
 2556      6D5F7374 
 2556      61747300 
 2557              	.LASF107:
 2558 05c8 616C6172 		.ascii	"alarmLevelSensor\000"
 2558      6D4C6576 
 2558      656C5365 
 2558      6E736F72 
 2558      00
 2559              	.LASF46:
 2560 05d9 64656275 		.ascii	"debug_level\000"
 2560      675F6C65 
 2560      76656C00 
 2561              	.LASF33:
 2562 05e5 6D6F6465 		.ascii	"modem_info_t\000"
 2562      6D5F696E 
 2562      666F5F74 
 2562      00
 2563              	.LASF55:
 2564 05f2 636F756E 		.ascii	"countDownType\000"
 2564      74446F77 
 2564      6E547970 
 2564      6500
 2565              	.LASF76:
 2566 0600 5254435F 		.ascii	"RTC_statusDateTime\000"
 2566      73746174 
 2566      75734461 
 2566      74655469 
 2566      6D6500
 2567              	.LASF62:
 2568 0613 65705F70 		.ascii	"ep_port\000"
 2568      6F727400 
 2569              	.LASF106:
 2570 061b 74696D65 		.ascii	"timeToAppLED\000"
 2570      546F4170 
 2570      704C4544 
 2570      00
 2571              	.LASF114:
 2572 0628 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2572      72617465 
 2572      645F536F 
 2572      75726365 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 68


 2572      5C50536F 
 2573              	.LASF108:
 2574 0649 74696D65 		.ascii	"timetoLevelSensor\000"
 2574      746F4C65 
 2574      76656C53 
 2574      656E736F 
 2574      7200
 2575              	.LASF70:
 2576 065b 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2576      45766572 
 2576      79596561 
 2576      7248616E 
 2576      646C6572 
 2577              	.LASF81:
 2578 0670 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 2578      73747265 
 2578      616D5F6C 
 2578      6576656C 
 2578      5F73656E 
 2579              	.LASF78:
 2580 068e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2580      52784275 
 2580      66666572 
 2580      00
 2581              	.LASF24:
 2582 069b 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2582      54494D45 
 2582      5F444154 
 2582      4500
 2583              	.LASF75:
 2584 06a9 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2584      696E7465 
 2584      7276616C 
 2584      4366674D 
 2584      61736B00 
 2585              	.LASF116:
 2586 06bd 5254435F 		.ascii	"RTC_ISR\000"
 2586      49535200 
 2587              	.LASF96:
 2588 06c5 68747470 		.ascii	"http_body\000"
 2588      5F626F64 
 2588      7900
 2589              	.LASF42:
 2590 06cf 6E6F6465 		.ascii	"node_type\000"
 2590      5F747970 
 2590      6500
 2591              	.LASF93:
 2592 06d9 4170705F 		.ascii	"App_LED_enabled\000"
 2592      4C45445F 
 2592      656E6162 
 2592      6C656400 
 2593              	.LASF95:
 2594 06e9 68747470 		.ascii	"http_request\000"
 2594      5F726571 
 2594      75657374 
 2594      00
 2595              	.LASF103:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccNae5nr.s 			page 69


 2596 06f6 74696D65 		.ascii	"timeToSync\000"
 2596      546F5379 
 2596      6E6300
 2597              	.LASF56:
 2598 0701 636F756E 		.ascii	"countDownResetCondition\000"
 2598      74446F77 
 2598      6E526573 
 2598      6574436F 
 2598      6E646974 
 2599              	.LASF21:
 2600 0719 4461794F 		.ascii	"DayOfYear\000"
 2600      66596561 
 2600      7200
 2601              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
