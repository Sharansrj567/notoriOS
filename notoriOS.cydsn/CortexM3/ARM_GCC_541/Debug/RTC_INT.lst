ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,7,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  50              		.align	2
  51              		.thumb
  52              		.thumb_func
  53              		.type	RTC_EverySecondHandler, %function
  54              	RTC_EverySecondHandler:
  55              	.LFB64:
  56              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 2


   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  57              		.loc 1 55 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 3


  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61 0000 80B5     		push	{r7, lr}
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 00AF     		add	r7, sp, #0
  66              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  67              		.loc 1 58 0
  68 0004 0020     		movs	r0, #0
  69 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  70              		.loc 1 64 0
  71 000a 00BF     		nop
  72 000c 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE64:
  75              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  76 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  77              		.align	2
  78              		.thumb
  79              		.thumb_func
  80              		.type	RTC_EveryMinuteHandler, %function
  81              	RTC_EveryMinuteHandler:
  82              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  83              		.loc 1 82 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 4


  90              		.cfi_offset 14, -4
  91 0002 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
  93              		.loc 1 85 0
  94 0004 0120     		movs	r0, #1
  95 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
  96              		.loc 1 91 0
  97 000a 00BF     		nop
  98 000c 80BD     		pop	{r7, pc}
  99              		.cfi_endproc
 100              	.LFE65:
 101              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
 102 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 103              		.align	2
 104              		.thumb
 105              		.thumb_func
 106              		.type	RTC_EveryHourHandler, %function
 107              	RTC_EveryHourHandler:
 108              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 109              		.loc 1 109 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 00AF     		add	r7, sp, #0
 118              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 5


 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 119              		.loc 1 112 0
 120 0004 0220     		movs	r0, #2
 121 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 122              		.loc 1 118 0
 123 000a 00BF     		nop
 124 000c 80BD     		pop	{r7, pc}
 125              		.cfi_endproc
 126              	.LFE66:
 127              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 128 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 129              		.align	2
 130              		.thumb
 131              		.thumb_func
 132              		.type	RTC_EveryDayHandler, %function
 133              	RTC_EveryDayHandler:
 134              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 135              		.loc 1 136 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 0000 80B5     		push	{r7, lr}
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 7, -8
 142              		.cfi_offset 14, -4
 143 0002 00AF     		add	r7, sp, #0
 144              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 145              		.loc 1 139 0
 146 0004 0320     		movs	r0, #3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 6


 147 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 148              		.loc 1 145 0
 149 000a 00BF     		nop
 150 000c 80BD     		pop	{r7, pc}
 151              		.cfi_endproc
 152              	.LFE67:
 153              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 154 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 155              		.align	2
 156              		.thumb
 157              		.thumb_func
 158              		.type	RTC_EveryWeekHandler, %function
 159              	RTC_EveryWeekHandler:
 160              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 161              		.loc 1 163 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165 0000 80B5     		push	{r7, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 00AF     		add	r7, sp, #0
 170              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 171              		.loc 1 166 0
 172 0004 0420     		movs	r0, #4
 173 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 7


 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 174              		.loc 1 172 0
 175 000a 00BF     		nop
 176 000c 80BD     		pop	{r7, pc}
 177              		.cfi_endproc
 178              	.LFE68:
 179              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 180 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 181              		.align	2
 182              		.thumb
 183              		.thumb_func
 184              		.type	RTC_EveryMonthHandler, %function
 185              	RTC_EveryMonthHandler:
 186              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 187              		.loc 1 190 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 00AF     		add	r7, sp, #0
 196              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 197              		.loc 1 193 0
 198 0004 0520     		movs	r0, #5
 199 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 200              		.loc 1 199 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 8


 201 000a 00BF     		nop
 202 000c 80BD     		pop	{r7, pc}
 203              		.cfi_endproc
 204              	.LFE69:
 205              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 206 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 207              		.align	2
 208              		.thumb
 209              		.thumb_func
 210              		.type	RTC_EveryYearHandler, %function
 211              	RTC_EveryYearHandler:
 212              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 213              		.loc 1 217 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 80B5     		push	{r7, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 00AF     		add	r7, sp, #0
 222              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 223              		.loc 1 220 0
 224 0004 0620     		movs	r0, #6
 225 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 226              		.loc 1 226 0
 227 000a 00BF     		nop
 228 000c 80BD     		pop	{r7, pc}
 229              		.cfi_endproc
 230              	.LFE70:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 9


 231              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 232 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 233              		.align	2
 234              		.global	RTC_ISR
 235              		.thumb
 236              		.thumb_func
 237              		.type	RTC_ISR, %function
 238              	RTC_ISR:
 239              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 240              		.loc 1 268 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 8
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 0000 80B5     		push	{r7, lr}
 245              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 10


 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0002 82B0     		sub	sp, sp, #8
 249              		.cfi_def_cfa_offset 16
 250 0004 00AF     		add	r7, sp, #0
 251              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 252              		.loc 1 276 0
 253 0006 0420     		movs	r0, #4
 254 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 255              		.loc 1 279 0
 256 000c 9E4B     		ldr	r3, .L48
 257 000e 1B78     		ldrb	r3, [r3]
 258 0010 DBB2     		uxtb	r3, r3
 259 0012 0133     		adds	r3, r3, #1
 260 0014 DAB2     		uxtb	r2, r3
 261 0016 9C4B     		ldr	r3, .L48
 262 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 263              		.loc 1 282 0
 264 001a 9B4B     		ldr	r3, .L48
 265 001c 1B78     		ldrb	r3, [r3]
 266 001e DBB2     		uxtb	r3, r3
 267 0020 3B2B     		cmp	r3, #59
 268 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 269              		.loc 1 285 0
 270 0026 984B     		ldr	r3, .L48
 271 0028 5B78     		ldrb	r3, [r3, #1]
 272 002a DBB2     		uxtb	r3, r3
 273 002c 0133     		adds	r3, r3, #1
 274 002e DAB2     		uxtb	r2, r3
 275 0030 954B     		ldr	r3, .L48
 276 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 277              		.loc 1 288 0
 278 0034 944B     		ldr	r3, .L48
 279 0036 0022     		movs	r2, #0
 280 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 11


 281              		.loc 1 290 0
 282 003a 934B     		ldr	r3, .L48
 283 003c 5B78     		ldrb	r3, [r3, #1]
 284 003e DBB2     		uxtb	r3, r3
 285 0040 3B2B     		cmp	r3, #59
 286 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 287              		.loc 1 293 0
 288 0046 904B     		ldr	r3, .L48
 289 0048 9B78     		ldrb	r3, [r3, #2]
 290 004a DBB2     		uxtb	r3, r3
 291 004c 0133     		adds	r3, r3, #1
 292 004e DAB2     		uxtb	r2, r3
 293 0050 8D4B     		ldr	r3, .L48
 294 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 295              		.loc 1 296 0
 296 0054 8C4B     		ldr	r3, .L48
 297 0056 0022     		movs	r2, #0
 298 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 299              		.loc 1 299 0
 300 005a 8B4B     		ldr	r3, .L48
 301 005c 9B78     		ldrb	r3, [r3, #2]
 302 005e DBB2     		uxtb	r3, r3
 303 0060 172B     		cmp	r3, #23
 304 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 305              		.loc 1 302 0
 306 0066 884B     		ldr	r3, .L48
 307 0068 1B79     		ldrb	r3, [r3, #4]
 308 006a DBB2     		uxtb	r3, r3
 309 006c 0133     		adds	r3, r3, #1
 310 006e DAB2     		uxtb	r2, r3
 311 0070 854B     		ldr	r3, .L48
 312 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 313              		.loc 1 305 0
 314 0074 844B     		ldr	r3, .L48
 315 0076 0022     		movs	r2, #0
 316 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 317              		.loc 1 308 0
 318 007a 834B     		ldr	r3, .L48
 319 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 12


 320 007e 9BB2     		uxth	r3, r3
 321 0080 0133     		adds	r3, r3, #1
 322 0082 9AB2     		uxth	r2, r3
 323 0084 804B     		ldr	r3, .L48
 324 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 325              		.loc 1 311 0
 326 0088 7F4B     		ldr	r3, .L48
 327 008a DB78     		ldrb	r3, [r3, #3]
 328 008c DBB2     		uxtb	r3, r3
 329 008e 0133     		adds	r3, r3, #1
 330 0090 DAB2     		uxtb	r2, r3
 331 0092 7D4B     		ldr	r3, .L48
 332 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 333              		.loc 1 314 0
 334 0096 7C4B     		ldr	r3, .L48
 335 0098 DB78     		ldrb	r3, [r3, #3]
 336 009a DBB2     		uxtb	r3, r3
 337 009c 072B     		cmp	r3, #7
 338 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 339              		.loc 1 317 0
 340 00a0 794B     		ldr	r3, .L48
 341 00a2 0122     		movs	r2, #1
 342 00a4 DA70     		strb	r2, [r3, #3]
 343              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 344              		.loc 1 325 0
 345 00a6 794B     		ldr	r3, .L48+4
 346 00a8 1B78     		ldrb	r3, [r3]
 347 00aa DBB2     		uxtb	r3, r3
 348 00ac 03F00203 		and	r3, r3, #2
 349 00b0 002B     		cmp	r3, #0
 350 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 351              		.loc 1 326 0 discriminator 1
 352 00b4 744B     		ldr	r3, .L48
 353 00b6 1B7A     		ldrb	r3, [r3, #8]
 354 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 355              		.loc 1 325 0 discriminator 1
 356 00ba 022B     		cmp	r3, #2
 357 00bc 0CD1     		bne	.L13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 13


 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 358              		.loc 1 327 0
 359 00be 724B     		ldr	r3, .L48
 360 00c0 1B79     		ldrb	r3, [r3, #4]
 361 00c2 DBB2     		uxtb	r3, r3
 362 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 363              		.loc 1 328 0
 364 00c6 704B     		ldr	r3, .L48
 365 00c8 1B7A     		ldrb	r3, [r3, #8]
 366 00ca DBB2     		uxtb	r3, r3
 367 00cc 013B     		subs	r3, r3, #1
 368 00ce 704A     		ldr	r2, .L48+8
 369 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 370 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 371              		.loc 1 326 0
 372 00d4 9942     		cmp	r1, r3
 373 00d6 2AD8     		bhi	.L14
 374              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 375              		.loc 1 329 0
 376 00d8 6C4B     		ldr	r3, .L48+4
 377 00da 1B78     		ldrb	r3, [r3]
 378 00dc DBB2     		uxtb	r3, r3
 379 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 380              		.loc 1 328 0
 381 00e2 002B     		cmp	r3, #0
 382 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 383              		.loc 1 330 0
 384 00e6 684B     		ldr	r3, .L48
 385 00e8 1B7A     		ldrb	r3, [r3, #8]
 386 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 387              		.loc 1 329 0
 388 00ec 022B     		cmp	r3, #2
 389 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 390              		.loc 1 331 0
 391 00f0 654B     		ldr	r3, .L48
 392 00f2 1B79     		ldrb	r3, [r3, #4]
 393 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 394              		.loc 1 332 0
 395 00f6 644B     		ldr	r3, .L48
 396 00f8 1B7A     		ldrb	r3, [r3, #8]
 397 00fa DBB2     		uxtb	r3, r3
 398 00fc 013B     		subs	r3, r3, #1
 399 00fe 6449     		ldr	r1, .L48+8
 400 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 401              		.loc 1 330 0
 402 0102 9A42     		cmp	r2, r3
 403 0104 13D8     		bhi	.L14
 404              	.L15:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 14


 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 405              		.loc 1 333 0
 406 0106 614B     		ldr	r3, .L48+4
 407 0108 1B78     		ldrb	r3, [r3]
 408 010a DBB2     		uxtb	r3, r3
 409 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 410              		.loc 1 332 0
 411 0110 002B     		cmp	r3, #0
 412 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 413              		.loc 1 334 0
 414 0116 5C4B     		ldr	r3, .L48
 415 0118 1B79     		ldrb	r3, [r3, #4]
 416 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 417              		.loc 1 335 0
 418 011c 5A4B     		ldr	r3, .L48
 419 011e 1B7A     		ldrb	r3, [r3, #8]
 420 0120 DBB2     		uxtb	r3, r3
 421 0122 013B     		subs	r3, r3, #1
 422 0124 5A49     		ldr	r1, .L48+8
 423 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 424              		.loc 1 333 0
 425 0128 9A42     		cmp	r2, r3
 426 012a 40F2E880 		bls	.L16
 427              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 428              		.loc 1 338 0
 429 012e 564B     		ldr	r3, .L48
 430 0130 1B7A     		ldrb	r3, [r3, #8]
 431 0132 DBB2     		uxtb	r3, r3
 432 0134 0133     		adds	r3, r3, #1
 433 0136 DAB2     		uxtb	r2, r3
 434 0138 534B     		ldr	r3, .L48
 435 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 436              		.loc 1 341 0
 437 013c 524B     		ldr	r3, .L48
 438 013e 0122     		movs	r2, #1
 439 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 440              		.loc 1 344 0
 441 0142 514B     		ldr	r3, .L48
 442 0144 1B7A     		ldrb	r3, [r3, #8]
 443 0146 DBB2     		uxtb	r3, r3
 444 0148 0C2B     		cmp	r3, #12
 445 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 15


 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 446              		.loc 1 347 0
 447 014e 4E4B     		ldr	r3, .L48
 448 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 449 0152 9BB2     		uxth	r3, r3
 450 0154 0133     		adds	r3, r3, #1
 451 0156 9AB2     		uxth	r2, r3
 452 0158 4B4B     		ldr	r3, .L48
 453 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 454              		.loc 1 350 0
 455 015c 4A4B     		ldr	r3, .L48
 456 015e 0122     		movs	r2, #1
 457 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 458              		.loc 1 353 0
 459 0162 494B     		ldr	r3, .L48
 460 0164 0122     		movs	r2, #1
 461 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 462              		.loc 1 356 0
 463 0168 474B     		ldr	r3, .L48
 464 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 465 016c 9BB2     		uxth	r3, r3
 466 016e 494A     		ldr	r2, .L48+12
 467 0170 A2FB0312 		umull	r1, r2, r2, r3
 468 0174 D209     		lsrs	r2, r2, #7
 469 0176 4FF4C871 		mov	r1, #400
 470 017a 01FB02F2 		mul	r2, r1, r2
 471 017e 9B1A     		subs	r3, r3, r2
 472 0180 9BB2     		uxth	r3, r3
 473 0182 002B     		cmp	r3, #0
 474 0184 15D0     		beq	.L18
 475              		.loc 1 356 0 is_stmt 0 discriminator 1
 476 0186 404B     		ldr	r3, .L48
 477 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 478 018a 9BB2     		uxth	r3, r3
 479 018c 03F00303 		and	r3, r3, #3
 480 0190 9BB2     		uxth	r3, r3
 481 0192 002B     		cmp	r3, #0
 482 0194 16D1     		bne	.L19
 483              		.loc 1 356 0 discriminator 2
 484 0196 3C4B     		ldr	r3, .L48
 485 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 486 019a 9BB2     		uxth	r3, r3
 487 019c 3D4A     		ldr	r2, .L48+12
 488 019e A2FB0312 		umull	r1, r2, r2, r3
 489 01a2 5209     		lsrs	r2, r2, #5
 490 01a4 6421     		movs	r1, #100
 491 01a6 01FB02F2 		mul	r2, r1, r2
 492 01aa 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 16


 493 01ac 9BB2     		uxth	r3, r3
 494 01ae 002B     		cmp	r3, #0
 495 01b0 08D0     		beq	.L19
 496              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 497              		.loc 1 359 0 is_stmt 1
 498 01b2 364B     		ldr	r3, .L48+4
 499 01b4 1B78     		ldrb	r3, [r3]
 500 01b6 DBB2     		uxtb	r3, r3
 501 01b8 43F00203 		orr	r3, r3, #2
 502 01bc DAB2     		uxtb	r2, r3
 503 01be 334B     		ldr	r3, .L48+4
 504 01c0 1A70     		strb	r2, [r3]
 505 01c2 07E0     		b	.L20
 506              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 507              		.loc 1 364 0
 508 01c4 314B     		ldr	r3, .L48+4
 509 01c6 1B78     		ldrb	r3, [r3]
 510 01c8 DBB2     		uxtb	r3, r3
 511 01ca 23F00203 		bic	r3, r3, #2
 512 01ce DAB2     		uxtb	r2, r3
 513 01d0 2E4B     		ldr	r3, .L48+4
 514 01d2 1A70     		strb	r2, [r3]
 515              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 516              		.loc 1 368 0
 517 01d4 304B     		ldr	r3, .L48+16
 518 01d6 1B78     		ldrb	r3, [r3]
 519 01d8 DBB2     		uxtb	r3, r3
 520 01da 5BB2     		sxtb	r3, r3
 521 01dc 002B     		cmp	r3, #0
 522 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 523              		.loc 1 372 0
 524 01e0 2E4B     		ldr	r3, .L48+20
 525 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 526 01e4 9AB2     		uxth	r2, r3
 527 01e6 284B     		ldr	r3, .L48
 528 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 529 01ea 9BB2     		uxth	r3, r3
 530 01ec 9A42     		cmp	r2, r3
 531 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 17


 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 532              		.loc 1 375 0
 533 01f0 2B4B     		ldr	r3, .L48+24
 534 01f2 1B78     		ldrb	r3, [r3]
 535 01f4 DBB2     		uxtb	r3, r3
 536 01f6 63F07F03 		orn	r3, r3, #127
 537 01fa DAB2     		uxtb	r2, r3
 538 01fc 284B     		ldr	r3, .L48+24
 539 01fe 1A70     		strb	r2, [r3]
 540 0200 07E0     		b	.L21
 541              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 542              		.loc 1 380 0
 543 0202 274B     		ldr	r3, .L48+24
 544 0204 1B78     		ldrb	r3, [r3]
 545 0206 DBB2     		uxtb	r3, r3
 546 0208 03F07F03 		and	r3, r3, #127
 547 020c DAB2     		uxtb	r2, r3
 548 020e 244B     		ldr	r3, .L48+24
 549 0210 1A70     		strb	r2, [r3]
 550              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 551              		.loc 1 385 0
 552 0212 214B     		ldr	r3, .L48+16
 553 0214 1B78     		ldrb	r3, [r3]
 554 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 555              		.loc 1 386 0
 556 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 557 021a 002B     		cmp	r3, #0
 558 021c 13D0     		beq	.L23
 559              		.loc 1 386 0 is_stmt 0 discriminator 1
 560 021e 204B     		ldr	r3, .L48+24
 561 0220 1B78     		ldrb	r3, [r3]
 562 0222 DAB2     		uxtb	r2, r3
 563 0224 FB79     		ldrb	r3, [r7, #7]
 564 0226 1340     		ands	r3, r3, r2
 565 0228 DBB2     		uxtb	r3, r3
 566 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 567 022c 9A42     		cmp	r2, r3
 568 022e 0AD1     		bne	.L23
 569              		.loc 1 386 0 discriminator 2
 570 0230 164B     		ldr	r3, .L48+4
 571 0232 1B78     		ldrb	r3, [r3]
 572 0234 DBB2     		uxtb	r3, r3
 573 0236 43F00803 		orr	r3, r3, #8
 574 023a DAB2     		uxtb	r2, r3
 575 023c 134B     		ldr	r3, .L48+4
 576 023e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 18


 577 0240 174B     		ldr	r3, .L48+24
 578 0242 0022     		movs	r2, #0
 579 0244 1A70     		strb	r2, [r3]
 580              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 581              		.loc 1 391 0 is_stmt 1
 582 0246 174B     		ldr	r3, .L48+28
 583 0248 1B78     		ldrb	r3, [r3]
 584 024a DBB2     		uxtb	r3, r3
 585 024c 03F04003 		and	r3, r3, #64
 586 0250 002B     		cmp	r3, #0
 587 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 588              		.loc 1 394 0
 589 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 590              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 591              		.loc 1 400 0
 592 0258 0F4B     		ldr	r3, .L48+16
 593 025a 1B78     		ldrb	r3, [r3]
 594 025c DBB2     		uxtb	r3, r3
 595 025e 03F04003 		and	r3, r3, #64
 596 0262 002B     		cmp	r3, #0
 597 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 598              		.loc 1 403 0
 599 0266 0D4B     		ldr	r3, .L48+20
 600 0268 1B7A     		ldrb	r3, [r3, #8]
 601 026a DAB2     		uxtb	r2, r3
 602 026c 064B     		ldr	r3, .L48
 603 026e 1B7A     		ldrb	r3, [r3, #8]
 604 0270 DBB2     		uxtb	r3, r3
 605 0272 9A42     		cmp	r2, r3
 606 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 607              		.loc 1 406 0
 608 0276 0A4B     		ldr	r3, .L48+24
 609 0278 1B78     		ldrb	r3, [r3]
 610 027a DBB2     		uxtb	r3, r3
 611 027c 43F04003 		orr	r3, r3, #64
 612 0280 DAB2     		uxtb	r2, r3
 613 0282 074B     		ldr	r3, .L48+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 19


 614 0284 1A70     		strb	r2, [r3]
 615 0286 17E0     		b	.L24
 616              	.L49:
 617              		.align	2
 618              	.L48:
 619 0288 00000000 		.word	RTC_currentTimeDate
 620 028c 00000000 		.word	RTC_statusDateTime
 621 0290 00000000 		.word	RTC_daysInMonths
 622 0294 1F85EB51 		.word	1374389535
 623 0298 00000000 		.word	RTC_alarmCfgMask
 624 029c 00000000 		.word	RTC_alarmCfgTimeDate
 625 02a0 00000000 		.word	RTC_alarmCurStatus
 626 02a4 00000000 		.word	RTC_intervalCfgMask
 627              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 628              		.loc 1 411 0
 629 02a8 964B     		ldr	r3, .L50
 630 02aa 1B78     		ldrb	r3, [r3]
 631 02ac DBB2     		uxtb	r3, r3
 632 02ae 23F04003 		bic	r3, r3, #64
 633 02b2 DAB2     		uxtb	r2, r3
 634 02b4 934B     		ldr	r3, .L50
 635 02b6 1A70     		strb	r2, [r3]
 636              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 637              		.loc 1 436 0
 638 02b8 934B     		ldr	r3, .L50+4
 639 02ba 1B78     		ldrb	r3, [r3]
 640 02bc FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 20


 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 641              		.loc 1 437 0
 642 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 643 02c0 002B     		cmp	r3, #0
 644 02c2 13D0     		beq	.L26
 645              		.loc 1 437 0 is_stmt 0 discriminator 1
 646 02c4 8F4B     		ldr	r3, .L50
 647 02c6 1B78     		ldrb	r3, [r3]
 648 02c8 DAB2     		uxtb	r2, r3
 649 02ca FB79     		ldrb	r3, [r7, #7]
 650 02cc 1340     		ands	r3, r3, r2
 651 02ce DBB2     		uxtb	r3, r3
 652 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 653 02d2 9A42     		cmp	r2, r3
 654 02d4 0AD1     		bne	.L26
 655              		.loc 1 437 0 discriminator 2
 656 02d6 8D4B     		ldr	r3, .L50+8
 657 02d8 1B78     		ldrb	r3, [r3]
 658 02da DBB2     		uxtb	r3, r3
 659 02dc 43F00803 		orr	r3, r3, #8
 660 02e0 DAB2     		uxtb	r2, r3
 661 02e2 8A4B     		ldr	r3, .L50+8
 662 02e4 1A70     		strb	r2, [r3]
 663 02e6 874B     		ldr	r3, .L50
 664 02e8 0022     		movs	r2, #0
 665 02ea 1A70     		strb	r2, [r3]
 666              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 667              		.loc 1 442 0 is_stmt 1
 668 02ec 884B     		ldr	r3, .L50+12
 669 02ee 1B78     		ldrb	r3, [r3]
 670 02f0 DBB2     		uxtb	r3, r3
 671 02f2 03F02003 		and	r3, r3, #32
 672 02f6 002B     		cmp	r3, #0
 673 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 674              		.loc 1 445 0
 675 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 676              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 677              		.loc 1 450 0
 678 02fe 824B     		ldr	r3, .L50+4
 679 0300 1B78     		ldrb	r3, [r3]
 680 0302 DBB2     		uxtb	r3, r3
 681 0304 03F00803 		and	r3, r3, #8
 682 0308 002B     		cmp	r3, #0
 683 030a 18D0     		beq	.L27
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 21


 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 684              		.loc 1 453 0
 685 030c 814B     		ldr	r3, .L50+16
 686 030e DB78     		ldrb	r3, [r3, #3]
 687 0310 DAB2     		uxtb	r2, r3
 688 0312 814B     		ldr	r3, .L50+20
 689 0314 DB78     		ldrb	r3, [r3, #3]
 690 0316 DBB2     		uxtb	r3, r3
 691 0318 9A42     		cmp	r2, r3
 692 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 693              		.loc 1 456 0
 694 031c 794B     		ldr	r3, .L50
 695 031e 1B78     		ldrb	r3, [r3]
 696 0320 DBB2     		uxtb	r3, r3
 697 0322 43F00803 		orr	r3, r3, #8
 698 0326 DAB2     		uxtb	r2, r3
 699 0328 764B     		ldr	r3, .L50
 700 032a 1A70     		strb	r2, [r3]
 701 032c 07E0     		b	.L27
 702              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 703              		.loc 1 461 0
 704 032e 754B     		ldr	r3, .L50
 705 0330 1B78     		ldrb	r3, [r3]
 706 0332 DBB2     		uxtb	r3, r3
 707 0334 23F00803 		bic	r3, r3, #8
 708 0338 DAB2     		uxtb	r2, r3
 709 033a 724B     		ldr	r3, .L50
 710 033c 1A70     		strb	r2, [r3]
 711              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 712              		.loc 1 466 0
 713 033e 724B     		ldr	r3, .L50+4
 714 0340 1B78     		ldrb	r3, [r3]
 715 0342 DBB2     		uxtb	r3, r3
 716 0344 03F02003 		and	r3, r3, #32
 717 0348 002B     		cmp	r3, #0
 718 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 719              		.loc 1 469 0
 720 034c 714B     		ldr	r3, .L50+16
 721 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 22


 722 0350 9AB2     		uxth	r2, r3
 723 0352 714B     		ldr	r3, .L50+20
 724 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 725 0356 9BB2     		uxth	r3, r3
 726 0358 9A42     		cmp	r2, r3
 727 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 728              		.loc 1 472 0
 729 035c 694B     		ldr	r3, .L50
 730 035e 1B78     		ldrb	r3, [r3]
 731 0360 DBB2     		uxtb	r3, r3
 732 0362 43F02003 		orr	r3, r3, #32
 733 0366 DAB2     		uxtb	r2, r3
 734 0368 664B     		ldr	r3, .L50
 735 036a 1A70     		strb	r2, [r3]
 736 036c 07E0     		b	.L29
 737              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 738              		.loc 1 477 0
 739 036e 654B     		ldr	r3, .L50
 740 0370 1B78     		ldrb	r3, [r3]
 741 0372 DBB2     		uxtb	r3, r3
 742 0374 23F02003 		bic	r3, r3, #32
 743 0378 DAB2     		uxtb	r2, r3
 744 037a 624B     		ldr	r3, .L50
 745 037c 1A70     		strb	r2, [r3]
 746              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 747              		.loc 1 482 0
 748 037e 624B     		ldr	r3, .L50+4
 749 0380 1B78     		ldrb	r3, [r3]
 750 0382 DBB2     		uxtb	r3, r3
 751 0384 03F01003 		and	r3, r3, #16
 752 0388 002B     		cmp	r3, #0
 753 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 754              		.loc 1 485 0
 755 038c 614B     		ldr	r3, .L50+16
 756 038e 1B79     		ldrb	r3, [r3, #4]
 757 0390 DAB2     		uxtb	r2, r3
 758 0392 614B     		ldr	r3, .L50+20
 759 0394 1B79     		ldrb	r3, [r3, #4]
 760 0396 DBB2     		uxtb	r3, r3
 761 0398 9A42     		cmp	r2, r3
 762 039a 08D1     		bne	.L32
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 23


 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 763              		.loc 1 488 0
 764 039c 594B     		ldr	r3, .L50
 765 039e 1B78     		ldrb	r3, [r3]
 766 03a0 DBB2     		uxtb	r3, r3
 767 03a2 43F01003 		orr	r3, r3, #16
 768 03a6 DAB2     		uxtb	r2, r3
 769 03a8 564B     		ldr	r3, .L50
 770 03aa 1A70     		strb	r2, [r3]
 771 03ac 07E0     		b	.L31
 772              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 773              		.loc 1 493 0
 774 03ae 554B     		ldr	r3, .L50
 775 03b0 1B78     		ldrb	r3, [r3]
 776 03b2 DBB2     		uxtb	r3, r3
 777 03b4 23F01003 		bic	r3, r3, #16
 778 03b8 DAB2     		uxtb	r2, r3
 779 03ba 524B     		ldr	r3, .L50
 780 03bc 1A70     		strb	r2, [r3]
 781              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 782              		.loc 1 518 0
 783 03be 524B     		ldr	r3, .L50+4
 784 03c0 1B78     		ldrb	r3, [r3]
 785 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 24


 786              		.loc 1 519 0
 787 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 788 03c6 002B     		cmp	r3, #0
 789 03c8 13D0     		beq	.L33
 790              		.loc 1 519 0 is_stmt 0 discriminator 1
 791 03ca 4E4B     		ldr	r3, .L50
 792 03cc 1B78     		ldrb	r3, [r3]
 793 03ce DAB2     		uxtb	r2, r3
 794 03d0 FB79     		ldrb	r3, [r7, #7]
 795 03d2 1340     		ands	r3, r3, r2
 796 03d4 DBB2     		uxtb	r3, r3
 797 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 798 03d8 9A42     		cmp	r2, r3
 799 03da 0AD1     		bne	.L33
 800              		.loc 1 519 0 discriminator 2
 801 03dc 4B4B     		ldr	r3, .L50+8
 802 03de 1B78     		ldrb	r3, [r3]
 803 03e0 DBB2     		uxtb	r3, r3
 804 03e2 43F00803 		orr	r3, r3, #8
 805 03e6 DAB2     		uxtb	r2, r3
 806 03e8 484B     		ldr	r3, .L50+8
 807 03ea 1A70     		strb	r2, [r3]
 808 03ec 454B     		ldr	r3, .L50
 809 03ee 0022     		movs	r2, #0
 810 03f0 1A70     		strb	r2, [r3]
 811              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 812              		.loc 1 524 0 is_stmt 1
 813 03f2 474B     		ldr	r3, .L50+12
 814 03f4 1B78     		ldrb	r3, [r3]
 815 03f6 DBB2     		uxtb	r3, r3
 816 03f8 03F00803 		and	r3, r3, #8
 817 03fc 002B     		cmp	r3, #0
 818 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 819              		.loc 1 527 0
 820 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 821              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 822              		.loc 1 530 0
 823 0404 444B     		ldr	r3, .L50+20
 824 0406 DB78     		ldrb	r3, [r3, #3]
 825 0408 DBB2     		uxtb	r3, r3
 826 040a 012B     		cmp	r3, #1
 827 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 828              		.loc 1 533 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 25


 829 040e 404B     		ldr	r3, .L50+12
 830 0410 1B78     		ldrb	r3, [r3]
 831 0412 DBB2     		uxtb	r3, r3
 832 0414 03F01003 		and	r3, r3, #16
 833 0418 002B     		cmp	r3, #0
 834 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 835              		.loc 1 536 0
 836 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 837              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 838              		.loc 1 543 0
 839 0420 3D4B     		ldr	r3, .L50+20
 840 0422 9B78     		ldrb	r3, [r3, #2]
 841 0424 DBB2     		uxtb	r3, r3
 842 0426 0B2B     		cmp	r3, #11
 843 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 844              		.loc 1 546 0
 845 042a 384B     		ldr	r3, .L50+8
 846 042c 1B78     		ldrb	r3, [r3]
 847 042e DBB2     		uxtb	r3, r3
 848 0430 23F00403 		bic	r3, r3, #4
 849 0434 DAB2     		uxtb	r2, r3
 850 0436 354B     		ldr	r3, .L50+8
 851 0438 1A70     		strb	r2, [r3]
 852 043a 07E0     		b	.L36
 853              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 854              		.loc 1 551 0
 855 043c 334B     		ldr	r3, .L50+8
 856 043e 1B78     		ldrb	r3, [r3]
 857 0440 DBB2     		uxtb	r3, r3
 858 0442 43F00403 		orr	r3, r3, #4
 859 0446 DAB2     		uxtb	r2, r3
 860 0448 304B     		ldr	r3, .L50+8
 861 044a 1A70     		strb	r2, [r3]
 862              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 26


 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 27


 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 28


 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 29


 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 30


 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 31


 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 863              		.loc 1 879 0
 864 044c 2E4B     		ldr	r3, .L50+4
 865 044e 1B78     		ldrb	r3, [r3]
 866 0450 DBB2     		uxtb	r3, r3
 867 0452 03F00403 		and	r3, r3, #4
 868 0456 002B     		cmp	r3, #0
 869 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 870              		.loc 1 881 0
 871 045a 2E4B     		ldr	r3, .L50+16
 872 045c 9B78     		ldrb	r3, [r3, #2]
 873 045e DAB2     		uxtb	r2, r3
 874 0460 2D4B     		ldr	r3, .L50+20
 875 0462 9B78     		ldrb	r3, [r3, #2]
 876 0464 DBB2     		uxtb	r3, r3
 877 0466 9A42     		cmp	r2, r3
 878 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 32


 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 879              		.loc 1 883 0
 880 046a 264B     		ldr	r3, .L50
 881 046c 1B78     		ldrb	r3, [r3]
 882 046e DBB2     		uxtb	r3, r3
 883 0470 43F00403 		orr	r3, r3, #4
 884 0474 DAB2     		uxtb	r2, r3
 885 0476 234B     		ldr	r3, .L50
 886 0478 1A70     		strb	r2, [r3]
 887 047a 07E0     		b	.L37
 888              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 889              		.loc 1 887 0
 890 047c 214B     		ldr	r3, .L50
 891 047e 1B78     		ldrb	r3, [r3]
 892 0480 DBB2     		uxtb	r3, r3
 893 0482 23F00403 		bic	r3, r3, #4
 894 0486 DAB2     		uxtb	r2, r3
 895 0488 1E4B     		ldr	r3, .L50
 896 048a 1A70     		strb	r2, [r3]
 897              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 898              		.loc 1 892 0
 899 048c 1E4B     		ldr	r3, .L50+4
 900 048e 1B78     		ldrb	r3, [r3]
 901 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 902              		.loc 1 893 0
 903 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 904 0494 002B     		cmp	r3, #0
 905 0496 13D0     		beq	.L39
 906              		.loc 1 893 0 is_stmt 0 discriminator 1
 907 0498 1A4B     		ldr	r3, .L50
 908 049a 1B78     		ldrb	r3, [r3]
 909 049c DAB2     		uxtb	r2, r3
 910 049e FB79     		ldrb	r3, [r7, #7]
 911 04a0 1340     		ands	r3, r3, r2
 912 04a2 DBB2     		uxtb	r3, r3
 913 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 914 04a6 9A42     		cmp	r2, r3
 915 04a8 0AD1     		bne	.L39
 916              		.loc 1 893 0 discriminator 2
 917 04aa 184B     		ldr	r3, .L50+8
 918 04ac 1B78     		ldrb	r3, [r3]
 919 04ae DBB2     		uxtb	r3, r3
 920 04b0 43F00803 		orr	r3, r3, #8
 921 04b4 DAB2     		uxtb	r2, r3
 922 04b6 154B     		ldr	r3, .L50+8
 923 04b8 1A70     		strb	r2, [r3]
 924 04ba 124B     		ldr	r3, .L50
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 33


 925 04bc 0022     		movs	r2, #0
 926 04be 1A70     		strb	r2, [r3]
 927              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 928              		.loc 1 898 0 is_stmt 1
 929 04c0 134B     		ldr	r3, .L50+12
 930 04c2 1B78     		ldrb	r3, [r3]
 931 04c4 DBB2     		uxtb	r3, r3
 932 04c6 03F00403 		and	r3, r3, #4
 933 04ca 002B     		cmp	r3, #0
 934 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 935              		.loc 1 900 0
 936 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 937              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 938              		.loc 1 905 0
 939 04d2 0D4B     		ldr	r3, .L50+4
 940 04d4 1B78     		ldrb	r3, [r3]
 941 04d6 DBB2     		uxtb	r3, r3
 942 04d8 03F00203 		and	r3, r3, #2
 943 04dc 002B     		cmp	r3, #0
 944 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 945              		.loc 1 907 0
 946 04e0 0C4B     		ldr	r3, .L50+16
 947 04e2 5B78     		ldrb	r3, [r3, #1]
 948 04e4 DAB2     		uxtb	r2, r3
 949 04e6 0C4B     		ldr	r3, .L50+20
 950 04e8 5B78     		ldrb	r3, [r3, #1]
 951 04ea DBB2     		uxtb	r3, r3
 952 04ec 9A42     		cmp	r2, r3
 953 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 954              		.loc 1 909 0
 955 04f0 044B     		ldr	r3, .L50
 956 04f2 1B78     		ldrb	r3, [r3]
 957 04f4 DBB2     		uxtb	r3, r3
 958 04f6 43F00203 		orr	r3, r3, #2
 959 04fa DAB2     		uxtb	r2, r3
 960 04fc 014B     		ldr	r3, .L50
 961 04fe 1A70     		strb	r2, [r3]
 962 0500 14E0     		b	.L40
 963              	.L51:
 964 0502 00BF     		.align	2
 965              	.L50:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 34


 966 0504 00000000 		.word	RTC_alarmCurStatus
 967 0508 00000000 		.word	RTC_alarmCfgMask
 968 050c 00000000 		.word	RTC_statusDateTime
 969 0510 00000000 		.word	RTC_intervalCfgMask
 970 0514 00000000 		.word	RTC_alarmCfgTimeDate
 971 0518 00000000 		.word	RTC_currentTimeDate
 972              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 973              		.loc 1 913 0
 974 051c 384B     		ldr	r3, .L52
 975 051e 1B78     		ldrb	r3, [r3]
 976 0520 DBB2     		uxtb	r3, r3
 977 0522 23F00203 		bic	r3, r3, #2
 978 0526 DAB2     		uxtb	r2, r3
 979 0528 354B     		ldr	r3, .L52
 980 052a 1A70     		strb	r2, [r3]
 981              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 982              		.loc 1 918 0
 983 052c 354B     		ldr	r3, .L52+4
 984 052e 1B78     		ldrb	r3, [r3]
 985 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 986              		.loc 1 919 0
 987 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 988 0534 002B     		cmp	r3, #0
 989 0536 13D0     		beq	.L42
 990              		.loc 1 919 0 is_stmt 0 discriminator 1
 991 0538 314B     		ldr	r3, .L52
 992 053a 1B78     		ldrb	r3, [r3]
 993 053c DAB2     		uxtb	r2, r3
 994 053e FB79     		ldrb	r3, [r7, #7]
 995 0540 1340     		ands	r3, r3, r2
 996 0542 DBB2     		uxtb	r3, r3
 997 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 998 0546 9A42     		cmp	r2, r3
 999 0548 0AD1     		bne	.L42
 1000              		.loc 1 919 0 discriminator 2
 1001 054a 2F4B     		ldr	r3, .L52+8
 1002 054c 1B78     		ldrb	r3, [r3]
 1003 054e DBB2     		uxtb	r3, r3
 1004 0550 43F00803 		orr	r3, r3, #8
 1005 0554 DAB2     		uxtb	r2, r3
 1006 0556 2C4B     		ldr	r3, .L52+8
 1007 0558 1A70     		strb	r2, [r3]
 1008 055a 294B     		ldr	r3, .L52
 1009 055c 0022     		movs	r2, #0
 1010 055e 1A70     		strb	r2, [r3]
 1011              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 35


 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1012              		.loc 1 924 0 is_stmt 1
 1013 0560 2A4B     		ldr	r3, .L52+12
 1014 0562 1B78     		ldrb	r3, [r3]
 1015 0564 DBB2     		uxtb	r3, r3
 1016 0566 03F00203 		and	r3, r3, #2
 1017 056a 002B     		cmp	r3, #0
 1018 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1019              		.loc 1 926 0
 1020 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1021              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1022              		.loc 1 931 0
 1023 0572 244B     		ldr	r3, .L52+4
 1024 0574 1B78     		ldrb	r3, [r3]
 1025 0576 DBB2     		uxtb	r3, r3
 1026 0578 03F00103 		and	r3, r3, #1
 1027 057c 002B     		cmp	r3, #0
 1028 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1029              		.loc 1 933 0
 1030 0580 234B     		ldr	r3, .L52+16
 1031 0582 1B78     		ldrb	r3, [r3]
 1032 0584 DAB2     		uxtb	r2, r3
 1033 0586 234B     		ldr	r3, .L52+20
 1034 0588 1B78     		ldrb	r3, [r3]
 1035 058a DBB2     		uxtb	r3, r3
 1036 058c 9A42     		cmp	r2, r3
 1037 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1038              		.loc 1 935 0
 1039 0590 1B4B     		ldr	r3, .L52
 1040 0592 1B78     		ldrb	r3, [r3]
 1041 0594 DBB2     		uxtb	r3, r3
 1042 0596 43F00103 		orr	r3, r3, #1
 1043 059a DAB2     		uxtb	r2, r3
 1044 059c 184B     		ldr	r3, .L52
 1045 059e 1A70     		strb	r2, [r3]
 1046 05a0 07E0     		b	.L43
 1047              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1048              		.loc 1 939 0
 1049 05a2 174B     		ldr	r3, .L52
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 36


 1050 05a4 1B78     		ldrb	r3, [r3]
 1051 05a6 DBB2     		uxtb	r3, r3
 1052 05a8 23F00103 		bic	r3, r3, #1
 1053 05ac DAB2     		uxtb	r2, r3
 1054 05ae 144B     		ldr	r3, .L52
 1055 05b0 1A70     		strb	r2, [r3]
 1056              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1057              		.loc 1 944 0
 1058 05b2 144B     		ldr	r3, .L52+4
 1059 05b4 1B78     		ldrb	r3, [r3]
 1060 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1061              		.loc 1 945 0
 1062 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1063 05ba 002B     		cmp	r3, #0
 1064 05bc 13D0     		beq	.L45
 1065              		.loc 1 945 0 is_stmt 0 discriminator 1
 1066 05be 104B     		ldr	r3, .L52
 1067 05c0 1B78     		ldrb	r3, [r3]
 1068 05c2 DAB2     		uxtb	r2, r3
 1069 05c4 FB79     		ldrb	r3, [r7, #7]
 1070 05c6 1340     		ands	r3, r3, r2
 1071 05c8 DBB2     		uxtb	r3, r3
 1072 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1073 05cc 9A42     		cmp	r2, r3
 1074 05ce 0AD1     		bne	.L45
 1075              		.loc 1 945 0 discriminator 2
 1076 05d0 0D4B     		ldr	r3, .L52+8
 1077 05d2 1B78     		ldrb	r3, [r3]
 1078 05d4 DBB2     		uxtb	r3, r3
 1079 05d6 43F00803 		orr	r3, r3, #8
 1080 05da DAB2     		uxtb	r2, r3
 1081 05dc 0A4B     		ldr	r3, .L52+8
 1082 05de 1A70     		strb	r2, [r3]
 1083 05e0 074B     		ldr	r3, .L52
 1084 05e2 0022     		movs	r2, #0
 1085 05e4 1A70     		strb	r2, [r3]
 1086              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1087              		.loc 1 948 0 is_stmt 1
 1088 05e6 094B     		ldr	r3, .L52+12
 1089 05e8 1B78     		ldrb	r3, [r3]
 1090 05ea DBB2     		uxtb	r3, r3
 1091 05ec 03F00103 		and	r3, r3, #1
 1092 05f0 002B     		cmp	r3, #0
 1093 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1094              		.loc 1 950 0
 1095 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 37


 1096              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1097              		.loc 1 956 0
 1098 05f8 00BF     		nop
 1099 05fa 0837     		adds	r7, r7, #8
 1100              		.cfi_def_cfa_offset 8
 1101 05fc BD46     		mov	sp, r7
 1102              		.cfi_def_cfa_register 13
 1103              		@ sp needed
 1104 05fe 80BD     		pop	{r7, pc}
 1105              	.L53:
 1106              		.align	2
 1107              	.L52:
 1108 0600 00000000 		.word	RTC_alarmCurStatus
 1109 0604 00000000 		.word	RTC_alarmCfgMask
 1110 0608 00000000 		.word	RTC_statusDateTime
 1111 060c 00000000 		.word	RTC_intervalCfgMask
 1112 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1113 0614 00000000 		.word	RTC_currentTimeDate
 1114              		.cfi_endproc
 1115              	.LFE71:
 1116              		.size	RTC_ISR, .-RTC_ISR
 1117              		.text
 1118              	.Letext0:
 1119              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1120              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1121              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1122              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1123              		.file 6 "./data.h"
 1124              		.file 7 "./modem.h"
 1125              		.file 8 "./notoriOS.h"
 1126              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1127              		.file 10 "./level_sensor.h"
 1128              		.file 11 "./App_LED.h"
 1129              		.section	.debug_info,"",%progbits
 1130              	.Ldebug_info0:
 1131 0000 80060000 		.4byte	0x680
 1132 0004 0400     		.2byte	0x4
 1133 0006 00000000 		.4byte	.Ldebug_abbrev0
 1134 000a 04       		.byte	0x4
 1135 000b 01       		.uleb128 0x1
 1136 000c 81000000 		.4byte	.LASF101
 1137 0010 0C       		.byte	0xc
 1138 0011 6B050000 		.4byte	.LASF102
 1139 0015 6D040000 		.4byte	.LASF103
 1140 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1141 001d 00000000 		.4byte	0
 1142 0021 00000000 		.4byte	.Ldebug_line0
 1143 0025 02       		.uleb128 0x2
 1144 0026 01       		.byte	0x1
 1145 0027 06       		.byte	0x6
 1146 0028 DA020000 		.4byte	.LASF0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 38


 1147 002c 02       		.uleb128 0x2
 1148 002d 01       		.byte	0x1
 1149 002e 08       		.byte	0x8
 1150 002f 8F020000 		.4byte	.LASF1
 1151 0033 02       		.uleb128 0x2
 1152 0034 02       		.byte	0x2
 1153 0035 05       		.byte	0x5
 1154 0036 66000000 		.4byte	.LASF2
 1155 003a 02       		.uleb128 0x2
 1156 003b 02       		.byte	0x2
 1157 003c 07       		.byte	0x7
 1158 003d AB030000 		.4byte	.LASF3
 1159 0041 03       		.uleb128 0x3
 1160 0042 54050000 		.4byte	.LASF9
 1161 0046 02       		.byte	0x2
 1162 0047 3F       		.byte	0x3f
 1163 0048 4C000000 		.4byte	0x4c
 1164 004c 02       		.uleb128 0x2
 1165 004d 04       		.byte	0x4
 1166 004e 05       		.byte	0x5
 1167 004f E0010000 		.4byte	.LASF4
 1168 0053 02       		.uleb128 0x2
 1169 0054 04       		.byte	0x4
 1170 0055 07       		.byte	0x7
 1171 0056 C7040000 		.4byte	.LASF5
 1172 005a 02       		.uleb128 0x2
 1173 005b 08       		.byte	0x8
 1174 005c 05       		.byte	0x5
 1175 005d CD010000 		.4byte	.LASF6
 1176 0061 02       		.uleb128 0x2
 1177 0062 08       		.byte	0x8
 1178 0063 07       		.byte	0x7
 1179 0064 FB020000 		.4byte	.LASF7
 1180 0068 04       		.uleb128 0x4
 1181 0069 04       		.byte	0x4
 1182 006a 05       		.byte	0x5
 1183 006b 696E7400 		.ascii	"int\000"
 1184 006f 02       		.uleb128 0x2
 1185 0070 04       		.byte	0x4
 1186 0071 07       		.byte	0x7
 1187 0072 36030000 		.4byte	.LASF8
 1188 0076 03       		.uleb128 0x3
 1189 0077 0D040000 		.4byte	.LASF10
 1190 007b 03       		.byte	0x3
 1191 007c 2C       		.byte	0x2c
 1192 007d 41000000 		.4byte	0x41
 1193 0081 05       		.uleb128 0x5
 1194 0082 81010000 		.4byte	.LASF11
 1195 0086 04       		.byte	0x4
 1196 0087 9201     		.2byte	0x192
 1197 0089 2C000000 		.4byte	0x2c
 1198 008d 05       		.uleb128 0x5
 1199 008e 60010000 		.4byte	.LASF12
 1200 0092 04       		.byte	0x4
 1201 0093 9301     		.2byte	0x193
 1202 0095 3A000000 		.4byte	0x3a
 1203 0099 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 39


 1204 009a 94010000 		.4byte	.LASF13
 1205 009e 04       		.byte	0x4
 1206 009f 9601     		.2byte	0x196
 1207 00a1 33000000 		.4byte	0x33
 1208 00a5 05       		.uleb128 0x5
 1209 00a6 D9040000 		.4byte	.LASF14
 1210 00aa 04       		.byte	0x4
 1211 00ab 9701     		.2byte	0x197
 1212 00ad 4C000000 		.4byte	0x4c
 1213 00b1 02       		.uleb128 0x2
 1214 00b2 04       		.byte	0x4
 1215 00b3 04       		.byte	0x4
 1216 00b4 BD010000 		.4byte	.LASF15
 1217 00b8 02       		.uleb128 0x2
 1218 00b9 08       		.byte	0x8
 1219 00ba 04       		.byte	0x4
 1220 00bb DF040000 		.4byte	.LASF16
 1221 00bf 02       		.uleb128 0x2
 1222 00c0 01       		.byte	0x1
 1223 00c1 08       		.byte	0x8
 1224 00c2 DB010000 		.4byte	.LASF17
 1225 00c6 06       		.uleb128 0x6
 1226 00c7 81000000 		.4byte	0x81
 1227 00cb 07       		.uleb128 0x7
 1228 00cc 0C       		.byte	0xc
 1229 00cd 05       		.byte	0x5
 1230 00ce 30       		.byte	0x30
 1231 00cf 34010000 		.4byte	0x134
 1232 00d3 08       		.uleb128 0x8
 1233 00d4 53656300 		.ascii	"Sec\000"
 1234 00d8 05       		.byte	0x5
 1235 00d9 32       		.byte	0x32
 1236 00da 81000000 		.4byte	0x81
 1237 00de 00       		.byte	0
 1238 00df 08       		.uleb128 0x8
 1239 00e0 4D696E00 		.ascii	"Min\000"
 1240 00e4 05       		.byte	0x5
 1241 00e5 33       		.byte	0x33
 1242 00e6 81000000 		.4byte	0x81
 1243 00ea 01       		.byte	0x1
 1244 00eb 09       		.uleb128 0x9
 1245 00ec 36010000 		.4byte	.LASF18
 1246 00f0 05       		.byte	0x5
 1247 00f1 34       		.byte	0x34
 1248 00f2 81000000 		.4byte	0x81
 1249 00f6 02       		.byte	0x2
 1250 00f7 09       		.uleb128 0x9
 1251 00f8 C3010000 		.4byte	.LASF19
 1252 00fc 05       		.byte	0x5
 1253 00fd 35       		.byte	0x35
 1254 00fe 81000000 		.4byte	0x81
 1255 0102 03       		.byte	0x3
 1256 0103 09       		.uleb128 0x9
 1257 0104 5D040000 		.4byte	.LASF20
 1258 0108 05       		.byte	0x5
 1259 0109 36       		.byte	0x36
 1260 010a 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 40


 1261 010e 04       		.byte	0x4
 1262 010f 09       		.uleb128 0x9
 1263 0110 26060000 		.4byte	.LASF21
 1264 0114 05       		.byte	0x5
 1265 0115 37       		.byte	0x37
 1266 0116 8D000000 		.4byte	0x8d
 1267 011a 06       		.byte	0x6
 1268 011b 09       		.uleb128 0x9
 1269 011c 2C020000 		.4byte	.LASF22
 1270 0120 05       		.byte	0x5
 1271 0121 38       		.byte	0x38
 1272 0122 81000000 		.4byte	0x81
 1273 0126 08       		.byte	0x8
 1274 0127 09       		.uleb128 0x9
 1275 0128 27020000 		.4byte	.LASF23
 1276 012c 05       		.byte	0x5
 1277 012d 39       		.byte	0x39
 1278 012e 8D000000 		.4byte	0x8d
 1279 0132 0A       		.byte	0xa
 1280 0133 00       		.byte	0
 1281 0134 03       		.uleb128 0x3
 1282 0135 C0050000 		.4byte	.LASF24
 1283 0139 05       		.byte	0x5
 1284 013a 3A       		.byte	0x3a
 1285 013b 3F010000 		.4byte	0x13f
 1286 013f 06       		.uleb128 0x6
 1287 0140 CB000000 		.4byte	0xcb
 1288 0144 02       		.uleb128 0x2
 1289 0145 08       		.byte	0x8
 1290 0146 04       		.byte	0x4
 1291 0147 75020000 		.4byte	.LASF25
 1292 014b 02       		.uleb128 0x2
 1293 014c 04       		.byte	0x4
 1294 014d 07       		.byte	0x7
 1295 014e 70000000 		.4byte	.LASF26
 1296 0152 0A       		.uleb128 0xa
 1297 0153 BF000000 		.4byte	0xbf
 1298 0157 62010000 		.4byte	0x162
 1299 015b 0B       		.uleb128 0xb
 1300 015c 4B010000 		.4byte	0x14b
 1301 0160 17       		.byte	0x17
 1302 0161 00       		.byte	0
 1303 0162 07       		.uleb128 0x7
 1304 0163 2C       		.byte	0x2c
 1305 0164 06       		.byte	0x6
 1306 0165 14       		.byte	0x14
 1307 0166 8F010000 		.4byte	0x18f
 1308 016a 08       		.uleb128 0x8
 1309 016b 6B657900 		.ascii	"key\000"
 1310 016f 06       		.byte	0x6
 1311 0170 15       		.byte	0x15
 1312 0171 8F010000 		.4byte	0x18f
 1313 0175 00       		.byte	0
 1314 0176 09       		.uleb128 0x9
 1315 0177 5A010000 		.4byte	.LASF27
 1316 017b 06       		.byte	0x6
 1317 017c 16       		.byte	0x16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 41


 1318 017d 8F010000 		.4byte	0x18f
 1319 0181 14       		.byte	0x14
 1320 0182 09       		.uleb128 0x9
 1321 0183 9A010000 		.4byte	.LASF28
 1322 0187 06       		.byte	0x6
 1323 0188 17       		.byte	0x17
 1324 0189 A5000000 		.4byte	0xa5
 1325 018d 28       		.byte	0x28
 1326 018e 00       		.byte	0
 1327 018f 0A       		.uleb128 0xa
 1328 0190 BF000000 		.4byte	0xbf
 1329 0194 9F010000 		.4byte	0x19f
 1330 0198 0B       		.uleb128 0xb
 1331 0199 4B010000 		.4byte	0x14b
 1332 019d 13       		.byte	0x13
 1333 019e 00       		.byte	0
 1334 019f 03       		.uleb128 0x3
 1335 01a0 43030000 		.4byte	.LASF29
 1336 01a4 06       		.byte	0x6
 1337 01a5 19       		.byte	0x19
 1338 01a6 62010000 		.4byte	0x162
 1339 01aa 07       		.uleb128 0x7
 1340 01ab 3C       		.byte	0x3c
 1341 01ac 07       		.byte	0x7
 1342 01ad 36       		.byte	0x36
 1343 01ae D7010000 		.4byte	0x1d7
 1344 01b2 09       		.uleb128 0x9
 1345 01b3 1A000000 		.4byte	.LASF30
 1346 01b7 07       		.byte	0x7
 1347 01b8 37       		.byte	0x37
 1348 01b9 8F010000 		.4byte	0x18f
 1349 01bd 00       		.byte	0
 1350 01be 09       		.uleb128 0x9
 1351 01bf 00000000 		.4byte	.LASF31
 1352 01c3 07       		.byte	0x7
 1353 01c4 38       		.byte	0x38
 1354 01c5 8F010000 		.4byte	0x18f
 1355 01c9 14       		.byte	0x14
 1356 01ca 09       		.uleb128 0x9
 1357 01cb 08040000 		.4byte	.LASF32
 1358 01cf 07       		.byte	0x7
 1359 01d0 39       		.byte	0x39
 1360 01d1 8F010000 		.4byte	0x18f
 1361 01d5 28       		.byte	0x28
 1362 01d6 00       		.byte	0
 1363 01d7 03       		.uleb128 0x3
 1364 01d8 26050000 		.4byte	.LASF33
 1365 01dc 07       		.byte	0x7
 1366 01dd 3B       		.byte	0x3b
 1367 01de AA010000 		.4byte	0x1aa
 1368 01e2 07       		.uleb128 0x7
 1369 01e3 20       		.byte	0x20
 1370 01e4 07       		.byte	0x7
 1371 01e5 3D       		.byte	0x3d
 1372 01e6 4B020000 		.4byte	0x24b
 1373 01ea 09       		.uleb128 0x9
 1374 01eb 4F030000 		.4byte	.LASF34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 42


 1375 01ef 07       		.byte	0x7
 1376 01f0 3E       		.byte	0x3e
 1377 01f1 68000000 		.4byte	0x68
 1378 01f5 00       		.byte	0
 1379 01f6 08       		.uleb128 0x8
 1380 01f7 62657200 		.ascii	"ber\000"
 1381 01fb 07       		.byte	0x7
 1382 01fc 3F       		.byte	0x3f
 1383 01fd 68000000 		.4byte	0x68
 1384 0201 04       		.byte	0x4
 1385 0202 09       		.uleb128 0x9
 1386 0203 8F010000 		.4byte	.LASF35
 1387 0207 07       		.byte	0x7
 1388 0208 40       		.byte	0x40
 1389 0209 68000000 		.4byte	0x68
 1390 020d 08       		.byte	0x8
 1391 020e 09       		.uleb128 0x9
 1392 020f 49010000 		.4byte	.LASF36
 1393 0213 07       		.byte	0x7
 1394 0214 41       		.byte	0x41
 1395 0215 68000000 		.4byte	0x68
 1396 0219 0C       		.byte	0xc
 1397 021a 09       		.uleb128 0x9
 1398 021b 68040000 		.4byte	.LASF37
 1399 021f 07       		.byte	0x7
 1400 0220 42       		.byte	0x42
 1401 0221 68000000 		.4byte	0x68
 1402 0225 10       		.byte	0x10
 1403 0226 09       		.uleb128 0x9
 1404 0227 9D020000 		.4byte	.LASF38
 1405 022b 07       		.byte	0x7
 1406 022c 43       		.byte	0x43
 1407 022d 68000000 		.4byte	0x68
 1408 0231 14       		.byte	0x14
 1409 0232 09       		.uleb128 0x9
 1410 0233 BE030000 		.4byte	.LASF39
 1411 0237 07       		.byte	0x7
 1412 0238 44       		.byte	0x44
 1413 0239 68000000 		.4byte	0x68
 1414 023d 18       		.byte	0x18
 1415 023e 09       		.uleb128 0x9
 1416 023f F5030000 		.4byte	.LASF40
 1417 0243 07       		.byte	0x7
 1418 0244 45       		.byte	0x45
 1419 0245 68000000 		.4byte	0x68
 1420 0249 1C       		.byte	0x1c
 1421 024a 00       		.byte	0
 1422 024b 03       		.uleb128 0x3
 1423 024c 1D040000 		.4byte	.LASF41
 1424 0250 07       		.byte	0x7
 1425 0251 47       		.byte	0x47
 1426 0252 E2010000 		.4byte	0x1e2
 1427 0256 07       		.uleb128 0x7
 1428 0257 07       		.byte	0x7
 1429 0258 07       		.byte	0x7
 1430 0259 53       		.byte	0x53
 1431 025a B3020000 		.4byte	0x2b3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 43


 1432 025e 09       		.uleb128 0x9
 1433 025f EC050000 		.4byte	.LASF42
 1434 0263 07       		.byte	0x7
 1435 0264 55       		.byte	0x55
 1436 0265 81000000 		.4byte	0x81
 1437 0269 00       		.byte	0
 1438 026a 09       		.uleb128 0x9
 1439 026b 97030000 		.4byte	.LASF43
 1440 026f 07       		.byte	0x7
 1441 0270 57       		.byte	0x57
 1442 0271 B3020000 		.4byte	0x2b3
 1443 0275 01       		.byte	0x1
 1444 0276 09       		.uleb128 0x9
 1445 0277 4C020000 		.4byte	.LASF44
 1446 027b 07       		.byte	0x7
 1447 027c 59       		.byte	0x59
 1448 027d 81000000 		.4byte	0x81
 1449 0281 02       		.byte	0x2
 1450 0282 09       		.uleb128 0x9
 1451 0283 55030000 		.4byte	.LASF45
 1452 0287 07       		.byte	0x7
 1453 0288 5B       		.byte	0x5b
 1454 0289 81000000 		.4byte	0x81
 1455 028d 03       		.byte	0x3
 1456 028e 09       		.uleb128 0x9
 1457 028f 1A050000 		.4byte	.LASF46
 1458 0293 07       		.byte	0x7
 1459 0294 5E       		.byte	0x5e
 1460 0295 81000000 		.4byte	0x81
 1461 0299 04       		.byte	0x4
 1462 029a 09       		.uleb128 0x9
 1463 029b 29010000 		.4byte	.LASF47
 1464 029f 07       		.byte	0x7
 1465 02a0 63       		.byte	0x63
 1466 02a1 81000000 		.4byte	0x81
 1467 02a5 05       		.byte	0x5
 1468 02a6 09       		.uleb128 0x9
 1469 02a7 59020000 		.4byte	.LASF48
 1470 02ab 07       		.byte	0x7
 1471 02ac 65       		.byte	0x65
 1472 02ad 81000000 		.4byte	0x81
 1473 02b1 06       		.byte	0x6
 1474 02b2 00       		.byte	0
 1475 02b3 02       		.uleb128 0x2
 1476 02b4 01       		.byte	0x1
 1477 02b5 02       		.byte	0x2
 1478 02b6 2B040000 		.4byte	.LASF49
 1479 02ba 03       		.uleb128 0x3
 1480 02bb 80030000 		.4byte	.LASF50
 1481 02bf 07       		.byte	0x7
 1482 02c0 67       		.byte	0x67
 1483 02c1 56020000 		.4byte	0x256
 1484 02c5 07       		.uleb128 0x7
 1485 02c6 06       		.byte	0x6
 1486 02c7 08       		.byte	0x8
 1487 02c8 2E       		.byte	0x2e
 1488 02c9 FE020000 		.4byte	0x2fe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 44


 1489 02cd 09       		.uleb128 0x9
 1490 02ce 57000000 		.4byte	.LASF51
 1491 02d2 08       		.byte	0x8
 1492 02d3 30       		.byte	0x30
 1493 02d4 8D000000 		.4byte	0x8d
 1494 02d8 00       		.byte	0
 1495 02d9 09       		.uleb128 0x9
 1496 02da 41000000 		.4byte	.LASF52
 1497 02de 08       		.byte	0x8
 1498 02df 31       		.byte	0x31
 1499 02e0 99000000 		.4byte	0x99
 1500 02e4 02       		.byte	0x2
 1501 02e5 09       		.uleb128 0x9
 1502 02e6 33050000 		.4byte	.LASF53
 1503 02ea 08       		.byte	0x8
 1504 02eb 32       		.byte	0x32
 1505 02ec 81000000 		.4byte	0x81
 1506 02f0 04       		.byte	0x4
 1507 02f1 09       		.uleb128 0x9
 1508 02f2 0E060000 		.4byte	.LASF54
 1509 02f6 08       		.byte	0x8
 1510 02f7 33       		.byte	0x33
 1511 02f8 81000000 		.4byte	0x81
 1512 02fc 05       		.byte	0x5
 1513 02fd 00       		.byte	0
 1514 02fe 03       		.uleb128 0x3
 1515 02ff 46020000 		.4byte	.LASF55
 1516 0303 08       		.byte	0x8
 1517 0304 36       		.byte	0x36
 1518 0305 09030000 		.4byte	0x309
 1519 0309 06       		.uleb128 0x6
 1520 030a C5020000 		.4byte	0x2c5
 1521 030e 07       		.uleb128 0x7
 1522 030f 1C       		.byte	0x1c
 1523 0310 08       		.byte	0x8
 1524 0311 39       		.byte	0x39
 1525 0312 2F030000 		.4byte	0x32f
 1526 0316 09       		.uleb128 0x9
 1527 0317 F9010000 		.4byte	.LASF56
 1528 031b 08       		.byte	0x8
 1529 031c 3B       		.byte	0x3b
 1530 031d 2F030000 		.4byte	0x32f
 1531 0321 00       		.byte	0
 1532 0322 09       		.uleb128 0x9
 1533 0323 3B010000 		.4byte	.LASF57
 1534 0327 08       		.byte	0x8
 1535 0328 3C       		.byte	0x3c
 1536 0329 52010000 		.4byte	0x152
 1537 032d 04       		.byte	0x4
 1538 032e 00       		.byte	0
 1539 032f 0C       		.uleb128 0xc
 1540 0330 04       		.byte	0x4
 1541 0331 D7010000 		.4byte	0x1d7
 1542 0335 03       		.uleb128 0x3
 1543 0336 A0030000 		.4byte	.LASF58
 1544 033a 08       		.byte	0x8
 1545 033b 3E       		.byte	0x3e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 45


 1546 033c 0E030000 		.4byte	0x30e
 1547 0340 07       		.uleb128 0x7
 1548 0341 68       		.byte	0x68
 1549 0342 08       		.byte	0x8
 1550 0343 44       		.byte	0x44
 1551 0344 61030000 		.4byte	0x361
 1552 0348 09       		.uleb128 0x9
 1553 0349 79000000 		.4byte	.LASF59
 1554 034d 08       		.byte	0x8
 1555 034e 49       		.byte	0x49
 1556 034f 61030000 		.4byte	0x361
 1557 0353 00       		.byte	0
 1558 0354 09       		.uleb128 0x9
 1559 0355 67010000 		.4byte	.LASF60
 1560 0359 08       		.byte	0x8
 1561 035a 4A       		.byte	0x4a
 1562 035b 68000000 		.4byte	0x68
 1563 035f 64       		.byte	0x64
 1564 0360 00       		.byte	0
 1565 0361 0A       		.uleb128 0xa
 1566 0362 BF000000 		.4byte	0xbf
 1567 0366 71030000 		.4byte	0x371
 1568 036a 0B       		.uleb128 0xb
 1569 036b 4B010000 		.4byte	0x14b
 1570 036f 63       		.byte	0x63
 1571 0370 00       		.byte	0
 1572 0371 03       		.uleb128 0x3
 1573 0372 32000000 		.4byte	.LASF61
 1574 0376 08       		.byte	0x8
 1575 0377 50       		.byte	0x50
 1576 0378 40030000 		.4byte	0x340
 1577 037c 0D       		.uleb128 0xd
 1578 037d E6040000 		.4byte	.LASF62
 1579 0381 01       		.byte	0x1
 1580 0382 36       		.byte	0x36
 1581 0383 00000000 		.4byte	.LFB64
 1582 0387 0E000000 		.4byte	.LFE64-.LFB64
 1583 038b 01       		.uleb128 0x1
 1584 038c 9C       		.byte	0x9c
 1585 038d 0D       		.uleb128 0xd
 1586 038e B0040000 		.4byte	.LASF63
 1587 0392 01       		.byte	0x1
 1588 0393 51       		.byte	0x51
 1589 0394 00000000 		.4byte	.LFB65
 1590 0398 0E000000 		.4byte	.LFE65-.LFB65
 1591 039c 01       		.uleb128 0x1
 1592 039d 9C       		.byte	0x9c
 1593 039e 0D       		.uleb128 0xd
 1594 039f 48040000 		.4byte	.LASF64
 1595 03a3 01       		.byte	0x1
 1596 03a4 6C       		.byte	0x6c
 1597 03a5 00000000 		.4byte	.LFB66
 1598 03a9 0E000000 		.4byte	.LFE66-.LFB66
 1599 03ad 01       		.uleb128 0x1
 1600 03ae 9C       		.byte	0x9c
 1601 03af 0D       		.uleb128 0xd
 1602 03b0 32020000 		.4byte	.LASF65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 46


 1603 03b4 01       		.byte	0x1
 1604 03b5 87       		.byte	0x87
 1605 03b6 00000000 		.4byte	.LFB67
 1606 03ba 0E000000 		.4byte	.LFE67-.LFB67
 1607 03be 01       		.uleb128 0x1
 1608 03bf 9C       		.byte	0x9c
 1609 03c0 0D       		.uleb128 0xd
 1610 03c1 0F010000 		.4byte	.LASF66
 1611 03c5 01       		.byte	0x1
 1612 03c6 A2       		.byte	0xa2
 1613 03c7 00000000 		.4byte	.LFB68
 1614 03cb 0E000000 		.4byte	.LFE68-.LFB68
 1615 03cf 01       		.uleb128 0x1
 1616 03d0 9C       		.byte	0x9c
 1617 03d1 0D       		.uleb128 0xd
 1618 03d2 04020000 		.4byte	.LASF67
 1619 03d6 01       		.byte	0x1
 1620 03d7 BD       		.byte	0xbd
 1621 03d8 00000000 		.4byte	.LFB69
 1622 03dc 0E000000 		.4byte	.LFE69-.LFB69
 1623 03e0 01       		.uleb128 0x1
 1624 03e1 9C       		.byte	0x9c
 1625 03e2 0D       		.uleb128 0xd
 1626 03e3 E6020000 		.4byte	.LASF68
 1627 03e7 01       		.byte	0x1
 1628 03e8 D8       		.byte	0xd8
 1629 03e9 00000000 		.4byte	.LFB70
 1630 03ed 0E000000 		.4byte	.LFE70-.LFB70
 1631 03f1 01       		.uleb128 0x1
 1632 03f2 9C       		.byte	0x9c
 1633 03f3 0E       		.uleb128 0xe
 1634 03f4 87010000 		.4byte	.LASF104
 1635 03f8 01       		.byte	0x1
 1636 03f9 0B01     		.2byte	0x10b
 1637 03fb 00000000 		.4byte	.LFB71
 1638 03ff 18060000 		.4byte	.LFE71-.LFB71
 1639 0403 01       		.uleb128 0x1
 1640 0404 9C       		.byte	0x9c
 1641 0405 19040000 		.4byte	0x419
 1642 0409 0F       		.uleb128 0xf
 1643 040a 15040000 		.4byte	.LASF105
 1644 040e 01       		.byte	0x1
 1645 040f 0D01     		.2byte	0x10d
 1646 0411 81000000 		.4byte	0x81
 1647 0415 02       		.uleb128 0x2
 1648 0416 91       		.byte	0x91
 1649 0417 77       		.sleb128 -9
 1650 0418 00       		.byte	0
 1651 0419 10       		.uleb128 0x10
 1652 041a B9020000 		.4byte	.LASF69
 1653 041e 05       		.byte	0x5
 1654 041f 2D01     		.2byte	0x12d
 1655 0421 34010000 		.4byte	0x134
 1656 0425 10       		.uleb128 0x10
 1657 0426 22030000 		.4byte	.LASF70
 1658 042a 05       		.byte	0x5
 1659 042b 2E01     		.2byte	0x12e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 47


 1660 042d 34010000 		.4byte	0x134
 1661 0431 10       		.uleb128 0x10
 1662 0432 09000000 		.4byte	.LASF71
 1663 0436 05       		.byte	0x5
 1664 0437 3901     		.2byte	0x139
 1665 0439 C6000000 		.4byte	0xc6
 1666 043d 10       		.uleb128 0x10
 1667 043e 5F030000 		.4byte	.LASF72
 1668 0442 05       		.byte	0x5
 1669 0443 3A01     		.2byte	0x13a
 1670 0445 C6000000 		.4byte	0xc6
 1671 0449 10       		.uleb128 0x10
 1672 044a CE050000 		.4byte	.LASF73
 1673 044e 05       		.byte	0x5
 1674 044f 3B01     		.2byte	0x13b
 1675 0451 C6000000 		.4byte	0xc6
 1676 0455 10       		.uleb128 0x10
 1677 0456 41050000 		.4byte	.LASF74
 1678 045a 05       		.byte	0x5
 1679 045b 3C01     		.2byte	0x13c
 1680 045d C6000000 		.4byte	0xc6
 1681 0461 0A       		.uleb128 0xa
 1682 0462 71040000 		.4byte	0x471
 1683 0466 71040000 		.4byte	0x471
 1684 046a 0B       		.uleb128 0xb
 1685 046b 4B010000 		.4byte	0x14b
 1686 046f 0B       		.byte	0xb
 1687 0470 00       		.byte	0
 1688 0471 11       		.uleb128 0x11
 1689 0472 81000000 		.4byte	0x81
 1690 0476 10       		.uleb128 0x10
 1691 0477 21000000 		.4byte	.LASF75
 1692 047b 05       		.byte	0x5
 1693 047c 3E01     		.2byte	0x13e
 1694 047e 82040000 		.4byte	0x482
 1695 0482 11       		.uleb128 0x11
 1696 0483 61040000 		.4byte	0x461
 1697 0487 10       		.uleb128 0x10
 1698 0488 B3050000 		.4byte	.LASF76
 1699 048c 09       		.byte	0x9
 1700 048d 1207     		.2byte	0x712
 1701 048f 93040000 		.4byte	0x493
 1702 0493 06       		.uleb128 0x6
 1703 0494 76000000 		.4byte	0x76
 1704 0498 12       		.uleb128 0x12
 1705 0499 D6030000 		.4byte	.LASF77
 1706 049d 0A       		.byte	0xa
 1707 049e 25       		.byte	0x25
 1708 049f 61030000 		.4byte	0x361
 1709 04a3 05       		.uleb128 0x5
 1710 04a4 03       		.byte	0x3
 1711 04a5 00000000 		.4byte	level_sensor_inbox
 1712 04a9 12       		.uleb128 0x12
 1713 04aa E9010000 		.4byte	.LASF78
 1714 04ae 06       		.byte	0x6
 1715 04af 11       		.byte	0x11
 1716 04b0 B3020000 		.4byte	0x2b3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 48


 1717 04b4 05       		.uleb128 0x5
 1718 04b5 03       		.byte	0x3
 1719 04b6 00000000 		.4byte	buffer_overflow
 1720 04ba 12       		.uleb128 0x12
 1721 04bb 6F010000 		.4byte	.LASF79
 1722 04bf 06       		.byte	0x6
 1723 04c0 22       		.byte	0x22
 1724 04c1 8D000000 		.4byte	0x8d
 1725 04c5 05       		.uleb128 0x5
 1726 04c6 03       		.byte	0x3
 1727 04c7 00000000 		.4byte	dataPointsInStack
 1728 04cb 12       		.uleb128 0x12
 1729 04cc A4010000 		.4byte	.LASF80
 1730 04d0 06       		.byte	0x6
 1731 04d1 23       		.byte	0x23
 1732 04d2 8D000000 		.4byte	0x8d
 1733 04d6 05       		.uleb128 0x5
 1734 04d7 03       		.byte	0x3
 1735 04d8 00000000 		.4byte	dataPointsInStackDesired
 1736 04dc 0A       		.uleb128 0xa
 1737 04dd 9F010000 		.4byte	0x19f
 1738 04e1 EC040000 		.4byte	0x4ec
 1739 04e5 0B       		.uleb128 0xb
 1740 04e6 4B010000 		.4byte	0x14b
 1741 04ea 95       		.byte	0x95
 1742 04eb 00       		.byte	0
 1743 04ec 12       		.uleb128 0x12
 1744 04ed 24010000 		.4byte	.LASF81
 1745 04f1 06       		.byte	0x6
 1746 04f2 24       		.byte	0x24
 1747 04f3 DC040000 		.4byte	0x4dc
 1748 04f7 05       		.uleb128 0x5
 1749 04f8 03       		.byte	0x3
 1750 04f9 00000000 		.4byte	data
 1751 04fd 12       		.uleb128 0x12
 1752 04fe CE020000 		.4byte	.LASF82
 1753 0502 07       		.byte	0x7
 1754 0503 20       		.byte	0x20
 1755 0504 81000000 		.4byte	0x81
 1756 0508 05       		.uleb128 0x5
 1757 0509 03       		.byte	0x3
 1758 050a 00000000 		.4byte	modem_state
 1759 050e 12       		.uleb128 0x12
 1760 050f A2020000 		.4byte	.LASF83
 1761 0513 07       		.byte	0x7
 1762 0514 6A       		.byte	0x6a
 1763 0515 A5000000 		.4byte	0xa5
 1764 0519 05       		.uleb128 0x5
 1765 051a 03       		.byte	0x3
 1766 051b 00000000 		.4byte	modem_start_time_stamp
 1767 051f 12       		.uleb128 0x12
 1768 0520 F9010000 		.4byte	.LASF56
 1769 0524 07       		.byte	0x7
 1770 0525 6B       		.byte	0x6b
 1771 0526 D7010000 		.4byte	0x1d7
 1772 052a 05       		.uleb128 0x5
 1773 052b 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 49


 1774 052c 00000000 		.4byte	modem_info
 1775 0530 12       		.uleb128 0x12
 1776 0531 FD040000 		.4byte	.LASF84
 1777 0535 07       		.byte	0x7
 1778 0536 6C       		.byte	0x6c
 1779 0537 4B020000 		.4byte	0x24b
 1780 053b 05       		.uleb128 0x5
 1781 053c 03       		.byte	0x3
 1782 053d 00000000 		.4byte	modem_stats
 1783 0541 12       		.uleb128 0x12
 1784 0542 9E050000 		.4byte	.LASF85
 1785 0546 07       		.byte	0x7
 1786 0547 6D       		.byte	0x6d
 1787 0548 BA020000 		.4byte	0x2ba
 1788 054c 05       		.uleb128 0x5
 1789 054d 03       		.byte	0x3
 1790 054e 00000000 		.4byte	updatable_parameters
 1791 0552 12       		.uleb128 0x12
 1792 0553 81020000 		.4byte	.LASF86
 1793 0557 0B       		.byte	0xb
 1794 0558 12       		.byte	0x12
 1795 0559 61030000 		.4byte	0x361
 1796 055d 05       		.uleb128 0x5
 1797 055e 03       		.byte	0x3
 1798 055f 00000000 		.4byte	app_led_inbox
 1799 0563 0A       		.uleb128 0xa
 1800 0564 BF000000 		.4byte	0xbf
 1801 0568 74050000 		.4byte	0x574
 1802 056c 13       		.uleb128 0x13
 1803 056d 4B010000 		.4byte	0x14b
 1804 0571 0F27     		.2byte	0x270f
 1805 0573 00       		.byte	0
 1806 0574 12       		.uleb128 0x12
 1807 0575 F6050000 		.4byte	.LASF87
 1808 0579 08       		.byte	0x8
 1809 057a 18       		.byte	0x18
 1810 057b 63050000 		.4byte	0x563
 1811 057f 05       		.uleb128 0x5
 1812 0580 03       		.byte	0x3
 1813 0581 00000000 		.4byte	http_request
 1814 0585 12       		.uleb128 0x12
 1815 0586 E2050000 		.4byte	.LASF88
 1816 058a 08       		.byte	0x8
 1817 058b 19       		.byte	0x19
 1818 058c 63050000 		.4byte	0x563
 1819 0590 05       		.uleb128 0x5
 1820 0591 03       		.byte	0x3
 1821 0592 00000000 		.4byte	http_body
 1822 0596 0A       		.uleb128 0xa
 1823 0597 BF000000 		.4byte	0xbf
 1824 059b A6050000 		.4byte	0x5a6
 1825 059f 0B       		.uleb128 0xb
 1826 05a0 4B010000 		.4byte	0x14b
 1827 05a4 C7       		.byte	0xc7
 1828 05a5 00       		.byte	0
 1829 05a6 12       		.uleb128 0x12
 1830 05a7 A5040000 		.4byte	.LASF89
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 50


 1831 05ab 08       		.byte	0x8
 1832 05ac 1A       		.byte	0x1a
 1833 05ad 96050000 		.4byte	0x596
 1834 05b1 05       		.uleb128 0x5
 1835 05b2 03       		.byte	0x3
 1836 05b3 00000000 		.4byte	http_route
 1837 05b7 12       		.uleb128 0x12
 1838 05b8 E9030000 		.4byte	.LASF90
 1839 05bc 08       		.byte	0x8
 1840 05bd 41       		.byte	0x41
 1841 05be 35030000 		.4byte	0x335
 1842 05c2 05       		.uleb128 0x5
 1843 05c3 03       		.byte	0x3
 1844 05c4 00000000 		.4byte	system_info
 1845 05c8 12       		.uleb128 0x12
 1846 05c9 12030000 		.4byte	.LASF91
 1847 05cd 08       		.byte	0x8
 1848 05ce 53       		.byte	0x53
 1849 05cf 71030000 		.4byte	0x371
 1850 05d3 05       		.uleb128 0x5
 1851 05d4 03       		.byte	0x3
 1852 05d5 00000000 		.4byte	system_settings
 1853 05d9 12       		.uleb128 0x12
 1854 05da 1A020000 		.4byte	.LASF92
 1855 05de 08       		.byte	0x8
 1856 05df 6F       		.byte	0x6f
 1857 05e0 FE020000 		.4byte	0x2fe
 1858 05e4 05       		.uleb128 0x5
 1859 05e5 03       		.byte	0x3
 1860 05e6 00000000 		.4byte	alarmMeasure
 1861 05ea 12       		.uleb128 0x12
 1862 05eb 72030000 		.4byte	.LASF93
 1863 05ef 08       		.byte	0x8
 1864 05f0 70       		.byte	0x70
 1865 05f1 81000000 		.4byte	0x81
 1866 05f5 05       		.uleb128 0x5
 1867 05f6 03       		.byte	0x3
 1868 05f7 00000000 		.4byte	timeToMeasure
 1869 05fb 12       		.uleb128 0x12
 1870 05fc 6B020000 		.4byte	.LASF94
 1871 0600 08       		.byte	0x8
 1872 0601 71       		.byte	0x71
 1873 0602 FE020000 		.4byte	0x2fe
 1874 0606 05       		.uleb128 0x5
 1875 0607 03       		.byte	0x3
 1876 0608 00000000 		.4byte	alarmSync
 1877 060c 12       		.uleb128 0x12
 1878 060d 03060000 		.4byte	.LASF95
 1879 0611 08       		.byte	0x8
 1880 0612 72       		.byte	0x72
 1881 0613 81000000 		.4byte	0x81
 1882 0617 05       		.uleb128 0x5
 1883 0618 03       		.byte	0x3
 1884 0619 00000000 		.4byte	timeToSync
 1885 061d 12       		.uleb128 0x12
 1886 061e 31040000 		.4byte	.LASF96
 1887 0622 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 51


 1888 0623 73       		.byte	0x73
 1889 0624 81000000 		.4byte	0x81
 1890 0628 05       		.uleb128 0x5
 1891 0629 03       		.byte	0x3
 1892 062a 00000000 		.4byte	timeToSycnRemoteParams
 1893 062e 14       		.uleb128 0x14
 1894 062f 68657900 		.ascii	"hey\000"
 1895 0633 08       		.byte	0x8
 1896 0634 74       		.byte	0x74
 1897 0635 81000000 		.4byte	0x81
 1898 0639 05       		.uleb128 0x5
 1899 063a 03       		.byte	0x3
 1900 063b 00000000 		.4byte	hey
 1901 063f 12       		.uleb128 0x12
 1902 0640 4E010000 		.4byte	.LASF97
 1903 0644 08       		.byte	0x8
 1904 0645 77       		.byte	0x77
 1905 0646 FE020000 		.4byte	0x2fe
 1906 064a 05       		.uleb128 0x5
 1907 064b 03       		.byte	0x3
 1908 064c 00000000 		.4byte	alarmAppLED
 1909 0650 12       		.uleb128 0x12
 1910 0651 5E050000 		.4byte	.LASF98
 1911 0655 08       		.byte	0x8
 1912 0656 78       		.byte	0x78
 1913 0657 81000000 		.4byte	0x81
 1914 065b 05       		.uleb128 0x5
 1915 065c 03       		.byte	0x3
 1916 065d 00000000 		.4byte	timeToAppLED
 1917 0661 12       		.uleb128 0x12
 1918 0662 09050000 		.4byte	.LASF99
 1919 0666 08       		.byte	0x8
 1920 0667 7A       		.byte	0x7a
 1921 0668 FE020000 		.4byte	0x2fe
 1922 066c 05       		.uleb128 0x5
 1923 066d 03       		.byte	0x3
 1924 066e 00000000 		.4byte	alarmLevelSensor
 1925 0672 12       		.uleb128 0x12
 1926 0673 8C050000 		.4byte	.LASF100
 1927 0677 08       		.byte	0x8
 1928 0678 7B       		.byte	0x7b
 1929 0679 81000000 		.4byte	0x81
 1930 067d 05       		.uleb128 0x5
 1931 067e 03       		.byte	0x3
 1932 067f 00000000 		.4byte	timetoLevelSensor
 1933 0683 00       		.byte	0
 1934              		.section	.debug_abbrev,"",%progbits
 1935              	.Ldebug_abbrev0:
 1936 0000 01       		.uleb128 0x1
 1937 0001 11       		.uleb128 0x11
 1938 0002 01       		.byte	0x1
 1939 0003 25       		.uleb128 0x25
 1940 0004 0E       		.uleb128 0xe
 1941 0005 13       		.uleb128 0x13
 1942 0006 0B       		.uleb128 0xb
 1943 0007 03       		.uleb128 0x3
 1944 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 52


 1945 0009 1B       		.uleb128 0x1b
 1946 000a 0E       		.uleb128 0xe
 1947 000b 55       		.uleb128 0x55
 1948 000c 17       		.uleb128 0x17
 1949 000d 11       		.uleb128 0x11
 1950 000e 01       		.uleb128 0x1
 1951 000f 10       		.uleb128 0x10
 1952 0010 17       		.uleb128 0x17
 1953 0011 00       		.byte	0
 1954 0012 00       		.byte	0
 1955 0013 02       		.uleb128 0x2
 1956 0014 24       		.uleb128 0x24
 1957 0015 00       		.byte	0
 1958 0016 0B       		.uleb128 0xb
 1959 0017 0B       		.uleb128 0xb
 1960 0018 3E       		.uleb128 0x3e
 1961 0019 0B       		.uleb128 0xb
 1962 001a 03       		.uleb128 0x3
 1963 001b 0E       		.uleb128 0xe
 1964 001c 00       		.byte	0
 1965 001d 00       		.byte	0
 1966 001e 03       		.uleb128 0x3
 1967 001f 16       		.uleb128 0x16
 1968 0020 00       		.byte	0
 1969 0021 03       		.uleb128 0x3
 1970 0022 0E       		.uleb128 0xe
 1971 0023 3A       		.uleb128 0x3a
 1972 0024 0B       		.uleb128 0xb
 1973 0025 3B       		.uleb128 0x3b
 1974 0026 0B       		.uleb128 0xb
 1975 0027 49       		.uleb128 0x49
 1976 0028 13       		.uleb128 0x13
 1977 0029 00       		.byte	0
 1978 002a 00       		.byte	0
 1979 002b 04       		.uleb128 0x4
 1980 002c 24       		.uleb128 0x24
 1981 002d 00       		.byte	0
 1982 002e 0B       		.uleb128 0xb
 1983 002f 0B       		.uleb128 0xb
 1984 0030 3E       		.uleb128 0x3e
 1985 0031 0B       		.uleb128 0xb
 1986 0032 03       		.uleb128 0x3
 1987 0033 08       		.uleb128 0x8
 1988 0034 00       		.byte	0
 1989 0035 00       		.byte	0
 1990 0036 05       		.uleb128 0x5
 1991 0037 16       		.uleb128 0x16
 1992 0038 00       		.byte	0
 1993 0039 03       		.uleb128 0x3
 1994 003a 0E       		.uleb128 0xe
 1995 003b 3A       		.uleb128 0x3a
 1996 003c 0B       		.uleb128 0xb
 1997 003d 3B       		.uleb128 0x3b
 1998 003e 05       		.uleb128 0x5
 1999 003f 49       		.uleb128 0x49
 2000 0040 13       		.uleb128 0x13
 2001 0041 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 53


 2002 0042 00       		.byte	0
 2003 0043 06       		.uleb128 0x6
 2004 0044 35       		.uleb128 0x35
 2005 0045 00       		.byte	0
 2006 0046 49       		.uleb128 0x49
 2007 0047 13       		.uleb128 0x13
 2008 0048 00       		.byte	0
 2009 0049 00       		.byte	0
 2010 004a 07       		.uleb128 0x7
 2011 004b 13       		.uleb128 0x13
 2012 004c 01       		.byte	0x1
 2013 004d 0B       		.uleb128 0xb
 2014 004e 0B       		.uleb128 0xb
 2015 004f 3A       		.uleb128 0x3a
 2016 0050 0B       		.uleb128 0xb
 2017 0051 3B       		.uleb128 0x3b
 2018 0052 0B       		.uleb128 0xb
 2019 0053 01       		.uleb128 0x1
 2020 0054 13       		.uleb128 0x13
 2021 0055 00       		.byte	0
 2022 0056 00       		.byte	0
 2023 0057 08       		.uleb128 0x8
 2024 0058 0D       		.uleb128 0xd
 2025 0059 00       		.byte	0
 2026 005a 03       		.uleb128 0x3
 2027 005b 08       		.uleb128 0x8
 2028 005c 3A       		.uleb128 0x3a
 2029 005d 0B       		.uleb128 0xb
 2030 005e 3B       		.uleb128 0x3b
 2031 005f 0B       		.uleb128 0xb
 2032 0060 49       		.uleb128 0x49
 2033 0061 13       		.uleb128 0x13
 2034 0062 38       		.uleb128 0x38
 2035 0063 0B       		.uleb128 0xb
 2036 0064 00       		.byte	0
 2037 0065 00       		.byte	0
 2038 0066 09       		.uleb128 0x9
 2039 0067 0D       		.uleb128 0xd
 2040 0068 00       		.byte	0
 2041 0069 03       		.uleb128 0x3
 2042 006a 0E       		.uleb128 0xe
 2043 006b 3A       		.uleb128 0x3a
 2044 006c 0B       		.uleb128 0xb
 2045 006d 3B       		.uleb128 0x3b
 2046 006e 0B       		.uleb128 0xb
 2047 006f 49       		.uleb128 0x49
 2048 0070 13       		.uleb128 0x13
 2049 0071 38       		.uleb128 0x38
 2050 0072 0B       		.uleb128 0xb
 2051 0073 00       		.byte	0
 2052 0074 00       		.byte	0
 2053 0075 0A       		.uleb128 0xa
 2054 0076 01       		.uleb128 0x1
 2055 0077 01       		.byte	0x1
 2056 0078 49       		.uleb128 0x49
 2057 0079 13       		.uleb128 0x13
 2058 007a 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 54


 2059 007b 13       		.uleb128 0x13
 2060 007c 00       		.byte	0
 2061 007d 00       		.byte	0
 2062 007e 0B       		.uleb128 0xb
 2063 007f 21       		.uleb128 0x21
 2064 0080 00       		.byte	0
 2065 0081 49       		.uleb128 0x49
 2066 0082 13       		.uleb128 0x13
 2067 0083 2F       		.uleb128 0x2f
 2068 0084 0B       		.uleb128 0xb
 2069 0085 00       		.byte	0
 2070 0086 00       		.byte	0
 2071 0087 0C       		.uleb128 0xc
 2072 0088 0F       		.uleb128 0xf
 2073 0089 00       		.byte	0
 2074 008a 0B       		.uleb128 0xb
 2075 008b 0B       		.uleb128 0xb
 2076 008c 49       		.uleb128 0x49
 2077 008d 13       		.uleb128 0x13
 2078 008e 00       		.byte	0
 2079 008f 00       		.byte	0
 2080 0090 0D       		.uleb128 0xd
 2081 0091 2E       		.uleb128 0x2e
 2082 0092 00       		.byte	0
 2083 0093 03       		.uleb128 0x3
 2084 0094 0E       		.uleb128 0xe
 2085 0095 3A       		.uleb128 0x3a
 2086 0096 0B       		.uleb128 0xb
 2087 0097 3B       		.uleb128 0x3b
 2088 0098 0B       		.uleb128 0xb
 2089 0099 27       		.uleb128 0x27
 2090 009a 19       		.uleb128 0x19
 2091 009b 11       		.uleb128 0x11
 2092 009c 01       		.uleb128 0x1
 2093 009d 12       		.uleb128 0x12
 2094 009e 06       		.uleb128 0x6
 2095 009f 40       		.uleb128 0x40
 2096 00a0 18       		.uleb128 0x18
 2097 00a1 9642     		.uleb128 0x2116
 2098 00a3 19       		.uleb128 0x19
 2099 00a4 00       		.byte	0
 2100 00a5 00       		.byte	0
 2101 00a6 0E       		.uleb128 0xe
 2102 00a7 2E       		.uleb128 0x2e
 2103 00a8 01       		.byte	0x1
 2104 00a9 3F       		.uleb128 0x3f
 2105 00aa 19       		.uleb128 0x19
 2106 00ab 03       		.uleb128 0x3
 2107 00ac 0E       		.uleb128 0xe
 2108 00ad 3A       		.uleb128 0x3a
 2109 00ae 0B       		.uleb128 0xb
 2110 00af 3B       		.uleb128 0x3b
 2111 00b0 05       		.uleb128 0x5
 2112 00b1 27       		.uleb128 0x27
 2113 00b2 19       		.uleb128 0x19
 2114 00b3 11       		.uleb128 0x11
 2115 00b4 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 55


 2116 00b5 12       		.uleb128 0x12
 2117 00b6 06       		.uleb128 0x6
 2118 00b7 40       		.uleb128 0x40
 2119 00b8 18       		.uleb128 0x18
 2120 00b9 9642     		.uleb128 0x2116
 2121 00bb 19       		.uleb128 0x19
 2122 00bc 01       		.uleb128 0x1
 2123 00bd 13       		.uleb128 0x13
 2124 00be 00       		.byte	0
 2125 00bf 00       		.byte	0
 2126 00c0 0F       		.uleb128 0xf
 2127 00c1 34       		.uleb128 0x34
 2128 00c2 00       		.byte	0
 2129 00c3 03       		.uleb128 0x3
 2130 00c4 0E       		.uleb128 0xe
 2131 00c5 3A       		.uleb128 0x3a
 2132 00c6 0B       		.uleb128 0xb
 2133 00c7 3B       		.uleb128 0x3b
 2134 00c8 05       		.uleb128 0x5
 2135 00c9 49       		.uleb128 0x49
 2136 00ca 13       		.uleb128 0x13
 2137 00cb 02       		.uleb128 0x2
 2138 00cc 18       		.uleb128 0x18
 2139 00cd 00       		.byte	0
 2140 00ce 00       		.byte	0
 2141 00cf 10       		.uleb128 0x10
 2142 00d0 34       		.uleb128 0x34
 2143 00d1 00       		.byte	0
 2144 00d2 03       		.uleb128 0x3
 2145 00d3 0E       		.uleb128 0xe
 2146 00d4 3A       		.uleb128 0x3a
 2147 00d5 0B       		.uleb128 0xb
 2148 00d6 3B       		.uleb128 0x3b
 2149 00d7 05       		.uleb128 0x5
 2150 00d8 49       		.uleb128 0x49
 2151 00d9 13       		.uleb128 0x13
 2152 00da 3F       		.uleb128 0x3f
 2153 00db 19       		.uleb128 0x19
 2154 00dc 3C       		.uleb128 0x3c
 2155 00dd 19       		.uleb128 0x19
 2156 00de 00       		.byte	0
 2157 00df 00       		.byte	0
 2158 00e0 11       		.uleb128 0x11
 2159 00e1 26       		.uleb128 0x26
 2160 00e2 00       		.byte	0
 2161 00e3 49       		.uleb128 0x49
 2162 00e4 13       		.uleb128 0x13
 2163 00e5 00       		.byte	0
 2164 00e6 00       		.byte	0
 2165 00e7 12       		.uleb128 0x12
 2166 00e8 34       		.uleb128 0x34
 2167 00e9 00       		.byte	0
 2168 00ea 03       		.uleb128 0x3
 2169 00eb 0E       		.uleb128 0xe
 2170 00ec 3A       		.uleb128 0x3a
 2171 00ed 0B       		.uleb128 0xb
 2172 00ee 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 56


 2173 00ef 0B       		.uleb128 0xb
 2174 00f0 49       		.uleb128 0x49
 2175 00f1 13       		.uleb128 0x13
 2176 00f2 3F       		.uleb128 0x3f
 2177 00f3 19       		.uleb128 0x19
 2178 00f4 02       		.uleb128 0x2
 2179 00f5 18       		.uleb128 0x18
 2180 00f6 00       		.byte	0
 2181 00f7 00       		.byte	0
 2182 00f8 13       		.uleb128 0x13
 2183 00f9 21       		.uleb128 0x21
 2184 00fa 00       		.byte	0
 2185 00fb 49       		.uleb128 0x49
 2186 00fc 13       		.uleb128 0x13
 2187 00fd 2F       		.uleb128 0x2f
 2188 00fe 05       		.uleb128 0x5
 2189 00ff 00       		.byte	0
 2190 0100 00       		.byte	0
 2191 0101 14       		.uleb128 0x14
 2192 0102 34       		.uleb128 0x34
 2193 0103 00       		.byte	0
 2194 0104 03       		.uleb128 0x3
 2195 0105 08       		.uleb128 0x8
 2196 0106 3A       		.uleb128 0x3a
 2197 0107 0B       		.uleb128 0xb
 2198 0108 3B       		.uleb128 0x3b
 2199 0109 0B       		.uleb128 0xb
 2200 010a 49       		.uleb128 0x49
 2201 010b 13       		.uleb128 0x13
 2202 010c 3F       		.uleb128 0x3f
 2203 010d 19       		.uleb128 0x19
 2204 010e 02       		.uleb128 0x2
 2205 010f 18       		.uleb128 0x18
 2206 0110 00       		.byte	0
 2207 0111 00       		.byte	0
 2208 0112 00       		.byte	0
 2209              		.section	.debug_aranges,"",%progbits
 2210 0000 54000000 		.4byte	0x54
 2211 0004 0200     		.2byte	0x2
 2212 0006 00000000 		.4byte	.Ldebug_info0
 2213 000a 04       		.byte	0x4
 2214 000b 00       		.byte	0
 2215 000c 0000     		.2byte	0
 2216 000e 0000     		.2byte	0
 2217 0010 00000000 		.4byte	.LFB64
 2218 0014 0E000000 		.4byte	.LFE64-.LFB64
 2219 0018 00000000 		.4byte	.LFB65
 2220 001c 0E000000 		.4byte	.LFE65-.LFB65
 2221 0020 00000000 		.4byte	.LFB66
 2222 0024 0E000000 		.4byte	.LFE66-.LFB66
 2223 0028 00000000 		.4byte	.LFB67
 2224 002c 0E000000 		.4byte	.LFE67-.LFB67
 2225 0030 00000000 		.4byte	.LFB68
 2226 0034 0E000000 		.4byte	.LFE68-.LFB68
 2227 0038 00000000 		.4byte	.LFB69
 2228 003c 0E000000 		.4byte	.LFE69-.LFB69
 2229 0040 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 57


 2230 0044 0E000000 		.4byte	.LFE70-.LFB70
 2231 0048 00000000 		.4byte	.LFB71
 2232 004c 18060000 		.4byte	.LFE71-.LFB71
 2233 0050 00000000 		.4byte	0
 2234 0054 00000000 		.4byte	0
 2235              		.section	.debug_ranges,"",%progbits
 2236              	.Ldebug_ranges0:
 2237 0000 00000000 		.4byte	.LFB64
 2238 0004 0E000000 		.4byte	.LFE64
 2239 0008 00000000 		.4byte	.LFB65
 2240 000c 0E000000 		.4byte	.LFE65
 2241 0010 00000000 		.4byte	.LFB66
 2242 0014 0E000000 		.4byte	.LFE66
 2243 0018 00000000 		.4byte	.LFB67
 2244 001c 0E000000 		.4byte	.LFE67
 2245 0020 00000000 		.4byte	.LFB68
 2246 0024 0E000000 		.4byte	.LFE68
 2247 0028 00000000 		.4byte	.LFB69
 2248 002c 0E000000 		.4byte	.LFE69
 2249 0030 00000000 		.4byte	.LFB70
 2250 0034 0E000000 		.4byte	.LFE70
 2251 0038 00000000 		.4byte	.LFB71
 2252 003c 18060000 		.4byte	.LFE71
 2253 0040 00000000 		.4byte	0
 2254 0044 00000000 		.4byte	0
 2255              		.section	.debug_line,"",%progbits
 2256              	.Ldebug_line0:
 2257 0000 05030000 		.section	.debug_str,"MS",%progbits,1
 2257      0200A401 
 2257      00000201 
 2257      FB0E0D00 
 2257      01010101 
 2258              	.LASF31:
 2259 0000 6D6F6465 		.ascii	"model_id\000"
 2259      6C5F6964 
 2259      00
 2260              	.LASF71:
 2261 0009 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2261      616C6172 
 2261      6D436667 
 2261      4D61736B 
 2261      00
 2262              	.LASF30:
 2263 001a 73696D5F 		.ascii	"sim_id\000"
 2263      696400
 2264              	.LASF75:
 2265 0021 5254435F 		.ascii	"RTC_daysInMonths\000"
 2265      64617973 
 2265      496E4D6F 
 2265      6E746873 
 2265      00
 2266              	.LASF61:
 2267 0032 7379735F 		.ascii	"sys_settings_t\000"
 2267      73657474 
 2267      696E6773 
 2267      5F7400
 2268              	.LASF52:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 58


 2269 0041 63757272 		.ascii	"currentCountDownValue\000"
 2269      656E7443 
 2269      6F756E74 
 2269      446F776E 
 2269      56616C75 
 2270              	.LASF51:
 2271 0057 636F756E 		.ascii	"countDownValue\000"
 2271      74446F77 
 2271      6E56616C 
 2271      756500
 2272              	.LASF2:
 2273 0066 73686F72 		.ascii	"short int\000"
 2273      7420696E 
 2273      7400
 2274              	.LASF26:
 2275 0070 73697A65 		.ascii	"sizetype\000"
 2275      74797065 
 2275      00
 2276              	.LASF59:
 2277 0079 65705F68 		.ascii	"ep_host\000"
 2277      6F737400 
 2278              	.LASF101:
 2279 0081 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2279      43313120 
 2279      352E342E 
 2279      31203230 
 2279      31363036 
 2280 00b4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2280      20726576 
 2280      6973696F 
 2280      6E203233 
 2280      37373135 
 2281 00e7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2281      66756E63 
 2281      74696F6E 
 2281      2D736563 
 2281      74696F6E 
 2282              	.LASF66:
 2283 010f 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 2283      45766572 
 2283      79576565 
 2283      6B48616E 
 2283      646C6572 
 2284              	.LASF81:
 2285 0124 64617461 		.ascii	"data\000"
 2285      00
 2286              	.LASF47:
 2287 0129 4170705F 		.ascii	"App_LED_freq\000"
 2287      4C45445F 
 2287      66726571 
 2287      00
 2288              	.LASF18:
 2289 0136 486F7572 		.ascii	"Hour\000"
 2289      00
 2290              	.LASF57:
 2291 013b 63686970 		.ascii	"chip_uniqueId\000"
 2291      5F756E69 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 59


 2291      71756549 
 2291      6400
 2292              	.LASF36:
 2293 0149 65636E6F 		.ascii	"ecno\000"
 2293      00
 2294              	.LASF97:
 2295 014e 616C6172 		.ascii	"alarmAppLED\000"
 2295      6D417070 
 2295      4C454400 
 2296              	.LASF27:
 2297 015a 76616C75 		.ascii	"value\000"
 2297      6500
 2298              	.LASF12:
 2299 0160 75696E74 		.ascii	"uint16\000"
 2299      313600
 2300              	.LASF60:
 2301 0167 65705F70 		.ascii	"ep_port\000"
 2301      6F727400 
 2302              	.LASF79:
 2303 016f 64617461 		.ascii	"dataPointsInStack\000"
 2303      506F696E 
 2303      7473496E 
 2303      53746163 
 2303      6B00
 2304              	.LASF11:
 2305 0181 75696E74 		.ascii	"uint8\000"
 2305      3800
 2306              	.LASF104:
 2307 0187 5254435F 		.ascii	"RTC_ISR\000"
 2307      49535200 
 2308              	.LASF35:
 2309 018f 72736370 		.ascii	"rscp\000"
 2309      00
 2310              	.LASF13:
 2311 0194 696E7431 		.ascii	"int16\000"
 2311      3600
 2312              	.LASF28:
 2313 019a 74696D65 		.ascii	"timeStamp\000"
 2313      5374616D 
 2313      7000
 2314              	.LASF80:
 2315 01a4 64617461 		.ascii	"dataPointsInStackDesired\000"
 2315      506F696E 
 2315      7473496E 
 2315      53746163 
 2315      6B446573 
 2316              	.LASF15:
 2317 01bd 666C6F61 		.ascii	"float\000"
 2317      7400
 2318              	.LASF19:
 2319 01c3 4461794F 		.ascii	"DayOfWeek\000"
 2319      66576565 
 2319      6B00
 2320              	.LASF6:
 2321 01cd 6C6F6E67 		.ascii	"long long int\000"
 2321      206C6F6E 
 2321      6720696E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 60


 2321      7400
 2322              	.LASF17:
 2323 01db 63686172 		.ascii	"char\000"
 2323      00
 2324              	.LASF4:
 2325 01e0 6C6F6E67 		.ascii	"long int\000"
 2325      20696E74 
 2325      00
 2326              	.LASF78:
 2327 01e9 62756666 		.ascii	"buffer_overflow\000"
 2327      65725F6F 
 2327      76657266 
 2327      6C6F7700 
 2328              	.LASF56:
 2329 01f9 6D6F6465 		.ascii	"modem_info\000"
 2329      6D5F696E 
 2329      666F00
 2330              	.LASF67:
 2331 0204 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2331      45766572 
 2331      794D6F6E 
 2331      74684861 
 2331      6E646C65 
 2332              	.LASF92:
 2333 021a 616C6172 		.ascii	"alarmMeasure\000"
 2333      6D4D6561 
 2333      73757265 
 2333      00
 2334              	.LASF23:
 2335 0227 59656172 		.ascii	"Year\000"
 2335      00
 2336              	.LASF22:
 2337 022c 4D6F6E74 		.ascii	"Month\000"
 2337      6800
 2338              	.LASF65:
 2339 0232 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2339      45766572 
 2339      79446179 
 2339      48616E64 
 2339      6C657200 
 2340              	.LASF55:
 2341 0246 616C6172 		.ascii	"alarm\000"
 2341      6D00
 2342              	.LASF44:
 2343 024c 6D656173 		.ascii	"measure_time\000"
 2343      7572655F 
 2343      74696D65 
 2343      00
 2344              	.LASF48:
 2345 0259 4C657665 		.ascii	"Level_Sensor_freq\000"
 2345      6C5F5365 
 2345      6E736F72 
 2345      5F667265 
 2345      7100
 2346              	.LASF94:
 2347 026b 616C6172 		.ascii	"alarmSync\000"
 2347      6D53796E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 61


 2347      6300
 2348              	.LASF25:
 2349 0275 6C6F6E67 		.ascii	"long double\000"
 2349      20646F75 
 2349      626C6500 
 2350              	.LASF86:
 2351 0281 6170705F 		.ascii	"app_led_inbox\000"
 2351      6C65645F 
 2351      696E626F 
 2351      7800
 2352              	.LASF1:
 2353 028f 756E7369 		.ascii	"unsigned char\000"
 2353      676E6564 
 2353      20636861 
 2353      7200
 2354              	.LASF38:
 2355 029d 72737270 		.ascii	"rsrp\000"
 2355      00
 2356              	.LASF83:
 2357 02a2 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2357      6D5F7374 
 2357      6172745F 
 2357      74696D65 
 2357      5F737461 
 2358              	.LASF69:
 2359 02b9 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2359      616C6172 
 2359      6D436667 
 2359      54696D65 
 2359      44617465 
 2360              	.LASF82:
 2361 02ce 6D6F6465 		.ascii	"modem_state\000"
 2361      6D5F7374 
 2361      61746500 
 2362              	.LASF0:
 2363 02da 7369676E 		.ascii	"signed char\000"
 2363      65642063 
 2363      68617200 
 2364              	.LASF68:
 2365 02e6 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2365      45766572 
 2365      79596561 
 2365      7248616E 
 2365      646C6572 
 2366              	.LASF7:
 2367 02fb 6C6F6E67 		.ascii	"long long unsigned int\000"
 2367      206C6F6E 
 2367      6720756E 
 2367      7369676E 
 2367      65642069 
 2368              	.LASF91:
 2369 0312 73797374 		.ascii	"system_settings\000"
 2369      656D5F73 
 2369      65747469 
 2369      6E677300 
 2370              	.LASF70:
 2371 0322 5254435F 		.ascii	"RTC_currentTimeDate\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 62


 2371      63757272 
 2371      656E7454 
 2371      696D6544 
 2371      61746500 
 2372              	.LASF8:
 2373 0336 756E7369 		.ascii	"unsigned int\000"
 2373      676E6564 
 2373      20696E74 
 2373      00
 2374              	.LASF29:
 2375 0343 6B65795F 		.ascii	"key_value_t\000"
 2375      76616C75 
 2375      655F7400 
 2376              	.LASF34:
 2377 034f 72786C65 		.ascii	"rxlev\000"
 2377      7600
 2378              	.LASF45:
 2379 0355 73796E63 		.ascii	"sync_time\000"
 2379      5F74696D 
 2379      6500
 2380              	.LASF72:
 2381 035f 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2381      616C6172 
 2381      6D437572 
 2381      53746174 
 2381      757300
 2382              	.LASF93:
 2383 0372 74696D65 		.ascii	"timeToMeasure\000"
 2383      546F4D65 
 2383      61737572 
 2383      6500
 2384              	.LASF50:
 2385 0380 75706461 		.ascii	"updatable_parameters_t\000"
 2385      7461626C 
 2385      655F7061 
 2385      72616D65 
 2385      74657273 
 2386              	.LASF43:
 2387 0397 73696D5F 		.ascii	"sim_type\000"
 2387      74797065 
 2387      00
 2388              	.LASF58:
 2389 03a0 7379735F 		.ascii	"sys_info_t\000"
 2389      696E666F 
 2389      5F7400
 2390              	.LASF3:
 2391 03ab 73686F72 		.ascii	"short unsigned int\000"
 2391      7420756E 
 2391      7369676E 
 2391      65642069 
 2391      6E7400
 2392              	.LASF39:
 2393 03be 74696D65 		.ascii	"time_to_network_connect\000"
 2393      5F746F5F 
 2393      6E657477 
 2393      6F726B5F 
 2393      636F6E6E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 63


 2394              	.LASF77:
 2395 03d6 6C657665 		.ascii	"level_sensor_inbox\000"
 2395      6C5F7365 
 2395      6E736F72 
 2395      5F696E62 
 2395      6F7800
 2396              	.LASF90:
 2397 03e9 73797374 		.ascii	"system_info\000"
 2397      656D5F69 
 2397      6E666F00 
 2398              	.LASF40:
 2399 03f5 74696D65 		.ascii	"time_to_acquire_ip\000"
 2399      5F746F5F 
 2399      61637175 
 2399      6972655F 
 2399      697000
 2400              	.LASF32:
 2401 0408 696D6569 		.ascii	"imei\000"
 2401      00
 2402              	.LASF10:
 2403 040d 696E7433 		.ascii	"int32_t\000"
 2403      325F7400 
 2404              	.LASF105:
 2405 0415 5254435F 		.ascii	"RTC_tmp\000"
 2405      746D7000 
 2406              	.LASF41:
 2407 041d 6D6F6465 		.ascii	"modem_stats_t\000"
 2407      6D5F7374 
 2407      6174735F 
 2407      7400
 2408              	.LASF49:
 2409 042b 5F426F6F 		.ascii	"_Bool\000"
 2409      6C00
 2410              	.LASF96:
 2411 0431 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2411      546F5379 
 2411      636E5265 
 2411      6D6F7465 
 2411      50617261 
 2412              	.LASF64:
 2413 0448 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2413      45766572 
 2413      79486F75 
 2413      7248616E 
 2413      646C6572 
 2414              	.LASF20:
 2415 045d 4461794F 		.ascii	"DayOfMonth\000"
 2415      664D6F6E 
 2415      746800
 2416              	.LASF37:
 2417 0468 72737271 		.ascii	"rsrq\000"
 2417      00
 2418              	.LASF103:
 2419 046d 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2419      73657273 
 2419      5C64616E 
 2419      747A5C44 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 64


 2419      6F63756D 
 2420 049a 72694F53 		.ascii	"riOS.cydsn\000"
 2420      2E637964 
 2420      736E00
 2421              	.LASF89:
 2422 04a5 68747470 		.ascii	"http_route\000"
 2422      5F726F75 
 2422      746500
 2423              	.LASF63:
 2424 04b0 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2424      45766572 
 2424      794D696E 
 2424      75746548 
 2424      616E646C 
 2425              	.LASF5:
 2426 04c7 6C6F6E67 		.ascii	"long unsigned int\000"
 2426      20756E73 
 2426      69676E65 
 2426      6420696E 
 2426      7400
 2427              	.LASF14:
 2428 04d9 696E7433 		.ascii	"int32\000"
 2428      3200
 2429              	.LASF16:
 2430 04df 646F7562 		.ascii	"double\000"
 2430      6C6500
 2431              	.LASF62:
 2432 04e6 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2432      45766572 
 2432      79536563 
 2432      6F6E6448 
 2432      616E646C 
 2433              	.LASF84:
 2434 04fd 6D6F6465 		.ascii	"modem_stats\000"
 2434      6D5F7374 
 2434      61747300 
 2435              	.LASF99:
 2436 0509 616C6172 		.ascii	"alarmLevelSensor\000"
 2436      6D4C6576 
 2436      656C5365 
 2436      6E736F72 
 2436      00
 2437              	.LASF46:
 2438 051a 64656275 		.ascii	"debug_level\000"
 2438      675F6C65 
 2438      76656C00 
 2439              	.LASF33:
 2440 0526 6D6F6465 		.ascii	"modem_info_t\000"
 2440      6D5F696E 
 2440      666F5F74 
 2440      00
 2441              	.LASF53:
 2442 0533 636F756E 		.ascii	"countDownType\000"
 2442      74446F77 
 2442      6E547970 
 2442      6500
 2443              	.LASF74:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 65


 2444 0541 5254435F 		.ascii	"RTC_statusDateTime\000"
 2444      73746174 
 2444      75734461 
 2444      74655469 
 2444      6D6500
 2445              	.LASF9:
 2446 0554 5F5F696E 		.ascii	"__int32_t\000"
 2446      7433325F 
 2446      7400
 2447              	.LASF98:
 2448 055e 74696D65 		.ascii	"timeToAppLED\000"
 2448      546F4170 
 2448      704C4544 
 2448      00
 2449              	.LASF102:
 2450 056b 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2450      72617465 
 2450      645F536F 
 2450      75726365 
 2450      5C50536F 
 2451              	.LASF100:
 2452 058c 74696D65 		.ascii	"timetoLevelSensor\000"
 2452      746F4C65 
 2452      76656C53 
 2452      656E736F 
 2452      7200
 2453              	.LASF85:
 2454 059e 75706461 		.ascii	"updatable_parameters\000"
 2454      7461626C 
 2454      655F7061 
 2454      72616D65 
 2454      74657273 
 2455              	.LASF76:
 2456 05b3 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2456      52784275 
 2456      66666572 
 2456      00
 2457              	.LASF24:
 2458 05c0 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2458      54494D45 
 2458      5F444154 
 2458      4500
 2459              	.LASF73:
 2460 05ce 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2460      696E7465 
 2460      7276616C 
 2460      4366674D 
 2460      61736B00 
 2461              	.LASF88:
 2462 05e2 68747470 		.ascii	"http_body\000"
 2462      5F626F64 
 2462      7900
 2463              	.LASF42:
 2464 05ec 6E6F6465 		.ascii	"node_type\000"
 2464      5F747970 
 2464      6500
 2465              	.LASF87:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGRH8aw.s 			page 66


 2466 05f6 68747470 		.ascii	"http_request\000"
 2466      5F726571 
 2466      75657374 
 2466      00
 2467              	.LASF95:
 2468 0603 74696D65 		.ascii	"timeToSync\000"
 2468      546F5379 
 2468      6E6300
 2469              	.LASF54:
 2470 060e 636F756E 		.ascii	"countDownResetCondition\000"
 2470      74446F77 
 2470      6E526573 
 2470      6574436F 
 2470      6E646974 
 2471              	.LASF21:
 2472 0626 4461794F 		.ascii	"DayOfYear\000"
 2472      66596561 
 2472      7200
 2473              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
