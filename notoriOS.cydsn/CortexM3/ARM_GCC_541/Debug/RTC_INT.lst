ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	inbox,100,4
  33              		.comm	http_request,10000,4
  34              		.comm	http_body,10000,4
  35              		.comm	http_route,200,4
  36              		.comm	system_info,28,4
  37              		.comm	system_settings,104,4
  38              		.comm	alarmMeasure,6,4
  39              		.comm	timeToMeasure,1,1
  40              		.comm	alarmSync,6,4
  41              		.comm	timeToSync,1,1
  42              		.comm	timeToSycnRemoteParams,1,1
  43              		.comm	hey,1,1
  44              		.comm	alarmAppLED,6,4
  45              		.comm	timeToAppLED,1,1
  46              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  47              		.align	2
  48              		.thumb
  49              		.thumb_func
  50              		.type	RTC_EverySecondHandler, %function
  51              	RTC_EverySecondHandler:
  52              	.LFB64:
  53              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 2


   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  54              		.loc 1 55 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 80B5     		push	{r7, lr}
  59              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 3


  60              		.cfi_offset 7, -8
  61              		.cfi_offset 14, -4
  62 0002 00AF     		add	r7, sp, #0
  63              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  64              		.loc 1 58 0
  65 0004 0020     		movs	r0, #0
  66 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  67              		.loc 1 64 0
  68 000a 00BF     		nop
  69 000c 80BD     		pop	{r7, pc}
  70              		.cfi_endproc
  71              	.LFE64:
  72              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  73 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  74              		.align	2
  75              		.thumb
  76              		.thumb_func
  77              		.type	RTC_EveryMinuteHandler, %function
  78              	RTC_EveryMinuteHandler:
  79              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  80              		.loc 1 82 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 00AF     		add	r7, sp, #0
  89              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 4


  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
  90              		.loc 1 85 0
  91 0004 0120     		movs	r0, #1
  92 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
  93              		.loc 1 91 0
  94 000a 00BF     		nop
  95 000c 80BD     		pop	{r7, pc}
  96              		.cfi_endproc
  97              	.LFE65:
  98              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
  99 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 100              		.align	2
 101              		.thumb
 102              		.thumb_func
 103              		.type	RTC_EveryHourHandler, %function
 104              	RTC_EveryHourHandler:
 105              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 106              		.loc 1 109 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 1, uses_anonymous_args = 0
 110 0000 80B5     		push	{r7, lr}
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 7, -8
 113              		.cfi_offset 14, -4
 114 0002 00AF     		add	r7, sp, #0
 115              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 116              		.loc 1 112 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 5


 117 0004 0220     		movs	r0, #2
 118 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 119              		.loc 1 118 0
 120 000a 00BF     		nop
 121 000c 80BD     		pop	{r7, pc}
 122              		.cfi_endproc
 123              	.LFE66:
 124              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 125 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 126              		.align	2
 127              		.thumb
 128              		.thumb_func
 129              		.type	RTC_EveryDayHandler, %function
 130              	RTC_EveryDayHandler:
 131              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 132              		.loc 1 136 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 0000 80B5     		push	{r7, lr}
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 7, -8
 139              		.cfi_offset 14, -4
 140 0002 00AF     		add	r7, sp, #0
 141              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 142              		.loc 1 139 0
 143 0004 0320     		movs	r0, #3
 144 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 6


 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 145              		.loc 1 145 0
 146 000a 00BF     		nop
 147 000c 80BD     		pop	{r7, pc}
 148              		.cfi_endproc
 149              	.LFE67:
 150              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 151 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 152              		.align	2
 153              		.thumb
 154              		.thumb_func
 155              		.type	RTC_EveryWeekHandler, %function
 156              	RTC_EveryWeekHandler:
 157              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 158              		.loc 1 163 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 168              		.loc 1 166 0
 169 0004 0420     		movs	r0, #4
 170 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 7


 171              		.loc 1 172 0
 172 000a 00BF     		nop
 173 000c 80BD     		pop	{r7, pc}
 174              		.cfi_endproc
 175              	.LFE68:
 176              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 177 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 178              		.align	2
 179              		.thumb
 180              		.thumb_func
 181              		.type	RTC_EveryMonthHandler, %function
 182              	RTC_EveryMonthHandler:
 183              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 184              		.loc 1 190 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188 0000 80B5     		push	{r7, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192 0002 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 194              		.loc 1 193 0
 195 0004 0520     		movs	r0, #5
 196 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 197              		.loc 1 199 0
 198 000a 00BF     		nop
 199 000c 80BD     		pop	{r7, pc}
 200              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 8


 201              	.LFE69:
 202              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 203 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 204              		.align	2
 205              		.thumb
 206              		.thumb_func
 207              		.type	RTC_EveryYearHandler, %function
 208              	RTC_EveryYearHandler:
 209              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 210              		.loc 1 217 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 220              		.loc 1 220 0
 221 0004 0620     		movs	r0, #6
 222 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 223              		.loc 1 226 0
 224 000a 00BF     		nop
 225 000c 80BD     		pop	{r7, pc}
 226              		.cfi_endproc
 227              	.LFE70:
 228              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 229 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 230              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 9


 231              		.global	RTC_ISR
 232              		.thumb
 233              		.thumb_func
 234              		.type	RTC_ISR, %function
 235              	RTC_ISR:
 236              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 237              		.loc 1 268 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 8
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241 0000 80B5     		push	{r7, lr}
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 10


 246              		.cfi_def_cfa_offset 16
 247 0004 00AF     		add	r7, sp, #0
 248              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 249              		.loc 1 276 0
 250 0006 0420     		movs	r0, #4
 251 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 252              		.loc 1 279 0
 253 000c 9E4B     		ldr	r3, .L48
 254 000e 1B78     		ldrb	r3, [r3]
 255 0010 DBB2     		uxtb	r3, r3
 256 0012 0133     		adds	r3, r3, #1
 257 0014 DAB2     		uxtb	r2, r3
 258 0016 9C4B     		ldr	r3, .L48
 259 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 260              		.loc 1 282 0
 261 001a 9B4B     		ldr	r3, .L48
 262 001c 1B78     		ldrb	r3, [r3]
 263 001e DBB2     		uxtb	r3, r3
 264 0020 3B2B     		cmp	r3, #59
 265 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 266              		.loc 1 285 0
 267 0026 984B     		ldr	r3, .L48
 268 0028 5B78     		ldrb	r3, [r3, #1]
 269 002a DBB2     		uxtb	r3, r3
 270 002c 0133     		adds	r3, r3, #1
 271 002e DAB2     		uxtb	r2, r3
 272 0030 954B     		ldr	r3, .L48
 273 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 274              		.loc 1 288 0
 275 0034 944B     		ldr	r3, .L48
 276 0036 0022     		movs	r2, #0
 277 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 278              		.loc 1 290 0
 279 003a 934B     		ldr	r3, .L48
 280 003c 5B78     		ldrb	r3, [r3, #1]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 11


 281 003e DBB2     		uxtb	r3, r3
 282 0040 3B2B     		cmp	r3, #59
 283 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 284              		.loc 1 293 0
 285 0046 904B     		ldr	r3, .L48
 286 0048 9B78     		ldrb	r3, [r3, #2]
 287 004a DBB2     		uxtb	r3, r3
 288 004c 0133     		adds	r3, r3, #1
 289 004e DAB2     		uxtb	r2, r3
 290 0050 8D4B     		ldr	r3, .L48
 291 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 292              		.loc 1 296 0
 293 0054 8C4B     		ldr	r3, .L48
 294 0056 0022     		movs	r2, #0
 295 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 296              		.loc 1 299 0
 297 005a 8B4B     		ldr	r3, .L48
 298 005c 9B78     		ldrb	r3, [r3, #2]
 299 005e DBB2     		uxtb	r3, r3
 300 0060 172B     		cmp	r3, #23
 301 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 302              		.loc 1 302 0
 303 0066 884B     		ldr	r3, .L48
 304 0068 1B79     		ldrb	r3, [r3, #4]
 305 006a DBB2     		uxtb	r3, r3
 306 006c 0133     		adds	r3, r3, #1
 307 006e DAB2     		uxtb	r2, r3
 308 0070 854B     		ldr	r3, .L48
 309 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 310              		.loc 1 305 0
 311 0074 844B     		ldr	r3, .L48
 312 0076 0022     		movs	r2, #0
 313 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 314              		.loc 1 308 0
 315 007a 834B     		ldr	r3, .L48
 316 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 317 007e 9BB2     		uxth	r3, r3
 318 0080 0133     		adds	r3, r3, #1
 319 0082 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 12


 320 0084 804B     		ldr	r3, .L48
 321 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 322              		.loc 1 311 0
 323 0088 7F4B     		ldr	r3, .L48
 324 008a DB78     		ldrb	r3, [r3, #3]
 325 008c DBB2     		uxtb	r3, r3
 326 008e 0133     		adds	r3, r3, #1
 327 0090 DAB2     		uxtb	r2, r3
 328 0092 7D4B     		ldr	r3, .L48
 329 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 330              		.loc 1 314 0
 331 0096 7C4B     		ldr	r3, .L48
 332 0098 DB78     		ldrb	r3, [r3, #3]
 333 009a DBB2     		uxtb	r3, r3
 334 009c 072B     		cmp	r3, #7
 335 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 336              		.loc 1 317 0
 337 00a0 794B     		ldr	r3, .L48
 338 00a2 0122     		movs	r2, #1
 339 00a4 DA70     		strb	r2, [r3, #3]
 340              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 341              		.loc 1 325 0
 342 00a6 794B     		ldr	r3, .L48+4
 343 00a8 1B78     		ldrb	r3, [r3]
 344 00aa DBB2     		uxtb	r3, r3
 345 00ac 03F00203 		and	r3, r3, #2
 346 00b0 002B     		cmp	r3, #0
 347 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 348              		.loc 1 326 0 discriminator 1
 349 00b4 744B     		ldr	r3, .L48
 350 00b6 1B7A     		ldrb	r3, [r3, #8]
 351 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 352              		.loc 1 325 0 discriminator 1
 353 00ba 022B     		cmp	r3, #2
 354 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 355              		.loc 1 327 0
 356 00be 724B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 13


 357 00c0 1B79     		ldrb	r3, [r3, #4]
 358 00c2 DBB2     		uxtb	r3, r3
 359 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 360              		.loc 1 328 0
 361 00c6 704B     		ldr	r3, .L48
 362 00c8 1B7A     		ldrb	r3, [r3, #8]
 363 00ca DBB2     		uxtb	r3, r3
 364 00cc 013B     		subs	r3, r3, #1
 365 00ce 704A     		ldr	r2, .L48+8
 366 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 367 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 368              		.loc 1 326 0
 369 00d4 9942     		cmp	r1, r3
 370 00d6 2AD8     		bhi	.L14
 371              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 372              		.loc 1 329 0
 373 00d8 6C4B     		ldr	r3, .L48+4
 374 00da 1B78     		ldrb	r3, [r3]
 375 00dc DBB2     		uxtb	r3, r3
 376 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 377              		.loc 1 328 0
 378 00e2 002B     		cmp	r3, #0
 379 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 380              		.loc 1 330 0
 381 00e6 684B     		ldr	r3, .L48
 382 00e8 1B7A     		ldrb	r3, [r3, #8]
 383 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 384              		.loc 1 329 0
 385 00ec 022B     		cmp	r3, #2
 386 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 387              		.loc 1 331 0
 388 00f0 654B     		ldr	r3, .L48
 389 00f2 1B79     		ldrb	r3, [r3, #4]
 390 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 391              		.loc 1 332 0
 392 00f6 644B     		ldr	r3, .L48
 393 00f8 1B7A     		ldrb	r3, [r3, #8]
 394 00fa DBB2     		uxtb	r3, r3
 395 00fc 013B     		subs	r3, r3, #1
 396 00fe 6449     		ldr	r1, .L48+8
 397 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 398              		.loc 1 330 0
 399 0102 9A42     		cmp	r2, r3
 400 0104 13D8     		bhi	.L14
 401              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 402              		.loc 1 333 0
 403 0106 614B     		ldr	r3, .L48+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 14


 404 0108 1B78     		ldrb	r3, [r3]
 405 010a DBB2     		uxtb	r3, r3
 406 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 407              		.loc 1 332 0
 408 0110 002B     		cmp	r3, #0
 409 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 410              		.loc 1 334 0
 411 0116 5C4B     		ldr	r3, .L48
 412 0118 1B79     		ldrb	r3, [r3, #4]
 413 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 414              		.loc 1 335 0
 415 011c 5A4B     		ldr	r3, .L48
 416 011e 1B7A     		ldrb	r3, [r3, #8]
 417 0120 DBB2     		uxtb	r3, r3
 418 0122 013B     		subs	r3, r3, #1
 419 0124 5A49     		ldr	r1, .L48+8
 420 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 421              		.loc 1 333 0
 422 0128 9A42     		cmp	r2, r3
 423 012a 40F2E880 		bls	.L16
 424              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 425              		.loc 1 338 0
 426 012e 564B     		ldr	r3, .L48
 427 0130 1B7A     		ldrb	r3, [r3, #8]
 428 0132 DBB2     		uxtb	r3, r3
 429 0134 0133     		adds	r3, r3, #1
 430 0136 DAB2     		uxtb	r2, r3
 431 0138 534B     		ldr	r3, .L48
 432 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 433              		.loc 1 341 0
 434 013c 524B     		ldr	r3, .L48
 435 013e 0122     		movs	r2, #1
 436 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 437              		.loc 1 344 0
 438 0142 514B     		ldr	r3, .L48
 439 0144 1B7A     		ldrb	r3, [r3, #8]
 440 0146 DBB2     		uxtb	r3, r3
 441 0148 0C2B     		cmp	r3, #12
 442 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 443              		.loc 1 347 0
 444 014e 4E4B     		ldr	r3, .L48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 15


 445 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 446 0152 9BB2     		uxth	r3, r3
 447 0154 0133     		adds	r3, r3, #1
 448 0156 9AB2     		uxth	r2, r3
 449 0158 4B4B     		ldr	r3, .L48
 450 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 451              		.loc 1 350 0
 452 015c 4A4B     		ldr	r3, .L48
 453 015e 0122     		movs	r2, #1
 454 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 455              		.loc 1 353 0
 456 0162 494B     		ldr	r3, .L48
 457 0164 0122     		movs	r2, #1
 458 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 459              		.loc 1 356 0
 460 0168 474B     		ldr	r3, .L48
 461 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 462 016c 9BB2     		uxth	r3, r3
 463 016e 494A     		ldr	r2, .L48+12
 464 0170 A2FB0312 		umull	r1, r2, r2, r3
 465 0174 D209     		lsrs	r2, r2, #7
 466 0176 4FF4C871 		mov	r1, #400
 467 017a 01FB02F2 		mul	r2, r1, r2
 468 017e 9B1A     		subs	r3, r3, r2
 469 0180 9BB2     		uxth	r3, r3
 470 0182 002B     		cmp	r3, #0
 471 0184 15D0     		beq	.L18
 472              		.loc 1 356 0 is_stmt 0 discriminator 1
 473 0186 404B     		ldr	r3, .L48
 474 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 475 018a 9BB2     		uxth	r3, r3
 476 018c 03F00303 		and	r3, r3, #3
 477 0190 9BB2     		uxth	r3, r3
 478 0192 002B     		cmp	r3, #0
 479 0194 16D1     		bne	.L19
 480              		.loc 1 356 0 discriminator 2
 481 0196 3C4B     		ldr	r3, .L48
 482 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 483 019a 9BB2     		uxth	r3, r3
 484 019c 3D4A     		ldr	r2, .L48+12
 485 019e A2FB0312 		umull	r1, r2, r2, r3
 486 01a2 5209     		lsrs	r2, r2, #5
 487 01a4 6421     		movs	r1, #100
 488 01a6 01FB02F2 		mul	r2, r1, r2
 489 01aa 9B1A     		subs	r3, r3, r2
 490 01ac 9BB2     		uxth	r3, r3
 491 01ae 002B     		cmp	r3, #0
 492 01b0 08D0     		beq	.L19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 16


 493              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 494              		.loc 1 359 0 is_stmt 1
 495 01b2 364B     		ldr	r3, .L48+4
 496 01b4 1B78     		ldrb	r3, [r3]
 497 01b6 DBB2     		uxtb	r3, r3
 498 01b8 43F00203 		orr	r3, r3, #2
 499 01bc DAB2     		uxtb	r2, r3
 500 01be 334B     		ldr	r3, .L48+4
 501 01c0 1A70     		strb	r2, [r3]
 502 01c2 07E0     		b	.L20
 503              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 504              		.loc 1 364 0
 505 01c4 314B     		ldr	r3, .L48+4
 506 01c6 1B78     		ldrb	r3, [r3]
 507 01c8 DBB2     		uxtb	r3, r3
 508 01ca 23F00203 		bic	r3, r3, #2
 509 01ce DAB2     		uxtb	r2, r3
 510 01d0 2E4B     		ldr	r3, .L48+4
 511 01d2 1A70     		strb	r2, [r3]
 512              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 513              		.loc 1 368 0
 514 01d4 304B     		ldr	r3, .L48+16
 515 01d6 1B78     		ldrb	r3, [r3]
 516 01d8 DBB2     		uxtb	r3, r3
 517 01da 5BB2     		sxtb	r3, r3
 518 01dc 002B     		cmp	r3, #0
 519 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 520              		.loc 1 372 0
 521 01e0 2E4B     		ldr	r3, .L48+20
 522 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 523 01e4 9AB2     		uxth	r2, r3
 524 01e6 284B     		ldr	r3, .L48
 525 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 526 01ea 9BB2     		uxth	r3, r3
 527 01ec 9A42     		cmp	r2, r3
 528 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 529              		.loc 1 375 0
 530 01f0 2B4B     		ldr	r3, .L48+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 17


 531 01f2 1B78     		ldrb	r3, [r3]
 532 01f4 DBB2     		uxtb	r3, r3
 533 01f6 63F07F03 		orn	r3, r3, #127
 534 01fa DAB2     		uxtb	r2, r3
 535 01fc 284B     		ldr	r3, .L48+24
 536 01fe 1A70     		strb	r2, [r3]
 537 0200 07E0     		b	.L21
 538              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 539              		.loc 1 380 0
 540 0202 274B     		ldr	r3, .L48+24
 541 0204 1B78     		ldrb	r3, [r3]
 542 0206 DBB2     		uxtb	r3, r3
 543 0208 03F07F03 		and	r3, r3, #127
 544 020c DAB2     		uxtb	r2, r3
 545 020e 244B     		ldr	r3, .L48+24
 546 0210 1A70     		strb	r2, [r3]
 547              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 548              		.loc 1 385 0
 549 0212 214B     		ldr	r3, .L48+16
 550 0214 1B78     		ldrb	r3, [r3]
 551 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 552              		.loc 1 386 0
 553 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 554 021a 002B     		cmp	r3, #0
 555 021c 13D0     		beq	.L23
 556              		.loc 1 386 0 is_stmt 0 discriminator 1
 557 021e 204B     		ldr	r3, .L48+24
 558 0220 1B78     		ldrb	r3, [r3]
 559 0222 DAB2     		uxtb	r2, r3
 560 0224 FB79     		ldrb	r3, [r7, #7]
 561 0226 1340     		ands	r3, r3, r2
 562 0228 DBB2     		uxtb	r3, r3
 563 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 564 022c 9A42     		cmp	r2, r3
 565 022e 0AD1     		bne	.L23
 566              		.loc 1 386 0 discriminator 2
 567 0230 164B     		ldr	r3, .L48+4
 568 0232 1B78     		ldrb	r3, [r3]
 569 0234 DBB2     		uxtb	r3, r3
 570 0236 43F00803 		orr	r3, r3, #8
 571 023a DAB2     		uxtb	r2, r3
 572 023c 134B     		ldr	r3, .L48+4
 573 023e 1A70     		strb	r2, [r3]
 574 0240 174B     		ldr	r3, .L48+24
 575 0242 0022     		movs	r2, #0
 576 0244 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 18


 577              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 578              		.loc 1 391 0 is_stmt 1
 579 0246 174B     		ldr	r3, .L48+28
 580 0248 1B78     		ldrb	r3, [r3]
 581 024a DBB2     		uxtb	r3, r3
 582 024c 03F04003 		and	r3, r3, #64
 583 0250 002B     		cmp	r3, #0
 584 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 585              		.loc 1 394 0
 586 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 587              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 588              		.loc 1 400 0
 589 0258 0F4B     		ldr	r3, .L48+16
 590 025a 1B78     		ldrb	r3, [r3]
 591 025c DBB2     		uxtb	r3, r3
 592 025e 03F04003 		and	r3, r3, #64
 593 0262 002B     		cmp	r3, #0
 594 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 595              		.loc 1 403 0
 596 0266 0D4B     		ldr	r3, .L48+20
 597 0268 1B7A     		ldrb	r3, [r3, #8]
 598 026a DAB2     		uxtb	r2, r3
 599 026c 064B     		ldr	r3, .L48
 600 026e 1B7A     		ldrb	r3, [r3, #8]
 601 0270 DBB2     		uxtb	r3, r3
 602 0272 9A42     		cmp	r2, r3
 603 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 604              		.loc 1 406 0
 605 0276 0A4B     		ldr	r3, .L48+24
 606 0278 1B78     		ldrb	r3, [r3]
 607 027a DBB2     		uxtb	r3, r3
 608 027c 43F04003 		orr	r3, r3, #64
 609 0280 DAB2     		uxtb	r2, r3
 610 0282 074B     		ldr	r3, .L48+24
 611 0284 1A70     		strb	r2, [r3]
 612 0286 17E0     		b	.L24
 613              	.L49:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 19


 614              		.align	2
 615              	.L48:
 616 0288 00000000 		.word	RTC_currentTimeDate
 617 028c 00000000 		.word	RTC_statusDateTime
 618 0290 00000000 		.word	RTC_daysInMonths
 619 0294 1F85EB51 		.word	1374389535
 620 0298 00000000 		.word	RTC_alarmCfgMask
 621 029c 00000000 		.word	RTC_alarmCfgTimeDate
 622 02a0 00000000 		.word	RTC_alarmCurStatus
 623 02a4 00000000 		.word	RTC_intervalCfgMask
 624              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 625              		.loc 1 411 0
 626 02a8 964B     		ldr	r3, .L50
 627 02aa 1B78     		ldrb	r3, [r3]
 628 02ac DBB2     		uxtb	r3, r3
 629 02ae 23F04003 		bic	r3, r3, #64
 630 02b2 DAB2     		uxtb	r2, r3
 631 02b4 934B     		ldr	r3, .L50
 632 02b6 1A70     		strb	r2, [r3]
 633              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 634              		.loc 1 436 0
 635 02b8 934B     		ldr	r3, .L50+4
 636 02ba 1B78     		ldrb	r3, [r3]
 637 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 638              		.loc 1 437 0
 639 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 20


 640 02c0 002B     		cmp	r3, #0
 641 02c2 13D0     		beq	.L26
 642              		.loc 1 437 0 is_stmt 0 discriminator 1
 643 02c4 8F4B     		ldr	r3, .L50
 644 02c6 1B78     		ldrb	r3, [r3]
 645 02c8 DAB2     		uxtb	r2, r3
 646 02ca FB79     		ldrb	r3, [r7, #7]
 647 02cc 1340     		ands	r3, r3, r2
 648 02ce DBB2     		uxtb	r3, r3
 649 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 650 02d2 9A42     		cmp	r2, r3
 651 02d4 0AD1     		bne	.L26
 652              		.loc 1 437 0 discriminator 2
 653 02d6 8D4B     		ldr	r3, .L50+8
 654 02d8 1B78     		ldrb	r3, [r3]
 655 02da DBB2     		uxtb	r3, r3
 656 02dc 43F00803 		orr	r3, r3, #8
 657 02e0 DAB2     		uxtb	r2, r3
 658 02e2 8A4B     		ldr	r3, .L50+8
 659 02e4 1A70     		strb	r2, [r3]
 660 02e6 874B     		ldr	r3, .L50
 661 02e8 0022     		movs	r2, #0
 662 02ea 1A70     		strb	r2, [r3]
 663              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 664              		.loc 1 442 0 is_stmt 1
 665 02ec 884B     		ldr	r3, .L50+12
 666 02ee 1B78     		ldrb	r3, [r3]
 667 02f0 DBB2     		uxtb	r3, r3
 668 02f2 03F02003 		and	r3, r3, #32
 669 02f6 002B     		cmp	r3, #0
 670 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 671              		.loc 1 445 0
 672 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 673              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 674              		.loc 1 450 0
 675 02fe 824B     		ldr	r3, .L50+4
 676 0300 1B78     		ldrb	r3, [r3]
 677 0302 DBB2     		uxtb	r3, r3
 678 0304 03F00803 		and	r3, r3, #8
 679 0308 002B     		cmp	r3, #0
 680 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 21


 681              		.loc 1 453 0
 682 030c 814B     		ldr	r3, .L50+16
 683 030e DB78     		ldrb	r3, [r3, #3]
 684 0310 DAB2     		uxtb	r2, r3
 685 0312 814B     		ldr	r3, .L50+20
 686 0314 DB78     		ldrb	r3, [r3, #3]
 687 0316 DBB2     		uxtb	r3, r3
 688 0318 9A42     		cmp	r2, r3
 689 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 690              		.loc 1 456 0
 691 031c 794B     		ldr	r3, .L50
 692 031e 1B78     		ldrb	r3, [r3]
 693 0320 DBB2     		uxtb	r3, r3
 694 0322 43F00803 		orr	r3, r3, #8
 695 0326 DAB2     		uxtb	r2, r3
 696 0328 764B     		ldr	r3, .L50
 697 032a 1A70     		strb	r2, [r3]
 698 032c 07E0     		b	.L27
 699              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 700              		.loc 1 461 0
 701 032e 754B     		ldr	r3, .L50
 702 0330 1B78     		ldrb	r3, [r3]
 703 0332 DBB2     		uxtb	r3, r3
 704 0334 23F00803 		bic	r3, r3, #8
 705 0338 DAB2     		uxtb	r2, r3
 706 033a 724B     		ldr	r3, .L50
 707 033c 1A70     		strb	r2, [r3]
 708              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 709              		.loc 1 466 0
 710 033e 724B     		ldr	r3, .L50+4
 711 0340 1B78     		ldrb	r3, [r3]
 712 0342 DBB2     		uxtb	r3, r3
 713 0344 03F02003 		and	r3, r3, #32
 714 0348 002B     		cmp	r3, #0
 715 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 716              		.loc 1 469 0
 717 034c 714B     		ldr	r3, .L50+16
 718 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 719 0350 9AB2     		uxth	r2, r3
 720 0352 714B     		ldr	r3, .L50+20
 721 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 22


 722 0356 9BB2     		uxth	r3, r3
 723 0358 9A42     		cmp	r2, r3
 724 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 725              		.loc 1 472 0
 726 035c 694B     		ldr	r3, .L50
 727 035e 1B78     		ldrb	r3, [r3]
 728 0360 DBB2     		uxtb	r3, r3
 729 0362 43F02003 		orr	r3, r3, #32
 730 0366 DAB2     		uxtb	r2, r3
 731 0368 664B     		ldr	r3, .L50
 732 036a 1A70     		strb	r2, [r3]
 733 036c 07E0     		b	.L29
 734              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 735              		.loc 1 477 0
 736 036e 654B     		ldr	r3, .L50
 737 0370 1B78     		ldrb	r3, [r3]
 738 0372 DBB2     		uxtb	r3, r3
 739 0374 23F02003 		bic	r3, r3, #32
 740 0378 DAB2     		uxtb	r2, r3
 741 037a 624B     		ldr	r3, .L50
 742 037c 1A70     		strb	r2, [r3]
 743              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 744              		.loc 1 482 0
 745 037e 624B     		ldr	r3, .L50+4
 746 0380 1B78     		ldrb	r3, [r3]
 747 0382 DBB2     		uxtb	r3, r3
 748 0384 03F01003 		and	r3, r3, #16
 749 0388 002B     		cmp	r3, #0
 750 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 751              		.loc 1 485 0
 752 038c 614B     		ldr	r3, .L50+16
 753 038e 1B79     		ldrb	r3, [r3, #4]
 754 0390 DAB2     		uxtb	r2, r3
 755 0392 614B     		ldr	r3, .L50+20
 756 0394 1B79     		ldrb	r3, [r3, #4]
 757 0396 DBB2     		uxtb	r3, r3
 758 0398 9A42     		cmp	r2, r3
 759 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 23


 760              		.loc 1 488 0
 761 039c 594B     		ldr	r3, .L50
 762 039e 1B78     		ldrb	r3, [r3]
 763 03a0 DBB2     		uxtb	r3, r3
 764 03a2 43F01003 		orr	r3, r3, #16
 765 03a6 DAB2     		uxtb	r2, r3
 766 03a8 564B     		ldr	r3, .L50
 767 03aa 1A70     		strb	r2, [r3]
 768 03ac 07E0     		b	.L31
 769              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 770              		.loc 1 493 0
 771 03ae 554B     		ldr	r3, .L50
 772 03b0 1B78     		ldrb	r3, [r3]
 773 03b2 DBB2     		uxtb	r3, r3
 774 03b4 23F01003 		bic	r3, r3, #16
 775 03b8 DAB2     		uxtb	r2, r3
 776 03ba 524B     		ldr	r3, .L50
 777 03bc 1A70     		strb	r2, [r3]
 778              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 779              		.loc 1 518 0
 780 03be 524B     		ldr	r3, .L50+4
 781 03c0 1B78     		ldrb	r3, [r3]
 782 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 783              		.loc 1 519 0
 784 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 785 03c6 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 24


 786 03c8 13D0     		beq	.L33
 787              		.loc 1 519 0 is_stmt 0 discriminator 1
 788 03ca 4E4B     		ldr	r3, .L50
 789 03cc 1B78     		ldrb	r3, [r3]
 790 03ce DAB2     		uxtb	r2, r3
 791 03d0 FB79     		ldrb	r3, [r7, #7]
 792 03d2 1340     		ands	r3, r3, r2
 793 03d4 DBB2     		uxtb	r3, r3
 794 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 795 03d8 9A42     		cmp	r2, r3
 796 03da 0AD1     		bne	.L33
 797              		.loc 1 519 0 discriminator 2
 798 03dc 4B4B     		ldr	r3, .L50+8
 799 03de 1B78     		ldrb	r3, [r3]
 800 03e0 DBB2     		uxtb	r3, r3
 801 03e2 43F00803 		orr	r3, r3, #8
 802 03e6 DAB2     		uxtb	r2, r3
 803 03e8 484B     		ldr	r3, .L50+8
 804 03ea 1A70     		strb	r2, [r3]
 805 03ec 454B     		ldr	r3, .L50
 806 03ee 0022     		movs	r2, #0
 807 03f0 1A70     		strb	r2, [r3]
 808              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 809              		.loc 1 524 0 is_stmt 1
 810 03f2 474B     		ldr	r3, .L50+12
 811 03f4 1B78     		ldrb	r3, [r3]
 812 03f6 DBB2     		uxtb	r3, r3
 813 03f8 03F00803 		and	r3, r3, #8
 814 03fc 002B     		cmp	r3, #0
 815 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 816              		.loc 1 527 0
 817 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 818              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 819              		.loc 1 530 0
 820 0404 444B     		ldr	r3, .L50+20
 821 0406 DB78     		ldrb	r3, [r3, #3]
 822 0408 DBB2     		uxtb	r3, r3
 823 040a 012B     		cmp	r3, #1
 824 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 825              		.loc 1 533 0
 826 040e 404B     		ldr	r3, .L50+12
 827 0410 1B78     		ldrb	r3, [r3]
 828 0412 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 25


 829 0414 03F01003 		and	r3, r3, #16
 830 0418 002B     		cmp	r3, #0
 831 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 832              		.loc 1 536 0
 833 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 834              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 835              		.loc 1 543 0
 836 0420 3D4B     		ldr	r3, .L50+20
 837 0422 9B78     		ldrb	r3, [r3, #2]
 838 0424 DBB2     		uxtb	r3, r3
 839 0426 0B2B     		cmp	r3, #11
 840 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 841              		.loc 1 546 0
 842 042a 384B     		ldr	r3, .L50+8
 843 042c 1B78     		ldrb	r3, [r3]
 844 042e DBB2     		uxtb	r3, r3
 845 0430 23F00403 		bic	r3, r3, #4
 846 0434 DAB2     		uxtb	r2, r3
 847 0436 354B     		ldr	r3, .L50+8
 848 0438 1A70     		strb	r2, [r3]
 849 043a 07E0     		b	.L36
 850              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 851              		.loc 1 551 0
 852 043c 334B     		ldr	r3, .L50+8
 853 043e 1B78     		ldrb	r3, [r3]
 854 0440 DBB2     		uxtb	r3, r3
 855 0442 43F00403 		orr	r3, r3, #4
 856 0446 DAB2     		uxtb	r2, r3
 857 0448 304B     		ldr	r3, .L50+8
 858 044a 1A70     		strb	r2, [r3]
 859              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 26


 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 27


 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 28


 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 29


 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 30


 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 31


 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 860              		.loc 1 879 0
 861 044c 2E4B     		ldr	r3, .L50+4
 862 044e 1B78     		ldrb	r3, [r3]
 863 0450 DBB2     		uxtb	r3, r3
 864 0452 03F00403 		and	r3, r3, #4
 865 0456 002B     		cmp	r3, #0
 866 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 867              		.loc 1 881 0
 868 045a 2E4B     		ldr	r3, .L50+16
 869 045c 9B78     		ldrb	r3, [r3, #2]
 870 045e DAB2     		uxtb	r2, r3
 871 0460 2D4B     		ldr	r3, .L50+20
 872 0462 9B78     		ldrb	r3, [r3, #2]
 873 0464 DBB2     		uxtb	r3, r3
 874 0466 9A42     		cmp	r2, r3
 875 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 876              		.loc 1 883 0
 877 046a 264B     		ldr	r3, .L50
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 32


 878 046c 1B78     		ldrb	r3, [r3]
 879 046e DBB2     		uxtb	r3, r3
 880 0470 43F00403 		orr	r3, r3, #4
 881 0474 DAB2     		uxtb	r2, r3
 882 0476 234B     		ldr	r3, .L50
 883 0478 1A70     		strb	r2, [r3]
 884 047a 07E0     		b	.L37
 885              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 886              		.loc 1 887 0
 887 047c 214B     		ldr	r3, .L50
 888 047e 1B78     		ldrb	r3, [r3]
 889 0480 DBB2     		uxtb	r3, r3
 890 0482 23F00403 		bic	r3, r3, #4
 891 0486 DAB2     		uxtb	r2, r3
 892 0488 1E4B     		ldr	r3, .L50
 893 048a 1A70     		strb	r2, [r3]
 894              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 895              		.loc 1 892 0
 896 048c 1E4B     		ldr	r3, .L50+4
 897 048e 1B78     		ldrb	r3, [r3]
 898 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 899              		.loc 1 893 0
 900 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 901 0494 002B     		cmp	r3, #0
 902 0496 13D0     		beq	.L39
 903              		.loc 1 893 0 is_stmt 0 discriminator 1
 904 0498 1A4B     		ldr	r3, .L50
 905 049a 1B78     		ldrb	r3, [r3]
 906 049c DAB2     		uxtb	r2, r3
 907 049e FB79     		ldrb	r3, [r7, #7]
 908 04a0 1340     		ands	r3, r3, r2
 909 04a2 DBB2     		uxtb	r3, r3
 910 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 911 04a6 9A42     		cmp	r2, r3
 912 04a8 0AD1     		bne	.L39
 913              		.loc 1 893 0 discriminator 2
 914 04aa 184B     		ldr	r3, .L50+8
 915 04ac 1B78     		ldrb	r3, [r3]
 916 04ae DBB2     		uxtb	r3, r3
 917 04b0 43F00803 		orr	r3, r3, #8
 918 04b4 DAB2     		uxtb	r2, r3
 919 04b6 154B     		ldr	r3, .L50+8
 920 04b8 1A70     		strb	r2, [r3]
 921 04ba 124B     		ldr	r3, .L50
 922 04bc 0022     		movs	r2, #0
 923 04be 1A70     		strb	r2, [r3]
 924              	.L39:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 33


 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 925              		.loc 1 898 0 is_stmt 1
 926 04c0 134B     		ldr	r3, .L50+12
 927 04c2 1B78     		ldrb	r3, [r3]
 928 04c4 DBB2     		uxtb	r3, r3
 929 04c6 03F00403 		and	r3, r3, #4
 930 04ca 002B     		cmp	r3, #0
 931 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 932              		.loc 1 900 0
 933 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 934              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 935              		.loc 1 905 0
 936 04d2 0D4B     		ldr	r3, .L50+4
 937 04d4 1B78     		ldrb	r3, [r3]
 938 04d6 DBB2     		uxtb	r3, r3
 939 04d8 03F00203 		and	r3, r3, #2
 940 04dc 002B     		cmp	r3, #0
 941 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 942              		.loc 1 907 0
 943 04e0 0C4B     		ldr	r3, .L50+16
 944 04e2 5B78     		ldrb	r3, [r3, #1]
 945 04e4 DAB2     		uxtb	r2, r3
 946 04e6 0C4B     		ldr	r3, .L50+20
 947 04e8 5B78     		ldrb	r3, [r3, #1]
 948 04ea DBB2     		uxtb	r3, r3
 949 04ec 9A42     		cmp	r2, r3
 950 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 951              		.loc 1 909 0
 952 04f0 044B     		ldr	r3, .L50
 953 04f2 1B78     		ldrb	r3, [r3]
 954 04f4 DBB2     		uxtb	r3, r3
 955 04f6 43F00203 		orr	r3, r3, #2
 956 04fa DAB2     		uxtb	r2, r3
 957 04fc 014B     		ldr	r3, .L50
 958 04fe 1A70     		strb	r2, [r3]
 959 0500 14E0     		b	.L40
 960              	.L51:
 961 0502 00BF     		.align	2
 962              	.L50:
 963 0504 00000000 		.word	RTC_alarmCurStatus
 964 0508 00000000 		.word	RTC_alarmCfgMask
 965 050c 00000000 		.word	RTC_statusDateTime
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 34


 966 0510 00000000 		.word	RTC_intervalCfgMask
 967 0514 00000000 		.word	RTC_alarmCfgTimeDate
 968 0518 00000000 		.word	RTC_currentTimeDate
 969              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 970              		.loc 1 913 0
 971 051c 384B     		ldr	r3, .L52
 972 051e 1B78     		ldrb	r3, [r3]
 973 0520 DBB2     		uxtb	r3, r3
 974 0522 23F00203 		bic	r3, r3, #2
 975 0526 DAB2     		uxtb	r2, r3
 976 0528 354B     		ldr	r3, .L52
 977 052a 1A70     		strb	r2, [r3]
 978              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 979              		.loc 1 918 0
 980 052c 354B     		ldr	r3, .L52+4
 981 052e 1B78     		ldrb	r3, [r3]
 982 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 983              		.loc 1 919 0
 984 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 985 0534 002B     		cmp	r3, #0
 986 0536 13D0     		beq	.L42
 987              		.loc 1 919 0 is_stmt 0 discriminator 1
 988 0538 314B     		ldr	r3, .L52
 989 053a 1B78     		ldrb	r3, [r3]
 990 053c DAB2     		uxtb	r2, r3
 991 053e FB79     		ldrb	r3, [r7, #7]
 992 0540 1340     		ands	r3, r3, r2
 993 0542 DBB2     		uxtb	r3, r3
 994 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 995 0546 9A42     		cmp	r2, r3
 996 0548 0AD1     		bne	.L42
 997              		.loc 1 919 0 discriminator 2
 998 054a 2F4B     		ldr	r3, .L52+8
 999 054c 1B78     		ldrb	r3, [r3]
 1000 054e DBB2     		uxtb	r3, r3
 1001 0550 43F00803 		orr	r3, r3, #8
 1002 0554 DAB2     		uxtb	r2, r3
 1003 0556 2C4B     		ldr	r3, .L52+8
 1004 0558 1A70     		strb	r2, [r3]
 1005 055a 294B     		ldr	r3, .L52
 1006 055c 0022     		movs	r2, #0
 1007 055e 1A70     		strb	r2, [r3]
 1008              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 35


 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1009              		.loc 1 924 0 is_stmt 1
 1010 0560 2A4B     		ldr	r3, .L52+12
 1011 0562 1B78     		ldrb	r3, [r3]
 1012 0564 DBB2     		uxtb	r3, r3
 1013 0566 03F00203 		and	r3, r3, #2
 1014 056a 002B     		cmp	r3, #0
 1015 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1016              		.loc 1 926 0
 1017 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1018              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1019              		.loc 1 931 0
 1020 0572 244B     		ldr	r3, .L52+4
 1021 0574 1B78     		ldrb	r3, [r3]
 1022 0576 DBB2     		uxtb	r3, r3
 1023 0578 03F00103 		and	r3, r3, #1
 1024 057c 002B     		cmp	r3, #0
 1025 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1026              		.loc 1 933 0
 1027 0580 234B     		ldr	r3, .L52+16
 1028 0582 1B78     		ldrb	r3, [r3]
 1029 0584 DAB2     		uxtb	r2, r3
 1030 0586 234B     		ldr	r3, .L52+20
 1031 0588 1B78     		ldrb	r3, [r3]
 1032 058a DBB2     		uxtb	r3, r3
 1033 058c 9A42     		cmp	r2, r3
 1034 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1035              		.loc 1 935 0
 1036 0590 1B4B     		ldr	r3, .L52
 1037 0592 1B78     		ldrb	r3, [r3]
 1038 0594 DBB2     		uxtb	r3, r3
 1039 0596 43F00103 		orr	r3, r3, #1
 1040 059a DAB2     		uxtb	r2, r3
 1041 059c 184B     		ldr	r3, .L52
 1042 059e 1A70     		strb	r2, [r3]
 1043 05a0 07E0     		b	.L43
 1044              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1045              		.loc 1 939 0
 1046 05a2 174B     		ldr	r3, .L52
 1047 05a4 1B78     		ldrb	r3, [r3]
 1048 05a6 DBB2     		uxtb	r3, r3
 1049 05a8 23F00103 		bic	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 36


 1050 05ac DAB2     		uxtb	r2, r3
 1051 05ae 144B     		ldr	r3, .L52
 1052 05b0 1A70     		strb	r2, [r3]
 1053              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1054              		.loc 1 944 0
 1055 05b2 144B     		ldr	r3, .L52+4
 1056 05b4 1B78     		ldrb	r3, [r3]
 1057 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1058              		.loc 1 945 0
 1059 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1060 05ba 002B     		cmp	r3, #0
 1061 05bc 13D0     		beq	.L45
 1062              		.loc 1 945 0 is_stmt 0 discriminator 1
 1063 05be 104B     		ldr	r3, .L52
 1064 05c0 1B78     		ldrb	r3, [r3]
 1065 05c2 DAB2     		uxtb	r2, r3
 1066 05c4 FB79     		ldrb	r3, [r7, #7]
 1067 05c6 1340     		ands	r3, r3, r2
 1068 05c8 DBB2     		uxtb	r3, r3
 1069 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1070 05cc 9A42     		cmp	r2, r3
 1071 05ce 0AD1     		bne	.L45
 1072              		.loc 1 945 0 discriminator 2
 1073 05d0 0D4B     		ldr	r3, .L52+8
 1074 05d2 1B78     		ldrb	r3, [r3]
 1075 05d4 DBB2     		uxtb	r3, r3
 1076 05d6 43F00803 		orr	r3, r3, #8
 1077 05da DAB2     		uxtb	r2, r3
 1078 05dc 0A4B     		ldr	r3, .L52+8
 1079 05de 1A70     		strb	r2, [r3]
 1080 05e0 074B     		ldr	r3, .L52
 1081 05e2 0022     		movs	r2, #0
 1082 05e4 1A70     		strb	r2, [r3]
 1083              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1084              		.loc 1 948 0 is_stmt 1
 1085 05e6 094B     		ldr	r3, .L52+12
 1086 05e8 1B78     		ldrb	r3, [r3]
 1087 05ea DBB2     		uxtb	r3, r3
 1088 05ec 03F00103 		and	r3, r3, #1
 1089 05f0 002B     		cmp	r3, #0
 1090 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1091              		.loc 1 950 0
 1092 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1093              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 37


 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1094              		.loc 1 956 0
 1095 05f8 00BF     		nop
 1096 05fa 0837     		adds	r7, r7, #8
 1097              		.cfi_def_cfa_offset 8
 1098 05fc BD46     		mov	sp, r7
 1099              		.cfi_def_cfa_register 13
 1100              		@ sp needed
 1101 05fe 80BD     		pop	{r7, pc}
 1102              	.L53:
 1103              		.align	2
 1104              	.L52:
 1105 0600 00000000 		.word	RTC_alarmCurStatus
 1106 0604 00000000 		.word	RTC_alarmCfgMask
 1107 0608 00000000 		.word	RTC_statusDateTime
 1108 060c 00000000 		.word	RTC_intervalCfgMask
 1109 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1110 0614 00000000 		.word	RTC_currentTimeDate
 1111              		.cfi_endproc
 1112              	.LFE71:
 1113              		.size	RTC_ISR, .-RTC_ISR
 1114              		.text
 1115              	.Letext0:
 1116              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1117              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1118              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1119              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1120              		.file 6 "./data.h"
 1121              		.file 7 "./modem.h"
 1122              		.file 8 "./notoriOS.h"
 1123              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1124              		.file 10 "./App_LED.h"
 1125              		.section	.debug_info,"",%progbits
 1126              	.Ldebug_info0:
 1127 0000 35060000 		.4byte	0x635
 1128 0004 0400     		.2byte	0x4
 1129 0006 00000000 		.4byte	.Ldebug_abbrev0
 1130 000a 04       		.byte	0x4
 1131 000b 01       		.uleb128 0x1
 1132 000c 87000000 		.4byte	.LASF96
 1133 0010 0C       		.byte	0xc
 1134 0011 20050000 		.4byte	.LASF97
 1135 0015 33040000 		.4byte	.LASF98
 1136 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1137 001d 00000000 		.4byte	0
 1138 0021 00000000 		.4byte	.Ldebug_line0
 1139 0025 02       		.uleb128 0x2
 1140 0026 01       		.byte	0x1
 1141 0027 06       		.byte	0x6
 1142 0028 B3020000 		.4byte	.LASF0
 1143 002c 02       		.uleb128 0x2
 1144 002d 01       		.byte	0x1
 1145 002e 08       		.byte	0x8
 1146 002f 68020000 		.4byte	.LASF1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 38


 1147 0033 02       		.uleb128 0x2
 1148 0034 02       		.byte	0x2
 1149 0035 05       		.byte	0x5
 1150 0036 66000000 		.4byte	.LASF2
 1151 003a 02       		.uleb128 0x2
 1152 003b 02       		.byte	0x2
 1153 003c 07       		.byte	0x7
 1154 003d 84030000 		.4byte	.LASF3
 1155 0041 03       		.uleb128 0x3
 1156 0042 09050000 		.4byte	.LASF9
 1157 0046 02       		.byte	0x2
 1158 0047 3F       		.byte	0x3f
 1159 0048 4C000000 		.4byte	0x4c
 1160 004c 02       		.uleb128 0x2
 1161 004d 04       		.byte	0x4
 1162 004e 05       		.byte	0x5
 1163 004f D9010000 		.4byte	.LASF4
 1164 0053 02       		.uleb128 0x2
 1165 0054 04       		.byte	0x4
 1166 0055 07       		.byte	0x7
 1167 0056 8D040000 		.4byte	.LASF5
 1168 005a 02       		.uleb128 0x2
 1169 005b 08       		.byte	0x8
 1170 005c 05       		.byte	0x5
 1171 005d C6010000 		.4byte	.LASF6
 1172 0061 02       		.uleb128 0x2
 1173 0062 08       		.byte	0x8
 1174 0063 07       		.byte	0x7
 1175 0064 D4020000 		.4byte	.LASF7
 1176 0068 04       		.uleb128 0x4
 1177 0069 04       		.byte	0x4
 1178 006a 05       		.byte	0x5
 1179 006b 696E7400 		.ascii	"int\000"
 1180 006f 02       		.uleb128 0x2
 1181 0070 04       		.byte	0x4
 1182 0071 07       		.byte	0x7
 1183 0072 0F030000 		.4byte	.LASF8
 1184 0076 03       		.uleb128 0x3
 1185 0077 D3030000 		.4byte	.LASF10
 1186 007b 03       		.byte	0x3
 1187 007c 2C       		.byte	0x2c
 1188 007d 41000000 		.4byte	0x41
 1189 0081 05       		.uleb128 0x5
 1190 0082 7A010000 		.4byte	.LASF11
 1191 0086 04       		.byte	0x4
 1192 0087 9201     		.2byte	0x192
 1193 0089 2C000000 		.4byte	0x2c
 1194 008d 05       		.uleb128 0x5
 1195 008e 59010000 		.4byte	.LASF12
 1196 0092 04       		.byte	0x4
 1197 0093 9301     		.2byte	0x193
 1198 0095 3A000000 		.4byte	0x3a
 1199 0099 05       		.uleb128 0x5
 1200 009a 8D010000 		.4byte	.LASF13
 1201 009e 04       		.byte	0x4
 1202 009f 9601     		.2byte	0x196
 1203 00a1 33000000 		.4byte	0x33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 39


 1204 00a5 05       		.uleb128 0x5
 1205 00a6 9F040000 		.4byte	.LASF14
 1206 00aa 04       		.byte	0x4
 1207 00ab 9701     		.2byte	0x197
 1208 00ad 4C000000 		.4byte	0x4c
 1209 00b1 02       		.uleb128 0x2
 1210 00b2 04       		.byte	0x4
 1211 00b3 04       		.byte	0x4
 1212 00b4 B6010000 		.4byte	.LASF15
 1213 00b8 02       		.uleb128 0x2
 1214 00b9 08       		.byte	0x8
 1215 00ba 04       		.byte	0x4
 1216 00bb A5040000 		.4byte	.LASF16
 1217 00bf 02       		.uleb128 0x2
 1218 00c0 01       		.byte	0x1
 1219 00c1 08       		.byte	0x8
 1220 00c2 D4010000 		.4byte	.LASF17
 1221 00c6 06       		.uleb128 0x6
 1222 00c7 81000000 		.4byte	0x81
 1223 00cb 07       		.uleb128 0x7
 1224 00cc 0C       		.byte	0xc
 1225 00cd 05       		.byte	0x5
 1226 00ce 30       		.byte	0x30
 1227 00cf 34010000 		.4byte	0x134
 1228 00d3 08       		.uleb128 0x8
 1229 00d4 53656300 		.ascii	"Sec\000"
 1230 00d8 05       		.byte	0x5
 1231 00d9 32       		.byte	0x32
 1232 00da 81000000 		.4byte	0x81
 1233 00de 00       		.byte	0
 1234 00df 08       		.uleb128 0x8
 1235 00e0 4D696E00 		.ascii	"Min\000"
 1236 00e4 05       		.byte	0x5
 1237 00e5 33       		.byte	0x33
 1238 00e6 81000000 		.4byte	0x81
 1239 00ea 01       		.byte	0x1
 1240 00eb 09       		.uleb128 0x9
 1241 00ec 2F010000 		.4byte	.LASF18
 1242 00f0 05       		.byte	0x5
 1243 00f1 34       		.byte	0x34
 1244 00f2 81000000 		.4byte	0x81
 1245 00f6 02       		.byte	0x2
 1246 00f7 09       		.uleb128 0x9
 1247 00f8 BC010000 		.4byte	.LASF19
 1248 00fc 05       		.byte	0x5
 1249 00fd 35       		.byte	0x35
 1250 00fe 81000000 		.4byte	0x81
 1251 0102 03       		.byte	0x3
 1252 0103 09       		.uleb128 0x9
 1253 0104 23040000 		.4byte	.LASF20
 1254 0108 05       		.byte	0x5
 1255 0109 36       		.byte	0x36
 1256 010a 81000000 		.4byte	0x81
 1257 010e 04       		.byte	0x4
 1258 010f 09       		.uleb128 0x9
 1259 0110 C9050000 		.4byte	.LASF21
 1260 0114 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 40


 1261 0115 37       		.byte	0x37
 1262 0116 8D000000 		.4byte	0x8d
 1263 011a 06       		.byte	0x6
 1264 011b 09       		.uleb128 0x9
 1265 011c 25020000 		.4byte	.LASF22
 1266 0120 05       		.byte	0x5
 1267 0121 38       		.byte	0x38
 1268 0122 81000000 		.4byte	0x81
 1269 0126 08       		.byte	0x8
 1270 0127 09       		.uleb128 0x9
 1271 0128 20020000 		.4byte	.LASF23
 1272 012c 05       		.byte	0x5
 1273 012d 39       		.byte	0x39
 1274 012e 8D000000 		.4byte	0x8d
 1275 0132 0A       		.byte	0xa
 1276 0133 00       		.byte	0
 1277 0134 03       		.uleb128 0x3
 1278 0135 7B050000 		.4byte	.LASF24
 1279 0139 05       		.byte	0x5
 1280 013a 3A       		.byte	0x3a
 1281 013b 3F010000 		.4byte	0x13f
 1282 013f 06       		.uleb128 0x6
 1283 0140 CB000000 		.4byte	0xcb
 1284 0144 02       		.uleb128 0x2
 1285 0145 08       		.byte	0x8
 1286 0146 04       		.byte	0x4
 1287 0147 5C020000 		.4byte	.LASF25
 1288 014b 02       		.uleb128 0x2
 1289 014c 04       		.byte	0x4
 1290 014d 07       		.byte	0x7
 1291 014e 70000000 		.4byte	.LASF26
 1292 0152 0A       		.uleb128 0xa
 1293 0153 BF000000 		.4byte	0xbf
 1294 0157 62010000 		.4byte	0x162
 1295 015b 0B       		.uleb128 0xb
 1296 015c 4B010000 		.4byte	0x14b
 1297 0160 17       		.byte	0x17
 1298 0161 00       		.byte	0
 1299 0162 07       		.uleb128 0x7
 1300 0163 2C       		.byte	0x2c
 1301 0164 06       		.byte	0x6
 1302 0165 14       		.byte	0x14
 1303 0166 8F010000 		.4byte	0x18f
 1304 016a 08       		.uleb128 0x8
 1305 016b 6B657900 		.ascii	"key\000"
 1306 016f 06       		.byte	0x6
 1307 0170 15       		.byte	0x15
 1308 0171 8F010000 		.4byte	0x18f
 1309 0175 00       		.byte	0
 1310 0176 09       		.uleb128 0x9
 1311 0177 53010000 		.4byte	.LASF27
 1312 017b 06       		.byte	0x6
 1313 017c 16       		.byte	0x16
 1314 017d 8F010000 		.4byte	0x18f
 1315 0181 14       		.byte	0x14
 1316 0182 09       		.uleb128 0x9
 1317 0183 93010000 		.4byte	.LASF28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 41


 1318 0187 06       		.byte	0x6
 1319 0188 17       		.byte	0x17
 1320 0189 A5000000 		.4byte	0xa5
 1321 018d 28       		.byte	0x28
 1322 018e 00       		.byte	0
 1323 018f 0A       		.uleb128 0xa
 1324 0190 BF000000 		.4byte	0xbf
 1325 0194 9F010000 		.4byte	0x19f
 1326 0198 0B       		.uleb128 0xb
 1327 0199 4B010000 		.4byte	0x14b
 1328 019d 13       		.byte	0x13
 1329 019e 00       		.byte	0
 1330 019f 03       		.uleb128 0x3
 1331 01a0 1C030000 		.4byte	.LASF29
 1332 01a4 06       		.byte	0x6
 1333 01a5 19       		.byte	0x19
 1334 01a6 62010000 		.4byte	0x162
 1335 01aa 07       		.uleb128 0x7
 1336 01ab 3C       		.byte	0x3c
 1337 01ac 07       		.byte	0x7
 1338 01ad 35       		.byte	0x35
 1339 01ae D7010000 		.4byte	0x1d7
 1340 01b2 09       		.uleb128 0x9
 1341 01b3 1A000000 		.4byte	.LASF30
 1342 01b7 07       		.byte	0x7
 1343 01b8 36       		.byte	0x36
 1344 01b9 8F010000 		.4byte	0x18f
 1345 01bd 00       		.byte	0
 1346 01be 09       		.uleb128 0x9
 1347 01bf 00000000 		.4byte	.LASF31
 1348 01c3 07       		.byte	0x7
 1349 01c4 37       		.byte	0x37
 1350 01c5 8F010000 		.4byte	0x18f
 1351 01c9 14       		.byte	0x14
 1352 01ca 09       		.uleb128 0x9
 1353 01cb CE030000 		.4byte	.LASF32
 1354 01cf 07       		.byte	0x7
 1355 01d0 38       		.byte	0x38
 1356 01d1 8F010000 		.4byte	0x18f
 1357 01d5 28       		.byte	0x28
 1358 01d6 00       		.byte	0
 1359 01d7 03       		.uleb128 0x3
 1360 01d8 DB040000 		.4byte	.LASF33
 1361 01dc 07       		.byte	0x7
 1362 01dd 3A       		.byte	0x3a
 1363 01de AA010000 		.4byte	0x1aa
 1364 01e2 07       		.uleb128 0x7
 1365 01e3 20       		.byte	0x20
 1366 01e4 07       		.byte	0x7
 1367 01e5 3C       		.byte	0x3c
 1368 01e6 4B020000 		.4byte	0x24b
 1369 01ea 09       		.uleb128 0x9
 1370 01eb 28030000 		.4byte	.LASF34
 1371 01ef 07       		.byte	0x7
 1372 01f0 3D       		.byte	0x3d
 1373 01f1 68000000 		.4byte	0x68
 1374 01f5 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 42


 1375 01f6 08       		.uleb128 0x8
 1376 01f7 62657200 		.ascii	"ber\000"
 1377 01fb 07       		.byte	0x7
 1378 01fc 3E       		.byte	0x3e
 1379 01fd 68000000 		.4byte	0x68
 1380 0201 04       		.byte	0x4
 1381 0202 09       		.uleb128 0x9
 1382 0203 88010000 		.4byte	.LASF35
 1383 0207 07       		.byte	0x7
 1384 0208 3F       		.byte	0x3f
 1385 0209 68000000 		.4byte	0x68
 1386 020d 08       		.byte	0x8
 1387 020e 09       		.uleb128 0x9
 1388 020f 42010000 		.4byte	.LASF36
 1389 0213 07       		.byte	0x7
 1390 0214 40       		.byte	0x40
 1391 0215 68000000 		.4byte	0x68
 1392 0219 0C       		.byte	0xc
 1393 021a 09       		.uleb128 0x9
 1394 021b 2E040000 		.4byte	.LASF37
 1395 021f 07       		.byte	0x7
 1396 0220 41       		.byte	0x41
 1397 0221 68000000 		.4byte	0x68
 1398 0225 10       		.byte	0x10
 1399 0226 09       		.uleb128 0x9
 1400 0227 76020000 		.4byte	.LASF38
 1401 022b 07       		.byte	0x7
 1402 022c 42       		.byte	0x42
 1403 022d 68000000 		.4byte	0x68
 1404 0231 14       		.byte	0x14
 1405 0232 09       		.uleb128 0x9
 1406 0233 97030000 		.4byte	.LASF39
 1407 0237 07       		.byte	0x7
 1408 0238 43       		.byte	0x43
 1409 0239 68000000 		.4byte	0x68
 1410 023d 18       		.byte	0x18
 1411 023e 09       		.uleb128 0x9
 1412 023f BB030000 		.4byte	.LASF40
 1413 0243 07       		.byte	0x7
 1414 0244 44       		.byte	0x44
 1415 0245 68000000 		.4byte	0x68
 1416 0249 1C       		.byte	0x1c
 1417 024a 00       		.byte	0
 1418 024b 03       		.uleb128 0x3
 1419 024c E3030000 		.4byte	.LASF41
 1420 0250 07       		.byte	0x7
 1421 0251 46       		.byte	0x46
 1422 0252 E2010000 		.4byte	0x1e2
 1423 0256 07       		.uleb128 0x7
 1424 0257 05       		.byte	0x5
 1425 0258 07       		.byte	0x7
 1426 0259 52       		.byte	0x52
 1427 025a 9B020000 		.4byte	0x29b
 1428 025e 09       		.uleb128 0x9
 1429 025f A7050000 		.4byte	.LASF42
 1430 0263 07       		.byte	0x7
 1431 0264 54       		.byte	0x54
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 43


 1432 0265 81000000 		.4byte	0x81
 1433 0269 00       		.byte	0
 1434 026a 09       		.uleb128 0x9
 1435 026b 70030000 		.4byte	.LASF43
 1436 026f 07       		.byte	0x7
 1437 0270 56       		.byte	0x56
 1438 0271 9B020000 		.4byte	0x29b
 1439 0275 01       		.byte	0x1
 1440 0276 09       		.uleb128 0x9
 1441 0277 45020000 		.4byte	.LASF44
 1442 027b 07       		.byte	0x7
 1443 027c 58       		.byte	0x58
 1444 027d 81000000 		.4byte	0x81
 1445 0281 02       		.byte	0x2
 1446 0282 09       		.uleb128 0x9
 1447 0283 2E030000 		.4byte	.LASF45
 1448 0287 07       		.byte	0x7
 1449 0288 5A       		.byte	0x5a
 1450 0289 81000000 		.4byte	0x81
 1451 028d 03       		.byte	0x3
 1452 028e 09       		.uleb128 0x9
 1453 028f CF040000 		.4byte	.LASF46
 1454 0293 07       		.byte	0x7
 1455 0294 5D       		.byte	0x5d
 1456 0295 81000000 		.4byte	0x81
 1457 0299 04       		.byte	0x4
 1458 029a 00       		.byte	0
 1459 029b 02       		.uleb128 0x2
 1460 029c 01       		.byte	0x1
 1461 029d 02       		.byte	0x2
 1462 029e F1030000 		.4byte	.LASF47
 1463 02a2 03       		.uleb128 0x3
 1464 02a3 59030000 		.4byte	.LASF48
 1465 02a7 07       		.byte	0x7
 1466 02a8 5F       		.byte	0x5f
 1467 02a9 56020000 		.4byte	0x256
 1468 02ad 07       		.uleb128 0x7
 1469 02ae 06       		.byte	0x6
 1470 02af 08       		.byte	0x8
 1471 02b0 2E       		.byte	0x2e
 1472 02b1 E6020000 		.4byte	0x2e6
 1473 02b5 09       		.uleb128 0x9
 1474 02b6 57000000 		.4byte	.LASF49
 1475 02ba 08       		.byte	0x8
 1476 02bb 30       		.byte	0x30
 1477 02bc 8D000000 		.4byte	0x8d
 1478 02c0 00       		.byte	0
 1479 02c1 09       		.uleb128 0x9
 1480 02c2 41000000 		.4byte	.LASF50
 1481 02c6 08       		.byte	0x8
 1482 02c7 31       		.byte	0x31
 1483 02c8 99000000 		.4byte	0x99
 1484 02cc 02       		.byte	0x2
 1485 02cd 09       		.uleb128 0x9
 1486 02ce E8040000 		.4byte	.LASF51
 1487 02d2 08       		.byte	0x8
 1488 02d3 32       		.byte	0x32
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 44


 1489 02d4 81000000 		.4byte	0x81
 1490 02d8 04       		.byte	0x4
 1491 02d9 09       		.uleb128 0x9
 1492 02da 41050000 		.4byte	.LASF52
 1493 02de 08       		.byte	0x8
 1494 02df 33       		.byte	0x33
 1495 02e0 81000000 		.4byte	0x81
 1496 02e4 05       		.byte	0x5
 1497 02e5 00       		.byte	0
 1498 02e6 03       		.uleb128 0x3
 1499 02e7 3F020000 		.4byte	.LASF53
 1500 02eb 08       		.byte	0x8
 1501 02ec 36       		.byte	0x36
 1502 02ed F1020000 		.4byte	0x2f1
 1503 02f1 06       		.uleb128 0x6
 1504 02f2 AD020000 		.4byte	0x2ad
 1505 02f6 07       		.uleb128 0x7
 1506 02f7 1C       		.byte	0x1c
 1507 02f8 08       		.byte	0x8
 1508 02f9 39       		.byte	0x39
 1509 02fa 17030000 		.4byte	0x317
 1510 02fe 09       		.uleb128 0x9
 1511 02ff F2010000 		.4byte	.LASF54
 1512 0303 08       		.byte	0x8
 1513 0304 3B       		.byte	0x3b
 1514 0305 17030000 		.4byte	0x317
 1515 0309 00       		.byte	0
 1516 030a 09       		.uleb128 0x9
 1517 030b 34010000 		.4byte	.LASF55
 1518 030f 08       		.byte	0x8
 1519 0310 3C       		.byte	0x3c
 1520 0311 52010000 		.4byte	0x152
 1521 0315 04       		.byte	0x4
 1522 0316 00       		.byte	0
 1523 0317 0C       		.uleb128 0xc
 1524 0318 04       		.byte	0x4
 1525 0319 D7010000 		.4byte	0x1d7
 1526 031d 03       		.uleb128 0x3
 1527 031e 79030000 		.4byte	.LASF56
 1528 0322 08       		.byte	0x8
 1529 0323 3E       		.byte	0x3e
 1530 0324 F6020000 		.4byte	0x2f6
 1531 0328 07       		.uleb128 0x7
 1532 0329 68       		.byte	0x68
 1533 032a 08       		.byte	0x8
 1534 032b 44       		.byte	0x44
 1535 032c 49030000 		.4byte	0x349
 1536 0330 09       		.uleb128 0x9
 1537 0331 79000000 		.4byte	.LASF57
 1538 0335 08       		.byte	0x8
 1539 0336 49       		.byte	0x49
 1540 0337 49030000 		.4byte	0x349
 1541 033b 00       		.byte	0
 1542 033c 09       		.uleb128 0x9
 1543 033d 60010000 		.4byte	.LASF58
 1544 0341 08       		.byte	0x8
 1545 0342 4A       		.byte	0x4a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 45


 1546 0343 68000000 		.4byte	0x68
 1547 0347 64       		.byte	0x64
 1548 0348 00       		.byte	0
 1549 0349 0A       		.uleb128 0xa
 1550 034a BF000000 		.4byte	0xbf
 1551 034e 59030000 		.4byte	0x359
 1552 0352 0B       		.uleb128 0xb
 1553 0353 4B010000 		.4byte	0x14b
 1554 0357 63       		.byte	0x63
 1555 0358 00       		.byte	0
 1556 0359 03       		.uleb128 0x3
 1557 035a 32000000 		.4byte	.LASF59
 1558 035e 08       		.byte	0x8
 1559 035f 50       		.byte	0x50
 1560 0360 28030000 		.4byte	0x328
 1561 0364 0D       		.uleb128 0xd
 1562 0365 AC040000 		.4byte	.LASF60
 1563 0369 01       		.byte	0x1
 1564 036a 36       		.byte	0x36
 1565 036b 00000000 		.4byte	.LFB64
 1566 036f 0E000000 		.4byte	.LFE64-.LFB64
 1567 0373 01       		.uleb128 0x1
 1568 0374 9C       		.byte	0x9c
 1569 0375 0D       		.uleb128 0xd
 1570 0376 76040000 		.4byte	.LASF61
 1571 037a 01       		.byte	0x1
 1572 037b 51       		.byte	0x51
 1573 037c 00000000 		.4byte	.LFB65
 1574 0380 0E000000 		.4byte	.LFE65-.LFB65
 1575 0384 01       		.uleb128 0x1
 1576 0385 9C       		.byte	0x9c
 1577 0386 0D       		.uleb128 0xd
 1578 0387 0E040000 		.4byte	.LASF62
 1579 038b 01       		.byte	0x1
 1580 038c 6C       		.byte	0x6c
 1581 038d 00000000 		.4byte	.LFB66
 1582 0391 0E000000 		.4byte	.LFE66-.LFB66
 1583 0395 01       		.uleb128 0x1
 1584 0396 9C       		.byte	0x9c
 1585 0397 0D       		.uleb128 0xd
 1586 0398 2B020000 		.4byte	.LASF63
 1587 039c 01       		.byte	0x1
 1588 039d 87       		.byte	0x87
 1589 039e 00000000 		.4byte	.LFB67
 1590 03a2 0E000000 		.4byte	.LFE67-.LFB67
 1591 03a6 01       		.uleb128 0x1
 1592 03a7 9C       		.byte	0x9c
 1593 03a8 0D       		.uleb128 0xd
 1594 03a9 15010000 		.4byte	.LASF64
 1595 03ad 01       		.byte	0x1
 1596 03ae A2       		.byte	0xa2
 1597 03af 00000000 		.4byte	.LFB68
 1598 03b3 0E000000 		.4byte	.LFE68-.LFB68
 1599 03b7 01       		.uleb128 0x1
 1600 03b8 9C       		.byte	0x9c
 1601 03b9 0D       		.uleb128 0xd
 1602 03ba FD010000 		.4byte	.LASF65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 46


 1603 03be 01       		.byte	0x1
 1604 03bf BD       		.byte	0xbd
 1605 03c0 00000000 		.4byte	.LFB69
 1606 03c4 0E000000 		.4byte	.LFE69-.LFB69
 1607 03c8 01       		.uleb128 0x1
 1608 03c9 9C       		.byte	0x9c
 1609 03ca 0D       		.uleb128 0xd
 1610 03cb BF020000 		.4byte	.LASF66
 1611 03cf 01       		.byte	0x1
 1612 03d0 D8       		.byte	0xd8
 1613 03d1 00000000 		.4byte	.LFB70
 1614 03d5 0E000000 		.4byte	.LFE70-.LFB70
 1615 03d9 01       		.uleb128 0x1
 1616 03da 9C       		.byte	0x9c
 1617 03db 0E       		.uleb128 0xe
 1618 03dc 80010000 		.4byte	.LASF99
 1619 03e0 01       		.byte	0x1
 1620 03e1 0B01     		.2byte	0x10b
 1621 03e3 00000000 		.4byte	.LFB71
 1622 03e7 18060000 		.4byte	.LFE71-.LFB71
 1623 03eb 01       		.uleb128 0x1
 1624 03ec 9C       		.byte	0x9c
 1625 03ed 01040000 		.4byte	0x401
 1626 03f1 0F       		.uleb128 0xf
 1627 03f2 DB030000 		.4byte	.LASF100
 1628 03f6 01       		.byte	0x1
 1629 03f7 0D01     		.2byte	0x10d
 1630 03f9 81000000 		.4byte	0x81
 1631 03fd 02       		.uleb128 0x2
 1632 03fe 91       		.byte	0x91
 1633 03ff 77       		.sleb128 -9
 1634 0400 00       		.byte	0
 1635 0401 10       		.uleb128 0x10
 1636 0402 92020000 		.4byte	.LASF67
 1637 0406 05       		.byte	0x5
 1638 0407 2D01     		.2byte	0x12d
 1639 0409 34010000 		.4byte	0x134
 1640 040d 10       		.uleb128 0x10
 1641 040e FB020000 		.4byte	.LASF68
 1642 0412 05       		.byte	0x5
 1643 0413 2E01     		.2byte	0x12e
 1644 0415 34010000 		.4byte	0x134
 1645 0419 10       		.uleb128 0x10
 1646 041a 09000000 		.4byte	.LASF69
 1647 041e 05       		.byte	0x5
 1648 041f 3901     		.2byte	0x139
 1649 0421 C6000000 		.4byte	0xc6
 1650 0425 10       		.uleb128 0x10
 1651 0426 38030000 		.4byte	.LASF70
 1652 042a 05       		.byte	0x5
 1653 042b 3A01     		.2byte	0x13a
 1654 042d C6000000 		.4byte	0xc6
 1655 0431 10       		.uleb128 0x10
 1656 0432 89050000 		.4byte	.LASF71
 1657 0436 05       		.byte	0x5
 1658 0437 3B01     		.2byte	0x13b
 1659 0439 C6000000 		.4byte	0xc6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 47


 1660 043d 10       		.uleb128 0x10
 1661 043e F6040000 		.4byte	.LASF72
 1662 0442 05       		.byte	0x5
 1663 0443 3C01     		.2byte	0x13c
 1664 0445 C6000000 		.4byte	0xc6
 1665 0449 0A       		.uleb128 0xa
 1666 044a 59040000 		.4byte	0x459
 1667 044e 59040000 		.4byte	0x459
 1668 0452 0B       		.uleb128 0xb
 1669 0453 4B010000 		.4byte	0x14b
 1670 0457 0B       		.byte	0xb
 1671 0458 00       		.byte	0
 1672 0459 11       		.uleb128 0x11
 1673 045a 81000000 		.4byte	0x81
 1674 045e 10       		.uleb128 0x10
 1675 045f 21000000 		.4byte	.LASF73
 1676 0463 05       		.byte	0x5
 1677 0464 3E01     		.2byte	0x13e
 1678 0466 6A040000 		.4byte	0x46a
 1679 046a 11       		.uleb128 0x11
 1680 046b 49040000 		.4byte	0x449
 1681 046f 10       		.uleb128 0x10
 1682 0470 6E050000 		.4byte	.LASF74
 1683 0474 09       		.byte	0x9
 1684 0475 1207     		.2byte	0x712
 1685 0477 7B040000 		.4byte	0x47b
 1686 047b 06       		.uleb128 0x6
 1687 047c 76000000 		.4byte	0x76
 1688 0480 12       		.uleb128 0x12
 1689 0481 E2010000 		.4byte	.LASF75
 1690 0485 06       		.byte	0x6
 1691 0486 11       		.byte	0x11
 1692 0487 9B020000 		.4byte	0x29b
 1693 048b 05       		.uleb128 0x5
 1694 048c 03       		.byte	0x3
 1695 048d 00000000 		.4byte	buffer_overflow
 1696 0491 12       		.uleb128 0x12
 1697 0492 68010000 		.4byte	.LASF76
 1698 0496 06       		.byte	0x6
 1699 0497 22       		.byte	0x22
 1700 0498 8D000000 		.4byte	0x8d
 1701 049c 05       		.uleb128 0x5
 1702 049d 03       		.byte	0x3
 1703 049e 00000000 		.4byte	dataPointsInStack
 1704 04a2 12       		.uleb128 0x12
 1705 04a3 9D010000 		.4byte	.LASF77
 1706 04a7 06       		.byte	0x6
 1707 04a8 23       		.byte	0x23
 1708 04a9 8D000000 		.4byte	0x8d
 1709 04ad 05       		.uleb128 0x5
 1710 04ae 03       		.byte	0x3
 1711 04af 00000000 		.4byte	dataPointsInStackDesired
 1712 04b3 0A       		.uleb128 0xa
 1713 04b4 9F010000 		.4byte	0x19f
 1714 04b8 C3040000 		.4byte	0x4c3
 1715 04bc 0B       		.uleb128 0xb
 1716 04bd 4B010000 		.4byte	0x14b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 48


 1717 04c1 95       		.byte	0x95
 1718 04c2 00       		.byte	0
 1719 04c3 12       		.uleb128 0x12
 1720 04c4 2A010000 		.4byte	.LASF78
 1721 04c8 06       		.byte	0x6
 1722 04c9 24       		.byte	0x24
 1723 04ca B3040000 		.4byte	0x4b3
 1724 04ce 05       		.uleb128 0x5
 1725 04cf 03       		.byte	0x3
 1726 04d0 00000000 		.4byte	data
 1727 04d4 12       		.uleb128 0x12
 1728 04d5 A7020000 		.4byte	.LASF79
 1729 04d9 07       		.byte	0x7
 1730 04da 1F       		.byte	0x1f
 1731 04db 81000000 		.4byte	0x81
 1732 04df 05       		.uleb128 0x5
 1733 04e0 03       		.byte	0x3
 1734 04e1 00000000 		.4byte	modem_state
 1735 04e5 12       		.uleb128 0x12
 1736 04e6 7B020000 		.4byte	.LASF80
 1737 04ea 07       		.byte	0x7
 1738 04eb 62       		.byte	0x62
 1739 04ec A5000000 		.4byte	0xa5
 1740 04f0 05       		.uleb128 0x5
 1741 04f1 03       		.byte	0x3
 1742 04f2 00000000 		.4byte	modem_start_time_stamp
 1743 04f6 12       		.uleb128 0x12
 1744 04f7 F2010000 		.4byte	.LASF54
 1745 04fb 07       		.byte	0x7
 1746 04fc 63       		.byte	0x63
 1747 04fd D7010000 		.4byte	0x1d7
 1748 0501 05       		.uleb128 0x5
 1749 0502 03       		.byte	0x3
 1750 0503 00000000 		.4byte	modem_info
 1751 0507 12       		.uleb128 0x12
 1752 0508 C3040000 		.4byte	.LASF81
 1753 050c 07       		.byte	0x7
 1754 050d 64       		.byte	0x64
 1755 050e 4B020000 		.4byte	0x24b
 1756 0512 05       		.uleb128 0x5
 1757 0513 03       		.byte	0x3
 1758 0514 00000000 		.4byte	modem_stats
 1759 0518 12       		.uleb128 0x12
 1760 0519 59050000 		.4byte	.LASF82
 1761 051d 07       		.byte	0x7
 1762 051e 65       		.byte	0x65
 1763 051f A2020000 		.4byte	0x2a2
 1764 0523 05       		.uleb128 0x5
 1765 0524 03       		.byte	0x3
 1766 0525 00000000 		.4byte	updatable_parameters
 1767 0529 12       		.uleb128 0x12
 1768 052a 81000000 		.4byte	.LASF83
 1769 052e 0A       		.byte	0xa
 1770 052f 12       		.byte	0x12
 1771 0530 49030000 		.4byte	0x349
 1772 0534 05       		.uleb128 0x5
 1773 0535 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 49


 1774 0536 00000000 		.4byte	inbox
 1775 053a 0A       		.uleb128 0xa
 1776 053b BF000000 		.4byte	0xbf
 1777 053f 4B050000 		.4byte	0x54b
 1778 0543 13       		.uleb128 0x13
 1779 0544 4B010000 		.4byte	0x14b
 1780 0548 0F27     		.2byte	0x270f
 1781 054a 00       		.byte	0
 1782 054b 12       		.uleb128 0x12
 1783 054c B1050000 		.4byte	.LASF84
 1784 0550 08       		.byte	0x8
 1785 0551 18       		.byte	0x18
 1786 0552 3A050000 		.4byte	0x53a
 1787 0556 05       		.uleb128 0x5
 1788 0557 03       		.byte	0x3
 1789 0558 00000000 		.4byte	http_request
 1790 055c 12       		.uleb128 0x12
 1791 055d 9D050000 		.4byte	.LASF85
 1792 0561 08       		.byte	0x8
 1793 0562 19       		.byte	0x19
 1794 0563 3A050000 		.4byte	0x53a
 1795 0567 05       		.uleb128 0x5
 1796 0568 03       		.byte	0x3
 1797 0569 00000000 		.4byte	http_body
 1798 056d 0A       		.uleb128 0xa
 1799 056e BF000000 		.4byte	0xbf
 1800 0572 7D050000 		.4byte	0x57d
 1801 0576 0B       		.uleb128 0xb
 1802 0577 4B010000 		.4byte	0x14b
 1803 057b C7       		.byte	0xc7
 1804 057c 00       		.byte	0
 1805 057d 12       		.uleb128 0x12
 1806 057e 6B040000 		.4byte	.LASF86
 1807 0582 08       		.byte	0x8
 1808 0583 1A       		.byte	0x1a
 1809 0584 6D050000 		.4byte	0x56d
 1810 0588 05       		.uleb128 0x5
 1811 0589 03       		.byte	0x3
 1812 058a 00000000 		.4byte	http_route
 1813 058e 12       		.uleb128 0x12
 1814 058f AF030000 		.4byte	.LASF87
 1815 0593 08       		.byte	0x8
 1816 0594 41       		.byte	0x41
 1817 0595 1D030000 		.4byte	0x31d
 1818 0599 05       		.uleb128 0x5
 1819 059a 03       		.byte	0x3
 1820 059b 00000000 		.4byte	system_info
 1821 059f 12       		.uleb128 0x12
 1822 05a0 EB020000 		.4byte	.LASF88
 1823 05a4 08       		.byte	0x8
 1824 05a5 53       		.byte	0x53
 1825 05a6 59030000 		.4byte	0x359
 1826 05aa 05       		.uleb128 0x5
 1827 05ab 03       		.byte	0x3
 1828 05ac 00000000 		.4byte	system_settings
 1829 05b0 12       		.uleb128 0x12
 1830 05b1 13020000 		.4byte	.LASF89
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 50


 1831 05b5 08       		.byte	0x8
 1832 05b6 6F       		.byte	0x6f
 1833 05b7 E6020000 		.4byte	0x2e6
 1834 05bb 05       		.uleb128 0x5
 1835 05bc 03       		.byte	0x3
 1836 05bd 00000000 		.4byte	alarmMeasure
 1837 05c1 12       		.uleb128 0x12
 1838 05c2 4B030000 		.4byte	.LASF90
 1839 05c6 08       		.byte	0x8
 1840 05c7 70       		.byte	0x70
 1841 05c8 81000000 		.4byte	0x81
 1842 05cc 05       		.uleb128 0x5
 1843 05cd 03       		.byte	0x3
 1844 05ce 00000000 		.4byte	timeToMeasure
 1845 05d2 12       		.uleb128 0x12
 1846 05d3 52020000 		.4byte	.LASF91
 1847 05d7 08       		.byte	0x8
 1848 05d8 71       		.byte	0x71
 1849 05d9 E6020000 		.4byte	0x2e6
 1850 05dd 05       		.uleb128 0x5
 1851 05de 03       		.byte	0x3
 1852 05df 00000000 		.4byte	alarmSync
 1853 05e3 12       		.uleb128 0x12
 1854 05e4 BE050000 		.4byte	.LASF92
 1855 05e8 08       		.byte	0x8
 1856 05e9 72       		.byte	0x72
 1857 05ea 81000000 		.4byte	0x81
 1858 05ee 05       		.uleb128 0x5
 1859 05ef 03       		.byte	0x3
 1860 05f0 00000000 		.4byte	timeToSync
 1861 05f4 12       		.uleb128 0x12
 1862 05f5 F7030000 		.4byte	.LASF93
 1863 05f9 08       		.byte	0x8
 1864 05fa 73       		.byte	0x73
 1865 05fb 81000000 		.4byte	0x81
 1866 05ff 05       		.uleb128 0x5
 1867 0600 03       		.byte	0x3
 1868 0601 00000000 		.4byte	timeToSycnRemoteParams
 1869 0605 14       		.uleb128 0x14
 1870 0606 68657900 		.ascii	"hey\000"
 1871 060a 08       		.byte	0x8
 1872 060b 74       		.byte	0x74
 1873 060c 81000000 		.4byte	0x81
 1874 0610 05       		.uleb128 0x5
 1875 0611 03       		.byte	0x3
 1876 0612 00000000 		.4byte	hey
 1877 0616 12       		.uleb128 0x12
 1878 0617 47010000 		.4byte	.LASF94
 1879 061b 08       		.byte	0x8
 1880 061c 77       		.byte	0x77
 1881 061d E6020000 		.4byte	0x2e6
 1882 0621 05       		.uleb128 0x5
 1883 0622 03       		.byte	0x3
 1884 0623 00000000 		.4byte	alarmAppLED
 1885 0627 12       		.uleb128 0x12
 1886 0628 13050000 		.4byte	.LASF95
 1887 062c 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 51


 1888 062d 78       		.byte	0x78
 1889 062e 81000000 		.4byte	0x81
 1890 0632 05       		.uleb128 0x5
 1891 0633 03       		.byte	0x3
 1892 0634 00000000 		.4byte	timeToAppLED
 1893 0638 00       		.byte	0
 1894              		.section	.debug_abbrev,"",%progbits
 1895              	.Ldebug_abbrev0:
 1896 0000 01       		.uleb128 0x1
 1897 0001 11       		.uleb128 0x11
 1898 0002 01       		.byte	0x1
 1899 0003 25       		.uleb128 0x25
 1900 0004 0E       		.uleb128 0xe
 1901 0005 13       		.uleb128 0x13
 1902 0006 0B       		.uleb128 0xb
 1903 0007 03       		.uleb128 0x3
 1904 0008 0E       		.uleb128 0xe
 1905 0009 1B       		.uleb128 0x1b
 1906 000a 0E       		.uleb128 0xe
 1907 000b 55       		.uleb128 0x55
 1908 000c 17       		.uleb128 0x17
 1909 000d 11       		.uleb128 0x11
 1910 000e 01       		.uleb128 0x1
 1911 000f 10       		.uleb128 0x10
 1912 0010 17       		.uleb128 0x17
 1913 0011 00       		.byte	0
 1914 0012 00       		.byte	0
 1915 0013 02       		.uleb128 0x2
 1916 0014 24       		.uleb128 0x24
 1917 0015 00       		.byte	0
 1918 0016 0B       		.uleb128 0xb
 1919 0017 0B       		.uleb128 0xb
 1920 0018 3E       		.uleb128 0x3e
 1921 0019 0B       		.uleb128 0xb
 1922 001a 03       		.uleb128 0x3
 1923 001b 0E       		.uleb128 0xe
 1924 001c 00       		.byte	0
 1925 001d 00       		.byte	0
 1926 001e 03       		.uleb128 0x3
 1927 001f 16       		.uleb128 0x16
 1928 0020 00       		.byte	0
 1929 0021 03       		.uleb128 0x3
 1930 0022 0E       		.uleb128 0xe
 1931 0023 3A       		.uleb128 0x3a
 1932 0024 0B       		.uleb128 0xb
 1933 0025 3B       		.uleb128 0x3b
 1934 0026 0B       		.uleb128 0xb
 1935 0027 49       		.uleb128 0x49
 1936 0028 13       		.uleb128 0x13
 1937 0029 00       		.byte	0
 1938 002a 00       		.byte	0
 1939 002b 04       		.uleb128 0x4
 1940 002c 24       		.uleb128 0x24
 1941 002d 00       		.byte	0
 1942 002e 0B       		.uleb128 0xb
 1943 002f 0B       		.uleb128 0xb
 1944 0030 3E       		.uleb128 0x3e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 52


 1945 0031 0B       		.uleb128 0xb
 1946 0032 03       		.uleb128 0x3
 1947 0033 08       		.uleb128 0x8
 1948 0034 00       		.byte	0
 1949 0035 00       		.byte	0
 1950 0036 05       		.uleb128 0x5
 1951 0037 16       		.uleb128 0x16
 1952 0038 00       		.byte	0
 1953 0039 03       		.uleb128 0x3
 1954 003a 0E       		.uleb128 0xe
 1955 003b 3A       		.uleb128 0x3a
 1956 003c 0B       		.uleb128 0xb
 1957 003d 3B       		.uleb128 0x3b
 1958 003e 05       		.uleb128 0x5
 1959 003f 49       		.uleb128 0x49
 1960 0040 13       		.uleb128 0x13
 1961 0041 00       		.byte	0
 1962 0042 00       		.byte	0
 1963 0043 06       		.uleb128 0x6
 1964 0044 35       		.uleb128 0x35
 1965 0045 00       		.byte	0
 1966 0046 49       		.uleb128 0x49
 1967 0047 13       		.uleb128 0x13
 1968 0048 00       		.byte	0
 1969 0049 00       		.byte	0
 1970 004a 07       		.uleb128 0x7
 1971 004b 13       		.uleb128 0x13
 1972 004c 01       		.byte	0x1
 1973 004d 0B       		.uleb128 0xb
 1974 004e 0B       		.uleb128 0xb
 1975 004f 3A       		.uleb128 0x3a
 1976 0050 0B       		.uleb128 0xb
 1977 0051 3B       		.uleb128 0x3b
 1978 0052 0B       		.uleb128 0xb
 1979 0053 01       		.uleb128 0x1
 1980 0054 13       		.uleb128 0x13
 1981 0055 00       		.byte	0
 1982 0056 00       		.byte	0
 1983 0057 08       		.uleb128 0x8
 1984 0058 0D       		.uleb128 0xd
 1985 0059 00       		.byte	0
 1986 005a 03       		.uleb128 0x3
 1987 005b 08       		.uleb128 0x8
 1988 005c 3A       		.uleb128 0x3a
 1989 005d 0B       		.uleb128 0xb
 1990 005e 3B       		.uleb128 0x3b
 1991 005f 0B       		.uleb128 0xb
 1992 0060 49       		.uleb128 0x49
 1993 0061 13       		.uleb128 0x13
 1994 0062 38       		.uleb128 0x38
 1995 0063 0B       		.uleb128 0xb
 1996 0064 00       		.byte	0
 1997 0065 00       		.byte	0
 1998 0066 09       		.uleb128 0x9
 1999 0067 0D       		.uleb128 0xd
 2000 0068 00       		.byte	0
 2001 0069 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 53


 2002 006a 0E       		.uleb128 0xe
 2003 006b 3A       		.uleb128 0x3a
 2004 006c 0B       		.uleb128 0xb
 2005 006d 3B       		.uleb128 0x3b
 2006 006e 0B       		.uleb128 0xb
 2007 006f 49       		.uleb128 0x49
 2008 0070 13       		.uleb128 0x13
 2009 0071 38       		.uleb128 0x38
 2010 0072 0B       		.uleb128 0xb
 2011 0073 00       		.byte	0
 2012 0074 00       		.byte	0
 2013 0075 0A       		.uleb128 0xa
 2014 0076 01       		.uleb128 0x1
 2015 0077 01       		.byte	0x1
 2016 0078 49       		.uleb128 0x49
 2017 0079 13       		.uleb128 0x13
 2018 007a 01       		.uleb128 0x1
 2019 007b 13       		.uleb128 0x13
 2020 007c 00       		.byte	0
 2021 007d 00       		.byte	0
 2022 007e 0B       		.uleb128 0xb
 2023 007f 21       		.uleb128 0x21
 2024 0080 00       		.byte	0
 2025 0081 49       		.uleb128 0x49
 2026 0082 13       		.uleb128 0x13
 2027 0083 2F       		.uleb128 0x2f
 2028 0084 0B       		.uleb128 0xb
 2029 0085 00       		.byte	0
 2030 0086 00       		.byte	0
 2031 0087 0C       		.uleb128 0xc
 2032 0088 0F       		.uleb128 0xf
 2033 0089 00       		.byte	0
 2034 008a 0B       		.uleb128 0xb
 2035 008b 0B       		.uleb128 0xb
 2036 008c 49       		.uleb128 0x49
 2037 008d 13       		.uleb128 0x13
 2038 008e 00       		.byte	0
 2039 008f 00       		.byte	0
 2040 0090 0D       		.uleb128 0xd
 2041 0091 2E       		.uleb128 0x2e
 2042 0092 00       		.byte	0
 2043 0093 03       		.uleb128 0x3
 2044 0094 0E       		.uleb128 0xe
 2045 0095 3A       		.uleb128 0x3a
 2046 0096 0B       		.uleb128 0xb
 2047 0097 3B       		.uleb128 0x3b
 2048 0098 0B       		.uleb128 0xb
 2049 0099 27       		.uleb128 0x27
 2050 009a 19       		.uleb128 0x19
 2051 009b 11       		.uleb128 0x11
 2052 009c 01       		.uleb128 0x1
 2053 009d 12       		.uleb128 0x12
 2054 009e 06       		.uleb128 0x6
 2055 009f 40       		.uleb128 0x40
 2056 00a0 18       		.uleb128 0x18
 2057 00a1 9642     		.uleb128 0x2116
 2058 00a3 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 54


 2059 00a4 00       		.byte	0
 2060 00a5 00       		.byte	0
 2061 00a6 0E       		.uleb128 0xe
 2062 00a7 2E       		.uleb128 0x2e
 2063 00a8 01       		.byte	0x1
 2064 00a9 3F       		.uleb128 0x3f
 2065 00aa 19       		.uleb128 0x19
 2066 00ab 03       		.uleb128 0x3
 2067 00ac 0E       		.uleb128 0xe
 2068 00ad 3A       		.uleb128 0x3a
 2069 00ae 0B       		.uleb128 0xb
 2070 00af 3B       		.uleb128 0x3b
 2071 00b0 05       		.uleb128 0x5
 2072 00b1 27       		.uleb128 0x27
 2073 00b2 19       		.uleb128 0x19
 2074 00b3 11       		.uleb128 0x11
 2075 00b4 01       		.uleb128 0x1
 2076 00b5 12       		.uleb128 0x12
 2077 00b6 06       		.uleb128 0x6
 2078 00b7 40       		.uleb128 0x40
 2079 00b8 18       		.uleb128 0x18
 2080 00b9 9642     		.uleb128 0x2116
 2081 00bb 19       		.uleb128 0x19
 2082 00bc 01       		.uleb128 0x1
 2083 00bd 13       		.uleb128 0x13
 2084 00be 00       		.byte	0
 2085 00bf 00       		.byte	0
 2086 00c0 0F       		.uleb128 0xf
 2087 00c1 34       		.uleb128 0x34
 2088 00c2 00       		.byte	0
 2089 00c3 03       		.uleb128 0x3
 2090 00c4 0E       		.uleb128 0xe
 2091 00c5 3A       		.uleb128 0x3a
 2092 00c6 0B       		.uleb128 0xb
 2093 00c7 3B       		.uleb128 0x3b
 2094 00c8 05       		.uleb128 0x5
 2095 00c9 49       		.uleb128 0x49
 2096 00ca 13       		.uleb128 0x13
 2097 00cb 02       		.uleb128 0x2
 2098 00cc 18       		.uleb128 0x18
 2099 00cd 00       		.byte	0
 2100 00ce 00       		.byte	0
 2101 00cf 10       		.uleb128 0x10
 2102 00d0 34       		.uleb128 0x34
 2103 00d1 00       		.byte	0
 2104 00d2 03       		.uleb128 0x3
 2105 00d3 0E       		.uleb128 0xe
 2106 00d4 3A       		.uleb128 0x3a
 2107 00d5 0B       		.uleb128 0xb
 2108 00d6 3B       		.uleb128 0x3b
 2109 00d7 05       		.uleb128 0x5
 2110 00d8 49       		.uleb128 0x49
 2111 00d9 13       		.uleb128 0x13
 2112 00da 3F       		.uleb128 0x3f
 2113 00db 19       		.uleb128 0x19
 2114 00dc 3C       		.uleb128 0x3c
 2115 00dd 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 55


 2116 00de 00       		.byte	0
 2117 00df 00       		.byte	0
 2118 00e0 11       		.uleb128 0x11
 2119 00e1 26       		.uleb128 0x26
 2120 00e2 00       		.byte	0
 2121 00e3 49       		.uleb128 0x49
 2122 00e4 13       		.uleb128 0x13
 2123 00e5 00       		.byte	0
 2124 00e6 00       		.byte	0
 2125 00e7 12       		.uleb128 0x12
 2126 00e8 34       		.uleb128 0x34
 2127 00e9 00       		.byte	0
 2128 00ea 03       		.uleb128 0x3
 2129 00eb 0E       		.uleb128 0xe
 2130 00ec 3A       		.uleb128 0x3a
 2131 00ed 0B       		.uleb128 0xb
 2132 00ee 3B       		.uleb128 0x3b
 2133 00ef 0B       		.uleb128 0xb
 2134 00f0 49       		.uleb128 0x49
 2135 00f1 13       		.uleb128 0x13
 2136 00f2 3F       		.uleb128 0x3f
 2137 00f3 19       		.uleb128 0x19
 2138 00f4 02       		.uleb128 0x2
 2139 00f5 18       		.uleb128 0x18
 2140 00f6 00       		.byte	0
 2141 00f7 00       		.byte	0
 2142 00f8 13       		.uleb128 0x13
 2143 00f9 21       		.uleb128 0x21
 2144 00fa 00       		.byte	0
 2145 00fb 49       		.uleb128 0x49
 2146 00fc 13       		.uleb128 0x13
 2147 00fd 2F       		.uleb128 0x2f
 2148 00fe 05       		.uleb128 0x5
 2149 00ff 00       		.byte	0
 2150 0100 00       		.byte	0
 2151 0101 14       		.uleb128 0x14
 2152 0102 34       		.uleb128 0x34
 2153 0103 00       		.byte	0
 2154 0104 03       		.uleb128 0x3
 2155 0105 08       		.uleb128 0x8
 2156 0106 3A       		.uleb128 0x3a
 2157 0107 0B       		.uleb128 0xb
 2158 0108 3B       		.uleb128 0x3b
 2159 0109 0B       		.uleb128 0xb
 2160 010a 49       		.uleb128 0x49
 2161 010b 13       		.uleb128 0x13
 2162 010c 3F       		.uleb128 0x3f
 2163 010d 19       		.uleb128 0x19
 2164 010e 02       		.uleb128 0x2
 2165 010f 18       		.uleb128 0x18
 2166 0110 00       		.byte	0
 2167 0111 00       		.byte	0
 2168 0112 00       		.byte	0
 2169              		.section	.debug_aranges,"",%progbits
 2170 0000 54000000 		.4byte	0x54
 2171 0004 0200     		.2byte	0x2
 2172 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 56


 2173 000a 04       		.byte	0x4
 2174 000b 00       		.byte	0
 2175 000c 0000     		.2byte	0
 2176 000e 0000     		.2byte	0
 2177 0010 00000000 		.4byte	.LFB64
 2178 0014 0E000000 		.4byte	.LFE64-.LFB64
 2179 0018 00000000 		.4byte	.LFB65
 2180 001c 0E000000 		.4byte	.LFE65-.LFB65
 2181 0020 00000000 		.4byte	.LFB66
 2182 0024 0E000000 		.4byte	.LFE66-.LFB66
 2183 0028 00000000 		.4byte	.LFB67
 2184 002c 0E000000 		.4byte	.LFE67-.LFB67
 2185 0030 00000000 		.4byte	.LFB68
 2186 0034 0E000000 		.4byte	.LFE68-.LFB68
 2187 0038 00000000 		.4byte	.LFB69
 2188 003c 0E000000 		.4byte	.LFE69-.LFB69
 2189 0040 00000000 		.4byte	.LFB70
 2190 0044 0E000000 		.4byte	.LFE70-.LFB70
 2191 0048 00000000 		.4byte	.LFB71
 2192 004c 18060000 		.4byte	.LFE71-.LFB71
 2193 0050 00000000 		.4byte	0
 2194 0054 00000000 		.4byte	0
 2195              		.section	.debug_ranges,"",%progbits
 2196              	.Ldebug_ranges0:
 2197 0000 00000000 		.4byte	.LFB64
 2198 0004 0E000000 		.4byte	.LFE64
 2199 0008 00000000 		.4byte	.LFB65
 2200 000c 0E000000 		.4byte	.LFE65
 2201 0010 00000000 		.4byte	.LFB66
 2202 0014 0E000000 		.4byte	.LFE66
 2203 0018 00000000 		.4byte	.LFB67
 2204 001c 0E000000 		.4byte	.LFE67
 2205 0020 00000000 		.4byte	.LFB68
 2206 0024 0E000000 		.4byte	.LFE68
 2207 0028 00000000 		.4byte	.LFB69
 2208 002c 0E000000 		.4byte	.LFE69
 2209 0030 00000000 		.4byte	.LFB70
 2210 0034 0E000000 		.4byte	.LFE70
 2211 0038 00000000 		.4byte	.LFB71
 2212 003c 18060000 		.4byte	.LFE71
 2213 0040 00000000 		.4byte	0
 2214 0044 00000000 		.4byte	0
 2215              		.section	.debug_line,"",%progbits
 2216              	.Ldebug_line0:
 2217 0000 F1020000 		.section	.debug_str,"MS",%progbits,1
 2217      02009001 
 2217      00000201 
 2217      FB0E0D00 
 2217      01010101 
 2218              	.LASF31:
 2219 0000 6D6F6465 		.ascii	"model_id\000"
 2219      6C5F6964 
 2219      00
 2220              	.LASF69:
 2221 0009 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2221      616C6172 
 2221      6D436667 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 57


 2221      4D61736B 
 2221      00
 2222              	.LASF30:
 2223 001a 73696D5F 		.ascii	"sim_id\000"
 2223      696400
 2224              	.LASF73:
 2225 0021 5254435F 		.ascii	"RTC_daysInMonths\000"
 2225      64617973 
 2225      496E4D6F 
 2225      6E746873 
 2225      00
 2226              	.LASF59:
 2227 0032 7379735F 		.ascii	"sys_settings_t\000"
 2227      73657474 
 2227      696E6773 
 2227      5F7400
 2228              	.LASF50:
 2229 0041 63757272 		.ascii	"currentCountDownValue\000"
 2229      656E7443 
 2229      6F756E74 
 2229      446F776E 
 2229      56616C75 
 2230              	.LASF49:
 2231 0057 636F756E 		.ascii	"countDownValue\000"
 2231      74446F77 
 2231      6E56616C 
 2231      756500
 2232              	.LASF2:
 2233 0066 73686F72 		.ascii	"short int\000"
 2233      7420696E 
 2233      7400
 2234              	.LASF26:
 2235 0070 73697A65 		.ascii	"sizetype\000"
 2235      74797065 
 2235      00
 2236              	.LASF57:
 2237 0079 65705F68 		.ascii	"ep_host\000"
 2237      6F737400 
 2238              	.LASF83:
 2239 0081 696E626F 		.ascii	"inbox\000"
 2239      7800
 2240              	.LASF96:
 2241 0087 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2241      43313120 
 2241      352E342E 
 2241      31203230 
 2241      31363036 
 2242 00ba 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2242      20726576 
 2242      6973696F 
 2242      6E203233 
 2242      37373135 
 2243 00ed 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2243      66756E63 
 2243      74696F6E 
 2243      2D736563 
 2243      74696F6E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 58


 2244              	.LASF64:
 2245 0115 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 2245      45766572 
 2245      79576565 
 2245      6B48616E 
 2245      646C6572 
 2246              	.LASF78:
 2247 012a 64617461 		.ascii	"data\000"
 2247      00
 2248              	.LASF18:
 2249 012f 486F7572 		.ascii	"Hour\000"
 2249      00
 2250              	.LASF55:
 2251 0134 63686970 		.ascii	"chip_uniqueId\000"
 2251      5F756E69 
 2251      71756549 
 2251      6400
 2252              	.LASF36:
 2253 0142 65636E6F 		.ascii	"ecno\000"
 2253      00
 2254              	.LASF94:
 2255 0147 616C6172 		.ascii	"alarmAppLED\000"
 2255      6D417070 
 2255      4C454400 
 2256              	.LASF27:
 2257 0153 76616C75 		.ascii	"value\000"
 2257      6500
 2258              	.LASF12:
 2259 0159 75696E74 		.ascii	"uint16\000"
 2259      313600
 2260              	.LASF58:
 2261 0160 65705F70 		.ascii	"ep_port\000"
 2261      6F727400 
 2262              	.LASF76:
 2263 0168 64617461 		.ascii	"dataPointsInStack\000"
 2263      506F696E 
 2263      7473496E 
 2263      53746163 
 2263      6B00
 2264              	.LASF11:
 2265 017a 75696E74 		.ascii	"uint8\000"
 2265      3800
 2266              	.LASF99:
 2267 0180 5254435F 		.ascii	"RTC_ISR\000"
 2267      49535200 
 2268              	.LASF35:
 2269 0188 72736370 		.ascii	"rscp\000"
 2269      00
 2270              	.LASF13:
 2271 018d 696E7431 		.ascii	"int16\000"
 2271      3600
 2272              	.LASF28:
 2273 0193 74696D65 		.ascii	"timeStamp\000"
 2273      5374616D 
 2273      7000
 2274              	.LASF77:
 2275 019d 64617461 		.ascii	"dataPointsInStackDesired\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 59


 2275      506F696E 
 2275      7473496E 
 2275      53746163 
 2275      6B446573 
 2276              	.LASF15:
 2277 01b6 666C6F61 		.ascii	"float\000"
 2277      7400
 2278              	.LASF19:
 2279 01bc 4461794F 		.ascii	"DayOfWeek\000"
 2279      66576565 
 2279      6B00
 2280              	.LASF6:
 2281 01c6 6C6F6E67 		.ascii	"long long int\000"
 2281      206C6F6E 
 2281      6720696E 
 2281      7400
 2282              	.LASF17:
 2283 01d4 63686172 		.ascii	"char\000"
 2283      00
 2284              	.LASF4:
 2285 01d9 6C6F6E67 		.ascii	"long int\000"
 2285      20696E74 
 2285      00
 2286              	.LASF75:
 2287 01e2 62756666 		.ascii	"buffer_overflow\000"
 2287      65725F6F 
 2287      76657266 
 2287      6C6F7700 
 2288              	.LASF54:
 2289 01f2 6D6F6465 		.ascii	"modem_info\000"
 2289      6D5F696E 
 2289      666F00
 2290              	.LASF65:
 2291 01fd 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2291      45766572 
 2291      794D6F6E 
 2291      74684861 
 2291      6E646C65 
 2292              	.LASF89:
 2293 0213 616C6172 		.ascii	"alarmMeasure\000"
 2293      6D4D6561 
 2293      73757265 
 2293      00
 2294              	.LASF23:
 2295 0220 59656172 		.ascii	"Year\000"
 2295      00
 2296              	.LASF22:
 2297 0225 4D6F6E74 		.ascii	"Month\000"
 2297      6800
 2298              	.LASF63:
 2299 022b 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2299      45766572 
 2299      79446179 
 2299      48616E64 
 2299      6C657200 
 2300              	.LASF53:
 2301 023f 616C6172 		.ascii	"alarm\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 60


 2301      6D00
 2302              	.LASF44:
 2303 0245 6D656173 		.ascii	"measure_time\000"
 2303      7572655F 
 2303      74696D65 
 2303      00
 2304              	.LASF91:
 2305 0252 616C6172 		.ascii	"alarmSync\000"
 2305      6D53796E 
 2305      6300
 2306              	.LASF25:
 2307 025c 6C6F6E67 		.ascii	"long double\000"
 2307      20646F75 
 2307      626C6500 
 2308              	.LASF1:
 2309 0268 756E7369 		.ascii	"unsigned char\000"
 2309      676E6564 
 2309      20636861 
 2309      7200
 2310              	.LASF38:
 2311 0276 72737270 		.ascii	"rsrp\000"
 2311      00
 2312              	.LASF80:
 2313 027b 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2313      6D5F7374 
 2313      6172745F 
 2313      74696D65 
 2313      5F737461 
 2314              	.LASF67:
 2315 0292 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2315      616C6172 
 2315      6D436667 
 2315      54696D65 
 2315      44617465 
 2316              	.LASF79:
 2317 02a7 6D6F6465 		.ascii	"modem_state\000"
 2317      6D5F7374 
 2317      61746500 
 2318              	.LASF0:
 2319 02b3 7369676E 		.ascii	"signed char\000"
 2319      65642063 
 2319      68617200 
 2320              	.LASF66:
 2321 02bf 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2321      45766572 
 2321      79596561 
 2321      7248616E 
 2321      646C6572 
 2322              	.LASF7:
 2323 02d4 6C6F6E67 		.ascii	"long long unsigned int\000"
 2323      206C6F6E 
 2323      6720756E 
 2323      7369676E 
 2323      65642069 
 2324              	.LASF88:
 2325 02eb 73797374 		.ascii	"system_settings\000"
 2325      656D5F73 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 61


 2325      65747469 
 2325      6E677300 
 2326              	.LASF68:
 2327 02fb 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2327      63757272 
 2327      656E7454 
 2327      696D6544 
 2327      61746500 
 2328              	.LASF8:
 2329 030f 756E7369 		.ascii	"unsigned int\000"
 2329      676E6564 
 2329      20696E74 
 2329      00
 2330              	.LASF29:
 2331 031c 6B65795F 		.ascii	"key_value_t\000"
 2331      76616C75 
 2331      655F7400 
 2332              	.LASF34:
 2333 0328 72786C65 		.ascii	"rxlev\000"
 2333      7600
 2334              	.LASF45:
 2335 032e 73796E63 		.ascii	"sync_time\000"
 2335      5F74696D 
 2335      6500
 2336              	.LASF70:
 2337 0338 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2337      616C6172 
 2337      6D437572 
 2337      53746174 
 2337      757300
 2338              	.LASF90:
 2339 034b 74696D65 		.ascii	"timeToMeasure\000"
 2339      546F4D65 
 2339      61737572 
 2339      6500
 2340              	.LASF48:
 2341 0359 75706461 		.ascii	"updatable_parameters_t\000"
 2341      7461626C 
 2341      655F7061 
 2341      72616D65 
 2341      74657273 
 2342              	.LASF43:
 2343 0370 73696D5F 		.ascii	"sim_type\000"
 2343      74797065 
 2343      00
 2344              	.LASF56:
 2345 0379 7379735F 		.ascii	"sys_info_t\000"
 2345      696E666F 
 2345      5F7400
 2346              	.LASF3:
 2347 0384 73686F72 		.ascii	"short unsigned int\000"
 2347      7420756E 
 2347      7369676E 
 2347      65642069 
 2347      6E7400
 2348              	.LASF39:
 2349 0397 74696D65 		.ascii	"time_to_network_connect\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 62


 2349      5F746F5F 
 2349      6E657477 
 2349      6F726B5F 
 2349      636F6E6E 
 2350              	.LASF87:
 2351 03af 73797374 		.ascii	"system_info\000"
 2351      656D5F69 
 2351      6E666F00 
 2352              	.LASF40:
 2353 03bb 74696D65 		.ascii	"time_to_acquire_ip\000"
 2353      5F746F5F 
 2353      61637175 
 2353      6972655F 
 2353      697000
 2354              	.LASF32:
 2355 03ce 696D6569 		.ascii	"imei\000"
 2355      00
 2356              	.LASF10:
 2357 03d3 696E7433 		.ascii	"int32_t\000"
 2357      325F7400 
 2358              	.LASF100:
 2359 03db 5254435F 		.ascii	"RTC_tmp\000"
 2359      746D7000 
 2360              	.LASF41:
 2361 03e3 6D6F6465 		.ascii	"modem_stats_t\000"
 2361      6D5F7374 
 2361      6174735F 
 2361      7400
 2362              	.LASF47:
 2363 03f1 5F426F6F 		.ascii	"_Bool\000"
 2363      6C00
 2364              	.LASF93:
 2365 03f7 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2365      546F5379 
 2365      636E5265 
 2365      6D6F7465 
 2365      50617261 
 2366              	.LASF62:
 2367 040e 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2367      45766572 
 2367      79486F75 
 2367      7248616E 
 2367      646C6572 
 2368              	.LASF20:
 2369 0423 4461794F 		.ascii	"DayOfMonth\000"
 2369      664D6F6E 
 2369      746800
 2370              	.LASF37:
 2371 042e 72737271 		.ascii	"rsrq\000"
 2371      00
 2372              	.LASF98:
 2373 0433 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2373      73657273 
 2373      5C64616E 
 2373      747A5C44 
 2373      6F63756D 
 2374 0460 72694F53 		.ascii	"riOS.cydsn\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 63


 2374      2E637964 
 2374      736E00
 2375              	.LASF86:
 2376 046b 68747470 		.ascii	"http_route\000"
 2376      5F726F75 
 2376      746500
 2377              	.LASF61:
 2378 0476 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2378      45766572 
 2378      794D696E 
 2378      75746548 
 2378      616E646C 
 2379              	.LASF5:
 2380 048d 6C6F6E67 		.ascii	"long unsigned int\000"
 2380      20756E73 
 2380      69676E65 
 2380      6420696E 
 2380      7400
 2381              	.LASF14:
 2382 049f 696E7433 		.ascii	"int32\000"
 2382      3200
 2383              	.LASF16:
 2384 04a5 646F7562 		.ascii	"double\000"
 2384      6C6500
 2385              	.LASF60:
 2386 04ac 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2386      45766572 
 2386      79536563 
 2386      6F6E6448 
 2386      616E646C 
 2387              	.LASF81:
 2388 04c3 6D6F6465 		.ascii	"modem_stats\000"
 2388      6D5F7374 
 2388      61747300 
 2389              	.LASF46:
 2390 04cf 64656275 		.ascii	"debug_level\000"
 2390      675F6C65 
 2390      76656C00 
 2391              	.LASF33:
 2392 04db 6D6F6465 		.ascii	"modem_info_t\000"
 2392      6D5F696E 
 2392      666F5F74 
 2392      00
 2393              	.LASF51:
 2394 04e8 636F756E 		.ascii	"countDownType\000"
 2394      74446F77 
 2394      6E547970 
 2394      6500
 2395              	.LASF72:
 2396 04f6 5254435F 		.ascii	"RTC_statusDateTime\000"
 2396      73746174 
 2396      75734461 
 2396      74655469 
 2396      6D6500
 2397              	.LASF9:
 2398 0509 5F5F696E 		.ascii	"__int32_t\000"
 2398      7433325F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 64


 2398      7400
 2399              	.LASF95:
 2400 0513 74696D65 		.ascii	"timeToAppLED\000"
 2400      546F4170 
 2400      704C4544 
 2400      00
 2401              	.LASF97:
 2402 0520 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2402      72617465 
 2402      645F536F 
 2402      75726365 
 2402      5C50536F 
 2403              	.LASF52:
 2404 0541 636F756E 		.ascii	"countDownResetCondition\000"
 2404      74446F77 
 2404      6E526573 
 2404      6574436F 
 2404      6E646974 
 2405              	.LASF82:
 2406 0559 75706461 		.ascii	"updatable_parameters\000"
 2406      7461626C 
 2406      655F7061 
 2406      72616D65 
 2406      74657273 
 2407              	.LASF74:
 2408 056e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2408      52784275 
 2408      66666572 
 2408      00
 2409              	.LASF24:
 2410 057b 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2410      54494D45 
 2410      5F444154 
 2410      4500
 2411              	.LASF71:
 2412 0589 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2412      696E7465 
 2412      7276616C 
 2412      4366674D 
 2412      61736B00 
 2413              	.LASF85:
 2414 059d 68747470 		.ascii	"http_body\000"
 2414      5F626F64 
 2414      7900
 2415              	.LASF42:
 2416 05a7 6E6F6465 		.ascii	"node_type\000"
 2416      5F747970 
 2416      6500
 2417              	.LASF84:
 2418 05b1 68747470 		.ascii	"http_request\000"
 2418      5F726571 
 2418      75657374 
 2418      00
 2419              	.LASF92:
 2420 05be 74696D65 		.ascii	"timeToSync\000"
 2420      546F5379 
 2420      6E6300
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccvDFcjV.s 			page 65


 2421              	.LASF21:
 2422 05c9 4461794F 		.ascii	"DayOfYear\000"
 2422      66596561 
 2422      7200
 2423              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
