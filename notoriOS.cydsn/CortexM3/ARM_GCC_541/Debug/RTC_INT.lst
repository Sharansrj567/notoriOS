ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	valve_diameter,4,4
  24              		.comm	valve_type,10,4
  25              		.comm	valve_enabled,1,1
  26              		.comm	valve_inbox,100,4
  27              		.comm	buffer_overflow,1,1
  28              		.comm	dataPointsInStack,2,2
  29              		.comm	dataPointsInStackDesired,2,2
  30              		.comm	data,6600,4
  31              		.comm	modem_state,1,1
  32              		.comm	modem_start_time_stamp,4,4
  33              		.comm	modem_info,60,4
  34              		.comm	modem_stats,32,4
  35              		.comm	updatable_parameters,9,4
  36              		.syntax unified
  37              		.global _printf_float
  38              		.thumb
  39              		.syntax unified
  40              		.comm	App_LED_enabled,1,1
  41              		.comm	app_led_inbox,100,4
  42              		.comm	http_request,10000,4
  43              		.comm	http_body,10000,4
  44              		.comm	http_route,200,4
  45              		.comm	system_info,28,4
  46              		.comm	system_settings,104,4
  47              		.comm	alarmMeasure,6,4
  48              		.comm	timeToMeasure,1,1
  49              		.comm	alarmSync,6,4
  50              		.comm	timeToSync,1,1
  51              		.comm	timeToSycnRemoteParams,1,1
  52              		.comm	hey,1,1
  53              		.comm	alarmAppLED,6,4
  54              		.comm	timeToAppLED,1,1
  55              		.comm	alarmLevelSensor,6,4
  56              		.comm	timetoLevelSensor,1,1
  57              		.comm	alarmDownstreamLevelSensor,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 2


  58              		.comm	timetoDownstreamLevelSensor,1,1
  59              		.comm	alarmValve,6,4
  60              		.comm	timeToValve,1,1
  61              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  62              		.align	2
  63              		.thumb
  64              		.thumb_func
  65              		.type	RTC_EverySecondHandler, %function
  66              	RTC_EverySecondHandler:
  67              	.LFB64:
  68              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 3


  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  69              		.loc 1 55 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 00AF     		add	r7, sp, #0
  78              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  79              		.loc 1 58 0
  80 0004 0020     		movs	r0, #0
  81 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  82              		.loc 1 64 0
  83 000a 00BF     		nop
  84 000c 80BD     		pop	{r7, pc}
  85              		.cfi_endproc
  86              	.LFE64:
  87              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  88 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  89              		.align	2
  90              		.thumb
  91              		.thumb_func
  92              		.type	RTC_EveryMinuteHandler, %function
  93              	RTC_EveryMinuteHandler:
  94              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 4


  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  95              		.loc 1 82 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
 105              		.loc 1 85 0
 106 0004 0120     		movs	r0, #1
 107 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
 108              		.loc 1 91 0
 109 000a 00BF     		nop
 110 000c 80BD     		pop	{r7, pc}
 111              		.cfi_endproc
 112              	.LFE65:
 113              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
 114 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 115              		.align	2
 116              		.thumb
 117              		.thumb_func
 118              		.type	RTC_EveryHourHandler, %function
 119              	RTC_EveryHourHandler:
 120              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 5


 109:Generated_Source\PSoC5/RTC_INT.c **** {
 121              		.loc 1 109 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 131              		.loc 1 112 0
 132 0004 0220     		movs	r0, #2
 133 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 134              		.loc 1 118 0
 135 000a 00BF     		nop
 136 000c 80BD     		pop	{r7, pc}
 137              		.cfi_endproc
 138              	.LFE66:
 139              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 140 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 141              		.align	2
 142              		.thumb
 143              		.thumb_func
 144              		.type	RTC_EveryDayHandler, %function
 145              	RTC_EveryDayHandler:
 146              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 147              		.loc 1 136 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 6


 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151 0000 80B5     		push	{r7, lr}
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 157              		.loc 1 139 0
 158 0004 0320     		movs	r0, #3
 159 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 160              		.loc 1 145 0
 161 000a 00BF     		nop
 162 000c 80BD     		pop	{r7, pc}
 163              		.cfi_endproc
 164              	.LFE67:
 165              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 166 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 167              		.align	2
 168              		.thumb
 169              		.thumb_func
 170              		.type	RTC_EveryWeekHandler, %function
 171              	RTC_EveryWeekHandler:
 172              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 173              		.loc 1 163 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 7


 180              		.cfi_offset 14, -4
 181 0002 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 183              		.loc 1 166 0
 184 0004 0420     		movs	r0, #4
 185 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 186              		.loc 1 172 0
 187 000a 00BF     		nop
 188 000c 80BD     		pop	{r7, pc}
 189              		.cfi_endproc
 190              	.LFE68:
 191              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 192 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 193              		.align	2
 194              		.thumb
 195              		.thumb_func
 196              		.type	RTC_EveryMonthHandler, %function
 197              	RTC_EveryMonthHandler:
 198              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 199              		.loc 1 190 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 0000 80B5     		push	{r7, lr}
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207 0002 00AF     		add	r7, sp, #0
 208              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 8


 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 209              		.loc 1 193 0
 210 0004 0520     		movs	r0, #5
 211 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 212              		.loc 1 199 0
 213 000a 00BF     		nop
 214 000c 80BD     		pop	{r7, pc}
 215              		.cfi_endproc
 216              	.LFE69:
 217              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 218 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 219              		.align	2
 220              		.thumb
 221              		.thumb_func
 222              		.type	RTC_EveryYearHandler, %function
 223              	RTC_EveryYearHandler:
 224              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 225              		.loc 1 217 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229 0000 80B5     		push	{r7, lr}
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 235              		.loc 1 220 0
 236 0004 0620     		movs	r0, #6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 9


 237 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 238              		.loc 1 226 0
 239 000a 00BF     		nop
 240 000c 80BD     		pop	{r7, pc}
 241              		.cfi_endproc
 242              	.LFE70:
 243              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 244 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 245              		.align	2
 246              		.global	RTC_ISR
 247              		.thumb
 248              		.thumb_func
 249              		.type	RTC_ISR, %function
 250              	RTC_ISR:
 251              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 10


 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 252              		.loc 1 268 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 8
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256 0000 80B5     		push	{r7, lr}
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 7, -8
 259              		.cfi_offset 14, -4
 260 0002 82B0     		sub	sp, sp, #8
 261              		.cfi_def_cfa_offset 16
 262 0004 00AF     		add	r7, sp, #0
 263              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 264              		.loc 1 276 0
 265 0006 0420     		movs	r0, #4
 266 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 267              		.loc 1 279 0
 268 000c 9E4B     		ldr	r3, .L48
 269 000e 1B78     		ldrb	r3, [r3]
 270 0010 DBB2     		uxtb	r3, r3
 271 0012 0133     		adds	r3, r3, #1
 272 0014 DAB2     		uxtb	r2, r3
 273 0016 9C4B     		ldr	r3, .L48
 274 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 275              		.loc 1 282 0
 276 001a 9B4B     		ldr	r3, .L48
 277 001c 1B78     		ldrb	r3, [r3]
 278 001e DBB2     		uxtb	r3, r3
 279 0020 3B2B     		cmp	r3, #59
 280 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 281              		.loc 1 285 0
 282 0026 984B     		ldr	r3, .L48
 283 0028 5B78     		ldrb	r3, [r3, #1]
 284 002a DBB2     		uxtb	r3, r3
 285 002c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 11


 286 002e DAB2     		uxtb	r2, r3
 287 0030 954B     		ldr	r3, .L48
 288 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 289              		.loc 1 288 0
 290 0034 944B     		ldr	r3, .L48
 291 0036 0022     		movs	r2, #0
 292 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 293              		.loc 1 290 0
 294 003a 934B     		ldr	r3, .L48
 295 003c 5B78     		ldrb	r3, [r3, #1]
 296 003e DBB2     		uxtb	r3, r3
 297 0040 3B2B     		cmp	r3, #59
 298 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 299              		.loc 1 293 0
 300 0046 904B     		ldr	r3, .L48
 301 0048 9B78     		ldrb	r3, [r3, #2]
 302 004a DBB2     		uxtb	r3, r3
 303 004c 0133     		adds	r3, r3, #1
 304 004e DAB2     		uxtb	r2, r3
 305 0050 8D4B     		ldr	r3, .L48
 306 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 307              		.loc 1 296 0
 308 0054 8C4B     		ldr	r3, .L48
 309 0056 0022     		movs	r2, #0
 310 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 311              		.loc 1 299 0
 312 005a 8B4B     		ldr	r3, .L48
 313 005c 9B78     		ldrb	r3, [r3, #2]
 314 005e DBB2     		uxtb	r3, r3
 315 0060 172B     		cmp	r3, #23
 316 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 317              		.loc 1 302 0
 318 0066 884B     		ldr	r3, .L48
 319 0068 1B79     		ldrb	r3, [r3, #4]
 320 006a DBB2     		uxtb	r3, r3
 321 006c 0133     		adds	r3, r3, #1
 322 006e DAB2     		uxtb	r2, r3
 323 0070 854B     		ldr	r3, .L48
 324 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 12


 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 325              		.loc 1 305 0
 326 0074 844B     		ldr	r3, .L48
 327 0076 0022     		movs	r2, #0
 328 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 329              		.loc 1 308 0
 330 007a 834B     		ldr	r3, .L48
 331 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 332 007e 9BB2     		uxth	r3, r3
 333 0080 0133     		adds	r3, r3, #1
 334 0082 9AB2     		uxth	r2, r3
 335 0084 804B     		ldr	r3, .L48
 336 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 337              		.loc 1 311 0
 338 0088 7F4B     		ldr	r3, .L48
 339 008a DB78     		ldrb	r3, [r3, #3]
 340 008c DBB2     		uxtb	r3, r3
 341 008e 0133     		adds	r3, r3, #1
 342 0090 DAB2     		uxtb	r2, r3
 343 0092 7D4B     		ldr	r3, .L48
 344 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 345              		.loc 1 314 0
 346 0096 7C4B     		ldr	r3, .L48
 347 0098 DB78     		ldrb	r3, [r3, #3]
 348 009a DBB2     		uxtb	r3, r3
 349 009c 072B     		cmp	r3, #7
 350 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 351              		.loc 1 317 0
 352 00a0 794B     		ldr	r3, .L48
 353 00a2 0122     		movs	r2, #1
 354 00a4 DA70     		strb	r2, [r3, #3]
 355              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 356              		.loc 1 325 0
 357 00a6 794B     		ldr	r3, .L48+4
 358 00a8 1B78     		ldrb	r3, [r3]
 359 00aa DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 13


 360 00ac 03F00203 		and	r3, r3, #2
 361 00b0 002B     		cmp	r3, #0
 362 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 363              		.loc 1 326 0 discriminator 1
 364 00b4 744B     		ldr	r3, .L48
 365 00b6 1B7A     		ldrb	r3, [r3, #8]
 366 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 367              		.loc 1 325 0 discriminator 1
 368 00ba 022B     		cmp	r3, #2
 369 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 370              		.loc 1 327 0
 371 00be 724B     		ldr	r3, .L48
 372 00c0 1B79     		ldrb	r3, [r3, #4]
 373 00c2 DBB2     		uxtb	r3, r3
 374 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 375              		.loc 1 328 0
 376 00c6 704B     		ldr	r3, .L48
 377 00c8 1B7A     		ldrb	r3, [r3, #8]
 378 00ca DBB2     		uxtb	r3, r3
 379 00cc 013B     		subs	r3, r3, #1
 380 00ce 704A     		ldr	r2, .L48+8
 381 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 382 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 383              		.loc 1 326 0
 384 00d4 9942     		cmp	r1, r3
 385 00d6 2AD8     		bhi	.L14
 386              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 387              		.loc 1 329 0
 388 00d8 6C4B     		ldr	r3, .L48+4
 389 00da 1B78     		ldrb	r3, [r3]
 390 00dc DBB2     		uxtb	r3, r3
 391 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 392              		.loc 1 328 0
 393 00e2 002B     		cmp	r3, #0
 394 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 395              		.loc 1 330 0
 396 00e6 684B     		ldr	r3, .L48
 397 00e8 1B7A     		ldrb	r3, [r3, #8]
 398 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 399              		.loc 1 329 0
 400 00ec 022B     		cmp	r3, #2
 401 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 402              		.loc 1 331 0
 403 00f0 654B     		ldr	r3, .L48
 404 00f2 1B79     		ldrb	r3, [r3, #4]
 405 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 14


 406              		.loc 1 332 0
 407 00f6 644B     		ldr	r3, .L48
 408 00f8 1B7A     		ldrb	r3, [r3, #8]
 409 00fa DBB2     		uxtb	r3, r3
 410 00fc 013B     		subs	r3, r3, #1
 411 00fe 6449     		ldr	r1, .L48+8
 412 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 413              		.loc 1 330 0
 414 0102 9A42     		cmp	r2, r3
 415 0104 13D8     		bhi	.L14
 416              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 417              		.loc 1 333 0
 418 0106 614B     		ldr	r3, .L48+4
 419 0108 1B78     		ldrb	r3, [r3]
 420 010a DBB2     		uxtb	r3, r3
 421 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 422              		.loc 1 332 0
 423 0110 002B     		cmp	r3, #0
 424 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 425              		.loc 1 334 0
 426 0116 5C4B     		ldr	r3, .L48
 427 0118 1B79     		ldrb	r3, [r3, #4]
 428 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 429              		.loc 1 335 0
 430 011c 5A4B     		ldr	r3, .L48
 431 011e 1B7A     		ldrb	r3, [r3, #8]
 432 0120 DBB2     		uxtb	r3, r3
 433 0122 013B     		subs	r3, r3, #1
 434 0124 5A49     		ldr	r1, .L48+8
 435 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 436              		.loc 1 333 0
 437 0128 9A42     		cmp	r2, r3
 438 012a 40F2E880 		bls	.L16
 439              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 440              		.loc 1 338 0
 441 012e 564B     		ldr	r3, .L48
 442 0130 1B7A     		ldrb	r3, [r3, #8]
 443 0132 DBB2     		uxtb	r3, r3
 444 0134 0133     		adds	r3, r3, #1
 445 0136 DAB2     		uxtb	r2, r3
 446 0138 534B     		ldr	r3, .L48
 447 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 448              		.loc 1 341 0
 449 013c 524B     		ldr	r3, .L48
 450 013e 0122     		movs	r2, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 15


 451 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 452              		.loc 1 344 0
 453 0142 514B     		ldr	r3, .L48
 454 0144 1B7A     		ldrb	r3, [r3, #8]
 455 0146 DBB2     		uxtb	r3, r3
 456 0148 0C2B     		cmp	r3, #12
 457 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 458              		.loc 1 347 0
 459 014e 4E4B     		ldr	r3, .L48
 460 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 461 0152 9BB2     		uxth	r3, r3
 462 0154 0133     		adds	r3, r3, #1
 463 0156 9AB2     		uxth	r2, r3
 464 0158 4B4B     		ldr	r3, .L48
 465 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 466              		.loc 1 350 0
 467 015c 4A4B     		ldr	r3, .L48
 468 015e 0122     		movs	r2, #1
 469 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 470              		.loc 1 353 0
 471 0162 494B     		ldr	r3, .L48
 472 0164 0122     		movs	r2, #1
 473 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 474              		.loc 1 356 0
 475 0168 474B     		ldr	r3, .L48
 476 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 477 016c 9BB2     		uxth	r3, r3
 478 016e 494A     		ldr	r2, .L48+12
 479 0170 A2FB0312 		umull	r1, r2, r2, r3
 480 0174 D209     		lsrs	r2, r2, #7
 481 0176 4FF4C871 		mov	r1, #400
 482 017a 01FB02F2 		mul	r2, r1, r2
 483 017e 9B1A     		subs	r3, r3, r2
 484 0180 9BB2     		uxth	r3, r3
 485 0182 002B     		cmp	r3, #0
 486 0184 15D0     		beq	.L18
 487              		.loc 1 356 0 is_stmt 0 discriminator 1
 488 0186 404B     		ldr	r3, .L48
 489 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 490 018a 9BB2     		uxth	r3, r3
 491 018c 03F00303 		and	r3, r3, #3
 492 0190 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 16


 493 0192 002B     		cmp	r3, #0
 494 0194 16D1     		bne	.L19
 495              		.loc 1 356 0 discriminator 2
 496 0196 3C4B     		ldr	r3, .L48
 497 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 498 019a 9BB2     		uxth	r3, r3
 499 019c 3D4A     		ldr	r2, .L48+12
 500 019e A2FB0312 		umull	r1, r2, r2, r3
 501 01a2 5209     		lsrs	r2, r2, #5
 502 01a4 6421     		movs	r1, #100
 503 01a6 01FB02F2 		mul	r2, r1, r2
 504 01aa 9B1A     		subs	r3, r3, r2
 505 01ac 9BB2     		uxth	r3, r3
 506 01ae 002B     		cmp	r3, #0
 507 01b0 08D0     		beq	.L19
 508              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 509              		.loc 1 359 0 is_stmt 1
 510 01b2 364B     		ldr	r3, .L48+4
 511 01b4 1B78     		ldrb	r3, [r3]
 512 01b6 DBB2     		uxtb	r3, r3
 513 01b8 43F00203 		orr	r3, r3, #2
 514 01bc DAB2     		uxtb	r2, r3
 515 01be 334B     		ldr	r3, .L48+4
 516 01c0 1A70     		strb	r2, [r3]
 517 01c2 07E0     		b	.L20
 518              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 519              		.loc 1 364 0
 520 01c4 314B     		ldr	r3, .L48+4
 521 01c6 1B78     		ldrb	r3, [r3]
 522 01c8 DBB2     		uxtb	r3, r3
 523 01ca 23F00203 		bic	r3, r3, #2
 524 01ce DAB2     		uxtb	r2, r3
 525 01d0 2E4B     		ldr	r3, .L48+4
 526 01d2 1A70     		strb	r2, [r3]
 527              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 528              		.loc 1 368 0
 529 01d4 304B     		ldr	r3, .L48+16
 530 01d6 1B78     		ldrb	r3, [r3]
 531 01d8 DBB2     		uxtb	r3, r3
 532 01da 5BB2     		sxtb	r3, r3
 533 01dc 002B     		cmp	r3, #0
 534 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 17


 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 535              		.loc 1 372 0
 536 01e0 2E4B     		ldr	r3, .L48+20
 537 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 538 01e4 9AB2     		uxth	r2, r3
 539 01e6 284B     		ldr	r3, .L48
 540 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 541 01ea 9BB2     		uxth	r3, r3
 542 01ec 9A42     		cmp	r2, r3
 543 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 544              		.loc 1 375 0
 545 01f0 2B4B     		ldr	r3, .L48+24
 546 01f2 1B78     		ldrb	r3, [r3]
 547 01f4 DBB2     		uxtb	r3, r3
 548 01f6 63F07F03 		orn	r3, r3, #127
 549 01fa DAB2     		uxtb	r2, r3
 550 01fc 284B     		ldr	r3, .L48+24
 551 01fe 1A70     		strb	r2, [r3]
 552 0200 07E0     		b	.L21
 553              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 554              		.loc 1 380 0
 555 0202 274B     		ldr	r3, .L48+24
 556 0204 1B78     		ldrb	r3, [r3]
 557 0206 DBB2     		uxtb	r3, r3
 558 0208 03F07F03 		and	r3, r3, #127
 559 020c DAB2     		uxtb	r2, r3
 560 020e 244B     		ldr	r3, .L48+24
 561 0210 1A70     		strb	r2, [r3]
 562              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 563              		.loc 1 385 0
 564 0212 214B     		ldr	r3, .L48+16
 565 0214 1B78     		ldrb	r3, [r3]
 566 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 567              		.loc 1 386 0
 568 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 569 021a 002B     		cmp	r3, #0
 570 021c 13D0     		beq	.L23
 571              		.loc 1 386 0 is_stmt 0 discriminator 1
 572 021e 204B     		ldr	r3, .L48+24
 573 0220 1B78     		ldrb	r3, [r3]
 574 0222 DAB2     		uxtb	r2, r3
 575 0224 FB79     		ldrb	r3, [r7, #7]
 576 0226 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 18


 577 0228 DBB2     		uxtb	r3, r3
 578 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 579 022c 9A42     		cmp	r2, r3
 580 022e 0AD1     		bne	.L23
 581              		.loc 1 386 0 discriminator 2
 582 0230 164B     		ldr	r3, .L48+4
 583 0232 1B78     		ldrb	r3, [r3]
 584 0234 DBB2     		uxtb	r3, r3
 585 0236 43F00803 		orr	r3, r3, #8
 586 023a DAB2     		uxtb	r2, r3
 587 023c 134B     		ldr	r3, .L48+4
 588 023e 1A70     		strb	r2, [r3]
 589 0240 174B     		ldr	r3, .L48+24
 590 0242 0022     		movs	r2, #0
 591 0244 1A70     		strb	r2, [r3]
 592              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 593              		.loc 1 391 0 is_stmt 1
 594 0246 174B     		ldr	r3, .L48+28
 595 0248 1B78     		ldrb	r3, [r3]
 596 024a DBB2     		uxtb	r3, r3
 597 024c 03F04003 		and	r3, r3, #64
 598 0250 002B     		cmp	r3, #0
 599 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 600              		.loc 1 394 0
 601 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 602              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 603              		.loc 1 400 0
 604 0258 0F4B     		ldr	r3, .L48+16
 605 025a 1B78     		ldrb	r3, [r3]
 606 025c DBB2     		uxtb	r3, r3
 607 025e 03F04003 		and	r3, r3, #64
 608 0262 002B     		cmp	r3, #0
 609 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 610              		.loc 1 403 0
 611 0266 0D4B     		ldr	r3, .L48+20
 612 0268 1B7A     		ldrb	r3, [r3, #8]
 613 026a DAB2     		uxtb	r2, r3
 614 026c 064B     		ldr	r3, .L48
 615 026e 1B7A     		ldrb	r3, [r3, #8]
 616 0270 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 19


 617 0272 9A42     		cmp	r2, r3
 618 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 619              		.loc 1 406 0
 620 0276 0A4B     		ldr	r3, .L48+24
 621 0278 1B78     		ldrb	r3, [r3]
 622 027a DBB2     		uxtb	r3, r3
 623 027c 43F04003 		orr	r3, r3, #64
 624 0280 DAB2     		uxtb	r2, r3
 625 0282 074B     		ldr	r3, .L48+24
 626 0284 1A70     		strb	r2, [r3]
 627 0286 17E0     		b	.L24
 628              	.L49:
 629              		.align	2
 630              	.L48:
 631 0288 00000000 		.word	RTC_currentTimeDate
 632 028c 00000000 		.word	RTC_statusDateTime
 633 0290 00000000 		.word	RTC_daysInMonths
 634 0294 1F85EB51 		.word	1374389535
 635 0298 00000000 		.word	RTC_alarmCfgMask
 636 029c 00000000 		.word	RTC_alarmCfgTimeDate
 637 02a0 00000000 		.word	RTC_alarmCurStatus
 638 02a4 00000000 		.word	RTC_intervalCfgMask
 639              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 640              		.loc 1 411 0
 641 02a8 964B     		ldr	r3, .L50
 642 02aa 1B78     		ldrb	r3, [r3]
 643 02ac DBB2     		uxtb	r3, r3
 644 02ae 23F04003 		bic	r3, r3, #64
 645 02b2 DAB2     		uxtb	r2, r3
 646 02b4 934B     		ldr	r3, .L50
 647 02b6 1A70     		strb	r2, [r3]
 648              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 20


 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 649              		.loc 1 436 0
 650 02b8 934B     		ldr	r3, .L50+4
 651 02ba 1B78     		ldrb	r3, [r3]
 652 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 653              		.loc 1 437 0
 654 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 655 02c0 002B     		cmp	r3, #0
 656 02c2 13D0     		beq	.L26
 657              		.loc 1 437 0 is_stmt 0 discriminator 1
 658 02c4 8F4B     		ldr	r3, .L50
 659 02c6 1B78     		ldrb	r3, [r3]
 660 02c8 DAB2     		uxtb	r2, r3
 661 02ca FB79     		ldrb	r3, [r7, #7]
 662 02cc 1340     		ands	r3, r3, r2
 663 02ce DBB2     		uxtb	r3, r3
 664 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 665 02d2 9A42     		cmp	r2, r3
 666 02d4 0AD1     		bne	.L26
 667              		.loc 1 437 0 discriminator 2
 668 02d6 8D4B     		ldr	r3, .L50+8
 669 02d8 1B78     		ldrb	r3, [r3]
 670 02da DBB2     		uxtb	r3, r3
 671 02dc 43F00803 		orr	r3, r3, #8
 672 02e0 DAB2     		uxtb	r2, r3
 673 02e2 8A4B     		ldr	r3, .L50+8
 674 02e4 1A70     		strb	r2, [r3]
 675 02e6 874B     		ldr	r3, .L50
 676 02e8 0022     		movs	r2, #0
 677 02ea 1A70     		strb	r2, [r3]
 678              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 679              		.loc 1 442 0 is_stmt 1
 680 02ec 884B     		ldr	r3, .L50+12
 681 02ee 1B78     		ldrb	r3, [r3]
 682 02f0 DBB2     		uxtb	r3, r3
 683 02f2 03F02003 		and	r3, r3, #32
 684 02f6 002B     		cmp	r3, #0
 685 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 686              		.loc 1 445 0
 687 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 688              	.L16:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 21


 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 689              		.loc 1 450 0
 690 02fe 824B     		ldr	r3, .L50+4
 691 0300 1B78     		ldrb	r3, [r3]
 692 0302 DBB2     		uxtb	r3, r3
 693 0304 03F00803 		and	r3, r3, #8
 694 0308 002B     		cmp	r3, #0
 695 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 696              		.loc 1 453 0
 697 030c 814B     		ldr	r3, .L50+16
 698 030e DB78     		ldrb	r3, [r3, #3]
 699 0310 DAB2     		uxtb	r2, r3
 700 0312 814B     		ldr	r3, .L50+20
 701 0314 DB78     		ldrb	r3, [r3, #3]
 702 0316 DBB2     		uxtb	r3, r3
 703 0318 9A42     		cmp	r2, r3
 704 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 705              		.loc 1 456 0
 706 031c 794B     		ldr	r3, .L50
 707 031e 1B78     		ldrb	r3, [r3]
 708 0320 DBB2     		uxtb	r3, r3
 709 0322 43F00803 		orr	r3, r3, #8
 710 0326 DAB2     		uxtb	r2, r3
 711 0328 764B     		ldr	r3, .L50
 712 032a 1A70     		strb	r2, [r3]
 713 032c 07E0     		b	.L27
 714              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 715              		.loc 1 461 0
 716 032e 754B     		ldr	r3, .L50
 717 0330 1B78     		ldrb	r3, [r3]
 718 0332 DBB2     		uxtb	r3, r3
 719 0334 23F00803 		bic	r3, r3, #8
 720 0338 DAB2     		uxtb	r2, r3
 721 033a 724B     		ldr	r3, .L50
 722 033c 1A70     		strb	r2, [r3]
 723              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 724              		.loc 1 466 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 22


 725 033e 724B     		ldr	r3, .L50+4
 726 0340 1B78     		ldrb	r3, [r3]
 727 0342 DBB2     		uxtb	r3, r3
 728 0344 03F02003 		and	r3, r3, #32
 729 0348 002B     		cmp	r3, #0
 730 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 731              		.loc 1 469 0
 732 034c 714B     		ldr	r3, .L50+16
 733 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 734 0350 9AB2     		uxth	r2, r3
 735 0352 714B     		ldr	r3, .L50+20
 736 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 737 0356 9BB2     		uxth	r3, r3
 738 0358 9A42     		cmp	r2, r3
 739 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 740              		.loc 1 472 0
 741 035c 694B     		ldr	r3, .L50
 742 035e 1B78     		ldrb	r3, [r3]
 743 0360 DBB2     		uxtb	r3, r3
 744 0362 43F02003 		orr	r3, r3, #32
 745 0366 DAB2     		uxtb	r2, r3
 746 0368 664B     		ldr	r3, .L50
 747 036a 1A70     		strb	r2, [r3]
 748 036c 07E0     		b	.L29
 749              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 750              		.loc 1 477 0
 751 036e 654B     		ldr	r3, .L50
 752 0370 1B78     		ldrb	r3, [r3]
 753 0372 DBB2     		uxtb	r3, r3
 754 0374 23F02003 		bic	r3, r3, #32
 755 0378 DAB2     		uxtb	r2, r3
 756 037a 624B     		ldr	r3, .L50
 757 037c 1A70     		strb	r2, [r3]
 758              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 759              		.loc 1 482 0
 760 037e 624B     		ldr	r3, .L50+4
 761 0380 1B78     		ldrb	r3, [r3]
 762 0382 DBB2     		uxtb	r3, r3
 763 0384 03F01003 		and	r3, r3, #16
 764 0388 002B     		cmp	r3, #0
 765 038a 18D0     		beq	.L31
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 23


 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 766              		.loc 1 485 0
 767 038c 614B     		ldr	r3, .L50+16
 768 038e 1B79     		ldrb	r3, [r3, #4]
 769 0390 DAB2     		uxtb	r2, r3
 770 0392 614B     		ldr	r3, .L50+20
 771 0394 1B79     		ldrb	r3, [r3, #4]
 772 0396 DBB2     		uxtb	r3, r3
 773 0398 9A42     		cmp	r2, r3
 774 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 775              		.loc 1 488 0
 776 039c 594B     		ldr	r3, .L50
 777 039e 1B78     		ldrb	r3, [r3]
 778 03a0 DBB2     		uxtb	r3, r3
 779 03a2 43F01003 		orr	r3, r3, #16
 780 03a6 DAB2     		uxtb	r2, r3
 781 03a8 564B     		ldr	r3, .L50
 782 03aa 1A70     		strb	r2, [r3]
 783 03ac 07E0     		b	.L31
 784              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 785              		.loc 1 493 0
 786 03ae 554B     		ldr	r3, .L50
 787 03b0 1B78     		ldrb	r3, [r3]
 788 03b2 DBB2     		uxtb	r3, r3
 789 03b4 23F01003 		bic	r3, r3, #16
 790 03b8 DAB2     		uxtb	r2, r3
 791 03ba 524B     		ldr	r3, .L50
 792 03bc 1A70     		strb	r2, [r3]
 793              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 24


 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 794              		.loc 1 518 0
 795 03be 524B     		ldr	r3, .L50+4
 796 03c0 1B78     		ldrb	r3, [r3]
 797 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 798              		.loc 1 519 0
 799 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 800 03c6 002B     		cmp	r3, #0
 801 03c8 13D0     		beq	.L33
 802              		.loc 1 519 0 is_stmt 0 discriminator 1
 803 03ca 4E4B     		ldr	r3, .L50
 804 03cc 1B78     		ldrb	r3, [r3]
 805 03ce DAB2     		uxtb	r2, r3
 806 03d0 FB79     		ldrb	r3, [r7, #7]
 807 03d2 1340     		ands	r3, r3, r2
 808 03d4 DBB2     		uxtb	r3, r3
 809 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 810 03d8 9A42     		cmp	r2, r3
 811 03da 0AD1     		bne	.L33
 812              		.loc 1 519 0 discriminator 2
 813 03dc 4B4B     		ldr	r3, .L50+8
 814 03de 1B78     		ldrb	r3, [r3]
 815 03e0 DBB2     		uxtb	r3, r3
 816 03e2 43F00803 		orr	r3, r3, #8
 817 03e6 DAB2     		uxtb	r2, r3
 818 03e8 484B     		ldr	r3, .L50+8
 819 03ea 1A70     		strb	r2, [r3]
 820 03ec 454B     		ldr	r3, .L50
 821 03ee 0022     		movs	r2, #0
 822 03f0 1A70     		strb	r2, [r3]
 823              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 824              		.loc 1 524 0 is_stmt 1
 825 03f2 474B     		ldr	r3, .L50+12
 826 03f4 1B78     		ldrb	r3, [r3]
 827 03f6 DBB2     		uxtb	r3, r3
 828 03f8 03F00803 		and	r3, r3, #8
 829 03fc 002B     		cmp	r3, #0
 830 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 831              		.loc 1 527 0
 832 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 833              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 25


 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 834              		.loc 1 530 0
 835 0404 444B     		ldr	r3, .L50+20
 836 0406 DB78     		ldrb	r3, [r3, #3]
 837 0408 DBB2     		uxtb	r3, r3
 838 040a 012B     		cmp	r3, #1
 839 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 840              		.loc 1 533 0
 841 040e 404B     		ldr	r3, .L50+12
 842 0410 1B78     		ldrb	r3, [r3]
 843 0412 DBB2     		uxtb	r3, r3
 844 0414 03F01003 		and	r3, r3, #16
 845 0418 002B     		cmp	r3, #0
 846 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 847              		.loc 1 536 0
 848 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 849              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 850              		.loc 1 543 0
 851 0420 3D4B     		ldr	r3, .L50+20
 852 0422 9B78     		ldrb	r3, [r3, #2]
 853 0424 DBB2     		uxtb	r3, r3
 854 0426 0B2B     		cmp	r3, #11
 855 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 856              		.loc 1 546 0
 857 042a 384B     		ldr	r3, .L50+8
 858 042c 1B78     		ldrb	r3, [r3]
 859 042e DBB2     		uxtb	r3, r3
 860 0430 23F00403 		bic	r3, r3, #4
 861 0434 DAB2     		uxtb	r2, r3
 862 0436 354B     		ldr	r3, .L50+8
 863 0438 1A70     		strb	r2, [r3]
 864 043a 07E0     		b	.L36
 865              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 866              		.loc 1 551 0
 867 043c 334B     		ldr	r3, .L50+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 26


 868 043e 1B78     		ldrb	r3, [r3]
 869 0440 DBB2     		uxtb	r3, r3
 870 0442 43F00403 		orr	r3, r3, #4
 871 0446 DAB2     		uxtb	r2, r3
 872 0448 304B     		ldr	r3, .L50+8
 873 044a 1A70     		strb	r2, [r3]
 874              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 27


 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 28


 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 29


 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 30


 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 31


 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 875              		.loc 1 879 0
 876 044c 2E4B     		ldr	r3, .L50+4
 877 044e 1B78     		ldrb	r3, [r3]
 878 0450 DBB2     		uxtb	r3, r3
 879 0452 03F00403 		and	r3, r3, #4
 880 0456 002B     		cmp	r3, #0
 881 0458 18D0     		beq	.L37
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 32


 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 882              		.loc 1 881 0
 883 045a 2E4B     		ldr	r3, .L50+16
 884 045c 9B78     		ldrb	r3, [r3, #2]
 885 045e DAB2     		uxtb	r2, r3
 886 0460 2D4B     		ldr	r3, .L50+20
 887 0462 9B78     		ldrb	r3, [r3, #2]
 888 0464 DBB2     		uxtb	r3, r3
 889 0466 9A42     		cmp	r2, r3
 890 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 891              		.loc 1 883 0
 892 046a 264B     		ldr	r3, .L50
 893 046c 1B78     		ldrb	r3, [r3]
 894 046e DBB2     		uxtb	r3, r3
 895 0470 43F00403 		orr	r3, r3, #4
 896 0474 DAB2     		uxtb	r2, r3
 897 0476 234B     		ldr	r3, .L50
 898 0478 1A70     		strb	r2, [r3]
 899 047a 07E0     		b	.L37
 900              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 901              		.loc 1 887 0
 902 047c 214B     		ldr	r3, .L50
 903 047e 1B78     		ldrb	r3, [r3]
 904 0480 DBB2     		uxtb	r3, r3
 905 0482 23F00403 		bic	r3, r3, #4
 906 0486 DAB2     		uxtb	r2, r3
 907 0488 1E4B     		ldr	r3, .L50
 908 048a 1A70     		strb	r2, [r3]
 909              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 910              		.loc 1 892 0
 911 048c 1E4B     		ldr	r3, .L50+4
 912 048e 1B78     		ldrb	r3, [r3]
 913 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 914              		.loc 1 893 0
 915 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 916 0494 002B     		cmp	r3, #0
 917 0496 13D0     		beq	.L39
 918              		.loc 1 893 0 is_stmt 0 discriminator 1
 919 0498 1A4B     		ldr	r3, .L50
 920 049a 1B78     		ldrb	r3, [r3]
 921 049c DAB2     		uxtb	r2, r3
 922 049e FB79     		ldrb	r3, [r7, #7]
 923 04a0 1340     		ands	r3, r3, r2
 924 04a2 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 33


 925 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 926 04a6 9A42     		cmp	r2, r3
 927 04a8 0AD1     		bne	.L39
 928              		.loc 1 893 0 discriminator 2
 929 04aa 184B     		ldr	r3, .L50+8
 930 04ac 1B78     		ldrb	r3, [r3]
 931 04ae DBB2     		uxtb	r3, r3
 932 04b0 43F00803 		orr	r3, r3, #8
 933 04b4 DAB2     		uxtb	r2, r3
 934 04b6 154B     		ldr	r3, .L50+8
 935 04b8 1A70     		strb	r2, [r3]
 936 04ba 124B     		ldr	r3, .L50
 937 04bc 0022     		movs	r2, #0
 938 04be 1A70     		strb	r2, [r3]
 939              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 940              		.loc 1 898 0 is_stmt 1
 941 04c0 134B     		ldr	r3, .L50+12
 942 04c2 1B78     		ldrb	r3, [r3]
 943 04c4 DBB2     		uxtb	r3, r3
 944 04c6 03F00403 		and	r3, r3, #4
 945 04ca 002B     		cmp	r3, #0
 946 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 947              		.loc 1 900 0
 948 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 949              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 950              		.loc 1 905 0
 951 04d2 0D4B     		ldr	r3, .L50+4
 952 04d4 1B78     		ldrb	r3, [r3]
 953 04d6 DBB2     		uxtb	r3, r3
 954 04d8 03F00203 		and	r3, r3, #2
 955 04dc 002B     		cmp	r3, #0
 956 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 957              		.loc 1 907 0
 958 04e0 0C4B     		ldr	r3, .L50+16
 959 04e2 5B78     		ldrb	r3, [r3, #1]
 960 04e4 DAB2     		uxtb	r2, r3
 961 04e6 0C4B     		ldr	r3, .L50+20
 962 04e8 5B78     		ldrb	r3, [r3, #1]
 963 04ea DBB2     		uxtb	r3, r3
 964 04ec 9A42     		cmp	r2, r3
 965 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 34


 966              		.loc 1 909 0
 967 04f0 044B     		ldr	r3, .L50
 968 04f2 1B78     		ldrb	r3, [r3]
 969 04f4 DBB2     		uxtb	r3, r3
 970 04f6 43F00203 		orr	r3, r3, #2
 971 04fa DAB2     		uxtb	r2, r3
 972 04fc 014B     		ldr	r3, .L50
 973 04fe 1A70     		strb	r2, [r3]
 974 0500 14E0     		b	.L40
 975              	.L51:
 976 0502 00BF     		.align	2
 977              	.L50:
 978 0504 00000000 		.word	RTC_alarmCurStatus
 979 0508 00000000 		.word	RTC_alarmCfgMask
 980 050c 00000000 		.word	RTC_statusDateTime
 981 0510 00000000 		.word	RTC_intervalCfgMask
 982 0514 00000000 		.word	RTC_alarmCfgTimeDate
 983 0518 00000000 		.word	RTC_currentTimeDate
 984              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 985              		.loc 1 913 0
 986 051c 384B     		ldr	r3, .L52
 987 051e 1B78     		ldrb	r3, [r3]
 988 0520 DBB2     		uxtb	r3, r3
 989 0522 23F00203 		bic	r3, r3, #2
 990 0526 DAB2     		uxtb	r2, r3
 991 0528 354B     		ldr	r3, .L52
 992 052a 1A70     		strb	r2, [r3]
 993              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 994              		.loc 1 918 0
 995 052c 354B     		ldr	r3, .L52+4
 996 052e 1B78     		ldrb	r3, [r3]
 997 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 998              		.loc 1 919 0
 999 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1000 0534 002B     		cmp	r3, #0
 1001 0536 13D0     		beq	.L42
 1002              		.loc 1 919 0 is_stmt 0 discriminator 1
 1003 0538 314B     		ldr	r3, .L52
 1004 053a 1B78     		ldrb	r3, [r3]
 1005 053c DAB2     		uxtb	r2, r3
 1006 053e FB79     		ldrb	r3, [r7, #7]
 1007 0540 1340     		ands	r3, r3, r2
 1008 0542 DBB2     		uxtb	r3, r3
 1009 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1010 0546 9A42     		cmp	r2, r3
 1011 0548 0AD1     		bne	.L42
 1012              		.loc 1 919 0 discriminator 2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 35


 1013 054a 2F4B     		ldr	r3, .L52+8
 1014 054c 1B78     		ldrb	r3, [r3]
 1015 054e DBB2     		uxtb	r3, r3
 1016 0550 43F00803 		orr	r3, r3, #8
 1017 0554 DAB2     		uxtb	r2, r3
 1018 0556 2C4B     		ldr	r3, .L52+8
 1019 0558 1A70     		strb	r2, [r3]
 1020 055a 294B     		ldr	r3, .L52
 1021 055c 0022     		movs	r2, #0
 1022 055e 1A70     		strb	r2, [r3]
 1023              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1024              		.loc 1 924 0 is_stmt 1
 1025 0560 2A4B     		ldr	r3, .L52+12
 1026 0562 1B78     		ldrb	r3, [r3]
 1027 0564 DBB2     		uxtb	r3, r3
 1028 0566 03F00203 		and	r3, r3, #2
 1029 056a 002B     		cmp	r3, #0
 1030 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1031              		.loc 1 926 0
 1032 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1033              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1034              		.loc 1 931 0
 1035 0572 244B     		ldr	r3, .L52+4
 1036 0574 1B78     		ldrb	r3, [r3]
 1037 0576 DBB2     		uxtb	r3, r3
 1038 0578 03F00103 		and	r3, r3, #1
 1039 057c 002B     		cmp	r3, #0
 1040 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1041              		.loc 1 933 0
 1042 0580 234B     		ldr	r3, .L52+16
 1043 0582 1B78     		ldrb	r3, [r3]
 1044 0584 DAB2     		uxtb	r2, r3
 1045 0586 234B     		ldr	r3, .L52+20
 1046 0588 1B78     		ldrb	r3, [r3]
 1047 058a DBB2     		uxtb	r3, r3
 1048 058c 9A42     		cmp	r2, r3
 1049 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1050              		.loc 1 935 0
 1051 0590 1B4B     		ldr	r3, .L52
 1052 0592 1B78     		ldrb	r3, [r3]
 1053 0594 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 36


 1054 0596 43F00103 		orr	r3, r3, #1
 1055 059a DAB2     		uxtb	r2, r3
 1056 059c 184B     		ldr	r3, .L52
 1057 059e 1A70     		strb	r2, [r3]
 1058 05a0 07E0     		b	.L43
 1059              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1060              		.loc 1 939 0
 1061 05a2 174B     		ldr	r3, .L52
 1062 05a4 1B78     		ldrb	r3, [r3]
 1063 05a6 DBB2     		uxtb	r3, r3
 1064 05a8 23F00103 		bic	r3, r3, #1
 1065 05ac DAB2     		uxtb	r2, r3
 1066 05ae 144B     		ldr	r3, .L52
 1067 05b0 1A70     		strb	r2, [r3]
 1068              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1069              		.loc 1 944 0
 1070 05b2 144B     		ldr	r3, .L52+4
 1071 05b4 1B78     		ldrb	r3, [r3]
 1072 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1073              		.loc 1 945 0
 1074 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1075 05ba 002B     		cmp	r3, #0
 1076 05bc 13D0     		beq	.L45
 1077              		.loc 1 945 0 is_stmt 0 discriminator 1
 1078 05be 104B     		ldr	r3, .L52
 1079 05c0 1B78     		ldrb	r3, [r3]
 1080 05c2 DAB2     		uxtb	r2, r3
 1081 05c4 FB79     		ldrb	r3, [r7, #7]
 1082 05c6 1340     		ands	r3, r3, r2
 1083 05c8 DBB2     		uxtb	r3, r3
 1084 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1085 05cc 9A42     		cmp	r2, r3
 1086 05ce 0AD1     		bne	.L45
 1087              		.loc 1 945 0 discriminator 2
 1088 05d0 0D4B     		ldr	r3, .L52+8
 1089 05d2 1B78     		ldrb	r3, [r3]
 1090 05d4 DBB2     		uxtb	r3, r3
 1091 05d6 43F00803 		orr	r3, r3, #8
 1092 05da DAB2     		uxtb	r2, r3
 1093 05dc 0A4B     		ldr	r3, .L52+8
 1094 05de 1A70     		strb	r2, [r3]
 1095 05e0 074B     		ldr	r3, .L52
 1096 05e2 0022     		movs	r2, #0
 1097 05e4 1A70     		strb	r2, [r3]
 1098              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 37


 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1099              		.loc 1 948 0 is_stmt 1
 1100 05e6 094B     		ldr	r3, .L52+12
 1101 05e8 1B78     		ldrb	r3, [r3]
 1102 05ea DBB2     		uxtb	r3, r3
 1103 05ec 03F00103 		and	r3, r3, #1
 1104 05f0 002B     		cmp	r3, #0
 1105 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1106              		.loc 1 950 0
 1107 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1108              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1109              		.loc 1 956 0
 1110 05f8 00BF     		nop
 1111 05fa 0837     		adds	r7, r7, #8
 1112              		.cfi_def_cfa_offset 8
 1113 05fc BD46     		mov	sp, r7
 1114              		.cfi_def_cfa_register 13
 1115              		@ sp needed
 1116 05fe 80BD     		pop	{r7, pc}
 1117              	.L53:
 1118              		.align	2
 1119              	.L52:
 1120 0600 00000000 		.word	RTC_alarmCurStatus
 1121 0604 00000000 		.word	RTC_alarmCfgMask
 1122 0608 00000000 		.word	RTC_statusDateTime
 1123 060c 00000000 		.word	RTC_intervalCfgMask
 1124 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1125 0614 00000000 		.word	RTC_currentTimeDate
 1126              		.cfi_endproc
 1127              	.LFE71:
 1128              		.size	RTC_ISR, .-RTC_ISR
 1129              		.text
 1130              	.Letext0:
 1131              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1132              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1133              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1134              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1135              		.file 6 "./data.h"
 1136              		.file 7 "./modem.h"
 1137              		.file 8 "./notoriOS.h"
 1138              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1139              		.file 10 "./level_sensor.h"
 1140              		.file 11 "./downstream_level_sensor.h"
 1141              		.file 12 "./valve.h"
 1142              		.file 13 "./App_LED.h"
 1143              		.section	.debug_info,"",%progbits
 1144              	.Ldebug_info0:
 1145 0000 80070000 		.4byte	0x780
 1146 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 38


 1147 0006 00000000 		.4byte	.Ldebug_abbrev0
 1148 000a 04       		.byte	0x4
 1149 000b 01       		.uleb128 0x1
 1150 000c 8F000000 		.4byte	.LASF116
 1151 0010 0C       		.byte	0xc
 1152 0011 83010000 		.4byte	.LASF117
 1153 0015 0F000000 		.4byte	.LASF118
 1154 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1155 001d 00000000 		.4byte	0
 1156 0021 00000000 		.4byte	.Ldebug_line0
 1157 0025 02       		.uleb128 0x2
 1158 0026 01       		.byte	0x1
 1159 0027 06       		.byte	0x6
 1160 0028 6E000000 		.4byte	.LASF0
 1161 002c 02       		.uleb128 0x2
 1162 002d 01       		.byte	0x1
 1163 002e 08       		.byte	0x8
 1164 002f F2040000 		.4byte	.LASF1
 1165 0033 02       		.uleb128 0x2
 1166 0034 02       		.byte	0x2
 1167 0035 05       		.byte	0x5
 1168 0036 47050000 		.4byte	.LASF2
 1169 003a 02       		.uleb128 0x2
 1170 003b 02       		.byte	0x2
 1171 003c 07       		.byte	0x7
 1172 003d 2D060000 		.4byte	.LASF3
 1173 0041 03       		.uleb128 0x3
 1174 0042 16060000 		.4byte	.LASF9
 1175 0046 02       		.byte	0x2
 1176 0047 3F       		.byte	0x3f
 1177 0048 4C000000 		.4byte	0x4c
 1178 004c 02       		.uleb128 0x2
 1179 004d 04       		.byte	0x4
 1180 004e 05       		.byte	0x5
 1181 004f 4B020000 		.4byte	.LASF4
 1182 0053 02       		.uleb128 0x2
 1183 0054 04       		.byte	0x4
 1184 0055 07       		.byte	0x7
 1185 0056 17030000 		.4byte	.LASF5
 1186 005a 02       		.uleb128 0x2
 1187 005b 08       		.byte	0x8
 1188 005c 05       		.byte	0x5
 1189 005d A4010000 		.4byte	.LASF6
 1190 0061 02       		.uleb128 0x2
 1191 0062 08       		.byte	0x8
 1192 0063 07       		.byte	0x7
 1193 0064 23010000 		.4byte	.LASF7
 1194 0068 04       		.uleb128 0x4
 1195 0069 04       		.byte	0x4
 1196 006a 05       		.byte	0x5
 1197 006b 696E7400 		.ascii	"int\000"
 1198 006f 02       		.uleb128 0x2
 1199 0070 04       		.byte	0x4
 1200 0071 07       		.byte	0x7
 1201 0072 DE050000 		.4byte	.LASF8
 1202 0076 03       		.uleb128 0x3
 1203 0077 EA040000 		.4byte	.LASF10
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 39


 1204 007b 03       		.byte	0x3
 1205 007c 2C       		.byte	0x2c
 1206 007d 41000000 		.4byte	0x41
 1207 0081 05       		.uleb128 0x5
 1208 0082 70020000 		.4byte	.LASF11
 1209 0086 04       		.byte	0x4
 1210 0087 9201     		.2byte	0x192
 1211 0089 2C000000 		.4byte	0x2c
 1212 008d 05       		.uleb128 0x5
 1213 008e 08000000 		.4byte	.LASF12
 1214 0092 04       		.byte	0x4
 1215 0093 9301     		.2byte	0x193
 1216 0095 3A000000 		.4byte	0x3a
 1217 0099 05       		.uleb128 0x5
 1218 009a 56040000 		.4byte	.LASF13
 1219 009e 04       		.byte	0x4
 1220 009f 9601     		.2byte	0x196
 1221 00a1 33000000 		.4byte	0x33
 1222 00a5 05       		.uleb128 0x5
 1223 00a6 96020000 		.4byte	.LASF14
 1224 00aa 04       		.byte	0x4
 1225 00ab 9701     		.2byte	0x197
 1226 00ad 4C000000 		.4byte	0x4c
 1227 00b1 05       		.uleb128 0x5
 1228 00b2 29040000 		.4byte	.LASF15
 1229 00b6 04       		.byte	0x4
 1230 00b7 9801     		.2byte	0x198
 1231 00b9 BD000000 		.4byte	0xbd
 1232 00bd 02       		.uleb128 0x2
 1233 00be 04       		.byte	0x4
 1234 00bf 04       		.byte	0x4
 1235 00c0 C1040000 		.4byte	.LASF16
 1236 00c4 02       		.uleb128 0x2
 1237 00c5 08       		.byte	0x8
 1238 00c6 04       		.byte	0x4
 1239 00c7 12070000 		.4byte	.LASF17
 1240 00cb 02       		.uleb128 0x2
 1241 00cc 01       		.byte	0x1
 1242 00cd 08       		.byte	0x8
 1243 00ce D9050000 		.4byte	.LASF18
 1244 00d2 06       		.uleb128 0x6
 1245 00d3 81000000 		.4byte	0x81
 1246 00d7 07       		.uleb128 0x7
 1247 00d8 0C       		.byte	0xc
 1248 00d9 05       		.byte	0x5
 1249 00da 30       		.byte	0x30
 1250 00db 40010000 		.4byte	0x140
 1251 00df 08       		.uleb128 0x8
 1252 00e0 53656300 		.ascii	"Sec\000"
 1253 00e4 05       		.byte	0x5
 1254 00e5 32       		.byte	0x32
 1255 00e6 81000000 		.4byte	0x81
 1256 00ea 00       		.byte	0
 1257 00eb 08       		.uleb128 0x8
 1258 00ec 4D696E00 		.ascii	"Min\000"
 1259 00f0 05       		.byte	0x5
 1260 00f1 33       		.byte	0x33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 40


 1261 00f2 81000000 		.4byte	0x81
 1262 00f6 01       		.byte	0x1
 1263 00f7 09       		.uleb128 0x9
 1264 00f8 3A010000 		.4byte	.LASF19
 1265 00fc 05       		.byte	0x5
 1266 00fd 34       		.byte	0x34
 1267 00fe 81000000 		.4byte	0x81
 1268 0102 02       		.byte	0x2
 1269 0103 09       		.uleb128 0x9
 1270 0104 60050000 		.4byte	.LASF20
 1271 0108 05       		.byte	0x5
 1272 0109 35       		.byte	0x35
 1273 010a 81000000 		.4byte	0x81
 1274 010e 03       		.byte	0x3
 1275 010f 09       		.uleb128 0x9
 1276 0110 37030000 		.4byte	.LASF21
 1277 0114 05       		.byte	0x5
 1278 0115 36       		.byte	0x36
 1279 0116 81000000 		.4byte	0x81
 1280 011a 04       		.byte	0x4
 1281 011b 09       		.uleb128 0x9
 1282 011c FB060000 		.4byte	.LASF22
 1283 0120 05       		.byte	0x5
 1284 0121 37       		.byte	0x37
 1285 0122 8D000000 		.4byte	0x8d
 1286 0126 06       		.byte	0x6
 1287 0127 09       		.uleb128 0x9
 1288 0128 1D010000 		.4byte	.LASF23
 1289 012c 05       		.byte	0x5
 1290 012d 38       		.byte	0x38
 1291 012e 81000000 		.4byte	0x81
 1292 0132 08       		.byte	0x8
 1293 0133 09       		.uleb128 0x9
 1294 0134 C7040000 		.4byte	.LASF24
 1295 0138 05       		.byte	0x5
 1296 0139 39       		.byte	0x39
 1297 013a 8D000000 		.4byte	0x8d
 1298 013e 0A       		.byte	0xa
 1299 013f 00       		.byte	0
 1300 0140 03       		.uleb128 0x3
 1301 0141 7D040000 		.4byte	.LASF25
 1302 0145 05       		.byte	0x5
 1303 0146 3A       		.byte	0x3a
 1304 0147 4B010000 		.4byte	0x14b
 1305 014b 06       		.uleb128 0x6
 1306 014c D7000000 		.4byte	0xd7
 1307 0150 02       		.uleb128 0x2
 1308 0151 08       		.byte	0x8
 1309 0152 04       		.byte	0x4
 1310 0153 CD050000 		.4byte	.LASF26
 1311 0157 02       		.uleb128 0x2
 1312 0158 04       		.byte	0x4
 1313 0159 07       		.byte	0x7
 1314 015a 31040000 		.4byte	.LASF27
 1315 015e 0A       		.uleb128 0xa
 1316 015f CB000000 		.4byte	0xcb
 1317 0163 6E010000 		.4byte	0x16e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 41


 1318 0167 0B       		.uleb128 0xb
 1319 0168 57010000 		.4byte	0x157
 1320 016c 17       		.byte	0x17
 1321 016d 00       		.byte	0
 1322 016e 07       		.uleb128 0x7
 1323 016f 2C       		.byte	0x2c
 1324 0170 06       		.byte	0x6
 1325 0171 14       		.byte	0x14
 1326 0172 9B010000 		.4byte	0x19b
 1327 0176 08       		.uleb128 0x8
 1328 0177 6B657900 		.ascii	"key\000"
 1329 017b 06       		.byte	0x6
 1330 017c 15       		.byte	0x15
 1331 017d 9B010000 		.4byte	0x19b
 1332 0181 00       		.byte	0
 1333 0182 09       		.uleb128 0x9
 1334 0183 EB020000 		.4byte	.LASF28
 1335 0187 06       		.byte	0x6
 1336 0188 16       		.byte	0x16
 1337 0189 9B010000 		.4byte	0x19b
 1338 018d 14       		.byte	0x14
 1339 018e 09       		.uleb128 0x9
 1340 018f 73040000 		.4byte	.LASF29
 1341 0193 06       		.byte	0x6
 1342 0194 17       		.byte	0x17
 1343 0195 A5000000 		.4byte	0xa5
 1344 0199 28       		.byte	0x28
 1345 019a 00       		.byte	0
 1346 019b 0A       		.uleb128 0xa
 1347 019c CB000000 		.4byte	0xcb
 1348 01a0 AB010000 		.4byte	0x1ab
 1349 01a4 0B       		.uleb128 0xb
 1350 01a5 57010000 		.4byte	0x157
 1351 01a9 13       		.byte	0x13
 1352 01aa 00       		.byte	0
 1353 01ab 03       		.uleb128 0x3
 1354 01ac 0B030000 		.4byte	.LASF30
 1355 01b0 06       		.byte	0x6
 1356 01b1 19       		.byte	0x19
 1357 01b2 6E010000 		.4byte	0x16e
 1358 01b6 07       		.uleb128 0x7
 1359 01b7 3C       		.byte	0x3c
 1360 01b8 07       		.byte	0x7
 1361 01b9 36       		.byte	0x36
 1362 01ba E3010000 		.4byte	0x1e3
 1363 01be 09       		.uleb128 0x9
 1364 01bf 40060000 		.4byte	.LASF31
 1365 01c3 07       		.byte	0x7
 1366 01c4 37       		.byte	0x37
 1367 01c5 9B010000 		.4byte	0x19b
 1368 01c9 00       		.byte	0
 1369 01ca 09       		.uleb128 0x9
 1370 01cb B4020000 		.4byte	.LASF32
 1371 01cf 07       		.byte	0x7
 1372 01d0 38       		.byte	0x38
 1373 01d1 9B010000 		.4byte	0x19b
 1374 01d5 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 42


 1375 01d6 09       		.uleb128 0x9
 1376 01d7 76050000 		.4byte	.LASF33
 1377 01db 07       		.byte	0x7
 1378 01dc 39       		.byte	0x39
 1379 01dd 9B010000 		.4byte	0x19b
 1380 01e1 28       		.byte	0x28
 1381 01e2 00       		.byte	0
 1382 01e3 03       		.uleb128 0x3
 1383 01e4 1D020000 		.4byte	.LASF34
 1384 01e8 07       		.byte	0x7
 1385 01e9 3B       		.byte	0x3b
 1386 01ea B6010000 		.4byte	0x1b6
 1387 01ee 07       		.uleb128 0x7
 1388 01ef 20       		.byte	0x20
 1389 01f0 07       		.byte	0x7
 1390 01f1 3D       		.byte	0x3d
 1391 01f2 57020000 		.4byte	0x257
 1392 01f6 09       		.uleb128 0x9
 1393 01f7 45020000 		.4byte	.LASF35
 1394 01fb 07       		.byte	0x7
 1395 01fc 3E       		.byte	0x3e
 1396 01fd 68000000 		.4byte	0x68
 1397 0201 00       		.byte	0
 1398 0202 08       		.uleb128 0x8
 1399 0203 62657200 		.ascii	"ber\000"
 1400 0207 07       		.byte	0x7
 1401 0208 3F       		.byte	0x3f
 1402 0209 68000000 		.4byte	0x68
 1403 020d 04       		.byte	0x4
 1404 020e 09       		.uleb128 0x9
 1405 020f 5B050000 		.4byte	.LASF36
 1406 0213 07       		.byte	0x7
 1407 0214 40       		.byte	0x40
 1408 0215 68000000 		.4byte	0x68
 1409 0219 08       		.byte	0x8
 1410 021a 09       		.uleb128 0x9
 1411 021b B2010000 		.4byte	.LASF37
 1412 021f 07       		.byte	0x7
 1413 0220 41       		.byte	0x41
 1414 0221 68000000 		.4byte	0x68
 1415 0225 0C       		.byte	0xc
 1416 0226 09       		.uleb128 0x9
 1417 0227 2E050000 		.4byte	.LASF38
 1418 022b 07       		.byte	0x7
 1419 022c 42       		.byte	0x42
 1420 022d 68000000 		.4byte	0x68
 1421 0231 10       		.byte	0x10
 1422 0232 09       		.uleb128 0x9
 1423 0233 29050000 		.4byte	.LASF39
 1424 0237 07       		.byte	0x7
 1425 0238 43       		.byte	0x43
 1426 0239 68000000 		.4byte	0x68
 1427 023d 14       		.byte	0x14
 1428 023e 09       		.uleb128 0x9
 1429 023f CB010000 		.4byte	.LASF40
 1430 0243 07       		.byte	0x7
 1431 0244 44       		.byte	0x44
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 43


 1432 0245 68000000 		.4byte	0x68
 1433 0249 18       		.byte	0x18
 1434 024a 09       		.uleb128 0x9
 1435 024b 7F030000 		.4byte	.LASF41
 1436 024f 07       		.byte	0x7
 1437 0250 45       		.byte	0x45
 1438 0251 68000000 		.4byte	0x68
 1439 0255 1C       		.byte	0x1c
 1440 0256 00       		.byte	0
 1441 0257 03       		.uleb128 0x3
 1442 0258 89050000 		.4byte	.LASF42
 1443 025c 07       		.byte	0x7
 1444 025d 47       		.byte	0x47
 1445 025e EE010000 		.4byte	0x1ee
 1446 0262 07       		.uleb128 0x7
 1447 0263 09       		.byte	0x9
 1448 0264 07       		.byte	0x7
 1449 0265 53       		.byte	0x53
 1450 0266 D7020000 		.4byte	0x2d7
 1451 026a 09       		.uleb128 0x9
 1452 026b 9C020000 		.4byte	.LASF43
 1453 026f 07       		.byte	0x7
 1454 0270 55       		.byte	0x55
 1455 0271 81000000 		.4byte	0x81
 1456 0275 00       		.byte	0
 1457 0276 09       		.uleb128 0x9
 1458 0277 F2060000 		.4byte	.LASF44
 1459 027b 07       		.byte	0x7
 1460 027c 57       		.byte	0x57
 1461 027d D7020000 		.4byte	0x2d7
 1462 0281 01       		.byte	0x1
 1463 0282 09       		.uleb128 0x9
 1464 0283 20060000 		.4byte	.LASF45
 1465 0287 07       		.byte	0x7
 1466 0288 59       		.byte	0x59
 1467 0289 81000000 		.4byte	0x81
 1468 028d 02       		.byte	0x2
 1469 028e 09       		.uleb128 0x9
 1470 028f 51050000 		.4byte	.LASF46
 1471 0293 07       		.byte	0x7
 1472 0294 5B       		.byte	0x5b
 1473 0295 81000000 		.4byte	0x81
 1474 0299 03       		.byte	0x3
 1475 029a 09       		.uleb128 0x9
 1476 029b CC020000 		.4byte	.LASF47
 1477 029f 07       		.byte	0x7
 1478 02a0 5E       		.byte	0x5e
 1479 02a1 81000000 		.4byte	0x81
 1480 02a5 04       		.byte	0x4
 1481 02a6 09       		.uleb128 0x9
 1482 02a7 BC060000 		.4byte	.LASF48
 1483 02ab 07       		.byte	0x7
 1484 02ac 63       		.byte	0x63
 1485 02ad 81000000 		.4byte	0x81
 1486 02b1 05       		.byte	0x5
 1487 02b2 09       		.uleb128 0x9
 1488 02b3 A8050000 		.4byte	.LASF49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 44


 1489 02b7 07       		.byte	0x7
 1490 02b8 65       		.byte	0x65
 1491 02b9 81000000 		.4byte	0x81
 1492 02bd 06       		.byte	0x6
 1493 02be 09       		.uleb128 0x9
 1494 02bf 47060000 		.4byte	.LASF50
 1495 02c3 07       		.byte	0x7
 1496 02c4 66       		.byte	0x66
 1497 02c5 81000000 		.4byte	0x81
 1498 02c9 07       		.byte	0x7
 1499 02ca 09       		.uleb128 0x9
 1500 02cb 83060000 		.4byte	.LASF51
 1501 02cf 07       		.byte	0x7
 1502 02d0 67       		.byte	0x67
 1503 02d1 81000000 		.4byte	0x81
 1504 02d5 08       		.byte	0x8
 1505 02d6 00       		.byte	0
 1506 02d7 02       		.uleb128 0x2
 1507 02d8 01       		.byte	0x1
 1508 02d9 02       		.byte	0x2
 1509 02da E4040000 		.4byte	.LASF52
 1510 02de 03       		.uleb128 0x3
 1511 02df E4030000 		.4byte	.LASF53
 1512 02e3 07       		.byte	0x7
 1513 02e4 69       		.byte	0x69
 1514 02e5 62020000 		.4byte	0x262
 1515 02e9 07       		.uleb128 0x7
 1516 02ea 06       		.byte	0x6
 1517 02eb 08       		.byte	0x8
 1518 02ec 30       		.byte	0x30
 1519 02ed 22030000 		.4byte	0x322
 1520 02f1 09       		.uleb128 0x9
 1521 02f2 BD020000 		.4byte	.LASF54
 1522 02f6 08       		.byte	0x8
 1523 02f7 32       		.byte	0x32
 1524 02f8 8D000000 		.4byte	0x8d
 1525 02fc 00       		.byte	0
 1526 02fd 09       		.uleb128 0x9
 1527 02fe 54020000 		.4byte	.LASF55
 1528 0302 08       		.byte	0x8
 1529 0303 33       		.byte	0x33
 1530 0304 99000000 		.4byte	0x99
 1531 0308 02       		.byte	0x2
 1532 0309 09       		.uleb128 0x9
 1533 030a E4060000 		.4byte	.LASF56
 1534 030e 08       		.byte	0x8
 1535 030f 34       		.byte	0x34
 1536 0310 81000000 		.4byte	0x81
 1537 0314 04       		.byte	0x4
 1538 0315 09       		.uleb128 0x9
 1539 0316 CC040000 		.4byte	.LASF57
 1540 031a 08       		.byte	0x8
 1541 031b 35       		.byte	0x35
 1542 031c 81000000 		.4byte	0x81
 1543 0320 05       		.byte	0x5
 1544 0321 00       		.byte	0
 1545 0322 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 45


 1546 0323 6A020000 		.4byte	.LASF58
 1547 0327 08       		.byte	0x8
 1548 0328 38       		.byte	0x38
 1549 0329 2D030000 		.4byte	0x32d
 1550 032d 06       		.uleb128 0x6
 1551 032e E9020000 		.4byte	0x2e9
 1552 0332 07       		.uleb128 0x7
 1553 0333 1C       		.byte	0x1c
 1554 0334 08       		.byte	0x8
 1555 0335 3B       		.byte	0x3b
 1556 0336 53030000 		.4byte	0x353
 1557 033a 09       		.uleb128 0x9
 1558 033b 4F030000 		.4byte	.LASF59
 1559 033f 08       		.byte	0x8
 1560 0340 3D       		.byte	0x3d
 1561 0341 53030000 		.4byte	0x353
 1562 0345 00       		.byte	0
 1563 0346 09       		.uleb128 0x9
 1564 0347 A6020000 		.4byte	.LASF60
 1565 034b 08       		.byte	0x8
 1566 034c 3E       		.byte	0x3e
 1567 034d 5E010000 		.4byte	0x15e
 1568 0351 04       		.byte	0x4
 1569 0352 00       		.byte	0
 1570 0353 0C       		.uleb128 0xc
 1571 0354 04       		.byte	0x4
 1572 0355 E3010000 		.4byte	0x1e3
 1573 0359 03       		.uleb128 0x3
 1574 035a D9030000 		.4byte	.LASF61
 1575 035e 08       		.byte	0x8
 1576 035f 40       		.byte	0x40
 1577 0360 32030000 		.4byte	0x332
 1578 0364 07       		.uleb128 0x7
 1579 0365 68       		.byte	0x68
 1580 0366 08       		.byte	0x8
 1581 0367 46       		.byte	0x46
 1582 0368 85030000 		.4byte	0x385
 1583 036c 09       		.uleb128 0x9
 1584 036d 5A030000 		.4byte	.LASF62
 1585 0371 08       		.byte	0x8
 1586 0372 4B       		.byte	0x4b
 1587 0373 85030000 		.4byte	0x385
 1588 0377 00       		.byte	0
 1589 0378 09       		.uleb128 0x9
 1590 0379 47030000 		.4byte	.LASF63
 1591 037d 08       		.byte	0x8
 1592 037e 4C       		.byte	0x4c
 1593 037f 68000000 		.4byte	0x68
 1594 0383 64       		.byte	0x64
 1595 0384 00       		.byte	0
 1596 0385 0A       		.uleb128 0xa
 1597 0386 CB000000 		.4byte	0xcb
 1598 038a 95030000 		.4byte	0x395
 1599 038e 0B       		.uleb128 0xb
 1600 038f 57010000 		.4byte	0x157
 1601 0393 63       		.byte	0x63
 1602 0394 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 46


 1603 0395 03       		.uleb128 0x3
 1604 0396 C9060000 		.4byte	.LASF64
 1605 039a 08       		.byte	0x8
 1606 039b 52       		.byte	0x52
 1607 039c 64030000 		.4byte	0x364
 1608 03a0 0D       		.uleb128 0xd
 1609 03a1 57000000 		.4byte	.LASF65
 1610 03a5 01       		.byte	0x1
 1611 03a6 36       		.byte	0x36
 1612 03a7 00000000 		.4byte	.LFB64
 1613 03ab 0E000000 		.4byte	.LFE64-.LFB64
 1614 03af 01       		.uleb128 0x1
 1615 03b0 9C       		.byte	0x9c
 1616 03b1 0D       		.uleb128 0xd
 1617 03b2 64060000 		.4byte	.LASF66
 1618 03b6 01       		.byte	0x1
 1619 03b7 51       		.byte	0x51
 1620 03b8 00000000 		.4byte	.LFB65
 1621 03bc 0E000000 		.4byte	.LFE65-.LFB65
 1622 03c0 01       		.uleb128 0x1
 1623 03c1 9C       		.byte	0x9c
 1624 03c2 0D       		.uleb128 0xd
 1625 03c3 14050000 		.4byte	.LASF67
 1626 03c7 01       		.byte	0x1
 1627 03c8 6C       		.byte	0x6c
 1628 03c9 00000000 		.4byte	.LFB66
 1629 03cd 0E000000 		.4byte	.LFE66-.LFB66
 1630 03d1 01       		.uleb128 0x1
 1631 03d2 9C       		.byte	0x9c
 1632 03d3 0D       		.uleb128 0xd
 1633 03d4 B7010000 		.4byte	.LASF68
 1634 03d8 01       		.byte	0x1
 1635 03d9 87       		.byte	0x87
 1636 03da 00000000 		.4byte	.LFB67
 1637 03de 0E000000 		.4byte	.LFE67-.LFB67
 1638 03e2 01       		.uleb128 0x1
 1639 03e3 9C       		.byte	0x9c
 1640 03e4 0D       		.uleb128 0xd
 1641 03e5 A0040000 		.4byte	.LASF69
 1642 03e9 01       		.byte	0x1
 1643 03ea A2       		.byte	0xa2
 1644 03eb 00000000 		.4byte	.LFB68
 1645 03ef 0E000000 		.4byte	.LFE68-.LFB68
 1646 03f3 01       		.uleb128 0x1
 1647 03f4 9C       		.byte	0x9c
 1648 03f5 0D       		.uleb128 0xd
 1649 03f6 07020000 		.4byte	.LASF70
 1650 03fa 01       		.byte	0x1
 1651 03fb BD       		.byte	0xbd
 1652 03fc 00000000 		.4byte	.LFB69
 1653 0400 0E000000 		.4byte	.LFE69-.LFB69
 1654 0404 01       		.uleb128 0x1
 1655 0405 9C       		.byte	0x9c
 1656 0406 0D       		.uleb128 0xd
 1657 0407 7A000000 		.4byte	.LASF71
 1658 040b 01       		.byte	0x1
 1659 040c D8       		.byte	0xd8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 47


 1660 040d 00000000 		.4byte	.LFB70
 1661 0411 0E000000 		.4byte	.LFE70-.LFB70
 1662 0415 01       		.uleb128 0x1
 1663 0416 9C       		.byte	0x9c
 1664 0417 0E       		.uleb128 0xe
 1665 0418 00000000 		.4byte	.LASF119
 1666 041c 01       		.byte	0x1
 1667 041d 0B01     		.2byte	0x10b
 1668 041f 00000000 		.4byte	.LFB71
 1669 0423 18060000 		.4byte	.LFE71-.LFB71
 1670 0427 01       		.uleb128 0x1
 1671 0428 9C       		.byte	0x9c
 1672 0429 3D040000 		.4byte	0x43d
 1673 042d 0F       		.uleb128 0xf
 1674 042e 7B060000 		.4byte	.LASF120
 1675 0432 01       		.byte	0x1
 1676 0433 0D01     		.2byte	0x10d
 1677 0435 81000000 		.4byte	0x81
 1678 0439 02       		.uleb128 0x2
 1679 043a 91       		.byte	0x91
 1680 043b 77       		.sleb128 -9
 1681 043c 00       		.byte	0
 1682 043d 10       		.uleb128 0x10
 1683 043e 01060000 		.4byte	.LASF72
 1684 0442 05       		.byte	0x5
 1685 0443 2D01     		.2byte	0x12d
 1686 0445 40010000 		.4byte	0x140
 1687 0449 10       		.uleb128 0x10
 1688 044a 00050000 		.4byte	.LASF73
 1689 044e 05       		.byte	0x5
 1690 044f 2E01     		.2byte	0x12e
 1691 0451 40010000 		.4byte	0x140
 1692 0455 10       		.uleb128 0x10
 1693 0456 62030000 		.4byte	.LASF74
 1694 045a 05       		.byte	0x5
 1695 045b 3901     		.2byte	0x139
 1696 045d D2000000 		.4byte	0xd2
 1697 0461 10       		.uleb128 0x10
 1698 0462 D8020000 		.4byte	.LASF75
 1699 0466 05       		.byte	0x5
 1700 0467 3A01     		.2byte	0x13a
 1701 0469 D2000000 		.4byte	0xd2
 1702 046d 10       		.uleb128 0x10
 1703 046e 33050000 		.4byte	.LASF76
 1704 0472 05       		.byte	0x5
 1705 0473 3B01     		.2byte	0x13b
 1706 0475 D2000000 		.4byte	0xd2
 1707 0479 10       		.uleb128 0x10
 1708 047a 76020000 		.4byte	.LASF77
 1709 047e 05       		.byte	0x5
 1710 047f 3C01     		.2byte	0x13c
 1711 0481 D2000000 		.4byte	0xd2
 1712 0485 0A       		.uleb128 0xa
 1713 0486 95040000 		.4byte	0x495
 1714 048a 95040000 		.4byte	0x495
 1715 048e 0B       		.uleb128 0xb
 1716 048f 57010000 		.4byte	0x157
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 48


 1717 0493 0B       		.byte	0xb
 1718 0494 00       		.byte	0
 1719 0495 11       		.uleb128 0x11
 1720 0496 81000000 		.4byte	0x81
 1721 049a 10       		.uleb128 0x10
 1722 049b 0D040000 		.4byte	.LASF78
 1723 049f 05       		.byte	0x5
 1724 04a0 3E01     		.2byte	0x13e
 1725 04a2 A6040000 		.4byte	0x4a6
 1726 04a6 11       		.uleb128 0x11
 1727 04a7 85040000 		.4byte	0x485
 1728 04ab 10       		.uleb128 0x10
 1729 04ac 58010000 		.4byte	.LASF79
 1730 04b0 09       		.byte	0x9
 1731 04b1 1207     		.2byte	0x712
 1732 04b3 B7040000 		.4byte	0x4b7
 1733 04b7 06       		.uleb128 0x6
 1734 04b8 76000000 		.4byte	0x76
 1735 04bc 12       		.uleb128 0x12
 1736 04bd BA050000 		.4byte	.LASF80
 1737 04c1 0A       		.byte	0xa
 1738 04c2 25       		.byte	0x25
 1739 04c3 85030000 		.4byte	0x385
 1740 04c7 05       		.uleb128 0x5
 1741 04c8 03       		.byte	0x3
 1742 04c9 00000000 		.4byte	level_sensor_inbox
 1743 04cd 12       		.uleb128 0x12
 1744 04ce 8E060000 		.4byte	.LASF81
 1745 04d2 0A       		.byte	0xa
 1746 04d3 27       		.byte	0x27
 1747 04d4 D7020000 		.4byte	0x2d7
 1748 04d8 05       		.uleb128 0x5
 1749 04d9 03       		.byte	0x3
 1750 04da 00000000 		.4byte	level_sensor_enabled
 1751 04de 12       		.uleb128 0x12
 1752 04df 27070000 		.4byte	.LASF82
 1753 04e3 0B       		.byte	0xb
 1754 04e4 0F       		.byte	0xf
 1755 04e5 85030000 		.4byte	0x385
 1756 04e9 05       		.uleb128 0x5
 1757 04ea 03       		.byte	0x3
 1758 04eb 00000000 		.4byte	downstream_level_sensor_inbox
 1759 04ef 12       		.uleb128 0x12
 1760 04f0 B9030000 		.4byte	.LASF83
 1761 04f4 0B       		.byte	0xb
 1762 04f5 11       		.byte	0x11
 1763 04f6 D7020000 		.4byte	0x2d7
 1764 04fa 05       		.uleb128 0x5
 1765 04fb 03       		.byte	0x3
 1766 04fc 00000000 		.4byte	downstream_level_sensor_enabled
 1767 0500 12       		.uleb128 0x12
 1768 0501 F8010000 		.4byte	.LASF84
 1769 0505 0C       		.byte	0xc
 1770 0506 2A       		.byte	0x2a
 1771 0507 B1000000 		.4byte	0xb1
 1772 050b 05       		.uleb128 0x5
 1773 050c 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 49


 1774 050d 00000000 		.4byte	valve_diameter
 1775 0511 0A       		.uleb128 0xa
 1776 0512 CB000000 		.4byte	0xcb
 1777 0516 21050000 		.4byte	0x521
 1778 051a 0B       		.uleb128 0xb
 1779 051b 57010000 		.4byte	0x157
 1780 051f 09       		.byte	0x9
 1781 0520 00       		.byte	0
 1782 0521 12       		.uleb128 0x12
 1783 0522 1E040000 		.4byte	.LASF85
 1784 0526 0C       		.byte	0xc
 1785 0527 2B       		.byte	0x2b
 1786 0528 11050000 		.4byte	0x511
 1787 052c 05       		.uleb128 0x5
 1788 052d 03       		.byte	0x3
 1789 052e 00000000 		.4byte	valve_type
 1790 0532 12       		.uleb128 0x12
 1791 0533 7B050000 		.4byte	.LASF86
 1792 0537 0C       		.byte	0xc
 1793 0538 30       		.byte	0x30
 1794 0539 81000000 		.4byte	0x81
 1795 053d 05       		.uleb128 0x5
 1796 053e 03       		.byte	0x3
 1797 053f 00000000 		.4byte	valve_enabled
 1798 0543 12       		.uleb128 0x12
 1799 0544 D8060000 		.4byte	.LASF87
 1800 0548 0C       		.byte	0xc
 1801 0549 31       		.byte	0x31
 1802 054a 85030000 		.4byte	0x385
 1803 054e 05       		.uleb128 0x5
 1804 054f 03       		.byte	0x3
 1805 0550 00000000 		.4byte	valve_inbox
 1806 0554 12       		.uleb128 0x12
 1807 0555 47000000 		.4byte	.LASF88
 1808 0559 06       		.byte	0x6
 1809 055a 11       		.byte	0x11
 1810 055b D7020000 		.4byte	0x2d7
 1811 055f 05       		.uleb128 0x5
 1812 0560 03       		.byte	0x3
 1813 0561 00000000 		.4byte	buffer_overflow
 1814 0565 12       		.uleb128 0x12
 1815 0566 FB030000 		.4byte	.LASF89
 1816 056a 06       		.byte	0x6
 1817 056b 22       		.byte	0x22
 1818 056c 8D000000 		.4byte	0x8d
 1819 0570 05       		.uleb128 0x5
 1820 0571 03       		.byte	0x3
 1821 0572 00000000 		.4byte	dataPointsInStack
 1822 0576 12       		.uleb128 0x12
 1823 0577 A3060000 		.4byte	.LASF90
 1824 057b 06       		.byte	0x6
 1825 057c 23       		.byte	0x23
 1826 057d 8D000000 		.4byte	0x8d
 1827 0581 05       		.uleb128 0x5
 1828 0582 03       		.byte	0x3
 1829 0583 00000000 		.4byte	dataPointsInStackDesired
 1830 0587 0A       		.uleb128 0xa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 50


 1831 0588 AB010000 		.4byte	0x1ab
 1832 058c 97050000 		.4byte	0x597
 1833 0590 0B       		.uleb128 0xb
 1834 0591 57010000 		.4byte	0x157
 1835 0595 95       		.byte	0x95
 1836 0596 00       		.byte	0
 1837 0597 12       		.uleb128 0x12
 1838 0598 42030000 		.4byte	.LASF91
 1839 059c 06       		.byte	0x6
 1840 059d 24       		.byte	0x24
 1841 059e 87050000 		.4byte	0x587
 1842 05a2 05       		.uleb128 0x5
 1843 05a3 03       		.byte	0x3
 1844 05a4 00000000 		.4byte	data
 1845 05a8 12       		.uleb128 0x12
 1846 05a9 3F010000 		.4byte	.LASF92
 1847 05ad 07       		.byte	0x7
 1848 05ae 20       		.byte	0x20
 1849 05af 81000000 		.4byte	0x81
 1850 05b3 05       		.uleb128 0x5
 1851 05b4 03       		.byte	0x3
 1852 05b5 00000000 		.4byte	modem_state
 1853 05b9 12       		.uleb128 0x12
 1854 05ba A2030000 		.4byte	.LASF93
 1855 05be 07       		.byte	0x7
 1856 05bf 6C       		.byte	0x6c
 1857 05c0 A5000000 		.4byte	0xa5
 1858 05c4 05       		.uleb128 0x5
 1859 05c5 03       		.byte	0x3
 1860 05c6 00000000 		.4byte	modem_start_time_stamp
 1861 05ca 12       		.uleb128 0x12
 1862 05cb 4F030000 		.4byte	.LASF59
 1863 05cf 07       		.byte	0x7
 1864 05d0 6D       		.byte	0x6d
 1865 05d1 E3010000 		.4byte	0x1e3
 1866 05d5 05       		.uleb128 0x5
 1867 05d6 03       		.byte	0x3
 1868 05d7 00000000 		.4byte	modem_info
 1869 05db 12       		.uleb128 0x12
 1870 05dc 77010000 		.4byte	.LASF94
 1871 05e0 07       		.byte	0x7
 1872 05e1 6E       		.byte	0x6e
 1873 05e2 57020000 		.4byte	0x257
 1874 05e6 05       		.uleb128 0x5
 1875 05e7 03       		.byte	0x3
 1876 05e8 00000000 		.4byte	modem_stats
 1877 05ec 12       		.uleb128 0x12
 1878 05ed 8B040000 		.4byte	.LASF95
 1879 05f1 07       		.byte	0x7
 1880 05f2 6F       		.byte	0x6f
 1881 05f3 DE020000 		.4byte	0x2de
 1882 05f7 05       		.uleb128 0x5
 1883 05f8 03       		.byte	0x3
 1884 05f9 00000000 		.4byte	updatable_parameters
 1885 05fd 12       		.uleb128 0x12
 1886 05fe FB020000 		.4byte	.LASF96
 1887 0602 0D       		.byte	0xd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 51


 1888 0603 07       		.byte	0x7
 1889 0604 81000000 		.4byte	0x81
 1890 0608 05       		.uleb128 0x5
 1891 0609 03       		.byte	0x3
 1892 060a 00000000 		.4byte	App_LED_enabled
 1893 060e 12       		.uleb128 0x12
 1894 060f 19070000 		.4byte	.LASF97
 1895 0613 0D       		.byte	0xd
 1896 0614 08       		.byte	0x8
 1897 0615 85030000 		.4byte	0x385
 1898 0619 05       		.uleb128 0x5
 1899 061a 03       		.byte	0x3
 1900 061b 00000000 		.4byte	app_led_inbox
 1901 061f 0A       		.uleb128 0xa
 1902 0620 CB000000 		.4byte	0xcb
 1903 0624 30060000 		.4byte	0x630
 1904 0628 13       		.uleb128 0x13
 1905 0629 57010000 		.4byte	0x157
 1906 062d 0F27     		.2byte	0x270f
 1907 062f 00       		.byte	0
 1908 0630 12       		.uleb128 0x12
 1909 0631 05070000 		.4byte	.LASF98
 1910 0635 08       		.byte	0x8
 1911 0636 1A       		.byte	0x1a
 1912 0637 1F060000 		.4byte	0x61f
 1913 063b 05       		.uleb128 0x5
 1914 063c 03       		.byte	0x3
 1915 063d 00000000 		.4byte	http_request
 1916 0641 12       		.uleb128 0x12
 1917 0642 EE010000 		.4byte	.LASF99
 1918 0646 08       		.byte	0x8
 1919 0647 1B       		.byte	0x1b
 1920 0648 1F060000 		.4byte	0x61f
 1921 064c 05       		.uleb128 0x5
 1922 064d 03       		.byte	0x3
 1923 064e 00000000 		.4byte	http_body
 1924 0652 0A       		.uleb128 0xa
 1925 0653 CB000000 		.4byte	0xcb
 1926 0657 62060000 		.4byte	0x662
 1927 065b 0B       		.uleb128 0xb
 1928 065c 57010000 		.4byte	0x157
 1929 0660 C7       		.byte	0xc7
 1930 0661 00       		.byte	0
 1931 0662 12       		.uleb128 0x12
 1932 0663 F6050000 		.4byte	.LASF100
 1933 0667 08       		.byte	0x8
 1934 0668 1C       		.byte	0x1c
 1935 0669 52060000 		.4byte	0x652
 1936 066d 05       		.uleb128 0x5
 1937 066e 03       		.byte	0x3
 1938 066f 00000000 		.4byte	http_route
 1939 0673 12       		.uleb128 0x12
 1940 0674 6A050000 		.4byte	.LASF101
 1941 0678 08       		.byte	0x8
 1942 0679 43       		.byte	0x43
 1943 067a 59030000 		.4byte	0x359
 1944 067e 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 52


 1945 067f 03       		.byte	0x3
 1946 0680 00000000 		.4byte	system_info
 1947 0684 12       		.uleb128 0x12
 1948 0685 92030000 		.4byte	.LASF102
 1949 0689 08       		.byte	0x8
 1950 068a 55       		.byte	0x55
 1951 068b 95030000 		.4byte	0x395
 1952 068f 05       		.uleb128 0x5
 1953 0690 03       		.byte	0x3
 1954 0691 00000000 		.4byte	system_settings
 1955 0695 12       		.uleb128 0x12
 1956 0696 4B010000 		.4byte	.LASF103
 1957 069a 08       		.byte	0x8
 1958 069b 71       		.byte	0x71
 1959 069c 22030000 		.4byte	0x322
 1960 06a0 05       		.uleb128 0x5
 1961 06a1 03       		.byte	0x3
 1962 06a2 00000000 		.4byte	alarmMeasure
 1963 06a6 12       		.uleb128 0x12
 1964 06a7 29030000 		.4byte	.LASF104
 1965 06ab 08       		.byte	0x8
 1966 06ac 72       		.byte	0x72
 1967 06ad 81000000 		.4byte	0x81
 1968 06b1 05       		.uleb128 0x5
 1969 06b2 03       		.byte	0x3
 1970 06b3 00000000 		.4byte	timeToMeasure
 1971 06b7 12       		.uleb128 0x12
 1972 06b8 F1020000 		.4byte	.LASF105
 1973 06bc 08       		.byte	0x8
 1974 06bd 73       		.byte	0x73
 1975 06be 22030000 		.4byte	0x322
 1976 06c2 05       		.uleb128 0x5
 1977 06c3 03       		.byte	0x3
 1978 06c4 00000000 		.4byte	alarmSync
 1979 06c8 12       		.uleb128 0x12
 1980 06c9 E3010000 		.4byte	.LASF106
 1981 06cd 08       		.byte	0x8
 1982 06ce 74       		.byte	0x74
 1983 06cf 81000000 		.4byte	0x81
 1984 06d3 05       		.uleb128 0x5
 1985 06d4 03       		.byte	0x3
 1986 06d5 00000000 		.4byte	timeToSync
 1987 06d9 12       		.uleb128 0x12
 1988 06da 5C040000 		.4byte	.LASF107
 1989 06de 08       		.byte	0x8
 1990 06df 75       		.byte	0x75
 1991 06e0 81000000 		.4byte	0x81
 1992 06e4 05       		.uleb128 0x5
 1993 06e5 03       		.byte	0x3
 1994 06e6 00000000 		.4byte	timeToSycnRemoteParams
 1995 06ea 14       		.uleb128 0x14
 1996 06eb 68657900 		.ascii	"hey\000"
 1997 06ef 08       		.byte	0x8
 1998 06f0 76       		.byte	0x76
 1999 06f1 81000000 		.4byte	0x81
 2000 06f5 05       		.uleb128 0x5
 2001 06f6 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 53


 2002 06f7 00000000 		.4byte	hey
 2003 06fb 12       		.uleb128 0x12
 2004 06fc 73030000 		.4byte	.LASF108
 2005 0700 08       		.byte	0x8
 2006 0701 7A       		.byte	0x7a
 2007 0702 22030000 		.4byte	0x322
 2008 0706 05       		.uleb128 0x5
 2009 0707 03       		.byte	0x3
 2010 0708 00000000 		.4byte	alarmAppLED
 2011 070c 12       		.uleb128 0x12
 2012 070d 89020000 		.4byte	.LASF109
 2013 0711 08       		.byte	0x8
 2014 0712 7B       		.byte	0x7b
 2015 0713 81000000 		.4byte	0x81
 2016 0717 05       		.uleb128 0x5
 2017 0718 03       		.byte	0x3
 2018 0719 00000000 		.4byte	timeToAppLED
 2019 071d 12       		.uleb128 0x12
 2020 071e 97050000 		.4byte	.LASF110
 2021 0722 08       		.byte	0x8
 2022 0723 7D       		.byte	0x7d
 2023 0724 22030000 		.4byte	0x322
 2024 0728 05       		.uleb128 0x5
 2025 0729 03       		.byte	0x3
 2026 072a 00000000 		.4byte	alarmLevelSensor
 2027 072e 12       		.uleb128 0x12
 2028 072f 65010000 		.4byte	.LASF111
 2029 0733 08       		.byte	0x8
 2030 0734 7E       		.byte	0x7e
 2031 0735 81000000 		.4byte	0x81
 2032 0739 05       		.uleb128 0x5
 2033 073a 03       		.byte	0x3
 2034 073b 00000000 		.4byte	timetoLevelSensor
 2035 073f 12       		.uleb128 0x12
 2036 0740 2A020000 		.4byte	.LASF112
 2037 0744 08       		.byte	0x8
 2038 0745 80       		.byte	0x80
 2039 0746 22030000 		.4byte	0x322
 2040 074a 05       		.uleb128 0x5
 2041 074b 03       		.byte	0x3
 2042 074c 00000000 		.4byte	alarmDownstreamLevelSensor
 2043 0750 12       		.uleb128 0x12
 2044 0751 3A040000 		.4byte	.LASF113
 2045 0755 08       		.byte	0x8
 2046 0756 81       		.byte	0x81
 2047 0757 81000000 		.4byte	0x81
 2048 075b 05       		.uleb128 0x5
 2049 075c 03       		.byte	0x3
 2050 075d 00000000 		.4byte	timetoDownstreamLevelSensor
 2051 0761 12       		.uleb128 0x12
 2052 0762 EB050000 		.4byte	.LASF114
 2053 0766 08       		.byte	0x8
 2054 0767 83       		.byte	0x83
 2055 0768 22030000 		.4byte	0x322
 2056 076c 05       		.uleb128 0x5
 2057 076d 03       		.byte	0x3
 2058 076e 00000000 		.4byte	alarmValve
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 54


 2059 0772 12       		.uleb128 0x12
 2060 0773 B5040000 		.4byte	.LASF115
 2061 0777 08       		.byte	0x8
 2062 0778 84       		.byte	0x84
 2063 0779 81000000 		.4byte	0x81
 2064 077d 05       		.uleb128 0x5
 2065 077e 03       		.byte	0x3
 2066 077f 00000000 		.4byte	timeToValve
 2067 0783 00       		.byte	0
 2068              		.section	.debug_abbrev,"",%progbits
 2069              	.Ldebug_abbrev0:
 2070 0000 01       		.uleb128 0x1
 2071 0001 11       		.uleb128 0x11
 2072 0002 01       		.byte	0x1
 2073 0003 25       		.uleb128 0x25
 2074 0004 0E       		.uleb128 0xe
 2075 0005 13       		.uleb128 0x13
 2076 0006 0B       		.uleb128 0xb
 2077 0007 03       		.uleb128 0x3
 2078 0008 0E       		.uleb128 0xe
 2079 0009 1B       		.uleb128 0x1b
 2080 000a 0E       		.uleb128 0xe
 2081 000b 55       		.uleb128 0x55
 2082 000c 17       		.uleb128 0x17
 2083 000d 11       		.uleb128 0x11
 2084 000e 01       		.uleb128 0x1
 2085 000f 10       		.uleb128 0x10
 2086 0010 17       		.uleb128 0x17
 2087 0011 00       		.byte	0
 2088 0012 00       		.byte	0
 2089 0013 02       		.uleb128 0x2
 2090 0014 24       		.uleb128 0x24
 2091 0015 00       		.byte	0
 2092 0016 0B       		.uleb128 0xb
 2093 0017 0B       		.uleb128 0xb
 2094 0018 3E       		.uleb128 0x3e
 2095 0019 0B       		.uleb128 0xb
 2096 001a 03       		.uleb128 0x3
 2097 001b 0E       		.uleb128 0xe
 2098 001c 00       		.byte	0
 2099 001d 00       		.byte	0
 2100 001e 03       		.uleb128 0x3
 2101 001f 16       		.uleb128 0x16
 2102 0020 00       		.byte	0
 2103 0021 03       		.uleb128 0x3
 2104 0022 0E       		.uleb128 0xe
 2105 0023 3A       		.uleb128 0x3a
 2106 0024 0B       		.uleb128 0xb
 2107 0025 3B       		.uleb128 0x3b
 2108 0026 0B       		.uleb128 0xb
 2109 0027 49       		.uleb128 0x49
 2110 0028 13       		.uleb128 0x13
 2111 0029 00       		.byte	0
 2112 002a 00       		.byte	0
 2113 002b 04       		.uleb128 0x4
 2114 002c 24       		.uleb128 0x24
 2115 002d 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 55


 2116 002e 0B       		.uleb128 0xb
 2117 002f 0B       		.uleb128 0xb
 2118 0030 3E       		.uleb128 0x3e
 2119 0031 0B       		.uleb128 0xb
 2120 0032 03       		.uleb128 0x3
 2121 0033 08       		.uleb128 0x8
 2122 0034 00       		.byte	0
 2123 0035 00       		.byte	0
 2124 0036 05       		.uleb128 0x5
 2125 0037 16       		.uleb128 0x16
 2126 0038 00       		.byte	0
 2127 0039 03       		.uleb128 0x3
 2128 003a 0E       		.uleb128 0xe
 2129 003b 3A       		.uleb128 0x3a
 2130 003c 0B       		.uleb128 0xb
 2131 003d 3B       		.uleb128 0x3b
 2132 003e 05       		.uleb128 0x5
 2133 003f 49       		.uleb128 0x49
 2134 0040 13       		.uleb128 0x13
 2135 0041 00       		.byte	0
 2136 0042 00       		.byte	0
 2137 0043 06       		.uleb128 0x6
 2138 0044 35       		.uleb128 0x35
 2139 0045 00       		.byte	0
 2140 0046 49       		.uleb128 0x49
 2141 0047 13       		.uleb128 0x13
 2142 0048 00       		.byte	0
 2143 0049 00       		.byte	0
 2144 004a 07       		.uleb128 0x7
 2145 004b 13       		.uleb128 0x13
 2146 004c 01       		.byte	0x1
 2147 004d 0B       		.uleb128 0xb
 2148 004e 0B       		.uleb128 0xb
 2149 004f 3A       		.uleb128 0x3a
 2150 0050 0B       		.uleb128 0xb
 2151 0051 3B       		.uleb128 0x3b
 2152 0052 0B       		.uleb128 0xb
 2153 0053 01       		.uleb128 0x1
 2154 0054 13       		.uleb128 0x13
 2155 0055 00       		.byte	0
 2156 0056 00       		.byte	0
 2157 0057 08       		.uleb128 0x8
 2158 0058 0D       		.uleb128 0xd
 2159 0059 00       		.byte	0
 2160 005a 03       		.uleb128 0x3
 2161 005b 08       		.uleb128 0x8
 2162 005c 3A       		.uleb128 0x3a
 2163 005d 0B       		.uleb128 0xb
 2164 005e 3B       		.uleb128 0x3b
 2165 005f 0B       		.uleb128 0xb
 2166 0060 49       		.uleb128 0x49
 2167 0061 13       		.uleb128 0x13
 2168 0062 38       		.uleb128 0x38
 2169 0063 0B       		.uleb128 0xb
 2170 0064 00       		.byte	0
 2171 0065 00       		.byte	0
 2172 0066 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 56


 2173 0067 0D       		.uleb128 0xd
 2174 0068 00       		.byte	0
 2175 0069 03       		.uleb128 0x3
 2176 006a 0E       		.uleb128 0xe
 2177 006b 3A       		.uleb128 0x3a
 2178 006c 0B       		.uleb128 0xb
 2179 006d 3B       		.uleb128 0x3b
 2180 006e 0B       		.uleb128 0xb
 2181 006f 49       		.uleb128 0x49
 2182 0070 13       		.uleb128 0x13
 2183 0071 38       		.uleb128 0x38
 2184 0072 0B       		.uleb128 0xb
 2185 0073 00       		.byte	0
 2186 0074 00       		.byte	0
 2187 0075 0A       		.uleb128 0xa
 2188 0076 01       		.uleb128 0x1
 2189 0077 01       		.byte	0x1
 2190 0078 49       		.uleb128 0x49
 2191 0079 13       		.uleb128 0x13
 2192 007a 01       		.uleb128 0x1
 2193 007b 13       		.uleb128 0x13
 2194 007c 00       		.byte	0
 2195 007d 00       		.byte	0
 2196 007e 0B       		.uleb128 0xb
 2197 007f 21       		.uleb128 0x21
 2198 0080 00       		.byte	0
 2199 0081 49       		.uleb128 0x49
 2200 0082 13       		.uleb128 0x13
 2201 0083 2F       		.uleb128 0x2f
 2202 0084 0B       		.uleb128 0xb
 2203 0085 00       		.byte	0
 2204 0086 00       		.byte	0
 2205 0087 0C       		.uleb128 0xc
 2206 0088 0F       		.uleb128 0xf
 2207 0089 00       		.byte	0
 2208 008a 0B       		.uleb128 0xb
 2209 008b 0B       		.uleb128 0xb
 2210 008c 49       		.uleb128 0x49
 2211 008d 13       		.uleb128 0x13
 2212 008e 00       		.byte	0
 2213 008f 00       		.byte	0
 2214 0090 0D       		.uleb128 0xd
 2215 0091 2E       		.uleb128 0x2e
 2216 0092 00       		.byte	0
 2217 0093 03       		.uleb128 0x3
 2218 0094 0E       		.uleb128 0xe
 2219 0095 3A       		.uleb128 0x3a
 2220 0096 0B       		.uleb128 0xb
 2221 0097 3B       		.uleb128 0x3b
 2222 0098 0B       		.uleb128 0xb
 2223 0099 27       		.uleb128 0x27
 2224 009a 19       		.uleb128 0x19
 2225 009b 11       		.uleb128 0x11
 2226 009c 01       		.uleb128 0x1
 2227 009d 12       		.uleb128 0x12
 2228 009e 06       		.uleb128 0x6
 2229 009f 40       		.uleb128 0x40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 57


 2230 00a0 18       		.uleb128 0x18
 2231 00a1 9642     		.uleb128 0x2116
 2232 00a3 19       		.uleb128 0x19
 2233 00a4 00       		.byte	0
 2234 00a5 00       		.byte	0
 2235 00a6 0E       		.uleb128 0xe
 2236 00a7 2E       		.uleb128 0x2e
 2237 00a8 01       		.byte	0x1
 2238 00a9 3F       		.uleb128 0x3f
 2239 00aa 19       		.uleb128 0x19
 2240 00ab 03       		.uleb128 0x3
 2241 00ac 0E       		.uleb128 0xe
 2242 00ad 3A       		.uleb128 0x3a
 2243 00ae 0B       		.uleb128 0xb
 2244 00af 3B       		.uleb128 0x3b
 2245 00b0 05       		.uleb128 0x5
 2246 00b1 27       		.uleb128 0x27
 2247 00b2 19       		.uleb128 0x19
 2248 00b3 11       		.uleb128 0x11
 2249 00b4 01       		.uleb128 0x1
 2250 00b5 12       		.uleb128 0x12
 2251 00b6 06       		.uleb128 0x6
 2252 00b7 40       		.uleb128 0x40
 2253 00b8 18       		.uleb128 0x18
 2254 00b9 9642     		.uleb128 0x2116
 2255 00bb 19       		.uleb128 0x19
 2256 00bc 01       		.uleb128 0x1
 2257 00bd 13       		.uleb128 0x13
 2258 00be 00       		.byte	0
 2259 00bf 00       		.byte	0
 2260 00c0 0F       		.uleb128 0xf
 2261 00c1 34       		.uleb128 0x34
 2262 00c2 00       		.byte	0
 2263 00c3 03       		.uleb128 0x3
 2264 00c4 0E       		.uleb128 0xe
 2265 00c5 3A       		.uleb128 0x3a
 2266 00c6 0B       		.uleb128 0xb
 2267 00c7 3B       		.uleb128 0x3b
 2268 00c8 05       		.uleb128 0x5
 2269 00c9 49       		.uleb128 0x49
 2270 00ca 13       		.uleb128 0x13
 2271 00cb 02       		.uleb128 0x2
 2272 00cc 18       		.uleb128 0x18
 2273 00cd 00       		.byte	0
 2274 00ce 00       		.byte	0
 2275 00cf 10       		.uleb128 0x10
 2276 00d0 34       		.uleb128 0x34
 2277 00d1 00       		.byte	0
 2278 00d2 03       		.uleb128 0x3
 2279 00d3 0E       		.uleb128 0xe
 2280 00d4 3A       		.uleb128 0x3a
 2281 00d5 0B       		.uleb128 0xb
 2282 00d6 3B       		.uleb128 0x3b
 2283 00d7 05       		.uleb128 0x5
 2284 00d8 49       		.uleb128 0x49
 2285 00d9 13       		.uleb128 0x13
 2286 00da 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 58


 2287 00db 19       		.uleb128 0x19
 2288 00dc 3C       		.uleb128 0x3c
 2289 00dd 19       		.uleb128 0x19
 2290 00de 00       		.byte	0
 2291 00df 00       		.byte	0
 2292 00e0 11       		.uleb128 0x11
 2293 00e1 26       		.uleb128 0x26
 2294 00e2 00       		.byte	0
 2295 00e3 49       		.uleb128 0x49
 2296 00e4 13       		.uleb128 0x13
 2297 00e5 00       		.byte	0
 2298 00e6 00       		.byte	0
 2299 00e7 12       		.uleb128 0x12
 2300 00e8 34       		.uleb128 0x34
 2301 00e9 00       		.byte	0
 2302 00ea 03       		.uleb128 0x3
 2303 00eb 0E       		.uleb128 0xe
 2304 00ec 3A       		.uleb128 0x3a
 2305 00ed 0B       		.uleb128 0xb
 2306 00ee 3B       		.uleb128 0x3b
 2307 00ef 0B       		.uleb128 0xb
 2308 00f0 49       		.uleb128 0x49
 2309 00f1 13       		.uleb128 0x13
 2310 00f2 3F       		.uleb128 0x3f
 2311 00f3 19       		.uleb128 0x19
 2312 00f4 02       		.uleb128 0x2
 2313 00f5 18       		.uleb128 0x18
 2314 00f6 00       		.byte	0
 2315 00f7 00       		.byte	0
 2316 00f8 13       		.uleb128 0x13
 2317 00f9 21       		.uleb128 0x21
 2318 00fa 00       		.byte	0
 2319 00fb 49       		.uleb128 0x49
 2320 00fc 13       		.uleb128 0x13
 2321 00fd 2F       		.uleb128 0x2f
 2322 00fe 05       		.uleb128 0x5
 2323 00ff 00       		.byte	0
 2324 0100 00       		.byte	0
 2325 0101 14       		.uleb128 0x14
 2326 0102 34       		.uleb128 0x34
 2327 0103 00       		.byte	0
 2328 0104 03       		.uleb128 0x3
 2329 0105 08       		.uleb128 0x8
 2330 0106 3A       		.uleb128 0x3a
 2331 0107 0B       		.uleb128 0xb
 2332 0108 3B       		.uleb128 0x3b
 2333 0109 0B       		.uleb128 0xb
 2334 010a 49       		.uleb128 0x49
 2335 010b 13       		.uleb128 0x13
 2336 010c 3F       		.uleb128 0x3f
 2337 010d 19       		.uleb128 0x19
 2338 010e 02       		.uleb128 0x2
 2339 010f 18       		.uleb128 0x18
 2340 0110 00       		.byte	0
 2341 0111 00       		.byte	0
 2342 0112 00       		.byte	0
 2343              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 59


 2344 0000 54000000 		.4byte	0x54
 2345 0004 0200     		.2byte	0x2
 2346 0006 00000000 		.4byte	.Ldebug_info0
 2347 000a 04       		.byte	0x4
 2348 000b 00       		.byte	0
 2349 000c 0000     		.2byte	0
 2350 000e 0000     		.2byte	0
 2351 0010 00000000 		.4byte	.LFB64
 2352 0014 0E000000 		.4byte	.LFE64-.LFB64
 2353 0018 00000000 		.4byte	.LFB65
 2354 001c 0E000000 		.4byte	.LFE65-.LFB65
 2355 0020 00000000 		.4byte	.LFB66
 2356 0024 0E000000 		.4byte	.LFE66-.LFB66
 2357 0028 00000000 		.4byte	.LFB67
 2358 002c 0E000000 		.4byte	.LFE67-.LFB67
 2359 0030 00000000 		.4byte	.LFB68
 2360 0034 0E000000 		.4byte	.LFE68-.LFB68
 2361 0038 00000000 		.4byte	.LFB69
 2362 003c 0E000000 		.4byte	.LFE69-.LFB69
 2363 0040 00000000 		.4byte	.LFB70
 2364 0044 0E000000 		.4byte	.LFE70-.LFB70
 2365 0048 00000000 		.4byte	.LFB71
 2366 004c 18060000 		.4byte	.LFE71-.LFB71
 2367 0050 00000000 		.4byte	0
 2368 0054 00000000 		.4byte	0
 2369              		.section	.debug_ranges,"",%progbits
 2370              	.Ldebug_ranges0:
 2371 0000 00000000 		.4byte	.LFB64
 2372 0004 0E000000 		.4byte	.LFE64
 2373 0008 00000000 		.4byte	.LFB65
 2374 000c 0E000000 		.4byte	.LFE65
 2375 0010 00000000 		.4byte	.LFB66
 2376 0014 0E000000 		.4byte	.LFE66
 2377 0018 00000000 		.4byte	.LFB67
 2378 001c 0E000000 		.4byte	.LFE67
 2379 0020 00000000 		.4byte	.LFB68
 2380 0024 0E000000 		.4byte	.LFE68
 2381 0028 00000000 		.4byte	.LFB69
 2382 002c 0E000000 		.4byte	.LFE69
 2383 0030 00000000 		.4byte	.LFB70
 2384 0034 0E000000 		.4byte	.LFE70
 2385 0038 00000000 		.4byte	.LFB71
 2386 003c 18060000 		.4byte	.LFE71
 2387 0040 00000000 		.4byte	0
 2388 0044 00000000 		.4byte	0
 2389              		.section	.debug_line,"",%progbits
 2390              	.Ldebug_line0:
 2391 0000 31030000 		.section	.debug_str,"MS",%progbits,1
 2391      0200D001 
 2391      00000201 
 2391      FB0E0D00 
 2391      01010101 
 2392              	.LASF119:
 2393 0000 5254435F 		.ascii	"RTC_ISR\000"
 2393      49535200 
 2394              	.LASF12:
 2395 0008 75696E74 		.ascii	"uint16\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 60


 2395      313600
 2396              	.LASF118:
 2397 000f 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2397      73657273 
 2397      5C64616E 
 2397      747A5C44 
 2397      6F63756D 
 2398 003c 72694F53 		.ascii	"riOS.cydsn\000"
 2398      2E637964 
 2398      736E00
 2399              	.LASF88:
 2400 0047 62756666 		.ascii	"buffer_overflow\000"
 2400      65725F6F 
 2400      76657266 
 2400      6C6F7700 
 2401              	.LASF65:
 2402 0057 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2402      45766572 
 2402      79536563 
 2402      6F6E6448 
 2402      616E646C 
 2403              	.LASF0:
 2404 006e 7369676E 		.ascii	"signed char\000"
 2404      65642063 
 2404      68617200 
 2405              	.LASF71:
 2406 007a 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2406      45766572 
 2406      79596561 
 2406      7248616E 
 2406      646C6572 
 2407              	.LASF116:
 2408 008f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2408      43313120 
 2408      352E342E 
 2408      31203230 
 2408      31363036 
 2409 00c2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2409      20726576 
 2409      6973696F 
 2409      6E203233 
 2409      37373135 
 2410 00f5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2410      66756E63 
 2410      74696F6E 
 2410      2D736563 
 2410      74696F6E 
 2411              	.LASF23:
 2412 011d 4D6F6E74 		.ascii	"Month\000"
 2412      6800
 2413              	.LASF7:
 2414 0123 6C6F6E67 		.ascii	"long long unsigned int\000"
 2414      206C6F6E 
 2414      6720756E 
 2414      7369676E 
 2414      65642069 
 2415              	.LASF19:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 61


 2416 013a 486F7572 		.ascii	"Hour\000"
 2416      00
 2417              	.LASF92:
 2418 013f 6D6F6465 		.ascii	"modem_state\000"
 2418      6D5F7374 
 2418      61746500 
 2419              	.LASF103:
 2420 014b 616C6172 		.ascii	"alarmMeasure\000"
 2420      6D4D6561 
 2420      73757265 
 2420      00
 2421              	.LASF79:
 2422 0158 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2422      52784275 
 2422      66666572 
 2422      00
 2423              	.LASF111:
 2424 0165 74696D65 		.ascii	"timetoLevelSensor\000"
 2424      746F4C65 
 2424      76656C53 
 2424      656E736F 
 2424      7200
 2425              	.LASF94:
 2426 0177 6D6F6465 		.ascii	"modem_stats\000"
 2426      6D5F7374 
 2426      61747300 
 2427              	.LASF117:
 2428 0183 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2428      72617465 
 2428      645F536F 
 2428      75726365 
 2428      5C50536F 
 2429              	.LASF6:
 2430 01a4 6C6F6E67 		.ascii	"long long int\000"
 2430      206C6F6E 
 2430      6720696E 
 2430      7400
 2431              	.LASF37:
 2432 01b2 65636E6F 		.ascii	"ecno\000"
 2432      00
 2433              	.LASF68:
 2434 01b7 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2434      45766572 
 2434      79446179 
 2434      48616E64 
 2434      6C657200 
 2435              	.LASF40:
 2436 01cb 74696D65 		.ascii	"time_to_network_connect\000"
 2436      5F746F5F 
 2436      6E657477 
 2436      6F726B5F 
 2436      636F6E6E 
 2437              	.LASF106:
 2438 01e3 74696D65 		.ascii	"timeToSync\000"
 2438      546F5379 
 2438      6E6300
 2439              	.LASF99:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 62


 2440 01ee 68747470 		.ascii	"http_body\000"
 2440      5F626F64 
 2440      7900
 2441              	.LASF84:
 2442 01f8 76616C76 		.ascii	"valve_diameter\000"
 2442      655F6469 
 2442      616D6574 
 2442      657200
 2443              	.LASF70:
 2444 0207 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2444      45766572 
 2444      794D6F6E 
 2444      74684861 
 2444      6E646C65 
 2445              	.LASF34:
 2446 021d 6D6F6465 		.ascii	"modem_info_t\000"
 2446      6D5F696E 
 2446      666F5F74 
 2446      00
 2447              	.LASF112:
 2448 022a 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 2448      6D446F77 
 2448      6E737472 
 2448      65616D4C 
 2448      6576656C 
 2449              	.LASF35:
 2450 0245 72786C65 		.ascii	"rxlev\000"
 2450      7600
 2451              	.LASF4:
 2452 024b 6C6F6E67 		.ascii	"long int\000"
 2452      20696E74 
 2452      00
 2453              	.LASF55:
 2454 0254 63757272 		.ascii	"currentCountDownValue\000"
 2454      656E7443 
 2454      6F756E74 
 2454      446F776E 
 2454      56616C75 
 2455              	.LASF58:
 2456 026a 616C6172 		.ascii	"alarm\000"
 2456      6D00
 2457              	.LASF11:
 2458 0270 75696E74 		.ascii	"uint8\000"
 2458      3800
 2459              	.LASF77:
 2460 0276 5254435F 		.ascii	"RTC_statusDateTime\000"
 2460      73746174 
 2460      75734461 
 2460      74655469 
 2460      6D6500
 2461              	.LASF109:
 2462 0289 74696D65 		.ascii	"timeToAppLED\000"
 2462      546F4170 
 2462      704C4544 
 2462      00
 2463              	.LASF14:
 2464 0296 696E7433 		.ascii	"int32\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 63


 2464      3200
 2465              	.LASF43:
 2466 029c 6E6F6465 		.ascii	"node_type\000"
 2466      5F747970 
 2466      6500
 2467              	.LASF60:
 2468 02a6 63686970 		.ascii	"chip_uniqueId\000"
 2468      5F756E69 
 2468      71756549 
 2468      6400
 2469              	.LASF32:
 2470 02b4 6D6F6465 		.ascii	"model_id\000"
 2470      6C5F6964 
 2470      00
 2471              	.LASF54:
 2472 02bd 636F756E 		.ascii	"countDownValue\000"
 2472      74446F77 
 2472      6E56616C 
 2472      756500
 2473              	.LASF47:
 2474 02cc 64656275 		.ascii	"debug_level\000"
 2474      675F6C65 
 2474      76656C00 
 2475              	.LASF75:
 2476 02d8 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2476      616C6172 
 2476      6D437572 
 2476      53746174 
 2476      757300
 2477              	.LASF28:
 2478 02eb 76616C75 		.ascii	"value\000"
 2478      6500
 2479              	.LASF105:
 2480 02f1 616C6172 		.ascii	"alarmSync\000"
 2480      6D53796E 
 2480      6300
 2481              	.LASF96:
 2482 02fb 4170705F 		.ascii	"App_LED_enabled\000"
 2482      4C45445F 
 2482      656E6162 
 2482      6C656400 
 2483              	.LASF30:
 2484 030b 6B65795F 		.ascii	"key_value_t\000"
 2484      76616C75 
 2484      655F7400 
 2485              	.LASF5:
 2486 0317 6C6F6E67 		.ascii	"long unsigned int\000"
 2486      20756E73 
 2486      69676E65 
 2486      6420696E 
 2486      7400
 2487              	.LASF104:
 2488 0329 74696D65 		.ascii	"timeToMeasure\000"
 2488      546F4D65 
 2488      61737572 
 2488      6500
 2489              	.LASF21:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 64


 2490 0337 4461794F 		.ascii	"DayOfMonth\000"
 2490      664D6F6E 
 2490      746800
 2491              	.LASF91:
 2492 0342 64617461 		.ascii	"data\000"
 2492      00
 2493              	.LASF63:
 2494 0347 65705F70 		.ascii	"ep_port\000"
 2494      6F727400 
 2495              	.LASF59:
 2496 034f 6D6F6465 		.ascii	"modem_info\000"
 2496      6D5F696E 
 2496      666F00
 2497              	.LASF62:
 2498 035a 65705F68 		.ascii	"ep_host\000"
 2498      6F737400 
 2499              	.LASF74:
 2500 0362 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2500      616C6172 
 2500      6D436667 
 2500      4D61736B 
 2500      00
 2501              	.LASF108:
 2502 0373 616C6172 		.ascii	"alarmAppLED\000"
 2502      6D417070 
 2502      4C454400 
 2503              	.LASF41:
 2504 037f 74696D65 		.ascii	"time_to_acquire_ip\000"
 2504      5F746F5F 
 2504      61637175 
 2504      6972655F 
 2504      697000
 2505              	.LASF102:
 2506 0392 73797374 		.ascii	"system_settings\000"
 2506      656D5F73 
 2506      65747469 
 2506      6E677300 
 2507              	.LASF93:
 2508 03a2 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2508      6D5F7374 
 2508      6172745F 
 2508      74696D65 
 2508      5F737461 
 2509              	.LASF83:
 2510 03b9 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 2510      73747265 
 2510      616D5F6C 
 2510      6576656C 
 2510      5F73656E 
 2511              	.LASF61:
 2512 03d9 7379735F 		.ascii	"sys_info_t\000"
 2512      696E666F 
 2512      5F7400
 2513              	.LASF53:
 2514 03e4 75706461 		.ascii	"updatable_parameters_t\000"
 2514      7461626C 
 2514      655F7061 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 65


 2514      72616D65 
 2514      74657273 
 2515              	.LASF89:
 2516 03fb 64617461 		.ascii	"dataPointsInStack\000"
 2516      506F696E 
 2516      7473496E 
 2516      53746163 
 2516      6B00
 2517              	.LASF78:
 2518 040d 5254435F 		.ascii	"RTC_daysInMonths\000"
 2518      64617973 
 2518      496E4D6F 
 2518      6E746873 
 2518      00
 2519              	.LASF85:
 2520 041e 76616C76 		.ascii	"valve_type\000"
 2520      655F7479 
 2520      706500
 2521              	.LASF15:
 2522 0429 666C6F61 		.ascii	"float32\000"
 2522      74333200 
 2523              	.LASF27:
 2524 0431 73697A65 		.ascii	"sizetype\000"
 2524      74797065 
 2524      00
 2525              	.LASF113:
 2526 043a 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 2526      746F446F 
 2526      776E7374 
 2526      7265616D 
 2526      4C657665 
 2527              	.LASF13:
 2528 0456 696E7431 		.ascii	"int16\000"
 2528      3600
 2529              	.LASF107:
 2530 045c 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2530      546F5379 
 2530      636E5265 
 2530      6D6F7465 
 2530      50617261 
 2531              	.LASF29:
 2532 0473 74696D65 		.ascii	"timeStamp\000"
 2532      5374616D 
 2532      7000
 2533              	.LASF25:
 2534 047d 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2534      54494D45 
 2534      5F444154 
 2534      4500
 2535              	.LASF95:
 2536 048b 75706461 		.ascii	"updatable_parameters\000"
 2536      7461626C 
 2536      655F7061 
 2536      72616D65 
 2536      74657273 
 2537              	.LASF69:
 2538 04a0 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 66


 2538      45766572 
 2538      79576565 
 2538      6B48616E 
 2538      646C6572 
 2539              	.LASF115:
 2540 04b5 74696D65 		.ascii	"timeToValve\000"
 2540      546F5661 
 2540      6C766500 
 2541              	.LASF16:
 2542 04c1 666C6F61 		.ascii	"float\000"
 2542      7400
 2543              	.LASF24:
 2544 04c7 59656172 		.ascii	"Year\000"
 2544      00
 2545              	.LASF57:
 2546 04cc 636F756E 		.ascii	"countDownResetCondition\000"
 2546      74446F77 
 2546      6E526573 
 2546      6574436F 
 2546      6E646974 
 2547              	.LASF52:
 2548 04e4 5F426F6F 		.ascii	"_Bool\000"
 2548      6C00
 2549              	.LASF10:
 2550 04ea 696E7433 		.ascii	"int32_t\000"
 2550      325F7400 
 2551              	.LASF1:
 2552 04f2 756E7369 		.ascii	"unsigned char\000"
 2552      676E6564 
 2552      20636861 
 2552      7200
 2553              	.LASF73:
 2554 0500 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2554      63757272 
 2554      656E7454 
 2554      696D6544 
 2554      61746500 
 2555              	.LASF67:
 2556 0514 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2556      45766572 
 2556      79486F75 
 2556      7248616E 
 2556      646C6572 
 2557              	.LASF39:
 2558 0529 72737270 		.ascii	"rsrp\000"
 2558      00
 2559              	.LASF38:
 2560 052e 72737271 		.ascii	"rsrq\000"
 2560      00
 2561              	.LASF76:
 2562 0533 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2562      696E7465 
 2562      7276616C 
 2562      4366674D 
 2562      61736B00 
 2563              	.LASF2:
 2564 0547 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 67


 2564      7420696E 
 2564      7400
 2565              	.LASF46:
 2566 0551 73796E63 		.ascii	"sync_time\000"
 2566      5F74696D 
 2566      6500
 2567              	.LASF36:
 2568 055b 72736370 		.ascii	"rscp\000"
 2568      00
 2569              	.LASF20:
 2570 0560 4461794F 		.ascii	"DayOfWeek\000"
 2570      66576565 
 2570      6B00
 2571              	.LASF101:
 2572 056a 73797374 		.ascii	"system_info\000"
 2572      656D5F69 
 2572      6E666F00 
 2573              	.LASF33:
 2574 0576 696D6569 		.ascii	"imei\000"
 2574      00
 2575              	.LASF86:
 2576 057b 76616C76 		.ascii	"valve_enabled\000"
 2576      655F656E 
 2576      61626C65 
 2576      6400
 2577              	.LASF42:
 2578 0589 6D6F6465 		.ascii	"modem_stats_t\000"
 2578      6D5F7374 
 2578      6174735F 
 2578      7400
 2579              	.LASF110:
 2580 0597 616C6172 		.ascii	"alarmLevelSensor\000"
 2580      6D4C6576 
 2580      656C5365 
 2580      6E736F72 
 2580      00
 2581              	.LASF49:
 2582 05a8 4C657665 		.ascii	"Level_Sensor_freq\000"
 2582      6C5F5365 
 2582      6E736F72 
 2582      5F667265 
 2582      7100
 2583              	.LASF80:
 2584 05ba 6C657665 		.ascii	"level_sensor_inbox\000"
 2584      6C5F7365 
 2584      6E736F72 
 2584      5F696E62 
 2584      6F7800
 2585              	.LASF26:
 2586 05cd 6C6F6E67 		.ascii	"long double\000"
 2586      20646F75 
 2586      626C6500 
 2587              	.LASF18:
 2588 05d9 63686172 		.ascii	"char\000"
 2588      00
 2589              	.LASF8:
 2590 05de 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 68


 2590      676E6564 
 2590      20696E74 
 2590      00
 2591              	.LASF114:
 2592 05eb 616C6172 		.ascii	"alarmValve\000"
 2592      6D56616C 
 2592      766500
 2593              	.LASF100:
 2594 05f6 68747470 		.ascii	"http_route\000"
 2594      5F726F75 
 2594      746500
 2595              	.LASF72:
 2596 0601 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2596      616C6172 
 2596      6D436667 
 2596      54696D65 
 2596      44617465 
 2597              	.LASF9:
 2598 0616 5F5F696E 		.ascii	"__int32_t\000"
 2598      7433325F 
 2598      7400
 2599              	.LASF45:
 2600 0620 6D656173 		.ascii	"measure_time\000"
 2600      7572655F 
 2600      74696D65 
 2600      00
 2601              	.LASF3:
 2602 062d 73686F72 		.ascii	"short unsigned int\000"
 2602      7420756E 
 2602      7369676E 
 2602      65642069 
 2602      6E7400
 2603              	.LASF31:
 2604 0640 73696D5F 		.ascii	"sim_id\000"
 2604      696400
 2605              	.LASF50:
 2606 0647 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 2606      73747265 
 2606      616D5F4C 
 2606      6576656C 
 2606      5F53656E 
 2607              	.LASF66:
 2608 0664 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2608      45766572 
 2608      794D696E 
 2608      75746548 
 2608      616E646C 
 2609              	.LASF120:
 2610 067b 5254435F 		.ascii	"RTC_tmp\000"
 2610      746D7000 
 2611              	.LASF51:
 2612 0683 76616C76 		.ascii	"valve_freq\000"
 2612      655F6672 
 2612      657100
 2613              	.LASF81:
 2614 068e 6C657665 		.ascii	"level_sensor_enabled\000"
 2614      6C5F7365 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc2Fhrne.s 			page 69


 2614      6E736F72 
 2614      5F656E61 
 2614      626C6564 
 2615              	.LASF90:
 2616 06a3 64617461 		.ascii	"dataPointsInStackDesired\000"
 2616      506F696E 
 2616      7473496E 
 2616      53746163 
 2616      6B446573 
 2617              	.LASF48:
 2618 06bc 4170705F 		.ascii	"App_LED_freq\000"
 2618      4C45445F 
 2618      66726571 
 2618      00
 2619              	.LASF64:
 2620 06c9 7379735F 		.ascii	"sys_settings_t\000"
 2620      73657474 
 2620      696E6773 
 2620      5F7400
 2621              	.LASF87:
 2622 06d8 76616C76 		.ascii	"valve_inbox\000"
 2622      655F696E 
 2622      626F7800 
 2623              	.LASF56:
 2624 06e4 636F756E 		.ascii	"countDownType\000"
 2624      74446F77 
 2624      6E547970 
 2624      6500
 2625              	.LASF44:
 2626 06f2 73696D5F 		.ascii	"sim_type\000"
 2626      74797065 
 2626      00
 2627              	.LASF22:
 2628 06fb 4461794F 		.ascii	"DayOfYear\000"
 2628      66596561 
 2628      7200
 2629              	.LASF98:
 2630 0705 68747470 		.ascii	"http_request\000"
 2630      5F726571 
 2630      75657374 
 2630      00
 2631              	.LASF17:
 2632 0712 646F7562 		.ascii	"double\000"
 2632      6C6500
 2633              	.LASF97:
 2634 0719 6170705F 		.ascii	"app_led_inbox\000"
 2634      6C65645F 
 2634      696E626F 
 2634      7800
 2635              	.LASF82:
 2636 0727 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 2636      73747265 
 2636      616D5F6C 
 2636      6576656C 
 2636      5F73656E 
 2637              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
