ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	buffer_overflow,1,1
  22              		.comm	dataPointsInStack,2,2
  23              		.comm	dataPointsInStackDesired,2,2
  24              		.comm	data,6600,4
  25              		.comm	modem_state,1,1
  26              		.comm	modem_start_time_stamp,4,4
  27              		.comm	modem_info,60,4
  28              		.comm	modem_stats,32,4
  29              		.comm	updatable_parameters,7,4
  30              		.syntax unified
  31              		.global _printf_float
  32              		.thumb
  33              		.syntax unified
  34              		.comm	App_LED_enabled,1,1
  35              		.comm	app_led_inbox,100,4
  36              		.comm	http_request,10000,4
  37              		.comm	http_body,10000,4
  38              		.comm	http_route,200,4
  39              		.comm	system_info,28,4
  40              		.comm	system_settings,104,4
  41              		.comm	alarmMeasure,6,4
  42              		.comm	timeToMeasure,1,1
  43              		.comm	alarmSync,6,4
  44              		.comm	timeToSync,1,1
  45              		.comm	timeToSycnRemoteParams,1,1
  46              		.comm	hey,1,1
  47              		.comm	alarmAppLED,6,4
  48              		.comm	timeToAppLED,1,1
  49              		.comm	alarmLevelSensor,6,4
  50              		.comm	timetoLevelSensor,1,1
  51              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  52              		.align	2
  53              		.thumb
  54              		.thumb_func
  55              		.type	RTC_EverySecondHandler, %function
  56              	RTC_EverySecondHandler:
  57              	.LFB64:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 2


  58              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  59              		.loc 1 55 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 3


  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  69              		.loc 1 58 0
  70 0004 0020     		movs	r0, #0
  71 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  72              		.loc 1 64 0
  73 000a 00BF     		nop
  74 000c 80BD     		pop	{r7, pc}
  75              		.cfi_endproc
  76              	.LFE64:
  77              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  78 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  79              		.align	2
  80              		.thumb
  81              		.thumb_func
  82              		.type	RTC_EveryMinuteHandler, %function
  83              	RTC_EveryMinuteHandler:
  84              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  85              		.loc 1 82 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 4


  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0002 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
  95              		.loc 1 85 0
  96 0004 0120     		movs	r0, #1
  97 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
  98              		.loc 1 91 0
  99 000a 00BF     		nop
 100 000c 80BD     		pop	{r7, pc}
 101              		.cfi_endproc
 102              	.LFE65:
 103              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
 104 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
 105              		.align	2
 106              		.thumb
 107              		.thumb_func
 108              		.type	RTC_EveryHourHandler, %function
 109              	RTC_EveryHourHandler:
 110              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 111              		.loc 1 109 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 1, uses_anonymous_args = 0
 115 0000 80B5     		push	{r7, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 5


 120              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 121              		.loc 1 112 0
 122 0004 0220     		movs	r0, #2
 123 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 124              		.loc 1 118 0
 125 000a 00BF     		nop
 126 000c 80BD     		pop	{r7, pc}
 127              		.cfi_endproc
 128              	.LFE66:
 129              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 130 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 131              		.align	2
 132              		.thumb
 133              		.thumb_func
 134              		.type	RTC_EveryDayHandler, %function
 135              	RTC_EveryDayHandler:
 136              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 137              		.loc 1 136 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141 0000 80B5     		push	{r7, lr}
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 7, -8
 144              		.cfi_offset 14, -4
 145 0002 00AF     		add	r7, sp, #0
 146              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 6


 147              		.loc 1 139 0
 148 0004 0320     		movs	r0, #3
 149 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
 145:Generated_Source\PSoC5/RTC_INT.c **** }
 150              		.loc 1 145 0
 151 000a 00BF     		nop
 152 000c 80BD     		pop	{r7, pc}
 153              		.cfi_endproc
 154              	.LFE67:
 155              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 156 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 157              		.align	2
 158              		.thumb
 159              		.thumb_func
 160              		.type	RTC_EveryWeekHandler, %function
 161              	RTC_EveryWeekHandler:
 162              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 163              		.loc 1 163 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 80B5     		push	{r7, lr}
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 00AF     		add	r7, sp, #0
 172              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 173              		.loc 1 166 0
 174 0004 0420     		movs	r0, #4
 175 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 7


 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 176              		.loc 1 172 0
 177 000a 00BF     		nop
 178 000c 80BD     		pop	{r7, pc}
 179              		.cfi_endproc
 180              	.LFE68:
 181              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 182 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 183              		.align	2
 184              		.thumb
 185              		.thumb_func
 186              		.type	RTC_EveryMonthHandler, %function
 187              	RTC_EveryMonthHandler:
 188              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 189              		.loc 1 190 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 199              		.loc 1 193 0
 200 0004 0520     		movs	r0, #5
 201 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 8


 199:Generated_Source\PSoC5/RTC_INT.c **** }
 202              		.loc 1 199 0
 203 000a 00BF     		nop
 204 000c 80BD     		pop	{r7, pc}
 205              		.cfi_endproc
 206              	.LFE69:
 207              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 208 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
 209              		.align	2
 210              		.thumb
 211              		.thumb_func
 212              		.type	RTC_EveryYearHandler, %function
 213              	RTC_EveryYearHandler:
 214              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 215              		.loc 1 217 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219 0000 80B5     		push	{r7, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 225              		.loc 1 220 0
 226 0004 0620     		movs	r0, #6
 227 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 228              		.loc 1 226 0
 229 000a 00BF     		nop
 230 000c 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 9


 231              		.cfi_endproc
 232              	.LFE70:
 233              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 234 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 235              		.align	2
 236              		.global	RTC_ISR
 237              		.thumb
 238              		.thumb_func
 239              		.type	RTC_ISR, %function
 240              	RTC_ISR:
 241              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 242              		.loc 1 268 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 8
 245              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 10


 246 0000 80B5     		push	{r7, lr}
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 82B0     		sub	sp, sp, #8
 251              		.cfi_def_cfa_offset 16
 252 0004 00AF     		add	r7, sp, #0
 253              		.cfi_def_cfa_register 7
 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 254              		.loc 1 276 0
 255 0006 0420     		movs	r0, #4
 256 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 257              		.loc 1 279 0
 258 000c 9E4B     		ldr	r3, .L48
 259 000e 1B78     		ldrb	r3, [r3]
 260 0010 DBB2     		uxtb	r3, r3
 261 0012 0133     		adds	r3, r3, #1
 262 0014 DAB2     		uxtb	r2, r3
 263 0016 9C4B     		ldr	r3, .L48
 264 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 265              		.loc 1 282 0
 266 001a 9B4B     		ldr	r3, .L48
 267 001c 1B78     		ldrb	r3, [r3]
 268 001e DBB2     		uxtb	r3, r3
 269 0020 3B2B     		cmp	r3, #59
 270 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 271              		.loc 1 285 0
 272 0026 984B     		ldr	r3, .L48
 273 0028 5B78     		ldrb	r3, [r3, #1]
 274 002a DBB2     		uxtb	r3, r3
 275 002c 0133     		adds	r3, r3, #1
 276 002e DAB2     		uxtb	r2, r3
 277 0030 954B     		ldr	r3, .L48
 278 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 279              		.loc 1 288 0
 280 0034 944B     		ldr	r3, .L48
 281 0036 0022     		movs	r2, #0
 282 0038 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 11


 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 283              		.loc 1 290 0
 284 003a 934B     		ldr	r3, .L48
 285 003c 5B78     		ldrb	r3, [r3, #1]
 286 003e DBB2     		uxtb	r3, r3
 287 0040 3B2B     		cmp	r3, #59
 288 0042 40F24682 		bls	.L10
 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 289              		.loc 1 293 0
 290 0046 904B     		ldr	r3, .L48
 291 0048 9B78     		ldrb	r3, [r3, #2]
 292 004a DBB2     		uxtb	r3, r3
 293 004c 0133     		adds	r3, r3, #1
 294 004e DAB2     		uxtb	r2, r3
 295 0050 8D4B     		ldr	r3, .L48
 296 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 297              		.loc 1 296 0
 298 0054 8C4B     		ldr	r3, .L48
 299 0056 0022     		movs	r2, #0
 300 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 301              		.loc 1 299 0
 302 005a 8B4B     		ldr	r3, .L48
 303 005c 9B78     		ldrb	r3, [r3, #2]
 304 005e DBB2     		uxtb	r3, r3
 305 0060 172B     		cmp	r3, #23
 306 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 307              		.loc 1 302 0
 308 0066 884B     		ldr	r3, .L48
 309 0068 1B79     		ldrb	r3, [r3, #4]
 310 006a DBB2     		uxtb	r3, r3
 311 006c 0133     		adds	r3, r3, #1
 312 006e DAB2     		uxtb	r2, r3
 313 0070 854B     		ldr	r3, .L48
 314 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 315              		.loc 1 305 0
 316 0074 844B     		ldr	r3, .L48
 317 0076 0022     		movs	r2, #0
 318 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 319              		.loc 1 308 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 12


 320 007a 834B     		ldr	r3, .L48
 321 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 322 007e 9BB2     		uxth	r3, r3
 323 0080 0133     		adds	r3, r3, #1
 324 0082 9AB2     		uxth	r2, r3
 325 0084 804B     		ldr	r3, .L48
 326 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 327              		.loc 1 311 0
 328 0088 7F4B     		ldr	r3, .L48
 329 008a DB78     		ldrb	r3, [r3, #3]
 330 008c DBB2     		uxtb	r3, r3
 331 008e 0133     		adds	r3, r3, #1
 332 0090 DAB2     		uxtb	r2, r3
 333 0092 7D4B     		ldr	r3, .L48
 334 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 335              		.loc 1 314 0
 336 0096 7C4B     		ldr	r3, .L48
 337 0098 DB78     		ldrb	r3, [r3, #3]
 338 009a DBB2     		uxtb	r3, r3
 339 009c 072B     		cmp	r3, #7
 340 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 341              		.loc 1 317 0
 342 00a0 794B     		ldr	r3, .L48
 343 00a2 0122     		movs	r2, #1
 344 00a4 DA70     		strb	r2, [r3, #3]
 345              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 346              		.loc 1 325 0
 347 00a6 794B     		ldr	r3, .L48+4
 348 00a8 1B78     		ldrb	r3, [r3]
 349 00aa DBB2     		uxtb	r3, r3
 350 00ac 03F00203 		and	r3, r3, #2
 351 00b0 002B     		cmp	r3, #0
 352 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 353              		.loc 1 326 0 discriminator 1
 354 00b4 744B     		ldr	r3, .L48
 355 00b6 1B7A     		ldrb	r3, [r3, #8]
 356 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 357              		.loc 1 325 0 discriminator 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 13


 358 00ba 022B     		cmp	r3, #2
 359 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 360              		.loc 1 327 0
 361 00be 724B     		ldr	r3, .L48
 362 00c0 1B79     		ldrb	r3, [r3, #4]
 363 00c2 DBB2     		uxtb	r3, r3
 364 00c4 1946     		mov	r1, r3
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 365              		.loc 1 328 0
 366 00c6 704B     		ldr	r3, .L48
 367 00c8 1B7A     		ldrb	r3, [r3, #8]
 368 00ca DBB2     		uxtb	r3, r3
 369 00cc 013B     		subs	r3, r3, #1
 370 00ce 704A     		ldr	r2, .L48+8
 371 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 372 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 373              		.loc 1 326 0
 374 00d4 9942     		cmp	r1, r3
 375 00d6 2AD8     		bhi	.L14
 376              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 377              		.loc 1 329 0
 378 00d8 6C4B     		ldr	r3, .L48+4
 379 00da 1B78     		ldrb	r3, [r3]
 380 00dc DBB2     		uxtb	r3, r3
 381 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 382              		.loc 1 328 0
 383 00e2 002B     		cmp	r3, #0
 384 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 385              		.loc 1 330 0
 386 00e6 684B     		ldr	r3, .L48
 387 00e8 1B7A     		ldrb	r3, [r3, #8]
 388 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 389              		.loc 1 329 0
 390 00ec 022B     		cmp	r3, #2
 391 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 392              		.loc 1 331 0
 393 00f0 654B     		ldr	r3, .L48
 394 00f2 1B79     		ldrb	r3, [r3, #4]
 395 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 396              		.loc 1 332 0
 397 00f6 644B     		ldr	r3, .L48
 398 00f8 1B7A     		ldrb	r3, [r3, #8]
 399 00fa DBB2     		uxtb	r3, r3
 400 00fc 013B     		subs	r3, r3, #1
 401 00fe 6449     		ldr	r1, .L48+8
 402 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 403              		.loc 1 330 0
 404 0102 9A42     		cmp	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 14


 405 0104 13D8     		bhi	.L14
 406              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 407              		.loc 1 333 0
 408 0106 614B     		ldr	r3, .L48+4
 409 0108 1B78     		ldrb	r3, [r3]
 410 010a DBB2     		uxtb	r3, r3
 411 010c 03F00203 		and	r3, r3, #2
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 412              		.loc 1 332 0
 413 0110 002B     		cmp	r3, #0
 414 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 415              		.loc 1 334 0
 416 0116 5C4B     		ldr	r3, .L48
 417 0118 1B79     		ldrb	r3, [r3, #4]
 418 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 419              		.loc 1 335 0
 420 011c 5A4B     		ldr	r3, .L48
 421 011e 1B7A     		ldrb	r3, [r3, #8]
 422 0120 DBB2     		uxtb	r3, r3
 423 0122 013B     		subs	r3, r3, #1
 424 0124 5A49     		ldr	r1, .L48+8
 425 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 426              		.loc 1 333 0
 427 0128 9A42     		cmp	r2, r3
 428 012a 40F2E880 		bls	.L16
 429              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 430              		.loc 1 338 0
 431 012e 564B     		ldr	r3, .L48
 432 0130 1B7A     		ldrb	r3, [r3, #8]
 433 0132 DBB2     		uxtb	r3, r3
 434 0134 0133     		adds	r3, r3, #1
 435 0136 DAB2     		uxtb	r2, r3
 436 0138 534B     		ldr	r3, .L48
 437 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 438              		.loc 1 341 0
 439 013c 524B     		ldr	r3, .L48
 440 013e 0122     		movs	r2, #1
 441 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 442              		.loc 1 344 0
 443 0142 514B     		ldr	r3, .L48
 444 0144 1B7A     		ldrb	r3, [r3, #8]
 445 0146 DBB2     		uxtb	r3, r3
 446 0148 0C2B     		cmp	r3, #12
 447 014a 40F28580 		bls	.L17
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 15


 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 448              		.loc 1 347 0
 449 014e 4E4B     		ldr	r3, .L48
 450 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 451 0152 9BB2     		uxth	r3, r3
 452 0154 0133     		adds	r3, r3, #1
 453 0156 9AB2     		uxth	r2, r3
 454 0158 4B4B     		ldr	r3, .L48
 455 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 456              		.loc 1 350 0
 457 015c 4A4B     		ldr	r3, .L48
 458 015e 0122     		movs	r2, #1
 459 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 460              		.loc 1 353 0
 461 0162 494B     		ldr	r3, .L48
 462 0164 0122     		movs	r2, #1
 463 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 464              		.loc 1 356 0
 465 0168 474B     		ldr	r3, .L48
 466 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 467 016c 9BB2     		uxth	r3, r3
 468 016e 494A     		ldr	r2, .L48+12
 469 0170 A2FB0312 		umull	r1, r2, r2, r3
 470 0174 D209     		lsrs	r2, r2, #7
 471 0176 4FF4C871 		mov	r1, #400
 472 017a 01FB02F2 		mul	r2, r1, r2
 473 017e 9B1A     		subs	r3, r3, r2
 474 0180 9BB2     		uxth	r3, r3
 475 0182 002B     		cmp	r3, #0
 476 0184 15D0     		beq	.L18
 477              		.loc 1 356 0 is_stmt 0 discriminator 1
 478 0186 404B     		ldr	r3, .L48
 479 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 480 018a 9BB2     		uxth	r3, r3
 481 018c 03F00303 		and	r3, r3, #3
 482 0190 9BB2     		uxth	r3, r3
 483 0192 002B     		cmp	r3, #0
 484 0194 16D1     		bne	.L19
 485              		.loc 1 356 0 discriminator 2
 486 0196 3C4B     		ldr	r3, .L48
 487 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 488 019a 9BB2     		uxth	r3, r3
 489 019c 3D4A     		ldr	r2, .L48+12
 490 019e A2FB0312 		umull	r1, r2, r2, r3
 491 01a2 5209     		lsrs	r2, r2, #5
 492 01a4 6421     		movs	r1, #100
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 16


 493 01a6 01FB02F2 		mul	r2, r1, r2
 494 01aa 9B1A     		subs	r3, r3, r2
 495 01ac 9BB2     		uxth	r3, r3
 496 01ae 002B     		cmp	r3, #0
 497 01b0 08D0     		beq	.L19
 498              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 499              		.loc 1 359 0 is_stmt 1
 500 01b2 364B     		ldr	r3, .L48+4
 501 01b4 1B78     		ldrb	r3, [r3]
 502 01b6 DBB2     		uxtb	r3, r3
 503 01b8 43F00203 		orr	r3, r3, #2
 504 01bc DAB2     		uxtb	r2, r3
 505 01be 334B     		ldr	r3, .L48+4
 506 01c0 1A70     		strb	r2, [r3]
 507 01c2 07E0     		b	.L20
 508              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 509              		.loc 1 364 0
 510 01c4 314B     		ldr	r3, .L48+4
 511 01c6 1B78     		ldrb	r3, [r3]
 512 01c8 DBB2     		uxtb	r3, r3
 513 01ca 23F00203 		bic	r3, r3, #2
 514 01ce DAB2     		uxtb	r2, r3
 515 01d0 2E4B     		ldr	r3, .L48+4
 516 01d2 1A70     		strb	r2, [r3]
 517              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 518              		.loc 1 368 0
 519 01d4 304B     		ldr	r3, .L48+16
 520 01d6 1B78     		ldrb	r3, [r3]
 521 01d8 DBB2     		uxtb	r3, r3
 522 01da 5BB2     		sxtb	r3, r3
 523 01dc 002B     		cmp	r3, #0
 524 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 525              		.loc 1 372 0
 526 01e0 2E4B     		ldr	r3, .L48+20
 527 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 528 01e4 9AB2     		uxth	r2, r3
 529 01e6 284B     		ldr	r3, .L48
 530 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 531 01ea 9BB2     		uxth	r3, r3
 532 01ec 9A42     		cmp	r2, r3
 533 01ee 08D1     		bne	.L22
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 17


 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 534              		.loc 1 375 0
 535 01f0 2B4B     		ldr	r3, .L48+24
 536 01f2 1B78     		ldrb	r3, [r3]
 537 01f4 DBB2     		uxtb	r3, r3
 538 01f6 63F07F03 		orn	r3, r3, #127
 539 01fa DAB2     		uxtb	r2, r3
 540 01fc 284B     		ldr	r3, .L48+24
 541 01fe 1A70     		strb	r2, [r3]
 542 0200 07E0     		b	.L21
 543              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 544              		.loc 1 380 0
 545 0202 274B     		ldr	r3, .L48+24
 546 0204 1B78     		ldrb	r3, [r3]
 547 0206 DBB2     		uxtb	r3, r3
 548 0208 03F07F03 		and	r3, r3, #127
 549 020c DAB2     		uxtb	r2, r3
 550 020e 244B     		ldr	r3, .L48+24
 551 0210 1A70     		strb	r2, [r3]
 552              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 553              		.loc 1 385 0
 554 0212 214B     		ldr	r3, .L48+16
 555 0214 1B78     		ldrb	r3, [r3]
 556 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 557              		.loc 1 386 0
 558 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 559 021a 002B     		cmp	r3, #0
 560 021c 13D0     		beq	.L23
 561              		.loc 1 386 0 is_stmt 0 discriminator 1
 562 021e 204B     		ldr	r3, .L48+24
 563 0220 1B78     		ldrb	r3, [r3]
 564 0222 DAB2     		uxtb	r2, r3
 565 0224 FB79     		ldrb	r3, [r7, #7]
 566 0226 1340     		ands	r3, r3, r2
 567 0228 DBB2     		uxtb	r3, r3
 568 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 569 022c 9A42     		cmp	r2, r3
 570 022e 0AD1     		bne	.L23
 571              		.loc 1 386 0 discriminator 2
 572 0230 164B     		ldr	r3, .L48+4
 573 0232 1B78     		ldrb	r3, [r3]
 574 0234 DBB2     		uxtb	r3, r3
 575 0236 43F00803 		orr	r3, r3, #8
 576 023a DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 18


 577 023c 134B     		ldr	r3, .L48+4
 578 023e 1A70     		strb	r2, [r3]
 579 0240 174B     		ldr	r3, .L48+24
 580 0242 0022     		movs	r2, #0
 581 0244 1A70     		strb	r2, [r3]
 582              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 583              		.loc 1 391 0 is_stmt 1
 584 0246 174B     		ldr	r3, .L48+28
 585 0248 1B78     		ldrb	r3, [r3]
 586 024a DBB2     		uxtb	r3, r3
 587 024c 03F04003 		and	r3, r3, #64
 588 0250 002B     		cmp	r3, #0
 589 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 590              		.loc 1 394 0
 591 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 592              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 593              		.loc 1 400 0
 594 0258 0F4B     		ldr	r3, .L48+16
 595 025a 1B78     		ldrb	r3, [r3]
 596 025c DBB2     		uxtb	r3, r3
 597 025e 03F04003 		and	r3, r3, #64
 598 0262 002B     		cmp	r3, #0
 599 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 600              		.loc 1 403 0
 601 0266 0D4B     		ldr	r3, .L48+20
 602 0268 1B7A     		ldrb	r3, [r3, #8]
 603 026a DAB2     		uxtb	r2, r3
 604 026c 064B     		ldr	r3, .L48
 605 026e 1B7A     		ldrb	r3, [r3, #8]
 606 0270 DBB2     		uxtb	r3, r3
 607 0272 9A42     		cmp	r2, r3
 608 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 609              		.loc 1 406 0
 610 0276 0A4B     		ldr	r3, .L48+24
 611 0278 1B78     		ldrb	r3, [r3]
 612 027a DBB2     		uxtb	r3, r3
 613 027c 43F04003 		orr	r3, r3, #64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 19


 614 0280 DAB2     		uxtb	r2, r3
 615 0282 074B     		ldr	r3, .L48+24
 616 0284 1A70     		strb	r2, [r3]
 617 0286 17E0     		b	.L24
 618              	.L49:
 619              		.align	2
 620              	.L48:
 621 0288 00000000 		.word	RTC_currentTimeDate
 622 028c 00000000 		.word	RTC_statusDateTime
 623 0290 00000000 		.word	RTC_daysInMonths
 624 0294 1F85EB51 		.word	1374389535
 625 0298 00000000 		.word	RTC_alarmCfgMask
 626 029c 00000000 		.word	RTC_alarmCfgTimeDate
 627 02a0 00000000 		.word	RTC_alarmCurStatus
 628 02a4 00000000 		.word	RTC_intervalCfgMask
 629              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 630              		.loc 1 411 0
 631 02a8 964B     		ldr	r3, .L50
 632 02aa 1B78     		ldrb	r3, [r3]
 633 02ac DBB2     		uxtb	r3, r3
 634 02ae 23F04003 		bic	r3, r3, #64
 635 02b2 DAB2     		uxtb	r2, r3
 636 02b4 934B     		ldr	r3, .L50
 637 02b6 1A70     		strb	r2, [r3]
 638              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 639              		.loc 1 436 0
 640 02b8 934B     		ldr	r3, .L50+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 20


 641 02ba 1B78     		ldrb	r3, [r3]
 642 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 643              		.loc 1 437 0
 644 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 645 02c0 002B     		cmp	r3, #0
 646 02c2 13D0     		beq	.L26
 647              		.loc 1 437 0 is_stmt 0 discriminator 1
 648 02c4 8F4B     		ldr	r3, .L50
 649 02c6 1B78     		ldrb	r3, [r3]
 650 02c8 DAB2     		uxtb	r2, r3
 651 02ca FB79     		ldrb	r3, [r7, #7]
 652 02cc 1340     		ands	r3, r3, r2
 653 02ce DBB2     		uxtb	r3, r3
 654 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 655 02d2 9A42     		cmp	r2, r3
 656 02d4 0AD1     		bne	.L26
 657              		.loc 1 437 0 discriminator 2
 658 02d6 8D4B     		ldr	r3, .L50+8
 659 02d8 1B78     		ldrb	r3, [r3]
 660 02da DBB2     		uxtb	r3, r3
 661 02dc 43F00803 		orr	r3, r3, #8
 662 02e0 DAB2     		uxtb	r2, r3
 663 02e2 8A4B     		ldr	r3, .L50+8
 664 02e4 1A70     		strb	r2, [r3]
 665 02e6 874B     		ldr	r3, .L50
 666 02e8 0022     		movs	r2, #0
 667 02ea 1A70     		strb	r2, [r3]
 668              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 669              		.loc 1 442 0 is_stmt 1
 670 02ec 884B     		ldr	r3, .L50+12
 671 02ee 1B78     		ldrb	r3, [r3]
 672 02f0 DBB2     		uxtb	r3, r3
 673 02f2 03F02003 		and	r3, r3, #32
 674 02f6 002B     		cmp	r3, #0
 675 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 676              		.loc 1 445 0
 677 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 678              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 679              		.loc 1 450 0
 680 02fe 824B     		ldr	r3, .L50+4
 681 0300 1B78     		ldrb	r3, [r3]
 682 0302 DBB2     		uxtb	r3, r3
 683 0304 03F00803 		and	r3, r3, #8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 21


 684 0308 002B     		cmp	r3, #0
 685 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 686              		.loc 1 453 0
 687 030c 814B     		ldr	r3, .L50+16
 688 030e DB78     		ldrb	r3, [r3, #3]
 689 0310 DAB2     		uxtb	r2, r3
 690 0312 814B     		ldr	r3, .L50+20
 691 0314 DB78     		ldrb	r3, [r3, #3]
 692 0316 DBB2     		uxtb	r3, r3
 693 0318 9A42     		cmp	r2, r3
 694 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 695              		.loc 1 456 0
 696 031c 794B     		ldr	r3, .L50
 697 031e 1B78     		ldrb	r3, [r3]
 698 0320 DBB2     		uxtb	r3, r3
 699 0322 43F00803 		orr	r3, r3, #8
 700 0326 DAB2     		uxtb	r2, r3
 701 0328 764B     		ldr	r3, .L50
 702 032a 1A70     		strb	r2, [r3]
 703 032c 07E0     		b	.L27
 704              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 705              		.loc 1 461 0
 706 032e 754B     		ldr	r3, .L50
 707 0330 1B78     		ldrb	r3, [r3]
 708 0332 DBB2     		uxtb	r3, r3
 709 0334 23F00803 		bic	r3, r3, #8
 710 0338 DAB2     		uxtb	r2, r3
 711 033a 724B     		ldr	r3, .L50
 712 033c 1A70     		strb	r2, [r3]
 713              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 714              		.loc 1 466 0
 715 033e 724B     		ldr	r3, .L50+4
 716 0340 1B78     		ldrb	r3, [r3]
 717 0342 DBB2     		uxtb	r3, r3
 718 0344 03F02003 		and	r3, r3, #32
 719 0348 002B     		cmp	r3, #0
 720 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 721              		.loc 1 469 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 22


 722 034c 714B     		ldr	r3, .L50+16
 723 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 724 0350 9AB2     		uxth	r2, r3
 725 0352 714B     		ldr	r3, .L50+20
 726 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 727 0356 9BB2     		uxth	r3, r3
 728 0358 9A42     		cmp	r2, r3
 729 035a 08D1     		bne	.L30
 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 730              		.loc 1 472 0
 731 035c 694B     		ldr	r3, .L50
 732 035e 1B78     		ldrb	r3, [r3]
 733 0360 DBB2     		uxtb	r3, r3
 734 0362 43F02003 		orr	r3, r3, #32
 735 0366 DAB2     		uxtb	r2, r3
 736 0368 664B     		ldr	r3, .L50
 737 036a 1A70     		strb	r2, [r3]
 738 036c 07E0     		b	.L29
 739              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 740              		.loc 1 477 0
 741 036e 654B     		ldr	r3, .L50
 742 0370 1B78     		ldrb	r3, [r3]
 743 0372 DBB2     		uxtb	r3, r3
 744 0374 23F02003 		bic	r3, r3, #32
 745 0378 DAB2     		uxtb	r2, r3
 746 037a 624B     		ldr	r3, .L50
 747 037c 1A70     		strb	r2, [r3]
 748              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 749              		.loc 1 482 0
 750 037e 624B     		ldr	r3, .L50+4
 751 0380 1B78     		ldrb	r3, [r3]
 752 0382 DBB2     		uxtb	r3, r3
 753 0384 03F01003 		and	r3, r3, #16
 754 0388 002B     		cmp	r3, #0
 755 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 756              		.loc 1 485 0
 757 038c 614B     		ldr	r3, .L50+16
 758 038e 1B79     		ldrb	r3, [r3, #4]
 759 0390 DAB2     		uxtb	r2, r3
 760 0392 614B     		ldr	r3, .L50+20
 761 0394 1B79     		ldrb	r3, [r3, #4]
 762 0396 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 23


 763 0398 9A42     		cmp	r2, r3
 764 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 765              		.loc 1 488 0
 766 039c 594B     		ldr	r3, .L50
 767 039e 1B78     		ldrb	r3, [r3]
 768 03a0 DBB2     		uxtb	r3, r3
 769 03a2 43F01003 		orr	r3, r3, #16
 770 03a6 DAB2     		uxtb	r2, r3
 771 03a8 564B     		ldr	r3, .L50
 772 03aa 1A70     		strb	r2, [r3]
 773 03ac 07E0     		b	.L31
 774              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 775              		.loc 1 493 0
 776 03ae 554B     		ldr	r3, .L50
 777 03b0 1B78     		ldrb	r3, [r3]
 778 03b2 DBB2     		uxtb	r3, r3
 779 03b4 23F01003 		bic	r3, r3, #16
 780 03b8 DAB2     		uxtb	r2, r3
 781 03ba 524B     		ldr	r3, .L50
 782 03bc 1A70     		strb	r2, [r3]
 783              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 784              		.loc 1 518 0
 785 03be 524B     		ldr	r3, .L50+4
 786 03c0 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 24


 787 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 788              		.loc 1 519 0
 789 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 790 03c6 002B     		cmp	r3, #0
 791 03c8 13D0     		beq	.L33
 792              		.loc 1 519 0 is_stmt 0 discriminator 1
 793 03ca 4E4B     		ldr	r3, .L50
 794 03cc 1B78     		ldrb	r3, [r3]
 795 03ce DAB2     		uxtb	r2, r3
 796 03d0 FB79     		ldrb	r3, [r7, #7]
 797 03d2 1340     		ands	r3, r3, r2
 798 03d4 DBB2     		uxtb	r3, r3
 799 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 800 03d8 9A42     		cmp	r2, r3
 801 03da 0AD1     		bne	.L33
 802              		.loc 1 519 0 discriminator 2
 803 03dc 4B4B     		ldr	r3, .L50+8
 804 03de 1B78     		ldrb	r3, [r3]
 805 03e0 DBB2     		uxtb	r3, r3
 806 03e2 43F00803 		orr	r3, r3, #8
 807 03e6 DAB2     		uxtb	r2, r3
 808 03e8 484B     		ldr	r3, .L50+8
 809 03ea 1A70     		strb	r2, [r3]
 810 03ec 454B     		ldr	r3, .L50
 811 03ee 0022     		movs	r2, #0
 812 03f0 1A70     		strb	r2, [r3]
 813              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 814              		.loc 1 524 0 is_stmt 1
 815 03f2 474B     		ldr	r3, .L50+12
 816 03f4 1B78     		ldrb	r3, [r3]
 817 03f6 DBB2     		uxtb	r3, r3
 818 03f8 03F00803 		and	r3, r3, #8
 819 03fc 002B     		cmp	r3, #0
 820 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 821              		.loc 1 527 0
 822 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 823              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 824              		.loc 1 530 0
 825 0404 444B     		ldr	r3, .L50+20
 826 0406 DB78     		ldrb	r3, [r3, #3]
 827 0408 DBB2     		uxtb	r3, r3
 828 040a 012B     		cmp	r3, #1
 829 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 25


 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 830              		.loc 1 533 0
 831 040e 404B     		ldr	r3, .L50+12
 832 0410 1B78     		ldrb	r3, [r3]
 833 0412 DBB2     		uxtb	r3, r3
 834 0414 03F01003 		and	r3, r3, #16
 835 0418 002B     		cmp	r3, #0
 836 041a 01D0     		beq	.L11
 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 837              		.loc 1 536 0
 838 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 839              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 840              		.loc 1 543 0
 841 0420 3D4B     		ldr	r3, .L50+20
 842 0422 9B78     		ldrb	r3, [r3, #2]
 843 0424 DBB2     		uxtb	r3, r3
 844 0426 0B2B     		cmp	r3, #11
 845 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 846              		.loc 1 546 0
 847 042a 384B     		ldr	r3, .L50+8
 848 042c 1B78     		ldrb	r3, [r3]
 849 042e DBB2     		uxtb	r3, r3
 850 0430 23F00403 		bic	r3, r3, #4
 851 0434 DAB2     		uxtb	r2, r3
 852 0436 354B     		ldr	r3, .L50+8
 853 0438 1A70     		strb	r2, [r3]
 854 043a 07E0     		b	.L36
 855              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 856              		.loc 1 551 0
 857 043c 334B     		ldr	r3, .L50+8
 858 043e 1B78     		ldrb	r3, [r3]
 859 0440 DBB2     		uxtb	r3, r3
 860 0442 43F00403 		orr	r3, r3, #4
 861 0446 DAB2     		uxtb	r2, r3
 862 0448 304B     		ldr	r3, .L50+8
 863 044a 1A70     		strb	r2, [r3]
 864              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 26


 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 27


 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 28


 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 29


 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 30


 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 31


 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 865              		.loc 1 879 0
 866 044c 2E4B     		ldr	r3, .L50+4
 867 044e 1B78     		ldrb	r3, [r3]
 868 0450 DBB2     		uxtb	r3, r3
 869 0452 03F00403 		and	r3, r3, #4
 870 0456 002B     		cmp	r3, #0
 871 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 872              		.loc 1 881 0
 873 045a 2E4B     		ldr	r3, .L50+16
 874 045c 9B78     		ldrb	r3, [r3, #2]
 875 045e DAB2     		uxtb	r2, r3
 876 0460 2D4B     		ldr	r3, .L50+20
 877 0462 9B78     		ldrb	r3, [r3, #2]
 878 0464 DBB2     		uxtb	r3, r3
 879 0466 9A42     		cmp	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 32


 880 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 881              		.loc 1 883 0
 882 046a 264B     		ldr	r3, .L50
 883 046c 1B78     		ldrb	r3, [r3]
 884 046e DBB2     		uxtb	r3, r3
 885 0470 43F00403 		orr	r3, r3, #4
 886 0474 DAB2     		uxtb	r2, r3
 887 0476 234B     		ldr	r3, .L50
 888 0478 1A70     		strb	r2, [r3]
 889 047a 07E0     		b	.L37
 890              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 891              		.loc 1 887 0
 892 047c 214B     		ldr	r3, .L50
 893 047e 1B78     		ldrb	r3, [r3]
 894 0480 DBB2     		uxtb	r3, r3
 895 0482 23F00403 		bic	r3, r3, #4
 896 0486 DAB2     		uxtb	r2, r3
 897 0488 1E4B     		ldr	r3, .L50
 898 048a 1A70     		strb	r2, [r3]
 899              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 900              		.loc 1 892 0
 901 048c 1E4B     		ldr	r3, .L50+4
 902 048e 1B78     		ldrb	r3, [r3]
 903 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 904              		.loc 1 893 0
 905 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 906 0494 002B     		cmp	r3, #0
 907 0496 13D0     		beq	.L39
 908              		.loc 1 893 0 is_stmt 0 discriminator 1
 909 0498 1A4B     		ldr	r3, .L50
 910 049a 1B78     		ldrb	r3, [r3]
 911 049c DAB2     		uxtb	r2, r3
 912 049e FB79     		ldrb	r3, [r7, #7]
 913 04a0 1340     		ands	r3, r3, r2
 914 04a2 DBB2     		uxtb	r3, r3
 915 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 916 04a6 9A42     		cmp	r2, r3
 917 04a8 0AD1     		bne	.L39
 918              		.loc 1 893 0 discriminator 2
 919 04aa 184B     		ldr	r3, .L50+8
 920 04ac 1B78     		ldrb	r3, [r3]
 921 04ae DBB2     		uxtb	r3, r3
 922 04b0 43F00803 		orr	r3, r3, #8
 923 04b4 DAB2     		uxtb	r2, r3
 924 04b6 154B     		ldr	r3, .L50+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 33


 925 04b8 1A70     		strb	r2, [r3]
 926 04ba 124B     		ldr	r3, .L50
 927 04bc 0022     		movs	r2, #0
 928 04be 1A70     		strb	r2, [r3]
 929              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 930              		.loc 1 898 0 is_stmt 1
 931 04c0 134B     		ldr	r3, .L50+12
 932 04c2 1B78     		ldrb	r3, [r3]
 933 04c4 DBB2     		uxtb	r3, r3
 934 04c6 03F00403 		and	r3, r3, #4
 935 04ca 002B     		cmp	r3, #0
 936 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 937              		.loc 1 900 0
 938 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 939              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 940              		.loc 1 905 0
 941 04d2 0D4B     		ldr	r3, .L50+4
 942 04d4 1B78     		ldrb	r3, [r3]
 943 04d6 DBB2     		uxtb	r3, r3
 944 04d8 03F00203 		and	r3, r3, #2
 945 04dc 002B     		cmp	r3, #0
 946 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 947              		.loc 1 907 0
 948 04e0 0C4B     		ldr	r3, .L50+16
 949 04e2 5B78     		ldrb	r3, [r3, #1]
 950 04e4 DAB2     		uxtb	r2, r3
 951 04e6 0C4B     		ldr	r3, .L50+20
 952 04e8 5B78     		ldrb	r3, [r3, #1]
 953 04ea DBB2     		uxtb	r3, r3
 954 04ec 9A42     		cmp	r2, r3
 955 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 956              		.loc 1 909 0
 957 04f0 044B     		ldr	r3, .L50
 958 04f2 1B78     		ldrb	r3, [r3]
 959 04f4 DBB2     		uxtb	r3, r3
 960 04f6 43F00203 		orr	r3, r3, #2
 961 04fa DAB2     		uxtb	r2, r3
 962 04fc 014B     		ldr	r3, .L50
 963 04fe 1A70     		strb	r2, [r3]
 964 0500 14E0     		b	.L40
 965              	.L51:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 34


 966 0502 00BF     		.align	2
 967              	.L50:
 968 0504 00000000 		.word	RTC_alarmCurStatus
 969 0508 00000000 		.word	RTC_alarmCfgMask
 970 050c 00000000 		.word	RTC_statusDateTime
 971 0510 00000000 		.word	RTC_intervalCfgMask
 972 0514 00000000 		.word	RTC_alarmCfgTimeDate
 973 0518 00000000 		.word	RTC_currentTimeDate
 974              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 975              		.loc 1 913 0
 976 051c 384B     		ldr	r3, .L52
 977 051e 1B78     		ldrb	r3, [r3]
 978 0520 DBB2     		uxtb	r3, r3
 979 0522 23F00203 		bic	r3, r3, #2
 980 0526 DAB2     		uxtb	r2, r3
 981 0528 354B     		ldr	r3, .L52
 982 052a 1A70     		strb	r2, [r3]
 983              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 984              		.loc 1 918 0
 985 052c 354B     		ldr	r3, .L52+4
 986 052e 1B78     		ldrb	r3, [r3]
 987 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 988              		.loc 1 919 0
 989 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 990 0534 002B     		cmp	r3, #0
 991 0536 13D0     		beq	.L42
 992              		.loc 1 919 0 is_stmt 0 discriminator 1
 993 0538 314B     		ldr	r3, .L52
 994 053a 1B78     		ldrb	r3, [r3]
 995 053c DAB2     		uxtb	r2, r3
 996 053e FB79     		ldrb	r3, [r7, #7]
 997 0540 1340     		ands	r3, r3, r2
 998 0542 DBB2     		uxtb	r3, r3
 999 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1000 0546 9A42     		cmp	r2, r3
 1001 0548 0AD1     		bne	.L42
 1002              		.loc 1 919 0 discriminator 2
 1003 054a 2F4B     		ldr	r3, .L52+8
 1004 054c 1B78     		ldrb	r3, [r3]
 1005 054e DBB2     		uxtb	r3, r3
 1006 0550 43F00803 		orr	r3, r3, #8
 1007 0554 DAB2     		uxtb	r2, r3
 1008 0556 2C4B     		ldr	r3, .L52+8
 1009 0558 1A70     		strb	r2, [r3]
 1010 055a 294B     		ldr	r3, .L52
 1011 055c 0022     		movs	r2, #0
 1012 055e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 35


 1013              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1014              		.loc 1 924 0 is_stmt 1
 1015 0560 2A4B     		ldr	r3, .L52+12
 1016 0562 1B78     		ldrb	r3, [r3]
 1017 0564 DBB2     		uxtb	r3, r3
 1018 0566 03F00203 		and	r3, r3, #2
 1019 056a 002B     		cmp	r3, #0
 1020 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1021              		.loc 1 926 0
 1022 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1023              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1024              		.loc 1 931 0
 1025 0572 244B     		ldr	r3, .L52+4
 1026 0574 1B78     		ldrb	r3, [r3]
 1027 0576 DBB2     		uxtb	r3, r3
 1028 0578 03F00103 		and	r3, r3, #1
 1029 057c 002B     		cmp	r3, #0
 1030 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1031              		.loc 1 933 0
 1032 0580 234B     		ldr	r3, .L52+16
 1033 0582 1B78     		ldrb	r3, [r3]
 1034 0584 DAB2     		uxtb	r2, r3
 1035 0586 234B     		ldr	r3, .L52+20
 1036 0588 1B78     		ldrb	r3, [r3]
 1037 058a DBB2     		uxtb	r3, r3
 1038 058c 9A42     		cmp	r2, r3
 1039 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1040              		.loc 1 935 0
 1041 0590 1B4B     		ldr	r3, .L52
 1042 0592 1B78     		ldrb	r3, [r3]
 1043 0594 DBB2     		uxtb	r3, r3
 1044 0596 43F00103 		orr	r3, r3, #1
 1045 059a DAB2     		uxtb	r2, r3
 1046 059c 184B     		ldr	r3, .L52
 1047 059e 1A70     		strb	r2, [r3]
 1048 05a0 07E0     		b	.L43
 1049              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 36


 1050              		.loc 1 939 0
 1051 05a2 174B     		ldr	r3, .L52
 1052 05a4 1B78     		ldrb	r3, [r3]
 1053 05a6 DBB2     		uxtb	r3, r3
 1054 05a8 23F00103 		bic	r3, r3, #1
 1055 05ac DAB2     		uxtb	r2, r3
 1056 05ae 144B     		ldr	r3, .L52
 1057 05b0 1A70     		strb	r2, [r3]
 1058              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1059              		.loc 1 944 0
 1060 05b2 144B     		ldr	r3, .L52+4
 1061 05b4 1B78     		ldrb	r3, [r3]
 1062 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1063              		.loc 1 945 0
 1064 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1065 05ba 002B     		cmp	r3, #0
 1066 05bc 13D0     		beq	.L45
 1067              		.loc 1 945 0 is_stmt 0 discriminator 1
 1068 05be 104B     		ldr	r3, .L52
 1069 05c0 1B78     		ldrb	r3, [r3]
 1070 05c2 DAB2     		uxtb	r2, r3
 1071 05c4 FB79     		ldrb	r3, [r7, #7]
 1072 05c6 1340     		ands	r3, r3, r2
 1073 05c8 DBB2     		uxtb	r3, r3
 1074 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1075 05cc 9A42     		cmp	r2, r3
 1076 05ce 0AD1     		bne	.L45
 1077              		.loc 1 945 0 discriminator 2
 1078 05d0 0D4B     		ldr	r3, .L52+8
 1079 05d2 1B78     		ldrb	r3, [r3]
 1080 05d4 DBB2     		uxtb	r3, r3
 1081 05d6 43F00803 		orr	r3, r3, #8
 1082 05da DAB2     		uxtb	r2, r3
 1083 05dc 0A4B     		ldr	r3, .L52+8
 1084 05de 1A70     		strb	r2, [r3]
 1085 05e0 074B     		ldr	r3, .L52
 1086 05e2 0022     		movs	r2, #0
 1087 05e4 1A70     		strb	r2, [r3]
 1088              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1089              		.loc 1 948 0 is_stmt 1
 1090 05e6 094B     		ldr	r3, .L52+12
 1091 05e8 1B78     		ldrb	r3, [r3]
 1092 05ea DBB2     		uxtb	r3, r3
 1093 05ec 03F00103 		and	r3, r3, #1
 1094 05f0 002B     		cmp	r3, #0
 1095 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 37


 1096              		.loc 1 950 0
 1097 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1098              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1099              		.loc 1 956 0
 1100 05f8 00BF     		nop
 1101 05fa 0837     		adds	r7, r7, #8
 1102              		.cfi_def_cfa_offset 8
 1103 05fc BD46     		mov	sp, r7
 1104              		.cfi_def_cfa_register 13
 1105              		@ sp needed
 1106 05fe 80BD     		pop	{r7, pc}
 1107              	.L53:
 1108              		.align	2
 1109              	.L52:
 1110 0600 00000000 		.word	RTC_alarmCurStatus
 1111 0604 00000000 		.word	RTC_alarmCfgMask
 1112 0608 00000000 		.word	RTC_statusDateTime
 1113 060c 00000000 		.word	RTC_intervalCfgMask
 1114 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1115 0614 00000000 		.word	RTC_currentTimeDate
 1116              		.cfi_endproc
 1117              	.LFE71:
 1118              		.size	RTC_ISR, .-RTC_ISR
 1119              		.text
 1120              	.Letext0:
 1121              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1122              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1123              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1124              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1125              		.file 6 "./data.h"
 1126              		.file 7 "./modem.h"
 1127              		.file 8 "./notoriOS.h"
 1128              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1129              		.file 10 "./level_sensor.h"
 1130              		.file 11 "./App_LED.h"
 1131              		.section	.debug_info,"",%progbits
 1132              	.Ldebug_info0:
 1133 0000 A2060000 		.4byte	0x6a2
 1134 0004 0400     		.2byte	0x4
 1135 0006 00000000 		.4byte	.Ldebug_abbrev0
 1136 000a 04       		.byte	0x4
 1137 000b 01       		.uleb128 0x1
 1138 000c 81000000 		.4byte	.LASF103
 1139 0010 0C       		.byte	0xc
 1140 0011 80050000 		.4byte	.LASF104
 1141 0015 82040000 		.4byte	.LASF105
 1142 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1143 001d 00000000 		.4byte	0
 1144 0021 00000000 		.4byte	.Ldebug_line0
 1145 0025 02       		.uleb128 0x2
 1146 0026 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 38


 1147 0027 06       		.byte	0x6
 1148 0028 EF020000 		.4byte	.LASF0
 1149 002c 02       		.uleb128 0x2
 1150 002d 01       		.byte	0x1
 1151 002e 08       		.byte	0x8
 1152 002f A4020000 		.4byte	.LASF1
 1153 0033 02       		.uleb128 0x2
 1154 0034 02       		.byte	0x2
 1155 0035 05       		.byte	0x5
 1156 0036 66000000 		.4byte	.LASF2
 1157 003a 02       		.uleb128 0x2
 1158 003b 02       		.byte	0x2
 1159 003c 07       		.byte	0x7
 1160 003d C0030000 		.4byte	.LASF3
 1161 0041 03       		.uleb128 0x3
 1162 0042 69050000 		.4byte	.LASF9
 1163 0046 02       		.byte	0x2
 1164 0047 3F       		.byte	0x3f
 1165 0048 4C000000 		.4byte	0x4c
 1166 004c 02       		.uleb128 0x2
 1167 004d 04       		.byte	0x4
 1168 004e 05       		.byte	0x5
 1169 004f F5010000 		.4byte	.LASF4
 1170 0053 02       		.uleb128 0x2
 1171 0054 04       		.byte	0x4
 1172 0055 07       		.byte	0x7
 1173 0056 DC040000 		.4byte	.LASF5
 1174 005a 02       		.uleb128 0x2
 1175 005b 08       		.byte	0x8
 1176 005c 05       		.byte	0x5
 1177 005d E2010000 		.4byte	.LASF6
 1178 0061 02       		.uleb128 0x2
 1179 0062 08       		.byte	0x8
 1180 0063 07       		.byte	0x7
 1181 0064 10030000 		.4byte	.LASF7
 1182 0068 04       		.uleb128 0x4
 1183 0069 04       		.byte	0x4
 1184 006a 05       		.byte	0x5
 1185 006b 696E7400 		.ascii	"int\000"
 1186 006f 02       		.uleb128 0x2
 1187 0070 04       		.byte	0x4
 1188 0071 07       		.byte	0x7
 1189 0072 4B030000 		.4byte	.LASF8
 1190 0076 03       		.uleb128 0x3
 1191 0077 22040000 		.4byte	.LASF10
 1192 007b 03       		.byte	0x3
 1193 007c 2C       		.byte	0x2c
 1194 007d 41000000 		.4byte	0x41
 1195 0081 05       		.uleb128 0x5
 1196 0082 81010000 		.4byte	.LASF11
 1197 0086 04       		.byte	0x4
 1198 0087 9201     		.2byte	0x192
 1199 0089 2C000000 		.4byte	0x2c
 1200 008d 05       		.uleb128 0x5
 1201 008e 60010000 		.4byte	.LASF12
 1202 0092 04       		.byte	0x4
 1203 0093 9301     		.2byte	0x193
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 39


 1204 0095 3A000000 		.4byte	0x3a
 1205 0099 05       		.uleb128 0x5
 1206 009a 94010000 		.4byte	.LASF13
 1207 009e 04       		.byte	0x4
 1208 009f 9601     		.2byte	0x196
 1209 00a1 33000000 		.4byte	0x33
 1210 00a5 05       		.uleb128 0x5
 1211 00a6 EE040000 		.4byte	.LASF14
 1212 00aa 04       		.byte	0x4
 1213 00ab 9701     		.2byte	0x197
 1214 00ad 4C000000 		.4byte	0x4c
 1215 00b1 02       		.uleb128 0x2
 1216 00b2 04       		.byte	0x4
 1217 00b3 04       		.byte	0x4
 1218 00b4 BD010000 		.4byte	.LASF15
 1219 00b8 02       		.uleb128 0x2
 1220 00b9 08       		.byte	0x8
 1221 00ba 04       		.byte	0x4
 1222 00bb F4040000 		.4byte	.LASF16
 1223 00bf 02       		.uleb128 0x2
 1224 00c0 01       		.byte	0x1
 1225 00c1 08       		.byte	0x8
 1226 00c2 F0010000 		.4byte	.LASF17
 1227 00c6 06       		.uleb128 0x6
 1228 00c7 81000000 		.4byte	0x81
 1229 00cb 07       		.uleb128 0x7
 1230 00cc 0C       		.byte	0xc
 1231 00cd 05       		.byte	0x5
 1232 00ce 30       		.byte	0x30
 1233 00cf 34010000 		.4byte	0x134
 1234 00d3 08       		.uleb128 0x8
 1235 00d4 53656300 		.ascii	"Sec\000"
 1236 00d8 05       		.byte	0x5
 1237 00d9 32       		.byte	0x32
 1238 00da 81000000 		.4byte	0x81
 1239 00de 00       		.byte	0
 1240 00df 08       		.uleb128 0x8
 1241 00e0 4D696E00 		.ascii	"Min\000"
 1242 00e4 05       		.byte	0x5
 1243 00e5 33       		.byte	0x33
 1244 00e6 81000000 		.4byte	0x81
 1245 00ea 01       		.byte	0x1
 1246 00eb 09       		.uleb128 0x9
 1247 00ec 36010000 		.4byte	.LASF18
 1248 00f0 05       		.byte	0x5
 1249 00f1 34       		.byte	0x34
 1250 00f2 81000000 		.4byte	0x81
 1251 00f6 02       		.byte	0x2
 1252 00f7 09       		.uleb128 0x9
 1253 00f8 C3010000 		.4byte	.LASF19
 1254 00fc 05       		.byte	0x5
 1255 00fd 35       		.byte	0x35
 1256 00fe 81000000 		.4byte	0x81
 1257 0102 03       		.byte	0x3
 1258 0103 09       		.uleb128 0x9
 1259 0104 72040000 		.4byte	.LASF20
 1260 0108 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 40


 1261 0109 36       		.byte	0x36
 1262 010a 81000000 		.4byte	0x81
 1263 010e 04       		.byte	0x4
 1264 010f 09       		.uleb128 0x9
 1265 0110 4B060000 		.4byte	.LASF21
 1266 0114 05       		.byte	0x5
 1267 0115 37       		.byte	0x37
 1268 0116 8D000000 		.4byte	0x8d
 1269 011a 06       		.byte	0x6
 1270 011b 09       		.uleb128 0x9
 1271 011c 41020000 		.4byte	.LASF22
 1272 0120 05       		.byte	0x5
 1273 0121 38       		.byte	0x38
 1274 0122 81000000 		.4byte	0x81
 1275 0126 08       		.byte	0x8
 1276 0127 09       		.uleb128 0x9
 1277 0128 3C020000 		.4byte	.LASF23
 1278 012c 05       		.byte	0x5
 1279 012d 39       		.byte	0x39
 1280 012e 8D000000 		.4byte	0x8d
 1281 0132 0A       		.byte	0xa
 1282 0133 00       		.byte	0
 1283 0134 03       		.uleb128 0x3
 1284 0135 D5050000 		.4byte	.LASF24
 1285 0139 05       		.byte	0x5
 1286 013a 3A       		.byte	0x3a
 1287 013b 3F010000 		.4byte	0x13f
 1288 013f 06       		.uleb128 0x6
 1289 0140 CB000000 		.4byte	0xcb
 1290 0144 02       		.uleb128 0x2
 1291 0145 08       		.byte	0x8
 1292 0146 04       		.byte	0x4
 1293 0147 8A020000 		.4byte	.LASF25
 1294 014b 02       		.uleb128 0x2
 1295 014c 04       		.byte	0x4
 1296 014d 07       		.byte	0x7
 1297 014e 70000000 		.4byte	.LASF26
 1298 0152 0A       		.uleb128 0xa
 1299 0153 BF000000 		.4byte	0xbf
 1300 0157 62010000 		.4byte	0x162
 1301 015b 0B       		.uleb128 0xb
 1302 015c 4B010000 		.4byte	0x14b
 1303 0160 17       		.byte	0x17
 1304 0161 00       		.byte	0
 1305 0162 07       		.uleb128 0x7
 1306 0163 2C       		.byte	0x2c
 1307 0164 06       		.byte	0x6
 1308 0165 14       		.byte	0x14
 1309 0166 8F010000 		.4byte	0x18f
 1310 016a 08       		.uleb128 0x8
 1311 016b 6B657900 		.ascii	"key\000"
 1312 016f 06       		.byte	0x6
 1313 0170 15       		.byte	0x15
 1314 0171 8F010000 		.4byte	0x18f
 1315 0175 00       		.byte	0
 1316 0176 09       		.uleb128 0x9
 1317 0177 5A010000 		.4byte	.LASF27
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 41


 1318 017b 06       		.byte	0x6
 1319 017c 16       		.byte	0x16
 1320 017d 8F010000 		.4byte	0x18f
 1321 0181 14       		.byte	0x14
 1322 0182 09       		.uleb128 0x9
 1323 0183 9A010000 		.4byte	.LASF28
 1324 0187 06       		.byte	0x6
 1325 0188 17       		.byte	0x17
 1326 0189 A5000000 		.4byte	0xa5
 1327 018d 28       		.byte	0x28
 1328 018e 00       		.byte	0
 1329 018f 0A       		.uleb128 0xa
 1330 0190 BF000000 		.4byte	0xbf
 1331 0194 9F010000 		.4byte	0x19f
 1332 0198 0B       		.uleb128 0xb
 1333 0199 4B010000 		.4byte	0x14b
 1334 019d 13       		.byte	0x13
 1335 019e 00       		.byte	0
 1336 019f 03       		.uleb128 0x3
 1337 01a0 58030000 		.4byte	.LASF29
 1338 01a4 06       		.byte	0x6
 1339 01a5 19       		.byte	0x19
 1340 01a6 62010000 		.4byte	0x162
 1341 01aa 07       		.uleb128 0x7
 1342 01ab 3C       		.byte	0x3c
 1343 01ac 07       		.byte	0x7
 1344 01ad 36       		.byte	0x36
 1345 01ae D7010000 		.4byte	0x1d7
 1346 01b2 09       		.uleb128 0x9
 1347 01b3 1A000000 		.4byte	.LASF30
 1348 01b7 07       		.byte	0x7
 1349 01b8 37       		.byte	0x37
 1350 01b9 8F010000 		.4byte	0x18f
 1351 01bd 00       		.byte	0
 1352 01be 09       		.uleb128 0x9
 1353 01bf 00000000 		.4byte	.LASF31
 1354 01c3 07       		.byte	0x7
 1355 01c4 38       		.byte	0x38
 1356 01c5 8F010000 		.4byte	0x18f
 1357 01c9 14       		.byte	0x14
 1358 01ca 09       		.uleb128 0x9
 1359 01cb 1D040000 		.4byte	.LASF32
 1360 01cf 07       		.byte	0x7
 1361 01d0 39       		.byte	0x39
 1362 01d1 8F010000 		.4byte	0x18f
 1363 01d5 28       		.byte	0x28
 1364 01d6 00       		.byte	0
 1365 01d7 03       		.uleb128 0x3
 1366 01d8 3B050000 		.4byte	.LASF33
 1367 01dc 07       		.byte	0x7
 1368 01dd 3B       		.byte	0x3b
 1369 01de AA010000 		.4byte	0x1aa
 1370 01e2 07       		.uleb128 0x7
 1371 01e3 20       		.byte	0x20
 1372 01e4 07       		.byte	0x7
 1373 01e5 3D       		.byte	0x3d
 1374 01e6 4B020000 		.4byte	0x24b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 42


 1375 01ea 09       		.uleb128 0x9
 1376 01eb 64030000 		.4byte	.LASF34
 1377 01ef 07       		.byte	0x7
 1378 01f0 3E       		.byte	0x3e
 1379 01f1 68000000 		.4byte	0x68
 1380 01f5 00       		.byte	0
 1381 01f6 08       		.uleb128 0x8
 1382 01f7 62657200 		.ascii	"ber\000"
 1383 01fb 07       		.byte	0x7
 1384 01fc 3F       		.byte	0x3f
 1385 01fd 68000000 		.4byte	0x68
 1386 0201 04       		.byte	0x4
 1387 0202 09       		.uleb128 0x9
 1388 0203 8F010000 		.4byte	.LASF35
 1389 0207 07       		.byte	0x7
 1390 0208 40       		.byte	0x40
 1391 0209 68000000 		.4byte	0x68
 1392 020d 08       		.byte	0x8
 1393 020e 09       		.uleb128 0x9
 1394 020f 49010000 		.4byte	.LASF36
 1395 0213 07       		.byte	0x7
 1396 0214 41       		.byte	0x41
 1397 0215 68000000 		.4byte	0x68
 1398 0219 0C       		.byte	0xc
 1399 021a 09       		.uleb128 0x9
 1400 021b 7D040000 		.4byte	.LASF37
 1401 021f 07       		.byte	0x7
 1402 0220 42       		.byte	0x42
 1403 0221 68000000 		.4byte	0x68
 1404 0225 10       		.byte	0x10
 1405 0226 09       		.uleb128 0x9
 1406 0227 B2020000 		.4byte	.LASF38
 1407 022b 07       		.byte	0x7
 1408 022c 43       		.byte	0x43
 1409 022d 68000000 		.4byte	0x68
 1410 0231 14       		.byte	0x14
 1411 0232 09       		.uleb128 0x9
 1412 0233 D3030000 		.4byte	.LASF39
 1413 0237 07       		.byte	0x7
 1414 0238 44       		.byte	0x44
 1415 0239 68000000 		.4byte	0x68
 1416 023d 18       		.byte	0x18
 1417 023e 09       		.uleb128 0x9
 1418 023f 0A040000 		.4byte	.LASF40
 1419 0243 07       		.byte	0x7
 1420 0244 45       		.byte	0x45
 1421 0245 68000000 		.4byte	0x68
 1422 0249 1C       		.byte	0x1c
 1423 024a 00       		.byte	0
 1424 024b 03       		.uleb128 0x3
 1425 024c 32040000 		.4byte	.LASF41
 1426 0250 07       		.byte	0x7
 1427 0251 47       		.byte	0x47
 1428 0252 E2010000 		.4byte	0x1e2
 1429 0256 07       		.uleb128 0x7
 1430 0257 07       		.byte	0x7
 1431 0258 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 43


 1432 0259 53       		.byte	0x53
 1433 025a B3020000 		.4byte	0x2b3
 1434 025e 09       		.uleb128 0x9
 1435 025f 01060000 		.4byte	.LASF42
 1436 0263 07       		.byte	0x7
 1437 0264 55       		.byte	0x55
 1438 0265 81000000 		.4byte	0x81
 1439 0269 00       		.byte	0
 1440 026a 09       		.uleb128 0x9
 1441 026b AC030000 		.4byte	.LASF43
 1442 026f 07       		.byte	0x7
 1443 0270 57       		.byte	0x57
 1444 0271 B3020000 		.4byte	0x2b3
 1445 0275 01       		.byte	0x1
 1446 0276 09       		.uleb128 0x9
 1447 0277 61020000 		.4byte	.LASF44
 1448 027b 07       		.byte	0x7
 1449 027c 59       		.byte	0x59
 1450 027d 81000000 		.4byte	0x81
 1451 0281 02       		.byte	0x2
 1452 0282 09       		.uleb128 0x9
 1453 0283 6A030000 		.4byte	.LASF45
 1454 0287 07       		.byte	0x7
 1455 0288 5B       		.byte	0x5b
 1456 0289 81000000 		.4byte	0x81
 1457 028d 03       		.byte	0x3
 1458 028e 09       		.uleb128 0x9
 1459 028f 2F050000 		.4byte	.LASF46
 1460 0293 07       		.byte	0x7
 1461 0294 5E       		.byte	0x5e
 1462 0295 81000000 		.4byte	0x81
 1463 0299 04       		.byte	0x4
 1464 029a 09       		.uleb128 0x9
 1465 029b 29010000 		.4byte	.LASF47
 1466 029f 07       		.byte	0x7
 1467 02a0 63       		.byte	0x63
 1468 02a1 81000000 		.4byte	0x81
 1469 02a5 05       		.byte	0x5
 1470 02a6 09       		.uleb128 0x9
 1471 02a7 6E020000 		.4byte	.LASF48
 1472 02ab 07       		.byte	0x7
 1473 02ac 65       		.byte	0x65
 1474 02ad 81000000 		.4byte	0x81
 1475 02b1 06       		.byte	0x6
 1476 02b2 00       		.byte	0
 1477 02b3 02       		.uleb128 0x2
 1478 02b4 01       		.byte	0x1
 1479 02b5 02       		.byte	0x2
 1480 02b6 40040000 		.4byte	.LASF49
 1481 02ba 03       		.uleb128 0x3
 1482 02bb 95030000 		.4byte	.LASF50
 1483 02bf 07       		.byte	0x7
 1484 02c0 67       		.byte	0x67
 1485 02c1 56020000 		.4byte	0x256
 1486 02c5 07       		.uleb128 0x7
 1487 02c6 06       		.byte	0x6
 1488 02c7 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 44


 1489 02c8 2E       		.byte	0x2e
 1490 02c9 FE020000 		.4byte	0x2fe
 1491 02cd 09       		.uleb128 0x9
 1492 02ce 57000000 		.4byte	.LASF51
 1493 02d2 08       		.byte	0x8
 1494 02d3 30       		.byte	0x30
 1495 02d4 8D000000 		.4byte	0x8d
 1496 02d8 00       		.byte	0
 1497 02d9 09       		.uleb128 0x9
 1498 02da 41000000 		.4byte	.LASF52
 1499 02de 08       		.byte	0x8
 1500 02df 31       		.byte	0x31
 1501 02e0 99000000 		.4byte	0x99
 1502 02e4 02       		.byte	0x2
 1503 02e5 09       		.uleb128 0x9
 1504 02e6 48050000 		.4byte	.LASF53
 1505 02ea 08       		.byte	0x8
 1506 02eb 32       		.byte	0x32
 1507 02ec 81000000 		.4byte	0x81
 1508 02f0 04       		.byte	0x4
 1509 02f1 09       		.uleb128 0x9
 1510 02f2 33060000 		.4byte	.LASF54
 1511 02f6 08       		.byte	0x8
 1512 02f7 33       		.byte	0x33
 1513 02f8 81000000 		.4byte	0x81
 1514 02fc 05       		.byte	0x5
 1515 02fd 00       		.byte	0
 1516 02fe 03       		.uleb128 0x3
 1517 02ff 5B020000 		.4byte	.LASF55
 1518 0303 08       		.byte	0x8
 1519 0304 36       		.byte	0x36
 1520 0305 09030000 		.4byte	0x309
 1521 0309 06       		.uleb128 0x6
 1522 030a C5020000 		.4byte	0x2c5
 1523 030e 07       		.uleb128 0x7
 1524 030f 1C       		.byte	0x1c
 1525 0310 08       		.byte	0x8
 1526 0311 39       		.byte	0x39
 1527 0312 2F030000 		.4byte	0x32f
 1528 0316 09       		.uleb128 0x9
 1529 0317 0E020000 		.4byte	.LASF56
 1530 031b 08       		.byte	0x8
 1531 031c 3B       		.byte	0x3b
 1532 031d 2F030000 		.4byte	0x32f
 1533 0321 00       		.byte	0
 1534 0322 09       		.uleb128 0x9
 1535 0323 3B010000 		.4byte	.LASF57
 1536 0327 08       		.byte	0x8
 1537 0328 3C       		.byte	0x3c
 1538 0329 52010000 		.4byte	0x152
 1539 032d 04       		.byte	0x4
 1540 032e 00       		.byte	0
 1541 032f 0C       		.uleb128 0xc
 1542 0330 04       		.byte	0x4
 1543 0331 D7010000 		.4byte	0x1d7
 1544 0335 03       		.uleb128 0x3
 1545 0336 B5030000 		.4byte	.LASF58
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 45


 1546 033a 08       		.byte	0x8
 1547 033b 3E       		.byte	0x3e
 1548 033c 0E030000 		.4byte	0x30e
 1549 0340 07       		.uleb128 0x7
 1550 0341 68       		.byte	0x68
 1551 0342 08       		.byte	0x8
 1552 0343 44       		.byte	0x44
 1553 0344 61030000 		.4byte	0x361
 1554 0348 09       		.uleb128 0x9
 1555 0349 79000000 		.4byte	.LASF59
 1556 034d 08       		.byte	0x8
 1557 034e 49       		.byte	0x49
 1558 034f 61030000 		.4byte	0x361
 1559 0353 00       		.byte	0
 1560 0354 09       		.uleb128 0x9
 1561 0355 67010000 		.4byte	.LASF60
 1562 0359 08       		.byte	0x8
 1563 035a 4A       		.byte	0x4a
 1564 035b 68000000 		.4byte	0x68
 1565 035f 64       		.byte	0x64
 1566 0360 00       		.byte	0
 1567 0361 0A       		.uleb128 0xa
 1568 0362 BF000000 		.4byte	0xbf
 1569 0366 71030000 		.4byte	0x371
 1570 036a 0B       		.uleb128 0xb
 1571 036b 4B010000 		.4byte	0x14b
 1572 036f 63       		.byte	0x63
 1573 0370 00       		.byte	0
 1574 0371 03       		.uleb128 0x3
 1575 0372 32000000 		.4byte	.LASF61
 1576 0376 08       		.byte	0x8
 1577 0377 50       		.byte	0x50
 1578 0378 40030000 		.4byte	0x340
 1579 037c 0D       		.uleb128 0xd
 1580 037d FB040000 		.4byte	.LASF62
 1581 0381 01       		.byte	0x1
 1582 0382 36       		.byte	0x36
 1583 0383 00000000 		.4byte	.LFB64
 1584 0387 0E000000 		.4byte	.LFE64-.LFB64
 1585 038b 01       		.uleb128 0x1
 1586 038c 9C       		.byte	0x9c
 1587 038d 0D       		.uleb128 0xd
 1588 038e C5040000 		.4byte	.LASF63
 1589 0392 01       		.byte	0x1
 1590 0393 51       		.byte	0x51
 1591 0394 00000000 		.4byte	.LFB65
 1592 0398 0E000000 		.4byte	.LFE65-.LFB65
 1593 039c 01       		.uleb128 0x1
 1594 039d 9C       		.byte	0x9c
 1595 039e 0D       		.uleb128 0xd
 1596 039f 5D040000 		.4byte	.LASF64
 1597 03a3 01       		.byte	0x1
 1598 03a4 6C       		.byte	0x6c
 1599 03a5 00000000 		.4byte	.LFB66
 1600 03a9 0E000000 		.4byte	.LFE66-.LFB66
 1601 03ad 01       		.uleb128 0x1
 1602 03ae 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 46


 1603 03af 0D       		.uleb128 0xd
 1604 03b0 47020000 		.4byte	.LASF65
 1605 03b4 01       		.byte	0x1
 1606 03b5 87       		.byte	0x87
 1607 03b6 00000000 		.4byte	.LFB67
 1608 03ba 0E000000 		.4byte	.LFE67-.LFB67
 1609 03be 01       		.uleb128 0x1
 1610 03bf 9C       		.byte	0x9c
 1611 03c0 0D       		.uleb128 0xd
 1612 03c1 0F010000 		.4byte	.LASF66
 1613 03c5 01       		.byte	0x1
 1614 03c6 A2       		.byte	0xa2
 1615 03c7 00000000 		.4byte	.LFB68
 1616 03cb 0E000000 		.4byte	.LFE68-.LFB68
 1617 03cf 01       		.uleb128 0x1
 1618 03d0 9C       		.byte	0x9c
 1619 03d1 0D       		.uleb128 0xd
 1620 03d2 19020000 		.4byte	.LASF67
 1621 03d6 01       		.byte	0x1
 1622 03d7 BD       		.byte	0xbd
 1623 03d8 00000000 		.4byte	.LFB69
 1624 03dc 0E000000 		.4byte	.LFE69-.LFB69
 1625 03e0 01       		.uleb128 0x1
 1626 03e1 9C       		.byte	0x9c
 1627 03e2 0D       		.uleb128 0xd
 1628 03e3 FB020000 		.4byte	.LASF68
 1629 03e7 01       		.byte	0x1
 1630 03e8 D8       		.byte	0xd8
 1631 03e9 00000000 		.4byte	.LFB70
 1632 03ed 0E000000 		.4byte	.LFE70-.LFB70
 1633 03f1 01       		.uleb128 0x1
 1634 03f2 9C       		.byte	0x9c
 1635 03f3 0E       		.uleb128 0xe
 1636 03f4 87010000 		.4byte	.LASF106
 1637 03f8 01       		.byte	0x1
 1638 03f9 0B01     		.2byte	0x10b
 1639 03fb 00000000 		.4byte	.LFB71
 1640 03ff 18060000 		.4byte	.LFE71-.LFB71
 1641 0403 01       		.uleb128 0x1
 1642 0404 9C       		.byte	0x9c
 1643 0405 19040000 		.4byte	0x419
 1644 0409 0F       		.uleb128 0xf
 1645 040a 2A040000 		.4byte	.LASF107
 1646 040e 01       		.byte	0x1
 1647 040f 0D01     		.2byte	0x10d
 1648 0411 81000000 		.4byte	0x81
 1649 0415 02       		.uleb128 0x2
 1650 0416 91       		.byte	0x91
 1651 0417 77       		.sleb128 -9
 1652 0418 00       		.byte	0
 1653 0419 10       		.uleb128 0x10
 1654 041a CE020000 		.4byte	.LASF69
 1655 041e 05       		.byte	0x5
 1656 041f 2D01     		.2byte	0x12d
 1657 0421 34010000 		.4byte	0x134
 1658 0425 10       		.uleb128 0x10
 1659 0426 37030000 		.4byte	.LASF70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 47


 1660 042a 05       		.byte	0x5
 1661 042b 2E01     		.2byte	0x12e
 1662 042d 34010000 		.4byte	0x134
 1663 0431 10       		.uleb128 0x10
 1664 0432 09000000 		.4byte	.LASF71
 1665 0436 05       		.byte	0x5
 1666 0437 3901     		.2byte	0x139
 1667 0439 C6000000 		.4byte	0xc6
 1668 043d 10       		.uleb128 0x10
 1669 043e 74030000 		.4byte	.LASF72
 1670 0442 05       		.byte	0x5
 1671 0443 3A01     		.2byte	0x13a
 1672 0445 C6000000 		.4byte	0xc6
 1673 0449 10       		.uleb128 0x10
 1674 044a E3050000 		.4byte	.LASF73
 1675 044e 05       		.byte	0x5
 1676 044f 3B01     		.2byte	0x13b
 1677 0451 C6000000 		.4byte	0xc6
 1678 0455 10       		.uleb128 0x10
 1679 0456 56050000 		.4byte	.LASF74
 1680 045a 05       		.byte	0x5
 1681 045b 3C01     		.2byte	0x13c
 1682 045d C6000000 		.4byte	0xc6
 1683 0461 0A       		.uleb128 0xa
 1684 0462 71040000 		.4byte	0x471
 1685 0466 71040000 		.4byte	0x471
 1686 046a 0B       		.uleb128 0xb
 1687 046b 4B010000 		.4byte	0x14b
 1688 046f 0B       		.byte	0xb
 1689 0470 00       		.byte	0
 1690 0471 11       		.uleb128 0x11
 1691 0472 81000000 		.4byte	0x81
 1692 0476 10       		.uleb128 0x10
 1693 0477 21000000 		.4byte	.LASF75
 1694 047b 05       		.byte	0x5
 1695 047c 3E01     		.2byte	0x13e
 1696 047e 82040000 		.4byte	0x482
 1697 0482 11       		.uleb128 0x11
 1698 0483 61040000 		.4byte	0x461
 1699 0487 10       		.uleb128 0x10
 1700 0488 C8050000 		.4byte	.LASF76
 1701 048c 09       		.byte	0x9
 1702 048d 1207     		.2byte	0x712
 1703 048f 93040000 		.4byte	0x493
 1704 0493 06       		.uleb128 0x6
 1705 0494 76000000 		.4byte	0x76
 1706 0498 12       		.uleb128 0x12
 1707 0499 EB030000 		.4byte	.LASF77
 1708 049d 0A       		.byte	0xa
 1709 049e 25       		.byte	0x25
 1710 049f 61030000 		.4byte	0x361
 1711 04a3 05       		.uleb128 0x5
 1712 04a4 03       		.byte	0x3
 1713 04a5 00000000 		.4byte	level_sensor_inbox
 1714 04a9 12       		.uleb128 0x12
 1715 04aa CD010000 		.4byte	.LASF78
 1716 04ae 0A       		.byte	0xa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 48


 1717 04af 27       		.byte	0x27
 1718 04b0 B3020000 		.4byte	0x2b3
 1719 04b4 05       		.uleb128 0x5
 1720 04b5 03       		.byte	0x3
 1721 04b6 00000000 		.4byte	level_sensor_enabled
 1722 04ba 12       		.uleb128 0x12
 1723 04bb FE010000 		.4byte	.LASF79
 1724 04bf 06       		.byte	0x6
 1725 04c0 11       		.byte	0x11
 1726 04c1 B3020000 		.4byte	0x2b3
 1727 04c5 05       		.uleb128 0x5
 1728 04c6 03       		.byte	0x3
 1729 04c7 00000000 		.4byte	buffer_overflow
 1730 04cb 12       		.uleb128 0x12
 1731 04cc 6F010000 		.4byte	.LASF80
 1732 04d0 06       		.byte	0x6
 1733 04d1 22       		.byte	0x22
 1734 04d2 8D000000 		.4byte	0x8d
 1735 04d6 05       		.uleb128 0x5
 1736 04d7 03       		.byte	0x3
 1737 04d8 00000000 		.4byte	dataPointsInStack
 1738 04dc 12       		.uleb128 0x12
 1739 04dd A4010000 		.4byte	.LASF81
 1740 04e1 06       		.byte	0x6
 1741 04e2 23       		.byte	0x23
 1742 04e3 8D000000 		.4byte	0x8d
 1743 04e7 05       		.uleb128 0x5
 1744 04e8 03       		.byte	0x3
 1745 04e9 00000000 		.4byte	dataPointsInStackDesired
 1746 04ed 0A       		.uleb128 0xa
 1747 04ee 9F010000 		.4byte	0x19f
 1748 04f2 FD040000 		.4byte	0x4fd
 1749 04f6 0B       		.uleb128 0xb
 1750 04f7 4B010000 		.4byte	0x14b
 1751 04fb 95       		.byte	0x95
 1752 04fc 00       		.byte	0
 1753 04fd 12       		.uleb128 0x12
 1754 04fe 24010000 		.4byte	.LASF82
 1755 0502 06       		.byte	0x6
 1756 0503 24       		.byte	0x24
 1757 0504 ED040000 		.4byte	0x4ed
 1758 0508 05       		.uleb128 0x5
 1759 0509 03       		.byte	0x3
 1760 050a 00000000 		.4byte	data
 1761 050e 12       		.uleb128 0x12
 1762 050f E3020000 		.4byte	.LASF83
 1763 0513 07       		.byte	0x7
 1764 0514 20       		.byte	0x20
 1765 0515 81000000 		.4byte	0x81
 1766 0519 05       		.uleb128 0x5
 1767 051a 03       		.byte	0x3
 1768 051b 00000000 		.4byte	modem_state
 1769 051f 12       		.uleb128 0x12
 1770 0520 B7020000 		.4byte	.LASF84
 1771 0524 07       		.byte	0x7
 1772 0525 6A       		.byte	0x6a
 1773 0526 A5000000 		.4byte	0xa5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 49


 1774 052a 05       		.uleb128 0x5
 1775 052b 03       		.byte	0x3
 1776 052c 00000000 		.4byte	modem_start_time_stamp
 1777 0530 12       		.uleb128 0x12
 1778 0531 0E020000 		.4byte	.LASF56
 1779 0535 07       		.byte	0x7
 1780 0536 6B       		.byte	0x6b
 1781 0537 D7010000 		.4byte	0x1d7
 1782 053b 05       		.uleb128 0x5
 1783 053c 03       		.byte	0x3
 1784 053d 00000000 		.4byte	modem_info
 1785 0541 12       		.uleb128 0x12
 1786 0542 12050000 		.4byte	.LASF85
 1787 0546 07       		.byte	0x7
 1788 0547 6C       		.byte	0x6c
 1789 0548 4B020000 		.4byte	0x24b
 1790 054c 05       		.uleb128 0x5
 1791 054d 03       		.byte	0x3
 1792 054e 00000000 		.4byte	modem_stats
 1793 0552 12       		.uleb128 0x12
 1794 0553 B3050000 		.4byte	.LASF86
 1795 0557 07       		.byte	0x7
 1796 0558 6D       		.byte	0x6d
 1797 0559 BA020000 		.4byte	0x2ba
 1798 055d 05       		.uleb128 0x5
 1799 055e 03       		.byte	0x3
 1800 055f 00000000 		.4byte	updatable_parameters
 1801 0563 12       		.uleb128 0x12
 1802 0564 0B060000 		.4byte	.LASF87
 1803 0568 0B       		.byte	0xb
 1804 0569 07       		.byte	0x7
 1805 056a B3020000 		.4byte	0x2b3
 1806 056e 05       		.uleb128 0x5
 1807 056f 03       		.byte	0x3
 1808 0570 00000000 		.4byte	App_LED_enabled
 1809 0574 12       		.uleb128 0x12
 1810 0575 96020000 		.4byte	.LASF88
 1811 0579 0B       		.byte	0xb
 1812 057a 08       		.byte	0x8
 1813 057b 61030000 		.4byte	0x361
 1814 057f 05       		.uleb128 0x5
 1815 0580 03       		.byte	0x3
 1816 0581 00000000 		.4byte	app_led_inbox
 1817 0585 0A       		.uleb128 0xa
 1818 0586 BF000000 		.4byte	0xbf
 1819 058a 96050000 		.4byte	0x596
 1820 058e 13       		.uleb128 0x13
 1821 058f 4B010000 		.4byte	0x14b
 1822 0593 0F27     		.2byte	0x270f
 1823 0595 00       		.byte	0
 1824 0596 12       		.uleb128 0x12
 1825 0597 1B060000 		.4byte	.LASF89
 1826 059b 08       		.byte	0x8
 1827 059c 18       		.byte	0x18
 1828 059d 85050000 		.4byte	0x585
 1829 05a1 05       		.uleb128 0x5
 1830 05a2 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 50


 1831 05a3 00000000 		.4byte	http_request
 1832 05a7 12       		.uleb128 0x12
 1833 05a8 F7050000 		.4byte	.LASF90
 1834 05ac 08       		.byte	0x8
 1835 05ad 19       		.byte	0x19
 1836 05ae 85050000 		.4byte	0x585
 1837 05b2 05       		.uleb128 0x5
 1838 05b3 03       		.byte	0x3
 1839 05b4 00000000 		.4byte	http_body
 1840 05b8 0A       		.uleb128 0xa
 1841 05b9 BF000000 		.4byte	0xbf
 1842 05bd C8050000 		.4byte	0x5c8
 1843 05c1 0B       		.uleb128 0xb
 1844 05c2 4B010000 		.4byte	0x14b
 1845 05c6 C7       		.byte	0xc7
 1846 05c7 00       		.byte	0
 1847 05c8 12       		.uleb128 0x12
 1848 05c9 BA040000 		.4byte	.LASF91
 1849 05cd 08       		.byte	0x8
 1850 05ce 1A       		.byte	0x1a
 1851 05cf B8050000 		.4byte	0x5b8
 1852 05d3 05       		.uleb128 0x5
 1853 05d4 03       		.byte	0x3
 1854 05d5 00000000 		.4byte	http_route
 1855 05d9 12       		.uleb128 0x12
 1856 05da FE030000 		.4byte	.LASF92
 1857 05de 08       		.byte	0x8
 1858 05df 41       		.byte	0x41
 1859 05e0 35030000 		.4byte	0x335
 1860 05e4 05       		.uleb128 0x5
 1861 05e5 03       		.byte	0x3
 1862 05e6 00000000 		.4byte	system_info
 1863 05ea 12       		.uleb128 0x12
 1864 05eb 27030000 		.4byte	.LASF93
 1865 05ef 08       		.byte	0x8
 1866 05f0 53       		.byte	0x53
 1867 05f1 71030000 		.4byte	0x371
 1868 05f5 05       		.uleb128 0x5
 1869 05f6 03       		.byte	0x3
 1870 05f7 00000000 		.4byte	system_settings
 1871 05fb 12       		.uleb128 0x12
 1872 05fc 2F020000 		.4byte	.LASF94
 1873 0600 08       		.byte	0x8
 1874 0601 6F       		.byte	0x6f
 1875 0602 FE020000 		.4byte	0x2fe
 1876 0606 05       		.uleb128 0x5
 1877 0607 03       		.byte	0x3
 1878 0608 00000000 		.4byte	alarmMeasure
 1879 060c 12       		.uleb128 0x12
 1880 060d 87030000 		.4byte	.LASF95
 1881 0611 08       		.byte	0x8
 1882 0612 70       		.byte	0x70
 1883 0613 81000000 		.4byte	0x81
 1884 0617 05       		.uleb128 0x5
 1885 0618 03       		.byte	0x3
 1886 0619 00000000 		.4byte	timeToMeasure
 1887 061d 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 51


 1888 061e 80020000 		.4byte	.LASF96
 1889 0622 08       		.byte	0x8
 1890 0623 71       		.byte	0x71
 1891 0624 FE020000 		.4byte	0x2fe
 1892 0628 05       		.uleb128 0x5
 1893 0629 03       		.byte	0x3
 1894 062a 00000000 		.4byte	alarmSync
 1895 062e 12       		.uleb128 0x12
 1896 062f 28060000 		.4byte	.LASF97
 1897 0633 08       		.byte	0x8
 1898 0634 72       		.byte	0x72
 1899 0635 81000000 		.4byte	0x81
 1900 0639 05       		.uleb128 0x5
 1901 063a 03       		.byte	0x3
 1902 063b 00000000 		.4byte	timeToSync
 1903 063f 12       		.uleb128 0x12
 1904 0640 46040000 		.4byte	.LASF98
 1905 0644 08       		.byte	0x8
 1906 0645 73       		.byte	0x73
 1907 0646 81000000 		.4byte	0x81
 1908 064a 05       		.uleb128 0x5
 1909 064b 03       		.byte	0x3
 1910 064c 00000000 		.4byte	timeToSycnRemoteParams
 1911 0650 14       		.uleb128 0x14
 1912 0651 68657900 		.ascii	"hey\000"
 1913 0655 08       		.byte	0x8
 1914 0656 74       		.byte	0x74
 1915 0657 81000000 		.4byte	0x81
 1916 065b 05       		.uleb128 0x5
 1917 065c 03       		.byte	0x3
 1918 065d 00000000 		.4byte	hey
 1919 0661 12       		.uleb128 0x12
 1920 0662 4E010000 		.4byte	.LASF99
 1921 0666 08       		.byte	0x8
 1922 0667 77       		.byte	0x77
 1923 0668 FE020000 		.4byte	0x2fe
 1924 066c 05       		.uleb128 0x5
 1925 066d 03       		.byte	0x3
 1926 066e 00000000 		.4byte	alarmAppLED
 1927 0672 12       		.uleb128 0x12
 1928 0673 73050000 		.4byte	.LASF100
 1929 0677 08       		.byte	0x8
 1930 0678 78       		.byte	0x78
 1931 0679 81000000 		.4byte	0x81
 1932 067d 05       		.uleb128 0x5
 1933 067e 03       		.byte	0x3
 1934 067f 00000000 		.4byte	timeToAppLED
 1935 0683 12       		.uleb128 0x12
 1936 0684 1E050000 		.4byte	.LASF101
 1937 0688 08       		.byte	0x8
 1938 0689 7A       		.byte	0x7a
 1939 068a FE020000 		.4byte	0x2fe
 1940 068e 05       		.uleb128 0x5
 1941 068f 03       		.byte	0x3
 1942 0690 00000000 		.4byte	alarmLevelSensor
 1943 0694 12       		.uleb128 0x12
 1944 0695 A1050000 		.4byte	.LASF102
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 52


 1945 0699 08       		.byte	0x8
 1946 069a 7B       		.byte	0x7b
 1947 069b 81000000 		.4byte	0x81
 1948 069f 05       		.uleb128 0x5
 1949 06a0 03       		.byte	0x3
 1950 06a1 00000000 		.4byte	timetoLevelSensor
 1951 06a5 00       		.byte	0
 1952              		.section	.debug_abbrev,"",%progbits
 1953              	.Ldebug_abbrev0:
 1954 0000 01       		.uleb128 0x1
 1955 0001 11       		.uleb128 0x11
 1956 0002 01       		.byte	0x1
 1957 0003 25       		.uleb128 0x25
 1958 0004 0E       		.uleb128 0xe
 1959 0005 13       		.uleb128 0x13
 1960 0006 0B       		.uleb128 0xb
 1961 0007 03       		.uleb128 0x3
 1962 0008 0E       		.uleb128 0xe
 1963 0009 1B       		.uleb128 0x1b
 1964 000a 0E       		.uleb128 0xe
 1965 000b 55       		.uleb128 0x55
 1966 000c 17       		.uleb128 0x17
 1967 000d 11       		.uleb128 0x11
 1968 000e 01       		.uleb128 0x1
 1969 000f 10       		.uleb128 0x10
 1970 0010 17       		.uleb128 0x17
 1971 0011 00       		.byte	0
 1972 0012 00       		.byte	0
 1973 0013 02       		.uleb128 0x2
 1974 0014 24       		.uleb128 0x24
 1975 0015 00       		.byte	0
 1976 0016 0B       		.uleb128 0xb
 1977 0017 0B       		.uleb128 0xb
 1978 0018 3E       		.uleb128 0x3e
 1979 0019 0B       		.uleb128 0xb
 1980 001a 03       		.uleb128 0x3
 1981 001b 0E       		.uleb128 0xe
 1982 001c 00       		.byte	0
 1983 001d 00       		.byte	0
 1984 001e 03       		.uleb128 0x3
 1985 001f 16       		.uleb128 0x16
 1986 0020 00       		.byte	0
 1987 0021 03       		.uleb128 0x3
 1988 0022 0E       		.uleb128 0xe
 1989 0023 3A       		.uleb128 0x3a
 1990 0024 0B       		.uleb128 0xb
 1991 0025 3B       		.uleb128 0x3b
 1992 0026 0B       		.uleb128 0xb
 1993 0027 49       		.uleb128 0x49
 1994 0028 13       		.uleb128 0x13
 1995 0029 00       		.byte	0
 1996 002a 00       		.byte	0
 1997 002b 04       		.uleb128 0x4
 1998 002c 24       		.uleb128 0x24
 1999 002d 00       		.byte	0
 2000 002e 0B       		.uleb128 0xb
 2001 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 53


 2002 0030 3E       		.uleb128 0x3e
 2003 0031 0B       		.uleb128 0xb
 2004 0032 03       		.uleb128 0x3
 2005 0033 08       		.uleb128 0x8
 2006 0034 00       		.byte	0
 2007 0035 00       		.byte	0
 2008 0036 05       		.uleb128 0x5
 2009 0037 16       		.uleb128 0x16
 2010 0038 00       		.byte	0
 2011 0039 03       		.uleb128 0x3
 2012 003a 0E       		.uleb128 0xe
 2013 003b 3A       		.uleb128 0x3a
 2014 003c 0B       		.uleb128 0xb
 2015 003d 3B       		.uleb128 0x3b
 2016 003e 05       		.uleb128 0x5
 2017 003f 49       		.uleb128 0x49
 2018 0040 13       		.uleb128 0x13
 2019 0041 00       		.byte	0
 2020 0042 00       		.byte	0
 2021 0043 06       		.uleb128 0x6
 2022 0044 35       		.uleb128 0x35
 2023 0045 00       		.byte	0
 2024 0046 49       		.uleb128 0x49
 2025 0047 13       		.uleb128 0x13
 2026 0048 00       		.byte	0
 2027 0049 00       		.byte	0
 2028 004a 07       		.uleb128 0x7
 2029 004b 13       		.uleb128 0x13
 2030 004c 01       		.byte	0x1
 2031 004d 0B       		.uleb128 0xb
 2032 004e 0B       		.uleb128 0xb
 2033 004f 3A       		.uleb128 0x3a
 2034 0050 0B       		.uleb128 0xb
 2035 0051 3B       		.uleb128 0x3b
 2036 0052 0B       		.uleb128 0xb
 2037 0053 01       		.uleb128 0x1
 2038 0054 13       		.uleb128 0x13
 2039 0055 00       		.byte	0
 2040 0056 00       		.byte	0
 2041 0057 08       		.uleb128 0x8
 2042 0058 0D       		.uleb128 0xd
 2043 0059 00       		.byte	0
 2044 005a 03       		.uleb128 0x3
 2045 005b 08       		.uleb128 0x8
 2046 005c 3A       		.uleb128 0x3a
 2047 005d 0B       		.uleb128 0xb
 2048 005e 3B       		.uleb128 0x3b
 2049 005f 0B       		.uleb128 0xb
 2050 0060 49       		.uleb128 0x49
 2051 0061 13       		.uleb128 0x13
 2052 0062 38       		.uleb128 0x38
 2053 0063 0B       		.uleb128 0xb
 2054 0064 00       		.byte	0
 2055 0065 00       		.byte	0
 2056 0066 09       		.uleb128 0x9
 2057 0067 0D       		.uleb128 0xd
 2058 0068 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 54


 2059 0069 03       		.uleb128 0x3
 2060 006a 0E       		.uleb128 0xe
 2061 006b 3A       		.uleb128 0x3a
 2062 006c 0B       		.uleb128 0xb
 2063 006d 3B       		.uleb128 0x3b
 2064 006e 0B       		.uleb128 0xb
 2065 006f 49       		.uleb128 0x49
 2066 0070 13       		.uleb128 0x13
 2067 0071 38       		.uleb128 0x38
 2068 0072 0B       		.uleb128 0xb
 2069 0073 00       		.byte	0
 2070 0074 00       		.byte	0
 2071 0075 0A       		.uleb128 0xa
 2072 0076 01       		.uleb128 0x1
 2073 0077 01       		.byte	0x1
 2074 0078 49       		.uleb128 0x49
 2075 0079 13       		.uleb128 0x13
 2076 007a 01       		.uleb128 0x1
 2077 007b 13       		.uleb128 0x13
 2078 007c 00       		.byte	0
 2079 007d 00       		.byte	0
 2080 007e 0B       		.uleb128 0xb
 2081 007f 21       		.uleb128 0x21
 2082 0080 00       		.byte	0
 2083 0081 49       		.uleb128 0x49
 2084 0082 13       		.uleb128 0x13
 2085 0083 2F       		.uleb128 0x2f
 2086 0084 0B       		.uleb128 0xb
 2087 0085 00       		.byte	0
 2088 0086 00       		.byte	0
 2089 0087 0C       		.uleb128 0xc
 2090 0088 0F       		.uleb128 0xf
 2091 0089 00       		.byte	0
 2092 008a 0B       		.uleb128 0xb
 2093 008b 0B       		.uleb128 0xb
 2094 008c 49       		.uleb128 0x49
 2095 008d 13       		.uleb128 0x13
 2096 008e 00       		.byte	0
 2097 008f 00       		.byte	0
 2098 0090 0D       		.uleb128 0xd
 2099 0091 2E       		.uleb128 0x2e
 2100 0092 00       		.byte	0
 2101 0093 03       		.uleb128 0x3
 2102 0094 0E       		.uleb128 0xe
 2103 0095 3A       		.uleb128 0x3a
 2104 0096 0B       		.uleb128 0xb
 2105 0097 3B       		.uleb128 0x3b
 2106 0098 0B       		.uleb128 0xb
 2107 0099 27       		.uleb128 0x27
 2108 009a 19       		.uleb128 0x19
 2109 009b 11       		.uleb128 0x11
 2110 009c 01       		.uleb128 0x1
 2111 009d 12       		.uleb128 0x12
 2112 009e 06       		.uleb128 0x6
 2113 009f 40       		.uleb128 0x40
 2114 00a0 18       		.uleb128 0x18
 2115 00a1 9642     		.uleb128 0x2116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 55


 2116 00a3 19       		.uleb128 0x19
 2117 00a4 00       		.byte	0
 2118 00a5 00       		.byte	0
 2119 00a6 0E       		.uleb128 0xe
 2120 00a7 2E       		.uleb128 0x2e
 2121 00a8 01       		.byte	0x1
 2122 00a9 3F       		.uleb128 0x3f
 2123 00aa 19       		.uleb128 0x19
 2124 00ab 03       		.uleb128 0x3
 2125 00ac 0E       		.uleb128 0xe
 2126 00ad 3A       		.uleb128 0x3a
 2127 00ae 0B       		.uleb128 0xb
 2128 00af 3B       		.uleb128 0x3b
 2129 00b0 05       		.uleb128 0x5
 2130 00b1 27       		.uleb128 0x27
 2131 00b2 19       		.uleb128 0x19
 2132 00b3 11       		.uleb128 0x11
 2133 00b4 01       		.uleb128 0x1
 2134 00b5 12       		.uleb128 0x12
 2135 00b6 06       		.uleb128 0x6
 2136 00b7 40       		.uleb128 0x40
 2137 00b8 18       		.uleb128 0x18
 2138 00b9 9642     		.uleb128 0x2116
 2139 00bb 19       		.uleb128 0x19
 2140 00bc 01       		.uleb128 0x1
 2141 00bd 13       		.uleb128 0x13
 2142 00be 00       		.byte	0
 2143 00bf 00       		.byte	0
 2144 00c0 0F       		.uleb128 0xf
 2145 00c1 34       		.uleb128 0x34
 2146 00c2 00       		.byte	0
 2147 00c3 03       		.uleb128 0x3
 2148 00c4 0E       		.uleb128 0xe
 2149 00c5 3A       		.uleb128 0x3a
 2150 00c6 0B       		.uleb128 0xb
 2151 00c7 3B       		.uleb128 0x3b
 2152 00c8 05       		.uleb128 0x5
 2153 00c9 49       		.uleb128 0x49
 2154 00ca 13       		.uleb128 0x13
 2155 00cb 02       		.uleb128 0x2
 2156 00cc 18       		.uleb128 0x18
 2157 00cd 00       		.byte	0
 2158 00ce 00       		.byte	0
 2159 00cf 10       		.uleb128 0x10
 2160 00d0 34       		.uleb128 0x34
 2161 00d1 00       		.byte	0
 2162 00d2 03       		.uleb128 0x3
 2163 00d3 0E       		.uleb128 0xe
 2164 00d4 3A       		.uleb128 0x3a
 2165 00d5 0B       		.uleb128 0xb
 2166 00d6 3B       		.uleb128 0x3b
 2167 00d7 05       		.uleb128 0x5
 2168 00d8 49       		.uleb128 0x49
 2169 00d9 13       		.uleb128 0x13
 2170 00da 3F       		.uleb128 0x3f
 2171 00db 19       		.uleb128 0x19
 2172 00dc 3C       		.uleb128 0x3c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 56


 2173 00dd 19       		.uleb128 0x19
 2174 00de 00       		.byte	0
 2175 00df 00       		.byte	0
 2176 00e0 11       		.uleb128 0x11
 2177 00e1 26       		.uleb128 0x26
 2178 00e2 00       		.byte	0
 2179 00e3 49       		.uleb128 0x49
 2180 00e4 13       		.uleb128 0x13
 2181 00e5 00       		.byte	0
 2182 00e6 00       		.byte	0
 2183 00e7 12       		.uleb128 0x12
 2184 00e8 34       		.uleb128 0x34
 2185 00e9 00       		.byte	0
 2186 00ea 03       		.uleb128 0x3
 2187 00eb 0E       		.uleb128 0xe
 2188 00ec 3A       		.uleb128 0x3a
 2189 00ed 0B       		.uleb128 0xb
 2190 00ee 3B       		.uleb128 0x3b
 2191 00ef 0B       		.uleb128 0xb
 2192 00f0 49       		.uleb128 0x49
 2193 00f1 13       		.uleb128 0x13
 2194 00f2 3F       		.uleb128 0x3f
 2195 00f3 19       		.uleb128 0x19
 2196 00f4 02       		.uleb128 0x2
 2197 00f5 18       		.uleb128 0x18
 2198 00f6 00       		.byte	0
 2199 00f7 00       		.byte	0
 2200 00f8 13       		.uleb128 0x13
 2201 00f9 21       		.uleb128 0x21
 2202 00fa 00       		.byte	0
 2203 00fb 49       		.uleb128 0x49
 2204 00fc 13       		.uleb128 0x13
 2205 00fd 2F       		.uleb128 0x2f
 2206 00fe 05       		.uleb128 0x5
 2207 00ff 00       		.byte	0
 2208 0100 00       		.byte	0
 2209 0101 14       		.uleb128 0x14
 2210 0102 34       		.uleb128 0x34
 2211 0103 00       		.byte	0
 2212 0104 03       		.uleb128 0x3
 2213 0105 08       		.uleb128 0x8
 2214 0106 3A       		.uleb128 0x3a
 2215 0107 0B       		.uleb128 0xb
 2216 0108 3B       		.uleb128 0x3b
 2217 0109 0B       		.uleb128 0xb
 2218 010a 49       		.uleb128 0x49
 2219 010b 13       		.uleb128 0x13
 2220 010c 3F       		.uleb128 0x3f
 2221 010d 19       		.uleb128 0x19
 2222 010e 02       		.uleb128 0x2
 2223 010f 18       		.uleb128 0x18
 2224 0110 00       		.byte	0
 2225 0111 00       		.byte	0
 2226 0112 00       		.byte	0
 2227              		.section	.debug_aranges,"",%progbits
 2228 0000 54000000 		.4byte	0x54
 2229 0004 0200     		.2byte	0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 57


 2230 0006 00000000 		.4byte	.Ldebug_info0
 2231 000a 04       		.byte	0x4
 2232 000b 00       		.byte	0
 2233 000c 0000     		.2byte	0
 2234 000e 0000     		.2byte	0
 2235 0010 00000000 		.4byte	.LFB64
 2236 0014 0E000000 		.4byte	.LFE64-.LFB64
 2237 0018 00000000 		.4byte	.LFB65
 2238 001c 0E000000 		.4byte	.LFE65-.LFB65
 2239 0020 00000000 		.4byte	.LFB66
 2240 0024 0E000000 		.4byte	.LFE66-.LFB66
 2241 0028 00000000 		.4byte	.LFB67
 2242 002c 0E000000 		.4byte	.LFE67-.LFB67
 2243 0030 00000000 		.4byte	.LFB68
 2244 0034 0E000000 		.4byte	.LFE68-.LFB68
 2245 0038 00000000 		.4byte	.LFB69
 2246 003c 0E000000 		.4byte	.LFE69-.LFB69
 2247 0040 00000000 		.4byte	.LFB70
 2248 0044 0E000000 		.4byte	.LFE70-.LFB70
 2249 0048 00000000 		.4byte	.LFB71
 2250 004c 18060000 		.4byte	.LFE71-.LFB71
 2251 0050 00000000 		.4byte	0
 2252 0054 00000000 		.4byte	0
 2253              		.section	.debug_ranges,"",%progbits
 2254              	.Ldebug_ranges0:
 2255 0000 00000000 		.4byte	.LFB64
 2256 0004 0E000000 		.4byte	.LFE64
 2257 0008 00000000 		.4byte	.LFB65
 2258 000c 0E000000 		.4byte	.LFE65
 2259 0010 00000000 		.4byte	.LFB66
 2260 0014 0E000000 		.4byte	.LFE66
 2261 0018 00000000 		.4byte	.LFB67
 2262 001c 0E000000 		.4byte	.LFE67
 2263 0020 00000000 		.4byte	.LFB68
 2264 0024 0E000000 		.4byte	.LFE68
 2265 0028 00000000 		.4byte	.LFB69
 2266 002c 0E000000 		.4byte	.LFE69
 2267 0030 00000000 		.4byte	.LFB70
 2268 0034 0E000000 		.4byte	.LFE70
 2269 0038 00000000 		.4byte	.LFB71
 2270 003c 18060000 		.4byte	.LFE71
 2271 0040 00000000 		.4byte	0
 2272 0044 00000000 		.4byte	0
 2273              		.section	.debug_line,"",%progbits
 2274              	.Ldebug_line0:
 2275 0000 05030000 		.section	.debug_str,"MS",%progbits,1
 2275      0200A401 
 2275      00000201 
 2275      FB0E0D00 
 2275      01010101 
 2276              	.LASF31:
 2277 0000 6D6F6465 		.ascii	"model_id\000"
 2277      6C5F6964 
 2277      00
 2278              	.LASF71:
 2279 0009 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2279      616C6172 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 58


 2279      6D436667 
 2279      4D61736B 
 2279      00
 2280              	.LASF30:
 2281 001a 73696D5F 		.ascii	"sim_id\000"
 2281      696400
 2282              	.LASF75:
 2283 0021 5254435F 		.ascii	"RTC_daysInMonths\000"
 2283      64617973 
 2283      496E4D6F 
 2283      6E746873 
 2283      00
 2284              	.LASF61:
 2285 0032 7379735F 		.ascii	"sys_settings_t\000"
 2285      73657474 
 2285      696E6773 
 2285      5F7400
 2286              	.LASF52:
 2287 0041 63757272 		.ascii	"currentCountDownValue\000"
 2287      656E7443 
 2287      6F756E74 
 2287      446F776E 
 2287      56616C75 
 2288              	.LASF51:
 2289 0057 636F756E 		.ascii	"countDownValue\000"
 2289      74446F77 
 2289      6E56616C 
 2289      756500
 2290              	.LASF2:
 2291 0066 73686F72 		.ascii	"short int\000"
 2291      7420696E 
 2291      7400
 2292              	.LASF26:
 2293 0070 73697A65 		.ascii	"sizetype\000"
 2293      74797065 
 2293      00
 2294              	.LASF59:
 2295 0079 65705F68 		.ascii	"ep_host\000"
 2295      6F737400 
 2296              	.LASF103:
 2297 0081 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2297      43313120 
 2297      352E342E 
 2297      31203230 
 2297      31363036 
 2298 00b4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2298      20726576 
 2298      6973696F 
 2298      6E203233 
 2298      37373135 
 2299 00e7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2299      66756E63 
 2299      74696F6E 
 2299      2D736563 
 2299      74696F6E 
 2300              	.LASF66:
 2301 010f 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 59


 2301      45766572 
 2301      79576565 
 2301      6B48616E 
 2301      646C6572 
 2302              	.LASF82:
 2303 0124 64617461 		.ascii	"data\000"
 2303      00
 2304              	.LASF47:
 2305 0129 4170705F 		.ascii	"App_LED_freq\000"
 2305      4C45445F 
 2305      66726571 
 2305      00
 2306              	.LASF18:
 2307 0136 486F7572 		.ascii	"Hour\000"
 2307      00
 2308              	.LASF57:
 2309 013b 63686970 		.ascii	"chip_uniqueId\000"
 2309      5F756E69 
 2309      71756549 
 2309      6400
 2310              	.LASF36:
 2311 0149 65636E6F 		.ascii	"ecno\000"
 2311      00
 2312              	.LASF99:
 2313 014e 616C6172 		.ascii	"alarmAppLED\000"
 2313      6D417070 
 2313      4C454400 
 2314              	.LASF27:
 2315 015a 76616C75 		.ascii	"value\000"
 2315      6500
 2316              	.LASF12:
 2317 0160 75696E74 		.ascii	"uint16\000"
 2317      313600
 2318              	.LASF60:
 2319 0167 65705F70 		.ascii	"ep_port\000"
 2319      6F727400 
 2320              	.LASF80:
 2321 016f 64617461 		.ascii	"dataPointsInStack\000"
 2321      506F696E 
 2321      7473496E 
 2321      53746163 
 2321      6B00
 2322              	.LASF11:
 2323 0181 75696E74 		.ascii	"uint8\000"
 2323      3800
 2324              	.LASF106:
 2325 0187 5254435F 		.ascii	"RTC_ISR\000"
 2325      49535200 
 2326              	.LASF35:
 2327 018f 72736370 		.ascii	"rscp\000"
 2327      00
 2328              	.LASF13:
 2329 0194 696E7431 		.ascii	"int16\000"
 2329      3600
 2330              	.LASF28:
 2331 019a 74696D65 		.ascii	"timeStamp\000"
 2331      5374616D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 60


 2331      7000
 2332              	.LASF81:
 2333 01a4 64617461 		.ascii	"dataPointsInStackDesired\000"
 2333      506F696E 
 2333      7473496E 
 2333      53746163 
 2333      6B446573 
 2334              	.LASF15:
 2335 01bd 666C6F61 		.ascii	"float\000"
 2335      7400
 2336              	.LASF19:
 2337 01c3 4461794F 		.ascii	"DayOfWeek\000"
 2337      66576565 
 2337      6B00
 2338              	.LASF78:
 2339 01cd 6C657665 		.ascii	"level_sensor_enabled\000"
 2339      6C5F7365 
 2339      6E736F72 
 2339      5F656E61 
 2339      626C6564 
 2340              	.LASF6:
 2341 01e2 6C6F6E67 		.ascii	"long long int\000"
 2341      206C6F6E 
 2341      6720696E 
 2341      7400
 2342              	.LASF17:
 2343 01f0 63686172 		.ascii	"char\000"
 2343      00
 2344              	.LASF4:
 2345 01f5 6C6F6E67 		.ascii	"long int\000"
 2345      20696E74 
 2345      00
 2346              	.LASF79:
 2347 01fe 62756666 		.ascii	"buffer_overflow\000"
 2347      65725F6F 
 2347      76657266 
 2347      6C6F7700 
 2348              	.LASF56:
 2349 020e 6D6F6465 		.ascii	"modem_info\000"
 2349      6D5F696E 
 2349      666F00
 2350              	.LASF67:
 2351 0219 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2351      45766572 
 2351      794D6F6E 
 2351      74684861 
 2351      6E646C65 
 2352              	.LASF94:
 2353 022f 616C6172 		.ascii	"alarmMeasure\000"
 2353      6D4D6561 
 2353      73757265 
 2353      00
 2354              	.LASF23:
 2355 023c 59656172 		.ascii	"Year\000"
 2355      00
 2356              	.LASF22:
 2357 0241 4D6F6E74 		.ascii	"Month\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 61


 2357      6800
 2358              	.LASF65:
 2359 0247 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2359      45766572 
 2359      79446179 
 2359      48616E64 
 2359      6C657200 
 2360              	.LASF55:
 2361 025b 616C6172 		.ascii	"alarm\000"
 2361      6D00
 2362              	.LASF44:
 2363 0261 6D656173 		.ascii	"measure_time\000"
 2363      7572655F 
 2363      74696D65 
 2363      00
 2364              	.LASF48:
 2365 026e 4C657665 		.ascii	"Level_Sensor_freq\000"
 2365      6C5F5365 
 2365      6E736F72 
 2365      5F667265 
 2365      7100
 2366              	.LASF96:
 2367 0280 616C6172 		.ascii	"alarmSync\000"
 2367      6D53796E 
 2367      6300
 2368              	.LASF25:
 2369 028a 6C6F6E67 		.ascii	"long double\000"
 2369      20646F75 
 2369      626C6500 
 2370              	.LASF88:
 2371 0296 6170705F 		.ascii	"app_led_inbox\000"
 2371      6C65645F 
 2371      696E626F 
 2371      7800
 2372              	.LASF1:
 2373 02a4 756E7369 		.ascii	"unsigned char\000"
 2373      676E6564 
 2373      20636861 
 2373      7200
 2374              	.LASF38:
 2375 02b2 72737270 		.ascii	"rsrp\000"
 2375      00
 2376              	.LASF84:
 2377 02b7 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2377      6D5F7374 
 2377      6172745F 
 2377      74696D65 
 2377      5F737461 
 2378              	.LASF69:
 2379 02ce 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2379      616C6172 
 2379      6D436667 
 2379      54696D65 
 2379      44617465 
 2380              	.LASF83:
 2381 02e3 6D6F6465 		.ascii	"modem_state\000"
 2381      6D5F7374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 62


 2381      61746500 
 2382              	.LASF0:
 2383 02ef 7369676E 		.ascii	"signed char\000"
 2383      65642063 
 2383      68617200 
 2384              	.LASF68:
 2385 02fb 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2385      45766572 
 2385      79596561 
 2385      7248616E 
 2385      646C6572 
 2386              	.LASF7:
 2387 0310 6C6F6E67 		.ascii	"long long unsigned int\000"
 2387      206C6F6E 
 2387      6720756E 
 2387      7369676E 
 2387      65642069 
 2388              	.LASF93:
 2389 0327 73797374 		.ascii	"system_settings\000"
 2389      656D5F73 
 2389      65747469 
 2389      6E677300 
 2390              	.LASF70:
 2391 0337 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2391      63757272 
 2391      656E7454 
 2391      696D6544 
 2391      61746500 
 2392              	.LASF8:
 2393 034b 756E7369 		.ascii	"unsigned int\000"
 2393      676E6564 
 2393      20696E74 
 2393      00
 2394              	.LASF29:
 2395 0358 6B65795F 		.ascii	"key_value_t\000"
 2395      76616C75 
 2395      655F7400 
 2396              	.LASF34:
 2397 0364 72786C65 		.ascii	"rxlev\000"
 2397      7600
 2398              	.LASF45:
 2399 036a 73796E63 		.ascii	"sync_time\000"
 2399      5F74696D 
 2399      6500
 2400              	.LASF72:
 2401 0374 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2401      616C6172 
 2401      6D437572 
 2401      53746174 
 2401      757300
 2402              	.LASF95:
 2403 0387 74696D65 		.ascii	"timeToMeasure\000"
 2403      546F4D65 
 2403      61737572 
 2403      6500
 2404              	.LASF50:
 2405 0395 75706461 		.ascii	"updatable_parameters_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 63


 2405      7461626C 
 2405      655F7061 
 2405      72616D65 
 2405      74657273 
 2406              	.LASF43:
 2407 03ac 73696D5F 		.ascii	"sim_type\000"
 2407      74797065 
 2407      00
 2408              	.LASF58:
 2409 03b5 7379735F 		.ascii	"sys_info_t\000"
 2409      696E666F 
 2409      5F7400
 2410              	.LASF3:
 2411 03c0 73686F72 		.ascii	"short unsigned int\000"
 2411      7420756E 
 2411      7369676E 
 2411      65642069 
 2411      6E7400
 2412              	.LASF39:
 2413 03d3 74696D65 		.ascii	"time_to_network_connect\000"
 2413      5F746F5F 
 2413      6E657477 
 2413      6F726B5F 
 2413      636F6E6E 
 2414              	.LASF77:
 2415 03eb 6C657665 		.ascii	"level_sensor_inbox\000"
 2415      6C5F7365 
 2415      6E736F72 
 2415      5F696E62 
 2415      6F7800
 2416              	.LASF92:
 2417 03fe 73797374 		.ascii	"system_info\000"
 2417      656D5F69 
 2417      6E666F00 
 2418              	.LASF40:
 2419 040a 74696D65 		.ascii	"time_to_acquire_ip\000"
 2419      5F746F5F 
 2419      61637175 
 2419      6972655F 
 2419      697000
 2420              	.LASF32:
 2421 041d 696D6569 		.ascii	"imei\000"
 2421      00
 2422              	.LASF10:
 2423 0422 696E7433 		.ascii	"int32_t\000"
 2423      325F7400 
 2424              	.LASF107:
 2425 042a 5254435F 		.ascii	"RTC_tmp\000"
 2425      746D7000 
 2426              	.LASF41:
 2427 0432 6D6F6465 		.ascii	"modem_stats_t\000"
 2427      6D5F7374 
 2427      6174735F 
 2427      7400
 2428              	.LASF49:
 2429 0440 5F426F6F 		.ascii	"_Bool\000"
 2429      6C00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 64


 2430              	.LASF98:
 2431 0446 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2431      546F5379 
 2431      636E5265 
 2431      6D6F7465 
 2431      50617261 
 2432              	.LASF64:
 2433 045d 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2433      45766572 
 2433      79486F75 
 2433      7248616E 
 2433      646C6572 
 2434              	.LASF20:
 2435 0472 4461794F 		.ascii	"DayOfMonth\000"
 2435      664D6F6E 
 2435      746800
 2436              	.LASF37:
 2437 047d 72737271 		.ascii	"rsrq\000"
 2437      00
 2438              	.LASF105:
 2439 0482 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2439      73657273 
 2439      5C64616E 
 2439      747A5C44 
 2439      6F63756D 
 2440 04af 72694F53 		.ascii	"riOS.cydsn\000"
 2440      2E637964 
 2440      736E00
 2441              	.LASF91:
 2442 04ba 68747470 		.ascii	"http_route\000"
 2442      5F726F75 
 2442      746500
 2443              	.LASF63:
 2444 04c5 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2444      45766572 
 2444      794D696E 
 2444      75746548 
 2444      616E646C 
 2445              	.LASF5:
 2446 04dc 6C6F6E67 		.ascii	"long unsigned int\000"
 2446      20756E73 
 2446      69676E65 
 2446      6420696E 
 2446      7400
 2447              	.LASF14:
 2448 04ee 696E7433 		.ascii	"int32\000"
 2448      3200
 2449              	.LASF16:
 2450 04f4 646F7562 		.ascii	"double\000"
 2450      6C6500
 2451              	.LASF62:
 2452 04fb 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2452      45766572 
 2452      79536563 
 2452      6F6E6448 
 2452      616E646C 
 2453              	.LASF85:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 65


 2454 0512 6D6F6465 		.ascii	"modem_stats\000"
 2454      6D5F7374 
 2454      61747300 
 2455              	.LASF101:
 2456 051e 616C6172 		.ascii	"alarmLevelSensor\000"
 2456      6D4C6576 
 2456      656C5365 
 2456      6E736F72 
 2456      00
 2457              	.LASF46:
 2458 052f 64656275 		.ascii	"debug_level\000"
 2458      675F6C65 
 2458      76656C00 
 2459              	.LASF33:
 2460 053b 6D6F6465 		.ascii	"modem_info_t\000"
 2460      6D5F696E 
 2460      666F5F74 
 2460      00
 2461              	.LASF53:
 2462 0548 636F756E 		.ascii	"countDownType\000"
 2462      74446F77 
 2462      6E547970 
 2462      6500
 2463              	.LASF74:
 2464 0556 5254435F 		.ascii	"RTC_statusDateTime\000"
 2464      73746174 
 2464      75734461 
 2464      74655469 
 2464      6D6500
 2465              	.LASF9:
 2466 0569 5F5F696E 		.ascii	"__int32_t\000"
 2466      7433325F 
 2466      7400
 2467              	.LASF100:
 2468 0573 74696D65 		.ascii	"timeToAppLED\000"
 2468      546F4170 
 2468      704C4544 
 2468      00
 2469              	.LASF104:
 2470 0580 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2470      72617465 
 2470      645F536F 
 2470      75726365 
 2470      5C50536F 
 2471              	.LASF102:
 2472 05a1 74696D65 		.ascii	"timetoLevelSensor\000"
 2472      746F4C65 
 2472      76656C53 
 2472      656E736F 
 2472      7200
 2473              	.LASF86:
 2474 05b3 75706461 		.ascii	"updatable_parameters\000"
 2474      7461626C 
 2474      655F7061 
 2474      72616D65 
 2474      74657273 
 2475              	.LASF76:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7S4gso.s 			page 66


 2476 05c8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2476      52784275 
 2476      66666572 
 2476      00
 2477              	.LASF24:
 2478 05d5 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2478      54494D45 
 2478      5F444154 
 2478      4500
 2479              	.LASF73:
 2480 05e3 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2480      696E7465 
 2480      7276616C 
 2480      4366674D 
 2480      61736B00 
 2481              	.LASF90:
 2482 05f7 68747470 		.ascii	"http_body\000"
 2482      5F626F64 
 2482      7900
 2483              	.LASF42:
 2484 0601 6E6F6465 		.ascii	"node_type\000"
 2484      5F747970 
 2484      6500
 2485              	.LASF87:
 2486 060b 4170705F 		.ascii	"App_LED_enabled\000"
 2486      4C45445F 
 2486      656E6162 
 2486      6C656400 
 2487              	.LASF89:
 2488 061b 68747470 		.ascii	"http_request\000"
 2488      5F726571 
 2488      75657374 
 2488      00
 2489              	.LASF97:
 2490 0628 74696D65 		.ascii	"timeToSync\000"
 2490      546F5379 
 2490      6E6300
 2491              	.LASF54:
 2492 0633 636F756E 		.ascii	"countDownResetCondition\000"
 2492      74446F77 
 2492      6E526573 
 2492      6574436F 
 2492      6E646974 
 2493              	.LASF21:
 2494 064b 4461794F 		.ascii	"DayOfYear\000"
 2494      66596561 
 2494      7200
 2495              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
