ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,7,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	level_sensor_enabled,1,1
  34              		.comm	App_LED_enabled,1,1
  35              		.comm	app_led_inbox,100,4
  36              		.comm	http_request,10000,4
  37              		.comm	http_body,10000,4
  38              		.comm	http_route,200,4
  39              		.comm	system_info,28,4
  40              		.comm	system_settings,104,4
  41              		.comm	alarmMeasure,6,4
  42              		.comm	timeToMeasure,1,1
  43              		.comm	alarmSync,6,4
  44              		.comm	timeToSync,1,1
  45              		.comm	timeToSycnRemoteParams,1,1
  46              		.comm	hey,1,1
  47              		.comm	alarmAppLED,6,4
  48              		.comm	timeToAppLED,1,1
  49              		.comm	alarmLevelSensor,6,4
  50              		.comm	timetoLevelSensor,1,1
  51              		.comm	uart_received_string,1024,4
  52              		.global	uart_string_index
  53              		.bss
  54              		.align	1
  55              		.type	uart_string_index, %object
  56              		.size	uart_string_index, 2
  57              	uart_string_index:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 2


  58 0000 0000     		.space	2
  59              		.section	.text.isr_telit_rx,"ax",%progbits
  60              		.align	2
  61              		.global	isr_telit_rx
  62              		.thumb
  63              		.thumb_func
  64              		.type	isr_telit_rx, %function
  65              	isr_telit_rx:
  66              	.LFB64:
  67              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  68              		.loc 1 18 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72 0000 98B5     		push	{r3, r4, r7, lr}
  73              		.cfi_def_cfa_offset 16
  74              		.cfi_offset 3, -16
  75              		.cfi_offset 4, -12
  76              		.cfi_offset 7, -8
  77              		.cfi_offset 14, -4
  78 0002 00AF     		add	r7, sp, #0
  79              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  80              		.loc 1 20 0
  81 0004 12E0     		b	.L2
  82              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  83              		.loc 1 21 0
  84 0006 0D4B     		ldr	r3, .L4
  85 0008 B3F90030 		ldrsh	r3, [r3]
  86 000c 1C46     		mov	r4, r3
  87 000e FFF7FEFF 		bl	UART_Telit_GetChar
  88 0012 0346     		mov	r3, r0
  89 0014 1A46     		mov	r2, r3
  90 0016 0A4B     		ldr	r3, .L4+4
  91 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  92              		.loc 1 22 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 3


  93 001a 084B     		ldr	r3, .L4
  94 001c B3F90030 		ldrsh	r3, [r3]
  95 0020 9BB2     		uxth	r3, r3
  96 0022 0133     		adds	r3, r3, #1
  97 0024 9BB2     		uxth	r3, r3
  98 0026 1AB2     		sxth	r2, r3
  99 0028 044B     		ldr	r3, .L4
 100 002a 1A80     		strh	r2, [r3]	@ movhi
 101              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 102              		.loc 1 20 0
 103 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 104 0030 0346     		mov	r3, r0
 105 0032 012B     		cmp	r3, #1
 106 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 107              		.loc 1 25 0
 108 0036 00BF     		nop
 109 0038 98BD     		pop	{r3, r4, r7, pc}
 110              	.L5:
 111 003a 00BF     		.align	2
 112              	.L4:
 113 003c 00000000 		.word	uart_string_index
 114 0040 00000000 		.word	uart_received_string
 115              		.cfi_endproc
 116              	.LFE64:
 117              		.size	isr_telit_rx, .-isr_telit_rx
 118              		.section	.text.modem_initialize,"ax",%progbits
 119              		.align	2
 120              		.global	modem_initialize
 121              		.thumb
 122              		.thumb_func
 123              		.type	modem_initialize, %function
 124              	modem_initialize:
 125              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 126              		.loc 1 28 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130 0000 80B5     		push	{r7, lr}
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 7, -8
 133              		.cfi_offset 14, -4
 134 0002 00AF     		add	r7, sp, #0
 135              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 136              		.loc 1 31 0
 137 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 138              		.loc 1 32 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 4


 139 0008 154B     		ldr	r3, .L7
 140 000a 0022     		movs	r2, #0
 141 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 142              		.loc 1 34 0
 143 000e 154B     		ldr	r3, .L7+4
 144 0010 0022     		movs	r2, #0
 145 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 146              		.loc 1 35 0
 147 0016 134B     		ldr	r3, .L7+4
 148 0018 0022     		movs	r2, #0
 149 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 150              		.loc 1 36 0
 151 001c 114B     		ldr	r3, .L7+4
 152 001e 0022     		movs	r2, #0
 153 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 154              		.loc 1 37 0
 155 0022 114B     		ldr	r3, .L7+8
 156 0024 0022     		movs	r2, #0
 157 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 158              		.loc 1 38 0
 159 0028 0F4B     		ldr	r3, .L7+8
 160 002a 0022     		movs	r2, #0
 161 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 162              		.loc 1 39 0
 163 002e 0E4B     		ldr	r3, .L7+8
 164 0030 0022     		movs	r2, #0
 165 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 166              		.loc 1 40 0
 167 0034 0C4B     		ldr	r3, .L7+8
 168 0036 0022     		movs	r2, #0
 169 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 170              		.loc 1 41 0
 171 003a 0B4B     		ldr	r3, .L7+8
 172 003c 0022     		movs	r2, #0
 173 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 174              		.loc 1 42 0
 175 0040 094B     		ldr	r3, .L7+8
 176 0042 0022     		movs	r2, #0
 177 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 178              		.loc 1 43 0
 179 0046 084B     		ldr	r3, .L7+8
 180 0048 0022     		movs	r2, #0
 181 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 182              		.loc 1 44 0
 183 004c 064B     		ldr	r3, .L7+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 5


 184 004e 0022     		movs	r2, #0
 185 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 186              		.loc 1 48 0
 187 0052 0021     		movs	r1, #0
 188 0054 4020     		movs	r0, #64
 189 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 190              		.loc 1 50 0
 191 005a 00BF     		nop
 192 005c 80BD     		pop	{r7, pc}
 193              	.L8:
 194 005e 00BF     		.align	2
 195              	.L7:
 196 0060 00000000 		.word	modem_state
 197 0064 00000000 		.word	modem_info
 198 0068 00000000 		.word	modem_stats
 199              		.cfi_endproc
 200              	.LFE65:
 201              		.size	modem_initialize, .-modem_initialize
 202              		.section	.text.pins_configure_inactive,"ax",%progbits
 203              		.align	2
 204              		.global	pins_configure_inactive
 205              		.thumb
 206              		.thumb_func
 207              		.type	pins_configure_inactive, %function
 208              	pins_configure_inactive:
 209              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 210              		.loc 1 54 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 220              		.loc 1 56 0
 221 0004 0020     		movs	r0, #0
 222 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 223              		.loc 1 57 0
 224 000a 0C20     		movs	r0, #12
 225 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 6


 226              		.loc 1 59 0
 227 0010 0020     		movs	r0, #0
 228 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 229              		.loc 1 62 0
 230 0016 0020     		movs	r0, #0
 231 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 232              		.loc 1 63 0
 233 001c 0020     		movs	r0, #0
 234 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 235              		.loc 1 64 0
 236 0022 0020     		movs	r0, #0
 237 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 238              		.loc 1 65 0
 239 0028 0020     		movs	r0, #0
 240 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 241              		.loc 1 67 0
 242 002e 00BF     		nop
 243 0030 80BD     		pop	{r7, pc}
 244              		.cfi_endproc
 245              	.LFE66:
 246              		.size	pins_configure_inactive, .-pins_configure_inactive
 247 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 248              		.align	2
 249              		.global	pins_configure_active
 250              		.thumb
 251              		.thumb_func
 252              		.type	pins_configure_active, %function
 253              	pins_configure_active:
 254              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 255              		.loc 1 70 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 1, uses_anonymous_args = 0
 259 0000 80B5     		push	{r7, lr}
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 00AF     		add	r7, sp, #0
 264              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 265              		.loc 1 72 0
 266 0004 0220     		movs	r0, #2
 267 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 268              		.loc 1 73 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 7


 269 000a 0120     		movs	r0, #1
 270 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 271              		.loc 1 74 0
 272 0010 0120     		movs	r0, #1
 273 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 274              		.loc 1 75 0
 275 0016 6420     		movs	r0, #100
 276 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 277              		.loc 1 76 0
 278 001c 00BF     		nop
 279 001e 80BD     		pop	{r7, pc}
 280              		.cfi_endproc
 281              	.LFE67:
 282              		.size	pins_configure_active, .-pins_configure_active
 283              		.section	.rodata
 284              		.align	2
 285              	.LC0:
 286 0000 4F4B00   		.ascii	"OK\000"
 287 0003 00       		.align	2
 288              	.LC1:
 289 0004 41542353 		.ascii	"AT#SHDN\015\000"
 289      48444E0D 
 289      00
 290              		.section	.text.modem_power_down,"ax",%progbits
 291              		.align	2
 292              		.global	modem_power_down
 293              		.thumb
 294              		.thumb_func
 295              		.type	modem_power_down, %function
 296              	modem_power_down:
 297              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 298              		.loc 1 79 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 0000 80B5     		push	{r7, lr}
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 7, -8
 305              		.cfi_offset 14, -4
 306 0002 00AF     		add	r7, sp, #0
 307              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 308              		.loc 1 82 0
 309 0004 41F28832 		movw	r2, #5000
 310 0008 0A49     		ldr	r1, .L12
 311 000a 0B48     		ldr	r0, .L12+4
 312 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 8


  85:modem.c       ****     modem_soft_power_cycle();
 313              		.loc 1 85 0
 314 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 315              		.loc 1 86 0
 316 0014 4FF47A70 		mov	r0, #1000
 317 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 318              		.loc 1 88 0
 319 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 320              		.loc 1 89 0
 321 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 322              		.loc 1 90 0
 323 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 324              		.loc 1 91 0
 325 0028 044B     		ldr	r3, .L12+8
 326 002a 0022     		movs	r2, #0
 327 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 328              		.loc 1 93 0
 329 002e 00BF     		nop
 330 0030 80BD     		pop	{r7, pc}
 331              	.L13:
 332 0032 00BF     		.align	2
 333              	.L12:
 334 0034 00000000 		.word	.LC0
 335 0038 04000000 		.word	.LC1
 336 003c 00000000 		.word	modem_state
 337              		.cfi_endproc
 338              	.LFE68:
 339              		.size	modem_power_down, .-modem_power_down
 340              		.section	.rodata
 341 000d 000000   		.align	2
 342              	.LC2:
 343 0010 41544530 		.ascii	"ATE0\015\000"
 343      0D00
 344 0016 0000     		.align	2
 345              	.LC3:
 346 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 346      6D20626F 
 346      6F742074 
 346      696D653A 
 346      20256400 
 347              		.align	2
 348              	.LC4:
 349 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 349      6D207265 
 349      61647920 
 349      666F7220 
 349      41542063 
 350 005d 000000   		.align	2
 351              	.LC5:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 9


 352 0060 4E6F2072 		.ascii	"No response from modem.\000"
 352      6573706F 
 352      6E736520 
 352      66726F6D 
 352      206D6F64 
 353              		.section	.text.modem_power_up,"ax",%progbits
 354              		.align	2
 355              		.global	modem_power_up
 356              		.thumb
 357              		.thumb_func
 358              		.type	modem_power_up, %function
 359              	modem_power_up:
 360              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 361              		.loc 1 97 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 8
 364              		@ frame_needed = 1, uses_anonymous_args = 0
 365 0000 80B5     		push	{r7, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 82B0     		sub	sp, sp, #8
 370              		.cfi_def_cfa_offset 16
 371 0004 00AF     		add	r7, sp, #0
 372              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 373              		.loc 1 99 0
 374 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 375              		.loc 1 100 0
 376 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 377              		.loc 1 101 0
 378 000e 2C48     		ldr	r0, .L27
 379 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 380              		.loc 1 103 0
 381 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 382              		.loc 1 106 0
 383 0018 0023     		movs	r3, #0
 384 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 385              		.loc 1 107 0
 386 001c 0023     		movs	r3, #0
 387 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 388              		.loc 1 109 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 10


 389 0020 FFF7FEFF 		bl	getTimeStamp
 390 0024 3860     		str	r0, [r7]
 391              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 392              		.loc 1 112 0
 393 0026 0023     		movs	r3, #0
 394 0028 BB71     		strb	r3, [r7, #6]
 395 002a 1CE0     		b	.L15
 396              	.L22:
 397              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 398              		.loc 1 114 0
 399 002c 0023     		movs	r3, #0
 400 002e 7B71     		strb	r3, [r7, #5]
 401 0030 0EE0     		b	.L16
 402              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 403              		.loc 1 116 0
 404 0032 4FF47A72 		mov	r2, #1000
 405 0036 2349     		ldr	r1, .L27+4
 406 0038 2348     		ldr	r0, .L27+8
 407 003a FFF7FEFF 		bl	at_write_command
 408 003e 0346     		mov	r3, r0
 409 0040 002B     		cmp	r3, #0
 410 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 411              		.loc 1 117 0
 412 0044 0123     		movs	r3, #1
 413 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 414              		.loc 1 118 0
 415 0048 05E0     		b	.L18
 416              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 417              		.loc 1 114 0 discriminator 2
 418 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 419 004c 0133     		adds	r3, r3, #1
 420 004e 7B71     		strb	r3, [r7, #5]
 421              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 422              		.loc 1 114 0 is_stmt 0 discriminator 1
 423 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 424 0052 132B     		cmp	r3, #19
 425 0054 EDD9     		bls	.L19
 426              	.L18:
 427              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 428              		.loc 1 122 0 is_stmt 1
 429 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 430 0058 012B     		cmp	r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 11


 431 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 432              		.loc 1 126 0 discriminator 2
 433 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 434              		.loc 1 112 0 discriminator 2
 435 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 436 0062 0133     		adds	r3, r3, #1
 437 0064 BB71     		strb	r3, [r7, #6]
 438              	.L15:
 112:modem.c       ****         
 439              		.loc 1 112 0 is_stmt 0 discriminator 1
 440 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 441 0068 022B     		cmp	r3, #2
 442 006a DFD9     		bls	.L22
 443 006c 00E0     		b	.L21
 444              	.L26:
 123:modem.c       ****             break;
 445              		.loc 1 123 0 is_stmt 1
 446 006e 00BF     		nop
 447              	.L21:
 448              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 449              		.loc 1 130 0
 450 0070 FFF7FEFF 		bl	getTimeStamp
 451 0074 0246     		mov	r2, r0
 452 0076 3B68     		ldr	r3, [r7]
 453 0078 D31A     		subs	r3, r2, r3
 454 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 455              		.loc 1 131 0
 456 007c 3A68     		ldr	r2, [r7]
 457 007e 1349     		ldr	r1, .L27+12
 458 0080 0020     		movs	r0, #0
 459 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 460              		.loc 1 133 0
 461 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 462 0088 012B     		cmp	r3, #1
 463 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 464              		.loc 1 134 0
 465 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 466 008e 1A46     		mov	r2, r3
 467 0090 0F49     		ldr	r1, .L27+16
 468 0092 0020     		movs	r0, #0
 469 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 470              		.loc 1 135 0
 471 0098 0E4B     		ldr	r3, .L27+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 12


 472 009a 0122     		movs	r2, #1
 473 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 474              		.loc 1 143 0
 475 009e 0123     		movs	r3, #1
 476 00a0 09E0     		b	.L25
 477              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 478              		.loc 1 137 0
 479 00a2 0D49     		ldr	r1, .L27+24
 480 00a4 0220     		movs	r0, #2
 481 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 482              		.loc 1 138 0
 483 00aa 0A4B     		ldr	r3, .L27+20
 484 00ac 0022     		movs	r2, #0
 485 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 486              		.loc 1 140 0
 487 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 488              		.loc 1 141 0
 489 00b4 0023     		movs	r3, #0
 490              	.L25:
 144:modem.c       **** }
 491              		.loc 1 144 0
 492 00b6 1846     		mov	r0, r3
 493 00b8 0837     		adds	r7, r7, #8
 494              		.cfi_def_cfa_offset 8
 495 00ba BD46     		mov	sp, r7
 496              		.cfi_def_cfa_register 13
 497              		@ sp needed
 498 00bc 80BD     		pop	{r7, pc}
 499              	.L28:
 500 00be 00BF     		.align	2
 501              	.L27:
 502 00c0 00000000 		.word	isr_telit_rx
 503 00c4 00000000 		.word	.LC0
 504 00c8 10000000 		.word	.LC2
 505 00cc 18000000 		.word	.LC3
 506 00d0 2C000000 		.word	.LC4
 507 00d4 00000000 		.word	modem_state
 508 00d8 60000000 		.word	.LC5
 509              		.cfi_endproc
 510              	.LFE69:
 511              		.size	modem_power_up, .-modem_power_up
 512              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 513              		.align	2
 514              		.global	modem_soft_power_cycle
 515              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 13


 516              		.thumb_func
 517              		.type	modem_soft_power_cycle, %function
 518              	modem_soft_power_cycle:
 519              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 520              		.loc 1 147 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0000 80B5     		push	{r7, lr}
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 530              		.loc 1 148 0
 531 0004 0120     		movs	r0, #1
 532 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 533              		.loc 1 149 0
 534 000a 4FF4FA60 		mov	r0, #2000
 535 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 536              		.loc 1 150 0
 537 0012 0020     		movs	r0, #0
 538 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 539              		.loc 1 152 0
 540 0018 00BF     		nop
 541 001a 80BD     		pop	{r7, pc}
 542              		.cfi_endproc
 543              	.LFE70:
 544              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 545              		.section	.text.uart_string_reset,"ax",%progbits
 546              		.align	2
 547              		.global	uart_string_reset
 548              		.thumb
 549              		.thumb_func
 550              		.type	uart_string_reset, %function
 551              	uart_string_reset:
 552              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 553              		.loc 1 155 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 80B5     		push	{r7, lr}
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 14


 562              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 563              		.loc 1 156 0
 564 0004 064B     		ldr	r3, .L31
 565 0006 0022     		movs	r2, #0
 566 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 567              		.loc 1 158 0
 568 000a 4FF48062 		mov	r2, #1024
 569 000e 0021     		movs	r1, #0
 570 0010 0448     		ldr	r0, .L31+4
 571 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 572              		.loc 1 160 0
 573 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 574              		.loc 1 161 0
 575 001a 00BF     		nop
 576 001c 80BD     		pop	{r7, pc}
 577              	.L32:
 578 001e 00BF     		.align	2
 579              	.L31:
 580 0020 00000000 		.word	uart_string_index
 581 0024 00000000 		.word	uart_received_string
 582              		.cfi_endproc
 583              	.LFE71:
 584              		.size	uart_string_reset, .-uart_string_reset
 585              		.section	.rodata
 586              		.align	2
 587              	.LC6:
 588 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 588      6D207365 
 588      6E742041 
 588      5420636F 
 588      6D6D616E 
 589              		.align	2
 590              	.LC7:
 591 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 591      6D205265 
 591      63656976 
 591      65642065 
 591      78706563 
 592 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 592      616E643A 
 592      2025730A 
 592      52656365 
 592      69766564 
 593 00f1 000000   		.align	2
 594              	.LC8:
 595 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 595      6D207265 
 595      71756972 
 595      65642025 
 595      64207472 
 596 0127 0A00     		.ascii	"\012\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 15


 597 0129 000000   		.align	2
 598              	.LC9:
 599 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 599      64206E6F 
 599      74207772 
 599      69746520 
 599      41542063 
 600 0159 00       		.ascii	"\000"
 601              		.section	.text.at_write_command,"ax",%progbits
 602              		.align	2
 603              		.global	at_write_command
 604              		.thumb
 605              		.thumb_func
 606              		.type	at_write_command, %function
 607              	at_write_command:
 608              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 609              		.loc 1 166 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 40
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613 0000 80B5     		push	{r7, lr}
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 7, -8
 616              		.cfi_offset 14, -4
 617 0002 8AB0     		sub	sp, sp, #40
 618              		.cfi_def_cfa_offset 48
 619 0004 00AF     		add	r7, sp, #0
 620              		.cfi_def_cfa_register 7
 621 0006 F860     		str	r0, [r7, #12]
 622 0008 B960     		str	r1, [r7, #8]
 623 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 624              		.loc 1 168 0
 625 000c 0023     		movs	r3, #0
 626 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 627              		.loc 1 170 0
 628 0010 0023     		movs	r3, #0
 629 0012 7B62     		str	r3, [r7, #36]
 630 0014 46E0     		b	.L34
 631              	.L42:
 632              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 633              		.loc 1 173 0
 634 0016 0A23     		movs	r3, #10
 635 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 636              		.loc 1 174 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 16


 637 001a 7A68     		ldr	r2, [r7, #4]
 638 001c FB69     		ldr	r3, [r7, #28]
 639 001e B2FBF3F3 		udiv	r3, r2, r3
 640 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 641              		.loc 1 177 0
 642 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 643              		.loc 1 180 0
 644 0028 F868     		ldr	r0, [r7, #12]
 645 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 646              		.loc 1 184 0
 647 002e 7B68     		ldr	r3, [r7, #4]
 648 0030 002B     		cmp	r3, #0
 649 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 650              		.loc 1 185 0
 651 0034 FA68     		ldr	r2, [r7, #12]
 652 0036 1F49     		ldr	r1, .L43
 653 0038 0020     		movs	r0, #0
 654 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 655              		.loc 1 186 0
 656 003e 0123     		movs	r3, #1
 657 0040 34E0     		b	.L36
 658              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 659              		.loc 1 190 0
 660 0042 0023     		movs	r3, #0
 661 0044 3B62     		str	r3, [r7, #32]
 662 0046 20E0     		b	.L37
 663              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 664              		.loc 1 191 0
 665 0048 F869     		ldr	r0, [r7, #28]
 666 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 667              		.loc 1 194 0
 668 004e B968     		ldr	r1, [r7, #8]
 669 0050 1948     		ldr	r0, .L43+4
 670 0052 FFF7FEFF 		bl	strstr
 671 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 672              		.loc 1 195 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 17


 673 0058 7B69     		ldr	r3, [r7, #20]
 674 005a 002B     		cmp	r3, #0
 675 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 676              		.loc 1 196 0
 677 005e 7B6A     		ldr	r3, [r7, #36]
 678 0060 002B     		cmp	r3, #0
 679 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 680              		.loc 1 198 0
 681 0064 144B     		ldr	r3, .L43+4
 682 0066 FA68     		ldr	r2, [r7, #12]
 683 0068 1449     		ldr	r1, .L43+8
 684 006a 0020     		movs	r0, #0
 685 006c FFF7FEFF 		bl	printNotif
 686 0070 06E0     		b	.L40
 687              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 688              		.loc 1 200 0
 689 0072 7B6A     		ldr	r3, [r7, #36]
 690 0074 5A1C     		adds	r2, r3, #1
 691 0076 104B     		ldr	r3, .L43+4
 692 0078 1149     		ldr	r1, .L43+12
 693 007a 0120     		movs	r0, #1
 694 007c FFF7FEFF 		bl	printNotif
 695              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 696              		.loc 1 203 0
 697 0080 0123     		movs	r3, #1
 698 0082 13E0     		b	.L36
 699              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 700              		.loc 1 190 0 discriminator 2
 701 0084 3B6A     		ldr	r3, [r7, #32]
 702 0086 0133     		adds	r3, r3, #1
 703 0088 3B62     		str	r3, [r7, #32]
 704              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 705              		.loc 1 190 0 is_stmt 0 discriminator 1
 706 008a 3A6A     		ldr	r2, [r7, #32]
 707 008c BB69     		ldr	r3, [r7, #24]
 708 008e 9A42     		cmp	r2, r3
 709 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 710              		.loc 1 209 0 is_stmt 1 discriminator 2
 711 0092 094B     		ldr	r3, .L43+4
 712 0094 FA68     		ldr	r2, [r7, #12]
 713 0096 0B49     		ldr	r1, .L43+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 18


 714 0098 0220     		movs	r0, #2
 715 009a FFF7FEFF 		bl	printNotif
 716              	.LBE4:
 170:modem.c       ****         
 717              		.loc 1 170 0 discriminator 2
 718 009e 7B6A     		ldr	r3, [r7, #36]
 719 00a0 0133     		adds	r3, r3, #1
 720 00a2 7B62     		str	r3, [r7, #36]
 721              	.L34:
 170:modem.c       ****         
 722              		.loc 1 170 0 is_stmt 0 discriminator 1
 723 00a4 7B6A     		ldr	r3, [r7, #36]
 724 00a6 022B     		cmp	r3, #2
 725 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 726              		.loc 1 214 0 is_stmt 1
 727 00aa 0023     		movs	r3, #0
 728              	.L36:
 215:modem.c       **** }
 729              		.loc 1 215 0
 730 00ac 1846     		mov	r0, r3
 731 00ae 2837     		adds	r7, r7, #40
 732              		.cfi_def_cfa_offset 8
 733 00b0 BD46     		mov	sp, r7
 734              		.cfi_def_cfa_register 13
 735              		@ sp needed
 736 00b2 80BD     		pop	{r7, pc}
 737              	.L44:
 738              		.align	2
 739              	.L43:
 740 00b4 78000000 		.word	.LC6
 741 00b8 00000000 		.word	uart_received_string
 742 00bc A4000000 		.word	.LC7
 743 00c0 F4000000 		.word	.LC8
 744 00c4 2C010000 		.word	.LC9
 745              		.cfi_endproc
 746              	.LFE72:
 747              		.size	at_write_command, .-at_write_command
 748              		.section	.rodata
 749 015a 0000     		.align	2
 750              	.LC10:
 751 015c 54455354 		.ascii	"TEST_MODEM\000"
 751      5F4D4F44 
 751      454D00
 752 0167 00       		.align	2
 753              	.LC11:
 754 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 754      65706F6E 
 754      73652066 
 754      726F6D20 
 754      6D6F6465 
 755 017f 00       		.align	2
 756              	.LC12:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 19


 757 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 757      6D20636F 
 757      6E6E6563 
 757      74656420 
 757      746F206E 
 758              		.section	.text.modem_test,"ax",%progbits
 759              		.align	2
 760              		.global	modem_test
 761              		.thumb
 762              		.thumb_func
 763              		.type	modem_test, %function
 764              	modem_test:
 765              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 766              		.loc 1 218 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 408
 769              		@ frame_needed = 1, uses_anonymous_args = 0
 770 0000 B0B5     		push	{r4, r5, r7, lr}
 771              		.cfi_def_cfa_offset 16
 772              		.cfi_offset 4, -16
 773              		.cfi_offset 5, -12
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 E6B0     		sub	sp, sp, #408
 777              		.cfi_def_cfa_offset 424
 778 0004 00AF     		add	r7, sp, #0
 779              		.cfi_def_cfa_register 7
 780 0006 3B1D     		adds	r3, r7, #4
 781 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 782              		.loc 1 221 0
 783 000a 07F10C03 		add	r3, r7, #12
 784 000e 0022     		movs	r2, #0
 785 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 786              		.loc 1 223 0
 787 0014 07F10C03 		add	r3, r7, #12
 788 0018 364A     		ldr	r2, .L53
 789 001a 07CA     		ldmia	r2, {r0, r1, r2}
 790 001c 03C3     		stmia	r3!, {r0, r1}
 791 001e 1A80     		strh	r2, [r3]	@ movhi
 792 0020 0233     		adds	r3, r3, #2
 793 0022 120C     		lsrs	r2, r2, #16
 794 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 795              		.loc 1 224 0
 796 0026 07F10C03 		add	r3, r7, #12
 797 002a 8133     		adds	r3, r3, #129
 798 002c 324A     		ldr	r2, .L53+4
 799 002e 1C46     		mov	r4, r3
 800 0030 1546     		mov	r5, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 20


 801 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 802 0034 2060     		str	r0, [r4]	@ unaligned
 803 0036 6160     		str	r1, [r4, #4]	@ unaligned
 804 0038 A260     		str	r2, [r4, #8]	@ unaligned
 805 003a E360     		str	r3, [r4, #12]	@ unaligned
 806 003c 2868     		ldr	r0, [r5]	@ unaligned
 807 003e 2061     		str	r0, [r4, #16]	@ unaligned
 808 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 809 0042 AA79     		ldrb	r2, [r5, #6]
 810 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 811 0046 1346     		mov	r3, r2
 812 0048 A375     		strb	r3, [r4, #22]
 813              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 814              		.loc 1 227 0
 815 004a 0023     		movs	r3, #0
 816 004c C7F89431 		str	r3, [r7, #404]
 817 0050 3AE0     		b	.L46
 818              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 819              		.loc 1 229 0
 820 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 821              		.loc 1 231 0
 822 0056 FFF7FEFF 		bl	modem_get_state
 823 005a 0346     		mov	r3, r0
 824 005c 002B     		cmp	r3, #0
 825 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 826              		.loc 1 233 0
 827 0060 FFF7FEFF 		bl	modem_power_up
 828 0064 27E0     		b	.L48
 829              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 830              		.loc 1 236 0
 831 0066 FFF7FEFF 		bl	modem_get_state
 832 006a 0346     		mov	r3, r0
 833 006c 042B     		cmp	r3, #4
 834 006e 22D1     		bne	.L48
 835              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 836              		.loc 1 240 0
 837 0070 FFF7FEFF 		bl	modem_get_network_time
 838 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 839              		.loc 1 241 0
 840 0078 D7F89031 		ldr	r3, [r7, #400]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 21


 841 007c 002B     		cmp	r3, #0
 842 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 843              		.loc 1 242 0
 844 0080 D7F89001 		ldr	r0, [r7, #400]
 845 0084 FFF7FEFF 		bl	setTime
 846              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 847              		.loc 1 245 0
 848 0088 07F10C03 		add	r3, r7, #12
 849 008c 8133     		adds	r3, r3, #129
 850 008e 1B4A     		ldr	r2, .L53+8
 851 0090 1D46     		mov	r5, r3
 852 0092 1446     		mov	r4, r2
 853 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 854 0096 2860     		str	r0, [r5]	@ unaligned
 855 0098 6960     		str	r1, [r5, #4]	@ unaligned
 856 009a AA60     		str	r2, [r5, #8]	@ unaligned
 857 009c EB60     		str	r3, [r5, #12]	@ unaligned
 858 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 859 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 860 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 861 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 862              		.loc 1 246 0
 863 00a6 07F10C03 		add	r3, r7, #12
 864 00aa 0122     		movs	r2, #1
 865 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 866              		.loc 1 248 0
 867 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 868              		.loc 1 249 0
 869 00b4 0CE0     		b	.L50
 870              	.L48:
 871              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 872              		.loc 1 252 0 discriminator 2
 873 00b6 4FF47A70 		mov	r0, #1000
 874 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 875              		.loc 1 227 0 discriminator 2
 876 00be D7F89431 		ldr	r3, [r7, #404]
 877 00c2 0133     		adds	r3, r3, #1
 878 00c4 C7F89431 		str	r3, [r7, #404]
 879              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 880              		.loc 1 227 0 is_stmt 0 discriminator 1
 881 00c8 D7F89431 		ldr	r3, [r7, #404]
 882 00cc 3B2B     		cmp	r3, #59
 883 00ce C0DD     		ble	.L51
 884              	.L50:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 22


 885              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 886              		.loc 1 256 0 is_stmt 1
 887 00d0 3B1D     		adds	r3, r7, #4
 888 00d2 1A68     		ldr	r2, [r3]
 889 00d4 07F10C03 		add	r3, r7, #12
 890 00d8 1046     		mov	r0, r2
 891 00da 1946     		mov	r1, r3
 892 00dc 40F28113 		movw	r3, #385
 893 00e0 1A46     		mov	r2, r3
 894 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 895              		.loc 1 257 0
 896 00e6 3B1D     		adds	r3, r7, #4
 897 00e8 1868     		ldr	r0, [r3]
 898 00ea 07F5CC77 		add	r7, r7, #408
 899              		.cfi_def_cfa_offset 16
 900 00ee BD46     		mov	sp, r7
 901              		.cfi_def_cfa_register 13
 902              		@ sp needed
 903 00f0 B0BD     		pop	{r4, r5, r7, pc}
 904              	.L54:
 905 00f2 00BF     		.align	2
 906              	.L53:
 907 00f4 5C010000 		.word	.LC10
 908 00f8 68010000 		.word	.LC11
 909 00fc 80010000 		.word	.LC12
 910              		.cfi_endproc
 911              	.LFE73:
 912              		.size	modem_test, .-modem_test
 913              		.section	.text.extract_string,"ax",%progbits
 914              		.align	2
 915              		.global	extract_string
 916              		.thumb
 917              		.thumb_func
 918              		.type	extract_string, %function
 919              	extract_string:
 920              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 921              		.loc 1 260 0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 24
 924              		@ frame_needed = 1, uses_anonymous_args = 0
 925 0000 80B5     		push	{r7, lr}
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 86B0     		sub	sp, sp, #24
 930              		.cfi_def_cfa_offset 32
 931 0004 00AF     		add	r7, sp, #0
 932              		.cfi_def_cfa_register 7
 933 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 23


 934 0008 B960     		str	r1, [r7, #8]
 935 000a 7A60     		str	r2, [r7, #4]
 936 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 937              		.loc 1 266 0
 938 000e B968     		ldr	r1, [r7, #8]
 939 0010 F868     		ldr	r0, [r7, #12]
 940 0012 FFF7FEFF 		bl	strstr
 941 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 942              		.loc 1 267 0
 943 0018 7B69     		ldr	r3, [r7, #20]
 944 001a 002B     		cmp	r3, #0
 945 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 946              		.loc 1 269 0
 947 001e FB68     		ldr	r3, [r7, #12]
 948 0020 7B61     		str	r3, [r7, #20]
 949              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 950              		.loc 1 272 0
 951 0022 B868     		ldr	r0, [r7, #8]
 952 0024 FFF7FEFF 		bl	strlen
 953 0028 0246     		mov	r2, r0
 954 002a 7B69     		ldr	r3, [r7, #20]
 955 002c 1344     		add	r3, r3, r2
 956 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 957              		.loc 1 277 0
 958 0030 7968     		ldr	r1, [r7, #4]
 959 0032 7869     		ldr	r0, [r7, #20]
 960 0034 FFF7FEFF 		bl	strstr
 961 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 962              		.loc 1 278 0
 963 003a 3B69     		ldr	r3, [r7, #16]
 964 003c 002B     		cmp	r3, #0
 965 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 966              		.loc 1 280 0
 967 0040 F868     		ldr	r0, [r7, #12]
 968 0042 FFF7FEFF 		bl	strlen
 969 0046 0246     		mov	r2, r0
 970 0048 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 24


 971 004a 1344     		add	r3, r3, r2
 972 004c 3B61     		str	r3, [r7, #16]
 973              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 974              		.loc 1 284 0
 975 004e 3A69     		ldr	r2, [r7, #16]
 976 0050 7B69     		ldr	r3, [r7, #20]
 977 0052 D31A     		subs	r3, r2, r3
 978 0054 1A46     		mov	r2, r3
 979 0056 7969     		ldr	r1, [r7, #20]
 980 0058 3868     		ldr	r0, [r7]
 981 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 982              		.loc 1 285 0
 983 005e 3A69     		ldr	r2, [r7, #16]
 984 0060 7B69     		ldr	r3, [r7, #20]
 985 0062 D31A     		subs	r3, r2, r3
 986 0064 1A46     		mov	r2, r3
 987 0066 3B68     		ldr	r3, [r7]
 988 0068 1344     		add	r3, r3, r2
 989 006a 0022     		movs	r2, #0
 990 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 991              		.loc 1 286 0
 992 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 993              		.loc 1 288 0
 994 0070 1846     		mov	r0, r3
 995 0072 1837     		adds	r7, r7, #24
 996              		.cfi_def_cfa_offset 8
 997 0074 BD46     		mov	sp, r7
 998              		.cfi_def_cfa_register 13
 999              		@ sp needed
 1000 0076 80BD     		pop	{r7, pc}
 1001              		.cfi_endproc
 1002              	.LFE74:
 1003              		.size	extract_string, .-extract_string
 1004              		.section	.rodata
 1005              		.align	2
 1006              	.LC13:
 1007 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1007      20746F20 
 1007      636F6E6E 
 1007      65637420 
 1007      746F206E 
 1008 01c3 00       		.align	2
 1009              	.LC14:
 1010 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1010      6D207469 
 1010      6D656420 
 1010      6F757420 
 1010      6F6E206E 
 1011 01e7 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 25


 1012              	.LC15:
 1013 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1013      69726564 
 1013      20495020 
 1013      61646472 
 1013      6573733A 
 1014              		.align	2
 1015              	.LC16:
 1016 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1016      6D207469 
 1016      6D656420 
 1016      6F757420 
 1016      6F6E2049 
 1017              		.section	.text.modem_process_tasks,"ax",%progbits
 1018              		.align	2
 1019              		.global	modem_process_tasks
 1020              		.thumb
 1021              		.thumb_func
 1022              		.type	modem_process_tasks, %function
 1023              	modem_process_tasks:
 1024              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1025              		.loc 1 291 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 8
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 0000 80B5     		push	{r7, lr}
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 0002 82B0     		sub	sp, sp, #8
 1034              		.cfi_def_cfa_offset 16
 1035 0004 00AF     		add	r7, sp, #0
 1036              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1037              		.loc 1 293 0
 1038 0006 534B     		ldr	r3, .L75
 1039 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1040 000a 012B     		cmp	r3, #1
 1041 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1042              		.loc 1 295 0
 1043 000e FFF7FEFF 		bl	getTimeStamp
 1044 0012 0246     		mov	r2, r0
 1045 0014 504B     		ldr	r3, .L75+4
 1046 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1047              		.loc 1 296 0
 1048 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1049              		.loc 1 297 0
 1050 001c 4D4B     		ldr	r3, .L75
 1051 001e 0222     		movs	r2, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 26


 1052 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1053              		.loc 1 298 0
 1054 0022 0123     		movs	r3, #1
 1055 0024 92E0     		b	.L61
 1056              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1057              		.loc 1 302 0
 1058 0026 4B4B     		ldr	r3, .L75
 1059 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1060 002a 022B     		cmp	r3, #2
 1061 002c 5FD1     		bne	.L62
 1062              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1063              		.loc 1 305 0
 1064 002e 0023     		movs	r3, #0
 1065 0030 FB71     		strb	r3, [r7, #7]
 1066 0032 2BE0     		b	.L63
 1067              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1068              		.loc 1 307 0
 1069 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1070              		.loc 1 309 0
 1071 0038 484B     		ldr	r3, .L75+8
 1072 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1073 003c 83F00103 		eor	r3, r3, #1
 1074 0040 DBB2     		uxtb	r3, r3
 1075 0042 002B     		cmp	r3, #0
 1076 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1077              		.loc 1 312 0
 1078 0046 464B     		ldr	r3, .L75+12
 1079 0048 5B69     		ldr	r3, [r3, #20]
 1080 004a 1A2B     		cmp	r3, #26
 1081 004c 03DD     		ble	.L64
 1082              		.loc 1 312 0 is_stmt 0 discriminator 1
 1083 004e 444B     		ldr	r3, .L75+12
 1084 0050 5B69     		ldr	r3, [r3, #20]
 1085 0052 FF2B     		cmp	r3, #255
 1086 0054 1ED1     		bne	.L74
 1087              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1088              		.loc 1 317 0 is_stmt 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 27


 1089 0056 414B     		ldr	r3, .L75+8
 1090 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1091 005a 002B     		cmp	r3, #0
 1092 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1093              		.loc 1 320 0
 1094 005e 404B     		ldr	r3, .L75+12
 1095 0060 9B68     		ldr	r3, [r3, #8]
 1096 0062 242B     		cmp	r3, #36
 1097 0064 03DD     		ble	.L67
 1098              		.loc 1 320 0 is_stmt 0 discriminator 1
 1099 0066 3E4B     		ldr	r3, .L75+12
 1100 0068 9B68     		ldr	r3, [r3, #8]
 1101 006a FF2B     		cmp	r3, #255
 1102 006c 13D1     		bne	.L65
 1103              	.L67:
 1104              		.loc 1 320 0 discriminator 3
 1105 006e 3C4B     		ldr	r3, .L75+12
 1106 0070 5B69     		ldr	r3, [r3, #20]
 1107 0072 1A2B     		cmp	r3, #26
 1108 0074 03DD     		ble	.L66
 1109              		.loc 1 320 0 discriminator 4
 1110 0076 3A4B     		ldr	r3, .L75+12
 1111 0078 5B69     		ldr	r3, [r3, #20]
 1112 007a FF2B     		cmp	r3, #255
 1113 007c 0BD1     		bne	.L65
 1114              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1115              		.loc 1 325 0 is_stmt 1 discriminator 2
 1116 007e 4FF47A70 		mov	r0, #1000
 1117 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1118              		.loc 1 305 0 discriminator 2
 1119 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1120 0088 0133     		adds	r3, r3, #1
 1121 008a FB71     		strb	r3, [r7, #7]
 1122              	.L63:
 305:modem.c       ****             // Get cell network stats
 1123              		.loc 1 305 0 is_stmt 0 discriminator 1
 1124 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1125 008e 1D2B     		cmp	r3, #29
 1126 0090 D0D9     		bls	.L68
 1127 0092 00E0     		b	.L65
 1128              	.L74:
 313:modem.c       ****                 }
 1129              		.loc 1 313 0 is_stmt 1
 1130 0094 00BF     		nop
 1131              	.L65:
 1132              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 28


 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1133              		.loc 1 329 0
 1134 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1135 009a 0346     		mov	r3, r0
 1136 009c 002B     		cmp	r3, #0
 1137 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1138              		.loc 1 331 0
 1139 00a0 FFF7FEFF 		bl	getTimeStamp
 1140 00a4 0246     		mov	r2, r0
 1141 00a6 2C4B     		ldr	r3, .L75+4
 1142 00a8 1B68     		ldr	r3, [r3]
 1143 00aa D31A     		subs	r3, r2, r3
 1144 00ac 2C4A     		ldr	r2, .L75+12
 1145 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1146              		.loc 1 332 0
 1147 00b0 2B4B     		ldr	r3, .L75+12
 1148 00b2 9B69     		ldr	r3, [r3, #24]
 1149 00b4 1A46     		mov	r2, r3
 1150 00b6 2B49     		ldr	r1, .L75+16
 1151 00b8 0020     		movs	r0, #0
 1152 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1153              		.loc 1 334 0
 1154 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1155              		.loc 1 335 0
 1156 00c2 244B     		ldr	r3, .L75
 1157 00c4 0322     		movs	r2, #3
 1158 00c6 1A70     		strb	r2, [r3]
 1159              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1160              		.loc 1 339 0
 1161 00c8 FFF7FEFF 		bl	getTimeStamp
 1162 00cc 0246     		mov	r2, r0
 1163 00ce 224B     		ldr	r3, .L75+4
 1164 00d0 1B68     		ldr	r3, [r3]
 1165 00d2 D31A     		subs	r3, r2, r3
 1166 00d4 B42B     		cmp	r3, #180
 1167 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1168              		.loc 1 340 0
 1169 00d8 1E4B     		ldr	r3, .L75
 1170 00da 0022     		movs	r2, #0
 1171 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1172              		.loc 1 341 0
 1173 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1174              		.loc 1 342 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 29


 1175 00e2 2149     		ldr	r1, .L75+20
 1176 00e4 0220     		movs	r0, #2
 1177 00e6 FFF7FEFF 		bl	printNotif
 1178              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1179              		.loc 1 345 0
 1180 00ea 0023     		movs	r3, #0
 1181 00ec 2EE0     		b	.L61
 1182              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1183              		.loc 1 348 0
 1184 00ee 194B     		ldr	r3, .L75
 1185 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1186 00f2 032B     		cmp	r3, #3
 1187 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1188              		.loc 1 350 0
 1189 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1190 00fa 0346     		mov	r3, r0
 1191 00fc 002B     		cmp	r3, #0
 1192 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1193              		.loc 1 351 0
 1194 0100 144B     		ldr	r3, .L75
 1195 0102 0422     		movs	r2, #4
 1196 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1197              		.loc 1 353 0
 1198 0106 FFF7FEFF 		bl	getTimeStamp
 1199 010a 0246     		mov	r2, r0
 1200 010c 124B     		ldr	r3, .L75+4
 1201 010e 1B68     		ldr	r3, [r3]
 1202 0110 D31A     		subs	r3, r2, r3
 1203 0112 134A     		ldr	r2, .L75+12
 1204 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1205              		.loc 1 354 0
 1206 0116 124B     		ldr	r3, .L75+12
 1207 0118 DB69     		ldr	r3, [r3, #28]
 1208 011a 1A46     		mov	r2, r3
 1209 011c 1349     		ldr	r1, .L75+24
 1210 011e 0020     		movs	r0, #0
 1211 0120 FFF7FEFF 		bl	printNotif
 1212              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1213              		.loc 1 359 0
 1214 0124 FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 30


 1215 0128 0246     		mov	r2, r0
 1216 012a 0B4B     		ldr	r3, .L75+4
 1217 012c 1B68     		ldr	r3, [r3]
 1218 012e D31A     		subs	r3, r2, r3
 1219 0130 E62B     		cmp	r3, #230
 1220 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1221              		.loc 1 360 0
 1222 0134 074B     		ldr	r3, .L75
 1223 0136 0022     		movs	r2, #0
 1224 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1225              		.loc 1 361 0
 1226 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1227              		.loc 1 362 0
 1228 013e 0C49     		ldr	r1, .L75+28
 1229 0140 0220     		movs	r0, #2
 1230 0142 FFF7FEFF 		bl	printNotif
 1231              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1232              		.loc 1 365 0
 1233 0146 0023     		movs	r3, #0
 1234 0148 00E0     		b	.L61
 1235              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1236              		.loc 1 368 0
 1237 014a 0023     		movs	r3, #0
 1238              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1239              		.loc 1 370 0
 1240 014c 1846     		mov	r0, r3
 1241 014e 0837     		adds	r7, r7, #8
 1242              		.cfi_def_cfa_offset 8
 1243 0150 BD46     		mov	sp, r7
 1244              		.cfi_def_cfa_register 13
 1245              		@ sp needed
 1246 0152 80BD     		pop	{r7, pc}
 1247              	.L76:
 1248              		.align	2
 1249              	.L75:
 1250 0154 00000000 		.word	modem_state
 1251 0158 00000000 		.word	modem_start_time_stamp
 1252 015c 00000000 		.word	updatable_parameters
 1253 0160 00000000 		.word	modem_stats
 1254 0164 9C010000 		.word	.LC13
 1255 0168 C4010000 		.word	.LC14
 1256 016c E8010000 		.word	.LC15
 1257 0170 08020000 		.word	.LC16
 1258              		.cfi_endproc
 1259              	.LFE75:
 1260              		.size	modem_process_tasks, .-modem_process_tasks
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 31


 1261              		.section	.rodata
 1262 022f 00       		.align	2
 1263              	.LC17:
 1264 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1264      6B696E67 
 1264      2041542B 
 1264      43524547 
 1264      3F00
 1265 0242 0000     		.align	2
 1266              	.LC18:
 1267 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1267      5245473F 
 1267      0D00
 1268 024e 0000     		.align	2
 1269              	.LC19:
 1270 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1270      61637469 
 1270      6E672073 
 1270      7472696E 
 1270      67204154 
 1271 026b 00       		.align	2
 1272              	.LC20:
 1273 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1273      5F726563 
 1273      65697665 
 1273      645F7374 
 1273      72696E67 
 1274 0285 000000   		.align	2
 1275              	.LC21:
 1276 0288 0D00     		.ascii	"\015\000"
 1277 028a 0000     		.align	2
 1278              	.LC22:
 1279 028c 3A2000   		.ascii	": \000"
 1280 028f 00       		.align	2
 1281              	.LC23:
 1282 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1282      73746572 
 1282      65642074 
 1282      6F206E65 
 1282      74776F72 
 1283              		.align	2
 1284              	.LC24:
 1285 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1285      20657874 
 1285      72616369 
 1285      6E672073 
 1285      7472696E 
 1286 02cf 00       		.align	2
 1287              	.LC25:
 1288 02d0 302C3100 		.ascii	"0,1\000"
 1289              		.align	2
 1290              	.LC26:
 1291 02d4 302C3500 		.ascii	"0,5\000"
 1292              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1293              		.align	2
 1294              		.global	is_connected_to_cell_network
 1295              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 32


 1296              		.thumb_func
 1297              		.type	is_connected_to_cell_network, %function
 1298              	is_connected_to_cell_network:
 1299              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1300              		.loc 1 373 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 16
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304 0000 80B5     		push	{r7, lr}
 1305              		.cfi_def_cfa_offset 8
 1306              		.cfi_offset 7, -8
 1307              		.cfi_offset 14, -4
 1308 0002 84B0     		sub	sp, sp, #16
 1309              		.cfi_def_cfa_offset 24
 1310 0004 00AF     		add	r7, sp, #0
 1311              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1312              		.loc 1 375 0
 1313 0006 2049     		ldr	r1, .L82
 1314 0008 0020     		movs	r0, #0
 1315 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1316              		.loc 1 377 0
 1317 000e 4FF4FA62 		mov	r2, #2000
 1318 0012 1E49     		ldr	r1, .L82+4
 1319 0014 1E48     		ldr	r0, .L82+8
 1320 0016 FFF7FEFF 		bl	at_write_command
 1321 001a 0346     		mov	r3, r0
 1322 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1323              		.loc 1 379 0
 1324 001e 1D49     		ldr	r1, .L82+12
 1325 0020 0020     		movs	r0, #0
 1326 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1327              		.loc 1 380 0
 1328 0026 1C4A     		ldr	r2, .L82+16
 1329 0028 1C49     		ldr	r1, .L82+20
 1330 002a 0020     		movs	r0, #0
 1331 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1332              		.loc 1 383 0
 1333 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1334 0032 002B     		cmp	r3, #0
 1335 0034 23D0     		beq	.L78
 1336              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 33


 1337              		.loc 1 386 0
 1338 0036 0023     		movs	r3, #0
 1339 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1340              		.loc 1 388 0
 1341 003a 3B1D     		adds	r3, r7, #4
 1342 003c 184A     		ldr	r2, .L82+24
 1343 003e 1949     		ldr	r1, .L82+28
 1344 0040 1548     		ldr	r0, .L82+16
 1345 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1346              		.loc 1 389 0
 1347 0046 3B1D     		adds	r3, r7, #4
 1348 0048 1A46     		mov	r2, r3
 1349 004a 1749     		ldr	r1, .L82+32
 1350 004c 0020     		movs	r0, #0
 1351 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1352              		.loc 1 390 0
 1353 0052 1649     		ldr	r1, .L82+36
 1354 0054 0020     		movs	r0, #0
 1355 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1356              		.loc 1 393 0
 1357 005a 3B1D     		adds	r3, r7, #4
 1358 005c 1449     		ldr	r1, .L82+40
 1359 005e 1846     		mov	r0, r3
 1360 0060 FFF7FEFF 		bl	strstr
 1361 0064 0346     		mov	r3, r0
 1362 0066 002B     		cmp	r3, #0
 1363 0068 07D1     		bne	.L79
 1364              		.loc 1 393 0 is_stmt 0 discriminator 1
 1365 006a 3B1D     		adds	r3, r7, #4
 1366 006c 1149     		ldr	r1, .L82+44
 1367 006e 1846     		mov	r0, r3
 1368 0070 FFF7FEFF 		bl	strstr
 1369 0074 0346     		mov	r3, r0
 1370 0076 002B     		cmp	r3, #0
 1371 0078 01D0     		beq	.L78
 1372              	.L79:
 394:modem.c       ****             return 1u;
 1373              		.loc 1 394 0 is_stmt 1
 1374 007a 0123     		movs	r3, #1
 1375 007c 00E0     		b	.L81
 1376              	.L78:
 1377              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1378              		.loc 1 398 0
 1379 007e 0023     		movs	r3, #0
 1380              	.L81:
 399:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 34


 400:modem.c       **** }
 1381              		.loc 1 400 0
 1382 0080 1846     		mov	r0, r3
 1383 0082 1037     		adds	r7, r7, #16
 1384              		.cfi_def_cfa_offset 8
 1385 0084 BD46     		mov	sp, r7
 1386              		.cfi_def_cfa_register 13
 1387              		@ sp needed
 1388 0086 80BD     		pop	{r7, pc}
 1389              	.L83:
 1390              		.align	2
 1391              	.L82:
 1392 0088 30020000 		.word	.LC17
 1393 008c 00000000 		.word	.LC0
 1394 0090 44020000 		.word	.LC18
 1395 0094 50020000 		.word	.LC19
 1396 0098 00000000 		.word	uart_received_string
 1397 009c 6C020000 		.word	.LC20
 1398 00a0 88020000 		.word	.LC21
 1399 00a4 8C020000 		.word	.LC22
 1400 00a8 90020000 		.word	.LC23
 1401 00ac B0020000 		.word	.LC24
 1402 00b0 D0020000 		.word	.LC25
 1403 00b4 D4020000 		.word	.LC26
 1404              		.cfi_endproc
 1405              	.LFE76:
 1406              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1407              		.section	.rodata
 1408              		.align	2
 1409              	.LC27:
 1410 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1410      47414354 
 1410      3D312C31 
 1410      0D0A00
 1411              		.section	.text.set_up_internet_connection,"ax",%progbits
 1412              		.align	2
 1413              		.global	set_up_internet_connection
 1414              		.thumb
 1415              		.thumb_func
 1416              		.type	set_up_internet_connection, %function
 1417              	set_up_internet_connection:
 1418              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1419              		.loc 1 403 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 1, uses_anonymous_args = 0
 1423 0000 80B5     		push	{r7, lr}
 1424              		.cfi_def_cfa_offset 8
 1425              		.cfi_offset 7, -8
 1426              		.cfi_offset 14, -4
 1427 0002 00AF     		add	r7, sp, #0
 1428              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 35


 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1429              		.loc 1 414 0
 1430 0004 4FF47A72 		mov	r2, #1000
 1431 0008 0249     		ldr	r1, .L85
 1432 000a 0348     		ldr	r0, .L85+4
 1433 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1434              		.loc 1 416 0
 1435 0010 00BF     		nop
 1436 0012 80BD     		pop	{r7, pc}
 1437              	.L86:
 1438              		.align	2
 1439              	.L85:
 1440 0014 00000000 		.word	.LC0
 1441 0018 D8020000 		.word	.LC27
 1442              		.cfi_endproc
 1443              	.LFE77:
 1444              		.size	set_up_internet_connection, .-set_up_internet_connection
 1445              		.section	.rodata
 1446 02e7 00       		.align	2
 1447              	.LC28:
 1448 02e8 312C3100 		.ascii	"1,1\000"
 1449              		.align	2
 1450              	.LC29:
 1451 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1451      47414354 
 1451      3F0D00
 1452              		.section	.text.is_connected_to_internet,"ax",%progbits
 1453              		.align	2
 1454              		.global	is_connected_to_internet
 1455              		.thumb
 1456              		.thumb_func
 1457              		.type	is_connected_to_internet, %function
 1458              	is_connected_to_internet:
 1459              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1460              		.loc 1 419 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 1, uses_anonymous_args = 0
 1464 0000 80B5     		push	{r7, lr}
 1465              		.cfi_def_cfa_offset 8
 1466              		.cfi_offset 7, -8
 1467              		.cfi_offset 14, -4
 1468 0002 00AF     		add	r7, sp, #0
 1469              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 36


 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1470              		.loc 1 424 0
 1471 0004 4FF4FA62 		mov	r2, #2000
 1472 0008 0549     		ldr	r1, .L90
 1473 000a 0648     		ldr	r0, .L90+4
 1474 000c FFF7FEFF 		bl	at_write_command
 1475 0010 0346     		mov	r3, r0
 1476 0012 002B     		cmp	r3, #0
 1477 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1478              		.loc 1 425 0
 1479 0016 0123     		movs	r3, #1
 1480 0018 00E0     		b	.L89
 1481              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1482              		.loc 1 427 0
 1483 001a 0023     		movs	r3, #0
 1484              	.L89:
 428:modem.c       **** }
 1485              		.loc 1 428 0
 1486 001c 1846     		mov	r0, r3
 1487 001e 80BD     		pop	{r7, pc}
 1488              	.L91:
 1489              		.align	2
 1490              	.L90:
 1491 0020 E8020000 		.word	.LC28
 1492 0024 EC020000 		.word	.LC29
 1493              		.cfi_endproc
 1494              	.LFE78:
 1495              		.size	is_connected_to_internet, .-is_connected_to_internet
 1496              		.section	.rodata
 1497 02f7 00       		.align	2
 1498              	.LC30:
 1499 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1499      4553510D 
 1499      00
 1500 0301 000000   		.align	2
 1501              	.LC31:
 1502 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1502      4553513A 
 1502      2025642C 
 1502      25642C25 
 1502      642C2564 
 1503              		.section	.text.get_cell_network_stats,"ax",%progbits
 1504              		.align	2
 1505              		.global	get_cell_network_stats
 1506              		.thumb
 1507              		.thumb_func
 1508              		.type	get_cell_network_stats, %function
 1509              	get_cell_network_stats:
 1510              	.LFB79:
 429:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 37


 430:modem.c       **** void get_cell_network_stats(){
 1511              		.loc 1 430 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 8
 1514              		@ frame_needed = 1, uses_anonymous_args = 0
 1515 0000 80B5     		push	{r7, lr}
 1516              		.cfi_def_cfa_offset 8
 1517              		.cfi_offset 7, -8
 1518              		.cfi_offset 14, -4
 1519 0002 86B0     		sub	sp, sp, #24
 1520              		.cfi_def_cfa_offset 32
 1521 0004 04AF     		add	r7, sp, #16
 1522              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1523              		.loc 1 432 0
 1524 0006 154B     		ldr	r3, .L93
 1525 0008 FF22     		movs	r2, #255
 1526 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1527              		.loc 1 433 0
 1528 000c 134B     		ldr	r3, .L93
 1529 000e FF22     		movs	r2, #255
 1530 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1531              		.loc 1 434 0
 1532 0012 124B     		ldr	r3, .L93
 1533 0014 FF22     		movs	r2, #255
 1534 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1535              		.loc 1 435 0
 1536 0018 104B     		ldr	r3, .L93
 1537 001a FF22     		movs	r2, #255
 1538 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1539              		.loc 1 436 0
 1540 001e 0F4B     		ldr	r3, .L93
 1541 0020 FF22     		movs	r2, #255
 1542 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1543              		.loc 1 437 0
 1544 0024 0D4B     		ldr	r3, .L93
 1545 0026 FF22     		movs	r2, #255
 1546 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1547              		.loc 1 440 0
 1548 002a 4FF4FA62 		mov	r2, #2000
 1549 002e 0C49     		ldr	r1, .L93+4
 1550 0030 0C48     		ldr	r0, .L93+8
 1551 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1552              		.loc 1 443 0
 1553 0036 0C4B     		ldr	r3, .L93+12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 38


 1554 0038 0393     		str	r3, [sp, #12]
 1555 003a 0C4B     		ldr	r3, .L93+16
 1556 003c 0293     		str	r3, [sp, #8]
 1557 003e 0C4B     		ldr	r3, .L93+20
 1558 0040 0193     		str	r3, [sp, #4]
 1559 0042 0C4B     		ldr	r3, .L93+24
 1560 0044 0093     		str	r3, [sp]
 1561 0046 0C4B     		ldr	r3, .L93+28
 1562 0048 044A     		ldr	r2, .L93
 1563 004a 0C49     		ldr	r1, .L93+32
 1564 004c 0C48     		ldr	r0, .L93+36
 1565 004e FFF7FEFF 		bl	sscanf
 1566 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1567              		.loc 1 458 0
 1568 0054 00BF     		nop
 1569 0056 0837     		adds	r7, r7, #8
 1570              		.cfi_def_cfa_offset 8
 1571 0058 BD46     		mov	sp, r7
 1572              		.cfi_def_cfa_register 13
 1573              		@ sp needed
 1574 005a 80BD     		pop	{r7, pc}
 1575              	.L94:
 1576              		.align	2
 1577              	.L93:
 1578 005c 00000000 		.word	modem_stats
 1579 0060 00000000 		.word	.LC0
 1580 0064 F8020000 		.word	.LC30
 1581 0068 14000000 		.word	modem_stats+20
 1582 006c 10000000 		.word	modem_stats+16
 1583 0070 0C000000 		.word	modem_stats+12
 1584 0074 08000000 		.word	modem_stats+8
 1585 0078 04000000 		.word	modem_stats+4
 1586 007c 04030000 		.word	.LC31
 1587 0080 00000000 		.word	uart_received_string
 1588              		.cfi_endproc
 1589              	.LFE79:
 1590              		.size	get_cell_network_stats, .-get_cell_network_stats
 1591              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1592              		.align	2
 1593              		.global	updatable_parameters_initialize
 1594              		.thumb
 1595              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 39


 1596              		.type	updatable_parameters_initialize, %function
 1597              	updatable_parameters_initialize:
 1598              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1599              		.loc 1 461 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 1, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604 0000 80B4     		push	{r7}
 1605              		.cfi_def_cfa_offset 4
 1606              		.cfi_offset 7, -4
 1607 0002 00AF     		add	r7, sp, #0
 1608              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1609              		.loc 1 462 0
 1610 0004 0C4B     		ldr	r3, .L96
 1611 0006 0022     		movs	r2, #0
 1612 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1613              		.loc 1 463 0
 1614 000a 0B4B     		ldr	r3, .L96
 1615 000c 0122     		movs	r2, #1
 1616 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1617              		.loc 1 464 0
 1618 0010 094B     		ldr	r3, .L96
 1619 0012 0122     		movs	r2, #1
 1620 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1621              		.loc 1 465 0
 1622 0016 084B     		ldr	r3, .L96
 1623 0018 0122     		movs	r2, #1
 1624 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1625              		.loc 1 466 0
 1626 001c 064B     		ldr	r3, .L96
 1627 001e 0122     		movs	r2, #1
 1628 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     updatable_parameters.App_LED_freq = 2u; // if turn on, change to higher frequency
 1629              		.loc 1 469 0
 1630 0022 054B     		ldr	r3, .L96
 1631 0024 0222     		movs	r2, #2
 1632 0026 5A71     		strb	r2, [r3, #5]
 470:modem.c       ****     updatable_parameters.Level_Sensor_freq = 3u; 
 1633              		.loc 1 470 0
 1634 0028 034B     		ldr	r3, .L96
 1635 002a 0322     		movs	r2, #3
 1636 002c 9A71     		strb	r2, [r3, #6]
 471:modem.c       **** }
 1637              		.loc 1 471 0
 1638 002e 00BF     		nop
 1639 0030 BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 40


 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 0032 80BC     		pop	{r7}
 1643              		.cfi_restore 7
 1644              		.cfi_def_cfa_offset 0
 1645 0034 7047     		bx	lr
 1646              	.L97:
 1647 0036 00BF     		.align	2
 1648              	.L96:
 1649 0038 00000000 		.word	updatable_parameters
 1650              		.cfi_endproc
 1651              	.LFE80:
 1652              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1653              		.section	.rodata
 1654 0322 0000     		.align	2
 1655              	.LC32:
 1656 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1656      5F547970 
 1656      653A2000 
 1657              		.align	2
 1658              	.LC33:
 1659 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1659      54797065 
 1659      3A2000
 1660 033b 00       		.align	2
 1661              	.LC34:
 1662 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1662      6C655F46 
 1662      7265713A 
 1662      2000
 1663 034a 0000     		.align	2
 1664              	.LC35:
 1665 034c 5265706F 		.ascii	"Report_Freq: \000"
 1665      72745F46 
 1665      7265713A 
 1665      2000
 1666 035a 0000     		.align	2
 1667              	.LC36:
 1668 035c 44656275 		.ascii	"Debug_Freq: \000"
 1668      675F4672 
 1668      65713A20 
 1668      00
 1669 0369 000000   		.align	2
 1670              	.LC37:
 1671 036c 41707073 		.ascii	"Apps_Enabled: \000"
 1671      5F456E61 
 1671      626C6564 
 1671      3A2000
 1672 037b 00       		.align	2
 1673              	.LC38:
 1674 037c 4C657665 		.ascii	"Level_Sensor\000"
 1674      6C5F5365 
 1674      6E736F72 
 1674      00
 1675 0389 000000   		.align	2
 1676              	.LC39:
 1677 038c 4170705F 		.ascii	"App_LED\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 41


 1677      4C454400 
 1678              		.align	2
 1679              	.LC40:
 1680 0394 4170705F 		.ascii	"App_LED: \000"
 1680      4C45443A 
 1680      2000
 1681 039e 0000     		.align	2
 1682              	.LC41:
 1683 03a0 4C657665 		.ascii	"Level_Sensor: \000"
 1683      6C5F5365 
 1683      6E736F72 
 1683      3A2000
 1684 03af 00       		.align	2
 1685              	.LC42:
 1686 03b0 256400   		.ascii	"%d\000"
 1687 03b3 00       		.align	2
 1688              	.LC43:
 1689 03b4 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1689      20747970 
 1689      65206368 
 1689      616E6765 
 1689      6420746F 
 1690 03cf 00       		.align	2
 1691              	.LC44:
 1692 03d0 436F756C 		.ascii	"Could not change node type.\000"
 1692      64206E6F 
 1692      74206368 
 1692      616E6765 
 1692      206E6F64 
 1693              		.align	2
 1694              	.LC45:
 1695 03ec 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1695      74797065 
 1695      20636861 
 1695      6E676564 
 1695      20746F3A 
 1696 0406 0000     		.align	2
 1697              	.LC46:
 1698 0408 436F756C 		.ascii	"Could not change SIM type.\000"
 1698      64206E6F 
 1698      74206368 
 1698      616E6765 
 1698      2053494D 
 1699 0423 00       		.align	2
 1700              	.LC47:
 1701 0424 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1701      6C696E67 
 1701      20667265 
 1701      7175656E 
 1701      63792063 
 1702              		.align	2
 1703              	.LC48:
 1704 0448 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1704      64206E6F 
 1704      74207061 
 1704      72736520 
 1704      6E657720 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 42


 1705 0476 0000     		.align	2
 1706              	.LC49:
 1707 0478 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1707      7274696E 
 1707      67206672 
 1707      65717565 
 1707      6E637920 
 1708 049d 000000   		.align	2
 1709              	.LC50:
 1710 04a0 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1710      64206E6F 
 1710      74207061 
 1710      72736520 
 1710      6E657720 
 1711 04cf 00       		.align	2
 1712              	.LC51:
 1713 04d0 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1713      67207072 
 1713      696E7469 
 1713      6E672066 
 1713      72657175 
 1714 04fa 0000     		.align	2
 1715              	.LC52:
 1716 04fc 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1716      64206E6F 
 1716      74207061 
 1716      72736520 
 1716      6E657720 
 1717 052b 00       		.align	2
 1718              	.LC53:
 1719 052c 46726571 		.ascii	"Freq: \000"
 1719      3A2000
 1720 0533 00       		.align	2
 1721              	.LC54:
 1722 0534 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1722      4C454420 
 1722      66726571 
 1722      75656E63 
 1722      79206368 
 1723 0557 00       		.align	2
 1724              	.LC55:
 1725 0558 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1725      64206E6F 
 1725      74207061 
 1725      72736520 
 1725      6E657720 
 1726 0585 000000   		.align	2
 1727              	.LC56:
 1728 0588 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1728      70705F4C 
 1728      45442066 
 1728      72657175 
 1728      656E6379 
 1729 05ae 0000     		.align	2
 1730              	.LC57:
 1731 05b0 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1731      6C5F5365 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 43


 1731      6E736F72 
 1731      20667265 
 1731      7175656E 
 1732              		.align	2
 1733              	.LC58:
 1734 05d8 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1734      64206E6F 
 1734      74207061 
 1734      72736520 
 1734      6E657720 
 1735 060a 0000     		.align	2
 1736              	.LC59:
 1737 060c 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1737      6576656C 
 1737      5F53656E 
 1737      736F7220 
 1737      66726571 
 1738              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1739              		.align	2
 1740              		.global	get_updated_parameters_from_malcom
 1741              		.thumb
 1742              		.thumb_func
 1743              		.type	get_updated_parameters_from_malcom, %function
 1744              	get_updated_parameters_from_malcom:
 1745              	.LFB81:
 472:modem.c       **** 
 473:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 474:modem.c       **** void get_updated_parameters_from_malcom(){
 1746              		.loc 1 474 0
 1747              		.cfi_startproc
 1748              		@ args = 0, pretend = 0, frame = 600
 1749              		@ frame_needed = 1, uses_anonymous_args = 0
 1750 0000 90B5     		push	{r4, r7, lr}
 1751              		.cfi_def_cfa_offset 12
 1752              		.cfi_offset 4, -12
 1753              		.cfi_offset 7, -8
 1754              		.cfi_offset 14, -4
 1755 0002 ADF5177D 		sub	sp, sp, #604
 1756              		.cfi_def_cfa_offset 616
 1757 0006 00AF     		add	r7, sp, #0
 1758              		.cfi_def_cfa_register 7
 475:modem.c       ****     
 476:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 477:modem.c       ****     char s_node_type[10];
 478:modem.c       ****     char s_sim_type[10];
 479:modem.c       ****     char s_sample_freq[10];
 480:modem.c       ****     char s_report_freq[10];
 481:modem.c       ****     char s_debug_freq[10];
 482:modem.c       ****     
 483:modem.c       ****     //apps
 484:modem.c       ****     char s_app_led[100];
 485:modem.c       ****     s_app_led[0] = '\0';
 1759              		.loc 1 485 0
 1760 0008 0023     		movs	r3, #0
 1761 000a 87F8B831 		strb	r3, [r7, #440]
 486:modem.c       ****     
 487:modem.c       ****     char s_level_sensor[100];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 44


 488:modem.c       ****     s_level_sensor[0] = '\0';
 1762              		.loc 1 488 0
 1763 000e 07F5AA73 		add	r3, r7, #340
 1764 0012 0022     		movs	r2, #0
 1765 0014 1A70     		strb	r2, [r3]
 489:modem.c       ****     
 490:modem.c       ****     char s_apps_enabled[200];
 491:modem.c       ****     s_apps_enabled[0]='\0';
 1766              		.loc 1 491 0
 1767 0016 07F18C03 		add	r3, r7, #140
 1768 001a 0022     		movs	r2, #0
 1769 001c 1A70     		strb	r2, [r3]
 492:modem.c       ****     
 493:modem.c       ****     s_node_type[0] = '\0';
 1770              		.loc 1 493 0
 1771 001e 0023     		movs	r3, #0
 1772 0020 87F84C32 		strb	r3, [r7, #588]
 494:modem.c       ****     s_sim_type[0] = '\0';
 1773              		.loc 1 494 0
 1774 0024 0023     		movs	r3, #0
 1775 0026 87F84032 		strb	r3, [r7, #576]
 495:modem.c       ****     s_sample_freq[0] = '\0';
 1776              		.loc 1 495 0
 1777 002a 0023     		movs	r3, #0
 1778 002c 87F83432 		strb	r3, [r7, #564]
 496:modem.c       ****     s_report_freq[0] = '\0';
 1779              		.loc 1 496 0
 1780 0030 0023     		movs	r3, #0
 1781 0032 87F82832 		strb	r3, [r7, #552]
 497:modem.c       ****     s_debug_freq[0] = '\0';
 1782              		.loc 1 497 0
 1783 0036 0023     		movs	r3, #0
 1784 0038 87F81C32 		strb	r3, [r7, #540]
 498:modem.c       ****     
 499:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 500:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1785              		.loc 1 500 0
 1786 003c 07F51373 		add	r3, r7, #588
 1787 0040 B84A     		ldr	r2, .L123
 1788 0042 B949     		ldr	r1, .L123+4
 1789 0044 B948     		ldr	r0, .L123+8
 1790 0046 FFF7FEFF 		bl	extract_string
 501:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1791              		.loc 1 501 0
 1792 004a 07F51073 		add	r3, r7, #576
 1793 004e B54A     		ldr	r2, .L123
 1794 0050 B749     		ldr	r1, .L123+12
 1795 0052 B648     		ldr	r0, .L123+8
 1796 0054 FFF7FEFF 		bl	extract_string
 502:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1797              		.loc 1 502 0
 1798 0058 07F50D73 		add	r3, r7, #564
 1799 005c B14A     		ldr	r2, .L123
 1800 005e B549     		ldr	r1, .L123+16
 1801 0060 B248     		ldr	r0, .L123+8
 1802 0062 FFF7FEFF 		bl	extract_string
 503:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 45


 1803              		.loc 1 503 0
 1804 0066 07F50A73 		add	r3, r7, #552
 1805 006a AE4A     		ldr	r2, .L123
 1806 006c B249     		ldr	r1, .L123+20
 1807 006e AF48     		ldr	r0, .L123+8
 1808 0070 FFF7FEFF 		bl	extract_string
 504:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1809              		.loc 1 504 0
 1810 0074 07F50773 		add	r3, r7, #540
 1811 0078 AA4A     		ldr	r2, .L123
 1812 007a B049     		ldr	r1, .L123+24
 1813 007c AB48     		ldr	r0, .L123+8
 1814 007e FFF7FEFF 		bl	extract_string
 505:modem.c       ****     
 506:modem.c       ****     // which apps are enabled?
 507:modem.c       ****     if (strstr(uart_received_string,"Apps_Enabled: ")){
 1815              		.loc 1 507 0
 1816 0082 AF49     		ldr	r1, .L123+28
 1817 0084 A948     		ldr	r0, .L123+8
 1818 0086 FFF7FEFF 		bl	strstr
 1819 008a 0346     		mov	r3, r0
 1820 008c 002B     		cmp	r3, #0
 1821 008e 2ED0     		beq	.L99
 508:modem.c       ****         extract_string(uart_received_string,"Apps_Enabled: ","\r",s_apps_enabled);
 1822              		.loc 1 508 0
 1823 0090 07F18C03 		add	r3, r7, #140
 1824 0094 A34A     		ldr	r2, .L123
 1825 0096 AA49     		ldr	r1, .L123+28
 1826 0098 A448     		ldr	r0, .L123+8
 1827 009a FFF7FEFF 		bl	extract_string
 509:modem.c       ****         // if an app is in this string, turn it on
 510:modem.c       ****         if (strstr(s_apps_enabled,"Level_Sensor")!=NULL){
 1828              		.loc 1 510 0
 1829 009e 07F18C03 		add	r3, r7, #140
 1830 00a2 A849     		ldr	r1, .L123+32
 1831 00a4 1846     		mov	r0, r3
 1832 00a6 FFF7FEFF 		bl	strstr
 1833 00aa 0346     		mov	r3, r0
 1834 00ac 002B     		cmp	r3, #0
 1835 00ae 03D0     		beq	.L100
 511:modem.c       ****             // if we see level sensor in the enabled list, turn it on
 512:modem.c       ****             level_sensor_enabled = 1;
 1836              		.loc 1 512 0
 1837 00b0 A54B     		ldr	r3, .L123+36
 1838 00b2 0122     		movs	r2, #1
 1839 00b4 1A70     		strb	r2, [r3]
 1840 00b6 06E0     		b	.L101
 1841              	.L100:
 513:modem.c       ****         }        
 514:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 515:modem.c       ****         else if (level_sensor_enabled){ 
 1842              		.loc 1 515 0
 1843 00b8 A34B     		ldr	r3, .L123+36
 1844 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1845 00bc 002B     		cmp	r3, #0
 1846 00be 02D0     		beq	.L101
 516:modem.c       ****             level_sensor_enabled = 0;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 46


 1847              		.loc 1 516 0
 1848 00c0 A14B     		ldr	r3, .L123+36
 1849 00c2 0022     		movs	r2, #0
 1850 00c4 1A70     		strb	r2, [r3]
 1851              	.L101:
 517:modem.c       ****         }
 518:modem.c       ****         
 519:modem.c       ****         if (strstr(s_apps_enabled,"App_LED")!=NULL){
 1852              		.loc 1 519 0
 1853 00c6 07F18C03 		add	r3, r7, #140
 1854 00ca A049     		ldr	r1, .L123+40
 1855 00cc 1846     		mov	r0, r3
 1856 00ce FFF7FEFF 		bl	strstr
 1857 00d2 0346     		mov	r3, r0
 1858 00d4 002B     		cmp	r3, #0
 1859 00d6 03D0     		beq	.L102
 520:modem.c       ****             // if we see level sensor in the enabled list, turn it on
 521:modem.c       ****             App_LED_enabled = 1;
 1860              		.loc 1 521 0
 1861 00d8 9D4B     		ldr	r3, .L123+44
 1862 00da 0122     		movs	r2, #1
 1863 00dc 1A70     		strb	r2, [r3]
 1864 00de 06E0     		b	.L99
 1865              	.L102:
 522:modem.c       ****         }
 523:modem.c       ****         else if (App_LED_enabled){
 1866              		.loc 1 523 0
 1867 00e0 9B4B     		ldr	r3, .L123+44
 1868 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1869 00e4 002B     		cmp	r3, #0
 1870 00e6 02D0     		beq	.L99
 524:modem.c       ****             App_LED_enabled = 0;
 1871              		.loc 1 524 0
 1872 00e8 994B     		ldr	r3, .L123+44
 1873 00ea 0022     		movs	r2, #0
 1874 00ec 1A70     		strb	r2, [r3]
 1875              	.L99:
 525:modem.c       ****         }
 526:modem.c       **** 
 527:modem.c       ****     }
 528:modem.c       ****     
 529:modem.c       ****     
 530:modem.c       ****     // update app parameters (valve open %, measuring freq, etc)
 531:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1876              		.loc 1 531 0
 1877 00ee 07F5DC73 		add	r3, r7, #440
 1878 00f2 8C4A     		ldr	r2, .L123
 1879 00f4 9749     		ldr	r1, .L123+48
 1880 00f6 8D48     		ldr	r0, .L123+8
 1881 00f8 FFF7FEFF 		bl	extract_string
 532:modem.c       ****     App_LED_Update(s_app_led);
 1882              		.loc 1 532 0
 1883 00fc 07F5DC73 		add	r3, r7, #440
 1884 0100 1846     		mov	r0, r3
 1885 0102 FFF7FEFF 		bl	App_LED_Update
 533:modem.c       ****     
 534:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 47


 1886              		.loc 1 534 0
 1887 0106 07F5AA73 		add	r3, r7, #340
 1888 010a 864A     		ldr	r2, .L123
 1889 010c 9249     		ldr	r1, .L123+52
 1890 010e 8748     		ldr	r0, .L123+8
 1891 0110 FFF7FEFF 		bl	extract_string
 535:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1892              		.loc 1 535 0
 1893 0114 07F5AA73 		add	r3, r7, #340
 1894 0118 1846     		mov	r0, r3
 1895 011a FFF7FEFF 		bl	Level_Sensor_Update
 536:modem.c       ****     
 537:modem.c       ****     // Create variables for what is sent back from the server
 538:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq;
 539:modem.c       ****     
 540:modem.c       ****     // Scan character arrays and save values 
 541:modem.c       ****     
 542:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1896              		.loc 1 542 0
 1897 011e 07F18802 		add	r2, r7, #136
 1898 0122 07F51373 		add	r3, r7, #588
 1899 0126 8D49     		ldr	r1, .L123+56
 1900 0128 1846     		mov	r0, r3
 1901 012a FFF7FEFF 		bl	sscanf
 1902 012e 0346     		mov	r3, r0
 1903 0130 012B     		cmp	r3, #1
 1904 0132 0ED1     		bne	.L103
 543:modem.c       ****         updatable_parameters.node_type = node_type;
 1905              		.loc 1 543 0
 1906 0134 07F18803 		add	r3, r7, #136
 1907 0138 1B68     		ldr	r3, [r3]
 1908 013a DAB2     		uxtb	r2, r3
 1909 013c 884B     		ldr	r3, .L123+60
 1910 013e 1A70     		strb	r2, [r3]
 544:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1911              		.loc 1 544 0
 1912 0140 07F18803 		add	r3, r7, #136
 1913 0144 1B68     		ldr	r3, [r3]
 1914 0146 1A46     		mov	r2, r3
 1915 0148 8649     		ldr	r1, .L123+64
 1916 014a 0020     		movs	r0, #0
 1917 014c FFF7FEFF 		bl	printNotif
 1918 0150 03E0     		b	.L104
 1919              	.L103:
 545:modem.c       ****     }else{
 546:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1920              		.loc 1 546 0
 1921 0152 8549     		ldr	r1, .L123+68
 1922 0154 0220     		movs	r0, #2
 1923 0156 FFF7FEFF 		bl	printNotif
 1924              	.L104:
 547:modem.c       ****     }
 548:modem.c       ****     
 549:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1925              		.loc 1 549 0
 1926 015a 07F18402 		add	r2, r7, #132
 1927 015e 07F51073 		add	r3, r7, #576
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 48


 1928 0162 7E49     		ldr	r1, .L123+56
 1929 0164 1846     		mov	r0, r3
 1930 0166 FFF7FEFF 		bl	sscanf
 1931 016a 0346     		mov	r3, r0
 1932 016c 012B     		cmp	r3, #1
 1933 016e 12D1     		bne	.L105
 550:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1934              		.loc 1 550 0
 1935 0170 07F18403 		add	r3, r7, #132
 1936 0174 1B68     		ldr	r3, [r3]
 1937 0176 002B     		cmp	r3, #0
 1938 0178 14BF     		ite	ne
 1939 017a 0123     		movne	r3, #1
 1940 017c 0023     		moveq	r3, #0
 1941 017e DAB2     		uxtb	r2, r3
 1942 0180 774B     		ldr	r3, .L123+60
 1943 0182 5A70     		strb	r2, [r3, #1]
 551:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1944              		.loc 1 551 0
 1945 0184 07F18403 		add	r3, r7, #132
 1946 0188 1B68     		ldr	r3, [r3]
 1947 018a 1A46     		mov	r2, r3
 1948 018c 7749     		ldr	r1, .L123+72
 1949 018e 0020     		movs	r0, #0
 1950 0190 FFF7FEFF 		bl	printNotif
 1951 0194 03E0     		b	.L106
 1952              	.L105:
 552:modem.c       ****     }else{
 553:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1953              		.loc 1 553 0
 1954 0196 7649     		ldr	r1, .L123+76
 1955 0198 0220     		movs	r0, #2
 1956 019a FFF7FEFF 		bl	printNotif
 1957              	.L106:
 554:modem.c       ****     }
 555:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1958              		.loc 1 555 0
 1959 019e 07F18002 		add	r2, r7, #128
 1960 01a2 07F50D73 		add	r3, r7, #564
 1961 01a6 6D49     		ldr	r1, .L123+56
 1962 01a8 1846     		mov	r0, r3
 1963 01aa FFF7FEFF 		bl	sscanf
 1964 01ae 0346     		mov	r3, r0
 1965 01b0 012B     		cmp	r3, #1
 1966 01b2 1DD1     		bne	.L107
 556:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1967              		.loc 1 556 0
 1968 01b4 07F18003 		add	r3, r7, #128
 1969 01b8 1B68     		ldr	r3, [r3]
 1970 01ba DAB2     		uxtb	r2, r3
 1971 01bc 684B     		ldr	r3, .L123+60
 1972 01be 9A70     		strb	r2, [r3, #2]
 557:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 558:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1973              		.loc 1 558 0
 1974 01c0 674B     		ldr	r3, .L123+60
 1975 01c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 49


 1976 01c4 99B2     		uxth	r1, r3
 1977 01c6 6B4C     		ldr	r4, .L123+80
 1978 01c8 3846     		mov	r0, r7
 1979 01ca 0723     		movs	r3, #7
 1980 01cc 0122     		movs	r2, #1
 1981 01ce FFF7FEFF 		bl	CreateAlarm
 1982 01d2 3A46     		mov	r2, r7
 1983 01d4 2346     		mov	r3, r4
 1984 01d6 1168     		ldr	r1, [r2]	@ unaligned
 1985 01d8 1960     		str	r1, [r3]	@ unaligned
 1986 01da 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1987 01dc 9A80     		strh	r2, [r3, #4]	@ unaligned
 559:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1988              		.loc 1 559 0
 1989 01de 07F18003 		add	r3, r7, #128
 1990 01e2 1B68     		ldr	r3, [r3]
 1991 01e4 1A46     		mov	r2, r3
 1992 01e6 6449     		ldr	r1, .L123+84
 1993 01e8 0020     		movs	r0, #0
 1994 01ea FFF7FEFF 		bl	printNotif
 1995 01ee 03E0     		b	.L108
 1996              	.L107:
 560:modem.c       ****     }else{
 561:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1997              		.loc 1 561 0
 1998 01f0 6249     		ldr	r1, .L123+88
 1999 01f2 0220     		movs	r0, #2
 2000 01f4 FFF7FEFF 		bl	printNotif
 2001              	.L108:
 562:modem.c       ****     }
 563:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 2002              		.loc 1 563 0
 2003 01f8 07F17C02 		add	r2, r7, #124
 2004 01fc 07F50A73 		add	r3, r7, #552
 2005 0200 5649     		ldr	r1, .L123+56
 2006 0202 1846     		mov	r0, r3
 2007 0204 FFF7FEFF 		bl	sscanf
 2008 0208 0346     		mov	r3, r0
 2009 020a 012B     		cmp	r3, #1
 2010 020c 1DD1     		bne	.L109
 564:modem.c       ****         updatable_parameters.sync_time = report_freq;
 2011              		.loc 1 564 0
 2012 020e 07F17C03 		add	r3, r7, #124
 2013 0212 1B68     		ldr	r3, [r3]
 2014 0214 DAB2     		uxtb	r2, r3
 2015 0216 524B     		ldr	r3, .L123+60
 2016 0218 DA70     		strb	r2, [r3, #3]
 565:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 566:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 2017              		.loc 1 566 0
 2018 021a 514B     		ldr	r3, .L123+60
 2019 021c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2020 021e 99B2     		uxth	r1, r3
 2021 0220 574C     		ldr	r4, .L123+92
 2022 0222 3846     		mov	r0, r7
 2023 0224 0723     		movs	r3, #7
 2024 0226 0122     		movs	r2, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 50


 2025 0228 FFF7FEFF 		bl	CreateAlarm
 2026 022c 3A46     		mov	r2, r7
 2027 022e 2346     		mov	r3, r4
 2028 0230 1168     		ldr	r1, [r2]	@ unaligned
 2029 0232 1960     		str	r1, [r3]	@ unaligned
 2030 0234 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2031 0236 9A80     		strh	r2, [r3, #4]	@ unaligned
 567:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 2032              		.loc 1 567 0
 2033 0238 07F17C03 		add	r3, r7, #124
 2034 023c 1B68     		ldr	r3, [r3]
 2035 023e 1A46     		mov	r2, r3
 2036 0240 5049     		ldr	r1, .L123+96
 2037 0242 0020     		movs	r0, #0
 2038 0244 FFF7FEFF 		bl	printNotif
 2039 0248 03E0     		b	.L110
 2040              	.L109:
 568:modem.c       ****         }else{
 569:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 2041              		.loc 1 569 0
 2042 024a 4F49     		ldr	r1, .L123+100
 2043 024c 0220     		movs	r0, #2
 2044 024e FFF7FEFF 		bl	printNotif
 2045              	.L110:
 570:modem.c       ****     }
 571:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 2046              		.loc 1 571 0
 2047 0252 07F17802 		add	r2, r7, #120
 2048 0256 07F50773 		add	r3, r7, #540
 2049 025a 4049     		ldr	r1, .L123+56
 2050 025c 1846     		mov	r0, r3
 2051 025e FFF7FEFF 		bl	sscanf
 2052 0262 0346     		mov	r3, r0
 2053 0264 012B     		cmp	r3, #1
 2054 0266 0ED1     		bne	.L111
 572:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 2055              		.loc 1 572 0
 2056 0268 07F17803 		add	r3, r7, #120
 2057 026c 1B68     		ldr	r3, [r3]
 2058 026e DAB2     		uxtb	r2, r3
 2059 0270 3B4B     		ldr	r3, .L123+60
 2060 0272 1A71     		strb	r2, [r3, #4]
 573:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 2061              		.loc 1 573 0
 2062 0274 07F17803 		add	r3, r7, #120
 2063 0278 1B68     		ldr	r3, [r3]
 2064 027a 1A46     		mov	r2, r3
 2065 027c 4349     		ldr	r1, .L123+104
 2066 027e 0020     		movs	r0, #0
 2067 0280 FFF7FEFF 		bl	printNotif
 2068 0284 03E0     		b	.L112
 2069              	.L111:
 574:modem.c       ****     }else{
 575:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 2070              		.loc 1 575 0
 2071 0286 4249     		ldr	r1, .L123+108
 2072 0288 0220     		movs	r0, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 51


 2073 028a FFF7FEFF 		bl	printNotif
 2074              	.L112:
 576:modem.c       ****     }
 577:modem.c       ****     
 578:modem.c       ****     // app alarm frequency updates
 579:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 2075              		.loc 1 579 0
 2076 028e 344B     		ldr	r3, .L123+60
 2077 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2078 0292 042B     		cmp	r3, #4
 2079 0294 40F0D280 		bne	.L122
 2080              	.LBB9:
 580:modem.c       ****         char temp[100];
 581:modem.c       **** 
 582:modem.c       ****         if (strstr(s_app_led,"Freq: ") && strstr(s_app_led,"\r")){
 2081              		.loc 1 582 0
 2082 0298 07F5DC73 		add	r3, r7, #440
 2083 029c 3D49     		ldr	r1, .L123+112
 2084 029e 1846     		mov	r0, r3
 2085 02a0 FFF7FEFF 		bl	strstr
 2086 02a4 0346     		mov	r3, r0
 2087 02a6 002B     		cmp	r3, #0
 2088 02a8 7AD0     		beq	.L114
 2089              		.loc 1 582 0 is_stmt 0 discriminator 1
 2090 02aa 07F5DC73 		add	r3, r7, #440
 2091 02ae 0D21     		movs	r1, #13
 2092 02b0 1846     		mov	r0, r3
 2093 02b2 FFF7FEFF 		bl	strchr
 2094 02b6 0346     		mov	r3, r0
 2095 02b8 002B     		cmp	r3, #0
 2096 02ba 71D0     		beq	.L114
 583:modem.c       ****             temp[0] = '\0';
 2097              		.loc 1 583 0 is_stmt 1
 2098 02bc 07F10C03 		add	r3, r7, #12
 2099 02c0 0022     		movs	r2, #0
 2100 02c2 1A70     		strb	r2, [r3]
 584:modem.c       ****             strcpy(temp,s_app_led);
 2101              		.loc 1 584 0
 2102 02c4 07F5DC72 		add	r2, r7, #440
 2103 02c8 07F10C03 		add	r3, r7, #12
 2104 02cc 1146     		mov	r1, r2
 2105 02ce 1846     		mov	r0, r3
 2106 02d0 FFF7FEFF 		bl	strcpy
 585:modem.c       ****             extract_string(temp,"Freq: ","\r",s_app_led); // grab level app frequency
 2107              		.loc 1 585 0
 2108 02d4 07F5DC73 		add	r3, r7, #440
 2109 02d8 07F10C00 		add	r0, r7, #12
 2110 02dc 114A     		ldr	r2, .L123
 2111 02de 2D49     		ldr	r1, .L123+112
 2112 02e0 FFF7FEFF 		bl	extract_string
 586:modem.c       ****             if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2113              		.loc 1 586 0
 2114 02e4 07F17402 		add	r2, r7, #116
 2115 02e8 07F5DC73 		add	r3, r7, #440
 2116 02ec 1B49     		ldr	r1, .L123+56
 2117 02ee 1846     		mov	r0, r3
 2118 02f0 FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 52


 2119 02f4 0346     		mov	r3, r0
 2120 02f6 012B     		cmp	r3, #1
 2121 02f8 0ED1     		bne	.L115
 587:modem.c       ****                 updatable_parameters.App_LED_freq = app_led_freq;
 2122              		.loc 1 587 0
 2123 02fa 07F17403 		add	r3, r7, #116
 2124 02fe 1B68     		ldr	r3, [r3]
 2125 0300 DAB2     		uxtb	r2, r3
 2126 0302 174B     		ldr	r3, .L123+60
 2127 0304 5A71     		strb	r2, [r3, #5]
 588:modem.c       ****                 printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_freq);
 2128              		.loc 1 588 0
 2129 0306 07F17403 		add	r3, r7, #116
 2130 030a 1B68     		ldr	r3, [r3]
 2131 030c 1A46     		mov	r2, r3
 2132 030e 2249     		ldr	r1, .L123+116
 2133 0310 0020     		movs	r0, #0
 2134 0312 FFF7FEFF 		bl	printNotif
 586:modem.c       ****             if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2135              		.loc 1 586 0
 2136 0316 47E0     		b	.L117
 2137              	.L115:
 589:modem.c       ****             } 
 590:modem.c       ****             else{
 591:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2138              		.loc 1 591 0
 2139 0318 2049     		ldr	r1, .L123+120
 2140 031a 0220     		movs	r0, #2
 2141 031c FFF7FEFF 		bl	printNotif
 586:modem.c       ****                 updatable_parameters.App_LED_freq = app_led_freq;
 2142              		.loc 1 586 0
 2143 0320 42E0     		b	.L117
 2144              	.L124:
 2145 0322 00BF     		.align	2
 2146              	.L123:
 2147 0324 88020000 		.word	.LC21
 2148 0328 24030000 		.word	.LC32
 2149 032c 00000000 		.word	uart_received_string
 2150 0330 30030000 		.word	.LC33
 2151 0334 3C030000 		.word	.LC34
 2152 0338 4C030000 		.word	.LC35
 2153 033c 5C030000 		.word	.LC36
 2154 0340 6C030000 		.word	.LC37
 2155 0344 7C030000 		.word	.LC38
 2156 0348 00000000 		.word	level_sensor_enabled
 2157 034c 8C030000 		.word	.LC39
 2158 0350 00000000 		.word	App_LED_enabled
 2159 0354 94030000 		.word	.LC40
 2160 0358 A0030000 		.word	.LC41
 2161 035c B0030000 		.word	.LC42
 2162 0360 00000000 		.word	updatable_parameters
 2163 0364 B4030000 		.word	.LC43
 2164 0368 D0030000 		.word	.LC44
 2165 036c EC030000 		.word	.LC45
 2166 0370 08040000 		.word	.LC46
 2167 0374 00000000 		.word	alarmMeasure
 2168 0378 24040000 		.word	.LC47
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 53


 2169 037c 48040000 		.word	.LC48
 2170 0380 00000000 		.word	alarmSync
 2171 0384 78040000 		.word	.LC49
 2172 0388 A0040000 		.word	.LC50
 2173 038c D0040000 		.word	.LC51
 2174 0390 FC040000 		.word	.LC52
 2175 0394 2C050000 		.word	.LC53
 2176 0398 34050000 		.word	.LC54
 2177 039c 58050000 		.word	.LC55
 2178              	.L114:
 592:modem.c       ****             }
 593:modem.c       ****         }
 594:modem.c       ****         else{
 595:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 2179              		.loc 1 595 0
 2180 03a0 2949     		ldr	r1, .L125
 2181 03a2 0220     		movs	r0, #2
 2182 03a4 FFF7FEFF 		bl	printNotif
 2183              	.L117:
 596:modem.c       ****         }
 597:modem.c       **** 
 598:modem.c       ****         if (strstr(s_level_sensor,"Freq: ") && strstr(s_level_sensor,"\r")){
 2184              		.loc 1 598 0
 2185 03a8 07F5AA73 		add	r3, r7, #340
 2186 03ac 2749     		ldr	r1, .L125+4
 2187 03ae 1846     		mov	r0, r3
 2188 03b0 FFF7FEFF 		bl	strstr
 2189 03b4 0346     		mov	r3, r0
 2190 03b6 002B     		cmp	r3, #0
 2191 03b8 3BD0     		beq	.L118
 2192              		.loc 1 598 0 is_stmt 0 discriminator 1
 2193 03ba 07F5AA73 		add	r3, r7, #340
 2194 03be 0D21     		movs	r1, #13
 2195 03c0 1846     		mov	r0, r3
 2196 03c2 FFF7FEFF 		bl	strchr
 2197 03c6 0346     		mov	r3, r0
 2198 03c8 002B     		cmp	r3, #0
 2199 03ca 32D0     		beq	.L118
 599:modem.c       ****             temp[0] = '\0';
 2200              		.loc 1 599 0 is_stmt 1
 2201 03cc 07F10C03 		add	r3, r7, #12
 2202 03d0 0022     		movs	r2, #0
 2203 03d2 1A70     		strb	r2, [r3]
 600:modem.c       ****             strcpy(temp,s_app_led);
 2204              		.loc 1 600 0
 2205 03d4 07F5DC72 		add	r2, r7, #440
 2206 03d8 07F10C03 		add	r3, r7, #12
 2207 03dc 1146     		mov	r1, r2
 2208 03de 1846     		mov	r0, r3
 2209 03e0 FFF7FEFF 		bl	strcpy
 601:modem.c       ****             extract_string(temp,"Freq: ","\r",s_level_sensor); // grab level app frequency
 2210              		.loc 1 601 0
 2211 03e4 07F5AA73 		add	r3, r7, #340
 2212 03e8 07F10C00 		add	r0, r7, #12
 2213 03ec 184A     		ldr	r2, .L125+8
 2214 03ee 1749     		ldr	r1, .L125+4
 2215 03f0 FFF7FEFF 		bl	extract_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 54


 602:modem.c       ****             if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2216              		.loc 1 602 0
 2217 03f4 07F17002 		add	r2, r7, #112
 2218 03f8 07F5AA73 		add	r3, r7, #340
 2219 03fc 1549     		ldr	r1, .L125+12
 2220 03fe 1846     		mov	r0, r3
 2221 0400 FFF7FEFF 		bl	sscanf
 2222 0404 0346     		mov	r3, r0
 2223 0406 012B     		cmp	r3, #1
 2224 0408 0ED1     		bne	.L119
 603:modem.c       ****                 updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2225              		.loc 1 603 0
 2226 040a 07F17003 		add	r3, r7, #112
 2227 040e 1B68     		ldr	r3, [r3]
 2228 0410 DAB2     		uxtb	r2, r3
 2229 0412 114B     		ldr	r3, .L125+16
 2230 0414 9A71     		strb	r2, [r3, #6]
 604:modem.c       ****                 printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_led_f
 2231              		.loc 1 604 0
 2232 0416 07F17403 		add	r3, r7, #116
 2233 041a 1B68     		ldr	r3, [r3]
 2234 041c 1A46     		mov	r2, r3
 2235 041e 0F49     		ldr	r1, .L125+20
 2236 0420 0020     		movs	r0, #0
 2237 0422 FFF7FEFF 		bl	printNotif
 602:modem.c       ****             if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2238              		.loc 1 602 0
 2239 0426 09E0     		b	.L113
 2240              	.L119:
 605:modem.c       ****             } 
 606:modem.c       ****             else{
 607:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value.");
 2241              		.loc 1 607 0
 2242 0428 0D49     		ldr	r1, .L125+24
 2243 042a 0220     		movs	r0, #2
 2244 042c FFF7FEFF 		bl	printNotif
 602:modem.c       ****                 updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2245              		.loc 1 602 0
 2246 0430 04E0     		b	.L113
 2247              	.L118:
 608:modem.c       ****             }
 609:modem.c       ****         }
 610:modem.c       ****         else{
 611:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2248              		.loc 1 611 0
 2249 0432 0C49     		ldr	r1, .L125+28
 2250 0434 0220     		movs	r0, #2
 2251 0436 FFF7FEFF 		bl	printNotif
 2252              	.LBE9:
 612:modem.c       ****         }
 613:modem.c       ****     }
 614:modem.c       ****         
 615:modem.c       **** 
 616:modem.c       ****         
 617:modem.c       **** }
 2253              		.loc 1 617 0
 2254 043a FFE7     		b	.L122
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 55


 2255              	.L113:
 2256              	.L122:
 2257 043c 00BF     		nop
 2258 043e 07F51777 		add	r7, r7, #604
 2259              		.cfi_def_cfa_offset 12
 2260 0442 BD46     		mov	sp, r7
 2261              		.cfi_def_cfa_register 13
 2262              		@ sp needed
 2263 0444 90BD     		pop	{r4, r7, pc}
 2264              	.L126:
 2265 0446 00BF     		.align	2
 2266              	.L125:
 2267 0448 88050000 		.word	.LC56
 2268 044c 2C050000 		.word	.LC53
 2269 0450 88020000 		.word	.LC21
 2270 0454 B0030000 		.word	.LC42
 2271 0458 00000000 		.word	updatable_parameters
 2272 045c B0050000 		.word	.LC57
 2273 0460 D8050000 		.word	.LC58
 2274 0464 0C060000 		.word	.LC59
 2275              		.cfi_endproc
 2276              	.LFE81:
 2277              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2278              		.section	.rodata
 2279 0637 00       		.align	2
 2280              	.LC60:
 2281 0638 41542343 		.ascii	"AT#CGMM\015\000"
 2281      474D4D0D 
 2281      00
 2282 0641 000000   		.align	2
 2283              	.LC61:
 2284 0644 4D6F6465 		.ascii	"Modem Model: %s\000"
 2284      6D204D6F 
 2284      64656C3A 
 2284      20257300 
 2285              		.align	2
 2286              	.LC62:
 2287 0654 41542343 		.ascii	"AT#CCID\015\000"
 2287      4349440D 
 2287      00
 2288 065d 000000   		.align	2
 2289              	.LC63:
 2290 0660 53494D20 		.ascii	"SIM ID: %s\000"
 2290      49443A20 
 2290      257300
 2291 066b 00       		.align	2
 2292              	.LC64:
 2293 066c 41542B43 		.ascii	"AT+CGSN\015\000"
 2293      47534E0D 
 2293      00
 2294 0675 000000   		.align	2
 2295              	.LC65:
 2296 0678 494D4549 		.ascii	"IMEI: %s\000"
 2296      3A202573 
 2296      00
 2297 0681 000000   		.align	2
 2298              	.LC66:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 56


 2299 0684 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2299      4744434F 
 2299      4E543D31 
 2299      2C224950 
 2299      222C2277 
 2300 06ad 00       		.ascii	"\000"
 2301 06ae 0000     		.align	2
 2302              	.LC67:
 2303 06b0 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2303      4744434F 
 2303      4E543D31 
 2303      2C224950 
 2303      222C2273 
 2304              		.align	2
 2305              	.LC68:
 2306 06cc 41542B43 		.ascii	"AT+CFUN?\015\000"
 2306      46554E3F 
 2306      0D00
 2307 06d6 0000     		.align	2
 2308              	.LC69:
 2309 06d8 4346554E 		.ascii	"CFUN: %s\000"
 2309      3A202573 
 2309      00
 2310 06e1 000000   		.align	2
 2311              	.LC70:
 2312 06e4 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2312      46554E3D 
 2312      310D00
 2313              		.section	.text.modem_configure_settings,"ax",%progbits
 2314              		.align	2
 2315              		.global	modem_configure_settings
 2316              		.thumb
 2317              		.thumb_func
 2318              		.type	modem_configure_settings, %function
 2319              	modem_configure_settings:
 2320              	.LFB82:
 618:modem.c       ****     
 619:modem.c       **** // Configure the modem settings
 620:modem.c       **** void modem_configure_settings(){
 2321              		.loc 1 620 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 16
 2324              		@ frame_needed = 1, uses_anonymous_args = 0
 2325 0000 80B5     		push	{r7, lr}
 2326              		.cfi_def_cfa_offset 8
 2327              		.cfi_offset 7, -8
 2328              		.cfi_offset 14, -4
 2329 0002 84B0     		sub	sp, sp, #16
 2330              		.cfi_def_cfa_offset 24
 2331 0004 00AF     		add	r7, sp, #0
 2332              		.cfi_def_cfa_register 7
 621:modem.c       ****     
 622:modem.c       ****     // Save/print modem model ID number
 623:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2333              		.loc 1 623 0
 2334 0006 454B     		ldr	r3, .L136
 2335 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 57


 2336 000a 002B     		cmp	r3, #0
 2337 000c 13D1     		bne	.L128
 624:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 625:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2338              		.loc 1 625 0
 2339 000e 4FF4FA62 		mov	r2, #2000
 2340 0012 4349     		ldr	r1, .L136+4
 2341 0014 4348     		ldr	r0, .L136+8
 2342 0016 FFF7FEFF 		bl	at_write_command
 2343 001a 0346     		mov	r3, r0
 2344 001c 002B     		cmp	r3, #0
 2345 001e 0AD0     		beq	.L128
 626:modem.c       ****             // Extract modem model ID number string from the UART
 627:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2346              		.loc 1 627 0
 2347 0020 414B     		ldr	r3, .L136+12
 2348 0022 424A     		ldr	r2, .L136+16
 2349 0024 4249     		ldr	r1, .L136+20
 2350 0026 4348     		ldr	r0, .L136+24
 2351 0028 FFF7FEFF 		bl	extract_string
 628:modem.c       ****             // Print modem model ID number
 629:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2352              		.loc 1 629 0
 2353 002c 3E4A     		ldr	r2, .L136+12
 2354 002e 4249     		ldr	r1, .L136+28
 2355 0030 0020     		movs	r0, #0
 2356 0032 FFF7FEFF 		bl	printNotif
 2357              	.L128:
 630:modem.c       ****         }
 631:modem.c       ****     }
 632:modem.c       ****     
 633:modem.c       ****    // Save/print SIM-card ID
 634:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2358              		.loc 1 634 0
 2359 0036 394B     		ldr	r3, .L136
 2360 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2361 003a 002B     		cmp	r3, #0
 2362 003c 13D1     		bne	.L129
 635:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 636:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2363              		.loc 1 636 0
 2364 003e 4FF4FA62 		mov	r2, #2000
 2365 0042 3749     		ldr	r1, .L136+4
 2366 0044 3D48     		ldr	r0, .L136+32
 2367 0046 FFF7FEFF 		bl	at_write_command
 2368 004a 0346     		mov	r3, r0
 2369 004c 002B     		cmp	r3, #0
 2370 004e 0AD0     		beq	.L129
 637:modem.c       ****             // Extract SIM-card ID string from the UART
 638:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2371              		.loc 1 638 0
 2372 0050 324B     		ldr	r3, .L136
 2373 0052 364A     		ldr	r2, .L136+16
 2374 0054 3649     		ldr	r1, .L136+20
 2375 0056 3748     		ldr	r0, .L136+24
 2376 0058 FFF7FEFF 		bl	extract_string
 639:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 58


 2377              		.loc 1 639 0
 2378 005c 2F4A     		ldr	r2, .L136
 2379 005e 3849     		ldr	r1, .L136+36
 2380 0060 0020     		movs	r0, #0
 2381 0062 FFF7FEFF 		bl	printNotif
 2382              	.L129:
 640:modem.c       ****         }
 641:modem.c       ****    }
 642:modem.c       **** 
 643:modem.c       ****     // Save/print modem IMEI
 644:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2383              		.loc 1 644 0
 2384 0066 2D4B     		ldr	r3, .L136
 2385 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2386 006c 002B     		cmp	r3, #0
 2387 006e 13D1     		bne	.L130
 645:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 646:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2388              		.loc 1 646 0
 2389 0070 4FF4FA62 		mov	r2, #2000
 2390 0074 2A49     		ldr	r1, .L136+4
 2391 0076 3348     		ldr	r0, .L136+40
 2392 0078 FFF7FEFF 		bl	at_write_command
 2393 007c 0346     		mov	r3, r0
 2394 007e 002B     		cmp	r3, #0
 2395 0080 0AD0     		beq	.L130
 647:modem.c       ****             // Extract modem IMEI number string from the UART
 648:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2396              		.loc 1 648 0
 2397 0082 314B     		ldr	r3, .L136+44
 2398 0084 294A     		ldr	r2, .L136+16
 2399 0086 2A49     		ldr	r1, .L136+20
 2400 0088 2A48     		ldr	r0, .L136+24
 2401 008a FFF7FEFF 		bl	extract_string
 649:modem.c       ****             // Print modem IMEI number
 650:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2402              		.loc 1 650 0
 2403 008e 2E4A     		ldr	r2, .L136+44
 2404 0090 2E49     		ldr	r1, .L136+48
 2405 0092 0020     		movs	r0, #0
 2406 0094 FFF7FEFF 		bl	printNotif
 2407              	.L130:
 651:modem.c       ****         } 
 652:modem.c       ****     }
 653:modem.c       ****     
 654:modem.c       ****     // Configure protocol and cellular end point
 655:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 656:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2408              		.loc 1 656 0
 2409 0098 2D4B     		ldr	r3, .L136+52
 2410 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2411 009c 83F00103 		eor	r3, r3, #1
 2412 00a0 DBB2     		uxtb	r3, r3
 2413 00a2 002B     		cmp	r3, #0
 2414 00a4 06D0     		beq	.L131
 657:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2415              		.loc 1 657 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 59


 2416 00a6 4FF4FA62 		mov	r2, #2000
 2417 00aa 1D49     		ldr	r1, .L136+4
 2418 00ac 2948     		ldr	r0, .L136+56
 2419 00ae FFF7FEFF 		bl	at_write_command
 2420 00b2 09E0     		b	.L132
 2421              	.L131:
 658:modem.c       ****     
 659:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2422              		.loc 1 659 0
 2423 00b4 264B     		ldr	r3, .L136+52
 2424 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2425 00b8 002B     		cmp	r3, #0
 2426 00ba 05D0     		beq	.L132
 660:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2427              		.loc 1 660 0
 2428 00bc 4FF4FA62 		mov	r2, #2000
 2429 00c0 1749     		ldr	r1, .L136+4
 2430 00c2 2548     		ldr	r0, .L136+60
 2431 00c4 FFF7FEFF 		bl	at_write_command
 2432              	.L132:
 661:modem.c       ****     }
 662:modem.c       ****     
 663:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 664:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 665:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2433              		.loc 1 665 0
 2434 00c8 4FF4FA62 		mov	r2, #2000
 2435 00cc 1449     		ldr	r1, .L136+4
 2436 00ce 2348     		ldr	r0, .L136+64
 2437 00d0 FFF7FEFF 		bl	at_write_command
 2438 00d4 0346     		mov	r3, r0
 2439 00d6 002B     		cmp	r3, #0
 2440 00d8 1BD0     		beq	.L135
 2441              	.LBB10:
 666:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 667:modem.c       ****         CFUN[0] = '\0';
 2442              		.loc 1 667 0
 2443 00da 0023     		movs	r3, #0
 2444 00dc 3B71     		strb	r3, [r7, #4]
 668:modem.c       ****         // Extract UART string recieved from the modem
 669:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2445              		.loc 1 669 0
 2446 00de 3B1D     		adds	r3, r7, #4
 2447 00e0 124A     		ldr	r2, .L136+16
 2448 00e2 1349     		ldr	r1, .L136+20
 2449 00e4 1348     		ldr	r0, .L136+24
 2450 00e6 FFF7FEFF 		bl	extract_string
 670:modem.c       ****         // Print UART string recieved from the modem
 671:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2451              		.loc 1 671 0
 2452 00ea 3B1D     		adds	r3, r7, #4
 2453 00ec 1A46     		mov	r2, r3
 2454 00ee 1C49     		ldr	r1, .L136+68
 2455 00f0 0020     		movs	r0, #0
 2456 00f2 FFF7FEFF 		bl	printNotif
 672:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 673:modem.c       ****         // If it returns NULL, then write another command to the modem
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 60


 674:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2457              		.loc 1 674 0
 2458 00f6 3B1D     		adds	r3, r7, #4
 2459 00f8 3121     		movs	r1, #49
 2460 00fa 1846     		mov	r0, r3
 2461 00fc FFF7FEFF 		bl	strchr
 2462 0100 0346     		mov	r3, r0
 2463 0102 002B     		cmp	r3, #0
 2464 0104 05D1     		bne	.L135
 675:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 676:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 677:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2465              		.loc 1 677 0
 2466 0106 4FF4FA62 		mov	r2, #2000
 2467 010a 0549     		ldr	r1, .L136+4
 2468 010c 1548     		ldr	r0, .L136+72
 2469 010e FFF7FEFF 		bl	at_write_command
 2470              	.L135:
 2471              	.LBE10:
 678:modem.c       ****         }
 679:modem.c       ****     }
 680:modem.c       **** 
 681:modem.c       ****     
 682:modem.c       **** }
 2472              		.loc 1 682 0
 2473 0112 00BF     		nop
 2474 0114 1037     		adds	r7, r7, #16
 2475              		.cfi_def_cfa_offset 8
 2476 0116 BD46     		mov	sp, r7
 2477              		.cfi_def_cfa_register 13
 2478              		@ sp needed
 2479 0118 80BD     		pop	{r7, pc}
 2480              	.L137:
 2481 011a 00BF     		.align	2
 2482              	.L136:
 2483 011c 00000000 		.word	modem_info
 2484 0120 00000000 		.word	.LC0
 2485 0124 38060000 		.word	.LC60
 2486 0128 14000000 		.word	modem_info+20
 2487 012c 88020000 		.word	.LC21
 2488 0130 8C020000 		.word	.LC22
 2489 0134 00000000 		.word	uart_received_string
 2490 0138 44060000 		.word	.LC61
 2491 013c 54060000 		.word	.LC62
 2492 0140 60060000 		.word	.LC63
 2493 0144 6C060000 		.word	.LC64
 2494 0148 28000000 		.word	modem_info+40
 2495 014c 78060000 		.word	.LC65
 2496 0150 00000000 		.word	updatable_parameters
 2497 0154 84060000 		.word	.LC66
 2498 0158 B0060000 		.word	.LC67
 2499 015c CC060000 		.word	.LC68
 2500 0160 D8060000 		.word	.LC69
 2501 0164 E4060000 		.word	.LC70
 2502              		.cfi_endproc
 2503              	.LFE82:
 2504              		.size	modem_configure_settings, .-modem_configure_settings
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 61


 2505              		.section	.rodata
 2506 06ef 00       		.align	2
 2507              	.LC71:
 2508 06f0 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2508      6D206E6F 
 2508      74207265 
 2508      61647920 
 2508      746F2067 
 2509 0723 6B2E00   		.ascii	"k.\000"
 2510 0726 0000     		.align	2
 2511              	.LC72:
 2512 0728 41542B43 		.ascii	"AT+CCLK?\015\000"
 2512      434C4B3F 
 2512      0D00
 2513 0732 0000     		.align	2
 2514              	.LC73:
 2515 0734 220D00   		.ascii	"\"\015\000"
 2516 0737 00       		.align	2
 2517              	.LC74:
 2518 0738 3A202200 		.ascii	": \"\000"
 2519              		.align	2
 2520              	.LC75:
 2521 073c 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2521      642F2564 
 2521      2C25643A 
 2521      25643A25 
 2521      642D2564 
 2522 0751 000000   		.align	2
 2523              	.LC76:
 2524 0754 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2524      642F2564 
 2524      2C25643A 
 2524      25643A25 
 2524      642B2564 
 2525 0769 000000   		.align	2
 2526              	.LC77:
 2527 076c 436F756C 		.ascii	"Could not parse modem time.\000"
 2527      64206E6F 
 2527      74207061 
 2527      72736520 
 2527      6D6F6465 
 2528              		.section	.text.modem_get_network_time,"ax",%progbits
 2529              		.align	2
 2530              		.global	modem_get_network_time
 2531              		.thumb
 2532              		.thumb_func
 2533              		.type	modem_get_network_time, %function
 2534              	modem_get_network_time:
 2535              	.LFB83:
 683:modem.c       **** 
 684:modem.c       **** //returns 0 if modem can't get time
 685:modem.c       **** long modem_get_network_time(){
 2536              		.loc 1 685 0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 104
 2539              		@ frame_needed = 1, uses_anonymous_args = 0
 2540 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 62


 2541              		.cfi_def_cfa_offset 8
 2542              		.cfi_offset 7, -8
 2543              		.cfi_offset 14, -4
 2544 0002 A0B0     		sub	sp, sp, #128
 2545              		.cfi_def_cfa_offset 136
 2546 0004 06AF     		add	r7, sp, #24
 2547              		.cfi_def_cfa 7, 112
 686:modem.c       ****     
 687:modem.c       ****     //modem reposen format (careful to include the quotes "")
 688:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 689:modem.c       ****     //ex: 14:48 GMT
 690:modem.c       **** 
 691:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 692:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2548              		.loc 1 692 0
 2549 0006 444B     		ldr	r3, .L145
 2550 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2551 000a 042B     		cmp	r3, #4
 2552 000c 05D0     		beq	.L139
 693:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2553              		.loc 1 693 0
 2554 000e 4349     		ldr	r1, .L145+4
 2555 0010 0220     		movs	r0, #2
 2556 0012 FFF7FEFF 		bl	printNotif
 694:modem.c       ****         return 0;   
 2557              		.loc 1 694 0
 2558 0016 0023     		movs	r3, #0
 2559 0018 7AE0     		b	.L140
 2560              	.L139:
 695:modem.c       ****     }
 696:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2561              		.loc 1 696 0
 2562 001a 0023     		movs	r3, #0
 2563 001c 7B66     		str	r3, [r7, #100]
 697:modem.c       ****     
 698:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 699:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2564              		.loc 1 699 0
 2565 001e 4FF4FA62 		mov	r2, #2000
 2566 0022 3F49     		ldr	r1, .L145+8
 2567 0024 3F48     		ldr	r0, .L145+12
 2568 0026 FFF7FEFF 		bl	at_write_command
 2569 002a 0346     		mov	r3, r0
 2570 002c 002B     		cmp	r3, #0
 2571 002e 6ED0     		beq	.L141
 2572              	.LBB11:
 700:modem.c       ****         // need to set this to /0
 701:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 702:modem.c       ****         network_time[0] = '\0';
 2573              		.loc 1 702 0
 2574 0030 0023     		movs	r3, #0
 2575 0032 87F84430 		strb	r3, [r7, #68]
 703:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 704:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2576              		.loc 1 704 0
 2577 0036 07F14403 		add	r3, r7, #68
 2578 003a 3B4A     		ldr	r2, .L145+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 63


 2579 003c 3B49     		ldr	r1, .L145+20
 2580 003e 3C48     		ldr	r0, .L145+24
 2581 0040 FFF7FEFF 		bl	extract_string
 705:modem.c       ****         
 706:modem.c       ****         ///////////////////  
 707:modem.c       ****         struct tm t; // Creates variable t of struct tm
 708:modem.c       ****         
 709:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 710:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2582              		.loc 1 710 0
 2583 0044 0023     		movs	r3, #0
 2584 0046 BB62     		str	r3, [r7, #40]
 711:modem.c       ****       
 712:modem.c       ****         // Determines the GMT offset 
 713:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 714:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 715:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2585              		.loc 1 715 0
 2586 0048 07F13C01 		add	r1, r7, #60
 2587 004c 07F14002 		add	r2, r7, #64
 2588 0050 07F14400 		add	r0, r7, #68
 2589 0054 07F12803 		add	r3, r7, #40
 2590 0058 0493     		str	r3, [sp, #16]
 2591 005a 07F12C03 		add	r3, r7, #44
 2592 005e 0393     		str	r3, [sp, #12]
 2593 0060 07F13003 		add	r3, r7, #48
 2594 0064 0293     		str	r3, [sp, #8]
 2595 0066 07F13403 		add	r3, r7, #52
 2596 006a 0193     		str	r3, [sp, #4]
 2597 006c 07F13803 		add	r3, r7, #56
 2598 0070 0093     		str	r3, [sp]
 2599 0072 0B46     		mov	r3, r1
 2600 0074 2F49     		ldr	r1, .L145+28
 2601 0076 FFF7FEFF 		bl	sscanf
 2602 007a 0346     		mov	r3, r0
 2603 007c 072B     		cmp	r3, #7
 2604 007e 06D1     		bne	.L142
 716:modem.c       ****             gmt_offset = gmt_offset*(900);
 2605              		.loc 1 716 0
 2606 0080 BB6A     		ldr	r3, [r7, #40]
 2607 0082 4FF46172 		mov	r2, #900
 2608 0086 02FB03F3 		mul	r3, r2, r3
 2609 008a BB62     		str	r3, [r7, #40]
 2610 008c 27E0     		b	.L143
 2611              	.L142:
 717:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2612              		.loc 1 717 0
 2613 008e 07F13C01 		add	r1, r7, #60
 2614 0092 07F14002 		add	r2, r7, #64
 2615 0096 07F14400 		add	r0, r7, #68
 2616 009a 07F12803 		add	r3, r7, #40
 2617 009e 0493     		str	r3, [sp, #16]
 2618 00a0 07F12C03 		add	r3, r7, #44
 2619 00a4 0393     		str	r3, [sp, #12]
 2620 00a6 07F13003 		add	r3, r7, #48
 2621 00aa 0293     		str	r3, [sp, #8]
 2622 00ac 07F13403 		add	r3, r7, #52
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 64


 2623 00b0 0193     		str	r3, [sp, #4]
 2624 00b2 07F13803 		add	r3, r7, #56
 2625 00b6 0093     		str	r3, [sp]
 2626 00b8 0B46     		mov	r3, r1
 2627 00ba 1F49     		ldr	r1, .L145+32
 2628 00bc FFF7FEFF 		bl	sscanf
 2629 00c0 0346     		mov	r3, r0
 2630 00c2 072B     		cmp	r3, #7
 2631 00c4 05D1     		bne	.L144
 718:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2632              		.loc 1 718 0
 2633 00c6 BB6A     		ldr	r3, [r7, #40]
 2634 00c8 1C4A     		ldr	r2, .L145+36
 2635 00ca 02FB03F3 		mul	r3, r2, r3
 2636 00ce BB62     		str	r3, [r7, #40]
 2637 00d0 05E0     		b	.L143
 2638              	.L144:
 719:modem.c       ****         }else{
 720:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2639              		.loc 1 720 0
 2640 00d2 1B49     		ldr	r1, .L145+40
 2641 00d4 0220     		movs	r0, #2
 2642 00d6 FFF7FEFF 		bl	printNotif
 721:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2643              		.loc 1 721 0
 2644 00da 0023     		movs	r3, #0
 2645 00dc 18E0     		b	.L140
 2646              	.L143:
 722:modem.c       ****         }
 723:modem.c       ****         
 724:modem.c       ****         // Sets each variable to the correct time 
 725:modem.c       ****         t.tm_sec = second;
 2647              		.loc 1 725 0
 2648 00de FB6A     		ldr	r3, [r7, #44]
 2649 00e0 7B60     		str	r3, [r7, #4]
 726:modem.c       ****         t.tm_min = minute;
 2650              		.loc 1 726 0
 2651 00e2 3B6B     		ldr	r3, [r7, #48]
 2652 00e4 BB60     		str	r3, [r7, #8]
 727:modem.c       ****         t.tm_hour = hour;
 2653              		.loc 1 727 0
 2654 00e6 7B6B     		ldr	r3, [r7, #52]
 2655 00e8 FB60     		str	r3, [r7, #12]
 728:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2656              		.loc 1 728 0
 2657 00ea 3B6C     		ldr	r3, [r7, #64]
 2658 00ec 6433     		adds	r3, r3, #100
 2659 00ee BB61     		str	r3, [r7, #24]
 729:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2660              		.loc 1 729 0
 2661 00f0 FB6B     		ldr	r3, [r7, #60]
 2662 00f2 013B     		subs	r3, r3, #1
 2663 00f4 7B61     		str	r3, [r7, #20]
 730:modem.c       ****         t.tm_mday = day;           // Day of the month
 2664              		.loc 1 730 0
 2665 00f6 BB6B     		ldr	r3, [r7, #56]
 2666 00f8 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 65


 731:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2667              		.loc 1 731 0
 2668 00fa 0023     		movs	r3, #0
 2669 00fc 7B62     		str	r3, [r7, #36]
 732:modem.c       ****     
 733:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 734:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 735:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2670              		.loc 1 735 0
 2671 00fe 3B1D     		adds	r3, r7, #4
 2672 0100 1846     		mov	r0, r3
 2673 0102 FFF7FEFF 		bl	mktime
 2674 0106 0246     		mov	r2, r0
 2675 0108 BB6A     		ldr	r3, [r7, #40]
 2676 010a 1344     		add	r3, r3, r2
 2677 010c 7B66     		str	r3, [r7, #100]
 2678              	.L141:
 2679              	.LBE11:
 736:modem.c       ****     }
 737:modem.c       ****     
 738:modem.c       ****     return epoch_time;
 2680              		.loc 1 738 0
 2681 010e 7B6E     		ldr	r3, [r7, #100]
 2682              	.L140:
 739:modem.c       **** }
 2683              		.loc 1 739 0
 2684 0110 1846     		mov	r0, r3
 2685 0112 6837     		adds	r7, r7, #104
 2686              		.cfi_def_cfa_offset 8
 2687 0114 BD46     		mov	sp, r7
 2688              		.cfi_def_cfa_register 13
 2689              		@ sp needed
 2690 0116 80BD     		pop	{r7, pc}
 2691              	.L146:
 2692              		.align	2
 2693              	.L145:
 2694 0118 00000000 		.word	modem_state
 2695 011c F0060000 		.word	.LC71
 2696 0120 00000000 		.word	.LC0
 2697 0124 28070000 		.word	.LC72
 2698 0128 34070000 		.word	.LC73
 2699 012c 38070000 		.word	.LC74
 2700 0130 00000000 		.word	uart_received_string
 2701 0134 3C070000 		.word	.LC75
 2702 0138 54070000 		.word	.LC76
 2703 013c 7CFCFFFF 		.word	-900
 2704 0140 6C070000 		.word	.LC77
 2705              		.cfi_endproc
 2706              	.LFE83:
 2707              		.size	modem_get_network_time, .-modem_get_network_time
 2708              		.section	.text.modem_get_state,"ax",%progbits
 2709              		.align	2
 2710              		.global	modem_get_state
 2711              		.thumb
 2712              		.thumb_func
 2713              		.type	modem_get_state, %function
 2714              	modem_get_state:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 66


 2715              	.LFB84:
 740:modem.c       **** 
 741:modem.c       **** // Get the modem state
 742:modem.c       **** uint8 modem_get_state(){
 2716              		.loc 1 742 0
 2717              		.cfi_startproc
 2718              		@ args = 0, pretend = 0, frame = 0
 2719              		@ frame_needed = 1, uses_anonymous_args = 0
 2720              		@ link register save eliminated.
 2721 0000 80B4     		push	{r7}
 2722              		.cfi_def_cfa_offset 4
 2723              		.cfi_offset 7, -4
 2724 0002 00AF     		add	r7, sp, #0
 2725              		.cfi_def_cfa_register 7
 743:modem.c       ****     return modem_state;
 2726              		.loc 1 743 0
 2727 0004 024B     		ldr	r3, .L149
 2728 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744:modem.c       **** }
 2729              		.loc 1 744 0
 2730 0008 1846     		mov	r0, r3
 2731 000a BD46     		mov	sp, r7
 2732              		.cfi_def_cfa_register 13
 2733              		@ sp needed
 2734 000c 80BC     		pop	{r7}
 2735              		.cfi_restore 7
 2736              		.cfi_def_cfa_offset 0
 2737 000e 7047     		bx	lr
 2738              	.L150:
 2739              		.align	2
 2740              	.L149:
 2741 0010 00000000 		.word	modem_state
 2742              		.cfi_endproc
 2743              	.LFE84:
 2744              		.size	modem_get_state, .-modem_get_state
 2745              		.section	.text.modem_sleep,"ax",%progbits
 2746              		.align	2
 2747              		.global	modem_sleep
 2748              		.thumb
 2749              		.thumb_func
 2750              		.type	modem_sleep, %function
 2751              	modem_sleep:
 2752              	.LFB85:
 745:modem.c       **** 
 746:modem.c       **** // Set modem to sleep
 747:modem.c       **** void modem_sleep(){
 2753              		.loc 1 747 0
 2754              		.cfi_startproc
 2755              		@ args = 0, pretend = 0, frame = 0
 2756              		@ frame_needed = 1, uses_anonymous_args = 0
 2757 0000 80B5     		push	{r7, lr}
 2758              		.cfi_def_cfa_offset 8
 2759              		.cfi_offset 7, -8
 2760              		.cfi_offset 14, -4
 2761 0002 00AF     		add	r7, sp, #0
 2762              		.cfi_def_cfa_register 7
 748:modem.c       ****     // If the modem_state is not "off" then put it to sleep
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 67


 749:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2763              		.loc 1 749 0
 2764 0004 FFF7FEFF 		bl	modem_get_state
 2765 0008 0346     		mov	r3, r0
 2766 000a 002B     		cmp	r3, #0
 2767 000c 03D0     		beq	.L153
 750:modem.c       **** 
 751:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2768              		.loc 1 751 0
 2769 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 752:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2770              		.loc 1 752 0
 2771 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2772              	.L153:
 753:modem.c       ****         
 754:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 755:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 756:modem.c       ****      }
 757:modem.c       **** }
 2773              		.loc 1 757 0
 2774 0016 00BF     		nop
 2775 0018 80BD     		pop	{r7, pc}
 2776              		.cfi_endproc
 2777              	.LFE85:
 2778              		.size	modem_sleep, .-modem_sleep
 2779 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2780              		.align	2
 2781              		.global	modem_wakeup
 2782              		.thumb
 2783              		.thumb_func
 2784              		.type	modem_wakeup, %function
 2785              	modem_wakeup:
 2786              	.LFB86:
 758:modem.c       **** 
 759:modem.c       **** // Wakeup the modem
 760:modem.c       **** void modem_wakeup(){
 2787              		.loc 1 760 0
 2788              		.cfi_startproc
 2789              		@ args = 0, pretend = 0, frame = 0
 2790              		@ frame_needed = 1, uses_anonymous_args = 0
 2791 0000 80B5     		push	{r7, lr}
 2792              		.cfi_def_cfa_offset 8
 2793              		.cfi_offset 7, -8
 2794              		.cfi_offset 14, -4
 2795 0002 00AF     		add	r7, sp, #0
 2796              		.cfi_def_cfa_register 7
 761:modem.c       ****     // If modem state is not off then wake it up
 762:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2797              		.loc 1 762 0
 2798 0004 FFF7FEFF 		bl	modem_get_state
 2799 0008 0346     		mov	r3, r0
 2800 000a 002B     		cmp	r3, #0
 2801 000c 0BD0     		beq	.L156
 763:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2802              		.loc 1 763 0
 2803 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 764:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 68


 765:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 766:modem.c       ****         UART_Telit_Wakeup();
 2804              		.loc 1 766 0
 2805 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 767:modem.c       ****         // Remove the need for this pin itterupt
 768:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 769:modem.c       ****         
 770:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 771:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2806              		.loc 1 771 0
 2807 0016 FFF7FEFF 		bl	modem_get_state
 2808 001a 0346     		mov	r3, r0
 2809 001c 032B     		cmp	r3, #3
 2810 001e 02D1     		bne	.L156
 772:modem.c       ****             CyDelay(100u);
 2811              		.loc 1 772 0
 2812 0020 6420     		movs	r0, #100
 2813 0022 FFF7FEFF 		bl	CyDelay
 2814              	.L156:
 773:modem.c       ****         }
 774:modem.c       ****      }
 775:modem.c       **** }
 2815              		.loc 1 775 0
 2816 0026 00BF     		nop
 2817 0028 80BD     		pop	{r7, pc}
 2818              		.cfi_endproc
 2819              	.LFE86:
 2820              		.size	modem_wakeup, .-modem_wakeup
 2821 002a 00BF     		.section	.rodata
 2822              		.align	2
 2823              	.LC78:
 2824 0788 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2824      50494F3D 
 2824      352C312C 
 2824      312C300D 
 2824      00
 2825 0799 000000   		.align	2
 2826              	.LC79:
 2827 079c 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2827      55504C53 
 2827      45433D31 
 2827      0D00
 2828 07aa 0000     		.align	2
 2829              	.LC80:
 2830 07ac 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2830      55504C56 
 2830      3D320D00 
 2831              		.align	2
 2832              	.LC81:
 2833 07b8 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2833      47505345 
 2833      4E3D310D 
 2833      00
 2834 07c5 000000   		.align	2
 2835              	.LC82:
 2836 07c8 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2836      4C503D31 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 69


 2836      2C227375 
 2836      706C2E67 
 2836      6F6F676C 
 2837 07e9 000000   		.align	2
 2838              	.LC83:
 2839 07ec 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2839      47414354 
 2839      3D312C30 
 2839      0D0A00
 2840 07fb 00       		.align	2
 2841              	.LC84:
 2842 07fc 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2842      43534C4B 
 2842      3D312C31 
 2842      0D00
 2843 080a 0000     		.align	2
 2844              	.LC85:
 2845 080c 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2845      5053534C 
 2845      53523D31 
 2845      2C312C2C 
 2845      2C2C2C32 
 2846 0822 0000     		.align	2
 2847              	.LC86:
 2848 0824 4E00     		.ascii	"N\000"
 2849 0826 0000     		.align	2
 2850              	.LC87:
 2851 0828 41542447 		.ascii	"AT$GPSACP\015\000"
 2851      50534143 
 2851      500D00
 2852 0833 00       		.align	2
 2853              	.LC88:
 2854 0834 24475053 		.ascii	"$GPSACP: \000"
 2854      4143503A 
 2854      2000
 2855 083e 0000     		.align	2
 2856              	.LC89:
 2857 0840 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2857      4143503A 
 2857      20252A66 
 2857      2C25664E 
 2857      2C256657 
 2858              		.global	__aeabi_fdiv
 2859              		.global	__aeabi_f2d
 2860              		.global	__aeabi_ddiv
 2861              		.global	__aeabi_dadd
 2862              		.global	__aeabi_d2f
 2863              		.align	2
 2864              	.LC90:
 2865 0860 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2865      50494F3D 
 2865      352C302C 
 2865      312C300D 
 2865      00
 2866 0871 000000   		.align	2
 2867              	.LC91:
 2868 0874 41542447 		.ascii	"AT$GPSR=0\015\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 70


 2868      5053523D 
 2868      300D00
 2869 087f 00       		.align	2
 2870              	.LC92:
 2871 0880 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2871      20746F20 
 2871      6C6F636B 
 2871      20475053 
 2871      3A202564 
 2872              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2873              		.align	2
 2874              		.global	modem_get_gps_coordinates
 2875              		.thumb
 2876              		.thumb_func
 2877              		.type	modem_get_gps_coordinates, %function
 2878              	modem_get_gps_coordinates:
 2879              	.LFB87:
 776:modem.c       **** 
 777:modem.c       ****     
 778:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 779:modem.c       **** gps_t modem_get_gps_coordinates(){
 2880              		.loc 1 779 0
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 56
 2883              		@ frame_needed = 1, uses_anonymous_args = 0
 2884 0000 B0B5     		push	{r4, r5, r7, lr}
 2885              		.cfi_def_cfa_offset 16
 2886              		.cfi_offset 4, -16
 2887              		.cfi_offset 5, -12
 2888              		.cfi_offset 7, -8
 2889              		.cfi_offset 14, -4
 2890 0002 90B0     		sub	sp, sp, #64
 2891              		.cfi_def_cfa_offset 80
 2892 0004 02AF     		add	r7, sp, #8
 2893              		.cfi_def_cfa 7, 72
 2894 0006 7860     		str	r0, [r7, #4]
 780:modem.c       ****     gps_t gps;
 781:modem.c       ****     gps.altitude = 0;
 2895              		.loc 1 781 0
 2896 0008 4FF00003 		mov	r3, #0
 2897 000c FB61     		str	r3, [r7, #28]	@ float
 782:modem.c       ****     gps.longitude = 0;
 2898              		.loc 1 782 0
 2899 000e 4FF00003 		mov	r3, #0
 2900 0012 BB61     		str	r3, [r7, #24]	@ float
 783:modem.c       ****     gps.latitude = 0;
 2901              		.loc 1 783 0
 2902 0014 4FF00003 		mov	r3, #0
 2903 0018 7B61     		str	r3, [r7, #20]	@ float
 784:modem.c       ****     gps.time_to_lock =0;
 2904              		.loc 1 784 0
 2905 001a 0023     		movs	r3, #0
 2906 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 785:modem.c       ****     gps.valid = 0;
 2907              		.loc 1 785 0
 2908 001e 0023     		movs	r3, #0
 2909 0020 87F82230 		strb	r3, [r7, #34]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 71


 786:modem.c       ****     
 787:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 788:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2910              		.loc 1 788 0
 2911 0024 7F4B     		ldr	r3, .L167
 2912 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2913 0028 042B     		cmp	r3, #4
 2914 002a 07D0     		beq	.L158
 789:modem.c       ****         return gps;//where valid = 0
 2915              		.loc 1 789 0
 2916 002c 7B68     		ldr	r3, [r7, #4]
 2917 002e 1C46     		mov	r4, r3
 2918 0030 07F11403 		add	r3, r7, #20
 2919 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2920 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2921 003a EFE0     		b	.L157
 2922              	.L158:
 790:modem.c       ****     }
 791:modem.c       ****     
 792:modem.c       ****     long lock_time = getTimeStamp();
 2923              		.loc 1 792 0
 2924 003c FFF7FEFF 		bl	getTimeStamp
 2925 0040 3863     		str	r0, [r7, #48]
 793:modem.c       ****     
 794:modem.c       ****     // Enable this for the LTER module
 795:modem.c       ****     // Enable GPS Low-Dropout Regulator
 796:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2926              		.loc 1 796 0
 2927 0042 4FF4FA62 		mov	r2, #2000
 2928 0046 7849     		ldr	r1, .L167+4
 2929 0048 7848     		ldr	r0, .L167+8
 2930 004a FFF7FEFF 		bl	at_write_command
 797:modem.c       ****     
 798:modem.c       ****     // Configure SUPL connection params
 799:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2931              		.loc 1 799 0
 2932 004e 4FF4FA62 		mov	r2, #2000
 2933 0052 7549     		ldr	r1, .L167+4
 2934 0054 7648     		ldr	r0, .L167+12
 2935 0056 FFF7FEFF 		bl	at_write_command
 800:modem.c       ****     
 801:modem.c       ****     // Use SUPL2.0
 802:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2936              		.loc 1 802 0
 2937 005a 4FF4FA62 		mov	r2, #2000
 2938 005e 7249     		ldr	r1, .L167+4
 2939 0060 7448     		ldr	r0, .L167+16
 2940 0062 FFF7FEFF 		bl	at_write_command
 803:modem.c       ****     
 804:modem.c       ****     // Enable AGPS service
 805:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2941              		.loc 1 805 0
 2942 0066 4FF4FA62 		mov	r2, #2000
 2943 006a 6F49     		ldr	r1, .L167+4
 2944 006c 7248     		ldr	r0, .L167+20
 2945 006e FFF7FEFF 		bl	at_write_command
 806:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 72


 807:modem.c       ****     // Chose SUPL server, use google public service
 808:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2946              		.loc 1 808 0
 2947 0072 4FF4FA62 		mov	r2, #2000
 2948 0076 6C49     		ldr	r1, .L167+4
 2949 0078 7048     		ldr	r0, .L167+24
 2950 007a FFF7FEFF 		bl	at_write_command
 809:modem.c       ****     
 810:modem.c       ****     //pdp context has to be locked to carrier for this to work
 811:modem.c       ****     
 812:modem.c       ****     // Unlock context since it needs to be used by modem
 813:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2951              		.loc 1 813 0
 2952 007e 4FF4FA62 		mov	r2, #2000
 2953 0082 6949     		ldr	r1, .L167+4
 2954 0084 6E48     		ldr	r0, .L167+28
 2955 0086 FFF7FEFF 		bl	at_write_command
 814:modem.c       ****     
 815:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2956              		.loc 1 815 0
 2957 008a 4FF4FA62 		mov	r2, #2000
 2958 008e 6649     		ldr	r1, .L167+4
 2959 0090 6C48     		ldr	r0, .L167+32
 2960 0092 FFF7FEFF 		bl	at_write_command
 816:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 817:modem.c       ****     
 818:modem.c       ****     // Relock the context
 819:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2961              		.loc 1 819 0
 2962 0096 42F21072 		movw	r2, #10000
 2963 009a 6349     		ldr	r1, .L167+4
 2964 009c 6A48     		ldr	r0, .L167+36
 2965 009e FFF7FEFF 		bl	at_write_command
 820:modem.c       ****     
 821:modem.c       ****     //start AGPS service
 822:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2966              		.loc 1 822 0
 2967 00a2 4FF4FA62 		mov	r2, #2000
 2968 00a6 6049     		ldr	r1, .L167+4
 2969 00a8 6848     		ldr	r0, .L167+40
 2970 00aa FFF7FEFF 		bl	at_write_command
 823:modem.c       ****     
 824:modem.c       ****     
 825:modem.c       ****     // Start the AGPS service
 826:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 827:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 828:modem.c       ****     
 829:modem.c       ****     
 830:modem.c       ****  
 831:modem.c       ****     uint8 gps_status = 0;
 2971              		.loc 1 831 0
 2972 00ae 0023     		movs	r3, #0
 2973 00b0 87F82F30 		strb	r3, [r7, #47]
 2974              	.LBB12:
 832:modem.c       ****     for(uint16 i=0;i<200;i++){
 2975              		.loc 1 832 0
 2976 00b4 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 73


 2977 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2978 00b8 13E0     		b	.L160
 2979              	.L163:
 833:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2980              		.loc 1 833 0
 2981 00ba 4FF4FA62 		mov	r2, #2000
 2982 00be 6449     		ldr	r1, .L167+44
 2983 00c0 6448     		ldr	r0, .L167+48
 2984 00c2 FFF7FEFF 		bl	at_write_command
 2985 00c6 0346     		mov	r3, r0
 2986 00c8 87F82F30 		strb	r3, [r7, #47]
 834:modem.c       ****         if(gps_status){
 2987              		.loc 1 834 0
 2988 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2989 00d0 002B     		cmp	r3, #0
 2990 00d2 0AD1     		bne	.L166
 835:modem.c       ****             break;   
 836:modem.c       ****         }
 837:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2991              		.loc 1 837 0 discriminator 2
 2992 00d4 4FF47A70 		mov	r0, #1000
 2993 00d8 FFF7FEFF 		bl	CyDelay
 832:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2994              		.loc 1 832 0 discriminator 2
 2995 00dc FB8E     		ldrh	r3, [r7, #54]
 2996 00de 0133     		adds	r3, r3, #1
 2997 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2998              	.L160:
 832:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2999              		.loc 1 832 0 is_stmt 0 discriminator 1
 3000 00e2 FB8E     		ldrh	r3, [r7, #54]
 3001 00e4 C72B     		cmp	r3, #199
 3002 00e6 E8D9     		bls	.L163
 3003 00e8 00E0     		b	.L162
 3004              	.L166:
 835:modem.c       ****             break;   
 3005              		.loc 1 835 0 is_stmt 1
 3006 00ea 00BF     		nop
 3007              	.L162:
 3008              	.LBE12:
 838:modem.c       ****     }
 839:modem.c       ****     
 840:modem.c       ****     //parse data here
 841:modem.c       ****     
 842:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 843:modem.c       ****     float lat;
 844:modem.c       ****     float lon;
 845:modem.c       ****     float alt;
 846:modem.c       ****     
 847:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 848:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 849:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 3009              		.loc 1 849 0
 3010 00ec 5A49     		ldr	r1, .L167+52
 3011 00ee 5B48     		ldr	r0, .L167+56
 3012 00f0 FFF7FEFF 		bl	strstr
 3013 00f4 B862     		str	r0, [r7, #40]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 74


 850:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 851:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 852:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 3014              		.loc 1 852 0
 3015 00f6 07F10C01 		add	r1, r7, #12
 3016 00fa 07F11002 		add	r2, r7, #16
 3017 00fe 07F10803 		add	r3, r7, #8
 3018 0102 0093     		str	r3, [sp]
 3019 0104 0B46     		mov	r3, r1
 3020 0106 5649     		ldr	r1, .L167+60
 3021 0108 B86A     		ldr	r0, [r7, #40]
 3022 010a FFF7FEFF 		bl	sscanf
 3023 010e 7862     		str	r0, [r7, #36]
 853:modem.c       ****     if(match >= 3){
 3024              		.loc 1 853 0
 3025 0110 7B6A     		ldr	r3, [r7, #36]
 3026 0112 022B     		cmp	r3, #2
 3027 0114 60DD     		ble	.L164
 854:modem.c       ****         // Calculate lat and lon
 855:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 856:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 857:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 3028              		.loc 1 857 0
 3029 0116 3B69     		ldr	r3, [r7, #16]	@ float
 3030 0118 5249     		ldr	r1, .L167+64
 3031 011a 1846     		mov	r0, r3
 3032 011c FFF7FEFF 		bl	__aeabi_fdiv
 3033 0120 0346     		mov	r3, r0
 3034 0122 1846     		mov	r0, r3
 3035 0124 FFF7FEFF 		bl	floorf
 3036 0128 0346     		mov	r3, r0
 3037 012a 1846     		mov	r0, r3
 3038 012c FFF7FEFF 		bl	__aeabi_f2d
 3039 0130 0446     		mov	r4, r0
 3040 0132 0D46     		mov	r5, r1
 3041 0134 3B69     		ldr	r3, [r7, #16]	@ float
 3042 0136 1846     		mov	r0, r3
 3043 0138 FFF7FEFF 		bl	__aeabi_f2d
 3044 013c 4FF00002 		mov	r2, #0
 3045 0140 494B     		ldr	r3, .L167+68
 3046 0142 FFF7FEFF 		bl	fmod
 3047 0146 4FF00002 		mov	r2, #0
 3048 014a 484B     		ldr	r3, .L167+72
 3049 014c FFF7FEFF 		bl	__aeabi_ddiv
 3050 0150 0246     		mov	r2, r0
 3051 0152 0B46     		mov	r3, r1
 3052 0154 2046     		mov	r0, r4
 3053 0156 2946     		mov	r1, r5
 3054 0158 FFF7FEFF 		bl	__aeabi_dadd
 3055 015c 0346     		mov	r3, r0
 3056 015e 0C46     		mov	r4, r1
 3057 0160 1846     		mov	r0, r3
 3058 0162 2146     		mov	r1, r4
 3059 0164 FFF7FEFF 		bl	__aeabi_d2f
 3060 0168 0346     		mov	r3, r0
 3061 016a 3B61     		str	r3, [r7, #16]	@ float
 858:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 75


 3062              		.loc 1 858 0
 3063 016c FB68     		ldr	r3, [r7, #12]	@ float
 3064 016e 3D49     		ldr	r1, .L167+64
 3065 0170 1846     		mov	r0, r3
 3066 0172 FFF7FEFF 		bl	__aeabi_fdiv
 3067 0176 0346     		mov	r3, r0
 3068 0178 1846     		mov	r0, r3
 3069 017a FFF7FEFF 		bl	floorf
 3070 017e 0346     		mov	r3, r0
 3071 0180 1846     		mov	r0, r3
 3072 0182 FFF7FEFF 		bl	__aeabi_f2d
 3073 0186 0446     		mov	r4, r0
 3074 0188 0D46     		mov	r5, r1
 3075 018a FB68     		ldr	r3, [r7, #12]	@ float
 3076 018c 1846     		mov	r0, r3
 3077 018e FFF7FEFF 		bl	__aeabi_f2d
 3078 0192 4FF00002 		mov	r2, #0
 3079 0196 344B     		ldr	r3, .L167+68
 3080 0198 FFF7FEFF 		bl	fmod
 3081 019c 4FF00002 		mov	r2, #0
 3082 01a0 324B     		ldr	r3, .L167+72
 3083 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 3084 01a6 0246     		mov	r2, r0
 3085 01a8 0B46     		mov	r3, r1
 3086 01aa 2046     		mov	r0, r4
 3087 01ac 2946     		mov	r1, r5
 3088 01ae FFF7FEFF 		bl	__aeabi_dadd
 3089 01b2 0346     		mov	r3, r0
 3090 01b4 0C46     		mov	r4, r1
 3091 01b6 1846     		mov	r0, r3
 3092 01b8 2146     		mov	r1, r4
 3093 01ba FFF7FEFF 		bl	__aeabi_d2f
 3094 01be 0346     		mov	r3, r0
 3095 01c0 83F00043 		eor	r3, r3, #-2147483648
 3096 01c4 FB60     		str	r3, [r7, #12]	@ float
 859:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3097              		.loc 1 859 0
 3098 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3099 01c8 FB61     		str	r3, [r7, #28]	@ float
 860:modem.c       ****         gps.latitude = lat;
 3100              		.loc 1 860 0
 3101 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3102 01cc 7B61     		str	r3, [r7, #20]	@ float
 861:modem.c       ****         gps.longitude = lon;
 3103              		.loc 1 861 0
 3104 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3105 01d0 BB61     		str	r3, [r7, #24]	@ float
 862:modem.c       ****         gps.valid = 1;
 3106              		.loc 1 862 0
 3107 01d2 0123     		movs	r3, #1
 3108 01d4 87F82230 		strb	r3, [r7, #34]
 3109              	.L164:
 863:modem.c       ****     }
 864:modem.c       ****     
 865:modem.c       ****     // Disable LDO, just in case
 866:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3110              		.loc 1 866 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 76


 3111 01d8 4FF4FA62 		mov	r2, #2000
 3112 01dc 1249     		ldr	r1, .L167+4
 3113 01de 2448     		ldr	r0, .L167+76
 3114 01e0 FFF7FEFF 		bl	at_write_command
 867:modem.c       ****     
 868:modem.c       ****     // Flush modem's GPS data, just in case
 869:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3115              		.loc 1 869 0
 3116 01e4 4FF4FA62 		mov	r2, #2000
 3117 01e8 0F49     		ldr	r1, .L167+4
 3118 01ea 2248     		ldr	r0, .L167+80
 3119 01ec FFF7FEFF 		bl	at_write_command
 870:modem.c       ****     
 871:modem.c       ****     
 872:modem.c       ****     
 873:modem.c       ****     
 874:modem.c       ****     
 875:modem.c       ****     /* Relevant to 3g modem, can ignore
 876:modem.c       ****     
 877:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 878:modem.c       ****     //AT$GPSQOS=50,50,100,0
 879:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 880:modem.c       ****     
 881:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 882:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 883:modem.c       ****     
 884:modem.c       ****     //unlock contedt, simnce its being used by modem
 885:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 886:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 887:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 888:modem.c       ****     
 889:modem.c       ****     //unlock contedt, simnce its being used by modem
 890:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 891:modem.c       ****     
 892:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 893:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 894:modem.c       ****     
 895:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 896:modem.c       ****    uint8 gps_status = 0;
 897:modem.c       ****     for(uint16 i=0;i<200;i++){
 898:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 899:modem.c       ****         if(gps_status){
 900:modem.c       ****             break;   
 901:modem.c       ****         }
 902:modem.c       ****   }
 903:modem.c       ****     
 904:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 905:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 906:modem.c       ****     if(gps_status){
 907:modem.c       ****         float lat,lon,alt = 0;
 908:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 909:modem.c       ****             gps.altitude = alt;
 910:modem.c       ****             gps.latitude = lat/60;
 911:modem.c       ****             gps.longitude = lon/60;
 912:modem.c       ****             gps.valid = 1;
 913:modem.c       ****         }
 914:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 77


 915:modem.c       ****     }
 916:modem.c       ****     
 917:modem.c       ****     //turn off gps
 918:modem.c       ****     //AT$GPSP=0
 919:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 920:modem.c       ****     
 921:modem.c       ****     */
 922:modem.c       **** 
 923:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 924:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3120              		.loc 1 924 0
 3121 01f0 FFF7FEFF 		bl	getTimeStamp
 3122 01f4 0246     		mov	r2, r0
 3123 01f6 3B6B     		ldr	r3, [r7, #48]
 3124 01f8 D31A     		subs	r3, r2, r3
 3125 01fa 3B63     		str	r3, [r7, #48]
 925:modem.c       ****     gps.time_to_lock = lock_time;
 3126              		.loc 1 925 0
 3127 01fc 3B6B     		ldr	r3, [r7, #48]
 3128 01fe 9BB2     		uxth	r3, r3
 3129 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 926:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3130              		.loc 1 926 0
 3131 0202 3B8C     		ldrh	r3, [r7, #32]
 3132 0204 1A46     		mov	r2, r3
 3133 0206 1C49     		ldr	r1, .L167+84
 3134 0208 0020     		movs	r0, #0
 3135 020a FFF7FEFF 		bl	printNotif
 927:modem.c       ****     
 928:modem.c       ****     return gps;
 3136              		.loc 1 928 0
 3137 020e 7B68     		ldr	r3, [r7, #4]
 3138 0210 1C46     		mov	r4, r3
 3139 0212 07F11403 		add	r3, r7, #20
 3140 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3141 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3142              	.L157:
 929:modem.c       ****     
 930:modem.c       **** }
 3143              		.loc 1 930 0
 3144 021c 7868     		ldr	r0, [r7, #4]
 3145 021e 3837     		adds	r7, r7, #56
 3146              		.cfi_def_cfa_offset 16
 3147 0220 BD46     		mov	sp, r7
 3148              		.cfi_def_cfa_register 13
 3149              		@ sp needed
 3150 0222 B0BD     		pop	{r4, r5, r7, pc}
 3151              	.L168:
 3152              		.align	2
 3153              	.L167:
 3154 0224 00000000 		.word	modem_state
 3155 0228 00000000 		.word	.LC0
 3156 022c 88070000 		.word	.LC78
 3157 0230 9C070000 		.word	.LC79
 3158 0234 AC070000 		.word	.LC80
 3159 0238 B8070000 		.word	.LC81
 3160 023c C8070000 		.word	.LC82
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 78


 3161 0240 EC070000 		.word	.LC83
 3162 0244 FC070000 		.word	.LC84
 3163 0248 D8020000 		.word	.LC27
 3164 024c 0C080000 		.word	.LC85
 3165 0250 24080000 		.word	.LC86
 3166 0254 28080000 		.word	.LC87
 3167 0258 34080000 		.word	.LC88
 3168 025c 00000000 		.word	uart_received_string
 3169 0260 40080000 		.word	.LC89
 3170 0264 0000C842 		.word	1120403456
 3171 0268 00005940 		.word	1079574528
 3172 026c 00004E40 		.word	1078853632
 3173 0270 60080000 		.word	.LC90
 3174 0274 74080000 		.word	.LC91
 3175 0278 80080000 		.word	.LC92
 3176              		.cfi_endproc
 3177              	.LFE87:
 3178              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3179              		.text
 3180              	.Letext0:
 3181              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3182              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3183              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3184              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3185              		.file 6 "testing.h"
 3186              		.file 7 "data.h"
 3187              		.file 8 "modem.h"
 3188              		.file 9 "notoriOS.h"
 3189              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3190              		.file 11 "level_sensor.h"
 3191              		.file 12 "App_LED.h"
 3192              		.section	.debug_info,"",%progbits
 3193              	.Ldebug_info0:
 3194 0000 DC0C0000 		.4byte	0xcdc
 3195 0004 0400     		.2byte	0x4
 3196 0006 00000000 		.4byte	.Ldebug_abbrev0
 3197 000a 04       		.byte	0x4
 3198 000b 01       		.uleb128 0x1
 3199 000c 9C000000 		.4byte	.LASF175
 3200 0010 0C       		.byte	0xc
 3201 0011 51040000 		.4byte	.LASF176
 3202 0015 28000000 		.4byte	.LASF177
 3203 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3204 001d 00000000 		.4byte	0
 3205 0021 00000000 		.4byte	.Ldebug_line0
 3206 0025 02       		.uleb128 0x2
 3207 0026 01       		.byte	0x1
 3208 0027 06       		.byte	0x6
 3209 0028 B1010000 		.4byte	.LASF0
 3210 002c 03       		.uleb128 0x3
 3211 002d 70000000 		.4byte	.LASF4
 3212 0031 02       		.byte	0x2
 3213 0032 1D       		.byte	0x1d
 3214 0033 37000000 		.4byte	0x37
 3215 0037 02       		.uleb128 0x2
 3216 0038 01       		.byte	0x1
 3217 0039 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 79


 3218 003a 3A060000 		.4byte	.LASF1
 3219 003e 02       		.uleb128 0x2
 3220 003f 02       		.byte	0x2
 3221 0040 05       		.byte	0x5
 3222 0041 89040000 		.4byte	.LASF2
 3223 0045 02       		.uleb128 0x2
 3224 0046 02       		.byte	0x2
 3225 0047 07       		.byte	0x7
 3226 0048 DC020000 		.4byte	.LASF3
 3227 004c 03       		.uleb128 0x3
 3228 004d 9E040000 		.4byte	.LASF5
 3229 0051 02       		.byte	0x2
 3230 0052 3F       		.byte	0x3f
 3231 0053 57000000 		.4byte	0x57
 3232 0057 02       		.uleb128 0x2
 3233 0058 04       		.byte	0x4
 3234 0059 05       		.byte	0x5
 3235 005a 38020000 		.4byte	.LASF6
 3236 005e 03       		.uleb128 0x3
 3237 005f FF020000 		.4byte	.LASF7
 3238 0063 02       		.byte	0x2
 3239 0064 41       		.byte	0x41
 3240 0065 69000000 		.4byte	0x69
 3241 0069 02       		.uleb128 0x2
 3242 006a 04       		.byte	0x4
 3243 006b 07       		.byte	0x7
 3244 006c B4030000 		.4byte	.LASF8
 3245 0070 02       		.uleb128 0x2
 3246 0071 08       		.byte	0x8
 3247 0072 05       		.byte	0x5
 3248 0073 A3010000 		.4byte	.LASF9
 3249 0077 02       		.uleb128 0x2
 3250 0078 08       		.byte	0x8
 3251 0079 07       		.byte	0x7
 3252 007a 37010000 		.4byte	.LASF10
 3253 007e 04       		.uleb128 0x4
 3254 007f 04       		.byte	0x4
 3255 0080 05       		.byte	0x5
 3256 0081 696E7400 		.ascii	"int\000"
 3257 0085 02       		.uleb128 0x2
 3258 0086 04       		.byte	0x4
 3259 0087 07       		.byte	0x7
 3260 0088 56070000 		.4byte	.LASF11
 3261 008c 03       		.uleb128 0x3
 3262 008d CF080000 		.4byte	.LASF12
 3263 0091 03       		.byte	0x3
 3264 0092 18       		.byte	0x18
 3265 0093 2C000000 		.4byte	0x2c
 3266 0097 03       		.uleb128 0x3
 3267 0098 32060000 		.4byte	.LASF13
 3268 009c 03       		.byte	0x3
 3269 009d 2C       		.byte	0x2c
 3270 009e 4C000000 		.4byte	0x4c
 3271 00a2 03       		.uleb128 0x3
 3272 00a3 3D080000 		.4byte	.LASF14
 3273 00a7 03       		.byte	0x3
 3274 00a8 30       		.byte	0x30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 80


 3275 00a9 5E000000 		.4byte	0x5e
 3276 00ad 05       		.uleb128 0x5
 3277 00ae 76020000 		.4byte	.LASF15
 3278 00b2 04       		.byte	0x4
 3279 00b3 9201     		.2byte	0x192
 3280 00b5 37000000 		.4byte	0x37
 3281 00b9 05       		.uleb128 0x5
 3282 00ba 0B000000 		.4byte	.LASF16
 3283 00be 04       		.byte	0x4
 3284 00bf 9301     		.2byte	0x193
 3285 00c1 45000000 		.4byte	0x45
 3286 00c5 05       		.uleb128 0x5
 3287 00c6 EF020000 		.4byte	.LASF17
 3288 00ca 04       		.byte	0x4
 3289 00cb 9401     		.2byte	0x194
 3290 00cd 69000000 		.4byte	0x69
 3291 00d1 05       		.uleb128 0x5
 3292 00d2 D7080000 		.4byte	.LASF18
 3293 00d6 04       		.byte	0x4
 3294 00d7 9601     		.2byte	0x196
 3295 00d9 3E000000 		.4byte	0x3e
 3296 00dd 05       		.uleb128 0x5
 3297 00de 9B020000 		.4byte	.LASF19
 3298 00e2 04       		.byte	0x4
 3299 00e3 9701     		.2byte	0x197
 3300 00e5 57000000 		.4byte	0x57
 3301 00e9 02       		.uleb128 0x2
 3302 00ea 04       		.byte	0x4
 3303 00eb 04       		.byte	0x4
 3304 00ec DC050000 		.4byte	.LASF20
 3305 00f0 02       		.uleb128 0x2
 3306 00f1 08       		.byte	0x8
 3307 00f2 04       		.byte	0x4
 3308 00f3 41090000 		.4byte	.LASF21
 3309 00f7 02       		.uleb128 0x2
 3310 00f8 01       		.byte	0x1
 3311 00f9 08       		.byte	0x8
 3312 00fa 3D070000 		.4byte	.LASF22
 3313 00fe 02       		.uleb128 0x2
 3314 00ff 08       		.byte	0x8
 3315 0100 04       		.byte	0x4
 3316 0101 31070000 		.4byte	.LASF23
 3317 0105 02       		.uleb128 0x2
 3318 0106 04       		.byte	0x4
 3319 0107 07       		.byte	0x7
 3320 0108 2C050000 		.4byte	.LASF24
 3321 010c 06       		.uleb128 0x6
 3322 010d 04       		.byte	0x4
 3323 010e F7000000 		.4byte	0xf7
 3324 0112 06       		.uleb128 0x6
 3325 0113 04       		.byte	0x4
 3326 0114 18010000 		.4byte	0x118
 3327 0118 07       		.uleb128 0x7
 3328 0119 F7000000 		.4byte	0xf7
 3329 011d 08       		.uleb128 0x8
 3330 011e F7000000 		.4byte	0xf7
 3331 0122 2D010000 		.4byte	0x12d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 81


 3332 0126 09       		.uleb128 0x9
 3333 0127 05010000 		.4byte	0x105
 3334 012b 17       		.byte	0x17
 3335 012c 00       		.byte	0
 3336 012d 0A       		.uleb128 0xa
 3337 012e 746D00   		.ascii	"tm\000"
 3338 0131 24       		.byte	0x24
 3339 0132 05       		.byte	0x5
 3340 0133 21       		.byte	0x21
 3341 0134 A5010000 		.4byte	0x1a5
 3342 0138 0B       		.uleb128 0xb
 3343 0139 46080000 		.4byte	.LASF25
 3344 013d 05       		.byte	0x5
 3345 013e 23       		.byte	0x23
 3346 013f 7E000000 		.4byte	0x7e
 3347 0143 00       		.byte	0
 3348 0144 0B       		.uleb128 0xb
 3349 0145 25050000 		.4byte	.LASF26
 3350 0149 05       		.byte	0x5
 3351 014a 24       		.byte	0x24
 3352 014b 7E000000 		.4byte	0x7e
 3353 014f 04       		.byte	0x4
 3354 0150 0B       		.uleb128 0xb
 3355 0151 18000000 		.4byte	.LASF27
 3356 0155 05       		.byte	0x5
 3357 0156 25       		.byte	0x25
 3358 0157 7E000000 		.4byte	0x7e
 3359 015b 08       		.byte	0x8
 3360 015c 0B       		.uleb128 0xb
 3361 015d 12080000 		.4byte	.LASF28
 3362 0161 05       		.byte	0x5
 3363 0162 26       		.byte	0x26
 3364 0163 7E000000 		.4byte	0x7e
 3365 0167 0C       		.byte	0xc
 3366 0168 0B       		.uleb128 0xb
 3367 0169 21030000 		.4byte	.LASF29
 3368 016d 05       		.byte	0x5
 3369 016e 27       		.byte	0x27
 3370 016f 7E000000 		.4byte	0x7e
 3371 0173 10       		.byte	0x10
 3372 0174 0B       		.uleb128 0xb
 3373 0175 7C030000 		.4byte	.LASF30
 3374 0179 05       		.byte	0x5
 3375 017a 28       		.byte	0x28
 3376 017b 7E000000 		.4byte	0x7e
 3377 017f 14       		.byte	0x14
 3378 0180 0B       		.uleb128 0xb
 3379 0181 ED060000 		.4byte	.LASF31
 3380 0185 05       		.byte	0x5
 3381 0186 29       		.byte	0x29
 3382 0187 7E000000 		.4byte	0x7e
 3383 018b 18       		.byte	0x18
 3384 018c 0B       		.uleb128 0xb
 3385 018d 20000000 		.4byte	.LASF32
 3386 0191 05       		.byte	0x5
 3387 0192 2A       		.byte	0x2a
 3388 0193 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 82


 3389 0197 1C       		.byte	0x1c
 3390 0198 0B       		.uleb128 0xb
 3391 0199 18040000 		.4byte	.LASF33
 3392 019d 05       		.byte	0x5
 3393 019e 2B       		.byte	0x2b
 3394 019f 7E000000 		.4byte	0x7e
 3395 01a3 20       		.byte	0x20
 3396 01a4 00       		.byte	0
 3397 01a5 0C       		.uleb128 0xc
 3398 01a6 8101     		.2byte	0x181
 3399 01a8 06       		.byte	0x6
 3400 01a9 0A       		.byte	0xa
 3401 01aa D3010000 		.4byte	0x1d3
 3402 01ae 0B       		.uleb128 0xb
 3403 01af 76050000 		.4byte	.LASF34
 3404 01b3 06       		.byte	0x6
 3405 01b4 0C       		.byte	0xc
 3406 01b5 D3010000 		.4byte	0x1d3
 3407 01b9 00       		.byte	0
 3408 01ba 0B       		.uleb128 0xb
 3409 01bb 7E080000 		.4byte	.LASF35
 3410 01bf 06       		.byte	0x6
 3411 01c0 0D       		.byte	0xd
 3412 01c1 AD000000 		.4byte	0xad
 3413 01c5 80       		.byte	0x80
 3414 01c6 0B       		.uleb128 0xb
 3415 01c7 B0060000 		.4byte	.LASF36
 3416 01cb 06       		.byte	0x6
 3417 01cc 0F       		.byte	0xf
 3418 01cd E3010000 		.4byte	0x1e3
 3419 01d1 81       		.byte	0x81
 3420 01d2 00       		.byte	0
 3421 01d3 08       		.uleb128 0x8
 3422 01d4 F7000000 		.4byte	0xf7
 3423 01d8 E3010000 		.4byte	0x1e3
 3424 01dc 09       		.uleb128 0x9
 3425 01dd 05010000 		.4byte	0x105
 3426 01e1 7F       		.byte	0x7f
 3427 01e2 00       		.byte	0
 3428 01e3 08       		.uleb128 0x8
 3429 01e4 F7000000 		.4byte	0xf7
 3430 01e8 F3010000 		.4byte	0x1f3
 3431 01ec 09       		.uleb128 0x9
 3432 01ed 05010000 		.4byte	0x105
 3433 01f1 FF       		.byte	0xff
 3434 01f2 00       		.byte	0
 3435 01f3 03       		.uleb128 0x3
 3436 01f4 98060000 		.4byte	.LASF37
 3437 01f8 06       		.byte	0x6
 3438 01f9 10       		.byte	0x10
 3439 01fa A5010000 		.4byte	0x1a5
 3440 01fe 0D       		.uleb128 0xd
 3441 01ff 2C       		.byte	0x2c
 3442 0200 07       		.byte	0x7
 3443 0201 14       		.byte	0x14
 3444 0202 2B020000 		.4byte	0x22b
 3445 0206 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 83


 3446 0207 6B657900 		.ascii	"key\000"
 3447 020b 07       		.byte	0x7
 3448 020c 15       		.byte	0x15
 3449 020d 2B020000 		.4byte	0x22b
 3450 0211 00       		.byte	0
 3451 0212 0B       		.uleb128 0xb
 3452 0213 12000000 		.4byte	.LASF38
 3453 0217 07       		.byte	0x7
 3454 0218 16       		.byte	0x16
 3455 0219 2B020000 		.4byte	0x22b
 3456 021d 14       		.byte	0x14
 3457 021e 0B       		.uleb128 0xb
 3458 021f F4030000 		.4byte	.LASF39
 3459 0223 07       		.byte	0x7
 3460 0224 17       		.byte	0x17
 3461 0225 DD000000 		.4byte	0xdd
 3462 0229 28       		.byte	0x28
 3463 022a 00       		.byte	0
 3464 022b 08       		.uleb128 0x8
 3465 022c F7000000 		.4byte	0xf7
 3466 0230 3B020000 		.4byte	0x23b
 3467 0234 09       		.uleb128 0x9
 3468 0235 05010000 		.4byte	0x105
 3469 0239 13       		.byte	0x13
 3470 023a 00       		.byte	0
 3471 023b 03       		.uleb128 0x3
 3472 023c 9E030000 		.4byte	.LASF40
 3473 0240 07       		.byte	0x7
 3474 0241 19       		.byte	0x19
 3475 0242 FE010000 		.4byte	0x1fe
 3476 0246 0D       		.uleb128 0xd
 3477 0247 3C       		.byte	0x3c
 3478 0248 08       		.byte	0x8
 3479 0249 36       		.byte	0x36
 3480 024a 73020000 		.4byte	0x273
 3481 024e 0B       		.uleb128 0xb
 3482 024f 0B080000 		.4byte	.LASF41
 3483 0253 08       		.byte	0x8
 3484 0254 37       		.byte	0x37
 3485 0255 2B020000 		.4byte	0x22b
 3486 0259 00       		.byte	0
 3487 025a 0B       		.uleb128 0xb
 3488 025b 68070000 		.4byte	.LASF42
 3489 025f 08       		.byte	0x8
 3490 0260 38       		.byte	0x38
 3491 0261 2B020000 		.4byte	0x22b
 3492 0265 14       		.byte	0x14
 3493 0266 0B       		.uleb128 0xb
 3494 0267 AB060000 		.4byte	.LASF43
 3495 026b 08       		.byte	0x8
 3496 026c 39       		.byte	0x39
 3497 026d 2B020000 		.4byte	0x22b
 3498 0271 28       		.byte	0x28
 3499 0272 00       		.byte	0
 3500 0273 03       		.uleb128 0x3
 3501 0274 7C070000 		.4byte	.LASF44
 3502 0278 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 84


 3503 0279 3B       		.byte	0x3b
 3504 027a 46020000 		.4byte	0x246
 3505 027e 0D       		.uleb128 0xd
 3506 027f 20       		.byte	0x20
 3507 0280 08       		.byte	0x8
 3508 0281 3D       		.byte	0x3d
 3509 0282 E7020000 		.4byte	0x2e7
 3510 0286 0B       		.uleb128 0xb
 3511 0287 41020000 		.4byte	.LASF45
 3512 028b 08       		.byte	0x8
 3513 028c 3E       		.byte	0x3e
 3514 028d 7E000000 		.4byte	0x7e
 3515 0291 00       		.byte	0
 3516 0292 0E       		.uleb128 0xe
 3517 0293 62657200 		.ascii	"ber\000"
 3518 0297 08       		.byte	0x8
 3519 0298 3F       		.byte	0x3f
 3520 0299 7E000000 		.4byte	0x7e
 3521 029d 04       		.byte	0x4
 3522 029e 0B       		.uleb128 0xb
 3523 029f 79060000 		.4byte	.LASF46
 3524 02a3 08       		.byte	0x8
 3525 02a4 40       		.byte	0x40
 3526 02a5 7E000000 		.4byte	0x7e
 3527 02a9 08       		.byte	0x8
 3528 02aa 0B       		.uleb128 0xb
 3529 02ab BD010000 		.4byte	.LASF47
 3530 02af 08       		.byte	0x8
 3531 02b0 41       		.byte	0x41
 3532 02b1 7E000000 		.4byte	0x7e
 3533 02b5 0C       		.byte	0xc
 3534 02b6 0B       		.uleb128 0xb
 3535 02b7 5E060000 		.4byte	.LASF48
 3536 02bb 08       		.byte	0x8
 3537 02bc 42       		.byte	0x42
 3538 02bd 7E000000 		.4byte	0x7e
 3539 02c1 10       		.byte	0x10
 3540 02c2 0B       		.uleb128 0xb
 3541 02c3 B7060000 		.4byte	.LASF49
 3542 02c7 08       		.byte	0x8
 3543 02c8 43       		.byte	0x43
 3544 02c9 7E000000 		.4byte	0x7e
 3545 02cd 14       		.byte	0x14
 3546 02ce 0B       		.uleb128 0xb
 3547 02cf DF010000 		.4byte	.LASF50
 3548 02d3 08       		.byte	0x8
 3549 02d4 44       		.byte	0x44
 3550 02d5 7E000000 		.4byte	0x7e
 3551 02d9 18       		.byte	0x18
 3552 02da 0B       		.uleb128 0xb
 3553 02db 6C040000 		.4byte	.LASF51
 3554 02df 08       		.byte	0x8
 3555 02e0 45       		.byte	0x45
 3556 02e1 7E000000 		.4byte	0x7e
 3557 02e5 1C       		.byte	0x1c
 3558 02e6 00       		.byte	0
 3559 02e7 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 85


 3560 02e8 BC060000 		.4byte	.LASF52
 3561 02ec 08       		.byte	0x8
 3562 02ed 47       		.byte	0x47
 3563 02ee 7E020000 		.4byte	0x27e
 3564 02f2 0D       		.uleb128 0xd
 3565 02f3 10       		.byte	0x10
 3566 02f4 08       		.byte	0x8
 3567 02f5 49       		.byte	0x49
 3568 02f6 37030000 		.4byte	0x337
 3569 02fa 0B       		.uleb128 0xb
 3570 02fb 6D050000 		.4byte	.LASF53
 3571 02ff 08       		.byte	0x8
 3572 0300 4A       		.byte	0x4a
 3573 0301 E9000000 		.4byte	0xe9
 3574 0305 00       		.byte	0
 3575 0306 0B       		.uleb128 0xb
 3576 0307 92000000 		.4byte	.LASF54
 3577 030b 08       		.byte	0x8
 3578 030c 4B       		.byte	0x4b
 3579 030d E9000000 		.4byte	0xe9
 3580 0311 04       		.byte	0x4
 3581 0312 0B       		.uleb128 0xb
 3582 0313 6D020000 		.4byte	.LASF55
 3583 0317 08       		.byte	0x8
 3584 0318 4C       		.byte	0x4c
 3585 0319 E9000000 		.4byte	0xe9
 3586 031d 08       		.byte	0x8
 3587 031e 0B       		.uleb128 0xb
 3588 031f FE030000 		.4byte	.LASF56
 3589 0323 08       		.byte	0x8
 3590 0324 4D       		.byte	0x4d
 3591 0325 B9000000 		.4byte	0xb9
 3592 0329 0C       		.byte	0xc
 3593 032a 0B       		.uleb128 0xb
 3594 032b 1A080000 		.4byte	.LASF57
 3595 032f 08       		.byte	0x8
 3596 0330 4E       		.byte	0x4e
 3597 0331 AD000000 		.4byte	0xad
 3598 0335 0E       		.byte	0xe
 3599 0336 00       		.byte	0
 3600 0337 03       		.uleb128 0x3
 3601 0338 89070000 		.4byte	.LASF58
 3602 033c 08       		.byte	0x8
 3603 033d 50       		.byte	0x50
 3604 033e F2020000 		.4byte	0x2f2
 3605 0342 0D       		.uleb128 0xd
 3606 0343 07       		.byte	0x7
 3607 0344 08       		.byte	0x8
 3608 0345 53       		.byte	0x53
 3609 0346 9F030000 		.4byte	0x39f
 3610 034a 0B       		.uleb128 0xb
 3611 034b A1020000 		.4byte	.LASF59
 3612 034f 08       		.byte	0x8
 3613 0350 55       		.byte	0x55
 3614 0351 AD000000 		.4byte	0xad
 3615 0355 00       		.byte	0
 3616 0356 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 86


 3617 0357 10060000 		.4byte	.LASF60
 3618 035b 08       		.byte	0x8
 3619 035c 57       		.byte	0x57
 3620 035d 9F030000 		.4byte	0x39f
 3621 0361 01       		.byte	0x1
 3622 0362 0B       		.uleb128 0xb
 3623 0363 A1070000 		.4byte	.LASF61
 3624 0367 08       		.byte	0x8
 3625 0368 59       		.byte	0x59
 3626 0369 AD000000 		.4byte	0xad
 3627 036d 02       		.byte	0x2
 3628 036e 0B       		.uleb128 0xb
 3629 036f 63060000 		.4byte	.LASF62
 3630 0373 08       		.byte	0x8
 3631 0374 5B       		.byte	0x5b
 3632 0375 AD000000 		.4byte	0xad
 3633 0379 03       		.byte	0x3
 3634 037a 0B       		.uleb128 0xb
 3635 037b 37030000 		.4byte	.LASF63
 3636 037f 08       		.byte	0x8
 3637 0380 5E       		.byte	0x5e
 3638 0381 AD000000 		.4byte	0xad
 3639 0385 04       		.byte	0x4
 3640 0386 0B       		.uleb128 0xb
 3641 0387 B3080000 		.4byte	.LASF64
 3642 038b 08       		.byte	0x8
 3643 038c 63       		.byte	0x63
 3644 038d AD000000 		.4byte	0xad
 3645 0391 05       		.byte	0x5
 3646 0392 0B       		.uleb128 0xb
 3647 0393 0C070000 		.4byte	.LASF65
 3648 0397 08       		.byte	0x8
 3649 0398 65       		.byte	0x65
 3650 0399 AD000000 		.4byte	0xad
 3651 039d 06       		.byte	0x6
 3652 039e 00       		.byte	0
 3653 039f 02       		.uleb128 0x2
 3654 03a0 01       		.byte	0x1
 3655 03a1 02       		.byte	0x2
 3656 03a2 2C060000 		.4byte	.LASF66
 3657 03a6 03       		.uleb128 0x3
 3658 03a7 F0040000 		.4byte	.LASF67
 3659 03ab 08       		.byte	0x8
 3660 03ac 67       		.byte	0x67
 3661 03ad 42030000 		.4byte	0x342
 3662 03b1 0D       		.uleb128 0xd
 3663 03b2 06       		.byte	0x6
 3664 03b3 09       		.byte	0x9
 3665 03b4 2E       		.byte	0x2e
 3666 03b5 EA030000 		.4byte	0x3ea
 3667 03b9 0B       		.uleb128 0xb
 3668 03ba C2010000 		.4byte	.LASF68
 3669 03be 09       		.byte	0x9
 3670 03bf 30       		.byte	0x30
 3671 03c0 B9000000 		.4byte	0xb9
 3672 03c4 00       		.byte	0
 3673 03c5 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 87


 3674 03c6 47020000 		.4byte	.LASF69
 3675 03ca 09       		.byte	0x9
 3676 03cb 31       		.byte	0x31
 3677 03cc D1000000 		.4byte	0xd1
 3678 03d0 02       		.byte	0x2
 3679 03d1 0B       		.uleb128 0xb
 3680 03d2 EF080000 		.4byte	.LASF70
 3681 03d6 09       		.byte	0x9
 3682 03d7 32       		.byte	0x32
 3683 03d8 AD000000 		.4byte	0xad
 3684 03dc 04       		.byte	0x4
 3685 03dd 0B       		.uleb128 0xb
 3686 03de 7A000000 		.4byte	.LASF71
 3687 03e2 09       		.byte	0x9
 3688 03e3 33       		.byte	0x33
 3689 03e4 AD000000 		.4byte	0xad
 3690 03e8 05       		.byte	0x5
 3691 03e9 00       		.byte	0
 3692 03ea 03       		.uleb128 0x3
 3693 03eb 26060000 		.4byte	.LASF72
 3694 03ef 09       		.byte	0x9
 3695 03f0 36       		.byte	0x36
 3696 03f1 F5030000 		.4byte	0x3f5
 3697 03f5 0F       		.uleb128 0xf
 3698 03f6 B1030000 		.4byte	0x3b1
 3699 03fa 0D       		.uleb128 0xd
 3700 03fb 1C       		.byte	0x1c
 3701 03fc 09       		.byte	0x9
 3702 03fd 39       		.byte	0x39
 3703 03fe 1B040000 		.4byte	0x41b
 3704 0402 0B       		.uleb128 0xb
 3705 0403 21040000 		.4byte	.LASF73
 3706 0407 09       		.byte	0x9
 3707 0408 3B       		.byte	0x3b
 3708 0409 1B040000 		.4byte	0x41b
 3709 040d 00       		.byte	0
 3710 040e 0B       		.uleb128 0xb
 3711 040f 34040000 		.4byte	.LASF74
 3712 0413 09       		.byte	0x9
 3713 0414 3C       		.byte	0x3c
 3714 0415 1D010000 		.4byte	0x11d
 3715 0419 04       		.byte	0x4
 3716 041a 00       		.byte	0
 3717 041b 06       		.uleb128 0x6
 3718 041c 04       		.byte	0x4
 3719 041d 73020000 		.4byte	0x273
 3720 0421 03       		.uleb128 0x3
 3721 0422 E5040000 		.4byte	.LASF75
 3722 0426 09       		.byte	0x9
 3723 0427 3E       		.byte	0x3e
 3724 0428 FA030000 		.4byte	0x3fa
 3725 042c 0D       		.uleb128 0xd
 3726 042d 68       		.byte	0x68
 3727 042e 09       		.byte	0x9
 3728 042f 44       		.byte	0x44
 3729 0430 4D040000 		.4byte	0x44d
 3730 0434 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 88


 3731 0435 2C040000 		.4byte	.LASF76
 3732 0439 09       		.byte	0x9
 3733 043a 49       		.byte	0x49
 3734 043b 4D040000 		.4byte	0x44d
 3735 043f 00       		.byte	0
 3736 0440 0B       		.uleb128 0xb
 3737 0441 10040000 		.4byte	.LASF77
 3738 0445 09       		.byte	0x9
 3739 0446 4A       		.byte	0x4a
 3740 0447 7E000000 		.4byte	0x7e
 3741 044b 64       		.byte	0x64
 3742 044c 00       		.byte	0
 3743 044d 08       		.uleb128 0x8
 3744 044e F7000000 		.4byte	0xf7
 3745 0452 5D040000 		.4byte	0x45d
 3746 0456 09       		.uleb128 0x9
 3747 0457 05010000 		.4byte	0x105
 3748 045b 63       		.byte	0x63
 3749 045c 00       		.byte	0
 3750 045d 03       		.uleb128 0x3
 3751 045e C0080000 		.4byte	.LASF78
 3752 0462 09       		.byte	0x9
 3753 0463 50       		.byte	0x50
 3754 0464 2C040000 		.4byte	0x42c
 3755 0468 10       		.uleb128 0x10
 3756 0469 19060000 		.4byte	.LASF110
 3757 046d 01       		.byte	0x1
 3758 046e 12       		.byte	0x12
 3759 046f 00000000 		.4byte	.LFB64
 3760 0473 44000000 		.4byte	.LFE64-.LFB64
 3761 0477 01       		.uleb128 0x1
 3762 0478 9C       		.byte	0x9c
 3763 0479 11       		.uleb128 0x11
 3764 047a E2050000 		.4byte	.LASF79
 3765 047e 01       		.byte	0x1
 3766 047f 1C       		.byte	0x1c
 3767 0480 00000000 		.4byte	.LFB65
 3768 0484 6C000000 		.4byte	.LFE65-.LFB65
 3769 0488 01       		.uleb128 0x1
 3770 0489 9C       		.byte	0x9c
 3771 048a 11       		.uleb128 0x11
 3772 048b E9070000 		.4byte	.LASF80
 3773 048f 01       		.byte	0x1
 3774 0490 36       		.byte	0x36
 3775 0491 00000000 		.4byte	.LFB66
 3776 0495 32000000 		.4byte	.LFE66-.LFB66
 3777 0499 01       		.uleb128 0x1
 3778 049a 9C       		.byte	0x9c
 3779 049b 11       		.uleb128 0x11
 3780 049c 20080000 		.4byte	.LASF81
 3781 04a0 01       		.byte	0x1
 3782 04a1 46       		.byte	0x46
 3783 04a2 00000000 		.4byte	.LFB67
 3784 04a6 20000000 		.4byte	.LFE67-.LFB67
 3785 04aa 01       		.uleb128 0x1
 3786 04ab 9C       		.byte	0x9c
 3787 04ac 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 89


 3788 04ad 30090000 		.4byte	.LASF82
 3789 04b1 01       		.byte	0x1
 3790 04b2 4F       		.byte	0x4f
 3791 04b3 00000000 		.4byte	.LFB68
 3792 04b7 40000000 		.4byte	.LFE68-.LFB68
 3793 04bb 01       		.uleb128 0x1
 3794 04bc 9C       		.byte	0x9c
 3795 04bd 12       		.uleb128 0x12
 3796 04be 42040000 		.4byte	.LASF96
 3797 04c2 01       		.byte	0x1
 3798 04c3 61       		.byte	0x61
 3799 04c4 AD000000 		.4byte	0xad
 3800 04c8 00000000 		.4byte	.LFB69
 3801 04cc DC000000 		.4byte	.LFE69-.LFB69
 3802 04d0 01       		.uleb128 0x1
 3803 04d1 9C       		.byte	0x9c
 3804 04d2 31050000 		.4byte	0x531
 3805 04d6 13       		.uleb128 0x13
 3806 04d7 DD080000 		.4byte	.LASF83
 3807 04db 01       		.byte	0x1
 3808 04dc 6A       		.byte	0x6a
 3809 04dd AD000000 		.4byte	0xad
 3810 04e1 02       		.uleb128 0x2
 3811 04e2 91       		.byte	0x91
 3812 04e3 77       		.sleb128 -9
 3813 04e4 13       		.uleb128 0x13
 3814 04e5 E6080000 		.4byte	.LASF84
 3815 04e9 01       		.byte	0x1
 3816 04ea 6B       		.byte	0x6b
 3817 04eb AD000000 		.4byte	0xad
 3818 04ef 02       		.uleb128 0x2
 3819 04f0 91       		.byte	0x91
 3820 04f1 74       		.sleb128 -12
 3821 04f2 13       		.uleb128 0x13
 3822 04f3 FD080000 		.4byte	.LASF85
 3823 04f7 01       		.byte	0x1
 3824 04f8 6D       		.byte	0x6d
 3825 04f9 57000000 		.4byte	0x57
 3826 04fd 02       		.uleb128 0x2
 3827 04fe 91       		.byte	0x91
 3828 04ff 70       		.sleb128 -16
 3829 0500 14       		.uleb128 0x14
 3830 0501 26000000 		.4byte	.LBB2
 3831 0505 4A000000 		.4byte	.LBE2-.LBB2
 3832 0509 13       		.uleb128 0x13
 3833 050a E6080000 		.4byte	.LASF84
 3834 050e 01       		.byte	0x1
 3835 050f 70       		.byte	0x70
 3836 0510 AD000000 		.4byte	0xad
 3837 0514 02       		.uleb128 0x2
 3838 0515 91       		.byte	0x91
 3839 0516 76       		.sleb128 -10
 3840 0517 14       		.uleb128 0x14
 3841 0518 2C000000 		.4byte	.LBB3
 3842 051c 2A000000 		.4byte	.LBE3-.LBB3
 3843 0520 13       		.uleb128 0x13
 3844 0521 AA030000 		.4byte	.LASF86
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 90


 3845 0525 01       		.byte	0x1
 3846 0526 72       		.byte	0x72
 3847 0527 AD000000 		.4byte	0xad
 3848 052b 02       		.uleb128 0x2
 3849 052c 91       		.byte	0x91
 3850 052d 75       		.sleb128 -11
 3851 052e 00       		.byte	0
 3852 052f 00       		.byte	0
 3853 0530 00       		.byte	0
 3854 0531 11       		.uleb128 0x11
 3855 0532 F5060000 		.4byte	.LASF87
 3856 0536 01       		.byte	0x1
 3857 0537 93       		.byte	0x93
 3858 0538 00000000 		.4byte	.LFB70
 3859 053c 1C000000 		.4byte	.LFE70-.LFB70
 3860 0540 01       		.uleb128 0x1
 3861 0541 9C       		.byte	0x9c
 3862 0542 11       		.uleb128 0x11
 3863 0543 CA060000 		.4byte	.LASF88
 3864 0547 01       		.byte	0x1
 3865 0548 9B       		.byte	0x9b
 3866 0549 00000000 		.4byte	.LFB71
 3867 054d 28000000 		.4byte	.LFE71-.LFB71
 3868 0551 01       		.uleb128 0x1
 3869 0552 9C       		.byte	0x9c
 3870 0553 15       		.uleb128 0x15
 3871 0554 D4040000 		.4byte	.LASF100
 3872 0558 01       		.byte	0x1
 3873 0559 A6       		.byte	0xa6
 3874 055a 8C000000 		.4byte	0x8c
 3875 055e 00000000 		.4byte	.LFB72
 3876 0562 C8000000 		.4byte	.LFE72-.LFB72
 3877 0566 01       		.uleb128 0x1
 3878 0567 9C       		.byte	0x9c
 3879 0568 E5050000 		.4byte	0x5e5
 3880 056c 16       		.uleb128 0x16
 3881 056d C2050000 		.4byte	.LASF89
 3882 0571 01       		.byte	0x1
 3883 0572 A6       		.byte	0xa6
 3884 0573 0C010000 		.4byte	0x10c
 3885 0577 02       		.uleb128 0x2
 3886 0578 91       		.byte	0x91
 3887 0579 5C       		.sleb128 -36
 3888 057a 16       		.uleb128 0x16
 3889 057b 07090000 		.4byte	.LASF90
 3890 057f 01       		.byte	0x1
 3891 0580 A6       		.byte	0xa6
 3892 0581 0C010000 		.4byte	0x10c
 3893 0585 02       		.uleb128 0x2
 3894 0586 91       		.byte	0x91
 3895 0587 58       		.sleb128 -40
 3896 0588 16       		.uleb128 0x16
 3897 0589 D5030000 		.4byte	.LASF91
 3898 058d 01       		.byte	0x1
 3899 058e A6       		.byte	0xa6
 3900 058f A2000000 		.4byte	0xa2
 3901 0593 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 91


 3902 0594 91       		.byte	0x91
 3903 0595 54       		.sleb128 -44
 3904 0596 13       		.uleb128 0x13
 3905 0597 C9040000 		.4byte	.LASF92
 3906 059b 01       		.byte	0x1
 3907 059c A8       		.byte	0xa8
 3908 059d C5000000 		.4byte	0xc5
 3909 05a1 02       		.uleb128 0x2
 3910 05a2 91       		.byte	0x91
 3911 05a3 74       		.sleb128 -12
 3912 05a4 14       		.uleb128 0x14
 3913 05a5 16000000 		.4byte	.LBB4
 3914 05a9 88000000 		.4byte	.LBE4-.LBB4
 3915 05ad 13       		.uleb128 0x13
 3916 05ae CB050000 		.4byte	.LASF93
 3917 05b2 01       		.byte	0x1
 3918 05b3 AC       		.byte	0xac
 3919 05b4 0C010000 		.4byte	0x10c
 3920 05b8 02       		.uleb128 0x2
 3921 05b9 91       		.byte	0x91
 3922 05ba 64       		.sleb128 -28
 3923 05bb 13       		.uleb128 0x13
 3924 05bc 58060000 		.4byte	.LASF94
 3925 05c0 01       		.byte	0x1
 3926 05c1 AD       		.byte	0xad
 3927 05c2 A2000000 		.4byte	0xa2
 3928 05c6 02       		.uleb128 0x2
 3929 05c7 91       		.byte	0x91
 3930 05c8 6C       		.sleb128 -20
 3931 05c9 17       		.uleb128 0x17
 3932 05ca 6900     		.ascii	"i\000"
 3933 05cc 01       		.byte	0x1
 3934 05cd AE       		.byte	0xae
 3935 05ce A2000000 		.4byte	0xa2
 3936 05d2 02       		.uleb128 0x2
 3937 05d3 91       		.byte	0x91
 3938 05d4 70       		.sleb128 -16
 3939 05d5 13       		.uleb128 0x13
 3940 05d6 F6020000 		.4byte	.LASF95
 3941 05da 01       		.byte	0x1
 3942 05db AE       		.byte	0xae
 3943 05dc A2000000 		.4byte	0xa2
 3944 05e0 02       		.uleb128 0x2
 3945 05e1 91       		.byte	0x91
 3946 05e2 68       		.sleb128 -24
 3947 05e3 00       		.byte	0
 3948 05e4 00       		.byte	0
 3949 05e5 12       		.uleb128 0x12
 3950 05e6 97050000 		.4byte	.LASF97
 3951 05ea 01       		.byte	0x1
 3952 05eb DA       		.byte	0xda
 3953 05ec F3010000 		.4byte	0x1f3
 3954 05f0 00000000 		.4byte	.LFB73
 3955 05f4 00010000 		.4byte	.LFE73-.LFB73
 3956 05f8 01       		.uleb128 0x1
 3957 05f9 9C       		.byte	0x9c
 3958 05fa 3C060000 		.4byte	0x63c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 92


 3959 05fe 13       		.uleb128 0x13
 3960 05ff 66010000 		.4byte	.LASF98
 3961 0603 01       		.byte	0x1
 3962 0604 DC       		.byte	0xdc
 3963 0605 F3010000 		.4byte	0x1f3
 3964 0609 03       		.uleb128 0x3
 3965 060a 91       		.byte	0x91
 3966 060b E47C     		.sleb128 -412
 3967 060d 14       		.uleb128 0x14
 3968 060e 4A000000 		.4byte	.LBB5
 3969 0612 86000000 		.4byte	.LBE5-.LBB5
 3970 0616 17       		.uleb128 0x17
 3971 0617 6900     		.ascii	"i\000"
 3972 0619 01       		.byte	0x1
 3973 061a E3       		.byte	0xe3
 3974 061b 7E000000 		.4byte	0x7e
 3975 061f 02       		.uleb128 0x2
 3976 0620 91       		.byte	0x91
 3977 0621 6C       		.sleb128 -20
 3978 0622 14       		.uleb128 0x14
 3979 0623 70000000 		.4byte	.LBB6
 3980 0627 46000000 		.4byte	.LBE6-.LBB6
 3981 062b 13       		.uleb128 0x13
 3982 062c CF020000 		.4byte	.LASF99
 3983 0630 01       		.byte	0x1
 3984 0631 F0       		.byte	0xf0
 3985 0632 57000000 		.4byte	0x57
 3986 0636 02       		.uleb128 0x2
 3987 0637 91       		.byte	0x91
 3988 0638 68       		.sleb128 -24
 3989 0639 00       		.byte	0
 3990 063a 00       		.byte	0
 3991 063b 00       		.byte	0
 3992 063c 18       		.uleb128 0x18
 3993 063d C6030000 		.4byte	.LASF101
 3994 0641 01       		.byte	0x1
 3995 0642 0401     		.2byte	0x104
 3996 0644 AD000000 		.4byte	0xad
 3997 0648 00000000 		.4byte	.LFB74
 3998 064c 78000000 		.4byte	.LFE74-.LFB74
 3999 0650 01       		.uleb128 0x1
 4000 0651 9C       		.byte	0x9c
 4001 0652 AD060000 		.4byte	0x6ad
 4002 0656 19       		.uleb128 0x19
 4003 0657 B4040000 		.4byte	.LASF102
 4004 065b 01       		.byte	0x1
 4005 065c 0401     		.2byte	0x104
 4006 065e 0C010000 		.4byte	0x10c
 4007 0662 02       		.uleb128 0x2
 4008 0663 91       		.byte	0x91
 4009 0664 6C       		.sleb128 -20
 4010 0665 19       		.uleb128 0x19
 4011 0666 59040000 		.4byte	.LASF103
 4012 066a 01       		.byte	0x1
 4013 066b 0401     		.2byte	0x104
 4014 066d 12010000 		.4byte	0x112
 4015 0671 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 93


 4016 0672 91       		.byte	0x91
 4017 0673 68       		.sleb128 -24
 4018 0674 19       		.uleb128 0x19
 4019 0675 7F040000 		.4byte	.LASF104
 4020 0679 01       		.byte	0x1
 4021 067a 0401     		.2byte	0x104
 4022 067c 12010000 		.4byte	0x112
 4023 0680 02       		.uleb128 0x2
 4024 0681 91       		.byte	0x91
 4025 0682 64       		.sleb128 -28
 4026 0683 19       		.uleb128 0x19
 4027 0684 65040000 		.4byte	.LASF105
 4028 0688 01       		.byte	0x1
 4029 0689 0401     		.2byte	0x104
 4030 068b 0C010000 		.4byte	0x10c
 4031 068f 02       		.uleb128 0x2
 4032 0690 91       		.byte	0x91
 4033 0691 60       		.sleb128 -32
 4034 0692 1A       		.uleb128 0x1a
 4035 0693 6100     		.ascii	"a\000"
 4036 0695 01       		.byte	0x1
 4037 0696 0601     		.2byte	0x106
 4038 0698 0C010000 		.4byte	0x10c
 4039 069c 02       		.uleb128 0x2
 4040 069d 91       		.byte	0x91
 4041 069e 74       		.sleb128 -12
 4042 069f 1A       		.uleb128 0x1a
 4043 06a0 6200     		.ascii	"b\000"
 4044 06a2 01       		.byte	0x1
 4045 06a3 0601     		.2byte	0x106
 4046 06a5 0C010000 		.4byte	0x10c
 4047 06a9 02       		.uleb128 0x2
 4048 06aa 91       		.byte	0x91
 4049 06ab 70       		.sleb128 -16
 4050 06ac 00       		.byte	0
 4051 06ad 1B       		.uleb128 0x1b
 4052 06ae 42070000 		.4byte	.LASF106
 4053 06b2 01       		.byte	0x1
 4054 06b3 2301     		.2byte	0x123
 4055 06b5 AD000000 		.4byte	0xad
 4056 06b9 00000000 		.4byte	.LFB75
 4057 06bd 74010000 		.4byte	.LFE75-.LFB75
 4058 06c1 01       		.uleb128 0x1
 4059 06c2 9C       		.byte	0x9c
 4060 06c3 DF060000 		.4byte	0x6df
 4061 06c7 14       		.uleb128 0x14
 4062 06c8 2E000000 		.4byte	.LBB7
 4063 06cc 68000000 		.4byte	.LBE7-.LBB7
 4064 06d0 1A       		.uleb128 0x1a
 4065 06d1 6900     		.ascii	"i\000"
 4066 06d3 01       		.byte	0x1
 4067 06d4 3101     		.2byte	0x131
 4068 06d6 AD000000 		.4byte	0xad
 4069 06da 02       		.uleb128 0x2
 4070 06db 91       		.byte	0x91
 4071 06dc 77       		.sleb128 -9
 4072 06dd 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 94


 4073 06de 00       		.byte	0
 4074 06df 1B       		.uleb128 0x1b
 4075 06e0 3B050000 		.4byte	.LASF107
 4076 06e4 01       		.byte	0x1
 4077 06e5 7501     		.2byte	0x175
 4078 06e7 AD000000 		.4byte	0xad
 4079 06eb 00000000 		.4byte	.LFB76
 4080 06ef B8000000 		.4byte	.LFE76-.LFB76
 4081 06f3 01       		.uleb128 0x1
 4082 06f4 9C       		.byte	0x9c
 4083 06f5 22070000 		.4byte	0x722
 4084 06f9 1C       		.uleb128 0x1c
 4085 06fa 7E080000 		.4byte	.LASF35
 4086 06fe 01       		.byte	0x1
 4087 06ff 7901     		.2byte	0x179
 4088 0701 AD000000 		.4byte	0xad
 4089 0705 02       		.uleb128 0x2
 4090 0706 91       		.byte	0x91
 4091 0707 77       		.sleb128 -9
 4092 0708 14       		.uleb128 0x14
 4093 0709 36000000 		.4byte	.LBB8
 4094 070d 48000000 		.4byte	.LBE8-.LBB8
 4095 0711 1C       		.uleb128 0x1c
 4096 0712 B9040000 		.4byte	.LASF108
 4097 0716 01       		.byte	0x1
 4098 0717 8101     		.2byte	0x181
 4099 0719 22070000 		.4byte	0x722
 4100 071d 02       		.uleb128 0x2
 4101 071e 91       		.byte	0x91
 4102 071f 6C       		.sleb128 -20
 4103 0720 00       		.byte	0
 4104 0721 00       		.byte	0
 4105 0722 08       		.uleb128 0x8
 4106 0723 F7000000 		.4byte	0xf7
 4107 0727 32070000 		.4byte	0x732
 4108 072b 09       		.uleb128 0x9
 4109 072c 05010000 		.4byte	0x105
 4110 0730 09       		.byte	0x9
 4111 0731 00       		.byte	0
 4112 0732 1D       		.uleb128 0x1d
 4113 0733 0C020000 		.4byte	.LASF109
 4114 0737 01       		.byte	0x1
 4115 0738 9301     		.2byte	0x193
 4116 073a 00000000 		.4byte	.LFB77
 4117 073e 1C000000 		.4byte	.LFE77-.LFB77
 4118 0742 01       		.uleb128 0x1
 4119 0743 9C       		.byte	0x9c
 4120 0744 1E       		.uleb128 0x1e
 4121 0745 AE070000 		.4byte	.LASF111
 4122 0749 01       		.byte	0x1
 4123 074a A301     		.2byte	0x1a3
 4124 074c AD000000 		.4byte	0xad
 4125 0750 00000000 		.4byte	.LFB78
 4126 0754 28000000 		.4byte	.LFE78-.LFB78
 4127 0758 01       		.uleb128 0x1
 4128 0759 9C       		.byte	0x9c
 4129 075a 1F       		.uleb128 0x1f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 95


 4130 075b DD030000 		.4byte	.LASF114
 4131 075f 01       		.byte	0x1
 4132 0760 AE01     		.2byte	0x1ae
 4133 0762 00000000 		.4byte	.LFB79
 4134 0766 84000000 		.4byte	.LFE79-.LFB79
 4135 076a 01       		.uleb128 0x1
 4136 076b 9C       		.byte	0x9c
 4137 076c 80070000 		.4byte	0x780
 4138 0770 1C       		.uleb128 0x1c
 4139 0771 A2050000 		.4byte	.LASF112
 4140 0775 01       		.byte	0x1
 4141 0776 BB01     		.2byte	0x1bb
 4142 0778 7E000000 		.4byte	0x7e
 4143 077c 02       		.uleb128 0x2
 4144 077d 91       		.byte	0x91
 4145 077e 74       		.sleb128 -12
 4146 077f 00       		.byte	0
 4147 0780 20       		.uleb128 0x20
 4148 0781 5C030000 		.4byte	.LASF113
 4149 0785 01       		.byte	0x1
 4150 0786 CD01     		.2byte	0x1cd
 4151 0788 00000000 		.4byte	.LFB80
 4152 078c 3C000000 		.4byte	.LFE80-.LFB80
 4153 0790 01       		.uleb128 0x1
 4154 0791 9C       		.byte	0x9c
 4155 0792 1F       		.uleb128 0x1f
 4156 0793 4D080000 		.4byte	.LASF115
 4157 0797 01       		.byte	0x1
 4158 0798 DA01     		.2byte	0x1da
 4159 079a 00000000 		.4byte	.LFB81
 4160 079e 68040000 		.4byte	.LFE81-.LFB81
 4161 07a2 01       		.uleb128 0x1
 4162 07a3 9C       		.byte	0x9c
 4163 07a4 AF080000 		.4byte	0x8af
 4164 07a8 1C       		.uleb128 0x1c
 4165 07a9 6D060000 		.4byte	.LASF116
 4166 07ad 01       		.byte	0x1
 4167 07ae DD01     		.2byte	0x1dd
 4168 07b0 22070000 		.4byte	0x722
 4169 07b4 02       		.uleb128 0x2
 4170 07b5 91       		.byte	0x91
 4171 07b6 64       		.sleb128 -28
 4172 07b7 1C       		.uleb128 0x1c
 4173 07b8 C4020000 		.4byte	.LASF117
 4174 07bc 01       		.byte	0x1
 4175 07bd DE01     		.2byte	0x1de
 4176 07bf 22070000 		.4byte	0x722
 4177 07c3 02       		.uleb128 0x2
 4178 07c4 91       		.byte	0x91
 4179 07c5 58       		.sleb128 -40
 4180 07c6 1C       		.uleb128 0x1c
 4181 07c7 70080000 		.4byte	.LASF118
 4182 07cb 01       		.byte	0x1
 4183 07cc DF01     		.2byte	0x1df
 4184 07ce 22070000 		.4byte	0x722
 4185 07d2 02       		.uleb128 0x2
 4186 07d3 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 96


 4187 07d4 4C       		.sleb128 -52
 4188 07d5 1C       		.uleb128 0x1c
 4189 07d6 F3050000 		.4byte	.LASF119
 4190 07da 01       		.byte	0x1
 4191 07db E001     		.2byte	0x1e0
 4192 07dd 22070000 		.4byte	0x722
 4193 07e1 02       		.uleb128 0x2
 4194 07e2 91       		.byte	0x91
 4195 07e3 40       		.sleb128 -64
 4196 07e4 1C       		.uleb128 0x1c
 4197 07e5 4F030000 		.4byte	.LASF120
 4198 07e9 01       		.byte	0x1
 4199 07ea E101     		.2byte	0x1e1
 4200 07ec 22070000 		.4byte	0x722
 4201 07f0 03       		.uleb128 0x3
 4202 07f1 91       		.byte	0x91
 4203 07f2 B47F     		.sleb128 -76
 4204 07f4 1C       		.uleb128 0x1c
 4205 07f5 01080000 		.4byte	.LASF121
 4206 07f9 01       		.byte	0x1
 4207 07fa E401     		.2byte	0x1e4
 4208 07fc 4D040000 		.4byte	0x44d
 4209 0800 03       		.uleb128 0x3
 4210 0801 91       		.byte	0x91
 4211 0802 D07E     		.sleb128 -176
 4212 0804 1C       		.uleb128 0x1c
 4213 0805 28030000 		.4byte	.LASF122
 4214 0809 01       		.byte	0x1
 4215 080a E701     		.2byte	0x1e7
 4216 080c 4D040000 		.4byte	0x44d
 4217 0810 03       		.uleb128 0x3
 4218 0811 91       		.byte	0x91
 4219 0812 EC7D     		.sleb128 -276
 4220 0814 1C       		.uleb128 0x1c
 4221 0815 01060000 		.4byte	.LASF123
 4222 0819 01       		.byte	0x1
 4223 081a EA01     		.2byte	0x1ea
 4224 081c AF080000 		.4byte	0x8af
 4225 0820 03       		.uleb128 0x3
 4226 0821 91       		.byte	0x91
 4227 0822 A47C     		.sleb128 -476
 4228 0824 1C       		.uleb128 0x1c
 4229 0825 A1020000 		.4byte	.LASF59
 4230 0829 01       		.byte	0x1
 4231 082a 1A02     		.2byte	0x21a
 4232 082c 7E000000 		.4byte	0x7e
 4233 0830 03       		.uleb128 0x3
 4234 0831 91       		.byte	0x91
 4235 0832 A07C     		.sleb128 -480
 4236 0834 1C       		.uleb128 0x1c
 4237 0835 10060000 		.4byte	.LASF60
 4238 0839 01       		.byte	0x1
 4239 083a 1A02     		.2byte	0x21a
 4240 083c 7E000000 		.4byte	0x7e
 4241 0840 03       		.uleb128 0x3
 4242 0841 91       		.byte	0x91
 4243 0842 9C7C     		.sleb128 -484
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 97


 4244 0844 1C       		.uleb128 0x1c
 4245 0845 4E010000 		.4byte	.LASF124
 4246 0849 01       		.byte	0x1
 4247 084a 1A02     		.2byte	0x21a
 4248 084c 7E000000 		.4byte	0x7e
 4249 0850 03       		.uleb128 0x3
 4250 0851 91       		.byte	0x91
 4251 0852 987C     		.sleb128 -488
 4252 0854 1C       		.uleb128 0x1c
 4253 0855 07050000 		.4byte	.LASF125
 4254 0859 01       		.byte	0x1
 4255 085a 1A02     		.2byte	0x21a
 4256 085c 7E000000 		.4byte	0x7e
 4257 0860 03       		.uleb128 0x3
 4258 0861 91       		.byte	0x91
 4259 0862 947C     		.sleb128 -492
 4260 0864 1C       		.uleb128 0x1c
 4261 0865 BE040000 		.4byte	.LASF126
 4262 0869 01       		.byte	0x1
 4263 086a 1A02     		.2byte	0x21a
 4264 086c 7E000000 		.4byte	0x7e
 4265 0870 03       		.uleb128 0x3
 4266 0871 91       		.byte	0x91
 4267 0872 907C     		.sleb128 -496
 4268 0874 1C       		.uleb128 0x1c
 4269 0875 56090000 		.4byte	.LASF127
 4270 0879 01       		.byte	0x1
 4271 087a 1A02     		.2byte	0x21a
 4272 087c 7E000000 		.4byte	0x7e
 4273 0880 03       		.uleb128 0x3
 4274 0881 91       		.byte	0x91
 4275 0882 8C7C     		.sleb128 -500
 4276 0884 1C       		.uleb128 0x1c
 4277 0885 7C020000 		.4byte	.LASF128
 4278 0889 01       		.byte	0x1
 4279 088a 1A02     		.2byte	0x21a
 4280 088c 7E000000 		.4byte	0x7e
 4281 0890 03       		.uleb128 0x3
 4282 0891 91       		.byte	0x91
 4283 0892 887C     		.sleb128 -504
 4284 0894 14       		.uleb128 0x14
 4285 0895 98020000 		.4byte	.LBB9
 4286 0899 A2010000 		.4byte	.LBE9-.LBB9
 4287 089d 1C       		.uleb128 0x1c
 4288 089e 33020000 		.4byte	.LASF129
 4289 08a2 01       		.byte	0x1
 4290 08a3 4402     		.2byte	0x244
 4291 08a5 4D040000 		.4byte	0x44d
 4292 08a9 03       		.uleb128 0x3
 4293 08aa 91       		.byte	0x91
 4294 08ab A47B     		.sleb128 -604
 4295 08ad 00       		.byte	0
 4296 08ae 00       		.byte	0
 4297 08af 08       		.uleb128 0x8
 4298 08b0 F7000000 		.4byte	0xf7
 4299 08b4 BF080000 		.4byte	0x8bf
 4300 08b8 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 98


 4301 08b9 05010000 		.4byte	0x105
 4302 08bd C7       		.byte	0xc7
 4303 08be 00       		.byte	0
 4304 08bf 1F       		.uleb128 0x1f
 4305 08c0 AB020000 		.4byte	.LASF130
 4306 08c4 01       		.byte	0x1
 4307 08c5 6C02     		.2byte	0x26c
 4308 08c7 00000000 		.4byte	.LFB82
 4309 08cb 68010000 		.4byte	.LFE82-.LFB82
 4310 08cf 01       		.uleb128 0x1
 4311 08d0 9C       		.byte	0x9c
 4312 08d1 EF080000 		.4byte	0x8ef
 4313 08d5 14       		.uleb128 0x14
 4314 08d6 DA000000 		.4byte	.LBB10
 4315 08da 38000000 		.4byte	.LBE10-.LBB10
 4316 08de 1C       		.uleb128 0x1c
 4317 08df 63070000 		.4byte	.LASF131
 4318 08e3 01       		.byte	0x1
 4319 08e4 9A02     		.2byte	0x29a
 4320 08e6 22070000 		.4byte	0x722
 4321 08ea 02       		.uleb128 0x2
 4322 08eb 91       		.byte	0x91
 4323 08ec 6C       		.sleb128 -20
 4324 08ed 00       		.byte	0
 4325 08ee 00       		.byte	0
 4326 08ef 1B       		.uleb128 0x1b
 4327 08f0 0A030000 		.4byte	.LASF132
 4328 08f4 01       		.byte	0x1
 4329 08f5 AD02     		.2byte	0x2ad
 4330 08f7 57000000 		.4byte	0x57
 4331 08fb 00000000 		.4byte	.LFB83
 4332 08ff 44010000 		.4byte	.LFE83-.LFB83
 4333 0903 01       		.uleb128 0x1
 4334 0904 9C       		.byte	0x9c
 4335 0905 AB090000 		.4byte	0x9ab
 4336 0909 1C       		.uleb128 0x1c
 4337 090a 93040000 		.4byte	.LASF133
 4338 090e 01       		.byte	0x1
 4339 090f B802     		.2byte	0x2b8
 4340 0911 57000000 		.4byte	0x57
 4341 0915 02       		.uleb128 0x2
 4342 0916 91       		.byte	0x91
 4343 0917 74       		.sleb128 -12
 4344 0918 14       		.uleb128 0x14
 4345 0919 30000000 		.4byte	.LBB11
 4346 091d DE000000 		.4byte	.LBE11-.LBB11
 4347 0921 1C       		.uleb128 0x1c
 4348 0922 CF020000 		.4byte	.LASF99
 4349 0926 01       		.byte	0x1
 4350 0927 BD02     		.2byte	0x2bd
 4351 0929 AB090000 		.4byte	0x9ab
 4352 092d 02       		.uleb128 0x2
 4353 092e 91       		.byte	0x91
 4354 092f 54       		.sleb128 -44
 4355 0930 1A       		.uleb128 0x1a
 4356 0931 7400     		.ascii	"t\000"
 4357 0933 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 99


 4358 0934 C302     		.2byte	0x2c3
 4359 0936 2D010000 		.4byte	0x12d
 4360 093a 03       		.uleb128 0x3
 4361 093b 91       		.byte	0x91
 4362 093c 947F     		.sleb128 -108
 4363 093e 1C       		.uleb128 0x1c
 4364 093f 2E020000 		.4byte	.LASF134
 4365 0943 01       		.byte	0x1
 4366 0944 C602     		.2byte	0x2c6
 4367 0946 7E000000 		.4byte	0x7e
 4368 094a 02       		.uleb128 0x2
 4369 094b 91       		.byte	0x91
 4370 094c 50       		.sleb128 -48
 4371 094d 1C       		.uleb128 0x1c
 4372 094e 35050000 		.4byte	.LASF135
 4373 0952 01       		.byte	0x1
 4374 0953 C602     		.2byte	0x2c6
 4375 0955 7E000000 		.4byte	0x7e
 4376 0959 02       		.uleb128 0x2
 4377 095a 91       		.byte	0x91
 4378 095b 4C       		.sleb128 -52
 4379 095c 1A       		.uleb128 0x1a
 4380 095d 64617900 		.ascii	"day\000"
 4381 0961 01       		.byte	0x1
 4382 0962 C602     		.2byte	0x2c6
 4383 0964 7E000000 		.4byte	0x7e
 4384 0968 02       		.uleb128 0x2
 4385 0969 91       		.byte	0x91
 4386 096a 48       		.sleb128 -56
 4387 096b 1C       		.uleb128 0x1c
 4388 096c BD050000 		.4byte	.LASF136
 4389 0970 01       		.byte	0x1
 4390 0971 C602     		.2byte	0x2c6
 4391 0973 7E000000 		.4byte	0x7e
 4392 0977 02       		.uleb128 0x2
 4393 0978 91       		.byte	0x91
 4394 0979 44       		.sleb128 -60
 4395 097a 1C       		.uleb128 0x1c
 4396 097b 36080000 		.4byte	.LASF137
 4397 097f 01       		.byte	0x1
 4398 0980 C602     		.2byte	0x2c6
 4399 0982 7E000000 		.4byte	0x7e
 4400 0986 02       		.uleb128 0x2
 4401 0987 91       		.byte	0x91
 4402 0988 40       		.sleb128 -64
 4403 0989 1C       		.uleb128 0x1c
 4404 098a 27020000 		.4byte	.LASF138
 4405 098e 01       		.byte	0x1
 4406 098f C602     		.2byte	0x2c6
 4407 0991 7E000000 		.4byte	0x7e
 4408 0995 03       		.uleb128 0x3
 4409 0996 91       		.byte	0x91
 4410 0997 BC7F     		.sleb128 -68
 4411 0999 1C       		.uleb128 0x1c
 4412 099a 00000000 		.4byte	.LASF139
 4413 099e 01       		.byte	0x1
 4414 099f C602     		.2byte	0x2c6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 100


 4415 09a1 7E000000 		.4byte	0x7e
 4416 09a5 03       		.uleb128 0x3
 4417 09a6 91       		.byte	0x91
 4418 09a7 B87F     		.sleb128 -72
 4419 09a9 00       		.byte	0
 4420 09aa 00       		.byte	0
 4421 09ab 08       		.uleb128 0x8
 4422 09ac F7000000 		.4byte	0xf7
 4423 09b0 BB090000 		.4byte	0x9bb
 4424 09b4 09       		.uleb128 0x9
 4425 09b5 05010000 		.4byte	0x105
 4426 09b9 1D       		.byte	0x1d
 4427 09ba 00       		.byte	0
 4428 09bb 21       		.uleb128 0x21
 4429 09bc 5D020000 		.4byte	.LASF140
 4430 09c0 01       		.byte	0x1
 4431 09c1 E602     		.2byte	0x2e6
 4432 09c3 AD000000 		.4byte	0xad
 4433 09c7 00000000 		.4byte	.LFB84
 4434 09cb 14000000 		.4byte	.LFE84-.LFB84
 4435 09cf 01       		.uleb128 0x1
 4436 09d0 9C       		.byte	0x9c
 4437 09d1 1D       		.uleb128 0x1d
 4438 09d2 43030000 		.4byte	.LASF141
 4439 09d6 01       		.byte	0x1
 4440 09d7 EB02     		.2byte	0x2eb
 4441 09d9 00000000 		.4byte	.LFB85
 4442 09dd 1A000000 		.4byte	.LFE85-.LFB85
 4443 09e1 01       		.uleb128 0x1
 4444 09e2 9C       		.byte	0x9c
 4445 09e3 1D       		.uleb128 0x1d
 4446 09e4 2A010000 		.4byte	.LASF142
 4447 09e8 01       		.byte	0x1
 4448 09e9 F802     		.2byte	0x2f8
 4449 09eb 00000000 		.4byte	.LFB86
 4450 09ef 2A000000 		.4byte	.LFE86-.LFB86
 4451 09f3 01       		.uleb128 0x1
 4452 09f4 9C       		.byte	0x9c
 4453 09f5 1B       		.uleb128 0x1b
 4454 09f6 7E060000 		.4byte	.LASF143
 4455 09fa 01       		.byte	0x1
 4456 09fb 0B03     		.2byte	0x30b
 4457 09fd 37030000 		.4byte	0x337
 4458 0a01 00000000 		.4byte	.LFB87
 4459 0a05 7C020000 		.4byte	.LFE87-.LFB87
 4460 0a09 01       		.uleb128 0x1
 4461 0a0a 9C       		.byte	0x9c
 4462 0a0b 9E0A0000 		.4byte	0xa9e
 4463 0a0f 1A       		.uleb128 0x1a
 4464 0a10 67707300 		.ascii	"gps\000"
 4465 0a14 01       		.byte	0x1
 4466 0a15 0C03     		.2byte	0x30c
 4467 0a17 37030000 		.4byte	0x337
 4468 0a1b 02       		.uleb128 0x2
 4469 0a1c 91       		.byte	0x91
 4470 0a1d 4C       		.sleb128 -52
 4471 0a1e 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 101


 4472 0a1f 19090000 		.4byte	.LASF144
 4473 0a23 01       		.byte	0x1
 4474 0a24 1803     		.2byte	0x318
 4475 0a26 57000000 		.4byte	0x57
 4476 0a2a 02       		.uleb128 0x2
 4477 0a2b 91       		.byte	0x91
 4478 0a2c 68       		.sleb128 -24
 4479 0a2d 1C       		.uleb128 0x1c
 4480 0a2e DE070000 		.4byte	.LASF145
 4481 0a32 01       		.byte	0x1
 4482 0a33 3F03     		.2byte	0x33f
 4483 0a35 AD000000 		.4byte	0xad
 4484 0a39 02       		.uleb128 0x2
 4485 0a3a 91       		.byte	0x91
 4486 0a3b 67       		.sleb128 -25
 4487 0a3c 1A       		.uleb128 0x1a
 4488 0a3d 6C617400 		.ascii	"lat\000"
 4489 0a41 01       		.byte	0x1
 4490 0a42 4B03     		.2byte	0x34b
 4491 0a44 E9000000 		.4byte	0xe9
 4492 0a48 02       		.uleb128 0x2
 4493 0a49 91       		.byte	0x91
 4494 0a4a 48       		.sleb128 -56
 4495 0a4b 1A       		.uleb128 0x1a
 4496 0a4c 6C6F6E00 		.ascii	"lon\000"
 4497 0a50 01       		.byte	0x1
 4498 0a51 4C03     		.2byte	0x34c
 4499 0a53 E9000000 		.4byte	0xe9
 4500 0a57 02       		.uleb128 0x2
 4501 0a58 91       		.byte	0x91
 4502 0a59 44       		.sleb128 -60
 4503 0a5a 1A       		.uleb128 0x1a
 4504 0a5b 616C7400 		.ascii	"alt\000"
 4505 0a5f 01       		.byte	0x1
 4506 0a60 4D03     		.2byte	0x34d
 4507 0a62 E9000000 		.4byte	0xe9
 4508 0a66 02       		.uleb128 0x2
 4509 0a67 91       		.byte	0x91
 4510 0a68 40       		.sleb128 -64
 4511 0a69 1A       		.uleb128 0x1a
 4512 0a6a 733100   		.ascii	"s1\000"
 4513 0a6d 01       		.byte	0x1
 4514 0a6e 5103     		.2byte	0x351
 4515 0a70 0C010000 		.4byte	0x10c
 4516 0a74 02       		.uleb128 0x2
 4517 0a75 91       		.byte	0x91
 4518 0a76 60       		.sleb128 -32
 4519 0a77 1C       		.uleb128 0x1c
 4520 0a78 A2050000 		.4byte	.LASF112
 4521 0a7c 01       		.byte	0x1
 4522 0a7d 5403     		.2byte	0x354
 4523 0a7f 7E000000 		.4byte	0x7e
 4524 0a83 02       		.uleb128 0x2
 4525 0a84 91       		.byte	0x91
 4526 0a85 5C       		.sleb128 -36
 4527 0a86 14       		.uleb128 0x14
 4528 0a87 B4000000 		.4byte	.LBB12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 102


 4529 0a8b 38000000 		.4byte	.LBE12-.LBB12
 4530 0a8f 1A       		.uleb128 0x1a
 4531 0a90 6900     		.ascii	"i\000"
 4532 0a92 01       		.byte	0x1
 4533 0a93 4003     		.2byte	0x340
 4534 0a95 B9000000 		.4byte	0xb9
 4535 0a99 02       		.uleb128 0x2
 4536 0a9a 91       		.byte	0x91
 4537 0a9b 6E       		.sleb128 -18
 4538 0a9c 00       		.byte	0
 4539 0a9d 00       		.byte	0
 4540 0a9e 22       		.uleb128 0x22
 4541 0a9f 78010000 		.4byte	.LASF146
 4542 0aa3 0A       		.byte	0xa
 4543 0aa4 1207     		.2byte	0x712
 4544 0aa6 AA0A0000 		.4byte	0xaaa
 4545 0aaa 0F       		.uleb128 0xf
 4546 0aab 97000000 		.4byte	0x97
 4547 0aaf 23       		.uleb128 0x23
 4548 0ab0 60000000 		.4byte	.LASF147
 4549 0ab4 07       		.byte	0x7
 4550 0ab5 11       		.byte	0x11
 4551 0ab6 9F030000 		.4byte	0x39f
 4552 0aba 05       		.uleb128 0x5
 4553 0abb 03       		.byte	0x3
 4554 0abc 00000000 		.4byte	buffer_overflow
 4555 0ac0 23       		.uleb128 0x23
 4556 0ac1 13050000 		.4byte	.LASF148
 4557 0ac5 07       		.byte	0x7
 4558 0ac6 22       		.byte	0x22
 4559 0ac7 B9000000 		.4byte	0xb9
 4560 0acb 05       		.uleb128 0x5
 4561 0acc 03       		.byte	0x3
 4562 0acd 00000000 		.4byte	dataPointsInStack
 4563 0ad1 23       		.uleb128 0x23
 4564 0ad2 9A080000 		.4byte	.LASF149
 4565 0ad6 07       		.byte	0x7
 4566 0ad7 23       		.byte	0x23
 4567 0ad8 B9000000 		.4byte	0xb9
 4568 0adc 05       		.uleb128 0x5
 4569 0add 03       		.byte	0x3
 4570 0ade 00000000 		.4byte	dataPointsInStackDesired
 4571 0ae2 08       		.uleb128 0x8
 4572 0ae3 3B020000 		.4byte	0x23b
 4573 0ae7 F20A0000 		.4byte	0xaf2
 4574 0aeb 09       		.uleb128 0x9
 4575 0aec 05010000 		.4byte	0x105
 4576 0af0 95       		.byte	0x95
 4577 0af1 00       		.byte	0
 4578 0af2 23       		.uleb128 0x23
 4579 0af3 0B040000 		.4byte	.LASF150
 4580 0af7 07       		.byte	0x7
 4581 0af8 24       		.byte	0x24
 4582 0af9 E20A0000 		.4byte	0xae2
 4583 0afd 05       		.uleb128 0x5
 4584 0afe 03       		.byte	0x3
 4585 0aff 00000000 		.4byte	data
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 103


 4586 0b03 23       		.uleb128 0x23
 4587 0b04 5A010000 		.4byte	.LASF151
 4588 0b08 08       		.byte	0x8
 4589 0b09 20       		.byte	0x20
 4590 0b0a AD000000 		.4byte	0xad
 4591 0b0e 05       		.uleb128 0x5
 4592 0b0f 03       		.byte	0x3
 4593 0b10 00000000 		.4byte	modem_state
 4594 0b14 23       		.uleb128 0x23
 4595 0b15 C7070000 		.4byte	.LASF152
 4596 0b19 08       		.byte	0x8
 4597 0b1a 6A       		.byte	0x6a
 4598 0b1b DD000000 		.4byte	0xdd
 4599 0b1f 05       		.uleb128 0x5
 4600 0b20 03       		.byte	0x3
 4601 0b21 00000000 		.4byte	modem_start_time_stamp
 4602 0b25 23       		.uleb128 0x23
 4603 0b26 21040000 		.4byte	.LASF73
 4604 0b2a 08       		.byte	0x8
 4605 0b2b 6B       		.byte	0x6b
 4606 0b2c 73020000 		.4byte	0x273
 4607 0b30 05       		.uleb128 0x5
 4608 0b31 03       		.byte	0x3
 4609 0b32 00000000 		.4byte	modem_info
 4610 0b36 23       		.uleb128 0x23
 4611 0b37 97010000 		.4byte	.LASF153
 4612 0b3b 08       		.byte	0x8
 4613 0b3c 6C       		.byte	0x6c
 4614 0b3d E7020000 		.4byte	0x2e7
 4615 0b41 05       		.uleb128 0x5
 4616 0b42 03       		.byte	0x3
 4617 0b43 00000000 		.4byte	modem_stats
 4618 0b47 23       		.uleb128 0x23
 4619 0b48 A8050000 		.4byte	.LASF154
 4620 0b4c 08       		.byte	0x8
 4621 0b4d 6D       		.byte	0x6d
 4622 0b4e A6030000 		.4byte	0x3a6
 4623 0b52 05       		.uleb128 0x5
 4624 0b53 03       		.byte	0x3
 4625 0b54 00000000 		.4byte	updatable_parameters
 4626 0b58 23       		.uleb128 0x23
 4627 0b59 1E070000 		.4byte	.LASF155
 4628 0b5d 0B       		.byte	0xb
 4629 0b5e 25       		.byte	0x25
 4630 0b5f 4D040000 		.4byte	0x44d
 4631 0b63 05       		.uleb128 0x5
 4632 0b64 03       		.byte	0x3
 4633 0b65 00000000 		.4byte	level_sensor_inbox
 4634 0b69 23       		.uleb128 0x23
 4635 0b6a 85080000 		.4byte	.LASF156
 4636 0b6e 0B       		.byte	0xb
 4637 0b6f 27       		.byte	0x27
 4638 0b70 9F030000 		.4byte	0x39f
 4639 0b74 05       		.uleb128 0x5
 4640 0b75 03       		.byte	0x3
 4641 0b76 00000000 		.4byte	level_sensor_enabled
 4642 0b7a 23       		.uleb128 0x23
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 104


 4643 0b7b 8E030000 		.4byte	.LASF157
 4644 0b7f 0C       		.byte	0xc
 4645 0b80 07       		.byte	0x7
 4646 0b81 9F030000 		.4byte	0x39f
 4647 0b85 05       		.uleb128 0x5
 4648 0b86 03       		.byte	0x3
 4649 0b87 00000000 		.4byte	App_LED_enabled
 4650 0b8b 23       		.uleb128 0x23
 4651 0b8c 48090000 		.4byte	.LASF158
 4652 0b90 0C       		.byte	0xc
 4653 0b91 08       		.byte	0x8
 4654 0b92 4D040000 		.4byte	0x44d
 4655 0b96 05       		.uleb128 0x5
 4656 0b97 03       		.byte	0x3
 4657 0b98 00000000 		.4byte	app_led_inbox
 4658 0b9c 08       		.uleb128 0x8
 4659 0b9d F7000000 		.4byte	0xf7
 4660 0ba1 AD0B0000 		.4byte	0xbad
 4661 0ba5 24       		.uleb128 0x24
 4662 0ba6 05010000 		.4byte	0x105
 4663 0baa 0F27     		.2byte	0x270f
 4664 0bac 00       		.byte	0
 4665 0bad 23       		.uleb128 0x23
 4666 0bae 23090000 		.4byte	.LASF159
 4667 0bb2 09       		.byte	0x9
 4668 0bb3 18       		.byte	0x18
 4669 0bb4 9C0B0000 		.4byte	0xb9c
 4670 0bb8 05       		.uleb128 0x5
 4671 0bb9 03       		.byte	0x3
 4672 0bba 00000000 		.4byte	http_request
 4673 0bbe 23       		.uleb128 0x23
 4674 0bbf 02020000 		.4byte	.LASF160
 4675 0bc3 09       		.byte	0x9
 4676 0bc4 19       		.byte	0x19
 4677 0bc5 9C0B0000 		.4byte	0xb9c
 4678 0bc9 05       		.uleb128 0x5
 4679 0bca 03       		.byte	0x3
 4680 0bcb 00000000 		.4byte	http_body
 4681 0bcf 23       		.uleb128 0x23
 4682 0bd0 71070000 		.4byte	.LASF161
 4683 0bd4 09       		.byte	0x9
 4684 0bd5 1A       		.byte	0x1a
 4685 0bd6 AF080000 		.4byte	0x8af
 4686 0bda 05       		.uleb128 0x5
 4687 0bdb 03       		.byte	0x3
 4688 0bdc 00000000 		.4byte	http_route
 4689 0be0 23       		.uleb128 0x23
 4690 0be1 9F060000 		.4byte	.LASF162
 4691 0be5 09       		.byte	0x9
 4692 0be6 41       		.byte	0x41
 4693 0be7 21040000 		.4byte	0x421
 4694 0beb 05       		.uleb128 0x5
 4695 0bec 03       		.byte	0x3
 4696 0bed 00000000 		.4byte	system_info
 4697 0bf1 23       		.uleb128 0x23
 4698 0bf2 48060000 		.4byte	.LASF163
 4699 0bf6 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 105


 4700 0bf7 53       		.byte	0x53
 4701 0bf8 5D040000 		.4byte	0x45d
 4702 0bfc 05       		.uleb128 0x5
 4703 0bfd 03       		.byte	0x3
 4704 0bfe 00000000 		.4byte	system_settings
 4705 0c02 23       		.uleb128 0x23
 4706 0c03 6B010000 		.4byte	.LASF164
 4707 0c07 09       		.byte	0x9
 4708 0c08 6F       		.byte	0x6f
 4709 0c09 EA030000 		.4byte	0x3ea
 4710 0c0d 05       		.uleb128 0x5
 4711 0c0e 03       		.byte	0x3
 4712 0c0f 00000000 		.4byte	alarmMeasure
 4713 0c13 23       		.uleb128 0x23
 4714 0c14 D1010000 		.4byte	.LASF165
 4715 0c18 09       		.byte	0x9
 4716 0c19 70       		.byte	0x70
 4717 0c1a AD000000 		.4byte	0xad
 4718 0c1e 05       		.uleb128 0x5
 4719 0c1f 03       		.byte	0x3
 4720 0c20 00000000 		.4byte	timeToMeasure
 4721 0c24 23       		.uleb128 0x23
 4722 0c25 84030000 		.4byte	.LASF166
 4723 0c29 09       		.byte	0x9
 4724 0c2a 71       		.byte	0x71
 4725 0c2b EA030000 		.4byte	0x3ea
 4726 0c2f 05       		.uleb128 0x5
 4727 0c30 03       		.byte	0x3
 4728 0c31 00000000 		.4byte	alarmSync
 4729 0c35 23       		.uleb128 0x23
 4730 0c36 F7010000 		.4byte	.LASF167
 4731 0c3a 09       		.byte	0x9
 4732 0c3b 72       		.byte	0x72
 4733 0c3c AD000000 		.4byte	0xad
 4734 0c40 05       		.uleb128 0x5
 4735 0c41 03       		.byte	0x3
 4736 0c42 00000000 		.4byte	timeToSync
 4737 0c46 23       		.uleb128 0x23
 4738 0c47 80050000 		.4byte	.LASF168
 4739 0c4b 09       		.byte	0x9
 4740 0c4c 73       		.byte	0x73
 4741 0c4d AD000000 		.4byte	0xad
 4742 0c51 05       		.uleb128 0x5
 4743 0c52 03       		.byte	0x3
 4744 0c53 00000000 		.4byte	timeToSycnRemoteParams
 4745 0c57 25       		.uleb128 0x25
 4746 0c58 68657900 		.ascii	"hey\000"
 4747 0c5c 09       		.byte	0x9
 4748 0c5d 74       		.byte	0x74
 4749 0c5e AD000000 		.4byte	0xad
 4750 0c62 05       		.uleb128 0x5
 4751 0c63 03       		.byte	0x3
 4752 0c64 00000000 		.4byte	hey
 4753 0c68 23       		.uleb128 0x23
 4754 0c69 A8040000 		.4byte	.LASF169
 4755 0c6d 09       		.byte	0x9
 4756 0c6e 77       		.byte	0x77
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 106


 4757 0c6f EA030000 		.4byte	0x3ea
 4758 0c73 05       		.uleb128 0x5
 4759 0c74 03       		.byte	0x3
 4760 0c75 00000000 		.4byte	alarmAppLED
 4761 0c79 23       		.uleb128 0x23
 4762 0c7a 8E020000 		.4byte	.LASF170
 4763 0c7e 09       		.byte	0x9
 4764 0c7f 78       		.byte	0x78
 4765 0c80 AD000000 		.4byte	0xad
 4766 0c84 05       		.uleb128 0x5
 4767 0c85 03       		.byte	0x3
 4768 0c86 00000000 		.4byte	timeToAppLED
 4769 0c8a 23       		.uleb128 0x23
 4770 0c8b DC060000 		.4byte	.LASF171
 4771 0c8f 09       		.byte	0x9
 4772 0c90 7A       		.byte	0x7a
 4773 0c91 EA030000 		.4byte	0x3ea
 4774 0c95 05       		.uleb128 0x5
 4775 0c96 03       		.byte	0x3
 4776 0c97 00000000 		.4byte	alarmLevelSensor
 4777 0c9b 23       		.uleb128 0x23
 4778 0c9c 85010000 		.4byte	.LASF172
 4779 0ca0 09       		.byte	0x9
 4780 0ca1 7B       		.byte	0x7b
 4781 0ca2 AD000000 		.4byte	0xad
 4782 0ca6 05       		.uleb128 0x5
 4783 0ca7 03       		.byte	0x3
 4784 0ca8 00000000 		.4byte	timetoLevelSensor
 4785 0cac 08       		.uleb128 0x8
 4786 0cad F7000000 		.4byte	0xf7
 4787 0cb1 BD0C0000 		.4byte	0xcbd
 4788 0cb5 24       		.uleb128 0x24
 4789 0cb6 05010000 		.4byte	0x105
 4790 0cba FF03     		.2byte	0x3ff
 4791 0cbc 00       		.byte	0
 4792 0cbd 23       		.uleb128 0x23
 4793 0cbe 58050000 		.4byte	.LASF173
 4794 0cc2 01       		.byte	0x1
 4795 0cc3 05       		.byte	0x5
 4796 0cc4 AC0C0000 		.4byte	0xcac
 4797 0cc8 05       		.uleb128 0x5
 4798 0cc9 03       		.byte	0x3
 4799 0cca 00000000 		.4byte	uart_received_string
 4800 0cce 23       		.uleb128 0x23
 4801 0ccf 8F070000 		.4byte	.LASF174
 4802 0cd3 01       		.byte	0x1
 4803 0cd4 06       		.byte	0x6
 4804 0cd5 D1000000 		.4byte	0xd1
 4805 0cd9 05       		.uleb128 0x5
 4806 0cda 03       		.byte	0x3
 4807 0cdb 00000000 		.4byte	uart_string_index
 4808 0cdf 00       		.byte	0
 4809              		.section	.debug_abbrev,"",%progbits
 4810              	.Ldebug_abbrev0:
 4811 0000 01       		.uleb128 0x1
 4812 0001 11       		.uleb128 0x11
 4813 0002 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 107


 4814 0003 25       		.uleb128 0x25
 4815 0004 0E       		.uleb128 0xe
 4816 0005 13       		.uleb128 0x13
 4817 0006 0B       		.uleb128 0xb
 4818 0007 03       		.uleb128 0x3
 4819 0008 0E       		.uleb128 0xe
 4820 0009 1B       		.uleb128 0x1b
 4821 000a 0E       		.uleb128 0xe
 4822 000b 55       		.uleb128 0x55
 4823 000c 17       		.uleb128 0x17
 4824 000d 11       		.uleb128 0x11
 4825 000e 01       		.uleb128 0x1
 4826 000f 10       		.uleb128 0x10
 4827 0010 17       		.uleb128 0x17
 4828 0011 00       		.byte	0
 4829 0012 00       		.byte	0
 4830 0013 02       		.uleb128 0x2
 4831 0014 24       		.uleb128 0x24
 4832 0015 00       		.byte	0
 4833 0016 0B       		.uleb128 0xb
 4834 0017 0B       		.uleb128 0xb
 4835 0018 3E       		.uleb128 0x3e
 4836 0019 0B       		.uleb128 0xb
 4837 001a 03       		.uleb128 0x3
 4838 001b 0E       		.uleb128 0xe
 4839 001c 00       		.byte	0
 4840 001d 00       		.byte	0
 4841 001e 03       		.uleb128 0x3
 4842 001f 16       		.uleb128 0x16
 4843 0020 00       		.byte	0
 4844 0021 03       		.uleb128 0x3
 4845 0022 0E       		.uleb128 0xe
 4846 0023 3A       		.uleb128 0x3a
 4847 0024 0B       		.uleb128 0xb
 4848 0025 3B       		.uleb128 0x3b
 4849 0026 0B       		.uleb128 0xb
 4850 0027 49       		.uleb128 0x49
 4851 0028 13       		.uleb128 0x13
 4852 0029 00       		.byte	0
 4853 002a 00       		.byte	0
 4854 002b 04       		.uleb128 0x4
 4855 002c 24       		.uleb128 0x24
 4856 002d 00       		.byte	0
 4857 002e 0B       		.uleb128 0xb
 4858 002f 0B       		.uleb128 0xb
 4859 0030 3E       		.uleb128 0x3e
 4860 0031 0B       		.uleb128 0xb
 4861 0032 03       		.uleb128 0x3
 4862 0033 08       		.uleb128 0x8
 4863 0034 00       		.byte	0
 4864 0035 00       		.byte	0
 4865 0036 05       		.uleb128 0x5
 4866 0037 16       		.uleb128 0x16
 4867 0038 00       		.byte	0
 4868 0039 03       		.uleb128 0x3
 4869 003a 0E       		.uleb128 0xe
 4870 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 108


 4871 003c 0B       		.uleb128 0xb
 4872 003d 3B       		.uleb128 0x3b
 4873 003e 05       		.uleb128 0x5
 4874 003f 49       		.uleb128 0x49
 4875 0040 13       		.uleb128 0x13
 4876 0041 00       		.byte	0
 4877 0042 00       		.byte	0
 4878 0043 06       		.uleb128 0x6
 4879 0044 0F       		.uleb128 0xf
 4880 0045 00       		.byte	0
 4881 0046 0B       		.uleb128 0xb
 4882 0047 0B       		.uleb128 0xb
 4883 0048 49       		.uleb128 0x49
 4884 0049 13       		.uleb128 0x13
 4885 004a 00       		.byte	0
 4886 004b 00       		.byte	0
 4887 004c 07       		.uleb128 0x7
 4888 004d 26       		.uleb128 0x26
 4889 004e 00       		.byte	0
 4890 004f 49       		.uleb128 0x49
 4891 0050 13       		.uleb128 0x13
 4892 0051 00       		.byte	0
 4893 0052 00       		.byte	0
 4894 0053 08       		.uleb128 0x8
 4895 0054 01       		.uleb128 0x1
 4896 0055 01       		.byte	0x1
 4897 0056 49       		.uleb128 0x49
 4898 0057 13       		.uleb128 0x13
 4899 0058 01       		.uleb128 0x1
 4900 0059 13       		.uleb128 0x13
 4901 005a 00       		.byte	0
 4902 005b 00       		.byte	0
 4903 005c 09       		.uleb128 0x9
 4904 005d 21       		.uleb128 0x21
 4905 005e 00       		.byte	0
 4906 005f 49       		.uleb128 0x49
 4907 0060 13       		.uleb128 0x13
 4908 0061 2F       		.uleb128 0x2f
 4909 0062 0B       		.uleb128 0xb
 4910 0063 00       		.byte	0
 4911 0064 00       		.byte	0
 4912 0065 0A       		.uleb128 0xa
 4913 0066 13       		.uleb128 0x13
 4914 0067 01       		.byte	0x1
 4915 0068 03       		.uleb128 0x3
 4916 0069 08       		.uleb128 0x8
 4917 006a 0B       		.uleb128 0xb
 4918 006b 0B       		.uleb128 0xb
 4919 006c 3A       		.uleb128 0x3a
 4920 006d 0B       		.uleb128 0xb
 4921 006e 3B       		.uleb128 0x3b
 4922 006f 0B       		.uleb128 0xb
 4923 0070 01       		.uleb128 0x1
 4924 0071 13       		.uleb128 0x13
 4925 0072 00       		.byte	0
 4926 0073 00       		.byte	0
 4927 0074 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 109


 4928 0075 0D       		.uleb128 0xd
 4929 0076 00       		.byte	0
 4930 0077 03       		.uleb128 0x3
 4931 0078 0E       		.uleb128 0xe
 4932 0079 3A       		.uleb128 0x3a
 4933 007a 0B       		.uleb128 0xb
 4934 007b 3B       		.uleb128 0x3b
 4935 007c 0B       		.uleb128 0xb
 4936 007d 49       		.uleb128 0x49
 4937 007e 13       		.uleb128 0x13
 4938 007f 38       		.uleb128 0x38
 4939 0080 0B       		.uleb128 0xb
 4940 0081 00       		.byte	0
 4941 0082 00       		.byte	0
 4942 0083 0C       		.uleb128 0xc
 4943 0084 13       		.uleb128 0x13
 4944 0085 01       		.byte	0x1
 4945 0086 0B       		.uleb128 0xb
 4946 0087 05       		.uleb128 0x5
 4947 0088 3A       		.uleb128 0x3a
 4948 0089 0B       		.uleb128 0xb
 4949 008a 3B       		.uleb128 0x3b
 4950 008b 0B       		.uleb128 0xb
 4951 008c 01       		.uleb128 0x1
 4952 008d 13       		.uleb128 0x13
 4953 008e 00       		.byte	0
 4954 008f 00       		.byte	0
 4955 0090 0D       		.uleb128 0xd
 4956 0091 13       		.uleb128 0x13
 4957 0092 01       		.byte	0x1
 4958 0093 0B       		.uleb128 0xb
 4959 0094 0B       		.uleb128 0xb
 4960 0095 3A       		.uleb128 0x3a
 4961 0096 0B       		.uleb128 0xb
 4962 0097 3B       		.uleb128 0x3b
 4963 0098 0B       		.uleb128 0xb
 4964 0099 01       		.uleb128 0x1
 4965 009a 13       		.uleb128 0x13
 4966 009b 00       		.byte	0
 4967 009c 00       		.byte	0
 4968 009d 0E       		.uleb128 0xe
 4969 009e 0D       		.uleb128 0xd
 4970 009f 00       		.byte	0
 4971 00a0 03       		.uleb128 0x3
 4972 00a1 08       		.uleb128 0x8
 4973 00a2 3A       		.uleb128 0x3a
 4974 00a3 0B       		.uleb128 0xb
 4975 00a4 3B       		.uleb128 0x3b
 4976 00a5 0B       		.uleb128 0xb
 4977 00a6 49       		.uleb128 0x49
 4978 00a7 13       		.uleb128 0x13
 4979 00a8 38       		.uleb128 0x38
 4980 00a9 0B       		.uleb128 0xb
 4981 00aa 00       		.byte	0
 4982 00ab 00       		.byte	0
 4983 00ac 0F       		.uleb128 0xf
 4984 00ad 35       		.uleb128 0x35
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 110


 4985 00ae 00       		.byte	0
 4986 00af 49       		.uleb128 0x49
 4987 00b0 13       		.uleb128 0x13
 4988 00b1 00       		.byte	0
 4989 00b2 00       		.byte	0
 4990 00b3 10       		.uleb128 0x10
 4991 00b4 2E       		.uleb128 0x2e
 4992 00b5 00       		.byte	0
 4993 00b6 3F       		.uleb128 0x3f
 4994 00b7 19       		.uleb128 0x19
 4995 00b8 03       		.uleb128 0x3
 4996 00b9 0E       		.uleb128 0xe
 4997 00ba 3A       		.uleb128 0x3a
 4998 00bb 0B       		.uleb128 0xb
 4999 00bc 3B       		.uleb128 0x3b
 5000 00bd 0B       		.uleb128 0xb
 5001 00be 27       		.uleb128 0x27
 5002 00bf 19       		.uleb128 0x19
 5003 00c0 11       		.uleb128 0x11
 5004 00c1 01       		.uleb128 0x1
 5005 00c2 12       		.uleb128 0x12
 5006 00c3 06       		.uleb128 0x6
 5007 00c4 40       		.uleb128 0x40
 5008 00c5 18       		.uleb128 0x18
 5009 00c6 9642     		.uleb128 0x2116
 5010 00c8 19       		.uleb128 0x19
 5011 00c9 00       		.byte	0
 5012 00ca 00       		.byte	0
 5013 00cb 11       		.uleb128 0x11
 5014 00cc 2E       		.uleb128 0x2e
 5015 00cd 00       		.byte	0
 5016 00ce 3F       		.uleb128 0x3f
 5017 00cf 19       		.uleb128 0x19
 5018 00d0 03       		.uleb128 0x3
 5019 00d1 0E       		.uleb128 0xe
 5020 00d2 3A       		.uleb128 0x3a
 5021 00d3 0B       		.uleb128 0xb
 5022 00d4 3B       		.uleb128 0x3b
 5023 00d5 0B       		.uleb128 0xb
 5024 00d6 11       		.uleb128 0x11
 5025 00d7 01       		.uleb128 0x1
 5026 00d8 12       		.uleb128 0x12
 5027 00d9 06       		.uleb128 0x6
 5028 00da 40       		.uleb128 0x40
 5029 00db 18       		.uleb128 0x18
 5030 00dc 9642     		.uleb128 0x2116
 5031 00de 19       		.uleb128 0x19
 5032 00df 00       		.byte	0
 5033 00e0 00       		.byte	0
 5034 00e1 12       		.uleb128 0x12
 5035 00e2 2E       		.uleb128 0x2e
 5036 00e3 01       		.byte	0x1
 5037 00e4 3F       		.uleb128 0x3f
 5038 00e5 19       		.uleb128 0x19
 5039 00e6 03       		.uleb128 0x3
 5040 00e7 0E       		.uleb128 0xe
 5041 00e8 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 111


 5042 00e9 0B       		.uleb128 0xb
 5043 00ea 3B       		.uleb128 0x3b
 5044 00eb 0B       		.uleb128 0xb
 5045 00ec 49       		.uleb128 0x49
 5046 00ed 13       		.uleb128 0x13
 5047 00ee 11       		.uleb128 0x11
 5048 00ef 01       		.uleb128 0x1
 5049 00f0 12       		.uleb128 0x12
 5050 00f1 06       		.uleb128 0x6
 5051 00f2 40       		.uleb128 0x40
 5052 00f3 18       		.uleb128 0x18
 5053 00f4 9642     		.uleb128 0x2116
 5054 00f6 19       		.uleb128 0x19
 5055 00f7 01       		.uleb128 0x1
 5056 00f8 13       		.uleb128 0x13
 5057 00f9 00       		.byte	0
 5058 00fa 00       		.byte	0
 5059 00fb 13       		.uleb128 0x13
 5060 00fc 34       		.uleb128 0x34
 5061 00fd 00       		.byte	0
 5062 00fe 03       		.uleb128 0x3
 5063 00ff 0E       		.uleb128 0xe
 5064 0100 3A       		.uleb128 0x3a
 5065 0101 0B       		.uleb128 0xb
 5066 0102 3B       		.uleb128 0x3b
 5067 0103 0B       		.uleb128 0xb
 5068 0104 49       		.uleb128 0x49
 5069 0105 13       		.uleb128 0x13
 5070 0106 02       		.uleb128 0x2
 5071 0107 18       		.uleb128 0x18
 5072 0108 00       		.byte	0
 5073 0109 00       		.byte	0
 5074 010a 14       		.uleb128 0x14
 5075 010b 0B       		.uleb128 0xb
 5076 010c 01       		.byte	0x1
 5077 010d 11       		.uleb128 0x11
 5078 010e 01       		.uleb128 0x1
 5079 010f 12       		.uleb128 0x12
 5080 0110 06       		.uleb128 0x6
 5081 0111 00       		.byte	0
 5082 0112 00       		.byte	0
 5083 0113 15       		.uleb128 0x15
 5084 0114 2E       		.uleb128 0x2e
 5085 0115 01       		.byte	0x1
 5086 0116 3F       		.uleb128 0x3f
 5087 0117 19       		.uleb128 0x19
 5088 0118 03       		.uleb128 0x3
 5089 0119 0E       		.uleb128 0xe
 5090 011a 3A       		.uleb128 0x3a
 5091 011b 0B       		.uleb128 0xb
 5092 011c 3B       		.uleb128 0x3b
 5093 011d 0B       		.uleb128 0xb
 5094 011e 27       		.uleb128 0x27
 5095 011f 19       		.uleb128 0x19
 5096 0120 49       		.uleb128 0x49
 5097 0121 13       		.uleb128 0x13
 5098 0122 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 112


 5099 0123 01       		.uleb128 0x1
 5100 0124 12       		.uleb128 0x12
 5101 0125 06       		.uleb128 0x6
 5102 0126 40       		.uleb128 0x40
 5103 0127 18       		.uleb128 0x18
 5104 0128 9642     		.uleb128 0x2116
 5105 012a 19       		.uleb128 0x19
 5106 012b 01       		.uleb128 0x1
 5107 012c 13       		.uleb128 0x13
 5108 012d 00       		.byte	0
 5109 012e 00       		.byte	0
 5110 012f 16       		.uleb128 0x16
 5111 0130 05       		.uleb128 0x5
 5112 0131 00       		.byte	0
 5113 0132 03       		.uleb128 0x3
 5114 0133 0E       		.uleb128 0xe
 5115 0134 3A       		.uleb128 0x3a
 5116 0135 0B       		.uleb128 0xb
 5117 0136 3B       		.uleb128 0x3b
 5118 0137 0B       		.uleb128 0xb
 5119 0138 49       		.uleb128 0x49
 5120 0139 13       		.uleb128 0x13
 5121 013a 02       		.uleb128 0x2
 5122 013b 18       		.uleb128 0x18
 5123 013c 00       		.byte	0
 5124 013d 00       		.byte	0
 5125 013e 17       		.uleb128 0x17
 5126 013f 34       		.uleb128 0x34
 5127 0140 00       		.byte	0
 5128 0141 03       		.uleb128 0x3
 5129 0142 08       		.uleb128 0x8
 5130 0143 3A       		.uleb128 0x3a
 5131 0144 0B       		.uleb128 0xb
 5132 0145 3B       		.uleb128 0x3b
 5133 0146 0B       		.uleb128 0xb
 5134 0147 49       		.uleb128 0x49
 5135 0148 13       		.uleb128 0x13
 5136 0149 02       		.uleb128 0x2
 5137 014a 18       		.uleb128 0x18
 5138 014b 00       		.byte	0
 5139 014c 00       		.byte	0
 5140 014d 18       		.uleb128 0x18
 5141 014e 2E       		.uleb128 0x2e
 5142 014f 01       		.byte	0x1
 5143 0150 3F       		.uleb128 0x3f
 5144 0151 19       		.uleb128 0x19
 5145 0152 03       		.uleb128 0x3
 5146 0153 0E       		.uleb128 0xe
 5147 0154 3A       		.uleb128 0x3a
 5148 0155 0B       		.uleb128 0xb
 5149 0156 3B       		.uleb128 0x3b
 5150 0157 05       		.uleb128 0x5
 5151 0158 27       		.uleb128 0x27
 5152 0159 19       		.uleb128 0x19
 5153 015a 49       		.uleb128 0x49
 5154 015b 13       		.uleb128 0x13
 5155 015c 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 113


 5156 015d 01       		.uleb128 0x1
 5157 015e 12       		.uleb128 0x12
 5158 015f 06       		.uleb128 0x6
 5159 0160 40       		.uleb128 0x40
 5160 0161 18       		.uleb128 0x18
 5161 0162 9642     		.uleb128 0x2116
 5162 0164 19       		.uleb128 0x19
 5163 0165 01       		.uleb128 0x1
 5164 0166 13       		.uleb128 0x13
 5165 0167 00       		.byte	0
 5166 0168 00       		.byte	0
 5167 0169 19       		.uleb128 0x19
 5168 016a 05       		.uleb128 0x5
 5169 016b 00       		.byte	0
 5170 016c 03       		.uleb128 0x3
 5171 016d 0E       		.uleb128 0xe
 5172 016e 3A       		.uleb128 0x3a
 5173 016f 0B       		.uleb128 0xb
 5174 0170 3B       		.uleb128 0x3b
 5175 0171 05       		.uleb128 0x5
 5176 0172 49       		.uleb128 0x49
 5177 0173 13       		.uleb128 0x13
 5178 0174 02       		.uleb128 0x2
 5179 0175 18       		.uleb128 0x18
 5180 0176 00       		.byte	0
 5181 0177 00       		.byte	0
 5182 0178 1A       		.uleb128 0x1a
 5183 0179 34       		.uleb128 0x34
 5184 017a 00       		.byte	0
 5185 017b 03       		.uleb128 0x3
 5186 017c 08       		.uleb128 0x8
 5187 017d 3A       		.uleb128 0x3a
 5188 017e 0B       		.uleb128 0xb
 5189 017f 3B       		.uleb128 0x3b
 5190 0180 05       		.uleb128 0x5
 5191 0181 49       		.uleb128 0x49
 5192 0182 13       		.uleb128 0x13
 5193 0183 02       		.uleb128 0x2
 5194 0184 18       		.uleb128 0x18
 5195 0185 00       		.byte	0
 5196 0186 00       		.byte	0
 5197 0187 1B       		.uleb128 0x1b
 5198 0188 2E       		.uleb128 0x2e
 5199 0189 01       		.byte	0x1
 5200 018a 3F       		.uleb128 0x3f
 5201 018b 19       		.uleb128 0x19
 5202 018c 03       		.uleb128 0x3
 5203 018d 0E       		.uleb128 0xe
 5204 018e 3A       		.uleb128 0x3a
 5205 018f 0B       		.uleb128 0xb
 5206 0190 3B       		.uleb128 0x3b
 5207 0191 05       		.uleb128 0x5
 5208 0192 49       		.uleb128 0x49
 5209 0193 13       		.uleb128 0x13
 5210 0194 11       		.uleb128 0x11
 5211 0195 01       		.uleb128 0x1
 5212 0196 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 114


 5213 0197 06       		.uleb128 0x6
 5214 0198 40       		.uleb128 0x40
 5215 0199 18       		.uleb128 0x18
 5216 019a 9642     		.uleb128 0x2116
 5217 019c 19       		.uleb128 0x19
 5218 019d 01       		.uleb128 0x1
 5219 019e 13       		.uleb128 0x13
 5220 019f 00       		.byte	0
 5221 01a0 00       		.byte	0
 5222 01a1 1C       		.uleb128 0x1c
 5223 01a2 34       		.uleb128 0x34
 5224 01a3 00       		.byte	0
 5225 01a4 03       		.uleb128 0x3
 5226 01a5 0E       		.uleb128 0xe
 5227 01a6 3A       		.uleb128 0x3a
 5228 01a7 0B       		.uleb128 0xb
 5229 01a8 3B       		.uleb128 0x3b
 5230 01a9 05       		.uleb128 0x5
 5231 01aa 49       		.uleb128 0x49
 5232 01ab 13       		.uleb128 0x13
 5233 01ac 02       		.uleb128 0x2
 5234 01ad 18       		.uleb128 0x18
 5235 01ae 00       		.byte	0
 5236 01af 00       		.byte	0
 5237 01b0 1D       		.uleb128 0x1d
 5238 01b1 2E       		.uleb128 0x2e
 5239 01b2 00       		.byte	0
 5240 01b3 3F       		.uleb128 0x3f
 5241 01b4 19       		.uleb128 0x19
 5242 01b5 03       		.uleb128 0x3
 5243 01b6 0E       		.uleb128 0xe
 5244 01b7 3A       		.uleb128 0x3a
 5245 01b8 0B       		.uleb128 0xb
 5246 01b9 3B       		.uleb128 0x3b
 5247 01ba 05       		.uleb128 0x5
 5248 01bb 11       		.uleb128 0x11
 5249 01bc 01       		.uleb128 0x1
 5250 01bd 12       		.uleb128 0x12
 5251 01be 06       		.uleb128 0x6
 5252 01bf 40       		.uleb128 0x40
 5253 01c0 18       		.uleb128 0x18
 5254 01c1 9642     		.uleb128 0x2116
 5255 01c3 19       		.uleb128 0x19
 5256 01c4 00       		.byte	0
 5257 01c5 00       		.byte	0
 5258 01c6 1E       		.uleb128 0x1e
 5259 01c7 2E       		.uleb128 0x2e
 5260 01c8 00       		.byte	0
 5261 01c9 3F       		.uleb128 0x3f
 5262 01ca 19       		.uleb128 0x19
 5263 01cb 03       		.uleb128 0x3
 5264 01cc 0E       		.uleb128 0xe
 5265 01cd 3A       		.uleb128 0x3a
 5266 01ce 0B       		.uleb128 0xb
 5267 01cf 3B       		.uleb128 0x3b
 5268 01d0 05       		.uleb128 0x5
 5269 01d1 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 115


 5270 01d2 13       		.uleb128 0x13
 5271 01d3 11       		.uleb128 0x11
 5272 01d4 01       		.uleb128 0x1
 5273 01d5 12       		.uleb128 0x12
 5274 01d6 06       		.uleb128 0x6
 5275 01d7 40       		.uleb128 0x40
 5276 01d8 18       		.uleb128 0x18
 5277 01d9 9642     		.uleb128 0x2116
 5278 01db 19       		.uleb128 0x19
 5279 01dc 00       		.byte	0
 5280 01dd 00       		.byte	0
 5281 01de 1F       		.uleb128 0x1f
 5282 01df 2E       		.uleb128 0x2e
 5283 01e0 01       		.byte	0x1
 5284 01e1 3F       		.uleb128 0x3f
 5285 01e2 19       		.uleb128 0x19
 5286 01e3 03       		.uleb128 0x3
 5287 01e4 0E       		.uleb128 0xe
 5288 01e5 3A       		.uleb128 0x3a
 5289 01e6 0B       		.uleb128 0xb
 5290 01e7 3B       		.uleb128 0x3b
 5291 01e8 05       		.uleb128 0x5
 5292 01e9 11       		.uleb128 0x11
 5293 01ea 01       		.uleb128 0x1
 5294 01eb 12       		.uleb128 0x12
 5295 01ec 06       		.uleb128 0x6
 5296 01ed 40       		.uleb128 0x40
 5297 01ee 18       		.uleb128 0x18
 5298 01ef 9642     		.uleb128 0x2116
 5299 01f1 19       		.uleb128 0x19
 5300 01f2 01       		.uleb128 0x1
 5301 01f3 13       		.uleb128 0x13
 5302 01f4 00       		.byte	0
 5303 01f5 00       		.byte	0
 5304 01f6 20       		.uleb128 0x20
 5305 01f7 2E       		.uleb128 0x2e
 5306 01f8 00       		.byte	0
 5307 01f9 3F       		.uleb128 0x3f
 5308 01fa 19       		.uleb128 0x19
 5309 01fb 03       		.uleb128 0x3
 5310 01fc 0E       		.uleb128 0xe
 5311 01fd 3A       		.uleb128 0x3a
 5312 01fe 0B       		.uleb128 0xb
 5313 01ff 3B       		.uleb128 0x3b
 5314 0200 05       		.uleb128 0x5
 5315 0201 11       		.uleb128 0x11
 5316 0202 01       		.uleb128 0x1
 5317 0203 12       		.uleb128 0x12
 5318 0204 06       		.uleb128 0x6
 5319 0205 40       		.uleb128 0x40
 5320 0206 18       		.uleb128 0x18
 5321 0207 9742     		.uleb128 0x2117
 5322 0209 19       		.uleb128 0x19
 5323 020a 00       		.byte	0
 5324 020b 00       		.byte	0
 5325 020c 21       		.uleb128 0x21
 5326 020d 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 116


 5327 020e 00       		.byte	0
 5328 020f 3F       		.uleb128 0x3f
 5329 0210 19       		.uleb128 0x19
 5330 0211 03       		.uleb128 0x3
 5331 0212 0E       		.uleb128 0xe
 5332 0213 3A       		.uleb128 0x3a
 5333 0214 0B       		.uleb128 0xb
 5334 0215 3B       		.uleb128 0x3b
 5335 0216 05       		.uleb128 0x5
 5336 0217 49       		.uleb128 0x49
 5337 0218 13       		.uleb128 0x13
 5338 0219 11       		.uleb128 0x11
 5339 021a 01       		.uleb128 0x1
 5340 021b 12       		.uleb128 0x12
 5341 021c 06       		.uleb128 0x6
 5342 021d 40       		.uleb128 0x40
 5343 021e 18       		.uleb128 0x18
 5344 021f 9742     		.uleb128 0x2117
 5345 0221 19       		.uleb128 0x19
 5346 0222 00       		.byte	0
 5347 0223 00       		.byte	0
 5348 0224 22       		.uleb128 0x22
 5349 0225 34       		.uleb128 0x34
 5350 0226 00       		.byte	0
 5351 0227 03       		.uleb128 0x3
 5352 0228 0E       		.uleb128 0xe
 5353 0229 3A       		.uleb128 0x3a
 5354 022a 0B       		.uleb128 0xb
 5355 022b 3B       		.uleb128 0x3b
 5356 022c 05       		.uleb128 0x5
 5357 022d 49       		.uleb128 0x49
 5358 022e 13       		.uleb128 0x13
 5359 022f 3F       		.uleb128 0x3f
 5360 0230 19       		.uleb128 0x19
 5361 0231 3C       		.uleb128 0x3c
 5362 0232 19       		.uleb128 0x19
 5363 0233 00       		.byte	0
 5364 0234 00       		.byte	0
 5365 0235 23       		.uleb128 0x23
 5366 0236 34       		.uleb128 0x34
 5367 0237 00       		.byte	0
 5368 0238 03       		.uleb128 0x3
 5369 0239 0E       		.uleb128 0xe
 5370 023a 3A       		.uleb128 0x3a
 5371 023b 0B       		.uleb128 0xb
 5372 023c 3B       		.uleb128 0x3b
 5373 023d 0B       		.uleb128 0xb
 5374 023e 49       		.uleb128 0x49
 5375 023f 13       		.uleb128 0x13
 5376 0240 3F       		.uleb128 0x3f
 5377 0241 19       		.uleb128 0x19
 5378 0242 02       		.uleb128 0x2
 5379 0243 18       		.uleb128 0x18
 5380 0244 00       		.byte	0
 5381 0245 00       		.byte	0
 5382 0246 24       		.uleb128 0x24
 5383 0247 21       		.uleb128 0x21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 117


 5384 0248 00       		.byte	0
 5385 0249 49       		.uleb128 0x49
 5386 024a 13       		.uleb128 0x13
 5387 024b 2F       		.uleb128 0x2f
 5388 024c 05       		.uleb128 0x5
 5389 024d 00       		.byte	0
 5390 024e 00       		.byte	0
 5391 024f 25       		.uleb128 0x25
 5392 0250 34       		.uleb128 0x34
 5393 0251 00       		.byte	0
 5394 0252 03       		.uleb128 0x3
 5395 0253 08       		.uleb128 0x8
 5396 0254 3A       		.uleb128 0x3a
 5397 0255 0B       		.uleb128 0xb
 5398 0256 3B       		.uleb128 0x3b
 5399 0257 0B       		.uleb128 0xb
 5400 0258 49       		.uleb128 0x49
 5401 0259 13       		.uleb128 0x13
 5402 025a 3F       		.uleb128 0x3f
 5403 025b 19       		.uleb128 0x19
 5404 025c 02       		.uleb128 0x2
 5405 025d 18       		.uleb128 0x18
 5406 025e 00       		.byte	0
 5407 025f 00       		.byte	0
 5408 0260 00       		.byte	0
 5409              		.section	.debug_aranges,"",%progbits
 5410 0000 D4000000 		.4byte	0xd4
 5411 0004 0200     		.2byte	0x2
 5412 0006 00000000 		.4byte	.Ldebug_info0
 5413 000a 04       		.byte	0x4
 5414 000b 00       		.byte	0
 5415 000c 0000     		.2byte	0
 5416 000e 0000     		.2byte	0
 5417 0010 00000000 		.4byte	.LFB64
 5418 0014 44000000 		.4byte	.LFE64-.LFB64
 5419 0018 00000000 		.4byte	.LFB65
 5420 001c 6C000000 		.4byte	.LFE65-.LFB65
 5421 0020 00000000 		.4byte	.LFB66
 5422 0024 32000000 		.4byte	.LFE66-.LFB66
 5423 0028 00000000 		.4byte	.LFB67
 5424 002c 20000000 		.4byte	.LFE67-.LFB67
 5425 0030 00000000 		.4byte	.LFB68
 5426 0034 40000000 		.4byte	.LFE68-.LFB68
 5427 0038 00000000 		.4byte	.LFB69
 5428 003c DC000000 		.4byte	.LFE69-.LFB69
 5429 0040 00000000 		.4byte	.LFB70
 5430 0044 1C000000 		.4byte	.LFE70-.LFB70
 5431 0048 00000000 		.4byte	.LFB71
 5432 004c 28000000 		.4byte	.LFE71-.LFB71
 5433 0050 00000000 		.4byte	.LFB72
 5434 0054 C8000000 		.4byte	.LFE72-.LFB72
 5435 0058 00000000 		.4byte	.LFB73
 5436 005c 00010000 		.4byte	.LFE73-.LFB73
 5437 0060 00000000 		.4byte	.LFB74
 5438 0064 78000000 		.4byte	.LFE74-.LFB74
 5439 0068 00000000 		.4byte	.LFB75
 5440 006c 74010000 		.4byte	.LFE75-.LFB75
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 118


 5441 0070 00000000 		.4byte	.LFB76
 5442 0074 B8000000 		.4byte	.LFE76-.LFB76
 5443 0078 00000000 		.4byte	.LFB77
 5444 007c 1C000000 		.4byte	.LFE77-.LFB77
 5445 0080 00000000 		.4byte	.LFB78
 5446 0084 28000000 		.4byte	.LFE78-.LFB78
 5447 0088 00000000 		.4byte	.LFB79
 5448 008c 84000000 		.4byte	.LFE79-.LFB79
 5449 0090 00000000 		.4byte	.LFB80
 5450 0094 3C000000 		.4byte	.LFE80-.LFB80
 5451 0098 00000000 		.4byte	.LFB81
 5452 009c 68040000 		.4byte	.LFE81-.LFB81
 5453 00a0 00000000 		.4byte	.LFB82
 5454 00a4 68010000 		.4byte	.LFE82-.LFB82
 5455 00a8 00000000 		.4byte	.LFB83
 5456 00ac 44010000 		.4byte	.LFE83-.LFB83
 5457 00b0 00000000 		.4byte	.LFB84
 5458 00b4 14000000 		.4byte	.LFE84-.LFB84
 5459 00b8 00000000 		.4byte	.LFB85
 5460 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5461 00c0 00000000 		.4byte	.LFB86
 5462 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5463 00c8 00000000 		.4byte	.LFB87
 5464 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5465 00d0 00000000 		.4byte	0
 5466 00d4 00000000 		.4byte	0
 5467              		.section	.debug_ranges,"",%progbits
 5468              	.Ldebug_ranges0:
 5469 0000 00000000 		.4byte	.LFB64
 5470 0004 44000000 		.4byte	.LFE64
 5471 0008 00000000 		.4byte	.LFB65
 5472 000c 6C000000 		.4byte	.LFE65
 5473 0010 00000000 		.4byte	.LFB66
 5474 0014 32000000 		.4byte	.LFE66
 5475 0018 00000000 		.4byte	.LFB67
 5476 001c 20000000 		.4byte	.LFE67
 5477 0020 00000000 		.4byte	.LFB68
 5478 0024 40000000 		.4byte	.LFE68
 5479 0028 00000000 		.4byte	.LFB69
 5480 002c DC000000 		.4byte	.LFE69
 5481 0030 00000000 		.4byte	.LFB70
 5482 0034 1C000000 		.4byte	.LFE70
 5483 0038 00000000 		.4byte	.LFB71
 5484 003c 28000000 		.4byte	.LFE71
 5485 0040 00000000 		.4byte	.LFB72
 5486 0044 C8000000 		.4byte	.LFE72
 5487 0048 00000000 		.4byte	.LFB73
 5488 004c 00010000 		.4byte	.LFE73
 5489 0050 00000000 		.4byte	.LFB74
 5490 0054 78000000 		.4byte	.LFE74
 5491 0058 00000000 		.4byte	.LFB75
 5492 005c 74010000 		.4byte	.LFE75
 5493 0060 00000000 		.4byte	.LFB76
 5494 0064 B8000000 		.4byte	.LFE76
 5495 0068 00000000 		.4byte	.LFB77
 5496 006c 1C000000 		.4byte	.LFE77
 5497 0070 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 119


 5498 0074 28000000 		.4byte	.LFE78
 5499 0078 00000000 		.4byte	.LFB79
 5500 007c 84000000 		.4byte	.LFE79
 5501 0080 00000000 		.4byte	.LFB80
 5502 0084 3C000000 		.4byte	.LFE80
 5503 0088 00000000 		.4byte	.LFB81
 5504 008c 68040000 		.4byte	.LFE81
 5505 0090 00000000 		.4byte	.LFB82
 5506 0094 68010000 		.4byte	.LFE82
 5507 0098 00000000 		.4byte	.LFB83
 5508 009c 44010000 		.4byte	.LFE83
 5509 00a0 00000000 		.4byte	.LFB84
 5510 00a4 14000000 		.4byte	.LFE84
 5511 00a8 00000000 		.4byte	.LFB85
 5512 00ac 1A000000 		.4byte	.LFE85
 5513 00b0 00000000 		.4byte	.LFB86
 5514 00b4 2A000000 		.4byte	.LFE86
 5515 00b8 00000000 		.4byte	.LFB87
 5516 00bc 7C020000 		.4byte	.LFE87
 5517 00c0 00000000 		.4byte	0
 5518 00c4 00000000 		.4byte	0
 5519              		.section	.debug_line,"",%progbits
 5520              	.Ldebug_line0:
 5521 0000 C4050000 		.section	.debug_str,"MS",%progbits,1
 5521      02000E02 
 5521      00000201 
 5521      FB0E0D00 
 5521      01010101 
 5522              	.LASF139:
 5523 0000 676D745F 		.ascii	"gmt_offset\000"
 5523      6F666673 
 5523      657400
 5524              	.LASF16:
 5525 000b 75696E74 		.ascii	"uint16\000"
 5525      313600
 5526              	.LASF38:
 5527 0012 76616C75 		.ascii	"value\000"
 5527      6500
 5528              	.LASF27:
 5529 0018 746D5F68 		.ascii	"tm_hour\000"
 5529      6F757200 
 5530              	.LASF32:
 5531 0020 746D5F79 		.ascii	"tm_yday\000"
 5531      64617900 
 5532              	.LASF177:
 5533 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5533      73657273 
 5533      5C64616E 
 5533      747A5C44 
 5533      6F63756D 
 5534 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5534      2E637964 
 5534      736E00
 5535              	.LASF147:
 5536 0060 62756666 		.ascii	"buffer_overflow\000"
 5536      65725F6F 
 5536      76657266 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 120


 5536      6C6F7700 
 5537              	.LASF4:
 5538 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5538      6E74385F 
 5538      7400
 5539              	.LASF71:
 5540 007a 636F756E 		.ascii	"countDownResetCondition\000"
 5540      74446F77 
 5540      6E526573 
 5540      6574436F 
 5540      6E646974 
 5541              	.LASF54:
 5542 0092 6C6F6E67 		.ascii	"longitude\000"
 5542      69747564 
 5542      6500
 5543              	.LASF175:
 5544 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5544      43313120 
 5544      352E342E 
 5544      31203230 
 5544      31363036 
 5545 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5545      20726576 
 5545      6973696F 
 5545      6E203233 
 5545      37373135 
 5546 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5546      66756E63 
 5546      74696F6E 
 5546      2D736563 
 5546      74696F6E 
 5547              	.LASF142:
 5548 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5548      6D5F7761 
 5548      6B657570 
 5548      00
 5549              	.LASF10:
 5550 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5550      206C6F6E 
 5550      6720756E 
 5550      7369676E 
 5550      65642069 
 5551              	.LASF124:
 5552 014e 73616D70 		.ascii	"sample_freq\000"
 5552      6C655F66 
 5552      72657100 
 5553              	.LASF151:
 5554 015a 6D6F6465 		.ascii	"modem_state\000"
 5554      6D5F7374 
 5554      61746500 
 5555              	.LASF98:
 5556 0166 74657374 		.ascii	"test\000"
 5556      00
 5557              	.LASF164:
 5558 016b 616C6172 		.ascii	"alarmMeasure\000"
 5558      6D4D6561 
 5558      73757265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 121


 5558      00
 5559              	.LASF146:
 5560 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5560      52784275 
 5560      66666572 
 5560      00
 5561              	.LASF172:
 5562 0185 74696D65 		.ascii	"timetoLevelSensor\000"
 5562      746F4C65 
 5562      76656C53 
 5562      656E736F 
 5562      7200
 5563              	.LASF153:
 5564 0197 6D6F6465 		.ascii	"modem_stats\000"
 5564      6D5F7374 
 5564      61747300 
 5565              	.LASF9:
 5566 01a3 6C6F6E67 		.ascii	"long long int\000"
 5566      206C6F6E 
 5566      6720696E 
 5566      7400
 5567              	.LASF0:
 5568 01b1 7369676E 		.ascii	"signed char\000"
 5568      65642063 
 5568      68617200 
 5569              	.LASF47:
 5570 01bd 65636E6F 		.ascii	"ecno\000"
 5570      00
 5571              	.LASF68:
 5572 01c2 636F756E 		.ascii	"countDownValue\000"
 5572      74446F77 
 5572      6E56616C 
 5572      756500
 5573              	.LASF165:
 5574 01d1 74696D65 		.ascii	"timeToMeasure\000"
 5574      546F4D65 
 5574      61737572 
 5574      6500
 5575              	.LASF50:
 5576 01df 74696D65 		.ascii	"time_to_network_connect\000"
 5576      5F746F5F 
 5576      6E657477 
 5576      6F726B5F 
 5576      636F6E6E 
 5577              	.LASF167:
 5578 01f7 74696D65 		.ascii	"timeToSync\000"
 5578      546F5379 
 5578      6E6300
 5579              	.LASF160:
 5580 0202 68747470 		.ascii	"http_body\000"
 5580      5F626F64 
 5580      7900
 5581              	.LASF109:
 5582 020c 7365745F 		.ascii	"set_up_internet_connection\000"
 5582      75705F69 
 5582      6E746572 
 5582      6E65745F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 122


 5582      636F6E6E 
 5583              	.LASF138:
 5584 0227 7365636F 		.ascii	"second\000"
 5584      6E6400
 5585              	.LASF134:
 5586 022e 79656172 		.ascii	"year\000"
 5586      00
 5587              	.LASF129:
 5588 0233 74656D70 		.ascii	"temp\000"
 5588      00
 5589              	.LASF6:
 5590 0238 6C6F6E67 		.ascii	"long int\000"
 5590      20696E74 
 5590      00
 5591              	.LASF45:
 5592 0241 72786C65 		.ascii	"rxlev\000"
 5592      7600
 5593              	.LASF69:
 5594 0247 63757272 		.ascii	"currentCountDownValue\000"
 5594      656E7443 
 5594      6F756E74 
 5594      446F776E 
 5594      56616C75 
 5595              	.LASF140:
 5596 025d 6D6F6465 		.ascii	"modem_get_state\000"
 5596      6D5F6765 
 5596      745F7374 
 5596      61746500 
 5597              	.LASF55:
 5598 026d 616C7469 		.ascii	"altitude\000"
 5598      74756465 
 5598      00
 5599              	.LASF15:
 5600 0276 75696E74 		.ascii	"uint8\000"
 5600      3800
 5601              	.LASF128:
 5602 027c 6C657665 		.ascii	"level_sensor_freq\000"
 5602      6C5F7365 
 5602      6E736F72 
 5602      5F667265 
 5602      7100
 5603              	.LASF170:
 5604 028e 74696D65 		.ascii	"timeToAppLED\000"
 5604      546F4170 
 5604      704C4544 
 5604      00
 5605              	.LASF19:
 5606 029b 696E7433 		.ascii	"int32\000"
 5606      3200
 5607              	.LASF59:
 5608 02a1 6E6F6465 		.ascii	"node_type\000"
 5608      5F747970 
 5608      6500
 5609              	.LASF130:
 5610 02ab 6D6F6465 		.ascii	"modem_configure_settings\000"
 5610      6D5F636F 
 5610      6E666967 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 123


 5610      7572655F 
 5610      73657474 
 5611              	.LASF117:
 5612 02c4 735F7369 		.ascii	"s_sim_type\000"
 5612      6D5F7479 
 5612      706500
 5613              	.LASF99:
 5614 02cf 6E657477 		.ascii	"network_time\000"
 5614      6F726B5F 
 5614      74696D65 
 5614      00
 5615              	.LASF3:
 5616 02dc 73686F72 		.ascii	"short unsigned int\000"
 5616      7420756E 
 5616      7369676E 
 5616      65642069 
 5616      6E7400
 5617              	.LASF17:
 5618 02ef 75696E74 		.ascii	"uint32\000"
 5618      333200
 5619              	.LASF95:
 5620 02f6 696E7465 		.ascii	"interval\000"
 5620      7276616C 
 5620      00
 5621              	.LASF7:
 5622 02ff 5F5F7569 		.ascii	"__uint32_t\000"
 5622      6E743332 
 5622      5F7400
 5623              	.LASF132:
 5624 030a 6D6F6465 		.ascii	"modem_get_network_time\000"
 5624      6D5F6765 
 5624      745F6E65 
 5624      74776F72 
 5624      6B5F7469 
 5625              	.LASF29:
 5626 0321 746D5F6D 		.ascii	"tm_mon\000"
 5626      6F6E00
 5627              	.LASF122:
 5628 0328 735F6C65 		.ascii	"s_level_sensor\000"
 5628      76656C5F 
 5628      73656E73 
 5628      6F7200
 5629              	.LASF63:
 5630 0337 64656275 		.ascii	"debug_level\000"
 5630      675F6C65 
 5630      76656C00 
 5631              	.LASF141:
 5632 0343 6D6F6465 		.ascii	"modem_sleep\000"
 5632      6D5F736C 
 5632      65657000 
 5633              	.LASF120:
 5634 034f 735F6465 		.ascii	"s_debug_freq\000"
 5634      6275675F 
 5634      66726571 
 5634      00
 5635              	.LASF113:
 5636 035c 75706461 		.ascii	"updatable_parameters_initialize\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 124


 5636      7461626C 
 5636      655F7061 
 5636      72616D65 
 5636      74657273 
 5637              	.LASF30:
 5638 037c 746D5F79 		.ascii	"tm_year\000"
 5638      65617200 
 5639              	.LASF166:
 5640 0384 616C6172 		.ascii	"alarmSync\000"
 5640      6D53796E 
 5640      6300
 5641              	.LASF157:
 5642 038e 4170705F 		.ascii	"App_LED_enabled\000"
 5642      4C45445F 
 5642      656E6162 
 5642      6C656400 
 5643              	.LASF40:
 5644 039e 6B65795F 		.ascii	"key_value_t\000"
 5644      76616C75 
 5644      655F7400 
 5645              	.LASF86:
 5646 03aa 7077725F 		.ascii	"pwr_check\000"
 5646      63686563 
 5646      6B00
 5647              	.LASF8:
 5648 03b4 6C6F6E67 		.ascii	"long unsigned int\000"
 5648      20756E73 
 5648      69676E65 
 5648      6420696E 
 5648      7400
 5649              	.LASF101:
 5650 03c6 65787472 		.ascii	"extract_string\000"
 5650      6163745F 
 5650      73747269 
 5650      6E6700
 5651              	.LASF91:
 5652 03d5 74696D65 		.ascii	"timeout\000"
 5652      6F757400 
 5653              	.LASF114:
 5654 03dd 6765745F 		.ascii	"get_cell_network_stats\000"
 5654      63656C6C 
 5654      5F6E6574 
 5654      776F726B 
 5654      5F737461 
 5655              	.LASF39:
 5656 03f4 74696D65 		.ascii	"timeStamp\000"
 5656      5374616D 
 5656      7000
 5657              	.LASF56:
 5658 03fe 74696D65 		.ascii	"time_to_lock\000"
 5658      5F746F5F 
 5658      6C6F636B 
 5658      00
 5659              	.LASF150:
 5660 040b 64617461 		.ascii	"data\000"
 5660      00
 5661              	.LASF77:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 125


 5662 0410 65705F70 		.ascii	"ep_port\000"
 5662      6F727400 
 5663              	.LASF33:
 5664 0418 746D5F69 		.ascii	"tm_isdst\000"
 5664      73647374 
 5664      00
 5665              	.LASF73:
 5666 0421 6D6F6465 		.ascii	"modem_info\000"
 5666      6D5F696E 
 5666      666F00
 5667              	.LASF76:
 5668 042c 65705F68 		.ascii	"ep_host\000"
 5668      6F737400 
 5669              	.LASF74:
 5670 0434 63686970 		.ascii	"chip_uniqueId\000"
 5670      5F756E69 
 5670      71756549 
 5670      6400
 5671              	.LASF96:
 5672 0442 6D6F6465 		.ascii	"modem_power_up\000"
 5672      6D5F706F 
 5672      7765725F 
 5672      757000
 5673              	.LASF176:
 5674 0451 6D6F6465 		.ascii	"modem.c\000"
 5674      6D2E6300 
 5675              	.LASF103:
 5676 0459 62656769 		.ascii	"beginMarker\000"
 5676      6E4D6172 
 5676      6B657200 
 5677              	.LASF105:
 5678 0465 74617267 		.ascii	"target\000"
 5678      657400
 5679              	.LASF51:
 5680 046c 74696D65 		.ascii	"time_to_acquire_ip\000"
 5680      5F746F5F 
 5680      61637175 
 5680      6972655F 
 5680      697000
 5681              	.LASF104:
 5682 047f 656E644D 		.ascii	"endMarker\000"
 5682      61726B65 
 5682      7200
 5683              	.LASF2:
 5684 0489 73686F72 		.ascii	"short int\000"
 5684      7420696E 
 5684      7400
 5685              	.LASF133:
 5686 0493 65706F63 		.ascii	"epoch_time\000"
 5686      685F7469 
 5686      6D6500
 5687              	.LASF5:
 5688 049e 5F5F696E 		.ascii	"__int32_t\000"
 5688      7433325F 
 5688      7400
 5689              	.LASF169:
 5690 04a8 616C6172 		.ascii	"alarmAppLED\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 126


 5690      6D417070 
 5690      4C454400 
 5691              	.LASF102:
 5692 04b4 66726F6D 		.ascii	"from\000"
 5692      00
 5693              	.LASF108:
 5694 04b9 63726567 		.ascii	"creg\000"
 5694      00
 5695              	.LASF126:
 5696 04be 64656275 		.ascii	"debug_freq\000"
 5696      675F6672 
 5696      657100
 5697              	.LASF92:
 5698 04c9 61745F61 		.ascii	"at_attempt\000"
 5698      7474656D 
 5698      707400
 5699              	.LASF100:
 5700 04d4 61745F77 		.ascii	"at_write_command\000"
 5700      72697465 
 5700      5F636F6D 
 5700      6D616E64 
 5700      00
 5701              	.LASF75:
 5702 04e5 7379735F 		.ascii	"sys_info_t\000"
 5702      696E666F 
 5702      5F7400
 5703              	.LASF67:
 5704 04f0 75706461 		.ascii	"updatable_parameters_t\000"
 5704      7461626C 
 5704      655F7061 
 5704      72616D65 
 5704      74657273 
 5705              	.LASF125:
 5706 0507 7265706F 		.ascii	"report_freq\000"
 5706      72745F66 
 5706      72657100 
 5707              	.LASF148:
 5708 0513 64617461 		.ascii	"dataPointsInStack\000"
 5708      506F696E 
 5708      7473496E 
 5708      53746163 
 5708      6B00
 5709              	.LASF26:
 5710 0525 746D5F6D 		.ascii	"tm_min\000"
 5710      696E00
 5711              	.LASF24:
 5712 052c 73697A65 		.ascii	"sizetype\000"
 5712      74797065 
 5712      00
 5713              	.LASF135:
 5714 0535 6D6F6E74 		.ascii	"month\000"
 5714      6800
 5715              	.LASF107:
 5716 053b 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5716      6F6E6E65 
 5716      63746564 
 5716      5F746F5F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 127


 5716      63656C6C 
 5717              	.LASF173:
 5718 0558 75617274 		.ascii	"uart_received_string\000"
 5718      5F726563 
 5718      65697665 
 5718      645F7374 
 5718      72696E67 
 5719              	.LASF53:
 5720 056d 6C617469 		.ascii	"latitude\000"
 5720      74756465 
 5720      00
 5721              	.LASF34:
 5722 0576 74657374 		.ascii	"test_name\000"
 5722      5F6E616D 
 5722      6500
 5723              	.LASF168:
 5724 0580 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5724      546F5379 
 5724      636E5265 
 5724      6D6F7465 
 5724      50617261 
 5725              	.LASF97:
 5726 0597 6D6F6465 		.ascii	"modem_test\000"
 5726      6D5F7465 
 5726      737400
 5727              	.LASF112:
 5728 05a2 6D617463 		.ascii	"match\000"
 5728      6800
 5729              	.LASF154:
 5730 05a8 75706461 		.ascii	"updatable_parameters\000"
 5730      7461626C 
 5730      655F7061 
 5730      72616D65 
 5730      74657273 
 5731              	.LASF136:
 5732 05bd 686F7572 		.ascii	"hour\000"
 5732      00
 5733              	.LASF89:
 5734 05c2 636F6D6D 		.ascii	"commands\000"
 5734      616E6473 
 5734      00
 5735              	.LASF93:
 5736 05cb 636F6D70 		.ascii	"compare_location\000"
 5736      6172655F 
 5736      6C6F6361 
 5736      74696F6E 
 5736      00
 5737              	.LASF20:
 5738 05dc 666C6F61 		.ascii	"float\000"
 5738      7400
 5739              	.LASF79:
 5740 05e2 6D6F6465 		.ascii	"modem_initialize\000"
 5740      6D5F696E 
 5740      69746961 
 5740      6C697A65 
 5740      00
 5741              	.LASF119:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 128


 5742 05f3 735F7265 		.ascii	"s_report_freq\000"
 5742      706F7274 
 5742      5F667265 
 5742      7100
 5743              	.LASF123:
 5744 0601 735F6170 		.ascii	"s_apps_enabled\000"
 5744      70735F65 
 5744      6E61626C 
 5744      656400
 5745              	.LASF60:
 5746 0610 73696D5F 		.ascii	"sim_type\000"
 5746      74797065 
 5746      00
 5747              	.LASF110:
 5748 0619 6973725F 		.ascii	"isr_telit_rx\000"
 5748      74656C69 
 5748      745F7278 
 5748      00
 5749              	.LASF72:
 5750 0626 616C6172 		.ascii	"alarm\000"
 5750      6D00
 5751              	.LASF66:
 5752 062c 5F426F6F 		.ascii	"_Bool\000"
 5752      6C00
 5753              	.LASF13:
 5754 0632 696E7433 		.ascii	"int32_t\000"
 5754      325F7400 
 5755              	.LASF1:
 5756 063a 756E7369 		.ascii	"unsigned char\000"
 5756      676E6564 
 5756      20636861 
 5756      7200
 5757              	.LASF163:
 5758 0648 73797374 		.ascii	"system_settings\000"
 5758      656D5F73 
 5758      65747469 
 5758      6E677300 
 5759              	.LASF94:
 5760 0658 64656C61 		.ascii	"delay\000"
 5760      7900
 5761              	.LASF48:
 5762 065e 72737271 		.ascii	"rsrq\000"
 5762      00
 5763              	.LASF62:
 5764 0663 73796E63 		.ascii	"sync_time\000"
 5764      5F74696D 
 5764      6500
 5765              	.LASF116:
 5766 066d 735F6E6F 		.ascii	"s_node_type\000"
 5766      64655F74 
 5766      79706500 
 5767              	.LASF46:
 5768 0679 72736370 		.ascii	"rscp\000"
 5768      00
 5769              	.LASF143:
 5770 067e 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5770      6D5F6765 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 129


 5770      745F6770 
 5770      735F636F 
 5770      6F726469 
 5771              	.LASF37:
 5772 0698 74657374 		.ascii	"test_t\000"
 5772      5F7400
 5773              	.LASF162:
 5774 069f 73797374 		.ascii	"system_info\000"
 5774      656D5F69 
 5774      6E666F00 
 5775              	.LASF43:
 5776 06ab 696D6569 		.ascii	"imei\000"
 5776      00
 5777              	.LASF36:
 5778 06b0 72656173 		.ascii	"reason\000"
 5778      6F6E00
 5779              	.LASF49:
 5780 06b7 72737270 		.ascii	"rsrp\000"
 5780      00
 5781              	.LASF52:
 5782 06bc 6D6F6465 		.ascii	"modem_stats_t\000"
 5782      6D5F7374 
 5782      6174735F 
 5782      7400
 5783              	.LASF88:
 5784 06ca 75617274 		.ascii	"uart_string_reset\000"
 5784      5F737472 
 5784      696E675F 
 5784      72657365 
 5784      7400
 5785              	.LASF171:
 5786 06dc 616C6172 		.ascii	"alarmLevelSensor\000"
 5786      6D4C6576 
 5786      656C5365 
 5786      6E736F72 
 5786      00
 5787              	.LASF31:
 5788 06ed 746D5F77 		.ascii	"tm_wday\000"
 5788      64617900 
 5789              	.LASF87:
 5790 06f5 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5790      6D5F736F 
 5790      66745F70 
 5790      6F776572 
 5790      5F637963 
 5791              	.LASF65:
 5792 070c 4C657665 		.ascii	"Level_Sensor_freq\000"
 5792      6C5F5365 
 5792      6E736F72 
 5792      5F667265 
 5792      7100
 5793              	.LASF155:
 5794 071e 6C657665 		.ascii	"level_sensor_inbox\000"
 5794      6C5F7365 
 5794      6E736F72 
 5794      5F696E62 
 5794      6F7800
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 130


 5795              	.LASF23:
 5796 0731 6C6F6E67 		.ascii	"long double\000"
 5796      20646F75 
 5796      626C6500 
 5797              	.LASF22:
 5798 073d 63686172 		.ascii	"char\000"
 5798      00
 5799              	.LASF106:
 5800 0742 6D6F6465 		.ascii	"modem_process_tasks\000"
 5800      6D5F7072 
 5800      6F636573 
 5800      735F7461 
 5800      736B7300 
 5801              	.LASF11:
 5802 0756 756E7369 		.ascii	"unsigned int\000"
 5802      676E6564 
 5802      20696E74 
 5802      00
 5803              	.LASF131:
 5804 0763 4346554E 		.ascii	"CFUN\000"
 5804      00
 5805              	.LASF42:
 5806 0768 6D6F6465 		.ascii	"model_id\000"
 5806      6C5F6964 
 5806      00
 5807              	.LASF161:
 5808 0771 68747470 		.ascii	"http_route\000"
 5808      5F726F75 
 5808      746500
 5809              	.LASF44:
 5810 077c 6D6F6465 		.ascii	"modem_info_t\000"
 5810      6D5F696E 
 5810      666F5F74 
 5810      00
 5811              	.LASF58:
 5812 0789 6770735F 		.ascii	"gps_t\000"
 5812      7400
 5813              	.LASF174:
 5814 078f 75617274 		.ascii	"uart_string_index\000"
 5814      5F737472 
 5814      696E675F 
 5814      696E6465 
 5814      7800
 5815              	.LASF61:
 5816 07a1 6D656173 		.ascii	"measure_time\000"
 5816      7572655F 
 5816      74696D65 
 5816      00
 5817              	.LASF111:
 5818 07ae 69735F63 		.ascii	"is_connected_to_internet\000"
 5818      6F6E6E65 
 5818      63746564 
 5818      5F746F5F 
 5818      696E7465 
 5819              	.LASF152:
 5820 07c7 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5820      6D5F7374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 131


 5820      6172745F 
 5820      74696D65 
 5820      5F737461 
 5821              	.LASF145:
 5822 07de 6770735F 		.ascii	"gps_status\000"
 5822      73746174 
 5822      757300
 5823              	.LASF80:
 5824 07e9 70696E73 		.ascii	"pins_configure_inactive\000"
 5824      5F636F6E 
 5824      66696775 
 5824      72655F69 
 5824      6E616374 
 5825              	.LASF121:
 5826 0801 735F6170 		.ascii	"s_app_led\000"
 5826      705F6C65 
 5826      6400
 5827              	.LASF41:
 5828 080b 73696D5F 		.ascii	"sim_id\000"
 5828      696400
 5829              	.LASF28:
 5830 0812 746D5F6D 		.ascii	"tm_mday\000"
 5830      64617900 
 5831              	.LASF57:
 5832 081a 76616C69 		.ascii	"valid\000"
 5832      6400
 5833              	.LASF81:
 5834 0820 70696E73 		.ascii	"pins_configure_active\000"
 5834      5F636F6E 
 5834      66696775 
 5834      72655F61 
 5834      63746976 
 5835              	.LASF137:
 5836 0836 6D696E75 		.ascii	"minute\000"
 5836      746500
 5837              	.LASF14:
 5838 083d 75696E74 		.ascii	"uint32_t\000"
 5838      33325F74 
 5838      00
 5839              	.LASF25:
 5840 0846 746D5F73 		.ascii	"tm_sec\000"
 5840      656300
 5841              	.LASF115:
 5842 084d 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5842      75706461 
 5842      7465645F 
 5842      70617261 
 5842      6D657465 
 5843              	.LASF118:
 5844 0870 735F7361 		.ascii	"s_sample_freq\000"
 5844      6D706C65 
 5844      5F667265 
 5844      7100
 5845              	.LASF35:
 5846 087e 73746174 		.ascii	"status\000"
 5846      757300
 5847              	.LASF156:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 132


 5848 0885 6C657665 		.ascii	"level_sensor_enabled\000"
 5848      6C5F7365 
 5848      6E736F72 
 5848      5F656E61 
 5848      626C6564 
 5849              	.LASF149:
 5850 089a 64617461 		.ascii	"dataPointsInStackDesired\000"
 5850      506F696E 
 5850      7473496E 
 5850      53746163 
 5850      6B446573 
 5851              	.LASF64:
 5852 08b3 4170705F 		.ascii	"App_LED_freq\000"
 5852      4C45445F 
 5852      66726571 
 5852      00
 5853              	.LASF78:
 5854 08c0 7379735F 		.ascii	"sys_settings_t\000"
 5854      73657474 
 5854      696E6773 
 5854      5F7400
 5855              	.LASF12:
 5856 08cf 75696E74 		.ascii	"uint8_t\000"
 5856      385F7400 
 5857              	.LASF18:
 5858 08d7 696E7431 		.ascii	"int16\000"
 5858      3600
 5859              	.LASF83:
 5860 08dd 61745F72 		.ascii	"at_ready\000"
 5860      65616479 
 5860      00
 5861              	.LASF84:
 5862 08e6 61747465 		.ascii	"attempts\000"
 5862      6D707473 
 5862      00
 5863              	.LASF70:
 5864 08ef 636F756E 		.ascii	"countDownType\000"
 5864      74446F77 
 5864      6E547970 
 5864      6500
 5865              	.LASF85:
 5866 08fd 626F6F74 		.ascii	"boot_time\000"
 5866      5F74696D 
 5866      6500
 5867              	.LASF90:
 5868 0907 65787065 		.ascii	"expected_response\000"
 5868      63746564 
 5868      5F726573 
 5868      706F6E73 
 5868      6500
 5869              	.LASF144:
 5870 0919 6C6F636B 		.ascii	"lock_time\000"
 5870      5F74696D 
 5870      6500
 5871              	.LASF159:
 5872 0923 68747470 		.ascii	"http_request\000"
 5872      5F726571 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwQ5aRo.s 			page 133


 5872      75657374 
 5872      00
 5873              	.LASF82:
 5874 0930 6D6F6465 		.ascii	"modem_power_down\000"
 5874      6D5F706F 
 5874      7765725F 
 5874      646F776E 
 5874      00
 5875              	.LASF21:
 5876 0941 646F7562 		.ascii	"double\000"
 5876      6C6500
 5877              	.LASF158:
 5878 0948 6170705F 		.ascii	"app_led_inbox\000"
 5878      6C65645F 
 5878      696E626F 
 5878      7800
 5879              	.LASF127:
 5880 0956 6170705F 		.ascii	"app_led_freq\000"
 5880      6C65645F 
 5880      66726571 
 5880      00
 5881              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
