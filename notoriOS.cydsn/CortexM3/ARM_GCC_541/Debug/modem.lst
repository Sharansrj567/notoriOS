ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,6,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.comm	uart_received_string,1024,4
  50              		.global	uart_string_index
  51              		.bss
  52              		.align	1
  53              		.type	uart_string_index, %object
  54              		.size	uart_string_index, 2
  55              	uart_string_index:
  56 0000 0000     		.space	2
  57              		.section	.text.isr_telit_rx,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 2


  58              		.align	2
  59              		.global	isr_telit_rx
  60              		.thumb
  61              		.thumb_func
  62              		.type	isr_telit_rx, %function
  63              	isr_telit_rx:
  64              	.LFB64:
  65              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  66              		.loc 1 18 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 98B5     		push	{r3, r4, r7, lr}
  71              		.cfi_def_cfa_offset 16
  72              		.cfi_offset 3, -16
  73              		.cfi_offset 4, -12
  74              		.cfi_offset 7, -8
  75              		.cfi_offset 14, -4
  76 0002 00AF     		add	r7, sp, #0
  77              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  78              		.loc 1 20 0
  79 0004 12E0     		b	.L2
  80              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  81              		.loc 1 21 0
  82 0006 0D4B     		ldr	r3, .L4
  83 0008 B3F90030 		ldrsh	r3, [r3]
  84 000c 1C46     		mov	r4, r3
  85 000e FFF7FEFF 		bl	UART_Telit_GetChar
  86 0012 0346     		mov	r3, r0
  87 0014 1A46     		mov	r2, r3
  88 0016 0A4B     		ldr	r3, .L4+4
  89 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  90              		.loc 1 22 0
  91 001a 084B     		ldr	r3, .L4
  92 001c B3F90030 		ldrsh	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 3


  93 0020 9BB2     		uxth	r3, r3
  94 0022 0133     		adds	r3, r3, #1
  95 0024 9BB2     		uxth	r3, r3
  96 0026 1AB2     		sxth	r2, r3
  97 0028 044B     		ldr	r3, .L4
  98 002a 1A80     		strh	r2, [r3]	@ movhi
  99              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 100              		.loc 1 20 0
 101 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 102 0030 0346     		mov	r3, r0
 103 0032 012B     		cmp	r3, #1
 104 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 105              		.loc 1 25 0
 106 0036 00BF     		nop
 107 0038 98BD     		pop	{r3, r4, r7, pc}
 108              	.L5:
 109 003a 00BF     		.align	2
 110              	.L4:
 111 003c 00000000 		.word	uart_string_index
 112 0040 00000000 		.word	uart_received_string
 113              		.cfi_endproc
 114              	.LFE64:
 115              		.size	isr_telit_rx, .-isr_telit_rx
 116              		.section	.text.modem_initialize,"ax",%progbits
 117              		.align	2
 118              		.global	modem_initialize
 119              		.thumb
 120              		.thumb_func
 121              		.type	modem_initialize, %function
 122              	modem_initialize:
 123              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 124              		.loc 1 28 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 134              		.loc 1 31 0
 135 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 136              		.loc 1 32 0
 137 0008 154B     		ldr	r3, .L7
 138 000a 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 4


 139 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 140              		.loc 1 34 0
 141 000e 154B     		ldr	r3, .L7+4
 142 0010 0022     		movs	r2, #0
 143 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 144              		.loc 1 35 0
 145 0016 134B     		ldr	r3, .L7+4
 146 0018 0022     		movs	r2, #0
 147 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 148              		.loc 1 36 0
 149 001c 114B     		ldr	r3, .L7+4
 150 001e 0022     		movs	r2, #0
 151 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 152              		.loc 1 37 0
 153 0022 114B     		ldr	r3, .L7+8
 154 0024 0022     		movs	r2, #0
 155 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 156              		.loc 1 38 0
 157 0028 0F4B     		ldr	r3, .L7+8
 158 002a 0022     		movs	r2, #0
 159 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 160              		.loc 1 39 0
 161 002e 0E4B     		ldr	r3, .L7+8
 162 0030 0022     		movs	r2, #0
 163 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 164              		.loc 1 40 0
 165 0034 0C4B     		ldr	r3, .L7+8
 166 0036 0022     		movs	r2, #0
 167 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 168              		.loc 1 41 0
 169 003a 0B4B     		ldr	r3, .L7+8
 170 003c 0022     		movs	r2, #0
 171 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 172              		.loc 1 42 0
 173 0040 094B     		ldr	r3, .L7+8
 174 0042 0022     		movs	r2, #0
 175 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 176              		.loc 1 43 0
 177 0046 084B     		ldr	r3, .L7+8
 178 0048 0022     		movs	r2, #0
 179 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 180              		.loc 1 44 0
 181 004c 064B     		ldr	r3, .L7+8
 182 004e 0022     		movs	r2, #0
 183 0050 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 5


  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 184              		.loc 1 48 0
 185 0052 0021     		movs	r1, #0
 186 0054 4020     		movs	r0, #64
 187 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 188              		.loc 1 50 0
 189 005a 00BF     		nop
 190 005c 80BD     		pop	{r7, pc}
 191              	.L8:
 192 005e 00BF     		.align	2
 193              	.L7:
 194 0060 00000000 		.word	modem_state
 195 0064 00000000 		.word	modem_info
 196 0068 00000000 		.word	modem_stats
 197              		.cfi_endproc
 198              	.LFE65:
 199              		.size	modem_initialize, .-modem_initialize
 200              		.section	.text.pins_configure_inactive,"ax",%progbits
 201              		.align	2
 202              		.global	pins_configure_inactive
 203              		.thumb
 204              		.thumb_func
 205              		.type	pins_configure_inactive, %function
 206              	pins_configure_inactive:
 207              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 208              		.loc 1 54 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 218              		.loc 1 56 0
 219 0004 0020     		movs	r0, #0
 220 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 221              		.loc 1 57 0
 222 000a 0C20     		movs	r0, #12
 223 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 224              		.loc 1 59 0
 225 0010 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 6


 226 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 227              		.loc 1 62 0
 228 0016 0020     		movs	r0, #0
 229 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 230              		.loc 1 63 0
 231 001c 0020     		movs	r0, #0
 232 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 233              		.loc 1 64 0
 234 0022 0020     		movs	r0, #0
 235 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 236              		.loc 1 65 0
 237 0028 0020     		movs	r0, #0
 238 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 239              		.loc 1 67 0
 240 002e 00BF     		nop
 241 0030 80BD     		pop	{r7, pc}
 242              		.cfi_endproc
 243              	.LFE66:
 244              		.size	pins_configure_inactive, .-pins_configure_inactive
 245 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 246              		.align	2
 247              		.global	pins_configure_active
 248              		.thumb
 249              		.thumb_func
 250              		.type	pins_configure_active, %function
 251              	pins_configure_active:
 252              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 253              		.loc 1 70 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0000 80B5     		push	{r7, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 263              		.loc 1 72 0
 264 0004 0220     		movs	r0, #2
 265 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 266              		.loc 1 73 0
 267 000a 0120     		movs	r0, #1
 268 000c FFF7FEFF 		bl	Telit_ControlReg_Write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 7


  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 269              		.loc 1 74 0
 270 0010 0120     		movs	r0, #1
 271 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 272              		.loc 1 75 0
 273 0016 6420     		movs	r0, #100
 274 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 275              		.loc 1 76 0
 276 001c 00BF     		nop
 277 001e 80BD     		pop	{r7, pc}
 278              		.cfi_endproc
 279              	.LFE67:
 280              		.size	pins_configure_active, .-pins_configure_active
 281              		.section	.rodata
 282              		.align	2
 283              	.LC0:
 284 0000 4F4B00   		.ascii	"OK\000"
 285 0003 00       		.align	2
 286              	.LC1:
 287 0004 41542353 		.ascii	"AT#SHDN\015\000"
 287      48444E0D 
 287      00
 288              		.section	.text.modem_power_down,"ax",%progbits
 289              		.align	2
 290              		.global	modem_power_down
 291              		.thumb
 292              		.thumb_func
 293              		.type	modem_power_down, %function
 294              	modem_power_down:
 295              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 296              		.loc 1 79 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 0000 80B5     		push	{r7, lr}
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 306              		.loc 1 82 0
 307 0004 41F28832 		movw	r2, #5000
 308 0008 0A49     		ldr	r1, .L12
 309 000a 0B48     		ldr	r0, .L12+4
 310 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 311              		.loc 1 85 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 8


 312 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 313              		.loc 1 86 0
 314 0014 4FF47A70 		mov	r0, #1000
 315 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 316              		.loc 1 88 0
 317 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 318              		.loc 1 89 0
 319 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 320              		.loc 1 90 0
 321 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 322              		.loc 1 91 0
 323 0028 044B     		ldr	r3, .L12+8
 324 002a 0022     		movs	r2, #0
 325 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 326              		.loc 1 93 0
 327 002e 00BF     		nop
 328 0030 80BD     		pop	{r7, pc}
 329              	.L13:
 330 0032 00BF     		.align	2
 331              	.L12:
 332 0034 00000000 		.word	.LC0
 333 0038 04000000 		.word	.LC1
 334 003c 00000000 		.word	modem_state
 335              		.cfi_endproc
 336              	.LFE68:
 337              		.size	modem_power_down, .-modem_power_down
 338              		.section	.rodata
 339 000d 000000   		.align	2
 340              	.LC2:
 341 0010 41544530 		.ascii	"ATE0\015\000"
 341      0D00
 342 0016 0000     		.align	2
 343              	.LC3:
 344 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 344      6D20626F 
 344      6F742074 
 344      696D653A 
 344      20256400 
 345              		.align	2
 346              	.LC4:
 347 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 347      6D207265 
 347      61647920 
 347      666F7220 
 347      41542063 
 348 005d 000000   		.align	2
 349              	.LC5:
 350 0060 4E6F2072 		.ascii	"No response from modem.\000"
 350      6573706F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 9


 350      6E736520 
 350      66726F6D 
 350      206D6F64 
 351              		.section	.text.modem_power_up,"ax",%progbits
 352              		.align	2
 353              		.global	modem_power_up
 354              		.thumb
 355              		.thumb_func
 356              		.type	modem_power_up, %function
 357              	modem_power_up:
 358              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 359              		.loc 1 97 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 80B5     		push	{r7, lr}
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 82B0     		sub	sp, sp, #8
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 371              		.loc 1 99 0
 372 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 373              		.loc 1 100 0
 374 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 375              		.loc 1 101 0
 376 000e 2C48     		ldr	r0, .L27
 377 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 378              		.loc 1 103 0
 379 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 380              		.loc 1 106 0
 381 0018 0023     		movs	r3, #0
 382 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 383              		.loc 1 107 0
 384 001c 0023     		movs	r3, #0
 385 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 386              		.loc 1 109 0
 387 0020 FFF7FEFF 		bl	getTimeStamp
 388 0024 3860     		str	r0, [r7]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 10


 389              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 390              		.loc 1 112 0
 391 0026 0023     		movs	r3, #0
 392 0028 BB71     		strb	r3, [r7, #6]
 393 002a 1CE0     		b	.L15
 394              	.L22:
 395              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 396              		.loc 1 114 0
 397 002c 0023     		movs	r3, #0
 398 002e 7B71     		strb	r3, [r7, #5]
 399 0030 0EE0     		b	.L16
 400              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 401              		.loc 1 116 0
 402 0032 4FF47A72 		mov	r2, #1000
 403 0036 2349     		ldr	r1, .L27+4
 404 0038 2348     		ldr	r0, .L27+8
 405 003a FFF7FEFF 		bl	at_write_command
 406 003e 0346     		mov	r3, r0
 407 0040 002B     		cmp	r3, #0
 408 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 409              		.loc 1 117 0
 410 0044 0123     		movs	r3, #1
 411 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 412              		.loc 1 118 0
 413 0048 05E0     		b	.L18
 414              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 415              		.loc 1 114 0 discriminator 2
 416 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 417 004c 0133     		adds	r3, r3, #1
 418 004e 7B71     		strb	r3, [r7, #5]
 419              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 420              		.loc 1 114 0 is_stmt 0 discriminator 1
 421 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 422 0052 132B     		cmp	r3, #19
 423 0054 EDD9     		bls	.L19
 424              	.L18:
 425              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 426              		.loc 1 122 0 is_stmt 1
 427 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 428 0058 012B     		cmp	r3, #1
 429 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 11


 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 430              		.loc 1 126 0 discriminator 2
 431 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 432              		.loc 1 112 0 discriminator 2
 433 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 434 0062 0133     		adds	r3, r3, #1
 435 0064 BB71     		strb	r3, [r7, #6]
 436              	.L15:
 112:modem.c       ****         
 437              		.loc 1 112 0 is_stmt 0 discriminator 1
 438 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 439 0068 022B     		cmp	r3, #2
 440 006a DFD9     		bls	.L22
 441 006c 00E0     		b	.L21
 442              	.L26:
 123:modem.c       ****             break;
 443              		.loc 1 123 0 is_stmt 1
 444 006e 00BF     		nop
 445              	.L21:
 446              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 447              		.loc 1 130 0
 448 0070 FFF7FEFF 		bl	getTimeStamp
 449 0074 0246     		mov	r2, r0
 450 0076 3B68     		ldr	r3, [r7]
 451 0078 D31A     		subs	r3, r2, r3
 452 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 453              		.loc 1 131 0
 454 007c 3A68     		ldr	r2, [r7]
 455 007e 1349     		ldr	r1, .L27+12
 456 0080 0020     		movs	r0, #0
 457 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 458              		.loc 1 133 0
 459 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 460 0088 012B     		cmp	r3, #1
 461 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 462              		.loc 1 134 0
 463 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 464 008e 1A46     		mov	r2, r3
 465 0090 0F49     		ldr	r1, .L27+16
 466 0092 0020     		movs	r0, #0
 467 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 468              		.loc 1 135 0
 469 0098 0E4B     		ldr	r3, .L27+20
 470 009a 0122     		movs	r2, #1
 471 009c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 12


 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 472              		.loc 1 143 0
 473 009e 0123     		movs	r3, #1
 474 00a0 09E0     		b	.L25
 475              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 476              		.loc 1 137 0
 477 00a2 0D49     		ldr	r1, .L27+24
 478 00a4 0220     		movs	r0, #2
 479 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 480              		.loc 1 138 0
 481 00aa 0A4B     		ldr	r3, .L27+20
 482 00ac 0022     		movs	r2, #0
 483 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 484              		.loc 1 140 0
 485 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 486              		.loc 1 141 0
 487 00b4 0023     		movs	r3, #0
 488              	.L25:
 144:modem.c       **** }
 489              		.loc 1 144 0
 490 00b6 1846     		mov	r0, r3
 491 00b8 0837     		adds	r7, r7, #8
 492              		.cfi_def_cfa_offset 8
 493 00ba BD46     		mov	sp, r7
 494              		.cfi_def_cfa_register 13
 495              		@ sp needed
 496 00bc 80BD     		pop	{r7, pc}
 497              	.L28:
 498 00be 00BF     		.align	2
 499              	.L27:
 500 00c0 00000000 		.word	isr_telit_rx
 501 00c4 00000000 		.word	.LC0
 502 00c8 10000000 		.word	.LC2
 503 00cc 18000000 		.word	.LC3
 504 00d0 2C000000 		.word	.LC4
 505 00d4 00000000 		.word	modem_state
 506 00d8 60000000 		.word	.LC5
 507              		.cfi_endproc
 508              	.LFE69:
 509              		.size	modem_power_up, .-modem_power_up
 510              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 511              		.align	2
 512              		.global	modem_soft_power_cycle
 513              		.thumb
 514              		.thumb_func
 515              		.type	modem_soft_power_cycle, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 13


 516              	modem_soft_power_cycle:
 517              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 518              		.loc 1 147 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 528              		.loc 1 148 0
 529 0004 0120     		movs	r0, #1
 530 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 531              		.loc 1 149 0
 532 000a 4FF4FA60 		mov	r0, #2000
 533 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 534              		.loc 1 150 0
 535 0012 0020     		movs	r0, #0
 536 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 537              		.loc 1 152 0
 538 0018 00BF     		nop
 539 001a 80BD     		pop	{r7, pc}
 540              		.cfi_endproc
 541              	.LFE70:
 542              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 543              		.section	.text.uart_string_reset,"ax",%progbits
 544              		.align	2
 545              		.global	uart_string_reset
 546              		.thumb
 547              		.thumb_func
 548              		.type	uart_string_reset, %function
 549              	uart_string_reset:
 550              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 551              		.loc 1 155 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555 0000 80B5     		push	{r7, lr}
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 7, -8
 558              		.cfi_offset 14, -4
 559 0002 00AF     		add	r7, sp, #0
 560              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 14


 561              		.loc 1 156 0
 562 0004 064B     		ldr	r3, .L31
 563 0006 0022     		movs	r2, #0
 564 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 565              		.loc 1 158 0
 566 000a 4FF48062 		mov	r2, #1024
 567 000e 0021     		movs	r1, #0
 568 0010 0448     		ldr	r0, .L31+4
 569 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 570              		.loc 1 160 0
 571 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 572              		.loc 1 161 0
 573 001a 00BF     		nop
 574 001c 80BD     		pop	{r7, pc}
 575              	.L32:
 576 001e 00BF     		.align	2
 577              	.L31:
 578 0020 00000000 		.word	uart_string_index
 579 0024 00000000 		.word	uart_received_string
 580              		.cfi_endproc
 581              	.LFE71:
 582              		.size	uart_string_reset, .-uart_string_reset
 583              		.section	.rodata
 584              		.align	2
 585              	.LC6:
 586 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 586      6D207365 
 586      6E742041 
 586      5420636F 
 586      6D6D616E 
 587              		.align	2
 588              	.LC7:
 589 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 589      6D205265 
 589      63656976 
 589      65642065 
 589      78706563 
 590 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 590      616E643A 
 590      2025730A 
 590      52656365 
 590      69766564 
 591 00f1 000000   		.align	2
 592              	.LC8:
 593 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 593      6D207265 
 593      71756972 
 593      65642025 
 593      64207472 
 594 0127 0A00     		.ascii	"\012\000"
 595 0129 000000   		.align	2
 596              	.LC9:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 15


 597 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 597      64206E6F 
 597      74207772 
 597      69746520 
 597      41542063 
 598 0159 00       		.ascii	"\000"
 599              		.section	.text.at_write_command,"ax",%progbits
 600              		.align	2
 601              		.global	at_write_command
 602              		.thumb
 603              		.thumb_func
 604              		.type	at_write_command, %function
 605              	at_write_command:
 606              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 607              		.loc 1 166 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 40
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0000 80B5     		push	{r7, lr}
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 8AB0     		sub	sp, sp, #40
 616              		.cfi_def_cfa_offset 48
 617 0004 00AF     		add	r7, sp, #0
 618              		.cfi_def_cfa_register 7
 619 0006 F860     		str	r0, [r7, #12]
 620 0008 B960     		str	r1, [r7, #8]
 621 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 622              		.loc 1 168 0
 623 000c 0023     		movs	r3, #0
 624 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 625              		.loc 1 170 0
 626 0010 0023     		movs	r3, #0
 627 0012 7B62     		str	r3, [r7, #36]
 628 0014 46E0     		b	.L34
 629              	.L42:
 630              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 631              		.loc 1 173 0
 632 0016 0A23     		movs	r3, #10
 633 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 634              		.loc 1 174 0
 635 001a 7A68     		ldr	r2, [r7, #4]
 636 001c FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 16


 637 001e B2FBF3F3 		udiv	r3, r2, r3
 638 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 639              		.loc 1 177 0
 640 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 641              		.loc 1 180 0
 642 0028 F868     		ldr	r0, [r7, #12]
 643 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 644              		.loc 1 184 0
 645 002e 7B68     		ldr	r3, [r7, #4]
 646 0030 002B     		cmp	r3, #0
 647 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 648              		.loc 1 185 0
 649 0034 FA68     		ldr	r2, [r7, #12]
 650 0036 1F49     		ldr	r1, .L43
 651 0038 0020     		movs	r0, #0
 652 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 653              		.loc 1 186 0
 654 003e 0123     		movs	r3, #1
 655 0040 34E0     		b	.L36
 656              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 657              		.loc 1 190 0
 658 0042 0023     		movs	r3, #0
 659 0044 3B62     		str	r3, [r7, #32]
 660 0046 20E0     		b	.L37
 661              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 662              		.loc 1 191 0
 663 0048 F869     		ldr	r0, [r7, #28]
 664 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 665              		.loc 1 194 0
 666 004e B968     		ldr	r1, [r7, #8]
 667 0050 1948     		ldr	r0, .L43+4
 668 0052 FFF7FEFF 		bl	strstr
 669 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 670              		.loc 1 195 0
 671 0058 7B69     		ldr	r3, [r7, #20]
 672 005a 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 17


 673 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 674              		.loc 1 196 0
 675 005e 7B6A     		ldr	r3, [r7, #36]
 676 0060 002B     		cmp	r3, #0
 677 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 678              		.loc 1 198 0
 679 0064 144B     		ldr	r3, .L43+4
 680 0066 FA68     		ldr	r2, [r7, #12]
 681 0068 1449     		ldr	r1, .L43+8
 682 006a 0020     		movs	r0, #0
 683 006c FFF7FEFF 		bl	printNotif
 684 0070 06E0     		b	.L40
 685              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 686              		.loc 1 200 0
 687 0072 7B6A     		ldr	r3, [r7, #36]
 688 0074 5A1C     		adds	r2, r3, #1
 689 0076 104B     		ldr	r3, .L43+4
 690 0078 1149     		ldr	r1, .L43+12
 691 007a 0120     		movs	r0, #1
 692 007c FFF7FEFF 		bl	printNotif
 693              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 694              		.loc 1 203 0
 695 0080 0123     		movs	r3, #1
 696 0082 13E0     		b	.L36
 697              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 698              		.loc 1 190 0 discriminator 2
 699 0084 3B6A     		ldr	r3, [r7, #32]
 700 0086 0133     		adds	r3, r3, #1
 701 0088 3B62     		str	r3, [r7, #32]
 702              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 703              		.loc 1 190 0 is_stmt 0 discriminator 1
 704 008a 3A6A     		ldr	r2, [r7, #32]
 705 008c BB69     		ldr	r3, [r7, #24]
 706 008e 9A42     		cmp	r2, r3
 707 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 708              		.loc 1 209 0 is_stmt 1 discriminator 2
 709 0092 094B     		ldr	r3, .L43+4
 710 0094 FA68     		ldr	r2, [r7, #12]
 711 0096 0B49     		ldr	r1, .L43+16
 712 0098 0220     		movs	r0, #2
 713 009a FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 18


 714              	.LBE4:
 170:modem.c       ****         
 715              		.loc 1 170 0 discriminator 2
 716 009e 7B6A     		ldr	r3, [r7, #36]
 717 00a0 0133     		adds	r3, r3, #1
 718 00a2 7B62     		str	r3, [r7, #36]
 719              	.L34:
 170:modem.c       ****         
 720              		.loc 1 170 0 is_stmt 0 discriminator 1
 721 00a4 7B6A     		ldr	r3, [r7, #36]
 722 00a6 022B     		cmp	r3, #2
 723 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 724              		.loc 1 214 0 is_stmt 1
 725 00aa 0023     		movs	r3, #0
 726              	.L36:
 215:modem.c       **** }
 727              		.loc 1 215 0
 728 00ac 1846     		mov	r0, r3
 729 00ae 2837     		adds	r7, r7, #40
 730              		.cfi_def_cfa_offset 8
 731 00b0 BD46     		mov	sp, r7
 732              		.cfi_def_cfa_register 13
 733              		@ sp needed
 734 00b2 80BD     		pop	{r7, pc}
 735              	.L44:
 736              		.align	2
 737              	.L43:
 738 00b4 78000000 		.word	.LC6
 739 00b8 00000000 		.word	uart_received_string
 740 00bc A4000000 		.word	.LC7
 741 00c0 F4000000 		.word	.LC8
 742 00c4 2C010000 		.word	.LC9
 743              		.cfi_endproc
 744              	.LFE72:
 745              		.size	at_write_command, .-at_write_command
 746              		.section	.rodata
 747 015a 0000     		.align	2
 748              	.LC10:
 749 015c 54455354 		.ascii	"TEST_MODEM\000"
 749      5F4D4F44 
 749      454D00
 750 0167 00       		.align	2
 751              	.LC11:
 752 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 752      65706F6E 
 752      73652066 
 752      726F6D20 
 752      6D6F6465 
 753 017f 00       		.align	2
 754              	.LC12:
 755 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 755      6D20636F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 19


 755      6E6E6563 
 755      74656420 
 755      746F206E 
 756              		.section	.text.modem_test,"ax",%progbits
 757              		.align	2
 758              		.global	modem_test
 759              		.thumb
 760              		.thumb_func
 761              		.type	modem_test, %function
 762              	modem_test:
 763              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 764              		.loc 1 218 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 408
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0000 B0B5     		push	{r4, r5, r7, lr}
 769              		.cfi_def_cfa_offset 16
 770              		.cfi_offset 4, -16
 771              		.cfi_offset 5, -12
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 0002 E6B0     		sub	sp, sp, #408
 775              		.cfi_def_cfa_offset 424
 776 0004 00AF     		add	r7, sp, #0
 777              		.cfi_def_cfa_register 7
 778 0006 3B1D     		adds	r3, r7, #4
 779 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 780              		.loc 1 221 0
 781 000a 07F10C03 		add	r3, r7, #12
 782 000e 0022     		movs	r2, #0
 783 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 784              		.loc 1 223 0
 785 0014 07F10C03 		add	r3, r7, #12
 786 0018 364A     		ldr	r2, .L53
 787 001a 07CA     		ldmia	r2, {r0, r1, r2}
 788 001c 03C3     		stmia	r3!, {r0, r1}
 789 001e 1A80     		strh	r2, [r3]	@ movhi
 790 0020 0233     		adds	r3, r3, #2
 791 0022 120C     		lsrs	r2, r2, #16
 792 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 793              		.loc 1 224 0
 794 0026 07F10C03 		add	r3, r7, #12
 795 002a 8133     		adds	r3, r3, #129
 796 002c 324A     		ldr	r2, .L53+4
 797 002e 1C46     		mov	r4, r3
 798 0030 1546     		mov	r5, r2
 799 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 800 0034 2060     		str	r0, [r4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 20


 801 0036 6160     		str	r1, [r4, #4]	@ unaligned
 802 0038 A260     		str	r2, [r4, #8]	@ unaligned
 803 003a E360     		str	r3, [r4, #12]	@ unaligned
 804 003c 2868     		ldr	r0, [r5]	@ unaligned
 805 003e 2061     		str	r0, [r4, #16]	@ unaligned
 806 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 807 0042 AA79     		ldrb	r2, [r5, #6]
 808 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 809 0046 1346     		mov	r3, r2
 810 0048 A375     		strb	r3, [r4, #22]
 811              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 812              		.loc 1 227 0
 813 004a 0023     		movs	r3, #0
 814 004c C7F89431 		str	r3, [r7, #404]
 815 0050 3AE0     		b	.L46
 816              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 817              		.loc 1 229 0
 818 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 819              		.loc 1 231 0
 820 0056 FFF7FEFF 		bl	modem_get_state
 821 005a 0346     		mov	r3, r0
 822 005c 002B     		cmp	r3, #0
 823 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 824              		.loc 1 233 0
 825 0060 FFF7FEFF 		bl	modem_power_up
 826 0064 27E0     		b	.L48
 827              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 828              		.loc 1 236 0
 829 0066 FFF7FEFF 		bl	modem_get_state
 830 006a 0346     		mov	r3, r0
 831 006c 042B     		cmp	r3, #4
 832 006e 22D1     		bne	.L48
 833              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 834              		.loc 1 240 0
 835 0070 FFF7FEFF 		bl	modem_get_network_time
 836 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 837              		.loc 1 241 0
 838 0078 D7F89031 		ldr	r3, [r7, #400]
 839 007c 002B     		cmp	r3, #0
 840 007e 03D0     		beq	.L49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 21


 242:modem.c       ****             setTime(network_time); // Set the system time 
 841              		.loc 1 242 0
 842 0080 D7F89001 		ldr	r0, [r7, #400]
 843 0084 FFF7FEFF 		bl	setTime
 844              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 845              		.loc 1 245 0
 846 0088 07F10C03 		add	r3, r7, #12
 847 008c 8133     		adds	r3, r3, #129
 848 008e 1B4A     		ldr	r2, .L53+8
 849 0090 1D46     		mov	r5, r3
 850 0092 1446     		mov	r4, r2
 851 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 852 0096 2860     		str	r0, [r5]	@ unaligned
 853 0098 6960     		str	r1, [r5, #4]	@ unaligned
 854 009a AA60     		str	r2, [r5, #8]	@ unaligned
 855 009c EB60     		str	r3, [r5, #12]	@ unaligned
 856 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 857 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 858 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 859 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 860              		.loc 1 246 0
 861 00a6 07F10C03 		add	r3, r7, #12
 862 00aa 0122     		movs	r2, #1
 863 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 864              		.loc 1 248 0
 865 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 866              		.loc 1 249 0
 867 00b4 0CE0     		b	.L50
 868              	.L48:
 869              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 870              		.loc 1 252 0 discriminator 2
 871 00b6 4FF47A70 		mov	r0, #1000
 872 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 873              		.loc 1 227 0 discriminator 2
 874 00be D7F89431 		ldr	r3, [r7, #404]
 875 00c2 0133     		adds	r3, r3, #1
 876 00c4 C7F89431 		str	r3, [r7, #404]
 877              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 878              		.loc 1 227 0 is_stmt 0 discriminator 1
 879 00c8 D7F89431 		ldr	r3, [r7, #404]
 880 00cc 3B2B     		cmp	r3, #59
 881 00ce C0DD     		ble	.L51
 882              	.L50:
 883              	.LBE5:
 253:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 22


 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 884              		.loc 1 256 0 is_stmt 1
 885 00d0 3B1D     		adds	r3, r7, #4
 886 00d2 1A68     		ldr	r2, [r3]
 887 00d4 07F10C03 		add	r3, r7, #12
 888 00d8 1046     		mov	r0, r2
 889 00da 1946     		mov	r1, r3
 890 00dc 40F28113 		movw	r3, #385
 891 00e0 1A46     		mov	r2, r3
 892 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 893              		.loc 1 257 0
 894 00e6 3B1D     		adds	r3, r7, #4
 895 00e8 1868     		ldr	r0, [r3]
 896 00ea 07F5CC77 		add	r7, r7, #408
 897              		.cfi_def_cfa_offset 16
 898 00ee BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 00f0 B0BD     		pop	{r4, r5, r7, pc}
 902              	.L54:
 903 00f2 00BF     		.align	2
 904              	.L53:
 905 00f4 5C010000 		.word	.LC10
 906 00f8 68010000 		.word	.LC11
 907 00fc 80010000 		.word	.LC12
 908              		.cfi_endproc
 909              	.LFE73:
 910              		.size	modem_test, .-modem_test
 911              		.section	.text.extract_string,"ax",%progbits
 912              		.align	2
 913              		.global	extract_string
 914              		.thumb
 915              		.thumb_func
 916              		.type	extract_string, %function
 917              	extract_string:
 918              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 919              		.loc 1 260 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 24
 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 86B0     		sub	sp, sp, #24
 928              		.cfi_def_cfa_offset 32
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 F860     		str	r0, [r7, #12]
 932 0008 B960     		str	r1, [r7, #8]
 933 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 23


 934 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 935              		.loc 1 266 0
 936 000e B968     		ldr	r1, [r7, #8]
 937 0010 F868     		ldr	r0, [r7, #12]
 938 0012 FFF7FEFF 		bl	strstr
 939 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 940              		.loc 1 267 0
 941 0018 7B69     		ldr	r3, [r7, #20]
 942 001a 002B     		cmp	r3, #0
 943 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 944              		.loc 1 269 0
 945 001e FB68     		ldr	r3, [r7, #12]
 946 0020 7B61     		str	r3, [r7, #20]
 947              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 948              		.loc 1 272 0
 949 0022 B868     		ldr	r0, [r7, #8]
 950 0024 FFF7FEFF 		bl	strlen
 951 0028 0246     		mov	r2, r0
 952 002a 7B69     		ldr	r3, [r7, #20]
 953 002c 1344     		add	r3, r3, r2
 954 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 955              		.loc 1 277 0
 956 0030 7968     		ldr	r1, [r7, #4]
 957 0032 7869     		ldr	r0, [r7, #20]
 958 0034 FFF7FEFF 		bl	strstr
 959 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 960              		.loc 1 278 0
 961 003a 3B69     		ldr	r3, [r7, #16]
 962 003c 002B     		cmp	r3, #0
 963 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 964              		.loc 1 280 0
 965 0040 F868     		ldr	r0, [r7, #12]
 966 0042 FFF7FEFF 		bl	strlen
 967 0046 0246     		mov	r2, r0
 968 0048 FB68     		ldr	r3, [r7, #12]
 969 004a 1344     		add	r3, r3, r2
 970 004c 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 24


 971              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 972              		.loc 1 284 0
 973 004e 3A69     		ldr	r2, [r7, #16]
 974 0050 7B69     		ldr	r3, [r7, #20]
 975 0052 D31A     		subs	r3, r2, r3
 976 0054 1A46     		mov	r2, r3
 977 0056 7969     		ldr	r1, [r7, #20]
 978 0058 3868     		ldr	r0, [r7]
 979 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 980              		.loc 1 285 0
 981 005e 3A69     		ldr	r2, [r7, #16]
 982 0060 7B69     		ldr	r3, [r7, #20]
 983 0062 D31A     		subs	r3, r2, r3
 984 0064 1A46     		mov	r2, r3
 985 0066 3B68     		ldr	r3, [r7]
 986 0068 1344     		add	r3, r3, r2
 987 006a 0022     		movs	r2, #0
 988 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 989              		.loc 1 286 0
 990 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 991              		.loc 1 288 0
 992 0070 1846     		mov	r0, r3
 993 0072 1837     		adds	r7, r7, #24
 994              		.cfi_def_cfa_offset 8
 995 0074 BD46     		mov	sp, r7
 996              		.cfi_def_cfa_register 13
 997              		@ sp needed
 998 0076 80BD     		pop	{r7, pc}
 999              		.cfi_endproc
 1000              	.LFE74:
 1001              		.size	extract_string, .-extract_string
 1002              		.section	.rodata
 1003              		.align	2
 1004              	.LC13:
 1005 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1005      20746F20 
 1005      636F6E6E 
 1005      65637420 
 1005      746F206E 
 1006 01c3 00       		.align	2
 1007              	.LC14:
 1008 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1008      6D207469 
 1008      6D656420 
 1008      6F757420 
 1008      6F6E206E 
 1009 01e7 00       		.align	2
 1010              	.LC15:
 1011 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 25


 1011      69726564 
 1011      20495020 
 1011      61646472 
 1011      6573733A 
 1012              		.align	2
 1013              	.LC16:
 1014 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1014      6D207469 
 1014      6D656420 
 1014      6F757420 
 1014      6F6E2049 
 1015              		.section	.text.modem_process_tasks,"ax",%progbits
 1016              		.align	2
 1017              		.global	modem_process_tasks
 1018              		.thumb
 1019              		.thumb_func
 1020              		.type	modem_process_tasks, %function
 1021              	modem_process_tasks:
 1022              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1023              		.loc 1 291 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 8
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027 0000 80B5     		push	{r7, lr}
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 7, -8
 1030              		.cfi_offset 14, -4
 1031 0002 82B0     		sub	sp, sp, #8
 1032              		.cfi_def_cfa_offset 16
 1033 0004 00AF     		add	r7, sp, #0
 1034              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1035              		.loc 1 293 0
 1036 0006 534B     		ldr	r3, .L75
 1037 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1038 000a 012B     		cmp	r3, #1
 1039 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1040              		.loc 1 295 0
 1041 000e FFF7FEFF 		bl	getTimeStamp
 1042 0012 0246     		mov	r2, r0
 1043 0014 504B     		ldr	r3, .L75+4
 1044 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1045              		.loc 1 296 0
 1046 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1047              		.loc 1 297 0
 1048 001c 4D4B     		ldr	r3, .L75
 1049 001e 0222     		movs	r2, #2
 1050 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 26


 1051              		.loc 1 298 0
 1052 0022 0123     		movs	r3, #1
 1053 0024 92E0     		b	.L61
 1054              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1055              		.loc 1 302 0
 1056 0026 4B4B     		ldr	r3, .L75
 1057 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1058 002a 022B     		cmp	r3, #2
 1059 002c 5FD1     		bne	.L62
 1060              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1061              		.loc 1 305 0
 1062 002e 0023     		movs	r3, #0
 1063 0030 FB71     		strb	r3, [r7, #7]
 1064 0032 2BE0     		b	.L63
 1065              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1066              		.loc 1 307 0
 1067 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1068              		.loc 1 309 0
 1069 0038 484B     		ldr	r3, .L75+8
 1070 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1071 003c 83F00103 		eor	r3, r3, #1
 1072 0040 DBB2     		uxtb	r3, r3
 1073 0042 002B     		cmp	r3, #0
 1074 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1075              		.loc 1 312 0
 1076 0046 464B     		ldr	r3, .L75+12
 1077 0048 5B69     		ldr	r3, [r3, #20]
 1078 004a 1A2B     		cmp	r3, #26
 1079 004c 03DD     		ble	.L64
 1080              		.loc 1 312 0 is_stmt 0 discriminator 1
 1081 004e 444B     		ldr	r3, .L75+12
 1082 0050 5B69     		ldr	r3, [r3, #20]
 1083 0052 FF2B     		cmp	r3, #255
 1084 0054 1ED1     		bne	.L74
 1085              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1086              		.loc 1 317 0 is_stmt 1
 1087 0056 414B     		ldr	r3, .L75+8
 1088 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 27


 1089 005a 002B     		cmp	r3, #0
 1090 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1091              		.loc 1 320 0
 1092 005e 404B     		ldr	r3, .L75+12
 1093 0060 9B68     		ldr	r3, [r3, #8]
 1094 0062 242B     		cmp	r3, #36
 1095 0064 03DD     		ble	.L67
 1096              		.loc 1 320 0 is_stmt 0 discriminator 1
 1097 0066 3E4B     		ldr	r3, .L75+12
 1098 0068 9B68     		ldr	r3, [r3, #8]
 1099 006a FF2B     		cmp	r3, #255
 1100 006c 13D1     		bne	.L65
 1101              	.L67:
 1102              		.loc 1 320 0 discriminator 3
 1103 006e 3C4B     		ldr	r3, .L75+12
 1104 0070 5B69     		ldr	r3, [r3, #20]
 1105 0072 1A2B     		cmp	r3, #26
 1106 0074 03DD     		ble	.L66
 1107              		.loc 1 320 0 discriminator 4
 1108 0076 3A4B     		ldr	r3, .L75+12
 1109 0078 5B69     		ldr	r3, [r3, #20]
 1110 007a FF2B     		cmp	r3, #255
 1111 007c 0BD1     		bne	.L65
 1112              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1113              		.loc 1 325 0 is_stmt 1 discriminator 2
 1114 007e 4FF47A70 		mov	r0, #1000
 1115 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1116              		.loc 1 305 0 discriminator 2
 1117 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1118 0088 0133     		adds	r3, r3, #1
 1119 008a FB71     		strb	r3, [r7, #7]
 1120              	.L63:
 305:modem.c       ****             // Get cell network stats
 1121              		.loc 1 305 0 is_stmt 0 discriminator 1
 1122 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1123 008e 1D2B     		cmp	r3, #29
 1124 0090 D0D9     		bls	.L68
 1125 0092 00E0     		b	.L65
 1126              	.L74:
 313:modem.c       ****                 }
 1127              		.loc 1 313 0 is_stmt 1
 1128 0094 00BF     		nop
 1129              	.L65:
 1130              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 28


 1131              		.loc 1 329 0
 1132 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1133 009a 0346     		mov	r3, r0
 1134 009c 002B     		cmp	r3, #0
 1135 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1136              		.loc 1 331 0
 1137 00a0 FFF7FEFF 		bl	getTimeStamp
 1138 00a4 0246     		mov	r2, r0
 1139 00a6 2C4B     		ldr	r3, .L75+4
 1140 00a8 1B68     		ldr	r3, [r3]
 1141 00aa D31A     		subs	r3, r2, r3
 1142 00ac 2C4A     		ldr	r2, .L75+12
 1143 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1144              		.loc 1 332 0
 1145 00b0 2B4B     		ldr	r3, .L75+12
 1146 00b2 9B69     		ldr	r3, [r3, #24]
 1147 00b4 1A46     		mov	r2, r3
 1148 00b6 2B49     		ldr	r1, .L75+16
 1149 00b8 0020     		movs	r0, #0
 1150 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1151              		.loc 1 334 0
 1152 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1153              		.loc 1 335 0
 1154 00c2 244B     		ldr	r3, .L75
 1155 00c4 0322     		movs	r2, #3
 1156 00c6 1A70     		strb	r2, [r3]
 1157              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1158              		.loc 1 339 0
 1159 00c8 FFF7FEFF 		bl	getTimeStamp
 1160 00cc 0246     		mov	r2, r0
 1161 00ce 224B     		ldr	r3, .L75+4
 1162 00d0 1B68     		ldr	r3, [r3]
 1163 00d2 D31A     		subs	r3, r2, r3
 1164 00d4 B42B     		cmp	r3, #180
 1165 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1166              		.loc 1 340 0
 1167 00d8 1E4B     		ldr	r3, .L75
 1168 00da 0022     		movs	r2, #0
 1169 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1170              		.loc 1 341 0
 1171 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1172              		.loc 1 342 0
 1173 00e2 2149     		ldr	r1, .L75+20
 1174 00e4 0220     		movs	r0, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 29


 1175 00e6 FFF7FEFF 		bl	printNotif
 1176              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1177              		.loc 1 345 0
 1178 00ea 0023     		movs	r3, #0
 1179 00ec 2EE0     		b	.L61
 1180              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1181              		.loc 1 348 0
 1182 00ee 194B     		ldr	r3, .L75
 1183 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1184 00f2 032B     		cmp	r3, #3
 1185 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1186              		.loc 1 350 0
 1187 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1188 00fa 0346     		mov	r3, r0
 1189 00fc 002B     		cmp	r3, #0
 1190 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1191              		.loc 1 351 0
 1192 0100 144B     		ldr	r3, .L75
 1193 0102 0422     		movs	r2, #4
 1194 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1195              		.loc 1 353 0
 1196 0106 FFF7FEFF 		bl	getTimeStamp
 1197 010a 0246     		mov	r2, r0
 1198 010c 124B     		ldr	r3, .L75+4
 1199 010e 1B68     		ldr	r3, [r3]
 1200 0110 D31A     		subs	r3, r2, r3
 1201 0112 134A     		ldr	r2, .L75+12
 1202 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1203              		.loc 1 354 0
 1204 0116 124B     		ldr	r3, .L75+12
 1205 0118 DB69     		ldr	r3, [r3, #28]
 1206 011a 1A46     		mov	r2, r3
 1207 011c 1349     		ldr	r1, .L75+24
 1208 011e 0020     		movs	r0, #0
 1209 0120 FFF7FEFF 		bl	printNotif
 1210              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1211              		.loc 1 359 0
 1212 0124 FFF7FEFF 		bl	getTimeStamp
 1213 0128 0246     		mov	r2, r0
 1214 012a 0B4B     		ldr	r3, .L75+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 30


 1215 012c 1B68     		ldr	r3, [r3]
 1216 012e D31A     		subs	r3, r2, r3
 1217 0130 E62B     		cmp	r3, #230
 1218 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1219              		.loc 1 360 0
 1220 0134 074B     		ldr	r3, .L75
 1221 0136 0022     		movs	r2, #0
 1222 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1223              		.loc 1 361 0
 1224 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1225              		.loc 1 362 0
 1226 013e 0C49     		ldr	r1, .L75+28
 1227 0140 0220     		movs	r0, #2
 1228 0142 FFF7FEFF 		bl	printNotif
 1229              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1230              		.loc 1 365 0
 1231 0146 0023     		movs	r3, #0
 1232 0148 00E0     		b	.L61
 1233              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1234              		.loc 1 368 0
 1235 014a 0023     		movs	r3, #0
 1236              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1237              		.loc 1 370 0
 1238 014c 1846     		mov	r0, r3
 1239 014e 0837     		adds	r7, r7, #8
 1240              		.cfi_def_cfa_offset 8
 1241 0150 BD46     		mov	sp, r7
 1242              		.cfi_def_cfa_register 13
 1243              		@ sp needed
 1244 0152 80BD     		pop	{r7, pc}
 1245              	.L76:
 1246              		.align	2
 1247              	.L75:
 1248 0154 00000000 		.word	modem_state
 1249 0158 00000000 		.word	modem_start_time_stamp
 1250 015c 00000000 		.word	updatable_parameters
 1251 0160 00000000 		.word	modem_stats
 1252 0164 9C010000 		.word	.LC13
 1253 0168 C4010000 		.word	.LC14
 1254 016c E8010000 		.word	.LC15
 1255 0170 08020000 		.word	.LC16
 1256              		.cfi_endproc
 1257              	.LFE75:
 1258              		.size	modem_process_tasks, .-modem_process_tasks
 1259              		.section	.rodata
 1260 022f 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 31


 1261              	.LC17:
 1262 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1262      6B696E67 
 1262      2041542B 
 1262      43524547 
 1262      3F00
 1263 0242 0000     		.align	2
 1264              	.LC18:
 1265 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1265      5245473F 
 1265      0D00
 1266 024e 0000     		.align	2
 1267              	.LC19:
 1268 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1268      61637469 
 1268      6E672073 
 1268      7472696E 
 1268      67204154 
 1269 026b 00       		.align	2
 1270              	.LC20:
 1271 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1271      5F726563 
 1271      65697665 
 1271      645F7374 
 1271      72696E67 
 1272 0285 000000   		.align	2
 1273              	.LC21:
 1274 0288 0D00     		.ascii	"\015\000"
 1275 028a 0000     		.align	2
 1276              	.LC22:
 1277 028c 3A2000   		.ascii	": \000"
 1278 028f 00       		.align	2
 1279              	.LC23:
 1280 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1280      73746572 
 1280      65642074 
 1280      6F206E65 
 1280      74776F72 
 1281              		.align	2
 1282              	.LC24:
 1283 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1283      20657874 
 1283      72616369 
 1283      6E672073 
 1283      7472696E 
 1284 02cf 00       		.align	2
 1285              	.LC25:
 1286 02d0 302C3100 		.ascii	"0,1\000"
 1287              		.align	2
 1288              	.LC26:
 1289 02d4 302C3500 		.ascii	"0,5\000"
 1290              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1291              		.align	2
 1292              		.global	is_connected_to_cell_network
 1293              		.thumb
 1294              		.thumb_func
 1295              		.type	is_connected_to_cell_network, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 32


 1296              	is_connected_to_cell_network:
 1297              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1298              		.loc 1 373 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 16
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302 0000 80B5     		push	{r7, lr}
 1303              		.cfi_def_cfa_offset 8
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 84B0     		sub	sp, sp, #16
 1307              		.cfi_def_cfa_offset 24
 1308 0004 00AF     		add	r7, sp, #0
 1309              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1310              		.loc 1 375 0
 1311 0006 2049     		ldr	r1, .L82
 1312 0008 0020     		movs	r0, #0
 1313 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1314              		.loc 1 377 0
 1315 000e 4FF4FA62 		mov	r2, #2000
 1316 0012 1E49     		ldr	r1, .L82+4
 1317 0014 1E48     		ldr	r0, .L82+8
 1318 0016 FFF7FEFF 		bl	at_write_command
 1319 001a 0346     		mov	r3, r0
 1320 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1321              		.loc 1 379 0
 1322 001e 1D49     		ldr	r1, .L82+12
 1323 0020 0020     		movs	r0, #0
 1324 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1325              		.loc 1 380 0
 1326 0026 1C4A     		ldr	r2, .L82+16
 1327 0028 1C49     		ldr	r1, .L82+20
 1328 002a 0020     		movs	r0, #0
 1329 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1330              		.loc 1 383 0
 1331 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1332 0032 002B     		cmp	r3, #0
 1333 0034 23D0     		beq	.L78
 1334              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1335              		.loc 1 386 0
 1336 0036 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 33


 1337 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1338              		.loc 1 388 0
 1339 003a 3B1D     		adds	r3, r7, #4
 1340 003c 184A     		ldr	r2, .L82+24
 1341 003e 1949     		ldr	r1, .L82+28
 1342 0040 1548     		ldr	r0, .L82+16
 1343 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1344              		.loc 1 389 0
 1345 0046 3B1D     		adds	r3, r7, #4
 1346 0048 1A46     		mov	r2, r3
 1347 004a 1749     		ldr	r1, .L82+32
 1348 004c 0020     		movs	r0, #0
 1349 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1350              		.loc 1 390 0
 1351 0052 1649     		ldr	r1, .L82+36
 1352 0054 0020     		movs	r0, #0
 1353 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1354              		.loc 1 393 0
 1355 005a 3B1D     		adds	r3, r7, #4
 1356 005c 1449     		ldr	r1, .L82+40
 1357 005e 1846     		mov	r0, r3
 1358 0060 FFF7FEFF 		bl	strstr
 1359 0064 0346     		mov	r3, r0
 1360 0066 002B     		cmp	r3, #0
 1361 0068 07D1     		bne	.L79
 1362              		.loc 1 393 0 is_stmt 0 discriminator 1
 1363 006a 3B1D     		adds	r3, r7, #4
 1364 006c 1149     		ldr	r1, .L82+44
 1365 006e 1846     		mov	r0, r3
 1366 0070 FFF7FEFF 		bl	strstr
 1367 0074 0346     		mov	r3, r0
 1368 0076 002B     		cmp	r3, #0
 1369 0078 01D0     		beq	.L78
 1370              	.L79:
 394:modem.c       ****             return 1u;
 1371              		.loc 1 394 0 is_stmt 1
 1372 007a 0123     		movs	r3, #1
 1373 007c 00E0     		b	.L81
 1374              	.L78:
 1375              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1376              		.loc 1 398 0
 1377 007e 0023     		movs	r3, #0
 1378              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1379              		.loc 1 400 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 34


 1380 0080 1846     		mov	r0, r3
 1381 0082 1037     		adds	r7, r7, #16
 1382              		.cfi_def_cfa_offset 8
 1383 0084 BD46     		mov	sp, r7
 1384              		.cfi_def_cfa_register 13
 1385              		@ sp needed
 1386 0086 80BD     		pop	{r7, pc}
 1387              	.L83:
 1388              		.align	2
 1389              	.L82:
 1390 0088 30020000 		.word	.LC17
 1391 008c 00000000 		.word	.LC0
 1392 0090 44020000 		.word	.LC18
 1393 0094 50020000 		.word	.LC19
 1394 0098 00000000 		.word	uart_received_string
 1395 009c 6C020000 		.word	.LC20
 1396 00a0 88020000 		.word	.LC21
 1397 00a4 8C020000 		.word	.LC22
 1398 00a8 90020000 		.word	.LC23
 1399 00ac B0020000 		.word	.LC24
 1400 00b0 D0020000 		.word	.LC25
 1401 00b4 D4020000 		.word	.LC26
 1402              		.cfi_endproc
 1403              	.LFE76:
 1404              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1405              		.section	.rodata
 1406              		.align	2
 1407              	.LC27:
 1408 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1408      47414354 
 1408      3D312C31 
 1408      0D0A00
 1409              		.section	.text.set_up_internet_connection,"ax",%progbits
 1410              		.align	2
 1411              		.global	set_up_internet_connection
 1412              		.thumb
 1413              		.thumb_func
 1414              		.type	set_up_internet_connection, %function
 1415              	set_up_internet_connection:
 1416              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1417              		.loc 1 403 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 0000 80B5     		push	{r7, lr}
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 7, -8
 1424              		.cfi_offset 14, -4
 1425 0002 00AF     		add	r7, sp, #0
 1426              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 35


 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1427              		.loc 1 414 0
 1428 0004 4FF47A72 		mov	r2, #1000
 1429 0008 0249     		ldr	r1, .L85
 1430 000a 0348     		ldr	r0, .L85+4
 1431 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1432              		.loc 1 416 0
 1433 0010 00BF     		nop
 1434 0012 80BD     		pop	{r7, pc}
 1435              	.L86:
 1436              		.align	2
 1437              	.L85:
 1438 0014 00000000 		.word	.LC0
 1439 0018 D8020000 		.word	.LC27
 1440              		.cfi_endproc
 1441              	.LFE77:
 1442              		.size	set_up_internet_connection, .-set_up_internet_connection
 1443              		.section	.rodata
 1444 02e7 00       		.align	2
 1445              	.LC28:
 1446 02e8 312C3100 		.ascii	"1,1\000"
 1447              		.align	2
 1448              	.LC29:
 1449 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1449      47414354 
 1449      3F0D00
 1450              		.section	.text.is_connected_to_internet,"ax",%progbits
 1451              		.align	2
 1452              		.global	is_connected_to_internet
 1453              		.thumb
 1454              		.thumb_func
 1455              		.type	is_connected_to_internet, %function
 1456              	is_connected_to_internet:
 1457              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1458              		.loc 1 419 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462 0000 80B5     		push	{r7, lr}
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 00AF     		add	r7, sp, #0
 1467              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 36


 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1468              		.loc 1 424 0
 1469 0004 4FF4FA62 		mov	r2, #2000
 1470 0008 0549     		ldr	r1, .L90
 1471 000a 0648     		ldr	r0, .L90+4
 1472 000c FFF7FEFF 		bl	at_write_command
 1473 0010 0346     		mov	r3, r0
 1474 0012 002B     		cmp	r3, #0
 1475 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1476              		.loc 1 425 0
 1477 0016 0123     		movs	r3, #1
 1478 0018 00E0     		b	.L89
 1479              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1480              		.loc 1 427 0
 1481 001a 0023     		movs	r3, #0
 1482              	.L89:
 428:modem.c       **** }
 1483              		.loc 1 428 0
 1484 001c 1846     		mov	r0, r3
 1485 001e 80BD     		pop	{r7, pc}
 1486              	.L91:
 1487              		.align	2
 1488              	.L90:
 1489 0020 E8020000 		.word	.LC28
 1490 0024 EC020000 		.word	.LC29
 1491              		.cfi_endproc
 1492              	.LFE78:
 1493              		.size	is_connected_to_internet, .-is_connected_to_internet
 1494              		.section	.rodata
 1495 02f7 00       		.align	2
 1496              	.LC30:
 1497 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1497      4553510D 
 1497      00
 1498 0301 000000   		.align	2
 1499              	.LC31:
 1500 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1500      4553513A 
 1500      2025642C 
 1500      25642C25 
 1500      642C2564 
 1501              		.section	.text.get_cell_network_stats,"ax",%progbits
 1502              		.align	2
 1503              		.global	get_cell_network_stats
 1504              		.thumb
 1505              		.thumb_func
 1506              		.type	get_cell_network_stats, %function
 1507              	get_cell_network_stats:
 1508              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1509              		.loc 1 430 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 37


 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 8
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 86B0     		sub	sp, sp, #24
 1518              		.cfi_def_cfa_offset 32
 1519 0004 04AF     		add	r7, sp, #16
 1520              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1521              		.loc 1 432 0
 1522 0006 154B     		ldr	r3, .L93
 1523 0008 FF22     		movs	r2, #255
 1524 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1525              		.loc 1 433 0
 1526 000c 134B     		ldr	r3, .L93
 1527 000e FF22     		movs	r2, #255
 1528 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1529              		.loc 1 434 0
 1530 0012 124B     		ldr	r3, .L93
 1531 0014 FF22     		movs	r2, #255
 1532 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1533              		.loc 1 435 0
 1534 0018 104B     		ldr	r3, .L93
 1535 001a FF22     		movs	r2, #255
 1536 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1537              		.loc 1 436 0
 1538 001e 0F4B     		ldr	r3, .L93
 1539 0020 FF22     		movs	r2, #255
 1540 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1541              		.loc 1 437 0
 1542 0024 0D4B     		ldr	r3, .L93
 1543 0026 FF22     		movs	r2, #255
 1544 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1545              		.loc 1 440 0
 1546 002a 4FF4FA62 		mov	r2, #2000
 1547 002e 0C49     		ldr	r1, .L93+4
 1548 0030 0C48     		ldr	r0, .L93+8
 1549 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1550              		.loc 1 443 0
 1551 0036 0C4B     		ldr	r3, .L93+12
 1552 0038 0393     		str	r3, [sp, #12]
 1553 003a 0C4B     		ldr	r3, .L93+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 38


 1554 003c 0293     		str	r3, [sp, #8]
 1555 003e 0C4B     		ldr	r3, .L93+20
 1556 0040 0193     		str	r3, [sp, #4]
 1557 0042 0C4B     		ldr	r3, .L93+24
 1558 0044 0093     		str	r3, [sp]
 1559 0046 0C4B     		ldr	r3, .L93+28
 1560 0048 044A     		ldr	r2, .L93
 1561 004a 0C49     		ldr	r1, .L93+32
 1562 004c 0C48     		ldr	r0, .L93+36
 1563 004e FFF7FEFF 		bl	sscanf
 1564 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1565              		.loc 1 458 0
 1566 0054 00BF     		nop
 1567 0056 0837     		adds	r7, r7, #8
 1568              		.cfi_def_cfa_offset 8
 1569 0058 BD46     		mov	sp, r7
 1570              		.cfi_def_cfa_register 13
 1571              		@ sp needed
 1572 005a 80BD     		pop	{r7, pc}
 1573              	.L94:
 1574              		.align	2
 1575              	.L93:
 1576 005c 00000000 		.word	modem_stats
 1577 0060 00000000 		.word	.LC0
 1578 0064 F8020000 		.word	.LC30
 1579 0068 14000000 		.word	modem_stats+20
 1580 006c 10000000 		.word	modem_stats+16
 1581 0070 0C000000 		.word	modem_stats+12
 1582 0074 08000000 		.word	modem_stats+8
 1583 0078 04000000 		.word	modem_stats+4
 1584 007c 04030000 		.word	.LC31
 1585 0080 00000000 		.word	uart_received_string
 1586              		.cfi_endproc
 1587              	.LFE79:
 1588              		.size	get_cell_network_stats, .-get_cell_network_stats
 1589              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1590              		.align	2
 1591              		.global	updatable_parameters_initialize
 1592              		.thumb
 1593              		.thumb_func
 1594              		.type	updatable_parameters_initialize, %function
 1595              	updatable_parameters_initialize:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 39


 1596              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1597              		.loc 1 461 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602 0000 80B4     		push	{r7}
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 7, -4
 1605 0002 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 462:modem.c       ****     //updatable_parameters.node_type = NODE_TYPE_DEPTH;
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1607              		.loc 1 463 0
 1608 0004 094B     		ldr	r3, .L96
 1609 0006 0122     		movs	r2, #1
 1610 0008 1A70     		strb	r2, [r3]
 464:modem.c       ****     //updatable_parameters.measure_time = 1u;
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1611              		.loc 1 465 0
 1612 000a 084B     		ldr	r3, .L96
 1613 000c 0122     		movs	r2, #1
 1614 000e 9A70     		strb	r2, [r3, #2]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1615              		.loc 1 466 0
 1616 0010 064B     		ldr	r3, .L96
 1617 0012 0122     		movs	r2, #1
 1618 0014 DA70     		strb	r2, [r3, #3]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     updatable_parameters.App_LED_freq = 120u; // if turn on, change to higher frequency
 1619              		.loc 1 469 0
 1620 0016 054B     		ldr	r3, .L96
 1621 0018 7822     		movs	r2, #120
 1622 001a 1A71     		strb	r2, [r3, #4]
 470:modem.c       ****     updatable_parameters.Level_Sensor_freq = 120u; 
 1623              		.loc 1 470 0
 1624 001c 034B     		ldr	r3, .L96
 1625 001e 7822     		movs	r2, #120
 1626 0020 5A71     		strb	r2, [r3, #5]
 471:modem.c       **** }
 1627              		.loc 1 471 0
 1628 0022 00BF     		nop
 1629 0024 BD46     		mov	sp, r7
 1630              		.cfi_def_cfa_register 13
 1631              		@ sp needed
 1632 0026 80BC     		pop	{r7}
 1633              		.cfi_restore 7
 1634              		.cfi_def_cfa_offset 0
 1635 0028 7047     		bx	lr
 1636              	.L97:
 1637 002a 00BF     		.align	2
 1638              	.L96:
 1639 002c 00000000 		.word	updatable_parameters
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 40


 1640              		.cfi_endproc
 1641              	.LFE80:
 1642              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1643              		.section	.rodata
 1644 0322 0000     		.align	2
 1645              	.LC32:
 1646 0324 53494D5F 		.ascii	"SIM_Type: \000"
 1646      54797065 
 1646      3A2000
 1647 032f 00       		.align	2
 1648              	.LC33:
 1649 0330 53616D70 		.ascii	"Sample_Freq: \000"
 1649      6C655F46 
 1649      7265713A 
 1649      2000
 1650 033e 0000     		.align	2
 1651              	.LC34:
 1652 0340 5265706F 		.ascii	"Report_Freq: \000"
 1652      72745F46 
 1652      7265713A 
 1652      2000
 1653 034e 0000     		.align	2
 1654              	.LC35:
 1655 0350 44656275 		.ascii	"Debug_Freq: \000"
 1655      675F4672 
 1655      65713A20 
 1655      00
 1656 035d 000000   		.align	2
 1657              	.LC36:
 1658 0360 4170705F 		.ascii	"App_LED: \000"
 1658      4C45443A 
 1658      2000
 1659 036a 0000     		.align	2
 1660              	.LC37:
 1661 036c 4C657665 		.ascii	"Level_Sensor: \000"
 1661      6C5F5365 
 1661      6E736F72 
 1661      3A2000
 1662 037b 00       		.align	2
 1663              	.LC38:
 1664 037c 256400   		.ascii	"%d\000"
 1665 037f 00       		.align	2
 1666              	.LC39:
 1667 0380 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1667      74797065 
 1667      20636861 
 1667      6E676564 
 1667      20746F3A 
 1668 039a 0000     		.align	2
 1669              	.LC40:
 1670 039c 436F756C 		.ascii	"Could not change SIM type.\000"
 1670      64206E6F 
 1670      74206368 
 1670      616E6765 
 1670      2053494D 
 1671 03b7 00       		.align	2
 1672              	.LC41:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 41


 1673 03b8 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1673      64206E6F 
 1673      74207061 
 1673      72736520 
 1673      6E657720 
 1674 03e6 0000     		.align	2
 1675              	.LC42:
 1676 03e8 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1676      7274696E 
 1676      67206672 
 1676      65717565 
 1676      6E637920 
 1677 040d 000000   		.align	2
 1678              	.LC43:
 1679 0410 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1679      64206E6F 
 1679      74207061 
 1679      72736520 
 1679      6E657720 
 1680 043f 00       		.align	2
 1681              	.LC44:
 1682 0440 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1682      67207072 
 1682      696E7469 
 1682      6E672066 
 1682      72657175 
 1683 046a 0000     		.align	2
 1684              	.LC45:
 1685 046c 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1685      64206E6F 
 1685      74207061 
 1685      72736520 
 1685      6E657720 
 1686 049b 00       		.align	2
 1687              	.LC46:
 1688 049c 46726571 		.ascii	"Freq: \000"
 1688      3A2000
 1689 04a3 00       		.align	2
 1690              	.LC47:
 1691 04a4 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1691      4C454420 
 1691      66726571 
 1691      75656E63 
 1691      79206368 
 1692 04c7 00       		.align	2
 1693              	.LC48:
 1694 04c8 436F756C 		.ascii	"Could not parse new LED frequency value.\000"
 1694      64206E6F 
 1694      74207061 
 1694      72736520 
 1694      6E657720 
 1695 04f1 000000   		.align	2
 1696              	.LC49:
 1697 04f4 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1697      6C5F5365 
 1697      6E736F72 
 1697      20667265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 42


 1697      7175656E 
 1698              		.align	2
 1699              	.LC50:
 1700 051c 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1700      64206E6F 
 1700      74207061 
 1700      72736520 
 1700      6E657720 
 1701              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1702              		.align	2
 1703              		.global	get_updated_parameters_from_malcom
 1704              		.thumb
 1705              		.thumb_func
 1706              		.type	get_updated_parameters_from_malcom, %function
 1707              	get_updated_parameters_from_malcom:
 1708              	.LFB81:
 472:modem.c       **** 
 473:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 474:modem.c       **** void get_updated_parameters_from_malcom(){
 1709              		.loc 1 474 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 384
 1712              		@ frame_needed = 1, uses_anonymous_args = 0
 1713 0000 90B5     		push	{r4, r7, lr}
 1714              		.cfi_def_cfa_offset 12
 1715              		.cfi_offset 4, -12
 1716              		.cfi_offset 7, -8
 1717              		.cfi_offset 14, -4
 1718 0002 E1B0     		sub	sp, sp, #388
 1719              		.cfi_def_cfa_offset 400
 1720 0004 00AF     		add	r7, sp, #0
 1721              		.cfi_def_cfa_register 7
 475:modem.c       ****     
 476:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 477:modem.c       ****     //char s_node_type[10];
 478:modem.c       ****     char s_sim_type[10];
 479:modem.c       ****     char s_sample_freq[10];
 480:modem.c       ****     char s_report_freq[10];
 481:modem.c       ****     char s_debug_freq[10];
 482:modem.c       ****     
 483:modem.c       ****     //apps
 484:modem.c       ****     char s_app_led[100];
 485:modem.c       ****     s_app_led[0] = '\0';
 1722              		.loc 1 485 0
 1723 0006 0023     		movs	r3, #0
 1724 0008 87F8EC30 		strb	r3, [r7, #236]
 486:modem.c       ****     
 487:modem.c       ****     char s_level_sensor[100];
 488:modem.c       ****     s_level_sensor[0] = '\0';
 1725              		.loc 1 488 0
 1726 000c 0023     		movs	r3, #0
 1727 000e 87F88830 		strb	r3, [r7, #136]
 489:modem.c       ****     
 490:modem.c       ****     //s_node_type[0] = '\0';
 491:modem.c       ****     s_sim_type[0] = '\0';
 1728              		.loc 1 491 0
 1729 0012 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 43


 1730 0014 87F87431 		strb	r3, [r7, #372]
 492:modem.c       ****     s_sample_freq[0] = '\0';
 1731              		.loc 1 492 0
 1732 0018 0023     		movs	r3, #0
 1733 001a 87F86831 		strb	r3, [r7, #360]
 493:modem.c       ****     s_report_freq[0] = '\0';
 1734              		.loc 1 493 0
 1735 001e 0023     		movs	r3, #0
 1736 0020 87F85C31 		strb	r3, [r7, #348]
 494:modem.c       ****     s_debug_freq[0] = '\0';
 1737              		.loc 1 494 0
 1738 0024 0023     		movs	r3, #0
 1739 0026 87F85031 		strb	r3, [r7, #336]
 495:modem.c       ****     
 496:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 497:modem.c       ****     //extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 498:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1740              		.loc 1 498 0
 1741 002a 07F5BA73 		add	r3, r7, #372
 1742 002e 864A     		ldr	r2, .L111
 1743 0030 8649     		ldr	r1, .L111+4
 1744 0032 8748     		ldr	r0, .L111+8
 1745 0034 FFF7FEFF 		bl	extract_string
 499:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1746              		.loc 1 499 0
 1747 0038 07F5B473 		add	r3, r7, #360
 1748 003c 824A     		ldr	r2, .L111
 1749 003e 8549     		ldr	r1, .L111+12
 1750 0040 8348     		ldr	r0, .L111+8
 1751 0042 FFF7FEFF 		bl	extract_string
 500:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1752              		.loc 1 500 0
 1753 0046 07F5AE73 		add	r3, r7, #348
 1754 004a 7F4A     		ldr	r2, .L111
 1755 004c 8249     		ldr	r1, .L111+16
 1756 004e 8048     		ldr	r0, .L111+8
 1757 0050 FFF7FEFF 		bl	extract_string
 501:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1758              		.loc 1 501 0
 1759 0054 07F5A873 		add	r3, r7, #336
 1760 0058 7B4A     		ldr	r2, .L111
 1761 005a 8049     		ldr	r1, .L111+20
 1762 005c 7C48     		ldr	r0, .L111+8
 1763 005e FFF7FEFF 		bl	extract_string
 502:modem.c       ****     
 503:modem.c       ****     //app features
 504:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1764              		.loc 1 504 0
 1765 0062 07F1EC03 		add	r3, r7, #236
 1766 0066 784A     		ldr	r2, .L111
 1767 0068 7D49     		ldr	r1, .L111+24
 1768 006a 7948     		ldr	r0, .L111+8
 1769 006c FFF7FEFF 		bl	extract_string
 505:modem.c       ****     App_LED_Update(s_app_led);
 1770              		.loc 1 505 0
 1771 0070 07F1EC03 		add	r3, r7, #236
 1772 0074 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 44


 1773 0076 FFF7FEFF 		bl	App_LED_Update
 506:modem.c       ****     
 507:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1774              		.loc 1 507 0
 1775 007a 07F18803 		add	r3, r7, #136
 1776 007e 724A     		ldr	r2, .L111
 1777 0080 7849     		ldr	r1, .L111+28
 1778 0082 7348     		ldr	r0, .L111+8
 1779 0084 FFF7FEFF 		bl	extract_string
 508:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1780              		.loc 1 508 0
 1781 0088 07F18803 		add	r3, r7, #136
 1782 008c 1846     		mov	r0, r3
 1783 008e FFF7FEFF 		bl	Level_Sensor_Update
 509:modem.c       ****     
 510:modem.c       ****     // Create variables for what is sent back from the server
 511:modem.c       ****     int sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq;
 512:modem.c       ****     
 513:modem.c       ****     // Scan character arrays and save values 
 514:modem.c       ****     /*
 515:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 516:modem.c       ****         updatable_parameters.node_type = node_type;
 517:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 518:modem.c       ****     }else{
 519:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 520:modem.c       ****     }
 521:modem.c       ****     */
 522:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1784              		.loc 1 522 0
 1785 0092 07F18402 		add	r2, r7, #132
 1786 0096 07F5BA73 		add	r3, r7, #372
 1787 009a 7349     		ldr	r1, .L111+32
 1788 009c 1846     		mov	r0, r3
 1789 009e FFF7FEFF 		bl	sscanf
 1790 00a2 0346     		mov	r3, r0
 1791 00a4 012B     		cmp	r3, #1
 1792 00a6 10D1     		bne	.L99
 523:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1793              		.loc 1 523 0
 1794 00a8 D7F88430 		ldr	r3, [r7, #132]
 1795 00ac 002B     		cmp	r3, #0
 1796 00ae 14BF     		ite	ne
 1797 00b0 0123     		movne	r3, #1
 1798 00b2 0023     		moveq	r3, #0
 1799 00b4 DAB2     		uxtb	r2, r3
 1800 00b6 6D4B     		ldr	r3, .L111+36
 1801 00b8 1A70     		strb	r2, [r3]
 524:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1802              		.loc 1 524 0
 1803 00ba D7F88430 		ldr	r3, [r7, #132]
 1804 00be 1A46     		mov	r2, r3
 1805 00c0 6B49     		ldr	r1, .L111+40
 1806 00c2 0020     		movs	r0, #0
 1807 00c4 FFF7FEFF 		bl	printNotif
 1808 00c8 03E0     		b	.L100
 1809              	.L99:
 525:modem.c       ****     }else{
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 45


 526:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1810              		.loc 1 526 0
 1811 00ca 6A49     		ldr	r1, .L111+44
 1812 00cc 0220     		movs	r0, #2
 1813 00ce FFF7FEFF 		bl	printNotif
 1814              	.L100:
 527:modem.c       ****     }
 528:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1815              		.loc 1 528 0
 1816 00d2 07F18002 		add	r2, r7, #128
 1817 00d6 07F5B473 		add	r3, r7, #360
 1818 00da 6349     		ldr	r1, .L111+32
 1819 00dc 1846     		mov	r0, r3
 1820 00de FFF7FEFF 		bl	sscanf
 1821 00e2 0346     		mov	r3, r0
 1822 00e4 012B     		cmp	r3, #1
 1823 00e6 03D0     		beq	.L101
 529:modem.c       ****         //updatable_parameters.measure_time = sample_freq;
 530:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 531:modem.c       ****         //alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE
 532:modem.c       ****         //printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 533:modem.c       ****     }else{
 534:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1824              		.loc 1 534 0
 1825 00e8 6349     		ldr	r1, .L111+48
 1826 00ea 0220     		movs	r0, #2
 1827 00ec FFF7FEFF 		bl	printNotif
 1828              	.L101:
 535:modem.c       ****     }
 536:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1829              		.loc 1 536 0
 1830 00f0 07F17C02 		add	r2, r7, #124
 1831 00f4 07F5AE73 		add	r3, r7, #348
 1832 00f8 5B49     		ldr	r1, .L111+32
 1833 00fa 1846     		mov	r0, r3
 1834 00fc FFF7FEFF 		bl	sscanf
 1835 0100 0346     		mov	r3, r0
 1836 0102 012B     		cmp	r3, #1
 1837 0104 1DD1     		bne	.L102
 537:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1838              		.loc 1 537 0
 1839 0106 07F17C03 		add	r3, r7, #124
 1840 010a 1B68     		ldr	r3, [r3]
 1841 010c DAB2     		uxtb	r2, r3
 1842 010e 574B     		ldr	r3, .L111+36
 1843 0110 9A70     		strb	r2, [r3, #2]
 538:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 539:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1844              		.loc 1 539 0
 1845 0112 564B     		ldr	r3, .L111+36
 1846 0114 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1847 0116 99B2     		uxth	r1, r3
 1848 0118 584C     		ldr	r4, .L111+52
 1849 011a 3846     		mov	r0, r7
 1850 011c 0723     		movs	r3, #7
 1851 011e 0122     		movs	r2, #1
 1852 0120 FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 46


 1853 0124 3A46     		mov	r2, r7
 1854 0126 2346     		mov	r3, r4
 1855 0128 1168     		ldr	r1, [r2]	@ unaligned
 1856 012a 1960     		str	r1, [r3]	@ unaligned
 1857 012c 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1858 012e 9A80     		strh	r2, [r3, #4]	@ unaligned
 540:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1859              		.loc 1 540 0
 1860 0130 07F17C03 		add	r3, r7, #124
 1861 0134 1B68     		ldr	r3, [r3]
 1862 0136 1A46     		mov	r2, r3
 1863 0138 5149     		ldr	r1, .L111+56
 1864 013a 0020     		movs	r0, #0
 1865 013c FFF7FEFF 		bl	printNotif
 1866 0140 03E0     		b	.L103
 1867              	.L102:
 541:modem.c       ****         }else{
 542:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1868              		.loc 1 542 0
 1869 0142 5049     		ldr	r1, .L111+60
 1870 0144 0220     		movs	r0, #2
 1871 0146 FFF7FEFF 		bl	printNotif
 1872              	.L103:
 543:modem.c       ****     }
 544:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1873              		.loc 1 544 0
 1874 014a 07F17802 		add	r2, r7, #120
 1875 014e 07F5A873 		add	r3, r7, #336
 1876 0152 4549     		ldr	r1, .L111+32
 1877 0154 1846     		mov	r0, r3
 1878 0156 FFF7FEFF 		bl	sscanf
 1879 015a 0346     		mov	r3, r0
 1880 015c 012B     		cmp	r3, #1
 1881 015e 0ED1     		bne	.L104
 545:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1882              		.loc 1 545 0
 1883 0160 07F17803 		add	r3, r7, #120
 1884 0164 1B68     		ldr	r3, [r3]
 1885 0166 DAB2     		uxtb	r2, r3
 1886 0168 404B     		ldr	r3, .L111+36
 1887 016a DA70     		strb	r2, [r3, #3]
 546:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1888              		.loc 1 546 0
 1889 016c 07F17803 		add	r3, r7, #120
 1890 0170 1B68     		ldr	r3, [r3]
 1891 0172 1A46     		mov	r2, r3
 1892 0174 4449     		ldr	r1, .L111+64
 1893 0176 0020     		movs	r0, #0
 1894 0178 FFF7FEFF 		bl	printNotif
 1895 017c 03E0     		b	.L105
 1896              	.L104:
 547:modem.c       ****     }else{
 548:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 1897              		.loc 1 548 0
 1898 017e 4349     		ldr	r1, .L111+68
 1899 0180 0220     		movs	r0, #2
 1900 0182 FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 47


 1901              	.L105:
 549:modem.c       ****     }
 550:modem.c       ****     
 551:modem.c       ****     // app alarm frequency updates
 552:modem.c       ****     char temp[100];
 553:modem.c       ****     
 554:modem.c       ****     strcpy(temp,s_app_led);
 1902              		.loc 1 554 0
 1903 0186 07F1EC02 		add	r2, r7, #236
 1904 018a 07F10C03 		add	r3, r7, #12
 1905 018e 1146     		mov	r1, r2
 1906 0190 1846     		mov	r0, r3
 1907 0192 FFF7FEFF 		bl	strcpy
 555:modem.c       ****     extract_string(temp,"Freq: ","\r",s_app_led);
 1908              		.loc 1 555 0
 1909 0196 07F1EC03 		add	r3, r7, #236
 1910 019a 07F10C00 		add	r0, r7, #12
 1911 019e 2A4A     		ldr	r2, .L111
 1912 01a0 3B49     		ldr	r1, .L111+72
 1913 01a2 FFF7FEFF 		bl	extract_string
 556:modem.c       ****     if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 1914              		.loc 1 556 0
 1915 01a6 07F17402 		add	r2, r7, #116
 1916 01aa 07F1EC03 		add	r3, r7, #236
 1917 01ae 2E49     		ldr	r1, .L111+32
 1918 01b0 1846     		mov	r0, r3
 1919 01b2 FFF7FEFF 		bl	sscanf
 1920 01b6 0346     		mov	r3, r0
 1921 01b8 012B     		cmp	r3, #1
 1922 01ba 0ED1     		bne	.L106
 557:modem.c       ****         updatable_parameters.App_LED_freq = app_led_freq;
 1923              		.loc 1 557 0
 1924 01bc 07F17403 		add	r3, r7, #116
 1925 01c0 1B68     		ldr	r3, [r3]
 1926 01c2 DAB2     		uxtb	r2, r3
 1927 01c4 294B     		ldr	r3, .L111+36
 1928 01c6 1A71     		strb	r2, [r3, #4]
 558:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_freq);
 1929              		.loc 1 558 0
 1930 01c8 07F17403 		add	r3, r7, #116
 1931 01cc 1B68     		ldr	r3, [r3]
 1932 01ce 1A46     		mov	r2, r3
 1933 01d0 3049     		ldr	r1, .L111+76
 1934 01d2 0020     		movs	r0, #0
 1935 01d4 FFF7FEFF 		bl	printNotif
 1936 01d8 03E0     		b	.L107
 1937              	.L106:
 559:modem.c       ****     } else{
 560:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new LED frequency value.");
 1938              		.loc 1 560 0
 1939 01da 2F49     		ldr	r1, .L111+80
 1940 01dc 0220     		movs	r0, #2
 1941 01de FFF7FEFF 		bl	printNotif
 1942              	.L107:
 561:modem.c       ****     }
 562:modem.c       ****         
 563:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 48


 564:modem.c       ****     strcpy(temp,s_level_sensor);
 1943              		.loc 1 564 0
 1944 01e2 07F18802 		add	r2, r7, #136
 1945 01e6 07F10C03 		add	r3, r7, #12
 1946 01ea 1146     		mov	r1, r2
 1947 01ec 1846     		mov	r0, r3
 1948 01ee FFF7FEFF 		bl	strcpy
 565:modem.c       ****     extract_string(temp,"Freq: ","\r",s_level_sensor); // grab level app frequency
 1949              		.loc 1 565 0
 1950 01f2 07F18803 		add	r3, r7, #136
 1951 01f6 07F10C00 		add	r0, r7, #12
 1952 01fa 134A     		ldr	r2, .L111
 1953 01fc 2449     		ldr	r1, .L111+72
 1954 01fe FFF7FEFF 		bl	extract_string
 566:modem.c       ****     if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 1955              		.loc 1 566 0
 1956 0202 07F17002 		add	r2, r7, #112
 1957 0206 07F18803 		add	r3, r7, #136
 1958 020a 1749     		ldr	r1, .L111+32
 1959 020c 1846     		mov	r0, r3
 1960 020e FFF7FEFF 		bl	sscanf
 1961 0212 0346     		mov	r3, r0
 1962 0214 012B     		cmp	r3, #1
 1963 0216 0ED1     		bne	.L108
 567:modem.c       ****         updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 1964              		.loc 1 567 0
 1965 0218 07F17003 		add	r3, r7, #112
 1966 021c 1B68     		ldr	r3, [r3]
 1967 021e DAB2     		uxtb	r2, r3
 1968 0220 124B     		ldr	r3, .L111+36
 1969 0222 5A71     		strb	r2, [r3, #5]
 568:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_led_freq);
 1970              		.loc 1 568 0
 1971 0224 07F17403 		add	r3, r7, #116
 1972 0228 1B68     		ldr	r3, [r3]
 1973 022a 1A46     		mov	r2, r3
 1974 022c 1B49     		ldr	r1, .L111+84
 1975 022e 0020     		movs	r0, #0
 1976 0230 FFF7FEFF 		bl	printNotif
 569:modem.c       ****     } else{
 570:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value.");
 571:modem.c       ****     }
 572:modem.c       ****     
 573:modem.c       **** }
 1977              		.loc 1 573 0
 1978 0234 03E0     		b	.L110
 1979              	.L108:
 570:modem.c       ****     }
 1980              		.loc 1 570 0
 1981 0236 1A49     		ldr	r1, .L111+88
 1982 0238 0220     		movs	r0, #2
 1983 023a FFF7FEFF 		bl	printNotif
 1984              	.L110:
 1985              		.loc 1 573 0
 1986 023e 00BF     		nop
 1987 0240 07F5C277 		add	r7, r7, #388
 1988              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 49


 1989 0244 BD46     		mov	sp, r7
 1990              		.cfi_def_cfa_register 13
 1991              		@ sp needed
 1992 0246 90BD     		pop	{r4, r7, pc}
 1993              	.L112:
 1994              		.align	2
 1995              	.L111:
 1996 0248 88020000 		.word	.LC21
 1997 024c 24030000 		.word	.LC32
 1998 0250 00000000 		.word	uart_received_string
 1999 0254 30030000 		.word	.LC33
 2000 0258 40030000 		.word	.LC34
 2001 025c 50030000 		.word	.LC35
 2002 0260 60030000 		.word	.LC36
 2003 0264 6C030000 		.word	.LC37
 2004 0268 7C030000 		.word	.LC38
 2005 026c 00000000 		.word	updatable_parameters
 2006 0270 80030000 		.word	.LC39
 2007 0274 9C030000 		.word	.LC40
 2008 0278 B8030000 		.word	.LC41
 2009 027c 00000000 		.word	alarmSync
 2010 0280 E8030000 		.word	.LC42
 2011 0284 10040000 		.word	.LC43
 2012 0288 40040000 		.word	.LC44
 2013 028c 6C040000 		.word	.LC45
 2014 0290 9C040000 		.word	.LC46
 2015 0294 A4040000 		.word	.LC47
 2016 0298 C8040000 		.word	.LC48
 2017 029c F4040000 		.word	.LC49
 2018 02a0 1C050000 		.word	.LC50
 2019              		.cfi_endproc
 2020              	.LFE81:
 2021              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2022              		.section	.rodata
 2023 054e 0000     		.align	2
 2024              	.LC51:
 2025 0550 41542343 		.ascii	"AT#CGMM\015\000"
 2025      474D4D0D 
 2025      00
 2026 0559 000000   		.align	2
 2027              	.LC52:
 2028 055c 4D6F6465 		.ascii	"Modem Model: %s\000"
 2028      6D204D6F 
 2028      64656C3A 
 2028      20257300 
 2029              		.align	2
 2030              	.LC53:
 2031 056c 41542343 		.ascii	"AT#CCID\015\000"
 2031      4349440D 
 2031      00
 2032 0575 000000   		.align	2
 2033              	.LC54:
 2034 0578 53494D20 		.ascii	"SIM ID: %s\000"
 2034      49443A20 
 2034      257300
 2035 0583 00       		.align	2
 2036              	.LC55:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 50


 2037 0584 41542B43 		.ascii	"AT+CGSN\015\000"
 2037      47534E0D 
 2037      00
 2038 058d 000000   		.align	2
 2039              	.LC56:
 2040 0590 494D4549 		.ascii	"IMEI: %s\000"
 2040      3A202573 
 2040      00
 2041 0599 000000   		.align	2
 2042              	.LC57:
 2043 059c 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2043      4744434F 
 2043      4E543D31 
 2043      2C224950 
 2043      222C2277 
 2044 05c5 00       		.ascii	"\000"
 2045 05c6 0000     		.align	2
 2046              	.LC58:
 2047 05c8 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2047      4744434F 
 2047      4E543D31 
 2047      2C224950 
 2047      222C2273 
 2048              		.align	2
 2049              	.LC59:
 2050 05e4 41542B43 		.ascii	"AT+CFUN?\015\000"
 2050      46554E3F 
 2050      0D00
 2051 05ee 0000     		.align	2
 2052              	.LC60:
 2053 05f0 4346554E 		.ascii	"CFUN: %s\000"
 2053      3A202573 
 2053      00
 2054 05f9 000000   		.align	2
 2055              	.LC61:
 2056 05fc 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2056      46554E3D 
 2056      310D00
 2057              		.section	.text.modem_configure_settings,"ax",%progbits
 2058              		.align	2
 2059              		.global	modem_configure_settings
 2060              		.thumb
 2061              		.thumb_func
 2062              		.type	modem_configure_settings, %function
 2063              	modem_configure_settings:
 2064              	.LFB82:
 574:modem.c       ****     
 575:modem.c       **** // Configure the modem settings
 576:modem.c       **** void modem_configure_settings(){
 2065              		.loc 1 576 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069 0000 80B5     		push	{r7, lr}
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 51


 2073 0002 84B0     		sub	sp, sp, #16
 2074              		.cfi_def_cfa_offset 24
 2075 0004 00AF     		add	r7, sp, #0
 2076              		.cfi_def_cfa_register 7
 577:modem.c       ****     
 578:modem.c       ****     // Save/print modem model ID number
 579:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2077              		.loc 1 579 0
 2078 0006 454B     		ldr	r3, .L122
 2079 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2080 000a 002B     		cmp	r3, #0
 2081 000c 13D1     		bne	.L114
 580:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 581:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2082              		.loc 1 581 0
 2083 000e 4FF4FA62 		mov	r2, #2000
 2084 0012 4349     		ldr	r1, .L122+4
 2085 0014 4348     		ldr	r0, .L122+8
 2086 0016 FFF7FEFF 		bl	at_write_command
 2087 001a 0346     		mov	r3, r0
 2088 001c 002B     		cmp	r3, #0
 2089 001e 0AD0     		beq	.L114
 582:modem.c       ****             // Extract modem model ID number string from the UART
 583:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2090              		.loc 1 583 0
 2091 0020 414B     		ldr	r3, .L122+12
 2092 0022 424A     		ldr	r2, .L122+16
 2093 0024 4249     		ldr	r1, .L122+20
 2094 0026 4348     		ldr	r0, .L122+24
 2095 0028 FFF7FEFF 		bl	extract_string
 584:modem.c       ****             // Print modem model ID number
 585:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2096              		.loc 1 585 0
 2097 002c 3E4A     		ldr	r2, .L122+12
 2098 002e 4249     		ldr	r1, .L122+28
 2099 0030 0020     		movs	r0, #0
 2100 0032 FFF7FEFF 		bl	printNotif
 2101              	.L114:
 586:modem.c       ****         }
 587:modem.c       ****     }
 588:modem.c       ****     
 589:modem.c       ****    // Save/print SIM-card ID
 590:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2102              		.loc 1 590 0
 2103 0036 394B     		ldr	r3, .L122
 2104 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2105 003a 002B     		cmp	r3, #0
 2106 003c 13D1     		bne	.L115
 591:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 592:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2107              		.loc 1 592 0
 2108 003e 4FF4FA62 		mov	r2, #2000
 2109 0042 3749     		ldr	r1, .L122+4
 2110 0044 3D48     		ldr	r0, .L122+32
 2111 0046 FFF7FEFF 		bl	at_write_command
 2112 004a 0346     		mov	r3, r0
 2113 004c 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 52


 2114 004e 0AD0     		beq	.L115
 593:modem.c       ****             // Extract SIM-card ID string from the UART
 594:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2115              		.loc 1 594 0
 2116 0050 324B     		ldr	r3, .L122
 2117 0052 364A     		ldr	r2, .L122+16
 2118 0054 3649     		ldr	r1, .L122+20
 2119 0056 3748     		ldr	r0, .L122+24
 2120 0058 FFF7FEFF 		bl	extract_string
 595:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2121              		.loc 1 595 0
 2122 005c 2F4A     		ldr	r2, .L122
 2123 005e 3849     		ldr	r1, .L122+36
 2124 0060 0020     		movs	r0, #0
 2125 0062 FFF7FEFF 		bl	printNotif
 2126              	.L115:
 596:modem.c       ****         }
 597:modem.c       ****    }
 598:modem.c       **** 
 599:modem.c       ****     // Save/print modem IMEI
 600:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2127              		.loc 1 600 0
 2128 0066 2D4B     		ldr	r3, .L122
 2129 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2130 006c 002B     		cmp	r3, #0
 2131 006e 13D1     		bne	.L116
 601:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 602:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2132              		.loc 1 602 0
 2133 0070 4FF4FA62 		mov	r2, #2000
 2134 0074 2A49     		ldr	r1, .L122+4
 2135 0076 3348     		ldr	r0, .L122+40
 2136 0078 FFF7FEFF 		bl	at_write_command
 2137 007c 0346     		mov	r3, r0
 2138 007e 002B     		cmp	r3, #0
 2139 0080 0AD0     		beq	.L116
 603:modem.c       ****             // Extract modem IMEI number string from the UART
 604:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2140              		.loc 1 604 0
 2141 0082 314B     		ldr	r3, .L122+44
 2142 0084 294A     		ldr	r2, .L122+16
 2143 0086 2A49     		ldr	r1, .L122+20
 2144 0088 2A48     		ldr	r0, .L122+24
 2145 008a FFF7FEFF 		bl	extract_string
 605:modem.c       ****             // Print modem IMEI number
 606:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2146              		.loc 1 606 0
 2147 008e 2E4A     		ldr	r2, .L122+44
 2148 0090 2E49     		ldr	r1, .L122+48
 2149 0092 0020     		movs	r0, #0
 2150 0094 FFF7FEFF 		bl	printNotif
 2151              	.L116:
 607:modem.c       ****         } 
 608:modem.c       ****     }
 609:modem.c       ****     
 610:modem.c       ****     // Configure protocol and cellular end point
 611:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 53


 612:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2152              		.loc 1 612 0
 2153 0098 2D4B     		ldr	r3, .L122+52
 2154 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2155 009c 83F00103 		eor	r3, r3, #1
 2156 00a0 DBB2     		uxtb	r3, r3
 2157 00a2 002B     		cmp	r3, #0
 2158 00a4 06D0     		beq	.L117
 613:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2159              		.loc 1 613 0
 2160 00a6 4FF4FA62 		mov	r2, #2000
 2161 00aa 1D49     		ldr	r1, .L122+4
 2162 00ac 2948     		ldr	r0, .L122+56
 2163 00ae FFF7FEFF 		bl	at_write_command
 2164 00b2 09E0     		b	.L118
 2165              	.L117:
 614:modem.c       ****     
 615:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2166              		.loc 1 615 0
 2167 00b4 264B     		ldr	r3, .L122+52
 2168 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2169 00b8 002B     		cmp	r3, #0
 2170 00ba 05D0     		beq	.L118
 616:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2171              		.loc 1 616 0
 2172 00bc 4FF4FA62 		mov	r2, #2000
 2173 00c0 1749     		ldr	r1, .L122+4
 2174 00c2 2548     		ldr	r0, .L122+60
 2175 00c4 FFF7FEFF 		bl	at_write_command
 2176              	.L118:
 617:modem.c       ****     }
 618:modem.c       ****     
 619:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 620:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 621:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2177              		.loc 1 621 0
 2178 00c8 4FF4FA62 		mov	r2, #2000
 2179 00cc 1449     		ldr	r1, .L122+4
 2180 00ce 2348     		ldr	r0, .L122+64
 2181 00d0 FFF7FEFF 		bl	at_write_command
 2182 00d4 0346     		mov	r3, r0
 2183 00d6 002B     		cmp	r3, #0
 2184 00d8 1BD0     		beq	.L121
 2185              	.LBB9:
 622:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 623:modem.c       ****         CFUN[0] = '\0';
 2186              		.loc 1 623 0
 2187 00da 0023     		movs	r3, #0
 2188 00dc 3B71     		strb	r3, [r7, #4]
 624:modem.c       ****         // Extract UART string recieved from the modem
 625:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2189              		.loc 1 625 0
 2190 00de 3B1D     		adds	r3, r7, #4
 2191 00e0 124A     		ldr	r2, .L122+16
 2192 00e2 1349     		ldr	r1, .L122+20
 2193 00e4 1348     		ldr	r0, .L122+24
 2194 00e6 FFF7FEFF 		bl	extract_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 54


 626:modem.c       ****         // Print UART string recieved from the modem
 627:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2195              		.loc 1 627 0
 2196 00ea 3B1D     		adds	r3, r7, #4
 2197 00ec 1A46     		mov	r2, r3
 2198 00ee 1C49     		ldr	r1, .L122+68
 2199 00f0 0020     		movs	r0, #0
 2200 00f2 FFF7FEFF 		bl	printNotif
 628:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 629:modem.c       ****         // If it returns NULL, then write another command to the modem
 630:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2201              		.loc 1 630 0
 2202 00f6 3B1D     		adds	r3, r7, #4
 2203 00f8 3121     		movs	r1, #49
 2204 00fa 1846     		mov	r0, r3
 2205 00fc FFF7FEFF 		bl	strchr
 2206 0100 0346     		mov	r3, r0
 2207 0102 002B     		cmp	r3, #0
 2208 0104 05D1     		bne	.L121
 631:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 632:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 633:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2209              		.loc 1 633 0
 2210 0106 4FF4FA62 		mov	r2, #2000
 2211 010a 0549     		ldr	r1, .L122+4
 2212 010c 1548     		ldr	r0, .L122+72
 2213 010e FFF7FEFF 		bl	at_write_command
 2214              	.L121:
 2215              	.LBE9:
 634:modem.c       ****         }
 635:modem.c       ****     }
 636:modem.c       **** 
 637:modem.c       ****     
 638:modem.c       **** }
 2216              		.loc 1 638 0
 2217 0112 00BF     		nop
 2218 0114 1037     		adds	r7, r7, #16
 2219              		.cfi_def_cfa_offset 8
 2220 0116 BD46     		mov	sp, r7
 2221              		.cfi_def_cfa_register 13
 2222              		@ sp needed
 2223 0118 80BD     		pop	{r7, pc}
 2224              	.L123:
 2225 011a 00BF     		.align	2
 2226              	.L122:
 2227 011c 00000000 		.word	modem_info
 2228 0120 00000000 		.word	.LC0
 2229 0124 50050000 		.word	.LC51
 2230 0128 14000000 		.word	modem_info+20
 2231 012c 88020000 		.word	.LC21
 2232 0130 8C020000 		.word	.LC22
 2233 0134 00000000 		.word	uart_received_string
 2234 0138 5C050000 		.word	.LC52
 2235 013c 6C050000 		.word	.LC53
 2236 0140 78050000 		.word	.LC54
 2237 0144 84050000 		.word	.LC55
 2238 0148 28000000 		.word	modem_info+40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 55


 2239 014c 90050000 		.word	.LC56
 2240 0150 00000000 		.word	updatable_parameters
 2241 0154 9C050000 		.word	.LC57
 2242 0158 C8050000 		.word	.LC58
 2243 015c E4050000 		.word	.LC59
 2244 0160 F0050000 		.word	.LC60
 2245 0164 FC050000 		.word	.LC61
 2246              		.cfi_endproc
 2247              	.LFE82:
 2248              		.size	modem_configure_settings, .-modem_configure_settings
 2249              		.section	.rodata
 2250 0607 00       		.align	2
 2251              	.LC62:
 2252 0608 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2252      6D206E6F 
 2252      74207265 
 2252      61647920 
 2252      746F2067 
 2253 063b 6B2E00   		.ascii	"k.\000"
 2254 063e 0000     		.align	2
 2255              	.LC63:
 2256 0640 41542B43 		.ascii	"AT+CCLK?\015\000"
 2256      434C4B3F 
 2256      0D00
 2257 064a 0000     		.align	2
 2258              	.LC64:
 2259 064c 220D00   		.ascii	"\"\015\000"
 2260 064f 00       		.align	2
 2261              	.LC65:
 2262 0650 3A202200 		.ascii	": \"\000"
 2263              		.align	2
 2264              	.LC66:
 2265 0654 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2265      642F2564 
 2265      2C25643A 
 2265      25643A25 
 2265      642D2564 
 2266 0669 000000   		.align	2
 2267              	.LC67:
 2268 066c 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2268      642F2564 
 2268      2C25643A 
 2268      25643A25 
 2268      642B2564 
 2269 0681 000000   		.align	2
 2270              	.LC68:
 2271 0684 436F756C 		.ascii	"Could not parse modem time.\000"
 2271      64206E6F 
 2271      74207061 
 2271      72736520 
 2271      6D6F6465 
 2272              		.section	.text.modem_get_network_time,"ax",%progbits
 2273              		.align	2
 2274              		.global	modem_get_network_time
 2275              		.thumb
 2276              		.thumb_func
 2277              		.type	modem_get_network_time, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 56


 2278              	modem_get_network_time:
 2279              	.LFB83:
 639:modem.c       **** 
 640:modem.c       **** //returns 0 if modem can't get time
 641:modem.c       **** long modem_get_network_time(){
 2280              		.loc 1 641 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 104
 2283              		@ frame_needed = 1, uses_anonymous_args = 0
 2284 0000 80B5     		push	{r7, lr}
 2285              		.cfi_def_cfa_offset 8
 2286              		.cfi_offset 7, -8
 2287              		.cfi_offset 14, -4
 2288 0002 A0B0     		sub	sp, sp, #128
 2289              		.cfi_def_cfa_offset 136
 2290 0004 06AF     		add	r7, sp, #24
 2291              		.cfi_def_cfa 7, 112
 642:modem.c       ****     
 643:modem.c       ****     //modem reposen format (careful to include the quotes "")
 644:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 645:modem.c       ****     //ex: 14:48 GMT
 646:modem.c       **** 
 647:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 648:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2292              		.loc 1 648 0
 2293 0006 444B     		ldr	r3, .L131
 2294 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2295 000a 042B     		cmp	r3, #4
 2296 000c 05D0     		beq	.L125
 649:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2297              		.loc 1 649 0
 2298 000e 4349     		ldr	r1, .L131+4
 2299 0010 0220     		movs	r0, #2
 2300 0012 FFF7FEFF 		bl	printNotif
 650:modem.c       ****         return 0;   
 2301              		.loc 1 650 0
 2302 0016 0023     		movs	r3, #0
 2303 0018 7AE0     		b	.L126
 2304              	.L125:
 651:modem.c       ****     }
 652:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2305              		.loc 1 652 0
 2306 001a 0023     		movs	r3, #0
 2307 001c 7B66     		str	r3, [r7, #100]
 653:modem.c       ****     
 654:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 655:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2308              		.loc 1 655 0
 2309 001e 4FF4FA62 		mov	r2, #2000
 2310 0022 3F49     		ldr	r1, .L131+8
 2311 0024 3F48     		ldr	r0, .L131+12
 2312 0026 FFF7FEFF 		bl	at_write_command
 2313 002a 0346     		mov	r3, r0
 2314 002c 002B     		cmp	r3, #0
 2315 002e 6ED0     		beq	.L127
 2316              	.LBB10:
 656:modem.c       ****         // need to set this to /0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 57


 657:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 658:modem.c       ****         network_time[0] = '\0';
 2317              		.loc 1 658 0
 2318 0030 0023     		movs	r3, #0
 2319 0032 87F84430 		strb	r3, [r7, #68]
 659:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 660:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2320              		.loc 1 660 0
 2321 0036 07F14403 		add	r3, r7, #68
 2322 003a 3B4A     		ldr	r2, .L131+16
 2323 003c 3B49     		ldr	r1, .L131+20
 2324 003e 3C48     		ldr	r0, .L131+24
 2325 0040 FFF7FEFF 		bl	extract_string
 661:modem.c       ****         
 662:modem.c       ****         ///////////////////  
 663:modem.c       ****         struct tm t; // Creates variable t of struct tm
 664:modem.c       ****         
 665:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 666:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2326              		.loc 1 666 0
 2327 0044 0023     		movs	r3, #0
 2328 0046 BB62     		str	r3, [r7, #40]
 667:modem.c       ****       
 668:modem.c       ****         // Determines the GMT offset 
 669:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 670:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 671:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2329              		.loc 1 671 0
 2330 0048 07F13C01 		add	r1, r7, #60
 2331 004c 07F14002 		add	r2, r7, #64
 2332 0050 07F14400 		add	r0, r7, #68
 2333 0054 07F12803 		add	r3, r7, #40
 2334 0058 0493     		str	r3, [sp, #16]
 2335 005a 07F12C03 		add	r3, r7, #44
 2336 005e 0393     		str	r3, [sp, #12]
 2337 0060 07F13003 		add	r3, r7, #48
 2338 0064 0293     		str	r3, [sp, #8]
 2339 0066 07F13403 		add	r3, r7, #52
 2340 006a 0193     		str	r3, [sp, #4]
 2341 006c 07F13803 		add	r3, r7, #56
 2342 0070 0093     		str	r3, [sp]
 2343 0072 0B46     		mov	r3, r1
 2344 0074 2F49     		ldr	r1, .L131+28
 2345 0076 FFF7FEFF 		bl	sscanf
 2346 007a 0346     		mov	r3, r0
 2347 007c 072B     		cmp	r3, #7
 2348 007e 06D1     		bne	.L128
 672:modem.c       ****             gmt_offset = gmt_offset*(900);
 2349              		.loc 1 672 0
 2350 0080 BB6A     		ldr	r3, [r7, #40]
 2351 0082 4FF46172 		mov	r2, #900
 2352 0086 02FB03F3 		mul	r3, r2, r3
 2353 008a BB62     		str	r3, [r7, #40]
 2354 008c 27E0     		b	.L129
 2355              	.L128:
 673:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2356              		.loc 1 673 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 58


 2357 008e 07F13C01 		add	r1, r7, #60
 2358 0092 07F14002 		add	r2, r7, #64
 2359 0096 07F14400 		add	r0, r7, #68
 2360 009a 07F12803 		add	r3, r7, #40
 2361 009e 0493     		str	r3, [sp, #16]
 2362 00a0 07F12C03 		add	r3, r7, #44
 2363 00a4 0393     		str	r3, [sp, #12]
 2364 00a6 07F13003 		add	r3, r7, #48
 2365 00aa 0293     		str	r3, [sp, #8]
 2366 00ac 07F13403 		add	r3, r7, #52
 2367 00b0 0193     		str	r3, [sp, #4]
 2368 00b2 07F13803 		add	r3, r7, #56
 2369 00b6 0093     		str	r3, [sp]
 2370 00b8 0B46     		mov	r3, r1
 2371 00ba 1F49     		ldr	r1, .L131+32
 2372 00bc FFF7FEFF 		bl	sscanf
 2373 00c0 0346     		mov	r3, r0
 2374 00c2 072B     		cmp	r3, #7
 2375 00c4 05D1     		bne	.L130
 674:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2376              		.loc 1 674 0
 2377 00c6 BB6A     		ldr	r3, [r7, #40]
 2378 00c8 1C4A     		ldr	r2, .L131+36
 2379 00ca 02FB03F3 		mul	r3, r2, r3
 2380 00ce BB62     		str	r3, [r7, #40]
 2381 00d0 05E0     		b	.L129
 2382              	.L130:
 675:modem.c       ****         }else{
 676:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2383              		.loc 1 676 0
 2384 00d2 1B49     		ldr	r1, .L131+40
 2385 00d4 0220     		movs	r0, #2
 2386 00d6 FFF7FEFF 		bl	printNotif
 677:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2387              		.loc 1 677 0
 2388 00da 0023     		movs	r3, #0
 2389 00dc 18E0     		b	.L126
 2390              	.L129:
 678:modem.c       ****         }
 679:modem.c       ****         
 680:modem.c       ****         // Sets each variable to the correct time 
 681:modem.c       ****         t.tm_sec = second;
 2391              		.loc 1 681 0
 2392 00de FB6A     		ldr	r3, [r7, #44]
 2393 00e0 7B60     		str	r3, [r7, #4]
 682:modem.c       ****         t.tm_min = minute;
 2394              		.loc 1 682 0
 2395 00e2 3B6B     		ldr	r3, [r7, #48]
 2396 00e4 BB60     		str	r3, [r7, #8]
 683:modem.c       ****         t.tm_hour = hour;
 2397              		.loc 1 683 0
 2398 00e6 7B6B     		ldr	r3, [r7, #52]
 2399 00e8 FB60     		str	r3, [r7, #12]
 684:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2400              		.loc 1 684 0
 2401 00ea 3B6C     		ldr	r3, [r7, #64]
 2402 00ec 6433     		adds	r3, r3, #100
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 59


 2403 00ee BB61     		str	r3, [r7, #24]
 685:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2404              		.loc 1 685 0
 2405 00f0 FB6B     		ldr	r3, [r7, #60]
 2406 00f2 013B     		subs	r3, r3, #1
 2407 00f4 7B61     		str	r3, [r7, #20]
 686:modem.c       ****         t.tm_mday = day;           // Day of the month
 2408              		.loc 1 686 0
 2409 00f6 BB6B     		ldr	r3, [r7, #56]
 2410 00f8 3B61     		str	r3, [r7, #16]
 687:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2411              		.loc 1 687 0
 2412 00fa 0023     		movs	r3, #0
 2413 00fc 7B62     		str	r3, [r7, #36]
 688:modem.c       ****     
 689:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 690:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 691:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2414              		.loc 1 691 0
 2415 00fe 3B1D     		adds	r3, r7, #4
 2416 0100 1846     		mov	r0, r3
 2417 0102 FFF7FEFF 		bl	mktime
 2418 0106 0246     		mov	r2, r0
 2419 0108 BB6A     		ldr	r3, [r7, #40]
 2420 010a 1344     		add	r3, r3, r2
 2421 010c 7B66     		str	r3, [r7, #100]
 2422              	.L127:
 2423              	.LBE10:
 692:modem.c       ****     }
 693:modem.c       ****     
 694:modem.c       ****     return epoch_time;
 2424              		.loc 1 694 0
 2425 010e 7B6E     		ldr	r3, [r7, #100]
 2426              	.L126:
 695:modem.c       **** }
 2427              		.loc 1 695 0
 2428 0110 1846     		mov	r0, r3
 2429 0112 6837     		adds	r7, r7, #104
 2430              		.cfi_def_cfa_offset 8
 2431 0114 BD46     		mov	sp, r7
 2432              		.cfi_def_cfa_register 13
 2433              		@ sp needed
 2434 0116 80BD     		pop	{r7, pc}
 2435              	.L132:
 2436              		.align	2
 2437              	.L131:
 2438 0118 00000000 		.word	modem_state
 2439 011c 08060000 		.word	.LC62
 2440 0120 00000000 		.word	.LC0
 2441 0124 40060000 		.word	.LC63
 2442 0128 4C060000 		.word	.LC64
 2443 012c 50060000 		.word	.LC65
 2444 0130 00000000 		.word	uart_received_string
 2445 0134 54060000 		.word	.LC66
 2446 0138 6C060000 		.word	.LC67
 2447 013c 7CFCFFFF 		.word	-900
 2448 0140 84060000 		.word	.LC68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 60


 2449              		.cfi_endproc
 2450              	.LFE83:
 2451              		.size	modem_get_network_time, .-modem_get_network_time
 2452              		.section	.text.modem_get_state,"ax",%progbits
 2453              		.align	2
 2454              		.global	modem_get_state
 2455              		.thumb
 2456              		.thumb_func
 2457              		.type	modem_get_state, %function
 2458              	modem_get_state:
 2459              	.LFB84:
 696:modem.c       **** 
 697:modem.c       **** // Get the modem state
 698:modem.c       **** uint8 modem_get_state(){
 2460              		.loc 1 698 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 1, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
 2465 0000 80B4     		push	{r7}
 2466              		.cfi_def_cfa_offset 4
 2467              		.cfi_offset 7, -4
 2468 0002 00AF     		add	r7, sp, #0
 2469              		.cfi_def_cfa_register 7
 699:modem.c       ****     return modem_state;
 2470              		.loc 1 699 0
 2471 0004 024B     		ldr	r3, .L135
 2472 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 700:modem.c       **** }
 2473              		.loc 1 700 0
 2474 0008 1846     		mov	r0, r3
 2475 000a BD46     		mov	sp, r7
 2476              		.cfi_def_cfa_register 13
 2477              		@ sp needed
 2478 000c 80BC     		pop	{r7}
 2479              		.cfi_restore 7
 2480              		.cfi_def_cfa_offset 0
 2481 000e 7047     		bx	lr
 2482              	.L136:
 2483              		.align	2
 2484              	.L135:
 2485 0010 00000000 		.word	modem_state
 2486              		.cfi_endproc
 2487              	.LFE84:
 2488              		.size	modem_get_state, .-modem_get_state
 2489              		.section	.text.modem_sleep,"ax",%progbits
 2490              		.align	2
 2491              		.global	modem_sleep
 2492              		.thumb
 2493              		.thumb_func
 2494              		.type	modem_sleep, %function
 2495              	modem_sleep:
 2496              	.LFB85:
 701:modem.c       **** 
 702:modem.c       **** // Set modem to sleep
 703:modem.c       **** void modem_sleep(){
 2497              		.loc 1 703 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 61


 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 0
 2500              		@ frame_needed = 1, uses_anonymous_args = 0
 2501 0000 80B5     		push	{r7, lr}
 2502              		.cfi_def_cfa_offset 8
 2503              		.cfi_offset 7, -8
 2504              		.cfi_offset 14, -4
 2505 0002 00AF     		add	r7, sp, #0
 2506              		.cfi_def_cfa_register 7
 704:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 705:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2507              		.loc 1 705 0
 2508 0004 FFF7FEFF 		bl	modem_get_state
 2509 0008 0346     		mov	r3, r0
 2510 000a 002B     		cmp	r3, #0
 2511 000c 03D0     		beq	.L139
 706:modem.c       **** 
 707:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2512              		.loc 1 707 0
 2513 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 708:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2514              		.loc 1 708 0
 2515 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2516              	.L139:
 709:modem.c       ****         
 710:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 711:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 712:modem.c       ****      }
 713:modem.c       **** }
 2517              		.loc 1 713 0
 2518 0016 00BF     		nop
 2519 0018 80BD     		pop	{r7, pc}
 2520              		.cfi_endproc
 2521              	.LFE85:
 2522              		.size	modem_sleep, .-modem_sleep
 2523 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2524              		.align	2
 2525              		.global	modem_wakeup
 2526              		.thumb
 2527              		.thumb_func
 2528              		.type	modem_wakeup, %function
 2529              	modem_wakeup:
 2530              	.LFB86:
 714:modem.c       **** 
 715:modem.c       **** // Wakeup the modem
 716:modem.c       **** void modem_wakeup(){
 2531              		.loc 1 716 0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 0
 2534              		@ frame_needed = 1, uses_anonymous_args = 0
 2535 0000 80B5     		push	{r7, lr}
 2536              		.cfi_def_cfa_offset 8
 2537              		.cfi_offset 7, -8
 2538              		.cfi_offset 14, -4
 2539 0002 00AF     		add	r7, sp, #0
 2540              		.cfi_def_cfa_register 7
 717:modem.c       ****     // If modem state is not off then wake it up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 62


 718:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2541              		.loc 1 718 0
 2542 0004 FFF7FEFF 		bl	modem_get_state
 2543 0008 0346     		mov	r3, r0
 2544 000a 002B     		cmp	r3, #0
 2545 000c 0BD0     		beq	.L142
 719:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2546              		.loc 1 719 0
 2547 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 720:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 721:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 722:modem.c       ****         UART_Telit_Wakeup();
 2548              		.loc 1 722 0
 2549 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 723:modem.c       ****         // Remove the need for this pin itterupt
 724:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 725:modem.c       ****         
 726:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 727:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2550              		.loc 1 727 0
 2551 0016 FFF7FEFF 		bl	modem_get_state
 2552 001a 0346     		mov	r3, r0
 2553 001c 032B     		cmp	r3, #3
 2554 001e 02D1     		bne	.L142
 728:modem.c       ****             CyDelay(100u);
 2555              		.loc 1 728 0
 2556 0020 6420     		movs	r0, #100
 2557 0022 FFF7FEFF 		bl	CyDelay
 2558              	.L142:
 729:modem.c       ****         }
 730:modem.c       ****      }
 731:modem.c       **** }
 2559              		.loc 1 731 0
 2560 0026 00BF     		nop
 2561 0028 80BD     		pop	{r7, pc}
 2562              		.cfi_endproc
 2563              	.LFE86:
 2564              		.size	modem_wakeup, .-modem_wakeup
 2565 002a 00BF     		.section	.rodata
 2566              		.align	2
 2567              	.LC69:
 2568 06a0 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2568      50494F3D 
 2568      352C312C 
 2568      312C300D 
 2568      00
 2569 06b1 000000   		.align	2
 2570              	.LC70:
 2571 06b4 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2571      55504C53 
 2571      45433D31 
 2571      0D00
 2572 06c2 0000     		.align	2
 2573              	.LC71:
 2574 06c4 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2574      55504C56 
 2574      3D320D00 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 63


 2575              		.align	2
 2576              	.LC72:
 2577 06d0 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2577      47505345 
 2577      4E3D310D 
 2577      00
 2578 06dd 000000   		.align	2
 2579              	.LC73:
 2580 06e0 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2580      4C503D31 
 2580      2C227375 
 2580      706C2E67 
 2580      6F6F676C 
 2581 0701 000000   		.align	2
 2582              	.LC74:
 2583 0704 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2583      47414354 
 2583      3D312C30 
 2583      0D0A00
 2584 0713 00       		.align	2
 2585              	.LC75:
 2586 0714 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2586      43534C4B 
 2586      3D312C31 
 2586      0D00
 2587 0722 0000     		.align	2
 2588              	.LC76:
 2589 0724 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2589      5053534C 
 2589      53523D31 
 2589      2C312C2C 
 2589      2C2C2C32 
 2590 073a 0000     		.align	2
 2591              	.LC77:
 2592 073c 4E00     		.ascii	"N\000"
 2593 073e 0000     		.align	2
 2594              	.LC78:
 2595 0740 41542447 		.ascii	"AT$GPSACP\015\000"
 2595      50534143 
 2595      500D00
 2596 074b 00       		.align	2
 2597              	.LC79:
 2598 074c 24475053 		.ascii	"$GPSACP: \000"
 2598      4143503A 
 2598      2000
 2599 0756 0000     		.align	2
 2600              	.LC80:
 2601 0758 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2601      4143503A 
 2601      20252A66 
 2601      2C25664E 
 2601      2C256657 
 2602              		.global	__aeabi_fdiv
 2603              		.global	__aeabi_f2d
 2604              		.global	__aeabi_ddiv
 2605              		.global	__aeabi_dadd
 2606              		.global	__aeabi_d2f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 64


 2607              		.align	2
 2608              	.LC81:
 2609 0778 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2609      50494F3D 
 2609      352C302C 
 2609      312C300D 
 2609      00
 2610 0789 000000   		.align	2
 2611              	.LC82:
 2612 078c 41542447 		.ascii	"AT$GPSR=0\015\000"
 2612      5053523D 
 2612      300D00
 2613 0797 00       		.align	2
 2614              	.LC83:
 2615 0798 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2615      20746F20 
 2615      6C6F636B 
 2615      20475053 
 2615      3A202564 
 2616              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2617              		.align	2
 2618              		.global	modem_get_gps_coordinates
 2619              		.thumb
 2620              		.thumb_func
 2621              		.type	modem_get_gps_coordinates, %function
 2622              	modem_get_gps_coordinates:
 2623              	.LFB87:
 732:modem.c       **** 
 733:modem.c       ****     
 734:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 735:modem.c       **** gps_t modem_get_gps_coordinates(){
 2624              		.loc 1 735 0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 56
 2627              		@ frame_needed = 1, uses_anonymous_args = 0
 2628 0000 B0B5     		push	{r4, r5, r7, lr}
 2629              		.cfi_def_cfa_offset 16
 2630              		.cfi_offset 4, -16
 2631              		.cfi_offset 5, -12
 2632              		.cfi_offset 7, -8
 2633              		.cfi_offset 14, -4
 2634 0002 90B0     		sub	sp, sp, #64
 2635              		.cfi_def_cfa_offset 80
 2636 0004 02AF     		add	r7, sp, #8
 2637              		.cfi_def_cfa 7, 72
 2638 0006 7860     		str	r0, [r7, #4]
 736:modem.c       ****     gps_t gps;
 737:modem.c       ****     gps.altitude = 0;
 2639              		.loc 1 737 0
 2640 0008 4FF00003 		mov	r3, #0
 2641 000c FB61     		str	r3, [r7, #28]	@ float
 738:modem.c       ****     gps.longitude = 0;
 2642              		.loc 1 738 0
 2643 000e 4FF00003 		mov	r3, #0
 2644 0012 BB61     		str	r3, [r7, #24]	@ float
 739:modem.c       ****     gps.latitude = 0;
 2645              		.loc 1 739 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 65


 2646 0014 4FF00003 		mov	r3, #0
 2647 0018 7B61     		str	r3, [r7, #20]	@ float
 740:modem.c       ****     gps.time_to_lock =0;
 2648              		.loc 1 740 0
 2649 001a 0023     		movs	r3, #0
 2650 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 741:modem.c       ****     gps.valid = 0;
 2651              		.loc 1 741 0
 2652 001e 0023     		movs	r3, #0
 2653 0020 87F82230 		strb	r3, [r7, #34]
 742:modem.c       ****     
 743:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 744:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2654              		.loc 1 744 0
 2655 0024 7F4B     		ldr	r3, .L153
 2656 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2657 0028 042B     		cmp	r3, #4
 2658 002a 07D0     		beq	.L144
 745:modem.c       ****         return gps;//where valid = 0
 2659              		.loc 1 745 0
 2660 002c 7B68     		ldr	r3, [r7, #4]
 2661 002e 1C46     		mov	r4, r3
 2662 0030 07F11403 		add	r3, r7, #20
 2663 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2664 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2665 003a EFE0     		b	.L143
 2666              	.L144:
 746:modem.c       ****     }
 747:modem.c       ****     
 748:modem.c       ****     long lock_time = getTimeStamp();
 2667              		.loc 1 748 0
 2668 003c FFF7FEFF 		bl	getTimeStamp
 2669 0040 3863     		str	r0, [r7, #48]
 749:modem.c       ****     
 750:modem.c       ****     // Enable this for the LTER module
 751:modem.c       ****     // Enable GPS Low-Dropout Regulator
 752:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2670              		.loc 1 752 0
 2671 0042 4FF4FA62 		mov	r2, #2000
 2672 0046 7849     		ldr	r1, .L153+4
 2673 0048 7848     		ldr	r0, .L153+8
 2674 004a FFF7FEFF 		bl	at_write_command
 753:modem.c       ****     
 754:modem.c       ****     // Configure SUPL connection params
 755:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2675              		.loc 1 755 0
 2676 004e 4FF4FA62 		mov	r2, #2000
 2677 0052 7549     		ldr	r1, .L153+4
 2678 0054 7648     		ldr	r0, .L153+12
 2679 0056 FFF7FEFF 		bl	at_write_command
 756:modem.c       ****     
 757:modem.c       ****     // Use SUPL2.0
 758:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2680              		.loc 1 758 0
 2681 005a 4FF4FA62 		mov	r2, #2000
 2682 005e 7249     		ldr	r1, .L153+4
 2683 0060 7448     		ldr	r0, .L153+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 66


 2684 0062 FFF7FEFF 		bl	at_write_command
 759:modem.c       ****     
 760:modem.c       ****     // Enable AGPS service
 761:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2685              		.loc 1 761 0
 2686 0066 4FF4FA62 		mov	r2, #2000
 2687 006a 6F49     		ldr	r1, .L153+4
 2688 006c 7248     		ldr	r0, .L153+20
 2689 006e FFF7FEFF 		bl	at_write_command
 762:modem.c       ****     
 763:modem.c       ****     // Chose SUPL server, use google public service
 764:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2690              		.loc 1 764 0
 2691 0072 4FF4FA62 		mov	r2, #2000
 2692 0076 6C49     		ldr	r1, .L153+4
 2693 0078 7048     		ldr	r0, .L153+24
 2694 007a FFF7FEFF 		bl	at_write_command
 765:modem.c       ****     
 766:modem.c       ****     //pdp context has to be locked to carrier for this to work
 767:modem.c       ****     
 768:modem.c       ****     // Unlock context since it needs to be used by modem
 769:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2695              		.loc 1 769 0
 2696 007e 4FF4FA62 		mov	r2, #2000
 2697 0082 6949     		ldr	r1, .L153+4
 2698 0084 6E48     		ldr	r0, .L153+28
 2699 0086 FFF7FEFF 		bl	at_write_command
 770:modem.c       ****     
 771:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2700              		.loc 1 771 0
 2701 008a 4FF4FA62 		mov	r2, #2000
 2702 008e 6649     		ldr	r1, .L153+4
 2703 0090 6C48     		ldr	r0, .L153+32
 2704 0092 FFF7FEFF 		bl	at_write_command
 772:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 773:modem.c       ****     
 774:modem.c       ****     // Relock the context
 775:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2705              		.loc 1 775 0
 2706 0096 42F21072 		movw	r2, #10000
 2707 009a 6349     		ldr	r1, .L153+4
 2708 009c 6A48     		ldr	r0, .L153+36
 2709 009e FFF7FEFF 		bl	at_write_command
 776:modem.c       ****     
 777:modem.c       ****     //start AGPS service
 778:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2710              		.loc 1 778 0
 2711 00a2 4FF4FA62 		mov	r2, #2000
 2712 00a6 6049     		ldr	r1, .L153+4
 2713 00a8 6848     		ldr	r0, .L153+40
 2714 00aa FFF7FEFF 		bl	at_write_command
 779:modem.c       ****     
 780:modem.c       ****     
 781:modem.c       ****     // Start the AGPS service
 782:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 783:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 784:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 67


 785:modem.c       ****     
 786:modem.c       ****  
 787:modem.c       ****     uint8 gps_status = 0;
 2715              		.loc 1 787 0
 2716 00ae 0023     		movs	r3, #0
 2717 00b0 87F82F30 		strb	r3, [r7, #47]
 2718              	.LBB11:
 788:modem.c       ****     for(uint16 i=0;i<200;i++){
 2719              		.loc 1 788 0
 2720 00b4 0023     		movs	r3, #0
 2721 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2722 00b8 13E0     		b	.L146
 2723              	.L149:
 789:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2724              		.loc 1 789 0
 2725 00ba 4FF4FA62 		mov	r2, #2000
 2726 00be 6449     		ldr	r1, .L153+44
 2727 00c0 6448     		ldr	r0, .L153+48
 2728 00c2 FFF7FEFF 		bl	at_write_command
 2729 00c6 0346     		mov	r3, r0
 2730 00c8 87F82F30 		strb	r3, [r7, #47]
 790:modem.c       ****         if(gps_status){
 2731              		.loc 1 790 0
 2732 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2733 00d0 002B     		cmp	r3, #0
 2734 00d2 0AD1     		bne	.L152
 791:modem.c       ****             break;   
 792:modem.c       ****         }
 793:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2735              		.loc 1 793 0 discriminator 2
 2736 00d4 4FF47A70 		mov	r0, #1000
 2737 00d8 FFF7FEFF 		bl	CyDelay
 788:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2738              		.loc 1 788 0 discriminator 2
 2739 00dc FB8E     		ldrh	r3, [r7, #54]
 2740 00de 0133     		adds	r3, r3, #1
 2741 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2742              	.L146:
 788:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2743              		.loc 1 788 0 is_stmt 0 discriminator 1
 2744 00e2 FB8E     		ldrh	r3, [r7, #54]
 2745 00e4 C72B     		cmp	r3, #199
 2746 00e6 E8D9     		bls	.L149
 2747 00e8 00E0     		b	.L148
 2748              	.L152:
 791:modem.c       ****             break;   
 2749              		.loc 1 791 0 is_stmt 1
 2750 00ea 00BF     		nop
 2751              	.L148:
 2752              	.LBE11:
 794:modem.c       ****     }
 795:modem.c       ****     
 796:modem.c       ****     //parse data here
 797:modem.c       ****     
 798:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 799:modem.c       ****     float lat;
 800:modem.c       ****     float lon;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 68


 801:modem.c       ****     float alt;
 802:modem.c       ****     
 803:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 804:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 805:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2753              		.loc 1 805 0
 2754 00ec 5A49     		ldr	r1, .L153+52
 2755 00ee 5B48     		ldr	r0, .L153+56
 2756 00f0 FFF7FEFF 		bl	strstr
 2757 00f4 B862     		str	r0, [r7, #40]
 806:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 807:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 808:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2758              		.loc 1 808 0
 2759 00f6 07F10C01 		add	r1, r7, #12
 2760 00fa 07F11002 		add	r2, r7, #16
 2761 00fe 07F10803 		add	r3, r7, #8
 2762 0102 0093     		str	r3, [sp]
 2763 0104 0B46     		mov	r3, r1
 2764 0106 5649     		ldr	r1, .L153+60
 2765 0108 B86A     		ldr	r0, [r7, #40]
 2766 010a FFF7FEFF 		bl	sscanf
 2767 010e 7862     		str	r0, [r7, #36]
 809:modem.c       ****     if(match >= 3){
 2768              		.loc 1 809 0
 2769 0110 7B6A     		ldr	r3, [r7, #36]
 2770 0112 022B     		cmp	r3, #2
 2771 0114 60DD     		ble	.L150
 810:modem.c       ****         // Calculate lat and lon
 811:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 812:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 813:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2772              		.loc 1 813 0
 2773 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2774 0118 5249     		ldr	r1, .L153+64
 2775 011a 1846     		mov	r0, r3
 2776 011c FFF7FEFF 		bl	__aeabi_fdiv
 2777 0120 0346     		mov	r3, r0
 2778 0122 1846     		mov	r0, r3
 2779 0124 FFF7FEFF 		bl	floorf
 2780 0128 0346     		mov	r3, r0
 2781 012a 1846     		mov	r0, r3
 2782 012c FFF7FEFF 		bl	__aeabi_f2d
 2783 0130 0446     		mov	r4, r0
 2784 0132 0D46     		mov	r5, r1
 2785 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2786 0136 1846     		mov	r0, r3
 2787 0138 FFF7FEFF 		bl	__aeabi_f2d
 2788 013c 4FF00002 		mov	r2, #0
 2789 0140 494B     		ldr	r3, .L153+68
 2790 0142 FFF7FEFF 		bl	fmod
 2791 0146 4FF00002 		mov	r2, #0
 2792 014a 484B     		ldr	r3, .L153+72
 2793 014c FFF7FEFF 		bl	__aeabi_ddiv
 2794 0150 0246     		mov	r2, r0
 2795 0152 0B46     		mov	r3, r1
 2796 0154 2046     		mov	r0, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 69


 2797 0156 2946     		mov	r1, r5
 2798 0158 FFF7FEFF 		bl	__aeabi_dadd
 2799 015c 0346     		mov	r3, r0
 2800 015e 0C46     		mov	r4, r1
 2801 0160 1846     		mov	r0, r3
 2802 0162 2146     		mov	r1, r4
 2803 0164 FFF7FEFF 		bl	__aeabi_d2f
 2804 0168 0346     		mov	r3, r0
 2805 016a 3B61     		str	r3, [r7, #16]	@ float
 814:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2806              		.loc 1 814 0
 2807 016c FB68     		ldr	r3, [r7, #12]	@ float
 2808 016e 3D49     		ldr	r1, .L153+64
 2809 0170 1846     		mov	r0, r3
 2810 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2811 0176 0346     		mov	r3, r0
 2812 0178 1846     		mov	r0, r3
 2813 017a FFF7FEFF 		bl	floorf
 2814 017e 0346     		mov	r3, r0
 2815 0180 1846     		mov	r0, r3
 2816 0182 FFF7FEFF 		bl	__aeabi_f2d
 2817 0186 0446     		mov	r4, r0
 2818 0188 0D46     		mov	r5, r1
 2819 018a FB68     		ldr	r3, [r7, #12]	@ float
 2820 018c 1846     		mov	r0, r3
 2821 018e FFF7FEFF 		bl	__aeabi_f2d
 2822 0192 4FF00002 		mov	r2, #0
 2823 0196 344B     		ldr	r3, .L153+68
 2824 0198 FFF7FEFF 		bl	fmod
 2825 019c 4FF00002 		mov	r2, #0
 2826 01a0 324B     		ldr	r3, .L153+72
 2827 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2828 01a6 0246     		mov	r2, r0
 2829 01a8 0B46     		mov	r3, r1
 2830 01aa 2046     		mov	r0, r4
 2831 01ac 2946     		mov	r1, r5
 2832 01ae FFF7FEFF 		bl	__aeabi_dadd
 2833 01b2 0346     		mov	r3, r0
 2834 01b4 0C46     		mov	r4, r1
 2835 01b6 1846     		mov	r0, r3
 2836 01b8 2146     		mov	r1, r4
 2837 01ba FFF7FEFF 		bl	__aeabi_d2f
 2838 01be 0346     		mov	r3, r0
 2839 01c0 83F00043 		eor	r3, r3, #-2147483648
 2840 01c4 FB60     		str	r3, [r7, #12]	@ float
 815:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2841              		.loc 1 815 0
 2842 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2843 01c8 FB61     		str	r3, [r7, #28]	@ float
 816:modem.c       ****         gps.latitude = lat;
 2844              		.loc 1 816 0
 2845 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2846 01cc 7B61     		str	r3, [r7, #20]	@ float
 817:modem.c       ****         gps.longitude = lon;
 2847              		.loc 1 817 0
 2848 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2849 01d0 BB61     		str	r3, [r7, #24]	@ float
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 70


 818:modem.c       ****         gps.valid = 1;
 2850              		.loc 1 818 0
 2851 01d2 0123     		movs	r3, #1
 2852 01d4 87F82230 		strb	r3, [r7, #34]
 2853              	.L150:
 819:modem.c       ****     }
 820:modem.c       ****     
 821:modem.c       ****     // Disable LDO, just in case
 822:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2854              		.loc 1 822 0
 2855 01d8 4FF4FA62 		mov	r2, #2000
 2856 01dc 1249     		ldr	r1, .L153+4
 2857 01de 2448     		ldr	r0, .L153+76
 2858 01e0 FFF7FEFF 		bl	at_write_command
 823:modem.c       ****     
 824:modem.c       ****     // Flush modem's GPS data, just in case
 825:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2859              		.loc 1 825 0
 2860 01e4 4FF4FA62 		mov	r2, #2000
 2861 01e8 0F49     		ldr	r1, .L153+4
 2862 01ea 2248     		ldr	r0, .L153+80
 2863 01ec FFF7FEFF 		bl	at_write_command
 826:modem.c       ****     
 827:modem.c       ****     
 828:modem.c       ****     
 829:modem.c       ****     
 830:modem.c       ****     
 831:modem.c       ****     /* Relevant to 3g modem, can ignore
 832:modem.c       ****     
 833:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 834:modem.c       ****     //AT$GPSQOS=50,50,100,0
 835:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 836:modem.c       ****     
 837:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 838:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 839:modem.c       ****     
 840:modem.c       ****     //unlock contedt, simnce its being used by modem
 841:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 842:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 843:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 844:modem.c       ****     
 845:modem.c       ****     //unlock contedt, simnce its being used by modem
 846:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 847:modem.c       ****     
 848:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 849:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 850:modem.c       ****     
 851:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 852:modem.c       ****    uint8 gps_status = 0;
 853:modem.c       ****     for(uint16 i=0;i<200;i++){
 854:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 855:modem.c       ****         if(gps_status){
 856:modem.c       ****             break;   
 857:modem.c       ****         }
 858:modem.c       ****   }
 859:modem.c       ****     
 860:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 71


 861:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 862:modem.c       ****     if(gps_status){
 863:modem.c       ****         float lat,lon,alt = 0;
 864:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 865:modem.c       ****             gps.altitude = alt;
 866:modem.c       ****             gps.latitude = lat/60;
 867:modem.c       ****             gps.longitude = lon/60;
 868:modem.c       ****             gps.valid = 1;
 869:modem.c       ****         }
 870:modem.c       ****         
 871:modem.c       ****     }
 872:modem.c       ****     
 873:modem.c       ****     //turn off gps
 874:modem.c       ****     //AT$GPSP=0
 875:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 876:modem.c       ****     
 877:modem.c       ****     */
 878:modem.c       **** 
 879:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 880:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2864              		.loc 1 880 0
 2865 01f0 FFF7FEFF 		bl	getTimeStamp
 2866 01f4 0246     		mov	r2, r0
 2867 01f6 3B6B     		ldr	r3, [r7, #48]
 2868 01f8 D31A     		subs	r3, r2, r3
 2869 01fa 3B63     		str	r3, [r7, #48]
 881:modem.c       ****     gps.time_to_lock = lock_time;
 2870              		.loc 1 881 0
 2871 01fc 3B6B     		ldr	r3, [r7, #48]
 2872 01fe 9BB2     		uxth	r3, r3
 2873 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 882:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2874              		.loc 1 882 0
 2875 0202 3B8C     		ldrh	r3, [r7, #32]
 2876 0204 1A46     		mov	r2, r3
 2877 0206 1C49     		ldr	r1, .L153+84
 2878 0208 0020     		movs	r0, #0
 2879 020a FFF7FEFF 		bl	printNotif
 883:modem.c       ****     
 884:modem.c       ****     return gps;
 2880              		.loc 1 884 0
 2881 020e 7B68     		ldr	r3, [r7, #4]
 2882 0210 1C46     		mov	r4, r3
 2883 0212 07F11403 		add	r3, r7, #20
 2884 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2885 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2886              	.L143:
 885:modem.c       ****     
 886:modem.c       **** }
 2887              		.loc 1 886 0
 2888 021c 7868     		ldr	r0, [r7, #4]
 2889 021e 3837     		adds	r7, r7, #56
 2890              		.cfi_def_cfa_offset 16
 2891 0220 BD46     		mov	sp, r7
 2892              		.cfi_def_cfa_register 13
 2893              		@ sp needed
 2894 0222 B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 72


 2895              	.L154:
 2896              		.align	2
 2897              	.L153:
 2898 0224 00000000 		.word	modem_state
 2899 0228 00000000 		.word	.LC0
 2900 022c A0060000 		.word	.LC69
 2901 0230 B4060000 		.word	.LC70
 2902 0234 C4060000 		.word	.LC71
 2903 0238 D0060000 		.word	.LC72
 2904 023c E0060000 		.word	.LC73
 2905 0240 04070000 		.word	.LC74
 2906 0244 14070000 		.word	.LC75
 2907 0248 D8020000 		.word	.LC27
 2908 024c 24070000 		.word	.LC76
 2909 0250 3C070000 		.word	.LC77
 2910 0254 40070000 		.word	.LC78
 2911 0258 4C070000 		.word	.LC79
 2912 025c 00000000 		.word	uart_received_string
 2913 0260 58070000 		.word	.LC80
 2914 0264 0000C842 		.word	1120403456
 2915 0268 00005940 		.word	1079574528
 2916 026c 00004E40 		.word	1078853632
 2917 0270 78070000 		.word	.LC81
 2918 0274 8C070000 		.word	.LC82
 2919 0278 98070000 		.word	.LC83
 2920              		.cfi_endproc
 2921              	.LFE87:
 2922              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2923              		.text
 2924              	.Letext0:
 2925              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2926              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2927              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2928              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2929              		.file 6 "testing.h"
 2930              		.file 7 "data.h"
 2931              		.file 8 "modem.h"
 2932              		.file 9 "notoriOS.h"
 2933              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2934              		.file 11 "level_sensor.h"
 2935              		.file 12 "App_LED.h"
 2936              		.section	.debug_info,"",%progbits
 2937              	.Ldebug_info0:
 2938 0000 740C0000 		.4byte	0xc74
 2939 0004 0400     		.2byte	0x4
 2940 0006 00000000 		.4byte	.Ldebug_abbrev0
 2941 000a 04       		.byte	0x4
 2942 000b 01       		.uleb128 0x1
 2943 000c 9C000000 		.4byte	.LASF170
 2944 0010 0C       		.byte	0xc
 2945 0011 4D040000 		.4byte	.LASF171
 2946 0015 28000000 		.4byte	.LASF172
 2947 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2948 001d 00000000 		.4byte	0
 2949 0021 00000000 		.4byte	.Ldebug_line0
 2950 0025 02       		.uleb128 0x2
 2951 0026 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 73


 2952 0027 06       		.byte	0x6
 2953 0028 B1010000 		.4byte	.LASF0
 2954 002c 03       		.uleb128 0x3
 2955 002d 70000000 		.4byte	.LASF4
 2956 0031 02       		.byte	0x2
 2957 0032 1D       		.byte	0x1d
 2958 0033 37000000 		.4byte	0x37
 2959 0037 02       		.uleb128 0x2
 2960 0038 01       		.byte	0x1
 2961 0039 08       		.byte	0x8
 2962 003a 27060000 		.4byte	.LASF1
 2963 003e 02       		.uleb128 0x2
 2964 003f 02       		.byte	0x2
 2965 0040 05       		.byte	0x5
 2966 0041 85040000 		.4byte	.LASF2
 2967 0045 02       		.uleb128 0x2
 2968 0046 02       		.byte	0x2
 2969 0047 07       		.byte	0x7
 2970 0048 D2020000 		.4byte	.LASF3
 2971 004c 03       		.uleb128 0x3
 2972 004d 9A040000 		.4byte	.LASF5
 2973 0051 02       		.byte	0x2
 2974 0052 3F       		.byte	0x3f
 2975 0053 57000000 		.4byte	0x57
 2976 0057 02       		.uleb128 0x2
 2977 0058 04       		.byte	0x4
 2978 0059 05       		.byte	0x5
 2979 005a 38020000 		.4byte	.LASF6
 2980 005e 03       		.uleb128 0x3
 2981 005f F5020000 		.4byte	.LASF7
 2982 0063 02       		.byte	0x2
 2983 0064 41       		.byte	0x41
 2984 0065 69000000 		.4byte	0x69
 2985 0069 02       		.uleb128 0x2
 2986 006a 04       		.byte	0x4
 2987 006b 07       		.byte	0x7
 2988 006c B0030000 		.4byte	.LASF8
 2989 0070 02       		.uleb128 0x2
 2990 0071 08       		.byte	0x8
 2991 0072 05       		.byte	0x5
 2992 0073 A3010000 		.4byte	.LASF9
 2993 0077 02       		.uleb128 0x2
 2994 0078 08       		.byte	0x8
 2995 0079 07       		.byte	0x7
 2996 007a 37010000 		.4byte	.LASF10
 2997 007e 04       		.uleb128 0x4
 2998 007f 04       		.byte	0x4
 2999 0080 05       		.byte	0x5
 3000 0081 696E7400 		.ascii	"int\000"
 3001 0085 02       		.uleb128 0x2
 3002 0086 04       		.byte	0x4
 3003 0087 07       		.byte	0x7
 3004 0088 37070000 		.4byte	.LASF11
 3005 008c 03       		.uleb128 0x3
 3006 008d 85080000 		.4byte	.LASF12
 3007 0091 03       		.byte	0x3
 3008 0092 18       		.byte	0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 74


 3009 0093 2C000000 		.4byte	0x2c
 3010 0097 03       		.uleb128 0x3
 3011 0098 1F060000 		.4byte	.LASF13
 3012 009c 03       		.byte	0x3
 3013 009d 2C       		.byte	0x2c
 3014 009e 4C000000 		.4byte	0x4c
 3015 00a2 03       		.uleb128 0x3
 3016 00a3 08080000 		.4byte	.LASF14
 3017 00a7 03       		.byte	0x3
 3018 00a8 30       		.byte	0x30
 3019 00a9 5E000000 		.4byte	0x5e
 3020 00ad 05       		.uleb128 0x5
 3021 00ae 76020000 		.4byte	.LASF15
 3022 00b2 04       		.byte	0x4
 3023 00b3 9201     		.2byte	0x192
 3024 00b5 37000000 		.4byte	0x37
 3025 00b9 05       		.uleb128 0x5
 3026 00ba 0B000000 		.4byte	.LASF16
 3027 00be 04       		.byte	0x4
 3028 00bf 9301     		.2byte	0x193
 3029 00c1 45000000 		.4byte	0x45
 3030 00c5 05       		.uleb128 0x5
 3031 00c6 E5020000 		.4byte	.LASF17
 3032 00ca 04       		.byte	0x4
 3033 00cb 9401     		.2byte	0x194
 3034 00cd 69000000 		.4byte	0x69
 3035 00d1 05       		.uleb128 0x5
 3036 00d2 8D080000 		.4byte	.LASF18
 3037 00d6 04       		.byte	0x4
 3038 00d7 9601     		.2byte	0x196
 3039 00d9 3E000000 		.4byte	0x3e
 3040 00dd 05       		.uleb128 0x5
 3041 00de 9B020000 		.4byte	.LASF19
 3042 00e2 04       		.byte	0x4
 3043 00e3 9701     		.2byte	0x197
 3044 00e5 57000000 		.4byte	0x57
 3045 00e9 02       		.uleb128 0x2
 3046 00ea 04       		.byte	0x4
 3047 00eb 04       		.byte	0x4
 3048 00ec D8050000 		.4byte	.LASF20
 3049 00f0 02       		.uleb128 0x2
 3050 00f1 08       		.byte	0x8
 3051 00f2 04       		.byte	0x4
 3052 00f3 F7080000 		.4byte	.LASF21
 3053 00f7 02       		.uleb128 0x2
 3054 00f8 01       		.byte	0x1
 3055 00f9 08       		.byte	0x8
 3056 00fa 1E070000 		.4byte	.LASF22
 3057 00fe 02       		.uleb128 0x2
 3058 00ff 08       		.byte	0x8
 3059 0100 04       		.byte	0x4
 3060 0101 12070000 		.4byte	.LASF23
 3061 0105 02       		.uleb128 0x2
 3062 0106 04       		.byte	0x4
 3063 0107 07       		.byte	0x7
 3064 0108 28050000 		.4byte	.LASF24
 3065 010c 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 75


 3066 010d 04       		.byte	0x4
 3067 010e F7000000 		.4byte	0xf7
 3068 0112 06       		.uleb128 0x6
 3069 0113 04       		.byte	0x4
 3070 0114 18010000 		.4byte	0x118
 3071 0118 07       		.uleb128 0x7
 3072 0119 F7000000 		.4byte	0xf7
 3073 011d 08       		.uleb128 0x8
 3074 011e F7000000 		.4byte	0xf7
 3075 0122 2D010000 		.4byte	0x12d
 3076 0126 09       		.uleb128 0x9
 3077 0127 05010000 		.4byte	0x105
 3078 012b 17       		.byte	0x17
 3079 012c 00       		.byte	0
 3080 012d 0A       		.uleb128 0xa
 3081 012e 746D00   		.ascii	"tm\000"
 3082 0131 24       		.byte	0x24
 3083 0132 05       		.byte	0x5
 3084 0133 21       		.byte	0x21
 3085 0134 A5010000 		.4byte	0x1a5
 3086 0138 0B       		.uleb128 0xb
 3087 0139 11080000 		.4byte	.LASF25
 3088 013d 05       		.byte	0x5
 3089 013e 23       		.byte	0x23
 3090 013f 7E000000 		.4byte	0x7e
 3091 0143 00       		.byte	0
 3092 0144 0B       		.uleb128 0xb
 3093 0145 21050000 		.4byte	.LASF26
 3094 0149 05       		.byte	0x5
 3095 014a 24       		.byte	0x24
 3096 014b 7E000000 		.4byte	0x7e
 3097 014f 04       		.byte	0x4
 3098 0150 0B       		.uleb128 0xb
 3099 0151 18000000 		.4byte	.LASF27
 3100 0155 05       		.byte	0x5
 3101 0156 25       		.byte	0x25
 3102 0157 7E000000 		.4byte	0x7e
 3103 015b 08       		.byte	0x8
 3104 015c 0B       		.uleb128 0xb
 3105 015d F3070000 		.4byte	.LASF28
 3106 0161 05       		.byte	0x5
 3107 0162 26       		.byte	0x26
 3108 0163 7E000000 		.4byte	0x7e
 3109 0167 0C       		.byte	0xc
 3110 0168 0B       		.uleb128 0xb
 3111 0169 17030000 		.4byte	.LASF29
 3112 016d 05       		.byte	0x5
 3113 016e 27       		.byte	0x27
 3114 016f 7E000000 		.4byte	0x7e
 3115 0173 10       		.byte	0x10
 3116 0174 0B       		.uleb128 0xb
 3117 0175 72030000 		.4byte	.LASF30
 3118 0179 05       		.byte	0x5
 3119 017a 28       		.byte	0x28
 3120 017b 7E000000 		.4byte	0x7e
 3121 017f 14       		.byte	0x14
 3122 0180 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 76


 3123 0181 CE060000 		.4byte	.LASF31
 3124 0185 05       		.byte	0x5
 3125 0186 29       		.byte	0x29
 3126 0187 7E000000 		.4byte	0x7e
 3127 018b 18       		.byte	0x18
 3128 018c 0B       		.uleb128 0xb
 3129 018d 20000000 		.4byte	.LASF32
 3130 0191 05       		.byte	0x5
 3131 0192 2A       		.byte	0x2a
 3132 0193 7E000000 		.4byte	0x7e
 3133 0197 1C       		.byte	0x1c
 3134 0198 0B       		.uleb128 0xb
 3135 0199 14040000 		.4byte	.LASF33
 3136 019d 05       		.byte	0x5
 3137 019e 2B       		.byte	0x2b
 3138 019f 7E000000 		.4byte	0x7e
 3139 01a3 20       		.byte	0x20
 3140 01a4 00       		.byte	0
 3141 01a5 0C       		.uleb128 0xc
 3142 01a6 8101     		.2byte	0x181
 3143 01a8 06       		.byte	0x6
 3144 01a9 0A       		.byte	0xa
 3145 01aa D3010000 		.4byte	0x1d3
 3146 01ae 0B       		.uleb128 0xb
 3147 01af 72050000 		.4byte	.LASF34
 3148 01b3 06       		.byte	0x6
 3149 01b4 0C       		.byte	0xc
 3150 01b5 D3010000 		.4byte	0x1d3
 3151 01b9 00       		.byte	0
 3152 01ba 0B       		.uleb128 0xb
 3153 01bb 49080000 		.4byte	.LASF35
 3154 01bf 06       		.byte	0x6
 3155 01c0 0D       		.byte	0xd
 3156 01c1 AD000000 		.4byte	0xad
 3157 01c5 80       		.byte	0x80
 3158 01c6 0B       		.uleb128 0xb
 3159 01c7 91060000 		.4byte	.LASF36
 3160 01cb 06       		.byte	0x6
 3161 01cc 0F       		.byte	0xf
 3162 01cd E3010000 		.4byte	0x1e3
 3163 01d1 81       		.byte	0x81
 3164 01d2 00       		.byte	0
 3165 01d3 08       		.uleb128 0x8
 3166 01d4 F7000000 		.4byte	0xf7
 3167 01d8 E3010000 		.4byte	0x1e3
 3168 01dc 09       		.uleb128 0x9
 3169 01dd 05010000 		.4byte	0x105
 3170 01e1 7F       		.byte	0x7f
 3171 01e2 00       		.byte	0
 3172 01e3 08       		.uleb128 0x8
 3173 01e4 F7000000 		.4byte	0xf7
 3174 01e8 F3010000 		.4byte	0x1f3
 3175 01ec 09       		.uleb128 0x9
 3176 01ed 05010000 		.4byte	0x105
 3177 01f1 FF       		.byte	0xff
 3178 01f2 00       		.byte	0
 3179 01f3 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 77


 3180 01f4 79060000 		.4byte	.LASF37
 3181 01f8 06       		.byte	0x6
 3182 01f9 10       		.byte	0x10
 3183 01fa A5010000 		.4byte	0x1a5
 3184 01fe 0D       		.uleb128 0xd
 3185 01ff 2C       		.byte	0x2c
 3186 0200 07       		.byte	0x7
 3187 0201 14       		.byte	0x14
 3188 0202 2B020000 		.4byte	0x22b
 3189 0206 0E       		.uleb128 0xe
 3190 0207 6B657900 		.ascii	"key\000"
 3191 020b 07       		.byte	0x7
 3192 020c 15       		.byte	0x15
 3193 020d 2B020000 		.4byte	0x22b
 3194 0211 00       		.byte	0
 3195 0212 0B       		.uleb128 0xb
 3196 0213 12000000 		.4byte	.LASF38
 3197 0217 07       		.byte	0x7
 3198 0218 16       		.byte	0x16
 3199 0219 2B020000 		.4byte	0x22b
 3200 021d 14       		.byte	0x14
 3201 021e 0B       		.uleb128 0xb
 3202 021f F0030000 		.4byte	.LASF39
 3203 0223 07       		.byte	0x7
 3204 0224 17       		.byte	0x17
 3205 0225 DD000000 		.4byte	0xdd
 3206 0229 28       		.byte	0x28
 3207 022a 00       		.byte	0
 3208 022b 08       		.uleb128 0x8
 3209 022c F7000000 		.4byte	0xf7
 3210 0230 3B020000 		.4byte	0x23b
 3211 0234 09       		.uleb128 0x9
 3212 0235 05010000 		.4byte	0x105
 3213 0239 13       		.byte	0x13
 3214 023a 00       		.byte	0
 3215 023b 03       		.uleb128 0x3
 3216 023c 9A030000 		.4byte	.LASF40
 3217 0240 07       		.byte	0x7
 3218 0241 19       		.byte	0x19
 3219 0242 FE010000 		.4byte	0x1fe
 3220 0246 0D       		.uleb128 0xd
 3221 0247 3C       		.byte	0x3c
 3222 0248 08       		.byte	0x8
 3223 0249 35       		.byte	0x35
 3224 024a 73020000 		.4byte	0x273
 3225 024e 0B       		.uleb128 0xb
 3226 024f EC070000 		.4byte	.LASF41
 3227 0253 08       		.byte	0x8
 3228 0254 36       		.byte	0x36
 3229 0255 2B020000 		.4byte	0x22b
 3230 0259 00       		.byte	0
 3231 025a 0B       		.uleb128 0xb
 3232 025b 49070000 		.4byte	.LASF42
 3233 025f 08       		.byte	0x8
 3234 0260 37       		.byte	0x37
 3235 0261 2B020000 		.4byte	0x22b
 3236 0265 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 78


 3237 0266 0B       		.uleb128 0xb
 3238 0267 8C060000 		.4byte	.LASF43
 3239 026b 08       		.byte	0x8
 3240 026c 38       		.byte	0x38
 3241 026d 2B020000 		.4byte	0x22b
 3242 0271 28       		.byte	0x28
 3243 0272 00       		.byte	0
 3244 0273 03       		.uleb128 0x3
 3245 0274 5D070000 		.4byte	.LASF44
 3246 0278 08       		.byte	0x8
 3247 0279 3A       		.byte	0x3a
 3248 027a 46020000 		.4byte	0x246
 3249 027e 0D       		.uleb128 0xd
 3250 027f 20       		.byte	0x20
 3251 0280 08       		.byte	0x8
 3252 0281 3C       		.byte	0x3c
 3253 0282 E7020000 		.4byte	0x2e7
 3254 0286 0B       		.uleb128 0xb
 3255 0287 41020000 		.4byte	.LASF45
 3256 028b 08       		.byte	0x8
 3257 028c 3D       		.byte	0x3d
 3258 028d 7E000000 		.4byte	0x7e
 3259 0291 00       		.byte	0
 3260 0292 0E       		.uleb128 0xe
 3261 0293 62657200 		.ascii	"ber\000"
 3262 0297 08       		.byte	0x8
 3263 0298 3E       		.byte	0x3e
 3264 0299 7E000000 		.4byte	0x7e
 3265 029d 04       		.byte	0x4
 3266 029e 0B       		.uleb128 0xb
 3267 029f 5A060000 		.4byte	.LASF46
 3268 02a3 08       		.byte	0x8
 3269 02a4 3F       		.byte	0x3f
 3270 02a5 7E000000 		.4byte	0x7e
 3271 02a9 08       		.byte	0x8
 3272 02aa 0B       		.uleb128 0xb
 3273 02ab BD010000 		.4byte	.LASF47
 3274 02af 08       		.byte	0x8
 3275 02b0 40       		.byte	0x40
 3276 02b1 7E000000 		.4byte	0x7e
 3277 02b5 0C       		.byte	0xc
 3278 02b6 0B       		.uleb128 0xb
 3279 02b7 4B060000 		.4byte	.LASF48
 3280 02bb 08       		.byte	0x8
 3281 02bc 41       		.byte	0x41
 3282 02bd 7E000000 		.4byte	0x7e
 3283 02c1 10       		.byte	0x10
 3284 02c2 0B       		.uleb128 0xb
 3285 02c3 98060000 		.4byte	.LASF49
 3286 02c7 08       		.byte	0x8
 3287 02c8 42       		.byte	0x42
 3288 02c9 7E000000 		.4byte	0x7e
 3289 02cd 14       		.byte	0x14
 3290 02ce 0B       		.uleb128 0xb
 3291 02cf DF010000 		.4byte	.LASF50
 3292 02d3 08       		.byte	0x8
 3293 02d4 43       		.byte	0x43
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 79


 3294 02d5 7E000000 		.4byte	0x7e
 3295 02d9 18       		.byte	0x18
 3296 02da 0B       		.uleb128 0xb
 3297 02db 68040000 		.4byte	.LASF51
 3298 02df 08       		.byte	0x8
 3299 02e0 44       		.byte	0x44
 3300 02e1 7E000000 		.4byte	0x7e
 3301 02e5 1C       		.byte	0x1c
 3302 02e6 00       		.byte	0
 3303 02e7 03       		.uleb128 0x3
 3304 02e8 9D060000 		.4byte	.LASF52
 3305 02ec 08       		.byte	0x8
 3306 02ed 46       		.byte	0x46
 3307 02ee 7E020000 		.4byte	0x27e
 3308 02f2 0D       		.uleb128 0xd
 3309 02f3 10       		.byte	0x10
 3310 02f4 08       		.byte	0x8
 3311 02f5 48       		.byte	0x48
 3312 02f6 37030000 		.4byte	0x337
 3313 02fa 0B       		.uleb128 0xb
 3314 02fb 69050000 		.4byte	.LASF53
 3315 02ff 08       		.byte	0x8
 3316 0300 49       		.byte	0x49
 3317 0301 E9000000 		.4byte	0xe9
 3318 0305 00       		.byte	0
 3319 0306 0B       		.uleb128 0xb
 3320 0307 92000000 		.4byte	.LASF54
 3321 030b 08       		.byte	0x8
 3322 030c 4A       		.byte	0x4a
 3323 030d E9000000 		.4byte	0xe9
 3324 0311 04       		.byte	0x4
 3325 0312 0B       		.uleb128 0xb
 3326 0313 6D020000 		.4byte	.LASF55
 3327 0317 08       		.byte	0x8
 3328 0318 4B       		.byte	0x4b
 3329 0319 E9000000 		.4byte	0xe9
 3330 031d 08       		.byte	0x8
 3331 031e 0B       		.uleb128 0xb
 3332 031f FA030000 		.4byte	.LASF56
 3333 0323 08       		.byte	0x8
 3334 0324 4C       		.byte	0x4c
 3335 0325 B9000000 		.4byte	0xb9
 3336 0329 0C       		.byte	0xc
 3337 032a 0B       		.uleb128 0xb
 3338 032b FB070000 		.4byte	.LASF57
 3339 032f 08       		.byte	0x8
 3340 0330 4D       		.byte	0x4d
 3341 0331 AD000000 		.4byte	0xad
 3342 0335 0E       		.byte	0xe
 3343 0336 00       		.byte	0
 3344 0337 03       		.uleb128 0x3
 3345 0338 6A070000 		.4byte	.LASF58
 3346 033c 08       		.byte	0x8
 3347 033d 4F       		.byte	0x4f
 3348 033e F2020000 		.4byte	0x2f2
 3349 0342 0D       		.uleb128 0xd
 3350 0343 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 80


 3351 0344 08       		.byte	0x8
 3352 0345 52       		.byte	0x52
 3353 0346 93030000 		.4byte	0x393
 3354 034a 0B       		.uleb128 0xb
 3355 034b FD050000 		.4byte	.LASF59
 3356 034f 08       		.byte	0x8
 3357 0350 56       		.byte	0x56
 3358 0351 93030000 		.4byte	0x393
 3359 0355 00       		.byte	0
 3360 0356 0B       		.uleb128 0xb
 3361 0357 82070000 		.4byte	.LASF60
 3362 035b 08       		.byte	0x8
 3363 035c 58       		.byte	0x58
 3364 035d AD000000 		.4byte	0xad
 3365 0361 01       		.byte	0x1
 3366 0362 0B       		.uleb128 0xb
 3367 0363 50060000 		.4byte	.LASF61
 3368 0367 08       		.byte	0x8
 3369 0368 5A       		.byte	0x5a
 3370 0369 AD000000 		.4byte	0xad
 3371 036d 02       		.byte	0x2
 3372 036e 0B       		.uleb128 0xb
 3373 036f 2D030000 		.4byte	.LASF62
 3374 0373 08       		.byte	0x8
 3375 0374 5D       		.byte	0x5d
 3376 0375 AD000000 		.4byte	0xad
 3377 0379 03       		.byte	0x3
 3378 037a 0B       		.uleb128 0xb
 3379 037b 69080000 		.4byte	.LASF63
 3380 037f 08       		.byte	0x8
 3381 0380 62       		.byte	0x62
 3382 0381 AD000000 		.4byte	0xad
 3383 0385 04       		.byte	0x4
 3384 0386 0B       		.uleb128 0xb
 3385 0387 ED060000 		.4byte	.LASF64
 3386 038b 08       		.byte	0x8
 3387 038c 64       		.byte	0x64
 3388 038d AD000000 		.4byte	0xad
 3389 0391 05       		.byte	0x5
 3390 0392 00       		.byte	0
 3391 0393 02       		.uleb128 0x2
 3392 0394 01       		.byte	0x1
 3393 0395 02       		.byte	0x2
 3394 0396 19060000 		.4byte	.LASF65
 3395 039a 03       		.uleb128 0x3
 3396 039b EC040000 		.4byte	.LASF66
 3397 039f 08       		.byte	0x8
 3398 03a0 66       		.byte	0x66
 3399 03a1 42030000 		.4byte	0x342
 3400 03a5 0D       		.uleb128 0xd
 3401 03a6 06       		.byte	0x6
 3402 03a7 09       		.byte	0x9
 3403 03a8 2E       		.byte	0x2e
 3404 03a9 DE030000 		.4byte	0x3de
 3405 03ad 0B       		.uleb128 0xb
 3406 03ae C2010000 		.4byte	.LASF67
 3407 03b2 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 81


 3408 03b3 30       		.byte	0x30
 3409 03b4 B9000000 		.4byte	0xb9
 3410 03b8 00       		.byte	0
 3411 03b9 0B       		.uleb128 0xb
 3412 03ba 47020000 		.4byte	.LASF68
 3413 03be 09       		.byte	0x9
 3414 03bf 31       		.byte	0x31
 3415 03c0 D1000000 		.4byte	0xd1
 3416 03c4 02       		.byte	0x2
 3417 03c5 0B       		.uleb128 0xb
 3418 03c6 A5080000 		.4byte	.LASF69
 3419 03ca 09       		.byte	0x9
 3420 03cb 32       		.byte	0x32
 3421 03cc AD000000 		.4byte	0xad
 3422 03d0 04       		.byte	0x4
 3423 03d1 0B       		.uleb128 0xb
 3424 03d2 7A000000 		.4byte	.LASF70
 3425 03d6 09       		.byte	0x9
 3426 03d7 33       		.byte	0x33
 3427 03d8 AD000000 		.4byte	0xad
 3428 03dc 05       		.byte	0x5
 3429 03dd 00       		.byte	0
 3430 03de 03       		.uleb128 0x3
 3431 03df 13060000 		.4byte	.LASF71
 3432 03e3 09       		.byte	0x9
 3433 03e4 36       		.byte	0x36
 3434 03e5 E9030000 		.4byte	0x3e9
 3435 03e9 0F       		.uleb128 0xf
 3436 03ea A5030000 		.4byte	0x3a5
 3437 03ee 0D       		.uleb128 0xd
 3438 03ef 1C       		.byte	0x1c
 3439 03f0 09       		.byte	0x9
 3440 03f1 39       		.byte	0x39
 3441 03f2 0F040000 		.4byte	0x40f
 3442 03f6 0B       		.uleb128 0xb
 3443 03f7 1D040000 		.4byte	.LASF72
 3444 03fb 09       		.byte	0x9
 3445 03fc 3B       		.byte	0x3b
 3446 03fd 0F040000 		.4byte	0x40f
 3447 0401 00       		.byte	0
 3448 0402 0B       		.uleb128 0xb
 3449 0403 30040000 		.4byte	.LASF73
 3450 0407 09       		.byte	0x9
 3451 0408 3C       		.byte	0x3c
 3452 0409 1D010000 		.4byte	0x11d
 3453 040d 04       		.byte	0x4
 3454 040e 00       		.byte	0
 3455 040f 06       		.uleb128 0x6
 3456 0410 04       		.byte	0x4
 3457 0411 73020000 		.4byte	0x273
 3458 0415 03       		.uleb128 0x3
 3459 0416 E1040000 		.4byte	.LASF74
 3460 041a 09       		.byte	0x9
 3461 041b 3E       		.byte	0x3e
 3462 041c EE030000 		.4byte	0x3ee
 3463 0420 0D       		.uleb128 0xd
 3464 0421 68       		.byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 82


 3465 0422 09       		.byte	0x9
 3466 0423 44       		.byte	0x44
 3467 0424 41040000 		.4byte	0x441
 3468 0428 0B       		.uleb128 0xb
 3469 0429 28040000 		.4byte	.LASF75
 3470 042d 09       		.byte	0x9
 3471 042e 49       		.byte	0x49
 3472 042f 41040000 		.4byte	0x441
 3473 0433 00       		.byte	0
 3474 0434 0B       		.uleb128 0xb
 3475 0435 0C040000 		.4byte	.LASF76
 3476 0439 09       		.byte	0x9
 3477 043a 4A       		.byte	0x4a
 3478 043b 7E000000 		.4byte	0x7e
 3479 043f 64       		.byte	0x64
 3480 0440 00       		.byte	0
 3481 0441 08       		.uleb128 0x8
 3482 0442 F7000000 		.4byte	0xf7
 3483 0446 51040000 		.4byte	0x451
 3484 044a 09       		.uleb128 0x9
 3485 044b 05010000 		.4byte	0x105
 3486 044f 63       		.byte	0x63
 3487 0450 00       		.byte	0
 3488 0451 03       		.uleb128 0x3
 3489 0452 76080000 		.4byte	.LASF77
 3490 0456 09       		.byte	0x9
 3491 0457 50       		.byte	0x50
 3492 0458 20040000 		.4byte	0x420
 3493 045c 10       		.uleb128 0x10
 3494 045d 06060000 		.4byte	.LASF109
 3495 0461 01       		.byte	0x1
 3496 0462 12       		.byte	0x12
 3497 0463 00000000 		.4byte	.LFB64
 3498 0467 44000000 		.4byte	.LFE64-.LFB64
 3499 046b 01       		.uleb128 0x1
 3500 046c 9C       		.byte	0x9c
 3501 046d 11       		.uleb128 0x11
 3502 046e DE050000 		.4byte	.LASF78
 3503 0472 01       		.byte	0x1
 3504 0473 1C       		.byte	0x1c
 3505 0474 00000000 		.4byte	.LFB65
 3506 0478 6C000000 		.4byte	.LFE65-.LFB65
 3507 047c 01       		.uleb128 0x1
 3508 047d 9C       		.byte	0x9c
 3509 047e 11       		.uleb128 0x11
 3510 047f CA070000 		.4byte	.LASF79
 3511 0483 01       		.byte	0x1
 3512 0484 36       		.byte	0x36
 3513 0485 00000000 		.4byte	.LFB66
 3514 0489 32000000 		.4byte	.LFE66-.LFB66
 3515 048d 01       		.uleb128 0x1
 3516 048e 9C       		.byte	0x9c
 3517 048f 11       		.uleb128 0x11
 3518 0490 84030000 		.4byte	.LASF80
 3519 0494 01       		.byte	0x1
 3520 0495 46       		.byte	0x46
 3521 0496 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 83


 3522 049a 20000000 		.4byte	.LFE67-.LFB67
 3523 049e 01       		.uleb128 0x1
 3524 049f 9C       		.byte	0x9c
 3525 04a0 11       		.uleb128 0x11
 3526 04a1 E6080000 		.4byte	.LASF81
 3527 04a5 01       		.byte	0x1
 3528 04a6 4F       		.byte	0x4f
 3529 04a7 00000000 		.4byte	.LFB68
 3530 04ab 40000000 		.4byte	.LFE68-.LFB68
 3531 04af 01       		.uleb128 0x1
 3532 04b0 9C       		.byte	0x9c
 3533 04b1 12       		.uleb128 0x12
 3534 04b2 3E040000 		.4byte	.LASF95
 3535 04b6 01       		.byte	0x1
 3536 04b7 61       		.byte	0x61
 3537 04b8 AD000000 		.4byte	0xad
 3538 04bc 00000000 		.4byte	.LFB69
 3539 04c0 DC000000 		.4byte	.LFE69-.LFB69
 3540 04c4 01       		.uleb128 0x1
 3541 04c5 9C       		.byte	0x9c
 3542 04c6 25050000 		.4byte	0x525
 3543 04ca 13       		.uleb128 0x13
 3544 04cb 93080000 		.4byte	.LASF82
 3545 04cf 01       		.byte	0x1
 3546 04d0 6A       		.byte	0x6a
 3547 04d1 AD000000 		.4byte	0xad
 3548 04d5 02       		.uleb128 0x2
 3549 04d6 91       		.byte	0x91
 3550 04d7 77       		.sleb128 -9
 3551 04d8 13       		.uleb128 0x13
 3552 04d9 9C080000 		.4byte	.LASF83
 3553 04dd 01       		.byte	0x1
 3554 04de 6B       		.byte	0x6b
 3555 04df AD000000 		.4byte	0xad
 3556 04e3 02       		.uleb128 0x2
 3557 04e4 91       		.byte	0x91
 3558 04e5 74       		.sleb128 -12
 3559 04e6 13       		.uleb128 0x13
 3560 04e7 B3080000 		.4byte	.LASF84
 3561 04eb 01       		.byte	0x1
 3562 04ec 6D       		.byte	0x6d
 3563 04ed 57000000 		.4byte	0x57
 3564 04f1 02       		.uleb128 0x2
 3565 04f2 91       		.byte	0x91
 3566 04f3 70       		.sleb128 -16
 3567 04f4 14       		.uleb128 0x14
 3568 04f5 26000000 		.4byte	.LBB2
 3569 04f9 4A000000 		.4byte	.LBE2-.LBB2
 3570 04fd 13       		.uleb128 0x13
 3571 04fe 9C080000 		.4byte	.LASF83
 3572 0502 01       		.byte	0x1
 3573 0503 70       		.byte	0x70
 3574 0504 AD000000 		.4byte	0xad
 3575 0508 02       		.uleb128 0x2
 3576 0509 91       		.byte	0x91
 3577 050a 76       		.sleb128 -10
 3578 050b 14       		.uleb128 0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 84


 3579 050c 2C000000 		.4byte	.LBB3
 3580 0510 2A000000 		.4byte	.LBE3-.LBB3
 3581 0514 13       		.uleb128 0x13
 3582 0515 A6030000 		.4byte	.LASF85
 3583 0519 01       		.byte	0x1
 3584 051a 72       		.byte	0x72
 3585 051b AD000000 		.4byte	0xad
 3586 051f 02       		.uleb128 0x2
 3587 0520 91       		.byte	0x91
 3588 0521 75       		.sleb128 -11
 3589 0522 00       		.byte	0
 3590 0523 00       		.byte	0
 3591 0524 00       		.byte	0
 3592 0525 11       		.uleb128 0x11
 3593 0526 D6060000 		.4byte	.LASF86
 3594 052a 01       		.byte	0x1
 3595 052b 93       		.byte	0x93
 3596 052c 00000000 		.4byte	.LFB70
 3597 0530 1C000000 		.4byte	.LFE70-.LFB70
 3598 0534 01       		.uleb128 0x1
 3599 0535 9C       		.byte	0x9c
 3600 0536 11       		.uleb128 0x11
 3601 0537 AB060000 		.4byte	.LASF87
 3602 053b 01       		.byte	0x1
 3603 053c 9B       		.byte	0x9b
 3604 053d 00000000 		.4byte	.LFB71
 3605 0541 28000000 		.4byte	.LFE71-.LFB71
 3606 0545 01       		.uleb128 0x1
 3607 0546 9C       		.byte	0x9c
 3608 0547 15       		.uleb128 0x15
 3609 0548 D0040000 		.4byte	.LASF99
 3610 054c 01       		.byte	0x1
 3611 054d A6       		.byte	0xa6
 3612 054e 8C000000 		.4byte	0x8c
 3613 0552 00000000 		.4byte	.LFB72
 3614 0556 C8000000 		.4byte	.LFE72-.LFB72
 3615 055a 01       		.uleb128 0x1
 3616 055b 9C       		.byte	0x9c
 3617 055c D9050000 		.4byte	0x5d9
 3618 0560 16       		.uleb128 0x16
 3619 0561 BE050000 		.4byte	.LASF88
 3620 0565 01       		.byte	0x1
 3621 0566 A6       		.byte	0xa6
 3622 0567 0C010000 		.4byte	0x10c
 3623 056b 02       		.uleb128 0x2
 3624 056c 91       		.byte	0x91
 3625 056d 5C       		.sleb128 -36
 3626 056e 16       		.uleb128 0x16
 3627 056f BD080000 		.4byte	.LASF89
 3628 0573 01       		.byte	0x1
 3629 0574 A6       		.byte	0xa6
 3630 0575 0C010000 		.4byte	0x10c
 3631 0579 02       		.uleb128 0x2
 3632 057a 91       		.byte	0x91
 3633 057b 58       		.sleb128 -40
 3634 057c 16       		.uleb128 0x16
 3635 057d D1030000 		.4byte	.LASF90
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 85


 3636 0581 01       		.byte	0x1
 3637 0582 A6       		.byte	0xa6
 3638 0583 A2000000 		.4byte	0xa2
 3639 0587 02       		.uleb128 0x2
 3640 0588 91       		.byte	0x91
 3641 0589 54       		.sleb128 -44
 3642 058a 13       		.uleb128 0x13
 3643 058b C5040000 		.4byte	.LASF91
 3644 058f 01       		.byte	0x1
 3645 0590 A8       		.byte	0xa8
 3646 0591 C5000000 		.4byte	0xc5
 3647 0595 02       		.uleb128 0x2
 3648 0596 91       		.byte	0x91
 3649 0597 74       		.sleb128 -12
 3650 0598 14       		.uleb128 0x14
 3651 0599 16000000 		.4byte	.LBB4
 3652 059d 88000000 		.4byte	.LBE4-.LBB4
 3653 05a1 13       		.uleb128 0x13
 3654 05a2 C7050000 		.4byte	.LASF92
 3655 05a6 01       		.byte	0x1
 3656 05a7 AC       		.byte	0xac
 3657 05a8 0C010000 		.4byte	0x10c
 3658 05ac 02       		.uleb128 0x2
 3659 05ad 91       		.byte	0x91
 3660 05ae 64       		.sleb128 -28
 3661 05af 13       		.uleb128 0x13
 3662 05b0 45060000 		.4byte	.LASF93
 3663 05b4 01       		.byte	0x1
 3664 05b5 AD       		.byte	0xad
 3665 05b6 A2000000 		.4byte	0xa2
 3666 05ba 02       		.uleb128 0x2
 3667 05bb 91       		.byte	0x91
 3668 05bc 6C       		.sleb128 -20
 3669 05bd 17       		.uleb128 0x17
 3670 05be 6900     		.ascii	"i\000"
 3671 05c0 01       		.byte	0x1
 3672 05c1 AE       		.byte	0xae
 3673 05c2 A2000000 		.4byte	0xa2
 3674 05c6 02       		.uleb128 0x2
 3675 05c7 91       		.byte	0x91
 3676 05c8 70       		.sleb128 -16
 3677 05c9 13       		.uleb128 0x13
 3678 05ca EC020000 		.4byte	.LASF94
 3679 05ce 01       		.byte	0x1
 3680 05cf AE       		.byte	0xae
 3681 05d0 A2000000 		.4byte	0xa2
 3682 05d4 02       		.uleb128 0x2
 3683 05d5 91       		.byte	0x91
 3684 05d6 68       		.sleb128 -24
 3685 05d7 00       		.byte	0
 3686 05d8 00       		.byte	0
 3687 05d9 12       		.uleb128 0x12
 3688 05da 93050000 		.4byte	.LASF96
 3689 05de 01       		.byte	0x1
 3690 05df DA       		.byte	0xda
 3691 05e0 F3010000 		.4byte	0x1f3
 3692 05e4 00000000 		.4byte	.LFB73
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 86


 3693 05e8 00010000 		.4byte	.LFE73-.LFB73
 3694 05ec 01       		.uleb128 0x1
 3695 05ed 9C       		.byte	0x9c
 3696 05ee 30060000 		.4byte	0x630
 3697 05f2 13       		.uleb128 0x13
 3698 05f3 66010000 		.4byte	.LASF97
 3699 05f7 01       		.byte	0x1
 3700 05f8 DC       		.byte	0xdc
 3701 05f9 F3010000 		.4byte	0x1f3
 3702 05fd 03       		.uleb128 0x3
 3703 05fe 91       		.byte	0x91
 3704 05ff E47C     		.sleb128 -412
 3705 0601 14       		.uleb128 0x14
 3706 0602 4A000000 		.4byte	.LBB5
 3707 0606 86000000 		.4byte	.LBE5-.LBB5
 3708 060a 17       		.uleb128 0x17
 3709 060b 6900     		.ascii	"i\000"
 3710 060d 01       		.byte	0x1
 3711 060e E3       		.byte	0xe3
 3712 060f 7E000000 		.4byte	0x7e
 3713 0613 02       		.uleb128 0x2
 3714 0614 91       		.byte	0x91
 3715 0615 6C       		.sleb128 -20
 3716 0616 14       		.uleb128 0x14
 3717 0617 70000000 		.4byte	.LBB6
 3718 061b 46000000 		.4byte	.LBE6-.LBB6
 3719 061f 13       		.uleb128 0x13
 3720 0620 C5020000 		.4byte	.LASF98
 3721 0624 01       		.byte	0x1
 3722 0625 F0       		.byte	0xf0
 3723 0626 57000000 		.4byte	0x57
 3724 062a 02       		.uleb128 0x2
 3725 062b 91       		.byte	0x91
 3726 062c 68       		.sleb128 -24
 3727 062d 00       		.byte	0
 3728 062e 00       		.byte	0
 3729 062f 00       		.byte	0
 3730 0630 18       		.uleb128 0x18
 3731 0631 C2030000 		.4byte	.LASF100
 3732 0635 01       		.byte	0x1
 3733 0636 0401     		.2byte	0x104
 3734 0638 AD000000 		.4byte	0xad
 3735 063c 00000000 		.4byte	.LFB74
 3736 0640 78000000 		.4byte	.LFE74-.LFB74
 3737 0644 01       		.uleb128 0x1
 3738 0645 9C       		.byte	0x9c
 3739 0646 A1060000 		.4byte	0x6a1
 3740 064a 19       		.uleb128 0x19
 3741 064b B0040000 		.4byte	.LASF101
 3742 064f 01       		.byte	0x1
 3743 0650 0401     		.2byte	0x104
 3744 0652 0C010000 		.4byte	0x10c
 3745 0656 02       		.uleb128 0x2
 3746 0657 91       		.byte	0x91
 3747 0658 6C       		.sleb128 -20
 3748 0659 19       		.uleb128 0x19
 3749 065a 55040000 		.4byte	.LASF102
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 87


 3750 065e 01       		.byte	0x1
 3751 065f 0401     		.2byte	0x104
 3752 0661 12010000 		.4byte	0x112
 3753 0665 02       		.uleb128 0x2
 3754 0666 91       		.byte	0x91
 3755 0667 68       		.sleb128 -24
 3756 0668 19       		.uleb128 0x19
 3757 0669 7B040000 		.4byte	.LASF103
 3758 066d 01       		.byte	0x1
 3759 066e 0401     		.2byte	0x104
 3760 0670 12010000 		.4byte	0x112
 3761 0674 02       		.uleb128 0x2
 3762 0675 91       		.byte	0x91
 3763 0676 64       		.sleb128 -28
 3764 0677 19       		.uleb128 0x19
 3765 0678 61040000 		.4byte	.LASF104
 3766 067c 01       		.byte	0x1
 3767 067d 0401     		.2byte	0x104
 3768 067f 0C010000 		.4byte	0x10c
 3769 0683 02       		.uleb128 0x2
 3770 0684 91       		.byte	0x91
 3771 0685 60       		.sleb128 -32
 3772 0686 1A       		.uleb128 0x1a
 3773 0687 6100     		.ascii	"a\000"
 3774 0689 01       		.byte	0x1
 3775 068a 0601     		.2byte	0x106
 3776 068c 0C010000 		.4byte	0x10c
 3777 0690 02       		.uleb128 0x2
 3778 0691 91       		.byte	0x91
 3779 0692 74       		.sleb128 -12
 3780 0693 1A       		.uleb128 0x1a
 3781 0694 6200     		.ascii	"b\000"
 3782 0696 01       		.byte	0x1
 3783 0697 0601     		.2byte	0x106
 3784 0699 0C010000 		.4byte	0x10c
 3785 069d 02       		.uleb128 0x2
 3786 069e 91       		.byte	0x91
 3787 069f 70       		.sleb128 -16
 3788 06a0 00       		.byte	0
 3789 06a1 1B       		.uleb128 0x1b
 3790 06a2 23070000 		.4byte	.LASF105
 3791 06a6 01       		.byte	0x1
 3792 06a7 2301     		.2byte	0x123
 3793 06a9 AD000000 		.4byte	0xad
 3794 06ad 00000000 		.4byte	.LFB75
 3795 06b1 74010000 		.4byte	.LFE75-.LFB75
 3796 06b5 01       		.uleb128 0x1
 3797 06b6 9C       		.byte	0x9c
 3798 06b7 D3060000 		.4byte	0x6d3
 3799 06bb 14       		.uleb128 0x14
 3800 06bc 2E000000 		.4byte	.LBB7
 3801 06c0 68000000 		.4byte	.LBE7-.LBB7
 3802 06c4 1A       		.uleb128 0x1a
 3803 06c5 6900     		.ascii	"i\000"
 3804 06c7 01       		.byte	0x1
 3805 06c8 3101     		.2byte	0x131
 3806 06ca AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 88


 3807 06ce 02       		.uleb128 0x2
 3808 06cf 91       		.byte	0x91
 3809 06d0 77       		.sleb128 -9
 3810 06d1 00       		.byte	0
 3811 06d2 00       		.byte	0
 3812 06d3 1B       		.uleb128 0x1b
 3813 06d4 37050000 		.4byte	.LASF106
 3814 06d8 01       		.byte	0x1
 3815 06d9 7501     		.2byte	0x175
 3816 06db AD000000 		.4byte	0xad
 3817 06df 00000000 		.4byte	.LFB76
 3818 06e3 B8000000 		.4byte	.LFE76-.LFB76
 3819 06e7 01       		.uleb128 0x1
 3820 06e8 9C       		.byte	0x9c
 3821 06e9 16070000 		.4byte	0x716
 3822 06ed 1C       		.uleb128 0x1c
 3823 06ee 49080000 		.4byte	.LASF35
 3824 06f2 01       		.byte	0x1
 3825 06f3 7901     		.2byte	0x179
 3826 06f5 AD000000 		.4byte	0xad
 3827 06f9 02       		.uleb128 0x2
 3828 06fa 91       		.byte	0x91
 3829 06fb 77       		.sleb128 -9
 3830 06fc 14       		.uleb128 0x14
 3831 06fd 36000000 		.4byte	.LBB8
 3832 0701 48000000 		.4byte	.LBE8-.LBB8
 3833 0705 1C       		.uleb128 0x1c
 3834 0706 B5040000 		.4byte	.LASF107
 3835 070a 01       		.byte	0x1
 3836 070b 8101     		.2byte	0x181
 3837 070d 16070000 		.4byte	0x716
 3838 0711 02       		.uleb128 0x2
 3839 0712 91       		.byte	0x91
 3840 0713 6C       		.sleb128 -20
 3841 0714 00       		.byte	0
 3842 0715 00       		.byte	0
 3843 0716 08       		.uleb128 0x8
 3844 0717 F7000000 		.4byte	0xf7
 3845 071b 26070000 		.4byte	0x726
 3846 071f 09       		.uleb128 0x9
 3847 0720 05010000 		.4byte	0x105
 3848 0724 09       		.byte	0x9
 3849 0725 00       		.byte	0
 3850 0726 1D       		.uleb128 0x1d
 3851 0727 0C020000 		.4byte	.LASF108
 3852 072b 01       		.byte	0x1
 3853 072c 9301     		.2byte	0x193
 3854 072e 00000000 		.4byte	.LFB77
 3855 0732 1C000000 		.4byte	.LFE77-.LFB77
 3856 0736 01       		.uleb128 0x1
 3857 0737 9C       		.byte	0x9c
 3858 0738 1E       		.uleb128 0x1e
 3859 0739 8F070000 		.4byte	.LASF110
 3860 073d 01       		.byte	0x1
 3861 073e A301     		.2byte	0x1a3
 3862 0740 AD000000 		.4byte	0xad
 3863 0744 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 89


 3864 0748 28000000 		.4byte	.LFE78-.LFB78
 3865 074c 01       		.uleb128 0x1
 3866 074d 9C       		.byte	0x9c
 3867 074e 1F       		.uleb128 0x1f
 3868 074f D9030000 		.4byte	.LASF113
 3869 0753 01       		.byte	0x1
 3870 0754 AE01     		.2byte	0x1ae
 3871 0756 00000000 		.4byte	.LFB79
 3872 075a 84000000 		.4byte	.LFE79-.LFB79
 3873 075e 01       		.uleb128 0x1
 3874 075f 9C       		.byte	0x9c
 3875 0760 74070000 		.4byte	0x774
 3876 0764 1C       		.uleb128 0x1c
 3877 0765 9E050000 		.4byte	.LASF111
 3878 0769 01       		.byte	0x1
 3879 076a BB01     		.2byte	0x1bb
 3880 076c 7E000000 		.4byte	0x7e
 3881 0770 02       		.uleb128 0x2
 3882 0771 91       		.byte	0x91
 3883 0772 74       		.sleb128 -12
 3884 0773 00       		.byte	0
 3885 0774 20       		.uleb128 0x20
 3886 0775 52030000 		.4byte	.LASF112
 3887 0779 01       		.byte	0x1
 3888 077a CD01     		.2byte	0x1cd
 3889 077c 00000000 		.4byte	.LFB80
 3890 0780 30000000 		.4byte	.LFE80-.LFB80
 3891 0784 01       		.uleb128 0x1
 3892 0785 9C       		.byte	0x9c
 3893 0786 1F       		.uleb128 0x1f
 3894 0787 18080000 		.4byte	.LASF114
 3895 078b 01       		.byte	0x1
 3896 078c DA01     		.2byte	0x1da
 3897 078e 00000000 		.4byte	.LFB81
 3898 0792 A4020000 		.4byte	.LFE81-.LFB81
 3899 0796 01       		.uleb128 0x1
 3900 0797 9C       		.byte	0x9c
 3901 0798 69080000 		.4byte	0x869
 3902 079c 1C       		.uleb128 0x1c
 3903 079d BA020000 		.4byte	.LASF115
 3904 07a1 01       		.byte	0x1
 3905 07a2 DE01     		.2byte	0x1de
 3906 07a4 16070000 		.4byte	0x716
 3907 07a8 02       		.uleb128 0x2
 3908 07a9 91       		.byte	0x91
 3909 07aa 64       		.sleb128 -28
 3910 07ab 1C       		.uleb128 0x1c
 3911 07ac 3B080000 		.4byte	.LASF116
 3912 07b0 01       		.byte	0x1
 3913 07b1 DF01     		.2byte	0x1df
 3914 07b3 16070000 		.4byte	0x716
 3915 07b7 02       		.uleb128 0x2
 3916 07b8 91       		.byte	0x91
 3917 07b9 58       		.sleb128 -40
 3918 07ba 1C       		.uleb128 0x1c
 3919 07bb EF050000 		.4byte	.LASF117
 3920 07bf 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 90


 3921 07c0 E001     		.2byte	0x1e0
 3922 07c2 16070000 		.4byte	0x716
 3923 07c6 02       		.uleb128 0x2
 3924 07c7 91       		.byte	0x91
 3925 07c8 4C       		.sleb128 -52
 3926 07c9 1C       		.uleb128 0x1c
 3927 07ca 45030000 		.4byte	.LASF118
 3928 07ce 01       		.byte	0x1
 3929 07cf E101     		.2byte	0x1e1
 3930 07d1 16070000 		.4byte	0x716
 3931 07d5 02       		.uleb128 0x2
 3932 07d6 91       		.byte	0x91
 3933 07d7 40       		.sleb128 -64
 3934 07d8 1C       		.uleb128 0x1c
 3935 07d9 E2070000 		.4byte	.LASF119
 3936 07dd 01       		.byte	0x1
 3937 07de E401     		.2byte	0x1e4
 3938 07e0 41040000 		.4byte	0x441
 3939 07e4 03       		.uleb128 0x3
 3940 07e5 91       		.byte	0x91
 3941 07e6 DC7E     		.sleb128 -164
 3942 07e8 1C       		.uleb128 0x1c
 3943 07e9 1E030000 		.4byte	.LASF120
 3944 07ed 01       		.byte	0x1
 3945 07ee E701     		.2byte	0x1e7
 3946 07f0 41040000 		.4byte	0x441
 3947 07f4 03       		.uleb128 0x3
 3948 07f5 91       		.byte	0x91
 3949 07f6 F87D     		.sleb128 -264
 3950 07f8 1C       		.uleb128 0x1c
 3951 07f9 FD050000 		.4byte	.LASF59
 3952 07fd 01       		.byte	0x1
 3953 07fe FF01     		.2byte	0x1ff
 3954 0800 7E000000 		.4byte	0x7e
 3955 0804 03       		.uleb128 0x3
 3956 0805 91       		.byte	0x91
 3957 0806 F47D     		.sleb128 -268
 3958 0808 1C       		.uleb128 0x1c
 3959 0809 4E010000 		.4byte	.LASF121
 3960 080d 01       		.byte	0x1
 3961 080e FF01     		.2byte	0x1ff
 3962 0810 7E000000 		.4byte	0x7e
 3963 0814 03       		.uleb128 0x3
 3964 0815 91       		.byte	0x91
 3965 0816 F07D     		.sleb128 -272
 3966 0818 1C       		.uleb128 0x1c
 3967 0819 03050000 		.4byte	.LASF122
 3968 081d 01       		.byte	0x1
 3969 081e FF01     		.2byte	0x1ff
 3970 0820 7E000000 		.4byte	0x7e
 3971 0824 03       		.uleb128 0x3
 3972 0825 91       		.byte	0x91
 3973 0826 EC7D     		.sleb128 -276
 3974 0828 1C       		.uleb128 0x1c
 3975 0829 BA040000 		.4byte	.LASF123
 3976 082d 01       		.byte	0x1
 3977 082e FF01     		.2byte	0x1ff
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 91


 3978 0830 7E000000 		.4byte	0x7e
 3979 0834 03       		.uleb128 0x3
 3980 0835 91       		.byte	0x91
 3981 0836 E87D     		.sleb128 -280
 3982 0838 1C       		.uleb128 0x1c
 3983 0839 0C090000 		.4byte	.LASF124
 3984 083d 01       		.byte	0x1
 3985 083e FF01     		.2byte	0x1ff
 3986 0840 7E000000 		.4byte	0x7e
 3987 0844 03       		.uleb128 0x3
 3988 0845 91       		.byte	0x91
 3989 0846 E47D     		.sleb128 -284
 3990 0848 1C       		.uleb128 0x1c
 3991 0849 7C020000 		.4byte	.LASF125
 3992 084d 01       		.byte	0x1
 3993 084e FF01     		.2byte	0x1ff
 3994 0850 7E000000 		.4byte	0x7e
 3995 0854 03       		.uleb128 0x3
 3996 0855 91       		.byte	0x91
 3997 0856 E07D     		.sleb128 -288
 3998 0858 1C       		.uleb128 0x1c
 3999 0859 33020000 		.4byte	.LASF126
 4000 085d 01       		.byte	0x1
 4001 085e 2802     		.2byte	0x228
 4002 0860 41040000 		.4byte	0x441
 4003 0864 03       		.uleb128 0x3
 4004 0865 91       		.byte	0x91
 4005 0866 FC7C     		.sleb128 -388
 4006 0868 00       		.byte	0
 4007 0869 1F       		.uleb128 0x1f
 4008 086a A1020000 		.4byte	.LASF127
 4009 086e 01       		.byte	0x1
 4010 086f 4002     		.2byte	0x240
 4011 0871 00000000 		.4byte	.LFB82
 4012 0875 68010000 		.4byte	.LFE82-.LFB82
 4013 0879 01       		.uleb128 0x1
 4014 087a 9C       		.byte	0x9c
 4015 087b 99080000 		.4byte	0x899
 4016 087f 14       		.uleb128 0x14
 4017 0880 DA000000 		.4byte	.LBB9
 4018 0884 38000000 		.4byte	.LBE9-.LBB9
 4019 0888 1C       		.uleb128 0x1c
 4020 0889 44070000 		.4byte	.LASF128
 4021 088d 01       		.byte	0x1
 4022 088e 6E02     		.2byte	0x26e
 4023 0890 16070000 		.4byte	0x716
 4024 0894 02       		.uleb128 0x2
 4025 0895 91       		.byte	0x91
 4026 0896 6C       		.sleb128 -20
 4027 0897 00       		.byte	0
 4028 0898 00       		.byte	0
 4029 0899 1B       		.uleb128 0x1b
 4030 089a 00030000 		.4byte	.LASF129
 4031 089e 01       		.byte	0x1
 4032 089f 8102     		.2byte	0x281
 4033 08a1 57000000 		.4byte	0x57
 4034 08a5 00000000 		.4byte	.LFB83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 92


 4035 08a9 44010000 		.4byte	.LFE83-.LFB83
 4036 08ad 01       		.uleb128 0x1
 4037 08ae 9C       		.byte	0x9c
 4038 08af 55090000 		.4byte	0x955
 4039 08b3 1C       		.uleb128 0x1c
 4040 08b4 8F040000 		.4byte	.LASF130
 4041 08b8 01       		.byte	0x1
 4042 08b9 8C02     		.2byte	0x28c
 4043 08bb 57000000 		.4byte	0x57
 4044 08bf 02       		.uleb128 0x2
 4045 08c0 91       		.byte	0x91
 4046 08c1 74       		.sleb128 -12
 4047 08c2 14       		.uleb128 0x14
 4048 08c3 30000000 		.4byte	.LBB10
 4049 08c7 DE000000 		.4byte	.LBE10-.LBB10
 4050 08cb 1C       		.uleb128 0x1c
 4051 08cc C5020000 		.4byte	.LASF98
 4052 08d0 01       		.byte	0x1
 4053 08d1 9102     		.2byte	0x291
 4054 08d3 55090000 		.4byte	0x955
 4055 08d7 02       		.uleb128 0x2
 4056 08d8 91       		.byte	0x91
 4057 08d9 54       		.sleb128 -44
 4058 08da 1A       		.uleb128 0x1a
 4059 08db 7400     		.ascii	"t\000"
 4060 08dd 01       		.byte	0x1
 4061 08de 9702     		.2byte	0x297
 4062 08e0 2D010000 		.4byte	0x12d
 4063 08e4 03       		.uleb128 0x3
 4064 08e5 91       		.byte	0x91
 4065 08e6 947F     		.sleb128 -108
 4066 08e8 1C       		.uleb128 0x1c
 4067 08e9 2E020000 		.4byte	.LASF131
 4068 08ed 01       		.byte	0x1
 4069 08ee 9A02     		.2byte	0x29a
 4070 08f0 7E000000 		.4byte	0x7e
 4071 08f4 02       		.uleb128 0x2
 4072 08f5 91       		.byte	0x91
 4073 08f6 50       		.sleb128 -48
 4074 08f7 1C       		.uleb128 0x1c
 4075 08f8 31050000 		.4byte	.LASF132
 4076 08fc 01       		.byte	0x1
 4077 08fd 9A02     		.2byte	0x29a
 4078 08ff 7E000000 		.4byte	0x7e
 4079 0903 02       		.uleb128 0x2
 4080 0904 91       		.byte	0x91
 4081 0905 4C       		.sleb128 -52
 4082 0906 1A       		.uleb128 0x1a
 4083 0907 64617900 		.ascii	"day\000"
 4084 090b 01       		.byte	0x1
 4085 090c 9A02     		.2byte	0x29a
 4086 090e 7E000000 		.4byte	0x7e
 4087 0912 02       		.uleb128 0x2
 4088 0913 91       		.byte	0x91
 4089 0914 48       		.sleb128 -56
 4090 0915 1C       		.uleb128 0x1c
 4091 0916 B9050000 		.4byte	.LASF133
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 93


 4092 091a 01       		.byte	0x1
 4093 091b 9A02     		.2byte	0x29a
 4094 091d 7E000000 		.4byte	0x7e
 4095 0921 02       		.uleb128 0x2
 4096 0922 91       		.byte	0x91
 4097 0923 44       		.sleb128 -60
 4098 0924 1C       		.uleb128 0x1c
 4099 0925 01080000 		.4byte	.LASF134
 4100 0929 01       		.byte	0x1
 4101 092a 9A02     		.2byte	0x29a
 4102 092c 7E000000 		.4byte	0x7e
 4103 0930 02       		.uleb128 0x2
 4104 0931 91       		.byte	0x91
 4105 0932 40       		.sleb128 -64
 4106 0933 1C       		.uleb128 0x1c
 4107 0934 27020000 		.4byte	.LASF135
 4108 0938 01       		.byte	0x1
 4109 0939 9A02     		.2byte	0x29a
 4110 093b 7E000000 		.4byte	0x7e
 4111 093f 03       		.uleb128 0x3
 4112 0940 91       		.byte	0x91
 4113 0941 BC7F     		.sleb128 -68
 4114 0943 1C       		.uleb128 0x1c
 4115 0944 00000000 		.4byte	.LASF136
 4116 0948 01       		.byte	0x1
 4117 0949 9A02     		.2byte	0x29a
 4118 094b 7E000000 		.4byte	0x7e
 4119 094f 03       		.uleb128 0x3
 4120 0950 91       		.byte	0x91
 4121 0951 B87F     		.sleb128 -72
 4122 0953 00       		.byte	0
 4123 0954 00       		.byte	0
 4124 0955 08       		.uleb128 0x8
 4125 0956 F7000000 		.4byte	0xf7
 4126 095a 65090000 		.4byte	0x965
 4127 095e 09       		.uleb128 0x9
 4128 095f 05010000 		.4byte	0x105
 4129 0963 1D       		.byte	0x1d
 4130 0964 00       		.byte	0
 4131 0965 21       		.uleb128 0x21
 4132 0966 5D020000 		.4byte	.LASF137
 4133 096a 01       		.byte	0x1
 4134 096b BA02     		.2byte	0x2ba
 4135 096d AD000000 		.4byte	0xad
 4136 0971 00000000 		.4byte	.LFB84
 4137 0975 14000000 		.4byte	.LFE84-.LFB84
 4138 0979 01       		.uleb128 0x1
 4139 097a 9C       		.byte	0x9c
 4140 097b 1D       		.uleb128 0x1d
 4141 097c 39030000 		.4byte	.LASF138
 4142 0980 01       		.byte	0x1
 4143 0981 BF02     		.2byte	0x2bf
 4144 0983 00000000 		.4byte	.LFB85
 4145 0987 1A000000 		.4byte	.LFE85-.LFB85
 4146 098b 01       		.uleb128 0x1
 4147 098c 9C       		.byte	0x9c
 4148 098d 1D       		.uleb128 0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 94


 4149 098e 2A010000 		.4byte	.LASF139
 4150 0992 01       		.byte	0x1
 4151 0993 CC02     		.2byte	0x2cc
 4152 0995 00000000 		.4byte	.LFB86
 4153 0999 2A000000 		.4byte	.LFE86-.LFB86
 4154 099d 01       		.uleb128 0x1
 4155 099e 9C       		.byte	0x9c
 4156 099f 1B       		.uleb128 0x1b
 4157 09a0 5F060000 		.4byte	.LASF140
 4158 09a4 01       		.byte	0x1
 4159 09a5 DF02     		.2byte	0x2df
 4160 09a7 37030000 		.4byte	0x337
 4161 09ab 00000000 		.4byte	.LFB87
 4162 09af 7C020000 		.4byte	.LFE87-.LFB87
 4163 09b3 01       		.uleb128 0x1
 4164 09b4 9C       		.byte	0x9c
 4165 09b5 480A0000 		.4byte	0xa48
 4166 09b9 1A       		.uleb128 0x1a
 4167 09ba 67707300 		.ascii	"gps\000"
 4168 09be 01       		.byte	0x1
 4169 09bf E002     		.2byte	0x2e0
 4170 09c1 37030000 		.4byte	0x337
 4171 09c5 02       		.uleb128 0x2
 4172 09c6 91       		.byte	0x91
 4173 09c7 4C       		.sleb128 -52
 4174 09c8 1C       		.uleb128 0x1c
 4175 09c9 CF080000 		.4byte	.LASF141
 4176 09cd 01       		.byte	0x1
 4177 09ce EC02     		.2byte	0x2ec
 4178 09d0 57000000 		.4byte	0x57
 4179 09d4 02       		.uleb128 0x2
 4180 09d5 91       		.byte	0x91
 4181 09d6 68       		.sleb128 -24
 4182 09d7 1C       		.uleb128 0x1c
 4183 09d8 BF070000 		.4byte	.LASF142
 4184 09dc 01       		.byte	0x1
 4185 09dd 1303     		.2byte	0x313
 4186 09df AD000000 		.4byte	0xad
 4187 09e3 02       		.uleb128 0x2
 4188 09e4 91       		.byte	0x91
 4189 09e5 67       		.sleb128 -25
 4190 09e6 1A       		.uleb128 0x1a
 4191 09e7 6C617400 		.ascii	"lat\000"
 4192 09eb 01       		.byte	0x1
 4193 09ec 1F03     		.2byte	0x31f
 4194 09ee E9000000 		.4byte	0xe9
 4195 09f2 02       		.uleb128 0x2
 4196 09f3 91       		.byte	0x91
 4197 09f4 48       		.sleb128 -56
 4198 09f5 1A       		.uleb128 0x1a
 4199 09f6 6C6F6E00 		.ascii	"lon\000"
 4200 09fa 01       		.byte	0x1
 4201 09fb 2003     		.2byte	0x320
 4202 09fd E9000000 		.4byte	0xe9
 4203 0a01 02       		.uleb128 0x2
 4204 0a02 91       		.byte	0x91
 4205 0a03 44       		.sleb128 -60
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 95


 4206 0a04 1A       		.uleb128 0x1a
 4207 0a05 616C7400 		.ascii	"alt\000"
 4208 0a09 01       		.byte	0x1
 4209 0a0a 2103     		.2byte	0x321
 4210 0a0c E9000000 		.4byte	0xe9
 4211 0a10 02       		.uleb128 0x2
 4212 0a11 91       		.byte	0x91
 4213 0a12 40       		.sleb128 -64
 4214 0a13 1A       		.uleb128 0x1a
 4215 0a14 733100   		.ascii	"s1\000"
 4216 0a17 01       		.byte	0x1
 4217 0a18 2503     		.2byte	0x325
 4218 0a1a 0C010000 		.4byte	0x10c
 4219 0a1e 02       		.uleb128 0x2
 4220 0a1f 91       		.byte	0x91
 4221 0a20 60       		.sleb128 -32
 4222 0a21 1C       		.uleb128 0x1c
 4223 0a22 9E050000 		.4byte	.LASF111
 4224 0a26 01       		.byte	0x1
 4225 0a27 2803     		.2byte	0x328
 4226 0a29 7E000000 		.4byte	0x7e
 4227 0a2d 02       		.uleb128 0x2
 4228 0a2e 91       		.byte	0x91
 4229 0a2f 5C       		.sleb128 -36
 4230 0a30 14       		.uleb128 0x14
 4231 0a31 B4000000 		.4byte	.LBB11
 4232 0a35 38000000 		.4byte	.LBE11-.LBB11
 4233 0a39 1A       		.uleb128 0x1a
 4234 0a3a 6900     		.ascii	"i\000"
 4235 0a3c 01       		.byte	0x1
 4236 0a3d 1403     		.2byte	0x314
 4237 0a3f B9000000 		.4byte	0xb9
 4238 0a43 02       		.uleb128 0x2
 4239 0a44 91       		.byte	0x91
 4240 0a45 6E       		.sleb128 -18
 4241 0a46 00       		.byte	0
 4242 0a47 00       		.byte	0
 4243 0a48 22       		.uleb128 0x22
 4244 0a49 78010000 		.4byte	.LASF143
 4245 0a4d 0A       		.byte	0xa
 4246 0a4e 1207     		.2byte	0x712
 4247 0a50 540A0000 		.4byte	0xa54
 4248 0a54 0F       		.uleb128 0xf
 4249 0a55 97000000 		.4byte	0x97
 4250 0a59 23       		.uleb128 0x23
 4251 0a5a 60000000 		.4byte	.LASF144
 4252 0a5e 07       		.byte	0x7
 4253 0a5f 11       		.byte	0x11
 4254 0a60 93030000 		.4byte	0x393
 4255 0a64 05       		.uleb128 0x5
 4256 0a65 03       		.byte	0x3
 4257 0a66 00000000 		.4byte	buffer_overflow
 4258 0a6a 23       		.uleb128 0x23
 4259 0a6b 0F050000 		.4byte	.LASF145
 4260 0a6f 07       		.byte	0x7
 4261 0a70 22       		.byte	0x22
 4262 0a71 B9000000 		.4byte	0xb9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 96


 4263 0a75 05       		.uleb128 0x5
 4264 0a76 03       		.byte	0x3
 4265 0a77 00000000 		.4byte	dataPointsInStack
 4266 0a7b 23       		.uleb128 0x23
 4267 0a7c 50080000 		.4byte	.LASF146
 4268 0a80 07       		.byte	0x7
 4269 0a81 23       		.byte	0x23
 4270 0a82 B9000000 		.4byte	0xb9
 4271 0a86 05       		.uleb128 0x5
 4272 0a87 03       		.byte	0x3
 4273 0a88 00000000 		.4byte	dataPointsInStackDesired
 4274 0a8c 08       		.uleb128 0x8
 4275 0a8d 3B020000 		.4byte	0x23b
 4276 0a91 9C0A0000 		.4byte	0xa9c
 4277 0a95 09       		.uleb128 0x9
 4278 0a96 05010000 		.4byte	0x105
 4279 0a9a 95       		.byte	0x95
 4280 0a9b 00       		.byte	0
 4281 0a9c 23       		.uleb128 0x23
 4282 0a9d 07040000 		.4byte	.LASF147
 4283 0aa1 07       		.byte	0x7
 4284 0aa2 24       		.byte	0x24
 4285 0aa3 8C0A0000 		.4byte	0xa8c
 4286 0aa7 05       		.uleb128 0x5
 4287 0aa8 03       		.byte	0x3
 4288 0aa9 00000000 		.4byte	data
 4289 0aad 23       		.uleb128 0x23
 4290 0aae 5A010000 		.4byte	.LASF148
 4291 0ab2 08       		.byte	0x8
 4292 0ab3 1F       		.byte	0x1f
 4293 0ab4 AD000000 		.4byte	0xad
 4294 0ab8 05       		.uleb128 0x5
 4295 0ab9 03       		.byte	0x3
 4296 0aba 00000000 		.4byte	modem_state
 4297 0abe 23       		.uleb128 0x23
 4298 0abf A8070000 		.4byte	.LASF149
 4299 0ac3 08       		.byte	0x8
 4300 0ac4 69       		.byte	0x69
 4301 0ac5 DD000000 		.4byte	0xdd
 4302 0ac9 05       		.uleb128 0x5
 4303 0aca 03       		.byte	0x3
 4304 0acb 00000000 		.4byte	modem_start_time_stamp
 4305 0acf 23       		.uleb128 0x23
 4306 0ad0 1D040000 		.4byte	.LASF72
 4307 0ad4 08       		.byte	0x8
 4308 0ad5 6A       		.byte	0x6a
 4309 0ad6 73020000 		.4byte	0x273
 4310 0ada 05       		.uleb128 0x5
 4311 0adb 03       		.byte	0x3
 4312 0adc 00000000 		.4byte	modem_info
 4313 0ae0 23       		.uleb128 0x23
 4314 0ae1 97010000 		.4byte	.LASF150
 4315 0ae5 08       		.byte	0x8
 4316 0ae6 6B       		.byte	0x6b
 4317 0ae7 E7020000 		.4byte	0x2e7
 4318 0aeb 05       		.uleb128 0x5
 4319 0aec 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 97


 4320 0aed 00000000 		.4byte	modem_stats
 4321 0af1 23       		.uleb128 0x23
 4322 0af2 A4050000 		.4byte	.LASF151
 4323 0af6 08       		.byte	0x8
 4324 0af7 6C       		.byte	0x6c
 4325 0af8 9A030000 		.4byte	0x39a
 4326 0afc 05       		.uleb128 0x5
 4327 0afd 03       		.byte	0x3
 4328 0afe 00000000 		.4byte	updatable_parameters
 4329 0b02 23       		.uleb128 0x23
 4330 0b03 FF060000 		.4byte	.LASF152
 4331 0b07 0B       		.byte	0xb
 4332 0b08 25       		.byte	0x25
 4333 0b09 41040000 		.4byte	0x441
 4334 0b0d 05       		.uleb128 0x5
 4335 0b0e 03       		.byte	0x3
 4336 0b0f 00000000 		.4byte	level_sensor_inbox
 4337 0b13 23       		.uleb128 0x23
 4338 0b14 FE080000 		.4byte	.LASF153
 4339 0b18 0C       		.byte	0xc
 4340 0b19 12       		.byte	0x12
 4341 0b1a 41040000 		.4byte	0x441
 4342 0b1e 05       		.uleb128 0x5
 4343 0b1f 03       		.byte	0x3
 4344 0b20 00000000 		.4byte	app_led_inbox
 4345 0b24 08       		.uleb128 0x8
 4346 0b25 F7000000 		.4byte	0xf7
 4347 0b29 350B0000 		.4byte	0xb35
 4348 0b2d 24       		.uleb128 0x24
 4349 0b2e 05010000 		.4byte	0x105
 4350 0b32 0F27     		.2byte	0x270f
 4351 0b34 00       		.byte	0
 4352 0b35 23       		.uleb128 0x23
 4353 0b36 D9080000 		.4byte	.LASF154
 4354 0b3a 09       		.byte	0x9
 4355 0b3b 18       		.byte	0x18
 4356 0b3c 240B0000 		.4byte	0xb24
 4357 0b40 05       		.uleb128 0x5
 4358 0b41 03       		.byte	0x3
 4359 0b42 00000000 		.4byte	http_request
 4360 0b46 23       		.uleb128 0x23
 4361 0b47 02020000 		.4byte	.LASF155
 4362 0b4b 09       		.byte	0x9
 4363 0b4c 19       		.byte	0x19
 4364 0b4d 240B0000 		.4byte	0xb24
 4365 0b51 05       		.uleb128 0x5
 4366 0b52 03       		.byte	0x3
 4367 0b53 00000000 		.4byte	http_body
 4368 0b57 08       		.uleb128 0x8
 4369 0b58 F7000000 		.4byte	0xf7
 4370 0b5c 670B0000 		.4byte	0xb67
 4371 0b60 09       		.uleb128 0x9
 4372 0b61 05010000 		.4byte	0x105
 4373 0b65 C7       		.byte	0xc7
 4374 0b66 00       		.byte	0
 4375 0b67 23       		.uleb128 0x23
 4376 0b68 52070000 		.4byte	.LASF156
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 98


 4377 0b6c 09       		.byte	0x9
 4378 0b6d 1A       		.byte	0x1a
 4379 0b6e 570B0000 		.4byte	0xb57
 4380 0b72 05       		.uleb128 0x5
 4381 0b73 03       		.byte	0x3
 4382 0b74 00000000 		.4byte	http_route
 4383 0b78 23       		.uleb128 0x23
 4384 0b79 80060000 		.4byte	.LASF157
 4385 0b7d 09       		.byte	0x9
 4386 0b7e 41       		.byte	0x41
 4387 0b7f 15040000 		.4byte	0x415
 4388 0b83 05       		.uleb128 0x5
 4389 0b84 03       		.byte	0x3
 4390 0b85 00000000 		.4byte	system_info
 4391 0b89 23       		.uleb128 0x23
 4392 0b8a 35060000 		.4byte	.LASF158
 4393 0b8e 09       		.byte	0x9
 4394 0b8f 53       		.byte	0x53
 4395 0b90 51040000 		.4byte	0x451
 4396 0b94 05       		.uleb128 0x5
 4397 0b95 03       		.byte	0x3
 4398 0b96 00000000 		.4byte	system_settings
 4399 0b9a 23       		.uleb128 0x23
 4400 0b9b 6B010000 		.4byte	.LASF159
 4401 0b9f 09       		.byte	0x9
 4402 0ba0 6F       		.byte	0x6f
 4403 0ba1 DE030000 		.4byte	0x3de
 4404 0ba5 05       		.uleb128 0x5
 4405 0ba6 03       		.byte	0x3
 4406 0ba7 00000000 		.4byte	alarmMeasure
 4407 0bab 23       		.uleb128 0x23
 4408 0bac D1010000 		.4byte	.LASF160
 4409 0bb0 09       		.byte	0x9
 4410 0bb1 70       		.byte	0x70
 4411 0bb2 AD000000 		.4byte	0xad
 4412 0bb6 05       		.uleb128 0x5
 4413 0bb7 03       		.byte	0x3
 4414 0bb8 00000000 		.4byte	timeToMeasure
 4415 0bbc 23       		.uleb128 0x23
 4416 0bbd 7A030000 		.4byte	.LASF161
 4417 0bc1 09       		.byte	0x9
 4418 0bc2 71       		.byte	0x71
 4419 0bc3 DE030000 		.4byte	0x3de
 4420 0bc7 05       		.uleb128 0x5
 4421 0bc8 03       		.byte	0x3
 4422 0bc9 00000000 		.4byte	alarmSync
 4423 0bcd 23       		.uleb128 0x23
 4424 0bce F7010000 		.4byte	.LASF162
 4425 0bd2 09       		.byte	0x9
 4426 0bd3 72       		.byte	0x72
 4427 0bd4 AD000000 		.4byte	0xad
 4428 0bd8 05       		.uleb128 0x5
 4429 0bd9 03       		.byte	0x3
 4430 0bda 00000000 		.4byte	timeToSync
 4431 0bde 23       		.uleb128 0x23
 4432 0bdf 7C050000 		.4byte	.LASF163
 4433 0be3 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 99


 4434 0be4 73       		.byte	0x73
 4435 0be5 AD000000 		.4byte	0xad
 4436 0be9 05       		.uleb128 0x5
 4437 0bea 03       		.byte	0x3
 4438 0beb 00000000 		.4byte	timeToSycnRemoteParams
 4439 0bef 25       		.uleb128 0x25
 4440 0bf0 68657900 		.ascii	"hey\000"
 4441 0bf4 09       		.byte	0x9
 4442 0bf5 74       		.byte	0x74
 4443 0bf6 AD000000 		.4byte	0xad
 4444 0bfa 05       		.uleb128 0x5
 4445 0bfb 03       		.byte	0x3
 4446 0bfc 00000000 		.4byte	hey
 4447 0c00 23       		.uleb128 0x23
 4448 0c01 A4040000 		.4byte	.LASF164
 4449 0c05 09       		.byte	0x9
 4450 0c06 77       		.byte	0x77
 4451 0c07 DE030000 		.4byte	0x3de
 4452 0c0b 05       		.uleb128 0x5
 4453 0c0c 03       		.byte	0x3
 4454 0c0d 00000000 		.4byte	alarmAppLED
 4455 0c11 23       		.uleb128 0x23
 4456 0c12 8E020000 		.4byte	.LASF165
 4457 0c16 09       		.byte	0x9
 4458 0c17 78       		.byte	0x78
 4459 0c18 AD000000 		.4byte	0xad
 4460 0c1c 05       		.uleb128 0x5
 4461 0c1d 03       		.byte	0x3
 4462 0c1e 00000000 		.4byte	timeToAppLED
 4463 0c22 23       		.uleb128 0x23
 4464 0c23 BD060000 		.4byte	.LASF166
 4465 0c27 09       		.byte	0x9
 4466 0c28 7A       		.byte	0x7a
 4467 0c29 DE030000 		.4byte	0x3de
 4468 0c2d 05       		.uleb128 0x5
 4469 0c2e 03       		.byte	0x3
 4470 0c2f 00000000 		.4byte	alarmLevelSensor
 4471 0c33 23       		.uleb128 0x23
 4472 0c34 85010000 		.4byte	.LASF167
 4473 0c38 09       		.byte	0x9
 4474 0c39 7B       		.byte	0x7b
 4475 0c3a AD000000 		.4byte	0xad
 4476 0c3e 05       		.uleb128 0x5
 4477 0c3f 03       		.byte	0x3
 4478 0c40 00000000 		.4byte	timetoLevelSensor
 4479 0c44 08       		.uleb128 0x8
 4480 0c45 F7000000 		.4byte	0xf7
 4481 0c49 550C0000 		.4byte	0xc55
 4482 0c4d 24       		.uleb128 0x24
 4483 0c4e 05010000 		.4byte	0x105
 4484 0c52 FF03     		.2byte	0x3ff
 4485 0c54 00       		.byte	0
 4486 0c55 23       		.uleb128 0x23
 4487 0c56 54050000 		.4byte	.LASF168
 4488 0c5a 01       		.byte	0x1
 4489 0c5b 05       		.byte	0x5
 4490 0c5c 440C0000 		.4byte	0xc44
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 100


 4491 0c60 05       		.uleb128 0x5
 4492 0c61 03       		.byte	0x3
 4493 0c62 00000000 		.4byte	uart_received_string
 4494 0c66 23       		.uleb128 0x23
 4495 0c67 70070000 		.4byte	.LASF169
 4496 0c6b 01       		.byte	0x1
 4497 0c6c 06       		.byte	0x6
 4498 0c6d D1000000 		.4byte	0xd1
 4499 0c71 05       		.uleb128 0x5
 4500 0c72 03       		.byte	0x3
 4501 0c73 00000000 		.4byte	uart_string_index
 4502 0c77 00       		.byte	0
 4503              		.section	.debug_abbrev,"",%progbits
 4504              	.Ldebug_abbrev0:
 4505 0000 01       		.uleb128 0x1
 4506 0001 11       		.uleb128 0x11
 4507 0002 01       		.byte	0x1
 4508 0003 25       		.uleb128 0x25
 4509 0004 0E       		.uleb128 0xe
 4510 0005 13       		.uleb128 0x13
 4511 0006 0B       		.uleb128 0xb
 4512 0007 03       		.uleb128 0x3
 4513 0008 0E       		.uleb128 0xe
 4514 0009 1B       		.uleb128 0x1b
 4515 000a 0E       		.uleb128 0xe
 4516 000b 55       		.uleb128 0x55
 4517 000c 17       		.uleb128 0x17
 4518 000d 11       		.uleb128 0x11
 4519 000e 01       		.uleb128 0x1
 4520 000f 10       		.uleb128 0x10
 4521 0010 17       		.uleb128 0x17
 4522 0011 00       		.byte	0
 4523 0012 00       		.byte	0
 4524 0013 02       		.uleb128 0x2
 4525 0014 24       		.uleb128 0x24
 4526 0015 00       		.byte	0
 4527 0016 0B       		.uleb128 0xb
 4528 0017 0B       		.uleb128 0xb
 4529 0018 3E       		.uleb128 0x3e
 4530 0019 0B       		.uleb128 0xb
 4531 001a 03       		.uleb128 0x3
 4532 001b 0E       		.uleb128 0xe
 4533 001c 00       		.byte	0
 4534 001d 00       		.byte	0
 4535 001e 03       		.uleb128 0x3
 4536 001f 16       		.uleb128 0x16
 4537 0020 00       		.byte	0
 4538 0021 03       		.uleb128 0x3
 4539 0022 0E       		.uleb128 0xe
 4540 0023 3A       		.uleb128 0x3a
 4541 0024 0B       		.uleb128 0xb
 4542 0025 3B       		.uleb128 0x3b
 4543 0026 0B       		.uleb128 0xb
 4544 0027 49       		.uleb128 0x49
 4545 0028 13       		.uleb128 0x13
 4546 0029 00       		.byte	0
 4547 002a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 101


 4548 002b 04       		.uleb128 0x4
 4549 002c 24       		.uleb128 0x24
 4550 002d 00       		.byte	0
 4551 002e 0B       		.uleb128 0xb
 4552 002f 0B       		.uleb128 0xb
 4553 0030 3E       		.uleb128 0x3e
 4554 0031 0B       		.uleb128 0xb
 4555 0032 03       		.uleb128 0x3
 4556 0033 08       		.uleb128 0x8
 4557 0034 00       		.byte	0
 4558 0035 00       		.byte	0
 4559 0036 05       		.uleb128 0x5
 4560 0037 16       		.uleb128 0x16
 4561 0038 00       		.byte	0
 4562 0039 03       		.uleb128 0x3
 4563 003a 0E       		.uleb128 0xe
 4564 003b 3A       		.uleb128 0x3a
 4565 003c 0B       		.uleb128 0xb
 4566 003d 3B       		.uleb128 0x3b
 4567 003e 05       		.uleb128 0x5
 4568 003f 49       		.uleb128 0x49
 4569 0040 13       		.uleb128 0x13
 4570 0041 00       		.byte	0
 4571 0042 00       		.byte	0
 4572 0043 06       		.uleb128 0x6
 4573 0044 0F       		.uleb128 0xf
 4574 0045 00       		.byte	0
 4575 0046 0B       		.uleb128 0xb
 4576 0047 0B       		.uleb128 0xb
 4577 0048 49       		.uleb128 0x49
 4578 0049 13       		.uleb128 0x13
 4579 004a 00       		.byte	0
 4580 004b 00       		.byte	0
 4581 004c 07       		.uleb128 0x7
 4582 004d 26       		.uleb128 0x26
 4583 004e 00       		.byte	0
 4584 004f 49       		.uleb128 0x49
 4585 0050 13       		.uleb128 0x13
 4586 0051 00       		.byte	0
 4587 0052 00       		.byte	0
 4588 0053 08       		.uleb128 0x8
 4589 0054 01       		.uleb128 0x1
 4590 0055 01       		.byte	0x1
 4591 0056 49       		.uleb128 0x49
 4592 0057 13       		.uleb128 0x13
 4593 0058 01       		.uleb128 0x1
 4594 0059 13       		.uleb128 0x13
 4595 005a 00       		.byte	0
 4596 005b 00       		.byte	0
 4597 005c 09       		.uleb128 0x9
 4598 005d 21       		.uleb128 0x21
 4599 005e 00       		.byte	0
 4600 005f 49       		.uleb128 0x49
 4601 0060 13       		.uleb128 0x13
 4602 0061 2F       		.uleb128 0x2f
 4603 0062 0B       		.uleb128 0xb
 4604 0063 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 102


 4605 0064 00       		.byte	0
 4606 0065 0A       		.uleb128 0xa
 4607 0066 13       		.uleb128 0x13
 4608 0067 01       		.byte	0x1
 4609 0068 03       		.uleb128 0x3
 4610 0069 08       		.uleb128 0x8
 4611 006a 0B       		.uleb128 0xb
 4612 006b 0B       		.uleb128 0xb
 4613 006c 3A       		.uleb128 0x3a
 4614 006d 0B       		.uleb128 0xb
 4615 006e 3B       		.uleb128 0x3b
 4616 006f 0B       		.uleb128 0xb
 4617 0070 01       		.uleb128 0x1
 4618 0071 13       		.uleb128 0x13
 4619 0072 00       		.byte	0
 4620 0073 00       		.byte	0
 4621 0074 0B       		.uleb128 0xb
 4622 0075 0D       		.uleb128 0xd
 4623 0076 00       		.byte	0
 4624 0077 03       		.uleb128 0x3
 4625 0078 0E       		.uleb128 0xe
 4626 0079 3A       		.uleb128 0x3a
 4627 007a 0B       		.uleb128 0xb
 4628 007b 3B       		.uleb128 0x3b
 4629 007c 0B       		.uleb128 0xb
 4630 007d 49       		.uleb128 0x49
 4631 007e 13       		.uleb128 0x13
 4632 007f 38       		.uleb128 0x38
 4633 0080 0B       		.uleb128 0xb
 4634 0081 00       		.byte	0
 4635 0082 00       		.byte	0
 4636 0083 0C       		.uleb128 0xc
 4637 0084 13       		.uleb128 0x13
 4638 0085 01       		.byte	0x1
 4639 0086 0B       		.uleb128 0xb
 4640 0087 05       		.uleb128 0x5
 4641 0088 3A       		.uleb128 0x3a
 4642 0089 0B       		.uleb128 0xb
 4643 008a 3B       		.uleb128 0x3b
 4644 008b 0B       		.uleb128 0xb
 4645 008c 01       		.uleb128 0x1
 4646 008d 13       		.uleb128 0x13
 4647 008e 00       		.byte	0
 4648 008f 00       		.byte	0
 4649 0090 0D       		.uleb128 0xd
 4650 0091 13       		.uleb128 0x13
 4651 0092 01       		.byte	0x1
 4652 0093 0B       		.uleb128 0xb
 4653 0094 0B       		.uleb128 0xb
 4654 0095 3A       		.uleb128 0x3a
 4655 0096 0B       		.uleb128 0xb
 4656 0097 3B       		.uleb128 0x3b
 4657 0098 0B       		.uleb128 0xb
 4658 0099 01       		.uleb128 0x1
 4659 009a 13       		.uleb128 0x13
 4660 009b 00       		.byte	0
 4661 009c 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 103


 4662 009d 0E       		.uleb128 0xe
 4663 009e 0D       		.uleb128 0xd
 4664 009f 00       		.byte	0
 4665 00a0 03       		.uleb128 0x3
 4666 00a1 08       		.uleb128 0x8
 4667 00a2 3A       		.uleb128 0x3a
 4668 00a3 0B       		.uleb128 0xb
 4669 00a4 3B       		.uleb128 0x3b
 4670 00a5 0B       		.uleb128 0xb
 4671 00a6 49       		.uleb128 0x49
 4672 00a7 13       		.uleb128 0x13
 4673 00a8 38       		.uleb128 0x38
 4674 00a9 0B       		.uleb128 0xb
 4675 00aa 00       		.byte	0
 4676 00ab 00       		.byte	0
 4677 00ac 0F       		.uleb128 0xf
 4678 00ad 35       		.uleb128 0x35
 4679 00ae 00       		.byte	0
 4680 00af 49       		.uleb128 0x49
 4681 00b0 13       		.uleb128 0x13
 4682 00b1 00       		.byte	0
 4683 00b2 00       		.byte	0
 4684 00b3 10       		.uleb128 0x10
 4685 00b4 2E       		.uleb128 0x2e
 4686 00b5 00       		.byte	0
 4687 00b6 3F       		.uleb128 0x3f
 4688 00b7 19       		.uleb128 0x19
 4689 00b8 03       		.uleb128 0x3
 4690 00b9 0E       		.uleb128 0xe
 4691 00ba 3A       		.uleb128 0x3a
 4692 00bb 0B       		.uleb128 0xb
 4693 00bc 3B       		.uleb128 0x3b
 4694 00bd 0B       		.uleb128 0xb
 4695 00be 27       		.uleb128 0x27
 4696 00bf 19       		.uleb128 0x19
 4697 00c0 11       		.uleb128 0x11
 4698 00c1 01       		.uleb128 0x1
 4699 00c2 12       		.uleb128 0x12
 4700 00c3 06       		.uleb128 0x6
 4701 00c4 40       		.uleb128 0x40
 4702 00c5 18       		.uleb128 0x18
 4703 00c6 9642     		.uleb128 0x2116
 4704 00c8 19       		.uleb128 0x19
 4705 00c9 00       		.byte	0
 4706 00ca 00       		.byte	0
 4707 00cb 11       		.uleb128 0x11
 4708 00cc 2E       		.uleb128 0x2e
 4709 00cd 00       		.byte	0
 4710 00ce 3F       		.uleb128 0x3f
 4711 00cf 19       		.uleb128 0x19
 4712 00d0 03       		.uleb128 0x3
 4713 00d1 0E       		.uleb128 0xe
 4714 00d2 3A       		.uleb128 0x3a
 4715 00d3 0B       		.uleb128 0xb
 4716 00d4 3B       		.uleb128 0x3b
 4717 00d5 0B       		.uleb128 0xb
 4718 00d6 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 104


 4719 00d7 01       		.uleb128 0x1
 4720 00d8 12       		.uleb128 0x12
 4721 00d9 06       		.uleb128 0x6
 4722 00da 40       		.uleb128 0x40
 4723 00db 18       		.uleb128 0x18
 4724 00dc 9642     		.uleb128 0x2116
 4725 00de 19       		.uleb128 0x19
 4726 00df 00       		.byte	0
 4727 00e0 00       		.byte	0
 4728 00e1 12       		.uleb128 0x12
 4729 00e2 2E       		.uleb128 0x2e
 4730 00e3 01       		.byte	0x1
 4731 00e4 3F       		.uleb128 0x3f
 4732 00e5 19       		.uleb128 0x19
 4733 00e6 03       		.uleb128 0x3
 4734 00e7 0E       		.uleb128 0xe
 4735 00e8 3A       		.uleb128 0x3a
 4736 00e9 0B       		.uleb128 0xb
 4737 00ea 3B       		.uleb128 0x3b
 4738 00eb 0B       		.uleb128 0xb
 4739 00ec 49       		.uleb128 0x49
 4740 00ed 13       		.uleb128 0x13
 4741 00ee 11       		.uleb128 0x11
 4742 00ef 01       		.uleb128 0x1
 4743 00f0 12       		.uleb128 0x12
 4744 00f1 06       		.uleb128 0x6
 4745 00f2 40       		.uleb128 0x40
 4746 00f3 18       		.uleb128 0x18
 4747 00f4 9642     		.uleb128 0x2116
 4748 00f6 19       		.uleb128 0x19
 4749 00f7 01       		.uleb128 0x1
 4750 00f8 13       		.uleb128 0x13
 4751 00f9 00       		.byte	0
 4752 00fa 00       		.byte	0
 4753 00fb 13       		.uleb128 0x13
 4754 00fc 34       		.uleb128 0x34
 4755 00fd 00       		.byte	0
 4756 00fe 03       		.uleb128 0x3
 4757 00ff 0E       		.uleb128 0xe
 4758 0100 3A       		.uleb128 0x3a
 4759 0101 0B       		.uleb128 0xb
 4760 0102 3B       		.uleb128 0x3b
 4761 0103 0B       		.uleb128 0xb
 4762 0104 49       		.uleb128 0x49
 4763 0105 13       		.uleb128 0x13
 4764 0106 02       		.uleb128 0x2
 4765 0107 18       		.uleb128 0x18
 4766 0108 00       		.byte	0
 4767 0109 00       		.byte	0
 4768 010a 14       		.uleb128 0x14
 4769 010b 0B       		.uleb128 0xb
 4770 010c 01       		.byte	0x1
 4771 010d 11       		.uleb128 0x11
 4772 010e 01       		.uleb128 0x1
 4773 010f 12       		.uleb128 0x12
 4774 0110 06       		.uleb128 0x6
 4775 0111 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 105


 4776 0112 00       		.byte	0
 4777 0113 15       		.uleb128 0x15
 4778 0114 2E       		.uleb128 0x2e
 4779 0115 01       		.byte	0x1
 4780 0116 3F       		.uleb128 0x3f
 4781 0117 19       		.uleb128 0x19
 4782 0118 03       		.uleb128 0x3
 4783 0119 0E       		.uleb128 0xe
 4784 011a 3A       		.uleb128 0x3a
 4785 011b 0B       		.uleb128 0xb
 4786 011c 3B       		.uleb128 0x3b
 4787 011d 0B       		.uleb128 0xb
 4788 011e 27       		.uleb128 0x27
 4789 011f 19       		.uleb128 0x19
 4790 0120 49       		.uleb128 0x49
 4791 0121 13       		.uleb128 0x13
 4792 0122 11       		.uleb128 0x11
 4793 0123 01       		.uleb128 0x1
 4794 0124 12       		.uleb128 0x12
 4795 0125 06       		.uleb128 0x6
 4796 0126 40       		.uleb128 0x40
 4797 0127 18       		.uleb128 0x18
 4798 0128 9642     		.uleb128 0x2116
 4799 012a 19       		.uleb128 0x19
 4800 012b 01       		.uleb128 0x1
 4801 012c 13       		.uleb128 0x13
 4802 012d 00       		.byte	0
 4803 012e 00       		.byte	0
 4804 012f 16       		.uleb128 0x16
 4805 0130 05       		.uleb128 0x5
 4806 0131 00       		.byte	0
 4807 0132 03       		.uleb128 0x3
 4808 0133 0E       		.uleb128 0xe
 4809 0134 3A       		.uleb128 0x3a
 4810 0135 0B       		.uleb128 0xb
 4811 0136 3B       		.uleb128 0x3b
 4812 0137 0B       		.uleb128 0xb
 4813 0138 49       		.uleb128 0x49
 4814 0139 13       		.uleb128 0x13
 4815 013a 02       		.uleb128 0x2
 4816 013b 18       		.uleb128 0x18
 4817 013c 00       		.byte	0
 4818 013d 00       		.byte	0
 4819 013e 17       		.uleb128 0x17
 4820 013f 34       		.uleb128 0x34
 4821 0140 00       		.byte	0
 4822 0141 03       		.uleb128 0x3
 4823 0142 08       		.uleb128 0x8
 4824 0143 3A       		.uleb128 0x3a
 4825 0144 0B       		.uleb128 0xb
 4826 0145 3B       		.uleb128 0x3b
 4827 0146 0B       		.uleb128 0xb
 4828 0147 49       		.uleb128 0x49
 4829 0148 13       		.uleb128 0x13
 4830 0149 02       		.uleb128 0x2
 4831 014a 18       		.uleb128 0x18
 4832 014b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 106


 4833 014c 00       		.byte	0
 4834 014d 18       		.uleb128 0x18
 4835 014e 2E       		.uleb128 0x2e
 4836 014f 01       		.byte	0x1
 4837 0150 3F       		.uleb128 0x3f
 4838 0151 19       		.uleb128 0x19
 4839 0152 03       		.uleb128 0x3
 4840 0153 0E       		.uleb128 0xe
 4841 0154 3A       		.uleb128 0x3a
 4842 0155 0B       		.uleb128 0xb
 4843 0156 3B       		.uleb128 0x3b
 4844 0157 05       		.uleb128 0x5
 4845 0158 27       		.uleb128 0x27
 4846 0159 19       		.uleb128 0x19
 4847 015a 49       		.uleb128 0x49
 4848 015b 13       		.uleb128 0x13
 4849 015c 11       		.uleb128 0x11
 4850 015d 01       		.uleb128 0x1
 4851 015e 12       		.uleb128 0x12
 4852 015f 06       		.uleb128 0x6
 4853 0160 40       		.uleb128 0x40
 4854 0161 18       		.uleb128 0x18
 4855 0162 9642     		.uleb128 0x2116
 4856 0164 19       		.uleb128 0x19
 4857 0165 01       		.uleb128 0x1
 4858 0166 13       		.uleb128 0x13
 4859 0167 00       		.byte	0
 4860 0168 00       		.byte	0
 4861 0169 19       		.uleb128 0x19
 4862 016a 05       		.uleb128 0x5
 4863 016b 00       		.byte	0
 4864 016c 03       		.uleb128 0x3
 4865 016d 0E       		.uleb128 0xe
 4866 016e 3A       		.uleb128 0x3a
 4867 016f 0B       		.uleb128 0xb
 4868 0170 3B       		.uleb128 0x3b
 4869 0171 05       		.uleb128 0x5
 4870 0172 49       		.uleb128 0x49
 4871 0173 13       		.uleb128 0x13
 4872 0174 02       		.uleb128 0x2
 4873 0175 18       		.uleb128 0x18
 4874 0176 00       		.byte	0
 4875 0177 00       		.byte	0
 4876 0178 1A       		.uleb128 0x1a
 4877 0179 34       		.uleb128 0x34
 4878 017a 00       		.byte	0
 4879 017b 03       		.uleb128 0x3
 4880 017c 08       		.uleb128 0x8
 4881 017d 3A       		.uleb128 0x3a
 4882 017e 0B       		.uleb128 0xb
 4883 017f 3B       		.uleb128 0x3b
 4884 0180 05       		.uleb128 0x5
 4885 0181 49       		.uleb128 0x49
 4886 0182 13       		.uleb128 0x13
 4887 0183 02       		.uleb128 0x2
 4888 0184 18       		.uleb128 0x18
 4889 0185 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 107


 4890 0186 00       		.byte	0
 4891 0187 1B       		.uleb128 0x1b
 4892 0188 2E       		.uleb128 0x2e
 4893 0189 01       		.byte	0x1
 4894 018a 3F       		.uleb128 0x3f
 4895 018b 19       		.uleb128 0x19
 4896 018c 03       		.uleb128 0x3
 4897 018d 0E       		.uleb128 0xe
 4898 018e 3A       		.uleb128 0x3a
 4899 018f 0B       		.uleb128 0xb
 4900 0190 3B       		.uleb128 0x3b
 4901 0191 05       		.uleb128 0x5
 4902 0192 49       		.uleb128 0x49
 4903 0193 13       		.uleb128 0x13
 4904 0194 11       		.uleb128 0x11
 4905 0195 01       		.uleb128 0x1
 4906 0196 12       		.uleb128 0x12
 4907 0197 06       		.uleb128 0x6
 4908 0198 40       		.uleb128 0x40
 4909 0199 18       		.uleb128 0x18
 4910 019a 9642     		.uleb128 0x2116
 4911 019c 19       		.uleb128 0x19
 4912 019d 01       		.uleb128 0x1
 4913 019e 13       		.uleb128 0x13
 4914 019f 00       		.byte	0
 4915 01a0 00       		.byte	0
 4916 01a1 1C       		.uleb128 0x1c
 4917 01a2 34       		.uleb128 0x34
 4918 01a3 00       		.byte	0
 4919 01a4 03       		.uleb128 0x3
 4920 01a5 0E       		.uleb128 0xe
 4921 01a6 3A       		.uleb128 0x3a
 4922 01a7 0B       		.uleb128 0xb
 4923 01a8 3B       		.uleb128 0x3b
 4924 01a9 05       		.uleb128 0x5
 4925 01aa 49       		.uleb128 0x49
 4926 01ab 13       		.uleb128 0x13
 4927 01ac 02       		.uleb128 0x2
 4928 01ad 18       		.uleb128 0x18
 4929 01ae 00       		.byte	0
 4930 01af 00       		.byte	0
 4931 01b0 1D       		.uleb128 0x1d
 4932 01b1 2E       		.uleb128 0x2e
 4933 01b2 00       		.byte	0
 4934 01b3 3F       		.uleb128 0x3f
 4935 01b4 19       		.uleb128 0x19
 4936 01b5 03       		.uleb128 0x3
 4937 01b6 0E       		.uleb128 0xe
 4938 01b7 3A       		.uleb128 0x3a
 4939 01b8 0B       		.uleb128 0xb
 4940 01b9 3B       		.uleb128 0x3b
 4941 01ba 05       		.uleb128 0x5
 4942 01bb 11       		.uleb128 0x11
 4943 01bc 01       		.uleb128 0x1
 4944 01bd 12       		.uleb128 0x12
 4945 01be 06       		.uleb128 0x6
 4946 01bf 40       		.uleb128 0x40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 108


 4947 01c0 18       		.uleb128 0x18
 4948 01c1 9642     		.uleb128 0x2116
 4949 01c3 19       		.uleb128 0x19
 4950 01c4 00       		.byte	0
 4951 01c5 00       		.byte	0
 4952 01c6 1E       		.uleb128 0x1e
 4953 01c7 2E       		.uleb128 0x2e
 4954 01c8 00       		.byte	0
 4955 01c9 3F       		.uleb128 0x3f
 4956 01ca 19       		.uleb128 0x19
 4957 01cb 03       		.uleb128 0x3
 4958 01cc 0E       		.uleb128 0xe
 4959 01cd 3A       		.uleb128 0x3a
 4960 01ce 0B       		.uleb128 0xb
 4961 01cf 3B       		.uleb128 0x3b
 4962 01d0 05       		.uleb128 0x5
 4963 01d1 49       		.uleb128 0x49
 4964 01d2 13       		.uleb128 0x13
 4965 01d3 11       		.uleb128 0x11
 4966 01d4 01       		.uleb128 0x1
 4967 01d5 12       		.uleb128 0x12
 4968 01d6 06       		.uleb128 0x6
 4969 01d7 40       		.uleb128 0x40
 4970 01d8 18       		.uleb128 0x18
 4971 01d9 9642     		.uleb128 0x2116
 4972 01db 19       		.uleb128 0x19
 4973 01dc 00       		.byte	0
 4974 01dd 00       		.byte	0
 4975 01de 1F       		.uleb128 0x1f
 4976 01df 2E       		.uleb128 0x2e
 4977 01e0 01       		.byte	0x1
 4978 01e1 3F       		.uleb128 0x3f
 4979 01e2 19       		.uleb128 0x19
 4980 01e3 03       		.uleb128 0x3
 4981 01e4 0E       		.uleb128 0xe
 4982 01e5 3A       		.uleb128 0x3a
 4983 01e6 0B       		.uleb128 0xb
 4984 01e7 3B       		.uleb128 0x3b
 4985 01e8 05       		.uleb128 0x5
 4986 01e9 11       		.uleb128 0x11
 4987 01ea 01       		.uleb128 0x1
 4988 01eb 12       		.uleb128 0x12
 4989 01ec 06       		.uleb128 0x6
 4990 01ed 40       		.uleb128 0x40
 4991 01ee 18       		.uleb128 0x18
 4992 01ef 9642     		.uleb128 0x2116
 4993 01f1 19       		.uleb128 0x19
 4994 01f2 01       		.uleb128 0x1
 4995 01f3 13       		.uleb128 0x13
 4996 01f4 00       		.byte	0
 4997 01f5 00       		.byte	0
 4998 01f6 20       		.uleb128 0x20
 4999 01f7 2E       		.uleb128 0x2e
 5000 01f8 00       		.byte	0
 5001 01f9 3F       		.uleb128 0x3f
 5002 01fa 19       		.uleb128 0x19
 5003 01fb 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 109


 5004 01fc 0E       		.uleb128 0xe
 5005 01fd 3A       		.uleb128 0x3a
 5006 01fe 0B       		.uleb128 0xb
 5007 01ff 3B       		.uleb128 0x3b
 5008 0200 05       		.uleb128 0x5
 5009 0201 11       		.uleb128 0x11
 5010 0202 01       		.uleb128 0x1
 5011 0203 12       		.uleb128 0x12
 5012 0204 06       		.uleb128 0x6
 5013 0205 40       		.uleb128 0x40
 5014 0206 18       		.uleb128 0x18
 5015 0207 9742     		.uleb128 0x2117
 5016 0209 19       		.uleb128 0x19
 5017 020a 00       		.byte	0
 5018 020b 00       		.byte	0
 5019 020c 21       		.uleb128 0x21
 5020 020d 2E       		.uleb128 0x2e
 5021 020e 00       		.byte	0
 5022 020f 3F       		.uleb128 0x3f
 5023 0210 19       		.uleb128 0x19
 5024 0211 03       		.uleb128 0x3
 5025 0212 0E       		.uleb128 0xe
 5026 0213 3A       		.uleb128 0x3a
 5027 0214 0B       		.uleb128 0xb
 5028 0215 3B       		.uleb128 0x3b
 5029 0216 05       		.uleb128 0x5
 5030 0217 49       		.uleb128 0x49
 5031 0218 13       		.uleb128 0x13
 5032 0219 11       		.uleb128 0x11
 5033 021a 01       		.uleb128 0x1
 5034 021b 12       		.uleb128 0x12
 5035 021c 06       		.uleb128 0x6
 5036 021d 40       		.uleb128 0x40
 5037 021e 18       		.uleb128 0x18
 5038 021f 9742     		.uleb128 0x2117
 5039 0221 19       		.uleb128 0x19
 5040 0222 00       		.byte	0
 5041 0223 00       		.byte	0
 5042 0224 22       		.uleb128 0x22
 5043 0225 34       		.uleb128 0x34
 5044 0226 00       		.byte	0
 5045 0227 03       		.uleb128 0x3
 5046 0228 0E       		.uleb128 0xe
 5047 0229 3A       		.uleb128 0x3a
 5048 022a 0B       		.uleb128 0xb
 5049 022b 3B       		.uleb128 0x3b
 5050 022c 05       		.uleb128 0x5
 5051 022d 49       		.uleb128 0x49
 5052 022e 13       		.uleb128 0x13
 5053 022f 3F       		.uleb128 0x3f
 5054 0230 19       		.uleb128 0x19
 5055 0231 3C       		.uleb128 0x3c
 5056 0232 19       		.uleb128 0x19
 5057 0233 00       		.byte	0
 5058 0234 00       		.byte	0
 5059 0235 23       		.uleb128 0x23
 5060 0236 34       		.uleb128 0x34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 110


 5061 0237 00       		.byte	0
 5062 0238 03       		.uleb128 0x3
 5063 0239 0E       		.uleb128 0xe
 5064 023a 3A       		.uleb128 0x3a
 5065 023b 0B       		.uleb128 0xb
 5066 023c 3B       		.uleb128 0x3b
 5067 023d 0B       		.uleb128 0xb
 5068 023e 49       		.uleb128 0x49
 5069 023f 13       		.uleb128 0x13
 5070 0240 3F       		.uleb128 0x3f
 5071 0241 19       		.uleb128 0x19
 5072 0242 02       		.uleb128 0x2
 5073 0243 18       		.uleb128 0x18
 5074 0244 00       		.byte	0
 5075 0245 00       		.byte	0
 5076 0246 24       		.uleb128 0x24
 5077 0247 21       		.uleb128 0x21
 5078 0248 00       		.byte	0
 5079 0249 49       		.uleb128 0x49
 5080 024a 13       		.uleb128 0x13
 5081 024b 2F       		.uleb128 0x2f
 5082 024c 05       		.uleb128 0x5
 5083 024d 00       		.byte	0
 5084 024e 00       		.byte	0
 5085 024f 25       		.uleb128 0x25
 5086 0250 34       		.uleb128 0x34
 5087 0251 00       		.byte	0
 5088 0252 03       		.uleb128 0x3
 5089 0253 08       		.uleb128 0x8
 5090 0254 3A       		.uleb128 0x3a
 5091 0255 0B       		.uleb128 0xb
 5092 0256 3B       		.uleb128 0x3b
 5093 0257 0B       		.uleb128 0xb
 5094 0258 49       		.uleb128 0x49
 5095 0259 13       		.uleb128 0x13
 5096 025a 3F       		.uleb128 0x3f
 5097 025b 19       		.uleb128 0x19
 5098 025c 02       		.uleb128 0x2
 5099 025d 18       		.uleb128 0x18
 5100 025e 00       		.byte	0
 5101 025f 00       		.byte	0
 5102 0260 00       		.byte	0
 5103              		.section	.debug_aranges,"",%progbits
 5104 0000 D4000000 		.4byte	0xd4
 5105 0004 0200     		.2byte	0x2
 5106 0006 00000000 		.4byte	.Ldebug_info0
 5107 000a 04       		.byte	0x4
 5108 000b 00       		.byte	0
 5109 000c 0000     		.2byte	0
 5110 000e 0000     		.2byte	0
 5111 0010 00000000 		.4byte	.LFB64
 5112 0014 44000000 		.4byte	.LFE64-.LFB64
 5113 0018 00000000 		.4byte	.LFB65
 5114 001c 6C000000 		.4byte	.LFE65-.LFB65
 5115 0020 00000000 		.4byte	.LFB66
 5116 0024 32000000 		.4byte	.LFE66-.LFB66
 5117 0028 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 111


 5118 002c 20000000 		.4byte	.LFE67-.LFB67
 5119 0030 00000000 		.4byte	.LFB68
 5120 0034 40000000 		.4byte	.LFE68-.LFB68
 5121 0038 00000000 		.4byte	.LFB69
 5122 003c DC000000 		.4byte	.LFE69-.LFB69
 5123 0040 00000000 		.4byte	.LFB70
 5124 0044 1C000000 		.4byte	.LFE70-.LFB70
 5125 0048 00000000 		.4byte	.LFB71
 5126 004c 28000000 		.4byte	.LFE71-.LFB71
 5127 0050 00000000 		.4byte	.LFB72
 5128 0054 C8000000 		.4byte	.LFE72-.LFB72
 5129 0058 00000000 		.4byte	.LFB73
 5130 005c 00010000 		.4byte	.LFE73-.LFB73
 5131 0060 00000000 		.4byte	.LFB74
 5132 0064 78000000 		.4byte	.LFE74-.LFB74
 5133 0068 00000000 		.4byte	.LFB75
 5134 006c 74010000 		.4byte	.LFE75-.LFB75
 5135 0070 00000000 		.4byte	.LFB76
 5136 0074 B8000000 		.4byte	.LFE76-.LFB76
 5137 0078 00000000 		.4byte	.LFB77
 5138 007c 1C000000 		.4byte	.LFE77-.LFB77
 5139 0080 00000000 		.4byte	.LFB78
 5140 0084 28000000 		.4byte	.LFE78-.LFB78
 5141 0088 00000000 		.4byte	.LFB79
 5142 008c 84000000 		.4byte	.LFE79-.LFB79
 5143 0090 00000000 		.4byte	.LFB80
 5144 0094 30000000 		.4byte	.LFE80-.LFB80
 5145 0098 00000000 		.4byte	.LFB81
 5146 009c A4020000 		.4byte	.LFE81-.LFB81
 5147 00a0 00000000 		.4byte	.LFB82
 5148 00a4 68010000 		.4byte	.LFE82-.LFB82
 5149 00a8 00000000 		.4byte	.LFB83
 5150 00ac 44010000 		.4byte	.LFE83-.LFB83
 5151 00b0 00000000 		.4byte	.LFB84
 5152 00b4 14000000 		.4byte	.LFE84-.LFB84
 5153 00b8 00000000 		.4byte	.LFB85
 5154 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5155 00c0 00000000 		.4byte	.LFB86
 5156 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5157 00c8 00000000 		.4byte	.LFB87
 5158 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5159 00d0 00000000 		.4byte	0
 5160 00d4 00000000 		.4byte	0
 5161              		.section	.debug_ranges,"",%progbits
 5162              	.Ldebug_ranges0:
 5163 0000 00000000 		.4byte	.LFB64
 5164 0004 44000000 		.4byte	.LFE64
 5165 0008 00000000 		.4byte	.LFB65
 5166 000c 6C000000 		.4byte	.LFE65
 5167 0010 00000000 		.4byte	.LFB66
 5168 0014 32000000 		.4byte	.LFE66
 5169 0018 00000000 		.4byte	.LFB67
 5170 001c 20000000 		.4byte	.LFE67
 5171 0020 00000000 		.4byte	.LFB68
 5172 0024 40000000 		.4byte	.LFE68
 5173 0028 00000000 		.4byte	.LFB69
 5174 002c DC000000 		.4byte	.LFE69
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 112


 5175 0030 00000000 		.4byte	.LFB70
 5176 0034 1C000000 		.4byte	.LFE70
 5177 0038 00000000 		.4byte	.LFB71
 5178 003c 28000000 		.4byte	.LFE71
 5179 0040 00000000 		.4byte	.LFB72
 5180 0044 C8000000 		.4byte	.LFE72
 5181 0048 00000000 		.4byte	.LFB73
 5182 004c 00010000 		.4byte	.LFE73
 5183 0050 00000000 		.4byte	.LFB74
 5184 0054 78000000 		.4byte	.LFE74
 5185 0058 00000000 		.4byte	.LFB75
 5186 005c 74010000 		.4byte	.LFE75
 5187 0060 00000000 		.4byte	.LFB76
 5188 0064 B8000000 		.4byte	.LFE76
 5189 0068 00000000 		.4byte	.LFB77
 5190 006c 1C000000 		.4byte	.LFE77
 5191 0070 00000000 		.4byte	.LFB78
 5192 0074 28000000 		.4byte	.LFE78
 5193 0078 00000000 		.4byte	.LFB79
 5194 007c 84000000 		.4byte	.LFE79
 5195 0080 00000000 		.4byte	.LFB80
 5196 0084 30000000 		.4byte	.LFE80
 5197 0088 00000000 		.4byte	.LFB81
 5198 008c A4020000 		.4byte	.LFE81
 5199 0090 00000000 		.4byte	.LFB82
 5200 0094 68010000 		.4byte	.LFE82
 5201 0098 00000000 		.4byte	.LFB83
 5202 009c 44010000 		.4byte	.LFE83
 5203 00a0 00000000 		.4byte	.LFB84
 5204 00a4 14000000 		.4byte	.LFE84
 5205 00a8 00000000 		.4byte	.LFB85
 5206 00ac 1A000000 		.4byte	.LFE85
 5207 00b0 00000000 		.4byte	.LFB86
 5208 00b4 2A000000 		.4byte	.LFE86
 5209 00b8 00000000 		.4byte	.LFB87
 5210 00bc 7C020000 		.4byte	.LFE87
 5211 00c0 00000000 		.4byte	0
 5212 00c4 00000000 		.4byte	0
 5213              		.section	.debug_line,"",%progbits
 5214              	.Ldebug_line0:
 5215 0000 92050000 		.section	.debug_str,"MS",%progbits,1
 5215      02000E02 
 5215      00000201 
 5215      FB0E0D00 
 5215      01010101 
 5216              	.LASF136:
 5217 0000 676D745F 		.ascii	"gmt_offset\000"
 5217      6F666673 
 5217      657400
 5218              	.LASF16:
 5219 000b 75696E74 		.ascii	"uint16\000"
 5219      313600
 5220              	.LASF38:
 5221 0012 76616C75 		.ascii	"value\000"
 5221      6500
 5222              	.LASF27:
 5223 0018 746D5F68 		.ascii	"tm_hour\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 113


 5223      6F757200 
 5224              	.LASF32:
 5225 0020 746D5F79 		.ascii	"tm_yday\000"
 5225      64617900 
 5226              	.LASF172:
 5227 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5227      73657273 
 5227      5C64616E 
 5227      747A5C44 
 5227      6F63756D 
 5228 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5228      2E637964 
 5228      736E00
 5229              	.LASF144:
 5230 0060 62756666 		.ascii	"buffer_overflow\000"
 5230      65725F6F 
 5230      76657266 
 5230      6C6F7700 
 5231              	.LASF4:
 5232 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5232      6E74385F 
 5232      7400
 5233              	.LASF70:
 5234 007a 636F756E 		.ascii	"countDownResetCondition\000"
 5234      74446F77 
 5234      6E526573 
 5234      6574436F 
 5234      6E646974 
 5235              	.LASF54:
 5236 0092 6C6F6E67 		.ascii	"longitude\000"
 5236      69747564 
 5236      6500
 5237              	.LASF170:
 5238 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5238      43313120 
 5238      352E342E 
 5238      31203230 
 5238      31363036 
 5239 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5239      20726576 
 5239      6973696F 
 5239      6E203233 
 5239      37373135 
 5240 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5240      66756E63 
 5240      74696F6E 
 5240      2D736563 
 5240      74696F6E 
 5241              	.LASF139:
 5242 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5242      6D5F7761 
 5242      6B657570 
 5242      00
 5243              	.LASF10:
 5244 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5244      206C6F6E 
 5244      6720756E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 114


 5244      7369676E 
 5244      65642069 
 5245              	.LASF121:
 5246 014e 73616D70 		.ascii	"sample_freq\000"
 5246      6C655F66 
 5246      72657100 
 5247              	.LASF148:
 5248 015a 6D6F6465 		.ascii	"modem_state\000"
 5248      6D5F7374 
 5248      61746500 
 5249              	.LASF97:
 5250 0166 74657374 		.ascii	"test\000"
 5250      00
 5251              	.LASF159:
 5252 016b 616C6172 		.ascii	"alarmMeasure\000"
 5252      6D4D6561 
 5252      73757265 
 5252      00
 5253              	.LASF143:
 5254 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5254      52784275 
 5254      66666572 
 5254      00
 5255              	.LASF167:
 5256 0185 74696D65 		.ascii	"timetoLevelSensor\000"
 5256      746F4C65 
 5256      76656C53 
 5256      656E736F 
 5256      7200
 5257              	.LASF150:
 5258 0197 6D6F6465 		.ascii	"modem_stats\000"
 5258      6D5F7374 
 5258      61747300 
 5259              	.LASF9:
 5260 01a3 6C6F6E67 		.ascii	"long long int\000"
 5260      206C6F6E 
 5260      6720696E 
 5260      7400
 5261              	.LASF0:
 5262 01b1 7369676E 		.ascii	"signed char\000"
 5262      65642063 
 5262      68617200 
 5263              	.LASF47:
 5264 01bd 65636E6F 		.ascii	"ecno\000"
 5264      00
 5265              	.LASF67:
 5266 01c2 636F756E 		.ascii	"countDownValue\000"
 5266      74446F77 
 5266      6E56616C 
 5266      756500
 5267              	.LASF160:
 5268 01d1 74696D65 		.ascii	"timeToMeasure\000"
 5268      546F4D65 
 5268      61737572 
 5268      6500
 5269              	.LASF50:
 5270 01df 74696D65 		.ascii	"time_to_network_connect\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 115


 5270      5F746F5F 
 5270      6E657477 
 5270      6F726B5F 
 5270      636F6E6E 
 5271              	.LASF162:
 5272 01f7 74696D65 		.ascii	"timeToSync\000"
 5272      546F5379 
 5272      6E6300
 5273              	.LASF155:
 5274 0202 68747470 		.ascii	"http_body\000"
 5274      5F626F64 
 5274      7900
 5275              	.LASF108:
 5276 020c 7365745F 		.ascii	"set_up_internet_connection\000"
 5276      75705F69 
 5276      6E746572 
 5276      6E65745F 
 5276      636F6E6E 
 5277              	.LASF135:
 5278 0227 7365636F 		.ascii	"second\000"
 5278      6E6400
 5279              	.LASF131:
 5280 022e 79656172 		.ascii	"year\000"
 5280      00
 5281              	.LASF126:
 5282 0233 74656D70 		.ascii	"temp\000"
 5282      00
 5283              	.LASF6:
 5284 0238 6C6F6E67 		.ascii	"long int\000"
 5284      20696E74 
 5284      00
 5285              	.LASF45:
 5286 0241 72786C65 		.ascii	"rxlev\000"
 5286      7600
 5287              	.LASF68:
 5288 0247 63757272 		.ascii	"currentCountDownValue\000"
 5288      656E7443 
 5288      6F756E74 
 5288      446F776E 
 5288      56616C75 
 5289              	.LASF137:
 5290 025d 6D6F6465 		.ascii	"modem_get_state\000"
 5290      6D5F6765 
 5290      745F7374 
 5290      61746500 
 5291              	.LASF55:
 5292 026d 616C7469 		.ascii	"altitude\000"
 5292      74756465 
 5292      00
 5293              	.LASF15:
 5294 0276 75696E74 		.ascii	"uint8\000"
 5294      3800
 5295              	.LASF125:
 5296 027c 6C657665 		.ascii	"level_sensor_freq\000"
 5296      6C5F7365 
 5296      6E736F72 
 5296      5F667265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 116


 5296      7100
 5297              	.LASF165:
 5298 028e 74696D65 		.ascii	"timeToAppLED\000"
 5298      546F4170 
 5298      704C4544 
 5298      00
 5299              	.LASF19:
 5300 029b 696E7433 		.ascii	"int32\000"
 5300      3200
 5301              	.LASF127:
 5302 02a1 6D6F6465 		.ascii	"modem_configure_settings\000"
 5302      6D5F636F 
 5302      6E666967 
 5302      7572655F 
 5302      73657474 
 5303              	.LASF115:
 5304 02ba 735F7369 		.ascii	"s_sim_type\000"
 5304      6D5F7479 
 5304      706500
 5305              	.LASF98:
 5306 02c5 6E657477 		.ascii	"network_time\000"
 5306      6F726B5F 
 5306      74696D65 
 5306      00
 5307              	.LASF3:
 5308 02d2 73686F72 		.ascii	"short unsigned int\000"
 5308      7420756E 
 5308      7369676E 
 5308      65642069 
 5308      6E7400
 5309              	.LASF17:
 5310 02e5 75696E74 		.ascii	"uint32\000"
 5310      333200
 5311              	.LASF94:
 5312 02ec 696E7465 		.ascii	"interval\000"
 5312      7276616C 
 5312      00
 5313              	.LASF7:
 5314 02f5 5F5F7569 		.ascii	"__uint32_t\000"
 5314      6E743332 
 5314      5F7400
 5315              	.LASF129:
 5316 0300 6D6F6465 		.ascii	"modem_get_network_time\000"
 5316      6D5F6765 
 5316      745F6E65 
 5316      74776F72 
 5316      6B5F7469 
 5317              	.LASF29:
 5318 0317 746D5F6D 		.ascii	"tm_mon\000"
 5318      6F6E00
 5319              	.LASF120:
 5320 031e 735F6C65 		.ascii	"s_level_sensor\000"
 5320      76656C5F 
 5320      73656E73 
 5320      6F7200
 5321              	.LASF62:
 5322 032d 64656275 		.ascii	"debug_level\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 117


 5322      675F6C65 
 5322      76656C00 
 5323              	.LASF138:
 5324 0339 6D6F6465 		.ascii	"modem_sleep\000"
 5324      6D5F736C 
 5324      65657000 
 5325              	.LASF118:
 5326 0345 735F6465 		.ascii	"s_debug_freq\000"
 5326      6275675F 
 5326      66726571 
 5326      00
 5327              	.LASF112:
 5328 0352 75706461 		.ascii	"updatable_parameters_initialize\000"
 5328      7461626C 
 5328      655F7061 
 5328      72616D65 
 5328      74657273 
 5329              	.LASF30:
 5330 0372 746D5F79 		.ascii	"tm_year\000"
 5330      65617200 
 5331              	.LASF161:
 5332 037a 616C6172 		.ascii	"alarmSync\000"
 5332      6D53796E 
 5332      6300
 5333              	.LASF80:
 5334 0384 70696E73 		.ascii	"pins_configure_active\000"
 5334      5F636F6E 
 5334      66696775 
 5334      72655F61 
 5334      63746976 
 5335              	.LASF40:
 5336 039a 6B65795F 		.ascii	"key_value_t\000"
 5336      76616C75 
 5336      655F7400 
 5337              	.LASF85:
 5338 03a6 7077725F 		.ascii	"pwr_check\000"
 5338      63686563 
 5338      6B00
 5339              	.LASF8:
 5340 03b0 6C6F6E67 		.ascii	"long unsigned int\000"
 5340      20756E73 
 5340      69676E65 
 5340      6420696E 
 5340      7400
 5341              	.LASF100:
 5342 03c2 65787472 		.ascii	"extract_string\000"
 5342      6163745F 
 5342      73747269 
 5342      6E6700
 5343              	.LASF90:
 5344 03d1 74696D65 		.ascii	"timeout\000"
 5344      6F757400 
 5345              	.LASF113:
 5346 03d9 6765745F 		.ascii	"get_cell_network_stats\000"
 5346      63656C6C 
 5346      5F6E6574 
 5346      776F726B 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 118


 5346      5F737461 
 5347              	.LASF39:
 5348 03f0 74696D65 		.ascii	"timeStamp\000"
 5348      5374616D 
 5348      7000
 5349              	.LASF56:
 5350 03fa 74696D65 		.ascii	"time_to_lock\000"
 5350      5F746F5F 
 5350      6C6F636B 
 5350      00
 5351              	.LASF147:
 5352 0407 64617461 		.ascii	"data\000"
 5352      00
 5353              	.LASF76:
 5354 040c 65705F70 		.ascii	"ep_port\000"
 5354      6F727400 
 5355              	.LASF33:
 5356 0414 746D5F69 		.ascii	"tm_isdst\000"
 5356      73647374 
 5356      00
 5357              	.LASF72:
 5358 041d 6D6F6465 		.ascii	"modem_info\000"
 5358      6D5F696E 
 5358      666F00
 5359              	.LASF75:
 5360 0428 65705F68 		.ascii	"ep_host\000"
 5360      6F737400 
 5361              	.LASF73:
 5362 0430 63686970 		.ascii	"chip_uniqueId\000"
 5362      5F756E69 
 5362      71756549 
 5362      6400
 5363              	.LASF95:
 5364 043e 6D6F6465 		.ascii	"modem_power_up\000"
 5364      6D5F706F 
 5364      7765725F 
 5364      757000
 5365              	.LASF171:
 5366 044d 6D6F6465 		.ascii	"modem.c\000"
 5366      6D2E6300 
 5367              	.LASF102:
 5368 0455 62656769 		.ascii	"beginMarker\000"
 5368      6E4D6172 
 5368      6B657200 
 5369              	.LASF104:
 5370 0461 74617267 		.ascii	"target\000"
 5370      657400
 5371              	.LASF51:
 5372 0468 74696D65 		.ascii	"time_to_acquire_ip\000"
 5372      5F746F5F 
 5372      61637175 
 5372      6972655F 
 5372      697000
 5373              	.LASF103:
 5374 047b 656E644D 		.ascii	"endMarker\000"
 5374      61726B65 
 5374      7200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 119


 5375              	.LASF2:
 5376 0485 73686F72 		.ascii	"short int\000"
 5376      7420696E 
 5376      7400
 5377              	.LASF130:
 5378 048f 65706F63 		.ascii	"epoch_time\000"
 5378      685F7469 
 5378      6D6500
 5379              	.LASF5:
 5380 049a 5F5F696E 		.ascii	"__int32_t\000"
 5380      7433325F 
 5380      7400
 5381              	.LASF164:
 5382 04a4 616C6172 		.ascii	"alarmAppLED\000"
 5382      6D417070 
 5382      4C454400 
 5383              	.LASF101:
 5384 04b0 66726F6D 		.ascii	"from\000"
 5384      00
 5385              	.LASF107:
 5386 04b5 63726567 		.ascii	"creg\000"
 5386      00
 5387              	.LASF123:
 5388 04ba 64656275 		.ascii	"debug_freq\000"
 5388      675F6672 
 5388      657100
 5389              	.LASF91:
 5390 04c5 61745F61 		.ascii	"at_attempt\000"
 5390      7474656D 
 5390      707400
 5391              	.LASF99:
 5392 04d0 61745F77 		.ascii	"at_write_command\000"
 5392      72697465 
 5392      5F636F6D 
 5392      6D616E64 
 5392      00
 5393              	.LASF74:
 5394 04e1 7379735F 		.ascii	"sys_info_t\000"
 5394      696E666F 
 5394      5F7400
 5395              	.LASF66:
 5396 04ec 75706461 		.ascii	"updatable_parameters_t\000"
 5396      7461626C 
 5396      655F7061 
 5396      72616D65 
 5396      74657273 
 5397              	.LASF122:
 5398 0503 7265706F 		.ascii	"report_freq\000"
 5398      72745F66 
 5398      72657100 
 5399              	.LASF145:
 5400 050f 64617461 		.ascii	"dataPointsInStack\000"
 5400      506F696E 
 5400      7473496E 
 5400      53746163 
 5400      6B00
 5401              	.LASF26:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 120


 5402 0521 746D5F6D 		.ascii	"tm_min\000"
 5402      696E00
 5403              	.LASF24:
 5404 0528 73697A65 		.ascii	"sizetype\000"
 5404      74797065 
 5404      00
 5405              	.LASF132:
 5406 0531 6D6F6E74 		.ascii	"month\000"
 5406      6800
 5407              	.LASF106:
 5408 0537 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5408      6F6E6E65 
 5408      63746564 
 5408      5F746F5F 
 5408      63656C6C 
 5409              	.LASF168:
 5410 0554 75617274 		.ascii	"uart_received_string\000"
 5410      5F726563 
 5410      65697665 
 5410      645F7374 
 5410      72696E67 
 5411              	.LASF53:
 5412 0569 6C617469 		.ascii	"latitude\000"
 5412      74756465 
 5412      00
 5413              	.LASF34:
 5414 0572 74657374 		.ascii	"test_name\000"
 5414      5F6E616D 
 5414      6500
 5415              	.LASF163:
 5416 057c 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5416      546F5379 
 5416      636E5265 
 5416      6D6F7465 
 5416      50617261 
 5417              	.LASF96:
 5418 0593 6D6F6465 		.ascii	"modem_test\000"
 5418      6D5F7465 
 5418      737400
 5419              	.LASF111:
 5420 059e 6D617463 		.ascii	"match\000"
 5420      6800
 5421              	.LASF151:
 5422 05a4 75706461 		.ascii	"updatable_parameters\000"
 5422      7461626C 
 5422      655F7061 
 5422      72616D65 
 5422      74657273 
 5423              	.LASF133:
 5424 05b9 686F7572 		.ascii	"hour\000"
 5424      00
 5425              	.LASF88:
 5426 05be 636F6D6D 		.ascii	"commands\000"
 5426      616E6473 
 5426      00
 5427              	.LASF92:
 5428 05c7 636F6D70 		.ascii	"compare_location\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 121


 5428      6172655F 
 5428      6C6F6361 
 5428      74696F6E 
 5428      00
 5429              	.LASF20:
 5430 05d8 666C6F61 		.ascii	"float\000"
 5430      7400
 5431              	.LASF78:
 5432 05de 6D6F6465 		.ascii	"modem_initialize\000"
 5432      6D5F696E 
 5432      69746961 
 5432      6C697A65 
 5432      00
 5433              	.LASF117:
 5434 05ef 735F7265 		.ascii	"s_report_freq\000"
 5434      706F7274 
 5434      5F667265 
 5434      7100
 5435              	.LASF59:
 5436 05fd 73696D5F 		.ascii	"sim_type\000"
 5436      74797065 
 5436      00
 5437              	.LASF109:
 5438 0606 6973725F 		.ascii	"isr_telit_rx\000"
 5438      74656C69 
 5438      745F7278 
 5438      00
 5439              	.LASF71:
 5440 0613 616C6172 		.ascii	"alarm\000"
 5440      6D00
 5441              	.LASF65:
 5442 0619 5F426F6F 		.ascii	"_Bool\000"
 5442      6C00
 5443              	.LASF13:
 5444 061f 696E7433 		.ascii	"int32_t\000"
 5444      325F7400 
 5445              	.LASF1:
 5446 0627 756E7369 		.ascii	"unsigned char\000"
 5446      676E6564 
 5446      20636861 
 5446      7200
 5447              	.LASF158:
 5448 0635 73797374 		.ascii	"system_settings\000"
 5448      656D5F73 
 5448      65747469 
 5448      6E677300 
 5449              	.LASF93:
 5450 0645 64656C61 		.ascii	"delay\000"
 5450      7900
 5451              	.LASF48:
 5452 064b 72737271 		.ascii	"rsrq\000"
 5452      00
 5453              	.LASF61:
 5454 0650 73796E63 		.ascii	"sync_time\000"
 5454      5F74696D 
 5454      6500
 5455              	.LASF46:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 122


 5456 065a 72736370 		.ascii	"rscp\000"
 5456      00
 5457              	.LASF140:
 5458 065f 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5458      6D5F6765 
 5458      745F6770 
 5458      735F636F 
 5458      6F726469 
 5459              	.LASF37:
 5460 0679 74657374 		.ascii	"test_t\000"
 5460      5F7400
 5461              	.LASF157:
 5462 0680 73797374 		.ascii	"system_info\000"
 5462      656D5F69 
 5462      6E666F00 
 5463              	.LASF43:
 5464 068c 696D6569 		.ascii	"imei\000"
 5464      00
 5465              	.LASF36:
 5466 0691 72656173 		.ascii	"reason\000"
 5466      6F6E00
 5467              	.LASF49:
 5468 0698 72737270 		.ascii	"rsrp\000"
 5468      00
 5469              	.LASF52:
 5470 069d 6D6F6465 		.ascii	"modem_stats_t\000"
 5470      6D5F7374 
 5470      6174735F 
 5470      7400
 5471              	.LASF87:
 5472 06ab 75617274 		.ascii	"uart_string_reset\000"
 5472      5F737472 
 5472      696E675F 
 5472      72657365 
 5472      7400
 5473              	.LASF166:
 5474 06bd 616C6172 		.ascii	"alarmLevelSensor\000"
 5474      6D4C6576 
 5474      656C5365 
 5474      6E736F72 
 5474      00
 5475              	.LASF31:
 5476 06ce 746D5F77 		.ascii	"tm_wday\000"
 5476      64617900 
 5477              	.LASF86:
 5478 06d6 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5478      6D5F736F 
 5478      66745F70 
 5478      6F776572 
 5478      5F637963 
 5479              	.LASF64:
 5480 06ed 4C657665 		.ascii	"Level_Sensor_freq\000"
 5480      6C5F5365 
 5480      6E736F72 
 5480      5F667265 
 5480      7100
 5481              	.LASF152:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 123


 5482 06ff 6C657665 		.ascii	"level_sensor_inbox\000"
 5482      6C5F7365 
 5482      6E736F72 
 5482      5F696E62 
 5482      6F7800
 5483              	.LASF23:
 5484 0712 6C6F6E67 		.ascii	"long double\000"
 5484      20646F75 
 5484      626C6500 
 5485              	.LASF22:
 5486 071e 63686172 		.ascii	"char\000"
 5486      00
 5487              	.LASF105:
 5488 0723 6D6F6465 		.ascii	"modem_process_tasks\000"
 5488      6D5F7072 
 5488      6F636573 
 5488      735F7461 
 5488      736B7300 
 5489              	.LASF11:
 5490 0737 756E7369 		.ascii	"unsigned int\000"
 5490      676E6564 
 5490      20696E74 
 5490      00
 5491              	.LASF128:
 5492 0744 4346554E 		.ascii	"CFUN\000"
 5492      00
 5493              	.LASF42:
 5494 0749 6D6F6465 		.ascii	"model_id\000"
 5494      6C5F6964 
 5494      00
 5495              	.LASF156:
 5496 0752 68747470 		.ascii	"http_route\000"
 5496      5F726F75 
 5496      746500
 5497              	.LASF44:
 5498 075d 6D6F6465 		.ascii	"modem_info_t\000"
 5498      6D5F696E 
 5498      666F5F74 
 5498      00
 5499              	.LASF58:
 5500 076a 6770735F 		.ascii	"gps_t\000"
 5500      7400
 5501              	.LASF169:
 5502 0770 75617274 		.ascii	"uart_string_index\000"
 5502      5F737472 
 5502      696E675F 
 5502      696E6465 
 5502      7800
 5503              	.LASF60:
 5504 0782 6D656173 		.ascii	"measure_time\000"
 5504      7572655F 
 5504      74696D65 
 5504      00
 5505              	.LASF110:
 5506 078f 69735F63 		.ascii	"is_connected_to_internet\000"
 5506      6F6E6E65 
 5506      63746564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 124


 5506      5F746F5F 
 5506      696E7465 
 5507              	.LASF149:
 5508 07a8 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5508      6D5F7374 
 5508      6172745F 
 5508      74696D65 
 5508      5F737461 
 5509              	.LASF142:
 5510 07bf 6770735F 		.ascii	"gps_status\000"
 5510      73746174 
 5510      757300
 5511              	.LASF79:
 5512 07ca 70696E73 		.ascii	"pins_configure_inactive\000"
 5512      5F636F6E 
 5512      66696775 
 5512      72655F69 
 5512      6E616374 
 5513              	.LASF119:
 5514 07e2 735F6170 		.ascii	"s_app_led\000"
 5514      705F6C65 
 5514      6400
 5515              	.LASF41:
 5516 07ec 73696D5F 		.ascii	"sim_id\000"
 5516      696400
 5517              	.LASF28:
 5518 07f3 746D5F6D 		.ascii	"tm_mday\000"
 5518      64617900 
 5519              	.LASF57:
 5520 07fb 76616C69 		.ascii	"valid\000"
 5520      6400
 5521              	.LASF134:
 5522 0801 6D696E75 		.ascii	"minute\000"
 5522      746500
 5523              	.LASF14:
 5524 0808 75696E74 		.ascii	"uint32_t\000"
 5524      33325F74 
 5524      00
 5525              	.LASF25:
 5526 0811 746D5F73 		.ascii	"tm_sec\000"
 5526      656300
 5527              	.LASF114:
 5528 0818 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5528      75706461 
 5528      7465645F 
 5528      70617261 
 5528      6D657465 
 5529              	.LASF116:
 5530 083b 735F7361 		.ascii	"s_sample_freq\000"
 5530      6D706C65 
 5530      5F667265 
 5530      7100
 5531              	.LASF35:
 5532 0849 73746174 		.ascii	"status\000"
 5532      757300
 5533              	.LASF146:
 5534 0850 64617461 		.ascii	"dataPointsInStackDesired\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 125


 5534      506F696E 
 5534      7473496E 
 5534      53746163 
 5534      6B446573 
 5535              	.LASF63:
 5536 0869 4170705F 		.ascii	"App_LED_freq\000"
 5536      4C45445F 
 5536      66726571 
 5536      00
 5537              	.LASF77:
 5538 0876 7379735F 		.ascii	"sys_settings_t\000"
 5538      73657474 
 5538      696E6773 
 5538      5F7400
 5539              	.LASF12:
 5540 0885 75696E74 		.ascii	"uint8_t\000"
 5540      385F7400 
 5541              	.LASF18:
 5542 088d 696E7431 		.ascii	"int16\000"
 5542      3600
 5543              	.LASF82:
 5544 0893 61745F72 		.ascii	"at_ready\000"
 5544      65616479 
 5544      00
 5545              	.LASF83:
 5546 089c 61747465 		.ascii	"attempts\000"
 5546      6D707473 
 5546      00
 5547              	.LASF69:
 5548 08a5 636F756E 		.ascii	"countDownType\000"
 5548      74446F77 
 5548      6E547970 
 5548      6500
 5549              	.LASF84:
 5550 08b3 626F6F74 		.ascii	"boot_time\000"
 5550      5F74696D 
 5550      6500
 5551              	.LASF89:
 5552 08bd 65787065 		.ascii	"expected_response\000"
 5552      63746564 
 5552      5F726573 
 5552      706F6E73 
 5552      6500
 5553              	.LASF141:
 5554 08cf 6C6F636B 		.ascii	"lock_time\000"
 5554      5F74696D 
 5554      6500
 5555              	.LASF154:
 5556 08d9 68747470 		.ascii	"http_request\000"
 5556      5F726571 
 5556      75657374 
 5556      00
 5557              	.LASF81:
 5558 08e6 6D6F6465 		.ascii	"modem_power_down\000"
 5558      6D5F706F 
 5558      7765725F 
 5558      646F776E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccgcOyrX.s 			page 126


 5558      00
 5559              	.LASF21:
 5560 08f7 646F7562 		.ascii	"double\000"
 5560      6C6500
 5561              	.LASF153:
 5562 08fe 6170705F 		.ascii	"app_led_inbox\000"
 5562      6C65645F 
 5562      696E626F 
 5562      7800
 5563              	.LASF124:
 5564 090c 6170705F 		.ascii	"app_led_freq\000"
 5564      6C65645F 
 5564      66726571 
 5564      00
 5565              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
