ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,6,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.comm	uart_received_string,1024,4
  50              		.global	uart_string_index
  51              		.bss
  52              		.align	1
  53              		.type	uart_string_index, %object
  54              		.size	uart_string_index, 2
  55              	uart_string_index:
  56 0000 0000     		.space	2
  57              		.section	.text.isr_telit_rx,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 2


  58              		.align	2
  59              		.global	isr_telit_rx
  60              		.thumb
  61              		.thumb_func
  62              		.type	isr_telit_rx, %function
  63              	isr_telit_rx:
  64              	.LFB64:
  65              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  66              		.loc 1 18 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 98B5     		push	{r3, r4, r7, lr}
  71              		.cfi_def_cfa_offset 16
  72              		.cfi_offset 3, -16
  73              		.cfi_offset 4, -12
  74              		.cfi_offset 7, -8
  75              		.cfi_offset 14, -4
  76 0002 00AF     		add	r7, sp, #0
  77              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  78              		.loc 1 20 0
  79 0004 12E0     		b	.L2
  80              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  81              		.loc 1 21 0
  82 0006 0D4B     		ldr	r3, .L4
  83 0008 B3F90030 		ldrsh	r3, [r3]
  84 000c 1C46     		mov	r4, r3
  85 000e FFF7FEFF 		bl	UART_Telit_GetChar
  86 0012 0346     		mov	r3, r0
  87 0014 1A46     		mov	r2, r3
  88 0016 0A4B     		ldr	r3, .L4+4
  89 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  90              		.loc 1 22 0
  91 001a 084B     		ldr	r3, .L4
  92 001c B3F90030 		ldrsh	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 3


  93 0020 9BB2     		uxth	r3, r3
  94 0022 0133     		adds	r3, r3, #1
  95 0024 9BB2     		uxth	r3, r3
  96 0026 1AB2     		sxth	r2, r3
  97 0028 044B     		ldr	r3, .L4
  98 002a 1A80     		strh	r2, [r3]	@ movhi
  99              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 100              		.loc 1 20 0
 101 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 102 0030 0346     		mov	r3, r0
 103 0032 012B     		cmp	r3, #1
 104 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 105              		.loc 1 25 0
 106 0036 00BF     		nop
 107 0038 98BD     		pop	{r3, r4, r7, pc}
 108              	.L5:
 109 003a 00BF     		.align	2
 110              	.L4:
 111 003c 00000000 		.word	uart_string_index
 112 0040 00000000 		.word	uart_received_string
 113              		.cfi_endproc
 114              	.LFE64:
 115              		.size	isr_telit_rx, .-isr_telit_rx
 116              		.section	.text.modem_initialize,"ax",%progbits
 117              		.align	2
 118              		.global	modem_initialize
 119              		.thumb
 120              		.thumb_func
 121              		.type	modem_initialize, %function
 122              	modem_initialize:
 123              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 124              		.loc 1 28 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 134              		.loc 1 31 0
 135 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 136              		.loc 1 32 0
 137 0008 154B     		ldr	r3, .L7
 138 000a 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 4


 139 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 140              		.loc 1 34 0
 141 000e 154B     		ldr	r3, .L7+4
 142 0010 0022     		movs	r2, #0
 143 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 144              		.loc 1 35 0
 145 0016 134B     		ldr	r3, .L7+4
 146 0018 0022     		movs	r2, #0
 147 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 148              		.loc 1 36 0
 149 001c 114B     		ldr	r3, .L7+4
 150 001e 0022     		movs	r2, #0
 151 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 152              		.loc 1 37 0
 153 0022 114B     		ldr	r3, .L7+8
 154 0024 0022     		movs	r2, #0
 155 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 156              		.loc 1 38 0
 157 0028 0F4B     		ldr	r3, .L7+8
 158 002a 0022     		movs	r2, #0
 159 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 160              		.loc 1 39 0
 161 002e 0E4B     		ldr	r3, .L7+8
 162 0030 0022     		movs	r2, #0
 163 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 164              		.loc 1 40 0
 165 0034 0C4B     		ldr	r3, .L7+8
 166 0036 0022     		movs	r2, #0
 167 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 168              		.loc 1 41 0
 169 003a 0B4B     		ldr	r3, .L7+8
 170 003c 0022     		movs	r2, #0
 171 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 172              		.loc 1 42 0
 173 0040 094B     		ldr	r3, .L7+8
 174 0042 0022     		movs	r2, #0
 175 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 176              		.loc 1 43 0
 177 0046 084B     		ldr	r3, .L7+8
 178 0048 0022     		movs	r2, #0
 179 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 180              		.loc 1 44 0
 181 004c 064B     		ldr	r3, .L7+8
 182 004e 0022     		movs	r2, #0
 183 0050 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 5


  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 184              		.loc 1 48 0
 185 0052 0021     		movs	r1, #0
 186 0054 4020     		movs	r0, #64
 187 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 188              		.loc 1 50 0
 189 005a 00BF     		nop
 190 005c 80BD     		pop	{r7, pc}
 191              	.L8:
 192 005e 00BF     		.align	2
 193              	.L7:
 194 0060 00000000 		.word	modem_state
 195 0064 00000000 		.word	modem_info
 196 0068 00000000 		.word	modem_stats
 197              		.cfi_endproc
 198              	.LFE65:
 199              		.size	modem_initialize, .-modem_initialize
 200              		.section	.text.pins_configure_inactive,"ax",%progbits
 201              		.align	2
 202              		.global	pins_configure_inactive
 203              		.thumb
 204              		.thumb_func
 205              		.type	pins_configure_inactive, %function
 206              	pins_configure_inactive:
 207              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 208              		.loc 1 54 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 218              		.loc 1 56 0
 219 0004 0020     		movs	r0, #0
 220 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 221              		.loc 1 57 0
 222 000a 0C20     		movs	r0, #12
 223 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 224              		.loc 1 59 0
 225 0010 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 6


 226 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 227              		.loc 1 62 0
 228 0016 0020     		movs	r0, #0
 229 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 230              		.loc 1 63 0
 231 001c 0020     		movs	r0, #0
 232 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 233              		.loc 1 64 0
 234 0022 0020     		movs	r0, #0
 235 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 236              		.loc 1 65 0
 237 0028 0020     		movs	r0, #0
 238 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 239              		.loc 1 67 0
 240 002e 00BF     		nop
 241 0030 80BD     		pop	{r7, pc}
 242              		.cfi_endproc
 243              	.LFE66:
 244              		.size	pins_configure_inactive, .-pins_configure_inactive
 245 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 246              		.align	2
 247              		.global	pins_configure_active
 248              		.thumb
 249              		.thumb_func
 250              		.type	pins_configure_active, %function
 251              	pins_configure_active:
 252              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 253              		.loc 1 70 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0000 80B5     		push	{r7, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 263              		.loc 1 72 0
 264 0004 0220     		movs	r0, #2
 265 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 266              		.loc 1 73 0
 267 000a 0120     		movs	r0, #1
 268 000c FFF7FEFF 		bl	Telit_ControlReg_Write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 7


  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 269              		.loc 1 74 0
 270 0010 0120     		movs	r0, #1
 271 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 272              		.loc 1 75 0
 273 0016 6420     		movs	r0, #100
 274 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 275              		.loc 1 76 0
 276 001c 00BF     		nop
 277 001e 80BD     		pop	{r7, pc}
 278              		.cfi_endproc
 279              	.LFE67:
 280              		.size	pins_configure_active, .-pins_configure_active
 281              		.section	.rodata
 282              		.align	2
 283              	.LC0:
 284 0000 4F4B00   		.ascii	"OK\000"
 285 0003 00       		.align	2
 286              	.LC1:
 287 0004 41542353 		.ascii	"AT#SHDN\015\000"
 287      48444E0D 
 287      00
 288              		.section	.text.modem_power_down,"ax",%progbits
 289              		.align	2
 290              		.global	modem_power_down
 291              		.thumb
 292              		.thumb_func
 293              		.type	modem_power_down, %function
 294              	modem_power_down:
 295              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 296              		.loc 1 79 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 0000 80B5     		push	{r7, lr}
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 306              		.loc 1 82 0
 307 0004 41F28832 		movw	r2, #5000
 308 0008 0A49     		ldr	r1, .L12
 309 000a 0B48     		ldr	r0, .L12+4
 310 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 311              		.loc 1 85 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 8


 312 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 313              		.loc 1 86 0
 314 0014 4FF47A70 		mov	r0, #1000
 315 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 316              		.loc 1 88 0
 317 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 318              		.loc 1 89 0
 319 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 320              		.loc 1 90 0
 321 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 322              		.loc 1 91 0
 323 0028 044B     		ldr	r3, .L12+8
 324 002a 0022     		movs	r2, #0
 325 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 326              		.loc 1 93 0
 327 002e 00BF     		nop
 328 0030 80BD     		pop	{r7, pc}
 329              	.L13:
 330 0032 00BF     		.align	2
 331              	.L12:
 332 0034 00000000 		.word	.LC0
 333 0038 04000000 		.word	.LC1
 334 003c 00000000 		.word	modem_state
 335              		.cfi_endproc
 336              	.LFE68:
 337              		.size	modem_power_down, .-modem_power_down
 338              		.section	.rodata
 339 000d 000000   		.align	2
 340              	.LC2:
 341 0010 41544530 		.ascii	"ATE0\015\000"
 341      0D00
 342 0016 0000     		.align	2
 343              	.LC3:
 344 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 344      6D20626F 
 344      6F742074 
 344      696D653A 
 344      20256400 
 345              		.align	2
 346              	.LC4:
 347 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 347      6D207265 
 347      61647920 
 347      666F7220 
 347      41542063 
 348 005d 000000   		.align	2
 349              	.LC5:
 350 0060 4E6F2072 		.ascii	"No response from modem.\000"
 350      6573706F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 9


 350      6E736520 
 350      66726F6D 
 350      206D6F64 
 351              		.section	.text.modem_power_up,"ax",%progbits
 352              		.align	2
 353              		.global	modem_power_up
 354              		.thumb
 355              		.thumb_func
 356              		.type	modem_power_up, %function
 357              	modem_power_up:
 358              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 359              		.loc 1 97 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 80B5     		push	{r7, lr}
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 82B0     		sub	sp, sp, #8
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 371              		.loc 1 99 0
 372 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 373              		.loc 1 100 0
 374 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 375              		.loc 1 101 0
 376 000e 2C48     		ldr	r0, .L27
 377 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 378              		.loc 1 103 0
 379 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 380              		.loc 1 106 0
 381 0018 0023     		movs	r3, #0
 382 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 383              		.loc 1 107 0
 384 001c 0023     		movs	r3, #0
 385 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 386              		.loc 1 109 0
 387 0020 FFF7FEFF 		bl	getTimeStamp
 388 0024 3860     		str	r0, [r7]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 10


 389              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 390              		.loc 1 112 0
 391 0026 0023     		movs	r3, #0
 392 0028 BB71     		strb	r3, [r7, #6]
 393 002a 1CE0     		b	.L15
 394              	.L22:
 395              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 396              		.loc 1 114 0
 397 002c 0023     		movs	r3, #0
 398 002e 7B71     		strb	r3, [r7, #5]
 399 0030 0EE0     		b	.L16
 400              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 401              		.loc 1 116 0
 402 0032 4FF47A72 		mov	r2, #1000
 403 0036 2349     		ldr	r1, .L27+4
 404 0038 2348     		ldr	r0, .L27+8
 405 003a FFF7FEFF 		bl	at_write_command
 406 003e 0346     		mov	r3, r0
 407 0040 002B     		cmp	r3, #0
 408 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 409              		.loc 1 117 0
 410 0044 0123     		movs	r3, #1
 411 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 412              		.loc 1 118 0
 413 0048 05E0     		b	.L18
 414              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 415              		.loc 1 114 0 discriminator 2
 416 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 417 004c 0133     		adds	r3, r3, #1
 418 004e 7B71     		strb	r3, [r7, #5]
 419              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 420              		.loc 1 114 0 is_stmt 0 discriminator 1
 421 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 422 0052 132B     		cmp	r3, #19
 423 0054 EDD9     		bls	.L19
 424              	.L18:
 425              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 426              		.loc 1 122 0 is_stmt 1
 427 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 428 0058 012B     		cmp	r3, #1
 429 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 11


 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 430              		.loc 1 126 0 discriminator 2
 431 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 432              		.loc 1 112 0 discriminator 2
 433 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 434 0062 0133     		adds	r3, r3, #1
 435 0064 BB71     		strb	r3, [r7, #6]
 436              	.L15:
 112:modem.c       ****         
 437              		.loc 1 112 0 is_stmt 0 discriminator 1
 438 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 439 0068 022B     		cmp	r3, #2
 440 006a DFD9     		bls	.L22
 441 006c 00E0     		b	.L21
 442              	.L26:
 123:modem.c       ****             break;
 443              		.loc 1 123 0 is_stmt 1
 444 006e 00BF     		nop
 445              	.L21:
 446              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 447              		.loc 1 130 0
 448 0070 FFF7FEFF 		bl	getTimeStamp
 449 0074 0246     		mov	r2, r0
 450 0076 3B68     		ldr	r3, [r7]
 451 0078 D31A     		subs	r3, r2, r3
 452 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 453              		.loc 1 131 0
 454 007c 3A68     		ldr	r2, [r7]
 455 007e 1349     		ldr	r1, .L27+12
 456 0080 0020     		movs	r0, #0
 457 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 458              		.loc 1 133 0
 459 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 460 0088 012B     		cmp	r3, #1
 461 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 462              		.loc 1 134 0
 463 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 464 008e 1A46     		mov	r2, r3
 465 0090 0F49     		ldr	r1, .L27+16
 466 0092 0020     		movs	r0, #0
 467 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 468              		.loc 1 135 0
 469 0098 0E4B     		ldr	r3, .L27+20
 470 009a 0122     		movs	r2, #1
 471 009c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 12


 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 472              		.loc 1 143 0
 473 009e 0123     		movs	r3, #1
 474 00a0 09E0     		b	.L25
 475              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 476              		.loc 1 137 0
 477 00a2 0D49     		ldr	r1, .L27+24
 478 00a4 0220     		movs	r0, #2
 479 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 480              		.loc 1 138 0
 481 00aa 0A4B     		ldr	r3, .L27+20
 482 00ac 0022     		movs	r2, #0
 483 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 484              		.loc 1 140 0
 485 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 486              		.loc 1 141 0
 487 00b4 0023     		movs	r3, #0
 488              	.L25:
 144:modem.c       **** }
 489              		.loc 1 144 0
 490 00b6 1846     		mov	r0, r3
 491 00b8 0837     		adds	r7, r7, #8
 492              		.cfi_def_cfa_offset 8
 493 00ba BD46     		mov	sp, r7
 494              		.cfi_def_cfa_register 13
 495              		@ sp needed
 496 00bc 80BD     		pop	{r7, pc}
 497              	.L28:
 498 00be 00BF     		.align	2
 499              	.L27:
 500 00c0 00000000 		.word	isr_telit_rx
 501 00c4 00000000 		.word	.LC0
 502 00c8 10000000 		.word	.LC2
 503 00cc 18000000 		.word	.LC3
 504 00d0 2C000000 		.word	.LC4
 505 00d4 00000000 		.word	modem_state
 506 00d8 60000000 		.word	.LC5
 507              		.cfi_endproc
 508              	.LFE69:
 509              		.size	modem_power_up, .-modem_power_up
 510              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 511              		.align	2
 512              		.global	modem_soft_power_cycle
 513              		.thumb
 514              		.thumb_func
 515              		.type	modem_soft_power_cycle, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 13


 516              	modem_soft_power_cycle:
 517              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 518              		.loc 1 147 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 528              		.loc 1 148 0
 529 0004 0120     		movs	r0, #1
 530 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 531              		.loc 1 149 0
 532 000a 4FF4FA60 		mov	r0, #2000
 533 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 534              		.loc 1 150 0
 535 0012 0020     		movs	r0, #0
 536 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 537              		.loc 1 152 0
 538 0018 00BF     		nop
 539 001a 80BD     		pop	{r7, pc}
 540              		.cfi_endproc
 541              	.LFE70:
 542              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 543              		.section	.text.uart_string_reset,"ax",%progbits
 544              		.align	2
 545              		.global	uart_string_reset
 546              		.thumb
 547              		.thumb_func
 548              		.type	uart_string_reset, %function
 549              	uart_string_reset:
 550              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 551              		.loc 1 155 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555 0000 80B5     		push	{r7, lr}
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 7, -8
 558              		.cfi_offset 14, -4
 559 0002 00AF     		add	r7, sp, #0
 560              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 14


 561              		.loc 1 156 0
 562 0004 064B     		ldr	r3, .L31
 563 0006 0022     		movs	r2, #0
 564 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 565              		.loc 1 158 0
 566 000a 4FF48062 		mov	r2, #1024
 567 000e 0021     		movs	r1, #0
 568 0010 0448     		ldr	r0, .L31+4
 569 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 570              		.loc 1 160 0
 571 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 572              		.loc 1 161 0
 573 001a 00BF     		nop
 574 001c 80BD     		pop	{r7, pc}
 575              	.L32:
 576 001e 00BF     		.align	2
 577              	.L31:
 578 0020 00000000 		.word	uart_string_index
 579 0024 00000000 		.word	uart_received_string
 580              		.cfi_endproc
 581              	.LFE71:
 582              		.size	uart_string_reset, .-uart_string_reset
 583              		.section	.rodata
 584              		.align	2
 585              	.LC6:
 586 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 586      6D207365 
 586      6E742041 
 586      5420636F 
 586      6D6D616E 
 587              		.align	2
 588              	.LC7:
 589 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 589      6D205265 
 589      63656976 
 589      65642065 
 589      78706563 
 590 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 590      616E643A 
 590      2025730A 
 590      52656365 
 590      69766564 
 591 00f1 000000   		.align	2
 592              	.LC8:
 593 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 593      6D207265 
 593      71756972 
 593      65642025 
 593      64207472 
 594 0127 0A00     		.ascii	"\012\000"
 595 0129 000000   		.align	2
 596              	.LC9:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 15


 597 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 597      64206E6F 
 597      74207772 
 597      69746520 
 597      41542063 
 598 0159 00       		.ascii	"\000"
 599              		.section	.text.at_write_command,"ax",%progbits
 600              		.align	2
 601              		.global	at_write_command
 602              		.thumb
 603              		.thumb_func
 604              		.type	at_write_command, %function
 605              	at_write_command:
 606              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 607              		.loc 1 166 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 40
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0000 80B5     		push	{r7, lr}
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 8AB0     		sub	sp, sp, #40
 616              		.cfi_def_cfa_offset 48
 617 0004 00AF     		add	r7, sp, #0
 618              		.cfi_def_cfa_register 7
 619 0006 F860     		str	r0, [r7, #12]
 620 0008 B960     		str	r1, [r7, #8]
 621 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 622              		.loc 1 168 0
 623 000c 0023     		movs	r3, #0
 624 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 625              		.loc 1 170 0
 626 0010 0023     		movs	r3, #0
 627 0012 7B62     		str	r3, [r7, #36]
 628 0014 46E0     		b	.L34
 629              	.L42:
 630              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 631              		.loc 1 173 0
 632 0016 0A23     		movs	r3, #10
 633 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 634              		.loc 1 174 0
 635 001a 7A68     		ldr	r2, [r7, #4]
 636 001c FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 16


 637 001e B2FBF3F3 		udiv	r3, r2, r3
 638 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 639              		.loc 1 177 0
 640 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 641              		.loc 1 180 0
 642 0028 F868     		ldr	r0, [r7, #12]
 643 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 644              		.loc 1 184 0
 645 002e 7B68     		ldr	r3, [r7, #4]
 646 0030 002B     		cmp	r3, #0
 647 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 648              		.loc 1 185 0
 649 0034 FA68     		ldr	r2, [r7, #12]
 650 0036 1F49     		ldr	r1, .L43
 651 0038 0020     		movs	r0, #0
 652 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 653              		.loc 1 186 0
 654 003e 0123     		movs	r3, #1
 655 0040 34E0     		b	.L36
 656              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 657              		.loc 1 190 0
 658 0042 0023     		movs	r3, #0
 659 0044 3B62     		str	r3, [r7, #32]
 660 0046 20E0     		b	.L37
 661              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 662              		.loc 1 191 0
 663 0048 F869     		ldr	r0, [r7, #28]
 664 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 665              		.loc 1 194 0
 666 004e B968     		ldr	r1, [r7, #8]
 667 0050 1948     		ldr	r0, .L43+4
 668 0052 FFF7FEFF 		bl	strstr
 669 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 670              		.loc 1 195 0
 671 0058 7B69     		ldr	r3, [r7, #20]
 672 005a 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 17


 673 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 674              		.loc 1 196 0
 675 005e 7B6A     		ldr	r3, [r7, #36]
 676 0060 002B     		cmp	r3, #0
 677 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 678              		.loc 1 198 0
 679 0064 144B     		ldr	r3, .L43+4
 680 0066 FA68     		ldr	r2, [r7, #12]
 681 0068 1449     		ldr	r1, .L43+8
 682 006a 0020     		movs	r0, #0
 683 006c FFF7FEFF 		bl	printNotif
 684 0070 06E0     		b	.L40
 685              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 686              		.loc 1 200 0
 687 0072 7B6A     		ldr	r3, [r7, #36]
 688 0074 5A1C     		adds	r2, r3, #1
 689 0076 104B     		ldr	r3, .L43+4
 690 0078 1149     		ldr	r1, .L43+12
 691 007a 0120     		movs	r0, #1
 692 007c FFF7FEFF 		bl	printNotif
 693              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 694              		.loc 1 203 0
 695 0080 0123     		movs	r3, #1
 696 0082 13E0     		b	.L36
 697              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 698              		.loc 1 190 0 discriminator 2
 699 0084 3B6A     		ldr	r3, [r7, #32]
 700 0086 0133     		adds	r3, r3, #1
 701 0088 3B62     		str	r3, [r7, #32]
 702              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 703              		.loc 1 190 0 is_stmt 0 discriminator 1
 704 008a 3A6A     		ldr	r2, [r7, #32]
 705 008c BB69     		ldr	r3, [r7, #24]
 706 008e 9A42     		cmp	r2, r3
 707 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 708              		.loc 1 209 0 is_stmt 1 discriminator 2
 709 0092 094B     		ldr	r3, .L43+4
 710 0094 FA68     		ldr	r2, [r7, #12]
 711 0096 0B49     		ldr	r1, .L43+16
 712 0098 0220     		movs	r0, #2
 713 009a FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 18


 714              	.LBE4:
 170:modem.c       ****         
 715              		.loc 1 170 0 discriminator 2
 716 009e 7B6A     		ldr	r3, [r7, #36]
 717 00a0 0133     		adds	r3, r3, #1
 718 00a2 7B62     		str	r3, [r7, #36]
 719              	.L34:
 170:modem.c       ****         
 720              		.loc 1 170 0 is_stmt 0 discriminator 1
 721 00a4 7B6A     		ldr	r3, [r7, #36]
 722 00a6 022B     		cmp	r3, #2
 723 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 724              		.loc 1 214 0 is_stmt 1
 725 00aa 0023     		movs	r3, #0
 726              	.L36:
 215:modem.c       **** }
 727              		.loc 1 215 0
 728 00ac 1846     		mov	r0, r3
 729 00ae 2837     		adds	r7, r7, #40
 730              		.cfi_def_cfa_offset 8
 731 00b0 BD46     		mov	sp, r7
 732              		.cfi_def_cfa_register 13
 733              		@ sp needed
 734 00b2 80BD     		pop	{r7, pc}
 735              	.L44:
 736              		.align	2
 737              	.L43:
 738 00b4 78000000 		.word	.LC6
 739 00b8 00000000 		.word	uart_received_string
 740 00bc A4000000 		.word	.LC7
 741 00c0 F4000000 		.word	.LC8
 742 00c4 2C010000 		.word	.LC9
 743              		.cfi_endproc
 744              	.LFE72:
 745              		.size	at_write_command, .-at_write_command
 746              		.section	.rodata
 747 015a 0000     		.align	2
 748              	.LC10:
 749 015c 54455354 		.ascii	"TEST_MODEM\000"
 749      5F4D4F44 
 749      454D00
 750 0167 00       		.align	2
 751              	.LC11:
 752 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 752      65706F6E 
 752      73652066 
 752      726F6D20 
 752      6D6F6465 
 753 017f 00       		.align	2
 754              	.LC12:
 755 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 755      6D20636F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 19


 755      6E6E6563 
 755      74656420 
 755      746F206E 
 756              		.section	.text.modem_test,"ax",%progbits
 757              		.align	2
 758              		.global	modem_test
 759              		.thumb
 760              		.thumb_func
 761              		.type	modem_test, %function
 762              	modem_test:
 763              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 764              		.loc 1 218 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 408
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0000 B0B5     		push	{r4, r5, r7, lr}
 769              		.cfi_def_cfa_offset 16
 770              		.cfi_offset 4, -16
 771              		.cfi_offset 5, -12
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 0002 E6B0     		sub	sp, sp, #408
 775              		.cfi_def_cfa_offset 424
 776 0004 00AF     		add	r7, sp, #0
 777              		.cfi_def_cfa_register 7
 778 0006 3B1D     		adds	r3, r7, #4
 779 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 780              		.loc 1 221 0
 781 000a 07F10C03 		add	r3, r7, #12
 782 000e 0022     		movs	r2, #0
 783 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 784              		.loc 1 223 0
 785 0014 07F10C03 		add	r3, r7, #12
 786 0018 364A     		ldr	r2, .L53
 787 001a 07CA     		ldmia	r2, {r0, r1, r2}
 788 001c 03C3     		stmia	r3!, {r0, r1}
 789 001e 1A80     		strh	r2, [r3]	@ movhi
 790 0020 0233     		adds	r3, r3, #2
 791 0022 120C     		lsrs	r2, r2, #16
 792 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 793              		.loc 1 224 0
 794 0026 07F10C03 		add	r3, r7, #12
 795 002a 8133     		adds	r3, r3, #129
 796 002c 324A     		ldr	r2, .L53+4
 797 002e 1C46     		mov	r4, r3
 798 0030 1546     		mov	r5, r2
 799 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 800 0034 2060     		str	r0, [r4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 20


 801 0036 6160     		str	r1, [r4, #4]	@ unaligned
 802 0038 A260     		str	r2, [r4, #8]	@ unaligned
 803 003a E360     		str	r3, [r4, #12]	@ unaligned
 804 003c 2868     		ldr	r0, [r5]	@ unaligned
 805 003e 2061     		str	r0, [r4, #16]	@ unaligned
 806 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 807 0042 AA79     		ldrb	r2, [r5, #6]
 808 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 809 0046 1346     		mov	r3, r2
 810 0048 A375     		strb	r3, [r4, #22]
 811              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 812              		.loc 1 227 0
 813 004a 0023     		movs	r3, #0
 814 004c C7F89431 		str	r3, [r7, #404]
 815 0050 3AE0     		b	.L46
 816              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 817              		.loc 1 229 0
 818 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 819              		.loc 1 231 0
 820 0056 FFF7FEFF 		bl	modem_get_state
 821 005a 0346     		mov	r3, r0
 822 005c 002B     		cmp	r3, #0
 823 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 824              		.loc 1 233 0
 825 0060 FFF7FEFF 		bl	modem_power_up
 826 0064 27E0     		b	.L48
 827              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 828              		.loc 1 236 0
 829 0066 FFF7FEFF 		bl	modem_get_state
 830 006a 0346     		mov	r3, r0
 831 006c 042B     		cmp	r3, #4
 832 006e 22D1     		bne	.L48
 833              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 834              		.loc 1 240 0
 835 0070 FFF7FEFF 		bl	modem_get_network_time
 836 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 837              		.loc 1 241 0
 838 0078 D7F89031 		ldr	r3, [r7, #400]
 839 007c 002B     		cmp	r3, #0
 840 007e 03D0     		beq	.L49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 21


 242:modem.c       ****             setTime(network_time); // Set the system time 
 841              		.loc 1 242 0
 842 0080 D7F89001 		ldr	r0, [r7, #400]
 843 0084 FFF7FEFF 		bl	setTime
 844              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 845              		.loc 1 245 0
 846 0088 07F10C03 		add	r3, r7, #12
 847 008c 8133     		adds	r3, r3, #129
 848 008e 1B4A     		ldr	r2, .L53+8
 849 0090 1D46     		mov	r5, r3
 850 0092 1446     		mov	r4, r2
 851 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 852 0096 2860     		str	r0, [r5]	@ unaligned
 853 0098 6960     		str	r1, [r5, #4]	@ unaligned
 854 009a AA60     		str	r2, [r5, #8]	@ unaligned
 855 009c EB60     		str	r3, [r5, #12]	@ unaligned
 856 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 857 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 858 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 859 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 860              		.loc 1 246 0
 861 00a6 07F10C03 		add	r3, r7, #12
 862 00aa 0122     		movs	r2, #1
 863 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 864              		.loc 1 248 0
 865 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 866              		.loc 1 249 0
 867 00b4 0CE0     		b	.L50
 868              	.L48:
 869              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 870              		.loc 1 252 0 discriminator 2
 871 00b6 4FF47A70 		mov	r0, #1000
 872 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 873              		.loc 1 227 0 discriminator 2
 874 00be D7F89431 		ldr	r3, [r7, #404]
 875 00c2 0133     		adds	r3, r3, #1
 876 00c4 C7F89431 		str	r3, [r7, #404]
 877              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 878              		.loc 1 227 0 is_stmt 0 discriminator 1
 879 00c8 D7F89431 		ldr	r3, [r7, #404]
 880 00cc 3B2B     		cmp	r3, #59
 881 00ce C0DD     		ble	.L51
 882              	.L50:
 883              	.LBE5:
 253:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 22


 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 884              		.loc 1 256 0 is_stmt 1
 885 00d0 3B1D     		adds	r3, r7, #4
 886 00d2 1A68     		ldr	r2, [r3]
 887 00d4 07F10C03 		add	r3, r7, #12
 888 00d8 1046     		mov	r0, r2
 889 00da 1946     		mov	r1, r3
 890 00dc 40F28113 		movw	r3, #385
 891 00e0 1A46     		mov	r2, r3
 892 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 893              		.loc 1 257 0
 894 00e6 3B1D     		adds	r3, r7, #4
 895 00e8 1868     		ldr	r0, [r3]
 896 00ea 07F5CC77 		add	r7, r7, #408
 897              		.cfi_def_cfa_offset 16
 898 00ee BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 00f0 B0BD     		pop	{r4, r5, r7, pc}
 902              	.L54:
 903 00f2 00BF     		.align	2
 904              	.L53:
 905 00f4 5C010000 		.word	.LC10
 906 00f8 68010000 		.word	.LC11
 907 00fc 80010000 		.word	.LC12
 908              		.cfi_endproc
 909              	.LFE73:
 910              		.size	modem_test, .-modem_test
 911              		.section	.text.extract_string,"ax",%progbits
 912              		.align	2
 913              		.global	extract_string
 914              		.thumb
 915              		.thumb_func
 916              		.type	extract_string, %function
 917              	extract_string:
 918              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 919              		.loc 1 260 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 24
 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 86B0     		sub	sp, sp, #24
 928              		.cfi_def_cfa_offset 32
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 F860     		str	r0, [r7, #12]
 932 0008 B960     		str	r1, [r7, #8]
 933 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 23


 934 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 935              		.loc 1 266 0
 936 000e B968     		ldr	r1, [r7, #8]
 937 0010 F868     		ldr	r0, [r7, #12]
 938 0012 FFF7FEFF 		bl	strstr
 939 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 940              		.loc 1 267 0
 941 0018 7B69     		ldr	r3, [r7, #20]
 942 001a 002B     		cmp	r3, #0
 943 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 944              		.loc 1 269 0
 945 001e FB68     		ldr	r3, [r7, #12]
 946 0020 7B61     		str	r3, [r7, #20]
 947              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 948              		.loc 1 272 0
 949 0022 B868     		ldr	r0, [r7, #8]
 950 0024 FFF7FEFF 		bl	strlen
 951 0028 0246     		mov	r2, r0
 952 002a 7B69     		ldr	r3, [r7, #20]
 953 002c 1344     		add	r3, r3, r2
 954 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 955              		.loc 1 277 0
 956 0030 7968     		ldr	r1, [r7, #4]
 957 0032 7869     		ldr	r0, [r7, #20]
 958 0034 FFF7FEFF 		bl	strstr
 959 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 960              		.loc 1 278 0
 961 003a 3B69     		ldr	r3, [r7, #16]
 962 003c 002B     		cmp	r3, #0
 963 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 964              		.loc 1 280 0
 965 0040 F868     		ldr	r0, [r7, #12]
 966 0042 FFF7FEFF 		bl	strlen
 967 0046 0246     		mov	r2, r0
 968 0048 FB68     		ldr	r3, [r7, #12]
 969 004a 1344     		add	r3, r3, r2
 970 004c 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 24


 971              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 972              		.loc 1 284 0
 973 004e 3A69     		ldr	r2, [r7, #16]
 974 0050 7B69     		ldr	r3, [r7, #20]
 975 0052 D31A     		subs	r3, r2, r3
 976 0054 1A46     		mov	r2, r3
 977 0056 7969     		ldr	r1, [r7, #20]
 978 0058 3868     		ldr	r0, [r7]
 979 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 980              		.loc 1 285 0
 981 005e 3A69     		ldr	r2, [r7, #16]
 982 0060 7B69     		ldr	r3, [r7, #20]
 983 0062 D31A     		subs	r3, r2, r3
 984 0064 1A46     		mov	r2, r3
 985 0066 3B68     		ldr	r3, [r7]
 986 0068 1344     		add	r3, r3, r2
 987 006a 0022     		movs	r2, #0
 988 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 989              		.loc 1 286 0
 990 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 991              		.loc 1 288 0
 992 0070 1846     		mov	r0, r3
 993 0072 1837     		adds	r7, r7, #24
 994              		.cfi_def_cfa_offset 8
 995 0074 BD46     		mov	sp, r7
 996              		.cfi_def_cfa_register 13
 997              		@ sp needed
 998 0076 80BD     		pop	{r7, pc}
 999              		.cfi_endproc
 1000              	.LFE74:
 1001              		.size	extract_string, .-extract_string
 1002              		.section	.rodata
 1003              		.align	2
 1004              	.LC13:
 1005 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1005      20746F20 
 1005      636F6E6E 
 1005      65637420 
 1005      746F206E 
 1006 01c3 00       		.align	2
 1007              	.LC14:
 1008 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1008      6D207469 
 1008      6D656420 
 1008      6F757420 
 1008      6F6E206E 
 1009 01e7 00       		.align	2
 1010              	.LC15:
 1011 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 25


 1011      69726564 
 1011      20495020 
 1011      61646472 
 1011      6573733A 
 1012              		.align	2
 1013              	.LC16:
 1014 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1014      6D207469 
 1014      6D656420 
 1014      6F757420 
 1014      6F6E2049 
 1015              		.section	.text.modem_process_tasks,"ax",%progbits
 1016              		.align	2
 1017              		.global	modem_process_tasks
 1018              		.thumb
 1019              		.thumb_func
 1020              		.type	modem_process_tasks, %function
 1021              	modem_process_tasks:
 1022              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1023              		.loc 1 291 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 8
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027 0000 80B5     		push	{r7, lr}
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 7, -8
 1030              		.cfi_offset 14, -4
 1031 0002 82B0     		sub	sp, sp, #8
 1032              		.cfi_def_cfa_offset 16
 1033 0004 00AF     		add	r7, sp, #0
 1034              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1035              		.loc 1 293 0
 1036 0006 534B     		ldr	r3, .L75
 1037 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1038 000a 012B     		cmp	r3, #1
 1039 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1040              		.loc 1 295 0
 1041 000e FFF7FEFF 		bl	getTimeStamp
 1042 0012 0246     		mov	r2, r0
 1043 0014 504B     		ldr	r3, .L75+4
 1044 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1045              		.loc 1 296 0
 1046 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1047              		.loc 1 297 0
 1048 001c 4D4B     		ldr	r3, .L75
 1049 001e 0222     		movs	r2, #2
 1050 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 26


 1051              		.loc 1 298 0
 1052 0022 0123     		movs	r3, #1
 1053 0024 92E0     		b	.L61
 1054              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1055              		.loc 1 302 0
 1056 0026 4B4B     		ldr	r3, .L75
 1057 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1058 002a 022B     		cmp	r3, #2
 1059 002c 5FD1     		bne	.L62
 1060              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1061              		.loc 1 305 0
 1062 002e 0023     		movs	r3, #0
 1063 0030 FB71     		strb	r3, [r7, #7]
 1064 0032 2BE0     		b	.L63
 1065              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1066              		.loc 1 307 0
 1067 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1068              		.loc 1 309 0
 1069 0038 484B     		ldr	r3, .L75+8
 1070 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1071 003c 83F00103 		eor	r3, r3, #1
 1072 0040 DBB2     		uxtb	r3, r3
 1073 0042 002B     		cmp	r3, #0
 1074 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1075              		.loc 1 312 0
 1076 0046 464B     		ldr	r3, .L75+12
 1077 0048 5B69     		ldr	r3, [r3, #20]
 1078 004a 1A2B     		cmp	r3, #26
 1079 004c 03DD     		ble	.L64
 1080              		.loc 1 312 0 is_stmt 0 discriminator 1
 1081 004e 444B     		ldr	r3, .L75+12
 1082 0050 5B69     		ldr	r3, [r3, #20]
 1083 0052 FF2B     		cmp	r3, #255
 1084 0054 1ED1     		bne	.L74
 1085              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1086              		.loc 1 317 0 is_stmt 1
 1087 0056 414B     		ldr	r3, .L75+8
 1088 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 27


 1089 005a 002B     		cmp	r3, #0
 1090 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1091              		.loc 1 320 0
 1092 005e 404B     		ldr	r3, .L75+12
 1093 0060 9B68     		ldr	r3, [r3, #8]
 1094 0062 242B     		cmp	r3, #36
 1095 0064 03DD     		ble	.L67
 1096              		.loc 1 320 0 is_stmt 0 discriminator 1
 1097 0066 3E4B     		ldr	r3, .L75+12
 1098 0068 9B68     		ldr	r3, [r3, #8]
 1099 006a FF2B     		cmp	r3, #255
 1100 006c 13D1     		bne	.L65
 1101              	.L67:
 1102              		.loc 1 320 0 discriminator 3
 1103 006e 3C4B     		ldr	r3, .L75+12
 1104 0070 5B69     		ldr	r3, [r3, #20]
 1105 0072 1A2B     		cmp	r3, #26
 1106 0074 03DD     		ble	.L66
 1107              		.loc 1 320 0 discriminator 4
 1108 0076 3A4B     		ldr	r3, .L75+12
 1109 0078 5B69     		ldr	r3, [r3, #20]
 1110 007a FF2B     		cmp	r3, #255
 1111 007c 0BD1     		bne	.L65
 1112              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1113              		.loc 1 325 0 is_stmt 1 discriminator 2
 1114 007e 4FF47A70 		mov	r0, #1000
 1115 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1116              		.loc 1 305 0 discriminator 2
 1117 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1118 0088 0133     		adds	r3, r3, #1
 1119 008a FB71     		strb	r3, [r7, #7]
 1120              	.L63:
 305:modem.c       ****             // Get cell network stats
 1121              		.loc 1 305 0 is_stmt 0 discriminator 1
 1122 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1123 008e 1D2B     		cmp	r3, #29
 1124 0090 D0D9     		bls	.L68
 1125 0092 00E0     		b	.L65
 1126              	.L74:
 313:modem.c       ****                 }
 1127              		.loc 1 313 0 is_stmt 1
 1128 0094 00BF     		nop
 1129              	.L65:
 1130              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 28


 1131              		.loc 1 329 0
 1132 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1133 009a 0346     		mov	r3, r0
 1134 009c 002B     		cmp	r3, #0
 1135 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1136              		.loc 1 331 0
 1137 00a0 FFF7FEFF 		bl	getTimeStamp
 1138 00a4 0246     		mov	r2, r0
 1139 00a6 2C4B     		ldr	r3, .L75+4
 1140 00a8 1B68     		ldr	r3, [r3]
 1141 00aa D31A     		subs	r3, r2, r3
 1142 00ac 2C4A     		ldr	r2, .L75+12
 1143 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1144              		.loc 1 332 0
 1145 00b0 2B4B     		ldr	r3, .L75+12
 1146 00b2 9B69     		ldr	r3, [r3, #24]
 1147 00b4 1A46     		mov	r2, r3
 1148 00b6 2B49     		ldr	r1, .L75+16
 1149 00b8 0020     		movs	r0, #0
 1150 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1151              		.loc 1 334 0
 1152 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1153              		.loc 1 335 0
 1154 00c2 244B     		ldr	r3, .L75
 1155 00c4 0322     		movs	r2, #3
 1156 00c6 1A70     		strb	r2, [r3]
 1157              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1158              		.loc 1 339 0
 1159 00c8 FFF7FEFF 		bl	getTimeStamp
 1160 00cc 0246     		mov	r2, r0
 1161 00ce 224B     		ldr	r3, .L75+4
 1162 00d0 1B68     		ldr	r3, [r3]
 1163 00d2 D31A     		subs	r3, r2, r3
 1164 00d4 B42B     		cmp	r3, #180
 1165 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1166              		.loc 1 340 0
 1167 00d8 1E4B     		ldr	r3, .L75
 1168 00da 0022     		movs	r2, #0
 1169 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1170              		.loc 1 341 0
 1171 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1172              		.loc 1 342 0
 1173 00e2 2149     		ldr	r1, .L75+20
 1174 00e4 0220     		movs	r0, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 29


 1175 00e6 FFF7FEFF 		bl	printNotif
 1176              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1177              		.loc 1 345 0
 1178 00ea 0023     		movs	r3, #0
 1179 00ec 2EE0     		b	.L61
 1180              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1181              		.loc 1 348 0
 1182 00ee 194B     		ldr	r3, .L75
 1183 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1184 00f2 032B     		cmp	r3, #3
 1185 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1186              		.loc 1 350 0
 1187 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1188 00fa 0346     		mov	r3, r0
 1189 00fc 002B     		cmp	r3, #0
 1190 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1191              		.loc 1 351 0
 1192 0100 144B     		ldr	r3, .L75
 1193 0102 0422     		movs	r2, #4
 1194 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1195              		.loc 1 353 0
 1196 0106 FFF7FEFF 		bl	getTimeStamp
 1197 010a 0246     		mov	r2, r0
 1198 010c 124B     		ldr	r3, .L75+4
 1199 010e 1B68     		ldr	r3, [r3]
 1200 0110 D31A     		subs	r3, r2, r3
 1201 0112 134A     		ldr	r2, .L75+12
 1202 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1203              		.loc 1 354 0
 1204 0116 124B     		ldr	r3, .L75+12
 1205 0118 DB69     		ldr	r3, [r3, #28]
 1206 011a 1A46     		mov	r2, r3
 1207 011c 1349     		ldr	r1, .L75+24
 1208 011e 0020     		movs	r0, #0
 1209 0120 FFF7FEFF 		bl	printNotif
 1210              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1211              		.loc 1 359 0
 1212 0124 FFF7FEFF 		bl	getTimeStamp
 1213 0128 0246     		mov	r2, r0
 1214 012a 0B4B     		ldr	r3, .L75+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 30


 1215 012c 1B68     		ldr	r3, [r3]
 1216 012e D31A     		subs	r3, r2, r3
 1217 0130 E62B     		cmp	r3, #230
 1218 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1219              		.loc 1 360 0
 1220 0134 074B     		ldr	r3, .L75
 1221 0136 0022     		movs	r2, #0
 1222 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1223              		.loc 1 361 0
 1224 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1225              		.loc 1 362 0
 1226 013e 0C49     		ldr	r1, .L75+28
 1227 0140 0220     		movs	r0, #2
 1228 0142 FFF7FEFF 		bl	printNotif
 1229              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1230              		.loc 1 365 0
 1231 0146 0023     		movs	r3, #0
 1232 0148 00E0     		b	.L61
 1233              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1234              		.loc 1 368 0
 1235 014a 0023     		movs	r3, #0
 1236              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1237              		.loc 1 370 0
 1238 014c 1846     		mov	r0, r3
 1239 014e 0837     		adds	r7, r7, #8
 1240              		.cfi_def_cfa_offset 8
 1241 0150 BD46     		mov	sp, r7
 1242              		.cfi_def_cfa_register 13
 1243              		@ sp needed
 1244 0152 80BD     		pop	{r7, pc}
 1245              	.L76:
 1246              		.align	2
 1247              	.L75:
 1248 0154 00000000 		.word	modem_state
 1249 0158 00000000 		.word	modem_start_time_stamp
 1250 015c 00000000 		.word	updatable_parameters
 1251 0160 00000000 		.word	modem_stats
 1252 0164 9C010000 		.word	.LC13
 1253 0168 C4010000 		.word	.LC14
 1254 016c E8010000 		.word	.LC15
 1255 0170 08020000 		.word	.LC16
 1256              		.cfi_endproc
 1257              	.LFE75:
 1258              		.size	modem_process_tasks, .-modem_process_tasks
 1259              		.section	.rodata
 1260 022f 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 31


 1261              	.LC17:
 1262 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1262      6B696E67 
 1262      2041542B 
 1262      43524547 
 1262      3F00
 1263 0242 0000     		.align	2
 1264              	.LC18:
 1265 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1265      5245473F 
 1265      0D00
 1266 024e 0000     		.align	2
 1267              	.LC19:
 1268 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1268      61637469 
 1268      6E672073 
 1268      7472696E 
 1268      67204154 
 1269 026b 00       		.align	2
 1270              	.LC20:
 1271 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1271      5F726563 
 1271      65697665 
 1271      645F7374 
 1271      72696E67 
 1272 0285 000000   		.align	2
 1273              	.LC21:
 1274 0288 0D00     		.ascii	"\015\000"
 1275 028a 0000     		.align	2
 1276              	.LC22:
 1277 028c 3A2000   		.ascii	": \000"
 1278 028f 00       		.align	2
 1279              	.LC23:
 1280 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1280      73746572 
 1280      65642074 
 1280      6F206E65 
 1280      74776F72 
 1281              		.align	2
 1282              	.LC24:
 1283 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1283      20657874 
 1283      72616369 
 1283      6E672073 
 1283      7472696E 
 1284 02cf 00       		.align	2
 1285              	.LC25:
 1286 02d0 302C3100 		.ascii	"0,1\000"
 1287              		.align	2
 1288              	.LC26:
 1289 02d4 302C3500 		.ascii	"0,5\000"
 1290              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1291              		.align	2
 1292              		.global	is_connected_to_cell_network
 1293              		.thumb
 1294              		.thumb_func
 1295              		.type	is_connected_to_cell_network, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 32


 1296              	is_connected_to_cell_network:
 1297              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1298              		.loc 1 373 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 16
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302 0000 80B5     		push	{r7, lr}
 1303              		.cfi_def_cfa_offset 8
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 84B0     		sub	sp, sp, #16
 1307              		.cfi_def_cfa_offset 24
 1308 0004 00AF     		add	r7, sp, #0
 1309              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1310              		.loc 1 375 0
 1311 0006 2049     		ldr	r1, .L82
 1312 0008 0020     		movs	r0, #0
 1313 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1314              		.loc 1 377 0
 1315 000e 4FF4FA62 		mov	r2, #2000
 1316 0012 1E49     		ldr	r1, .L82+4
 1317 0014 1E48     		ldr	r0, .L82+8
 1318 0016 FFF7FEFF 		bl	at_write_command
 1319 001a 0346     		mov	r3, r0
 1320 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1321              		.loc 1 379 0
 1322 001e 1D49     		ldr	r1, .L82+12
 1323 0020 0020     		movs	r0, #0
 1324 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1325              		.loc 1 380 0
 1326 0026 1C4A     		ldr	r2, .L82+16
 1327 0028 1C49     		ldr	r1, .L82+20
 1328 002a 0020     		movs	r0, #0
 1329 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1330              		.loc 1 383 0
 1331 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1332 0032 002B     		cmp	r3, #0
 1333 0034 23D0     		beq	.L78
 1334              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1335              		.loc 1 386 0
 1336 0036 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 33


 1337 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1338              		.loc 1 388 0
 1339 003a 3B1D     		adds	r3, r7, #4
 1340 003c 184A     		ldr	r2, .L82+24
 1341 003e 1949     		ldr	r1, .L82+28
 1342 0040 1548     		ldr	r0, .L82+16
 1343 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1344              		.loc 1 389 0
 1345 0046 3B1D     		adds	r3, r7, #4
 1346 0048 1A46     		mov	r2, r3
 1347 004a 1749     		ldr	r1, .L82+32
 1348 004c 0020     		movs	r0, #0
 1349 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1350              		.loc 1 390 0
 1351 0052 1649     		ldr	r1, .L82+36
 1352 0054 0020     		movs	r0, #0
 1353 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1354              		.loc 1 393 0
 1355 005a 3B1D     		adds	r3, r7, #4
 1356 005c 1449     		ldr	r1, .L82+40
 1357 005e 1846     		mov	r0, r3
 1358 0060 FFF7FEFF 		bl	strstr
 1359 0064 0346     		mov	r3, r0
 1360 0066 002B     		cmp	r3, #0
 1361 0068 07D1     		bne	.L79
 1362              		.loc 1 393 0 is_stmt 0 discriminator 1
 1363 006a 3B1D     		adds	r3, r7, #4
 1364 006c 1149     		ldr	r1, .L82+44
 1365 006e 1846     		mov	r0, r3
 1366 0070 FFF7FEFF 		bl	strstr
 1367 0074 0346     		mov	r3, r0
 1368 0076 002B     		cmp	r3, #0
 1369 0078 01D0     		beq	.L78
 1370              	.L79:
 394:modem.c       ****             return 1u;
 1371              		.loc 1 394 0 is_stmt 1
 1372 007a 0123     		movs	r3, #1
 1373 007c 00E0     		b	.L81
 1374              	.L78:
 1375              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1376              		.loc 1 398 0
 1377 007e 0023     		movs	r3, #0
 1378              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1379              		.loc 1 400 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 34


 1380 0080 1846     		mov	r0, r3
 1381 0082 1037     		adds	r7, r7, #16
 1382              		.cfi_def_cfa_offset 8
 1383 0084 BD46     		mov	sp, r7
 1384              		.cfi_def_cfa_register 13
 1385              		@ sp needed
 1386 0086 80BD     		pop	{r7, pc}
 1387              	.L83:
 1388              		.align	2
 1389              	.L82:
 1390 0088 30020000 		.word	.LC17
 1391 008c 00000000 		.word	.LC0
 1392 0090 44020000 		.word	.LC18
 1393 0094 50020000 		.word	.LC19
 1394 0098 00000000 		.word	uart_received_string
 1395 009c 6C020000 		.word	.LC20
 1396 00a0 88020000 		.word	.LC21
 1397 00a4 8C020000 		.word	.LC22
 1398 00a8 90020000 		.word	.LC23
 1399 00ac B0020000 		.word	.LC24
 1400 00b0 D0020000 		.word	.LC25
 1401 00b4 D4020000 		.word	.LC26
 1402              		.cfi_endproc
 1403              	.LFE76:
 1404              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1405              		.section	.rodata
 1406              		.align	2
 1407              	.LC27:
 1408 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1408      47414354 
 1408      3D312C31 
 1408      0D0A00
 1409              		.section	.text.set_up_internet_connection,"ax",%progbits
 1410              		.align	2
 1411              		.global	set_up_internet_connection
 1412              		.thumb
 1413              		.thumb_func
 1414              		.type	set_up_internet_connection, %function
 1415              	set_up_internet_connection:
 1416              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1417              		.loc 1 403 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 0000 80B5     		push	{r7, lr}
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 7, -8
 1424              		.cfi_offset 14, -4
 1425 0002 00AF     		add	r7, sp, #0
 1426              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 35


 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1427              		.loc 1 414 0
 1428 0004 4FF47A72 		mov	r2, #1000
 1429 0008 0249     		ldr	r1, .L85
 1430 000a 0348     		ldr	r0, .L85+4
 1431 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1432              		.loc 1 416 0
 1433 0010 00BF     		nop
 1434 0012 80BD     		pop	{r7, pc}
 1435              	.L86:
 1436              		.align	2
 1437              	.L85:
 1438 0014 00000000 		.word	.LC0
 1439 0018 D8020000 		.word	.LC27
 1440              		.cfi_endproc
 1441              	.LFE77:
 1442              		.size	set_up_internet_connection, .-set_up_internet_connection
 1443              		.section	.rodata
 1444 02e7 00       		.align	2
 1445              	.LC28:
 1446 02e8 312C3100 		.ascii	"1,1\000"
 1447              		.align	2
 1448              	.LC29:
 1449 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1449      47414354 
 1449      3F0D00
 1450              		.section	.text.is_connected_to_internet,"ax",%progbits
 1451              		.align	2
 1452              		.global	is_connected_to_internet
 1453              		.thumb
 1454              		.thumb_func
 1455              		.type	is_connected_to_internet, %function
 1456              	is_connected_to_internet:
 1457              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1458              		.loc 1 419 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462 0000 80B5     		push	{r7, lr}
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 00AF     		add	r7, sp, #0
 1467              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 36


 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1468              		.loc 1 424 0
 1469 0004 4FF4FA62 		mov	r2, #2000
 1470 0008 0549     		ldr	r1, .L90
 1471 000a 0648     		ldr	r0, .L90+4
 1472 000c FFF7FEFF 		bl	at_write_command
 1473 0010 0346     		mov	r3, r0
 1474 0012 002B     		cmp	r3, #0
 1475 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1476              		.loc 1 425 0
 1477 0016 0123     		movs	r3, #1
 1478 0018 00E0     		b	.L89
 1479              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1480              		.loc 1 427 0
 1481 001a 0023     		movs	r3, #0
 1482              	.L89:
 428:modem.c       **** }
 1483              		.loc 1 428 0
 1484 001c 1846     		mov	r0, r3
 1485 001e 80BD     		pop	{r7, pc}
 1486              	.L91:
 1487              		.align	2
 1488              	.L90:
 1489 0020 E8020000 		.word	.LC28
 1490 0024 EC020000 		.word	.LC29
 1491              		.cfi_endproc
 1492              	.LFE78:
 1493              		.size	is_connected_to_internet, .-is_connected_to_internet
 1494              		.section	.rodata
 1495 02f7 00       		.align	2
 1496              	.LC30:
 1497 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1497      4553510D 
 1497      00
 1498 0301 000000   		.align	2
 1499              	.LC31:
 1500 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1500      4553513A 
 1500      2025642C 
 1500      25642C25 
 1500      642C2564 
 1501              		.section	.text.get_cell_network_stats,"ax",%progbits
 1502              		.align	2
 1503              		.global	get_cell_network_stats
 1504              		.thumb
 1505              		.thumb_func
 1506              		.type	get_cell_network_stats, %function
 1507              	get_cell_network_stats:
 1508              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1509              		.loc 1 430 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 37


 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 8
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 86B0     		sub	sp, sp, #24
 1518              		.cfi_def_cfa_offset 32
 1519 0004 04AF     		add	r7, sp, #16
 1520              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1521              		.loc 1 432 0
 1522 0006 154B     		ldr	r3, .L93
 1523 0008 FF22     		movs	r2, #255
 1524 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1525              		.loc 1 433 0
 1526 000c 134B     		ldr	r3, .L93
 1527 000e FF22     		movs	r2, #255
 1528 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1529              		.loc 1 434 0
 1530 0012 124B     		ldr	r3, .L93
 1531 0014 FF22     		movs	r2, #255
 1532 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1533              		.loc 1 435 0
 1534 0018 104B     		ldr	r3, .L93
 1535 001a FF22     		movs	r2, #255
 1536 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1537              		.loc 1 436 0
 1538 001e 0F4B     		ldr	r3, .L93
 1539 0020 FF22     		movs	r2, #255
 1540 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1541              		.loc 1 437 0
 1542 0024 0D4B     		ldr	r3, .L93
 1543 0026 FF22     		movs	r2, #255
 1544 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1545              		.loc 1 440 0
 1546 002a 4FF4FA62 		mov	r2, #2000
 1547 002e 0C49     		ldr	r1, .L93+4
 1548 0030 0C48     		ldr	r0, .L93+8
 1549 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1550              		.loc 1 443 0
 1551 0036 0C4B     		ldr	r3, .L93+12
 1552 0038 0393     		str	r3, [sp, #12]
 1553 003a 0C4B     		ldr	r3, .L93+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 38


 1554 003c 0293     		str	r3, [sp, #8]
 1555 003e 0C4B     		ldr	r3, .L93+20
 1556 0040 0193     		str	r3, [sp, #4]
 1557 0042 0C4B     		ldr	r3, .L93+24
 1558 0044 0093     		str	r3, [sp]
 1559 0046 0C4B     		ldr	r3, .L93+28
 1560 0048 044A     		ldr	r2, .L93
 1561 004a 0C49     		ldr	r1, .L93+32
 1562 004c 0C48     		ldr	r0, .L93+36
 1563 004e FFF7FEFF 		bl	sscanf
 1564 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1565              		.loc 1 458 0
 1566 0054 00BF     		nop
 1567 0056 0837     		adds	r7, r7, #8
 1568              		.cfi_def_cfa_offset 8
 1569 0058 BD46     		mov	sp, r7
 1570              		.cfi_def_cfa_register 13
 1571              		@ sp needed
 1572 005a 80BD     		pop	{r7, pc}
 1573              	.L94:
 1574              		.align	2
 1575              	.L93:
 1576 005c 00000000 		.word	modem_stats
 1577 0060 00000000 		.word	.LC0
 1578 0064 F8020000 		.word	.LC30
 1579 0068 14000000 		.word	modem_stats+20
 1580 006c 10000000 		.word	modem_stats+16
 1581 0070 0C000000 		.word	modem_stats+12
 1582 0074 08000000 		.word	modem_stats+8
 1583 0078 04000000 		.word	modem_stats+4
 1584 007c 04030000 		.word	.LC31
 1585 0080 00000000 		.word	uart_received_string
 1586              		.cfi_endproc
 1587              	.LFE79:
 1588              		.size	get_cell_network_stats, .-get_cell_network_stats
 1589              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1590              		.align	2
 1591              		.global	updatable_parameters_initialize
 1592              		.thumb
 1593              		.thumb_func
 1594              		.type	updatable_parameters_initialize, %function
 1595              	updatable_parameters_initialize:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 39


 1596              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1597              		.loc 1 461 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602 0000 80B4     		push	{r7}
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 7, -4
 1605 0002 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 462:modem.c       ****     //updatable_parameters.node_type = NODE_TYPE_DEPTH;
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1607              		.loc 1 463 0
 1608 0004 094B     		ldr	r3, .L96
 1609 0006 0122     		movs	r2, #1
 1610 0008 1A70     		strb	r2, [r3]
 464:modem.c       ****     //updatable_parameters.measure_time = 1u;
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1611              		.loc 1 465 0
 1612 000a 084B     		ldr	r3, .L96
 1613 000c 0122     		movs	r2, #1
 1614 000e 9A70     		strb	r2, [r3, #2]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1615              		.loc 1 466 0
 1616 0010 064B     		ldr	r3, .L96
 1617 0012 0122     		movs	r2, #1
 1618 0014 DA70     		strb	r2, [r3, #3]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     updatable_parameters.App_LED_freq = 2u; // if turn on, change to higher frequency
 1619              		.loc 1 469 0
 1620 0016 054B     		ldr	r3, .L96
 1621 0018 0222     		movs	r2, #2
 1622 001a 1A71     		strb	r2, [r3, #4]
 470:modem.c       ****     updatable_parameters.Level_Sensor_freq = 3u; 
 1623              		.loc 1 470 0
 1624 001c 034B     		ldr	r3, .L96
 1625 001e 0322     		movs	r2, #3
 1626 0020 5A71     		strb	r2, [r3, #5]
 471:modem.c       **** }
 1627              		.loc 1 471 0
 1628 0022 00BF     		nop
 1629 0024 BD46     		mov	sp, r7
 1630              		.cfi_def_cfa_register 13
 1631              		@ sp needed
 1632 0026 80BC     		pop	{r7}
 1633              		.cfi_restore 7
 1634              		.cfi_def_cfa_offset 0
 1635 0028 7047     		bx	lr
 1636              	.L97:
 1637 002a 00BF     		.align	2
 1638              	.L96:
 1639 002c 00000000 		.word	updatable_parameters
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 40


 1640              		.cfi_endproc
 1641              	.LFE80:
 1642              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1643              		.section	.rodata
 1644 0322 0000     		.align	2
 1645              	.LC32:
 1646 0324 53494D5F 		.ascii	"SIM_Type: \000"
 1646      54797065 
 1646      3A2000
 1647 032f 00       		.align	2
 1648              	.LC33:
 1649 0330 53616D70 		.ascii	"Sample_Freq: \000"
 1649      6C655F46 
 1649      7265713A 
 1649      2000
 1650 033e 0000     		.align	2
 1651              	.LC34:
 1652 0340 5265706F 		.ascii	"Report_Freq: \000"
 1652      72745F46 
 1652      7265713A 
 1652      2000
 1653 034e 0000     		.align	2
 1654              	.LC35:
 1655 0350 44656275 		.ascii	"Debug_Freq: \000"
 1655      675F4672 
 1655      65713A20 
 1655      00
 1656 035d 000000   		.align	2
 1657              	.LC36:
 1658 0360 4170705F 		.ascii	"App_LED: \000"
 1658      4C45443A 
 1658      2000
 1659 036a 0000     		.align	2
 1660              	.LC37:
 1661 036c 4C657665 		.ascii	"Level_Sensor: \000"
 1661      6C5F5365 
 1661      6E736F72 
 1661      3A2000
 1662 037b 00       		.align	2
 1663              	.LC38:
 1664 037c 256400   		.ascii	"%d\000"
 1665 037f 00       		.align	2
 1666              	.LC39:
 1667 0380 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1667      74797065 
 1667      20636861 
 1667      6E676564 
 1667      20746F3A 
 1668 039a 0000     		.align	2
 1669              	.LC40:
 1670 039c 436F756C 		.ascii	"Could not change SIM type.\000"
 1670      64206E6F 
 1670      74206368 
 1670      616E6765 
 1670      2053494D 
 1671 03b7 00       		.align	2
 1672              	.LC41:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 41


 1673 03b8 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1673      64206E6F 
 1673      74207061 
 1673      72736520 
 1673      6E657720 
 1674 03e6 0000     		.align	2
 1675              	.LC42:
 1676 03e8 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1676      7274696E 
 1676      67206672 
 1676      65717565 
 1676      6E637920 
 1677 040d 000000   		.align	2
 1678              	.LC43:
 1679 0410 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1679      64206E6F 
 1679      74207061 
 1679      72736520 
 1679      6E657720 
 1680 043f 00       		.align	2
 1681              	.LC44:
 1682 0440 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1682      67207072 
 1682      696E7469 
 1682      6E672066 
 1682      72657175 
 1683 046a 0000     		.align	2
 1684              	.LC45:
 1685 046c 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1685      64206E6F 
 1685      74207061 
 1685      72736520 
 1685      6E657720 
 1686 049b 00       		.align	2
 1687              	.LC46:
 1688 049c 46726571 		.ascii	"Freq: \000"
 1688      3A2000
 1689 04a3 00       		.align	2
 1690              	.LC47:
 1691 04a4 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1691      4C454420 
 1691      66726571 
 1691      75656E63 
 1691      79206368 
 1692 04c7 00       		.align	2
 1693              	.LC48:
 1694 04c8 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1694      64206E6F 
 1694      74207061 
 1694      72736520 
 1694      6E657720 
 1695 04f5 000000   		.align	2
 1696              	.LC49:
 1697 04f8 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1697      70705F4C 
 1697      45442066 
 1697      72657175 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 42


 1697      656E6379 
 1698 051e 0000     		.align	2
 1699              	.LC50:
 1700 0520 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1700      6C5F5365 
 1700      6E736F72 
 1700      20667265 
 1700      7175656E 
 1701              		.align	2
 1702              	.LC51:
 1703 0548 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1703      64206E6F 
 1703      74207061 
 1703      72736520 
 1703      6E657720 
 1704 057a 0000     		.align	2
 1705              	.LC52:
 1706 057c 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1706      6576656C 
 1706      5F53656E 
 1706      736F7220 
 1706      66726571 
 1707              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1708              		.align	2
 1709              		.global	get_updated_parameters_from_malcom
 1710              		.thumb
 1711              		.thumb_func
 1712              		.type	get_updated_parameters_from_malcom, %function
 1713              	get_updated_parameters_from_malcom:
 1714              	.LFB81:
 472:modem.c       **** 
 473:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 474:modem.c       **** void get_updated_parameters_from_malcom(){
 1715              		.loc 1 474 0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 384
 1718              		@ frame_needed = 1, uses_anonymous_args = 0
 1719 0000 90B5     		push	{r4, r7, lr}
 1720              		.cfi_def_cfa_offset 12
 1721              		.cfi_offset 4, -12
 1722              		.cfi_offset 7, -8
 1723              		.cfi_offset 14, -4
 1724 0002 E1B0     		sub	sp, sp, #388
 1725              		.cfi_def_cfa_offset 400
 1726 0004 00AF     		add	r7, sp, #0
 1727              		.cfi_def_cfa_register 7
 475:modem.c       ****     
 476:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 477:modem.c       ****     //char s_node_type[10];
 478:modem.c       ****     char s_sim_type[10];
 479:modem.c       ****     char s_sample_freq[10];
 480:modem.c       ****     char s_report_freq[10];
 481:modem.c       ****     char s_debug_freq[10];
 482:modem.c       ****     
 483:modem.c       ****     //apps
 484:modem.c       ****     char s_app_led[100];
 485:modem.c       ****     s_app_led[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 43


 1728              		.loc 1 485 0
 1729 0006 0023     		movs	r3, #0
 1730 0008 87F8EC30 		strb	r3, [r7, #236]
 486:modem.c       ****     
 487:modem.c       ****     char s_level_sensor[100];
 488:modem.c       ****     s_level_sensor[0] = '\0';
 1731              		.loc 1 488 0
 1732 000c 0023     		movs	r3, #0
 1733 000e 87F88830 		strb	r3, [r7, #136]
 489:modem.c       ****     
 490:modem.c       ****     //s_node_type[0] = '\0';
 491:modem.c       ****     s_sim_type[0] = '\0';
 1734              		.loc 1 491 0
 1735 0012 0023     		movs	r3, #0
 1736 0014 87F87431 		strb	r3, [r7, #372]
 492:modem.c       ****     s_sample_freq[0] = '\0';
 1737              		.loc 1 492 0
 1738 0018 0023     		movs	r3, #0
 1739 001a 87F86831 		strb	r3, [r7, #360]
 493:modem.c       ****     s_report_freq[0] = '\0';
 1740              		.loc 1 493 0
 1741 001e 0023     		movs	r3, #0
 1742 0020 87F85C31 		strb	r3, [r7, #348]
 494:modem.c       ****     s_debug_freq[0] = '\0';
 1743              		.loc 1 494 0
 1744 0024 0023     		movs	r3, #0
 1745 0026 87F85031 		strb	r3, [r7, #336]
 495:modem.c       ****     
 496:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 497:modem.c       ****     //extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 498:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1746              		.loc 1 498 0
 1747 002a 07F5BA73 		add	r3, r7, #372
 1748 002e 984A     		ldr	r2, .L115
 1749 0030 9849     		ldr	r1, .L115+4
 1750 0032 9948     		ldr	r0, .L115+8
 1751 0034 FFF7FEFF 		bl	extract_string
 499:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1752              		.loc 1 499 0
 1753 0038 07F5B473 		add	r3, r7, #360
 1754 003c 944A     		ldr	r2, .L115
 1755 003e 9749     		ldr	r1, .L115+12
 1756 0040 9548     		ldr	r0, .L115+8
 1757 0042 FFF7FEFF 		bl	extract_string
 500:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1758              		.loc 1 500 0
 1759 0046 07F5AE73 		add	r3, r7, #348
 1760 004a 914A     		ldr	r2, .L115
 1761 004c 9449     		ldr	r1, .L115+16
 1762 004e 9248     		ldr	r0, .L115+8
 1763 0050 FFF7FEFF 		bl	extract_string
 501:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1764              		.loc 1 501 0
 1765 0054 07F5A873 		add	r3, r7, #336
 1766 0058 8D4A     		ldr	r2, .L115
 1767 005a 9249     		ldr	r1, .L115+20
 1768 005c 8E48     		ldr	r0, .L115+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 44


 1769 005e FFF7FEFF 		bl	extract_string
 502:modem.c       ****     
 503:modem.c       ****     //app features
 504:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1770              		.loc 1 504 0
 1771 0062 07F1EC03 		add	r3, r7, #236
 1772 0066 8A4A     		ldr	r2, .L115
 1773 0068 8F49     		ldr	r1, .L115+24
 1774 006a 8B48     		ldr	r0, .L115+8
 1775 006c FFF7FEFF 		bl	extract_string
 505:modem.c       ****     App_LED_Update(s_app_led);
 1776              		.loc 1 505 0
 1777 0070 07F1EC03 		add	r3, r7, #236
 1778 0074 1846     		mov	r0, r3
 1779 0076 FFF7FEFF 		bl	App_LED_Update
 506:modem.c       ****     
 507:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1780              		.loc 1 507 0
 1781 007a 07F18803 		add	r3, r7, #136
 1782 007e 844A     		ldr	r2, .L115
 1783 0080 8A49     		ldr	r1, .L115+28
 1784 0082 8548     		ldr	r0, .L115+8
 1785 0084 FFF7FEFF 		bl	extract_string
 508:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1786              		.loc 1 508 0
 1787 0088 07F18803 		add	r3, r7, #136
 1788 008c 1846     		mov	r0, r3
 1789 008e FFF7FEFF 		bl	Level_Sensor_Update
 509:modem.c       ****     
 510:modem.c       ****     // Create variables for what is sent back from the server
 511:modem.c       ****     int sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq;
 512:modem.c       ****     
 513:modem.c       ****     // Scan character arrays and save values 
 514:modem.c       ****     /*
 515:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 516:modem.c       ****         updatable_parameters.node_type = node_type;
 517:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 518:modem.c       ****     }else{
 519:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 520:modem.c       ****     }
 521:modem.c       ****     */
 522:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1790              		.loc 1 522 0
 1791 0092 07F18402 		add	r2, r7, #132
 1792 0096 07F5BA73 		add	r3, r7, #372
 1793 009a 8549     		ldr	r1, .L115+32
 1794 009c 1846     		mov	r0, r3
 1795 009e FFF7FEFF 		bl	sscanf
 1796 00a2 0346     		mov	r3, r0
 1797 00a4 012B     		cmp	r3, #1
 1798 00a6 10D1     		bne	.L99
 523:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1799              		.loc 1 523 0
 1800 00a8 D7F88430 		ldr	r3, [r7, #132]
 1801 00ac 002B     		cmp	r3, #0
 1802 00ae 14BF     		ite	ne
 1803 00b0 0123     		movne	r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 45


 1804 00b2 0023     		moveq	r3, #0
 1805 00b4 DAB2     		uxtb	r2, r3
 1806 00b6 7F4B     		ldr	r3, .L115+36
 1807 00b8 1A70     		strb	r2, [r3]
 524:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1808              		.loc 1 524 0
 1809 00ba D7F88430 		ldr	r3, [r7, #132]
 1810 00be 1A46     		mov	r2, r3
 1811 00c0 7D49     		ldr	r1, .L115+40
 1812 00c2 0020     		movs	r0, #0
 1813 00c4 FFF7FEFF 		bl	printNotif
 1814 00c8 03E0     		b	.L100
 1815              	.L99:
 525:modem.c       ****     }else{
 526:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1816              		.loc 1 526 0
 1817 00ca 7C49     		ldr	r1, .L115+44
 1818 00cc 0220     		movs	r0, #2
 1819 00ce FFF7FEFF 		bl	printNotif
 1820              	.L100:
 527:modem.c       ****     }
 528:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1821              		.loc 1 528 0
 1822 00d2 07F18002 		add	r2, r7, #128
 1823 00d6 07F5B473 		add	r3, r7, #360
 1824 00da 7549     		ldr	r1, .L115+32
 1825 00dc 1846     		mov	r0, r3
 1826 00de FFF7FEFF 		bl	sscanf
 1827 00e2 0346     		mov	r3, r0
 1828 00e4 012B     		cmp	r3, #1
 1829 00e6 03D0     		beq	.L101
 529:modem.c       ****         //updatable_parameters.measure_time = sample_freq;
 530:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 531:modem.c       ****         //alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE
 532:modem.c       ****         //printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 533:modem.c       ****     }else{
 534:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1830              		.loc 1 534 0
 1831 00e8 7549     		ldr	r1, .L115+48
 1832 00ea 0220     		movs	r0, #2
 1833 00ec FFF7FEFF 		bl	printNotif
 1834              	.L101:
 535:modem.c       ****     }
 536:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1835              		.loc 1 536 0
 1836 00f0 07F17C02 		add	r2, r7, #124
 1837 00f4 07F5AE73 		add	r3, r7, #348
 1838 00f8 6D49     		ldr	r1, .L115+32
 1839 00fa 1846     		mov	r0, r3
 1840 00fc FFF7FEFF 		bl	sscanf
 1841 0100 0346     		mov	r3, r0
 1842 0102 012B     		cmp	r3, #1
 1843 0104 1DD1     		bne	.L102
 537:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1844              		.loc 1 537 0
 1845 0106 07F17C03 		add	r3, r7, #124
 1846 010a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 46


 1847 010c DAB2     		uxtb	r2, r3
 1848 010e 694B     		ldr	r3, .L115+36
 1849 0110 9A70     		strb	r2, [r3, #2]
 538:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 539:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1850              		.loc 1 539 0
 1851 0112 684B     		ldr	r3, .L115+36
 1852 0114 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1853 0116 99B2     		uxth	r1, r3
 1854 0118 6A4C     		ldr	r4, .L115+52
 1855 011a 3846     		mov	r0, r7
 1856 011c 0723     		movs	r3, #7
 1857 011e 0122     		movs	r2, #1
 1858 0120 FFF7FEFF 		bl	CreateAlarm
 1859 0124 3A46     		mov	r2, r7
 1860 0126 2346     		mov	r3, r4
 1861 0128 1168     		ldr	r1, [r2]	@ unaligned
 1862 012a 1960     		str	r1, [r3]	@ unaligned
 1863 012c 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1864 012e 9A80     		strh	r2, [r3, #4]	@ unaligned
 540:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1865              		.loc 1 540 0
 1866 0130 07F17C03 		add	r3, r7, #124
 1867 0134 1B68     		ldr	r3, [r3]
 1868 0136 1A46     		mov	r2, r3
 1869 0138 6349     		ldr	r1, .L115+56
 1870 013a 0020     		movs	r0, #0
 1871 013c FFF7FEFF 		bl	printNotif
 1872 0140 03E0     		b	.L103
 1873              	.L102:
 541:modem.c       ****         }else{
 542:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1874              		.loc 1 542 0
 1875 0142 6249     		ldr	r1, .L115+60
 1876 0144 0220     		movs	r0, #2
 1877 0146 FFF7FEFF 		bl	printNotif
 1878              	.L103:
 543:modem.c       ****     }
 544:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1879              		.loc 1 544 0
 1880 014a 07F17802 		add	r2, r7, #120
 1881 014e 07F5A873 		add	r3, r7, #336
 1882 0152 5749     		ldr	r1, .L115+32
 1883 0154 1846     		mov	r0, r3
 1884 0156 FFF7FEFF 		bl	sscanf
 1885 015a 0346     		mov	r3, r0
 1886 015c 012B     		cmp	r3, #1
 1887 015e 0ED1     		bne	.L104
 545:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1888              		.loc 1 545 0
 1889 0160 07F17803 		add	r3, r7, #120
 1890 0164 1B68     		ldr	r3, [r3]
 1891 0166 DAB2     		uxtb	r2, r3
 1892 0168 524B     		ldr	r3, .L115+36
 1893 016a DA70     		strb	r2, [r3, #3]
 546:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1894              		.loc 1 546 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 47


 1895 016c 07F17803 		add	r3, r7, #120
 1896 0170 1B68     		ldr	r3, [r3]
 1897 0172 1A46     		mov	r2, r3
 1898 0174 5649     		ldr	r1, .L115+64
 1899 0176 0020     		movs	r0, #0
 1900 0178 FFF7FEFF 		bl	printNotif
 1901 017c 03E0     		b	.L105
 1902              	.L104:
 547:modem.c       ****     }else{
 548:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 1903              		.loc 1 548 0
 1904 017e 5549     		ldr	r1, .L115+68
 1905 0180 0220     		movs	r0, #2
 1906 0182 FFF7FEFF 		bl	printNotif
 1907              	.L105:
 549:modem.c       ****     }
 550:modem.c       ****     
 551:modem.c       ****     // app alarm frequency updates
 552:modem.c       ****     char temp[100];
 553:modem.c       ****     temp[0] = '\0';
 1908              		.loc 1 553 0
 1909 0186 07F10C03 		add	r3, r7, #12
 1910 018a 0022     		movs	r2, #0
 1911 018c 1A70     		strb	r2, [r3]
 554:modem.c       ****     
 555:modem.c       ****     strcpy(temp,s_app_led);
 1912              		.loc 1 555 0
 1913 018e 07F1EC02 		add	r2, r7, #236
 1914 0192 07F10C03 		add	r3, r7, #12
 1915 0196 1146     		mov	r1, r2
 1916 0198 1846     		mov	r0, r3
 1917 019a FFF7FEFF 		bl	strcpy
 556:modem.c       ****     if (strstr(s_app_led,"Freq: ")){
 1918              		.loc 1 556 0
 1919 019e 07F1EC03 		add	r3, r7, #236
 1920 01a2 4D49     		ldr	r1, .L115+72
 1921 01a4 1846     		mov	r0, r3
 1922 01a6 FFF7FEFF 		bl	strstr
 1923 01aa 0346     		mov	r3, r0
 1924 01ac 002B     		cmp	r3, #0
 1925 01ae 26D0     		beq	.L106
 557:modem.c       ****         extract_string(temp,"Freq: ","\r",s_app_led); // grab level app frequency
 1926              		.loc 1 557 0
 1927 01b0 07F1EC03 		add	r3, r7, #236
 1928 01b4 07F10C00 		add	r0, r7, #12
 1929 01b8 354A     		ldr	r2, .L115
 1930 01ba 4749     		ldr	r1, .L115+72
 1931 01bc FFF7FEFF 		bl	extract_string
 558:modem.c       ****         if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 1932              		.loc 1 558 0
 1933 01c0 07F17402 		add	r2, r7, #116
 1934 01c4 07F1EC03 		add	r3, r7, #236
 1935 01c8 3949     		ldr	r1, .L115+32
 1936 01ca 1846     		mov	r0, r3
 1937 01cc FFF7FEFF 		bl	sscanf
 1938 01d0 0346     		mov	r3, r0
 1939 01d2 012B     		cmp	r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 48


 1940 01d4 0ED1     		bne	.L107
 559:modem.c       ****             updatable_parameters.App_LED_freq = app_led_freq;
 1941              		.loc 1 559 0
 1942 01d6 07F17403 		add	r3, r7, #116
 1943 01da 1B68     		ldr	r3, [r3]
 1944 01dc DAB2     		uxtb	r2, r3
 1945 01de 354B     		ldr	r3, .L115+36
 1946 01e0 1A71     		strb	r2, [r3, #4]
 560:modem.c       ****             printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_freq);
 1947              		.loc 1 560 0
 1948 01e2 07F17403 		add	r3, r7, #116
 1949 01e6 1B68     		ldr	r3, [r3]
 1950 01e8 1A46     		mov	r2, r3
 1951 01ea 3C49     		ldr	r1, .L115+76
 1952 01ec 0020     		movs	r0, #0
 1953 01ee FFF7FEFF 		bl	printNotif
 1954 01f2 08E0     		b	.L109
 1955              	.L107:
 561:modem.c       ****         } 
 562:modem.c       ****         else{
 563:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 1956              		.loc 1 563 0
 1957 01f4 3A49     		ldr	r1, .L115+80
 1958 01f6 0220     		movs	r0, #2
 1959 01f8 FFF7FEFF 		bl	printNotif
 1960 01fc 03E0     		b	.L109
 1961              	.L106:
 564:modem.c       ****         }
 565:modem.c       ****     }
 566:modem.c       ****     else{
 567:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 1962              		.loc 1 567 0
 1963 01fe 3949     		ldr	r1, .L115+84
 1964 0200 0220     		movs	r0, #2
 1965 0202 FFF7FEFF 		bl	printNotif
 1966              	.L109:
 568:modem.c       ****     }
 569:modem.c       ****        
 570:modem.c       ****     temp[0] = '\0';
 1967              		.loc 1 570 0
 1968 0206 07F10C03 		add	r3, r7, #12
 1969 020a 0022     		movs	r2, #0
 1970 020c 1A70     		strb	r2, [r3]
 571:modem.c       ****     
 572:modem.c       ****     strcpy(temp,s_level_sensor);
 1971              		.loc 1 572 0
 1972 020e 07F18802 		add	r2, r7, #136
 1973 0212 07F10C03 		add	r3, r7, #12
 1974 0216 1146     		mov	r1, r2
 1975 0218 1846     		mov	r0, r3
 1976 021a FFF7FEFF 		bl	strcpy
 573:modem.c       ****     if (strstr(s_level_sensor,"Freq: ")){
 1977              		.loc 1 573 0
 1978 021e 07F18803 		add	r3, r7, #136
 1979 0222 2D49     		ldr	r1, .L115+72
 1980 0224 1846     		mov	r0, r3
 1981 0226 FFF7FEFF 		bl	strstr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 49


 1982 022a 0346     		mov	r3, r0
 1983 022c 002B     		cmp	r3, #0
 1984 022e 26D0     		beq	.L110
 574:modem.c       ****         extract_string(temp,"Freq: ","\r",s_level_sensor); // grab level app frequency
 1985              		.loc 1 574 0
 1986 0230 07F18803 		add	r3, r7, #136
 1987 0234 07F10C00 		add	r0, r7, #12
 1988 0238 154A     		ldr	r2, .L115
 1989 023a 2749     		ldr	r1, .L115+72
 1990 023c FFF7FEFF 		bl	extract_string
 575:modem.c       ****         if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 1991              		.loc 1 575 0
 1992 0240 07F17002 		add	r2, r7, #112
 1993 0244 07F18803 		add	r3, r7, #136
 1994 0248 1949     		ldr	r1, .L115+32
 1995 024a 1846     		mov	r0, r3
 1996 024c FFF7FEFF 		bl	sscanf
 1997 0250 0346     		mov	r3, r0
 1998 0252 012B     		cmp	r3, #1
 1999 0254 0ED1     		bne	.L111
 576:modem.c       ****             updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2000              		.loc 1 576 0
 2001 0256 07F17003 		add	r3, r7, #112
 2002 025a 1B68     		ldr	r3, [r3]
 2003 025c DAB2     		uxtb	r2, r3
 2004 025e 154B     		ldr	r3, .L115+36
 2005 0260 5A71     		strb	r2, [r3, #5]
 577:modem.c       ****             printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_led_freq)
 2006              		.loc 1 577 0
 2007 0262 07F17403 		add	r3, r7, #116
 2008 0266 1B68     		ldr	r3, [r3]
 2009 0268 1A46     		mov	r2, r3
 2010 026a 1F49     		ldr	r1, .L115+88
 2011 026c 0020     		movs	r0, #0
 2012 026e FFF7FEFF 		bl	printNotif
 578:modem.c       ****         } 
 579:modem.c       ****         else{
 580:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value.");
 581:modem.c       ****         }
 582:modem.c       ****     }
 583:modem.c       ****     else{
 584:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 585:modem.c       ****     }
 586:modem.c       ****     
 587:modem.c       **** }
 2013              		.loc 1 587 0
 2014 0272 08E0     		b	.L114
 2015              	.L111:
 580:modem.c       ****         }
 2016              		.loc 1 580 0
 2017 0274 1D49     		ldr	r1, .L115+92
 2018 0276 0220     		movs	r0, #2
 2019 0278 FFF7FEFF 		bl	printNotif
 2020              		.loc 1 587 0
 2021 027c 03E0     		b	.L114
 2022              	.L110:
 584:modem.c       ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 50


 2023              		.loc 1 584 0
 2024 027e 1C49     		ldr	r1, .L115+96
 2025 0280 0220     		movs	r0, #2
 2026 0282 FFF7FEFF 		bl	printNotif
 2027              	.L114:
 2028              		.loc 1 587 0
 2029 0286 00BF     		nop
 2030 0288 07F5C277 		add	r7, r7, #388
 2031              		.cfi_def_cfa_offset 12
 2032 028c BD46     		mov	sp, r7
 2033              		.cfi_def_cfa_register 13
 2034              		@ sp needed
 2035 028e 90BD     		pop	{r4, r7, pc}
 2036              	.L116:
 2037              		.align	2
 2038              	.L115:
 2039 0290 88020000 		.word	.LC21
 2040 0294 24030000 		.word	.LC32
 2041 0298 00000000 		.word	uart_received_string
 2042 029c 30030000 		.word	.LC33
 2043 02a0 40030000 		.word	.LC34
 2044 02a4 50030000 		.word	.LC35
 2045 02a8 60030000 		.word	.LC36
 2046 02ac 6C030000 		.word	.LC37
 2047 02b0 7C030000 		.word	.LC38
 2048 02b4 00000000 		.word	updatable_parameters
 2049 02b8 80030000 		.word	.LC39
 2050 02bc 9C030000 		.word	.LC40
 2051 02c0 B8030000 		.word	.LC41
 2052 02c4 00000000 		.word	alarmSync
 2053 02c8 E8030000 		.word	.LC42
 2054 02cc 10040000 		.word	.LC43
 2055 02d0 40040000 		.word	.LC44
 2056 02d4 6C040000 		.word	.LC45
 2057 02d8 9C040000 		.word	.LC46
 2058 02dc A4040000 		.word	.LC47
 2059 02e0 C8040000 		.word	.LC48
 2060 02e4 F8040000 		.word	.LC49
 2061 02e8 20050000 		.word	.LC50
 2062 02ec 48050000 		.word	.LC51
 2063 02f0 7C050000 		.word	.LC52
 2064              		.cfi_endproc
 2065              	.LFE81:
 2066              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2067              		.section	.rodata
 2068 05a7 00       		.align	2
 2069              	.LC53:
 2070 05a8 41542343 		.ascii	"AT#CGMM\015\000"
 2070      474D4D0D 
 2070      00
 2071 05b1 000000   		.align	2
 2072              	.LC54:
 2073 05b4 4D6F6465 		.ascii	"Modem Model: %s\000"
 2073      6D204D6F 
 2073      64656C3A 
 2073      20257300 
 2074              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 51


 2075              	.LC55:
 2076 05c4 41542343 		.ascii	"AT#CCID\015\000"
 2076      4349440D 
 2076      00
 2077 05cd 000000   		.align	2
 2078              	.LC56:
 2079 05d0 53494D20 		.ascii	"SIM ID: %s\000"
 2079      49443A20 
 2079      257300
 2080 05db 00       		.align	2
 2081              	.LC57:
 2082 05dc 41542B43 		.ascii	"AT+CGSN\015\000"
 2082      47534E0D 
 2082      00
 2083 05e5 000000   		.align	2
 2084              	.LC58:
 2085 05e8 494D4549 		.ascii	"IMEI: %s\000"
 2085      3A202573 
 2085      00
 2086 05f1 000000   		.align	2
 2087              	.LC59:
 2088 05f4 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2088      4744434F 
 2088      4E543D31 
 2088      2C224950 
 2088      222C2277 
 2089 061d 00       		.ascii	"\000"
 2090 061e 0000     		.align	2
 2091              	.LC60:
 2092 0620 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2092      4744434F 
 2092      4E543D31 
 2092      2C224950 
 2092      222C2273 
 2093              		.align	2
 2094              	.LC61:
 2095 063c 41542B43 		.ascii	"AT+CFUN?\015\000"
 2095      46554E3F 
 2095      0D00
 2096 0646 0000     		.align	2
 2097              	.LC62:
 2098 0648 4346554E 		.ascii	"CFUN: %s\000"
 2098      3A202573 
 2098      00
 2099 0651 000000   		.align	2
 2100              	.LC63:
 2101 0654 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2101      46554E3D 
 2101      310D00
 2102              		.section	.text.modem_configure_settings,"ax",%progbits
 2103              		.align	2
 2104              		.global	modem_configure_settings
 2105              		.thumb
 2106              		.thumb_func
 2107              		.type	modem_configure_settings, %function
 2108              	modem_configure_settings:
 2109              	.LFB82:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 52


 588:modem.c       ****     
 589:modem.c       **** // Configure the modem settings
 590:modem.c       **** void modem_configure_settings(){
 2110              		.loc 1 590 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 16
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114 0000 80B5     		push	{r7, lr}
 2115              		.cfi_def_cfa_offset 8
 2116              		.cfi_offset 7, -8
 2117              		.cfi_offset 14, -4
 2118 0002 84B0     		sub	sp, sp, #16
 2119              		.cfi_def_cfa_offset 24
 2120 0004 00AF     		add	r7, sp, #0
 2121              		.cfi_def_cfa_register 7
 591:modem.c       ****     
 592:modem.c       ****     // Save/print modem model ID number
 593:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2122              		.loc 1 593 0
 2123 0006 454B     		ldr	r3, .L126
 2124 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2125 000a 002B     		cmp	r3, #0
 2126 000c 13D1     		bne	.L118
 594:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 595:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2127              		.loc 1 595 0
 2128 000e 4FF4FA62 		mov	r2, #2000
 2129 0012 4349     		ldr	r1, .L126+4
 2130 0014 4348     		ldr	r0, .L126+8
 2131 0016 FFF7FEFF 		bl	at_write_command
 2132 001a 0346     		mov	r3, r0
 2133 001c 002B     		cmp	r3, #0
 2134 001e 0AD0     		beq	.L118
 596:modem.c       ****             // Extract modem model ID number string from the UART
 597:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2135              		.loc 1 597 0
 2136 0020 414B     		ldr	r3, .L126+12
 2137 0022 424A     		ldr	r2, .L126+16
 2138 0024 4249     		ldr	r1, .L126+20
 2139 0026 4348     		ldr	r0, .L126+24
 2140 0028 FFF7FEFF 		bl	extract_string
 598:modem.c       ****             // Print modem model ID number
 599:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2141              		.loc 1 599 0
 2142 002c 3E4A     		ldr	r2, .L126+12
 2143 002e 4249     		ldr	r1, .L126+28
 2144 0030 0020     		movs	r0, #0
 2145 0032 FFF7FEFF 		bl	printNotif
 2146              	.L118:
 600:modem.c       ****         }
 601:modem.c       ****     }
 602:modem.c       ****     
 603:modem.c       ****    // Save/print SIM-card ID
 604:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2147              		.loc 1 604 0
 2148 0036 394B     		ldr	r3, .L126
 2149 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 53


 2150 003a 002B     		cmp	r3, #0
 2151 003c 13D1     		bne	.L119
 605:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 606:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2152              		.loc 1 606 0
 2153 003e 4FF4FA62 		mov	r2, #2000
 2154 0042 3749     		ldr	r1, .L126+4
 2155 0044 3D48     		ldr	r0, .L126+32
 2156 0046 FFF7FEFF 		bl	at_write_command
 2157 004a 0346     		mov	r3, r0
 2158 004c 002B     		cmp	r3, #0
 2159 004e 0AD0     		beq	.L119
 607:modem.c       ****             // Extract SIM-card ID string from the UART
 608:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2160              		.loc 1 608 0
 2161 0050 324B     		ldr	r3, .L126
 2162 0052 364A     		ldr	r2, .L126+16
 2163 0054 3649     		ldr	r1, .L126+20
 2164 0056 3748     		ldr	r0, .L126+24
 2165 0058 FFF7FEFF 		bl	extract_string
 609:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2166              		.loc 1 609 0
 2167 005c 2F4A     		ldr	r2, .L126
 2168 005e 3849     		ldr	r1, .L126+36
 2169 0060 0020     		movs	r0, #0
 2170 0062 FFF7FEFF 		bl	printNotif
 2171              	.L119:
 610:modem.c       ****         }
 611:modem.c       ****    }
 612:modem.c       **** 
 613:modem.c       ****     // Save/print modem IMEI
 614:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2172              		.loc 1 614 0
 2173 0066 2D4B     		ldr	r3, .L126
 2174 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2175 006c 002B     		cmp	r3, #0
 2176 006e 13D1     		bne	.L120
 615:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 616:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2177              		.loc 1 616 0
 2178 0070 4FF4FA62 		mov	r2, #2000
 2179 0074 2A49     		ldr	r1, .L126+4
 2180 0076 3348     		ldr	r0, .L126+40
 2181 0078 FFF7FEFF 		bl	at_write_command
 2182 007c 0346     		mov	r3, r0
 2183 007e 002B     		cmp	r3, #0
 2184 0080 0AD0     		beq	.L120
 617:modem.c       ****             // Extract modem IMEI number string from the UART
 618:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2185              		.loc 1 618 0
 2186 0082 314B     		ldr	r3, .L126+44
 2187 0084 294A     		ldr	r2, .L126+16
 2188 0086 2A49     		ldr	r1, .L126+20
 2189 0088 2A48     		ldr	r0, .L126+24
 2190 008a FFF7FEFF 		bl	extract_string
 619:modem.c       ****             // Print modem IMEI number
 620:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 54


 2191              		.loc 1 620 0
 2192 008e 2E4A     		ldr	r2, .L126+44
 2193 0090 2E49     		ldr	r1, .L126+48
 2194 0092 0020     		movs	r0, #0
 2195 0094 FFF7FEFF 		bl	printNotif
 2196              	.L120:
 621:modem.c       ****         } 
 622:modem.c       ****     }
 623:modem.c       ****     
 624:modem.c       ****     // Configure protocol and cellular end point
 625:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 626:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2197              		.loc 1 626 0
 2198 0098 2D4B     		ldr	r3, .L126+52
 2199 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2200 009c 83F00103 		eor	r3, r3, #1
 2201 00a0 DBB2     		uxtb	r3, r3
 2202 00a2 002B     		cmp	r3, #0
 2203 00a4 06D0     		beq	.L121
 627:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2204              		.loc 1 627 0
 2205 00a6 4FF4FA62 		mov	r2, #2000
 2206 00aa 1D49     		ldr	r1, .L126+4
 2207 00ac 2948     		ldr	r0, .L126+56
 2208 00ae FFF7FEFF 		bl	at_write_command
 2209 00b2 09E0     		b	.L122
 2210              	.L121:
 628:modem.c       ****     
 629:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2211              		.loc 1 629 0
 2212 00b4 264B     		ldr	r3, .L126+52
 2213 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2214 00b8 002B     		cmp	r3, #0
 2215 00ba 05D0     		beq	.L122
 630:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2216              		.loc 1 630 0
 2217 00bc 4FF4FA62 		mov	r2, #2000
 2218 00c0 1749     		ldr	r1, .L126+4
 2219 00c2 2548     		ldr	r0, .L126+60
 2220 00c4 FFF7FEFF 		bl	at_write_command
 2221              	.L122:
 631:modem.c       ****     }
 632:modem.c       ****     
 633:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 634:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 635:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2222              		.loc 1 635 0
 2223 00c8 4FF4FA62 		mov	r2, #2000
 2224 00cc 1449     		ldr	r1, .L126+4
 2225 00ce 2348     		ldr	r0, .L126+64
 2226 00d0 FFF7FEFF 		bl	at_write_command
 2227 00d4 0346     		mov	r3, r0
 2228 00d6 002B     		cmp	r3, #0
 2229 00d8 1BD0     		beq	.L125
 2230              	.LBB9:
 636:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 637:modem.c       ****         CFUN[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 55


 2231              		.loc 1 637 0
 2232 00da 0023     		movs	r3, #0
 2233 00dc 3B71     		strb	r3, [r7, #4]
 638:modem.c       ****         // Extract UART string recieved from the modem
 639:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2234              		.loc 1 639 0
 2235 00de 3B1D     		adds	r3, r7, #4
 2236 00e0 124A     		ldr	r2, .L126+16
 2237 00e2 1349     		ldr	r1, .L126+20
 2238 00e4 1348     		ldr	r0, .L126+24
 2239 00e6 FFF7FEFF 		bl	extract_string
 640:modem.c       ****         // Print UART string recieved from the modem
 641:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2240              		.loc 1 641 0
 2241 00ea 3B1D     		adds	r3, r7, #4
 2242 00ec 1A46     		mov	r2, r3
 2243 00ee 1C49     		ldr	r1, .L126+68
 2244 00f0 0020     		movs	r0, #0
 2245 00f2 FFF7FEFF 		bl	printNotif
 642:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 643:modem.c       ****         // If it returns NULL, then write another command to the modem
 644:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2246              		.loc 1 644 0
 2247 00f6 3B1D     		adds	r3, r7, #4
 2248 00f8 3121     		movs	r1, #49
 2249 00fa 1846     		mov	r0, r3
 2250 00fc FFF7FEFF 		bl	strchr
 2251 0100 0346     		mov	r3, r0
 2252 0102 002B     		cmp	r3, #0
 2253 0104 05D1     		bne	.L125
 645:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 646:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 647:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2254              		.loc 1 647 0
 2255 0106 4FF4FA62 		mov	r2, #2000
 2256 010a 0549     		ldr	r1, .L126+4
 2257 010c 1548     		ldr	r0, .L126+72
 2258 010e FFF7FEFF 		bl	at_write_command
 2259              	.L125:
 2260              	.LBE9:
 648:modem.c       ****         }
 649:modem.c       ****     }
 650:modem.c       **** 
 651:modem.c       ****     
 652:modem.c       **** }
 2261              		.loc 1 652 0
 2262 0112 00BF     		nop
 2263 0114 1037     		adds	r7, r7, #16
 2264              		.cfi_def_cfa_offset 8
 2265 0116 BD46     		mov	sp, r7
 2266              		.cfi_def_cfa_register 13
 2267              		@ sp needed
 2268 0118 80BD     		pop	{r7, pc}
 2269              	.L127:
 2270 011a 00BF     		.align	2
 2271              	.L126:
 2272 011c 00000000 		.word	modem_info
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 56


 2273 0120 00000000 		.word	.LC0
 2274 0124 A8050000 		.word	.LC53
 2275 0128 14000000 		.word	modem_info+20
 2276 012c 88020000 		.word	.LC21
 2277 0130 8C020000 		.word	.LC22
 2278 0134 00000000 		.word	uart_received_string
 2279 0138 B4050000 		.word	.LC54
 2280 013c C4050000 		.word	.LC55
 2281 0140 D0050000 		.word	.LC56
 2282 0144 DC050000 		.word	.LC57
 2283 0148 28000000 		.word	modem_info+40
 2284 014c E8050000 		.word	.LC58
 2285 0150 00000000 		.word	updatable_parameters
 2286 0154 F4050000 		.word	.LC59
 2287 0158 20060000 		.word	.LC60
 2288 015c 3C060000 		.word	.LC61
 2289 0160 48060000 		.word	.LC62
 2290 0164 54060000 		.word	.LC63
 2291              		.cfi_endproc
 2292              	.LFE82:
 2293              		.size	modem_configure_settings, .-modem_configure_settings
 2294              		.section	.rodata
 2295 065f 00       		.align	2
 2296              	.LC64:
 2297 0660 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2297      6D206E6F 
 2297      74207265 
 2297      61647920 
 2297      746F2067 
 2298 0693 6B2E00   		.ascii	"k.\000"
 2299 0696 0000     		.align	2
 2300              	.LC65:
 2301 0698 41542B43 		.ascii	"AT+CCLK?\015\000"
 2301      434C4B3F 
 2301      0D00
 2302 06a2 0000     		.align	2
 2303              	.LC66:
 2304 06a4 220D00   		.ascii	"\"\015\000"
 2305 06a7 00       		.align	2
 2306              	.LC67:
 2307 06a8 3A202200 		.ascii	": \"\000"
 2308              		.align	2
 2309              	.LC68:
 2310 06ac 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2310      642F2564 
 2310      2C25643A 
 2310      25643A25 
 2310      642D2564 
 2311 06c1 000000   		.align	2
 2312              	.LC69:
 2313 06c4 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2313      642F2564 
 2313      2C25643A 
 2313      25643A25 
 2313      642B2564 
 2314 06d9 000000   		.align	2
 2315              	.LC70:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 57


 2316 06dc 436F756C 		.ascii	"Could not parse modem time.\000"
 2316      64206E6F 
 2316      74207061 
 2316      72736520 
 2316      6D6F6465 
 2317              		.section	.text.modem_get_network_time,"ax",%progbits
 2318              		.align	2
 2319              		.global	modem_get_network_time
 2320              		.thumb
 2321              		.thumb_func
 2322              		.type	modem_get_network_time, %function
 2323              	modem_get_network_time:
 2324              	.LFB83:
 653:modem.c       **** 
 654:modem.c       **** //returns 0 if modem can't get time
 655:modem.c       **** long modem_get_network_time(){
 2325              		.loc 1 655 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 104
 2328              		@ frame_needed = 1, uses_anonymous_args = 0
 2329 0000 80B5     		push	{r7, lr}
 2330              		.cfi_def_cfa_offset 8
 2331              		.cfi_offset 7, -8
 2332              		.cfi_offset 14, -4
 2333 0002 A0B0     		sub	sp, sp, #128
 2334              		.cfi_def_cfa_offset 136
 2335 0004 06AF     		add	r7, sp, #24
 2336              		.cfi_def_cfa 7, 112
 656:modem.c       ****     
 657:modem.c       ****     //modem reposen format (careful to include the quotes "")
 658:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 659:modem.c       ****     //ex: 14:48 GMT
 660:modem.c       **** 
 661:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 662:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2337              		.loc 1 662 0
 2338 0006 444B     		ldr	r3, .L135
 2339 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2340 000a 042B     		cmp	r3, #4
 2341 000c 05D0     		beq	.L129
 663:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2342              		.loc 1 663 0
 2343 000e 4349     		ldr	r1, .L135+4
 2344 0010 0220     		movs	r0, #2
 2345 0012 FFF7FEFF 		bl	printNotif
 664:modem.c       ****         return 0;   
 2346              		.loc 1 664 0
 2347 0016 0023     		movs	r3, #0
 2348 0018 7AE0     		b	.L130
 2349              	.L129:
 665:modem.c       ****     }
 666:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2350              		.loc 1 666 0
 2351 001a 0023     		movs	r3, #0
 2352 001c 7B66     		str	r3, [r7, #100]
 667:modem.c       ****     
 668:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 58


 669:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2353              		.loc 1 669 0
 2354 001e 4FF4FA62 		mov	r2, #2000
 2355 0022 3F49     		ldr	r1, .L135+8
 2356 0024 3F48     		ldr	r0, .L135+12
 2357 0026 FFF7FEFF 		bl	at_write_command
 2358 002a 0346     		mov	r3, r0
 2359 002c 002B     		cmp	r3, #0
 2360 002e 6ED0     		beq	.L131
 2361              	.LBB10:
 670:modem.c       ****         // need to set this to /0
 671:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 672:modem.c       ****         network_time[0] = '\0';
 2362              		.loc 1 672 0
 2363 0030 0023     		movs	r3, #0
 2364 0032 87F84430 		strb	r3, [r7, #68]
 673:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 674:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2365              		.loc 1 674 0
 2366 0036 07F14403 		add	r3, r7, #68
 2367 003a 3B4A     		ldr	r2, .L135+16
 2368 003c 3B49     		ldr	r1, .L135+20
 2369 003e 3C48     		ldr	r0, .L135+24
 2370 0040 FFF7FEFF 		bl	extract_string
 675:modem.c       ****         
 676:modem.c       ****         ///////////////////  
 677:modem.c       ****         struct tm t; // Creates variable t of struct tm
 678:modem.c       ****         
 679:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 680:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2371              		.loc 1 680 0
 2372 0044 0023     		movs	r3, #0
 2373 0046 BB62     		str	r3, [r7, #40]
 681:modem.c       ****       
 682:modem.c       ****         // Determines the GMT offset 
 683:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 684:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 685:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2374              		.loc 1 685 0
 2375 0048 07F13C01 		add	r1, r7, #60
 2376 004c 07F14002 		add	r2, r7, #64
 2377 0050 07F14400 		add	r0, r7, #68
 2378 0054 07F12803 		add	r3, r7, #40
 2379 0058 0493     		str	r3, [sp, #16]
 2380 005a 07F12C03 		add	r3, r7, #44
 2381 005e 0393     		str	r3, [sp, #12]
 2382 0060 07F13003 		add	r3, r7, #48
 2383 0064 0293     		str	r3, [sp, #8]
 2384 0066 07F13403 		add	r3, r7, #52
 2385 006a 0193     		str	r3, [sp, #4]
 2386 006c 07F13803 		add	r3, r7, #56
 2387 0070 0093     		str	r3, [sp]
 2388 0072 0B46     		mov	r3, r1
 2389 0074 2F49     		ldr	r1, .L135+28
 2390 0076 FFF7FEFF 		bl	sscanf
 2391 007a 0346     		mov	r3, r0
 2392 007c 072B     		cmp	r3, #7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 59


 2393 007e 06D1     		bne	.L132
 686:modem.c       ****             gmt_offset = gmt_offset*(900);
 2394              		.loc 1 686 0
 2395 0080 BB6A     		ldr	r3, [r7, #40]
 2396 0082 4FF46172 		mov	r2, #900
 2397 0086 02FB03F3 		mul	r3, r2, r3
 2398 008a BB62     		str	r3, [r7, #40]
 2399 008c 27E0     		b	.L133
 2400              	.L132:
 687:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2401              		.loc 1 687 0
 2402 008e 07F13C01 		add	r1, r7, #60
 2403 0092 07F14002 		add	r2, r7, #64
 2404 0096 07F14400 		add	r0, r7, #68
 2405 009a 07F12803 		add	r3, r7, #40
 2406 009e 0493     		str	r3, [sp, #16]
 2407 00a0 07F12C03 		add	r3, r7, #44
 2408 00a4 0393     		str	r3, [sp, #12]
 2409 00a6 07F13003 		add	r3, r7, #48
 2410 00aa 0293     		str	r3, [sp, #8]
 2411 00ac 07F13403 		add	r3, r7, #52
 2412 00b0 0193     		str	r3, [sp, #4]
 2413 00b2 07F13803 		add	r3, r7, #56
 2414 00b6 0093     		str	r3, [sp]
 2415 00b8 0B46     		mov	r3, r1
 2416 00ba 1F49     		ldr	r1, .L135+32
 2417 00bc FFF7FEFF 		bl	sscanf
 2418 00c0 0346     		mov	r3, r0
 2419 00c2 072B     		cmp	r3, #7
 2420 00c4 05D1     		bne	.L134
 688:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2421              		.loc 1 688 0
 2422 00c6 BB6A     		ldr	r3, [r7, #40]
 2423 00c8 1C4A     		ldr	r2, .L135+36
 2424 00ca 02FB03F3 		mul	r3, r2, r3
 2425 00ce BB62     		str	r3, [r7, #40]
 2426 00d0 05E0     		b	.L133
 2427              	.L134:
 689:modem.c       ****         }else{
 690:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2428              		.loc 1 690 0
 2429 00d2 1B49     		ldr	r1, .L135+40
 2430 00d4 0220     		movs	r0, #2
 2431 00d6 FFF7FEFF 		bl	printNotif
 691:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2432              		.loc 1 691 0
 2433 00da 0023     		movs	r3, #0
 2434 00dc 18E0     		b	.L130
 2435              	.L133:
 692:modem.c       ****         }
 693:modem.c       ****         
 694:modem.c       ****         // Sets each variable to the correct time 
 695:modem.c       ****         t.tm_sec = second;
 2436              		.loc 1 695 0
 2437 00de FB6A     		ldr	r3, [r7, #44]
 2438 00e0 7B60     		str	r3, [r7, #4]
 696:modem.c       ****         t.tm_min = minute;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 60


 2439              		.loc 1 696 0
 2440 00e2 3B6B     		ldr	r3, [r7, #48]
 2441 00e4 BB60     		str	r3, [r7, #8]
 697:modem.c       ****         t.tm_hour = hour;
 2442              		.loc 1 697 0
 2443 00e6 7B6B     		ldr	r3, [r7, #52]
 2444 00e8 FB60     		str	r3, [r7, #12]
 698:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2445              		.loc 1 698 0
 2446 00ea 3B6C     		ldr	r3, [r7, #64]
 2447 00ec 6433     		adds	r3, r3, #100
 2448 00ee BB61     		str	r3, [r7, #24]
 699:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2449              		.loc 1 699 0
 2450 00f0 FB6B     		ldr	r3, [r7, #60]
 2451 00f2 013B     		subs	r3, r3, #1
 2452 00f4 7B61     		str	r3, [r7, #20]
 700:modem.c       ****         t.tm_mday = day;           // Day of the month
 2453              		.loc 1 700 0
 2454 00f6 BB6B     		ldr	r3, [r7, #56]
 2455 00f8 3B61     		str	r3, [r7, #16]
 701:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2456              		.loc 1 701 0
 2457 00fa 0023     		movs	r3, #0
 2458 00fc 7B62     		str	r3, [r7, #36]
 702:modem.c       ****     
 703:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 704:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 705:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2459              		.loc 1 705 0
 2460 00fe 3B1D     		adds	r3, r7, #4
 2461 0100 1846     		mov	r0, r3
 2462 0102 FFF7FEFF 		bl	mktime
 2463 0106 0246     		mov	r2, r0
 2464 0108 BB6A     		ldr	r3, [r7, #40]
 2465 010a 1344     		add	r3, r3, r2
 2466 010c 7B66     		str	r3, [r7, #100]
 2467              	.L131:
 2468              	.LBE10:
 706:modem.c       ****     }
 707:modem.c       ****     
 708:modem.c       ****     return epoch_time;
 2469              		.loc 1 708 0
 2470 010e 7B6E     		ldr	r3, [r7, #100]
 2471              	.L130:
 709:modem.c       **** }
 2472              		.loc 1 709 0
 2473 0110 1846     		mov	r0, r3
 2474 0112 6837     		adds	r7, r7, #104
 2475              		.cfi_def_cfa_offset 8
 2476 0114 BD46     		mov	sp, r7
 2477              		.cfi_def_cfa_register 13
 2478              		@ sp needed
 2479 0116 80BD     		pop	{r7, pc}
 2480              	.L136:
 2481              		.align	2
 2482              	.L135:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 61


 2483 0118 00000000 		.word	modem_state
 2484 011c 60060000 		.word	.LC64
 2485 0120 00000000 		.word	.LC0
 2486 0124 98060000 		.word	.LC65
 2487 0128 A4060000 		.word	.LC66
 2488 012c A8060000 		.word	.LC67
 2489 0130 00000000 		.word	uart_received_string
 2490 0134 AC060000 		.word	.LC68
 2491 0138 C4060000 		.word	.LC69
 2492 013c 7CFCFFFF 		.word	-900
 2493 0140 DC060000 		.word	.LC70
 2494              		.cfi_endproc
 2495              	.LFE83:
 2496              		.size	modem_get_network_time, .-modem_get_network_time
 2497              		.section	.text.modem_get_state,"ax",%progbits
 2498              		.align	2
 2499              		.global	modem_get_state
 2500              		.thumb
 2501              		.thumb_func
 2502              		.type	modem_get_state, %function
 2503              	modem_get_state:
 2504              	.LFB84:
 710:modem.c       **** 
 711:modem.c       **** // Get the modem state
 712:modem.c       **** uint8 modem_get_state(){
 2505              		.loc 1 712 0
 2506              		.cfi_startproc
 2507              		@ args = 0, pretend = 0, frame = 0
 2508              		@ frame_needed = 1, uses_anonymous_args = 0
 2509              		@ link register save eliminated.
 2510 0000 80B4     		push	{r7}
 2511              		.cfi_def_cfa_offset 4
 2512              		.cfi_offset 7, -4
 2513 0002 00AF     		add	r7, sp, #0
 2514              		.cfi_def_cfa_register 7
 713:modem.c       ****     return modem_state;
 2515              		.loc 1 713 0
 2516 0004 024B     		ldr	r3, .L139
 2517 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 714:modem.c       **** }
 2518              		.loc 1 714 0
 2519 0008 1846     		mov	r0, r3
 2520 000a BD46     		mov	sp, r7
 2521              		.cfi_def_cfa_register 13
 2522              		@ sp needed
 2523 000c 80BC     		pop	{r7}
 2524              		.cfi_restore 7
 2525              		.cfi_def_cfa_offset 0
 2526 000e 7047     		bx	lr
 2527              	.L140:
 2528              		.align	2
 2529              	.L139:
 2530 0010 00000000 		.word	modem_state
 2531              		.cfi_endproc
 2532              	.LFE84:
 2533              		.size	modem_get_state, .-modem_get_state
 2534              		.section	.text.modem_sleep,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 62


 2535              		.align	2
 2536              		.global	modem_sleep
 2537              		.thumb
 2538              		.thumb_func
 2539              		.type	modem_sleep, %function
 2540              	modem_sleep:
 2541              	.LFB85:
 715:modem.c       **** 
 716:modem.c       **** // Set modem to sleep
 717:modem.c       **** void modem_sleep(){
 2542              		.loc 1 717 0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 0
 2545              		@ frame_needed = 1, uses_anonymous_args = 0
 2546 0000 80B5     		push	{r7, lr}
 2547              		.cfi_def_cfa_offset 8
 2548              		.cfi_offset 7, -8
 2549              		.cfi_offset 14, -4
 2550 0002 00AF     		add	r7, sp, #0
 2551              		.cfi_def_cfa_register 7
 718:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 719:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2552              		.loc 1 719 0
 2553 0004 FFF7FEFF 		bl	modem_get_state
 2554 0008 0346     		mov	r3, r0
 2555 000a 002B     		cmp	r3, #0
 2556 000c 03D0     		beq	.L143
 720:modem.c       **** 
 721:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2557              		.loc 1 721 0
 2558 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 722:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2559              		.loc 1 722 0
 2560 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2561              	.L143:
 723:modem.c       ****         
 724:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 725:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 726:modem.c       ****      }
 727:modem.c       **** }
 2562              		.loc 1 727 0
 2563 0016 00BF     		nop
 2564 0018 80BD     		pop	{r7, pc}
 2565              		.cfi_endproc
 2566              	.LFE85:
 2567              		.size	modem_sleep, .-modem_sleep
 2568 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2569              		.align	2
 2570              		.global	modem_wakeup
 2571              		.thumb
 2572              		.thumb_func
 2573              		.type	modem_wakeup, %function
 2574              	modem_wakeup:
 2575              	.LFB86:
 728:modem.c       **** 
 729:modem.c       **** // Wakeup the modem
 730:modem.c       **** void modem_wakeup(){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 63


 2576              		.loc 1 730 0
 2577              		.cfi_startproc
 2578              		@ args = 0, pretend = 0, frame = 0
 2579              		@ frame_needed = 1, uses_anonymous_args = 0
 2580 0000 80B5     		push	{r7, lr}
 2581              		.cfi_def_cfa_offset 8
 2582              		.cfi_offset 7, -8
 2583              		.cfi_offset 14, -4
 2584 0002 00AF     		add	r7, sp, #0
 2585              		.cfi_def_cfa_register 7
 731:modem.c       ****     // If modem state is not off then wake it up
 732:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2586              		.loc 1 732 0
 2587 0004 FFF7FEFF 		bl	modem_get_state
 2588 0008 0346     		mov	r3, r0
 2589 000a 002B     		cmp	r3, #0
 2590 000c 0BD0     		beq	.L146
 733:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2591              		.loc 1 733 0
 2592 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 734:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 735:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 736:modem.c       ****         UART_Telit_Wakeup();
 2593              		.loc 1 736 0
 2594 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 737:modem.c       ****         // Remove the need for this pin itterupt
 738:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 739:modem.c       ****         
 740:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 741:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2595              		.loc 1 741 0
 2596 0016 FFF7FEFF 		bl	modem_get_state
 2597 001a 0346     		mov	r3, r0
 2598 001c 032B     		cmp	r3, #3
 2599 001e 02D1     		bne	.L146
 742:modem.c       ****             CyDelay(100u);
 2600              		.loc 1 742 0
 2601 0020 6420     		movs	r0, #100
 2602 0022 FFF7FEFF 		bl	CyDelay
 2603              	.L146:
 743:modem.c       ****         }
 744:modem.c       ****      }
 745:modem.c       **** }
 2604              		.loc 1 745 0
 2605 0026 00BF     		nop
 2606 0028 80BD     		pop	{r7, pc}
 2607              		.cfi_endproc
 2608              	.LFE86:
 2609              		.size	modem_wakeup, .-modem_wakeup
 2610 002a 00BF     		.section	.rodata
 2611              		.align	2
 2612              	.LC71:
 2613 06f8 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2613      50494F3D 
 2613      352C312C 
 2613      312C300D 
 2613      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 64


 2614 0709 000000   		.align	2
 2615              	.LC72:
 2616 070c 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2616      55504C53 
 2616      45433D31 
 2616      0D00
 2617 071a 0000     		.align	2
 2618              	.LC73:
 2619 071c 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2619      55504C56 
 2619      3D320D00 
 2620              		.align	2
 2621              	.LC74:
 2622 0728 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2622      47505345 
 2622      4E3D310D 
 2622      00
 2623 0735 000000   		.align	2
 2624              	.LC75:
 2625 0738 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2625      4C503D31 
 2625      2C227375 
 2625      706C2E67 
 2625      6F6F676C 
 2626 0759 000000   		.align	2
 2627              	.LC76:
 2628 075c 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2628      47414354 
 2628      3D312C30 
 2628      0D0A00
 2629 076b 00       		.align	2
 2630              	.LC77:
 2631 076c 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2631      43534C4B 
 2631      3D312C31 
 2631      0D00
 2632 077a 0000     		.align	2
 2633              	.LC78:
 2634 077c 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2634      5053534C 
 2634      53523D31 
 2634      2C312C2C 
 2634      2C2C2C32 
 2635 0792 0000     		.align	2
 2636              	.LC79:
 2637 0794 4E00     		.ascii	"N\000"
 2638 0796 0000     		.align	2
 2639              	.LC80:
 2640 0798 41542447 		.ascii	"AT$GPSACP\015\000"
 2640      50534143 
 2640      500D00
 2641 07a3 00       		.align	2
 2642              	.LC81:
 2643 07a4 24475053 		.ascii	"$GPSACP: \000"
 2643      4143503A 
 2643      2000
 2644 07ae 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 65


 2645              	.LC82:
 2646 07b0 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2646      4143503A 
 2646      20252A66 
 2646      2C25664E 
 2646      2C256657 
 2647              		.global	__aeabi_fdiv
 2648              		.global	__aeabi_f2d
 2649              		.global	__aeabi_ddiv
 2650              		.global	__aeabi_dadd
 2651              		.global	__aeabi_d2f
 2652              		.align	2
 2653              	.LC83:
 2654 07d0 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2654      50494F3D 
 2654      352C302C 
 2654      312C300D 
 2654      00
 2655 07e1 000000   		.align	2
 2656              	.LC84:
 2657 07e4 41542447 		.ascii	"AT$GPSR=0\015\000"
 2657      5053523D 
 2657      300D00
 2658 07ef 00       		.align	2
 2659              	.LC85:
 2660 07f0 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2660      20746F20 
 2660      6C6F636B 
 2660      20475053 
 2660      3A202564 
 2661              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2662              		.align	2
 2663              		.global	modem_get_gps_coordinates
 2664              		.thumb
 2665              		.thumb_func
 2666              		.type	modem_get_gps_coordinates, %function
 2667              	modem_get_gps_coordinates:
 2668              	.LFB87:
 746:modem.c       **** 
 747:modem.c       ****     
 748:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 749:modem.c       **** gps_t modem_get_gps_coordinates(){
 2669              		.loc 1 749 0
 2670              		.cfi_startproc
 2671              		@ args = 0, pretend = 0, frame = 56
 2672              		@ frame_needed = 1, uses_anonymous_args = 0
 2673 0000 B0B5     		push	{r4, r5, r7, lr}
 2674              		.cfi_def_cfa_offset 16
 2675              		.cfi_offset 4, -16
 2676              		.cfi_offset 5, -12
 2677              		.cfi_offset 7, -8
 2678              		.cfi_offset 14, -4
 2679 0002 90B0     		sub	sp, sp, #64
 2680              		.cfi_def_cfa_offset 80
 2681 0004 02AF     		add	r7, sp, #8
 2682              		.cfi_def_cfa 7, 72
 2683 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 66


 750:modem.c       ****     gps_t gps;
 751:modem.c       ****     gps.altitude = 0;
 2684              		.loc 1 751 0
 2685 0008 4FF00003 		mov	r3, #0
 2686 000c FB61     		str	r3, [r7, #28]	@ float
 752:modem.c       ****     gps.longitude = 0;
 2687              		.loc 1 752 0
 2688 000e 4FF00003 		mov	r3, #0
 2689 0012 BB61     		str	r3, [r7, #24]	@ float
 753:modem.c       ****     gps.latitude = 0;
 2690              		.loc 1 753 0
 2691 0014 4FF00003 		mov	r3, #0
 2692 0018 7B61     		str	r3, [r7, #20]	@ float
 754:modem.c       ****     gps.time_to_lock =0;
 2693              		.loc 1 754 0
 2694 001a 0023     		movs	r3, #0
 2695 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 755:modem.c       ****     gps.valid = 0;
 2696              		.loc 1 755 0
 2697 001e 0023     		movs	r3, #0
 2698 0020 87F82230 		strb	r3, [r7, #34]
 756:modem.c       ****     
 757:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 758:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2699              		.loc 1 758 0
 2700 0024 7F4B     		ldr	r3, .L157
 2701 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2702 0028 042B     		cmp	r3, #4
 2703 002a 07D0     		beq	.L148
 759:modem.c       ****         return gps;//where valid = 0
 2704              		.loc 1 759 0
 2705 002c 7B68     		ldr	r3, [r7, #4]
 2706 002e 1C46     		mov	r4, r3
 2707 0030 07F11403 		add	r3, r7, #20
 2708 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2709 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2710 003a EFE0     		b	.L147
 2711              	.L148:
 760:modem.c       ****     }
 761:modem.c       ****     
 762:modem.c       ****     long lock_time = getTimeStamp();
 2712              		.loc 1 762 0
 2713 003c FFF7FEFF 		bl	getTimeStamp
 2714 0040 3863     		str	r0, [r7, #48]
 763:modem.c       ****     
 764:modem.c       ****     // Enable this for the LTER module
 765:modem.c       ****     // Enable GPS Low-Dropout Regulator
 766:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2715              		.loc 1 766 0
 2716 0042 4FF4FA62 		mov	r2, #2000
 2717 0046 7849     		ldr	r1, .L157+4
 2718 0048 7848     		ldr	r0, .L157+8
 2719 004a FFF7FEFF 		bl	at_write_command
 767:modem.c       ****     
 768:modem.c       ****     // Configure SUPL connection params
 769:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2720              		.loc 1 769 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 67


 2721 004e 4FF4FA62 		mov	r2, #2000
 2722 0052 7549     		ldr	r1, .L157+4
 2723 0054 7648     		ldr	r0, .L157+12
 2724 0056 FFF7FEFF 		bl	at_write_command
 770:modem.c       ****     
 771:modem.c       ****     // Use SUPL2.0
 772:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2725              		.loc 1 772 0
 2726 005a 4FF4FA62 		mov	r2, #2000
 2727 005e 7249     		ldr	r1, .L157+4
 2728 0060 7448     		ldr	r0, .L157+16
 2729 0062 FFF7FEFF 		bl	at_write_command
 773:modem.c       ****     
 774:modem.c       ****     // Enable AGPS service
 775:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2730              		.loc 1 775 0
 2731 0066 4FF4FA62 		mov	r2, #2000
 2732 006a 6F49     		ldr	r1, .L157+4
 2733 006c 7248     		ldr	r0, .L157+20
 2734 006e FFF7FEFF 		bl	at_write_command
 776:modem.c       ****     
 777:modem.c       ****     // Chose SUPL server, use google public service
 778:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2735              		.loc 1 778 0
 2736 0072 4FF4FA62 		mov	r2, #2000
 2737 0076 6C49     		ldr	r1, .L157+4
 2738 0078 7048     		ldr	r0, .L157+24
 2739 007a FFF7FEFF 		bl	at_write_command
 779:modem.c       ****     
 780:modem.c       ****     //pdp context has to be locked to carrier for this to work
 781:modem.c       ****     
 782:modem.c       ****     // Unlock context since it needs to be used by modem
 783:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2740              		.loc 1 783 0
 2741 007e 4FF4FA62 		mov	r2, #2000
 2742 0082 6949     		ldr	r1, .L157+4
 2743 0084 6E48     		ldr	r0, .L157+28
 2744 0086 FFF7FEFF 		bl	at_write_command
 784:modem.c       ****     
 785:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2745              		.loc 1 785 0
 2746 008a 4FF4FA62 		mov	r2, #2000
 2747 008e 6649     		ldr	r1, .L157+4
 2748 0090 6C48     		ldr	r0, .L157+32
 2749 0092 FFF7FEFF 		bl	at_write_command
 786:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 787:modem.c       ****     
 788:modem.c       ****     // Relock the context
 789:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2750              		.loc 1 789 0
 2751 0096 42F21072 		movw	r2, #10000
 2752 009a 6349     		ldr	r1, .L157+4
 2753 009c 6A48     		ldr	r0, .L157+36
 2754 009e FFF7FEFF 		bl	at_write_command
 790:modem.c       ****     
 791:modem.c       ****     //start AGPS service
 792:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 68


 2755              		.loc 1 792 0
 2756 00a2 4FF4FA62 		mov	r2, #2000
 2757 00a6 6049     		ldr	r1, .L157+4
 2758 00a8 6848     		ldr	r0, .L157+40
 2759 00aa FFF7FEFF 		bl	at_write_command
 793:modem.c       ****     
 794:modem.c       ****     
 795:modem.c       ****     // Start the AGPS service
 796:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 797:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 798:modem.c       ****     
 799:modem.c       ****     
 800:modem.c       ****  
 801:modem.c       ****     uint8 gps_status = 0;
 2760              		.loc 1 801 0
 2761 00ae 0023     		movs	r3, #0
 2762 00b0 87F82F30 		strb	r3, [r7, #47]
 2763              	.LBB11:
 802:modem.c       ****     for(uint16 i=0;i<200;i++){
 2764              		.loc 1 802 0
 2765 00b4 0023     		movs	r3, #0
 2766 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2767 00b8 13E0     		b	.L150
 2768              	.L153:
 803:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2769              		.loc 1 803 0
 2770 00ba 4FF4FA62 		mov	r2, #2000
 2771 00be 6449     		ldr	r1, .L157+44
 2772 00c0 6448     		ldr	r0, .L157+48
 2773 00c2 FFF7FEFF 		bl	at_write_command
 2774 00c6 0346     		mov	r3, r0
 2775 00c8 87F82F30 		strb	r3, [r7, #47]
 804:modem.c       ****         if(gps_status){
 2776              		.loc 1 804 0
 2777 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2778 00d0 002B     		cmp	r3, #0
 2779 00d2 0AD1     		bne	.L156
 805:modem.c       ****             break;   
 806:modem.c       ****         }
 807:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2780              		.loc 1 807 0 discriminator 2
 2781 00d4 4FF47A70 		mov	r0, #1000
 2782 00d8 FFF7FEFF 		bl	CyDelay
 802:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2783              		.loc 1 802 0 discriminator 2
 2784 00dc FB8E     		ldrh	r3, [r7, #54]
 2785 00de 0133     		adds	r3, r3, #1
 2786 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2787              	.L150:
 802:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2788              		.loc 1 802 0 is_stmt 0 discriminator 1
 2789 00e2 FB8E     		ldrh	r3, [r7, #54]
 2790 00e4 C72B     		cmp	r3, #199
 2791 00e6 E8D9     		bls	.L153
 2792 00e8 00E0     		b	.L152
 2793              	.L156:
 805:modem.c       ****             break;   
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 69


 2794              		.loc 1 805 0 is_stmt 1
 2795 00ea 00BF     		nop
 2796              	.L152:
 2797              	.LBE11:
 808:modem.c       ****     }
 809:modem.c       ****     
 810:modem.c       ****     //parse data here
 811:modem.c       ****     
 812:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 813:modem.c       ****     float lat;
 814:modem.c       ****     float lon;
 815:modem.c       ****     float alt;
 816:modem.c       ****     
 817:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 818:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 819:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2798              		.loc 1 819 0
 2799 00ec 5A49     		ldr	r1, .L157+52
 2800 00ee 5B48     		ldr	r0, .L157+56
 2801 00f0 FFF7FEFF 		bl	strstr
 2802 00f4 B862     		str	r0, [r7, #40]
 820:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 821:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 822:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2803              		.loc 1 822 0
 2804 00f6 07F10C01 		add	r1, r7, #12
 2805 00fa 07F11002 		add	r2, r7, #16
 2806 00fe 07F10803 		add	r3, r7, #8
 2807 0102 0093     		str	r3, [sp]
 2808 0104 0B46     		mov	r3, r1
 2809 0106 5649     		ldr	r1, .L157+60
 2810 0108 B86A     		ldr	r0, [r7, #40]
 2811 010a FFF7FEFF 		bl	sscanf
 2812 010e 7862     		str	r0, [r7, #36]
 823:modem.c       ****     if(match >= 3){
 2813              		.loc 1 823 0
 2814 0110 7B6A     		ldr	r3, [r7, #36]
 2815 0112 022B     		cmp	r3, #2
 2816 0114 60DD     		ble	.L154
 824:modem.c       ****         // Calculate lat and lon
 825:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 826:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 827:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2817              		.loc 1 827 0
 2818 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2819 0118 5249     		ldr	r1, .L157+64
 2820 011a 1846     		mov	r0, r3
 2821 011c FFF7FEFF 		bl	__aeabi_fdiv
 2822 0120 0346     		mov	r3, r0
 2823 0122 1846     		mov	r0, r3
 2824 0124 FFF7FEFF 		bl	floorf
 2825 0128 0346     		mov	r3, r0
 2826 012a 1846     		mov	r0, r3
 2827 012c FFF7FEFF 		bl	__aeabi_f2d
 2828 0130 0446     		mov	r4, r0
 2829 0132 0D46     		mov	r5, r1
 2830 0134 3B69     		ldr	r3, [r7, #16]	@ float
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 70


 2831 0136 1846     		mov	r0, r3
 2832 0138 FFF7FEFF 		bl	__aeabi_f2d
 2833 013c 4FF00002 		mov	r2, #0
 2834 0140 494B     		ldr	r3, .L157+68
 2835 0142 FFF7FEFF 		bl	fmod
 2836 0146 4FF00002 		mov	r2, #0
 2837 014a 484B     		ldr	r3, .L157+72
 2838 014c FFF7FEFF 		bl	__aeabi_ddiv
 2839 0150 0246     		mov	r2, r0
 2840 0152 0B46     		mov	r3, r1
 2841 0154 2046     		mov	r0, r4
 2842 0156 2946     		mov	r1, r5
 2843 0158 FFF7FEFF 		bl	__aeabi_dadd
 2844 015c 0346     		mov	r3, r0
 2845 015e 0C46     		mov	r4, r1
 2846 0160 1846     		mov	r0, r3
 2847 0162 2146     		mov	r1, r4
 2848 0164 FFF7FEFF 		bl	__aeabi_d2f
 2849 0168 0346     		mov	r3, r0
 2850 016a 3B61     		str	r3, [r7, #16]	@ float
 828:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2851              		.loc 1 828 0
 2852 016c FB68     		ldr	r3, [r7, #12]	@ float
 2853 016e 3D49     		ldr	r1, .L157+64
 2854 0170 1846     		mov	r0, r3
 2855 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2856 0176 0346     		mov	r3, r0
 2857 0178 1846     		mov	r0, r3
 2858 017a FFF7FEFF 		bl	floorf
 2859 017e 0346     		mov	r3, r0
 2860 0180 1846     		mov	r0, r3
 2861 0182 FFF7FEFF 		bl	__aeabi_f2d
 2862 0186 0446     		mov	r4, r0
 2863 0188 0D46     		mov	r5, r1
 2864 018a FB68     		ldr	r3, [r7, #12]	@ float
 2865 018c 1846     		mov	r0, r3
 2866 018e FFF7FEFF 		bl	__aeabi_f2d
 2867 0192 4FF00002 		mov	r2, #0
 2868 0196 344B     		ldr	r3, .L157+68
 2869 0198 FFF7FEFF 		bl	fmod
 2870 019c 4FF00002 		mov	r2, #0
 2871 01a0 324B     		ldr	r3, .L157+72
 2872 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2873 01a6 0246     		mov	r2, r0
 2874 01a8 0B46     		mov	r3, r1
 2875 01aa 2046     		mov	r0, r4
 2876 01ac 2946     		mov	r1, r5
 2877 01ae FFF7FEFF 		bl	__aeabi_dadd
 2878 01b2 0346     		mov	r3, r0
 2879 01b4 0C46     		mov	r4, r1
 2880 01b6 1846     		mov	r0, r3
 2881 01b8 2146     		mov	r1, r4
 2882 01ba FFF7FEFF 		bl	__aeabi_d2f
 2883 01be 0346     		mov	r3, r0
 2884 01c0 83F00043 		eor	r3, r3, #-2147483648
 2885 01c4 FB60     		str	r3, [r7, #12]	@ float
 829:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 71


 2886              		.loc 1 829 0
 2887 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2888 01c8 FB61     		str	r3, [r7, #28]	@ float
 830:modem.c       ****         gps.latitude = lat;
 2889              		.loc 1 830 0
 2890 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2891 01cc 7B61     		str	r3, [r7, #20]	@ float
 831:modem.c       ****         gps.longitude = lon;
 2892              		.loc 1 831 0
 2893 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2894 01d0 BB61     		str	r3, [r7, #24]	@ float
 832:modem.c       ****         gps.valid = 1;
 2895              		.loc 1 832 0
 2896 01d2 0123     		movs	r3, #1
 2897 01d4 87F82230 		strb	r3, [r7, #34]
 2898              	.L154:
 833:modem.c       ****     }
 834:modem.c       ****     
 835:modem.c       ****     // Disable LDO, just in case
 836:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2899              		.loc 1 836 0
 2900 01d8 4FF4FA62 		mov	r2, #2000
 2901 01dc 1249     		ldr	r1, .L157+4
 2902 01de 2448     		ldr	r0, .L157+76
 2903 01e0 FFF7FEFF 		bl	at_write_command
 837:modem.c       ****     
 838:modem.c       ****     // Flush modem's GPS data, just in case
 839:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2904              		.loc 1 839 0
 2905 01e4 4FF4FA62 		mov	r2, #2000
 2906 01e8 0F49     		ldr	r1, .L157+4
 2907 01ea 2248     		ldr	r0, .L157+80
 2908 01ec FFF7FEFF 		bl	at_write_command
 840:modem.c       ****     
 841:modem.c       ****     
 842:modem.c       ****     
 843:modem.c       ****     
 844:modem.c       ****     
 845:modem.c       ****     /* Relevant to 3g modem, can ignore
 846:modem.c       ****     
 847:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 848:modem.c       ****     //AT$GPSQOS=50,50,100,0
 849:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 850:modem.c       ****     
 851:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 852:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 853:modem.c       ****     
 854:modem.c       ****     //unlock contedt, simnce its being used by modem
 855:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 856:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 857:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 858:modem.c       ****     
 859:modem.c       ****     //unlock contedt, simnce its being used by modem
 860:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 861:modem.c       ****     
 862:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 863:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 72


 864:modem.c       ****     
 865:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 866:modem.c       ****    uint8 gps_status = 0;
 867:modem.c       ****     for(uint16 i=0;i<200;i++){
 868:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 869:modem.c       ****         if(gps_status){
 870:modem.c       ****             break;   
 871:modem.c       ****         }
 872:modem.c       ****   }
 873:modem.c       ****     
 874:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 875:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 876:modem.c       ****     if(gps_status){
 877:modem.c       ****         float lat,lon,alt = 0;
 878:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 879:modem.c       ****             gps.altitude = alt;
 880:modem.c       ****             gps.latitude = lat/60;
 881:modem.c       ****             gps.longitude = lon/60;
 882:modem.c       ****             gps.valid = 1;
 883:modem.c       ****         }
 884:modem.c       ****         
 885:modem.c       ****     }
 886:modem.c       ****     
 887:modem.c       ****     //turn off gps
 888:modem.c       ****     //AT$GPSP=0
 889:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 890:modem.c       ****     
 891:modem.c       ****     */
 892:modem.c       **** 
 893:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 894:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2909              		.loc 1 894 0
 2910 01f0 FFF7FEFF 		bl	getTimeStamp
 2911 01f4 0246     		mov	r2, r0
 2912 01f6 3B6B     		ldr	r3, [r7, #48]
 2913 01f8 D31A     		subs	r3, r2, r3
 2914 01fa 3B63     		str	r3, [r7, #48]
 895:modem.c       ****     gps.time_to_lock = lock_time;
 2915              		.loc 1 895 0
 2916 01fc 3B6B     		ldr	r3, [r7, #48]
 2917 01fe 9BB2     		uxth	r3, r3
 2918 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 896:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2919              		.loc 1 896 0
 2920 0202 3B8C     		ldrh	r3, [r7, #32]
 2921 0204 1A46     		mov	r2, r3
 2922 0206 1C49     		ldr	r1, .L157+84
 2923 0208 0020     		movs	r0, #0
 2924 020a FFF7FEFF 		bl	printNotif
 897:modem.c       ****     
 898:modem.c       ****     return gps;
 2925              		.loc 1 898 0
 2926 020e 7B68     		ldr	r3, [r7, #4]
 2927 0210 1C46     		mov	r4, r3
 2928 0212 07F11403 		add	r3, r7, #20
 2929 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2930 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 73


 2931              	.L147:
 899:modem.c       ****     
 900:modem.c       **** }
 2932              		.loc 1 900 0
 2933 021c 7868     		ldr	r0, [r7, #4]
 2934 021e 3837     		adds	r7, r7, #56
 2935              		.cfi_def_cfa_offset 16
 2936 0220 BD46     		mov	sp, r7
 2937              		.cfi_def_cfa_register 13
 2938              		@ sp needed
 2939 0222 B0BD     		pop	{r4, r5, r7, pc}
 2940              	.L158:
 2941              		.align	2
 2942              	.L157:
 2943 0224 00000000 		.word	modem_state
 2944 0228 00000000 		.word	.LC0
 2945 022c F8060000 		.word	.LC71
 2946 0230 0C070000 		.word	.LC72
 2947 0234 1C070000 		.word	.LC73
 2948 0238 28070000 		.word	.LC74
 2949 023c 38070000 		.word	.LC75
 2950 0240 5C070000 		.word	.LC76
 2951 0244 6C070000 		.word	.LC77
 2952 0248 D8020000 		.word	.LC27
 2953 024c 7C070000 		.word	.LC78
 2954 0250 94070000 		.word	.LC79
 2955 0254 98070000 		.word	.LC80
 2956 0258 A4070000 		.word	.LC81
 2957 025c 00000000 		.word	uart_received_string
 2958 0260 B0070000 		.word	.LC82
 2959 0264 0000C842 		.word	1120403456
 2960 0268 00005940 		.word	1079574528
 2961 026c 00004E40 		.word	1078853632
 2962 0270 D0070000 		.word	.LC83
 2963 0274 E4070000 		.word	.LC84
 2964 0278 F0070000 		.word	.LC85
 2965              		.cfi_endproc
 2966              	.LFE87:
 2967              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2968              		.text
 2969              	.Letext0:
 2970              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2971              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2972              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2973              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2974              		.file 6 "testing.h"
 2975              		.file 7 "data.h"
 2976              		.file 8 "modem.h"
 2977              		.file 9 "notoriOS.h"
 2978              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2979              		.file 11 "level_sensor.h"
 2980              		.file 12 "App_LED.h"
 2981              		.section	.debug_info,"",%progbits
 2982              	.Ldebug_info0:
 2983 0000 740C0000 		.4byte	0xc74
 2984 0004 0400     		.2byte	0x4
 2985 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 74


 2986 000a 04       		.byte	0x4
 2987 000b 01       		.uleb128 0x1
 2988 000c 9C000000 		.4byte	.LASF170
 2989 0010 0C       		.byte	0xc
 2990 0011 4D040000 		.4byte	.LASF171
 2991 0015 28000000 		.4byte	.LASF172
 2992 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2993 001d 00000000 		.4byte	0
 2994 0021 00000000 		.4byte	.Ldebug_line0
 2995 0025 02       		.uleb128 0x2
 2996 0026 01       		.byte	0x1
 2997 0027 06       		.byte	0x6
 2998 0028 B1010000 		.4byte	.LASF0
 2999 002c 03       		.uleb128 0x3
 3000 002d 70000000 		.4byte	.LASF4
 3001 0031 02       		.byte	0x2
 3002 0032 1D       		.byte	0x1d
 3003 0033 37000000 		.4byte	0x37
 3004 0037 02       		.uleb128 0x2
 3005 0038 01       		.byte	0x1
 3006 0039 08       		.byte	0x8
 3007 003a 27060000 		.4byte	.LASF1
 3008 003e 02       		.uleb128 0x2
 3009 003f 02       		.byte	0x2
 3010 0040 05       		.byte	0x5
 3011 0041 85040000 		.4byte	.LASF2
 3012 0045 02       		.uleb128 0x2
 3013 0046 02       		.byte	0x2
 3014 0047 07       		.byte	0x7
 3015 0048 D2020000 		.4byte	.LASF3
 3016 004c 03       		.uleb128 0x3
 3017 004d 9A040000 		.4byte	.LASF5
 3018 0051 02       		.byte	0x2
 3019 0052 3F       		.byte	0x3f
 3020 0053 57000000 		.4byte	0x57
 3021 0057 02       		.uleb128 0x2
 3022 0058 04       		.byte	0x4
 3023 0059 05       		.byte	0x5
 3024 005a 38020000 		.4byte	.LASF6
 3025 005e 03       		.uleb128 0x3
 3026 005f F5020000 		.4byte	.LASF7
 3027 0063 02       		.byte	0x2
 3028 0064 41       		.byte	0x41
 3029 0065 69000000 		.4byte	0x69
 3030 0069 02       		.uleb128 0x2
 3031 006a 04       		.byte	0x4
 3032 006b 07       		.byte	0x7
 3033 006c B0030000 		.4byte	.LASF8
 3034 0070 02       		.uleb128 0x2
 3035 0071 08       		.byte	0x8
 3036 0072 05       		.byte	0x5
 3037 0073 A3010000 		.4byte	.LASF9
 3038 0077 02       		.uleb128 0x2
 3039 0078 08       		.byte	0x8
 3040 0079 07       		.byte	0x7
 3041 007a 37010000 		.4byte	.LASF10
 3042 007e 04       		.uleb128 0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 75


 3043 007f 04       		.byte	0x4
 3044 0080 05       		.byte	0x5
 3045 0081 696E7400 		.ascii	"int\000"
 3046 0085 02       		.uleb128 0x2
 3047 0086 04       		.byte	0x4
 3048 0087 07       		.byte	0x7
 3049 0088 37070000 		.4byte	.LASF11
 3050 008c 03       		.uleb128 0x3
 3051 008d 85080000 		.4byte	.LASF12
 3052 0091 03       		.byte	0x3
 3053 0092 18       		.byte	0x18
 3054 0093 2C000000 		.4byte	0x2c
 3055 0097 03       		.uleb128 0x3
 3056 0098 1F060000 		.4byte	.LASF13
 3057 009c 03       		.byte	0x3
 3058 009d 2C       		.byte	0x2c
 3059 009e 4C000000 		.4byte	0x4c
 3060 00a2 03       		.uleb128 0x3
 3061 00a3 08080000 		.4byte	.LASF14
 3062 00a7 03       		.byte	0x3
 3063 00a8 30       		.byte	0x30
 3064 00a9 5E000000 		.4byte	0x5e
 3065 00ad 05       		.uleb128 0x5
 3066 00ae 76020000 		.4byte	.LASF15
 3067 00b2 04       		.byte	0x4
 3068 00b3 9201     		.2byte	0x192
 3069 00b5 37000000 		.4byte	0x37
 3070 00b9 05       		.uleb128 0x5
 3071 00ba 0B000000 		.4byte	.LASF16
 3072 00be 04       		.byte	0x4
 3073 00bf 9301     		.2byte	0x193
 3074 00c1 45000000 		.4byte	0x45
 3075 00c5 05       		.uleb128 0x5
 3076 00c6 E5020000 		.4byte	.LASF17
 3077 00ca 04       		.byte	0x4
 3078 00cb 9401     		.2byte	0x194
 3079 00cd 69000000 		.4byte	0x69
 3080 00d1 05       		.uleb128 0x5
 3081 00d2 8D080000 		.4byte	.LASF18
 3082 00d6 04       		.byte	0x4
 3083 00d7 9601     		.2byte	0x196
 3084 00d9 3E000000 		.4byte	0x3e
 3085 00dd 05       		.uleb128 0x5
 3086 00de 9B020000 		.4byte	.LASF19
 3087 00e2 04       		.byte	0x4
 3088 00e3 9701     		.2byte	0x197
 3089 00e5 57000000 		.4byte	0x57
 3090 00e9 02       		.uleb128 0x2
 3091 00ea 04       		.byte	0x4
 3092 00eb 04       		.byte	0x4
 3093 00ec D8050000 		.4byte	.LASF20
 3094 00f0 02       		.uleb128 0x2
 3095 00f1 08       		.byte	0x8
 3096 00f2 04       		.byte	0x4
 3097 00f3 F7080000 		.4byte	.LASF21
 3098 00f7 02       		.uleb128 0x2
 3099 00f8 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 76


 3100 00f9 08       		.byte	0x8
 3101 00fa 1E070000 		.4byte	.LASF22
 3102 00fe 02       		.uleb128 0x2
 3103 00ff 08       		.byte	0x8
 3104 0100 04       		.byte	0x4
 3105 0101 12070000 		.4byte	.LASF23
 3106 0105 02       		.uleb128 0x2
 3107 0106 04       		.byte	0x4
 3108 0107 07       		.byte	0x7
 3109 0108 28050000 		.4byte	.LASF24
 3110 010c 06       		.uleb128 0x6
 3111 010d 04       		.byte	0x4
 3112 010e F7000000 		.4byte	0xf7
 3113 0112 06       		.uleb128 0x6
 3114 0113 04       		.byte	0x4
 3115 0114 18010000 		.4byte	0x118
 3116 0118 07       		.uleb128 0x7
 3117 0119 F7000000 		.4byte	0xf7
 3118 011d 08       		.uleb128 0x8
 3119 011e F7000000 		.4byte	0xf7
 3120 0122 2D010000 		.4byte	0x12d
 3121 0126 09       		.uleb128 0x9
 3122 0127 05010000 		.4byte	0x105
 3123 012b 17       		.byte	0x17
 3124 012c 00       		.byte	0
 3125 012d 0A       		.uleb128 0xa
 3126 012e 746D00   		.ascii	"tm\000"
 3127 0131 24       		.byte	0x24
 3128 0132 05       		.byte	0x5
 3129 0133 21       		.byte	0x21
 3130 0134 A5010000 		.4byte	0x1a5
 3131 0138 0B       		.uleb128 0xb
 3132 0139 11080000 		.4byte	.LASF25
 3133 013d 05       		.byte	0x5
 3134 013e 23       		.byte	0x23
 3135 013f 7E000000 		.4byte	0x7e
 3136 0143 00       		.byte	0
 3137 0144 0B       		.uleb128 0xb
 3138 0145 21050000 		.4byte	.LASF26
 3139 0149 05       		.byte	0x5
 3140 014a 24       		.byte	0x24
 3141 014b 7E000000 		.4byte	0x7e
 3142 014f 04       		.byte	0x4
 3143 0150 0B       		.uleb128 0xb
 3144 0151 18000000 		.4byte	.LASF27
 3145 0155 05       		.byte	0x5
 3146 0156 25       		.byte	0x25
 3147 0157 7E000000 		.4byte	0x7e
 3148 015b 08       		.byte	0x8
 3149 015c 0B       		.uleb128 0xb
 3150 015d F3070000 		.4byte	.LASF28
 3151 0161 05       		.byte	0x5
 3152 0162 26       		.byte	0x26
 3153 0163 7E000000 		.4byte	0x7e
 3154 0167 0C       		.byte	0xc
 3155 0168 0B       		.uleb128 0xb
 3156 0169 17030000 		.4byte	.LASF29
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 77


 3157 016d 05       		.byte	0x5
 3158 016e 27       		.byte	0x27
 3159 016f 7E000000 		.4byte	0x7e
 3160 0173 10       		.byte	0x10
 3161 0174 0B       		.uleb128 0xb
 3162 0175 72030000 		.4byte	.LASF30
 3163 0179 05       		.byte	0x5
 3164 017a 28       		.byte	0x28
 3165 017b 7E000000 		.4byte	0x7e
 3166 017f 14       		.byte	0x14
 3167 0180 0B       		.uleb128 0xb
 3168 0181 CE060000 		.4byte	.LASF31
 3169 0185 05       		.byte	0x5
 3170 0186 29       		.byte	0x29
 3171 0187 7E000000 		.4byte	0x7e
 3172 018b 18       		.byte	0x18
 3173 018c 0B       		.uleb128 0xb
 3174 018d 20000000 		.4byte	.LASF32
 3175 0191 05       		.byte	0x5
 3176 0192 2A       		.byte	0x2a
 3177 0193 7E000000 		.4byte	0x7e
 3178 0197 1C       		.byte	0x1c
 3179 0198 0B       		.uleb128 0xb
 3180 0199 14040000 		.4byte	.LASF33
 3181 019d 05       		.byte	0x5
 3182 019e 2B       		.byte	0x2b
 3183 019f 7E000000 		.4byte	0x7e
 3184 01a3 20       		.byte	0x20
 3185 01a4 00       		.byte	0
 3186 01a5 0C       		.uleb128 0xc
 3187 01a6 8101     		.2byte	0x181
 3188 01a8 06       		.byte	0x6
 3189 01a9 0A       		.byte	0xa
 3190 01aa D3010000 		.4byte	0x1d3
 3191 01ae 0B       		.uleb128 0xb
 3192 01af 72050000 		.4byte	.LASF34
 3193 01b3 06       		.byte	0x6
 3194 01b4 0C       		.byte	0xc
 3195 01b5 D3010000 		.4byte	0x1d3
 3196 01b9 00       		.byte	0
 3197 01ba 0B       		.uleb128 0xb
 3198 01bb 49080000 		.4byte	.LASF35
 3199 01bf 06       		.byte	0x6
 3200 01c0 0D       		.byte	0xd
 3201 01c1 AD000000 		.4byte	0xad
 3202 01c5 80       		.byte	0x80
 3203 01c6 0B       		.uleb128 0xb
 3204 01c7 91060000 		.4byte	.LASF36
 3205 01cb 06       		.byte	0x6
 3206 01cc 0F       		.byte	0xf
 3207 01cd E3010000 		.4byte	0x1e3
 3208 01d1 81       		.byte	0x81
 3209 01d2 00       		.byte	0
 3210 01d3 08       		.uleb128 0x8
 3211 01d4 F7000000 		.4byte	0xf7
 3212 01d8 E3010000 		.4byte	0x1e3
 3213 01dc 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 78


 3214 01dd 05010000 		.4byte	0x105
 3215 01e1 7F       		.byte	0x7f
 3216 01e2 00       		.byte	0
 3217 01e3 08       		.uleb128 0x8
 3218 01e4 F7000000 		.4byte	0xf7
 3219 01e8 F3010000 		.4byte	0x1f3
 3220 01ec 09       		.uleb128 0x9
 3221 01ed 05010000 		.4byte	0x105
 3222 01f1 FF       		.byte	0xff
 3223 01f2 00       		.byte	0
 3224 01f3 03       		.uleb128 0x3
 3225 01f4 79060000 		.4byte	.LASF37
 3226 01f8 06       		.byte	0x6
 3227 01f9 10       		.byte	0x10
 3228 01fa A5010000 		.4byte	0x1a5
 3229 01fe 0D       		.uleb128 0xd
 3230 01ff 2C       		.byte	0x2c
 3231 0200 07       		.byte	0x7
 3232 0201 14       		.byte	0x14
 3233 0202 2B020000 		.4byte	0x22b
 3234 0206 0E       		.uleb128 0xe
 3235 0207 6B657900 		.ascii	"key\000"
 3236 020b 07       		.byte	0x7
 3237 020c 15       		.byte	0x15
 3238 020d 2B020000 		.4byte	0x22b
 3239 0211 00       		.byte	0
 3240 0212 0B       		.uleb128 0xb
 3241 0213 12000000 		.4byte	.LASF38
 3242 0217 07       		.byte	0x7
 3243 0218 16       		.byte	0x16
 3244 0219 2B020000 		.4byte	0x22b
 3245 021d 14       		.byte	0x14
 3246 021e 0B       		.uleb128 0xb
 3247 021f F0030000 		.4byte	.LASF39
 3248 0223 07       		.byte	0x7
 3249 0224 17       		.byte	0x17
 3250 0225 DD000000 		.4byte	0xdd
 3251 0229 28       		.byte	0x28
 3252 022a 00       		.byte	0
 3253 022b 08       		.uleb128 0x8
 3254 022c F7000000 		.4byte	0xf7
 3255 0230 3B020000 		.4byte	0x23b
 3256 0234 09       		.uleb128 0x9
 3257 0235 05010000 		.4byte	0x105
 3258 0239 13       		.byte	0x13
 3259 023a 00       		.byte	0
 3260 023b 03       		.uleb128 0x3
 3261 023c 9A030000 		.4byte	.LASF40
 3262 0240 07       		.byte	0x7
 3263 0241 19       		.byte	0x19
 3264 0242 FE010000 		.4byte	0x1fe
 3265 0246 0D       		.uleb128 0xd
 3266 0247 3C       		.byte	0x3c
 3267 0248 08       		.byte	0x8
 3268 0249 35       		.byte	0x35
 3269 024a 73020000 		.4byte	0x273
 3270 024e 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 79


 3271 024f EC070000 		.4byte	.LASF41
 3272 0253 08       		.byte	0x8
 3273 0254 36       		.byte	0x36
 3274 0255 2B020000 		.4byte	0x22b
 3275 0259 00       		.byte	0
 3276 025a 0B       		.uleb128 0xb
 3277 025b 49070000 		.4byte	.LASF42
 3278 025f 08       		.byte	0x8
 3279 0260 37       		.byte	0x37
 3280 0261 2B020000 		.4byte	0x22b
 3281 0265 14       		.byte	0x14
 3282 0266 0B       		.uleb128 0xb
 3283 0267 8C060000 		.4byte	.LASF43
 3284 026b 08       		.byte	0x8
 3285 026c 38       		.byte	0x38
 3286 026d 2B020000 		.4byte	0x22b
 3287 0271 28       		.byte	0x28
 3288 0272 00       		.byte	0
 3289 0273 03       		.uleb128 0x3
 3290 0274 5D070000 		.4byte	.LASF44
 3291 0278 08       		.byte	0x8
 3292 0279 3A       		.byte	0x3a
 3293 027a 46020000 		.4byte	0x246
 3294 027e 0D       		.uleb128 0xd
 3295 027f 20       		.byte	0x20
 3296 0280 08       		.byte	0x8
 3297 0281 3C       		.byte	0x3c
 3298 0282 E7020000 		.4byte	0x2e7
 3299 0286 0B       		.uleb128 0xb
 3300 0287 41020000 		.4byte	.LASF45
 3301 028b 08       		.byte	0x8
 3302 028c 3D       		.byte	0x3d
 3303 028d 7E000000 		.4byte	0x7e
 3304 0291 00       		.byte	0
 3305 0292 0E       		.uleb128 0xe
 3306 0293 62657200 		.ascii	"ber\000"
 3307 0297 08       		.byte	0x8
 3308 0298 3E       		.byte	0x3e
 3309 0299 7E000000 		.4byte	0x7e
 3310 029d 04       		.byte	0x4
 3311 029e 0B       		.uleb128 0xb
 3312 029f 5A060000 		.4byte	.LASF46
 3313 02a3 08       		.byte	0x8
 3314 02a4 3F       		.byte	0x3f
 3315 02a5 7E000000 		.4byte	0x7e
 3316 02a9 08       		.byte	0x8
 3317 02aa 0B       		.uleb128 0xb
 3318 02ab BD010000 		.4byte	.LASF47
 3319 02af 08       		.byte	0x8
 3320 02b0 40       		.byte	0x40
 3321 02b1 7E000000 		.4byte	0x7e
 3322 02b5 0C       		.byte	0xc
 3323 02b6 0B       		.uleb128 0xb
 3324 02b7 4B060000 		.4byte	.LASF48
 3325 02bb 08       		.byte	0x8
 3326 02bc 41       		.byte	0x41
 3327 02bd 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 80


 3328 02c1 10       		.byte	0x10
 3329 02c2 0B       		.uleb128 0xb
 3330 02c3 98060000 		.4byte	.LASF49
 3331 02c7 08       		.byte	0x8
 3332 02c8 42       		.byte	0x42
 3333 02c9 7E000000 		.4byte	0x7e
 3334 02cd 14       		.byte	0x14
 3335 02ce 0B       		.uleb128 0xb
 3336 02cf DF010000 		.4byte	.LASF50
 3337 02d3 08       		.byte	0x8
 3338 02d4 43       		.byte	0x43
 3339 02d5 7E000000 		.4byte	0x7e
 3340 02d9 18       		.byte	0x18
 3341 02da 0B       		.uleb128 0xb
 3342 02db 68040000 		.4byte	.LASF51
 3343 02df 08       		.byte	0x8
 3344 02e0 44       		.byte	0x44
 3345 02e1 7E000000 		.4byte	0x7e
 3346 02e5 1C       		.byte	0x1c
 3347 02e6 00       		.byte	0
 3348 02e7 03       		.uleb128 0x3
 3349 02e8 9D060000 		.4byte	.LASF52
 3350 02ec 08       		.byte	0x8
 3351 02ed 46       		.byte	0x46
 3352 02ee 7E020000 		.4byte	0x27e
 3353 02f2 0D       		.uleb128 0xd
 3354 02f3 10       		.byte	0x10
 3355 02f4 08       		.byte	0x8
 3356 02f5 48       		.byte	0x48
 3357 02f6 37030000 		.4byte	0x337
 3358 02fa 0B       		.uleb128 0xb
 3359 02fb 69050000 		.4byte	.LASF53
 3360 02ff 08       		.byte	0x8
 3361 0300 49       		.byte	0x49
 3362 0301 E9000000 		.4byte	0xe9
 3363 0305 00       		.byte	0
 3364 0306 0B       		.uleb128 0xb
 3365 0307 92000000 		.4byte	.LASF54
 3366 030b 08       		.byte	0x8
 3367 030c 4A       		.byte	0x4a
 3368 030d E9000000 		.4byte	0xe9
 3369 0311 04       		.byte	0x4
 3370 0312 0B       		.uleb128 0xb
 3371 0313 6D020000 		.4byte	.LASF55
 3372 0317 08       		.byte	0x8
 3373 0318 4B       		.byte	0x4b
 3374 0319 E9000000 		.4byte	0xe9
 3375 031d 08       		.byte	0x8
 3376 031e 0B       		.uleb128 0xb
 3377 031f FA030000 		.4byte	.LASF56
 3378 0323 08       		.byte	0x8
 3379 0324 4C       		.byte	0x4c
 3380 0325 B9000000 		.4byte	0xb9
 3381 0329 0C       		.byte	0xc
 3382 032a 0B       		.uleb128 0xb
 3383 032b FB070000 		.4byte	.LASF57
 3384 032f 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 81


 3385 0330 4D       		.byte	0x4d
 3386 0331 AD000000 		.4byte	0xad
 3387 0335 0E       		.byte	0xe
 3388 0336 00       		.byte	0
 3389 0337 03       		.uleb128 0x3
 3390 0338 6A070000 		.4byte	.LASF58
 3391 033c 08       		.byte	0x8
 3392 033d 4F       		.byte	0x4f
 3393 033e F2020000 		.4byte	0x2f2
 3394 0342 0D       		.uleb128 0xd
 3395 0343 06       		.byte	0x6
 3396 0344 08       		.byte	0x8
 3397 0345 52       		.byte	0x52
 3398 0346 93030000 		.4byte	0x393
 3399 034a 0B       		.uleb128 0xb
 3400 034b FD050000 		.4byte	.LASF59
 3401 034f 08       		.byte	0x8
 3402 0350 56       		.byte	0x56
 3403 0351 93030000 		.4byte	0x393
 3404 0355 00       		.byte	0
 3405 0356 0B       		.uleb128 0xb
 3406 0357 82070000 		.4byte	.LASF60
 3407 035b 08       		.byte	0x8
 3408 035c 58       		.byte	0x58
 3409 035d AD000000 		.4byte	0xad
 3410 0361 01       		.byte	0x1
 3411 0362 0B       		.uleb128 0xb
 3412 0363 50060000 		.4byte	.LASF61
 3413 0367 08       		.byte	0x8
 3414 0368 5A       		.byte	0x5a
 3415 0369 AD000000 		.4byte	0xad
 3416 036d 02       		.byte	0x2
 3417 036e 0B       		.uleb128 0xb
 3418 036f 2D030000 		.4byte	.LASF62
 3419 0373 08       		.byte	0x8
 3420 0374 5D       		.byte	0x5d
 3421 0375 AD000000 		.4byte	0xad
 3422 0379 03       		.byte	0x3
 3423 037a 0B       		.uleb128 0xb
 3424 037b 69080000 		.4byte	.LASF63
 3425 037f 08       		.byte	0x8
 3426 0380 62       		.byte	0x62
 3427 0381 AD000000 		.4byte	0xad
 3428 0385 04       		.byte	0x4
 3429 0386 0B       		.uleb128 0xb
 3430 0387 ED060000 		.4byte	.LASF64
 3431 038b 08       		.byte	0x8
 3432 038c 64       		.byte	0x64
 3433 038d AD000000 		.4byte	0xad
 3434 0391 05       		.byte	0x5
 3435 0392 00       		.byte	0
 3436 0393 02       		.uleb128 0x2
 3437 0394 01       		.byte	0x1
 3438 0395 02       		.byte	0x2
 3439 0396 19060000 		.4byte	.LASF65
 3440 039a 03       		.uleb128 0x3
 3441 039b EC040000 		.4byte	.LASF66
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 82


 3442 039f 08       		.byte	0x8
 3443 03a0 66       		.byte	0x66
 3444 03a1 42030000 		.4byte	0x342
 3445 03a5 0D       		.uleb128 0xd
 3446 03a6 06       		.byte	0x6
 3447 03a7 09       		.byte	0x9
 3448 03a8 2E       		.byte	0x2e
 3449 03a9 DE030000 		.4byte	0x3de
 3450 03ad 0B       		.uleb128 0xb
 3451 03ae C2010000 		.4byte	.LASF67
 3452 03b2 09       		.byte	0x9
 3453 03b3 30       		.byte	0x30
 3454 03b4 B9000000 		.4byte	0xb9
 3455 03b8 00       		.byte	0
 3456 03b9 0B       		.uleb128 0xb
 3457 03ba 47020000 		.4byte	.LASF68
 3458 03be 09       		.byte	0x9
 3459 03bf 31       		.byte	0x31
 3460 03c0 D1000000 		.4byte	0xd1
 3461 03c4 02       		.byte	0x2
 3462 03c5 0B       		.uleb128 0xb
 3463 03c6 A5080000 		.4byte	.LASF69
 3464 03ca 09       		.byte	0x9
 3465 03cb 32       		.byte	0x32
 3466 03cc AD000000 		.4byte	0xad
 3467 03d0 04       		.byte	0x4
 3468 03d1 0B       		.uleb128 0xb
 3469 03d2 7A000000 		.4byte	.LASF70
 3470 03d6 09       		.byte	0x9
 3471 03d7 33       		.byte	0x33
 3472 03d8 AD000000 		.4byte	0xad
 3473 03dc 05       		.byte	0x5
 3474 03dd 00       		.byte	0
 3475 03de 03       		.uleb128 0x3
 3476 03df 13060000 		.4byte	.LASF71
 3477 03e3 09       		.byte	0x9
 3478 03e4 36       		.byte	0x36
 3479 03e5 E9030000 		.4byte	0x3e9
 3480 03e9 0F       		.uleb128 0xf
 3481 03ea A5030000 		.4byte	0x3a5
 3482 03ee 0D       		.uleb128 0xd
 3483 03ef 1C       		.byte	0x1c
 3484 03f0 09       		.byte	0x9
 3485 03f1 39       		.byte	0x39
 3486 03f2 0F040000 		.4byte	0x40f
 3487 03f6 0B       		.uleb128 0xb
 3488 03f7 1D040000 		.4byte	.LASF72
 3489 03fb 09       		.byte	0x9
 3490 03fc 3B       		.byte	0x3b
 3491 03fd 0F040000 		.4byte	0x40f
 3492 0401 00       		.byte	0
 3493 0402 0B       		.uleb128 0xb
 3494 0403 30040000 		.4byte	.LASF73
 3495 0407 09       		.byte	0x9
 3496 0408 3C       		.byte	0x3c
 3497 0409 1D010000 		.4byte	0x11d
 3498 040d 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 83


 3499 040e 00       		.byte	0
 3500 040f 06       		.uleb128 0x6
 3501 0410 04       		.byte	0x4
 3502 0411 73020000 		.4byte	0x273
 3503 0415 03       		.uleb128 0x3
 3504 0416 E1040000 		.4byte	.LASF74
 3505 041a 09       		.byte	0x9
 3506 041b 3E       		.byte	0x3e
 3507 041c EE030000 		.4byte	0x3ee
 3508 0420 0D       		.uleb128 0xd
 3509 0421 68       		.byte	0x68
 3510 0422 09       		.byte	0x9
 3511 0423 44       		.byte	0x44
 3512 0424 41040000 		.4byte	0x441
 3513 0428 0B       		.uleb128 0xb
 3514 0429 28040000 		.4byte	.LASF75
 3515 042d 09       		.byte	0x9
 3516 042e 49       		.byte	0x49
 3517 042f 41040000 		.4byte	0x441
 3518 0433 00       		.byte	0
 3519 0434 0B       		.uleb128 0xb
 3520 0435 0C040000 		.4byte	.LASF76
 3521 0439 09       		.byte	0x9
 3522 043a 4A       		.byte	0x4a
 3523 043b 7E000000 		.4byte	0x7e
 3524 043f 64       		.byte	0x64
 3525 0440 00       		.byte	0
 3526 0441 08       		.uleb128 0x8
 3527 0442 F7000000 		.4byte	0xf7
 3528 0446 51040000 		.4byte	0x451
 3529 044a 09       		.uleb128 0x9
 3530 044b 05010000 		.4byte	0x105
 3531 044f 63       		.byte	0x63
 3532 0450 00       		.byte	0
 3533 0451 03       		.uleb128 0x3
 3534 0452 76080000 		.4byte	.LASF77
 3535 0456 09       		.byte	0x9
 3536 0457 50       		.byte	0x50
 3537 0458 20040000 		.4byte	0x420
 3538 045c 10       		.uleb128 0x10
 3539 045d 06060000 		.4byte	.LASF109
 3540 0461 01       		.byte	0x1
 3541 0462 12       		.byte	0x12
 3542 0463 00000000 		.4byte	.LFB64
 3543 0467 44000000 		.4byte	.LFE64-.LFB64
 3544 046b 01       		.uleb128 0x1
 3545 046c 9C       		.byte	0x9c
 3546 046d 11       		.uleb128 0x11
 3547 046e DE050000 		.4byte	.LASF78
 3548 0472 01       		.byte	0x1
 3549 0473 1C       		.byte	0x1c
 3550 0474 00000000 		.4byte	.LFB65
 3551 0478 6C000000 		.4byte	.LFE65-.LFB65
 3552 047c 01       		.uleb128 0x1
 3553 047d 9C       		.byte	0x9c
 3554 047e 11       		.uleb128 0x11
 3555 047f CA070000 		.4byte	.LASF79
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 84


 3556 0483 01       		.byte	0x1
 3557 0484 36       		.byte	0x36
 3558 0485 00000000 		.4byte	.LFB66
 3559 0489 32000000 		.4byte	.LFE66-.LFB66
 3560 048d 01       		.uleb128 0x1
 3561 048e 9C       		.byte	0x9c
 3562 048f 11       		.uleb128 0x11
 3563 0490 84030000 		.4byte	.LASF80
 3564 0494 01       		.byte	0x1
 3565 0495 46       		.byte	0x46
 3566 0496 00000000 		.4byte	.LFB67
 3567 049a 20000000 		.4byte	.LFE67-.LFB67
 3568 049e 01       		.uleb128 0x1
 3569 049f 9C       		.byte	0x9c
 3570 04a0 11       		.uleb128 0x11
 3571 04a1 E6080000 		.4byte	.LASF81
 3572 04a5 01       		.byte	0x1
 3573 04a6 4F       		.byte	0x4f
 3574 04a7 00000000 		.4byte	.LFB68
 3575 04ab 40000000 		.4byte	.LFE68-.LFB68
 3576 04af 01       		.uleb128 0x1
 3577 04b0 9C       		.byte	0x9c
 3578 04b1 12       		.uleb128 0x12
 3579 04b2 3E040000 		.4byte	.LASF95
 3580 04b6 01       		.byte	0x1
 3581 04b7 61       		.byte	0x61
 3582 04b8 AD000000 		.4byte	0xad
 3583 04bc 00000000 		.4byte	.LFB69
 3584 04c0 DC000000 		.4byte	.LFE69-.LFB69
 3585 04c4 01       		.uleb128 0x1
 3586 04c5 9C       		.byte	0x9c
 3587 04c6 25050000 		.4byte	0x525
 3588 04ca 13       		.uleb128 0x13
 3589 04cb 93080000 		.4byte	.LASF82
 3590 04cf 01       		.byte	0x1
 3591 04d0 6A       		.byte	0x6a
 3592 04d1 AD000000 		.4byte	0xad
 3593 04d5 02       		.uleb128 0x2
 3594 04d6 91       		.byte	0x91
 3595 04d7 77       		.sleb128 -9
 3596 04d8 13       		.uleb128 0x13
 3597 04d9 9C080000 		.4byte	.LASF83
 3598 04dd 01       		.byte	0x1
 3599 04de 6B       		.byte	0x6b
 3600 04df AD000000 		.4byte	0xad
 3601 04e3 02       		.uleb128 0x2
 3602 04e4 91       		.byte	0x91
 3603 04e5 74       		.sleb128 -12
 3604 04e6 13       		.uleb128 0x13
 3605 04e7 B3080000 		.4byte	.LASF84
 3606 04eb 01       		.byte	0x1
 3607 04ec 6D       		.byte	0x6d
 3608 04ed 57000000 		.4byte	0x57
 3609 04f1 02       		.uleb128 0x2
 3610 04f2 91       		.byte	0x91
 3611 04f3 70       		.sleb128 -16
 3612 04f4 14       		.uleb128 0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 85


 3613 04f5 26000000 		.4byte	.LBB2
 3614 04f9 4A000000 		.4byte	.LBE2-.LBB2
 3615 04fd 13       		.uleb128 0x13
 3616 04fe 9C080000 		.4byte	.LASF83
 3617 0502 01       		.byte	0x1
 3618 0503 70       		.byte	0x70
 3619 0504 AD000000 		.4byte	0xad
 3620 0508 02       		.uleb128 0x2
 3621 0509 91       		.byte	0x91
 3622 050a 76       		.sleb128 -10
 3623 050b 14       		.uleb128 0x14
 3624 050c 2C000000 		.4byte	.LBB3
 3625 0510 2A000000 		.4byte	.LBE3-.LBB3
 3626 0514 13       		.uleb128 0x13
 3627 0515 A6030000 		.4byte	.LASF85
 3628 0519 01       		.byte	0x1
 3629 051a 72       		.byte	0x72
 3630 051b AD000000 		.4byte	0xad
 3631 051f 02       		.uleb128 0x2
 3632 0520 91       		.byte	0x91
 3633 0521 75       		.sleb128 -11
 3634 0522 00       		.byte	0
 3635 0523 00       		.byte	0
 3636 0524 00       		.byte	0
 3637 0525 11       		.uleb128 0x11
 3638 0526 D6060000 		.4byte	.LASF86
 3639 052a 01       		.byte	0x1
 3640 052b 93       		.byte	0x93
 3641 052c 00000000 		.4byte	.LFB70
 3642 0530 1C000000 		.4byte	.LFE70-.LFB70
 3643 0534 01       		.uleb128 0x1
 3644 0535 9C       		.byte	0x9c
 3645 0536 11       		.uleb128 0x11
 3646 0537 AB060000 		.4byte	.LASF87
 3647 053b 01       		.byte	0x1
 3648 053c 9B       		.byte	0x9b
 3649 053d 00000000 		.4byte	.LFB71
 3650 0541 28000000 		.4byte	.LFE71-.LFB71
 3651 0545 01       		.uleb128 0x1
 3652 0546 9C       		.byte	0x9c
 3653 0547 15       		.uleb128 0x15
 3654 0548 D0040000 		.4byte	.LASF99
 3655 054c 01       		.byte	0x1
 3656 054d A6       		.byte	0xa6
 3657 054e 8C000000 		.4byte	0x8c
 3658 0552 00000000 		.4byte	.LFB72
 3659 0556 C8000000 		.4byte	.LFE72-.LFB72
 3660 055a 01       		.uleb128 0x1
 3661 055b 9C       		.byte	0x9c
 3662 055c D9050000 		.4byte	0x5d9
 3663 0560 16       		.uleb128 0x16
 3664 0561 BE050000 		.4byte	.LASF88
 3665 0565 01       		.byte	0x1
 3666 0566 A6       		.byte	0xa6
 3667 0567 0C010000 		.4byte	0x10c
 3668 056b 02       		.uleb128 0x2
 3669 056c 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 86


 3670 056d 5C       		.sleb128 -36
 3671 056e 16       		.uleb128 0x16
 3672 056f BD080000 		.4byte	.LASF89
 3673 0573 01       		.byte	0x1
 3674 0574 A6       		.byte	0xa6
 3675 0575 0C010000 		.4byte	0x10c
 3676 0579 02       		.uleb128 0x2
 3677 057a 91       		.byte	0x91
 3678 057b 58       		.sleb128 -40
 3679 057c 16       		.uleb128 0x16
 3680 057d D1030000 		.4byte	.LASF90
 3681 0581 01       		.byte	0x1
 3682 0582 A6       		.byte	0xa6
 3683 0583 A2000000 		.4byte	0xa2
 3684 0587 02       		.uleb128 0x2
 3685 0588 91       		.byte	0x91
 3686 0589 54       		.sleb128 -44
 3687 058a 13       		.uleb128 0x13
 3688 058b C5040000 		.4byte	.LASF91
 3689 058f 01       		.byte	0x1
 3690 0590 A8       		.byte	0xa8
 3691 0591 C5000000 		.4byte	0xc5
 3692 0595 02       		.uleb128 0x2
 3693 0596 91       		.byte	0x91
 3694 0597 74       		.sleb128 -12
 3695 0598 14       		.uleb128 0x14
 3696 0599 16000000 		.4byte	.LBB4
 3697 059d 88000000 		.4byte	.LBE4-.LBB4
 3698 05a1 13       		.uleb128 0x13
 3699 05a2 C7050000 		.4byte	.LASF92
 3700 05a6 01       		.byte	0x1
 3701 05a7 AC       		.byte	0xac
 3702 05a8 0C010000 		.4byte	0x10c
 3703 05ac 02       		.uleb128 0x2
 3704 05ad 91       		.byte	0x91
 3705 05ae 64       		.sleb128 -28
 3706 05af 13       		.uleb128 0x13
 3707 05b0 45060000 		.4byte	.LASF93
 3708 05b4 01       		.byte	0x1
 3709 05b5 AD       		.byte	0xad
 3710 05b6 A2000000 		.4byte	0xa2
 3711 05ba 02       		.uleb128 0x2
 3712 05bb 91       		.byte	0x91
 3713 05bc 6C       		.sleb128 -20
 3714 05bd 17       		.uleb128 0x17
 3715 05be 6900     		.ascii	"i\000"
 3716 05c0 01       		.byte	0x1
 3717 05c1 AE       		.byte	0xae
 3718 05c2 A2000000 		.4byte	0xa2
 3719 05c6 02       		.uleb128 0x2
 3720 05c7 91       		.byte	0x91
 3721 05c8 70       		.sleb128 -16
 3722 05c9 13       		.uleb128 0x13
 3723 05ca EC020000 		.4byte	.LASF94
 3724 05ce 01       		.byte	0x1
 3725 05cf AE       		.byte	0xae
 3726 05d0 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 87


 3727 05d4 02       		.uleb128 0x2
 3728 05d5 91       		.byte	0x91
 3729 05d6 68       		.sleb128 -24
 3730 05d7 00       		.byte	0
 3731 05d8 00       		.byte	0
 3732 05d9 12       		.uleb128 0x12
 3733 05da 93050000 		.4byte	.LASF96
 3734 05de 01       		.byte	0x1
 3735 05df DA       		.byte	0xda
 3736 05e0 F3010000 		.4byte	0x1f3
 3737 05e4 00000000 		.4byte	.LFB73
 3738 05e8 00010000 		.4byte	.LFE73-.LFB73
 3739 05ec 01       		.uleb128 0x1
 3740 05ed 9C       		.byte	0x9c
 3741 05ee 30060000 		.4byte	0x630
 3742 05f2 13       		.uleb128 0x13
 3743 05f3 66010000 		.4byte	.LASF97
 3744 05f7 01       		.byte	0x1
 3745 05f8 DC       		.byte	0xdc
 3746 05f9 F3010000 		.4byte	0x1f3
 3747 05fd 03       		.uleb128 0x3
 3748 05fe 91       		.byte	0x91
 3749 05ff E47C     		.sleb128 -412
 3750 0601 14       		.uleb128 0x14
 3751 0602 4A000000 		.4byte	.LBB5
 3752 0606 86000000 		.4byte	.LBE5-.LBB5
 3753 060a 17       		.uleb128 0x17
 3754 060b 6900     		.ascii	"i\000"
 3755 060d 01       		.byte	0x1
 3756 060e E3       		.byte	0xe3
 3757 060f 7E000000 		.4byte	0x7e
 3758 0613 02       		.uleb128 0x2
 3759 0614 91       		.byte	0x91
 3760 0615 6C       		.sleb128 -20
 3761 0616 14       		.uleb128 0x14
 3762 0617 70000000 		.4byte	.LBB6
 3763 061b 46000000 		.4byte	.LBE6-.LBB6
 3764 061f 13       		.uleb128 0x13
 3765 0620 C5020000 		.4byte	.LASF98
 3766 0624 01       		.byte	0x1
 3767 0625 F0       		.byte	0xf0
 3768 0626 57000000 		.4byte	0x57
 3769 062a 02       		.uleb128 0x2
 3770 062b 91       		.byte	0x91
 3771 062c 68       		.sleb128 -24
 3772 062d 00       		.byte	0
 3773 062e 00       		.byte	0
 3774 062f 00       		.byte	0
 3775 0630 18       		.uleb128 0x18
 3776 0631 C2030000 		.4byte	.LASF100
 3777 0635 01       		.byte	0x1
 3778 0636 0401     		.2byte	0x104
 3779 0638 AD000000 		.4byte	0xad
 3780 063c 00000000 		.4byte	.LFB74
 3781 0640 78000000 		.4byte	.LFE74-.LFB74
 3782 0644 01       		.uleb128 0x1
 3783 0645 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 88


 3784 0646 A1060000 		.4byte	0x6a1
 3785 064a 19       		.uleb128 0x19
 3786 064b B0040000 		.4byte	.LASF101
 3787 064f 01       		.byte	0x1
 3788 0650 0401     		.2byte	0x104
 3789 0652 0C010000 		.4byte	0x10c
 3790 0656 02       		.uleb128 0x2
 3791 0657 91       		.byte	0x91
 3792 0658 6C       		.sleb128 -20
 3793 0659 19       		.uleb128 0x19
 3794 065a 55040000 		.4byte	.LASF102
 3795 065e 01       		.byte	0x1
 3796 065f 0401     		.2byte	0x104
 3797 0661 12010000 		.4byte	0x112
 3798 0665 02       		.uleb128 0x2
 3799 0666 91       		.byte	0x91
 3800 0667 68       		.sleb128 -24
 3801 0668 19       		.uleb128 0x19
 3802 0669 7B040000 		.4byte	.LASF103
 3803 066d 01       		.byte	0x1
 3804 066e 0401     		.2byte	0x104
 3805 0670 12010000 		.4byte	0x112
 3806 0674 02       		.uleb128 0x2
 3807 0675 91       		.byte	0x91
 3808 0676 64       		.sleb128 -28
 3809 0677 19       		.uleb128 0x19
 3810 0678 61040000 		.4byte	.LASF104
 3811 067c 01       		.byte	0x1
 3812 067d 0401     		.2byte	0x104
 3813 067f 0C010000 		.4byte	0x10c
 3814 0683 02       		.uleb128 0x2
 3815 0684 91       		.byte	0x91
 3816 0685 60       		.sleb128 -32
 3817 0686 1A       		.uleb128 0x1a
 3818 0687 6100     		.ascii	"a\000"
 3819 0689 01       		.byte	0x1
 3820 068a 0601     		.2byte	0x106
 3821 068c 0C010000 		.4byte	0x10c
 3822 0690 02       		.uleb128 0x2
 3823 0691 91       		.byte	0x91
 3824 0692 74       		.sleb128 -12
 3825 0693 1A       		.uleb128 0x1a
 3826 0694 6200     		.ascii	"b\000"
 3827 0696 01       		.byte	0x1
 3828 0697 0601     		.2byte	0x106
 3829 0699 0C010000 		.4byte	0x10c
 3830 069d 02       		.uleb128 0x2
 3831 069e 91       		.byte	0x91
 3832 069f 70       		.sleb128 -16
 3833 06a0 00       		.byte	0
 3834 06a1 1B       		.uleb128 0x1b
 3835 06a2 23070000 		.4byte	.LASF105
 3836 06a6 01       		.byte	0x1
 3837 06a7 2301     		.2byte	0x123
 3838 06a9 AD000000 		.4byte	0xad
 3839 06ad 00000000 		.4byte	.LFB75
 3840 06b1 74010000 		.4byte	.LFE75-.LFB75
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 89


 3841 06b5 01       		.uleb128 0x1
 3842 06b6 9C       		.byte	0x9c
 3843 06b7 D3060000 		.4byte	0x6d3
 3844 06bb 14       		.uleb128 0x14
 3845 06bc 2E000000 		.4byte	.LBB7
 3846 06c0 68000000 		.4byte	.LBE7-.LBB7
 3847 06c4 1A       		.uleb128 0x1a
 3848 06c5 6900     		.ascii	"i\000"
 3849 06c7 01       		.byte	0x1
 3850 06c8 3101     		.2byte	0x131
 3851 06ca AD000000 		.4byte	0xad
 3852 06ce 02       		.uleb128 0x2
 3853 06cf 91       		.byte	0x91
 3854 06d0 77       		.sleb128 -9
 3855 06d1 00       		.byte	0
 3856 06d2 00       		.byte	0
 3857 06d3 1B       		.uleb128 0x1b
 3858 06d4 37050000 		.4byte	.LASF106
 3859 06d8 01       		.byte	0x1
 3860 06d9 7501     		.2byte	0x175
 3861 06db AD000000 		.4byte	0xad
 3862 06df 00000000 		.4byte	.LFB76
 3863 06e3 B8000000 		.4byte	.LFE76-.LFB76
 3864 06e7 01       		.uleb128 0x1
 3865 06e8 9C       		.byte	0x9c
 3866 06e9 16070000 		.4byte	0x716
 3867 06ed 1C       		.uleb128 0x1c
 3868 06ee 49080000 		.4byte	.LASF35
 3869 06f2 01       		.byte	0x1
 3870 06f3 7901     		.2byte	0x179
 3871 06f5 AD000000 		.4byte	0xad
 3872 06f9 02       		.uleb128 0x2
 3873 06fa 91       		.byte	0x91
 3874 06fb 77       		.sleb128 -9
 3875 06fc 14       		.uleb128 0x14
 3876 06fd 36000000 		.4byte	.LBB8
 3877 0701 48000000 		.4byte	.LBE8-.LBB8
 3878 0705 1C       		.uleb128 0x1c
 3879 0706 B5040000 		.4byte	.LASF107
 3880 070a 01       		.byte	0x1
 3881 070b 8101     		.2byte	0x181
 3882 070d 16070000 		.4byte	0x716
 3883 0711 02       		.uleb128 0x2
 3884 0712 91       		.byte	0x91
 3885 0713 6C       		.sleb128 -20
 3886 0714 00       		.byte	0
 3887 0715 00       		.byte	0
 3888 0716 08       		.uleb128 0x8
 3889 0717 F7000000 		.4byte	0xf7
 3890 071b 26070000 		.4byte	0x726
 3891 071f 09       		.uleb128 0x9
 3892 0720 05010000 		.4byte	0x105
 3893 0724 09       		.byte	0x9
 3894 0725 00       		.byte	0
 3895 0726 1D       		.uleb128 0x1d
 3896 0727 0C020000 		.4byte	.LASF108
 3897 072b 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 90


 3898 072c 9301     		.2byte	0x193
 3899 072e 00000000 		.4byte	.LFB77
 3900 0732 1C000000 		.4byte	.LFE77-.LFB77
 3901 0736 01       		.uleb128 0x1
 3902 0737 9C       		.byte	0x9c
 3903 0738 1E       		.uleb128 0x1e
 3904 0739 8F070000 		.4byte	.LASF110
 3905 073d 01       		.byte	0x1
 3906 073e A301     		.2byte	0x1a3
 3907 0740 AD000000 		.4byte	0xad
 3908 0744 00000000 		.4byte	.LFB78
 3909 0748 28000000 		.4byte	.LFE78-.LFB78
 3910 074c 01       		.uleb128 0x1
 3911 074d 9C       		.byte	0x9c
 3912 074e 1F       		.uleb128 0x1f
 3913 074f D9030000 		.4byte	.LASF113
 3914 0753 01       		.byte	0x1
 3915 0754 AE01     		.2byte	0x1ae
 3916 0756 00000000 		.4byte	.LFB79
 3917 075a 84000000 		.4byte	.LFE79-.LFB79
 3918 075e 01       		.uleb128 0x1
 3919 075f 9C       		.byte	0x9c
 3920 0760 74070000 		.4byte	0x774
 3921 0764 1C       		.uleb128 0x1c
 3922 0765 9E050000 		.4byte	.LASF111
 3923 0769 01       		.byte	0x1
 3924 076a BB01     		.2byte	0x1bb
 3925 076c 7E000000 		.4byte	0x7e
 3926 0770 02       		.uleb128 0x2
 3927 0771 91       		.byte	0x91
 3928 0772 74       		.sleb128 -12
 3929 0773 00       		.byte	0
 3930 0774 20       		.uleb128 0x20
 3931 0775 52030000 		.4byte	.LASF112
 3932 0779 01       		.byte	0x1
 3933 077a CD01     		.2byte	0x1cd
 3934 077c 00000000 		.4byte	.LFB80
 3935 0780 30000000 		.4byte	.LFE80-.LFB80
 3936 0784 01       		.uleb128 0x1
 3937 0785 9C       		.byte	0x9c
 3938 0786 1F       		.uleb128 0x1f
 3939 0787 18080000 		.4byte	.LASF114
 3940 078b 01       		.byte	0x1
 3941 078c DA01     		.2byte	0x1da
 3942 078e 00000000 		.4byte	.LFB81
 3943 0792 F4020000 		.4byte	.LFE81-.LFB81
 3944 0796 01       		.uleb128 0x1
 3945 0797 9C       		.byte	0x9c
 3946 0798 69080000 		.4byte	0x869
 3947 079c 1C       		.uleb128 0x1c
 3948 079d BA020000 		.4byte	.LASF115
 3949 07a1 01       		.byte	0x1
 3950 07a2 DE01     		.2byte	0x1de
 3951 07a4 16070000 		.4byte	0x716
 3952 07a8 02       		.uleb128 0x2
 3953 07a9 91       		.byte	0x91
 3954 07aa 64       		.sleb128 -28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 91


 3955 07ab 1C       		.uleb128 0x1c
 3956 07ac 3B080000 		.4byte	.LASF116
 3957 07b0 01       		.byte	0x1
 3958 07b1 DF01     		.2byte	0x1df
 3959 07b3 16070000 		.4byte	0x716
 3960 07b7 02       		.uleb128 0x2
 3961 07b8 91       		.byte	0x91
 3962 07b9 58       		.sleb128 -40
 3963 07ba 1C       		.uleb128 0x1c
 3964 07bb EF050000 		.4byte	.LASF117
 3965 07bf 01       		.byte	0x1
 3966 07c0 E001     		.2byte	0x1e0
 3967 07c2 16070000 		.4byte	0x716
 3968 07c6 02       		.uleb128 0x2
 3969 07c7 91       		.byte	0x91
 3970 07c8 4C       		.sleb128 -52
 3971 07c9 1C       		.uleb128 0x1c
 3972 07ca 45030000 		.4byte	.LASF118
 3973 07ce 01       		.byte	0x1
 3974 07cf E101     		.2byte	0x1e1
 3975 07d1 16070000 		.4byte	0x716
 3976 07d5 02       		.uleb128 0x2
 3977 07d6 91       		.byte	0x91
 3978 07d7 40       		.sleb128 -64
 3979 07d8 1C       		.uleb128 0x1c
 3980 07d9 E2070000 		.4byte	.LASF119
 3981 07dd 01       		.byte	0x1
 3982 07de E401     		.2byte	0x1e4
 3983 07e0 41040000 		.4byte	0x441
 3984 07e4 03       		.uleb128 0x3
 3985 07e5 91       		.byte	0x91
 3986 07e6 DC7E     		.sleb128 -164
 3987 07e8 1C       		.uleb128 0x1c
 3988 07e9 1E030000 		.4byte	.LASF120
 3989 07ed 01       		.byte	0x1
 3990 07ee E701     		.2byte	0x1e7
 3991 07f0 41040000 		.4byte	0x441
 3992 07f4 03       		.uleb128 0x3
 3993 07f5 91       		.byte	0x91
 3994 07f6 F87D     		.sleb128 -264
 3995 07f8 1C       		.uleb128 0x1c
 3996 07f9 FD050000 		.4byte	.LASF59
 3997 07fd 01       		.byte	0x1
 3998 07fe FF01     		.2byte	0x1ff
 3999 0800 7E000000 		.4byte	0x7e
 4000 0804 03       		.uleb128 0x3
 4001 0805 91       		.byte	0x91
 4002 0806 F47D     		.sleb128 -268
 4003 0808 1C       		.uleb128 0x1c
 4004 0809 4E010000 		.4byte	.LASF121
 4005 080d 01       		.byte	0x1
 4006 080e FF01     		.2byte	0x1ff
 4007 0810 7E000000 		.4byte	0x7e
 4008 0814 03       		.uleb128 0x3
 4009 0815 91       		.byte	0x91
 4010 0816 F07D     		.sleb128 -272
 4011 0818 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 92


 4012 0819 03050000 		.4byte	.LASF122
 4013 081d 01       		.byte	0x1
 4014 081e FF01     		.2byte	0x1ff
 4015 0820 7E000000 		.4byte	0x7e
 4016 0824 03       		.uleb128 0x3
 4017 0825 91       		.byte	0x91
 4018 0826 EC7D     		.sleb128 -276
 4019 0828 1C       		.uleb128 0x1c
 4020 0829 BA040000 		.4byte	.LASF123
 4021 082d 01       		.byte	0x1
 4022 082e FF01     		.2byte	0x1ff
 4023 0830 7E000000 		.4byte	0x7e
 4024 0834 03       		.uleb128 0x3
 4025 0835 91       		.byte	0x91
 4026 0836 E87D     		.sleb128 -280
 4027 0838 1C       		.uleb128 0x1c
 4028 0839 0C090000 		.4byte	.LASF124
 4029 083d 01       		.byte	0x1
 4030 083e FF01     		.2byte	0x1ff
 4031 0840 7E000000 		.4byte	0x7e
 4032 0844 03       		.uleb128 0x3
 4033 0845 91       		.byte	0x91
 4034 0846 E47D     		.sleb128 -284
 4035 0848 1C       		.uleb128 0x1c
 4036 0849 7C020000 		.4byte	.LASF125
 4037 084d 01       		.byte	0x1
 4038 084e FF01     		.2byte	0x1ff
 4039 0850 7E000000 		.4byte	0x7e
 4040 0854 03       		.uleb128 0x3
 4041 0855 91       		.byte	0x91
 4042 0856 E07D     		.sleb128 -288
 4043 0858 1C       		.uleb128 0x1c
 4044 0859 33020000 		.4byte	.LASF126
 4045 085d 01       		.byte	0x1
 4046 085e 2802     		.2byte	0x228
 4047 0860 41040000 		.4byte	0x441
 4048 0864 03       		.uleb128 0x3
 4049 0865 91       		.byte	0x91
 4050 0866 FC7C     		.sleb128 -388
 4051 0868 00       		.byte	0
 4052 0869 1F       		.uleb128 0x1f
 4053 086a A1020000 		.4byte	.LASF127
 4054 086e 01       		.byte	0x1
 4055 086f 4E02     		.2byte	0x24e
 4056 0871 00000000 		.4byte	.LFB82
 4057 0875 68010000 		.4byte	.LFE82-.LFB82
 4058 0879 01       		.uleb128 0x1
 4059 087a 9C       		.byte	0x9c
 4060 087b 99080000 		.4byte	0x899
 4061 087f 14       		.uleb128 0x14
 4062 0880 DA000000 		.4byte	.LBB9
 4063 0884 38000000 		.4byte	.LBE9-.LBB9
 4064 0888 1C       		.uleb128 0x1c
 4065 0889 44070000 		.4byte	.LASF128
 4066 088d 01       		.byte	0x1
 4067 088e 7C02     		.2byte	0x27c
 4068 0890 16070000 		.4byte	0x716
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 93


 4069 0894 02       		.uleb128 0x2
 4070 0895 91       		.byte	0x91
 4071 0896 6C       		.sleb128 -20
 4072 0897 00       		.byte	0
 4073 0898 00       		.byte	0
 4074 0899 1B       		.uleb128 0x1b
 4075 089a 00030000 		.4byte	.LASF129
 4076 089e 01       		.byte	0x1
 4077 089f 8F02     		.2byte	0x28f
 4078 08a1 57000000 		.4byte	0x57
 4079 08a5 00000000 		.4byte	.LFB83
 4080 08a9 44010000 		.4byte	.LFE83-.LFB83
 4081 08ad 01       		.uleb128 0x1
 4082 08ae 9C       		.byte	0x9c
 4083 08af 55090000 		.4byte	0x955
 4084 08b3 1C       		.uleb128 0x1c
 4085 08b4 8F040000 		.4byte	.LASF130
 4086 08b8 01       		.byte	0x1
 4087 08b9 9A02     		.2byte	0x29a
 4088 08bb 57000000 		.4byte	0x57
 4089 08bf 02       		.uleb128 0x2
 4090 08c0 91       		.byte	0x91
 4091 08c1 74       		.sleb128 -12
 4092 08c2 14       		.uleb128 0x14
 4093 08c3 30000000 		.4byte	.LBB10
 4094 08c7 DE000000 		.4byte	.LBE10-.LBB10
 4095 08cb 1C       		.uleb128 0x1c
 4096 08cc C5020000 		.4byte	.LASF98
 4097 08d0 01       		.byte	0x1
 4098 08d1 9F02     		.2byte	0x29f
 4099 08d3 55090000 		.4byte	0x955
 4100 08d7 02       		.uleb128 0x2
 4101 08d8 91       		.byte	0x91
 4102 08d9 54       		.sleb128 -44
 4103 08da 1A       		.uleb128 0x1a
 4104 08db 7400     		.ascii	"t\000"
 4105 08dd 01       		.byte	0x1
 4106 08de A502     		.2byte	0x2a5
 4107 08e0 2D010000 		.4byte	0x12d
 4108 08e4 03       		.uleb128 0x3
 4109 08e5 91       		.byte	0x91
 4110 08e6 947F     		.sleb128 -108
 4111 08e8 1C       		.uleb128 0x1c
 4112 08e9 2E020000 		.4byte	.LASF131
 4113 08ed 01       		.byte	0x1
 4114 08ee A802     		.2byte	0x2a8
 4115 08f0 7E000000 		.4byte	0x7e
 4116 08f4 02       		.uleb128 0x2
 4117 08f5 91       		.byte	0x91
 4118 08f6 50       		.sleb128 -48
 4119 08f7 1C       		.uleb128 0x1c
 4120 08f8 31050000 		.4byte	.LASF132
 4121 08fc 01       		.byte	0x1
 4122 08fd A802     		.2byte	0x2a8
 4123 08ff 7E000000 		.4byte	0x7e
 4124 0903 02       		.uleb128 0x2
 4125 0904 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 94


 4126 0905 4C       		.sleb128 -52
 4127 0906 1A       		.uleb128 0x1a
 4128 0907 64617900 		.ascii	"day\000"
 4129 090b 01       		.byte	0x1
 4130 090c A802     		.2byte	0x2a8
 4131 090e 7E000000 		.4byte	0x7e
 4132 0912 02       		.uleb128 0x2
 4133 0913 91       		.byte	0x91
 4134 0914 48       		.sleb128 -56
 4135 0915 1C       		.uleb128 0x1c
 4136 0916 B9050000 		.4byte	.LASF133
 4137 091a 01       		.byte	0x1
 4138 091b A802     		.2byte	0x2a8
 4139 091d 7E000000 		.4byte	0x7e
 4140 0921 02       		.uleb128 0x2
 4141 0922 91       		.byte	0x91
 4142 0923 44       		.sleb128 -60
 4143 0924 1C       		.uleb128 0x1c
 4144 0925 01080000 		.4byte	.LASF134
 4145 0929 01       		.byte	0x1
 4146 092a A802     		.2byte	0x2a8
 4147 092c 7E000000 		.4byte	0x7e
 4148 0930 02       		.uleb128 0x2
 4149 0931 91       		.byte	0x91
 4150 0932 40       		.sleb128 -64
 4151 0933 1C       		.uleb128 0x1c
 4152 0934 27020000 		.4byte	.LASF135
 4153 0938 01       		.byte	0x1
 4154 0939 A802     		.2byte	0x2a8
 4155 093b 7E000000 		.4byte	0x7e
 4156 093f 03       		.uleb128 0x3
 4157 0940 91       		.byte	0x91
 4158 0941 BC7F     		.sleb128 -68
 4159 0943 1C       		.uleb128 0x1c
 4160 0944 00000000 		.4byte	.LASF136
 4161 0948 01       		.byte	0x1
 4162 0949 A802     		.2byte	0x2a8
 4163 094b 7E000000 		.4byte	0x7e
 4164 094f 03       		.uleb128 0x3
 4165 0950 91       		.byte	0x91
 4166 0951 B87F     		.sleb128 -72
 4167 0953 00       		.byte	0
 4168 0954 00       		.byte	0
 4169 0955 08       		.uleb128 0x8
 4170 0956 F7000000 		.4byte	0xf7
 4171 095a 65090000 		.4byte	0x965
 4172 095e 09       		.uleb128 0x9
 4173 095f 05010000 		.4byte	0x105
 4174 0963 1D       		.byte	0x1d
 4175 0964 00       		.byte	0
 4176 0965 21       		.uleb128 0x21
 4177 0966 5D020000 		.4byte	.LASF137
 4178 096a 01       		.byte	0x1
 4179 096b C802     		.2byte	0x2c8
 4180 096d AD000000 		.4byte	0xad
 4181 0971 00000000 		.4byte	.LFB84
 4182 0975 14000000 		.4byte	.LFE84-.LFB84
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 95


 4183 0979 01       		.uleb128 0x1
 4184 097a 9C       		.byte	0x9c
 4185 097b 1D       		.uleb128 0x1d
 4186 097c 39030000 		.4byte	.LASF138
 4187 0980 01       		.byte	0x1
 4188 0981 CD02     		.2byte	0x2cd
 4189 0983 00000000 		.4byte	.LFB85
 4190 0987 1A000000 		.4byte	.LFE85-.LFB85
 4191 098b 01       		.uleb128 0x1
 4192 098c 9C       		.byte	0x9c
 4193 098d 1D       		.uleb128 0x1d
 4194 098e 2A010000 		.4byte	.LASF139
 4195 0992 01       		.byte	0x1
 4196 0993 DA02     		.2byte	0x2da
 4197 0995 00000000 		.4byte	.LFB86
 4198 0999 2A000000 		.4byte	.LFE86-.LFB86
 4199 099d 01       		.uleb128 0x1
 4200 099e 9C       		.byte	0x9c
 4201 099f 1B       		.uleb128 0x1b
 4202 09a0 5F060000 		.4byte	.LASF140
 4203 09a4 01       		.byte	0x1
 4204 09a5 ED02     		.2byte	0x2ed
 4205 09a7 37030000 		.4byte	0x337
 4206 09ab 00000000 		.4byte	.LFB87
 4207 09af 7C020000 		.4byte	.LFE87-.LFB87
 4208 09b3 01       		.uleb128 0x1
 4209 09b4 9C       		.byte	0x9c
 4210 09b5 480A0000 		.4byte	0xa48
 4211 09b9 1A       		.uleb128 0x1a
 4212 09ba 67707300 		.ascii	"gps\000"
 4213 09be 01       		.byte	0x1
 4214 09bf EE02     		.2byte	0x2ee
 4215 09c1 37030000 		.4byte	0x337
 4216 09c5 02       		.uleb128 0x2
 4217 09c6 91       		.byte	0x91
 4218 09c7 4C       		.sleb128 -52
 4219 09c8 1C       		.uleb128 0x1c
 4220 09c9 CF080000 		.4byte	.LASF141
 4221 09cd 01       		.byte	0x1
 4222 09ce FA02     		.2byte	0x2fa
 4223 09d0 57000000 		.4byte	0x57
 4224 09d4 02       		.uleb128 0x2
 4225 09d5 91       		.byte	0x91
 4226 09d6 68       		.sleb128 -24
 4227 09d7 1C       		.uleb128 0x1c
 4228 09d8 BF070000 		.4byte	.LASF142
 4229 09dc 01       		.byte	0x1
 4230 09dd 2103     		.2byte	0x321
 4231 09df AD000000 		.4byte	0xad
 4232 09e3 02       		.uleb128 0x2
 4233 09e4 91       		.byte	0x91
 4234 09e5 67       		.sleb128 -25
 4235 09e6 1A       		.uleb128 0x1a
 4236 09e7 6C617400 		.ascii	"lat\000"
 4237 09eb 01       		.byte	0x1
 4238 09ec 2D03     		.2byte	0x32d
 4239 09ee E9000000 		.4byte	0xe9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 96


 4240 09f2 02       		.uleb128 0x2
 4241 09f3 91       		.byte	0x91
 4242 09f4 48       		.sleb128 -56
 4243 09f5 1A       		.uleb128 0x1a
 4244 09f6 6C6F6E00 		.ascii	"lon\000"
 4245 09fa 01       		.byte	0x1
 4246 09fb 2E03     		.2byte	0x32e
 4247 09fd E9000000 		.4byte	0xe9
 4248 0a01 02       		.uleb128 0x2
 4249 0a02 91       		.byte	0x91
 4250 0a03 44       		.sleb128 -60
 4251 0a04 1A       		.uleb128 0x1a
 4252 0a05 616C7400 		.ascii	"alt\000"
 4253 0a09 01       		.byte	0x1
 4254 0a0a 2F03     		.2byte	0x32f
 4255 0a0c E9000000 		.4byte	0xe9
 4256 0a10 02       		.uleb128 0x2
 4257 0a11 91       		.byte	0x91
 4258 0a12 40       		.sleb128 -64
 4259 0a13 1A       		.uleb128 0x1a
 4260 0a14 733100   		.ascii	"s1\000"
 4261 0a17 01       		.byte	0x1
 4262 0a18 3303     		.2byte	0x333
 4263 0a1a 0C010000 		.4byte	0x10c
 4264 0a1e 02       		.uleb128 0x2
 4265 0a1f 91       		.byte	0x91
 4266 0a20 60       		.sleb128 -32
 4267 0a21 1C       		.uleb128 0x1c
 4268 0a22 9E050000 		.4byte	.LASF111
 4269 0a26 01       		.byte	0x1
 4270 0a27 3603     		.2byte	0x336
 4271 0a29 7E000000 		.4byte	0x7e
 4272 0a2d 02       		.uleb128 0x2
 4273 0a2e 91       		.byte	0x91
 4274 0a2f 5C       		.sleb128 -36
 4275 0a30 14       		.uleb128 0x14
 4276 0a31 B4000000 		.4byte	.LBB11
 4277 0a35 38000000 		.4byte	.LBE11-.LBB11
 4278 0a39 1A       		.uleb128 0x1a
 4279 0a3a 6900     		.ascii	"i\000"
 4280 0a3c 01       		.byte	0x1
 4281 0a3d 2203     		.2byte	0x322
 4282 0a3f B9000000 		.4byte	0xb9
 4283 0a43 02       		.uleb128 0x2
 4284 0a44 91       		.byte	0x91
 4285 0a45 6E       		.sleb128 -18
 4286 0a46 00       		.byte	0
 4287 0a47 00       		.byte	0
 4288 0a48 22       		.uleb128 0x22
 4289 0a49 78010000 		.4byte	.LASF143
 4290 0a4d 0A       		.byte	0xa
 4291 0a4e 1207     		.2byte	0x712
 4292 0a50 540A0000 		.4byte	0xa54
 4293 0a54 0F       		.uleb128 0xf
 4294 0a55 97000000 		.4byte	0x97
 4295 0a59 23       		.uleb128 0x23
 4296 0a5a 60000000 		.4byte	.LASF144
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 97


 4297 0a5e 07       		.byte	0x7
 4298 0a5f 11       		.byte	0x11
 4299 0a60 93030000 		.4byte	0x393
 4300 0a64 05       		.uleb128 0x5
 4301 0a65 03       		.byte	0x3
 4302 0a66 00000000 		.4byte	buffer_overflow
 4303 0a6a 23       		.uleb128 0x23
 4304 0a6b 0F050000 		.4byte	.LASF145
 4305 0a6f 07       		.byte	0x7
 4306 0a70 22       		.byte	0x22
 4307 0a71 B9000000 		.4byte	0xb9
 4308 0a75 05       		.uleb128 0x5
 4309 0a76 03       		.byte	0x3
 4310 0a77 00000000 		.4byte	dataPointsInStack
 4311 0a7b 23       		.uleb128 0x23
 4312 0a7c 50080000 		.4byte	.LASF146
 4313 0a80 07       		.byte	0x7
 4314 0a81 23       		.byte	0x23
 4315 0a82 B9000000 		.4byte	0xb9
 4316 0a86 05       		.uleb128 0x5
 4317 0a87 03       		.byte	0x3
 4318 0a88 00000000 		.4byte	dataPointsInStackDesired
 4319 0a8c 08       		.uleb128 0x8
 4320 0a8d 3B020000 		.4byte	0x23b
 4321 0a91 9C0A0000 		.4byte	0xa9c
 4322 0a95 09       		.uleb128 0x9
 4323 0a96 05010000 		.4byte	0x105
 4324 0a9a 95       		.byte	0x95
 4325 0a9b 00       		.byte	0
 4326 0a9c 23       		.uleb128 0x23
 4327 0a9d 07040000 		.4byte	.LASF147
 4328 0aa1 07       		.byte	0x7
 4329 0aa2 24       		.byte	0x24
 4330 0aa3 8C0A0000 		.4byte	0xa8c
 4331 0aa7 05       		.uleb128 0x5
 4332 0aa8 03       		.byte	0x3
 4333 0aa9 00000000 		.4byte	data
 4334 0aad 23       		.uleb128 0x23
 4335 0aae 5A010000 		.4byte	.LASF148
 4336 0ab2 08       		.byte	0x8
 4337 0ab3 1F       		.byte	0x1f
 4338 0ab4 AD000000 		.4byte	0xad
 4339 0ab8 05       		.uleb128 0x5
 4340 0ab9 03       		.byte	0x3
 4341 0aba 00000000 		.4byte	modem_state
 4342 0abe 23       		.uleb128 0x23
 4343 0abf A8070000 		.4byte	.LASF149
 4344 0ac3 08       		.byte	0x8
 4345 0ac4 69       		.byte	0x69
 4346 0ac5 DD000000 		.4byte	0xdd
 4347 0ac9 05       		.uleb128 0x5
 4348 0aca 03       		.byte	0x3
 4349 0acb 00000000 		.4byte	modem_start_time_stamp
 4350 0acf 23       		.uleb128 0x23
 4351 0ad0 1D040000 		.4byte	.LASF72
 4352 0ad4 08       		.byte	0x8
 4353 0ad5 6A       		.byte	0x6a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 98


 4354 0ad6 73020000 		.4byte	0x273
 4355 0ada 05       		.uleb128 0x5
 4356 0adb 03       		.byte	0x3
 4357 0adc 00000000 		.4byte	modem_info
 4358 0ae0 23       		.uleb128 0x23
 4359 0ae1 97010000 		.4byte	.LASF150
 4360 0ae5 08       		.byte	0x8
 4361 0ae6 6B       		.byte	0x6b
 4362 0ae7 E7020000 		.4byte	0x2e7
 4363 0aeb 05       		.uleb128 0x5
 4364 0aec 03       		.byte	0x3
 4365 0aed 00000000 		.4byte	modem_stats
 4366 0af1 23       		.uleb128 0x23
 4367 0af2 A4050000 		.4byte	.LASF151
 4368 0af6 08       		.byte	0x8
 4369 0af7 6C       		.byte	0x6c
 4370 0af8 9A030000 		.4byte	0x39a
 4371 0afc 05       		.uleb128 0x5
 4372 0afd 03       		.byte	0x3
 4373 0afe 00000000 		.4byte	updatable_parameters
 4374 0b02 23       		.uleb128 0x23
 4375 0b03 FF060000 		.4byte	.LASF152
 4376 0b07 0B       		.byte	0xb
 4377 0b08 25       		.byte	0x25
 4378 0b09 41040000 		.4byte	0x441
 4379 0b0d 05       		.uleb128 0x5
 4380 0b0e 03       		.byte	0x3
 4381 0b0f 00000000 		.4byte	level_sensor_inbox
 4382 0b13 23       		.uleb128 0x23
 4383 0b14 FE080000 		.4byte	.LASF153
 4384 0b18 0C       		.byte	0xc
 4385 0b19 12       		.byte	0x12
 4386 0b1a 41040000 		.4byte	0x441
 4387 0b1e 05       		.uleb128 0x5
 4388 0b1f 03       		.byte	0x3
 4389 0b20 00000000 		.4byte	app_led_inbox
 4390 0b24 08       		.uleb128 0x8
 4391 0b25 F7000000 		.4byte	0xf7
 4392 0b29 350B0000 		.4byte	0xb35
 4393 0b2d 24       		.uleb128 0x24
 4394 0b2e 05010000 		.4byte	0x105
 4395 0b32 0F27     		.2byte	0x270f
 4396 0b34 00       		.byte	0
 4397 0b35 23       		.uleb128 0x23
 4398 0b36 D9080000 		.4byte	.LASF154
 4399 0b3a 09       		.byte	0x9
 4400 0b3b 18       		.byte	0x18
 4401 0b3c 240B0000 		.4byte	0xb24
 4402 0b40 05       		.uleb128 0x5
 4403 0b41 03       		.byte	0x3
 4404 0b42 00000000 		.4byte	http_request
 4405 0b46 23       		.uleb128 0x23
 4406 0b47 02020000 		.4byte	.LASF155
 4407 0b4b 09       		.byte	0x9
 4408 0b4c 19       		.byte	0x19
 4409 0b4d 240B0000 		.4byte	0xb24
 4410 0b51 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 99


 4411 0b52 03       		.byte	0x3
 4412 0b53 00000000 		.4byte	http_body
 4413 0b57 08       		.uleb128 0x8
 4414 0b58 F7000000 		.4byte	0xf7
 4415 0b5c 670B0000 		.4byte	0xb67
 4416 0b60 09       		.uleb128 0x9
 4417 0b61 05010000 		.4byte	0x105
 4418 0b65 C7       		.byte	0xc7
 4419 0b66 00       		.byte	0
 4420 0b67 23       		.uleb128 0x23
 4421 0b68 52070000 		.4byte	.LASF156
 4422 0b6c 09       		.byte	0x9
 4423 0b6d 1A       		.byte	0x1a
 4424 0b6e 570B0000 		.4byte	0xb57
 4425 0b72 05       		.uleb128 0x5
 4426 0b73 03       		.byte	0x3
 4427 0b74 00000000 		.4byte	http_route
 4428 0b78 23       		.uleb128 0x23
 4429 0b79 80060000 		.4byte	.LASF157
 4430 0b7d 09       		.byte	0x9
 4431 0b7e 41       		.byte	0x41
 4432 0b7f 15040000 		.4byte	0x415
 4433 0b83 05       		.uleb128 0x5
 4434 0b84 03       		.byte	0x3
 4435 0b85 00000000 		.4byte	system_info
 4436 0b89 23       		.uleb128 0x23
 4437 0b8a 35060000 		.4byte	.LASF158
 4438 0b8e 09       		.byte	0x9
 4439 0b8f 53       		.byte	0x53
 4440 0b90 51040000 		.4byte	0x451
 4441 0b94 05       		.uleb128 0x5
 4442 0b95 03       		.byte	0x3
 4443 0b96 00000000 		.4byte	system_settings
 4444 0b9a 23       		.uleb128 0x23
 4445 0b9b 6B010000 		.4byte	.LASF159
 4446 0b9f 09       		.byte	0x9
 4447 0ba0 6F       		.byte	0x6f
 4448 0ba1 DE030000 		.4byte	0x3de
 4449 0ba5 05       		.uleb128 0x5
 4450 0ba6 03       		.byte	0x3
 4451 0ba7 00000000 		.4byte	alarmMeasure
 4452 0bab 23       		.uleb128 0x23
 4453 0bac D1010000 		.4byte	.LASF160
 4454 0bb0 09       		.byte	0x9
 4455 0bb1 70       		.byte	0x70
 4456 0bb2 AD000000 		.4byte	0xad
 4457 0bb6 05       		.uleb128 0x5
 4458 0bb7 03       		.byte	0x3
 4459 0bb8 00000000 		.4byte	timeToMeasure
 4460 0bbc 23       		.uleb128 0x23
 4461 0bbd 7A030000 		.4byte	.LASF161
 4462 0bc1 09       		.byte	0x9
 4463 0bc2 71       		.byte	0x71
 4464 0bc3 DE030000 		.4byte	0x3de
 4465 0bc7 05       		.uleb128 0x5
 4466 0bc8 03       		.byte	0x3
 4467 0bc9 00000000 		.4byte	alarmSync
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 100


 4468 0bcd 23       		.uleb128 0x23
 4469 0bce F7010000 		.4byte	.LASF162
 4470 0bd2 09       		.byte	0x9
 4471 0bd3 72       		.byte	0x72
 4472 0bd4 AD000000 		.4byte	0xad
 4473 0bd8 05       		.uleb128 0x5
 4474 0bd9 03       		.byte	0x3
 4475 0bda 00000000 		.4byte	timeToSync
 4476 0bde 23       		.uleb128 0x23
 4477 0bdf 7C050000 		.4byte	.LASF163
 4478 0be3 09       		.byte	0x9
 4479 0be4 73       		.byte	0x73
 4480 0be5 AD000000 		.4byte	0xad
 4481 0be9 05       		.uleb128 0x5
 4482 0bea 03       		.byte	0x3
 4483 0beb 00000000 		.4byte	timeToSycnRemoteParams
 4484 0bef 25       		.uleb128 0x25
 4485 0bf0 68657900 		.ascii	"hey\000"
 4486 0bf4 09       		.byte	0x9
 4487 0bf5 74       		.byte	0x74
 4488 0bf6 AD000000 		.4byte	0xad
 4489 0bfa 05       		.uleb128 0x5
 4490 0bfb 03       		.byte	0x3
 4491 0bfc 00000000 		.4byte	hey
 4492 0c00 23       		.uleb128 0x23
 4493 0c01 A4040000 		.4byte	.LASF164
 4494 0c05 09       		.byte	0x9
 4495 0c06 77       		.byte	0x77
 4496 0c07 DE030000 		.4byte	0x3de
 4497 0c0b 05       		.uleb128 0x5
 4498 0c0c 03       		.byte	0x3
 4499 0c0d 00000000 		.4byte	alarmAppLED
 4500 0c11 23       		.uleb128 0x23
 4501 0c12 8E020000 		.4byte	.LASF165
 4502 0c16 09       		.byte	0x9
 4503 0c17 78       		.byte	0x78
 4504 0c18 AD000000 		.4byte	0xad
 4505 0c1c 05       		.uleb128 0x5
 4506 0c1d 03       		.byte	0x3
 4507 0c1e 00000000 		.4byte	timeToAppLED
 4508 0c22 23       		.uleb128 0x23
 4509 0c23 BD060000 		.4byte	.LASF166
 4510 0c27 09       		.byte	0x9
 4511 0c28 7A       		.byte	0x7a
 4512 0c29 DE030000 		.4byte	0x3de
 4513 0c2d 05       		.uleb128 0x5
 4514 0c2e 03       		.byte	0x3
 4515 0c2f 00000000 		.4byte	alarmLevelSensor
 4516 0c33 23       		.uleb128 0x23
 4517 0c34 85010000 		.4byte	.LASF167
 4518 0c38 09       		.byte	0x9
 4519 0c39 7B       		.byte	0x7b
 4520 0c3a AD000000 		.4byte	0xad
 4521 0c3e 05       		.uleb128 0x5
 4522 0c3f 03       		.byte	0x3
 4523 0c40 00000000 		.4byte	timetoLevelSensor
 4524 0c44 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 101


 4525 0c45 F7000000 		.4byte	0xf7
 4526 0c49 550C0000 		.4byte	0xc55
 4527 0c4d 24       		.uleb128 0x24
 4528 0c4e 05010000 		.4byte	0x105
 4529 0c52 FF03     		.2byte	0x3ff
 4530 0c54 00       		.byte	0
 4531 0c55 23       		.uleb128 0x23
 4532 0c56 54050000 		.4byte	.LASF168
 4533 0c5a 01       		.byte	0x1
 4534 0c5b 05       		.byte	0x5
 4535 0c5c 440C0000 		.4byte	0xc44
 4536 0c60 05       		.uleb128 0x5
 4537 0c61 03       		.byte	0x3
 4538 0c62 00000000 		.4byte	uart_received_string
 4539 0c66 23       		.uleb128 0x23
 4540 0c67 70070000 		.4byte	.LASF169
 4541 0c6b 01       		.byte	0x1
 4542 0c6c 06       		.byte	0x6
 4543 0c6d D1000000 		.4byte	0xd1
 4544 0c71 05       		.uleb128 0x5
 4545 0c72 03       		.byte	0x3
 4546 0c73 00000000 		.4byte	uart_string_index
 4547 0c77 00       		.byte	0
 4548              		.section	.debug_abbrev,"",%progbits
 4549              	.Ldebug_abbrev0:
 4550 0000 01       		.uleb128 0x1
 4551 0001 11       		.uleb128 0x11
 4552 0002 01       		.byte	0x1
 4553 0003 25       		.uleb128 0x25
 4554 0004 0E       		.uleb128 0xe
 4555 0005 13       		.uleb128 0x13
 4556 0006 0B       		.uleb128 0xb
 4557 0007 03       		.uleb128 0x3
 4558 0008 0E       		.uleb128 0xe
 4559 0009 1B       		.uleb128 0x1b
 4560 000a 0E       		.uleb128 0xe
 4561 000b 55       		.uleb128 0x55
 4562 000c 17       		.uleb128 0x17
 4563 000d 11       		.uleb128 0x11
 4564 000e 01       		.uleb128 0x1
 4565 000f 10       		.uleb128 0x10
 4566 0010 17       		.uleb128 0x17
 4567 0011 00       		.byte	0
 4568 0012 00       		.byte	0
 4569 0013 02       		.uleb128 0x2
 4570 0014 24       		.uleb128 0x24
 4571 0015 00       		.byte	0
 4572 0016 0B       		.uleb128 0xb
 4573 0017 0B       		.uleb128 0xb
 4574 0018 3E       		.uleb128 0x3e
 4575 0019 0B       		.uleb128 0xb
 4576 001a 03       		.uleb128 0x3
 4577 001b 0E       		.uleb128 0xe
 4578 001c 00       		.byte	0
 4579 001d 00       		.byte	0
 4580 001e 03       		.uleb128 0x3
 4581 001f 16       		.uleb128 0x16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 102


 4582 0020 00       		.byte	0
 4583 0021 03       		.uleb128 0x3
 4584 0022 0E       		.uleb128 0xe
 4585 0023 3A       		.uleb128 0x3a
 4586 0024 0B       		.uleb128 0xb
 4587 0025 3B       		.uleb128 0x3b
 4588 0026 0B       		.uleb128 0xb
 4589 0027 49       		.uleb128 0x49
 4590 0028 13       		.uleb128 0x13
 4591 0029 00       		.byte	0
 4592 002a 00       		.byte	0
 4593 002b 04       		.uleb128 0x4
 4594 002c 24       		.uleb128 0x24
 4595 002d 00       		.byte	0
 4596 002e 0B       		.uleb128 0xb
 4597 002f 0B       		.uleb128 0xb
 4598 0030 3E       		.uleb128 0x3e
 4599 0031 0B       		.uleb128 0xb
 4600 0032 03       		.uleb128 0x3
 4601 0033 08       		.uleb128 0x8
 4602 0034 00       		.byte	0
 4603 0035 00       		.byte	0
 4604 0036 05       		.uleb128 0x5
 4605 0037 16       		.uleb128 0x16
 4606 0038 00       		.byte	0
 4607 0039 03       		.uleb128 0x3
 4608 003a 0E       		.uleb128 0xe
 4609 003b 3A       		.uleb128 0x3a
 4610 003c 0B       		.uleb128 0xb
 4611 003d 3B       		.uleb128 0x3b
 4612 003e 05       		.uleb128 0x5
 4613 003f 49       		.uleb128 0x49
 4614 0040 13       		.uleb128 0x13
 4615 0041 00       		.byte	0
 4616 0042 00       		.byte	0
 4617 0043 06       		.uleb128 0x6
 4618 0044 0F       		.uleb128 0xf
 4619 0045 00       		.byte	0
 4620 0046 0B       		.uleb128 0xb
 4621 0047 0B       		.uleb128 0xb
 4622 0048 49       		.uleb128 0x49
 4623 0049 13       		.uleb128 0x13
 4624 004a 00       		.byte	0
 4625 004b 00       		.byte	0
 4626 004c 07       		.uleb128 0x7
 4627 004d 26       		.uleb128 0x26
 4628 004e 00       		.byte	0
 4629 004f 49       		.uleb128 0x49
 4630 0050 13       		.uleb128 0x13
 4631 0051 00       		.byte	0
 4632 0052 00       		.byte	0
 4633 0053 08       		.uleb128 0x8
 4634 0054 01       		.uleb128 0x1
 4635 0055 01       		.byte	0x1
 4636 0056 49       		.uleb128 0x49
 4637 0057 13       		.uleb128 0x13
 4638 0058 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 103


 4639 0059 13       		.uleb128 0x13
 4640 005a 00       		.byte	0
 4641 005b 00       		.byte	0
 4642 005c 09       		.uleb128 0x9
 4643 005d 21       		.uleb128 0x21
 4644 005e 00       		.byte	0
 4645 005f 49       		.uleb128 0x49
 4646 0060 13       		.uleb128 0x13
 4647 0061 2F       		.uleb128 0x2f
 4648 0062 0B       		.uleb128 0xb
 4649 0063 00       		.byte	0
 4650 0064 00       		.byte	0
 4651 0065 0A       		.uleb128 0xa
 4652 0066 13       		.uleb128 0x13
 4653 0067 01       		.byte	0x1
 4654 0068 03       		.uleb128 0x3
 4655 0069 08       		.uleb128 0x8
 4656 006a 0B       		.uleb128 0xb
 4657 006b 0B       		.uleb128 0xb
 4658 006c 3A       		.uleb128 0x3a
 4659 006d 0B       		.uleb128 0xb
 4660 006e 3B       		.uleb128 0x3b
 4661 006f 0B       		.uleb128 0xb
 4662 0070 01       		.uleb128 0x1
 4663 0071 13       		.uleb128 0x13
 4664 0072 00       		.byte	0
 4665 0073 00       		.byte	0
 4666 0074 0B       		.uleb128 0xb
 4667 0075 0D       		.uleb128 0xd
 4668 0076 00       		.byte	0
 4669 0077 03       		.uleb128 0x3
 4670 0078 0E       		.uleb128 0xe
 4671 0079 3A       		.uleb128 0x3a
 4672 007a 0B       		.uleb128 0xb
 4673 007b 3B       		.uleb128 0x3b
 4674 007c 0B       		.uleb128 0xb
 4675 007d 49       		.uleb128 0x49
 4676 007e 13       		.uleb128 0x13
 4677 007f 38       		.uleb128 0x38
 4678 0080 0B       		.uleb128 0xb
 4679 0081 00       		.byte	0
 4680 0082 00       		.byte	0
 4681 0083 0C       		.uleb128 0xc
 4682 0084 13       		.uleb128 0x13
 4683 0085 01       		.byte	0x1
 4684 0086 0B       		.uleb128 0xb
 4685 0087 05       		.uleb128 0x5
 4686 0088 3A       		.uleb128 0x3a
 4687 0089 0B       		.uleb128 0xb
 4688 008a 3B       		.uleb128 0x3b
 4689 008b 0B       		.uleb128 0xb
 4690 008c 01       		.uleb128 0x1
 4691 008d 13       		.uleb128 0x13
 4692 008e 00       		.byte	0
 4693 008f 00       		.byte	0
 4694 0090 0D       		.uleb128 0xd
 4695 0091 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 104


 4696 0092 01       		.byte	0x1
 4697 0093 0B       		.uleb128 0xb
 4698 0094 0B       		.uleb128 0xb
 4699 0095 3A       		.uleb128 0x3a
 4700 0096 0B       		.uleb128 0xb
 4701 0097 3B       		.uleb128 0x3b
 4702 0098 0B       		.uleb128 0xb
 4703 0099 01       		.uleb128 0x1
 4704 009a 13       		.uleb128 0x13
 4705 009b 00       		.byte	0
 4706 009c 00       		.byte	0
 4707 009d 0E       		.uleb128 0xe
 4708 009e 0D       		.uleb128 0xd
 4709 009f 00       		.byte	0
 4710 00a0 03       		.uleb128 0x3
 4711 00a1 08       		.uleb128 0x8
 4712 00a2 3A       		.uleb128 0x3a
 4713 00a3 0B       		.uleb128 0xb
 4714 00a4 3B       		.uleb128 0x3b
 4715 00a5 0B       		.uleb128 0xb
 4716 00a6 49       		.uleb128 0x49
 4717 00a7 13       		.uleb128 0x13
 4718 00a8 38       		.uleb128 0x38
 4719 00a9 0B       		.uleb128 0xb
 4720 00aa 00       		.byte	0
 4721 00ab 00       		.byte	0
 4722 00ac 0F       		.uleb128 0xf
 4723 00ad 35       		.uleb128 0x35
 4724 00ae 00       		.byte	0
 4725 00af 49       		.uleb128 0x49
 4726 00b0 13       		.uleb128 0x13
 4727 00b1 00       		.byte	0
 4728 00b2 00       		.byte	0
 4729 00b3 10       		.uleb128 0x10
 4730 00b4 2E       		.uleb128 0x2e
 4731 00b5 00       		.byte	0
 4732 00b6 3F       		.uleb128 0x3f
 4733 00b7 19       		.uleb128 0x19
 4734 00b8 03       		.uleb128 0x3
 4735 00b9 0E       		.uleb128 0xe
 4736 00ba 3A       		.uleb128 0x3a
 4737 00bb 0B       		.uleb128 0xb
 4738 00bc 3B       		.uleb128 0x3b
 4739 00bd 0B       		.uleb128 0xb
 4740 00be 27       		.uleb128 0x27
 4741 00bf 19       		.uleb128 0x19
 4742 00c0 11       		.uleb128 0x11
 4743 00c1 01       		.uleb128 0x1
 4744 00c2 12       		.uleb128 0x12
 4745 00c3 06       		.uleb128 0x6
 4746 00c4 40       		.uleb128 0x40
 4747 00c5 18       		.uleb128 0x18
 4748 00c6 9642     		.uleb128 0x2116
 4749 00c8 19       		.uleb128 0x19
 4750 00c9 00       		.byte	0
 4751 00ca 00       		.byte	0
 4752 00cb 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 105


 4753 00cc 2E       		.uleb128 0x2e
 4754 00cd 00       		.byte	0
 4755 00ce 3F       		.uleb128 0x3f
 4756 00cf 19       		.uleb128 0x19
 4757 00d0 03       		.uleb128 0x3
 4758 00d1 0E       		.uleb128 0xe
 4759 00d2 3A       		.uleb128 0x3a
 4760 00d3 0B       		.uleb128 0xb
 4761 00d4 3B       		.uleb128 0x3b
 4762 00d5 0B       		.uleb128 0xb
 4763 00d6 11       		.uleb128 0x11
 4764 00d7 01       		.uleb128 0x1
 4765 00d8 12       		.uleb128 0x12
 4766 00d9 06       		.uleb128 0x6
 4767 00da 40       		.uleb128 0x40
 4768 00db 18       		.uleb128 0x18
 4769 00dc 9642     		.uleb128 0x2116
 4770 00de 19       		.uleb128 0x19
 4771 00df 00       		.byte	0
 4772 00e0 00       		.byte	0
 4773 00e1 12       		.uleb128 0x12
 4774 00e2 2E       		.uleb128 0x2e
 4775 00e3 01       		.byte	0x1
 4776 00e4 3F       		.uleb128 0x3f
 4777 00e5 19       		.uleb128 0x19
 4778 00e6 03       		.uleb128 0x3
 4779 00e7 0E       		.uleb128 0xe
 4780 00e8 3A       		.uleb128 0x3a
 4781 00e9 0B       		.uleb128 0xb
 4782 00ea 3B       		.uleb128 0x3b
 4783 00eb 0B       		.uleb128 0xb
 4784 00ec 49       		.uleb128 0x49
 4785 00ed 13       		.uleb128 0x13
 4786 00ee 11       		.uleb128 0x11
 4787 00ef 01       		.uleb128 0x1
 4788 00f0 12       		.uleb128 0x12
 4789 00f1 06       		.uleb128 0x6
 4790 00f2 40       		.uleb128 0x40
 4791 00f3 18       		.uleb128 0x18
 4792 00f4 9642     		.uleb128 0x2116
 4793 00f6 19       		.uleb128 0x19
 4794 00f7 01       		.uleb128 0x1
 4795 00f8 13       		.uleb128 0x13
 4796 00f9 00       		.byte	0
 4797 00fa 00       		.byte	0
 4798 00fb 13       		.uleb128 0x13
 4799 00fc 34       		.uleb128 0x34
 4800 00fd 00       		.byte	0
 4801 00fe 03       		.uleb128 0x3
 4802 00ff 0E       		.uleb128 0xe
 4803 0100 3A       		.uleb128 0x3a
 4804 0101 0B       		.uleb128 0xb
 4805 0102 3B       		.uleb128 0x3b
 4806 0103 0B       		.uleb128 0xb
 4807 0104 49       		.uleb128 0x49
 4808 0105 13       		.uleb128 0x13
 4809 0106 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 106


 4810 0107 18       		.uleb128 0x18
 4811 0108 00       		.byte	0
 4812 0109 00       		.byte	0
 4813 010a 14       		.uleb128 0x14
 4814 010b 0B       		.uleb128 0xb
 4815 010c 01       		.byte	0x1
 4816 010d 11       		.uleb128 0x11
 4817 010e 01       		.uleb128 0x1
 4818 010f 12       		.uleb128 0x12
 4819 0110 06       		.uleb128 0x6
 4820 0111 00       		.byte	0
 4821 0112 00       		.byte	0
 4822 0113 15       		.uleb128 0x15
 4823 0114 2E       		.uleb128 0x2e
 4824 0115 01       		.byte	0x1
 4825 0116 3F       		.uleb128 0x3f
 4826 0117 19       		.uleb128 0x19
 4827 0118 03       		.uleb128 0x3
 4828 0119 0E       		.uleb128 0xe
 4829 011a 3A       		.uleb128 0x3a
 4830 011b 0B       		.uleb128 0xb
 4831 011c 3B       		.uleb128 0x3b
 4832 011d 0B       		.uleb128 0xb
 4833 011e 27       		.uleb128 0x27
 4834 011f 19       		.uleb128 0x19
 4835 0120 49       		.uleb128 0x49
 4836 0121 13       		.uleb128 0x13
 4837 0122 11       		.uleb128 0x11
 4838 0123 01       		.uleb128 0x1
 4839 0124 12       		.uleb128 0x12
 4840 0125 06       		.uleb128 0x6
 4841 0126 40       		.uleb128 0x40
 4842 0127 18       		.uleb128 0x18
 4843 0128 9642     		.uleb128 0x2116
 4844 012a 19       		.uleb128 0x19
 4845 012b 01       		.uleb128 0x1
 4846 012c 13       		.uleb128 0x13
 4847 012d 00       		.byte	0
 4848 012e 00       		.byte	0
 4849 012f 16       		.uleb128 0x16
 4850 0130 05       		.uleb128 0x5
 4851 0131 00       		.byte	0
 4852 0132 03       		.uleb128 0x3
 4853 0133 0E       		.uleb128 0xe
 4854 0134 3A       		.uleb128 0x3a
 4855 0135 0B       		.uleb128 0xb
 4856 0136 3B       		.uleb128 0x3b
 4857 0137 0B       		.uleb128 0xb
 4858 0138 49       		.uleb128 0x49
 4859 0139 13       		.uleb128 0x13
 4860 013a 02       		.uleb128 0x2
 4861 013b 18       		.uleb128 0x18
 4862 013c 00       		.byte	0
 4863 013d 00       		.byte	0
 4864 013e 17       		.uleb128 0x17
 4865 013f 34       		.uleb128 0x34
 4866 0140 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 107


 4867 0141 03       		.uleb128 0x3
 4868 0142 08       		.uleb128 0x8
 4869 0143 3A       		.uleb128 0x3a
 4870 0144 0B       		.uleb128 0xb
 4871 0145 3B       		.uleb128 0x3b
 4872 0146 0B       		.uleb128 0xb
 4873 0147 49       		.uleb128 0x49
 4874 0148 13       		.uleb128 0x13
 4875 0149 02       		.uleb128 0x2
 4876 014a 18       		.uleb128 0x18
 4877 014b 00       		.byte	0
 4878 014c 00       		.byte	0
 4879 014d 18       		.uleb128 0x18
 4880 014e 2E       		.uleb128 0x2e
 4881 014f 01       		.byte	0x1
 4882 0150 3F       		.uleb128 0x3f
 4883 0151 19       		.uleb128 0x19
 4884 0152 03       		.uleb128 0x3
 4885 0153 0E       		.uleb128 0xe
 4886 0154 3A       		.uleb128 0x3a
 4887 0155 0B       		.uleb128 0xb
 4888 0156 3B       		.uleb128 0x3b
 4889 0157 05       		.uleb128 0x5
 4890 0158 27       		.uleb128 0x27
 4891 0159 19       		.uleb128 0x19
 4892 015a 49       		.uleb128 0x49
 4893 015b 13       		.uleb128 0x13
 4894 015c 11       		.uleb128 0x11
 4895 015d 01       		.uleb128 0x1
 4896 015e 12       		.uleb128 0x12
 4897 015f 06       		.uleb128 0x6
 4898 0160 40       		.uleb128 0x40
 4899 0161 18       		.uleb128 0x18
 4900 0162 9642     		.uleb128 0x2116
 4901 0164 19       		.uleb128 0x19
 4902 0165 01       		.uleb128 0x1
 4903 0166 13       		.uleb128 0x13
 4904 0167 00       		.byte	0
 4905 0168 00       		.byte	0
 4906 0169 19       		.uleb128 0x19
 4907 016a 05       		.uleb128 0x5
 4908 016b 00       		.byte	0
 4909 016c 03       		.uleb128 0x3
 4910 016d 0E       		.uleb128 0xe
 4911 016e 3A       		.uleb128 0x3a
 4912 016f 0B       		.uleb128 0xb
 4913 0170 3B       		.uleb128 0x3b
 4914 0171 05       		.uleb128 0x5
 4915 0172 49       		.uleb128 0x49
 4916 0173 13       		.uleb128 0x13
 4917 0174 02       		.uleb128 0x2
 4918 0175 18       		.uleb128 0x18
 4919 0176 00       		.byte	0
 4920 0177 00       		.byte	0
 4921 0178 1A       		.uleb128 0x1a
 4922 0179 34       		.uleb128 0x34
 4923 017a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 108


 4924 017b 03       		.uleb128 0x3
 4925 017c 08       		.uleb128 0x8
 4926 017d 3A       		.uleb128 0x3a
 4927 017e 0B       		.uleb128 0xb
 4928 017f 3B       		.uleb128 0x3b
 4929 0180 05       		.uleb128 0x5
 4930 0181 49       		.uleb128 0x49
 4931 0182 13       		.uleb128 0x13
 4932 0183 02       		.uleb128 0x2
 4933 0184 18       		.uleb128 0x18
 4934 0185 00       		.byte	0
 4935 0186 00       		.byte	0
 4936 0187 1B       		.uleb128 0x1b
 4937 0188 2E       		.uleb128 0x2e
 4938 0189 01       		.byte	0x1
 4939 018a 3F       		.uleb128 0x3f
 4940 018b 19       		.uleb128 0x19
 4941 018c 03       		.uleb128 0x3
 4942 018d 0E       		.uleb128 0xe
 4943 018e 3A       		.uleb128 0x3a
 4944 018f 0B       		.uleb128 0xb
 4945 0190 3B       		.uleb128 0x3b
 4946 0191 05       		.uleb128 0x5
 4947 0192 49       		.uleb128 0x49
 4948 0193 13       		.uleb128 0x13
 4949 0194 11       		.uleb128 0x11
 4950 0195 01       		.uleb128 0x1
 4951 0196 12       		.uleb128 0x12
 4952 0197 06       		.uleb128 0x6
 4953 0198 40       		.uleb128 0x40
 4954 0199 18       		.uleb128 0x18
 4955 019a 9642     		.uleb128 0x2116
 4956 019c 19       		.uleb128 0x19
 4957 019d 01       		.uleb128 0x1
 4958 019e 13       		.uleb128 0x13
 4959 019f 00       		.byte	0
 4960 01a0 00       		.byte	0
 4961 01a1 1C       		.uleb128 0x1c
 4962 01a2 34       		.uleb128 0x34
 4963 01a3 00       		.byte	0
 4964 01a4 03       		.uleb128 0x3
 4965 01a5 0E       		.uleb128 0xe
 4966 01a6 3A       		.uleb128 0x3a
 4967 01a7 0B       		.uleb128 0xb
 4968 01a8 3B       		.uleb128 0x3b
 4969 01a9 05       		.uleb128 0x5
 4970 01aa 49       		.uleb128 0x49
 4971 01ab 13       		.uleb128 0x13
 4972 01ac 02       		.uleb128 0x2
 4973 01ad 18       		.uleb128 0x18
 4974 01ae 00       		.byte	0
 4975 01af 00       		.byte	0
 4976 01b0 1D       		.uleb128 0x1d
 4977 01b1 2E       		.uleb128 0x2e
 4978 01b2 00       		.byte	0
 4979 01b3 3F       		.uleb128 0x3f
 4980 01b4 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 109


 4981 01b5 03       		.uleb128 0x3
 4982 01b6 0E       		.uleb128 0xe
 4983 01b7 3A       		.uleb128 0x3a
 4984 01b8 0B       		.uleb128 0xb
 4985 01b9 3B       		.uleb128 0x3b
 4986 01ba 05       		.uleb128 0x5
 4987 01bb 11       		.uleb128 0x11
 4988 01bc 01       		.uleb128 0x1
 4989 01bd 12       		.uleb128 0x12
 4990 01be 06       		.uleb128 0x6
 4991 01bf 40       		.uleb128 0x40
 4992 01c0 18       		.uleb128 0x18
 4993 01c1 9642     		.uleb128 0x2116
 4994 01c3 19       		.uleb128 0x19
 4995 01c4 00       		.byte	0
 4996 01c5 00       		.byte	0
 4997 01c6 1E       		.uleb128 0x1e
 4998 01c7 2E       		.uleb128 0x2e
 4999 01c8 00       		.byte	0
 5000 01c9 3F       		.uleb128 0x3f
 5001 01ca 19       		.uleb128 0x19
 5002 01cb 03       		.uleb128 0x3
 5003 01cc 0E       		.uleb128 0xe
 5004 01cd 3A       		.uleb128 0x3a
 5005 01ce 0B       		.uleb128 0xb
 5006 01cf 3B       		.uleb128 0x3b
 5007 01d0 05       		.uleb128 0x5
 5008 01d1 49       		.uleb128 0x49
 5009 01d2 13       		.uleb128 0x13
 5010 01d3 11       		.uleb128 0x11
 5011 01d4 01       		.uleb128 0x1
 5012 01d5 12       		.uleb128 0x12
 5013 01d6 06       		.uleb128 0x6
 5014 01d7 40       		.uleb128 0x40
 5015 01d8 18       		.uleb128 0x18
 5016 01d9 9642     		.uleb128 0x2116
 5017 01db 19       		.uleb128 0x19
 5018 01dc 00       		.byte	0
 5019 01dd 00       		.byte	0
 5020 01de 1F       		.uleb128 0x1f
 5021 01df 2E       		.uleb128 0x2e
 5022 01e0 01       		.byte	0x1
 5023 01e1 3F       		.uleb128 0x3f
 5024 01e2 19       		.uleb128 0x19
 5025 01e3 03       		.uleb128 0x3
 5026 01e4 0E       		.uleb128 0xe
 5027 01e5 3A       		.uleb128 0x3a
 5028 01e6 0B       		.uleb128 0xb
 5029 01e7 3B       		.uleb128 0x3b
 5030 01e8 05       		.uleb128 0x5
 5031 01e9 11       		.uleb128 0x11
 5032 01ea 01       		.uleb128 0x1
 5033 01eb 12       		.uleb128 0x12
 5034 01ec 06       		.uleb128 0x6
 5035 01ed 40       		.uleb128 0x40
 5036 01ee 18       		.uleb128 0x18
 5037 01ef 9642     		.uleb128 0x2116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 110


 5038 01f1 19       		.uleb128 0x19
 5039 01f2 01       		.uleb128 0x1
 5040 01f3 13       		.uleb128 0x13
 5041 01f4 00       		.byte	0
 5042 01f5 00       		.byte	0
 5043 01f6 20       		.uleb128 0x20
 5044 01f7 2E       		.uleb128 0x2e
 5045 01f8 00       		.byte	0
 5046 01f9 3F       		.uleb128 0x3f
 5047 01fa 19       		.uleb128 0x19
 5048 01fb 03       		.uleb128 0x3
 5049 01fc 0E       		.uleb128 0xe
 5050 01fd 3A       		.uleb128 0x3a
 5051 01fe 0B       		.uleb128 0xb
 5052 01ff 3B       		.uleb128 0x3b
 5053 0200 05       		.uleb128 0x5
 5054 0201 11       		.uleb128 0x11
 5055 0202 01       		.uleb128 0x1
 5056 0203 12       		.uleb128 0x12
 5057 0204 06       		.uleb128 0x6
 5058 0205 40       		.uleb128 0x40
 5059 0206 18       		.uleb128 0x18
 5060 0207 9742     		.uleb128 0x2117
 5061 0209 19       		.uleb128 0x19
 5062 020a 00       		.byte	0
 5063 020b 00       		.byte	0
 5064 020c 21       		.uleb128 0x21
 5065 020d 2E       		.uleb128 0x2e
 5066 020e 00       		.byte	0
 5067 020f 3F       		.uleb128 0x3f
 5068 0210 19       		.uleb128 0x19
 5069 0211 03       		.uleb128 0x3
 5070 0212 0E       		.uleb128 0xe
 5071 0213 3A       		.uleb128 0x3a
 5072 0214 0B       		.uleb128 0xb
 5073 0215 3B       		.uleb128 0x3b
 5074 0216 05       		.uleb128 0x5
 5075 0217 49       		.uleb128 0x49
 5076 0218 13       		.uleb128 0x13
 5077 0219 11       		.uleb128 0x11
 5078 021a 01       		.uleb128 0x1
 5079 021b 12       		.uleb128 0x12
 5080 021c 06       		.uleb128 0x6
 5081 021d 40       		.uleb128 0x40
 5082 021e 18       		.uleb128 0x18
 5083 021f 9742     		.uleb128 0x2117
 5084 0221 19       		.uleb128 0x19
 5085 0222 00       		.byte	0
 5086 0223 00       		.byte	0
 5087 0224 22       		.uleb128 0x22
 5088 0225 34       		.uleb128 0x34
 5089 0226 00       		.byte	0
 5090 0227 03       		.uleb128 0x3
 5091 0228 0E       		.uleb128 0xe
 5092 0229 3A       		.uleb128 0x3a
 5093 022a 0B       		.uleb128 0xb
 5094 022b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 111


 5095 022c 05       		.uleb128 0x5
 5096 022d 49       		.uleb128 0x49
 5097 022e 13       		.uleb128 0x13
 5098 022f 3F       		.uleb128 0x3f
 5099 0230 19       		.uleb128 0x19
 5100 0231 3C       		.uleb128 0x3c
 5101 0232 19       		.uleb128 0x19
 5102 0233 00       		.byte	0
 5103 0234 00       		.byte	0
 5104 0235 23       		.uleb128 0x23
 5105 0236 34       		.uleb128 0x34
 5106 0237 00       		.byte	0
 5107 0238 03       		.uleb128 0x3
 5108 0239 0E       		.uleb128 0xe
 5109 023a 3A       		.uleb128 0x3a
 5110 023b 0B       		.uleb128 0xb
 5111 023c 3B       		.uleb128 0x3b
 5112 023d 0B       		.uleb128 0xb
 5113 023e 49       		.uleb128 0x49
 5114 023f 13       		.uleb128 0x13
 5115 0240 3F       		.uleb128 0x3f
 5116 0241 19       		.uleb128 0x19
 5117 0242 02       		.uleb128 0x2
 5118 0243 18       		.uleb128 0x18
 5119 0244 00       		.byte	0
 5120 0245 00       		.byte	0
 5121 0246 24       		.uleb128 0x24
 5122 0247 21       		.uleb128 0x21
 5123 0248 00       		.byte	0
 5124 0249 49       		.uleb128 0x49
 5125 024a 13       		.uleb128 0x13
 5126 024b 2F       		.uleb128 0x2f
 5127 024c 05       		.uleb128 0x5
 5128 024d 00       		.byte	0
 5129 024e 00       		.byte	0
 5130 024f 25       		.uleb128 0x25
 5131 0250 34       		.uleb128 0x34
 5132 0251 00       		.byte	0
 5133 0252 03       		.uleb128 0x3
 5134 0253 08       		.uleb128 0x8
 5135 0254 3A       		.uleb128 0x3a
 5136 0255 0B       		.uleb128 0xb
 5137 0256 3B       		.uleb128 0x3b
 5138 0257 0B       		.uleb128 0xb
 5139 0258 49       		.uleb128 0x49
 5140 0259 13       		.uleb128 0x13
 5141 025a 3F       		.uleb128 0x3f
 5142 025b 19       		.uleb128 0x19
 5143 025c 02       		.uleb128 0x2
 5144 025d 18       		.uleb128 0x18
 5145 025e 00       		.byte	0
 5146 025f 00       		.byte	0
 5147 0260 00       		.byte	0
 5148              		.section	.debug_aranges,"",%progbits
 5149 0000 D4000000 		.4byte	0xd4
 5150 0004 0200     		.2byte	0x2
 5151 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 112


 5152 000a 04       		.byte	0x4
 5153 000b 00       		.byte	0
 5154 000c 0000     		.2byte	0
 5155 000e 0000     		.2byte	0
 5156 0010 00000000 		.4byte	.LFB64
 5157 0014 44000000 		.4byte	.LFE64-.LFB64
 5158 0018 00000000 		.4byte	.LFB65
 5159 001c 6C000000 		.4byte	.LFE65-.LFB65
 5160 0020 00000000 		.4byte	.LFB66
 5161 0024 32000000 		.4byte	.LFE66-.LFB66
 5162 0028 00000000 		.4byte	.LFB67
 5163 002c 20000000 		.4byte	.LFE67-.LFB67
 5164 0030 00000000 		.4byte	.LFB68
 5165 0034 40000000 		.4byte	.LFE68-.LFB68
 5166 0038 00000000 		.4byte	.LFB69
 5167 003c DC000000 		.4byte	.LFE69-.LFB69
 5168 0040 00000000 		.4byte	.LFB70
 5169 0044 1C000000 		.4byte	.LFE70-.LFB70
 5170 0048 00000000 		.4byte	.LFB71
 5171 004c 28000000 		.4byte	.LFE71-.LFB71
 5172 0050 00000000 		.4byte	.LFB72
 5173 0054 C8000000 		.4byte	.LFE72-.LFB72
 5174 0058 00000000 		.4byte	.LFB73
 5175 005c 00010000 		.4byte	.LFE73-.LFB73
 5176 0060 00000000 		.4byte	.LFB74
 5177 0064 78000000 		.4byte	.LFE74-.LFB74
 5178 0068 00000000 		.4byte	.LFB75
 5179 006c 74010000 		.4byte	.LFE75-.LFB75
 5180 0070 00000000 		.4byte	.LFB76
 5181 0074 B8000000 		.4byte	.LFE76-.LFB76
 5182 0078 00000000 		.4byte	.LFB77
 5183 007c 1C000000 		.4byte	.LFE77-.LFB77
 5184 0080 00000000 		.4byte	.LFB78
 5185 0084 28000000 		.4byte	.LFE78-.LFB78
 5186 0088 00000000 		.4byte	.LFB79
 5187 008c 84000000 		.4byte	.LFE79-.LFB79
 5188 0090 00000000 		.4byte	.LFB80
 5189 0094 30000000 		.4byte	.LFE80-.LFB80
 5190 0098 00000000 		.4byte	.LFB81
 5191 009c F4020000 		.4byte	.LFE81-.LFB81
 5192 00a0 00000000 		.4byte	.LFB82
 5193 00a4 68010000 		.4byte	.LFE82-.LFB82
 5194 00a8 00000000 		.4byte	.LFB83
 5195 00ac 44010000 		.4byte	.LFE83-.LFB83
 5196 00b0 00000000 		.4byte	.LFB84
 5197 00b4 14000000 		.4byte	.LFE84-.LFB84
 5198 00b8 00000000 		.4byte	.LFB85
 5199 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5200 00c0 00000000 		.4byte	.LFB86
 5201 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5202 00c8 00000000 		.4byte	.LFB87
 5203 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5204 00d0 00000000 		.4byte	0
 5205 00d4 00000000 		.4byte	0
 5206              		.section	.debug_ranges,"",%progbits
 5207              	.Ldebug_ranges0:
 5208 0000 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 113


 5209 0004 44000000 		.4byte	.LFE64
 5210 0008 00000000 		.4byte	.LFB65
 5211 000c 6C000000 		.4byte	.LFE65
 5212 0010 00000000 		.4byte	.LFB66
 5213 0014 32000000 		.4byte	.LFE66
 5214 0018 00000000 		.4byte	.LFB67
 5215 001c 20000000 		.4byte	.LFE67
 5216 0020 00000000 		.4byte	.LFB68
 5217 0024 40000000 		.4byte	.LFE68
 5218 0028 00000000 		.4byte	.LFB69
 5219 002c DC000000 		.4byte	.LFE69
 5220 0030 00000000 		.4byte	.LFB70
 5221 0034 1C000000 		.4byte	.LFE70
 5222 0038 00000000 		.4byte	.LFB71
 5223 003c 28000000 		.4byte	.LFE71
 5224 0040 00000000 		.4byte	.LFB72
 5225 0044 C8000000 		.4byte	.LFE72
 5226 0048 00000000 		.4byte	.LFB73
 5227 004c 00010000 		.4byte	.LFE73
 5228 0050 00000000 		.4byte	.LFB74
 5229 0054 78000000 		.4byte	.LFE74
 5230 0058 00000000 		.4byte	.LFB75
 5231 005c 74010000 		.4byte	.LFE75
 5232 0060 00000000 		.4byte	.LFB76
 5233 0064 B8000000 		.4byte	.LFE76
 5234 0068 00000000 		.4byte	.LFB77
 5235 006c 1C000000 		.4byte	.LFE77
 5236 0070 00000000 		.4byte	.LFB78
 5237 0074 28000000 		.4byte	.LFE78
 5238 0078 00000000 		.4byte	.LFB79
 5239 007c 84000000 		.4byte	.LFE79
 5240 0080 00000000 		.4byte	.LFB80
 5241 0084 30000000 		.4byte	.LFE80
 5242 0088 00000000 		.4byte	.LFB81
 5243 008c F4020000 		.4byte	.LFE81
 5244 0090 00000000 		.4byte	.LFB82
 5245 0094 68010000 		.4byte	.LFE82
 5246 0098 00000000 		.4byte	.LFB83
 5247 009c 44010000 		.4byte	.LFE83
 5248 00a0 00000000 		.4byte	.LFB84
 5249 00a4 14000000 		.4byte	.LFE84
 5250 00a8 00000000 		.4byte	.LFB85
 5251 00ac 1A000000 		.4byte	.LFE85
 5252 00b0 00000000 		.4byte	.LFB86
 5253 00b4 2A000000 		.4byte	.LFE86
 5254 00b8 00000000 		.4byte	.LFB87
 5255 00bc 7C020000 		.4byte	.LFE87
 5256 00c0 00000000 		.4byte	0
 5257 00c4 00000000 		.4byte	0
 5258              		.section	.debug_line,"",%progbits
 5259              	.Ldebug_line0:
 5260 0000 9D050000 		.section	.debug_str,"MS",%progbits,1
 5260      02000E02 
 5260      00000201 
 5260      FB0E0D00 
 5260      01010101 
 5261              	.LASF136:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 114


 5262 0000 676D745F 		.ascii	"gmt_offset\000"
 5262      6F666673 
 5262      657400
 5263              	.LASF16:
 5264 000b 75696E74 		.ascii	"uint16\000"
 5264      313600
 5265              	.LASF38:
 5266 0012 76616C75 		.ascii	"value\000"
 5266      6500
 5267              	.LASF27:
 5268 0018 746D5F68 		.ascii	"tm_hour\000"
 5268      6F757200 
 5269              	.LASF32:
 5270 0020 746D5F79 		.ascii	"tm_yday\000"
 5270      64617900 
 5271              	.LASF172:
 5272 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5272      73657273 
 5272      5C64616E 
 5272      747A5C44 
 5272      6F63756D 
 5273 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5273      2E637964 
 5273      736E00
 5274              	.LASF144:
 5275 0060 62756666 		.ascii	"buffer_overflow\000"
 5275      65725F6F 
 5275      76657266 
 5275      6C6F7700 
 5276              	.LASF4:
 5277 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5277      6E74385F 
 5277      7400
 5278              	.LASF70:
 5279 007a 636F756E 		.ascii	"countDownResetCondition\000"
 5279      74446F77 
 5279      6E526573 
 5279      6574436F 
 5279      6E646974 
 5280              	.LASF54:
 5281 0092 6C6F6E67 		.ascii	"longitude\000"
 5281      69747564 
 5281      6500
 5282              	.LASF170:
 5283 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5283      43313120 
 5283      352E342E 
 5283      31203230 
 5283      31363036 
 5284 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5284      20726576 
 5284      6973696F 
 5284      6E203233 
 5284      37373135 
 5285 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5285      66756E63 
 5285      74696F6E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 115


 5285      2D736563 
 5285      74696F6E 
 5286              	.LASF139:
 5287 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5287      6D5F7761 
 5287      6B657570 
 5287      00
 5288              	.LASF10:
 5289 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5289      206C6F6E 
 5289      6720756E 
 5289      7369676E 
 5289      65642069 
 5290              	.LASF121:
 5291 014e 73616D70 		.ascii	"sample_freq\000"
 5291      6C655F66 
 5291      72657100 
 5292              	.LASF148:
 5293 015a 6D6F6465 		.ascii	"modem_state\000"
 5293      6D5F7374 
 5293      61746500 
 5294              	.LASF97:
 5295 0166 74657374 		.ascii	"test\000"
 5295      00
 5296              	.LASF159:
 5297 016b 616C6172 		.ascii	"alarmMeasure\000"
 5297      6D4D6561 
 5297      73757265 
 5297      00
 5298              	.LASF143:
 5299 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5299      52784275 
 5299      66666572 
 5299      00
 5300              	.LASF167:
 5301 0185 74696D65 		.ascii	"timetoLevelSensor\000"
 5301      746F4C65 
 5301      76656C53 
 5301      656E736F 
 5301      7200
 5302              	.LASF150:
 5303 0197 6D6F6465 		.ascii	"modem_stats\000"
 5303      6D5F7374 
 5303      61747300 
 5304              	.LASF9:
 5305 01a3 6C6F6E67 		.ascii	"long long int\000"
 5305      206C6F6E 
 5305      6720696E 
 5305      7400
 5306              	.LASF0:
 5307 01b1 7369676E 		.ascii	"signed char\000"
 5307      65642063 
 5307      68617200 
 5308              	.LASF47:
 5309 01bd 65636E6F 		.ascii	"ecno\000"
 5309      00
 5310              	.LASF67:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 116


 5311 01c2 636F756E 		.ascii	"countDownValue\000"
 5311      74446F77 
 5311      6E56616C 
 5311      756500
 5312              	.LASF160:
 5313 01d1 74696D65 		.ascii	"timeToMeasure\000"
 5313      546F4D65 
 5313      61737572 
 5313      6500
 5314              	.LASF50:
 5315 01df 74696D65 		.ascii	"time_to_network_connect\000"
 5315      5F746F5F 
 5315      6E657477 
 5315      6F726B5F 
 5315      636F6E6E 
 5316              	.LASF162:
 5317 01f7 74696D65 		.ascii	"timeToSync\000"
 5317      546F5379 
 5317      6E6300
 5318              	.LASF155:
 5319 0202 68747470 		.ascii	"http_body\000"
 5319      5F626F64 
 5319      7900
 5320              	.LASF108:
 5321 020c 7365745F 		.ascii	"set_up_internet_connection\000"
 5321      75705F69 
 5321      6E746572 
 5321      6E65745F 
 5321      636F6E6E 
 5322              	.LASF135:
 5323 0227 7365636F 		.ascii	"second\000"
 5323      6E6400
 5324              	.LASF131:
 5325 022e 79656172 		.ascii	"year\000"
 5325      00
 5326              	.LASF126:
 5327 0233 74656D70 		.ascii	"temp\000"
 5327      00
 5328              	.LASF6:
 5329 0238 6C6F6E67 		.ascii	"long int\000"
 5329      20696E74 
 5329      00
 5330              	.LASF45:
 5331 0241 72786C65 		.ascii	"rxlev\000"
 5331      7600
 5332              	.LASF68:
 5333 0247 63757272 		.ascii	"currentCountDownValue\000"
 5333      656E7443 
 5333      6F756E74 
 5333      446F776E 
 5333      56616C75 
 5334              	.LASF137:
 5335 025d 6D6F6465 		.ascii	"modem_get_state\000"
 5335      6D5F6765 
 5335      745F7374 
 5335      61746500 
 5336              	.LASF55:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 117


 5337 026d 616C7469 		.ascii	"altitude\000"
 5337      74756465 
 5337      00
 5338              	.LASF15:
 5339 0276 75696E74 		.ascii	"uint8\000"
 5339      3800
 5340              	.LASF125:
 5341 027c 6C657665 		.ascii	"level_sensor_freq\000"
 5341      6C5F7365 
 5341      6E736F72 
 5341      5F667265 
 5341      7100
 5342              	.LASF165:
 5343 028e 74696D65 		.ascii	"timeToAppLED\000"
 5343      546F4170 
 5343      704C4544 
 5343      00
 5344              	.LASF19:
 5345 029b 696E7433 		.ascii	"int32\000"
 5345      3200
 5346              	.LASF127:
 5347 02a1 6D6F6465 		.ascii	"modem_configure_settings\000"
 5347      6D5F636F 
 5347      6E666967 
 5347      7572655F 
 5347      73657474 
 5348              	.LASF115:
 5349 02ba 735F7369 		.ascii	"s_sim_type\000"
 5349      6D5F7479 
 5349      706500
 5350              	.LASF98:
 5351 02c5 6E657477 		.ascii	"network_time\000"
 5351      6F726B5F 
 5351      74696D65 
 5351      00
 5352              	.LASF3:
 5353 02d2 73686F72 		.ascii	"short unsigned int\000"
 5353      7420756E 
 5353      7369676E 
 5353      65642069 
 5353      6E7400
 5354              	.LASF17:
 5355 02e5 75696E74 		.ascii	"uint32\000"
 5355      333200
 5356              	.LASF94:
 5357 02ec 696E7465 		.ascii	"interval\000"
 5357      7276616C 
 5357      00
 5358              	.LASF7:
 5359 02f5 5F5F7569 		.ascii	"__uint32_t\000"
 5359      6E743332 
 5359      5F7400
 5360              	.LASF129:
 5361 0300 6D6F6465 		.ascii	"modem_get_network_time\000"
 5361      6D5F6765 
 5361      745F6E65 
 5361      74776F72 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 118


 5361      6B5F7469 
 5362              	.LASF29:
 5363 0317 746D5F6D 		.ascii	"tm_mon\000"
 5363      6F6E00
 5364              	.LASF120:
 5365 031e 735F6C65 		.ascii	"s_level_sensor\000"
 5365      76656C5F 
 5365      73656E73 
 5365      6F7200
 5366              	.LASF62:
 5367 032d 64656275 		.ascii	"debug_level\000"
 5367      675F6C65 
 5367      76656C00 
 5368              	.LASF138:
 5369 0339 6D6F6465 		.ascii	"modem_sleep\000"
 5369      6D5F736C 
 5369      65657000 
 5370              	.LASF118:
 5371 0345 735F6465 		.ascii	"s_debug_freq\000"
 5371      6275675F 
 5371      66726571 
 5371      00
 5372              	.LASF112:
 5373 0352 75706461 		.ascii	"updatable_parameters_initialize\000"
 5373      7461626C 
 5373      655F7061 
 5373      72616D65 
 5373      74657273 
 5374              	.LASF30:
 5375 0372 746D5F79 		.ascii	"tm_year\000"
 5375      65617200 
 5376              	.LASF161:
 5377 037a 616C6172 		.ascii	"alarmSync\000"
 5377      6D53796E 
 5377      6300
 5378              	.LASF80:
 5379 0384 70696E73 		.ascii	"pins_configure_active\000"
 5379      5F636F6E 
 5379      66696775 
 5379      72655F61 
 5379      63746976 
 5380              	.LASF40:
 5381 039a 6B65795F 		.ascii	"key_value_t\000"
 5381      76616C75 
 5381      655F7400 
 5382              	.LASF85:
 5383 03a6 7077725F 		.ascii	"pwr_check\000"
 5383      63686563 
 5383      6B00
 5384              	.LASF8:
 5385 03b0 6C6F6E67 		.ascii	"long unsigned int\000"
 5385      20756E73 
 5385      69676E65 
 5385      6420696E 
 5385      7400
 5386              	.LASF100:
 5387 03c2 65787472 		.ascii	"extract_string\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 119


 5387      6163745F 
 5387      73747269 
 5387      6E6700
 5388              	.LASF90:
 5389 03d1 74696D65 		.ascii	"timeout\000"
 5389      6F757400 
 5390              	.LASF113:
 5391 03d9 6765745F 		.ascii	"get_cell_network_stats\000"
 5391      63656C6C 
 5391      5F6E6574 
 5391      776F726B 
 5391      5F737461 
 5392              	.LASF39:
 5393 03f0 74696D65 		.ascii	"timeStamp\000"
 5393      5374616D 
 5393      7000
 5394              	.LASF56:
 5395 03fa 74696D65 		.ascii	"time_to_lock\000"
 5395      5F746F5F 
 5395      6C6F636B 
 5395      00
 5396              	.LASF147:
 5397 0407 64617461 		.ascii	"data\000"
 5397      00
 5398              	.LASF76:
 5399 040c 65705F70 		.ascii	"ep_port\000"
 5399      6F727400 
 5400              	.LASF33:
 5401 0414 746D5F69 		.ascii	"tm_isdst\000"
 5401      73647374 
 5401      00
 5402              	.LASF72:
 5403 041d 6D6F6465 		.ascii	"modem_info\000"
 5403      6D5F696E 
 5403      666F00
 5404              	.LASF75:
 5405 0428 65705F68 		.ascii	"ep_host\000"
 5405      6F737400 
 5406              	.LASF73:
 5407 0430 63686970 		.ascii	"chip_uniqueId\000"
 5407      5F756E69 
 5407      71756549 
 5407      6400
 5408              	.LASF95:
 5409 043e 6D6F6465 		.ascii	"modem_power_up\000"
 5409      6D5F706F 
 5409      7765725F 
 5409      757000
 5410              	.LASF171:
 5411 044d 6D6F6465 		.ascii	"modem.c\000"
 5411      6D2E6300 
 5412              	.LASF102:
 5413 0455 62656769 		.ascii	"beginMarker\000"
 5413      6E4D6172 
 5413      6B657200 
 5414              	.LASF104:
 5415 0461 74617267 		.ascii	"target\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 120


 5415      657400
 5416              	.LASF51:
 5417 0468 74696D65 		.ascii	"time_to_acquire_ip\000"
 5417      5F746F5F 
 5417      61637175 
 5417      6972655F 
 5417      697000
 5418              	.LASF103:
 5419 047b 656E644D 		.ascii	"endMarker\000"
 5419      61726B65 
 5419      7200
 5420              	.LASF2:
 5421 0485 73686F72 		.ascii	"short int\000"
 5421      7420696E 
 5421      7400
 5422              	.LASF130:
 5423 048f 65706F63 		.ascii	"epoch_time\000"
 5423      685F7469 
 5423      6D6500
 5424              	.LASF5:
 5425 049a 5F5F696E 		.ascii	"__int32_t\000"
 5425      7433325F 
 5425      7400
 5426              	.LASF164:
 5427 04a4 616C6172 		.ascii	"alarmAppLED\000"
 5427      6D417070 
 5427      4C454400 
 5428              	.LASF101:
 5429 04b0 66726F6D 		.ascii	"from\000"
 5429      00
 5430              	.LASF107:
 5431 04b5 63726567 		.ascii	"creg\000"
 5431      00
 5432              	.LASF123:
 5433 04ba 64656275 		.ascii	"debug_freq\000"
 5433      675F6672 
 5433      657100
 5434              	.LASF91:
 5435 04c5 61745F61 		.ascii	"at_attempt\000"
 5435      7474656D 
 5435      707400
 5436              	.LASF99:
 5437 04d0 61745F77 		.ascii	"at_write_command\000"
 5437      72697465 
 5437      5F636F6D 
 5437      6D616E64 
 5437      00
 5438              	.LASF74:
 5439 04e1 7379735F 		.ascii	"sys_info_t\000"
 5439      696E666F 
 5439      5F7400
 5440              	.LASF66:
 5441 04ec 75706461 		.ascii	"updatable_parameters_t\000"
 5441      7461626C 
 5441      655F7061 
 5441      72616D65 
 5441      74657273 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 121


 5442              	.LASF122:
 5443 0503 7265706F 		.ascii	"report_freq\000"
 5443      72745F66 
 5443      72657100 
 5444              	.LASF145:
 5445 050f 64617461 		.ascii	"dataPointsInStack\000"
 5445      506F696E 
 5445      7473496E 
 5445      53746163 
 5445      6B00
 5446              	.LASF26:
 5447 0521 746D5F6D 		.ascii	"tm_min\000"
 5447      696E00
 5448              	.LASF24:
 5449 0528 73697A65 		.ascii	"sizetype\000"
 5449      74797065 
 5449      00
 5450              	.LASF132:
 5451 0531 6D6F6E74 		.ascii	"month\000"
 5451      6800
 5452              	.LASF106:
 5453 0537 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5453      6F6E6E65 
 5453      63746564 
 5453      5F746F5F 
 5453      63656C6C 
 5454              	.LASF168:
 5455 0554 75617274 		.ascii	"uart_received_string\000"
 5455      5F726563 
 5455      65697665 
 5455      645F7374 
 5455      72696E67 
 5456              	.LASF53:
 5457 0569 6C617469 		.ascii	"latitude\000"
 5457      74756465 
 5457      00
 5458              	.LASF34:
 5459 0572 74657374 		.ascii	"test_name\000"
 5459      5F6E616D 
 5459      6500
 5460              	.LASF163:
 5461 057c 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5461      546F5379 
 5461      636E5265 
 5461      6D6F7465 
 5461      50617261 
 5462              	.LASF96:
 5463 0593 6D6F6465 		.ascii	"modem_test\000"
 5463      6D5F7465 
 5463      737400
 5464              	.LASF111:
 5465 059e 6D617463 		.ascii	"match\000"
 5465      6800
 5466              	.LASF151:
 5467 05a4 75706461 		.ascii	"updatable_parameters\000"
 5467      7461626C 
 5467      655F7061 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 122


 5467      72616D65 
 5467      74657273 
 5468              	.LASF133:
 5469 05b9 686F7572 		.ascii	"hour\000"
 5469      00
 5470              	.LASF88:
 5471 05be 636F6D6D 		.ascii	"commands\000"
 5471      616E6473 
 5471      00
 5472              	.LASF92:
 5473 05c7 636F6D70 		.ascii	"compare_location\000"
 5473      6172655F 
 5473      6C6F6361 
 5473      74696F6E 
 5473      00
 5474              	.LASF20:
 5475 05d8 666C6F61 		.ascii	"float\000"
 5475      7400
 5476              	.LASF78:
 5477 05de 6D6F6465 		.ascii	"modem_initialize\000"
 5477      6D5F696E 
 5477      69746961 
 5477      6C697A65 
 5477      00
 5478              	.LASF117:
 5479 05ef 735F7265 		.ascii	"s_report_freq\000"
 5479      706F7274 
 5479      5F667265 
 5479      7100
 5480              	.LASF59:
 5481 05fd 73696D5F 		.ascii	"sim_type\000"
 5481      74797065 
 5481      00
 5482              	.LASF109:
 5483 0606 6973725F 		.ascii	"isr_telit_rx\000"
 5483      74656C69 
 5483      745F7278 
 5483      00
 5484              	.LASF71:
 5485 0613 616C6172 		.ascii	"alarm\000"
 5485      6D00
 5486              	.LASF65:
 5487 0619 5F426F6F 		.ascii	"_Bool\000"
 5487      6C00
 5488              	.LASF13:
 5489 061f 696E7433 		.ascii	"int32_t\000"
 5489      325F7400 
 5490              	.LASF1:
 5491 0627 756E7369 		.ascii	"unsigned char\000"
 5491      676E6564 
 5491      20636861 
 5491      7200
 5492              	.LASF158:
 5493 0635 73797374 		.ascii	"system_settings\000"
 5493      656D5F73 
 5493      65747469 
 5493      6E677300 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 123


 5494              	.LASF93:
 5495 0645 64656C61 		.ascii	"delay\000"
 5495      7900
 5496              	.LASF48:
 5497 064b 72737271 		.ascii	"rsrq\000"
 5497      00
 5498              	.LASF61:
 5499 0650 73796E63 		.ascii	"sync_time\000"
 5499      5F74696D 
 5499      6500
 5500              	.LASF46:
 5501 065a 72736370 		.ascii	"rscp\000"
 5501      00
 5502              	.LASF140:
 5503 065f 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5503      6D5F6765 
 5503      745F6770 
 5503      735F636F 
 5503      6F726469 
 5504              	.LASF37:
 5505 0679 74657374 		.ascii	"test_t\000"
 5505      5F7400
 5506              	.LASF157:
 5507 0680 73797374 		.ascii	"system_info\000"
 5507      656D5F69 
 5507      6E666F00 
 5508              	.LASF43:
 5509 068c 696D6569 		.ascii	"imei\000"
 5509      00
 5510              	.LASF36:
 5511 0691 72656173 		.ascii	"reason\000"
 5511      6F6E00
 5512              	.LASF49:
 5513 0698 72737270 		.ascii	"rsrp\000"
 5513      00
 5514              	.LASF52:
 5515 069d 6D6F6465 		.ascii	"modem_stats_t\000"
 5515      6D5F7374 
 5515      6174735F 
 5515      7400
 5516              	.LASF87:
 5517 06ab 75617274 		.ascii	"uart_string_reset\000"
 5517      5F737472 
 5517      696E675F 
 5517      72657365 
 5517      7400
 5518              	.LASF166:
 5519 06bd 616C6172 		.ascii	"alarmLevelSensor\000"
 5519      6D4C6576 
 5519      656C5365 
 5519      6E736F72 
 5519      00
 5520              	.LASF31:
 5521 06ce 746D5F77 		.ascii	"tm_wday\000"
 5521      64617900 
 5522              	.LASF86:
 5523 06d6 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 124


 5523      6D5F736F 
 5523      66745F70 
 5523      6F776572 
 5523      5F637963 
 5524              	.LASF64:
 5525 06ed 4C657665 		.ascii	"Level_Sensor_freq\000"
 5525      6C5F5365 
 5525      6E736F72 
 5525      5F667265 
 5525      7100
 5526              	.LASF152:
 5527 06ff 6C657665 		.ascii	"level_sensor_inbox\000"
 5527      6C5F7365 
 5527      6E736F72 
 5527      5F696E62 
 5527      6F7800
 5528              	.LASF23:
 5529 0712 6C6F6E67 		.ascii	"long double\000"
 5529      20646F75 
 5529      626C6500 
 5530              	.LASF22:
 5531 071e 63686172 		.ascii	"char\000"
 5531      00
 5532              	.LASF105:
 5533 0723 6D6F6465 		.ascii	"modem_process_tasks\000"
 5533      6D5F7072 
 5533      6F636573 
 5533      735F7461 
 5533      736B7300 
 5534              	.LASF11:
 5535 0737 756E7369 		.ascii	"unsigned int\000"
 5535      676E6564 
 5535      20696E74 
 5535      00
 5536              	.LASF128:
 5537 0744 4346554E 		.ascii	"CFUN\000"
 5537      00
 5538              	.LASF42:
 5539 0749 6D6F6465 		.ascii	"model_id\000"
 5539      6C5F6964 
 5539      00
 5540              	.LASF156:
 5541 0752 68747470 		.ascii	"http_route\000"
 5541      5F726F75 
 5541      746500
 5542              	.LASF44:
 5543 075d 6D6F6465 		.ascii	"modem_info_t\000"
 5543      6D5F696E 
 5543      666F5F74 
 5543      00
 5544              	.LASF58:
 5545 076a 6770735F 		.ascii	"gps_t\000"
 5545      7400
 5546              	.LASF169:
 5547 0770 75617274 		.ascii	"uart_string_index\000"
 5547      5F737472 
 5547      696E675F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 125


 5547      696E6465 
 5547      7800
 5548              	.LASF60:
 5549 0782 6D656173 		.ascii	"measure_time\000"
 5549      7572655F 
 5549      74696D65 
 5549      00
 5550              	.LASF110:
 5551 078f 69735F63 		.ascii	"is_connected_to_internet\000"
 5551      6F6E6E65 
 5551      63746564 
 5551      5F746F5F 
 5551      696E7465 
 5552              	.LASF149:
 5553 07a8 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5553      6D5F7374 
 5553      6172745F 
 5553      74696D65 
 5553      5F737461 
 5554              	.LASF142:
 5555 07bf 6770735F 		.ascii	"gps_status\000"
 5555      73746174 
 5555      757300
 5556              	.LASF79:
 5557 07ca 70696E73 		.ascii	"pins_configure_inactive\000"
 5557      5F636F6E 
 5557      66696775 
 5557      72655F69 
 5557      6E616374 
 5558              	.LASF119:
 5559 07e2 735F6170 		.ascii	"s_app_led\000"
 5559      705F6C65 
 5559      6400
 5560              	.LASF41:
 5561 07ec 73696D5F 		.ascii	"sim_id\000"
 5561      696400
 5562              	.LASF28:
 5563 07f3 746D5F6D 		.ascii	"tm_mday\000"
 5563      64617900 
 5564              	.LASF57:
 5565 07fb 76616C69 		.ascii	"valid\000"
 5565      6400
 5566              	.LASF134:
 5567 0801 6D696E75 		.ascii	"minute\000"
 5567      746500
 5568              	.LASF14:
 5569 0808 75696E74 		.ascii	"uint32_t\000"
 5569      33325F74 
 5569      00
 5570              	.LASF25:
 5571 0811 746D5F73 		.ascii	"tm_sec\000"
 5571      656300
 5572              	.LASF114:
 5573 0818 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5573      75706461 
 5573      7465645F 
 5573      70617261 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 126


 5573      6D657465 
 5574              	.LASF116:
 5575 083b 735F7361 		.ascii	"s_sample_freq\000"
 5575      6D706C65 
 5575      5F667265 
 5575      7100
 5576              	.LASF35:
 5577 0849 73746174 		.ascii	"status\000"
 5577      757300
 5578              	.LASF146:
 5579 0850 64617461 		.ascii	"dataPointsInStackDesired\000"
 5579      506F696E 
 5579      7473496E 
 5579      53746163 
 5579      6B446573 
 5580              	.LASF63:
 5581 0869 4170705F 		.ascii	"App_LED_freq\000"
 5581      4C45445F 
 5581      66726571 
 5581      00
 5582              	.LASF77:
 5583 0876 7379735F 		.ascii	"sys_settings_t\000"
 5583      73657474 
 5583      696E6773 
 5583      5F7400
 5584              	.LASF12:
 5585 0885 75696E74 		.ascii	"uint8_t\000"
 5585      385F7400 
 5586              	.LASF18:
 5587 088d 696E7431 		.ascii	"int16\000"
 5587      3600
 5588              	.LASF82:
 5589 0893 61745F72 		.ascii	"at_ready\000"
 5589      65616479 
 5589      00
 5590              	.LASF83:
 5591 089c 61747465 		.ascii	"attempts\000"
 5591      6D707473 
 5591      00
 5592              	.LASF69:
 5593 08a5 636F756E 		.ascii	"countDownType\000"
 5593      74446F77 
 5593      6E547970 
 5593      6500
 5594              	.LASF84:
 5595 08b3 626F6F74 		.ascii	"boot_time\000"
 5595      5F74696D 
 5595      6500
 5596              	.LASF89:
 5597 08bd 65787065 		.ascii	"expected_response\000"
 5597      63746564 
 5597      5F726573 
 5597      706F6E73 
 5597      6500
 5598              	.LASF141:
 5599 08cf 6C6F636B 		.ascii	"lock_time\000"
 5599      5F74696D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc0pb4UA.s 			page 127


 5599      6500
 5600              	.LASF154:
 5601 08d9 68747470 		.ascii	"http_request\000"
 5601      5F726571 
 5601      75657374 
 5601      00
 5602              	.LASF81:
 5603 08e6 6D6F6465 		.ascii	"modem_power_down\000"
 5603      6D5F706F 
 5603      7765725F 
 5603      646F776E 
 5603      00
 5604              	.LASF21:
 5605 08f7 646F7562 		.ascii	"double\000"
 5605      6C6500
 5606              	.LASF153:
 5607 08fe 6170705F 		.ascii	"app_led_inbox\000"
 5607      6C65645F 
 5607      696E626F 
 5607      7800
 5608              	.LASF124:
 5609 090c 6170705F 		.ascii	"app_led_freq\000"
 5609      6C65645F 
 5609      66726571 
 5609      00
 5610              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
