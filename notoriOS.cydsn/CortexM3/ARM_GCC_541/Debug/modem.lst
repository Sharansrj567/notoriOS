ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,10,4
  32              		.comm	App_LED_enabled,1,1
  33              		.comm	app_led_inbox,100,4
  34              		.comm	level_sensor_inbox,100,4
  35              		.comm	level_sensor_enabled,1,1
  36              		.comm	valve_diameter,4,4
  37              		.comm	valve_type,10,4
  38              		.comm	valve_enabled,1,1
  39              		.comm	valve_inbox,100,4
  40              		.comm	autosampler_enabled,1,1
  41              		.comm	autosampler_inbox,100,4
  42              		.comm	http_request,10000,4
  43              		.comm	http_body,10000,4
  44              		.comm	http_route,200,4
  45              		.comm	system_info,28,4
  46              		.comm	system_settings,104,4
  47              		.comm	alarmMeasure,6,4
  48              		.comm	timeToMeasure,1,1
  49              		.comm	alarmSync,6,4
  50              		.comm	timeToSync,1,1
  51              		.comm	timeToSycnRemoteParams,1,1
  52              		.comm	hey,1,1
  53              		.comm	alarmAppLED,6,4
  54              		.comm	timeToAppLED,1,1
  55              		.comm	alarmLevelSensor,6,4
  56              		.comm	timeToLevelSensor,1,1
  57              		.comm	alarmDownstreamLevelSensor,6,4
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 2


  58              		.comm	timeToDownstreamLevelSensor,1,1
  59              		.comm	alarmValve,6,4
  60              		.comm	timeToValve,1,1
  61              		.comm	alarmAutosampler,6,4
  62              		.comm	timeToAutosampler,1,1
  63              		.comm	uart_received_string,1024,4
  64              		.global	uart_string_index
  65              		.bss
  66              		.align	1
  67              		.type	uart_string_index, %object
  68              		.size	uart_string_index, 2
  69              	uart_string_index:
  70 0000 0000     		.space	2
  71              		.section	.text.isr_telit_rx,"ax",%progbits
  72              		.align	2
  73              		.global	isr_telit_rx
  74              		.thumb
  75              		.thumb_func
  76              		.type	isr_telit_rx, %function
  77              	isr_telit_rx:
  78              	.LFB64:
  79              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  80              		.loc 1 18 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 98B5     		push	{r3, r4, r7, lr}
  85              		.cfi_def_cfa_offset 16
  86              		.cfi_offset 3, -16
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  92              		.loc 1 20 0
  93 0004 12E0     		b	.L2
  94              	.L3:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 3


  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  95              		.loc 1 21 0
  96 0006 0D4B     		ldr	r3, .L4
  97 0008 B3F90030 		ldrsh	r3, [r3]
  98 000c 1C46     		mov	r4, r3
  99 000e FFF7FEFF 		bl	UART_Telit_GetChar
 100 0012 0346     		mov	r3, r0
 101 0014 1A46     		mov	r2, r3
 102 0016 0A4B     		ldr	r3, .L4+4
 103 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
 104              		.loc 1 22 0
 105 001a 084B     		ldr	r3, .L4
 106 001c B3F90030 		ldrsh	r3, [r3]
 107 0020 9BB2     		uxth	r3, r3
 108 0022 0133     		adds	r3, r3, #1
 109 0024 9BB2     		uxth	r3, r3
 110 0026 1AB2     		sxth	r2, r3
 111 0028 044B     		ldr	r3, .L4
 112 002a 1A80     		strh	r2, [r3]	@ movhi
 113              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 114              		.loc 1 20 0
 115 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 116 0030 0346     		mov	r3, r0
 117 0032 012B     		cmp	r3, #1
 118 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 119              		.loc 1 25 0
 120 0036 00BF     		nop
 121 0038 98BD     		pop	{r3, r4, r7, pc}
 122              	.L5:
 123 003a 00BF     		.align	2
 124              	.L4:
 125 003c 00000000 		.word	uart_string_index
 126 0040 00000000 		.word	uart_received_string
 127              		.cfi_endproc
 128              	.LFE64:
 129              		.size	isr_telit_rx, .-isr_telit_rx
 130              		.section	.text.modem_initialize,"ax",%progbits
 131              		.align	2
 132              		.global	modem_initialize
 133              		.thumb
 134              		.thumb_func
 135              		.type	modem_initialize, %function
 136              	modem_initialize:
 137              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 138              		.loc 1 28 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 4


 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 00AF     		add	r7, sp, #0
 147              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 148              		.loc 1 31 0
 149 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 150              		.loc 1 32 0
 151 0008 154B     		ldr	r3, .L7
 152 000a 0022     		movs	r2, #0
 153 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 154              		.loc 1 34 0
 155 000e 154B     		ldr	r3, .L7+4
 156 0010 0022     		movs	r2, #0
 157 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 158              		.loc 1 35 0
 159 0016 134B     		ldr	r3, .L7+4
 160 0018 0022     		movs	r2, #0
 161 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 162              		.loc 1 36 0
 163 001c 114B     		ldr	r3, .L7+4
 164 001e 0022     		movs	r2, #0
 165 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 166              		.loc 1 37 0
 167 0022 114B     		ldr	r3, .L7+8
 168 0024 0022     		movs	r2, #0
 169 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 170              		.loc 1 38 0
 171 0028 0F4B     		ldr	r3, .L7+8
 172 002a 0022     		movs	r2, #0
 173 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 174              		.loc 1 39 0
 175 002e 0E4B     		ldr	r3, .L7+8
 176 0030 0022     		movs	r2, #0
 177 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 178              		.loc 1 40 0
 179 0034 0C4B     		ldr	r3, .L7+8
 180 0036 0022     		movs	r2, #0
 181 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 182              		.loc 1 41 0
 183 003a 0B4B     		ldr	r3, .L7+8
 184 003c 0022     		movs	r2, #0
 185 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 5


 186              		.loc 1 42 0
 187 0040 094B     		ldr	r3, .L7+8
 188 0042 0022     		movs	r2, #0
 189 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 190              		.loc 1 43 0
 191 0046 084B     		ldr	r3, .L7+8
 192 0048 0022     		movs	r2, #0
 193 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 194              		.loc 1 44 0
 195 004c 064B     		ldr	r3, .L7+8
 196 004e 0022     		movs	r2, #0
 197 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 198              		.loc 1 48 0
 199 0052 0021     		movs	r1, #0
 200 0054 4020     		movs	r0, #64
 201 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 202              		.loc 1 50 0
 203 005a 00BF     		nop
 204 005c 80BD     		pop	{r7, pc}
 205              	.L8:
 206 005e 00BF     		.align	2
 207              	.L7:
 208 0060 00000000 		.word	modem_state
 209 0064 00000000 		.word	modem_info
 210 0068 00000000 		.word	modem_stats
 211              		.cfi_endproc
 212              	.LFE65:
 213              		.size	modem_initialize, .-modem_initialize
 214              		.section	.text.pins_configure_inactive,"ax",%progbits
 215              		.align	2
 216              		.global	pins_configure_inactive
 217              		.thumb
 218              		.thumb_func
 219              		.type	pins_configure_inactive, %function
 220              	pins_configure_inactive:
 221              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 222              		.loc 1 54 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 1, uses_anonymous_args = 0
 226 0000 80B5     		push	{r7, lr}
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 6


 231              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 232              		.loc 1 56 0
 233 0004 0020     		movs	r0, #0
 234 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 235              		.loc 1 57 0
 236 000a 0C20     		movs	r0, #12
 237 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 238              		.loc 1 59 0
 239 0010 0020     		movs	r0, #0
 240 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 241              		.loc 1 62 0
 242 0016 0020     		movs	r0, #0
 243 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 244              		.loc 1 63 0
 245 001c 0020     		movs	r0, #0
 246 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 247              		.loc 1 64 0
 248 0022 0020     		movs	r0, #0
 249 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 250              		.loc 1 65 0
 251 0028 0020     		movs	r0, #0
 252 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 253              		.loc 1 67 0
 254 002e 00BF     		nop
 255 0030 80BD     		pop	{r7, pc}
 256              		.cfi_endproc
 257              	.LFE66:
 258              		.size	pins_configure_inactive, .-pins_configure_inactive
 259 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 260              		.align	2
 261              		.global	pins_configure_active
 262              		.thumb
 263              		.thumb_func
 264              		.type	pins_configure_active, %function
 265              	pins_configure_active:
 266              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 267              		.loc 1 70 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 1, uses_anonymous_args = 0
 271 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 7


 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0002 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 277              		.loc 1 72 0
 278 0004 0220     		movs	r0, #2
 279 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 280              		.loc 1 73 0
 281 000a 0120     		movs	r0, #1
 282 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 283              		.loc 1 74 0
 284 0010 0120     		movs	r0, #1
 285 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 286              		.loc 1 75 0
 287 0016 6420     		movs	r0, #100
 288 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 289              		.loc 1 76 0
 290 001c 00BF     		nop
 291 001e 80BD     		pop	{r7, pc}
 292              		.cfi_endproc
 293              	.LFE67:
 294              		.size	pins_configure_active, .-pins_configure_active
 295              		.section	.rodata
 296              		.align	2
 297              	.LC0:
 298 0000 4F4B00   		.ascii	"OK\000"
 299 0003 00       		.align	2
 300              	.LC1:
 301 0004 41542353 		.ascii	"AT#SHDN\015\000"
 301      48444E0D 
 301      00
 302              		.section	.text.modem_power_down,"ax",%progbits
 303              		.align	2
 304              		.global	modem_power_down
 305              		.thumb
 306              		.thumb_func
 307              		.type	modem_power_down, %function
 308              	modem_power_down:
 309              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 310              		.loc 1 79 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314 0000 80B5     		push	{r7, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 7, -8
 317              		.cfi_offset 14, -4
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 8


 318 0002 00AF     		add	r7, sp, #0
 319              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 320              		.loc 1 82 0
 321 0004 41F28832 		movw	r2, #5000
 322 0008 0A49     		ldr	r1, .L12
 323 000a 0B48     		ldr	r0, .L12+4
 324 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 325              		.loc 1 85 0
 326 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 327              		.loc 1 86 0
 328 0014 4FF47A70 		mov	r0, #1000
 329 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 330              		.loc 1 88 0
 331 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 332              		.loc 1 89 0
 333 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 334              		.loc 1 90 0
 335 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 336              		.loc 1 91 0
 337 0028 044B     		ldr	r3, .L12+8
 338 002a 0022     		movs	r2, #0
 339 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 340              		.loc 1 93 0
 341 002e 00BF     		nop
 342 0030 80BD     		pop	{r7, pc}
 343              	.L13:
 344 0032 00BF     		.align	2
 345              	.L12:
 346 0034 00000000 		.word	.LC0
 347 0038 04000000 		.word	.LC1
 348 003c 00000000 		.word	modem_state
 349              		.cfi_endproc
 350              	.LFE68:
 351              		.size	modem_power_down, .-modem_power_down
 352              		.section	.rodata
 353 000d 000000   		.align	2
 354              	.LC2:
 355 0010 41544530 		.ascii	"ATE0\015\000"
 355      0D00
 356 0016 0000     		.align	2
 357              	.LC3:
 358 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 358      6D20626F 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 9


 358      6F742074 
 358      696D653A 
 358      20256400 
 359              		.align	2
 360              	.LC4:
 361 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 361      6D207265 
 361      61647920 
 361      666F7220 
 361      41542063 
 362 005d 000000   		.align	2
 363              	.LC5:
 364 0060 4E6F2072 		.ascii	"No response from modem.\000"
 364      6573706F 
 364      6E736520 
 364      66726F6D 
 364      206D6F64 
 365              		.section	.text.modem_power_up,"ax",%progbits
 366              		.align	2
 367              		.global	modem_power_up
 368              		.thumb
 369              		.thumb_func
 370              		.type	modem_power_up, %function
 371              	modem_power_up:
 372              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 373              		.loc 1 97 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 80B5     		push	{r7, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 82B0     		sub	sp, sp, #8
 382              		.cfi_def_cfa_offset 16
 383 0004 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 385              		.loc 1 99 0
 386 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 387              		.loc 1 100 0
 388 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 389              		.loc 1 101 0
 390 000e 2C48     		ldr	r0, .L27
 391 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 392              		.loc 1 103 0
 393 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 10


 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 394              		.loc 1 106 0
 395 0018 0023     		movs	r3, #0
 396 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 397              		.loc 1 107 0
 398 001c 0023     		movs	r3, #0
 399 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 400              		.loc 1 109 0
 401 0020 FFF7FEFF 		bl	getTimeStamp
 402 0024 3860     		str	r0, [r7]
 403              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 404              		.loc 1 112 0
 405 0026 0023     		movs	r3, #0
 406 0028 BB71     		strb	r3, [r7, #6]
 407 002a 1CE0     		b	.L15
 408              	.L22:
 409              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 410              		.loc 1 114 0
 411 002c 0023     		movs	r3, #0
 412 002e 7B71     		strb	r3, [r7, #5]
 413 0030 0EE0     		b	.L16
 414              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 415              		.loc 1 116 0
 416 0032 4FF47A72 		mov	r2, #1000
 417 0036 2349     		ldr	r1, .L27+4
 418 0038 2348     		ldr	r0, .L27+8
 419 003a FFF7FEFF 		bl	at_write_command
 420 003e 0346     		mov	r3, r0
 421 0040 002B     		cmp	r3, #0
 422 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 423              		.loc 1 117 0
 424 0044 0123     		movs	r3, #1
 425 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 426              		.loc 1 118 0
 427 0048 05E0     		b	.L18
 428              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 429              		.loc 1 114 0 discriminator 2
 430 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 431 004c 0133     		adds	r3, r3, #1
 432 004e 7B71     		strb	r3, [r7, #5]
 433              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 434              		.loc 1 114 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 11


 435 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 436 0052 132B     		cmp	r3, #19
 437 0054 EDD9     		bls	.L19
 438              	.L18:
 439              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 440              		.loc 1 122 0 is_stmt 1
 441 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 442 0058 012B     		cmp	r3, #1
 443 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 444              		.loc 1 126 0 discriminator 2
 445 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 446              		.loc 1 112 0 discriminator 2
 447 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 448 0062 0133     		adds	r3, r3, #1
 449 0064 BB71     		strb	r3, [r7, #6]
 450              	.L15:
 112:modem.c       ****         
 451              		.loc 1 112 0 is_stmt 0 discriminator 1
 452 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 453 0068 022B     		cmp	r3, #2
 454 006a DFD9     		bls	.L22
 455 006c 00E0     		b	.L21
 456              	.L26:
 123:modem.c       ****             break;
 457              		.loc 1 123 0 is_stmt 1
 458 006e 00BF     		nop
 459              	.L21:
 460              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 461              		.loc 1 130 0
 462 0070 FFF7FEFF 		bl	getTimeStamp
 463 0074 0246     		mov	r2, r0
 464 0076 3B68     		ldr	r3, [r7]
 465 0078 D31A     		subs	r3, r2, r3
 466 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 467              		.loc 1 131 0
 468 007c 3A68     		ldr	r2, [r7]
 469 007e 1349     		ldr	r1, .L27+12
 470 0080 0020     		movs	r0, #0
 471 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 472              		.loc 1 133 0
 473 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 12


 474 0088 012B     		cmp	r3, #1
 475 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 476              		.loc 1 134 0
 477 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 478 008e 1A46     		mov	r2, r3
 479 0090 0F49     		ldr	r1, .L27+16
 480 0092 0020     		movs	r0, #0
 481 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 482              		.loc 1 135 0
 483 0098 0E4B     		ldr	r3, .L27+20
 484 009a 0122     		movs	r2, #1
 485 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 486              		.loc 1 143 0
 487 009e 0123     		movs	r3, #1
 488 00a0 09E0     		b	.L25
 489              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 490              		.loc 1 137 0
 491 00a2 0D49     		ldr	r1, .L27+24
 492 00a4 0220     		movs	r0, #2
 493 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 494              		.loc 1 138 0
 495 00aa 0A4B     		ldr	r3, .L27+20
 496 00ac 0022     		movs	r2, #0
 497 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 498              		.loc 1 140 0
 499 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 500              		.loc 1 141 0
 501 00b4 0023     		movs	r3, #0
 502              	.L25:
 144:modem.c       **** }
 503              		.loc 1 144 0
 504 00b6 1846     		mov	r0, r3
 505 00b8 0837     		adds	r7, r7, #8
 506              		.cfi_def_cfa_offset 8
 507 00ba BD46     		mov	sp, r7
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 00bc 80BD     		pop	{r7, pc}
 511              	.L28:
 512 00be 00BF     		.align	2
 513              	.L27:
 514 00c0 00000000 		.word	isr_telit_rx
 515 00c4 00000000 		.word	.LC0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 13


 516 00c8 10000000 		.word	.LC2
 517 00cc 18000000 		.word	.LC3
 518 00d0 2C000000 		.word	.LC4
 519 00d4 00000000 		.word	modem_state
 520 00d8 60000000 		.word	.LC5
 521              		.cfi_endproc
 522              	.LFE69:
 523              		.size	modem_power_up, .-modem_power_up
 524              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 525              		.align	2
 526              		.global	modem_soft_power_cycle
 527              		.thumb
 528              		.thumb_func
 529              		.type	modem_soft_power_cycle, %function
 530              	modem_soft_power_cycle:
 531              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 532              		.loc 1 147 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536 0000 80B5     		push	{r7, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 7, -8
 539              		.cfi_offset 14, -4
 540 0002 00AF     		add	r7, sp, #0
 541              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 542              		.loc 1 148 0
 543 0004 0120     		movs	r0, #1
 544 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 545              		.loc 1 149 0
 546 000a 4FF4FA60 		mov	r0, #2000
 547 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 548              		.loc 1 150 0
 549 0012 0020     		movs	r0, #0
 550 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 551              		.loc 1 152 0
 552 0018 00BF     		nop
 553 001a 80BD     		pop	{r7, pc}
 554              		.cfi_endproc
 555              	.LFE70:
 556              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 557              		.section	.text.uart_string_reset,"ax",%progbits
 558              		.align	2
 559              		.global	uart_string_reset
 560              		.thumb
 561              		.thumb_func
 562              		.type	uart_string_reset, %function
 563              	uart_string_reset:
 564              	.LFB71:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 14


 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 565              		.loc 1 155 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 1, uses_anonymous_args = 0
 569 0000 80B5     		push	{r7, lr}
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 7, -8
 572              		.cfi_offset 14, -4
 573 0002 00AF     		add	r7, sp, #0
 574              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 575              		.loc 1 156 0
 576 0004 064B     		ldr	r3, .L31
 577 0006 0022     		movs	r2, #0
 578 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 579              		.loc 1 158 0
 580 000a 4FF48062 		mov	r2, #1024
 581 000e 0021     		movs	r1, #0
 582 0010 0448     		ldr	r0, .L31+4
 583 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 584              		.loc 1 160 0
 585 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 586              		.loc 1 161 0
 587 001a 00BF     		nop
 588 001c 80BD     		pop	{r7, pc}
 589              	.L32:
 590 001e 00BF     		.align	2
 591              	.L31:
 592 0020 00000000 		.word	uart_string_index
 593 0024 00000000 		.word	uart_received_string
 594              		.cfi_endproc
 595              	.LFE71:
 596              		.size	uart_string_reset, .-uart_string_reset
 597              		.section	.rodata
 598              		.align	2
 599              	.LC6:
 600 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 600      6D207365 
 600      6E742041 
 600      5420636F 
 600      6D6D616E 
 601              		.align	2
 602              	.LC7:
 603 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 603      6D205265 
 603      63656976 
 603      65642065 
 603      78706563 
 604 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 15


 604      616E643A 
 604      2025730A 
 604      52656365 
 604      69766564 
 605 00f1 000000   		.align	2
 606              	.LC8:
 607 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 607      6D207265 
 607      71756972 
 607      65642025 
 607      64207472 
 608 0127 0A00     		.ascii	"\012\000"
 609 0129 000000   		.align	2
 610              	.LC9:
 611 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 611      64206E6F 
 611      74207772 
 611      69746520 
 611      41542063 
 612 0159 00       		.ascii	"\000"
 613              		.section	.text.at_write_command,"ax",%progbits
 614              		.align	2
 615              		.global	at_write_command
 616              		.thumb
 617              		.thumb_func
 618              		.type	at_write_command, %function
 619              	at_write_command:
 620              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 621              		.loc 1 166 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 40
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625 0000 80B5     		push	{r7, lr}
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 7, -8
 628              		.cfi_offset 14, -4
 629 0002 8AB0     		sub	sp, sp, #40
 630              		.cfi_def_cfa_offset 48
 631 0004 00AF     		add	r7, sp, #0
 632              		.cfi_def_cfa_register 7
 633 0006 F860     		str	r0, [r7, #12]
 634 0008 B960     		str	r1, [r7, #8]
 635 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 636              		.loc 1 168 0
 637 000c 0023     		movs	r3, #0
 638 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 639              		.loc 1 170 0
 640 0010 0023     		movs	r3, #0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 16


 641 0012 7B62     		str	r3, [r7, #36]
 642 0014 46E0     		b	.L34
 643              	.L42:
 644              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 645              		.loc 1 173 0
 646 0016 0A23     		movs	r3, #10
 647 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 648              		.loc 1 174 0
 649 001a 7A68     		ldr	r2, [r7, #4]
 650 001c FB69     		ldr	r3, [r7, #28]
 651 001e B2FBF3F3 		udiv	r3, r2, r3
 652 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 653              		.loc 1 177 0
 654 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 655              		.loc 1 180 0
 656 0028 F868     		ldr	r0, [r7, #12]
 657 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 658              		.loc 1 184 0
 659 002e 7B68     		ldr	r3, [r7, #4]
 660 0030 002B     		cmp	r3, #0
 661 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 662              		.loc 1 185 0
 663 0034 FA68     		ldr	r2, [r7, #12]
 664 0036 1F49     		ldr	r1, .L43
 665 0038 0020     		movs	r0, #0
 666 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 667              		.loc 1 186 0
 668 003e 0123     		movs	r3, #1
 669 0040 34E0     		b	.L36
 670              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 671              		.loc 1 190 0
 672 0042 0023     		movs	r3, #0
 673 0044 3B62     		str	r3, [r7, #32]
 674 0046 20E0     		b	.L37
 675              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 676              		.loc 1 191 0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 17


 677 0048 F869     		ldr	r0, [r7, #28]
 678 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 679              		.loc 1 194 0
 680 004e B968     		ldr	r1, [r7, #8]
 681 0050 1948     		ldr	r0, .L43+4
 682 0052 FFF7FEFF 		bl	strstr
 683 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 684              		.loc 1 195 0
 685 0058 7B69     		ldr	r3, [r7, #20]
 686 005a 002B     		cmp	r3, #0
 687 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 688              		.loc 1 196 0
 689 005e 7B6A     		ldr	r3, [r7, #36]
 690 0060 002B     		cmp	r3, #0
 691 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 692              		.loc 1 198 0
 693 0064 144B     		ldr	r3, .L43+4
 694 0066 FA68     		ldr	r2, [r7, #12]
 695 0068 1449     		ldr	r1, .L43+8
 696 006a 0020     		movs	r0, #0
 697 006c FFF7FEFF 		bl	printNotif
 698 0070 06E0     		b	.L40
 699              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 700              		.loc 1 200 0
 701 0072 7B6A     		ldr	r3, [r7, #36]
 702 0074 5A1C     		adds	r2, r3, #1
 703 0076 104B     		ldr	r3, .L43+4
 704 0078 1149     		ldr	r1, .L43+12
 705 007a 0120     		movs	r0, #1
 706 007c FFF7FEFF 		bl	printNotif
 707              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 708              		.loc 1 203 0
 709 0080 0123     		movs	r3, #1
 710 0082 13E0     		b	.L36
 711              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 712              		.loc 1 190 0 discriminator 2
 713 0084 3B6A     		ldr	r3, [r7, #32]
 714 0086 0133     		adds	r3, r3, #1
 715 0088 3B62     		str	r3, [r7, #32]
 716              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 717              		.loc 1 190 0 is_stmt 0 discriminator 1
 718 008a 3A6A     		ldr	r2, [r7, #32]
 719 008c BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 18


 720 008e 9A42     		cmp	r2, r3
 721 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 722              		.loc 1 209 0 is_stmt 1 discriminator 2
 723 0092 094B     		ldr	r3, .L43+4
 724 0094 FA68     		ldr	r2, [r7, #12]
 725 0096 0B49     		ldr	r1, .L43+16
 726 0098 0220     		movs	r0, #2
 727 009a FFF7FEFF 		bl	printNotif
 728              	.LBE4:
 170:modem.c       ****         
 729              		.loc 1 170 0 discriminator 2
 730 009e 7B6A     		ldr	r3, [r7, #36]
 731 00a0 0133     		adds	r3, r3, #1
 732 00a2 7B62     		str	r3, [r7, #36]
 733              	.L34:
 170:modem.c       ****         
 734              		.loc 1 170 0 is_stmt 0 discriminator 1
 735 00a4 7B6A     		ldr	r3, [r7, #36]
 736 00a6 022B     		cmp	r3, #2
 737 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 738              		.loc 1 214 0 is_stmt 1
 739 00aa 0023     		movs	r3, #0
 740              	.L36:
 215:modem.c       **** }
 741              		.loc 1 215 0
 742 00ac 1846     		mov	r0, r3
 743 00ae 2837     		adds	r7, r7, #40
 744              		.cfi_def_cfa_offset 8
 745 00b0 BD46     		mov	sp, r7
 746              		.cfi_def_cfa_register 13
 747              		@ sp needed
 748 00b2 80BD     		pop	{r7, pc}
 749              	.L44:
 750              		.align	2
 751              	.L43:
 752 00b4 78000000 		.word	.LC6
 753 00b8 00000000 		.word	uart_received_string
 754 00bc A4000000 		.word	.LC7
 755 00c0 F4000000 		.word	.LC8
 756 00c4 2C010000 		.word	.LC9
 757              		.cfi_endproc
 758              	.LFE72:
 759              		.size	at_write_command, .-at_write_command
 760              		.section	.rodata
 761 015a 0000     		.align	2
 762              	.LC10:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 19


 763 015c 54455354 		.ascii	"TEST_MODEM\000"
 763      5F4D4F44 
 763      454D00
 764 0167 00       		.align	2
 765              	.LC11:
 766 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 766      65706F6E 
 766      73652066 
 766      726F6D20 
 766      6D6F6465 
 767 017f 00       		.align	2
 768              	.LC12:
 769 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 769      6D20636F 
 769      6E6E6563 
 769      74656420 
 769      746F206E 
 770              		.section	.text.modem_test,"ax",%progbits
 771              		.align	2
 772              		.global	modem_test
 773              		.thumb
 774              		.thumb_func
 775              		.type	modem_test, %function
 776              	modem_test:
 777              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 778              		.loc 1 218 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 408
 781              		@ frame_needed = 1, uses_anonymous_args = 0
 782 0000 B0B5     		push	{r4, r5, r7, lr}
 783              		.cfi_def_cfa_offset 16
 784              		.cfi_offset 4, -16
 785              		.cfi_offset 5, -12
 786              		.cfi_offset 7, -8
 787              		.cfi_offset 14, -4
 788 0002 E6B0     		sub	sp, sp, #408
 789              		.cfi_def_cfa_offset 424
 790 0004 00AF     		add	r7, sp, #0
 791              		.cfi_def_cfa_register 7
 792 0006 3B1D     		adds	r3, r7, #4
 793 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 794              		.loc 1 221 0
 795 000a 07F10C03 		add	r3, r7, #12
 796 000e 0022     		movs	r2, #0
 797 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 798              		.loc 1 223 0
 799 0014 07F10C03 		add	r3, r7, #12
 800 0018 364A     		ldr	r2, .L53
 801 001a 07CA     		ldmia	r2, {r0, r1, r2}
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 20


 802 001c 03C3     		stmia	r3!, {r0, r1}
 803 001e 1A80     		strh	r2, [r3]	@ movhi
 804 0020 0233     		adds	r3, r3, #2
 805 0022 120C     		lsrs	r2, r2, #16
 806 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 807              		.loc 1 224 0
 808 0026 07F10C03 		add	r3, r7, #12
 809 002a 8133     		adds	r3, r3, #129
 810 002c 324A     		ldr	r2, .L53+4
 811 002e 1C46     		mov	r4, r3
 812 0030 1546     		mov	r5, r2
 813 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 814 0034 2060     		str	r0, [r4]	@ unaligned
 815 0036 6160     		str	r1, [r4, #4]	@ unaligned
 816 0038 A260     		str	r2, [r4, #8]	@ unaligned
 817 003a E360     		str	r3, [r4, #12]	@ unaligned
 818 003c 2868     		ldr	r0, [r5]	@ unaligned
 819 003e 2061     		str	r0, [r4, #16]	@ unaligned
 820 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 821 0042 AA79     		ldrb	r2, [r5, #6]
 822 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 823 0046 1346     		mov	r3, r2
 824 0048 A375     		strb	r3, [r4, #22]
 825              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 826              		.loc 1 227 0
 827 004a 0023     		movs	r3, #0
 828 004c C7F89431 		str	r3, [r7, #404]
 829 0050 3AE0     		b	.L46
 830              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 831              		.loc 1 229 0
 832 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 833              		.loc 1 231 0
 834 0056 FFF7FEFF 		bl	modem_get_state
 835 005a 0346     		mov	r3, r0
 836 005c 002B     		cmp	r3, #0
 837 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 838              		.loc 1 233 0
 839 0060 FFF7FEFF 		bl	modem_power_up
 840 0064 27E0     		b	.L48
 841              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 842              		.loc 1 236 0
 843 0066 FFF7FEFF 		bl	modem_get_state
 844 006a 0346     		mov	r3, r0
 845 006c 042B     		cmp	r3, #4
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 21


 846 006e 22D1     		bne	.L48
 847              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 848              		.loc 1 240 0
 849 0070 FFF7FEFF 		bl	modem_get_network_time
 850 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 851              		.loc 1 241 0
 852 0078 D7F89031 		ldr	r3, [r7, #400]
 853 007c 002B     		cmp	r3, #0
 854 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 855              		.loc 1 242 0
 856 0080 D7F89001 		ldr	r0, [r7, #400]
 857 0084 FFF7FEFF 		bl	setTime
 858              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 859              		.loc 1 245 0
 860 0088 07F10C03 		add	r3, r7, #12
 861 008c 8133     		adds	r3, r3, #129
 862 008e 1B4A     		ldr	r2, .L53+8
 863 0090 1D46     		mov	r5, r3
 864 0092 1446     		mov	r4, r2
 865 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 866 0096 2860     		str	r0, [r5]	@ unaligned
 867 0098 6960     		str	r1, [r5, #4]	@ unaligned
 868 009a AA60     		str	r2, [r5, #8]	@ unaligned
 869 009c EB60     		str	r3, [r5, #12]	@ unaligned
 870 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 871 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 872 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 873 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 874              		.loc 1 246 0
 875 00a6 07F10C03 		add	r3, r7, #12
 876 00aa 0122     		movs	r2, #1
 877 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 878              		.loc 1 248 0
 879 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 880              		.loc 1 249 0
 881 00b4 0CE0     		b	.L50
 882              	.L48:
 883              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 884              		.loc 1 252 0 discriminator 2
 885 00b6 4FF47A70 		mov	r0, #1000
 886 00ba FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 22


 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 887              		.loc 1 227 0 discriminator 2
 888 00be D7F89431 		ldr	r3, [r7, #404]
 889 00c2 0133     		adds	r3, r3, #1
 890 00c4 C7F89431 		str	r3, [r7, #404]
 891              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 892              		.loc 1 227 0 is_stmt 0 discriminator 1
 893 00c8 D7F89431 		ldr	r3, [r7, #404]
 894 00cc 3B2B     		cmp	r3, #59
 895 00ce C0DD     		ble	.L51
 896              	.L50:
 897              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 898              		.loc 1 256 0 is_stmt 1
 899 00d0 3B1D     		adds	r3, r7, #4
 900 00d2 1A68     		ldr	r2, [r3]
 901 00d4 07F10C03 		add	r3, r7, #12
 902 00d8 1046     		mov	r0, r2
 903 00da 1946     		mov	r1, r3
 904 00dc 40F28113 		movw	r3, #385
 905 00e0 1A46     		mov	r2, r3
 906 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 907              		.loc 1 257 0
 908 00e6 3B1D     		adds	r3, r7, #4
 909 00e8 1868     		ldr	r0, [r3]
 910 00ea 07F5CC77 		add	r7, r7, #408
 911              		.cfi_def_cfa_offset 16
 912 00ee BD46     		mov	sp, r7
 913              		.cfi_def_cfa_register 13
 914              		@ sp needed
 915 00f0 B0BD     		pop	{r4, r5, r7, pc}
 916              	.L54:
 917 00f2 00BF     		.align	2
 918              	.L53:
 919 00f4 5C010000 		.word	.LC10
 920 00f8 68010000 		.word	.LC11
 921 00fc 80010000 		.word	.LC12
 922              		.cfi_endproc
 923              	.LFE73:
 924              		.size	modem_test, .-modem_test
 925              		.section	.text.extract_string,"ax",%progbits
 926              		.align	2
 927              		.global	extract_string
 928              		.thumb
 929              		.thumb_func
 930              		.type	extract_string, %function
 931              	extract_string:
 932              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 933              		.loc 1 260 0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 23


 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 24
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 86B0     		sub	sp, sp, #24
 942              		.cfi_def_cfa_offset 32
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 F860     		str	r0, [r7, #12]
 946 0008 B960     		str	r1, [r7, #8]
 947 000a 7A60     		str	r2, [r7, #4]
 948 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 949              		.loc 1 266 0
 950 000e B968     		ldr	r1, [r7, #8]
 951 0010 F868     		ldr	r0, [r7, #12]
 952 0012 FFF7FEFF 		bl	strstr
 953 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 954              		.loc 1 267 0
 955 0018 7B69     		ldr	r3, [r7, #20]
 956 001a 002B     		cmp	r3, #0
 957 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 958              		.loc 1 269 0
 959 001e FB68     		ldr	r3, [r7, #12]
 960 0020 7B61     		str	r3, [r7, #20]
 961              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 962              		.loc 1 272 0
 963 0022 B868     		ldr	r0, [r7, #8]
 964 0024 FFF7FEFF 		bl	strlen
 965 0028 0246     		mov	r2, r0
 966 002a 7B69     		ldr	r3, [r7, #20]
 967 002c 1344     		add	r3, r3, r2
 968 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 969              		.loc 1 277 0
 970 0030 7968     		ldr	r1, [r7, #4]
 971 0032 7869     		ldr	r0, [r7, #20]
 972 0034 FFF7FEFF 		bl	strstr
 973 0038 3861     		str	r0, [r7, #16]
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 24


 278:modem.c       ****         if (b == NULL) {
 974              		.loc 1 278 0
 975 003a 3B69     		ldr	r3, [r7, #16]
 976 003c 002B     		cmp	r3, #0
 977 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 978              		.loc 1 280 0
 979 0040 F868     		ldr	r0, [r7, #12]
 980 0042 FFF7FEFF 		bl	strlen
 981 0046 0246     		mov	r2, r0
 982 0048 FB68     		ldr	r3, [r7, #12]
 983 004a 1344     		add	r3, r3, r2
 984 004c 3B61     		str	r3, [r7, #16]
 985              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 986              		.loc 1 284 0
 987 004e 3A69     		ldr	r2, [r7, #16]
 988 0050 7B69     		ldr	r3, [r7, #20]
 989 0052 D31A     		subs	r3, r2, r3
 990 0054 1A46     		mov	r2, r3
 991 0056 7969     		ldr	r1, [r7, #20]
 992 0058 3868     		ldr	r0, [r7]
 993 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 994              		.loc 1 285 0
 995 005e 3A69     		ldr	r2, [r7, #16]
 996 0060 7B69     		ldr	r3, [r7, #20]
 997 0062 D31A     		subs	r3, r2, r3
 998 0064 1A46     		mov	r2, r3
 999 0066 3B68     		ldr	r3, [r7]
 1000 0068 1344     		add	r3, r3, r2
 1001 006a 0022     		movs	r2, #0
 1002 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 1003              		.loc 1 286 0
 1004 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 1005              		.loc 1 288 0
 1006 0070 1846     		mov	r0, r3
 1007 0072 1837     		adds	r7, r7, #24
 1008              		.cfi_def_cfa_offset 8
 1009 0074 BD46     		mov	sp, r7
 1010              		.cfi_def_cfa_register 13
 1011              		@ sp needed
 1012 0076 80BD     		pop	{r7, pc}
 1013              		.cfi_endproc
 1014              	.LFE74:
 1015              		.size	extract_string, .-extract_string
 1016              		.section	.rodata
 1017              		.align	2
 1018              	.LC13:
 1019 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 25


 1019      20746F20 
 1019      636F6E6E 
 1019      65637420 
 1019      746F206E 
 1020 01c3 00       		.align	2
 1021              	.LC14:
 1022 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1022      6D207469 
 1022      6D656420 
 1022      6F757420 
 1022      6F6E206E 
 1023 01e7 00       		.align	2
 1024              	.LC15:
 1025 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1025      69726564 
 1025      20495020 
 1025      61646472 
 1025      6573733A 
 1026              		.align	2
 1027              	.LC16:
 1028 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1028      6D207469 
 1028      6D656420 
 1028      6F757420 
 1028      6F6E2049 
 1029              		.section	.text.modem_process_tasks,"ax",%progbits
 1030              		.align	2
 1031              		.global	modem_process_tasks
 1032              		.thumb
 1033              		.thumb_func
 1034              		.type	modem_process_tasks, %function
 1035              	modem_process_tasks:
 1036              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1037              		.loc 1 291 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 8
 1040              		@ frame_needed = 1, uses_anonymous_args = 0
 1041 0000 80B5     		push	{r7, lr}
 1042              		.cfi_def_cfa_offset 8
 1043              		.cfi_offset 7, -8
 1044              		.cfi_offset 14, -4
 1045 0002 82B0     		sub	sp, sp, #8
 1046              		.cfi_def_cfa_offset 16
 1047 0004 00AF     		add	r7, sp, #0
 1048              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1049              		.loc 1 293 0
 1050 0006 534B     		ldr	r3, .L75
 1051 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1052 000a 012B     		cmp	r3, #1
 1053 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 26


 1054              		.loc 1 295 0
 1055 000e FFF7FEFF 		bl	getTimeStamp
 1056 0012 0246     		mov	r2, r0
 1057 0014 504B     		ldr	r3, .L75+4
 1058 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1059              		.loc 1 296 0
 1060 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1061              		.loc 1 297 0
 1062 001c 4D4B     		ldr	r3, .L75
 1063 001e 0222     		movs	r2, #2
 1064 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1065              		.loc 1 298 0
 1066 0022 0123     		movs	r3, #1
 1067 0024 92E0     		b	.L61
 1068              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1069              		.loc 1 302 0
 1070 0026 4B4B     		ldr	r3, .L75
 1071 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1072 002a 022B     		cmp	r3, #2
 1073 002c 5FD1     		bne	.L62
 1074              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1075              		.loc 1 305 0
 1076 002e 0023     		movs	r3, #0
 1077 0030 FB71     		strb	r3, [r7, #7]
 1078 0032 2BE0     		b	.L63
 1079              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1080              		.loc 1 307 0
 1081 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1082              		.loc 1 309 0
 1083 0038 484B     		ldr	r3, .L75+8
 1084 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1085 003c 83F00103 		eor	r3, r3, #1
 1086 0040 DBB2     		uxtb	r3, r3
 1087 0042 002B     		cmp	r3, #0
 1088 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1089              		.loc 1 312 0
 1090 0046 464B     		ldr	r3, .L75+12
 1091 0048 5B69     		ldr	r3, [r3, #20]
 1092 004a 1A2B     		cmp	r3, #26
 1093 004c 03DD     		ble	.L64
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 27


 1094              		.loc 1 312 0 is_stmt 0 discriminator 1
 1095 004e 444B     		ldr	r3, .L75+12
 1096 0050 5B69     		ldr	r3, [r3, #20]
 1097 0052 FF2B     		cmp	r3, #255
 1098 0054 1ED1     		bne	.L74
 1099              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1100              		.loc 1 317 0 is_stmt 1
 1101 0056 414B     		ldr	r3, .L75+8
 1102 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1103 005a 002B     		cmp	r3, #0
 1104 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1105              		.loc 1 320 0
 1106 005e 404B     		ldr	r3, .L75+12
 1107 0060 9B68     		ldr	r3, [r3, #8]
 1108 0062 242B     		cmp	r3, #36
 1109 0064 03DD     		ble	.L67
 1110              		.loc 1 320 0 is_stmt 0 discriminator 1
 1111 0066 3E4B     		ldr	r3, .L75+12
 1112 0068 9B68     		ldr	r3, [r3, #8]
 1113 006a FF2B     		cmp	r3, #255
 1114 006c 13D1     		bne	.L65
 1115              	.L67:
 1116              		.loc 1 320 0 discriminator 3
 1117 006e 3C4B     		ldr	r3, .L75+12
 1118 0070 5B69     		ldr	r3, [r3, #20]
 1119 0072 1A2B     		cmp	r3, #26
 1120 0074 03DD     		ble	.L66
 1121              		.loc 1 320 0 discriminator 4
 1122 0076 3A4B     		ldr	r3, .L75+12
 1123 0078 5B69     		ldr	r3, [r3, #20]
 1124 007a FF2B     		cmp	r3, #255
 1125 007c 0BD1     		bne	.L65
 1126              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1127              		.loc 1 325 0 is_stmt 1 discriminator 2
 1128 007e 4FF47A70 		mov	r0, #1000
 1129 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1130              		.loc 1 305 0 discriminator 2
 1131 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1132 0088 0133     		adds	r3, r3, #1
 1133 008a FB71     		strb	r3, [r7, #7]
 1134              	.L63:
 305:modem.c       ****             // Get cell network stats
 1135              		.loc 1 305 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 28


 1136 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1137 008e 1D2B     		cmp	r3, #29
 1138 0090 D0D9     		bls	.L68
 1139 0092 00E0     		b	.L65
 1140              	.L74:
 313:modem.c       ****                 }
 1141              		.loc 1 313 0 is_stmt 1
 1142 0094 00BF     		nop
 1143              	.L65:
 1144              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1145              		.loc 1 329 0
 1146 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1147 009a 0346     		mov	r3, r0
 1148 009c 002B     		cmp	r3, #0
 1149 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1150              		.loc 1 331 0
 1151 00a0 FFF7FEFF 		bl	getTimeStamp
 1152 00a4 0246     		mov	r2, r0
 1153 00a6 2C4B     		ldr	r3, .L75+4
 1154 00a8 1B68     		ldr	r3, [r3]
 1155 00aa D31A     		subs	r3, r2, r3
 1156 00ac 2C4A     		ldr	r2, .L75+12
 1157 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1158              		.loc 1 332 0
 1159 00b0 2B4B     		ldr	r3, .L75+12
 1160 00b2 9B69     		ldr	r3, [r3, #24]
 1161 00b4 1A46     		mov	r2, r3
 1162 00b6 2B49     		ldr	r1, .L75+16
 1163 00b8 0020     		movs	r0, #0
 1164 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1165              		.loc 1 334 0
 1166 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1167              		.loc 1 335 0
 1168 00c2 244B     		ldr	r3, .L75
 1169 00c4 0322     		movs	r2, #3
 1170 00c6 1A70     		strb	r2, [r3]
 1171              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1172              		.loc 1 339 0
 1173 00c8 FFF7FEFF 		bl	getTimeStamp
 1174 00cc 0246     		mov	r2, r0
 1175 00ce 224B     		ldr	r3, .L75+4
 1176 00d0 1B68     		ldr	r3, [r3]
 1177 00d2 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 29


 1178 00d4 B42B     		cmp	r3, #180
 1179 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1180              		.loc 1 340 0
 1181 00d8 1E4B     		ldr	r3, .L75
 1182 00da 0022     		movs	r2, #0
 1183 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1184              		.loc 1 341 0
 1185 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1186              		.loc 1 342 0
 1187 00e2 2149     		ldr	r1, .L75+20
 1188 00e4 0220     		movs	r0, #2
 1189 00e6 FFF7FEFF 		bl	printNotif
 1190              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1191              		.loc 1 345 0
 1192 00ea 0023     		movs	r3, #0
 1193 00ec 2EE0     		b	.L61
 1194              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1195              		.loc 1 348 0
 1196 00ee 194B     		ldr	r3, .L75
 1197 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1198 00f2 032B     		cmp	r3, #3
 1199 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1200              		.loc 1 350 0
 1201 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1202 00fa 0346     		mov	r3, r0
 1203 00fc 002B     		cmp	r3, #0
 1204 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1205              		.loc 1 351 0
 1206 0100 144B     		ldr	r3, .L75
 1207 0102 0422     		movs	r2, #4
 1208 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1209              		.loc 1 353 0
 1210 0106 FFF7FEFF 		bl	getTimeStamp
 1211 010a 0246     		mov	r2, r0
 1212 010c 124B     		ldr	r3, .L75+4
 1213 010e 1B68     		ldr	r3, [r3]
 1214 0110 D31A     		subs	r3, r2, r3
 1215 0112 134A     		ldr	r2, .L75+12
 1216 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1217              		.loc 1 354 0
 1218 0116 124B     		ldr	r3, .L75+12
 1219 0118 DB69     		ldr	r3, [r3, #28]
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 30


 1220 011a 1A46     		mov	r2, r3
 1221 011c 1349     		ldr	r1, .L75+24
 1222 011e 0020     		movs	r0, #0
 1223 0120 FFF7FEFF 		bl	printNotif
 1224              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1225              		.loc 1 359 0
 1226 0124 FFF7FEFF 		bl	getTimeStamp
 1227 0128 0246     		mov	r2, r0
 1228 012a 0B4B     		ldr	r3, .L75+4
 1229 012c 1B68     		ldr	r3, [r3]
 1230 012e D31A     		subs	r3, r2, r3
 1231 0130 E62B     		cmp	r3, #230
 1232 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1233              		.loc 1 360 0
 1234 0134 074B     		ldr	r3, .L75
 1235 0136 0022     		movs	r2, #0
 1236 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1237              		.loc 1 361 0
 1238 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1239              		.loc 1 362 0
 1240 013e 0C49     		ldr	r1, .L75+28
 1241 0140 0220     		movs	r0, #2
 1242 0142 FFF7FEFF 		bl	printNotif
 1243              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1244              		.loc 1 365 0
 1245 0146 0023     		movs	r3, #0
 1246 0148 00E0     		b	.L61
 1247              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1248              		.loc 1 368 0
 1249 014a 0023     		movs	r3, #0
 1250              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1251              		.loc 1 370 0
 1252 014c 1846     		mov	r0, r3
 1253 014e 0837     		adds	r7, r7, #8
 1254              		.cfi_def_cfa_offset 8
 1255 0150 BD46     		mov	sp, r7
 1256              		.cfi_def_cfa_register 13
 1257              		@ sp needed
 1258 0152 80BD     		pop	{r7, pc}
 1259              	.L76:
 1260              		.align	2
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 31


 1261              	.L75:
 1262 0154 00000000 		.word	modem_state
 1263 0158 00000000 		.word	modem_start_time_stamp
 1264 015c 00000000 		.word	updatable_parameters
 1265 0160 00000000 		.word	modem_stats
 1266 0164 9C010000 		.word	.LC13
 1267 0168 C4010000 		.word	.LC14
 1268 016c E8010000 		.word	.LC15
 1269 0170 08020000 		.word	.LC16
 1270              		.cfi_endproc
 1271              	.LFE75:
 1272              		.size	modem_process_tasks, .-modem_process_tasks
 1273              		.section	.rodata
 1274 022f 00       		.align	2
 1275              	.LC17:
 1276 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1276      6B696E67 
 1276      2041542B 
 1276      43524547 
 1276      3F00
 1277 0242 0000     		.align	2
 1278              	.LC18:
 1279 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1279      5245473F 
 1279      0D00
 1280 024e 0000     		.align	2
 1281              	.LC19:
 1282 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1282      61637469 
 1282      6E672073 
 1282      7472696E 
 1282      67204154 
 1283 026b 00       		.align	2
 1284              	.LC20:
 1285 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1285      5F726563 
 1285      65697665 
 1285      645F7374 
 1285      72696E67 
 1286 0285 000000   		.align	2
 1287              	.LC21:
 1288 0288 0D00     		.ascii	"\015\000"
 1289 028a 0000     		.align	2
 1290              	.LC22:
 1291 028c 3A2000   		.ascii	": \000"
 1292 028f 00       		.align	2
 1293              	.LC23:
 1294 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1294      73746572 
 1294      65642074 
 1294      6F206E65 
 1294      74776F72 
 1295              		.align	2
 1296              	.LC24:
 1297 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1297      20657874 
 1297      72616369 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 32


 1297      6E672073 
 1297      7472696E 
 1298 02cf 00       		.align	2
 1299              	.LC25:
 1300 02d0 302C3100 		.ascii	"0,1\000"
 1301              		.align	2
 1302              	.LC26:
 1303 02d4 302C3500 		.ascii	"0,5\000"
 1304              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1305              		.align	2
 1306              		.global	is_connected_to_cell_network
 1307              		.thumb
 1308              		.thumb_func
 1309              		.type	is_connected_to_cell_network, %function
 1310              	is_connected_to_cell_network:
 1311              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1312              		.loc 1 373 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 16
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316 0000 80B5     		push	{r7, lr}
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 7, -8
 1319              		.cfi_offset 14, -4
 1320 0002 84B0     		sub	sp, sp, #16
 1321              		.cfi_def_cfa_offset 24
 1322 0004 00AF     		add	r7, sp, #0
 1323              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1324              		.loc 1 375 0
 1325 0006 2049     		ldr	r1, .L82
 1326 0008 0020     		movs	r0, #0
 1327 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1328              		.loc 1 377 0
 1329 000e 4FF4FA62 		mov	r2, #2000
 1330 0012 1E49     		ldr	r1, .L82+4
 1331 0014 1E48     		ldr	r0, .L82+8
 1332 0016 FFF7FEFF 		bl	at_write_command
 1333 001a 0346     		mov	r3, r0
 1334 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1335              		.loc 1 379 0
 1336 001e 1D49     		ldr	r1, .L82+12
 1337 0020 0020     		movs	r0, #0
 1338 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1339              		.loc 1 380 0
 1340 0026 1C4A     		ldr	r2, .L82+16
 1341 0028 1C49     		ldr	r1, .L82+20
 1342 002a 0020     		movs	r0, #0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 33


 1343 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1344              		.loc 1 383 0
 1345 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1346 0032 002B     		cmp	r3, #0
 1347 0034 23D0     		beq	.L78
 1348              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1349              		.loc 1 386 0
 1350 0036 0023     		movs	r3, #0
 1351 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1352              		.loc 1 388 0
 1353 003a 3B1D     		adds	r3, r7, #4
 1354 003c 184A     		ldr	r2, .L82+24
 1355 003e 1949     		ldr	r1, .L82+28
 1356 0040 1548     		ldr	r0, .L82+16
 1357 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1358              		.loc 1 389 0
 1359 0046 3B1D     		adds	r3, r7, #4
 1360 0048 1A46     		mov	r2, r3
 1361 004a 1749     		ldr	r1, .L82+32
 1362 004c 0020     		movs	r0, #0
 1363 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1364              		.loc 1 390 0
 1365 0052 1649     		ldr	r1, .L82+36
 1366 0054 0020     		movs	r0, #0
 1367 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1368              		.loc 1 393 0
 1369 005a 3B1D     		adds	r3, r7, #4
 1370 005c 1449     		ldr	r1, .L82+40
 1371 005e 1846     		mov	r0, r3
 1372 0060 FFF7FEFF 		bl	strstr
 1373 0064 0346     		mov	r3, r0
 1374 0066 002B     		cmp	r3, #0
 1375 0068 07D1     		bne	.L79
 1376              		.loc 1 393 0 is_stmt 0 discriminator 1
 1377 006a 3B1D     		adds	r3, r7, #4
 1378 006c 1149     		ldr	r1, .L82+44
 1379 006e 1846     		mov	r0, r3
 1380 0070 FFF7FEFF 		bl	strstr
 1381 0074 0346     		mov	r3, r0
 1382 0076 002B     		cmp	r3, #0
 1383 0078 01D0     		beq	.L78
 1384              	.L79:
 394:modem.c       ****             return 1u;
 1385              		.loc 1 394 0 is_stmt 1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 34


 1386 007a 0123     		movs	r3, #1
 1387 007c 00E0     		b	.L81
 1388              	.L78:
 1389              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1390              		.loc 1 398 0
 1391 007e 0023     		movs	r3, #0
 1392              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1393              		.loc 1 400 0
 1394 0080 1846     		mov	r0, r3
 1395 0082 1037     		adds	r7, r7, #16
 1396              		.cfi_def_cfa_offset 8
 1397 0084 BD46     		mov	sp, r7
 1398              		.cfi_def_cfa_register 13
 1399              		@ sp needed
 1400 0086 80BD     		pop	{r7, pc}
 1401              	.L83:
 1402              		.align	2
 1403              	.L82:
 1404 0088 30020000 		.word	.LC17
 1405 008c 00000000 		.word	.LC0
 1406 0090 44020000 		.word	.LC18
 1407 0094 50020000 		.word	.LC19
 1408 0098 00000000 		.word	uart_received_string
 1409 009c 6C020000 		.word	.LC20
 1410 00a0 88020000 		.word	.LC21
 1411 00a4 8C020000 		.word	.LC22
 1412 00a8 90020000 		.word	.LC23
 1413 00ac B0020000 		.word	.LC24
 1414 00b0 D0020000 		.word	.LC25
 1415 00b4 D4020000 		.word	.LC26
 1416              		.cfi_endproc
 1417              	.LFE76:
 1418              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1419              		.section	.rodata
 1420              		.align	2
 1421              	.LC27:
 1422 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1422      47414354 
 1422      3D312C31 
 1422      0D0A00
 1423              		.section	.text.set_up_internet_connection,"ax",%progbits
 1424              		.align	2
 1425              		.global	set_up_internet_connection
 1426              		.thumb
 1427              		.thumb_func
 1428              		.type	set_up_internet_connection, %function
 1429              	set_up_internet_connection:
 1430              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 35


 1431              		.loc 1 403 0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 0
 1434              		@ frame_needed = 1, uses_anonymous_args = 0
 1435 0000 80B5     		push	{r7, lr}
 1436              		.cfi_def_cfa_offset 8
 1437              		.cfi_offset 7, -8
 1438              		.cfi_offset 14, -4
 1439 0002 00AF     		add	r7, sp, #0
 1440              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1441              		.loc 1 414 0
 1442 0004 4FF47A72 		mov	r2, #1000
 1443 0008 0249     		ldr	r1, .L85
 1444 000a 0348     		ldr	r0, .L85+4
 1445 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1446              		.loc 1 416 0
 1447 0010 00BF     		nop
 1448 0012 80BD     		pop	{r7, pc}
 1449              	.L86:
 1450              		.align	2
 1451              	.L85:
 1452 0014 00000000 		.word	.LC0
 1453 0018 D8020000 		.word	.LC27
 1454              		.cfi_endproc
 1455              	.LFE77:
 1456              		.size	set_up_internet_connection, .-set_up_internet_connection
 1457              		.section	.rodata
 1458 02e7 00       		.align	2
 1459              	.LC28:
 1460 02e8 312C3100 		.ascii	"1,1\000"
 1461              		.align	2
 1462              	.LC29:
 1463 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1463      47414354 
 1463      3F0D00
 1464              		.section	.text.is_connected_to_internet,"ax",%progbits
 1465              		.align	2
 1466              		.global	is_connected_to_internet
 1467              		.thumb
 1468              		.thumb_func
 1469              		.type	is_connected_to_internet, %function
 1470              	is_connected_to_internet:
 1471              	.LFB78:
 417:modem.c       **** 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 36


 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1472              		.loc 1 419 0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 1, uses_anonymous_args = 0
 1476 0000 80B5     		push	{r7, lr}
 1477              		.cfi_def_cfa_offset 8
 1478              		.cfi_offset 7, -8
 1479              		.cfi_offset 14, -4
 1480 0002 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1482              		.loc 1 424 0
 1483 0004 4FF4FA62 		mov	r2, #2000
 1484 0008 0549     		ldr	r1, .L90
 1485 000a 0648     		ldr	r0, .L90+4
 1486 000c FFF7FEFF 		bl	at_write_command
 1487 0010 0346     		mov	r3, r0
 1488 0012 002B     		cmp	r3, #0
 1489 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1490              		.loc 1 425 0
 1491 0016 0123     		movs	r3, #1
 1492 0018 00E0     		b	.L89
 1493              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1494              		.loc 1 427 0
 1495 001a 0023     		movs	r3, #0
 1496              	.L89:
 428:modem.c       **** }
 1497              		.loc 1 428 0
 1498 001c 1846     		mov	r0, r3
 1499 001e 80BD     		pop	{r7, pc}
 1500              	.L91:
 1501              		.align	2
 1502              	.L90:
 1503 0020 E8020000 		.word	.LC28
 1504 0024 EC020000 		.word	.LC29
 1505              		.cfi_endproc
 1506              	.LFE78:
 1507              		.size	is_connected_to_internet, .-is_connected_to_internet
 1508              		.section	.rodata
 1509 02f7 00       		.align	2
 1510              	.LC30:
 1511 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1511      4553510D 
 1511      00
 1512 0301 000000   		.align	2
 1513              	.LC31:
 1514 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1514      4553513A 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 37


 1514      2025642C 
 1514      25642C25 
 1514      642C2564 
 1515              		.section	.text.get_cell_network_stats,"ax",%progbits
 1516              		.align	2
 1517              		.global	get_cell_network_stats
 1518              		.thumb
 1519              		.thumb_func
 1520              		.type	get_cell_network_stats, %function
 1521              	get_cell_network_stats:
 1522              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1523              		.loc 1 430 0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 8
 1526              		@ frame_needed = 1, uses_anonymous_args = 0
 1527 0000 80B5     		push	{r7, lr}
 1528              		.cfi_def_cfa_offset 8
 1529              		.cfi_offset 7, -8
 1530              		.cfi_offset 14, -4
 1531 0002 86B0     		sub	sp, sp, #24
 1532              		.cfi_def_cfa_offset 32
 1533 0004 04AF     		add	r7, sp, #16
 1534              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1535              		.loc 1 432 0
 1536 0006 154B     		ldr	r3, .L93
 1537 0008 FF22     		movs	r2, #255
 1538 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1539              		.loc 1 433 0
 1540 000c 134B     		ldr	r3, .L93
 1541 000e FF22     		movs	r2, #255
 1542 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1543              		.loc 1 434 0
 1544 0012 124B     		ldr	r3, .L93
 1545 0014 FF22     		movs	r2, #255
 1546 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1547              		.loc 1 435 0
 1548 0018 104B     		ldr	r3, .L93
 1549 001a FF22     		movs	r2, #255
 1550 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1551              		.loc 1 436 0
 1552 001e 0F4B     		ldr	r3, .L93
 1553 0020 FF22     		movs	r2, #255
 1554 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1555              		.loc 1 437 0
 1556 0024 0D4B     		ldr	r3, .L93
 1557 0026 FF22     		movs	r2, #255
 1558 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 38


 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1559              		.loc 1 440 0
 1560 002a 4FF4FA62 		mov	r2, #2000
 1561 002e 0C49     		ldr	r1, .L93+4
 1562 0030 0C48     		ldr	r0, .L93+8
 1563 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1564              		.loc 1 443 0
 1565 0036 0C4B     		ldr	r3, .L93+12
 1566 0038 0393     		str	r3, [sp, #12]
 1567 003a 0C4B     		ldr	r3, .L93+16
 1568 003c 0293     		str	r3, [sp, #8]
 1569 003e 0C4B     		ldr	r3, .L93+20
 1570 0040 0193     		str	r3, [sp, #4]
 1571 0042 0C4B     		ldr	r3, .L93+24
 1572 0044 0093     		str	r3, [sp]
 1573 0046 0C4B     		ldr	r3, .L93+28
 1574 0048 044A     		ldr	r2, .L93
 1575 004a 0C49     		ldr	r1, .L93+32
 1576 004c 0C48     		ldr	r0, .L93+36
 1577 004e FFF7FEFF 		bl	sscanf
 1578 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1579              		.loc 1 458 0
 1580 0054 00BF     		nop
 1581 0056 0837     		adds	r7, r7, #8
 1582              		.cfi_def_cfa_offset 8
 1583 0058 BD46     		mov	sp, r7
 1584              		.cfi_def_cfa_register 13
 1585              		@ sp needed
 1586 005a 80BD     		pop	{r7, pc}
 1587              	.L94:
 1588              		.align	2
 1589              	.L93:
 1590 005c 00000000 		.word	modem_stats
 1591 0060 00000000 		.word	.LC0
 1592 0064 F8020000 		.word	.LC30
 1593 0068 14000000 		.word	modem_stats+20
 1594 006c 10000000 		.word	modem_stats+16
 1595 0070 0C000000 		.word	modem_stats+12
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 39


 1596 0074 08000000 		.word	modem_stats+8
 1597 0078 04000000 		.word	modem_stats+4
 1598 007c 04030000 		.word	.LC31
 1599 0080 00000000 		.word	uart_received_string
 1600              		.cfi_endproc
 1601              	.LFE79:
 1602              		.size	get_cell_network_stats, .-get_cell_network_stats
 1603              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1604              		.align	2
 1605              		.global	updatable_parameters_initialize
 1606              		.thumb
 1607              		.thumb_func
 1608              		.type	updatable_parameters_initialize, %function
 1609              	updatable_parameters_initialize:
 1610              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1611              		.loc 1 461 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 1, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
 1616 0000 80B4     		push	{r7}
 1617              		.cfi_def_cfa_offset 4
 1618              		.cfi_offset 7, -4
 1619 0002 00AF     		add	r7, sp, #0
 1620              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1621              		.loc 1 462 0
 1622 0004 104B     		ldr	r3, .L96
 1623 0006 0022     		movs	r2, #0
 1624 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1625              		.loc 1 463 0
 1626 000a 0F4B     		ldr	r3, .L96
 1627 000c 0122     		movs	r2, #1
 1628 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1629              		.loc 1 464 0
 1630 0010 0D4B     		ldr	r3, .L96
 1631 0012 0122     		movs	r2, #1
 1632 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1633              		.loc 1 465 0
 1634 0016 0C4B     		ldr	r3, .L96
 1635 0018 0122     		movs	r2, #1
 1636 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1637              		.loc 1 466 0
 1638 001c 0A4B     		ldr	r3, .L96
 1639 001e 0122     		movs	r2, #1
 1640 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     // APP_INTERFACE-------------------------------------------------------------------------------
 470:modem.c       ****     updatable_parameters.App_LED_freq = 120u; 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 40


 1641              		.loc 1 470 0
 1642 0022 094B     		ldr	r3, .L96
 1643 0024 7822     		movs	r2, #120
 1644 0026 5A71     		strb	r2, [r3, #5]
 471:modem.c       ****     updatable_parameters.Level_Sensor_freq = 120u; 
 1645              		.loc 1 471 0
 1646 0028 074B     		ldr	r3, .L96
 1647 002a 7822     		movs	r2, #120
 1648 002c 9A71     		strb	r2, [r3, #6]
 472:modem.c       ****     updatable_parameters.Downstream_Level_Sensor_freq = 120u;
 1649              		.loc 1 472 0
 1650 002e 064B     		ldr	r3, .L96
 1651 0030 7822     		movs	r2, #120
 1652 0032 DA71     		strb	r2, [r3, #7]
 473:modem.c       ****     updatable_parameters.Valve_freq = 120u;
 1653              		.loc 1 473 0
 1654 0034 044B     		ldr	r3, .L96
 1655 0036 7822     		movs	r2, #120
 1656 0038 1A72     		strb	r2, [r3, #8]
 474:modem.c       ****     updatable_parameters.Autosampler_freq = 120u;
 1657              		.loc 1 474 0
 1658 003a 034B     		ldr	r3, .L96
 1659 003c 7822     		movs	r2, #120
 1660 003e 5A72     		strb	r2, [r3, #9]
 475:modem.c       ****     /* app add on
 476:modem.c       ****     updatable_parameters.<Name>_freq = 120u;
 477:modem.c       ****     */
 478:modem.c       ****      //--------------------------------------------------------------------------------------------
 479:modem.c       **** }
 1661              		.loc 1 479 0
 1662 0040 00BF     		nop
 1663 0042 BD46     		mov	sp, r7
 1664              		.cfi_def_cfa_register 13
 1665              		@ sp needed
 1666 0044 80BC     		pop	{r7}
 1667              		.cfi_restore 7
 1668              		.cfi_def_cfa_offset 0
 1669 0046 7047     		bx	lr
 1670              	.L97:
 1671              		.align	2
 1672              	.L96:
 1673 0048 00000000 		.word	updatable_parameters
 1674              		.cfi_endproc
 1675              	.LFE80:
 1676              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1677              		.section	.rodata
 1678 0322 0000     		.align	2
 1679              	.LC32:
 1680 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1680      5F547970 
 1680      653A2000 
 1681              		.align	2
 1682              	.LC33:
 1683 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1683      54797065 
 1683      3A2000
 1684 033b 00       		.align	2
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 41


 1685              	.LC34:
 1686 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1686      6C655F46 
 1686      7265713A 
 1686      2000
 1687 034a 0000     		.align	2
 1688              	.LC35:
 1689 034c 5265706F 		.ascii	"Report_Freq: \000"
 1689      72745F46 
 1689      7265713A 
 1689      2000
 1690 035a 0000     		.align	2
 1691              	.LC36:
 1692 035c 44656275 		.ascii	"Debug_Freq: \000"
 1692      675F4672 
 1692      65713A20 
 1692      00
 1693 0369 000000   		.align	2
 1694              	.LC37:
 1695 036c 41707073 		.ascii	"Apps_Enabled: \000"
 1695      5F456E61 
 1695      626C6564 
 1695      3A2000
 1696 037b 00       		.align	2
 1697              	.LC38:
 1698 037c 4170705F 		.ascii	"App_LED\000"
 1698      4C454400 
 1699              		.align	2
 1700              	.LC39:
 1701 0384 4C657665 		.ascii	"Level_Sensor\000"
 1701      6C5F5365 
 1701      6E736F72 
 1701      00
 1702 0391 000000   		.align	2
 1703              	.LC40:
 1704 0394 4175746F 		.ascii	"Autosampler\000"
 1704      73616D70 
 1704      6C657200 
 1705              		.align	2
 1706              	.LC41:
 1707 03a0 4170705F 		.ascii	"App_LED: \000"
 1707      4C45443A 
 1707      2000
 1708 03aa 0000     		.align	2
 1709              	.LC42:
 1710 03ac 4C657665 		.ascii	"Level_Sensor: \000"
 1710      6C5F5365 
 1710      6E736F72 
 1710      3A2000
 1711 03bb 00       		.align	2
 1712              	.LC43:
 1713 03bc 56616C76 		.ascii	"Valve:\000"
 1713      653A00
 1714 03c3 00       		.align	2
 1715              	.LC44:
 1716 03c4 4175746F 		.ascii	"Autosampler:\000"
 1716      73616D70 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 42


 1716      6C65723A 
 1716      00
 1717 03d1 000000   		.align	2
 1718              	.LC45:
 1719 03d4 256400   		.ascii	"%d\000"
 1720 03d7 00       		.align	2
 1721              	.LC46:
 1722 03d8 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1722      20747970 
 1722      65206368 
 1722      616E6765 
 1722      6420746F 
 1723 03f3 00       		.align	2
 1724              	.LC47:
 1725 03f4 436F756C 		.ascii	"Could not change node type.\000"
 1725      64206E6F 
 1725      74206368 
 1725      616E6765 
 1725      206E6F64 
 1726              		.align	2
 1727              	.LC48:
 1728 0410 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1728      74797065 
 1728      20636861 
 1728      6E676564 
 1728      20746F3A 
 1729 042a 0000     		.align	2
 1730              	.LC49:
 1731 042c 436F756C 		.ascii	"Could not change SIM type.\000"
 1731      64206E6F 
 1731      74206368 
 1731      616E6765 
 1731      2053494D 
 1732 0447 00       		.align	2
 1733              	.LC50:
 1734 0448 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1734      6C696E67 
 1734      20667265 
 1734      7175656E 
 1734      63792063 
 1735              		.align	2
 1736              	.LC51:
 1737 046c 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1737      64206E6F 
 1737      74207061 
 1737      72736520 
 1737      6E657720 
 1738 049a 0000     		.align	2
 1739              	.LC52:
 1740 049c 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1740      7274696E 
 1740      67206672 
 1740      65717565 
 1740      6E637920 
 1741 04c1 000000   		.align	2
 1742              	.LC53:
 1743 04c4 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 43


 1743      64206E6F 
 1743      74207061 
 1743      72736520 
 1743      6E657720 
 1744 04f3 00       		.align	2
 1745              	.LC54:
 1746 04f4 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1746      67207072 
 1746      696E7469 
 1746      6E672066 
 1746      72657175 
 1747 051e 0000     		.align	2
 1748              	.LC55:
 1749 0520 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1749      64206E6F 
 1749      74207061 
 1749      72736520 
 1749      6E657720 
 1750 054f 00       		.align	2
 1751              	.LC56:
 1752 0550 46726571 		.ascii	"Freq=\000"
 1752      3D00
 1753 0556 0000     		.align	2
 1754              	.LC57:
 1755 0558 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1755      4C454420 
 1755      66726571 
 1755      75656E63 
 1755      79206368 
 1756 057b 00       		.align	2
 1757              	.LC58:
 1758 057c 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1758      64206E6F 
 1758      74207061 
 1758      72736520 
 1758      6E657720 
 1759 05a9 000000   		.align	2
 1760              	.LC59:
 1761 05ac 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1761      70705F4C 
 1761      45442066 
 1761      72657175 
 1761      656E6379 
 1762 05d2 0000     		.align	2
 1763              	.LC60:
 1764 05d4 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1764      6C5F5365 
 1764      6E736F72 
 1764      20667265 
 1764      7175656E 
 1765              		.align	2
 1766              	.LC61:
 1767 05fc 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1767      64206E6F 
 1767      74207061 
 1767      72736520 
 1767      6E657720 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 44


 1768 062e 0000     		.align	2
 1769              	.LC62:
 1770 0630 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1770      6576656C 
 1770      5F53656E 
 1770      736F7220 
 1770      66726571 
 1771 065b 00       		.align	2
 1772              	.LC63:
 1773 065c 4175746F 		.ascii	"Autosampler frequency changed to: %d\015\012\000"
 1773      73616D70 
 1773      6C657220 
 1773      66726571 
 1773      75656E63 
 1774 0683 00       		.align	2
 1775              	.LC64:
 1776 0684 436F756C 		.ascii	"Could not parse new Autosampler frequency value.\000"
 1776      64206E6F 
 1776      74207061 
 1776      72736520 
 1776      6E657720 
 1777 06b5 000000   		.align	2
 1778              	.LC65:
 1779 06b8 4E6F2041 		.ascii	"No Autosampler frequency value indicated.\000"
 1779      75746F73 
 1779      616D706C 
 1779      65722066 
 1779      72657175 
 1780              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1781              		.align	2
 1782              		.global	get_updated_parameters_from_malcom
 1783              		.thumb
 1784              		.thumb_func
 1785              		.type	get_updated_parameters_from_malcom, %function
 1786              	get_updated_parameters_from_malcom:
 1787              	.LFB81:
 480:modem.c       **** 
 481:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 482:modem.c       **** void get_updated_parameters_from_malcom(){
 1788              		.loc 1 482 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 904
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792 0000 90B5     		push	{r4, r7, lr}
 1793              		.cfi_def_cfa_offset 12
 1794              		.cfi_offset 4, -12
 1795              		.cfi_offset 7, -8
 1796              		.cfi_offset 14, -4
 1797 0002 ADF5637D 		sub	sp, sp, #908
 1798              		.cfi_def_cfa_offset 920
 1799 0006 00AF     		add	r7, sp, #0
 1800              		.cfi_def_cfa_register 7
 483:modem.c       ****     
 484:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 485:modem.c       ****     char s_node_type[10];
 486:modem.c       ****     char s_sim_type[10];
 487:modem.c       ****     char s_sample_freq[10];
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 45


 488:modem.c       ****     char s_report_freq[10];
 489:modem.c       ****     char s_debug_freq[10];
 490:modem.c       ****     
 491:modem.c       ****     //apps
 492:modem.c       ****     // APP_INTERFACE-------------------------------------------------------------------------------
 493:modem.c       ****     char s_app_led[100];
 494:modem.c       ****     s_app_led[0] = '\0';
 1801              		.loc 1 494 0
 1802 0008 0023     		movs	r3, #0
 1803 000a 87F8E832 		strb	r3, [r7, #744]
 495:modem.c       ****     
 496:modem.c       ****     char s_level_sensor[100];
 497:modem.c       ****     s_level_sensor[0] = '\0';
 1804              		.loc 1 497 0
 1805 000e 07F52173 		add	r3, r7, #644
 1806 0012 0022     		movs	r2, #0
 1807 0014 1A70     		strb	r2, [r3]
 498:modem.c       ****     
 499:modem.c       ****     char s_down_level_sensor[100];
 500:modem.c       ****     s_down_level_sensor[0] = '\0';
 1808              		.loc 1 500 0
 1809 0016 07F50873 		add	r3, r7, #544
 1810 001a 0022     		movs	r2, #0
 1811 001c 1A70     		strb	r2, [r3]
 501:modem.c       ****     
 502:modem.c       ****     char s_valve[100];
 503:modem.c       ****     s_valve[0] = '\0';
 1812              		.loc 1 503 0
 1813 001e 07F5DE73 		add	r3, r7, #444
 1814 0022 0022     		movs	r2, #0
 1815 0024 1A70     		strb	r2, [r3]
 504:modem.c       **** 
 505:modem.c       ****     char s_autosampler[100];
 506:modem.c       ****     s_autosampler[0] = '\0';
 1816              		.loc 1 506 0
 1817 0026 07F5AC73 		add	r3, r7, #344
 1818 002a 0022     		movs	r2, #0
 1819 002c 1A70     		strb	r2, [r3]
 507:modem.c       **** 
 508:modem.c       ****     /* app add template
 509:modem.c       ****     char s_<name>[100];
 510:modem.c       ****     s_<name>[0] = '\0';
 511:modem.c       ****     */
 512:modem.c       ****     
 513:modem.c       ****     char s_apps_enabled[200];
 514:modem.c       ****     s_apps_enabled[0]='\0';
 1820              		.loc 1 514 0
 1821 002e 07F19003 		add	r3, r7, #144
 1822 0032 0022     		movs	r2, #0
 1823 0034 1A70     		strb	r2, [r3]
 515:modem.c       ****     //---------------------------------------------------------------------------------------------
 516:modem.c       ****     
 517:modem.c       ****     s_node_type[0] = '\0';
 1824              		.loc 1 517 0
 1825 0036 0023     		movs	r3, #0
 1826 0038 87F87C33 		strb	r3, [r7, #892]
 518:modem.c       ****     s_sim_type[0] = '\0';
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 46


 1827              		.loc 1 518 0
 1828 003c 0023     		movs	r3, #0
 1829 003e 87F87033 		strb	r3, [r7, #880]
 519:modem.c       ****     s_sample_freq[0] = '\0';
 1830              		.loc 1 519 0
 1831 0042 0023     		movs	r3, #0
 1832 0044 87F86433 		strb	r3, [r7, #868]
 520:modem.c       ****     s_report_freq[0] = '\0';
 1833              		.loc 1 520 0
 1834 0048 0023     		movs	r3, #0
 1835 004a 87F85833 		strb	r3, [r7, #856]
 521:modem.c       ****     s_debug_freq[0] = '\0';
 1836              		.loc 1 521 0
 1837 004e 0023     		movs	r3, #0
 1838 0050 87F84C33 		strb	r3, [r7, #844]
 522:modem.c       ****     
 523:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 524:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1839              		.loc 1 524 0
 1840 0054 07F55F73 		add	r3, r7, #892
 1841 0058 A04A     		ldr	r2, .L124
 1842 005a A149     		ldr	r1, .L124+4
 1843 005c A148     		ldr	r0, .L124+8
 1844 005e FFF7FEFF 		bl	extract_string
 525:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1845              		.loc 1 525 0
 1846 0062 07F55C73 		add	r3, r7, #880
 1847 0066 9D4A     		ldr	r2, .L124
 1848 0068 9F49     		ldr	r1, .L124+12
 1849 006a 9E48     		ldr	r0, .L124+8
 1850 006c FFF7FEFF 		bl	extract_string
 526:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1851              		.loc 1 526 0
 1852 0070 07F55973 		add	r3, r7, #868
 1853 0074 994A     		ldr	r2, .L124
 1854 0076 9D49     		ldr	r1, .L124+16
 1855 0078 9A48     		ldr	r0, .L124+8
 1856 007a FFF7FEFF 		bl	extract_string
 527:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1857              		.loc 1 527 0
 1858 007e 07F55673 		add	r3, r7, #856
 1859 0082 964A     		ldr	r2, .L124
 1860 0084 9A49     		ldr	r1, .L124+20
 1861 0086 9748     		ldr	r0, .L124+8
 1862 0088 FFF7FEFF 		bl	extract_string
 528:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1863              		.loc 1 528 0
 1864 008c 07F55373 		add	r3, r7, #844
 1865 0090 924A     		ldr	r2, .L124
 1866 0092 9849     		ldr	r1, .L124+24
 1867 0094 9348     		ldr	r0, .L124+8
 1868 0096 FFF7FEFF 		bl	extract_string
 529:modem.c       ****     
 530:modem.c       ****     // which apps are enabled?
 531:modem.c       ****  // APP_INTERFACE----------------------------------------------------------------------------------
 532:modem.c       ****     if (strstr(uart_received_string,"Apps_Enabled: ")){
 1869              		.loc 1 532 0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 47


 1870 009a 9749     		ldr	r1, .L124+28
 1871 009c 9148     		ldr	r0, .L124+8
 1872 009e FFF7FEFF 		bl	strstr
 1873 00a2 0346     		mov	r3, r0
 1874 00a4 002B     		cmp	r3, #0
 1875 00a6 35D0     		beq	.L99
 533:modem.c       ****         extract_string(uart_received_string,"Apps_Enabled: ","\r",s_apps_enabled);
 1876              		.loc 1 533 0
 1877 00a8 07F19003 		add	r3, r7, #144
 1878 00ac 8B4A     		ldr	r2, .L124
 1879 00ae 9249     		ldr	r1, .L124+28
 1880 00b0 8C48     		ldr	r0, .L124+8
 1881 00b2 FFF7FEFF 		bl	extract_string
 534:modem.c       ****         // if an app is in this string, turn it on
 535:modem.c       ****         // if we this app in the enabled list, turn it on, else we ensure it is disabled
 536:modem.c       ****         /*************Testing new form of truncated code*********/
 537:modem.c       ****         App_LED_enabled = (strstr(s_apps_enabled,"App_LED")!=NULL) ? 1 : 0;
 1882              		.loc 1 537 0
 1883 00b6 07F19003 		add	r3, r7, #144
 1884 00ba 9049     		ldr	r1, .L124+32
 1885 00bc 1846     		mov	r0, r3
 1886 00be FFF7FEFF 		bl	strstr
 1887 00c2 0346     		mov	r3, r0
 1888 00c4 002B     		cmp	r3, #0
 1889 00c6 14BF     		ite	ne
 1890 00c8 0123     		movne	r3, #1
 1891 00ca 0023     		moveq	r3, #0
 1892 00cc DBB2     		uxtb	r3, r3
 1893 00ce 1A46     		mov	r2, r3
 1894 00d0 8B4B     		ldr	r3, .L124+36
 1895 00d2 1A70     		strb	r2, [r3]
 538:modem.c       ****         level_sensor_enabled = (strstr(s_apps_enabled,"Level_Sensor")!=NULL) ? 1 : 0;
 1896              		.loc 1 538 0
 1897 00d4 07F19003 		add	r3, r7, #144
 1898 00d8 8A49     		ldr	r1, .L124+40
 1899 00da 1846     		mov	r0, r3
 1900 00dc FFF7FEFF 		bl	strstr
 1901 00e0 0346     		mov	r3, r0
 1902 00e2 002B     		cmp	r3, #0
 1903 00e4 14BF     		ite	ne
 1904 00e6 0123     		movne	r3, #1
 1905 00e8 0023     		moveq	r3, #0
 1906 00ea DAB2     		uxtb	r2, r3
 1907 00ec 864B     		ldr	r3, .L124+44
 1908 00ee 1A70     		strb	r2, [r3]
 539:modem.c       ****         // downstream_level_sensor_enabled = (strstr(s_apps_enabled,"Downstream_Level") != NULL) ? 
 540:modem.c       ****         // valve_enabled = (strstr(s_apps_enabled, "Valve") != NULL) ? 1 : 0;
 541:modem.c       ****         valve_enabled = 0;
 1909              		.loc 1 541 0
 1910 00f0 864B     		ldr	r3, .L124+48
 1911 00f2 0022     		movs	r2, #0
 1912 00f4 1A70     		strb	r2, [r3]
 542:modem.c       ****         autosampler_enabled = (strstr(s_apps_enabled, "Autosampler") != NULL) ? 1 : 0;
 1913              		.loc 1 542 0
 1914 00f6 07F19003 		add	r3, r7, #144
 1915 00fa 8549     		ldr	r1, .L124+52
 1916 00fc 1846     		mov	r0, r3
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 48


 1917 00fe FFF7FEFF 		bl	strstr
 1918 0102 0346     		mov	r3, r0
 1919 0104 002B     		cmp	r3, #0
 1920 0106 14BF     		ite	ne
 1921 0108 0123     		movne	r3, #1
 1922 010a 0023     		moveq	r3, #0
 1923 010c DBB2     		uxtb	r3, r3
 1924 010e 1A46     		mov	r2, r3
 1925 0110 804B     		ldr	r3, .L124+56
 1926 0112 1A70     		strb	r2, [r3]
 1927              	.L99:
 543:modem.c       ****         /* app add template 
 544:modem.c       ****         <name>_enabled = (strstr(s_apps_enabled, "<Name>") != NULL) ? 1 : 0;
 545:modem.c       ****         */
 546:modem.c       **** 
 547:modem.c       ****         /* old code structure
 548:modem.c       ****         (strstr(s_apps_enabled, "<Name>") != NULL)? <name>_enabled = 1 : <name>_enabled = 0;
 549:modem.c       ****         
 550:modem.c       ****         // if we see level sensor in the enabled list, turn it on
 551:modem.c       ****         if (strstr(s_apps_enabled,"Level_Sensor")!=NULL){level_sensor_enabled = 1};        
 552:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 553:modem.c       ****         else if (level_sensor_enabled){level_sensor_enabled = 0;}
 554:modem.c       ****         
 555:modem.c       ****         if (strstr(s_apps_enabled,"App_LED")!=NULL){
 556:modem.c       ****             // if we this app in the enabled list, turn it on
 557:modem.c       ****             App_LED_enabled = 1;
 558:modem.c       ****         }
 559:modem.c       ****         else if (App_LED_enabled){
 560:modem.c       ****             App_LED_enabled = 0;
 561:modem.c       ****         }
 562:modem.c       ****         
 563:modem.c       ****         if (strstr(s_apps_enabled,"Downstream_Level") != NULL){
 564:modem.c       ****             downstream_level_sensor_enabled = 1;
 565:modem.c       ****         }        
 566:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 567:modem.c       ****         else if (downstream_level_sensor_enabled){ 
 568:modem.c       ****             downstream_level_sensor_enabled = 0;
 569:modem.c       ****         }
 570:modem.c       ****         
 571:modem.c       ****         if (strstr(s_apps_enabled, "Valve") != NULL){
 572:modem.c       ****             valve_enabled = 1u;
 573:modem.c       ****         }
 574:modem.c       ****         else if(valve_enabled){
 575:modem.c       ****             valve_enabled = 0u;
 576:modem.c       ****         }
 577:modem.c       ****         
 578:modem.c       ****         if (strstr(s_apps_enabled, "Autosampler") != NULL){
 579:modem.c       ****             autosampler_enabled = 1u;
 580:modem.c       ****         }
 581:modem.c       ****         else if(autosampler_enabled){
 582:modem.c       ****             autosampler_enabled = 0u;
 583:modem.c       ****         }
 584:modem.c       ****         */
 585:modem.c       ****         
 586:modem.c       ****     }
 587:modem.c       ****     //---------------------------------------------------------------------------------------------
 588:modem.c       **** 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 49


 589:modem.c       **** 
 590:modem.c       ****         
 591:modem.c       ****     
 592:modem.c       ****     // update app parameters (valve open %, measuring freq, etc)
 593:modem.c       ****     // APP_INTERFACE ------------------------------------------------------------------------------
 594:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1928              		.loc 1 594 0
 1929 0114 07F53A73 		add	r3, r7, #744
 1930 0118 704A     		ldr	r2, .L124
 1931 011a 7F49     		ldr	r1, .L124+60
 1932 011c 7148     		ldr	r0, .L124+8
 1933 011e FFF7FEFF 		bl	extract_string
 595:modem.c       ****     App_LED_Update(s_app_led);
 1934              		.loc 1 595 0
 1935 0122 07F53A73 		add	r3, r7, #744
 1936 0126 1846     		mov	r0, r3
 1937 0128 FFF7FEFF 		bl	App_LED_Update
 596:modem.c       ****     
 597:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1938              		.loc 1 597 0
 1939 012c 07F52173 		add	r3, r7, #644
 1940 0130 6A4A     		ldr	r2, .L124
 1941 0132 7A49     		ldr	r1, .L124+64
 1942 0134 6B48     		ldr	r0, .L124+8
 1943 0136 FFF7FEFF 		bl	extract_string
 598:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1944              		.loc 1 598 0
 1945 013a 07F52173 		add	r3, r7, #644
 1946 013e 1846     		mov	r0, r3
 1947 0140 FFF7FEFF 		bl	Level_Sensor_Update
 599:modem.c       ****     
 600:modem.c       ****     //extract_string(uart_received_string,"Downstream_Level: ","\r",s_down_level_sensor);
 601:modem.c       ****     //Downstream_Level_Sensor_Update(s_down_level_sensor);
 602:modem.c       ****     
 603:modem.c       ****     extract_string(uart_received_string,"Valve:","\r", s_valve);
 1948              		.loc 1 603 0
 1949 0144 07F5DE73 		add	r3, r7, #444
 1950 0148 644A     		ldr	r2, .L124
 1951 014a 7549     		ldr	r1, .L124+68
 1952 014c 6548     		ldr	r0, .L124+8
 1953 014e FFF7FEFF 		bl	extract_string
 604:modem.c       ****     Valve_Update(s_valve);
 1954              		.loc 1 604 0
 1955 0152 07F5DE73 		add	r3, r7, #444
 1956 0156 1846     		mov	r0, r3
 1957 0158 FFF7FEFF 		bl	Valve_Update
 605:modem.c       **** 
 606:modem.c       ****     extract_string(uart_received_string,"Autosampler:","\r", s_autosampler);
 1958              		.loc 1 606 0
 1959 015c 07F5AC73 		add	r3, r7, #344
 1960 0160 5E4A     		ldr	r2, .L124
 1961 0162 7049     		ldr	r1, .L124+72
 1962 0164 5F48     		ldr	r0, .L124+8
 1963 0166 FFF7FEFF 		bl	extract_string
 607:modem.c       ****     Autosampler_Update(s_autosampler);
 1964              		.loc 1 607 0
 1965 016a 07F5AC73 		add	r3, r7, #344
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 50


 1966 016e 1846     		mov	r0, r3
 1967 0170 FFF7FEFF 		bl	Autosampler_Update
 608:modem.c       ****     
 609:modem.c       ****     /* app add template
 610:modem.c       ****     extract_string(uart_received_string,"<Name>:","\r", s_<name>);
 611:modem.c       ****     <Name>_Update(s_<name>);
 612:modem.c       ****     */
 613:modem.c       **** 
 614:modem.c       ****     // Create variables for what is sent back from the server
 615:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, \
 616:modem.c       ****     app_led_freq, level_sensor_freq, down_level_freq, valve_freq, autosampler_freq;
 617:modem.c       ****     
 618:modem.c       ****     // Scan character arrays and save values 
 619:modem.c       ****     
 620:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1968              		.loc 1 620 0
 1969 0174 07F18C02 		add	r2, r7, #140
 1970 0178 07F55F73 		add	r3, r7, #892
 1971 017c 6A49     		ldr	r1, .L124+76
 1972 017e 1846     		mov	r0, r3
 1973 0180 FFF7FEFF 		bl	sscanf
 1974 0184 0346     		mov	r3, r0
 1975 0186 012B     		cmp	r3, #1
 1976 0188 0ED1     		bne	.L100
 621:modem.c       ****         updatable_parameters.node_type = node_type;
 1977              		.loc 1 621 0
 1978 018a 07F18C03 		add	r3, r7, #140
 1979 018e 1B68     		ldr	r3, [r3]
 1980 0190 DAB2     		uxtb	r2, r3
 1981 0192 664B     		ldr	r3, .L124+80
 1982 0194 1A70     		strb	r2, [r3]
 622:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1983              		.loc 1 622 0
 1984 0196 07F18C03 		add	r3, r7, #140
 1985 019a 1B68     		ldr	r3, [r3]
 1986 019c 1A46     		mov	r2, r3
 1987 019e 6449     		ldr	r1, .L124+84
 1988 01a0 0020     		movs	r0, #0
 1989 01a2 FFF7FEFF 		bl	printNotif
 1990 01a6 03E0     		b	.L101
 1991              	.L100:
 623:modem.c       ****     }else{
 624:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1992              		.loc 1 624 0
 1993 01a8 6249     		ldr	r1, .L124+88
 1994 01aa 0220     		movs	r0, #2
 1995 01ac FFF7FEFF 		bl	printNotif
 1996              	.L101:
 625:modem.c       ****     }
 626:modem.c       ****     
 627:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1997              		.loc 1 627 0
 1998 01b0 07F18802 		add	r2, r7, #136
 1999 01b4 07F55C73 		add	r3, r7, #880
 2000 01b8 5B49     		ldr	r1, .L124+76
 2001 01ba 1846     		mov	r0, r3
 2002 01bc FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 51


 2003 01c0 0346     		mov	r3, r0
 2004 01c2 012B     		cmp	r3, #1
 2005 01c4 12D1     		bne	.L102
 628:modem.c       ****         updatable_parameters.sim_type = sim_type;
 2006              		.loc 1 628 0
 2007 01c6 07F18803 		add	r3, r7, #136
 2008 01ca 1B68     		ldr	r3, [r3]
 2009 01cc 002B     		cmp	r3, #0
 2010 01ce 14BF     		ite	ne
 2011 01d0 0123     		movne	r3, #1
 2012 01d2 0023     		moveq	r3, #0
 2013 01d4 DAB2     		uxtb	r2, r3
 2014 01d6 554B     		ldr	r3, .L124+80
 2015 01d8 5A70     		strb	r2, [r3, #1]
 629:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 2016              		.loc 1 629 0
 2017 01da 07F18803 		add	r3, r7, #136
 2018 01de 1B68     		ldr	r3, [r3]
 2019 01e0 1A46     		mov	r2, r3
 2020 01e2 5549     		ldr	r1, .L124+92
 2021 01e4 0020     		movs	r0, #0
 2022 01e6 FFF7FEFF 		bl	printNotif
 2023 01ea 03E0     		b	.L103
 2024              	.L102:
 630:modem.c       ****     }else{
 631:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 2025              		.loc 1 631 0
 2026 01ec 5349     		ldr	r1, .L124+96
 2027 01ee 0220     		movs	r0, #2
 2028 01f0 FFF7FEFF 		bl	printNotif
 2029              	.L103:
 632:modem.c       ****     }
 633:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 2030              		.loc 1 633 0
 2031 01f4 07F18402 		add	r2, r7, #132
 2032 01f8 07F55973 		add	r3, r7, #868
 2033 01fc 4A49     		ldr	r1, .L124+76
 2034 01fe 1846     		mov	r0, r3
 2035 0200 FFF7FEFF 		bl	sscanf
 2036 0204 0346     		mov	r3, r0
 2037 0206 012B     		cmp	r3, #1
 2038 0208 1DD1     		bne	.L104
 634:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 2039              		.loc 1 634 0
 2040 020a 07F18403 		add	r3, r7, #132
 2041 020e 1B68     		ldr	r3, [r3]
 2042 0210 DAB2     		uxtb	r2, r3
 2043 0212 464B     		ldr	r3, .L124+80
 2044 0214 9A70     		strb	r2, [r3, #2]
 635:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 636:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 2045              		.loc 1 636 0
 2046 0216 454B     		ldr	r3, .L124+80
 2047 0218 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2048 021a 99B2     		uxth	r1, r3
 2049 021c 484C     		ldr	r4, .L124+100
 2050 021e 3846     		mov	r0, r7
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 52


 2051 0220 0723     		movs	r3, #7
 2052 0222 0122     		movs	r2, #1
 2053 0224 FFF7FEFF 		bl	CreateAlarm
 2054 0228 3A46     		mov	r2, r7
 2055 022a 2346     		mov	r3, r4
 2056 022c 1168     		ldr	r1, [r2]	@ unaligned
 2057 022e 1960     		str	r1, [r3]	@ unaligned
 2058 0230 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2059 0232 9A80     		strh	r2, [r3, #4]	@ unaligned
 637:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 2060              		.loc 1 637 0
 2061 0234 07F18403 		add	r3, r7, #132
 2062 0238 1B68     		ldr	r3, [r3]
 2063 023a 1A46     		mov	r2, r3
 2064 023c 4149     		ldr	r1, .L124+104
 2065 023e 0020     		movs	r0, #0
 2066 0240 FFF7FEFF 		bl	printNotif
 2067 0244 03E0     		b	.L105
 2068              	.L104:
 638:modem.c       ****     }else{
 639:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 2069              		.loc 1 639 0
 2070 0246 4049     		ldr	r1, .L124+108
 2071 0248 0220     		movs	r0, #2
 2072 024a FFF7FEFF 		bl	printNotif
 2073              	.L105:
 640:modem.c       ****     }
 641:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 2074              		.loc 1 641 0
 2075 024e 07F18002 		add	r2, r7, #128
 2076 0252 07F55673 		add	r3, r7, #856
 2077 0256 3449     		ldr	r1, .L124+76
 2078 0258 1846     		mov	r0, r3
 2079 025a FFF7FEFF 		bl	sscanf
 2080 025e 0346     		mov	r3, r0
 2081 0260 012B     		cmp	r3, #1
 2082 0262 1DD1     		bne	.L106
 642:modem.c       ****         updatable_parameters.sync_time = report_freq;
 2083              		.loc 1 642 0
 2084 0264 07F18003 		add	r3, r7, #128
 2085 0268 1B68     		ldr	r3, [r3]
 2086 026a DAB2     		uxtb	r2, r3
 2087 026c 2F4B     		ldr	r3, .L124+80
 2088 026e DA70     		strb	r2, [r3, #3]
 643:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 644:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 2089              		.loc 1 644 0
 2090 0270 2E4B     		ldr	r3, .L124+80
 2091 0272 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2092 0274 99B2     		uxth	r1, r3
 2093 0276 354C     		ldr	r4, .L124+112
 2094 0278 3846     		mov	r0, r7
 2095 027a 0723     		movs	r3, #7
 2096 027c 0122     		movs	r2, #1
 2097 027e FFF7FEFF 		bl	CreateAlarm
 2098 0282 3A46     		mov	r2, r7
 2099 0284 2346     		mov	r3, r4
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 53


 2100 0286 1168     		ldr	r1, [r2]	@ unaligned
 2101 0288 1960     		str	r1, [r3]	@ unaligned
 2102 028a 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2103 028c 9A80     		strh	r2, [r3, #4]	@ unaligned
 645:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 2104              		.loc 1 645 0
 2105 028e 07F18003 		add	r3, r7, #128
 2106 0292 1B68     		ldr	r3, [r3]
 2107 0294 1A46     		mov	r2, r3
 2108 0296 2E49     		ldr	r1, .L124+116
 2109 0298 0020     		movs	r0, #0
 2110 029a FFF7FEFF 		bl	printNotif
 2111 029e 03E0     		b	.L107
 2112              	.L106:
 646:modem.c       ****         }else{
 647:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 2113              		.loc 1 647 0
 2114 02a0 2C49     		ldr	r1, .L124+120
 2115 02a2 0220     		movs	r0, #2
 2116 02a4 FFF7FEFF 		bl	printNotif
 2117              	.L107:
 648:modem.c       ****     }
 649:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 2118              		.loc 1 649 0
 2119 02a8 07F17C02 		add	r2, r7, #124
 2120 02ac 07F55373 		add	r3, r7, #844
 2121 02b0 1D49     		ldr	r1, .L124+76
 2122 02b2 1846     		mov	r0, r3
 2123 02b4 FFF7FEFF 		bl	sscanf
 2124 02b8 0346     		mov	r3, r0
 2125 02ba 012B     		cmp	r3, #1
 2126 02bc 4ED1     		bne	.L108
 650:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 2127              		.loc 1 650 0
 2128 02be 07F17C03 		add	r3, r7, #124
 2129 02c2 1B68     		ldr	r3, [r3]
 2130 02c4 DAB2     		uxtb	r2, r3
 2131 02c6 194B     		ldr	r3, .L124+80
 2132 02c8 1A71     		strb	r2, [r3, #4]
 651:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 2133              		.loc 1 651 0
 2134 02ca 07F17C03 		add	r3, r7, #124
 2135 02ce 1B68     		ldr	r3, [r3]
 2136 02d0 1A46     		mov	r2, r3
 2137 02d2 2149     		ldr	r1, .L124+124
 2138 02d4 0020     		movs	r0, #0
 2139 02d6 FFF7FEFF 		bl	printNotif
 2140 02da 43E0     		b	.L109
 2141              	.L125:
 2142              		.align	2
 2143              	.L124:
 2144 02dc 88020000 		.word	.LC21
 2145 02e0 24030000 		.word	.LC32
 2146 02e4 00000000 		.word	uart_received_string
 2147 02e8 30030000 		.word	.LC33
 2148 02ec 3C030000 		.word	.LC34
 2149 02f0 4C030000 		.word	.LC35
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 54


 2150 02f4 5C030000 		.word	.LC36
 2151 02f8 6C030000 		.word	.LC37
 2152 02fc 7C030000 		.word	.LC38
 2153 0300 00000000 		.word	App_LED_enabled
 2154 0304 84030000 		.word	.LC39
 2155 0308 00000000 		.word	level_sensor_enabled
 2156 030c 00000000 		.word	valve_enabled
 2157 0310 94030000 		.word	.LC40
 2158 0314 00000000 		.word	autosampler_enabled
 2159 0318 A0030000 		.word	.LC41
 2160 031c AC030000 		.word	.LC42
 2161 0320 BC030000 		.word	.LC43
 2162 0324 C4030000 		.word	.LC44
 2163 0328 D4030000 		.word	.LC45
 2164 032c 00000000 		.word	updatable_parameters
 2165 0330 D8030000 		.word	.LC46
 2166 0334 F4030000 		.word	.LC47
 2167 0338 10040000 		.word	.LC48
 2168 033c 2C040000 		.word	.LC49
 2169 0340 00000000 		.word	alarmMeasure
 2170 0344 48040000 		.word	.LC50
 2171 0348 6C040000 		.word	.LC51
 2172 034c 00000000 		.word	alarmSync
 2173 0350 9C040000 		.word	.LC52
 2174 0354 C4040000 		.word	.LC53
 2175 0358 F4040000 		.word	.LC54
 2176              	.L108:
 652:modem.c       ****     }else{
 653:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 2177              		.loc 1 653 0
 2178 035c 8549     		ldr	r1, .L126
 2179 035e 0220     		movs	r0, #2
 2180 0360 FFF7FEFF 		bl	printNotif
 2181              	.L109:
 654:modem.c       ****     }
 655:modem.c       ****     
 656:modem.c       ****     // app alarm frequency updates
 657:modem.c       ****     // APP_INTERFACE-------------------------------------------------------------------------------
 658:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 2182              		.loc 1 658 0
 2183 0364 844B     		ldr	r3, .L126+4
 2184 0366 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2185 0368 042B     		cmp	r3, #4
 2186 036a 40F0FD80 		bne	.L123
 2187              	.LBB9:
 659:modem.c       ****         char temp[100];
 660:modem.c       ****         temp[0] = '\0'; 
 2188              		.loc 1 660 0
 2189 036e 07F10C03 		add	r3, r7, #12
 2190 0372 0022     		movs	r2, #0
 2191 0374 1A70     		strb	r2, [r3]
 661:modem.c       ****         
 662:modem.c       ****         if(App_LED_enabled){ //if you're not enabled, don't talk
 2192              		.loc 1 662 0
 2193 0376 814B     		ldr	r3, .L126+8
 2194 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2195 037a 002B     		cmp	r3, #0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 55


 2196 037c 4ED0     		beq	.L111
 663:modem.c       ****             if (strstr(s_app_led,"Freq=")!=NULL){
 2197              		.loc 1 663 0
 2198 037e 07F53A73 		add	r3, r7, #744
 2199 0382 7F49     		ldr	r1, .L126+12
 2200 0384 1846     		mov	r0, r3
 2201 0386 FFF7FEFF 		bl	strstr
 2202 038a 0346     		mov	r3, r0
 2203 038c 002B     		cmp	r3, #0
 2204 038e 41D0     		beq	.L112
 664:modem.c       ****                 temp[0] = '\0';
 2205              		.loc 1 664 0
 2206 0390 07F10C03 		add	r3, r7, #12
 2207 0394 0022     		movs	r2, #0
 2208 0396 1A70     		strb	r2, [r3]
 665:modem.c       ****                 strcpy(temp,s_app_led);
 2209              		.loc 1 665 0
 2210 0398 07F53A72 		add	r2, r7, #744
 2211 039c 07F10C03 		add	r3, r7, #12
 2212 03a0 1146     		mov	r1, r2
 2213 03a2 1846     		mov	r0, r3
 2214 03a4 FFF7FEFF 		bl	strcpy
 666:modem.c       ****                 extract_string(temp,"Freq=","\r",s_app_led); // grab level app frequency
 2215              		.loc 1 666 0
 2216 03a8 07F53A73 		add	r3, r7, #744
 2217 03ac 07F10C00 		add	r0, r7, #12
 2218 03b0 744A     		ldr	r2, .L126+16
 2219 03b2 7349     		ldr	r1, .L126+12
 2220 03b4 FFF7FEFF 		bl	extract_string
 667:modem.c       ****                 if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2221              		.loc 1 667 0
 2222 03b8 07F17802 		add	r2, r7, #120
 2223 03bc 07F53A73 		add	r3, r7, #744
 2224 03c0 7149     		ldr	r1, .L126+20
 2225 03c2 1846     		mov	r0, r3
 2226 03c4 FFF7FEFF 		bl	sscanf
 2227 03c8 0346     		mov	r3, r0
 2228 03ca 012B     		cmp	r3, #1
 2229 03cc 1DD1     		bne	.L113
 668:modem.c       ****                     updatable_parameters.App_LED_freq = app_led_freq;
 2230              		.loc 1 668 0
 2231 03ce 07F17803 		add	r3, r7, #120
 2232 03d2 1B68     		ldr	r3, [r3]
 2233 03d4 DAB2     		uxtb	r2, r3
 2234 03d6 684B     		ldr	r3, .L126+4
 2235 03d8 5A71     		strb	r2, [r3, #5]
 669:modem.c       ****                     // update the alarm to the new frequency
 670:modem.c       ****                     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,A
 2236              		.loc 1 670 0
 2237 03da 674B     		ldr	r3, .L126+4
 2238 03dc 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2239 03de 99B2     		uxth	r1, r3
 2240 03e0 6A4C     		ldr	r4, .L126+24
 2241 03e2 3846     		mov	r0, r7
 2242 03e4 0723     		movs	r3, #7
 2243 03e6 0122     		movs	r2, #1
 2244 03e8 FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 56


 2245 03ec 3A46     		mov	r2, r7
 2246 03ee 2346     		mov	r3, r4
 2247 03f0 1168     		ldr	r1, [r2]	@ unaligned
 2248 03f2 1960     		str	r1, [r3]	@ unaligned
 2249 03f4 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2250 03f6 9A80     		strh	r2, [r3, #4]	@ unaligned
 671:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_fr
 2251              		.loc 1 671 0
 2252 03f8 07F17803 		add	r3, r7, #120
 2253 03fc 1B68     		ldr	r3, [r3]
 2254 03fe 1A46     		mov	r2, r3
 2255 0400 6349     		ldr	r1, .L126+28
 2256 0402 0020     		movs	r0, #0
 2257 0404 FFF7FEFF 		bl	printNotif
 2258 0408 08E0     		b	.L111
 2259              	.L113:
 672:modem.c       ****                 } 
 673:modem.c       ****                 else{
 674:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2260              		.loc 1 674 0
 2261 040a 6249     		ldr	r1, .L126+32
 2262 040c 0220     		movs	r0, #2
 2263 040e FFF7FEFF 		bl	printNotif
 2264 0412 03E0     		b	.L111
 2265              	.L112:
 675:modem.c       ****                 }
 676:modem.c       ****             }
 677:modem.c       ****             else{
 678:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 2266              		.loc 1 678 0
 2267 0414 6049     		ldr	r1, .L126+36
 2268 0416 0220     		movs	r0, #2
 2269 0418 FFF7FEFF 		bl	printNotif
 2270              	.L111:
 679:modem.c       ****             }
 680:modem.c       ****         }
 681:modem.c       ****         if(level_sensor_enabled){
 2271              		.loc 1 681 0
 2272 041c 5F4B     		ldr	r3, .L126+40
 2273 041e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2274 0420 002B     		cmp	r3, #0
 2275 0422 4ED0     		beq	.L115
 682:modem.c       ****             if (strstr(s_level_sensor,"Freq=")!=NULL){
 2276              		.loc 1 682 0
 2277 0424 07F52173 		add	r3, r7, #644
 2278 0428 5549     		ldr	r1, .L126+12
 2279 042a 1846     		mov	r0, r3
 2280 042c FFF7FEFF 		bl	strstr
 2281 0430 0346     		mov	r3, r0
 2282 0432 002B     		cmp	r3, #0
 2283 0434 41D0     		beq	.L116
 683:modem.c       ****                 temp[0] = '\0';
 2284              		.loc 1 683 0
 2285 0436 07F10C03 		add	r3, r7, #12
 2286 043a 0022     		movs	r2, #0
 2287 043c 1A70     		strb	r2, [r3]
 684:modem.c       ****                 strcpy(temp,s_level_sensor);
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 57


 2288              		.loc 1 684 0
 2289 043e 07F52172 		add	r2, r7, #644
 2290 0442 07F10C03 		add	r3, r7, #12
 2291 0446 1146     		mov	r1, r2
 2292 0448 1846     		mov	r0, r3
 2293 044a FFF7FEFF 		bl	strcpy
 685:modem.c       ****                 extract_string(temp,"Freq=","\r",s_level_sensor); // grab level app frequency
 2294              		.loc 1 685 0
 2295 044e 07F52173 		add	r3, r7, #644
 2296 0452 07F10C00 		add	r0, r7, #12
 2297 0456 4B4A     		ldr	r2, .L126+16
 2298 0458 4949     		ldr	r1, .L126+12
 2299 045a FFF7FEFF 		bl	extract_string
 686:modem.c       ****                 if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2300              		.loc 1 686 0
 2301 045e 07F17402 		add	r2, r7, #116
 2302 0462 07F52173 		add	r3, r7, #644
 2303 0466 4849     		ldr	r1, .L126+20
 2304 0468 1846     		mov	r0, r3
 2305 046a FFF7FEFF 		bl	sscanf
 2306 046e 0346     		mov	r3, r0
 2307 0470 012B     		cmp	r3, #1
 2308 0472 1DD1     		bne	.L117
 687:modem.c       ****                     updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2309              		.loc 1 687 0
 2310 0474 07F17403 		add	r3, r7, #116
 2311 0478 1B68     		ldr	r3, [r3]
 2312 047a DAB2     		uxtb	r2, r3
 2313 047c 3E4B     		ldr	r3, .L126+4
 2314 047e 9A71     		strb	r2, [r3, #6]
 688:modem.c       ****                     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYP
 2315              		.loc 1 688 0
 2316 0480 3D4B     		ldr	r3, .L126+4
 2317 0482 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2318 0484 99B2     		uxth	r1, r3
 2319 0486 464C     		ldr	r4, .L126+44
 2320 0488 3846     		mov	r0, r7
 2321 048a 0723     		movs	r3, #7
 2322 048c 0122     		movs	r2, #1
 2323 048e FFF7FEFF 		bl	CreateAlarm
 2324 0492 3A46     		mov	r2, r7
 2325 0494 2346     		mov	r3, r4
 2326 0496 1168     		ldr	r1, [r2]	@ unaligned
 2327 0498 1960     		str	r1, [r3]	@ unaligned
 2328 049a 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2329 049c 9A80     		strh	r2, [r3, #4]	@ unaligned
 689:modem.c       **** 
 690:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", level
 2330              		.loc 1 690 0
 2331 049e 07F17403 		add	r3, r7, #116
 2332 04a2 1B68     		ldr	r3, [r3]
 2333 04a4 1A46     		mov	r2, r3
 2334 04a6 3F49     		ldr	r1, .L126+48
 2335 04a8 0020     		movs	r0, #0
 2336 04aa FFF7FEFF 		bl	printNotif
 2337 04ae 08E0     		b	.L115
 2338              	.L117:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 58


 691:modem.c       ****                 } 
 692:modem.c       ****                 else{
 693:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value."
 2339              		.loc 1 693 0
 2340 04b0 3D49     		ldr	r1, .L126+52
 2341 04b2 0220     		movs	r0, #2
 2342 04b4 FFF7FEFF 		bl	printNotif
 2343 04b8 03E0     		b	.L115
 2344              	.L116:
 694:modem.c       ****                 }
 695:modem.c       ****             }
 696:modem.c       ****             else{
 697:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2345              		.loc 1 697 0
 2346 04ba 3C49     		ldr	r1, .L126+56
 2347 04bc 0220     		movs	r0, #2
 2348 04be FFF7FEFF 		bl	printNotif
 2349              	.L115:
 698:modem.c       ****             }
 699:modem.c       ****         }
 700:modem.c       ****         /*
 701:modem.c       ****         if(downstream_level_sensor_enabled){ 
 702:modem.c       ****             if (strstr(s_down_level_sensor,"Freq=") !=NULL){
 703:modem.c       ****                 temp[0] = '\0';
 704:modem.c       ****                 strcpy(temp,s_down_level_sensor); // this temp may not actually be used
 705:modem.c       ****                 extract_string(temp,"Freq=","\r",s_down_level_sensor); // grab level app frequency
 706:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &down_level_freq)==1){
 707:modem.c       ****                     updatable_parameters.Downstream_Level_Sensor_freq = down_level_freq;
 708:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_
 709:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Downstream_Level_Sensor frequency changed to: %d\
 710:modem.c       ****                 } 
 711:modem.c       ****                 else{
 712:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Downstream_Level_Sensor freque
 713:modem.c       ****                 }
 714:modem.c       ****             }
 715:modem.c       ****             else{
 716:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Downstream_Level_Sensor frequency value indicated."
 717:modem.c       ****             }
 718:modem.c       ****         }
 719:modem.c       ****         */
 720:modem.c       ****         /*
 721:modem.c       ****         if(valve_enabled){ 
 722:modem.c       ****             if (strstr(s_valve,"Freq=") !=NULL){
 723:modem.c       ****                 temp[0] = '\0';
 724:modem.c       ****                 strcpy(temp,s_valve);
 725:modem.c       ****                 extract_string(temp,"Freq=","\r",s_valve); // grab valve frequency
 726:modem.c       ****                 if(sscanf(s_valve, "%d", &valve_freq)==1){
 727:modem.c       ****                     updatable_parameters.Valve_freq = valve_freq;
 728:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Valve_freq,ALARM_
 729:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Valve frequency changed to: %d\r\n", valve_freq);
 730:modem.c       ****                 } 
 731:modem.c       ****                 else{
 732:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Valve frequency value.");
 733:modem.c       ****                 }
 734:modem.c       ****             }
 735:modem.c       ****             else{
 736:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Valve frequency value indicated.");
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 59


 737:modem.c       ****             }
 738:modem.c       ****         }
 739:modem.c       ****         */
 740:modem.c       ****         if(autosampler_enabled){ 
 2350              		.loc 1 740 0
 2351 04c2 3B4B     		ldr	r3, .L126+60
 2352 04c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2353 04c6 002B     		cmp	r3, #0
 2354 04c8 4ED0     		beq	.L123
 741:modem.c       ****             if (strstr(s_autosampler,"Freq=") !=NULL){
 2355              		.loc 1 741 0
 2356 04ca 07F5AC73 		add	r3, r7, #344
 2357 04ce 2C49     		ldr	r1, .L126+12
 2358 04d0 1846     		mov	r0, r3
 2359 04d2 FFF7FEFF 		bl	strstr
 2360 04d6 0346     		mov	r3, r0
 2361 04d8 002B     		cmp	r3, #0
 2362 04da 41D0     		beq	.L120
 742:modem.c       ****                 temp[0] = '\0';
 2363              		.loc 1 742 0
 2364 04dc 07F10C03 		add	r3, r7, #12
 2365 04e0 0022     		movs	r2, #0
 2366 04e2 1A70     		strb	r2, [r3]
 743:modem.c       ****                 strcpy(temp,s_autosampler); // this temp may not actually be used
 2367              		.loc 1 743 0
 2368 04e4 07F5AC72 		add	r2, r7, #344
 2369 04e8 07F10C03 		add	r3, r7, #12
 2370 04ec 1146     		mov	r1, r2
 2371 04ee 1846     		mov	r0, r3
 2372 04f0 FFF7FEFF 		bl	strcpy
 744:modem.c       ****                 extract_string(temp,"Freq=","\r",s_autosampler); // grab autosampler app frequency
 2373              		.loc 1 744 0
 2374 04f4 07F5AC73 		add	r3, r7, #344
 2375 04f8 07F10C00 		add	r0, r7, #12
 2376 04fc 214A     		ldr	r2, .L126+16
 2377 04fe 2049     		ldr	r1, .L126+12
 2378 0500 FFF7FEFF 		bl	extract_string
 745:modem.c       ****                 if(sscanf(s_autosampler, "%d", &autosampler_freq)==1){
 2379              		.loc 1 745 0
 2380 0504 07F17002 		add	r2, r7, #112
 2381 0508 07F5AC73 		add	r3, r7, #344
 2382 050c 1E49     		ldr	r1, .L126+20
 2383 050e 1846     		mov	r0, r3
 2384 0510 FFF7FEFF 		bl	sscanf
 2385 0514 0346     		mov	r3, r0
 2386 0516 012B     		cmp	r3, #1
 2387 0518 1DD1     		bne	.L121
 746:modem.c       ****                     updatable_parameters.Autosampler_freq = autosampler_freq;
 2388              		.loc 1 746 0
 2389 051a 07F17003 		add	r3, r7, #112
 2390 051e 1B68     		ldr	r3, [r3]
 2391 0520 DAB2     		uxtb	r2, r3
 2392 0522 154B     		ldr	r3, .L126+4
 2393 0524 5A72     		strb	r2, [r3, #9]
 747:modem.c       ****                     alarmAutosampler = CreateAlarm(updatable_parameters.Autosampler_freq,ALARM_TYPE
 2394              		.loc 1 747 0
 2395 0526 144B     		ldr	r3, .L126+4
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 60


 2396 0528 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2397 052a 99B2     		uxth	r1, r3
 2398 052c 214C     		ldr	r4, .L126+64
 2399 052e 3846     		mov	r0, r7
 2400 0530 0723     		movs	r3, #7
 2401 0532 0122     		movs	r2, #1
 2402 0534 FFF7FEFF 		bl	CreateAlarm
 2403 0538 3A46     		mov	r2, r7
 2404 053a 2346     		mov	r3, r4
 2405 053c 1168     		ldr	r1, [r2]	@ unaligned
 2406 053e 1960     		str	r1, [r3]	@ unaligned
 2407 0540 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2408 0542 9A80     		strh	r2, [r3, #4]	@ unaligned
 748:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Autosampler frequency changed to: %d\r\n", autosa
 2409              		.loc 1 748 0
 2410 0544 07F17003 		add	r3, r7, #112
 2411 0548 1B68     		ldr	r3, [r3]
 2412 054a 1A46     		mov	r2, r3
 2413 054c 1A49     		ldr	r1, .L126+68
 2414 054e 0020     		movs	r0, #0
 2415 0550 FFF7FEFF 		bl	printNotif
 2416              	.LBE9:
 749:modem.c       ****                 } 
 750:modem.c       ****                 else{
 751:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Autosampler frequency value.")
 752:modem.c       ****                 }
 753:modem.c       ****             }
 754:modem.c       ****             else{
 755:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Autosampler frequency value indicated.");
 756:modem.c       ****             }
 757:modem.c       ****         }
 758:modem.c       ****         /* app add template
 759:modem.c       ****         if(<name>_enabled){ 
 760:modem.c       ****             if (strstr(s_<name>,"Freq=") !=NULL){
 761:modem.c       ****                 temp[0] = '\0';
 762:modem.c       ****                 strcpy(temp,s_<name>); // this temp may not actually be used
 763:modem.c       ****                 extract_string(temp,"Freq=","\r",s_<name>); // grab <name> app frequency
 764:modem.c       ****                 if(sscanf(s_<name>, "%d", &<name>_freq)==1){
 765:modem.c       ****                     updatable_parameters.Autosampler_freq = <name>_freq;
 766:modem.c       ****                     alarm<Name> = CreateAlarm(updatable_parameters.<Name>_freq,ALARM_TYPE_MINUTE,AL
 767:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "<Name> frequency changed to: %d\r\n", <name>_freq
 768:modem.c       ****                 } 
 769:modem.c       ****                 else{
 770:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new <Name>frequency value.");
 771:modem.c       ****                 }
 772:modem.c       ****             }
 773:modem.c       ****             else{
 774:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No <Name> frequency value indicated.");
 775:modem.c       ****             }
 776:modem.c       ****         }
 777:modem.c       ****         */
 778:modem.c       ****     
 779:modem.c       ****     }   
 780:modem.c       ****     //---------------------------------------------------------------------------------------------
 781:modem.c       **** }
 2417              		.loc 1 781 0
 2418 0554 08E0     		b	.L123
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 61


 2419              	.L121:
 2420              	.LBB10:
 751:modem.c       ****                 }
 2421              		.loc 1 751 0
 2422 0556 1949     		ldr	r1, .L126+72
 2423 0558 0220     		movs	r0, #2
 2424 055a FFF7FEFF 		bl	printNotif
 2425              	.LBE10:
 2426              		.loc 1 781 0
 2427 055e 03E0     		b	.L123
 2428              	.L120:
 2429              	.LBB11:
 755:modem.c       ****             }
 2430              		.loc 1 755 0
 2431 0560 1749     		ldr	r1, .L126+76
 2432 0562 0220     		movs	r0, #2
 2433 0564 FFF7FEFF 		bl	printNotif
 2434              	.L123:
 2435              	.LBE11:
 2436              		.loc 1 781 0
 2437 0568 00BF     		nop
 2438 056a 07F56377 		add	r7, r7, #908
 2439              		.cfi_def_cfa_offset 12
 2440 056e BD46     		mov	sp, r7
 2441              		.cfi_def_cfa_register 13
 2442              		@ sp needed
 2443 0570 90BD     		pop	{r4, r7, pc}
 2444              	.L127:
 2445 0572 00BF     		.align	2
 2446              	.L126:
 2447 0574 20050000 		.word	.LC55
 2448 0578 00000000 		.word	updatable_parameters
 2449 057c 00000000 		.word	App_LED_enabled
 2450 0580 50050000 		.word	.LC56
 2451 0584 88020000 		.word	.LC21
 2452 0588 D4030000 		.word	.LC45
 2453 058c 00000000 		.word	alarmAppLED
 2454 0590 58050000 		.word	.LC57
 2455 0594 7C050000 		.word	.LC58
 2456 0598 AC050000 		.word	.LC59
 2457 059c 00000000 		.word	level_sensor_enabled
 2458 05a0 00000000 		.word	alarmLevelSensor
 2459 05a4 D4050000 		.word	.LC60
 2460 05a8 FC050000 		.word	.LC61
 2461 05ac 30060000 		.word	.LC62
 2462 05b0 00000000 		.word	autosampler_enabled
 2463 05b4 00000000 		.word	alarmAutosampler
 2464 05b8 5C060000 		.word	.LC63
 2465 05bc 84060000 		.word	.LC64
 2466 05c0 B8060000 		.word	.LC65
 2467              		.cfi_endproc
 2468              	.LFE81:
 2469              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2470              		.section	.rodata
 2471 06e2 0000     		.align	2
 2472              	.LC66:
 2473 06e4 41542343 		.ascii	"AT#CGMM\015\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 62


 2473      474D4D0D 
 2473      00
 2474 06ed 000000   		.align	2
 2475              	.LC67:
 2476 06f0 4D6F6465 		.ascii	"Modem Model: %s\000"
 2476      6D204D6F 
 2476      64656C3A 
 2476      20257300 
 2477              		.align	2
 2478              	.LC68:
 2479 0700 41542343 		.ascii	"AT#CCID\015\000"
 2479      4349440D 
 2479      00
 2480 0709 000000   		.align	2
 2481              	.LC69:
 2482 070c 53494D20 		.ascii	"SIM ID: %s\000"
 2482      49443A20 
 2482      257300
 2483 0717 00       		.align	2
 2484              	.LC70:
 2485 0718 41542B43 		.ascii	"AT+CGSN\015\000"
 2485      47534E0D 
 2485      00
 2486 0721 000000   		.align	2
 2487              	.LC71:
 2488 0724 494D4549 		.ascii	"IMEI: %s\000"
 2488      3A202573 
 2488      00
 2489 072d 000000   		.align	2
 2490              	.LC72:
 2491 0730 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2491      4744434F 
 2491      4E543D31 
 2491      2C224950 
 2491      222C2277 
 2492 0759 00       		.ascii	"\000"
 2493 075a 0000     		.align	2
 2494              	.LC73:
 2495 075c 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2495      4744434F 
 2495      4E543D31 
 2495      2C224950 
 2495      222C2273 
 2496              		.align	2
 2497              	.LC74:
 2498 0778 41542B43 		.ascii	"AT+CFUN?\015\000"
 2498      46554E3F 
 2498      0D00
 2499 0782 0000     		.align	2
 2500              	.LC75:
 2501 0784 4346554E 		.ascii	"CFUN: %s\000"
 2501      3A202573 
 2501      00
 2502 078d 000000   		.align	2
 2503              	.LC76:
 2504 0790 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2504      46554E3D 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 63


 2504      310D00
 2505              		.section	.text.modem_configure_settings,"ax",%progbits
 2506              		.align	2
 2507              		.global	modem_configure_settings
 2508              		.thumb
 2509              		.thumb_func
 2510              		.type	modem_configure_settings, %function
 2511              	modem_configure_settings:
 2512              	.LFB82:
 782:modem.c       ****     
 783:modem.c       **** // Configure the modem settings
 784:modem.c       **** void modem_configure_settings(){
 2513              		.loc 1 784 0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 16
 2516              		@ frame_needed = 1, uses_anonymous_args = 0
 2517 0000 80B5     		push	{r7, lr}
 2518              		.cfi_def_cfa_offset 8
 2519              		.cfi_offset 7, -8
 2520              		.cfi_offset 14, -4
 2521 0002 84B0     		sub	sp, sp, #16
 2522              		.cfi_def_cfa_offset 24
 2523 0004 00AF     		add	r7, sp, #0
 2524              		.cfi_def_cfa_register 7
 785:modem.c       ****     
 786:modem.c       ****     // Save/print modem model ID number
 787:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2525              		.loc 1 787 0
 2526 0006 454B     		ldr	r3, .L137
 2527 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2528 000a 002B     		cmp	r3, #0
 2529 000c 13D1     		bne	.L129
 788:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 789:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2530              		.loc 1 789 0
 2531 000e 4FF4FA62 		mov	r2, #2000
 2532 0012 4349     		ldr	r1, .L137+4
 2533 0014 4348     		ldr	r0, .L137+8
 2534 0016 FFF7FEFF 		bl	at_write_command
 2535 001a 0346     		mov	r3, r0
 2536 001c 002B     		cmp	r3, #0
 2537 001e 0AD0     		beq	.L129
 790:modem.c       ****             // Extract modem model ID number string from the UART
 791:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2538              		.loc 1 791 0
 2539 0020 414B     		ldr	r3, .L137+12
 2540 0022 424A     		ldr	r2, .L137+16
 2541 0024 4249     		ldr	r1, .L137+20
 2542 0026 4348     		ldr	r0, .L137+24
 2543 0028 FFF7FEFF 		bl	extract_string
 792:modem.c       ****             // Print modem model ID number
 793:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2544              		.loc 1 793 0
 2545 002c 3E4A     		ldr	r2, .L137+12
 2546 002e 4249     		ldr	r1, .L137+28
 2547 0030 0020     		movs	r0, #0
 2548 0032 FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 64


 2549              	.L129:
 794:modem.c       ****         }
 795:modem.c       ****     }
 796:modem.c       ****     
 797:modem.c       ****    // Save/print SIM-card ID
 798:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2550              		.loc 1 798 0
 2551 0036 394B     		ldr	r3, .L137
 2552 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2553 003a 002B     		cmp	r3, #0
 2554 003c 13D1     		bne	.L130
 799:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 800:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2555              		.loc 1 800 0
 2556 003e 4FF4FA62 		mov	r2, #2000
 2557 0042 3749     		ldr	r1, .L137+4
 2558 0044 3D48     		ldr	r0, .L137+32
 2559 0046 FFF7FEFF 		bl	at_write_command
 2560 004a 0346     		mov	r3, r0
 2561 004c 002B     		cmp	r3, #0
 2562 004e 0AD0     		beq	.L130
 801:modem.c       ****             // Extract SIM-card ID string from the UART
 802:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2563              		.loc 1 802 0
 2564 0050 324B     		ldr	r3, .L137
 2565 0052 364A     		ldr	r2, .L137+16
 2566 0054 3649     		ldr	r1, .L137+20
 2567 0056 3748     		ldr	r0, .L137+24
 2568 0058 FFF7FEFF 		bl	extract_string
 803:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2569              		.loc 1 803 0
 2570 005c 2F4A     		ldr	r2, .L137
 2571 005e 3849     		ldr	r1, .L137+36
 2572 0060 0020     		movs	r0, #0
 2573 0062 FFF7FEFF 		bl	printNotif
 2574              	.L130:
 804:modem.c       ****         }
 805:modem.c       ****    }
 806:modem.c       **** 
 807:modem.c       ****     // Save/print modem IMEI
 808:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2575              		.loc 1 808 0
 2576 0066 2D4B     		ldr	r3, .L137
 2577 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2578 006c 002B     		cmp	r3, #0
 2579 006e 13D1     		bne	.L131
 809:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 810:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2580              		.loc 1 810 0
 2581 0070 4FF4FA62 		mov	r2, #2000
 2582 0074 2A49     		ldr	r1, .L137+4
 2583 0076 3348     		ldr	r0, .L137+40
 2584 0078 FFF7FEFF 		bl	at_write_command
 2585 007c 0346     		mov	r3, r0
 2586 007e 002B     		cmp	r3, #0
 2587 0080 0AD0     		beq	.L131
 811:modem.c       ****             // Extract modem IMEI number string from the UART
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 65


 812:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2588              		.loc 1 812 0
 2589 0082 314B     		ldr	r3, .L137+44
 2590 0084 294A     		ldr	r2, .L137+16
 2591 0086 2A49     		ldr	r1, .L137+20
 2592 0088 2A48     		ldr	r0, .L137+24
 2593 008a FFF7FEFF 		bl	extract_string
 813:modem.c       ****             // Print modem IMEI number
 814:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2594              		.loc 1 814 0
 2595 008e 2E4A     		ldr	r2, .L137+44
 2596 0090 2E49     		ldr	r1, .L137+48
 2597 0092 0020     		movs	r0, #0
 2598 0094 FFF7FEFF 		bl	printNotif
 2599              	.L131:
 815:modem.c       ****         } 
 816:modem.c       ****     }
 817:modem.c       ****     
 818:modem.c       ****     // Configure protocol and cellular end point
 819:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 820:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2600              		.loc 1 820 0
 2601 0098 2D4B     		ldr	r3, .L137+52
 2602 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2603 009c 83F00103 		eor	r3, r3, #1
 2604 00a0 DBB2     		uxtb	r3, r3
 2605 00a2 002B     		cmp	r3, #0
 2606 00a4 06D0     		beq	.L132
 821:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2607              		.loc 1 821 0
 2608 00a6 4FF4FA62 		mov	r2, #2000
 2609 00aa 1D49     		ldr	r1, .L137+4
 2610 00ac 2948     		ldr	r0, .L137+56
 2611 00ae FFF7FEFF 		bl	at_write_command
 2612 00b2 09E0     		b	.L133
 2613              	.L132:
 822:modem.c       ****     
 823:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2614              		.loc 1 823 0
 2615 00b4 264B     		ldr	r3, .L137+52
 2616 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2617 00b8 002B     		cmp	r3, #0
 2618 00ba 05D0     		beq	.L133
 824:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2619              		.loc 1 824 0
 2620 00bc 4FF4FA62 		mov	r2, #2000
 2621 00c0 1749     		ldr	r1, .L137+4
 2622 00c2 2548     		ldr	r0, .L137+60
 2623 00c4 FFF7FEFF 		bl	at_write_command
 2624              	.L133:
 825:modem.c       ****     }
 826:modem.c       ****     
 827:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 828:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 829:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2625              		.loc 1 829 0
 2626 00c8 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 66


 2627 00cc 1449     		ldr	r1, .L137+4
 2628 00ce 2348     		ldr	r0, .L137+64
 2629 00d0 FFF7FEFF 		bl	at_write_command
 2630 00d4 0346     		mov	r3, r0
 2631 00d6 002B     		cmp	r3, #0
 2632 00d8 1BD0     		beq	.L136
 2633              	.LBB12:
 830:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 831:modem.c       ****         CFUN[0] = '\0';
 2634              		.loc 1 831 0
 2635 00da 0023     		movs	r3, #0
 2636 00dc 3B71     		strb	r3, [r7, #4]
 832:modem.c       ****         // Extract UART string recieved from the modem
 833:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2637              		.loc 1 833 0
 2638 00de 3B1D     		adds	r3, r7, #4
 2639 00e0 124A     		ldr	r2, .L137+16
 2640 00e2 1349     		ldr	r1, .L137+20
 2641 00e4 1348     		ldr	r0, .L137+24
 2642 00e6 FFF7FEFF 		bl	extract_string
 834:modem.c       ****         // Print UART string recieved from the modem
 835:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2643              		.loc 1 835 0
 2644 00ea 3B1D     		adds	r3, r7, #4
 2645 00ec 1A46     		mov	r2, r3
 2646 00ee 1C49     		ldr	r1, .L137+68
 2647 00f0 0020     		movs	r0, #0
 2648 00f2 FFF7FEFF 		bl	printNotif
 836:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 837:modem.c       ****         // If it returns NULL, then write another command to the modem
 838:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2649              		.loc 1 838 0
 2650 00f6 3B1D     		adds	r3, r7, #4
 2651 00f8 3121     		movs	r1, #49
 2652 00fa 1846     		mov	r0, r3
 2653 00fc FFF7FEFF 		bl	strchr
 2654 0100 0346     		mov	r3, r0
 2655 0102 002B     		cmp	r3, #0
 2656 0104 05D1     		bne	.L136
 839:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 840:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 841:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2657              		.loc 1 841 0
 2658 0106 4FF4FA62 		mov	r2, #2000
 2659 010a 0549     		ldr	r1, .L137+4
 2660 010c 1548     		ldr	r0, .L137+72
 2661 010e FFF7FEFF 		bl	at_write_command
 2662              	.L136:
 2663              	.LBE12:
 842:modem.c       ****         }
 843:modem.c       ****     }
 844:modem.c       **** 
 845:modem.c       ****     
 846:modem.c       **** }
 2664              		.loc 1 846 0
 2665 0112 00BF     		nop
 2666 0114 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 67


 2667              		.cfi_def_cfa_offset 8
 2668 0116 BD46     		mov	sp, r7
 2669              		.cfi_def_cfa_register 13
 2670              		@ sp needed
 2671 0118 80BD     		pop	{r7, pc}
 2672              	.L138:
 2673 011a 00BF     		.align	2
 2674              	.L137:
 2675 011c 00000000 		.word	modem_info
 2676 0120 00000000 		.word	.LC0
 2677 0124 E4060000 		.word	.LC66
 2678 0128 14000000 		.word	modem_info+20
 2679 012c 88020000 		.word	.LC21
 2680 0130 8C020000 		.word	.LC22
 2681 0134 00000000 		.word	uart_received_string
 2682 0138 F0060000 		.word	.LC67
 2683 013c 00070000 		.word	.LC68
 2684 0140 0C070000 		.word	.LC69
 2685 0144 18070000 		.word	.LC70
 2686 0148 28000000 		.word	modem_info+40
 2687 014c 24070000 		.word	.LC71
 2688 0150 00000000 		.word	updatable_parameters
 2689 0154 30070000 		.word	.LC72
 2690 0158 5C070000 		.word	.LC73
 2691 015c 78070000 		.word	.LC74
 2692 0160 84070000 		.word	.LC75
 2693 0164 90070000 		.word	.LC76
 2694              		.cfi_endproc
 2695              	.LFE82:
 2696              		.size	modem_configure_settings, .-modem_configure_settings
 2697              		.section	.rodata
 2698 079b 00       		.align	2
 2699              	.LC77:
 2700 079c 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2700      6D206E6F 
 2700      74207265 
 2700      61647920 
 2700      746F2067 
 2701 07cf 6B2E00   		.ascii	"k.\000"
 2702 07d2 0000     		.align	2
 2703              	.LC78:
 2704 07d4 41542B43 		.ascii	"AT+CCLK?\015\000"
 2704      434C4B3F 
 2704      0D00
 2705 07de 0000     		.align	2
 2706              	.LC79:
 2707 07e0 220D00   		.ascii	"\"\015\000"
 2708 07e3 00       		.align	2
 2709              	.LC80:
 2710 07e4 3A202200 		.ascii	": \"\000"
 2711              		.align	2
 2712              	.LC81:
 2713 07e8 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2713      642F2564 
 2713      2C25643A 
 2713      25643A25 
 2713      642D2564 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 68


 2714 07fd 000000   		.align	2
 2715              	.LC82:
 2716 0800 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2716      642F2564 
 2716      2C25643A 
 2716      25643A25 
 2716      642B2564 
 2717 0815 000000   		.align	2
 2718              	.LC83:
 2719 0818 436F756C 		.ascii	"Could not parse modem time.\000"
 2719      64206E6F 
 2719      74207061 
 2719      72736520 
 2719      6D6F6465 
 2720              		.section	.text.modem_get_network_time,"ax",%progbits
 2721              		.align	2
 2722              		.global	modem_get_network_time
 2723              		.thumb
 2724              		.thumb_func
 2725              		.type	modem_get_network_time, %function
 2726              	modem_get_network_time:
 2727              	.LFB83:
 847:modem.c       **** 
 848:modem.c       **** //returns 0 if modem can't get time
 849:modem.c       **** long modem_get_network_time(){
 2728              		.loc 1 849 0
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 104
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732 0000 80B5     		push	{r7, lr}
 2733              		.cfi_def_cfa_offset 8
 2734              		.cfi_offset 7, -8
 2735              		.cfi_offset 14, -4
 2736 0002 A0B0     		sub	sp, sp, #128
 2737              		.cfi_def_cfa_offset 136
 2738 0004 06AF     		add	r7, sp, #24
 2739              		.cfi_def_cfa 7, 112
 850:modem.c       ****     
 851:modem.c       ****     //modem reposen format (careful to include the quotes "")
 852:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 853:modem.c       ****     //ex: 14:48 GMT
 854:modem.c       **** 
 855:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 856:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2740              		.loc 1 856 0
 2741 0006 444B     		ldr	r3, .L146
 2742 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2743 000a 042B     		cmp	r3, #4
 2744 000c 05D0     		beq	.L140
 857:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2745              		.loc 1 857 0
 2746 000e 4349     		ldr	r1, .L146+4
 2747 0010 0220     		movs	r0, #2
 2748 0012 FFF7FEFF 		bl	printNotif
 858:modem.c       ****         return 0;   
 2749              		.loc 1 858 0
 2750 0016 0023     		movs	r3, #0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 69


 2751 0018 7AE0     		b	.L141
 2752              	.L140:
 859:modem.c       ****     }
 860:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2753              		.loc 1 860 0
 2754 001a 0023     		movs	r3, #0
 2755 001c 7B66     		str	r3, [r7, #100]
 861:modem.c       ****     
 862:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 863:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2756              		.loc 1 863 0
 2757 001e 4FF4FA62 		mov	r2, #2000
 2758 0022 3F49     		ldr	r1, .L146+8
 2759 0024 3F48     		ldr	r0, .L146+12
 2760 0026 FFF7FEFF 		bl	at_write_command
 2761 002a 0346     		mov	r3, r0
 2762 002c 002B     		cmp	r3, #0
 2763 002e 6ED0     		beq	.L142
 2764              	.LBB13:
 864:modem.c       ****         // need to set this to /0
 865:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 866:modem.c       ****         network_time[0] = '\0';
 2765              		.loc 1 866 0
 2766 0030 0023     		movs	r3, #0
 2767 0032 87F84430 		strb	r3, [r7, #68]
 867:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 868:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2768              		.loc 1 868 0
 2769 0036 07F14403 		add	r3, r7, #68
 2770 003a 3B4A     		ldr	r2, .L146+16
 2771 003c 3B49     		ldr	r1, .L146+20
 2772 003e 3C48     		ldr	r0, .L146+24
 2773 0040 FFF7FEFF 		bl	extract_string
 869:modem.c       ****         
 870:modem.c       ****         ///////////////////  
 871:modem.c       ****         struct tm t; // Creates variable t of struct tm
 872:modem.c       ****         
 873:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 874:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2774              		.loc 1 874 0
 2775 0044 0023     		movs	r3, #0
 2776 0046 BB62     		str	r3, [r7, #40]
 875:modem.c       ****       
 876:modem.c       ****         // Determines the GMT offset 
 877:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 878:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 879:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2777              		.loc 1 879 0
 2778 0048 07F13C01 		add	r1, r7, #60
 2779 004c 07F14002 		add	r2, r7, #64
 2780 0050 07F14400 		add	r0, r7, #68
 2781 0054 07F12803 		add	r3, r7, #40
 2782 0058 0493     		str	r3, [sp, #16]
 2783 005a 07F12C03 		add	r3, r7, #44
 2784 005e 0393     		str	r3, [sp, #12]
 2785 0060 07F13003 		add	r3, r7, #48
 2786 0064 0293     		str	r3, [sp, #8]
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 70


 2787 0066 07F13403 		add	r3, r7, #52
 2788 006a 0193     		str	r3, [sp, #4]
 2789 006c 07F13803 		add	r3, r7, #56
 2790 0070 0093     		str	r3, [sp]
 2791 0072 0B46     		mov	r3, r1
 2792 0074 2F49     		ldr	r1, .L146+28
 2793 0076 FFF7FEFF 		bl	sscanf
 2794 007a 0346     		mov	r3, r0
 2795 007c 072B     		cmp	r3, #7
 2796 007e 06D1     		bne	.L143
 880:modem.c       ****             gmt_offset = gmt_offset*(900);
 2797              		.loc 1 880 0
 2798 0080 BB6A     		ldr	r3, [r7, #40]
 2799 0082 4FF46172 		mov	r2, #900
 2800 0086 02FB03F3 		mul	r3, r2, r3
 2801 008a BB62     		str	r3, [r7, #40]
 2802 008c 27E0     		b	.L144
 2803              	.L143:
 881:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2804              		.loc 1 881 0
 2805 008e 07F13C01 		add	r1, r7, #60
 2806 0092 07F14002 		add	r2, r7, #64
 2807 0096 07F14400 		add	r0, r7, #68
 2808 009a 07F12803 		add	r3, r7, #40
 2809 009e 0493     		str	r3, [sp, #16]
 2810 00a0 07F12C03 		add	r3, r7, #44
 2811 00a4 0393     		str	r3, [sp, #12]
 2812 00a6 07F13003 		add	r3, r7, #48
 2813 00aa 0293     		str	r3, [sp, #8]
 2814 00ac 07F13403 		add	r3, r7, #52
 2815 00b0 0193     		str	r3, [sp, #4]
 2816 00b2 07F13803 		add	r3, r7, #56
 2817 00b6 0093     		str	r3, [sp]
 2818 00b8 0B46     		mov	r3, r1
 2819 00ba 1F49     		ldr	r1, .L146+32
 2820 00bc FFF7FEFF 		bl	sscanf
 2821 00c0 0346     		mov	r3, r0
 2822 00c2 072B     		cmp	r3, #7
 2823 00c4 05D1     		bne	.L145
 882:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2824              		.loc 1 882 0
 2825 00c6 BB6A     		ldr	r3, [r7, #40]
 2826 00c8 1C4A     		ldr	r2, .L146+36
 2827 00ca 02FB03F3 		mul	r3, r2, r3
 2828 00ce BB62     		str	r3, [r7, #40]
 2829 00d0 05E0     		b	.L144
 2830              	.L145:
 883:modem.c       ****         }else{
 884:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2831              		.loc 1 884 0
 2832 00d2 1B49     		ldr	r1, .L146+40
 2833 00d4 0220     		movs	r0, #2
 2834 00d6 FFF7FEFF 		bl	printNotif
 885:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2835              		.loc 1 885 0
 2836 00da 0023     		movs	r3, #0
 2837 00dc 18E0     		b	.L141
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 71


 2838              	.L144:
 886:modem.c       ****         }
 887:modem.c       ****         
 888:modem.c       ****         // Sets each variable to the correct time 
 889:modem.c       ****         t.tm_sec = second;
 2839              		.loc 1 889 0
 2840 00de FB6A     		ldr	r3, [r7, #44]
 2841 00e0 7B60     		str	r3, [r7, #4]
 890:modem.c       ****         t.tm_min = minute;
 2842              		.loc 1 890 0
 2843 00e2 3B6B     		ldr	r3, [r7, #48]
 2844 00e4 BB60     		str	r3, [r7, #8]
 891:modem.c       ****         t.tm_hour = hour;
 2845              		.loc 1 891 0
 2846 00e6 7B6B     		ldr	r3, [r7, #52]
 2847 00e8 FB60     		str	r3, [r7, #12]
 892:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2848              		.loc 1 892 0
 2849 00ea 3B6C     		ldr	r3, [r7, #64]
 2850 00ec 6433     		adds	r3, r3, #100
 2851 00ee BB61     		str	r3, [r7, #24]
 893:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2852              		.loc 1 893 0
 2853 00f0 FB6B     		ldr	r3, [r7, #60]
 2854 00f2 013B     		subs	r3, r3, #1
 2855 00f4 7B61     		str	r3, [r7, #20]
 894:modem.c       ****         t.tm_mday = day;           // Day of the month
 2856              		.loc 1 894 0
 2857 00f6 BB6B     		ldr	r3, [r7, #56]
 2858 00f8 3B61     		str	r3, [r7, #16]
 895:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2859              		.loc 1 895 0
 2860 00fa 0023     		movs	r3, #0
 2861 00fc 7B62     		str	r3, [r7, #36]
 896:modem.c       ****     
 897:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 898:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 899:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2862              		.loc 1 899 0
 2863 00fe 3B1D     		adds	r3, r7, #4
 2864 0100 1846     		mov	r0, r3
 2865 0102 FFF7FEFF 		bl	mktime
 2866 0106 0246     		mov	r2, r0
 2867 0108 BB6A     		ldr	r3, [r7, #40]
 2868 010a 1344     		add	r3, r3, r2
 2869 010c 7B66     		str	r3, [r7, #100]
 2870              	.L142:
 2871              	.LBE13:
 900:modem.c       ****     }
 901:modem.c       ****     
 902:modem.c       ****     return epoch_time;
 2872              		.loc 1 902 0
 2873 010e 7B6E     		ldr	r3, [r7, #100]
 2874              	.L141:
 903:modem.c       **** }
 2875              		.loc 1 903 0
 2876 0110 1846     		mov	r0, r3
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 72


 2877 0112 6837     		adds	r7, r7, #104
 2878              		.cfi_def_cfa_offset 8
 2879 0114 BD46     		mov	sp, r7
 2880              		.cfi_def_cfa_register 13
 2881              		@ sp needed
 2882 0116 80BD     		pop	{r7, pc}
 2883              	.L147:
 2884              		.align	2
 2885              	.L146:
 2886 0118 00000000 		.word	modem_state
 2887 011c 9C070000 		.word	.LC77
 2888 0120 00000000 		.word	.LC0
 2889 0124 D4070000 		.word	.LC78
 2890 0128 E0070000 		.word	.LC79
 2891 012c E4070000 		.word	.LC80
 2892 0130 00000000 		.word	uart_received_string
 2893 0134 E8070000 		.word	.LC81
 2894 0138 00080000 		.word	.LC82
 2895 013c 7CFCFFFF 		.word	-900
 2896 0140 18080000 		.word	.LC83
 2897              		.cfi_endproc
 2898              	.LFE83:
 2899              		.size	modem_get_network_time, .-modem_get_network_time
 2900              		.section	.text.modem_get_state,"ax",%progbits
 2901              		.align	2
 2902              		.global	modem_get_state
 2903              		.thumb
 2904              		.thumb_func
 2905              		.type	modem_get_state, %function
 2906              	modem_get_state:
 2907              	.LFB84:
 904:modem.c       **** 
 905:modem.c       **** // Get the modem state
 906:modem.c       **** uint8 modem_get_state(){
 2908              		.loc 1 906 0
 2909              		.cfi_startproc
 2910              		@ args = 0, pretend = 0, frame = 0
 2911              		@ frame_needed = 1, uses_anonymous_args = 0
 2912              		@ link register save eliminated.
 2913 0000 80B4     		push	{r7}
 2914              		.cfi_def_cfa_offset 4
 2915              		.cfi_offset 7, -4
 2916 0002 00AF     		add	r7, sp, #0
 2917              		.cfi_def_cfa_register 7
 907:modem.c       ****     return modem_state;
 2918              		.loc 1 907 0
 2919 0004 024B     		ldr	r3, .L150
 2920 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 908:modem.c       **** }
 2921              		.loc 1 908 0
 2922 0008 1846     		mov	r0, r3
 2923 000a BD46     		mov	sp, r7
 2924              		.cfi_def_cfa_register 13
 2925              		@ sp needed
 2926 000c 80BC     		pop	{r7}
 2927              		.cfi_restore 7
 2928              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 73


 2929 000e 7047     		bx	lr
 2930              	.L151:
 2931              		.align	2
 2932              	.L150:
 2933 0010 00000000 		.word	modem_state
 2934              		.cfi_endproc
 2935              	.LFE84:
 2936              		.size	modem_get_state, .-modem_get_state
 2937              		.section	.text.modem_sleep,"ax",%progbits
 2938              		.align	2
 2939              		.global	modem_sleep
 2940              		.thumb
 2941              		.thumb_func
 2942              		.type	modem_sleep, %function
 2943              	modem_sleep:
 2944              	.LFB85:
 909:modem.c       **** 
 910:modem.c       **** // Set modem to sleep
 911:modem.c       **** void modem_sleep(){
 2945              		.loc 1 911 0
 2946              		.cfi_startproc
 2947              		@ args = 0, pretend = 0, frame = 0
 2948              		@ frame_needed = 1, uses_anonymous_args = 0
 2949 0000 80B5     		push	{r7, lr}
 2950              		.cfi_def_cfa_offset 8
 2951              		.cfi_offset 7, -8
 2952              		.cfi_offset 14, -4
 2953 0002 00AF     		add	r7, sp, #0
 2954              		.cfi_def_cfa_register 7
 912:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 913:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2955              		.loc 1 913 0
 2956 0004 FFF7FEFF 		bl	modem_get_state
 2957 0008 0346     		mov	r3, r0
 2958 000a 002B     		cmp	r3, #0
 2959 000c 03D0     		beq	.L154
 914:modem.c       **** 
 915:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2960              		.loc 1 915 0
 2961 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 916:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2962              		.loc 1 916 0
 2963 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2964              	.L154:
 917:modem.c       ****         
 918:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 919:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 920:modem.c       ****      }
 921:modem.c       **** }
 2965              		.loc 1 921 0
 2966 0016 00BF     		nop
 2967 0018 80BD     		pop	{r7, pc}
 2968              		.cfi_endproc
 2969              	.LFE85:
 2970              		.size	modem_sleep, .-modem_sleep
 2971 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2972              		.align	2
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 74


 2973              		.global	modem_wakeup
 2974              		.thumb
 2975              		.thumb_func
 2976              		.type	modem_wakeup, %function
 2977              	modem_wakeup:
 2978              	.LFB86:
 922:modem.c       **** 
 923:modem.c       **** // Wakeup the modem
 924:modem.c       **** void modem_wakeup(){
 2979              		.loc 1 924 0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 1, uses_anonymous_args = 0
 2983 0000 80B5     		push	{r7, lr}
 2984              		.cfi_def_cfa_offset 8
 2985              		.cfi_offset 7, -8
 2986              		.cfi_offset 14, -4
 2987 0002 00AF     		add	r7, sp, #0
 2988              		.cfi_def_cfa_register 7
 925:modem.c       ****     // If modem state is not off then wake it up
 926:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2989              		.loc 1 926 0
 2990 0004 FFF7FEFF 		bl	modem_get_state
 2991 0008 0346     		mov	r3, r0
 2992 000a 002B     		cmp	r3, #0
 2993 000c 0BD0     		beq	.L157
 927:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2994              		.loc 1 927 0
 2995 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 928:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 929:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 930:modem.c       ****         UART_Telit_Wakeup();
 2996              		.loc 1 930 0
 2997 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 931:modem.c       ****         // Remove the need for this pin itterupt
 932:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 933:modem.c       ****         
 934:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 935:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2998              		.loc 1 935 0
 2999 0016 FFF7FEFF 		bl	modem_get_state
 3000 001a 0346     		mov	r3, r0
 3001 001c 032B     		cmp	r3, #3
 3002 001e 02D1     		bne	.L157
 936:modem.c       ****             CyDelay(100u);
 3003              		.loc 1 936 0
 3004 0020 6420     		movs	r0, #100
 3005 0022 FFF7FEFF 		bl	CyDelay
 3006              	.L157:
 937:modem.c       ****         }
 938:modem.c       ****      }
 939:modem.c       **** }
 3007              		.loc 1 939 0
 3008 0026 00BF     		nop
 3009 0028 80BD     		pop	{r7, pc}
 3010              		.cfi_endproc
 3011              	.LFE86:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 75


 3012              		.size	modem_wakeup, .-modem_wakeup
 3013 002a 00BF     		.section	.rodata
 3014              		.align	2
 3015              	.LC84:
 3016 0834 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 3016      50494F3D 
 3016      352C312C 
 3016      312C300D 
 3016      00
 3017 0845 000000   		.align	2
 3018              	.LC85:
 3019 0848 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 3019      55504C53 
 3019      45433D31 
 3019      0D00
 3020 0856 0000     		.align	2
 3021              	.LC86:
 3022 0858 41542453 		.ascii	"AT$SUPLV=2\015\000"
 3022      55504C56 
 3022      3D320D00 
 3023              		.align	2
 3024              	.LC87:
 3025 0864 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 3025      47505345 
 3025      4E3D310D 
 3025      00
 3026 0871 000000   		.align	2
 3027              	.LC88:
 3028 0874 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 3028      4C503D31 
 3028      2C227375 
 3028      706C2E67 
 3028      6F6F676C 
 3029 0895 000000   		.align	2
 3030              	.LC89:
 3031 0898 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 3031      47414354 
 3031      3D312C30 
 3031      0D0A00
 3032 08a7 00       		.align	2
 3033              	.LC90:
 3034 08a8 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 3034      43534C4B 
 3034      3D312C31 
 3034      0D00
 3035 08b6 0000     		.align	2
 3036              	.LC91:
 3037 08b8 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 3037      5053534C 
 3037      53523D31 
 3037      2C312C2C 
 3037      2C2C2C32 
 3038 08ce 0000     		.align	2
 3039              	.LC92:
 3040 08d0 4E00     		.ascii	"N\000"
 3041 08d2 0000     		.align	2
 3042              	.LC93:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 76


 3043 08d4 41542447 		.ascii	"AT$GPSACP\015\000"
 3043      50534143 
 3043      500D00
 3044 08df 00       		.align	2
 3045              	.LC94:
 3046 08e0 24475053 		.ascii	"$GPSACP: \000"
 3046      4143503A 
 3046      2000
 3047 08ea 0000     		.align	2
 3048              	.LC95:
 3049 08ec 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 3049      4143503A 
 3049      20252A66 
 3049      2C25664E 
 3049      2C256657 
 3050              		.global	__aeabi_fdiv
 3051              		.global	__aeabi_f2d
 3052              		.global	__aeabi_ddiv
 3053              		.global	__aeabi_dadd
 3054              		.global	__aeabi_d2f
 3055              		.align	2
 3056              	.LC96:
 3057 090c 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 3057      50494F3D 
 3057      352C302C 
 3057      312C300D 
 3057      00
 3058 091d 000000   		.align	2
 3059              	.LC97:
 3060 0920 41542447 		.ascii	"AT$GPSR=0\015\000"
 3060      5053523D 
 3060      300D00
 3061 092b 00       		.align	2
 3062              	.LC98:
 3063 092c 54696D65 		.ascii	"Time to lock GPS: %d\000"
 3063      20746F20 
 3063      6C6F636B 
 3063      20475053 
 3063      3A202564 
 3064              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 3065              		.align	2
 3066              		.global	modem_get_gps_coordinates
 3067              		.thumb
 3068              		.thumb_func
 3069              		.type	modem_get_gps_coordinates, %function
 3070              	modem_get_gps_coordinates:
 3071              	.LFB87:
 940:modem.c       **** 
 941:modem.c       ****     
 942:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 943:modem.c       **** gps_t modem_get_gps_coordinates(){
 3072              		.loc 1 943 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 56
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 0000 B0B5     		push	{r4, r5, r7, lr}
 3077              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 77


 3078              		.cfi_offset 4, -16
 3079              		.cfi_offset 5, -12
 3080              		.cfi_offset 7, -8
 3081              		.cfi_offset 14, -4
 3082 0002 90B0     		sub	sp, sp, #64
 3083              		.cfi_def_cfa_offset 80
 3084 0004 02AF     		add	r7, sp, #8
 3085              		.cfi_def_cfa 7, 72
 3086 0006 7860     		str	r0, [r7, #4]
 944:modem.c       ****     gps_t gps;
 945:modem.c       ****     gps.altitude = 0;
 3087              		.loc 1 945 0
 3088 0008 4FF00003 		mov	r3, #0
 3089 000c FB61     		str	r3, [r7, #28]	@ float
 946:modem.c       ****     gps.longitude = 0;
 3090              		.loc 1 946 0
 3091 000e 4FF00003 		mov	r3, #0
 3092 0012 BB61     		str	r3, [r7, #24]	@ float
 947:modem.c       ****     gps.latitude = 0;
 3093              		.loc 1 947 0
 3094 0014 4FF00003 		mov	r3, #0
 3095 0018 7B61     		str	r3, [r7, #20]	@ float
 948:modem.c       ****     gps.time_to_lock =0;
 3096              		.loc 1 948 0
 3097 001a 0023     		movs	r3, #0
 3098 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 949:modem.c       ****     gps.valid = 0;
 3099              		.loc 1 949 0
 3100 001e 0023     		movs	r3, #0
 3101 0020 87F82230 		strb	r3, [r7, #34]
 950:modem.c       ****     
 951:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 952:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 3102              		.loc 1 952 0
 3103 0024 7F4B     		ldr	r3, .L168
 3104 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3105 0028 042B     		cmp	r3, #4
 3106 002a 07D0     		beq	.L159
 953:modem.c       ****         return gps;//where valid = 0
 3107              		.loc 1 953 0
 3108 002c 7B68     		ldr	r3, [r7, #4]
 3109 002e 1C46     		mov	r4, r3
 3110 0030 07F11403 		add	r3, r7, #20
 3111 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3112 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3113 003a EFE0     		b	.L158
 3114              	.L159:
 954:modem.c       ****     }
 955:modem.c       ****     
 956:modem.c       ****     long lock_time = getTimeStamp();
 3115              		.loc 1 956 0
 3116 003c FFF7FEFF 		bl	getTimeStamp
 3117 0040 3863     		str	r0, [r7, #48]
 957:modem.c       ****     
 958:modem.c       ****     // Enable this for the LTER module
 959:modem.c       ****     // Enable GPS Low-Dropout Regulator
 960:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 78


 3118              		.loc 1 960 0
 3119 0042 4FF4FA62 		mov	r2, #2000
 3120 0046 7849     		ldr	r1, .L168+4
 3121 0048 7848     		ldr	r0, .L168+8
 3122 004a FFF7FEFF 		bl	at_write_command
 961:modem.c       ****     
 962:modem.c       ****     // Configure SUPL connection params
 963:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 3123              		.loc 1 963 0
 3124 004e 4FF4FA62 		mov	r2, #2000
 3125 0052 7549     		ldr	r1, .L168+4
 3126 0054 7648     		ldr	r0, .L168+12
 3127 0056 FFF7FEFF 		bl	at_write_command
 964:modem.c       ****     
 965:modem.c       ****     // Use SUPL2.0
 966:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 3128              		.loc 1 966 0
 3129 005a 4FF4FA62 		mov	r2, #2000
 3130 005e 7249     		ldr	r1, .L168+4
 3131 0060 7448     		ldr	r0, .L168+16
 3132 0062 FFF7FEFF 		bl	at_write_command
 967:modem.c       ****     
 968:modem.c       ****     // Enable AGPS service
 969:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 3133              		.loc 1 969 0
 3134 0066 4FF4FA62 		mov	r2, #2000
 3135 006a 6F49     		ldr	r1, .L168+4
 3136 006c 7248     		ldr	r0, .L168+20
 3137 006e FFF7FEFF 		bl	at_write_command
 970:modem.c       ****     
 971:modem.c       ****     // Chose SUPL server, use google public service
 972:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 3138              		.loc 1 972 0
 3139 0072 4FF4FA62 		mov	r2, #2000
 3140 0076 6C49     		ldr	r1, .L168+4
 3141 0078 7048     		ldr	r0, .L168+24
 3142 007a FFF7FEFF 		bl	at_write_command
 973:modem.c       ****     
 974:modem.c       ****     //pdp context has to be locked to carrier for this to work
 975:modem.c       ****     
 976:modem.c       ****     // Unlock context since it needs to be used by modem
 977:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 3143              		.loc 1 977 0
 3144 007e 4FF4FA62 		mov	r2, #2000
 3145 0082 6949     		ldr	r1, .L168+4
 3146 0084 6E48     		ldr	r0, .L168+28
 3147 0086 FFF7FEFF 		bl	at_write_command
 978:modem.c       ****     
 979:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 3148              		.loc 1 979 0
 3149 008a 4FF4FA62 		mov	r2, #2000
 3150 008e 6649     		ldr	r1, .L168+4
 3151 0090 6C48     		ldr	r0, .L168+32
 3152 0092 FFF7FEFF 		bl	at_write_command
 980:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 981:modem.c       ****     
 982:modem.c       ****     // Relock the context
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 79


 983:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 3153              		.loc 1 983 0
 3154 0096 42F21072 		movw	r2, #10000
 3155 009a 6349     		ldr	r1, .L168+4
 3156 009c 6A48     		ldr	r0, .L168+36
 3157 009e FFF7FEFF 		bl	at_write_command
 984:modem.c       ****     
 985:modem.c       ****     //start AGPS service
 986:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 3158              		.loc 1 986 0
 3159 00a2 4FF4FA62 		mov	r2, #2000
 3160 00a6 6049     		ldr	r1, .L168+4
 3161 00a8 6848     		ldr	r0, .L168+40
 3162 00aa FFF7FEFF 		bl	at_write_command
 987:modem.c       ****     
 988:modem.c       ****     
 989:modem.c       ****     // Start the AGPS service
 990:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 991:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 992:modem.c       ****     
 993:modem.c       ****     
 994:modem.c       ****  
 995:modem.c       ****     uint8 gps_status = 0;
 3163              		.loc 1 995 0
 3164 00ae 0023     		movs	r3, #0
 3165 00b0 87F82F30 		strb	r3, [r7, #47]
 3166              	.LBB14:
 996:modem.c       ****     for(uint16 i=0;i<200;i++){
 3167              		.loc 1 996 0
 3168 00b4 0023     		movs	r3, #0
 3169 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 3170 00b8 13E0     		b	.L161
 3171              	.L164:
 997:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3172              		.loc 1 997 0
 3173 00ba 4FF4FA62 		mov	r2, #2000
 3174 00be 6449     		ldr	r1, .L168+44
 3175 00c0 6448     		ldr	r0, .L168+48
 3176 00c2 FFF7FEFF 		bl	at_write_command
 3177 00c6 0346     		mov	r3, r0
 3178 00c8 87F82F30 		strb	r3, [r7, #47]
 998:modem.c       ****         if(gps_status){
 3179              		.loc 1 998 0
 3180 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3181 00d0 002B     		cmp	r3, #0
 3182 00d2 0AD1     		bne	.L167
 999:modem.c       ****             break;   
1000:modem.c       ****         }
1001:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 3183              		.loc 1 1001 0 discriminator 2
 3184 00d4 4FF47A70 		mov	r0, #1000
 3185 00d8 FFF7FEFF 		bl	CyDelay
 996:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3186              		.loc 1 996 0 discriminator 2
 3187 00dc FB8E     		ldrh	r3, [r7, #54]
 3188 00de 0133     		adds	r3, r3, #1
 3189 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 80


 3190              	.L161:
 996:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3191              		.loc 1 996 0 is_stmt 0 discriminator 1
 3192 00e2 FB8E     		ldrh	r3, [r7, #54]
 3193 00e4 C72B     		cmp	r3, #199
 3194 00e6 E8D9     		bls	.L164
 3195 00e8 00E0     		b	.L163
 3196              	.L167:
 999:modem.c       ****             break;   
 3197              		.loc 1 999 0 is_stmt 1
 3198 00ea 00BF     		nop
 3199              	.L163:
 3200              	.LBE14:
1002:modem.c       ****     }
1003:modem.c       ****     
1004:modem.c       ****     //parse data here
1005:modem.c       ****     
1006:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
1007:modem.c       ****     float lat;
1008:modem.c       ****     float lon;
1009:modem.c       ****     float alt;
1010:modem.c       ****     
1011:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
1012:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
1013:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 3201              		.loc 1 1013 0
 3202 00ec 5A49     		ldr	r1, .L168+52
 3203 00ee 5B48     		ldr	r0, .L168+56
 3204 00f0 FFF7FEFF 		bl	strstr
 3205 00f4 B862     		str	r0, [r7, #40]
1014:modem.c       ****     // Look in sl for lat, long, alt and save in match 
1015:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
1016:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 3206              		.loc 1 1016 0
 3207 00f6 07F10C01 		add	r1, r7, #12
 3208 00fa 07F11002 		add	r2, r7, #16
 3209 00fe 07F10803 		add	r3, r7, #8
 3210 0102 0093     		str	r3, [sp]
 3211 0104 0B46     		mov	r3, r1
 3212 0106 5649     		ldr	r1, .L168+60
 3213 0108 B86A     		ldr	r0, [r7, #40]
 3214 010a FFF7FEFF 		bl	sscanf
 3215 010e 7862     		str	r0, [r7, #36]
1017:modem.c       ****     if(match >= 3){
 3216              		.loc 1 1017 0
 3217 0110 7B6A     		ldr	r3, [r7, #36]
 3218 0112 022B     		cmp	r3, #2
 3219 0114 60DD     		ble	.L165
1018:modem.c       ****         // Calculate lat and lon
1019:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
1020:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
1021:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 3220              		.loc 1 1021 0
 3221 0116 3B69     		ldr	r3, [r7, #16]	@ float
 3222 0118 5249     		ldr	r1, .L168+64
 3223 011a 1846     		mov	r0, r3
 3224 011c FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 81


 3225 0120 0346     		mov	r3, r0
 3226 0122 1846     		mov	r0, r3
 3227 0124 FFF7FEFF 		bl	floorf
 3228 0128 0346     		mov	r3, r0
 3229 012a 1846     		mov	r0, r3
 3230 012c FFF7FEFF 		bl	__aeabi_f2d
 3231 0130 0446     		mov	r4, r0
 3232 0132 0D46     		mov	r5, r1
 3233 0134 3B69     		ldr	r3, [r7, #16]	@ float
 3234 0136 1846     		mov	r0, r3
 3235 0138 FFF7FEFF 		bl	__aeabi_f2d
 3236 013c 4FF00002 		mov	r2, #0
 3237 0140 494B     		ldr	r3, .L168+68
 3238 0142 FFF7FEFF 		bl	fmod
 3239 0146 4FF00002 		mov	r2, #0
 3240 014a 484B     		ldr	r3, .L168+72
 3241 014c FFF7FEFF 		bl	__aeabi_ddiv
 3242 0150 0246     		mov	r2, r0
 3243 0152 0B46     		mov	r3, r1
 3244 0154 2046     		mov	r0, r4
 3245 0156 2946     		mov	r1, r5
 3246 0158 FFF7FEFF 		bl	__aeabi_dadd
 3247 015c 0346     		mov	r3, r0
 3248 015e 0C46     		mov	r4, r1
 3249 0160 1846     		mov	r0, r3
 3250 0162 2146     		mov	r1, r4
 3251 0164 FFF7FEFF 		bl	__aeabi_d2f
 3252 0168 0346     		mov	r3, r0
 3253 016a 3B61     		str	r3, [r7, #16]	@ float
1022:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 3254              		.loc 1 1022 0
 3255 016c FB68     		ldr	r3, [r7, #12]	@ float
 3256 016e 3D49     		ldr	r1, .L168+64
 3257 0170 1846     		mov	r0, r3
 3258 0172 FFF7FEFF 		bl	__aeabi_fdiv
 3259 0176 0346     		mov	r3, r0
 3260 0178 1846     		mov	r0, r3
 3261 017a FFF7FEFF 		bl	floorf
 3262 017e 0346     		mov	r3, r0
 3263 0180 1846     		mov	r0, r3
 3264 0182 FFF7FEFF 		bl	__aeabi_f2d
 3265 0186 0446     		mov	r4, r0
 3266 0188 0D46     		mov	r5, r1
 3267 018a FB68     		ldr	r3, [r7, #12]	@ float
 3268 018c 1846     		mov	r0, r3
 3269 018e FFF7FEFF 		bl	__aeabi_f2d
 3270 0192 4FF00002 		mov	r2, #0
 3271 0196 344B     		ldr	r3, .L168+68
 3272 0198 FFF7FEFF 		bl	fmod
 3273 019c 4FF00002 		mov	r2, #0
 3274 01a0 324B     		ldr	r3, .L168+72
 3275 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 3276 01a6 0246     		mov	r2, r0
 3277 01a8 0B46     		mov	r3, r1
 3278 01aa 2046     		mov	r0, r4
 3279 01ac 2946     		mov	r1, r5
 3280 01ae FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 82


 3281 01b2 0346     		mov	r3, r0
 3282 01b4 0C46     		mov	r4, r1
 3283 01b6 1846     		mov	r0, r3
 3284 01b8 2146     		mov	r1, r4
 3285 01ba FFF7FEFF 		bl	__aeabi_d2f
 3286 01be 0346     		mov	r3, r0
 3287 01c0 83F00043 		eor	r3, r3, #-2147483648
 3288 01c4 FB60     		str	r3, [r7, #12]	@ float
1023:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3289              		.loc 1 1023 0
 3290 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3291 01c8 FB61     		str	r3, [r7, #28]	@ float
1024:modem.c       ****         gps.latitude = lat;
 3292              		.loc 1 1024 0
 3293 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3294 01cc 7B61     		str	r3, [r7, #20]	@ float
1025:modem.c       ****         gps.longitude = lon;
 3295              		.loc 1 1025 0
 3296 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3297 01d0 BB61     		str	r3, [r7, #24]	@ float
1026:modem.c       ****         gps.valid = 1;
 3298              		.loc 1 1026 0
 3299 01d2 0123     		movs	r3, #1
 3300 01d4 87F82230 		strb	r3, [r7, #34]
 3301              	.L165:
1027:modem.c       ****     }
1028:modem.c       ****     
1029:modem.c       ****     // Disable LDO, just in case
1030:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3302              		.loc 1 1030 0
 3303 01d8 4FF4FA62 		mov	r2, #2000
 3304 01dc 1249     		ldr	r1, .L168+4
 3305 01de 2448     		ldr	r0, .L168+76
 3306 01e0 FFF7FEFF 		bl	at_write_command
1031:modem.c       ****     
1032:modem.c       ****     // Flush modem's GPS data, just in case
1033:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3307              		.loc 1 1033 0
 3308 01e4 4FF4FA62 		mov	r2, #2000
 3309 01e8 0F49     		ldr	r1, .L168+4
 3310 01ea 2248     		ldr	r0, .L168+80
 3311 01ec FFF7FEFF 		bl	at_write_command
1034:modem.c       ****     
1035:modem.c       ****     
1036:modem.c       ****     
1037:modem.c       ****     
1038:modem.c       ****     
1039:modem.c       ****     /* Relevant to 3g modem, can ignore
1040:modem.c       ****     
1041:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
1042:modem.c       ****     //AT$GPSQOS=50,50,100,0
1043:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
1044:modem.c       ****     
1045:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
1046:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
1047:modem.c       ****     
1048:modem.c       ****     //unlock contedt, simnce its being used by modem
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 83


1049:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
1050:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
1051:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
1052:modem.c       ****     
1053:modem.c       ****     //unlock contedt, simnce its being used by modem
1054:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
1055:modem.c       ****     
1056:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
1057:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
1058:modem.c       ****     
1059:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
1060:modem.c       ****    uint8 gps_status = 0;
1061:modem.c       ****     for(uint16 i=0;i<200;i++){
1062:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
1063:modem.c       ****         if(gps_status){
1064:modem.c       ****             break;   
1065:modem.c       ****         }
1066:modem.c       ****   }
1067:modem.c       ****     
1068:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
1069:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
1070:modem.c       ****     if(gps_status){
1071:modem.c       ****         float lat,lon,alt = 0;
1072:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
1073:modem.c       ****             gps.altitude = alt;
1074:modem.c       ****             gps.latitude = lat/60;
1075:modem.c       ****             gps.longitude = lon/60;
1076:modem.c       ****             gps.valid = 1;
1077:modem.c       ****         }
1078:modem.c       ****         
1079:modem.c       ****     }
1080:modem.c       ****     
1081:modem.c       ****     //turn off gps
1082:modem.c       ****     //AT$GPSP=0
1083:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
1084:modem.c       ****     
1085:modem.c       ****     */
1086:modem.c       **** 
1087:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
1088:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3312              		.loc 1 1088 0
 3313 01f0 FFF7FEFF 		bl	getTimeStamp
 3314 01f4 0246     		mov	r2, r0
 3315 01f6 3B6B     		ldr	r3, [r7, #48]
 3316 01f8 D31A     		subs	r3, r2, r3
 3317 01fa 3B63     		str	r3, [r7, #48]
1089:modem.c       ****     gps.time_to_lock = lock_time;
 3318              		.loc 1 1089 0
 3319 01fc 3B6B     		ldr	r3, [r7, #48]
 3320 01fe 9BB2     		uxth	r3, r3
 3321 0200 3B84     		strh	r3, [r7, #32]	@ movhi
1090:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3322              		.loc 1 1090 0
 3323 0202 3B8C     		ldrh	r3, [r7, #32]
 3324 0204 1A46     		mov	r2, r3
 3325 0206 1C49     		ldr	r1, .L168+84
 3326 0208 0020     		movs	r0, #0
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 84


 3327 020a FFF7FEFF 		bl	printNotif
1091:modem.c       ****     
1092:modem.c       ****     return gps;
 3328              		.loc 1 1092 0
 3329 020e 7B68     		ldr	r3, [r7, #4]
 3330 0210 1C46     		mov	r4, r3
 3331 0212 07F11403 		add	r3, r7, #20
 3332 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3333 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3334              	.L158:
1093:modem.c       ****     
1094:modem.c       **** }
 3335              		.loc 1 1094 0
 3336 021c 7868     		ldr	r0, [r7, #4]
 3337 021e 3837     		adds	r7, r7, #56
 3338              		.cfi_def_cfa_offset 16
 3339 0220 BD46     		mov	sp, r7
 3340              		.cfi_def_cfa_register 13
 3341              		@ sp needed
 3342 0222 B0BD     		pop	{r4, r5, r7, pc}
 3343              	.L169:
 3344              		.align	2
 3345              	.L168:
 3346 0224 00000000 		.word	modem_state
 3347 0228 00000000 		.word	.LC0
 3348 022c 34080000 		.word	.LC84
 3349 0230 48080000 		.word	.LC85
 3350 0234 58080000 		.word	.LC86
 3351 0238 64080000 		.word	.LC87
 3352 023c 74080000 		.word	.LC88
 3353 0240 98080000 		.word	.LC89
 3354 0244 A8080000 		.word	.LC90
 3355 0248 D8020000 		.word	.LC27
 3356 024c B8080000 		.word	.LC91
 3357 0250 D0080000 		.word	.LC92
 3358 0254 D4080000 		.word	.LC93
 3359 0258 E0080000 		.word	.LC94
 3360 025c 00000000 		.word	uart_received_string
 3361 0260 EC080000 		.word	.LC95
 3362 0264 0000C842 		.word	1120403456
 3363 0268 00005940 		.word	1079574528
 3364 026c 00004E40 		.word	1078853632
 3365 0270 0C090000 		.word	.LC96
 3366 0274 20090000 		.word	.LC97
 3367 0278 2C090000 		.word	.LC98
 3368              		.cfi_endproc
 3369              	.LFE87:
 3370              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3371              		.text
 3372              	.Letext0:
 3373              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3374              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3375              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3376              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3377              		.file 6 "testing.h"
 3378              		.file 7 "data.h"
 3379              		.file 8 "modem.h"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 85


 3380              		.file 9 "notoriOS.h"
 3381              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3382              		.file 11 "App_LED.h"
 3383              		.file 12 "level_sensor.h"
 3384              		.file 13 "valve.h"
 3385              		.file 14 "autosampler.h"
 3386              		.section	.debug_info,"",%progbits
 3387              	.Ldebug_info0:
 3388 0000 2C0E0000 		.4byte	0xe2c
 3389 0004 0400     		.2byte	0x4
 3390 0006 00000000 		.4byte	.Ldebug_abbrev0
 3391 000a 04       		.byte	0x4
 3392 000b 01       		.uleb128 0x1
 3393 000c B2000000 		.4byte	.LASF197
 3394 0010 0C       		.byte	0xc
 3395 0011 B2040000 		.4byte	.LASF198
 3396 0015 72040000 		.4byte	.LASF199
 3397 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3398 001d 00000000 		.4byte	0
 3399 0021 00000000 		.4byte	.Ldebug_line0
 3400 0025 02       		.uleb128 0x2
 3401 0026 01       		.byte	0x1
 3402 0027 06       		.byte	0x6
 3403 0028 B5010000 		.4byte	.LASF0
 3404 002c 03       		.uleb128 0x3
 3405 002d 58000000 		.4byte	.LASF4
 3406 0031 02       		.byte	0x2
 3407 0032 1D       		.byte	0x1d
 3408 0033 37000000 		.4byte	0x37
 3409 0037 02       		.uleb128 0x2
 3410 0038 01       		.byte	0x1
 3411 0039 08       		.byte	0x8
 3412 003a D8060000 		.4byte	.LASF1
 3413 003e 02       		.uleb128 0x2
 3414 003f 02       		.byte	0x2
 3415 0040 05       		.byte	0x5
 3416 0041 EA040000 		.4byte	.LASF2
 3417 0045 02       		.uleb128 0x2
 3418 0046 02       		.byte	0x2
 3419 0047 07       		.byte	0x7
 3420 0048 1A030000 		.4byte	.LASF3
 3421 004c 03       		.uleb128 0x3
 3422 004d FF040000 		.4byte	.LASF5
 3423 0051 02       		.byte	0x2
 3424 0052 3F       		.byte	0x3f
 3425 0053 57000000 		.4byte	0x57
 3426 0057 02       		.uleb128 0x2
 3427 0058 04       		.byte	0x4
 3428 0059 05       		.byte	0x5
 3429 005a 76020000 		.4byte	.LASF6
 3430 005e 03       		.uleb128 0x3
 3431 005f 3D030000 		.4byte	.LASF7
 3432 0063 02       		.byte	0x2
 3433 0064 41       		.byte	0x41
 3434 0065 69000000 		.4byte	0x69
 3435 0069 02       		.uleb128 0x2
 3436 006a 04       		.byte	0x4
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 86


 3437 006b 07       		.byte	0x7
 3438 006c F2030000 		.4byte	.LASF8
 3439 0070 02       		.uleb128 0x2
 3440 0071 08       		.byte	0x8
 3441 0072 05       		.byte	0x5
 3442 0073 A7010000 		.4byte	.LASF9
 3443 0077 02       		.uleb128 0x2
 3444 0078 08       		.byte	0x8
 3445 0079 07       		.byte	0x7
 3446 007a 4D010000 		.4byte	.LASF10
 3447 007e 04       		.uleb128 0x4
 3448 007f 04       		.byte	0x4
 3449 0080 05       		.byte	0x5
 3450 0081 696E7400 		.ascii	"int\000"
 3451 0085 02       		.uleb128 0x2
 3452 0086 04       		.byte	0x4
 3453 0087 07       		.byte	0x7
 3454 0088 F6070000 		.4byte	.LASF11
 3455 008c 03       		.uleb128 0x3
 3456 008d E9090000 		.4byte	.LASF12
 3457 0091 03       		.byte	0x3
 3458 0092 18       		.byte	0x18
 3459 0093 2C000000 		.4byte	0x2c
 3460 0097 03       		.uleb128 0x3
 3461 0098 D0060000 		.4byte	.LASF13
 3462 009c 03       		.byte	0x3
 3463 009d 2C       		.byte	0x2c
 3464 009e 4C000000 		.4byte	0x4c
 3465 00a2 03       		.uleb128 0x3
 3466 00a3 FE080000 		.4byte	.LASF14
 3467 00a7 03       		.byte	0x3
 3468 00a8 30       		.byte	0x30
 3469 00a9 5E000000 		.4byte	0x5e
 3470 00ad 05       		.uleb128 0x5
 3471 00ae B4020000 		.4byte	.LASF15
 3472 00b2 04       		.byte	0x4
 3473 00b3 9201     		.2byte	0x192
 3474 00b5 37000000 		.4byte	0x37
 3475 00b9 05       		.uleb128 0x5
 3476 00ba 17000000 		.4byte	.LASF16
 3477 00be 04       		.byte	0x4
 3478 00bf 9301     		.2byte	0x193
 3479 00c1 45000000 		.4byte	0x45
 3480 00c5 05       		.uleb128 0x5
 3481 00c6 2D030000 		.4byte	.LASF17
 3482 00ca 04       		.byte	0x4
 3483 00cb 9401     		.2byte	0x194
 3484 00cd 69000000 		.4byte	0x69
 3485 00d1 05       		.uleb128 0x5
 3486 00d2 02060000 		.4byte	.LASF18
 3487 00d6 04       		.byte	0x4
 3488 00d7 9601     		.2byte	0x196
 3489 00d9 3E000000 		.4byte	0x3e
 3490 00dd 05       		.uleb128 0x5
 3491 00de D9020000 		.4byte	.LASF19
 3492 00e2 04       		.byte	0x4
 3493 00e3 9701     		.2byte	0x197
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 87


 3494 00e5 57000000 		.4byte	0x57
 3495 00e9 05       		.uleb128 0x5
 3496 00ea A7050000 		.4byte	.LASF20
 3497 00ee 04       		.byte	0x4
 3498 00ef 9801     		.2byte	0x198
 3499 00f1 F5000000 		.4byte	0xf5
 3500 00f5 02       		.uleb128 0x2
 3501 00f6 04       		.byte	0x4
 3502 00f7 04       		.byte	0x4
 3503 00f8 6F060000 		.4byte	.LASF21
 3504 00fc 02       		.uleb128 0x2
 3505 00fd 08       		.byte	0x8
 3506 00fe 04       		.byte	0x4
 3507 00ff 9C0A0000 		.4byte	.LASF22
 3508 0103 02       		.uleb128 0x2
 3509 0104 01       		.byte	0x1
 3510 0105 08       		.byte	0x8
 3511 0106 DD070000 		.4byte	.LASF23
 3512 010a 02       		.uleb128 0x2
 3513 010b 08       		.byte	0x8
 3514 010c 04       		.byte	0x4
 3515 010d D1070000 		.4byte	.LASF24
 3516 0111 02       		.uleb128 0x2
 3517 0112 04       		.byte	0x4
 3518 0113 07       		.byte	0x7
 3519 0114 AF050000 		.4byte	.LASF25
 3520 0118 06       		.uleb128 0x6
 3521 0119 04       		.byte	0x4
 3522 011a 03010000 		.4byte	0x103
 3523 011e 06       		.uleb128 0x6
 3524 011f 04       		.byte	0x4
 3525 0120 24010000 		.4byte	0x124
 3526 0124 07       		.uleb128 0x7
 3527 0125 03010000 		.4byte	0x103
 3528 0129 08       		.uleb128 0x8
 3529 012a 03010000 		.4byte	0x103
 3530 012e 39010000 		.4byte	0x139
 3531 0132 09       		.uleb128 0x9
 3532 0133 11010000 		.4byte	0x111
 3533 0137 17       		.byte	0x17
 3534 0138 00       		.byte	0
 3535 0139 0A       		.uleb128 0xa
 3536 013a 746D00   		.ascii	"tm\000"
 3537 013d 24       		.byte	0x24
 3538 013e 05       		.byte	0x5
 3539 013f 21       		.byte	0x21
 3540 0140 B1010000 		.4byte	0x1b1
 3541 0144 0B       		.uleb128 0xb
 3542 0145 07090000 		.4byte	.LASF26
 3543 0149 05       		.byte	0x5
 3544 014a 23       		.byte	0x23
 3545 014b 7E000000 		.4byte	0x7e
 3546 014f 00       		.byte	0
 3547 0150 0B       		.uleb128 0xb
 3548 0151 A0050000 		.4byte	.LASF27
 3549 0155 05       		.byte	0x5
 3550 0156 24       		.byte	0x24
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 88


 3551 0157 7E000000 		.4byte	0x7e
 3552 015b 04       		.byte	0x4
 3553 015c 0B       		.uleb128 0xb
 3554 015d 24000000 		.4byte	.LASF28
 3555 0161 05       		.byte	0x5
 3556 0162 25       		.byte	0x25
 3557 0163 7E000000 		.4byte	0x7e
 3558 0167 08       		.byte	0x8
 3559 0168 0B       		.uleb128 0xb
 3560 0169 C7080000 		.4byte	.LASF29
 3561 016d 05       		.byte	0x5
 3562 016e 26       		.byte	0x26
 3563 016f 7E000000 		.4byte	0x7e
 3564 0173 0C       		.byte	0xc
 3565 0174 0B       		.uleb128 0xb
 3566 0175 5F030000 		.4byte	.LASF30
 3567 0179 05       		.byte	0x5
 3568 017a 27       		.byte	0x27
 3569 017b 7E000000 		.4byte	0x7e
 3570 017f 10       		.byte	0x10
 3571 0180 0B       		.uleb128 0xb
 3572 0181 BA030000 		.4byte	.LASF31
 3573 0185 05       		.byte	0x5
 3574 0186 28       		.byte	0x28
 3575 0187 7E000000 		.4byte	0x7e
 3576 018b 14       		.byte	0x14
 3577 018c 0B       		.uleb128 0xb
 3578 018d 8D070000 		.4byte	.LASF32
 3579 0191 05       		.byte	0x5
 3580 0192 29       		.byte	0x29
 3581 0193 7E000000 		.4byte	0x7e
 3582 0197 18       		.byte	0x18
 3583 0198 0B       		.uleb128 0xb
 3584 0199 2C000000 		.4byte	.LASF33
 3585 019d 05       		.byte	0x5
 3586 019e 2A       		.byte	0x2a
 3587 019f 7E000000 		.4byte	0x7e
 3588 01a3 1C       		.byte	0x1c
 3589 01a4 0B       		.uleb128 0xb
 3590 01a5 56040000 		.4byte	.LASF34
 3591 01a9 05       		.byte	0x5
 3592 01aa 2B       		.byte	0x2b
 3593 01ab 7E000000 		.4byte	0x7e
 3594 01af 20       		.byte	0x20
 3595 01b0 00       		.byte	0
 3596 01b1 0C       		.uleb128 0xc
 3597 01b2 8101     		.2byte	0x181
 3598 01b4 06       		.byte	0x6
 3599 01b5 0A       		.byte	0xa
 3600 01b6 DF010000 		.4byte	0x1df
 3601 01ba 0B       		.uleb128 0xb
 3602 01bb F8050000 		.4byte	.LASF35
 3603 01bf 06       		.byte	0x6
 3604 01c0 0C       		.byte	0xc
 3605 01c1 DF010000 		.4byte	0x1df
 3606 01c5 00       		.byte	0
 3607 01c6 0B       		.uleb128 0xb
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 89


 3608 01c7 4D090000 		.4byte	.LASF36
 3609 01cb 06       		.byte	0x6
 3610 01cc 0D       		.byte	0xd
 3611 01cd AD000000 		.4byte	0xad
 3612 01d1 80       		.byte	0x80
 3613 01d2 0B       		.uleb128 0xb
 3614 01d3 50070000 		.4byte	.LASF37
 3615 01d7 06       		.byte	0x6
 3616 01d8 0F       		.byte	0xf
 3617 01d9 EF010000 		.4byte	0x1ef
 3618 01dd 81       		.byte	0x81
 3619 01de 00       		.byte	0
 3620 01df 08       		.uleb128 0x8
 3621 01e0 03010000 		.4byte	0x103
 3622 01e4 EF010000 		.4byte	0x1ef
 3623 01e8 09       		.uleb128 0x9
 3624 01e9 11010000 		.4byte	0x111
 3625 01ed 7F       		.byte	0x7f
 3626 01ee 00       		.byte	0
 3627 01ef 08       		.uleb128 0x8
 3628 01f0 03010000 		.4byte	0x103
 3629 01f4 FF010000 		.4byte	0x1ff
 3630 01f8 09       		.uleb128 0x9
 3631 01f9 11010000 		.4byte	0x111
 3632 01fd FF       		.byte	0xff
 3633 01fe 00       		.byte	0
 3634 01ff 03       		.uleb128 0x3
 3635 0200 36070000 		.4byte	.LASF38
 3636 0204 06       		.byte	0x6
 3637 0205 10       		.byte	0x10
 3638 0206 B1010000 		.4byte	0x1b1
 3639 020a 0D       		.uleb128 0xd
 3640 020b 2C       		.byte	0x2c
 3641 020c 07       		.byte	0x7
 3642 020d 14       		.byte	0x14
 3643 020e 37020000 		.4byte	0x237
 3644 0212 0E       		.uleb128 0xe
 3645 0213 6B657900 		.ascii	"key\000"
 3646 0217 07       		.byte	0x7
 3647 0218 15       		.byte	0x15
 3648 0219 37020000 		.4byte	0x237
 3649 021d 00       		.byte	0
 3650 021e 0B       		.uleb128 0xb
 3651 021f 1E000000 		.4byte	.LASF39
 3652 0223 07       		.byte	0x7
 3653 0224 16       		.byte	0x16
 3654 0225 37020000 		.4byte	0x237
 3655 0229 14       		.byte	0x14
 3656 022a 0B       		.uleb128 0xb
 3657 022b 32040000 		.4byte	.LASF40
 3658 022f 07       		.byte	0x7
 3659 0230 17       		.byte	0x17
 3660 0231 DD000000 		.4byte	0xdd
 3661 0235 28       		.byte	0x28
 3662 0236 00       		.byte	0
 3663 0237 08       		.uleb128 0x8
 3664 0238 03010000 		.4byte	0x103
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 90


 3665 023c 47020000 		.4byte	0x247
 3666 0240 09       		.uleb128 0x9
 3667 0241 11010000 		.4byte	0x111
 3668 0245 13       		.byte	0x13
 3669 0246 00       		.byte	0
 3670 0247 03       		.uleb128 0x3
 3671 0248 DC030000 		.4byte	.LASF41
 3672 024c 07       		.byte	0x7
 3673 024d 19       		.byte	0x19
 3674 024e 0A020000 		.4byte	0x20a
 3675 0252 0D       		.uleb128 0xd
 3676 0253 3C       		.byte	0x3c
 3677 0254 08       		.byte	0x8
 3678 0255 36       		.byte	0x36
 3679 0256 7F020000 		.4byte	0x27f
 3680 025a 0B       		.uleb128 0xb
 3681 025b C0080000 		.4byte	.LASF42
 3682 025f 08       		.byte	0x8
 3683 0260 37       		.byte	0x37
 3684 0261 37020000 		.4byte	0x237
 3685 0265 00       		.byte	0
 3686 0266 0B       		.uleb128 0xb
 3687 0267 13080000 		.4byte	.LASF43
 3688 026b 08       		.byte	0x8
 3689 026c 38       		.byte	0x38
 3690 026d 37020000 		.4byte	0x237
 3691 0271 14       		.byte	0x14
 3692 0272 0B       		.uleb128 0xb
 3693 0273 4B070000 		.4byte	.LASF44
 3694 0277 08       		.byte	0x8
 3695 0278 39       		.byte	0x39
 3696 0279 37020000 		.4byte	0x237
 3697 027d 28       		.byte	0x28
 3698 027e 00       		.byte	0
 3699 027f 03       		.uleb128 0x3
 3700 0280 27080000 		.4byte	.LASF45
 3701 0284 08       		.byte	0x8
 3702 0285 3B       		.byte	0x3b
 3703 0286 52020000 		.4byte	0x252
 3704 028a 0D       		.uleb128 0xd
 3705 028b 20       		.byte	0x20
 3706 028c 08       		.byte	0x8
 3707 028d 3D       		.byte	0x3d
 3708 028e F3020000 		.4byte	0x2f3
 3709 0292 0B       		.uleb128 0xb
 3710 0293 7F020000 		.4byte	.LASF46
 3711 0297 08       		.byte	0x8
 3712 0298 3E       		.byte	0x3e
 3713 0299 7E000000 		.4byte	0x7e
 3714 029d 00       		.byte	0
 3715 029e 0E       		.uleb128 0xe
 3716 029f 62657200 		.ascii	"ber\000"
 3717 02a3 08       		.byte	0x8
 3718 02a4 3F       		.byte	0x3f
 3719 02a5 7E000000 		.4byte	0x7e
 3720 02a9 04       		.byte	0x4
 3721 02aa 0B       		.uleb128 0xb
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 91


 3722 02ab 17070000 		.4byte	.LASF47
 3723 02af 08       		.byte	0x8
 3724 02b0 40       		.byte	0x40
 3725 02b1 7E000000 		.4byte	0x7e
 3726 02b5 08       		.byte	0x8
 3727 02b6 0B       		.uleb128 0xb
 3728 02b7 C1010000 		.4byte	.LASF48
 3729 02bb 08       		.byte	0x8
 3730 02bc 41       		.byte	0x41
 3731 02bd 7E000000 		.4byte	0x7e
 3732 02c1 0C       		.byte	0xc
 3733 02c2 0B       		.uleb128 0xb
 3734 02c3 FC060000 		.4byte	.LASF49
 3735 02c7 08       		.byte	0x8
 3736 02c8 42       		.byte	0x42
 3737 02c9 7E000000 		.4byte	0x7e
 3738 02cd 10       		.byte	0x10
 3739 02ce 0B       		.uleb128 0xb
 3740 02cf 57070000 		.4byte	.LASF50
 3741 02d3 08       		.byte	0x8
 3742 02d4 43       		.byte	0x43
 3743 02d5 7E000000 		.4byte	0x7e
 3744 02d9 14       		.byte	0x14
 3745 02da 0B       		.uleb128 0xb
 3746 02db E3010000 		.4byte	.LASF51
 3747 02df 08       		.byte	0x8
 3748 02e0 44       		.byte	0x44
 3749 02e1 7E000000 		.4byte	0x7e
 3750 02e5 18       		.byte	0x18
 3751 02e6 0B       		.uleb128 0xb
 3752 02e7 CD040000 		.4byte	.LASF52
 3753 02eb 08       		.byte	0x8
 3754 02ec 45       		.byte	0x45
 3755 02ed 7E000000 		.4byte	0x7e
 3756 02f1 1C       		.byte	0x1c
 3757 02f2 00       		.byte	0
 3758 02f3 03       		.uleb128 0x3
 3759 02f4 5C070000 		.4byte	.LASF53
 3760 02f8 08       		.byte	0x8
 3761 02f9 47       		.byte	0x47
 3762 02fa 8A020000 		.4byte	0x28a
 3763 02fe 0D       		.uleb128 0xd
 3764 02ff 10       		.byte	0x10
 3765 0300 08       		.byte	0x8
 3766 0301 49       		.byte	0x49
 3767 0302 43030000 		.4byte	0x343
 3768 0306 0B       		.uleb128 0xb
 3769 0307 EF050000 		.4byte	.LASF54
 3770 030b 08       		.byte	0x8
 3771 030c 4A       		.byte	0x4a
 3772 030d F5000000 		.4byte	0xf5
 3773 0311 00       		.byte	0
 3774 0312 0B       		.uleb128 0xb
 3775 0313 A8000000 		.4byte	.LASF55
 3776 0317 08       		.byte	0x8
 3777 0318 4B       		.byte	0x4b
 3778 0319 F5000000 		.4byte	0xf5
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 92


 3779 031d 04       		.byte	0x4
 3780 031e 0B       		.uleb128 0xb
 3781 031f AB020000 		.4byte	.LASF56
 3782 0323 08       		.byte	0x8
 3783 0324 4C       		.byte	0x4c
 3784 0325 F5000000 		.4byte	0xf5
 3785 0329 08       		.byte	0x8
 3786 032a 0B       		.uleb128 0xb
 3787 032b 3C040000 		.4byte	.LASF57
 3788 032f 08       		.byte	0x8
 3789 0330 4D       		.byte	0x4d
 3790 0331 B9000000 		.4byte	0xb9
 3791 0335 0C       		.byte	0xc
 3792 0336 0B       		.uleb128 0xb
 3793 0337 DB080000 		.4byte	.LASF58
 3794 033b 08       		.byte	0x8
 3795 033c 4E       		.byte	0x4e
 3796 033d AD000000 		.4byte	0xad
 3797 0341 0E       		.byte	0xe
 3798 0342 00       		.byte	0
 3799 0343 03       		.uleb128 0x3
 3800 0344 34080000 		.4byte	.LASF59
 3801 0348 08       		.byte	0x8
 3802 0349 50       		.byte	0x50
 3803 034a FE020000 		.4byte	0x2fe
 3804 034e 0D       		.uleb128 0xd
 3805 034f 0A       		.byte	0xa
 3806 0350 08       		.byte	0x8
 3807 0351 53       		.byte	0x53
 3808 0352 CF030000 		.4byte	0x3cf
 3809 0356 0B       		.uleb128 0xb
 3810 0357 DF020000 		.4byte	.LASF60
 3811 035b 08       		.byte	0x8
 3812 035c 55       		.byte	0x55
 3813 035d AD000000 		.4byte	0xad
 3814 0361 00       		.byte	0
 3815 0362 0B       		.uleb128 0xb
 3816 0363 A3060000 		.4byte	.LASF61
 3817 0367 08       		.byte	0x8
 3818 0368 57       		.byte	0x57
 3819 0369 CF030000 		.4byte	0x3cf
 3820 036d 01       		.byte	0x1
 3821 036e 0B       		.uleb128 0xb
 3822 036f 4C080000 		.4byte	.LASF62
 3823 0373 08       		.byte	0x8
 3824 0374 59       		.byte	0x59
 3825 0375 AD000000 		.4byte	0xad
 3826 0379 02       		.byte	0x2
 3827 037a 0B       		.uleb128 0xb
 3828 037b 01070000 		.4byte	.LASF63
 3829 037f 08       		.byte	0x8
 3830 0380 5B       		.byte	0x5b
 3831 0381 AD000000 		.4byte	0xad
 3832 0385 03       		.byte	0x3
 3833 0386 0B       		.uleb128 0xb
 3834 0387 75030000 		.4byte	.LASF64
 3835 038b 08       		.byte	0x8
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 93


 3836 038c 5E       		.byte	0x5e
 3837 038d AD000000 		.4byte	0xad
 3838 0391 04       		.byte	0x4
 3839 0392 0B       		.uleb128 0xb
 3840 0393 B1090000 		.4byte	.LASF65
 3841 0397 08       		.byte	0x8
 3842 0398 63       		.byte	0x63
 3843 0399 AD000000 		.4byte	0xad
 3844 039d 05       		.byte	0x5
 3845 039e 0B       		.uleb128 0xb
 3846 039f AC070000 		.4byte	.LASF66
 3847 03a3 08       		.byte	0x8
 3848 03a4 65       		.byte	0x65
 3849 03a5 AD000000 		.4byte	0xad
 3850 03a9 06       		.byte	0x6
 3851 03aa 0B       		.uleb128 0xb
 3852 03ab 94090000 		.4byte	.LASF67
 3853 03af 08       		.byte	0x8
 3854 03b0 66       		.byte	0x66
 3855 03b1 AD000000 		.4byte	0xad
 3856 03b5 07       		.byte	0x7
 3857 03b6 0B       		.uleb128 0xb
 3858 03b7 AC060000 		.4byte	.LASF68
 3859 03bb 08       		.byte	0x8
 3860 03bc 67       		.byte	0x67
 3861 03bd AD000000 		.4byte	0xad
 3862 03c1 08       		.byte	0x8
 3863 03c2 0B       		.uleb128 0xb
 3864 03c3 170A0000 		.4byte	.LASF69
 3865 03c7 08       		.byte	0x8
 3866 03c8 68       		.byte	0x68
 3867 03c9 AD000000 		.4byte	0xad
 3868 03cd 09       		.byte	0x9
 3869 03ce 00       		.byte	0
 3870 03cf 02       		.uleb128 0x2
 3871 03d0 01       		.byte	0x1
 3872 03d1 02       		.byte	0x2
 3873 03d2 CA060000 		.4byte	.LASF70
 3874 03d6 03       		.uleb128 0x3
 3875 03d7 59050000 		.4byte	.LASF71
 3876 03db 08       		.byte	0x8
 3877 03dc 6E       		.byte	0x6e
 3878 03dd 4E030000 		.4byte	0x34e
 3879 03e1 0D       		.uleb128 0xd
 3880 03e2 06       		.byte	0x6
 3881 03e3 09       		.byte	0x9
 3882 03e4 35       		.byte	0x35
 3883 03e5 1A040000 		.4byte	0x41a
 3884 03e9 0B       		.uleb128 0xb
 3885 03ea C6010000 		.4byte	.LASF72
 3886 03ee 09       		.byte	0x9
 3887 03ef 37       		.byte	0x37
 3888 03f0 B9000000 		.4byte	0xb9
 3889 03f4 00       		.byte	0
 3890 03f5 0B       		.uleb128 0xb
 3891 03f6 85020000 		.4byte	.LASF73
 3892 03fa 09       		.byte	0x9
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 94


 3893 03fb 38       		.byte	0x38
 3894 03fc D1000000 		.4byte	0xd1
 3895 0400 02       		.byte	0x2
 3896 0401 0B       		.uleb128 0xb
 3897 0402 310A0000 		.4byte	.LASF74
 3898 0406 09       		.byte	0x9
 3899 0407 39       		.byte	0x39
 3900 0408 AD000000 		.4byte	0xad
 3901 040c 04       		.byte	0x4
 3902 040d 0B       		.uleb128 0xb
 3903 040e 73000000 		.4byte	.LASF75
 3904 0412 09       		.byte	0x9
 3905 0413 3A       		.byte	0x3a
 3906 0414 AD000000 		.4byte	0xad
 3907 0418 05       		.byte	0x5
 3908 0419 00       		.byte	0
 3909 041a 03       		.uleb128 0x3
 3910 041b C4060000 		.4byte	.LASF76
 3911 041f 09       		.byte	0x9
 3912 0420 3D       		.byte	0x3d
 3913 0421 25040000 		.4byte	0x425
 3914 0425 0F       		.uleb128 0xf
 3915 0426 E1030000 		.4byte	0x3e1
 3916 042a 0D       		.uleb128 0xd
 3917 042b 1C       		.byte	0x1c
 3918 042c 09       		.byte	0x9
 3919 042d 40       		.byte	0x40
 3920 042e 4B040000 		.4byte	0x44b
 3921 0432 0B       		.uleb128 0xb
 3922 0433 5F040000 		.4byte	.LASF77
 3923 0437 09       		.byte	0x9
 3924 0438 42       		.byte	0x42
 3925 0439 4B040000 		.4byte	0x44b
 3926 043d 00       		.byte	0
 3927 043e 0B       		.uleb128 0xb
 3928 043f 700A0000 		.4byte	.LASF78
 3929 0443 09       		.byte	0x9
 3930 0444 43       		.byte	0x43
 3931 0445 29010000 		.4byte	0x129
 3932 0449 04       		.byte	0x4
 3933 044a 00       		.byte	0
 3934 044b 06       		.uleb128 0x6
 3935 044c 04       		.byte	0x4
 3936 044d 7F020000 		.4byte	0x27f
 3937 0451 03       		.uleb128 0x3
 3938 0452 4E050000 		.4byte	.LASF79
 3939 0456 09       		.byte	0x9
 3940 0457 45       		.byte	0x45
 3941 0458 2A040000 		.4byte	0x42a
 3942 045c 0D       		.uleb128 0xd
 3943 045d 68       		.byte	0x68
 3944 045e 09       		.byte	0x9
 3945 045f 4B       		.byte	0x4b
 3946 0460 7D040000 		.4byte	0x47d
 3947 0464 0B       		.uleb128 0xb
 3948 0465 6A040000 		.4byte	.LASF80
 3949 0469 09       		.byte	0x9
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 95


 3950 046a 50       		.byte	0x50
 3951 046b 7D040000 		.4byte	0x47d
 3952 046f 00       		.byte	0
 3953 0470 0B       		.uleb128 0xb
 3954 0471 4E040000 		.4byte	.LASF81
 3955 0475 09       		.byte	0x9
 3956 0476 51       		.byte	0x51
 3957 0477 7E000000 		.4byte	0x7e
 3958 047b 64       		.byte	0x64
 3959 047c 00       		.byte	0
 3960 047d 08       		.uleb128 0x8
 3961 047e 03010000 		.4byte	0x103
 3962 0482 8D040000 		.4byte	0x48d
 3963 0486 09       		.uleb128 0x9
 3964 0487 11010000 		.4byte	0x111
 3965 048b 63       		.byte	0x63
 3966 048c 00       		.byte	0
 3967 048d 03       		.uleb128 0x3
 3968 048e BE090000 		.4byte	.LASF82
 3969 0492 09       		.byte	0x9
 3970 0493 57       		.byte	0x57
 3971 0494 5C040000 		.4byte	0x45c
 3972 0498 10       		.uleb128 0x10
 3973 0499 B7060000 		.4byte	.LASF114
 3974 049d 01       		.byte	0x1
 3975 049e 12       		.byte	0x12
 3976 049f 00000000 		.4byte	.LFB64
 3977 04a3 44000000 		.4byte	.LFE64-.LFB64
 3978 04a7 01       		.uleb128 0x1
 3979 04a8 9C       		.byte	0x9c
 3980 04a9 11       		.uleb128 0x11
 3981 04aa 75060000 		.4byte	.LASF83
 3982 04ae 01       		.byte	0x1
 3983 04af 1C       		.byte	0x1c
 3984 04b0 00000000 		.4byte	.LFB65
 3985 04b4 6C000000 		.4byte	.LFE65-.LFB65
 3986 04b8 01       		.uleb128 0x1
 3987 04b9 9C       		.byte	0x9c
 3988 04ba 11       		.uleb128 0x11
 3989 04bb 9E080000 		.4byte	.LASF84
 3990 04bf 01       		.byte	0x1
 3991 04c0 36       		.byte	0x36
 3992 04c1 00000000 		.4byte	.LFB66
 3993 04c5 32000000 		.4byte	.LFE66-.LFB66
 3994 04c9 01       		.uleb128 0x1
 3995 04ca 9C       		.byte	0x9c
 3996 04cb 11       		.uleb128 0x11
 3997 04cc E1080000 		.4byte	.LASF85
 3998 04d0 01       		.byte	0x1
 3999 04d1 46       		.byte	0x46
 4000 04d2 00000000 		.4byte	.LFB67
 4001 04d6 20000000 		.4byte	.LFE67-.LFB67
 4002 04da 01       		.uleb128 0x1
 4003 04db 9C       		.byte	0x9c
 4004 04dc 11       		.uleb128 0x11
 4005 04dd 8B0A0000 		.4byte	.LASF86
 4006 04e1 01       		.byte	0x1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 96


 4007 04e2 4F       		.byte	0x4f
 4008 04e3 00000000 		.4byte	.LFB68
 4009 04e7 40000000 		.4byte	.LFE68-.LFB68
 4010 04eb 01       		.uleb128 0x1
 4011 04ec 9C       		.byte	0x9c
 4012 04ed 12       		.uleb128 0x12
 4013 04ee A3040000 		.4byte	.LASF100
 4014 04f2 01       		.byte	0x1
 4015 04f3 61       		.byte	0x61
 4016 04f4 AD000000 		.4byte	0xad
 4017 04f8 00000000 		.4byte	.LFB69
 4018 04fc DC000000 		.4byte	.LFE69-.LFB69
 4019 0500 01       		.uleb128 0x1
 4020 0501 9C       		.byte	0x9c
 4021 0502 61050000 		.4byte	0x561
 4022 0506 13       		.uleb128 0x13
 4023 0507 0E0A0000 		.4byte	.LASF87
 4024 050b 01       		.byte	0x1
 4025 050c 6A       		.byte	0x6a
 4026 050d AD000000 		.4byte	0xad
 4027 0511 02       		.uleb128 0x2
 4028 0512 91       		.byte	0x91
 4029 0513 77       		.sleb128 -9
 4030 0514 13       		.uleb128 0x13
 4031 0515 280A0000 		.4byte	.LASF88
 4032 0519 01       		.byte	0x1
 4033 051a 6B       		.byte	0x6b
 4034 051b AD000000 		.4byte	0xad
 4035 051f 02       		.uleb128 0x2
 4036 0520 91       		.byte	0x91
 4037 0521 74       		.sleb128 -12
 4038 0522 13       		.uleb128 0x13
 4039 0523 4A0A0000 		.4byte	.LASF89
 4040 0527 01       		.byte	0x1
 4041 0528 6D       		.byte	0x6d
 4042 0529 57000000 		.4byte	0x57
 4043 052d 02       		.uleb128 0x2
 4044 052e 91       		.byte	0x91
 4045 052f 70       		.sleb128 -16
 4046 0530 14       		.uleb128 0x14
 4047 0531 26000000 		.4byte	.LBB2
 4048 0535 4A000000 		.4byte	.LBE2-.LBB2
 4049 0539 13       		.uleb128 0x13
 4050 053a 280A0000 		.4byte	.LASF88
 4051 053e 01       		.byte	0x1
 4052 053f 70       		.byte	0x70
 4053 0540 AD000000 		.4byte	0xad
 4054 0544 02       		.uleb128 0x2
 4055 0545 91       		.byte	0x91
 4056 0546 76       		.sleb128 -10
 4057 0547 14       		.uleb128 0x14
 4058 0548 2C000000 		.4byte	.LBB3
 4059 054c 2A000000 		.4byte	.LBE3-.LBB3
 4060 0550 13       		.uleb128 0x13
 4061 0551 E8030000 		.4byte	.LASF90
 4062 0555 01       		.byte	0x1
 4063 0556 72       		.byte	0x72
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 97


 4064 0557 AD000000 		.4byte	0xad
 4065 055b 02       		.uleb128 0x2
 4066 055c 91       		.byte	0x91
 4067 055d 75       		.sleb128 -11
 4068 055e 00       		.byte	0
 4069 055f 00       		.byte	0
 4070 0560 00       		.byte	0
 4071 0561 11       		.uleb128 0x11
 4072 0562 95070000 		.4byte	.LASF91
 4073 0566 01       		.byte	0x1
 4074 0567 93       		.byte	0x93
 4075 0568 00000000 		.4byte	.LFB70
 4076 056c 1C000000 		.4byte	.LFE70-.LFB70
 4077 0570 01       		.uleb128 0x1
 4078 0571 9C       		.byte	0x9c
 4079 0572 11       		.uleb128 0x11
 4080 0573 6A070000 		.4byte	.LASF92
 4081 0577 01       		.byte	0x1
 4082 0578 9B       		.byte	0x9b
 4083 0579 00000000 		.4byte	.LFB71
 4084 057d 28000000 		.4byte	.LFE71-.LFB71
 4085 0581 01       		.uleb128 0x1
 4086 0582 9C       		.byte	0x9c
 4087 0583 15       		.uleb128 0x15
 4088 0584 3D050000 		.4byte	.LASF104
 4089 0588 01       		.byte	0x1
 4090 0589 A6       		.byte	0xa6
 4091 058a 8C000000 		.4byte	0x8c
 4092 058e 00000000 		.4byte	.LFB72
 4093 0592 C8000000 		.4byte	.LFE72-.LFB72
 4094 0596 01       		.uleb128 0x1
 4095 0597 9C       		.byte	0x9c
 4096 0598 15060000 		.4byte	0x615
 4097 059c 16       		.uleb128 0x16
 4098 059d 55060000 		.4byte	.LASF93
 4099 05a1 01       		.byte	0x1
 4100 05a2 A6       		.byte	0xa6
 4101 05a3 18010000 		.4byte	0x118
 4102 05a7 02       		.uleb128 0x2
 4103 05a8 91       		.byte	0x91
 4104 05a9 5C       		.sleb128 -36
 4105 05aa 16       		.uleb128 0x16
 4106 05ab 540A0000 		.4byte	.LASF94
 4107 05af 01       		.byte	0x1
 4108 05b0 A6       		.byte	0xa6
 4109 05b1 18010000 		.4byte	0x118
 4110 05b5 02       		.uleb128 0x2
 4111 05b6 91       		.byte	0x91
 4112 05b7 58       		.sleb128 -40
 4113 05b8 16       		.uleb128 0x16
 4114 05b9 13040000 		.4byte	.LASF95
 4115 05bd 01       		.byte	0x1
 4116 05be A6       		.byte	0xa6
 4117 05bf A2000000 		.4byte	0xa2
 4118 05c3 02       		.uleb128 0x2
 4119 05c4 91       		.byte	0x91
 4120 05c5 54       		.sleb128 -44
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 98


 4121 05c6 13       		.uleb128 0x13
 4122 05c7 2A050000 		.4byte	.LASF96
 4123 05cb 01       		.byte	0x1
 4124 05cc A8       		.byte	0xa8
 4125 05cd C5000000 		.4byte	0xc5
 4126 05d1 02       		.uleb128 0x2
 4127 05d2 91       		.byte	0x91
 4128 05d3 74       		.sleb128 -12
 4129 05d4 14       		.uleb128 0x14
 4130 05d5 16000000 		.4byte	.LBB4
 4131 05d9 88000000 		.4byte	.LBE4-.LBB4
 4132 05dd 13       		.uleb128 0x13
 4133 05de 5E060000 		.4byte	.LASF97
 4134 05e2 01       		.byte	0x1
 4135 05e3 AC       		.byte	0xac
 4136 05e4 18010000 		.4byte	0x118
 4137 05e8 02       		.uleb128 0x2
 4138 05e9 91       		.byte	0x91
 4139 05ea 64       		.sleb128 -28
 4140 05eb 13       		.uleb128 0x13
 4141 05ec F6060000 		.4byte	.LASF98
 4142 05f0 01       		.byte	0x1
 4143 05f1 AD       		.byte	0xad
 4144 05f2 A2000000 		.4byte	0xa2
 4145 05f6 02       		.uleb128 0x2
 4146 05f7 91       		.byte	0x91
 4147 05f8 6C       		.sleb128 -20
 4148 05f9 17       		.uleb128 0x17
 4149 05fa 6900     		.ascii	"i\000"
 4150 05fc 01       		.byte	0x1
 4151 05fd AE       		.byte	0xae
 4152 05fe A2000000 		.4byte	0xa2
 4153 0602 02       		.uleb128 0x2
 4154 0603 91       		.byte	0x91
 4155 0604 70       		.sleb128 -16
 4156 0605 13       		.uleb128 0x13
 4157 0606 34030000 		.4byte	.LASF99
 4158 060a 01       		.byte	0x1
 4159 060b AE       		.byte	0xae
 4160 060c A2000000 		.4byte	0xa2
 4161 0610 02       		.uleb128 0x2
 4162 0611 91       		.byte	0x91
 4163 0612 68       		.sleb128 -24
 4164 0613 00       		.byte	0
 4165 0614 00       		.byte	0
 4166 0615 12       		.uleb128 0x12
 4167 0616 2A060000 		.4byte	.LASF101
 4168 061a 01       		.byte	0x1
 4169 061b DA       		.byte	0xda
 4170 061c FF010000 		.4byte	0x1ff
 4171 0620 00000000 		.4byte	.LFB73
 4172 0624 00010000 		.4byte	.LFE73-.LFB73
 4173 0628 01       		.uleb128 0x1
 4174 0629 9C       		.byte	0x9c
 4175 062a 6C060000 		.4byte	0x66c
 4176 062e 13       		.uleb128 0x13
 4177 062f 7C010000 		.4byte	.LASF102
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 99


 4178 0633 01       		.byte	0x1
 4179 0634 DC       		.byte	0xdc
 4180 0635 FF010000 		.4byte	0x1ff
 4181 0639 03       		.uleb128 0x3
 4182 063a 91       		.byte	0x91
 4183 063b E47C     		.sleb128 -412
 4184 063d 14       		.uleb128 0x14
 4185 063e 4A000000 		.4byte	.LBB5
 4186 0642 86000000 		.4byte	.LBE5-.LBB5
 4187 0646 17       		.uleb128 0x17
 4188 0647 6900     		.ascii	"i\000"
 4189 0649 01       		.byte	0x1
 4190 064a E3       		.byte	0xe3
 4191 064b 7E000000 		.4byte	0x7e
 4192 064f 02       		.uleb128 0x2
 4193 0650 91       		.byte	0x91
 4194 0651 6C       		.sleb128 -20
 4195 0652 14       		.uleb128 0x14
 4196 0653 70000000 		.4byte	.LBB6
 4197 0657 46000000 		.4byte	.LBE6-.LBB6
 4198 065b 13       		.uleb128 0x13
 4199 065c 0D030000 		.4byte	.LASF103
 4200 0660 01       		.byte	0x1
 4201 0661 F0       		.byte	0xf0
 4202 0662 57000000 		.4byte	0x57
 4203 0666 02       		.uleb128 0x2
 4204 0667 91       		.byte	0x91
 4205 0668 68       		.sleb128 -24
 4206 0669 00       		.byte	0
 4207 066a 00       		.byte	0
 4208 066b 00       		.byte	0
 4209 066c 18       		.uleb128 0x18
 4210 066d 04040000 		.4byte	.LASF105
 4211 0671 01       		.byte	0x1
 4212 0672 0401     		.2byte	0x104
 4213 0674 AD000000 		.4byte	0xad
 4214 0678 00000000 		.4byte	.LFB74
 4215 067c 78000000 		.4byte	.LFE74-.LFB74
 4216 0680 01       		.uleb128 0x1
 4217 0681 9C       		.byte	0x9c
 4218 0682 DD060000 		.4byte	0x6dd
 4219 0686 19       		.uleb128 0x19
 4220 0687 15050000 		.4byte	.LASF106
 4221 068b 01       		.byte	0x1
 4222 068c 0401     		.2byte	0x104
 4223 068e 18010000 		.4byte	0x118
 4224 0692 02       		.uleb128 0x2
 4225 0693 91       		.byte	0x91
 4226 0694 6C       		.sleb128 -20
 4227 0695 19       		.uleb128 0x19
 4228 0696 BA040000 		.4byte	.LASF107
 4229 069a 01       		.byte	0x1
 4230 069b 0401     		.2byte	0x104
 4231 069d 1E010000 		.4byte	0x11e
 4232 06a1 02       		.uleb128 0x2
 4233 06a2 91       		.byte	0x91
 4234 06a3 68       		.sleb128 -24
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 100


 4235 06a4 19       		.uleb128 0x19
 4236 06a5 E0040000 		.4byte	.LASF108
 4237 06a9 01       		.byte	0x1
 4238 06aa 0401     		.2byte	0x104
 4239 06ac 1E010000 		.4byte	0x11e
 4240 06b0 02       		.uleb128 0x2
 4241 06b1 91       		.byte	0x91
 4242 06b2 64       		.sleb128 -28
 4243 06b3 19       		.uleb128 0x19
 4244 06b4 C6040000 		.4byte	.LASF109
 4245 06b8 01       		.byte	0x1
 4246 06b9 0401     		.2byte	0x104
 4247 06bb 18010000 		.4byte	0x118
 4248 06bf 02       		.uleb128 0x2
 4249 06c0 91       		.byte	0x91
 4250 06c1 60       		.sleb128 -32
 4251 06c2 1A       		.uleb128 0x1a
 4252 06c3 6100     		.ascii	"a\000"
 4253 06c5 01       		.byte	0x1
 4254 06c6 0601     		.2byte	0x106
 4255 06c8 18010000 		.4byte	0x118
 4256 06cc 02       		.uleb128 0x2
 4257 06cd 91       		.byte	0x91
 4258 06ce 74       		.sleb128 -12
 4259 06cf 1A       		.uleb128 0x1a
 4260 06d0 6200     		.ascii	"b\000"
 4261 06d2 01       		.byte	0x1
 4262 06d3 0601     		.2byte	0x106
 4263 06d5 18010000 		.4byte	0x118
 4264 06d9 02       		.uleb128 0x2
 4265 06da 91       		.byte	0x91
 4266 06db 70       		.sleb128 -16
 4267 06dc 00       		.byte	0
 4268 06dd 1B       		.uleb128 0x1b
 4269 06de E2070000 		.4byte	.LASF110
 4270 06e2 01       		.byte	0x1
 4271 06e3 2301     		.2byte	0x123
 4272 06e5 AD000000 		.4byte	0xad
 4273 06e9 00000000 		.4byte	.LFB75
 4274 06ed 74010000 		.4byte	.LFE75-.LFB75
 4275 06f1 01       		.uleb128 0x1
 4276 06f2 9C       		.byte	0x9c
 4277 06f3 0F070000 		.4byte	0x70f
 4278 06f7 14       		.uleb128 0x14
 4279 06f8 2E000000 		.4byte	.LBB7
 4280 06fc 68000000 		.4byte	.LBE7-.LBB7
 4281 0700 1A       		.uleb128 0x1a
 4282 0701 6900     		.ascii	"i\000"
 4283 0703 01       		.byte	0x1
 4284 0704 3101     		.2byte	0x131
 4285 0706 AD000000 		.4byte	0xad
 4286 070a 02       		.uleb128 0x2
 4287 070b 91       		.byte	0x91
 4288 070c 77       		.sleb128 -9
 4289 070d 00       		.byte	0
 4290 070e 00       		.byte	0
 4291 070f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 101


 4292 0710 D2050000 		.4byte	.LASF111
 4293 0714 01       		.byte	0x1
 4294 0715 7501     		.2byte	0x175
 4295 0717 AD000000 		.4byte	0xad
 4296 071b 00000000 		.4byte	.LFB76
 4297 071f B8000000 		.4byte	.LFE76-.LFB76
 4298 0723 01       		.uleb128 0x1
 4299 0724 9C       		.byte	0x9c
 4300 0725 52070000 		.4byte	0x752
 4301 0729 1C       		.uleb128 0x1c
 4302 072a 4D090000 		.4byte	.LASF36
 4303 072e 01       		.byte	0x1
 4304 072f 7901     		.2byte	0x179
 4305 0731 AD000000 		.4byte	0xad
 4306 0735 02       		.uleb128 0x2
 4307 0736 91       		.byte	0x91
 4308 0737 77       		.sleb128 -9
 4309 0738 14       		.uleb128 0x14
 4310 0739 36000000 		.4byte	.LBB8
 4311 073d 48000000 		.4byte	.LBE8-.LBB8
 4312 0741 1C       		.uleb128 0x1c
 4313 0742 1A050000 		.4byte	.LASF112
 4314 0746 01       		.byte	0x1
 4315 0747 8101     		.2byte	0x181
 4316 0749 52070000 		.4byte	0x752
 4317 074d 02       		.uleb128 0x2
 4318 074e 91       		.byte	0x91
 4319 074f 6C       		.sleb128 -20
 4320 0750 00       		.byte	0
 4321 0751 00       		.byte	0
 4322 0752 08       		.uleb128 0x8
 4323 0753 03010000 		.4byte	0x103
 4324 0757 62070000 		.4byte	0x762
 4325 075b 09       		.uleb128 0x9
 4326 075c 11010000 		.4byte	0x111
 4327 0760 09       		.byte	0x9
 4328 0761 00       		.byte	0
 4329 0762 1D       		.uleb128 0x1d
 4330 0763 20020000 		.4byte	.LASF113
 4331 0767 01       		.byte	0x1
 4332 0768 9301     		.2byte	0x193
 4333 076a 00000000 		.4byte	.LFB77
 4334 076e 1C000000 		.4byte	.LFE77-.LFB77
 4335 0772 01       		.uleb128 0x1
 4336 0773 9C       		.byte	0x9c
 4337 0774 1E       		.uleb128 0x1e
 4338 0775 59080000 		.4byte	.LASF115
 4339 0779 01       		.byte	0x1
 4340 077a A301     		.2byte	0x1a3
 4341 077c AD000000 		.4byte	0xad
 4342 0780 00000000 		.4byte	.LFB78
 4343 0784 28000000 		.4byte	.LFE78-.LFB78
 4344 0788 01       		.uleb128 0x1
 4345 0789 9C       		.byte	0x9c
 4346 078a 1F       		.uleb128 0x1f
 4347 078b 1B040000 		.4byte	.LASF118
 4348 078f 01       		.byte	0x1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 102


 4349 0790 AE01     		.2byte	0x1ae
 4350 0792 00000000 		.4byte	.LFB79
 4351 0796 84000000 		.4byte	.LFE79-.LFB79
 4352 079a 01       		.uleb128 0x1
 4353 079b 9C       		.byte	0x9c
 4354 079c B0070000 		.4byte	0x7b0
 4355 07a0 1C       		.uleb128 0x1c
 4356 07a1 35060000 		.4byte	.LASF116
 4357 07a5 01       		.byte	0x1
 4358 07a6 BB01     		.2byte	0x1bb
 4359 07a8 7E000000 		.4byte	0x7e
 4360 07ac 02       		.uleb128 0x2
 4361 07ad 91       		.byte	0x91
 4362 07ae 74       		.sleb128 -12
 4363 07af 00       		.byte	0
 4364 07b0 20       		.uleb128 0x20
 4365 07b1 9A030000 		.4byte	.LASF117
 4366 07b5 01       		.byte	0x1
 4367 07b6 CD01     		.2byte	0x1cd
 4368 07b8 00000000 		.4byte	.LFB80
 4369 07bc 4C000000 		.4byte	.LFE80-.LFB80
 4370 07c0 01       		.uleb128 0x1
 4371 07c1 9C       		.byte	0x9c
 4372 07c2 1F       		.uleb128 0x1f
 4373 07c3 1C090000 		.4byte	.LASF119
 4374 07c7 01       		.byte	0x1
 4375 07c8 E201     		.2byte	0x1e2
 4376 07ca 00000000 		.4byte	.LFB81
 4377 07ce C4050000 		.4byte	.LFE81-.LFB81
 4378 07d2 01       		.uleb128 0x1
 4379 07d3 9C       		.byte	0x9c
 4380 07d4 33090000 		.4byte	0x933
 4381 07d8 1C       		.uleb128 0x1c
 4382 07d9 0B070000 		.4byte	.LASF120
 4383 07dd 01       		.byte	0x1
 4384 07de E501     		.2byte	0x1e5
 4385 07e0 52070000 		.4byte	0x752
 4386 07e4 02       		.uleb128 0x2
 4387 07e5 91       		.byte	0x91
 4388 07e6 64       		.sleb128 -28
 4389 07e7 1C       		.uleb128 0x1c
 4390 07e8 02030000 		.4byte	.LASF121
 4391 07ec 01       		.byte	0x1
 4392 07ed E601     		.2byte	0x1e6
 4393 07ef 52070000 		.4byte	0x752
 4394 07f3 02       		.uleb128 0x2
 4395 07f4 91       		.byte	0x91
 4396 07f5 58       		.sleb128 -40
 4397 07f6 1C       		.uleb128 0x1c
 4398 07f7 3F090000 		.4byte	.LASF122
 4399 07fb 01       		.byte	0x1
 4400 07fc E701     		.2byte	0x1e7
 4401 07fe 52070000 		.4byte	0x752
 4402 0802 02       		.uleb128 0x2
 4403 0803 91       		.byte	0x91
 4404 0804 4C       		.sleb128 -52
 4405 0805 1C       		.uleb128 0x1c
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 103


 4406 0806 86060000 		.4byte	.LASF123
 4407 080a 01       		.byte	0x1
 4408 080b E801     		.2byte	0x1e8
 4409 080d 52070000 		.4byte	0x752
 4410 0811 02       		.uleb128 0x2
 4411 0812 91       		.byte	0x91
 4412 0813 40       		.sleb128 -64
 4413 0814 1C       		.uleb128 0x1c
 4414 0815 8D030000 		.4byte	.LASF124
 4415 0819 01       		.byte	0x1
 4416 081a E901     		.2byte	0x1e9
 4417 081c 52070000 		.4byte	0x752
 4418 0820 03       		.uleb128 0x3
 4419 0821 91       		.byte	0x91
 4420 0822 B47F     		.sleb128 -76
 4421 0824 1C       		.uleb128 0x1c
 4422 0825 B6080000 		.4byte	.LASF125
 4423 0829 01       		.byte	0x1
 4424 082a ED01     		.2byte	0x1ed
 4425 082c 7D040000 		.4byte	0x47d
 4426 0830 03       		.uleb128 0x3
 4427 0831 91       		.byte	0x91
 4428 0832 D07E     		.sleb128 -176
 4429 0834 1C       		.uleb128 0x1c
 4430 0835 66030000 		.4byte	.LASF126
 4431 0839 01       		.byte	0x1
 4432 083a F001     		.2byte	0x1f0
 4433 083c 7D040000 		.4byte	0x47d
 4434 0840 03       		.uleb128 0x3
 4435 0841 91       		.byte	0x91
 4436 0842 EC7D     		.sleb128 -276
 4437 0844 1C       		.uleb128 0x1c
 4438 0845 B8050000 		.4byte	.LASF127
 4439 0849 01       		.byte	0x1
 4440 084a F301     		.2byte	0x1f3
 4441 084c 7D040000 		.4byte	0x47d
 4442 0850 03       		.uleb128 0x3
 4443 0851 91       		.byte	0x91
 4444 0852 887D     		.sleb128 -376
 4445 0854 1C       		.uleb128 0x1c
 4446 0855 35050000 		.4byte	.LASF128
 4447 0859 01       		.byte	0x1
 4448 085a F601     		.2byte	0x1f6
 4449 085c 7D040000 		.4byte	0x47d
 4450 0860 03       		.uleb128 0x3
 4451 0861 91       		.byte	0x91
 4452 0862 A47C     		.sleb128 -476
 4453 0864 1C       		.uleb128 0x1c
 4454 0865 3D070000 		.4byte	.LASF129
 4455 0869 01       		.byte	0x1
 4456 086a F901     		.2byte	0x1f9
 4457 086c 7D040000 		.4byte	0x47d
 4458 0870 03       		.uleb128 0x3
 4459 0871 91       		.byte	0x91
 4460 0872 C07B     		.sleb128 -576
 4461 0874 1C       		.uleb128 0x1c
 4462 0875 94060000 		.4byte	.LASF130
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 104


 4463 0879 01       		.byte	0x1
 4464 087a 0102     		.2byte	0x201
 4465 087c 33090000 		.4byte	0x933
 4466 0880 03       		.uleb128 0x3
 4467 0881 91       		.byte	0x91
 4468 0882 F879     		.sleb128 -776
 4469 0884 1C       		.uleb128 0x1c
 4470 0885 DF020000 		.4byte	.LASF60
 4471 0889 01       		.byte	0x1
 4472 088a 6702     		.2byte	0x267
 4473 088c 7E000000 		.4byte	0x7e
 4474 0890 03       		.uleb128 0x3
 4475 0891 91       		.byte	0x91
 4476 0892 F479     		.sleb128 -780
 4477 0894 1C       		.uleb128 0x1c
 4478 0895 A3060000 		.4byte	.LASF61
 4479 0899 01       		.byte	0x1
 4480 089a 6702     		.2byte	0x267
 4481 089c 7E000000 		.4byte	0x7e
 4482 08a0 03       		.uleb128 0x3
 4483 08a1 91       		.byte	0x91
 4484 08a2 F079     		.sleb128 -784
 4485 08a4 1C       		.uleb128 0x1c
 4486 08a5 64010000 		.4byte	.LASF131
 4487 08a9 01       		.byte	0x1
 4488 08aa 6702     		.2byte	0x267
 4489 08ac 7E000000 		.4byte	0x7e
 4490 08b0 03       		.uleb128 0x3
 4491 08b1 91       		.byte	0x91
 4492 08b2 EC79     		.sleb128 -788
 4493 08b4 1C       		.uleb128 0x1c
 4494 08b5 70050000 		.4byte	.LASF132
 4495 08b9 01       		.byte	0x1
 4496 08ba 6702     		.2byte	0x267
 4497 08bc 7E000000 		.4byte	0x7e
 4498 08c0 03       		.uleb128 0x3
 4499 08c1 91       		.byte	0x91
 4500 08c2 E879     		.sleb128 -792
 4501 08c4 1C       		.uleb128 0x1c
 4502 08c5 1F050000 		.4byte	.LASF133
 4503 08c9 01       		.byte	0x1
 4504 08ca 6702     		.2byte	0x267
 4505 08cc 7E000000 		.4byte	0x7e
 4506 08d0 03       		.uleb128 0x3
 4507 08d1 91       		.byte	0x91
 4508 08d2 E479     		.sleb128 -796
 4509 08d4 1C       		.uleb128 0x1c
 4510 08d5 B10A0000 		.4byte	.LASF134
 4511 08d9 01       		.byte	0x1
 4512 08da 6802     		.2byte	0x268
 4513 08dc 7E000000 		.4byte	0x7e
 4514 08e0 03       		.uleb128 0x3
 4515 08e1 91       		.byte	0x91
 4516 08e2 E079     		.sleb128 -800
 4517 08e4 1C       		.uleb128 0x1c
 4518 08e5 BA020000 		.4byte	.LASF135
 4519 08e9 01       		.byte	0x1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 105


 4520 08ea 6802     		.2byte	0x268
 4521 08ec 7E000000 		.4byte	0x7e
 4522 08f0 03       		.uleb128 0x3
 4523 08f1 91       		.byte	0x91
 4524 08f2 DC79     		.sleb128 -804
 4525 08f4 21       		.uleb128 0x21
 4526 08f5 06020000 		.4byte	.LASF136
 4527 08f9 01       		.byte	0x1
 4528 08fa 6802     		.2byte	0x268
 4529 08fc 7E000000 		.4byte	0x7e
 4530 0900 21       		.uleb128 0x21
 4531 0901 3F0A0000 		.4byte	.LASF137
 4532 0905 01       		.byte	0x1
 4533 0906 6802     		.2byte	0x268
 4534 0908 7E000000 		.4byte	0x7e
 4535 090c 1C       		.uleb128 0x1c
 4536 090d 62000000 		.4byte	.LASF138
 4537 0911 01       		.byte	0x1
 4538 0912 6802     		.2byte	0x268
 4539 0914 7E000000 		.4byte	0x7e
 4540 0918 03       		.uleb128 0x3
 4541 0919 91       		.byte	0x91
 4542 091a D879     		.sleb128 -808
 4543 091c 22       		.uleb128 0x22
 4544 091d 00000000 		.4byte	.Ldebug_ranges0+0
 4545 0921 1C       		.uleb128 0x1c
 4546 0922 71020000 		.4byte	.LASF139
 4547 0926 01       		.byte	0x1
 4548 0927 9302     		.2byte	0x293
 4549 0929 7D040000 		.4byte	0x47d
 4550 092d 03       		.uleb128 0x3
 4551 092e 91       		.byte	0x91
 4552 092f F478     		.sleb128 -908
 4553 0931 00       		.byte	0
 4554 0932 00       		.byte	0
 4555 0933 08       		.uleb128 0x8
 4556 0934 03010000 		.4byte	0x103
 4557 0938 43090000 		.4byte	0x943
 4558 093c 09       		.uleb128 0x9
 4559 093d 11010000 		.4byte	0x111
 4560 0941 C7       		.byte	0xc7
 4561 0942 00       		.byte	0
 4562 0943 1F       		.uleb128 0x1f
 4563 0944 E9020000 		.4byte	.LASF140
 4564 0948 01       		.byte	0x1
 4565 0949 1003     		.2byte	0x310
 4566 094b 00000000 		.4byte	.LFB82
 4567 094f 68010000 		.4byte	.LFE82-.LFB82
 4568 0953 01       		.uleb128 0x1
 4569 0954 9C       		.byte	0x9c
 4570 0955 73090000 		.4byte	0x973
 4571 0959 14       		.uleb128 0x14
 4572 095a DA000000 		.4byte	.LBB12
 4573 095e 38000000 		.4byte	.LBE12-.LBB12
 4574 0962 1C       		.uleb128 0x1c
 4575 0963 03080000 		.4byte	.LASF141
 4576 0967 01       		.byte	0x1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 106


 4577 0968 3E03     		.2byte	0x33e
 4578 096a 52070000 		.4byte	0x752
 4579 096e 02       		.uleb128 0x2
 4580 096f 91       		.byte	0x91
 4581 0970 6C       		.sleb128 -20
 4582 0971 00       		.byte	0
 4583 0972 00       		.byte	0
 4584 0973 1B       		.uleb128 0x1b
 4585 0974 48030000 		.4byte	.LASF142
 4586 0978 01       		.byte	0x1
 4587 0979 5103     		.2byte	0x351
 4588 097b 57000000 		.4byte	0x57
 4589 097f 00000000 		.4byte	.LFB83
 4590 0983 44010000 		.4byte	.LFE83-.LFB83
 4591 0987 01       		.uleb128 0x1
 4592 0988 9C       		.byte	0x9c
 4593 0989 2F0A0000 		.4byte	0xa2f
 4594 098d 1C       		.uleb128 0x1c
 4595 098e F4040000 		.4byte	.LASF143
 4596 0992 01       		.byte	0x1
 4597 0993 5C03     		.2byte	0x35c
 4598 0995 57000000 		.4byte	0x57
 4599 0999 02       		.uleb128 0x2
 4600 099a 91       		.byte	0x91
 4601 099b 74       		.sleb128 -12
 4602 099c 14       		.uleb128 0x14
 4603 099d 30000000 		.4byte	.LBB13
 4604 09a1 DE000000 		.4byte	.LBE13-.LBB13
 4605 09a5 1C       		.uleb128 0x1c
 4606 09a6 0D030000 		.4byte	.LASF103
 4607 09aa 01       		.byte	0x1
 4608 09ab 6103     		.2byte	0x361
 4609 09ad 2F0A0000 		.4byte	0xa2f
 4610 09b1 02       		.uleb128 0x2
 4611 09b2 91       		.byte	0x91
 4612 09b3 54       		.sleb128 -44
 4613 09b4 1A       		.uleb128 0x1a
 4614 09b5 7400     		.ascii	"t\000"
 4615 09b7 01       		.byte	0x1
 4616 09b8 6703     		.2byte	0x367
 4617 09ba 39010000 		.4byte	0x139
 4618 09be 03       		.uleb128 0x3
 4619 09bf 91       		.byte	0x91
 4620 09c0 947F     		.sleb128 -108
 4621 09c2 1C       		.uleb128 0x1c
 4622 09c3 51020000 		.4byte	.LASF144
 4623 09c7 01       		.byte	0x1
 4624 09c8 6A03     		.2byte	0x36a
 4625 09ca 7E000000 		.4byte	0x7e
 4626 09ce 02       		.uleb128 0x2
 4627 09cf 91       		.byte	0x91
 4628 09d0 50       		.sleb128 -48
 4629 09d1 1C       		.uleb128 0x1c
 4630 09d2 CC050000 		.4byte	.LASF145
 4631 09d6 01       		.byte	0x1
 4632 09d7 6A03     		.2byte	0x36a
 4633 09d9 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 107


 4634 09dd 02       		.uleb128 0x2
 4635 09de 91       		.byte	0x91
 4636 09df 4C       		.sleb128 -52
 4637 09e0 1A       		.uleb128 0x1a
 4638 09e1 64617900 		.ascii	"day\000"
 4639 09e5 01       		.byte	0x1
 4640 09e6 6A03     		.2byte	0x36a
 4641 09e8 7E000000 		.4byte	0x7e
 4642 09ec 02       		.uleb128 0x2
 4643 09ed 91       		.byte	0x91
 4644 09ee 48       		.sleb128 -56
 4645 09ef 1C       		.uleb128 0x1c
 4646 09f0 50060000 		.4byte	.LASF146
 4647 09f4 01       		.byte	0x1
 4648 09f5 6A03     		.2byte	0x36a
 4649 09f7 7E000000 		.4byte	0x7e
 4650 09fb 02       		.uleb128 0x2
 4651 09fc 91       		.byte	0x91
 4652 09fd 44       		.sleb128 -60
 4653 09fe 1C       		.uleb128 0x1c
 4654 09ff F7080000 		.4byte	.LASF147
 4655 0a03 01       		.byte	0x1
 4656 0a04 6A03     		.2byte	0x36a
 4657 0a06 7E000000 		.4byte	0x7e
 4658 0a0a 02       		.uleb128 0x2
 4659 0a0b 91       		.byte	0x91
 4660 0a0c 40       		.sleb128 -64
 4661 0a0d 1C       		.uleb128 0x1c
 4662 0a0e 4A020000 		.4byte	.LASF148
 4663 0a12 01       		.byte	0x1
 4664 0a13 6A03     		.2byte	0x36a
 4665 0a15 7E000000 		.4byte	0x7e
 4666 0a19 03       		.uleb128 0x3
 4667 0a1a 91       		.byte	0x91
 4668 0a1b BC7F     		.sleb128 -68
 4669 0a1d 1C       		.uleb128 0x1c
 4670 0a1e 0C000000 		.4byte	.LASF149
 4671 0a22 01       		.byte	0x1
 4672 0a23 6A03     		.2byte	0x36a
 4673 0a25 7E000000 		.4byte	0x7e
 4674 0a29 03       		.uleb128 0x3
 4675 0a2a 91       		.byte	0x91
 4676 0a2b B87F     		.sleb128 -72
 4677 0a2d 00       		.byte	0
 4678 0a2e 00       		.byte	0
 4679 0a2f 08       		.uleb128 0x8
 4680 0a30 03010000 		.4byte	0x103
 4681 0a34 3F0A0000 		.4byte	0xa3f
 4682 0a38 09       		.uleb128 0x9
 4683 0a39 11010000 		.4byte	0x111
 4684 0a3d 1D       		.byte	0x1d
 4685 0a3e 00       		.byte	0
 4686 0a3f 23       		.uleb128 0x23
 4687 0a40 9B020000 		.4byte	.LASF150
 4688 0a44 01       		.byte	0x1
 4689 0a45 8A03     		.2byte	0x38a
 4690 0a47 AD000000 		.4byte	0xad
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 108


 4691 0a4b 00000000 		.4byte	.LFB84
 4692 0a4f 14000000 		.4byte	.LFE84-.LFB84
 4693 0a53 01       		.uleb128 0x1
 4694 0a54 9C       		.byte	0x9c
 4695 0a55 1D       		.uleb128 0x1d
 4696 0a56 81030000 		.4byte	.LASF151
 4697 0a5a 01       		.byte	0x1
 4698 0a5b 8F03     		.2byte	0x38f
 4699 0a5d 00000000 		.4byte	.LFB85
 4700 0a61 1A000000 		.4byte	.LFE85-.LFB85
 4701 0a65 01       		.uleb128 0x1
 4702 0a66 9C       		.byte	0x9c
 4703 0a67 1D       		.uleb128 0x1d
 4704 0a68 40010000 		.4byte	.LASF152
 4705 0a6c 01       		.byte	0x1
 4706 0a6d 9C03     		.2byte	0x39c
 4707 0a6f 00000000 		.4byte	.LFB86
 4708 0a73 2A000000 		.4byte	.LFE86-.LFB86
 4709 0a77 01       		.uleb128 0x1
 4710 0a78 9C       		.byte	0x9c
 4711 0a79 1B       		.uleb128 0x1b
 4712 0a7a 1C070000 		.4byte	.LASF153
 4713 0a7e 01       		.byte	0x1
 4714 0a7f AF03     		.2byte	0x3af
 4715 0a81 43030000 		.4byte	0x343
 4716 0a85 00000000 		.4byte	.LFB87
 4717 0a89 7C020000 		.4byte	.LFE87-.LFB87
 4718 0a8d 01       		.uleb128 0x1
 4719 0a8e 9C       		.byte	0x9c
 4720 0a8f 220B0000 		.4byte	0xb22
 4721 0a93 1A       		.uleb128 0x1a
 4722 0a94 67707300 		.ascii	"gps\000"
 4723 0a98 01       		.byte	0x1
 4724 0a99 B003     		.2byte	0x3b0
 4725 0a9b 43030000 		.4byte	0x343
 4726 0a9f 02       		.uleb128 0x2
 4727 0aa0 91       		.byte	0x91
 4728 0aa1 4C       		.sleb128 -52
 4729 0aa2 1C       		.uleb128 0x1c
 4730 0aa3 660A0000 		.4byte	.LASF154
 4731 0aa7 01       		.byte	0x1
 4732 0aa8 BC03     		.2byte	0x3bc
 4733 0aaa 57000000 		.4byte	0x57
 4734 0aae 02       		.uleb128 0x2
 4735 0aaf 91       		.byte	0x91
 4736 0ab0 68       		.sleb128 -24
 4737 0ab1 1C       		.uleb128 0x1c
 4738 0ab2 08060000 		.4byte	.LASF155
 4739 0ab6 01       		.byte	0x1
 4740 0ab7 E303     		.2byte	0x3e3
 4741 0ab9 AD000000 		.4byte	0xad
 4742 0abd 02       		.uleb128 0x2
 4743 0abe 91       		.byte	0x91
 4744 0abf 67       		.sleb128 -25
 4745 0ac0 1A       		.uleb128 0x1a
 4746 0ac1 6C617400 		.ascii	"lat\000"
 4747 0ac5 01       		.byte	0x1
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 109


 4748 0ac6 EF03     		.2byte	0x3ef
 4749 0ac8 F5000000 		.4byte	0xf5
 4750 0acc 02       		.uleb128 0x2
 4751 0acd 91       		.byte	0x91
 4752 0ace 48       		.sleb128 -56
 4753 0acf 1A       		.uleb128 0x1a
 4754 0ad0 6C6F6E00 		.ascii	"lon\000"
 4755 0ad4 01       		.byte	0x1
 4756 0ad5 F003     		.2byte	0x3f0
 4757 0ad7 F5000000 		.4byte	0xf5
 4758 0adb 02       		.uleb128 0x2
 4759 0adc 91       		.byte	0x91
 4760 0add 44       		.sleb128 -60
 4761 0ade 1A       		.uleb128 0x1a
 4762 0adf 616C7400 		.ascii	"alt\000"
 4763 0ae3 01       		.byte	0x1
 4764 0ae4 F103     		.2byte	0x3f1
 4765 0ae6 F5000000 		.4byte	0xf5
 4766 0aea 02       		.uleb128 0x2
 4767 0aeb 91       		.byte	0x91
 4768 0aec 40       		.sleb128 -64
 4769 0aed 1A       		.uleb128 0x1a
 4770 0aee 733100   		.ascii	"s1\000"
 4771 0af1 01       		.byte	0x1
 4772 0af2 F503     		.2byte	0x3f5
 4773 0af4 18010000 		.4byte	0x118
 4774 0af8 02       		.uleb128 0x2
 4775 0af9 91       		.byte	0x91
 4776 0afa 60       		.sleb128 -32
 4777 0afb 1C       		.uleb128 0x1c
 4778 0afc 35060000 		.4byte	.LASF116
 4779 0b00 01       		.byte	0x1
 4780 0b01 F803     		.2byte	0x3f8
 4781 0b03 7E000000 		.4byte	0x7e
 4782 0b07 02       		.uleb128 0x2
 4783 0b08 91       		.byte	0x91
 4784 0b09 5C       		.sleb128 -36
 4785 0b0a 14       		.uleb128 0x14
 4786 0b0b B4000000 		.4byte	.LBB14
 4787 0b0f 38000000 		.4byte	.LBE14-.LBB14
 4788 0b13 1A       		.uleb128 0x1a
 4789 0b14 6900     		.ascii	"i\000"
 4790 0b16 01       		.byte	0x1
 4791 0b17 E403     		.2byte	0x3e4
 4792 0b19 B9000000 		.4byte	0xb9
 4793 0b1d 02       		.uleb128 0x2
 4794 0b1e 91       		.byte	0x91
 4795 0b1f 6E       		.sleb128 -18
 4796 0b20 00       		.byte	0
 4797 0b21 00       		.byte	0
 4798 0b22 24       		.uleb128 0x24
 4799 0b23 8E010000 		.4byte	.LASF156
 4800 0b27 0A       		.byte	0xa
 4801 0b28 1207     		.2byte	0x712
 4802 0b2a 2E0B0000 		.4byte	0xb2e
 4803 0b2e 0F       		.uleb128 0xf
 4804 0b2f 97000000 		.4byte	0x97
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 110


 4805 0b33 25       		.uleb128 0x25
 4806 0b34 48000000 		.4byte	.LASF157
 4807 0b38 07       		.byte	0x7
 4808 0b39 11       		.byte	0x11
 4809 0b3a CF030000 		.4byte	0x3cf
 4810 0b3e 05       		.uleb128 0x5
 4811 0b3f 03       		.byte	0x3
 4812 0b40 00000000 		.4byte	buffer_overflow
 4813 0b44 25       		.uleb128 0x25
 4814 0b45 7C050000 		.4byte	.LASF158
 4815 0b49 07       		.byte	0x7
 4816 0b4a 22       		.byte	0x22
 4817 0b4b B9000000 		.4byte	0xb9
 4818 0b4f 05       		.uleb128 0x5
 4819 0b50 03       		.byte	0x3
 4820 0b51 00000000 		.4byte	dataPointsInStack
 4821 0b55 25       		.uleb128 0x25
 4822 0b56 7B090000 		.4byte	.LASF159
 4823 0b5a 07       		.byte	0x7
 4824 0b5b 23       		.byte	0x23
 4825 0b5c B9000000 		.4byte	0xb9
 4826 0b60 05       		.uleb128 0x5
 4827 0b61 03       		.byte	0x3
 4828 0b62 00000000 		.4byte	dataPointsInStackDesired
 4829 0b66 08       		.uleb128 0x8
 4830 0b67 47020000 		.4byte	0x247
 4831 0b6b 760B0000 		.4byte	0xb76
 4832 0b6f 09       		.uleb128 0x9
 4833 0b70 11010000 		.4byte	0x111
 4834 0b74 95       		.byte	0x95
 4835 0b75 00       		.byte	0
 4836 0b76 25       		.uleb128 0x25
 4837 0b77 49040000 		.4byte	.LASF160
 4838 0b7b 07       		.byte	0x7
 4839 0b7c 24       		.byte	0x24
 4840 0b7d 660B0000 		.4byte	0xb66
 4841 0b81 05       		.uleb128 0x5
 4842 0b82 03       		.byte	0x3
 4843 0b83 00000000 		.4byte	data
 4844 0b87 25       		.uleb128 0x25
 4845 0b88 70010000 		.4byte	.LASF161
 4846 0b8c 08       		.byte	0x8
 4847 0b8d 20       		.byte	0x20
 4848 0b8e AD000000 		.4byte	0xad
 4849 0b92 05       		.uleb128 0x5
 4850 0b93 03       		.byte	0x3
 4851 0b94 00000000 		.4byte	modem_state
 4852 0b98 25       		.uleb128 0x25
 4853 0b99 72080000 		.4byte	.LASF162
 4854 0b9d 08       		.byte	0x8
 4855 0b9e 71       		.byte	0x71
 4856 0b9f DD000000 		.4byte	0xdd
 4857 0ba3 05       		.uleb128 0x5
 4858 0ba4 03       		.byte	0x3
 4859 0ba5 00000000 		.4byte	modem_start_time_stamp
 4860 0ba9 25       		.uleb128 0x25
 4861 0baa 5F040000 		.4byte	.LASF77
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 111


 4862 0bae 08       		.byte	0x8
 4863 0baf 72       		.byte	0x72
 4864 0bb0 7F020000 		.4byte	0x27f
 4865 0bb4 05       		.uleb128 0x5
 4866 0bb5 03       		.byte	0x3
 4867 0bb6 00000000 		.4byte	modem_info
 4868 0bba 25       		.uleb128 0x25
 4869 0bbb 9B010000 		.4byte	.LASF163
 4870 0bbf 08       		.byte	0x8
 4871 0bc0 73       		.byte	0x73
 4872 0bc1 F3020000 		.4byte	0x2f3
 4873 0bc5 05       		.uleb128 0x5
 4874 0bc6 03       		.byte	0x3
 4875 0bc7 00000000 		.4byte	modem_stats
 4876 0bcb 25       		.uleb128 0x25
 4877 0bcc 3B060000 		.4byte	.LASF164
 4878 0bd0 08       		.byte	0x8
 4879 0bd1 74       		.byte	0x74
 4880 0bd2 D6030000 		.4byte	0x3d6
 4881 0bd6 05       		.uleb128 0x5
 4882 0bd7 03       		.byte	0x3
 4883 0bd8 00000000 		.4byte	updatable_parameters
 4884 0bdc 25       		.uleb128 0x25
 4885 0bdd CC030000 		.4byte	.LASF165
 4886 0be1 0B       		.byte	0xb
 4887 0be2 07       		.byte	0x7
 4888 0be3 AD000000 		.4byte	0xad
 4889 0be7 05       		.uleb128 0x5
 4890 0be8 03       		.byte	0x3
 4891 0be9 00000000 		.4byte	App_LED_enabled
 4892 0bed 25       		.uleb128 0x25
 4893 0bee A30A0000 		.4byte	.LASF166
 4894 0bf2 0B       		.byte	0xb
 4895 0bf3 08       		.byte	0x8
 4896 0bf4 7D040000 		.4byte	0x47d
 4897 0bf8 05       		.uleb128 0x5
 4898 0bf9 03       		.byte	0x3
 4899 0bfa 00000000 		.4byte	app_led_inbox
 4900 0bfe 25       		.uleb128 0x25
 4901 0bff BE070000 		.4byte	.LASF167
 4902 0c03 0C       		.byte	0xc
 4903 0c04 25       		.byte	0x25
 4904 0c05 7D040000 		.4byte	0x47d
 4905 0c09 05       		.uleb128 0x5
 4906 0c0a 03       		.byte	0x3
 4907 0c0b 00000000 		.4byte	level_sensor_inbox
 4908 0c0f 25       		.uleb128 0x25
 4909 0c10 66090000 		.4byte	.LASF168
 4910 0c14 0C       		.byte	0xc
 4911 0c15 27       		.byte	0x27
 4912 0c16 CF030000 		.4byte	0x3cf
 4913 0c1a 05       		.uleb128 0x5
 4914 0c1b 03       		.byte	0x3
 4915 0c1c 00000000 		.4byte	level_sensor_enabled
 4916 0c20 25       		.uleb128 0x25
 4917 0c21 3B020000 		.4byte	.LASF169
 4918 0c25 0D       		.byte	0xd
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 112


 4919 0c26 2A       		.byte	0x2a
 4920 0c27 E9000000 		.4byte	0xe9
 4921 0c2b 05       		.uleb128 0x5
 4922 0c2c 03       		.byte	0x3
 4923 0c2d 00000000 		.4byte	valve_diameter
 4924 0c31 25       		.uleb128 0x25
 4925 0c32 9D000000 		.4byte	.LASF170
 4926 0c36 0D       		.byte	0xd
 4927 0c37 2B       		.byte	0x2b
 4928 0c38 52070000 		.4byte	0x752
 4929 0c3c 05       		.uleb128 0x5
 4930 0c3d 03       		.byte	0x3
 4931 0c3e 00000000 		.4byte	valve_type
 4932 0c42 25       		.uleb128 0x25
 4933 0c43 0E090000 		.4byte	.LASF171
 4934 0c47 0D       		.byte	0xd
 4935 0c48 30       		.byte	0x30
 4936 0c49 AD000000 		.4byte	0xad
 4937 0c4d 05       		.uleb128 0x5
 4938 0c4e 03       		.byte	0x3
 4939 0c4f 00000000 		.4byte	valve_enabled
 4940 0c53 25       		.uleb128 0x25
 4941 0c54 020A0000 		.4byte	.LASF172
 4942 0c58 0D       		.byte	0xd
 4943 0c59 31       		.byte	0x31
 4944 0c5a 7D040000 		.4byte	0x47d
 4945 0c5e 05       		.uleb128 0x5
 4946 0c5f 03       		.byte	0x3
 4947 0c60 00000000 		.4byte	valve_inbox
 4948 0c64 25       		.uleb128 0x25
 4949 0c65 34000000 		.4byte	.LASF173
 4950 0c69 0E       		.byte	0xe
 4951 0c6a 69       		.byte	0x69
 4952 0c6b AD000000 		.4byte	0xad
 4953 0c6f 05       		.uleb128 0x5
 4954 0c70 03       		.byte	0x3
 4955 0c71 00000000 		.4byte	autosampler_enabled
 4956 0c75 25       		.uleb128 0x25
 4957 0c76 8E050000 		.4byte	.LASF174
 4958 0c7a 0E       		.byte	0xe
 4959 0c7b 6B       		.byte	0x6b
 4960 0c7c 7D040000 		.4byte	0x47d
 4961 0c80 05       		.uleb128 0x5
 4962 0c81 03       		.byte	0x3
 4963 0c82 00000000 		.4byte	autosampler_inbox
 4964 0c86 08       		.uleb128 0x8
 4965 0c87 03010000 		.4byte	0x103
 4966 0c8b 970C0000 		.4byte	0xc97
 4967 0c8f 26       		.uleb128 0x26
 4968 0c90 11010000 		.4byte	0x111
 4969 0c94 0F27     		.2byte	0x270f
 4970 0c96 00       		.byte	0
 4971 0c97 25       		.uleb128 0x25
 4972 0c98 7E0A0000 		.4byte	.LASF175
 4973 0c9c 09       		.byte	0x9
 4974 0c9d 1F       		.byte	0x1f
 4975 0c9e 860C0000 		.4byte	0xc86
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 113


 4976 0ca2 05       		.uleb128 0x5
 4977 0ca3 03       		.byte	0x3
 4978 0ca4 00000000 		.4byte	http_request
 4979 0ca8 25       		.uleb128 0x25
 4980 0ca9 16020000 		.4byte	.LASF176
 4981 0cad 09       		.byte	0x9
 4982 0cae 20       		.byte	0x20
 4983 0caf 860C0000 		.4byte	0xc86
 4984 0cb3 05       		.uleb128 0x5
 4985 0cb4 03       		.byte	0x3
 4986 0cb5 00000000 		.4byte	http_body
 4987 0cb9 25       		.uleb128 0x25
 4988 0cba 1C080000 		.4byte	.LASF177
 4989 0cbe 09       		.byte	0x9
 4990 0cbf 21       		.byte	0x21
 4991 0cc0 33090000 		.4byte	0x933
 4992 0cc4 05       		.uleb128 0x5
 4993 0cc5 03       		.byte	0x3
 4994 0cc6 00000000 		.4byte	http_route
 4995 0cca 25       		.uleb128 0x25
 4996 0ccb CF080000 		.4byte	.LASF178
 4997 0ccf 09       		.byte	0x9
 4998 0cd0 48       		.byte	0x48
 4999 0cd1 51040000 		.4byte	0x451
 5000 0cd5 05       		.uleb128 0x5
 5001 0cd6 03       		.byte	0x3
 5002 0cd7 00000000 		.4byte	system_info
 5003 0cdb 25       		.uleb128 0x25
 5004 0cdc E6060000 		.4byte	.LASF179
 5005 0ce0 09       		.byte	0x9
 5006 0ce1 5A       		.byte	0x5a
 5007 0ce2 8D040000 		.4byte	0x48d
 5008 0ce6 05       		.uleb128 0x5
 5009 0ce7 03       		.byte	0x3
 5010 0ce8 00000000 		.4byte	system_settings
 5011 0cec 25       		.uleb128 0x25
 5012 0ced 81010000 		.4byte	.LASF180
 5013 0cf1 09       		.byte	0x9
 5014 0cf2 76       		.byte	0x76
 5015 0cf3 1A040000 		.4byte	0x41a
 5016 0cf7 05       		.uleb128 0x5
 5017 0cf8 03       		.byte	0x3
 5018 0cf9 00000000 		.4byte	alarmMeasure
 5019 0cfd 25       		.uleb128 0x25
 5020 0cfe D5010000 		.4byte	.LASF181
 5021 0d02 09       		.byte	0x9
 5022 0d03 77       		.byte	0x77
 5023 0d04 AD000000 		.4byte	0xad
 5024 0d08 05       		.uleb128 0x5
 5025 0d09 03       		.byte	0x3
 5026 0d0a 00000000 		.4byte	timeToMeasure
 5027 0d0e 25       		.uleb128 0x25
 5028 0d0f C2030000 		.4byte	.LASF182
 5029 0d13 09       		.byte	0x9
 5030 0d14 78       		.byte	0x78
 5031 0d15 1A040000 		.4byte	0x41a
 5032 0d19 05       		.uleb128 0x5
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 114


 5033 0d1a 03       		.byte	0x3
 5034 0d1b 00000000 		.4byte	alarmSync
 5035 0d1f 25       		.uleb128 0x25
 5036 0d20 FB010000 		.4byte	.LASF183
 5037 0d24 09       		.byte	0x9
 5038 0d25 79       		.byte	0x79
 5039 0d26 AD000000 		.4byte	0xad
 5040 0d2a 05       		.uleb128 0x5
 5041 0d2b 03       		.byte	0x3
 5042 0d2c 00000000 		.4byte	timeToSync
 5043 0d30 25       		.uleb128 0x25
 5044 0d31 13060000 		.4byte	.LASF184
 5045 0d35 09       		.byte	0x9
 5046 0d36 7A       		.byte	0x7a
 5047 0d37 AD000000 		.4byte	0xad
 5048 0d3b 05       		.uleb128 0x5
 5049 0d3c 03       		.byte	0x3
 5050 0d3d 00000000 		.4byte	timeToSycnRemoteParams
 5051 0d41 27       		.uleb128 0x27
 5052 0d42 68657900 		.ascii	"hey\000"
 5053 0d46 09       		.byte	0x9
 5054 0d47 7B       		.byte	0x7b
 5055 0d48 AD000000 		.4byte	0xad
 5056 0d4c 05       		.uleb128 0x5
 5057 0d4d 03       		.byte	0x3
 5058 0d4e 00000000 		.4byte	hey
 5059 0d52 25       		.uleb128 0x25
 5060 0d53 09050000 		.4byte	.LASF185
 5061 0d57 09       		.byte	0x9
 5062 0d58 7F       		.byte	0x7f
 5063 0d59 1A040000 		.4byte	0x41a
 5064 0d5d 05       		.uleb128 0x5
 5065 0d5e 03       		.byte	0x3
 5066 0d5f 00000000 		.4byte	alarmAppLED
 5067 0d63 25       		.uleb128 0x25
 5068 0d64 CC020000 		.4byte	.LASF186
 5069 0d68 09       		.byte	0x9
 5070 0d69 80       		.byte	0x80
 5071 0d6a AD000000 		.4byte	0xad
 5072 0d6e 05       		.uleb128 0x5
 5073 0d6f 03       		.byte	0x3
 5074 0d70 00000000 		.4byte	timeToAppLED
 5075 0d74 25       		.uleb128 0x25
 5076 0d75 7C070000 		.4byte	.LASF187
 5077 0d79 09       		.byte	0x9
 5078 0d7a 82       		.byte	0x82
 5079 0d7b 1A040000 		.4byte	0x41a
 5080 0d7f 05       		.uleb128 0x5
 5081 0d80 03       		.byte	0x3
 5082 0d81 00000000 		.4byte	alarmLevelSensor
 5083 0d85 25       		.uleb128 0x25
 5084 0d86 54090000 		.4byte	.LASF188
 5085 0d8a 09       		.byte	0x9
 5086 0d8b 83       		.byte	0x83
 5087 0d8c AD000000 		.4byte	0xad
 5088 0d90 05       		.uleb128 0x5
 5089 0d91 03       		.byte	0x3
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 115


 5090 0d92 00000000 		.4byte	timeToLevelSensor
 5091 0d96 25       		.uleb128 0x25
 5092 0d97 56020000 		.4byte	.LASF189
 5093 0d9b 09       		.byte	0x9
 5094 0d9c 85       		.byte	0x85
 5095 0d9d 1A040000 		.4byte	0x41a
 5096 0da1 05       		.uleb128 0x5
 5097 0da2 03       		.byte	0x3
 5098 0da3 00000000 		.4byte	alarmDownstreamLevelSensor
 5099 0da7 25       		.uleb128 0x25
 5100 0da8 CD090000 		.4byte	.LASF190
 5101 0dac 09       		.byte	0x9
 5102 0dad 86       		.byte	0x86
 5103 0dae AD000000 		.4byte	0xad
 5104 0db2 05       		.uleb128 0x5
 5105 0db3 03       		.byte	0x3
 5106 0db4 00000000 		.4byte	timeToDownstreamLevelSensor
 5107 0db8 25       		.uleb128 0x25
 5108 0db9 08080000 		.4byte	.LASF191
 5109 0dbd 09       		.byte	0x9
 5110 0dbe 88       		.byte	0x88
 5111 0dbf 1A040000 		.4byte	0x41a
 5112 0dc3 05       		.uleb128 0x5
 5113 0dc4 03       		.byte	0x3
 5114 0dc5 00000000 		.4byte	alarmValve
 5115 0dc9 25       		.uleb128 0x25
 5116 0dca 00000000 		.4byte	.LASF192
 5117 0dce 09       		.byte	0x9
 5118 0dcf 89       		.byte	0x89
 5119 0dd0 AD000000 		.4byte	0xad
 5120 0dd4 05       		.uleb128 0x5
 5121 0dd5 03       		.byte	0x3
 5122 0dd6 00000000 		.4byte	timeToValve
 5123 0dda 25       		.uleb128 0x25
 5124 0ddb F1090000 		.4byte	.LASF193
 5125 0ddf 09       		.byte	0x9
 5126 0de0 8B       		.byte	0x8b
 5127 0de1 1A040000 		.4byte	0x41a
 5128 0de5 05       		.uleb128 0x5
 5129 0de6 03       		.byte	0x3
 5130 0de7 00000000 		.4byte	alarmAutosampler
 5131 0deb 25       		.uleb128 0x25
 5132 0dec 8B000000 		.4byte	.LASF194
 5133 0df0 09       		.byte	0x9
 5134 0df1 8C       		.byte	0x8c
 5135 0df2 AD000000 		.4byte	0xad
 5136 0df6 05       		.uleb128 0x5
 5137 0df7 03       		.byte	0x3
 5138 0df8 00000000 		.4byte	timeToAutosampler
 5139 0dfc 08       		.uleb128 0x8
 5140 0dfd 03010000 		.4byte	0x103
 5141 0e01 0D0E0000 		.4byte	0xe0d
 5142 0e05 26       		.uleb128 0x26
 5143 0e06 11010000 		.4byte	0x111
 5144 0e0a FF03     		.2byte	0x3ff
 5145 0e0c 00       		.byte	0
 5146 0e0d 25       		.uleb128 0x25
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 116


 5147 0e0e 89080000 		.4byte	.LASF195
 5148 0e12 01       		.byte	0x1
 5149 0e13 05       		.byte	0x5
 5150 0e14 FC0D0000 		.4byte	0xdfc
 5151 0e18 05       		.uleb128 0x5
 5152 0e19 03       		.byte	0x3
 5153 0e1a 00000000 		.4byte	uart_received_string
 5154 0e1e 25       		.uleb128 0x25
 5155 0e1f 3A080000 		.4byte	.LASF196
 5156 0e23 01       		.byte	0x1
 5157 0e24 06       		.byte	0x6
 5158 0e25 D1000000 		.4byte	0xd1
 5159 0e29 05       		.uleb128 0x5
 5160 0e2a 03       		.byte	0x3
 5161 0e2b 00000000 		.4byte	uart_string_index
 5162 0e2f 00       		.byte	0
 5163              		.section	.debug_abbrev,"",%progbits
 5164              	.Ldebug_abbrev0:
 5165 0000 01       		.uleb128 0x1
 5166 0001 11       		.uleb128 0x11
 5167 0002 01       		.byte	0x1
 5168 0003 25       		.uleb128 0x25
 5169 0004 0E       		.uleb128 0xe
 5170 0005 13       		.uleb128 0x13
 5171 0006 0B       		.uleb128 0xb
 5172 0007 03       		.uleb128 0x3
 5173 0008 0E       		.uleb128 0xe
 5174 0009 1B       		.uleb128 0x1b
 5175 000a 0E       		.uleb128 0xe
 5176 000b 55       		.uleb128 0x55
 5177 000c 17       		.uleb128 0x17
 5178 000d 11       		.uleb128 0x11
 5179 000e 01       		.uleb128 0x1
 5180 000f 10       		.uleb128 0x10
 5181 0010 17       		.uleb128 0x17
 5182 0011 00       		.byte	0
 5183 0012 00       		.byte	0
 5184 0013 02       		.uleb128 0x2
 5185 0014 24       		.uleb128 0x24
 5186 0015 00       		.byte	0
 5187 0016 0B       		.uleb128 0xb
 5188 0017 0B       		.uleb128 0xb
 5189 0018 3E       		.uleb128 0x3e
 5190 0019 0B       		.uleb128 0xb
 5191 001a 03       		.uleb128 0x3
 5192 001b 0E       		.uleb128 0xe
 5193 001c 00       		.byte	0
 5194 001d 00       		.byte	0
 5195 001e 03       		.uleb128 0x3
 5196 001f 16       		.uleb128 0x16
 5197 0020 00       		.byte	0
 5198 0021 03       		.uleb128 0x3
 5199 0022 0E       		.uleb128 0xe
 5200 0023 3A       		.uleb128 0x3a
 5201 0024 0B       		.uleb128 0xb
 5202 0025 3B       		.uleb128 0x3b
 5203 0026 0B       		.uleb128 0xb
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 117


 5204 0027 49       		.uleb128 0x49
 5205 0028 13       		.uleb128 0x13
 5206 0029 00       		.byte	0
 5207 002a 00       		.byte	0
 5208 002b 04       		.uleb128 0x4
 5209 002c 24       		.uleb128 0x24
 5210 002d 00       		.byte	0
 5211 002e 0B       		.uleb128 0xb
 5212 002f 0B       		.uleb128 0xb
 5213 0030 3E       		.uleb128 0x3e
 5214 0031 0B       		.uleb128 0xb
 5215 0032 03       		.uleb128 0x3
 5216 0033 08       		.uleb128 0x8
 5217 0034 00       		.byte	0
 5218 0035 00       		.byte	0
 5219 0036 05       		.uleb128 0x5
 5220 0037 16       		.uleb128 0x16
 5221 0038 00       		.byte	0
 5222 0039 03       		.uleb128 0x3
 5223 003a 0E       		.uleb128 0xe
 5224 003b 3A       		.uleb128 0x3a
 5225 003c 0B       		.uleb128 0xb
 5226 003d 3B       		.uleb128 0x3b
 5227 003e 05       		.uleb128 0x5
 5228 003f 49       		.uleb128 0x49
 5229 0040 13       		.uleb128 0x13
 5230 0041 00       		.byte	0
 5231 0042 00       		.byte	0
 5232 0043 06       		.uleb128 0x6
 5233 0044 0F       		.uleb128 0xf
 5234 0045 00       		.byte	0
 5235 0046 0B       		.uleb128 0xb
 5236 0047 0B       		.uleb128 0xb
 5237 0048 49       		.uleb128 0x49
 5238 0049 13       		.uleb128 0x13
 5239 004a 00       		.byte	0
 5240 004b 00       		.byte	0
 5241 004c 07       		.uleb128 0x7
 5242 004d 26       		.uleb128 0x26
 5243 004e 00       		.byte	0
 5244 004f 49       		.uleb128 0x49
 5245 0050 13       		.uleb128 0x13
 5246 0051 00       		.byte	0
 5247 0052 00       		.byte	0
 5248 0053 08       		.uleb128 0x8
 5249 0054 01       		.uleb128 0x1
 5250 0055 01       		.byte	0x1
 5251 0056 49       		.uleb128 0x49
 5252 0057 13       		.uleb128 0x13
 5253 0058 01       		.uleb128 0x1
 5254 0059 13       		.uleb128 0x13
 5255 005a 00       		.byte	0
 5256 005b 00       		.byte	0
 5257 005c 09       		.uleb128 0x9
 5258 005d 21       		.uleb128 0x21
 5259 005e 00       		.byte	0
 5260 005f 49       		.uleb128 0x49
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 118


 5261 0060 13       		.uleb128 0x13
 5262 0061 2F       		.uleb128 0x2f
 5263 0062 0B       		.uleb128 0xb
 5264 0063 00       		.byte	0
 5265 0064 00       		.byte	0
 5266 0065 0A       		.uleb128 0xa
 5267 0066 13       		.uleb128 0x13
 5268 0067 01       		.byte	0x1
 5269 0068 03       		.uleb128 0x3
 5270 0069 08       		.uleb128 0x8
 5271 006a 0B       		.uleb128 0xb
 5272 006b 0B       		.uleb128 0xb
 5273 006c 3A       		.uleb128 0x3a
 5274 006d 0B       		.uleb128 0xb
 5275 006e 3B       		.uleb128 0x3b
 5276 006f 0B       		.uleb128 0xb
 5277 0070 01       		.uleb128 0x1
 5278 0071 13       		.uleb128 0x13
 5279 0072 00       		.byte	0
 5280 0073 00       		.byte	0
 5281 0074 0B       		.uleb128 0xb
 5282 0075 0D       		.uleb128 0xd
 5283 0076 00       		.byte	0
 5284 0077 03       		.uleb128 0x3
 5285 0078 0E       		.uleb128 0xe
 5286 0079 3A       		.uleb128 0x3a
 5287 007a 0B       		.uleb128 0xb
 5288 007b 3B       		.uleb128 0x3b
 5289 007c 0B       		.uleb128 0xb
 5290 007d 49       		.uleb128 0x49
 5291 007e 13       		.uleb128 0x13
 5292 007f 38       		.uleb128 0x38
 5293 0080 0B       		.uleb128 0xb
 5294 0081 00       		.byte	0
 5295 0082 00       		.byte	0
 5296 0083 0C       		.uleb128 0xc
 5297 0084 13       		.uleb128 0x13
 5298 0085 01       		.byte	0x1
 5299 0086 0B       		.uleb128 0xb
 5300 0087 05       		.uleb128 0x5
 5301 0088 3A       		.uleb128 0x3a
 5302 0089 0B       		.uleb128 0xb
 5303 008a 3B       		.uleb128 0x3b
 5304 008b 0B       		.uleb128 0xb
 5305 008c 01       		.uleb128 0x1
 5306 008d 13       		.uleb128 0x13
 5307 008e 00       		.byte	0
 5308 008f 00       		.byte	0
 5309 0090 0D       		.uleb128 0xd
 5310 0091 13       		.uleb128 0x13
 5311 0092 01       		.byte	0x1
 5312 0093 0B       		.uleb128 0xb
 5313 0094 0B       		.uleb128 0xb
 5314 0095 3A       		.uleb128 0x3a
 5315 0096 0B       		.uleb128 0xb
 5316 0097 3B       		.uleb128 0x3b
 5317 0098 0B       		.uleb128 0xb
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 119


 5318 0099 01       		.uleb128 0x1
 5319 009a 13       		.uleb128 0x13
 5320 009b 00       		.byte	0
 5321 009c 00       		.byte	0
 5322 009d 0E       		.uleb128 0xe
 5323 009e 0D       		.uleb128 0xd
 5324 009f 00       		.byte	0
 5325 00a0 03       		.uleb128 0x3
 5326 00a1 08       		.uleb128 0x8
 5327 00a2 3A       		.uleb128 0x3a
 5328 00a3 0B       		.uleb128 0xb
 5329 00a4 3B       		.uleb128 0x3b
 5330 00a5 0B       		.uleb128 0xb
 5331 00a6 49       		.uleb128 0x49
 5332 00a7 13       		.uleb128 0x13
 5333 00a8 38       		.uleb128 0x38
 5334 00a9 0B       		.uleb128 0xb
 5335 00aa 00       		.byte	0
 5336 00ab 00       		.byte	0
 5337 00ac 0F       		.uleb128 0xf
 5338 00ad 35       		.uleb128 0x35
 5339 00ae 00       		.byte	0
 5340 00af 49       		.uleb128 0x49
 5341 00b0 13       		.uleb128 0x13
 5342 00b1 00       		.byte	0
 5343 00b2 00       		.byte	0
 5344 00b3 10       		.uleb128 0x10
 5345 00b4 2E       		.uleb128 0x2e
 5346 00b5 00       		.byte	0
 5347 00b6 3F       		.uleb128 0x3f
 5348 00b7 19       		.uleb128 0x19
 5349 00b8 03       		.uleb128 0x3
 5350 00b9 0E       		.uleb128 0xe
 5351 00ba 3A       		.uleb128 0x3a
 5352 00bb 0B       		.uleb128 0xb
 5353 00bc 3B       		.uleb128 0x3b
 5354 00bd 0B       		.uleb128 0xb
 5355 00be 27       		.uleb128 0x27
 5356 00bf 19       		.uleb128 0x19
 5357 00c0 11       		.uleb128 0x11
 5358 00c1 01       		.uleb128 0x1
 5359 00c2 12       		.uleb128 0x12
 5360 00c3 06       		.uleb128 0x6
 5361 00c4 40       		.uleb128 0x40
 5362 00c5 18       		.uleb128 0x18
 5363 00c6 9642     		.uleb128 0x2116
 5364 00c8 19       		.uleb128 0x19
 5365 00c9 00       		.byte	0
 5366 00ca 00       		.byte	0
 5367 00cb 11       		.uleb128 0x11
 5368 00cc 2E       		.uleb128 0x2e
 5369 00cd 00       		.byte	0
 5370 00ce 3F       		.uleb128 0x3f
 5371 00cf 19       		.uleb128 0x19
 5372 00d0 03       		.uleb128 0x3
 5373 00d1 0E       		.uleb128 0xe
 5374 00d2 3A       		.uleb128 0x3a
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 120


 5375 00d3 0B       		.uleb128 0xb
 5376 00d4 3B       		.uleb128 0x3b
 5377 00d5 0B       		.uleb128 0xb
 5378 00d6 11       		.uleb128 0x11
 5379 00d7 01       		.uleb128 0x1
 5380 00d8 12       		.uleb128 0x12
 5381 00d9 06       		.uleb128 0x6
 5382 00da 40       		.uleb128 0x40
 5383 00db 18       		.uleb128 0x18
 5384 00dc 9642     		.uleb128 0x2116
 5385 00de 19       		.uleb128 0x19
 5386 00df 00       		.byte	0
 5387 00e0 00       		.byte	0
 5388 00e1 12       		.uleb128 0x12
 5389 00e2 2E       		.uleb128 0x2e
 5390 00e3 01       		.byte	0x1
 5391 00e4 3F       		.uleb128 0x3f
 5392 00e5 19       		.uleb128 0x19
 5393 00e6 03       		.uleb128 0x3
 5394 00e7 0E       		.uleb128 0xe
 5395 00e8 3A       		.uleb128 0x3a
 5396 00e9 0B       		.uleb128 0xb
 5397 00ea 3B       		.uleb128 0x3b
 5398 00eb 0B       		.uleb128 0xb
 5399 00ec 49       		.uleb128 0x49
 5400 00ed 13       		.uleb128 0x13
 5401 00ee 11       		.uleb128 0x11
 5402 00ef 01       		.uleb128 0x1
 5403 00f0 12       		.uleb128 0x12
 5404 00f1 06       		.uleb128 0x6
 5405 00f2 40       		.uleb128 0x40
 5406 00f3 18       		.uleb128 0x18
 5407 00f4 9642     		.uleb128 0x2116
 5408 00f6 19       		.uleb128 0x19
 5409 00f7 01       		.uleb128 0x1
 5410 00f8 13       		.uleb128 0x13
 5411 00f9 00       		.byte	0
 5412 00fa 00       		.byte	0
 5413 00fb 13       		.uleb128 0x13
 5414 00fc 34       		.uleb128 0x34
 5415 00fd 00       		.byte	0
 5416 00fe 03       		.uleb128 0x3
 5417 00ff 0E       		.uleb128 0xe
 5418 0100 3A       		.uleb128 0x3a
 5419 0101 0B       		.uleb128 0xb
 5420 0102 3B       		.uleb128 0x3b
 5421 0103 0B       		.uleb128 0xb
 5422 0104 49       		.uleb128 0x49
 5423 0105 13       		.uleb128 0x13
 5424 0106 02       		.uleb128 0x2
 5425 0107 18       		.uleb128 0x18
 5426 0108 00       		.byte	0
 5427 0109 00       		.byte	0
 5428 010a 14       		.uleb128 0x14
 5429 010b 0B       		.uleb128 0xb
 5430 010c 01       		.byte	0x1
 5431 010d 11       		.uleb128 0x11
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 121


 5432 010e 01       		.uleb128 0x1
 5433 010f 12       		.uleb128 0x12
 5434 0110 06       		.uleb128 0x6
 5435 0111 00       		.byte	0
 5436 0112 00       		.byte	0
 5437 0113 15       		.uleb128 0x15
 5438 0114 2E       		.uleb128 0x2e
 5439 0115 01       		.byte	0x1
 5440 0116 3F       		.uleb128 0x3f
 5441 0117 19       		.uleb128 0x19
 5442 0118 03       		.uleb128 0x3
 5443 0119 0E       		.uleb128 0xe
 5444 011a 3A       		.uleb128 0x3a
 5445 011b 0B       		.uleb128 0xb
 5446 011c 3B       		.uleb128 0x3b
 5447 011d 0B       		.uleb128 0xb
 5448 011e 27       		.uleb128 0x27
 5449 011f 19       		.uleb128 0x19
 5450 0120 49       		.uleb128 0x49
 5451 0121 13       		.uleb128 0x13
 5452 0122 11       		.uleb128 0x11
 5453 0123 01       		.uleb128 0x1
 5454 0124 12       		.uleb128 0x12
 5455 0125 06       		.uleb128 0x6
 5456 0126 40       		.uleb128 0x40
 5457 0127 18       		.uleb128 0x18
 5458 0128 9642     		.uleb128 0x2116
 5459 012a 19       		.uleb128 0x19
 5460 012b 01       		.uleb128 0x1
 5461 012c 13       		.uleb128 0x13
 5462 012d 00       		.byte	0
 5463 012e 00       		.byte	0
 5464 012f 16       		.uleb128 0x16
 5465 0130 05       		.uleb128 0x5
 5466 0131 00       		.byte	0
 5467 0132 03       		.uleb128 0x3
 5468 0133 0E       		.uleb128 0xe
 5469 0134 3A       		.uleb128 0x3a
 5470 0135 0B       		.uleb128 0xb
 5471 0136 3B       		.uleb128 0x3b
 5472 0137 0B       		.uleb128 0xb
 5473 0138 49       		.uleb128 0x49
 5474 0139 13       		.uleb128 0x13
 5475 013a 02       		.uleb128 0x2
 5476 013b 18       		.uleb128 0x18
 5477 013c 00       		.byte	0
 5478 013d 00       		.byte	0
 5479 013e 17       		.uleb128 0x17
 5480 013f 34       		.uleb128 0x34
 5481 0140 00       		.byte	0
 5482 0141 03       		.uleb128 0x3
 5483 0142 08       		.uleb128 0x8
 5484 0143 3A       		.uleb128 0x3a
 5485 0144 0B       		.uleb128 0xb
 5486 0145 3B       		.uleb128 0x3b
 5487 0146 0B       		.uleb128 0xb
 5488 0147 49       		.uleb128 0x49
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 122


 5489 0148 13       		.uleb128 0x13
 5490 0149 02       		.uleb128 0x2
 5491 014a 18       		.uleb128 0x18
 5492 014b 00       		.byte	0
 5493 014c 00       		.byte	0
 5494 014d 18       		.uleb128 0x18
 5495 014e 2E       		.uleb128 0x2e
 5496 014f 01       		.byte	0x1
 5497 0150 3F       		.uleb128 0x3f
 5498 0151 19       		.uleb128 0x19
 5499 0152 03       		.uleb128 0x3
 5500 0153 0E       		.uleb128 0xe
 5501 0154 3A       		.uleb128 0x3a
 5502 0155 0B       		.uleb128 0xb
 5503 0156 3B       		.uleb128 0x3b
 5504 0157 05       		.uleb128 0x5
 5505 0158 27       		.uleb128 0x27
 5506 0159 19       		.uleb128 0x19
 5507 015a 49       		.uleb128 0x49
 5508 015b 13       		.uleb128 0x13
 5509 015c 11       		.uleb128 0x11
 5510 015d 01       		.uleb128 0x1
 5511 015e 12       		.uleb128 0x12
 5512 015f 06       		.uleb128 0x6
 5513 0160 40       		.uleb128 0x40
 5514 0161 18       		.uleb128 0x18
 5515 0162 9642     		.uleb128 0x2116
 5516 0164 19       		.uleb128 0x19
 5517 0165 01       		.uleb128 0x1
 5518 0166 13       		.uleb128 0x13
 5519 0167 00       		.byte	0
 5520 0168 00       		.byte	0
 5521 0169 19       		.uleb128 0x19
 5522 016a 05       		.uleb128 0x5
 5523 016b 00       		.byte	0
 5524 016c 03       		.uleb128 0x3
 5525 016d 0E       		.uleb128 0xe
 5526 016e 3A       		.uleb128 0x3a
 5527 016f 0B       		.uleb128 0xb
 5528 0170 3B       		.uleb128 0x3b
 5529 0171 05       		.uleb128 0x5
 5530 0172 49       		.uleb128 0x49
 5531 0173 13       		.uleb128 0x13
 5532 0174 02       		.uleb128 0x2
 5533 0175 18       		.uleb128 0x18
 5534 0176 00       		.byte	0
 5535 0177 00       		.byte	0
 5536 0178 1A       		.uleb128 0x1a
 5537 0179 34       		.uleb128 0x34
 5538 017a 00       		.byte	0
 5539 017b 03       		.uleb128 0x3
 5540 017c 08       		.uleb128 0x8
 5541 017d 3A       		.uleb128 0x3a
 5542 017e 0B       		.uleb128 0xb
 5543 017f 3B       		.uleb128 0x3b
 5544 0180 05       		.uleb128 0x5
 5545 0181 49       		.uleb128 0x49
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 123


 5546 0182 13       		.uleb128 0x13
 5547 0183 02       		.uleb128 0x2
 5548 0184 18       		.uleb128 0x18
 5549 0185 00       		.byte	0
 5550 0186 00       		.byte	0
 5551 0187 1B       		.uleb128 0x1b
 5552 0188 2E       		.uleb128 0x2e
 5553 0189 01       		.byte	0x1
 5554 018a 3F       		.uleb128 0x3f
 5555 018b 19       		.uleb128 0x19
 5556 018c 03       		.uleb128 0x3
 5557 018d 0E       		.uleb128 0xe
 5558 018e 3A       		.uleb128 0x3a
 5559 018f 0B       		.uleb128 0xb
 5560 0190 3B       		.uleb128 0x3b
 5561 0191 05       		.uleb128 0x5
 5562 0192 49       		.uleb128 0x49
 5563 0193 13       		.uleb128 0x13
 5564 0194 11       		.uleb128 0x11
 5565 0195 01       		.uleb128 0x1
 5566 0196 12       		.uleb128 0x12
 5567 0197 06       		.uleb128 0x6
 5568 0198 40       		.uleb128 0x40
 5569 0199 18       		.uleb128 0x18
 5570 019a 9642     		.uleb128 0x2116
 5571 019c 19       		.uleb128 0x19
 5572 019d 01       		.uleb128 0x1
 5573 019e 13       		.uleb128 0x13
 5574 019f 00       		.byte	0
 5575 01a0 00       		.byte	0
 5576 01a1 1C       		.uleb128 0x1c
 5577 01a2 34       		.uleb128 0x34
 5578 01a3 00       		.byte	0
 5579 01a4 03       		.uleb128 0x3
 5580 01a5 0E       		.uleb128 0xe
 5581 01a6 3A       		.uleb128 0x3a
 5582 01a7 0B       		.uleb128 0xb
 5583 01a8 3B       		.uleb128 0x3b
 5584 01a9 05       		.uleb128 0x5
 5585 01aa 49       		.uleb128 0x49
 5586 01ab 13       		.uleb128 0x13
 5587 01ac 02       		.uleb128 0x2
 5588 01ad 18       		.uleb128 0x18
 5589 01ae 00       		.byte	0
 5590 01af 00       		.byte	0
 5591 01b0 1D       		.uleb128 0x1d
 5592 01b1 2E       		.uleb128 0x2e
 5593 01b2 00       		.byte	0
 5594 01b3 3F       		.uleb128 0x3f
 5595 01b4 19       		.uleb128 0x19
 5596 01b5 03       		.uleb128 0x3
 5597 01b6 0E       		.uleb128 0xe
 5598 01b7 3A       		.uleb128 0x3a
 5599 01b8 0B       		.uleb128 0xb
 5600 01b9 3B       		.uleb128 0x3b
 5601 01ba 05       		.uleb128 0x5
 5602 01bb 11       		.uleb128 0x11
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 124


 5603 01bc 01       		.uleb128 0x1
 5604 01bd 12       		.uleb128 0x12
 5605 01be 06       		.uleb128 0x6
 5606 01bf 40       		.uleb128 0x40
 5607 01c0 18       		.uleb128 0x18
 5608 01c1 9642     		.uleb128 0x2116
 5609 01c3 19       		.uleb128 0x19
 5610 01c4 00       		.byte	0
 5611 01c5 00       		.byte	0
 5612 01c6 1E       		.uleb128 0x1e
 5613 01c7 2E       		.uleb128 0x2e
 5614 01c8 00       		.byte	0
 5615 01c9 3F       		.uleb128 0x3f
 5616 01ca 19       		.uleb128 0x19
 5617 01cb 03       		.uleb128 0x3
 5618 01cc 0E       		.uleb128 0xe
 5619 01cd 3A       		.uleb128 0x3a
 5620 01ce 0B       		.uleb128 0xb
 5621 01cf 3B       		.uleb128 0x3b
 5622 01d0 05       		.uleb128 0x5
 5623 01d1 49       		.uleb128 0x49
 5624 01d2 13       		.uleb128 0x13
 5625 01d3 11       		.uleb128 0x11
 5626 01d4 01       		.uleb128 0x1
 5627 01d5 12       		.uleb128 0x12
 5628 01d6 06       		.uleb128 0x6
 5629 01d7 40       		.uleb128 0x40
 5630 01d8 18       		.uleb128 0x18
 5631 01d9 9642     		.uleb128 0x2116
 5632 01db 19       		.uleb128 0x19
 5633 01dc 00       		.byte	0
 5634 01dd 00       		.byte	0
 5635 01de 1F       		.uleb128 0x1f
 5636 01df 2E       		.uleb128 0x2e
 5637 01e0 01       		.byte	0x1
 5638 01e1 3F       		.uleb128 0x3f
 5639 01e2 19       		.uleb128 0x19
 5640 01e3 03       		.uleb128 0x3
 5641 01e4 0E       		.uleb128 0xe
 5642 01e5 3A       		.uleb128 0x3a
 5643 01e6 0B       		.uleb128 0xb
 5644 01e7 3B       		.uleb128 0x3b
 5645 01e8 05       		.uleb128 0x5
 5646 01e9 11       		.uleb128 0x11
 5647 01ea 01       		.uleb128 0x1
 5648 01eb 12       		.uleb128 0x12
 5649 01ec 06       		.uleb128 0x6
 5650 01ed 40       		.uleb128 0x40
 5651 01ee 18       		.uleb128 0x18
 5652 01ef 9642     		.uleb128 0x2116
 5653 01f1 19       		.uleb128 0x19
 5654 01f2 01       		.uleb128 0x1
 5655 01f3 13       		.uleb128 0x13
 5656 01f4 00       		.byte	0
 5657 01f5 00       		.byte	0
 5658 01f6 20       		.uleb128 0x20
 5659 01f7 2E       		.uleb128 0x2e
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 125


 5660 01f8 00       		.byte	0
 5661 01f9 3F       		.uleb128 0x3f
 5662 01fa 19       		.uleb128 0x19
 5663 01fb 03       		.uleb128 0x3
 5664 01fc 0E       		.uleb128 0xe
 5665 01fd 3A       		.uleb128 0x3a
 5666 01fe 0B       		.uleb128 0xb
 5667 01ff 3B       		.uleb128 0x3b
 5668 0200 05       		.uleb128 0x5
 5669 0201 11       		.uleb128 0x11
 5670 0202 01       		.uleb128 0x1
 5671 0203 12       		.uleb128 0x12
 5672 0204 06       		.uleb128 0x6
 5673 0205 40       		.uleb128 0x40
 5674 0206 18       		.uleb128 0x18
 5675 0207 9742     		.uleb128 0x2117
 5676 0209 19       		.uleb128 0x19
 5677 020a 00       		.byte	0
 5678 020b 00       		.byte	0
 5679 020c 21       		.uleb128 0x21
 5680 020d 34       		.uleb128 0x34
 5681 020e 00       		.byte	0
 5682 020f 03       		.uleb128 0x3
 5683 0210 0E       		.uleb128 0xe
 5684 0211 3A       		.uleb128 0x3a
 5685 0212 0B       		.uleb128 0xb
 5686 0213 3B       		.uleb128 0x3b
 5687 0214 05       		.uleb128 0x5
 5688 0215 49       		.uleb128 0x49
 5689 0216 13       		.uleb128 0x13
 5690 0217 00       		.byte	0
 5691 0218 00       		.byte	0
 5692 0219 22       		.uleb128 0x22
 5693 021a 0B       		.uleb128 0xb
 5694 021b 01       		.byte	0x1
 5695 021c 55       		.uleb128 0x55
 5696 021d 17       		.uleb128 0x17
 5697 021e 00       		.byte	0
 5698 021f 00       		.byte	0
 5699 0220 23       		.uleb128 0x23
 5700 0221 2E       		.uleb128 0x2e
 5701 0222 00       		.byte	0
 5702 0223 3F       		.uleb128 0x3f
 5703 0224 19       		.uleb128 0x19
 5704 0225 03       		.uleb128 0x3
 5705 0226 0E       		.uleb128 0xe
 5706 0227 3A       		.uleb128 0x3a
 5707 0228 0B       		.uleb128 0xb
 5708 0229 3B       		.uleb128 0x3b
 5709 022a 05       		.uleb128 0x5
 5710 022b 49       		.uleb128 0x49
 5711 022c 13       		.uleb128 0x13
 5712 022d 11       		.uleb128 0x11
 5713 022e 01       		.uleb128 0x1
 5714 022f 12       		.uleb128 0x12
 5715 0230 06       		.uleb128 0x6
 5716 0231 40       		.uleb128 0x40
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 126


 5717 0232 18       		.uleb128 0x18
 5718 0233 9742     		.uleb128 0x2117
 5719 0235 19       		.uleb128 0x19
 5720 0236 00       		.byte	0
 5721 0237 00       		.byte	0
 5722 0238 24       		.uleb128 0x24
 5723 0239 34       		.uleb128 0x34
 5724 023a 00       		.byte	0
 5725 023b 03       		.uleb128 0x3
 5726 023c 0E       		.uleb128 0xe
 5727 023d 3A       		.uleb128 0x3a
 5728 023e 0B       		.uleb128 0xb
 5729 023f 3B       		.uleb128 0x3b
 5730 0240 05       		.uleb128 0x5
 5731 0241 49       		.uleb128 0x49
 5732 0242 13       		.uleb128 0x13
 5733 0243 3F       		.uleb128 0x3f
 5734 0244 19       		.uleb128 0x19
 5735 0245 3C       		.uleb128 0x3c
 5736 0246 19       		.uleb128 0x19
 5737 0247 00       		.byte	0
 5738 0248 00       		.byte	0
 5739 0249 25       		.uleb128 0x25
 5740 024a 34       		.uleb128 0x34
 5741 024b 00       		.byte	0
 5742 024c 03       		.uleb128 0x3
 5743 024d 0E       		.uleb128 0xe
 5744 024e 3A       		.uleb128 0x3a
 5745 024f 0B       		.uleb128 0xb
 5746 0250 3B       		.uleb128 0x3b
 5747 0251 0B       		.uleb128 0xb
 5748 0252 49       		.uleb128 0x49
 5749 0253 13       		.uleb128 0x13
 5750 0254 3F       		.uleb128 0x3f
 5751 0255 19       		.uleb128 0x19
 5752 0256 02       		.uleb128 0x2
 5753 0257 18       		.uleb128 0x18
 5754 0258 00       		.byte	0
 5755 0259 00       		.byte	0
 5756 025a 26       		.uleb128 0x26
 5757 025b 21       		.uleb128 0x21
 5758 025c 00       		.byte	0
 5759 025d 49       		.uleb128 0x49
 5760 025e 13       		.uleb128 0x13
 5761 025f 2F       		.uleb128 0x2f
 5762 0260 05       		.uleb128 0x5
 5763 0261 00       		.byte	0
 5764 0262 00       		.byte	0
 5765 0263 27       		.uleb128 0x27
 5766 0264 34       		.uleb128 0x34
 5767 0265 00       		.byte	0
 5768 0266 03       		.uleb128 0x3
 5769 0267 08       		.uleb128 0x8
 5770 0268 3A       		.uleb128 0x3a
 5771 0269 0B       		.uleb128 0xb
 5772 026a 3B       		.uleb128 0x3b
 5773 026b 0B       		.uleb128 0xb
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 127


 5774 026c 49       		.uleb128 0x49
 5775 026d 13       		.uleb128 0x13
 5776 026e 3F       		.uleb128 0x3f
 5777 026f 19       		.uleb128 0x19
 5778 0270 02       		.uleb128 0x2
 5779 0271 18       		.uleb128 0x18
 5780 0272 00       		.byte	0
 5781 0273 00       		.byte	0
 5782 0274 00       		.byte	0
 5783              		.section	.debug_aranges,"",%progbits
 5784 0000 D4000000 		.4byte	0xd4
 5785 0004 0200     		.2byte	0x2
 5786 0006 00000000 		.4byte	.Ldebug_info0
 5787 000a 04       		.byte	0x4
 5788 000b 00       		.byte	0
 5789 000c 0000     		.2byte	0
 5790 000e 0000     		.2byte	0
 5791 0010 00000000 		.4byte	.LFB64
 5792 0014 44000000 		.4byte	.LFE64-.LFB64
 5793 0018 00000000 		.4byte	.LFB65
 5794 001c 6C000000 		.4byte	.LFE65-.LFB65
 5795 0020 00000000 		.4byte	.LFB66
 5796 0024 32000000 		.4byte	.LFE66-.LFB66
 5797 0028 00000000 		.4byte	.LFB67
 5798 002c 20000000 		.4byte	.LFE67-.LFB67
 5799 0030 00000000 		.4byte	.LFB68
 5800 0034 40000000 		.4byte	.LFE68-.LFB68
 5801 0038 00000000 		.4byte	.LFB69
 5802 003c DC000000 		.4byte	.LFE69-.LFB69
 5803 0040 00000000 		.4byte	.LFB70
 5804 0044 1C000000 		.4byte	.LFE70-.LFB70
 5805 0048 00000000 		.4byte	.LFB71
 5806 004c 28000000 		.4byte	.LFE71-.LFB71
 5807 0050 00000000 		.4byte	.LFB72
 5808 0054 C8000000 		.4byte	.LFE72-.LFB72
 5809 0058 00000000 		.4byte	.LFB73
 5810 005c 00010000 		.4byte	.LFE73-.LFB73
 5811 0060 00000000 		.4byte	.LFB74
 5812 0064 78000000 		.4byte	.LFE74-.LFB74
 5813 0068 00000000 		.4byte	.LFB75
 5814 006c 74010000 		.4byte	.LFE75-.LFB75
 5815 0070 00000000 		.4byte	.LFB76
 5816 0074 B8000000 		.4byte	.LFE76-.LFB76
 5817 0078 00000000 		.4byte	.LFB77
 5818 007c 1C000000 		.4byte	.LFE77-.LFB77
 5819 0080 00000000 		.4byte	.LFB78
 5820 0084 28000000 		.4byte	.LFE78-.LFB78
 5821 0088 00000000 		.4byte	.LFB79
 5822 008c 84000000 		.4byte	.LFE79-.LFB79
 5823 0090 00000000 		.4byte	.LFB80
 5824 0094 4C000000 		.4byte	.LFE80-.LFB80
 5825 0098 00000000 		.4byte	.LFB81
 5826 009c C4050000 		.4byte	.LFE81-.LFB81
 5827 00a0 00000000 		.4byte	.LFB82
 5828 00a4 68010000 		.4byte	.LFE82-.LFB82
 5829 00a8 00000000 		.4byte	.LFB83
 5830 00ac 44010000 		.4byte	.LFE83-.LFB83
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 128


 5831 00b0 00000000 		.4byte	.LFB84
 5832 00b4 14000000 		.4byte	.LFE84-.LFB84
 5833 00b8 00000000 		.4byte	.LFB85
 5834 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5835 00c0 00000000 		.4byte	.LFB86
 5836 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5837 00c8 00000000 		.4byte	.LFB87
 5838 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5839 00d0 00000000 		.4byte	0
 5840 00d4 00000000 		.4byte	0
 5841              		.section	.debug_ranges,"",%progbits
 5842              	.Ldebug_ranges0:
 5843 0000 6E030000 		.4byte	.LBB9
 5844 0004 54050000 		.4byte	.LBE9
 5845 0008 56050000 		.4byte	.LBB10
 5846 000c 5E050000 		.4byte	.LBE10
 5847 0010 60050000 		.4byte	.LBB11
 5848 0014 68050000 		.4byte	.LBE11
 5849 0018 00000000 		.4byte	0
 5850 001c 00000000 		.4byte	0
 5851 0020 00000000 		.4byte	.LFB64
 5852 0024 44000000 		.4byte	.LFE64
 5853 0028 00000000 		.4byte	.LFB65
 5854 002c 6C000000 		.4byte	.LFE65
 5855 0030 00000000 		.4byte	.LFB66
 5856 0034 32000000 		.4byte	.LFE66
 5857 0038 00000000 		.4byte	.LFB67
 5858 003c 20000000 		.4byte	.LFE67
 5859 0040 00000000 		.4byte	.LFB68
 5860 0044 40000000 		.4byte	.LFE68
 5861 0048 00000000 		.4byte	.LFB69
 5862 004c DC000000 		.4byte	.LFE69
 5863 0050 00000000 		.4byte	.LFB70
 5864 0054 1C000000 		.4byte	.LFE70
 5865 0058 00000000 		.4byte	.LFB71
 5866 005c 28000000 		.4byte	.LFE71
 5867 0060 00000000 		.4byte	.LFB72
 5868 0064 C8000000 		.4byte	.LFE72
 5869 0068 00000000 		.4byte	.LFB73
 5870 006c 00010000 		.4byte	.LFE73
 5871 0070 00000000 		.4byte	.LFB74
 5872 0074 78000000 		.4byte	.LFE74
 5873 0078 00000000 		.4byte	.LFB75
 5874 007c 74010000 		.4byte	.LFE75
 5875 0080 00000000 		.4byte	.LFB76
 5876 0084 B8000000 		.4byte	.LFE76
 5877 0088 00000000 		.4byte	.LFB77
 5878 008c 1C000000 		.4byte	.LFE77
 5879 0090 00000000 		.4byte	.LFB78
 5880 0094 28000000 		.4byte	.LFE78
 5881 0098 00000000 		.4byte	.LFB79
 5882 009c 84000000 		.4byte	.LFE79
 5883 00a0 00000000 		.4byte	.LFB80
 5884 00a4 4C000000 		.4byte	.LFE80
 5885 00a8 00000000 		.4byte	.LFB81
 5886 00ac C4050000 		.4byte	.LFE81
 5887 00b0 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 129


 5888 00b4 68010000 		.4byte	.LFE82
 5889 00b8 00000000 		.4byte	.LFB83
 5890 00bc 44010000 		.4byte	.LFE83
 5891 00c0 00000000 		.4byte	.LFB84
 5892 00c4 14000000 		.4byte	.LFE84
 5893 00c8 00000000 		.4byte	.LFB85
 5894 00cc 1A000000 		.4byte	.LFE85
 5895 00d0 00000000 		.4byte	.LFB86
 5896 00d4 2A000000 		.4byte	.LFE86
 5897 00d8 00000000 		.4byte	.LFB87
 5898 00dc 7C020000 		.4byte	.LFE87
 5899 00e0 00000000 		.4byte	0
 5900 00e4 00000000 		.4byte	0
 5901              		.section	.debug_line,"",%progbits
 5902              	.Ldebug_line0:
 5903 0000 F2050000 		.section	.debug_str,"MS",%progbits,1
 5903      02002A02 
 5903      00000201 
 5903      FB0E0D00 
 5903      01010101 
 5904              	.LASF192:
 5905 0000 74696D65 		.ascii	"timeToValve\000"
 5905      546F5661 
 5905      6C766500 
 5906              	.LASF149:
 5907 000c 676D745F 		.ascii	"gmt_offset\000"
 5907      6F666673 
 5907      657400
 5908              	.LASF16:
 5909 0017 75696E74 		.ascii	"uint16\000"
 5909      313600
 5910              	.LASF39:
 5911 001e 76616C75 		.ascii	"value\000"
 5911      6500
 5912              	.LASF28:
 5913 0024 746D5F68 		.ascii	"tm_hour\000"
 5913      6F757200 
 5914              	.LASF33:
 5915 002c 746D5F79 		.ascii	"tm_yday\000"
 5915      64617900 
 5916              	.LASF173:
 5917 0034 6175746F 		.ascii	"autosampler_enabled\000"
 5917      73616D70 
 5917      6C65725F 
 5917      656E6162 
 5917      6C656400 
 5918              	.LASF157:
 5919 0048 62756666 		.ascii	"buffer_overflow\000"
 5919      65725F6F 
 5919      76657266 
 5919      6C6F7700 
 5920              	.LASF4:
 5921 0058 5F5F7569 		.ascii	"__uint8_t\000"
 5921      6E74385F 
 5921      7400
 5922              	.LASF138:
 5923 0062 6175746F 		.ascii	"autosampler_freq\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 130


 5923      73616D70 
 5923      6C65725F 
 5923      66726571 
 5923      00
 5924              	.LASF75:
 5925 0073 636F756E 		.ascii	"countDownResetCondition\000"
 5925      74446F77 
 5925      6E526573 
 5925      6574436F 
 5925      6E646974 
 5926              	.LASF194:
 5927 008b 74696D65 		.ascii	"timeToAutosampler\000"
 5927      546F4175 
 5927      746F7361 
 5927      6D706C65 
 5927      7200
 5928              	.LASF170:
 5929 009d 76616C76 		.ascii	"valve_type\000"
 5929      655F7479 
 5929      706500
 5930              	.LASF55:
 5931 00a8 6C6F6E67 		.ascii	"longitude\000"
 5931      69747564 
 5931      6500
 5932              	.LASF197:
 5933 00b2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5933      43313120 
 5933      352E342E 
 5933      31203230 
 5933      31363036 
 5934 00e5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5934      20726576 
 5934      6973696F 
 5934      6E203233 
 5934      37373135 
 5935 0118 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5935      66756E63 
 5935      74696F6E 
 5935      2D736563 
 5935      74696F6E 
 5936              	.LASF152:
 5937 0140 6D6F6465 		.ascii	"modem_wakeup\000"
 5937      6D5F7761 
 5937      6B657570 
 5937      00
 5938              	.LASF10:
 5939 014d 6C6F6E67 		.ascii	"long long unsigned int\000"
 5939      206C6F6E 
 5939      6720756E 
 5939      7369676E 
 5939      65642069 
 5940              	.LASF131:
 5941 0164 73616D70 		.ascii	"sample_freq\000"
 5941      6C655F66 
 5941      72657100 
 5942              	.LASF161:
 5943 0170 6D6F6465 		.ascii	"modem_state\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 131


 5943      6D5F7374 
 5943      61746500 
 5944              	.LASF102:
 5945 017c 74657374 		.ascii	"test\000"
 5945      00
 5946              	.LASF180:
 5947 0181 616C6172 		.ascii	"alarmMeasure\000"
 5947      6D4D6561 
 5947      73757265 
 5947      00
 5948              	.LASF156:
 5949 018e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5949      52784275 
 5949      66666572 
 5949      00
 5950              	.LASF163:
 5951 019b 6D6F6465 		.ascii	"modem_stats\000"
 5951      6D5F7374 
 5951      61747300 
 5952              	.LASF9:
 5953 01a7 6C6F6E67 		.ascii	"long long int\000"
 5953      206C6F6E 
 5953      6720696E 
 5953      7400
 5954              	.LASF0:
 5955 01b5 7369676E 		.ascii	"signed char\000"
 5955      65642063 
 5955      68617200 
 5956              	.LASF48:
 5957 01c1 65636E6F 		.ascii	"ecno\000"
 5957      00
 5958              	.LASF72:
 5959 01c6 636F756E 		.ascii	"countDownValue\000"
 5959      74446F77 
 5959      6E56616C 
 5959      756500
 5960              	.LASF181:
 5961 01d5 74696D65 		.ascii	"timeToMeasure\000"
 5961      546F4D65 
 5961      61737572 
 5961      6500
 5962              	.LASF51:
 5963 01e3 74696D65 		.ascii	"time_to_network_connect\000"
 5963      5F746F5F 
 5963      6E657477 
 5963      6F726B5F 
 5963      636F6E6E 
 5964              	.LASF183:
 5965 01fb 74696D65 		.ascii	"timeToSync\000"
 5965      546F5379 
 5965      6E6300
 5966              	.LASF136:
 5967 0206 646F776E 		.ascii	"down_level_freq\000"
 5967      5F6C6576 
 5967      656C5F66 
 5967      72657100 
 5968              	.LASF176:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 132


 5969 0216 68747470 		.ascii	"http_body\000"
 5969      5F626F64 
 5969      7900
 5970              	.LASF113:
 5971 0220 7365745F 		.ascii	"set_up_internet_connection\000"
 5971      75705F69 
 5971      6E746572 
 5971      6E65745F 
 5971      636F6E6E 
 5972              	.LASF169:
 5973 023b 76616C76 		.ascii	"valve_diameter\000"
 5973      655F6469 
 5973      616D6574 
 5973      657200
 5974              	.LASF148:
 5975 024a 7365636F 		.ascii	"second\000"
 5975      6E6400
 5976              	.LASF144:
 5977 0251 79656172 		.ascii	"year\000"
 5977      00
 5978              	.LASF189:
 5979 0256 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 5979      6D446F77 
 5979      6E737472 
 5979      65616D4C 
 5979      6576656C 
 5980              	.LASF139:
 5981 0271 74656D70 		.ascii	"temp\000"
 5981      00
 5982              	.LASF6:
 5983 0276 6C6F6E67 		.ascii	"long int\000"
 5983      20696E74 
 5983      00
 5984              	.LASF46:
 5985 027f 72786C65 		.ascii	"rxlev\000"
 5985      7600
 5986              	.LASF73:
 5987 0285 63757272 		.ascii	"currentCountDownValue\000"
 5987      656E7443 
 5987      6F756E74 
 5987      446F776E 
 5987      56616C75 
 5988              	.LASF150:
 5989 029b 6D6F6465 		.ascii	"modem_get_state\000"
 5989      6D5F6765 
 5989      745F7374 
 5989      61746500 
 5990              	.LASF56:
 5991 02ab 616C7469 		.ascii	"altitude\000"
 5991      74756465 
 5991      00
 5992              	.LASF15:
 5993 02b4 75696E74 		.ascii	"uint8\000"
 5993      3800
 5994              	.LASF135:
 5995 02ba 6C657665 		.ascii	"level_sensor_freq\000"
 5995      6C5F7365 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 133


 5995      6E736F72 
 5995      5F667265 
 5995      7100
 5996              	.LASF186:
 5997 02cc 74696D65 		.ascii	"timeToAppLED\000"
 5997      546F4170 
 5997      704C4544 
 5997      00
 5998              	.LASF19:
 5999 02d9 696E7433 		.ascii	"int32\000"
 5999      3200
 6000              	.LASF60:
 6001 02df 6E6F6465 		.ascii	"node_type\000"
 6001      5F747970 
 6001      6500
 6002              	.LASF140:
 6003 02e9 6D6F6465 		.ascii	"modem_configure_settings\000"
 6003      6D5F636F 
 6003      6E666967 
 6003      7572655F 
 6003      73657474 
 6004              	.LASF121:
 6005 0302 735F7369 		.ascii	"s_sim_type\000"
 6005      6D5F7479 
 6005      706500
 6006              	.LASF103:
 6007 030d 6E657477 		.ascii	"network_time\000"
 6007      6F726B5F 
 6007      74696D65 
 6007      00
 6008              	.LASF3:
 6009 031a 73686F72 		.ascii	"short unsigned int\000"
 6009      7420756E 
 6009      7369676E 
 6009      65642069 
 6009      6E7400
 6010              	.LASF17:
 6011 032d 75696E74 		.ascii	"uint32\000"
 6011      333200
 6012              	.LASF99:
 6013 0334 696E7465 		.ascii	"interval\000"
 6013      7276616C 
 6013      00
 6014              	.LASF7:
 6015 033d 5F5F7569 		.ascii	"__uint32_t\000"
 6015      6E743332 
 6015      5F7400
 6016              	.LASF142:
 6017 0348 6D6F6465 		.ascii	"modem_get_network_time\000"
 6017      6D5F6765 
 6017      745F6E65 
 6017      74776F72 
 6017      6B5F7469 
 6018              	.LASF30:
 6019 035f 746D5F6D 		.ascii	"tm_mon\000"
 6019      6F6E00
 6020              	.LASF126:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 134


 6021 0366 735F6C65 		.ascii	"s_level_sensor\000"
 6021      76656C5F 
 6021      73656E73 
 6021      6F7200
 6022              	.LASF64:
 6023 0375 64656275 		.ascii	"debug_level\000"
 6023      675F6C65 
 6023      76656C00 
 6024              	.LASF151:
 6025 0381 6D6F6465 		.ascii	"modem_sleep\000"
 6025      6D5F736C 
 6025      65657000 
 6026              	.LASF124:
 6027 038d 735F6465 		.ascii	"s_debug_freq\000"
 6027      6275675F 
 6027      66726571 
 6027      00
 6028              	.LASF117:
 6029 039a 75706461 		.ascii	"updatable_parameters_initialize\000"
 6029      7461626C 
 6029      655F7061 
 6029      72616D65 
 6029      74657273 
 6030              	.LASF31:
 6031 03ba 746D5F79 		.ascii	"tm_year\000"
 6031      65617200 
 6032              	.LASF182:
 6033 03c2 616C6172 		.ascii	"alarmSync\000"
 6033      6D53796E 
 6033      6300
 6034              	.LASF165:
 6035 03cc 4170705F 		.ascii	"App_LED_enabled\000"
 6035      4C45445F 
 6035      656E6162 
 6035      6C656400 
 6036              	.LASF41:
 6037 03dc 6B65795F 		.ascii	"key_value_t\000"
 6037      76616C75 
 6037      655F7400 
 6038              	.LASF90:
 6039 03e8 7077725F 		.ascii	"pwr_check\000"
 6039      63686563 
 6039      6B00
 6040              	.LASF8:
 6041 03f2 6C6F6E67 		.ascii	"long unsigned int\000"
 6041      20756E73 
 6041      69676E65 
 6041      6420696E 
 6041      7400
 6042              	.LASF105:
 6043 0404 65787472 		.ascii	"extract_string\000"
 6043      6163745F 
 6043      73747269 
 6043      6E6700
 6044              	.LASF95:
 6045 0413 74696D65 		.ascii	"timeout\000"
 6045      6F757400 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 135


 6046              	.LASF118:
 6047 041b 6765745F 		.ascii	"get_cell_network_stats\000"
 6047      63656C6C 
 6047      5F6E6574 
 6047      776F726B 
 6047      5F737461 
 6048              	.LASF40:
 6049 0432 74696D65 		.ascii	"timeStamp\000"
 6049      5374616D 
 6049      7000
 6050              	.LASF57:
 6051 043c 74696D65 		.ascii	"time_to_lock\000"
 6051      5F746F5F 
 6051      6C6F636B 
 6051      00
 6052              	.LASF160:
 6053 0449 64617461 		.ascii	"data\000"
 6053      00
 6054              	.LASF81:
 6055 044e 65705F70 		.ascii	"ep_port\000"
 6055      6F727400 
 6056              	.LASF34:
 6057 0456 746D5F69 		.ascii	"tm_isdst\000"
 6057      73647374 
 6057      00
 6058              	.LASF77:
 6059 045f 6D6F6465 		.ascii	"modem_info\000"
 6059      6D5F696E 
 6059      666F00
 6060              	.LASF80:
 6061 046a 65705F68 		.ascii	"ep_host\000"
 6061      6F737400 
 6062              	.LASF199:
 6063 0472 443A5C44 		.ascii	"D:\\Data\\Stormwater-RA\\notoriOS-og\\notoriOS.cyds"
 6063      6174615C 
 6063      53746F72 
 6063      6D776174 
 6063      65722D52 
 6064 04a1 6E00     		.ascii	"n\000"
 6065              	.LASF100:
 6066 04a3 6D6F6465 		.ascii	"modem_power_up\000"
 6066      6D5F706F 
 6066      7765725F 
 6066      757000
 6067              	.LASF198:
 6068 04b2 6D6F6465 		.ascii	"modem.c\000"
 6068      6D2E6300 
 6069              	.LASF107:
 6070 04ba 62656769 		.ascii	"beginMarker\000"
 6070      6E4D6172 
 6070      6B657200 
 6071              	.LASF109:
 6072 04c6 74617267 		.ascii	"target\000"
 6072      657400
 6073              	.LASF52:
 6074 04cd 74696D65 		.ascii	"time_to_acquire_ip\000"
 6074      5F746F5F 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 136


 6074      61637175 
 6074      6972655F 
 6074      697000
 6075              	.LASF108:
 6076 04e0 656E644D 		.ascii	"endMarker\000"
 6076      61726B65 
 6076      7200
 6077              	.LASF2:
 6078 04ea 73686F72 		.ascii	"short int\000"
 6078      7420696E 
 6078      7400
 6079              	.LASF143:
 6080 04f4 65706F63 		.ascii	"epoch_time\000"
 6080      685F7469 
 6080      6D6500
 6081              	.LASF5:
 6082 04ff 5F5F696E 		.ascii	"__int32_t\000"
 6082      7433325F 
 6082      7400
 6083              	.LASF185:
 6084 0509 616C6172 		.ascii	"alarmAppLED\000"
 6084      6D417070 
 6084      4C454400 
 6085              	.LASF106:
 6086 0515 66726F6D 		.ascii	"from\000"
 6086      00
 6087              	.LASF112:
 6088 051a 63726567 		.ascii	"creg\000"
 6088      00
 6089              	.LASF133:
 6090 051f 64656275 		.ascii	"debug_freq\000"
 6090      675F6672 
 6090      657100
 6091              	.LASF96:
 6092 052a 61745F61 		.ascii	"at_attempt\000"
 6092      7474656D 
 6092      707400
 6093              	.LASF128:
 6094 0535 735F7661 		.ascii	"s_valve\000"
 6094      6C766500 
 6095              	.LASF104:
 6096 053d 61745F77 		.ascii	"at_write_command\000"
 6096      72697465 
 6096      5F636F6D 
 6096      6D616E64 
 6096      00
 6097              	.LASF79:
 6098 054e 7379735F 		.ascii	"sys_info_t\000"
 6098      696E666F 
 6098      5F7400
 6099              	.LASF71:
 6100 0559 75706461 		.ascii	"updatable_parameters_t\000"
 6100      7461626C 
 6100      655F7061 
 6100      72616D65 
 6100      74657273 
 6101              	.LASF132:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 137


 6102 0570 7265706F 		.ascii	"report_freq\000"
 6102      72745F66 
 6102      72657100 
 6103              	.LASF158:
 6104 057c 64617461 		.ascii	"dataPointsInStack\000"
 6104      506F696E 
 6104      7473496E 
 6104      53746163 
 6104      6B00
 6105              	.LASF174:
 6106 058e 6175746F 		.ascii	"autosampler_inbox\000"
 6106      73616D70 
 6106      6C65725F 
 6106      696E626F 
 6106      7800
 6107              	.LASF27:
 6108 05a0 746D5F6D 		.ascii	"tm_min\000"
 6108      696E00
 6109              	.LASF20:
 6110 05a7 666C6F61 		.ascii	"float32\000"
 6110      74333200 
 6111              	.LASF25:
 6112 05af 73697A65 		.ascii	"sizetype\000"
 6112      74797065 
 6112      00
 6113              	.LASF127:
 6114 05b8 735F646F 		.ascii	"s_down_level_sensor\000"
 6114      776E5F6C 
 6114      6576656C 
 6114      5F73656E 
 6114      736F7200 
 6115              	.LASF145:
 6116 05cc 6D6F6E74 		.ascii	"month\000"
 6116      6800
 6117              	.LASF111:
 6118 05d2 69735F63 		.ascii	"is_connected_to_cell_network\000"
 6118      6F6E6E65 
 6118      63746564 
 6118      5F746F5F 
 6118      63656C6C 
 6119              	.LASF54:
 6120 05ef 6C617469 		.ascii	"latitude\000"
 6120      74756465 
 6120      00
 6121              	.LASF35:
 6122 05f8 74657374 		.ascii	"test_name\000"
 6122      5F6E616D 
 6122      6500
 6123              	.LASF18:
 6124 0602 696E7431 		.ascii	"int16\000"
 6124      3600
 6125              	.LASF155:
 6126 0608 6770735F 		.ascii	"gps_status\000"
 6126      73746174 
 6126      757300
 6127              	.LASF184:
 6128 0613 74696D65 		.ascii	"timeToSycnRemoteParams\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 138


 6128      546F5379 
 6128      636E5265 
 6128      6D6F7465 
 6128      50617261 
 6129              	.LASF101:
 6130 062a 6D6F6465 		.ascii	"modem_test\000"
 6130      6D5F7465 
 6130      737400
 6131              	.LASF116:
 6132 0635 6D617463 		.ascii	"match\000"
 6132      6800
 6133              	.LASF164:
 6134 063b 75706461 		.ascii	"updatable_parameters\000"
 6134      7461626C 
 6134      655F7061 
 6134      72616D65 
 6134      74657273 
 6135              	.LASF146:
 6136 0650 686F7572 		.ascii	"hour\000"
 6136      00
 6137              	.LASF93:
 6138 0655 636F6D6D 		.ascii	"commands\000"
 6138      616E6473 
 6138      00
 6139              	.LASF97:
 6140 065e 636F6D70 		.ascii	"compare_location\000"
 6140      6172655F 
 6140      6C6F6361 
 6140      74696F6E 
 6140      00
 6141              	.LASF21:
 6142 066f 666C6F61 		.ascii	"float\000"
 6142      7400
 6143              	.LASF83:
 6144 0675 6D6F6465 		.ascii	"modem_initialize\000"
 6144      6D5F696E 
 6144      69746961 
 6144      6C697A65 
 6144      00
 6145              	.LASF123:
 6146 0686 735F7265 		.ascii	"s_report_freq\000"
 6146      706F7274 
 6146      5F667265 
 6146      7100
 6147              	.LASF130:
 6148 0694 735F6170 		.ascii	"s_apps_enabled\000"
 6148      70735F65 
 6148      6E61626C 
 6148      656400
 6149              	.LASF61:
 6150 06a3 73696D5F 		.ascii	"sim_type\000"
 6150      74797065 
 6150      00
 6151              	.LASF68:
 6152 06ac 56616C76 		.ascii	"Valve_freq\000"
 6152      655F6672 
 6152      657100
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 139


 6153              	.LASF114:
 6154 06b7 6973725F 		.ascii	"isr_telit_rx\000"
 6154      74656C69 
 6154      745F7278 
 6154      00
 6155              	.LASF76:
 6156 06c4 616C6172 		.ascii	"alarm\000"
 6156      6D00
 6157              	.LASF70:
 6158 06ca 5F426F6F 		.ascii	"_Bool\000"
 6158      6C00
 6159              	.LASF13:
 6160 06d0 696E7433 		.ascii	"int32_t\000"
 6160      325F7400 
 6161              	.LASF1:
 6162 06d8 756E7369 		.ascii	"unsigned char\000"
 6162      676E6564 
 6162      20636861 
 6162      7200
 6163              	.LASF179:
 6164 06e6 73797374 		.ascii	"system_settings\000"
 6164      656D5F73 
 6164      65747469 
 6164      6E677300 
 6165              	.LASF98:
 6166 06f6 64656C61 		.ascii	"delay\000"
 6166      7900
 6167              	.LASF49:
 6168 06fc 72737271 		.ascii	"rsrq\000"
 6168      00
 6169              	.LASF63:
 6170 0701 73796E63 		.ascii	"sync_time\000"
 6170      5F74696D 
 6170      6500
 6171              	.LASF120:
 6172 070b 735F6E6F 		.ascii	"s_node_type\000"
 6172      64655F74 
 6172      79706500 
 6173              	.LASF47:
 6174 0717 72736370 		.ascii	"rscp\000"
 6174      00
 6175              	.LASF153:
 6176 071c 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 6176      6D5F6765 
 6176      745F6770 
 6176      735F636F 
 6176      6F726469 
 6177              	.LASF38:
 6178 0736 74657374 		.ascii	"test_t\000"
 6178      5F7400
 6179              	.LASF129:
 6180 073d 735F6175 		.ascii	"s_autosampler\000"
 6180      746F7361 
 6180      6D706C65 
 6180      7200
 6181              	.LASF44:
 6182 074b 696D6569 		.ascii	"imei\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 140


 6182      00
 6183              	.LASF37:
 6184 0750 72656173 		.ascii	"reason\000"
 6184      6F6E00
 6185              	.LASF50:
 6186 0757 72737270 		.ascii	"rsrp\000"
 6186      00
 6187              	.LASF53:
 6188 075c 6D6F6465 		.ascii	"modem_stats_t\000"
 6188      6D5F7374 
 6188      6174735F 
 6188      7400
 6189              	.LASF92:
 6190 076a 75617274 		.ascii	"uart_string_reset\000"
 6190      5F737472 
 6190      696E675F 
 6190      72657365 
 6190      7400
 6191              	.LASF187:
 6192 077c 616C6172 		.ascii	"alarmLevelSensor\000"
 6192      6D4C6576 
 6192      656C5365 
 6192      6E736F72 
 6192      00
 6193              	.LASF32:
 6194 078d 746D5F77 		.ascii	"tm_wday\000"
 6194      64617900 
 6195              	.LASF91:
 6196 0795 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 6196      6D5F736F 
 6196      66745F70 
 6196      6F776572 
 6196      5F637963 
 6197              	.LASF66:
 6198 07ac 4C657665 		.ascii	"Level_Sensor_freq\000"
 6198      6C5F5365 
 6198      6E736F72 
 6198      5F667265 
 6198      7100
 6199              	.LASF167:
 6200 07be 6C657665 		.ascii	"level_sensor_inbox\000"
 6200      6C5F7365 
 6200      6E736F72 
 6200      5F696E62 
 6200      6F7800
 6201              	.LASF24:
 6202 07d1 6C6F6E67 		.ascii	"long double\000"
 6202      20646F75 
 6202      626C6500 
 6203              	.LASF23:
 6204 07dd 63686172 		.ascii	"char\000"
 6204      00
 6205              	.LASF110:
 6206 07e2 6D6F6465 		.ascii	"modem_process_tasks\000"
 6206      6D5F7072 
 6206      6F636573 
 6206      735F7461 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 141


 6206      736B7300 
 6207              	.LASF11:
 6208 07f6 756E7369 		.ascii	"unsigned int\000"
 6208      676E6564 
 6208      20696E74 
 6208      00
 6209              	.LASF141:
 6210 0803 4346554E 		.ascii	"CFUN\000"
 6210      00
 6211              	.LASF191:
 6212 0808 616C6172 		.ascii	"alarmValve\000"
 6212      6D56616C 
 6212      766500
 6213              	.LASF43:
 6214 0813 6D6F6465 		.ascii	"model_id\000"
 6214      6C5F6964 
 6214      00
 6215              	.LASF177:
 6216 081c 68747470 		.ascii	"http_route\000"
 6216      5F726F75 
 6216      746500
 6217              	.LASF45:
 6218 0827 6D6F6465 		.ascii	"modem_info_t\000"
 6218      6D5F696E 
 6218      666F5F74 
 6218      00
 6219              	.LASF59:
 6220 0834 6770735F 		.ascii	"gps_t\000"
 6220      7400
 6221              	.LASF196:
 6222 083a 75617274 		.ascii	"uart_string_index\000"
 6222      5F737472 
 6222      696E675F 
 6222      696E6465 
 6222      7800
 6223              	.LASF62:
 6224 084c 6D656173 		.ascii	"measure_time\000"
 6224      7572655F 
 6224      74696D65 
 6224      00
 6225              	.LASF115:
 6226 0859 69735F63 		.ascii	"is_connected_to_internet\000"
 6226      6F6E6E65 
 6226      63746564 
 6226      5F746F5F 
 6226      696E7465 
 6227              	.LASF162:
 6228 0872 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 6228      6D5F7374 
 6228      6172745F 
 6228      74696D65 
 6228      5F737461 
 6229              	.LASF195:
 6230 0889 75617274 		.ascii	"uart_received_string\000"
 6230      5F726563 
 6230      65697665 
 6230      645F7374 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 142


 6230      72696E67 
 6231              	.LASF84:
 6232 089e 70696E73 		.ascii	"pins_configure_inactive\000"
 6232      5F636F6E 
 6232      66696775 
 6232      72655F69 
 6232      6E616374 
 6233              	.LASF125:
 6234 08b6 735F6170 		.ascii	"s_app_led\000"
 6234      705F6C65 
 6234      6400
 6235              	.LASF42:
 6236 08c0 73696D5F 		.ascii	"sim_id\000"
 6236      696400
 6237              	.LASF29:
 6238 08c7 746D5F6D 		.ascii	"tm_mday\000"
 6238      64617900 
 6239              	.LASF178:
 6240 08cf 73797374 		.ascii	"system_info\000"
 6240      656D5F69 
 6240      6E666F00 
 6241              	.LASF58:
 6242 08db 76616C69 		.ascii	"valid\000"
 6242      6400
 6243              	.LASF85:
 6244 08e1 70696E73 		.ascii	"pins_configure_active\000"
 6244      5F636F6E 
 6244      66696775 
 6244      72655F61 
 6244      63746976 
 6245              	.LASF147:
 6246 08f7 6D696E75 		.ascii	"minute\000"
 6246      746500
 6247              	.LASF14:
 6248 08fe 75696E74 		.ascii	"uint32_t\000"
 6248      33325F74 
 6248      00
 6249              	.LASF26:
 6250 0907 746D5F73 		.ascii	"tm_sec\000"
 6250      656300
 6251              	.LASF171:
 6252 090e 76616C76 		.ascii	"valve_enabled\000"
 6252      655F656E 
 6252      61626C65 
 6252      6400
 6253              	.LASF119:
 6254 091c 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 6254      75706461 
 6254      7465645F 
 6254      70617261 
 6254      6D657465 
 6255              	.LASF122:
 6256 093f 735F7361 		.ascii	"s_sample_freq\000"
 6256      6D706C65 
 6256      5F667265 
 6256      7100
 6257              	.LASF36:
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 143


 6258 094d 73746174 		.ascii	"status\000"
 6258      757300
 6259              	.LASF188:
 6260 0954 74696D65 		.ascii	"timeToLevelSensor\000"
 6260      546F4C65 
 6260      76656C53 
 6260      656E736F 
 6260      7200
 6261              	.LASF168:
 6262 0966 6C657665 		.ascii	"level_sensor_enabled\000"
 6262      6C5F7365 
 6262      6E736F72 
 6262      5F656E61 
 6262      626C6564 
 6263              	.LASF159:
 6264 097b 64617461 		.ascii	"dataPointsInStackDesired\000"
 6264      506F696E 
 6264      7473496E 
 6264      53746163 
 6264      6B446573 
 6265              	.LASF67:
 6266 0994 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 6266      73747265 
 6266      616D5F4C 
 6266      6576656C 
 6266      5F53656E 
 6267              	.LASF65:
 6268 09b1 4170705F 		.ascii	"App_LED_freq\000"
 6268      4C45445F 
 6268      66726571 
 6268      00
 6269              	.LASF82:
 6270 09be 7379735F 		.ascii	"sys_settings_t\000"
 6270      73657474 
 6270      696E6773 
 6270      5F7400
 6271              	.LASF190:
 6272 09cd 74696D65 		.ascii	"timeToDownstreamLevelSensor\000"
 6272      546F446F 
 6272      776E7374 
 6272      7265616D 
 6272      4C657665 
 6273              	.LASF12:
 6274 09e9 75696E74 		.ascii	"uint8_t\000"
 6274      385F7400 
 6275              	.LASF193:
 6276 09f1 616C6172 		.ascii	"alarmAutosampler\000"
 6276      6D417574 
 6276      6F73616D 
 6276      706C6572 
 6276      00
 6277              	.LASF172:
 6278 0a02 76616C76 		.ascii	"valve_inbox\000"
 6278      655F696E 
 6278      626F7800 
 6279              	.LASF87:
 6280 0a0e 61745F72 		.ascii	"at_ready\000"
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 144


 6280      65616479 
 6280      00
 6281              	.LASF69:
 6282 0a17 4175746F 		.ascii	"Autosampler_freq\000"
 6282      73616D70 
 6282      6C65725F 
 6282      66726571 
 6282      00
 6283              	.LASF88:
 6284 0a28 61747465 		.ascii	"attempts\000"
 6284      6D707473 
 6284      00
 6285              	.LASF74:
 6286 0a31 636F756E 		.ascii	"countDownType\000"
 6286      74446F77 
 6286      6E547970 
 6286      6500
 6287              	.LASF137:
 6288 0a3f 76616C76 		.ascii	"valve_freq\000"
 6288      655F6672 
 6288      657100
 6289              	.LASF89:
 6290 0a4a 626F6F74 		.ascii	"boot_time\000"
 6290      5F74696D 
 6290      6500
 6291              	.LASF94:
 6292 0a54 65787065 		.ascii	"expected_response\000"
 6292      63746564 
 6292      5F726573 
 6292      706F6E73 
 6292      6500
 6293              	.LASF154:
 6294 0a66 6C6F636B 		.ascii	"lock_time\000"
 6294      5F74696D 
 6294      6500
 6295              	.LASF78:
 6296 0a70 63686970 		.ascii	"chip_uniqueId\000"
 6296      5F756E69 
 6296      71756549 
 6296      6400
 6297              	.LASF175:
 6298 0a7e 68747470 		.ascii	"http_request\000"
 6298      5F726571 
 6298      75657374 
 6298      00
 6299              	.LASF86:
 6300 0a8b 6D6F6465 		.ascii	"modem_power_down\000"
 6300      6D5F706F 
 6300      7765725F 
 6300      646F776E 
 6300      00
 6301              	.LASF22:
 6302 0a9c 646F7562 		.ascii	"double\000"
 6302      6C6500
 6303              	.LASF166:
 6304 0aa3 6170705F 		.ascii	"app_led_inbox\000"
 6304      6C65645F 
ARM GAS  C:\Users\shara\AppData\Local\Temp\cc68HvoP.s 			page 145


 6304      696E626F 
 6304      7800
 6305              	.LASF134:
 6306 0ab1 6170705F 		.ascii	"app_led_freq\000"
 6306      6C65645F 
 6306      66726571 
 6306      00
 6307              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
