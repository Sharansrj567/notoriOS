ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,9,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	level_sensor_enabled,1,1
  34              		.comm	downstream_level_sensor_inbox,100,4
  35              		.comm	downstream_level_sensor_enabled,1,1
  36              		.comm	valve_enabled,1,1
  37              		.comm	valve_inbox,100,4
  38              		.comm	App_LED_enabled,1,1
  39              		.comm	app_led_inbox,100,4
  40              		.comm	http_request,10000,4
  41              		.comm	http_body,10000,4
  42              		.comm	http_route,200,4
  43              		.comm	system_info,28,4
  44              		.comm	system_settings,104,4
  45              		.comm	alarmMeasure,6,4
  46              		.comm	timeToMeasure,1,1
  47              		.comm	alarmSync,6,4
  48              		.comm	timeToSync,1,1
  49              		.comm	timeToSycnRemoteParams,1,1
  50              		.comm	hey,1,1
  51              		.comm	alarmAppLED,6,4
  52              		.comm	timeToAppLED,1,1
  53              		.comm	alarmLevelSensor,6,4
  54              		.comm	timetoLevelSensor,1,1
  55              		.comm	alarmDownstreamLevelSensor,6,4
  56              		.comm	timetoDownstreamLevelSensor,1,1
  57              		.comm	alarmValve,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 2


  58              		.comm	timeToValve,1,1
  59              		.comm	uart_received_string,1024,4
  60              		.global	uart_string_index
  61              		.bss
  62              		.align	1
  63              		.type	uart_string_index, %object
  64              		.size	uart_string_index, 2
  65              	uart_string_index:
  66 0000 0000     		.space	2
  67              		.section	.text.isr_telit_rx,"ax",%progbits
  68              		.align	2
  69              		.global	isr_telit_rx
  70              		.thumb
  71              		.thumb_func
  72              		.type	isr_telit_rx, %function
  73              	isr_telit_rx:
  74              	.LFB64:
  75              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  76              		.loc 1 18 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 98B5     		push	{r3, r4, r7, lr}
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 3, -16
  83              		.cfi_offset 4, -12
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  88              		.loc 1 20 0
  89 0004 12E0     		b	.L2
  90              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  91              		.loc 1 21 0
  92 0006 0D4B     		ldr	r3, .L4
  93 0008 B3F90030 		ldrsh	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 3


  94 000c 1C46     		mov	r4, r3
  95 000e FFF7FEFF 		bl	UART_Telit_GetChar
  96 0012 0346     		mov	r3, r0
  97 0014 1A46     		mov	r2, r3
  98 0016 0A4B     		ldr	r3, .L4+4
  99 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
 100              		.loc 1 22 0
 101 001a 084B     		ldr	r3, .L4
 102 001c B3F90030 		ldrsh	r3, [r3]
 103 0020 9BB2     		uxth	r3, r3
 104 0022 0133     		adds	r3, r3, #1
 105 0024 9BB2     		uxth	r3, r3
 106 0026 1AB2     		sxth	r2, r3
 107 0028 044B     		ldr	r3, .L4
 108 002a 1A80     		strh	r2, [r3]	@ movhi
 109              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 110              		.loc 1 20 0
 111 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 112 0030 0346     		mov	r3, r0
 113 0032 012B     		cmp	r3, #1
 114 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 115              		.loc 1 25 0
 116 0036 00BF     		nop
 117 0038 98BD     		pop	{r3, r4, r7, pc}
 118              	.L5:
 119 003a 00BF     		.align	2
 120              	.L4:
 121 003c 00000000 		.word	uart_string_index
 122 0040 00000000 		.word	uart_received_string
 123              		.cfi_endproc
 124              	.LFE64:
 125              		.size	isr_telit_rx, .-isr_telit_rx
 126              		.section	.text.modem_initialize,"ax",%progbits
 127              		.align	2
 128              		.global	modem_initialize
 129              		.thumb
 130              		.thumb_func
 131              		.type	modem_initialize, %function
 132              	modem_initialize:
 133              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 134              		.loc 1 28 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138 0000 80B5     		push	{r7, lr}
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 4


 143              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 144              		.loc 1 31 0
 145 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 146              		.loc 1 32 0
 147 0008 154B     		ldr	r3, .L7
 148 000a 0022     		movs	r2, #0
 149 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 150              		.loc 1 34 0
 151 000e 154B     		ldr	r3, .L7+4
 152 0010 0022     		movs	r2, #0
 153 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 154              		.loc 1 35 0
 155 0016 134B     		ldr	r3, .L7+4
 156 0018 0022     		movs	r2, #0
 157 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 158              		.loc 1 36 0
 159 001c 114B     		ldr	r3, .L7+4
 160 001e 0022     		movs	r2, #0
 161 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 162              		.loc 1 37 0
 163 0022 114B     		ldr	r3, .L7+8
 164 0024 0022     		movs	r2, #0
 165 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 166              		.loc 1 38 0
 167 0028 0F4B     		ldr	r3, .L7+8
 168 002a 0022     		movs	r2, #0
 169 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 170              		.loc 1 39 0
 171 002e 0E4B     		ldr	r3, .L7+8
 172 0030 0022     		movs	r2, #0
 173 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 174              		.loc 1 40 0
 175 0034 0C4B     		ldr	r3, .L7+8
 176 0036 0022     		movs	r2, #0
 177 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 178              		.loc 1 41 0
 179 003a 0B4B     		ldr	r3, .L7+8
 180 003c 0022     		movs	r2, #0
 181 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 182              		.loc 1 42 0
 183 0040 094B     		ldr	r3, .L7+8
 184 0042 0022     		movs	r2, #0
 185 0044 5A61     		str	r2, [r3, #20]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 5


  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 186              		.loc 1 43 0
 187 0046 084B     		ldr	r3, .L7+8
 188 0048 0022     		movs	r2, #0
 189 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 190              		.loc 1 44 0
 191 004c 064B     		ldr	r3, .L7+8
 192 004e 0022     		movs	r2, #0
 193 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 194              		.loc 1 48 0
 195 0052 0021     		movs	r1, #0
 196 0054 4020     		movs	r0, #64
 197 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 198              		.loc 1 50 0
 199 005a 00BF     		nop
 200 005c 80BD     		pop	{r7, pc}
 201              	.L8:
 202 005e 00BF     		.align	2
 203              	.L7:
 204 0060 00000000 		.word	modem_state
 205 0064 00000000 		.word	modem_info
 206 0068 00000000 		.word	modem_stats
 207              		.cfi_endproc
 208              	.LFE65:
 209              		.size	modem_initialize, .-modem_initialize
 210              		.section	.text.pins_configure_inactive,"ax",%progbits
 211              		.align	2
 212              		.global	pins_configure_inactive
 213              		.thumb
 214              		.thumb_func
 215              		.type	pins_configure_inactive, %function
 216              	pins_configure_inactive:
 217              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 218              		.loc 1 54 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 00AF     		add	r7, sp, #0
 227              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 228              		.loc 1 56 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 6


 229 0004 0020     		movs	r0, #0
 230 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 231              		.loc 1 57 0
 232 000a 0C20     		movs	r0, #12
 233 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 234              		.loc 1 59 0
 235 0010 0020     		movs	r0, #0
 236 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 237              		.loc 1 62 0
 238 0016 0020     		movs	r0, #0
 239 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 240              		.loc 1 63 0
 241 001c 0020     		movs	r0, #0
 242 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 243              		.loc 1 64 0
 244 0022 0020     		movs	r0, #0
 245 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 246              		.loc 1 65 0
 247 0028 0020     		movs	r0, #0
 248 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 249              		.loc 1 67 0
 250 002e 00BF     		nop
 251 0030 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE66:
 254              		.size	pins_configure_inactive, .-pins_configure_inactive
 255 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 256              		.align	2
 257              		.global	pins_configure_active
 258              		.thumb
 259              		.thumb_func
 260              		.type	pins_configure_active, %function
 261              	pins_configure_active:
 262              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 263              		.loc 1 70 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 14, -4
 271 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 7


 272              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 273              		.loc 1 72 0
 274 0004 0220     		movs	r0, #2
 275 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 276              		.loc 1 73 0
 277 000a 0120     		movs	r0, #1
 278 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 279              		.loc 1 74 0
 280 0010 0120     		movs	r0, #1
 281 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 282              		.loc 1 75 0
 283 0016 6420     		movs	r0, #100
 284 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 285              		.loc 1 76 0
 286 001c 00BF     		nop
 287 001e 80BD     		pop	{r7, pc}
 288              		.cfi_endproc
 289              	.LFE67:
 290              		.size	pins_configure_active, .-pins_configure_active
 291              		.section	.rodata
 292              		.align	2
 293              	.LC0:
 294 0000 4F4B00   		.ascii	"OK\000"
 295 0003 00       		.align	2
 296              	.LC1:
 297 0004 41542353 		.ascii	"AT#SHDN\015\000"
 297      48444E0D 
 297      00
 298              		.section	.text.modem_power_down,"ax",%progbits
 299              		.align	2
 300              		.global	modem_power_down
 301              		.thumb
 302              		.thumb_func
 303              		.type	modem_power_down, %function
 304              	modem_power_down:
 305              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 306              		.loc 1 79 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0000 80B5     		push	{r7, lr}
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 00AF     		add	r7, sp, #0
 315              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 8


  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 316              		.loc 1 82 0
 317 0004 41F28832 		movw	r2, #5000
 318 0008 0A49     		ldr	r1, .L12
 319 000a 0B48     		ldr	r0, .L12+4
 320 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 321              		.loc 1 85 0
 322 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 323              		.loc 1 86 0
 324 0014 4FF47A70 		mov	r0, #1000
 325 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 326              		.loc 1 88 0
 327 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 328              		.loc 1 89 0
 329 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 330              		.loc 1 90 0
 331 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 332              		.loc 1 91 0
 333 0028 044B     		ldr	r3, .L12+8
 334 002a 0022     		movs	r2, #0
 335 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 336              		.loc 1 93 0
 337 002e 00BF     		nop
 338 0030 80BD     		pop	{r7, pc}
 339              	.L13:
 340 0032 00BF     		.align	2
 341              	.L12:
 342 0034 00000000 		.word	.LC0
 343 0038 04000000 		.word	.LC1
 344 003c 00000000 		.word	modem_state
 345              		.cfi_endproc
 346              	.LFE68:
 347              		.size	modem_power_down, .-modem_power_down
 348              		.section	.rodata
 349 000d 000000   		.align	2
 350              	.LC2:
 351 0010 41544530 		.ascii	"ATE0\015\000"
 351      0D00
 352 0016 0000     		.align	2
 353              	.LC3:
 354 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 354      6D20626F 
 354      6F742074 
 354      696D653A 
 354      20256400 
 355              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 9


 356              	.LC4:
 357 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 357      6D207265 
 357      61647920 
 357      666F7220 
 357      41542063 
 358 005d 000000   		.align	2
 359              	.LC5:
 360 0060 4E6F2072 		.ascii	"No response from modem.\000"
 360      6573706F 
 360      6E736520 
 360      66726F6D 
 360      206D6F64 
 361              		.section	.text.modem_power_up,"ax",%progbits
 362              		.align	2
 363              		.global	modem_power_up
 364              		.thumb
 365              		.thumb_func
 366              		.type	modem_power_up, %function
 367              	modem_power_up:
 368              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 369              		.loc 1 97 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 8
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373 0000 80B5     		push	{r7, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 7, -8
 376              		.cfi_offset 14, -4
 377 0002 82B0     		sub	sp, sp, #8
 378              		.cfi_def_cfa_offset 16
 379 0004 00AF     		add	r7, sp, #0
 380              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 381              		.loc 1 99 0
 382 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 383              		.loc 1 100 0
 384 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 385              		.loc 1 101 0
 386 000e 2C48     		ldr	r0, .L27
 387 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 388              		.loc 1 103 0
 389 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 390              		.loc 1 106 0
 391 0018 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 10


 392 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 393              		.loc 1 107 0
 394 001c 0023     		movs	r3, #0
 395 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 396              		.loc 1 109 0
 397 0020 FFF7FEFF 		bl	getTimeStamp
 398 0024 3860     		str	r0, [r7]
 399              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 400              		.loc 1 112 0
 401 0026 0023     		movs	r3, #0
 402 0028 BB71     		strb	r3, [r7, #6]
 403 002a 1CE0     		b	.L15
 404              	.L22:
 405              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 406              		.loc 1 114 0
 407 002c 0023     		movs	r3, #0
 408 002e 7B71     		strb	r3, [r7, #5]
 409 0030 0EE0     		b	.L16
 410              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 411              		.loc 1 116 0
 412 0032 4FF47A72 		mov	r2, #1000
 413 0036 2349     		ldr	r1, .L27+4
 414 0038 2348     		ldr	r0, .L27+8
 415 003a FFF7FEFF 		bl	at_write_command
 416 003e 0346     		mov	r3, r0
 417 0040 002B     		cmp	r3, #0
 418 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 419              		.loc 1 117 0
 420 0044 0123     		movs	r3, #1
 421 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 422              		.loc 1 118 0
 423 0048 05E0     		b	.L18
 424              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 425              		.loc 1 114 0 discriminator 2
 426 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 427 004c 0133     		adds	r3, r3, #1
 428 004e 7B71     		strb	r3, [r7, #5]
 429              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 430              		.loc 1 114 0 is_stmt 0 discriminator 1
 431 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 432 0052 132B     		cmp	r3, #19
 433 0054 EDD9     		bls	.L19
 434              	.L18:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 11


 435              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 436              		.loc 1 122 0 is_stmt 1
 437 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 438 0058 012B     		cmp	r3, #1
 439 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 440              		.loc 1 126 0 discriminator 2
 441 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 442              		.loc 1 112 0 discriminator 2
 443 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 444 0062 0133     		adds	r3, r3, #1
 445 0064 BB71     		strb	r3, [r7, #6]
 446              	.L15:
 112:modem.c       ****         
 447              		.loc 1 112 0 is_stmt 0 discriminator 1
 448 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 449 0068 022B     		cmp	r3, #2
 450 006a DFD9     		bls	.L22
 451 006c 00E0     		b	.L21
 452              	.L26:
 123:modem.c       ****             break;
 453              		.loc 1 123 0 is_stmt 1
 454 006e 00BF     		nop
 455              	.L21:
 456              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 457              		.loc 1 130 0
 458 0070 FFF7FEFF 		bl	getTimeStamp
 459 0074 0246     		mov	r2, r0
 460 0076 3B68     		ldr	r3, [r7]
 461 0078 D31A     		subs	r3, r2, r3
 462 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 463              		.loc 1 131 0
 464 007c 3A68     		ldr	r2, [r7]
 465 007e 1349     		ldr	r1, .L27+12
 466 0080 0020     		movs	r0, #0
 467 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 468              		.loc 1 133 0
 469 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 0088 012B     		cmp	r3, #1
 471 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 472              		.loc 1 134 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 12


 473 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 474 008e 1A46     		mov	r2, r3
 475 0090 0F49     		ldr	r1, .L27+16
 476 0092 0020     		movs	r0, #0
 477 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 478              		.loc 1 135 0
 479 0098 0E4B     		ldr	r3, .L27+20
 480 009a 0122     		movs	r2, #1
 481 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 482              		.loc 1 143 0
 483 009e 0123     		movs	r3, #1
 484 00a0 09E0     		b	.L25
 485              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 486              		.loc 1 137 0
 487 00a2 0D49     		ldr	r1, .L27+24
 488 00a4 0220     		movs	r0, #2
 489 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 490              		.loc 1 138 0
 491 00aa 0A4B     		ldr	r3, .L27+20
 492 00ac 0022     		movs	r2, #0
 493 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 494              		.loc 1 140 0
 495 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 496              		.loc 1 141 0
 497 00b4 0023     		movs	r3, #0
 498              	.L25:
 144:modem.c       **** }
 499              		.loc 1 144 0
 500 00b6 1846     		mov	r0, r3
 501 00b8 0837     		adds	r7, r7, #8
 502              		.cfi_def_cfa_offset 8
 503 00ba BD46     		mov	sp, r7
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 00bc 80BD     		pop	{r7, pc}
 507              	.L28:
 508 00be 00BF     		.align	2
 509              	.L27:
 510 00c0 00000000 		.word	isr_telit_rx
 511 00c4 00000000 		.word	.LC0
 512 00c8 10000000 		.word	.LC2
 513 00cc 18000000 		.word	.LC3
 514 00d0 2C000000 		.word	.LC4
 515 00d4 00000000 		.word	modem_state
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 13


 516 00d8 60000000 		.word	.LC5
 517              		.cfi_endproc
 518              	.LFE69:
 519              		.size	modem_power_up, .-modem_power_up
 520              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 521              		.align	2
 522              		.global	modem_soft_power_cycle
 523              		.thumb
 524              		.thumb_func
 525              		.type	modem_soft_power_cycle, %function
 526              	modem_soft_power_cycle:
 527              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 528              		.loc 1 147 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 538              		.loc 1 148 0
 539 0004 0120     		movs	r0, #1
 540 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 541              		.loc 1 149 0
 542 000a 4FF4FA60 		mov	r0, #2000
 543 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 544              		.loc 1 150 0
 545 0012 0020     		movs	r0, #0
 546 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 547              		.loc 1 152 0
 548 0018 00BF     		nop
 549 001a 80BD     		pop	{r7, pc}
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 553              		.section	.text.uart_string_reset,"ax",%progbits
 554              		.align	2
 555              		.global	uart_string_reset
 556              		.thumb
 557              		.thumb_func
 558              		.type	uart_string_reset, %function
 559              	uart_string_reset:
 560              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 561              		.loc 1 155 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 14


 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565 0000 80B5     		push	{r7, lr}
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 569 0002 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 571              		.loc 1 156 0
 572 0004 064B     		ldr	r3, .L31
 573 0006 0022     		movs	r2, #0
 574 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 575              		.loc 1 158 0
 576 000a 4FF48062 		mov	r2, #1024
 577 000e 0021     		movs	r1, #0
 578 0010 0448     		ldr	r0, .L31+4
 579 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 580              		.loc 1 160 0
 581 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 582              		.loc 1 161 0
 583 001a 00BF     		nop
 584 001c 80BD     		pop	{r7, pc}
 585              	.L32:
 586 001e 00BF     		.align	2
 587              	.L31:
 588 0020 00000000 		.word	uart_string_index
 589 0024 00000000 		.word	uart_received_string
 590              		.cfi_endproc
 591              	.LFE71:
 592              		.size	uart_string_reset, .-uart_string_reset
 593              		.section	.rodata
 594              		.align	2
 595              	.LC6:
 596 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 596      6D207365 
 596      6E742041 
 596      5420636F 
 596      6D6D616E 
 597              		.align	2
 598              	.LC7:
 599 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 599      6D205265 
 599      63656976 
 599      65642065 
 599      78706563 
 600 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 600      616E643A 
 600      2025730A 
 600      52656365 
 600      69766564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 15


 601 00f1 000000   		.align	2
 602              	.LC8:
 603 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 603      6D207265 
 603      71756972 
 603      65642025 
 603      64207472 
 604 0127 0A00     		.ascii	"\012\000"
 605 0129 000000   		.align	2
 606              	.LC9:
 607 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 607      64206E6F 
 607      74207772 
 607      69746520 
 607      41542063 
 608 0159 00       		.ascii	"\000"
 609              		.section	.text.at_write_command,"ax",%progbits
 610              		.align	2
 611              		.global	at_write_command
 612              		.thumb
 613              		.thumb_func
 614              		.type	at_write_command, %function
 615              	at_write_command:
 616              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 617              		.loc 1 166 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 40
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 0000 80B5     		push	{r7, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 8AB0     		sub	sp, sp, #40
 626              		.cfi_def_cfa_offset 48
 627 0004 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 629 0006 F860     		str	r0, [r7, #12]
 630 0008 B960     		str	r1, [r7, #8]
 631 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 632              		.loc 1 168 0
 633 000c 0023     		movs	r3, #0
 634 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 635              		.loc 1 170 0
 636 0010 0023     		movs	r3, #0
 637 0012 7B62     		str	r3, [r7, #36]
 638 0014 46E0     		b	.L34
 639              	.L42:
 640              	.LBB4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 16


 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 641              		.loc 1 173 0
 642 0016 0A23     		movs	r3, #10
 643 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 644              		.loc 1 174 0
 645 001a 7A68     		ldr	r2, [r7, #4]
 646 001c FB69     		ldr	r3, [r7, #28]
 647 001e B2FBF3F3 		udiv	r3, r2, r3
 648 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 649              		.loc 1 177 0
 650 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 651              		.loc 1 180 0
 652 0028 F868     		ldr	r0, [r7, #12]
 653 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 654              		.loc 1 184 0
 655 002e 7B68     		ldr	r3, [r7, #4]
 656 0030 002B     		cmp	r3, #0
 657 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 658              		.loc 1 185 0
 659 0034 FA68     		ldr	r2, [r7, #12]
 660 0036 1F49     		ldr	r1, .L43
 661 0038 0020     		movs	r0, #0
 662 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 663              		.loc 1 186 0
 664 003e 0123     		movs	r3, #1
 665 0040 34E0     		b	.L36
 666              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 667              		.loc 1 190 0
 668 0042 0023     		movs	r3, #0
 669 0044 3B62     		str	r3, [r7, #32]
 670 0046 20E0     		b	.L37
 671              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 672              		.loc 1 191 0
 673 0048 F869     		ldr	r0, [r7, #28]
 674 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 17


 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 675              		.loc 1 194 0
 676 004e B968     		ldr	r1, [r7, #8]
 677 0050 1948     		ldr	r0, .L43+4
 678 0052 FFF7FEFF 		bl	strstr
 679 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 680              		.loc 1 195 0
 681 0058 7B69     		ldr	r3, [r7, #20]
 682 005a 002B     		cmp	r3, #0
 683 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 684              		.loc 1 196 0
 685 005e 7B6A     		ldr	r3, [r7, #36]
 686 0060 002B     		cmp	r3, #0
 687 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 688              		.loc 1 198 0
 689 0064 144B     		ldr	r3, .L43+4
 690 0066 FA68     		ldr	r2, [r7, #12]
 691 0068 1449     		ldr	r1, .L43+8
 692 006a 0020     		movs	r0, #0
 693 006c FFF7FEFF 		bl	printNotif
 694 0070 06E0     		b	.L40
 695              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 696              		.loc 1 200 0
 697 0072 7B6A     		ldr	r3, [r7, #36]
 698 0074 5A1C     		adds	r2, r3, #1
 699 0076 104B     		ldr	r3, .L43+4
 700 0078 1149     		ldr	r1, .L43+12
 701 007a 0120     		movs	r0, #1
 702 007c FFF7FEFF 		bl	printNotif
 703              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 704              		.loc 1 203 0
 705 0080 0123     		movs	r3, #1
 706 0082 13E0     		b	.L36
 707              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 708              		.loc 1 190 0 discriminator 2
 709 0084 3B6A     		ldr	r3, [r7, #32]
 710 0086 0133     		adds	r3, r3, #1
 711 0088 3B62     		str	r3, [r7, #32]
 712              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 713              		.loc 1 190 0 is_stmt 0 discriminator 1
 714 008a 3A6A     		ldr	r2, [r7, #32]
 715 008c BB69     		ldr	r3, [r7, #24]
 716 008e 9A42     		cmp	r2, r3
 717 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 18


 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 718              		.loc 1 209 0 is_stmt 1 discriminator 2
 719 0092 094B     		ldr	r3, .L43+4
 720 0094 FA68     		ldr	r2, [r7, #12]
 721 0096 0B49     		ldr	r1, .L43+16
 722 0098 0220     		movs	r0, #2
 723 009a FFF7FEFF 		bl	printNotif
 724              	.LBE4:
 170:modem.c       ****         
 725              		.loc 1 170 0 discriminator 2
 726 009e 7B6A     		ldr	r3, [r7, #36]
 727 00a0 0133     		adds	r3, r3, #1
 728 00a2 7B62     		str	r3, [r7, #36]
 729              	.L34:
 170:modem.c       ****         
 730              		.loc 1 170 0 is_stmt 0 discriminator 1
 731 00a4 7B6A     		ldr	r3, [r7, #36]
 732 00a6 022B     		cmp	r3, #2
 733 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 734              		.loc 1 214 0 is_stmt 1
 735 00aa 0023     		movs	r3, #0
 736              	.L36:
 215:modem.c       **** }
 737              		.loc 1 215 0
 738 00ac 1846     		mov	r0, r3
 739 00ae 2837     		adds	r7, r7, #40
 740              		.cfi_def_cfa_offset 8
 741 00b0 BD46     		mov	sp, r7
 742              		.cfi_def_cfa_register 13
 743              		@ sp needed
 744 00b2 80BD     		pop	{r7, pc}
 745              	.L44:
 746              		.align	2
 747              	.L43:
 748 00b4 78000000 		.word	.LC6
 749 00b8 00000000 		.word	uart_received_string
 750 00bc A4000000 		.word	.LC7
 751 00c0 F4000000 		.word	.LC8
 752 00c4 2C010000 		.word	.LC9
 753              		.cfi_endproc
 754              	.LFE72:
 755              		.size	at_write_command, .-at_write_command
 756              		.section	.rodata
 757 015a 0000     		.align	2
 758              	.LC10:
 759 015c 54455354 		.ascii	"TEST_MODEM\000"
 759      5F4D4F44 
 759      454D00
 760 0167 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 19


 761              	.LC11:
 762 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 762      65706F6E 
 762      73652066 
 762      726F6D20 
 762      6D6F6465 
 763 017f 00       		.align	2
 764              	.LC12:
 765 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 765      6D20636F 
 765      6E6E6563 
 765      74656420 
 765      746F206E 
 766              		.section	.text.modem_test,"ax",%progbits
 767              		.align	2
 768              		.global	modem_test
 769              		.thumb
 770              		.thumb_func
 771              		.type	modem_test, %function
 772              	modem_test:
 773              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 774              		.loc 1 218 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 408
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778 0000 B0B5     		push	{r4, r5, r7, lr}
 779              		.cfi_def_cfa_offset 16
 780              		.cfi_offset 4, -16
 781              		.cfi_offset 5, -12
 782              		.cfi_offset 7, -8
 783              		.cfi_offset 14, -4
 784 0002 E6B0     		sub	sp, sp, #408
 785              		.cfi_def_cfa_offset 424
 786 0004 00AF     		add	r7, sp, #0
 787              		.cfi_def_cfa_register 7
 788 0006 3B1D     		adds	r3, r7, #4
 789 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 790              		.loc 1 221 0
 791 000a 07F10C03 		add	r3, r7, #12
 792 000e 0022     		movs	r2, #0
 793 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 794              		.loc 1 223 0
 795 0014 07F10C03 		add	r3, r7, #12
 796 0018 364A     		ldr	r2, .L53
 797 001a 07CA     		ldmia	r2, {r0, r1, r2}
 798 001c 03C3     		stmia	r3!, {r0, r1}
 799 001e 1A80     		strh	r2, [r3]	@ movhi
 800 0020 0233     		adds	r3, r3, #2
 801 0022 120C     		lsrs	r2, r2, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 20


 802 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 803              		.loc 1 224 0
 804 0026 07F10C03 		add	r3, r7, #12
 805 002a 8133     		adds	r3, r3, #129
 806 002c 324A     		ldr	r2, .L53+4
 807 002e 1C46     		mov	r4, r3
 808 0030 1546     		mov	r5, r2
 809 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 810 0034 2060     		str	r0, [r4]	@ unaligned
 811 0036 6160     		str	r1, [r4, #4]	@ unaligned
 812 0038 A260     		str	r2, [r4, #8]	@ unaligned
 813 003a E360     		str	r3, [r4, #12]	@ unaligned
 814 003c 2868     		ldr	r0, [r5]	@ unaligned
 815 003e 2061     		str	r0, [r4, #16]	@ unaligned
 816 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 817 0042 AA79     		ldrb	r2, [r5, #6]
 818 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 819 0046 1346     		mov	r3, r2
 820 0048 A375     		strb	r3, [r4, #22]
 821              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 822              		.loc 1 227 0
 823 004a 0023     		movs	r3, #0
 824 004c C7F89431 		str	r3, [r7, #404]
 825 0050 3AE0     		b	.L46
 826              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 827              		.loc 1 229 0
 828 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 829              		.loc 1 231 0
 830 0056 FFF7FEFF 		bl	modem_get_state
 831 005a 0346     		mov	r3, r0
 832 005c 002B     		cmp	r3, #0
 833 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 834              		.loc 1 233 0
 835 0060 FFF7FEFF 		bl	modem_power_up
 836 0064 27E0     		b	.L48
 837              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 838              		.loc 1 236 0
 839 0066 FFF7FEFF 		bl	modem_get_state
 840 006a 0346     		mov	r3, r0
 841 006c 042B     		cmp	r3, #4
 842 006e 22D1     		bne	.L48
 843              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 21


 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 844              		.loc 1 240 0
 845 0070 FFF7FEFF 		bl	modem_get_network_time
 846 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 847              		.loc 1 241 0
 848 0078 D7F89031 		ldr	r3, [r7, #400]
 849 007c 002B     		cmp	r3, #0
 850 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 851              		.loc 1 242 0
 852 0080 D7F89001 		ldr	r0, [r7, #400]
 853 0084 FFF7FEFF 		bl	setTime
 854              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 855              		.loc 1 245 0
 856 0088 07F10C03 		add	r3, r7, #12
 857 008c 8133     		adds	r3, r3, #129
 858 008e 1B4A     		ldr	r2, .L53+8
 859 0090 1D46     		mov	r5, r3
 860 0092 1446     		mov	r4, r2
 861 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 862 0096 2860     		str	r0, [r5]	@ unaligned
 863 0098 6960     		str	r1, [r5, #4]	@ unaligned
 864 009a AA60     		str	r2, [r5, #8]	@ unaligned
 865 009c EB60     		str	r3, [r5, #12]	@ unaligned
 866 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 867 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 868 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 869 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 870              		.loc 1 246 0
 871 00a6 07F10C03 		add	r3, r7, #12
 872 00aa 0122     		movs	r2, #1
 873 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 874              		.loc 1 248 0
 875 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 876              		.loc 1 249 0
 877 00b4 0CE0     		b	.L50
 878              	.L48:
 879              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 880              		.loc 1 252 0 discriminator 2
 881 00b6 4FF47A70 		mov	r0, #1000
 882 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 883              		.loc 1 227 0 discriminator 2
 884 00be D7F89431 		ldr	r3, [r7, #404]
 885 00c2 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 22


 886 00c4 C7F89431 		str	r3, [r7, #404]
 887              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 888              		.loc 1 227 0 is_stmt 0 discriminator 1
 889 00c8 D7F89431 		ldr	r3, [r7, #404]
 890 00cc 3B2B     		cmp	r3, #59
 891 00ce C0DD     		ble	.L51
 892              	.L50:
 893              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 894              		.loc 1 256 0 is_stmt 1
 895 00d0 3B1D     		adds	r3, r7, #4
 896 00d2 1A68     		ldr	r2, [r3]
 897 00d4 07F10C03 		add	r3, r7, #12
 898 00d8 1046     		mov	r0, r2
 899 00da 1946     		mov	r1, r3
 900 00dc 40F28113 		movw	r3, #385
 901 00e0 1A46     		mov	r2, r3
 902 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 903              		.loc 1 257 0
 904 00e6 3B1D     		adds	r3, r7, #4
 905 00e8 1868     		ldr	r0, [r3]
 906 00ea 07F5CC77 		add	r7, r7, #408
 907              		.cfi_def_cfa_offset 16
 908 00ee BD46     		mov	sp, r7
 909              		.cfi_def_cfa_register 13
 910              		@ sp needed
 911 00f0 B0BD     		pop	{r4, r5, r7, pc}
 912              	.L54:
 913 00f2 00BF     		.align	2
 914              	.L53:
 915 00f4 5C010000 		.word	.LC10
 916 00f8 68010000 		.word	.LC11
 917 00fc 80010000 		.word	.LC12
 918              		.cfi_endproc
 919              	.LFE73:
 920              		.size	modem_test, .-modem_test
 921              		.section	.text.extract_string,"ax",%progbits
 922              		.align	2
 923              		.global	extract_string
 924              		.thumb
 925              		.thumb_func
 926              		.type	extract_string, %function
 927              	extract_string:
 928              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 929              		.loc 1 260 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 24
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 23


 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 86B0     		sub	sp, sp, #24
 938              		.cfi_def_cfa_offset 32
 939 0004 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0006 F860     		str	r0, [r7, #12]
 942 0008 B960     		str	r1, [r7, #8]
 943 000a 7A60     		str	r2, [r7, #4]
 944 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 945              		.loc 1 266 0
 946 000e B968     		ldr	r1, [r7, #8]
 947 0010 F868     		ldr	r0, [r7, #12]
 948 0012 FFF7FEFF 		bl	strstr
 949 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 950              		.loc 1 267 0
 951 0018 7B69     		ldr	r3, [r7, #20]
 952 001a 002B     		cmp	r3, #0
 953 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 954              		.loc 1 269 0
 955 001e FB68     		ldr	r3, [r7, #12]
 956 0020 7B61     		str	r3, [r7, #20]
 957              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 958              		.loc 1 272 0
 959 0022 B868     		ldr	r0, [r7, #8]
 960 0024 FFF7FEFF 		bl	strlen
 961 0028 0246     		mov	r2, r0
 962 002a 7B69     		ldr	r3, [r7, #20]
 963 002c 1344     		add	r3, r3, r2
 964 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 965              		.loc 1 277 0
 966 0030 7968     		ldr	r1, [r7, #4]
 967 0032 7869     		ldr	r0, [r7, #20]
 968 0034 FFF7FEFF 		bl	strstr
 969 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 970              		.loc 1 278 0
 971 003a 3B69     		ldr	r3, [r7, #16]
 972 003c 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 24


 973 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 974              		.loc 1 280 0
 975 0040 F868     		ldr	r0, [r7, #12]
 976 0042 FFF7FEFF 		bl	strlen
 977 0046 0246     		mov	r2, r0
 978 0048 FB68     		ldr	r3, [r7, #12]
 979 004a 1344     		add	r3, r3, r2
 980 004c 3B61     		str	r3, [r7, #16]
 981              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 982              		.loc 1 284 0
 983 004e 3A69     		ldr	r2, [r7, #16]
 984 0050 7B69     		ldr	r3, [r7, #20]
 985 0052 D31A     		subs	r3, r2, r3
 986 0054 1A46     		mov	r2, r3
 987 0056 7969     		ldr	r1, [r7, #20]
 988 0058 3868     		ldr	r0, [r7]
 989 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 990              		.loc 1 285 0
 991 005e 3A69     		ldr	r2, [r7, #16]
 992 0060 7B69     		ldr	r3, [r7, #20]
 993 0062 D31A     		subs	r3, r2, r3
 994 0064 1A46     		mov	r2, r3
 995 0066 3B68     		ldr	r3, [r7]
 996 0068 1344     		add	r3, r3, r2
 997 006a 0022     		movs	r2, #0
 998 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 999              		.loc 1 286 0
 1000 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 1001              		.loc 1 288 0
 1002 0070 1846     		mov	r0, r3
 1003 0072 1837     		adds	r7, r7, #24
 1004              		.cfi_def_cfa_offset 8
 1005 0074 BD46     		mov	sp, r7
 1006              		.cfi_def_cfa_register 13
 1007              		@ sp needed
 1008 0076 80BD     		pop	{r7, pc}
 1009              		.cfi_endproc
 1010              	.LFE74:
 1011              		.size	extract_string, .-extract_string
 1012              		.section	.rodata
 1013              		.align	2
 1014              	.LC13:
 1015 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1015      20746F20 
 1015      636F6E6E 
 1015      65637420 
 1015      746F206E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 25


 1016 01c3 00       		.align	2
 1017              	.LC14:
 1018 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1018      6D207469 
 1018      6D656420 
 1018      6F757420 
 1018      6F6E206E 
 1019 01e7 00       		.align	2
 1020              	.LC15:
 1021 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1021      69726564 
 1021      20495020 
 1021      61646472 
 1021      6573733A 
 1022              		.align	2
 1023              	.LC16:
 1024 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1024      6D207469 
 1024      6D656420 
 1024      6F757420 
 1024      6F6E2049 
 1025              		.section	.text.modem_process_tasks,"ax",%progbits
 1026              		.align	2
 1027              		.global	modem_process_tasks
 1028              		.thumb
 1029              		.thumb_func
 1030              		.type	modem_process_tasks, %function
 1031              	modem_process_tasks:
 1032              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1033              		.loc 1 291 0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 8
 1036              		@ frame_needed = 1, uses_anonymous_args = 0
 1037 0000 80B5     		push	{r7, lr}
 1038              		.cfi_def_cfa_offset 8
 1039              		.cfi_offset 7, -8
 1040              		.cfi_offset 14, -4
 1041 0002 82B0     		sub	sp, sp, #8
 1042              		.cfi_def_cfa_offset 16
 1043 0004 00AF     		add	r7, sp, #0
 1044              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1045              		.loc 1 293 0
 1046 0006 534B     		ldr	r3, .L75
 1047 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1048 000a 012B     		cmp	r3, #1
 1049 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1050              		.loc 1 295 0
 1051 000e FFF7FEFF 		bl	getTimeStamp
 1052 0012 0246     		mov	r2, r0
 1053 0014 504B     		ldr	r3, .L75+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 26


 1054 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1055              		.loc 1 296 0
 1056 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1057              		.loc 1 297 0
 1058 001c 4D4B     		ldr	r3, .L75
 1059 001e 0222     		movs	r2, #2
 1060 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1061              		.loc 1 298 0
 1062 0022 0123     		movs	r3, #1
 1063 0024 92E0     		b	.L61
 1064              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1065              		.loc 1 302 0
 1066 0026 4B4B     		ldr	r3, .L75
 1067 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1068 002a 022B     		cmp	r3, #2
 1069 002c 5FD1     		bne	.L62
 1070              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1071              		.loc 1 305 0
 1072 002e 0023     		movs	r3, #0
 1073 0030 FB71     		strb	r3, [r7, #7]
 1074 0032 2BE0     		b	.L63
 1075              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1076              		.loc 1 307 0
 1077 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1078              		.loc 1 309 0
 1079 0038 484B     		ldr	r3, .L75+8
 1080 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1081 003c 83F00103 		eor	r3, r3, #1
 1082 0040 DBB2     		uxtb	r3, r3
 1083 0042 002B     		cmp	r3, #0
 1084 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1085              		.loc 1 312 0
 1086 0046 464B     		ldr	r3, .L75+12
 1087 0048 5B69     		ldr	r3, [r3, #20]
 1088 004a 1A2B     		cmp	r3, #26
 1089 004c 03DD     		ble	.L64
 1090              		.loc 1 312 0 is_stmt 0 discriminator 1
 1091 004e 444B     		ldr	r3, .L75+12
 1092 0050 5B69     		ldr	r3, [r3, #20]
 1093 0052 FF2B     		cmp	r3, #255
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 27


 1094 0054 1ED1     		bne	.L74
 1095              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1096              		.loc 1 317 0 is_stmt 1
 1097 0056 414B     		ldr	r3, .L75+8
 1098 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1099 005a 002B     		cmp	r3, #0
 1100 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1101              		.loc 1 320 0
 1102 005e 404B     		ldr	r3, .L75+12
 1103 0060 9B68     		ldr	r3, [r3, #8]
 1104 0062 242B     		cmp	r3, #36
 1105 0064 03DD     		ble	.L67
 1106              		.loc 1 320 0 is_stmt 0 discriminator 1
 1107 0066 3E4B     		ldr	r3, .L75+12
 1108 0068 9B68     		ldr	r3, [r3, #8]
 1109 006a FF2B     		cmp	r3, #255
 1110 006c 13D1     		bne	.L65
 1111              	.L67:
 1112              		.loc 1 320 0 discriminator 3
 1113 006e 3C4B     		ldr	r3, .L75+12
 1114 0070 5B69     		ldr	r3, [r3, #20]
 1115 0072 1A2B     		cmp	r3, #26
 1116 0074 03DD     		ble	.L66
 1117              		.loc 1 320 0 discriminator 4
 1118 0076 3A4B     		ldr	r3, .L75+12
 1119 0078 5B69     		ldr	r3, [r3, #20]
 1120 007a FF2B     		cmp	r3, #255
 1121 007c 0BD1     		bne	.L65
 1122              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1123              		.loc 1 325 0 is_stmt 1 discriminator 2
 1124 007e 4FF47A70 		mov	r0, #1000
 1125 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1126              		.loc 1 305 0 discriminator 2
 1127 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1128 0088 0133     		adds	r3, r3, #1
 1129 008a FB71     		strb	r3, [r7, #7]
 1130              	.L63:
 305:modem.c       ****             // Get cell network stats
 1131              		.loc 1 305 0 is_stmt 0 discriminator 1
 1132 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1133 008e 1D2B     		cmp	r3, #29
 1134 0090 D0D9     		bls	.L68
 1135 0092 00E0     		b	.L65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 28


 1136              	.L74:
 313:modem.c       ****                 }
 1137              		.loc 1 313 0 is_stmt 1
 1138 0094 00BF     		nop
 1139              	.L65:
 1140              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1141              		.loc 1 329 0
 1142 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1143 009a 0346     		mov	r3, r0
 1144 009c 002B     		cmp	r3, #0
 1145 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1146              		.loc 1 331 0
 1147 00a0 FFF7FEFF 		bl	getTimeStamp
 1148 00a4 0246     		mov	r2, r0
 1149 00a6 2C4B     		ldr	r3, .L75+4
 1150 00a8 1B68     		ldr	r3, [r3]
 1151 00aa D31A     		subs	r3, r2, r3
 1152 00ac 2C4A     		ldr	r2, .L75+12
 1153 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1154              		.loc 1 332 0
 1155 00b0 2B4B     		ldr	r3, .L75+12
 1156 00b2 9B69     		ldr	r3, [r3, #24]
 1157 00b4 1A46     		mov	r2, r3
 1158 00b6 2B49     		ldr	r1, .L75+16
 1159 00b8 0020     		movs	r0, #0
 1160 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1161              		.loc 1 334 0
 1162 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1163              		.loc 1 335 0
 1164 00c2 244B     		ldr	r3, .L75
 1165 00c4 0322     		movs	r2, #3
 1166 00c6 1A70     		strb	r2, [r3]
 1167              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1168              		.loc 1 339 0
 1169 00c8 FFF7FEFF 		bl	getTimeStamp
 1170 00cc 0246     		mov	r2, r0
 1171 00ce 224B     		ldr	r3, .L75+4
 1172 00d0 1B68     		ldr	r3, [r3]
 1173 00d2 D31A     		subs	r3, r2, r3
 1174 00d4 B42B     		cmp	r3, #180
 1175 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1176              		.loc 1 340 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 29


 1177 00d8 1E4B     		ldr	r3, .L75
 1178 00da 0022     		movs	r2, #0
 1179 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1180              		.loc 1 341 0
 1181 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1182              		.loc 1 342 0
 1183 00e2 2149     		ldr	r1, .L75+20
 1184 00e4 0220     		movs	r0, #2
 1185 00e6 FFF7FEFF 		bl	printNotif
 1186              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1187              		.loc 1 345 0
 1188 00ea 0023     		movs	r3, #0
 1189 00ec 2EE0     		b	.L61
 1190              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1191              		.loc 1 348 0
 1192 00ee 194B     		ldr	r3, .L75
 1193 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1194 00f2 032B     		cmp	r3, #3
 1195 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1196              		.loc 1 350 0
 1197 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1198 00fa 0346     		mov	r3, r0
 1199 00fc 002B     		cmp	r3, #0
 1200 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1201              		.loc 1 351 0
 1202 0100 144B     		ldr	r3, .L75
 1203 0102 0422     		movs	r2, #4
 1204 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1205              		.loc 1 353 0
 1206 0106 FFF7FEFF 		bl	getTimeStamp
 1207 010a 0246     		mov	r2, r0
 1208 010c 124B     		ldr	r3, .L75+4
 1209 010e 1B68     		ldr	r3, [r3]
 1210 0110 D31A     		subs	r3, r2, r3
 1211 0112 134A     		ldr	r2, .L75+12
 1212 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1213              		.loc 1 354 0
 1214 0116 124B     		ldr	r3, .L75+12
 1215 0118 DB69     		ldr	r3, [r3, #28]
 1216 011a 1A46     		mov	r2, r3
 1217 011c 1349     		ldr	r1, .L75+24
 1218 011e 0020     		movs	r0, #0
 1219 0120 FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 30


 1220              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1221              		.loc 1 359 0
 1222 0124 FFF7FEFF 		bl	getTimeStamp
 1223 0128 0246     		mov	r2, r0
 1224 012a 0B4B     		ldr	r3, .L75+4
 1225 012c 1B68     		ldr	r3, [r3]
 1226 012e D31A     		subs	r3, r2, r3
 1227 0130 E62B     		cmp	r3, #230
 1228 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1229              		.loc 1 360 0
 1230 0134 074B     		ldr	r3, .L75
 1231 0136 0022     		movs	r2, #0
 1232 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1233              		.loc 1 361 0
 1234 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1235              		.loc 1 362 0
 1236 013e 0C49     		ldr	r1, .L75+28
 1237 0140 0220     		movs	r0, #2
 1238 0142 FFF7FEFF 		bl	printNotif
 1239              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1240              		.loc 1 365 0
 1241 0146 0023     		movs	r3, #0
 1242 0148 00E0     		b	.L61
 1243              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1244              		.loc 1 368 0
 1245 014a 0023     		movs	r3, #0
 1246              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1247              		.loc 1 370 0
 1248 014c 1846     		mov	r0, r3
 1249 014e 0837     		adds	r7, r7, #8
 1250              		.cfi_def_cfa_offset 8
 1251 0150 BD46     		mov	sp, r7
 1252              		.cfi_def_cfa_register 13
 1253              		@ sp needed
 1254 0152 80BD     		pop	{r7, pc}
 1255              	.L76:
 1256              		.align	2
 1257              	.L75:
 1258 0154 00000000 		.word	modem_state
 1259 0158 00000000 		.word	modem_start_time_stamp
 1260 015c 00000000 		.word	updatable_parameters
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 31


 1261 0160 00000000 		.word	modem_stats
 1262 0164 9C010000 		.word	.LC13
 1263 0168 C4010000 		.word	.LC14
 1264 016c E8010000 		.word	.LC15
 1265 0170 08020000 		.word	.LC16
 1266              		.cfi_endproc
 1267              	.LFE75:
 1268              		.size	modem_process_tasks, .-modem_process_tasks
 1269              		.section	.rodata
 1270 022f 00       		.align	2
 1271              	.LC17:
 1272 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1272      6B696E67 
 1272      2041542B 
 1272      43524547 
 1272      3F00
 1273 0242 0000     		.align	2
 1274              	.LC18:
 1275 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1275      5245473F 
 1275      0D00
 1276 024e 0000     		.align	2
 1277              	.LC19:
 1278 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1278      61637469 
 1278      6E672073 
 1278      7472696E 
 1278      67204154 
 1279 026b 00       		.align	2
 1280              	.LC20:
 1281 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1281      5F726563 
 1281      65697665 
 1281      645F7374 
 1281      72696E67 
 1282 0285 000000   		.align	2
 1283              	.LC21:
 1284 0288 0D00     		.ascii	"\015\000"
 1285 028a 0000     		.align	2
 1286              	.LC22:
 1287 028c 3A2000   		.ascii	": \000"
 1288 028f 00       		.align	2
 1289              	.LC23:
 1290 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1290      73746572 
 1290      65642074 
 1290      6F206E65 
 1290      74776F72 
 1291              		.align	2
 1292              	.LC24:
 1293 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1293      20657874 
 1293      72616369 
 1293      6E672073 
 1293      7472696E 
 1294 02cf 00       		.align	2
 1295              	.LC25:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 32


 1296 02d0 302C3100 		.ascii	"0,1\000"
 1297              		.align	2
 1298              	.LC26:
 1299 02d4 302C3500 		.ascii	"0,5\000"
 1300              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1301              		.align	2
 1302              		.global	is_connected_to_cell_network
 1303              		.thumb
 1304              		.thumb_func
 1305              		.type	is_connected_to_cell_network, %function
 1306              	is_connected_to_cell_network:
 1307              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1308              		.loc 1 373 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 16
 1311              		@ frame_needed = 1, uses_anonymous_args = 0
 1312 0000 80B5     		push	{r7, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 84B0     		sub	sp, sp, #16
 1317              		.cfi_def_cfa_offset 24
 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1320              		.loc 1 375 0
 1321 0006 2049     		ldr	r1, .L82
 1322 0008 0020     		movs	r0, #0
 1323 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1324              		.loc 1 377 0
 1325 000e 4FF4FA62 		mov	r2, #2000
 1326 0012 1E49     		ldr	r1, .L82+4
 1327 0014 1E48     		ldr	r0, .L82+8
 1328 0016 FFF7FEFF 		bl	at_write_command
 1329 001a 0346     		mov	r3, r0
 1330 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1331              		.loc 1 379 0
 1332 001e 1D49     		ldr	r1, .L82+12
 1333 0020 0020     		movs	r0, #0
 1334 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1335              		.loc 1 380 0
 1336 0026 1C4A     		ldr	r2, .L82+16
 1337 0028 1C49     		ldr	r1, .L82+20
 1338 002a 0020     		movs	r0, #0
 1339 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 33


 1340              		.loc 1 383 0
 1341 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1342 0032 002B     		cmp	r3, #0
 1343 0034 23D0     		beq	.L78
 1344              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1345              		.loc 1 386 0
 1346 0036 0023     		movs	r3, #0
 1347 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1348              		.loc 1 388 0
 1349 003a 3B1D     		adds	r3, r7, #4
 1350 003c 184A     		ldr	r2, .L82+24
 1351 003e 1949     		ldr	r1, .L82+28
 1352 0040 1548     		ldr	r0, .L82+16
 1353 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1354              		.loc 1 389 0
 1355 0046 3B1D     		adds	r3, r7, #4
 1356 0048 1A46     		mov	r2, r3
 1357 004a 1749     		ldr	r1, .L82+32
 1358 004c 0020     		movs	r0, #0
 1359 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1360              		.loc 1 390 0
 1361 0052 1649     		ldr	r1, .L82+36
 1362 0054 0020     		movs	r0, #0
 1363 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1364              		.loc 1 393 0
 1365 005a 3B1D     		adds	r3, r7, #4
 1366 005c 1449     		ldr	r1, .L82+40
 1367 005e 1846     		mov	r0, r3
 1368 0060 FFF7FEFF 		bl	strstr
 1369 0064 0346     		mov	r3, r0
 1370 0066 002B     		cmp	r3, #0
 1371 0068 07D1     		bne	.L79
 1372              		.loc 1 393 0 is_stmt 0 discriminator 1
 1373 006a 3B1D     		adds	r3, r7, #4
 1374 006c 1149     		ldr	r1, .L82+44
 1375 006e 1846     		mov	r0, r3
 1376 0070 FFF7FEFF 		bl	strstr
 1377 0074 0346     		mov	r3, r0
 1378 0076 002B     		cmp	r3, #0
 1379 0078 01D0     		beq	.L78
 1380              	.L79:
 394:modem.c       ****             return 1u;
 1381              		.loc 1 394 0 is_stmt 1
 1382 007a 0123     		movs	r3, #1
 1383 007c 00E0     		b	.L81
 1384              	.L78:
 1385              	.LBE8:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 34


 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1386              		.loc 1 398 0
 1387 007e 0023     		movs	r3, #0
 1388              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1389              		.loc 1 400 0
 1390 0080 1846     		mov	r0, r3
 1391 0082 1037     		adds	r7, r7, #16
 1392              		.cfi_def_cfa_offset 8
 1393 0084 BD46     		mov	sp, r7
 1394              		.cfi_def_cfa_register 13
 1395              		@ sp needed
 1396 0086 80BD     		pop	{r7, pc}
 1397              	.L83:
 1398              		.align	2
 1399              	.L82:
 1400 0088 30020000 		.word	.LC17
 1401 008c 00000000 		.word	.LC0
 1402 0090 44020000 		.word	.LC18
 1403 0094 50020000 		.word	.LC19
 1404 0098 00000000 		.word	uart_received_string
 1405 009c 6C020000 		.word	.LC20
 1406 00a0 88020000 		.word	.LC21
 1407 00a4 8C020000 		.word	.LC22
 1408 00a8 90020000 		.word	.LC23
 1409 00ac B0020000 		.word	.LC24
 1410 00b0 D0020000 		.word	.LC25
 1411 00b4 D4020000 		.word	.LC26
 1412              		.cfi_endproc
 1413              	.LFE76:
 1414              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1415              		.section	.rodata
 1416              		.align	2
 1417              	.LC27:
 1418 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1418      47414354 
 1418      3D312C31 
 1418      0D0A00
 1419              		.section	.text.set_up_internet_connection,"ax",%progbits
 1420              		.align	2
 1421              		.global	set_up_internet_connection
 1422              		.thumb
 1423              		.thumb_func
 1424              		.type	set_up_internet_connection, %function
 1425              	set_up_internet_connection:
 1426              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1427              		.loc 1 403 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 35


 1431 0000 80B5     		push	{r7, lr}
 1432              		.cfi_def_cfa_offset 8
 1433              		.cfi_offset 7, -8
 1434              		.cfi_offset 14, -4
 1435 0002 00AF     		add	r7, sp, #0
 1436              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1437              		.loc 1 414 0
 1438 0004 4FF47A72 		mov	r2, #1000
 1439 0008 0249     		ldr	r1, .L85
 1440 000a 0348     		ldr	r0, .L85+4
 1441 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1442              		.loc 1 416 0
 1443 0010 00BF     		nop
 1444 0012 80BD     		pop	{r7, pc}
 1445              	.L86:
 1446              		.align	2
 1447              	.L85:
 1448 0014 00000000 		.word	.LC0
 1449 0018 D8020000 		.word	.LC27
 1450              		.cfi_endproc
 1451              	.LFE77:
 1452              		.size	set_up_internet_connection, .-set_up_internet_connection
 1453              		.section	.rodata
 1454 02e7 00       		.align	2
 1455              	.LC28:
 1456 02e8 312C3100 		.ascii	"1,1\000"
 1457              		.align	2
 1458              	.LC29:
 1459 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1459      47414354 
 1459      3F0D00
 1460              		.section	.text.is_connected_to_internet,"ax",%progbits
 1461              		.align	2
 1462              		.global	is_connected_to_internet
 1463              		.thumb
 1464              		.thumb_func
 1465              		.type	is_connected_to_internet, %function
 1466              	is_connected_to_internet:
 1467              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1468              		.loc 1 419 0
 1469              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 36


 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472 0000 80B5     		push	{r7, lr}
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 7, -8
 1475              		.cfi_offset 14, -4
 1476 0002 00AF     		add	r7, sp, #0
 1477              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1478              		.loc 1 424 0
 1479 0004 4FF4FA62 		mov	r2, #2000
 1480 0008 0549     		ldr	r1, .L90
 1481 000a 0648     		ldr	r0, .L90+4
 1482 000c FFF7FEFF 		bl	at_write_command
 1483 0010 0346     		mov	r3, r0
 1484 0012 002B     		cmp	r3, #0
 1485 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1486              		.loc 1 425 0
 1487 0016 0123     		movs	r3, #1
 1488 0018 00E0     		b	.L89
 1489              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1490              		.loc 1 427 0
 1491 001a 0023     		movs	r3, #0
 1492              	.L89:
 428:modem.c       **** }
 1493              		.loc 1 428 0
 1494 001c 1846     		mov	r0, r3
 1495 001e 80BD     		pop	{r7, pc}
 1496              	.L91:
 1497              		.align	2
 1498              	.L90:
 1499 0020 E8020000 		.word	.LC28
 1500 0024 EC020000 		.word	.LC29
 1501              		.cfi_endproc
 1502              	.LFE78:
 1503              		.size	is_connected_to_internet, .-is_connected_to_internet
 1504              		.section	.rodata
 1505 02f7 00       		.align	2
 1506              	.LC30:
 1507 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1507      4553510D 
 1507      00
 1508 0301 000000   		.align	2
 1509              	.LC31:
 1510 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1510      4553513A 
 1510      2025642C 
 1510      25642C25 
 1510      642C2564 
 1511              		.section	.text.get_cell_network_stats,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 37


 1512              		.align	2
 1513              		.global	get_cell_network_stats
 1514              		.thumb
 1515              		.thumb_func
 1516              		.type	get_cell_network_stats, %function
 1517              	get_cell_network_stats:
 1518              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1519              		.loc 1 430 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 8
 1522              		@ frame_needed = 1, uses_anonymous_args = 0
 1523 0000 80B5     		push	{r7, lr}
 1524              		.cfi_def_cfa_offset 8
 1525              		.cfi_offset 7, -8
 1526              		.cfi_offset 14, -4
 1527 0002 86B0     		sub	sp, sp, #24
 1528              		.cfi_def_cfa_offset 32
 1529 0004 04AF     		add	r7, sp, #16
 1530              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1531              		.loc 1 432 0
 1532 0006 154B     		ldr	r3, .L93
 1533 0008 FF22     		movs	r2, #255
 1534 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1535              		.loc 1 433 0
 1536 000c 134B     		ldr	r3, .L93
 1537 000e FF22     		movs	r2, #255
 1538 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1539              		.loc 1 434 0
 1540 0012 124B     		ldr	r3, .L93
 1541 0014 FF22     		movs	r2, #255
 1542 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1543              		.loc 1 435 0
 1544 0018 104B     		ldr	r3, .L93
 1545 001a FF22     		movs	r2, #255
 1546 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1547              		.loc 1 436 0
 1548 001e 0F4B     		ldr	r3, .L93
 1549 0020 FF22     		movs	r2, #255
 1550 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1551              		.loc 1 437 0
 1552 0024 0D4B     		ldr	r3, .L93
 1553 0026 FF22     		movs	r2, #255
 1554 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1555              		.loc 1 440 0
 1556 002a 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 38


 1557 002e 0C49     		ldr	r1, .L93+4
 1558 0030 0C48     		ldr	r0, .L93+8
 1559 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1560              		.loc 1 443 0
 1561 0036 0C4B     		ldr	r3, .L93+12
 1562 0038 0393     		str	r3, [sp, #12]
 1563 003a 0C4B     		ldr	r3, .L93+16
 1564 003c 0293     		str	r3, [sp, #8]
 1565 003e 0C4B     		ldr	r3, .L93+20
 1566 0040 0193     		str	r3, [sp, #4]
 1567 0042 0C4B     		ldr	r3, .L93+24
 1568 0044 0093     		str	r3, [sp]
 1569 0046 0C4B     		ldr	r3, .L93+28
 1570 0048 044A     		ldr	r2, .L93
 1571 004a 0C49     		ldr	r1, .L93+32
 1572 004c 0C48     		ldr	r0, .L93+36
 1573 004e FFF7FEFF 		bl	sscanf
 1574 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1575              		.loc 1 458 0
 1576 0054 00BF     		nop
 1577 0056 0837     		adds	r7, r7, #8
 1578              		.cfi_def_cfa_offset 8
 1579 0058 BD46     		mov	sp, r7
 1580              		.cfi_def_cfa_register 13
 1581              		@ sp needed
 1582 005a 80BD     		pop	{r7, pc}
 1583              	.L94:
 1584              		.align	2
 1585              	.L93:
 1586 005c 00000000 		.word	modem_stats
 1587 0060 00000000 		.word	.LC0
 1588 0064 F8020000 		.word	.LC30
 1589 0068 14000000 		.word	modem_stats+20
 1590 006c 10000000 		.word	modem_stats+16
 1591 0070 0C000000 		.word	modem_stats+12
 1592 0074 08000000 		.word	modem_stats+8
 1593 0078 04000000 		.word	modem_stats+4
 1594 007c 04030000 		.word	.LC31
 1595 0080 00000000 		.word	uart_received_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 39


 1596              		.cfi_endproc
 1597              	.LFE79:
 1598              		.size	get_cell_network_stats, .-get_cell_network_stats
 1599              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1600              		.align	2
 1601              		.global	updatable_parameters_initialize
 1602              		.thumb
 1603              		.thumb_func
 1604              		.type	updatable_parameters_initialize, %function
 1605              	updatable_parameters_initialize:
 1606              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1607              		.loc 1 461 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 1, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 1612 0000 80B4     		push	{r7}
 1613              		.cfi_def_cfa_offset 4
 1614              		.cfi_offset 7, -4
 1615 0002 00AF     		add	r7, sp, #0
 1616              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1617              		.loc 1 462 0
 1618 0004 0F4B     		ldr	r3, .L96
 1619 0006 0022     		movs	r2, #0
 1620 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1621              		.loc 1 463 0
 1622 000a 0E4B     		ldr	r3, .L96
 1623 000c 0122     		movs	r2, #1
 1624 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1625              		.loc 1 464 0
 1626 0010 0C4B     		ldr	r3, .L96
 1627 0012 0122     		movs	r2, #1
 1628 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1629              		.loc 1 465 0
 1630 0016 0B4B     		ldr	r3, .L96
 1631 0018 0122     		movs	r2, #1
 1632 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1633              		.loc 1 466 0
 1634 001c 094B     		ldr	r3, .L96
 1635 001e 0122     		movs	r2, #1
 1636 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     // APP_INTERFACE
 470:modem.c       ****     updatable_parameters.App_LED_freq = 120u; 
 1637              		.loc 1 470 0
 1638 0022 084B     		ldr	r3, .L96
 1639 0024 7822     		movs	r2, #120
 1640 0026 5A71     		strb	r2, [r3, #5]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 40


 471:modem.c       ****     updatable_parameters.Level_Sensor_freq = 120u; 
 1641              		.loc 1 471 0
 1642 0028 064B     		ldr	r3, .L96
 1643 002a 7822     		movs	r2, #120
 1644 002c 9A71     		strb	r2, [r3, #6]
 472:modem.c       ****     updatable_parameters.Downstream_Level_Sensor_freq = 120u;
 1645              		.loc 1 472 0
 1646 002e 054B     		ldr	r3, .L96
 1647 0030 7822     		movs	r2, #120
 1648 0032 DA71     		strb	r2, [r3, #7]
 473:modem.c       ****     updatable_parameters.valve_freq = 120u;
 1649              		.loc 1 473 0
 1650 0034 034B     		ldr	r3, .L96
 1651 0036 7822     		movs	r2, #120
 1652 0038 1A72     		strb	r2, [r3, #8]
 474:modem.c       **** }
 1653              		.loc 1 474 0
 1654 003a 00BF     		nop
 1655 003c BD46     		mov	sp, r7
 1656              		.cfi_def_cfa_register 13
 1657              		@ sp needed
 1658 003e 80BC     		pop	{r7}
 1659              		.cfi_restore 7
 1660              		.cfi_def_cfa_offset 0
 1661 0040 7047     		bx	lr
 1662              	.L97:
 1663 0042 00BF     		.align	2
 1664              	.L96:
 1665 0044 00000000 		.word	updatable_parameters
 1666              		.cfi_endproc
 1667              	.LFE80:
 1668              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1669              		.section	.rodata
 1670 0322 0000     		.align	2
 1671              	.LC32:
 1672 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1672      5F547970 
 1672      653A2000 
 1673              		.align	2
 1674              	.LC33:
 1675 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1675      54797065 
 1675      3A2000
 1676 033b 00       		.align	2
 1677              	.LC34:
 1678 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1678      6C655F46 
 1678      7265713A 
 1678      2000
 1679 034a 0000     		.align	2
 1680              	.LC35:
 1681 034c 5265706F 		.ascii	"Report_Freq: \000"
 1681      72745F46 
 1681      7265713A 
 1681      2000
 1682 035a 0000     		.align	2
 1683              	.LC36:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 41


 1684 035c 44656275 		.ascii	"Debug_Freq: \000"
 1684      675F4672 
 1684      65713A20 
 1684      00
 1685 0369 000000   		.align	2
 1686              	.LC37:
 1687 036c 41707073 		.ascii	"Apps_Enabled: \000"
 1687      5F456E61 
 1687      626C6564 
 1687      3A2000
 1688 037b 00       		.align	2
 1689              	.LC38:
 1690 037c 4C657665 		.ascii	"Level_Sensor\000"
 1690      6C5F5365 
 1690      6E736F72 
 1690      00
 1691 0389 000000   		.align	2
 1692              	.LC39:
 1693 038c 4170705F 		.ascii	"App_LED\000"
 1693      4C454400 
 1694              		.align	2
 1695              	.LC40:
 1696 0394 446F776E 		.ascii	"Downstream_Level\000"
 1696      73747265 
 1696      616D5F4C 
 1696      6576656C 
 1696      00
 1697 03a5 000000   		.align	2
 1698              	.LC41:
 1699 03a8 56616C76 		.ascii	"Valve\000"
 1699      6500
 1700 03ae 0000     		.align	2
 1701              	.LC42:
 1702 03b0 4170705F 		.ascii	"App_LED: \000"
 1702      4C45443A 
 1702      2000
 1703 03ba 0000     		.align	2
 1704              	.LC43:
 1705 03bc 4C657665 		.ascii	"Level_Sensor: \000"
 1705      6C5F5365 
 1705      6E736F72 
 1705      3A2000
 1706 03cb 00       		.align	2
 1707              	.LC44:
 1708 03cc 446F776E 		.ascii	"Downstream_Level: \000"
 1708      73747265 
 1708      616D5F4C 
 1708      6576656C 
 1708      3A2000
 1709 03df 00       		.align	2
 1710              	.LC45:
 1711 03e0 56616C76 		.ascii	"Valve:\000"
 1711      653A00
 1712 03e7 00       		.align	2
 1713              	.LC46:
 1714 03e8 256400   		.ascii	"%d\000"
 1715 03eb 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 42


 1716              	.LC47:
 1717 03ec 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1717      20747970 
 1717      65206368 
 1717      616E6765 
 1717      6420746F 
 1718 0407 00       		.align	2
 1719              	.LC48:
 1720 0408 436F756C 		.ascii	"Could not change node type.\000"
 1720      64206E6F 
 1720      74206368 
 1720      616E6765 
 1720      206E6F64 
 1721              		.align	2
 1722              	.LC49:
 1723 0424 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1723      74797065 
 1723      20636861 
 1723      6E676564 
 1723      20746F3A 
 1724 043e 0000     		.align	2
 1725              	.LC50:
 1726 0440 436F756C 		.ascii	"Could not change SIM type.\000"
 1726      64206E6F 
 1726      74206368 
 1726      616E6765 
 1726      2053494D 
 1727 045b 00       		.align	2
 1728              	.LC51:
 1729 045c 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1729      6C696E67 
 1729      20667265 
 1729      7175656E 
 1729      63792063 
 1730              		.align	2
 1731              	.LC52:
 1732 0480 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1732      64206E6F 
 1732      74207061 
 1732      72736520 
 1732      6E657720 
 1733 04ae 0000     		.align	2
 1734              	.LC53:
 1735 04b0 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1735      7274696E 
 1735      67206672 
 1735      65717565 
 1735      6E637920 
 1736 04d5 000000   		.align	2
 1737              	.LC54:
 1738 04d8 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1738      64206E6F 
 1738      74207061 
 1738      72736520 
 1738      6E657720 
 1739 0507 00       		.align	2
 1740              	.LC55:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 43


 1741 0508 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1741      67207072 
 1741      696E7469 
 1741      6E672066 
 1741      72657175 
 1742 0532 0000     		.align	2
 1743              	.LC56:
 1744 0534 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1744      64206E6F 
 1744      74207061 
 1744      72736520 
 1744      6E657720 
 1745 0563 00       		.align	2
 1746              	.LC57:
 1747 0564 46726571 		.ascii	"Freq=\000"
 1747      3D00
 1748 056a 0000     		.align	2
 1749              	.LC58:
 1750 056c 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1750      4C454420 
 1750      66726571 
 1750      75656E63 
 1750      79206368 
 1751 058f 00       		.align	2
 1752              	.LC59:
 1753 0590 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1753      64206E6F 
 1753      74207061 
 1753      72736520 
 1753      6E657720 
 1754 05bd 000000   		.align	2
 1755              	.LC60:
 1756 05c0 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1756      70705F4C 
 1756      45442066 
 1756      72657175 
 1756      656E6379 
 1757 05e6 0000     		.align	2
 1758              	.LC61:
 1759 05e8 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1759      6C5F5365 
 1759      6E736F72 
 1759      20667265 
 1759      7175656E 
 1760              		.align	2
 1761              	.LC62:
 1762 0610 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1762      64206E6F 
 1762      74207061 
 1762      72736520 
 1762      6E657720 
 1763 0642 0000     		.align	2
 1764              	.LC63:
 1765 0644 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1765      6576656C 
 1765      5F53656E 
 1765      736F7220 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 44


 1765      66726571 
 1766 066f 00       		.align	2
 1767              	.LC64:
 1768 0670 446F776E 		.ascii	"Downstream_Level_Sensor frequency changed to: %d\015"
 1768      73747265 
 1768      616D5F4C 
 1768      6576656C 
 1768      5F53656E 
 1769 06a1 0A00     		.ascii	"\012\000"
 1770 06a3 00       		.align	2
 1771              	.LC65:
 1772 06a4 436F756C 		.ascii	"Could not parse new Downstream_Level_Sensor frequen"
 1772      64206E6F 
 1772      74207061 
 1772      72736520 
 1772      6E657720 
 1773 06d7 63792076 		.ascii	"cy value.\000"
 1773      616C7565 
 1773      2E00
 1774 06e1 000000   		.align	2
 1775              	.LC66:
 1776 06e4 4E6F2044 		.ascii	"No Downstream_Level_Sensor frequency value indicate"
 1776      6F776E73 
 1776      74726561 
 1776      6D5F4C65 
 1776      76656C5F 
 1777 0717 642E00   		.ascii	"d.\000"
 1778 071a 0000     		.align	2
 1779              	.LC67:
 1780 071c 56616C76 		.ascii	"Valve frequency changed to: %d\015\012\000"
 1780      65206672 
 1780      65717565 
 1780      6E637920 
 1780      6368616E 
 1781 073d 000000   		.align	2
 1782              	.LC68:
 1783 0740 436F756C 		.ascii	"Could not parse new Valve frequency value.\000"
 1783      64206E6F 
 1783      74207061 
 1783      72736520 
 1783      6E657720 
 1784 076b 00       		.align	2
 1785              	.LC69:
 1786 076c 4E6F2056 		.ascii	"No Valve frequency value indicated.\000"
 1786      616C7665 
 1786      20667265 
 1786      7175656E 
 1786      63792076 
 1787              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1788              		.align	2
 1789              		.global	get_updated_parameters_from_malcom
 1790              		.thumb
 1791              		.thumb_func
 1792              		.type	get_updated_parameters_from_malcom, %function
 1793              	get_updated_parameters_from_malcom:
 1794              	.LFB81:
 475:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 45


 476:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 477:modem.c       **** void get_updated_parameters_from_malcom(){
 1795              		.loc 1 477 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 808
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799 0000 90B5     		push	{r4, r7, lr}
 1800              		.cfi_def_cfa_offset 12
 1801              		.cfi_offset 4, -12
 1802              		.cfi_offset 7, -8
 1803              		.cfi_offset 14, -4
 1804 0002 ADF54B7D 		sub	sp, sp, #812
 1805              		.cfi_def_cfa_offset 824
 1806 0006 00AF     		add	r7, sp, #0
 1807              		.cfi_def_cfa_register 7
 478:modem.c       ****     
 479:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 480:modem.c       ****     char s_node_type[10];
 481:modem.c       ****     char s_sim_type[10];
 482:modem.c       ****     char s_sample_freq[10];
 483:modem.c       ****     char s_report_freq[10];
 484:modem.c       ****     char s_debug_freq[10];
 485:modem.c       ****     
 486:modem.c       ****     //apps
 487:modem.c       ****     // APP_INTERFACE
 488:modem.c       ****     char s_app_led[100];
 489:modem.c       ****     s_app_led[0] = '\0';
 1808              		.loc 1 489 0
 1809 0008 0023     		movs	r3, #0
 1810 000a 87F88832 		strb	r3, [r7, #648]
 490:modem.c       ****     
 491:modem.c       ****     char s_level_sensor[100];
 492:modem.c       ****     s_level_sensor[0] = '\0';
 1811              		.loc 1 492 0
 1812 000e 07F50973 		add	r3, r7, #548
 1813 0012 0022     		movs	r2, #0
 1814 0014 1A70     		strb	r2, [r3]
 493:modem.c       ****     
 494:modem.c       ****     char s_down_level_sensor[100];
 495:modem.c       ****     s_down_level_sensor[0] = '\0';
 1815              		.loc 1 495 0
 1816 0016 07F5E073 		add	r3, r7, #448
 1817 001a 0022     		movs	r2, #0
 1818 001c 1A70     		strb	r2, [r3]
 496:modem.c       ****     
 497:modem.c       ****     char s_valve[100];
 498:modem.c       ****     s_valve[0] = '\0';
 1819              		.loc 1 498 0
 1820 001e 07F5AE73 		add	r3, r7, #348
 1821 0022 0022     		movs	r2, #0
 1822 0024 1A70     		strb	r2, [r3]
 499:modem.c       ****     
 500:modem.c       ****     char s_apps_enabled[200];
 501:modem.c       ****     s_apps_enabled[0]='\0';
 1823              		.loc 1 501 0
 1824 0026 07F19403 		add	r3, r7, #148
 1825 002a 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 46


 1826 002c 1A70     		strb	r2, [r3]
 502:modem.c       ****     
 503:modem.c       ****     s_node_type[0] = '\0';
 1827              		.loc 1 503 0
 1828 002e 0023     		movs	r3, #0
 1829 0030 87F81C33 		strb	r3, [r7, #796]
 504:modem.c       ****     s_sim_type[0] = '\0';
 1830              		.loc 1 504 0
 1831 0034 0023     		movs	r3, #0
 1832 0036 87F81033 		strb	r3, [r7, #784]
 505:modem.c       ****     s_sample_freq[0] = '\0';
 1833              		.loc 1 505 0
 1834 003a 0023     		movs	r3, #0
 1835 003c 87F80433 		strb	r3, [r7, #772]
 506:modem.c       ****     s_report_freq[0] = '\0';
 1836              		.loc 1 506 0
 1837 0040 0023     		movs	r3, #0
 1838 0042 87F8F832 		strb	r3, [r7, #760]
 507:modem.c       ****     s_debug_freq[0] = '\0';
 1839              		.loc 1 507 0
 1840 0046 0023     		movs	r3, #0
 1841 0048 87F8EC32 		strb	r3, [r7, #748]
 508:modem.c       ****     
 509:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 510:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1842              		.loc 1 510 0
 1843 004c 07F54773 		add	r3, r7, #796
 1844 0050 B14A     		ldr	r2, .L135
 1845 0052 B249     		ldr	r1, .L135+4
 1846 0054 B248     		ldr	r0, .L135+8
 1847 0056 FFF7FEFF 		bl	extract_string
 511:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1848              		.loc 1 511 0
 1849 005a 07F54473 		add	r3, r7, #784
 1850 005e AE4A     		ldr	r2, .L135
 1851 0060 B049     		ldr	r1, .L135+12
 1852 0062 AF48     		ldr	r0, .L135+8
 1853 0064 FFF7FEFF 		bl	extract_string
 512:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1854              		.loc 1 512 0
 1855 0068 07F54173 		add	r3, r7, #772
 1856 006c AA4A     		ldr	r2, .L135
 1857 006e AE49     		ldr	r1, .L135+16
 1858 0070 AB48     		ldr	r0, .L135+8
 1859 0072 FFF7FEFF 		bl	extract_string
 513:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1860              		.loc 1 513 0
 1861 0076 07F53E73 		add	r3, r7, #760
 1862 007a A74A     		ldr	r2, .L135
 1863 007c AB49     		ldr	r1, .L135+20
 1864 007e A848     		ldr	r0, .L135+8
 1865 0080 FFF7FEFF 		bl	extract_string
 514:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1866              		.loc 1 514 0
 1867 0084 07F53B73 		add	r3, r7, #748
 1868 0088 A34A     		ldr	r2, .L135
 1869 008a A949     		ldr	r1, .L135+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 47


 1870 008c A448     		ldr	r0, .L135+8
 1871 008e FFF7FEFF 		bl	extract_string
 515:modem.c       ****     
 516:modem.c       ****     // which apps are enabled?
 517:modem.c       ****     // APP_INTERFACE
 518:modem.c       ****     if (strstr(uart_received_string,"Apps_Enabled: ")){
 1872              		.loc 1 518 0
 1873 0092 A849     		ldr	r1, .L135+28
 1874 0094 A248     		ldr	r0, .L135+8
 1875 0096 FFF7FEFF 		bl	strstr
 1876 009a 0346     		mov	r3, r0
 1877 009c 002B     		cmp	r3, #0
 1878 009e 56D0     		beq	.L99
 519:modem.c       ****         extract_string(uart_received_string,"Apps_Enabled: ","\r",s_apps_enabled);
 1879              		.loc 1 519 0
 1880 00a0 07F19403 		add	r3, r7, #148
 1881 00a4 9C4A     		ldr	r2, .L135
 1882 00a6 A349     		ldr	r1, .L135+28
 1883 00a8 9D48     		ldr	r0, .L135+8
 1884 00aa FFF7FEFF 		bl	extract_string
 520:modem.c       ****         // if an app is in this string, turn it on
 521:modem.c       ****         if (strstr(s_apps_enabled,"Level_Sensor")!=NULL){
 1885              		.loc 1 521 0
 1886 00ae 07F19403 		add	r3, r7, #148
 1887 00b2 A149     		ldr	r1, .L135+32
 1888 00b4 1846     		mov	r0, r3
 1889 00b6 FFF7FEFF 		bl	strstr
 1890 00ba 0346     		mov	r3, r0
 1891 00bc 002B     		cmp	r3, #0
 1892 00be 03D0     		beq	.L100
 522:modem.c       ****             // if we see level sensor in the enabled list, turn it on
 523:modem.c       ****             level_sensor_enabled = 1;
 1893              		.loc 1 523 0
 1894 00c0 9E4B     		ldr	r3, .L135+36
 1895 00c2 0122     		movs	r2, #1
 1896 00c4 1A70     		strb	r2, [r3]
 1897 00c6 06E0     		b	.L101
 1898              	.L100:
 524:modem.c       ****         }        
 525:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 526:modem.c       ****         else if (level_sensor_enabled){ 
 1899              		.loc 1 526 0
 1900 00c8 9C4B     		ldr	r3, .L135+36
 1901 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1902 00cc 002B     		cmp	r3, #0
 1903 00ce 02D0     		beq	.L101
 527:modem.c       ****             level_sensor_enabled = 0;
 1904              		.loc 1 527 0
 1905 00d0 9A4B     		ldr	r3, .L135+36
 1906 00d2 0022     		movs	r2, #0
 1907 00d4 1A70     		strb	r2, [r3]
 1908              	.L101:
 528:modem.c       ****         }
 529:modem.c       ****         
 530:modem.c       ****         if (strstr(s_apps_enabled,"App_LED")!=NULL){
 1909              		.loc 1 530 0
 1910 00d6 07F19403 		add	r3, r7, #148
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 48


 1911 00da 9949     		ldr	r1, .L135+40
 1912 00dc 1846     		mov	r0, r3
 1913 00de FFF7FEFF 		bl	strstr
 1914 00e2 0346     		mov	r3, r0
 1915 00e4 002B     		cmp	r3, #0
 1916 00e6 03D0     		beq	.L102
 531:modem.c       ****             // if we this app in the enabled list, turn it on
 532:modem.c       ****             App_LED_enabled = 1;
 1917              		.loc 1 532 0
 1918 00e8 964B     		ldr	r3, .L135+44
 1919 00ea 0122     		movs	r2, #1
 1920 00ec 1A70     		strb	r2, [r3]
 1921 00ee 06E0     		b	.L103
 1922              	.L102:
 533:modem.c       ****         }
 534:modem.c       ****         else if (App_LED_enabled){
 1923              		.loc 1 534 0
 1924 00f0 944B     		ldr	r3, .L135+44
 1925 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1926 00f4 002B     		cmp	r3, #0
 1927 00f6 02D0     		beq	.L103
 535:modem.c       ****             App_LED_enabled = 0;
 1928              		.loc 1 535 0
 1929 00f8 924B     		ldr	r3, .L135+44
 1930 00fa 0022     		movs	r2, #0
 1931 00fc 1A70     		strb	r2, [r3]
 1932              	.L103:
 536:modem.c       ****         }
 537:modem.c       ****         
 538:modem.c       ****         if (strstr(s_apps_enabled,"Downstream_Level") != NULL){
 1933              		.loc 1 538 0
 1934 00fe 07F19403 		add	r3, r7, #148
 1935 0102 9149     		ldr	r1, .L135+48
 1936 0104 1846     		mov	r0, r3
 1937 0106 FFF7FEFF 		bl	strstr
 1938 010a 0346     		mov	r3, r0
 1939 010c 002B     		cmp	r3, #0
 1940 010e 03D0     		beq	.L104
 539:modem.c       ****             downstream_level_sensor_enabled = 1;
 1941              		.loc 1 539 0
 1942 0110 8E4B     		ldr	r3, .L135+52
 1943 0112 0122     		movs	r2, #1
 1944 0114 1A70     		strb	r2, [r3]
 1945 0116 06E0     		b	.L105
 1946              	.L104:
 540:modem.c       ****         }        
 541:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 542:modem.c       ****         else if (downstream_level_sensor_enabled){ 
 1947              		.loc 1 542 0
 1948 0118 8C4B     		ldr	r3, .L135+52
 1949 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1950 011c 002B     		cmp	r3, #0
 1951 011e 02D0     		beq	.L105
 543:modem.c       ****             downstream_level_sensor_enabled = 0;
 1952              		.loc 1 543 0
 1953 0120 8A4B     		ldr	r3, .L135+52
 1954 0122 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 49


 1955 0124 1A70     		strb	r2, [r3]
 1956              	.L105:
 544:modem.c       ****         }
 545:modem.c       ****         
 546:modem.c       ****         if (strstr(s_apps_enabled, "Valve") != NULL){
 1957              		.loc 1 546 0
 1958 0126 07F19403 		add	r3, r7, #148
 1959 012a 8949     		ldr	r1, .L135+56
 1960 012c 1846     		mov	r0, r3
 1961 012e FFF7FEFF 		bl	strstr
 1962 0132 0346     		mov	r3, r0
 1963 0134 002B     		cmp	r3, #0
 1964 0136 03D0     		beq	.L106
 547:modem.c       ****             valve_enabled = 1u;
 1965              		.loc 1 547 0
 1966 0138 864B     		ldr	r3, .L135+60
 1967 013a 0122     		movs	r2, #1
 1968 013c 1A70     		strb	r2, [r3]
 1969 013e 06E0     		b	.L99
 1970              	.L106:
 548:modem.c       ****         }
 549:modem.c       ****         else if(valve_enabled){
 1971              		.loc 1 549 0
 1972 0140 844B     		ldr	r3, .L135+60
 1973 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1974 0144 002B     		cmp	r3, #0
 1975 0146 02D0     		beq	.L99
 550:modem.c       ****             valve_enabled = 0u;
 1976              		.loc 1 550 0
 1977 0148 824B     		ldr	r3, .L135+60
 1978 014a 0022     		movs	r2, #0
 1979 014c 1A70     		strb	r2, [r3]
 1980              	.L99:
 551:modem.c       ****         }
 552:modem.c       ****         
 553:modem.c       ****     }
 554:modem.c       **** 
 555:modem.c       ****         
 556:modem.c       ****     
 557:modem.c       ****     // update app parameters (valve open %, measuring freq, etc)
 558:modem.c       ****     // APP_INTERFACE
 559:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1981              		.loc 1 559 0
 1982 014e 07F52273 		add	r3, r7, #648
 1983 0152 714A     		ldr	r2, .L135
 1984 0154 8049     		ldr	r1, .L135+64
 1985 0156 7248     		ldr	r0, .L135+8
 1986 0158 FFF7FEFF 		bl	extract_string
 560:modem.c       ****     App_LED_Update(s_app_led);
 1987              		.loc 1 560 0
 1988 015c 07F52273 		add	r3, r7, #648
 1989 0160 1846     		mov	r0, r3
 1990 0162 FFF7FEFF 		bl	App_LED_Update
 561:modem.c       ****     
 562:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1991              		.loc 1 562 0
 1992 0166 07F50973 		add	r3, r7, #548
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 50


 1993 016a 6B4A     		ldr	r2, .L135
 1994 016c 7B49     		ldr	r1, .L135+68
 1995 016e 6C48     		ldr	r0, .L135+8
 1996 0170 FFF7FEFF 		bl	extract_string
 563:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1997              		.loc 1 563 0
 1998 0174 07F50973 		add	r3, r7, #548
 1999 0178 1846     		mov	r0, r3
 2000 017a FFF7FEFF 		bl	Level_Sensor_Update
 564:modem.c       ****     
 565:modem.c       ****     extract_string(uart_received_string,"Downstream_Level: ","\r",s_down_level_sensor);
 2001              		.loc 1 565 0
 2002 017e 07F5E073 		add	r3, r7, #448
 2003 0182 654A     		ldr	r2, .L135
 2004 0184 7649     		ldr	r1, .L135+72
 2005 0186 6648     		ldr	r0, .L135+8
 2006 0188 FFF7FEFF 		bl	extract_string
 566:modem.c       ****     downstream_Level_Sensor_Update(s_down_level_sensor);
 2007              		.loc 1 566 0
 2008 018c 07F5E073 		add	r3, r7, #448
 2009 0190 1846     		mov	r0, r3
 2010 0192 FFF7FEFF 		bl	downstream_Level_Sensor_Update
 567:modem.c       ****     
 568:modem.c       ****     extract_string(uart_received_string,"Valve:","\r", s_valve);
 2011              		.loc 1 568 0
 2012 0196 07F5AE73 		add	r3, r7, #348
 2013 019a 5F4A     		ldr	r2, .L135
 2014 019c 7149     		ldr	r1, .L135+76
 2015 019e 6048     		ldr	r0, .L135+8
 2016 01a0 FFF7FEFF 		bl	extract_string
 569:modem.c       ****     valve_Update(s_valve);
 2017              		.loc 1 569 0
 2018 01a4 07F5AE73 		add	r3, r7, #348
 2019 01a8 1846     		mov	r0, r3
 2020 01aa FFF7FEFF 		bl	valve_Update
 570:modem.c       ****     
 571:modem.c       ****     // Create variables for what is sent back from the server
 572:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq,
 573:modem.c       ****     
 574:modem.c       ****     // Scan character arrays and save values 
 575:modem.c       ****     
 576:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 2021              		.loc 1 576 0
 2022 01ae 07F19002 		add	r2, r7, #144
 2023 01b2 07F54773 		add	r3, r7, #796
 2024 01b6 6C49     		ldr	r1, .L135+80
 2025 01b8 1846     		mov	r0, r3
 2026 01ba FFF7FEFF 		bl	sscanf
 2027 01be 0346     		mov	r3, r0
 2028 01c0 012B     		cmp	r3, #1
 2029 01c2 0ED1     		bne	.L107
 577:modem.c       ****         updatable_parameters.node_type = node_type;
 2030              		.loc 1 577 0
 2031 01c4 07F19003 		add	r3, r7, #144
 2032 01c8 1B68     		ldr	r3, [r3]
 2033 01ca DAB2     		uxtb	r2, r3
 2034 01cc 674B     		ldr	r3, .L135+84
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 51


 2035 01ce 1A70     		strb	r2, [r3]
 578:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 2036              		.loc 1 578 0
 2037 01d0 07F19003 		add	r3, r7, #144
 2038 01d4 1B68     		ldr	r3, [r3]
 2039 01d6 1A46     		mov	r2, r3
 2040 01d8 6549     		ldr	r1, .L135+88
 2041 01da 0020     		movs	r0, #0
 2042 01dc FFF7FEFF 		bl	printNotif
 2043 01e0 03E0     		b	.L108
 2044              	.L107:
 579:modem.c       ****     }else{
 580:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 2045              		.loc 1 580 0
 2046 01e2 6449     		ldr	r1, .L135+92
 2047 01e4 0220     		movs	r0, #2
 2048 01e6 FFF7FEFF 		bl	printNotif
 2049              	.L108:
 581:modem.c       ****     }
 582:modem.c       ****     
 583:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 2050              		.loc 1 583 0
 2051 01ea 07F18C02 		add	r2, r7, #140
 2052 01ee 07F54473 		add	r3, r7, #784
 2053 01f2 5D49     		ldr	r1, .L135+80
 2054 01f4 1846     		mov	r0, r3
 2055 01f6 FFF7FEFF 		bl	sscanf
 2056 01fa 0346     		mov	r3, r0
 2057 01fc 012B     		cmp	r3, #1
 2058 01fe 12D1     		bne	.L109
 584:modem.c       ****         updatable_parameters.sim_type = sim_type;
 2059              		.loc 1 584 0
 2060 0200 07F18C03 		add	r3, r7, #140
 2061 0204 1B68     		ldr	r3, [r3]
 2062 0206 002B     		cmp	r3, #0
 2063 0208 14BF     		ite	ne
 2064 020a 0123     		movne	r3, #1
 2065 020c 0023     		moveq	r3, #0
 2066 020e DAB2     		uxtb	r2, r3
 2067 0210 564B     		ldr	r3, .L135+84
 2068 0212 5A70     		strb	r2, [r3, #1]
 585:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 2069              		.loc 1 585 0
 2070 0214 07F18C03 		add	r3, r7, #140
 2071 0218 1B68     		ldr	r3, [r3]
 2072 021a 1A46     		mov	r2, r3
 2073 021c 5649     		ldr	r1, .L135+96
 2074 021e 0020     		movs	r0, #0
 2075 0220 FFF7FEFF 		bl	printNotif
 2076 0224 03E0     		b	.L110
 2077              	.L109:
 586:modem.c       ****     }else{
 587:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 2078              		.loc 1 587 0
 2079 0226 5549     		ldr	r1, .L135+100
 2080 0228 0220     		movs	r0, #2
 2081 022a FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 52


 2082              	.L110:
 588:modem.c       ****     }
 589:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 2083              		.loc 1 589 0
 2084 022e 07F18802 		add	r2, r7, #136
 2085 0232 07F54173 		add	r3, r7, #772
 2086 0236 4C49     		ldr	r1, .L135+80
 2087 0238 1846     		mov	r0, r3
 2088 023a FFF7FEFF 		bl	sscanf
 2089 023e 0346     		mov	r3, r0
 2090 0240 012B     		cmp	r3, #1
 2091 0242 1DD1     		bne	.L111
 590:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 2092              		.loc 1 590 0
 2093 0244 07F18803 		add	r3, r7, #136
 2094 0248 1B68     		ldr	r3, [r3]
 2095 024a DAB2     		uxtb	r2, r3
 2096 024c 474B     		ldr	r3, .L135+84
 2097 024e 9A70     		strb	r2, [r3, #2]
 591:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 592:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 2098              		.loc 1 592 0
 2099 0250 464B     		ldr	r3, .L135+84
 2100 0252 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2101 0254 99B2     		uxth	r1, r3
 2102 0256 4A4C     		ldr	r4, .L135+104
 2103 0258 3846     		mov	r0, r7
 2104 025a 0723     		movs	r3, #7
 2105 025c 0122     		movs	r2, #1
 2106 025e FFF7FEFF 		bl	CreateAlarm
 2107 0262 3A46     		mov	r2, r7
 2108 0264 2346     		mov	r3, r4
 2109 0266 1168     		ldr	r1, [r2]	@ unaligned
 2110 0268 1960     		str	r1, [r3]	@ unaligned
 2111 026a 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2112 026c 9A80     		strh	r2, [r3, #4]	@ unaligned
 593:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 2113              		.loc 1 593 0
 2114 026e 07F18803 		add	r3, r7, #136
 2115 0272 1B68     		ldr	r3, [r3]
 2116 0274 1A46     		mov	r2, r3
 2117 0276 4349     		ldr	r1, .L135+108
 2118 0278 0020     		movs	r0, #0
 2119 027a FFF7FEFF 		bl	printNotif
 2120 027e 03E0     		b	.L112
 2121              	.L111:
 594:modem.c       ****     }else{
 595:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 2122              		.loc 1 595 0
 2123 0280 4149     		ldr	r1, .L135+112
 2124 0282 0220     		movs	r0, #2
 2125 0284 FFF7FEFF 		bl	printNotif
 2126              	.L112:
 596:modem.c       ****     }
 597:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 2127              		.loc 1 597 0
 2128 0288 07F18402 		add	r2, r7, #132
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 53


 2129 028c 07F53E73 		add	r3, r7, #760
 2130 0290 3549     		ldr	r1, .L135+80
 2131 0292 1846     		mov	r0, r3
 2132 0294 FFF7FEFF 		bl	sscanf
 2133 0298 0346     		mov	r3, r0
 2134 029a 012B     		cmp	r3, #1
 2135 029c 1DD1     		bne	.L113
 598:modem.c       ****         updatable_parameters.sync_time = report_freq;
 2136              		.loc 1 598 0
 2137 029e 07F18403 		add	r3, r7, #132
 2138 02a2 1B68     		ldr	r3, [r3]
 2139 02a4 DAB2     		uxtb	r2, r3
 2140 02a6 314B     		ldr	r3, .L135+84
 2141 02a8 DA70     		strb	r2, [r3, #3]
 599:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 600:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 2142              		.loc 1 600 0
 2143 02aa 304B     		ldr	r3, .L135+84
 2144 02ac DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2145 02ae 99B2     		uxth	r1, r3
 2146 02b0 364C     		ldr	r4, .L135+116
 2147 02b2 3846     		mov	r0, r7
 2148 02b4 0723     		movs	r3, #7
 2149 02b6 0122     		movs	r2, #1
 2150 02b8 FFF7FEFF 		bl	CreateAlarm
 2151 02bc 3A46     		mov	r2, r7
 2152 02be 2346     		mov	r3, r4
 2153 02c0 1168     		ldr	r1, [r2]	@ unaligned
 2154 02c2 1960     		str	r1, [r3]	@ unaligned
 2155 02c4 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2156 02c6 9A80     		strh	r2, [r3, #4]	@ unaligned
 601:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 2157              		.loc 1 601 0
 2158 02c8 07F18403 		add	r3, r7, #132
 2159 02cc 1B68     		ldr	r3, [r3]
 2160 02ce 1A46     		mov	r2, r3
 2161 02d0 2F49     		ldr	r1, .L135+120
 2162 02d2 0020     		movs	r0, #0
 2163 02d4 FFF7FEFF 		bl	printNotif
 2164 02d8 03E0     		b	.L114
 2165              	.L113:
 602:modem.c       ****         }else{
 603:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 2166              		.loc 1 603 0
 2167 02da 2E49     		ldr	r1, .L135+124
 2168 02dc 0220     		movs	r0, #2
 2169 02de FFF7FEFF 		bl	printNotif
 2170              	.L114:
 604:modem.c       ****     }
 605:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 2171              		.loc 1 605 0
 2172 02e2 07F18002 		add	r2, r7, #128
 2173 02e6 07F53B73 		add	r3, r7, #748
 2174 02ea 1F49     		ldr	r1, .L135+80
 2175 02ec 1846     		mov	r0, r3
 2176 02ee FFF7FEFF 		bl	sscanf
 2177 02f2 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 54


 2178 02f4 012B     		cmp	r3, #1
 2179 02f6 51D1     		bne	.L115
 606:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 2180              		.loc 1 606 0
 2181 02f8 07F18003 		add	r3, r7, #128
 2182 02fc 1B68     		ldr	r3, [r3]
 2183 02fe DAB2     		uxtb	r2, r3
 2184 0300 1A4B     		ldr	r3, .L135+84
 2185 0302 1A71     		strb	r2, [r3, #4]
 607:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 2186              		.loc 1 607 0
 2187 0304 07F18003 		add	r3, r7, #128
 2188 0308 1B68     		ldr	r3, [r3]
 2189 030a 1A46     		mov	r2, r3
 2190 030c 2249     		ldr	r1, .L135+128
 2191 030e 0020     		movs	r0, #0
 2192 0310 FFF7FEFF 		bl	printNotif
 2193 0314 46E0     		b	.L116
 2194              	.L136:
 2195 0316 00BF     		.align	2
 2196              	.L135:
 2197 0318 88020000 		.word	.LC21
 2198 031c 24030000 		.word	.LC32
 2199 0320 00000000 		.word	uart_received_string
 2200 0324 30030000 		.word	.LC33
 2201 0328 3C030000 		.word	.LC34
 2202 032c 4C030000 		.word	.LC35
 2203 0330 5C030000 		.word	.LC36
 2204 0334 6C030000 		.word	.LC37
 2205 0338 7C030000 		.word	.LC38
 2206 033c 00000000 		.word	level_sensor_enabled
 2207 0340 8C030000 		.word	.LC39
 2208 0344 00000000 		.word	App_LED_enabled
 2209 0348 94030000 		.word	.LC40
 2210 034c 00000000 		.word	downstream_level_sensor_enabled
 2211 0350 A8030000 		.word	.LC41
 2212 0354 00000000 		.word	valve_enabled
 2213 0358 B0030000 		.word	.LC42
 2214 035c BC030000 		.word	.LC43
 2215 0360 CC030000 		.word	.LC44
 2216 0364 E0030000 		.word	.LC45
 2217 0368 E8030000 		.word	.LC46
 2218 036c 00000000 		.word	updatable_parameters
 2219 0370 EC030000 		.word	.LC47
 2220 0374 08040000 		.word	.LC48
 2221 0378 24040000 		.word	.LC49
 2222 037c 40040000 		.word	.LC50
 2223 0380 00000000 		.word	alarmMeasure
 2224 0384 5C040000 		.word	.LC51
 2225 0388 80040000 		.word	.LC52
 2226 038c 00000000 		.word	alarmSync
 2227 0390 B0040000 		.word	.LC53
 2228 0394 D8040000 		.word	.LC54
 2229 0398 08050000 		.word	.LC55
 2230              	.L115:
 608:modem.c       ****     }else{
 609:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 55


 2231              		.loc 1 609 0
 2232 039c AE49     		ldr	r1, .L137
 2233 039e 0220     		movs	r0, #2
 2234 03a0 FFF7FEFF 		bl	printNotif
 2235              	.L116:
 610:modem.c       ****     }
 611:modem.c       ****     
 612:modem.c       ****     // app alarm frequency updates
 613:modem.c       ****     // APP_INTERFACE
 614:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 2236              		.loc 1 614 0
 2237 03a4 AD4B     		ldr	r3, .L137+4
 2238 03a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2239 03a8 042B     		cmp	r3, #4
 2240 03aa 40F05081 		bne	.L134
 2241              	.LBB9:
 615:modem.c       ****         
 616:modem.c       ****         char temp[100];
 617:modem.c       ****         temp[0] = '\0';
 2242              		.loc 1 617 0
 2243 03ae 07F10C03 		add	r3, r7, #12
 2244 03b2 0022     		movs	r2, #0
 2245 03b4 1A70     		strb	r2, [r3]
 618:modem.c       ****         if(App_LED_enabled){ //if you're not enabled, don't talk
 2246              		.loc 1 618 0
 2247 03b6 AA4B     		ldr	r3, .L137+8
 2248 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2249 03ba 002B     		cmp	r3, #0
 2250 03bc 4ED0     		beq	.L118
 619:modem.c       ****             if (strstr(s_app_led,"Freq=")!=NULL){
 2251              		.loc 1 619 0
 2252 03be 07F52273 		add	r3, r7, #648
 2253 03c2 A849     		ldr	r1, .L137+12
 2254 03c4 1846     		mov	r0, r3
 2255 03c6 FFF7FEFF 		bl	strstr
 2256 03ca 0346     		mov	r3, r0
 2257 03cc 002B     		cmp	r3, #0
 2258 03ce 41D0     		beq	.L119
 620:modem.c       ****                 temp[0] = '\0';
 2259              		.loc 1 620 0
 2260 03d0 07F10C03 		add	r3, r7, #12
 2261 03d4 0022     		movs	r2, #0
 2262 03d6 1A70     		strb	r2, [r3]
 621:modem.c       ****                 strcpy(temp,s_app_led);
 2263              		.loc 1 621 0
 2264 03d8 07F52272 		add	r2, r7, #648
 2265 03dc 07F10C03 		add	r3, r7, #12
 2266 03e0 1146     		mov	r1, r2
 2267 03e2 1846     		mov	r0, r3
 2268 03e4 FFF7FEFF 		bl	strcpy
 622:modem.c       ****                 extract_string(temp,"Freq=","\r",s_app_led); // grab level app frequency
 2269              		.loc 1 622 0
 2270 03e8 07F52273 		add	r3, r7, #648
 2271 03ec 07F10C00 		add	r0, r7, #12
 2272 03f0 9D4A     		ldr	r2, .L137+16
 2273 03f2 9C49     		ldr	r1, .L137+12
 2274 03f4 FFF7FEFF 		bl	extract_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 56


 623:modem.c       ****                 if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2275              		.loc 1 623 0
 2276 03f8 07F17C02 		add	r2, r7, #124
 2277 03fc 07F52273 		add	r3, r7, #648
 2278 0400 9A49     		ldr	r1, .L137+20
 2279 0402 1846     		mov	r0, r3
 2280 0404 FFF7FEFF 		bl	sscanf
 2281 0408 0346     		mov	r3, r0
 2282 040a 012B     		cmp	r3, #1
 2283 040c 1DD1     		bne	.L120
 624:modem.c       ****                     updatable_parameters.App_LED_freq = app_led_freq;
 2284              		.loc 1 624 0
 2285 040e 07F17C03 		add	r3, r7, #124
 2286 0412 1B68     		ldr	r3, [r3]
 2287 0414 DAB2     		uxtb	r2, r3
 2288 0416 914B     		ldr	r3, .L137+4
 2289 0418 5A71     		strb	r2, [r3, #5]
 625:modem.c       ****                     // update the alarm to the new frequency
 626:modem.c       ****                     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,A
 2290              		.loc 1 626 0
 2291 041a 904B     		ldr	r3, .L137+4
 2292 041c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2293 041e 99B2     		uxth	r1, r3
 2294 0420 934C     		ldr	r4, .L137+24
 2295 0422 3846     		mov	r0, r7
 2296 0424 0723     		movs	r3, #7
 2297 0426 0122     		movs	r2, #1
 2298 0428 FFF7FEFF 		bl	CreateAlarm
 2299 042c 3A46     		mov	r2, r7
 2300 042e 2346     		mov	r3, r4
 2301 0430 1168     		ldr	r1, [r2]	@ unaligned
 2302 0432 1960     		str	r1, [r3]	@ unaligned
 2303 0434 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2304 0436 9A80     		strh	r2, [r3, #4]	@ unaligned
 627:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_fr
 2305              		.loc 1 627 0
 2306 0438 07F17C03 		add	r3, r7, #124
 2307 043c 1B68     		ldr	r3, [r3]
 2308 043e 1A46     		mov	r2, r3
 2309 0440 8C49     		ldr	r1, .L137+28
 2310 0442 0020     		movs	r0, #0
 2311 0444 FFF7FEFF 		bl	printNotif
 2312 0448 08E0     		b	.L118
 2313              	.L120:
 628:modem.c       ****                 } 
 629:modem.c       ****                 else{
 630:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2314              		.loc 1 630 0
 2315 044a 8B49     		ldr	r1, .L137+32
 2316 044c 0220     		movs	r0, #2
 2317 044e FFF7FEFF 		bl	printNotif
 2318 0452 03E0     		b	.L118
 2319              	.L119:
 631:modem.c       ****                 }
 632:modem.c       ****             }
 633:modem.c       ****             else{
 634:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 57


 2320              		.loc 1 634 0
 2321 0454 8949     		ldr	r1, .L137+36
 2322 0456 0220     		movs	r0, #2
 2323 0458 FFF7FEFF 		bl	printNotif
 2324              	.L118:
 635:modem.c       ****             }
 636:modem.c       ****         }
 637:modem.c       ****         if(level_sensor_enabled){
 2325              		.loc 1 637 0
 2326 045c 884B     		ldr	r3, .L137+40
 2327 045e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2328 0460 002B     		cmp	r3, #0
 2329 0462 4ED0     		beq	.L122
 638:modem.c       ****             if (strstr(s_level_sensor,"Freq=")!=NULL){
 2330              		.loc 1 638 0
 2331 0464 07F50973 		add	r3, r7, #548
 2332 0468 7E49     		ldr	r1, .L137+12
 2333 046a 1846     		mov	r0, r3
 2334 046c FFF7FEFF 		bl	strstr
 2335 0470 0346     		mov	r3, r0
 2336 0472 002B     		cmp	r3, #0
 2337 0474 41D0     		beq	.L123
 639:modem.c       ****                 temp[0] = '\0';
 2338              		.loc 1 639 0
 2339 0476 07F10C03 		add	r3, r7, #12
 2340 047a 0022     		movs	r2, #0
 2341 047c 1A70     		strb	r2, [r3]
 640:modem.c       ****                 strcpy(temp,s_level_sensor);
 2342              		.loc 1 640 0
 2343 047e 07F50972 		add	r2, r7, #548
 2344 0482 07F10C03 		add	r3, r7, #12
 2345 0486 1146     		mov	r1, r2
 2346 0488 1846     		mov	r0, r3
 2347 048a FFF7FEFF 		bl	strcpy
 641:modem.c       ****                 extract_string(temp,"Freq=","\r",s_level_sensor); // grab level app frequency
 2348              		.loc 1 641 0
 2349 048e 07F50973 		add	r3, r7, #548
 2350 0492 07F10C00 		add	r0, r7, #12
 2351 0496 744A     		ldr	r2, .L137+16
 2352 0498 7249     		ldr	r1, .L137+12
 2353 049a FFF7FEFF 		bl	extract_string
 642:modem.c       ****                 if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2354              		.loc 1 642 0
 2355 049e 07F17802 		add	r2, r7, #120
 2356 04a2 07F50973 		add	r3, r7, #548
 2357 04a6 7149     		ldr	r1, .L137+20
 2358 04a8 1846     		mov	r0, r3
 2359 04aa FFF7FEFF 		bl	sscanf
 2360 04ae 0346     		mov	r3, r0
 2361 04b0 012B     		cmp	r3, #1
 2362 04b2 1DD1     		bne	.L124
 643:modem.c       ****                     updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2363              		.loc 1 643 0
 2364 04b4 07F17803 		add	r3, r7, #120
 2365 04b8 1B68     		ldr	r3, [r3]
 2366 04ba DAB2     		uxtb	r2, r3
 2367 04bc 674B     		ldr	r3, .L137+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 58


 2368 04be 9A71     		strb	r2, [r3, #6]
 644:modem.c       ****                     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYP
 2369              		.loc 1 644 0
 2370 04c0 664B     		ldr	r3, .L137+4
 2371 04c2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2372 04c4 99B2     		uxth	r1, r3
 2373 04c6 6F4C     		ldr	r4, .L137+44
 2374 04c8 3846     		mov	r0, r7
 2375 04ca 0723     		movs	r3, #7
 2376 04cc 0122     		movs	r2, #1
 2377 04ce FFF7FEFF 		bl	CreateAlarm
 2378 04d2 3A46     		mov	r2, r7
 2379 04d4 2346     		mov	r3, r4
 2380 04d6 1168     		ldr	r1, [r2]	@ unaligned
 2381 04d8 1960     		str	r1, [r3]	@ unaligned
 2382 04da 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2383 04dc 9A80     		strh	r2, [r3, #4]	@ unaligned
 645:modem.c       **** 
 646:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_l
 2384              		.loc 1 646 0
 2385 04de 07F17C03 		add	r3, r7, #124
 2386 04e2 1B68     		ldr	r3, [r3]
 2387 04e4 1A46     		mov	r2, r3
 2388 04e6 6849     		ldr	r1, .L137+48
 2389 04e8 0020     		movs	r0, #0
 2390 04ea FFF7FEFF 		bl	printNotif
 2391 04ee 08E0     		b	.L122
 2392              	.L124:
 647:modem.c       ****                 } 
 648:modem.c       ****                 else{
 649:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value."
 2393              		.loc 1 649 0
 2394 04f0 6649     		ldr	r1, .L137+52
 2395 04f2 0220     		movs	r0, #2
 2396 04f4 FFF7FEFF 		bl	printNotif
 2397 04f8 03E0     		b	.L122
 2398              	.L123:
 650:modem.c       ****                 }
 651:modem.c       ****             }
 652:modem.c       ****             else{
 653:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2399              		.loc 1 653 0
 2400 04fa 6549     		ldr	r1, .L137+56
 2401 04fc 0220     		movs	r0, #2
 2402 04fe FFF7FEFF 		bl	printNotif
 2403              	.L122:
 654:modem.c       ****             }
 655:modem.c       ****         }
 656:modem.c       ****         if(downstream_level_sensor_enabled){ 
 2404              		.loc 1 656 0
 2405 0502 644B     		ldr	r3, .L137+60
 2406 0504 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2407 0506 002B     		cmp	r3, #0
 2408 0508 4ED0     		beq	.L126
 657:modem.c       ****             if (strstr(s_down_level_sensor,"Freq=") !=NULL){
 2409              		.loc 1 657 0
 2410 050a 07F5E073 		add	r3, r7, #448
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 59


 2411 050e 5549     		ldr	r1, .L137+12
 2412 0510 1846     		mov	r0, r3
 2413 0512 FFF7FEFF 		bl	strstr
 2414 0516 0346     		mov	r3, r0
 2415 0518 002B     		cmp	r3, #0
 2416 051a 41D0     		beq	.L127
 658:modem.c       ****                 temp[0] = '\0';
 2417              		.loc 1 658 0
 2418 051c 07F10C03 		add	r3, r7, #12
 2419 0520 0022     		movs	r2, #0
 2420 0522 1A70     		strb	r2, [r3]
 659:modem.c       ****                 strcpy(temp,s_down_level_sensor);
 2421              		.loc 1 659 0
 2422 0524 07F5E072 		add	r2, r7, #448
 2423 0528 07F10C03 		add	r3, r7, #12
 2424 052c 1146     		mov	r1, r2
 2425 052e 1846     		mov	r0, r3
 2426 0530 FFF7FEFF 		bl	strcpy
 660:modem.c       ****                 extract_string(temp,"Freq=","\r",s_down_level_sensor); // grab level app frequency
 2427              		.loc 1 660 0
 2428 0534 07F5E073 		add	r3, r7, #448
 2429 0538 07F10C00 		add	r0, r7, #12
 2430 053c 4A4A     		ldr	r2, .L137+16
 2431 053e 4949     		ldr	r1, .L137+12
 2432 0540 FFF7FEFF 		bl	extract_string
 661:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &down_level_freq)==1){
 2433              		.loc 1 661 0
 2434 0544 07F17402 		add	r2, r7, #116
 2435 0548 07F5E073 		add	r3, r7, #448
 2436 054c 4749     		ldr	r1, .L137+20
 2437 054e 1846     		mov	r0, r3
 2438 0550 FFF7FEFF 		bl	sscanf
 2439 0554 0346     		mov	r3, r0
 2440 0556 012B     		cmp	r3, #1
 2441 0558 1DD1     		bne	.L128
 662:modem.c       ****                     updatable_parameters.Downstream_Level_Sensor_freq = down_level_freq;
 2442              		.loc 1 662 0
 2443 055a 07F17403 		add	r3, r7, #116
 2444 055e 1B68     		ldr	r3, [r3]
 2445 0560 DAB2     		uxtb	r2, r3
 2446 0562 3E4B     		ldr	r3, .L137+4
 2447 0564 DA71     		strb	r2, [r3, #7]
 663:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_
 2448              		.loc 1 663 0
 2449 0566 3D4B     		ldr	r3, .L137+4
 2450 0568 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2451 056a 99B2     		uxth	r1, r3
 2452 056c 4A4C     		ldr	r4, .L137+64
 2453 056e 3846     		mov	r0, r7
 2454 0570 0723     		movs	r3, #7
 2455 0572 0122     		movs	r2, #1
 2456 0574 FFF7FEFF 		bl	CreateAlarm
 2457 0578 3A46     		mov	r2, r7
 2458 057a 2346     		mov	r3, r4
 2459 057c 1168     		ldr	r1, [r2]	@ unaligned
 2460 057e 1960     		str	r1, [r3]	@ unaligned
 2461 0580 9288     		ldrh	r2, [r2, #4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 60


 2462 0582 9A80     		strh	r2, [r3, #4]	@ unaligned
 664:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Downstream_Level_Sensor frequency changed to: %d\
 2463              		.loc 1 664 0
 2464 0584 07F17C03 		add	r3, r7, #124
 2465 0588 1B68     		ldr	r3, [r3]
 2466 058a 1A46     		mov	r2, r3
 2467 058c 4349     		ldr	r1, .L137+68
 2468 058e 0020     		movs	r0, #0
 2469 0590 FFF7FEFF 		bl	printNotif
 2470 0594 08E0     		b	.L126
 2471              	.L128:
 665:modem.c       ****                 } 
 666:modem.c       ****                 else{
 667:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Downstream_Level_Sensor freque
 2472              		.loc 1 667 0
 2473 0596 4249     		ldr	r1, .L137+72
 2474 0598 0220     		movs	r0, #2
 2475 059a FFF7FEFF 		bl	printNotif
 2476 059e 03E0     		b	.L126
 2477              	.L127:
 668:modem.c       ****                 }
 669:modem.c       ****             }
 670:modem.c       ****             else{
 671:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Downstream_Level_Sensor frequency value indicated."
 2478              		.loc 1 671 0
 2479 05a0 4049     		ldr	r1, .L137+76
 2480 05a2 0220     		movs	r0, #2
 2481 05a4 FFF7FEFF 		bl	printNotif
 2482              	.L126:
 672:modem.c       ****             }
 673:modem.c       ****         }
 674:modem.c       ****         if(valve_enabled){ 
 2483              		.loc 1 674 0
 2484 05a8 3F4B     		ldr	r3, .L137+80
 2485 05aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2486 05ac 002B     		cmp	r3, #0
 2487 05ae 4ED0     		beq	.L134
 675:modem.c       ****             if (strstr(s_valve,"Freq=") !=NULL){
 2488              		.loc 1 675 0
 2489 05b0 07F5AE73 		add	r3, r7, #348
 2490 05b4 2B49     		ldr	r1, .L137+12
 2491 05b6 1846     		mov	r0, r3
 2492 05b8 FFF7FEFF 		bl	strstr
 2493 05bc 0346     		mov	r3, r0
 2494 05be 002B     		cmp	r3, #0
 2495 05c0 41D0     		beq	.L131
 676:modem.c       ****                 temp[0] = '\0';
 2496              		.loc 1 676 0
 2497 05c2 07F10C03 		add	r3, r7, #12
 2498 05c6 0022     		movs	r2, #0
 2499 05c8 1A70     		strb	r2, [r3]
 677:modem.c       ****                 strcpy(temp,s_valve);
 2500              		.loc 1 677 0
 2501 05ca 07F5AE72 		add	r2, r7, #348
 2502 05ce 07F10C03 		add	r3, r7, #12
 2503 05d2 1146     		mov	r1, r2
 2504 05d4 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 61


 2505 05d6 FFF7FEFF 		bl	strcpy
 678:modem.c       ****                 extract_string(temp,"Freq=","\r",s_valve); // grab app frequency
 2506              		.loc 1 678 0
 2507 05da 07F5AE73 		add	r3, r7, #348
 2508 05de 07F10C00 		add	r0, r7, #12
 2509 05e2 214A     		ldr	r2, .L137+16
 2510 05e4 1F49     		ldr	r1, .L137+12
 2511 05e6 FFF7FEFF 		bl	extract_string
 679:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &valve_freq)==1){
 2512              		.loc 1 679 0
 2513 05ea 07F17002 		add	r2, r7, #112
 2514 05ee 07F5E073 		add	r3, r7, #448
 2515 05f2 1E49     		ldr	r1, .L137+20
 2516 05f4 1846     		mov	r0, r3
 2517 05f6 FFF7FEFF 		bl	sscanf
 2518 05fa 0346     		mov	r3, r0
 2519 05fc 012B     		cmp	r3, #1
 2520 05fe 1DD1     		bne	.L132
 680:modem.c       ****                     updatable_parameters.valve_freq = valve_freq;
 2521              		.loc 1 680 0
 2522 0600 07F17003 		add	r3, r7, #112
 2523 0604 1B68     		ldr	r3, [r3]
 2524 0606 DAB2     		uxtb	r2, r3
 2525 0608 144B     		ldr	r3, .L137+4
 2526 060a 1A72     		strb	r2, [r3, #8]
 681:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.valve_freq,ALARM_
 2527              		.loc 1 681 0
 2528 060c 134B     		ldr	r3, .L137+4
 2529 060e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2530 0610 99B2     		uxth	r1, r3
 2531 0612 214C     		ldr	r4, .L137+64
 2532 0614 3846     		mov	r0, r7
 2533 0616 0723     		movs	r3, #7
 2534 0618 0122     		movs	r2, #1
 2535 061a FFF7FEFF 		bl	CreateAlarm
 2536 061e 3A46     		mov	r2, r7
 2537 0620 2346     		mov	r3, r4
 2538 0622 1168     		ldr	r1, [r2]	@ unaligned
 2539 0624 1960     		str	r1, [r3]	@ unaligned
 2540 0626 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2541 0628 9A80     		strh	r2, [r3, #4]	@ unaligned
 682:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Valve frequency changed to: %d\r\n", app_led_freq
 2542              		.loc 1 682 0
 2543 062a 07F17C03 		add	r3, r7, #124
 2544 062e 1B68     		ldr	r3, [r3]
 2545 0630 1A46     		mov	r2, r3
 2546 0632 1E49     		ldr	r1, .L137+84
 2547 0634 0020     		movs	r0, #0
 2548 0636 FFF7FEFF 		bl	printNotif
 2549              	.LBE9:
 683:modem.c       ****                 } 
 684:modem.c       ****                 else{
 685:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Valve frequency value.");
 686:modem.c       ****                 }
 687:modem.c       ****             }
 688:modem.c       ****             else{
 689:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Valve frequency value indicated.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 62


 690:modem.c       ****             }
 691:modem.c       ****         }
 692:modem.c       ****     }
 693:modem.c       ****         
 694:modem.c       **** 
 695:modem.c       ****         
 696:modem.c       **** }
 2550              		.loc 1 696 0
 2551 063a 08E0     		b	.L134
 2552              	.L132:
 2553              	.LBB10:
 685:modem.c       ****                 }
 2554              		.loc 1 685 0
 2555 063c 1C49     		ldr	r1, .L137+88
 2556 063e 0220     		movs	r0, #2
 2557 0640 FFF7FEFF 		bl	printNotif
 2558              	.LBE10:
 2559              		.loc 1 696 0
 2560 0644 03E0     		b	.L134
 2561              	.L131:
 2562              	.LBB11:
 689:modem.c       ****             }
 2563              		.loc 1 689 0
 2564 0646 1B49     		ldr	r1, .L137+92
 2565 0648 0220     		movs	r0, #2
 2566 064a FFF7FEFF 		bl	printNotif
 2567              	.L134:
 2568              	.LBE11:
 2569              		.loc 1 696 0
 2570 064e 00BF     		nop
 2571 0650 07F54B77 		add	r7, r7, #812
 2572              		.cfi_def_cfa_offset 12
 2573 0654 BD46     		mov	sp, r7
 2574              		.cfi_def_cfa_register 13
 2575              		@ sp needed
 2576 0656 90BD     		pop	{r4, r7, pc}
 2577              	.L138:
 2578              		.align	2
 2579              	.L137:
 2580 0658 34050000 		.word	.LC56
 2581 065c 00000000 		.word	updatable_parameters
 2582 0660 00000000 		.word	App_LED_enabled
 2583 0664 64050000 		.word	.LC57
 2584 0668 88020000 		.word	.LC21
 2585 066c E8030000 		.word	.LC46
 2586 0670 00000000 		.word	alarmAppLED
 2587 0674 6C050000 		.word	.LC58
 2588 0678 90050000 		.word	.LC59
 2589 067c C0050000 		.word	.LC60
 2590 0680 00000000 		.word	level_sensor_enabled
 2591 0684 00000000 		.word	alarmLevelSensor
 2592 0688 E8050000 		.word	.LC61
 2593 068c 10060000 		.word	.LC62
 2594 0690 44060000 		.word	.LC63
 2595 0694 00000000 		.word	downstream_level_sensor_enabled
 2596 0698 00000000 		.word	alarmDownstreamLevelSensor
 2597 069c 70060000 		.word	.LC64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 63


 2598 06a0 A4060000 		.word	.LC65
 2599 06a4 E4060000 		.word	.LC66
 2600 06a8 00000000 		.word	valve_enabled
 2601 06ac 1C070000 		.word	.LC67
 2602 06b0 40070000 		.word	.LC68
 2603 06b4 6C070000 		.word	.LC69
 2604              		.cfi_endproc
 2605              	.LFE81:
 2606              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2607              		.section	.rodata
 2608              		.align	2
 2609              	.LC70:
 2610 0790 41542343 		.ascii	"AT#CGMM\015\000"
 2610      474D4D0D 
 2610      00
 2611 0799 000000   		.align	2
 2612              	.LC71:
 2613 079c 4D6F6465 		.ascii	"Modem Model: %s\000"
 2613      6D204D6F 
 2613      64656C3A 
 2613      20257300 
 2614              		.align	2
 2615              	.LC72:
 2616 07ac 41542343 		.ascii	"AT#CCID\015\000"
 2616      4349440D 
 2616      00
 2617 07b5 000000   		.align	2
 2618              	.LC73:
 2619 07b8 53494D20 		.ascii	"SIM ID: %s\000"
 2619      49443A20 
 2619      257300
 2620 07c3 00       		.align	2
 2621              	.LC74:
 2622 07c4 41542B43 		.ascii	"AT+CGSN\015\000"
 2622      47534E0D 
 2622      00
 2623 07cd 000000   		.align	2
 2624              	.LC75:
 2625 07d0 494D4549 		.ascii	"IMEI: %s\000"
 2625      3A202573 
 2625      00
 2626 07d9 000000   		.align	2
 2627              	.LC76:
 2628 07dc 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2628      4744434F 
 2628      4E543D31 
 2628      2C224950 
 2628      222C2277 
 2629 0805 00       		.ascii	"\000"
 2630 0806 0000     		.align	2
 2631              	.LC77:
 2632 0808 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2632      4744434F 
 2632      4E543D31 
 2632      2C224950 
 2632      222C2273 
 2633              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 64


 2634              	.LC78:
 2635 0824 41542B43 		.ascii	"AT+CFUN?\015\000"
 2635      46554E3F 
 2635      0D00
 2636 082e 0000     		.align	2
 2637              	.LC79:
 2638 0830 4346554E 		.ascii	"CFUN: %s\000"
 2638      3A202573 
 2638      00
 2639 0839 000000   		.align	2
 2640              	.LC80:
 2641 083c 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2641      46554E3D 
 2641      310D00
 2642              		.section	.text.modem_configure_settings,"ax",%progbits
 2643              		.align	2
 2644              		.global	modem_configure_settings
 2645              		.thumb
 2646              		.thumb_func
 2647              		.type	modem_configure_settings, %function
 2648              	modem_configure_settings:
 2649              	.LFB82:
 697:modem.c       ****     
 698:modem.c       **** // Configure the modem settings
 699:modem.c       **** void modem_configure_settings(){
 2650              		.loc 1 699 0
 2651              		.cfi_startproc
 2652              		@ args = 0, pretend = 0, frame = 16
 2653              		@ frame_needed = 1, uses_anonymous_args = 0
 2654 0000 80B5     		push	{r7, lr}
 2655              		.cfi_def_cfa_offset 8
 2656              		.cfi_offset 7, -8
 2657              		.cfi_offset 14, -4
 2658 0002 84B0     		sub	sp, sp, #16
 2659              		.cfi_def_cfa_offset 24
 2660 0004 00AF     		add	r7, sp, #0
 2661              		.cfi_def_cfa_register 7
 700:modem.c       ****     
 701:modem.c       ****     // Save/print modem model ID number
 702:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2662              		.loc 1 702 0
 2663 0006 454B     		ldr	r3, .L148
 2664 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2665 000a 002B     		cmp	r3, #0
 2666 000c 13D1     		bne	.L140
 703:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 704:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2667              		.loc 1 704 0
 2668 000e 4FF4FA62 		mov	r2, #2000
 2669 0012 4349     		ldr	r1, .L148+4
 2670 0014 4348     		ldr	r0, .L148+8
 2671 0016 FFF7FEFF 		bl	at_write_command
 2672 001a 0346     		mov	r3, r0
 2673 001c 002B     		cmp	r3, #0
 2674 001e 0AD0     		beq	.L140
 705:modem.c       ****             // Extract modem model ID number string from the UART
 706:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 65


 2675              		.loc 1 706 0
 2676 0020 414B     		ldr	r3, .L148+12
 2677 0022 424A     		ldr	r2, .L148+16
 2678 0024 4249     		ldr	r1, .L148+20
 2679 0026 4348     		ldr	r0, .L148+24
 2680 0028 FFF7FEFF 		bl	extract_string
 707:modem.c       ****             // Print modem model ID number
 708:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2681              		.loc 1 708 0
 2682 002c 3E4A     		ldr	r2, .L148+12
 2683 002e 4249     		ldr	r1, .L148+28
 2684 0030 0020     		movs	r0, #0
 2685 0032 FFF7FEFF 		bl	printNotif
 2686              	.L140:
 709:modem.c       ****         }
 710:modem.c       ****     }
 711:modem.c       ****     
 712:modem.c       ****    // Save/print SIM-card ID
 713:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2687              		.loc 1 713 0
 2688 0036 394B     		ldr	r3, .L148
 2689 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2690 003a 002B     		cmp	r3, #0
 2691 003c 13D1     		bne	.L141
 714:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 715:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2692              		.loc 1 715 0
 2693 003e 4FF4FA62 		mov	r2, #2000
 2694 0042 3749     		ldr	r1, .L148+4
 2695 0044 3D48     		ldr	r0, .L148+32
 2696 0046 FFF7FEFF 		bl	at_write_command
 2697 004a 0346     		mov	r3, r0
 2698 004c 002B     		cmp	r3, #0
 2699 004e 0AD0     		beq	.L141
 716:modem.c       ****             // Extract SIM-card ID string from the UART
 717:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2700              		.loc 1 717 0
 2701 0050 324B     		ldr	r3, .L148
 2702 0052 364A     		ldr	r2, .L148+16
 2703 0054 3649     		ldr	r1, .L148+20
 2704 0056 3748     		ldr	r0, .L148+24
 2705 0058 FFF7FEFF 		bl	extract_string
 718:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2706              		.loc 1 718 0
 2707 005c 2F4A     		ldr	r2, .L148
 2708 005e 3849     		ldr	r1, .L148+36
 2709 0060 0020     		movs	r0, #0
 2710 0062 FFF7FEFF 		bl	printNotif
 2711              	.L141:
 719:modem.c       ****         }
 720:modem.c       ****    }
 721:modem.c       **** 
 722:modem.c       ****     // Save/print modem IMEI
 723:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2712              		.loc 1 723 0
 2713 0066 2D4B     		ldr	r3, .L148
 2714 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 66


 2715 006c 002B     		cmp	r3, #0
 2716 006e 13D1     		bne	.L142
 724:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 725:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2717              		.loc 1 725 0
 2718 0070 4FF4FA62 		mov	r2, #2000
 2719 0074 2A49     		ldr	r1, .L148+4
 2720 0076 3348     		ldr	r0, .L148+40
 2721 0078 FFF7FEFF 		bl	at_write_command
 2722 007c 0346     		mov	r3, r0
 2723 007e 002B     		cmp	r3, #0
 2724 0080 0AD0     		beq	.L142
 726:modem.c       ****             // Extract modem IMEI number string from the UART
 727:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2725              		.loc 1 727 0
 2726 0082 314B     		ldr	r3, .L148+44
 2727 0084 294A     		ldr	r2, .L148+16
 2728 0086 2A49     		ldr	r1, .L148+20
 2729 0088 2A48     		ldr	r0, .L148+24
 2730 008a FFF7FEFF 		bl	extract_string
 728:modem.c       ****             // Print modem IMEI number
 729:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2731              		.loc 1 729 0
 2732 008e 2E4A     		ldr	r2, .L148+44
 2733 0090 2E49     		ldr	r1, .L148+48
 2734 0092 0020     		movs	r0, #0
 2735 0094 FFF7FEFF 		bl	printNotif
 2736              	.L142:
 730:modem.c       ****         } 
 731:modem.c       ****     }
 732:modem.c       ****     
 733:modem.c       ****     // Configure protocol and cellular end point
 734:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 735:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2737              		.loc 1 735 0
 2738 0098 2D4B     		ldr	r3, .L148+52
 2739 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2740 009c 83F00103 		eor	r3, r3, #1
 2741 00a0 DBB2     		uxtb	r3, r3
 2742 00a2 002B     		cmp	r3, #0
 2743 00a4 06D0     		beq	.L143
 736:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2744              		.loc 1 736 0
 2745 00a6 4FF4FA62 		mov	r2, #2000
 2746 00aa 1D49     		ldr	r1, .L148+4
 2747 00ac 2948     		ldr	r0, .L148+56
 2748 00ae FFF7FEFF 		bl	at_write_command
 2749 00b2 09E0     		b	.L144
 2750              	.L143:
 737:modem.c       ****     
 738:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2751              		.loc 1 738 0
 2752 00b4 264B     		ldr	r3, .L148+52
 2753 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2754 00b8 002B     		cmp	r3, #0
 2755 00ba 05D0     		beq	.L144
 739:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 67


 2756              		.loc 1 739 0
 2757 00bc 4FF4FA62 		mov	r2, #2000
 2758 00c0 1749     		ldr	r1, .L148+4
 2759 00c2 2548     		ldr	r0, .L148+60
 2760 00c4 FFF7FEFF 		bl	at_write_command
 2761              	.L144:
 740:modem.c       ****     }
 741:modem.c       ****     
 742:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 743:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 744:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2762              		.loc 1 744 0
 2763 00c8 4FF4FA62 		mov	r2, #2000
 2764 00cc 1449     		ldr	r1, .L148+4
 2765 00ce 2348     		ldr	r0, .L148+64
 2766 00d0 FFF7FEFF 		bl	at_write_command
 2767 00d4 0346     		mov	r3, r0
 2768 00d6 002B     		cmp	r3, #0
 2769 00d8 1BD0     		beq	.L147
 2770              	.LBB12:
 745:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 746:modem.c       ****         CFUN[0] = '\0';
 2771              		.loc 1 746 0
 2772 00da 0023     		movs	r3, #0
 2773 00dc 3B71     		strb	r3, [r7, #4]
 747:modem.c       ****         // Extract UART string recieved from the modem
 748:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2774              		.loc 1 748 0
 2775 00de 3B1D     		adds	r3, r7, #4
 2776 00e0 124A     		ldr	r2, .L148+16
 2777 00e2 1349     		ldr	r1, .L148+20
 2778 00e4 1348     		ldr	r0, .L148+24
 2779 00e6 FFF7FEFF 		bl	extract_string
 749:modem.c       ****         // Print UART string recieved from the modem
 750:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2780              		.loc 1 750 0
 2781 00ea 3B1D     		adds	r3, r7, #4
 2782 00ec 1A46     		mov	r2, r3
 2783 00ee 1C49     		ldr	r1, .L148+68
 2784 00f0 0020     		movs	r0, #0
 2785 00f2 FFF7FEFF 		bl	printNotif
 751:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 752:modem.c       ****         // If it returns NULL, then write another command to the modem
 753:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2786              		.loc 1 753 0
 2787 00f6 3B1D     		adds	r3, r7, #4
 2788 00f8 3121     		movs	r1, #49
 2789 00fa 1846     		mov	r0, r3
 2790 00fc FFF7FEFF 		bl	strchr
 2791 0100 0346     		mov	r3, r0
 2792 0102 002B     		cmp	r3, #0
 2793 0104 05D1     		bne	.L147
 754:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 755:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 756:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2794              		.loc 1 756 0
 2795 0106 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 68


 2796 010a 0549     		ldr	r1, .L148+4
 2797 010c 1548     		ldr	r0, .L148+72
 2798 010e FFF7FEFF 		bl	at_write_command
 2799              	.L147:
 2800              	.LBE12:
 757:modem.c       ****         }
 758:modem.c       ****     }
 759:modem.c       **** 
 760:modem.c       ****     
 761:modem.c       **** }
 2801              		.loc 1 761 0
 2802 0112 00BF     		nop
 2803 0114 1037     		adds	r7, r7, #16
 2804              		.cfi_def_cfa_offset 8
 2805 0116 BD46     		mov	sp, r7
 2806              		.cfi_def_cfa_register 13
 2807              		@ sp needed
 2808 0118 80BD     		pop	{r7, pc}
 2809              	.L149:
 2810 011a 00BF     		.align	2
 2811              	.L148:
 2812 011c 00000000 		.word	modem_info
 2813 0120 00000000 		.word	.LC0
 2814 0124 90070000 		.word	.LC70
 2815 0128 14000000 		.word	modem_info+20
 2816 012c 88020000 		.word	.LC21
 2817 0130 8C020000 		.word	.LC22
 2818 0134 00000000 		.word	uart_received_string
 2819 0138 9C070000 		.word	.LC71
 2820 013c AC070000 		.word	.LC72
 2821 0140 B8070000 		.word	.LC73
 2822 0144 C4070000 		.word	.LC74
 2823 0148 28000000 		.word	modem_info+40
 2824 014c D0070000 		.word	.LC75
 2825 0150 00000000 		.word	updatable_parameters
 2826 0154 DC070000 		.word	.LC76
 2827 0158 08080000 		.word	.LC77
 2828 015c 24080000 		.word	.LC78
 2829 0160 30080000 		.word	.LC79
 2830 0164 3C080000 		.word	.LC80
 2831              		.cfi_endproc
 2832              	.LFE82:
 2833              		.size	modem_configure_settings, .-modem_configure_settings
 2834              		.section	.rodata
 2835 0847 00       		.align	2
 2836              	.LC81:
 2837 0848 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2837      6D206E6F 
 2837      74207265 
 2837      61647920 
 2837      746F2067 
 2838 087b 6B2E00   		.ascii	"k.\000"
 2839 087e 0000     		.align	2
 2840              	.LC82:
 2841 0880 41542B43 		.ascii	"AT+CCLK?\015\000"
 2841      434C4B3F 
 2841      0D00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 69


 2842 088a 0000     		.align	2
 2843              	.LC83:
 2844 088c 220D00   		.ascii	"\"\015\000"
 2845 088f 00       		.align	2
 2846              	.LC84:
 2847 0890 3A202200 		.ascii	": \"\000"
 2848              		.align	2
 2849              	.LC85:
 2850 0894 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2850      642F2564 
 2850      2C25643A 
 2850      25643A25 
 2850      642D2564 
 2851 08a9 000000   		.align	2
 2852              	.LC86:
 2853 08ac 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2853      642F2564 
 2853      2C25643A 
 2853      25643A25 
 2853      642B2564 
 2854 08c1 000000   		.align	2
 2855              	.LC87:
 2856 08c4 436F756C 		.ascii	"Could not parse modem time.\000"
 2856      64206E6F 
 2856      74207061 
 2856      72736520 
 2856      6D6F6465 
 2857              		.section	.text.modem_get_network_time,"ax",%progbits
 2858              		.align	2
 2859              		.global	modem_get_network_time
 2860              		.thumb
 2861              		.thumb_func
 2862              		.type	modem_get_network_time, %function
 2863              	modem_get_network_time:
 2864              	.LFB83:
 762:modem.c       **** 
 763:modem.c       **** //returns 0 if modem can't get time
 764:modem.c       **** long modem_get_network_time(){
 2865              		.loc 1 764 0
 2866              		.cfi_startproc
 2867              		@ args = 0, pretend = 0, frame = 104
 2868              		@ frame_needed = 1, uses_anonymous_args = 0
 2869 0000 80B5     		push	{r7, lr}
 2870              		.cfi_def_cfa_offset 8
 2871              		.cfi_offset 7, -8
 2872              		.cfi_offset 14, -4
 2873 0002 A0B0     		sub	sp, sp, #128
 2874              		.cfi_def_cfa_offset 136
 2875 0004 06AF     		add	r7, sp, #24
 2876              		.cfi_def_cfa 7, 112
 765:modem.c       ****     
 766:modem.c       ****     //modem reposen format (careful to include the quotes "")
 767:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 768:modem.c       ****     //ex: 14:48 GMT
 769:modem.c       **** 
 770:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 771:modem.c       ****     if(modem_state != MODEM_STATE_READY){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 70


 2877              		.loc 1 771 0
 2878 0006 444B     		ldr	r3, .L157
 2879 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2880 000a 042B     		cmp	r3, #4
 2881 000c 05D0     		beq	.L151
 772:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2882              		.loc 1 772 0
 2883 000e 4349     		ldr	r1, .L157+4
 2884 0010 0220     		movs	r0, #2
 2885 0012 FFF7FEFF 		bl	printNotif
 773:modem.c       ****         return 0;   
 2886              		.loc 1 773 0
 2887 0016 0023     		movs	r3, #0
 2888 0018 7AE0     		b	.L152
 2889              	.L151:
 774:modem.c       ****     }
 775:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2890              		.loc 1 775 0
 2891 001a 0023     		movs	r3, #0
 2892 001c 7B66     		str	r3, [r7, #100]
 776:modem.c       ****     
 777:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 778:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2893              		.loc 1 778 0
 2894 001e 4FF4FA62 		mov	r2, #2000
 2895 0022 3F49     		ldr	r1, .L157+8
 2896 0024 3F48     		ldr	r0, .L157+12
 2897 0026 FFF7FEFF 		bl	at_write_command
 2898 002a 0346     		mov	r3, r0
 2899 002c 002B     		cmp	r3, #0
 2900 002e 6ED0     		beq	.L153
 2901              	.LBB13:
 779:modem.c       ****         // need to set this to /0
 780:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 781:modem.c       ****         network_time[0] = '\0';
 2902              		.loc 1 781 0
 2903 0030 0023     		movs	r3, #0
 2904 0032 87F84430 		strb	r3, [r7, #68]
 782:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 783:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2905              		.loc 1 783 0
 2906 0036 07F14403 		add	r3, r7, #68
 2907 003a 3B4A     		ldr	r2, .L157+16
 2908 003c 3B49     		ldr	r1, .L157+20
 2909 003e 3C48     		ldr	r0, .L157+24
 2910 0040 FFF7FEFF 		bl	extract_string
 784:modem.c       ****         
 785:modem.c       ****         ///////////////////  
 786:modem.c       ****         struct tm t; // Creates variable t of struct tm
 787:modem.c       ****         
 788:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 789:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2911              		.loc 1 789 0
 2912 0044 0023     		movs	r3, #0
 2913 0046 BB62     		str	r3, [r7, #40]
 790:modem.c       ****       
 791:modem.c       ****         // Determines the GMT offset 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 71


 792:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 793:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 794:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2914              		.loc 1 794 0
 2915 0048 07F13C01 		add	r1, r7, #60
 2916 004c 07F14002 		add	r2, r7, #64
 2917 0050 07F14400 		add	r0, r7, #68
 2918 0054 07F12803 		add	r3, r7, #40
 2919 0058 0493     		str	r3, [sp, #16]
 2920 005a 07F12C03 		add	r3, r7, #44
 2921 005e 0393     		str	r3, [sp, #12]
 2922 0060 07F13003 		add	r3, r7, #48
 2923 0064 0293     		str	r3, [sp, #8]
 2924 0066 07F13403 		add	r3, r7, #52
 2925 006a 0193     		str	r3, [sp, #4]
 2926 006c 07F13803 		add	r3, r7, #56
 2927 0070 0093     		str	r3, [sp]
 2928 0072 0B46     		mov	r3, r1
 2929 0074 2F49     		ldr	r1, .L157+28
 2930 0076 FFF7FEFF 		bl	sscanf
 2931 007a 0346     		mov	r3, r0
 2932 007c 072B     		cmp	r3, #7
 2933 007e 06D1     		bne	.L154
 795:modem.c       ****             gmt_offset = gmt_offset*(900);
 2934              		.loc 1 795 0
 2935 0080 BB6A     		ldr	r3, [r7, #40]
 2936 0082 4FF46172 		mov	r2, #900
 2937 0086 02FB03F3 		mul	r3, r2, r3
 2938 008a BB62     		str	r3, [r7, #40]
 2939 008c 27E0     		b	.L155
 2940              	.L154:
 796:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2941              		.loc 1 796 0
 2942 008e 07F13C01 		add	r1, r7, #60
 2943 0092 07F14002 		add	r2, r7, #64
 2944 0096 07F14400 		add	r0, r7, #68
 2945 009a 07F12803 		add	r3, r7, #40
 2946 009e 0493     		str	r3, [sp, #16]
 2947 00a0 07F12C03 		add	r3, r7, #44
 2948 00a4 0393     		str	r3, [sp, #12]
 2949 00a6 07F13003 		add	r3, r7, #48
 2950 00aa 0293     		str	r3, [sp, #8]
 2951 00ac 07F13403 		add	r3, r7, #52
 2952 00b0 0193     		str	r3, [sp, #4]
 2953 00b2 07F13803 		add	r3, r7, #56
 2954 00b6 0093     		str	r3, [sp]
 2955 00b8 0B46     		mov	r3, r1
 2956 00ba 1F49     		ldr	r1, .L157+32
 2957 00bc FFF7FEFF 		bl	sscanf
 2958 00c0 0346     		mov	r3, r0
 2959 00c2 072B     		cmp	r3, #7
 2960 00c4 05D1     		bne	.L156
 797:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2961              		.loc 1 797 0
 2962 00c6 BB6A     		ldr	r3, [r7, #40]
 2963 00c8 1C4A     		ldr	r2, .L157+36
 2964 00ca 02FB03F3 		mul	r3, r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 72


 2965 00ce BB62     		str	r3, [r7, #40]
 2966 00d0 05E0     		b	.L155
 2967              	.L156:
 798:modem.c       ****         }else{
 799:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2968              		.loc 1 799 0
 2969 00d2 1B49     		ldr	r1, .L157+40
 2970 00d4 0220     		movs	r0, #2
 2971 00d6 FFF7FEFF 		bl	printNotif
 800:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2972              		.loc 1 800 0
 2973 00da 0023     		movs	r3, #0
 2974 00dc 18E0     		b	.L152
 2975              	.L155:
 801:modem.c       ****         }
 802:modem.c       ****         
 803:modem.c       ****         // Sets each variable to the correct time 
 804:modem.c       ****         t.tm_sec = second;
 2976              		.loc 1 804 0
 2977 00de FB6A     		ldr	r3, [r7, #44]
 2978 00e0 7B60     		str	r3, [r7, #4]
 805:modem.c       ****         t.tm_min = minute;
 2979              		.loc 1 805 0
 2980 00e2 3B6B     		ldr	r3, [r7, #48]
 2981 00e4 BB60     		str	r3, [r7, #8]
 806:modem.c       ****         t.tm_hour = hour;
 2982              		.loc 1 806 0
 2983 00e6 7B6B     		ldr	r3, [r7, #52]
 2984 00e8 FB60     		str	r3, [r7, #12]
 807:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2985              		.loc 1 807 0
 2986 00ea 3B6C     		ldr	r3, [r7, #64]
 2987 00ec 6433     		adds	r3, r3, #100
 2988 00ee BB61     		str	r3, [r7, #24]
 808:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2989              		.loc 1 808 0
 2990 00f0 FB6B     		ldr	r3, [r7, #60]
 2991 00f2 013B     		subs	r3, r3, #1
 2992 00f4 7B61     		str	r3, [r7, #20]
 809:modem.c       ****         t.tm_mday = day;           // Day of the month
 2993              		.loc 1 809 0
 2994 00f6 BB6B     		ldr	r3, [r7, #56]
 2995 00f8 3B61     		str	r3, [r7, #16]
 810:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2996              		.loc 1 810 0
 2997 00fa 0023     		movs	r3, #0
 2998 00fc 7B62     		str	r3, [r7, #36]
 811:modem.c       ****     
 812:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 813:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 814:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2999              		.loc 1 814 0
 3000 00fe 3B1D     		adds	r3, r7, #4
 3001 0100 1846     		mov	r0, r3
 3002 0102 FFF7FEFF 		bl	mktime
 3003 0106 0246     		mov	r2, r0
 3004 0108 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 73


 3005 010a 1344     		add	r3, r3, r2
 3006 010c 7B66     		str	r3, [r7, #100]
 3007              	.L153:
 3008              	.LBE13:
 815:modem.c       ****     }
 816:modem.c       ****     
 817:modem.c       ****     return epoch_time;
 3009              		.loc 1 817 0
 3010 010e 7B6E     		ldr	r3, [r7, #100]
 3011              	.L152:
 818:modem.c       **** }
 3012              		.loc 1 818 0
 3013 0110 1846     		mov	r0, r3
 3014 0112 6837     		adds	r7, r7, #104
 3015              		.cfi_def_cfa_offset 8
 3016 0114 BD46     		mov	sp, r7
 3017              		.cfi_def_cfa_register 13
 3018              		@ sp needed
 3019 0116 80BD     		pop	{r7, pc}
 3020              	.L158:
 3021              		.align	2
 3022              	.L157:
 3023 0118 00000000 		.word	modem_state
 3024 011c 48080000 		.word	.LC81
 3025 0120 00000000 		.word	.LC0
 3026 0124 80080000 		.word	.LC82
 3027 0128 8C080000 		.word	.LC83
 3028 012c 90080000 		.word	.LC84
 3029 0130 00000000 		.word	uart_received_string
 3030 0134 94080000 		.word	.LC85
 3031 0138 AC080000 		.word	.LC86
 3032 013c 7CFCFFFF 		.word	-900
 3033 0140 C4080000 		.word	.LC87
 3034              		.cfi_endproc
 3035              	.LFE83:
 3036              		.size	modem_get_network_time, .-modem_get_network_time
 3037              		.section	.text.modem_get_state,"ax",%progbits
 3038              		.align	2
 3039              		.global	modem_get_state
 3040              		.thumb
 3041              		.thumb_func
 3042              		.type	modem_get_state, %function
 3043              	modem_get_state:
 3044              	.LFB84:
 819:modem.c       **** 
 820:modem.c       **** // Get the modem state
 821:modem.c       **** uint8 modem_get_state(){
 3045              		.loc 1 821 0
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 1, uses_anonymous_args = 0
 3049              		@ link register save eliminated.
 3050 0000 80B4     		push	{r7}
 3051              		.cfi_def_cfa_offset 4
 3052              		.cfi_offset 7, -4
 3053 0002 00AF     		add	r7, sp, #0
 3054              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 74


 822:modem.c       ****     return modem_state;
 3055              		.loc 1 822 0
 3056 0004 024B     		ldr	r3, .L161
 3057 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 823:modem.c       **** }
 3058              		.loc 1 823 0
 3059 0008 1846     		mov	r0, r3
 3060 000a BD46     		mov	sp, r7
 3061              		.cfi_def_cfa_register 13
 3062              		@ sp needed
 3063 000c 80BC     		pop	{r7}
 3064              		.cfi_restore 7
 3065              		.cfi_def_cfa_offset 0
 3066 000e 7047     		bx	lr
 3067              	.L162:
 3068              		.align	2
 3069              	.L161:
 3070 0010 00000000 		.word	modem_state
 3071              		.cfi_endproc
 3072              	.LFE84:
 3073              		.size	modem_get_state, .-modem_get_state
 3074              		.section	.text.modem_sleep,"ax",%progbits
 3075              		.align	2
 3076              		.global	modem_sleep
 3077              		.thumb
 3078              		.thumb_func
 3079              		.type	modem_sleep, %function
 3080              	modem_sleep:
 3081              	.LFB85:
 824:modem.c       **** 
 825:modem.c       **** // Set modem to sleep
 826:modem.c       **** void modem_sleep(){
 3082              		.loc 1 826 0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 1, uses_anonymous_args = 0
 3086 0000 80B5     		push	{r7, lr}
 3087              		.cfi_def_cfa_offset 8
 3088              		.cfi_offset 7, -8
 3089              		.cfi_offset 14, -4
 3090 0002 00AF     		add	r7, sp, #0
 3091              		.cfi_def_cfa_register 7
 827:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 828:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 3092              		.loc 1 828 0
 3093 0004 FFF7FEFF 		bl	modem_get_state
 3094 0008 0346     		mov	r3, r0
 3095 000a 002B     		cmp	r3, #0
 3096 000c 03D0     		beq	.L165
 829:modem.c       **** 
 830:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 3097              		.loc 1 830 0
 3098 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 831:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 3099              		.loc 1 831 0
 3100 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 3101              	.L165:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 75


 832:modem.c       ****         
 833:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 834:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 835:modem.c       ****      }
 836:modem.c       **** }
 3102              		.loc 1 836 0
 3103 0016 00BF     		nop
 3104 0018 80BD     		pop	{r7, pc}
 3105              		.cfi_endproc
 3106              	.LFE85:
 3107              		.size	modem_sleep, .-modem_sleep
 3108 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 3109              		.align	2
 3110              		.global	modem_wakeup
 3111              		.thumb
 3112              		.thumb_func
 3113              		.type	modem_wakeup, %function
 3114              	modem_wakeup:
 3115              	.LFB86:
 837:modem.c       **** 
 838:modem.c       **** // Wakeup the modem
 839:modem.c       **** void modem_wakeup(){
 3116              		.loc 1 839 0
 3117              		.cfi_startproc
 3118              		@ args = 0, pretend = 0, frame = 0
 3119              		@ frame_needed = 1, uses_anonymous_args = 0
 3120 0000 80B5     		push	{r7, lr}
 3121              		.cfi_def_cfa_offset 8
 3122              		.cfi_offset 7, -8
 3123              		.cfi_offset 14, -4
 3124 0002 00AF     		add	r7, sp, #0
 3125              		.cfi_def_cfa_register 7
 840:modem.c       ****     // If modem state is not off then wake it up
 841:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 3126              		.loc 1 841 0
 3127 0004 FFF7FEFF 		bl	modem_get_state
 3128 0008 0346     		mov	r3, r0
 3129 000a 002B     		cmp	r3, #0
 3130 000c 0BD0     		beq	.L168
 842:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 3131              		.loc 1 842 0
 3132 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 843:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 844:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 845:modem.c       ****         UART_Telit_Wakeup();
 3133              		.loc 1 845 0
 3134 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 846:modem.c       ****         // Remove the need for this pin itterupt
 847:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 848:modem.c       ****         
 849:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 850:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 3135              		.loc 1 850 0
 3136 0016 FFF7FEFF 		bl	modem_get_state
 3137 001a 0346     		mov	r3, r0
 3138 001c 032B     		cmp	r3, #3
 3139 001e 02D1     		bne	.L168
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 76


 851:modem.c       ****             CyDelay(100u);
 3140              		.loc 1 851 0
 3141 0020 6420     		movs	r0, #100
 3142 0022 FFF7FEFF 		bl	CyDelay
 3143              	.L168:
 852:modem.c       ****         }
 853:modem.c       ****      }
 854:modem.c       **** }
 3144              		.loc 1 854 0
 3145 0026 00BF     		nop
 3146 0028 80BD     		pop	{r7, pc}
 3147              		.cfi_endproc
 3148              	.LFE86:
 3149              		.size	modem_wakeup, .-modem_wakeup
 3150 002a 00BF     		.section	.rodata
 3151              		.align	2
 3152              	.LC88:
 3153 08e0 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 3153      50494F3D 
 3153      352C312C 
 3153      312C300D 
 3153      00
 3154 08f1 000000   		.align	2
 3155              	.LC89:
 3156 08f4 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 3156      55504C53 
 3156      45433D31 
 3156      0D00
 3157 0902 0000     		.align	2
 3158              	.LC90:
 3159 0904 41542453 		.ascii	"AT$SUPLV=2\015\000"
 3159      55504C56 
 3159      3D320D00 
 3160              		.align	2
 3161              	.LC91:
 3162 0910 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 3162      47505345 
 3162      4E3D310D 
 3162      00
 3163 091d 000000   		.align	2
 3164              	.LC92:
 3165 0920 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 3165      4C503D31 
 3165      2C227375 
 3165      706C2E67 
 3165      6F6F676C 
 3166 0941 000000   		.align	2
 3167              	.LC93:
 3168 0944 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 3168      47414354 
 3168      3D312C30 
 3168      0D0A00
 3169 0953 00       		.align	2
 3170              	.LC94:
 3171 0954 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 3171      43534C4B 
 3171      3D312C31 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 77


 3171      0D00
 3172 0962 0000     		.align	2
 3173              	.LC95:
 3174 0964 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 3174      5053534C 
 3174      53523D31 
 3174      2C312C2C 
 3174      2C2C2C32 
 3175 097a 0000     		.align	2
 3176              	.LC96:
 3177 097c 4E00     		.ascii	"N\000"
 3178 097e 0000     		.align	2
 3179              	.LC97:
 3180 0980 41542447 		.ascii	"AT$GPSACP\015\000"
 3180      50534143 
 3180      500D00
 3181 098b 00       		.align	2
 3182              	.LC98:
 3183 098c 24475053 		.ascii	"$GPSACP: \000"
 3183      4143503A 
 3183      2000
 3184 0996 0000     		.align	2
 3185              	.LC99:
 3186 0998 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 3186      4143503A 
 3186      20252A66 
 3186      2C25664E 
 3186      2C256657 
 3187              		.global	__aeabi_fdiv
 3188              		.global	__aeabi_f2d
 3189              		.global	__aeabi_ddiv
 3190              		.global	__aeabi_dadd
 3191              		.global	__aeabi_d2f
 3192              		.align	2
 3193              	.LC100:
 3194 09b8 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 3194      50494F3D 
 3194      352C302C 
 3194      312C300D 
 3194      00
 3195 09c9 000000   		.align	2
 3196              	.LC101:
 3197 09cc 41542447 		.ascii	"AT$GPSR=0\015\000"
 3197      5053523D 
 3197      300D00
 3198 09d7 00       		.align	2
 3199              	.LC102:
 3200 09d8 54696D65 		.ascii	"Time to lock GPS: %d\000"
 3200      20746F20 
 3200      6C6F636B 
 3200      20475053 
 3200      3A202564 
 3201              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 3202              		.align	2
 3203              		.global	modem_get_gps_coordinates
 3204              		.thumb
 3205              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 78


 3206              		.type	modem_get_gps_coordinates, %function
 3207              	modem_get_gps_coordinates:
 3208              	.LFB87:
 855:modem.c       **** 
 856:modem.c       ****     
 857:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 858:modem.c       **** gps_t modem_get_gps_coordinates(){
 3209              		.loc 1 858 0
 3210              		.cfi_startproc
 3211              		@ args = 0, pretend = 0, frame = 56
 3212              		@ frame_needed = 1, uses_anonymous_args = 0
 3213 0000 B0B5     		push	{r4, r5, r7, lr}
 3214              		.cfi_def_cfa_offset 16
 3215              		.cfi_offset 4, -16
 3216              		.cfi_offset 5, -12
 3217              		.cfi_offset 7, -8
 3218              		.cfi_offset 14, -4
 3219 0002 90B0     		sub	sp, sp, #64
 3220              		.cfi_def_cfa_offset 80
 3221 0004 02AF     		add	r7, sp, #8
 3222              		.cfi_def_cfa 7, 72
 3223 0006 7860     		str	r0, [r7, #4]
 859:modem.c       ****     gps_t gps;
 860:modem.c       ****     gps.altitude = 0;
 3224              		.loc 1 860 0
 3225 0008 4FF00003 		mov	r3, #0
 3226 000c FB61     		str	r3, [r7, #28]	@ float
 861:modem.c       ****     gps.longitude = 0;
 3227              		.loc 1 861 0
 3228 000e 4FF00003 		mov	r3, #0
 3229 0012 BB61     		str	r3, [r7, #24]	@ float
 862:modem.c       ****     gps.latitude = 0;
 3230              		.loc 1 862 0
 3231 0014 4FF00003 		mov	r3, #0
 3232 0018 7B61     		str	r3, [r7, #20]	@ float
 863:modem.c       ****     gps.time_to_lock =0;
 3233              		.loc 1 863 0
 3234 001a 0023     		movs	r3, #0
 3235 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 864:modem.c       ****     gps.valid = 0;
 3236              		.loc 1 864 0
 3237 001e 0023     		movs	r3, #0
 3238 0020 87F82230 		strb	r3, [r7, #34]
 865:modem.c       ****     
 866:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 867:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 3239              		.loc 1 867 0
 3240 0024 7F4B     		ldr	r3, .L179
 3241 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3242 0028 042B     		cmp	r3, #4
 3243 002a 07D0     		beq	.L170
 868:modem.c       ****         return gps;//where valid = 0
 3244              		.loc 1 868 0
 3245 002c 7B68     		ldr	r3, [r7, #4]
 3246 002e 1C46     		mov	r4, r3
 3247 0030 07F11403 		add	r3, r7, #20
 3248 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 79


 3249 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3250 003a EFE0     		b	.L169
 3251              	.L170:
 869:modem.c       ****     }
 870:modem.c       ****     
 871:modem.c       ****     long lock_time = getTimeStamp();
 3252              		.loc 1 871 0
 3253 003c FFF7FEFF 		bl	getTimeStamp
 3254 0040 3863     		str	r0, [r7, #48]
 872:modem.c       ****     
 873:modem.c       ****     // Enable this for the LTER module
 874:modem.c       ****     // Enable GPS Low-Dropout Regulator
 875:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3255              		.loc 1 875 0
 3256 0042 4FF4FA62 		mov	r2, #2000
 3257 0046 7849     		ldr	r1, .L179+4
 3258 0048 7848     		ldr	r0, .L179+8
 3259 004a FFF7FEFF 		bl	at_write_command
 876:modem.c       ****     
 877:modem.c       ****     // Configure SUPL connection params
 878:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 3260              		.loc 1 878 0
 3261 004e 4FF4FA62 		mov	r2, #2000
 3262 0052 7549     		ldr	r1, .L179+4
 3263 0054 7648     		ldr	r0, .L179+12
 3264 0056 FFF7FEFF 		bl	at_write_command
 879:modem.c       ****     
 880:modem.c       ****     // Use SUPL2.0
 881:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 3265              		.loc 1 881 0
 3266 005a 4FF4FA62 		mov	r2, #2000
 3267 005e 7249     		ldr	r1, .L179+4
 3268 0060 7448     		ldr	r0, .L179+16
 3269 0062 FFF7FEFF 		bl	at_write_command
 882:modem.c       ****     
 883:modem.c       ****     // Enable AGPS service
 884:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 3270              		.loc 1 884 0
 3271 0066 4FF4FA62 		mov	r2, #2000
 3272 006a 6F49     		ldr	r1, .L179+4
 3273 006c 7248     		ldr	r0, .L179+20
 3274 006e FFF7FEFF 		bl	at_write_command
 885:modem.c       ****     
 886:modem.c       ****     // Chose SUPL server, use google public service
 887:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 3275              		.loc 1 887 0
 3276 0072 4FF4FA62 		mov	r2, #2000
 3277 0076 6C49     		ldr	r1, .L179+4
 3278 0078 7048     		ldr	r0, .L179+24
 3279 007a FFF7FEFF 		bl	at_write_command
 888:modem.c       ****     
 889:modem.c       ****     //pdp context has to be locked to carrier for this to work
 890:modem.c       ****     
 891:modem.c       ****     // Unlock context since it needs to be used by modem
 892:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 3280              		.loc 1 892 0
 3281 007e 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 80


 3282 0082 6949     		ldr	r1, .L179+4
 3283 0084 6E48     		ldr	r0, .L179+28
 3284 0086 FFF7FEFF 		bl	at_write_command
 893:modem.c       ****     
 894:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 3285              		.loc 1 894 0
 3286 008a 4FF4FA62 		mov	r2, #2000
 3287 008e 6649     		ldr	r1, .L179+4
 3288 0090 6C48     		ldr	r0, .L179+32
 3289 0092 FFF7FEFF 		bl	at_write_command
 895:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 896:modem.c       ****     
 897:modem.c       ****     // Relock the context
 898:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 3290              		.loc 1 898 0
 3291 0096 42F21072 		movw	r2, #10000
 3292 009a 6349     		ldr	r1, .L179+4
 3293 009c 6A48     		ldr	r0, .L179+36
 3294 009e FFF7FEFF 		bl	at_write_command
 899:modem.c       ****     
 900:modem.c       ****     //start AGPS service
 901:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 3295              		.loc 1 901 0
 3296 00a2 4FF4FA62 		mov	r2, #2000
 3297 00a6 6049     		ldr	r1, .L179+4
 3298 00a8 6848     		ldr	r0, .L179+40
 3299 00aa FFF7FEFF 		bl	at_write_command
 902:modem.c       ****     
 903:modem.c       ****     
 904:modem.c       ****     // Start the AGPS service
 905:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 906:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 907:modem.c       ****     
 908:modem.c       ****     
 909:modem.c       ****  
 910:modem.c       ****     uint8 gps_status = 0;
 3300              		.loc 1 910 0
 3301 00ae 0023     		movs	r3, #0
 3302 00b0 87F82F30 		strb	r3, [r7, #47]
 3303              	.LBB14:
 911:modem.c       ****     for(uint16 i=0;i<200;i++){
 3304              		.loc 1 911 0
 3305 00b4 0023     		movs	r3, #0
 3306 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 3307 00b8 13E0     		b	.L172
 3308              	.L175:
 912:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3309              		.loc 1 912 0
 3310 00ba 4FF4FA62 		mov	r2, #2000
 3311 00be 6449     		ldr	r1, .L179+44
 3312 00c0 6448     		ldr	r0, .L179+48
 3313 00c2 FFF7FEFF 		bl	at_write_command
 3314 00c6 0346     		mov	r3, r0
 3315 00c8 87F82F30 		strb	r3, [r7, #47]
 913:modem.c       ****         if(gps_status){
 3316              		.loc 1 913 0
 3317 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 81


 3318 00d0 002B     		cmp	r3, #0
 3319 00d2 0AD1     		bne	.L178
 914:modem.c       ****             break;   
 915:modem.c       ****         }
 916:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 3320              		.loc 1 916 0 discriminator 2
 3321 00d4 4FF47A70 		mov	r0, #1000
 3322 00d8 FFF7FEFF 		bl	CyDelay
 911:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3323              		.loc 1 911 0 discriminator 2
 3324 00dc FB8E     		ldrh	r3, [r7, #54]
 3325 00de 0133     		adds	r3, r3, #1
 3326 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 3327              	.L172:
 911:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3328              		.loc 1 911 0 is_stmt 0 discriminator 1
 3329 00e2 FB8E     		ldrh	r3, [r7, #54]
 3330 00e4 C72B     		cmp	r3, #199
 3331 00e6 E8D9     		bls	.L175
 3332 00e8 00E0     		b	.L174
 3333              	.L178:
 914:modem.c       ****             break;   
 3334              		.loc 1 914 0 is_stmt 1
 3335 00ea 00BF     		nop
 3336              	.L174:
 3337              	.LBE14:
 917:modem.c       ****     }
 918:modem.c       ****     
 919:modem.c       ****     //parse data here
 920:modem.c       ****     
 921:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 922:modem.c       ****     float lat;
 923:modem.c       ****     float lon;
 924:modem.c       ****     float alt;
 925:modem.c       ****     
 926:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 927:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 928:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 3338              		.loc 1 928 0
 3339 00ec 5A49     		ldr	r1, .L179+52
 3340 00ee 5B48     		ldr	r0, .L179+56
 3341 00f0 FFF7FEFF 		bl	strstr
 3342 00f4 B862     		str	r0, [r7, #40]
 929:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 930:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 931:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 3343              		.loc 1 931 0
 3344 00f6 07F10C01 		add	r1, r7, #12
 3345 00fa 07F11002 		add	r2, r7, #16
 3346 00fe 07F10803 		add	r3, r7, #8
 3347 0102 0093     		str	r3, [sp]
 3348 0104 0B46     		mov	r3, r1
 3349 0106 5649     		ldr	r1, .L179+60
 3350 0108 B86A     		ldr	r0, [r7, #40]
 3351 010a FFF7FEFF 		bl	sscanf
 3352 010e 7862     		str	r0, [r7, #36]
 932:modem.c       ****     if(match >= 3){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 82


 3353              		.loc 1 932 0
 3354 0110 7B6A     		ldr	r3, [r7, #36]
 3355 0112 022B     		cmp	r3, #2
 3356 0114 60DD     		ble	.L176
 933:modem.c       ****         // Calculate lat and lon
 934:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 935:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 936:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 3357              		.loc 1 936 0
 3358 0116 3B69     		ldr	r3, [r7, #16]	@ float
 3359 0118 5249     		ldr	r1, .L179+64
 3360 011a 1846     		mov	r0, r3
 3361 011c FFF7FEFF 		bl	__aeabi_fdiv
 3362 0120 0346     		mov	r3, r0
 3363 0122 1846     		mov	r0, r3
 3364 0124 FFF7FEFF 		bl	floorf
 3365 0128 0346     		mov	r3, r0
 3366 012a 1846     		mov	r0, r3
 3367 012c FFF7FEFF 		bl	__aeabi_f2d
 3368 0130 0446     		mov	r4, r0
 3369 0132 0D46     		mov	r5, r1
 3370 0134 3B69     		ldr	r3, [r7, #16]	@ float
 3371 0136 1846     		mov	r0, r3
 3372 0138 FFF7FEFF 		bl	__aeabi_f2d
 3373 013c 4FF00002 		mov	r2, #0
 3374 0140 494B     		ldr	r3, .L179+68
 3375 0142 FFF7FEFF 		bl	fmod
 3376 0146 4FF00002 		mov	r2, #0
 3377 014a 484B     		ldr	r3, .L179+72
 3378 014c FFF7FEFF 		bl	__aeabi_ddiv
 3379 0150 0246     		mov	r2, r0
 3380 0152 0B46     		mov	r3, r1
 3381 0154 2046     		mov	r0, r4
 3382 0156 2946     		mov	r1, r5
 3383 0158 FFF7FEFF 		bl	__aeabi_dadd
 3384 015c 0346     		mov	r3, r0
 3385 015e 0C46     		mov	r4, r1
 3386 0160 1846     		mov	r0, r3
 3387 0162 2146     		mov	r1, r4
 3388 0164 FFF7FEFF 		bl	__aeabi_d2f
 3389 0168 0346     		mov	r3, r0
 3390 016a 3B61     		str	r3, [r7, #16]	@ float
 937:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 3391              		.loc 1 937 0
 3392 016c FB68     		ldr	r3, [r7, #12]	@ float
 3393 016e 3D49     		ldr	r1, .L179+64
 3394 0170 1846     		mov	r0, r3
 3395 0172 FFF7FEFF 		bl	__aeabi_fdiv
 3396 0176 0346     		mov	r3, r0
 3397 0178 1846     		mov	r0, r3
 3398 017a FFF7FEFF 		bl	floorf
 3399 017e 0346     		mov	r3, r0
 3400 0180 1846     		mov	r0, r3
 3401 0182 FFF7FEFF 		bl	__aeabi_f2d
 3402 0186 0446     		mov	r4, r0
 3403 0188 0D46     		mov	r5, r1
 3404 018a FB68     		ldr	r3, [r7, #12]	@ float
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 83


 3405 018c 1846     		mov	r0, r3
 3406 018e FFF7FEFF 		bl	__aeabi_f2d
 3407 0192 4FF00002 		mov	r2, #0
 3408 0196 344B     		ldr	r3, .L179+68
 3409 0198 FFF7FEFF 		bl	fmod
 3410 019c 4FF00002 		mov	r2, #0
 3411 01a0 324B     		ldr	r3, .L179+72
 3412 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 3413 01a6 0246     		mov	r2, r0
 3414 01a8 0B46     		mov	r3, r1
 3415 01aa 2046     		mov	r0, r4
 3416 01ac 2946     		mov	r1, r5
 3417 01ae FFF7FEFF 		bl	__aeabi_dadd
 3418 01b2 0346     		mov	r3, r0
 3419 01b4 0C46     		mov	r4, r1
 3420 01b6 1846     		mov	r0, r3
 3421 01b8 2146     		mov	r1, r4
 3422 01ba FFF7FEFF 		bl	__aeabi_d2f
 3423 01be 0346     		mov	r3, r0
 3424 01c0 83F00043 		eor	r3, r3, #-2147483648
 3425 01c4 FB60     		str	r3, [r7, #12]	@ float
 938:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3426              		.loc 1 938 0
 3427 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3428 01c8 FB61     		str	r3, [r7, #28]	@ float
 939:modem.c       ****         gps.latitude = lat;
 3429              		.loc 1 939 0
 3430 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3431 01cc 7B61     		str	r3, [r7, #20]	@ float
 940:modem.c       ****         gps.longitude = lon;
 3432              		.loc 1 940 0
 3433 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3434 01d0 BB61     		str	r3, [r7, #24]	@ float
 941:modem.c       ****         gps.valid = 1;
 3435              		.loc 1 941 0
 3436 01d2 0123     		movs	r3, #1
 3437 01d4 87F82230 		strb	r3, [r7, #34]
 3438              	.L176:
 942:modem.c       ****     }
 943:modem.c       ****     
 944:modem.c       ****     // Disable LDO, just in case
 945:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3439              		.loc 1 945 0
 3440 01d8 4FF4FA62 		mov	r2, #2000
 3441 01dc 1249     		ldr	r1, .L179+4
 3442 01de 2448     		ldr	r0, .L179+76
 3443 01e0 FFF7FEFF 		bl	at_write_command
 946:modem.c       ****     
 947:modem.c       ****     // Flush modem's GPS data, just in case
 948:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3444              		.loc 1 948 0
 3445 01e4 4FF4FA62 		mov	r2, #2000
 3446 01e8 0F49     		ldr	r1, .L179+4
 3447 01ea 2248     		ldr	r0, .L179+80
 3448 01ec FFF7FEFF 		bl	at_write_command
 949:modem.c       ****     
 950:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 84


 951:modem.c       ****     
 952:modem.c       ****     
 953:modem.c       ****     
 954:modem.c       ****     /* Relevant to 3g modem, can ignore
 955:modem.c       ****     
 956:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 957:modem.c       ****     //AT$GPSQOS=50,50,100,0
 958:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 959:modem.c       ****     
 960:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 961:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 962:modem.c       ****     
 963:modem.c       ****     //unlock contedt, simnce its being used by modem
 964:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 965:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 966:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 967:modem.c       ****     
 968:modem.c       ****     //unlock contedt, simnce its being used by modem
 969:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 970:modem.c       ****     
 971:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 972:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 973:modem.c       ****     
 974:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 975:modem.c       ****    uint8 gps_status = 0;
 976:modem.c       ****     for(uint16 i=0;i<200;i++){
 977:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 978:modem.c       ****         if(gps_status){
 979:modem.c       ****             break;   
 980:modem.c       ****         }
 981:modem.c       ****   }
 982:modem.c       ****     
 983:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 984:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 985:modem.c       ****     if(gps_status){
 986:modem.c       ****         float lat,lon,alt = 0;
 987:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 988:modem.c       ****             gps.altitude = alt;
 989:modem.c       ****             gps.latitude = lat/60;
 990:modem.c       ****             gps.longitude = lon/60;
 991:modem.c       ****             gps.valid = 1;
 992:modem.c       ****         }
 993:modem.c       ****         
 994:modem.c       ****     }
 995:modem.c       ****     
 996:modem.c       ****     //turn off gps
 997:modem.c       ****     //AT$GPSP=0
 998:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 999:modem.c       ****     
1000:modem.c       ****     */
1001:modem.c       **** 
1002:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
1003:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3449              		.loc 1 1003 0
 3450 01f0 FFF7FEFF 		bl	getTimeStamp
 3451 01f4 0246     		mov	r2, r0
 3452 01f6 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 85


 3453 01f8 D31A     		subs	r3, r2, r3
 3454 01fa 3B63     		str	r3, [r7, #48]
1004:modem.c       ****     gps.time_to_lock = lock_time;
 3455              		.loc 1 1004 0
 3456 01fc 3B6B     		ldr	r3, [r7, #48]
 3457 01fe 9BB2     		uxth	r3, r3
 3458 0200 3B84     		strh	r3, [r7, #32]	@ movhi
1005:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3459              		.loc 1 1005 0
 3460 0202 3B8C     		ldrh	r3, [r7, #32]
 3461 0204 1A46     		mov	r2, r3
 3462 0206 1C49     		ldr	r1, .L179+84
 3463 0208 0020     		movs	r0, #0
 3464 020a FFF7FEFF 		bl	printNotif
1006:modem.c       ****     
1007:modem.c       ****     return gps;
 3465              		.loc 1 1007 0
 3466 020e 7B68     		ldr	r3, [r7, #4]
 3467 0210 1C46     		mov	r4, r3
 3468 0212 07F11403 		add	r3, r7, #20
 3469 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3470 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3471              	.L169:
1008:modem.c       ****     
1009:modem.c       **** }
 3472              		.loc 1 1009 0
 3473 021c 7868     		ldr	r0, [r7, #4]
 3474 021e 3837     		adds	r7, r7, #56
 3475              		.cfi_def_cfa_offset 16
 3476 0220 BD46     		mov	sp, r7
 3477              		.cfi_def_cfa_register 13
 3478              		@ sp needed
 3479 0222 B0BD     		pop	{r4, r5, r7, pc}
 3480              	.L180:
 3481              		.align	2
 3482              	.L179:
 3483 0224 00000000 		.word	modem_state
 3484 0228 00000000 		.word	.LC0
 3485 022c E0080000 		.word	.LC88
 3486 0230 F4080000 		.word	.LC89
 3487 0234 04090000 		.word	.LC90
 3488 0238 10090000 		.word	.LC91
 3489 023c 20090000 		.word	.LC92
 3490 0240 44090000 		.word	.LC93
 3491 0244 54090000 		.word	.LC94
 3492 0248 D8020000 		.word	.LC27
 3493 024c 64090000 		.word	.LC95
 3494 0250 7C090000 		.word	.LC96
 3495 0254 80090000 		.word	.LC97
 3496 0258 8C090000 		.word	.LC98
 3497 025c 00000000 		.word	uart_received_string
 3498 0260 98090000 		.word	.LC99
 3499 0264 0000C842 		.word	1120403456
 3500 0268 00005940 		.word	1079574528
 3501 026c 00004E40 		.word	1078853632
 3502 0270 B8090000 		.word	.LC100
 3503 0274 CC090000 		.word	.LC101
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 86


 3504 0278 D8090000 		.word	.LC102
 3505              		.cfi_endproc
 3506              	.LFE87:
 3507              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3508              		.text
 3509              	.Letext0:
 3510              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3511              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3512              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3513              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3514              		.file 6 "testing.h"
 3515              		.file 7 "data.h"
 3516              		.file 8 "modem.h"
 3517              		.file 9 "notoriOS.h"
 3518              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3519              		.file 11 "level_sensor.h"
 3520              		.file 12 "downstream_level_sensor.h"
 3521              		.file 13 "valve.h"
 3522              		.file 14 "App_LED.h"
 3523              		.section	.debug_info,"",%progbits
 3524              	.Ldebug_info0:
 3525 0000 B80D0000 		.4byte	0xdb8
 3526 0004 0400     		.2byte	0x4
 3527 0006 00000000 		.4byte	.Ldebug_abbrev0
 3528 000a 04       		.byte	0x4
 3529 000b 01       		.uleb128 0x1
 3530 000c A8000000 		.4byte	.LASF188
 3531 0010 0C       		.byte	0xc
 3532 0011 A4040000 		.4byte	.LASF189
 3533 0015 34000000 		.4byte	.LASF190
 3534 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3535 001d 00000000 		.4byte	0
 3536 0021 00000000 		.4byte	.Ldebug_line0
 3537 0025 02       		.uleb128 0x2
 3538 0026 01       		.byte	0x1
 3539 0027 06       		.byte	0x6
 3540 0028 BD010000 		.4byte	.LASF0
 3541 002c 03       		.uleb128 0x3
 3542 002d 7C000000 		.4byte	.LASF4
 3543 0031 02       		.byte	0x2
 3544 0032 1D       		.byte	0x1d
 3545 0033 37000000 		.4byte	0x37
 3546 0037 02       		.uleb128 0x2
 3547 0038 01       		.byte	0x1
 3548 0039 08       		.byte	0x8
 3549 003a C5060000 		.4byte	.LASF1
 3550 003e 02       		.uleb128 0x2
 3551 003f 02       		.byte	0x2
 3552 0040 05       		.byte	0x5
 3553 0041 DC040000 		.4byte	.LASF2
 3554 0045 02       		.uleb128 0x2
 3555 0046 02       		.byte	0x2
 3556 0047 07       		.byte	0x7
 3557 0048 13030000 		.4byte	.LASF3
 3558 004c 03       		.uleb128 0x3
 3559 004d F1040000 		.4byte	.LASF5
 3560 0051 02       		.byte	0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 87


 3561 0052 3F       		.byte	0x3f
 3562 0053 57000000 		.4byte	0x57
 3563 0057 02       		.uleb128 0x2
 3564 0058 04       		.byte	0x4
 3565 0059 05       		.byte	0x5
 3566 005a 6F020000 		.4byte	.LASF6
 3567 005e 03       		.uleb128 0x3
 3568 005f 36030000 		.4byte	.LASF7
 3569 0063 02       		.byte	0x2
 3570 0064 41       		.byte	0x41
 3571 0065 69000000 		.4byte	0x69
 3572 0069 02       		.uleb128 0x2
 3573 006a 04       		.byte	0x4
 3574 006b 07       		.byte	0x7
 3575 006c 07040000 		.4byte	.LASF8
 3576 0070 02       		.uleb128 0x2
 3577 0071 08       		.byte	0x8
 3578 0072 05       		.byte	0x5
 3579 0073 AF010000 		.4byte	.LASF9
 3580 0077 02       		.uleb128 0x2
 3581 0078 08       		.byte	0x8
 3582 0079 07       		.byte	0x7
 3583 007a 43010000 		.4byte	.LASF10
 3584 007e 04       		.uleb128 0x4
 3585 007f 04       		.byte	0x4
 3586 0080 05       		.byte	0x5
 3587 0081 696E7400 		.ascii	"int\000"
 3588 0085 02       		.uleb128 0x2
 3589 0086 04       		.byte	0x4
 3590 0087 07       		.byte	0x7
 3591 0088 E1070000 		.4byte	.LASF11
 3592 008c 03       		.uleb128 0x3
 3593 008d 9A090000 		.4byte	.LASF12
 3594 0091 03       		.byte	0x3
 3595 0092 18       		.byte	0x18
 3596 0093 2C000000 		.4byte	0x2c
 3597 0097 03       		.uleb128 0x3
 3598 0098 BD060000 		.4byte	.LASF13
 3599 009c 03       		.byte	0x3
 3600 009d 2C       		.byte	0x2c
 3601 009e 4C000000 		.4byte	0x4c
 3602 00a2 03       		.uleb128 0x3
 3603 00a3 DD080000 		.4byte	.LASF14
 3604 00a7 03       		.byte	0x3
 3605 00a8 30       		.byte	0x30
 3606 00a9 5E000000 		.4byte	0x5e
 3607 00ad 05       		.uleb128 0x5
 3608 00ae AD020000 		.4byte	.LASF15
 3609 00b2 04       		.byte	0x4
 3610 00b3 9201     		.2byte	0x192
 3611 00b5 37000000 		.4byte	0x37
 3612 00b9 05       		.uleb128 0x5
 3613 00ba 17000000 		.4byte	.LASF16
 3614 00be 04       		.byte	0x4
 3615 00bf 9301     		.2byte	0x193
 3616 00c1 45000000 		.4byte	0x45
 3617 00c5 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 88


 3618 00c6 26030000 		.4byte	.LASF17
 3619 00ca 04       		.byte	0x4
 3620 00cb 9401     		.2byte	0x194
 3621 00cd 69000000 		.4byte	0x69
 3622 00d1 05       		.uleb128 0x5
 3623 00d2 FA050000 		.4byte	.LASF18
 3624 00d6 04       		.byte	0x4
 3625 00d7 9601     		.2byte	0x196
 3626 00d9 3E000000 		.4byte	0x3e
 3627 00dd 05       		.uleb128 0x5
 3628 00de D2020000 		.4byte	.LASF19
 3629 00e2 04       		.byte	0x4
 3630 00e3 9701     		.2byte	0x197
 3631 00e5 57000000 		.4byte	0x57
 3632 00e9 02       		.uleb128 0x2
 3633 00ea 04       		.byte	0x4
 3634 00eb 04       		.byte	0x4
 3635 00ec 67060000 		.4byte	.LASF20
 3636 00f0 02       		.uleb128 0x2
 3637 00f1 08       		.byte	0x8
 3638 00f2 04       		.byte	0x4
 3639 00f3 1D0A0000 		.4byte	.LASF21
 3640 00f7 02       		.uleb128 0x2
 3641 00f8 01       		.byte	0x1
 3642 00f9 08       		.byte	0x8
 3643 00fa C8070000 		.4byte	.LASF22
 3644 00fe 02       		.uleb128 0x2
 3645 00ff 08       		.byte	0x8
 3646 0100 04       		.byte	0x4
 3647 0101 BC070000 		.4byte	.LASF23
 3648 0105 02       		.uleb128 0x2
 3649 0106 04       		.byte	0x4
 3650 0107 07       		.byte	0x7
 3651 0108 A7050000 		.4byte	.LASF24
 3652 010c 06       		.uleb128 0x6
 3653 010d 04       		.byte	0x4
 3654 010e F7000000 		.4byte	0xf7
 3655 0112 06       		.uleb128 0x6
 3656 0113 04       		.byte	0x4
 3657 0114 18010000 		.4byte	0x118
 3658 0118 07       		.uleb128 0x7
 3659 0119 F7000000 		.4byte	0xf7
 3660 011d 08       		.uleb128 0x8
 3661 011e F7000000 		.4byte	0xf7
 3662 0122 2D010000 		.4byte	0x12d
 3663 0126 09       		.uleb128 0x9
 3664 0127 05010000 		.4byte	0x105
 3665 012b 17       		.byte	0x17
 3666 012c 00       		.byte	0
 3667 012d 0A       		.uleb128 0xa
 3668 012e 746D00   		.ascii	"tm\000"
 3669 0131 24       		.byte	0x24
 3670 0132 05       		.byte	0x5
 3671 0133 21       		.byte	0x21
 3672 0134 A5010000 		.4byte	0x1a5
 3673 0138 0B       		.uleb128 0xb
 3674 0139 E6080000 		.4byte	.LASF25
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 89


 3675 013d 05       		.byte	0x5
 3676 013e 23       		.byte	0x23
 3677 013f 7E000000 		.4byte	0x7e
 3678 0143 00       		.byte	0
 3679 0144 0B       		.uleb128 0xb
 3680 0145 A0050000 		.4byte	.LASF26
 3681 0149 05       		.byte	0x5
 3682 014a 24       		.byte	0x24
 3683 014b 7E000000 		.4byte	0x7e
 3684 014f 04       		.byte	0x4
 3685 0150 0B       		.uleb128 0xb
 3686 0151 24000000 		.4byte	.LASF27
 3687 0155 05       		.byte	0x5
 3688 0156 25       		.byte	0x25
 3689 0157 7E000000 		.4byte	0x7e
 3690 015b 08       		.byte	0x8
 3691 015c 0B       		.uleb128 0xb
 3692 015d B2080000 		.4byte	.LASF28
 3693 0161 05       		.byte	0x5
 3694 0162 26       		.byte	0x26
 3695 0163 7E000000 		.4byte	0x7e
 3696 0167 0C       		.byte	0xc
 3697 0168 0B       		.uleb128 0xb
 3698 0169 58030000 		.4byte	.LASF29
 3699 016d 05       		.byte	0x5
 3700 016e 27       		.byte	0x27
 3701 016f 7E000000 		.4byte	0x7e
 3702 0173 10       		.byte	0x10
 3703 0174 0B       		.uleb128 0xb
 3704 0175 CF030000 		.4byte	.LASF30
 3705 0179 05       		.byte	0x5
 3706 017a 28       		.byte	0x28
 3707 017b 7E000000 		.4byte	0x7e
 3708 017f 14       		.byte	0x14
 3709 0180 0B       		.uleb128 0xb
 3710 0181 78070000 		.4byte	.LASF31
 3711 0185 05       		.byte	0x5
 3712 0186 29       		.byte	0x29
 3713 0187 7E000000 		.4byte	0x7e
 3714 018b 18       		.byte	0x18
 3715 018c 0B       		.uleb128 0xb
 3716 018d 2C000000 		.4byte	.LASF32
 3717 0191 05       		.byte	0x5
 3718 0192 2A       		.byte	0x2a
 3719 0193 7E000000 		.4byte	0x7e
 3720 0197 1C       		.byte	0x1c
 3721 0198 0B       		.uleb128 0xb
 3722 0199 6B040000 		.4byte	.LASF33
 3723 019d 05       		.byte	0x5
 3724 019e 2B       		.byte	0x2b
 3725 019f 7E000000 		.4byte	0x7e
 3726 01a3 20       		.byte	0x20
 3727 01a4 00       		.byte	0
 3728 01a5 0C       		.uleb128 0xc
 3729 01a6 8101     		.2byte	0x181
 3730 01a8 06       		.byte	0x6
 3731 01a9 0A       		.byte	0xa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 90


 3732 01aa D3010000 		.4byte	0x1d3
 3733 01ae 0B       		.uleb128 0xb
 3734 01af F0050000 		.4byte	.LASF34
 3735 01b3 06       		.byte	0x6
 3736 01b4 0C       		.byte	0xc
 3737 01b5 D3010000 		.4byte	0x1d3
 3738 01b9 00       		.byte	0
 3739 01ba 0B       		.uleb128 0xb
 3740 01bb 2C090000 		.4byte	.LASF35
 3741 01bf 06       		.byte	0x6
 3742 01c0 0D       		.byte	0xd
 3743 01c1 AD000000 		.4byte	0xad
 3744 01c5 80       		.byte	0x80
 3745 01c6 0B       		.uleb128 0xb
 3746 01c7 3B070000 		.4byte	.LASF36
 3747 01cb 06       		.byte	0x6
 3748 01cc 0F       		.byte	0xf
 3749 01cd E3010000 		.4byte	0x1e3
 3750 01d1 81       		.byte	0x81
 3751 01d2 00       		.byte	0
 3752 01d3 08       		.uleb128 0x8
 3753 01d4 F7000000 		.4byte	0xf7
 3754 01d8 E3010000 		.4byte	0x1e3
 3755 01dc 09       		.uleb128 0x9
 3756 01dd 05010000 		.4byte	0x105
 3757 01e1 7F       		.byte	0x7f
 3758 01e2 00       		.byte	0
 3759 01e3 08       		.uleb128 0x8
 3760 01e4 F7000000 		.4byte	0xf7
 3761 01e8 F3010000 		.4byte	0x1f3
 3762 01ec 09       		.uleb128 0x9
 3763 01ed 05010000 		.4byte	0x105
 3764 01f1 FF       		.byte	0xff
 3765 01f2 00       		.byte	0
 3766 01f3 03       		.uleb128 0x3
 3767 01f4 23070000 		.4byte	.LASF37
 3768 01f8 06       		.byte	0x6
 3769 01f9 10       		.byte	0x10
 3770 01fa A5010000 		.4byte	0x1a5
 3771 01fe 0D       		.uleb128 0xd
 3772 01ff 2C       		.byte	0x2c
 3773 0200 07       		.byte	0x7
 3774 0201 14       		.byte	0x14
 3775 0202 2B020000 		.4byte	0x22b
 3776 0206 0E       		.uleb128 0xe
 3777 0207 6B657900 		.ascii	"key\000"
 3778 020b 07       		.byte	0x7
 3779 020c 15       		.byte	0x15
 3780 020d 2B020000 		.4byte	0x22b
 3781 0211 00       		.byte	0
 3782 0212 0B       		.uleb128 0xb
 3783 0213 1E000000 		.4byte	.LASF38
 3784 0217 07       		.byte	0x7
 3785 0218 16       		.byte	0x16
 3786 0219 2B020000 		.4byte	0x22b
 3787 021d 14       		.byte	0x14
 3788 021e 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 91


 3789 021f 47040000 		.4byte	.LASF39
 3790 0223 07       		.byte	0x7
 3791 0224 17       		.byte	0x17
 3792 0225 DD000000 		.4byte	0xdd
 3793 0229 28       		.byte	0x28
 3794 022a 00       		.byte	0
 3795 022b 08       		.uleb128 0x8
 3796 022c F7000000 		.4byte	0xf7
 3797 0230 3B020000 		.4byte	0x23b
 3798 0234 09       		.uleb128 0x9
 3799 0235 05010000 		.4byte	0x105
 3800 0239 13       		.byte	0x13
 3801 023a 00       		.byte	0
 3802 023b 03       		.uleb128 0x3
 3803 023c F1030000 		.4byte	.LASF40
 3804 0240 07       		.byte	0x7
 3805 0241 19       		.byte	0x19
 3806 0242 FE010000 		.4byte	0x1fe
 3807 0246 0D       		.uleb128 0xd
 3808 0247 3C       		.byte	0x3c
 3809 0248 08       		.byte	0x8
 3810 0249 36       		.byte	0x36
 3811 024a 73020000 		.4byte	0x273
 3812 024e 0B       		.uleb128 0xb
 3813 024f AB080000 		.4byte	.LASF41
 3814 0253 08       		.byte	0x8
 3815 0254 37       		.byte	0x37
 3816 0255 2B020000 		.4byte	0x22b
 3817 0259 00       		.byte	0
 3818 025a 0B       		.uleb128 0xb
 3819 025b FE070000 		.4byte	.LASF42
 3820 025f 08       		.byte	0x8
 3821 0260 38       		.byte	0x38
 3822 0261 2B020000 		.4byte	0x22b
 3823 0265 14       		.byte	0x14
 3824 0266 0B       		.uleb128 0xb
 3825 0267 36070000 		.4byte	.LASF43
 3826 026b 08       		.byte	0x8
 3827 026c 39       		.byte	0x39
 3828 026d 2B020000 		.4byte	0x22b
 3829 0271 28       		.byte	0x28
 3830 0272 00       		.byte	0
 3831 0273 03       		.uleb128 0x3
 3832 0274 12080000 		.4byte	.LASF44
 3833 0278 08       		.byte	0x8
 3834 0279 3B       		.byte	0x3b
 3835 027a 46020000 		.4byte	0x246
 3836 027e 0D       		.uleb128 0xd
 3837 027f 20       		.byte	0x20
 3838 0280 08       		.byte	0x8
 3839 0281 3D       		.byte	0x3d
 3840 0282 E7020000 		.4byte	0x2e7
 3841 0286 0B       		.uleb128 0xb
 3842 0287 78020000 		.4byte	.LASF45
 3843 028b 08       		.byte	0x8
 3844 028c 3E       		.byte	0x3e
 3845 028d 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 92


 3846 0291 00       		.byte	0
 3847 0292 0E       		.uleb128 0xe
 3848 0293 62657200 		.ascii	"ber\000"
 3849 0297 08       		.byte	0x8
 3850 0298 3F       		.byte	0x3f
 3851 0299 7E000000 		.4byte	0x7e
 3852 029d 04       		.byte	0x4
 3853 029e 0B       		.uleb128 0xb
 3854 029f 04070000 		.4byte	.LASF46
 3855 02a3 08       		.byte	0x8
 3856 02a4 40       		.byte	0x40
 3857 02a5 7E000000 		.4byte	0x7e
 3858 02a9 08       		.byte	0x8
 3859 02aa 0B       		.uleb128 0xb
 3860 02ab C9010000 		.4byte	.LASF47
 3861 02af 08       		.byte	0x8
 3862 02b0 41       		.byte	0x41
 3863 02b1 7E000000 		.4byte	0x7e
 3864 02b5 0C       		.byte	0xc
 3865 02b6 0B       		.uleb128 0xb
 3866 02b7 E9060000 		.4byte	.LASF48
 3867 02bb 08       		.byte	0x8
 3868 02bc 42       		.byte	0x42
 3869 02bd 7E000000 		.4byte	0x7e
 3870 02c1 10       		.byte	0x10
 3871 02c2 0B       		.uleb128 0xb
 3872 02c3 42070000 		.4byte	.LASF49
 3873 02c7 08       		.byte	0x8
 3874 02c8 43       		.byte	0x43
 3875 02c9 7E000000 		.4byte	0x7e
 3876 02cd 14       		.byte	0x14
 3877 02ce 0B       		.uleb128 0xb
 3878 02cf EB010000 		.4byte	.LASF50
 3879 02d3 08       		.byte	0x8
 3880 02d4 44       		.byte	0x44
 3881 02d5 7E000000 		.4byte	0x7e
 3882 02d9 18       		.byte	0x18
 3883 02da 0B       		.uleb128 0xb
 3884 02db BF040000 		.4byte	.LASF51
 3885 02df 08       		.byte	0x8
 3886 02e0 45       		.byte	0x45
 3887 02e1 7E000000 		.4byte	0x7e
 3888 02e5 1C       		.byte	0x1c
 3889 02e6 00       		.byte	0
 3890 02e7 03       		.uleb128 0x3
 3891 02e8 47070000 		.4byte	.LASF52
 3892 02ec 08       		.byte	0x8
 3893 02ed 47       		.byte	0x47
 3894 02ee 7E020000 		.4byte	0x27e
 3895 02f2 0D       		.uleb128 0xd
 3896 02f3 10       		.byte	0x10
 3897 02f4 08       		.byte	0x8
 3898 02f5 49       		.byte	0x49
 3899 02f6 37030000 		.4byte	0x337
 3900 02fa 0B       		.uleb128 0xb
 3901 02fb E7050000 		.4byte	.LASF53
 3902 02ff 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 93


 3903 0300 4A       		.byte	0x4a
 3904 0301 E9000000 		.4byte	0xe9
 3905 0305 00       		.byte	0
 3906 0306 0B       		.uleb128 0xb
 3907 0307 9E000000 		.4byte	.LASF54
 3908 030b 08       		.byte	0x8
 3909 030c 4B       		.byte	0x4b
 3910 030d E9000000 		.4byte	0xe9
 3911 0311 04       		.byte	0x4
 3912 0312 0B       		.uleb128 0xb
 3913 0313 A4020000 		.4byte	.LASF55
 3914 0317 08       		.byte	0x8
 3915 0318 4C       		.byte	0x4c
 3916 0319 E9000000 		.4byte	0xe9
 3917 031d 08       		.byte	0x8
 3918 031e 0B       		.uleb128 0xb
 3919 031f 51040000 		.4byte	.LASF56
 3920 0323 08       		.byte	0x8
 3921 0324 4D       		.byte	0x4d
 3922 0325 B9000000 		.4byte	0xb9
 3923 0329 0C       		.byte	0xc
 3924 032a 0B       		.uleb128 0xb
 3925 032b BA080000 		.4byte	.LASF57
 3926 032f 08       		.byte	0x8
 3927 0330 4E       		.byte	0x4e
 3928 0331 AD000000 		.4byte	0xad
 3929 0335 0E       		.byte	0xe
 3930 0336 00       		.byte	0
 3931 0337 03       		.uleb128 0x3
 3932 0338 1F080000 		.4byte	.LASF58
 3933 033c 08       		.byte	0x8
 3934 033d 50       		.byte	0x50
 3935 033e F2020000 		.4byte	0x2f2
 3936 0342 0D       		.uleb128 0xd
 3937 0343 09       		.byte	0x9
 3938 0344 08       		.byte	0x8
 3939 0345 53       		.byte	0x53
 3940 0346 B7030000 		.4byte	0x3b7
 3941 034a 0B       		.uleb128 0xb
 3942 034b D8020000 		.4byte	.LASF59
 3943 034f 08       		.byte	0x8
 3944 0350 55       		.byte	0x55
 3945 0351 AD000000 		.4byte	0xad
 3946 0355 00       		.byte	0
 3947 0356 0B       		.uleb128 0xb
 3948 0357 9B060000 		.4byte	.LASF60
 3949 035b 08       		.byte	0x8
 3950 035c 57       		.byte	0x57
 3951 035d B7030000 		.4byte	0x3b7
 3952 0361 01       		.byte	0x1
 3953 0362 0B       		.uleb128 0xb
 3954 0363 37080000 		.4byte	.LASF61
 3955 0367 08       		.byte	0x8
 3956 0368 59       		.byte	0x59
 3957 0369 AD000000 		.4byte	0xad
 3958 036d 02       		.byte	0x2
 3959 036e 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 94


 3960 036f EE060000 		.4byte	.LASF62
 3961 0373 08       		.byte	0x8
 3962 0374 5B       		.byte	0x5b
 3963 0375 AD000000 		.4byte	0xad
 3964 0379 03       		.byte	0x3
 3965 037a 0B       		.uleb128 0xb
 3966 037b 8A030000 		.4byte	.LASF63
 3967 037f 08       		.byte	0x8
 3968 0380 5E       		.byte	0x5e
 3969 0381 AD000000 		.4byte	0xad
 3970 0385 04       		.byte	0x4
 3971 0386 0B       		.uleb128 0xb
 3972 0387 7E090000 		.4byte	.LASF64
 3973 038b 08       		.byte	0x8
 3974 038c 63       		.byte	0x63
 3975 038d AD000000 		.4byte	0xad
 3976 0391 05       		.byte	0x5
 3977 0392 0B       		.uleb128 0xb
 3978 0393 97070000 		.4byte	.LASF65
 3979 0397 08       		.byte	0x8
 3980 0398 65       		.byte	0x65
 3981 0399 AD000000 		.4byte	0xad
 3982 039d 06       		.byte	0x6
 3983 039e 0B       		.uleb128 0xb
 3984 039f 61090000 		.4byte	.LASF66
 3985 03a3 08       		.byte	0x8
 3986 03a4 66       		.byte	0x66
 3987 03a5 AD000000 		.4byte	0xad
 3988 03a9 07       		.byte	0x7
 3989 03aa 0B       		.uleb128 0xb
 3990 03ab CE090000 		.4byte	.LASF67
 3991 03af 08       		.byte	0x8
 3992 03b0 67       		.byte	0x67
 3993 03b1 AD000000 		.4byte	0xad
 3994 03b5 08       		.byte	0x8
 3995 03b6 00       		.byte	0
 3996 03b7 02       		.uleb128 0x2
 3997 03b8 01       		.byte	0x1
 3998 03b9 02       		.byte	0x2
 3999 03ba B7060000 		.4byte	.LASF68
 4000 03be 03       		.uleb128 0x3
 4001 03bf 6B050000 		.4byte	.LASF69
 4002 03c3 08       		.byte	0x8
 4003 03c4 69       		.byte	0x69
 4004 03c5 42030000 		.4byte	0x342
 4005 03c9 0D       		.uleb128 0xd
 4006 03ca 06       		.byte	0x6
 4007 03cb 09       		.byte	0x9
 4008 03cc 30       		.byte	0x30
 4009 03cd 02040000 		.4byte	0x402
 4010 03d1 0B       		.uleb128 0xb
 4011 03d2 CE010000 		.4byte	.LASF70
 4012 03d6 09       		.byte	0x9
 4013 03d7 32       		.byte	0x32
 4014 03d8 B9000000 		.4byte	0xb9
 4015 03dc 00       		.byte	0
 4016 03dd 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 95


 4017 03de 7E020000 		.4byte	.LASF71
 4018 03e2 09       		.byte	0x9
 4019 03e3 33       		.byte	0x33
 4020 03e4 D1000000 		.4byte	0xd1
 4021 03e8 02       		.byte	0x2
 4022 03e9 0B       		.uleb128 0xb
 4023 03ea C0090000 		.4byte	.LASF72
 4024 03ee 09       		.byte	0x9
 4025 03ef 34       		.byte	0x34
 4026 03f0 AD000000 		.4byte	0xad
 4027 03f4 04       		.byte	0x4
 4028 03f5 0B       		.uleb128 0xb
 4029 03f6 86000000 		.4byte	.LASF73
 4030 03fa 09       		.byte	0x9
 4031 03fb 35       		.byte	0x35
 4032 03fc AD000000 		.4byte	0xad
 4033 0400 05       		.byte	0x5
 4034 0401 00       		.byte	0
 4035 0402 03       		.uleb128 0x3
 4036 0403 B1060000 		.4byte	.LASF74
 4037 0407 09       		.byte	0x9
 4038 0408 38       		.byte	0x38
 4039 0409 0D040000 		.4byte	0x40d
 4040 040d 0F       		.uleb128 0xf
 4041 040e C9030000 		.4byte	0x3c9
 4042 0412 0D       		.uleb128 0xd
 4043 0413 1C       		.byte	0x1c
 4044 0414 09       		.byte	0x9
 4045 0415 3B       		.byte	0x3b
 4046 0416 33040000 		.4byte	0x433
 4047 041a 0B       		.uleb128 0xb
 4048 041b 74040000 		.4byte	.LASF75
 4049 041f 09       		.byte	0x9
 4050 0420 3D       		.byte	0x3d
 4051 0421 33040000 		.4byte	0x433
 4052 0425 00       		.byte	0
 4053 0426 0B       		.uleb128 0xb
 4054 0427 87040000 		.4byte	.LASF76
 4055 042b 09       		.byte	0x9
 4056 042c 3E       		.byte	0x3e
 4057 042d 1D010000 		.4byte	0x11d
 4058 0431 04       		.byte	0x4
 4059 0432 00       		.byte	0
 4060 0433 06       		.uleb128 0x6
 4061 0434 04       		.byte	0x4
 4062 0435 73020000 		.4byte	0x273
 4063 0439 03       		.uleb128 0x3
 4064 043a 60050000 		.4byte	.LASF77
 4065 043e 09       		.byte	0x9
 4066 043f 40       		.byte	0x40
 4067 0440 12040000 		.4byte	0x412
 4068 0444 0D       		.uleb128 0xd
 4069 0445 68       		.byte	0x68
 4070 0446 09       		.byte	0x9
 4071 0447 46       		.byte	0x46
 4072 0448 65040000 		.4byte	0x465
 4073 044c 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 96


 4074 044d 7F040000 		.4byte	.LASF78
 4075 0451 09       		.byte	0x9
 4076 0452 4B       		.byte	0x4b
 4077 0453 65040000 		.4byte	0x465
 4078 0457 00       		.byte	0
 4079 0458 0B       		.uleb128 0xb
 4080 0459 63040000 		.4byte	.LASF79
 4081 045d 09       		.byte	0x9
 4082 045e 4C       		.byte	0x4c
 4083 045f 7E000000 		.4byte	0x7e
 4084 0463 64       		.byte	0x64
 4085 0464 00       		.byte	0
 4086 0465 08       		.uleb128 0x8
 4087 0466 F7000000 		.4byte	0xf7
 4088 046a 75040000 		.4byte	0x475
 4089 046e 09       		.uleb128 0x9
 4090 046f 05010000 		.4byte	0x105
 4091 0473 63       		.byte	0x63
 4092 0474 00       		.byte	0
 4093 0475 03       		.uleb128 0x3
 4094 0476 8B090000 		.4byte	.LASF80
 4095 047a 09       		.byte	0x9
 4096 047b 52       		.byte	0x52
 4097 047c 44040000 		.4byte	0x444
 4098 0480 10       		.uleb128 0x10
 4099 0481 A4060000 		.4byte	.LASF112
 4100 0485 01       		.byte	0x1
 4101 0486 12       		.byte	0x12
 4102 0487 00000000 		.4byte	.LFB64
 4103 048b 44000000 		.4byte	.LFE64-.LFB64
 4104 048f 01       		.uleb128 0x1
 4105 0490 9C       		.byte	0x9c
 4106 0491 11       		.uleb128 0x11
 4107 0492 6D060000 		.4byte	.LASF81
 4108 0496 01       		.byte	0x1
 4109 0497 1C       		.byte	0x1c
 4110 0498 00000000 		.4byte	.LFB65
 4111 049c 6C000000 		.4byte	.LFE65-.LFB65
 4112 04a0 01       		.uleb128 0x1
 4113 04a1 9C       		.byte	0x9c
 4114 04a2 11       		.uleb128 0x11
 4115 04a3 89080000 		.4byte	.LASF82
 4116 04a7 01       		.byte	0x1
 4117 04a8 36       		.byte	0x36
 4118 04a9 00000000 		.4byte	.LFB66
 4119 04ad 32000000 		.4byte	.LFE66-.LFB66
 4120 04b1 01       		.uleb128 0x1
 4121 04b2 9C       		.byte	0x9c
 4122 04b3 11       		.uleb128 0x11
 4123 04b4 C0080000 		.4byte	.LASF83
 4124 04b8 01       		.byte	0x1
 4125 04b9 46       		.byte	0x46
 4126 04ba 00000000 		.4byte	.LFB67
 4127 04be 20000000 		.4byte	.LFE67-.LFB67
 4128 04c2 01       		.uleb128 0x1
 4129 04c3 9C       		.byte	0x9c
 4130 04c4 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 97


 4131 04c5 0C0A0000 		.4byte	.LASF84
 4132 04c9 01       		.byte	0x1
 4133 04ca 4F       		.byte	0x4f
 4134 04cb 00000000 		.4byte	.LFB68
 4135 04cf 40000000 		.4byte	.LFE68-.LFB68
 4136 04d3 01       		.uleb128 0x1
 4137 04d4 9C       		.byte	0x9c
 4138 04d5 12       		.uleb128 0x12
 4139 04d6 95040000 		.4byte	.LASF98
 4140 04da 01       		.byte	0x1
 4141 04db 61       		.byte	0x61
 4142 04dc AD000000 		.4byte	0xad
 4143 04e0 00000000 		.4byte	.LFB69
 4144 04e4 DC000000 		.4byte	.LFE69-.LFB69
 4145 04e8 01       		.uleb128 0x1
 4146 04e9 9C       		.byte	0x9c
 4147 04ea 49050000 		.4byte	0x549
 4148 04ee 13       		.uleb128 0x13
 4149 04ef AE090000 		.4byte	.LASF85
 4150 04f3 01       		.byte	0x1
 4151 04f4 6A       		.byte	0x6a
 4152 04f5 AD000000 		.4byte	0xad
 4153 04f9 02       		.uleb128 0x2
 4154 04fa 91       		.byte	0x91
 4155 04fb 77       		.sleb128 -9
 4156 04fc 13       		.uleb128 0x13
 4157 04fd B7090000 		.4byte	.LASF86
 4158 0501 01       		.byte	0x1
 4159 0502 6B       		.byte	0x6b
 4160 0503 AD000000 		.4byte	0xad
 4161 0507 02       		.uleb128 0x2
 4162 0508 91       		.byte	0x91
 4163 0509 74       		.sleb128 -12
 4164 050a 13       		.uleb128 0x13
 4165 050b D9090000 		.4byte	.LASF87
 4166 050f 01       		.byte	0x1
 4167 0510 6D       		.byte	0x6d
 4168 0511 57000000 		.4byte	0x57
 4169 0515 02       		.uleb128 0x2
 4170 0516 91       		.byte	0x91
 4171 0517 70       		.sleb128 -16
 4172 0518 14       		.uleb128 0x14
 4173 0519 26000000 		.4byte	.LBB2
 4174 051d 4A000000 		.4byte	.LBE2-.LBB2
 4175 0521 13       		.uleb128 0x13
 4176 0522 B7090000 		.4byte	.LASF86
 4177 0526 01       		.byte	0x1
 4178 0527 70       		.byte	0x70
 4179 0528 AD000000 		.4byte	0xad
 4180 052c 02       		.uleb128 0x2
 4181 052d 91       		.byte	0x91
 4182 052e 76       		.sleb128 -10
 4183 052f 14       		.uleb128 0x14
 4184 0530 2C000000 		.4byte	.LBB3
 4185 0534 2A000000 		.4byte	.LBE3-.LBB3
 4186 0538 13       		.uleb128 0x13
 4187 0539 FD030000 		.4byte	.LASF88
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 98


 4188 053d 01       		.byte	0x1
 4189 053e 72       		.byte	0x72
 4190 053f AD000000 		.4byte	0xad
 4191 0543 02       		.uleb128 0x2
 4192 0544 91       		.byte	0x91
 4193 0545 75       		.sleb128 -11
 4194 0546 00       		.byte	0
 4195 0547 00       		.byte	0
 4196 0548 00       		.byte	0
 4197 0549 11       		.uleb128 0x11
 4198 054a 80070000 		.4byte	.LASF89
 4199 054e 01       		.byte	0x1
 4200 054f 93       		.byte	0x93
 4201 0550 00000000 		.4byte	.LFB70
 4202 0554 1C000000 		.4byte	.LFE70-.LFB70
 4203 0558 01       		.uleb128 0x1
 4204 0559 9C       		.byte	0x9c
 4205 055a 11       		.uleb128 0x11
 4206 055b 55070000 		.4byte	.LASF90
 4207 055f 01       		.byte	0x1
 4208 0560 9B       		.byte	0x9b
 4209 0561 00000000 		.4byte	.LFB71
 4210 0565 28000000 		.4byte	.LFE71-.LFB71
 4211 0569 01       		.uleb128 0x1
 4212 056a 9C       		.byte	0x9c
 4213 056b 15       		.uleb128 0x15
 4214 056c 4F050000 		.4byte	.LASF102
 4215 0570 01       		.byte	0x1
 4216 0571 A6       		.byte	0xa6
 4217 0572 8C000000 		.4byte	0x8c
 4218 0576 00000000 		.4byte	.LFB72
 4219 057a C8000000 		.4byte	.LFE72-.LFB72
 4220 057e 01       		.uleb128 0x1
 4221 057f 9C       		.byte	0x9c
 4222 0580 FD050000 		.4byte	0x5fd
 4223 0584 16       		.uleb128 0x16
 4224 0585 4D060000 		.4byte	.LASF91
 4225 0589 01       		.byte	0x1
 4226 058a A6       		.byte	0xa6
 4227 058b 0C010000 		.4byte	0x10c
 4228 058f 02       		.uleb128 0x2
 4229 0590 91       		.byte	0x91
 4230 0591 5C       		.sleb128 -36
 4231 0592 16       		.uleb128 0x16
 4232 0593 E3090000 		.4byte	.LASF92
 4233 0597 01       		.byte	0x1
 4234 0598 A6       		.byte	0xa6
 4235 0599 0C010000 		.4byte	0x10c
 4236 059d 02       		.uleb128 0x2
 4237 059e 91       		.byte	0x91
 4238 059f 58       		.sleb128 -40
 4239 05a0 16       		.uleb128 0x16
 4240 05a1 28040000 		.4byte	.LASF93
 4241 05a5 01       		.byte	0x1
 4242 05a6 A6       		.byte	0xa6
 4243 05a7 A2000000 		.4byte	0xa2
 4244 05ab 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 99


 4245 05ac 91       		.byte	0x91
 4246 05ad 54       		.sleb128 -44
 4247 05ae 13       		.uleb128 0x13
 4248 05af 1C050000 		.4byte	.LASF94
 4249 05b3 01       		.byte	0x1
 4250 05b4 A8       		.byte	0xa8
 4251 05b5 C5000000 		.4byte	0xc5
 4252 05b9 02       		.uleb128 0x2
 4253 05ba 91       		.byte	0x91
 4254 05bb 74       		.sleb128 -12
 4255 05bc 14       		.uleb128 0x14
 4256 05bd 16000000 		.4byte	.LBB4
 4257 05c1 88000000 		.4byte	.LBE4-.LBB4
 4258 05c5 13       		.uleb128 0x13
 4259 05c6 56060000 		.4byte	.LASF95
 4260 05ca 01       		.byte	0x1
 4261 05cb AC       		.byte	0xac
 4262 05cc 0C010000 		.4byte	0x10c
 4263 05d0 02       		.uleb128 0x2
 4264 05d1 91       		.byte	0x91
 4265 05d2 64       		.sleb128 -28
 4266 05d3 13       		.uleb128 0x13
 4267 05d4 E3060000 		.4byte	.LASF96
 4268 05d8 01       		.byte	0x1
 4269 05d9 AD       		.byte	0xad
 4270 05da A2000000 		.4byte	0xa2
 4271 05de 02       		.uleb128 0x2
 4272 05df 91       		.byte	0x91
 4273 05e0 6C       		.sleb128 -20
 4274 05e1 17       		.uleb128 0x17
 4275 05e2 6900     		.ascii	"i\000"
 4276 05e4 01       		.byte	0x1
 4277 05e5 AE       		.byte	0xae
 4278 05e6 A2000000 		.4byte	0xa2
 4279 05ea 02       		.uleb128 0x2
 4280 05eb 91       		.byte	0x91
 4281 05ec 70       		.sleb128 -16
 4282 05ed 13       		.uleb128 0x13
 4283 05ee 2D030000 		.4byte	.LASF97
 4284 05f2 01       		.byte	0x1
 4285 05f3 AE       		.byte	0xae
 4286 05f4 A2000000 		.4byte	0xa2
 4287 05f8 02       		.uleb128 0x2
 4288 05f9 91       		.byte	0x91
 4289 05fa 68       		.sleb128 -24
 4290 05fb 00       		.byte	0
 4291 05fc 00       		.byte	0
 4292 05fd 12       		.uleb128 0x12
 4293 05fe 22060000 		.4byte	.LASF99
 4294 0602 01       		.byte	0x1
 4295 0603 DA       		.byte	0xda
 4296 0604 F3010000 		.4byte	0x1f3
 4297 0608 00000000 		.4byte	.LFB73
 4298 060c 00010000 		.4byte	.LFE73-.LFB73
 4299 0610 01       		.uleb128 0x1
 4300 0611 9C       		.byte	0x9c
 4301 0612 54060000 		.4byte	0x654
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 100


 4302 0616 13       		.uleb128 0x13
 4303 0617 72010000 		.4byte	.LASF100
 4304 061b 01       		.byte	0x1
 4305 061c DC       		.byte	0xdc
 4306 061d F3010000 		.4byte	0x1f3
 4307 0621 03       		.uleb128 0x3
 4308 0622 91       		.byte	0x91
 4309 0623 E47C     		.sleb128 -412
 4310 0625 14       		.uleb128 0x14
 4311 0626 4A000000 		.4byte	.LBB5
 4312 062a 86000000 		.4byte	.LBE5-.LBB5
 4313 062e 17       		.uleb128 0x17
 4314 062f 6900     		.ascii	"i\000"
 4315 0631 01       		.byte	0x1
 4316 0632 E3       		.byte	0xe3
 4317 0633 7E000000 		.4byte	0x7e
 4318 0637 02       		.uleb128 0x2
 4319 0638 91       		.byte	0x91
 4320 0639 6C       		.sleb128 -20
 4321 063a 14       		.uleb128 0x14
 4322 063b 70000000 		.4byte	.LBB6
 4323 063f 46000000 		.4byte	.LBE6-.LBB6
 4324 0643 13       		.uleb128 0x13
 4325 0644 06030000 		.4byte	.LASF101
 4326 0648 01       		.byte	0x1
 4327 0649 F0       		.byte	0xf0
 4328 064a 57000000 		.4byte	0x57
 4329 064e 02       		.uleb128 0x2
 4330 064f 91       		.byte	0x91
 4331 0650 68       		.sleb128 -24
 4332 0651 00       		.byte	0
 4333 0652 00       		.byte	0
 4334 0653 00       		.byte	0
 4335 0654 18       		.uleb128 0x18
 4336 0655 19040000 		.4byte	.LASF103
 4337 0659 01       		.byte	0x1
 4338 065a 0401     		.2byte	0x104
 4339 065c AD000000 		.4byte	0xad
 4340 0660 00000000 		.4byte	.LFB74
 4341 0664 78000000 		.4byte	.LFE74-.LFB74
 4342 0668 01       		.uleb128 0x1
 4343 0669 9C       		.byte	0x9c
 4344 066a C5060000 		.4byte	0x6c5
 4345 066e 19       		.uleb128 0x19
 4346 066f 07050000 		.4byte	.LASF104
 4347 0673 01       		.byte	0x1
 4348 0674 0401     		.2byte	0x104
 4349 0676 0C010000 		.4byte	0x10c
 4350 067a 02       		.uleb128 0x2
 4351 067b 91       		.byte	0x91
 4352 067c 6C       		.sleb128 -20
 4353 067d 19       		.uleb128 0x19
 4354 067e AC040000 		.4byte	.LASF105
 4355 0682 01       		.byte	0x1
 4356 0683 0401     		.2byte	0x104
 4357 0685 12010000 		.4byte	0x112
 4358 0689 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 101


 4359 068a 91       		.byte	0x91
 4360 068b 68       		.sleb128 -24
 4361 068c 19       		.uleb128 0x19
 4362 068d D2040000 		.4byte	.LASF106
 4363 0691 01       		.byte	0x1
 4364 0692 0401     		.2byte	0x104
 4365 0694 12010000 		.4byte	0x112
 4366 0698 02       		.uleb128 0x2
 4367 0699 91       		.byte	0x91
 4368 069a 64       		.sleb128 -28
 4369 069b 19       		.uleb128 0x19
 4370 069c B8040000 		.4byte	.LASF107
 4371 06a0 01       		.byte	0x1
 4372 06a1 0401     		.2byte	0x104
 4373 06a3 0C010000 		.4byte	0x10c
 4374 06a7 02       		.uleb128 0x2
 4375 06a8 91       		.byte	0x91
 4376 06a9 60       		.sleb128 -32
 4377 06aa 1A       		.uleb128 0x1a
 4378 06ab 6100     		.ascii	"a\000"
 4379 06ad 01       		.byte	0x1
 4380 06ae 0601     		.2byte	0x106
 4381 06b0 0C010000 		.4byte	0x10c
 4382 06b4 02       		.uleb128 0x2
 4383 06b5 91       		.byte	0x91
 4384 06b6 74       		.sleb128 -12
 4385 06b7 1A       		.uleb128 0x1a
 4386 06b8 6200     		.ascii	"b\000"
 4387 06ba 01       		.byte	0x1
 4388 06bb 0601     		.2byte	0x106
 4389 06bd 0C010000 		.4byte	0x10c
 4390 06c1 02       		.uleb128 0x2
 4391 06c2 91       		.byte	0x91
 4392 06c3 70       		.sleb128 -16
 4393 06c4 00       		.byte	0
 4394 06c5 1B       		.uleb128 0x1b
 4395 06c6 CD070000 		.4byte	.LASF108
 4396 06ca 01       		.byte	0x1
 4397 06cb 2301     		.2byte	0x123
 4398 06cd AD000000 		.4byte	0xad
 4399 06d1 00000000 		.4byte	.LFB75
 4400 06d5 74010000 		.4byte	.LFE75-.LFB75
 4401 06d9 01       		.uleb128 0x1
 4402 06da 9C       		.byte	0x9c
 4403 06db F7060000 		.4byte	0x6f7
 4404 06df 14       		.uleb128 0x14
 4405 06e0 2E000000 		.4byte	.LBB7
 4406 06e4 68000000 		.4byte	.LBE7-.LBB7
 4407 06e8 1A       		.uleb128 0x1a
 4408 06e9 6900     		.ascii	"i\000"
 4409 06eb 01       		.byte	0x1
 4410 06ec 3101     		.2byte	0x131
 4411 06ee AD000000 		.4byte	0xad
 4412 06f2 02       		.uleb128 0x2
 4413 06f3 91       		.byte	0x91
 4414 06f4 77       		.sleb128 -9
 4415 06f5 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 102


 4416 06f6 00       		.byte	0
 4417 06f7 1B       		.uleb128 0x1b
 4418 06f8 CA050000 		.4byte	.LASF109
 4419 06fc 01       		.byte	0x1
 4420 06fd 7501     		.2byte	0x175
 4421 06ff AD000000 		.4byte	0xad
 4422 0703 00000000 		.4byte	.LFB76
 4423 0707 B8000000 		.4byte	.LFE76-.LFB76
 4424 070b 01       		.uleb128 0x1
 4425 070c 9C       		.byte	0x9c
 4426 070d 3A070000 		.4byte	0x73a
 4427 0711 1C       		.uleb128 0x1c
 4428 0712 2C090000 		.4byte	.LASF35
 4429 0716 01       		.byte	0x1
 4430 0717 7901     		.2byte	0x179
 4431 0719 AD000000 		.4byte	0xad
 4432 071d 02       		.uleb128 0x2
 4433 071e 91       		.byte	0x91
 4434 071f 77       		.sleb128 -9
 4435 0720 14       		.uleb128 0x14
 4436 0721 36000000 		.4byte	.LBB8
 4437 0725 48000000 		.4byte	.LBE8-.LBB8
 4438 0729 1C       		.uleb128 0x1c
 4439 072a 0C050000 		.4byte	.LASF110
 4440 072e 01       		.byte	0x1
 4441 072f 8101     		.2byte	0x181
 4442 0731 3A070000 		.4byte	0x73a
 4443 0735 02       		.uleb128 0x2
 4444 0736 91       		.byte	0x91
 4445 0737 6C       		.sleb128 -20
 4446 0738 00       		.byte	0
 4447 0739 00       		.byte	0
 4448 073a 08       		.uleb128 0x8
 4449 073b F7000000 		.4byte	0xf7
 4450 073f 4A070000 		.4byte	0x74a
 4451 0743 09       		.uleb128 0x9
 4452 0744 05010000 		.4byte	0x105
 4453 0748 09       		.byte	0x9
 4454 0749 00       		.byte	0
 4455 074a 1D       		.uleb128 0x1d
 4456 074b 28020000 		.4byte	.LASF111
 4457 074f 01       		.byte	0x1
 4458 0750 9301     		.2byte	0x193
 4459 0752 00000000 		.4byte	.LFB77
 4460 0756 1C000000 		.4byte	.LFE77-.LFB77
 4461 075a 01       		.uleb128 0x1
 4462 075b 9C       		.byte	0x9c
 4463 075c 1E       		.uleb128 0x1e
 4464 075d 44080000 		.4byte	.LASF113
 4465 0761 01       		.byte	0x1
 4466 0762 A301     		.2byte	0x1a3
 4467 0764 AD000000 		.4byte	0xad
 4468 0768 00000000 		.4byte	.LFB78
 4469 076c 28000000 		.4byte	.LFE78-.LFB78
 4470 0770 01       		.uleb128 0x1
 4471 0771 9C       		.byte	0x9c
 4472 0772 1F       		.uleb128 0x1f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 103


 4473 0773 30040000 		.4byte	.LASF116
 4474 0777 01       		.byte	0x1
 4475 0778 AE01     		.2byte	0x1ae
 4476 077a 00000000 		.4byte	.LFB79
 4477 077e 84000000 		.4byte	.LFE79-.LFB79
 4478 0782 01       		.uleb128 0x1
 4479 0783 9C       		.byte	0x9c
 4480 0784 98070000 		.4byte	0x798
 4481 0788 1C       		.uleb128 0x1c
 4482 0789 2D060000 		.4byte	.LASF114
 4483 078d 01       		.byte	0x1
 4484 078e BB01     		.2byte	0x1bb
 4485 0790 7E000000 		.4byte	0x7e
 4486 0794 02       		.uleb128 0x2
 4487 0795 91       		.byte	0x91
 4488 0796 74       		.sleb128 -12
 4489 0797 00       		.byte	0
 4490 0798 20       		.uleb128 0x20
 4491 0799 AF030000 		.4byte	.LASF115
 4492 079d 01       		.byte	0x1
 4493 079e CD01     		.2byte	0x1cd
 4494 07a0 00000000 		.4byte	.LFB80
 4495 07a4 48000000 		.4byte	.LFE80-.LFB80
 4496 07a8 01       		.uleb128 0x1
 4497 07a9 9C       		.byte	0x9c
 4498 07aa 1F       		.uleb128 0x1f
 4499 07ab FB080000 		.4byte	.LASF117
 4500 07af 01       		.byte	0x1
 4501 07b0 DD01     		.2byte	0x1dd
 4502 07b2 00000000 		.4byte	.LFB81
 4503 07b6 B8060000 		.4byte	.LFE81-.LFB81
 4504 07ba 01       		.uleb128 0x1
 4505 07bb 9C       		.byte	0x9c
 4506 07bc 03090000 		.4byte	0x903
 4507 07c0 1C       		.uleb128 0x1c
 4508 07c1 F8060000 		.4byte	.LASF118
 4509 07c5 01       		.byte	0x1
 4510 07c6 E001     		.2byte	0x1e0
 4511 07c8 3A070000 		.4byte	0x73a
 4512 07cc 02       		.uleb128 0x2
 4513 07cd 91       		.byte	0x91
 4514 07ce 64       		.sleb128 -28
 4515 07cf 1C       		.uleb128 0x1c
 4516 07d0 FB020000 		.4byte	.LASF119
 4517 07d4 01       		.byte	0x1
 4518 07d5 E101     		.2byte	0x1e1
 4519 07d7 3A070000 		.4byte	0x73a
 4520 07db 02       		.uleb128 0x2
 4521 07dc 91       		.byte	0x91
 4522 07dd 58       		.sleb128 -40
 4523 07de 1C       		.uleb128 0x1c
 4524 07df 1E090000 		.4byte	.LASF120
 4525 07e3 01       		.byte	0x1
 4526 07e4 E201     		.2byte	0x1e2
 4527 07e6 3A070000 		.4byte	0x73a
 4528 07ea 02       		.uleb128 0x2
 4529 07eb 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 104


 4530 07ec 4C       		.sleb128 -52
 4531 07ed 1C       		.uleb128 0x1c
 4532 07ee 7E060000 		.4byte	.LASF121
 4533 07f2 01       		.byte	0x1
 4534 07f3 E301     		.2byte	0x1e3
 4535 07f5 3A070000 		.4byte	0x73a
 4536 07f9 02       		.uleb128 0x2
 4537 07fa 91       		.byte	0x91
 4538 07fb 40       		.sleb128 -64
 4539 07fc 1C       		.uleb128 0x1c
 4540 07fd A2030000 		.4byte	.LASF122
 4541 0801 01       		.byte	0x1
 4542 0802 E401     		.2byte	0x1e4
 4543 0804 3A070000 		.4byte	0x73a
 4544 0808 03       		.uleb128 0x3
 4545 0809 91       		.byte	0x91
 4546 080a B47F     		.sleb128 -76
 4547 080c 1C       		.uleb128 0x1c
 4548 080d A1080000 		.4byte	.LASF123
 4549 0811 01       		.byte	0x1
 4550 0812 E801     		.2byte	0x1e8
 4551 0814 65040000 		.4byte	0x465
 4552 0818 03       		.uleb128 0x3
 4553 0819 91       		.byte	0x91
 4554 081a D07E     		.sleb128 -176
 4555 081c 1C       		.uleb128 0x1c
 4556 081d 5F030000 		.4byte	.LASF124
 4557 0821 01       		.byte	0x1
 4558 0822 EB01     		.2byte	0x1eb
 4559 0824 65040000 		.4byte	0x465
 4560 0828 03       		.uleb128 0x3
 4561 0829 91       		.byte	0x91
 4562 082a EC7D     		.sleb128 -276
 4563 082c 1C       		.uleb128 0x1c
 4564 082d B0050000 		.4byte	.LASF125
 4565 0831 01       		.byte	0x1
 4566 0832 EE01     		.2byte	0x1ee
 4567 0834 65040000 		.4byte	0x465
 4568 0838 03       		.uleb128 0x3
 4569 0839 91       		.byte	0x91
 4570 083a 887D     		.sleb128 -376
 4571 083c 1C       		.uleb128 0x1c
 4572 083d 27050000 		.4byte	.LASF126
 4573 0841 01       		.byte	0x1
 4574 0842 F101     		.2byte	0x1f1
 4575 0844 65040000 		.4byte	0x465
 4576 0848 03       		.uleb128 0x3
 4577 0849 91       		.byte	0x91
 4578 084a A47C     		.sleb128 -476
 4579 084c 1C       		.uleb128 0x1c
 4580 084d 8C060000 		.4byte	.LASF127
 4581 0851 01       		.byte	0x1
 4582 0852 F401     		.2byte	0x1f4
 4583 0854 03090000 		.4byte	0x903
 4584 0858 03       		.uleb128 0x3
 4585 0859 91       		.byte	0x91
 4586 085a DC7A     		.sleb128 -676
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 105


 4587 085c 1C       		.uleb128 0x1c
 4588 085d D8020000 		.4byte	.LASF59
 4589 0861 01       		.byte	0x1
 4590 0862 3C02     		.2byte	0x23c
 4591 0864 7E000000 		.4byte	0x7e
 4592 0868 03       		.uleb128 0x3
 4593 0869 91       		.byte	0x91
 4594 086a D87A     		.sleb128 -680
 4595 086c 1C       		.uleb128 0x1c
 4596 086d 9B060000 		.4byte	.LASF60
 4597 0871 01       		.byte	0x1
 4598 0872 3C02     		.2byte	0x23c
 4599 0874 7E000000 		.4byte	0x7e
 4600 0878 03       		.uleb128 0x3
 4601 0879 91       		.byte	0x91
 4602 087a D47A     		.sleb128 -684
 4603 087c 1C       		.uleb128 0x1c
 4604 087d 5A010000 		.4byte	.LASF128
 4605 0881 01       		.byte	0x1
 4606 0882 3C02     		.2byte	0x23c
 4607 0884 7E000000 		.4byte	0x7e
 4608 0888 03       		.uleb128 0x3
 4609 0889 91       		.byte	0x91
 4610 088a D07A     		.sleb128 -688
 4611 088c 1C       		.uleb128 0x1c
 4612 088d 82050000 		.4byte	.LASF129
 4613 0891 01       		.byte	0x1
 4614 0892 3C02     		.2byte	0x23c
 4615 0894 7E000000 		.4byte	0x7e
 4616 0898 03       		.uleb128 0x3
 4617 0899 91       		.byte	0x91
 4618 089a CC7A     		.sleb128 -692
 4619 089c 1C       		.uleb128 0x1c
 4620 089d 11050000 		.4byte	.LASF130
 4621 08a1 01       		.byte	0x1
 4622 08a2 3C02     		.2byte	0x23c
 4623 08a4 7E000000 		.4byte	0x7e
 4624 08a8 03       		.uleb128 0x3
 4625 08a9 91       		.byte	0x91
 4626 08aa C87A     		.sleb128 -696
 4627 08ac 1C       		.uleb128 0x1c
 4628 08ad 500A0000 		.4byte	.LASF131
 4629 08b1 01       		.byte	0x1
 4630 08b2 3C02     		.2byte	0x23c
 4631 08b4 7E000000 		.4byte	0x7e
 4632 08b8 03       		.uleb128 0x3
 4633 08b9 91       		.byte	0x91
 4634 08ba C47A     		.sleb128 -700
 4635 08bc 1C       		.uleb128 0x1c
 4636 08bd B3020000 		.4byte	.LASF132
 4637 08c1 01       		.byte	0x1
 4638 08c2 3C02     		.2byte	0x23c
 4639 08c4 7E000000 		.4byte	0x7e
 4640 08c8 03       		.uleb128 0x3
 4641 08c9 91       		.byte	0x91
 4642 08ca C07A     		.sleb128 -704
 4643 08cc 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 106


 4644 08cd 0E020000 		.4byte	.LASF133
 4645 08d1 01       		.byte	0x1
 4646 08d2 3C02     		.2byte	0x23c
 4647 08d4 7E000000 		.4byte	0x7e
 4648 08d8 03       		.uleb128 0x3
 4649 08d9 91       		.byte	0x91
 4650 08da BC7A     		.sleb128 -708
 4651 08dc 1C       		.uleb128 0x1c
 4652 08dd CE090000 		.4byte	.LASF67
 4653 08e1 01       		.byte	0x1
 4654 08e2 3C02     		.2byte	0x23c
 4655 08e4 7E000000 		.4byte	0x7e
 4656 08e8 03       		.uleb128 0x3
 4657 08e9 91       		.byte	0x91
 4658 08ea B87A     		.sleb128 -712
 4659 08ec 21       		.uleb128 0x21
 4660 08ed 00000000 		.4byte	.Ldebug_ranges0+0
 4661 08f1 1C       		.uleb128 0x1c
 4662 08f2 6A020000 		.4byte	.LASF134
 4663 08f6 01       		.byte	0x1
 4664 08f7 6802     		.2byte	0x268
 4665 08f9 65040000 		.4byte	0x465
 4666 08fd 03       		.uleb128 0x3
 4667 08fe 91       		.byte	0x91
 4668 08ff D479     		.sleb128 -812
 4669 0901 00       		.byte	0
 4670 0902 00       		.byte	0
 4671 0903 08       		.uleb128 0x8
 4672 0904 F7000000 		.4byte	0xf7
 4673 0908 13090000 		.4byte	0x913
 4674 090c 09       		.uleb128 0x9
 4675 090d 05010000 		.4byte	0x105
 4676 0911 C7       		.byte	0xc7
 4677 0912 00       		.byte	0
 4678 0913 1F       		.uleb128 0x1f
 4679 0914 E2020000 		.4byte	.LASF135
 4680 0918 01       		.byte	0x1
 4681 0919 BB02     		.2byte	0x2bb
 4682 091b 00000000 		.4byte	.LFB82
 4683 091f 68010000 		.4byte	.LFE82-.LFB82
 4684 0923 01       		.uleb128 0x1
 4685 0924 9C       		.byte	0x9c
 4686 0925 43090000 		.4byte	0x943
 4687 0929 14       		.uleb128 0x14
 4688 092a DA000000 		.4byte	.LBB12
 4689 092e 38000000 		.4byte	.LBE12-.LBB12
 4690 0932 1C       		.uleb128 0x1c
 4691 0933 EE070000 		.4byte	.LASF136
 4692 0937 01       		.byte	0x1
 4693 0938 E902     		.2byte	0x2e9
 4694 093a 3A070000 		.4byte	0x73a
 4695 093e 02       		.uleb128 0x2
 4696 093f 91       		.byte	0x91
 4697 0940 6C       		.sleb128 -20
 4698 0941 00       		.byte	0
 4699 0942 00       		.byte	0
 4700 0943 1B       		.uleb128 0x1b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 107


 4701 0944 41030000 		.4byte	.LASF137
 4702 0948 01       		.byte	0x1
 4703 0949 FC02     		.2byte	0x2fc
 4704 094b 57000000 		.4byte	0x57
 4705 094f 00000000 		.4byte	.LFB83
 4706 0953 44010000 		.4byte	.LFE83-.LFB83
 4707 0957 01       		.uleb128 0x1
 4708 0958 9C       		.byte	0x9c
 4709 0959 FF090000 		.4byte	0x9ff
 4710 095d 1C       		.uleb128 0x1c
 4711 095e E6040000 		.4byte	.LASF138
 4712 0962 01       		.byte	0x1
 4713 0963 0703     		.2byte	0x307
 4714 0965 57000000 		.4byte	0x57
 4715 0969 02       		.uleb128 0x2
 4716 096a 91       		.byte	0x91
 4717 096b 74       		.sleb128 -12
 4718 096c 14       		.uleb128 0x14
 4719 096d 30000000 		.4byte	.LBB13
 4720 0971 DE000000 		.4byte	.LBE13-.LBB13
 4721 0975 1C       		.uleb128 0x1c
 4722 0976 06030000 		.4byte	.LASF101
 4723 097a 01       		.byte	0x1
 4724 097b 0C03     		.2byte	0x30c
 4725 097d FF090000 		.4byte	0x9ff
 4726 0981 02       		.uleb128 0x2
 4727 0982 91       		.byte	0x91
 4728 0983 54       		.sleb128 -44
 4729 0984 1A       		.uleb128 0x1a
 4730 0985 7400     		.ascii	"t\000"
 4731 0987 01       		.byte	0x1
 4732 0988 1203     		.2byte	0x312
 4733 098a 2D010000 		.4byte	0x12d
 4734 098e 03       		.uleb128 0x3
 4735 098f 91       		.byte	0x91
 4736 0990 947F     		.sleb128 -108
 4737 0992 1C       		.uleb128 0x1c
 4738 0993 4A020000 		.4byte	.LASF139
 4739 0997 01       		.byte	0x1
 4740 0998 1503     		.2byte	0x315
 4741 099a 7E000000 		.4byte	0x7e
 4742 099e 02       		.uleb128 0x2
 4743 099f 91       		.byte	0x91
 4744 09a0 50       		.sleb128 -48
 4745 09a1 1C       		.uleb128 0x1c
 4746 09a2 C4050000 		.4byte	.LASF140
 4747 09a6 01       		.byte	0x1
 4748 09a7 1503     		.2byte	0x315
 4749 09a9 7E000000 		.4byte	0x7e
 4750 09ad 02       		.uleb128 0x2
 4751 09ae 91       		.byte	0x91
 4752 09af 4C       		.sleb128 -52
 4753 09b0 1A       		.uleb128 0x1a
 4754 09b1 64617900 		.ascii	"day\000"
 4755 09b5 01       		.byte	0x1
 4756 09b6 1503     		.2byte	0x315
 4757 09b8 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 108


 4758 09bc 02       		.uleb128 0x2
 4759 09bd 91       		.byte	0x91
 4760 09be 48       		.sleb128 -56
 4761 09bf 1C       		.uleb128 0x1c
 4762 09c0 48060000 		.4byte	.LASF141
 4763 09c4 01       		.byte	0x1
 4764 09c5 1503     		.2byte	0x315
 4765 09c7 7E000000 		.4byte	0x7e
 4766 09cb 02       		.uleb128 0x2
 4767 09cc 91       		.byte	0x91
 4768 09cd 44       		.sleb128 -60
 4769 09ce 1C       		.uleb128 0x1c
 4770 09cf D6080000 		.4byte	.LASF142
 4771 09d3 01       		.byte	0x1
 4772 09d4 1503     		.2byte	0x315
 4773 09d6 7E000000 		.4byte	0x7e
 4774 09da 02       		.uleb128 0x2
 4775 09db 91       		.byte	0x91
 4776 09dc 40       		.sleb128 -64
 4777 09dd 1C       		.uleb128 0x1c
 4778 09de 43020000 		.4byte	.LASF143
 4779 09e2 01       		.byte	0x1
 4780 09e3 1503     		.2byte	0x315
 4781 09e5 7E000000 		.4byte	0x7e
 4782 09e9 03       		.uleb128 0x3
 4783 09ea 91       		.byte	0x91
 4784 09eb BC7F     		.sleb128 -68
 4785 09ed 1C       		.uleb128 0x1c
 4786 09ee 0C000000 		.4byte	.LASF144
 4787 09f2 01       		.byte	0x1
 4788 09f3 1503     		.2byte	0x315
 4789 09f5 7E000000 		.4byte	0x7e
 4790 09f9 03       		.uleb128 0x3
 4791 09fa 91       		.byte	0x91
 4792 09fb B87F     		.sleb128 -72
 4793 09fd 00       		.byte	0
 4794 09fe 00       		.byte	0
 4795 09ff 08       		.uleb128 0x8
 4796 0a00 F7000000 		.4byte	0xf7
 4797 0a04 0F0A0000 		.4byte	0xa0f
 4798 0a08 09       		.uleb128 0x9
 4799 0a09 05010000 		.4byte	0x105
 4800 0a0d 1D       		.byte	0x1d
 4801 0a0e 00       		.byte	0
 4802 0a0f 22       		.uleb128 0x22
 4803 0a10 94020000 		.4byte	.LASF145
 4804 0a14 01       		.byte	0x1
 4805 0a15 3503     		.2byte	0x335
 4806 0a17 AD000000 		.4byte	0xad
 4807 0a1b 00000000 		.4byte	.LFB84
 4808 0a1f 14000000 		.4byte	.LFE84-.LFB84
 4809 0a23 01       		.uleb128 0x1
 4810 0a24 9C       		.byte	0x9c
 4811 0a25 1D       		.uleb128 0x1d
 4812 0a26 96030000 		.4byte	.LASF146
 4813 0a2a 01       		.byte	0x1
 4814 0a2b 3A03     		.2byte	0x33a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 109


 4815 0a2d 00000000 		.4byte	.LFB85
 4816 0a31 1A000000 		.4byte	.LFE85-.LFB85
 4817 0a35 01       		.uleb128 0x1
 4818 0a36 9C       		.byte	0x9c
 4819 0a37 1D       		.uleb128 0x1d
 4820 0a38 36010000 		.4byte	.LASF147
 4821 0a3c 01       		.byte	0x1
 4822 0a3d 4703     		.2byte	0x347
 4823 0a3f 00000000 		.4byte	.LFB86
 4824 0a43 2A000000 		.4byte	.LFE86-.LFB86
 4825 0a47 01       		.uleb128 0x1
 4826 0a48 9C       		.byte	0x9c
 4827 0a49 1B       		.uleb128 0x1b
 4828 0a4a 09070000 		.4byte	.LASF148
 4829 0a4e 01       		.byte	0x1
 4830 0a4f 5A03     		.2byte	0x35a
 4831 0a51 37030000 		.4byte	0x337
 4832 0a55 00000000 		.4byte	.LFB87
 4833 0a59 7C020000 		.4byte	.LFE87-.LFB87
 4834 0a5d 01       		.uleb128 0x1
 4835 0a5e 9C       		.byte	0x9c
 4836 0a5f F20A0000 		.4byte	0xaf2
 4837 0a63 1A       		.uleb128 0x1a
 4838 0a64 67707300 		.ascii	"gps\000"
 4839 0a68 01       		.byte	0x1
 4840 0a69 5B03     		.2byte	0x35b
 4841 0a6b 37030000 		.4byte	0x337
 4842 0a6f 02       		.uleb128 0x2
 4843 0a70 91       		.byte	0x91
 4844 0a71 4C       		.sleb128 -52
 4845 0a72 1C       		.uleb128 0x1c
 4846 0a73 F5090000 		.4byte	.LASF149
 4847 0a77 01       		.byte	0x1
 4848 0a78 6703     		.2byte	0x367
 4849 0a7a 57000000 		.4byte	0x57
 4850 0a7e 02       		.uleb128 0x2
 4851 0a7f 91       		.byte	0x91
 4852 0a80 68       		.sleb128 -24
 4853 0a81 1C       		.uleb128 0x1c
 4854 0a82 00060000 		.4byte	.LASF150
 4855 0a86 01       		.byte	0x1
 4856 0a87 8E03     		.2byte	0x38e
 4857 0a89 AD000000 		.4byte	0xad
 4858 0a8d 02       		.uleb128 0x2
 4859 0a8e 91       		.byte	0x91
 4860 0a8f 67       		.sleb128 -25
 4861 0a90 1A       		.uleb128 0x1a
 4862 0a91 6C617400 		.ascii	"lat\000"
 4863 0a95 01       		.byte	0x1
 4864 0a96 9A03     		.2byte	0x39a
 4865 0a98 E9000000 		.4byte	0xe9
 4866 0a9c 02       		.uleb128 0x2
 4867 0a9d 91       		.byte	0x91
 4868 0a9e 48       		.sleb128 -56
 4869 0a9f 1A       		.uleb128 0x1a
 4870 0aa0 6C6F6E00 		.ascii	"lon\000"
 4871 0aa4 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 110


 4872 0aa5 9B03     		.2byte	0x39b
 4873 0aa7 E9000000 		.4byte	0xe9
 4874 0aab 02       		.uleb128 0x2
 4875 0aac 91       		.byte	0x91
 4876 0aad 44       		.sleb128 -60
 4877 0aae 1A       		.uleb128 0x1a
 4878 0aaf 616C7400 		.ascii	"alt\000"
 4879 0ab3 01       		.byte	0x1
 4880 0ab4 9C03     		.2byte	0x39c
 4881 0ab6 E9000000 		.4byte	0xe9
 4882 0aba 02       		.uleb128 0x2
 4883 0abb 91       		.byte	0x91
 4884 0abc 40       		.sleb128 -64
 4885 0abd 1A       		.uleb128 0x1a
 4886 0abe 733100   		.ascii	"s1\000"
 4887 0ac1 01       		.byte	0x1
 4888 0ac2 A003     		.2byte	0x3a0
 4889 0ac4 0C010000 		.4byte	0x10c
 4890 0ac8 02       		.uleb128 0x2
 4891 0ac9 91       		.byte	0x91
 4892 0aca 60       		.sleb128 -32
 4893 0acb 1C       		.uleb128 0x1c
 4894 0acc 2D060000 		.4byte	.LASF114
 4895 0ad0 01       		.byte	0x1
 4896 0ad1 A303     		.2byte	0x3a3
 4897 0ad3 7E000000 		.4byte	0x7e
 4898 0ad7 02       		.uleb128 0x2
 4899 0ad8 91       		.byte	0x91
 4900 0ad9 5C       		.sleb128 -36
 4901 0ada 14       		.uleb128 0x14
 4902 0adb B4000000 		.4byte	.LBB14
 4903 0adf 38000000 		.4byte	.LBE14-.LBB14
 4904 0ae3 1A       		.uleb128 0x1a
 4905 0ae4 6900     		.ascii	"i\000"
 4906 0ae6 01       		.byte	0x1
 4907 0ae7 8F03     		.2byte	0x38f
 4908 0ae9 B9000000 		.4byte	0xb9
 4909 0aed 02       		.uleb128 0x2
 4910 0aee 91       		.byte	0x91
 4911 0aef 6E       		.sleb128 -18
 4912 0af0 00       		.byte	0
 4913 0af1 00       		.byte	0
 4914 0af2 23       		.uleb128 0x23
 4915 0af3 84010000 		.4byte	.LASF151
 4916 0af7 0A       		.byte	0xa
 4917 0af8 1207     		.2byte	0x712
 4918 0afa FE0A0000 		.4byte	0xafe
 4919 0afe 0F       		.uleb128 0xf
 4920 0aff 97000000 		.4byte	0x97
 4921 0b03 24       		.uleb128 0x24
 4922 0b04 6C000000 		.4byte	.LASF152
 4923 0b08 07       		.byte	0x7
 4924 0b09 11       		.byte	0x11
 4925 0b0a B7030000 		.4byte	0x3b7
 4926 0b0e 05       		.uleb128 0x5
 4927 0b0f 03       		.byte	0x3
 4928 0b10 00000000 		.4byte	buffer_overflow
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 111


 4929 0b14 24       		.uleb128 0x24
 4930 0b15 8E050000 		.4byte	.LASF153
 4931 0b19 07       		.byte	0x7
 4932 0b1a 22       		.byte	0x22
 4933 0b1b B9000000 		.4byte	0xb9
 4934 0b1f 05       		.uleb128 0x5
 4935 0b20 03       		.byte	0x3
 4936 0b21 00000000 		.4byte	dataPointsInStack
 4937 0b25 24       		.uleb128 0x24
 4938 0b26 48090000 		.4byte	.LASF154
 4939 0b2a 07       		.byte	0x7
 4940 0b2b 23       		.byte	0x23
 4941 0b2c B9000000 		.4byte	0xb9
 4942 0b30 05       		.uleb128 0x5
 4943 0b31 03       		.byte	0x3
 4944 0b32 00000000 		.4byte	dataPointsInStackDesired
 4945 0b36 08       		.uleb128 0x8
 4946 0b37 3B020000 		.4byte	0x23b
 4947 0b3b 460B0000 		.4byte	0xb46
 4948 0b3f 09       		.uleb128 0x9
 4949 0b40 05010000 		.4byte	0x105
 4950 0b44 95       		.byte	0x95
 4951 0b45 00       		.byte	0
 4952 0b46 24       		.uleb128 0x24
 4953 0b47 5E040000 		.4byte	.LASF155
 4954 0b4b 07       		.byte	0x7
 4955 0b4c 24       		.byte	0x24
 4956 0b4d 360B0000 		.4byte	0xb36
 4957 0b51 05       		.uleb128 0x5
 4958 0b52 03       		.byte	0x3
 4959 0b53 00000000 		.4byte	data
 4960 0b57 24       		.uleb128 0x24
 4961 0b58 66010000 		.4byte	.LASF156
 4962 0b5c 08       		.byte	0x8
 4963 0b5d 20       		.byte	0x20
 4964 0b5e AD000000 		.4byte	0xad
 4965 0b62 05       		.uleb128 0x5
 4966 0b63 03       		.byte	0x3
 4967 0b64 00000000 		.4byte	modem_state
 4968 0b68 24       		.uleb128 0x24
 4969 0b69 5D080000 		.4byte	.LASF157
 4970 0b6d 08       		.byte	0x8
 4971 0b6e 6C       		.byte	0x6c
 4972 0b6f DD000000 		.4byte	0xdd
 4973 0b73 05       		.uleb128 0x5
 4974 0b74 03       		.byte	0x3
 4975 0b75 00000000 		.4byte	modem_start_time_stamp
 4976 0b79 24       		.uleb128 0x24
 4977 0b7a 74040000 		.4byte	.LASF75
 4978 0b7e 08       		.byte	0x8
 4979 0b7f 6D       		.byte	0x6d
 4980 0b80 73020000 		.4byte	0x273
 4981 0b84 05       		.uleb128 0x5
 4982 0b85 03       		.byte	0x3
 4983 0b86 00000000 		.4byte	modem_info
 4984 0b8a 24       		.uleb128 0x24
 4985 0b8b A3010000 		.4byte	.LASF158
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 112


 4986 0b8f 08       		.byte	0x8
 4987 0b90 6E       		.byte	0x6e
 4988 0b91 E7020000 		.4byte	0x2e7
 4989 0b95 05       		.uleb128 0x5
 4990 0b96 03       		.byte	0x3
 4991 0b97 00000000 		.4byte	modem_stats
 4992 0b9b 24       		.uleb128 0x24
 4993 0b9c 33060000 		.4byte	.LASF159
 4994 0ba0 08       		.byte	0x8
 4995 0ba1 6F       		.byte	0x6f
 4996 0ba2 BE030000 		.4byte	0x3be
 4997 0ba6 05       		.uleb128 0x5
 4998 0ba7 03       		.byte	0x3
 4999 0ba8 00000000 		.4byte	updatable_parameters
 5000 0bac 24       		.uleb128 0x24
 5001 0bad A9070000 		.4byte	.LASF160
 5002 0bb1 0B       		.byte	0xb
 5003 0bb2 25       		.byte	0x25
 5004 0bb3 65040000 		.4byte	0x465
 5005 0bb7 05       		.uleb128 0x5
 5006 0bb8 03       		.byte	0x3
 5007 0bb9 00000000 		.4byte	level_sensor_inbox
 5008 0bbd 24       		.uleb128 0x24
 5009 0bbe 33090000 		.4byte	.LASF161
 5010 0bc2 0B       		.byte	0xb
 5011 0bc3 27       		.byte	0x27
 5012 0bc4 B7030000 		.4byte	0x3b7
 5013 0bc8 05       		.uleb128 0x5
 5014 0bc9 03       		.byte	0x3
 5015 0bca 00000000 		.4byte	level_sensor_enabled
 5016 0bce 24       		.uleb128 0x24
 5017 0bcf 320A0000 		.4byte	.LASF162
 5018 0bd3 0C       		.byte	0xc
 5019 0bd4 0F       		.byte	0xf
 5020 0bd5 65040000 		.4byte	0x465
 5021 0bd9 05       		.uleb128 0x5
 5022 0bda 03       		.byte	0x3
 5023 0bdb 00000000 		.4byte	downstream_level_sensor_inbox
 5024 0bdf 24       		.uleb128 0x24
 5025 0be0 2F050000 		.4byte	.LASF163
 5026 0be4 0C       		.byte	0xc
 5027 0be5 11       		.byte	0x11
 5028 0be6 B7030000 		.4byte	0x3b7
 5029 0bea 05       		.uleb128 0x5
 5030 0beb 03       		.byte	0x3
 5031 0bec 00000000 		.4byte	downstream_level_sensor_enabled
 5032 0bf0 24       		.uleb128 0x24
 5033 0bf1 ED080000 		.4byte	.LASF164
 5034 0bf5 0D       		.byte	0xd
 5035 0bf6 29       		.byte	0x29
 5036 0bf7 B7030000 		.4byte	0x3b7
 5037 0bfb 05       		.uleb128 0x5
 5038 0bfc 03       		.byte	0x3
 5039 0bfd 00000000 		.4byte	valve_enabled
 5040 0c01 24       		.uleb128 0x24
 5041 0c02 A2090000 		.4byte	.LASF165
 5042 0c06 0D       		.byte	0xd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 113


 5043 0c07 2A       		.byte	0x2a
 5044 0c08 65040000 		.4byte	0x465
 5045 0c0c 05       		.uleb128 0x5
 5046 0c0d 03       		.byte	0x3
 5047 0c0e 00000000 		.4byte	valve_inbox
 5048 0c12 24       		.uleb128 0x24
 5049 0c13 E1030000 		.4byte	.LASF166
 5050 0c17 0E       		.byte	0xe
 5051 0c18 07       		.byte	0x7
 5052 0c19 B7030000 		.4byte	0x3b7
 5053 0c1d 05       		.uleb128 0x5
 5054 0c1e 03       		.byte	0x3
 5055 0c1f 00000000 		.4byte	App_LED_enabled
 5056 0c23 24       		.uleb128 0x24
 5057 0c24 240A0000 		.4byte	.LASF167
 5058 0c28 0E       		.byte	0xe
 5059 0c29 08       		.byte	0x8
 5060 0c2a 65040000 		.4byte	0x465
 5061 0c2e 05       		.uleb128 0x5
 5062 0c2f 03       		.byte	0x3
 5063 0c30 00000000 		.4byte	app_led_inbox
 5064 0c34 08       		.uleb128 0x8
 5065 0c35 F7000000 		.4byte	0xf7
 5066 0c39 450C0000 		.4byte	0xc45
 5067 0c3d 25       		.uleb128 0x25
 5068 0c3e 05010000 		.4byte	0x105
 5069 0c42 0F27     		.2byte	0x270f
 5070 0c44 00       		.byte	0
 5071 0c45 24       		.uleb128 0x24
 5072 0c46 FF090000 		.4byte	.LASF168
 5073 0c4a 09       		.byte	0x9
 5074 0c4b 1A       		.byte	0x1a
 5075 0c4c 340C0000 		.4byte	0xc34
 5076 0c50 05       		.uleb128 0x5
 5077 0c51 03       		.byte	0x3
 5078 0c52 00000000 		.4byte	http_request
 5079 0c56 24       		.uleb128 0x24
 5080 0c57 1E020000 		.4byte	.LASF169
 5081 0c5b 09       		.byte	0x9
 5082 0c5c 1B       		.byte	0x1b
 5083 0c5d 340C0000 		.4byte	0xc34
 5084 0c61 05       		.uleb128 0x5
 5085 0c62 03       		.byte	0x3
 5086 0c63 00000000 		.4byte	http_body
 5087 0c67 24       		.uleb128 0x24
 5088 0c68 07080000 		.4byte	.LASF170
 5089 0c6c 09       		.byte	0x9
 5090 0c6d 1C       		.byte	0x1c
 5091 0c6e 03090000 		.4byte	0x903
 5092 0c72 05       		.uleb128 0x5
 5093 0c73 03       		.byte	0x3
 5094 0c74 00000000 		.4byte	http_route
 5095 0c78 24       		.uleb128 0x24
 5096 0c79 2A070000 		.4byte	.LASF171
 5097 0c7d 09       		.byte	0x9
 5098 0c7e 43       		.byte	0x43
 5099 0c7f 39040000 		.4byte	0x439
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 114


 5100 0c83 05       		.uleb128 0x5
 5101 0c84 03       		.byte	0x3
 5102 0c85 00000000 		.4byte	system_info
 5103 0c89 24       		.uleb128 0x24
 5104 0c8a D3060000 		.4byte	.LASF172
 5105 0c8e 09       		.byte	0x9
 5106 0c8f 55       		.byte	0x55
 5107 0c90 75040000 		.4byte	0x475
 5108 0c94 05       		.uleb128 0x5
 5109 0c95 03       		.byte	0x3
 5110 0c96 00000000 		.4byte	system_settings
 5111 0c9a 24       		.uleb128 0x24
 5112 0c9b 77010000 		.4byte	.LASF173
 5113 0c9f 09       		.byte	0x9
 5114 0ca0 71       		.byte	0x71
 5115 0ca1 02040000 		.4byte	0x402
 5116 0ca5 05       		.uleb128 0x5
 5117 0ca6 03       		.byte	0x3
 5118 0ca7 00000000 		.4byte	alarmMeasure
 5119 0cab 24       		.uleb128 0x24
 5120 0cac DD010000 		.4byte	.LASF174
 5121 0cb0 09       		.byte	0x9
 5122 0cb1 72       		.byte	0x72
 5123 0cb2 AD000000 		.4byte	0xad
 5124 0cb6 05       		.uleb128 0x5
 5125 0cb7 03       		.byte	0x3
 5126 0cb8 00000000 		.4byte	timeToMeasure
 5127 0cbc 24       		.uleb128 0x24
 5128 0cbd D7030000 		.4byte	.LASF175
 5129 0cc1 09       		.byte	0x9
 5130 0cc2 73       		.byte	0x73
 5131 0cc3 02040000 		.4byte	0x402
 5132 0cc7 05       		.uleb128 0x5
 5133 0cc8 03       		.byte	0x3
 5134 0cc9 00000000 		.4byte	alarmSync
 5135 0ccd 24       		.uleb128 0x24
 5136 0cce 03020000 		.4byte	.LASF176
 5137 0cd2 09       		.byte	0x9
 5138 0cd3 74       		.byte	0x74
 5139 0cd4 AD000000 		.4byte	0xad
 5140 0cd8 05       		.uleb128 0x5
 5141 0cd9 03       		.byte	0x3
 5142 0cda 00000000 		.4byte	timeToSync
 5143 0cde 24       		.uleb128 0x24
 5144 0cdf 0B060000 		.4byte	.LASF177
 5145 0ce3 09       		.byte	0x9
 5146 0ce4 75       		.byte	0x75
 5147 0ce5 AD000000 		.4byte	0xad
 5148 0ce9 05       		.uleb128 0x5
 5149 0cea 03       		.byte	0x3
 5150 0ceb 00000000 		.4byte	timeToSycnRemoteParams
 5151 0cef 26       		.uleb128 0x26
 5152 0cf0 68657900 		.ascii	"hey\000"
 5153 0cf4 09       		.byte	0x9
 5154 0cf5 76       		.byte	0x76
 5155 0cf6 AD000000 		.4byte	0xad
 5156 0cfa 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 115


 5157 0cfb 03       		.byte	0x3
 5158 0cfc 00000000 		.4byte	hey
 5159 0d00 24       		.uleb128 0x24
 5160 0d01 FB040000 		.4byte	.LASF178
 5161 0d05 09       		.byte	0x9
 5162 0d06 7A       		.byte	0x7a
 5163 0d07 02040000 		.4byte	0x402
 5164 0d0b 05       		.uleb128 0x5
 5165 0d0c 03       		.byte	0x3
 5166 0d0d 00000000 		.4byte	alarmAppLED
 5167 0d11 24       		.uleb128 0x24
 5168 0d12 C5020000 		.4byte	.LASF179
 5169 0d16 09       		.byte	0x9
 5170 0d17 7B       		.byte	0x7b
 5171 0d18 AD000000 		.4byte	0xad
 5172 0d1c 05       		.uleb128 0x5
 5173 0d1d 03       		.byte	0x3
 5174 0d1e 00000000 		.4byte	timeToAppLED
 5175 0d22 24       		.uleb128 0x24
 5176 0d23 67070000 		.4byte	.LASF180
 5177 0d27 09       		.byte	0x9
 5178 0d28 7D       		.byte	0x7d
 5179 0d29 02040000 		.4byte	0x402
 5180 0d2d 05       		.uleb128 0x5
 5181 0d2e 03       		.byte	0x3
 5182 0d2f 00000000 		.4byte	alarmLevelSensor
 5183 0d33 24       		.uleb128 0x24
 5184 0d34 91010000 		.4byte	.LASF181
 5185 0d38 09       		.byte	0x9
 5186 0d39 7E       		.byte	0x7e
 5187 0d3a AD000000 		.4byte	0xad
 5188 0d3e 05       		.uleb128 0x5
 5189 0d3f 03       		.byte	0x3
 5190 0d40 00000000 		.4byte	timetoLevelSensor
 5191 0d44 24       		.uleb128 0x24
 5192 0d45 4F020000 		.4byte	.LASF182
 5193 0d49 09       		.byte	0x9
 5194 0d4a 80       		.byte	0x80
 5195 0d4b 02040000 		.4byte	0x402
 5196 0d4f 05       		.uleb128 0x5
 5197 0d50 03       		.byte	0x3
 5198 0d51 00000000 		.4byte	alarmDownstreamLevelSensor
 5199 0d55 24       		.uleb128 0x24
 5200 0d56 6E030000 		.4byte	.LASF183
 5201 0d5a 09       		.byte	0x9
 5202 0d5b 81       		.byte	0x81
 5203 0d5c AD000000 		.4byte	0xad
 5204 0d60 05       		.uleb128 0x5
 5205 0d61 03       		.byte	0x3
 5206 0d62 00000000 		.4byte	timetoDownstreamLevelSensor
 5207 0d66 24       		.uleb128 0x24
 5208 0d67 F3070000 		.4byte	.LASF184
 5209 0d6b 09       		.byte	0x9
 5210 0d6c 83       		.byte	0x83
 5211 0d6d 02040000 		.4byte	0x402
 5212 0d71 05       		.uleb128 0x5
 5213 0d72 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 116


 5214 0d73 00000000 		.4byte	alarmValve
 5215 0d77 24       		.uleb128 0x24
 5216 0d78 00000000 		.4byte	.LASF185
 5217 0d7c 09       		.byte	0x9
 5218 0d7d 84       		.byte	0x84
 5219 0d7e AD000000 		.4byte	0xad
 5220 0d82 05       		.uleb128 0x5
 5221 0d83 03       		.byte	0x3
 5222 0d84 00000000 		.4byte	timeToValve
 5223 0d88 08       		.uleb128 0x8
 5224 0d89 F7000000 		.4byte	0xf7
 5225 0d8d 990D0000 		.4byte	0xd99
 5226 0d91 25       		.uleb128 0x25
 5227 0d92 05010000 		.4byte	0x105
 5228 0d96 FF03     		.2byte	0x3ff
 5229 0d98 00       		.byte	0
 5230 0d99 24       		.uleb128 0x24
 5231 0d9a 74080000 		.4byte	.LASF186
 5232 0d9e 01       		.byte	0x1
 5233 0d9f 05       		.byte	0x5
 5234 0da0 880D0000 		.4byte	0xd88
 5235 0da4 05       		.uleb128 0x5
 5236 0da5 03       		.byte	0x3
 5237 0da6 00000000 		.4byte	uart_received_string
 5238 0daa 24       		.uleb128 0x24
 5239 0dab 25080000 		.4byte	.LASF187
 5240 0daf 01       		.byte	0x1
 5241 0db0 06       		.byte	0x6
 5242 0db1 D1000000 		.4byte	0xd1
 5243 0db5 05       		.uleb128 0x5
 5244 0db6 03       		.byte	0x3
 5245 0db7 00000000 		.4byte	uart_string_index
 5246 0dbb 00       		.byte	0
 5247              		.section	.debug_abbrev,"",%progbits
 5248              	.Ldebug_abbrev0:
 5249 0000 01       		.uleb128 0x1
 5250 0001 11       		.uleb128 0x11
 5251 0002 01       		.byte	0x1
 5252 0003 25       		.uleb128 0x25
 5253 0004 0E       		.uleb128 0xe
 5254 0005 13       		.uleb128 0x13
 5255 0006 0B       		.uleb128 0xb
 5256 0007 03       		.uleb128 0x3
 5257 0008 0E       		.uleb128 0xe
 5258 0009 1B       		.uleb128 0x1b
 5259 000a 0E       		.uleb128 0xe
 5260 000b 55       		.uleb128 0x55
 5261 000c 17       		.uleb128 0x17
 5262 000d 11       		.uleb128 0x11
 5263 000e 01       		.uleb128 0x1
 5264 000f 10       		.uleb128 0x10
 5265 0010 17       		.uleb128 0x17
 5266 0011 00       		.byte	0
 5267 0012 00       		.byte	0
 5268 0013 02       		.uleb128 0x2
 5269 0014 24       		.uleb128 0x24
 5270 0015 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 117


 5271 0016 0B       		.uleb128 0xb
 5272 0017 0B       		.uleb128 0xb
 5273 0018 3E       		.uleb128 0x3e
 5274 0019 0B       		.uleb128 0xb
 5275 001a 03       		.uleb128 0x3
 5276 001b 0E       		.uleb128 0xe
 5277 001c 00       		.byte	0
 5278 001d 00       		.byte	0
 5279 001e 03       		.uleb128 0x3
 5280 001f 16       		.uleb128 0x16
 5281 0020 00       		.byte	0
 5282 0021 03       		.uleb128 0x3
 5283 0022 0E       		.uleb128 0xe
 5284 0023 3A       		.uleb128 0x3a
 5285 0024 0B       		.uleb128 0xb
 5286 0025 3B       		.uleb128 0x3b
 5287 0026 0B       		.uleb128 0xb
 5288 0027 49       		.uleb128 0x49
 5289 0028 13       		.uleb128 0x13
 5290 0029 00       		.byte	0
 5291 002a 00       		.byte	0
 5292 002b 04       		.uleb128 0x4
 5293 002c 24       		.uleb128 0x24
 5294 002d 00       		.byte	0
 5295 002e 0B       		.uleb128 0xb
 5296 002f 0B       		.uleb128 0xb
 5297 0030 3E       		.uleb128 0x3e
 5298 0031 0B       		.uleb128 0xb
 5299 0032 03       		.uleb128 0x3
 5300 0033 08       		.uleb128 0x8
 5301 0034 00       		.byte	0
 5302 0035 00       		.byte	0
 5303 0036 05       		.uleb128 0x5
 5304 0037 16       		.uleb128 0x16
 5305 0038 00       		.byte	0
 5306 0039 03       		.uleb128 0x3
 5307 003a 0E       		.uleb128 0xe
 5308 003b 3A       		.uleb128 0x3a
 5309 003c 0B       		.uleb128 0xb
 5310 003d 3B       		.uleb128 0x3b
 5311 003e 05       		.uleb128 0x5
 5312 003f 49       		.uleb128 0x49
 5313 0040 13       		.uleb128 0x13
 5314 0041 00       		.byte	0
 5315 0042 00       		.byte	0
 5316 0043 06       		.uleb128 0x6
 5317 0044 0F       		.uleb128 0xf
 5318 0045 00       		.byte	0
 5319 0046 0B       		.uleb128 0xb
 5320 0047 0B       		.uleb128 0xb
 5321 0048 49       		.uleb128 0x49
 5322 0049 13       		.uleb128 0x13
 5323 004a 00       		.byte	0
 5324 004b 00       		.byte	0
 5325 004c 07       		.uleb128 0x7
 5326 004d 26       		.uleb128 0x26
 5327 004e 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 118


 5328 004f 49       		.uleb128 0x49
 5329 0050 13       		.uleb128 0x13
 5330 0051 00       		.byte	0
 5331 0052 00       		.byte	0
 5332 0053 08       		.uleb128 0x8
 5333 0054 01       		.uleb128 0x1
 5334 0055 01       		.byte	0x1
 5335 0056 49       		.uleb128 0x49
 5336 0057 13       		.uleb128 0x13
 5337 0058 01       		.uleb128 0x1
 5338 0059 13       		.uleb128 0x13
 5339 005a 00       		.byte	0
 5340 005b 00       		.byte	0
 5341 005c 09       		.uleb128 0x9
 5342 005d 21       		.uleb128 0x21
 5343 005e 00       		.byte	0
 5344 005f 49       		.uleb128 0x49
 5345 0060 13       		.uleb128 0x13
 5346 0061 2F       		.uleb128 0x2f
 5347 0062 0B       		.uleb128 0xb
 5348 0063 00       		.byte	0
 5349 0064 00       		.byte	0
 5350 0065 0A       		.uleb128 0xa
 5351 0066 13       		.uleb128 0x13
 5352 0067 01       		.byte	0x1
 5353 0068 03       		.uleb128 0x3
 5354 0069 08       		.uleb128 0x8
 5355 006a 0B       		.uleb128 0xb
 5356 006b 0B       		.uleb128 0xb
 5357 006c 3A       		.uleb128 0x3a
 5358 006d 0B       		.uleb128 0xb
 5359 006e 3B       		.uleb128 0x3b
 5360 006f 0B       		.uleb128 0xb
 5361 0070 01       		.uleb128 0x1
 5362 0071 13       		.uleb128 0x13
 5363 0072 00       		.byte	0
 5364 0073 00       		.byte	0
 5365 0074 0B       		.uleb128 0xb
 5366 0075 0D       		.uleb128 0xd
 5367 0076 00       		.byte	0
 5368 0077 03       		.uleb128 0x3
 5369 0078 0E       		.uleb128 0xe
 5370 0079 3A       		.uleb128 0x3a
 5371 007a 0B       		.uleb128 0xb
 5372 007b 3B       		.uleb128 0x3b
 5373 007c 0B       		.uleb128 0xb
 5374 007d 49       		.uleb128 0x49
 5375 007e 13       		.uleb128 0x13
 5376 007f 38       		.uleb128 0x38
 5377 0080 0B       		.uleb128 0xb
 5378 0081 00       		.byte	0
 5379 0082 00       		.byte	0
 5380 0083 0C       		.uleb128 0xc
 5381 0084 13       		.uleb128 0x13
 5382 0085 01       		.byte	0x1
 5383 0086 0B       		.uleb128 0xb
 5384 0087 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 119


 5385 0088 3A       		.uleb128 0x3a
 5386 0089 0B       		.uleb128 0xb
 5387 008a 3B       		.uleb128 0x3b
 5388 008b 0B       		.uleb128 0xb
 5389 008c 01       		.uleb128 0x1
 5390 008d 13       		.uleb128 0x13
 5391 008e 00       		.byte	0
 5392 008f 00       		.byte	0
 5393 0090 0D       		.uleb128 0xd
 5394 0091 13       		.uleb128 0x13
 5395 0092 01       		.byte	0x1
 5396 0093 0B       		.uleb128 0xb
 5397 0094 0B       		.uleb128 0xb
 5398 0095 3A       		.uleb128 0x3a
 5399 0096 0B       		.uleb128 0xb
 5400 0097 3B       		.uleb128 0x3b
 5401 0098 0B       		.uleb128 0xb
 5402 0099 01       		.uleb128 0x1
 5403 009a 13       		.uleb128 0x13
 5404 009b 00       		.byte	0
 5405 009c 00       		.byte	0
 5406 009d 0E       		.uleb128 0xe
 5407 009e 0D       		.uleb128 0xd
 5408 009f 00       		.byte	0
 5409 00a0 03       		.uleb128 0x3
 5410 00a1 08       		.uleb128 0x8
 5411 00a2 3A       		.uleb128 0x3a
 5412 00a3 0B       		.uleb128 0xb
 5413 00a4 3B       		.uleb128 0x3b
 5414 00a5 0B       		.uleb128 0xb
 5415 00a6 49       		.uleb128 0x49
 5416 00a7 13       		.uleb128 0x13
 5417 00a8 38       		.uleb128 0x38
 5418 00a9 0B       		.uleb128 0xb
 5419 00aa 00       		.byte	0
 5420 00ab 00       		.byte	0
 5421 00ac 0F       		.uleb128 0xf
 5422 00ad 35       		.uleb128 0x35
 5423 00ae 00       		.byte	0
 5424 00af 49       		.uleb128 0x49
 5425 00b0 13       		.uleb128 0x13
 5426 00b1 00       		.byte	0
 5427 00b2 00       		.byte	0
 5428 00b3 10       		.uleb128 0x10
 5429 00b4 2E       		.uleb128 0x2e
 5430 00b5 00       		.byte	0
 5431 00b6 3F       		.uleb128 0x3f
 5432 00b7 19       		.uleb128 0x19
 5433 00b8 03       		.uleb128 0x3
 5434 00b9 0E       		.uleb128 0xe
 5435 00ba 3A       		.uleb128 0x3a
 5436 00bb 0B       		.uleb128 0xb
 5437 00bc 3B       		.uleb128 0x3b
 5438 00bd 0B       		.uleb128 0xb
 5439 00be 27       		.uleb128 0x27
 5440 00bf 19       		.uleb128 0x19
 5441 00c0 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 120


 5442 00c1 01       		.uleb128 0x1
 5443 00c2 12       		.uleb128 0x12
 5444 00c3 06       		.uleb128 0x6
 5445 00c4 40       		.uleb128 0x40
 5446 00c5 18       		.uleb128 0x18
 5447 00c6 9642     		.uleb128 0x2116
 5448 00c8 19       		.uleb128 0x19
 5449 00c9 00       		.byte	0
 5450 00ca 00       		.byte	0
 5451 00cb 11       		.uleb128 0x11
 5452 00cc 2E       		.uleb128 0x2e
 5453 00cd 00       		.byte	0
 5454 00ce 3F       		.uleb128 0x3f
 5455 00cf 19       		.uleb128 0x19
 5456 00d0 03       		.uleb128 0x3
 5457 00d1 0E       		.uleb128 0xe
 5458 00d2 3A       		.uleb128 0x3a
 5459 00d3 0B       		.uleb128 0xb
 5460 00d4 3B       		.uleb128 0x3b
 5461 00d5 0B       		.uleb128 0xb
 5462 00d6 11       		.uleb128 0x11
 5463 00d7 01       		.uleb128 0x1
 5464 00d8 12       		.uleb128 0x12
 5465 00d9 06       		.uleb128 0x6
 5466 00da 40       		.uleb128 0x40
 5467 00db 18       		.uleb128 0x18
 5468 00dc 9642     		.uleb128 0x2116
 5469 00de 19       		.uleb128 0x19
 5470 00df 00       		.byte	0
 5471 00e0 00       		.byte	0
 5472 00e1 12       		.uleb128 0x12
 5473 00e2 2E       		.uleb128 0x2e
 5474 00e3 01       		.byte	0x1
 5475 00e4 3F       		.uleb128 0x3f
 5476 00e5 19       		.uleb128 0x19
 5477 00e6 03       		.uleb128 0x3
 5478 00e7 0E       		.uleb128 0xe
 5479 00e8 3A       		.uleb128 0x3a
 5480 00e9 0B       		.uleb128 0xb
 5481 00ea 3B       		.uleb128 0x3b
 5482 00eb 0B       		.uleb128 0xb
 5483 00ec 49       		.uleb128 0x49
 5484 00ed 13       		.uleb128 0x13
 5485 00ee 11       		.uleb128 0x11
 5486 00ef 01       		.uleb128 0x1
 5487 00f0 12       		.uleb128 0x12
 5488 00f1 06       		.uleb128 0x6
 5489 00f2 40       		.uleb128 0x40
 5490 00f3 18       		.uleb128 0x18
 5491 00f4 9642     		.uleb128 0x2116
 5492 00f6 19       		.uleb128 0x19
 5493 00f7 01       		.uleb128 0x1
 5494 00f8 13       		.uleb128 0x13
 5495 00f9 00       		.byte	0
 5496 00fa 00       		.byte	0
 5497 00fb 13       		.uleb128 0x13
 5498 00fc 34       		.uleb128 0x34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 121


 5499 00fd 00       		.byte	0
 5500 00fe 03       		.uleb128 0x3
 5501 00ff 0E       		.uleb128 0xe
 5502 0100 3A       		.uleb128 0x3a
 5503 0101 0B       		.uleb128 0xb
 5504 0102 3B       		.uleb128 0x3b
 5505 0103 0B       		.uleb128 0xb
 5506 0104 49       		.uleb128 0x49
 5507 0105 13       		.uleb128 0x13
 5508 0106 02       		.uleb128 0x2
 5509 0107 18       		.uleb128 0x18
 5510 0108 00       		.byte	0
 5511 0109 00       		.byte	0
 5512 010a 14       		.uleb128 0x14
 5513 010b 0B       		.uleb128 0xb
 5514 010c 01       		.byte	0x1
 5515 010d 11       		.uleb128 0x11
 5516 010e 01       		.uleb128 0x1
 5517 010f 12       		.uleb128 0x12
 5518 0110 06       		.uleb128 0x6
 5519 0111 00       		.byte	0
 5520 0112 00       		.byte	0
 5521 0113 15       		.uleb128 0x15
 5522 0114 2E       		.uleb128 0x2e
 5523 0115 01       		.byte	0x1
 5524 0116 3F       		.uleb128 0x3f
 5525 0117 19       		.uleb128 0x19
 5526 0118 03       		.uleb128 0x3
 5527 0119 0E       		.uleb128 0xe
 5528 011a 3A       		.uleb128 0x3a
 5529 011b 0B       		.uleb128 0xb
 5530 011c 3B       		.uleb128 0x3b
 5531 011d 0B       		.uleb128 0xb
 5532 011e 27       		.uleb128 0x27
 5533 011f 19       		.uleb128 0x19
 5534 0120 49       		.uleb128 0x49
 5535 0121 13       		.uleb128 0x13
 5536 0122 11       		.uleb128 0x11
 5537 0123 01       		.uleb128 0x1
 5538 0124 12       		.uleb128 0x12
 5539 0125 06       		.uleb128 0x6
 5540 0126 40       		.uleb128 0x40
 5541 0127 18       		.uleb128 0x18
 5542 0128 9642     		.uleb128 0x2116
 5543 012a 19       		.uleb128 0x19
 5544 012b 01       		.uleb128 0x1
 5545 012c 13       		.uleb128 0x13
 5546 012d 00       		.byte	0
 5547 012e 00       		.byte	0
 5548 012f 16       		.uleb128 0x16
 5549 0130 05       		.uleb128 0x5
 5550 0131 00       		.byte	0
 5551 0132 03       		.uleb128 0x3
 5552 0133 0E       		.uleb128 0xe
 5553 0134 3A       		.uleb128 0x3a
 5554 0135 0B       		.uleb128 0xb
 5555 0136 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 122


 5556 0137 0B       		.uleb128 0xb
 5557 0138 49       		.uleb128 0x49
 5558 0139 13       		.uleb128 0x13
 5559 013a 02       		.uleb128 0x2
 5560 013b 18       		.uleb128 0x18
 5561 013c 00       		.byte	0
 5562 013d 00       		.byte	0
 5563 013e 17       		.uleb128 0x17
 5564 013f 34       		.uleb128 0x34
 5565 0140 00       		.byte	0
 5566 0141 03       		.uleb128 0x3
 5567 0142 08       		.uleb128 0x8
 5568 0143 3A       		.uleb128 0x3a
 5569 0144 0B       		.uleb128 0xb
 5570 0145 3B       		.uleb128 0x3b
 5571 0146 0B       		.uleb128 0xb
 5572 0147 49       		.uleb128 0x49
 5573 0148 13       		.uleb128 0x13
 5574 0149 02       		.uleb128 0x2
 5575 014a 18       		.uleb128 0x18
 5576 014b 00       		.byte	0
 5577 014c 00       		.byte	0
 5578 014d 18       		.uleb128 0x18
 5579 014e 2E       		.uleb128 0x2e
 5580 014f 01       		.byte	0x1
 5581 0150 3F       		.uleb128 0x3f
 5582 0151 19       		.uleb128 0x19
 5583 0152 03       		.uleb128 0x3
 5584 0153 0E       		.uleb128 0xe
 5585 0154 3A       		.uleb128 0x3a
 5586 0155 0B       		.uleb128 0xb
 5587 0156 3B       		.uleb128 0x3b
 5588 0157 05       		.uleb128 0x5
 5589 0158 27       		.uleb128 0x27
 5590 0159 19       		.uleb128 0x19
 5591 015a 49       		.uleb128 0x49
 5592 015b 13       		.uleb128 0x13
 5593 015c 11       		.uleb128 0x11
 5594 015d 01       		.uleb128 0x1
 5595 015e 12       		.uleb128 0x12
 5596 015f 06       		.uleb128 0x6
 5597 0160 40       		.uleb128 0x40
 5598 0161 18       		.uleb128 0x18
 5599 0162 9642     		.uleb128 0x2116
 5600 0164 19       		.uleb128 0x19
 5601 0165 01       		.uleb128 0x1
 5602 0166 13       		.uleb128 0x13
 5603 0167 00       		.byte	0
 5604 0168 00       		.byte	0
 5605 0169 19       		.uleb128 0x19
 5606 016a 05       		.uleb128 0x5
 5607 016b 00       		.byte	0
 5608 016c 03       		.uleb128 0x3
 5609 016d 0E       		.uleb128 0xe
 5610 016e 3A       		.uleb128 0x3a
 5611 016f 0B       		.uleb128 0xb
 5612 0170 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 123


 5613 0171 05       		.uleb128 0x5
 5614 0172 49       		.uleb128 0x49
 5615 0173 13       		.uleb128 0x13
 5616 0174 02       		.uleb128 0x2
 5617 0175 18       		.uleb128 0x18
 5618 0176 00       		.byte	0
 5619 0177 00       		.byte	0
 5620 0178 1A       		.uleb128 0x1a
 5621 0179 34       		.uleb128 0x34
 5622 017a 00       		.byte	0
 5623 017b 03       		.uleb128 0x3
 5624 017c 08       		.uleb128 0x8
 5625 017d 3A       		.uleb128 0x3a
 5626 017e 0B       		.uleb128 0xb
 5627 017f 3B       		.uleb128 0x3b
 5628 0180 05       		.uleb128 0x5
 5629 0181 49       		.uleb128 0x49
 5630 0182 13       		.uleb128 0x13
 5631 0183 02       		.uleb128 0x2
 5632 0184 18       		.uleb128 0x18
 5633 0185 00       		.byte	0
 5634 0186 00       		.byte	0
 5635 0187 1B       		.uleb128 0x1b
 5636 0188 2E       		.uleb128 0x2e
 5637 0189 01       		.byte	0x1
 5638 018a 3F       		.uleb128 0x3f
 5639 018b 19       		.uleb128 0x19
 5640 018c 03       		.uleb128 0x3
 5641 018d 0E       		.uleb128 0xe
 5642 018e 3A       		.uleb128 0x3a
 5643 018f 0B       		.uleb128 0xb
 5644 0190 3B       		.uleb128 0x3b
 5645 0191 05       		.uleb128 0x5
 5646 0192 49       		.uleb128 0x49
 5647 0193 13       		.uleb128 0x13
 5648 0194 11       		.uleb128 0x11
 5649 0195 01       		.uleb128 0x1
 5650 0196 12       		.uleb128 0x12
 5651 0197 06       		.uleb128 0x6
 5652 0198 40       		.uleb128 0x40
 5653 0199 18       		.uleb128 0x18
 5654 019a 9642     		.uleb128 0x2116
 5655 019c 19       		.uleb128 0x19
 5656 019d 01       		.uleb128 0x1
 5657 019e 13       		.uleb128 0x13
 5658 019f 00       		.byte	0
 5659 01a0 00       		.byte	0
 5660 01a1 1C       		.uleb128 0x1c
 5661 01a2 34       		.uleb128 0x34
 5662 01a3 00       		.byte	0
 5663 01a4 03       		.uleb128 0x3
 5664 01a5 0E       		.uleb128 0xe
 5665 01a6 3A       		.uleb128 0x3a
 5666 01a7 0B       		.uleb128 0xb
 5667 01a8 3B       		.uleb128 0x3b
 5668 01a9 05       		.uleb128 0x5
 5669 01aa 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 124


 5670 01ab 13       		.uleb128 0x13
 5671 01ac 02       		.uleb128 0x2
 5672 01ad 18       		.uleb128 0x18
 5673 01ae 00       		.byte	0
 5674 01af 00       		.byte	0
 5675 01b0 1D       		.uleb128 0x1d
 5676 01b1 2E       		.uleb128 0x2e
 5677 01b2 00       		.byte	0
 5678 01b3 3F       		.uleb128 0x3f
 5679 01b4 19       		.uleb128 0x19
 5680 01b5 03       		.uleb128 0x3
 5681 01b6 0E       		.uleb128 0xe
 5682 01b7 3A       		.uleb128 0x3a
 5683 01b8 0B       		.uleb128 0xb
 5684 01b9 3B       		.uleb128 0x3b
 5685 01ba 05       		.uleb128 0x5
 5686 01bb 11       		.uleb128 0x11
 5687 01bc 01       		.uleb128 0x1
 5688 01bd 12       		.uleb128 0x12
 5689 01be 06       		.uleb128 0x6
 5690 01bf 40       		.uleb128 0x40
 5691 01c0 18       		.uleb128 0x18
 5692 01c1 9642     		.uleb128 0x2116
 5693 01c3 19       		.uleb128 0x19
 5694 01c4 00       		.byte	0
 5695 01c5 00       		.byte	0
 5696 01c6 1E       		.uleb128 0x1e
 5697 01c7 2E       		.uleb128 0x2e
 5698 01c8 00       		.byte	0
 5699 01c9 3F       		.uleb128 0x3f
 5700 01ca 19       		.uleb128 0x19
 5701 01cb 03       		.uleb128 0x3
 5702 01cc 0E       		.uleb128 0xe
 5703 01cd 3A       		.uleb128 0x3a
 5704 01ce 0B       		.uleb128 0xb
 5705 01cf 3B       		.uleb128 0x3b
 5706 01d0 05       		.uleb128 0x5
 5707 01d1 49       		.uleb128 0x49
 5708 01d2 13       		.uleb128 0x13
 5709 01d3 11       		.uleb128 0x11
 5710 01d4 01       		.uleb128 0x1
 5711 01d5 12       		.uleb128 0x12
 5712 01d6 06       		.uleb128 0x6
 5713 01d7 40       		.uleb128 0x40
 5714 01d8 18       		.uleb128 0x18
 5715 01d9 9642     		.uleb128 0x2116
 5716 01db 19       		.uleb128 0x19
 5717 01dc 00       		.byte	0
 5718 01dd 00       		.byte	0
 5719 01de 1F       		.uleb128 0x1f
 5720 01df 2E       		.uleb128 0x2e
 5721 01e0 01       		.byte	0x1
 5722 01e1 3F       		.uleb128 0x3f
 5723 01e2 19       		.uleb128 0x19
 5724 01e3 03       		.uleb128 0x3
 5725 01e4 0E       		.uleb128 0xe
 5726 01e5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 125


 5727 01e6 0B       		.uleb128 0xb
 5728 01e7 3B       		.uleb128 0x3b
 5729 01e8 05       		.uleb128 0x5
 5730 01e9 11       		.uleb128 0x11
 5731 01ea 01       		.uleb128 0x1
 5732 01eb 12       		.uleb128 0x12
 5733 01ec 06       		.uleb128 0x6
 5734 01ed 40       		.uleb128 0x40
 5735 01ee 18       		.uleb128 0x18
 5736 01ef 9642     		.uleb128 0x2116
 5737 01f1 19       		.uleb128 0x19
 5738 01f2 01       		.uleb128 0x1
 5739 01f3 13       		.uleb128 0x13
 5740 01f4 00       		.byte	0
 5741 01f5 00       		.byte	0
 5742 01f6 20       		.uleb128 0x20
 5743 01f7 2E       		.uleb128 0x2e
 5744 01f8 00       		.byte	0
 5745 01f9 3F       		.uleb128 0x3f
 5746 01fa 19       		.uleb128 0x19
 5747 01fb 03       		.uleb128 0x3
 5748 01fc 0E       		.uleb128 0xe
 5749 01fd 3A       		.uleb128 0x3a
 5750 01fe 0B       		.uleb128 0xb
 5751 01ff 3B       		.uleb128 0x3b
 5752 0200 05       		.uleb128 0x5
 5753 0201 11       		.uleb128 0x11
 5754 0202 01       		.uleb128 0x1
 5755 0203 12       		.uleb128 0x12
 5756 0204 06       		.uleb128 0x6
 5757 0205 40       		.uleb128 0x40
 5758 0206 18       		.uleb128 0x18
 5759 0207 9742     		.uleb128 0x2117
 5760 0209 19       		.uleb128 0x19
 5761 020a 00       		.byte	0
 5762 020b 00       		.byte	0
 5763 020c 21       		.uleb128 0x21
 5764 020d 0B       		.uleb128 0xb
 5765 020e 01       		.byte	0x1
 5766 020f 55       		.uleb128 0x55
 5767 0210 17       		.uleb128 0x17
 5768 0211 00       		.byte	0
 5769 0212 00       		.byte	0
 5770 0213 22       		.uleb128 0x22
 5771 0214 2E       		.uleb128 0x2e
 5772 0215 00       		.byte	0
 5773 0216 3F       		.uleb128 0x3f
 5774 0217 19       		.uleb128 0x19
 5775 0218 03       		.uleb128 0x3
 5776 0219 0E       		.uleb128 0xe
 5777 021a 3A       		.uleb128 0x3a
 5778 021b 0B       		.uleb128 0xb
 5779 021c 3B       		.uleb128 0x3b
 5780 021d 05       		.uleb128 0x5
 5781 021e 49       		.uleb128 0x49
 5782 021f 13       		.uleb128 0x13
 5783 0220 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 126


 5784 0221 01       		.uleb128 0x1
 5785 0222 12       		.uleb128 0x12
 5786 0223 06       		.uleb128 0x6
 5787 0224 40       		.uleb128 0x40
 5788 0225 18       		.uleb128 0x18
 5789 0226 9742     		.uleb128 0x2117
 5790 0228 19       		.uleb128 0x19
 5791 0229 00       		.byte	0
 5792 022a 00       		.byte	0
 5793 022b 23       		.uleb128 0x23
 5794 022c 34       		.uleb128 0x34
 5795 022d 00       		.byte	0
 5796 022e 03       		.uleb128 0x3
 5797 022f 0E       		.uleb128 0xe
 5798 0230 3A       		.uleb128 0x3a
 5799 0231 0B       		.uleb128 0xb
 5800 0232 3B       		.uleb128 0x3b
 5801 0233 05       		.uleb128 0x5
 5802 0234 49       		.uleb128 0x49
 5803 0235 13       		.uleb128 0x13
 5804 0236 3F       		.uleb128 0x3f
 5805 0237 19       		.uleb128 0x19
 5806 0238 3C       		.uleb128 0x3c
 5807 0239 19       		.uleb128 0x19
 5808 023a 00       		.byte	0
 5809 023b 00       		.byte	0
 5810 023c 24       		.uleb128 0x24
 5811 023d 34       		.uleb128 0x34
 5812 023e 00       		.byte	0
 5813 023f 03       		.uleb128 0x3
 5814 0240 0E       		.uleb128 0xe
 5815 0241 3A       		.uleb128 0x3a
 5816 0242 0B       		.uleb128 0xb
 5817 0243 3B       		.uleb128 0x3b
 5818 0244 0B       		.uleb128 0xb
 5819 0245 49       		.uleb128 0x49
 5820 0246 13       		.uleb128 0x13
 5821 0247 3F       		.uleb128 0x3f
 5822 0248 19       		.uleb128 0x19
 5823 0249 02       		.uleb128 0x2
 5824 024a 18       		.uleb128 0x18
 5825 024b 00       		.byte	0
 5826 024c 00       		.byte	0
 5827 024d 25       		.uleb128 0x25
 5828 024e 21       		.uleb128 0x21
 5829 024f 00       		.byte	0
 5830 0250 49       		.uleb128 0x49
 5831 0251 13       		.uleb128 0x13
 5832 0252 2F       		.uleb128 0x2f
 5833 0253 05       		.uleb128 0x5
 5834 0254 00       		.byte	0
 5835 0255 00       		.byte	0
 5836 0256 26       		.uleb128 0x26
 5837 0257 34       		.uleb128 0x34
 5838 0258 00       		.byte	0
 5839 0259 03       		.uleb128 0x3
 5840 025a 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 127


 5841 025b 3A       		.uleb128 0x3a
 5842 025c 0B       		.uleb128 0xb
 5843 025d 3B       		.uleb128 0x3b
 5844 025e 0B       		.uleb128 0xb
 5845 025f 49       		.uleb128 0x49
 5846 0260 13       		.uleb128 0x13
 5847 0261 3F       		.uleb128 0x3f
 5848 0262 19       		.uleb128 0x19
 5849 0263 02       		.uleb128 0x2
 5850 0264 18       		.uleb128 0x18
 5851 0265 00       		.byte	0
 5852 0266 00       		.byte	0
 5853 0267 00       		.byte	0
 5854              		.section	.debug_aranges,"",%progbits
 5855 0000 D4000000 		.4byte	0xd4
 5856 0004 0200     		.2byte	0x2
 5857 0006 00000000 		.4byte	.Ldebug_info0
 5858 000a 04       		.byte	0x4
 5859 000b 00       		.byte	0
 5860 000c 0000     		.2byte	0
 5861 000e 0000     		.2byte	0
 5862 0010 00000000 		.4byte	.LFB64
 5863 0014 44000000 		.4byte	.LFE64-.LFB64
 5864 0018 00000000 		.4byte	.LFB65
 5865 001c 6C000000 		.4byte	.LFE65-.LFB65
 5866 0020 00000000 		.4byte	.LFB66
 5867 0024 32000000 		.4byte	.LFE66-.LFB66
 5868 0028 00000000 		.4byte	.LFB67
 5869 002c 20000000 		.4byte	.LFE67-.LFB67
 5870 0030 00000000 		.4byte	.LFB68
 5871 0034 40000000 		.4byte	.LFE68-.LFB68
 5872 0038 00000000 		.4byte	.LFB69
 5873 003c DC000000 		.4byte	.LFE69-.LFB69
 5874 0040 00000000 		.4byte	.LFB70
 5875 0044 1C000000 		.4byte	.LFE70-.LFB70
 5876 0048 00000000 		.4byte	.LFB71
 5877 004c 28000000 		.4byte	.LFE71-.LFB71
 5878 0050 00000000 		.4byte	.LFB72
 5879 0054 C8000000 		.4byte	.LFE72-.LFB72
 5880 0058 00000000 		.4byte	.LFB73
 5881 005c 00010000 		.4byte	.LFE73-.LFB73
 5882 0060 00000000 		.4byte	.LFB74
 5883 0064 78000000 		.4byte	.LFE74-.LFB74
 5884 0068 00000000 		.4byte	.LFB75
 5885 006c 74010000 		.4byte	.LFE75-.LFB75
 5886 0070 00000000 		.4byte	.LFB76
 5887 0074 B8000000 		.4byte	.LFE76-.LFB76
 5888 0078 00000000 		.4byte	.LFB77
 5889 007c 1C000000 		.4byte	.LFE77-.LFB77
 5890 0080 00000000 		.4byte	.LFB78
 5891 0084 28000000 		.4byte	.LFE78-.LFB78
 5892 0088 00000000 		.4byte	.LFB79
 5893 008c 84000000 		.4byte	.LFE79-.LFB79
 5894 0090 00000000 		.4byte	.LFB80
 5895 0094 48000000 		.4byte	.LFE80-.LFB80
 5896 0098 00000000 		.4byte	.LFB81
 5897 009c B8060000 		.4byte	.LFE81-.LFB81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 128


 5898 00a0 00000000 		.4byte	.LFB82
 5899 00a4 68010000 		.4byte	.LFE82-.LFB82
 5900 00a8 00000000 		.4byte	.LFB83
 5901 00ac 44010000 		.4byte	.LFE83-.LFB83
 5902 00b0 00000000 		.4byte	.LFB84
 5903 00b4 14000000 		.4byte	.LFE84-.LFB84
 5904 00b8 00000000 		.4byte	.LFB85
 5905 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5906 00c0 00000000 		.4byte	.LFB86
 5907 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5908 00c8 00000000 		.4byte	.LFB87
 5909 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5910 00d0 00000000 		.4byte	0
 5911 00d4 00000000 		.4byte	0
 5912              		.section	.debug_ranges,"",%progbits
 5913              	.Ldebug_ranges0:
 5914 0000 AE030000 		.4byte	.LBB9
 5915 0004 3A060000 		.4byte	.LBE9
 5916 0008 3C060000 		.4byte	.LBB10
 5917 000c 44060000 		.4byte	.LBE10
 5918 0010 46060000 		.4byte	.LBB11
 5919 0014 4E060000 		.4byte	.LBE11
 5920 0018 00000000 		.4byte	0
 5921 001c 00000000 		.4byte	0
 5922 0020 00000000 		.4byte	.LFB64
 5923 0024 44000000 		.4byte	.LFE64
 5924 0028 00000000 		.4byte	.LFB65
 5925 002c 6C000000 		.4byte	.LFE65
 5926 0030 00000000 		.4byte	.LFB66
 5927 0034 32000000 		.4byte	.LFE66
 5928 0038 00000000 		.4byte	.LFB67
 5929 003c 20000000 		.4byte	.LFE67
 5930 0040 00000000 		.4byte	.LFB68
 5931 0044 40000000 		.4byte	.LFE68
 5932 0048 00000000 		.4byte	.LFB69
 5933 004c DC000000 		.4byte	.LFE69
 5934 0050 00000000 		.4byte	.LFB70
 5935 0054 1C000000 		.4byte	.LFE70
 5936 0058 00000000 		.4byte	.LFB71
 5937 005c 28000000 		.4byte	.LFE71
 5938 0060 00000000 		.4byte	.LFB72
 5939 0064 C8000000 		.4byte	.LFE72
 5940 0068 00000000 		.4byte	.LFB73
 5941 006c 00010000 		.4byte	.LFE73
 5942 0070 00000000 		.4byte	.LFB74
 5943 0074 78000000 		.4byte	.LFE74
 5944 0078 00000000 		.4byte	.LFB75
 5945 007c 74010000 		.4byte	.LFE75
 5946 0080 00000000 		.4byte	.LFB76
 5947 0084 B8000000 		.4byte	.LFE76
 5948 0088 00000000 		.4byte	.LFB77
 5949 008c 1C000000 		.4byte	.LFE77
 5950 0090 00000000 		.4byte	.LFB78
 5951 0094 28000000 		.4byte	.LFE78
 5952 0098 00000000 		.4byte	.LFB79
 5953 009c 84000000 		.4byte	.LFE79
 5954 00a0 00000000 		.4byte	.LFB80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 129


 5955 00a4 48000000 		.4byte	.LFE80
 5956 00a8 00000000 		.4byte	.LFB81
 5957 00ac B8060000 		.4byte	.LFE81
 5958 00b0 00000000 		.4byte	.LFB82
 5959 00b4 68010000 		.4byte	.LFE82
 5960 00b8 00000000 		.4byte	.LFB83
 5961 00bc 44010000 		.4byte	.LFE83
 5962 00c0 00000000 		.4byte	.LFB84
 5963 00c4 14000000 		.4byte	.LFE84
 5964 00c8 00000000 		.4byte	.LFB85
 5965 00cc 1A000000 		.4byte	.LFE85
 5966 00d0 00000000 		.4byte	.LFB86
 5967 00d4 2A000000 		.4byte	.LFE86
 5968 00d8 00000000 		.4byte	.LFB87
 5969 00dc 7C020000 		.4byte	.LFE87
 5970 00e0 00000000 		.4byte	0
 5971 00e4 00000000 		.4byte	0
 5972              		.section	.debug_line,"",%progbits
 5973              	.Ldebug_line0:
 5974 0000 0D060000 		.section	.debug_str,"MS",%progbits,1
 5974      02003602 
 5974      00000201 
 5974      FB0E0D00 
 5974      01010101 
 5975              	.LASF185:
 5976 0000 74696D65 		.ascii	"timeToValve\000"
 5976      546F5661 
 5976      6C766500 
 5977              	.LASF144:
 5978 000c 676D745F 		.ascii	"gmt_offset\000"
 5978      6F666673 
 5978      657400
 5979              	.LASF16:
 5980 0017 75696E74 		.ascii	"uint16\000"
 5980      313600
 5981              	.LASF38:
 5982 001e 76616C75 		.ascii	"value\000"
 5982      6500
 5983              	.LASF27:
 5984 0024 746D5F68 		.ascii	"tm_hour\000"
 5984      6F757200 
 5985              	.LASF32:
 5986 002c 746D5F79 		.ascii	"tm_yday\000"
 5986      64617900 
 5987              	.LASF190:
 5988 0034 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5988      73657273 
 5988      5C64616E 
 5988      747A5C44 
 5988      6F63756D 
 5989 0061 72694F53 		.ascii	"riOS.cydsn\000"
 5989      2E637964 
 5989      736E00
 5990              	.LASF152:
 5991 006c 62756666 		.ascii	"buffer_overflow\000"
 5991      65725F6F 
 5991      76657266 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 130


 5991      6C6F7700 
 5992              	.LASF4:
 5993 007c 5F5F7569 		.ascii	"__uint8_t\000"
 5993      6E74385F 
 5993      7400
 5994              	.LASF73:
 5995 0086 636F756E 		.ascii	"countDownResetCondition\000"
 5995      74446F77 
 5995      6E526573 
 5995      6574436F 
 5995      6E646974 
 5996              	.LASF54:
 5997 009e 6C6F6E67 		.ascii	"longitude\000"
 5997      69747564 
 5997      6500
 5998              	.LASF188:
 5999 00a8 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5999      43313120 
 5999      352E342E 
 5999      31203230 
 5999      31363036 
 6000 00db 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6000      20726576 
 6000      6973696F 
 6000      6E203233 
 6000      37373135 
 6001 010e 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 6001      66756E63 
 6001      74696F6E 
 6001      2D736563 
 6001      74696F6E 
 6002              	.LASF147:
 6003 0136 6D6F6465 		.ascii	"modem_wakeup\000"
 6003      6D5F7761 
 6003      6B657570 
 6003      00
 6004              	.LASF10:
 6005 0143 6C6F6E67 		.ascii	"long long unsigned int\000"
 6005      206C6F6E 
 6005      6720756E 
 6005      7369676E 
 6005      65642069 
 6006              	.LASF128:
 6007 015a 73616D70 		.ascii	"sample_freq\000"
 6007      6C655F66 
 6007      72657100 
 6008              	.LASF156:
 6009 0166 6D6F6465 		.ascii	"modem_state\000"
 6009      6D5F7374 
 6009      61746500 
 6010              	.LASF100:
 6011 0172 74657374 		.ascii	"test\000"
 6011      00
 6012              	.LASF173:
 6013 0177 616C6172 		.ascii	"alarmMeasure\000"
 6013      6D4D6561 
 6013      73757265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 131


 6013      00
 6014              	.LASF151:
 6015 0184 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6015      52784275 
 6015      66666572 
 6015      00
 6016              	.LASF181:
 6017 0191 74696D65 		.ascii	"timetoLevelSensor\000"
 6017      746F4C65 
 6017      76656C53 
 6017      656E736F 
 6017      7200
 6018              	.LASF158:
 6019 01a3 6D6F6465 		.ascii	"modem_stats\000"
 6019      6D5F7374 
 6019      61747300 
 6020              	.LASF9:
 6021 01af 6C6F6E67 		.ascii	"long long int\000"
 6021      206C6F6E 
 6021      6720696E 
 6021      7400
 6022              	.LASF0:
 6023 01bd 7369676E 		.ascii	"signed char\000"
 6023      65642063 
 6023      68617200 
 6024              	.LASF47:
 6025 01c9 65636E6F 		.ascii	"ecno\000"
 6025      00
 6026              	.LASF70:
 6027 01ce 636F756E 		.ascii	"countDownValue\000"
 6027      74446F77 
 6027      6E56616C 
 6027      756500
 6028              	.LASF174:
 6029 01dd 74696D65 		.ascii	"timeToMeasure\000"
 6029      546F4D65 
 6029      61737572 
 6029      6500
 6030              	.LASF50:
 6031 01eb 74696D65 		.ascii	"time_to_network_connect\000"
 6031      5F746F5F 
 6031      6E657477 
 6031      6F726B5F 
 6031      636F6E6E 
 6032              	.LASF176:
 6033 0203 74696D65 		.ascii	"timeToSync\000"
 6033      546F5379 
 6033      6E6300
 6034              	.LASF133:
 6035 020e 646F776E 		.ascii	"down_level_freq\000"
 6035      5F6C6576 
 6035      656C5F66 
 6035      72657100 
 6036              	.LASF169:
 6037 021e 68747470 		.ascii	"http_body\000"
 6037      5F626F64 
 6037      7900
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 132


 6038              	.LASF111:
 6039 0228 7365745F 		.ascii	"set_up_internet_connection\000"
 6039      75705F69 
 6039      6E746572 
 6039      6E65745F 
 6039      636F6E6E 
 6040              	.LASF143:
 6041 0243 7365636F 		.ascii	"second\000"
 6041      6E6400
 6042              	.LASF139:
 6043 024a 79656172 		.ascii	"year\000"
 6043      00
 6044              	.LASF182:
 6045 024f 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 6045      6D446F77 
 6045      6E737472 
 6045      65616D4C 
 6045      6576656C 
 6046              	.LASF134:
 6047 026a 74656D70 		.ascii	"temp\000"
 6047      00
 6048              	.LASF6:
 6049 026f 6C6F6E67 		.ascii	"long int\000"
 6049      20696E74 
 6049      00
 6050              	.LASF45:
 6051 0278 72786C65 		.ascii	"rxlev\000"
 6051      7600
 6052              	.LASF71:
 6053 027e 63757272 		.ascii	"currentCountDownValue\000"
 6053      656E7443 
 6053      6F756E74 
 6053      446F776E 
 6053      56616C75 
 6054              	.LASF145:
 6055 0294 6D6F6465 		.ascii	"modem_get_state\000"
 6055      6D5F6765 
 6055      745F7374 
 6055      61746500 
 6056              	.LASF55:
 6057 02a4 616C7469 		.ascii	"altitude\000"
 6057      74756465 
 6057      00
 6058              	.LASF15:
 6059 02ad 75696E74 		.ascii	"uint8\000"
 6059      3800
 6060              	.LASF132:
 6061 02b3 6C657665 		.ascii	"level_sensor_freq\000"
 6061      6C5F7365 
 6061      6E736F72 
 6061      5F667265 
 6061      7100
 6062              	.LASF179:
 6063 02c5 74696D65 		.ascii	"timeToAppLED\000"
 6063      546F4170 
 6063      704C4544 
 6063      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 133


 6064              	.LASF19:
 6065 02d2 696E7433 		.ascii	"int32\000"
 6065      3200
 6066              	.LASF59:
 6067 02d8 6E6F6465 		.ascii	"node_type\000"
 6067      5F747970 
 6067      6500
 6068              	.LASF135:
 6069 02e2 6D6F6465 		.ascii	"modem_configure_settings\000"
 6069      6D5F636F 
 6069      6E666967 
 6069      7572655F 
 6069      73657474 
 6070              	.LASF119:
 6071 02fb 735F7369 		.ascii	"s_sim_type\000"
 6071      6D5F7479 
 6071      706500
 6072              	.LASF101:
 6073 0306 6E657477 		.ascii	"network_time\000"
 6073      6F726B5F 
 6073      74696D65 
 6073      00
 6074              	.LASF3:
 6075 0313 73686F72 		.ascii	"short unsigned int\000"
 6075      7420756E 
 6075      7369676E 
 6075      65642069 
 6075      6E7400
 6076              	.LASF17:
 6077 0326 75696E74 		.ascii	"uint32\000"
 6077      333200
 6078              	.LASF97:
 6079 032d 696E7465 		.ascii	"interval\000"
 6079      7276616C 
 6079      00
 6080              	.LASF7:
 6081 0336 5F5F7569 		.ascii	"__uint32_t\000"
 6081      6E743332 
 6081      5F7400
 6082              	.LASF137:
 6083 0341 6D6F6465 		.ascii	"modem_get_network_time\000"
 6083      6D5F6765 
 6083      745F6E65 
 6083      74776F72 
 6083      6B5F7469 
 6084              	.LASF29:
 6085 0358 746D5F6D 		.ascii	"tm_mon\000"
 6085      6F6E00
 6086              	.LASF124:
 6087 035f 735F6C65 		.ascii	"s_level_sensor\000"
 6087      76656C5F 
 6087      73656E73 
 6087      6F7200
 6088              	.LASF183:
 6089 036e 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 6089      746F446F 
 6089      776E7374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 134


 6089      7265616D 
 6089      4C657665 
 6090              	.LASF63:
 6091 038a 64656275 		.ascii	"debug_level\000"
 6091      675F6C65 
 6091      76656C00 
 6092              	.LASF146:
 6093 0396 6D6F6465 		.ascii	"modem_sleep\000"
 6093      6D5F736C 
 6093      65657000 
 6094              	.LASF122:
 6095 03a2 735F6465 		.ascii	"s_debug_freq\000"
 6095      6275675F 
 6095      66726571 
 6095      00
 6096              	.LASF115:
 6097 03af 75706461 		.ascii	"updatable_parameters_initialize\000"
 6097      7461626C 
 6097      655F7061 
 6097      72616D65 
 6097      74657273 
 6098              	.LASF30:
 6099 03cf 746D5F79 		.ascii	"tm_year\000"
 6099      65617200 
 6100              	.LASF175:
 6101 03d7 616C6172 		.ascii	"alarmSync\000"
 6101      6D53796E 
 6101      6300
 6102              	.LASF166:
 6103 03e1 4170705F 		.ascii	"App_LED_enabled\000"
 6103      4C45445F 
 6103      656E6162 
 6103      6C656400 
 6104              	.LASF40:
 6105 03f1 6B65795F 		.ascii	"key_value_t\000"
 6105      76616C75 
 6105      655F7400 
 6106              	.LASF88:
 6107 03fd 7077725F 		.ascii	"pwr_check\000"
 6107      63686563 
 6107      6B00
 6108              	.LASF8:
 6109 0407 6C6F6E67 		.ascii	"long unsigned int\000"
 6109      20756E73 
 6109      69676E65 
 6109      6420696E 
 6109      7400
 6110              	.LASF103:
 6111 0419 65787472 		.ascii	"extract_string\000"
 6111      6163745F 
 6111      73747269 
 6111      6E6700
 6112              	.LASF93:
 6113 0428 74696D65 		.ascii	"timeout\000"
 6113      6F757400 
 6114              	.LASF116:
 6115 0430 6765745F 		.ascii	"get_cell_network_stats\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 135


 6115      63656C6C 
 6115      5F6E6574 
 6115      776F726B 
 6115      5F737461 
 6116              	.LASF39:
 6117 0447 74696D65 		.ascii	"timeStamp\000"
 6117      5374616D 
 6117      7000
 6118              	.LASF56:
 6119 0451 74696D65 		.ascii	"time_to_lock\000"
 6119      5F746F5F 
 6119      6C6F636B 
 6119      00
 6120              	.LASF155:
 6121 045e 64617461 		.ascii	"data\000"
 6121      00
 6122              	.LASF79:
 6123 0463 65705F70 		.ascii	"ep_port\000"
 6123      6F727400 
 6124              	.LASF33:
 6125 046b 746D5F69 		.ascii	"tm_isdst\000"
 6125      73647374 
 6125      00
 6126              	.LASF75:
 6127 0474 6D6F6465 		.ascii	"modem_info\000"
 6127      6D5F696E 
 6127      666F00
 6128              	.LASF78:
 6129 047f 65705F68 		.ascii	"ep_host\000"
 6129      6F737400 
 6130              	.LASF76:
 6131 0487 63686970 		.ascii	"chip_uniqueId\000"
 6131      5F756E69 
 6131      71756549 
 6131      6400
 6132              	.LASF98:
 6133 0495 6D6F6465 		.ascii	"modem_power_up\000"
 6133      6D5F706F 
 6133      7765725F 
 6133      757000
 6134              	.LASF189:
 6135 04a4 6D6F6465 		.ascii	"modem.c\000"
 6135      6D2E6300 
 6136              	.LASF105:
 6137 04ac 62656769 		.ascii	"beginMarker\000"
 6137      6E4D6172 
 6137      6B657200 
 6138              	.LASF107:
 6139 04b8 74617267 		.ascii	"target\000"
 6139      657400
 6140              	.LASF51:
 6141 04bf 74696D65 		.ascii	"time_to_acquire_ip\000"
 6141      5F746F5F 
 6141      61637175 
 6141      6972655F 
 6141      697000
 6142              	.LASF106:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 136


 6143 04d2 656E644D 		.ascii	"endMarker\000"
 6143      61726B65 
 6143      7200
 6144              	.LASF2:
 6145 04dc 73686F72 		.ascii	"short int\000"
 6145      7420696E 
 6145      7400
 6146              	.LASF138:
 6147 04e6 65706F63 		.ascii	"epoch_time\000"
 6147      685F7469 
 6147      6D6500
 6148              	.LASF5:
 6149 04f1 5F5F696E 		.ascii	"__int32_t\000"
 6149      7433325F 
 6149      7400
 6150              	.LASF178:
 6151 04fb 616C6172 		.ascii	"alarmAppLED\000"
 6151      6D417070 
 6151      4C454400 
 6152              	.LASF104:
 6153 0507 66726F6D 		.ascii	"from\000"
 6153      00
 6154              	.LASF110:
 6155 050c 63726567 		.ascii	"creg\000"
 6155      00
 6156              	.LASF130:
 6157 0511 64656275 		.ascii	"debug_freq\000"
 6157      675F6672 
 6157      657100
 6158              	.LASF94:
 6159 051c 61745F61 		.ascii	"at_attempt\000"
 6159      7474656D 
 6159      707400
 6160              	.LASF126:
 6161 0527 735F7661 		.ascii	"s_valve\000"
 6161      6C766500 
 6162              	.LASF163:
 6163 052f 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 6163      73747265 
 6163      616D5F6C 
 6163      6576656C 
 6163      5F73656E 
 6164              	.LASF102:
 6165 054f 61745F77 		.ascii	"at_write_command\000"
 6165      72697465 
 6165      5F636F6D 
 6165      6D616E64 
 6165      00
 6166              	.LASF77:
 6167 0560 7379735F 		.ascii	"sys_info_t\000"
 6167      696E666F 
 6167      5F7400
 6168              	.LASF69:
 6169 056b 75706461 		.ascii	"updatable_parameters_t\000"
 6169      7461626C 
 6169      655F7061 
 6169      72616D65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 137


 6169      74657273 
 6170              	.LASF129:
 6171 0582 7265706F 		.ascii	"report_freq\000"
 6171      72745F66 
 6171      72657100 
 6172              	.LASF153:
 6173 058e 64617461 		.ascii	"dataPointsInStack\000"
 6173      506F696E 
 6173      7473496E 
 6173      53746163 
 6173      6B00
 6174              	.LASF26:
 6175 05a0 746D5F6D 		.ascii	"tm_min\000"
 6175      696E00
 6176              	.LASF24:
 6177 05a7 73697A65 		.ascii	"sizetype\000"
 6177      74797065 
 6177      00
 6178              	.LASF125:
 6179 05b0 735F646F 		.ascii	"s_down_level_sensor\000"
 6179      776E5F6C 
 6179      6576656C 
 6179      5F73656E 
 6179      736F7200 
 6180              	.LASF140:
 6181 05c4 6D6F6E74 		.ascii	"month\000"
 6181      6800
 6182              	.LASF109:
 6183 05ca 69735F63 		.ascii	"is_connected_to_cell_network\000"
 6183      6F6E6E65 
 6183      63746564 
 6183      5F746F5F 
 6183      63656C6C 
 6184              	.LASF53:
 6185 05e7 6C617469 		.ascii	"latitude\000"
 6185      74756465 
 6185      00
 6186              	.LASF34:
 6187 05f0 74657374 		.ascii	"test_name\000"
 6187      5F6E616D 
 6187      6500
 6188              	.LASF18:
 6189 05fa 696E7431 		.ascii	"int16\000"
 6189      3600
 6190              	.LASF150:
 6191 0600 6770735F 		.ascii	"gps_status\000"
 6191      73746174 
 6191      757300
 6192              	.LASF177:
 6193 060b 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 6193      546F5379 
 6193      636E5265 
 6193      6D6F7465 
 6193      50617261 
 6194              	.LASF99:
 6195 0622 6D6F6465 		.ascii	"modem_test\000"
 6195      6D5F7465 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 138


 6195      737400
 6196              	.LASF114:
 6197 062d 6D617463 		.ascii	"match\000"
 6197      6800
 6198              	.LASF159:
 6199 0633 75706461 		.ascii	"updatable_parameters\000"
 6199      7461626C 
 6199      655F7061 
 6199      72616D65 
 6199      74657273 
 6200              	.LASF141:
 6201 0648 686F7572 		.ascii	"hour\000"
 6201      00
 6202              	.LASF91:
 6203 064d 636F6D6D 		.ascii	"commands\000"
 6203      616E6473 
 6203      00
 6204              	.LASF95:
 6205 0656 636F6D70 		.ascii	"compare_location\000"
 6205      6172655F 
 6205      6C6F6361 
 6205      74696F6E 
 6205      00
 6206              	.LASF20:
 6207 0667 666C6F61 		.ascii	"float\000"
 6207      7400
 6208              	.LASF81:
 6209 066d 6D6F6465 		.ascii	"modem_initialize\000"
 6209      6D5F696E 
 6209      69746961 
 6209      6C697A65 
 6209      00
 6210              	.LASF121:
 6211 067e 735F7265 		.ascii	"s_report_freq\000"
 6211      706F7274 
 6211      5F667265 
 6211      7100
 6212              	.LASF127:
 6213 068c 735F6170 		.ascii	"s_apps_enabled\000"
 6213      70735F65 
 6213      6E61626C 
 6213      656400
 6214              	.LASF60:
 6215 069b 73696D5F 		.ascii	"sim_type\000"
 6215      74797065 
 6215      00
 6216              	.LASF112:
 6217 06a4 6973725F 		.ascii	"isr_telit_rx\000"
 6217      74656C69 
 6217      745F7278 
 6217      00
 6218              	.LASF74:
 6219 06b1 616C6172 		.ascii	"alarm\000"
 6219      6D00
 6220              	.LASF68:
 6221 06b7 5F426F6F 		.ascii	"_Bool\000"
 6221      6C00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 139


 6222              	.LASF13:
 6223 06bd 696E7433 		.ascii	"int32_t\000"
 6223      325F7400 
 6224              	.LASF1:
 6225 06c5 756E7369 		.ascii	"unsigned char\000"
 6225      676E6564 
 6225      20636861 
 6225      7200
 6226              	.LASF172:
 6227 06d3 73797374 		.ascii	"system_settings\000"
 6227      656D5F73 
 6227      65747469 
 6227      6E677300 
 6228              	.LASF96:
 6229 06e3 64656C61 		.ascii	"delay\000"
 6229      7900
 6230              	.LASF48:
 6231 06e9 72737271 		.ascii	"rsrq\000"
 6231      00
 6232              	.LASF62:
 6233 06ee 73796E63 		.ascii	"sync_time\000"
 6233      5F74696D 
 6233      6500
 6234              	.LASF118:
 6235 06f8 735F6E6F 		.ascii	"s_node_type\000"
 6235      64655F74 
 6235      79706500 
 6236              	.LASF46:
 6237 0704 72736370 		.ascii	"rscp\000"
 6237      00
 6238              	.LASF148:
 6239 0709 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 6239      6D5F6765 
 6239      745F6770 
 6239      735F636F 
 6239      6F726469 
 6240              	.LASF37:
 6241 0723 74657374 		.ascii	"test_t\000"
 6241      5F7400
 6242              	.LASF171:
 6243 072a 73797374 		.ascii	"system_info\000"
 6243      656D5F69 
 6243      6E666F00 
 6244              	.LASF43:
 6245 0736 696D6569 		.ascii	"imei\000"
 6245      00
 6246              	.LASF36:
 6247 073b 72656173 		.ascii	"reason\000"
 6247      6F6E00
 6248              	.LASF49:
 6249 0742 72737270 		.ascii	"rsrp\000"
 6249      00
 6250              	.LASF52:
 6251 0747 6D6F6465 		.ascii	"modem_stats_t\000"
 6251      6D5F7374 
 6251      6174735F 
 6251      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 140


 6252              	.LASF90:
 6253 0755 75617274 		.ascii	"uart_string_reset\000"
 6253      5F737472 
 6253      696E675F 
 6253      72657365 
 6253      7400
 6254              	.LASF180:
 6255 0767 616C6172 		.ascii	"alarmLevelSensor\000"
 6255      6D4C6576 
 6255      656C5365 
 6255      6E736F72 
 6255      00
 6256              	.LASF31:
 6257 0778 746D5F77 		.ascii	"tm_wday\000"
 6257      64617900 
 6258              	.LASF89:
 6259 0780 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 6259      6D5F736F 
 6259      66745F70 
 6259      6F776572 
 6259      5F637963 
 6260              	.LASF65:
 6261 0797 4C657665 		.ascii	"Level_Sensor_freq\000"
 6261      6C5F5365 
 6261      6E736F72 
 6261      5F667265 
 6261      7100
 6262              	.LASF160:
 6263 07a9 6C657665 		.ascii	"level_sensor_inbox\000"
 6263      6C5F7365 
 6263      6E736F72 
 6263      5F696E62 
 6263      6F7800
 6264              	.LASF23:
 6265 07bc 6C6F6E67 		.ascii	"long double\000"
 6265      20646F75 
 6265      626C6500 
 6266              	.LASF22:
 6267 07c8 63686172 		.ascii	"char\000"
 6267      00
 6268              	.LASF108:
 6269 07cd 6D6F6465 		.ascii	"modem_process_tasks\000"
 6269      6D5F7072 
 6269      6F636573 
 6269      735F7461 
 6269      736B7300 
 6270              	.LASF11:
 6271 07e1 756E7369 		.ascii	"unsigned int\000"
 6271      676E6564 
 6271      20696E74 
 6271      00
 6272              	.LASF136:
 6273 07ee 4346554E 		.ascii	"CFUN\000"
 6273      00
 6274              	.LASF184:
 6275 07f3 616C6172 		.ascii	"alarmValve\000"
 6275      6D56616C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 141


 6275      766500
 6276              	.LASF42:
 6277 07fe 6D6F6465 		.ascii	"model_id\000"
 6277      6C5F6964 
 6277      00
 6278              	.LASF170:
 6279 0807 68747470 		.ascii	"http_route\000"
 6279      5F726F75 
 6279      746500
 6280              	.LASF44:
 6281 0812 6D6F6465 		.ascii	"modem_info_t\000"
 6281      6D5F696E 
 6281      666F5F74 
 6281      00
 6282              	.LASF58:
 6283 081f 6770735F 		.ascii	"gps_t\000"
 6283      7400
 6284              	.LASF187:
 6285 0825 75617274 		.ascii	"uart_string_index\000"
 6285      5F737472 
 6285      696E675F 
 6285      696E6465 
 6285      7800
 6286              	.LASF61:
 6287 0837 6D656173 		.ascii	"measure_time\000"
 6287      7572655F 
 6287      74696D65 
 6287      00
 6288              	.LASF113:
 6289 0844 69735F63 		.ascii	"is_connected_to_internet\000"
 6289      6F6E6E65 
 6289      63746564 
 6289      5F746F5F 
 6289      696E7465 
 6290              	.LASF157:
 6291 085d 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 6291      6D5F7374 
 6291      6172745F 
 6291      74696D65 
 6291      5F737461 
 6292              	.LASF186:
 6293 0874 75617274 		.ascii	"uart_received_string\000"
 6293      5F726563 
 6293      65697665 
 6293      645F7374 
 6293      72696E67 
 6294              	.LASF82:
 6295 0889 70696E73 		.ascii	"pins_configure_inactive\000"
 6295      5F636F6E 
 6295      66696775 
 6295      72655F69 
 6295      6E616374 
 6296              	.LASF123:
 6297 08a1 735F6170 		.ascii	"s_app_led\000"
 6297      705F6C65 
 6297      6400
 6298              	.LASF41:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 142


 6299 08ab 73696D5F 		.ascii	"sim_id\000"
 6299      696400
 6300              	.LASF28:
 6301 08b2 746D5F6D 		.ascii	"tm_mday\000"
 6301      64617900 
 6302              	.LASF57:
 6303 08ba 76616C69 		.ascii	"valid\000"
 6303      6400
 6304              	.LASF83:
 6305 08c0 70696E73 		.ascii	"pins_configure_active\000"
 6305      5F636F6E 
 6305      66696775 
 6305      72655F61 
 6305      63746976 
 6306              	.LASF142:
 6307 08d6 6D696E75 		.ascii	"minute\000"
 6307      746500
 6308              	.LASF14:
 6309 08dd 75696E74 		.ascii	"uint32_t\000"
 6309      33325F74 
 6309      00
 6310              	.LASF25:
 6311 08e6 746D5F73 		.ascii	"tm_sec\000"
 6311      656300
 6312              	.LASF164:
 6313 08ed 76616C76 		.ascii	"valve_enabled\000"
 6313      655F656E 
 6313      61626C65 
 6313      6400
 6314              	.LASF117:
 6315 08fb 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 6315      75706461 
 6315      7465645F 
 6315      70617261 
 6315      6D657465 
 6316              	.LASF120:
 6317 091e 735F7361 		.ascii	"s_sample_freq\000"
 6317      6D706C65 
 6317      5F667265 
 6317      7100
 6318              	.LASF35:
 6319 092c 73746174 		.ascii	"status\000"
 6319      757300
 6320              	.LASF161:
 6321 0933 6C657665 		.ascii	"level_sensor_enabled\000"
 6321      6C5F7365 
 6321      6E736F72 
 6321      5F656E61 
 6321      626C6564 
 6322              	.LASF154:
 6323 0948 64617461 		.ascii	"dataPointsInStackDesired\000"
 6323      506F696E 
 6323      7473496E 
 6323      53746163 
 6323      6B446573 
 6324              	.LASF66:
 6325 0961 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 143


 6325      73747265 
 6325      616D5F4C 
 6325      6576656C 
 6325      5F53656E 
 6326              	.LASF64:
 6327 097e 4170705F 		.ascii	"App_LED_freq\000"
 6327      4C45445F 
 6327      66726571 
 6327      00
 6328              	.LASF80:
 6329 098b 7379735F 		.ascii	"sys_settings_t\000"
 6329      73657474 
 6329      696E6773 
 6329      5F7400
 6330              	.LASF12:
 6331 099a 75696E74 		.ascii	"uint8_t\000"
 6331      385F7400 
 6332              	.LASF165:
 6333 09a2 76616C76 		.ascii	"valve_inbox\000"
 6333      655F696E 
 6333      626F7800 
 6334              	.LASF85:
 6335 09ae 61745F72 		.ascii	"at_ready\000"
 6335      65616479 
 6335      00
 6336              	.LASF86:
 6337 09b7 61747465 		.ascii	"attempts\000"
 6337      6D707473 
 6337      00
 6338              	.LASF72:
 6339 09c0 636F756E 		.ascii	"countDownType\000"
 6339      74446F77 
 6339      6E547970 
 6339      6500
 6340              	.LASF67:
 6341 09ce 76616C76 		.ascii	"valve_freq\000"
 6341      655F6672 
 6341      657100
 6342              	.LASF87:
 6343 09d9 626F6F74 		.ascii	"boot_time\000"
 6343      5F74696D 
 6343      6500
 6344              	.LASF92:
 6345 09e3 65787065 		.ascii	"expected_response\000"
 6345      63746564 
 6345      5F726573 
 6345      706F6E73 
 6345      6500
 6346              	.LASF149:
 6347 09f5 6C6F636B 		.ascii	"lock_time\000"
 6347      5F74696D 
 6347      6500
 6348              	.LASF168:
 6349 09ff 68747470 		.ascii	"http_request\000"
 6349      5F726571 
 6349      75657374 
 6349      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccxntZoz.s 			page 144


 6350              	.LASF84:
 6351 0a0c 6D6F6465 		.ascii	"modem_power_down\000"
 6351      6D5F706F 
 6351      7765725F 
 6351      646F776E 
 6351      00
 6352              	.LASF21:
 6353 0a1d 646F7562 		.ascii	"double\000"
 6353      6C6500
 6354              	.LASF167:
 6355 0a24 6170705F 		.ascii	"app_led_inbox\000"
 6355      6C65645F 
 6355      696E626F 
 6355      7800
 6356              	.LASF162:
 6357 0a32 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 6357      73747265 
 6357      616D5F6C 
 6357      6576656C 
 6357      5F73656E 
 6358              	.LASF131:
 6359 0a50 6170705F 		.ascii	"app_led_freq\000"
 6359      6C65645F 
 6359      66726571 
 6359      00
 6360              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
