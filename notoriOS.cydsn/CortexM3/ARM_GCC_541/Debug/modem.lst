ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,7,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.comm	uart_received_string,1024,4
  50              		.global	uart_string_index
  51              		.bss
  52              		.align	1
  53              		.type	uart_string_index, %object
  54              		.size	uart_string_index, 2
  55              	uart_string_index:
  56 0000 0000     		.space	2
  57              		.section	.text.isr_telit_rx,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 2


  58              		.align	2
  59              		.global	isr_telit_rx
  60              		.thumb
  61              		.thumb_func
  62              		.type	isr_telit_rx, %function
  63              	isr_telit_rx:
  64              	.LFB64:
  65              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  66              		.loc 1 18 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 98B5     		push	{r3, r4, r7, lr}
  71              		.cfi_def_cfa_offset 16
  72              		.cfi_offset 3, -16
  73              		.cfi_offset 4, -12
  74              		.cfi_offset 7, -8
  75              		.cfi_offset 14, -4
  76 0002 00AF     		add	r7, sp, #0
  77              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  78              		.loc 1 20 0
  79 0004 12E0     		b	.L2
  80              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  81              		.loc 1 21 0
  82 0006 0D4B     		ldr	r3, .L4
  83 0008 B3F90030 		ldrsh	r3, [r3]
  84 000c 1C46     		mov	r4, r3
  85 000e FFF7FEFF 		bl	UART_Telit_GetChar
  86 0012 0346     		mov	r3, r0
  87 0014 1A46     		mov	r2, r3
  88 0016 0A4B     		ldr	r3, .L4+4
  89 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  90              		.loc 1 22 0
  91 001a 084B     		ldr	r3, .L4
  92 001c B3F90030 		ldrsh	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 3


  93 0020 9BB2     		uxth	r3, r3
  94 0022 0133     		adds	r3, r3, #1
  95 0024 9BB2     		uxth	r3, r3
  96 0026 1AB2     		sxth	r2, r3
  97 0028 044B     		ldr	r3, .L4
  98 002a 1A80     		strh	r2, [r3]	@ movhi
  99              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 100              		.loc 1 20 0
 101 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 102 0030 0346     		mov	r3, r0
 103 0032 012B     		cmp	r3, #1
 104 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 105              		.loc 1 25 0
 106 0036 00BF     		nop
 107 0038 98BD     		pop	{r3, r4, r7, pc}
 108              	.L5:
 109 003a 00BF     		.align	2
 110              	.L4:
 111 003c 00000000 		.word	uart_string_index
 112 0040 00000000 		.word	uart_received_string
 113              		.cfi_endproc
 114              	.LFE64:
 115              		.size	isr_telit_rx, .-isr_telit_rx
 116              		.section	.text.modem_initialize,"ax",%progbits
 117              		.align	2
 118              		.global	modem_initialize
 119              		.thumb
 120              		.thumb_func
 121              		.type	modem_initialize, %function
 122              	modem_initialize:
 123              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 124              		.loc 1 28 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 134              		.loc 1 31 0
 135 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 136              		.loc 1 32 0
 137 0008 154B     		ldr	r3, .L7
 138 000a 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 4


 139 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 140              		.loc 1 34 0
 141 000e 154B     		ldr	r3, .L7+4
 142 0010 0022     		movs	r2, #0
 143 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 144              		.loc 1 35 0
 145 0016 134B     		ldr	r3, .L7+4
 146 0018 0022     		movs	r2, #0
 147 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 148              		.loc 1 36 0
 149 001c 114B     		ldr	r3, .L7+4
 150 001e 0022     		movs	r2, #0
 151 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 152              		.loc 1 37 0
 153 0022 114B     		ldr	r3, .L7+8
 154 0024 0022     		movs	r2, #0
 155 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 156              		.loc 1 38 0
 157 0028 0F4B     		ldr	r3, .L7+8
 158 002a 0022     		movs	r2, #0
 159 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 160              		.loc 1 39 0
 161 002e 0E4B     		ldr	r3, .L7+8
 162 0030 0022     		movs	r2, #0
 163 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 164              		.loc 1 40 0
 165 0034 0C4B     		ldr	r3, .L7+8
 166 0036 0022     		movs	r2, #0
 167 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 168              		.loc 1 41 0
 169 003a 0B4B     		ldr	r3, .L7+8
 170 003c 0022     		movs	r2, #0
 171 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 172              		.loc 1 42 0
 173 0040 094B     		ldr	r3, .L7+8
 174 0042 0022     		movs	r2, #0
 175 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 176              		.loc 1 43 0
 177 0046 084B     		ldr	r3, .L7+8
 178 0048 0022     		movs	r2, #0
 179 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 180              		.loc 1 44 0
 181 004c 064B     		ldr	r3, .L7+8
 182 004e 0022     		movs	r2, #0
 183 0050 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 5


  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 184              		.loc 1 48 0
 185 0052 0021     		movs	r1, #0
 186 0054 4020     		movs	r0, #64
 187 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 188              		.loc 1 50 0
 189 005a 00BF     		nop
 190 005c 80BD     		pop	{r7, pc}
 191              	.L8:
 192 005e 00BF     		.align	2
 193              	.L7:
 194 0060 00000000 		.word	modem_state
 195 0064 00000000 		.word	modem_info
 196 0068 00000000 		.word	modem_stats
 197              		.cfi_endproc
 198              	.LFE65:
 199              		.size	modem_initialize, .-modem_initialize
 200              		.section	.text.pins_configure_inactive,"ax",%progbits
 201              		.align	2
 202              		.global	pins_configure_inactive
 203              		.thumb
 204              		.thumb_func
 205              		.type	pins_configure_inactive, %function
 206              	pins_configure_inactive:
 207              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 208              		.loc 1 54 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
 216 0002 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 218              		.loc 1 56 0
 219 0004 0020     		movs	r0, #0
 220 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 221              		.loc 1 57 0
 222 000a 0C20     		movs	r0, #12
 223 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 224              		.loc 1 59 0
 225 0010 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 6


 226 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 227              		.loc 1 62 0
 228 0016 0020     		movs	r0, #0
 229 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 230              		.loc 1 63 0
 231 001c 0020     		movs	r0, #0
 232 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 233              		.loc 1 64 0
 234 0022 0020     		movs	r0, #0
 235 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 236              		.loc 1 65 0
 237 0028 0020     		movs	r0, #0
 238 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 239              		.loc 1 67 0
 240 002e 00BF     		nop
 241 0030 80BD     		pop	{r7, pc}
 242              		.cfi_endproc
 243              	.LFE66:
 244              		.size	pins_configure_inactive, .-pins_configure_inactive
 245 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 246              		.align	2
 247              		.global	pins_configure_active
 248              		.thumb
 249              		.thumb_func
 250              		.type	pins_configure_active, %function
 251              	pins_configure_active:
 252              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 253              		.loc 1 70 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0000 80B5     		push	{r7, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 263              		.loc 1 72 0
 264 0004 0220     		movs	r0, #2
 265 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 266              		.loc 1 73 0
 267 000a 0120     		movs	r0, #1
 268 000c FFF7FEFF 		bl	Telit_ControlReg_Write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 7


  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 269              		.loc 1 74 0
 270 0010 0120     		movs	r0, #1
 271 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 272              		.loc 1 75 0
 273 0016 6420     		movs	r0, #100
 274 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 275              		.loc 1 76 0
 276 001c 00BF     		nop
 277 001e 80BD     		pop	{r7, pc}
 278              		.cfi_endproc
 279              	.LFE67:
 280              		.size	pins_configure_active, .-pins_configure_active
 281              		.section	.rodata
 282              		.align	2
 283              	.LC0:
 284 0000 4F4B00   		.ascii	"OK\000"
 285 0003 00       		.align	2
 286              	.LC1:
 287 0004 41542353 		.ascii	"AT#SHDN\015\000"
 287      48444E0D 
 287      00
 288              		.section	.text.modem_power_down,"ax",%progbits
 289              		.align	2
 290              		.global	modem_power_down
 291              		.thumb
 292              		.thumb_func
 293              		.type	modem_power_down, %function
 294              	modem_power_down:
 295              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 296              		.loc 1 79 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 0000 80B5     		push	{r7, lr}
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 306              		.loc 1 82 0
 307 0004 41F28832 		movw	r2, #5000
 308 0008 0A49     		ldr	r1, .L12
 309 000a 0B48     		ldr	r0, .L12+4
 310 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 311              		.loc 1 85 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 8


 312 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 313              		.loc 1 86 0
 314 0014 4FF47A70 		mov	r0, #1000
 315 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 316              		.loc 1 88 0
 317 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 318              		.loc 1 89 0
 319 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 320              		.loc 1 90 0
 321 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 322              		.loc 1 91 0
 323 0028 044B     		ldr	r3, .L12+8
 324 002a 0022     		movs	r2, #0
 325 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 326              		.loc 1 93 0
 327 002e 00BF     		nop
 328 0030 80BD     		pop	{r7, pc}
 329              	.L13:
 330 0032 00BF     		.align	2
 331              	.L12:
 332 0034 00000000 		.word	.LC0
 333 0038 04000000 		.word	.LC1
 334 003c 00000000 		.word	modem_state
 335              		.cfi_endproc
 336              	.LFE68:
 337              		.size	modem_power_down, .-modem_power_down
 338              		.section	.rodata
 339 000d 000000   		.align	2
 340              	.LC2:
 341 0010 41544530 		.ascii	"ATE0\015\000"
 341      0D00
 342 0016 0000     		.align	2
 343              	.LC3:
 344 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 344      6D20626F 
 344      6F742074 
 344      696D653A 
 344      20256400 
 345              		.align	2
 346              	.LC4:
 347 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 347      6D207265 
 347      61647920 
 347      666F7220 
 347      41542063 
 348 005d 000000   		.align	2
 349              	.LC5:
 350 0060 4E6F2072 		.ascii	"No response from modem.\000"
 350      6573706F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 9


 350      6E736520 
 350      66726F6D 
 350      206D6F64 
 351              		.section	.text.modem_power_up,"ax",%progbits
 352              		.align	2
 353              		.global	modem_power_up
 354              		.thumb
 355              		.thumb_func
 356              		.type	modem_power_up, %function
 357              	modem_power_up:
 358              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 359              		.loc 1 97 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363 0000 80B5     		push	{r7, lr}
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 82B0     		sub	sp, sp, #8
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 371              		.loc 1 99 0
 372 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 373              		.loc 1 100 0
 374 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 375              		.loc 1 101 0
 376 000e 2C48     		ldr	r0, .L27
 377 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 378              		.loc 1 103 0
 379 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 380              		.loc 1 106 0
 381 0018 0023     		movs	r3, #0
 382 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 383              		.loc 1 107 0
 384 001c 0023     		movs	r3, #0
 385 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 386              		.loc 1 109 0
 387 0020 FFF7FEFF 		bl	getTimeStamp
 388 0024 3860     		str	r0, [r7]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 10


 389              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 390              		.loc 1 112 0
 391 0026 0023     		movs	r3, #0
 392 0028 BB71     		strb	r3, [r7, #6]
 393 002a 1CE0     		b	.L15
 394              	.L22:
 395              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 396              		.loc 1 114 0
 397 002c 0023     		movs	r3, #0
 398 002e 7B71     		strb	r3, [r7, #5]
 399 0030 0EE0     		b	.L16
 400              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 401              		.loc 1 116 0
 402 0032 4FF47A72 		mov	r2, #1000
 403 0036 2349     		ldr	r1, .L27+4
 404 0038 2348     		ldr	r0, .L27+8
 405 003a FFF7FEFF 		bl	at_write_command
 406 003e 0346     		mov	r3, r0
 407 0040 002B     		cmp	r3, #0
 408 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 409              		.loc 1 117 0
 410 0044 0123     		movs	r3, #1
 411 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 412              		.loc 1 118 0
 413 0048 05E0     		b	.L18
 414              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 415              		.loc 1 114 0 discriminator 2
 416 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 417 004c 0133     		adds	r3, r3, #1
 418 004e 7B71     		strb	r3, [r7, #5]
 419              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 420              		.loc 1 114 0 is_stmt 0 discriminator 1
 421 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 422 0052 132B     		cmp	r3, #19
 423 0054 EDD9     		bls	.L19
 424              	.L18:
 425              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 426              		.loc 1 122 0 is_stmt 1
 427 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 428 0058 012B     		cmp	r3, #1
 429 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 11


 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 430              		.loc 1 126 0 discriminator 2
 431 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 432              		.loc 1 112 0 discriminator 2
 433 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 434 0062 0133     		adds	r3, r3, #1
 435 0064 BB71     		strb	r3, [r7, #6]
 436              	.L15:
 112:modem.c       ****         
 437              		.loc 1 112 0 is_stmt 0 discriminator 1
 438 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 439 0068 022B     		cmp	r3, #2
 440 006a DFD9     		bls	.L22
 441 006c 00E0     		b	.L21
 442              	.L26:
 123:modem.c       ****             break;
 443              		.loc 1 123 0 is_stmt 1
 444 006e 00BF     		nop
 445              	.L21:
 446              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 447              		.loc 1 130 0
 448 0070 FFF7FEFF 		bl	getTimeStamp
 449 0074 0246     		mov	r2, r0
 450 0076 3B68     		ldr	r3, [r7]
 451 0078 D31A     		subs	r3, r2, r3
 452 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 453              		.loc 1 131 0
 454 007c 3A68     		ldr	r2, [r7]
 455 007e 1349     		ldr	r1, .L27+12
 456 0080 0020     		movs	r0, #0
 457 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 458              		.loc 1 133 0
 459 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 460 0088 012B     		cmp	r3, #1
 461 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 462              		.loc 1 134 0
 463 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 464 008e 1A46     		mov	r2, r3
 465 0090 0F49     		ldr	r1, .L27+16
 466 0092 0020     		movs	r0, #0
 467 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 468              		.loc 1 135 0
 469 0098 0E4B     		ldr	r3, .L27+20
 470 009a 0122     		movs	r2, #1
 471 009c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 12


 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 472              		.loc 1 143 0
 473 009e 0123     		movs	r3, #1
 474 00a0 09E0     		b	.L25
 475              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 476              		.loc 1 137 0
 477 00a2 0D49     		ldr	r1, .L27+24
 478 00a4 0220     		movs	r0, #2
 479 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 480              		.loc 1 138 0
 481 00aa 0A4B     		ldr	r3, .L27+20
 482 00ac 0022     		movs	r2, #0
 483 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 484              		.loc 1 140 0
 485 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 486              		.loc 1 141 0
 487 00b4 0023     		movs	r3, #0
 488              	.L25:
 144:modem.c       **** }
 489              		.loc 1 144 0
 490 00b6 1846     		mov	r0, r3
 491 00b8 0837     		adds	r7, r7, #8
 492              		.cfi_def_cfa_offset 8
 493 00ba BD46     		mov	sp, r7
 494              		.cfi_def_cfa_register 13
 495              		@ sp needed
 496 00bc 80BD     		pop	{r7, pc}
 497              	.L28:
 498 00be 00BF     		.align	2
 499              	.L27:
 500 00c0 00000000 		.word	isr_telit_rx
 501 00c4 00000000 		.word	.LC0
 502 00c8 10000000 		.word	.LC2
 503 00cc 18000000 		.word	.LC3
 504 00d0 2C000000 		.word	.LC4
 505 00d4 00000000 		.word	modem_state
 506 00d8 60000000 		.word	.LC5
 507              		.cfi_endproc
 508              	.LFE69:
 509              		.size	modem_power_up, .-modem_power_up
 510              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 511              		.align	2
 512              		.global	modem_soft_power_cycle
 513              		.thumb
 514              		.thumb_func
 515              		.type	modem_soft_power_cycle, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 13


 516              	modem_soft_power_cycle:
 517              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 518              		.loc 1 147 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 528              		.loc 1 148 0
 529 0004 0120     		movs	r0, #1
 530 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 531              		.loc 1 149 0
 532 000a 4FF4FA60 		mov	r0, #2000
 533 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 534              		.loc 1 150 0
 535 0012 0020     		movs	r0, #0
 536 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 537              		.loc 1 152 0
 538 0018 00BF     		nop
 539 001a 80BD     		pop	{r7, pc}
 540              		.cfi_endproc
 541              	.LFE70:
 542              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 543              		.section	.text.uart_string_reset,"ax",%progbits
 544              		.align	2
 545              		.global	uart_string_reset
 546              		.thumb
 547              		.thumb_func
 548              		.type	uart_string_reset, %function
 549              	uart_string_reset:
 550              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 551              		.loc 1 155 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555 0000 80B5     		push	{r7, lr}
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 7, -8
 558              		.cfi_offset 14, -4
 559 0002 00AF     		add	r7, sp, #0
 560              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 14


 561              		.loc 1 156 0
 562 0004 064B     		ldr	r3, .L31
 563 0006 0022     		movs	r2, #0
 564 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 565              		.loc 1 158 0
 566 000a 4FF48062 		mov	r2, #1024
 567 000e 0021     		movs	r1, #0
 568 0010 0448     		ldr	r0, .L31+4
 569 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 570              		.loc 1 160 0
 571 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 572              		.loc 1 161 0
 573 001a 00BF     		nop
 574 001c 80BD     		pop	{r7, pc}
 575              	.L32:
 576 001e 00BF     		.align	2
 577              	.L31:
 578 0020 00000000 		.word	uart_string_index
 579 0024 00000000 		.word	uart_received_string
 580              		.cfi_endproc
 581              	.LFE71:
 582              		.size	uart_string_reset, .-uart_string_reset
 583              		.section	.rodata
 584              		.align	2
 585              	.LC6:
 586 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 586      6D207365 
 586      6E742041 
 586      5420636F 
 586      6D6D616E 
 587              		.align	2
 588              	.LC7:
 589 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 589      6D205265 
 589      63656976 
 589      65642065 
 589      78706563 
 590 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 590      616E643A 
 590      2025730A 
 590      52656365 
 590      69766564 
 591 00f1 000000   		.align	2
 592              	.LC8:
 593 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 593      6D207265 
 593      71756972 
 593      65642025 
 593      64207472 
 594 0127 0A00     		.ascii	"\012\000"
 595 0129 000000   		.align	2
 596              	.LC9:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 15


 597 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 597      64206E6F 
 597      74207772 
 597      69746520 
 597      41542063 
 598 0159 00       		.ascii	"\000"
 599              		.section	.text.at_write_command,"ax",%progbits
 600              		.align	2
 601              		.global	at_write_command
 602              		.thumb
 603              		.thumb_func
 604              		.type	at_write_command, %function
 605              	at_write_command:
 606              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 607              		.loc 1 166 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 40
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0000 80B5     		push	{r7, lr}
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 8AB0     		sub	sp, sp, #40
 616              		.cfi_def_cfa_offset 48
 617 0004 00AF     		add	r7, sp, #0
 618              		.cfi_def_cfa_register 7
 619 0006 F860     		str	r0, [r7, #12]
 620 0008 B960     		str	r1, [r7, #8]
 621 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 622              		.loc 1 168 0
 623 000c 0023     		movs	r3, #0
 624 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 625              		.loc 1 170 0
 626 0010 0023     		movs	r3, #0
 627 0012 7B62     		str	r3, [r7, #36]
 628 0014 46E0     		b	.L34
 629              	.L42:
 630              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 631              		.loc 1 173 0
 632 0016 0A23     		movs	r3, #10
 633 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 634              		.loc 1 174 0
 635 001a 7A68     		ldr	r2, [r7, #4]
 636 001c FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 16


 637 001e B2FBF3F3 		udiv	r3, r2, r3
 638 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 639              		.loc 1 177 0
 640 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 641              		.loc 1 180 0
 642 0028 F868     		ldr	r0, [r7, #12]
 643 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 644              		.loc 1 184 0
 645 002e 7B68     		ldr	r3, [r7, #4]
 646 0030 002B     		cmp	r3, #0
 647 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 648              		.loc 1 185 0
 649 0034 FA68     		ldr	r2, [r7, #12]
 650 0036 1F49     		ldr	r1, .L43
 651 0038 0020     		movs	r0, #0
 652 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 653              		.loc 1 186 0
 654 003e 0123     		movs	r3, #1
 655 0040 34E0     		b	.L36
 656              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 657              		.loc 1 190 0
 658 0042 0023     		movs	r3, #0
 659 0044 3B62     		str	r3, [r7, #32]
 660 0046 20E0     		b	.L37
 661              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 662              		.loc 1 191 0
 663 0048 F869     		ldr	r0, [r7, #28]
 664 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 665              		.loc 1 194 0
 666 004e B968     		ldr	r1, [r7, #8]
 667 0050 1948     		ldr	r0, .L43+4
 668 0052 FFF7FEFF 		bl	strstr
 669 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 670              		.loc 1 195 0
 671 0058 7B69     		ldr	r3, [r7, #20]
 672 005a 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 17


 673 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 674              		.loc 1 196 0
 675 005e 7B6A     		ldr	r3, [r7, #36]
 676 0060 002B     		cmp	r3, #0
 677 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 678              		.loc 1 198 0
 679 0064 144B     		ldr	r3, .L43+4
 680 0066 FA68     		ldr	r2, [r7, #12]
 681 0068 1449     		ldr	r1, .L43+8
 682 006a 0020     		movs	r0, #0
 683 006c FFF7FEFF 		bl	printNotif
 684 0070 06E0     		b	.L40
 685              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 686              		.loc 1 200 0
 687 0072 7B6A     		ldr	r3, [r7, #36]
 688 0074 5A1C     		adds	r2, r3, #1
 689 0076 104B     		ldr	r3, .L43+4
 690 0078 1149     		ldr	r1, .L43+12
 691 007a 0120     		movs	r0, #1
 692 007c FFF7FEFF 		bl	printNotif
 693              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 694              		.loc 1 203 0
 695 0080 0123     		movs	r3, #1
 696 0082 13E0     		b	.L36
 697              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 698              		.loc 1 190 0 discriminator 2
 699 0084 3B6A     		ldr	r3, [r7, #32]
 700 0086 0133     		adds	r3, r3, #1
 701 0088 3B62     		str	r3, [r7, #32]
 702              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 703              		.loc 1 190 0 is_stmt 0 discriminator 1
 704 008a 3A6A     		ldr	r2, [r7, #32]
 705 008c BB69     		ldr	r3, [r7, #24]
 706 008e 9A42     		cmp	r2, r3
 707 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 708              		.loc 1 209 0 is_stmt 1 discriminator 2
 709 0092 094B     		ldr	r3, .L43+4
 710 0094 FA68     		ldr	r2, [r7, #12]
 711 0096 0B49     		ldr	r1, .L43+16
 712 0098 0220     		movs	r0, #2
 713 009a FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 18


 714              	.LBE4:
 170:modem.c       ****         
 715              		.loc 1 170 0 discriminator 2
 716 009e 7B6A     		ldr	r3, [r7, #36]
 717 00a0 0133     		adds	r3, r3, #1
 718 00a2 7B62     		str	r3, [r7, #36]
 719              	.L34:
 170:modem.c       ****         
 720              		.loc 1 170 0 is_stmt 0 discriminator 1
 721 00a4 7B6A     		ldr	r3, [r7, #36]
 722 00a6 022B     		cmp	r3, #2
 723 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 724              		.loc 1 214 0 is_stmt 1
 725 00aa 0023     		movs	r3, #0
 726              	.L36:
 215:modem.c       **** }
 727              		.loc 1 215 0
 728 00ac 1846     		mov	r0, r3
 729 00ae 2837     		adds	r7, r7, #40
 730              		.cfi_def_cfa_offset 8
 731 00b0 BD46     		mov	sp, r7
 732              		.cfi_def_cfa_register 13
 733              		@ sp needed
 734 00b2 80BD     		pop	{r7, pc}
 735              	.L44:
 736              		.align	2
 737              	.L43:
 738 00b4 78000000 		.word	.LC6
 739 00b8 00000000 		.word	uart_received_string
 740 00bc A4000000 		.word	.LC7
 741 00c0 F4000000 		.word	.LC8
 742 00c4 2C010000 		.word	.LC9
 743              		.cfi_endproc
 744              	.LFE72:
 745              		.size	at_write_command, .-at_write_command
 746              		.section	.rodata
 747 015a 0000     		.align	2
 748              	.LC10:
 749 015c 54455354 		.ascii	"TEST_MODEM\000"
 749      5F4D4F44 
 749      454D00
 750 0167 00       		.align	2
 751              	.LC11:
 752 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 752      65706F6E 
 752      73652066 
 752      726F6D20 
 752      6D6F6465 
 753 017f 00       		.align	2
 754              	.LC12:
 755 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 755      6D20636F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 19


 755      6E6E6563 
 755      74656420 
 755      746F206E 
 756              		.section	.text.modem_test,"ax",%progbits
 757              		.align	2
 758              		.global	modem_test
 759              		.thumb
 760              		.thumb_func
 761              		.type	modem_test, %function
 762              	modem_test:
 763              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 764              		.loc 1 218 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 408
 767              		@ frame_needed = 1, uses_anonymous_args = 0
 768 0000 B0B5     		push	{r4, r5, r7, lr}
 769              		.cfi_def_cfa_offset 16
 770              		.cfi_offset 4, -16
 771              		.cfi_offset 5, -12
 772              		.cfi_offset 7, -8
 773              		.cfi_offset 14, -4
 774 0002 E6B0     		sub	sp, sp, #408
 775              		.cfi_def_cfa_offset 424
 776 0004 00AF     		add	r7, sp, #0
 777              		.cfi_def_cfa_register 7
 778 0006 3B1D     		adds	r3, r7, #4
 779 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 780              		.loc 1 221 0
 781 000a 07F10C03 		add	r3, r7, #12
 782 000e 0022     		movs	r2, #0
 783 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 784              		.loc 1 223 0
 785 0014 07F10C03 		add	r3, r7, #12
 786 0018 364A     		ldr	r2, .L53
 787 001a 07CA     		ldmia	r2, {r0, r1, r2}
 788 001c 03C3     		stmia	r3!, {r0, r1}
 789 001e 1A80     		strh	r2, [r3]	@ movhi
 790 0020 0233     		adds	r3, r3, #2
 791 0022 120C     		lsrs	r2, r2, #16
 792 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 793              		.loc 1 224 0
 794 0026 07F10C03 		add	r3, r7, #12
 795 002a 8133     		adds	r3, r3, #129
 796 002c 324A     		ldr	r2, .L53+4
 797 002e 1C46     		mov	r4, r3
 798 0030 1546     		mov	r5, r2
 799 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 800 0034 2060     		str	r0, [r4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 20


 801 0036 6160     		str	r1, [r4, #4]	@ unaligned
 802 0038 A260     		str	r2, [r4, #8]	@ unaligned
 803 003a E360     		str	r3, [r4, #12]	@ unaligned
 804 003c 2868     		ldr	r0, [r5]	@ unaligned
 805 003e 2061     		str	r0, [r4, #16]	@ unaligned
 806 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 807 0042 AA79     		ldrb	r2, [r5, #6]
 808 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 809 0046 1346     		mov	r3, r2
 810 0048 A375     		strb	r3, [r4, #22]
 811              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 812              		.loc 1 227 0
 813 004a 0023     		movs	r3, #0
 814 004c C7F89431 		str	r3, [r7, #404]
 815 0050 3AE0     		b	.L46
 816              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 817              		.loc 1 229 0
 818 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 819              		.loc 1 231 0
 820 0056 FFF7FEFF 		bl	modem_get_state
 821 005a 0346     		mov	r3, r0
 822 005c 002B     		cmp	r3, #0
 823 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 824              		.loc 1 233 0
 825 0060 FFF7FEFF 		bl	modem_power_up
 826 0064 27E0     		b	.L48
 827              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 828              		.loc 1 236 0
 829 0066 FFF7FEFF 		bl	modem_get_state
 830 006a 0346     		mov	r3, r0
 831 006c 042B     		cmp	r3, #4
 832 006e 22D1     		bne	.L48
 833              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 834              		.loc 1 240 0
 835 0070 FFF7FEFF 		bl	modem_get_network_time
 836 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 837              		.loc 1 241 0
 838 0078 D7F89031 		ldr	r3, [r7, #400]
 839 007c 002B     		cmp	r3, #0
 840 007e 03D0     		beq	.L49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 21


 242:modem.c       ****             setTime(network_time); // Set the system time 
 841              		.loc 1 242 0
 842 0080 D7F89001 		ldr	r0, [r7, #400]
 843 0084 FFF7FEFF 		bl	setTime
 844              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 845              		.loc 1 245 0
 846 0088 07F10C03 		add	r3, r7, #12
 847 008c 8133     		adds	r3, r3, #129
 848 008e 1B4A     		ldr	r2, .L53+8
 849 0090 1D46     		mov	r5, r3
 850 0092 1446     		mov	r4, r2
 851 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 852 0096 2860     		str	r0, [r5]	@ unaligned
 853 0098 6960     		str	r1, [r5, #4]	@ unaligned
 854 009a AA60     		str	r2, [r5, #8]	@ unaligned
 855 009c EB60     		str	r3, [r5, #12]	@ unaligned
 856 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 857 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 858 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 859 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 860              		.loc 1 246 0
 861 00a6 07F10C03 		add	r3, r7, #12
 862 00aa 0122     		movs	r2, #1
 863 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 864              		.loc 1 248 0
 865 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 866              		.loc 1 249 0
 867 00b4 0CE0     		b	.L50
 868              	.L48:
 869              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 870              		.loc 1 252 0 discriminator 2
 871 00b6 4FF47A70 		mov	r0, #1000
 872 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 873              		.loc 1 227 0 discriminator 2
 874 00be D7F89431 		ldr	r3, [r7, #404]
 875 00c2 0133     		adds	r3, r3, #1
 876 00c4 C7F89431 		str	r3, [r7, #404]
 877              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 878              		.loc 1 227 0 is_stmt 0 discriminator 1
 879 00c8 D7F89431 		ldr	r3, [r7, #404]
 880 00cc 3B2B     		cmp	r3, #59
 881 00ce C0DD     		ble	.L51
 882              	.L50:
 883              	.LBE5:
 253:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 22


 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 884              		.loc 1 256 0 is_stmt 1
 885 00d0 3B1D     		adds	r3, r7, #4
 886 00d2 1A68     		ldr	r2, [r3]
 887 00d4 07F10C03 		add	r3, r7, #12
 888 00d8 1046     		mov	r0, r2
 889 00da 1946     		mov	r1, r3
 890 00dc 40F28113 		movw	r3, #385
 891 00e0 1A46     		mov	r2, r3
 892 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 893              		.loc 1 257 0
 894 00e6 3B1D     		adds	r3, r7, #4
 895 00e8 1868     		ldr	r0, [r3]
 896 00ea 07F5CC77 		add	r7, r7, #408
 897              		.cfi_def_cfa_offset 16
 898 00ee BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 00f0 B0BD     		pop	{r4, r5, r7, pc}
 902              	.L54:
 903 00f2 00BF     		.align	2
 904              	.L53:
 905 00f4 5C010000 		.word	.LC10
 906 00f8 68010000 		.word	.LC11
 907 00fc 80010000 		.word	.LC12
 908              		.cfi_endproc
 909              	.LFE73:
 910              		.size	modem_test, .-modem_test
 911              		.section	.text.extract_string,"ax",%progbits
 912              		.align	2
 913              		.global	extract_string
 914              		.thumb
 915              		.thumb_func
 916              		.type	extract_string, %function
 917              	extract_string:
 918              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 919              		.loc 1 260 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 24
 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 86B0     		sub	sp, sp, #24
 928              		.cfi_def_cfa_offset 32
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 F860     		str	r0, [r7, #12]
 932 0008 B960     		str	r1, [r7, #8]
 933 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 23


 934 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 935              		.loc 1 266 0
 936 000e B968     		ldr	r1, [r7, #8]
 937 0010 F868     		ldr	r0, [r7, #12]
 938 0012 FFF7FEFF 		bl	strstr
 939 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 940              		.loc 1 267 0
 941 0018 7B69     		ldr	r3, [r7, #20]
 942 001a 002B     		cmp	r3, #0
 943 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 944              		.loc 1 269 0
 945 001e FB68     		ldr	r3, [r7, #12]
 946 0020 7B61     		str	r3, [r7, #20]
 947              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 948              		.loc 1 272 0
 949 0022 B868     		ldr	r0, [r7, #8]
 950 0024 FFF7FEFF 		bl	strlen
 951 0028 0246     		mov	r2, r0
 952 002a 7B69     		ldr	r3, [r7, #20]
 953 002c 1344     		add	r3, r3, r2
 954 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 955              		.loc 1 277 0
 956 0030 7968     		ldr	r1, [r7, #4]
 957 0032 7869     		ldr	r0, [r7, #20]
 958 0034 FFF7FEFF 		bl	strstr
 959 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 960              		.loc 1 278 0
 961 003a 3B69     		ldr	r3, [r7, #16]
 962 003c 002B     		cmp	r3, #0
 963 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 964              		.loc 1 280 0
 965 0040 F868     		ldr	r0, [r7, #12]
 966 0042 FFF7FEFF 		bl	strlen
 967 0046 0246     		mov	r2, r0
 968 0048 FB68     		ldr	r3, [r7, #12]
 969 004a 1344     		add	r3, r3, r2
 970 004c 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 24


 971              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 972              		.loc 1 284 0
 973 004e 3A69     		ldr	r2, [r7, #16]
 974 0050 7B69     		ldr	r3, [r7, #20]
 975 0052 D31A     		subs	r3, r2, r3
 976 0054 1A46     		mov	r2, r3
 977 0056 7969     		ldr	r1, [r7, #20]
 978 0058 3868     		ldr	r0, [r7]
 979 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 980              		.loc 1 285 0
 981 005e 3A69     		ldr	r2, [r7, #16]
 982 0060 7B69     		ldr	r3, [r7, #20]
 983 0062 D31A     		subs	r3, r2, r3
 984 0064 1A46     		mov	r2, r3
 985 0066 3B68     		ldr	r3, [r7]
 986 0068 1344     		add	r3, r3, r2
 987 006a 0022     		movs	r2, #0
 988 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 989              		.loc 1 286 0
 990 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 991              		.loc 1 288 0
 992 0070 1846     		mov	r0, r3
 993 0072 1837     		adds	r7, r7, #24
 994              		.cfi_def_cfa_offset 8
 995 0074 BD46     		mov	sp, r7
 996              		.cfi_def_cfa_register 13
 997              		@ sp needed
 998 0076 80BD     		pop	{r7, pc}
 999              		.cfi_endproc
 1000              	.LFE74:
 1001              		.size	extract_string, .-extract_string
 1002              		.section	.rodata
 1003              		.align	2
 1004              	.LC13:
 1005 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1005      20746F20 
 1005      636F6E6E 
 1005      65637420 
 1005      746F206E 
 1006 01c3 00       		.align	2
 1007              	.LC14:
 1008 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1008      6D207469 
 1008      6D656420 
 1008      6F757420 
 1008      6F6E206E 
 1009 01e7 00       		.align	2
 1010              	.LC15:
 1011 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 25


 1011      69726564 
 1011      20495020 
 1011      61646472 
 1011      6573733A 
 1012              		.align	2
 1013              	.LC16:
 1014 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1014      6D207469 
 1014      6D656420 
 1014      6F757420 
 1014      6F6E2049 
 1015              		.section	.text.modem_process_tasks,"ax",%progbits
 1016              		.align	2
 1017              		.global	modem_process_tasks
 1018              		.thumb
 1019              		.thumb_func
 1020              		.type	modem_process_tasks, %function
 1021              	modem_process_tasks:
 1022              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1023              		.loc 1 291 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 8
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027 0000 80B5     		push	{r7, lr}
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 7, -8
 1030              		.cfi_offset 14, -4
 1031 0002 82B0     		sub	sp, sp, #8
 1032              		.cfi_def_cfa_offset 16
 1033 0004 00AF     		add	r7, sp, #0
 1034              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1035              		.loc 1 293 0
 1036 0006 534B     		ldr	r3, .L75
 1037 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1038 000a 012B     		cmp	r3, #1
 1039 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1040              		.loc 1 295 0
 1041 000e FFF7FEFF 		bl	getTimeStamp
 1042 0012 0246     		mov	r2, r0
 1043 0014 504B     		ldr	r3, .L75+4
 1044 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1045              		.loc 1 296 0
 1046 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1047              		.loc 1 297 0
 1048 001c 4D4B     		ldr	r3, .L75
 1049 001e 0222     		movs	r2, #2
 1050 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 26


 1051              		.loc 1 298 0
 1052 0022 0123     		movs	r3, #1
 1053 0024 92E0     		b	.L61
 1054              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1055              		.loc 1 302 0
 1056 0026 4B4B     		ldr	r3, .L75
 1057 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1058 002a 022B     		cmp	r3, #2
 1059 002c 5FD1     		bne	.L62
 1060              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1061              		.loc 1 305 0
 1062 002e 0023     		movs	r3, #0
 1063 0030 FB71     		strb	r3, [r7, #7]
 1064 0032 2BE0     		b	.L63
 1065              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1066              		.loc 1 307 0
 1067 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1068              		.loc 1 309 0
 1069 0038 484B     		ldr	r3, .L75+8
 1070 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1071 003c 83F00103 		eor	r3, r3, #1
 1072 0040 DBB2     		uxtb	r3, r3
 1073 0042 002B     		cmp	r3, #0
 1074 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1075              		.loc 1 312 0
 1076 0046 464B     		ldr	r3, .L75+12
 1077 0048 5B69     		ldr	r3, [r3, #20]
 1078 004a 1A2B     		cmp	r3, #26
 1079 004c 03DD     		ble	.L64
 1080              		.loc 1 312 0 is_stmt 0 discriminator 1
 1081 004e 444B     		ldr	r3, .L75+12
 1082 0050 5B69     		ldr	r3, [r3, #20]
 1083 0052 FF2B     		cmp	r3, #255
 1084 0054 1ED1     		bne	.L74
 1085              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1086              		.loc 1 317 0 is_stmt 1
 1087 0056 414B     		ldr	r3, .L75+8
 1088 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 27


 1089 005a 002B     		cmp	r3, #0
 1090 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1091              		.loc 1 320 0
 1092 005e 404B     		ldr	r3, .L75+12
 1093 0060 9B68     		ldr	r3, [r3, #8]
 1094 0062 242B     		cmp	r3, #36
 1095 0064 03DD     		ble	.L67
 1096              		.loc 1 320 0 is_stmt 0 discriminator 1
 1097 0066 3E4B     		ldr	r3, .L75+12
 1098 0068 9B68     		ldr	r3, [r3, #8]
 1099 006a FF2B     		cmp	r3, #255
 1100 006c 13D1     		bne	.L65
 1101              	.L67:
 1102              		.loc 1 320 0 discriminator 3
 1103 006e 3C4B     		ldr	r3, .L75+12
 1104 0070 5B69     		ldr	r3, [r3, #20]
 1105 0072 1A2B     		cmp	r3, #26
 1106 0074 03DD     		ble	.L66
 1107              		.loc 1 320 0 discriminator 4
 1108 0076 3A4B     		ldr	r3, .L75+12
 1109 0078 5B69     		ldr	r3, [r3, #20]
 1110 007a FF2B     		cmp	r3, #255
 1111 007c 0BD1     		bne	.L65
 1112              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1113              		.loc 1 325 0 is_stmt 1 discriminator 2
 1114 007e 4FF47A70 		mov	r0, #1000
 1115 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1116              		.loc 1 305 0 discriminator 2
 1117 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1118 0088 0133     		adds	r3, r3, #1
 1119 008a FB71     		strb	r3, [r7, #7]
 1120              	.L63:
 305:modem.c       ****             // Get cell network stats
 1121              		.loc 1 305 0 is_stmt 0 discriminator 1
 1122 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1123 008e 1D2B     		cmp	r3, #29
 1124 0090 D0D9     		bls	.L68
 1125 0092 00E0     		b	.L65
 1126              	.L74:
 313:modem.c       ****                 }
 1127              		.loc 1 313 0 is_stmt 1
 1128 0094 00BF     		nop
 1129              	.L65:
 1130              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 28


 1131              		.loc 1 329 0
 1132 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1133 009a 0346     		mov	r3, r0
 1134 009c 002B     		cmp	r3, #0
 1135 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1136              		.loc 1 331 0
 1137 00a0 FFF7FEFF 		bl	getTimeStamp
 1138 00a4 0246     		mov	r2, r0
 1139 00a6 2C4B     		ldr	r3, .L75+4
 1140 00a8 1B68     		ldr	r3, [r3]
 1141 00aa D31A     		subs	r3, r2, r3
 1142 00ac 2C4A     		ldr	r2, .L75+12
 1143 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1144              		.loc 1 332 0
 1145 00b0 2B4B     		ldr	r3, .L75+12
 1146 00b2 9B69     		ldr	r3, [r3, #24]
 1147 00b4 1A46     		mov	r2, r3
 1148 00b6 2B49     		ldr	r1, .L75+16
 1149 00b8 0020     		movs	r0, #0
 1150 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1151              		.loc 1 334 0
 1152 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1153              		.loc 1 335 0
 1154 00c2 244B     		ldr	r3, .L75
 1155 00c4 0322     		movs	r2, #3
 1156 00c6 1A70     		strb	r2, [r3]
 1157              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1158              		.loc 1 339 0
 1159 00c8 FFF7FEFF 		bl	getTimeStamp
 1160 00cc 0246     		mov	r2, r0
 1161 00ce 224B     		ldr	r3, .L75+4
 1162 00d0 1B68     		ldr	r3, [r3]
 1163 00d2 D31A     		subs	r3, r2, r3
 1164 00d4 B42B     		cmp	r3, #180
 1165 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1166              		.loc 1 340 0
 1167 00d8 1E4B     		ldr	r3, .L75
 1168 00da 0022     		movs	r2, #0
 1169 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1170              		.loc 1 341 0
 1171 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1172              		.loc 1 342 0
 1173 00e2 2149     		ldr	r1, .L75+20
 1174 00e4 0220     		movs	r0, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 29


 1175 00e6 FFF7FEFF 		bl	printNotif
 1176              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1177              		.loc 1 345 0
 1178 00ea 0023     		movs	r3, #0
 1179 00ec 2EE0     		b	.L61
 1180              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1181              		.loc 1 348 0
 1182 00ee 194B     		ldr	r3, .L75
 1183 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1184 00f2 032B     		cmp	r3, #3
 1185 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1186              		.loc 1 350 0
 1187 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1188 00fa 0346     		mov	r3, r0
 1189 00fc 002B     		cmp	r3, #0
 1190 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1191              		.loc 1 351 0
 1192 0100 144B     		ldr	r3, .L75
 1193 0102 0422     		movs	r2, #4
 1194 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1195              		.loc 1 353 0
 1196 0106 FFF7FEFF 		bl	getTimeStamp
 1197 010a 0246     		mov	r2, r0
 1198 010c 124B     		ldr	r3, .L75+4
 1199 010e 1B68     		ldr	r3, [r3]
 1200 0110 D31A     		subs	r3, r2, r3
 1201 0112 134A     		ldr	r2, .L75+12
 1202 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1203              		.loc 1 354 0
 1204 0116 124B     		ldr	r3, .L75+12
 1205 0118 DB69     		ldr	r3, [r3, #28]
 1206 011a 1A46     		mov	r2, r3
 1207 011c 1349     		ldr	r1, .L75+24
 1208 011e 0020     		movs	r0, #0
 1209 0120 FFF7FEFF 		bl	printNotif
 1210              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1211              		.loc 1 359 0
 1212 0124 FFF7FEFF 		bl	getTimeStamp
 1213 0128 0246     		mov	r2, r0
 1214 012a 0B4B     		ldr	r3, .L75+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 30


 1215 012c 1B68     		ldr	r3, [r3]
 1216 012e D31A     		subs	r3, r2, r3
 1217 0130 E62B     		cmp	r3, #230
 1218 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1219              		.loc 1 360 0
 1220 0134 074B     		ldr	r3, .L75
 1221 0136 0022     		movs	r2, #0
 1222 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1223              		.loc 1 361 0
 1224 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1225              		.loc 1 362 0
 1226 013e 0C49     		ldr	r1, .L75+28
 1227 0140 0220     		movs	r0, #2
 1228 0142 FFF7FEFF 		bl	printNotif
 1229              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1230              		.loc 1 365 0
 1231 0146 0023     		movs	r3, #0
 1232 0148 00E0     		b	.L61
 1233              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1234              		.loc 1 368 0
 1235 014a 0023     		movs	r3, #0
 1236              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1237              		.loc 1 370 0
 1238 014c 1846     		mov	r0, r3
 1239 014e 0837     		adds	r7, r7, #8
 1240              		.cfi_def_cfa_offset 8
 1241 0150 BD46     		mov	sp, r7
 1242              		.cfi_def_cfa_register 13
 1243              		@ sp needed
 1244 0152 80BD     		pop	{r7, pc}
 1245              	.L76:
 1246              		.align	2
 1247              	.L75:
 1248 0154 00000000 		.word	modem_state
 1249 0158 00000000 		.word	modem_start_time_stamp
 1250 015c 00000000 		.word	updatable_parameters
 1251 0160 00000000 		.word	modem_stats
 1252 0164 9C010000 		.word	.LC13
 1253 0168 C4010000 		.word	.LC14
 1254 016c E8010000 		.word	.LC15
 1255 0170 08020000 		.word	.LC16
 1256              		.cfi_endproc
 1257              	.LFE75:
 1258              		.size	modem_process_tasks, .-modem_process_tasks
 1259              		.section	.rodata
 1260 022f 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 31


 1261              	.LC17:
 1262 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1262      6B696E67 
 1262      2041542B 
 1262      43524547 
 1262      3F00
 1263 0242 0000     		.align	2
 1264              	.LC18:
 1265 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1265      5245473F 
 1265      0D00
 1266 024e 0000     		.align	2
 1267              	.LC19:
 1268 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1268      61637469 
 1268      6E672073 
 1268      7472696E 
 1268      67204154 
 1269 026b 00       		.align	2
 1270              	.LC20:
 1271 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1271      5F726563 
 1271      65697665 
 1271      645F7374 
 1271      72696E67 
 1272 0285 000000   		.align	2
 1273              	.LC21:
 1274 0288 0D00     		.ascii	"\015\000"
 1275 028a 0000     		.align	2
 1276              	.LC22:
 1277 028c 3A2000   		.ascii	": \000"
 1278 028f 00       		.align	2
 1279              	.LC23:
 1280 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1280      73746572 
 1280      65642074 
 1280      6F206E65 
 1280      74776F72 
 1281              		.align	2
 1282              	.LC24:
 1283 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1283      20657874 
 1283      72616369 
 1283      6E672073 
 1283      7472696E 
 1284 02cf 00       		.align	2
 1285              	.LC25:
 1286 02d0 302C3100 		.ascii	"0,1\000"
 1287              		.align	2
 1288              	.LC26:
 1289 02d4 302C3500 		.ascii	"0,5\000"
 1290              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1291              		.align	2
 1292              		.global	is_connected_to_cell_network
 1293              		.thumb
 1294              		.thumb_func
 1295              		.type	is_connected_to_cell_network, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 32


 1296              	is_connected_to_cell_network:
 1297              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1298              		.loc 1 373 0
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 16
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302 0000 80B5     		push	{r7, lr}
 1303              		.cfi_def_cfa_offset 8
 1304              		.cfi_offset 7, -8
 1305              		.cfi_offset 14, -4
 1306 0002 84B0     		sub	sp, sp, #16
 1307              		.cfi_def_cfa_offset 24
 1308 0004 00AF     		add	r7, sp, #0
 1309              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1310              		.loc 1 375 0
 1311 0006 2049     		ldr	r1, .L82
 1312 0008 0020     		movs	r0, #0
 1313 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1314              		.loc 1 377 0
 1315 000e 4FF4FA62 		mov	r2, #2000
 1316 0012 1E49     		ldr	r1, .L82+4
 1317 0014 1E48     		ldr	r0, .L82+8
 1318 0016 FFF7FEFF 		bl	at_write_command
 1319 001a 0346     		mov	r3, r0
 1320 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1321              		.loc 1 379 0
 1322 001e 1D49     		ldr	r1, .L82+12
 1323 0020 0020     		movs	r0, #0
 1324 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1325              		.loc 1 380 0
 1326 0026 1C4A     		ldr	r2, .L82+16
 1327 0028 1C49     		ldr	r1, .L82+20
 1328 002a 0020     		movs	r0, #0
 1329 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1330              		.loc 1 383 0
 1331 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1332 0032 002B     		cmp	r3, #0
 1333 0034 23D0     		beq	.L78
 1334              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1335              		.loc 1 386 0
 1336 0036 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 33


 1337 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1338              		.loc 1 388 0
 1339 003a 3B1D     		adds	r3, r7, #4
 1340 003c 184A     		ldr	r2, .L82+24
 1341 003e 1949     		ldr	r1, .L82+28
 1342 0040 1548     		ldr	r0, .L82+16
 1343 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1344              		.loc 1 389 0
 1345 0046 3B1D     		adds	r3, r7, #4
 1346 0048 1A46     		mov	r2, r3
 1347 004a 1749     		ldr	r1, .L82+32
 1348 004c 0020     		movs	r0, #0
 1349 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1350              		.loc 1 390 0
 1351 0052 1649     		ldr	r1, .L82+36
 1352 0054 0020     		movs	r0, #0
 1353 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1354              		.loc 1 393 0
 1355 005a 3B1D     		adds	r3, r7, #4
 1356 005c 1449     		ldr	r1, .L82+40
 1357 005e 1846     		mov	r0, r3
 1358 0060 FFF7FEFF 		bl	strstr
 1359 0064 0346     		mov	r3, r0
 1360 0066 002B     		cmp	r3, #0
 1361 0068 07D1     		bne	.L79
 1362              		.loc 1 393 0 is_stmt 0 discriminator 1
 1363 006a 3B1D     		adds	r3, r7, #4
 1364 006c 1149     		ldr	r1, .L82+44
 1365 006e 1846     		mov	r0, r3
 1366 0070 FFF7FEFF 		bl	strstr
 1367 0074 0346     		mov	r3, r0
 1368 0076 002B     		cmp	r3, #0
 1369 0078 01D0     		beq	.L78
 1370              	.L79:
 394:modem.c       ****             return 1u;
 1371              		.loc 1 394 0 is_stmt 1
 1372 007a 0123     		movs	r3, #1
 1373 007c 00E0     		b	.L81
 1374              	.L78:
 1375              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1376              		.loc 1 398 0
 1377 007e 0023     		movs	r3, #0
 1378              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1379              		.loc 1 400 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 34


 1380 0080 1846     		mov	r0, r3
 1381 0082 1037     		adds	r7, r7, #16
 1382              		.cfi_def_cfa_offset 8
 1383 0084 BD46     		mov	sp, r7
 1384              		.cfi_def_cfa_register 13
 1385              		@ sp needed
 1386 0086 80BD     		pop	{r7, pc}
 1387              	.L83:
 1388              		.align	2
 1389              	.L82:
 1390 0088 30020000 		.word	.LC17
 1391 008c 00000000 		.word	.LC0
 1392 0090 44020000 		.word	.LC18
 1393 0094 50020000 		.word	.LC19
 1394 0098 00000000 		.word	uart_received_string
 1395 009c 6C020000 		.word	.LC20
 1396 00a0 88020000 		.word	.LC21
 1397 00a4 8C020000 		.word	.LC22
 1398 00a8 90020000 		.word	.LC23
 1399 00ac B0020000 		.word	.LC24
 1400 00b0 D0020000 		.word	.LC25
 1401 00b4 D4020000 		.word	.LC26
 1402              		.cfi_endproc
 1403              	.LFE76:
 1404              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1405              		.section	.rodata
 1406              		.align	2
 1407              	.LC27:
 1408 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1408      47414354 
 1408      3D312C31 
 1408      0D0A00
 1409              		.section	.text.set_up_internet_connection,"ax",%progbits
 1410              		.align	2
 1411              		.global	set_up_internet_connection
 1412              		.thumb
 1413              		.thumb_func
 1414              		.type	set_up_internet_connection, %function
 1415              	set_up_internet_connection:
 1416              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1417              		.loc 1 403 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 0000 80B5     		push	{r7, lr}
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 7, -8
 1424              		.cfi_offset 14, -4
 1425 0002 00AF     		add	r7, sp, #0
 1426              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 35


 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1427              		.loc 1 414 0
 1428 0004 4FF47A72 		mov	r2, #1000
 1429 0008 0249     		ldr	r1, .L85
 1430 000a 0348     		ldr	r0, .L85+4
 1431 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1432              		.loc 1 416 0
 1433 0010 00BF     		nop
 1434 0012 80BD     		pop	{r7, pc}
 1435              	.L86:
 1436              		.align	2
 1437              	.L85:
 1438 0014 00000000 		.word	.LC0
 1439 0018 D8020000 		.word	.LC27
 1440              		.cfi_endproc
 1441              	.LFE77:
 1442              		.size	set_up_internet_connection, .-set_up_internet_connection
 1443              		.section	.rodata
 1444 02e7 00       		.align	2
 1445              	.LC28:
 1446 02e8 312C3100 		.ascii	"1,1\000"
 1447              		.align	2
 1448              	.LC29:
 1449 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1449      47414354 
 1449      3F0D00
 1450              		.section	.text.is_connected_to_internet,"ax",%progbits
 1451              		.align	2
 1452              		.global	is_connected_to_internet
 1453              		.thumb
 1454              		.thumb_func
 1455              		.type	is_connected_to_internet, %function
 1456              	is_connected_to_internet:
 1457              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1458              		.loc 1 419 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462 0000 80B5     		push	{r7, lr}
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 00AF     		add	r7, sp, #0
 1467              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 36


 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1468              		.loc 1 424 0
 1469 0004 4FF4FA62 		mov	r2, #2000
 1470 0008 0549     		ldr	r1, .L90
 1471 000a 0648     		ldr	r0, .L90+4
 1472 000c FFF7FEFF 		bl	at_write_command
 1473 0010 0346     		mov	r3, r0
 1474 0012 002B     		cmp	r3, #0
 1475 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1476              		.loc 1 425 0
 1477 0016 0123     		movs	r3, #1
 1478 0018 00E0     		b	.L89
 1479              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1480              		.loc 1 427 0
 1481 001a 0023     		movs	r3, #0
 1482              	.L89:
 428:modem.c       **** }
 1483              		.loc 1 428 0
 1484 001c 1846     		mov	r0, r3
 1485 001e 80BD     		pop	{r7, pc}
 1486              	.L91:
 1487              		.align	2
 1488              	.L90:
 1489 0020 E8020000 		.word	.LC28
 1490 0024 EC020000 		.word	.LC29
 1491              		.cfi_endproc
 1492              	.LFE78:
 1493              		.size	is_connected_to_internet, .-is_connected_to_internet
 1494              		.section	.rodata
 1495 02f7 00       		.align	2
 1496              	.LC30:
 1497 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1497      4553510D 
 1497      00
 1498 0301 000000   		.align	2
 1499              	.LC31:
 1500 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1500      4553513A 
 1500      2025642C 
 1500      25642C25 
 1500      642C2564 
 1501              		.section	.text.get_cell_network_stats,"ax",%progbits
 1502              		.align	2
 1503              		.global	get_cell_network_stats
 1504              		.thumb
 1505              		.thumb_func
 1506              		.type	get_cell_network_stats, %function
 1507              	get_cell_network_stats:
 1508              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1509              		.loc 1 430 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 37


 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 8
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 86B0     		sub	sp, sp, #24
 1518              		.cfi_def_cfa_offset 32
 1519 0004 04AF     		add	r7, sp, #16
 1520              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1521              		.loc 1 432 0
 1522 0006 154B     		ldr	r3, .L93
 1523 0008 FF22     		movs	r2, #255
 1524 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1525              		.loc 1 433 0
 1526 000c 134B     		ldr	r3, .L93
 1527 000e FF22     		movs	r2, #255
 1528 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1529              		.loc 1 434 0
 1530 0012 124B     		ldr	r3, .L93
 1531 0014 FF22     		movs	r2, #255
 1532 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1533              		.loc 1 435 0
 1534 0018 104B     		ldr	r3, .L93
 1535 001a FF22     		movs	r2, #255
 1536 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1537              		.loc 1 436 0
 1538 001e 0F4B     		ldr	r3, .L93
 1539 0020 FF22     		movs	r2, #255
 1540 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1541              		.loc 1 437 0
 1542 0024 0D4B     		ldr	r3, .L93
 1543 0026 FF22     		movs	r2, #255
 1544 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1545              		.loc 1 440 0
 1546 002a 4FF4FA62 		mov	r2, #2000
 1547 002e 0C49     		ldr	r1, .L93+4
 1548 0030 0C48     		ldr	r0, .L93+8
 1549 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1550              		.loc 1 443 0
 1551 0036 0C4B     		ldr	r3, .L93+12
 1552 0038 0393     		str	r3, [sp, #12]
 1553 003a 0C4B     		ldr	r3, .L93+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 38


 1554 003c 0293     		str	r3, [sp, #8]
 1555 003e 0C4B     		ldr	r3, .L93+20
 1556 0040 0193     		str	r3, [sp, #4]
 1557 0042 0C4B     		ldr	r3, .L93+24
 1558 0044 0093     		str	r3, [sp]
 1559 0046 0C4B     		ldr	r3, .L93+28
 1560 0048 044A     		ldr	r2, .L93
 1561 004a 0C49     		ldr	r1, .L93+32
 1562 004c 0C48     		ldr	r0, .L93+36
 1563 004e FFF7FEFF 		bl	sscanf
 1564 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1565              		.loc 1 458 0
 1566 0054 00BF     		nop
 1567 0056 0837     		adds	r7, r7, #8
 1568              		.cfi_def_cfa_offset 8
 1569 0058 BD46     		mov	sp, r7
 1570              		.cfi_def_cfa_register 13
 1571              		@ sp needed
 1572 005a 80BD     		pop	{r7, pc}
 1573              	.L94:
 1574              		.align	2
 1575              	.L93:
 1576 005c 00000000 		.word	modem_stats
 1577 0060 00000000 		.word	.LC0
 1578 0064 F8020000 		.word	.LC30
 1579 0068 14000000 		.word	modem_stats+20
 1580 006c 10000000 		.word	modem_stats+16
 1581 0070 0C000000 		.word	modem_stats+12
 1582 0074 08000000 		.word	modem_stats+8
 1583 0078 04000000 		.word	modem_stats+4
 1584 007c 04030000 		.word	.LC31
 1585 0080 00000000 		.word	uart_received_string
 1586              		.cfi_endproc
 1587              	.LFE79:
 1588              		.size	get_cell_network_stats, .-get_cell_network_stats
 1589              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1590              		.align	2
 1591              		.global	updatable_parameters_initialize
 1592              		.thumb
 1593              		.thumb_func
 1594              		.type	updatable_parameters_initialize, %function
 1595              	updatable_parameters_initialize:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 39


 1596              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1597              		.loc 1 461 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602 0000 80B4     		push	{r7}
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 7, -4
 1605 0002 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1607              		.loc 1 462 0
 1608 0004 0C4B     		ldr	r3, .L96
 1609 0006 0022     		movs	r2, #0
 1610 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1611              		.loc 1 463 0
 1612 000a 0B4B     		ldr	r3, .L96
 1613 000c 0122     		movs	r2, #1
 1614 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1615              		.loc 1 464 0
 1616 0010 094B     		ldr	r3, .L96
 1617 0012 0122     		movs	r2, #1
 1618 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1619              		.loc 1 465 0
 1620 0016 084B     		ldr	r3, .L96
 1621 0018 0122     		movs	r2, #1
 1622 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1623              		.loc 1 466 0
 1624 001c 064B     		ldr	r3, .L96
 1625 001e 0122     		movs	r2, #1
 1626 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     updatable_parameters.App_LED_freq = 2u; // if turn on, change to higher frequency
 1627              		.loc 1 469 0
 1628 0022 054B     		ldr	r3, .L96
 1629 0024 0222     		movs	r2, #2
 1630 0026 5A71     		strb	r2, [r3, #5]
 470:modem.c       ****     updatable_parameters.Level_Sensor_freq = 3u; 
 1631              		.loc 1 470 0
 1632 0028 034B     		ldr	r3, .L96
 1633 002a 0322     		movs	r2, #3
 1634 002c 9A71     		strb	r2, [r3, #6]
 471:modem.c       **** }
 1635              		.loc 1 471 0
 1636 002e 00BF     		nop
 1637 0030 BD46     		mov	sp, r7
 1638              		.cfi_def_cfa_register 13
 1639              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 40


 1640 0032 80BC     		pop	{r7}
 1641              		.cfi_restore 7
 1642              		.cfi_def_cfa_offset 0
 1643 0034 7047     		bx	lr
 1644              	.L97:
 1645 0036 00BF     		.align	2
 1646              	.L96:
 1647 0038 00000000 		.word	updatable_parameters
 1648              		.cfi_endproc
 1649              	.LFE80:
 1650              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1651              		.section	.rodata
 1652 0322 0000     		.align	2
 1653              	.LC32:
 1654 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1654      5F547970 
 1654      653A2000 
 1655              		.align	2
 1656              	.LC33:
 1657 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1657      54797065 
 1657      3A2000
 1658 033b 00       		.align	2
 1659              	.LC34:
 1660 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1660      6C655F46 
 1660      7265713A 
 1660      2000
 1661 034a 0000     		.align	2
 1662              	.LC35:
 1663 034c 5265706F 		.ascii	"Report_Freq: \000"
 1663      72745F46 
 1663      7265713A 
 1663      2000
 1664 035a 0000     		.align	2
 1665              	.LC36:
 1666 035c 44656275 		.ascii	"Debug_Freq: \000"
 1666      675F4672 
 1666      65713A20 
 1666      00
 1667 0369 000000   		.align	2
 1668              	.LC37:
 1669 036c 4170705F 		.ascii	"App_LED: \000"
 1669      4C45443A 
 1669      2000
 1670 0376 0000     		.align	2
 1671              	.LC38:
 1672 0378 4C657665 		.ascii	"Level_Sensor: \000"
 1672      6C5F5365 
 1672      6E736F72 
 1672      3A2000
 1673 0387 00       		.align	2
 1674              	.LC39:
 1675 0388 256400   		.ascii	"%d\000"
 1676 038b 00       		.align	2
 1677              	.LC40:
 1678 038c 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 41


 1678      20747970 
 1678      65206368 
 1678      616E6765 
 1678      6420746F 
 1679 03a7 00       		.align	2
 1680              	.LC41:
 1681 03a8 436F756C 		.ascii	"Could not change node type.\000"
 1681      64206E6F 
 1681      74206368 
 1681      616E6765 
 1681      206E6F64 
 1682              		.align	2
 1683              	.LC42:
 1684 03c4 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1684      74797065 
 1684      20636861 
 1684      6E676564 
 1684      20746F3A 
 1685 03de 0000     		.align	2
 1686              	.LC43:
 1687 03e0 436F756C 		.ascii	"Could not change SIM type.\000"
 1687      64206E6F 
 1687      74206368 
 1687      616E6765 
 1687      2053494D 
 1688 03fb 00       		.align	2
 1689              	.LC44:
 1690 03fc 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1690      6C696E67 
 1690      20667265 
 1690      7175656E 
 1690      63792063 
 1691              		.align	2
 1692              	.LC45:
 1693 0420 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1693      64206E6F 
 1693      74207061 
 1693      72736520 
 1693      6E657720 
 1694 044e 0000     		.align	2
 1695              	.LC46:
 1696 0450 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1696      7274696E 
 1696      67206672 
 1696      65717565 
 1696      6E637920 
 1697 0475 000000   		.align	2
 1698              	.LC47:
 1699 0478 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1699      64206E6F 
 1699      74207061 
 1699      72736520 
 1699      6E657720 
 1700 04a7 00       		.align	2
 1701              	.LC48:
 1702 04a8 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1702      67207072 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 42


 1702      696E7469 
 1702      6E672066 
 1702      72657175 
 1703 04d2 0000     		.align	2
 1704              	.LC49:
 1705 04d4 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1705      64206E6F 
 1705      74207061 
 1705      72736520 
 1705      6E657720 
 1706 0503 00       		.align	2
 1707              	.LC50:
 1708 0504 46726571 		.ascii	"Freq: \000"
 1708      3A2000
 1709 050b 00       		.align	2
 1710              	.LC51:
 1711 050c 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1711      4C454420 
 1711      66726571 
 1711      75656E63 
 1711      79206368 
 1712 052f 00       		.align	2
 1713              	.LC52:
 1714 0530 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1714      64206E6F 
 1714      74207061 
 1714      72736520 
 1714      6E657720 
 1715 055d 000000   		.align	2
 1716              	.LC53:
 1717 0560 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1717      70705F4C 
 1717      45442066 
 1717      72657175 
 1717      656E6379 
 1718 0586 0000     		.align	2
 1719              	.LC54:
 1720 0588 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1720      6C5F5365 
 1720      6E736F72 
 1720      20667265 
 1720      7175656E 
 1721              		.align	2
 1722              	.LC55:
 1723 05b0 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1723      64206E6F 
 1723      74207061 
 1723      72736520 
 1723      6E657720 
 1724 05e2 0000     		.align	2
 1725              	.LC56:
 1726 05e4 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1726      6576656C 
 1726      5F53656E 
 1726      736F7220 
 1726      66726571 
 1727              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 43


 1728              		.align	2
 1729              		.global	get_updated_parameters_from_malcom
 1730              		.thumb
 1731              		.thumb_func
 1732              		.type	get_updated_parameters_from_malcom, %function
 1733              	get_updated_parameters_from_malcom:
 1734              	.LFB81:
 472:modem.c       **** 
 473:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 474:modem.c       **** void get_updated_parameters_from_malcom(){
 1735              		.loc 1 474 0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 400
 1738              		@ frame_needed = 1, uses_anonymous_args = 0
 1739 0000 90B5     		push	{r4, r7, lr}
 1740              		.cfi_def_cfa_offset 12
 1741              		.cfi_offset 4, -12
 1742              		.cfi_offset 7, -8
 1743              		.cfi_offset 14, -4
 1744 0002 E5B0     		sub	sp, sp, #404
 1745              		.cfi_def_cfa_offset 416
 1746 0004 00AF     		add	r7, sp, #0
 1747              		.cfi_def_cfa_register 7
 475:modem.c       ****     
 476:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 477:modem.c       ****     char s_node_type[10];
 478:modem.c       ****     char s_sim_type[10];
 479:modem.c       ****     char s_sample_freq[10];
 480:modem.c       ****     char s_report_freq[10];
 481:modem.c       ****     char s_debug_freq[10];
 482:modem.c       ****     
 483:modem.c       ****     //apps
 484:modem.c       ****     char s_app_led[100];
 485:modem.c       ****     s_app_led[0] = '\0';
 1748              		.loc 1 485 0
 1749 0006 0023     		movs	r3, #0
 1750 0008 87F8F030 		strb	r3, [r7, #240]
 486:modem.c       ****     
 487:modem.c       ****     char s_level_sensor[100];
 488:modem.c       ****     s_level_sensor[0] = '\0';
 1751              		.loc 1 488 0
 1752 000c 07F18C03 		add	r3, r7, #140
 1753 0010 0022     		movs	r2, #0
 1754 0012 1A70     		strb	r2, [r3]
 489:modem.c       ****     
 490:modem.c       ****     s_node_type[0] = '\0';
 1755              		.loc 1 490 0
 1756 0014 0023     		movs	r3, #0
 1757 0016 87F88431 		strb	r3, [r7, #388]
 491:modem.c       ****     s_sim_type[0] = '\0';
 1758              		.loc 1 491 0
 1759 001a 0023     		movs	r3, #0
 1760 001c 87F87831 		strb	r3, [r7, #376]
 492:modem.c       ****     s_sample_freq[0] = '\0';
 1761              		.loc 1 492 0
 1762 0020 0023     		movs	r3, #0
 1763 0022 87F86C31 		strb	r3, [r7, #364]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 44


 493:modem.c       ****     s_report_freq[0] = '\0';
 1764              		.loc 1 493 0
 1765 0026 0023     		movs	r3, #0
 1766 0028 87F86031 		strb	r3, [r7, #352]
 494:modem.c       ****     s_debug_freq[0] = '\0';
 1767              		.loc 1 494 0
 1768 002c 0023     		movs	r3, #0
 1769 002e 87F85431 		strb	r3, [r7, #340]
 495:modem.c       ****     
 496:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 497:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1770              		.loc 1 497 0
 1771 0032 07F5C273 		add	r3, r7, #388
 1772 0036 C44A     		ldr	r2, .L119
 1773 0038 C449     		ldr	r1, .L119+4
 1774 003a C548     		ldr	r0, .L119+8
 1775 003c FFF7FEFF 		bl	extract_string
 498:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1776              		.loc 1 498 0
 1777 0040 07F5BC73 		add	r3, r7, #376
 1778 0044 C04A     		ldr	r2, .L119
 1779 0046 C349     		ldr	r1, .L119+12
 1780 0048 C148     		ldr	r0, .L119+8
 1781 004a FFF7FEFF 		bl	extract_string
 499:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1782              		.loc 1 499 0
 1783 004e 07F5B673 		add	r3, r7, #364
 1784 0052 BD4A     		ldr	r2, .L119
 1785 0054 C049     		ldr	r1, .L119+16
 1786 0056 BE48     		ldr	r0, .L119+8
 1787 0058 FFF7FEFF 		bl	extract_string
 500:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1788              		.loc 1 500 0
 1789 005c 07F5B073 		add	r3, r7, #352
 1790 0060 B94A     		ldr	r2, .L119
 1791 0062 BE49     		ldr	r1, .L119+20
 1792 0064 BA48     		ldr	r0, .L119+8
 1793 0066 FFF7FEFF 		bl	extract_string
 501:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1794              		.loc 1 501 0
 1795 006a 07F5AA73 		add	r3, r7, #340
 1796 006e B64A     		ldr	r2, .L119
 1797 0070 BB49     		ldr	r1, .L119+24
 1798 0072 B748     		ldr	r0, .L119+8
 1799 0074 FFF7FEFF 		bl	extract_string
 502:modem.c       ****     
 503:modem.c       ****     //app features
 504:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1800              		.loc 1 504 0
 1801 0078 07F1F003 		add	r3, r7, #240
 1802 007c B24A     		ldr	r2, .L119
 1803 007e B949     		ldr	r1, .L119+28
 1804 0080 B348     		ldr	r0, .L119+8
 1805 0082 FFF7FEFF 		bl	extract_string
 505:modem.c       ****     App_LED_Update(s_app_led);
 1806              		.loc 1 505 0
 1807 0086 07F1F003 		add	r3, r7, #240
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 45


 1808 008a 1846     		mov	r0, r3
 1809 008c FFF7FEFF 		bl	App_LED_Update
 506:modem.c       ****     
 507:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1810              		.loc 1 507 0
 1811 0090 07F18C03 		add	r3, r7, #140
 1812 0094 AC4A     		ldr	r2, .L119
 1813 0096 B449     		ldr	r1, .L119+32
 1814 0098 AD48     		ldr	r0, .L119+8
 1815 009a FFF7FEFF 		bl	extract_string
 508:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1816              		.loc 1 508 0
 1817 009e 07F18C03 		add	r3, r7, #140
 1818 00a2 1846     		mov	r0, r3
 1819 00a4 FFF7FEFF 		bl	Level_Sensor_Update
 509:modem.c       ****     
 510:modem.c       ****     // Create variables for what is sent back from the server
 511:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq;
 512:modem.c       ****     
 513:modem.c       ****     // Scan character arrays and save values 
 514:modem.c       ****     
 515:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1820              		.loc 1 515 0
 1821 00a8 07F18802 		add	r2, r7, #136
 1822 00ac 07F5C273 		add	r3, r7, #388
 1823 00b0 AE49     		ldr	r1, .L119+36
 1824 00b2 1846     		mov	r0, r3
 1825 00b4 FFF7FEFF 		bl	sscanf
 1826 00b8 0346     		mov	r3, r0
 1827 00ba 012B     		cmp	r3, #1
 1828 00bc 0ED1     		bne	.L99
 516:modem.c       ****         updatable_parameters.node_type = node_type;
 1829              		.loc 1 516 0
 1830 00be 07F18803 		add	r3, r7, #136
 1831 00c2 1B68     		ldr	r3, [r3]
 1832 00c4 DAB2     		uxtb	r2, r3
 1833 00c6 AA4B     		ldr	r3, .L119+40
 1834 00c8 1A70     		strb	r2, [r3]
 517:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1835              		.loc 1 517 0
 1836 00ca 07F18803 		add	r3, r7, #136
 1837 00ce 1B68     		ldr	r3, [r3]
 1838 00d0 1A46     		mov	r2, r3
 1839 00d2 A849     		ldr	r1, .L119+44
 1840 00d4 0020     		movs	r0, #0
 1841 00d6 FFF7FEFF 		bl	printNotif
 1842 00da 03E0     		b	.L100
 1843              	.L99:
 518:modem.c       ****     }else{
 519:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1844              		.loc 1 519 0
 1845 00dc A649     		ldr	r1, .L119+48
 1846 00de 0220     		movs	r0, #2
 1847 00e0 FFF7FEFF 		bl	printNotif
 1848              	.L100:
 520:modem.c       ****     }
 521:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 46


 522:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1849              		.loc 1 522 0
 1850 00e4 07F18402 		add	r2, r7, #132
 1851 00e8 07F5BC73 		add	r3, r7, #376
 1852 00ec 9F49     		ldr	r1, .L119+36
 1853 00ee 1846     		mov	r0, r3
 1854 00f0 FFF7FEFF 		bl	sscanf
 1855 00f4 0346     		mov	r3, r0
 1856 00f6 012B     		cmp	r3, #1
 1857 00f8 12D1     		bne	.L101
 523:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1858              		.loc 1 523 0
 1859 00fa 07F18403 		add	r3, r7, #132
 1860 00fe 1B68     		ldr	r3, [r3]
 1861 0100 002B     		cmp	r3, #0
 1862 0102 14BF     		ite	ne
 1863 0104 0123     		movne	r3, #1
 1864 0106 0023     		moveq	r3, #0
 1865 0108 DAB2     		uxtb	r2, r3
 1866 010a 994B     		ldr	r3, .L119+40
 1867 010c 5A70     		strb	r2, [r3, #1]
 524:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1868              		.loc 1 524 0
 1869 010e 07F18403 		add	r3, r7, #132
 1870 0112 1B68     		ldr	r3, [r3]
 1871 0114 1A46     		mov	r2, r3
 1872 0116 9949     		ldr	r1, .L119+52
 1873 0118 0020     		movs	r0, #0
 1874 011a FFF7FEFF 		bl	printNotif
 1875 011e 03E0     		b	.L102
 1876              	.L101:
 525:modem.c       ****     }else{
 526:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1877              		.loc 1 526 0
 1878 0120 9749     		ldr	r1, .L119+56
 1879 0122 0220     		movs	r0, #2
 1880 0124 FFF7FEFF 		bl	printNotif
 1881              	.L102:
 527:modem.c       ****     }
 528:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1882              		.loc 1 528 0
 1883 0128 07F18002 		add	r2, r7, #128
 1884 012c 07F5B673 		add	r3, r7, #364
 1885 0130 8E49     		ldr	r1, .L119+36
 1886 0132 1846     		mov	r0, r3
 1887 0134 FFF7FEFF 		bl	sscanf
 1888 0138 0346     		mov	r3, r0
 1889 013a 012B     		cmp	r3, #1
 1890 013c 1DD1     		bne	.L103
 529:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1891              		.loc 1 529 0
 1892 013e 07F18003 		add	r3, r7, #128
 1893 0142 1B68     		ldr	r3, [r3]
 1894 0144 DAB2     		uxtb	r2, r3
 1895 0146 8A4B     		ldr	r3, .L119+40
 1896 0148 9A70     		strb	r2, [r3, #2]
 530:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 47


 531:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1897              		.loc 1 531 0
 1898 014a 894B     		ldr	r3, .L119+40
 1899 014c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1900 014e 99B2     		uxth	r1, r3
 1901 0150 8C4C     		ldr	r4, .L119+60
 1902 0152 3846     		mov	r0, r7
 1903 0154 0723     		movs	r3, #7
 1904 0156 0122     		movs	r2, #1
 1905 0158 FFF7FEFF 		bl	CreateAlarm
 1906 015c 3A46     		mov	r2, r7
 1907 015e 2346     		mov	r3, r4
 1908 0160 1168     		ldr	r1, [r2]	@ unaligned
 1909 0162 1960     		str	r1, [r3]	@ unaligned
 1910 0164 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1911 0166 9A80     		strh	r2, [r3, #4]	@ unaligned
 532:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1912              		.loc 1 532 0
 1913 0168 07F18003 		add	r3, r7, #128
 1914 016c 1B68     		ldr	r3, [r3]
 1915 016e 1A46     		mov	r2, r3
 1916 0170 8549     		ldr	r1, .L119+64
 1917 0172 0020     		movs	r0, #0
 1918 0174 FFF7FEFF 		bl	printNotif
 1919 0178 03E0     		b	.L104
 1920              	.L103:
 533:modem.c       ****     }else{
 534:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1921              		.loc 1 534 0
 1922 017a 8449     		ldr	r1, .L119+68
 1923 017c 0220     		movs	r0, #2
 1924 017e FFF7FEFF 		bl	printNotif
 1925              	.L104:
 535:modem.c       ****     }
 536:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1926              		.loc 1 536 0
 1927 0182 07F17C02 		add	r2, r7, #124
 1928 0186 07F5B073 		add	r3, r7, #352
 1929 018a 7849     		ldr	r1, .L119+36
 1930 018c 1846     		mov	r0, r3
 1931 018e FFF7FEFF 		bl	sscanf
 1932 0192 0346     		mov	r3, r0
 1933 0194 012B     		cmp	r3, #1
 1934 0196 1DD1     		bne	.L105
 537:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1935              		.loc 1 537 0
 1936 0198 07F17C03 		add	r3, r7, #124
 1937 019c 1B68     		ldr	r3, [r3]
 1938 019e DAB2     		uxtb	r2, r3
 1939 01a0 734B     		ldr	r3, .L119+40
 1940 01a2 DA70     		strb	r2, [r3, #3]
 538:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 539:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1941              		.loc 1 539 0
 1942 01a4 724B     		ldr	r3, .L119+40
 1943 01a6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1944 01a8 99B2     		uxth	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 48


 1945 01aa 794C     		ldr	r4, .L119+72
 1946 01ac 3846     		mov	r0, r7
 1947 01ae 0723     		movs	r3, #7
 1948 01b0 0122     		movs	r2, #1
 1949 01b2 FFF7FEFF 		bl	CreateAlarm
 1950 01b6 3A46     		mov	r2, r7
 1951 01b8 2346     		mov	r3, r4
 1952 01ba 1168     		ldr	r1, [r2]	@ unaligned
 1953 01bc 1960     		str	r1, [r3]	@ unaligned
 1954 01be 9288     		ldrh	r2, [r2, #4]	@ unaligned
 1955 01c0 9A80     		strh	r2, [r3, #4]	@ unaligned
 540:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1956              		.loc 1 540 0
 1957 01c2 07F17C03 		add	r3, r7, #124
 1958 01c6 1B68     		ldr	r3, [r3]
 1959 01c8 1A46     		mov	r2, r3
 1960 01ca 7249     		ldr	r1, .L119+76
 1961 01cc 0020     		movs	r0, #0
 1962 01ce FFF7FEFF 		bl	printNotif
 1963 01d2 03E0     		b	.L106
 1964              	.L105:
 541:modem.c       ****         }else{
 542:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1965              		.loc 1 542 0
 1966 01d4 7049     		ldr	r1, .L119+80
 1967 01d6 0220     		movs	r0, #2
 1968 01d8 FFF7FEFF 		bl	printNotif
 1969              	.L106:
 543:modem.c       ****     }
 544:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1970              		.loc 1 544 0
 1971 01dc 07F17802 		add	r2, r7, #120
 1972 01e0 07F5AA73 		add	r3, r7, #340
 1973 01e4 6149     		ldr	r1, .L119+36
 1974 01e6 1846     		mov	r0, r3
 1975 01e8 FFF7FEFF 		bl	sscanf
 1976 01ec 0346     		mov	r3, r0
 1977 01ee 012B     		cmp	r3, #1
 1978 01f0 0ED1     		bne	.L107
 545:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1979              		.loc 1 545 0
 1980 01f2 07F17803 		add	r3, r7, #120
 1981 01f6 1B68     		ldr	r3, [r3]
 1982 01f8 DAB2     		uxtb	r2, r3
 1983 01fa 5D4B     		ldr	r3, .L119+40
 1984 01fc 1A71     		strb	r2, [r3, #4]
 546:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1985              		.loc 1 546 0
 1986 01fe 07F17803 		add	r3, r7, #120
 1987 0202 1B68     		ldr	r3, [r3]
 1988 0204 1A46     		mov	r2, r3
 1989 0206 6549     		ldr	r1, .L119+84
 1990 0208 0020     		movs	r0, #0
 1991 020a FFF7FEFF 		bl	printNotif
 1992 020e 03E0     		b	.L108
 1993              	.L107:
 547:modem.c       ****     }else{
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 49


 548:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 1994              		.loc 1 548 0
 1995 0210 6349     		ldr	r1, .L119+88
 1996 0212 0220     		movs	r0, #2
 1997 0214 FFF7FEFF 		bl	printNotif
 1998              	.L108:
 549:modem.c       ****     }
 550:modem.c       ****     
 551:modem.c       ****     // app alarm frequency updates
 552:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 1999              		.loc 1 552 0
 2000 0218 554B     		ldr	r3, .L119+40
 2001 021a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2002 021c 042B     		cmp	r3, #4
 2003 021e 40F0CF80 		bne	.L118
 2004              	.LBB9:
 553:modem.c       ****         char temp[100];
 554:modem.c       **** 
 555:modem.c       ****         if (strstr(s_app_led,"Freq: ") && strstr(s_app_led,"\r")){
 2005              		.loc 1 555 0
 2006 0222 07F1F003 		add	r3, r7, #240
 2007 0226 5F49     		ldr	r1, .L119+92
 2008 0228 1846     		mov	r0, r3
 2009 022a FFF7FEFF 		bl	strstr
 2010 022e 0346     		mov	r3, r0
 2011 0230 002B     		cmp	r3, #0
 2012 0232 3BD0     		beq	.L110
 2013              		.loc 1 555 0 is_stmt 0 discriminator 1
 2014 0234 07F1F003 		add	r3, r7, #240
 2015 0238 0D21     		movs	r1, #13
 2016 023a 1846     		mov	r0, r3
 2017 023c FFF7FEFF 		bl	strchr
 2018 0240 0346     		mov	r3, r0
 2019 0242 002B     		cmp	r3, #0
 2020 0244 32D0     		beq	.L110
 556:modem.c       ****             temp[0] = '\0';
 2021              		.loc 1 556 0 is_stmt 1
 2022 0246 07F10C03 		add	r3, r7, #12
 2023 024a 0022     		movs	r2, #0
 2024 024c 1A70     		strb	r2, [r3]
 557:modem.c       ****             strcpy(temp,s_app_led);
 2025              		.loc 1 557 0
 2026 024e 07F1F002 		add	r2, r7, #240
 2027 0252 07F10C03 		add	r3, r7, #12
 2028 0256 1146     		mov	r1, r2
 2029 0258 1846     		mov	r0, r3
 2030 025a FFF7FEFF 		bl	strcpy
 558:modem.c       ****             extract_string(temp,"Freq: ","\r",s_app_led); // grab level app frequency
 2031              		.loc 1 558 0
 2032 025e 07F1F003 		add	r3, r7, #240
 2033 0262 07F10C00 		add	r0, r7, #12
 2034 0266 384A     		ldr	r2, .L119
 2035 0268 4E49     		ldr	r1, .L119+92
 2036 026a FFF7FEFF 		bl	extract_string
 559:modem.c       ****             if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2037              		.loc 1 559 0
 2038 026e 07F17402 		add	r2, r7, #116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 50


 2039 0272 07F1F003 		add	r3, r7, #240
 2040 0276 3D49     		ldr	r1, .L119+36
 2041 0278 1846     		mov	r0, r3
 2042 027a FFF7FEFF 		bl	sscanf
 2043 027e 0346     		mov	r3, r0
 2044 0280 012B     		cmp	r3, #1
 2045 0282 0ED1     		bne	.L111
 560:modem.c       ****                 updatable_parameters.App_LED_freq = app_led_freq;
 2046              		.loc 1 560 0
 2047 0284 07F17403 		add	r3, r7, #116
 2048 0288 1B68     		ldr	r3, [r3]
 2049 028a DAB2     		uxtb	r2, r3
 2050 028c 384B     		ldr	r3, .L119+40
 2051 028e 5A71     		strb	r2, [r3, #5]
 561:modem.c       ****                 printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_freq);
 2052              		.loc 1 561 0
 2053 0290 07F17403 		add	r3, r7, #116
 2054 0294 1B68     		ldr	r3, [r3]
 2055 0296 1A46     		mov	r2, r3
 2056 0298 4349     		ldr	r1, .L119+96
 2057 029a 0020     		movs	r0, #0
 2058 029c FFF7FEFF 		bl	printNotif
 559:modem.c       ****             if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2059              		.loc 1 559 0
 2060 02a0 08E0     		b	.L113
 2061              	.L111:
 562:modem.c       ****             } 
 563:modem.c       ****             else{
 564:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2062              		.loc 1 564 0
 2063 02a2 4249     		ldr	r1, .L119+100
 2064 02a4 0220     		movs	r0, #2
 2065 02a6 FFF7FEFF 		bl	printNotif
 559:modem.c       ****                 updatable_parameters.App_LED_freq = app_led_freq;
 2066              		.loc 1 559 0
 2067 02aa 03E0     		b	.L113
 2068              	.L110:
 565:modem.c       ****             }
 566:modem.c       ****         }
 567:modem.c       ****         else{
 568:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 2069              		.loc 1 568 0
 2070 02ac 4049     		ldr	r1, .L119+104
 2071 02ae 0220     		movs	r0, #2
 2072 02b0 FFF7FEFF 		bl	printNotif
 2073              	.L113:
 569:modem.c       ****         }
 570:modem.c       **** 
 571:modem.c       ****         if (strstr(s_level_sensor,"Freq: ") && strstr(s_level_sensor,"\r")){
 2074              		.loc 1 571 0
 2075 02b4 07F18C03 		add	r3, r7, #140
 2076 02b8 3A49     		ldr	r1, .L119+92
 2077 02ba 1846     		mov	r0, r3
 2078 02bc FFF7FEFF 		bl	strstr
 2079 02c0 0346     		mov	r3, r0
 2080 02c2 002B     		cmp	r3, #0
 2081 02c4 3BD0     		beq	.L114
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 51


 2082              		.loc 1 571 0 is_stmt 0 discriminator 1
 2083 02c6 07F18C03 		add	r3, r7, #140
 2084 02ca 0D21     		movs	r1, #13
 2085 02cc 1846     		mov	r0, r3
 2086 02ce FFF7FEFF 		bl	strchr
 2087 02d2 0346     		mov	r3, r0
 2088 02d4 002B     		cmp	r3, #0
 2089 02d6 32D0     		beq	.L114
 572:modem.c       ****             temp[0] = '\0';
 2090              		.loc 1 572 0 is_stmt 1
 2091 02d8 07F10C03 		add	r3, r7, #12
 2092 02dc 0022     		movs	r2, #0
 2093 02de 1A70     		strb	r2, [r3]
 573:modem.c       ****             strcpy(temp,s_app_led);
 2094              		.loc 1 573 0
 2095 02e0 07F1F002 		add	r2, r7, #240
 2096 02e4 07F10C03 		add	r3, r7, #12
 2097 02e8 1146     		mov	r1, r2
 2098 02ea 1846     		mov	r0, r3
 2099 02ec FFF7FEFF 		bl	strcpy
 574:modem.c       ****             extract_string(temp,"Freq: ","\r",s_level_sensor); // grab level app frequency
 2100              		.loc 1 574 0
 2101 02f0 07F18C03 		add	r3, r7, #140
 2102 02f4 07F10C00 		add	r0, r7, #12
 2103 02f8 134A     		ldr	r2, .L119
 2104 02fa 2A49     		ldr	r1, .L119+92
 2105 02fc FFF7FEFF 		bl	extract_string
 575:modem.c       ****             if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2106              		.loc 1 575 0
 2107 0300 07F17002 		add	r2, r7, #112
 2108 0304 07F18C03 		add	r3, r7, #140
 2109 0308 1849     		ldr	r1, .L119+36
 2110 030a 1846     		mov	r0, r3
 2111 030c FFF7FEFF 		bl	sscanf
 2112 0310 0346     		mov	r3, r0
 2113 0312 012B     		cmp	r3, #1
 2114 0314 0ED1     		bne	.L115
 576:modem.c       ****                 updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2115              		.loc 1 576 0
 2116 0316 07F17003 		add	r3, r7, #112
 2117 031a 1B68     		ldr	r3, [r3]
 2118 031c DAB2     		uxtb	r2, r3
 2119 031e 144B     		ldr	r3, .L119+40
 2120 0320 9A71     		strb	r2, [r3, #6]
 577:modem.c       ****                 printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_led_f
 2121              		.loc 1 577 0
 2122 0322 07F17403 		add	r3, r7, #116
 2123 0326 1B68     		ldr	r3, [r3]
 2124 0328 1A46     		mov	r2, r3
 2125 032a 2249     		ldr	r1, .L119+108
 2126 032c 0020     		movs	r0, #0
 2127 032e FFF7FEFF 		bl	printNotif
 575:modem.c       ****             if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2128              		.loc 1 575 0
 2129 0332 45E0     		b	.L109
 2130              	.L115:
 578:modem.c       ****             } 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 52


 579:modem.c       ****             else{
 580:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value.");
 2131              		.loc 1 580 0
 2132 0334 2049     		ldr	r1, .L119+112
 2133 0336 0220     		movs	r0, #2
 2134 0338 FFF7FEFF 		bl	printNotif
 575:modem.c       ****                 updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2135              		.loc 1 575 0
 2136 033c 40E0     		b	.L109
 2137              	.L114:
 581:modem.c       ****             }
 582:modem.c       ****         }
 583:modem.c       ****         else{
 584:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2138              		.loc 1 584 0
 2139 033e 1F49     		ldr	r1, .L119+116
 2140 0340 0220     		movs	r0, #2
 2141 0342 FFF7FEFF 		bl	printNotif
 2142              	.LBE9:
 585:modem.c       ****         }
 586:modem.c       ****     }
 587:modem.c       ****         
 588:modem.c       **** 
 589:modem.c       ****         
 590:modem.c       **** }
 2143              		.loc 1 590 0
 2144 0346 3BE0     		b	.L118
 2145              	.L120:
 2146              		.align	2
 2147              	.L119:
 2148 0348 88020000 		.word	.LC21
 2149 034c 24030000 		.word	.LC32
 2150 0350 00000000 		.word	uart_received_string
 2151 0354 30030000 		.word	.LC33
 2152 0358 3C030000 		.word	.LC34
 2153 035c 4C030000 		.word	.LC35
 2154 0360 5C030000 		.word	.LC36
 2155 0364 6C030000 		.word	.LC37
 2156 0368 78030000 		.word	.LC38
 2157 036c 88030000 		.word	.LC39
 2158 0370 00000000 		.word	updatable_parameters
 2159 0374 8C030000 		.word	.LC40
 2160 0378 A8030000 		.word	.LC41
 2161 037c C4030000 		.word	.LC42
 2162 0380 E0030000 		.word	.LC43
 2163 0384 00000000 		.word	alarmMeasure
 2164 0388 FC030000 		.word	.LC44
 2165 038c 20040000 		.word	.LC45
 2166 0390 00000000 		.word	alarmSync
 2167 0394 50040000 		.word	.LC46
 2168 0398 78040000 		.word	.LC47
 2169 039c A8040000 		.word	.LC48
 2170 03a0 D4040000 		.word	.LC49
 2171 03a4 04050000 		.word	.LC50
 2172 03a8 0C050000 		.word	.LC51
 2173 03ac 30050000 		.word	.LC52
 2174 03b0 60050000 		.word	.LC53
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 53


 2175 03b4 88050000 		.word	.LC54
 2176 03b8 B0050000 		.word	.LC55
 2177 03bc E4050000 		.word	.LC56
 2178              	.L109:
 2179              	.L118:
 2180 03c0 00BF     		nop
 2181 03c2 07F5CA77 		add	r7, r7, #404
 2182              		.cfi_def_cfa_offset 12
 2183 03c6 BD46     		mov	sp, r7
 2184              		.cfi_def_cfa_register 13
 2185              		@ sp needed
 2186 03c8 90BD     		pop	{r4, r7, pc}
 2187              		.cfi_endproc
 2188              	.LFE81:
 2189              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2190 03ca 00BF     		.section	.rodata
 2191 060f 00       		.align	2
 2192              	.LC57:
 2193 0610 41542343 		.ascii	"AT#CGMM\015\000"
 2193      474D4D0D 
 2193      00
 2194 0619 000000   		.align	2
 2195              	.LC58:
 2196 061c 4D6F6465 		.ascii	"Modem Model: %s\000"
 2196      6D204D6F 
 2196      64656C3A 
 2196      20257300 
 2197              		.align	2
 2198              	.LC59:
 2199 062c 41542343 		.ascii	"AT#CCID\015\000"
 2199      4349440D 
 2199      00
 2200 0635 000000   		.align	2
 2201              	.LC60:
 2202 0638 53494D20 		.ascii	"SIM ID: %s\000"
 2202      49443A20 
 2202      257300
 2203 0643 00       		.align	2
 2204              	.LC61:
 2205 0644 41542B43 		.ascii	"AT+CGSN\015\000"
 2205      47534E0D 
 2205      00
 2206 064d 000000   		.align	2
 2207              	.LC62:
 2208 0650 494D4549 		.ascii	"IMEI: %s\000"
 2208      3A202573 
 2208      00
 2209 0659 000000   		.align	2
 2210              	.LC63:
 2211 065c 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2211      4744434F 
 2211      4E543D31 
 2211      2C224950 
 2211      222C2277 
 2212 0685 00       		.ascii	"\000"
 2213 0686 0000     		.align	2
 2214              	.LC64:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 54


 2215 0688 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2215      4744434F 
 2215      4E543D31 
 2215      2C224950 
 2215      222C2273 
 2216              		.align	2
 2217              	.LC65:
 2218 06a4 41542B43 		.ascii	"AT+CFUN?\015\000"
 2218      46554E3F 
 2218      0D00
 2219 06ae 0000     		.align	2
 2220              	.LC66:
 2221 06b0 4346554E 		.ascii	"CFUN: %s\000"
 2221      3A202573 
 2221      00
 2222 06b9 000000   		.align	2
 2223              	.LC67:
 2224 06bc 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2224      46554E3D 
 2224      310D00
 2225              		.section	.text.modem_configure_settings,"ax",%progbits
 2226              		.align	2
 2227              		.global	modem_configure_settings
 2228              		.thumb
 2229              		.thumb_func
 2230              		.type	modem_configure_settings, %function
 2231              	modem_configure_settings:
 2232              	.LFB82:
 591:modem.c       ****     
 592:modem.c       **** // Configure the modem settings
 593:modem.c       **** void modem_configure_settings(){
 2233              		.loc 1 593 0
 2234              		.cfi_startproc
 2235              		@ args = 0, pretend = 0, frame = 16
 2236              		@ frame_needed = 1, uses_anonymous_args = 0
 2237 0000 80B5     		push	{r7, lr}
 2238              		.cfi_def_cfa_offset 8
 2239              		.cfi_offset 7, -8
 2240              		.cfi_offset 14, -4
 2241 0002 84B0     		sub	sp, sp, #16
 2242              		.cfi_def_cfa_offset 24
 2243 0004 00AF     		add	r7, sp, #0
 2244              		.cfi_def_cfa_register 7
 594:modem.c       ****     
 595:modem.c       ****     // Save/print modem model ID number
 596:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2245              		.loc 1 596 0
 2246 0006 454B     		ldr	r3, .L130
 2247 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2248 000a 002B     		cmp	r3, #0
 2249 000c 13D1     		bne	.L122
 597:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 598:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2250              		.loc 1 598 0
 2251 000e 4FF4FA62 		mov	r2, #2000
 2252 0012 4349     		ldr	r1, .L130+4
 2253 0014 4348     		ldr	r0, .L130+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 55


 2254 0016 FFF7FEFF 		bl	at_write_command
 2255 001a 0346     		mov	r3, r0
 2256 001c 002B     		cmp	r3, #0
 2257 001e 0AD0     		beq	.L122
 599:modem.c       ****             // Extract modem model ID number string from the UART
 600:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2258              		.loc 1 600 0
 2259 0020 414B     		ldr	r3, .L130+12
 2260 0022 424A     		ldr	r2, .L130+16
 2261 0024 4249     		ldr	r1, .L130+20
 2262 0026 4348     		ldr	r0, .L130+24
 2263 0028 FFF7FEFF 		bl	extract_string
 601:modem.c       ****             // Print modem model ID number
 602:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2264              		.loc 1 602 0
 2265 002c 3E4A     		ldr	r2, .L130+12
 2266 002e 4249     		ldr	r1, .L130+28
 2267 0030 0020     		movs	r0, #0
 2268 0032 FFF7FEFF 		bl	printNotif
 2269              	.L122:
 603:modem.c       ****         }
 604:modem.c       ****     }
 605:modem.c       ****     
 606:modem.c       ****    // Save/print SIM-card ID
 607:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2270              		.loc 1 607 0
 2271 0036 394B     		ldr	r3, .L130
 2272 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2273 003a 002B     		cmp	r3, #0
 2274 003c 13D1     		bne	.L123
 608:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 609:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2275              		.loc 1 609 0
 2276 003e 4FF4FA62 		mov	r2, #2000
 2277 0042 3749     		ldr	r1, .L130+4
 2278 0044 3D48     		ldr	r0, .L130+32
 2279 0046 FFF7FEFF 		bl	at_write_command
 2280 004a 0346     		mov	r3, r0
 2281 004c 002B     		cmp	r3, #0
 2282 004e 0AD0     		beq	.L123
 610:modem.c       ****             // Extract SIM-card ID string from the UART
 611:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2283              		.loc 1 611 0
 2284 0050 324B     		ldr	r3, .L130
 2285 0052 364A     		ldr	r2, .L130+16
 2286 0054 3649     		ldr	r1, .L130+20
 2287 0056 3748     		ldr	r0, .L130+24
 2288 0058 FFF7FEFF 		bl	extract_string
 612:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2289              		.loc 1 612 0
 2290 005c 2F4A     		ldr	r2, .L130
 2291 005e 3849     		ldr	r1, .L130+36
 2292 0060 0020     		movs	r0, #0
 2293 0062 FFF7FEFF 		bl	printNotif
 2294              	.L123:
 613:modem.c       ****         }
 614:modem.c       ****    }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 56


 615:modem.c       **** 
 616:modem.c       ****     // Save/print modem IMEI
 617:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2295              		.loc 1 617 0
 2296 0066 2D4B     		ldr	r3, .L130
 2297 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2298 006c 002B     		cmp	r3, #0
 2299 006e 13D1     		bne	.L124
 618:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 619:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2300              		.loc 1 619 0
 2301 0070 4FF4FA62 		mov	r2, #2000
 2302 0074 2A49     		ldr	r1, .L130+4
 2303 0076 3348     		ldr	r0, .L130+40
 2304 0078 FFF7FEFF 		bl	at_write_command
 2305 007c 0346     		mov	r3, r0
 2306 007e 002B     		cmp	r3, #0
 2307 0080 0AD0     		beq	.L124
 620:modem.c       ****             // Extract modem IMEI number string from the UART
 621:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2308              		.loc 1 621 0
 2309 0082 314B     		ldr	r3, .L130+44
 2310 0084 294A     		ldr	r2, .L130+16
 2311 0086 2A49     		ldr	r1, .L130+20
 2312 0088 2A48     		ldr	r0, .L130+24
 2313 008a FFF7FEFF 		bl	extract_string
 622:modem.c       ****             // Print modem IMEI number
 623:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2314              		.loc 1 623 0
 2315 008e 2E4A     		ldr	r2, .L130+44
 2316 0090 2E49     		ldr	r1, .L130+48
 2317 0092 0020     		movs	r0, #0
 2318 0094 FFF7FEFF 		bl	printNotif
 2319              	.L124:
 624:modem.c       ****         } 
 625:modem.c       ****     }
 626:modem.c       ****     
 627:modem.c       ****     // Configure protocol and cellular end point
 628:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 629:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2320              		.loc 1 629 0
 2321 0098 2D4B     		ldr	r3, .L130+52
 2322 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2323 009c 83F00103 		eor	r3, r3, #1
 2324 00a0 DBB2     		uxtb	r3, r3
 2325 00a2 002B     		cmp	r3, #0
 2326 00a4 06D0     		beq	.L125
 630:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2327              		.loc 1 630 0
 2328 00a6 4FF4FA62 		mov	r2, #2000
 2329 00aa 1D49     		ldr	r1, .L130+4
 2330 00ac 2948     		ldr	r0, .L130+56
 2331 00ae FFF7FEFF 		bl	at_write_command
 2332 00b2 09E0     		b	.L126
 2333              	.L125:
 631:modem.c       ****     
 632:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 57


 2334              		.loc 1 632 0
 2335 00b4 264B     		ldr	r3, .L130+52
 2336 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2337 00b8 002B     		cmp	r3, #0
 2338 00ba 05D0     		beq	.L126
 633:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2339              		.loc 1 633 0
 2340 00bc 4FF4FA62 		mov	r2, #2000
 2341 00c0 1749     		ldr	r1, .L130+4
 2342 00c2 2548     		ldr	r0, .L130+60
 2343 00c4 FFF7FEFF 		bl	at_write_command
 2344              	.L126:
 634:modem.c       ****     }
 635:modem.c       ****     
 636:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 637:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 638:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2345              		.loc 1 638 0
 2346 00c8 4FF4FA62 		mov	r2, #2000
 2347 00cc 1449     		ldr	r1, .L130+4
 2348 00ce 2348     		ldr	r0, .L130+64
 2349 00d0 FFF7FEFF 		bl	at_write_command
 2350 00d4 0346     		mov	r3, r0
 2351 00d6 002B     		cmp	r3, #0
 2352 00d8 1BD0     		beq	.L129
 2353              	.LBB10:
 639:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 640:modem.c       ****         CFUN[0] = '\0';
 2354              		.loc 1 640 0
 2355 00da 0023     		movs	r3, #0
 2356 00dc 3B71     		strb	r3, [r7, #4]
 641:modem.c       ****         // Extract UART string recieved from the modem
 642:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2357              		.loc 1 642 0
 2358 00de 3B1D     		adds	r3, r7, #4
 2359 00e0 124A     		ldr	r2, .L130+16
 2360 00e2 1349     		ldr	r1, .L130+20
 2361 00e4 1348     		ldr	r0, .L130+24
 2362 00e6 FFF7FEFF 		bl	extract_string
 643:modem.c       ****         // Print UART string recieved from the modem
 644:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2363              		.loc 1 644 0
 2364 00ea 3B1D     		adds	r3, r7, #4
 2365 00ec 1A46     		mov	r2, r3
 2366 00ee 1C49     		ldr	r1, .L130+68
 2367 00f0 0020     		movs	r0, #0
 2368 00f2 FFF7FEFF 		bl	printNotif
 645:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 646:modem.c       ****         // If it returns NULL, then write another command to the modem
 647:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2369              		.loc 1 647 0
 2370 00f6 3B1D     		adds	r3, r7, #4
 2371 00f8 3121     		movs	r1, #49
 2372 00fa 1846     		mov	r0, r3
 2373 00fc FFF7FEFF 		bl	strchr
 2374 0100 0346     		mov	r3, r0
 2375 0102 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 58


 2376 0104 05D1     		bne	.L129
 648:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 649:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 650:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2377              		.loc 1 650 0
 2378 0106 4FF4FA62 		mov	r2, #2000
 2379 010a 0549     		ldr	r1, .L130+4
 2380 010c 1548     		ldr	r0, .L130+72
 2381 010e FFF7FEFF 		bl	at_write_command
 2382              	.L129:
 2383              	.LBE10:
 651:modem.c       ****         }
 652:modem.c       ****     }
 653:modem.c       **** 
 654:modem.c       ****     
 655:modem.c       **** }
 2384              		.loc 1 655 0
 2385 0112 00BF     		nop
 2386 0114 1037     		adds	r7, r7, #16
 2387              		.cfi_def_cfa_offset 8
 2388 0116 BD46     		mov	sp, r7
 2389              		.cfi_def_cfa_register 13
 2390              		@ sp needed
 2391 0118 80BD     		pop	{r7, pc}
 2392              	.L131:
 2393 011a 00BF     		.align	2
 2394              	.L130:
 2395 011c 00000000 		.word	modem_info
 2396 0120 00000000 		.word	.LC0
 2397 0124 10060000 		.word	.LC57
 2398 0128 14000000 		.word	modem_info+20
 2399 012c 88020000 		.word	.LC21
 2400 0130 8C020000 		.word	.LC22
 2401 0134 00000000 		.word	uart_received_string
 2402 0138 1C060000 		.word	.LC58
 2403 013c 2C060000 		.word	.LC59
 2404 0140 38060000 		.word	.LC60
 2405 0144 44060000 		.word	.LC61
 2406 0148 28000000 		.word	modem_info+40
 2407 014c 50060000 		.word	.LC62
 2408 0150 00000000 		.word	updatable_parameters
 2409 0154 5C060000 		.word	.LC63
 2410 0158 88060000 		.word	.LC64
 2411 015c A4060000 		.word	.LC65
 2412 0160 B0060000 		.word	.LC66
 2413 0164 BC060000 		.word	.LC67
 2414              		.cfi_endproc
 2415              	.LFE82:
 2416              		.size	modem_configure_settings, .-modem_configure_settings
 2417              		.section	.rodata
 2418 06c7 00       		.align	2
 2419              	.LC68:
 2420 06c8 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2420      6D206E6F 
 2420      74207265 
 2420      61647920 
 2420      746F2067 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 59


 2421 06fb 6B2E00   		.ascii	"k.\000"
 2422 06fe 0000     		.align	2
 2423              	.LC69:
 2424 0700 41542B43 		.ascii	"AT+CCLK?\015\000"
 2424      434C4B3F 
 2424      0D00
 2425 070a 0000     		.align	2
 2426              	.LC70:
 2427 070c 220D00   		.ascii	"\"\015\000"
 2428 070f 00       		.align	2
 2429              	.LC71:
 2430 0710 3A202200 		.ascii	": \"\000"
 2431              		.align	2
 2432              	.LC72:
 2433 0714 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2433      642F2564 
 2433      2C25643A 
 2433      25643A25 
 2433      642D2564 
 2434 0729 000000   		.align	2
 2435              	.LC73:
 2436 072c 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2436      642F2564 
 2436      2C25643A 
 2436      25643A25 
 2436      642B2564 
 2437 0741 000000   		.align	2
 2438              	.LC74:
 2439 0744 436F756C 		.ascii	"Could not parse modem time.\000"
 2439      64206E6F 
 2439      74207061 
 2439      72736520 
 2439      6D6F6465 
 2440              		.section	.text.modem_get_network_time,"ax",%progbits
 2441              		.align	2
 2442              		.global	modem_get_network_time
 2443              		.thumb
 2444              		.thumb_func
 2445              		.type	modem_get_network_time, %function
 2446              	modem_get_network_time:
 2447              	.LFB83:
 656:modem.c       **** 
 657:modem.c       **** //returns 0 if modem can't get time
 658:modem.c       **** long modem_get_network_time(){
 2448              		.loc 1 658 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 104
 2451              		@ frame_needed = 1, uses_anonymous_args = 0
 2452 0000 80B5     		push	{r7, lr}
 2453              		.cfi_def_cfa_offset 8
 2454              		.cfi_offset 7, -8
 2455              		.cfi_offset 14, -4
 2456 0002 A0B0     		sub	sp, sp, #128
 2457              		.cfi_def_cfa_offset 136
 2458 0004 06AF     		add	r7, sp, #24
 2459              		.cfi_def_cfa 7, 112
 659:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 60


 660:modem.c       ****     //modem reposen format (careful to include the quotes "")
 661:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 662:modem.c       ****     //ex: 14:48 GMT
 663:modem.c       **** 
 664:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 665:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2460              		.loc 1 665 0
 2461 0006 444B     		ldr	r3, .L139
 2462 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2463 000a 042B     		cmp	r3, #4
 2464 000c 05D0     		beq	.L133
 666:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2465              		.loc 1 666 0
 2466 000e 4349     		ldr	r1, .L139+4
 2467 0010 0220     		movs	r0, #2
 2468 0012 FFF7FEFF 		bl	printNotif
 667:modem.c       ****         return 0;   
 2469              		.loc 1 667 0
 2470 0016 0023     		movs	r3, #0
 2471 0018 7AE0     		b	.L134
 2472              	.L133:
 668:modem.c       ****     }
 669:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2473              		.loc 1 669 0
 2474 001a 0023     		movs	r3, #0
 2475 001c 7B66     		str	r3, [r7, #100]
 670:modem.c       ****     
 671:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 672:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2476              		.loc 1 672 0
 2477 001e 4FF4FA62 		mov	r2, #2000
 2478 0022 3F49     		ldr	r1, .L139+8
 2479 0024 3F48     		ldr	r0, .L139+12
 2480 0026 FFF7FEFF 		bl	at_write_command
 2481 002a 0346     		mov	r3, r0
 2482 002c 002B     		cmp	r3, #0
 2483 002e 6ED0     		beq	.L135
 2484              	.LBB11:
 673:modem.c       ****         // need to set this to /0
 674:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 675:modem.c       ****         network_time[0] = '\0';
 2485              		.loc 1 675 0
 2486 0030 0023     		movs	r3, #0
 2487 0032 87F84430 		strb	r3, [r7, #68]
 676:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 677:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2488              		.loc 1 677 0
 2489 0036 07F14403 		add	r3, r7, #68
 2490 003a 3B4A     		ldr	r2, .L139+16
 2491 003c 3B49     		ldr	r1, .L139+20
 2492 003e 3C48     		ldr	r0, .L139+24
 2493 0040 FFF7FEFF 		bl	extract_string
 678:modem.c       ****         
 679:modem.c       ****         ///////////////////  
 680:modem.c       ****         struct tm t; // Creates variable t of struct tm
 681:modem.c       ****         
 682:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 61


 683:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2494              		.loc 1 683 0
 2495 0044 0023     		movs	r3, #0
 2496 0046 BB62     		str	r3, [r7, #40]
 684:modem.c       ****       
 685:modem.c       ****         // Determines the GMT offset 
 686:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 687:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 688:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2497              		.loc 1 688 0
 2498 0048 07F13C01 		add	r1, r7, #60
 2499 004c 07F14002 		add	r2, r7, #64
 2500 0050 07F14400 		add	r0, r7, #68
 2501 0054 07F12803 		add	r3, r7, #40
 2502 0058 0493     		str	r3, [sp, #16]
 2503 005a 07F12C03 		add	r3, r7, #44
 2504 005e 0393     		str	r3, [sp, #12]
 2505 0060 07F13003 		add	r3, r7, #48
 2506 0064 0293     		str	r3, [sp, #8]
 2507 0066 07F13403 		add	r3, r7, #52
 2508 006a 0193     		str	r3, [sp, #4]
 2509 006c 07F13803 		add	r3, r7, #56
 2510 0070 0093     		str	r3, [sp]
 2511 0072 0B46     		mov	r3, r1
 2512 0074 2F49     		ldr	r1, .L139+28
 2513 0076 FFF7FEFF 		bl	sscanf
 2514 007a 0346     		mov	r3, r0
 2515 007c 072B     		cmp	r3, #7
 2516 007e 06D1     		bne	.L136
 689:modem.c       ****             gmt_offset = gmt_offset*(900);
 2517              		.loc 1 689 0
 2518 0080 BB6A     		ldr	r3, [r7, #40]
 2519 0082 4FF46172 		mov	r2, #900
 2520 0086 02FB03F3 		mul	r3, r2, r3
 2521 008a BB62     		str	r3, [r7, #40]
 2522 008c 27E0     		b	.L137
 2523              	.L136:
 690:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2524              		.loc 1 690 0
 2525 008e 07F13C01 		add	r1, r7, #60
 2526 0092 07F14002 		add	r2, r7, #64
 2527 0096 07F14400 		add	r0, r7, #68
 2528 009a 07F12803 		add	r3, r7, #40
 2529 009e 0493     		str	r3, [sp, #16]
 2530 00a0 07F12C03 		add	r3, r7, #44
 2531 00a4 0393     		str	r3, [sp, #12]
 2532 00a6 07F13003 		add	r3, r7, #48
 2533 00aa 0293     		str	r3, [sp, #8]
 2534 00ac 07F13403 		add	r3, r7, #52
 2535 00b0 0193     		str	r3, [sp, #4]
 2536 00b2 07F13803 		add	r3, r7, #56
 2537 00b6 0093     		str	r3, [sp]
 2538 00b8 0B46     		mov	r3, r1
 2539 00ba 1F49     		ldr	r1, .L139+32
 2540 00bc FFF7FEFF 		bl	sscanf
 2541 00c0 0346     		mov	r3, r0
 2542 00c2 072B     		cmp	r3, #7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 62


 2543 00c4 05D1     		bne	.L138
 691:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2544              		.loc 1 691 0
 2545 00c6 BB6A     		ldr	r3, [r7, #40]
 2546 00c8 1C4A     		ldr	r2, .L139+36
 2547 00ca 02FB03F3 		mul	r3, r2, r3
 2548 00ce BB62     		str	r3, [r7, #40]
 2549 00d0 05E0     		b	.L137
 2550              	.L138:
 692:modem.c       ****         }else{
 693:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2551              		.loc 1 693 0
 2552 00d2 1B49     		ldr	r1, .L139+40
 2553 00d4 0220     		movs	r0, #2
 2554 00d6 FFF7FEFF 		bl	printNotif
 694:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2555              		.loc 1 694 0
 2556 00da 0023     		movs	r3, #0
 2557 00dc 18E0     		b	.L134
 2558              	.L137:
 695:modem.c       ****         }
 696:modem.c       ****         
 697:modem.c       ****         // Sets each variable to the correct time 
 698:modem.c       ****         t.tm_sec = second;
 2559              		.loc 1 698 0
 2560 00de FB6A     		ldr	r3, [r7, #44]
 2561 00e0 7B60     		str	r3, [r7, #4]
 699:modem.c       ****         t.tm_min = minute;
 2562              		.loc 1 699 0
 2563 00e2 3B6B     		ldr	r3, [r7, #48]
 2564 00e4 BB60     		str	r3, [r7, #8]
 700:modem.c       ****         t.tm_hour = hour;
 2565              		.loc 1 700 0
 2566 00e6 7B6B     		ldr	r3, [r7, #52]
 2567 00e8 FB60     		str	r3, [r7, #12]
 701:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2568              		.loc 1 701 0
 2569 00ea 3B6C     		ldr	r3, [r7, #64]
 2570 00ec 6433     		adds	r3, r3, #100
 2571 00ee BB61     		str	r3, [r7, #24]
 702:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2572              		.loc 1 702 0
 2573 00f0 FB6B     		ldr	r3, [r7, #60]
 2574 00f2 013B     		subs	r3, r3, #1
 2575 00f4 7B61     		str	r3, [r7, #20]
 703:modem.c       ****         t.tm_mday = day;           // Day of the month
 2576              		.loc 1 703 0
 2577 00f6 BB6B     		ldr	r3, [r7, #56]
 2578 00f8 3B61     		str	r3, [r7, #16]
 704:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2579              		.loc 1 704 0
 2580 00fa 0023     		movs	r3, #0
 2581 00fc 7B62     		str	r3, [r7, #36]
 705:modem.c       ****     
 706:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 707:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 708:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 63


 2582              		.loc 1 708 0
 2583 00fe 3B1D     		adds	r3, r7, #4
 2584 0100 1846     		mov	r0, r3
 2585 0102 FFF7FEFF 		bl	mktime
 2586 0106 0246     		mov	r2, r0
 2587 0108 BB6A     		ldr	r3, [r7, #40]
 2588 010a 1344     		add	r3, r3, r2
 2589 010c 7B66     		str	r3, [r7, #100]
 2590              	.L135:
 2591              	.LBE11:
 709:modem.c       ****     }
 710:modem.c       ****     
 711:modem.c       ****     return epoch_time;
 2592              		.loc 1 711 0
 2593 010e 7B6E     		ldr	r3, [r7, #100]
 2594              	.L134:
 712:modem.c       **** }
 2595              		.loc 1 712 0
 2596 0110 1846     		mov	r0, r3
 2597 0112 6837     		adds	r7, r7, #104
 2598              		.cfi_def_cfa_offset 8
 2599 0114 BD46     		mov	sp, r7
 2600              		.cfi_def_cfa_register 13
 2601              		@ sp needed
 2602 0116 80BD     		pop	{r7, pc}
 2603              	.L140:
 2604              		.align	2
 2605              	.L139:
 2606 0118 00000000 		.word	modem_state
 2607 011c C8060000 		.word	.LC68
 2608 0120 00000000 		.word	.LC0
 2609 0124 00070000 		.word	.LC69
 2610 0128 0C070000 		.word	.LC70
 2611 012c 10070000 		.word	.LC71
 2612 0130 00000000 		.word	uart_received_string
 2613 0134 14070000 		.word	.LC72
 2614 0138 2C070000 		.word	.LC73
 2615 013c 7CFCFFFF 		.word	-900
 2616 0140 44070000 		.word	.LC74
 2617              		.cfi_endproc
 2618              	.LFE83:
 2619              		.size	modem_get_network_time, .-modem_get_network_time
 2620              		.section	.text.modem_get_state,"ax",%progbits
 2621              		.align	2
 2622              		.global	modem_get_state
 2623              		.thumb
 2624              		.thumb_func
 2625              		.type	modem_get_state, %function
 2626              	modem_get_state:
 2627              	.LFB84:
 713:modem.c       **** 
 714:modem.c       **** // Get the modem state
 715:modem.c       **** uint8 modem_get_state(){
 2628              		.loc 1 715 0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 0
 2631              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 64


 2632              		@ link register save eliminated.
 2633 0000 80B4     		push	{r7}
 2634              		.cfi_def_cfa_offset 4
 2635              		.cfi_offset 7, -4
 2636 0002 00AF     		add	r7, sp, #0
 2637              		.cfi_def_cfa_register 7
 716:modem.c       ****     return modem_state;
 2638              		.loc 1 716 0
 2639 0004 024B     		ldr	r3, .L143
 2640 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 717:modem.c       **** }
 2641              		.loc 1 717 0
 2642 0008 1846     		mov	r0, r3
 2643 000a BD46     		mov	sp, r7
 2644              		.cfi_def_cfa_register 13
 2645              		@ sp needed
 2646 000c 80BC     		pop	{r7}
 2647              		.cfi_restore 7
 2648              		.cfi_def_cfa_offset 0
 2649 000e 7047     		bx	lr
 2650              	.L144:
 2651              		.align	2
 2652              	.L143:
 2653 0010 00000000 		.word	modem_state
 2654              		.cfi_endproc
 2655              	.LFE84:
 2656              		.size	modem_get_state, .-modem_get_state
 2657              		.section	.text.modem_sleep,"ax",%progbits
 2658              		.align	2
 2659              		.global	modem_sleep
 2660              		.thumb
 2661              		.thumb_func
 2662              		.type	modem_sleep, %function
 2663              	modem_sleep:
 2664              	.LFB85:
 718:modem.c       **** 
 719:modem.c       **** // Set modem to sleep
 720:modem.c       **** void modem_sleep(){
 2665              		.loc 1 720 0
 2666              		.cfi_startproc
 2667              		@ args = 0, pretend = 0, frame = 0
 2668              		@ frame_needed = 1, uses_anonymous_args = 0
 2669 0000 80B5     		push	{r7, lr}
 2670              		.cfi_def_cfa_offset 8
 2671              		.cfi_offset 7, -8
 2672              		.cfi_offset 14, -4
 2673 0002 00AF     		add	r7, sp, #0
 2674              		.cfi_def_cfa_register 7
 721:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 722:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2675              		.loc 1 722 0
 2676 0004 FFF7FEFF 		bl	modem_get_state
 2677 0008 0346     		mov	r3, r0
 2678 000a 002B     		cmp	r3, #0
 2679 000c 03D0     		beq	.L147
 723:modem.c       **** 
 724:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 65


 2680              		.loc 1 724 0
 2681 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 725:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2682              		.loc 1 725 0
 2683 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2684              	.L147:
 726:modem.c       ****         
 727:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 728:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 729:modem.c       ****      }
 730:modem.c       **** }
 2685              		.loc 1 730 0
 2686 0016 00BF     		nop
 2687 0018 80BD     		pop	{r7, pc}
 2688              		.cfi_endproc
 2689              	.LFE85:
 2690              		.size	modem_sleep, .-modem_sleep
 2691 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2692              		.align	2
 2693              		.global	modem_wakeup
 2694              		.thumb
 2695              		.thumb_func
 2696              		.type	modem_wakeup, %function
 2697              	modem_wakeup:
 2698              	.LFB86:
 731:modem.c       **** 
 732:modem.c       **** // Wakeup the modem
 733:modem.c       **** void modem_wakeup(){
 2699              		.loc 1 733 0
 2700              		.cfi_startproc
 2701              		@ args = 0, pretend = 0, frame = 0
 2702              		@ frame_needed = 1, uses_anonymous_args = 0
 2703 0000 80B5     		push	{r7, lr}
 2704              		.cfi_def_cfa_offset 8
 2705              		.cfi_offset 7, -8
 2706              		.cfi_offset 14, -4
 2707 0002 00AF     		add	r7, sp, #0
 2708              		.cfi_def_cfa_register 7
 734:modem.c       ****     // If modem state is not off then wake it up
 735:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2709              		.loc 1 735 0
 2710 0004 FFF7FEFF 		bl	modem_get_state
 2711 0008 0346     		mov	r3, r0
 2712 000a 002B     		cmp	r3, #0
 2713 000c 0BD0     		beq	.L150
 736:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2714              		.loc 1 736 0
 2715 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 737:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 738:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 739:modem.c       ****         UART_Telit_Wakeup();
 2716              		.loc 1 739 0
 2717 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 740:modem.c       ****         // Remove the need for this pin itterupt
 741:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 742:modem.c       ****         
 743:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 66


 744:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2718              		.loc 1 744 0
 2719 0016 FFF7FEFF 		bl	modem_get_state
 2720 001a 0346     		mov	r3, r0
 2721 001c 032B     		cmp	r3, #3
 2722 001e 02D1     		bne	.L150
 745:modem.c       ****             CyDelay(100u);
 2723              		.loc 1 745 0
 2724 0020 6420     		movs	r0, #100
 2725 0022 FFF7FEFF 		bl	CyDelay
 2726              	.L150:
 746:modem.c       ****         }
 747:modem.c       ****      }
 748:modem.c       **** }
 2727              		.loc 1 748 0
 2728 0026 00BF     		nop
 2729 0028 80BD     		pop	{r7, pc}
 2730              		.cfi_endproc
 2731              	.LFE86:
 2732              		.size	modem_wakeup, .-modem_wakeup
 2733 002a 00BF     		.section	.rodata
 2734              		.align	2
 2735              	.LC75:
 2736 0760 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2736      50494F3D 
 2736      352C312C 
 2736      312C300D 
 2736      00
 2737 0771 000000   		.align	2
 2738              	.LC76:
 2739 0774 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2739      55504C53 
 2739      45433D31 
 2739      0D00
 2740 0782 0000     		.align	2
 2741              	.LC77:
 2742 0784 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2742      55504C56 
 2742      3D320D00 
 2743              		.align	2
 2744              	.LC78:
 2745 0790 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2745      47505345 
 2745      4E3D310D 
 2745      00
 2746 079d 000000   		.align	2
 2747              	.LC79:
 2748 07a0 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2748      4C503D31 
 2748      2C227375 
 2748      706C2E67 
 2748      6F6F676C 
 2749 07c1 000000   		.align	2
 2750              	.LC80:
 2751 07c4 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2751      47414354 
 2751      3D312C30 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 67


 2751      0D0A00
 2752 07d3 00       		.align	2
 2753              	.LC81:
 2754 07d4 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2754      43534C4B 
 2754      3D312C31 
 2754      0D00
 2755 07e2 0000     		.align	2
 2756              	.LC82:
 2757 07e4 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2757      5053534C 
 2757      53523D31 
 2757      2C312C2C 
 2757      2C2C2C32 
 2758 07fa 0000     		.align	2
 2759              	.LC83:
 2760 07fc 4E00     		.ascii	"N\000"
 2761 07fe 0000     		.align	2
 2762              	.LC84:
 2763 0800 41542447 		.ascii	"AT$GPSACP\015\000"
 2763      50534143 
 2763      500D00
 2764 080b 00       		.align	2
 2765              	.LC85:
 2766 080c 24475053 		.ascii	"$GPSACP: \000"
 2766      4143503A 
 2766      2000
 2767 0816 0000     		.align	2
 2768              	.LC86:
 2769 0818 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2769      4143503A 
 2769      20252A66 
 2769      2C25664E 
 2769      2C256657 
 2770              		.global	__aeabi_fdiv
 2771              		.global	__aeabi_f2d
 2772              		.global	__aeabi_ddiv
 2773              		.global	__aeabi_dadd
 2774              		.global	__aeabi_d2f
 2775              		.align	2
 2776              	.LC87:
 2777 0838 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2777      50494F3D 
 2777      352C302C 
 2777      312C300D 
 2777      00
 2778 0849 000000   		.align	2
 2779              	.LC88:
 2780 084c 41542447 		.ascii	"AT$GPSR=0\015\000"
 2780      5053523D 
 2780      300D00
 2781 0857 00       		.align	2
 2782              	.LC89:
 2783 0858 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2783      20746F20 
 2783      6C6F636B 
 2783      20475053 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 68


 2783      3A202564 
 2784              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2785              		.align	2
 2786              		.global	modem_get_gps_coordinates
 2787              		.thumb
 2788              		.thumb_func
 2789              		.type	modem_get_gps_coordinates, %function
 2790              	modem_get_gps_coordinates:
 2791              	.LFB87:
 749:modem.c       **** 
 750:modem.c       ****     
 751:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 752:modem.c       **** gps_t modem_get_gps_coordinates(){
 2792              		.loc 1 752 0
 2793              		.cfi_startproc
 2794              		@ args = 0, pretend = 0, frame = 56
 2795              		@ frame_needed = 1, uses_anonymous_args = 0
 2796 0000 B0B5     		push	{r4, r5, r7, lr}
 2797              		.cfi_def_cfa_offset 16
 2798              		.cfi_offset 4, -16
 2799              		.cfi_offset 5, -12
 2800              		.cfi_offset 7, -8
 2801              		.cfi_offset 14, -4
 2802 0002 90B0     		sub	sp, sp, #64
 2803              		.cfi_def_cfa_offset 80
 2804 0004 02AF     		add	r7, sp, #8
 2805              		.cfi_def_cfa 7, 72
 2806 0006 7860     		str	r0, [r7, #4]
 753:modem.c       ****     gps_t gps;
 754:modem.c       ****     gps.altitude = 0;
 2807              		.loc 1 754 0
 2808 0008 4FF00003 		mov	r3, #0
 2809 000c FB61     		str	r3, [r7, #28]	@ float
 755:modem.c       ****     gps.longitude = 0;
 2810              		.loc 1 755 0
 2811 000e 4FF00003 		mov	r3, #0
 2812 0012 BB61     		str	r3, [r7, #24]	@ float
 756:modem.c       ****     gps.latitude = 0;
 2813              		.loc 1 756 0
 2814 0014 4FF00003 		mov	r3, #0
 2815 0018 7B61     		str	r3, [r7, #20]	@ float
 757:modem.c       ****     gps.time_to_lock =0;
 2816              		.loc 1 757 0
 2817 001a 0023     		movs	r3, #0
 2818 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 758:modem.c       ****     gps.valid = 0;
 2819              		.loc 1 758 0
 2820 001e 0023     		movs	r3, #0
 2821 0020 87F82230 		strb	r3, [r7, #34]
 759:modem.c       ****     
 760:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 761:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2822              		.loc 1 761 0
 2823 0024 7F4B     		ldr	r3, .L161
 2824 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2825 0028 042B     		cmp	r3, #4
 2826 002a 07D0     		beq	.L152
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 69


 762:modem.c       ****         return gps;//where valid = 0
 2827              		.loc 1 762 0
 2828 002c 7B68     		ldr	r3, [r7, #4]
 2829 002e 1C46     		mov	r4, r3
 2830 0030 07F11403 		add	r3, r7, #20
 2831 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2832 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2833 003a EFE0     		b	.L151
 2834              	.L152:
 763:modem.c       ****     }
 764:modem.c       ****     
 765:modem.c       ****     long lock_time = getTimeStamp();
 2835              		.loc 1 765 0
 2836 003c FFF7FEFF 		bl	getTimeStamp
 2837 0040 3863     		str	r0, [r7, #48]
 766:modem.c       ****     
 767:modem.c       ****     // Enable this for the LTER module
 768:modem.c       ****     // Enable GPS Low-Dropout Regulator
 769:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2838              		.loc 1 769 0
 2839 0042 4FF4FA62 		mov	r2, #2000
 2840 0046 7849     		ldr	r1, .L161+4
 2841 0048 7848     		ldr	r0, .L161+8
 2842 004a FFF7FEFF 		bl	at_write_command
 770:modem.c       ****     
 771:modem.c       ****     // Configure SUPL connection params
 772:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2843              		.loc 1 772 0
 2844 004e 4FF4FA62 		mov	r2, #2000
 2845 0052 7549     		ldr	r1, .L161+4
 2846 0054 7648     		ldr	r0, .L161+12
 2847 0056 FFF7FEFF 		bl	at_write_command
 773:modem.c       ****     
 774:modem.c       ****     // Use SUPL2.0
 775:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2848              		.loc 1 775 0
 2849 005a 4FF4FA62 		mov	r2, #2000
 2850 005e 7249     		ldr	r1, .L161+4
 2851 0060 7448     		ldr	r0, .L161+16
 2852 0062 FFF7FEFF 		bl	at_write_command
 776:modem.c       ****     
 777:modem.c       ****     // Enable AGPS service
 778:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2853              		.loc 1 778 0
 2854 0066 4FF4FA62 		mov	r2, #2000
 2855 006a 6F49     		ldr	r1, .L161+4
 2856 006c 7248     		ldr	r0, .L161+20
 2857 006e FFF7FEFF 		bl	at_write_command
 779:modem.c       ****     
 780:modem.c       ****     // Chose SUPL server, use google public service
 781:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2858              		.loc 1 781 0
 2859 0072 4FF4FA62 		mov	r2, #2000
 2860 0076 6C49     		ldr	r1, .L161+4
 2861 0078 7048     		ldr	r0, .L161+24
 2862 007a FFF7FEFF 		bl	at_write_command
 782:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 70


 783:modem.c       ****     //pdp context has to be locked to carrier for this to work
 784:modem.c       ****     
 785:modem.c       ****     // Unlock context since it needs to be used by modem
 786:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2863              		.loc 1 786 0
 2864 007e 4FF4FA62 		mov	r2, #2000
 2865 0082 6949     		ldr	r1, .L161+4
 2866 0084 6E48     		ldr	r0, .L161+28
 2867 0086 FFF7FEFF 		bl	at_write_command
 787:modem.c       ****     
 788:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2868              		.loc 1 788 0
 2869 008a 4FF4FA62 		mov	r2, #2000
 2870 008e 6649     		ldr	r1, .L161+4
 2871 0090 6C48     		ldr	r0, .L161+32
 2872 0092 FFF7FEFF 		bl	at_write_command
 789:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 790:modem.c       ****     
 791:modem.c       ****     // Relock the context
 792:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2873              		.loc 1 792 0
 2874 0096 42F21072 		movw	r2, #10000
 2875 009a 6349     		ldr	r1, .L161+4
 2876 009c 6A48     		ldr	r0, .L161+36
 2877 009e FFF7FEFF 		bl	at_write_command
 793:modem.c       ****     
 794:modem.c       ****     //start AGPS service
 795:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2878              		.loc 1 795 0
 2879 00a2 4FF4FA62 		mov	r2, #2000
 2880 00a6 6049     		ldr	r1, .L161+4
 2881 00a8 6848     		ldr	r0, .L161+40
 2882 00aa FFF7FEFF 		bl	at_write_command
 796:modem.c       ****     
 797:modem.c       ****     
 798:modem.c       ****     // Start the AGPS service
 799:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 800:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 801:modem.c       ****     
 802:modem.c       ****     
 803:modem.c       ****  
 804:modem.c       ****     uint8 gps_status = 0;
 2883              		.loc 1 804 0
 2884 00ae 0023     		movs	r3, #0
 2885 00b0 87F82F30 		strb	r3, [r7, #47]
 2886              	.LBB12:
 805:modem.c       ****     for(uint16 i=0;i<200;i++){
 2887              		.loc 1 805 0
 2888 00b4 0023     		movs	r3, #0
 2889 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2890 00b8 13E0     		b	.L154
 2891              	.L157:
 806:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2892              		.loc 1 806 0
 2893 00ba 4FF4FA62 		mov	r2, #2000
 2894 00be 6449     		ldr	r1, .L161+44
 2895 00c0 6448     		ldr	r0, .L161+48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 71


 2896 00c2 FFF7FEFF 		bl	at_write_command
 2897 00c6 0346     		mov	r3, r0
 2898 00c8 87F82F30 		strb	r3, [r7, #47]
 807:modem.c       ****         if(gps_status){
 2899              		.loc 1 807 0
 2900 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2901 00d0 002B     		cmp	r3, #0
 2902 00d2 0AD1     		bne	.L160
 808:modem.c       ****             break;   
 809:modem.c       ****         }
 810:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2903              		.loc 1 810 0 discriminator 2
 2904 00d4 4FF47A70 		mov	r0, #1000
 2905 00d8 FFF7FEFF 		bl	CyDelay
 805:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2906              		.loc 1 805 0 discriminator 2
 2907 00dc FB8E     		ldrh	r3, [r7, #54]
 2908 00de 0133     		adds	r3, r3, #1
 2909 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2910              	.L154:
 805:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2911              		.loc 1 805 0 is_stmt 0 discriminator 1
 2912 00e2 FB8E     		ldrh	r3, [r7, #54]
 2913 00e4 C72B     		cmp	r3, #199
 2914 00e6 E8D9     		bls	.L157
 2915 00e8 00E0     		b	.L156
 2916              	.L160:
 808:modem.c       ****             break;   
 2917              		.loc 1 808 0 is_stmt 1
 2918 00ea 00BF     		nop
 2919              	.L156:
 2920              	.LBE12:
 811:modem.c       ****     }
 812:modem.c       ****     
 813:modem.c       ****     //parse data here
 814:modem.c       ****     
 815:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 816:modem.c       ****     float lat;
 817:modem.c       ****     float lon;
 818:modem.c       ****     float alt;
 819:modem.c       ****     
 820:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 821:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 822:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2921              		.loc 1 822 0
 2922 00ec 5A49     		ldr	r1, .L161+52
 2923 00ee 5B48     		ldr	r0, .L161+56
 2924 00f0 FFF7FEFF 		bl	strstr
 2925 00f4 B862     		str	r0, [r7, #40]
 823:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 824:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 825:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2926              		.loc 1 825 0
 2927 00f6 07F10C01 		add	r1, r7, #12
 2928 00fa 07F11002 		add	r2, r7, #16
 2929 00fe 07F10803 		add	r3, r7, #8
 2930 0102 0093     		str	r3, [sp]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 72


 2931 0104 0B46     		mov	r3, r1
 2932 0106 5649     		ldr	r1, .L161+60
 2933 0108 B86A     		ldr	r0, [r7, #40]
 2934 010a FFF7FEFF 		bl	sscanf
 2935 010e 7862     		str	r0, [r7, #36]
 826:modem.c       ****     if(match >= 3){
 2936              		.loc 1 826 0
 2937 0110 7B6A     		ldr	r3, [r7, #36]
 2938 0112 022B     		cmp	r3, #2
 2939 0114 60DD     		ble	.L158
 827:modem.c       ****         // Calculate lat and lon
 828:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 829:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 830:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2940              		.loc 1 830 0
 2941 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2942 0118 5249     		ldr	r1, .L161+64
 2943 011a 1846     		mov	r0, r3
 2944 011c FFF7FEFF 		bl	__aeabi_fdiv
 2945 0120 0346     		mov	r3, r0
 2946 0122 1846     		mov	r0, r3
 2947 0124 FFF7FEFF 		bl	floorf
 2948 0128 0346     		mov	r3, r0
 2949 012a 1846     		mov	r0, r3
 2950 012c FFF7FEFF 		bl	__aeabi_f2d
 2951 0130 0446     		mov	r4, r0
 2952 0132 0D46     		mov	r5, r1
 2953 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2954 0136 1846     		mov	r0, r3
 2955 0138 FFF7FEFF 		bl	__aeabi_f2d
 2956 013c 4FF00002 		mov	r2, #0
 2957 0140 494B     		ldr	r3, .L161+68
 2958 0142 FFF7FEFF 		bl	fmod
 2959 0146 4FF00002 		mov	r2, #0
 2960 014a 484B     		ldr	r3, .L161+72
 2961 014c FFF7FEFF 		bl	__aeabi_ddiv
 2962 0150 0246     		mov	r2, r0
 2963 0152 0B46     		mov	r3, r1
 2964 0154 2046     		mov	r0, r4
 2965 0156 2946     		mov	r1, r5
 2966 0158 FFF7FEFF 		bl	__aeabi_dadd
 2967 015c 0346     		mov	r3, r0
 2968 015e 0C46     		mov	r4, r1
 2969 0160 1846     		mov	r0, r3
 2970 0162 2146     		mov	r1, r4
 2971 0164 FFF7FEFF 		bl	__aeabi_d2f
 2972 0168 0346     		mov	r3, r0
 2973 016a 3B61     		str	r3, [r7, #16]	@ float
 831:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2974              		.loc 1 831 0
 2975 016c FB68     		ldr	r3, [r7, #12]	@ float
 2976 016e 3D49     		ldr	r1, .L161+64
 2977 0170 1846     		mov	r0, r3
 2978 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2979 0176 0346     		mov	r3, r0
 2980 0178 1846     		mov	r0, r3
 2981 017a FFF7FEFF 		bl	floorf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 73


 2982 017e 0346     		mov	r3, r0
 2983 0180 1846     		mov	r0, r3
 2984 0182 FFF7FEFF 		bl	__aeabi_f2d
 2985 0186 0446     		mov	r4, r0
 2986 0188 0D46     		mov	r5, r1
 2987 018a FB68     		ldr	r3, [r7, #12]	@ float
 2988 018c 1846     		mov	r0, r3
 2989 018e FFF7FEFF 		bl	__aeabi_f2d
 2990 0192 4FF00002 		mov	r2, #0
 2991 0196 344B     		ldr	r3, .L161+68
 2992 0198 FFF7FEFF 		bl	fmod
 2993 019c 4FF00002 		mov	r2, #0
 2994 01a0 324B     		ldr	r3, .L161+72
 2995 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2996 01a6 0246     		mov	r2, r0
 2997 01a8 0B46     		mov	r3, r1
 2998 01aa 2046     		mov	r0, r4
 2999 01ac 2946     		mov	r1, r5
 3000 01ae FFF7FEFF 		bl	__aeabi_dadd
 3001 01b2 0346     		mov	r3, r0
 3002 01b4 0C46     		mov	r4, r1
 3003 01b6 1846     		mov	r0, r3
 3004 01b8 2146     		mov	r1, r4
 3005 01ba FFF7FEFF 		bl	__aeabi_d2f
 3006 01be 0346     		mov	r3, r0
 3007 01c0 83F00043 		eor	r3, r3, #-2147483648
 3008 01c4 FB60     		str	r3, [r7, #12]	@ float
 832:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3009              		.loc 1 832 0
 3010 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3011 01c8 FB61     		str	r3, [r7, #28]	@ float
 833:modem.c       ****         gps.latitude = lat;
 3012              		.loc 1 833 0
 3013 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3014 01cc 7B61     		str	r3, [r7, #20]	@ float
 834:modem.c       ****         gps.longitude = lon;
 3015              		.loc 1 834 0
 3016 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3017 01d0 BB61     		str	r3, [r7, #24]	@ float
 835:modem.c       ****         gps.valid = 1;
 3018              		.loc 1 835 0
 3019 01d2 0123     		movs	r3, #1
 3020 01d4 87F82230 		strb	r3, [r7, #34]
 3021              	.L158:
 836:modem.c       ****     }
 837:modem.c       ****     
 838:modem.c       ****     // Disable LDO, just in case
 839:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3022              		.loc 1 839 0
 3023 01d8 4FF4FA62 		mov	r2, #2000
 3024 01dc 1249     		ldr	r1, .L161+4
 3025 01de 2448     		ldr	r0, .L161+76
 3026 01e0 FFF7FEFF 		bl	at_write_command
 840:modem.c       ****     
 841:modem.c       ****     // Flush modem's GPS data, just in case
 842:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3027              		.loc 1 842 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 74


 3028 01e4 4FF4FA62 		mov	r2, #2000
 3029 01e8 0F49     		ldr	r1, .L161+4
 3030 01ea 2248     		ldr	r0, .L161+80
 3031 01ec FFF7FEFF 		bl	at_write_command
 843:modem.c       ****     
 844:modem.c       ****     
 845:modem.c       ****     
 846:modem.c       ****     
 847:modem.c       ****     
 848:modem.c       ****     /* Relevant to 3g modem, can ignore
 849:modem.c       ****     
 850:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 851:modem.c       ****     //AT$GPSQOS=50,50,100,0
 852:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 853:modem.c       ****     
 854:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 855:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 856:modem.c       ****     
 857:modem.c       ****     //unlock contedt, simnce its being used by modem
 858:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 859:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 860:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 861:modem.c       ****     
 862:modem.c       ****     //unlock contedt, simnce its being used by modem
 863:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 864:modem.c       ****     
 865:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 866:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 867:modem.c       ****     
 868:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 869:modem.c       ****    uint8 gps_status = 0;
 870:modem.c       ****     for(uint16 i=0;i<200;i++){
 871:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 872:modem.c       ****         if(gps_status){
 873:modem.c       ****             break;   
 874:modem.c       ****         }
 875:modem.c       ****   }
 876:modem.c       ****     
 877:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 878:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 879:modem.c       ****     if(gps_status){
 880:modem.c       ****         float lat,lon,alt = 0;
 881:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 882:modem.c       ****             gps.altitude = alt;
 883:modem.c       ****             gps.latitude = lat/60;
 884:modem.c       ****             gps.longitude = lon/60;
 885:modem.c       ****             gps.valid = 1;
 886:modem.c       ****         }
 887:modem.c       ****         
 888:modem.c       ****     }
 889:modem.c       ****     
 890:modem.c       ****     //turn off gps
 891:modem.c       ****     //AT$GPSP=0
 892:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 893:modem.c       ****     
 894:modem.c       ****     */
 895:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 75


 896:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 897:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3032              		.loc 1 897 0
 3033 01f0 FFF7FEFF 		bl	getTimeStamp
 3034 01f4 0246     		mov	r2, r0
 3035 01f6 3B6B     		ldr	r3, [r7, #48]
 3036 01f8 D31A     		subs	r3, r2, r3
 3037 01fa 3B63     		str	r3, [r7, #48]
 898:modem.c       ****     gps.time_to_lock = lock_time;
 3038              		.loc 1 898 0
 3039 01fc 3B6B     		ldr	r3, [r7, #48]
 3040 01fe 9BB2     		uxth	r3, r3
 3041 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 899:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3042              		.loc 1 899 0
 3043 0202 3B8C     		ldrh	r3, [r7, #32]
 3044 0204 1A46     		mov	r2, r3
 3045 0206 1C49     		ldr	r1, .L161+84
 3046 0208 0020     		movs	r0, #0
 3047 020a FFF7FEFF 		bl	printNotif
 900:modem.c       ****     
 901:modem.c       ****     return gps;
 3048              		.loc 1 901 0
 3049 020e 7B68     		ldr	r3, [r7, #4]
 3050 0210 1C46     		mov	r4, r3
 3051 0212 07F11403 		add	r3, r7, #20
 3052 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3053 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3054              	.L151:
 902:modem.c       ****     
 903:modem.c       **** }
 3055              		.loc 1 903 0
 3056 021c 7868     		ldr	r0, [r7, #4]
 3057 021e 3837     		adds	r7, r7, #56
 3058              		.cfi_def_cfa_offset 16
 3059 0220 BD46     		mov	sp, r7
 3060              		.cfi_def_cfa_register 13
 3061              		@ sp needed
 3062 0222 B0BD     		pop	{r4, r5, r7, pc}
 3063              	.L162:
 3064              		.align	2
 3065              	.L161:
 3066 0224 00000000 		.word	modem_state
 3067 0228 00000000 		.word	.LC0
 3068 022c 60070000 		.word	.LC75
 3069 0230 74070000 		.word	.LC76
 3070 0234 84070000 		.word	.LC77
 3071 0238 90070000 		.word	.LC78
 3072 023c A0070000 		.word	.LC79
 3073 0240 C4070000 		.word	.LC80
 3074 0244 D4070000 		.word	.LC81
 3075 0248 D8020000 		.word	.LC27
 3076 024c E4070000 		.word	.LC82
 3077 0250 FC070000 		.word	.LC83
 3078 0254 00080000 		.word	.LC84
 3079 0258 0C080000 		.word	.LC85
 3080 025c 00000000 		.word	uart_received_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 76


 3081 0260 18080000 		.word	.LC86
 3082 0264 0000C842 		.word	1120403456
 3083 0268 00005940 		.word	1079574528
 3084 026c 00004E40 		.word	1078853632
 3085 0270 38080000 		.word	.LC87
 3086 0274 4C080000 		.word	.LC88
 3087 0278 58080000 		.word	.LC89
 3088              		.cfi_endproc
 3089              	.LFE87:
 3090              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3091              		.text
 3092              	.Letext0:
 3093              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3094              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3095              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3096              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3097              		.file 6 "testing.h"
 3098              		.file 7 "data.h"
 3099              		.file 8 "modem.h"
 3100              		.file 9 "notoriOS.h"
 3101              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3102              		.file 11 "level_sensor.h"
 3103              		.file 12 "App_LED.h"
 3104              		.section	.debug_info,"",%progbits
 3105              	.Ldebug_info0:
 3106 0000 AA0C0000 		.4byte	0xcaa
 3107 0004 0400     		.2byte	0x4
 3108 0006 00000000 		.4byte	.Ldebug_abbrev0
 3109 000a 04       		.byte	0x4
 3110 000b 01       		.uleb128 0x1
 3111 000c 9C000000 		.4byte	.LASF172
 3112 0010 0C       		.byte	0xc
 3113 0011 57040000 		.4byte	.LASF173
 3114 0015 28000000 		.4byte	.LASF174
 3115 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3116 001d 00000000 		.4byte	0
 3117 0021 00000000 		.4byte	.Ldebug_line0
 3118 0025 02       		.uleb128 0x2
 3119 0026 01       		.byte	0x1
 3120 0027 06       		.byte	0x6
 3121 0028 B1010000 		.4byte	.LASF0
 3122 002c 03       		.uleb128 0x3
 3123 002d 70000000 		.4byte	.LASF4
 3124 0031 02       		.byte	0x2
 3125 0032 1D       		.byte	0x1d
 3126 0033 37000000 		.4byte	0x37
 3127 0037 02       		.uleb128 0x2
 3128 0038 01       		.byte	0x1
 3129 0039 08       		.byte	0x8
 3130 003a 31060000 		.4byte	.LASF1
 3131 003e 02       		.uleb128 0x2
 3132 003f 02       		.byte	0x2
 3133 0040 05       		.byte	0x5
 3134 0041 8F040000 		.4byte	.LASF2
 3135 0045 02       		.uleb128 0x2
 3136 0046 02       		.byte	0x2
 3137 0047 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 77


 3138 0048 DC020000 		.4byte	.LASF3
 3139 004c 03       		.uleb128 0x3
 3140 004d A4040000 		.4byte	.LASF5
 3141 0051 02       		.byte	0x2
 3142 0052 3F       		.byte	0x3f
 3143 0053 57000000 		.4byte	0x57
 3144 0057 02       		.uleb128 0x2
 3145 0058 04       		.byte	0x4
 3146 0059 05       		.byte	0x5
 3147 005a 38020000 		.4byte	.LASF6
 3148 005e 03       		.uleb128 0x3
 3149 005f FF020000 		.4byte	.LASF7
 3150 0063 02       		.byte	0x2
 3151 0064 41       		.byte	0x41
 3152 0065 69000000 		.4byte	0x69
 3153 0069 02       		.uleb128 0x2
 3154 006a 04       		.byte	0x4
 3155 006b 07       		.byte	0x7
 3156 006c BA030000 		.4byte	.LASF8
 3157 0070 02       		.uleb128 0x2
 3158 0071 08       		.byte	0x8
 3159 0072 05       		.byte	0x5
 3160 0073 A3010000 		.4byte	.LASF9
 3161 0077 02       		.uleb128 0x2
 3162 0078 08       		.byte	0x8
 3163 0079 07       		.byte	0x7
 3164 007a 37010000 		.4byte	.LASF10
 3165 007e 04       		.uleb128 0x4
 3166 007f 04       		.byte	0x4
 3167 0080 05       		.byte	0x5
 3168 0081 696E7400 		.ascii	"int\000"
 3169 0085 02       		.uleb128 0x2
 3170 0086 04       		.byte	0x4
 3171 0087 07       		.byte	0x7
 3172 0088 4D070000 		.4byte	.LASF11
 3173 008c 03       		.uleb128 0x3
 3174 008d 9B080000 		.4byte	.LASF12
 3175 0091 03       		.byte	0x3
 3176 0092 18       		.byte	0x18
 3177 0093 2C000000 		.4byte	0x2c
 3178 0097 03       		.uleb128 0x3
 3179 0098 29060000 		.4byte	.LASF13
 3180 009c 03       		.byte	0x3
 3181 009d 2C       		.byte	0x2c
 3182 009e 4C000000 		.4byte	0x4c
 3183 00a2 03       		.uleb128 0x3
 3184 00a3 1E080000 		.4byte	.LASF14
 3185 00a7 03       		.byte	0x3
 3186 00a8 30       		.byte	0x30
 3187 00a9 5E000000 		.4byte	0x5e
 3188 00ad 05       		.uleb128 0x5
 3189 00ae 76020000 		.4byte	.LASF15
 3190 00b2 04       		.byte	0x4
 3191 00b3 9201     		.2byte	0x192
 3192 00b5 37000000 		.4byte	0x37
 3193 00b9 05       		.uleb128 0x5
 3194 00ba 0B000000 		.4byte	.LASF16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 78


 3195 00be 04       		.byte	0x4
 3196 00bf 9301     		.2byte	0x193
 3197 00c1 45000000 		.4byte	0x45
 3198 00c5 05       		.uleb128 0x5
 3199 00c6 EF020000 		.4byte	.LASF17
 3200 00ca 04       		.byte	0x4
 3201 00cb 9401     		.2byte	0x194
 3202 00cd 69000000 		.4byte	0x69
 3203 00d1 05       		.uleb128 0x5
 3204 00d2 A3080000 		.4byte	.LASF18
 3205 00d6 04       		.byte	0x4
 3206 00d7 9601     		.2byte	0x196
 3207 00d9 3E000000 		.4byte	0x3e
 3208 00dd 05       		.uleb128 0x5
 3209 00de 9B020000 		.4byte	.LASF19
 3210 00e2 04       		.byte	0x4
 3211 00e3 9701     		.2byte	0x197
 3212 00e5 57000000 		.4byte	0x57
 3213 00e9 02       		.uleb128 0x2
 3214 00ea 04       		.byte	0x4
 3215 00eb 04       		.byte	0x4
 3216 00ec E2050000 		.4byte	.LASF20
 3217 00f0 02       		.uleb128 0x2
 3218 00f1 08       		.byte	0x8
 3219 00f2 04       		.byte	0x4
 3220 00f3 0D090000 		.4byte	.LASF21
 3221 00f7 02       		.uleb128 0x2
 3222 00f8 01       		.byte	0x1
 3223 00f9 08       		.byte	0x8
 3224 00fa 34070000 		.4byte	.LASF22
 3225 00fe 02       		.uleb128 0x2
 3226 00ff 08       		.byte	0x8
 3227 0100 04       		.byte	0x4
 3228 0101 28070000 		.4byte	.LASF23
 3229 0105 02       		.uleb128 0x2
 3230 0106 04       		.byte	0x4
 3231 0107 07       		.byte	0x7
 3232 0108 32050000 		.4byte	.LASF24
 3233 010c 06       		.uleb128 0x6
 3234 010d 04       		.byte	0x4
 3235 010e F7000000 		.4byte	0xf7
 3236 0112 06       		.uleb128 0x6
 3237 0113 04       		.byte	0x4
 3238 0114 18010000 		.4byte	0x118
 3239 0118 07       		.uleb128 0x7
 3240 0119 F7000000 		.4byte	0xf7
 3241 011d 08       		.uleb128 0x8
 3242 011e F7000000 		.4byte	0xf7
 3243 0122 2D010000 		.4byte	0x12d
 3244 0126 09       		.uleb128 0x9
 3245 0127 05010000 		.4byte	0x105
 3246 012b 17       		.byte	0x17
 3247 012c 00       		.byte	0
 3248 012d 0A       		.uleb128 0xa
 3249 012e 746D00   		.ascii	"tm\000"
 3250 0131 24       		.byte	0x24
 3251 0132 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 79


 3252 0133 21       		.byte	0x21
 3253 0134 A5010000 		.4byte	0x1a5
 3254 0138 0B       		.uleb128 0xb
 3255 0139 27080000 		.4byte	.LASF25
 3256 013d 05       		.byte	0x5
 3257 013e 23       		.byte	0x23
 3258 013f 7E000000 		.4byte	0x7e
 3259 0143 00       		.byte	0
 3260 0144 0B       		.uleb128 0xb
 3261 0145 2B050000 		.4byte	.LASF26
 3262 0149 05       		.byte	0x5
 3263 014a 24       		.byte	0x24
 3264 014b 7E000000 		.4byte	0x7e
 3265 014f 04       		.byte	0x4
 3266 0150 0B       		.uleb128 0xb
 3267 0151 18000000 		.4byte	.LASF27
 3268 0155 05       		.byte	0x5
 3269 0156 25       		.byte	0x25
 3270 0157 7E000000 		.4byte	0x7e
 3271 015b 08       		.byte	0x8
 3272 015c 0B       		.uleb128 0xb
 3273 015d 09080000 		.4byte	.LASF28
 3274 0161 05       		.byte	0x5
 3275 0162 26       		.byte	0x26
 3276 0163 7E000000 		.4byte	0x7e
 3277 0167 0C       		.byte	0xc
 3278 0168 0B       		.uleb128 0xb
 3279 0169 21030000 		.4byte	.LASF29
 3280 016d 05       		.byte	0x5
 3281 016e 27       		.byte	0x27
 3282 016f 7E000000 		.4byte	0x7e
 3283 0173 10       		.byte	0x10
 3284 0174 0B       		.uleb128 0xb
 3285 0175 7C030000 		.4byte	.LASF30
 3286 0179 05       		.byte	0x5
 3287 017a 28       		.byte	0x28
 3288 017b 7E000000 		.4byte	0x7e
 3289 017f 14       		.byte	0x14
 3290 0180 0B       		.uleb128 0xb
 3291 0181 E4060000 		.4byte	.LASF31
 3292 0185 05       		.byte	0x5
 3293 0186 29       		.byte	0x29
 3294 0187 7E000000 		.4byte	0x7e
 3295 018b 18       		.byte	0x18
 3296 018c 0B       		.uleb128 0xb
 3297 018d 20000000 		.4byte	.LASF32
 3298 0191 05       		.byte	0x5
 3299 0192 2A       		.byte	0x2a
 3300 0193 7E000000 		.4byte	0x7e
 3301 0197 1C       		.byte	0x1c
 3302 0198 0B       		.uleb128 0xb
 3303 0199 1E040000 		.4byte	.LASF33
 3304 019d 05       		.byte	0x5
 3305 019e 2B       		.byte	0x2b
 3306 019f 7E000000 		.4byte	0x7e
 3307 01a3 20       		.byte	0x20
 3308 01a4 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 80


 3309 01a5 0C       		.uleb128 0xc
 3310 01a6 8101     		.2byte	0x181
 3311 01a8 06       		.byte	0x6
 3312 01a9 0A       		.byte	0xa
 3313 01aa D3010000 		.4byte	0x1d3
 3314 01ae 0B       		.uleb128 0xb
 3315 01af 7C050000 		.4byte	.LASF34
 3316 01b3 06       		.byte	0x6
 3317 01b4 0C       		.byte	0xc
 3318 01b5 D3010000 		.4byte	0x1d3
 3319 01b9 00       		.byte	0
 3320 01ba 0B       		.uleb128 0xb
 3321 01bb 5F080000 		.4byte	.LASF35
 3322 01bf 06       		.byte	0x6
 3323 01c0 0D       		.byte	0xd
 3324 01c1 AD000000 		.4byte	0xad
 3325 01c5 80       		.byte	0x80
 3326 01c6 0B       		.uleb128 0xb
 3327 01c7 A7060000 		.4byte	.LASF36
 3328 01cb 06       		.byte	0x6
 3329 01cc 0F       		.byte	0xf
 3330 01cd E3010000 		.4byte	0x1e3
 3331 01d1 81       		.byte	0x81
 3332 01d2 00       		.byte	0
 3333 01d3 08       		.uleb128 0x8
 3334 01d4 F7000000 		.4byte	0xf7
 3335 01d8 E3010000 		.4byte	0x1e3
 3336 01dc 09       		.uleb128 0x9
 3337 01dd 05010000 		.4byte	0x105
 3338 01e1 7F       		.byte	0x7f
 3339 01e2 00       		.byte	0
 3340 01e3 08       		.uleb128 0x8
 3341 01e4 F7000000 		.4byte	0xf7
 3342 01e8 F3010000 		.4byte	0x1f3
 3343 01ec 09       		.uleb128 0x9
 3344 01ed 05010000 		.4byte	0x105
 3345 01f1 FF       		.byte	0xff
 3346 01f2 00       		.byte	0
 3347 01f3 03       		.uleb128 0x3
 3348 01f4 8F060000 		.4byte	.LASF37
 3349 01f8 06       		.byte	0x6
 3350 01f9 10       		.byte	0x10
 3351 01fa A5010000 		.4byte	0x1a5
 3352 01fe 0D       		.uleb128 0xd
 3353 01ff 2C       		.byte	0x2c
 3354 0200 07       		.byte	0x7
 3355 0201 14       		.byte	0x14
 3356 0202 2B020000 		.4byte	0x22b
 3357 0206 0E       		.uleb128 0xe
 3358 0207 6B657900 		.ascii	"key\000"
 3359 020b 07       		.byte	0x7
 3360 020c 15       		.byte	0x15
 3361 020d 2B020000 		.4byte	0x22b
 3362 0211 00       		.byte	0
 3363 0212 0B       		.uleb128 0xb
 3364 0213 12000000 		.4byte	.LASF38
 3365 0217 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 81


 3366 0218 16       		.byte	0x16
 3367 0219 2B020000 		.4byte	0x22b
 3368 021d 14       		.byte	0x14
 3369 021e 0B       		.uleb128 0xb
 3370 021f FA030000 		.4byte	.LASF39
 3371 0223 07       		.byte	0x7
 3372 0224 17       		.byte	0x17
 3373 0225 DD000000 		.4byte	0xdd
 3374 0229 28       		.byte	0x28
 3375 022a 00       		.byte	0
 3376 022b 08       		.uleb128 0x8
 3377 022c F7000000 		.4byte	0xf7
 3378 0230 3B020000 		.4byte	0x23b
 3379 0234 09       		.uleb128 0x9
 3380 0235 05010000 		.4byte	0x105
 3381 0239 13       		.byte	0x13
 3382 023a 00       		.byte	0
 3383 023b 03       		.uleb128 0x3
 3384 023c A4030000 		.4byte	.LASF40
 3385 0240 07       		.byte	0x7
 3386 0241 19       		.byte	0x19
 3387 0242 FE010000 		.4byte	0x1fe
 3388 0246 0D       		.uleb128 0xd
 3389 0247 3C       		.byte	0x3c
 3390 0248 08       		.byte	0x8
 3391 0249 36       		.byte	0x36
 3392 024a 73020000 		.4byte	0x273
 3393 024e 0B       		.uleb128 0xb
 3394 024f 02080000 		.4byte	.LASF41
 3395 0253 08       		.byte	0x8
 3396 0254 37       		.byte	0x37
 3397 0255 2B020000 		.4byte	0x22b
 3398 0259 00       		.byte	0
 3399 025a 0B       		.uleb128 0xb
 3400 025b 5F070000 		.4byte	.LASF42
 3401 025f 08       		.byte	0x8
 3402 0260 38       		.byte	0x38
 3403 0261 2B020000 		.4byte	0x22b
 3404 0265 14       		.byte	0x14
 3405 0266 0B       		.uleb128 0xb
 3406 0267 A2060000 		.4byte	.LASF43
 3407 026b 08       		.byte	0x8
 3408 026c 39       		.byte	0x39
 3409 026d 2B020000 		.4byte	0x22b
 3410 0271 28       		.byte	0x28
 3411 0272 00       		.byte	0
 3412 0273 03       		.uleb128 0x3
 3413 0274 73070000 		.4byte	.LASF44
 3414 0278 08       		.byte	0x8
 3415 0279 3B       		.byte	0x3b
 3416 027a 46020000 		.4byte	0x246
 3417 027e 0D       		.uleb128 0xd
 3418 027f 20       		.byte	0x20
 3419 0280 08       		.byte	0x8
 3420 0281 3D       		.byte	0x3d
 3421 0282 E7020000 		.4byte	0x2e7
 3422 0286 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 82


 3423 0287 41020000 		.4byte	.LASF45
 3424 028b 08       		.byte	0x8
 3425 028c 3E       		.byte	0x3e
 3426 028d 7E000000 		.4byte	0x7e
 3427 0291 00       		.byte	0
 3428 0292 0E       		.uleb128 0xe
 3429 0293 62657200 		.ascii	"ber\000"
 3430 0297 08       		.byte	0x8
 3431 0298 3F       		.byte	0x3f
 3432 0299 7E000000 		.4byte	0x7e
 3433 029d 04       		.byte	0x4
 3434 029e 0B       		.uleb128 0xb
 3435 029f 70060000 		.4byte	.LASF46
 3436 02a3 08       		.byte	0x8
 3437 02a4 40       		.byte	0x40
 3438 02a5 7E000000 		.4byte	0x7e
 3439 02a9 08       		.byte	0x8
 3440 02aa 0B       		.uleb128 0xb
 3441 02ab BD010000 		.4byte	.LASF47
 3442 02af 08       		.byte	0x8
 3443 02b0 41       		.byte	0x41
 3444 02b1 7E000000 		.4byte	0x7e
 3445 02b5 0C       		.byte	0xc
 3446 02b6 0B       		.uleb128 0xb
 3447 02b7 55060000 		.4byte	.LASF48
 3448 02bb 08       		.byte	0x8
 3449 02bc 42       		.byte	0x42
 3450 02bd 7E000000 		.4byte	0x7e
 3451 02c1 10       		.byte	0x10
 3452 02c2 0B       		.uleb128 0xb
 3453 02c3 AE060000 		.4byte	.LASF49
 3454 02c7 08       		.byte	0x8
 3455 02c8 43       		.byte	0x43
 3456 02c9 7E000000 		.4byte	0x7e
 3457 02cd 14       		.byte	0x14
 3458 02ce 0B       		.uleb128 0xb
 3459 02cf DF010000 		.4byte	.LASF50
 3460 02d3 08       		.byte	0x8
 3461 02d4 44       		.byte	0x44
 3462 02d5 7E000000 		.4byte	0x7e
 3463 02d9 18       		.byte	0x18
 3464 02da 0B       		.uleb128 0xb
 3465 02db 72040000 		.4byte	.LASF51
 3466 02df 08       		.byte	0x8
 3467 02e0 45       		.byte	0x45
 3468 02e1 7E000000 		.4byte	0x7e
 3469 02e5 1C       		.byte	0x1c
 3470 02e6 00       		.byte	0
 3471 02e7 03       		.uleb128 0x3
 3472 02e8 B3060000 		.4byte	.LASF52
 3473 02ec 08       		.byte	0x8
 3474 02ed 47       		.byte	0x47
 3475 02ee 7E020000 		.4byte	0x27e
 3476 02f2 0D       		.uleb128 0xd
 3477 02f3 10       		.byte	0x10
 3478 02f4 08       		.byte	0x8
 3479 02f5 49       		.byte	0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 83


 3480 02f6 37030000 		.4byte	0x337
 3481 02fa 0B       		.uleb128 0xb
 3482 02fb 73050000 		.4byte	.LASF53
 3483 02ff 08       		.byte	0x8
 3484 0300 4A       		.byte	0x4a
 3485 0301 E9000000 		.4byte	0xe9
 3486 0305 00       		.byte	0
 3487 0306 0B       		.uleb128 0xb
 3488 0307 92000000 		.4byte	.LASF54
 3489 030b 08       		.byte	0x8
 3490 030c 4B       		.byte	0x4b
 3491 030d E9000000 		.4byte	0xe9
 3492 0311 04       		.byte	0x4
 3493 0312 0B       		.uleb128 0xb
 3494 0313 6D020000 		.4byte	.LASF55
 3495 0317 08       		.byte	0x8
 3496 0318 4C       		.byte	0x4c
 3497 0319 E9000000 		.4byte	0xe9
 3498 031d 08       		.byte	0x8
 3499 031e 0B       		.uleb128 0xb
 3500 031f 04040000 		.4byte	.LASF56
 3501 0323 08       		.byte	0x8
 3502 0324 4D       		.byte	0x4d
 3503 0325 B9000000 		.4byte	0xb9
 3504 0329 0C       		.byte	0xc
 3505 032a 0B       		.uleb128 0xb
 3506 032b 11080000 		.4byte	.LASF57
 3507 032f 08       		.byte	0x8
 3508 0330 4E       		.byte	0x4e
 3509 0331 AD000000 		.4byte	0xad
 3510 0335 0E       		.byte	0xe
 3511 0336 00       		.byte	0
 3512 0337 03       		.uleb128 0x3
 3513 0338 80070000 		.4byte	.LASF58
 3514 033c 08       		.byte	0x8
 3515 033d 50       		.byte	0x50
 3516 033e F2020000 		.4byte	0x2f2
 3517 0342 0D       		.uleb128 0xd
 3518 0343 07       		.byte	0x7
 3519 0344 08       		.byte	0x8
 3520 0345 53       		.byte	0x53
 3521 0346 9F030000 		.4byte	0x39f
 3522 034a 0B       		.uleb128 0xb
 3523 034b A1020000 		.4byte	.LASF59
 3524 034f 08       		.byte	0x8
 3525 0350 55       		.byte	0x55
 3526 0351 AD000000 		.4byte	0xad
 3527 0355 00       		.byte	0
 3528 0356 0B       		.uleb128 0xb
 3529 0357 07060000 		.4byte	.LASF60
 3530 035b 08       		.byte	0x8
 3531 035c 57       		.byte	0x57
 3532 035d 9F030000 		.4byte	0x39f
 3533 0361 01       		.byte	0x1
 3534 0362 0B       		.uleb128 0xb
 3535 0363 98070000 		.4byte	.LASF61
 3536 0367 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 84


 3537 0368 59       		.byte	0x59
 3538 0369 AD000000 		.4byte	0xad
 3539 036d 02       		.byte	0x2
 3540 036e 0B       		.uleb128 0xb
 3541 036f 5A060000 		.4byte	.LASF62
 3542 0373 08       		.byte	0x8
 3543 0374 5B       		.byte	0x5b
 3544 0375 AD000000 		.4byte	0xad
 3545 0379 03       		.byte	0x3
 3546 037a 0B       		.uleb128 0xb
 3547 037b 37030000 		.4byte	.LASF63
 3548 037f 08       		.byte	0x8
 3549 0380 5E       		.byte	0x5e
 3550 0381 AD000000 		.4byte	0xad
 3551 0385 04       		.byte	0x4
 3552 0386 0B       		.uleb128 0xb
 3553 0387 7F080000 		.4byte	.LASF64
 3554 038b 08       		.byte	0x8
 3555 038c 63       		.byte	0x63
 3556 038d AD000000 		.4byte	0xad
 3557 0391 05       		.byte	0x5
 3558 0392 0B       		.uleb128 0xb
 3559 0393 03070000 		.4byte	.LASF65
 3560 0397 08       		.byte	0x8
 3561 0398 65       		.byte	0x65
 3562 0399 AD000000 		.4byte	0xad
 3563 039d 06       		.byte	0x6
 3564 039e 00       		.byte	0
 3565 039f 02       		.uleb128 0x2
 3566 03a0 01       		.byte	0x1
 3567 03a1 02       		.byte	0x2
 3568 03a2 23060000 		.4byte	.LASF66
 3569 03a6 03       		.uleb128 0x3
 3570 03a7 F6040000 		.4byte	.LASF67
 3571 03ab 08       		.byte	0x8
 3572 03ac 67       		.byte	0x67
 3573 03ad 42030000 		.4byte	0x342
 3574 03b1 0D       		.uleb128 0xd
 3575 03b2 06       		.byte	0x6
 3576 03b3 09       		.byte	0x9
 3577 03b4 2E       		.byte	0x2e
 3578 03b5 EA030000 		.4byte	0x3ea
 3579 03b9 0B       		.uleb128 0xb
 3580 03ba C2010000 		.4byte	.LASF68
 3581 03be 09       		.byte	0x9
 3582 03bf 30       		.byte	0x30
 3583 03c0 B9000000 		.4byte	0xb9
 3584 03c4 00       		.byte	0
 3585 03c5 0B       		.uleb128 0xb
 3586 03c6 47020000 		.4byte	.LASF69
 3587 03ca 09       		.byte	0x9
 3588 03cb 31       		.byte	0x31
 3589 03cc D1000000 		.4byte	0xd1
 3590 03d0 02       		.byte	0x2
 3591 03d1 0B       		.uleb128 0xb
 3592 03d2 BB080000 		.4byte	.LASF70
 3593 03d6 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 85


 3594 03d7 32       		.byte	0x32
 3595 03d8 AD000000 		.4byte	0xad
 3596 03dc 04       		.byte	0x4
 3597 03dd 0B       		.uleb128 0xb
 3598 03de 7A000000 		.4byte	.LASF71
 3599 03e2 09       		.byte	0x9
 3600 03e3 33       		.byte	0x33
 3601 03e4 AD000000 		.4byte	0xad
 3602 03e8 05       		.byte	0x5
 3603 03e9 00       		.byte	0
 3604 03ea 03       		.uleb128 0x3
 3605 03eb 1D060000 		.4byte	.LASF72
 3606 03ef 09       		.byte	0x9
 3607 03f0 36       		.byte	0x36
 3608 03f1 F5030000 		.4byte	0x3f5
 3609 03f5 0F       		.uleb128 0xf
 3610 03f6 B1030000 		.4byte	0x3b1
 3611 03fa 0D       		.uleb128 0xd
 3612 03fb 1C       		.byte	0x1c
 3613 03fc 09       		.byte	0x9
 3614 03fd 39       		.byte	0x39
 3615 03fe 1B040000 		.4byte	0x41b
 3616 0402 0B       		.uleb128 0xb
 3617 0403 27040000 		.4byte	.LASF73
 3618 0407 09       		.byte	0x9
 3619 0408 3B       		.byte	0x3b
 3620 0409 1B040000 		.4byte	0x41b
 3621 040d 00       		.byte	0
 3622 040e 0B       		.uleb128 0xb
 3623 040f 3A040000 		.4byte	.LASF74
 3624 0413 09       		.byte	0x9
 3625 0414 3C       		.byte	0x3c
 3626 0415 1D010000 		.4byte	0x11d
 3627 0419 04       		.byte	0x4
 3628 041a 00       		.byte	0
 3629 041b 06       		.uleb128 0x6
 3630 041c 04       		.byte	0x4
 3631 041d 73020000 		.4byte	0x273
 3632 0421 03       		.uleb128 0x3
 3633 0422 EB040000 		.4byte	.LASF75
 3634 0426 09       		.byte	0x9
 3635 0427 3E       		.byte	0x3e
 3636 0428 FA030000 		.4byte	0x3fa
 3637 042c 0D       		.uleb128 0xd
 3638 042d 68       		.byte	0x68
 3639 042e 09       		.byte	0x9
 3640 042f 44       		.byte	0x44
 3641 0430 4D040000 		.4byte	0x44d
 3642 0434 0B       		.uleb128 0xb
 3643 0435 32040000 		.4byte	.LASF76
 3644 0439 09       		.byte	0x9
 3645 043a 49       		.byte	0x49
 3646 043b 4D040000 		.4byte	0x44d
 3647 043f 00       		.byte	0
 3648 0440 0B       		.uleb128 0xb
 3649 0441 16040000 		.4byte	.LASF77
 3650 0445 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 86


 3651 0446 4A       		.byte	0x4a
 3652 0447 7E000000 		.4byte	0x7e
 3653 044b 64       		.byte	0x64
 3654 044c 00       		.byte	0
 3655 044d 08       		.uleb128 0x8
 3656 044e F7000000 		.4byte	0xf7
 3657 0452 5D040000 		.4byte	0x45d
 3658 0456 09       		.uleb128 0x9
 3659 0457 05010000 		.4byte	0x105
 3660 045b 63       		.byte	0x63
 3661 045c 00       		.byte	0
 3662 045d 03       		.uleb128 0x3
 3663 045e 8C080000 		.4byte	.LASF78
 3664 0462 09       		.byte	0x9
 3665 0463 50       		.byte	0x50
 3666 0464 2C040000 		.4byte	0x42c
 3667 0468 10       		.uleb128 0x10
 3668 0469 10060000 		.4byte	.LASF110
 3669 046d 01       		.byte	0x1
 3670 046e 12       		.byte	0x12
 3671 046f 00000000 		.4byte	.LFB64
 3672 0473 44000000 		.4byte	.LFE64-.LFB64
 3673 0477 01       		.uleb128 0x1
 3674 0478 9C       		.byte	0x9c
 3675 0479 11       		.uleb128 0x11
 3676 047a E8050000 		.4byte	.LASF79
 3677 047e 01       		.byte	0x1
 3678 047f 1C       		.byte	0x1c
 3679 0480 00000000 		.4byte	.LFB65
 3680 0484 6C000000 		.4byte	.LFE65-.LFB65
 3681 0488 01       		.uleb128 0x1
 3682 0489 9C       		.byte	0x9c
 3683 048a 11       		.uleb128 0x11
 3684 048b E0070000 		.4byte	.LASF80
 3685 048f 01       		.byte	0x1
 3686 0490 36       		.byte	0x36
 3687 0491 00000000 		.4byte	.LFB66
 3688 0495 32000000 		.4byte	.LFE66-.LFB66
 3689 0499 01       		.uleb128 0x1
 3690 049a 9C       		.byte	0x9c
 3691 049b 11       		.uleb128 0x11
 3692 049c 8E030000 		.4byte	.LASF81
 3693 04a0 01       		.byte	0x1
 3694 04a1 46       		.byte	0x46
 3695 04a2 00000000 		.4byte	.LFB67
 3696 04a6 20000000 		.4byte	.LFE67-.LFB67
 3697 04aa 01       		.uleb128 0x1
 3698 04ab 9C       		.byte	0x9c
 3699 04ac 11       		.uleb128 0x11
 3700 04ad FC080000 		.4byte	.LASF82
 3701 04b1 01       		.byte	0x1
 3702 04b2 4F       		.byte	0x4f
 3703 04b3 00000000 		.4byte	.LFB68
 3704 04b7 40000000 		.4byte	.LFE68-.LFB68
 3705 04bb 01       		.uleb128 0x1
 3706 04bc 9C       		.byte	0x9c
 3707 04bd 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 87


 3708 04be 48040000 		.4byte	.LASF96
 3709 04c2 01       		.byte	0x1
 3710 04c3 61       		.byte	0x61
 3711 04c4 AD000000 		.4byte	0xad
 3712 04c8 00000000 		.4byte	.LFB69
 3713 04cc DC000000 		.4byte	.LFE69-.LFB69
 3714 04d0 01       		.uleb128 0x1
 3715 04d1 9C       		.byte	0x9c
 3716 04d2 31050000 		.4byte	0x531
 3717 04d6 13       		.uleb128 0x13
 3718 04d7 A9080000 		.4byte	.LASF83
 3719 04db 01       		.byte	0x1
 3720 04dc 6A       		.byte	0x6a
 3721 04dd AD000000 		.4byte	0xad
 3722 04e1 02       		.uleb128 0x2
 3723 04e2 91       		.byte	0x91
 3724 04e3 77       		.sleb128 -9
 3725 04e4 13       		.uleb128 0x13
 3726 04e5 B2080000 		.4byte	.LASF84
 3727 04e9 01       		.byte	0x1
 3728 04ea 6B       		.byte	0x6b
 3729 04eb AD000000 		.4byte	0xad
 3730 04ef 02       		.uleb128 0x2
 3731 04f0 91       		.byte	0x91
 3732 04f1 74       		.sleb128 -12
 3733 04f2 13       		.uleb128 0x13
 3734 04f3 C9080000 		.4byte	.LASF85
 3735 04f7 01       		.byte	0x1
 3736 04f8 6D       		.byte	0x6d
 3737 04f9 57000000 		.4byte	0x57
 3738 04fd 02       		.uleb128 0x2
 3739 04fe 91       		.byte	0x91
 3740 04ff 70       		.sleb128 -16
 3741 0500 14       		.uleb128 0x14
 3742 0501 26000000 		.4byte	.LBB2
 3743 0505 4A000000 		.4byte	.LBE2-.LBB2
 3744 0509 13       		.uleb128 0x13
 3745 050a B2080000 		.4byte	.LASF84
 3746 050e 01       		.byte	0x1
 3747 050f 70       		.byte	0x70
 3748 0510 AD000000 		.4byte	0xad
 3749 0514 02       		.uleb128 0x2
 3750 0515 91       		.byte	0x91
 3751 0516 76       		.sleb128 -10
 3752 0517 14       		.uleb128 0x14
 3753 0518 2C000000 		.4byte	.LBB3
 3754 051c 2A000000 		.4byte	.LBE3-.LBB3
 3755 0520 13       		.uleb128 0x13
 3756 0521 B0030000 		.4byte	.LASF86
 3757 0525 01       		.byte	0x1
 3758 0526 72       		.byte	0x72
 3759 0527 AD000000 		.4byte	0xad
 3760 052b 02       		.uleb128 0x2
 3761 052c 91       		.byte	0x91
 3762 052d 75       		.sleb128 -11
 3763 052e 00       		.byte	0
 3764 052f 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 88


 3765 0530 00       		.byte	0
 3766 0531 11       		.uleb128 0x11
 3767 0532 EC060000 		.4byte	.LASF87
 3768 0536 01       		.byte	0x1
 3769 0537 93       		.byte	0x93
 3770 0538 00000000 		.4byte	.LFB70
 3771 053c 1C000000 		.4byte	.LFE70-.LFB70
 3772 0540 01       		.uleb128 0x1
 3773 0541 9C       		.byte	0x9c
 3774 0542 11       		.uleb128 0x11
 3775 0543 C1060000 		.4byte	.LASF88
 3776 0547 01       		.byte	0x1
 3777 0548 9B       		.byte	0x9b
 3778 0549 00000000 		.4byte	.LFB71
 3779 054d 28000000 		.4byte	.LFE71-.LFB71
 3780 0551 01       		.uleb128 0x1
 3781 0552 9C       		.byte	0x9c
 3782 0553 15       		.uleb128 0x15
 3783 0554 DA040000 		.4byte	.LASF100
 3784 0558 01       		.byte	0x1
 3785 0559 A6       		.byte	0xa6
 3786 055a 8C000000 		.4byte	0x8c
 3787 055e 00000000 		.4byte	.LFB72
 3788 0562 C8000000 		.4byte	.LFE72-.LFB72
 3789 0566 01       		.uleb128 0x1
 3790 0567 9C       		.byte	0x9c
 3791 0568 E5050000 		.4byte	0x5e5
 3792 056c 16       		.uleb128 0x16
 3793 056d C8050000 		.4byte	.LASF89
 3794 0571 01       		.byte	0x1
 3795 0572 A6       		.byte	0xa6
 3796 0573 0C010000 		.4byte	0x10c
 3797 0577 02       		.uleb128 0x2
 3798 0578 91       		.byte	0x91
 3799 0579 5C       		.sleb128 -36
 3800 057a 16       		.uleb128 0x16
 3801 057b D3080000 		.4byte	.LASF90
 3802 057f 01       		.byte	0x1
 3803 0580 A6       		.byte	0xa6
 3804 0581 0C010000 		.4byte	0x10c
 3805 0585 02       		.uleb128 0x2
 3806 0586 91       		.byte	0x91
 3807 0587 58       		.sleb128 -40
 3808 0588 16       		.uleb128 0x16
 3809 0589 DB030000 		.4byte	.LASF91
 3810 058d 01       		.byte	0x1
 3811 058e A6       		.byte	0xa6
 3812 058f A2000000 		.4byte	0xa2
 3813 0593 02       		.uleb128 0x2
 3814 0594 91       		.byte	0x91
 3815 0595 54       		.sleb128 -44
 3816 0596 13       		.uleb128 0x13
 3817 0597 CF040000 		.4byte	.LASF92
 3818 059b 01       		.byte	0x1
 3819 059c A8       		.byte	0xa8
 3820 059d C5000000 		.4byte	0xc5
 3821 05a1 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 89


 3822 05a2 91       		.byte	0x91
 3823 05a3 74       		.sleb128 -12
 3824 05a4 14       		.uleb128 0x14
 3825 05a5 16000000 		.4byte	.LBB4
 3826 05a9 88000000 		.4byte	.LBE4-.LBB4
 3827 05ad 13       		.uleb128 0x13
 3828 05ae D1050000 		.4byte	.LASF93
 3829 05b2 01       		.byte	0x1
 3830 05b3 AC       		.byte	0xac
 3831 05b4 0C010000 		.4byte	0x10c
 3832 05b8 02       		.uleb128 0x2
 3833 05b9 91       		.byte	0x91
 3834 05ba 64       		.sleb128 -28
 3835 05bb 13       		.uleb128 0x13
 3836 05bc 4F060000 		.4byte	.LASF94
 3837 05c0 01       		.byte	0x1
 3838 05c1 AD       		.byte	0xad
 3839 05c2 A2000000 		.4byte	0xa2
 3840 05c6 02       		.uleb128 0x2
 3841 05c7 91       		.byte	0x91
 3842 05c8 6C       		.sleb128 -20
 3843 05c9 17       		.uleb128 0x17
 3844 05ca 6900     		.ascii	"i\000"
 3845 05cc 01       		.byte	0x1
 3846 05cd AE       		.byte	0xae
 3847 05ce A2000000 		.4byte	0xa2
 3848 05d2 02       		.uleb128 0x2
 3849 05d3 91       		.byte	0x91
 3850 05d4 70       		.sleb128 -16
 3851 05d5 13       		.uleb128 0x13
 3852 05d6 F6020000 		.4byte	.LASF95
 3853 05da 01       		.byte	0x1
 3854 05db AE       		.byte	0xae
 3855 05dc A2000000 		.4byte	0xa2
 3856 05e0 02       		.uleb128 0x2
 3857 05e1 91       		.byte	0x91
 3858 05e2 68       		.sleb128 -24
 3859 05e3 00       		.byte	0
 3860 05e4 00       		.byte	0
 3861 05e5 12       		.uleb128 0x12
 3862 05e6 9D050000 		.4byte	.LASF97
 3863 05ea 01       		.byte	0x1
 3864 05eb DA       		.byte	0xda
 3865 05ec F3010000 		.4byte	0x1f3
 3866 05f0 00000000 		.4byte	.LFB73
 3867 05f4 00010000 		.4byte	.LFE73-.LFB73
 3868 05f8 01       		.uleb128 0x1
 3869 05f9 9C       		.byte	0x9c
 3870 05fa 3C060000 		.4byte	0x63c
 3871 05fe 13       		.uleb128 0x13
 3872 05ff 66010000 		.4byte	.LASF98
 3873 0603 01       		.byte	0x1
 3874 0604 DC       		.byte	0xdc
 3875 0605 F3010000 		.4byte	0x1f3
 3876 0609 03       		.uleb128 0x3
 3877 060a 91       		.byte	0x91
 3878 060b E47C     		.sleb128 -412
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 90


 3879 060d 14       		.uleb128 0x14
 3880 060e 4A000000 		.4byte	.LBB5
 3881 0612 86000000 		.4byte	.LBE5-.LBB5
 3882 0616 17       		.uleb128 0x17
 3883 0617 6900     		.ascii	"i\000"
 3884 0619 01       		.byte	0x1
 3885 061a E3       		.byte	0xe3
 3886 061b 7E000000 		.4byte	0x7e
 3887 061f 02       		.uleb128 0x2
 3888 0620 91       		.byte	0x91
 3889 0621 6C       		.sleb128 -20
 3890 0622 14       		.uleb128 0x14
 3891 0623 70000000 		.4byte	.LBB6
 3892 0627 46000000 		.4byte	.LBE6-.LBB6
 3893 062b 13       		.uleb128 0x13
 3894 062c CF020000 		.4byte	.LASF99
 3895 0630 01       		.byte	0x1
 3896 0631 F0       		.byte	0xf0
 3897 0632 57000000 		.4byte	0x57
 3898 0636 02       		.uleb128 0x2
 3899 0637 91       		.byte	0x91
 3900 0638 68       		.sleb128 -24
 3901 0639 00       		.byte	0
 3902 063a 00       		.byte	0
 3903 063b 00       		.byte	0
 3904 063c 18       		.uleb128 0x18
 3905 063d CC030000 		.4byte	.LASF101
 3906 0641 01       		.byte	0x1
 3907 0642 0401     		.2byte	0x104
 3908 0644 AD000000 		.4byte	0xad
 3909 0648 00000000 		.4byte	.LFB74
 3910 064c 78000000 		.4byte	.LFE74-.LFB74
 3911 0650 01       		.uleb128 0x1
 3912 0651 9C       		.byte	0x9c
 3913 0652 AD060000 		.4byte	0x6ad
 3914 0656 19       		.uleb128 0x19
 3915 0657 BA040000 		.4byte	.LASF102
 3916 065b 01       		.byte	0x1
 3917 065c 0401     		.2byte	0x104
 3918 065e 0C010000 		.4byte	0x10c
 3919 0662 02       		.uleb128 0x2
 3920 0663 91       		.byte	0x91
 3921 0664 6C       		.sleb128 -20
 3922 0665 19       		.uleb128 0x19
 3923 0666 5F040000 		.4byte	.LASF103
 3924 066a 01       		.byte	0x1
 3925 066b 0401     		.2byte	0x104
 3926 066d 12010000 		.4byte	0x112
 3927 0671 02       		.uleb128 0x2
 3928 0672 91       		.byte	0x91
 3929 0673 68       		.sleb128 -24
 3930 0674 19       		.uleb128 0x19
 3931 0675 85040000 		.4byte	.LASF104
 3932 0679 01       		.byte	0x1
 3933 067a 0401     		.2byte	0x104
 3934 067c 12010000 		.4byte	0x112
 3935 0680 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 91


 3936 0681 91       		.byte	0x91
 3937 0682 64       		.sleb128 -28
 3938 0683 19       		.uleb128 0x19
 3939 0684 6B040000 		.4byte	.LASF105
 3940 0688 01       		.byte	0x1
 3941 0689 0401     		.2byte	0x104
 3942 068b 0C010000 		.4byte	0x10c
 3943 068f 02       		.uleb128 0x2
 3944 0690 91       		.byte	0x91
 3945 0691 60       		.sleb128 -32
 3946 0692 1A       		.uleb128 0x1a
 3947 0693 6100     		.ascii	"a\000"
 3948 0695 01       		.byte	0x1
 3949 0696 0601     		.2byte	0x106
 3950 0698 0C010000 		.4byte	0x10c
 3951 069c 02       		.uleb128 0x2
 3952 069d 91       		.byte	0x91
 3953 069e 74       		.sleb128 -12
 3954 069f 1A       		.uleb128 0x1a
 3955 06a0 6200     		.ascii	"b\000"
 3956 06a2 01       		.byte	0x1
 3957 06a3 0601     		.2byte	0x106
 3958 06a5 0C010000 		.4byte	0x10c
 3959 06a9 02       		.uleb128 0x2
 3960 06aa 91       		.byte	0x91
 3961 06ab 70       		.sleb128 -16
 3962 06ac 00       		.byte	0
 3963 06ad 1B       		.uleb128 0x1b
 3964 06ae 39070000 		.4byte	.LASF106
 3965 06b2 01       		.byte	0x1
 3966 06b3 2301     		.2byte	0x123
 3967 06b5 AD000000 		.4byte	0xad
 3968 06b9 00000000 		.4byte	.LFB75
 3969 06bd 74010000 		.4byte	.LFE75-.LFB75
 3970 06c1 01       		.uleb128 0x1
 3971 06c2 9C       		.byte	0x9c
 3972 06c3 DF060000 		.4byte	0x6df
 3973 06c7 14       		.uleb128 0x14
 3974 06c8 2E000000 		.4byte	.LBB7
 3975 06cc 68000000 		.4byte	.LBE7-.LBB7
 3976 06d0 1A       		.uleb128 0x1a
 3977 06d1 6900     		.ascii	"i\000"
 3978 06d3 01       		.byte	0x1
 3979 06d4 3101     		.2byte	0x131
 3980 06d6 AD000000 		.4byte	0xad
 3981 06da 02       		.uleb128 0x2
 3982 06db 91       		.byte	0x91
 3983 06dc 77       		.sleb128 -9
 3984 06dd 00       		.byte	0
 3985 06de 00       		.byte	0
 3986 06df 1B       		.uleb128 0x1b
 3987 06e0 41050000 		.4byte	.LASF107
 3988 06e4 01       		.byte	0x1
 3989 06e5 7501     		.2byte	0x175
 3990 06e7 AD000000 		.4byte	0xad
 3991 06eb 00000000 		.4byte	.LFB76
 3992 06ef B8000000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 92


 3993 06f3 01       		.uleb128 0x1
 3994 06f4 9C       		.byte	0x9c
 3995 06f5 22070000 		.4byte	0x722
 3996 06f9 1C       		.uleb128 0x1c
 3997 06fa 5F080000 		.4byte	.LASF35
 3998 06fe 01       		.byte	0x1
 3999 06ff 7901     		.2byte	0x179
 4000 0701 AD000000 		.4byte	0xad
 4001 0705 02       		.uleb128 0x2
 4002 0706 91       		.byte	0x91
 4003 0707 77       		.sleb128 -9
 4004 0708 14       		.uleb128 0x14
 4005 0709 36000000 		.4byte	.LBB8
 4006 070d 48000000 		.4byte	.LBE8-.LBB8
 4007 0711 1C       		.uleb128 0x1c
 4008 0712 BF040000 		.4byte	.LASF108
 4009 0716 01       		.byte	0x1
 4010 0717 8101     		.2byte	0x181
 4011 0719 22070000 		.4byte	0x722
 4012 071d 02       		.uleb128 0x2
 4013 071e 91       		.byte	0x91
 4014 071f 6C       		.sleb128 -20
 4015 0720 00       		.byte	0
 4016 0721 00       		.byte	0
 4017 0722 08       		.uleb128 0x8
 4018 0723 F7000000 		.4byte	0xf7
 4019 0727 32070000 		.4byte	0x732
 4020 072b 09       		.uleb128 0x9
 4021 072c 05010000 		.4byte	0x105
 4022 0730 09       		.byte	0x9
 4023 0731 00       		.byte	0
 4024 0732 1D       		.uleb128 0x1d
 4025 0733 0C020000 		.4byte	.LASF109
 4026 0737 01       		.byte	0x1
 4027 0738 9301     		.2byte	0x193
 4028 073a 00000000 		.4byte	.LFB77
 4029 073e 1C000000 		.4byte	.LFE77-.LFB77
 4030 0742 01       		.uleb128 0x1
 4031 0743 9C       		.byte	0x9c
 4032 0744 1E       		.uleb128 0x1e
 4033 0745 A5070000 		.4byte	.LASF111
 4034 0749 01       		.byte	0x1
 4035 074a A301     		.2byte	0x1a3
 4036 074c AD000000 		.4byte	0xad
 4037 0750 00000000 		.4byte	.LFB78
 4038 0754 28000000 		.4byte	.LFE78-.LFB78
 4039 0758 01       		.uleb128 0x1
 4040 0759 9C       		.byte	0x9c
 4041 075a 1F       		.uleb128 0x1f
 4042 075b E3030000 		.4byte	.LASF114
 4043 075f 01       		.byte	0x1
 4044 0760 AE01     		.2byte	0x1ae
 4045 0762 00000000 		.4byte	.LFB79
 4046 0766 84000000 		.4byte	.LFE79-.LFB79
 4047 076a 01       		.uleb128 0x1
 4048 076b 9C       		.byte	0x9c
 4049 076c 80070000 		.4byte	0x780
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 93


 4050 0770 1C       		.uleb128 0x1c
 4051 0771 A8050000 		.4byte	.LASF112
 4052 0775 01       		.byte	0x1
 4053 0776 BB01     		.2byte	0x1bb
 4054 0778 7E000000 		.4byte	0x7e
 4055 077c 02       		.uleb128 0x2
 4056 077d 91       		.byte	0x91
 4057 077e 74       		.sleb128 -12
 4058 077f 00       		.byte	0
 4059 0780 20       		.uleb128 0x20
 4060 0781 5C030000 		.4byte	.LASF113
 4061 0785 01       		.byte	0x1
 4062 0786 CD01     		.2byte	0x1cd
 4063 0788 00000000 		.4byte	.LFB80
 4064 078c 3C000000 		.4byte	.LFE80-.LFB80
 4065 0790 01       		.uleb128 0x1
 4066 0791 9C       		.byte	0x9c
 4067 0792 1F       		.uleb128 0x1f
 4068 0793 2E080000 		.4byte	.LASF115
 4069 0797 01       		.byte	0x1
 4070 0798 DA01     		.2byte	0x1da
 4071 079a 00000000 		.4byte	.LFB81
 4072 079e CA030000 		.4byte	.LFE81-.LFB81
 4073 07a2 01       		.uleb128 0x1
 4074 07a3 9C       		.byte	0x9c
 4075 07a4 9F080000 		.4byte	0x89f
 4076 07a8 1C       		.uleb128 0x1c
 4077 07a9 64060000 		.4byte	.LASF116
 4078 07ad 01       		.byte	0x1
 4079 07ae DD01     		.2byte	0x1dd
 4080 07b0 22070000 		.4byte	0x722
 4081 07b4 02       		.uleb128 0x2
 4082 07b5 91       		.byte	0x91
 4083 07b6 64       		.sleb128 -28
 4084 07b7 1C       		.uleb128 0x1c
 4085 07b8 C4020000 		.4byte	.LASF117
 4086 07bc 01       		.byte	0x1
 4087 07bd DE01     		.2byte	0x1de
 4088 07bf 22070000 		.4byte	0x722
 4089 07c3 02       		.uleb128 0x2
 4090 07c4 91       		.byte	0x91
 4091 07c5 58       		.sleb128 -40
 4092 07c6 1C       		.uleb128 0x1c
 4093 07c7 51080000 		.4byte	.LASF118
 4094 07cb 01       		.byte	0x1
 4095 07cc DF01     		.2byte	0x1df
 4096 07ce 22070000 		.4byte	0x722
 4097 07d2 02       		.uleb128 0x2
 4098 07d3 91       		.byte	0x91
 4099 07d4 4C       		.sleb128 -52
 4100 07d5 1C       		.uleb128 0x1c
 4101 07d6 F9050000 		.4byte	.LASF119
 4102 07da 01       		.byte	0x1
 4103 07db E001     		.2byte	0x1e0
 4104 07dd 22070000 		.4byte	0x722
 4105 07e1 02       		.uleb128 0x2
 4106 07e2 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 94


 4107 07e3 40       		.sleb128 -64
 4108 07e4 1C       		.uleb128 0x1c
 4109 07e5 4F030000 		.4byte	.LASF120
 4110 07e9 01       		.byte	0x1
 4111 07ea E101     		.2byte	0x1e1
 4112 07ec 22070000 		.4byte	0x722
 4113 07f0 03       		.uleb128 0x3
 4114 07f1 91       		.byte	0x91
 4115 07f2 B47F     		.sleb128 -76
 4116 07f4 1C       		.uleb128 0x1c
 4117 07f5 F8070000 		.4byte	.LASF121
 4118 07f9 01       		.byte	0x1
 4119 07fa E401     		.2byte	0x1e4
 4120 07fc 4D040000 		.4byte	0x44d
 4121 0800 03       		.uleb128 0x3
 4122 0801 91       		.byte	0x91
 4123 0802 D07E     		.sleb128 -176
 4124 0804 1C       		.uleb128 0x1c
 4125 0805 28030000 		.4byte	.LASF122
 4126 0809 01       		.byte	0x1
 4127 080a E701     		.2byte	0x1e7
 4128 080c 4D040000 		.4byte	0x44d
 4129 0810 03       		.uleb128 0x3
 4130 0811 91       		.byte	0x91
 4131 0812 EC7D     		.sleb128 -276
 4132 0814 1C       		.uleb128 0x1c
 4133 0815 A1020000 		.4byte	.LASF59
 4134 0819 01       		.byte	0x1
 4135 081a FF01     		.2byte	0x1ff
 4136 081c 7E000000 		.4byte	0x7e
 4137 0820 03       		.uleb128 0x3
 4138 0821 91       		.byte	0x91
 4139 0822 E87D     		.sleb128 -280
 4140 0824 1C       		.uleb128 0x1c
 4141 0825 07060000 		.4byte	.LASF60
 4142 0829 01       		.byte	0x1
 4143 082a FF01     		.2byte	0x1ff
 4144 082c 7E000000 		.4byte	0x7e
 4145 0830 03       		.uleb128 0x3
 4146 0831 91       		.byte	0x91
 4147 0832 E47D     		.sleb128 -284
 4148 0834 1C       		.uleb128 0x1c
 4149 0835 4E010000 		.4byte	.LASF123
 4150 0839 01       		.byte	0x1
 4151 083a FF01     		.2byte	0x1ff
 4152 083c 7E000000 		.4byte	0x7e
 4153 0840 03       		.uleb128 0x3
 4154 0841 91       		.byte	0x91
 4155 0842 E07D     		.sleb128 -288
 4156 0844 1C       		.uleb128 0x1c
 4157 0845 0D050000 		.4byte	.LASF124
 4158 0849 01       		.byte	0x1
 4159 084a FF01     		.2byte	0x1ff
 4160 084c 7E000000 		.4byte	0x7e
 4161 0850 03       		.uleb128 0x3
 4162 0851 91       		.byte	0x91
 4163 0852 DC7D     		.sleb128 -292
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 95


 4164 0854 1C       		.uleb128 0x1c
 4165 0855 C4040000 		.4byte	.LASF125
 4166 0859 01       		.byte	0x1
 4167 085a FF01     		.2byte	0x1ff
 4168 085c 7E000000 		.4byte	0x7e
 4169 0860 03       		.uleb128 0x3
 4170 0861 91       		.byte	0x91
 4171 0862 D87D     		.sleb128 -296
 4172 0864 1C       		.uleb128 0x1c
 4173 0865 22090000 		.4byte	.LASF126
 4174 0869 01       		.byte	0x1
 4175 086a FF01     		.2byte	0x1ff
 4176 086c 7E000000 		.4byte	0x7e
 4177 0870 03       		.uleb128 0x3
 4178 0871 91       		.byte	0x91
 4179 0872 D47D     		.sleb128 -300
 4180 0874 1C       		.uleb128 0x1c
 4181 0875 7C020000 		.4byte	.LASF127
 4182 0879 01       		.byte	0x1
 4183 087a FF01     		.2byte	0x1ff
 4184 087c 7E000000 		.4byte	0x7e
 4185 0880 03       		.uleb128 0x3
 4186 0881 91       		.byte	0x91
 4187 0882 D07D     		.sleb128 -304
 4188 0884 14       		.uleb128 0x14
 4189 0885 22020000 		.4byte	.LBB9
 4190 0889 24010000 		.4byte	.LBE9-.LBB9
 4191 088d 1C       		.uleb128 0x1c
 4192 088e 33020000 		.4byte	.LASF128
 4193 0892 01       		.byte	0x1
 4194 0893 2902     		.2byte	0x229
 4195 0895 4D040000 		.4byte	0x44d
 4196 0899 03       		.uleb128 0x3
 4197 089a 91       		.byte	0x91
 4198 089b EC7C     		.sleb128 -404
 4199 089d 00       		.byte	0
 4200 089e 00       		.byte	0
 4201 089f 1F       		.uleb128 0x1f
 4202 08a0 AB020000 		.4byte	.LASF129
 4203 08a4 01       		.byte	0x1
 4204 08a5 5102     		.2byte	0x251
 4205 08a7 00000000 		.4byte	.LFB82
 4206 08ab 68010000 		.4byte	.LFE82-.LFB82
 4207 08af 01       		.uleb128 0x1
 4208 08b0 9C       		.byte	0x9c
 4209 08b1 CF080000 		.4byte	0x8cf
 4210 08b5 14       		.uleb128 0x14
 4211 08b6 DA000000 		.4byte	.LBB10
 4212 08ba 38000000 		.4byte	.LBE10-.LBB10
 4213 08be 1C       		.uleb128 0x1c
 4214 08bf 5A070000 		.4byte	.LASF130
 4215 08c3 01       		.byte	0x1
 4216 08c4 7F02     		.2byte	0x27f
 4217 08c6 22070000 		.4byte	0x722
 4218 08ca 02       		.uleb128 0x2
 4219 08cb 91       		.byte	0x91
 4220 08cc 6C       		.sleb128 -20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 96


 4221 08cd 00       		.byte	0
 4222 08ce 00       		.byte	0
 4223 08cf 1B       		.uleb128 0x1b
 4224 08d0 0A030000 		.4byte	.LASF131
 4225 08d4 01       		.byte	0x1
 4226 08d5 9202     		.2byte	0x292
 4227 08d7 57000000 		.4byte	0x57
 4228 08db 00000000 		.4byte	.LFB83
 4229 08df 44010000 		.4byte	.LFE83-.LFB83
 4230 08e3 01       		.uleb128 0x1
 4231 08e4 9C       		.byte	0x9c
 4232 08e5 8B090000 		.4byte	0x98b
 4233 08e9 1C       		.uleb128 0x1c
 4234 08ea 99040000 		.4byte	.LASF132
 4235 08ee 01       		.byte	0x1
 4236 08ef 9D02     		.2byte	0x29d
 4237 08f1 57000000 		.4byte	0x57
 4238 08f5 02       		.uleb128 0x2
 4239 08f6 91       		.byte	0x91
 4240 08f7 74       		.sleb128 -12
 4241 08f8 14       		.uleb128 0x14
 4242 08f9 30000000 		.4byte	.LBB11
 4243 08fd DE000000 		.4byte	.LBE11-.LBB11
 4244 0901 1C       		.uleb128 0x1c
 4245 0902 CF020000 		.4byte	.LASF99
 4246 0906 01       		.byte	0x1
 4247 0907 A202     		.2byte	0x2a2
 4248 0909 8B090000 		.4byte	0x98b
 4249 090d 02       		.uleb128 0x2
 4250 090e 91       		.byte	0x91
 4251 090f 54       		.sleb128 -44
 4252 0910 1A       		.uleb128 0x1a
 4253 0911 7400     		.ascii	"t\000"
 4254 0913 01       		.byte	0x1
 4255 0914 A802     		.2byte	0x2a8
 4256 0916 2D010000 		.4byte	0x12d
 4257 091a 03       		.uleb128 0x3
 4258 091b 91       		.byte	0x91
 4259 091c 947F     		.sleb128 -108
 4260 091e 1C       		.uleb128 0x1c
 4261 091f 2E020000 		.4byte	.LASF133
 4262 0923 01       		.byte	0x1
 4263 0924 AB02     		.2byte	0x2ab
 4264 0926 7E000000 		.4byte	0x7e
 4265 092a 02       		.uleb128 0x2
 4266 092b 91       		.byte	0x91
 4267 092c 50       		.sleb128 -48
 4268 092d 1C       		.uleb128 0x1c
 4269 092e 3B050000 		.4byte	.LASF134
 4270 0932 01       		.byte	0x1
 4271 0933 AB02     		.2byte	0x2ab
 4272 0935 7E000000 		.4byte	0x7e
 4273 0939 02       		.uleb128 0x2
 4274 093a 91       		.byte	0x91
 4275 093b 4C       		.sleb128 -52
 4276 093c 1A       		.uleb128 0x1a
 4277 093d 64617900 		.ascii	"day\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 97


 4278 0941 01       		.byte	0x1
 4279 0942 AB02     		.2byte	0x2ab
 4280 0944 7E000000 		.4byte	0x7e
 4281 0948 02       		.uleb128 0x2
 4282 0949 91       		.byte	0x91
 4283 094a 48       		.sleb128 -56
 4284 094b 1C       		.uleb128 0x1c
 4285 094c C3050000 		.4byte	.LASF135
 4286 0950 01       		.byte	0x1
 4287 0951 AB02     		.2byte	0x2ab
 4288 0953 7E000000 		.4byte	0x7e
 4289 0957 02       		.uleb128 0x2
 4290 0958 91       		.byte	0x91
 4291 0959 44       		.sleb128 -60
 4292 095a 1C       		.uleb128 0x1c
 4293 095b 17080000 		.4byte	.LASF136
 4294 095f 01       		.byte	0x1
 4295 0960 AB02     		.2byte	0x2ab
 4296 0962 7E000000 		.4byte	0x7e
 4297 0966 02       		.uleb128 0x2
 4298 0967 91       		.byte	0x91
 4299 0968 40       		.sleb128 -64
 4300 0969 1C       		.uleb128 0x1c
 4301 096a 27020000 		.4byte	.LASF137
 4302 096e 01       		.byte	0x1
 4303 096f AB02     		.2byte	0x2ab
 4304 0971 7E000000 		.4byte	0x7e
 4305 0975 03       		.uleb128 0x3
 4306 0976 91       		.byte	0x91
 4307 0977 BC7F     		.sleb128 -68
 4308 0979 1C       		.uleb128 0x1c
 4309 097a 00000000 		.4byte	.LASF138
 4310 097e 01       		.byte	0x1
 4311 097f AB02     		.2byte	0x2ab
 4312 0981 7E000000 		.4byte	0x7e
 4313 0985 03       		.uleb128 0x3
 4314 0986 91       		.byte	0x91
 4315 0987 B87F     		.sleb128 -72
 4316 0989 00       		.byte	0
 4317 098a 00       		.byte	0
 4318 098b 08       		.uleb128 0x8
 4319 098c F7000000 		.4byte	0xf7
 4320 0990 9B090000 		.4byte	0x99b
 4321 0994 09       		.uleb128 0x9
 4322 0995 05010000 		.4byte	0x105
 4323 0999 1D       		.byte	0x1d
 4324 099a 00       		.byte	0
 4325 099b 21       		.uleb128 0x21
 4326 099c 5D020000 		.4byte	.LASF139
 4327 09a0 01       		.byte	0x1
 4328 09a1 CB02     		.2byte	0x2cb
 4329 09a3 AD000000 		.4byte	0xad
 4330 09a7 00000000 		.4byte	.LFB84
 4331 09ab 14000000 		.4byte	.LFE84-.LFB84
 4332 09af 01       		.uleb128 0x1
 4333 09b0 9C       		.byte	0x9c
 4334 09b1 1D       		.uleb128 0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 98


 4335 09b2 43030000 		.4byte	.LASF140
 4336 09b6 01       		.byte	0x1
 4337 09b7 D002     		.2byte	0x2d0
 4338 09b9 00000000 		.4byte	.LFB85
 4339 09bd 1A000000 		.4byte	.LFE85-.LFB85
 4340 09c1 01       		.uleb128 0x1
 4341 09c2 9C       		.byte	0x9c
 4342 09c3 1D       		.uleb128 0x1d
 4343 09c4 2A010000 		.4byte	.LASF141
 4344 09c8 01       		.byte	0x1
 4345 09c9 DD02     		.2byte	0x2dd
 4346 09cb 00000000 		.4byte	.LFB86
 4347 09cf 2A000000 		.4byte	.LFE86-.LFB86
 4348 09d3 01       		.uleb128 0x1
 4349 09d4 9C       		.byte	0x9c
 4350 09d5 1B       		.uleb128 0x1b
 4351 09d6 75060000 		.4byte	.LASF142
 4352 09da 01       		.byte	0x1
 4353 09db F002     		.2byte	0x2f0
 4354 09dd 37030000 		.4byte	0x337
 4355 09e1 00000000 		.4byte	.LFB87
 4356 09e5 7C020000 		.4byte	.LFE87-.LFB87
 4357 09e9 01       		.uleb128 0x1
 4358 09ea 9C       		.byte	0x9c
 4359 09eb 7E0A0000 		.4byte	0xa7e
 4360 09ef 1A       		.uleb128 0x1a
 4361 09f0 67707300 		.ascii	"gps\000"
 4362 09f4 01       		.byte	0x1
 4363 09f5 F102     		.2byte	0x2f1
 4364 09f7 37030000 		.4byte	0x337
 4365 09fb 02       		.uleb128 0x2
 4366 09fc 91       		.byte	0x91
 4367 09fd 4C       		.sleb128 -52
 4368 09fe 1C       		.uleb128 0x1c
 4369 09ff E5080000 		.4byte	.LASF143
 4370 0a03 01       		.byte	0x1
 4371 0a04 FD02     		.2byte	0x2fd
 4372 0a06 57000000 		.4byte	0x57
 4373 0a0a 02       		.uleb128 0x2
 4374 0a0b 91       		.byte	0x91
 4375 0a0c 68       		.sleb128 -24
 4376 0a0d 1C       		.uleb128 0x1c
 4377 0a0e D5070000 		.4byte	.LASF144
 4378 0a12 01       		.byte	0x1
 4379 0a13 2403     		.2byte	0x324
 4380 0a15 AD000000 		.4byte	0xad
 4381 0a19 02       		.uleb128 0x2
 4382 0a1a 91       		.byte	0x91
 4383 0a1b 67       		.sleb128 -25
 4384 0a1c 1A       		.uleb128 0x1a
 4385 0a1d 6C617400 		.ascii	"lat\000"
 4386 0a21 01       		.byte	0x1
 4387 0a22 3003     		.2byte	0x330
 4388 0a24 E9000000 		.4byte	0xe9
 4389 0a28 02       		.uleb128 0x2
 4390 0a29 91       		.byte	0x91
 4391 0a2a 48       		.sleb128 -56
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 99


 4392 0a2b 1A       		.uleb128 0x1a
 4393 0a2c 6C6F6E00 		.ascii	"lon\000"
 4394 0a30 01       		.byte	0x1
 4395 0a31 3103     		.2byte	0x331
 4396 0a33 E9000000 		.4byte	0xe9
 4397 0a37 02       		.uleb128 0x2
 4398 0a38 91       		.byte	0x91
 4399 0a39 44       		.sleb128 -60
 4400 0a3a 1A       		.uleb128 0x1a
 4401 0a3b 616C7400 		.ascii	"alt\000"
 4402 0a3f 01       		.byte	0x1
 4403 0a40 3203     		.2byte	0x332
 4404 0a42 E9000000 		.4byte	0xe9
 4405 0a46 02       		.uleb128 0x2
 4406 0a47 91       		.byte	0x91
 4407 0a48 40       		.sleb128 -64
 4408 0a49 1A       		.uleb128 0x1a
 4409 0a4a 733100   		.ascii	"s1\000"
 4410 0a4d 01       		.byte	0x1
 4411 0a4e 3603     		.2byte	0x336
 4412 0a50 0C010000 		.4byte	0x10c
 4413 0a54 02       		.uleb128 0x2
 4414 0a55 91       		.byte	0x91
 4415 0a56 60       		.sleb128 -32
 4416 0a57 1C       		.uleb128 0x1c
 4417 0a58 A8050000 		.4byte	.LASF112
 4418 0a5c 01       		.byte	0x1
 4419 0a5d 3903     		.2byte	0x339
 4420 0a5f 7E000000 		.4byte	0x7e
 4421 0a63 02       		.uleb128 0x2
 4422 0a64 91       		.byte	0x91
 4423 0a65 5C       		.sleb128 -36
 4424 0a66 14       		.uleb128 0x14
 4425 0a67 B4000000 		.4byte	.LBB12
 4426 0a6b 38000000 		.4byte	.LBE12-.LBB12
 4427 0a6f 1A       		.uleb128 0x1a
 4428 0a70 6900     		.ascii	"i\000"
 4429 0a72 01       		.byte	0x1
 4430 0a73 2503     		.2byte	0x325
 4431 0a75 B9000000 		.4byte	0xb9
 4432 0a79 02       		.uleb128 0x2
 4433 0a7a 91       		.byte	0x91
 4434 0a7b 6E       		.sleb128 -18
 4435 0a7c 00       		.byte	0
 4436 0a7d 00       		.byte	0
 4437 0a7e 22       		.uleb128 0x22
 4438 0a7f 78010000 		.4byte	.LASF145
 4439 0a83 0A       		.byte	0xa
 4440 0a84 1207     		.2byte	0x712
 4441 0a86 8A0A0000 		.4byte	0xa8a
 4442 0a8a 0F       		.uleb128 0xf
 4443 0a8b 97000000 		.4byte	0x97
 4444 0a8f 23       		.uleb128 0x23
 4445 0a90 60000000 		.4byte	.LASF146
 4446 0a94 07       		.byte	0x7
 4447 0a95 11       		.byte	0x11
 4448 0a96 9F030000 		.4byte	0x39f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 100


 4449 0a9a 05       		.uleb128 0x5
 4450 0a9b 03       		.byte	0x3
 4451 0a9c 00000000 		.4byte	buffer_overflow
 4452 0aa0 23       		.uleb128 0x23
 4453 0aa1 19050000 		.4byte	.LASF147
 4454 0aa5 07       		.byte	0x7
 4455 0aa6 22       		.byte	0x22
 4456 0aa7 B9000000 		.4byte	0xb9
 4457 0aab 05       		.uleb128 0x5
 4458 0aac 03       		.byte	0x3
 4459 0aad 00000000 		.4byte	dataPointsInStack
 4460 0ab1 23       		.uleb128 0x23
 4461 0ab2 66080000 		.4byte	.LASF148
 4462 0ab6 07       		.byte	0x7
 4463 0ab7 23       		.byte	0x23
 4464 0ab8 B9000000 		.4byte	0xb9
 4465 0abc 05       		.uleb128 0x5
 4466 0abd 03       		.byte	0x3
 4467 0abe 00000000 		.4byte	dataPointsInStackDesired
 4468 0ac2 08       		.uleb128 0x8
 4469 0ac3 3B020000 		.4byte	0x23b
 4470 0ac7 D20A0000 		.4byte	0xad2
 4471 0acb 09       		.uleb128 0x9
 4472 0acc 05010000 		.4byte	0x105
 4473 0ad0 95       		.byte	0x95
 4474 0ad1 00       		.byte	0
 4475 0ad2 23       		.uleb128 0x23
 4476 0ad3 11040000 		.4byte	.LASF149
 4477 0ad7 07       		.byte	0x7
 4478 0ad8 24       		.byte	0x24
 4479 0ad9 C20A0000 		.4byte	0xac2
 4480 0add 05       		.uleb128 0x5
 4481 0ade 03       		.byte	0x3
 4482 0adf 00000000 		.4byte	data
 4483 0ae3 23       		.uleb128 0x23
 4484 0ae4 5A010000 		.4byte	.LASF150
 4485 0ae8 08       		.byte	0x8
 4486 0ae9 20       		.byte	0x20
 4487 0aea AD000000 		.4byte	0xad
 4488 0aee 05       		.uleb128 0x5
 4489 0aef 03       		.byte	0x3
 4490 0af0 00000000 		.4byte	modem_state
 4491 0af4 23       		.uleb128 0x23
 4492 0af5 BE070000 		.4byte	.LASF151
 4493 0af9 08       		.byte	0x8
 4494 0afa 6A       		.byte	0x6a
 4495 0afb DD000000 		.4byte	0xdd
 4496 0aff 05       		.uleb128 0x5
 4497 0b00 03       		.byte	0x3
 4498 0b01 00000000 		.4byte	modem_start_time_stamp
 4499 0b05 23       		.uleb128 0x23
 4500 0b06 27040000 		.4byte	.LASF73
 4501 0b0a 08       		.byte	0x8
 4502 0b0b 6B       		.byte	0x6b
 4503 0b0c 73020000 		.4byte	0x273
 4504 0b10 05       		.uleb128 0x5
 4505 0b11 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 101


 4506 0b12 00000000 		.4byte	modem_info
 4507 0b16 23       		.uleb128 0x23
 4508 0b17 97010000 		.4byte	.LASF152
 4509 0b1b 08       		.byte	0x8
 4510 0b1c 6C       		.byte	0x6c
 4511 0b1d E7020000 		.4byte	0x2e7
 4512 0b21 05       		.uleb128 0x5
 4513 0b22 03       		.byte	0x3
 4514 0b23 00000000 		.4byte	modem_stats
 4515 0b27 23       		.uleb128 0x23
 4516 0b28 AE050000 		.4byte	.LASF153
 4517 0b2c 08       		.byte	0x8
 4518 0b2d 6D       		.byte	0x6d
 4519 0b2e A6030000 		.4byte	0x3a6
 4520 0b32 05       		.uleb128 0x5
 4521 0b33 03       		.byte	0x3
 4522 0b34 00000000 		.4byte	updatable_parameters
 4523 0b38 23       		.uleb128 0x23
 4524 0b39 15070000 		.4byte	.LASF154
 4525 0b3d 0B       		.byte	0xb
 4526 0b3e 25       		.byte	0x25
 4527 0b3f 4D040000 		.4byte	0x44d
 4528 0b43 05       		.uleb128 0x5
 4529 0b44 03       		.byte	0x3
 4530 0b45 00000000 		.4byte	level_sensor_inbox
 4531 0b49 23       		.uleb128 0x23
 4532 0b4a 14090000 		.4byte	.LASF155
 4533 0b4e 0C       		.byte	0xc
 4534 0b4f 12       		.byte	0x12
 4535 0b50 4D040000 		.4byte	0x44d
 4536 0b54 05       		.uleb128 0x5
 4537 0b55 03       		.byte	0x3
 4538 0b56 00000000 		.4byte	app_led_inbox
 4539 0b5a 08       		.uleb128 0x8
 4540 0b5b F7000000 		.4byte	0xf7
 4541 0b5f 6B0B0000 		.4byte	0xb6b
 4542 0b63 24       		.uleb128 0x24
 4543 0b64 05010000 		.4byte	0x105
 4544 0b68 0F27     		.2byte	0x270f
 4545 0b6a 00       		.byte	0
 4546 0b6b 23       		.uleb128 0x23
 4547 0b6c EF080000 		.4byte	.LASF156
 4548 0b70 09       		.byte	0x9
 4549 0b71 18       		.byte	0x18
 4550 0b72 5A0B0000 		.4byte	0xb5a
 4551 0b76 05       		.uleb128 0x5
 4552 0b77 03       		.byte	0x3
 4553 0b78 00000000 		.4byte	http_request
 4554 0b7c 23       		.uleb128 0x23
 4555 0b7d 02020000 		.4byte	.LASF157
 4556 0b81 09       		.byte	0x9
 4557 0b82 19       		.byte	0x19
 4558 0b83 5A0B0000 		.4byte	0xb5a
 4559 0b87 05       		.uleb128 0x5
 4560 0b88 03       		.byte	0x3
 4561 0b89 00000000 		.4byte	http_body
 4562 0b8d 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 102


 4563 0b8e F7000000 		.4byte	0xf7
 4564 0b92 9D0B0000 		.4byte	0xb9d
 4565 0b96 09       		.uleb128 0x9
 4566 0b97 05010000 		.4byte	0x105
 4567 0b9b C7       		.byte	0xc7
 4568 0b9c 00       		.byte	0
 4569 0b9d 23       		.uleb128 0x23
 4570 0b9e 68070000 		.4byte	.LASF158
 4571 0ba2 09       		.byte	0x9
 4572 0ba3 1A       		.byte	0x1a
 4573 0ba4 8D0B0000 		.4byte	0xb8d
 4574 0ba8 05       		.uleb128 0x5
 4575 0ba9 03       		.byte	0x3
 4576 0baa 00000000 		.4byte	http_route
 4577 0bae 23       		.uleb128 0x23
 4578 0baf 96060000 		.4byte	.LASF159
 4579 0bb3 09       		.byte	0x9
 4580 0bb4 41       		.byte	0x41
 4581 0bb5 21040000 		.4byte	0x421
 4582 0bb9 05       		.uleb128 0x5
 4583 0bba 03       		.byte	0x3
 4584 0bbb 00000000 		.4byte	system_info
 4585 0bbf 23       		.uleb128 0x23
 4586 0bc0 3F060000 		.4byte	.LASF160
 4587 0bc4 09       		.byte	0x9
 4588 0bc5 53       		.byte	0x53
 4589 0bc6 5D040000 		.4byte	0x45d
 4590 0bca 05       		.uleb128 0x5
 4591 0bcb 03       		.byte	0x3
 4592 0bcc 00000000 		.4byte	system_settings
 4593 0bd0 23       		.uleb128 0x23
 4594 0bd1 6B010000 		.4byte	.LASF161
 4595 0bd5 09       		.byte	0x9
 4596 0bd6 6F       		.byte	0x6f
 4597 0bd7 EA030000 		.4byte	0x3ea
 4598 0bdb 05       		.uleb128 0x5
 4599 0bdc 03       		.byte	0x3
 4600 0bdd 00000000 		.4byte	alarmMeasure
 4601 0be1 23       		.uleb128 0x23
 4602 0be2 D1010000 		.4byte	.LASF162
 4603 0be6 09       		.byte	0x9
 4604 0be7 70       		.byte	0x70
 4605 0be8 AD000000 		.4byte	0xad
 4606 0bec 05       		.uleb128 0x5
 4607 0bed 03       		.byte	0x3
 4608 0bee 00000000 		.4byte	timeToMeasure
 4609 0bf2 23       		.uleb128 0x23
 4610 0bf3 84030000 		.4byte	.LASF163
 4611 0bf7 09       		.byte	0x9
 4612 0bf8 71       		.byte	0x71
 4613 0bf9 EA030000 		.4byte	0x3ea
 4614 0bfd 05       		.uleb128 0x5
 4615 0bfe 03       		.byte	0x3
 4616 0bff 00000000 		.4byte	alarmSync
 4617 0c03 23       		.uleb128 0x23
 4618 0c04 F7010000 		.4byte	.LASF164
 4619 0c08 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 103


 4620 0c09 72       		.byte	0x72
 4621 0c0a AD000000 		.4byte	0xad
 4622 0c0e 05       		.uleb128 0x5
 4623 0c0f 03       		.byte	0x3
 4624 0c10 00000000 		.4byte	timeToSync
 4625 0c14 23       		.uleb128 0x23
 4626 0c15 86050000 		.4byte	.LASF165
 4627 0c19 09       		.byte	0x9
 4628 0c1a 73       		.byte	0x73
 4629 0c1b AD000000 		.4byte	0xad
 4630 0c1f 05       		.uleb128 0x5
 4631 0c20 03       		.byte	0x3
 4632 0c21 00000000 		.4byte	timeToSycnRemoteParams
 4633 0c25 25       		.uleb128 0x25
 4634 0c26 68657900 		.ascii	"hey\000"
 4635 0c2a 09       		.byte	0x9
 4636 0c2b 74       		.byte	0x74
 4637 0c2c AD000000 		.4byte	0xad
 4638 0c30 05       		.uleb128 0x5
 4639 0c31 03       		.byte	0x3
 4640 0c32 00000000 		.4byte	hey
 4641 0c36 23       		.uleb128 0x23
 4642 0c37 AE040000 		.4byte	.LASF166
 4643 0c3b 09       		.byte	0x9
 4644 0c3c 77       		.byte	0x77
 4645 0c3d EA030000 		.4byte	0x3ea
 4646 0c41 05       		.uleb128 0x5
 4647 0c42 03       		.byte	0x3
 4648 0c43 00000000 		.4byte	alarmAppLED
 4649 0c47 23       		.uleb128 0x23
 4650 0c48 8E020000 		.4byte	.LASF167
 4651 0c4c 09       		.byte	0x9
 4652 0c4d 78       		.byte	0x78
 4653 0c4e AD000000 		.4byte	0xad
 4654 0c52 05       		.uleb128 0x5
 4655 0c53 03       		.byte	0x3
 4656 0c54 00000000 		.4byte	timeToAppLED
 4657 0c58 23       		.uleb128 0x23
 4658 0c59 D3060000 		.4byte	.LASF168
 4659 0c5d 09       		.byte	0x9
 4660 0c5e 7A       		.byte	0x7a
 4661 0c5f EA030000 		.4byte	0x3ea
 4662 0c63 05       		.uleb128 0x5
 4663 0c64 03       		.byte	0x3
 4664 0c65 00000000 		.4byte	alarmLevelSensor
 4665 0c69 23       		.uleb128 0x23
 4666 0c6a 85010000 		.4byte	.LASF169
 4667 0c6e 09       		.byte	0x9
 4668 0c6f 7B       		.byte	0x7b
 4669 0c70 AD000000 		.4byte	0xad
 4670 0c74 05       		.uleb128 0x5
 4671 0c75 03       		.byte	0x3
 4672 0c76 00000000 		.4byte	timetoLevelSensor
 4673 0c7a 08       		.uleb128 0x8
 4674 0c7b F7000000 		.4byte	0xf7
 4675 0c7f 8B0C0000 		.4byte	0xc8b
 4676 0c83 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 104


 4677 0c84 05010000 		.4byte	0x105
 4678 0c88 FF03     		.2byte	0x3ff
 4679 0c8a 00       		.byte	0
 4680 0c8b 23       		.uleb128 0x23
 4681 0c8c 5E050000 		.4byte	.LASF170
 4682 0c90 01       		.byte	0x1
 4683 0c91 05       		.byte	0x5
 4684 0c92 7A0C0000 		.4byte	0xc7a
 4685 0c96 05       		.uleb128 0x5
 4686 0c97 03       		.byte	0x3
 4687 0c98 00000000 		.4byte	uart_received_string
 4688 0c9c 23       		.uleb128 0x23
 4689 0c9d 86070000 		.4byte	.LASF171
 4690 0ca1 01       		.byte	0x1
 4691 0ca2 06       		.byte	0x6
 4692 0ca3 D1000000 		.4byte	0xd1
 4693 0ca7 05       		.uleb128 0x5
 4694 0ca8 03       		.byte	0x3
 4695 0ca9 00000000 		.4byte	uart_string_index
 4696 0cad 00       		.byte	0
 4697              		.section	.debug_abbrev,"",%progbits
 4698              	.Ldebug_abbrev0:
 4699 0000 01       		.uleb128 0x1
 4700 0001 11       		.uleb128 0x11
 4701 0002 01       		.byte	0x1
 4702 0003 25       		.uleb128 0x25
 4703 0004 0E       		.uleb128 0xe
 4704 0005 13       		.uleb128 0x13
 4705 0006 0B       		.uleb128 0xb
 4706 0007 03       		.uleb128 0x3
 4707 0008 0E       		.uleb128 0xe
 4708 0009 1B       		.uleb128 0x1b
 4709 000a 0E       		.uleb128 0xe
 4710 000b 55       		.uleb128 0x55
 4711 000c 17       		.uleb128 0x17
 4712 000d 11       		.uleb128 0x11
 4713 000e 01       		.uleb128 0x1
 4714 000f 10       		.uleb128 0x10
 4715 0010 17       		.uleb128 0x17
 4716 0011 00       		.byte	0
 4717 0012 00       		.byte	0
 4718 0013 02       		.uleb128 0x2
 4719 0014 24       		.uleb128 0x24
 4720 0015 00       		.byte	0
 4721 0016 0B       		.uleb128 0xb
 4722 0017 0B       		.uleb128 0xb
 4723 0018 3E       		.uleb128 0x3e
 4724 0019 0B       		.uleb128 0xb
 4725 001a 03       		.uleb128 0x3
 4726 001b 0E       		.uleb128 0xe
 4727 001c 00       		.byte	0
 4728 001d 00       		.byte	0
 4729 001e 03       		.uleb128 0x3
 4730 001f 16       		.uleb128 0x16
 4731 0020 00       		.byte	0
 4732 0021 03       		.uleb128 0x3
 4733 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 105


 4734 0023 3A       		.uleb128 0x3a
 4735 0024 0B       		.uleb128 0xb
 4736 0025 3B       		.uleb128 0x3b
 4737 0026 0B       		.uleb128 0xb
 4738 0027 49       		.uleb128 0x49
 4739 0028 13       		.uleb128 0x13
 4740 0029 00       		.byte	0
 4741 002a 00       		.byte	0
 4742 002b 04       		.uleb128 0x4
 4743 002c 24       		.uleb128 0x24
 4744 002d 00       		.byte	0
 4745 002e 0B       		.uleb128 0xb
 4746 002f 0B       		.uleb128 0xb
 4747 0030 3E       		.uleb128 0x3e
 4748 0031 0B       		.uleb128 0xb
 4749 0032 03       		.uleb128 0x3
 4750 0033 08       		.uleb128 0x8
 4751 0034 00       		.byte	0
 4752 0035 00       		.byte	0
 4753 0036 05       		.uleb128 0x5
 4754 0037 16       		.uleb128 0x16
 4755 0038 00       		.byte	0
 4756 0039 03       		.uleb128 0x3
 4757 003a 0E       		.uleb128 0xe
 4758 003b 3A       		.uleb128 0x3a
 4759 003c 0B       		.uleb128 0xb
 4760 003d 3B       		.uleb128 0x3b
 4761 003e 05       		.uleb128 0x5
 4762 003f 49       		.uleb128 0x49
 4763 0040 13       		.uleb128 0x13
 4764 0041 00       		.byte	0
 4765 0042 00       		.byte	0
 4766 0043 06       		.uleb128 0x6
 4767 0044 0F       		.uleb128 0xf
 4768 0045 00       		.byte	0
 4769 0046 0B       		.uleb128 0xb
 4770 0047 0B       		.uleb128 0xb
 4771 0048 49       		.uleb128 0x49
 4772 0049 13       		.uleb128 0x13
 4773 004a 00       		.byte	0
 4774 004b 00       		.byte	0
 4775 004c 07       		.uleb128 0x7
 4776 004d 26       		.uleb128 0x26
 4777 004e 00       		.byte	0
 4778 004f 49       		.uleb128 0x49
 4779 0050 13       		.uleb128 0x13
 4780 0051 00       		.byte	0
 4781 0052 00       		.byte	0
 4782 0053 08       		.uleb128 0x8
 4783 0054 01       		.uleb128 0x1
 4784 0055 01       		.byte	0x1
 4785 0056 49       		.uleb128 0x49
 4786 0057 13       		.uleb128 0x13
 4787 0058 01       		.uleb128 0x1
 4788 0059 13       		.uleb128 0x13
 4789 005a 00       		.byte	0
 4790 005b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 106


 4791 005c 09       		.uleb128 0x9
 4792 005d 21       		.uleb128 0x21
 4793 005e 00       		.byte	0
 4794 005f 49       		.uleb128 0x49
 4795 0060 13       		.uleb128 0x13
 4796 0061 2F       		.uleb128 0x2f
 4797 0062 0B       		.uleb128 0xb
 4798 0063 00       		.byte	0
 4799 0064 00       		.byte	0
 4800 0065 0A       		.uleb128 0xa
 4801 0066 13       		.uleb128 0x13
 4802 0067 01       		.byte	0x1
 4803 0068 03       		.uleb128 0x3
 4804 0069 08       		.uleb128 0x8
 4805 006a 0B       		.uleb128 0xb
 4806 006b 0B       		.uleb128 0xb
 4807 006c 3A       		.uleb128 0x3a
 4808 006d 0B       		.uleb128 0xb
 4809 006e 3B       		.uleb128 0x3b
 4810 006f 0B       		.uleb128 0xb
 4811 0070 01       		.uleb128 0x1
 4812 0071 13       		.uleb128 0x13
 4813 0072 00       		.byte	0
 4814 0073 00       		.byte	0
 4815 0074 0B       		.uleb128 0xb
 4816 0075 0D       		.uleb128 0xd
 4817 0076 00       		.byte	0
 4818 0077 03       		.uleb128 0x3
 4819 0078 0E       		.uleb128 0xe
 4820 0079 3A       		.uleb128 0x3a
 4821 007a 0B       		.uleb128 0xb
 4822 007b 3B       		.uleb128 0x3b
 4823 007c 0B       		.uleb128 0xb
 4824 007d 49       		.uleb128 0x49
 4825 007e 13       		.uleb128 0x13
 4826 007f 38       		.uleb128 0x38
 4827 0080 0B       		.uleb128 0xb
 4828 0081 00       		.byte	0
 4829 0082 00       		.byte	0
 4830 0083 0C       		.uleb128 0xc
 4831 0084 13       		.uleb128 0x13
 4832 0085 01       		.byte	0x1
 4833 0086 0B       		.uleb128 0xb
 4834 0087 05       		.uleb128 0x5
 4835 0088 3A       		.uleb128 0x3a
 4836 0089 0B       		.uleb128 0xb
 4837 008a 3B       		.uleb128 0x3b
 4838 008b 0B       		.uleb128 0xb
 4839 008c 01       		.uleb128 0x1
 4840 008d 13       		.uleb128 0x13
 4841 008e 00       		.byte	0
 4842 008f 00       		.byte	0
 4843 0090 0D       		.uleb128 0xd
 4844 0091 13       		.uleb128 0x13
 4845 0092 01       		.byte	0x1
 4846 0093 0B       		.uleb128 0xb
 4847 0094 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 107


 4848 0095 3A       		.uleb128 0x3a
 4849 0096 0B       		.uleb128 0xb
 4850 0097 3B       		.uleb128 0x3b
 4851 0098 0B       		.uleb128 0xb
 4852 0099 01       		.uleb128 0x1
 4853 009a 13       		.uleb128 0x13
 4854 009b 00       		.byte	0
 4855 009c 00       		.byte	0
 4856 009d 0E       		.uleb128 0xe
 4857 009e 0D       		.uleb128 0xd
 4858 009f 00       		.byte	0
 4859 00a0 03       		.uleb128 0x3
 4860 00a1 08       		.uleb128 0x8
 4861 00a2 3A       		.uleb128 0x3a
 4862 00a3 0B       		.uleb128 0xb
 4863 00a4 3B       		.uleb128 0x3b
 4864 00a5 0B       		.uleb128 0xb
 4865 00a6 49       		.uleb128 0x49
 4866 00a7 13       		.uleb128 0x13
 4867 00a8 38       		.uleb128 0x38
 4868 00a9 0B       		.uleb128 0xb
 4869 00aa 00       		.byte	0
 4870 00ab 00       		.byte	0
 4871 00ac 0F       		.uleb128 0xf
 4872 00ad 35       		.uleb128 0x35
 4873 00ae 00       		.byte	0
 4874 00af 49       		.uleb128 0x49
 4875 00b0 13       		.uleb128 0x13
 4876 00b1 00       		.byte	0
 4877 00b2 00       		.byte	0
 4878 00b3 10       		.uleb128 0x10
 4879 00b4 2E       		.uleb128 0x2e
 4880 00b5 00       		.byte	0
 4881 00b6 3F       		.uleb128 0x3f
 4882 00b7 19       		.uleb128 0x19
 4883 00b8 03       		.uleb128 0x3
 4884 00b9 0E       		.uleb128 0xe
 4885 00ba 3A       		.uleb128 0x3a
 4886 00bb 0B       		.uleb128 0xb
 4887 00bc 3B       		.uleb128 0x3b
 4888 00bd 0B       		.uleb128 0xb
 4889 00be 27       		.uleb128 0x27
 4890 00bf 19       		.uleb128 0x19
 4891 00c0 11       		.uleb128 0x11
 4892 00c1 01       		.uleb128 0x1
 4893 00c2 12       		.uleb128 0x12
 4894 00c3 06       		.uleb128 0x6
 4895 00c4 40       		.uleb128 0x40
 4896 00c5 18       		.uleb128 0x18
 4897 00c6 9642     		.uleb128 0x2116
 4898 00c8 19       		.uleb128 0x19
 4899 00c9 00       		.byte	0
 4900 00ca 00       		.byte	0
 4901 00cb 11       		.uleb128 0x11
 4902 00cc 2E       		.uleb128 0x2e
 4903 00cd 00       		.byte	0
 4904 00ce 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 108


 4905 00cf 19       		.uleb128 0x19
 4906 00d0 03       		.uleb128 0x3
 4907 00d1 0E       		.uleb128 0xe
 4908 00d2 3A       		.uleb128 0x3a
 4909 00d3 0B       		.uleb128 0xb
 4910 00d4 3B       		.uleb128 0x3b
 4911 00d5 0B       		.uleb128 0xb
 4912 00d6 11       		.uleb128 0x11
 4913 00d7 01       		.uleb128 0x1
 4914 00d8 12       		.uleb128 0x12
 4915 00d9 06       		.uleb128 0x6
 4916 00da 40       		.uleb128 0x40
 4917 00db 18       		.uleb128 0x18
 4918 00dc 9642     		.uleb128 0x2116
 4919 00de 19       		.uleb128 0x19
 4920 00df 00       		.byte	0
 4921 00e0 00       		.byte	0
 4922 00e1 12       		.uleb128 0x12
 4923 00e2 2E       		.uleb128 0x2e
 4924 00e3 01       		.byte	0x1
 4925 00e4 3F       		.uleb128 0x3f
 4926 00e5 19       		.uleb128 0x19
 4927 00e6 03       		.uleb128 0x3
 4928 00e7 0E       		.uleb128 0xe
 4929 00e8 3A       		.uleb128 0x3a
 4930 00e9 0B       		.uleb128 0xb
 4931 00ea 3B       		.uleb128 0x3b
 4932 00eb 0B       		.uleb128 0xb
 4933 00ec 49       		.uleb128 0x49
 4934 00ed 13       		.uleb128 0x13
 4935 00ee 11       		.uleb128 0x11
 4936 00ef 01       		.uleb128 0x1
 4937 00f0 12       		.uleb128 0x12
 4938 00f1 06       		.uleb128 0x6
 4939 00f2 40       		.uleb128 0x40
 4940 00f3 18       		.uleb128 0x18
 4941 00f4 9642     		.uleb128 0x2116
 4942 00f6 19       		.uleb128 0x19
 4943 00f7 01       		.uleb128 0x1
 4944 00f8 13       		.uleb128 0x13
 4945 00f9 00       		.byte	0
 4946 00fa 00       		.byte	0
 4947 00fb 13       		.uleb128 0x13
 4948 00fc 34       		.uleb128 0x34
 4949 00fd 00       		.byte	0
 4950 00fe 03       		.uleb128 0x3
 4951 00ff 0E       		.uleb128 0xe
 4952 0100 3A       		.uleb128 0x3a
 4953 0101 0B       		.uleb128 0xb
 4954 0102 3B       		.uleb128 0x3b
 4955 0103 0B       		.uleb128 0xb
 4956 0104 49       		.uleb128 0x49
 4957 0105 13       		.uleb128 0x13
 4958 0106 02       		.uleb128 0x2
 4959 0107 18       		.uleb128 0x18
 4960 0108 00       		.byte	0
 4961 0109 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 109


 4962 010a 14       		.uleb128 0x14
 4963 010b 0B       		.uleb128 0xb
 4964 010c 01       		.byte	0x1
 4965 010d 11       		.uleb128 0x11
 4966 010e 01       		.uleb128 0x1
 4967 010f 12       		.uleb128 0x12
 4968 0110 06       		.uleb128 0x6
 4969 0111 00       		.byte	0
 4970 0112 00       		.byte	0
 4971 0113 15       		.uleb128 0x15
 4972 0114 2E       		.uleb128 0x2e
 4973 0115 01       		.byte	0x1
 4974 0116 3F       		.uleb128 0x3f
 4975 0117 19       		.uleb128 0x19
 4976 0118 03       		.uleb128 0x3
 4977 0119 0E       		.uleb128 0xe
 4978 011a 3A       		.uleb128 0x3a
 4979 011b 0B       		.uleb128 0xb
 4980 011c 3B       		.uleb128 0x3b
 4981 011d 0B       		.uleb128 0xb
 4982 011e 27       		.uleb128 0x27
 4983 011f 19       		.uleb128 0x19
 4984 0120 49       		.uleb128 0x49
 4985 0121 13       		.uleb128 0x13
 4986 0122 11       		.uleb128 0x11
 4987 0123 01       		.uleb128 0x1
 4988 0124 12       		.uleb128 0x12
 4989 0125 06       		.uleb128 0x6
 4990 0126 40       		.uleb128 0x40
 4991 0127 18       		.uleb128 0x18
 4992 0128 9642     		.uleb128 0x2116
 4993 012a 19       		.uleb128 0x19
 4994 012b 01       		.uleb128 0x1
 4995 012c 13       		.uleb128 0x13
 4996 012d 00       		.byte	0
 4997 012e 00       		.byte	0
 4998 012f 16       		.uleb128 0x16
 4999 0130 05       		.uleb128 0x5
 5000 0131 00       		.byte	0
 5001 0132 03       		.uleb128 0x3
 5002 0133 0E       		.uleb128 0xe
 5003 0134 3A       		.uleb128 0x3a
 5004 0135 0B       		.uleb128 0xb
 5005 0136 3B       		.uleb128 0x3b
 5006 0137 0B       		.uleb128 0xb
 5007 0138 49       		.uleb128 0x49
 5008 0139 13       		.uleb128 0x13
 5009 013a 02       		.uleb128 0x2
 5010 013b 18       		.uleb128 0x18
 5011 013c 00       		.byte	0
 5012 013d 00       		.byte	0
 5013 013e 17       		.uleb128 0x17
 5014 013f 34       		.uleb128 0x34
 5015 0140 00       		.byte	0
 5016 0141 03       		.uleb128 0x3
 5017 0142 08       		.uleb128 0x8
 5018 0143 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 110


 5019 0144 0B       		.uleb128 0xb
 5020 0145 3B       		.uleb128 0x3b
 5021 0146 0B       		.uleb128 0xb
 5022 0147 49       		.uleb128 0x49
 5023 0148 13       		.uleb128 0x13
 5024 0149 02       		.uleb128 0x2
 5025 014a 18       		.uleb128 0x18
 5026 014b 00       		.byte	0
 5027 014c 00       		.byte	0
 5028 014d 18       		.uleb128 0x18
 5029 014e 2E       		.uleb128 0x2e
 5030 014f 01       		.byte	0x1
 5031 0150 3F       		.uleb128 0x3f
 5032 0151 19       		.uleb128 0x19
 5033 0152 03       		.uleb128 0x3
 5034 0153 0E       		.uleb128 0xe
 5035 0154 3A       		.uleb128 0x3a
 5036 0155 0B       		.uleb128 0xb
 5037 0156 3B       		.uleb128 0x3b
 5038 0157 05       		.uleb128 0x5
 5039 0158 27       		.uleb128 0x27
 5040 0159 19       		.uleb128 0x19
 5041 015a 49       		.uleb128 0x49
 5042 015b 13       		.uleb128 0x13
 5043 015c 11       		.uleb128 0x11
 5044 015d 01       		.uleb128 0x1
 5045 015e 12       		.uleb128 0x12
 5046 015f 06       		.uleb128 0x6
 5047 0160 40       		.uleb128 0x40
 5048 0161 18       		.uleb128 0x18
 5049 0162 9642     		.uleb128 0x2116
 5050 0164 19       		.uleb128 0x19
 5051 0165 01       		.uleb128 0x1
 5052 0166 13       		.uleb128 0x13
 5053 0167 00       		.byte	0
 5054 0168 00       		.byte	0
 5055 0169 19       		.uleb128 0x19
 5056 016a 05       		.uleb128 0x5
 5057 016b 00       		.byte	0
 5058 016c 03       		.uleb128 0x3
 5059 016d 0E       		.uleb128 0xe
 5060 016e 3A       		.uleb128 0x3a
 5061 016f 0B       		.uleb128 0xb
 5062 0170 3B       		.uleb128 0x3b
 5063 0171 05       		.uleb128 0x5
 5064 0172 49       		.uleb128 0x49
 5065 0173 13       		.uleb128 0x13
 5066 0174 02       		.uleb128 0x2
 5067 0175 18       		.uleb128 0x18
 5068 0176 00       		.byte	0
 5069 0177 00       		.byte	0
 5070 0178 1A       		.uleb128 0x1a
 5071 0179 34       		.uleb128 0x34
 5072 017a 00       		.byte	0
 5073 017b 03       		.uleb128 0x3
 5074 017c 08       		.uleb128 0x8
 5075 017d 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 111


 5076 017e 0B       		.uleb128 0xb
 5077 017f 3B       		.uleb128 0x3b
 5078 0180 05       		.uleb128 0x5
 5079 0181 49       		.uleb128 0x49
 5080 0182 13       		.uleb128 0x13
 5081 0183 02       		.uleb128 0x2
 5082 0184 18       		.uleb128 0x18
 5083 0185 00       		.byte	0
 5084 0186 00       		.byte	0
 5085 0187 1B       		.uleb128 0x1b
 5086 0188 2E       		.uleb128 0x2e
 5087 0189 01       		.byte	0x1
 5088 018a 3F       		.uleb128 0x3f
 5089 018b 19       		.uleb128 0x19
 5090 018c 03       		.uleb128 0x3
 5091 018d 0E       		.uleb128 0xe
 5092 018e 3A       		.uleb128 0x3a
 5093 018f 0B       		.uleb128 0xb
 5094 0190 3B       		.uleb128 0x3b
 5095 0191 05       		.uleb128 0x5
 5096 0192 49       		.uleb128 0x49
 5097 0193 13       		.uleb128 0x13
 5098 0194 11       		.uleb128 0x11
 5099 0195 01       		.uleb128 0x1
 5100 0196 12       		.uleb128 0x12
 5101 0197 06       		.uleb128 0x6
 5102 0198 40       		.uleb128 0x40
 5103 0199 18       		.uleb128 0x18
 5104 019a 9642     		.uleb128 0x2116
 5105 019c 19       		.uleb128 0x19
 5106 019d 01       		.uleb128 0x1
 5107 019e 13       		.uleb128 0x13
 5108 019f 00       		.byte	0
 5109 01a0 00       		.byte	0
 5110 01a1 1C       		.uleb128 0x1c
 5111 01a2 34       		.uleb128 0x34
 5112 01a3 00       		.byte	0
 5113 01a4 03       		.uleb128 0x3
 5114 01a5 0E       		.uleb128 0xe
 5115 01a6 3A       		.uleb128 0x3a
 5116 01a7 0B       		.uleb128 0xb
 5117 01a8 3B       		.uleb128 0x3b
 5118 01a9 05       		.uleb128 0x5
 5119 01aa 49       		.uleb128 0x49
 5120 01ab 13       		.uleb128 0x13
 5121 01ac 02       		.uleb128 0x2
 5122 01ad 18       		.uleb128 0x18
 5123 01ae 00       		.byte	0
 5124 01af 00       		.byte	0
 5125 01b0 1D       		.uleb128 0x1d
 5126 01b1 2E       		.uleb128 0x2e
 5127 01b2 00       		.byte	0
 5128 01b3 3F       		.uleb128 0x3f
 5129 01b4 19       		.uleb128 0x19
 5130 01b5 03       		.uleb128 0x3
 5131 01b6 0E       		.uleb128 0xe
 5132 01b7 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 112


 5133 01b8 0B       		.uleb128 0xb
 5134 01b9 3B       		.uleb128 0x3b
 5135 01ba 05       		.uleb128 0x5
 5136 01bb 11       		.uleb128 0x11
 5137 01bc 01       		.uleb128 0x1
 5138 01bd 12       		.uleb128 0x12
 5139 01be 06       		.uleb128 0x6
 5140 01bf 40       		.uleb128 0x40
 5141 01c0 18       		.uleb128 0x18
 5142 01c1 9642     		.uleb128 0x2116
 5143 01c3 19       		.uleb128 0x19
 5144 01c4 00       		.byte	0
 5145 01c5 00       		.byte	0
 5146 01c6 1E       		.uleb128 0x1e
 5147 01c7 2E       		.uleb128 0x2e
 5148 01c8 00       		.byte	0
 5149 01c9 3F       		.uleb128 0x3f
 5150 01ca 19       		.uleb128 0x19
 5151 01cb 03       		.uleb128 0x3
 5152 01cc 0E       		.uleb128 0xe
 5153 01cd 3A       		.uleb128 0x3a
 5154 01ce 0B       		.uleb128 0xb
 5155 01cf 3B       		.uleb128 0x3b
 5156 01d0 05       		.uleb128 0x5
 5157 01d1 49       		.uleb128 0x49
 5158 01d2 13       		.uleb128 0x13
 5159 01d3 11       		.uleb128 0x11
 5160 01d4 01       		.uleb128 0x1
 5161 01d5 12       		.uleb128 0x12
 5162 01d6 06       		.uleb128 0x6
 5163 01d7 40       		.uleb128 0x40
 5164 01d8 18       		.uleb128 0x18
 5165 01d9 9642     		.uleb128 0x2116
 5166 01db 19       		.uleb128 0x19
 5167 01dc 00       		.byte	0
 5168 01dd 00       		.byte	0
 5169 01de 1F       		.uleb128 0x1f
 5170 01df 2E       		.uleb128 0x2e
 5171 01e0 01       		.byte	0x1
 5172 01e1 3F       		.uleb128 0x3f
 5173 01e2 19       		.uleb128 0x19
 5174 01e3 03       		.uleb128 0x3
 5175 01e4 0E       		.uleb128 0xe
 5176 01e5 3A       		.uleb128 0x3a
 5177 01e6 0B       		.uleb128 0xb
 5178 01e7 3B       		.uleb128 0x3b
 5179 01e8 05       		.uleb128 0x5
 5180 01e9 11       		.uleb128 0x11
 5181 01ea 01       		.uleb128 0x1
 5182 01eb 12       		.uleb128 0x12
 5183 01ec 06       		.uleb128 0x6
 5184 01ed 40       		.uleb128 0x40
 5185 01ee 18       		.uleb128 0x18
 5186 01ef 9642     		.uleb128 0x2116
 5187 01f1 19       		.uleb128 0x19
 5188 01f2 01       		.uleb128 0x1
 5189 01f3 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 113


 5190 01f4 00       		.byte	0
 5191 01f5 00       		.byte	0
 5192 01f6 20       		.uleb128 0x20
 5193 01f7 2E       		.uleb128 0x2e
 5194 01f8 00       		.byte	0
 5195 01f9 3F       		.uleb128 0x3f
 5196 01fa 19       		.uleb128 0x19
 5197 01fb 03       		.uleb128 0x3
 5198 01fc 0E       		.uleb128 0xe
 5199 01fd 3A       		.uleb128 0x3a
 5200 01fe 0B       		.uleb128 0xb
 5201 01ff 3B       		.uleb128 0x3b
 5202 0200 05       		.uleb128 0x5
 5203 0201 11       		.uleb128 0x11
 5204 0202 01       		.uleb128 0x1
 5205 0203 12       		.uleb128 0x12
 5206 0204 06       		.uleb128 0x6
 5207 0205 40       		.uleb128 0x40
 5208 0206 18       		.uleb128 0x18
 5209 0207 9742     		.uleb128 0x2117
 5210 0209 19       		.uleb128 0x19
 5211 020a 00       		.byte	0
 5212 020b 00       		.byte	0
 5213 020c 21       		.uleb128 0x21
 5214 020d 2E       		.uleb128 0x2e
 5215 020e 00       		.byte	0
 5216 020f 3F       		.uleb128 0x3f
 5217 0210 19       		.uleb128 0x19
 5218 0211 03       		.uleb128 0x3
 5219 0212 0E       		.uleb128 0xe
 5220 0213 3A       		.uleb128 0x3a
 5221 0214 0B       		.uleb128 0xb
 5222 0215 3B       		.uleb128 0x3b
 5223 0216 05       		.uleb128 0x5
 5224 0217 49       		.uleb128 0x49
 5225 0218 13       		.uleb128 0x13
 5226 0219 11       		.uleb128 0x11
 5227 021a 01       		.uleb128 0x1
 5228 021b 12       		.uleb128 0x12
 5229 021c 06       		.uleb128 0x6
 5230 021d 40       		.uleb128 0x40
 5231 021e 18       		.uleb128 0x18
 5232 021f 9742     		.uleb128 0x2117
 5233 0221 19       		.uleb128 0x19
 5234 0222 00       		.byte	0
 5235 0223 00       		.byte	0
 5236 0224 22       		.uleb128 0x22
 5237 0225 34       		.uleb128 0x34
 5238 0226 00       		.byte	0
 5239 0227 03       		.uleb128 0x3
 5240 0228 0E       		.uleb128 0xe
 5241 0229 3A       		.uleb128 0x3a
 5242 022a 0B       		.uleb128 0xb
 5243 022b 3B       		.uleb128 0x3b
 5244 022c 05       		.uleb128 0x5
 5245 022d 49       		.uleb128 0x49
 5246 022e 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 114


 5247 022f 3F       		.uleb128 0x3f
 5248 0230 19       		.uleb128 0x19
 5249 0231 3C       		.uleb128 0x3c
 5250 0232 19       		.uleb128 0x19
 5251 0233 00       		.byte	0
 5252 0234 00       		.byte	0
 5253 0235 23       		.uleb128 0x23
 5254 0236 34       		.uleb128 0x34
 5255 0237 00       		.byte	0
 5256 0238 03       		.uleb128 0x3
 5257 0239 0E       		.uleb128 0xe
 5258 023a 3A       		.uleb128 0x3a
 5259 023b 0B       		.uleb128 0xb
 5260 023c 3B       		.uleb128 0x3b
 5261 023d 0B       		.uleb128 0xb
 5262 023e 49       		.uleb128 0x49
 5263 023f 13       		.uleb128 0x13
 5264 0240 3F       		.uleb128 0x3f
 5265 0241 19       		.uleb128 0x19
 5266 0242 02       		.uleb128 0x2
 5267 0243 18       		.uleb128 0x18
 5268 0244 00       		.byte	0
 5269 0245 00       		.byte	0
 5270 0246 24       		.uleb128 0x24
 5271 0247 21       		.uleb128 0x21
 5272 0248 00       		.byte	0
 5273 0249 49       		.uleb128 0x49
 5274 024a 13       		.uleb128 0x13
 5275 024b 2F       		.uleb128 0x2f
 5276 024c 05       		.uleb128 0x5
 5277 024d 00       		.byte	0
 5278 024e 00       		.byte	0
 5279 024f 25       		.uleb128 0x25
 5280 0250 34       		.uleb128 0x34
 5281 0251 00       		.byte	0
 5282 0252 03       		.uleb128 0x3
 5283 0253 08       		.uleb128 0x8
 5284 0254 3A       		.uleb128 0x3a
 5285 0255 0B       		.uleb128 0xb
 5286 0256 3B       		.uleb128 0x3b
 5287 0257 0B       		.uleb128 0xb
 5288 0258 49       		.uleb128 0x49
 5289 0259 13       		.uleb128 0x13
 5290 025a 3F       		.uleb128 0x3f
 5291 025b 19       		.uleb128 0x19
 5292 025c 02       		.uleb128 0x2
 5293 025d 18       		.uleb128 0x18
 5294 025e 00       		.byte	0
 5295 025f 00       		.byte	0
 5296 0260 00       		.byte	0
 5297              		.section	.debug_aranges,"",%progbits
 5298 0000 D4000000 		.4byte	0xd4
 5299 0004 0200     		.2byte	0x2
 5300 0006 00000000 		.4byte	.Ldebug_info0
 5301 000a 04       		.byte	0x4
 5302 000b 00       		.byte	0
 5303 000c 0000     		.2byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 115


 5304 000e 0000     		.2byte	0
 5305 0010 00000000 		.4byte	.LFB64
 5306 0014 44000000 		.4byte	.LFE64-.LFB64
 5307 0018 00000000 		.4byte	.LFB65
 5308 001c 6C000000 		.4byte	.LFE65-.LFB65
 5309 0020 00000000 		.4byte	.LFB66
 5310 0024 32000000 		.4byte	.LFE66-.LFB66
 5311 0028 00000000 		.4byte	.LFB67
 5312 002c 20000000 		.4byte	.LFE67-.LFB67
 5313 0030 00000000 		.4byte	.LFB68
 5314 0034 40000000 		.4byte	.LFE68-.LFB68
 5315 0038 00000000 		.4byte	.LFB69
 5316 003c DC000000 		.4byte	.LFE69-.LFB69
 5317 0040 00000000 		.4byte	.LFB70
 5318 0044 1C000000 		.4byte	.LFE70-.LFB70
 5319 0048 00000000 		.4byte	.LFB71
 5320 004c 28000000 		.4byte	.LFE71-.LFB71
 5321 0050 00000000 		.4byte	.LFB72
 5322 0054 C8000000 		.4byte	.LFE72-.LFB72
 5323 0058 00000000 		.4byte	.LFB73
 5324 005c 00010000 		.4byte	.LFE73-.LFB73
 5325 0060 00000000 		.4byte	.LFB74
 5326 0064 78000000 		.4byte	.LFE74-.LFB74
 5327 0068 00000000 		.4byte	.LFB75
 5328 006c 74010000 		.4byte	.LFE75-.LFB75
 5329 0070 00000000 		.4byte	.LFB76
 5330 0074 B8000000 		.4byte	.LFE76-.LFB76
 5331 0078 00000000 		.4byte	.LFB77
 5332 007c 1C000000 		.4byte	.LFE77-.LFB77
 5333 0080 00000000 		.4byte	.LFB78
 5334 0084 28000000 		.4byte	.LFE78-.LFB78
 5335 0088 00000000 		.4byte	.LFB79
 5336 008c 84000000 		.4byte	.LFE79-.LFB79
 5337 0090 00000000 		.4byte	.LFB80
 5338 0094 3C000000 		.4byte	.LFE80-.LFB80
 5339 0098 00000000 		.4byte	.LFB81
 5340 009c CA030000 		.4byte	.LFE81-.LFB81
 5341 00a0 00000000 		.4byte	.LFB82
 5342 00a4 68010000 		.4byte	.LFE82-.LFB82
 5343 00a8 00000000 		.4byte	.LFB83
 5344 00ac 44010000 		.4byte	.LFE83-.LFB83
 5345 00b0 00000000 		.4byte	.LFB84
 5346 00b4 14000000 		.4byte	.LFE84-.LFB84
 5347 00b8 00000000 		.4byte	.LFB85
 5348 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5349 00c0 00000000 		.4byte	.LFB86
 5350 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5351 00c8 00000000 		.4byte	.LFB87
 5352 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5353 00d0 00000000 		.4byte	0
 5354 00d4 00000000 		.4byte	0
 5355              		.section	.debug_ranges,"",%progbits
 5356              	.Ldebug_ranges0:
 5357 0000 00000000 		.4byte	.LFB64
 5358 0004 44000000 		.4byte	.LFE64
 5359 0008 00000000 		.4byte	.LFB65
 5360 000c 6C000000 		.4byte	.LFE65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 116


 5361 0010 00000000 		.4byte	.LFB66
 5362 0014 32000000 		.4byte	.LFE66
 5363 0018 00000000 		.4byte	.LFB67
 5364 001c 20000000 		.4byte	.LFE67
 5365 0020 00000000 		.4byte	.LFB68
 5366 0024 40000000 		.4byte	.LFE68
 5367 0028 00000000 		.4byte	.LFB69
 5368 002c DC000000 		.4byte	.LFE69
 5369 0030 00000000 		.4byte	.LFB70
 5370 0034 1C000000 		.4byte	.LFE70
 5371 0038 00000000 		.4byte	.LFB71
 5372 003c 28000000 		.4byte	.LFE71
 5373 0040 00000000 		.4byte	.LFB72
 5374 0044 C8000000 		.4byte	.LFE72
 5375 0048 00000000 		.4byte	.LFB73
 5376 004c 00010000 		.4byte	.LFE73
 5377 0050 00000000 		.4byte	.LFB74
 5378 0054 78000000 		.4byte	.LFE74
 5379 0058 00000000 		.4byte	.LFB75
 5380 005c 74010000 		.4byte	.LFE75
 5381 0060 00000000 		.4byte	.LFB76
 5382 0064 B8000000 		.4byte	.LFE76
 5383 0068 00000000 		.4byte	.LFB77
 5384 006c 1C000000 		.4byte	.LFE77
 5385 0070 00000000 		.4byte	.LFB78
 5386 0074 28000000 		.4byte	.LFE78
 5387 0078 00000000 		.4byte	.LFB79
 5388 007c 84000000 		.4byte	.LFE79
 5389 0080 00000000 		.4byte	.LFB80
 5390 0084 3C000000 		.4byte	.LFE80
 5391 0088 00000000 		.4byte	.LFB81
 5392 008c CA030000 		.4byte	.LFE81
 5393 0090 00000000 		.4byte	.LFB82
 5394 0094 68010000 		.4byte	.LFE82
 5395 0098 00000000 		.4byte	.LFB83
 5396 009c 44010000 		.4byte	.LFE83
 5397 00a0 00000000 		.4byte	.LFB84
 5398 00a4 14000000 		.4byte	.LFE84
 5399 00a8 00000000 		.4byte	.LFB85
 5400 00ac 1A000000 		.4byte	.LFE85
 5401 00b0 00000000 		.4byte	.LFB86
 5402 00b4 2A000000 		.4byte	.LFE86
 5403 00b8 00000000 		.4byte	.LFB87
 5404 00bc 7C020000 		.4byte	.LFE87
 5405 00c0 00000000 		.4byte	0
 5406 00c4 00000000 		.4byte	0
 5407              		.section	.debug_line,"",%progbits
 5408              	.Ldebug_line0:
 5409 0000 B7050000 		.section	.debug_str,"MS",%progbits,1
 5409      02000E02 
 5409      00000201 
 5409      FB0E0D00 
 5409      01010101 
 5410              	.LASF138:
 5411 0000 676D745F 		.ascii	"gmt_offset\000"
 5411      6F666673 
 5411      657400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 117


 5412              	.LASF16:
 5413 000b 75696E74 		.ascii	"uint16\000"
 5413      313600
 5414              	.LASF38:
 5415 0012 76616C75 		.ascii	"value\000"
 5415      6500
 5416              	.LASF27:
 5417 0018 746D5F68 		.ascii	"tm_hour\000"
 5417      6F757200 
 5418              	.LASF32:
 5419 0020 746D5F79 		.ascii	"tm_yday\000"
 5419      64617900 
 5420              	.LASF174:
 5421 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5421      73657273 
 5421      5C64616E 
 5421      747A5C44 
 5421      6F63756D 
 5422 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5422      2E637964 
 5422      736E00
 5423              	.LASF146:
 5424 0060 62756666 		.ascii	"buffer_overflow\000"
 5424      65725F6F 
 5424      76657266 
 5424      6C6F7700 
 5425              	.LASF4:
 5426 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5426      6E74385F 
 5426      7400
 5427              	.LASF71:
 5428 007a 636F756E 		.ascii	"countDownResetCondition\000"
 5428      74446F77 
 5428      6E526573 
 5428      6574436F 
 5428      6E646974 
 5429              	.LASF54:
 5430 0092 6C6F6E67 		.ascii	"longitude\000"
 5430      69747564 
 5430      6500
 5431              	.LASF172:
 5432 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5432      43313120 
 5432      352E342E 
 5432      31203230 
 5432      31363036 
 5433 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5433      20726576 
 5433      6973696F 
 5433      6E203233 
 5433      37373135 
 5434 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5434      66756E63 
 5434      74696F6E 
 5434      2D736563 
 5434      74696F6E 
 5435              	.LASF141:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 118


 5436 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5436      6D5F7761 
 5436      6B657570 
 5436      00
 5437              	.LASF10:
 5438 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5438      206C6F6E 
 5438      6720756E 
 5438      7369676E 
 5438      65642069 
 5439              	.LASF123:
 5440 014e 73616D70 		.ascii	"sample_freq\000"
 5440      6C655F66 
 5440      72657100 
 5441              	.LASF150:
 5442 015a 6D6F6465 		.ascii	"modem_state\000"
 5442      6D5F7374 
 5442      61746500 
 5443              	.LASF98:
 5444 0166 74657374 		.ascii	"test\000"
 5444      00
 5445              	.LASF161:
 5446 016b 616C6172 		.ascii	"alarmMeasure\000"
 5446      6D4D6561 
 5446      73757265 
 5446      00
 5447              	.LASF145:
 5448 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5448      52784275 
 5448      66666572 
 5448      00
 5449              	.LASF169:
 5450 0185 74696D65 		.ascii	"timetoLevelSensor\000"
 5450      746F4C65 
 5450      76656C53 
 5450      656E736F 
 5450      7200
 5451              	.LASF152:
 5452 0197 6D6F6465 		.ascii	"modem_stats\000"
 5452      6D5F7374 
 5452      61747300 
 5453              	.LASF9:
 5454 01a3 6C6F6E67 		.ascii	"long long int\000"
 5454      206C6F6E 
 5454      6720696E 
 5454      7400
 5455              	.LASF0:
 5456 01b1 7369676E 		.ascii	"signed char\000"
 5456      65642063 
 5456      68617200 
 5457              	.LASF47:
 5458 01bd 65636E6F 		.ascii	"ecno\000"
 5458      00
 5459              	.LASF68:
 5460 01c2 636F756E 		.ascii	"countDownValue\000"
 5460      74446F77 
 5460      6E56616C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 119


 5460      756500
 5461              	.LASF162:
 5462 01d1 74696D65 		.ascii	"timeToMeasure\000"
 5462      546F4D65 
 5462      61737572 
 5462      6500
 5463              	.LASF50:
 5464 01df 74696D65 		.ascii	"time_to_network_connect\000"
 5464      5F746F5F 
 5464      6E657477 
 5464      6F726B5F 
 5464      636F6E6E 
 5465              	.LASF164:
 5466 01f7 74696D65 		.ascii	"timeToSync\000"
 5466      546F5379 
 5466      6E6300
 5467              	.LASF157:
 5468 0202 68747470 		.ascii	"http_body\000"
 5468      5F626F64 
 5468      7900
 5469              	.LASF109:
 5470 020c 7365745F 		.ascii	"set_up_internet_connection\000"
 5470      75705F69 
 5470      6E746572 
 5470      6E65745F 
 5470      636F6E6E 
 5471              	.LASF137:
 5472 0227 7365636F 		.ascii	"second\000"
 5472      6E6400
 5473              	.LASF133:
 5474 022e 79656172 		.ascii	"year\000"
 5474      00
 5475              	.LASF128:
 5476 0233 74656D70 		.ascii	"temp\000"
 5476      00
 5477              	.LASF6:
 5478 0238 6C6F6E67 		.ascii	"long int\000"
 5478      20696E74 
 5478      00
 5479              	.LASF45:
 5480 0241 72786C65 		.ascii	"rxlev\000"
 5480      7600
 5481              	.LASF69:
 5482 0247 63757272 		.ascii	"currentCountDownValue\000"
 5482      656E7443 
 5482      6F756E74 
 5482      446F776E 
 5482      56616C75 
 5483              	.LASF139:
 5484 025d 6D6F6465 		.ascii	"modem_get_state\000"
 5484      6D5F6765 
 5484      745F7374 
 5484      61746500 
 5485              	.LASF55:
 5486 026d 616C7469 		.ascii	"altitude\000"
 5486      74756465 
 5486      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 120


 5487              	.LASF15:
 5488 0276 75696E74 		.ascii	"uint8\000"
 5488      3800
 5489              	.LASF127:
 5490 027c 6C657665 		.ascii	"level_sensor_freq\000"
 5490      6C5F7365 
 5490      6E736F72 
 5490      5F667265 
 5490      7100
 5491              	.LASF167:
 5492 028e 74696D65 		.ascii	"timeToAppLED\000"
 5492      546F4170 
 5492      704C4544 
 5492      00
 5493              	.LASF19:
 5494 029b 696E7433 		.ascii	"int32\000"
 5494      3200
 5495              	.LASF59:
 5496 02a1 6E6F6465 		.ascii	"node_type\000"
 5496      5F747970 
 5496      6500
 5497              	.LASF129:
 5498 02ab 6D6F6465 		.ascii	"modem_configure_settings\000"
 5498      6D5F636F 
 5498      6E666967 
 5498      7572655F 
 5498      73657474 
 5499              	.LASF117:
 5500 02c4 735F7369 		.ascii	"s_sim_type\000"
 5500      6D5F7479 
 5500      706500
 5501              	.LASF99:
 5502 02cf 6E657477 		.ascii	"network_time\000"
 5502      6F726B5F 
 5502      74696D65 
 5502      00
 5503              	.LASF3:
 5504 02dc 73686F72 		.ascii	"short unsigned int\000"
 5504      7420756E 
 5504      7369676E 
 5504      65642069 
 5504      6E7400
 5505              	.LASF17:
 5506 02ef 75696E74 		.ascii	"uint32\000"
 5506      333200
 5507              	.LASF95:
 5508 02f6 696E7465 		.ascii	"interval\000"
 5508      7276616C 
 5508      00
 5509              	.LASF7:
 5510 02ff 5F5F7569 		.ascii	"__uint32_t\000"
 5510      6E743332 
 5510      5F7400
 5511              	.LASF131:
 5512 030a 6D6F6465 		.ascii	"modem_get_network_time\000"
 5512      6D5F6765 
 5512      745F6E65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 121


 5512      74776F72 
 5512      6B5F7469 
 5513              	.LASF29:
 5514 0321 746D5F6D 		.ascii	"tm_mon\000"
 5514      6F6E00
 5515              	.LASF122:
 5516 0328 735F6C65 		.ascii	"s_level_sensor\000"
 5516      76656C5F 
 5516      73656E73 
 5516      6F7200
 5517              	.LASF63:
 5518 0337 64656275 		.ascii	"debug_level\000"
 5518      675F6C65 
 5518      76656C00 
 5519              	.LASF140:
 5520 0343 6D6F6465 		.ascii	"modem_sleep\000"
 5520      6D5F736C 
 5520      65657000 
 5521              	.LASF120:
 5522 034f 735F6465 		.ascii	"s_debug_freq\000"
 5522      6275675F 
 5522      66726571 
 5522      00
 5523              	.LASF113:
 5524 035c 75706461 		.ascii	"updatable_parameters_initialize\000"
 5524      7461626C 
 5524      655F7061 
 5524      72616D65 
 5524      74657273 
 5525              	.LASF30:
 5526 037c 746D5F79 		.ascii	"tm_year\000"
 5526      65617200 
 5527              	.LASF163:
 5528 0384 616C6172 		.ascii	"alarmSync\000"
 5528      6D53796E 
 5528      6300
 5529              	.LASF81:
 5530 038e 70696E73 		.ascii	"pins_configure_active\000"
 5530      5F636F6E 
 5530      66696775 
 5530      72655F61 
 5530      63746976 
 5531              	.LASF40:
 5532 03a4 6B65795F 		.ascii	"key_value_t\000"
 5532      76616C75 
 5532      655F7400 
 5533              	.LASF86:
 5534 03b0 7077725F 		.ascii	"pwr_check\000"
 5534      63686563 
 5534      6B00
 5535              	.LASF8:
 5536 03ba 6C6F6E67 		.ascii	"long unsigned int\000"
 5536      20756E73 
 5536      69676E65 
 5536      6420696E 
 5536      7400
 5537              	.LASF101:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 122


 5538 03cc 65787472 		.ascii	"extract_string\000"
 5538      6163745F 
 5538      73747269 
 5538      6E6700
 5539              	.LASF91:
 5540 03db 74696D65 		.ascii	"timeout\000"
 5540      6F757400 
 5541              	.LASF114:
 5542 03e3 6765745F 		.ascii	"get_cell_network_stats\000"
 5542      63656C6C 
 5542      5F6E6574 
 5542      776F726B 
 5542      5F737461 
 5543              	.LASF39:
 5544 03fa 74696D65 		.ascii	"timeStamp\000"
 5544      5374616D 
 5544      7000
 5545              	.LASF56:
 5546 0404 74696D65 		.ascii	"time_to_lock\000"
 5546      5F746F5F 
 5546      6C6F636B 
 5546      00
 5547              	.LASF149:
 5548 0411 64617461 		.ascii	"data\000"
 5548      00
 5549              	.LASF77:
 5550 0416 65705F70 		.ascii	"ep_port\000"
 5550      6F727400 
 5551              	.LASF33:
 5552 041e 746D5F69 		.ascii	"tm_isdst\000"
 5552      73647374 
 5552      00
 5553              	.LASF73:
 5554 0427 6D6F6465 		.ascii	"modem_info\000"
 5554      6D5F696E 
 5554      666F00
 5555              	.LASF76:
 5556 0432 65705F68 		.ascii	"ep_host\000"
 5556      6F737400 
 5557              	.LASF74:
 5558 043a 63686970 		.ascii	"chip_uniqueId\000"
 5558      5F756E69 
 5558      71756549 
 5558      6400
 5559              	.LASF96:
 5560 0448 6D6F6465 		.ascii	"modem_power_up\000"
 5560      6D5F706F 
 5560      7765725F 
 5560      757000
 5561              	.LASF173:
 5562 0457 6D6F6465 		.ascii	"modem.c\000"
 5562      6D2E6300 
 5563              	.LASF103:
 5564 045f 62656769 		.ascii	"beginMarker\000"
 5564      6E4D6172 
 5564      6B657200 
 5565              	.LASF105:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 123


 5566 046b 74617267 		.ascii	"target\000"
 5566      657400
 5567              	.LASF51:
 5568 0472 74696D65 		.ascii	"time_to_acquire_ip\000"
 5568      5F746F5F 
 5568      61637175 
 5568      6972655F 
 5568      697000
 5569              	.LASF104:
 5570 0485 656E644D 		.ascii	"endMarker\000"
 5570      61726B65 
 5570      7200
 5571              	.LASF2:
 5572 048f 73686F72 		.ascii	"short int\000"
 5572      7420696E 
 5572      7400
 5573              	.LASF132:
 5574 0499 65706F63 		.ascii	"epoch_time\000"
 5574      685F7469 
 5574      6D6500
 5575              	.LASF5:
 5576 04a4 5F5F696E 		.ascii	"__int32_t\000"
 5576      7433325F 
 5576      7400
 5577              	.LASF166:
 5578 04ae 616C6172 		.ascii	"alarmAppLED\000"
 5578      6D417070 
 5578      4C454400 
 5579              	.LASF102:
 5580 04ba 66726F6D 		.ascii	"from\000"
 5580      00
 5581              	.LASF108:
 5582 04bf 63726567 		.ascii	"creg\000"
 5582      00
 5583              	.LASF125:
 5584 04c4 64656275 		.ascii	"debug_freq\000"
 5584      675F6672 
 5584      657100
 5585              	.LASF92:
 5586 04cf 61745F61 		.ascii	"at_attempt\000"
 5586      7474656D 
 5586      707400
 5587              	.LASF100:
 5588 04da 61745F77 		.ascii	"at_write_command\000"
 5588      72697465 
 5588      5F636F6D 
 5588      6D616E64 
 5588      00
 5589              	.LASF75:
 5590 04eb 7379735F 		.ascii	"sys_info_t\000"
 5590      696E666F 
 5590      5F7400
 5591              	.LASF67:
 5592 04f6 75706461 		.ascii	"updatable_parameters_t\000"
 5592      7461626C 
 5592      655F7061 
 5592      72616D65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 124


 5592      74657273 
 5593              	.LASF124:
 5594 050d 7265706F 		.ascii	"report_freq\000"
 5594      72745F66 
 5594      72657100 
 5595              	.LASF147:
 5596 0519 64617461 		.ascii	"dataPointsInStack\000"
 5596      506F696E 
 5596      7473496E 
 5596      53746163 
 5596      6B00
 5597              	.LASF26:
 5598 052b 746D5F6D 		.ascii	"tm_min\000"
 5598      696E00
 5599              	.LASF24:
 5600 0532 73697A65 		.ascii	"sizetype\000"
 5600      74797065 
 5600      00
 5601              	.LASF134:
 5602 053b 6D6F6E74 		.ascii	"month\000"
 5602      6800
 5603              	.LASF107:
 5604 0541 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5604      6F6E6E65 
 5604      63746564 
 5604      5F746F5F 
 5604      63656C6C 
 5605              	.LASF170:
 5606 055e 75617274 		.ascii	"uart_received_string\000"
 5606      5F726563 
 5606      65697665 
 5606      645F7374 
 5606      72696E67 
 5607              	.LASF53:
 5608 0573 6C617469 		.ascii	"latitude\000"
 5608      74756465 
 5608      00
 5609              	.LASF34:
 5610 057c 74657374 		.ascii	"test_name\000"
 5610      5F6E616D 
 5610      6500
 5611              	.LASF165:
 5612 0586 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5612      546F5379 
 5612      636E5265 
 5612      6D6F7465 
 5612      50617261 
 5613              	.LASF97:
 5614 059d 6D6F6465 		.ascii	"modem_test\000"
 5614      6D5F7465 
 5614      737400
 5615              	.LASF112:
 5616 05a8 6D617463 		.ascii	"match\000"
 5616      6800
 5617              	.LASF153:
 5618 05ae 75706461 		.ascii	"updatable_parameters\000"
 5618      7461626C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 125


 5618      655F7061 
 5618      72616D65 
 5618      74657273 
 5619              	.LASF135:
 5620 05c3 686F7572 		.ascii	"hour\000"
 5620      00
 5621              	.LASF89:
 5622 05c8 636F6D6D 		.ascii	"commands\000"
 5622      616E6473 
 5622      00
 5623              	.LASF93:
 5624 05d1 636F6D70 		.ascii	"compare_location\000"
 5624      6172655F 
 5624      6C6F6361 
 5624      74696F6E 
 5624      00
 5625              	.LASF20:
 5626 05e2 666C6F61 		.ascii	"float\000"
 5626      7400
 5627              	.LASF79:
 5628 05e8 6D6F6465 		.ascii	"modem_initialize\000"
 5628      6D5F696E 
 5628      69746961 
 5628      6C697A65 
 5628      00
 5629              	.LASF119:
 5630 05f9 735F7265 		.ascii	"s_report_freq\000"
 5630      706F7274 
 5630      5F667265 
 5630      7100
 5631              	.LASF60:
 5632 0607 73696D5F 		.ascii	"sim_type\000"
 5632      74797065 
 5632      00
 5633              	.LASF110:
 5634 0610 6973725F 		.ascii	"isr_telit_rx\000"
 5634      74656C69 
 5634      745F7278 
 5634      00
 5635              	.LASF72:
 5636 061d 616C6172 		.ascii	"alarm\000"
 5636      6D00
 5637              	.LASF66:
 5638 0623 5F426F6F 		.ascii	"_Bool\000"
 5638      6C00
 5639              	.LASF13:
 5640 0629 696E7433 		.ascii	"int32_t\000"
 5640      325F7400 
 5641              	.LASF1:
 5642 0631 756E7369 		.ascii	"unsigned char\000"
 5642      676E6564 
 5642      20636861 
 5642      7200
 5643              	.LASF160:
 5644 063f 73797374 		.ascii	"system_settings\000"
 5644      656D5F73 
 5644      65747469 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 126


 5644      6E677300 
 5645              	.LASF94:
 5646 064f 64656C61 		.ascii	"delay\000"
 5646      7900
 5647              	.LASF48:
 5648 0655 72737271 		.ascii	"rsrq\000"
 5648      00
 5649              	.LASF62:
 5650 065a 73796E63 		.ascii	"sync_time\000"
 5650      5F74696D 
 5650      6500
 5651              	.LASF116:
 5652 0664 735F6E6F 		.ascii	"s_node_type\000"
 5652      64655F74 
 5652      79706500 
 5653              	.LASF46:
 5654 0670 72736370 		.ascii	"rscp\000"
 5654      00
 5655              	.LASF142:
 5656 0675 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5656      6D5F6765 
 5656      745F6770 
 5656      735F636F 
 5656      6F726469 
 5657              	.LASF37:
 5658 068f 74657374 		.ascii	"test_t\000"
 5658      5F7400
 5659              	.LASF159:
 5660 0696 73797374 		.ascii	"system_info\000"
 5660      656D5F69 
 5660      6E666F00 
 5661              	.LASF43:
 5662 06a2 696D6569 		.ascii	"imei\000"
 5662      00
 5663              	.LASF36:
 5664 06a7 72656173 		.ascii	"reason\000"
 5664      6F6E00
 5665              	.LASF49:
 5666 06ae 72737270 		.ascii	"rsrp\000"
 5666      00
 5667              	.LASF52:
 5668 06b3 6D6F6465 		.ascii	"modem_stats_t\000"
 5668      6D5F7374 
 5668      6174735F 
 5668      7400
 5669              	.LASF88:
 5670 06c1 75617274 		.ascii	"uart_string_reset\000"
 5670      5F737472 
 5670      696E675F 
 5670      72657365 
 5670      7400
 5671              	.LASF168:
 5672 06d3 616C6172 		.ascii	"alarmLevelSensor\000"
 5672      6D4C6576 
 5672      656C5365 
 5672      6E736F72 
 5672      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 127


 5673              	.LASF31:
 5674 06e4 746D5F77 		.ascii	"tm_wday\000"
 5674      64617900 
 5675              	.LASF87:
 5676 06ec 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5676      6D5F736F 
 5676      66745F70 
 5676      6F776572 
 5676      5F637963 
 5677              	.LASF65:
 5678 0703 4C657665 		.ascii	"Level_Sensor_freq\000"
 5678      6C5F5365 
 5678      6E736F72 
 5678      5F667265 
 5678      7100
 5679              	.LASF154:
 5680 0715 6C657665 		.ascii	"level_sensor_inbox\000"
 5680      6C5F7365 
 5680      6E736F72 
 5680      5F696E62 
 5680      6F7800
 5681              	.LASF23:
 5682 0728 6C6F6E67 		.ascii	"long double\000"
 5682      20646F75 
 5682      626C6500 
 5683              	.LASF22:
 5684 0734 63686172 		.ascii	"char\000"
 5684      00
 5685              	.LASF106:
 5686 0739 6D6F6465 		.ascii	"modem_process_tasks\000"
 5686      6D5F7072 
 5686      6F636573 
 5686      735F7461 
 5686      736B7300 
 5687              	.LASF11:
 5688 074d 756E7369 		.ascii	"unsigned int\000"
 5688      676E6564 
 5688      20696E74 
 5688      00
 5689              	.LASF130:
 5690 075a 4346554E 		.ascii	"CFUN\000"
 5690      00
 5691              	.LASF42:
 5692 075f 6D6F6465 		.ascii	"model_id\000"
 5692      6C5F6964 
 5692      00
 5693              	.LASF158:
 5694 0768 68747470 		.ascii	"http_route\000"
 5694      5F726F75 
 5694      746500
 5695              	.LASF44:
 5696 0773 6D6F6465 		.ascii	"modem_info_t\000"
 5696      6D5F696E 
 5696      666F5F74 
 5696      00
 5697              	.LASF58:
 5698 0780 6770735F 		.ascii	"gps_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 128


 5698      7400
 5699              	.LASF171:
 5700 0786 75617274 		.ascii	"uart_string_index\000"
 5700      5F737472 
 5700      696E675F 
 5700      696E6465 
 5700      7800
 5701              	.LASF61:
 5702 0798 6D656173 		.ascii	"measure_time\000"
 5702      7572655F 
 5702      74696D65 
 5702      00
 5703              	.LASF111:
 5704 07a5 69735F63 		.ascii	"is_connected_to_internet\000"
 5704      6F6E6E65 
 5704      63746564 
 5704      5F746F5F 
 5704      696E7465 
 5705              	.LASF151:
 5706 07be 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5706      6D5F7374 
 5706      6172745F 
 5706      74696D65 
 5706      5F737461 
 5707              	.LASF144:
 5708 07d5 6770735F 		.ascii	"gps_status\000"
 5708      73746174 
 5708      757300
 5709              	.LASF80:
 5710 07e0 70696E73 		.ascii	"pins_configure_inactive\000"
 5710      5F636F6E 
 5710      66696775 
 5710      72655F69 
 5710      6E616374 
 5711              	.LASF121:
 5712 07f8 735F6170 		.ascii	"s_app_led\000"
 5712      705F6C65 
 5712      6400
 5713              	.LASF41:
 5714 0802 73696D5F 		.ascii	"sim_id\000"
 5714      696400
 5715              	.LASF28:
 5716 0809 746D5F6D 		.ascii	"tm_mday\000"
 5716      64617900 
 5717              	.LASF57:
 5718 0811 76616C69 		.ascii	"valid\000"
 5718      6400
 5719              	.LASF136:
 5720 0817 6D696E75 		.ascii	"minute\000"
 5720      746500
 5721              	.LASF14:
 5722 081e 75696E74 		.ascii	"uint32_t\000"
 5722      33325F74 
 5722      00
 5723              	.LASF25:
 5724 0827 746D5F73 		.ascii	"tm_sec\000"
 5724      656300
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 129


 5725              	.LASF115:
 5726 082e 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5726      75706461 
 5726      7465645F 
 5726      70617261 
 5726      6D657465 
 5727              	.LASF118:
 5728 0851 735F7361 		.ascii	"s_sample_freq\000"
 5728      6D706C65 
 5728      5F667265 
 5728      7100
 5729              	.LASF35:
 5730 085f 73746174 		.ascii	"status\000"
 5730      757300
 5731              	.LASF148:
 5732 0866 64617461 		.ascii	"dataPointsInStackDesired\000"
 5732      506F696E 
 5732      7473496E 
 5732      53746163 
 5732      6B446573 
 5733              	.LASF64:
 5734 087f 4170705F 		.ascii	"App_LED_freq\000"
 5734      4C45445F 
 5734      66726571 
 5734      00
 5735              	.LASF78:
 5736 088c 7379735F 		.ascii	"sys_settings_t\000"
 5736      73657474 
 5736      696E6773 
 5736      5F7400
 5737              	.LASF12:
 5738 089b 75696E74 		.ascii	"uint8_t\000"
 5738      385F7400 
 5739              	.LASF18:
 5740 08a3 696E7431 		.ascii	"int16\000"
 5740      3600
 5741              	.LASF83:
 5742 08a9 61745F72 		.ascii	"at_ready\000"
 5742      65616479 
 5742      00
 5743              	.LASF84:
 5744 08b2 61747465 		.ascii	"attempts\000"
 5744      6D707473 
 5744      00
 5745              	.LASF70:
 5746 08bb 636F756E 		.ascii	"countDownType\000"
 5746      74446F77 
 5746      6E547970 
 5746      6500
 5747              	.LASF85:
 5748 08c9 626F6F74 		.ascii	"boot_time\000"
 5748      5F74696D 
 5748      6500
 5749              	.LASF90:
 5750 08d3 65787065 		.ascii	"expected_response\000"
 5750      63746564 
 5750      5F726573 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccuMs1Ij.s 			page 130


 5750      706F6E73 
 5750      6500
 5751              	.LASF143:
 5752 08e5 6C6F636B 		.ascii	"lock_time\000"
 5752      5F74696D 
 5752      6500
 5753              	.LASF156:
 5754 08ef 68747470 		.ascii	"http_request\000"
 5754      5F726571 
 5754      75657374 
 5754      00
 5755              	.LASF82:
 5756 08fc 6D6F6465 		.ascii	"modem_power_down\000"
 5756      6D5F706F 
 5756      7765725F 
 5756      646F776E 
 5756      00
 5757              	.LASF21:
 5758 090d 646F7562 		.ascii	"double\000"
 5758      6C6500
 5759              	.LASF155:
 5760 0914 6170705F 		.ascii	"app_led_inbox\000"
 5760      6C65645F 
 5760      696E626F 
 5760      7800
 5761              	.LASF126:
 5762 0922 6170705F 		.ascii	"app_led_freq\000"
 5762      6C65645F 
 5762      66726571 
 5762      00
 5763              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
