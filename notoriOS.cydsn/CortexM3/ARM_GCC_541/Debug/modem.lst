ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,9,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	level_sensor_enabled,1,1
  34              		.comm	downstream_level_sensor_inbox,100,4
  35              		.comm	downstream_level_sensor_enabled,1,1
  36              		.comm	valve_enabled,1,1
  37              		.comm	valve_inbox,100,4
  38              		.comm	App_LED_enabled,1,1
  39              		.comm	app_led_inbox,100,4
  40              		.comm	http_request,10000,4
  41              		.comm	http_body,10000,4
  42              		.comm	http_route,200,4
  43              		.comm	system_info,28,4
  44              		.comm	system_settings,104,4
  45              		.comm	alarmMeasure,6,4
  46              		.comm	timeToMeasure,1,1
  47              		.comm	alarmSync,6,4
  48              		.comm	timeToSync,1,1
  49              		.comm	timeToSycnRemoteParams,1,1
  50              		.comm	hey,1,1
  51              		.comm	alarmAppLED,6,4
  52              		.comm	timeToAppLED,1,1
  53              		.comm	alarmLevelSensor,6,4
  54              		.comm	timetoLevelSensor,1,1
  55              		.comm	alarmDownstreamLevelSensor,6,4
  56              		.comm	timetoDownstreamLevelSensor,1,1
  57              		.comm	alarmValve,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 2


  58              		.comm	timeToValve,1,1
  59              		.comm	uart_received_string,1024,4
  60              		.global	uart_string_index
  61              		.bss
  62              		.align	1
  63              		.type	uart_string_index, %object
  64              		.size	uart_string_index, 2
  65              	uart_string_index:
  66 0000 0000     		.space	2
  67              		.section	.text.isr_telit_rx,"ax",%progbits
  68              		.align	2
  69              		.global	isr_telit_rx
  70              		.thumb
  71              		.thumb_func
  72              		.type	isr_telit_rx, %function
  73              	isr_telit_rx:
  74              	.LFB64:
  75              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  76              		.loc 1 18 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 98B5     		push	{r3, r4, r7, lr}
  81              		.cfi_def_cfa_offset 16
  82              		.cfi_offset 3, -16
  83              		.cfi_offset 4, -12
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  88              		.loc 1 20 0
  89 0004 12E0     		b	.L2
  90              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  91              		.loc 1 21 0
  92 0006 0D4B     		ldr	r3, .L4
  93 0008 B3F90030 		ldrsh	r3, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 3


  94 000c 1C46     		mov	r4, r3
  95 000e FFF7FEFF 		bl	UART_Telit_GetChar
  96 0012 0346     		mov	r3, r0
  97 0014 1A46     		mov	r2, r3
  98 0016 0A4B     		ldr	r3, .L4+4
  99 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
 100              		.loc 1 22 0
 101 001a 084B     		ldr	r3, .L4
 102 001c B3F90030 		ldrsh	r3, [r3]
 103 0020 9BB2     		uxth	r3, r3
 104 0022 0133     		adds	r3, r3, #1
 105 0024 9BB2     		uxth	r3, r3
 106 0026 1AB2     		sxth	r2, r3
 107 0028 044B     		ldr	r3, .L4
 108 002a 1A80     		strh	r2, [r3]	@ movhi
 109              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 110              		.loc 1 20 0
 111 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 112 0030 0346     		mov	r3, r0
 113 0032 012B     		cmp	r3, #1
 114 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 115              		.loc 1 25 0
 116 0036 00BF     		nop
 117 0038 98BD     		pop	{r3, r4, r7, pc}
 118              	.L5:
 119 003a 00BF     		.align	2
 120              	.L4:
 121 003c 00000000 		.word	uart_string_index
 122 0040 00000000 		.word	uart_received_string
 123              		.cfi_endproc
 124              	.LFE64:
 125              		.size	isr_telit_rx, .-isr_telit_rx
 126              		.section	.text.modem_initialize,"ax",%progbits
 127              		.align	2
 128              		.global	modem_initialize
 129              		.thumb
 130              		.thumb_func
 131              		.type	modem_initialize, %function
 132              	modem_initialize:
 133              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 134              		.loc 1 28 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138 0000 80B5     		push	{r7, lr}
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 4


 143              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 144              		.loc 1 31 0
 145 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 146              		.loc 1 32 0
 147 0008 154B     		ldr	r3, .L7
 148 000a 0022     		movs	r2, #0
 149 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 150              		.loc 1 34 0
 151 000e 154B     		ldr	r3, .L7+4
 152 0010 0022     		movs	r2, #0
 153 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 154              		.loc 1 35 0
 155 0016 134B     		ldr	r3, .L7+4
 156 0018 0022     		movs	r2, #0
 157 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 158              		.loc 1 36 0
 159 001c 114B     		ldr	r3, .L7+4
 160 001e 0022     		movs	r2, #0
 161 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 162              		.loc 1 37 0
 163 0022 114B     		ldr	r3, .L7+8
 164 0024 0022     		movs	r2, #0
 165 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 166              		.loc 1 38 0
 167 0028 0F4B     		ldr	r3, .L7+8
 168 002a 0022     		movs	r2, #0
 169 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 170              		.loc 1 39 0
 171 002e 0E4B     		ldr	r3, .L7+8
 172 0030 0022     		movs	r2, #0
 173 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 174              		.loc 1 40 0
 175 0034 0C4B     		ldr	r3, .L7+8
 176 0036 0022     		movs	r2, #0
 177 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 178              		.loc 1 41 0
 179 003a 0B4B     		ldr	r3, .L7+8
 180 003c 0022     		movs	r2, #0
 181 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 182              		.loc 1 42 0
 183 0040 094B     		ldr	r3, .L7+8
 184 0042 0022     		movs	r2, #0
 185 0044 5A61     		str	r2, [r3, #20]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 5


  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 186              		.loc 1 43 0
 187 0046 084B     		ldr	r3, .L7+8
 188 0048 0022     		movs	r2, #0
 189 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 190              		.loc 1 44 0
 191 004c 064B     		ldr	r3, .L7+8
 192 004e 0022     		movs	r2, #0
 193 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 194              		.loc 1 48 0
 195 0052 0021     		movs	r1, #0
 196 0054 4020     		movs	r0, #64
 197 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 198              		.loc 1 50 0
 199 005a 00BF     		nop
 200 005c 80BD     		pop	{r7, pc}
 201              	.L8:
 202 005e 00BF     		.align	2
 203              	.L7:
 204 0060 00000000 		.word	modem_state
 205 0064 00000000 		.word	modem_info
 206 0068 00000000 		.word	modem_stats
 207              		.cfi_endproc
 208              	.LFE65:
 209              		.size	modem_initialize, .-modem_initialize
 210              		.section	.text.pins_configure_inactive,"ax",%progbits
 211              		.align	2
 212              		.global	pins_configure_inactive
 213              		.thumb
 214              		.thumb_func
 215              		.type	pins_configure_inactive, %function
 216              	pins_configure_inactive:
 217              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 218              		.loc 1 54 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 7, -8
 225              		.cfi_offset 14, -4
 226 0002 00AF     		add	r7, sp, #0
 227              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 228              		.loc 1 56 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 6


 229 0004 0020     		movs	r0, #0
 230 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 231              		.loc 1 57 0
 232 000a 0C20     		movs	r0, #12
 233 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 234              		.loc 1 59 0
 235 0010 0020     		movs	r0, #0
 236 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 237              		.loc 1 62 0
 238 0016 0020     		movs	r0, #0
 239 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 240              		.loc 1 63 0
 241 001c 0020     		movs	r0, #0
 242 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 243              		.loc 1 64 0
 244 0022 0020     		movs	r0, #0
 245 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 246              		.loc 1 65 0
 247 0028 0020     		movs	r0, #0
 248 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 249              		.loc 1 67 0
 250 002e 00BF     		nop
 251 0030 80BD     		pop	{r7, pc}
 252              		.cfi_endproc
 253              	.LFE66:
 254              		.size	pins_configure_inactive, .-pins_configure_inactive
 255 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 256              		.align	2
 257              		.global	pins_configure_active
 258              		.thumb
 259              		.thumb_func
 260              		.type	pins_configure_active, %function
 261              	pins_configure_active:
 262              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 263              		.loc 1 70 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 14, -4
 271 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 7


 272              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 273              		.loc 1 72 0
 274 0004 0220     		movs	r0, #2
 275 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 276              		.loc 1 73 0
 277 000a 0120     		movs	r0, #1
 278 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 279              		.loc 1 74 0
 280 0010 0120     		movs	r0, #1
 281 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 282              		.loc 1 75 0
 283 0016 6420     		movs	r0, #100
 284 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 285              		.loc 1 76 0
 286 001c 00BF     		nop
 287 001e 80BD     		pop	{r7, pc}
 288              		.cfi_endproc
 289              	.LFE67:
 290              		.size	pins_configure_active, .-pins_configure_active
 291              		.section	.rodata
 292              		.align	2
 293              	.LC0:
 294 0000 4F4B00   		.ascii	"OK\000"
 295 0003 00       		.align	2
 296              	.LC1:
 297 0004 41542353 		.ascii	"AT#SHDN\015\000"
 297      48444E0D 
 297      00
 298              		.section	.text.modem_power_down,"ax",%progbits
 299              		.align	2
 300              		.global	modem_power_down
 301              		.thumb
 302              		.thumb_func
 303              		.type	modem_power_down, %function
 304              	modem_power_down:
 305              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 306              		.loc 1 79 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0000 80B5     		push	{r7, lr}
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 00AF     		add	r7, sp, #0
 315              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 8


  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 316              		.loc 1 82 0
 317 0004 41F28832 		movw	r2, #5000
 318 0008 0A49     		ldr	r1, .L12
 319 000a 0B48     		ldr	r0, .L12+4
 320 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 321              		.loc 1 85 0
 322 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 323              		.loc 1 86 0
 324 0014 4FF47A70 		mov	r0, #1000
 325 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 326              		.loc 1 88 0
 327 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 328              		.loc 1 89 0
 329 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 330              		.loc 1 90 0
 331 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 332              		.loc 1 91 0
 333 0028 044B     		ldr	r3, .L12+8
 334 002a 0022     		movs	r2, #0
 335 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 336              		.loc 1 93 0
 337 002e 00BF     		nop
 338 0030 80BD     		pop	{r7, pc}
 339              	.L13:
 340 0032 00BF     		.align	2
 341              	.L12:
 342 0034 00000000 		.word	.LC0
 343 0038 04000000 		.word	.LC1
 344 003c 00000000 		.word	modem_state
 345              		.cfi_endproc
 346              	.LFE68:
 347              		.size	modem_power_down, .-modem_power_down
 348              		.section	.rodata
 349 000d 000000   		.align	2
 350              	.LC2:
 351 0010 41544530 		.ascii	"ATE0\015\000"
 351      0D00
 352 0016 0000     		.align	2
 353              	.LC3:
 354 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 354      6D20626F 
 354      6F742074 
 354      696D653A 
 354      20256400 
 355              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 9


 356              	.LC4:
 357 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 357      6D207265 
 357      61647920 
 357      666F7220 
 357      41542063 
 358 005d 000000   		.align	2
 359              	.LC5:
 360 0060 4E6F2072 		.ascii	"No response from modem.\000"
 360      6573706F 
 360      6E736520 
 360      66726F6D 
 360      206D6F64 
 361              		.section	.text.modem_power_up,"ax",%progbits
 362              		.align	2
 363              		.global	modem_power_up
 364              		.thumb
 365              		.thumb_func
 366              		.type	modem_power_up, %function
 367              	modem_power_up:
 368              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 369              		.loc 1 97 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 8
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373 0000 80B5     		push	{r7, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 7, -8
 376              		.cfi_offset 14, -4
 377 0002 82B0     		sub	sp, sp, #8
 378              		.cfi_def_cfa_offset 16
 379 0004 00AF     		add	r7, sp, #0
 380              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 381              		.loc 1 99 0
 382 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 383              		.loc 1 100 0
 384 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 385              		.loc 1 101 0
 386 000e 2C48     		ldr	r0, .L27
 387 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 388              		.loc 1 103 0
 389 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 390              		.loc 1 106 0
 391 0018 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 10


 392 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 393              		.loc 1 107 0
 394 001c 0023     		movs	r3, #0
 395 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 396              		.loc 1 109 0
 397 0020 FFF7FEFF 		bl	getTimeStamp
 398 0024 3860     		str	r0, [r7]
 399              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 400              		.loc 1 112 0
 401 0026 0023     		movs	r3, #0
 402 0028 BB71     		strb	r3, [r7, #6]
 403 002a 1CE0     		b	.L15
 404              	.L22:
 405              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 406              		.loc 1 114 0
 407 002c 0023     		movs	r3, #0
 408 002e 7B71     		strb	r3, [r7, #5]
 409 0030 0EE0     		b	.L16
 410              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 411              		.loc 1 116 0
 412 0032 4FF47A72 		mov	r2, #1000
 413 0036 2349     		ldr	r1, .L27+4
 414 0038 2348     		ldr	r0, .L27+8
 415 003a FFF7FEFF 		bl	at_write_command
 416 003e 0346     		mov	r3, r0
 417 0040 002B     		cmp	r3, #0
 418 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 419              		.loc 1 117 0
 420 0044 0123     		movs	r3, #1
 421 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 422              		.loc 1 118 0
 423 0048 05E0     		b	.L18
 424              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 425              		.loc 1 114 0 discriminator 2
 426 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 427 004c 0133     		adds	r3, r3, #1
 428 004e 7B71     		strb	r3, [r7, #5]
 429              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 430              		.loc 1 114 0 is_stmt 0 discriminator 1
 431 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 432 0052 132B     		cmp	r3, #19
 433 0054 EDD9     		bls	.L19
 434              	.L18:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 11


 435              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 436              		.loc 1 122 0 is_stmt 1
 437 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 438 0058 012B     		cmp	r3, #1
 439 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 440              		.loc 1 126 0 discriminator 2
 441 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 442              		.loc 1 112 0 discriminator 2
 443 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 444 0062 0133     		adds	r3, r3, #1
 445 0064 BB71     		strb	r3, [r7, #6]
 446              	.L15:
 112:modem.c       ****         
 447              		.loc 1 112 0 is_stmt 0 discriminator 1
 448 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 449 0068 022B     		cmp	r3, #2
 450 006a DFD9     		bls	.L22
 451 006c 00E0     		b	.L21
 452              	.L26:
 123:modem.c       ****             break;
 453              		.loc 1 123 0 is_stmt 1
 454 006e 00BF     		nop
 455              	.L21:
 456              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 457              		.loc 1 130 0
 458 0070 FFF7FEFF 		bl	getTimeStamp
 459 0074 0246     		mov	r2, r0
 460 0076 3B68     		ldr	r3, [r7]
 461 0078 D31A     		subs	r3, r2, r3
 462 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 463              		.loc 1 131 0
 464 007c 3A68     		ldr	r2, [r7]
 465 007e 1349     		ldr	r1, .L27+12
 466 0080 0020     		movs	r0, #0
 467 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 468              		.loc 1 133 0
 469 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 0088 012B     		cmp	r3, #1
 471 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 472              		.loc 1 134 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 12


 473 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 474 008e 1A46     		mov	r2, r3
 475 0090 0F49     		ldr	r1, .L27+16
 476 0092 0020     		movs	r0, #0
 477 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 478              		.loc 1 135 0
 479 0098 0E4B     		ldr	r3, .L27+20
 480 009a 0122     		movs	r2, #1
 481 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 482              		.loc 1 143 0
 483 009e 0123     		movs	r3, #1
 484 00a0 09E0     		b	.L25
 485              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 486              		.loc 1 137 0
 487 00a2 0D49     		ldr	r1, .L27+24
 488 00a4 0220     		movs	r0, #2
 489 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 490              		.loc 1 138 0
 491 00aa 0A4B     		ldr	r3, .L27+20
 492 00ac 0022     		movs	r2, #0
 493 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 494              		.loc 1 140 0
 495 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 496              		.loc 1 141 0
 497 00b4 0023     		movs	r3, #0
 498              	.L25:
 144:modem.c       **** }
 499              		.loc 1 144 0
 500 00b6 1846     		mov	r0, r3
 501 00b8 0837     		adds	r7, r7, #8
 502              		.cfi_def_cfa_offset 8
 503 00ba BD46     		mov	sp, r7
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 00bc 80BD     		pop	{r7, pc}
 507              	.L28:
 508 00be 00BF     		.align	2
 509              	.L27:
 510 00c0 00000000 		.word	isr_telit_rx
 511 00c4 00000000 		.word	.LC0
 512 00c8 10000000 		.word	.LC2
 513 00cc 18000000 		.word	.LC3
 514 00d0 2C000000 		.word	.LC4
 515 00d4 00000000 		.word	modem_state
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 13


 516 00d8 60000000 		.word	.LC5
 517              		.cfi_endproc
 518              	.LFE69:
 519              		.size	modem_power_up, .-modem_power_up
 520              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 521              		.align	2
 522              		.global	modem_soft_power_cycle
 523              		.thumb
 524              		.thumb_func
 525              		.type	modem_soft_power_cycle, %function
 526              	modem_soft_power_cycle:
 527              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 528              		.loc 1 147 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              		.cfi_def_cfa_offset 8
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 538              		.loc 1 148 0
 539 0004 0120     		movs	r0, #1
 540 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 541              		.loc 1 149 0
 542 000a 4FF4FA60 		mov	r0, #2000
 543 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 544              		.loc 1 150 0
 545 0012 0020     		movs	r0, #0
 546 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 547              		.loc 1 152 0
 548 0018 00BF     		nop
 549 001a 80BD     		pop	{r7, pc}
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 553              		.section	.text.uart_string_reset,"ax",%progbits
 554              		.align	2
 555              		.global	uart_string_reset
 556              		.thumb
 557              		.thumb_func
 558              		.type	uart_string_reset, %function
 559              	uart_string_reset:
 560              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 561              		.loc 1 155 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 14


 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565 0000 80B5     		push	{r7, lr}
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 569 0002 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 571              		.loc 1 156 0
 572 0004 064B     		ldr	r3, .L31
 573 0006 0022     		movs	r2, #0
 574 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 575              		.loc 1 158 0
 576 000a 4FF48062 		mov	r2, #1024
 577 000e 0021     		movs	r1, #0
 578 0010 0448     		ldr	r0, .L31+4
 579 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 580              		.loc 1 160 0
 581 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 582              		.loc 1 161 0
 583 001a 00BF     		nop
 584 001c 80BD     		pop	{r7, pc}
 585              	.L32:
 586 001e 00BF     		.align	2
 587              	.L31:
 588 0020 00000000 		.word	uart_string_index
 589 0024 00000000 		.word	uart_received_string
 590              		.cfi_endproc
 591              	.LFE71:
 592              		.size	uart_string_reset, .-uart_string_reset
 593              		.section	.rodata
 594              		.align	2
 595              	.LC6:
 596 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 596      6D207365 
 596      6E742041 
 596      5420636F 
 596      6D6D616E 
 597              		.align	2
 598              	.LC7:
 599 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 599      6D205265 
 599      63656976 
 599      65642065 
 599      78706563 
 600 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 600      616E643A 
 600      2025730A 
 600      52656365 
 600      69766564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 15


 601 00f1 000000   		.align	2
 602              	.LC8:
 603 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 603      6D207265 
 603      71756972 
 603      65642025 
 603      64207472 
 604 0127 0A00     		.ascii	"\012\000"
 605 0129 000000   		.align	2
 606              	.LC9:
 607 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 607      64206E6F 
 607      74207772 
 607      69746520 
 607      41542063 
 608 0159 00       		.ascii	"\000"
 609              		.section	.text.at_write_command,"ax",%progbits
 610              		.align	2
 611              		.global	at_write_command
 612              		.thumb
 613              		.thumb_func
 614              		.type	at_write_command, %function
 615              	at_write_command:
 616              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 617              		.loc 1 166 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 40
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 0000 80B5     		push	{r7, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 8AB0     		sub	sp, sp, #40
 626              		.cfi_def_cfa_offset 48
 627 0004 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 629 0006 F860     		str	r0, [r7, #12]
 630 0008 B960     		str	r1, [r7, #8]
 631 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 632              		.loc 1 168 0
 633 000c 0023     		movs	r3, #0
 634 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 635              		.loc 1 170 0
 636 0010 0023     		movs	r3, #0
 637 0012 7B62     		str	r3, [r7, #36]
 638 0014 46E0     		b	.L34
 639              	.L42:
 640              	.LBB4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 16


 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 641              		.loc 1 173 0
 642 0016 0A23     		movs	r3, #10
 643 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 644              		.loc 1 174 0
 645 001a 7A68     		ldr	r2, [r7, #4]
 646 001c FB69     		ldr	r3, [r7, #28]
 647 001e B2FBF3F3 		udiv	r3, r2, r3
 648 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 649              		.loc 1 177 0
 650 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 651              		.loc 1 180 0
 652 0028 F868     		ldr	r0, [r7, #12]
 653 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 654              		.loc 1 184 0
 655 002e 7B68     		ldr	r3, [r7, #4]
 656 0030 002B     		cmp	r3, #0
 657 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 658              		.loc 1 185 0
 659 0034 FA68     		ldr	r2, [r7, #12]
 660 0036 1F49     		ldr	r1, .L43
 661 0038 0020     		movs	r0, #0
 662 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 663              		.loc 1 186 0
 664 003e 0123     		movs	r3, #1
 665 0040 34E0     		b	.L36
 666              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 667              		.loc 1 190 0
 668 0042 0023     		movs	r3, #0
 669 0044 3B62     		str	r3, [r7, #32]
 670 0046 20E0     		b	.L37
 671              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 672              		.loc 1 191 0
 673 0048 F869     		ldr	r0, [r7, #28]
 674 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 17


 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 675              		.loc 1 194 0
 676 004e B968     		ldr	r1, [r7, #8]
 677 0050 1948     		ldr	r0, .L43+4
 678 0052 FFF7FEFF 		bl	strstr
 679 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 680              		.loc 1 195 0
 681 0058 7B69     		ldr	r3, [r7, #20]
 682 005a 002B     		cmp	r3, #0
 683 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 684              		.loc 1 196 0
 685 005e 7B6A     		ldr	r3, [r7, #36]
 686 0060 002B     		cmp	r3, #0
 687 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 688              		.loc 1 198 0
 689 0064 144B     		ldr	r3, .L43+4
 690 0066 FA68     		ldr	r2, [r7, #12]
 691 0068 1449     		ldr	r1, .L43+8
 692 006a 0020     		movs	r0, #0
 693 006c FFF7FEFF 		bl	printNotif
 694 0070 06E0     		b	.L40
 695              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 696              		.loc 1 200 0
 697 0072 7B6A     		ldr	r3, [r7, #36]
 698 0074 5A1C     		adds	r2, r3, #1
 699 0076 104B     		ldr	r3, .L43+4
 700 0078 1149     		ldr	r1, .L43+12
 701 007a 0120     		movs	r0, #1
 702 007c FFF7FEFF 		bl	printNotif
 703              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 704              		.loc 1 203 0
 705 0080 0123     		movs	r3, #1
 706 0082 13E0     		b	.L36
 707              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 708              		.loc 1 190 0 discriminator 2
 709 0084 3B6A     		ldr	r3, [r7, #32]
 710 0086 0133     		adds	r3, r3, #1
 711 0088 3B62     		str	r3, [r7, #32]
 712              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 713              		.loc 1 190 0 is_stmt 0 discriminator 1
 714 008a 3A6A     		ldr	r2, [r7, #32]
 715 008c BB69     		ldr	r3, [r7, #24]
 716 008e 9A42     		cmp	r2, r3
 717 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 18


 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 718              		.loc 1 209 0 is_stmt 1 discriminator 2
 719 0092 094B     		ldr	r3, .L43+4
 720 0094 FA68     		ldr	r2, [r7, #12]
 721 0096 0B49     		ldr	r1, .L43+16
 722 0098 0220     		movs	r0, #2
 723 009a FFF7FEFF 		bl	printNotif
 724              	.LBE4:
 170:modem.c       ****         
 725              		.loc 1 170 0 discriminator 2
 726 009e 7B6A     		ldr	r3, [r7, #36]
 727 00a0 0133     		adds	r3, r3, #1
 728 00a2 7B62     		str	r3, [r7, #36]
 729              	.L34:
 170:modem.c       ****         
 730              		.loc 1 170 0 is_stmt 0 discriminator 1
 731 00a4 7B6A     		ldr	r3, [r7, #36]
 732 00a6 022B     		cmp	r3, #2
 733 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 734              		.loc 1 214 0 is_stmt 1
 735 00aa 0023     		movs	r3, #0
 736              	.L36:
 215:modem.c       **** }
 737              		.loc 1 215 0
 738 00ac 1846     		mov	r0, r3
 739 00ae 2837     		adds	r7, r7, #40
 740              		.cfi_def_cfa_offset 8
 741 00b0 BD46     		mov	sp, r7
 742              		.cfi_def_cfa_register 13
 743              		@ sp needed
 744 00b2 80BD     		pop	{r7, pc}
 745              	.L44:
 746              		.align	2
 747              	.L43:
 748 00b4 78000000 		.word	.LC6
 749 00b8 00000000 		.word	uart_received_string
 750 00bc A4000000 		.word	.LC7
 751 00c0 F4000000 		.word	.LC8
 752 00c4 2C010000 		.word	.LC9
 753              		.cfi_endproc
 754              	.LFE72:
 755              		.size	at_write_command, .-at_write_command
 756              		.section	.rodata
 757 015a 0000     		.align	2
 758              	.LC10:
 759 015c 54455354 		.ascii	"TEST_MODEM\000"
 759      5F4D4F44 
 759      454D00
 760 0167 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 19


 761              	.LC11:
 762 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 762      65706F6E 
 762      73652066 
 762      726F6D20 
 762      6D6F6465 
 763 017f 00       		.align	2
 764              	.LC12:
 765 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 765      6D20636F 
 765      6E6E6563 
 765      74656420 
 765      746F206E 
 766              		.section	.text.modem_test,"ax",%progbits
 767              		.align	2
 768              		.global	modem_test
 769              		.thumb
 770              		.thumb_func
 771              		.type	modem_test, %function
 772              	modem_test:
 773              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 774              		.loc 1 218 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 408
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778 0000 B0B5     		push	{r4, r5, r7, lr}
 779              		.cfi_def_cfa_offset 16
 780              		.cfi_offset 4, -16
 781              		.cfi_offset 5, -12
 782              		.cfi_offset 7, -8
 783              		.cfi_offset 14, -4
 784 0002 E6B0     		sub	sp, sp, #408
 785              		.cfi_def_cfa_offset 424
 786 0004 00AF     		add	r7, sp, #0
 787              		.cfi_def_cfa_register 7
 788 0006 3B1D     		adds	r3, r7, #4
 789 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 790              		.loc 1 221 0
 791 000a 07F10C03 		add	r3, r7, #12
 792 000e 0022     		movs	r2, #0
 793 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 794              		.loc 1 223 0
 795 0014 07F10C03 		add	r3, r7, #12
 796 0018 364A     		ldr	r2, .L53
 797 001a 07CA     		ldmia	r2, {r0, r1, r2}
 798 001c 03C3     		stmia	r3!, {r0, r1}
 799 001e 1A80     		strh	r2, [r3]	@ movhi
 800 0020 0233     		adds	r3, r3, #2
 801 0022 120C     		lsrs	r2, r2, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 20


 802 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 803              		.loc 1 224 0
 804 0026 07F10C03 		add	r3, r7, #12
 805 002a 8133     		adds	r3, r3, #129
 806 002c 324A     		ldr	r2, .L53+4
 807 002e 1C46     		mov	r4, r3
 808 0030 1546     		mov	r5, r2
 809 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 810 0034 2060     		str	r0, [r4]	@ unaligned
 811 0036 6160     		str	r1, [r4, #4]	@ unaligned
 812 0038 A260     		str	r2, [r4, #8]	@ unaligned
 813 003a E360     		str	r3, [r4, #12]	@ unaligned
 814 003c 2868     		ldr	r0, [r5]	@ unaligned
 815 003e 2061     		str	r0, [r4, #16]	@ unaligned
 816 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 817 0042 AA79     		ldrb	r2, [r5, #6]
 818 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 819 0046 1346     		mov	r3, r2
 820 0048 A375     		strb	r3, [r4, #22]
 821              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 822              		.loc 1 227 0
 823 004a 0023     		movs	r3, #0
 824 004c C7F89431 		str	r3, [r7, #404]
 825 0050 3AE0     		b	.L46
 826              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 827              		.loc 1 229 0
 828 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 829              		.loc 1 231 0
 830 0056 FFF7FEFF 		bl	modem_get_state
 831 005a 0346     		mov	r3, r0
 832 005c 002B     		cmp	r3, #0
 833 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 834              		.loc 1 233 0
 835 0060 FFF7FEFF 		bl	modem_power_up
 836 0064 27E0     		b	.L48
 837              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 838              		.loc 1 236 0
 839 0066 FFF7FEFF 		bl	modem_get_state
 840 006a 0346     		mov	r3, r0
 841 006c 042B     		cmp	r3, #4
 842 006e 22D1     		bne	.L48
 843              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 21


 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 844              		.loc 1 240 0
 845 0070 FFF7FEFF 		bl	modem_get_network_time
 846 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 847              		.loc 1 241 0
 848 0078 D7F89031 		ldr	r3, [r7, #400]
 849 007c 002B     		cmp	r3, #0
 850 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 851              		.loc 1 242 0
 852 0080 D7F89001 		ldr	r0, [r7, #400]
 853 0084 FFF7FEFF 		bl	setTime
 854              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 855              		.loc 1 245 0
 856 0088 07F10C03 		add	r3, r7, #12
 857 008c 8133     		adds	r3, r3, #129
 858 008e 1B4A     		ldr	r2, .L53+8
 859 0090 1D46     		mov	r5, r3
 860 0092 1446     		mov	r4, r2
 861 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 862 0096 2860     		str	r0, [r5]	@ unaligned
 863 0098 6960     		str	r1, [r5, #4]	@ unaligned
 864 009a AA60     		str	r2, [r5, #8]	@ unaligned
 865 009c EB60     		str	r3, [r5, #12]	@ unaligned
 866 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 867 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 868 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 869 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 870              		.loc 1 246 0
 871 00a6 07F10C03 		add	r3, r7, #12
 872 00aa 0122     		movs	r2, #1
 873 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 874              		.loc 1 248 0
 875 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 876              		.loc 1 249 0
 877 00b4 0CE0     		b	.L50
 878              	.L48:
 879              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 880              		.loc 1 252 0 discriminator 2
 881 00b6 4FF47A70 		mov	r0, #1000
 882 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 883              		.loc 1 227 0 discriminator 2
 884 00be D7F89431 		ldr	r3, [r7, #404]
 885 00c2 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 22


 886 00c4 C7F89431 		str	r3, [r7, #404]
 887              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 888              		.loc 1 227 0 is_stmt 0 discriminator 1
 889 00c8 D7F89431 		ldr	r3, [r7, #404]
 890 00cc 3B2B     		cmp	r3, #59
 891 00ce C0DD     		ble	.L51
 892              	.L50:
 893              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 894              		.loc 1 256 0 is_stmt 1
 895 00d0 3B1D     		adds	r3, r7, #4
 896 00d2 1A68     		ldr	r2, [r3]
 897 00d4 07F10C03 		add	r3, r7, #12
 898 00d8 1046     		mov	r0, r2
 899 00da 1946     		mov	r1, r3
 900 00dc 40F28113 		movw	r3, #385
 901 00e0 1A46     		mov	r2, r3
 902 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 903              		.loc 1 257 0
 904 00e6 3B1D     		adds	r3, r7, #4
 905 00e8 1868     		ldr	r0, [r3]
 906 00ea 07F5CC77 		add	r7, r7, #408
 907              		.cfi_def_cfa_offset 16
 908 00ee BD46     		mov	sp, r7
 909              		.cfi_def_cfa_register 13
 910              		@ sp needed
 911 00f0 B0BD     		pop	{r4, r5, r7, pc}
 912              	.L54:
 913 00f2 00BF     		.align	2
 914              	.L53:
 915 00f4 5C010000 		.word	.LC10
 916 00f8 68010000 		.word	.LC11
 917 00fc 80010000 		.word	.LC12
 918              		.cfi_endproc
 919              	.LFE73:
 920              		.size	modem_test, .-modem_test
 921              		.section	.text.extract_string,"ax",%progbits
 922              		.align	2
 923              		.global	extract_string
 924              		.thumb
 925              		.thumb_func
 926              		.type	extract_string, %function
 927              	extract_string:
 928              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 929              		.loc 1 260 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 24
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 23


 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 86B0     		sub	sp, sp, #24
 938              		.cfi_def_cfa_offset 32
 939 0004 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0006 F860     		str	r0, [r7, #12]
 942 0008 B960     		str	r1, [r7, #8]
 943 000a 7A60     		str	r2, [r7, #4]
 944 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 945              		.loc 1 266 0
 946 000e B968     		ldr	r1, [r7, #8]
 947 0010 F868     		ldr	r0, [r7, #12]
 948 0012 FFF7FEFF 		bl	strstr
 949 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 950              		.loc 1 267 0
 951 0018 7B69     		ldr	r3, [r7, #20]
 952 001a 002B     		cmp	r3, #0
 953 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 954              		.loc 1 269 0
 955 001e FB68     		ldr	r3, [r7, #12]
 956 0020 7B61     		str	r3, [r7, #20]
 957              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 958              		.loc 1 272 0
 959 0022 B868     		ldr	r0, [r7, #8]
 960 0024 FFF7FEFF 		bl	strlen
 961 0028 0246     		mov	r2, r0
 962 002a 7B69     		ldr	r3, [r7, #20]
 963 002c 1344     		add	r3, r3, r2
 964 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 965              		.loc 1 277 0
 966 0030 7968     		ldr	r1, [r7, #4]
 967 0032 7869     		ldr	r0, [r7, #20]
 968 0034 FFF7FEFF 		bl	strstr
 969 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 970              		.loc 1 278 0
 971 003a 3B69     		ldr	r3, [r7, #16]
 972 003c 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 24


 973 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 974              		.loc 1 280 0
 975 0040 F868     		ldr	r0, [r7, #12]
 976 0042 FFF7FEFF 		bl	strlen
 977 0046 0246     		mov	r2, r0
 978 0048 FB68     		ldr	r3, [r7, #12]
 979 004a 1344     		add	r3, r3, r2
 980 004c 3B61     		str	r3, [r7, #16]
 981              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 982              		.loc 1 284 0
 983 004e 3A69     		ldr	r2, [r7, #16]
 984 0050 7B69     		ldr	r3, [r7, #20]
 985 0052 D31A     		subs	r3, r2, r3
 986 0054 1A46     		mov	r2, r3
 987 0056 7969     		ldr	r1, [r7, #20]
 988 0058 3868     		ldr	r0, [r7]
 989 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 990              		.loc 1 285 0
 991 005e 3A69     		ldr	r2, [r7, #16]
 992 0060 7B69     		ldr	r3, [r7, #20]
 993 0062 D31A     		subs	r3, r2, r3
 994 0064 1A46     		mov	r2, r3
 995 0066 3B68     		ldr	r3, [r7]
 996 0068 1344     		add	r3, r3, r2
 997 006a 0022     		movs	r2, #0
 998 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 999              		.loc 1 286 0
 1000 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 1001              		.loc 1 288 0
 1002 0070 1846     		mov	r0, r3
 1003 0072 1837     		adds	r7, r7, #24
 1004              		.cfi_def_cfa_offset 8
 1005 0074 BD46     		mov	sp, r7
 1006              		.cfi_def_cfa_register 13
 1007              		@ sp needed
 1008 0076 80BD     		pop	{r7, pc}
 1009              		.cfi_endproc
 1010              	.LFE74:
 1011              		.size	extract_string, .-extract_string
 1012              		.section	.rodata
 1013              		.align	2
 1014              	.LC13:
 1015 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1015      20746F20 
 1015      636F6E6E 
 1015      65637420 
 1015      746F206E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 25


 1016 01c3 00       		.align	2
 1017              	.LC14:
 1018 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1018      6D207469 
 1018      6D656420 
 1018      6F757420 
 1018      6F6E206E 
 1019 01e7 00       		.align	2
 1020              	.LC15:
 1021 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1021      69726564 
 1021      20495020 
 1021      61646472 
 1021      6573733A 
 1022              		.align	2
 1023              	.LC16:
 1024 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1024      6D207469 
 1024      6D656420 
 1024      6F757420 
 1024      6F6E2049 
 1025              		.section	.text.modem_process_tasks,"ax",%progbits
 1026              		.align	2
 1027              		.global	modem_process_tasks
 1028              		.thumb
 1029              		.thumb_func
 1030              		.type	modem_process_tasks, %function
 1031              	modem_process_tasks:
 1032              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1033              		.loc 1 291 0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 8
 1036              		@ frame_needed = 1, uses_anonymous_args = 0
 1037 0000 80B5     		push	{r7, lr}
 1038              		.cfi_def_cfa_offset 8
 1039              		.cfi_offset 7, -8
 1040              		.cfi_offset 14, -4
 1041 0002 82B0     		sub	sp, sp, #8
 1042              		.cfi_def_cfa_offset 16
 1043 0004 00AF     		add	r7, sp, #0
 1044              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1045              		.loc 1 293 0
 1046 0006 534B     		ldr	r3, .L75
 1047 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1048 000a 012B     		cmp	r3, #1
 1049 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1050              		.loc 1 295 0
 1051 000e FFF7FEFF 		bl	getTimeStamp
 1052 0012 0246     		mov	r2, r0
 1053 0014 504B     		ldr	r3, .L75+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 26


 1054 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1055              		.loc 1 296 0
 1056 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1057              		.loc 1 297 0
 1058 001c 4D4B     		ldr	r3, .L75
 1059 001e 0222     		movs	r2, #2
 1060 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1061              		.loc 1 298 0
 1062 0022 0123     		movs	r3, #1
 1063 0024 92E0     		b	.L61
 1064              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1065              		.loc 1 302 0
 1066 0026 4B4B     		ldr	r3, .L75
 1067 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1068 002a 022B     		cmp	r3, #2
 1069 002c 5FD1     		bne	.L62
 1070              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1071              		.loc 1 305 0
 1072 002e 0023     		movs	r3, #0
 1073 0030 FB71     		strb	r3, [r7, #7]
 1074 0032 2BE0     		b	.L63
 1075              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1076              		.loc 1 307 0
 1077 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1078              		.loc 1 309 0
 1079 0038 484B     		ldr	r3, .L75+8
 1080 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1081 003c 83F00103 		eor	r3, r3, #1
 1082 0040 DBB2     		uxtb	r3, r3
 1083 0042 002B     		cmp	r3, #0
 1084 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1085              		.loc 1 312 0
 1086 0046 464B     		ldr	r3, .L75+12
 1087 0048 5B69     		ldr	r3, [r3, #20]
 1088 004a 1A2B     		cmp	r3, #26
 1089 004c 03DD     		ble	.L64
 1090              		.loc 1 312 0 is_stmt 0 discriminator 1
 1091 004e 444B     		ldr	r3, .L75+12
 1092 0050 5B69     		ldr	r3, [r3, #20]
 1093 0052 FF2B     		cmp	r3, #255
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 27


 1094 0054 1ED1     		bne	.L74
 1095              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1096              		.loc 1 317 0 is_stmt 1
 1097 0056 414B     		ldr	r3, .L75+8
 1098 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1099 005a 002B     		cmp	r3, #0
 1100 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1101              		.loc 1 320 0
 1102 005e 404B     		ldr	r3, .L75+12
 1103 0060 9B68     		ldr	r3, [r3, #8]
 1104 0062 242B     		cmp	r3, #36
 1105 0064 03DD     		ble	.L67
 1106              		.loc 1 320 0 is_stmt 0 discriminator 1
 1107 0066 3E4B     		ldr	r3, .L75+12
 1108 0068 9B68     		ldr	r3, [r3, #8]
 1109 006a FF2B     		cmp	r3, #255
 1110 006c 13D1     		bne	.L65
 1111              	.L67:
 1112              		.loc 1 320 0 discriminator 3
 1113 006e 3C4B     		ldr	r3, .L75+12
 1114 0070 5B69     		ldr	r3, [r3, #20]
 1115 0072 1A2B     		cmp	r3, #26
 1116 0074 03DD     		ble	.L66
 1117              		.loc 1 320 0 discriminator 4
 1118 0076 3A4B     		ldr	r3, .L75+12
 1119 0078 5B69     		ldr	r3, [r3, #20]
 1120 007a FF2B     		cmp	r3, #255
 1121 007c 0BD1     		bne	.L65
 1122              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1123              		.loc 1 325 0 is_stmt 1 discriminator 2
 1124 007e 4FF47A70 		mov	r0, #1000
 1125 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1126              		.loc 1 305 0 discriminator 2
 1127 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1128 0088 0133     		adds	r3, r3, #1
 1129 008a FB71     		strb	r3, [r7, #7]
 1130              	.L63:
 305:modem.c       ****             // Get cell network stats
 1131              		.loc 1 305 0 is_stmt 0 discriminator 1
 1132 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1133 008e 1D2B     		cmp	r3, #29
 1134 0090 D0D9     		bls	.L68
 1135 0092 00E0     		b	.L65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 28


 1136              	.L74:
 313:modem.c       ****                 }
 1137              		.loc 1 313 0 is_stmt 1
 1138 0094 00BF     		nop
 1139              	.L65:
 1140              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1141              		.loc 1 329 0
 1142 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1143 009a 0346     		mov	r3, r0
 1144 009c 002B     		cmp	r3, #0
 1145 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1146              		.loc 1 331 0
 1147 00a0 FFF7FEFF 		bl	getTimeStamp
 1148 00a4 0246     		mov	r2, r0
 1149 00a6 2C4B     		ldr	r3, .L75+4
 1150 00a8 1B68     		ldr	r3, [r3]
 1151 00aa D31A     		subs	r3, r2, r3
 1152 00ac 2C4A     		ldr	r2, .L75+12
 1153 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1154              		.loc 1 332 0
 1155 00b0 2B4B     		ldr	r3, .L75+12
 1156 00b2 9B69     		ldr	r3, [r3, #24]
 1157 00b4 1A46     		mov	r2, r3
 1158 00b6 2B49     		ldr	r1, .L75+16
 1159 00b8 0020     		movs	r0, #0
 1160 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1161              		.loc 1 334 0
 1162 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1163              		.loc 1 335 0
 1164 00c2 244B     		ldr	r3, .L75
 1165 00c4 0322     		movs	r2, #3
 1166 00c6 1A70     		strb	r2, [r3]
 1167              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1168              		.loc 1 339 0
 1169 00c8 FFF7FEFF 		bl	getTimeStamp
 1170 00cc 0246     		mov	r2, r0
 1171 00ce 224B     		ldr	r3, .L75+4
 1172 00d0 1B68     		ldr	r3, [r3]
 1173 00d2 D31A     		subs	r3, r2, r3
 1174 00d4 B42B     		cmp	r3, #180
 1175 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1176              		.loc 1 340 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 29


 1177 00d8 1E4B     		ldr	r3, .L75
 1178 00da 0022     		movs	r2, #0
 1179 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1180              		.loc 1 341 0
 1181 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1182              		.loc 1 342 0
 1183 00e2 2149     		ldr	r1, .L75+20
 1184 00e4 0220     		movs	r0, #2
 1185 00e6 FFF7FEFF 		bl	printNotif
 1186              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1187              		.loc 1 345 0
 1188 00ea 0023     		movs	r3, #0
 1189 00ec 2EE0     		b	.L61
 1190              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1191              		.loc 1 348 0
 1192 00ee 194B     		ldr	r3, .L75
 1193 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1194 00f2 032B     		cmp	r3, #3
 1195 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1196              		.loc 1 350 0
 1197 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1198 00fa 0346     		mov	r3, r0
 1199 00fc 002B     		cmp	r3, #0
 1200 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1201              		.loc 1 351 0
 1202 0100 144B     		ldr	r3, .L75
 1203 0102 0422     		movs	r2, #4
 1204 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1205              		.loc 1 353 0
 1206 0106 FFF7FEFF 		bl	getTimeStamp
 1207 010a 0246     		mov	r2, r0
 1208 010c 124B     		ldr	r3, .L75+4
 1209 010e 1B68     		ldr	r3, [r3]
 1210 0110 D31A     		subs	r3, r2, r3
 1211 0112 134A     		ldr	r2, .L75+12
 1212 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1213              		.loc 1 354 0
 1214 0116 124B     		ldr	r3, .L75+12
 1215 0118 DB69     		ldr	r3, [r3, #28]
 1216 011a 1A46     		mov	r2, r3
 1217 011c 1349     		ldr	r1, .L75+24
 1218 011e 0020     		movs	r0, #0
 1219 0120 FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 30


 1220              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1221              		.loc 1 359 0
 1222 0124 FFF7FEFF 		bl	getTimeStamp
 1223 0128 0246     		mov	r2, r0
 1224 012a 0B4B     		ldr	r3, .L75+4
 1225 012c 1B68     		ldr	r3, [r3]
 1226 012e D31A     		subs	r3, r2, r3
 1227 0130 E62B     		cmp	r3, #230
 1228 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1229              		.loc 1 360 0
 1230 0134 074B     		ldr	r3, .L75
 1231 0136 0022     		movs	r2, #0
 1232 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1233              		.loc 1 361 0
 1234 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1235              		.loc 1 362 0
 1236 013e 0C49     		ldr	r1, .L75+28
 1237 0140 0220     		movs	r0, #2
 1238 0142 FFF7FEFF 		bl	printNotif
 1239              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1240              		.loc 1 365 0
 1241 0146 0023     		movs	r3, #0
 1242 0148 00E0     		b	.L61
 1243              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1244              		.loc 1 368 0
 1245 014a 0023     		movs	r3, #0
 1246              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1247              		.loc 1 370 0
 1248 014c 1846     		mov	r0, r3
 1249 014e 0837     		adds	r7, r7, #8
 1250              		.cfi_def_cfa_offset 8
 1251 0150 BD46     		mov	sp, r7
 1252              		.cfi_def_cfa_register 13
 1253              		@ sp needed
 1254 0152 80BD     		pop	{r7, pc}
 1255              	.L76:
 1256              		.align	2
 1257              	.L75:
 1258 0154 00000000 		.word	modem_state
 1259 0158 00000000 		.word	modem_start_time_stamp
 1260 015c 00000000 		.word	updatable_parameters
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 31


 1261 0160 00000000 		.word	modem_stats
 1262 0164 9C010000 		.word	.LC13
 1263 0168 C4010000 		.word	.LC14
 1264 016c E8010000 		.word	.LC15
 1265 0170 08020000 		.word	.LC16
 1266              		.cfi_endproc
 1267              	.LFE75:
 1268              		.size	modem_process_tasks, .-modem_process_tasks
 1269              		.section	.rodata
 1270 022f 00       		.align	2
 1271              	.LC17:
 1272 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1272      6B696E67 
 1272      2041542B 
 1272      43524547 
 1272      3F00
 1273 0242 0000     		.align	2
 1274              	.LC18:
 1275 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1275      5245473F 
 1275      0D00
 1276 024e 0000     		.align	2
 1277              	.LC19:
 1278 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1278      61637469 
 1278      6E672073 
 1278      7472696E 
 1278      67204154 
 1279 026b 00       		.align	2
 1280              	.LC20:
 1281 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1281      5F726563 
 1281      65697665 
 1281      645F7374 
 1281      72696E67 
 1282 0285 000000   		.align	2
 1283              	.LC21:
 1284 0288 0D00     		.ascii	"\015\000"
 1285 028a 0000     		.align	2
 1286              	.LC22:
 1287 028c 3A2000   		.ascii	": \000"
 1288 028f 00       		.align	2
 1289              	.LC23:
 1290 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1290      73746572 
 1290      65642074 
 1290      6F206E65 
 1290      74776F72 
 1291              		.align	2
 1292              	.LC24:
 1293 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1293      20657874 
 1293      72616369 
 1293      6E672073 
 1293      7472696E 
 1294 02cf 00       		.align	2
 1295              	.LC25:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 32


 1296 02d0 302C3100 		.ascii	"0,1\000"
 1297              		.align	2
 1298              	.LC26:
 1299 02d4 302C3500 		.ascii	"0,5\000"
 1300              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1301              		.align	2
 1302              		.global	is_connected_to_cell_network
 1303              		.thumb
 1304              		.thumb_func
 1305              		.type	is_connected_to_cell_network, %function
 1306              	is_connected_to_cell_network:
 1307              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1308              		.loc 1 373 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 16
 1311              		@ frame_needed = 1, uses_anonymous_args = 0
 1312 0000 80B5     		push	{r7, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 84B0     		sub	sp, sp, #16
 1317              		.cfi_def_cfa_offset 24
 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1320              		.loc 1 375 0
 1321 0006 2049     		ldr	r1, .L82
 1322 0008 0020     		movs	r0, #0
 1323 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1324              		.loc 1 377 0
 1325 000e 4FF4FA62 		mov	r2, #2000
 1326 0012 1E49     		ldr	r1, .L82+4
 1327 0014 1E48     		ldr	r0, .L82+8
 1328 0016 FFF7FEFF 		bl	at_write_command
 1329 001a 0346     		mov	r3, r0
 1330 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1331              		.loc 1 379 0
 1332 001e 1D49     		ldr	r1, .L82+12
 1333 0020 0020     		movs	r0, #0
 1334 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1335              		.loc 1 380 0
 1336 0026 1C4A     		ldr	r2, .L82+16
 1337 0028 1C49     		ldr	r1, .L82+20
 1338 002a 0020     		movs	r0, #0
 1339 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 33


 1340              		.loc 1 383 0
 1341 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1342 0032 002B     		cmp	r3, #0
 1343 0034 23D0     		beq	.L78
 1344              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1345              		.loc 1 386 0
 1346 0036 0023     		movs	r3, #0
 1347 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1348              		.loc 1 388 0
 1349 003a 3B1D     		adds	r3, r7, #4
 1350 003c 184A     		ldr	r2, .L82+24
 1351 003e 1949     		ldr	r1, .L82+28
 1352 0040 1548     		ldr	r0, .L82+16
 1353 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1354              		.loc 1 389 0
 1355 0046 3B1D     		adds	r3, r7, #4
 1356 0048 1A46     		mov	r2, r3
 1357 004a 1749     		ldr	r1, .L82+32
 1358 004c 0020     		movs	r0, #0
 1359 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1360              		.loc 1 390 0
 1361 0052 1649     		ldr	r1, .L82+36
 1362 0054 0020     		movs	r0, #0
 1363 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1364              		.loc 1 393 0
 1365 005a 3B1D     		adds	r3, r7, #4
 1366 005c 1449     		ldr	r1, .L82+40
 1367 005e 1846     		mov	r0, r3
 1368 0060 FFF7FEFF 		bl	strstr
 1369 0064 0346     		mov	r3, r0
 1370 0066 002B     		cmp	r3, #0
 1371 0068 07D1     		bne	.L79
 1372              		.loc 1 393 0 is_stmt 0 discriminator 1
 1373 006a 3B1D     		adds	r3, r7, #4
 1374 006c 1149     		ldr	r1, .L82+44
 1375 006e 1846     		mov	r0, r3
 1376 0070 FFF7FEFF 		bl	strstr
 1377 0074 0346     		mov	r3, r0
 1378 0076 002B     		cmp	r3, #0
 1379 0078 01D0     		beq	.L78
 1380              	.L79:
 394:modem.c       ****             return 1u;
 1381              		.loc 1 394 0 is_stmt 1
 1382 007a 0123     		movs	r3, #1
 1383 007c 00E0     		b	.L81
 1384              	.L78:
 1385              	.LBE8:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 34


 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1386              		.loc 1 398 0
 1387 007e 0023     		movs	r3, #0
 1388              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1389              		.loc 1 400 0
 1390 0080 1846     		mov	r0, r3
 1391 0082 1037     		adds	r7, r7, #16
 1392              		.cfi_def_cfa_offset 8
 1393 0084 BD46     		mov	sp, r7
 1394              		.cfi_def_cfa_register 13
 1395              		@ sp needed
 1396 0086 80BD     		pop	{r7, pc}
 1397              	.L83:
 1398              		.align	2
 1399              	.L82:
 1400 0088 30020000 		.word	.LC17
 1401 008c 00000000 		.word	.LC0
 1402 0090 44020000 		.word	.LC18
 1403 0094 50020000 		.word	.LC19
 1404 0098 00000000 		.word	uart_received_string
 1405 009c 6C020000 		.word	.LC20
 1406 00a0 88020000 		.word	.LC21
 1407 00a4 8C020000 		.word	.LC22
 1408 00a8 90020000 		.word	.LC23
 1409 00ac B0020000 		.word	.LC24
 1410 00b0 D0020000 		.word	.LC25
 1411 00b4 D4020000 		.word	.LC26
 1412              		.cfi_endproc
 1413              	.LFE76:
 1414              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1415              		.section	.rodata
 1416              		.align	2
 1417              	.LC27:
 1418 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1418      47414354 
 1418      3D312C31 
 1418      0D0A00
 1419              		.section	.text.set_up_internet_connection,"ax",%progbits
 1420              		.align	2
 1421              		.global	set_up_internet_connection
 1422              		.thumb
 1423              		.thumb_func
 1424              		.type	set_up_internet_connection, %function
 1425              	set_up_internet_connection:
 1426              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1427              		.loc 1 403 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 35


 1431 0000 80B5     		push	{r7, lr}
 1432              		.cfi_def_cfa_offset 8
 1433              		.cfi_offset 7, -8
 1434              		.cfi_offset 14, -4
 1435 0002 00AF     		add	r7, sp, #0
 1436              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1437              		.loc 1 414 0
 1438 0004 4FF47A72 		mov	r2, #1000
 1439 0008 0249     		ldr	r1, .L85
 1440 000a 0348     		ldr	r0, .L85+4
 1441 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1442              		.loc 1 416 0
 1443 0010 00BF     		nop
 1444 0012 80BD     		pop	{r7, pc}
 1445              	.L86:
 1446              		.align	2
 1447              	.L85:
 1448 0014 00000000 		.word	.LC0
 1449 0018 D8020000 		.word	.LC27
 1450              		.cfi_endproc
 1451              	.LFE77:
 1452              		.size	set_up_internet_connection, .-set_up_internet_connection
 1453              		.section	.rodata
 1454 02e7 00       		.align	2
 1455              	.LC28:
 1456 02e8 312C3100 		.ascii	"1,1\000"
 1457              		.align	2
 1458              	.LC29:
 1459 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1459      47414354 
 1459      3F0D00
 1460              		.section	.text.is_connected_to_internet,"ax",%progbits
 1461              		.align	2
 1462              		.global	is_connected_to_internet
 1463              		.thumb
 1464              		.thumb_func
 1465              		.type	is_connected_to_internet, %function
 1466              	is_connected_to_internet:
 1467              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1468              		.loc 1 419 0
 1469              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 36


 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472 0000 80B5     		push	{r7, lr}
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 7, -8
 1475              		.cfi_offset 14, -4
 1476 0002 00AF     		add	r7, sp, #0
 1477              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1478              		.loc 1 424 0
 1479 0004 4FF4FA62 		mov	r2, #2000
 1480 0008 0549     		ldr	r1, .L90
 1481 000a 0648     		ldr	r0, .L90+4
 1482 000c FFF7FEFF 		bl	at_write_command
 1483 0010 0346     		mov	r3, r0
 1484 0012 002B     		cmp	r3, #0
 1485 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1486              		.loc 1 425 0
 1487 0016 0123     		movs	r3, #1
 1488 0018 00E0     		b	.L89
 1489              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1490              		.loc 1 427 0
 1491 001a 0023     		movs	r3, #0
 1492              	.L89:
 428:modem.c       **** }
 1493              		.loc 1 428 0
 1494 001c 1846     		mov	r0, r3
 1495 001e 80BD     		pop	{r7, pc}
 1496              	.L91:
 1497              		.align	2
 1498              	.L90:
 1499 0020 E8020000 		.word	.LC28
 1500 0024 EC020000 		.word	.LC29
 1501              		.cfi_endproc
 1502              	.LFE78:
 1503              		.size	is_connected_to_internet, .-is_connected_to_internet
 1504              		.section	.rodata
 1505 02f7 00       		.align	2
 1506              	.LC30:
 1507 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1507      4553510D 
 1507      00
 1508 0301 000000   		.align	2
 1509              	.LC31:
 1510 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1510      4553513A 
 1510      2025642C 
 1510      25642C25 
 1510      642C2564 
 1511              		.section	.text.get_cell_network_stats,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 37


 1512              		.align	2
 1513              		.global	get_cell_network_stats
 1514              		.thumb
 1515              		.thumb_func
 1516              		.type	get_cell_network_stats, %function
 1517              	get_cell_network_stats:
 1518              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1519              		.loc 1 430 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 8
 1522              		@ frame_needed = 1, uses_anonymous_args = 0
 1523 0000 80B5     		push	{r7, lr}
 1524              		.cfi_def_cfa_offset 8
 1525              		.cfi_offset 7, -8
 1526              		.cfi_offset 14, -4
 1527 0002 86B0     		sub	sp, sp, #24
 1528              		.cfi_def_cfa_offset 32
 1529 0004 04AF     		add	r7, sp, #16
 1530              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1531              		.loc 1 432 0
 1532 0006 154B     		ldr	r3, .L93
 1533 0008 FF22     		movs	r2, #255
 1534 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1535              		.loc 1 433 0
 1536 000c 134B     		ldr	r3, .L93
 1537 000e FF22     		movs	r2, #255
 1538 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1539              		.loc 1 434 0
 1540 0012 124B     		ldr	r3, .L93
 1541 0014 FF22     		movs	r2, #255
 1542 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1543              		.loc 1 435 0
 1544 0018 104B     		ldr	r3, .L93
 1545 001a FF22     		movs	r2, #255
 1546 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1547              		.loc 1 436 0
 1548 001e 0F4B     		ldr	r3, .L93
 1549 0020 FF22     		movs	r2, #255
 1550 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1551              		.loc 1 437 0
 1552 0024 0D4B     		ldr	r3, .L93
 1553 0026 FF22     		movs	r2, #255
 1554 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1555              		.loc 1 440 0
 1556 002a 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 38


 1557 002e 0C49     		ldr	r1, .L93+4
 1558 0030 0C48     		ldr	r0, .L93+8
 1559 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1560              		.loc 1 443 0
 1561 0036 0C4B     		ldr	r3, .L93+12
 1562 0038 0393     		str	r3, [sp, #12]
 1563 003a 0C4B     		ldr	r3, .L93+16
 1564 003c 0293     		str	r3, [sp, #8]
 1565 003e 0C4B     		ldr	r3, .L93+20
 1566 0040 0193     		str	r3, [sp, #4]
 1567 0042 0C4B     		ldr	r3, .L93+24
 1568 0044 0093     		str	r3, [sp]
 1569 0046 0C4B     		ldr	r3, .L93+28
 1570 0048 044A     		ldr	r2, .L93
 1571 004a 0C49     		ldr	r1, .L93+32
 1572 004c 0C48     		ldr	r0, .L93+36
 1573 004e FFF7FEFF 		bl	sscanf
 1574 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1575              		.loc 1 458 0
 1576 0054 00BF     		nop
 1577 0056 0837     		adds	r7, r7, #8
 1578              		.cfi_def_cfa_offset 8
 1579 0058 BD46     		mov	sp, r7
 1580              		.cfi_def_cfa_register 13
 1581              		@ sp needed
 1582 005a 80BD     		pop	{r7, pc}
 1583              	.L94:
 1584              		.align	2
 1585              	.L93:
 1586 005c 00000000 		.word	modem_stats
 1587 0060 00000000 		.word	.LC0
 1588 0064 F8020000 		.word	.LC30
 1589 0068 14000000 		.word	modem_stats+20
 1590 006c 10000000 		.word	modem_stats+16
 1591 0070 0C000000 		.word	modem_stats+12
 1592 0074 08000000 		.word	modem_stats+8
 1593 0078 04000000 		.word	modem_stats+4
 1594 007c 04030000 		.word	.LC31
 1595 0080 00000000 		.word	uart_received_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 39


 1596              		.cfi_endproc
 1597              	.LFE79:
 1598              		.size	get_cell_network_stats, .-get_cell_network_stats
 1599              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1600              		.align	2
 1601              		.global	updatable_parameters_initialize
 1602              		.thumb
 1603              		.thumb_func
 1604              		.type	updatable_parameters_initialize, %function
 1605              	updatable_parameters_initialize:
 1606              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1607              		.loc 1 461 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 1, uses_anonymous_args = 0
 1611              		@ link register save eliminated.
 1612 0000 80B4     		push	{r7}
 1613              		.cfi_def_cfa_offset 4
 1614              		.cfi_offset 7, -4
 1615 0002 00AF     		add	r7, sp, #0
 1616              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1617              		.loc 1 462 0
 1618 0004 0F4B     		ldr	r3, .L96
 1619 0006 0022     		movs	r2, #0
 1620 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1621              		.loc 1 463 0
 1622 000a 0E4B     		ldr	r3, .L96
 1623 000c 0122     		movs	r2, #1
 1624 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1625              		.loc 1 464 0
 1626 0010 0C4B     		ldr	r3, .L96
 1627 0012 0122     		movs	r2, #1
 1628 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1629              		.loc 1 465 0
 1630 0016 0B4B     		ldr	r3, .L96
 1631 0018 0122     		movs	r2, #1
 1632 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1633              		.loc 1 466 0
 1634 001c 094B     		ldr	r3, .L96
 1635 001e 0122     		movs	r2, #1
 1636 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     // APP_INTERFACE
 470:modem.c       ****     updatable_parameters.App_LED_freq = 120u; 
 1637              		.loc 1 470 0
 1638 0022 084B     		ldr	r3, .L96
 1639 0024 7822     		movs	r2, #120
 1640 0026 5A71     		strb	r2, [r3, #5]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 40


 471:modem.c       ****     updatable_parameters.Level_Sensor_freq = 120u; 
 1641              		.loc 1 471 0
 1642 0028 064B     		ldr	r3, .L96
 1643 002a 7822     		movs	r2, #120
 1644 002c 9A71     		strb	r2, [r3, #6]
 472:modem.c       ****     updatable_parameters.Downstream_Level_Sensor_freq = 120u;
 1645              		.loc 1 472 0
 1646 002e 054B     		ldr	r3, .L96
 1647 0030 7822     		movs	r2, #120
 1648 0032 DA71     		strb	r2, [r3, #7]
 473:modem.c       ****     updatable_parameters.valve_freq = 120u;
 1649              		.loc 1 473 0
 1650 0034 034B     		ldr	r3, .L96
 1651 0036 7822     		movs	r2, #120
 1652 0038 1A72     		strb	r2, [r3, #8]
 474:modem.c       **** }
 1653              		.loc 1 474 0
 1654 003a 00BF     		nop
 1655 003c BD46     		mov	sp, r7
 1656              		.cfi_def_cfa_register 13
 1657              		@ sp needed
 1658 003e 80BC     		pop	{r7}
 1659              		.cfi_restore 7
 1660              		.cfi_def_cfa_offset 0
 1661 0040 7047     		bx	lr
 1662              	.L97:
 1663 0042 00BF     		.align	2
 1664              	.L96:
 1665 0044 00000000 		.word	updatable_parameters
 1666              		.cfi_endproc
 1667              	.LFE80:
 1668              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1669              		.section	.rodata
 1670 0322 0000     		.align	2
 1671              	.LC32:
 1672 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1672      5F547970 
 1672      653A2000 
 1673              		.align	2
 1674              	.LC33:
 1675 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1675      54797065 
 1675      3A2000
 1676 033b 00       		.align	2
 1677              	.LC34:
 1678 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1678      6C655F46 
 1678      7265713A 
 1678      2000
 1679 034a 0000     		.align	2
 1680              	.LC35:
 1681 034c 5265706F 		.ascii	"Report_Freq: \000"
 1681      72745F46 
 1681      7265713A 
 1681      2000
 1682 035a 0000     		.align	2
 1683              	.LC36:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 41


 1684 035c 44656275 		.ascii	"Debug_Freq: \000"
 1684      675F4672 
 1684      65713A20 
 1684      00
 1685 0369 000000   		.align	2
 1686              	.LC37:
 1687 036c 41707073 		.ascii	"Apps_Enabled: \000"
 1687      5F456E61 
 1687      626C6564 
 1687      3A2000
 1688 037b 00       		.align	2
 1689              	.LC38:
 1690 037c 4C657665 		.ascii	"Level_Sensor\000"
 1690      6C5F5365 
 1690      6E736F72 
 1690      00
 1691 0389 000000   		.align	2
 1692              	.LC39:
 1693 038c 4170705F 		.ascii	"App_LED\000"
 1693      4C454400 
 1694              		.align	2
 1695              	.LC40:
 1696 0394 446F776E 		.ascii	"Downstream_Level\000"
 1696      73747265 
 1696      616D5F4C 
 1696      6576656C 
 1696      00
 1697 03a5 000000   		.align	2
 1698              	.LC41:
 1699 03a8 56616C76 		.ascii	"Valve\000"
 1699      6500
 1700 03ae 0000     		.align	2
 1701              	.LC42:
 1702 03b0 4170705F 		.ascii	"App_LED: \000"
 1702      4C45443A 
 1702      2000
 1703 03ba 0000     		.align	2
 1704              	.LC43:
 1705 03bc 4C657665 		.ascii	"Level_Sensor: \000"
 1705      6C5F5365 
 1705      6E736F72 
 1705      3A2000
 1706 03cb 00       		.align	2
 1707              	.LC44:
 1708 03cc 446F776E 		.ascii	"Downstream_Level: \000"
 1708      73747265 
 1708      616D5F4C 
 1708      6576656C 
 1708      3A2000
 1709 03df 00       		.align	2
 1710              	.LC45:
 1711 03e0 56616C76 		.ascii	"Valve:\000"
 1711      653A00
 1712 03e7 00       		.align	2
 1713              	.LC46:
 1714 03e8 256400   		.ascii	"%d\000"
 1715 03eb 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 42


 1716              	.LC47:
 1717 03ec 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1717      20747970 
 1717      65206368 
 1717      616E6765 
 1717      6420746F 
 1718 0407 00       		.align	2
 1719              	.LC48:
 1720 0408 436F756C 		.ascii	"Could not change node type.\000"
 1720      64206E6F 
 1720      74206368 
 1720      616E6765 
 1720      206E6F64 
 1721              		.align	2
 1722              	.LC49:
 1723 0424 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1723      74797065 
 1723      20636861 
 1723      6E676564 
 1723      20746F3A 
 1724 043e 0000     		.align	2
 1725              	.LC50:
 1726 0440 436F756C 		.ascii	"Could not change SIM type.\000"
 1726      64206E6F 
 1726      74206368 
 1726      616E6765 
 1726      2053494D 
 1727 045b 00       		.align	2
 1728              	.LC51:
 1729 045c 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1729      6C696E67 
 1729      20667265 
 1729      7175656E 
 1729      63792063 
 1730              		.align	2
 1731              	.LC52:
 1732 0480 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1732      64206E6F 
 1732      74207061 
 1732      72736520 
 1732      6E657720 
 1733 04ae 0000     		.align	2
 1734              	.LC53:
 1735 04b0 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1735      7274696E 
 1735      67206672 
 1735      65717565 
 1735      6E637920 
 1736 04d5 000000   		.align	2
 1737              	.LC54:
 1738 04d8 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1738      64206E6F 
 1738      74207061 
 1738      72736520 
 1738      6E657720 
 1739 0507 00       		.align	2
 1740              	.LC55:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 43


 1741 0508 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1741      67207072 
 1741      696E7469 
 1741      6E672066 
 1741      72657175 
 1742 0532 0000     		.align	2
 1743              	.LC56:
 1744 0534 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1744      64206E6F 
 1744      74207061 
 1744      72736520 
 1744      6E657720 
 1745 0563 00       		.align	2
 1746              	.LC57:
 1747 0564 46726571 		.ascii	"Freq=\000"
 1747      3D00
 1748 056a 0000     		.align	2
 1749              	.LC58:
 1750 056c 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1750      4C454420 
 1750      66726571 
 1750      75656E63 
 1750      79206368 
 1751 058f 00       		.align	2
 1752              	.LC59:
 1753 0590 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1753      64206E6F 
 1753      74207061 
 1753      72736520 
 1753      6E657720 
 1754 05bd 000000   		.align	2
 1755              	.LC60:
 1756 05c0 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1756      70705F4C 
 1756      45442066 
 1756      72657175 
 1756      656E6379 
 1757 05e6 0000     		.align	2
 1758              	.LC61:
 1759 05e8 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1759      6C5F5365 
 1759      6E736F72 
 1759      20667265 
 1759      7175656E 
 1760              		.align	2
 1761              	.LC62:
 1762 0610 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1762      64206E6F 
 1762      74207061 
 1762      72736520 
 1762      6E657720 
 1763 0642 0000     		.align	2
 1764              	.LC63:
 1765 0644 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1765      6576656C 
 1765      5F53656E 
 1765      736F7220 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 44


 1765      66726571 
 1766 066f 00       		.align	2
 1767              	.LC64:
 1768 0670 446F776E 		.ascii	"Downstream_Level_Sensor frequency changed to: %d\015"
 1768      73747265 
 1768      616D5F4C 
 1768      6576656C 
 1768      5F53656E 
 1769 06a1 0A00     		.ascii	"\012\000"
 1770 06a3 00       		.align	2
 1771              	.LC65:
 1772 06a4 436F756C 		.ascii	"Could not parse new Downstream_Level_Sensor frequen"
 1772      64206E6F 
 1772      74207061 
 1772      72736520 
 1772      6E657720 
 1773 06d7 63792076 		.ascii	"cy value.\000"
 1773      616C7565 
 1773      2E00
 1774 06e1 000000   		.align	2
 1775              	.LC66:
 1776 06e4 4E6F2044 		.ascii	"No Downstream_Level_Sensor frequency value indicate"
 1776      6F776E73 
 1776      74726561 
 1776      6D5F4C65 
 1776      76656C5F 
 1777 0717 642E00   		.ascii	"d.\000"
 1778              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1779              		.align	2
 1780              		.global	get_updated_parameters_from_malcom
 1781              		.thumb
 1782              		.thumb_func
 1783              		.type	get_updated_parameters_from_malcom, %function
 1784              	get_updated_parameters_from_malcom:
 1785              	.LFB81:
 475:modem.c       **** 
 476:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 477:modem.c       **** void get_updated_parameters_from_malcom(){
 1786              		.loc 1 477 0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 800
 1789              		@ frame_needed = 1, uses_anonymous_args = 0
 1790 0000 90B5     		push	{r4, r7, lr}
 1791              		.cfi_def_cfa_offset 12
 1792              		.cfi_offset 4, -12
 1793              		.cfi_offset 7, -8
 1794              		.cfi_offset 14, -4
 1795 0002 ADF5497D 		sub	sp, sp, #804
 1796              		.cfi_def_cfa_offset 816
 1797 0006 00AF     		add	r7, sp, #0
 1798              		.cfi_def_cfa_register 7
 478:modem.c       ****     
 479:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 480:modem.c       ****     char s_node_type[10];
 481:modem.c       ****     char s_sim_type[10];
 482:modem.c       ****     char s_sample_freq[10];
 483:modem.c       ****     char s_report_freq[10];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 45


 484:modem.c       ****     char s_debug_freq[10];
 485:modem.c       ****     
 486:modem.c       ****     //apps
 487:modem.c       ****     // APP_INTERFACE
 488:modem.c       ****     char s_app_led[100];
 489:modem.c       ****     s_app_led[0] = '\0';
 1799              		.loc 1 489 0
 1800 0008 0023     		movs	r3, #0
 1801 000a 87F88032 		strb	r3, [r7, #640]
 490:modem.c       ****     
 491:modem.c       ****     char s_level_sensor[100];
 492:modem.c       ****     s_level_sensor[0] = '\0';
 1802              		.loc 1 492 0
 1803 000e 07F50773 		add	r3, r7, #540
 1804 0012 0022     		movs	r2, #0
 1805 0014 1A70     		strb	r2, [r3]
 493:modem.c       ****     
 494:modem.c       ****     char s_down_level_sensor[100];
 495:modem.c       ****     s_down_level_sensor[0] = '\0';
 1806              		.loc 1 495 0
 1807 0016 07F5DC73 		add	r3, r7, #440
 1808 001a 0022     		movs	r2, #0
 1809 001c 1A70     		strb	r2, [r3]
 496:modem.c       ****     
 497:modem.c       ****     char s_valve[100];
 498:modem.c       ****     s_valve[0] = '\0';
 1810              		.loc 1 498 0
 1811 001e 07F5AA73 		add	r3, r7, #340
 1812 0022 0022     		movs	r2, #0
 1813 0024 1A70     		strb	r2, [r3]
 499:modem.c       ****     
 500:modem.c       ****     char s_apps_enabled[200];
 501:modem.c       ****     s_apps_enabled[0]='\0';
 1814              		.loc 1 501 0
 1815 0026 07F18C03 		add	r3, r7, #140
 1816 002a 0022     		movs	r2, #0
 1817 002c 1A70     		strb	r2, [r3]
 502:modem.c       ****     
 503:modem.c       ****     s_node_type[0] = '\0';
 1818              		.loc 1 503 0
 1819 002e 0023     		movs	r3, #0
 1820 0030 87F81433 		strb	r3, [r7, #788]
 504:modem.c       ****     s_sim_type[0] = '\0';
 1821              		.loc 1 504 0
 1822 0034 0023     		movs	r3, #0
 1823 0036 87F80833 		strb	r3, [r7, #776]
 505:modem.c       ****     s_sample_freq[0] = '\0';
 1824              		.loc 1 505 0
 1825 003a 0023     		movs	r3, #0
 1826 003c 87F8FC32 		strb	r3, [r7, #764]
 506:modem.c       ****     s_report_freq[0] = '\0';
 1827              		.loc 1 506 0
 1828 0040 0023     		movs	r3, #0
 1829 0042 87F8F032 		strb	r3, [r7, #752]
 507:modem.c       ****     s_debug_freq[0] = '\0';
 1830              		.loc 1 507 0
 1831 0046 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 46


 1832 0048 87F8E432 		strb	r3, [r7, #740]
 508:modem.c       ****     
 509:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 510:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1833              		.loc 1 510 0
 1834 004c 07F54573 		add	r3, r7, #788
 1835 0050 B14A     		ldr	r2, .L131
 1836 0052 B249     		ldr	r1, .L131+4
 1837 0054 B248     		ldr	r0, .L131+8
 1838 0056 FFF7FEFF 		bl	extract_string
 511:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1839              		.loc 1 511 0
 1840 005a 07F54273 		add	r3, r7, #776
 1841 005e AE4A     		ldr	r2, .L131
 1842 0060 B049     		ldr	r1, .L131+12
 1843 0062 AF48     		ldr	r0, .L131+8
 1844 0064 FFF7FEFF 		bl	extract_string
 512:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1845              		.loc 1 512 0
 1846 0068 07F53F73 		add	r3, r7, #764
 1847 006c AA4A     		ldr	r2, .L131
 1848 006e AE49     		ldr	r1, .L131+16
 1849 0070 AB48     		ldr	r0, .L131+8
 1850 0072 FFF7FEFF 		bl	extract_string
 513:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1851              		.loc 1 513 0
 1852 0076 07F53C73 		add	r3, r7, #752
 1853 007a A74A     		ldr	r2, .L131
 1854 007c AB49     		ldr	r1, .L131+20
 1855 007e A848     		ldr	r0, .L131+8
 1856 0080 FFF7FEFF 		bl	extract_string
 514:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1857              		.loc 1 514 0
 1858 0084 07F53973 		add	r3, r7, #740
 1859 0088 A34A     		ldr	r2, .L131
 1860 008a A949     		ldr	r1, .L131+24
 1861 008c A448     		ldr	r0, .L131+8
 1862 008e FFF7FEFF 		bl	extract_string
 515:modem.c       ****     
 516:modem.c       ****     // which apps are enabled?
 517:modem.c       ****     // APP_INTERFACE
 518:modem.c       ****     if (strstr(uart_received_string,"Apps_Enabled: ")){
 1863              		.loc 1 518 0
 1864 0092 A849     		ldr	r1, .L131+28
 1865 0094 A248     		ldr	r0, .L131+8
 1866 0096 FFF7FEFF 		bl	strstr
 1867 009a 0346     		mov	r3, r0
 1868 009c 002B     		cmp	r3, #0
 1869 009e 56D0     		beq	.L99
 519:modem.c       ****         extract_string(uart_received_string,"Apps_Enabled: ","\r",s_apps_enabled);
 1870              		.loc 1 519 0
 1871 00a0 07F18C03 		add	r3, r7, #140
 1872 00a4 9C4A     		ldr	r2, .L131
 1873 00a6 A349     		ldr	r1, .L131+28
 1874 00a8 9D48     		ldr	r0, .L131+8
 1875 00aa FFF7FEFF 		bl	extract_string
 520:modem.c       ****         // if an app is in this string, turn it on
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 47


 521:modem.c       ****         if (strstr(s_apps_enabled,"Level_Sensor")!=NULL){
 1876              		.loc 1 521 0
 1877 00ae 07F18C03 		add	r3, r7, #140
 1878 00b2 A149     		ldr	r1, .L131+32
 1879 00b4 1846     		mov	r0, r3
 1880 00b6 FFF7FEFF 		bl	strstr
 1881 00ba 0346     		mov	r3, r0
 1882 00bc 002B     		cmp	r3, #0
 1883 00be 03D0     		beq	.L100
 522:modem.c       ****             // if we see level sensor in the enabled list, turn it on
 523:modem.c       ****             level_sensor_enabled = 1;
 1884              		.loc 1 523 0
 1885 00c0 9E4B     		ldr	r3, .L131+36
 1886 00c2 0122     		movs	r2, #1
 1887 00c4 1A70     		strb	r2, [r3]
 1888 00c6 06E0     		b	.L101
 1889              	.L100:
 524:modem.c       ****         }        
 525:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 526:modem.c       ****         else if (level_sensor_enabled){ 
 1890              		.loc 1 526 0
 1891 00c8 9C4B     		ldr	r3, .L131+36
 1892 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1893 00cc 002B     		cmp	r3, #0
 1894 00ce 02D0     		beq	.L101
 527:modem.c       ****             level_sensor_enabled = 0;
 1895              		.loc 1 527 0
 1896 00d0 9A4B     		ldr	r3, .L131+36
 1897 00d2 0022     		movs	r2, #0
 1898 00d4 1A70     		strb	r2, [r3]
 1899              	.L101:
 528:modem.c       ****         }
 529:modem.c       ****         
 530:modem.c       ****         if (strstr(s_apps_enabled,"App_LED")!=NULL){
 1900              		.loc 1 530 0
 1901 00d6 07F18C03 		add	r3, r7, #140
 1902 00da 9949     		ldr	r1, .L131+40
 1903 00dc 1846     		mov	r0, r3
 1904 00de FFF7FEFF 		bl	strstr
 1905 00e2 0346     		mov	r3, r0
 1906 00e4 002B     		cmp	r3, #0
 1907 00e6 03D0     		beq	.L102
 531:modem.c       ****             // if we this app in the enabled list, turn it on
 532:modem.c       ****             App_LED_enabled = 1;
 1908              		.loc 1 532 0
 1909 00e8 964B     		ldr	r3, .L131+44
 1910 00ea 0122     		movs	r2, #1
 1911 00ec 1A70     		strb	r2, [r3]
 1912 00ee 06E0     		b	.L103
 1913              	.L102:
 533:modem.c       ****         }
 534:modem.c       ****         else if (App_LED_enabled){
 1914              		.loc 1 534 0
 1915 00f0 944B     		ldr	r3, .L131+44
 1916 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1917 00f4 002B     		cmp	r3, #0
 1918 00f6 02D0     		beq	.L103
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 48


 535:modem.c       ****             App_LED_enabled = 0;
 1919              		.loc 1 535 0
 1920 00f8 924B     		ldr	r3, .L131+44
 1921 00fa 0022     		movs	r2, #0
 1922 00fc 1A70     		strb	r2, [r3]
 1923              	.L103:
 536:modem.c       ****         }
 537:modem.c       ****         
 538:modem.c       ****         if (strstr(s_apps_enabled,"Downstream_Level") != NULL){
 1924              		.loc 1 538 0
 1925 00fe 07F18C03 		add	r3, r7, #140
 1926 0102 9149     		ldr	r1, .L131+48
 1927 0104 1846     		mov	r0, r3
 1928 0106 FFF7FEFF 		bl	strstr
 1929 010a 0346     		mov	r3, r0
 1930 010c 002B     		cmp	r3, #0
 1931 010e 03D0     		beq	.L104
 539:modem.c       ****             downstream_level_sensor_enabled = 1;
 1932              		.loc 1 539 0
 1933 0110 8E4B     		ldr	r3, .L131+52
 1934 0112 0122     		movs	r2, #1
 1935 0114 1A70     		strb	r2, [r3]
 1936 0116 06E0     		b	.L105
 1937              	.L104:
 540:modem.c       ****         }        
 541:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 542:modem.c       ****         else if (downstream_level_sensor_enabled){ 
 1938              		.loc 1 542 0
 1939 0118 8C4B     		ldr	r3, .L131+52
 1940 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1941 011c 002B     		cmp	r3, #0
 1942 011e 02D0     		beq	.L105
 543:modem.c       ****             downstream_level_sensor_enabled = 0;
 1943              		.loc 1 543 0
 1944 0120 8A4B     		ldr	r3, .L131+52
 1945 0122 0022     		movs	r2, #0
 1946 0124 1A70     		strb	r2, [r3]
 1947              	.L105:
 544:modem.c       ****         }
 545:modem.c       ****         
 546:modem.c       ****         if (strstr(s_apps_enabled, "Valve") != NULL){
 1948              		.loc 1 546 0
 1949 0126 07F18C03 		add	r3, r7, #140
 1950 012a 8949     		ldr	r1, .L131+56
 1951 012c 1846     		mov	r0, r3
 1952 012e FFF7FEFF 		bl	strstr
 1953 0132 0346     		mov	r3, r0
 1954 0134 002B     		cmp	r3, #0
 1955 0136 03D0     		beq	.L106
 547:modem.c       ****             valve_enabled = 1u;
 1956              		.loc 1 547 0
 1957 0138 864B     		ldr	r3, .L131+60
 1958 013a 0122     		movs	r2, #1
 1959 013c 1A70     		strb	r2, [r3]
 1960 013e 06E0     		b	.L99
 1961              	.L106:
 548:modem.c       ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 49


 549:modem.c       ****         else if(valve_enabled){
 1962              		.loc 1 549 0
 1963 0140 844B     		ldr	r3, .L131+60
 1964 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1965 0144 002B     		cmp	r3, #0
 1966 0146 02D0     		beq	.L99
 550:modem.c       ****             valve_enabled = 0u;
 1967              		.loc 1 550 0
 1968 0148 824B     		ldr	r3, .L131+60
 1969 014a 0022     		movs	r2, #0
 1970 014c 1A70     		strb	r2, [r3]
 1971              	.L99:
 551:modem.c       ****         }
 552:modem.c       ****         
 553:modem.c       ****     }
 554:modem.c       **** 
 555:modem.c       ****         
 556:modem.c       ****     
 557:modem.c       ****     // update app parameters (valve open %, measuring freq, etc)
 558:modem.c       ****     // APP_INTERFACE
 559:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1972              		.loc 1 559 0
 1973 014e 07F52073 		add	r3, r7, #640
 1974 0152 714A     		ldr	r2, .L131
 1975 0154 8049     		ldr	r1, .L131+64
 1976 0156 7248     		ldr	r0, .L131+8
 1977 0158 FFF7FEFF 		bl	extract_string
 560:modem.c       ****     App_LED_Update(s_app_led);
 1978              		.loc 1 560 0
 1979 015c 07F52073 		add	r3, r7, #640
 1980 0160 1846     		mov	r0, r3
 1981 0162 FFF7FEFF 		bl	App_LED_Update
 561:modem.c       ****     
 562:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1982              		.loc 1 562 0
 1983 0166 07F50773 		add	r3, r7, #540
 1984 016a 6B4A     		ldr	r2, .L131
 1985 016c 7B49     		ldr	r1, .L131+68
 1986 016e 6C48     		ldr	r0, .L131+8
 1987 0170 FFF7FEFF 		bl	extract_string
 563:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1988              		.loc 1 563 0
 1989 0174 07F50773 		add	r3, r7, #540
 1990 0178 1846     		mov	r0, r3
 1991 017a FFF7FEFF 		bl	Level_Sensor_Update
 564:modem.c       ****     
 565:modem.c       ****     extract_string(uart_received_string,"Downstream_Level: ","\r",s_down_level_sensor);
 1992              		.loc 1 565 0
 1993 017e 07F5DC73 		add	r3, r7, #440
 1994 0182 654A     		ldr	r2, .L131
 1995 0184 7649     		ldr	r1, .L131+72
 1996 0186 6648     		ldr	r0, .L131+8
 1997 0188 FFF7FEFF 		bl	extract_string
 566:modem.c       ****     downstream_Level_Sensor_Update(s_down_level_sensor);
 1998              		.loc 1 566 0
 1999 018c 07F5DC73 		add	r3, r7, #440
 2000 0190 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 50


 2001 0192 FFF7FEFF 		bl	downstream_Level_Sensor_Update
 567:modem.c       ****     
 568:modem.c       ****     extract_string(uart_received_string,"Valve:","\r", s_valve);
 2002              		.loc 1 568 0
 2003 0196 07F5AA73 		add	r3, r7, #340
 2004 019a 5F4A     		ldr	r2, .L131
 2005 019c 7149     		ldr	r1, .L131+76
 2006 019e 6048     		ldr	r0, .L131+8
 2007 01a0 FFF7FEFF 		bl	extract_string
 569:modem.c       ****     valve_Update(s_valve);
 2008              		.loc 1 569 0
 2009 01a4 07F5AA73 		add	r3, r7, #340
 2010 01a8 1846     		mov	r0, r3
 2011 01aa FFF7FEFF 		bl	valve_Update
 570:modem.c       ****     
 571:modem.c       ****     // Create variables for what is sent back from the server
 572:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq,
 573:modem.c       ****     
 574:modem.c       ****     // Scan character arrays and save values 
 575:modem.c       ****     
 576:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 2012              		.loc 1 576 0
 2013 01ae 07F18802 		add	r2, r7, #136
 2014 01b2 07F54573 		add	r3, r7, #788
 2015 01b6 6C49     		ldr	r1, .L131+80
 2016 01b8 1846     		mov	r0, r3
 2017 01ba FFF7FEFF 		bl	sscanf
 2018 01be 0346     		mov	r3, r0
 2019 01c0 012B     		cmp	r3, #1
 2020 01c2 0ED1     		bne	.L107
 577:modem.c       ****         updatable_parameters.node_type = node_type;
 2021              		.loc 1 577 0
 2022 01c4 07F18803 		add	r3, r7, #136
 2023 01c8 1B68     		ldr	r3, [r3]
 2024 01ca DAB2     		uxtb	r2, r3
 2025 01cc 674B     		ldr	r3, .L131+84
 2026 01ce 1A70     		strb	r2, [r3]
 578:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 2027              		.loc 1 578 0
 2028 01d0 07F18803 		add	r3, r7, #136
 2029 01d4 1B68     		ldr	r3, [r3]
 2030 01d6 1A46     		mov	r2, r3
 2031 01d8 6549     		ldr	r1, .L131+88
 2032 01da 0020     		movs	r0, #0
 2033 01dc FFF7FEFF 		bl	printNotif
 2034 01e0 03E0     		b	.L108
 2035              	.L107:
 579:modem.c       ****     }else{
 580:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 2036              		.loc 1 580 0
 2037 01e2 6449     		ldr	r1, .L131+92
 2038 01e4 0220     		movs	r0, #2
 2039 01e6 FFF7FEFF 		bl	printNotif
 2040              	.L108:
 581:modem.c       ****     }
 582:modem.c       ****     
 583:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 51


 2041              		.loc 1 583 0
 2042 01ea 07F18402 		add	r2, r7, #132
 2043 01ee 07F54273 		add	r3, r7, #776
 2044 01f2 5D49     		ldr	r1, .L131+80
 2045 01f4 1846     		mov	r0, r3
 2046 01f6 FFF7FEFF 		bl	sscanf
 2047 01fa 0346     		mov	r3, r0
 2048 01fc 012B     		cmp	r3, #1
 2049 01fe 12D1     		bne	.L109
 584:modem.c       ****         updatable_parameters.sim_type = sim_type;
 2050              		.loc 1 584 0
 2051 0200 07F18403 		add	r3, r7, #132
 2052 0204 1B68     		ldr	r3, [r3]
 2053 0206 002B     		cmp	r3, #0
 2054 0208 14BF     		ite	ne
 2055 020a 0123     		movne	r3, #1
 2056 020c 0023     		moveq	r3, #0
 2057 020e DAB2     		uxtb	r2, r3
 2058 0210 564B     		ldr	r3, .L131+84
 2059 0212 5A70     		strb	r2, [r3, #1]
 585:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 2060              		.loc 1 585 0
 2061 0214 07F18403 		add	r3, r7, #132
 2062 0218 1B68     		ldr	r3, [r3]
 2063 021a 1A46     		mov	r2, r3
 2064 021c 5649     		ldr	r1, .L131+96
 2065 021e 0020     		movs	r0, #0
 2066 0220 FFF7FEFF 		bl	printNotif
 2067 0224 03E0     		b	.L110
 2068              	.L109:
 586:modem.c       ****     }else{
 587:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 2069              		.loc 1 587 0
 2070 0226 5549     		ldr	r1, .L131+100
 2071 0228 0220     		movs	r0, #2
 2072 022a FFF7FEFF 		bl	printNotif
 2073              	.L110:
 588:modem.c       ****     }
 589:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 2074              		.loc 1 589 0
 2075 022e 07F18002 		add	r2, r7, #128
 2076 0232 07F53F73 		add	r3, r7, #764
 2077 0236 4C49     		ldr	r1, .L131+80
 2078 0238 1846     		mov	r0, r3
 2079 023a FFF7FEFF 		bl	sscanf
 2080 023e 0346     		mov	r3, r0
 2081 0240 012B     		cmp	r3, #1
 2082 0242 1DD1     		bne	.L111
 590:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 2083              		.loc 1 590 0
 2084 0244 07F18003 		add	r3, r7, #128
 2085 0248 1B68     		ldr	r3, [r3]
 2086 024a DAB2     		uxtb	r2, r3
 2087 024c 474B     		ldr	r3, .L131+84
 2088 024e 9A70     		strb	r2, [r3, #2]
 591:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 592:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 52


 2089              		.loc 1 592 0
 2090 0250 464B     		ldr	r3, .L131+84
 2091 0252 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2092 0254 99B2     		uxth	r1, r3
 2093 0256 4A4C     		ldr	r4, .L131+104
 2094 0258 3846     		mov	r0, r7
 2095 025a 0723     		movs	r3, #7
 2096 025c 0122     		movs	r2, #1
 2097 025e FFF7FEFF 		bl	CreateAlarm
 2098 0262 3A46     		mov	r2, r7
 2099 0264 2346     		mov	r3, r4
 2100 0266 1168     		ldr	r1, [r2]	@ unaligned
 2101 0268 1960     		str	r1, [r3]	@ unaligned
 2102 026a 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2103 026c 9A80     		strh	r2, [r3, #4]	@ unaligned
 593:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 2104              		.loc 1 593 0
 2105 026e 07F18003 		add	r3, r7, #128
 2106 0272 1B68     		ldr	r3, [r3]
 2107 0274 1A46     		mov	r2, r3
 2108 0276 4349     		ldr	r1, .L131+108
 2109 0278 0020     		movs	r0, #0
 2110 027a FFF7FEFF 		bl	printNotif
 2111 027e 03E0     		b	.L112
 2112              	.L111:
 594:modem.c       ****     }else{
 595:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 2113              		.loc 1 595 0
 2114 0280 4149     		ldr	r1, .L131+112
 2115 0282 0220     		movs	r0, #2
 2116 0284 FFF7FEFF 		bl	printNotif
 2117              	.L112:
 596:modem.c       ****     }
 597:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 2118              		.loc 1 597 0
 2119 0288 07F17C02 		add	r2, r7, #124
 2120 028c 07F53C73 		add	r3, r7, #752
 2121 0290 3549     		ldr	r1, .L131+80
 2122 0292 1846     		mov	r0, r3
 2123 0294 FFF7FEFF 		bl	sscanf
 2124 0298 0346     		mov	r3, r0
 2125 029a 012B     		cmp	r3, #1
 2126 029c 1DD1     		bne	.L113
 598:modem.c       ****         updatable_parameters.sync_time = report_freq;
 2127              		.loc 1 598 0
 2128 029e 07F17C03 		add	r3, r7, #124
 2129 02a2 1B68     		ldr	r3, [r3]
 2130 02a4 DAB2     		uxtb	r2, r3
 2131 02a6 314B     		ldr	r3, .L131+84
 2132 02a8 DA70     		strb	r2, [r3, #3]
 599:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 600:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 2133              		.loc 1 600 0
 2134 02aa 304B     		ldr	r3, .L131+84
 2135 02ac DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2136 02ae 99B2     		uxth	r1, r3
 2137 02b0 364C     		ldr	r4, .L131+116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 53


 2138 02b2 3846     		mov	r0, r7
 2139 02b4 0723     		movs	r3, #7
 2140 02b6 0122     		movs	r2, #1
 2141 02b8 FFF7FEFF 		bl	CreateAlarm
 2142 02bc 3A46     		mov	r2, r7
 2143 02be 2346     		mov	r3, r4
 2144 02c0 1168     		ldr	r1, [r2]	@ unaligned
 2145 02c2 1960     		str	r1, [r3]	@ unaligned
 2146 02c4 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2147 02c6 9A80     		strh	r2, [r3, #4]	@ unaligned
 601:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 2148              		.loc 1 601 0
 2149 02c8 07F17C03 		add	r3, r7, #124
 2150 02cc 1B68     		ldr	r3, [r3]
 2151 02ce 1A46     		mov	r2, r3
 2152 02d0 2F49     		ldr	r1, .L131+120
 2153 02d2 0020     		movs	r0, #0
 2154 02d4 FFF7FEFF 		bl	printNotif
 2155 02d8 03E0     		b	.L114
 2156              	.L113:
 602:modem.c       ****         }else{
 603:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 2157              		.loc 1 603 0
 2158 02da 2E49     		ldr	r1, .L131+124
 2159 02dc 0220     		movs	r0, #2
 2160 02de FFF7FEFF 		bl	printNotif
 2161              	.L114:
 604:modem.c       ****     }
 605:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 2162              		.loc 1 605 0
 2163 02e2 07F17802 		add	r2, r7, #120
 2164 02e6 07F53973 		add	r3, r7, #740
 2165 02ea 1F49     		ldr	r1, .L131+80
 2166 02ec 1846     		mov	r0, r3
 2167 02ee FFF7FEFF 		bl	sscanf
 2168 02f2 0346     		mov	r3, r0
 2169 02f4 012B     		cmp	r3, #1
 2170 02f6 51D1     		bne	.L115
 606:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 2171              		.loc 1 606 0
 2172 02f8 07F17803 		add	r3, r7, #120
 2173 02fc 1B68     		ldr	r3, [r3]
 2174 02fe DAB2     		uxtb	r2, r3
 2175 0300 1A4B     		ldr	r3, .L131+84
 2176 0302 1A71     		strb	r2, [r3, #4]
 607:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 2177              		.loc 1 607 0
 2178 0304 07F17803 		add	r3, r7, #120
 2179 0308 1B68     		ldr	r3, [r3]
 2180 030a 1A46     		mov	r2, r3
 2181 030c 2249     		ldr	r1, .L131+128
 2182 030e 0020     		movs	r0, #0
 2183 0310 FFF7FEFF 		bl	printNotif
 2184 0314 46E0     		b	.L116
 2185              	.L132:
 2186 0316 00BF     		.align	2
 2187              	.L131:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 54


 2188 0318 88020000 		.word	.LC21
 2189 031c 24030000 		.word	.LC32
 2190 0320 00000000 		.word	uart_received_string
 2191 0324 30030000 		.word	.LC33
 2192 0328 3C030000 		.word	.LC34
 2193 032c 4C030000 		.word	.LC35
 2194 0330 5C030000 		.word	.LC36
 2195 0334 6C030000 		.word	.LC37
 2196 0338 7C030000 		.word	.LC38
 2197 033c 00000000 		.word	level_sensor_enabled
 2198 0340 8C030000 		.word	.LC39
 2199 0344 00000000 		.word	App_LED_enabled
 2200 0348 94030000 		.word	.LC40
 2201 034c 00000000 		.word	downstream_level_sensor_enabled
 2202 0350 A8030000 		.word	.LC41
 2203 0354 00000000 		.word	valve_enabled
 2204 0358 B0030000 		.word	.LC42
 2205 035c BC030000 		.word	.LC43
 2206 0360 CC030000 		.word	.LC44
 2207 0364 E0030000 		.word	.LC45
 2208 0368 E8030000 		.word	.LC46
 2209 036c 00000000 		.word	updatable_parameters
 2210 0370 EC030000 		.word	.LC47
 2211 0374 08040000 		.word	.LC48
 2212 0378 24040000 		.word	.LC49
 2213 037c 40040000 		.word	.LC50
 2214 0380 00000000 		.word	alarmMeasure
 2215 0384 5C040000 		.word	.LC51
 2216 0388 80040000 		.word	.LC52
 2217 038c 00000000 		.word	alarmSync
 2218 0390 B0040000 		.word	.LC53
 2219 0394 D8040000 		.word	.LC54
 2220 0398 08050000 		.word	.LC55
 2221              	.L115:
 608:modem.c       ****     }else{
 609:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 2222              		.loc 1 609 0
 2223 039c 8549     		ldr	r1, .L133
 2224 039e 0220     		movs	r0, #2
 2225 03a0 FFF7FEFF 		bl	printNotif
 2226              	.L116:
 610:modem.c       ****     }
 611:modem.c       ****     
 612:modem.c       ****     // app alarm frequency updates
 613:modem.c       ****     // APP_INTERFACE
 614:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 2227              		.loc 1 614 0
 2228 03a4 844B     		ldr	r3, .L133+4
 2229 03a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2230 03a8 042B     		cmp	r3, #4
 2231 03aa 40F0FD80 		bne	.L130
 2232              	.LBB9:
 615:modem.c       ****         
 616:modem.c       ****         char temp[100];
 617:modem.c       ****         temp[0] = '\0';
 2233              		.loc 1 617 0
 2234 03ae 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 55


 2235 03b2 0022     		movs	r2, #0
 2236 03b4 1A70     		strb	r2, [r3]
 618:modem.c       ****         if(App_LED_enabled){ //if you're not enabled, don't talk
 2237              		.loc 1 618 0
 2238 03b6 814B     		ldr	r3, .L133+8
 2239 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2240 03ba 002B     		cmp	r3, #0
 2241 03bc 4ED0     		beq	.L118
 619:modem.c       ****             if (strstr(s_app_led,"Freq=")!=NULL){
 2242              		.loc 1 619 0
 2243 03be 07F52073 		add	r3, r7, #640
 2244 03c2 7F49     		ldr	r1, .L133+12
 2245 03c4 1846     		mov	r0, r3
 2246 03c6 FFF7FEFF 		bl	strstr
 2247 03ca 0346     		mov	r3, r0
 2248 03cc 002B     		cmp	r3, #0
 2249 03ce 41D0     		beq	.L119
 620:modem.c       ****                 temp[0] = '\0';
 2250              		.loc 1 620 0
 2251 03d0 07F10803 		add	r3, r7, #8
 2252 03d4 0022     		movs	r2, #0
 2253 03d6 1A70     		strb	r2, [r3]
 621:modem.c       ****                 strcpy(temp,s_app_led);
 2254              		.loc 1 621 0
 2255 03d8 07F52072 		add	r2, r7, #640
 2256 03dc 07F10803 		add	r3, r7, #8
 2257 03e0 1146     		mov	r1, r2
 2258 03e2 1846     		mov	r0, r3
 2259 03e4 FFF7FEFF 		bl	strcpy
 622:modem.c       ****                 extract_string(temp,"Freq=","\r",s_app_led); // grab level app frequency
 2260              		.loc 1 622 0
 2261 03e8 07F52073 		add	r3, r7, #640
 2262 03ec 07F10800 		add	r0, r7, #8
 2263 03f0 744A     		ldr	r2, .L133+16
 2264 03f2 7349     		ldr	r1, .L133+12
 2265 03f4 FFF7FEFF 		bl	extract_string
 623:modem.c       ****                 if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2266              		.loc 1 623 0
 2267 03f8 07F17402 		add	r2, r7, #116
 2268 03fc 07F52073 		add	r3, r7, #640
 2269 0400 7149     		ldr	r1, .L133+20
 2270 0402 1846     		mov	r0, r3
 2271 0404 FFF7FEFF 		bl	sscanf
 2272 0408 0346     		mov	r3, r0
 2273 040a 012B     		cmp	r3, #1
 2274 040c 1DD1     		bne	.L120
 624:modem.c       ****                     updatable_parameters.App_LED_freq = app_led_freq;
 2275              		.loc 1 624 0
 2276 040e 07F17403 		add	r3, r7, #116
 2277 0412 1B68     		ldr	r3, [r3]
 2278 0414 DAB2     		uxtb	r2, r3
 2279 0416 684B     		ldr	r3, .L133+4
 2280 0418 5A71     		strb	r2, [r3, #5]
 625:modem.c       ****                     // update the alarm to the new frequency
 626:modem.c       ****                     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,A
 2281              		.loc 1 626 0
 2282 041a 674B     		ldr	r3, .L133+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 56


 2283 041c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2284 041e 99B2     		uxth	r1, r3
 2285 0420 6A4C     		ldr	r4, .L133+24
 2286 0422 3846     		mov	r0, r7
 2287 0424 0723     		movs	r3, #7
 2288 0426 0122     		movs	r2, #1
 2289 0428 FFF7FEFF 		bl	CreateAlarm
 2290 042c 3A46     		mov	r2, r7
 2291 042e 2346     		mov	r3, r4
 2292 0430 1168     		ldr	r1, [r2]	@ unaligned
 2293 0432 1960     		str	r1, [r3]	@ unaligned
 2294 0434 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2295 0436 9A80     		strh	r2, [r3, #4]	@ unaligned
 627:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_fr
 2296              		.loc 1 627 0
 2297 0438 07F17403 		add	r3, r7, #116
 2298 043c 1B68     		ldr	r3, [r3]
 2299 043e 1A46     		mov	r2, r3
 2300 0440 6349     		ldr	r1, .L133+28
 2301 0442 0020     		movs	r0, #0
 2302 0444 FFF7FEFF 		bl	printNotif
 2303 0448 08E0     		b	.L118
 2304              	.L120:
 628:modem.c       ****                 } 
 629:modem.c       ****                 else{
 630:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2305              		.loc 1 630 0
 2306 044a 6249     		ldr	r1, .L133+32
 2307 044c 0220     		movs	r0, #2
 2308 044e FFF7FEFF 		bl	printNotif
 2309 0452 03E0     		b	.L118
 2310              	.L119:
 631:modem.c       ****                 }
 632:modem.c       ****             }
 633:modem.c       ****             else{
 634:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 2311              		.loc 1 634 0
 2312 0454 6049     		ldr	r1, .L133+36
 2313 0456 0220     		movs	r0, #2
 2314 0458 FFF7FEFF 		bl	printNotif
 2315              	.L118:
 635:modem.c       ****             }
 636:modem.c       ****         }
 637:modem.c       ****         if(level_sensor_enabled){
 2316              		.loc 1 637 0
 2317 045c 5F4B     		ldr	r3, .L133+40
 2318 045e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2319 0460 002B     		cmp	r3, #0
 2320 0462 4ED0     		beq	.L122
 638:modem.c       ****             if (strstr(s_level_sensor,"Freq=")!=NULL){
 2321              		.loc 1 638 0
 2322 0464 07F50773 		add	r3, r7, #540
 2323 0468 5549     		ldr	r1, .L133+12
 2324 046a 1846     		mov	r0, r3
 2325 046c FFF7FEFF 		bl	strstr
 2326 0470 0346     		mov	r3, r0
 2327 0472 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 57


 2328 0474 41D0     		beq	.L123
 639:modem.c       ****                 temp[0] = '\0';
 2329              		.loc 1 639 0
 2330 0476 07F10803 		add	r3, r7, #8
 2331 047a 0022     		movs	r2, #0
 2332 047c 1A70     		strb	r2, [r3]
 640:modem.c       ****                 strcpy(temp,s_level_sensor);
 2333              		.loc 1 640 0
 2334 047e 07F50772 		add	r2, r7, #540
 2335 0482 07F10803 		add	r3, r7, #8
 2336 0486 1146     		mov	r1, r2
 2337 0488 1846     		mov	r0, r3
 2338 048a FFF7FEFF 		bl	strcpy
 641:modem.c       ****                 extract_string(temp,"Freq=","\r",s_level_sensor); // grab level app frequency
 2339              		.loc 1 641 0
 2340 048e 07F50773 		add	r3, r7, #540
 2341 0492 07F10800 		add	r0, r7, #8
 2342 0496 4B4A     		ldr	r2, .L133+16
 2343 0498 4949     		ldr	r1, .L133+12
 2344 049a FFF7FEFF 		bl	extract_string
 642:modem.c       ****                 if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2345              		.loc 1 642 0
 2346 049e 07F17002 		add	r2, r7, #112
 2347 04a2 07F50773 		add	r3, r7, #540
 2348 04a6 4849     		ldr	r1, .L133+20
 2349 04a8 1846     		mov	r0, r3
 2350 04aa FFF7FEFF 		bl	sscanf
 2351 04ae 0346     		mov	r3, r0
 2352 04b0 012B     		cmp	r3, #1
 2353 04b2 1DD1     		bne	.L124
 643:modem.c       ****                     updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2354              		.loc 1 643 0
 2355 04b4 07F17003 		add	r3, r7, #112
 2356 04b8 1B68     		ldr	r3, [r3]
 2357 04ba DAB2     		uxtb	r2, r3
 2358 04bc 3E4B     		ldr	r3, .L133+4
 2359 04be 9A71     		strb	r2, [r3, #6]
 644:modem.c       ****                     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYP
 2360              		.loc 1 644 0
 2361 04c0 3D4B     		ldr	r3, .L133+4
 2362 04c2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2363 04c4 99B2     		uxth	r1, r3
 2364 04c6 464C     		ldr	r4, .L133+44
 2365 04c8 3846     		mov	r0, r7
 2366 04ca 0723     		movs	r3, #7
 2367 04cc 0122     		movs	r2, #1
 2368 04ce FFF7FEFF 		bl	CreateAlarm
 2369 04d2 3A46     		mov	r2, r7
 2370 04d4 2346     		mov	r3, r4
 2371 04d6 1168     		ldr	r1, [r2]	@ unaligned
 2372 04d8 1960     		str	r1, [r3]	@ unaligned
 2373 04da 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2374 04dc 9A80     		strh	r2, [r3, #4]	@ unaligned
 645:modem.c       **** 
 646:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_l
 2375              		.loc 1 646 0
 2376 04de 07F17403 		add	r3, r7, #116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 58


 2377 04e2 1B68     		ldr	r3, [r3]
 2378 04e4 1A46     		mov	r2, r3
 2379 04e6 3F49     		ldr	r1, .L133+48
 2380 04e8 0020     		movs	r0, #0
 2381 04ea FFF7FEFF 		bl	printNotif
 2382 04ee 08E0     		b	.L122
 2383              	.L124:
 647:modem.c       ****                 } 
 648:modem.c       ****                 else{
 649:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value."
 2384              		.loc 1 649 0
 2385 04f0 3D49     		ldr	r1, .L133+52
 2386 04f2 0220     		movs	r0, #2
 2387 04f4 FFF7FEFF 		bl	printNotif
 2388 04f8 03E0     		b	.L122
 2389              	.L123:
 650:modem.c       ****                 }
 651:modem.c       ****             }
 652:modem.c       ****             else{
 653:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2390              		.loc 1 653 0
 2391 04fa 3C49     		ldr	r1, .L133+56
 2392 04fc 0220     		movs	r0, #2
 2393 04fe FFF7FEFF 		bl	printNotif
 2394              	.L122:
 654:modem.c       ****             }
 655:modem.c       ****         }
 656:modem.c       ****         if(downstream_level_sensor_enabled){ 
 2395              		.loc 1 656 0
 2396 0502 3B4B     		ldr	r3, .L133+60
 2397 0504 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2398 0506 002B     		cmp	r3, #0
 2399 0508 4ED0     		beq	.L130
 657:modem.c       ****             if (strstr(s_down_level_sensor,"Freq=") !=NULL){
 2400              		.loc 1 657 0
 2401 050a 07F5DC73 		add	r3, r7, #440
 2402 050e 2C49     		ldr	r1, .L133+12
 2403 0510 1846     		mov	r0, r3
 2404 0512 FFF7FEFF 		bl	strstr
 2405 0516 0346     		mov	r3, r0
 2406 0518 002B     		cmp	r3, #0
 2407 051a 41D0     		beq	.L127
 658:modem.c       ****                 temp[0] = '\0';
 2408              		.loc 1 658 0
 2409 051c 07F10803 		add	r3, r7, #8
 2410 0520 0022     		movs	r2, #0
 2411 0522 1A70     		strb	r2, [r3]
 659:modem.c       ****                 strcpy(temp,s_down_level_sensor); // this temp may not actually be used
 2412              		.loc 1 659 0
 2413 0524 07F5DC72 		add	r2, r7, #440
 2414 0528 07F10803 		add	r3, r7, #8
 2415 052c 1146     		mov	r1, r2
 2416 052e 1846     		mov	r0, r3
 2417 0530 FFF7FEFF 		bl	strcpy
 660:modem.c       ****                 extract_string(temp,"Freq=","\r",s_down_level_sensor); // grab level app frequency
 2418              		.loc 1 660 0
 2419 0534 07F5DC73 		add	r3, r7, #440
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 59


 2420 0538 07F10800 		add	r0, r7, #8
 2421 053c 214A     		ldr	r2, .L133+16
 2422 053e 2049     		ldr	r1, .L133+12
 2423 0540 FFF7FEFF 		bl	extract_string
 661:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &down_level_freq)==1){
 2424              		.loc 1 661 0
 2425 0544 07F16C02 		add	r2, r7, #108
 2426 0548 07F5DC73 		add	r3, r7, #440
 2427 054c 1E49     		ldr	r1, .L133+20
 2428 054e 1846     		mov	r0, r3
 2429 0550 FFF7FEFF 		bl	sscanf
 2430 0554 0346     		mov	r3, r0
 2431 0556 012B     		cmp	r3, #1
 2432 0558 1DD1     		bne	.L128
 662:modem.c       ****                     updatable_parameters.Downstream_Level_Sensor_freq = down_level_freq;
 2433              		.loc 1 662 0
 2434 055a 07F16C03 		add	r3, r7, #108
 2435 055e 1B68     		ldr	r3, [r3]
 2436 0560 DAB2     		uxtb	r2, r3
 2437 0562 154B     		ldr	r3, .L133+4
 2438 0564 DA71     		strb	r2, [r3, #7]
 663:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_
 2439              		.loc 1 663 0
 2440 0566 144B     		ldr	r3, .L133+4
 2441 0568 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2442 056a 99B2     		uxth	r1, r3
 2443 056c 214C     		ldr	r4, .L133+64
 2444 056e 3846     		mov	r0, r7
 2445 0570 0723     		movs	r3, #7
 2446 0572 0122     		movs	r2, #1
 2447 0574 FFF7FEFF 		bl	CreateAlarm
 2448 0578 3A46     		mov	r2, r7
 2449 057a 2346     		mov	r3, r4
 2450 057c 1168     		ldr	r1, [r2]	@ unaligned
 2451 057e 1960     		str	r1, [r3]	@ unaligned
 2452 0580 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2453 0582 9A80     		strh	r2, [r3, #4]	@ unaligned
 664:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Downstream_Level_Sensor frequency changed to: %d\
 2454              		.loc 1 664 0
 2455 0584 07F17403 		add	r3, r7, #116
 2456 0588 1B68     		ldr	r3, [r3]
 2457 058a 1A46     		mov	r2, r3
 2458 058c 1A49     		ldr	r1, .L133+68
 2459 058e 0020     		movs	r0, #0
 2460 0590 FFF7FEFF 		bl	printNotif
 2461              	.LBE9:
 665:modem.c       ****                 } 
 666:modem.c       ****                 else{
 667:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Downstream_Level_Sensor freque
 668:modem.c       ****                 }
 669:modem.c       ****             }
 670:modem.c       ****             else{
 671:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Downstream_Level_Sensor frequency value indicated."
 672:modem.c       ****             }
 673:modem.c       ****         }
 674:modem.c       ****         /*
 675:modem.c       ****         if(valve_enabled){ 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 60


 676:modem.c       ****             if (strstr(s_valve,"Freq=") !=NULL){
 677:modem.c       ****                 temp[0] = '\0';
 678:modem.c       ****                 strcpy(temp,s_valve);
 679:modem.c       ****                 extract_string(temp,"Freq=","\r",s_valve); // grab app frequency
 680:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &valve_freq)==1){
 681:modem.c       ****                     updatable_parameters.valve_freq = valve_freq;
 682:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.valve_freq,ALARM_
 683:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Valve frequency changed to: %d\r\n", app_led_freq
 684:modem.c       ****                 } 
 685:modem.c       ****                 else{
 686:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Valve frequency value.");
 687:modem.c       ****                 }
 688:modem.c       ****             }
 689:modem.c       ****             else{
 690:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Valve frequency value indicated.");
 691:modem.c       ****             }
 692:modem.c       ****         }
 693:modem.c       ****         */
 694:modem.c       ****     }
 695:modem.c       ****         
 696:modem.c       **** 
 697:modem.c       ****         
 698:modem.c       **** }
 2462              		.loc 1 698 0
 2463 0594 08E0     		b	.L130
 2464              	.L128:
 2465              	.LBB10:
 667:modem.c       ****                 }
 2466              		.loc 1 667 0
 2467 0596 1949     		ldr	r1, .L133+72
 2468 0598 0220     		movs	r0, #2
 2469 059a FFF7FEFF 		bl	printNotif
 2470              	.LBE10:
 2471              		.loc 1 698 0
 2472 059e 03E0     		b	.L130
 2473              	.L127:
 2474              	.LBB11:
 671:modem.c       ****             }
 2475              		.loc 1 671 0
 2476 05a0 1749     		ldr	r1, .L133+76
 2477 05a2 0220     		movs	r0, #2
 2478 05a4 FFF7FEFF 		bl	printNotif
 2479              	.L130:
 2480              	.LBE11:
 2481              		.loc 1 698 0
 2482 05a8 00BF     		nop
 2483 05aa 07F54977 		add	r7, r7, #804
 2484              		.cfi_def_cfa_offset 12
 2485 05ae BD46     		mov	sp, r7
 2486              		.cfi_def_cfa_register 13
 2487              		@ sp needed
 2488 05b0 90BD     		pop	{r4, r7, pc}
 2489              	.L134:
 2490 05b2 00BF     		.align	2
 2491              	.L133:
 2492 05b4 34050000 		.word	.LC56
 2493 05b8 00000000 		.word	updatable_parameters
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 61


 2494 05bc 00000000 		.word	App_LED_enabled
 2495 05c0 64050000 		.word	.LC57
 2496 05c4 88020000 		.word	.LC21
 2497 05c8 E8030000 		.word	.LC46
 2498 05cc 00000000 		.word	alarmAppLED
 2499 05d0 6C050000 		.word	.LC58
 2500 05d4 90050000 		.word	.LC59
 2501 05d8 C0050000 		.word	.LC60
 2502 05dc 00000000 		.word	level_sensor_enabled
 2503 05e0 00000000 		.word	alarmLevelSensor
 2504 05e4 E8050000 		.word	.LC61
 2505 05e8 10060000 		.word	.LC62
 2506 05ec 44060000 		.word	.LC63
 2507 05f0 00000000 		.word	downstream_level_sensor_enabled
 2508 05f4 00000000 		.word	alarmDownstreamLevelSensor
 2509 05f8 70060000 		.word	.LC64
 2510 05fc A4060000 		.word	.LC65
 2511 0600 E4060000 		.word	.LC66
 2512              		.cfi_endproc
 2513              	.LFE81:
 2514              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2515              		.section	.rodata
 2516 071a 0000     		.align	2
 2517              	.LC67:
 2518 071c 41542343 		.ascii	"AT#CGMM\015\000"
 2518      474D4D0D 
 2518      00
 2519 0725 000000   		.align	2
 2520              	.LC68:
 2521 0728 4D6F6465 		.ascii	"Modem Model: %s\000"
 2521      6D204D6F 
 2521      64656C3A 
 2521      20257300 
 2522              		.align	2
 2523              	.LC69:
 2524 0738 41542343 		.ascii	"AT#CCID\015\000"
 2524      4349440D 
 2524      00
 2525 0741 000000   		.align	2
 2526              	.LC70:
 2527 0744 53494D20 		.ascii	"SIM ID: %s\000"
 2527      49443A20 
 2527      257300
 2528 074f 00       		.align	2
 2529              	.LC71:
 2530 0750 41542B43 		.ascii	"AT+CGSN\015\000"
 2530      47534E0D 
 2530      00
 2531 0759 000000   		.align	2
 2532              	.LC72:
 2533 075c 494D4549 		.ascii	"IMEI: %s\000"
 2533      3A202573 
 2533      00
 2534 0765 000000   		.align	2
 2535              	.LC73:
 2536 0768 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2536      4744434F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 62


 2536      4E543D31 
 2536      2C224950 
 2536      222C2277 
 2537 0791 00       		.ascii	"\000"
 2538 0792 0000     		.align	2
 2539              	.LC74:
 2540 0794 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2540      4744434F 
 2540      4E543D31 
 2540      2C224950 
 2540      222C2273 
 2541              		.align	2
 2542              	.LC75:
 2543 07b0 41542B43 		.ascii	"AT+CFUN?\015\000"
 2543      46554E3F 
 2543      0D00
 2544 07ba 0000     		.align	2
 2545              	.LC76:
 2546 07bc 4346554E 		.ascii	"CFUN: %s\000"
 2546      3A202573 
 2546      00
 2547 07c5 000000   		.align	2
 2548              	.LC77:
 2549 07c8 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2549      46554E3D 
 2549      310D00
 2550              		.section	.text.modem_configure_settings,"ax",%progbits
 2551              		.align	2
 2552              		.global	modem_configure_settings
 2553              		.thumb
 2554              		.thumb_func
 2555              		.type	modem_configure_settings, %function
 2556              	modem_configure_settings:
 2557              	.LFB82:
 699:modem.c       ****     
 700:modem.c       **** // Configure the modem settings
 701:modem.c       **** void modem_configure_settings(){
 2558              		.loc 1 701 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 16
 2561              		@ frame_needed = 1, uses_anonymous_args = 0
 2562 0000 80B5     		push	{r7, lr}
 2563              		.cfi_def_cfa_offset 8
 2564              		.cfi_offset 7, -8
 2565              		.cfi_offset 14, -4
 2566 0002 84B0     		sub	sp, sp, #16
 2567              		.cfi_def_cfa_offset 24
 2568 0004 00AF     		add	r7, sp, #0
 2569              		.cfi_def_cfa_register 7
 702:modem.c       ****     
 703:modem.c       ****     // Save/print modem model ID number
 704:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2570              		.loc 1 704 0
 2571 0006 454B     		ldr	r3, .L144
 2572 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2573 000a 002B     		cmp	r3, #0
 2574 000c 13D1     		bne	.L136
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 63


 705:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 706:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2575              		.loc 1 706 0
 2576 000e 4FF4FA62 		mov	r2, #2000
 2577 0012 4349     		ldr	r1, .L144+4
 2578 0014 4348     		ldr	r0, .L144+8
 2579 0016 FFF7FEFF 		bl	at_write_command
 2580 001a 0346     		mov	r3, r0
 2581 001c 002B     		cmp	r3, #0
 2582 001e 0AD0     		beq	.L136
 707:modem.c       ****             // Extract modem model ID number string from the UART
 708:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2583              		.loc 1 708 0
 2584 0020 414B     		ldr	r3, .L144+12
 2585 0022 424A     		ldr	r2, .L144+16
 2586 0024 4249     		ldr	r1, .L144+20
 2587 0026 4348     		ldr	r0, .L144+24
 2588 0028 FFF7FEFF 		bl	extract_string
 709:modem.c       ****             // Print modem model ID number
 710:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2589              		.loc 1 710 0
 2590 002c 3E4A     		ldr	r2, .L144+12
 2591 002e 4249     		ldr	r1, .L144+28
 2592 0030 0020     		movs	r0, #0
 2593 0032 FFF7FEFF 		bl	printNotif
 2594              	.L136:
 711:modem.c       ****         }
 712:modem.c       ****     }
 713:modem.c       ****     
 714:modem.c       ****    // Save/print SIM-card ID
 715:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2595              		.loc 1 715 0
 2596 0036 394B     		ldr	r3, .L144
 2597 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2598 003a 002B     		cmp	r3, #0
 2599 003c 13D1     		bne	.L137
 716:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 717:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2600              		.loc 1 717 0
 2601 003e 4FF4FA62 		mov	r2, #2000
 2602 0042 3749     		ldr	r1, .L144+4
 2603 0044 3D48     		ldr	r0, .L144+32
 2604 0046 FFF7FEFF 		bl	at_write_command
 2605 004a 0346     		mov	r3, r0
 2606 004c 002B     		cmp	r3, #0
 2607 004e 0AD0     		beq	.L137
 718:modem.c       ****             // Extract SIM-card ID string from the UART
 719:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2608              		.loc 1 719 0
 2609 0050 324B     		ldr	r3, .L144
 2610 0052 364A     		ldr	r2, .L144+16
 2611 0054 3649     		ldr	r1, .L144+20
 2612 0056 3748     		ldr	r0, .L144+24
 2613 0058 FFF7FEFF 		bl	extract_string
 720:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2614              		.loc 1 720 0
 2615 005c 2F4A     		ldr	r2, .L144
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 64


 2616 005e 3849     		ldr	r1, .L144+36
 2617 0060 0020     		movs	r0, #0
 2618 0062 FFF7FEFF 		bl	printNotif
 2619              	.L137:
 721:modem.c       ****         }
 722:modem.c       ****    }
 723:modem.c       **** 
 724:modem.c       ****     // Save/print modem IMEI
 725:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2620              		.loc 1 725 0
 2621 0066 2D4B     		ldr	r3, .L144
 2622 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2623 006c 002B     		cmp	r3, #0
 2624 006e 13D1     		bne	.L138
 726:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 727:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2625              		.loc 1 727 0
 2626 0070 4FF4FA62 		mov	r2, #2000
 2627 0074 2A49     		ldr	r1, .L144+4
 2628 0076 3348     		ldr	r0, .L144+40
 2629 0078 FFF7FEFF 		bl	at_write_command
 2630 007c 0346     		mov	r3, r0
 2631 007e 002B     		cmp	r3, #0
 2632 0080 0AD0     		beq	.L138
 728:modem.c       ****             // Extract modem IMEI number string from the UART
 729:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2633              		.loc 1 729 0
 2634 0082 314B     		ldr	r3, .L144+44
 2635 0084 294A     		ldr	r2, .L144+16
 2636 0086 2A49     		ldr	r1, .L144+20
 2637 0088 2A48     		ldr	r0, .L144+24
 2638 008a FFF7FEFF 		bl	extract_string
 730:modem.c       ****             // Print modem IMEI number
 731:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2639              		.loc 1 731 0
 2640 008e 2E4A     		ldr	r2, .L144+44
 2641 0090 2E49     		ldr	r1, .L144+48
 2642 0092 0020     		movs	r0, #0
 2643 0094 FFF7FEFF 		bl	printNotif
 2644              	.L138:
 732:modem.c       ****         } 
 733:modem.c       ****     }
 734:modem.c       ****     
 735:modem.c       ****     // Configure protocol and cellular end point
 736:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 737:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2645              		.loc 1 737 0
 2646 0098 2D4B     		ldr	r3, .L144+52
 2647 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2648 009c 83F00103 		eor	r3, r3, #1
 2649 00a0 DBB2     		uxtb	r3, r3
 2650 00a2 002B     		cmp	r3, #0
 2651 00a4 06D0     		beq	.L139
 738:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2652              		.loc 1 738 0
 2653 00a6 4FF4FA62 		mov	r2, #2000
 2654 00aa 1D49     		ldr	r1, .L144+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 65


 2655 00ac 2948     		ldr	r0, .L144+56
 2656 00ae FFF7FEFF 		bl	at_write_command
 2657 00b2 09E0     		b	.L140
 2658              	.L139:
 739:modem.c       ****     
 740:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2659              		.loc 1 740 0
 2660 00b4 264B     		ldr	r3, .L144+52
 2661 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2662 00b8 002B     		cmp	r3, #0
 2663 00ba 05D0     		beq	.L140
 741:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2664              		.loc 1 741 0
 2665 00bc 4FF4FA62 		mov	r2, #2000
 2666 00c0 1749     		ldr	r1, .L144+4
 2667 00c2 2548     		ldr	r0, .L144+60
 2668 00c4 FFF7FEFF 		bl	at_write_command
 2669              	.L140:
 742:modem.c       ****     }
 743:modem.c       ****     
 744:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 745:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 746:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2670              		.loc 1 746 0
 2671 00c8 4FF4FA62 		mov	r2, #2000
 2672 00cc 1449     		ldr	r1, .L144+4
 2673 00ce 2348     		ldr	r0, .L144+64
 2674 00d0 FFF7FEFF 		bl	at_write_command
 2675 00d4 0346     		mov	r3, r0
 2676 00d6 002B     		cmp	r3, #0
 2677 00d8 1BD0     		beq	.L143
 2678              	.LBB12:
 747:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 748:modem.c       ****         CFUN[0] = '\0';
 2679              		.loc 1 748 0
 2680 00da 0023     		movs	r3, #0
 2681 00dc 3B71     		strb	r3, [r7, #4]
 749:modem.c       ****         // Extract UART string recieved from the modem
 750:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2682              		.loc 1 750 0
 2683 00de 3B1D     		adds	r3, r7, #4
 2684 00e0 124A     		ldr	r2, .L144+16
 2685 00e2 1349     		ldr	r1, .L144+20
 2686 00e4 1348     		ldr	r0, .L144+24
 2687 00e6 FFF7FEFF 		bl	extract_string
 751:modem.c       ****         // Print UART string recieved from the modem
 752:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2688              		.loc 1 752 0
 2689 00ea 3B1D     		adds	r3, r7, #4
 2690 00ec 1A46     		mov	r2, r3
 2691 00ee 1C49     		ldr	r1, .L144+68
 2692 00f0 0020     		movs	r0, #0
 2693 00f2 FFF7FEFF 		bl	printNotif
 753:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 754:modem.c       ****         // If it returns NULL, then write another command to the modem
 755:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2694              		.loc 1 755 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 66


 2695 00f6 3B1D     		adds	r3, r7, #4
 2696 00f8 3121     		movs	r1, #49
 2697 00fa 1846     		mov	r0, r3
 2698 00fc FFF7FEFF 		bl	strchr
 2699 0100 0346     		mov	r3, r0
 2700 0102 002B     		cmp	r3, #0
 2701 0104 05D1     		bne	.L143
 756:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 757:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 758:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2702              		.loc 1 758 0
 2703 0106 4FF4FA62 		mov	r2, #2000
 2704 010a 0549     		ldr	r1, .L144+4
 2705 010c 1548     		ldr	r0, .L144+72
 2706 010e FFF7FEFF 		bl	at_write_command
 2707              	.L143:
 2708              	.LBE12:
 759:modem.c       ****         }
 760:modem.c       ****     }
 761:modem.c       **** 
 762:modem.c       ****     
 763:modem.c       **** }
 2709              		.loc 1 763 0
 2710 0112 00BF     		nop
 2711 0114 1037     		adds	r7, r7, #16
 2712              		.cfi_def_cfa_offset 8
 2713 0116 BD46     		mov	sp, r7
 2714              		.cfi_def_cfa_register 13
 2715              		@ sp needed
 2716 0118 80BD     		pop	{r7, pc}
 2717              	.L145:
 2718 011a 00BF     		.align	2
 2719              	.L144:
 2720 011c 00000000 		.word	modem_info
 2721 0120 00000000 		.word	.LC0
 2722 0124 1C070000 		.word	.LC67
 2723 0128 14000000 		.word	modem_info+20
 2724 012c 88020000 		.word	.LC21
 2725 0130 8C020000 		.word	.LC22
 2726 0134 00000000 		.word	uart_received_string
 2727 0138 28070000 		.word	.LC68
 2728 013c 38070000 		.word	.LC69
 2729 0140 44070000 		.word	.LC70
 2730 0144 50070000 		.word	.LC71
 2731 0148 28000000 		.word	modem_info+40
 2732 014c 5C070000 		.word	.LC72
 2733 0150 00000000 		.word	updatable_parameters
 2734 0154 68070000 		.word	.LC73
 2735 0158 94070000 		.word	.LC74
 2736 015c B0070000 		.word	.LC75
 2737 0160 BC070000 		.word	.LC76
 2738 0164 C8070000 		.word	.LC77
 2739              		.cfi_endproc
 2740              	.LFE82:
 2741              		.size	modem_configure_settings, .-modem_configure_settings
 2742              		.section	.rodata
 2743 07d3 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 67


 2744              	.LC78:
 2745 07d4 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2745      6D206E6F 
 2745      74207265 
 2745      61647920 
 2745      746F2067 
 2746 0807 6B2E00   		.ascii	"k.\000"
 2747 080a 0000     		.align	2
 2748              	.LC79:
 2749 080c 41542B43 		.ascii	"AT+CCLK?\015\000"
 2749      434C4B3F 
 2749      0D00
 2750 0816 0000     		.align	2
 2751              	.LC80:
 2752 0818 220D00   		.ascii	"\"\015\000"
 2753 081b 00       		.align	2
 2754              	.LC81:
 2755 081c 3A202200 		.ascii	": \"\000"
 2756              		.align	2
 2757              	.LC82:
 2758 0820 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2758      642F2564 
 2758      2C25643A 
 2758      25643A25 
 2758      642D2564 
 2759 0835 000000   		.align	2
 2760              	.LC83:
 2761 0838 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2761      642F2564 
 2761      2C25643A 
 2761      25643A25 
 2761      642B2564 
 2762 084d 000000   		.align	2
 2763              	.LC84:
 2764 0850 436F756C 		.ascii	"Could not parse modem time.\000"
 2764      64206E6F 
 2764      74207061 
 2764      72736520 
 2764      6D6F6465 
 2765              		.section	.text.modem_get_network_time,"ax",%progbits
 2766              		.align	2
 2767              		.global	modem_get_network_time
 2768              		.thumb
 2769              		.thumb_func
 2770              		.type	modem_get_network_time, %function
 2771              	modem_get_network_time:
 2772              	.LFB83:
 764:modem.c       **** 
 765:modem.c       **** //returns 0 if modem can't get time
 766:modem.c       **** long modem_get_network_time(){
 2773              		.loc 1 766 0
 2774              		.cfi_startproc
 2775              		@ args = 0, pretend = 0, frame = 104
 2776              		@ frame_needed = 1, uses_anonymous_args = 0
 2777 0000 80B5     		push	{r7, lr}
 2778              		.cfi_def_cfa_offset 8
 2779              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 68


 2780              		.cfi_offset 14, -4
 2781 0002 A0B0     		sub	sp, sp, #128
 2782              		.cfi_def_cfa_offset 136
 2783 0004 06AF     		add	r7, sp, #24
 2784              		.cfi_def_cfa 7, 112
 767:modem.c       ****     
 768:modem.c       ****     //modem reposen format (careful to include the quotes "")
 769:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 770:modem.c       ****     //ex: 14:48 GMT
 771:modem.c       **** 
 772:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 773:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2785              		.loc 1 773 0
 2786 0006 444B     		ldr	r3, .L153
 2787 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2788 000a 042B     		cmp	r3, #4
 2789 000c 05D0     		beq	.L147
 774:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2790              		.loc 1 774 0
 2791 000e 4349     		ldr	r1, .L153+4
 2792 0010 0220     		movs	r0, #2
 2793 0012 FFF7FEFF 		bl	printNotif
 775:modem.c       ****         return 0;   
 2794              		.loc 1 775 0
 2795 0016 0023     		movs	r3, #0
 2796 0018 7AE0     		b	.L148
 2797              	.L147:
 776:modem.c       ****     }
 777:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2798              		.loc 1 777 0
 2799 001a 0023     		movs	r3, #0
 2800 001c 7B66     		str	r3, [r7, #100]
 778:modem.c       ****     
 779:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 780:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2801              		.loc 1 780 0
 2802 001e 4FF4FA62 		mov	r2, #2000
 2803 0022 3F49     		ldr	r1, .L153+8
 2804 0024 3F48     		ldr	r0, .L153+12
 2805 0026 FFF7FEFF 		bl	at_write_command
 2806 002a 0346     		mov	r3, r0
 2807 002c 002B     		cmp	r3, #0
 2808 002e 6ED0     		beq	.L149
 2809              	.LBB13:
 781:modem.c       ****         // need to set this to /0
 782:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 783:modem.c       ****         network_time[0] = '\0';
 2810              		.loc 1 783 0
 2811 0030 0023     		movs	r3, #0
 2812 0032 87F84430 		strb	r3, [r7, #68]
 784:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 785:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2813              		.loc 1 785 0
 2814 0036 07F14403 		add	r3, r7, #68
 2815 003a 3B4A     		ldr	r2, .L153+16
 2816 003c 3B49     		ldr	r1, .L153+20
 2817 003e 3C48     		ldr	r0, .L153+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 69


 2818 0040 FFF7FEFF 		bl	extract_string
 786:modem.c       ****         
 787:modem.c       ****         ///////////////////  
 788:modem.c       ****         struct tm t; // Creates variable t of struct tm
 789:modem.c       ****         
 790:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 791:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2819              		.loc 1 791 0
 2820 0044 0023     		movs	r3, #0
 2821 0046 BB62     		str	r3, [r7, #40]
 792:modem.c       ****       
 793:modem.c       ****         // Determines the GMT offset 
 794:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 795:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 796:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2822              		.loc 1 796 0
 2823 0048 07F13C01 		add	r1, r7, #60
 2824 004c 07F14002 		add	r2, r7, #64
 2825 0050 07F14400 		add	r0, r7, #68
 2826 0054 07F12803 		add	r3, r7, #40
 2827 0058 0493     		str	r3, [sp, #16]
 2828 005a 07F12C03 		add	r3, r7, #44
 2829 005e 0393     		str	r3, [sp, #12]
 2830 0060 07F13003 		add	r3, r7, #48
 2831 0064 0293     		str	r3, [sp, #8]
 2832 0066 07F13403 		add	r3, r7, #52
 2833 006a 0193     		str	r3, [sp, #4]
 2834 006c 07F13803 		add	r3, r7, #56
 2835 0070 0093     		str	r3, [sp]
 2836 0072 0B46     		mov	r3, r1
 2837 0074 2F49     		ldr	r1, .L153+28
 2838 0076 FFF7FEFF 		bl	sscanf
 2839 007a 0346     		mov	r3, r0
 2840 007c 072B     		cmp	r3, #7
 2841 007e 06D1     		bne	.L150
 797:modem.c       ****             gmt_offset = gmt_offset*(900);
 2842              		.loc 1 797 0
 2843 0080 BB6A     		ldr	r3, [r7, #40]
 2844 0082 4FF46172 		mov	r2, #900
 2845 0086 02FB03F3 		mul	r3, r2, r3
 2846 008a BB62     		str	r3, [r7, #40]
 2847 008c 27E0     		b	.L151
 2848              	.L150:
 798:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2849              		.loc 1 798 0
 2850 008e 07F13C01 		add	r1, r7, #60
 2851 0092 07F14002 		add	r2, r7, #64
 2852 0096 07F14400 		add	r0, r7, #68
 2853 009a 07F12803 		add	r3, r7, #40
 2854 009e 0493     		str	r3, [sp, #16]
 2855 00a0 07F12C03 		add	r3, r7, #44
 2856 00a4 0393     		str	r3, [sp, #12]
 2857 00a6 07F13003 		add	r3, r7, #48
 2858 00aa 0293     		str	r3, [sp, #8]
 2859 00ac 07F13403 		add	r3, r7, #52
 2860 00b0 0193     		str	r3, [sp, #4]
 2861 00b2 07F13803 		add	r3, r7, #56
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 70


 2862 00b6 0093     		str	r3, [sp]
 2863 00b8 0B46     		mov	r3, r1
 2864 00ba 1F49     		ldr	r1, .L153+32
 2865 00bc FFF7FEFF 		bl	sscanf
 2866 00c0 0346     		mov	r3, r0
 2867 00c2 072B     		cmp	r3, #7
 2868 00c4 05D1     		bne	.L152
 799:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2869              		.loc 1 799 0
 2870 00c6 BB6A     		ldr	r3, [r7, #40]
 2871 00c8 1C4A     		ldr	r2, .L153+36
 2872 00ca 02FB03F3 		mul	r3, r2, r3
 2873 00ce BB62     		str	r3, [r7, #40]
 2874 00d0 05E0     		b	.L151
 2875              	.L152:
 800:modem.c       ****         }else{
 801:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2876              		.loc 1 801 0
 2877 00d2 1B49     		ldr	r1, .L153+40
 2878 00d4 0220     		movs	r0, #2
 2879 00d6 FFF7FEFF 		bl	printNotif
 802:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2880              		.loc 1 802 0
 2881 00da 0023     		movs	r3, #0
 2882 00dc 18E0     		b	.L148
 2883              	.L151:
 803:modem.c       ****         }
 804:modem.c       ****         
 805:modem.c       ****         // Sets each variable to the correct time 
 806:modem.c       ****         t.tm_sec = second;
 2884              		.loc 1 806 0
 2885 00de FB6A     		ldr	r3, [r7, #44]
 2886 00e0 7B60     		str	r3, [r7, #4]
 807:modem.c       ****         t.tm_min = minute;
 2887              		.loc 1 807 0
 2888 00e2 3B6B     		ldr	r3, [r7, #48]
 2889 00e4 BB60     		str	r3, [r7, #8]
 808:modem.c       ****         t.tm_hour = hour;
 2890              		.loc 1 808 0
 2891 00e6 7B6B     		ldr	r3, [r7, #52]
 2892 00e8 FB60     		str	r3, [r7, #12]
 809:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2893              		.loc 1 809 0
 2894 00ea 3B6C     		ldr	r3, [r7, #64]
 2895 00ec 6433     		adds	r3, r3, #100
 2896 00ee BB61     		str	r3, [r7, #24]
 810:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2897              		.loc 1 810 0
 2898 00f0 FB6B     		ldr	r3, [r7, #60]
 2899 00f2 013B     		subs	r3, r3, #1
 2900 00f4 7B61     		str	r3, [r7, #20]
 811:modem.c       ****         t.tm_mday = day;           // Day of the month
 2901              		.loc 1 811 0
 2902 00f6 BB6B     		ldr	r3, [r7, #56]
 2903 00f8 3B61     		str	r3, [r7, #16]
 812:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2904              		.loc 1 812 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 71


 2905 00fa 0023     		movs	r3, #0
 2906 00fc 7B62     		str	r3, [r7, #36]
 813:modem.c       ****     
 814:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 815:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 816:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2907              		.loc 1 816 0
 2908 00fe 3B1D     		adds	r3, r7, #4
 2909 0100 1846     		mov	r0, r3
 2910 0102 FFF7FEFF 		bl	mktime
 2911 0106 0246     		mov	r2, r0
 2912 0108 BB6A     		ldr	r3, [r7, #40]
 2913 010a 1344     		add	r3, r3, r2
 2914 010c 7B66     		str	r3, [r7, #100]
 2915              	.L149:
 2916              	.LBE13:
 817:modem.c       ****     }
 818:modem.c       ****     
 819:modem.c       ****     return epoch_time;
 2917              		.loc 1 819 0
 2918 010e 7B6E     		ldr	r3, [r7, #100]
 2919              	.L148:
 820:modem.c       **** }
 2920              		.loc 1 820 0
 2921 0110 1846     		mov	r0, r3
 2922 0112 6837     		adds	r7, r7, #104
 2923              		.cfi_def_cfa_offset 8
 2924 0114 BD46     		mov	sp, r7
 2925              		.cfi_def_cfa_register 13
 2926              		@ sp needed
 2927 0116 80BD     		pop	{r7, pc}
 2928              	.L154:
 2929              		.align	2
 2930              	.L153:
 2931 0118 00000000 		.word	modem_state
 2932 011c D4070000 		.word	.LC78
 2933 0120 00000000 		.word	.LC0
 2934 0124 0C080000 		.word	.LC79
 2935 0128 18080000 		.word	.LC80
 2936 012c 1C080000 		.word	.LC81
 2937 0130 00000000 		.word	uart_received_string
 2938 0134 20080000 		.word	.LC82
 2939 0138 38080000 		.word	.LC83
 2940 013c 7CFCFFFF 		.word	-900
 2941 0140 50080000 		.word	.LC84
 2942              		.cfi_endproc
 2943              	.LFE83:
 2944              		.size	modem_get_network_time, .-modem_get_network_time
 2945              		.section	.text.modem_get_state,"ax",%progbits
 2946              		.align	2
 2947              		.global	modem_get_state
 2948              		.thumb
 2949              		.thumb_func
 2950              		.type	modem_get_state, %function
 2951              	modem_get_state:
 2952              	.LFB84:
 821:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 72


 822:modem.c       **** // Get the modem state
 823:modem.c       **** uint8 modem_get_state(){
 2953              		.loc 1 823 0
 2954              		.cfi_startproc
 2955              		@ args = 0, pretend = 0, frame = 0
 2956              		@ frame_needed = 1, uses_anonymous_args = 0
 2957              		@ link register save eliminated.
 2958 0000 80B4     		push	{r7}
 2959              		.cfi_def_cfa_offset 4
 2960              		.cfi_offset 7, -4
 2961 0002 00AF     		add	r7, sp, #0
 2962              		.cfi_def_cfa_register 7
 824:modem.c       ****     return modem_state;
 2963              		.loc 1 824 0
 2964 0004 024B     		ldr	r3, .L157
 2965 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 825:modem.c       **** }
 2966              		.loc 1 825 0
 2967 0008 1846     		mov	r0, r3
 2968 000a BD46     		mov	sp, r7
 2969              		.cfi_def_cfa_register 13
 2970              		@ sp needed
 2971 000c 80BC     		pop	{r7}
 2972              		.cfi_restore 7
 2973              		.cfi_def_cfa_offset 0
 2974 000e 7047     		bx	lr
 2975              	.L158:
 2976              		.align	2
 2977              	.L157:
 2978 0010 00000000 		.word	modem_state
 2979              		.cfi_endproc
 2980              	.LFE84:
 2981              		.size	modem_get_state, .-modem_get_state
 2982              		.section	.text.modem_sleep,"ax",%progbits
 2983              		.align	2
 2984              		.global	modem_sleep
 2985              		.thumb
 2986              		.thumb_func
 2987              		.type	modem_sleep, %function
 2988              	modem_sleep:
 2989              	.LFB85:
 826:modem.c       **** 
 827:modem.c       **** // Set modem to sleep
 828:modem.c       **** void modem_sleep(){
 2990              		.loc 1 828 0
 2991              		.cfi_startproc
 2992              		@ args = 0, pretend = 0, frame = 0
 2993              		@ frame_needed = 1, uses_anonymous_args = 0
 2994 0000 80B5     		push	{r7, lr}
 2995              		.cfi_def_cfa_offset 8
 2996              		.cfi_offset 7, -8
 2997              		.cfi_offset 14, -4
 2998 0002 00AF     		add	r7, sp, #0
 2999              		.cfi_def_cfa_register 7
 829:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 830:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 3000              		.loc 1 830 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 73


 3001 0004 FFF7FEFF 		bl	modem_get_state
 3002 0008 0346     		mov	r3, r0
 3003 000a 002B     		cmp	r3, #0
 3004 000c 03D0     		beq	.L161
 831:modem.c       **** 
 832:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 3005              		.loc 1 832 0
 3006 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 833:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 3007              		.loc 1 833 0
 3008 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 3009              	.L161:
 834:modem.c       ****         
 835:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 836:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 837:modem.c       ****      }
 838:modem.c       **** }
 3010              		.loc 1 838 0
 3011 0016 00BF     		nop
 3012 0018 80BD     		pop	{r7, pc}
 3013              		.cfi_endproc
 3014              	.LFE85:
 3015              		.size	modem_sleep, .-modem_sleep
 3016 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 3017              		.align	2
 3018              		.global	modem_wakeup
 3019              		.thumb
 3020              		.thumb_func
 3021              		.type	modem_wakeup, %function
 3022              	modem_wakeup:
 3023              	.LFB86:
 839:modem.c       **** 
 840:modem.c       **** // Wakeup the modem
 841:modem.c       **** void modem_wakeup(){
 3024              		.loc 1 841 0
 3025              		.cfi_startproc
 3026              		@ args = 0, pretend = 0, frame = 0
 3027              		@ frame_needed = 1, uses_anonymous_args = 0
 3028 0000 80B5     		push	{r7, lr}
 3029              		.cfi_def_cfa_offset 8
 3030              		.cfi_offset 7, -8
 3031              		.cfi_offset 14, -4
 3032 0002 00AF     		add	r7, sp, #0
 3033              		.cfi_def_cfa_register 7
 842:modem.c       ****     // If modem state is not off then wake it up
 843:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 3034              		.loc 1 843 0
 3035 0004 FFF7FEFF 		bl	modem_get_state
 3036 0008 0346     		mov	r3, r0
 3037 000a 002B     		cmp	r3, #0
 3038 000c 0BD0     		beq	.L164
 844:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 3039              		.loc 1 844 0
 3040 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 845:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 846:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 847:modem.c       ****         UART_Telit_Wakeup();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 74


 3041              		.loc 1 847 0
 3042 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 848:modem.c       ****         // Remove the need for this pin itterupt
 849:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 850:modem.c       ****         
 851:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 852:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 3043              		.loc 1 852 0
 3044 0016 FFF7FEFF 		bl	modem_get_state
 3045 001a 0346     		mov	r3, r0
 3046 001c 032B     		cmp	r3, #3
 3047 001e 02D1     		bne	.L164
 853:modem.c       ****             CyDelay(100u);
 3048              		.loc 1 853 0
 3049 0020 6420     		movs	r0, #100
 3050 0022 FFF7FEFF 		bl	CyDelay
 3051              	.L164:
 854:modem.c       ****         }
 855:modem.c       ****      }
 856:modem.c       **** }
 3052              		.loc 1 856 0
 3053 0026 00BF     		nop
 3054 0028 80BD     		pop	{r7, pc}
 3055              		.cfi_endproc
 3056              	.LFE86:
 3057              		.size	modem_wakeup, .-modem_wakeup
 3058 002a 00BF     		.section	.rodata
 3059              		.align	2
 3060              	.LC85:
 3061 086c 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 3061      50494F3D 
 3061      352C312C 
 3061      312C300D 
 3061      00
 3062 087d 000000   		.align	2
 3063              	.LC86:
 3064 0880 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 3064      55504C53 
 3064      45433D31 
 3064      0D00
 3065 088e 0000     		.align	2
 3066              	.LC87:
 3067 0890 41542453 		.ascii	"AT$SUPLV=2\015\000"
 3067      55504C56 
 3067      3D320D00 
 3068              		.align	2
 3069              	.LC88:
 3070 089c 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 3070      47505345 
 3070      4E3D310D 
 3070      00
 3071 08a9 000000   		.align	2
 3072              	.LC89:
 3073 08ac 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 3073      4C503D31 
 3073      2C227375 
 3073      706C2E67 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 75


 3073      6F6F676C 
 3074 08cd 000000   		.align	2
 3075              	.LC90:
 3076 08d0 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 3076      47414354 
 3076      3D312C30 
 3076      0D0A00
 3077 08df 00       		.align	2
 3078              	.LC91:
 3079 08e0 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 3079      43534C4B 
 3079      3D312C31 
 3079      0D00
 3080 08ee 0000     		.align	2
 3081              	.LC92:
 3082 08f0 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 3082      5053534C 
 3082      53523D31 
 3082      2C312C2C 
 3082      2C2C2C32 
 3083 0906 0000     		.align	2
 3084              	.LC93:
 3085 0908 4E00     		.ascii	"N\000"
 3086 090a 0000     		.align	2
 3087              	.LC94:
 3088 090c 41542447 		.ascii	"AT$GPSACP\015\000"
 3088      50534143 
 3088      500D00
 3089 0917 00       		.align	2
 3090              	.LC95:
 3091 0918 24475053 		.ascii	"$GPSACP: \000"
 3091      4143503A 
 3091      2000
 3092 0922 0000     		.align	2
 3093              	.LC96:
 3094 0924 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 3094      4143503A 
 3094      20252A66 
 3094      2C25664E 
 3094      2C256657 
 3095              		.global	__aeabi_fdiv
 3096              		.global	__aeabi_f2d
 3097              		.global	__aeabi_ddiv
 3098              		.global	__aeabi_dadd
 3099              		.global	__aeabi_d2f
 3100              		.align	2
 3101              	.LC97:
 3102 0944 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 3102      50494F3D 
 3102      352C302C 
 3102      312C300D 
 3102      00
 3103 0955 000000   		.align	2
 3104              	.LC98:
 3105 0958 41542447 		.ascii	"AT$GPSR=0\015\000"
 3105      5053523D 
 3105      300D00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 76


 3106 0963 00       		.align	2
 3107              	.LC99:
 3108 0964 54696D65 		.ascii	"Time to lock GPS: %d\000"
 3108      20746F20 
 3108      6C6F636B 
 3108      20475053 
 3108      3A202564 
 3109              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 3110              		.align	2
 3111              		.global	modem_get_gps_coordinates
 3112              		.thumb
 3113              		.thumb_func
 3114              		.type	modem_get_gps_coordinates, %function
 3115              	modem_get_gps_coordinates:
 3116              	.LFB87:
 857:modem.c       **** 
 858:modem.c       ****     
 859:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 860:modem.c       **** gps_t modem_get_gps_coordinates(){
 3117              		.loc 1 860 0
 3118              		.cfi_startproc
 3119              		@ args = 0, pretend = 0, frame = 56
 3120              		@ frame_needed = 1, uses_anonymous_args = 0
 3121 0000 B0B5     		push	{r4, r5, r7, lr}
 3122              		.cfi_def_cfa_offset 16
 3123              		.cfi_offset 4, -16
 3124              		.cfi_offset 5, -12
 3125              		.cfi_offset 7, -8
 3126              		.cfi_offset 14, -4
 3127 0002 90B0     		sub	sp, sp, #64
 3128              		.cfi_def_cfa_offset 80
 3129 0004 02AF     		add	r7, sp, #8
 3130              		.cfi_def_cfa 7, 72
 3131 0006 7860     		str	r0, [r7, #4]
 861:modem.c       ****     gps_t gps;
 862:modem.c       ****     gps.altitude = 0;
 3132              		.loc 1 862 0
 3133 0008 4FF00003 		mov	r3, #0
 3134 000c FB61     		str	r3, [r7, #28]	@ float
 863:modem.c       ****     gps.longitude = 0;
 3135              		.loc 1 863 0
 3136 000e 4FF00003 		mov	r3, #0
 3137 0012 BB61     		str	r3, [r7, #24]	@ float
 864:modem.c       ****     gps.latitude = 0;
 3138              		.loc 1 864 0
 3139 0014 4FF00003 		mov	r3, #0
 3140 0018 7B61     		str	r3, [r7, #20]	@ float
 865:modem.c       ****     gps.time_to_lock =0;
 3141              		.loc 1 865 0
 3142 001a 0023     		movs	r3, #0
 3143 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 866:modem.c       ****     gps.valid = 0;
 3144              		.loc 1 866 0
 3145 001e 0023     		movs	r3, #0
 3146 0020 87F82230 		strb	r3, [r7, #34]
 867:modem.c       ****     
 868:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 77


 869:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 3147              		.loc 1 869 0
 3148 0024 7F4B     		ldr	r3, .L175
 3149 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3150 0028 042B     		cmp	r3, #4
 3151 002a 07D0     		beq	.L166
 870:modem.c       ****         return gps;//where valid = 0
 3152              		.loc 1 870 0
 3153 002c 7B68     		ldr	r3, [r7, #4]
 3154 002e 1C46     		mov	r4, r3
 3155 0030 07F11403 		add	r3, r7, #20
 3156 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3157 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3158 003a EFE0     		b	.L165
 3159              	.L166:
 871:modem.c       ****     }
 872:modem.c       ****     
 873:modem.c       ****     long lock_time = getTimeStamp();
 3160              		.loc 1 873 0
 3161 003c FFF7FEFF 		bl	getTimeStamp
 3162 0040 3863     		str	r0, [r7, #48]
 874:modem.c       ****     
 875:modem.c       ****     // Enable this for the LTER module
 876:modem.c       ****     // Enable GPS Low-Dropout Regulator
 877:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3163              		.loc 1 877 0
 3164 0042 4FF4FA62 		mov	r2, #2000
 3165 0046 7849     		ldr	r1, .L175+4
 3166 0048 7848     		ldr	r0, .L175+8
 3167 004a FFF7FEFF 		bl	at_write_command
 878:modem.c       ****     
 879:modem.c       ****     // Configure SUPL connection params
 880:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 3168              		.loc 1 880 0
 3169 004e 4FF4FA62 		mov	r2, #2000
 3170 0052 7549     		ldr	r1, .L175+4
 3171 0054 7648     		ldr	r0, .L175+12
 3172 0056 FFF7FEFF 		bl	at_write_command
 881:modem.c       ****     
 882:modem.c       ****     // Use SUPL2.0
 883:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 3173              		.loc 1 883 0
 3174 005a 4FF4FA62 		mov	r2, #2000
 3175 005e 7249     		ldr	r1, .L175+4
 3176 0060 7448     		ldr	r0, .L175+16
 3177 0062 FFF7FEFF 		bl	at_write_command
 884:modem.c       ****     
 885:modem.c       ****     // Enable AGPS service
 886:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 3178              		.loc 1 886 0
 3179 0066 4FF4FA62 		mov	r2, #2000
 3180 006a 6F49     		ldr	r1, .L175+4
 3181 006c 7248     		ldr	r0, .L175+20
 3182 006e FFF7FEFF 		bl	at_write_command
 887:modem.c       ****     
 888:modem.c       ****     // Chose SUPL server, use google public service
 889:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 78


 3183              		.loc 1 889 0
 3184 0072 4FF4FA62 		mov	r2, #2000
 3185 0076 6C49     		ldr	r1, .L175+4
 3186 0078 7048     		ldr	r0, .L175+24
 3187 007a FFF7FEFF 		bl	at_write_command
 890:modem.c       ****     
 891:modem.c       ****     //pdp context has to be locked to carrier for this to work
 892:modem.c       ****     
 893:modem.c       ****     // Unlock context since it needs to be used by modem
 894:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 3188              		.loc 1 894 0
 3189 007e 4FF4FA62 		mov	r2, #2000
 3190 0082 6949     		ldr	r1, .L175+4
 3191 0084 6E48     		ldr	r0, .L175+28
 3192 0086 FFF7FEFF 		bl	at_write_command
 895:modem.c       ****     
 896:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 3193              		.loc 1 896 0
 3194 008a 4FF4FA62 		mov	r2, #2000
 3195 008e 6649     		ldr	r1, .L175+4
 3196 0090 6C48     		ldr	r0, .L175+32
 3197 0092 FFF7FEFF 		bl	at_write_command
 897:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 898:modem.c       ****     
 899:modem.c       ****     // Relock the context
 900:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 3198              		.loc 1 900 0
 3199 0096 42F21072 		movw	r2, #10000
 3200 009a 6349     		ldr	r1, .L175+4
 3201 009c 6A48     		ldr	r0, .L175+36
 3202 009e FFF7FEFF 		bl	at_write_command
 901:modem.c       ****     
 902:modem.c       ****     //start AGPS service
 903:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 3203              		.loc 1 903 0
 3204 00a2 4FF4FA62 		mov	r2, #2000
 3205 00a6 6049     		ldr	r1, .L175+4
 3206 00a8 6848     		ldr	r0, .L175+40
 3207 00aa FFF7FEFF 		bl	at_write_command
 904:modem.c       ****     
 905:modem.c       ****     
 906:modem.c       ****     // Start the AGPS service
 907:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 908:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 909:modem.c       ****     
 910:modem.c       ****     
 911:modem.c       ****  
 912:modem.c       ****     uint8 gps_status = 0;
 3208              		.loc 1 912 0
 3209 00ae 0023     		movs	r3, #0
 3210 00b0 87F82F30 		strb	r3, [r7, #47]
 3211              	.LBB14:
 913:modem.c       ****     for(uint16 i=0;i<200;i++){
 3212              		.loc 1 913 0
 3213 00b4 0023     		movs	r3, #0
 3214 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 3215 00b8 13E0     		b	.L168
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 79


 3216              	.L171:
 914:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3217              		.loc 1 914 0
 3218 00ba 4FF4FA62 		mov	r2, #2000
 3219 00be 6449     		ldr	r1, .L175+44
 3220 00c0 6448     		ldr	r0, .L175+48
 3221 00c2 FFF7FEFF 		bl	at_write_command
 3222 00c6 0346     		mov	r3, r0
 3223 00c8 87F82F30 		strb	r3, [r7, #47]
 915:modem.c       ****         if(gps_status){
 3224              		.loc 1 915 0
 3225 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3226 00d0 002B     		cmp	r3, #0
 3227 00d2 0AD1     		bne	.L174
 916:modem.c       ****             break;   
 917:modem.c       ****         }
 918:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 3228              		.loc 1 918 0 discriminator 2
 3229 00d4 4FF47A70 		mov	r0, #1000
 3230 00d8 FFF7FEFF 		bl	CyDelay
 913:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3231              		.loc 1 913 0 discriminator 2
 3232 00dc FB8E     		ldrh	r3, [r7, #54]
 3233 00de 0133     		adds	r3, r3, #1
 3234 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 3235              	.L168:
 913:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3236              		.loc 1 913 0 is_stmt 0 discriminator 1
 3237 00e2 FB8E     		ldrh	r3, [r7, #54]
 3238 00e4 C72B     		cmp	r3, #199
 3239 00e6 E8D9     		bls	.L171
 3240 00e8 00E0     		b	.L170
 3241              	.L174:
 916:modem.c       ****             break;   
 3242              		.loc 1 916 0 is_stmt 1
 3243 00ea 00BF     		nop
 3244              	.L170:
 3245              	.LBE14:
 919:modem.c       ****     }
 920:modem.c       ****     
 921:modem.c       ****     //parse data here
 922:modem.c       ****     
 923:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 924:modem.c       ****     float lat;
 925:modem.c       ****     float lon;
 926:modem.c       ****     float alt;
 927:modem.c       ****     
 928:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 929:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 930:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 3246              		.loc 1 930 0
 3247 00ec 5A49     		ldr	r1, .L175+52
 3248 00ee 5B48     		ldr	r0, .L175+56
 3249 00f0 FFF7FEFF 		bl	strstr
 3250 00f4 B862     		str	r0, [r7, #40]
 931:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 932:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 80


 933:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 3251              		.loc 1 933 0
 3252 00f6 07F10C01 		add	r1, r7, #12
 3253 00fa 07F11002 		add	r2, r7, #16
 3254 00fe 07F10803 		add	r3, r7, #8
 3255 0102 0093     		str	r3, [sp]
 3256 0104 0B46     		mov	r3, r1
 3257 0106 5649     		ldr	r1, .L175+60
 3258 0108 B86A     		ldr	r0, [r7, #40]
 3259 010a FFF7FEFF 		bl	sscanf
 3260 010e 7862     		str	r0, [r7, #36]
 934:modem.c       ****     if(match >= 3){
 3261              		.loc 1 934 0
 3262 0110 7B6A     		ldr	r3, [r7, #36]
 3263 0112 022B     		cmp	r3, #2
 3264 0114 60DD     		ble	.L172
 935:modem.c       ****         // Calculate lat and lon
 936:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 937:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 938:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 3265              		.loc 1 938 0
 3266 0116 3B69     		ldr	r3, [r7, #16]	@ float
 3267 0118 5249     		ldr	r1, .L175+64
 3268 011a 1846     		mov	r0, r3
 3269 011c FFF7FEFF 		bl	__aeabi_fdiv
 3270 0120 0346     		mov	r3, r0
 3271 0122 1846     		mov	r0, r3
 3272 0124 FFF7FEFF 		bl	floorf
 3273 0128 0346     		mov	r3, r0
 3274 012a 1846     		mov	r0, r3
 3275 012c FFF7FEFF 		bl	__aeabi_f2d
 3276 0130 0446     		mov	r4, r0
 3277 0132 0D46     		mov	r5, r1
 3278 0134 3B69     		ldr	r3, [r7, #16]	@ float
 3279 0136 1846     		mov	r0, r3
 3280 0138 FFF7FEFF 		bl	__aeabi_f2d
 3281 013c 4FF00002 		mov	r2, #0
 3282 0140 494B     		ldr	r3, .L175+68
 3283 0142 FFF7FEFF 		bl	fmod
 3284 0146 4FF00002 		mov	r2, #0
 3285 014a 484B     		ldr	r3, .L175+72
 3286 014c FFF7FEFF 		bl	__aeabi_ddiv
 3287 0150 0246     		mov	r2, r0
 3288 0152 0B46     		mov	r3, r1
 3289 0154 2046     		mov	r0, r4
 3290 0156 2946     		mov	r1, r5
 3291 0158 FFF7FEFF 		bl	__aeabi_dadd
 3292 015c 0346     		mov	r3, r0
 3293 015e 0C46     		mov	r4, r1
 3294 0160 1846     		mov	r0, r3
 3295 0162 2146     		mov	r1, r4
 3296 0164 FFF7FEFF 		bl	__aeabi_d2f
 3297 0168 0346     		mov	r3, r0
 3298 016a 3B61     		str	r3, [r7, #16]	@ float
 939:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 3299              		.loc 1 939 0
 3300 016c FB68     		ldr	r3, [r7, #12]	@ float
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 81


 3301 016e 3D49     		ldr	r1, .L175+64
 3302 0170 1846     		mov	r0, r3
 3303 0172 FFF7FEFF 		bl	__aeabi_fdiv
 3304 0176 0346     		mov	r3, r0
 3305 0178 1846     		mov	r0, r3
 3306 017a FFF7FEFF 		bl	floorf
 3307 017e 0346     		mov	r3, r0
 3308 0180 1846     		mov	r0, r3
 3309 0182 FFF7FEFF 		bl	__aeabi_f2d
 3310 0186 0446     		mov	r4, r0
 3311 0188 0D46     		mov	r5, r1
 3312 018a FB68     		ldr	r3, [r7, #12]	@ float
 3313 018c 1846     		mov	r0, r3
 3314 018e FFF7FEFF 		bl	__aeabi_f2d
 3315 0192 4FF00002 		mov	r2, #0
 3316 0196 344B     		ldr	r3, .L175+68
 3317 0198 FFF7FEFF 		bl	fmod
 3318 019c 4FF00002 		mov	r2, #0
 3319 01a0 324B     		ldr	r3, .L175+72
 3320 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 3321 01a6 0246     		mov	r2, r0
 3322 01a8 0B46     		mov	r3, r1
 3323 01aa 2046     		mov	r0, r4
 3324 01ac 2946     		mov	r1, r5
 3325 01ae FFF7FEFF 		bl	__aeabi_dadd
 3326 01b2 0346     		mov	r3, r0
 3327 01b4 0C46     		mov	r4, r1
 3328 01b6 1846     		mov	r0, r3
 3329 01b8 2146     		mov	r1, r4
 3330 01ba FFF7FEFF 		bl	__aeabi_d2f
 3331 01be 0346     		mov	r3, r0
 3332 01c0 83F00043 		eor	r3, r3, #-2147483648
 3333 01c4 FB60     		str	r3, [r7, #12]	@ float
 940:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3334              		.loc 1 940 0
 3335 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3336 01c8 FB61     		str	r3, [r7, #28]	@ float
 941:modem.c       ****         gps.latitude = lat;
 3337              		.loc 1 941 0
 3338 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3339 01cc 7B61     		str	r3, [r7, #20]	@ float
 942:modem.c       ****         gps.longitude = lon;
 3340              		.loc 1 942 0
 3341 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3342 01d0 BB61     		str	r3, [r7, #24]	@ float
 943:modem.c       ****         gps.valid = 1;
 3343              		.loc 1 943 0
 3344 01d2 0123     		movs	r3, #1
 3345 01d4 87F82230 		strb	r3, [r7, #34]
 3346              	.L172:
 944:modem.c       ****     }
 945:modem.c       ****     
 946:modem.c       ****     // Disable LDO, just in case
 947:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3347              		.loc 1 947 0
 3348 01d8 4FF4FA62 		mov	r2, #2000
 3349 01dc 1249     		ldr	r1, .L175+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 82


 3350 01de 2448     		ldr	r0, .L175+76
 3351 01e0 FFF7FEFF 		bl	at_write_command
 948:modem.c       ****     
 949:modem.c       ****     // Flush modem's GPS data, just in case
 950:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3352              		.loc 1 950 0
 3353 01e4 4FF4FA62 		mov	r2, #2000
 3354 01e8 0F49     		ldr	r1, .L175+4
 3355 01ea 2248     		ldr	r0, .L175+80
 3356 01ec FFF7FEFF 		bl	at_write_command
 951:modem.c       ****     
 952:modem.c       ****     
 953:modem.c       ****     
 954:modem.c       ****     
 955:modem.c       ****     
 956:modem.c       ****     /* Relevant to 3g modem, can ignore
 957:modem.c       ****     
 958:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 959:modem.c       ****     //AT$GPSQOS=50,50,100,0
 960:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 961:modem.c       ****     
 962:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 963:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 964:modem.c       ****     
 965:modem.c       ****     //unlock contedt, simnce its being used by modem
 966:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 967:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 968:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 969:modem.c       ****     
 970:modem.c       ****     //unlock contedt, simnce its being used by modem
 971:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 972:modem.c       ****     
 973:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 974:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 975:modem.c       ****     
 976:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 977:modem.c       ****    uint8 gps_status = 0;
 978:modem.c       ****     for(uint16 i=0;i<200;i++){
 979:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 980:modem.c       ****         if(gps_status){
 981:modem.c       ****             break;   
 982:modem.c       ****         }
 983:modem.c       ****   }
 984:modem.c       ****     
 985:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 986:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 987:modem.c       ****     if(gps_status){
 988:modem.c       ****         float lat,lon,alt = 0;
 989:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 990:modem.c       ****             gps.altitude = alt;
 991:modem.c       ****             gps.latitude = lat/60;
 992:modem.c       ****             gps.longitude = lon/60;
 993:modem.c       ****             gps.valid = 1;
 994:modem.c       ****         }
 995:modem.c       ****         
 996:modem.c       ****     }
 997:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 83


 998:modem.c       ****     //turn off gps
 999:modem.c       ****     //AT$GPSP=0
1000:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
1001:modem.c       ****     
1002:modem.c       ****     */
1003:modem.c       **** 
1004:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
1005:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3357              		.loc 1 1005 0
 3358 01f0 FFF7FEFF 		bl	getTimeStamp
 3359 01f4 0246     		mov	r2, r0
 3360 01f6 3B6B     		ldr	r3, [r7, #48]
 3361 01f8 D31A     		subs	r3, r2, r3
 3362 01fa 3B63     		str	r3, [r7, #48]
1006:modem.c       ****     gps.time_to_lock = lock_time;
 3363              		.loc 1 1006 0
 3364 01fc 3B6B     		ldr	r3, [r7, #48]
 3365 01fe 9BB2     		uxth	r3, r3
 3366 0200 3B84     		strh	r3, [r7, #32]	@ movhi
1007:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3367              		.loc 1 1007 0
 3368 0202 3B8C     		ldrh	r3, [r7, #32]
 3369 0204 1A46     		mov	r2, r3
 3370 0206 1C49     		ldr	r1, .L175+84
 3371 0208 0020     		movs	r0, #0
 3372 020a FFF7FEFF 		bl	printNotif
1008:modem.c       ****     
1009:modem.c       ****     return gps;
 3373              		.loc 1 1009 0
 3374 020e 7B68     		ldr	r3, [r7, #4]
 3375 0210 1C46     		mov	r4, r3
 3376 0212 07F11403 		add	r3, r7, #20
 3377 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3378 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3379              	.L165:
1010:modem.c       ****     
1011:modem.c       **** }
 3380              		.loc 1 1011 0
 3381 021c 7868     		ldr	r0, [r7, #4]
 3382 021e 3837     		adds	r7, r7, #56
 3383              		.cfi_def_cfa_offset 16
 3384 0220 BD46     		mov	sp, r7
 3385              		.cfi_def_cfa_register 13
 3386              		@ sp needed
 3387 0222 B0BD     		pop	{r4, r5, r7, pc}
 3388              	.L176:
 3389              		.align	2
 3390              	.L175:
 3391 0224 00000000 		.word	modem_state
 3392 0228 00000000 		.word	.LC0
 3393 022c 6C080000 		.word	.LC85
 3394 0230 80080000 		.word	.LC86
 3395 0234 90080000 		.word	.LC87
 3396 0238 9C080000 		.word	.LC88
 3397 023c AC080000 		.word	.LC89
 3398 0240 D0080000 		.word	.LC90
 3399 0244 E0080000 		.word	.LC91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 84


 3400 0248 D8020000 		.word	.LC27
 3401 024c F0080000 		.word	.LC92
 3402 0250 08090000 		.word	.LC93
 3403 0254 0C090000 		.word	.LC94
 3404 0258 18090000 		.word	.LC95
 3405 025c 00000000 		.word	uart_received_string
 3406 0260 24090000 		.word	.LC96
 3407 0264 0000C842 		.word	1120403456
 3408 0268 00005940 		.word	1079574528
 3409 026c 00004E40 		.word	1078853632
 3410 0270 44090000 		.word	.LC97
 3411 0274 58090000 		.word	.LC98
 3412 0278 64090000 		.word	.LC99
 3413              		.cfi_endproc
 3414              	.LFE87:
 3415              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3416              		.text
 3417              	.Letext0:
 3418              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3419              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3420              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3421              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3422              		.file 6 "testing.h"
 3423              		.file 7 "data.h"
 3424              		.file 8 "modem.h"
 3425              		.file 9 "notoriOS.h"
 3426              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3427              		.file 11 "level_sensor.h"
 3428              		.file 12 "downstream_level_sensor.h"
 3429              		.file 13 "valve.h"
 3430              		.file 14 "App_LED.h"
 3431              		.section	.debug_info,"",%progbits
 3432              	.Ldebug_info0:
 3433 0000 B40D0000 		.4byte	0xdb4
 3434 0004 0400     		.2byte	0x4
 3435 0006 00000000 		.4byte	.Ldebug_abbrev0
 3436 000a 04       		.byte	0x4
 3437 000b 01       		.uleb128 0x1
 3438 000c A8000000 		.4byte	.LASF188
 3439 0010 0C       		.byte	0xc
 3440 0011 A4040000 		.4byte	.LASF189
 3441 0015 34000000 		.4byte	.LASF190
 3442 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3443 001d 00000000 		.4byte	0
 3444 0021 00000000 		.4byte	.Ldebug_line0
 3445 0025 02       		.uleb128 0x2
 3446 0026 01       		.byte	0x1
 3447 0027 06       		.byte	0x6
 3448 0028 BD010000 		.4byte	.LASF0
 3449 002c 03       		.uleb128 0x3
 3450 002d 7C000000 		.4byte	.LASF4
 3451 0031 02       		.byte	0x2
 3452 0032 1D       		.byte	0x1d
 3453 0033 37000000 		.4byte	0x37
 3454 0037 02       		.uleb128 0x2
 3455 0038 01       		.byte	0x1
 3456 0039 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 85


 3457 003a C5060000 		.4byte	.LASF1
 3458 003e 02       		.uleb128 0x2
 3459 003f 02       		.byte	0x2
 3460 0040 05       		.byte	0x5
 3461 0041 DC040000 		.4byte	.LASF2
 3462 0045 02       		.uleb128 0x2
 3463 0046 02       		.byte	0x2
 3464 0047 07       		.byte	0x7
 3465 0048 13030000 		.4byte	.LASF3
 3466 004c 03       		.uleb128 0x3
 3467 004d F1040000 		.4byte	.LASF5
 3468 0051 02       		.byte	0x2
 3469 0052 3F       		.byte	0x3f
 3470 0053 57000000 		.4byte	0x57
 3471 0057 02       		.uleb128 0x2
 3472 0058 04       		.byte	0x4
 3473 0059 05       		.byte	0x5
 3474 005a 6F020000 		.4byte	.LASF6
 3475 005e 03       		.uleb128 0x3
 3476 005f 36030000 		.4byte	.LASF7
 3477 0063 02       		.byte	0x2
 3478 0064 41       		.byte	0x41
 3479 0065 69000000 		.4byte	0x69
 3480 0069 02       		.uleb128 0x2
 3481 006a 04       		.byte	0x4
 3482 006b 07       		.byte	0x7
 3483 006c 07040000 		.4byte	.LASF8
 3484 0070 02       		.uleb128 0x2
 3485 0071 08       		.byte	0x8
 3486 0072 05       		.byte	0x5
 3487 0073 AF010000 		.4byte	.LASF9
 3488 0077 02       		.uleb128 0x2
 3489 0078 08       		.byte	0x8
 3490 0079 07       		.byte	0x7
 3491 007a 43010000 		.4byte	.LASF10
 3492 007e 04       		.uleb128 0x4
 3493 007f 04       		.byte	0x4
 3494 0080 05       		.byte	0x5
 3495 0081 696E7400 		.ascii	"int\000"
 3496 0085 02       		.uleb128 0x2
 3497 0086 04       		.byte	0x4
 3498 0087 07       		.byte	0x7
 3499 0088 E1070000 		.4byte	.LASF11
 3500 008c 03       		.uleb128 0x3
 3501 008d 9A090000 		.4byte	.LASF12
 3502 0091 03       		.byte	0x3
 3503 0092 18       		.byte	0x18
 3504 0093 2C000000 		.4byte	0x2c
 3505 0097 03       		.uleb128 0x3
 3506 0098 BD060000 		.4byte	.LASF13
 3507 009c 03       		.byte	0x3
 3508 009d 2C       		.byte	0x2c
 3509 009e 4C000000 		.4byte	0x4c
 3510 00a2 03       		.uleb128 0x3
 3511 00a3 DD080000 		.4byte	.LASF14
 3512 00a7 03       		.byte	0x3
 3513 00a8 30       		.byte	0x30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 86


 3514 00a9 5E000000 		.4byte	0x5e
 3515 00ad 05       		.uleb128 0x5
 3516 00ae AD020000 		.4byte	.LASF15
 3517 00b2 04       		.byte	0x4
 3518 00b3 9201     		.2byte	0x192
 3519 00b5 37000000 		.4byte	0x37
 3520 00b9 05       		.uleb128 0x5
 3521 00ba 17000000 		.4byte	.LASF16
 3522 00be 04       		.byte	0x4
 3523 00bf 9301     		.2byte	0x193
 3524 00c1 45000000 		.4byte	0x45
 3525 00c5 05       		.uleb128 0x5
 3526 00c6 26030000 		.4byte	.LASF17
 3527 00ca 04       		.byte	0x4
 3528 00cb 9401     		.2byte	0x194
 3529 00cd 69000000 		.4byte	0x69
 3530 00d1 05       		.uleb128 0x5
 3531 00d2 FA050000 		.4byte	.LASF18
 3532 00d6 04       		.byte	0x4
 3533 00d7 9601     		.2byte	0x196
 3534 00d9 3E000000 		.4byte	0x3e
 3535 00dd 05       		.uleb128 0x5
 3536 00de D2020000 		.4byte	.LASF19
 3537 00e2 04       		.byte	0x4
 3538 00e3 9701     		.2byte	0x197
 3539 00e5 57000000 		.4byte	0x57
 3540 00e9 02       		.uleb128 0x2
 3541 00ea 04       		.byte	0x4
 3542 00eb 04       		.byte	0x4
 3543 00ec 67060000 		.4byte	.LASF20
 3544 00f0 02       		.uleb128 0x2
 3545 00f1 08       		.byte	0x8
 3546 00f2 04       		.byte	0x4
 3547 00f3 1D0A0000 		.4byte	.LASF21
 3548 00f7 02       		.uleb128 0x2
 3549 00f8 01       		.byte	0x1
 3550 00f9 08       		.byte	0x8
 3551 00fa C8070000 		.4byte	.LASF22
 3552 00fe 02       		.uleb128 0x2
 3553 00ff 08       		.byte	0x8
 3554 0100 04       		.byte	0x4
 3555 0101 BC070000 		.4byte	.LASF23
 3556 0105 02       		.uleb128 0x2
 3557 0106 04       		.byte	0x4
 3558 0107 07       		.byte	0x7
 3559 0108 A7050000 		.4byte	.LASF24
 3560 010c 06       		.uleb128 0x6
 3561 010d 04       		.byte	0x4
 3562 010e F7000000 		.4byte	0xf7
 3563 0112 06       		.uleb128 0x6
 3564 0113 04       		.byte	0x4
 3565 0114 18010000 		.4byte	0x118
 3566 0118 07       		.uleb128 0x7
 3567 0119 F7000000 		.4byte	0xf7
 3568 011d 08       		.uleb128 0x8
 3569 011e F7000000 		.4byte	0xf7
 3570 0122 2D010000 		.4byte	0x12d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 87


 3571 0126 09       		.uleb128 0x9
 3572 0127 05010000 		.4byte	0x105
 3573 012b 17       		.byte	0x17
 3574 012c 00       		.byte	0
 3575 012d 0A       		.uleb128 0xa
 3576 012e 746D00   		.ascii	"tm\000"
 3577 0131 24       		.byte	0x24
 3578 0132 05       		.byte	0x5
 3579 0133 21       		.byte	0x21
 3580 0134 A5010000 		.4byte	0x1a5
 3581 0138 0B       		.uleb128 0xb
 3582 0139 E6080000 		.4byte	.LASF25
 3583 013d 05       		.byte	0x5
 3584 013e 23       		.byte	0x23
 3585 013f 7E000000 		.4byte	0x7e
 3586 0143 00       		.byte	0
 3587 0144 0B       		.uleb128 0xb
 3588 0145 A0050000 		.4byte	.LASF26
 3589 0149 05       		.byte	0x5
 3590 014a 24       		.byte	0x24
 3591 014b 7E000000 		.4byte	0x7e
 3592 014f 04       		.byte	0x4
 3593 0150 0B       		.uleb128 0xb
 3594 0151 24000000 		.4byte	.LASF27
 3595 0155 05       		.byte	0x5
 3596 0156 25       		.byte	0x25
 3597 0157 7E000000 		.4byte	0x7e
 3598 015b 08       		.byte	0x8
 3599 015c 0B       		.uleb128 0xb
 3600 015d B2080000 		.4byte	.LASF28
 3601 0161 05       		.byte	0x5
 3602 0162 26       		.byte	0x26
 3603 0163 7E000000 		.4byte	0x7e
 3604 0167 0C       		.byte	0xc
 3605 0168 0B       		.uleb128 0xb
 3606 0169 58030000 		.4byte	.LASF29
 3607 016d 05       		.byte	0x5
 3608 016e 27       		.byte	0x27
 3609 016f 7E000000 		.4byte	0x7e
 3610 0173 10       		.byte	0x10
 3611 0174 0B       		.uleb128 0xb
 3612 0175 CF030000 		.4byte	.LASF30
 3613 0179 05       		.byte	0x5
 3614 017a 28       		.byte	0x28
 3615 017b 7E000000 		.4byte	0x7e
 3616 017f 14       		.byte	0x14
 3617 0180 0B       		.uleb128 0xb
 3618 0181 78070000 		.4byte	.LASF31
 3619 0185 05       		.byte	0x5
 3620 0186 29       		.byte	0x29
 3621 0187 7E000000 		.4byte	0x7e
 3622 018b 18       		.byte	0x18
 3623 018c 0B       		.uleb128 0xb
 3624 018d 2C000000 		.4byte	.LASF32
 3625 0191 05       		.byte	0x5
 3626 0192 2A       		.byte	0x2a
 3627 0193 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 88


 3628 0197 1C       		.byte	0x1c
 3629 0198 0B       		.uleb128 0xb
 3630 0199 6B040000 		.4byte	.LASF33
 3631 019d 05       		.byte	0x5
 3632 019e 2B       		.byte	0x2b
 3633 019f 7E000000 		.4byte	0x7e
 3634 01a3 20       		.byte	0x20
 3635 01a4 00       		.byte	0
 3636 01a5 0C       		.uleb128 0xc
 3637 01a6 8101     		.2byte	0x181
 3638 01a8 06       		.byte	0x6
 3639 01a9 0A       		.byte	0xa
 3640 01aa D3010000 		.4byte	0x1d3
 3641 01ae 0B       		.uleb128 0xb
 3642 01af F0050000 		.4byte	.LASF34
 3643 01b3 06       		.byte	0x6
 3644 01b4 0C       		.byte	0xc
 3645 01b5 D3010000 		.4byte	0x1d3
 3646 01b9 00       		.byte	0
 3647 01ba 0B       		.uleb128 0xb
 3648 01bb 2C090000 		.4byte	.LASF35
 3649 01bf 06       		.byte	0x6
 3650 01c0 0D       		.byte	0xd
 3651 01c1 AD000000 		.4byte	0xad
 3652 01c5 80       		.byte	0x80
 3653 01c6 0B       		.uleb128 0xb
 3654 01c7 3B070000 		.4byte	.LASF36
 3655 01cb 06       		.byte	0x6
 3656 01cc 0F       		.byte	0xf
 3657 01cd E3010000 		.4byte	0x1e3
 3658 01d1 81       		.byte	0x81
 3659 01d2 00       		.byte	0
 3660 01d3 08       		.uleb128 0x8
 3661 01d4 F7000000 		.4byte	0xf7
 3662 01d8 E3010000 		.4byte	0x1e3
 3663 01dc 09       		.uleb128 0x9
 3664 01dd 05010000 		.4byte	0x105
 3665 01e1 7F       		.byte	0x7f
 3666 01e2 00       		.byte	0
 3667 01e3 08       		.uleb128 0x8
 3668 01e4 F7000000 		.4byte	0xf7
 3669 01e8 F3010000 		.4byte	0x1f3
 3670 01ec 09       		.uleb128 0x9
 3671 01ed 05010000 		.4byte	0x105
 3672 01f1 FF       		.byte	0xff
 3673 01f2 00       		.byte	0
 3674 01f3 03       		.uleb128 0x3
 3675 01f4 23070000 		.4byte	.LASF37
 3676 01f8 06       		.byte	0x6
 3677 01f9 10       		.byte	0x10
 3678 01fa A5010000 		.4byte	0x1a5
 3679 01fe 0D       		.uleb128 0xd
 3680 01ff 2C       		.byte	0x2c
 3681 0200 07       		.byte	0x7
 3682 0201 14       		.byte	0x14
 3683 0202 2B020000 		.4byte	0x22b
 3684 0206 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 89


 3685 0207 6B657900 		.ascii	"key\000"
 3686 020b 07       		.byte	0x7
 3687 020c 15       		.byte	0x15
 3688 020d 2B020000 		.4byte	0x22b
 3689 0211 00       		.byte	0
 3690 0212 0B       		.uleb128 0xb
 3691 0213 1E000000 		.4byte	.LASF38
 3692 0217 07       		.byte	0x7
 3693 0218 16       		.byte	0x16
 3694 0219 2B020000 		.4byte	0x22b
 3695 021d 14       		.byte	0x14
 3696 021e 0B       		.uleb128 0xb
 3697 021f 47040000 		.4byte	.LASF39
 3698 0223 07       		.byte	0x7
 3699 0224 17       		.byte	0x17
 3700 0225 DD000000 		.4byte	0xdd
 3701 0229 28       		.byte	0x28
 3702 022a 00       		.byte	0
 3703 022b 08       		.uleb128 0x8
 3704 022c F7000000 		.4byte	0xf7
 3705 0230 3B020000 		.4byte	0x23b
 3706 0234 09       		.uleb128 0x9
 3707 0235 05010000 		.4byte	0x105
 3708 0239 13       		.byte	0x13
 3709 023a 00       		.byte	0
 3710 023b 03       		.uleb128 0x3
 3711 023c F1030000 		.4byte	.LASF40
 3712 0240 07       		.byte	0x7
 3713 0241 19       		.byte	0x19
 3714 0242 FE010000 		.4byte	0x1fe
 3715 0246 0D       		.uleb128 0xd
 3716 0247 3C       		.byte	0x3c
 3717 0248 08       		.byte	0x8
 3718 0249 36       		.byte	0x36
 3719 024a 73020000 		.4byte	0x273
 3720 024e 0B       		.uleb128 0xb
 3721 024f AB080000 		.4byte	.LASF41
 3722 0253 08       		.byte	0x8
 3723 0254 37       		.byte	0x37
 3724 0255 2B020000 		.4byte	0x22b
 3725 0259 00       		.byte	0
 3726 025a 0B       		.uleb128 0xb
 3727 025b FE070000 		.4byte	.LASF42
 3728 025f 08       		.byte	0x8
 3729 0260 38       		.byte	0x38
 3730 0261 2B020000 		.4byte	0x22b
 3731 0265 14       		.byte	0x14
 3732 0266 0B       		.uleb128 0xb
 3733 0267 36070000 		.4byte	.LASF43
 3734 026b 08       		.byte	0x8
 3735 026c 39       		.byte	0x39
 3736 026d 2B020000 		.4byte	0x22b
 3737 0271 28       		.byte	0x28
 3738 0272 00       		.byte	0
 3739 0273 03       		.uleb128 0x3
 3740 0274 12080000 		.4byte	.LASF44
 3741 0278 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 90


 3742 0279 3B       		.byte	0x3b
 3743 027a 46020000 		.4byte	0x246
 3744 027e 0D       		.uleb128 0xd
 3745 027f 20       		.byte	0x20
 3746 0280 08       		.byte	0x8
 3747 0281 3D       		.byte	0x3d
 3748 0282 E7020000 		.4byte	0x2e7
 3749 0286 0B       		.uleb128 0xb
 3750 0287 78020000 		.4byte	.LASF45
 3751 028b 08       		.byte	0x8
 3752 028c 3E       		.byte	0x3e
 3753 028d 7E000000 		.4byte	0x7e
 3754 0291 00       		.byte	0
 3755 0292 0E       		.uleb128 0xe
 3756 0293 62657200 		.ascii	"ber\000"
 3757 0297 08       		.byte	0x8
 3758 0298 3F       		.byte	0x3f
 3759 0299 7E000000 		.4byte	0x7e
 3760 029d 04       		.byte	0x4
 3761 029e 0B       		.uleb128 0xb
 3762 029f 04070000 		.4byte	.LASF46
 3763 02a3 08       		.byte	0x8
 3764 02a4 40       		.byte	0x40
 3765 02a5 7E000000 		.4byte	0x7e
 3766 02a9 08       		.byte	0x8
 3767 02aa 0B       		.uleb128 0xb
 3768 02ab C9010000 		.4byte	.LASF47
 3769 02af 08       		.byte	0x8
 3770 02b0 41       		.byte	0x41
 3771 02b1 7E000000 		.4byte	0x7e
 3772 02b5 0C       		.byte	0xc
 3773 02b6 0B       		.uleb128 0xb
 3774 02b7 E9060000 		.4byte	.LASF48
 3775 02bb 08       		.byte	0x8
 3776 02bc 42       		.byte	0x42
 3777 02bd 7E000000 		.4byte	0x7e
 3778 02c1 10       		.byte	0x10
 3779 02c2 0B       		.uleb128 0xb
 3780 02c3 42070000 		.4byte	.LASF49
 3781 02c7 08       		.byte	0x8
 3782 02c8 43       		.byte	0x43
 3783 02c9 7E000000 		.4byte	0x7e
 3784 02cd 14       		.byte	0x14
 3785 02ce 0B       		.uleb128 0xb
 3786 02cf EB010000 		.4byte	.LASF50
 3787 02d3 08       		.byte	0x8
 3788 02d4 44       		.byte	0x44
 3789 02d5 7E000000 		.4byte	0x7e
 3790 02d9 18       		.byte	0x18
 3791 02da 0B       		.uleb128 0xb
 3792 02db BF040000 		.4byte	.LASF51
 3793 02df 08       		.byte	0x8
 3794 02e0 45       		.byte	0x45
 3795 02e1 7E000000 		.4byte	0x7e
 3796 02e5 1C       		.byte	0x1c
 3797 02e6 00       		.byte	0
 3798 02e7 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 91


 3799 02e8 47070000 		.4byte	.LASF52
 3800 02ec 08       		.byte	0x8
 3801 02ed 47       		.byte	0x47
 3802 02ee 7E020000 		.4byte	0x27e
 3803 02f2 0D       		.uleb128 0xd
 3804 02f3 10       		.byte	0x10
 3805 02f4 08       		.byte	0x8
 3806 02f5 49       		.byte	0x49
 3807 02f6 37030000 		.4byte	0x337
 3808 02fa 0B       		.uleb128 0xb
 3809 02fb E7050000 		.4byte	.LASF53
 3810 02ff 08       		.byte	0x8
 3811 0300 4A       		.byte	0x4a
 3812 0301 E9000000 		.4byte	0xe9
 3813 0305 00       		.byte	0
 3814 0306 0B       		.uleb128 0xb
 3815 0307 9E000000 		.4byte	.LASF54
 3816 030b 08       		.byte	0x8
 3817 030c 4B       		.byte	0x4b
 3818 030d E9000000 		.4byte	0xe9
 3819 0311 04       		.byte	0x4
 3820 0312 0B       		.uleb128 0xb
 3821 0313 A4020000 		.4byte	.LASF55
 3822 0317 08       		.byte	0x8
 3823 0318 4C       		.byte	0x4c
 3824 0319 E9000000 		.4byte	0xe9
 3825 031d 08       		.byte	0x8
 3826 031e 0B       		.uleb128 0xb
 3827 031f 51040000 		.4byte	.LASF56
 3828 0323 08       		.byte	0x8
 3829 0324 4D       		.byte	0x4d
 3830 0325 B9000000 		.4byte	0xb9
 3831 0329 0C       		.byte	0xc
 3832 032a 0B       		.uleb128 0xb
 3833 032b BA080000 		.4byte	.LASF57
 3834 032f 08       		.byte	0x8
 3835 0330 4E       		.byte	0x4e
 3836 0331 AD000000 		.4byte	0xad
 3837 0335 0E       		.byte	0xe
 3838 0336 00       		.byte	0
 3839 0337 03       		.uleb128 0x3
 3840 0338 1F080000 		.4byte	.LASF58
 3841 033c 08       		.byte	0x8
 3842 033d 50       		.byte	0x50
 3843 033e F2020000 		.4byte	0x2f2
 3844 0342 0D       		.uleb128 0xd
 3845 0343 09       		.byte	0x9
 3846 0344 08       		.byte	0x8
 3847 0345 53       		.byte	0x53
 3848 0346 B7030000 		.4byte	0x3b7
 3849 034a 0B       		.uleb128 0xb
 3850 034b D8020000 		.4byte	.LASF59
 3851 034f 08       		.byte	0x8
 3852 0350 55       		.byte	0x55
 3853 0351 AD000000 		.4byte	0xad
 3854 0355 00       		.byte	0
 3855 0356 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 92


 3856 0357 9B060000 		.4byte	.LASF60
 3857 035b 08       		.byte	0x8
 3858 035c 57       		.byte	0x57
 3859 035d B7030000 		.4byte	0x3b7
 3860 0361 01       		.byte	0x1
 3861 0362 0B       		.uleb128 0xb
 3862 0363 37080000 		.4byte	.LASF61
 3863 0367 08       		.byte	0x8
 3864 0368 59       		.byte	0x59
 3865 0369 AD000000 		.4byte	0xad
 3866 036d 02       		.byte	0x2
 3867 036e 0B       		.uleb128 0xb
 3868 036f EE060000 		.4byte	.LASF62
 3869 0373 08       		.byte	0x8
 3870 0374 5B       		.byte	0x5b
 3871 0375 AD000000 		.4byte	0xad
 3872 0379 03       		.byte	0x3
 3873 037a 0B       		.uleb128 0xb
 3874 037b 8A030000 		.4byte	.LASF63
 3875 037f 08       		.byte	0x8
 3876 0380 5E       		.byte	0x5e
 3877 0381 AD000000 		.4byte	0xad
 3878 0385 04       		.byte	0x4
 3879 0386 0B       		.uleb128 0xb
 3880 0387 7E090000 		.4byte	.LASF64
 3881 038b 08       		.byte	0x8
 3882 038c 63       		.byte	0x63
 3883 038d AD000000 		.4byte	0xad
 3884 0391 05       		.byte	0x5
 3885 0392 0B       		.uleb128 0xb
 3886 0393 97070000 		.4byte	.LASF65
 3887 0397 08       		.byte	0x8
 3888 0398 65       		.byte	0x65
 3889 0399 AD000000 		.4byte	0xad
 3890 039d 06       		.byte	0x6
 3891 039e 0B       		.uleb128 0xb
 3892 039f 61090000 		.4byte	.LASF66
 3893 03a3 08       		.byte	0x8
 3894 03a4 66       		.byte	0x66
 3895 03a5 AD000000 		.4byte	0xad
 3896 03a9 07       		.byte	0x7
 3897 03aa 0B       		.uleb128 0xb
 3898 03ab CE090000 		.4byte	.LASF67
 3899 03af 08       		.byte	0x8
 3900 03b0 67       		.byte	0x67
 3901 03b1 AD000000 		.4byte	0xad
 3902 03b5 08       		.byte	0x8
 3903 03b6 00       		.byte	0
 3904 03b7 02       		.uleb128 0x2
 3905 03b8 01       		.byte	0x1
 3906 03b9 02       		.byte	0x2
 3907 03ba B7060000 		.4byte	.LASF68
 3908 03be 03       		.uleb128 0x3
 3909 03bf 6B050000 		.4byte	.LASF69
 3910 03c3 08       		.byte	0x8
 3911 03c4 69       		.byte	0x69
 3912 03c5 42030000 		.4byte	0x342
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 93


 3913 03c9 0D       		.uleb128 0xd
 3914 03ca 06       		.byte	0x6
 3915 03cb 09       		.byte	0x9
 3916 03cc 30       		.byte	0x30
 3917 03cd 02040000 		.4byte	0x402
 3918 03d1 0B       		.uleb128 0xb
 3919 03d2 CE010000 		.4byte	.LASF70
 3920 03d6 09       		.byte	0x9
 3921 03d7 32       		.byte	0x32
 3922 03d8 B9000000 		.4byte	0xb9
 3923 03dc 00       		.byte	0
 3924 03dd 0B       		.uleb128 0xb
 3925 03de 7E020000 		.4byte	.LASF71
 3926 03e2 09       		.byte	0x9
 3927 03e3 33       		.byte	0x33
 3928 03e4 D1000000 		.4byte	0xd1
 3929 03e8 02       		.byte	0x2
 3930 03e9 0B       		.uleb128 0xb
 3931 03ea C0090000 		.4byte	.LASF72
 3932 03ee 09       		.byte	0x9
 3933 03ef 34       		.byte	0x34
 3934 03f0 AD000000 		.4byte	0xad
 3935 03f4 04       		.byte	0x4
 3936 03f5 0B       		.uleb128 0xb
 3937 03f6 86000000 		.4byte	.LASF73
 3938 03fa 09       		.byte	0x9
 3939 03fb 35       		.byte	0x35
 3940 03fc AD000000 		.4byte	0xad
 3941 0400 05       		.byte	0x5
 3942 0401 00       		.byte	0
 3943 0402 03       		.uleb128 0x3
 3944 0403 B1060000 		.4byte	.LASF74
 3945 0407 09       		.byte	0x9
 3946 0408 38       		.byte	0x38
 3947 0409 0D040000 		.4byte	0x40d
 3948 040d 0F       		.uleb128 0xf
 3949 040e C9030000 		.4byte	0x3c9
 3950 0412 0D       		.uleb128 0xd
 3951 0413 1C       		.byte	0x1c
 3952 0414 09       		.byte	0x9
 3953 0415 3B       		.byte	0x3b
 3954 0416 33040000 		.4byte	0x433
 3955 041a 0B       		.uleb128 0xb
 3956 041b 74040000 		.4byte	.LASF75
 3957 041f 09       		.byte	0x9
 3958 0420 3D       		.byte	0x3d
 3959 0421 33040000 		.4byte	0x433
 3960 0425 00       		.byte	0
 3961 0426 0B       		.uleb128 0xb
 3962 0427 87040000 		.4byte	.LASF76
 3963 042b 09       		.byte	0x9
 3964 042c 3E       		.byte	0x3e
 3965 042d 1D010000 		.4byte	0x11d
 3966 0431 04       		.byte	0x4
 3967 0432 00       		.byte	0
 3968 0433 06       		.uleb128 0x6
 3969 0434 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 94


 3970 0435 73020000 		.4byte	0x273
 3971 0439 03       		.uleb128 0x3
 3972 043a 60050000 		.4byte	.LASF77
 3973 043e 09       		.byte	0x9
 3974 043f 40       		.byte	0x40
 3975 0440 12040000 		.4byte	0x412
 3976 0444 0D       		.uleb128 0xd
 3977 0445 68       		.byte	0x68
 3978 0446 09       		.byte	0x9
 3979 0447 46       		.byte	0x46
 3980 0448 65040000 		.4byte	0x465
 3981 044c 0B       		.uleb128 0xb
 3982 044d 7F040000 		.4byte	.LASF78
 3983 0451 09       		.byte	0x9
 3984 0452 4B       		.byte	0x4b
 3985 0453 65040000 		.4byte	0x465
 3986 0457 00       		.byte	0
 3987 0458 0B       		.uleb128 0xb
 3988 0459 63040000 		.4byte	.LASF79
 3989 045d 09       		.byte	0x9
 3990 045e 4C       		.byte	0x4c
 3991 045f 7E000000 		.4byte	0x7e
 3992 0463 64       		.byte	0x64
 3993 0464 00       		.byte	0
 3994 0465 08       		.uleb128 0x8
 3995 0466 F7000000 		.4byte	0xf7
 3996 046a 75040000 		.4byte	0x475
 3997 046e 09       		.uleb128 0x9
 3998 046f 05010000 		.4byte	0x105
 3999 0473 63       		.byte	0x63
 4000 0474 00       		.byte	0
 4001 0475 03       		.uleb128 0x3
 4002 0476 8B090000 		.4byte	.LASF80
 4003 047a 09       		.byte	0x9
 4004 047b 52       		.byte	0x52
 4005 047c 44040000 		.4byte	0x444
 4006 0480 10       		.uleb128 0x10
 4007 0481 A4060000 		.4byte	.LASF112
 4008 0485 01       		.byte	0x1
 4009 0486 12       		.byte	0x12
 4010 0487 00000000 		.4byte	.LFB64
 4011 048b 44000000 		.4byte	.LFE64-.LFB64
 4012 048f 01       		.uleb128 0x1
 4013 0490 9C       		.byte	0x9c
 4014 0491 11       		.uleb128 0x11
 4015 0492 6D060000 		.4byte	.LASF81
 4016 0496 01       		.byte	0x1
 4017 0497 1C       		.byte	0x1c
 4018 0498 00000000 		.4byte	.LFB65
 4019 049c 6C000000 		.4byte	.LFE65-.LFB65
 4020 04a0 01       		.uleb128 0x1
 4021 04a1 9C       		.byte	0x9c
 4022 04a2 11       		.uleb128 0x11
 4023 04a3 89080000 		.4byte	.LASF82
 4024 04a7 01       		.byte	0x1
 4025 04a8 36       		.byte	0x36
 4026 04a9 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 95


 4027 04ad 32000000 		.4byte	.LFE66-.LFB66
 4028 04b1 01       		.uleb128 0x1
 4029 04b2 9C       		.byte	0x9c
 4030 04b3 11       		.uleb128 0x11
 4031 04b4 C0080000 		.4byte	.LASF83
 4032 04b8 01       		.byte	0x1
 4033 04b9 46       		.byte	0x46
 4034 04ba 00000000 		.4byte	.LFB67
 4035 04be 20000000 		.4byte	.LFE67-.LFB67
 4036 04c2 01       		.uleb128 0x1
 4037 04c3 9C       		.byte	0x9c
 4038 04c4 11       		.uleb128 0x11
 4039 04c5 0C0A0000 		.4byte	.LASF84
 4040 04c9 01       		.byte	0x1
 4041 04ca 4F       		.byte	0x4f
 4042 04cb 00000000 		.4byte	.LFB68
 4043 04cf 40000000 		.4byte	.LFE68-.LFB68
 4044 04d3 01       		.uleb128 0x1
 4045 04d4 9C       		.byte	0x9c
 4046 04d5 12       		.uleb128 0x12
 4047 04d6 95040000 		.4byte	.LASF98
 4048 04da 01       		.byte	0x1
 4049 04db 61       		.byte	0x61
 4050 04dc AD000000 		.4byte	0xad
 4051 04e0 00000000 		.4byte	.LFB69
 4052 04e4 DC000000 		.4byte	.LFE69-.LFB69
 4053 04e8 01       		.uleb128 0x1
 4054 04e9 9C       		.byte	0x9c
 4055 04ea 49050000 		.4byte	0x549
 4056 04ee 13       		.uleb128 0x13
 4057 04ef AE090000 		.4byte	.LASF85
 4058 04f3 01       		.byte	0x1
 4059 04f4 6A       		.byte	0x6a
 4060 04f5 AD000000 		.4byte	0xad
 4061 04f9 02       		.uleb128 0x2
 4062 04fa 91       		.byte	0x91
 4063 04fb 77       		.sleb128 -9
 4064 04fc 13       		.uleb128 0x13
 4065 04fd B7090000 		.4byte	.LASF86
 4066 0501 01       		.byte	0x1
 4067 0502 6B       		.byte	0x6b
 4068 0503 AD000000 		.4byte	0xad
 4069 0507 02       		.uleb128 0x2
 4070 0508 91       		.byte	0x91
 4071 0509 74       		.sleb128 -12
 4072 050a 13       		.uleb128 0x13
 4073 050b D9090000 		.4byte	.LASF87
 4074 050f 01       		.byte	0x1
 4075 0510 6D       		.byte	0x6d
 4076 0511 57000000 		.4byte	0x57
 4077 0515 02       		.uleb128 0x2
 4078 0516 91       		.byte	0x91
 4079 0517 70       		.sleb128 -16
 4080 0518 14       		.uleb128 0x14
 4081 0519 26000000 		.4byte	.LBB2
 4082 051d 4A000000 		.4byte	.LBE2-.LBB2
 4083 0521 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 96


 4084 0522 B7090000 		.4byte	.LASF86
 4085 0526 01       		.byte	0x1
 4086 0527 70       		.byte	0x70
 4087 0528 AD000000 		.4byte	0xad
 4088 052c 02       		.uleb128 0x2
 4089 052d 91       		.byte	0x91
 4090 052e 76       		.sleb128 -10
 4091 052f 14       		.uleb128 0x14
 4092 0530 2C000000 		.4byte	.LBB3
 4093 0534 2A000000 		.4byte	.LBE3-.LBB3
 4094 0538 13       		.uleb128 0x13
 4095 0539 FD030000 		.4byte	.LASF88
 4096 053d 01       		.byte	0x1
 4097 053e 72       		.byte	0x72
 4098 053f AD000000 		.4byte	0xad
 4099 0543 02       		.uleb128 0x2
 4100 0544 91       		.byte	0x91
 4101 0545 75       		.sleb128 -11
 4102 0546 00       		.byte	0
 4103 0547 00       		.byte	0
 4104 0548 00       		.byte	0
 4105 0549 11       		.uleb128 0x11
 4106 054a 80070000 		.4byte	.LASF89
 4107 054e 01       		.byte	0x1
 4108 054f 93       		.byte	0x93
 4109 0550 00000000 		.4byte	.LFB70
 4110 0554 1C000000 		.4byte	.LFE70-.LFB70
 4111 0558 01       		.uleb128 0x1
 4112 0559 9C       		.byte	0x9c
 4113 055a 11       		.uleb128 0x11
 4114 055b 55070000 		.4byte	.LASF90
 4115 055f 01       		.byte	0x1
 4116 0560 9B       		.byte	0x9b
 4117 0561 00000000 		.4byte	.LFB71
 4118 0565 28000000 		.4byte	.LFE71-.LFB71
 4119 0569 01       		.uleb128 0x1
 4120 056a 9C       		.byte	0x9c
 4121 056b 15       		.uleb128 0x15
 4122 056c 4F050000 		.4byte	.LASF102
 4123 0570 01       		.byte	0x1
 4124 0571 A6       		.byte	0xa6
 4125 0572 8C000000 		.4byte	0x8c
 4126 0576 00000000 		.4byte	.LFB72
 4127 057a C8000000 		.4byte	.LFE72-.LFB72
 4128 057e 01       		.uleb128 0x1
 4129 057f 9C       		.byte	0x9c
 4130 0580 FD050000 		.4byte	0x5fd
 4131 0584 16       		.uleb128 0x16
 4132 0585 4D060000 		.4byte	.LASF91
 4133 0589 01       		.byte	0x1
 4134 058a A6       		.byte	0xa6
 4135 058b 0C010000 		.4byte	0x10c
 4136 058f 02       		.uleb128 0x2
 4137 0590 91       		.byte	0x91
 4138 0591 5C       		.sleb128 -36
 4139 0592 16       		.uleb128 0x16
 4140 0593 E3090000 		.4byte	.LASF92
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 97


 4141 0597 01       		.byte	0x1
 4142 0598 A6       		.byte	0xa6
 4143 0599 0C010000 		.4byte	0x10c
 4144 059d 02       		.uleb128 0x2
 4145 059e 91       		.byte	0x91
 4146 059f 58       		.sleb128 -40
 4147 05a0 16       		.uleb128 0x16
 4148 05a1 28040000 		.4byte	.LASF93
 4149 05a5 01       		.byte	0x1
 4150 05a6 A6       		.byte	0xa6
 4151 05a7 A2000000 		.4byte	0xa2
 4152 05ab 02       		.uleb128 0x2
 4153 05ac 91       		.byte	0x91
 4154 05ad 54       		.sleb128 -44
 4155 05ae 13       		.uleb128 0x13
 4156 05af 1C050000 		.4byte	.LASF94
 4157 05b3 01       		.byte	0x1
 4158 05b4 A8       		.byte	0xa8
 4159 05b5 C5000000 		.4byte	0xc5
 4160 05b9 02       		.uleb128 0x2
 4161 05ba 91       		.byte	0x91
 4162 05bb 74       		.sleb128 -12
 4163 05bc 14       		.uleb128 0x14
 4164 05bd 16000000 		.4byte	.LBB4
 4165 05c1 88000000 		.4byte	.LBE4-.LBB4
 4166 05c5 13       		.uleb128 0x13
 4167 05c6 56060000 		.4byte	.LASF95
 4168 05ca 01       		.byte	0x1
 4169 05cb AC       		.byte	0xac
 4170 05cc 0C010000 		.4byte	0x10c
 4171 05d0 02       		.uleb128 0x2
 4172 05d1 91       		.byte	0x91
 4173 05d2 64       		.sleb128 -28
 4174 05d3 13       		.uleb128 0x13
 4175 05d4 E3060000 		.4byte	.LASF96
 4176 05d8 01       		.byte	0x1
 4177 05d9 AD       		.byte	0xad
 4178 05da A2000000 		.4byte	0xa2
 4179 05de 02       		.uleb128 0x2
 4180 05df 91       		.byte	0x91
 4181 05e0 6C       		.sleb128 -20
 4182 05e1 17       		.uleb128 0x17
 4183 05e2 6900     		.ascii	"i\000"
 4184 05e4 01       		.byte	0x1
 4185 05e5 AE       		.byte	0xae
 4186 05e6 A2000000 		.4byte	0xa2
 4187 05ea 02       		.uleb128 0x2
 4188 05eb 91       		.byte	0x91
 4189 05ec 70       		.sleb128 -16
 4190 05ed 13       		.uleb128 0x13
 4191 05ee 2D030000 		.4byte	.LASF97
 4192 05f2 01       		.byte	0x1
 4193 05f3 AE       		.byte	0xae
 4194 05f4 A2000000 		.4byte	0xa2
 4195 05f8 02       		.uleb128 0x2
 4196 05f9 91       		.byte	0x91
 4197 05fa 68       		.sleb128 -24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 98


 4198 05fb 00       		.byte	0
 4199 05fc 00       		.byte	0
 4200 05fd 12       		.uleb128 0x12
 4201 05fe 22060000 		.4byte	.LASF99
 4202 0602 01       		.byte	0x1
 4203 0603 DA       		.byte	0xda
 4204 0604 F3010000 		.4byte	0x1f3
 4205 0608 00000000 		.4byte	.LFB73
 4206 060c 00010000 		.4byte	.LFE73-.LFB73
 4207 0610 01       		.uleb128 0x1
 4208 0611 9C       		.byte	0x9c
 4209 0612 54060000 		.4byte	0x654
 4210 0616 13       		.uleb128 0x13
 4211 0617 72010000 		.4byte	.LASF100
 4212 061b 01       		.byte	0x1
 4213 061c DC       		.byte	0xdc
 4214 061d F3010000 		.4byte	0x1f3
 4215 0621 03       		.uleb128 0x3
 4216 0622 91       		.byte	0x91
 4217 0623 E47C     		.sleb128 -412
 4218 0625 14       		.uleb128 0x14
 4219 0626 4A000000 		.4byte	.LBB5
 4220 062a 86000000 		.4byte	.LBE5-.LBB5
 4221 062e 17       		.uleb128 0x17
 4222 062f 6900     		.ascii	"i\000"
 4223 0631 01       		.byte	0x1
 4224 0632 E3       		.byte	0xe3
 4225 0633 7E000000 		.4byte	0x7e
 4226 0637 02       		.uleb128 0x2
 4227 0638 91       		.byte	0x91
 4228 0639 6C       		.sleb128 -20
 4229 063a 14       		.uleb128 0x14
 4230 063b 70000000 		.4byte	.LBB6
 4231 063f 46000000 		.4byte	.LBE6-.LBB6
 4232 0643 13       		.uleb128 0x13
 4233 0644 06030000 		.4byte	.LASF101
 4234 0648 01       		.byte	0x1
 4235 0649 F0       		.byte	0xf0
 4236 064a 57000000 		.4byte	0x57
 4237 064e 02       		.uleb128 0x2
 4238 064f 91       		.byte	0x91
 4239 0650 68       		.sleb128 -24
 4240 0651 00       		.byte	0
 4241 0652 00       		.byte	0
 4242 0653 00       		.byte	0
 4243 0654 18       		.uleb128 0x18
 4244 0655 19040000 		.4byte	.LASF103
 4245 0659 01       		.byte	0x1
 4246 065a 0401     		.2byte	0x104
 4247 065c AD000000 		.4byte	0xad
 4248 0660 00000000 		.4byte	.LFB74
 4249 0664 78000000 		.4byte	.LFE74-.LFB74
 4250 0668 01       		.uleb128 0x1
 4251 0669 9C       		.byte	0x9c
 4252 066a C5060000 		.4byte	0x6c5
 4253 066e 19       		.uleb128 0x19
 4254 066f 07050000 		.4byte	.LASF104
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 99


 4255 0673 01       		.byte	0x1
 4256 0674 0401     		.2byte	0x104
 4257 0676 0C010000 		.4byte	0x10c
 4258 067a 02       		.uleb128 0x2
 4259 067b 91       		.byte	0x91
 4260 067c 6C       		.sleb128 -20
 4261 067d 19       		.uleb128 0x19
 4262 067e AC040000 		.4byte	.LASF105
 4263 0682 01       		.byte	0x1
 4264 0683 0401     		.2byte	0x104
 4265 0685 12010000 		.4byte	0x112
 4266 0689 02       		.uleb128 0x2
 4267 068a 91       		.byte	0x91
 4268 068b 68       		.sleb128 -24
 4269 068c 19       		.uleb128 0x19
 4270 068d D2040000 		.4byte	.LASF106
 4271 0691 01       		.byte	0x1
 4272 0692 0401     		.2byte	0x104
 4273 0694 12010000 		.4byte	0x112
 4274 0698 02       		.uleb128 0x2
 4275 0699 91       		.byte	0x91
 4276 069a 64       		.sleb128 -28
 4277 069b 19       		.uleb128 0x19
 4278 069c B8040000 		.4byte	.LASF107
 4279 06a0 01       		.byte	0x1
 4280 06a1 0401     		.2byte	0x104
 4281 06a3 0C010000 		.4byte	0x10c
 4282 06a7 02       		.uleb128 0x2
 4283 06a8 91       		.byte	0x91
 4284 06a9 60       		.sleb128 -32
 4285 06aa 1A       		.uleb128 0x1a
 4286 06ab 6100     		.ascii	"a\000"
 4287 06ad 01       		.byte	0x1
 4288 06ae 0601     		.2byte	0x106
 4289 06b0 0C010000 		.4byte	0x10c
 4290 06b4 02       		.uleb128 0x2
 4291 06b5 91       		.byte	0x91
 4292 06b6 74       		.sleb128 -12
 4293 06b7 1A       		.uleb128 0x1a
 4294 06b8 6200     		.ascii	"b\000"
 4295 06ba 01       		.byte	0x1
 4296 06bb 0601     		.2byte	0x106
 4297 06bd 0C010000 		.4byte	0x10c
 4298 06c1 02       		.uleb128 0x2
 4299 06c2 91       		.byte	0x91
 4300 06c3 70       		.sleb128 -16
 4301 06c4 00       		.byte	0
 4302 06c5 1B       		.uleb128 0x1b
 4303 06c6 CD070000 		.4byte	.LASF108
 4304 06ca 01       		.byte	0x1
 4305 06cb 2301     		.2byte	0x123
 4306 06cd AD000000 		.4byte	0xad
 4307 06d1 00000000 		.4byte	.LFB75
 4308 06d5 74010000 		.4byte	.LFE75-.LFB75
 4309 06d9 01       		.uleb128 0x1
 4310 06da 9C       		.byte	0x9c
 4311 06db F7060000 		.4byte	0x6f7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 100


 4312 06df 14       		.uleb128 0x14
 4313 06e0 2E000000 		.4byte	.LBB7
 4314 06e4 68000000 		.4byte	.LBE7-.LBB7
 4315 06e8 1A       		.uleb128 0x1a
 4316 06e9 6900     		.ascii	"i\000"
 4317 06eb 01       		.byte	0x1
 4318 06ec 3101     		.2byte	0x131
 4319 06ee AD000000 		.4byte	0xad
 4320 06f2 02       		.uleb128 0x2
 4321 06f3 91       		.byte	0x91
 4322 06f4 77       		.sleb128 -9
 4323 06f5 00       		.byte	0
 4324 06f6 00       		.byte	0
 4325 06f7 1B       		.uleb128 0x1b
 4326 06f8 CA050000 		.4byte	.LASF109
 4327 06fc 01       		.byte	0x1
 4328 06fd 7501     		.2byte	0x175
 4329 06ff AD000000 		.4byte	0xad
 4330 0703 00000000 		.4byte	.LFB76
 4331 0707 B8000000 		.4byte	.LFE76-.LFB76
 4332 070b 01       		.uleb128 0x1
 4333 070c 9C       		.byte	0x9c
 4334 070d 3A070000 		.4byte	0x73a
 4335 0711 1C       		.uleb128 0x1c
 4336 0712 2C090000 		.4byte	.LASF35
 4337 0716 01       		.byte	0x1
 4338 0717 7901     		.2byte	0x179
 4339 0719 AD000000 		.4byte	0xad
 4340 071d 02       		.uleb128 0x2
 4341 071e 91       		.byte	0x91
 4342 071f 77       		.sleb128 -9
 4343 0720 14       		.uleb128 0x14
 4344 0721 36000000 		.4byte	.LBB8
 4345 0725 48000000 		.4byte	.LBE8-.LBB8
 4346 0729 1C       		.uleb128 0x1c
 4347 072a 0C050000 		.4byte	.LASF110
 4348 072e 01       		.byte	0x1
 4349 072f 8101     		.2byte	0x181
 4350 0731 3A070000 		.4byte	0x73a
 4351 0735 02       		.uleb128 0x2
 4352 0736 91       		.byte	0x91
 4353 0737 6C       		.sleb128 -20
 4354 0738 00       		.byte	0
 4355 0739 00       		.byte	0
 4356 073a 08       		.uleb128 0x8
 4357 073b F7000000 		.4byte	0xf7
 4358 073f 4A070000 		.4byte	0x74a
 4359 0743 09       		.uleb128 0x9
 4360 0744 05010000 		.4byte	0x105
 4361 0748 09       		.byte	0x9
 4362 0749 00       		.byte	0
 4363 074a 1D       		.uleb128 0x1d
 4364 074b 28020000 		.4byte	.LASF111
 4365 074f 01       		.byte	0x1
 4366 0750 9301     		.2byte	0x193
 4367 0752 00000000 		.4byte	.LFB77
 4368 0756 1C000000 		.4byte	.LFE77-.LFB77
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 101


 4369 075a 01       		.uleb128 0x1
 4370 075b 9C       		.byte	0x9c
 4371 075c 1E       		.uleb128 0x1e
 4372 075d 44080000 		.4byte	.LASF113
 4373 0761 01       		.byte	0x1
 4374 0762 A301     		.2byte	0x1a3
 4375 0764 AD000000 		.4byte	0xad
 4376 0768 00000000 		.4byte	.LFB78
 4377 076c 28000000 		.4byte	.LFE78-.LFB78
 4378 0770 01       		.uleb128 0x1
 4379 0771 9C       		.byte	0x9c
 4380 0772 1F       		.uleb128 0x1f
 4381 0773 30040000 		.4byte	.LASF116
 4382 0777 01       		.byte	0x1
 4383 0778 AE01     		.2byte	0x1ae
 4384 077a 00000000 		.4byte	.LFB79
 4385 077e 84000000 		.4byte	.LFE79-.LFB79
 4386 0782 01       		.uleb128 0x1
 4387 0783 9C       		.byte	0x9c
 4388 0784 98070000 		.4byte	0x798
 4389 0788 1C       		.uleb128 0x1c
 4390 0789 2D060000 		.4byte	.LASF114
 4391 078d 01       		.byte	0x1
 4392 078e BB01     		.2byte	0x1bb
 4393 0790 7E000000 		.4byte	0x7e
 4394 0794 02       		.uleb128 0x2
 4395 0795 91       		.byte	0x91
 4396 0796 74       		.sleb128 -12
 4397 0797 00       		.byte	0
 4398 0798 20       		.uleb128 0x20
 4399 0799 AF030000 		.4byte	.LASF115
 4400 079d 01       		.byte	0x1
 4401 079e CD01     		.2byte	0x1cd
 4402 07a0 00000000 		.4byte	.LFB80
 4403 07a4 48000000 		.4byte	.LFE80-.LFB80
 4404 07a8 01       		.uleb128 0x1
 4405 07a9 9C       		.byte	0x9c
 4406 07aa 1F       		.uleb128 0x1f
 4407 07ab FB080000 		.4byte	.LASF117
 4408 07af 01       		.byte	0x1
 4409 07b0 DD01     		.2byte	0x1dd
 4410 07b2 00000000 		.4byte	.LFB81
 4411 07b6 04060000 		.4byte	.LFE81-.LFB81
 4412 07ba 01       		.uleb128 0x1
 4413 07bb 9C       		.byte	0x9c
 4414 07bc FF080000 		.4byte	0x8ff
 4415 07c0 1C       		.uleb128 0x1c
 4416 07c1 F8060000 		.4byte	.LASF118
 4417 07c5 01       		.byte	0x1
 4418 07c6 E001     		.2byte	0x1e0
 4419 07c8 3A070000 		.4byte	0x73a
 4420 07cc 02       		.uleb128 0x2
 4421 07cd 91       		.byte	0x91
 4422 07ce 64       		.sleb128 -28
 4423 07cf 1C       		.uleb128 0x1c
 4424 07d0 FB020000 		.4byte	.LASF119
 4425 07d4 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 102


 4426 07d5 E101     		.2byte	0x1e1
 4427 07d7 3A070000 		.4byte	0x73a
 4428 07db 02       		.uleb128 0x2
 4429 07dc 91       		.byte	0x91
 4430 07dd 58       		.sleb128 -40
 4431 07de 1C       		.uleb128 0x1c
 4432 07df 1E090000 		.4byte	.LASF120
 4433 07e3 01       		.byte	0x1
 4434 07e4 E201     		.2byte	0x1e2
 4435 07e6 3A070000 		.4byte	0x73a
 4436 07ea 02       		.uleb128 0x2
 4437 07eb 91       		.byte	0x91
 4438 07ec 4C       		.sleb128 -52
 4439 07ed 1C       		.uleb128 0x1c
 4440 07ee 7E060000 		.4byte	.LASF121
 4441 07f2 01       		.byte	0x1
 4442 07f3 E301     		.2byte	0x1e3
 4443 07f5 3A070000 		.4byte	0x73a
 4444 07f9 02       		.uleb128 0x2
 4445 07fa 91       		.byte	0x91
 4446 07fb 40       		.sleb128 -64
 4447 07fc 1C       		.uleb128 0x1c
 4448 07fd A2030000 		.4byte	.LASF122
 4449 0801 01       		.byte	0x1
 4450 0802 E401     		.2byte	0x1e4
 4451 0804 3A070000 		.4byte	0x73a
 4452 0808 03       		.uleb128 0x3
 4453 0809 91       		.byte	0x91
 4454 080a B47F     		.sleb128 -76
 4455 080c 1C       		.uleb128 0x1c
 4456 080d A1080000 		.4byte	.LASF123
 4457 0811 01       		.byte	0x1
 4458 0812 E801     		.2byte	0x1e8
 4459 0814 65040000 		.4byte	0x465
 4460 0818 03       		.uleb128 0x3
 4461 0819 91       		.byte	0x91
 4462 081a D07E     		.sleb128 -176
 4463 081c 1C       		.uleb128 0x1c
 4464 081d 5F030000 		.4byte	.LASF124
 4465 0821 01       		.byte	0x1
 4466 0822 EB01     		.2byte	0x1eb
 4467 0824 65040000 		.4byte	0x465
 4468 0828 03       		.uleb128 0x3
 4469 0829 91       		.byte	0x91
 4470 082a EC7D     		.sleb128 -276
 4471 082c 1C       		.uleb128 0x1c
 4472 082d B0050000 		.4byte	.LASF125
 4473 0831 01       		.byte	0x1
 4474 0832 EE01     		.2byte	0x1ee
 4475 0834 65040000 		.4byte	0x465
 4476 0838 03       		.uleb128 0x3
 4477 0839 91       		.byte	0x91
 4478 083a 887D     		.sleb128 -376
 4479 083c 1C       		.uleb128 0x1c
 4480 083d 27050000 		.4byte	.LASF126
 4481 0841 01       		.byte	0x1
 4482 0842 F101     		.2byte	0x1f1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 103


 4483 0844 65040000 		.4byte	0x465
 4484 0848 03       		.uleb128 0x3
 4485 0849 91       		.byte	0x91
 4486 084a A47C     		.sleb128 -476
 4487 084c 1C       		.uleb128 0x1c
 4488 084d 8C060000 		.4byte	.LASF127
 4489 0851 01       		.byte	0x1
 4490 0852 F401     		.2byte	0x1f4
 4491 0854 FF080000 		.4byte	0x8ff
 4492 0858 03       		.uleb128 0x3
 4493 0859 91       		.byte	0x91
 4494 085a DC7A     		.sleb128 -676
 4495 085c 1C       		.uleb128 0x1c
 4496 085d D8020000 		.4byte	.LASF59
 4497 0861 01       		.byte	0x1
 4498 0862 3C02     		.2byte	0x23c
 4499 0864 7E000000 		.4byte	0x7e
 4500 0868 03       		.uleb128 0x3
 4501 0869 91       		.byte	0x91
 4502 086a D87A     		.sleb128 -680
 4503 086c 1C       		.uleb128 0x1c
 4504 086d 9B060000 		.4byte	.LASF60
 4505 0871 01       		.byte	0x1
 4506 0872 3C02     		.2byte	0x23c
 4507 0874 7E000000 		.4byte	0x7e
 4508 0878 03       		.uleb128 0x3
 4509 0879 91       		.byte	0x91
 4510 087a D47A     		.sleb128 -684
 4511 087c 1C       		.uleb128 0x1c
 4512 087d 5A010000 		.4byte	.LASF128
 4513 0881 01       		.byte	0x1
 4514 0882 3C02     		.2byte	0x23c
 4515 0884 7E000000 		.4byte	0x7e
 4516 0888 03       		.uleb128 0x3
 4517 0889 91       		.byte	0x91
 4518 088a D07A     		.sleb128 -688
 4519 088c 1C       		.uleb128 0x1c
 4520 088d 82050000 		.4byte	.LASF129
 4521 0891 01       		.byte	0x1
 4522 0892 3C02     		.2byte	0x23c
 4523 0894 7E000000 		.4byte	0x7e
 4524 0898 03       		.uleb128 0x3
 4525 0899 91       		.byte	0x91
 4526 089a CC7A     		.sleb128 -692
 4527 089c 1C       		.uleb128 0x1c
 4528 089d 11050000 		.4byte	.LASF130
 4529 08a1 01       		.byte	0x1
 4530 08a2 3C02     		.2byte	0x23c
 4531 08a4 7E000000 		.4byte	0x7e
 4532 08a8 03       		.uleb128 0x3
 4533 08a9 91       		.byte	0x91
 4534 08aa C87A     		.sleb128 -696
 4535 08ac 1C       		.uleb128 0x1c
 4536 08ad 500A0000 		.4byte	.LASF131
 4537 08b1 01       		.byte	0x1
 4538 08b2 3C02     		.2byte	0x23c
 4539 08b4 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 104


 4540 08b8 03       		.uleb128 0x3
 4541 08b9 91       		.byte	0x91
 4542 08ba C47A     		.sleb128 -700
 4543 08bc 1C       		.uleb128 0x1c
 4544 08bd B3020000 		.4byte	.LASF132
 4545 08c1 01       		.byte	0x1
 4546 08c2 3C02     		.2byte	0x23c
 4547 08c4 7E000000 		.4byte	0x7e
 4548 08c8 03       		.uleb128 0x3
 4549 08c9 91       		.byte	0x91
 4550 08ca C07A     		.sleb128 -704
 4551 08cc 1C       		.uleb128 0x1c
 4552 08cd 0E020000 		.4byte	.LASF133
 4553 08d1 01       		.byte	0x1
 4554 08d2 3C02     		.2byte	0x23c
 4555 08d4 7E000000 		.4byte	0x7e
 4556 08d8 03       		.uleb128 0x3
 4557 08d9 91       		.byte	0x91
 4558 08da BC7A     		.sleb128 -708
 4559 08dc 21       		.uleb128 0x21
 4560 08dd CE090000 		.4byte	.LASF67
 4561 08e1 01       		.byte	0x1
 4562 08e2 3C02     		.2byte	0x23c
 4563 08e4 7E000000 		.4byte	0x7e
 4564 08e8 22       		.uleb128 0x22
 4565 08e9 00000000 		.4byte	.Ldebug_ranges0+0
 4566 08ed 1C       		.uleb128 0x1c
 4567 08ee 6A020000 		.4byte	.LASF134
 4568 08f2 01       		.byte	0x1
 4569 08f3 6802     		.2byte	0x268
 4570 08f5 65040000 		.4byte	0x465
 4571 08f9 03       		.uleb128 0x3
 4572 08fa 91       		.byte	0x91
 4573 08fb D879     		.sleb128 -808
 4574 08fd 00       		.byte	0
 4575 08fe 00       		.byte	0
 4576 08ff 08       		.uleb128 0x8
 4577 0900 F7000000 		.4byte	0xf7
 4578 0904 0F090000 		.4byte	0x90f
 4579 0908 09       		.uleb128 0x9
 4580 0909 05010000 		.4byte	0x105
 4581 090d C7       		.byte	0xc7
 4582 090e 00       		.byte	0
 4583 090f 1F       		.uleb128 0x1f
 4584 0910 E2020000 		.4byte	.LASF135
 4585 0914 01       		.byte	0x1
 4586 0915 BD02     		.2byte	0x2bd
 4587 0917 00000000 		.4byte	.LFB82
 4588 091b 68010000 		.4byte	.LFE82-.LFB82
 4589 091f 01       		.uleb128 0x1
 4590 0920 9C       		.byte	0x9c
 4591 0921 3F090000 		.4byte	0x93f
 4592 0925 14       		.uleb128 0x14
 4593 0926 DA000000 		.4byte	.LBB12
 4594 092a 38000000 		.4byte	.LBE12-.LBB12
 4595 092e 1C       		.uleb128 0x1c
 4596 092f EE070000 		.4byte	.LASF136
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 105


 4597 0933 01       		.byte	0x1
 4598 0934 EB02     		.2byte	0x2eb
 4599 0936 3A070000 		.4byte	0x73a
 4600 093a 02       		.uleb128 0x2
 4601 093b 91       		.byte	0x91
 4602 093c 6C       		.sleb128 -20
 4603 093d 00       		.byte	0
 4604 093e 00       		.byte	0
 4605 093f 1B       		.uleb128 0x1b
 4606 0940 41030000 		.4byte	.LASF137
 4607 0944 01       		.byte	0x1
 4608 0945 FE02     		.2byte	0x2fe
 4609 0947 57000000 		.4byte	0x57
 4610 094b 00000000 		.4byte	.LFB83
 4611 094f 44010000 		.4byte	.LFE83-.LFB83
 4612 0953 01       		.uleb128 0x1
 4613 0954 9C       		.byte	0x9c
 4614 0955 FB090000 		.4byte	0x9fb
 4615 0959 1C       		.uleb128 0x1c
 4616 095a E6040000 		.4byte	.LASF138
 4617 095e 01       		.byte	0x1
 4618 095f 0903     		.2byte	0x309
 4619 0961 57000000 		.4byte	0x57
 4620 0965 02       		.uleb128 0x2
 4621 0966 91       		.byte	0x91
 4622 0967 74       		.sleb128 -12
 4623 0968 14       		.uleb128 0x14
 4624 0969 30000000 		.4byte	.LBB13
 4625 096d DE000000 		.4byte	.LBE13-.LBB13
 4626 0971 1C       		.uleb128 0x1c
 4627 0972 06030000 		.4byte	.LASF101
 4628 0976 01       		.byte	0x1
 4629 0977 0E03     		.2byte	0x30e
 4630 0979 FB090000 		.4byte	0x9fb
 4631 097d 02       		.uleb128 0x2
 4632 097e 91       		.byte	0x91
 4633 097f 54       		.sleb128 -44
 4634 0980 1A       		.uleb128 0x1a
 4635 0981 7400     		.ascii	"t\000"
 4636 0983 01       		.byte	0x1
 4637 0984 1403     		.2byte	0x314
 4638 0986 2D010000 		.4byte	0x12d
 4639 098a 03       		.uleb128 0x3
 4640 098b 91       		.byte	0x91
 4641 098c 947F     		.sleb128 -108
 4642 098e 1C       		.uleb128 0x1c
 4643 098f 4A020000 		.4byte	.LASF139
 4644 0993 01       		.byte	0x1
 4645 0994 1703     		.2byte	0x317
 4646 0996 7E000000 		.4byte	0x7e
 4647 099a 02       		.uleb128 0x2
 4648 099b 91       		.byte	0x91
 4649 099c 50       		.sleb128 -48
 4650 099d 1C       		.uleb128 0x1c
 4651 099e C4050000 		.4byte	.LASF140
 4652 09a2 01       		.byte	0x1
 4653 09a3 1703     		.2byte	0x317
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 106


 4654 09a5 7E000000 		.4byte	0x7e
 4655 09a9 02       		.uleb128 0x2
 4656 09aa 91       		.byte	0x91
 4657 09ab 4C       		.sleb128 -52
 4658 09ac 1A       		.uleb128 0x1a
 4659 09ad 64617900 		.ascii	"day\000"
 4660 09b1 01       		.byte	0x1
 4661 09b2 1703     		.2byte	0x317
 4662 09b4 7E000000 		.4byte	0x7e
 4663 09b8 02       		.uleb128 0x2
 4664 09b9 91       		.byte	0x91
 4665 09ba 48       		.sleb128 -56
 4666 09bb 1C       		.uleb128 0x1c
 4667 09bc 48060000 		.4byte	.LASF141
 4668 09c0 01       		.byte	0x1
 4669 09c1 1703     		.2byte	0x317
 4670 09c3 7E000000 		.4byte	0x7e
 4671 09c7 02       		.uleb128 0x2
 4672 09c8 91       		.byte	0x91
 4673 09c9 44       		.sleb128 -60
 4674 09ca 1C       		.uleb128 0x1c
 4675 09cb D6080000 		.4byte	.LASF142
 4676 09cf 01       		.byte	0x1
 4677 09d0 1703     		.2byte	0x317
 4678 09d2 7E000000 		.4byte	0x7e
 4679 09d6 02       		.uleb128 0x2
 4680 09d7 91       		.byte	0x91
 4681 09d8 40       		.sleb128 -64
 4682 09d9 1C       		.uleb128 0x1c
 4683 09da 43020000 		.4byte	.LASF143
 4684 09de 01       		.byte	0x1
 4685 09df 1703     		.2byte	0x317
 4686 09e1 7E000000 		.4byte	0x7e
 4687 09e5 03       		.uleb128 0x3
 4688 09e6 91       		.byte	0x91
 4689 09e7 BC7F     		.sleb128 -68
 4690 09e9 1C       		.uleb128 0x1c
 4691 09ea 0C000000 		.4byte	.LASF144
 4692 09ee 01       		.byte	0x1
 4693 09ef 1703     		.2byte	0x317
 4694 09f1 7E000000 		.4byte	0x7e
 4695 09f5 03       		.uleb128 0x3
 4696 09f6 91       		.byte	0x91
 4697 09f7 B87F     		.sleb128 -72
 4698 09f9 00       		.byte	0
 4699 09fa 00       		.byte	0
 4700 09fb 08       		.uleb128 0x8
 4701 09fc F7000000 		.4byte	0xf7
 4702 0a00 0B0A0000 		.4byte	0xa0b
 4703 0a04 09       		.uleb128 0x9
 4704 0a05 05010000 		.4byte	0x105
 4705 0a09 1D       		.byte	0x1d
 4706 0a0a 00       		.byte	0
 4707 0a0b 23       		.uleb128 0x23
 4708 0a0c 94020000 		.4byte	.LASF145
 4709 0a10 01       		.byte	0x1
 4710 0a11 3703     		.2byte	0x337
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 107


 4711 0a13 AD000000 		.4byte	0xad
 4712 0a17 00000000 		.4byte	.LFB84
 4713 0a1b 14000000 		.4byte	.LFE84-.LFB84
 4714 0a1f 01       		.uleb128 0x1
 4715 0a20 9C       		.byte	0x9c
 4716 0a21 1D       		.uleb128 0x1d
 4717 0a22 96030000 		.4byte	.LASF146
 4718 0a26 01       		.byte	0x1
 4719 0a27 3C03     		.2byte	0x33c
 4720 0a29 00000000 		.4byte	.LFB85
 4721 0a2d 1A000000 		.4byte	.LFE85-.LFB85
 4722 0a31 01       		.uleb128 0x1
 4723 0a32 9C       		.byte	0x9c
 4724 0a33 1D       		.uleb128 0x1d
 4725 0a34 36010000 		.4byte	.LASF147
 4726 0a38 01       		.byte	0x1
 4727 0a39 4903     		.2byte	0x349
 4728 0a3b 00000000 		.4byte	.LFB86
 4729 0a3f 2A000000 		.4byte	.LFE86-.LFB86
 4730 0a43 01       		.uleb128 0x1
 4731 0a44 9C       		.byte	0x9c
 4732 0a45 1B       		.uleb128 0x1b
 4733 0a46 09070000 		.4byte	.LASF148
 4734 0a4a 01       		.byte	0x1
 4735 0a4b 5C03     		.2byte	0x35c
 4736 0a4d 37030000 		.4byte	0x337
 4737 0a51 00000000 		.4byte	.LFB87
 4738 0a55 7C020000 		.4byte	.LFE87-.LFB87
 4739 0a59 01       		.uleb128 0x1
 4740 0a5a 9C       		.byte	0x9c
 4741 0a5b EE0A0000 		.4byte	0xaee
 4742 0a5f 1A       		.uleb128 0x1a
 4743 0a60 67707300 		.ascii	"gps\000"
 4744 0a64 01       		.byte	0x1
 4745 0a65 5D03     		.2byte	0x35d
 4746 0a67 37030000 		.4byte	0x337
 4747 0a6b 02       		.uleb128 0x2
 4748 0a6c 91       		.byte	0x91
 4749 0a6d 4C       		.sleb128 -52
 4750 0a6e 1C       		.uleb128 0x1c
 4751 0a6f F5090000 		.4byte	.LASF149
 4752 0a73 01       		.byte	0x1
 4753 0a74 6903     		.2byte	0x369
 4754 0a76 57000000 		.4byte	0x57
 4755 0a7a 02       		.uleb128 0x2
 4756 0a7b 91       		.byte	0x91
 4757 0a7c 68       		.sleb128 -24
 4758 0a7d 1C       		.uleb128 0x1c
 4759 0a7e 00060000 		.4byte	.LASF150
 4760 0a82 01       		.byte	0x1
 4761 0a83 9003     		.2byte	0x390
 4762 0a85 AD000000 		.4byte	0xad
 4763 0a89 02       		.uleb128 0x2
 4764 0a8a 91       		.byte	0x91
 4765 0a8b 67       		.sleb128 -25
 4766 0a8c 1A       		.uleb128 0x1a
 4767 0a8d 6C617400 		.ascii	"lat\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 108


 4768 0a91 01       		.byte	0x1
 4769 0a92 9C03     		.2byte	0x39c
 4770 0a94 E9000000 		.4byte	0xe9
 4771 0a98 02       		.uleb128 0x2
 4772 0a99 91       		.byte	0x91
 4773 0a9a 48       		.sleb128 -56
 4774 0a9b 1A       		.uleb128 0x1a
 4775 0a9c 6C6F6E00 		.ascii	"lon\000"
 4776 0aa0 01       		.byte	0x1
 4777 0aa1 9D03     		.2byte	0x39d
 4778 0aa3 E9000000 		.4byte	0xe9
 4779 0aa7 02       		.uleb128 0x2
 4780 0aa8 91       		.byte	0x91
 4781 0aa9 44       		.sleb128 -60
 4782 0aaa 1A       		.uleb128 0x1a
 4783 0aab 616C7400 		.ascii	"alt\000"
 4784 0aaf 01       		.byte	0x1
 4785 0ab0 9E03     		.2byte	0x39e
 4786 0ab2 E9000000 		.4byte	0xe9
 4787 0ab6 02       		.uleb128 0x2
 4788 0ab7 91       		.byte	0x91
 4789 0ab8 40       		.sleb128 -64
 4790 0ab9 1A       		.uleb128 0x1a
 4791 0aba 733100   		.ascii	"s1\000"
 4792 0abd 01       		.byte	0x1
 4793 0abe A203     		.2byte	0x3a2
 4794 0ac0 0C010000 		.4byte	0x10c
 4795 0ac4 02       		.uleb128 0x2
 4796 0ac5 91       		.byte	0x91
 4797 0ac6 60       		.sleb128 -32
 4798 0ac7 1C       		.uleb128 0x1c
 4799 0ac8 2D060000 		.4byte	.LASF114
 4800 0acc 01       		.byte	0x1
 4801 0acd A503     		.2byte	0x3a5
 4802 0acf 7E000000 		.4byte	0x7e
 4803 0ad3 02       		.uleb128 0x2
 4804 0ad4 91       		.byte	0x91
 4805 0ad5 5C       		.sleb128 -36
 4806 0ad6 14       		.uleb128 0x14
 4807 0ad7 B4000000 		.4byte	.LBB14
 4808 0adb 38000000 		.4byte	.LBE14-.LBB14
 4809 0adf 1A       		.uleb128 0x1a
 4810 0ae0 6900     		.ascii	"i\000"
 4811 0ae2 01       		.byte	0x1
 4812 0ae3 9103     		.2byte	0x391
 4813 0ae5 B9000000 		.4byte	0xb9
 4814 0ae9 02       		.uleb128 0x2
 4815 0aea 91       		.byte	0x91
 4816 0aeb 6E       		.sleb128 -18
 4817 0aec 00       		.byte	0
 4818 0aed 00       		.byte	0
 4819 0aee 24       		.uleb128 0x24
 4820 0aef 84010000 		.4byte	.LASF151
 4821 0af3 0A       		.byte	0xa
 4822 0af4 1207     		.2byte	0x712
 4823 0af6 FA0A0000 		.4byte	0xafa
 4824 0afa 0F       		.uleb128 0xf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 109


 4825 0afb 97000000 		.4byte	0x97
 4826 0aff 25       		.uleb128 0x25
 4827 0b00 6C000000 		.4byte	.LASF152
 4828 0b04 07       		.byte	0x7
 4829 0b05 11       		.byte	0x11
 4830 0b06 B7030000 		.4byte	0x3b7
 4831 0b0a 05       		.uleb128 0x5
 4832 0b0b 03       		.byte	0x3
 4833 0b0c 00000000 		.4byte	buffer_overflow
 4834 0b10 25       		.uleb128 0x25
 4835 0b11 8E050000 		.4byte	.LASF153
 4836 0b15 07       		.byte	0x7
 4837 0b16 22       		.byte	0x22
 4838 0b17 B9000000 		.4byte	0xb9
 4839 0b1b 05       		.uleb128 0x5
 4840 0b1c 03       		.byte	0x3
 4841 0b1d 00000000 		.4byte	dataPointsInStack
 4842 0b21 25       		.uleb128 0x25
 4843 0b22 48090000 		.4byte	.LASF154
 4844 0b26 07       		.byte	0x7
 4845 0b27 23       		.byte	0x23
 4846 0b28 B9000000 		.4byte	0xb9
 4847 0b2c 05       		.uleb128 0x5
 4848 0b2d 03       		.byte	0x3
 4849 0b2e 00000000 		.4byte	dataPointsInStackDesired
 4850 0b32 08       		.uleb128 0x8
 4851 0b33 3B020000 		.4byte	0x23b
 4852 0b37 420B0000 		.4byte	0xb42
 4853 0b3b 09       		.uleb128 0x9
 4854 0b3c 05010000 		.4byte	0x105
 4855 0b40 95       		.byte	0x95
 4856 0b41 00       		.byte	0
 4857 0b42 25       		.uleb128 0x25
 4858 0b43 5E040000 		.4byte	.LASF155
 4859 0b47 07       		.byte	0x7
 4860 0b48 24       		.byte	0x24
 4861 0b49 320B0000 		.4byte	0xb32
 4862 0b4d 05       		.uleb128 0x5
 4863 0b4e 03       		.byte	0x3
 4864 0b4f 00000000 		.4byte	data
 4865 0b53 25       		.uleb128 0x25
 4866 0b54 66010000 		.4byte	.LASF156
 4867 0b58 08       		.byte	0x8
 4868 0b59 20       		.byte	0x20
 4869 0b5a AD000000 		.4byte	0xad
 4870 0b5e 05       		.uleb128 0x5
 4871 0b5f 03       		.byte	0x3
 4872 0b60 00000000 		.4byte	modem_state
 4873 0b64 25       		.uleb128 0x25
 4874 0b65 5D080000 		.4byte	.LASF157
 4875 0b69 08       		.byte	0x8
 4876 0b6a 6C       		.byte	0x6c
 4877 0b6b DD000000 		.4byte	0xdd
 4878 0b6f 05       		.uleb128 0x5
 4879 0b70 03       		.byte	0x3
 4880 0b71 00000000 		.4byte	modem_start_time_stamp
 4881 0b75 25       		.uleb128 0x25
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 110


 4882 0b76 74040000 		.4byte	.LASF75
 4883 0b7a 08       		.byte	0x8
 4884 0b7b 6D       		.byte	0x6d
 4885 0b7c 73020000 		.4byte	0x273
 4886 0b80 05       		.uleb128 0x5
 4887 0b81 03       		.byte	0x3
 4888 0b82 00000000 		.4byte	modem_info
 4889 0b86 25       		.uleb128 0x25
 4890 0b87 A3010000 		.4byte	.LASF158
 4891 0b8b 08       		.byte	0x8
 4892 0b8c 6E       		.byte	0x6e
 4893 0b8d E7020000 		.4byte	0x2e7
 4894 0b91 05       		.uleb128 0x5
 4895 0b92 03       		.byte	0x3
 4896 0b93 00000000 		.4byte	modem_stats
 4897 0b97 25       		.uleb128 0x25
 4898 0b98 33060000 		.4byte	.LASF159
 4899 0b9c 08       		.byte	0x8
 4900 0b9d 6F       		.byte	0x6f
 4901 0b9e BE030000 		.4byte	0x3be
 4902 0ba2 05       		.uleb128 0x5
 4903 0ba3 03       		.byte	0x3
 4904 0ba4 00000000 		.4byte	updatable_parameters
 4905 0ba8 25       		.uleb128 0x25
 4906 0ba9 A9070000 		.4byte	.LASF160
 4907 0bad 0B       		.byte	0xb
 4908 0bae 25       		.byte	0x25
 4909 0baf 65040000 		.4byte	0x465
 4910 0bb3 05       		.uleb128 0x5
 4911 0bb4 03       		.byte	0x3
 4912 0bb5 00000000 		.4byte	level_sensor_inbox
 4913 0bb9 25       		.uleb128 0x25
 4914 0bba 33090000 		.4byte	.LASF161
 4915 0bbe 0B       		.byte	0xb
 4916 0bbf 27       		.byte	0x27
 4917 0bc0 B7030000 		.4byte	0x3b7
 4918 0bc4 05       		.uleb128 0x5
 4919 0bc5 03       		.byte	0x3
 4920 0bc6 00000000 		.4byte	level_sensor_enabled
 4921 0bca 25       		.uleb128 0x25
 4922 0bcb 320A0000 		.4byte	.LASF162
 4923 0bcf 0C       		.byte	0xc
 4924 0bd0 0F       		.byte	0xf
 4925 0bd1 65040000 		.4byte	0x465
 4926 0bd5 05       		.uleb128 0x5
 4927 0bd6 03       		.byte	0x3
 4928 0bd7 00000000 		.4byte	downstream_level_sensor_inbox
 4929 0bdb 25       		.uleb128 0x25
 4930 0bdc 2F050000 		.4byte	.LASF163
 4931 0be0 0C       		.byte	0xc
 4932 0be1 11       		.byte	0x11
 4933 0be2 B7030000 		.4byte	0x3b7
 4934 0be6 05       		.uleb128 0x5
 4935 0be7 03       		.byte	0x3
 4936 0be8 00000000 		.4byte	downstream_level_sensor_enabled
 4937 0bec 25       		.uleb128 0x25
 4938 0bed ED080000 		.4byte	.LASF164
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 111


 4939 0bf1 0D       		.byte	0xd
 4940 0bf2 2D       		.byte	0x2d
 4941 0bf3 AD000000 		.4byte	0xad
 4942 0bf7 05       		.uleb128 0x5
 4943 0bf8 03       		.byte	0x3
 4944 0bf9 00000000 		.4byte	valve_enabled
 4945 0bfd 25       		.uleb128 0x25
 4946 0bfe A2090000 		.4byte	.LASF165
 4947 0c02 0D       		.byte	0xd
 4948 0c03 2E       		.byte	0x2e
 4949 0c04 65040000 		.4byte	0x465
 4950 0c08 05       		.uleb128 0x5
 4951 0c09 03       		.byte	0x3
 4952 0c0a 00000000 		.4byte	valve_inbox
 4953 0c0e 25       		.uleb128 0x25
 4954 0c0f E1030000 		.4byte	.LASF166
 4955 0c13 0E       		.byte	0xe
 4956 0c14 07       		.byte	0x7
 4957 0c15 AD000000 		.4byte	0xad
 4958 0c19 05       		.uleb128 0x5
 4959 0c1a 03       		.byte	0x3
 4960 0c1b 00000000 		.4byte	App_LED_enabled
 4961 0c1f 25       		.uleb128 0x25
 4962 0c20 240A0000 		.4byte	.LASF167
 4963 0c24 0E       		.byte	0xe
 4964 0c25 08       		.byte	0x8
 4965 0c26 65040000 		.4byte	0x465
 4966 0c2a 05       		.uleb128 0x5
 4967 0c2b 03       		.byte	0x3
 4968 0c2c 00000000 		.4byte	app_led_inbox
 4969 0c30 08       		.uleb128 0x8
 4970 0c31 F7000000 		.4byte	0xf7
 4971 0c35 410C0000 		.4byte	0xc41
 4972 0c39 26       		.uleb128 0x26
 4973 0c3a 05010000 		.4byte	0x105
 4974 0c3e 0F27     		.2byte	0x270f
 4975 0c40 00       		.byte	0
 4976 0c41 25       		.uleb128 0x25
 4977 0c42 FF090000 		.4byte	.LASF168
 4978 0c46 09       		.byte	0x9
 4979 0c47 1A       		.byte	0x1a
 4980 0c48 300C0000 		.4byte	0xc30
 4981 0c4c 05       		.uleb128 0x5
 4982 0c4d 03       		.byte	0x3
 4983 0c4e 00000000 		.4byte	http_request
 4984 0c52 25       		.uleb128 0x25
 4985 0c53 1E020000 		.4byte	.LASF169
 4986 0c57 09       		.byte	0x9
 4987 0c58 1B       		.byte	0x1b
 4988 0c59 300C0000 		.4byte	0xc30
 4989 0c5d 05       		.uleb128 0x5
 4990 0c5e 03       		.byte	0x3
 4991 0c5f 00000000 		.4byte	http_body
 4992 0c63 25       		.uleb128 0x25
 4993 0c64 07080000 		.4byte	.LASF170
 4994 0c68 09       		.byte	0x9
 4995 0c69 1C       		.byte	0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 112


 4996 0c6a FF080000 		.4byte	0x8ff
 4997 0c6e 05       		.uleb128 0x5
 4998 0c6f 03       		.byte	0x3
 4999 0c70 00000000 		.4byte	http_route
 5000 0c74 25       		.uleb128 0x25
 5001 0c75 2A070000 		.4byte	.LASF171
 5002 0c79 09       		.byte	0x9
 5003 0c7a 43       		.byte	0x43
 5004 0c7b 39040000 		.4byte	0x439
 5005 0c7f 05       		.uleb128 0x5
 5006 0c80 03       		.byte	0x3
 5007 0c81 00000000 		.4byte	system_info
 5008 0c85 25       		.uleb128 0x25
 5009 0c86 D3060000 		.4byte	.LASF172
 5010 0c8a 09       		.byte	0x9
 5011 0c8b 55       		.byte	0x55
 5012 0c8c 75040000 		.4byte	0x475
 5013 0c90 05       		.uleb128 0x5
 5014 0c91 03       		.byte	0x3
 5015 0c92 00000000 		.4byte	system_settings
 5016 0c96 25       		.uleb128 0x25
 5017 0c97 77010000 		.4byte	.LASF173
 5018 0c9b 09       		.byte	0x9
 5019 0c9c 71       		.byte	0x71
 5020 0c9d 02040000 		.4byte	0x402
 5021 0ca1 05       		.uleb128 0x5
 5022 0ca2 03       		.byte	0x3
 5023 0ca3 00000000 		.4byte	alarmMeasure
 5024 0ca7 25       		.uleb128 0x25
 5025 0ca8 DD010000 		.4byte	.LASF174
 5026 0cac 09       		.byte	0x9
 5027 0cad 72       		.byte	0x72
 5028 0cae AD000000 		.4byte	0xad
 5029 0cb2 05       		.uleb128 0x5
 5030 0cb3 03       		.byte	0x3
 5031 0cb4 00000000 		.4byte	timeToMeasure
 5032 0cb8 25       		.uleb128 0x25
 5033 0cb9 D7030000 		.4byte	.LASF175
 5034 0cbd 09       		.byte	0x9
 5035 0cbe 73       		.byte	0x73
 5036 0cbf 02040000 		.4byte	0x402
 5037 0cc3 05       		.uleb128 0x5
 5038 0cc4 03       		.byte	0x3
 5039 0cc5 00000000 		.4byte	alarmSync
 5040 0cc9 25       		.uleb128 0x25
 5041 0cca 03020000 		.4byte	.LASF176
 5042 0cce 09       		.byte	0x9
 5043 0ccf 74       		.byte	0x74
 5044 0cd0 AD000000 		.4byte	0xad
 5045 0cd4 05       		.uleb128 0x5
 5046 0cd5 03       		.byte	0x3
 5047 0cd6 00000000 		.4byte	timeToSync
 5048 0cda 25       		.uleb128 0x25
 5049 0cdb 0B060000 		.4byte	.LASF177
 5050 0cdf 09       		.byte	0x9
 5051 0ce0 75       		.byte	0x75
 5052 0ce1 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 113


 5053 0ce5 05       		.uleb128 0x5
 5054 0ce6 03       		.byte	0x3
 5055 0ce7 00000000 		.4byte	timeToSycnRemoteParams
 5056 0ceb 27       		.uleb128 0x27
 5057 0cec 68657900 		.ascii	"hey\000"
 5058 0cf0 09       		.byte	0x9
 5059 0cf1 76       		.byte	0x76
 5060 0cf2 AD000000 		.4byte	0xad
 5061 0cf6 05       		.uleb128 0x5
 5062 0cf7 03       		.byte	0x3
 5063 0cf8 00000000 		.4byte	hey
 5064 0cfc 25       		.uleb128 0x25
 5065 0cfd FB040000 		.4byte	.LASF178
 5066 0d01 09       		.byte	0x9
 5067 0d02 7A       		.byte	0x7a
 5068 0d03 02040000 		.4byte	0x402
 5069 0d07 05       		.uleb128 0x5
 5070 0d08 03       		.byte	0x3
 5071 0d09 00000000 		.4byte	alarmAppLED
 5072 0d0d 25       		.uleb128 0x25
 5073 0d0e C5020000 		.4byte	.LASF179
 5074 0d12 09       		.byte	0x9
 5075 0d13 7B       		.byte	0x7b
 5076 0d14 AD000000 		.4byte	0xad
 5077 0d18 05       		.uleb128 0x5
 5078 0d19 03       		.byte	0x3
 5079 0d1a 00000000 		.4byte	timeToAppLED
 5080 0d1e 25       		.uleb128 0x25
 5081 0d1f 67070000 		.4byte	.LASF180
 5082 0d23 09       		.byte	0x9
 5083 0d24 7D       		.byte	0x7d
 5084 0d25 02040000 		.4byte	0x402
 5085 0d29 05       		.uleb128 0x5
 5086 0d2a 03       		.byte	0x3
 5087 0d2b 00000000 		.4byte	alarmLevelSensor
 5088 0d2f 25       		.uleb128 0x25
 5089 0d30 91010000 		.4byte	.LASF181
 5090 0d34 09       		.byte	0x9
 5091 0d35 7E       		.byte	0x7e
 5092 0d36 AD000000 		.4byte	0xad
 5093 0d3a 05       		.uleb128 0x5
 5094 0d3b 03       		.byte	0x3
 5095 0d3c 00000000 		.4byte	timetoLevelSensor
 5096 0d40 25       		.uleb128 0x25
 5097 0d41 4F020000 		.4byte	.LASF182
 5098 0d45 09       		.byte	0x9
 5099 0d46 80       		.byte	0x80
 5100 0d47 02040000 		.4byte	0x402
 5101 0d4b 05       		.uleb128 0x5
 5102 0d4c 03       		.byte	0x3
 5103 0d4d 00000000 		.4byte	alarmDownstreamLevelSensor
 5104 0d51 25       		.uleb128 0x25
 5105 0d52 6E030000 		.4byte	.LASF183
 5106 0d56 09       		.byte	0x9
 5107 0d57 81       		.byte	0x81
 5108 0d58 AD000000 		.4byte	0xad
 5109 0d5c 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 114


 5110 0d5d 03       		.byte	0x3
 5111 0d5e 00000000 		.4byte	timetoDownstreamLevelSensor
 5112 0d62 25       		.uleb128 0x25
 5113 0d63 F3070000 		.4byte	.LASF184
 5114 0d67 09       		.byte	0x9
 5115 0d68 83       		.byte	0x83
 5116 0d69 02040000 		.4byte	0x402
 5117 0d6d 05       		.uleb128 0x5
 5118 0d6e 03       		.byte	0x3
 5119 0d6f 00000000 		.4byte	alarmValve
 5120 0d73 25       		.uleb128 0x25
 5121 0d74 00000000 		.4byte	.LASF185
 5122 0d78 09       		.byte	0x9
 5123 0d79 84       		.byte	0x84
 5124 0d7a AD000000 		.4byte	0xad
 5125 0d7e 05       		.uleb128 0x5
 5126 0d7f 03       		.byte	0x3
 5127 0d80 00000000 		.4byte	timeToValve
 5128 0d84 08       		.uleb128 0x8
 5129 0d85 F7000000 		.4byte	0xf7
 5130 0d89 950D0000 		.4byte	0xd95
 5131 0d8d 26       		.uleb128 0x26
 5132 0d8e 05010000 		.4byte	0x105
 5133 0d92 FF03     		.2byte	0x3ff
 5134 0d94 00       		.byte	0
 5135 0d95 25       		.uleb128 0x25
 5136 0d96 74080000 		.4byte	.LASF186
 5137 0d9a 01       		.byte	0x1
 5138 0d9b 05       		.byte	0x5
 5139 0d9c 840D0000 		.4byte	0xd84
 5140 0da0 05       		.uleb128 0x5
 5141 0da1 03       		.byte	0x3
 5142 0da2 00000000 		.4byte	uart_received_string
 5143 0da6 25       		.uleb128 0x25
 5144 0da7 25080000 		.4byte	.LASF187
 5145 0dab 01       		.byte	0x1
 5146 0dac 06       		.byte	0x6
 5147 0dad D1000000 		.4byte	0xd1
 5148 0db1 05       		.uleb128 0x5
 5149 0db2 03       		.byte	0x3
 5150 0db3 00000000 		.4byte	uart_string_index
 5151 0db7 00       		.byte	0
 5152              		.section	.debug_abbrev,"",%progbits
 5153              	.Ldebug_abbrev0:
 5154 0000 01       		.uleb128 0x1
 5155 0001 11       		.uleb128 0x11
 5156 0002 01       		.byte	0x1
 5157 0003 25       		.uleb128 0x25
 5158 0004 0E       		.uleb128 0xe
 5159 0005 13       		.uleb128 0x13
 5160 0006 0B       		.uleb128 0xb
 5161 0007 03       		.uleb128 0x3
 5162 0008 0E       		.uleb128 0xe
 5163 0009 1B       		.uleb128 0x1b
 5164 000a 0E       		.uleb128 0xe
 5165 000b 55       		.uleb128 0x55
 5166 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 115


 5167 000d 11       		.uleb128 0x11
 5168 000e 01       		.uleb128 0x1
 5169 000f 10       		.uleb128 0x10
 5170 0010 17       		.uleb128 0x17
 5171 0011 00       		.byte	0
 5172 0012 00       		.byte	0
 5173 0013 02       		.uleb128 0x2
 5174 0014 24       		.uleb128 0x24
 5175 0015 00       		.byte	0
 5176 0016 0B       		.uleb128 0xb
 5177 0017 0B       		.uleb128 0xb
 5178 0018 3E       		.uleb128 0x3e
 5179 0019 0B       		.uleb128 0xb
 5180 001a 03       		.uleb128 0x3
 5181 001b 0E       		.uleb128 0xe
 5182 001c 00       		.byte	0
 5183 001d 00       		.byte	0
 5184 001e 03       		.uleb128 0x3
 5185 001f 16       		.uleb128 0x16
 5186 0020 00       		.byte	0
 5187 0021 03       		.uleb128 0x3
 5188 0022 0E       		.uleb128 0xe
 5189 0023 3A       		.uleb128 0x3a
 5190 0024 0B       		.uleb128 0xb
 5191 0025 3B       		.uleb128 0x3b
 5192 0026 0B       		.uleb128 0xb
 5193 0027 49       		.uleb128 0x49
 5194 0028 13       		.uleb128 0x13
 5195 0029 00       		.byte	0
 5196 002a 00       		.byte	0
 5197 002b 04       		.uleb128 0x4
 5198 002c 24       		.uleb128 0x24
 5199 002d 00       		.byte	0
 5200 002e 0B       		.uleb128 0xb
 5201 002f 0B       		.uleb128 0xb
 5202 0030 3E       		.uleb128 0x3e
 5203 0031 0B       		.uleb128 0xb
 5204 0032 03       		.uleb128 0x3
 5205 0033 08       		.uleb128 0x8
 5206 0034 00       		.byte	0
 5207 0035 00       		.byte	0
 5208 0036 05       		.uleb128 0x5
 5209 0037 16       		.uleb128 0x16
 5210 0038 00       		.byte	0
 5211 0039 03       		.uleb128 0x3
 5212 003a 0E       		.uleb128 0xe
 5213 003b 3A       		.uleb128 0x3a
 5214 003c 0B       		.uleb128 0xb
 5215 003d 3B       		.uleb128 0x3b
 5216 003e 05       		.uleb128 0x5
 5217 003f 49       		.uleb128 0x49
 5218 0040 13       		.uleb128 0x13
 5219 0041 00       		.byte	0
 5220 0042 00       		.byte	0
 5221 0043 06       		.uleb128 0x6
 5222 0044 0F       		.uleb128 0xf
 5223 0045 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 116


 5224 0046 0B       		.uleb128 0xb
 5225 0047 0B       		.uleb128 0xb
 5226 0048 49       		.uleb128 0x49
 5227 0049 13       		.uleb128 0x13
 5228 004a 00       		.byte	0
 5229 004b 00       		.byte	0
 5230 004c 07       		.uleb128 0x7
 5231 004d 26       		.uleb128 0x26
 5232 004e 00       		.byte	0
 5233 004f 49       		.uleb128 0x49
 5234 0050 13       		.uleb128 0x13
 5235 0051 00       		.byte	0
 5236 0052 00       		.byte	0
 5237 0053 08       		.uleb128 0x8
 5238 0054 01       		.uleb128 0x1
 5239 0055 01       		.byte	0x1
 5240 0056 49       		.uleb128 0x49
 5241 0057 13       		.uleb128 0x13
 5242 0058 01       		.uleb128 0x1
 5243 0059 13       		.uleb128 0x13
 5244 005a 00       		.byte	0
 5245 005b 00       		.byte	0
 5246 005c 09       		.uleb128 0x9
 5247 005d 21       		.uleb128 0x21
 5248 005e 00       		.byte	0
 5249 005f 49       		.uleb128 0x49
 5250 0060 13       		.uleb128 0x13
 5251 0061 2F       		.uleb128 0x2f
 5252 0062 0B       		.uleb128 0xb
 5253 0063 00       		.byte	0
 5254 0064 00       		.byte	0
 5255 0065 0A       		.uleb128 0xa
 5256 0066 13       		.uleb128 0x13
 5257 0067 01       		.byte	0x1
 5258 0068 03       		.uleb128 0x3
 5259 0069 08       		.uleb128 0x8
 5260 006a 0B       		.uleb128 0xb
 5261 006b 0B       		.uleb128 0xb
 5262 006c 3A       		.uleb128 0x3a
 5263 006d 0B       		.uleb128 0xb
 5264 006e 3B       		.uleb128 0x3b
 5265 006f 0B       		.uleb128 0xb
 5266 0070 01       		.uleb128 0x1
 5267 0071 13       		.uleb128 0x13
 5268 0072 00       		.byte	0
 5269 0073 00       		.byte	0
 5270 0074 0B       		.uleb128 0xb
 5271 0075 0D       		.uleb128 0xd
 5272 0076 00       		.byte	0
 5273 0077 03       		.uleb128 0x3
 5274 0078 0E       		.uleb128 0xe
 5275 0079 3A       		.uleb128 0x3a
 5276 007a 0B       		.uleb128 0xb
 5277 007b 3B       		.uleb128 0x3b
 5278 007c 0B       		.uleb128 0xb
 5279 007d 49       		.uleb128 0x49
 5280 007e 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 117


 5281 007f 38       		.uleb128 0x38
 5282 0080 0B       		.uleb128 0xb
 5283 0081 00       		.byte	0
 5284 0082 00       		.byte	0
 5285 0083 0C       		.uleb128 0xc
 5286 0084 13       		.uleb128 0x13
 5287 0085 01       		.byte	0x1
 5288 0086 0B       		.uleb128 0xb
 5289 0087 05       		.uleb128 0x5
 5290 0088 3A       		.uleb128 0x3a
 5291 0089 0B       		.uleb128 0xb
 5292 008a 3B       		.uleb128 0x3b
 5293 008b 0B       		.uleb128 0xb
 5294 008c 01       		.uleb128 0x1
 5295 008d 13       		.uleb128 0x13
 5296 008e 00       		.byte	0
 5297 008f 00       		.byte	0
 5298 0090 0D       		.uleb128 0xd
 5299 0091 13       		.uleb128 0x13
 5300 0092 01       		.byte	0x1
 5301 0093 0B       		.uleb128 0xb
 5302 0094 0B       		.uleb128 0xb
 5303 0095 3A       		.uleb128 0x3a
 5304 0096 0B       		.uleb128 0xb
 5305 0097 3B       		.uleb128 0x3b
 5306 0098 0B       		.uleb128 0xb
 5307 0099 01       		.uleb128 0x1
 5308 009a 13       		.uleb128 0x13
 5309 009b 00       		.byte	0
 5310 009c 00       		.byte	0
 5311 009d 0E       		.uleb128 0xe
 5312 009e 0D       		.uleb128 0xd
 5313 009f 00       		.byte	0
 5314 00a0 03       		.uleb128 0x3
 5315 00a1 08       		.uleb128 0x8
 5316 00a2 3A       		.uleb128 0x3a
 5317 00a3 0B       		.uleb128 0xb
 5318 00a4 3B       		.uleb128 0x3b
 5319 00a5 0B       		.uleb128 0xb
 5320 00a6 49       		.uleb128 0x49
 5321 00a7 13       		.uleb128 0x13
 5322 00a8 38       		.uleb128 0x38
 5323 00a9 0B       		.uleb128 0xb
 5324 00aa 00       		.byte	0
 5325 00ab 00       		.byte	0
 5326 00ac 0F       		.uleb128 0xf
 5327 00ad 35       		.uleb128 0x35
 5328 00ae 00       		.byte	0
 5329 00af 49       		.uleb128 0x49
 5330 00b0 13       		.uleb128 0x13
 5331 00b1 00       		.byte	0
 5332 00b2 00       		.byte	0
 5333 00b3 10       		.uleb128 0x10
 5334 00b4 2E       		.uleb128 0x2e
 5335 00b5 00       		.byte	0
 5336 00b6 3F       		.uleb128 0x3f
 5337 00b7 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 118


 5338 00b8 03       		.uleb128 0x3
 5339 00b9 0E       		.uleb128 0xe
 5340 00ba 3A       		.uleb128 0x3a
 5341 00bb 0B       		.uleb128 0xb
 5342 00bc 3B       		.uleb128 0x3b
 5343 00bd 0B       		.uleb128 0xb
 5344 00be 27       		.uleb128 0x27
 5345 00bf 19       		.uleb128 0x19
 5346 00c0 11       		.uleb128 0x11
 5347 00c1 01       		.uleb128 0x1
 5348 00c2 12       		.uleb128 0x12
 5349 00c3 06       		.uleb128 0x6
 5350 00c4 40       		.uleb128 0x40
 5351 00c5 18       		.uleb128 0x18
 5352 00c6 9642     		.uleb128 0x2116
 5353 00c8 19       		.uleb128 0x19
 5354 00c9 00       		.byte	0
 5355 00ca 00       		.byte	0
 5356 00cb 11       		.uleb128 0x11
 5357 00cc 2E       		.uleb128 0x2e
 5358 00cd 00       		.byte	0
 5359 00ce 3F       		.uleb128 0x3f
 5360 00cf 19       		.uleb128 0x19
 5361 00d0 03       		.uleb128 0x3
 5362 00d1 0E       		.uleb128 0xe
 5363 00d2 3A       		.uleb128 0x3a
 5364 00d3 0B       		.uleb128 0xb
 5365 00d4 3B       		.uleb128 0x3b
 5366 00d5 0B       		.uleb128 0xb
 5367 00d6 11       		.uleb128 0x11
 5368 00d7 01       		.uleb128 0x1
 5369 00d8 12       		.uleb128 0x12
 5370 00d9 06       		.uleb128 0x6
 5371 00da 40       		.uleb128 0x40
 5372 00db 18       		.uleb128 0x18
 5373 00dc 9642     		.uleb128 0x2116
 5374 00de 19       		.uleb128 0x19
 5375 00df 00       		.byte	0
 5376 00e0 00       		.byte	0
 5377 00e1 12       		.uleb128 0x12
 5378 00e2 2E       		.uleb128 0x2e
 5379 00e3 01       		.byte	0x1
 5380 00e4 3F       		.uleb128 0x3f
 5381 00e5 19       		.uleb128 0x19
 5382 00e6 03       		.uleb128 0x3
 5383 00e7 0E       		.uleb128 0xe
 5384 00e8 3A       		.uleb128 0x3a
 5385 00e9 0B       		.uleb128 0xb
 5386 00ea 3B       		.uleb128 0x3b
 5387 00eb 0B       		.uleb128 0xb
 5388 00ec 49       		.uleb128 0x49
 5389 00ed 13       		.uleb128 0x13
 5390 00ee 11       		.uleb128 0x11
 5391 00ef 01       		.uleb128 0x1
 5392 00f0 12       		.uleb128 0x12
 5393 00f1 06       		.uleb128 0x6
 5394 00f2 40       		.uleb128 0x40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 119


 5395 00f3 18       		.uleb128 0x18
 5396 00f4 9642     		.uleb128 0x2116
 5397 00f6 19       		.uleb128 0x19
 5398 00f7 01       		.uleb128 0x1
 5399 00f8 13       		.uleb128 0x13
 5400 00f9 00       		.byte	0
 5401 00fa 00       		.byte	0
 5402 00fb 13       		.uleb128 0x13
 5403 00fc 34       		.uleb128 0x34
 5404 00fd 00       		.byte	0
 5405 00fe 03       		.uleb128 0x3
 5406 00ff 0E       		.uleb128 0xe
 5407 0100 3A       		.uleb128 0x3a
 5408 0101 0B       		.uleb128 0xb
 5409 0102 3B       		.uleb128 0x3b
 5410 0103 0B       		.uleb128 0xb
 5411 0104 49       		.uleb128 0x49
 5412 0105 13       		.uleb128 0x13
 5413 0106 02       		.uleb128 0x2
 5414 0107 18       		.uleb128 0x18
 5415 0108 00       		.byte	0
 5416 0109 00       		.byte	0
 5417 010a 14       		.uleb128 0x14
 5418 010b 0B       		.uleb128 0xb
 5419 010c 01       		.byte	0x1
 5420 010d 11       		.uleb128 0x11
 5421 010e 01       		.uleb128 0x1
 5422 010f 12       		.uleb128 0x12
 5423 0110 06       		.uleb128 0x6
 5424 0111 00       		.byte	0
 5425 0112 00       		.byte	0
 5426 0113 15       		.uleb128 0x15
 5427 0114 2E       		.uleb128 0x2e
 5428 0115 01       		.byte	0x1
 5429 0116 3F       		.uleb128 0x3f
 5430 0117 19       		.uleb128 0x19
 5431 0118 03       		.uleb128 0x3
 5432 0119 0E       		.uleb128 0xe
 5433 011a 3A       		.uleb128 0x3a
 5434 011b 0B       		.uleb128 0xb
 5435 011c 3B       		.uleb128 0x3b
 5436 011d 0B       		.uleb128 0xb
 5437 011e 27       		.uleb128 0x27
 5438 011f 19       		.uleb128 0x19
 5439 0120 49       		.uleb128 0x49
 5440 0121 13       		.uleb128 0x13
 5441 0122 11       		.uleb128 0x11
 5442 0123 01       		.uleb128 0x1
 5443 0124 12       		.uleb128 0x12
 5444 0125 06       		.uleb128 0x6
 5445 0126 40       		.uleb128 0x40
 5446 0127 18       		.uleb128 0x18
 5447 0128 9642     		.uleb128 0x2116
 5448 012a 19       		.uleb128 0x19
 5449 012b 01       		.uleb128 0x1
 5450 012c 13       		.uleb128 0x13
 5451 012d 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 120


 5452 012e 00       		.byte	0
 5453 012f 16       		.uleb128 0x16
 5454 0130 05       		.uleb128 0x5
 5455 0131 00       		.byte	0
 5456 0132 03       		.uleb128 0x3
 5457 0133 0E       		.uleb128 0xe
 5458 0134 3A       		.uleb128 0x3a
 5459 0135 0B       		.uleb128 0xb
 5460 0136 3B       		.uleb128 0x3b
 5461 0137 0B       		.uleb128 0xb
 5462 0138 49       		.uleb128 0x49
 5463 0139 13       		.uleb128 0x13
 5464 013a 02       		.uleb128 0x2
 5465 013b 18       		.uleb128 0x18
 5466 013c 00       		.byte	0
 5467 013d 00       		.byte	0
 5468 013e 17       		.uleb128 0x17
 5469 013f 34       		.uleb128 0x34
 5470 0140 00       		.byte	0
 5471 0141 03       		.uleb128 0x3
 5472 0142 08       		.uleb128 0x8
 5473 0143 3A       		.uleb128 0x3a
 5474 0144 0B       		.uleb128 0xb
 5475 0145 3B       		.uleb128 0x3b
 5476 0146 0B       		.uleb128 0xb
 5477 0147 49       		.uleb128 0x49
 5478 0148 13       		.uleb128 0x13
 5479 0149 02       		.uleb128 0x2
 5480 014a 18       		.uleb128 0x18
 5481 014b 00       		.byte	0
 5482 014c 00       		.byte	0
 5483 014d 18       		.uleb128 0x18
 5484 014e 2E       		.uleb128 0x2e
 5485 014f 01       		.byte	0x1
 5486 0150 3F       		.uleb128 0x3f
 5487 0151 19       		.uleb128 0x19
 5488 0152 03       		.uleb128 0x3
 5489 0153 0E       		.uleb128 0xe
 5490 0154 3A       		.uleb128 0x3a
 5491 0155 0B       		.uleb128 0xb
 5492 0156 3B       		.uleb128 0x3b
 5493 0157 05       		.uleb128 0x5
 5494 0158 27       		.uleb128 0x27
 5495 0159 19       		.uleb128 0x19
 5496 015a 49       		.uleb128 0x49
 5497 015b 13       		.uleb128 0x13
 5498 015c 11       		.uleb128 0x11
 5499 015d 01       		.uleb128 0x1
 5500 015e 12       		.uleb128 0x12
 5501 015f 06       		.uleb128 0x6
 5502 0160 40       		.uleb128 0x40
 5503 0161 18       		.uleb128 0x18
 5504 0162 9642     		.uleb128 0x2116
 5505 0164 19       		.uleb128 0x19
 5506 0165 01       		.uleb128 0x1
 5507 0166 13       		.uleb128 0x13
 5508 0167 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 121


 5509 0168 00       		.byte	0
 5510 0169 19       		.uleb128 0x19
 5511 016a 05       		.uleb128 0x5
 5512 016b 00       		.byte	0
 5513 016c 03       		.uleb128 0x3
 5514 016d 0E       		.uleb128 0xe
 5515 016e 3A       		.uleb128 0x3a
 5516 016f 0B       		.uleb128 0xb
 5517 0170 3B       		.uleb128 0x3b
 5518 0171 05       		.uleb128 0x5
 5519 0172 49       		.uleb128 0x49
 5520 0173 13       		.uleb128 0x13
 5521 0174 02       		.uleb128 0x2
 5522 0175 18       		.uleb128 0x18
 5523 0176 00       		.byte	0
 5524 0177 00       		.byte	0
 5525 0178 1A       		.uleb128 0x1a
 5526 0179 34       		.uleb128 0x34
 5527 017a 00       		.byte	0
 5528 017b 03       		.uleb128 0x3
 5529 017c 08       		.uleb128 0x8
 5530 017d 3A       		.uleb128 0x3a
 5531 017e 0B       		.uleb128 0xb
 5532 017f 3B       		.uleb128 0x3b
 5533 0180 05       		.uleb128 0x5
 5534 0181 49       		.uleb128 0x49
 5535 0182 13       		.uleb128 0x13
 5536 0183 02       		.uleb128 0x2
 5537 0184 18       		.uleb128 0x18
 5538 0185 00       		.byte	0
 5539 0186 00       		.byte	0
 5540 0187 1B       		.uleb128 0x1b
 5541 0188 2E       		.uleb128 0x2e
 5542 0189 01       		.byte	0x1
 5543 018a 3F       		.uleb128 0x3f
 5544 018b 19       		.uleb128 0x19
 5545 018c 03       		.uleb128 0x3
 5546 018d 0E       		.uleb128 0xe
 5547 018e 3A       		.uleb128 0x3a
 5548 018f 0B       		.uleb128 0xb
 5549 0190 3B       		.uleb128 0x3b
 5550 0191 05       		.uleb128 0x5
 5551 0192 49       		.uleb128 0x49
 5552 0193 13       		.uleb128 0x13
 5553 0194 11       		.uleb128 0x11
 5554 0195 01       		.uleb128 0x1
 5555 0196 12       		.uleb128 0x12
 5556 0197 06       		.uleb128 0x6
 5557 0198 40       		.uleb128 0x40
 5558 0199 18       		.uleb128 0x18
 5559 019a 9642     		.uleb128 0x2116
 5560 019c 19       		.uleb128 0x19
 5561 019d 01       		.uleb128 0x1
 5562 019e 13       		.uleb128 0x13
 5563 019f 00       		.byte	0
 5564 01a0 00       		.byte	0
 5565 01a1 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 122


 5566 01a2 34       		.uleb128 0x34
 5567 01a3 00       		.byte	0
 5568 01a4 03       		.uleb128 0x3
 5569 01a5 0E       		.uleb128 0xe
 5570 01a6 3A       		.uleb128 0x3a
 5571 01a7 0B       		.uleb128 0xb
 5572 01a8 3B       		.uleb128 0x3b
 5573 01a9 05       		.uleb128 0x5
 5574 01aa 49       		.uleb128 0x49
 5575 01ab 13       		.uleb128 0x13
 5576 01ac 02       		.uleb128 0x2
 5577 01ad 18       		.uleb128 0x18
 5578 01ae 00       		.byte	0
 5579 01af 00       		.byte	0
 5580 01b0 1D       		.uleb128 0x1d
 5581 01b1 2E       		.uleb128 0x2e
 5582 01b2 00       		.byte	0
 5583 01b3 3F       		.uleb128 0x3f
 5584 01b4 19       		.uleb128 0x19
 5585 01b5 03       		.uleb128 0x3
 5586 01b6 0E       		.uleb128 0xe
 5587 01b7 3A       		.uleb128 0x3a
 5588 01b8 0B       		.uleb128 0xb
 5589 01b9 3B       		.uleb128 0x3b
 5590 01ba 05       		.uleb128 0x5
 5591 01bb 11       		.uleb128 0x11
 5592 01bc 01       		.uleb128 0x1
 5593 01bd 12       		.uleb128 0x12
 5594 01be 06       		.uleb128 0x6
 5595 01bf 40       		.uleb128 0x40
 5596 01c0 18       		.uleb128 0x18
 5597 01c1 9642     		.uleb128 0x2116
 5598 01c3 19       		.uleb128 0x19
 5599 01c4 00       		.byte	0
 5600 01c5 00       		.byte	0
 5601 01c6 1E       		.uleb128 0x1e
 5602 01c7 2E       		.uleb128 0x2e
 5603 01c8 00       		.byte	0
 5604 01c9 3F       		.uleb128 0x3f
 5605 01ca 19       		.uleb128 0x19
 5606 01cb 03       		.uleb128 0x3
 5607 01cc 0E       		.uleb128 0xe
 5608 01cd 3A       		.uleb128 0x3a
 5609 01ce 0B       		.uleb128 0xb
 5610 01cf 3B       		.uleb128 0x3b
 5611 01d0 05       		.uleb128 0x5
 5612 01d1 49       		.uleb128 0x49
 5613 01d2 13       		.uleb128 0x13
 5614 01d3 11       		.uleb128 0x11
 5615 01d4 01       		.uleb128 0x1
 5616 01d5 12       		.uleb128 0x12
 5617 01d6 06       		.uleb128 0x6
 5618 01d7 40       		.uleb128 0x40
 5619 01d8 18       		.uleb128 0x18
 5620 01d9 9642     		.uleb128 0x2116
 5621 01db 19       		.uleb128 0x19
 5622 01dc 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 123


 5623 01dd 00       		.byte	0
 5624 01de 1F       		.uleb128 0x1f
 5625 01df 2E       		.uleb128 0x2e
 5626 01e0 01       		.byte	0x1
 5627 01e1 3F       		.uleb128 0x3f
 5628 01e2 19       		.uleb128 0x19
 5629 01e3 03       		.uleb128 0x3
 5630 01e4 0E       		.uleb128 0xe
 5631 01e5 3A       		.uleb128 0x3a
 5632 01e6 0B       		.uleb128 0xb
 5633 01e7 3B       		.uleb128 0x3b
 5634 01e8 05       		.uleb128 0x5
 5635 01e9 11       		.uleb128 0x11
 5636 01ea 01       		.uleb128 0x1
 5637 01eb 12       		.uleb128 0x12
 5638 01ec 06       		.uleb128 0x6
 5639 01ed 40       		.uleb128 0x40
 5640 01ee 18       		.uleb128 0x18
 5641 01ef 9642     		.uleb128 0x2116
 5642 01f1 19       		.uleb128 0x19
 5643 01f2 01       		.uleb128 0x1
 5644 01f3 13       		.uleb128 0x13
 5645 01f4 00       		.byte	0
 5646 01f5 00       		.byte	0
 5647 01f6 20       		.uleb128 0x20
 5648 01f7 2E       		.uleb128 0x2e
 5649 01f8 00       		.byte	0
 5650 01f9 3F       		.uleb128 0x3f
 5651 01fa 19       		.uleb128 0x19
 5652 01fb 03       		.uleb128 0x3
 5653 01fc 0E       		.uleb128 0xe
 5654 01fd 3A       		.uleb128 0x3a
 5655 01fe 0B       		.uleb128 0xb
 5656 01ff 3B       		.uleb128 0x3b
 5657 0200 05       		.uleb128 0x5
 5658 0201 11       		.uleb128 0x11
 5659 0202 01       		.uleb128 0x1
 5660 0203 12       		.uleb128 0x12
 5661 0204 06       		.uleb128 0x6
 5662 0205 40       		.uleb128 0x40
 5663 0206 18       		.uleb128 0x18
 5664 0207 9742     		.uleb128 0x2117
 5665 0209 19       		.uleb128 0x19
 5666 020a 00       		.byte	0
 5667 020b 00       		.byte	0
 5668 020c 21       		.uleb128 0x21
 5669 020d 34       		.uleb128 0x34
 5670 020e 00       		.byte	0
 5671 020f 03       		.uleb128 0x3
 5672 0210 0E       		.uleb128 0xe
 5673 0211 3A       		.uleb128 0x3a
 5674 0212 0B       		.uleb128 0xb
 5675 0213 3B       		.uleb128 0x3b
 5676 0214 05       		.uleb128 0x5
 5677 0215 49       		.uleb128 0x49
 5678 0216 13       		.uleb128 0x13
 5679 0217 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 124


 5680 0218 00       		.byte	0
 5681 0219 22       		.uleb128 0x22
 5682 021a 0B       		.uleb128 0xb
 5683 021b 01       		.byte	0x1
 5684 021c 55       		.uleb128 0x55
 5685 021d 17       		.uleb128 0x17
 5686 021e 00       		.byte	0
 5687 021f 00       		.byte	0
 5688 0220 23       		.uleb128 0x23
 5689 0221 2E       		.uleb128 0x2e
 5690 0222 00       		.byte	0
 5691 0223 3F       		.uleb128 0x3f
 5692 0224 19       		.uleb128 0x19
 5693 0225 03       		.uleb128 0x3
 5694 0226 0E       		.uleb128 0xe
 5695 0227 3A       		.uleb128 0x3a
 5696 0228 0B       		.uleb128 0xb
 5697 0229 3B       		.uleb128 0x3b
 5698 022a 05       		.uleb128 0x5
 5699 022b 49       		.uleb128 0x49
 5700 022c 13       		.uleb128 0x13
 5701 022d 11       		.uleb128 0x11
 5702 022e 01       		.uleb128 0x1
 5703 022f 12       		.uleb128 0x12
 5704 0230 06       		.uleb128 0x6
 5705 0231 40       		.uleb128 0x40
 5706 0232 18       		.uleb128 0x18
 5707 0233 9742     		.uleb128 0x2117
 5708 0235 19       		.uleb128 0x19
 5709 0236 00       		.byte	0
 5710 0237 00       		.byte	0
 5711 0238 24       		.uleb128 0x24
 5712 0239 34       		.uleb128 0x34
 5713 023a 00       		.byte	0
 5714 023b 03       		.uleb128 0x3
 5715 023c 0E       		.uleb128 0xe
 5716 023d 3A       		.uleb128 0x3a
 5717 023e 0B       		.uleb128 0xb
 5718 023f 3B       		.uleb128 0x3b
 5719 0240 05       		.uleb128 0x5
 5720 0241 49       		.uleb128 0x49
 5721 0242 13       		.uleb128 0x13
 5722 0243 3F       		.uleb128 0x3f
 5723 0244 19       		.uleb128 0x19
 5724 0245 3C       		.uleb128 0x3c
 5725 0246 19       		.uleb128 0x19
 5726 0247 00       		.byte	0
 5727 0248 00       		.byte	0
 5728 0249 25       		.uleb128 0x25
 5729 024a 34       		.uleb128 0x34
 5730 024b 00       		.byte	0
 5731 024c 03       		.uleb128 0x3
 5732 024d 0E       		.uleb128 0xe
 5733 024e 3A       		.uleb128 0x3a
 5734 024f 0B       		.uleb128 0xb
 5735 0250 3B       		.uleb128 0x3b
 5736 0251 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 125


 5737 0252 49       		.uleb128 0x49
 5738 0253 13       		.uleb128 0x13
 5739 0254 3F       		.uleb128 0x3f
 5740 0255 19       		.uleb128 0x19
 5741 0256 02       		.uleb128 0x2
 5742 0257 18       		.uleb128 0x18
 5743 0258 00       		.byte	0
 5744 0259 00       		.byte	0
 5745 025a 26       		.uleb128 0x26
 5746 025b 21       		.uleb128 0x21
 5747 025c 00       		.byte	0
 5748 025d 49       		.uleb128 0x49
 5749 025e 13       		.uleb128 0x13
 5750 025f 2F       		.uleb128 0x2f
 5751 0260 05       		.uleb128 0x5
 5752 0261 00       		.byte	0
 5753 0262 00       		.byte	0
 5754 0263 27       		.uleb128 0x27
 5755 0264 34       		.uleb128 0x34
 5756 0265 00       		.byte	0
 5757 0266 03       		.uleb128 0x3
 5758 0267 08       		.uleb128 0x8
 5759 0268 3A       		.uleb128 0x3a
 5760 0269 0B       		.uleb128 0xb
 5761 026a 3B       		.uleb128 0x3b
 5762 026b 0B       		.uleb128 0xb
 5763 026c 49       		.uleb128 0x49
 5764 026d 13       		.uleb128 0x13
 5765 026e 3F       		.uleb128 0x3f
 5766 026f 19       		.uleb128 0x19
 5767 0270 02       		.uleb128 0x2
 5768 0271 18       		.uleb128 0x18
 5769 0272 00       		.byte	0
 5770 0273 00       		.byte	0
 5771 0274 00       		.byte	0
 5772              		.section	.debug_aranges,"",%progbits
 5773 0000 D4000000 		.4byte	0xd4
 5774 0004 0200     		.2byte	0x2
 5775 0006 00000000 		.4byte	.Ldebug_info0
 5776 000a 04       		.byte	0x4
 5777 000b 00       		.byte	0
 5778 000c 0000     		.2byte	0
 5779 000e 0000     		.2byte	0
 5780 0010 00000000 		.4byte	.LFB64
 5781 0014 44000000 		.4byte	.LFE64-.LFB64
 5782 0018 00000000 		.4byte	.LFB65
 5783 001c 6C000000 		.4byte	.LFE65-.LFB65
 5784 0020 00000000 		.4byte	.LFB66
 5785 0024 32000000 		.4byte	.LFE66-.LFB66
 5786 0028 00000000 		.4byte	.LFB67
 5787 002c 20000000 		.4byte	.LFE67-.LFB67
 5788 0030 00000000 		.4byte	.LFB68
 5789 0034 40000000 		.4byte	.LFE68-.LFB68
 5790 0038 00000000 		.4byte	.LFB69
 5791 003c DC000000 		.4byte	.LFE69-.LFB69
 5792 0040 00000000 		.4byte	.LFB70
 5793 0044 1C000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 126


 5794 0048 00000000 		.4byte	.LFB71
 5795 004c 28000000 		.4byte	.LFE71-.LFB71
 5796 0050 00000000 		.4byte	.LFB72
 5797 0054 C8000000 		.4byte	.LFE72-.LFB72
 5798 0058 00000000 		.4byte	.LFB73
 5799 005c 00010000 		.4byte	.LFE73-.LFB73
 5800 0060 00000000 		.4byte	.LFB74
 5801 0064 78000000 		.4byte	.LFE74-.LFB74
 5802 0068 00000000 		.4byte	.LFB75
 5803 006c 74010000 		.4byte	.LFE75-.LFB75
 5804 0070 00000000 		.4byte	.LFB76
 5805 0074 B8000000 		.4byte	.LFE76-.LFB76
 5806 0078 00000000 		.4byte	.LFB77
 5807 007c 1C000000 		.4byte	.LFE77-.LFB77
 5808 0080 00000000 		.4byte	.LFB78
 5809 0084 28000000 		.4byte	.LFE78-.LFB78
 5810 0088 00000000 		.4byte	.LFB79
 5811 008c 84000000 		.4byte	.LFE79-.LFB79
 5812 0090 00000000 		.4byte	.LFB80
 5813 0094 48000000 		.4byte	.LFE80-.LFB80
 5814 0098 00000000 		.4byte	.LFB81
 5815 009c 04060000 		.4byte	.LFE81-.LFB81
 5816 00a0 00000000 		.4byte	.LFB82
 5817 00a4 68010000 		.4byte	.LFE82-.LFB82
 5818 00a8 00000000 		.4byte	.LFB83
 5819 00ac 44010000 		.4byte	.LFE83-.LFB83
 5820 00b0 00000000 		.4byte	.LFB84
 5821 00b4 14000000 		.4byte	.LFE84-.LFB84
 5822 00b8 00000000 		.4byte	.LFB85
 5823 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5824 00c0 00000000 		.4byte	.LFB86
 5825 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5826 00c8 00000000 		.4byte	.LFB87
 5827 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5828 00d0 00000000 		.4byte	0
 5829 00d4 00000000 		.4byte	0
 5830              		.section	.debug_ranges,"",%progbits
 5831              	.Ldebug_ranges0:
 5832 0000 AE030000 		.4byte	.LBB9
 5833 0004 94050000 		.4byte	.LBE9
 5834 0008 96050000 		.4byte	.LBB10
 5835 000c 9E050000 		.4byte	.LBE10
 5836 0010 A0050000 		.4byte	.LBB11
 5837 0014 A8050000 		.4byte	.LBE11
 5838 0018 00000000 		.4byte	0
 5839 001c 00000000 		.4byte	0
 5840 0020 00000000 		.4byte	.LFB64
 5841 0024 44000000 		.4byte	.LFE64
 5842 0028 00000000 		.4byte	.LFB65
 5843 002c 6C000000 		.4byte	.LFE65
 5844 0030 00000000 		.4byte	.LFB66
 5845 0034 32000000 		.4byte	.LFE66
 5846 0038 00000000 		.4byte	.LFB67
 5847 003c 20000000 		.4byte	.LFE67
 5848 0040 00000000 		.4byte	.LFB68
 5849 0044 40000000 		.4byte	.LFE68
 5850 0048 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 127


 5851 004c DC000000 		.4byte	.LFE69
 5852 0050 00000000 		.4byte	.LFB70
 5853 0054 1C000000 		.4byte	.LFE70
 5854 0058 00000000 		.4byte	.LFB71
 5855 005c 28000000 		.4byte	.LFE71
 5856 0060 00000000 		.4byte	.LFB72
 5857 0064 C8000000 		.4byte	.LFE72
 5858 0068 00000000 		.4byte	.LFB73
 5859 006c 00010000 		.4byte	.LFE73
 5860 0070 00000000 		.4byte	.LFB74
 5861 0074 78000000 		.4byte	.LFE74
 5862 0078 00000000 		.4byte	.LFB75
 5863 007c 74010000 		.4byte	.LFE75
 5864 0080 00000000 		.4byte	.LFB76
 5865 0084 B8000000 		.4byte	.LFE76
 5866 0088 00000000 		.4byte	.LFB77
 5867 008c 1C000000 		.4byte	.LFE77
 5868 0090 00000000 		.4byte	.LFB78
 5869 0094 28000000 		.4byte	.LFE78
 5870 0098 00000000 		.4byte	.LFB79
 5871 009c 84000000 		.4byte	.LFE79
 5872 00a0 00000000 		.4byte	.LFB80
 5873 00a4 48000000 		.4byte	.LFE80
 5874 00a8 00000000 		.4byte	.LFB81
 5875 00ac 04060000 		.4byte	.LFE81
 5876 00b0 00000000 		.4byte	.LFB82
 5877 00b4 68010000 		.4byte	.LFE82
 5878 00b8 00000000 		.4byte	.LFB83
 5879 00bc 44010000 		.4byte	.LFE83
 5880 00c0 00000000 		.4byte	.LFB84
 5881 00c4 14000000 		.4byte	.LFE84
 5882 00c8 00000000 		.4byte	.LFB85
 5883 00cc 1A000000 		.4byte	.LFE85
 5884 00d0 00000000 		.4byte	.LFB86
 5885 00d4 2A000000 		.4byte	.LFE86
 5886 00d8 00000000 		.4byte	.LFB87
 5887 00dc 7C020000 		.4byte	.LFE87
 5888 00e0 00000000 		.4byte	0
 5889 00e4 00000000 		.4byte	0
 5890              		.section	.debug_line,"",%progbits
 5891              	.Ldebug_line0:
 5892 0000 04060000 		.section	.debug_str,"MS",%progbits,1
 5892      02003602 
 5892      00000201 
 5892      FB0E0D00 
 5892      01010101 
 5893              	.LASF185:
 5894 0000 74696D65 		.ascii	"timeToValve\000"
 5894      546F5661 
 5894      6C766500 
 5895              	.LASF144:
 5896 000c 676D745F 		.ascii	"gmt_offset\000"
 5896      6F666673 
 5896      657400
 5897              	.LASF16:
 5898 0017 75696E74 		.ascii	"uint16\000"
 5898      313600
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 128


 5899              	.LASF38:
 5900 001e 76616C75 		.ascii	"value\000"
 5900      6500
 5901              	.LASF27:
 5902 0024 746D5F68 		.ascii	"tm_hour\000"
 5902      6F757200 
 5903              	.LASF32:
 5904 002c 746D5F79 		.ascii	"tm_yday\000"
 5904      64617900 
 5905              	.LASF190:
 5906 0034 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5906      73657273 
 5906      5C64616E 
 5906      747A5C44 
 5906      6F63756D 
 5907 0061 72694F53 		.ascii	"riOS.cydsn\000"
 5907      2E637964 
 5907      736E00
 5908              	.LASF152:
 5909 006c 62756666 		.ascii	"buffer_overflow\000"
 5909      65725F6F 
 5909      76657266 
 5909      6C6F7700 
 5910              	.LASF4:
 5911 007c 5F5F7569 		.ascii	"__uint8_t\000"
 5911      6E74385F 
 5911      7400
 5912              	.LASF73:
 5913 0086 636F756E 		.ascii	"countDownResetCondition\000"
 5913      74446F77 
 5913      6E526573 
 5913      6574436F 
 5913      6E646974 
 5914              	.LASF54:
 5915 009e 6C6F6E67 		.ascii	"longitude\000"
 5915      69747564 
 5915      6500
 5916              	.LASF188:
 5917 00a8 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5917      43313120 
 5917      352E342E 
 5917      31203230 
 5917      31363036 
 5918 00db 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5918      20726576 
 5918      6973696F 
 5918      6E203233 
 5918      37373135 
 5919 010e 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5919      66756E63 
 5919      74696F6E 
 5919      2D736563 
 5919      74696F6E 
 5920              	.LASF147:
 5921 0136 6D6F6465 		.ascii	"modem_wakeup\000"
 5921      6D5F7761 
 5921      6B657570 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 129


 5921      00
 5922              	.LASF10:
 5923 0143 6C6F6E67 		.ascii	"long long unsigned int\000"
 5923      206C6F6E 
 5923      6720756E 
 5923      7369676E 
 5923      65642069 
 5924              	.LASF128:
 5925 015a 73616D70 		.ascii	"sample_freq\000"
 5925      6C655F66 
 5925      72657100 
 5926              	.LASF156:
 5927 0166 6D6F6465 		.ascii	"modem_state\000"
 5927      6D5F7374 
 5927      61746500 
 5928              	.LASF100:
 5929 0172 74657374 		.ascii	"test\000"
 5929      00
 5930              	.LASF173:
 5931 0177 616C6172 		.ascii	"alarmMeasure\000"
 5931      6D4D6561 
 5931      73757265 
 5931      00
 5932              	.LASF151:
 5933 0184 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5933      52784275 
 5933      66666572 
 5933      00
 5934              	.LASF181:
 5935 0191 74696D65 		.ascii	"timetoLevelSensor\000"
 5935      746F4C65 
 5935      76656C53 
 5935      656E736F 
 5935      7200
 5936              	.LASF158:
 5937 01a3 6D6F6465 		.ascii	"modem_stats\000"
 5937      6D5F7374 
 5937      61747300 
 5938              	.LASF9:
 5939 01af 6C6F6E67 		.ascii	"long long int\000"
 5939      206C6F6E 
 5939      6720696E 
 5939      7400
 5940              	.LASF0:
 5941 01bd 7369676E 		.ascii	"signed char\000"
 5941      65642063 
 5941      68617200 
 5942              	.LASF47:
 5943 01c9 65636E6F 		.ascii	"ecno\000"
 5943      00
 5944              	.LASF70:
 5945 01ce 636F756E 		.ascii	"countDownValue\000"
 5945      74446F77 
 5945      6E56616C 
 5945      756500
 5946              	.LASF174:
 5947 01dd 74696D65 		.ascii	"timeToMeasure\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 130


 5947      546F4D65 
 5947      61737572 
 5947      6500
 5948              	.LASF50:
 5949 01eb 74696D65 		.ascii	"time_to_network_connect\000"
 5949      5F746F5F 
 5949      6E657477 
 5949      6F726B5F 
 5949      636F6E6E 
 5950              	.LASF176:
 5951 0203 74696D65 		.ascii	"timeToSync\000"
 5951      546F5379 
 5951      6E6300
 5952              	.LASF133:
 5953 020e 646F776E 		.ascii	"down_level_freq\000"
 5953      5F6C6576 
 5953      656C5F66 
 5953      72657100 
 5954              	.LASF169:
 5955 021e 68747470 		.ascii	"http_body\000"
 5955      5F626F64 
 5955      7900
 5956              	.LASF111:
 5957 0228 7365745F 		.ascii	"set_up_internet_connection\000"
 5957      75705F69 
 5957      6E746572 
 5957      6E65745F 
 5957      636F6E6E 
 5958              	.LASF143:
 5959 0243 7365636F 		.ascii	"second\000"
 5959      6E6400
 5960              	.LASF139:
 5961 024a 79656172 		.ascii	"year\000"
 5961      00
 5962              	.LASF182:
 5963 024f 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 5963      6D446F77 
 5963      6E737472 
 5963      65616D4C 
 5963      6576656C 
 5964              	.LASF134:
 5965 026a 74656D70 		.ascii	"temp\000"
 5965      00
 5966              	.LASF6:
 5967 026f 6C6F6E67 		.ascii	"long int\000"
 5967      20696E74 
 5967      00
 5968              	.LASF45:
 5969 0278 72786C65 		.ascii	"rxlev\000"
 5969      7600
 5970              	.LASF71:
 5971 027e 63757272 		.ascii	"currentCountDownValue\000"
 5971      656E7443 
 5971      6F756E74 
 5971      446F776E 
 5971      56616C75 
 5972              	.LASF145:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 131


 5973 0294 6D6F6465 		.ascii	"modem_get_state\000"
 5973      6D5F6765 
 5973      745F7374 
 5973      61746500 
 5974              	.LASF55:
 5975 02a4 616C7469 		.ascii	"altitude\000"
 5975      74756465 
 5975      00
 5976              	.LASF15:
 5977 02ad 75696E74 		.ascii	"uint8\000"
 5977      3800
 5978              	.LASF132:
 5979 02b3 6C657665 		.ascii	"level_sensor_freq\000"
 5979      6C5F7365 
 5979      6E736F72 
 5979      5F667265 
 5979      7100
 5980              	.LASF179:
 5981 02c5 74696D65 		.ascii	"timeToAppLED\000"
 5981      546F4170 
 5981      704C4544 
 5981      00
 5982              	.LASF19:
 5983 02d2 696E7433 		.ascii	"int32\000"
 5983      3200
 5984              	.LASF59:
 5985 02d8 6E6F6465 		.ascii	"node_type\000"
 5985      5F747970 
 5985      6500
 5986              	.LASF135:
 5987 02e2 6D6F6465 		.ascii	"modem_configure_settings\000"
 5987      6D5F636F 
 5987      6E666967 
 5987      7572655F 
 5987      73657474 
 5988              	.LASF119:
 5989 02fb 735F7369 		.ascii	"s_sim_type\000"
 5989      6D5F7479 
 5989      706500
 5990              	.LASF101:
 5991 0306 6E657477 		.ascii	"network_time\000"
 5991      6F726B5F 
 5991      74696D65 
 5991      00
 5992              	.LASF3:
 5993 0313 73686F72 		.ascii	"short unsigned int\000"
 5993      7420756E 
 5993      7369676E 
 5993      65642069 
 5993      6E7400
 5994              	.LASF17:
 5995 0326 75696E74 		.ascii	"uint32\000"
 5995      333200
 5996              	.LASF97:
 5997 032d 696E7465 		.ascii	"interval\000"
 5997      7276616C 
 5997      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 132


 5998              	.LASF7:
 5999 0336 5F5F7569 		.ascii	"__uint32_t\000"
 5999      6E743332 
 5999      5F7400
 6000              	.LASF137:
 6001 0341 6D6F6465 		.ascii	"modem_get_network_time\000"
 6001      6D5F6765 
 6001      745F6E65 
 6001      74776F72 
 6001      6B5F7469 
 6002              	.LASF29:
 6003 0358 746D5F6D 		.ascii	"tm_mon\000"
 6003      6F6E00
 6004              	.LASF124:
 6005 035f 735F6C65 		.ascii	"s_level_sensor\000"
 6005      76656C5F 
 6005      73656E73 
 6005      6F7200
 6006              	.LASF183:
 6007 036e 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 6007      746F446F 
 6007      776E7374 
 6007      7265616D 
 6007      4C657665 
 6008              	.LASF63:
 6009 038a 64656275 		.ascii	"debug_level\000"
 6009      675F6C65 
 6009      76656C00 
 6010              	.LASF146:
 6011 0396 6D6F6465 		.ascii	"modem_sleep\000"
 6011      6D5F736C 
 6011      65657000 
 6012              	.LASF122:
 6013 03a2 735F6465 		.ascii	"s_debug_freq\000"
 6013      6275675F 
 6013      66726571 
 6013      00
 6014              	.LASF115:
 6015 03af 75706461 		.ascii	"updatable_parameters_initialize\000"
 6015      7461626C 
 6015      655F7061 
 6015      72616D65 
 6015      74657273 
 6016              	.LASF30:
 6017 03cf 746D5F79 		.ascii	"tm_year\000"
 6017      65617200 
 6018              	.LASF175:
 6019 03d7 616C6172 		.ascii	"alarmSync\000"
 6019      6D53796E 
 6019      6300
 6020              	.LASF166:
 6021 03e1 4170705F 		.ascii	"App_LED_enabled\000"
 6021      4C45445F 
 6021      656E6162 
 6021      6C656400 
 6022              	.LASF40:
 6023 03f1 6B65795F 		.ascii	"key_value_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 133


 6023      76616C75 
 6023      655F7400 
 6024              	.LASF88:
 6025 03fd 7077725F 		.ascii	"pwr_check\000"
 6025      63686563 
 6025      6B00
 6026              	.LASF8:
 6027 0407 6C6F6E67 		.ascii	"long unsigned int\000"
 6027      20756E73 
 6027      69676E65 
 6027      6420696E 
 6027      7400
 6028              	.LASF103:
 6029 0419 65787472 		.ascii	"extract_string\000"
 6029      6163745F 
 6029      73747269 
 6029      6E6700
 6030              	.LASF93:
 6031 0428 74696D65 		.ascii	"timeout\000"
 6031      6F757400 
 6032              	.LASF116:
 6033 0430 6765745F 		.ascii	"get_cell_network_stats\000"
 6033      63656C6C 
 6033      5F6E6574 
 6033      776F726B 
 6033      5F737461 
 6034              	.LASF39:
 6035 0447 74696D65 		.ascii	"timeStamp\000"
 6035      5374616D 
 6035      7000
 6036              	.LASF56:
 6037 0451 74696D65 		.ascii	"time_to_lock\000"
 6037      5F746F5F 
 6037      6C6F636B 
 6037      00
 6038              	.LASF155:
 6039 045e 64617461 		.ascii	"data\000"
 6039      00
 6040              	.LASF79:
 6041 0463 65705F70 		.ascii	"ep_port\000"
 6041      6F727400 
 6042              	.LASF33:
 6043 046b 746D5F69 		.ascii	"tm_isdst\000"
 6043      73647374 
 6043      00
 6044              	.LASF75:
 6045 0474 6D6F6465 		.ascii	"modem_info\000"
 6045      6D5F696E 
 6045      666F00
 6046              	.LASF78:
 6047 047f 65705F68 		.ascii	"ep_host\000"
 6047      6F737400 
 6048              	.LASF76:
 6049 0487 63686970 		.ascii	"chip_uniqueId\000"
 6049      5F756E69 
 6049      71756549 
 6049      6400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 134


 6050              	.LASF98:
 6051 0495 6D6F6465 		.ascii	"modem_power_up\000"
 6051      6D5F706F 
 6051      7765725F 
 6051      757000
 6052              	.LASF189:
 6053 04a4 6D6F6465 		.ascii	"modem.c\000"
 6053      6D2E6300 
 6054              	.LASF105:
 6055 04ac 62656769 		.ascii	"beginMarker\000"
 6055      6E4D6172 
 6055      6B657200 
 6056              	.LASF107:
 6057 04b8 74617267 		.ascii	"target\000"
 6057      657400
 6058              	.LASF51:
 6059 04bf 74696D65 		.ascii	"time_to_acquire_ip\000"
 6059      5F746F5F 
 6059      61637175 
 6059      6972655F 
 6059      697000
 6060              	.LASF106:
 6061 04d2 656E644D 		.ascii	"endMarker\000"
 6061      61726B65 
 6061      7200
 6062              	.LASF2:
 6063 04dc 73686F72 		.ascii	"short int\000"
 6063      7420696E 
 6063      7400
 6064              	.LASF138:
 6065 04e6 65706F63 		.ascii	"epoch_time\000"
 6065      685F7469 
 6065      6D6500
 6066              	.LASF5:
 6067 04f1 5F5F696E 		.ascii	"__int32_t\000"
 6067      7433325F 
 6067      7400
 6068              	.LASF178:
 6069 04fb 616C6172 		.ascii	"alarmAppLED\000"
 6069      6D417070 
 6069      4C454400 
 6070              	.LASF104:
 6071 0507 66726F6D 		.ascii	"from\000"
 6071      00
 6072              	.LASF110:
 6073 050c 63726567 		.ascii	"creg\000"
 6073      00
 6074              	.LASF130:
 6075 0511 64656275 		.ascii	"debug_freq\000"
 6075      675F6672 
 6075      657100
 6076              	.LASF94:
 6077 051c 61745F61 		.ascii	"at_attempt\000"
 6077      7474656D 
 6077      707400
 6078              	.LASF126:
 6079 0527 735F7661 		.ascii	"s_valve\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 135


 6079      6C766500 
 6080              	.LASF163:
 6081 052f 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 6081      73747265 
 6081      616D5F6C 
 6081      6576656C 
 6081      5F73656E 
 6082              	.LASF102:
 6083 054f 61745F77 		.ascii	"at_write_command\000"
 6083      72697465 
 6083      5F636F6D 
 6083      6D616E64 
 6083      00
 6084              	.LASF77:
 6085 0560 7379735F 		.ascii	"sys_info_t\000"
 6085      696E666F 
 6085      5F7400
 6086              	.LASF69:
 6087 056b 75706461 		.ascii	"updatable_parameters_t\000"
 6087      7461626C 
 6087      655F7061 
 6087      72616D65 
 6087      74657273 
 6088              	.LASF129:
 6089 0582 7265706F 		.ascii	"report_freq\000"
 6089      72745F66 
 6089      72657100 
 6090              	.LASF153:
 6091 058e 64617461 		.ascii	"dataPointsInStack\000"
 6091      506F696E 
 6091      7473496E 
 6091      53746163 
 6091      6B00
 6092              	.LASF26:
 6093 05a0 746D5F6D 		.ascii	"tm_min\000"
 6093      696E00
 6094              	.LASF24:
 6095 05a7 73697A65 		.ascii	"sizetype\000"
 6095      74797065 
 6095      00
 6096              	.LASF125:
 6097 05b0 735F646F 		.ascii	"s_down_level_sensor\000"
 6097      776E5F6C 
 6097      6576656C 
 6097      5F73656E 
 6097      736F7200 
 6098              	.LASF140:
 6099 05c4 6D6F6E74 		.ascii	"month\000"
 6099      6800
 6100              	.LASF109:
 6101 05ca 69735F63 		.ascii	"is_connected_to_cell_network\000"
 6101      6F6E6E65 
 6101      63746564 
 6101      5F746F5F 
 6101      63656C6C 
 6102              	.LASF53:
 6103 05e7 6C617469 		.ascii	"latitude\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 136


 6103      74756465 
 6103      00
 6104              	.LASF34:
 6105 05f0 74657374 		.ascii	"test_name\000"
 6105      5F6E616D 
 6105      6500
 6106              	.LASF18:
 6107 05fa 696E7431 		.ascii	"int16\000"
 6107      3600
 6108              	.LASF150:
 6109 0600 6770735F 		.ascii	"gps_status\000"
 6109      73746174 
 6109      757300
 6110              	.LASF177:
 6111 060b 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 6111      546F5379 
 6111      636E5265 
 6111      6D6F7465 
 6111      50617261 
 6112              	.LASF99:
 6113 0622 6D6F6465 		.ascii	"modem_test\000"
 6113      6D5F7465 
 6113      737400
 6114              	.LASF114:
 6115 062d 6D617463 		.ascii	"match\000"
 6115      6800
 6116              	.LASF159:
 6117 0633 75706461 		.ascii	"updatable_parameters\000"
 6117      7461626C 
 6117      655F7061 
 6117      72616D65 
 6117      74657273 
 6118              	.LASF141:
 6119 0648 686F7572 		.ascii	"hour\000"
 6119      00
 6120              	.LASF91:
 6121 064d 636F6D6D 		.ascii	"commands\000"
 6121      616E6473 
 6121      00
 6122              	.LASF95:
 6123 0656 636F6D70 		.ascii	"compare_location\000"
 6123      6172655F 
 6123      6C6F6361 
 6123      74696F6E 
 6123      00
 6124              	.LASF20:
 6125 0667 666C6F61 		.ascii	"float\000"
 6125      7400
 6126              	.LASF81:
 6127 066d 6D6F6465 		.ascii	"modem_initialize\000"
 6127      6D5F696E 
 6127      69746961 
 6127      6C697A65 
 6127      00
 6128              	.LASF121:
 6129 067e 735F7265 		.ascii	"s_report_freq\000"
 6129      706F7274 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 137


 6129      5F667265 
 6129      7100
 6130              	.LASF127:
 6131 068c 735F6170 		.ascii	"s_apps_enabled\000"
 6131      70735F65 
 6131      6E61626C 
 6131      656400
 6132              	.LASF60:
 6133 069b 73696D5F 		.ascii	"sim_type\000"
 6133      74797065 
 6133      00
 6134              	.LASF112:
 6135 06a4 6973725F 		.ascii	"isr_telit_rx\000"
 6135      74656C69 
 6135      745F7278 
 6135      00
 6136              	.LASF74:
 6137 06b1 616C6172 		.ascii	"alarm\000"
 6137      6D00
 6138              	.LASF68:
 6139 06b7 5F426F6F 		.ascii	"_Bool\000"
 6139      6C00
 6140              	.LASF13:
 6141 06bd 696E7433 		.ascii	"int32_t\000"
 6141      325F7400 
 6142              	.LASF1:
 6143 06c5 756E7369 		.ascii	"unsigned char\000"
 6143      676E6564 
 6143      20636861 
 6143      7200
 6144              	.LASF172:
 6145 06d3 73797374 		.ascii	"system_settings\000"
 6145      656D5F73 
 6145      65747469 
 6145      6E677300 
 6146              	.LASF96:
 6147 06e3 64656C61 		.ascii	"delay\000"
 6147      7900
 6148              	.LASF48:
 6149 06e9 72737271 		.ascii	"rsrq\000"
 6149      00
 6150              	.LASF62:
 6151 06ee 73796E63 		.ascii	"sync_time\000"
 6151      5F74696D 
 6151      6500
 6152              	.LASF118:
 6153 06f8 735F6E6F 		.ascii	"s_node_type\000"
 6153      64655F74 
 6153      79706500 
 6154              	.LASF46:
 6155 0704 72736370 		.ascii	"rscp\000"
 6155      00
 6156              	.LASF148:
 6157 0709 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 6157      6D5F6765 
 6157      745F6770 
 6157      735F636F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 138


 6157      6F726469 
 6158              	.LASF37:
 6159 0723 74657374 		.ascii	"test_t\000"
 6159      5F7400
 6160              	.LASF171:
 6161 072a 73797374 		.ascii	"system_info\000"
 6161      656D5F69 
 6161      6E666F00 
 6162              	.LASF43:
 6163 0736 696D6569 		.ascii	"imei\000"
 6163      00
 6164              	.LASF36:
 6165 073b 72656173 		.ascii	"reason\000"
 6165      6F6E00
 6166              	.LASF49:
 6167 0742 72737270 		.ascii	"rsrp\000"
 6167      00
 6168              	.LASF52:
 6169 0747 6D6F6465 		.ascii	"modem_stats_t\000"
 6169      6D5F7374 
 6169      6174735F 
 6169      7400
 6170              	.LASF90:
 6171 0755 75617274 		.ascii	"uart_string_reset\000"
 6171      5F737472 
 6171      696E675F 
 6171      72657365 
 6171      7400
 6172              	.LASF180:
 6173 0767 616C6172 		.ascii	"alarmLevelSensor\000"
 6173      6D4C6576 
 6173      656C5365 
 6173      6E736F72 
 6173      00
 6174              	.LASF31:
 6175 0778 746D5F77 		.ascii	"tm_wday\000"
 6175      64617900 
 6176              	.LASF89:
 6177 0780 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 6177      6D5F736F 
 6177      66745F70 
 6177      6F776572 
 6177      5F637963 
 6178              	.LASF65:
 6179 0797 4C657665 		.ascii	"Level_Sensor_freq\000"
 6179      6C5F5365 
 6179      6E736F72 
 6179      5F667265 
 6179      7100
 6180              	.LASF160:
 6181 07a9 6C657665 		.ascii	"level_sensor_inbox\000"
 6181      6C5F7365 
 6181      6E736F72 
 6181      5F696E62 
 6181      6F7800
 6182              	.LASF23:
 6183 07bc 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 139


 6183      20646F75 
 6183      626C6500 
 6184              	.LASF22:
 6185 07c8 63686172 		.ascii	"char\000"
 6185      00
 6186              	.LASF108:
 6187 07cd 6D6F6465 		.ascii	"modem_process_tasks\000"
 6187      6D5F7072 
 6187      6F636573 
 6187      735F7461 
 6187      736B7300 
 6188              	.LASF11:
 6189 07e1 756E7369 		.ascii	"unsigned int\000"
 6189      676E6564 
 6189      20696E74 
 6189      00
 6190              	.LASF136:
 6191 07ee 4346554E 		.ascii	"CFUN\000"
 6191      00
 6192              	.LASF184:
 6193 07f3 616C6172 		.ascii	"alarmValve\000"
 6193      6D56616C 
 6193      766500
 6194              	.LASF42:
 6195 07fe 6D6F6465 		.ascii	"model_id\000"
 6195      6C5F6964 
 6195      00
 6196              	.LASF170:
 6197 0807 68747470 		.ascii	"http_route\000"
 6197      5F726F75 
 6197      746500
 6198              	.LASF44:
 6199 0812 6D6F6465 		.ascii	"modem_info_t\000"
 6199      6D5F696E 
 6199      666F5F74 
 6199      00
 6200              	.LASF58:
 6201 081f 6770735F 		.ascii	"gps_t\000"
 6201      7400
 6202              	.LASF187:
 6203 0825 75617274 		.ascii	"uart_string_index\000"
 6203      5F737472 
 6203      696E675F 
 6203      696E6465 
 6203      7800
 6204              	.LASF61:
 6205 0837 6D656173 		.ascii	"measure_time\000"
 6205      7572655F 
 6205      74696D65 
 6205      00
 6206              	.LASF113:
 6207 0844 69735F63 		.ascii	"is_connected_to_internet\000"
 6207      6F6E6E65 
 6207      63746564 
 6207      5F746F5F 
 6207      696E7465 
 6208              	.LASF157:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 140


 6209 085d 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 6209      6D5F7374 
 6209      6172745F 
 6209      74696D65 
 6209      5F737461 
 6210              	.LASF186:
 6211 0874 75617274 		.ascii	"uart_received_string\000"
 6211      5F726563 
 6211      65697665 
 6211      645F7374 
 6211      72696E67 
 6212              	.LASF82:
 6213 0889 70696E73 		.ascii	"pins_configure_inactive\000"
 6213      5F636F6E 
 6213      66696775 
 6213      72655F69 
 6213      6E616374 
 6214              	.LASF123:
 6215 08a1 735F6170 		.ascii	"s_app_led\000"
 6215      705F6C65 
 6215      6400
 6216              	.LASF41:
 6217 08ab 73696D5F 		.ascii	"sim_id\000"
 6217      696400
 6218              	.LASF28:
 6219 08b2 746D5F6D 		.ascii	"tm_mday\000"
 6219      64617900 
 6220              	.LASF57:
 6221 08ba 76616C69 		.ascii	"valid\000"
 6221      6400
 6222              	.LASF83:
 6223 08c0 70696E73 		.ascii	"pins_configure_active\000"
 6223      5F636F6E 
 6223      66696775 
 6223      72655F61 
 6223      63746976 
 6224              	.LASF142:
 6225 08d6 6D696E75 		.ascii	"minute\000"
 6225      746500
 6226              	.LASF14:
 6227 08dd 75696E74 		.ascii	"uint32_t\000"
 6227      33325F74 
 6227      00
 6228              	.LASF25:
 6229 08e6 746D5F73 		.ascii	"tm_sec\000"
 6229      656300
 6230              	.LASF164:
 6231 08ed 76616C76 		.ascii	"valve_enabled\000"
 6231      655F656E 
 6231      61626C65 
 6231      6400
 6232              	.LASF117:
 6233 08fb 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 6233      75706461 
 6233      7465645F 
 6233      70617261 
 6233      6D657465 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 141


 6234              	.LASF120:
 6235 091e 735F7361 		.ascii	"s_sample_freq\000"
 6235      6D706C65 
 6235      5F667265 
 6235      7100
 6236              	.LASF35:
 6237 092c 73746174 		.ascii	"status\000"
 6237      757300
 6238              	.LASF161:
 6239 0933 6C657665 		.ascii	"level_sensor_enabled\000"
 6239      6C5F7365 
 6239      6E736F72 
 6239      5F656E61 
 6239      626C6564 
 6240              	.LASF154:
 6241 0948 64617461 		.ascii	"dataPointsInStackDesired\000"
 6241      506F696E 
 6241      7473496E 
 6241      53746163 
 6241      6B446573 
 6242              	.LASF66:
 6243 0961 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 6243      73747265 
 6243      616D5F4C 
 6243      6576656C 
 6243      5F53656E 
 6244              	.LASF64:
 6245 097e 4170705F 		.ascii	"App_LED_freq\000"
 6245      4C45445F 
 6245      66726571 
 6245      00
 6246              	.LASF80:
 6247 098b 7379735F 		.ascii	"sys_settings_t\000"
 6247      73657474 
 6247      696E6773 
 6247      5F7400
 6248              	.LASF12:
 6249 099a 75696E74 		.ascii	"uint8_t\000"
 6249      385F7400 
 6250              	.LASF165:
 6251 09a2 76616C76 		.ascii	"valve_inbox\000"
 6251      655F696E 
 6251      626F7800 
 6252              	.LASF85:
 6253 09ae 61745F72 		.ascii	"at_ready\000"
 6253      65616479 
 6253      00
 6254              	.LASF86:
 6255 09b7 61747465 		.ascii	"attempts\000"
 6255      6D707473 
 6255      00
 6256              	.LASF72:
 6257 09c0 636F756E 		.ascii	"countDownType\000"
 6257      74446F77 
 6257      6E547970 
 6257      6500
 6258              	.LASF67:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc6i4nxI.s 			page 142


 6259 09ce 76616C76 		.ascii	"valve_freq\000"
 6259      655F6672 
 6259      657100
 6260              	.LASF87:
 6261 09d9 626F6F74 		.ascii	"boot_time\000"
 6261      5F74696D 
 6261      6500
 6262              	.LASF92:
 6263 09e3 65787065 		.ascii	"expected_response\000"
 6263      63746564 
 6263      5F726573 
 6263      706F6E73 
 6263      6500
 6264              	.LASF149:
 6265 09f5 6C6F636B 		.ascii	"lock_time\000"
 6265      5F74696D 
 6265      6500
 6266              	.LASF168:
 6267 09ff 68747470 		.ascii	"http_request\000"
 6267      5F726571 
 6267      75657374 
 6267      00
 6268              	.LASF84:
 6269 0a0c 6D6F6465 		.ascii	"modem_power_down\000"
 6269      6D5F706F 
 6269      7765725F 
 6269      646F776E 
 6269      00
 6270              	.LASF21:
 6271 0a1d 646F7562 		.ascii	"double\000"
 6271      6C6500
 6272              	.LASF167:
 6273 0a24 6170705F 		.ascii	"app_led_inbox\000"
 6273      6C65645F 
 6273      696E626F 
 6273      7800
 6274              	.LASF162:
 6275 0a32 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 6275      73747265 
 6275      616D5F6C 
 6275      6576656C 
 6275      5F73656E 
 6276              	.LASF131:
 6277 0a50 6170705F 		.ascii	"app_led_freq\000"
 6277      6C65645F 
 6277      66726571 
 6277      00
 6278              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
