ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.syntax unified
  20              		.global _printf_float
  21              		.thumb
  22              		.syntax unified
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,3,4
  28              		.comm	dataPointsInStack,2,2
  29              		.comm	dataPointsInStackDesired,2,2
  30              		.comm	data,6600,4
  31              		.comm	http_request,10000,4
  32              		.comm	http_body,10000,4
  33              		.comm	http_route,200,4
  34              		.comm	system_info,28,4
  35              		.comm	system_settings,104,4
  36              		.comm	alarmMeasure,6,4
  37              		.comm	timeToMeasure,1,1
  38              		.comm	alarmSync,6,4
  39              		.comm	timeToSync,1,1
  40              		.comm	timeToSycnRemoteParams,1,1
  41              		.comm	hey,1,1
  42              		.comm	uart_received_string,1024,4
  43              		.global	uart_string_index
  44              		.bss
  45              		.align	1
  46              		.type	uart_string_index, %object
  47              		.size	uart_string_index, 2
  48              	uart_string_index:
  49 0000 0000     		.space	2
  50              		.section	.text.isr_telit_rx,"ax",%progbits
  51              		.align	2
  52              		.global	isr_telit_rx
  53              		.thumb
  54              		.thumb_func
  55              		.type	isr_telit_rx, %function
  56              	isr_telit_rx:
  57              	.LFB64:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 2


  58              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** #include "debug.h"
   5:modem.c       **** #include "data.h"
   6:modem.c       **** #include <math.h>
   7:modem.c       **** #include <stdio.h>
   8:modem.c       **** 
   9:modem.c       **** char uart_received_string[1024];
  10:modem.c       **** int16 uart_string_index=0;
  11:modem.c       **** 
  12:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
  13:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  14:modem.c       **** 
  15:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 200 //seconds
  16:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  17:modem.c       **** 
  18:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  19:modem.c       **** 
  20:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  21:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  22:modem.c       **** CY_ISR(isr_telit_rx){      
  59              		.loc 1 22 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 98B5     		push	{r3, r4, r7, lr}
  64              		.cfi_def_cfa_offset 16
  65              		.cfi_offset 3, -16
  66              		.cfi_offset 4, -12
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 00AF     		add	r7, sp, #0
  70              		.cfi_def_cfa_register 7
  23:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  24:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  71              		.loc 1 24 0
  72 0004 12E0     		b	.L2
  73              	.L3:
  25:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  74              		.loc 1 25 0
  75 0006 0D4B     		ldr	r3, .L4
  76 0008 B3F90030 		ldrsh	r3, [r3]
  77 000c 1C46     		mov	r4, r3
  78 000e FFF7FEFF 		bl	UART_Telit_GetChar
  79 0012 0346     		mov	r3, r0
  80 0014 1A46     		mov	r2, r3
  81 0016 0A4B     		ldr	r3, .L4+4
  82 0018 1A55     		strb	r2, [r3, r4]
  26:modem.c       ****         uart_string_index++;
  83              		.loc 1 26 0
  84 001a 084B     		ldr	r3, .L4
  85 001c B3F90030 		ldrsh	r3, [r3]
  86 0020 9BB2     		uxth	r3, r3
  87 0022 0133     		adds	r3, r3, #1
  88 0024 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 3


  89 0026 1AB2     		sxth	r2, r3
  90 0028 044B     		ldr	r3, .L4
  91 002a 1A80     		strh	r2, [r3]	@ movhi
  92              	.L2:
  24:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  93              		.loc 1 24 0
  94 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
  95 0030 0346     		mov	r3, r0
  96 0032 012B     		cmp	r3, #1
  97 0034 E7D0     		beq	.L3
  27:modem.c       ****     }
  28:modem.c       **** 
  29:modem.c       **** }
  98              		.loc 1 29 0
  99 0036 00BF     		nop
 100 0038 98BD     		pop	{r3, r4, r7, pc}
 101              	.L5:
 102 003a 00BF     		.align	2
 103              	.L4:
 104 003c 00000000 		.word	uart_string_index
 105 0040 00000000 		.word	uart_received_string
 106              		.cfi_endproc
 107              	.LFE64:
 108              		.size	isr_telit_rx, .-isr_telit_rx
 109              		.section	.text.modem_initialize,"ax",%progbits
 110              		.align	2
 111              		.global	modem_initialize
 112              		.thumb
 113              		.thumb_func
 114              		.type	modem_initialize, %function
 115              	modem_initialize:
 116              	.LFB65:
  30:modem.c       **** 
  31:modem.c       **** // Initialize the modem
  32:modem.c       **** void modem_initialize(){
 117              		.loc 1 32 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121 0000 80B5     		push	{r7, lr}
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 7, -8
 124              		.cfi_offset 14, -4
 125 0002 00AF     		add	r7, sp, #0
 126              		.cfi_def_cfa_register 7
  33:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  34:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  35:modem.c       ****     pins_configure_inactive();
 127              		.loc 1 35 0
 128 0004 FFF7FEFF 		bl	pins_configure_inactive
  36:modem.c       ****     modem_state = 0;
 129              		.loc 1 36 0
 130 0008 154B     		ldr	r3, .L7
 131 000a 0022     		movs	r2, #0
 132 000c 1A70     		strb	r2, [r3]
  37:modem.c       ****     //initialize states
  38:modem.c       ****     modem_info.imei[0] = '\0';
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 4


 133              		.loc 1 38 0
 134 000e 154B     		ldr	r3, .L7+4
 135 0010 0022     		movs	r2, #0
 136 0012 83F82820 		strb	r2, [r3, #40]
  39:modem.c       ****     modem_info.model_id[0] = '\0';
 137              		.loc 1 39 0
 138 0016 134B     		ldr	r3, .L7+4
 139 0018 0022     		movs	r2, #0
 140 001a 1A75     		strb	r2, [r3, #20]
  40:modem.c       ****     modem_info.sim_id[0] = '\0';
 141              		.loc 1 40 0
 142 001c 114B     		ldr	r3, .L7+4
 143 001e 0022     		movs	r2, #0
 144 0020 1A70     		strb	r2, [r3]
  41:modem.c       ****     modem_stats.rxlev = 0;
 145              		.loc 1 41 0
 146 0022 114B     		ldr	r3, .L7+8
 147 0024 0022     		movs	r2, #0
 148 0026 1A60     		str	r2, [r3]
  42:modem.c       ****     modem_stats.ber = 0;
 149              		.loc 1 42 0
 150 0028 0F4B     		ldr	r3, .L7+8
 151 002a 0022     		movs	r2, #0
 152 002c 5A60     		str	r2, [r3, #4]
  43:modem.c       ****     modem_stats.rscp = 0;
 153              		.loc 1 43 0
 154 002e 0E4B     		ldr	r3, .L7+8
 155 0030 0022     		movs	r2, #0
 156 0032 9A60     		str	r2, [r3, #8]
  44:modem.c       ****     modem_stats.ecno = 0;
 157              		.loc 1 44 0
 158 0034 0C4B     		ldr	r3, .L7+8
 159 0036 0022     		movs	r2, #0
 160 0038 DA60     		str	r2, [r3, #12]
  45:modem.c       ****     modem_stats.rsrq = 0;
 161              		.loc 1 45 0
 162 003a 0B4B     		ldr	r3, .L7+8
 163 003c 0022     		movs	r2, #0
 164 003e 1A61     		str	r2, [r3, #16]
  46:modem.c       ****     modem_stats.rsrp = 0;
 165              		.loc 1 46 0
 166 0040 094B     		ldr	r3, .L7+8
 167 0042 0022     		movs	r2, #0
 168 0044 5A61     		str	r2, [r3, #20]
  47:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 169              		.loc 1 47 0
 170 0046 084B     		ldr	r3, .L7+8
 171 0048 0022     		movs	r2, #0
 172 004a DA61     		str	r2, [r3, #28]
  48:modem.c       ****     modem_stats.time_to_network_connect = 0;
 173              		.loc 1 48 0
 174 004c 064B     		ldr	r3, .L7+8
 175 004e 0022     		movs	r2, #0
 176 0050 9A61     		str	r2, [r3, #24]
  49:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  50:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  51:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 5


  52:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 177              		.loc 1 52 0
 178 0052 0021     		movs	r1, #0
 179 0054 4020     		movs	r0, #64
 180 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  53:modem.c       ****     
  54:modem.c       **** }
 181              		.loc 1 54 0
 182 005a 00BF     		nop
 183 005c 80BD     		pop	{r7, pc}
 184              	.L8:
 185 005e 00BF     		.align	2
 186              	.L7:
 187 0060 00000000 		.word	modem_state
 188 0064 00000000 		.word	modem_info
 189 0068 00000000 		.word	modem_stats
 190              		.cfi_endproc
 191              	.LFE65:
 192              		.size	modem_initialize, .-modem_initialize
 193              		.section	.text.pins_configure_inactive,"ax",%progbits
 194              		.align	2
 195              		.global	pins_configure_inactive
 196              		.thumb
 197              		.thumb_func
 198              		.type	pins_configure_inactive, %function
 199              	pins_configure_inactive:
 200              	.LFB66:
  55:modem.c       **** 
  56:modem.c       **** 
  57:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  58:modem.c       **** void pins_configure_inactive(){
 201              		.loc 1 58 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 00AF     		add	r7, sp, #0
 210              		.cfi_def_cfa_register 7
  59:modem.c       ****    
  60:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 211              		.loc 1 60 0
 212 0004 0020     		movs	r0, #0
 213 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  61:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 214              		.loc 1 61 0
 215 000a 0C20     		movs	r0, #12
 216 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  62:modem.c       **** 
  63:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 217              		.loc 1 63 0
 218 0010 0020     		movs	r0, #0
 219 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  64:modem.c       **** 
  65:modem.c       ****    // Pull down all of these, just in case (turns the off).
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 6


  66:modem.c       ****    Rx_Telit_Write(OFF); 
 220              		.loc 1 66 0
 221 0016 0020     		movs	r0, #0
 222 0018 FFF7FEFF 		bl	Rx_Telit_Write
  67:modem.c       ****    Tx_Telit_Write(OFF);
 223              		.loc 1 67 0
 224 001c 0020     		movs	r0, #0
 225 001e FFF7FEFF 		bl	Tx_Telit_Write
  68:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 226              		.loc 1 68 0
 227 0022 0020     		movs	r0, #0
 228 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  69:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 229              		.loc 1 69 0
 230 0028 0020     		movs	r0, #0
 231 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  70:modem.c       ****     
  71:modem.c       **** }
 232              		.loc 1 71 0
 233 002e 00BF     		nop
 234 0030 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE66:
 237              		.size	pins_configure_inactive, .-pins_configure_inactive
 238 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 239              		.align	2
 240              		.global	pins_configure_active
 241              		.thumb
 242              		.thumb_func
 243              		.type	pins_configure_active, %function
 244              	pins_configure_active:
 245              	.LFB67:
  72:modem.c       **** 
  73:modem.c       **** // Turns on power and configures all UART pin modes
  74:modem.c       **** void pins_configure_active(){
 246              		.loc 1 74 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250 0000 80B5     		push	{r7, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 0002 00AF     		add	r7, sp, #0
 255              		.cfi_def_cfa_register 7
  75:modem.c       ****     
  76:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 256              		.loc 1 76 0
 257 0004 0220     		movs	r0, #2
 258 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  77:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 259              		.loc 1 77 0
 260 000a 0120     		movs	r0, #1
 261 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  78:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 262              		.loc 1 78 0
 263 0010 0120     		movs	r0, #1
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 7


 264 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  79:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 265              		.loc 1 79 0
 266 0016 6420     		movs	r0, #100
 267 0018 FFF7FEFF 		bl	CyDelay
  80:modem.c       **** }
 268              		.loc 1 80 0
 269 001c 00BF     		nop
 270 001e 80BD     		pop	{r7, pc}
 271              		.cfi_endproc
 272              	.LFE67:
 273              		.size	pins_configure_active, .-pins_configure_active
 274              		.section	.rodata
 275              		.align	2
 276              	.LC0:
 277 0000 4F4B00   		.ascii	"OK\000"
 278 0003 00       		.align	2
 279              	.LC1:
 280 0004 41542353 		.ascii	"AT#SHDN\015\000"
 280      48444E0D 
 280      00
 281              		.section	.text.modem_power_down,"ax",%progbits
 282              		.align	2
 283              		.global	modem_power_down
 284              		.thumb
 285              		.thumb_func
 286              		.type	modem_power_down, %function
 287              	modem_power_down:
 288              	.LFB68:
  81:modem.c       **** 
  82:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  83:modem.c       **** void modem_power_down(){
 289              		.loc 1 83 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 00AF     		add	r7, sp, #0
 298              		.cfi_def_cfa_register 7
  84:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  85:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  86:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 299              		.loc 1 86 0
 300 0004 41F28832 		movw	r2, #5000
 301 0008 0A49     		ldr	r1, .L12
 302 000a 0B48     		ldr	r0, .L12+4
 303 000c FFF7FEFF 		bl	at_write_command
  87:modem.c       ****    
  88:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  89:modem.c       ****     modem_soft_power_cycle();
 304              		.loc 1 89 0
 305 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  90:modem.c       ****     CyDelay(1000u);
 306              		.loc 1 90 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 8


 307 0014 4FF47A70 		mov	r0, #1000
 308 0018 FFF7FEFF 		bl	CyDelay
  91:modem.c       ****     
  92:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 309              		.loc 1 92 0
 310 001c FFF7FEFF 		bl	UART_Telit_Stop
  93:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 311              		.loc 1 93 0
 312 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  94:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 313              		.loc 1 94 0
 314 0024 FFF7FEFF 		bl	pins_configure_inactive
  95:modem.c       ****     modem_state = MODEM_STATE_OFF;
 315              		.loc 1 95 0
 316 0028 044B     		ldr	r3, .L12+8
 317 002a 0022     		movs	r2, #0
 318 002c 1A70     		strb	r2, [r3]
  96:modem.c       ****     
  97:modem.c       **** }
 319              		.loc 1 97 0
 320 002e 00BF     		nop
 321 0030 80BD     		pop	{r7, pc}
 322              	.L13:
 323 0032 00BF     		.align	2
 324              	.L12:
 325 0034 00000000 		.word	.LC0
 326 0038 04000000 		.word	.LC1
 327 003c 00000000 		.word	modem_state
 328              		.cfi_endproc
 329              	.LFE68:
 330              		.size	modem_power_down, .-modem_power_down
 331              		.section	.rodata
 332 000d 000000   		.align	2
 333              	.LC2:
 334 0010 41544530 		.ascii	"ATE0\015\000"
 334      0D00
 335 0016 0000     		.align	2
 336              	.LC3:
 337 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 337      6D20626F 
 337      6F742074 
 337      696D653A 
 337      20256400 
 338              		.align	2
 339              	.LC4:
 340 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 340      6D207265 
 340      61647920 
 340      666F7220 
 340      41542063 
 341 005d 000000   		.align	2
 342              	.LC5:
 343 0060 4E6F2072 		.ascii	"No response from modem.\000"
 343      6573706F 
 343      6E736520 
 343      66726F6D 
 343      206D6F64 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 9


 344              		.section	.text.modem_power_up,"ax",%progbits
 345              		.align	2
 346              		.global	modem_power_up
 347              		.thumb
 348              		.thumb_func
 349              		.type	modem_power_up, %function
 350              	modem_power_up:
 351              	.LFB69:
  98:modem.c       **** 
  99:modem.c       **** // This puts all the modem pints into a state that won't leak power
 100:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
 101:modem.c       **** uint8 modem_power_up(){
 352              		.loc 1 101 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 8
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0000 80B5     		push	{r7, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0002 82B0     		sub	sp, sp, #8
 361              		.cfi_def_cfa_offset 16
 362 0004 00AF     		add	r7, sp, #0
 363              		.cfi_def_cfa_register 7
 102:modem.c       **** 
 103:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 364              		.loc 1 103 0
 365 0006 FFF7FEFF 		bl	pins_configure_active
 104:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 366              		.loc 1 104 0
 367 000a FFF7FEFF 		bl	UART_Telit_Start
 105:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 368              		.loc 1 105 0
 369 000e 2C48     		ldr	r0, .L27
 370 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 106:modem.c       **** 
 107:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 371              		.loc 1 107 0
 372 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 108:modem.c       ****     
 109:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 110:modem.c       ****     uint8 at_ready = 0;
 373              		.loc 1 110 0
 374 0018 0023     		movs	r3, #0
 375 001a FB71     		strb	r3, [r7, #7]
 111:modem.c       ****     uint8 attempts = 0;
 376              		.loc 1 111 0
 377 001c 0023     		movs	r3, #0
 378 001e 3B71     		strb	r3, [r7, #4]
 112:modem.c       ****     // Create variable boot_time of the current time stamp.
 113:modem.c       ****     long boot_time = getTimeStamp();
 379              		.loc 1 113 0
 380 0020 FFF7FEFF 		bl	getTimeStamp
 381 0024 3860     		str	r0, [r7]
 382              	.LBB2:
 114:modem.c       ****     
 115:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 10


 116:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 383              		.loc 1 116 0
 384 0026 0023     		movs	r3, #0
 385 0028 BB71     		strb	r3, [r7, #6]
 386 002a 1CE0     		b	.L15
 387              	.L22:
 388              	.LBB3:
 117:modem.c       ****         
 118:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 389              		.loc 1 118 0
 390 002c 0023     		movs	r3, #0
 391 002e 7B71     		strb	r3, [r7, #5]
 392 0030 0EE0     		b	.L16
 393              	.L19:
 119:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 120:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 394              		.loc 1 120 0
 395 0032 4FF47A72 		mov	r2, #1000
 396 0036 2349     		ldr	r1, .L27+4
 397 0038 2348     		ldr	r0, .L27+8
 398 003a FFF7FEFF 		bl	at_write_command
 399 003e 0346     		mov	r3, r0
 400 0040 002B     		cmp	r3, #0
 401 0042 02D0     		beq	.L17
 121:modem.c       ****                 at_ready = 1;
 402              		.loc 1 121 0
 403 0044 0123     		movs	r3, #1
 404 0046 FB71     		strb	r3, [r7, #7]
 122:modem.c       ****                 break;
 405              		.loc 1 122 0
 406 0048 05E0     		b	.L18
 407              	.L17:
 118:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 408              		.loc 1 118 0 discriminator 2
 409 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 410 004c 0133     		adds	r3, r3, #1
 411 004e 7B71     		strb	r3, [r7, #5]
 412              	.L16:
 118:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 413              		.loc 1 118 0 is_stmt 0 discriminator 1
 414 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 415 0052 132B     		cmp	r3, #19
 416 0054 EDD9     		bls	.L19
 417              	.L18:
 418              	.LBE3:
 123:modem.c       ****             }
 124:modem.c       ****         }
 125:modem.c       ****             
 126:modem.c       ****         if(at_ready == 1){
 419              		.loc 1 126 0 is_stmt 1
 420 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 421 0058 012B     		cmp	r3, #1
 422 005a 08D0     		beq	.L26
 127:modem.c       ****             break;
 128:modem.c       ****         }else{
 129:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 130:modem.c       ****             modem_soft_power_cycle();
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 11


 423              		.loc 1 130 0 discriminator 2
 424 005c FFF7FEFF 		bl	modem_soft_power_cycle
 116:modem.c       ****         
 425              		.loc 1 116 0 discriminator 2
 426 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 427 0062 0133     		adds	r3, r3, #1
 428 0064 BB71     		strb	r3, [r7, #6]
 429              	.L15:
 116:modem.c       ****         
 430              		.loc 1 116 0 is_stmt 0 discriminator 1
 431 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 432 0068 022B     		cmp	r3, #2
 433 006a DFD9     		bls	.L22
 434 006c 00E0     		b	.L21
 435              	.L26:
 127:modem.c       ****             break;
 436              		.loc 1 127 0 is_stmt 1
 437 006e 00BF     		nop
 438              	.L21:
 439              	.LBE2:
 131:modem.c       ****         }
 132:modem.c       ****     }
 133:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 134:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 440              		.loc 1 134 0
 441 0070 FFF7FEFF 		bl	getTimeStamp
 442 0074 0246     		mov	r2, r0
 443 0076 3B68     		ldr	r3, [r7]
 444 0078 D31A     		subs	r3, r2, r3
 445 007a 3B60     		str	r3, [r7]
 135:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 446              		.loc 1 135 0
 447 007c 3A68     		ldr	r2, [r7]
 448 007e 1349     		ldr	r1, .L27+12
 449 0080 0020     		movs	r0, #0
 450 0082 FFF7FEFF 		bl	printNotif
 136:modem.c       ****    
 137:modem.c       ****     if(at_ready == 1){
 451              		.loc 1 137 0
 452 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 453 0088 012B     		cmp	r3, #1
 454 008a 0AD1     		bne	.L23
 138:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 455              		.loc 1 138 0
 456 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 457 008e 1A46     		mov	r2, r3
 458 0090 0F49     		ldr	r1, .L27+16
 459 0092 0020     		movs	r0, #0
 460 0094 FFF7FEFF 		bl	printNotif
 139:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 461              		.loc 1 139 0
 462 0098 0E4B     		ldr	r3, .L27+20
 463 009a 0122     		movs	r2, #1
 464 009c 1A70     		strb	r2, [r3]
 140:modem.c       ****     }else{
 141:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 142:modem.c       ****         modem_state = MODEM_STATE_OFF;
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 12


 143:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 144:modem.c       ****         modem_power_down();
 145:modem.c       ****         return 0u;
 146:modem.c       ****     }
 147:modem.c       ****     return 1u;
 465              		.loc 1 147 0
 466 009e 0123     		movs	r3, #1
 467 00a0 09E0     		b	.L25
 468              	.L23:
 141:modem.c       ****         modem_state = MODEM_STATE_OFF;
 469              		.loc 1 141 0
 470 00a2 0D49     		ldr	r1, .L27+24
 471 00a4 0220     		movs	r0, #2
 472 00a6 FFF7FEFF 		bl	printNotif
 142:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 473              		.loc 1 142 0
 474 00aa 0A4B     		ldr	r3, .L27+20
 475 00ac 0022     		movs	r2, #0
 476 00ae 1A70     		strb	r2, [r3]
 144:modem.c       ****         return 0u;
 477              		.loc 1 144 0
 478 00b0 FFF7FEFF 		bl	modem_power_down
 145:modem.c       ****     }
 479              		.loc 1 145 0
 480 00b4 0023     		movs	r3, #0
 481              	.L25:
 148:modem.c       **** }
 482              		.loc 1 148 0
 483 00b6 1846     		mov	r0, r3
 484 00b8 0837     		adds	r7, r7, #8
 485              		.cfi_def_cfa_offset 8
 486 00ba BD46     		mov	sp, r7
 487              		.cfi_def_cfa_register 13
 488              		@ sp needed
 489 00bc 80BD     		pop	{r7, pc}
 490              	.L28:
 491 00be 00BF     		.align	2
 492              	.L27:
 493 00c0 00000000 		.word	isr_telit_rx
 494 00c4 00000000 		.word	.LC0
 495 00c8 10000000 		.word	.LC2
 496 00cc 18000000 		.word	.LC3
 497 00d0 2C000000 		.word	.LC4
 498 00d4 00000000 		.word	modem_state
 499 00d8 60000000 		.word	.LC5
 500              		.cfi_endproc
 501              	.LFE69:
 502              		.size	modem_power_up, .-modem_power_up
 503              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 504              		.align	2
 505              		.global	modem_soft_power_cycle
 506              		.thumb
 507              		.thumb_func
 508              		.type	modem_soft_power_cycle, %function
 509              	modem_soft_power_cycle:
 510              	.LFB70:
 149:modem.c       **** 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 13


 150:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 151:modem.c       **** void modem_soft_power_cycle(){
 511              		.loc 1 151 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515 0000 80B5     		push	{r7, lr}
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 7, -8
 518              		.cfi_offset 14, -4
 519 0002 00AF     		add	r7, sp, #0
 520              		.cfi_def_cfa_register 7
 152:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 521              		.loc 1 152 0
 522 0004 0120     		movs	r0, #1
 523 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 153:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 524              		.loc 1 153 0
 525 000a 4FF4FA60 		mov	r0, #2000
 526 000e FFF7FEFF 		bl	CyDelay
 154:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 527              		.loc 1 154 0
 528 0012 0020     		movs	r0, #0
 529 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 155:modem.c       ****     
 156:modem.c       **** }
 530              		.loc 1 156 0
 531 0018 00BF     		nop
 532 001a 80BD     		pop	{r7, pc}
 533              		.cfi_endproc
 534              	.LFE70:
 535              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 536              		.section	.text.uart_string_reset,"ax",%progbits
 537              		.align	2
 538              		.global	uart_string_reset
 539              		.thumb
 540              		.thumb_func
 541              		.type	uart_string_reset, %function
 542              	uart_string_reset:
 543              	.LFB71:
 157:modem.c       **** 
 158:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 159:modem.c       **** void uart_string_reset(){
 544              		.loc 1 159 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548 0000 80B5     		push	{r7, lr}
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 7, -8
 551              		.cfi_offset 14, -4
 552 0002 00AF     		add	r7, sp, #0
 553              		.cfi_def_cfa_register 7
 160:modem.c       ****     uart_string_index=0;
 554              		.loc 1 160 0
 555 0004 064B     		ldr	r3, .L31
 556 0006 0022     		movs	r2, #0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 14


 557 0008 1A80     		strh	r2, [r3]	@ movhi
 161:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 162:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 558              		.loc 1 162 0
 559 000a 4FF48062 		mov	r2, #1024
 560 000e 0021     		movs	r1, #0
 561 0010 0448     		ldr	r0, .L31+4
 562 0012 FFF7FEFF 		bl	memset
 163:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 164:modem.c       ****     UART_Telit_ClearRxBuffer();
 563              		.loc 1 164 0
 564 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 165:modem.c       **** }
 565              		.loc 1 165 0
 566 001a 00BF     		nop
 567 001c 80BD     		pop	{r7, pc}
 568              	.L32:
 569 001e 00BF     		.align	2
 570              	.L31:
 571 0020 00000000 		.word	uart_string_index
 572 0024 00000000 		.word	uart_received_string
 573              		.cfi_endproc
 574              	.LFE71:
 575              		.size	uart_string_reset, .-uart_string_reset
 576              		.section	.rodata
 577              		.align	2
 578              	.LC6:
 579 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 579      6D207365 
 579      6E742041 
 579      5420636F 
 579      6D6D616E 
 580              		.align	2
 581              	.LC7:
 582 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 582      6D205265 
 582      63656976 
 582      65642065 
 582      78706563 
 583 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 583      616E643A 
 583      2025730A 
 583      52656365 
 583      69766564 
 584 00f1 000000   		.align	2
 585              	.LC8:
 586 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 586      6D207265 
 586      71756972 
 586      65642025 
 586      64207472 
 587 0127 0A00     		.ascii	"\012\000"
 588 0129 000000   		.align	2
 589              	.LC9:
 590 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 590      64206E6F 
 590      74207772 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 15


 590      69746520 
 590      41542063 
 591 0159 00       		.ascii	"\000"
 592              		.section	.text.at_write_command,"ax",%progbits
 593              		.align	2
 594              		.global	at_write_command
 595              		.thumb
 596              		.thumb_func
 597              		.type	at_write_command, %function
 598              	at_write_command:
 599              	.LFB72:
 166:modem.c       **** 
 167:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 168:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 169:modem.c       **** // Sends commands to the modem
 170:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 600              		.loc 1 170 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 40
 603              		@ frame_needed = 1, uses_anonymous_args = 0
 604 0000 80B5     		push	{r7, lr}
 605              		.cfi_def_cfa_offset 8
 606              		.cfi_offset 7, -8
 607              		.cfi_offset 14, -4
 608 0002 8AB0     		sub	sp, sp, #40
 609              		.cfi_def_cfa_offset 48
 610 0004 00AF     		add	r7, sp, #0
 611              		.cfi_def_cfa_register 7
 612 0006 F860     		str	r0, [r7, #12]
 613 0008 B960     		str	r1, [r7, #8]
 614 000a 7A60     		str	r2, [r7, #4]
 171:modem.c       **** 
 172:modem.c       ****     uint32 at_attempt = 0;
 615              		.loc 1 172 0
 616 000c 0023     		movs	r3, #0
 617 000e 7B62     		str	r3, [r7, #36]
 173:modem.c       ****     
 174:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 618              		.loc 1 174 0
 619 0010 0023     		movs	r3, #0
 620 0012 7B62     		str	r3, [r7, #36]
 621 0014 46E0     		b	.L34
 622              	.L42:
 623              	.LBB4:
 175:modem.c       ****         
 176:modem.c       ****         char* compare_location;
 177:modem.c       ****         uint32_t delay=10;
 624              		.loc 1 177 0
 625 0016 0A23     		movs	r3, #10
 626 0018 FB61     		str	r3, [r7, #28]
 178:modem.c       ****         uint32_t i, interval=timeout/delay;        
 627              		.loc 1 178 0
 628 001a 7A68     		ldr	r2, [r7, #4]
 629 001c FB69     		ldr	r3, [r7, #28]
 630 001e B2FBF3F3 		udiv	r3, r2, r3
 631 0022 BB61     		str	r3, [r7, #24]
 179:modem.c       ****         
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 16


 180:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 181:modem.c       ****         uart_string_reset();
 632              		.loc 1 181 0
 633 0024 FFF7FEFF 		bl	uart_string_reset
 182:modem.c       ****         
 183:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 184:modem.c       ****         UART_Telit_PutString(commands);
 634              		.loc 1 184 0
 635 0028 F868     		ldr	r0, [r7, #12]
 636 002a FFF7FEFF 		bl	UART_Telit_PutString
 185:modem.c       ****         
 186:modem.c       ****         
 187:modem.c       ****         // If no timeout, no need to wait for response
 188:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 637              		.loc 1 188 0
 638 002e 7B68     		ldr	r3, [r7, #4]
 639 0030 002B     		cmp	r3, #0
 640 0032 06D1     		bne	.L35
 189:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 641              		.loc 1 189 0
 642 0034 FA68     		ldr	r2, [r7, #12]
 643 0036 1F49     		ldr	r1, .L43
 644 0038 0020     		movs	r0, #0
 645 003a FFF7FEFF 		bl	printNotif
 190:modem.c       ****             return 1u;
 646              		.loc 1 190 0
 647 003e 0123     		movs	r3, #1
 648 0040 34E0     		b	.L36
 649              	.L35:
 191:modem.c       ****         }
 192:modem.c       ****       
 193:modem.c       ****      
 194:modem.c       ****         for(i=0;i<interval;i++){ 
 650              		.loc 1 194 0
 651 0042 0023     		movs	r3, #0
 652 0044 3B62     		str	r3, [r7, #32]
 653 0046 20E0     		b	.L37
 654              	.L41:
 195:modem.c       ****             CyDelay((uint32) delay);
 655              		.loc 1 195 0
 656 0048 F869     		ldr	r0, [r7, #28]
 657 004a FFF7FEFF 		bl	CyDelay
 196:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 197:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 198:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 658              		.loc 1 198 0
 659 004e B968     		ldr	r1, [r7, #8]
 660 0050 1948     		ldr	r0, .L43+4
 661 0052 FFF7FEFF 		bl	strstr
 662 0056 7861     		str	r0, [r7, #20]
 199:modem.c       ****             if(compare_location!=NULL) {
 663              		.loc 1 199 0
 664 0058 7B69     		ldr	r3, [r7, #20]
 665 005a 002B     		cmp	r3, #0
 666 005c 12D0     		beq	.L38
 200:modem.c       ****                 if (at_attempt == 0){
 667              		.loc 1 200 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 17


 668 005e 7B6A     		ldr	r3, [r7, #36]
 669 0060 002B     		cmp	r3, #0
 670 0062 06D1     		bne	.L39
 201:modem.c       ****                     // we add \n for new line to make it easier to decipher
 202:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 671              		.loc 1 202 0
 672 0064 144B     		ldr	r3, .L43+4
 673 0066 FA68     		ldr	r2, [r7, #12]
 674 0068 1449     		ldr	r1, .L43+8
 675 006a 0020     		movs	r0, #0
 676 006c FFF7FEFF 		bl	printNotif
 677 0070 06E0     		b	.L40
 678              	.L39:
 203:modem.c       ****                 }else{
 204:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 679              		.loc 1 204 0
 680 0072 7B6A     		ldr	r3, [r7, #36]
 681 0074 5A1C     		adds	r2, r3, #1
 682 0076 104B     		ldr	r3, .L43+4
 683 0078 1149     		ldr	r1, .L43+12
 684 007a 0120     		movs	r0, #1
 685 007c FFF7FEFF 		bl	printNotif
 686              	.L40:
 205:modem.c       ****                  
 206:modem.c       ****                 }
 207:modem.c       ****                 return(1);
 687              		.loc 1 207 0
 688 0080 0123     		movs	r3, #1
 689 0082 13E0     		b	.L36
 690              	.L38:
 194:modem.c       ****             CyDelay((uint32) delay);
 691              		.loc 1 194 0 discriminator 2
 692 0084 3B6A     		ldr	r3, [r7, #32]
 693 0086 0133     		adds	r3, r3, #1
 694 0088 3B62     		str	r3, [r7, #32]
 695              	.L37:
 194:modem.c       ****             CyDelay((uint32) delay);
 696              		.loc 1 194 0 is_stmt 0 discriminator 1
 697 008a 3A6A     		ldr	r2, [r7, #32]
 698 008c BB69     		ldr	r3, [r7, #24]
 699 008e 9A42     		cmp	r2, r3
 700 0090 DAD3     		bcc	.L41
 208:modem.c       ****             }
 209:modem.c       ****             
 210:modem.c       ****         }  
 211:modem.c       ****         
 212:modem.c       ****         // Something went wrong, restart UART
 213:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 701              		.loc 1 213 0 is_stmt 1 discriminator 2
 702 0092 094B     		ldr	r3, .L43+4
 703 0094 FA68     		ldr	r2, [r7, #12]
 704 0096 0B49     		ldr	r1, .L43+16
 705 0098 0220     		movs	r0, #2
 706 009a FFF7FEFF 		bl	printNotif
 707              	.LBE4:
 174:modem.c       ****         
 708              		.loc 1 174 0 discriminator 2
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 18


 709 009e 7B6A     		ldr	r3, [r7, #36]
 710 00a0 0133     		adds	r3, r3, #1
 711 00a2 7B62     		str	r3, [r7, #36]
 712              	.L34:
 174:modem.c       ****         
 713              		.loc 1 174 0 is_stmt 0 discriminator 1
 714 00a4 7B6A     		ldr	r3, [r7, #36]
 715 00a6 022B     		cmp	r3, #2
 716 00a8 B5D9     		bls	.L42
 214:modem.c       ****       
 215:modem.c       ****     }
 216:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 217:modem.c       ****           
 218:modem.c       ****     return(0);    
 717              		.loc 1 218 0 is_stmt 1
 718 00aa 0023     		movs	r3, #0
 719              	.L36:
 219:modem.c       **** }
 720              		.loc 1 219 0
 721 00ac 1846     		mov	r0, r3
 722 00ae 2837     		adds	r7, r7, #40
 723              		.cfi_def_cfa_offset 8
 724 00b0 BD46     		mov	sp, r7
 725              		.cfi_def_cfa_register 13
 726              		@ sp needed
 727 00b2 80BD     		pop	{r7, pc}
 728              	.L44:
 729              		.align	2
 730              	.L43:
 731 00b4 78000000 		.word	.LC6
 732 00b8 00000000 		.word	uart_received_string
 733 00bc A4000000 		.word	.LC7
 734 00c0 F4000000 		.word	.LC8
 735 00c4 2C010000 		.word	.LC9
 736              		.cfi_endproc
 737              	.LFE72:
 738              		.size	at_write_command, .-at_write_command
 739              		.section	.rodata
 740 015a 0000     		.align	2
 741              	.LC10:
 742 015c 54455354 		.ascii	"TEST_MODEM\000"
 742      5F4D4F44 
 742      454D00
 743 0167 00       		.align	2
 744              	.LC11:
 745 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 745      65706F6E 
 745      73652066 
 745      726F6D20 
 745      6D6F6465 
 746 017f 00       		.align	2
 747              	.LC12:
 748 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 748      6D20636F 
 748      6E6E6563 
 748      74656420 
 748      746F206E 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 19


 749              		.section	.text.modem_test,"ax",%progbits
 750              		.align	2
 751              		.global	modem_test
 752              		.thumb
 753              		.thumb_func
 754              		.type	modem_test, %function
 755              	modem_test:
 756              	.LFB73:
 220:modem.c       **** 
 221:modem.c       **** // Test modem -- needs fleshed out
 222:modem.c       **** test_t modem_test(){
 757              		.loc 1 222 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 408
 760              		@ frame_needed = 1, uses_anonymous_args = 0
 761 0000 B0B5     		push	{r4, r5, r7, lr}
 762              		.cfi_def_cfa_offset 16
 763              		.cfi_offset 4, -16
 764              		.cfi_offset 5, -12
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 E6B0     		sub	sp, sp, #408
 768              		.cfi_def_cfa_offset 424
 769 0004 00AF     		add	r7, sp, #0
 770              		.cfi_def_cfa_register 7
 771 0006 3B1D     		adds	r3, r7, #4
 772 0008 1860     		str	r0, [r3]
 223:modem.c       ****     
 224:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 225:modem.c       ****     test.status = 0;
 773              		.loc 1 225 0
 774 000a 07F10C03 		add	r3, r7, #12
 775 000e 0022     		movs	r2, #0
 776 0010 83F88020 		strb	r2, [r3, #128]
 226:modem.c       ****     // Print test name and test reason
 227:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 777              		.loc 1 227 0
 778 0014 07F10C03 		add	r3, r7, #12
 779 0018 354A     		ldr	r2, .L53
 780 001a 07CA     		ldmia	r2, {r0, r1, r2}
 781 001c 03C3     		stmia	r3!, {r0, r1}
 782 001e 1A80     		strh	r2, [r3]	@ movhi
 783 0020 0233     		adds	r3, r3, #2
 784 0022 120C     		lsrs	r2, r2, #16
 785 0024 1A70     		strb	r2, [r3]
 228:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 786              		.loc 1 228 0
 787 0026 07F10C03 		add	r3, r7, #12
 788 002a 8133     		adds	r3, r3, #129
 789 002c 314A     		ldr	r2, .L53+4
 790 002e 1C46     		mov	r4, r3
 791 0030 1546     		mov	r5, r2
 792 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 793 0034 2060     		str	r0, [r4]	@ unaligned
 794 0036 6160     		str	r1, [r4, #4]	@ unaligned
 795 0038 A260     		str	r2, [r4, #8]	@ unaligned
 796 003a E360     		str	r3, [r4, #12]	@ unaligned
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 20


 797 003c 2868     		ldr	r0, [r5]	@ unaligned
 798 003e 2061     		str	r0, [r4, #16]	@ unaligned
 799 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 800 0042 AA79     		ldrb	r2, [r5, #6]
 801 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 802 0046 1346     		mov	r3, r2
 803 0048 A375     		strb	r3, [r4, #22]
 804              	.LBB5:
 229:modem.c       ****    
 230:modem.c       ****     //try the modem 60*100 (60 secs)
 231:modem.c       ****     for(int i = 0; i< 60; i++){
 805              		.loc 1 231 0
 806 004a 0023     		movs	r3, #0
 807 004c C7F89431 		str	r3, [r7, #404]
 808 0050 39E0     		b	.L46
 809              	.L51:
 232:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 233:modem.c       ****         modem_process_tasks();
 810              		.loc 1 233 0
 811 0052 FFF7FEFF 		bl	modem_process_tasks
 234:modem.c       ****          
 235:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 812              		.loc 1 235 0
 813 0056 FFF7FEFF 		bl	modem_get_state
 814 005a 0346     		mov	r3, r0
 815 005c 002B     		cmp	r3, #0
 816 005e 02D1     		bne	.L47
 236:modem.c       ****             // This puts all the modem points into a state that won't leak power
 237:modem.c       ****             modem_power_up();
 817              		.loc 1 237 0
 818 0060 FFF7FEFF 		bl	modem_power_up
 819 0064 27E0     		b	.L48
 820              	.L47:
 238:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 239:modem.c       ****             
 240:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 821              		.loc 1 240 0
 822 0066 FFF7FEFF 		bl	modem_get_state
 823 006a 0346     		mov	r3, r0
 824 006c 042B     		cmp	r3, #4
 825 006e 22D1     		bne	.L48
 826              	.LBB6:
 241:modem.c       ****         
 242:modem.c       ****         
 243:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 244:modem.c       ****         long network_time = modem_get_network_time();
 827              		.loc 1 244 0
 828 0070 FFF7FEFF 		bl	modem_get_network_time
 829 0074 C7F89001 		str	r0, [r7, #400]
 245:modem.c       ****         if(network_time != 0){
 830              		.loc 1 245 0
 831 0078 D7F89031 		ldr	r3, [r7, #400]
 832 007c 002B     		cmp	r3, #0
 833 007e 03D0     		beq	.L49
 246:modem.c       ****             setTime(network_time); // Set the system time 
 834              		.loc 1 246 0
 835 0080 D7F89001 		ldr	r0, [r7, #400]
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 21


 836 0084 FFF7FEFF 		bl	setTime
 837              	.L49:
 247:modem.c       ****         }
 248:modem.c       ****             
 249:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 838              		.loc 1 249 0
 839 0088 07F10C03 		add	r3, r7, #12
 840 008c 8133     		adds	r3, r3, #129
 841 008e 1A4A     		ldr	r2, .L53+8
 842 0090 1D46     		mov	r5, r3
 843 0092 1446     		mov	r4, r2
 844 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 845 0096 2860     		str	r0, [r5]	@ unaligned
 846 0098 6960     		str	r1, [r5, #4]	@ unaligned
 847 009a AA60     		str	r2, [r5, #8]	@ unaligned
 848 009c EB60     		str	r3, [r5, #12]	@ unaligned
 849 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 850 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 851 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 852 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 250:modem.c       ****         test.status = 1;
 853              		.loc 1 250 0
 854 00a6 07F10C03 		add	r3, r7, #12
 855 00aa 0122     		movs	r2, #1
 856 00ac 83F88020 		strb	r2, [r3, #128]
 251:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 252:modem.c       ****         modem_power_down();
 857              		.loc 1 252 0
 858 00b0 FFF7FEFF 		bl	modem_power_down
 253:modem.c       ****         break;
 859              		.loc 1 253 0
 860 00b4 0BE0     		b	.L50
 861              	.L48:
 862              	.LBE6:
 254:modem.c       ****         
 255:modem.c       ****       }
 256:modem.c       ****         CyDelay(100u);
 863              		.loc 1 256 0 discriminator 2
 864 00b6 6420     		movs	r0, #100
 865 00b8 FFF7FEFF 		bl	CyDelay
 231:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 866              		.loc 1 231 0 discriminator 2
 867 00bc D7F89431 		ldr	r3, [r7, #404]
 868 00c0 0133     		adds	r3, r3, #1
 869 00c2 C7F89431 		str	r3, [r7, #404]
 870              	.L46:
 231:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 871              		.loc 1 231 0 is_stmt 0 discriminator 1
 872 00c6 D7F89431 		ldr	r3, [r7, #404]
 873 00ca 3B2B     		cmp	r3, #59
 874 00cc C1DD     		ble	.L51
 875              	.L50:
 876              	.LBE5:
 257:modem.c       ****         
 258:modem.c       ****     }
 259:modem.c       ****     
 260:modem.c       ****     return test;
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 22


 877              		.loc 1 260 0 is_stmt 1
 878 00ce 3B1D     		adds	r3, r7, #4
 879 00d0 1A68     		ldr	r2, [r3]
 880 00d2 07F10C03 		add	r3, r7, #12
 881 00d6 1046     		mov	r0, r2
 882 00d8 1946     		mov	r1, r3
 883 00da 40F28113 		movw	r3, #385
 884 00de 1A46     		mov	r2, r3
 885 00e0 FFF7FEFF 		bl	memcpy
 261:modem.c       **** }
 886              		.loc 1 261 0
 887 00e4 3B1D     		adds	r3, r7, #4
 888 00e6 1868     		ldr	r0, [r3]
 889 00e8 07F5CC77 		add	r7, r7, #408
 890              		.cfi_def_cfa_offset 16
 891 00ec BD46     		mov	sp, r7
 892              		.cfi_def_cfa_register 13
 893              		@ sp needed
 894 00ee B0BD     		pop	{r4, r5, r7, pc}
 895              	.L54:
 896              		.align	2
 897              	.L53:
 898 00f0 5C010000 		.word	.LC10
 899 00f4 68010000 		.word	.LC11
 900 00f8 80010000 		.word	.LC12
 901              		.cfi_endproc
 902              	.LFE73:
 903              		.size	modem_test, .-modem_test
 904              		.section	.text.extract_string,"ax",%progbits
 905              		.align	2
 906              		.global	extract_string
 907              		.thumb
 908              		.thumb_func
 909              		.type	extract_string, %function
 910              	extract_string:
 911              	.LFB74:
 262:modem.c       **** 
 263:modem.c       **** // Extract string from the UART
 264:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 912              		.loc 1 264 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 24
 915              		@ frame_needed = 1, uses_anonymous_args = 0
 916 0000 80B5     		push	{r7, lr}
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 0002 86B0     		sub	sp, sp, #24
 921              		.cfi_def_cfa_offset 32
 922 0004 00AF     		add	r7, sp, #0
 923              		.cfi_def_cfa_register 7
 924 0006 F860     		str	r0, [r7, #12]
 925 0008 B960     		str	r1, [r7, #8]
 926 000a 7A60     		str	r2, [r7, #4]
 927 000c 3B60     		str	r3, [r7]
 265:modem.c       ****     
 266:modem.c       ****         char *a, *b;
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 23


 267:modem.c       ****   
 268:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 269:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 270:modem.c       ****         a = strstr(from,beginMarker);
 928              		.loc 1 270 0
 929 000e B968     		ldr	r1, [r7, #8]
 930 0010 F868     		ldr	r0, [r7, #12]
 931 0012 FFF7FEFF 		bl	strstr
 932 0016 7861     		str	r0, [r7, #20]
 271:modem.c       ****         if (a == NULL) {
 933              		.loc 1 271 0
 934 0018 7B69     		ldr	r3, [r7, #20]
 935 001a 002B     		cmp	r3, #0
 936 001c 01D1     		bne	.L56
 272:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 273:modem.c       ****             a = from;
 937              		.loc 1 273 0
 938 001e FB68     		ldr	r3, [r7, #12]
 939 0020 7B61     		str	r3, [r7, #20]
 940              	.L56:
 274:modem.c       ****         }
 275:modem.c       ****         // The strlen() function calculates the length of a given string.
 276:modem.c       ****         a += strlen(beginMarker);
 941              		.loc 1 276 0
 942 0022 B868     		ldr	r0, [r7, #8]
 943 0024 FFF7FEFF 		bl	strlen
 944 0028 0246     		mov	r2, r0
 945 002a 7B69     		ldr	r3, [r7, #20]
 946 002c 1344     		add	r3, r3, r2
 947 002e 7B61     		str	r3, [r7, #20]
 277:modem.c       ****         
 278:modem.c       ****         // - Find the end marking and offset by 1
 279:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 280:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 281:modem.c       ****         b = strstr(a,endMarker);
 948              		.loc 1 281 0
 949 0030 7968     		ldr	r1, [r7, #4]
 950 0032 7869     		ldr	r0, [r7, #20]
 951 0034 FFF7FEFF 		bl	strstr
 952 0038 3861     		str	r0, [r7, #16]
 282:modem.c       ****         if (b == NULL) {
 953              		.loc 1 282 0
 954 003a 3B69     		ldr	r3, [r7, #16]
 955 003c 002B     		cmp	r3, #0
 956 003e 06D1     		bne	.L57
 283:modem.c       ****             // Puts("Comma not found in uart_received_string");
 284:modem.c       ****             b=from+strlen(from);
 957              		.loc 1 284 0
 958 0040 F868     		ldr	r0, [r7, #12]
 959 0042 FFF7FEFF 		bl	strlen
 960 0046 0246     		mov	r2, r0
 961 0048 FB68     		ldr	r3, [r7, #12]
 962 004a 1344     		add	r3, r3, r2
 963 004c 3B61     		str	r3, [r7, #16]
 964              	.L57:
 285:modem.c       ****         }        
 286:modem.c       ****         
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 24


 287:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 288:modem.c       ****         strncpy(target,a,b-a);
 965              		.loc 1 288 0
 966 004e 3A69     		ldr	r2, [r7, #16]
 967 0050 7B69     		ldr	r3, [r7, #20]
 968 0052 D31A     		subs	r3, r2, r3
 969 0054 1A46     		mov	r2, r3
 970 0056 7969     		ldr	r1, [r7, #20]
 971 0058 3868     		ldr	r0, [r7]
 972 005a FFF7FEFF 		bl	strncpy
 289:modem.c       ****         target[b-a] = '\0';
 973              		.loc 1 289 0
 974 005e 3A69     		ldr	r2, [r7, #16]
 975 0060 7B69     		ldr	r3, [r7, #20]
 976 0062 D31A     		subs	r3, r2, r3
 977 0064 1A46     		mov	r2, r3
 978 0066 3B68     		ldr	r3, [r7]
 979 0068 1344     		add	r3, r3, r2
 980 006a 0022     		movs	r2, #0
 981 006c 1A70     		strb	r2, [r3]
 290:modem.c       ****         return 1u;
 982              		.loc 1 290 0
 983 006e 0123     		movs	r3, #1
 291:modem.c       ****         
 292:modem.c       **** }
 984              		.loc 1 292 0
 985 0070 1846     		mov	r0, r3
 986 0072 1837     		adds	r7, r7, #24
 987              		.cfi_def_cfa_offset 8
 988 0074 BD46     		mov	sp, r7
 989              		.cfi_def_cfa_register 13
 990              		@ sp needed
 991 0076 80BD     		pop	{r7, pc}
 992              		.cfi_endproc
 993              	.LFE74:
 994              		.size	extract_string, .-extract_string
 995              		.section	.rodata
 996              		.align	2
 997              	.LC13:
 998 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 998      20746F20 
 998      636F6E6E 
 998      65637420 
 998      746F206E 
 999 01c3 00       		.align	2
 1000              	.LC14:
 1001 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1001      6D207469 
 1001      6D656420 
 1001      6F757420 
 1001      6F6E206E 
 1002 01e7 00       		.align	2
 1003              	.LC15:
 1004 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1004      69726564 
 1004      20495020 
 1004      61646472 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 25


 1004      6573733A 
 1005              		.align	2
 1006              	.LC16:
 1007 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1007      6D207469 
 1007      6D656420 
 1007      6F757420 
 1007      6F6E2049 
 1008              		.section	.text.modem_process_tasks,"ax",%progbits
 1009              		.align	2
 1010              		.global	modem_process_tasks
 1011              		.thumb
 1012              		.thumb_func
 1013              		.type	modem_process_tasks, %function
 1014              	modem_process_tasks:
 1015              	.LFB75:
 293:modem.c       **** 
 294:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 295:modem.c       **** uint8 modem_process_tasks(){
 1016              		.loc 1 295 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 8
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020 0000 80B5     		push	{r7, lr}
 1021              		.cfi_def_cfa_offset 8
 1022              		.cfi_offset 7, -8
 1023              		.cfi_offset 14, -4
 1024 0002 82B0     		sub	sp, sp, #8
 1025              		.cfi_def_cfa_offset 16
 1026 0004 00AF     		add	r7, sp, #0
 1027              		.cfi_def_cfa_register 7
 296:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 297:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1028              		.loc 1 297 0
 1029 0006 474B     		ldr	r3, .L73
 1030 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1031 000a 012B     		cmp	r3, #1
 1032 000c 0BD1     		bne	.L60
 298:modem.c       ****         
 299:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1033              		.loc 1 299 0
 1034 000e FFF7FEFF 		bl	getTimeStamp
 1035 0012 0246     		mov	r2, r0
 1036 0014 444B     		ldr	r3, .L73+4
 1037 0016 1A60     		str	r2, [r3]
 300:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1038              		.loc 1 300 0
 1039 0018 FFF7FEFF 		bl	modem_configure_settings
 301:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1040              		.loc 1 301 0
 1041 001c 414B     		ldr	r3, .L73
 1042 001e 0222     		movs	r2, #2
 1043 0020 1A70     		strb	r2, [r3]
 302:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1044              		.loc 1 302 0
 1045 0022 0123     		movs	r3, #1
 1046 0024 79E0     		b	.L61
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 26


 1047              	.L60:
 303:modem.c       ****         
 304:modem.c       ****     }
 305:modem.c       ****     // Else if modem state is "waiting for network" 
 306:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1048              		.loc 1 306 0
 1049 0026 3F4B     		ldr	r3, .L73
 1050 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 002a 022B     		cmp	r3, #2
 1052 002c 46D1     		bne	.L62
 1053              	.LBB7:
 307:modem.c       ****         // Check if modem has a good cell signal each second for up to a minute
 308:modem.c       ****        for(uint8 i=0;i<60;i++){
 1054              		.loc 1 308 0
 1055 002e 0023     		movs	r3, #0
 1056 0030 FB71     		strb	r3, [r7, #7]
 1057 0032 10E0     		b	.L63
 1058              	.L66:
 309:modem.c       ****             // Get cell network stats
 310:modem.c       ****             get_cell_network_stats();
 1059              		.loc 1 310 0
 1060 0034 FFF7FEFF 		bl	get_cell_network_stats
 311:modem.c       ****             // If cell signal (rsrp) is strong enough, break and connect to the network
 312:modem.c       ****             // Otherwise, keep checking rsrp
 313:modem.c       ****             if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1061              		.loc 1 313 0
 1062 0038 3C4B     		ldr	r3, .L73+8
 1063 003a 5B69     		ldr	r3, [r3, #20]
 1064 003c 1A2B     		cmp	r3, #26
 1065 003e 03DD     		ble	.L64
 1066              		.loc 1 313 0 is_stmt 0 discriminator 1
 1067 0040 3A4B     		ldr	r3, .L73+8
 1068 0042 5B69     		ldr	r3, [r3, #20]
 1069 0044 FF2B     		cmp	r3, #255
 1070 0046 0AD1     		bne	.L72
 1071              	.L64:
 314:modem.c       ****                 break;
 315:modem.c       ****             }
 316:modem.c       ****             // Delay for 1 second
 317:modem.c       ****             CyDelay(1000u);
 1072              		.loc 1 317 0 is_stmt 1 discriminator 2
 1073 0048 4FF47A70 		mov	r0, #1000
 1074 004c FFF7FEFF 		bl	CyDelay
 308:modem.c       ****             // Get cell network stats
 1075              		.loc 1 308 0 discriminator 2
 1076 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1077 0052 0133     		adds	r3, r3, #1
 1078 0054 FB71     		strb	r3, [r7, #7]
 1079              	.L63:
 308:modem.c       ****             // Get cell network stats
 1080              		.loc 1 308 0 is_stmt 0 discriminator 1
 1081 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1082 0058 3B2B     		cmp	r3, #59
 1083 005a EBD9     		bls	.L66
 1084 005c 00E0     		b	.L65
 1085              	.L72:
 314:modem.c       ****                 break;
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 27


 1086              		.loc 1 314 0 is_stmt 1
 1087 005e 00BF     		nop
 1088              	.L65:
 1089              	.LBE7:
 318:modem.c       ****         }
 319:modem.c       ****         
 320:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 321:modem.c       ****         if(is_connected_to_cell_network()){
 1090              		.loc 1 321 0
 1091 0060 FFF7FEFF 		bl	is_connected_to_cell_network
 1092 0064 0346     		mov	r3, r0
 1093 0066 002B     		cmp	r3, #0
 1094 0068 15D0     		beq	.L67
 322:modem.c       ****       
 323:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1095              		.loc 1 323 0
 1096 006a FFF7FEFF 		bl	getTimeStamp
 1097 006e 0246     		mov	r2, r0
 1098 0070 2D4B     		ldr	r3, .L73+4
 1099 0072 1B68     		ldr	r3, [r3]
 1100 0074 D31A     		subs	r3, r2, r3
 1101 0076 2D4A     		ldr	r2, .L73+8
 1102 0078 9361     		str	r3, [r2, #24]
 324:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1103              		.loc 1 324 0
 1104 007a 2C4B     		ldr	r3, .L73+8
 1105 007c 9B69     		ldr	r3, [r3, #24]
 1106 007e 1A46     		mov	r2, r3
 1107 0080 2B49     		ldr	r1, .L73+12
 1108 0082 0020     		movs	r0, #0
 1109 0084 FFF7FEFF 		bl	printNotif
 325:modem.c       ****                                             modem_stats.time_to_network_connect);
 326:modem.c       ****             get_cell_network_stats(); // Get cell network stats
 1110              		.loc 1 326 0
 1111 0088 FFF7FEFF 		bl	get_cell_network_stats
 327:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1112              		.loc 1 327 0
 1113 008c FFF7FEFF 		bl	set_up_internet_connection
 328:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1114              		.loc 1 328 0
 1115 0090 244B     		ldr	r3, .L73
 1116 0092 0322     		movs	r2, #3
 1117 0094 1A70     		strb	r2, [r3]
 1118              	.L67:
 329:modem.c       ****         }
 330:modem.c       **** 
 331:modem.c       ****         //power off if we times out shold only take ~30 secs to connect to network
 332:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1119              		.loc 1 332 0
 1120 0096 FFF7FEFF 		bl	getTimeStamp
 1121 009a 0246     		mov	r2, r0
 1122 009c 224B     		ldr	r3, .L73+4
 1123 009e 1B68     		ldr	r3, [r3]
 1124 00a0 D31A     		subs	r3, r2, r3
 1125 00a2 C82B     		cmp	r3, #200
 1126 00a4 08DD     		ble	.L68
 333:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 28


 1127              		.loc 1 333 0
 1128 00a6 1F4B     		ldr	r3, .L73
 1129 00a8 0022     		movs	r2, #0
 1130 00aa 1A70     		strb	r2, [r3]
 334:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1131              		.loc 1 334 0
 1132 00ac FFF7FEFF 		bl	modem_power_down
 335:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1133              		.loc 1 335 0
 1134 00b0 2049     		ldr	r1, .L73+16
 1135 00b2 0220     		movs	r0, #2
 1136 00b4 FFF7FEFF 		bl	printNotif
 1137              	.L68:
 336:modem.c       ****             
 337:modem.c       ****         }
 338:modem.c       ****         
 339:modem.c       ****         return 0u;//ok to hand off to sleep
 1138              		.loc 1 339 0
 1139 00b8 0023     		movs	r3, #0
 1140 00ba 2EE0     		b	.L61
 1141              	.L62:
 340:modem.c       ****         
 341:modem.c       ****     // Else if modem state is "waiting for IP"
 342:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1142              		.loc 1 342 0
 1143 00bc 194B     		ldr	r3, .L73
 1144 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1145 00c0 032B     		cmp	r3, #3
 1146 00c2 29D1     		bne	.L69
 343:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 344:modem.c       ****         if(is_connected_to_internet()){
 1147              		.loc 1 344 0
 1148 00c4 FFF7FEFF 		bl	is_connected_to_internet
 1149 00c8 0346     		mov	r3, r0
 1150 00ca 002B     		cmp	r3, #0
 1151 00cc 11D0     		beq	.L70
 345:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1152              		.loc 1 345 0
 1153 00ce 154B     		ldr	r3, .L73
 1154 00d0 0422     		movs	r2, #4
 1155 00d2 1A70     		strb	r2, [r3]
 346:modem.c       ****             // Save/print time to acquire IP address
 347:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1156              		.loc 1 347 0
 1157 00d4 FFF7FEFF 		bl	getTimeStamp
 1158 00d8 0246     		mov	r2, r0
 1159 00da 134B     		ldr	r3, .L73+4
 1160 00dc 1B68     		ldr	r3, [r3]
 1161 00de D31A     		subs	r3, r2, r3
 1162 00e0 124A     		ldr	r2, .L73+8
 1163 00e2 D361     		str	r3, [r2, #28]
 348:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1164              		.loc 1 348 0
 1165 00e4 114B     		ldr	r3, .L73+8
 1166 00e6 DB69     		ldr	r3, [r3, #28]
 1167 00e8 1A46     		mov	r2, r3
 1168 00ea 1349     		ldr	r1, .L73+20
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 29


 1169 00ec 0020     		movs	r0, #0
 1170 00ee FFF7FEFF 		bl	printNotif
 1171              	.L70:
 349:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 350:modem.c       ****         }
 351:modem.c       ****         
 352:modem.c       ****         // Power off if we times out shold only take ~30 secs to connect to network
 353:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1172              		.loc 1 353 0
 1173 00f2 FFF7FEFF 		bl	getTimeStamp
 1174 00f6 0246     		mov	r2, r0
 1175 00f8 0B4B     		ldr	r3, .L73+4
 1176 00fa 1B68     		ldr	r3, [r3]
 1177 00fc D31A     		subs	r3, r2, r3
 1178 00fe E62B     		cmp	r3, #230
 1179 0100 08DD     		ble	.L71
 354:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1180              		.loc 1 354 0
 1181 0102 084B     		ldr	r3, .L73
 1182 0104 0022     		movs	r2, #0
 1183 0106 1A70     		strb	r2, [r3]
 355:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1184              		.loc 1 355 0
 1185 0108 FFF7FEFF 		bl	modem_power_down
 356:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1186              		.loc 1 356 0
 1187 010c 0B49     		ldr	r1, .L73+24
 1188 010e 0220     		movs	r0, #2
 1189 0110 FFF7FEFF 		bl	printNotif
 1190              	.L71:
 357:modem.c       ****       
 358:modem.c       ****         }
 359:modem.c       ****         return 0u;//ok to hand off to sleep
 1191              		.loc 1 359 0
 1192 0114 0023     		movs	r3, #0
 1193 0116 00E0     		b	.L61
 1194              	.L69:
 360:modem.c       ****     }
 361:modem.c       ****     
 362:modem.c       ****     return 0u;
 1195              		.loc 1 362 0
 1196 0118 0023     		movs	r3, #0
 1197              	.L61:
 363:modem.c       ****     
 364:modem.c       **** }
 1198              		.loc 1 364 0
 1199 011a 1846     		mov	r0, r3
 1200 011c 0837     		adds	r7, r7, #8
 1201              		.cfi_def_cfa_offset 8
 1202 011e BD46     		mov	sp, r7
 1203              		.cfi_def_cfa_register 13
 1204              		@ sp needed
 1205 0120 80BD     		pop	{r7, pc}
 1206              	.L74:
 1207 0122 00BF     		.align	2
 1208              	.L73:
 1209 0124 00000000 		.word	modem_state
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 30


 1210 0128 00000000 		.word	modem_start_time_stamp
 1211 012c 00000000 		.word	modem_stats
 1212 0130 9C010000 		.word	.LC13
 1213 0134 C4010000 		.word	.LC14
 1214 0138 E8010000 		.word	.LC15
 1215 013c 08020000 		.word	.LC16
 1216              		.cfi_endproc
 1217              	.LFE75:
 1218              		.size	modem_process_tasks, .-modem_process_tasks
 1219              		.section	.rodata
 1220 022f 00       		.align	2
 1221              	.LC17:
 1222 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1222      6B696E67 
 1222      2041542B 
 1222      43524547 
 1222      3F00
 1223 0242 0000     		.align	2
 1224              	.LC18:
 1225 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1225      5245473F 
 1225      0D00
 1226 024e 0000     		.align	2
 1227              	.LC19:
 1228 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1228      61637469 
 1228      6E672073 
 1228      7472696E 
 1228      67204154 
 1229 026b 00       		.align	2
 1230              	.LC20:
 1231 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1231      5F726563 
 1231      65697665 
 1231      645F7374 
 1231      72696E67 
 1232 0285 000000   		.align	2
 1233              	.LC21:
 1234 0288 0D00     		.ascii	"\015\000"
 1235 028a 0000     		.align	2
 1236              	.LC22:
 1237 028c 3A2000   		.ascii	": \000"
 1238 028f 00       		.align	2
 1239              	.LC23:
 1240 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1240      73746572 
 1240      65642074 
 1240      6F206E65 
 1240      74776F72 
 1241              		.align	2
 1242              	.LC24:
 1243 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1243      20657874 
 1243      72616369 
 1243      6E672073 
 1243      7472696E 
 1244 02cf 00       		.align	2
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 31


 1245              	.LC25:
 1246 02d0 302C3100 		.ascii	"0,1\000"
 1247              		.align	2
 1248              	.LC26:
 1249 02d4 302C3500 		.ascii	"0,5\000"
 1250              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1251              		.align	2
 1252              		.global	is_connected_to_cell_network
 1253              		.thumb
 1254              		.thumb_func
 1255              		.type	is_connected_to_cell_network, %function
 1256              	is_connected_to_cell_network:
 1257              	.LFB76:
 365:modem.c       **** 
 366:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 367:modem.c       **** uint8 is_connected_to_cell_network(){
 1258              		.loc 1 367 0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 16
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262 0000 80B5     		push	{r7, lr}
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266 0002 84B0     		sub	sp, sp, #16
 1267              		.cfi_def_cfa_offset 24
 1268 0004 00AF     		add	r7, sp, #0
 1269              		.cfi_def_cfa_register 7
 368:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 369:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1270              		.loc 1 369 0
 1271 0006 2049     		ldr	r1, .L80
 1272 0008 0020     		movs	r0, #0
 1273 000a FFF7FEFF 		bl	printNotif
 370:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 371:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1274              		.loc 1 371 0
 1275 000e 4FF4FA62 		mov	r2, #2000
 1276 0012 1E49     		ldr	r1, .L80+4
 1277 0014 1E48     		ldr	r0, .L80+8
 1278 0016 FFF7FEFF 		bl	at_write_command
 1279 001a 0346     		mov	r3, r0
 1280 001c FB73     		strb	r3, [r7, #15]
 372:modem.c       ****     
 373:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1281              		.loc 1 373 0
 1282 001e 1D49     		ldr	r1, .L80+12
 1283 0020 0020     		movs	r0, #0
 1284 0022 FFF7FEFF 		bl	printNotif
 374:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1285              		.loc 1 374 0
 1286 0026 1C4A     		ldr	r2, .L80+16
 1287 0028 1C49     		ldr	r1, .L80+20
 1288 002a 0020     		movs	r0, #0
 1289 002c FFF7FEFF 		bl	printNotif
 375:modem.c       ****     
 376:modem.c       ****     // If the modem has a status
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 32


 377:modem.c       ****     if(status){
 1290              		.loc 1 377 0
 1291 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1292 0032 002B     		cmp	r3, #0
 1293 0034 23D0     		beq	.L76
 1294              	.LBB8:
 378:modem.c       ****         // Create a character array of length 10 called creg
 379:modem.c       ****         char creg[10];
 380:modem.c       ****         creg[0] = '\0';
 1295              		.loc 1 380 0
 1296 0036 0023     		movs	r3, #0
 1297 0038 3B71     		strb	r3, [r7, #4]
 381:modem.c       ****         // Extract string from the UART
 382:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1298              		.loc 1 382 0
 1299 003a 3B1D     		adds	r3, r7, #4
 1300 003c 184A     		ldr	r2, .L80+24
 1301 003e 1949     		ldr	r1, .L80+28
 1302 0040 1548     		ldr	r0, .L80+16
 1303 0042 FFF7FEFF 		bl	extract_string
 383:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1304              		.loc 1 383 0
 1305 0046 3B1D     		adds	r3, r7, #4
 1306 0048 1A46     		mov	r2, r3
 1307 004a 1749     		ldr	r1, .L80+32
 1308 004c 0020     		movs	r0, #0
 1309 004e FFF7FEFF 		bl	printNotif
 384:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1310              		.loc 1 384 0
 1311 0052 1649     		ldr	r1, .L80+36
 1312 0054 0020     		movs	r0, #0
 1313 0056 FFF7FEFF 		bl	printNotif
 385:modem.c       ****     
 386:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 387:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1314              		.loc 1 387 0
 1315 005a 3B1D     		adds	r3, r7, #4
 1316 005c 1449     		ldr	r1, .L80+40
 1317 005e 1846     		mov	r0, r3
 1318 0060 FFF7FEFF 		bl	strstr
 1319 0064 0346     		mov	r3, r0
 1320 0066 002B     		cmp	r3, #0
 1321 0068 07D1     		bne	.L77
 1322              		.loc 1 387 0 is_stmt 0 discriminator 1
 1323 006a 3B1D     		adds	r3, r7, #4
 1324 006c 1149     		ldr	r1, .L80+44
 1325 006e 1846     		mov	r0, r3
 1326 0070 FFF7FEFF 		bl	strstr
 1327 0074 0346     		mov	r3, r0
 1328 0076 002B     		cmp	r3, #0
 1329 0078 01D0     		beq	.L76
 1330              	.L77:
 388:modem.c       ****             //time_network_connect = getTimeStamp();
 389:modem.c       ****             return 1u;
 1331              		.loc 1 389 0 is_stmt 1
 1332 007a 0123     		movs	r3, #1
 1333 007c 00E0     		b	.L79
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 33


 1334              	.L76:
 1335              	.LBE8:
 390:modem.c       ****         }
 391:modem.c       ****     }
 392:modem.c       ****     // If the modem doesn't have a status, return 0u
 393:modem.c       ****     return 0u;
 1336              		.loc 1 393 0
 1337 007e 0023     		movs	r3, #0
 1338              	.L79:
 394:modem.c       ****         
 395:modem.c       **** }
 1339              		.loc 1 395 0
 1340 0080 1846     		mov	r0, r3
 1341 0082 1037     		adds	r7, r7, #16
 1342              		.cfi_def_cfa_offset 8
 1343 0084 BD46     		mov	sp, r7
 1344              		.cfi_def_cfa_register 13
 1345              		@ sp needed
 1346 0086 80BD     		pop	{r7, pc}
 1347              	.L81:
 1348              		.align	2
 1349              	.L80:
 1350 0088 30020000 		.word	.LC17
 1351 008c 00000000 		.word	.LC0
 1352 0090 44020000 		.word	.LC18
 1353 0094 50020000 		.word	.LC19
 1354 0098 00000000 		.word	uart_received_string
 1355 009c 6C020000 		.word	.LC20
 1356 00a0 88020000 		.word	.LC21
 1357 00a4 8C020000 		.word	.LC22
 1358 00a8 90020000 		.word	.LC23
 1359 00ac B0020000 		.word	.LC24
 1360 00b0 D0020000 		.word	.LC25
 1361 00b4 D4020000 		.word	.LC26
 1362              		.cfi_endproc
 1363              	.LFE76:
 1364              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1365              		.section	.rodata
 1366              		.align	2
 1367              	.LC27:
 1368 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1368      47414354 
 1368      3D312C31 
 1368      0D0A00
 1369              		.section	.text.set_up_internet_connection,"ax",%progbits
 1370              		.align	2
 1371              		.global	set_up_internet_connection
 1372              		.thumb
 1373              		.thumb_func
 1374              		.type	set_up_internet_connection, %function
 1375              	set_up_internet_connection:
 1376              	.LFB77:
 396:modem.c       **** 
 397:modem.c       **** // Connect the modem to the internet
 398:modem.c       **** void set_up_internet_connection(){
 1377              		.loc 1 398 0
 1378              		.cfi_startproc
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 34


 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 1, uses_anonymous_args = 0
 1381 0000 80B5     		push	{r7, lr}
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 7, -8
 1384              		.cfi_offset 14, -4
 1385 0002 00AF     		add	r7, sp, #0
 1386              		.cfi_def_cfa_register 7
 399:modem.c       ****     
 400:modem.c       ****     //port 3
 401:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 402:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 403:modem.c       ****     
 404:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 405:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 406:modem.c       ****     // <cid>,<stat>
 407:modem.c       ****    
 408:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 409:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1387              		.loc 1 409 0
 1388 0004 4FF47A72 		mov	r2, #1000
 1389 0008 0249     		ldr	r1, .L83
 1390 000a 0348     		ldr	r0, .L83+4
 1391 000c FFF7FEFF 		bl	at_write_command
 410:modem.c       ****     
 411:modem.c       **** }
 1392              		.loc 1 411 0
 1393 0010 00BF     		nop
 1394 0012 80BD     		pop	{r7, pc}
 1395              	.L84:
 1396              		.align	2
 1397              	.L83:
 1398 0014 00000000 		.word	.LC0
 1399 0018 D8020000 		.word	.LC27
 1400              		.cfi_endproc
 1401              	.LFE77:
 1402              		.size	set_up_internet_connection, .-set_up_internet_connection
 1403              		.section	.rodata
 1404 02e7 00       		.align	2
 1405              	.LC28:
 1406 02e8 312C3100 		.ascii	"1,1\000"
 1407              		.align	2
 1408              	.LC29:
 1409 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1409      47414354 
 1409      3F0D00
 1410              		.section	.text.is_connected_to_internet,"ax",%progbits
 1411              		.align	2
 1412              		.global	is_connected_to_internet
 1413              		.thumb
 1414              		.thumb_func
 1415              		.type	is_connected_to_internet, %function
 1416              	is_connected_to_internet:
 1417              	.LFB78:
 412:modem.c       **** 
 413:modem.c       **** // Checks if the modem is connected to the internet
 414:modem.c       **** uint8 is_connected_to_internet(){
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 35


 1418              		.loc 1 414 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 0
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422 0000 80B5     		push	{r7, lr}
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 00AF     		add	r7, sp, #0
 1427              		.cfi_def_cfa_register 7
 415:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 416:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 417:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 418:modem.c       ****     // Check for 3,1 if Verizon 
 419:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1428              		.loc 1 419 0
 1429 0004 4FF4FA62 		mov	r2, #2000
 1430 0008 0549     		ldr	r1, .L88
 1431 000a 0648     		ldr	r0, .L88+4
 1432 000c FFF7FEFF 		bl	at_write_command
 1433 0010 0346     		mov	r3, r0
 1434 0012 002B     		cmp	r3, #0
 1435 0014 01D0     		beq	.L86
 420:modem.c       ****         return 1u;
 1436              		.loc 1 420 0
 1437 0016 0123     		movs	r3, #1
 1438 0018 00E0     		b	.L87
 1439              	.L86:
 421:modem.c       ****     }
 422:modem.c       ****     return 0u;  
 1440              		.loc 1 422 0
 1441 001a 0023     		movs	r3, #0
 1442              	.L87:
 423:modem.c       **** }
 1443              		.loc 1 423 0
 1444 001c 1846     		mov	r0, r3
 1445 001e 80BD     		pop	{r7, pc}
 1446              	.L89:
 1447              		.align	2
 1448              	.L88:
 1449 0020 E8020000 		.word	.LC28
 1450 0024 EC020000 		.word	.LC29
 1451              		.cfi_endproc
 1452              	.LFE78:
 1453              		.size	is_connected_to_internet, .-is_connected_to_internet
 1454              		.section	.rodata
 1455 02f7 00       		.align	2
 1456              	.LC30:
 1457 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1457      4553510D 
 1457      00
 1458 0301 000000   		.align	2
 1459              	.LC31:
 1460 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1460      4553513A 
 1460      2025642C 
 1460      25642C25 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 36


 1460      642C2564 
 1461              		.section	.text.get_cell_network_stats,"ax",%progbits
 1462              		.align	2
 1463              		.global	get_cell_network_stats
 1464              		.thumb
 1465              		.thumb_func
 1466              		.type	get_cell_network_stats, %function
 1467              	get_cell_network_stats:
 1468              	.LFB79:
 424:modem.c       **** 
 425:modem.c       **** void get_cell_network_stats(){
 1469              		.loc 1 425 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 8
 1472              		@ frame_needed = 1, uses_anonymous_args = 0
 1473 0000 80B5     		push	{r7, lr}
 1474              		.cfi_def_cfa_offset 8
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0002 86B0     		sub	sp, sp, #24
 1478              		.cfi_def_cfa_offset 32
 1479 0004 04AF     		add	r7, sp, #16
 1480              		.cfi_def_cfa 7, 16
 426:modem.c       ****     // Initialize values
 427:modem.c       ****     modem_stats.ber = 255;
 1481              		.loc 1 427 0
 1482 0006 214B     		ldr	r3, .L96
 1483 0008 FF22     		movs	r2, #255
 1484 000a 5A60     		str	r2, [r3, #4]
 428:modem.c       ****     modem_stats.ecno = 255;
 1485              		.loc 1 428 0
 1486 000c 1F4B     		ldr	r3, .L96
 1487 000e FF22     		movs	r2, #255
 1488 0010 DA60     		str	r2, [r3, #12]
 429:modem.c       ****     modem_stats.rscp = 255;
 1489              		.loc 1 429 0
 1490 0012 1E4B     		ldr	r3, .L96
 1491 0014 FF22     		movs	r2, #255
 1492 0016 9A60     		str	r2, [r3, #8]
 430:modem.c       ****     modem_stats.rsrp = 255;
 1493              		.loc 1 430 0
 1494 0018 1C4B     		ldr	r3, .L96
 1495 001a FF22     		movs	r2, #255
 1496 001c 5A61     		str	r2, [r3, #20]
 431:modem.c       ****     modem_stats.rsrq = 255;
 1497              		.loc 1 431 0
 1498 001e 1B4B     		ldr	r3, .L96
 1499 0020 FF22     		movs	r2, #255
 1500 0022 1A61     		str	r2, [r3, #16]
 432:modem.c       ****     modem_stats.rxlev = 255;
 1501              		.loc 1 432 0
 1502 0024 194B     		ldr	r3, .L96
 1503 0026 FF22     		movs	r2, #255
 1504 0028 1A60     		str	r2, [r3]
 1505              	.LBB9:
 433:modem.c       **** 
 434:modem.c       ****     for(uint8 attempts =0; attempts <100; attempts++){
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 37


 1506              		.loc 1 434 0
 1507 002a 0023     		movs	r3, #0
 1508 002c FB71     		strb	r3, [r7, #7]
 1509 002e 23E0     		b	.L91
 1510              	.L94:
 1511              	.LBB10:
 435:modem.c       ****         // Delay one second
 436:modem.c       ****         CyDelay(1000u);
 1512              		.loc 1 436 0
 1513 0030 4FF47A70 		mov	r0, #1000
 1514 0034 FFF7FEFF 		bl	CyDelay
 437:modem.c       ****         at_write_command("AT+CESQ\r", "OK",5000u);
 1515              		.loc 1 437 0
 1516 0038 41F28832 		movw	r2, #5000
 1517 003c 1449     		ldr	r1, .L96+4
 1518 003e 1548     		ldr	r0, .L96+8
 1519 0040 FFF7FEFF 		bl	at_write_command
 438:modem.c       ****         //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 439:modem.c       **** 
 440:modem.c       ****         int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1520              		.loc 1 440 0
 1521 0044 144B     		ldr	r3, .L96+12
 1522 0046 0393     		str	r3, [sp, #12]
 1523 0048 144B     		ldr	r3, .L96+16
 1524 004a 0293     		str	r3, [sp, #8]
 1525 004c 144B     		ldr	r3, .L96+20
 1526 004e 0193     		str	r3, [sp, #4]
 1527 0050 144B     		ldr	r3, .L96+24
 1528 0052 0093     		str	r3, [sp]
 1529 0054 144B     		ldr	r3, .L96+28
 1530 0056 0D4A     		ldr	r2, .L96
 1531 0058 1449     		ldr	r1, .L96+32
 1532 005a 1548     		ldr	r0, .L96+36
 1533 005c FFF7FEFF 		bl	sscanf
 1534 0060 3860     		str	r0, [r7]
 441:modem.c       ****             &modem_stats.rxlev,
 442:modem.c       ****             &modem_stats.ber,
 443:modem.c       ****             &modem_stats.rscp,
 444:modem.c       ****             &modem_stats.ecno,
 445:modem.c       ****             &modem_stats.rsrq,
 446:modem.c       ****             &modem_stats.rsrp);
 447:modem.c       **** 
 448:modem.c       ****         //check to see if we’re getting a good received signal strength
 449:modem.c       ****         if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 1535              		.loc 1 449 0
 1536 0062 0A4B     		ldr	r3, .L96
 1537 0064 5B69     		ldr	r3, [r3, #20]
 1538 0066 FF2B     		cmp	r3, #255
 1539 0068 03D0     		beq	.L92
 1540              		.loc 1 449 0 is_stmt 0 discriminator 1
 1541 006a 084B     		ldr	r3, .L96
 1542 006c 5B69     		ldr	r3, [r3, #20]
 1543 006e 1A2B     		cmp	r3, #26
 1544 0070 06DC     		bgt	.L95
 1545              	.L92:
 1546              	.LBE10:
 434:modem.c       ****         // Delay one second
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 38


 1547              		.loc 1 434 0 is_stmt 1 discriminator 2
 1548 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1549 0074 0133     		adds	r3, r3, #1
 1550 0076 FB71     		strb	r3, [r7, #7]
 1551              	.L91:
 434:modem.c       ****         // Delay one second
 1552              		.loc 1 434 0 is_stmt 0 discriminator 1
 1553 0078 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1554 007a 632B     		cmp	r3, #99
 1555 007c D8D9     		bls	.L94
 1556              	.LBE9:
 450:modem.c       ****             break;
 451:modem.c       ****         }
 452:modem.c       ****     }
 453:modem.c       **** }
 1557              		.loc 1 453 0 is_stmt 1
 1558 007e 00E0     		b	.L93
 1559              	.L95:
 1560              	.LBB12:
 1561              	.LBB11:
 450:modem.c       ****             break;
 1562              		.loc 1 450 0
 1563 0080 00BF     		nop
 1564              	.L93:
 1565              	.LBE11:
 1566              	.LBE12:
 1567              		.loc 1 453 0
 1568 0082 00BF     		nop
 1569 0084 0837     		adds	r7, r7, #8
 1570              		.cfi_def_cfa_offset 8
 1571 0086 BD46     		mov	sp, r7
 1572              		.cfi_def_cfa_register 13
 1573              		@ sp needed
 1574 0088 80BD     		pop	{r7, pc}
 1575              	.L97:
 1576 008a 00BF     		.align	2
 1577              	.L96:
 1578 008c 00000000 		.word	modem_stats
 1579 0090 00000000 		.word	.LC0
 1580 0094 F8020000 		.word	.LC30
 1581 0098 14000000 		.word	modem_stats+20
 1582 009c 10000000 		.word	modem_stats+16
 1583 00a0 0C000000 		.word	modem_stats+12
 1584 00a4 08000000 		.word	modem_stats+8
 1585 00a8 04000000 		.word	modem_stats+4
 1586 00ac 04030000 		.word	.LC31
 1587 00b0 00000000 		.word	uart_received_string
 1588              		.cfi_endproc
 1589              	.LFE79:
 1590              		.size	get_cell_network_stats, .-get_cell_network_stats
 1591              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1592              		.align	2
 1593              		.global	updatable_parameters_initialize
 1594              		.thumb
 1595              		.thumb_func
 1596              		.type	updatable_parameters_initialize, %function
 1597              	updatable_parameters_initialize:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 39


 1598              	.LFB80:
 454:modem.c       **** 
 455:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 456:modem.c       **** void updatable_parameters_initialize(){
 1599              		.loc 1 456 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 1, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604 0000 80B4     		push	{r7}
 1605              		.cfi_def_cfa_offset 4
 1606              		.cfi_offset 7, -4
 1607 0002 00AF     		add	r7, sp, #0
 1608              		.cfi_def_cfa_register 7
 457:modem.c       ****     updatable_parameters.measure_time = 10u;
 1609              		.loc 1 457 0
 1610 0004 064B     		ldr	r3, .L99
 1611 0006 0A22     		movs	r2, #10
 1612 0008 1A70     		strb	r2, [r3]
 458:modem.c       ****     updatable_parameters.sync_time = 60u;
 1613              		.loc 1 458 0
 1614 000a 054B     		ldr	r3, .L99
 1615 000c 3C22     		movs	r2, #60
 1616 000e 5A70     		strb	r2, [r3, #1]
 459:modem.c       ****     updatable_parameters.debug_level = 1u;
 1617              		.loc 1 459 0
 1618 0010 034B     		ldr	r3, .L99
 1619 0012 0122     		movs	r2, #1
 1620 0014 9A70     		strb	r2, [r3, #2]
 460:modem.c       **** }
 1621              		.loc 1 460 0
 1622 0016 00BF     		nop
 1623 0018 BD46     		mov	sp, r7
 1624              		.cfi_def_cfa_register 13
 1625              		@ sp needed
 1626 001a 80BC     		pop	{r7}
 1627              		.cfi_restore 7
 1628              		.cfi_def_cfa_offset 0
 1629 001c 7047     		bx	lr
 1630              	.L100:
 1631 001e 00BF     		.align	2
 1632              	.L99:
 1633 0020 00000000 		.word	updatable_parameters
 1634              		.cfi_endproc
 1635              	.LFE80:
 1636              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1637              		.section	.rodata
 1638 0322 0000     		.align	2
 1639              	.LC32:
 1640 0324 53616D70 		.ascii	"Sample_Freq: \000"
 1640      6C655F46 
 1640      7265713A 
 1640      2000
 1641 0332 0000     		.align	2
 1642              	.LC33:
 1643 0334 5265706F 		.ascii	"Report_Freq: \000"
 1643      72745F46 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 40


 1643      7265713A 
 1643      2000
 1644 0342 0000     		.align	2
 1645              	.LC34:
 1646 0344 44656275 		.ascii	"Debug_Freq: \000"
 1646      675F4672 
 1646      65713A20 
 1646      00
 1647 0351 000000   		.align	2
 1648              	.LC35:
 1649 0354 256400   		.ascii	"%d\000"
 1650 0357 00       		.align	2
 1651              	.LC36:
 1652 0358 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1652      6C696E67 
 1652      20667265 
 1652      7175656E 
 1652      63792063 
 1653              		.align	2
 1654              	.LC37:
 1655 037c 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1655      64206E6F 
 1655      74207061 
 1655      72736520 
 1655      6E657720 
 1656 03aa 0000     		.align	2
 1657              	.LC38:
 1658 03ac 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1658      7274696E 
 1658      67206672 
 1658      65717565 
 1658      6E637920 
 1659 03d1 000000   		.align	2
 1660              	.LC39:
 1661 03d4 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1661      64206E6F 
 1661      74207061 
 1661      72736520 
 1661      6E657720 
 1662              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1663              		.align	2
 1664              		.global	get_updated_parameters_from_malcom
 1665              		.thumb
 1666              		.thumb_func
 1667              		.type	get_updated_parameters_from_malcom, %function
 1668              	get_updated_parameters_from_malcom:
 1669              	.LFB81:
 461:modem.c       **** 
 462:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 463:modem.c       **** void get_updated_parameters_from_malcom(){
 1670              		.loc 1 463 0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 56
 1673              		@ frame_needed = 1, uses_anonymous_args = 0
 1674 0000 90B5     		push	{r4, r7, lr}
 1675              		.cfi_def_cfa_offset 12
 1676              		.cfi_offset 4, -12
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 41


 1677              		.cfi_offset 7, -8
 1678              		.cfi_offset 14, -4
 1679 0002 8FB0     		sub	sp, sp, #60
 1680              		.cfi_def_cfa_offset 72
 1681 0004 00AF     		add	r7, sp, #0
 1682              		.cfi_def_cfa_register 7
 464:modem.c       ****     
 465:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 466:modem.c       ****     char s_sample_freq[10];
 467:modem.c       ****     char s_report_freq[10];
 468:modem.c       ****     char s_debug_freq[10];
 469:modem.c       ****     
 470:modem.c       ****     s_sample_freq[0] = '\0';
 1683              		.loc 1 470 0
 1684 0006 0023     		movs	r3, #0
 1685 0008 87F82C30 		strb	r3, [r7, #44]
 471:modem.c       ****     s_report_freq[0] = '\0';
 1686              		.loc 1 471 0
 1687 000c 0023     		movs	r3, #0
 1688 000e 87F82030 		strb	r3, [r7, #32]
 472:modem.c       ****     s_debug_freq[0] = '\0';
 1689              		.loc 1 472 0
 1690 0012 0023     		movs	r3, #0
 1691 0014 3B75     		strb	r3, [r7, #20]
 473:modem.c       ****     
 474:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 475:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1692              		.loc 1 475 0
 1693 0016 07F12C03 		add	r3, r7, #44
 1694 001a 344A     		ldr	r2, .L107
 1695 001c 3449     		ldr	r1, .L107+4
 1696 001e 3548     		ldr	r0, .L107+8
 1697 0020 FFF7FEFF 		bl	extract_string
 476:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1698              		.loc 1 476 0
 1699 0024 07F12003 		add	r3, r7, #32
 1700 0028 304A     		ldr	r2, .L107
 1701 002a 3349     		ldr	r1, .L107+12
 1702 002c 3148     		ldr	r0, .L107+8
 1703 002e FFF7FEFF 		bl	extract_string
 477:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1704              		.loc 1 477 0
 1705 0032 07F11403 		add	r3, r7, #20
 1706 0036 2D4A     		ldr	r2, .L107
 1707 0038 3049     		ldr	r1, .L107+16
 1708 003a 2E48     		ldr	r0, .L107+8
 1709 003c FFF7FEFF 		bl	extract_string
 478:modem.c       ****     
 479:modem.c       ****     // Create variables for what is sent back from the server
 480:modem.c       ****     int sample_freq, report_freq, debug_freq;
 481:modem.c       ****     
 482:modem.c       ****     
 483:modem.c       ****     // Scan character arrays and save values 
 484:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1710              		.loc 1 484 0
 1711 0040 07F11002 		add	r2, r7, #16
 1712 0044 07F12C03 		add	r3, r7, #44
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 42


 1713 0048 2D49     		ldr	r1, .L107+20
 1714 004a 1846     		mov	r0, r3
 1715 004c FFF7FEFF 		bl	sscanf
 1716 0050 0346     		mov	r3, r0
 1717 0052 012B     		cmp	r3, #1
 1718 0054 19D1     		bne	.L102
 485:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1719              		.loc 1 485 0
 1720 0056 3B69     		ldr	r3, [r7, #16]
 1721 0058 DAB2     		uxtb	r2, r3
 1722 005a 2A4B     		ldr	r3, .L107+24
 1723 005c 1A70     		strb	r2, [r3]
 486:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 487:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1724              		.loc 1 487 0
 1725 005e 294B     		ldr	r3, .L107+24
 1726 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1727 0062 99B2     		uxth	r1, r3
 1728 0064 284C     		ldr	r4, .L107+28
 1729 0066 3846     		mov	r0, r7
 1730 0068 0723     		movs	r3, #7
 1731 006a 0122     		movs	r2, #1
 1732 006c FFF7FEFF 		bl	CreateAlarm
 1733 0070 2246     		mov	r2, r4
 1734 0072 3B46     		mov	r3, r7
 1735 0074 1968     		ldr	r1, [r3]	@ unaligned
 1736 0076 1160     		str	r1, [r2]	@ unaligned
 1737 0078 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1738 007a 9380     		strh	r3, [r2, #4]	@ unaligned
 488:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1739              		.loc 1 488 0
 1740 007c 3B69     		ldr	r3, [r7, #16]
 1741 007e 1A46     		mov	r2, r3
 1742 0080 2249     		ldr	r1, .L107+32
 1743 0082 0020     		movs	r0, #0
 1744 0084 FFF7FEFF 		bl	printNotif
 1745 0088 03E0     		b	.L103
 1746              	.L102:
 489:modem.c       ****     }else{
 490:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1747              		.loc 1 490 0
 1748 008a 2149     		ldr	r1, .L107+36
 1749 008c 0220     		movs	r0, #2
 1750 008e FFF7FEFF 		bl	printNotif
 1751              	.L103:
 491:modem.c       ****     }
 492:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1752              		.loc 1 492 0
 1753 0092 07F10C02 		add	r2, r7, #12
 1754 0096 07F12003 		add	r3, r7, #32
 1755 009a 1949     		ldr	r1, .L107+20
 1756 009c 1846     		mov	r0, r3
 1757 009e FFF7FEFF 		bl	sscanf
 1758 00a2 0346     		mov	r3, r0
 1759 00a4 012B     		cmp	r3, #1
 1760 00a6 19D1     		bne	.L104
 493:modem.c       ****         updatable_parameters.sync_time = report_freq;
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 43


 1761              		.loc 1 493 0
 1762 00a8 FB68     		ldr	r3, [r7, #12]
 1763 00aa DAB2     		uxtb	r2, r3
 1764 00ac 154B     		ldr	r3, .L107+24
 1765 00ae 5A70     		strb	r2, [r3, #1]
 494:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 495:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1766              		.loc 1 495 0
 1767 00b0 144B     		ldr	r3, .L107+24
 1768 00b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1769 00b4 99B2     		uxth	r1, r3
 1770 00b6 174C     		ldr	r4, .L107+40
 1771 00b8 3846     		mov	r0, r7
 1772 00ba 0723     		movs	r3, #7
 1773 00bc 0122     		movs	r2, #1
 1774 00be FFF7FEFF 		bl	CreateAlarm
 1775 00c2 2246     		mov	r2, r4
 1776 00c4 3B46     		mov	r3, r7
 1777 00c6 1968     		ldr	r1, [r3]	@ unaligned
 1778 00c8 1160     		str	r1, [r2]	@ unaligned
 1779 00ca 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1780 00cc 9380     		strh	r3, [r2, #4]	@ unaligned
 496:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1781              		.loc 1 496 0
 1782 00ce FB68     		ldr	r3, [r7, #12]
 1783 00d0 1A46     		mov	r2, r3
 1784 00d2 1149     		ldr	r1, .L107+44
 1785 00d4 0020     		movs	r0, #0
 1786 00d6 FFF7FEFF 		bl	printNotif
 497:modem.c       ****         }else{
 498:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 499:modem.c       ****     }
 500:modem.c       ****     //if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 501:modem.c       ****     //    updatable_parameters.debug_level = debug_freq;
 502:modem.c       ****     //    printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 503:modem.c       ****     //}else{
 504:modem.c       ****     //    printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 505:modem.c       ****     //}
 506:modem.c       **** }
 1787              		.loc 1 506 0
 1788 00da 03E0     		b	.L106
 1789              	.L104:
 498:modem.c       ****     }
 1790              		.loc 1 498 0
 1791 00dc 0F49     		ldr	r1, .L107+48
 1792 00de 0220     		movs	r0, #2
 1793 00e0 FFF7FEFF 		bl	printNotif
 1794              	.L106:
 1795              		.loc 1 506 0
 1796 00e4 00BF     		nop
 1797 00e6 3C37     		adds	r7, r7, #60
 1798              		.cfi_def_cfa_offset 12
 1799 00e8 BD46     		mov	sp, r7
 1800              		.cfi_def_cfa_register 13
 1801              		@ sp needed
 1802 00ea 90BD     		pop	{r4, r7, pc}
 1803              	.L108:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 44


 1804              		.align	2
 1805              	.L107:
 1806 00ec 88020000 		.word	.LC21
 1807 00f0 24030000 		.word	.LC32
 1808 00f4 00000000 		.word	uart_received_string
 1809 00f8 34030000 		.word	.LC33
 1810 00fc 44030000 		.word	.LC34
 1811 0100 54030000 		.word	.LC35
 1812 0104 00000000 		.word	updatable_parameters
 1813 0108 00000000 		.word	alarmMeasure
 1814 010c 58030000 		.word	.LC36
 1815 0110 7C030000 		.word	.LC37
 1816 0114 00000000 		.word	alarmSync
 1817 0118 AC030000 		.word	.LC38
 1818 011c D4030000 		.word	.LC39
 1819              		.cfi_endproc
 1820              	.LFE81:
 1821              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 1822              		.section	.rodata
 1823 0403 00       		.align	2
 1824              	.LC40:
 1825 0404 41542343 		.ascii	"AT#CGMM\015\000"
 1825      474D4D0D 
 1825      00
 1826 040d 000000   		.align	2
 1827              	.LC41:
 1828 0410 4D6F6465 		.ascii	"Modem Model: %s\000"
 1828      6D204D6F 
 1828      64656C3A 
 1828      20257300 
 1829              		.align	2
 1830              	.LC42:
 1831 0420 41542343 		.ascii	"AT#CCID\015\000"
 1831      4349440D 
 1831      00
 1832 0429 000000   		.align	2
 1833              	.LC43:
 1834 042c 53494D20 		.ascii	"SIM ID: %s\000"
 1834      49443A20 
 1834      257300
 1835 0437 00       		.align	2
 1836              	.LC44:
 1837 0438 41542B43 		.ascii	"AT+CGSN\015\000"
 1837      47534E0D 
 1837      00
 1838 0441 000000   		.align	2
 1839              	.LC45:
 1840 0444 494D4549 		.ascii	"IMEI: %s\000"
 1840      3A202573 
 1840      00
 1841 044d 000000   		.align	2
 1842              	.LC46:
 1843 0450 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 1843      4744434F 
 1843      4E543D31 
 1843      2C224950 
 1843      222C2277 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 45


 1844 0479 00       		.ascii	"\000"
 1845 047a 0000     		.align	2
 1846              	.LC47:
 1847 047c 41542B43 		.ascii	"AT+CFUN?\015\000"
 1847      46554E3F 
 1847      0D00
 1848 0486 0000     		.align	2
 1849              	.LC48:
 1850 0488 4346554E 		.ascii	"CFUN: %s\000"
 1850      3A202573 
 1850      00
 1851 0491 000000   		.align	2
 1852              	.LC49:
 1853 0494 41542B43 		.ascii	"AT+CFUN=1\015\000"
 1853      46554E3D 
 1853      310D00
 1854              		.section	.text.modem_configure_settings,"ax",%progbits
 1855              		.align	2
 1856              		.global	modem_configure_settings
 1857              		.thumb
 1858              		.thumb_func
 1859              		.type	modem_configure_settings, %function
 1860              	modem_configure_settings:
 1861              	.LFB82:
 507:modem.c       ****     
 508:modem.c       **** // Configure the modem settings
 509:modem.c       **** void modem_configure_settings(){
 1862              		.loc 1 509 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 16
 1865              		@ frame_needed = 1, uses_anonymous_args = 0
 1866 0000 80B5     		push	{r7, lr}
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 84B0     		sub	sp, sp, #16
 1871              		.cfi_def_cfa_offset 24
 1872 0004 00AF     		add	r7, sp, #0
 1873              		.cfi_def_cfa_register 7
 510:modem.c       ****     
 511:modem.c       ****     // Save/print modem model ID number
 512:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 1874              		.loc 1 512 0
 1875 0006 3C4B     		ldr	r3, .L116
 1876 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1877 000a 002B     		cmp	r3, #0
 1878 000c 13D1     		bne	.L110
 513:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 514:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 1879              		.loc 1 514 0
 1880 000e 4FF4FA62 		mov	r2, #2000
 1881 0012 3A49     		ldr	r1, .L116+4
 1882 0014 3A48     		ldr	r0, .L116+8
 1883 0016 FFF7FEFF 		bl	at_write_command
 1884 001a 0346     		mov	r3, r0
 1885 001c 002B     		cmp	r3, #0
 1886 001e 0AD0     		beq	.L110
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 46


 515:modem.c       ****             // Extract modem model ID number string from the UART
 516:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 1887              		.loc 1 516 0
 1888 0020 384B     		ldr	r3, .L116+12
 1889 0022 394A     		ldr	r2, .L116+16
 1890 0024 3949     		ldr	r1, .L116+20
 1891 0026 3A48     		ldr	r0, .L116+24
 1892 0028 FFF7FEFF 		bl	extract_string
 517:modem.c       ****             // Print modem model ID number
 518:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 1893              		.loc 1 518 0
 1894 002c 354A     		ldr	r2, .L116+12
 1895 002e 3949     		ldr	r1, .L116+28
 1896 0030 0020     		movs	r0, #0
 1897 0032 FFF7FEFF 		bl	printNotif
 1898              	.L110:
 519:modem.c       ****         }
 520:modem.c       ****     }
 521:modem.c       ****     
 522:modem.c       ****    // Save/print SIM-card ID
 523:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 1899              		.loc 1 523 0
 1900 0036 304B     		ldr	r3, .L116
 1901 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1902 003a 002B     		cmp	r3, #0
 1903 003c 13D1     		bne	.L111
 524:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 525:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 1904              		.loc 1 525 0
 1905 003e 4FF4FA62 		mov	r2, #2000
 1906 0042 2E49     		ldr	r1, .L116+4
 1907 0044 3448     		ldr	r0, .L116+32
 1908 0046 FFF7FEFF 		bl	at_write_command
 1909 004a 0346     		mov	r3, r0
 1910 004c 002B     		cmp	r3, #0
 1911 004e 0AD0     		beq	.L111
 526:modem.c       ****             // Extract SIM-card ID string from the UART
 527:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 1912              		.loc 1 527 0
 1913 0050 294B     		ldr	r3, .L116
 1914 0052 2D4A     		ldr	r2, .L116+16
 1915 0054 2D49     		ldr	r1, .L116+20
 1916 0056 2E48     		ldr	r0, .L116+24
 1917 0058 FFF7FEFF 		bl	extract_string
 528:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 1918              		.loc 1 528 0
 1919 005c 264A     		ldr	r2, .L116
 1920 005e 2F49     		ldr	r1, .L116+36
 1921 0060 0020     		movs	r0, #0
 1922 0062 FFF7FEFF 		bl	printNotif
 1923              	.L111:
 529:modem.c       ****         }
 530:modem.c       ****    }
 531:modem.c       **** 
 532:modem.c       ****     // Save/print modem IMEI
 533:modem.c       ****     if(modem_info.imei[0] == '\0'){
 1924              		.loc 1 533 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 47


 1925 0066 244B     		ldr	r3, .L116
 1926 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1927 006c 002B     		cmp	r3, #0
 1928 006e 13D1     		bne	.L112
 534:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 535:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 1929              		.loc 1 535 0
 1930 0070 4FF4FA62 		mov	r2, #2000
 1931 0074 2149     		ldr	r1, .L116+4
 1932 0076 2A48     		ldr	r0, .L116+40
 1933 0078 FFF7FEFF 		bl	at_write_command
 1934 007c 0346     		mov	r3, r0
 1935 007e 002B     		cmp	r3, #0
 1936 0080 0AD0     		beq	.L112
 536:modem.c       ****             // Extract modem IMEI number string from the UART
 537:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 1937              		.loc 1 537 0
 1938 0082 284B     		ldr	r3, .L116+44
 1939 0084 204A     		ldr	r2, .L116+16
 1940 0086 2149     		ldr	r1, .L116+20
 1941 0088 2148     		ldr	r0, .L116+24
 1942 008a FFF7FEFF 		bl	extract_string
 538:modem.c       ****             // Print modem IMEI number
 539:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 1943              		.loc 1 539 0
 1944 008e 254A     		ldr	r2, .L116+44
 1945 0090 2549     		ldr	r1, .L116+48
 1946 0092 0020     		movs	r0, #0
 1947 0094 FFF7FEFF 		bl	printNotif
 1948              	.L112:
 540:modem.c       ****         } 
 541:modem.c       ****     }
 542:modem.c       ****     
 543:modem.c       ****     // Configure protocol and cellular end point
 544:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 545:modem.c       ****     at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 1949              		.loc 1 545 0
 1950 0098 4FF4FA62 		mov	r2, #2000
 1951 009c 1749     		ldr	r1, .L116+4
 1952 009e 2348     		ldr	r0, .L116+52
 1953 00a0 FFF7FEFF 		bl	at_write_command
 546:modem.c       ****     
 547:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 548:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 549:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 1954              		.loc 1 549 0
 1955 00a4 4FF4FA62 		mov	r2, #2000
 1956 00a8 1449     		ldr	r1, .L116+4
 1957 00aa 2148     		ldr	r0, .L116+56
 1958 00ac FFF7FEFF 		bl	at_write_command
 1959 00b0 0346     		mov	r3, r0
 1960 00b2 002B     		cmp	r3, #0
 1961 00b4 1BD0     		beq	.L115
 1962              	.LBB13:
 550:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 551:modem.c       ****         CFUN[0] = '\0';
 1963              		.loc 1 551 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 48


 1964 00b6 0023     		movs	r3, #0
 1965 00b8 3B71     		strb	r3, [r7, #4]
 552:modem.c       ****         // Extract UART string recieved from the modem
 553:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 1966              		.loc 1 553 0
 1967 00ba 3B1D     		adds	r3, r7, #4
 1968 00bc 124A     		ldr	r2, .L116+16
 1969 00be 1349     		ldr	r1, .L116+20
 1970 00c0 1348     		ldr	r0, .L116+24
 1971 00c2 FFF7FEFF 		bl	extract_string
 554:modem.c       ****         // Print UART string recieved from the modem
 555:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 1972              		.loc 1 555 0
 1973 00c6 3B1D     		adds	r3, r7, #4
 1974 00c8 1A46     		mov	r2, r3
 1975 00ca 1A49     		ldr	r1, .L116+60
 1976 00cc 0020     		movs	r0, #0
 1977 00ce FFF7FEFF 		bl	printNotif
 556:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 557:modem.c       ****         // If it returns NULL, then write another command to the modem
 558:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 1978              		.loc 1 558 0
 1979 00d2 3B1D     		adds	r3, r7, #4
 1980 00d4 3121     		movs	r1, #49
 1981 00d6 1846     		mov	r0, r3
 1982 00d8 FFF7FEFF 		bl	strchr
 1983 00dc 0346     		mov	r3, r0
 1984 00de 002B     		cmp	r3, #0
 1985 00e0 05D1     		bne	.L115
 559:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 560:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 561:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 1986              		.loc 1 561 0
 1987 00e2 4FF4FA62 		mov	r2, #2000
 1988 00e6 0549     		ldr	r1, .L116+4
 1989 00e8 1348     		ldr	r0, .L116+64
 1990 00ea FFF7FEFF 		bl	at_write_command
 1991              	.L115:
 1992              	.LBE13:
 562:modem.c       ****         }
 563:modem.c       ****     }
 564:modem.c       **** 
 565:modem.c       ****     
 566:modem.c       **** }
 1993              		.loc 1 566 0
 1994 00ee 00BF     		nop
 1995 00f0 1037     		adds	r7, r7, #16
 1996              		.cfi_def_cfa_offset 8
 1997 00f2 BD46     		mov	sp, r7
 1998              		.cfi_def_cfa_register 13
 1999              		@ sp needed
 2000 00f4 80BD     		pop	{r7, pc}
 2001              	.L117:
 2002 00f6 00BF     		.align	2
 2003              	.L116:
 2004 00f8 00000000 		.word	modem_info
 2005 00fc 00000000 		.word	.LC0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 49


 2006 0100 04040000 		.word	.LC40
 2007 0104 14000000 		.word	modem_info+20
 2008 0108 88020000 		.word	.LC21
 2009 010c 8C020000 		.word	.LC22
 2010 0110 00000000 		.word	uart_received_string
 2011 0114 10040000 		.word	.LC41
 2012 0118 20040000 		.word	.LC42
 2013 011c 2C040000 		.word	.LC43
 2014 0120 38040000 		.word	.LC44
 2015 0124 28000000 		.word	modem_info+40
 2016 0128 44040000 		.word	.LC45
 2017 012c 50040000 		.word	.LC46
 2018 0130 7C040000 		.word	.LC47
 2019 0134 88040000 		.word	.LC48
 2020 0138 94040000 		.word	.LC49
 2021              		.cfi_endproc
 2022              	.LFE82:
 2023              		.size	modem_configure_settings, .-modem_configure_settings
 2024              		.section	.rodata
 2025 049f 00       		.align	2
 2026              	.LC50:
 2027 04a0 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2027      6D206E6F 
 2027      74207265 
 2027      61647920 
 2027      746F2067 
 2028 04d3 6B2E00   		.ascii	"k.\000"
 2029 04d6 0000     		.align	2
 2030              	.LC51:
 2031 04d8 41542B43 		.ascii	"AT+CCLK?\015\000"
 2031      434C4B3F 
 2031      0D00
 2032 04e2 0000     		.align	2
 2033              	.LC52:
 2034 04e4 220D00   		.ascii	"\"\015\000"
 2035 04e7 00       		.align	2
 2036              	.LC53:
 2037 04e8 3A202200 		.ascii	": \"\000"
 2038              		.align	2
 2039              	.LC54:
 2040 04ec 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2040      642F2564 
 2040      2C25643A 
 2040      25643A25 
 2040      642D2564 
 2041 0501 000000   		.align	2
 2042              	.LC55:
 2043 0504 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2043      642F2564 
 2043      2C25643A 
 2043      25643A25 
 2043      642B2564 
 2044 0519 000000   		.align	2
 2045              	.LC56:
 2046 051c 436F756C 		.ascii	"Could not parse modem time.\000"
 2046      64206E6F 
 2046      74207061 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 50


 2046      72736520 
 2046      6D6F6465 
 2047              		.section	.text.modem_get_network_time,"ax",%progbits
 2048              		.align	2
 2049              		.global	modem_get_network_time
 2050              		.thumb
 2051              		.thumb_func
 2052              		.type	modem_get_network_time, %function
 2053              	modem_get_network_time:
 2054              	.LFB83:
 567:modem.c       **** 
 568:modem.c       **** //returns 0 if modem can't get time
 569:modem.c       **** long modem_get_network_time(){
 2055              		.loc 1 569 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 104
 2058              		@ frame_needed = 1, uses_anonymous_args = 0
 2059 0000 80B5     		push	{r7, lr}
 2060              		.cfi_def_cfa_offset 8
 2061              		.cfi_offset 7, -8
 2062              		.cfi_offset 14, -4
 2063 0002 A0B0     		sub	sp, sp, #128
 2064              		.cfi_def_cfa_offset 136
 2065 0004 06AF     		add	r7, sp, #24
 2066              		.cfi_def_cfa 7, 112
 570:modem.c       ****     
 571:modem.c       ****     //modem reposen format (careful to include the quotes "")
 572:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 573:modem.c       ****     //ex: 14:48 GMT
 574:modem.c       **** 
 575:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 576:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2067              		.loc 1 576 0
 2068 0006 444B     		ldr	r3, .L125
 2069 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2070 000a 042B     		cmp	r3, #4
 2071 000c 05D0     		beq	.L119
 577:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2072              		.loc 1 577 0
 2073 000e 4349     		ldr	r1, .L125+4
 2074 0010 0220     		movs	r0, #2
 2075 0012 FFF7FEFF 		bl	printNotif
 578:modem.c       ****         return 0;   
 2076              		.loc 1 578 0
 2077 0016 0023     		movs	r3, #0
 2078 0018 7AE0     		b	.L120
 2079              	.L119:
 579:modem.c       ****     }
 580:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2080              		.loc 1 580 0
 2081 001a 0023     		movs	r3, #0
 2082 001c 7B66     		str	r3, [r7, #100]
 581:modem.c       ****     
 582:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 583:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2083              		.loc 1 583 0
 2084 001e 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 51


 2085 0022 3F49     		ldr	r1, .L125+8
 2086 0024 3F48     		ldr	r0, .L125+12
 2087 0026 FFF7FEFF 		bl	at_write_command
 2088 002a 0346     		mov	r3, r0
 2089 002c 002B     		cmp	r3, #0
 2090 002e 6ED0     		beq	.L121
 2091              	.LBB14:
 584:modem.c       ****         // need to set this to /0
 585:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 586:modem.c       ****         network_time[0] = '\0';
 2092              		.loc 1 586 0
 2093 0030 0023     		movs	r3, #0
 2094 0032 87F84430 		strb	r3, [r7, #68]
 587:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 588:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2095              		.loc 1 588 0
 2096 0036 07F14403 		add	r3, r7, #68
 2097 003a 3B4A     		ldr	r2, .L125+16
 2098 003c 3B49     		ldr	r1, .L125+20
 2099 003e 3C48     		ldr	r0, .L125+24
 2100 0040 FFF7FEFF 		bl	extract_string
 589:modem.c       ****         
 590:modem.c       ****         ///////////////////  
 591:modem.c       ****         struct tm t; // Creates variable t of struct tm
 592:modem.c       ****         
 593:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 594:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2101              		.loc 1 594 0
 2102 0044 0023     		movs	r3, #0
 2103 0046 BB62     		str	r3, [r7, #40]
 595:modem.c       ****       
 596:modem.c       ****         // Determines the GMT offset 
 597:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 598:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 599:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2104              		.loc 1 599 0
 2105 0048 07F13C01 		add	r1, r7, #60
 2106 004c 07F14002 		add	r2, r7, #64
 2107 0050 07F14400 		add	r0, r7, #68
 2108 0054 07F12803 		add	r3, r7, #40
 2109 0058 0493     		str	r3, [sp, #16]
 2110 005a 07F12C03 		add	r3, r7, #44
 2111 005e 0393     		str	r3, [sp, #12]
 2112 0060 07F13003 		add	r3, r7, #48
 2113 0064 0293     		str	r3, [sp, #8]
 2114 0066 07F13403 		add	r3, r7, #52
 2115 006a 0193     		str	r3, [sp, #4]
 2116 006c 07F13803 		add	r3, r7, #56
 2117 0070 0093     		str	r3, [sp]
 2118 0072 0B46     		mov	r3, r1
 2119 0074 2F49     		ldr	r1, .L125+28
 2120 0076 FFF7FEFF 		bl	sscanf
 2121 007a 0346     		mov	r3, r0
 2122 007c 072B     		cmp	r3, #7
 2123 007e 06D1     		bne	.L122
 600:modem.c       ****             gmt_offset = gmt_offset*(900);
 2124              		.loc 1 600 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 52


 2125 0080 BB6A     		ldr	r3, [r7, #40]
 2126 0082 4FF46172 		mov	r2, #900
 2127 0086 02FB03F3 		mul	r3, r2, r3
 2128 008a BB62     		str	r3, [r7, #40]
 2129 008c 27E0     		b	.L123
 2130              	.L122:
 601:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2131              		.loc 1 601 0
 2132 008e 07F13C01 		add	r1, r7, #60
 2133 0092 07F14002 		add	r2, r7, #64
 2134 0096 07F14400 		add	r0, r7, #68
 2135 009a 07F12803 		add	r3, r7, #40
 2136 009e 0493     		str	r3, [sp, #16]
 2137 00a0 07F12C03 		add	r3, r7, #44
 2138 00a4 0393     		str	r3, [sp, #12]
 2139 00a6 07F13003 		add	r3, r7, #48
 2140 00aa 0293     		str	r3, [sp, #8]
 2141 00ac 07F13403 		add	r3, r7, #52
 2142 00b0 0193     		str	r3, [sp, #4]
 2143 00b2 07F13803 		add	r3, r7, #56
 2144 00b6 0093     		str	r3, [sp]
 2145 00b8 0B46     		mov	r3, r1
 2146 00ba 1F49     		ldr	r1, .L125+32
 2147 00bc FFF7FEFF 		bl	sscanf
 2148 00c0 0346     		mov	r3, r0
 2149 00c2 072B     		cmp	r3, #7
 2150 00c4 05D1     		bne	.L124
 602:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2151              		.loc 1 602 0
 2152 00c6 BB6A     		ldr	r3, [r7, #40]
 2153 00c8 1C4A     		ldr	r2, .L125+36
 2154 00ca 02FB03F3 		mul	r3, r2, r3
 2155 00ce BB62     		str	r3, [r7, #40]
 2156 00d0 05E0     		b	.L123
 2157              	.L124:
 603:modem.c       ****         }else{
 604:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2158              		.loc 1 604 0
 2159 00d2 1B49     		ldr	r1, .L125+40
 2160 00d4 0220     		movs	r0, #2
 2161 00d6 FFF7FEFF 		bl	printNotif
 605:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2162              		.loc 1 605 0
 2163 00da 0023     		movs	r3, #0
 2164 00dc 18E0     		b	.L120
 2165              	.L123:
 606:modem.c       ****         }
 607:modem.c       ****         
 608:modem.c       ****         // Sets each variable to the correct time 
 609:modem.c       ****         t.tm_sec = second;
 2166              		.loc 1 609 0
 2167 00de FB6A     		ldr	r3, [r7, #44]
 2168 00e0 7B60     		str	r3, [r7, #4]
 610:modem.c       ****         t.tm_min = minute;
 2169              		.loc 1 610 0
 2170 00e2 3B6B     		ldr	r3, [r7, #48]
 2171 00e4 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 53


 611:modem.c       ****         t.tm_hour = hour;
 2172              		.loc 1 611 0
 2173 00e6 7B6B     		ldr	r3, [r7, #52]
 2174 00e8 FB60     		str	r3, [r7, #12]
 612:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2175              		.loc 1 612 0
 2176 00ea 3B6C     		ldr	r3, [r7, #64]
 2177 00ec 6433     		adds	r3, r3, #100
 2178 00ee BB61     		str	r3, [r7, #24]
 613:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2179              		.loc 1 613 0
 2180 00f0 FB6B     		ldr	r3, [r7, #60]
 2181 00f2 013B     		subs	r3, r3, #1
 2182 00f4 7B61     		str	r3, [r7, #20]
 614:modem.c       ****         t.tm_mday = day;           // Day of the month
 2183              		.loc 1 614 0
 2184 00f6 BB6B     		ldr	r3, [r7, #56]
 2185 00f8 3B61     		str	r3, [r7, #16]
 615:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2186              		.loc 1 615 0
 2187 00fa 0023     		movs	r3, #0
 2188 00fc 7B62     		str	r3, [r7, #36]
 616:modem.c       ****     
 617:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 618:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 619:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2189              		.loc 1 619 0
 2190 00fe 3B1D     		adds	r3, r7, #4
 2191 0100 1846     		mov	r0, r3
 2192 0102 FFF7FEFF 		bl	mktime
 2193 0106 0246     		mov	r2, r0
 2194 0108 BB6A     		ldr	r3, [r7, #40]
 2195 010a 1344     		add	r3, r3, r2
 2196 010c 7B66     		str	r3, [r7, #100]
 2197              	.L121:
 2198              	.LBE14:
 620:modem.c       ****     }
 621:modem.c       ****     
 622:modem.c       ****     return epoch_time;
 2199              		.loc 1 622 0
 2200 010e 7B6E     		ldr	r3, [r7, #100]
 2201              	.L120:
 623:modem.c       **** }
 2202              		.loc 1 623 0
 2203 0110 1846     		mov	r0, r3
 2204 0112 6837     		adds	r7, r7, #104
 2205              		.cfi_def_cfa_offset 8
 2206 0114 BD46     		mov	sp, r7
 2207              		.cfi_def_cfa_register 13
 2208              		@ sp needed
 2209 0116 80BD     		pop	{r7, pc}
 2210              	.L126:
 2211              		.align	2
 2212              	.L125:
 2213 0118 00000000 		.word	modem_state
 2214 011c A0040000 		.word	.LC50
 2215 0120 00000000 		.word	.LC0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 54


 2216 0124 D8040000 		.word	.LC51
 2217 0128 E4040000 		.word	.LC52
 2218 012c E8040000 		.word	.LC53
 2219 0130 00000000 		.word	uart_received_string
 2220 0134 EC040000 		.word	.LC54
 2221 0138 04050000 		.word	.LC55
 2222 013c 7CFCFFFF 		.word	-900
 2223 0140 1C050000 		.word	.LC56
 2224              		.cfi_endproc
 2225              	.LFE83:
 2226              		.size	modem_get_network_time, .-modem_get_network_time
 2227              		.section	.text.modem_get_state,"ax",%progbits
 2228              		.align	2
 2229              		.global	modem_get_state
 2230              		.thumb
 2231              		.thumb_func
 2232              		.type	modem_get_state, %function
 2233              	modem_get_state:
 2234              	.LFB84:
 624:modem.c       **** 
 625:modem.c       **** // Get the modem state
 626:modem.c       **** uint8 modem_get_state(){
 2235              		.loc 1 626 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 0
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240 0000 80B4     		push	{r7}
 2241              		.cfi_def_cfa_offset 4
 2242              		.cfi_offset 7, -4
 2243 0002 00AF     		add	r7, sp, #0
 2244              		.cfi_def_cfa_register 7
 627:modem.c       ****     return modem_state;
 2245              		.loc 1 627 0
 2246 0004 024B     		ldr	r3, .L129
 2247 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 628:modem.c       **** }
 2248              		.loc 1 628 0
 2249 0008 1846     		mov	r0, r3
 2250 000a BD46     		mov	sp, r7
 2251              		.cfi_def_cfa_register 13
 2252              		@ sp needed
 2253 000c 80BC     		pop	{r7}
 2254              		.cfi_restore 7
 2255              		.cfi_def_cfa_offset 0
 2256 000e 7047     		bx	lr
 2257              	.L130:
 2258              		.align	2
 2259              	.L129:
 2260 0010 00000000 		.word	modem_state
 2261              		.cfi_endproc
 2262              	.LFE84:
 2263              		.size	modem_get_state, .-modem_get_state
 2264              		.section	.text.modem_sleep,"ax",%progbits
 2265              		.align	2
 2266              		.global	modem_sleep
 2267              		.thumb
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 55


 2268              		.thumb_func
 2269              		.type	modem_sleep, %function
 2270              	modem_sleep:
 2271              	.LFB85:
 629:modem.c       **** 
 630:modem.c       **** // Set modem to sleep
 631:modem.c       **** void modem_sleep(){
 2272              		.loc 1 631 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 0
 2275              		@ frame_needed = 1, uses_anonymous_args = 0
 2276 0000 80B5     		push	{r7, lr}
 2277              		.cfi_def_cfa_offset 8
 2278              		.cfi_offset 7, -8
 2279              		.cfi_offset 14, -4
 2280 0002 00AF     		add	r7, sp, #0
 2281              		.cfi_def_cfa_register 7
 632:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 633:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2282              		.loc 1 633 0
 2283 0004 FFF7FEFF 		bl	modem_get_state
 2284 0008 0346     		mov	r3, r0
 2285 000a 002B     		cmp	r3, #0
 2286 000c 03D0     		beq	.L133
 634:modem.c       **** 
 635:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2287              		.loc 1 635 0
 2288 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 636:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2289              		.loc 1 636 0
 2290 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2291              	.L133:
 637:modem.c       ****         
 638:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 639:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 640:modem.c       ****      }
 641:modem.c       **** }
 2292              		.loc 1 641 0
 2293 0016 00BF     		nop
 2294 0018 80BD     		pop	{r7, pc}
 2295              		.cfi_endproc
 2296              	.LFE85:
 2297              		.size	modem_sleep, .-modem_sleep
 2298 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2299              		.align	2
 2300              		.global	modem_wakeup
 2301              		.thumb
 2302              		.thumb_func
 2303              		.type	modem_wakeup, %function
 2304              	modem_wakeup:
 2305              	.LFB86:
 642:modem.c       **** 
 643:modem.c       **** // Wakeup the modem
 644:modem.c       **** void modem_wakeup(){
 2306              		.loc 1 644 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 56


 2309              		@ frame_needed = 1, uses_anonymous_args = 0
 2310 0000 80B5     		push	{r7, lr}
 2311              		.cfi_def_cfa_offset 8
 2312              		.cfi_offset 7, -8
 2313              		.cfi_offset 14, -4
 2314 0002 00AF     		add	r7, sp, #0
 2315              		.cfi_def_cfa_register 7
 645:modem.c       ****     // If modem state is not off then wake it up
 646:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2316              		.loc 1 646 0
 2317 0004 FFF7FEFF 		bl	modem_get_state
 2318 0008 0346     		mov	r3, r0
 2319 000a 002B     		cmp	r3, #0
 2320 000c 0BD0     		beq	.L136
 647:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2321              		.loc 1 647 0
 2322 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 648:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 649:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 650:modem.c       ****         UART_Telit_Wakeup();
 2323              		.loc 1 650 0
 2324 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 651:modem.c       ****         // Remove the need for this pin itterupt
 652:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 653:modem.c       ****         
 654:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 655:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2325              		.loc 1 655 0
 2326 0016 FFF7FEFF 		bl	modem_get_state
 2327 001a 0346     		mov	r3, r0
 2328 001c 032B     		cmp	r3, #3
 2329 001e 02D1     		bne	.L136
 656:modem.c       ****             CyDelay(100u);
 2330              		.loc 1 656 0
 2331 0020 6420     		movs	r0, #100
 2332 0022 FFF7FEFF 		bl	CyDelay
 2333              	.L136:
 657:modem.c       ****         }
 658:modem.c       ****      }
 659:modem.c       **** }
 2334              		.loc 1 659 0
 2335 0026 00BF     		nop
 2336 0028 80BD     		pop	{r7, pc}
 2337              		.cfi_endproc
 2338              	.LFE86:
 2339              		.size	modem_wakeup, .-modem_wakeup
 2340 002a 00BF     		.section	.rodata
 2341              		.align	2
 2342              	.LC57:
 2343 0538 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2343      50494F3D 
 2343      352C312C 
 2343      312C300D 
 2343      00
 2344 0549 000000   		.align	2
 2345              	.LC58:
 2346 054c 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 57


 2346      55504C53 
 2346      45433D31 
 2346      0D00
 2347 055a 0000     		.align	2
 2348              	.LC59:
 2349 055c 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2349      55504C56 
 2349      3D320D00 
 2350              		.align	2
 2351              	.LC60:
 2352 0568 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2352      47505345 
 2352      4E3D310D 
 2352      00
 2353 0575 000000   		.align	2
 2354              	.LC61:
 2355 0578 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2355      4C503D31 
 2355      2C227375 
 2355      706C2E67 
 2355      6F6F676C 
 2356 0599 000000   		.align	2
 2357              	.LC62:
 2358 059c 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2358      47414354 
 2358      3D312C30 
 2358      0D0A00
 2359 05ab 00       		.align	2
 2360              	.LC63:
 2361 05ac 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2361      43534C4B 
 2361      3D312C31 
 2361      0D00
 2362 05ba 0000     		.align	2
 2363              	.LC64:
 2364 05bc 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2364      5053534C 
 2364      53523D31 
 2364      2C312C2C 
 2364      2C2C2C32 
 2365 05d2 0000     		.align	2
 2366              	.LC65:
 2367 05d4 4E00     		.ascii	"N\000"
 2368 05d6 0000     		.align	2
 2369              	.LC66:
 2370 05d8 41542447 		.ascii	"AT$GPSACP\015\000"
 2370      50534143 
 2370      500D00
 2371 05e3 00       		.align	2
 2372              	.LC67:
 2373 05e4 24475053 		.ascii	"$GPSACP: \000"
 2373      4143503A 
 2373      2000
 2374 05ee 0000     		.align	2
 2375              	.LC68:
 2376 05f0 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2376      4143503A 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 58


 2376      20252A66 
 2376      2C25664E 
 2376      2C256657 
 2377              		.global	__aeabi_fdiv
 2378              		.global	__aeabi_f2d
 2379              		.global	__aeabi_ddiv
 2380              		.global	__aeabi_dadd
 2381              		.global	__aeabi_d2f
 2382              		.align	2
 2383              	.LC69:
 2384 0610 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2384      50494F3D 
 2384      352C302C 
 2384      312C300D 
 2384      00
 2385 0621 000000   		.align	2
 2386              	.LC70:
 2387 0624 41542447 		.ascii	"AT$GPSR=0\015\000"
 2387      5053523D 
 2387      300D00
 2388 062f 00       		.align	2
 2389              	.LC71:
 2390 0630 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2390      20746F20 
 2390      6C6F636B 
 2390      20475053 
 2390      3A202564 
 2391              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2392              		.align	2
 2393              		.global	modem_get_gps_coordinates
 2394              		.thumb
 2395              		.thumb_func
 2396              		.type	modem_get_gps_coordinates, %function
 2397              	modem_get_gps_coordinates:
 2398              	.LFB87:
 660:modem.c       **** 
 661:modem.c       ****     
 662:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 663:modem.c       **** gps_t modem_get_gps_coordinates(){
 2399              		.loc 1 663 0
 2400              		.cfi_startproc
 2401              		@ args = 0, pretend = 0, frame = 56
 2402              		@ frame_needed = 1, uses_anonymous_args = 0
 2403 0000 B0B5     		push	{r4, r5, r7, lr}
 2404              		.cfi_def_cfa_offset 16
 2405              		.cfi_offset 4, -16
 2406              		.cfi_offset 5, -12
 2407              		.cfi_offset 7, -8
 2408              		.cfi_offset 14, -4
 2409 0002 90B0     		sub	sp, sp, #64
 2410              		.cfi_def_cfa_offset 80
 2411 0004 02AF     		add	r7, sp, #8
 2412              		.cfi_def_cfa 7, 72
 2413 0006 7860     		str	r0, [r7, #4]
 664:modem.c       ****     gps_t gps;
 665:modem.c       ****     gps.altitude = 0;
 2414              		.loc 1 665 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 59


 2415 0008 4FF00003 		mov	r3, #0
 2416 000c FB61     		str	r3, [r7, #28]	@ float
 666:modem.c       ****     gps.longitude = 0;
 2417              		.loc 1 666 0
 2418 000e 4FF00003 		mov	r3, #0
 2419 0012 BB61     		str	r3, [r7, #24]	@ float
 667:modem.c       ****     gps.latitude = 0;
 2420              		.loc 1 667 0
 2421 0014 4FF00003 		mov	r3, #0
 2422 0018 7B61     		str	r3, [r7, #20]	@ float
 668:modem.c       ****     gps.time_to_lock =0;
 2423              		.loc 1 668 0
 2424 001a 0023     		movs	r3, #0
 2425 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 669:modem.c       ****     gps.valid = 0;
 2426              		.loc 1 669 0
 2427 001e 0023     		movs	r3, #0
 2428 0020 87F82230 		strb	r3, [r7, #34]
 670:modem.c       ****     
 671:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 672:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2429              		.loc 1 672 0
 2430 0024 7F4B     		ldr	r3, .L147
 2431 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2432 0028 042B     		cmp	r3, #4
 2433 002a 07D0     		beq	.L138
 673:modem.c       ****         return gps;//where valid = 0
 2434              		.loc 1 673 0
 2435 002c 7B68     		ldr	r3, [r7, #4]
 2436 002e 1C46     		mov	r4, r3
 2437 0030 07F11403 		add	r3, r7, #20
 2438 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2439 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2440 003a EFE0     		b	.L137
 2441              	.L138:
 674:modem.c       ****     }
 675:modem.c       ****     
 676:modem.c       ****     long lock_time = getTimeStamp();
 2442              		.loc 1 676 0
 2443 003c FFF7FEFF 		bl	getTimeStamp
 2444 0040 3863     		str	r0, [r7, #48]
 677:modem.c       ****     
 678:modem.c       ****     // Enable this for the LTER module
 679:modem.c       ****     // Enable GPS Low-Dropout Regulator
 680:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2445              		.loc 1 680 0
 2446 0042 4FF4FA62 		mov	r2, #2000
 2447 0046 7849     		ldr	r1, .L147+4
 2448 0048 7848     		ldr	r0, .L147+8
 2449 004a FFF7FEFF 		bl	at_write_command
 681:modem.c       ****     
 682:modem.c       ****     // Configure SUPL connection params
 683:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2450              		.loc 1 683 0
 2451 004e 4FF4FA62 		mov	r2, #2000
 2452 0052 7549     		ldr	r1, .L147+4
 2453 0054 7648     		ldr	r0, .L147+12
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 60


 2454 0056 FFF7FEFF 		bl	at_write_command
 684:modem.c       ****     
 685:modem.c       ****     // Use SUPL2.0
 686:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2455              		.loc 1 686 0
 2456 005a 4FF4FA62 		mov	r2, #2000
 2457 005e 7249     		ldr	r1, .L147+4
 2458 0060 7448     		ldr	r0, .L147+16
 2459 0062 FFF7FEFF 		bl	at_write_command
 687:modem.c       ****     
 688:modem.c       ****     // Enable AGPS service
 689:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2460              		.loc 1 689 0
 2461 0066 4FF4FA62 		mov	r2, #2000
 2462 006a 6F49     		ldr	r1, .L147+4
 2463 006c 7248     		ldr	r0, .L147+20
 2464 006e FFF7FEFF 		bl	at_write_command
 690:modem.c       ****     
 691:modem.c       ****     // Chose SUPL server, use google public service
 692:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2465              		.loc 1 692 0
 2466 0072 4FF4FA62 		mov	r2, #2000
 2467 0076 6C49     		ldr	r1, .L147+4
 2468 0078 7048     		ldr	r0, .L147+24
 2469 007a FFF7FEFF 		bl	at_write_command
 693:modem.c       ****     
 694:modem.c       ****     //pdp context has to be locked to carrier for this to work
 695:modem.c       ****     
 696:modem.c       ****     // Unlock context since it needs to be used by modem
 697:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2470              		.loc 1 697 0
 2471 007e 4FF4FA62 		mov	r2, #2000
 2472 0082 6949     		ldr	r1, .L147+4
 2473 0084 6E48     		ldr	r0, .L147+28
 2474 0086 FFF7FEFF 		bl	at_write_command
 698:modem.c       ****     
 699:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2475              		.loc 1 699 0
 2476 008a 4FF4FA62 		mov	r2, #2000
 2477 008e 6649     		ldr	r1, .L147+4
 2478 0090 6C48     		ldr	r0, .L147+32
 2479 0092 FFF7FEFF 		bl	at_write_command
 700:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 701:modem.c       ****     
 702:modem.c       ****     // Relock the context
 703:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2480              		.loc 1 703 0
 2481 0096 42F21072 		movw	r2, #10000
 2482 009a 6349     		ldr	r1, .L147+4
 2483 009c 6A48     		ldr	r0, .L147+36
 2484 009e FFF7FEFF 		bl	at_write_command
 704:modem.c       ****     
 705:modem.c       ****     //start AGPS service
 706:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2485              		.loc 1 706 0
 2486 00a2 4FF4FA62 		mov	r2, #2000
 2487 00a6 6049     		ldr	r1, .L147+4
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 61


 2488 00a8 6848     		ldr	r0, .L147+40
 2489 00aa FFF7FEFF 		bl	at_write_command
 707:modem.c       ****     
 708:modem.c       ****     
 709:modem.c       ****     // Start the AGPS service
 710:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 711:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 712:modem.c       ****     
 713:modem.c       ****     
 714:modem.c       ****  
 715:modem.c       ****     uint8 gps_status = 0;
 2490              		.loc 1 715 0
 2491 00ae 0023     		movs	r3, #0
 2492 00b0 87F82F30 		strb	r3, [r7, #47]
 2493              	.LBB15:
 716:modem.c       ****     for(uint16 i=0;i<200;i++){
 2494              		.loc 1 716 0
 2495 00b4 0023     		movs	r3, #0
 2496 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2497 00b8 13E0     		b	.L140
 2498              	.L143:
 717:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2499              		.loc 1 717 0
 2500 00ba 4FF4FA62 		mov	r2, #2000
 2501 00be 6449     		ldr	r1, .L147+44
 2502 00c0 6448     		ldr	r0, .L147+48
 2503 00c2 FFF7FEFF 		bl	at_write_command
 2504 00c6 0346     		mov	r3, r0
 2505 00c8 87F82F30 		strb	r3, [r7, #47]
 718:modem.c       ****         if(gps_status){
 2506              		.loc 1 718 0
 2507 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2508 00d0 002B     		cmp	r3, #0
 2509 00d2 0AD1     		bne	.L146
 719:modem.c       ****             break;   
 720:modem.c       ****         }
 721:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2510              		.loc 1 721 0 discriminator 2
 2511 00d4 4FF47A70 		mov	r0, #1000
 2512 00d8 FFF7FEFF 		bl	CyDelay
 716:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2513              		.loc 1 716 0 discriminator 2
 2514 00dc FB8E     		ldrh	r3, [r7, #54]
 2515 00de 0133     		adds	r3, r3, #1
 2516 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2517              	.L140:
 716:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2518              		.loc 1 716 0 is_stmt 0 discriminator 1
 2519 00e2 FB8E     		ldrh	r3, [r7, #54]
 2520 00e4 C72B     		cmp	r3, #199
 2521 00e6 E8D9     		bls	.L143
 2522 00e8 00E0     		b	.L142
 2523              	.L146:
 719:modem.c       ****             break;   
 2524              		.loc 1 719 0 is_stmt 1
 2525 00ea 00BF     		nop
 2526              	.L142:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 62


 2527              	.LBE15:
 722:modem.c       ****     }
 723:modem.c       ****     
 724:modem.c       ****     //parse data here
 725:modem.c       ****     
 726:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 727:modem.c       ****     float lat;
 728:modem.c       ****     float lon;
 729:modem.c       ****     float alt;
 730:modem.c       ****     
 731:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 732:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 733:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2528              		.loc 1 733 0
 2529 00ec 5A49     		ldr	r1, .L147+52
 2530 00ee 5B48     		ldr	r0, .L147+56
 2531 00f0 FFF7FEFF 		bl	strstr
 2532 00f4 B862     		str	r0, [r7, #40]
 734:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 735:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 736:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2533              		.loc 1 736 0
 2534 00f6 07F10C01 		add	r1, r7, #12
 2535 00fa 07F11002 		add	r2, r7, #16
 2536 00fe 07F10803 		add	r3, r7, #8
 2537 0102 0093     		str	r3, [sp]
 2538 0104 0B46     		mov	r3, r1
 2539 0106 5649     		ldr	r1, .L147+60
 2540 0108 B86A     		ldr	r0, [r7, #40]
 2541 010a FFF7FEFF 		bl	sscanf
 2542 010e 7862     		str	r0, [r7, #36]
 737:modem.c       ****     if(match >= 3){
 2543              		.loc 1 737 0
 2544 0110 7B6A     		ldr	r3, [r7, #36]
 2545 0112 022B     		cmp	r3, #2
 2546 0114 60DD     		ble	.L144
 738:modem.c       ****         // Calculate lat and lon
 739:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 740:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 741:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2547              		.loc 1 741 0
 2548 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2549 0118 5249     		ldr	r1, .L147+64
 2550 011a 1846     		mov	r0, r3
 2551 011c FFF7FEFF 		bl	__aeabi_fdiv
 2552 0120 0346     		mov	r3, r0
 2553 0122 1846     		mov	r0, r3
 2554 0124 FFF7FEFF 		bl	floorf
 2555 0128 0346     		mov	r3, r0
 2556 012a 1846     		mov	r0, r3
 2557 012c FFF7FEFF 		bl	__aeabi_f2d
 2558 0130 0446     		mov	r4, r0
 2559 0132 0D46     		mov	r5, r1
 2560 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2561 0136 1846     		mov	r0, r3
 2562 0138 FFF7FEFF 		bl	__aeabi_f2d
 2563 013c 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 63


 2564 0140 494B     		ldr	r3, .L147+68
 2565 0142 FFF7FEFF 		bl	fmod
 2566 0146 4FF00002 		mov	r2, #0
 2567 014a 484B     		ldr	r3, .L147+72
 2568 014c FFF7FEFF 		bl	__aeabi_ddiv
 2569 0150 0246     		mov	r2, r0
 2570 0152 0B46     		mov	r3, r1
 2571 0154 2046     		mov	r0, r4
 2572 0156 2946     		mov	r1, r5
 2573 0158 FFF7FEFF 		bl	__aeabi_dadd
 2574 015c 0346     		mov	r3, r0
 2575 015e 0C46     		mov	r4, r1
 2576 0160 1846     		mov	r0, r3
 2577 0162 2146     		mov	r1, r4
 2578 0164 FFF7FEFF 		bl	__aeabi_d2f
 2579 0168 0346     		mov	r3, r0
 2580 016a 3B61     		str	r3, [r7, #16]	@ float
 742:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2581              		.loc 1 742 0
 2582 016c FB68     		ldr	r3, [r7, #12]	@ float
 2583 016e 3D49     		ldr	r1, .L147+64
 2584 0170 1846     		mov	r0, r3
 2585 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2586 0176 0346     		mov	r3, r0
 2587 0178 1846     		mov	r0, r3
 2588 017a FFF7FEFF 		bl	floorf
 2589 017e 0346     		mov	r3, r0
 2590 0180 1846     		mov	r0, r3
 2591 0182 FFF7FEFF 		bl	__aeabi_f2d
 2592 0186 0446     		mov	r4, r0
 2593 0188 0D46     		mov	r5, r1
 2594 018a FB68     		ldr	r3, [r7, #12]	@ float
 2595 018c 1846     		mov	r0, r3
 2596 018e FFF7FEFF 		bl	__aeabi_f2d
 2597 0192 4FF00002 		mov	r2, #0
 2598 0196 344B     		ldr	r3, .L147+68
 2599 0198 FFF7FEFF 		bl	fmod
 2600 019c 4FF00002 		mov	r2, #0
 2601 01a0 324B     		ldr	r3, .L147+72
 2602 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2603 01a6 0246     		mov	r2, r0
 2604 01a8 0B46     		mov	r3, r1
 2605 01aa 2046     		mov	r0, r4
 2606 01ac 2946     		mov	r1, r5
 2607 01ae FFF7FEFF 		bl	__aeabi_dadd
 2608 01b2 0346     		mov	r3, r0
 2609 01b4 0C46     		mov	r4, r1
 2610 01b6 1846     		mov	r0, r3
 2611 01b8 2146     		mov	r1, r4
 2612 01ba FFF7FEFF 		bl	__aeabi_d2f
 2613 01be 0346     		mov	r3, r0
 2614 01c0 83F00043 		eor	r3, r3, #-2147483648
 2615 01c4 FB60     		str	r3, [r7, #12]	@ float
 743:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2616              		.loc 1 743 0
 2617 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2618 01c8 FB61     		str	r3, [r7, #28]	@ float
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 64


 744:modem.c       ****         gps.latitude = lat;
 2619              		.loc 1 744 0
 2620 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2621 01cc 7B61     		str	r3, [r7, #20]	@ float
 745:modem.c       ****         gps.longitude = lon;
 2622              		.loc 1 745 0
 2623 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2624 01d0 BB61     		str	r3, [r7, #24]	@ float
 746:modem.c       ****         gps.valid = 1;
 2625              		.loc 1 746 0
 2626 01d2 0123     		movs	r3, #1
 2627 01d4 87F82230 		strb	r3, [r7, #34]
 2628              	.L144:
 747:modem.c       ****     }
 748:modem.c       ****     
 749:modem.c       ****     // Disable LDO, just in case
 750:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2629              		.loc 1 750 0
 2630 01d8 4FF4FA62 		mov	r2, #2000
 2631 01dc 1249     		ldr	r1, .L147+4
 2632 01de 2448     		ldr	r0, .L147+76
 2633 01e0 FFF7FEFF 		bl	at_write_command
 751:modem.c       ****     
 752:modem.c       ****     // Flush modem's GPS data, just in case
 753:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2634              		.loc 1 753 0
 2635 01e4 4FF4FA62 		mov	r2, #2000
 2636 01e8 0F49     		ldr	r1, .L147+4
 2637 01ea 2248     		ldr	r0, .L147+80
 2638 01ec FFF7FEFF 		bl	at_write_command
 754:modem.c       ****     
 755:modem.c       ****     
 756:modem.c       ****     
 757:modem.c       ****     
 758:modem.c       ****     
 759:modem.c       ****     /* Relevant to 3g modem, can ignore
 760:modem.c       ****     
 761:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 762:modem.c       ****     //AT$GPSQOS=50,50,100,0
 763:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 764:modem.c       ****     
 765:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 766:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 767:modem.c       ****     
 768:modem.c       ****     //unlock contedt, simnce its being used by modem
 769:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 770:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 771:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 772:modem.c       ****     
 773:modem.c       ****     //unlock contedt, simnce its being used by modem
 774:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 775:modem.c       ****     
 776:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 777:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 778:modem.c       ****     
 779:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 780:modem.c       ****    uint8 gps_status = 0;
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 65


 781:modem.c       ****     for(uint16 i=0;i<200;i++){
 782:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 783:modem.c       ****         if(gps_status){
 784:modem.c       ****             break;   
 785:modem.c       ****         }
 786:modem.c       ****   }
 787:modem.c       ****     
 788:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 789:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 790:modem.c       ****     if(gps_status){
 791:modem.c       ****         float lat,lon,alt = 0;
 792:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 793:modem.c       ****             gps.altitude = alt;
 794:modem.c       ****             gps.latitude = lat/60;
 795:modem.c       ****             gps.longitude = lon/60;
 796:modem.c       ****             gps.valid = 1;
 797:modem.c       ****         }
 798:modem.c       ****         
 799:modem.c       ****     }
 800:modem.c       ****     
 801:modem.c       ****     //turn off gps
 802:modem.c       ****     //AT$GPSP=0
 803:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 804:modem.c       ****     
 805:modem.c       ****     */
 806:modem.c       **** 
 807:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 808:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2639              		.loc 1 808 0
 2640 01f0 FFF7FEFF 		bl	getTimeStamp
 2641 01f4 0246     		mov	r2, r0
 2642 01f6 3B6B     		ldr	r3, [r7, #48]
 2643 01f8 D31A     		subs	r3, r2, r3
 2644 01fa 3B63     		str	r3, [r7, #48]
 809:modem.c       ****     gps.time_to_lock = lock_time;
 2645              		.loc 1 809 0
 2646 01fc 3B6B     		ldr	r3, [r7, #48]
 2647 01fe 9BB2     		uxth	r3, r3
 2648 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 810:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2649              		.loc 1 810 0
 2650 0202 3B8C     		ldrh	r3, [r7, #32]
 2651 0204 1A46     		mov	r2, r3
 2652 0206 1C49     		ldr	r1, .L147+84
 2653 0208 0020     		movs	r0, #0
 2654 020a FFF7FEFF 		bl	printNotif
 811:modem.c       ****     
 812:modem.c       ****     return gps;
 2655              		.loc 1 812 0
 2656 020e 7B68     		ldr	r3, [r7, #4]
 2657 0210 1C46     		mov	r4, r3
 2658 0212 07F11403 		add	r3, r7, #20
 2659 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2660 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2661              	.L137:
 813:modem.c       ****     
 814:modem.c       **** }
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 66


 2662              		.loc 1 814 0
 2663 021c 7868     		ldr	r0, [r7, #4]
 2664 021e 3837     		adds	r7, r7, #56
 2665              		.cfi_def_cfa_offset 16
 2666 0220 BD46     		mov	sp, r7
 2667              		.cfi_def_cfa_register 13
 2668              		@ sp needed
 2669 0222 B0BD     		pop	{r4, r5, r7, pc}
 2670              	.L148:
 2671              		.align	2
 2672              	.L147:
 2673 0224 00000000 		.word	modem_state
 2674 0228 00000000 		.word	.LC0
 2675 022c 38050000 		.word	.LC57
 2676 0230 4C050000 		.word	.LC58
 2677 0234 5C050000 		.word	.LC59
 2678 0238 68050000 		.word	.LC60
 2679 023c 78050000 		.word	.LC61
 2680 0240 9C050000 		.word	.LC62
 2681 0244 AC050000 		.word	.LC63
 2682 0248 D8020000 		.word	.LC27
 2683 024c BC050000 		.word	.LC64
 2684 0250 D4050000 		.word	.LC65
 2685 0254 D8050000 		.word	.LC66
 2686 0258 E4050000 		.word	.LC67
 2687 025c 00000000 		.word	uart_received_string
 2688 0260 F0050000 		.word	.LC68
 2689 0264 0000C842 		.word	1120403456
 2690 0268 00005940 		.word	1079574528
 2691 026c 00004E40 		.word	1078853632
 2692 0270 10060000 		.word	.LC69
 2693 0274 24060000 		.word	.LC70
 2694 0278 30060000 		.word	.LC71
 2695              		.cfi_endproc
 2696              	.LFE87:
 2697              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2698              		.text
 2699              	.Letext0:
 2700              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2701              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2702              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2703              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2704              		.file 6 "testing.h"
 2705              		.file 7 "modem.h"
 2706              		.file 8 "data.h"
 2707              		.file 9 "notoriOS.h"
 2708              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2709              		.section	.debug_info,"",%progbits
 2710              	.Ldebug_info0:
 2711 0000 780B0000 		.4byte	0xb78
 2712 0004 0400     		.2byte	0x4
 2713 0006 00000000 		.4byte	.Ldebug_abbrev0
 2714 000a 04       		.byte	0x4
 2715 000b 01       		.uleb128 0x1
 2716 000c 54000000 		.4byte	.LASF152
 2717 0010 0C       		.byte	0xc
 2718 0011 B2030000 		.4byte	.LASF153
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 67


 2719 0015 29040000 		.4byte	.LASF154
 2720 0019 30000000 		.4byte	.Ldebug_ranges0+0x30
 2721 001d 00000000 		.4byte	0
 2722 0021 00000000 		.4byte	.Ldebug_line0
 2723 0025 02       		.uleb128 0x2
 2724 0026 01       		.byte	0x1
 2725 0027 06       		.byte	0x6
 2726 0028 57010000 		.4byte	.LASF0
 2727 002c 03       		.uleb128 0x3
 2728 002d 28000000 		.4byte	.LASF4
 2729 0031 02       		.byte	0x2
 2730 0032 1D       		.byte	0x1d
 2731 0033 37000000 		.4byte	0x37
 2732 0037 02       		.uleb128 0x2
 2733 0038 01       		.byte	0x1
 2734 0039 08       		.byte	0x8
 2735 003a AF050000 		.4byte	.LASF1
 2736 003e 02       		.uleb128 0x2
 2737 003f 02       		.byte	0x2
 2738 0040 05       		.byte	0x5
 2739 0041 EA030000 		.4byte	.LASF2
 2740 0045 02       		.uleb128 0x2
 2741 0046 02       		.byte	0x2
 2742 0047 07       		.byte	0x7
 2743 0048 50020000 		.4byte	.LASF3
 2744 004c 03       		.uleb128 0x3
 2745 004d FF030000 		.4byte	.LASF5
 2746 0051 02       		.byte	0x2
 2747 0052 3F       		.byte	0x3f
 2748 0053 57000000 		.4byte	0x57
 2749 0057 02       		.uleb128 0x2
 2750 0058 04       		.byte	0x4
 2751 0059 05       		.byte	0x5
 2752 005a DF010000 		.4byte	.LASF6
 2753 005e 03       		.uleb128 0x3
 2754 005f 73020000 		.4byte	.LASF7
 2755 0063 02       		.byte	0x2
 2756 0064 41       		.byte	0x41
 2757 0065 69000000 		.4byte	0x69
 2758 0069 02       		.uleb128 0x2
 2759 006a 04       		.byte	0x4
 2760 006b 07       		.byte	0x7
 2761 006c 1F030000 		.4byte	.LASF8
 2762 0070 02       		.uleb128 0x2
 2763 0071 08       		.byte	0x8
 2764 0072 05       		.byte	0x5
 2765 0073 49010000 		.4byte	.LASF9
 2766 0077 02       		.uleb128 0x2
 2767 0078 08       		.byte	0x8
 2768 0079 07       		.byte	0x7
 2769 007a EF000000 		.4byte	.LASF10
 2770 007e 04       		.uleb128 0x4
 2771 007f 04       		.byte	0x4
 2772 0080 05       		.byte	0x5
 2773 0081 696E7400 		.ascii	"int\000"
 2774 0085 02       		.uleb128 0x2
 2775 0086 04       		.byte	0x4
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 68


 2776 0087 07       		.byte	0x7
 2777 0088 89060000 		.4byte	.LASF11
 2778 008c 03       		.uleb128 0x3
 2779 008d C0070000 		.4byte	.LASF12
 2780 0091 03       		.byte	0x3
 2781 0092 18       		.byte	0x18
 2782 0093 2C000000 		.4byte	0x2c
 2783 0097 03       		.uleb128 0x3
 2784 0098 A7050000 		.4byte	.LASF13
 2785 009c 03       		.byte	0x3
 2786 009d 2C       		.byte	0x2c
 2787 009e 4C000000 		.4byte	0x4c
 2788 00a2 03       		.uleb128 0x3
 2789 00a3 50070000 		.4byte	.LASF14
 2790 00a7 03       		.byte	0x3
 2791 00a8 30       		.byte	0x30
 2792 00a9 5E000000 		.4byte	0x5e
 2793 00ad 05       		.uleb128 0x5
 2794 00ae 17020000 		.4byte	.LASF15
 2795 00b2 04       		.byte	0x4
 2796 00b3 9201     		.2byte	0x192
 2797 00b5 37000000 		.4byte	0x37
 2798 00b9 05       		.uleb128 0x5
 2799 00ba 0B000000 		.4byte	.LASF16
 2800 00be 04       		.byte	0x4
 2801 00bf 9301     		.2byte	0x193
 2802 00c1 45000000 		.4byte	0x45
 2803 00c5 05       		.uleb128 0x5
 2804 00c6 63020000 		.4byte	.LASF17
 2805 00ca 04       		.byte	0x4
 2806 00cb 9401     		.2byte	0x194
 2807 00cd 69000000 		.4byte	0x69
 2808 00d1 05       		.uleb128 0x5
 2809 00d2 C8070000 		.4byte	.LASF18
 2810 00d6 04       		.byte	0x4
 2811 00d7 9601     		.2byte	0x196
 2812 00d9 3E000000 		.4byte	0x3e
 2813 00dd 05       		.uleb128 0x5
 2814 00de 24020000 		.4byte	.LASF19
 2815 00e2 04       		.byte	0x4
 2816 00e3 9701     		.2byte	0x197
 2817 00e5 57000000 		.4byte	0x57
 2818 00e9 02       		.uleb128 0x2
 2819 00ea 04       		.byte	0x4
 2820 00eb 04       		.byte	0x4
 2821 00ec 6F050000 		.4byte	.LASF20
 2822 00f0 02       		.uleb128 0x2
 2823 00f1 08       		.byte	0x8
 2824 00f2 04       		.byte	0x4
 2825 00f3 1D020000 		.4byte	.LASF21
 2826 00f7 02       		.uleb128 0x2
 2827 00f8 01       		.byte	0x1
 2828 00f9 08       		.byte	0x8
 2829 00fa 70060000 		.4byte	.LASF22
 2830 00fe 02       		.uleb128 0x2
 2831 00ff 08       		.byte	0x8
 2832 0100 04       		.byte	0x4
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 69


 2833 0101 64060000 		.4byte	.LASF23
 2834 0105 02       		.uleb128 0x2
 2835 0106 04       		.byte	0x4
 2836 0107 07       		.byte	0x7
 2837 0108 BF040000 		.4byte	.LASF24
 2838 010c 06       		.uleb128 0x6
 2839 010d 04       		.byte	0x4
 2840 010e F7000000 		.4byte	0xf7
 2841 0112 06       		.uleb128 0x6
 2842 0113 04       		.byte	0x4
 2843 0114 18010000 		.4byte	0x118
 2844 0118 07       		.uleb128 0x7
 2845 0119 F7000000 		.4byte	0xf7
 2846 011d 08       		.uleb128 0x8
 2847 011e F7000000 		.4byte	0xf7
 2848 0122 2D010000 		.4byte	0x12d
 2849 0126 09       		.uleb128 0x9
 2850 0127 05010000 		.4byte	0x105
 2851 012b 17       		.byte	0x17
 2852 012c 00       		.byte	0
 2853 012d 0A       		.uleb128 0xa
 2854 012e 746D00   		.ascii	"tm\000"
 2855 0131 24       		.byte	0x24
 2856 0132 05       		.byte	0x5
 2857 0133 21       		.byte	0x21
 2858 0134 A5010000 		.4byte	0x1a5
 2859 0138 0B       		.uleb128 0xb
 2860 0139 59070000 		.4byte	.LASF25
 2861 013d 05       		.byte	0x5
 2862 013e 23       		.byte	0x23
 2863 013f 7E000000 		.4byte	0x7e
 2864 0143 00       		.byte	0
 2865 0144 0B       		.uleb128 0xb
 2866 0145 B8040000 		.4byte	.LASF26
 2867 0149 05       		.byte	0x5
 2868 014a 24       		.byte	0x24
 2869 014b 7E000000 		.4byte	0x7e
 2870 014f 04       		.byte	0x4
 2871 0150 0B       		.uleb128 0xb
 2872 0151 18000000 		.4byte	.LASF27
 2873 0155 05       		.byte	0x5
 2874 0156 25       		.byte	0x25
 2875 0157 7E000000 		.4byte	0x7e
 2876 015b 08       		.byte	0x8
 2877 015c 0B       		.uleb128 0xb
 2878 015d 3B070000 		.4byte	.LASF28
 2879 0161 05       		.byte	0x5
 2880 0162 26       		.byte	0x26
 2881 0163 7E000000 		.4byte	0x7e
 2882 0167 0C       		.byte	0xc
 2883 0168 0B       		.uleb128 0xb
 2884 0169 95020000 		.4byte	.LASF29
 2885 016d 05       		.byte	0x5
 2886 016e 27       		.byte	0x27
 2887 016f 7E000000 		.4byte	0x7e
 2888 0173 10       		.byte	0x10
 2889 0174 0B       		.uleb128 0xb
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 70


 2890 0175 E1020000 		.4byte	.LASF30
 2891 0179 05       		.byte	0x5
 2892 017a 28       		.byte	0x28
 2893 017b 7E000000 		.4byte	0x7e
 2894 017f 14       		.byte	0x14
 2895 0180 0B       		.uleb128 0xb
 2896 0181 45060000 		.4byte	.LASF31
 2897 0185 05       		.byte	0x5
 2898 0186 29       		.byte	0x29
 2899 0187 7E000000 		.4byte	0x7e
 2900 018b 18       		.byte	0x18
 2901 018c 0B       		.uleb128 0xb
 2902 018d 20000000 		.4byte	.LASF32
 2903 0191 05       		.byte	0x5
 2904 0192 2A       		.byte	0x2a
 2905 0193 7E000000 		.4byte	0x7e
 2906 0197 1C       		.byte	0x1c
 2907 0198 0B       		.uleb128 0xb
 2908 0199 79030000 		.4byte	.LASF33
 2909 019d 05       		.byte	0x5
 2910 019e 2B       		.byte	0x2b
 2911 019f 7E000000 		.4byte	0x7e
 2912 01a3 20       		.byte	0x20
 2913 01a4 00       		.byte	0
 2914 01a5 0C       		.uleb128 0xc
 2915 01a6 8101     		.2byte	0x181
 2916 01a8 06       		.byte	0x6
 2917 01a9 0A       		.byte	0xa
 2918 01aa D3010000 		.4byte	0x1d3
 2919 01ae 0B       		.uleb128 0xb
 2920 01af 09050000 		.4byte	.LASF34
 2921 01b3 06       		.byte	0x6
 2922 01b4 0C       		.byte	0xc
 2923 01b5 D3010000 		.4byte	0x1d3
 2924 01b9 00       		.byte	0
 2925 01ba 0B       		.uleb128 0xb
 2926 01bb 91070000 		.4byte	.LASF35
 2927 01bf 06       		.byte	0x6
 2928 01c0 0D       		.byte	0xd
 2929 01c1 AD000000 		.4byte	0xad
 2930 01c5 80       		.byte	0x80
 2931 01c6 0B       		.uleb128 0xb
 2932 01c7 19060000 		.4byte	.LASF36
 2933 01cb 06       		.byte	0x6
 2934 01cc 0F       		.byte	0xf
 2935 01cd E3010000 		.4byte	0x1e3
 2936 01d1 81       		.byte	0x81
 2937 01d2 00       		.byte	0
 2938 01d3 08       		.uleb128 0x8
 2939 01d4 F7000000 		.4byte	0xf7
 2940 01d8 E3010000 		.4byte	0x1e3
 2941 01dc 09       		.uleb128 0x9
 2942 01dd 05010000 		.4byte	0x105
 2943 01e1 7F       		.byte	0x7f
 2944 01e2 00       		.byte	0
 2945 01e3 08       		.uleb128 0x8
 2946 01e4 F7000000 		.4byte	0xf7
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 71


 2947 01e8 F3010000 		.4byte	0x1f3
 2948 01ec 09       		.uleb128 0x9
 2949 01ed 05010000 		.4byte	0x105
 2950 01f1 FF       		.byte	0xff
 2951 01f2 00       		.byte	0
 2952 01f3 03       		.uleb128 0x3
 2953 01f4 01060000 		.4byte	.LASF37
 2954 01f8 06       		.byte	0x6
 2955 01f9 10       		.byte	0x10
 2956 01fa A5010000 		.4byte	0x1a5
 2957 01fe 0D       		.uleb128 0xd
 2958 01ff 3C       		.byte	0x3c
 2959 0200 07       		.byte	0x7
 2960 0201 2E       		.byte	0x2e
 2961 0202 2B020000 		.4byte	0x22b
 2962 0206 0B       		.uleb128 0xb
 2963 0207 34070000 		.4byte	.LASF38
 2964 020b 07       		.byte	0x7
 2965 020c 2F       		.byte	0x2f
 2966 020d 2B020000 		.4byte	0x22b
 2967 0211 00       		.byte	0
 2968 0212 0B       		.uleb128 0xb
 2969 0213 9B060000 		.4byte	.LASF39
 2970 0217 07       		.byte	0x7
 2971 0218 30       		.byte	0x30
 2972 0219 2B020000 		.4byte	0x22b
 2973 021d 14       		.byte	0x14
 2974 021e 0B       		.uleb128 0xb
 2975 021f 14060000 		.4byte	.LASF40
 2976 0223 07       		.byte	0x7
 2977 0224 31       		.byte	0x31
 2978 0225 2B020000 		.4byte	0x22b
 2979 0229 28       		.byte	0x28
 2980 022a 00       		.byte	0
 2981 022b 08       		.uleb128 0x8
 2982 022c F7000000 		.4byte	0xf7
 2983 0230 3B020000 		.4byte	0x23b
 2984 0234 09       		.uleb128 0x9
 2985 0235 05010000 		.4byte	0x105
 2986 0239 13       		.byte	0x13
 2987 023a 00       		.byte	0
 2988 023b 03       		.uleb128 0x3
 2989 023c AF060000 		.4byte	.LASF41
 2990 0240 07       		.byte	0x7
 2991 0241 32       		.byte	0x32
 2992 0242 FE010000 		.4byte	0x1fe
 2993 0246 0D       		.uleb128 0xd
 2994 0247 20       		.byte	0x20
 2995 0248 07       		.byte	0x7
 2996 0249 34       		.byte	0x34
 2997 024a AF020000 		.4byte	0x2af
 2998 024e 0B       		.uleb128 0xb
 2999 024f D9010000 		.4byte	.LASF42
 3000 0253 07       		.byte	0x7
 3001 0254 35       		.byte	0x35
 3002 0255 7E000000 		.4byte	0x7e
 3003 0259 00       		.byte	0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 72


 3004 025a 0E       		.uleb128 0xe
 3005 025b 62657200 		.ascii	"ber\000"
 3006 025f 07       		.byte	0x7
 3007 0260 36       		.byte	0x36
 3008 0261 7E000000 		.4byte	0x7e
 3009 0265 04       		.byte	0x4
 3010 0266 0B       		.uleb128 0xb
 3011 0267 E2050000 		.4byte	.LASF43
 3012 026b 07       		.byte	0x7
 3013 026c 37       		.byte	0x37
 3014 026d 7E000000 		.4byte	0x7e
 3015 0271 08       		.byte	0x8
 3016 0272 0B       		.uleb128 0xb
 3017 0273 63010000 		.4byte	.LASF44
 3018 0277 07       		.byte	0x7
 3019 0278 38       		.byte	0x38
 3020 0279 7E000000 		.4byte	0x7e
 3021 027d 0C       		.byte	0xc
 3022 027e 0B       		.uleb128 0xb
 3023 027f D3050000 		.4byte	.LASF45
 3024 0283 07       		.byte	0x7
 3025 0284 39       		.byte	0x39
 3026 0285 7E000000 		.4byte	0x7e
 3027 0289 10       		.byte	0x10
 3028 028a 0B       		.uleb128 0xb
 3029 028b 20060000 		.4byte	.LASF46
 3030 028f 07       		.byte	0x7
 3031 0290 3A       		.byte	0x3a
 3032 0291 7E000000 		.4byte	0x7e
 3033 0295 14       		.byte	0x14
 3034 0296 0B       		.uleb128 0xb
 3035 0297 85010000 		.4byte	.LASF47
 3036 029b 07       		.byte	0x7
 3037 029c 3B       		.byte	0x3b
 3038 029d 7E000000 		.4byte	0x7e
 3039 02a1 18       		.byte	0x18
 3040 02a2 0B       		.uleb128 0xb
 3041 02a3 CD030000 		.4byte	.LASF48
 3042 02a7 07       		.byte	0x7
 3043 02a8 3C       		.byte	0x3c
 3044 02a9 7E000000 		.4byte	0x7e
 3045 02ad 1C       		.byte	0x1c
 3046 02ae 00       		.byte	0
 3047 02af 03       		.uleb128 0x3
 3048 02b0 25060000 		.4byte	.LASF49
 3049 02b4 07       		.byte	0x7
 3050 02b5 3D       		.byte	0x3d
 3051 02b6 46020000 		.4byte	0x246
 3052 02ba 0D       		.uleb128 0xd
 3053 02bb 10       		.byte	0x10
 3054 02bc 07       		.byte	0x7
 3055 02bd 3F       		.byte	0x3f
 3056 02be FF020000 		.4byte	0x2ff
 3057 02c2 0B       		.uleb128 0xb
 3058 02c3 00050000 		.4byte	.LASF50
 3059 02c7 07       		.byte	0x7
 3060 02c8 40       		.byte	0x40
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 73


 3061 02c9 E9000000 		.4byte	0xe9
 3062 02cd 00       		.byte	0
 3063 02ce 0B       		.uleb128 0xb
 3064 02cf 4A000000 		.4byte	.LASF51
 3065 02d3 07       		.byte	0x7
 3066 02d4 41       		.byte	0x41
 3067 02d5 E9000000 		.4byte	0xe9
 3068 02d9 04       		.byte	0x4
 3069 02da 0B       		.uleb128 0xb
 3070 02db 0E020000 		.4byte	.LASF52
 3071 02df 07       		.byte	0x7
 3072 02e0 42       		.byte	0x42
 3073 02e1 E9000000 		.4byte	0xe9
 3074 02e5 08       		.byte	0x8
 3075 02e6 0B       		.uleb128 0xb
 3076 02e7 5F030000 		.4byte	.LASF53
 3077 02eb 07       		.byte	0x7
 3078 02ec 43       		.byte	0x43
 3079 02ed B9000000 		.4byte	0xb9
 3080 02f1 0C       		.byte	0xc
 3081 02f2 0B       		.uleb128 0xb
 3082 02f3 43070000 		.4byte	.LASF54
 3083 02f7 07       		.byte	0x7
 3084 02f8 44       		.byte	0x44
 3085 02f9 AD000000 		.4byte	0xad
 3086 02fd 0E       		.byte	0xe
 3087 02fe 00       		.byte	0
 3088 02ff 03       		.uleb128 0x3
 3089 0300 BC060000 		.4byte	.LASF55
 3090 0304 07       		.byte	0x7
 3091 0305 46       		.byte	0x46
 3092 0306 BA020000 		.4byte	0x2ba
 3093 030a 0D       		.uleb128 0xd
 3094 030b 03       		.byte	0x3
 3095 030c 07       		.byte	0x7
 3096 030d 49       		.byte	0x49
 3097 030e 37030000 		.4byte	0x337
 3098 0312 0B       		.uleb128 0xb
 3099 0313 D4060000 		.4byte	.LASF56
 3100 0317 07       		.byte	0x7
 3101 0318 4C       		.byte	0x4c
 3102 0319 AD000000 		.4byte	0xad
 3103 031d 00       		.byte	0
 3104 031e 0B       		.uleb128 0xb
 3105 031f D8050000 		.4byte	.LASF57
 3106 0323 07       		.byte	0x7
 3107 0324 4E       		.byte	0x4e
 3108 0325 AD000000 		.4byte	0xad
 3109 0329 01       		.byte	0x1
 3110 032a 0B       		.uleb128 0xb
 3111 032b 9C020000 		.4byte	.LASF58
 3112 032f 07       		.byte	0x7
 3113 0330 51       		.byte	0x51
 3114 0331 AD000000 		.4byte	0xad
 3115 0335 02       		.byte	0x2
 3116 0336 00       		.byte	0
 3117 0337 03       		.uleb128 0x3
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 74


 3118 0338 83040000 		.4byte	.LASF59
 3119 033c 07       		.byte	0x7
 3120 033d 52       		.byte	0x52
 3121 033e 0A030000 		.4byte	0x30a
 3122 0342 0D       		.uleb128 0xd
 3123 0343 2C       		.byte	0x2c
 3124 0344 08       		.byte	0x8
 3125 0345 10       		.byte	0x10
 3126 0346 6F030000 		.4byte	0x36f
 3127 034a 0E       		.uleb128 0xe
 3128 034b 6B657900 		.ascii	"key\000"
 3129 034f 08       		.byte	0x8
 3130 0350 11       		.byte	0x11
 3131 0351 2B020000 		.4byte	0x22b
 3132 0355 00       		.byte	0
 3133 0356 0B       		.uleb128 0xb
 3134 0357 12000000 		.4byte	.LASF60
 3135 035b 08       		.byte	0x8
 3136 035c 12       		.byte	0x12
 3137 035d 2B020000 		.4byte	0x22b
 3138 0361 14       		.byte	0x14
 3139 0362 0B       		.uleb128 0xb
 3140 0363 32080000 		.4byte	.LASF61
 3141 0367 08       		.byte	0x8
 3142 0368 13       		.byte	0x13
 3143 0369 DD000000 		.4byte	0xdd
 3144 036d 28       		.byte	0x28
 3145 036e 00       		.byte	0
 3146 036f 03       		.uleb128 0x3
 3147 0370 09030000 		.4byte	.LASF62
 3148 0374 08       		.byte	0x8
 3149 0375 14       		.byte	0x14
 3150 0376 42030000 		.4byte	0x342
 3151 037a 0D       		.uleb128 0xd
 3152 037b 06       		.byte	0x6
 3153 037c 09       		.byte	0x9
 3154 037d 2D       		.byte	0x2d
 3155 037e B3030000 		.4byte	0x3b3
 3156 0382 0B       		.uleb128 0xb
 3157 0383 68010000 		.4byte	.LASF63
 3158 0387 09       		.byte	0x9
 3159 0388 2F       		.byte	0x2f
 3160 0389 B9000000 		.4byte	0xb9
 3161 038d 00       		.byte	0
 3162 038e 0B       		.uleb128 0xb
 3163 038f E8010000 		.4byte	.LASF64
 3164 0393 09       		.byte	0x9
 3165 0394 30       		.byte	0x30
 3166 0395 D1000000 		.4byte	0xd1
 3167 0399 02       		.byte	0x2
 3168 039a 0B       		.uleb128 0xb
 3169 039b E0070000 		.4byte	.LASF65
 3170 039f 09       		.byte	0x9
 3171 03a0 31       		.byte	0x31
 3172 03a1 AD000000 		.4byte	0xad
 3173 03a5 04       		.byte	0x4
 3174 03a6 0B       		.uleb128 0xb
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 75


 3175 03a7 32000000 		.4byte	.LASF66
 3176 03ab 09       		.byte	0x9
 3177 03ac 32       		.byte	0x32
 3178 03ad AD000000 		.4byte	0xad
 3179 03b1 05       		.byte	0x5
 3180 03b2 00       		.byte	0
 3181 03b3 03       		.uleb128 0x3
 3182 03b4 A1050000 		.4byte	.LASF67
 3183 03b8 09       		.byte	0x9
 3184 03b9 35       		.byte	0x35
 3185 03ba BE030000 		.4byte	0x3be
 3186 03be 0F       		.uleb128 0xf
 3187 03bf 7A030000 		.4byte	0x37a
 3188 03c3 0D       		.uleb128 0xd
 3189 03c4 1C       		.byte	0x1c
 3190 03c5 09       		.byte	0x9
 3191 03c6 38       		.byte	0x38
 3192 03c7 E4030000 		.4byte	0x3e4
 3193 03cb 0B       		.uleb128 0xb
 3194 03cc 82030000 		.4byte	.LASF68
 3195 03d0 09       		.byte	0x9
 3196 03d1 3A       		.byte	0x3a
 3197 03d2 E4030000 		.4byte	0x3e4
 3198 03d6 00       		.byte	0
 3199 03d7 0B       		.uleb128 0xb
 3200 03d8 95030000 		.4byte	.LASF69
 3201 03dc 09       		.byte	0x9
 3202 03dd 3B       		.byte	0x3b
 3203 03de 1D010000 		.4byte	0x11d
 3204 03e2 04       		.byte	0x4
 3205 03e3 00       		.byte	0
 3206 03e4 06       		.uleb128 0x6
 3207 03e5 04       		.byte	0x4
 3208 03e6 3B020000 		.4byte	0x23b
 3209 03ea 03       		.uleb128 0x3
 3210 03eb 78040000 		.4byte	.LASF70
 3211 03ef 09       		.byte	0x9
 3212 03f0 3D       		.byte	0x3d
 3213 03f1 C3030000 		.4byte	0x3c3
 3214 03f5 0D       		.uleb128 0xd
 3215 03f6 68       		.byte	0x68
 3216 03f7 09       		.byte	0x9
 3217 03f8 43       		.byte	0x43
 3218 03f9 16040000 		.4byte	0x416
 3219 03fd 0B       		.uleb128 0xb
 3220 03fe 8D030000 		.4byte	.LASF71
 3221 0402 09       		.byte	0x9
 3222 0403 48       		.byte	0x48
 3223 0404 16040000 		.4byte	0x416
 3224 0408 00       		.byte	0
 3225 0409 0B       		.uleb128 0xb
 3226 040a 71030000 		.4byte	.LASF72
 3227 040e 09       		.byte	0x9
 3228 040f 49       		.byte	0x49
 3229 0410 7E000000 		.4byte	0x7e
 3230 0414 64       		.byte	0x64
 3231 0415 00       		.byte	0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 76


 3232 0416 08       		.uleb128 0x8
 3233 0417 F7000000 		.4byte	0xf7
 3234 041b 26040000 		.4byte	0x426
 3235 041f 09       		.uleb128 0x9
 3236 0420 05010000 		.4byte	0x105
 3237 0424 63       		.byte	0x63
 3238 0425 00       		.byte	0
 3239 0426 03       		.uleb128 0x3
 3240 0427 B1070000 		.4byte	.LASF73
 3241 042b 09       		.byte	0x9
 3242 042c 4F       		.byte	0x4f
 3243 042d F5030000 		.4byte	0x3f5
 3244 0431 10       		.uleb128 0x10
 3245 0432 94050000 		.4byte	.LASF105
 3246 0436 01       		.byte	0x1
 3247 0437 16       		.byte	0x16
 3248 0438 00000000 		.4byte	.LFB64
 3249 043c 44000000 		.4byte	.LFE64-.LFB64
 3250 0440 01       		.uleb128 0x1
 3251 0441 9C       		.byte	0x9c
 3252 0442 11       		.uleb128 0x11
 3253 0443 75050000 		.4byte	.LASF74
 3254 0447 01       		.byte	0x1
 3255 0448 20       		.byte	0x20
 3256 0449 00000000 		.4byte	.LFB65
 3257 044d 6C000000 		.4byte	.LFE65-.LFB65
 3258 0451 01       		.uleb128 0x1
 3259 0452 9C       		.byte	0x9c
 3260 0453 11       		.uleb128 0x11
 3261 0454 1C070000 		.4byte	.LASF75
 3262 0458 01       		.byte	0x1
 3263 0459 3A       		.byte	0x3a
 3264 045a 00000000 		.4byte	.LFB66
 3265 045e 32000000 		.4byte	.LFE66-.LFB66
 3266 0462 01       		.uleb128 0x1
 3267 0463 9C       		.byte	0x9c
 3268 0464 11       		.uleb128 0x11
 3269 0465 F3020000 		.4byte	.LASF76
 3270 0469 01       		.byte	0x1
 3271 046a 4A       		.byte	0x4a
 3272 046b 00000000 		.4byte	.LFB67
 3273 046f 20000000 		.4byte	.LFE67-.LFB67
 3274 0473 01       		.uleb128 0x1
 3275 0474 9C       		.byte	0x9c
 3276 0475 11       		.uleb128 0x11
 3277 0476 21080000 		.4byte	.LASF77
 3278 047a 01       		.byte	0x1
 3279 047b 53       		.byte	0x53
 3280 047c 00000000 		.4byte	.LFB68
 3281 0480 40000000 		.4byte	.LFE68-.LFB68
 3282 0484 01       		.uleb128 0x1
 3283 0485 9C       		.byte	0x9c
 3284 0486 12       		.uleb128 0x12
 3285 0487 A3030000 		.4byte	.LASF91
 3286 048b 01       		.byte	0x1
 3287 048c 65       		.byte	0x65
 3288 048d AD000000 		.4byte	0xad
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 77


 3289 0491 00000000 		.4byte	.LFB69
 3290 0495 DC000000 		.4byte	.LFE69-.LFB69
 3291 0499 01       		.uleb128 0x1
 3292 049a 9C       		.byte	0x9c
 3293 049b FA040000 		.4byte	0x4fa
 3294 049f 13       		.uleb128 0x13
 3295 04a0 CE070000 		.4byte	.LASF78
 3296 04a4 01       		.byte	0x1
 3297 04a5 6E       		.byte	0x6e
 3298 04a6 AD000000 		.4byte	0xad
 3299 04aa 02       		.uleb128 0x2
 3300 04ab 91       		.byte	0x91
 3301 04ac 77       		.sleb128 -9
 3302 04ad 13       		.uleb128 0x13
 3303 04ae D7070000 		.4byte	.LASF79
 3304 04b2 01       		.byte	0x1
 3305 04b3 6F       		.byte	0x6f
 3306 04b4 AD000000 		.4byte	0xad
 3307 04b8 02       		.uleb128 0x2
 3308 04b9 91       		.byte	0x91
 3309 04ba 74       		.sleb128 -12
 3310 04bb 13       		.uleb128 0x13
 3311 04bc EE070000 		.4byte	.LASF80
 3312 04c0 01       		.byte	0x1
 3313 04c1 71       		.byte	0x71
 3314 04c2 57000000 		.4byte	0x57
 3315 04c6 02       		.uleb128 0x2
 3316 04c7 91       		.byte	0x91
 3317 04c8 70       		.sleb128 -16
 3318 04c9 14       		.uleb128 0x14
 3319 04ca 26000000 		.4byte	.LBB2
 3320 04ce 4A000000 		.4byte	.LBE2-.LBB2
 3321 04d2 13       		.uleb128 0x13
 3322 04d3 D7070000 		.4byte	.LASF79
 3323 04d7 01       		.byte	0x1
 3324 04d8 74       		.byte	0x74
 3325 04d9 AD000000 		.4byte	0xad
 3326 04dd 02       		.uleb128 0x2
 3327 04de 91       		.byte	0x91
 3328 04df 76       		.sleb128 -10
 3329 04e0 14       		.uleb128 0x14
 3330 04e1 2C000000 		.4byte	.LBB3
 3331 04e5 2A000000 		.4byte	.LBE3-.LBB3
 3332 04e9 13       		.uleb128 0x13
 3333 04ea 15030000 		.4byte	.LASF81
 3334 04ee 01       		.byte	0x1
 3335 04ef 76       		.byte	0x76
 3336 04f0 AD000000 		.4byte	0xad
 3337 04f4 02       		.uleb128 0x2
 3338 04f5 91       		.byte	0x91
 3339 04f6 75       		.sleb128 -11
 3340 04f7 00       		.byte	0
 3341 04f8 00       		.byte	0
 3342 04f9 00       		.byte	0
 3343 04fa 11       		.uleb128 0x11
 3344 04fb 4D060000 		.4byte	.LASF82
 3345 04ff 01       		.byte	0x1
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 78


 3346 0500 97       		.byte	0x97
 3347 0501 00000000 		.4byte	.LFB70
 3348 0505 1C000000 		.4byte	.LFE70-.LFB70
 3349 0509 01       		.uleb128 0x1
 3350 050a 9C       		.byte	0x9c
 3351 050b 11       		.uleb128 0x11
 3352 050c 33060000 		.4byte	.LASF83
 3353 0510 01       		.byte	0x1
 3354 0511 9F       		.byte	0x9f
 3355 0512 00000000 		.4byte	.LFB71
 3356 0516 28000000 		.4byte	.LFE71-.LFB71
 3357 051a 01       		.uleb128 0x1
 3358 051b 9C       		.byte	0x9c
 3359 051c 15       		.uleb128 0x15
 3360 051d 67040000 		.4byte	.LASF95
 3361 0521 01       		.byte	0x1
 3362 0522 AA       		.byte	0xaa
 3363 0523 8C000000 		.4byte	0x8c
 3364 0527 00000000 		.4byte	.LFB72
 3365 052b C8000000 		.4byte	.LFE72-.LFB72
 3366 052f 01       		.uleb128 0x1
 3367 0530 9C       		.byte	0x9c
 3368 0531 AE050000 		.4byte	0x5ae
 3369 0535 16       		.uleb128 0x16
 3370 0536 55050000 		.4byte	.LASF84
 3371 053a 01       		.byte	0x1
 3372 053b AA       		.byte	0xaa
 3373 053c 0C010000 		.4byte	0x10c
 3374 0540 02       		.uleb128 0x2
 3375 0541 91       		.byte	0x91
 3376 0542 5C       		.sleb128 -36
 3377 0543 16       		.uleb128 0x16
 3378 0544 F8070000 		.4byte	.LASF85
 3379 0548 01       		.byte	0x1
 3380 0549 AA       		.byte	0xaa
 3381 054a 0C010000 		.4byte	0x10c
 3382 054e 02       		.uleb128 0x2
 3383 054f 91       		.byte	0x91
 3384 0550 58       		.sleb128 -40
 3385 0551 16       		.uleb128 0x16
 3386 0552 40030000 		.4byte	.LASF86
 3387 0556 01       		.byte	0x1
 3388 0557 AA       		.byte	0xaa
 3389 0558 A2000000 		.4byte	0xa2
 3390 055c 02       		.uleb128 0x2
 3391 055d 91       		.byte	0x91
 3392 055e 54       		.sleb128 -44
 3393 055f 13       		.uleb128 0x13
 3394 0560 1E040000 		.4byte	.LASF87
 3395 0564 01       		.byte	0x1
 3396 0565 AC       		.byte	0xac
 3397 0566 C5000000 		.4byte	0xc5
 3398 056a 02       		.uleb128 0x2
 3399 056b 91       		.byte	0x91
 3400 056c 74       		.sleb128 -12
 3401 056d 14       		.uleb128 0x14
 3402 056e 16000000 		.4byte	.LBB4
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 79


 3403 0572 88000000 		.4byte	.LBE4-.LBB4
 3404 0576 13       		.uleb128 0x13
 3405 0577 5E050000 		.4byte	.LASF88
 3406 057b 01       		.byte	0x1
 3407 057c B0       		.byte	0xb0
 3408 057d 0C010000 		.4byte	0x10c
 3409 0581 02       		.uleb128 0x2
 3410 0582 91       		.byte	0x91
 3411 0583 64       		.sleb128 -28
 3412 0584 13       		.uleb128 0x13
 3413 0585 CD050000 		.4byte	.LASF89
 3414 0589 01       		.byte	0x1
 3415 058a B1       		.byte	0xb1
 3416 058b A2000000 		.4byte	0xa2
 3417 058f 02       		.uleb128 0x2
 3418 0590 91       		.byte	0x91
 3419 0591 6C       		.sleb128 -20
 3420 0592 17       		.uleb128 0x17
 3421 0593 6900     		.ascii	"i\000"
 3422 0595 01       		.byte	0x1
 3423 0596 B2       		.byte	0xb2
 3424 0597 A2000000 		.4byte	0xa2
 3425 059b 02       		.uleb128 0x2
 3426 059c 91       		.byte	0x91
 3427 059d 70       		.sleb128 -16
 3428 059e 13       		.uleb128 0x13
 3429 059f 6A020000 		.4byte	.LASF90
 3430 05a3 01       		.byte	0x1
 3431 05a4 B2       		.byte	0xb2
 3432 05a5 A2000000 		.4byte	0xa2
 3433 05a9 02       		.uleb128 0x2
 3434 05aa 91       		.byte	0x91
 3435 05ab 68       		.sleb128 -24
 3436 05ac 00       		.byte	0
 3437 05ad 00       		.byte	0
 3438 05ae 12       		.uleb128 0x12
 3439 05af 2A050000 		.4byte	.LASF92
 3440 05b3 01       		.byte	0x1
 3441 05b4 DE       		.byte	0xde
 3442 05b5 F3010000 		.4byte	0x1f3
 3443 05b9 00000000 		.4byte	.LFB73
 3444 05bd FC000000 		.4byte	.LFE73-.LFB73
 3445 05c1 01       		.uleb128 0x1
 3446 05c2 9C       		.byte	0x9c
 3447 05c3 05060000 		.4byte	0x605
 3448 05c7 13       		.uleb128 0x13
 3449 05c8 1E010000 		.4byte	.LASF93
 3450 05cc 01       		.byte	0x1
 3451 05cd E0       		.byte	0xe0
 3452 05ce F3010000 		.4byte	0x1f3
 3453 05d2 03       		.uleb128 0x3
 3454 05d3 91       		.byte	0x91
 3455 05d4 E47C     		.sleb128 -412
 3456 05d6 14       		.uleb128 0x14
 3457 05d7 4A000000 		.4byte	.LBB5
 3458 05db 84000000 		.4byte	.LBE5-.LBB5
 3459 05df 17       		.uleb128 0x17
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 80


 3460 05e0 6900     		.ascii	"i\000"
 3461 05e2 01       		.byte	0x1
 3462 05e3 E7       		.byte	0xe7
 3463 05e4 7E000000 		.4byte	0x7e
 3464 05e8 02       		.uleb128 0x2
 3465 05e9 91       		.byte	0x91
 3466 05ea 6C       		.sleb128 -20
 3467 05eb 14       		.uleb128 0x14
 3468 05ec 70000000 		.4byte	.LBB6
 3469 05f0 46000000 		.4byte	.LBE6-.LBB6
 3470 05f4 13       		.uleb128 0x13
 3471 05f5 43020000 		.4byte	.LASF94
 3472 05f9 01       		.byte	0x1
 3473 05fa F4       		.byte	0xf4
 3474 05fb 57000000 		.4byte	0x57
 3475 05ff 02       		.uleb128 0x2
 3476 0600 91       		.byte	0x91
 3477 0601 68       		.sleb128 -24
 3478 0602 00       		.byte	0
 3479 0603 00       		.byte	0
 3480 0604 00       		.byte	0
 3481 0605 18       		.uleb128 0x18
 3482 0606 31030000 		.4byte	.LASF96
 3483 060a 01       		.byte	0x1
 3484 060b 0801     		.2byte	0x108
 3485 060d AD000000 		.4byte	0xad
 3486 0611 00000000 		.4byte	.LFB74
 3487 0615 78000000 		.4byte	.LFE74-.LFB74
 3488 0619 01       		.uleb128 0x1
 3489 061a 9C       		.byte	0x9c
 3490 061b 76060000 		.4byte	0x676
 3491 061f 19       		.uleb128 0x19
 3492 0620 09040000 		.4byte	.LASF97
 3493 0624 01       		.byte	0x1
 3494 0625 0801     		.2byte	0x108
 3495 0627 0C010000 		.4byte	0x10c
 3496 062b 02       		.uleb128 0x2
 3497 062c 91       		.byte	0x91
 3498 062d 6C       		.sleb128 -20
 3499 062e 19       		.uleb128 0x19
 3500 062f BA030000 		.4byte	.LASF98
 3501 0633 01       		.byte	0x1
 3502 0634 0801     		.2byte	0x108
 3503 0636 12010000 		.4byte	0x112
 3504 063a 02       		.uleb128 0x2
 3505 063b 91       		.byte	0x91
 3506 063c 68       		.sleb128 -24
 3507 063d 19       		.uleb128 0x19
 3508 063e E0030000 		.4byte	.LASF99
 3509 0642 01       		.byte	0x1
 3510 0643 0801     		.2byte	0x108
 3511 0645 12010000 		.4byte	0x112
 3512 0649 02       		.uleb128 0x2
 3513 064a 91       		.byte	0x91
 3514 064b 64       		.sleb128 -28
 3515 064c 19       		.uleb128 0x19
 3516 064d C6030000 		.4byte	.LASF100
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 81


 3517 0651 01       		.byte	0x1
 3518 0652 0801     		.2byte	0x108
 3519 0654 0C010000 		.4byte	0x10c
 3520 0658 02       		.uleb128 0x2
 3521 0659 91       		.byte	0x91
 3522 065a 60       		.sleb128 -32
 3523 065b 1A       		.uleb128 0x1a
 3524 065c 6100     		.ascii	"a\000"
 3525 065e 01       		.byte	0x1
 3526 065f 0A01     		.2byte	0x10a
 3527 0661 0C010000 		.4byte	0x10c
 3528 0665 02       		.uleb128 0x2
 3529 0666 91       		.byte	0x91
 3530 0667 74       		.sleb128 -12
 3531 0668 1A       		.uleb128 0x1a
 3532 0669 6200     		.ascii	"b\000"
 3533 066b 01       		.byte	0x1
 3534 066c 0A01     		.2byte	0x10a
 3535 066e 0C010000 		.4byte	0x10c
 3536 0672 02       		.uleb128 0x2
 3537 0673 91       		.byte	0x91
 3538 0674 70       		.sleb128 -16
 3539 0675 00       		.byte	0
 3540 0676 1B       		.uleb128 0x1b
 3541 0677 75060000 		.4byte	.LASF101
 3542 067b 01       		.byte	0x1
 3543 067c 2701     		.2byte	0x127
 3544 067e AD000000 		.4byte	0xad
 3545 0682 00000000 		.4byte	.LFB75
 3546 0686 40010000 		.4byte	.LFE75-.LFB75
 3547 068a 01       		.uleb128 0x1
 3548 068b 9C       		.byte	0x9c
 3549 068c A8060000 		.4byte	0x6a8
 3550 0690 14       		.uleb128 0x14
 3551 0691 2E000000 		.4byte	.LBB7
 3552 0695 32000000 		.4byte	.LBE7-.LBB7
 3553 0699 1A       		.uleb128 0x1a
 3554 069a 6900     		.ascii	"i\000"
 3555 069c 01       		.byte	0x1
 3556 069d 3401     		.2byte	0x134
 3557 069f AD000000 		.4byte	0xad
 3558 06a3 02       		.uleb128 0x2
 3559 06a4 91       		.byte	0x91
 3560 06a5 77       		.sleb128 -9
 3561 06a6 00       		.byte	0
 3562 06a7 00       		.byte	0
 3563 06a8 1B       		.uleb128 0x1b
 3564 06a9 CE040000 		.4byte	.LASF102
 3565 06ad 01       		.byte	0x1
 3566 06ae 6F01     		.2byte	0x16f
 3567 06b0 AD000000 		.4byte	0xad
 3568 06b4 00000000 		.4byte	.LFB76
 3569 06b8 B8000000 		.4byte	.LFE76-.LFB76
 3570 06bc 01       		.uleb128 0x1
 3571 06bd 9C       		.byte	0x9c
 3572 06be EB060000 		.4byte	0x6eb
 3573 06c2 1C       		.uleb128 0x1c
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 82


 3574 06c3 91070000 		.4byte	.LASF35
 3575 06c7 01       		.byte	0x1
 3576 06c8 7301     		.2byte	0x173
 3577 06ca AD000000 		.4byte	0xad
 3578 06ce 02       		.uleb128 0x2
 3579 06cf 91       		.byte	0x91
 3580 06d0 77       		.sleb128 -9
 3581 06d1 14       		.uleb128 0x14
 3582 06d2 36000000 		.4byte	.LBB8
 3583 06d6 48000000 		.4byte	.LBE8-.LBB8
 3584 06da 1C       		.uleb128 0x1c
 3585 06db 0E040000 		.4byte	.LASF103
 3586 06df 01       		.byte	0x1
 3587 06e0 7B01     		.2byte	0x17b
 3588 06e2 EB060000 		.4byte	0x6eb
 3589 06e6 02       		.uleb128 0x2
 3590 06e7 91       		.byte	0x91
 3591 06e8 6C       		.sleb128 -20
 3592 06e9 00       		.byte	0
 3593 06ea 00       		.byte	0
 3594 06eb 08       		.uleb128 0x8
 3595 06ec F7000000 		.4byte	0xf7
 3596 06f0 FB060000 		.4byte	0x6fb
 3597 06f4 09       		.uleb128 0x9
 3598 06f5 05010000 		.4byte	0x105
 3599 06f9 09       		.byte	0x9
 3600 06fa 00       		.byte	0
 3601 06fb 1D       		.uleb128 0x1d
 3602 06fc B2010000 		.4byte	.LASF104
 3603 0700 01       		.byte	0x1
 3604 0701 8E01     		.2byte	0x18e
 3605 0703 00000000 		.4byte	.LFB77
 3606 0707 1C000000 		.4byte	.LFE77-.LFB77
 3607 070b 01       		.uleb128 0x1
 3608 070c 9C       		.byte	0x9c
 3609 070d 1E       		.uleb128 0x1e
 3610 070e E1060000 		.4byte	.LASF106
 3611 0712 01       		.byte	0x1
 3612 0713 9E01     		.2byte	0x19e
 3613 0715 AD000000 		.4byte	0xad
 3614 0719 00000000 		.4byte	.LFB78
 3615 071d 28000000 		.4byte	.LFE78-.LFB78
 3616 0721 01       		.uleb128 0x1
 3617 0722 9C       		.byte	0x9c
 3618 0723 1F       		.uleb128 0x1f
 3619 0724 48030000 		.4byte	.LASF109
 3620 0728 01       		.byte	0x1
 3621 0729 A901     		.2byte	0x1a9
 3622 072b 00000000 		.4byte	.LFB79
 3623 072f B4000000 		.4byte	.LFE79-.LFB79
 3624 0733 01       		.uleb128 0x1
 3625 0734 9C       		.byte	0x9c
 3626 0735 64070000 		.4byte	0x764
 3627 0739 20       		.uleb128 0x20
 3628 073a 00000000 		.4byte	.Ldebug_ranges0+0
 3629 073e 1C       		.uleb128 0x1c
 3630 073f D7070000 		.4byte	.LASF79
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 83


 3631 0743 01       		.byte	0x1
 3632 0744 B201     		.2byte	0x1b2
 3633 0746 AD000000 		.4byte	0xad
 3634 074a 02       		.uleb128 0x2
 3635 074b 91       		.byte	0x91
 3636 074c 77       		.sleb128 -9
 3637 074d 20       		.uleb128 0x20
 3638 074e 18000000 		.4byte	.Ldebug_ranges0+0x18
 3639 0752 1C       		.uleb128 0x1c
 3640 0753 35050000 		.4byte	.LASF107
 3641 0757 01       		.byte	0x1
 3642 0758 B801     		.2byte	0x1b8
 3643 075a 7E000000 		.4byte	0x7e
 3644 075e 02       		.uleb128 0x2
 3645 075f 91       		.byte	0x91
 3646 0760 70       		.sleb128 -16
 3647 0761 00       		.byte	0
 3648 0762 00       		.byte	0
 3649 0763 00       		.byte	0
 3650 0764 21       		.uleb128 0x21
 3651 0765 C1020000 		.4byte	.LASF108
 3652 0769 01       		.byte	0x1
 3653 076a C801     		.2byte	0x1c8
 3654 076c 00000000 		.4byte	.LFB80
 3655 0770 24000000 		.4byte	.LFE80-.LFB80
 3656 0774 01       		.uleb128 0x1
 3657 0775 9C       		.byte	0x9c
 3658 0776 1F       		.uleb128 0x1f
 3659 0777 60070000 		.4byte	.LASF110
 3660 077b 01       		.byte	0x1
 3661 077c CF01     		.2byte	0x1cf
 3662 077e 00000000 		.4byte	.LFB81
 3663 0782 20010000 		.4byte	.LFE81-.LFB81
 3664 0786 01       		.uleb128 0x1
 3665 0787 9C       		.byte	0x9c
 3666 0788 E4070000 		.4byte	0x7e4
 3667 078c 1C       		.uleb128 0x1c
 3668 078d 83070000 		.4byte	.LASF111
 3669 0791 01       		.byte	0x1
 3670 0792 D201     		.2byte	0x1d2
 3671 0794 EB060000 		.4byte	0x6eb
 3672 0798 02       		.uleb128 0x2
 3673 0799 91       		.byte	0x91
 3674 079a 64       		.sleb128 -28
 3675 079b 1C       		.uleb128 0x1c
 3676 079c 86050000 		.4byte	.LASF112
 3677 07a0 01       		.byte	0x1
 3678 07a1 D301     		.2byte	0x1d3
 3679 07a3 EB060000 		.4byte	0x6eb
 3680 07a7 02       		.uleb128 0x2
 3681 07a8 91       		.byte	0x91
 3682 07a9 58       		.sleb128 -40
 3683 07aa 1C       		.uleb128 0x1c
 3684 07ab B4020000 		.4byte	.LASF113
 3685 07af 01       		.byte	0x1
 3686 07b0 D401     		.2byte	0x1d4
 3687 07b2 EB060000 		.4byte	0x6eb
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 84


 3688 07b6 02       		.uleb128 0x2
 3689 07b7 91       		.byte	0x91
 3690 07b8 4C       		.sleb128 -52
 3691 07b9 1C       		.uleb128 0x1c
 3692 07ba 06010000 		.4byte	.LASF114
 3693 07be 01       		.byte	0x1
 3694 07bf E001     		.2byte	0x1e0
 3695 07c1 7E000000 		.4byte	0x7e
 3696 07c5 02       		.uleb128 0x2
 3697 07c6 91       		.byte	0x91
 3698 07c7 48       		.sleb128 -56
 3699 07c8 1C       		.uleb128 0x1c
 3700 07c9 9A040000 		.4byte	.LASF115
 3701 07cd 01       		.byte	0x1
 3702 07ce E001     		.2byte	0x1e0
 3703 07d0 7E000000 		.4byte	0x7e
 3704 07d4 02       		.uleb128 0x2
 3705 07d5 91       		.byte	0x91
 3706 07d6 44       		.sleb128 -60
 3707 07d7 22       		.uleb128 0x22
 3708 07d8 13040000 		.4byte	.LASF155
 3709 07dc 01       		.byte	0x1
 3710 07dd E001     		.2byte	0x1e0
 3711 07df 7E000000 		.4byte	0x7e
 3712 07e3 00       		.byte	0
 3713 07e4 1F       		.uleb128 0x1f
 3714 07e5 2A020000 		.4byte	.LASF116
 3715 07e9 01       		.byte	0x1
 3716 07ea FD01     		.2byte	0x1fd
 3717 07ec 00000000 		.4byte	.LFB82
 3718 07f0 3C010000 		.4byte	.LFE82-.LFB82
 3719 07f4 01       		.uleb128 0x1
 3720 07f5 9C       		.byte	0x9c
 3721 07f6 14080000 		.4byte	0x814
 3722 07fa 14       		.uleb128 0x14
 3723 07fb B6000000 		.4byte	.LBB13
 3724 07ff 38000000 		.4byte	.LBE13-.LBB13
 3725 0803 1C       		.uleb128 0x1c
 3726 0804 96060000 		.4byte	.LASF117
 3727 0808 01       		.byte	0x1
 3728 0809 2602     		.2byte	0x226
 3729 080b EB060000 		.4byte	0x6eb
 3730 080f 02       		.uleb128 0x2
 3731 0810 91       		.byte	0x91
 3732 0811 6C       		.sleb128 -20
 3733 0812 00       		.byte	0
 3734 0813 00       		.byte	0
 3735 0814 1B       		.uleb128 0x1b
 3736 0815 7E020000 		.4byte	.LASF118
 3737 0819 01       		.byte	0x1
 3738 081a 3902     		.2byte	0x239
 3739 081c 57000000 		.4byte	0x57
 3740 0820 00000000 		.4byte	.LFB83
 3741 0824 44010000 		.4byte	.LFE83-.LFB83
 3742 0828 01       		.uleb128 0x1
 3743 0829 9C       		.byte	0x9c
 3744 082a D0080000 		.4byte	0x8d0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 85


 3745 082e 1C       		.uleb128 0x1c
 3746 082f F4030000 		.4byte	.LASF119
 3747 0833 01       		.byte	0x1
 3748 0834 4402     		.2byte	0x244
 3749 0836 57000000 		.4byte	0x57
 3750 083a 02       		.uleb128 0x2
 3751 083b 91       		.byte	0x91
 3752 083c 74       		.sleb128 -12
 3753 083d 14       		.uleb128 0x14
 3754 083e 30000000 		.4byte	.LBB14
 3755 0842 DE000000 		.4byte	.LBE14-.LBB14
 3756 0846 1C       		.uleb128 0x1c
 3757 0847 43020000 		.4byte	.LASF94
 3758 084b 01       		.byte	0x1
 3759 084c 4902     		.2byte	0x249
 3760 084e D0080000 		.4byte	0x8d0
 3761 0852 02       		.uleb128 0x2
 3762 0853 91       		.byte	0x91
 3763 0854 54       		.sleb128 -44
 3764 0855 1A       		.uleb128 0x1a
 3765 0856 7400     		.ascii	"t\000"
 3766 0858 01       		.byte	0x1
 3767 0859 4F02     		.2byte	0x24f
 3768 085b 2D010000 		.4byte	0x12d
 3769 085f 03       		.uleb128 0x3
 3770 0860 91       		.byte	0x91
 3771 0861 947F     		.sleb128 -108
 3772 0863 1C       		.uleb128 0x1c
 3773 0864 D4010000 		.4byte	.LASF120
 3774 0868 01       		.byte	0x1
 3775 0869 5202     		.2byte	0x252
 3776 086b 7E000000 		.4byte	0x7e
 3777 086f 02       		.uleb128 0x2
 3778 0870 91       		.byte	0x91
 3779 0871 50       		.sleb128 -48
 3780 0872 1C       		.uleb128 0x1c
 3781 0873 C8040000 		.4byte	.LASF121
 3782 0877 01       		.byte	0x1
 3783 0878 5202     		.2byte	0x252
 3784 087a 7E000000 		.4byte	0x7e
 3785 087e 02       		.uleb128 0x2
 3786 087f 91       		.byte	0x91
 3787 0880 4C       		.sleb128 -52
 3788 0881 1A       		.uleb128 0x1a
 3789 0882 64617900 		.ascii	"day\000"
 3790 0886 01       		.byte	0x1
 3791 0887 5202     		.2byte	0x252
 3792 0889 7E000000 		.4byte	0x7e
 3793 088d 02       		.uleb128 0x2
 3794 088e 91       		.byte	0x91
 3795 088f 48       		.sleb128 -56
 3796 0890 1C       		.uleb128 0x1c
 3797 0891 50050000 		.4byte	.LASF122
 3798 0895 01       		.byte	0x1
 3799 0896 5202     		.2byte	0x252
 3800 0898 7E000000 		.4byte	0x7e
 3801 089c 02       		.uleb128 0x2
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 86


 3802 089d 91       		.byte	0x91
 3803 089e 44       		.sleb128 -60
 3804 089f 1C       		.uleb128 0x1c
 3805 08a0 49070000 		.4byte	.LASF123
 3806 08a4 01       		.byte	0x1
 3807 08a5 5202     		.2byte	0x252
 3808 08a7 7E000000 		.4byte	0x7e
 3809 08ab 02       		.uleb128 0x2
 3810 08ac 91       		.byte	0x91
 3811 08ad 40       		.sleb128 -64
 3812 08ae 1C       		.uleb128 0x1c
 3813 08af CD010000 		.4byte	.LASF124
 3814 08b3 01       		.byte	0x1
 3815 08b4 5202     		.2byte	0x252
 3816 08b6 7E000000 		.4byte	0x7e
 3817 08ba 03       		.uleb128 0x3
 3818 08bb 91       		.byte	0x91
 3819 08bc BC7F     		.sleb128 -68
 3820 08be 1C       		.uleb128 0x1c
 3821 08bf 00000000 		.4byte	.LASF125
 3822 08c3 01       		.byte	0x1
 3823 08c4 5202     		.2byte	0x252
 3824 08c6 7E000000 		.4byte	0x7e
 3825 08ca 03       		.uleb128 0x3
 3826 08cb 91       		.byte	0x91
 3827 08cc B87F     		.sleb128 -72
 3828 08ce 00       		.byte	0
 3829 08cf 00       		.byte	0
 3830 08d0 08       		.uleb128 0x8
 3831 08d1 F7000000 		.4byte	0xf7
 3832 08d5 E0080000 		.4byte	0x8e0
 3833 08d9 09       		.uleb128 0x9
 3834 08da 05010000 		.4byte	0x105
 3835 08de 1D       		.byte	0x1d
 3836 08df 00       		.byte	0
 3837 08e0 23       		.uleb128 0x23
 3838 08e1 FE010000 		.4byte	.LASF126
 3839 08e5 01       		.byte	0x1
 3840 08e6 7202     		.2byte	0x272
 3841 08e8 AD000000 		.4byte	0xad
 3842 08ec 00000000 		.4byte	.LFB84
 3843 08f0 14000000 		.4byte	.LFE84-.LFB84
 3844 08f4 01       		.uleb128 0x1
 3845 08f5 9C       		.byte	0x9c
 3846 08f6 1D       		.uleb128 0x1d
 3847 08f7 A8020000 		.4byte	.LASF127
 3848 08fb 01       		.byte	0x1
 3849 08fc 7702     		.2byte	0x277
 3850 08fe 00000000 		.4byte	.LFB85
 3851 0902 1A000000 		.4byte	.LFE85-.LFB85
 3852 0906 01       		.uleb128 0x1
 3853 0907 9C       		.byte	0x9c
 3854 0908 1D       		.uleb128 0x1d
 3855 0909 E2000000 		.4byte	.LASF128
 3856 090d 01       		.byte	0x1
 3857 090e 8402     		.2byte	0x284
 3858 0910 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 87


 3859 0914 2A000000 		.4byte	.LFE86-.LFB86
 3860 0918 01       		.uleb128 0x1
 3861 0919 9C       		.byte	0x9c
 3862 091a 1B       		.uleb128 0x1b
 3863 091b E7050000 		.4byte	.LASF129
 3864 091f 01       		.byte	0x1
 3865 0920 9702     		.2byte	0x297
 3866 0922 FF020000 		.4byte	0x2ff
 3867 0926 00000000 		.4byte	.LFB87
 3868 092a 7C020000 		.4byte	.LFE87-.LFB87
 3869 092e 01       		.uleb128 0x1
 3870 092f 9C       		.byte	0x9c
 3871 0930 C3090000 		.4byte	0x9c3
 3872 0934 1A       		.uleb128 0x1a
 3873 0935 67707300 		.ascii	"gps\000"
 3874 0939 01       		.byte	0x1
 3875 093a 9802     		.2byte	0x298
 3876 093c FF020000 		.4byte	0x2ff
 3877 0940 02       		.uleb128 0x2
 3878 0941 91       		.byte	0x91
 3879 0942 4C       		.sleb128 -52
 3880 0943 1C       		.uleb128 0x1c
 3881 0944 0A080000 		.4byte	.LASF130
 3882 0948 01       		.byte	0x1
 3883 0949 A402     		.2byte	0x2a4
 3884 094b 57000000 		.4byte	0x57
 3885 094f 02       		.uleb128 0x2
 3886 0950 91       		.byte	0x91
 3887 0951 68       		.sleb128 -24
 3888 0952 1C       		.uleb128 0x1c
 3889 0953 11070000 		.4byte	.LASF131
 3890 0957 01       		.byte	0x1
 3891 0958 CB02     		.2byte	0x2cb
 3892 095a AD000000 		.4byte	0xad
 3893 095e 02       		.uleb128 0x2
 3894 095f 91       		.byte	0x91
 3895 0960 67       		.sleb128 -25
 3896 0961 1A       		.uleb128 0x1a
 3897 0962 6C617400 		.ascii	"lat\000"
 3898 0966 01       		.byte	0x1
 3899 0967 D702     		.2byte	0x2d7
 3900 0969 E9000000 		.4byte	0xe9
 3901 096d 02       		.uleb128 0x2
 3902 096e 91       		.byte	0x91
 3903 096f 48       		.sleb128 -56
 3904 0970 1A       		.uleb128 0x1a
 3905 0971 6C6F6E00 		.ascii	"lon\000"
 3906 0975 01       		.byte	0x1
 3907 0976 D802     		.2byte	0x2d8
 3908 0978 E9000000 		.4byte	0xe9
 3909 097c 02       		.uleb128 0x2
 3910 097d 91       		.byte	0x91
 3911 097e 44       		.sleb128 -60
 3912 097f 1A       		.uleb128 0x1a
 3913 0980 616C7400 		.ascii	"alt\000"
 3914 0984 01       		.byte	0x1
 3915 0985 D902     		.2byte	0x2d9
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 88


 3916 0987 E9000000 		.4byte	0xe9
 3917 098b 02       		.uleb128 0x2
 3918 098c 91       		.byte	0x91
 3919 098d 40       		.sleb128 -64
 3920 098e 1A       		.uleb128 0x1a
 3921 098f 733100   		.ascii	"s1\000"
 3922 0992 01       		.byte	0x1
 3923 0993 DD02     		.2byte	0x2dd
 3924 0995 0C010000 		.4byte	0x10c
 3925 0999 02       		.uleb128 0x2
 3926 099a 91       		.byte	0x91
 3927 099b 60       		.sleb128 -32
 3928 099c 1C       		.uleb128 0x1c
 3929 099d 35050000 		.4byte	.LASF107
 3930 09a1 01       		.byte	0x1
 3931 09a2 E002     		.2byte	0x2e0
 3932 09a4 7E000000 		.4byte	0x7e
 3933 09a8 02       		.uleb128 0x2
 3934 09a9 91       		.byte	0x91
 3935 09aa 5C       		.sleb128 -36
 3936 09ab 14       		.uleb128 0x14
 3937 09ac B4000000 		.4byte	.LBB15
 3938 09b0 38000000 		.4byte	.LBE15-.LBB15
 3939 09b4 1A       		.uleb128 0x1a
 3940 09b5 6900     		.ascii	"i\000"
 3941 09b7 01       		.byte	0x1
 3942 09b8 CC02     		.2byte	0x2cc
 3943 09ba B9000000 		.4byte	0xb9
 3944 09be 02       		.uleb128 0x2
 3945 09bf 91       		.byte	0x91
 3946 09c0 6E       		.sleb128 -18
 3947 09c1 00       		.byte	0
 3948 09c2 00       		.byte	0
 3949 09c3 24       		.uleb128 0x24
 3950 09c4 30010000 		.4byte	.LASF132
 3951 09c8 0A       		.byte	0xa
 3952 09c9 1207     		.2byte	0x712
 3953 09cb CF090000 		.4byte	0x9cf
 3954 09cf 0F       		.uleb128 0xf
 3955 09d0 97000000 		.4byte	0x97
 3956 09d4 25       		.uleb128 0x25
 3957 09d5 12010000 		.4byte	.LASF133
 3958 09d9 07       		.byte	0x7
 3959 09da 16       		.byte	0x16
 3960 09db AD000000 		.4byte	0xad
 3961 09df 05       		.uleb128 0x5
 3962 09e0 03       		.byte	0x3
 3963 09e1 00000000 		.4byte	modem_state
 3964 09e5 25       		.uleb128 0x25
 3965 09e6 FA060000 		.4byte	.LASF134
 3966 09ea 07       		.byte	0x7
 3967 09eb 55       		.byte	0x55
 3968 09ec DD000000 		.4byte	0xdd
 3969 09f0 05       		.uleb128 0x5
 3970 09f1 03       		.byte	0x3
 3971 09f2 00000000 		.4byte	modem_start_time_stamp
 3972 09f6 25       		.uleb128 0x25
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 89


 3973 09f7 82030000 		.4byte	.LASF68
 3974 09fb 07       		.byte	0x7
 3975 09fc 56       		.byte	0x56
 3976 09fd 3B020000 		.4byte	0x23b
 3977 0a01 05       		.uleb128 0x5
 3978 0a02 03       		.byte	0x3
 3979 0a03 00000000 		.4byte	modem_info
 3980 0a07 25       		.uleb128 0x25
 3981 0a08 3D010000 		.4byte	.LASF135
 3982 0a0c 07       		.byte	0x7
 3983 0a0d 57       		.byte	0x57
 3984 0a0e AF020000 		.4byte	0x2af
 3985 0a12 05       		.uleb128 0x5
 3986 0a13 03       		.byte	0x3
 3987 0a14 00000000 		.4byte	modem_stats
 3988 0a18 25       		.uleb128 0x25
 3989 0a19 3B050000 		.4byte	.LASF136
 3990 0a1d 07       		.byte	0x7
 3991 0a1e 58       		.byte	0x58
 3992 0a1f 37030000 		.4byte	0x337
 3993 0a23 05       		.uleb128 0x5
 3994 0a24 03       		.byte	0x3
 3995 0a25 00000000 		.4byte	updatable_parameters
 3996 0a29 25       		.uleb128 0x25
 3997 0a2a A6040000 		.4byte	.LASF137
 3998 0a2e 08       		.byte	0x8
 3999 0a2f 1D       		.byte	0x1d
 4000 0a30 B9000000 		.4byte	0xb9
 4001 0a34 05       		.uleb128 0x5
 4002 0a35 03       		.byte	0x3
 4003 0a36 00000000 		.4byte	dataPointsInStack
 4004 0a3a 25       		.uleb128 0x25
 4005 0a3b 98070000 		.4byte	.LASF138
 4006 0a3f 08       		.byte	0x8
 4007 0a40 1E       		.byte	0x1e
 4008 0a41 B9000000 		.4byte	0xb9
 4009 0a45 05       		.uleb128 0x5
 4010 0a46 03       		.byte	0x3
 4011 0a47 00000000 		.4byte	dataPointsInStackDesired
 4012 0a4b 08       		.uleb128 0x8
 4013 0a4c 6F030000 		.4byte	0x36f
 4014 0a50 5B0A0000 		.4byte	0xa5b
 4015 0a54 09       		.uleb128 0x9
 4016 0a55 05010000 		.4byte	0x105
 4017 0a59 95       		.byte	0x95
 4018 0a5a 00       		.byte	0
 4019 0a5b 25       		.uleb128 0x25
 4020 0a5c 6C030000 		.4byte	.LASF139
 4021 0a60 08       		.byte	0x8
 4022 0a61 1F       		.byte	0x1f
 4023 0a62 4B0A0000 		.4byte	0xa4b
 4024 0a66 05       		.uleb128 0x5
 4025 0a67 03       		.byte	0x3
 4026 0a68 00000000 		.4byte	data
 4027 0a6c 08       		.uleb128 0x8
 4028 0a6d F7000000 		.4byte	0xf7
 4029 0a71 7D0A0000 		.4byte	0xa7d
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 90


 4030 0a75 26       		.uleb128 0x26
 4031 0a76 05010000 		.4byte	0x105
 4032 0a7a 0F27     		.2byte	0x270f
 4033 0a7c 00       		.byte	0
 4034 0a7d 25       		.uleb128 0x25
 4035 0a7e 14080000 		.4byte	.LASF140
 4036 0a82 09       		.byte	0x9
 4037 0a83 17       		.byte	0x17
 4038 0a84 6C0A0000 		.4byte	0xa6c
 4039 0a88 05       		.uleb128 0x5
 4040 0a89 03       		.byte	0x3
 4041 0a8a 00000000 		.4byte	http_request
 4042 0a8e 25       		.uleb128 0x25
 4043 0a8f A8010000 		.4byte	.LASF141
 4044 0a93 09       		.byte	0x9
 4045 0a94 18       		.byte	0x18
 4046 0a95 6C0A0000 		.4byte	0xa6c
 4047 0a99 05       		.uleb128 0x5
 4048 0a9a 03       		.byte	0x3
 4049 0a9b 00000000 		.4byte	http_body
 4050 0a9f 08       		.uleb128 0x8
 4051 0aa0 F7000000 		.4byte	0xf7
 4052 0aa4 AF0A0000 		.4byte	0xaaf
 4053 0aa8 09       		.uleb128 0x9
 4054 0aa9 05010000 		.4byte	0x105
 4055 0aad C7       		.byte	0xc7
 4056 0aae 00       		.byte	0
 4057 0aaf 25       		.uleb128 0x25
 4058 0ab0 A4060000 		.4byte	.LASF142
 4059 0ab4 09       		.byte	0x9
 4060 0ab5 19       		.byte	0x19
 4061 0ab6 9F0A0000 		.4byte	0xa9f
 4062 0aba 05       		.uleb128 0x5
 4063 0abb 03       		.byte	0x3
 4064 0abc 00000000 		.4byte	http_route
 4065 0ac0 25       		.uleb128 0x25
 4066 0ac1 08060000 		.4byte	.LASF143
 4067 0ac5 09       		.byte	0x9
 4068 0ac6 40       		.byte	0x40
 4069 0ac7 EA030000 		.4byte	0x3ea
 4070 0acb 05       		.uleb128 0x5
 4071 0acc 03       		.byte	0x3
 4072 0acd 00000000 		.4byte	system_info
 4073 0ad1 25       		.uleb128 0x25
 4074 0ad2 BD050000 		.4byte	.LASF144
 4075 0ad6 09       		.byte	0x9
 4076 0ad7 52       		.byte	0x52
 4077 0ad8 26040000 		.4byte	0x426
 4078 0adc 05       		.uleb128 0x5
 4079 0add 03       		.byte	0x3
 4080 0ade 00000000 		.4byte	system_settings
 4081 0ae2 25       		.uleb128 0x25
 4082 0ae3 23010000 		.4byte	.LASF145
 4083 0ae7 09       		.byte	0x9
 4084 0ae8 6E       		.byte	0x6e
 4085 0ae9 B3030000 		.4byte	0x3b3
 4086 0aed 05       		.uleb128 0x5
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 91


 4087 0aee 03       		.byte	0x3
 4088 0aef 00000000 		.4byte	alarmMeasure
 4089 0af3 25       		.uleb128 0x25
 4090 0af4 77010000 		.4byte	.LASF146
 4091 0af8 09       		.byte	0x9
 4092 0af9 6F       		.byte	0x6f
 4093 0afa AD000000 		.4byte	0xad
 4094 0afe 05       		.uleb128 0x5
 4095 0aff 03       		.byte	0x3
 4096 0b00 00000000 		.4byte	timeToMeasure
 4097 0b04 25       		.uleb128 0x25
 4098 0b05 E9020000 		.4byte	.LASF147
 4099 0b09 09       		.byte	0x9
 4100 0b0a 70       		.byte	0x70
 4101 0b0b B3030000 		.4byte	0x3b3
 4102 0b0f 05       		.uleb128 0x5
 4103 0b10 03       		.byte	0x3
 4104 0b11 00000000 		.4byte	alarmSync
 4105 0b15 25       		.uleb128 0x25
 4106 0b16 9D010000 		.4byte	.LASF148
 4107 0b1a 09       		.byte	0x9
 4108 0b1b 71       		.byte	0x71
 4109 0b1c AD000000 		.4byte	0xad
 4110 0b20 05       		.uleb128 0x5
 4111 0b21 03       		.byte	0x3
 4112 0b22 00000000 		.4byte	timeToSync
 4113 0b26 25       		.uleb128 0x25
 4114 0b27 13050000 		.4byte	.LASF149
 4115 0b2b 09       		.byte	0x9
 4116 0b2c 72       		.byte	0x72
 4117 0b2d AD000000 		.4byte	0xad
 4118 0b31 05       		.uleb128 0x5
 4119 0b32 03       		.byte	0x3
 4120 0b33 00000000 		.4byte	timeToSycnRemoteParams
 4121 0b37 27       		.uleb128 0x27
 4122 0b38 68657900 		.ascii	"hey\000"
 4123 0b3c 09       		.byte	0x9
 4124 0b3d 73       		.byte	0x73
 4125 0b3e AD000000 		.4byte	0xad
 4126 0b42 05       		.uleb128 0x5
 4127 0b43 03       		.byte	0x3
 4128 0b44 00000000 		.4byte	hey
 4129 0b48 08       		.uleb128 0x8
 4130 0b49 F7000000 		.4byte	0xf7
 4131 0b4d 590B0000 		.4byte	0xb59
 4132 0b51 26       		.uleb128 0x26
 4133 0b52 05010000 		.4byte	0x105
 4134 0b56 FF03     		.2byte	0x3ff
 4135 0b58 00       		.byte	0
 4136 0b59 25       		.uleb128 0x25
 4137 0b5a EB040000 		.4byte	.LASF150
 4138 0b5e 01       		.byte	0x1
 4139 0b5f 09       		.byte	0x9
 4140 0b60 480B0000 		.4byte	0xb48
 4141 0b64 05       		.uleb128 0x5
 4142 0b65 03       		.byte	0x3
 4143 0b66 00000000 		.4byte	uart_received_string
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 92


 4144 0b6a 25       		.uleb128 0x25
 4145 0b6b C2060000 		.4byte	.LASF151
 4146 0b6f 01       		.byte	0x1
 4147 0b70 0A       		.byte	0xa
 4148 0b71 D1000000 		.4byte	0xd1
 4149 0b75 05       		.uleb128 0x5
 4150 0b76 03       		.byte	0x3
 4151 0b77 00000000 		.4byte	uart_string_index
 4152 0b7b 00       		.byte	0
 4153              		.section	.debug_abbrev,"",%progbits
 4154              	.Ldebug_abbrev0:
 4155 0000 01       		.uleb128 0x1
 4156 0001 11       		.uleb128 0x11
 4157 0002 01       		.byte	0x1
 4158 0003 25       		.uleb128 0x25
 4159 0004 0E       		.uleb128 0xe
 4160 0005 13       		.uleb128 0x13
 4161 0006 0B       		.uleb128 0xb
 4162 0007 03       		.uleb128 0x3
 4163 0008 0E       		.uleb128 0xe
 4164 0009 1B       		.uleb128 0x1b
 4165 000a 0E       		.uleb128 0xe
 4166 000b 55       		.uleb128 0x55
 4167 000c 17       		.uleb128 0x17
 4168 000d 11       		.uleb128 0x11
 4169 000e 01       		.uleb128 0x1
 4170 000f 10       		.uleb128 0x10
 4171 0010 17       		.uleb128 0x17
 4172 0011 00       		.byte	0
 4173 0012 00       		.byte	0
 4174 0013 02       		.uleb128 0x2
 4175 0014 24       		.uleb128 0x24
 4176 0015 00       		.byte	0
 4177 0016 0B       		.uleb128 0xb
 4178 0017 0B       		.uleb128 0xb
 4179 0018 3E       		.uleb128 0x3e
 4180 0019 0B       		.uleb128 0xb
 4181 001a 03       		.uleb128 0x3
 4182 001b 0E       		.uleb128 0xe
 4183 001c 00       		.byte	0
 4184 001d 00       		.byte	0
 4185 001e 03       		.uleb128 0x3
 4186 001f 16       		.uleb128 0x16
 4187 0020 00       		.byte	0
 4188 0021 03       		.uleb128 0x3
 4189 0022 0E       		.uleb128 0xe
 4190 0023 3A       		.uleb128 0x3a
 4191 0024 0B       		.uleb128 0xb
 4192 0025 3B       		.uleb128 0x3b
 4193 0026 0B       		.uleb128 0xb
 4194 0027 49       		.uleb128 0x49
 4195 0028 13       		.uleb128 0x13
 4196 0029 00       		.byte	0
 4197 002a 00       		.byte	0
 4198 002b 04       		.uleb128 0x4
 4199 002c 24       		.uleb128 0x24
 4200 002d 00       		.byte	0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 93


 4201 002e 0B       		.uleb128 0xb
 4202 002f 0B       		.uleb128 0xb
 4203 0030 3E       		.uleb128 0x3e
 4204 0031 0B       		.uleb128 0xb
 4205 0032 03       		.uleb128 0x3
 4206 0033 08       		.uleb128 0x8
 4207 0034 00       		.byte	0
 4208 0035 00       		.byte	0
 4209 0036 05       		.uleb128 0x5
 4210 0037 16       		.uleb128 0x16
 4211 0038 00       		.byte	0
 4212 0039 03       		.uleb128 0x3
 4213 003a 0E       		.uleb128 0xe
 4214 003b 3A       		.uleb128 0x3a
 4215 003c 0B       		.uleb128 0xb
 4216 003d 3B       		.uleb128 0x3b
 4217 003e 05       		.uleb128 0x5
 4218 003f 49       		.uleb128 0x49
 4219 0040 13       		.uleb128 0x13
 4220 0041 00       		.byte	0
 4221 0042 00       		.byte	0
 4222 0043 06       		.uleb128 0x6
 4223 0044 0F       		.uleb128 0xf
 4224 0045 00       		.byte	0
 4225 0046 0B       		.uleb128 0xb
 4226 0047 0B       		.uleb128 0xb
 4227 0048 49       		.uleb128 0x49
 4228 0049 13       		.uleb128 0x13
 4229 004a 00       		.byte	0
 4230 004b 00       		.byte	0
 4231 004c 07       		.uleb128 0x7
 4232 004d 26       		.uleb128 0x26
 4233 004e 00       		.byte	0
 4234 004f 49       		.uleb128 0x49
 4235 0050 13       		.uleb128 0x13
 4236 0051 00       		.byte	0
 4237 0052 00       		.byte	0
 4238 0053 08       		.uleb128 0x8
 4239 0054 01       		.uleb128 0x1
 4240 0055 01       		.byte	0x1
 4241 0056 49       		.uleb128 0x49
 4242 0057 13       		.uleb128 0x13
 4243 0058 01       		.uleb128 0x1
 4244 0059 13       		.uleb128 0x13
 4245 005a 00       		.byte	0
 4246 005b 00       		.byte	0
 4247 005c 09       		.uleb128 0x9
 4248 005d 21       		.uleb128 0x21
 4249 005e 00       		.byte	0
 4250 005f 49       		.uleb128 0x49
 4251 0060 13       		.uleb128 0x13
 4252 0061 2F       		.uleb128 0x2f
 4253 0062 0B       		.uleb128 0xb
 4254 0063 00       		.byte	0
 4255 0064 00       		.byte	0
 4256 0065 0A       		.uleb128 0xa
 4257 0066 13       		.uleb128 0x13
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 94


 4258 0067 01       		.byte	0x1
 4259 0068 03       		.uleb128 0x3
 4260 0069 08       		.uleb128 0x8
 4261 006a 0B       		.uleb128 0xb
 4262 006b 0B       		.uleb128 0xb
 4263 006c 3A       		.uleb128 0x3a
 4264 006d 0B       		.uleb128 0xb
 4265 006e 3B       		.uleb128 0x3b
 4266 006f 0B       		.uleb128 0xb
 4267 0070 01       		.uleb128 0x1
 4268 0071 13       		.uleb128 0x13
 4269 0072 00       		.byte	0
 4270 0073 00       		.byte	0
 4271 0074 0B       		.uleb128 0xb
 4272 0075 0D       		.uleb128 0xd
 4273 0076 00       		.byte	0
 4274 0077 03       		.uleb128 0x3
 4275 0078 0E       		.uleb128 0xe
 4276 0079 3A       		.uleb128 0x3a
 4277 007a 0B       		.uleb128 0xb
 4278 007b 3B       		.uleb128 0x3b
 4279 007c 0B       		.uleb128 0xb
 4280 007d 49       		.uleb128 0x49
 4281 007e 13       		.uleb128 0x13
 4282 007f 38       		.uleb128 0x38
 4283 0080 0B       		.uleb128 0xb
 4284 0081 00       		.byte	0
 4285 0082 00       		.byte	0
 4286 0083 0C       		.uleb128 0xc
 4287 0084 13       		.uleb128 0x13
 4288 0085 01       		.byte	0x1
 4289 0086 0B       		.uleb128 0xb
 4290 0087 05       		.uleb128 0x5
 4291 0088 3A       		.uleb128 0x3a
 4292 0089 0B       		.uleb128 0xb
 4293 008a 3B       		.uleb128 0x3b
 4294 008b 0B       		.uleb128 0xb
 4295 008c 01       		.uleb128 0x1
 4296 008d 13       		.uleb128 0x13
 4297 008e 00       		.byte	0
 4298 008f 00       		.byte	0
 4299 0090 0D       		.uleb128 0xd
 4300 0091 13       		.uleb128 0x13
 4301 0092 01       		.byte	0x1
 4302 0093 0B       		.uleb128 0xb
 4303 0094 0B       		.uleb128 0xb
 4304 0095 3A       		.uleb128 0x3a
 4305 0096 0B       		.uleb128 0xb
 4306 0097 3B       		.uleb128 0x3b
 4307 0098 0B       		.uleb128 0xb
 4308 0099 01       		.uleb128 0x1
 4309 009a 13       		.uleb128 0x13
 4310 009b 00       		.byte	0
 4311 009c 00       		.byte	0
 4312 009d 0E       		.uleb128 0xe
 4313 009e 0D       		.uleb128 0xd
 4314 009f 00       		.byte	0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 95


 4315 00a0 03       		.uleb128 0x3
 4316 00a1 08       		.uleb128 0x8
 4317 00a2 3A       		.uleb128 0x3a
 4318 00a3 0B       		.uleb128 0xb
 4319 00a4 3B       		.uleb128 0x3b
 4320 00a5 0B       		.uleb128 0xb
 4321 00a6 49       		.uleb128 0x49
 4322 00a7 13       		.uleb128 0x13
 4323 00a8 38       		.uleb128 0x38
 4324 00a9 0B       		.uleb128 0xb
 4325 00aa 00       		.byte	0
 4326 00ab 00       		.byte	0
 4327 00ac 0F       		.uleb128 0xf
 4328 00ad 35       		.uleb128 0x35
 4329 00ae 00       		.byte	0
 4330 00af 49       		.uleb128 0x49
 4331 00b0 13       		.uleb128 0x13
 4332 00b1 00       		.byte	0
 4333 00b2 00       		.byte	0
 4334 00b3 10       		.uleb128 0x10
 4335 00b4 2E       		.uleb128 0x2e
 4336 00b5 00       		.byte	0
 4337 00b6 3F       		.uleb128 0x3f
 4338 00b7 19       		.uleb128 0x19
 4339 00b8 03       		.uleb128 0x3
 4340 00b9 0E       		.uleb128 0xe
 4341 00ba 3A       		.uleb128 0x3a
 4342 00bb 0B       		.uleb128 0xb
 4343 00bc 3B       		.uleb128 0x3b
 4344 00bd 0B       		.uleb128 0xb
 4345 00be 27       		.uleb128 0x27
 4346 00bf 19       		.uleb128 0x19
 4347 00c0 11       		.uleb128 0x11
 4348 00c1 01       		.uleb128 0x1
 4349 00c2 12       		.uleb128 0x12
 4350 00c3 06       		.uleb128 0x6
 4351 00c4 40       		.uleb128 0x40
 4352 00c5 18       		.uleb128 0x18
 4353 00c6 9642     		.uleb128 0x2116
 4354 00c8 19       		.uleb128 0x19
 4355 00c9 00       		.byte	0
 4356 00ca 00       		.byte	0
 4357 00cb 11       		.uleb128 0x11
 4358 00cc 2E       		.uleb128 0x2e
 4359 00cd 00       		.byte	0
 4360 00ce 3F       		.uleb128 0x3f
 4361 00cf 19       		.uleb128 0x19
 4362 00d0 03       		.uleb128 0x3
 4363 00d1 0E       		.uleb128 0xe
 4364 00d2 3A       		.uleb128 0x3a
 4365 00d3 0B       		.uleb128 0xb
 4366 00d4 3B       		.uleb128 0x3b
 4367 00d5 0B       		.uleb128 0xb
 4368 00d6 11       		.uleb128 0x11
 4369 00d7 01       		.uleb128 0x1
 4370 00d8 12       		.uleb128 0x12
 4371 00d9 06       		.uleb128 0x6
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 96


 4372 00da 40       		.uleb128 0x40
 4373 00db 18       		.uleb128 0x18
 4374 00dc 9642     		.uleb128 0x2116
 4375 00de 19       		.uleb128 0x19
 4376 00df 00       		.byte	0
 4377 00e0 00       		.byte	0
 4378 00e1 12       		.uleb128 0x12
 4379 00e2 2E       		.uleb128 0x2e
 4380 00e3 01       		.byte	0x1
 4381 00e4 3F       		.uleb128 0x3f
 4382 00e5 19       		.uleb128 0x19
 4383 00e6 03       		.uleb128 0x3
 4384 00e7 0E       		.uleb128 0xe
 4385 00e8 3A       		.uleb128 0x3a
 4386 00e9 0B       		.uleb128 0xb
 4387 00ea 3B       		.uleb128 0x3b
 4388 00eb 0B       		.uleb128 0xb
 4389 00ec 49       		.uleb128 0x49
 4390 00ed 13       		.uleb128 0x13
 4391 00ee 11       		.uleb128 0x11
 4392 00ef 01       		.uleb128 0x1
 4393 00f0 12       		.uleb128 0x12
 4394 00f1 06       		.uleb128 0x6
 4395 00f2 40       		.uleb128 0x40
 4396 00f3 18       		.uleb128 0x18
 4397 00f4 9642     		.uleb128 0x2116
 4398 00f6 19       		.uleb128 0x19
 4399 00f7 01       		.uleb128 0x1
 4400 00f8 13       		.uleb128 0x13
 4401 00f9 00       		.byte	0
 4402 00fa 00       		.byte	0
 4403 00fb 13       		.uleb128 0x13
 4404 00fc 34       		.uleb128 0x34
 4405 00fd 00       		.byte	0
 4406 00fe 03       		.uleb128 0x3
 4407 00ff 0E       		.uleb128 0xe
 4408 0100 3A       		.uleb128 0x3a
 4409 0101 0B       		.uleb128 0xb
 4410 0102 3B       		.uleb128 0x3b
 4411 0103 0B       		.uleb128 0xb
 4412 0104 49       		.uleb128 0x49
 4413 0105 13       		.uleb128 0x13
 4414 0106 02       		.uleb128 0x2
 4415 0107 18       		.uleb128 0x18
 4416 0108 00       		.byte	0
 4417 0109 00       		.byte	0
 4418 010a 14       		.uleb128 0x14
 4419 010b 0B       		.uleb128 0xb
 4420 010c 01       		.byte	0x1
 4421 010d 11       		.uleb128 0x11
 4422 010e 01       		.uleb128 0x1
 4423 010f 12       		.uleb128 0x12
 4424 0110 06       		.uleb128 0x6
 4425 0111 00       		.byte	0
 4426 0112 00       		.byte	0
 4427 0113 15       		.uleb128 0x15
 4428 0114 2E       		.uleb128 0x2e
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 97


 4429 0115 01       		.byte	0x1
 4430 0116 3F       		.uleb128 0x3f
 4431 0117 19       		.uleb128 0x19
 4432 0118 03       		.uleb128 0x3
 4433 0119 0E       		.uleb128 0xe
 4434 011a 3A       		.uleb128 0x3a
 4435 011b 0B       		.uleb128 0xb
 4436 011c 3B       		.uleb128 0x3b
 4437 011d 0B       		.uleb128 0xb
 4438 011e 27       		.uleb128 0x27
 4439 011f 19       		.uleb128 0x19
 4440 0120 49       		.uleb128 0x49
 4441 0121 13       		.uleb128 0x13
 4442 0122 11       		.uleb128 0x11
 4443 0123 01       		.uleb128 0x1
 4444 0124 12       		.uleb128 0x12
 4445 0125 06       		.uleb128 0x6
 4446 0126 40       		.uleb128 0x40
 4447 0127 18       		.uleb128 0x18
 4448 0128 9642     		.uleb128 0x2116
 4449 012a 19       		.uleb128 0x19
 4450 012b 01       		.uleb128 0x1
 4451 012c 13       		.uleb128 0x13
 4452 012d 00       		.byte	0
 4453 012e 00       		.byte	0
 4454 012f 16       		.uleb128 0x16
 4455 0130 05       		.uleb128 0x5
 4456 0131 00       		.byte	0
 4457 0132 03       		.uleb128 0x3
 4458 0133 0E       		.uleb128 0xe
 4459 0134 3A       		.uleb128 0x3a
 4460 0135 0B       		.uleb128 0xb
 4461 0136 3B       		.uleb128 0x3b
 4462 0137 0B       		.uleb128 0xb
 4463 0138 49       		.uleb128 0x49
 4464 0139 13       		.uleb128 0x13
 4465 013a 02       		.uleb128 0x2
 4466 013b 18       		.uleb128 0x18
 4467 013c 00       		.byte	0
 4468 013d 00       		.byte	0
 4469 013e 17       		.uleb128 0x17
 4470 013f 34       		.uleb128 0x34
 4471 0140 00       		.byte	0
 4472 0141 03       		.uleb128 0x3
 4473 0142 08       		.uleb128 0x8
 4474 0143 3A       		.uleb128 0x3a
 4475 0144 0B       		.uleb128 0xb
 4476 0145 3B       		.uleb128 0x3b
 4477 0146 0B       		.uleb128 0xb
 4478 0147 49       		.uleb128 0x49
 4479 0148 13       		.uleb128 0x13
 4480 0149 02       		.uleb128 0x2
 4481 014a 18       		.uleb128 0x18
 4482 014b 00       		.byte	0
 4483 014c 00       		.byte	0
 4484 014d 18       		.uleb128 0x18
 4485 014e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 98


 4486 014f 01       		.byte	0x1
 4487 0150 3F       		.uleb128 0x3f
 4488 0151 19       		.uleb128 0x19
 4489 0152 03       		.uleb128 0x3
 4490 0153 0E       		.uleb128 0xe
 4491 0154 3A       		.uleb128 0x3a
 4492 0155 0B       		.uleb128 0xb
 4493 0156 3B       		.uleb128 0x3b
 4494 0157 05       		.uleb128 0x5
 4495 0158 27       		.uleb128 0x27
 4496 0159 19       		.uleb128 0x19
 4497 015a 49       		.uleb128 0x49
 4498 015b 13       		.uleb128 0x13
 4499 015c 11       		.uleb128 0x11
 4500 015d 01       		.uleb128 0x1
 4501 015e 12       		.uleb128 0x12
 4502 015f 06       		.uleb128 0x6
 4503 0160 40       		.uleb128 0x40
 4504 0161 18       		.uleb128 0x18
 4505 0162 9642     		.uleb128 0x2116
 4506 0164 19       		.uleb128 0x19
 4507 0165 01       		.uleb128 0x1
 4508 0166 13       		.uleb128 0x13
 4509 0167 00       		.byte	0
 4510 0168 00       		.byte	0
 4511 0169 19       		.uleb128 0x19
 4512 016a 05       		.uleb128 0x5
 4513 016b 00       		.byte	0
 4514 016c 03       		.uleb128 0x3
 4515 016d 0E       		.uleb128 0xe
 4516 016e 3A       		.uleb128 0x3a
 4517 016f 0B       		.uleb128 0xb
 4518 0170 3B       		.uleb128 0x3b
 4519 0171 05       		.uleb128 0x5
 4520 0172 49       		.uleb128 0x49
 4521 0173 13       		.uleb128 0x13
 4522 0174 02       		.uleb128 0x2
 4523 0175 18       		.uleb128 0x18
 4524 0176 00       		.byte	0
 4525 0177 00       		.byte	0
 4526 0178 1A       		.uleb128 0x1a
 4527 0179 34       		.uleb128 0x34
 4528 017a 00       		.byte	0
 4529 017b 03       		.uleb128 0x3
 4530 017c 08       		.uleb128 0x8
 4531 017d 3A       		.uleb128 0x3a
 4532 017e 0B       		.uleb128 0xb
 4533 017f 3B       		.uleb128 0x3b
 4534 0180 05       		.uleb128 0x5
 4535 0181 49       		.uleb128 0x49
 4536 0182 13       		.uleb128 0x13
 4537 0183 02       		.uleb128 0x2
 4538 0184 18       		.uleb128 0x18
 4539 0185 00       		.byte	0
 4540 0186 00       		.byte	0
 4541 0187 1B       		.uleb128 0x1b
 4542 0188 2E       		.uleb128 0x2e
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 99


 4543 0189 01       		.byte	0x1
 4544 018a 3F       		.uleb128 0x3f
 4545 018b 19       		.uleb128 0x19
 4546 018c 03       		.uleb128 0x3
 4547 018d 0E       		.uleb128 0xe
 4548 018e 3A       		.uleb128 0x3a
 4549 018f 0B       		.uleb128 0xb
 4550 0190 3B       		.uleb128 0x3b
 4551 0191 05       		.uleb128 0x5
 4552 0192 49       		.uleb128 0x49
 4553 0193 13       		.uleb128 0x13
 4554 0194 11       		.uleb128 0x11
 4555 0195 01       		.uleb128 0x1
 4556 0196 12       		.uleb128 0x12
 4557 0197 06       		.uleb128 0x6
 4558 0198 40       		.uleb128 0x40
 4559 0199 18       		.uleb128 0x18
 4560 019a 9642     		.uleb128 0x2116
 4561 019c 19       		.uleb128 0x19
 4562 019d 01       		.uleb128 0x1
 4563 019e 13       		.uleb128 0x13
 4564 019f 00       		.byte	0
 4565 01a0 00       		.byte	0
 4566 01a1 1C       		.uleb128 0x1c
 4567 01a2 34       		.uleb128 0x34
 4568 01a3 00       		.byte	0
 4569 01a4 03       		.uleb128 0x3
 4570 01a5 0E       		.uleb128 0xe
 4571 01a6 3A       		.uleb128 0x3a
 4572 01a7 0B       		.uleb128 0xb
 4573 01a8 3B       		.uleb128 0x3b
 4574 01a9 05       		.uleb128 0x5
 4575 01aa 49       		.uleb128 0x49
 4576 01ab 13       		.uleb128 0x13
 4577 01ac 02       		.uleb128 0x2
 4578 01ad 18       		.uleb128 0x18
 4579 01ae 00       		.byte	0
 4580 01af 00       		.byte	0
 4581 01b0 1D       		.uleb128 0x1d
 4582 01b1 2E       		.uleb128 0x2e
 4583 01b2 00       		.byte	0
 4584 01b3 3F       		.uleb128 0x3f
 4585 01b4 19       		.uleb128 0x19
 4586 01b5 03       		.uleb128 0x3
 4587 01b6 0E       		.uleb128 0xe
 4588 01b7 3A       		.uleb128 0x3a
 4589 01b8 0B       		.uleb128 0xb
 4590 01b9 3B       		.uleb128 0x3b
 4591 01ba 05       		.uleb128 0x5
 4592 01bb 11       		.uleb128 0x11
 4593 01bc 01       		.uleb128 0x1
 4594 01bd 12       		.uleb128 0x12
 4595 01be 06       		.uleb128 0x6
 4596 01bf 40       		.uleb128 0x40
 4597 01c0 18       		.uleb128 0x18
 4598 01c1 9642     		.uleb128 0x2116
 4599 01c3 19       		.uleb128 0x19
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 100


 4600 01c4 00       		.byte	0
 4601 01c5 00       		.byte	0
 4602 01c6 1E       		.uleb128 0x1e
 4603 01c7 2E       		.uleb128 0x2e
 4604 01c8 00       		.byte	0
 4605 01c9 3F       		.uleb128 0x3f
 4606 01ca 19       		.uleb128 0x19
 4607 01cb 03       		.uleb128 0x3
 4608 01cc 0E       		.uleb128 0xe
 4609 01cd 3A       		.uleb128 0x3a
 4610 01ce 0B       		.uleb128 0xb
 4611 01cf 3B       		.uleb128 0x3b
 4612 01d0 05       		.uleb128 0x5
 4613 01d1 49       		.uleb128 0x49
 4614 01d2 13       		.uleb128 0x13
 4615 01d3 11       		.uleb128 0x11
 4616 01d4 01       		.uleb128 0x1
 4617 01d5 12       		.uleb128 0x12
 4618 01d6 06       		.uleb128 0x6
 4619 01d7 40       		.uleb128 0x40
 4620 01d8 18       		.uleb128 0x18
 4621 01d9 9642     		.uleb128 0x2116
 4622 01db 19       		.uleb128 0x19
 4623 01dc 00       		.byte	0
 4624 01dd 00       		.byte	0
 4625 01de 1F       		.uleb128 0x1f
 4626 01df 2E       		.uleb128 0x2e
 4627 01e0 01       		.byte	0x1
 4628 01e1 3F       		.uleb128 0x3f
 4629 01e2 19       		.uleb128 0x19
 4630 01e3 03       		.uleb128 0x3
 4631 01e4 0E       		.uleb128 0xe
 4632 01e5 3A       		.uleb128 0x3a
 4633 01e6 0B       		.uleb128 0xb
 4634 01e7 3B       		.uleb128 0x3b
 4635 01e8 05       		.uleb128 0x5
 4636 01e9 11       		.uleb128 0x11
 4637 01ea 01       		.uleb128 0x1
 4638 01eb 12       		.uleb128 0x12
 4639 01ec 06       		.uleb128 0x6
 4640 01ed 40       		.uleb128 0x40
 4641 01ee 18       		.uleb128 0x18
 4642 01ef 9642     		.uleb128 0x2116
 4643 01f1 19       		.uleb128 0x19
 4644 01f2 01       		.uleb128 0x1
 4645 01f3 13       		.uleb128 0x13
 4646 01f4 00       		.byte	0
 4647 01f5 00       		.byte	0
 4648 01f6 20       		.uleb128 0x20
 4649 01f7 0B       		.uleb128 0xb
 4650 01f8 01       		.byte	0x1
 4651 01f9 55       		.uleb128 0x55
 4652 01fa 17       		.uleb128 0x17
 4653 01fb 00       		.byte	0
 4654 01fc 00       		.byte	0
 4655 01fd 21       		.uleb128 0x21
 4656 01fe 2E       		.uleb128 0x2e
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 101


 4657 01ff 00       		.byte	0
 4658 0200 3F       		.uleb128 0x3f
 4659 0201 19       		.uleb128 0x19
 4660 0202 03       		.uleb128 0x3
 4661 0203 0E       		.uleb128 0xe
 4662 0204 3A       		.uleb128 0x3a
 4663 0205 0B       		.uleb128 0xb
 4664 0206 3B       		.uleb128 0x3b
 4665 0207 05       		.uleb128 0x5
 4666 0208 11       		.uleb128 0x11
 4667 0209 01       		.uleb128 0x1
 4668 020a 12       		.uleb128 0x12
 4669 020b 06       		.uleb128 0x6
 4670 020c 40       		.uleb128 0x40
 4671 020d 18       		.uleb128 0x18
 4672 020e 9742     		.uleb128 0x2117
 4673 0210 19       		.uleb128 0x19
 4674 0211 00       		.byte	0
 4675 0212 00       		.byte	0
 4676 0213 22       		.uleb128 0x22
 4677 0214 34       		.uleb128 0x34
 4678 0215 00       		.byte	0
 4679 0216 03       		.uleb128 0x3
 4680 0217 0E       		.uleb128 0xe
 4681 0218 3A       		.uleb128 0x3a
 4682 0219 0B       		.uleb128 0xb
 4683 021a 3B       		.uleb128 0x3b
 4684 021b 05       		.uleb128 0x5
 4685 021c 49       		.uleb128 0x49
 4686 021d 13       		.uleb128 0x13
 4687 021e 00       		.byte	0
 4688 021f 00       		.byte	0
 4689 0220 23       		.uleb128 0x23
 4690 0221 2E       		.uleb128 0x2e
 4691 0222 00       		.byte	0
 4692 0223 3F       		.uleb128 0x3f
 4693 0224 19       		.uleb128 0x19
 4694 0225 03       		.uleb128 0x3
 4695 0226 0E       		.uleb128 0xe
 4696 0227 3A       		.uleb128 0x3a
 4697 0228 0B       		.uleb128 0xb
 4698 0229 3B       		.uleb128 0x3b
 4699 022a 05       		.uleb128 0x5
 4700 022b 49       		.uleb128 0x49
 4701 022c 13       		.uleb128 0x13
 4702 022d 11       		.uleb128 0x11
 4703 022e 01       		.uleb128 0x1
 4704 022f 12       		.uleb128 0x12
 4705 0230 06       		.uleb128 0x6
 4706 0231 40       		.uleb128 0x40
 4707 0232 18       		.uleb128 0x18
 4708 0233 9742     		.uleb128 0x2117
 4709 0235 19       		.uleb128 0x19
 4710 0236 00       		.byte	0
 4711 0237 00       		.byte	0
 4712 0238 24       		.uleb128 0x24
 4713 0239 34       		.uleb128 0x34
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 102


 4714 023a 00       		.byte	0
 4715 023b 03       		.uleb128 0x3
 4716 023c 0E       		.uleb128 0xe
 4717 023d 3A       		.uleb128 0x3a
 4718 023e 0B       		.uleb128 0xb
 4719 023f 3B       		.uleb128 0x3b
 4720 0240 05       		.uleb128 0x5
 4721 0241 49       		.uleb128 0x49
 4722 0242 13       		.uleb128 0x13
 4723 0243 3F       		.uleb128 0x3f
 4724 0244 19       		.uleb128 0x19
 4725 0245 3C       		.uleb128 0x3c
 4726 0246 19       		.uleb128 0x19
 4727 0247 00       		.byte	0
 4728 0248 00       		.byte	0
 4729 0249 25       		.uleb128 0x25
 4730 024a 34       		.uleb128 0x34
 4731 024b 00       		.byte	0
 4732 024c 03       		.uleb128 0x3
 4733 024d 0E       		.uleb128 0xe
 4734 024e 3A       		.uleb128 0x3a
 4735 024f 0B       		.uleb128 0xb
 4736 0250 3B       		.uleb128 0x3b
 4737 0251 0B       		.uleb128 0xb
 4738 0252 49       		.uleb128 0x49
 4739 0253 13       		.uleb128 0x13
 4740 0254 3F       		.uleb128 0x3f
 4741 0255 19       		.uleb128 0x19
 4742 0256 02       		.uleb128 0x2
 4743 0257 18       		.uleb128 0x18
 4744 0258 00       		.byte	0
 4745 0259 00       		.byte	0
 4746 025a 26       		.uleb128 0x26
 4747 025b 21       		.uleb128 0x21
 4748 025c 00       		.byte	0
 4749 025d 49       		.uleb128 0x49
 4750 025e 13       		.uleb128 0x13
 4751 025f 2F       		.uleb128 0x2f
 4752 0260 05       		.uleb128 0x5
 4753 0261 00       		.byte	0
 4754 0262 00       		.byte	0
 4755 0263 27       		.uleb128 0x27
 4756 0264 34       		.uleb128 0x34
 4757 0265 00       		.byte	0
 4758 0266 03       		.uleb128 0x3
 4759 0267 08       		.uleb128 0x8
 4760 0268 3A       		.uleb128 0x3a
 4761 0269 0B       		.uleb128 0xb
 4762 026a 3B       		.uleb128 0x3b
 4763 026b 0B       		.uleb128 0xb
 4764 026c 49       		.uleb128 0x49
 4765 026d 13       		.uleb128 0x13
 4766 026e 3F       		.uleb128 0x3f
 4767 026f 19       		.uleb128 0x19
 4768 0270 02       		.uleb128 0x2
 4769 0271 18       		.uleb128 0x18
 4770 0272 00       		.byte	0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 103


 4771 0273 00       		.byte	0
 4772 0274 00       		.byte	0
 4773              		.section	.debug_aranges,"",%progbits
 4774 0000 D4000000 		.4byte	0xd4
 4775 0004 0200     		.2byte	0x2
 4776 0006 00000000 		.4byte	.Ldebug_info0
 4777 000a 04       		.byte	0x4
 4778 000b 00       		.byte	0
 4779 000c 0000     		.2byte	0
 4780 000e 0000     		.2byte	0
 4781 0010 00000000 		.4byte	.LFB64
 4782 0014 44000000 		.4byte	.LFE64-.LFB64
 4783 0018 00000000 		.4byte	.LFB65
 4784 001c 6C000000 		.4byte	.LFE65-.LFB65
 4785 0020 00000000 		.4byte	.LFB66
 4786 0024 32000000 		.4byte	.LFE66-.LFB66
 4787 0028 00000000 		.4byte	.LFB67
 4788 002c 20000000 		.4byte	.LFE67-.LFB67
 4789 0030 00000000 		.4byte	.LFB68
 4790 0034 40000000 		.4byte	.LFE68-.LFB68
 4791 0038 00000000 		.4byte	.LFB69
 4792 003c DC000000 		.4byte	.LFE69-.LFB69
 4793 0040 00000000 		.4byte	.LFB70
 4794 0044 1C000000 		.4byte	.LFE70-.LFB70
 4795 0048 00000000 		.4byte	.LFB71
 4796 004c 28000000 		.4byte	.LFE71-.LFB71
 4797 0050 00000000 		.4byte	.LFB72
 4798 0054 C8000000 		.4byte	.LFE72-.LFB72
 4799 0058 00000000 		.4byte	.LFB73
 4800 005c FC000000 		.4byte	.LFE73-.LFB73
 4801 0060 00000000 		.4byte	.LFB74
 4802 0064 78000000 		.4byte	.LFE74-.LFB74
 4803 0068 00000000 		.4byte	.LFB75
 4804 006c 40010000 		.4byte	.LFE75-.LFB75
 4805 0070 00000000 		.4byte	.LFB76
 4806 0074 B8000000 		.4byte	.LFE76-.LFB76
 4807 0078 00000000 		.4byte	.LFB77
 4808 007c 1C000000 		.4byte	.LFE77-.LFB77
 4809 0080 00000000 		.4byte	.LFB78
 4810 0084 28000000 		.4byte	.LFE78-.LFB78
 4811 0088 00000000 		.4byte	.LFB79
 4812 008c B4000000 		.4byte	.LFE79-.LFB79
 4813 0090 00000000 		.4byte	.LFB80
 4814 0094 24000000 		.4byte	.LFE80-.LFB80
 4815 0098 00000000 		.4byte	.LFB81
 4816 009c 20010000 		.4byte	.LFE81-.LFB81
 4817 00a0 00000000 		.4byte	.LFB82
 4818 00a4 3C010000 		.4byte	.LFE82-.LFB82
 4819 00a8 00000000 		.4byte	.LFB83
 4820 00ac 44010000 		.4byte	.LFE83-.LFB83
 4821 00b0 00000000 		.4byte	.LFB84
 4822 00b4 14000000 		.4byte	.LFE84-.LFB84
 4823 00b8 00000000 		.4byte	.LFB85
 4824 00bc 1A000000 		.4byte	.LFE85-.LFB85
 4825 00c0 00000000 		.4byte	.LFB86
 4826 00c4 2A000000 		.4byte	.LFE86-.LFB86
 4827 00c8 00000000 		.4byte	.LFB87
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 104


 4828 00cc 7C020000 		.4byte	.LFE87-.LFB87
 4829 00d0 00000000 		.4byte	0
 4830 00d4 00000000 		.4byte	0
 4831              		.section	.debug_ranges,"",%progbits
 4832              	.Ldebug_ranges0:
 4833 0000 2A000000 		.4byte	.LBB9
 4834 0004 7E000000 		.4byte	.LBE9
 4835 0008 80000000 		.4byte	.LBB12
 4836 000c 82000000 		.4byte	.LBE12
 4837 0010 00000000 		.4byte	0
 4838 0014 00000000 		.4byte	0
 4839 0018 30000000 		.4byte	.LBB10
 4840 001c 72000000 		.4byte	.LBE10
 4841 0020 80000000 		.4byte	.LBB11
 4842 0024 82000000 		.4byte	.LBE11
 4843 0028 00000000 		.4byte	0
 4844 002c 00000000 		.4byte	0
 4845 0030 00000000 		.4byte	.LFB64
 4846 0034 44000000 		.4byte	.LFE64
 4847 0038 00000000 		.4byte	.LFB65
 4848 003c 6C000000 		.4byte	.LFE65
 4849 0040 00000000 		.4byte	.LFB66
 4850 0044 32000000 		.4byte	.LFE66
 4851 0048 00000000 		.4byte	.LFB67
 4852 004c 20000000 		.4byte	.LFE67
 4853 0050 00000000 		.4byte	.LFB68
 4854 0054 40000000 		.4byte	.LFE68
 4855 0058 00000000 		.4byte	.LFB69
 4856 005c DC000000 		.4byte	.LFE69
 4857 0060 00000000 		.4byte	.LFB70
 4858 0064 1C000000 		.4byte	.LFE70
 4859 0068 00000000 		.4byte	.LFB71
 4860 006c 28000000 		.4byte	.LFE71
 4861 0070 00000000 		.4byte	.LFB72
 4862 0074 C8000000 		.4byte	.LFE72
 4863 0078 00000000 		.4byte	.LFB73
 4864 007c FC000000 		.4byte	.LFE73
 4865 0080 00000000 		.4byte	.LFB74
 4866 0084 78000000 		.4byte	.LFE74
 4867 0088 00000000 		.4byte	.LFB75
 4868 008c 40010000 		.4byte	.LFE75
 4869 0090 00000000 		.4byte	.LFB76
 4870 0094 B8000000 		.4byte	.LFE76
 4871 0098 00000000 		.4byte	.LFB77
 4872 009c 1C000000 		.4byte	.LFE77
 4873 00a0 00000000 		.4byte	.LFB78
 4874 00a4 28000000 		.4byte	.LFE78
 4875 00a8 00000000 		.4byte	.LFB79
 4876 00ac B4000000 		.4byte	.LFE79
 4877 00b0 00000000 		.4byte	.LFB80
 4878 00b4 24000000 		.4byte	.LFE80
 4879 00b8 00000000 		.4byte	.LFB81
 4880 00bc 20010000 		.4byte	.LFE81
 4881 00c0 00000000 		.4byte	.LFB82
 4882 00c4 3C010000 		.4byte	.LFE82
 4883 00c8 00000000 		.4byte	.LFB83
 4884 00cc 44010000 		.4byte	.LFE83
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 105


 4885 00d0 00000000 		.4byte	.LFB84
 4886 00d4 14000000 		.4byte	.LFE84
 4887 00d8 00000000 		.4byte	.LFB85
 4888 00dc 1A000000 		.4byte	.LFE85
 4889 00e0 00000000 		.4byte	.LFB86
 4890 00e4 2A000000 		.4byte	.LFE86
 4891 00e8 00000000 		.4byte	.LFB87
 4892 00ec 7C020000 		.4byte	.LFE87
 4893 00f0 00000000 		.4byte	0
 4894 00f4 00000000 		.4byte	0
 4895              		.section	.debug_line,"",%progbits
 4896              	.Ldebug_line0:
 4897 0000 5C050000 		.section	.debug_str,"MS",%progbits,1
 4897      0200EF01 
 4897      00000201 
 4897      FB0E0D00 
 4897      01010101 
 4898              	.LASF125:
 4899 0000 676D745F 		.ascii	"gmt_offset\000"
 4899      6F666673 
 4899      657400
 4900              	.LASF16:
 4901 000b 75696E74 		.ascii	"uint16\000"
 4901      313600
 4902              	.LASF60:
 4903 0012 76616C75 		.ascii	"value\000"
 4903      6500
 4904              	.LASF27:
 4905 0018 746D5F68 		.ascii	"tm_hour\000"
 4905      6F757200 
 4906              	.LASF32:
 4907 0020 746D5F79 		.ascii	"tm_yday\000"
 4907      64617900 
 4908              	.LASF4:
 4909 0028 5F5F7569 		.ascii	"__uint8_t\000"
 4909      6E74385F 
 4909      7400
 4910              	.LASF66:
 4911 0032 636F756E 		.ascii	"countDownResetCondition\000"
 4911      74446F77 
 4911      6E526573 
 4911      6574436F 
 4911      6E646974 
 4912              	.LASF51:
 4913 004a 6C6F6E67 		.ascii	"longitude\000"
 4913      69747564 
 4913      6500
 4914              	.LASF152:
 4915 0054 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4915      43313120 
 4915      352E342E 
 4915      31203230 
 4915      31363036 
 4916 0087 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4916      20726576 
 4916      6973696F 
 4916      6E203233 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 106


 4916      37373135 
 4917 00ba 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4917      66756E63 
 4917      74696F6E 
 4917      2D736563 
 4917      74696F6E 
 4918              	.LASF128:
 4919 00e2 6D6F6465 		.ascii	"modem_wakeup\000"
 4919      6D5F7761 
 4919      6B657570 
 4919      00
 4920              	.LASF10:
 4921 00ef 6C6F6E67 		.ascii	"long long unsigned int\000"
 4921      206C6F6E 
 4921      6720756E 
 4921      7369676E 
 4921      65642069 
 4922              	.LASF114:
 4923 0106 73616D70 		.ascii	"sample_freq\000"
 4923      6C655F66 
 4923      72657100 
 4924              	.LASF133:
 4925 0112 6D6F6465 		.ascii	"modem_state\000"
 4925      6D5F7374 
 4925      61746500 
 4926              	.LASF93:
 4927 011e 74657374 		.ascii	"test\000"
 4927      00
 4928              	.LASF145:
 4929 0123 616C6172 		.ascii	"alarmMeasure\000"
 4929      6D4D6561 
 4929      73757265 
 4929      00
 4930              	.LASF132:
 4931 0130 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4931      52784275 
 4931      66666572 
 4931      00
 4932              	.LASF135:
 4933 013d 6D6F6465 		.ascii	"modem_stats\000"
 4933      6D5F7374 
 4933      61747300 
 4934              	.LASF9:
 4935 0149 6C6F6E67 		.ascii	"long long int\000"
 4935      206C6F6E 
 4935      6720696E 
 4935      7400
 4936              	.LASF0:
 4937 0157 7369676E 		.ascii	"signed char\000"
 4937      65642063 
 4937      68617200 
 4938              	.LASF44:
 4939 0163 65636E6F 		.ascii	"ecno\000"
 4939      00
 4940              	.LASF63:
 4941 0168 636F756E 		.ascii	"countDownValue\000"
 4941      74446F77 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 107


 4941      6E56616C 
 4941      756500
 4942              	.LASF146:
 4943 0177 74696D65 		.ascii	"timeToMeasure\000"
 4943      546F4D65 
 4943      61737572 
 4943      6500
 4944              	.LASF47:
 4945 0185 74696D65 		.ascii	"time_to_network_connect\000"
 4945      5F746F5F 
 4945      6E657477 
 4945      6F726B5F 
 4945      636F6E6E 
 4946              	.LASF148:
 4947 019d 74696D65 		.ascii	"timeToSync\000"
 4947      546F5379 
 4947      6E6300
 4948              	.LASF141:
 4949 01a8 68747470 		.ascii	"http_body\000"
 4949      5F626F64 
 4949      7900
 4950              	.LASF104:
 4951 01b2 7365745F 		.ascii	"set_up_internet_connection\000"
 4951      75705F69 
 4951      6E746572 
 4951      6E65745F 
 4951      636F6E6E 
 4952              	.LASF124:
 4953 01cd 7365636F 		.ascii	"second\000"
 4953      6E6400
 4954              	.LASF120:
 4955 01d4 79656172 		.ascii	"year\000"
 4955      00
 4956              	.LASF42:
 4957 01d9 72786C65 		.ascii	"rxlev\000"
 4957      7600
 4958              	.LASF6:
 4959 01df 6C6F6E67 		.ascii	"long int\000"
 4959      20696E74 
 4959      00
 4960              	.LASF64:
 4961 01e8 63757272 		.ascii	"currentCountDownValue\000"
 4961      656E7443 
 4961      6F756E74 
 4961      446F776E 
 4961      56616C75 
 4962              	.LASF126:
 4963 01fe 6D6F6465 		.ascii	"modem_get_state\000"
 4963      6D5F6765 
 4963      745F7374 
 4963      61746500 
 4964              	.LASF52:
 4965 020e 616C7469 		.ascii	"altitude\000"
 4965      74756465 
 4965      00
 4966              	.LASF15:
 4967 0217 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 108


 4967      3800
 4968              	.LASF21:
 4969 021d 646F7562 		.ascii	"double\000"
 4969      6C6500
 4970              	.LASF19:
 4971 0224 696E7433 		.ascii	"int32\000"
 4971      3200
 4972              	.LASF116:
 4973 022a 6D6F6465 		.ascii	"modem_configure_settings\000"
 4973      6D5F636F 
 4973      6E666967 
 4973      7572655F 
 4973      73657474 
 4974              	.LASF94:
 4975 0243 6E657477 		.ascii	"network_time\000"
 4975      6F726B5F 
 4975      74696D65 
 4975      00
 4976              	.LASF3:
 4977 0250 73686F72 		.ascii	"short unsigned int\000"
 4977      7420756E 
 4977      7369676E 
 4977      65642069 
 4977      6E7400
 4978              	.LASF17:
 4979 0263 75696E74 		.ascii	"uint32\000"
 4979      333200
 4980              	.LASF90:
 4981 026a 696E7465 		.ascii	"interval\000"
 4981      7276616C 
 4981      00
 4982              	.LASF7:
 4983 0273 5F5F7569 		.ascii	"__uint32_t\000"
 4983      6E743332 
 4983      5F7400
 4984              	.LASF118:
 4985 027e 6D6F6465 		.ascii	"modem_get_network_time\000"
 4985      6D5F6765 
 4985      745F6E65 
 4985      74776F72 
 4985      6B5F7469 
 4986              	.LASF29:
 4987 0295 746D5F6D 		.ascii	"tm_mon\000"
 4987      6F6E00
 4988              	.LASF58:
 4989 029c 64656275 		.ascii	"debug_level\000"
 4989      675F6C65 
 4989      76656C00 
 4990              	.LASF127:
 4991 02a8 6D6F6465 		.ascii	"modem_sleep\000"
 4991      6D5F736C 
 4991      65657000 
 4992              	.LASF113:
 4993 02b4 735F6465 		.ascii	"s_debug_freq\000"
 4993      6275675F 
 4993      66726571 
 4993      00
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 109


 4994              	.LASF108:
 4995 02c1 75706461 		.ascii	"updatable_parameters_initialize\000"
 4995      7461626C 
 4995      655F7061 
 4995      72616D65 
 4995      74657273 
 4996              	.LASF30:
 4997 02e1 746D5F79 		.ascii	"tm_year\000"
 4997      65617200 
 4998              	.LASF147:
 4999 02e9 616C6172 		.ascii	"alarmSync\000"
 4999      6D53796E 
 4999      6300
 5000              	.LASF76:
 5001 02f3 70696E73 		.ascii	"pins_configure_active\000"
 5001      5F636F6E 
 5001      66696775 
 5001      72655F61 
 5001      63746976 
 5002              	.LASF62:
 5003 0309 6B65795F 		.ascii	"key_value_t\000"
 5003      76616C75 
 5003      655F7400 
 5004              	.LASF81:
 5005 0315 7077725F 		.ascii	"pwr_check\000"
 5005      63686563 
 5005      6B00
 5006              	.LASF8:
 5007 031f 6C6F6E67 		.ascii	"long unsigned int\000"
 5007      20756E73 
 5007      69676E65 
 5007      6420696E 
 5007      7400
 5008              	.LASF96:
 5009 0331 65787472 		.ascii	"extract_string\000"
 5009      6163745F 
 5009      73747269 
 5009      6E6700
 5010              	.LASF86:
 5011 0340 74696D65 		.ascii	"timeout\000"
 5011      6F757400 
 5012              	.LASF109:
 5013 0348 6765745F 		.ascii	"get_cell_network_stats\000"
 5013      63656C6C 
 5013      5F6E6574 
 5013      776F726B 
 5013      5F737461 
 5014              	.LASF53:
 5015 035f 74696D65 		.ascii	"time_to_lock\000"
 5015      5F746F5F 
 5015      6C6F636B 
 5015      00
 5016              	.LASF139:
 5017 036c 64617461 		.ascii	"data\000"
 5017      00
 5018              	.LASF72:
 5019 0371 65705F70 		.ascii	"ep_port\000"
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 110


 5019      6F727400 
 5020              	.LASF33:
 5021 0379 746D5F69 		.ascii	"tm_isdst\000"
 5021      73647374 
 5021      00
 5022              	.LASF68:
 5023 0382 6D6F6465 		.ascii	"modem_info\000"
 5023      6D5F696E 
 5023      666F00
 5024              	.LASF71:
 5025 038d 65705F68 		.ascii	"ep_host\000"
 5025      6F737400 
 5026              	.LASF69:
 5027 0395 63686970 		.ascii	"chip_uniqueId\000"
 5027      5F756E69 
 5027      71756549 
 5027      6400
 5028              	.LASF91:
 5029 03a3 6D6F6465 		.ascii	"modem_power_up\000"
 5029      6D5F706F 
 5029      7765725F 
 5029      757000
 5030              	.LASF153:
 5031 03b2 6D6F6465 		.ascii	"modem.c\000"
 5031      6D2E6300 
 5032              	.LASF98:
 5033 03ba 62656769 		.ascii	"beginMarker\000"
 5033      6E4D6172 
 5033      6B657200 
 5034              	.LASF100:
 5035 03c6 74617267 		.ascii	"target\000"
 5035      657400
 5036              	.LASF48:
 5037 03cd 74696D65 		.ascii	"time_to_acquire_ip\000"
 5037      5F746F5F 
 5037      61637175 
 5037      6972655F 
 5037      697000
 5038              	.LASF99:
 5039 03e0 656E644D 		.ascii	"endMarker\000"
 5039      61726B65 
 5039      7200
 5040              	.LASF2:
 5041 03ea 73686F72 		.ascii	"short int\000"
 5041      7420696E 
 5041      7400
 5042              	.LASF119:
 5043 03f4 65706F63 		.ascii	"epoch_time\000"
 5043      685F7469 
 5043      6D6500
 5044              	.LASF5:
 5045 03ff 5F5F696E 		.ascii	"__int32_t\000"
 5045      7433325F 
 5045      7400
 5046              	.LASF97:
 5047 0409 66726F6D 		.ascii	"from\000"
 5047      00
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 111


 5048              	.LASF103:
 5049 040e 63726567 		.ascii	"creg\000"
 5049      00
 5050              	.LASF155:
 5051 0413 64656275 		.ascii	"debug_freq\000"
 5051      675F6672 
 5051      657100
 5052              	.LASF87:
 5053 041e 61745F61 		.ascii	"at_attempt\000"
 5053      7474656D 
 5053      707400
 5054              	.LASF154:
 5055 0429 433A5C55 		.ascii	"C:\\Users\\klabu\\Desktop\\BrookeResearch\\notoriOS"
 5055      73657273 
 5055      5C6B6C61 
 5055      62755C44 
 5055      65736B74 
 5056 0457 5C6E6F74 		.ascii	"\\notoriOS.cydsn\000"
 5056      6F72694F 
 5056      532E6379 
 5056      64736E00 
 5057              	.LASF95:
 5058 0467 61745F77 		.ascii	"at_write_command\000"
 5058      72697465 
 5058      5F636F6D 
 5058      6D616E64 
 5058      00
 5059              	.LASF70:
 5060 0478 7379735F 		.ascii	"sys_info_t\000"
 5060      696E666F 
 5060      5F7400
 5061              	.LASF59:
 5062 0483 75706461 		.ascii	"updatable_parameters_t\000"
 5062      7461626C 
 5062      655F7061 
 5062      72616D65 
 5062      74657273 
 5063              	.LASF115:
 5064 049a 7265706F 		.ascii	"report_freq\000"
 5064      72745F66 
 5064      72657100 
 5065              	.LASF137:
 5066 04a6 64617461 		.ascii	"dataPointsInStack\000"
 5066      506F696E 
 5066      7473496E 
 5066      53746163 
 5066      6B00
 5067              	.LASF26:
 5068 04b8 746D5F6D 		.ascii	"tm_min\000"
 5068      696E00
 5069              	.LASF24:
 5070 04bf 73697A65 		.ascii	"sizetype\000"
 5070      74797065 
 5070      00
 5071              	.LASF121:
 5072 04c8 6D6F6E74 		.ascii	"month\000"
 5072      6800
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 112


 5073              	.LASF102:
 5074 04ce 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5074      6F6E6E65 
 5074      63746564 
 5074      5F746F5F 
 5074      63656C6C 
 5075              	.LASF150:
 5076 04eb 75617274 		.ascii	"uart_received_string\000"
 5076      5F726563 
 5076      65697665 
 5076      645F7374 
 5076      72696E67 
 5077              	.LASF50:
 5078 0500 6C617469 		.ascii	"latitude\000"
 5078      74756465 
 5078      00
 5079              	.LASF34:
 5080 0509 74657374 		.ascii	"test_name\000"
 5080      5F6E616D 
 5080      6500
 5081              	.LASF149:
 5082 0513 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5082      546F5379 
 5082      636E5265 
 5082      6D6F7465 
 5082      50617261 
 5083              	.LASF92:
 5084 052a 6D6F6465 		.ascii	"modem_test\000"
 5084      6D5F7465 
 5084      737400
 5085              	.LASF107:
 5086 0535 6D617463 		.ascii	"match\000"
 5086      6800
 5087              	.LASF136:
 5088 053b 75706461 		.ascii	"updatable_parameters\000"
 5088      7461626C 
 5088      655F7061 
 5088      72616D65 
 5088      74657273 
 5089              	.LASF122:
 5090 0550 686F7572 		.ascii	"hour\000"
 5090      00
 5091              	.LASF84:
 5092 0555 636F6D6D 		.ascii	"commands\000"
 5092      616E6473 
 5092      00
 5093              	.LASF88:
 5094 055e 636F6D70 		.ascii	"compare_location\000"
 5094      6172655F 
 5094      6C6F6361 
 5094      74696F6E 
 5094      00
 5095              	.LASF20:
 5096 056f 666C6F61 		.ascii	"float\000"
 5096      7400
 5097              	.LASF74:
 5098 0575 6D6F6465 		.ascii	"modem_initialize\000"
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 113


 5098      6D5F696E 
 5098      69746961 
 5098      6C697A65 
 5098      00
 5099              	.LASF112:
 5100 0586 735F7265 		.ascii	"s_report_freq\000"
 5100      706F7274 
 5100      5F667265 
 5100      7100
 5101              	.LASF105:
 5102 0594 6973725F 		.ascii	"isr_telit_rx\000"
 5102      74656C69 
 5102      745F7278 
 5102      00
 5103              	.LASF67:
 5104 05a1 616C6172 		.ascii	"alarm\000"
 5104      6D00
 5105              	.LASF13:
 5106 05a7 696E7433 		.ascii	"int32_t\000"
 5106      325F7400 
 5107              	.LASF1:
 5108 05af 756E7369 		.ascii	"unsigned char\000"
 5108      676E6564 
 5108      20636861 
 5108      7200
 5109              	.LASF144:
 5110 05bd 73797374 		.ascii	"system_settings\000"
 5110      656D5F73 
 5110      65747469 
 5110      6E677300 
 5111              	.LASF89:
 5112 05cd 64656C61 		.ascii	"delay\000"
 5112      7900
 5113              	.LASF45:
 5114 05d3 72737271 		.ascii	"rsrq\000"
 5114      00
 5115              	.LASF57:
 5116 05d8 73796E63 		.ascii	"sync_time\000"
 5116      5F74696D 
 5116      6500
 5117              	.LASF43:
 5118 05e2 72736370 		.ascii	"rscp\000"
 5118      00
 5119              	.LASF129:
 5120 05e7 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5120      6D5F6765 
 5120      745F6770 
 5120      735F636F 
 5120      6F726469 
 5121              	.LASF37:
 5122 0601 74657374 		.ascii	"test_t\000"
 5122      5F7400
 5123              	.LASF143:
 5124 0608 73797374 		.ascii	"system_info\000"
 5124      656D5F69 
 5124      6E666F00 
 5125              	.LASF40:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 114


 5126 0614 696D6569 		.ascii	"imei\000"
 5126      00
 5127              	.LASF36:
 5128 0619 72656173 		.ascii	"reason\000"
 5128      6F6E00
 5129              	.LASF46:
 5130 0620 72737270 		.ascii	"rsrp\000"
 5130      00
 5131              	.LASF49:
 5132 0625 6D6F6465 		.ascii	"modem_stats_t\000"
 5132      6D5F7374 
 5132      6174735F 
 5132      7400
 5133              	.LASF83:
 5134 0633 75617274 		.ascii	"uart_string_reset\000"
 5134      5F737472 
 5134      696E675F 
 5134      72657365 
 5134      7400
 5135              	.LASF31:
 5136 0645 746D5F77 		.ascii	"tm_wday\000"
 5136      64617900 
 5137              	.LASF82:
 5138 064d 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5138      6D5F736F 
 5138      66745F70 
 5138      6F776572 
 5138      5F637963 
 5139              	.LASF23:
 5140 0664 6C6F6E67 		.ascii	"long double\000"
 5140      20646F75 
 5140      626C6500 
 5141              	.LASF22:
 5142 0670 63686172 		.ascii	"char\000"
 5142      00
 5143              	.LASF101:
 5144 0675 6D6F6465 		.ascii	"modem_process_tasks\000"
 5144      6D5F7072 
 5144      6F636573 
 5144      735F7461 
 5144      736B7300 
 5145              	.LASF11:
 5146 0689 756E7369 		.ascii	"unsigned int\000"
 5146      676E6564 
 5146      20696E74 
 5146      00
 5147              	.LASF117:
 5148 0696 4346554E 		.ascii	"CFUN\000"
 5148      00
 5149              	.LASF39:
 5150 069b 6D6F6465 		.ascii	"model_id\000"
 5150      6C5F6964 
 5150      00
 5151              	.LASF142:
 5152 06a4 68747470 		.ascii	"http_route\000"
 5152      5F726F75 
 5152      746500
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 115


 5153              	.LASF41:
 5154 06af 6D6F6465 		.ascii	"modem_info_t\000"
 5154      6D5F696E 
 5154      666F5F74 
 5154      00
 5155              	.LASF55:
 5156 06bc 6770735F 		.ascii	"gps_t\000"
 5156      7400
 5157              	.LASF151:
 5158 06c2 75617274 		.ascii	"uart_string_index\000"
 5158      5F737472 
 5158      696E675F 
 5158      696E6465 
 5158      7800
 5159              	.LASF56:
 5160 06d4 6D656173 		.ascii	"measure_time\000"
 5160      7572655F 
 5160      74696D65 
 5160      00
 5161              	.LASF106:
 5162 06e1 69735F63 		.ascii	"is_connected_to_internet\000"
 5162      6F6E6E65 
 5162      63746564 
 5162      5F746F5F 
 5162      696E7465 
 5163              	.LASF134:
 5164 06fa 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5164      6D5F7374 
 5164      6172745F 
 5164      74696D65 
 5164      5F737461 
 5165              	.LASF131:
 5166 0711 6770735F 		.ascii	"gps_status\000"
 5166      73746174 
 5166      757300
 5167              	.LASF75:
 5168 071c 70696E73 		.ascii	"pins_configure_inactive\000"
 5168      5F636F6E 
 5168      66696775 
 5168      72655F69 
 5168      6E616374 
 5169              	.LASF38:
 5170 0734 73696D5F 		.ascii	"sim_id\000"
 5170      696400
 5171              	.LASF28:
 5172 073b 746D5F6D 		.ascii	"tm_mday\000"
 5172      64617900 
 5173              	.LASF54:
 5174 0743 76616C69 		.ascii	"valid\000"
 5174      6400
 5175              	.LASF123:
 5176 0749 6D696E75 		.ascii	"minute\000"
 5176      746500
 5177              	.LASF14:
 5178 0750 75696E74 		.ascii	"uint32_t\000"
 5178      33325F74 
 5178      00
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 116


 5179              	.LASF25:
 5180 0759 746D5F73 		.ascii	"tm_sec\000"
 5180      656300
 5181              	.LASF110:
 5182 0760 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5182      75706461 
 5182      7465645F 
 5182      70617261 
 5182      6D657465 
 5183              	.LASF111:
 5184 0783 735F7361 		.ascii	"s_sample_freq\000"
 5184      6D706C65 
 5184      5F667265 
 5184      7100
 5185              	.LASF35:
 5186 0791 73746174 		.ascii	"status\000"
 5186      757300
 5187              	.LASF138:
 5188 0798 64617461 		.ascii	"dataPointsInStackDesired\000"
 5188      506F696E 
 5188      7473496E 
 5188      53746163 
 5188      6B446573 
 5189              	.LASF73:
 5190 07b1 7379735F 		.ascii	"sys_settings_t\000"
 5190      73657474 
 5190      696E6773 
 5190      5F7400
 5191              	.LASF12:
 5192 07c0 75696E74 		.ascii	"uint8_t\000"
 5192      385F7400 
 5193              	.LASF18:
 5194 07c8 696E7431 		.ascii	"int16\000"
 5194      3600
 5195              	.LASF78:
 5196 07ce 61745F72 		.ascii	"at_ready\000"
 5196      65616479 
 5196      00
 5197              	.LASF79:
 5198 07d7 61747465 		.ascii	"attempts\000"
 5198      6D707473 
 5198      00
 5199              	.LASF65:
 5200 07e0 636F756E 		.ascii	"countDownType\000"
 5200      74446F77 
 5200      6E547970 
 5200      6500
 5201              	.LASF80:
 5202 07ee 626F6F74 		.ascii	"boot_time\000"
 5202      5F74696D 
 5202      6500
 5203              	.LASF85:
 5204 07f8 65787065 		.ascii	"expected_response\000"
 5204      63746564 
 5204      5F726573 
 5204      706F6E73 
 5204      6500
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXGJdl4.s 			page 117


 5205              	.LASF130:
 5206 080a 6C6F636B 		.ascii	"lock_time\000"
 5206      5F74696D 
 5206      6500
 5207              	.LASF140:
 5208 0814 68747470 		.ascii	"http_request\000"
 5208      5F726571 
 5208      75657374 
 5208      00
 5209              	.LASF77:
 5210 0821 6D6F6465 		.ascii	"modem_power_down\000"
 5210      6D5F706F 
 5210      7765725F 
 5210      646F776E 
 5210      00
 5211              	.LASF61:
 5212 0832 74696D65 		.ascii	"timeStamp\000"
 5212      5374616D 
 5212      7000
 5213              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
