ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,5,4
  32              		.comm	inbox,100,4
  33              		.comm	http_request,10000,4
  34              		.comm	http_body,10000,4
  35              		.comm	http_route,200,4
  36              		.comm	system_info,28,4
  37              		.comm	system_settings,104,4
  38              		.comm	alarmMeasure,6,4
  39              		.comm	timeToMeasure,1,1
  40              		.comm	alarmSync,6,4
  41              		.comm	timeToSync,1,1
  42              		.comm	timeToSycnRemoteParams,1,1
  43              		.comm	hey,1,1
  44              		.comm	alarmAppLED,6,4
  45              		.comm	timeToAppLED,1,1
  46              		.comm	uart_received_string,1024,4
  47              		.global	uart_string_index
  48              		.bss
  49              		.align	1
  50              		.type	uart_string_index, %object
  51              		.size	uart_string_index, 2
  52              	uart_string_index:
  53 0000 0000     		.space	2
  54              		.section	.text.isr_telit_rx,"ax",%progbits
  55              		.align	2
  56              		.global	isr_telit_rx
  57              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 2


  58              		.thumb_func
  59              		.type	isr_telit_rx, %function
  60              	isr_telit_rx:
  61              	.LFB64:
  62              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  63              		.loc 1 18 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67 0000 98B5     		push	{r3, r4, r7, lr}
  68              		.cfi_def_cfa_offset 16
  69              		.cfi_offset 3, -16
  70              		.cfi_offset 4, -12
  71              		.cfi_offset 7, -8
  72              		.cfi_offset 14, -4
  73 0002 00AF     		add	r7, sp, #0
  74              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  75              		.loc 1 20 0
  76 0004 12E0     		b	.L2
  77              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  78              		.loc 1 21 0
  79 0006 0D4B     		ldr	r3, .L4
  80 0008 B3F90030 		ldrsh	r3, [r3]
  81 000c 1C46     		mov	r4, r3
  82 000e FFF7FEFF 		bl	UART_Telit_GetChar
  83 0012 0346     		mov	r3, r0
  84 0014 1A46     		mov	r2, r3
  85 0016 0A4B     		ldr	r3, .L4+4
  86 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  87              		.loc 1 22 0
  88 001a 084B     		ldr	r3, .L4
  89 001c B3F90030 		ldrsh	r3, [r3]
  90 0020 9BB2     		uxth	r3, r3
  91 0022 0133     		adds	r3, r3, #1
  92 0024 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 3


  93 0026 1AB2     		sxth	r2, r3
  94 0028 044B     		ldr	r3, .L4
  95 002a 1A80     		strh	r2, [r3]	@ movhi
  96              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  97              		.loc 1 20 0
  98 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
  99 0030 0346     		mov	r3, r0
 100 0032 012B     		cmp	r3, #1
 101 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 102              		.loc 1 25 0
 103 0036 00BF     		nop
 104 0038 98BD     		pop	{r3, r4, r7, pc}
 105              	.L5:
 106 003a 00BF     		.align	2
 107              	.L4:
 108 003c 00000000 		.word	uart_string_index
 109 0040 00000000 		.word	uart_received_string
 110              		.cfi_endproc
 111              	.LFE64:
 112              		.size	isr_telit_rx, .-isr_telit_rx
 113              		.section	.text.modem_initialize,"ax",%progbits
 114              		.align	2
 115              		.global	modem_initialize
 116              		.thumb
 117              		.thumb_func
 118              		.type	modem_initialize, %function
 119              	modem_initialize:
 120              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 121              		.loc 1 28 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 80B5     		push	{r7, lr}
 126              		.cfi_def_cfa_offset 8
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 131              		.loc 1 31 0
 132 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 133              		.loc 1 32 0
 134 0008 154B     		ldr	r3, .L7
 135 000a 0022     		movs	r2, #0
 136 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 4


 137              		.loc 1 34 0
 138 000e 154B     		ldr	r3, .L7+4
 139 0010 0022     		movs	r2, #0
 140 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 141              		.loc 1 35 0
 142 0016 134B     		ldr	r3, .L7+4
 143 0018 0022     		movs	r2, #0
 144 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 145              		.loc 1 36 0
 146 001c 114B     		ldr	r3, .L7+4
 147 001e 0022     		movs	r2, #0
 148 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 149              		.loc 1 37 0
 150 0022 114B     		ldr	r3, .L7+8
 151 0024 0022     		movs	r2, #0
 152 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 153              		.loc 1 38 0
 154 0028 0F4B     		ldr	r3, .L7+8
 155 002a 0022     		movs	r2, #0
 156 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 157              		.loc 1 39 0
 158 002e 0E4B     		ldr	r3, .L7+8
 159 0030 0022     		movs	r2, #0
 160 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 161              		.loc 1 40 0
 162 0034 0C4B     		ldr	r3, .L7+8
 163 0036 0022     		movs	r2, #0
 164 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 165              		.loc 1 41 0
 166 003a 0B4B     		ldr	r3, .L7+8
 167 003c 0022     		movs	r2, #0
 168 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 169              		.loc 1 42 0
 170 0040 094B     		ldr	r3, .L7+8
 171 0042 0022     		movs	r2, #0
 172 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 173              		.loc 1 43 0
 174 0046 084B     		ldr	r3, .L7+8
 175 0048 0022     		movs	r2, #0
 176 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 177              		.loc 1 44 0
 178 004c 064B     		ldr	r3, .L7+8
 179 004e 0022     		movs	r2, #0
 180 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 5


  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 181              		.loc 1 48 0
 182 0052 0021     		movs	r1, #0
 183 0054 4020     		movs	r0, #64
 184 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 185              		.loc 1 50 0
 186 005a 00BF     		nop
 187 005c 80BD     		pop	{r7, pc}
 188              	.L8:
 189 005e 00BF     		.align	2
 190              	.L7:
 191 0060 00000000 		.word	modem_state
 192 0064 00000000 		.word	modem_info
 193 0068 00000000 		.word	modem_stats
 194              		.cfi_endproc
 195              	.LFE65:
 196              		.size	modem_initialize, .-modem_initialize
 197              		.section	.text.pins_configure_inactive,"ax",%progbits
 198              		.align	2
 199              		.global	pins_configure_inactive
 200              		.thumb
 201              		.thumb_func
 202              		.type	pins_configure_inactive, %function
 203              	pins_configure_inactive:
 204              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 205              		.loc 1 54 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 80B5     		push	{r7, lr}
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 00AF     		add	r7, sp, #0
 214              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 215              		.loc 1 56 0
 216 0004 0020     		movs	r0, #0
 217 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 218              		.loc 1 57 0
 219 000a 0C20     		movs	r0, #12
 220 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 221              		.loc 1 59 0
 222 0010 0020     		movs	r0, #0
 223 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 6


  62:modem.c       ****    Rx_Telit_Write(OFF); 
 224              		.loc 1 62 0
 225 0016 0020     		movs	r0, #0
 226 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 227              		.loc 1 63 0
 228 001c 0020     		movs	r0, #0
 229 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 230              		.loc 1 64 0
 231 0022 0020     		movs	r0, #0
 232 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 233              		.loc 1 65 0
 234 0028 0020     		movs	r0, #0
 235 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 236              		.loc 1 67 0
 237 002e 00BF     		nop
 238 0030 80BD     		pop	{r7, pc}
 239              		.cfi_endproc
 240              	.LFE66:
 241              		.size	pins_configure_inactive, .-pins_configure_inactive
 242 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 243              		.align	2
 244              		.global	pins_configure_active
 245              		.thumb
 246              		.thumb_func
 247              		.type	pins_configure_active, %function
 248              	pins_configure_active:
 249              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 250              		.loc 1 70 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 80B5     		push	{r7, lr}
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 0002 00AF     		add	r7, sp, #0
 259              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 260              		.loc 1 72 0
 261 0004 0220     		movs	r0, #2
 262 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 263              		.loc 1 73 0
 264 000a 0120     		movs	r0, #1
 265 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 266              		.loc 1 74 0
 267 0010 0120     		movs	r0, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 7


 268 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 269              		.loc 1 75 0
 270 0016 6420     		movs	r0, #100
 271 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 272              		.loc 1 76 0
 273 001c 00BF     		nop
 274 001e 80BD     		pop	{r7, pc}
 275              		.cfi_endproc
 276              	.LFE67:
 277              		.size	pins_configure_active, .-pins_configure_active
 278              		.section	.rodata
 279              		.align	2
 280              	.LC0:
 281 0000 4F4B00   		.ascii	"OK\000"
 282 0003 00       		.align	2
 283              	.LC1:
 284 0004 41542353 		.ascii	"AT#SHDN\015\000"
 284      48444E0D 
 284      00
 285              		.section	.text.modem_power_down,"ax",%progbits
 286              		.align	2
 287              		.global	modem_power_down
 288              		.thumb
 289              		.thumb_func
 290              		.type	modem_power_down, %function
 291              	modem_power_down:
 292              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 293              		.loc 1 79 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 80B5     		push	{r7, lr}
 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 7, -8
 300              		.cfi_offset 14, -4
 301 0002 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 303              		.loc 1 82 0
 304 0004 41F28832 		movw	r2, #5000
 305 0008 0A49     		ldr	r1, .L12
 306 000a 0B48     		ldr	r0, .L12+4
 307 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 308              		.loc 1 85 0
 309 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 310              		.loc 1 86 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 8


 311 0014 4FF47A70 		mov	r0, #1000
 312 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 313              		.loc 1 88 0
 314 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 315              		.loc 1 89 0
 316 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 317              		.loc 1 90 0
 318 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 319              		.loc 1 91 0
 320 0028 044B     		ldr	r3, .L12+8
 321 002a 0022     		movs	r2, #0
 322 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 323              		.loc 1 93 0
 324 002e 00BF     		nop
 325 0030 80BD     		pop	{r7, pc}
 326              	.L13:
 327 0032 00BF     		.align	2
 328              	.L12:
 329 0034 00000000 		.word	.LC0
 330 0038 04000000 		.word	.LC1
 331 003c 00000000 		.word	modem_state
 332              		.cfi_endproc
 333              	.LFE68:
 334              		.size	modem_power_down, .-modem_power_down
 335              		.section	.rodata
 336 000d 000000   		.align	2
 337              	.LC2:
 338 0010 41544530 		.ascii	"ATE0\015\000"
 338      0D00
 339 0016 0000     		.align	2
 340              	.LC3:
 341 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 341      6D20626F 
 341      6F742074 
 341      696D653A 
 341      20256400 
 342              		.align	2
 343              	.LC4:
 344 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 344      6D207265 
 344      61647920 
 344      666F7220 
 344      41542063 
 345 005d 000000   		.align	2
 346              	.LC5:
 347 0060 4E6F2072 		.ascii	"No response from modem.\000"
 347      6573706F 
 347      6E736520 
 347      66726F6D 
 347      206D6F64 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 9


 348              		.section	.text.modem_power_up,"ax",%progbits
 349              		.align	2
 350              		.global	modem_power_up
 351              		.thumb
 352              		.thumb_func
 353              		.type	modem_power_up, %function
 354              	modem_power_up:
 355              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 356              		.loc 1 97 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 8
 359              		@ frame_needed = 1, uses_anonymous_args = 0
 360 0000 80B5     		push	{r7, lr}
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 82B0     		sub	sp, sp, #8
 365              		.cfi_def_cfa_offset 16
 366 0004 00AF     		add	r7, sp, #0
 367              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 368              		.loc 1 99 0
 369 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 370              		.loc 1 100 0
 371 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 372              		.loc 1 101 0
 373 000e 2C48     		ldr	r0, .L27
 374 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 375              		.loc 1 103 0
 376 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 377              		.loc 1 106 0
 378 0018 0023     		movs	r3, #0
 379 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 380              		.loc 1 107 0
 381 001c 0023     		movs	r3, #0
 382 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 383              		.loc 1 109 0
 384 0020 FFF7FEFF 		bl	getTimeStamp
 385 0024 3860     		str	r0, [r7]
 386              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 10


 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 387              		.loc 1 112 0
 388 0026 0023     		movs	r3, #0
 389 0028 BB71     		strb	r3, [r7, #6]
 390 002a 1CE0     		b	.L15
 391              	.L22:
 392              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 393              		.loc 1 114 0
 394 002c 0023     		movs	r3, #0
 395 002e 7B71     		strb	r3, [r7, #5]
 396 0030 0EE0     		b	.L16
 397              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 398              		.loc 1 116 0
 399 0032 4FF47A72 		mov	r2, #1000
 400 0036 2349     		ldr	r1, .L27+4
 401 0038 2348     		ldr	r0, .L27+8
 402 003a FFF7FEFF 		bl	at_write_command
 403 003e 0346     		mov	r3, r0
 404 0040 002B     		cmp	r3, #0
 405 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 406              		.loc 1 117 0
 407 0044 0123     		movs	r3, #1
 408 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 409              		.loc 1 118 0
 410 0048 05E0     		b	.L18
 411              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 412              		.loc 1 114 0 discriminator 2
 413 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 414 004c 0133     		adds	r3, r3, #1
 415 004e 7B71     		strb	r3, [r7, #5]
 416              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 417              		.loc 1 114 0 is_stmt 0 discriminator 1
 418 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 419 0052 132B     		cmp	r3, #19
 420 0054 EDD9     		bls	.L19
 421              	.L18:
 422              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 423              		.loc 1 122 0 is_stmt 1
 424 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 425 0058 012B     		cmp	r3, #1
 426 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 11


 427              		.loc 1 126 0 discriminator 2
 428 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 429              		.loc 1 112 0 discriminator 2
 430 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 431 0062 0133     		adds	r3, r3, #1
 432 0064 BB71     		strb	r3, [r7, #6]
 433              	.L15:
 112:modem.c       ****         
 434              		.loc 1 112 0 is_stmt 0 discriminator 1
 435 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 436 0068 022B     		cmp	r3, #2
 437 006a DFD9     		bls	.L22
 438 006c 00E0     		b	.L21
 439              	.L26:
 123:modem.c       ****             break;
 440              		.loc 1 123 0 is_stmt 1
 441 006e 00BF     		nop
 442              	.L21:
 443              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 444              		.loc 1 130 0
 445 0070 FFF7FEFF 		bl	getTimeStamp
 446 0074 0246     		mov	r2, r0
 447 0076 3B68     		ldr	r3, [r7]
 448 0078 D31A     		subs	r3, r2, r3
 449 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 450              		.loc 1 131 0
 451 007c 3A68     		ldr	r2, [r7]
 452 007e 1349     		ldr	r1, .L27+12
 453 0080 0020     		movs	r0, #0
 454 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 455              		.loc 1 133 0
 456 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 457 0088 012B     		cmp	r3, #1
 458 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 459              		.loc 1 134 0
 460 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 461 008e 1A46     		mov	r2, r3
 462 0090 0F49     		ldr	r1, .L27+16
 463 0092 0020     		movs	r0, #0
 464 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 465              		.loc 1 135 0
 466 0098 0E4B     		ldr	r3, .L27+20
 467 009a 0122     		movs	r2, #1
 468 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 12


 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 469              		.loc 1 143 0
 470 009e 0123     		movs	r3, #1
 471 00a0 09E0     		b	.L25
 472              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 473              		.loc 1 137 0
 474 00a2 0D49     		ldr	r1, .L27+24
 475 00a4 0220     		movs	r0, #2
 476 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 477              		.loc 1 138 0
 478 00aa 0A4B     		ldr	r3, .L27+20
 479 00ac 0022     		movs	r2, #0
 480 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 481              		.loc 1 140 0
 482 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 483              		.loc 1 141 0
 484 00b4 0023     		movs	r3, #0
 485              	.L25:
 144:modem.c       **** }
 486              		.loc 1 144 0
 487 00b6 1846     		mov	r0, r3
 488 00b8 0837     		adds	r7, r7, #8
 489              		.cfi_def_cfa_offset 8
 490 00ba BD46     		mov	sp, r7
 491              		.cfi_def_cfa_register 13
 492              		@ sp needed
 493 00bc 80BD     		pop	{r7, pc}
 494              	.L28:
 495 00be 00BF     		.align	2
 496              	.L27:
 497 00c0 00000000 		.word	isr_telit_rx
 498 00c4 00000000 		.word	.LC0
 499 00c8 10000000 		.word	.LC2
 500 00cc 18000000 		.word	.LC3
 501 00d0 2C000000 		.word	.LC4
 502 00d4 00000000 		.word	modem_state
 503 00d8 60000000 		.word	.LC5
 504              		.cfi_endproc
 505              	.LFE69:
 506              		.size	modem_power_up, .-modem_power_up
 507              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 508              		.align	2
 509              		.global	modem_soft_power_cycle
 510              		.thumb
 511              		.thumb_func
 512              		.type	modem_soft_power_cycle, %function
 513              	modem_soft_power_cycle:
 514              	.LFB70:
 145:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 13


 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 515              		.loc 1 147 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519 0000 80B5     		push	{r7, lr}
 520              		.cfi_def_cfa_offset 8
 521              		.cfi_offset 7, -8
 522              		.cfi_offset 14, -4
 523 0002 00AF     		add	r7, sp, #0
 524              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 525              		.loc 1 148 0
 526 0004 0120     		movs	r0, #1
 527 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 528              		.loc 1 149 0
 529 000a 4FF4FA60 		mov	r0, #2000
 530 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 531              		.loc 1 150 0
 532 0012 0020     		movs	r0, #0
 533 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 534              		.loc 1 152 0
 535 0018 00BF     		nop
 536 001a 80BD     		pop	{r7, pc}
 537              		.cfi_endproc
 538              	.LFE70:
 539              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 540              		.section	.text.uart_string_reset,"ax",%progbits
 541              		.align	2
 542              		.global	uart_string_reset
 543              		.thumb
 544              		.thumb_func
 545              		.type	uart_string_reset, %function
 546              	uart_string_reset:
 547              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 548              		.loc 1 155 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 00AF     		add	r7, sp, #0
 557              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 558              		.loc 1 156 0
 559 0004 064B     		ldr	r3, .L31
 560 0006 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 14


 561 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 562              		.loc 1 158 0
 563 000a 4FF48062 		mov	r2, #1024
 564 000e 0021     		movs	r1, #0
 565 0010 0448     		ldr	r0, .L31+4
 566 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 567              		.loc 1 160 0
 568 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 569              		.loc 1 161 0
 570 001a 00BF     		nop
 571 001c 80BD     		pop	{r7, pc}
 572              	.L32:
 573 001e 00BF     		.align	2
 574              	.L31:
 575 0020 00000000 		.word	uart_string_index
 576 0024 00000000 		.word	uart_received_string
 577              		.cfi_endproc
 578              	.LFE71:
 579              		.size	uart_string_reset, .-uart_string_reset
 580              		.section	.rodata
 581              		.align	2
 582              	.LC6:
 583 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 583      6D207365 
 583      6E742041 
 583      5420636F 
 583      6D6D616E 
 584              		.align	2
 585              	.LC7:
 586 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 586      6D205265 
 586      63656976 
 586      65642065 
 586      78706563 
 587 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 587      616E643A 
 587      2025730A 
 587      52656365 
 587      69766564 
 588 00f1 000000   		.align	2
 589              	.LC8:
 590 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 590      6D207265 
 590      71756972 
 590      65642025 
 590      64207472 
 591 0127 0A00     		.ascii	"\012\000"
 592 0129 000000   		.align	2
 593              	.LC9:
 594 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 594      64206E6F 
 594      74207772 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 15


 594      69746520 
 594      41542063 
 595 0159 00       		.ascii	"\000"
 596              		.section	.text.at_write_command,"ax",%progbits
 597              		.align	2
 598              		.global	at_write_command
 599              		.thumb
 600              		.thumb_func
 601              		.type	at_write_command, %function
 602              	at_write_command:
 603              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 604              		.loc 1 166 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 40
 607              		@ frame_needed = 1, uses_anonymous_args = 0
 608 0000 80B5     		push	{r7, lr}
 609              		.cfi_def_cfa_offset 8
 610              		.cfi_offset 7, -8
 611              		.cfi_offset 14, -4
 612 0002 8AB0     		sub	sp, sp, #40
 613              		.cfi_def_cfa_offset 48
 614 0004 00AF     		add	r7, sp, #0
 615              		.cfi_def_cfa_register 7
 616 0006 F860     		str	r0, [r7, #12]
 617 0008 B960     		str	r1, [r7, #8]
 618 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 619              		.loc 1 168 0
 620 000c 0023     		movs	r3, #0
 621 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 622              		.loc 1 170 0
 623 0010 0023     		movs	r3, #0
 624 0012 7B62     		str	r3, [r7, #36]
 625 0014 46E0     		b	.L34
 626              	.L42:
 627              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 628              		.loc 1 173 0
 629 0016 0A23     		movs	r3, #10
 630 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 631              		.loc 1 174 0
 632 001a 7A68     		ldr	r2, [r7, #4]
 633 001c FB69     		ldr	r3, [r7, #28]
 634 001e B2FBF3F3 		udiv	r3, r2, r3
 635 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 16


 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 636              		.loc 1 177 0
 637 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 638              		.loc 1 180 0
 639 0028 F868     		ldr	r0, [r7, #12]
 640 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 641              		.loc 1 184 0
 642 002e 7B68     		ldr	r3, [r7, #4]
 643 0030 002B     		cmp	r3, #0
 644 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 645              		.loc 1 185 0
 646 0034 FA68     		ldr	r2, [r7, #12]
 647 0036 1F49     		ldr	r1, .L43
 648 0038 0020     		movs	r0, #0
 649 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 650              		.loc 1 186 0
 651 003e 0123     		movs	r3, #1
 652 0040 34E0     		b	.L36
 653              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 654              		.loc 1 190 0
 655 0042 0023     		movs	r3, #0
 656 0044 3B62     		str	r3, [r7, #32]
 657 0046 20E0     		b	.L37
 658              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 659              		.loc 1 191 0
 660 0048 F869     		ldr	r0, [r7, #28]
 661 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 662              		.loc 1 194 0
 663 004e B968     		ldr	r1, [r7, #8]
 664 0050 1948     		ldr	r0, .L43+4
 665 0052 FFF7FEFF 		bl	strstr
 666 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 667              		.loc 1 195 0
 668 0058 7B69     		ldr	r3, [r7, #20]
 669 005a 002B     		cmp	r3, #0
 670 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 671              		.loc 1 196 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 17


 672 005e 7B6A     		ldr	r3, [r7, #36]
 673 0060 002B     		cmp	r3, #0
 674 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 675              		.loc 1 198 0
 676 0064 144B     		ldr	r3, .L43+4
 677 0066 FA68     		ldr	r2, [r7, #12]
 678 0068 1449     		ldr	r1, .L43+8
 679 006a 0020     		movs	r0, #0
 680 006c FFF7FEFF 		bl	printNotif
 681 0070 06E0     		b	.L40
 682              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 683              		.loc 1 200 0
 684 0072 7B6A     		ldr	r3, [r7, #36]
 685 0074 5A1C     		adds	r2, r3, #1
 686 0076 104B     		ldr	r3, .L43+4
 687 0078 1149     		ldr	r1, .L43+12
 688 007a 0120     		movs	r0, #1
 689 007c FFF7FEFF 		bl	printNotif
 690              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 691              		.loc 1 203 0
 692 0080 0123     		movs	r3, #1
 693 0082 13E0     		b	.L36
 694              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 695              		.loc 1 190 0 discriminator 2
 696 0084 3B6A     		ldr	r3, [r7, #32]
 697 0086 0133     		adds	r3, r3, #1
 698 0088 3B62     		str	r3, [r7, #32]
 699              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 700              		.loc 1 190 0 is_stmt 0 discriminator 1
 701 008a 3A6A     		ldr	r2, [r7, #32]
 702 008c BB69     		ldr	r3, [r7, #24]
 703 008e 9A42     		cmp	r2, r3
 704 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 705              		.loc 1 209 0 is_stmt 1 discriminator 2
 706 0092 094B     		ldr	r3, .L43+4
 707 0094 FA68     		ldr	r2, [r7, #12]
 708 0096 0B49     		ldr	r1, .L43+16
 709 0098 0220     		movs	r0, #2
 710 009a FFF7FEFF 		bl	printNotif
 711              	.LBE4:
 170:modem.c       ****         
 712              		.loc 1 170 0 discriminator 2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 18


 713 009e 7B6A     		ldr	r3, [r7, #36]
 714 00a0 0133     		adds	r3, r3, #1
 715 00a2 7B62     		str	r3, [r7, #36]
 716              	.L34:
 170:modem.c       ****         
 717              		.loc 1 170 0 is_stmt 0 discriminator 1
 718 00a4 7B6A     		ldr	r3, [r7, #36]
 719 00a6 022B     		cmp	r3, #2
 720 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 721              		.loc 1 214 0 is_stmt 1
 722 00aa 0023     		movs	r3, #0
 723              	.L36:
 215:modem.c       **** }
 724              		.loc 1 215 0
 725 00ac 1846     		mov	r0, r3
 726 00ae 2837     		adds	r7, r7, #40
 727              		.cfi_def_cfa_offset 8
 728 00b0 BD46     		mov	sp, r7
 729              		.cfi_def_cfa_register 13
 730              		@ sp needed
 731 00b2 80BD     		pop	{r7, pc}
 732              	.L44:
 733              		.align	2
 734              	.L43:
 735 00b4 78000000 		.word	.LC6
 736 00b8 00000000 		.word	uart_received_string
 737 00bc A4000000 		.word	.LC7
 738 00c0 F4000000 		.word	.LC8
 739 00c4 2C010000 		.word	.LC9
 740              		.cfi_endproc
 741              	.LFE72:
 742              		.size	at_write_command, .-at_write_command
 743              		.section	.rodata
 744 015a 0000     		.align	2
 745              	.LC10:
 746 015c 54455354 		.ascii	"TEST_MODEM\000"
 746      5F4D4F44 
 746      454D00
 747 0167 00       		.align	2
 748              	.LC11:
 749 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 749      65706F6E 
 749      73652066 
 749      726F6D20 
 749      6D6F6465 
 750 017f 00       		.align	2
 751              	.LC12:
 752 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 752      6D20636F 
 752      6E6E6563 
 752      74656420 
 752      746F206E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 19


 753              		.section	.text.modem_test,"ax",%progbits
 754              		.align	2
 755              		.global	modem_test
 756              		.thumb
 757              		.thumb_func
 758              		.type	modem_test, %function
 759              	modem_test:
 760              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 761              		.loc 1 218 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 408
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 0000 B0B5     		push	{r4, r5, r7, lr}
 766              		.cfi_def_cfa_offset 16
 767              		.cfi_offset 4, -16
 768              		.cfi_offset 5, -12
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 E6B0     		sub	sp, sp, #408
 772              		.cfi_def_cfa_offset 424
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 3B1D     		adds	r3, r7, #4
 776 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 777              		.loc 1 221 0
 778 000a 07F10C03 		add	r3, r7, #12
 779 000e 0022     		movs	r2, #0
 780 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 781              		.loc 1 223 0
 782 0014 07F10C03 		add	r3, r7, #12
 783 0018 364A     		ldr	r2, .L53
 784 001a 07CA     		ldmia	r2, {r0, r1, r2}
 785 001c 03C3     		stmia	r3!, {r0, r1}
 786 001e 1A80     		strh	r2, [r3]	@ movhi
 787 0020 0233     		adds	r3, r3, #2
 788 0022 120C     		lsrs	r2, r2, #16
 789 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 790              		.loc 1 224 0
 791 0026 07F10C03 		add	r3, r7, #12
 792 002a 8133     		adds	r3, r3, #129
 793 002c 324A     		ldr	r2, .L53+4
 794 002e 1C46     		mov	r4, r3
 795 0030 1546     		mov	r5, r2
 796 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 797 0034 2060     		str	r0, [r4]	@ unaligned
 798 0036 6160     		str	r1, [r4, #4]	@ unaligned
 799 0038 A260     		str	r2, [r4, #8]	@ unaligned
 800 003a E360     		str	r3, [r4, #12]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 20


 801 003c 2868     		ldr	r0, [r5]	@ unaligned
 802 003e 2061     		str	r0, [r4, #16]	@ unaligned
 803 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 804 0042 AA79     		ldrb	r2, [r5, #6]
 805 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 806 0046 1346     		mov	r3, r2
 807 0048 A375     		strb	r3, [r4, #22]
 808              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 809              		.loc 1 227 0
 810 004a 0023     		movs	r3, #0
 811 004c C7F89431 		str	r3, [r7, #404]
 812 0050 3AE0     		b	.L46
 813              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 814              		.loc 1 229 0
 815 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 816              		.loc 1 231 0
 817 0056 FFF7FEFF 		bl	modem_get_state
 818 005a 0346     		mov	r3, r0
 819 005c 002B     		cmp	r3, #0
 820 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 821              		.loc 1 233 0
 822 0060 FFF7FEFF 		bl	modem_power_up
 823 0064 27E0     		b	.L48
 824              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 825              		.loc 1 236 0
 826 0066 FFF7FEFF 		bl	modem_get_state
 827 006a 0346     		mov	r3, r0
 828 006c 042B     		cmp	r3, #4
 829 006e 22D1     		bne	.L48
 830              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 831              		.loc 1 240 0
 832 0070 FFF7FEFF 		bl	modem_get_network_time
 833 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 834              		.loc 1 241 0
 835 0078 D7F89031 		ldr	r3, [r7, #400]
 836 007c 002B     		cmp	r3, #0
 837 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 838              		.loc 1 242 0
 839 0080 D7F89001 		ldr	r0, [r7, #400]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 21


 840 0084 FFF7FEFF 		bl	setTime
 841              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 842              		.loc 1 245 0
 843 0088 07F10C03 		add	r3, r7, #12
 844 008c 8133     		adds	r3, r3, #129
 845 008e 1B4A     		ldr	r2, .L53+8
 846 0090 1D46     		mov	r5, r3
 847 0092 1446     		mov	r4, r2
 848 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 849 0096 2860     		str	r0, [r5]	@ unaligned
 850 0098 6960     		str	r1, [r5, #4]	@ unaligned
 851 009a AA60     		str	r2, [r5, #8]	@ unaligned
 852 009c EB60     		str	r3, [r5, #12]	@ unaligned
 853 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 854 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 855 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 856 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 857              		.loc 1 246 0
 858 00a6 07F10C03 		add	r3, r7, #12
 859 00aa 0122     		movs	r2, #1
 860 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 861              		.loc 1 248 0
 862 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 863              		.loc 1 249 0
 864 00b4 0CE0     		b	.L50
 865              	.L48:
 866              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 867              		.loc 1 252 0 discriminator 2
 868 00b6 4FF47A70 		mov	r0, #1000
 869 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 870              		.loc 1 227 0 discriminator 2
 871 00be D7F89431 		ldr	r3, [r7, #404]
 872 00c2 0133     		adds	r3, r3, #1
 873 00c4 C7F89431 		str	r3, [r7, #404]
 874              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 875              		.loc 1 227 0 is_stmt 0 discriminator 1
 876 00c8 D7F89431 		ldr	r3, [r7, #404]
 877 00cc 3B2B     		cmp	r3, #59
 878 00ce C0DD     		ble	.L51
 879              	.L50:
 880              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 22


 881              		.loc 1 256 0 is_stmt 1
 882 00d0 3B1D     		adds	r3, r7, #4
 883 00d2 1A68     		ldr	r2, [r3]
 884 00d4 07F10C03 		add	r3, r7, #12
 885 00d8 1046     		mov	r0, r2
 886 00da 1946     		mov	r1, r3
 887 00dc 40F28113 		movw	r3, #385
 888 00e0 1A46     		mov	r2, r3
 889 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 890              		.loc 1 257 0
 891 00e6 3B1D     		adds	r3, r7, #4
 892 00e8 1868     		ldr	r0, [r3]
 893 00ea 07F5CC77 		add	r7, r7, #408
 894              		.cfi_def_cfa_offset 16
 895 00ee BD46     		mov	sp, r7
 896              		.cfi_def_cfa_register 13
 897              		@ sp needed
 898 00f0 B0BD     		pop	{r4, r5, r7, pc}
 899              	.L54:
 900 00f2 00BF     		.align	2
 901              	.L53:
 902 00f4 5C010000 		.word	.LC10
 903 00f8 68010000 		.word	.LC11
 904 00fc 80010000 		.word	.LC12
 905              		.cfi_endproc
 906              	.LFE73:
 907              		.size	modem_test, .-modem_test
 908              		.section	.text.extract_string,"ax",%progbits
 909              		.align	2
 910              		.global	extract_string
 911              		.thumb
 912              		.thumb_func
 913              		.type	extract_string, %function
 914              	extract_string:
 915              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 916              		.loc 1 260 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 24
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920 0000 80B5     		push	{r7, lr}
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 86B0     		sub	sp, sp, #24
 925              		.cfi_def_cfa_offset 32
 926 0004 00AF     		add	r7, sp, #0
 927              		.cfi_def_cfa_register 7
 928 0006 F860     		str	r0, [r7, #12]
 929 0008 B960     		str	r1, [r7, #8]
 930 000a 7A60     		str	r2, [r7, #4]
 931 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 23


 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 932              		.loc 1 266 0
 933 000e B968     		ldr	r1, [r7, #8]
 934 0010 F868     		ldr	r0, [r7, #12]
 935 0012 FFF7FEFF 		bl	strstr
 936 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 937              		.loc 1 267 0
 938 0018 7B69     		ldr	r3, [r7, #20]
 939 001a 002B     		cmp	r3, #0
 940 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 941              		.loc 1 269 0
 942 001e FB68     		ldr	r3, [r7, #12]
 943 0020 7B61     		str	r3, [r7, #20]
 944              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 945              		.loc 1 272 0
 946 0022 B868     		ldr	r0, [r7, #8]
 947 0024 FFF7FEFF 		bl	strlen
 948 0028 0246     		mov	r2, r0
 949 002a 7B69     		ldr	r3, [r7, #20]
 950 002c 1344     		add	r3, r3, r2
 951 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 952              		.loc 1 277 0
 953 0030 7968     		ldr	r1, [r7, #4]
 954 0032 7869     		ldr	r0, [r7, #20]
 955 0034 FFF7FEFF 		bl	strstr
 956 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 957              		.loc 1 278 0
 958 003a 3B69     		ldr	r3, [r7, #16]
 959 003c 002B     		cmp	r3, #0
 960 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 961              		.loc 1 280 0
 962 0040 F868     		ldr	r0, [r7, #12]
 963 0042 FFF7FEFF 		bl	strlen
 964 0046 0246     		mov	r2, r0
 965 0048 FB68     		ldr	r3, [r7, #12]
 966 004a 1344     		add	r3, r3, r2
 967 004c 3B61     		str	r3, [r7, #16]
 968              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 24


 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 969              		.loc 1 284 0
 970 004e 3A69     		ldr	r2, [r7, #16]
 971 0050 7B69     		ldr	r3, [r7, #20]
 972 0052 D31A     		subs	r3, r2, r3
 973 0054 1A46     		mov	r2, r3
 974 0056 7969     		ldr	r1, [r7, #20]
 975 0058 3868     		ldr	r0, [r7]
 976 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 977              		.loc 1 285 0
 978 005e 3A69     		ldr	r2, [r7, #16]
 979 0060 7B69     		ldr	r3, [r7, #20]
 980 0062 D31A     		subs	r3, r2, r3
 981 0064 1A46     		mov	r2, r3
 982 0066 3B68     		ldr	r3, [r7]
 983 0068 1344     		add	r3, r3, r2
 984 006a 0022     		movs	r2, #0
 985 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 986              		.loc 1 286 0
 987 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 988              		.loc 1 288 0
 989 0070 1846     		mov	r0, r3
 990 0072 1837     		adds	r7, r7, #24
 991              		.cfi_def_cfa_offset 8
 992 0074 BD46     		mov	sp, r7
 993              		.cfi_def_cfa_register 13
 994              		@ sp needed
 995 0076 80BD     		pop	{r7, pc}
 996              		.cfi_endproc
 997              	.LFE74:
 998              		.size	extract_string, .-extract_string
 999              		.section	.rodata
 1000              		.align	2
 1001              	.LC13:
 1002 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1002      20746F20 
 1002      636F6E6E 
 1002      65637420 
 1002      746F206E 
 1003 01c3 00       		.align	2
 1004              	.LC14:
 1005 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1005      6D207469 
 1005      6D656420 
 1005      6F757420 
 1005      6F6E206E 
 1006 01e7 00       		.align	2
 1007              	.LC15:
 1008 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1008      69726564 
 1008      20495020 
 1008      61646472 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 25


 1008      6573733A 
 1009              		.align	2
 1010              	.LC16:
 1011 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1011      6D207469 
 1011      6D656420 
 1011      6F757420 
 1011      6F6E2049 
 1012              		.section	.text.modem_process_tasks,"ax",%progbits
 1013              		.align	2
 1014              		.global	modem_process_tasks
 1015              		.thumb
 1016              		.thumb_func
 1017              		.type	modem_process_tasks, %function
 1018              	modem_process_tasks:
 1019              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1020              		.loc 1 291 0
 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 8
 1023              		@ frame_needed = 1, uses_anonymous_args = 0
 1024 0000 80B5     		push	{r7, lr}
 1025              		.cfi_def_cfa_offset 8
 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0002 82B0     		sub	sp, sp, #8
 1029              		.cfi_def_cfa_offset 16
 1030 0004 00AF     		add	r7, sp, #0
 1031              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1032              		.loc 1 293 0
 1033 0006 534B     		ldr	r3, .L75
 1034 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1035 000a 012B     		cmp	r3, #1
 1036 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1037              		.loc 1 295 0
 1038 000e FFF7FEFF 		bl	getTimeStamp
 1039 0012 0246     		mov	r2, r0
 1040 0014 504B     		ldr	r3, .L75+4
 1041 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1042              		.loc 1 296 0
 1043 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1044              		.loc 1 297 0
 1045 001c 4D4B     		ldr	r3, .L75
 1046 001e 0222     		movs	r2, #2
 1047 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1048              		.loc 1 298 0
 1049 0022 0123     		movs	r3, #1
 1050 0024 92E0     		b	.L61
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 26


 1051              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1052              		.loc 1 302 0
 1053 0026 4B4B     		ldr	r3, .L75
 1054 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1055 002a 022B     		cmp	r3, #2
 1056 002c 5FD1     		bne	.L62
 1057              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1058              		.loc 1 305 0
 1059 002e 0023     		movs	r3, #0
 1060 0030 FB71     		strb	r3, [r7, #7]
 1061 0032 2BE0     		b	.L63
 1062              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1063              		.loc 1 307 0
 1064 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1065              		.loc 1 309 0
 1066 0038 484B     		ldr	r3, .L75+8
 1067 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1068 003c 83F00103 		eor	r3, r3, #1
 1069 0040 DBB2     		uxtb	r3, r3
 1070 0042 002B     		cmp	r3, #0
 1071 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1072              		.loc 1 312 0
 1073 0046 464B     		ldr	r3, .L75+12
 1074 0048 5B69     		ldr	r3, [r3, #20]
 1075 004a 1A2B     		cmp	r3, #26
 1076 004c 03DD     		ble	.L64
 1077              		.loc 1 312 0 is_stmt 0 discriminator 1
 1078 004e 444B     		ldr	r3, .L75+12
 1079 0050 5B69     		ldr	r3, [r3, #20]
 1080 0052 FF2B     		cmp	r3, #255
 1081 0054 1ED1     		bne	.L74
 1082              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1083              		.loc 1 317 0 is_stmt 1
 1084 0056 414B     		ldr	r3, .L75+8
 1085 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1086 005a 002B     		cmp	r3, #0
 1087 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 27


 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1088              		.loc 1 320 0
 1089 005e 404B     		ldr	r3, .L75+12
 1090 0060 9B68     		ldr	r3, [r3, #8]
 1091 0062 242B     		cmp	r3, #36
 1092 0064 03DD     		ble	.L67
 1093              		.loc 1 320 0 is_stmt 0 discriminator 1
 1094 0066 3E4B     		ldr	r3, .L75+12
 1095 0068 9B68     		ldr	r3, [r3, #8]
 1096 006a FF2B     		cmp	r3, #255
 1097 006c 13D1     		bne	.L65
 1098              	.L67:
 1099              		.loc 1 320 0 discriminator 3
 1100 006e 3C4B     		ldr	r3, .L75+12
 1101 0070 5B69     		ldr	r3, [r3, #20]
 1102 0072 1A2B     		cmp	r3, #26
 1103 0074 03DD     		ble	.L66
 1104              		.loc 1 320 0 discriminator 4
 1105 0076 3A4B     		ldr	r3, .L75+12
 1106 0078 5B69     		ldr	r3, [r3, #20]
 1107 007a FF2B     		cmp	r3, #255
 1108 007c 0BD1     		bne	.L65
 1109              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1110              		.loc 1 325 0 is_stmt 1 discriminator 2
 1111 007e 4FF47A70 		mov	r0, #1000
 1112 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1113              		.loc 1 305 0 discriminator 2
 1114 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1115 0088 0133     		adds	r3, r3, #1
 1116 008a FB71     		strb	r3, [r7, #7]
 1117              	.L63:
 305:modem.c       ****             // Get cell network stats
 1118              		.loc 1 305 0 is_stmt 0 discriminator 1
 1119 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1120 008e 1D2B     		cmp	r3, #29
 1121 0090 D0D9     		bls	.L68
 1122 0092 00E0     		b	.L65
 1123              	.L74:
 313:modem.c       ****                 }
 1124              		.loc 1 313 0 is_stmt 1
 1125 0094 00BF     		nop
 1126              	.L65:
 1127              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1128              		.loc 1 329 0
 1129 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1130 009a 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 28


 1131 009c 002B     		cmp	r3, #0
 1132 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1133              		.loc 1 331 0
 1134 00a0 FFF7FEFF 		bl	getTimeStamp
 1135 00a4 0246     		mov	r2, r0
 1136 00a6 2C4B     		ldr	r3, .L75+4
 1137 00a8 1B68     		ldr	r3, [r3]
 1138 00aa D31A     		subs	r3, r2, r3
 1139 00ac 2C4A     		ldr	r2, .L75+12
 1140 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1141              		.loc 1 332 0
 1142 00b0 2B4B     		ldr	r3, .L75+12
 1143 00b2 9B69     		ldr	r3, [r3, #24]
 1144 00b4 1A46     		mov	r2, r3
 1145 00b6 2B49     		ldr	r1, .L75+16
 1146 00b8 0020     		movs	r0, #0
 1147 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1148              		.loc 1 334 0
 1149 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1150              		.loc 1 335 0
 1151 00c2 244B     		ldr	r3, .L75
 1152 00c4 0322     		movs	r2, #3
 1153 00c6 1A70     		strb	r2, [r3]
 1154              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1155              		.loc 1 339 0
 1156 00c8 FFF7FEFF 		bl	getTimeStamp
 1157 00cc 0246     		mov	r2, r0
 1158 00ce 224B     		ldr	r3, .L75+4
 1159 00d0 1B68     		ldr	r3, [r3]
 1160 00d2 D31A     		subs	r3, r2, r3
 1161 00d4 B42B     		cmp	r3, #180
 1162 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1163              		.loc 1 340 0
 1164 00d8 1E4B     		ldr	r3, .L75
 1165 00da 0022     		movs	r2, #0
 1166 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1167              		.loc 1 341 0
 1168 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1169              		.loc 1 342 0
 1170 00e2 2149     		ldr	r1, .L75+20
 1171 00e4 0220     		movs	r0, #2
 1172 00e6 FFF7FEFF 		bl	printNotif
 1173              	.L70:
 343:modem.c       ****             
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 29


 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1174              		.loc 1 345 0
 1175 00ea 0023     		movs	r3, #0
 1176 00ec 2EE0     		b	.L61
 1177              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1178              		.loc 1 348 0
 1179 00ee 194B     		ldr	r3, .L75
 1180 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1181 00f2 032B     		cmp	r3, #3
 1182 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1183              		.loc 1 350 0
 1184 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1185 00fa 0346     		mov	r3, r0
 1186 00fc 002B     		cmp	r3, #0
 1187 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1188              		.loc 1 351 0
 1189 0100 144B     		ldr	r3, .L75
 1190 0102 0422     		movs	r2, #4
 1191 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1192              		.loc 1 353 0
 1193 0106 FFF7FEFF 		bl	getTimeStamp
 1194 010a 0246     		mov	r2, r0
 1195 010c 124B     		ldr	r3, .L75+4
 1196 010e 1B68     		ldr	r3, [r3]
 1197 0110 D31A     		subs	r3, r2, r3
 1198 0112 134A     		ldr	r2, .L75+12
 1199 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1200              		.loc 1 354 0
 1201 0116 124B     		ldr	r3, .L75+12
 1202 0118 DB69     		ldr	r3, [r3, #28]
 1203 011a 1A46     		mov	r2, r3
 1204 011c 1349     		ldr	r1, .L75+24
 1205 011e 0020     		movs	r0, #0
 1206 0120 FFF7FEFF 		bl	printNotif
 1207              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1208              		.loc 1 359 0
 1209 0124 FFF7FEFF 		bl	getTimeStamp
 1210 0128 0246     		mov	r2, r0
 1211 012a 0B4B     		ldr	r3, .L75+4
 1212 012c 1B68     		ldr	r3, [r3]
 1213 012e D31A     		subs	r3, r2, r3
 1214 0130 E62B     		cmp	r3, #230
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 30


 1215 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1216              		.loc 1 360 0
 1217 0134 074B     		ldr	r3, .L75
 1218 0136 0022     		movs	r2, #0
 1219 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1220              		.loc 1 361 0
 1221 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1222              		.loc 1 362 0
 1223 013e 0C49     		ldr	r1, .L75+28
 1224 0140 0220     		movs	r0, #2
 1225 0142 FFF7FEFF 		bl	printNotif
 1226              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1227              		.loc 1 365 0
 1228 0146 0023     		movs	r3, #0
 1229 0148 00E0     		b	.L61
 1230              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1231              		.loc 1 368 0
 1232 014a 0023     		movs	r3, #0
 1233              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1234              		.loc 1 370 0
 1235 014c 1846     		mov	r0, r3
 1236 014e 0837     		adds	r7, r7, #8
 1237              		.cfi_def_cfa_offset 8
 1238 0150 BD46     		mov	sp, r7
 1239              		.cfi_def_cfa_register 13
 1240              		@ sp needed
 1241 0152 80BD     		pop	{r7, pc}
 1242              	.L76:
 1243              		.align	2
 1244              	.L75:
 1245 0154 00000000 		.word	modem_state
 1246 0158 00000000 		.word	modem_start_time_stamp
 1247 015c 00000000 		.word	updatable_parameters
 1248 0160 00000000 		.word	modem_stats
 1249 0164 9C010000 		.word	.LC13
 1250 0168 C4010000 		.word	.LC14
 1251 016c E8010000 		.word	.LC15
 1252 0170 08020000 		.word	.LC16
 1253              		.cfi_endproc
 1254              	.LFE75:
 1255              		.size	modem_process_tasks, .-modem_process_tasks
 1256              		.section	.rodata
 1257 022f 00       		.align	2
 1258              	.LC17:
 1259 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1259      6B696E67 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 31


 1259      2041542B 
 1259      43524547 
 1259      3F00
 1260 0242 0000     		.align	2
 1261              	.LC18:
 1262 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1262      5245473F 
 1262      0D00
 1263 024e 0000     		.align	2
 1264              	.LC19:
 1265 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1265      61637469 
 1265      6E672073 
 1265      7472696E 
 1265      67204154 
 1266 026b 00       		.align	2
 1267              	.LC20:
 1268 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1268      5F726563 
 1268      65697665 
 1268      645F7374 
 1268      72696E67 
 1269 0285 000000   		.align	2
 1270              	.LC21:
 1271 0288 0D00     		.ascii	"\015\000"
 1272 028a 0000     		.align	2
 1273              	.LC22:
 1274 028c 3A2000   		.ascii	": \000"
 1275 028f 00       		.align	2
 1276              	.LC23:
 1277 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1277      73746572 
 1277      65642074 
 1277      6F206E65 
 1277      74776F72 
 1278              		.align	2
 1279              	.LC24:
 1280 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1280      20657874 
 1280      72616369 
 1280      6E672073 
 1280      7472696E 
 1281 02cf 00       		.align	2
 1282              	.LC25:
 1283 02d0 302C3100 		.ascii	"0,1\000"
 1284              		.align	2
 1285              	.LC26:
 1286 02d4 302C3500 		.ascii	"0,5\000"
 1287              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1288              		.align	2
 1289              		.global	is_connected_to_cell_network
 1290              		.thumb
 1291              		.thumb_func
 1292              		.type	is_connected_to_cell_network, %function
 1293              	is_connected_to_cell_network:
 1294              	.LFB76:
 371:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 32


 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1295              		.loc 1 373 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 16
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299 0000 80B5     		push	{r7, lr}
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 7, -8
 1302              		.cfi_offset 14, -4
 1303 0002 84B0     		sub	sp, sp, #16
 1304              		.cfi_def_cfa_offset 24
 1305 0004 00AF     		add	r7, sp, #0
 1306              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1307              		.loc 1 375 0
 1308 0006 2049     		ldr	r1, .L82
 1309 0008 0020     		movs	r0, #0
 1310 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1311              		.loc 1 377 0
 1312 000e 4FF4FA62 		mov	r2, #2000
 1313 0012 1E49     		ldr	r1, .L82+4
 1314 0014 1E48     		ldr	r0, .L82+8
 1315 0016 FFF7FEFF 		bl	at_write_command
 1316 001a 0346     		mov	r3, r0
 1317 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1318              		.loc 1 379 0
 1319 001e 1D49     		ldr	r1, .L82+12
 1320 0020 0020     		movs	r0, #0
 1321 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1322              		.loc 1 380 0
 1323 0026 1C4A     		ldr	r2, .L82+16
 1324 0028 1C49     		ldr	r1, .L82+20
 1325 002a 0020     		movs	r0, #0
 1326 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1327              		.loc 1 383 0
 1328 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1329 0032 002B     		cmp	r3, #0
 1330 0034 23D0     		beq	.L78
 1331              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1332              		.loc 1 386 0
 1333 0036 0023     		movs	r3, #0
 1334 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 33


 1335              		.loc 1 388 0
 1336 003a 3B1D     		adds	r3, r7, #4
 1337 003c 184A     		ldr	r2, .L82+24
 1338 003e 1949     		ldr	r1, .L82+28
 1339 0040 1548     		ldr	r0, .L82+16
 1340 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1341              		.loc 1 389 0
 1342 0046 3B1D     		adds	r3, r7, #4
 1343 0048 1A46     		mov	r2, r3
 1344 004a 1749     		ldr	r1, .L82+32
 1345 004c 0020     		movs	r0, #0
 1346 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1347              		.loc 1 390 0
 1348 0052 1649     		ldr	r1, .L82+36
 1349 0054 0020     		movs	r0, #0
 1350 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1351              		.loc 1 393 0
 1352 005a 3B1D     		adds	r3, r7, #4
 1353 005c 1449     		ldr	r1, .L82+40
 1354 005e 1846     		mov	r0, r3
 1355 0060 FFF7FEFF 		bl	strstr
 1356 0064 0346     		mov	r3, r0
 1357 0066 002B     		cmp	r3, #0
 1358 0068 07D1     		bne	.L79
 1359              		.loc 1 393 0 is_stmt 0 discriminator 1
 1360 006a 3B1D     		adds	r3, r7, #4
 1361 006c 1149     		ldr	r1, .L82+44
 1362 006e 1846     		mov	r0, r3
 1363 0070 FFF7FEFF 		bl	strstr
 1364 0074 0346     		mov	r3, r0
 1365 0076 002B     		cmp	r3, #0
 1366 0078 01D0     		beq	.L78
 1367              	.L79:
 394:modem.c       ****             return 1u;
 1368              		.loc 1 394 0 is_stmt 1
 1369 007a 0123     		movs	r3, #1
 1370 007c 00E0     		b	.L81
 1371              	.L78:
 1372              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1373              		.loc 1 398 0
 1374 007e 0023     		movs	r3, #0
 1375              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1376              		.loc 1 400 0
 1377 0080 1846     		mov	r0, r3
 1378 0082 1037     		adds	r7, r7, #16
 1379              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 34


 1380 0084 BD46     		mov	sp, r7
 1381              		.cfi_def_cfa_register 13
 1382              		@ sp needed
 1383 0086 80BD     		pop	{r7, pc}
 1384              	.L83:
 1385              		.align	2
 1386              	.L82:
 1387 0088 30020000 		.word	.LC17
 1388 008c 00000000 		.word	.LC0
 1389 0090 44020000 		.word	.LC18
 1390 0094 50020000 		.word	.LC19
 1391 0098 00000000 		.word	uart_received_string
 1392 009c 6C020000 		.word	.LC20
 1393 00a0 88020000 		.word	.LC21
 1394 00a4 8C020000 		.word	.LC22
 1395 00a8 90020000 		.word	.LC23
 1396 00ac B0020000 		.word	.LC24
 1397 00b0 D0020000 		.word	.LC25
 1398 00b4 D4020000 		.word	.LC26
 1399              		.cfi_endproc
 1400              	.LFE76:
 1401              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1402              		.section	.rodata
 1403              		.align	2
 1404              	.LC27:
 1405 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1405      47414354 
 1405      3D312C31 
 1405      0D0A00
 1406              		.section	.text.set_up_internet_connection,"ax",%progbits
 1407              		.align	2
 1408              		.global	set_up_internet_connection
 1409              		.thumb
 1410              		.thumb_func
 1411              		.type	set_up_internet_connection, %function
 1412              	set_up_internet_connection:
 1413              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1414              		.loc 1 403 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 0
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418 0000 80B5     		push	{r7, lr}
 1419              		.cfi_def_cfa_offset 8
 1420              		.cfi_offset 7, -8
 1421              		.cfi_offset 14, -4
 1422 0002 00AF     		add	r7, sp, #0
 1423              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 35


 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1424              		.loc 1 414 0
 1425 0004 4FF47A72 		mov	r2, #1000
 1426 0008 0249     		ldr	r1, .L85
 1427 000a 0348     		ldr	r0, .L85+4
 1428 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1429              		.loc 1 416 0
 1430 0010 00BF     		nop
 1431 0012 80BD     		pop	{r7, pc}
 1432              	.L86:
 1433              		.align	2
 1434              	.L85:
 1435 0014 00000000 		.word	.LC0
 1436 0018 D8020000 		.word	.LC27
 1437              		.cfi_endproc
 1438              	.LFE77:
 1439              		.size	set_up_internet_connection, .-set_up_internet_connection
 1440              		.section	.rodata
 1441 02e7 00       		.align	2
 1442              	.LC28:
 1443 02e8 312C3100 		.ascii	"1,1\000"
 1444              		.align	2
 1445              	.LC29:
 1446 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1446      47414354 
 1446      3F0D00
 1447              		.section	.text.is_connected_to_internet,"ax",%progbits
 1448              		.align	2
 1449              		.global	is_connected_to_internet
 1450              		.thumb
 1451              		.thumb_func
 1452              		.type	is_connected_to_internet, %function
 1453              	is_connected_to_internet:
 1454              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1455              		.loc 1 419 0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 0
 1458              		@ frame_needed = 1, uses_anonymous_args = 0
 1459 0000 80B5     		push	{r7, lr}
 1460              		.cfi_def_cfa_offset 8
 1461              		.cfi_offset 7, -8
 1462              		.cfi_offset 14, -4
 1463 0002 00AF     		add	r7, sp, #0
 1464              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 36


 1465              		.loc 1 424 0
 1466 0004 4FF4FA62 		mov	r2, #2000
 1467 0008 0549     		ldr	r1, .L90
 1468 000a 0648     		ldr	r0, .L90+4
 1469 000c FFF7FEFF 		bl	at_write_command
 1470 0010 0346     		mov	r3, r0
 1471 0012 002B     		cmp	r3, #0
 1472 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1473              		.loc 1 425 0
 1474 0016 0123     		movs	r3, #1
 1475 0018 00E0     		b	.L89
 1476              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1477              		.loc 1 427 0
 1478 001a 0023     		movs	r3, #0
 1479              	.L89:
 428:modem.c       **** }
 1480              		.loc 1 428 0
 1481 001c 1846     		mov	r0, r3
 1482 001e 80BD     		pop	{r7, pc}
 1483              	.L91:
 1484              		.align	2
 1485              	.L90:
 1486 0020 E8020000 		.word	.LC28
 1487 0024 EC020000 		.word	.LC29
 1488              		.cfi_endproc
 1489              	.LFE78:
 1490              		.size	is_connected_to_internet, .-is_connected_to_internet
 1491              		.section	.rodata
 1492 02f7 00       		.align	2
 1493              	.LC30:
 1494 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1494      4553510D 
 1494      00
 1495 0301 000000   		.align	2
 1496              	.LC31:
 1497 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1497      4553513A 
 1497      2025642C 
 1497      25642C25 
 1497      642C2564 
 1498              		.section	.text.get_cell_network_stats,"ax",%progbits
 1499              		.align	2
 1500              		.global	get_cell_network_stats
 1501              		.thumb
 1502              		.thumb_func
 1503              		.type	get_cell_network_stats, %function
 1504              	get_cell_network_stats:
 1505              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1506              		.loc 1 430 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 37


 1510 0000 80B5     		push	{r7, lr}
 1511              		.cfi_def_cfa_offset 8
 1512              		.cfi_offset 7, -8
 1513              		.cfi_offset 14, -4
 1514 0002 86B0     		sub	sp, sp, #24
 1515              		.cfi_def_cfa_offset 32
 1516 0004 04AF     		add	r7, sp, #16
 1517              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1518              		.loc 1 432 0
 1519 0006 154B     		ldr	r3, .L93
 1520 0008 FF22     		movs	r2, #255
 1521 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1522              		.loc 1 433 0
 1523 000c 134B     		ldr	r3, .L93
 1524 000e FF22     		movs	r2, #255
 1525 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1526              		.loc 1 434 0
 1527 0012 124B     		ldr	r3, .L93
 1528 0014 FF22     		movs	r2, #255
 1529 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1530              		.loc 1 435 0
 1531 0018 104B     		ldr	r3, .L93
 1532 001a FF22     		movs	r2, #255
 1533 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1534              		.loc 1 436 0
 1535 001e 0F4B     		ldr	r3, .L93
 1536 0020 FF22     		movs	r2, #255
 1537 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1538              		.loc 1 437 0
 1539 0024 0D4B     		ldr	r3, .L93
 1540 0026 FF22     		movs	r2, #255
 1541 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1542              		.loc 1 440 0
 1543 002a 4FF4FA62 		mov	r2, #2000
 1544 002e 0C49     		ldr	r1, .L93+4
 1545 0030 0C48     		ldr	r0, .L93+8
 1546 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1547              		.loc 1 443 0
 1548 0036 0C4B     		ldr	r3, .L93+12
 1549 0038 0393     		str	r3, [sp, #12]
 1550 003a 0C4B     		ldr	r3, .L93+16
 1551 003c 0293     		str	r3, [sp, #8]
 1552 003e 0C4B     		ldr	r3, .L93+20
 1553 0040 0193     		str	r3, [sp, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 38


 1554 0042 0C4B     		ldr	r3, .L93+24
 1555 0044 0093     		str	r3, [sp]
 1556 0046 0C4B     		ldr	r3, .L93+28
 1557 0048 044A     		ldr	r2, .L93
 1558 004a 0C49     		ldr	r1, .L93+32
 1559 004c 0C48     		ldr	r0, .L93+36
 1560 004e FFF7FEFF 		bl	sscanf
 1561 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1562              		.loc 1 458 0
 1563 0054 00BF     		nop
 1564 0056 0837     		adds	r7, r7, #8
 1565              		.cfi_def_cfa_offset 8
 1566 0058 BD46     		mov	sp, r7
 1567              		.cfi_def_cfa_register 13
 1568              		@ sp needed
 1569 005a 80BD     		pop	{r7, pc}
 1570              	.L94:
 1571              		.align	2
 1572              	.L93:
 1573 005c 00000000 		.word	modem_stats
 1574 0060 00000000 		.word	.LC0
 1575 0064 F8020000 		.word	.LC30
 1576 0068 14000000 		.word	modem_stats+20
 1577 006c 10000000 		.word	modem_stats+16
 1578 0070 0C000000 		.word	modem_stats+12
 1579 0074 08000000 		.word	modem_stats+8
 1580 0078 04000000 		.word	modem_stats+4
 1581 007c 04030000 		.word	.LC31
 1582 0080 00000000 		.word	uart_received_string
 1583              		.cfi_endproc
 1584              	.LFE79:
 1585              		.size	get_cell_network_stats, .-get_cell_network_stats
 1586              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1587              		.align	2
 1588              		.global	updatable_parameters_initialize
 1589              		.thumb
 1590              		.thumb_func
 1591              		.type	updatable_parameters_initialize, %function
 1592              	updatable_parameters_initialize:
 1593              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 39


 461:modem.c       **** void updatable_parameters_initialize(){
 1594              		.loc 1 461 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599 0000 80B4     		push	{r7}
 1600              		.cfi_def_cfa_offset 4
 1601              		.cfi_offset 7, -4
 1602 0002 00AF     		add	r7, sp, #0
 1603              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1604              		.loc 1 462 0
 1605 0004 094B     		ldr	r3, .L96
 1606 0006 0022     		movs	r2, #0
 1607 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1608              		.loc 1 463 0
 1609 000a 084B     		ldr	r3, .L96
 1610 000c 0122     		movs	r2, #1
 1611 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 10u;
 1612              		.loc 1 464 0
 1613 0010 064B     		ldr	r3, .L96
 1614 0012 0A22     		movs	r2, #10
 1615 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 60u;
 1616              		.loc 1 465 0
 1617 0016 054B     		ldr	r3, .L96
 1618 0018 3C22     		movs	r2, #60
 1619 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1620              		.loc 1 466 0
 1621 001c 034B     		ldr	r3, .L96
 1622 001e 0122     		movs	r2, #1
 1623 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       **** }
 1624              		.loc 1 467 0
 1625 0022 00BF     		nop
 1626 0024 BD46     		mov	sp, r7
 1627              		.cfi_def_cfa_register 13
 1628              		@ sp needed
 1629 0026 80BC     		pop	{r7}
 1630              		.cfi_restore 7
 1631              		.cfi_def_cfa_offset 0
 1632 0028 7047     		bx	lr
 1633              	.L97:
 1634 002a 00BF     		.align	2
 1635              	.L96:
 1636 002c 00000000 		.word	updatable_parameters
 1637              		.cfi_endproc
 1638              	.LFE80:
 1639              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1640              		.section	.rodata
 1641 0322 0000     		.align	2
 1642              	.LC32:
 1643 0324 4E6F6465 		.ascii	"Node_Type: \000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 40


 1643      5F547970 
 1643      653A2000 
 1644              		.align	2
 1645              	.LC33:
 1646 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1646      54797065 
 1646      3A2000
 1647 033b 00       		.align	2
 1648              	.LC34:
 1649 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1649      6C655F46 
 1649      7265713A 
 1649      2000
 1650 034a 0000     		.align	2
 1651              	.LC35:
 1652 034c 5265706F 		.ascii	"Report_Freq: \000"
 1652      72745F46 
 1652      7265713A 
 1652      2000
 1653 035a 0000     		.align	2
 1654              	.LC36:
 1655 035c 44656275 		.ascii	"Debug_Freq: \000"
 1655      675F4672 
 1655      65713A20 
 1655      00
 1656 0369 000000   		.align	2
 1657              	.LC37:
 1658 036c 4170705F 		.ascii	"App_LED: \000"
 1658      4C45443A 
 1658      2000
 1659 0376 0000     		.align	2
 1660              	.LC38:
 1661 0378 256400   		.ascii	"%d\000"
 1662 037b 00       		.align	2
 1663              	.LC39:
 1664 037c 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1664      20747970 
 1664      65206368 
 1664      616E6765 
 1664      6420746F 
 1665 0397 00       		.align	2
 1666              	.LC40:
 1667 0398 436F756C 		.ascii	"Could not change node type.\000"
 1667      64206E6F 
 1667      74206368 
 1667      616E6765 
 1667      206E6F64 
 1668              		.align	2
 1669              	.LC41:
 1670 03b4 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1670      74797065 
 1670      20636861 
 1670      6E676564 
 1670      20746F3A 
 1671 03ce 0000     		.align	2
 1672              	.LC42:
 1673 03d0 436F756C 		.ascii	"Could not change SIM type.\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 41


 1673      64206E6F 
 1673      74206368 
 1673      616E6765 
 1673      2053494D 
 1674 03eb 00       		.align	2
 1675              	.LC43:
 1676 03ec 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1676      6C696E67 
 1676      20667265 
 1676      7175656E 
 1676      63792063 
 1677              		.align	2
 1678              	.LC44:
 1679 0410 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1679      64206E6F 
 1679      74207061 
 1679      72736520 
 1679      6E657720 
 1680 043e 0000     		.align	2
 1681              	.LC45:
 1682 0440 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1682      7274696E 
 1682      67206672 
 1682      65717565 
 1682      6E637920 
 1683 0465 000000   		.align	2
 1684              	.LC46:
 1685 0468 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1685      64206E6F 
 1685      74207061 
 1685      72736520 
 1685      6E657720 
 1686 0497 00       		.align	2
 1687              	.LC47:
 1688 0498 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1688      67207072 
 1688      696E7469 
 1688      6E672066 
 1688      72657175 
 1689 04c2 0000     		.align	2
 1690              	.LC48:
 1691 04c4 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1691      64206E6F 
 1691      74207061 
 1691      72736520 
 1691      6E657720 
 1692              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1693              		.align	2
 1694              		.global	get_updated_parameters_from_malcom
 1695              		.thumb
 1696              		.thumb_func
 1697              		.type	get_updated_parameters_from_malcom, %function
 1698              	get_updated_parameters_from_malcom:
 1699              	.LFB81:
 468:modem.c       **** 
 469:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 470:modem.c       **** void get_updated_parameters_from_malcom(){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 42


 1700              		.loc 1 470 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 192
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704 0000 90B5     		push	{r4, r7, lr}
 1705              		.cfi_def_cfa_offset 12
 1706              		.cfi_offset 4, -12
 1707              		.cfi_offset 7, -8
 1708              		.cfi_offset 14, -4
 1709 0002 B1B0     		sub	sp, sp, #196
 1710              		.cfi_def_cfa_offset 208
 1711 0004 00AF     		add	r7, sp, #0
 1712              		.cfi_def_cfa_register 7
 471:modem.c       ****     
 472:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 473:modem.c       ****     char s_node_type[10];
 474:modem.c       ****     char s_sim_type[10];
 475:modem.c       ****     char s_sample_freq[10];
 476:modem.c       ****     char s_report_freq[10];
 477:modem.c       ****     char s_debug_freq[10];
 478:modem.c       ****     
 479:modem.c       ****     //apps
 480:modem.c       ****     char s_app_led[100];
 481:modem.c       ****     s_app_led[0] = '\0';
 1713              		.loc 1 481 0
 1714 0006 0023     		movs	r3, #0
 1715 0008 87F82030 		strb	r3, [r7, #32]
 482:modem.c       ****     
 483:modem.c       ****     s_node_type[0] = '\0';
 1716              		.loc 1 483 0
 1717 000c 0023     		movs	r3, #0
 1718 000e 87F8B430 		strb	r3, [r7, #180]
 484:modem.c       ****     s_sim_type[0] = '\0';
 1719              		.loc 1 484 0
 1720 0012 0023     		movs	r3, #0
 1721 0014 87F8A830 		strb	r3, [r7, #168]
 485:modem.c       ****     s_sample_freq[0] = '\0';
 1722              		.loc 1 485 0
 1723 0018 0023     		movs	r3, #0
 1724 001a 87F89C30 		strb	r3, [r7, #156]
 486:modem.c       ****     s_report_freq[0] = '\0';
 1725              		.loc 1 486 0
 1726 001e 0023     		movs	r3, #0
 1727 0020 87F89030 		strb	r3, [r7, #144]
 487:modem.c       ****     s_debug_freq[0] = '\0';
 1728              		.loc 1 487 0
 1729 0024 0023     		movs	r3, #0
 1730 0026 87F88430 		strb	r3, [r7, #132]
 488:modem.c       ****     
 489:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 490:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1731              		.loc 1 490 0
 1732 002a 07F1B403 		add	r3, r7, #180
 1733 002e 6A4A     		ldr	r2, .L110
 1734 0030 6A49     		ldr	r1, .L110+4
 1735 0032 6B48     		ldr	r0, .L110+8
 1736 0034 FFF7FEFF 		bl	extract_string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 43


 491:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1737              		.loc 1 491 0
 1738 0038 07F1A803 		add	r3, r7, #168
 1739 003c 664A     		ldr	r2, .L110
 1740 003e 6949     		ldr	r1, .L110+12
 1741 0040 6748     		ldr	r0, .L110+8
 1742 0042 FFF7FEFF 		bl	extract_string
 492:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1743              		.loc 1 492 0
 1744 0046 07F19C03 		add	r3, r7, #156
 1745 004a 634A     		ldr	r2, .L110
 1746 004c 6649     		ldr	r1, .L110+16
 1747 004e 6448     		ldr	r0, .L110+8
 1748 0050 FFF7FEFF 		bl	extract_string
 493:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1749              		.loc 1 493 0
 1750 0054 07F19003 		add	r3, r7, #144
 1751 0058 5F4A     		ldr	r2, .L110
 1752 005a 6449     		ldr	r1, .L110+20
 1753 005c 6048     		ldr	r0, .L110+8
 1754 005e FFF7FEFF 		bl	extract_string
 494:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1755              		.loc 1 494 0
 1756 0062 07F18403 		add	r3, r7, #132
 1757 0066 5C4A     		ldr	r2, .L110
 1758 0068 6149     		ldr	r1, .L110+24
 1759 006a 5D48     		ldr	r0, .L110+8
 1760 006c FFF7FEFF 		bl	extract_string
 495:modem.c       ****     
 496:modem.c       ****     //app features
 497:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1761              		.loc 1 497 0
 1762 0070 07F12003 		add	r3, r7, #32
 1763 0074 584A     		ldr	r2, .L110
 1764 0076 5F49     		ldr	r1, .L110+28
 1765 0078 5948     		ldr	r0, .L110+8
 1766 007a FFF7FEFF 		bl	extract_string
 498:modem.c       ****     App_LED_Update(s_app_led);
 1767              		.loc 1 498 0
 1768 007e 07F12003 		add	r3, r7, #32
 1769 0082 1846     		mov	r0, r3
 1770 0084 FFF7FEFF 		bl	App_LED_Update
 499:modem.c       ****     
 500:modem.c       ****     // Create variables for what is sent back from the server
 501:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq;
 502:modem.c       ****     
 503:modem.c       ****     // Scan character arrays and save values 
 504:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1771              		.loc 1 504 0
 1772 0088 07F11C02 		add	r2, r7, #28
 1773 008c 07F1B403 		add	r3, r7, #180
 1774 0090 5949     		ldr	r1, .L110+32
 1775 0092 1846     		mov	r0, r3
 1776 0094 FFF7FEFF 		bl	sscanf
 1777 0098 0346     		mov	r3, r0
 1778 009a 012B     		cmp	r3, #1
 1779 009c 0AD1     		bne	.L99
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 44


 505:modem.c       ****         updatable_parameters.node_type = node_type;
 1780              		.loc 1 505 0
 1781 009e FB69     		ldr	r3, [r7, #28]
 1782 00a0 DAB2     		uxtb	r2, r3
 1783 00a2 564B     		ldr	r3, .L110+36
 1784 00a4 1A70     		strb	r2, [r3]
 506:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1785              		.loc 1 506 0
 1786 00a6 FB69     		ldr	r3, [r7, #28]
 1787 00a8 1A46     		mov	r2, r3
 1788 00aa 5549     		ldr	r1, .L110+40
 1789 00ac 0020     		movs	r0, #0
 1790 00ae FFF7FEFF 		bl	printNotif
 1791 00b2 03E0     		b	.L100
 1792              	.L99:
 507:modem.c       ****     }else{
 508:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1793              		.loc 1 508 0
 1794 00b4 5349     		ldr	r1, .L110+44
 1795 00b6 0220     		movs	r0, #2
 1796 00b8 FFF7FEFF 		bl	printNotif
 1797              	.L100:
 509:modem.c       ****     }
 510:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1798              		.loc 1 510 0
 1799 00bc 07F11802 		add	r2, r7, #24
 1800 00c0 07F1A803 		add	r3, r7, #168
 1801 00c4 4C49     		ldr	r1, .L110+32
 1802 00c6 1846     		mov	r0, r3
 1803 00c8 FFF7FEFF 		bl	sscanf
 1804 00cc 0346     		mov	r3, r0
 1805 00ce 012B     		cmp	r3, #1
 1806 00d0 0ED1     		bne	.L101
 511:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1807              		.loc 1 511 0
 1808 00d2 BB69     		ldr	r3, [r7, #24]
 1809 00d4 002B     		cmp	r3, #0
 1810 00d6 14BF     		ite	ne
 1811 00d8 0123     		movne	r3, #1
 1812 00da 0023     		moveq	r3, #0
 1813 00dc DAB2     		uxtb	r2, r3
 1814 00de 474B     		ldr	r3, .L110+36
 1815 00e0 5A70     		strb	r2, [r3, #1]
 512:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1816              		.loc 1 512 0
 1817 00e2 BB69     		ldr	r3, [r7, #24]
 1818 00e4 1A46     		mov	r2, r3
 1819 00e6 4849     		ldr	r1, .L110+48
 1820 00e8 0020     		movs	r0, #0
 1821 00ea FFF7FEFF 		bl	printNotif
 1822 00ee 03E0     		b	.L102
 1823              	.L101:
 513:modem.c       ****     }else{
 514:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1824              		.loc 1 514 0
 1825 00f0 4649     		ldr	r1, .L110+52
 1826 00f2 0220     		movs	r0, #2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 45


 1827 00f4 FFF7FEFF 		bl	printNotif
 1828              	.L102:
 515:modem.c       ****     }
 516:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1829              		.loc 1 516 0
 1830 00f8 07F11402 		add	r2, r7, #20
 1831 00fc 07F19C03 		add	r3, r7, #156
 1832 0100 3D49     		ldr	r1, .L110+32
 1833 0102 1846     		mov	r0, r3
 1834 0104 FFF7FEFF 		bl	sscanf
 1835 0108 0346     		mov	r3, r0
 1836 010a 012B     		cmp	r3, #1
 1837 010c 19D1     		bne	.L103
 517:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1838              		.loc 1 517 0
 1839 010e 7B69     		ldr	r3, [r7, #20]
 1840 0110 DAB2     		uxtb	r2, r3
 1841 0112 3A4B     		ldr	r3, .L110+36
 1842 0114 9A70     		strb	r2, [r3, #2]
 518:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 519:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1843              		.loc 1 519 0
 1844 0116 394B     		ldr	r3, .L110+36
 1845 0118 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1846 011a 99B2     		uxth	r1, r3
 1847 011c 3C4C     		ldr	r4, .L110+56
 1848 011e 3846     		mov	r0, r7
 1849 0120 0723     		movs	r3, #7
 1850 0122 0122     		movs	r2, #1
 1851 0124 FFF7FEFF 		bl	CreateAlarm
 1852 0128 2246     		mov	r2, r4
 1853 012a 3B46     		mov	r3, r7
 1854 012c 1968     		ldr	r1, [r3]	@ unaligned
 1855 012e 1160     		str	r1, [r2]	@ unaligned
 1856 0130 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1857 0132 9380     		strh	r3, [r2, #4]	@ unaligned
 520:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1858              		.loc 1 520 0
 1859 0134 7B69     		ldr	r3, [r7, #20]
 1860 0136 1A46     		mov	r2, r3
 1861 0138 3649     		ldr	r1, .L110+60
 1862 013a 0020     		movs	r0, #0
 1863 013c FFF7FEFF 		bl	printNotif
 1864 0140 03E0     		b	.L104
 1865              	.L103:
 521:modem.c       ****     }else{
 522:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1866              		.loc 1 522 0
 1867 0142 3549     		ldr	r1, .L110+64
 1868 0144 0220     		movs	r0, #2
 1869 0146 FFF7FEFF 		bl	printNotif
 1870              	.L104:
 523:modem.c       ****     }
 524:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1871              		.loc 1 524 0
 1872 014a 07F11002 		add	r2, r7, #16
 1873 014e 07F19003 		add	r3, r7, #144
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 46


 1874 0152 2949     		ldr	r1, .L110+32
 1875 0154 1846     		mov	r0, r3
 1876 0156 FFF7FEFF 		bl	sscanf
 1877 015a 0346     		mov	r3, r0
 1878 015c 012B     		cmp	r3, #1
 1879 015e 19D1     		bne	.L105
 525:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1880              		.loc 1 525 0
 1881 0160 3B69     		ldr	r3, [r7, #16]
 1882 0162 DAB2     		uxtb	r2, r3
 1883 0164 254B     		ldr	r3, .L110+36
 1884 0166 DA70     		strb	r2, [r3, #3]
 526:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 527:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1885              		.loc 1 527 0
 1886 0168 244B     		ldr	r3, .L110+36
 1887 016a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1888 016c 99B2     		uxth	r1, r3
 1889 016e 2B4C     		ldr	r4, .L110+68
 1890 0170 3846     		mov	r0, r7
 1891 0172 0723     		movs	r3, #7
 1892 0174 0122     		movs	r2, #1
 1893 0176 FFF7FEFF 		bl	CreateAlarm
 1894 017a 2246     		mov	r2, r4
 1895 017c 3B46     		mov	r3, r7
 1896 017e 1968     		ldr	r1, [r3]	@ unaligned
 1897 0180 1160     		str	r1, [r2]	@ unaligned
 1898 0182 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1899 0184 9380     		strh	r3, [r2, #4]	@ unaligned
 528:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1900              		.loc 1 528 0
 1901 0186 3B69     		ldr	r3, [r7, #16]
 1902 0188 1A46     		mov	r2, r3
 1903 018a 2549     		ldr	r1, .L110+72
 1904 018c 0020     		movs	r0, #0
 1905 018e FFF7FEFF 		bl	printNotif
 1906 0192 03E0     		b	.L106
 1907              	.L105:
 529:modem.c       ****         }else{
 530:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1908              		.loc 1 530 0
 1909 0194 2349     		ldr	r1, .L110+76
 1910 0196 0220     		movs	r0, #2
 1911 0198 FFF7FEFF 		bl	printNotif
 1912              	.L106:
 531:modem.c       ****     }
 532:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1913              		.loc 1 532 0
 1914 019c 07F10C02 		add	r2, r7, #12
 1915 01a0 07F18403 		add	r3, r7, #132
 1916 01a4 1449     		ldr	r1, .L110+32
 1917 01a6 1846     		mov	r0, r3
 1918 01a8 FFF7FEFF 		bl	sscanf
 1919 01ac 0346     		mov	r3, r0
 1920 01ae 012B     		cmp	r3, #1
 1921 01b0 0AD1     		bne	.L107
 533:modem.c       ****         updatable_parameters.debug_level = debug_freq;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 47


 1922              		.loc 1 533 0
 1923 01b2 FB68     		ldr	r3, [r7, #12]
 1924 01b4 DAB2     		uxtb	r2, r3
 1925 01b6 114B     		ldr	r3, .L110+36
 1926 01b8 1A71     		strb	r2, [r3, #4]
 534:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1927              		.loc 1 534 0
 1928 01ba FB68     		ldr	r3, [r7, #12]
 1929 01bc 1A46     		mov	r2, r3
 1930 01be 1A49     		ldr	r1, .L110+80
 1931 01c0 0020     		movs	r0, #0
 1932 01c2 FFF7FEFF 		bl	printNotif
 535:modem.c       ****     }else{
 536:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 537:modem.c       ****     }
 538:modem.c       **** }
 1933              		.loc 1 538 0
 1934 01c6 03E0     		b	.L109
 1935              	.L107:
 536:modem.c       ****     }
 1936              		.loc 1 536 0
 1937 01c8 1849     		ldr	r1, .L110+84
 1938 01ca 0220     		movs	r0, #2
 1939 01cc FFF7FEFF 		bl	printNotif
 1940              	.L109:
 1941              		.loc 1 538 0
 1942 01d0 00BF     		nop
 1943 01d2 C437     		adds	r7, r7, #196
 1944              		.cfi_def_cfa_offset 12
 1945 01d4 BD46     		mov	sp, r7
 1946              		.cfi_def_cfa_register 13
 1947              		@ sp needed
 1948 01d6 90BD     		pop	{r4, r7, pc}
 1949              	.L111:
 1950              		.align	2
 1951              	.L110:
 1952 01d8 88020000 		.word	.LC21
 1953 01dc 24030000 		.word	.LC32
 1954 01e0 00000000 		.word	uart_received_string
 1955 01e4 30030000 		.word	.LC33
 1956 01e8 3C030000 		.word	.LC34
 1957 01ec 4C030000 		.word	.LC35
 1958 01f0 5C030000 		.word	.LC36
 1959 01f4 6C030000 		.word	.LC37
 1960 01f8 78030000 		.word	.LC38
 1961 01fc 00000000 		.word	updatable_parameters
 1962 0200 7C030000 		.word	.LC39
 1963 0204 98030000 		.word	.LC40
 1964 0208 B4030000 		.word	.LC41
 1965 020c D0030000 		.word	.LC42
 1966 0210 00000000 		.word	alarmMeasure
 1967 0214 EC030000 		.word	.LC43
 1968 0218 10040000 		.word	.LC44
 1969 021c 00000000 		.word	alarmSync
 1970 0220 40040000 		.word	.LC45
 1971 0224 68040000 		.word	.LC46
 1972 0228 98040000 		.word	.LC47
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 48


 1973 022c C4040000 		.word	.LC48
 1974              		.cfi_endproc
 1975              	.LFE81:
 1976              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 1977              		.section	.rodata
 1978 04f3 00       		.align	2
 1979              	.LC49:
 1980 04f4 41542343 		.ascii	"AT#CGMM\015\000"
 1980      474D4D0D 
 1980      00
 1981 04fd 000000   		.align	2
 1982              	.LC50:
 1983 0500 4D6F6465 		.ascii	"Modem Model: %s\000"
 1983      6D204D6F 
 1983      64656C3A 
 1983      20257300 
 1984              		.align	2
 1985              	.LC51:
 1986 0510 41542343 		.ascii	"AT#CCID\015\000"
 1986      4349440D 
 1986      00
 1987 0519 000000   		.align	2
 1988              	.LC52:
 1989 051c 53494D20 		.ascii	"SIM ID: %s\000"
 1989      49443A20 
 1989      257300
 1990 0527 00       		.align	2
 1991              	.LC53:
 1992 0528 41542B43 		.ascii	"AT+CGSN\015\000"
 1992      47534E0D 
 1992      00
 1993 0531 000000   		.align	2
 1994              	.LC54:
 1995 0534 494D4549 		.ascii	"IMEI: %s\000"
 1995      3A202573 
 1995      00
 1996 053d 000000   		.align	2
 1997              	.LC55:
 1998 0540 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 1998      4744434F 
 1998      4E543D31 
 1998      2C224950 
 1998      222C2277 
 1999 0569 00       		.ascii	"\000"
 2000 056a 0000     		.align	2
 2001              	.LC56:
 2002 056c 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2002      4744434F 
 2002      4E543D31 
 2002      2C224950 
 2002      222C2273 
 2003              		.align	2
 2004              	.LC57:
 2005 0588 41542B43 		.ascii	"AT+CFUN?\015\000"
 2005      46554E3F 
 2005      0D00
 2006 0592 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 49


 2007              	.LC58:
 2008 0594 4346554E 		.ascii	"CFUN: %s\000"
 2008      3A202573 
 2008      00
 2009 059d 000000   		.align	2
 2010              	.LC59:
 2011 05a0 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2011      46554E3D 
 2011      310D00
 2012              		.section	.text.modem_configure_settings,"ax",%progbits
 2013              		.align	2
 2014              		.global	modem_configure_settings
 2015              		.thumb
 2016              		.thumb_func
 2017              		.type	modem_configure_settings, %function
 2018              	modem_configure_settings:
 2019              	.LFB82:
 539:modem.c       ****     
 540:modem.c       **** // Configure the modem settings
 541:modem.c       **** void modem_configure_settings(){
 2020              		.loc 1 541 0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 16
 2023              		@ frame_needed = 1, uses_anonymous_args = 0
 2024 0000 80B5     		push	{r7, lr}
 2025              		.cfi_def_cfa_offset 8
 2026              		.cfi_offset 7, -8
 2027              		.cfi_offset 14, -4
 2028 0002 84B0     		sub	sp, sp, #16
 2029              		.cfi_def_cfa_offset 24
 2030 0004 00AF     		add	r7, sp, #0
 2031              		.cfi_def_cfa_register 7
 542:modem.c       ****     
 543:modem.c       ****     // Save/print modem model ID number
 544:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2032              		.loc 1 544 0
 2033 0006 454B     		ldr	r3, .L121
 2034 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2035 000a 002B     		cmp	r3, #0
 2036 000c 13D1     		bne	.L113
 545:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 546:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2037              		.loc 1 546 0
 2038 000e 4FF4FA62 		mov	r2, #2000
 2039 0012 4349     		ldr	r1, .L121+4
 2040 0014 4348     		ldr	r0, .L121+8
 2041 0016 FFF7FEFF 		bl	at_write_command
 2042 001a 0346     		mov	r3, r0
 2043 001c 002B     		cmp	r3, #0
 2044 001e 0AD0     		beq	.L113
 547:modem.c       ****             // Extract modem model ID number string from the UART
 548:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2045              		.loc 1 548 0
 2046 0020 414B     		ldr	r3, .L121+12
 2047 0022 424A     		ldr	r2, .L121+16
 2048 0024 4249     		ldr	r1, .L121+20
 2049 0026 4348     		ldr	r0, .L121+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 50


 2050 0028 FFF7FEFF 		bl	extract_string
 549:modem.c       ****             // Print modem model ID number
 550:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2051              		.loc 1 550 0
 2052 002c 3E4A     		ldr	r2, .L121+12
 2053 002e 4249     		ldr	r1, .L121+28
 2054 0030 0020     		movs	r0, #0
 2055 0032 FFF7FEFF 		bl	printNotif
 2056              	.L113:
 551:modem.c       ****         }
 552:modem.c       ****     }
 553:modem.c       ****     
 554:modem.c       ****    // Save/print SIM-card ID
 555:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2057              		.loc 1 555 0
 2058 0036 394B     		ldr	r3, .L121
 2059 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2060 003a 002B     		cmp	r3, #0
 2061 003c 13D1     		bne	.L114
 556:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 557:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2062              		.loc 1 557 0
 2063 003e 4FF4FA62 		mov	r2, #2000
 2064 0042 3749     		ldr	r1, .L121+4
 2065 0044 3D48     		ldr	r0, .L121+32
 2066 0046 FFF7FEFF 		bl	at_write_command
 2067 004a 0346     		mov	r3, r0
 2068 004c 002B     		cmp	r3, #0
 2069 004e 0AD0     		beq	.L114
 558:modem.c       ****             // Extract SIM-card ID string from the UART
 559:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2070              		.loc 1 559 0
 2071 0050 324B     		ldr	r3, .L121
 2072 0052 364A     		ldr	r2, .L121+16
 2073 0054 3649     		ldr	r1, .L121+20
 2074 0056 3748     		ldr	r0, .L121+24
 2075 0058 FFF7FEFF 		bl	extract_string
 560:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2076              		.loc 1 560 0
 2077 005c 2F4A     		ldr	r2, .L121
 2078 005e 3849     		ldr	r1, .L121+36
 2079 0060 0020     		movs	r0, #0
 2080 0062 FFF7FEFF 		bl	printNotif
 2081              	.L114:
 561:modem.c       ****         }
 562:modem.c       ****    }
 563:modem.c       **** 
 564:modem.c       ****     // Save/print modem IMEI
 565:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2082              		.loc 1 565 0
 2083 0066 2D4B     		ldr	r3, .L121
 2084 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2085 006c 002B     		cmp	r3, #0
 2086 006e 13D1     		bne	.L115
 566:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 567:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2087              		.loc 1 567 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 51


 2088 0070 4FF4FA62 		mov	r2, #2000
 2089 0074 2A49     		ldr	r1, .L121+4
 2090 0076 3348     		ldr	r0, .L121+40
 2091 0078 FFF7FEFF 		bl	at_write_command
 2092 007c 0346     		mov	r3, r0
 2093 007e 002B     		cmp	r3, #0
 2094 0080 0AD0     		beq	.L115
 568:modem.c       ****             // Extract modem IMEI number string from the UART
 569:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2095              		.loc 1 569 0
 2096 0082 314B     		ldr	r3, .L121+44
 2097 0084 294A     		ldr	r2, .L121+16
 2098 0086 2A49     		ldr	r1, .L121+20
 2099 0088 2A48     		ldr	r0, .L121+24
 2100 008a FFF7FEFF 		bl	extract_string
 570:modem.c       ****             // Print modem IMEI number
 571:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2101              		.loc 1 571 0
 2102 008e 2E4A     		ldr	r2, .L121+44
 2103 0090 2E49     		ldr	r1, .L121+48
 2104 0092 0020     		movs	r0, #0
 2105 0094 FFF7FEFF 		bl	printNotif
 2106              	.L115:
 572:modem.c       ****         } 
 573:modem.c       ****     }
 574:modem.c       ****     
 575:modem.c       ****     // Configure protocol and cellular end point
 576:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 577:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2107              		.loc 1 577 0
 2108 0098 2D4B     		ldr	r3, .L121+52
 2109 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2110 009c 83F00103 		eor	r3, r3, #1
 2111 00a0 DBB2     		uxtb	r3, r3
 2112 00a2 002B     		cmp	r3, #0
 2113 00a4 06D0     		beq	.L116
 578:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2114              		.loc 1 578 0
 2115 00a6 4FF4FA62 		mov	r2, #2000
 2116 00aa 1D49     		ldr	r1, .L121+4
 2117 00ac 2948     		ldr	r0, .L121+56
 2118 00ae FFF7FEFF 		bl	at_write_command
 2119 00b2 09E0     		b	.L117
 2120              	.L116:
 579:modem.c       ****     
 580:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2121              		.loc 1 580 0
 2122 00b4 264B     		ldr	r3, .L121+52
 2123 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2124 00b8 002B     		cmp	r3, #0
 2125 00ba 05D0     		beq	.L117
 581:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2126              		.loc 1 581 0
 2127 00bc 4FF4FA62 		mov	r2, #2000
 2128 00c0 1749     		ldr	r1, .L121+4
 2129 00c2 2548     		ldr	r0, .L121+60
 2130 00c4 FFF7FEFF 		bl	at_write_command
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 52


 2131              	.L117:
 582:modem.c       ****     }
 583:modem.c       ****     
 584:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 585:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 586:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2132              		.loc 1 586 0
 2133 00c8 4FF4FA62 		mov	r2, #2000
 2134 00cc 1449     		ldr	r1, .L121+4
 2135 00ce 2348     		ldr	r0, .L121+64
 2136 00d0 FFF7FEFF 		bl	at_write_command
 2137 00d4 0346     		mov	r3, r0
 2138 00d6 002B     		cmp	r3, #0
 2139 00d8 1BD0     		beq	.L120
 2140              	.LBB9:
 587:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 588:modem.c       ****         CFUN[0] = '\0';
 2141              		.loc 1 588 0
 2142 00da 0023     		movs	r3, #0
 2143 00dc 3B71     		strb	r3, [r7, #4]
 589:modem.c       ****         // Extract UART string recieved from the modem
 590:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2144              		.loc 1 590 0
 2145 00de 3B1D     		adds	r3, r7, #4
 2146 00e0 124A     		ldr	r2, .L121+16
 2147 00e2 1349     		ldr	r1, .L121+20
 2148 00e4 1348     		ldr	r0, .L121+24
 2149 00e6 FFF7FEFF 		bl	extract_string
 591:modem.c       ****         // Print UART string recieved from the modem
 592:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2150              		.loc 1 592 0
 2151 00ea 3B1D     		adds	r3, r7, #4
 2152 00ec 1A46     		mov	r2, r3
 2153 00ee 1C49     		ldr	r1, .L121+68
 2154 00f0 0020     		movs	r0, #0
 2155 00f2 FFF7FEFF 		bl	printNotif
 593:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 594:modem.c       ****         // If it returns NULL, then write another command to the modem
 595:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2156              		.loc 1 595 0
 2157 00f6 3B1D     		adds	r3, r7, #4
 2158 00f8 3121     		movs	r1, #49
 2159 00fa 1846     		mov	r0, r3
 2160 00fc FFF7FEFF 		bl	strchr
 2161 0100 0346     		mov	r3, r0
 2162 0102 002B     		cmp	r3, #0
 2163 0104 05D1     		bne	.L120
 596:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 597:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 598:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2164              		.loc 1 598 0
 2165 0106 4FF4FA62 		mov	r2, #2000
 2166 010a 0549     		ldr	r1, .L121+4
 2167 010c 1548     		ldr	r0, .L121+72
 2168 010e FFF7FEFF 		bl	at_write_command
 2169              	.L120:
 2170              	.LBE9:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 53


 599:modem.c       ****         }
 600:modem.c       ****     }
 601:modem.c       **** 
 602:modem.c       ****     
 603:modem.c       **** }
 2171              		.loc 1 603 0
 2172 0112 00BF     		nop
 2173 0114 1037     		adds	r7, r7, #16
 2174              		.cfi_def_cfa_offset 8
 2175 0116 BD46     		mov	sp, r7
 2176              		.cfi_def_cfa_register 13
 2177              		@ sp needed
 2178 0118 80BD     		pop	{r7, pc}
 2179              	.L122:
 2180 011a 00BF     		.align	2
 2181              	.L121:
 2182 011c 00000000 		.word	modem_info
 2183 0120 00000000 		.word	.LC0
 2184 0124 F4040000 		.word	.LC49
 2185 0128 14000000 		.word	modem_info+20
 2186 012c 88020000 		.word	.LC21
 2187 0130 8C020000 		.word	.LC22
 2188 0134 00000000 		.word	uart_received_string
 2189 0138 00050000 		.word	.LC50
 2190 013c 10050000 		.word	.LC51
 2191 0140 1C050000 		.word	.LC52
 2192 0144 28050000 		.word	.LC53
 2193 0148 28000000 		.word	modem_info+40
 2194 014c 34050000 		.word	.LC54
 2195 0150 00000000 		.word	updatable_parameters
 2196 0154 40050000 		.word	.LC55
 2197 0158 6C050000 		.word	.LC56
 2198 015c 88050000 		.word	.LC57
 2199 0160 94050000 		.word	.LC58
 2200 0164 A0050000 		.word	.LC59
 2201              		.cfi_endproc
 2202              	.LFE82:
 2203              		.size	modem_configure_settings, .-modem_configure_settings
 2204              		.section	.rodata
 2205 05ab 00       		.align	2
 2206              	.LC60:
 2207 05ac 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2207      6D206E6F 
 2207      74207265 
 2207      61647920 
 2207      746F2067 
 2208 05df 6B2E00   		.ascii	"k.\000"
 2209 05e2 0000     		.align	2
 2210              	.LC61:
 2211 05e4 41542B43 		.ascii	"AT+CCLK?\015\000"
 2211      434C4B3F 
 2211      0D00
 2212 05ee 0000     		.align	2
 2213              	.LC62:
 2214 05f0 220D00   		.ascii	"\"\015\000"
 2215 05f3 00       		.align	2
 2216              	.LC63:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 54


 2217 05f4 3A202200 		.ascii	": \"\000"
 2218              		.align	2
 2219              	.LC64:
 2220 05f8 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2220      642F2564 
 2220      2C25643A 
 2220      25643A25 
 2220      642D2564 
 2221 060d 000000   		.align	2
 2222              	.LC65:
 2223 0610 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2223      642F2564 
 2223      2C25643A 
 2223      25643A25 
 2223      642B2564 
 2224 0625 000000   		.align	2
 2225              	.LC66:
 2226 0628 436F756C 		.ascii	"Could not parse modem time.\000"
 2226      64206E6F 
 2226      74207061 
 2226      72736520 
 2226      6D6F6465 
 2227              		.section	.text.modem_get_network_time,"ax",%progbits
 2228              		.align	2
 2229              		.global	modem_get_network_time
 2230              		.thumb
 2231              		.thumb_func
 2232              		.type	modem_get_network_time, %function
 2233              	modem_get_network_time:
 2234              	.LFB83:
 604:modem.c       **** 
 605:modem.c       **** //returns 0 if modem can't get time
 606:modem.c       **** long modem_get_network_time(){
 2235              		.loc 1 606 0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 104
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239 0000 80B5     		push	{r7, lr}
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0002 A0B0     		sub	sp, sp, #128
 2244              		.cfi_def_cfa_offset 136
 2245 0004 06AF     		add	r7, sp, #24
 2246              		.cfi_def_cfa 7, 112
 607:modem.c       ****     
 608:modem.c       ****     //modem reposen format (careful to include the quotes "")
 609:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 610:modem.c       ****     //ex: 14:48 GMT
 611:modem.c       **** 
 612:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 613:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2247              		.loc 1 613 0
 2248 0006 444B     		ldr	r3, .L130
 2249 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2250 000a 042B     		cmp	r3, #4
 2251 000c 05D0     		beq	.L124
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 55


 614:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2252              		.loc 1 614 0
 2253 000e 4349     		ldr	r1, .L130+4
 2254 0010 0220     		movs	r0, #2
 2255 0012 FFF7FEFF 		bl	printNotif
 615:modem.c       ****         return 0;   
 2256              		.loc 1 615 0
 2257 0016 0023     		movs	r3, #0
 2258 0018 7AE0     		b	.L125
 2259              	.L124:
 616:modem.c       ****     }
 617:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2260              		.loc 1 617 0
 2261 001a 0023     		movs	r3, #0
 2262 001c 7B66     		str	r3, [r7, #100]
 618:modem.c       ****     
 619:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 620:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2263              		.loc 1 620 0
 2264 001e 4FF4FA62 		mov	r2, #2000
 2265 0022 3F49     		ldr	r1, .L130+8
 2266 0024 3F48     		ldr	r0, .L130+12
 2267 0026 FFF7FEFF 		bl	at_write_command
 2268 002a 0346     		mov	r3, r0
 2269 002c 002B     		cmp	r3, #0
 2270 002e 6ED0     		beq	.L126
 2271              	.LBB10:
 621:modem.c       ****         // need to set this to /0
 622:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 623:modem.c       ****         network_time[0] = '\0';
 2272              		.loc 1 623 0
 2273 0030 0023     		movs	r3, #0
 2274 0032 87F84430 		strb	r3, [r7, #68]
 624:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 625:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2275              		.loc 1 625 0
 2276 0036 07F14403 		add	r3, r7, #68
 2277 003a 3B4A     		ldr	r2, .L130+16
 2278 003c 3B49     		ldr	r1, .L130+20
 2279 003e 3C48     		ldr	r0, .L130+24
 2280 0040 FFF7FEFF 		bl	extract_string
 626:modem.c       ****         
 627:modem.c       ****         ///////////////////  
 628:modem.c       ****         struct tm t; // Creates variable t of struct tm
 629:modem.c       ****         
 630:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 631:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2281              		.loc 1 631 0
 2282 0044 0023     		movs	r3, #0
 2283 0046 BB62     		str	r3, [r7, #40]
 632:modem.c       ****       
 633:modem.c       ****         // Determines the GMT offset 
 634:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 635:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 636:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2284              		.loc 1 636 0
 2285 0048 07F13C01 		add	r1, r7, #60
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 56


 2286 004c 07F14002 		add	r2, r7, #64
 2287 0050 07F14400 		add	r0, r7, #68
 2288 0054 07F12803 		add	r3, r7, #40
 2289 0058 0493     		str	r3, [sp, #16]
 2290 005a 07F12C03 		add	r3, r7, #44
 2291 005e 0393     		str	r3, [sp, #12]
 2292 0060 07F13003 		add	r3, r7, #48
 2293 0064 0293     		str	r3, [sp, #8]
 2294 0066 07F13403 		add	r3, r7, #52
 2295 006a 0193     		str	r3, [sp, #4]
 2296 006c 07F13803 		add	r3, r7, #56
 2297 0070 0093     		str	r3, [sp]
 2298 0072 0B46     		mov	r3, r1
 2299 0074 2F49     		ldr	r1, .L130+28
 2300 0076 FFF7FEFF 		bl	sscanf
 2301 007a 0346     		mov	r3, r0
 2302 007c 072B     		cmp	r3, #7
 2303 007e 06D1     		bne	.L127
 637:modem.c       ****             gmt_offset = gmt_offset*(900);
 2304              		.loc 1 637 0
 2305 0080 BB6A     		ldr	r3, [r7, #40]
 2306 0082 4FF46172 		mov	r2, #900
 2307 0086 02FB03F3 		mul	r3, r2, r3
 2308 008a BB62     		str	r3, [r7, #40]
 2309 008c 27E0     		b	.L128
 2310              	.L127:
 638:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2311              		.loc 1 638 0
 2312 008e 07F13C01 		add	r1, r7, #60
 2313 0092 07F14002 		add	r2, r7, #64
 2314 0096 07F14400 		add	r0, r7, #68
 2315 009a 07F12803 		add	r3, r7, #40
 2316 009e 0493     		str	r3, [sp, #16]
 2317 00a0 07F12C03 		add	r3, r7, #44
 2318 00a4 0393     		str	r3, [sp, #12]
 2319 00a6 07F13003 		add	r3, r7, #48
 2320 00aa 0293     		str	r3, [sp, #8]
 2321 00ac 07F13403 		add	r3, r7, #52
 2322 00b0 0193     		str	r3, [sp, #4]
 2323 00b2 07F13803 		add	r3, r7, #56
 2324 00b6 0093     		str	r3, [sp]
 2325 00b8 0B46     		mov	r3, r1
 2326 00ba 1F49     		ldr	r1, .L130+32
 2327 00bc FFF7FEFF 		bl	sscanf
 2328 00c0 0346     		mov	r3, r0
 2329 00c2 072B     		cmp	r3, #7
 2330 00c4 05D1     		bne	.L129
 639:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2331              		.loc 1 639 0
 2332 00c6 BB6A     		ldr	r3, [r7, #40]
 2333 00c8 1C4A     		ldr	r2, .L130+36
 2334 00ca 02FB03F3 		mul	r3, r2, r3
 2335 00ce BB62     		str	r3, [r7, #40]
 2336 00d0 05E0     		b	.L128
 2337              	.L129:
 640:modem.c       ****         }else{
 641:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 57


 2338              		.loc 1 641 0
 2339 00d2 1B49     		ldr	r1, .L130+40
 2340 00d4 0220     		movs	r0, #2
 2341 00d6 FFF7FEFF 		bl	printNotif
 642:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2342              		.loc 1 642 0
 2343 00da 0023     		movs	r3, #0
 2344 00dc 18E0     		b	.L125
 2345              	.L128:
 643:modem.c       ****         }
 644:modem.c       ****         
 645:modem.c       ****         // Sets each variable to the correct time 
 646:modem.c       ****         t.tm_sec = second;
 2346              		.loc 1 646 0
 2347 00de FB6A     		ldr	r3, [r7, #44]
 2348 00e0 7B60     		str	r3, [r7, #4]
 647:modem.c       ****         t.tm_min = minute;
 2349              		.loc 1 647 0
 2350 00e2 3B6B     		ldr	r3, [r7, #48]
 2351 00e4 BB60     		str	r3, [r7, #8]
 648:modem.c       ****         t.tm_hour = hour;
 2352              		.loc 1 648 0
 2353 00e6 7B6B     		ldr	r3, [r7, #52]
 2354 00e8 FB60     		str	r3, [r7, #12]
 649:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2355              		.loc 1 649 0
 2356 00ea 3B6C     		ldr	r3, [r7, #64]
 2357 00ec 6433     		adds	r3, r3, #100
 2358 00ee BB61     		str	r3, [r7, #24]
 650:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2359              		.loc 1 650 0
 2360 00f0 FB6B     		ldr	r3, [r7, #60]
 2361 00f2 013B     		subs	r3, r3, #1
 2362 00f4 7B61     		str	r3, [r7, #20]
 651:modem.c       ****         t.tm_mday = day;           // Day of the month
 2363              		.loc 1 651 0
 2364 00f6 BB6B     		ldr	r3, [r7, #56]
 2365 00f8 3B61     		str	r3, [r7, #16]
 652:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2366              		.loc 1 652 0
 2367 00fa 0023     		movs	r3, #0
 2368 00fc 7B62     		str	r3, [r7, #36]
 653:modem.c       ****     
 654:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 655:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 656:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2369              		.loc 1 656 0
 2370 00fe 3B1D     		adds	r3, r7, #4
 2371 0100 1846     		mov	r0, r3
 2372 0102 FFF7FEFF 		bl	mktime
 2373 0106 0246     		mov	r2, r0
 2374 0108 BB6A     		ldr	r3, [r7, #40]
 2375 010a 1344     		add	r3, r3, r2
 2376 010c 7B66     		str	r3, [r7, #100]
 2377              	.L126:
 2378              	.LBE10:
 657:modem.c       ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 58


 658:modem.c       ****     
 659:modem.c       ****     return epoch_time;
 2379              		.loc 1 659 0
 2380 010e 7B6E     		ldr	r3, [r7, #100]
 2381              	.L125:
 660:modem.c       **** }
 2382              		.loc 1 660 0
 2383 0110 1846     		mov	r0, r3
 2384 0112 6837     		adds	r7, r7, #104
 2385              		.cfi_def_cfa_offset 8
 2386 0114 BD46     		mov	sp, r7
 2387              		.cfi_def_cfa_register 13
 2388              		@ sp needed
 2389 0116 80BD     		pop	{r7, pc}
 2390              	.L131:
 2391              		.align	2
 2392              	.L130:
 2393 0118 00000000 		.word	modem_state
 2394 011c AC050000 		.word	.LC60
 2395 0120 00000000 		.word	.LC0
 2396 0124 E4050000 		.word	.LC61
 2397 0128 F0050000 		.word	.LC62
 2398 012c F4050000 		.word	.LC63
 2399 0130 00000000 		.word	uart_received_string
 2400 0134 F8050000 		.word	.LC64
 2401 0138 10060000 		.word	.LC65
 2402 013c 7CFCFFFF 		.word	-900
 2403 0140 28060000 		.word	.LC66
 2404              		.cfi_endproc
 2405              	.LFE83:
 2406              		.size	modem_get_network_time, .-modem_get_network_time
 2407              		.section	.text.modem_get_state,"ax",%progbits
 2408              		.align	2
 2409              		.global	modem_get_state
 2410              		.thumb
 2411              		.thumb_func
 2412              		.type	modem_get_state, %function
 2413              	modem_get_state:
 2414              	.LFB84:
 661:modem.c       **** 
 662:modem.c       **** // Get the modem state
 663:modem.c       **** uint8 modem_get_state(){
 2415              		.loc 1 663 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 1, uses_anonymous_args = 0
 2419              		@ link register save eliminated.
 2420 0000 80B4     		push	{r7}
 2421              		.cfi_def_cfa_offset 4
 2422              		.cfi_offset 7, -4
 2423 0002 00AF     		add	r7, sp, #0
 2424              		.cfi_def_cfa_register 7
 664:modem.c       ****     return modem_state;
 2425              		.loc 1 664 0
 2426 0004 024B     		ldr	r3, .L134
 2427 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 665:modem.c       **** }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 59


 2428              		.loc 1 665 0
 2429 0008 1846     		mov	r0, r3
 2430 000a BD46     		mov	sp, r7
 2431              		.cfi_def_cfa_register 13
 2432              		@ sp needed
 2433 000c 80BC     		pop	{r7}
 2434              		.cfi_restore 7
 2435              		.cfi_def_cfa_offset 0
 2436 000e 7047     		bx	lr
 2437              	.L135:
 2438              		.align	2
 2439              	.L134:
 2440 0010 00000000 		.word	modem_state
 2441              		.cfi_endproc
 2442              	.LFE84:
 2443              		.size	modem_get_state, .-modem_get_state
 2444              		.section	.text.modem_sleep,"ax",%progbits
 2445              		.align	2
 2446              		.global	modem_sleep
 2447              		.thumb
 2448              		.thumb_func
 2449              		.type	modem_sleep, %function
 2450              	modem_sleep:
 2451              	.LFB85:
 666:modem.c       **** 
 667:modem.c       **** // Set modem to sleep
 668:modem.c       **** void modem_sleep(){
 2452              		.loc 1 668 0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 1, uses_anonymous_args = 0
 2456 0000 80B5     		push	{r7, lr}
 2457              		.cfi_def_cfa_offset 8
 2458              		.cfi_offset 7, -8
 2459              		.cfi_offset 14, -4
 2460 0002 00AF     		add	r7, sp, #0
 2461              		.cfi_def_cfa_register 7
 669:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 670:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2462              		.loc 1 670 0
 2463 0004 FFF7FEFF 		bl	modem_get_state
 2464 0008 0346     		mov	r3, r0
 2465 000a 002B     		cmp	r3, #0
 2466 000c 03D0     		beq	.L138
 671:modem.c       **** 
 672:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2467              		.loc 1 672 0
 2468 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 673:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2469              		.loc 1 673 0
 2470 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2471              	.L138:
 674:modem.c       ****         
 675:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 676:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 677:modem.c       ****      }
 678:modem.c       **** }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 60


 2472              		.loc 1 678 0
 2473 0016 00BF     		nop
 2474 0018 80BD     		pop	{r7, pc}
 2475              		.cfi_endproc
 2476              	.LFE85:
 2477              		.size	modem_sleep, .-modem_sleep
 2478 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2479              		.align	2
 2480              		.global	modem_wakeup
 2481              		.thumb
 2482              		.thumb_func
 2483              		.type	modem_wakeup, %function
 2484              	modem_wakeup:
 2485              	.LFB86:
 679:modem.c       **** 
 680:modem.c       **** // Wakeup the modem
 681:modem.c       **** void modem_wakeup(){
 2486              		.loc 1 681 0
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 1, uses_anonymous_args = 0
 2490 0000 80B5     		push	{r7, lr}
 2491              		.cfi_def_cfa_offset 8
 2492              		.cfi_offset 7, -8
 2493              		.cfi_offset 14, -4
 2494 0002 00AF     		add	r7, sp, #0
 2495              		.cfi_def_cfa_register 7
 682:modem.c       ****     // If modem state is not off then wake it up
 683:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2496              		.loc 1 683 0
 2497 0004 FFF7FEFF 		bl	modem_get_state
 2498 0008 0346     		mov	r3, r0
 2499 000a 002B     		cmp	r3, #0
 2500 000c 0BD0     		beq	.L141
 684:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2501              		.loc 1 684 0
 2502 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 685:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 686:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 687:modem.c       ****         UART_Telit_Wakeup();
 2503              		.loc 1 687 0
 2504 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 688:modem.c       ****         // Remove the need for this pin itterupt
 689:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 690:modem.c       ****         
 691:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 692:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2505              		.loc 1 692 0
 2506 0016 FFF7FEFF 		bl	modem_get_state
 2507 001a 0346     		mov	r3, r0
 2508 001c 032B     		cmp	r3, #3
 2509 001e 02D1     		bne	.L141
 693:modem.c       ****             CyDelay(100u);
 2510              		.loc 1 693 0
 2511 0020 6420     		movs	r0, #100
 2512 0022 FFF7FEFF 		bl	CyDelay
 2513              	.L141:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 61


 694:modem.c       ****         }
 695:modem.c       ****      }
 696:modem.c       **** }
 2514              		.loc 1 696 0
 2515 0026 00BF     		nop
 2516 0028 80BD     		pop	{r7, pc}
 2517              		.cfi_endproc
 2518              	.LFE86:
 2519              		.size	modem_wakeup, .-modem_wakeup
 2520 002a 00BF     		.section	.rodata
 2521              		.align	2
 2522              	.LC67:
 2523 0644 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2523      50494F3D 
 2523      352C312C 
 2523      312C300D 
 2523      00
 2524 0655 000000   		.align	2
 2525              	.LC68:
 2526 0658 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2526      55504C53 
 2526      45433D31 
 2526      0D00
 2527 0666 0000     		.align	2
 2528              	.LC69:
 2529 0668 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2529      55504C56 
 2529      3D320D00 
 2530              		.align	2
 2531              	.LC70:
 2532 0674 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2532      47505345 
 2532      4E3D310D 
 2532      00
 2533 0681 000000   		.align	2
 2534              	.LC71:
 2535 0684 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2535      4C503D31 
 2535      2C227375 
 2535      706C2E67 
 2535      6F6F676C 
 2536 06a5 000000   		.align	2
 2537              	.LC72:
 2538 06a8 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2538      47414354 
 2538      3D312C30 
 2538      0D0A00
 2539 06b7 00       		.align	2
 2540              	.LC73:
 2541 06b8 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2541      43534C4B 
 2541      3D312C31 
 2541      0D00
 2542 06c6 0000     		.align	2
 2543              	.LC74:
 2544 06c8 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2544      5053534C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 62


 2544      53523D31 
 2544      2C312C2C 
 2544      2C2C2C32 
 2545 06de 0000     		.align	2
 2546              	.LC75:
 2547 06e0 4E00     		.ascii	"N\000"
 2548 06e2 0000     		.align	2
 2549              	.LC76:
 2550 06e4 41542447 		.ascii	"AT$GPSACP\015\000"
 2550      50534143 
 2550      500D00
 2551 06ef 00       		.align	2
 2552              	.LC77:
 2553 06f0 24475053 		.ascii	"$GPSACP: \000"
 2553      4143503A 
 2553      2000
 2554 06fa 0000     		.align	2
 2555              	.LC78:
 2556 06fc 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2556      4143503A 
 2556      20252A66 
 2556      2C25664E 
 2556      2C256657 
 2557              		.global	__aeabi_fdiv
 2558              		.global	__aeabi_f2d
 2559              		.global	__aeabi_ddiv
 2560              		.global	__aeabi_dadd
 2561              		.global	__aeabi_d2f
 2562              		.align	2
 2563              	.LC79:
 2564 071c 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2564      50494F3D 
 2564      352C302C 
 2564      312C300D 
 2564      00
 2565 072d 000000   		.align	2
 2566              	.LC80:
 2567 0730 41542447 		.ascii	"AT$GPSR=0\015\000"
 2567      5053523D 
 2567      300D00
 2568 073b 00       		.align	2
 2569              	.LC81:
 2570 073c 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2570      20746F20 
 2570      6C6F636B 
 2570      20475053 
 2570      3A202564 
 2571              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2572              		.align	2
 2573              		.global	modem_get_gps_coordinates
 2574              		.thumb
 2575              		.thumb_func
 2576              		.type	modem_get_gps_coordinates, %function
 2577              	modem_get_gps_coordinates:
 2578              	.LFB87:
 697:modem.c       **** 
 698:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 63


 699:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 700:modem.c       **** gps_t modem_get_gps_coordinates(){
 2579              		.loc 1 700 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 56
 2582              		@ frame_needed = 1, uses_anonymous_args = 0
 2583 0000 B0B5     		push	{r4, r5, r7, lr}
 2584              		.cfi_def_cfa_offset 16
 2585              		.cfi_offset 4, -16
 2586              		.cfi_offset 5, -12
 2587              		.cfi_offset 7, -8
 2588              		.cfi_offset 14, -4
 2589 0002 90B0     		sub	sp, sp, #64
 2590              		.cfi_def_cfa_offset 80
 2591 0004 02AF     		add	r7, sp, #8
 2592              		.cfi_def_cfa 7, 72
 2593 0006 7860     		str	r0, [r7, #4]
 701:modem.c       ****     gps_t gps;
 702:modem.c       ****     gps.altitude = 0;
 2594              		.loc 1 702 0
 2595 0008 4FF00003 		mov	r3, #0
 2596 000c FB61     		str	r3, [r7, #28]	@ float
 703:modem.c       ****     gps.longitude = 0;
 2597              		.loc 1 703 0
 2598 000e 4FF00003 		mov	r3, #0
 2599 0012 BB61     		str	r3, [r7, #24]	@ float
 704:modem.c       ****     gps.latitude = 0;
 2600              		.loc 1 704 0
 2601 0014 4FF00003 		mov	r3, #0
 2602 0018 7B61     		str	r3, [r7, #20]	@ float
 705:modem.c       ****     gps.time_to_lock =0;
 2603              		.loc 1 705 0
 2604 001a 0023     		movs	r3, #0
 2605 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 706:modem.c       ****     gps.valid = 0;
 2606              		.loc 1 706 0
 2607 001e 0023     		movs	r3, #0
 2608 0020 87F82230 		strb	r3, [r7, #34]
 707:modem.c       ****     
 708:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 709:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2609              		.loc 1 709 0
 2610 0024 7F4B     		ldr	r3, .L152
 2611 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2612 0028 042B     		cmp	r3, #4
 2613 002a 07D0     		beq	.L143
 710:modem.c       ****         return gps;//where valid = 0
 2614              		.loc 1 710 0
 2615 002c 7B68     		ldr	r3, [r7, #4]
 2616 002e 1C46     		mov	r4, r3
 2617 0030 07F11403 		add	r3, r7, #20
 2618 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2619 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2620 003a EFE0     		b	.L142
 2621              	.L143:
 711:modem.c       ****     }
 712:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 64


 713:modem.c       ****     long lock_time = getTimeStamp();
 2622              		.loc 1 713 0
 2623 003c FFF7FEFF 		bl	getTimeStamp
 2624 0040 3863     		str	r0, [r7, #48]
 714:modem.c       ****     
 715:modem.c       ****     // Enable this for the LTER module
 716:modem.c       ****     // Enable GPS Low-Dropout Regulator
 717:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2625              		.loc 1 717 0
 2626 0042 4FF4FA62 		mov	r2, #2000
 2627 0046 7849     		ldr	r1, .L152+4
 2628 0048 7848     		ldr	r0, .L152+8
 2629 004a FFF7FEFF 		bl	at_write_command
 718:modem.c       ****     
 719:modem.c       ****     // Configure SUPL connection params
 720:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2630              		.loc 1 720 0
 2631 004e 4FF4FA62 		mov	r2, #2000
 2632 0052 7549     		ldr	r1, .L152+4
 2633 0054 7648     		ldr	r0, .L152+12
 2634 0056 FFF7FEFF 		bl	at_write_command
 721:modem.c       ****     
 722:modem.c       ****     // Use SUPL2.0
 723:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2635              		.loc 1 723 0
 2636 005a 4FF4FA62 		mov	r2, #2000
 2637 005e 7249     		ldr	r1, .L152+4
 2638 0060 7448     		ldr	r0, .L152+16
 2639 0062 FFF7FEFF 		bl	at_write_command
 724:modem.c       ****     
 725:modem.c       ****     // Enable AGPS service
 726:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2640              		.loc 1 726 0
 2641 0066 4FF4FA62 		mov	r2, #2000
 2642 006a 6F49     		ldr	r1, .L152+4
 2643 006c 7248     		ldr	r0, .L152+20
 2644 006e FFF7FEFF 		bl	at_write_command
 727:modem.c       ****     
 728:modem.c       ****     // Chose SUPL server, use google public service
 729:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2645              		.loc 1 729 0
 2646 0072 4FF4FA62 		mov	r2, #2000
 2647 0076 6C49     		ldr	r1, .L152+4
 2648 0078 7048     		ldr	r0, .L152+24
 2649 007a FFF7FEFF 		bl	at_write_command
 730:modem.c       ****     
 731:modem.c       ****     //pdp context has to be locked to carrier for this to work
 732:modem.c       ****     
 733:modem.c       ****     // Unlock context since it needs to be used by modem
 734:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2650              		.loc 1 734 0
 2651 007e 4FF4FA62 		mov	r2, #2000
 2652 0082 6949     		ldr	r1, .L152+4
 2653 0084 6E48     		ldr	r0, .L152+28
 2654 0086 FFF7FEFF 		bl	at_write_command
 735:modem.c       ****     
 736:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 65


 2655              		.loc 1 736 0
 2656 008a 4FF4FA62 		mov	r2, #2000
 2657 008e 6649     		ldr	r1, .L152+4
 2658 0090 6C48     		ldr	r0, .L152+32
 2659 0092 FFF7FEFF 		bl	at_write_command
 737:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 738:modem.c       ****     
 739:modem.c       ****     // Relock the context
 740:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2660              		.loc 1 740 0
 2661 0096 42F21072 		movw	r2, #10000
 2662 009a 6349     		ldr	r1, .L152+4
 2663 009c 6A48     		ldr	r0, .L152+36
 2664 009e FFF7FEFF 		bl	at_write_command
 741:modem.c       ****     
 742:modem.c       ****     //start AGPS service
 743:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2665              		.loc 1 743 0
 2666 00a2 4FF4FA62 		mov	r2, #2000
 2667 00a6 6049     		ldr	r1, .L152+4
 2668 00a8 6848     		ldr	r0, .L152+40
 2669 00aa FFF7FEFF 		bl	at_write_command
 744:modem.c       ****     
 745:modem.c       ****     
 746:modem.c       ****     // Start the AGPS service
 747:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 748:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 749:modem.c       ****     
 750:modem.c       ****     
 751:modem.c       ****  
 752:modem.c       ****     uint8 gps_status = 0;
 2670              		.loc 1 752 0
 2671 00ae 0023     		movs	r3, #0
 2672 00b0 87F82F30 		strb	r3, [r7, #47]
 2673              	.LBB11:
 753:modem.c       ****     for(uint16 i=0;i<200;i++){
 2674              		.loc 1 753 0
 2675 00b4 0023     		movs	r3, #0
 2676 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2677 00b8 13E0     		b	.L145
 2678              	.L148:
 754:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2679              		.loc 1 754 0
 2680 00ba 4FF4FA62 		mov	r2, #2000
 2681 00be 6449     		ldr	r1, .L152+44
 2682 00c0 6448     		ldr	r0, .L152+48
 2683 00c2 FFF7FEFF 		bl	at_write_command
 2684 00c6 0346     		mov	r3, r0
 2685 00c8 87F82F30 		strb	r3, [r7, #47]
 755:modem.c       ****         if(gps_status){
 2686              		.loc 1 755 0
 2687 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2688 00d0 002B     		cmp	r3, #0
 2689 00d2 0AD1     		bne	.L151
 756:modem.c       ****             break;   
 757:modem.c       ****         }
 758:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 66


 2690              		.loc 1 758 0 discriminator 2
 2691 00d4 4FF47A70 		mov	r0, #1000
 2692 00d8 FFF7FEFF 		bl	CyDelay
 753:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2693              		.loc 1 753 0 discriminator 2
 2694 00dc FB8E     		ldrh	r3, [r7, #54]
 2695 00de 0133     		adds	r3, r3, #1
 2696 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2697              	.L145:
 753:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2698              		.loc 1 753 0 is_stmt 0 discriminator 1
 2699 00e2 FB8E     		ldrh	r3, [r7, #54]
 2700 00e4 C72B     		cmp	r3, #199
 2701 00e6 E8D9     		bls	.L148
 2702 00e8 00E0     		b	.L147
 2703              	.L151:
 756:modem.c       ****             break;   
 2704              		.loc 1 756 0 is_stmt 1
 2705 00ea 00BF     		nop
 2706              	.L147:
 2707              	.LBE11:
 759:modem.c       ****     }
 760:modem.c       ****     
 761:modem.c       ****     //parse data here
 762:modem.c       ****     
 763:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 764:modem.c       ****     float lat;
 765:modem.c       ****     float lon;
 766:modem.c       ****     float alt;
 767:modem.c       ****     
 768:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 769:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 770:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2708              		.loc 1 770 0
 2709 00ec 5A49     		ldr	r1, .L152+52
 2710 00ee 5B48     		ldr	r0, .L152+56
 2711 00f0 FFF7FEFF 		bl	strstr
 2712 00f4 B862     		str	r0, [r7, #40]
 771:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 772:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 773:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2713              		.loc 1 773 0
 2714 00f6 07F10C01 		add	r1, r7, #12
 2715 00fa 07F11002 		add	r2, r7, #16
 2716 00fe 07F10803 		add	r3, r7, #8
 2717 0102 0093     		str	r3, [sp]
 2718 0104 0B46     		mov	r3, r1
 2719 0106 5649     		ldr	r1, .L152+60
 2720 0108 B86A     		ldr	r0, [r7, #40]
 2721 010a FFF7FEFF 		bl	sscanf
 2722 010e 7862     		str	r0, [r7, #36]
 774:modem.c       ****     if(match >= 3){
 2723              		.loc 1 774 0
 2724 0110 7B6A     		ldr	r3, [r7, #36]
 2725 0112 022B     		cmp	r3, #2
 2726 0114 60DD     		ble	.L149
 775:modem.c       ****         // Calculate lat and lon
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 67


 776:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 777:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 778:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2727              		.loc 1 778 0
 2728 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2729 0118 5249     		ldr	r1, .L152+64
 2730 011a 1846     		mov	r0, r3
 2731 011c FFF7FEFF 		bl	__aeabi_fdiv
 2732 0120 0346     		mov	r3, r0
 2733 0122 1846     		mov	r0, r3
 2734 0124 FFF7FEFF 		bl	floorf
 2735 0128 0346     		mov	r3, r0
 2736 012a 1846     		mov	r0, r3
 2737 012c FFF7FEFF 		bl	__aeabi_f2d
 2738 0130 0446     		mov	r4, r0
 2739 0132 0D46     		mov	r5, r1
 2740 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2741 0136 1846     		mov	r0, r3
 2742 0138 FFF7FEFF 		bl	__aeabi_f2d
 2743 013c 4FF00002 		mov	r2, #0
 2744 0140 494B     		ldr	r3, .L152+68
 2745 0142 FFF7FEFF 		bl	fmod
 2746 0146 4FF00002 		mov	r2, #0
 2747 014a 484B     		ldr	r3, .L152+72
 2748 014c FFF7FEFF 		bl	__aeabi_ddiv
 2749 0150 0246     		mov	r2, r0
 2750 0152 0B46     		mov	r3, r1
 2751 0154 2046     		mov	r0, r4
 2752 0156 2946     		mov	r1, r5
 2753 0158 FFF7FEFF 		bl	__aeabi_dadd
 2754 015c 0346     		mov	r3, r0
 2755 015e 0C46     		mov	r4, r1
 2756 0160 1846     		mov	r0, r3
 2757 0162 2146     		mov	r1, r4
 2758 0164 FFF7FEFF 		bl	__aeabi_d2f
 2759 0168 0346     		mov	r3, r0
 2760 016a 3B61     		str	r3, [r7, #16]	@ float
 779:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2761              		.loc 1 779 0
 2762 016c FB68     		ldr	r3, [r7, #12]	@ float
 2763 016e 3D49     		ldr	r1, .L152+64
 2764 0170 1846     		mov	r0, r3
 2765 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2766 0176 0346     		mov	r3, r0
 2767 0178 1846     		mov	r0, r3
 2768 017a FFF7FEFF 		bl	floorf
 2769 017e 0346     		mov	r3, r0
 2770 0180 1846     		mov	r0, r3
 2771 0182 FFF7FEFF 		bl	__aeabi_f2d
 2772 0186 0446     		mov	r4, r0
 2773 0188 0D46     		mov	r5, r1
 2774 018a FB68     		ldr	r3, [r7, #12]	@ float
 2775 018c 1846     		mov	r0, r3
 2776 018e FFF7FEFF 		bl	__aeabi_f2d
 2777 0192 4FF00002 		mov	r2, #0
 2778 0196 344B     		ldr	r3, .L152+68
 2779 0198 FFF7FEFF 		bl	fmod
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 68


 2780 019c 4FF00002 		mov	r2, #0
 2781 01a0 324B     		ldr	r3, .L152+72
 2782 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2783 01a6 0246     		mov	r2, r0
 2784 01a8 0B46     		mov	r3, r1
 2785 01aa 2046     		mov	r0, r4
 2786 01ac 2946     		mov	r1, r5
 2787 01ae FFF7FEFF 		bl	__aeabi_dadd
 2788 01b2 0346     		mov	r3, r0
 2789 01b4 0C46     		mov	r4, r1
 2790 01b6 1846     		mov	r0, r3
 2791 01b8 2146     		mov	r1, r4
 2792 01ba FFF7FEFF 		bl	__aeabi_d2f
 2793 01be 0346     		mov	r3, r0
 2794 01c0 83F00043 		eor	r3, r3, #-2147483648
 2795 01c4 FB60     		str	r3, [r7, #12]	@ float
 780:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2796              		.loc 1 780 0
 2797 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2798 01c8 FB61     		str	r3, [r7, #28]	@ float
 781:modem.c       ****         gps.latitude = lat;
 2799              		.loc 1 781 0
 2800 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2801 01cc 7B61     		str	r3, [r7, #20]	@ float
 782:modem.c       ****         gps.longitude = lon;
 2802              		.loc 1 782 0
 2803 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2804 01d0 BB61     		str	r3, [r7, #24]	@ float
 783:modem.c       ****         gps.valid = 1;
 2805              		.loc 1 783 0
 2806 01d2 0123     		movs	r3, #1
 2807 01d4 87F82230 		strb	r3, [r7, #34]
 2808              	.L149:
 784:modem.c       ****     }
 785:modem.c       ****     
 786:modem.c       ****     // Disable LDO, just in case
 787:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2809              		.loc 1 787 0
 2810 01d8 4FF4FA62 		mov	r2, #2000
 2811 01dc 1249     		ldr	r1, .L152+4
 2812 01de 2448     		ldr	r0, .L152+76
 2813 01e0 FFF7FEFF 		bl	at_write_command
 788:modem.c       ****     
 789:modem.c       ****     // Flush modem's GPS data, just in case
 790:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2814              		.loc 1 790 0
 2815 01e4 4FF4FA62 		mov	r2, #2000
 2816 01e8 0F49     		ldr	r1, .L152+4
 2817 01ea 2248     		ldr	r0, .L152+80
 2818 01ec FFF7FEFF 		bl	at_write_command
 791:modem.c       ****     
 792:modem.c       ****     
 793:modem.c       ****     
 794:modem.c       ****     
 795:modem.c       ****     
 796:modem.c       ****     /* Relevant to 3g modem, can ignore
 797:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 69


 798:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 799:modem.c       ****     //AT$GPSQOS=50,50,100,0
 800:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 801:modem.c       ****     
 802:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 803:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 804:modem.c       ****     
 805:modem.c       ****     //unlock contedt, simnce its being used by modem
 806:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 807:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 808:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 809:modem.c       ****     
 810:modem.c       ****     //unlock contedt, simnce its being used by modem
 811:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 812:modem.c       ****     
 813:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 814:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 815:modem.c       ****     
 816:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 817:modem.c       ****    uint8 gps_status = 0;
 818:modem.c       ****     for(uint16 i=0;i<200;i++){
 819:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 820:modem.c       ****         if(gps_status){
 821:modem.c       ****             break;   
 822:modem.c       ****         }
 823:modem.c       ****   }
 824:modem.c       ****     
 825:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 826:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 827:modem.c       ****     if(gps_status){
 828:modem.c       ****         float lat,lon,alt = 0;
 829:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 830:modem.c       ****             gps.altitude = alt;
 831:modem.c       ****             gps.latitude = lat/60;
 832:modem.c       ****             gps.longitude = lon/60;
 833:modem.c       ****             gps.valid = 1;
 834:modem.c       ****         }
 835:modem.c       ****         
 836:modem.c       ****     }
 837:modem.c       ****     
 838:modem.c       ****     //turn off gps
 839:modem.c       ****     //AT$GPSP=0
 840:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 841:modem.c       ****     
 842:modem.c       ****     */
 843:modem.c       **** 
 844:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 845:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2819              		.loc 1 845 0
 2820 01f0 FFF7FEFF 		bl	getTimeStamp
 2821 01f4 0246     		mov	r2, r0
 2822 01f6 3B6B     		ldr	r3, [r7, #48]
 2823 01f8 D31A     		subs	r3, r2, r3
 2824 01fa 3B63     		str	r3, [r7, #48]
 846:modem.c       ****     gps.time_to_lock = lock_time;
 2825              		.loc 1 846 0
 2826 01fc 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 70


 2827 01fe 9BB2     		uxth	r3, r3
 2828 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 847:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2829              		.loc 1 847 0
 2830 0202 3B8C     		ldrh	r3, [r7, #32]
 2831 0204 1A46     		mov	r2, r3
 2832 0206 1C49     		ldr	r1, .L152+84
 2833 0208 0020     		movs	r0, #0
 2834 020a FFF7FEFF 		bl	printNotif
 848:modem.c       ****     
 849:modem.c       ****     return gps;
 2835              		.loc 1 849 0
 2836 020e 7B68     		ldr	r3, [r7, #4]
 2837 0210 1C46     		mov	r4, r3
 2838 0212 07F11403 		add	r3, r7, #20
 2839 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2840 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2841              	.L142:
 850:modem.c       ****     
 851:modem.c       **** }
 2842              		.loc 1 851 0
 2843 021c 7868     		ldr	r0, [r7, #4]
 2844 021e 3837     		adds	r7, r7, #56
 2845              		.cfi_def_cfa_offset 16
 2846 0220 BD46     		mov	sp, r7
 2847              		.cfi_def_cfa_register 13
 2848              		@ sp needed
 2849 0222 B0BD     		pop	{r4, r5, r7, pc}
 2850              	.L153:
 2851              		.align	2
 2852              	.L152:
 2853 0224 00000000 		.word	modem_state
 2854 0228 00000000 		.word	.LC0
 2855 022c 44060000 		.word	.LC67
 2856 0230 58060000 		.word	.LC68
 2857 0234 68060000 		.word	.LC69
 2858 0238 74060000 		.word	.LC70
 2859 023c 84060000 		.word	.LC71
 2860 0240 A8060000 		.word	.LC72
 2861 0244 B8060000 		.word	.LC73
 2862 0248 D8020000 		.word	.LC27
 2863 024c C8060000 		.word	.LC74
 2864 0250 E0060000 		.word	.LC75
 2865 0254 E4060000 		.word	.LC76
 2866 0258 F0060000 		.word	.LC77
 2867 025c 00000000 		.word	uart_received_string
 2868 0260 FC060000 		.word	.LC78
 2869 0264 0000C842 		.word	1120403456
 2870 0268 00005940 		.word	1079574528
 2871 026c 00004E40 		.word	1078853632
 2872 0270 1C070000 		.word	.LC79
 2873 0274 30070000 		.word	.LC80
 2874 0278 3C070000 		.word	.LC81
 2875              		.cfi_endproc
 2876              	.LFE87:
 2877              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2878              		.text
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 71


 2879              	.Letext0:
 2880              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2881              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2882              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2883              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2884              		.file 6 "testing.h"
 2885              		.file 7 "data.h"
 2886              		.file 8 "modem.h"
 2887              		.file 9 "notoriOS.h"
 2888              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2889              		.file 11 "App_LED.h"
 2890              		.section	.debug_info,"",%progbits
 2891              	.Ldebug_info0:
 2892 0000 150C0000 		.4byte	0xc15
 2893 0004 0400     		.2byte	0x4
 2894 0006 00000000 		.4byte	.Ldebug_abbrev0
 2895 000a 04       		.byte	0x4
 2896 000b 01       		.uleb128 0x1
 2897 000c 9C000000 		.4byte	.LASF163
 2898 0010 0C       		.byte	0xc
 2899 0011 1F040000 		.4byte	.LASF164
 2900 0015 28000000 		.4byte	.LASF165
 2901 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2902 001d 00000000 		.4byte	0
 2903 0021 00000000 		.4byte	.Ldebug_line0
 2904 0025 02       		.uleb128 0x2
 2905 0026 01       		.byte	0x1
 2906 0027 06       		.byte	0x6
 2907 0028 9F010000 		.4byte	.LASF0
 2908 002c 03       		.uleb128 0x3
 2909 002d 70000000 		.4byte	.LASF4
 2910 0031 02       		.byte	0x2
 2911 0032 1D       		.byte	0x1d
 2912 0033 37000000 		.4byte	0x37
 2913 0037 02       		.uleb128 0x2
 2914 0038 01       		.byte	0x1
 2915 0039 08       		.byte	0x8
 2916 003a F4050000 		.4byte	.LASF1
 2917 003e 02       		.uleb128 0x2
 2918 003f 02       		.byte	0x2
 2919 0040 05       		.byte	0x5
 2920 0041 57040000 		.4byte	.LASF2
 2921 0045 02       		.uleb128 0x2
 2922 0046 02       		.byte	0x2
 2923 0047 07       		.byte	0x7
 2924 0048 B3020000 		.4byte	.LASF3
 2925 004c 03       		.uleb128 0x3
 2926 004d 6C040000 		.4byte	.LASF5
 2927 0051 02       		.byte	0x2
 2928 0052 3F       		.byte	0x3f
 2929 0053 57000000 		.4byte	0x57
 2930 0057 02       		.uleb128 0x2
 2931 0058 04       		.byte	0x4
 2932 0059 05       		.byte	0x5
 2933 005a 27020000 		.4byte	.LASF6
 2934 005e 03       		.uleb128 0x3
 2935 005f D6020000 		.4byte	.LASF7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 72


 2936 0063 02       		.byte	0x2
 2937 0064 41       		.byte	0x41
 2938 0065 69000000 		.4byte	0x69
 2939 0069 02       		.uleb128 0x2
 2940 006a 04       		.byte	0x4
 2941 006b 07       		.byte	0x7
 2942 006c 82030000 		.4byte	.LASF8
 2943 0070 02       		.uleb128 0x2
 2944 0071 08       		.byte	0x8
 2945 0072 05       		.byte	0x5
 2946 0073 91010000 		.4byte	.LASF9
 2947 0077 02       		.uleb128 0x2
 2948 0078 08       		.byte	0x8
 2949 0079 07       		.byte	0x7
 2950 007a 37010000 		.4byte	.LASF10
 2951 007e 04       		.uleb128 0x4
 2952 007f 04       		.byte	0x4
 2953 0080 05       		.byte	0x5
 2954 0081 696E7400 		.ascii	"int\000"
 2955 0085 02       		.uleb128 0x2
 2956 0086 04       		.byte	0x4
 2957 0087 07       		.byte	0x7
 2958 0088 DA060000 		.4byte	.LASF11
 2959 008c 03       		.uleb128 0x3
 2960 008d 1B080000 		.4byte	.LASF12
 2961 0091 03       		.byte	0x3
 2962 0092 18       		.byte	0x18
 2963 0093 2C000000 		.4byte	0x2c
 2964 0097 03       		.uleb128 0x3
 2965 0098 EC050000 		.4byte	.LASF13
 2966 009c 03       		.byte	0x3
 2967 009d 2C       		.byte	0x2c
 2968 009e 4C000000 		.4byte	0x4c
 2969 00a2 03       		.uleb128 0x3
 2970 00a3 AB070000 		.4byte	.LASF14
 2971 00a7 03       		.byte	0x3
 2972 00a8 30       		.byte	0x30
 2973 00a9 5E000000 		.4byte	0x5e
 2974 00ad 05       		.uleb128 0x5
 2975 00ae 5F020000 		.4byte	.LASF15
 2976 00b2 04       		.byte	0x4
 2977 00b3 9201     		.2byte	0x192
 2978 00b5 37000000 		.4byte	0x37
 2979 00b9 05       		.uleb128 0x5
 2980 00ba 0B000000 		.4byte	.LASF16
 2981 00be 04       		.byte	0x4
 2982 00bf 9301     		.2byte	0x193
 2983 00c1 45000000 		.4byte	0x45
 2984 00c5 05       		.uleb128 0x5
 2985 00c6 C6020000 		.4byte	.LASF17
 2986 00ca 04       		.byte	0x4
 2987 00cb 9401     		.2byte	0x194
 2988 00cd 69000000 		.4byte	0x69
 2989 00d1 05       		.uleb128 0x5
 2990 00d2 2E080000 		.4byte	.LASF18
 2991 00d6 04       		.byte	0x4
 2992 00d7 9601     		.2byte	0x196
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 73


 2993 00d9 3E000000 		.4byte	0x3e
 2994 00dd 05       		.uleb128 0x5
 2995 00de 72020000 		.4byte	.LASF19
 2996 00e2 04       		.byte	0x4
 2997 00e3 9701     		.2byte	0x197
 2998 00e5 57000000 		.4byte	0x57
 2999 00e9 02       		.uleb128 0x2
 3000 00ea 04       		.byte	0x4
 3001 00eb 04       		.byte	0x4
 3002 00ec A5050000 		.4byte	.LASF20
 3003 00f0 02       		.uleb128 0x2
 3004 00f1 08       		.byte	0x8
 3005 00f2 04       		.byte	0x4
 3006 00f3 98080000 		.4byte	.LASF21
 3007 00f7 02       		.uleb128 0x2
 3008 00f8 01       		.byte	0x1
 3009 00f9 08       		.byte	0x8
 3010 00fa C1060000 		.4byte	.LASF22
 3011 00fe 02       		.uleb128 0x2
 3012 00ff 08       		.byte	0x8
 3013 0100 04       		.byte	0x4
 3014 0101 B5060000 		.4byte	.LASF23
 3015 0105 02       		.uleb128 0x2
 3016 0106 04       		.byte	0x4
 3017 0107 07       		.byte	0x7
 3018 0108 F5040000 		.4byte	.LASF24
 3019 010c 06       		.uleb128 0x6
 3020 010d 04       		.byte	0x4
 3021 010e F7000000 		.4byte	0xf7
 3022 0112 06       		.uleb128 0x6
 3023 0113 04       		.byte	0x4
 3024 0114 18010000 		.4byte	0x118
 3025 0118 07       		.uleb128 0x7
 3026 0119 F7000000 		.4byte	0xf7
 3027 011d 08       		.uleb128 0x8
 3028 011e F7000000 		.4byte	0xf7
 3029 0122 2D010000 		.4byte	0x12d
 3030 0126 09       		.uleb128 0x9
 3031 0127 05010000 		.4byte	0x105
 3032 012b 17       		.byte	0x17
 3033 012c 00       		.byte	0
 3034 012d 0A       		.uleb128 0xa
 3035 012e 746D00   		.ascii	"tm\000"
 3036 0131 24       		.byte	0x24
 3037 0132 05       		.byte	0x5
 3038 0133 21       		.byte	0x21
 3039 0134 A5010000 		.4byte	0x1a5
 3040 0138 0B       		.uleb128 0xb
 3041 0139 B4070000 		.4byte	.LASF25
 3042 013d 05       		.byte	0x5
 3043 013e 23       		.byte	0x23
 3044 013f 7E000000 		.4byte	0x7e
 3045 0143 00       		.byte	0
 3046 0144 0B       		.uleb128 0xb
 3047 0145 EE040000 		.4byte	.LASF26
 3048 0149 05       		.byte	0x5
 3049 014a 24       		.byte	0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 74


 3050 014b 7E000000 		.4byte	0x7e
 3051 014f 04       		.byte	0x4
 3052 0150 0B       		.uleb128 0xb
 3053 0151 18000000 		.4byte	.LASF27
 3054 0155 05       		.byte	0x5
 3055 0156 25       		.byte	0x25
 3056 0157 7E000000 		.4byte	0x7e
 3057 015b 08       		.byte	0x8
 3058 015c 0B       		.uleb128 0xb
 3059 015d 96070000 		.4byte	.LASF28
 3060 0161 05       		.byte	0x5
 3061 0162 26       		.byte	0x26
 3062 0163 7E000000 		.4byte	0x7e
 3063 0167 0C       		.byte	0xc
 3064 0168 0B       		.uleb128 0xb
 3065 0169 F8020000 		.4byte	.LASF29
 3066 016d 05       		.byte	0x5
 3067 016e 27       		.byte	0x27
 3068 016f 7E000000 		.4byte	0x7e
 3069 0173 10       		.byte	0x10
 3070 0174 0B       		.uleb128 0xb
 3071 0175 44030000 		.4byte	.LASF30
 3072 0179 05       		.byte	0x5
 3073 017a 28       		.byte	0x28
 3074 017b 7E000000 		.4byte	0x7e
 3075 017f 14       		.byte	0x14
 3076 0180 0B       		.uleb128 0xb
 3077 0181 96060000 		.4byte	.LASF31
 3078 0185 05       		.byte	0x5
 3079 0186 29       		.byte	0x29
 3080 0187 7E000000 		.4byte	0x7e
 3081 018b 18       		.byte	0x18
 3082 018c 0B       		.uleb128 0xb
 3083 018d 20000000 		.4byte	.LASF32
 3084 0191 05       		.byte	0x5
 3085 0192 2A       		.byte	0x2a
 3086 0193 7E000000 		.4byte	0x7e
 3087 0197 1C       		.byte	0x1c
 3088 0198 0B       		.uleb128 0xb
 3089 0199 E6030000 		.4byte	.LASF33
 3090 019d 05       		.byte	0x5
 3091 019e 2B       		.byte	0x2b
 3092 019f 7E000000 		.4byte	0x7e
 3093 01a3 20       		.byte	0x20
 3094 01a4 00       		.byte	0
 3095 01a5 0C       		.uleb128 0xc
 3096 01a6 8101     		.2byte	0x181
 3097 01a8 06       		.byte	0x6
 3098 01a9 0A       		.byte	0xa
 3099 01aa D3010000 		.4byte	0x1d3
 3100 01ae 0B       		.uleb128 0xb
 3101 01af 3F050000 		.4byte	.LASF34
 3102 01b3 06       		.byte	0x6
 3103 01b4 0C       		.byte	0xc
 3104 01b5 D3010000 		.4byte	0x1d3
 3105 01b9 00       		.byte	0
 3106 01ba 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 75


 3107 01bb EC070000 		.4byte	.LASF35
 3108 01bf 06       		.byte	0x6
 3109 01c0 0D       		.byte	0xd
 3110 01c1 AD000000 		.4byte	0xad
 3111 01c5 80       		.byte	0x80
 3112 01c6 0B       		.uleb128 0xb
 3113 01c7 6A060000 		.4byte	.LASF36
 3114 01cb 06       		.byte	0x6
 3115 01cc 0F       		.byte	0xf
 3116 01cd E3010000 		.4byte	0x1e3
 3117 01d1 81       		.byte	0x81
 3118 01d2 00       		.byte	0
 3119 01d3 08       		.uleb128 0x8
 3120 01d4 F7000000 		.4byte	0xf7
 3121 01d8 E3010000 		.4byte	0x1e3
 3122 01dc 09       		.uleb128 0x9
 3123 01dd 05010000 		.4byte	0x105
 3124 01e1 7F       		.byte	0x7f
 3125 01e2 00       		.byte	0
 3126 01e3 08       		.uleb128 0x8
 3127 01e4 F7000000 		.4byte	0xf7
 3128 01e8 F3010000 		.4byte	0x1f3
 3129 01ec 09       		.uleb128 0x9
 3130 01ed 05010000 		.4byte	0x105
 3131 01f1 FF       		.byte	0xff
 3132 01f2 00       		.byte	0
 3133 01f3 03       		.uleb128 0x3
 3134 01f4 52060000 		.4byte	.LASF37
 3135 01f8 06       		.byte	0x6
 3136 01f9 10       		.byte	0x10
 3137 01fa A5010000 		.4byte	0x1a5
 3138 01fe 0D       		.uleb128 0xd
 3139 01ff 2C       		.byte	0x2c
 3140 0200 07       		.byte	0x7
 3141 0201 14       		.byte	0x14
 3142 0202 2B020000 		.4byte	0x22b
 3143 0206 0E       		.uleb128 0xe
 3144 0207 6B657900 		.ascii	"key\000"
 3145 020b 07       		.byte	0x7
 3146 020c 15       		.byte	0x15
 3147 020d 2B020000 		.4byte	0x22b
 3148 0211 00       		.byte	0
 3149 0212 0B       		.uleb128 0xb
 3150 0213 12000000 		.4byte	.LASF38
 3151 0217 07       		.byte	0x7
 3152 0218 16       		.byte	0x16
 3153 0219 2B020000 		.4byte	0x22b
 3154 021d 14       		.byte	0x14
 3155 021e 0B       		.uleb128 0xb
 3156 021f C2030000 		.4byte	.LASF39
 3157 0223 07       		.byte	0x7
 3158 0224 17       		.byte	0x17
 3159 0225 DD000000 		.4byte	0xdd
 3160 0229 28       		.byte	0x28
 3161 022a 00       		.byte	0
 3162 022b 08       		.uleb128 0x8
 3163 022c F7000000 		.4byte	0xf7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 76


 3164 0230 3B020000 		.4byte	0x23b
 3165 0234 09       		.uleb128 0x9
 3166 0235 05010000 		.4byte	0x105
 3167 0239 13       		.byte	0x13
 3168 023a 00       		.byte	0
 3169 023b 03       		.uleb128 0x3
 3170 023c 6C030000 		.4byte	.LASF40
 3171 0240 07       		.byte	0x7
 3172 0241 19       		.byte	0x19
 3173 0242 FE010000 		.4byte	0x1fe
 3174 0246 0D       		.uleb128 0xd
 3175 0247 3C       		.byte	0x3c
 3176 0248 08       		.byte	0x8
 3177 0249 35       		.byte	0x35
 3178 024a 73020000 		.4byte	0x273
 3179 024e 0B       		.uleb128 0xb
 3180 024f 8F070000 		.4byte	.LASF41
 3181 0253 08       		.byte	0x8
 3182 0254 36       		.byte	0x36
 3183 0255 2B020000 		.4byte	0x22b
 3184 0259 00       		.byte	0
 3185 025a 0B       		.uleb128 0xb
 3186 025b EC060000 		.4byte	.LASF42
 3187 025f 08       		.byte	0x8
 3188 0260 37       		.byte	0x37
 3189 0261 2B020000 		.4byte	0x22b
 3190 0265 14       		.byte	0x14
 3191 0266 0B       		.uleb128 0xb
 3192 0267 65060000 		.4byte	.LASF43
 3193 026b 08       		.byte	0x8
 3194 026c 38       		.byte	0x38
 3195 026d 2B020000 		.4byte	0x22b
 3196 0271 28       		.byte	0x28
 3197 0272 00       		.byte	0
 3198 0273 03       		.uleb128 0x3
 3199 0274 00070000 		.4byte	.LASF44
 3200 0278 08       		.byte	0x8
 3201 0279 3A       		.byte	0x3a
 3202 027a 46020000 		.4byte	0x246
 3203 027e 0D       		.uleb128 0xd
 3204 027f 20       		.byte	0x20
 3205 0280 08       		.byte	0x8
 3206 0281 3C       		.byte	0x3c
 3207 0282 E7020000 		.4byte	0x2e7
 3208 0286 0B       		.uleb128 0xb
 3209 0287 21020000 		.4byte	.LASF45
 3210 028b 08       		.byte	0x8
 3211 028c 3D       		.byte	0x3d
 3212 028d 7E000000 		.4byte	0x7e
 3213 0291 00       		.byte	0
 3214 0292 0E       		.uleb128 0xe
 3215 0293 62657200 		.ascii	"ber\000"
 3216 0297 08       		.byte	0x8
 3217 0298 3E       		.byte	0x3e
 3218 0299 7E000000 		.4byte	0x7e
 3219 029d 04       		.byte	0x4
 3220 029e 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 77


 3221 029f 33060000 		.4byte	.LASF46
 3222 02a3 08       		.byte	0x8
 3223 02a4 3F       		.byte	0x3f
 3224 02a5 7E000000 		.4byte	0x7e
 3225 02a9 08       		.byte	0x8
 3226 02aa 0B       		.uleb128 0xb
 3227 02ab AB010000 		.4byte	.LASF47
 3228 02af 08       		.byte	0x8
 3229 02b0 40       		.byte	0x40
 3230 02b1 7E000000 		.4byte	0x7e
 3231 02b5 0C       		.byte	0xc
 3232 02b6 0B       		.uleb128 0xb
 3233 02b7 18060000 		.4byte	.LASF48
 3234 02bb 08       		.byte	0x8
 3235 02bc 41       		.byte	0x41
 3236 02bd 7E000000 		.4byte	0x7e
 3237 02c1 10       		.byte	0x10
 3238 02c2 0B       		.uleb128 0xb
 3239 02c3 71060000 		.4byte	.LASF49
 3240 02c7 08       		.byte	0x8
 3241 02c8 42       		.byte	0x42
 3242 02c9 7E000000 		.4byte	0x7e
 3243 02cd 14       		.byte	0x14
 3244 02ce 0B       		.uleb128 0xb
 3245 02cf CD010000 		.4byte	.LASF50
 3246 02d3 08       		.byte	0x8
 3247 02d4 43       		.byte	0x43
 3248 02d5 7E000000 		.4byte	0x7e
 3249 02d9 18       		.byte	0x18
 3250 02da 0B       		.uleb128 0xb
 3251 02db 3A040000 		.4byte	.LASF51
 3252 02df 08       		.byte	0x8
 3253 02e0 44       		.byte	0x44
 3254 02e1 7E000000 		.4byte	0x7e
 3255 02e5 1C       		.byte	0x1c
 3256 02e6 00       		.byte	0
 3257 02e7 03       		.uleb128 0x3
 3258 02e8 76060000 		.4byte	.LASF52
 3259 02ec 08       		.byte	0x8
 3260 02ed 46       		.byte	0x46
 3261 02ee 7E020000 		.4byte	0x27e
 3262 02f2 0D       		.uleb128 0xd
 3263 02f3 10       		.byte	0x10
 3264 02f4 08       		.byte	0x8
 3265 02f5 48       		.byte	0x48
 3266 02f6 37030000 		.4byte	0x337
 3267 02fa 0B       		.uleb128 0xb
 3268 02fb 36050000 		.4byte	.LASF53
 3269 02ff 08       		.byte	0x8
 3270 0300 49       		.byte	0x49
 3271 0301 E9000000 		.4byte	0xe9
 3272 0305 00       		.byte	0
 3273 0306 0B       		.uleb128 0xb
 3274 0307 92000000 		.4byte	.LASF54
 3275 030b 08       		.byte	0x8
 3276 030c 4A       		.byte	0x4a
 3277 030d E9000000 		.4byte	0xe9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 78


 3278 0311 04       		.byte	0x4
 3279 0312 0B       		.uleb128 0xb
 3280 0313 56020000 		.4byte	.LASF55
 3281 0317 08       		.byte	0x8
 3282 0318 4B       		.byte	0x4b
 3283 0319 E9000000 		.4byte	0xe9
 3284 031d 08       		.byte	0x8
 3285 031e 0B       		.uleb128 0xb
 3286 031f CC030000 		.4byte	.LASF56
 3287 0323 08       		.byte	0x8
 3288 0324 4C       		.byte	0x4c
 3289 0325 B9000000 		.4byte	0xb9
 3290 0329 0C       		.byte	0xc
 3291 032a 0B       		.uleb128 0xb
 3292 032b 9E070000 		.4byte	.LASF57
 3293 032f 08       		.byte	0x8
 3294 0330 4D       		.byte	0x4d
 3295 0331 AD000000 		.4byte	0xad
 3296 0335 0E       		.byte	0xe
 3297 0336 00       		.byte	0
 3298 0337 03       		.uleb128 0x3
 3299 0338 0D070000 		.4byte	.LASF58
 3300 033c 08       		.byte	0x8
 3301 033d 4F       		.byte	0x4f
 3302 033e F2020000 		.4byte	0x2f2
 3303 0342 0D       		.uleb128 0xd
 3304 0343 05       		.byte	0x5
 3305 0344 08       		.byte	0x8
 3306 0345 52       		.byte	0x52
 3307 0346 87030000 		.4byte	0x387
 3308 034a 0B       		.uleb128 0xb
 3309 034b 78020000 		.4byte	.LASF59
 3310 034f 08       		.byte	0x8
 3311 0350 54       		.byte	0x54
 3312 0351 AD000000 		.4byte	0xad
 3313 0355 00       		.byte	0
 3314 0356 0B       		.uleb128 0xb
 3315 0357 CA050000 		.4byte	.LASF60
 3316 035b 08       		.byte	0x8
 3317 035c 56       		.byte	0x56
 3318 035d 87030000 		.4byte	0x387
 3319 0361 01       		.byte	0x1
 3320 0362 0B       		.uleb128 0xb
 3321 0363 25070000 		.4byte	.LASF61
 3322 0367 08       		.byte	0x8
 3323 0368 58       		.byte	0x58
 3324 0369 AD000000 		.4byte	0xad
 3325 036d 02       		.byte	0x2
 3326 036e 0B       		.uleb128 0xb
 3327 036f 1D060000 		.4byte	.LASF62
 3328 0373 08       		.byte	0x8
 3329 0374 5A       		.byte	0x5a
 3330 0375 AD000000 		.4byte	0xad
 3331 0379 03       		.byte	0x3
 3332 037a 0B       		.uleb128 0xb
 3333 037b FF020000 		.4byte	.LASF63
 3334 037f 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 79


 3335 0380 5D       		.byte	0x5d
 3336 0381 AD000000 		.4byte	0xad
 3337 0385 04       		.byte	0x4
 3338 0386 00       		.byte	0
 3339 0387 02       		.uleb128 0x2
 3340 0388 01       		.byte	0x1
 3341 0389 02       		.byte	0x2
 3342 038a E6050000 		.4byte	.LASF64
 3343 038e 03       		.uleb128 0x3
 3344 038f B9040000 		.4byte	.LASF65
 3345 0393 08       		.byte	0x8
 3346 0394 5F       		.byte	0x5f
 3347 0395 42030000 		.4byte	0x342
 3348 0399 0D       		.uleb128 0xd
 3349 039a 06       		.byte	0x6
 3350 039b 09       		.byte	0x9
 3351 039c 2E       		.byte	0x2e
 3352 039d D2030000 		.4byte	0x3d2
 3353 03a1 0B       		.uleb128 0xb
 3354 03a2 B0010000 		.4byte	.LASF66
 3355 03a6 09       		.byte	0x9
 3356 03a7 30       		.byte	0x30
 3357 03a8 B9000000 		.4byte	0xb9
 3358 03ac 00       		.byte	0
 3359 03ad 0B       		.uleb128 0xb
 3360 03ae 30020000 		.4byte	.LASF67
 3361 03b2 09       		.byte	0x9
 3362 03b3 31       		.byte	0x31
 3363 03b4 D1000000 		.4byte	0xd1
 3364 03b8 02       		.byte	0x2
 3365 03b9 0B       		.uleb128 0xb
 3366 03ba 46080000 		.4byte	.LASF68
 3367 03be 09       		.byte	0x9
 3368 03bf 32       		.byte	0x32
 3369 03c0 AD000000 		.4byte	0xad
 3370 03c4 04       		.byte	0x4
 3371 03c5 0B       		.uleb128 0xb
 3372 03c6 7A000000 		.4byte	.LASF69
 3373 03ca 09       		.byte	0x9
 3374 03cb 33       		.byte	0x33
 3375 03cc AD000000 		.4byte	0xad
 3376 03d0 05       		.byte	0x5
 3377 03d1 00       		.byte	0
 3378 03d2 03       		.uleb128 0x3
 3379 03d3 E0050000 		.4byte	.LASF70
 3380 03d7 09       		.byte	0x9
 3381 03d8 36       		.byte	0x36
 3382 03d9 DD030000 		.4byte	0x3dd
 3383 03dd 0F       		.uleb128 0xf
 3384 03de 99030000 		.4byte	0x399
 3385 03e2 0D       		.uleb128 0xd
 3386 03e3 1C       		.byte	0x1c
 3387 03e4 09       		.byte	0x9
 3388 03e5 39       		.byte	0x39
 3389 03e6 03040000 		.4byte	0x403
 3390 03ea 0B       		.uleb128 0xb
 3391 03eb EF030000 		.4byte	.LASF71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 80


 3392 03ef 09       		.byte	0x9
 3393 03f0 3B       		.byte	0x3b
 3394 03f1 03040000 		.4byte	0x403
 3395 03f5 00       		.byte	0
 3396 03f6 0B       		.uleb128 0xb
 3397 03f7 02040000 		.4byte	.LASF72
 3398 03fb 09       		.byte	0x9
 3399 03fc 3C       		.byte	0x3c
 3400 03fd 1D010000 		.4byte	0x11d
 3401 0401 04       		.byte	0x4
 3402 0402 00       		.byte	0
 3403 0403 06       		.uleb128 0x6
 3404 0404 04       		.byte	0x4
 3405 0405 73020000 		.4byte	0x273
 3406 0409 03       		.uleb128 0x3
 3407 040a AE040000 		.4byte	.LASF73
 3408 040e 09       		.byte	0x9
 3409 040f 3E       		.byte	0x3e
 3410 0410 E2030000 		.4byte	0x3e2
 3411 0414 0D       		.uleb128 0xd
 3412 0415 68       		.byte	0x68
 3413 0416 09       		.byte	0x9
 3414 0417 44       		.byte	0x44
 3415 0418 35040000 		.4byte	0x435
 3416 041c 0B       		.uleb128 0xb
 3417 041d FA030000 		.4byte	.LASF74
 3418 0421 09       		.byte	0x9
 3419 0422 49       		.byte	0x49
 3420 0423 35040000 		.4byte	0x435
 3421 0427 00       		.byte	0
 3422 0428 0B       		.uleb128 0xb
 3423 0429 DE030000 		.4byte	.LASF75
 3424 042d 09       		.byte	0x9
 3425 042e 4A       		.byte	0x4a
 3426 042f 7E000000 		.4byte	0x7e
 3427 0433 64       		.byte	0x64
 3428 0434 00       		.byte	0
 3429 0435 08       		.uleb128 0x8
 3430 0436 F7000000 		.4byte	0xf7
 3431 043a 45040000 		.4byte	0x445
 3432 043e 09       		.uleb128 0x9
 3433 043f 05010000 		.4byte	0x105
 3434 0443 63       		.byte	0x63
 3435 0444 00       		.byte	0
 3436 0445 03       		.uleb128 0x3
 3437 0446 0C080000 		.4byte	.LASF76
 3438 044a 09       		.byte	0x9
 3439 044b 50       		.byte	0x50
 3440 044c 14040000 		.4byte	0x414
 3441 0450 10       		.uleb128 0x10
 3442 0451 D3050000 		.4byte	.LASF108
 3443 0455 01       		.byte	0x1
 3444 0456 12       		.byte	0x12
 3445 0457 00000000 		.4byte	.LFB64
 3446 045b 44000000 		.4byte	.LFE64-.LFB64
 3447 045f 01       		.uleb128 0x1
 3448 0460 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 81


 3449 0461 11       		.uleb128 0x11
 3450 0462 AB050000 		.4byte	.LASF77
 3451 0466 01       		.byte	0x1
 3452 0467 1C       		.byte	0x1c
 3453 0468 00000000 		.4byte	.LFB65
 3454 046c 6C000000 		.4byte	.LFE65-.LFB65
 3455 0470 01       		.uleb128 0x1
 3456 0471 9C       		.byte	0x9c
 3457 0472 11       		.uleb128 0x11
 3458 0473 6D070000 		.4byte	.LASF78
 3459 0477 01       		.byte	0x1
 3460 0478 36       		.byte	0x36
 3461 0479 00000000 		.4byte	.LFB66
 3462 047d 32000000 		.4byte	.LFE66-.LFB66
 3463 0481 01       		.uleb128 0x1
 3464 0482 9C       		.byte	0x9c
 3465 0483 11       		.uleb128 0x11
 3466 0484 56030000 		.4byte	.LASF79
 3467 0488 01       		.byte	0x1
 3468 0489 46       		.byte	0x46
 3469 048a 00000000 		.4byte	.LFB67
 3470 048e 20000000 		.4byte	.LFE67-.LFB67
 3471 0492 01       		.uleb128 0x1
 3472 0493 9C       		.byte	0x9c
 3473 0494 11       		.uleb128 0x11
 3474 0495 87080000 		.4byte	.LASF80
 3475 0499 01       		.byte	0x1
 3476 049a 4F       		.byte	0x4f
 3477 049b 00000000 		.4byte	.LFB68
 3478 049f 40000000 		.4byte	.LFE68-.LFB68
 3479 04a3 01       		.uleb128 0x1
 3480 04a4 9C       		.byte	0x9c
 3481 04a5 12       		.uleb128 0x12
 3482 04a6 10040000 		.4byte	.LASF94
 3483 04aa 01       		.byte	0x1
 3484 04ab 61       		.byte	0x61
 3485 04ac AD000000 		.4byte	0xad
 3486 04b0 00000000 		.4byte	.LFB69
 3487 04b4 DC000000 		.4byte	.LFE69-.LFB69
 3488 04b8 01       		.uleb128 0x1
 3489 04b9 9C       		.byte	0x9c
 3490 04ba 19050000 		.4byte	0x519
 3491 04be 13       		.uleb128 0x13
 3492 04bf 34080000 		.4byte	.LASF81
 3493 04c3 01       		.byte	0x1
 3494 04c4 6A       		.byte	0x6a
 3495 04c5 AD000000 		.4byte	0xad
 3496 04c9 02       		.uleb128 0x2
 3497 04ca 91       		.byte	0x91
 3498 04cb 77       		.sleb128 -9
 3499 04cc 13       		.uleb128 0x13
 3500 04cd 3D080000 		.4byte	.LASF82
 3501 04d1 01       		.byte	0x1
 3502 04d2 6B       		.byte	0x6b
 3503 04d3 AD000000 		.4byte	0xad
 3504 04d7 02       		.uleb128 0x2
 3505 04d8 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 82


 3506 04d9 74       		.sleb128 -12
 3507 04da 13       		.uleb128 0x13
 3508 04db 54080000 		.4byte	.LASF83
 3509 04df 01       		.byte	0x1
 3510 04e0 6D       		.byte	0x6d
 3511 04e1 57000000 		.4byte	0x57
 3512 04e5 02       		.uleb128 0x2
 3513 04e6 91       		.byte	0x91
 3514 04e7 70       		.sleb128 -16
 3515 04e8 14       		.uleb128 0x14
 3516 04e9 26000000 		.4byte	.LBB2
 3517 04ed 4A000000 		.4byte	.LBE2-.LBB2
 3518 04f1 13       		.uleb128 0x13
 3519 04f2 3D080000 		.4byte	.LASF82
 3520 04f6 01       		.byte	0x1
 3521 04f7 70       		.byte	0x70
 3522 04f8 AD000000 		.4byte	0xad
 3523 04fc 02       		.uleb128 0x2
 3524 04fd 91       		.byte	0x91
 3525 04fe 76       		.sleb128 -10
 3526 04ff 14       		.uleb128 0x14
 3527 0500 2C000000 		.4byte	.LBB3
 3528 0504 2A000000 		.4byte	.LBE3-.LBB3
 3529 0508 13       		.uleb128 0x13
 3530 0509 78030000 		.4byte	.LASF84
 3531 050d 01       		.byte	0x1
 3532 050e 72       		.byte	0x72
 3533 050f AD000000 		.4byte	0xad
 3534 0513 02       		.uleb128 0x2
 3535 0514 91       		.byte	0x91
 3536 0515 75       		.sleb128 -11
 3537 0516 00       		.byte	0
 3538 0517 00       		.byte	0
 3539 0518 00       		.byte	0
 3540 0519 11       		.uleb128 0x11
 3541 051a 9E060000 		.4byte	.LASF85
 3542 051e 01       		.byte	0x1
 3543 051f 93       		.byte	0x93
 3544 0520 00000000 		.4byte	.LFB70
 3545 0524 1C000000 		.4byte	.LFE70-.LFB70
 3546 0528 01       		.uleb128 0x1
 3547 0529 9C       		.byte	0x9c
 3548 052a 11       		.uleb128 0x11
 3549 052b 84060000 		.4byte	.LASF86
 3550 052f 01       		.byte	0x1
 3551 0530 9B       		.byte	0x9b
 3552 0531 00000000 		.4byte	.LFB71
 3553 0535 28000000 		.4byte	.LFE71-.LFB71
 3554 0539 01       		.uleb128 0x1
 3555 053a 9C       		.byte	0x9c
 3556 053b 15       		.uleb128 0x15
 3557 053c 9D040000 		.4byte	.LASF98
 3558 0540 01       		.byte	0x1
 3559 0541 A6       		.byte	0xa6
 3560 0542 8C000000 		.4byte	0x8c
 3561 0546 00000000 		.4byte	.LFB72
 3562 054a C8000000 		.4byte	.LFE72-.LFB72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 83


 3563 054e 01       		.uleb128 0x1
 3564 054f 9C       		.byte	0x9c
 3565 0550 CD050000 		.4byte	0x5cd
 3566 0554 16       		.uleb128 0x16
 3567 0555 8B050000 		.4byte	.LASF87
 3568 0559 01       		.byte	0x1
 3569 055a A6       		.byte	0xa6
 3570 055b 0C010000 		.4byte	0x10c
 3571 055f 02       		.uleb128 0x2
 3572 0560 91       		.byte	0x91
 3573 0561 5C       		.sleb128 -36
 3574 0562 16       		.uleb128 0x16
 3575 0563 5E080000 		.4byte	.LASF88
 3576 0567 01       		.byte	0x1
 3577 0568 A6       		.byte	0xa6
 3578 0569 0C010000 		.4byte	0x10c
 3579 056d 02       		.uleb128 0x2
 3580 056e 91       		.byte	0x91
 3581 056f 58       		.sleb128 -40
 3582 0570 16       		.uleb128 0x16
 3583 0571 A3030000 		.4byte	.LASF89
 3584 0575 01       		.byte	0x1
 3585 0576 A6       		.byte	0xa6
 3586 0577 A2000000 		.4byte	0xa2
 3587 057b 02       		.uleb128 0x2
 3588 057c 91       		.byte	0x91
 3589 057d 54       		.sleb128 -44
 3590 057e 13       		.uleb128 0x13
 3591 057f 92040000 		.4byte	.LASF90
 3592 0583 01       		.byte	0x1
 3593 0584 A8       		.byte	0xa8
 3594 0585 C5000000 		.4byte	0xc5
 3595 0589 02       		.uleb128 0x2
 3596 058a 91       		.byte	0x91
 3597 058b 74       		.sleb128 -12
 3598 058c 14       		.uleb128 0x14
 3599 058d 16000000 		.4byte	.LBB4
 3600 0591 88000000 		.4byte	.LBE4-.LBB4
 3601 0595 13       		.uleb128 0x13
 3602 0596 94050000 		.4byte	.LASF91
 3603 059a 01       		.byte	0x1
 3604 059b AC       		.byte	0xac
 3605 059c 0C010000 		.4byte	0x10c
 3606 05a0 02       		.uleb128 0x2
 3607 05a1 91       		.byte	0x91
 3608 05a2 64       		.sleb128 -28
 3609 05a3 13       		.uleb128 0x13
 3610 05a4 12060000 		.4byte	.LASF92
 3611 05a8 01       		.byte	0x1
 3612 05a9 AD       		.byte	0xad
 3613 05aa A2000000 		.4byte	0xa2
 3614 05ae 02       		.uleb128 0x2
 3615 05af 91       		.byte	0x91
 3616 05b0 6C       		.sleb128 -20
 3617 05b1 17       		.uleb128 0x17
 3618 05b2 6900     		.ascii	"i\000"
 3619 05b4 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 84


 3620 05b5 AE       		.byte	0xae
 3621 05b6 A2000000 		.4byte	0xa2
 3622 05ba 02       		.uleb128 0x2
 3623 05bb 91       		.byte	0x91
 3624 05bc 70       		.sleb128 -16
 3625 05bd 13       		.uleb128 0x13
 3626 05be CD020000 		.4byte	.LASF93
 3627 05c2 01       		.byte	0x1
 3628 05c3 AE       		.byte	0xae
 3629 05c4 A2000000 		.4byte	0xa2
 3630 05c8 02       		.uleb128 0x2
 3631 05c9 91       		.byte	0x91
 3632 05ca 68       		.sleb128 -24
 3633 05cb 00       		.byte	0
 3634 05cc 00       		.byte	0
 3635 05cd 12       		.uleb128 0x12
 3636 05ce 60050000 		.4byte	.LASF95
 3637 05d2 01       		.byte	0x1
 3638 05d3 DA       		.byte	0xda
 3639 05d4 F3010000 		.4byte	0x1f3
 3640 05d8 00000000 		.4byte	.LFB73
 3641 05dc 00010000 		.4byte	.LFE73-.LFB73
 3642 05e0 01       		.uleb128 0x1
 3643 05e1 9C       		.byte	0x9c
 3644 05e2 24060000 		.4byte	0x624
 3645 05e6 13       		.uleb128 0x13
 3646 05e7 66010000 		.4byte	.LASF96
 3647 05eb 01       		.byte	0x1
 3648 05ec DC       		.byte	0xdc
 3649 05ed F3010000 		.4byte	0x1f3
 3650 05f1 03       		.uleb128 0x3
 3651 05f2 91       		.byte	0x91
 3652 05f3 E47C     		.sleb128 -412
 3653 05f5 14       		.uleb128 0x14
 3654 05f6 4A000000 		.4byte	.LBB5
 3655 05fa 86000000 		.4byte	.LBE5-.LBB5
 3656 05fe 17       		.uleb128 0x17
 3657 05ff 6900     		.ascii	"i\000"
 3658 0601 01       		.byte	0x1
 3659 0602 E3       		.byte	0xe3
 3660 0603 7E000000 		.4byte	0x7e
 3661 0607 02       		.uleb128 0x2
 3662 0608 91       		.byte	0x91
 3663 0609 6C       		.sleb128 -20
 3664 060a 14       		.uleb128 0x14
 3665 060b 70000000 		.4byte	.LBB6
 3666 060f 46000000 		.4byte	.LBE6-.LBB6
 3667 0613 13       		.uleb128 0x13
 3668 0614 A6020000 		.4byte	.LASF97
 3669 0618 01       		.byte	0x1
 3670 0619 F0       		.byte	0xf0
 3671 061a 57000000 		.4byte	0x57
 3672 061e 02       		.uleb128 0x2
 3673 061f 91       		.byte	0x91
 3674 0620 68       		.sleb128 -24
 3675 0621 00       		.byte	0
 3676 0622 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 85


 3677 0623 00       		.byte	0
 3678 0624 18       		.uleb128 0x18
 3679 0625 94030000 		.4byte	.LASF99
 3680 0629 01       		.byte	0x1
 3681 062a 0401     		.2byte	0x104
 3682 062c AD000000 		.4byte	0xad
 3683 0630 00000000 		.4byte	.LFB74
 3684 0634 78000000 		.4byte	.LFE74-.LFB74
 3685 0638 01       		.uleb128 0x1
 3686 0639 9C       		.byte	0x9c
 3687 063a 95060000 		.4byte	0x695
 3688 063e 19       		.uleb128 0x19
 3689 063f 82040000 		.4byte	.LASF100
 3690 0643 01       		.byte	0x1
 3691 0644 0401     		.2byte	0x104
 3692 0646 0C010000 		.4byte	0x10c
 3693 064a 02       		.uleb128 0x2
 3694 064b 91       		.byte	0x91
 3695 064c 6C       		.sleb128 -20
 3696 064d 19       		.uleb128 0x19
 3697 064e 27040000 		.4byte	.LASF101
 3698 0652 01       		.byte	0x1
 3699 0653 0401     		.2byte	0x104
 3700 0655 12010000 		.4byte	0x112
 3701 0659 02       		.uleb128 0x2
 3702 065a 91       		.byte	0x91
 3703 065b 68       		.sleb128 -24
 3704 065c 19       		.uleb128 0x19
 3705 065d 4D040000 		.4byte	.LASF102
 3706 0661 01       		.byte	0x1
 3707 0662 0401     		.2byte	0x104
 3708 0664 12010000 		.4byte	0x112
 3709 0668 02       		.uleb128 0x2
 3710 0669 91       		.byte	0x91
 3711 066a 64       		.sleb128 -28
 3712 066b 19       		.uleb128 0x19
 3713 066c 33040000 		.4byte	.LASF103
 3714 0670 01       		.byte	0x1
 3715 0671 0401     		.2byte	0x104
 3716 0673 0C010000 		.4byte	0x10c
 3717 0677 02       		.uleb128 0x2
 3718 0678 91       		.byte	0x91
 3719 0679 60       		.sleb128 -32
 3720 067a 1A       		.uleb128 0x1a
 3721 067b 6100     		.ascii	"a\000"
 3722 067d 01       		.byte	0x1
 3723 067e 0601     		.2byte	0x106
 3724 0680 0C010000 		.4byte	0x10c
 3725 0684 02       		.uleb128 0x2
 3726 0685 91       		.byte	0x91
 3727 0686 74       		.sleb128 -12
 3728 0687 1A       		.uleb128 0x1a
 3729 0688 6200     		.ascii	"b\000"
 3730 068a 01       		.byte	0x1
 3731 068b 0601     		.2byte	0x106
 3732 068d 0C010000 		.4byte	0x10c
 3733 0691 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 86


 3734 0692 91       		.byte	0x91
 3735 0693 70       		.sleb128 -16
 3736 0694 00       		.byte	0
 3737 0695 1B       		.uleb128 0x1b
 3738 0696 C6060000 		.4byte	.LASF104
 3739 069a 01       		.byte	0x1
 3740 069b 2301     		.2byte	0x123
 3741 069d AD000000 		.4byte	0xad
 3742 06a1 00000000 		.4byte	.LFB75
 3743 06a5 74010000 		.4byte	.LFE75-.LFB75
 3744 06a9 01       		.uleb128 0x1
 3745 06aa 9C       		.byte	0x9c
 3746 06ab C7060000 		.4byte	0x6c7
 3747 06af 14       		.uleb128 0x14
 3748 06b0 2E000000 		.4byte	.LBB7
 3749 06b4 68000000 		.4byte	.LBE7-.LBB7
 3750 06b8 1A       		.uleb128 0x1a
 3751 06b9 6900     		.ascii	"i\000"
 3752 06bb 01       		.byte	0x1
 3753 06bc 3101     		.2byte	0x131
 3754 06be AD000000 		.4byte	0xad
 3755 06c2 02       		.uleb128 0x2
 3756 06c3 91       		.byte	0x91
 3757 06c4 77       		.sleb128 -9
 3758 06c5 00       		.byte	0
 3759 06c6 00       		.byte	0
 3760 06c7 1B       		.uleb128 0x1b
 3761 06c8 04050000 		.4byte	.LASF105
 3762 06cc 01       		.byte	0x1
 3763 06cd 7501     		.2byte	0x175
 3764 06cf AD000000 		.4byte	0xad
 3765 06d3 00000000 		.4byte	.LFB76
 3766 06d7 B8000000 		.4byte	.LFE76-.LFB76
 3767 06db 01       		.uleb128 0x1
 3768 06dc 9C       		.byte	0x9c
 3769 06dd 0A070000 		.4byte	0x70a
 3770 06e1 1C       		.uleb128 0x1c
 3771 06e2 EC070000 		.4byte	.LASF35
 3772 06e6 01       		.byte	0x1
 3773 06e7 7901     		.2byte	0x179
 3774 06e9 AD000000 		.4byte	0xad
 3775 06ed 02       		.uleb128 0x2
 3776 06ee 91       		.byte	0x91
 3777 06ef 77       		.sleb128 -9
 3778 06f0 14       		.uleb128 0x14
 3779 06f1 36000000 		.4byte	.LBB8
 3780 06f5 48000000 		.4byte	.LBE8-.LBB8
 3781 06f9 1C       		.uleb128 0x1c
 3782 06fa 87040000 		.4byte	.LASF106
 3783 06fe 01       		.byte	0x1
 3784 06ff 8101     		.2byte	0x181
 3785 0701 0A070000 		.4byte	0x70a
 3786 0705 02       		.uleb128 0x2
 3787 0706 91       		.byte	0x91
 3788 0707 6C       		.sleb128 -20
 3789 0708 00       		.byte	0
 3790 0709 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 87


 3791 070a 08       		.uleb128 0x8
 3792 070b F7000000 		.4byte	0xf7
 3793 070f 1A070000 		.4byte	0x71a
 3794 0713 09       		.uleb128 0x9
 3795 0714 05010000 		.4byte	0x105
 3796 0718 09       		.byte	0x9
 3797 0719 00       		.byte	0
 3798 071a 1D       		.uleb128 0x1d
 3799 071b FA010000 		.4byte	.LASF107
 3800 071f 01       		.byte	0x1
 3801 0720 9301     		.2byte	0x193
 3802 0722 00000000 		.4byte	.LFB77
 3803 0726 1C000000 		.4byte	.LFE77-.LFB77
 3804 072a 01       		.uleb128 0x1
 3805 072b 9C       		.byte	0x9c
 3806 072c 1E       		.uleb128 0x1e
 3807 072d 32070000 		.4byte	.LASF109
 3808 0731 01       		.byte	0x1
 3809 0732 A301     		.2byte	0x1a3
 3810 0734 AD000000 		.4byte	0xad
 3811 0738 00000000 		.4byte	.LFB78
 3812 073c 28000000 		.4byte	.LFE78-.LFB78
 3813 0740 01       		.uleb128 0x1
 3814 0741 9C       		.byte	0x9c
 3815 0742 1F       		.uleb128 0x1f
 3816 0743 AB030000 		.4byte	.LASF112
 3817 0747 01       		.byte	0x1
 3818 0748 AE01     		.2byte	0x1ae
 3819 074a 00000000 		.4byte	.LFB79
 3820 074e 84000000 		.4byte	.LFE79-.LFB79
 3821 0752 01       		.uleb128 0x1
 3822 0753 9C       		.byte	0x9c
 3823 0754 68070000 		.4byte	0x768
 3824 0758 1C       		.uleb128 0x1c
 3825 0759 6B050000 		.4byte	.LASF110
 3826 075d 01       		.byte	0x1
 3827 075e BB01     		.2byte	0x1bb
 3828 0760 7E000000 		.4byte	0x7e
 3829 0764 02       		.uleb128 0x2
 3830 0765 91       		.byte	0x91
 3831 0766 74       		.sleb128 -12
 3832 0767 00       		.byte	0
 3833 0768 20       		.uleb128 0x20
 3834 0769 24030000 		.4byte	.LASF111
 3835 076d 01       		.byte	0x1
 3836 076e CD01     		.2byte	0x1cd
 3837 0770 00000000 		.4byte	.LFB80
 3838 0774 30000000 		.4byte	.LFE80-.LFB80
 3839 0778 01       		.uleb128 0x1
 3840 0779 9C       		.byte	0x9c
 3841 077a 1F       		.uleb128 0x1f
 3842 077b BB070000 		.4byte	.LASF113
 3843 077f 01       		.byte	0x1
 3844 0780 D601     		.2byte	0x1d6
 3845 0782 00000000 		.4byte	.LFB81
 3846 0786 30020000 		.4byte	.LFE81-.LFB81
 3847 078a 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 88


 3848 078b 9C       		.byte	0x9c
 3849 078c 3D080000 		.4byte	0x83d
 3850 0790 1C       		.uleb128 0x1c
 3851 0791 27060000 		.4byte	.LASF114
 3852 0795 01       		.byte	0x1
 3853 0796 D901     		.2byte	0x1d9
 3854 0798 0A070000 		.4byte	0x70a
 3855 079c 02       		.uleb128 0x2
 3856 079d 91       		.byte	0x91
 3857 079e 64       		.sleb128 -28
 3858 079f 1C       		.uleb128 0x1c
 3859 07a0 9B020000 		.4byte	.LASF115
 3860 07a4 01       		.byte	0x1
 3861 07a5 DA01     		.2byte	0x1da
 3862 07a7 0A070000 		.4byte	0x70a
 3863 07ab 02       		.uleb128 0x2
 3864 07ac 91       		.byte	0x91
 3865 07ad 58       		.sleb128 -40
 3866 07ae 1C       		.uleb128 0x1c
 3867 07af DE070000 		.4byte	.LASF116
 3868 07b3 01       		.byte	0x1
 3869 07b4 DB01     		.2byte	0x1db
 3870 07b6 0A070000 		.4byte	0x70a
 3871 07ba 02       		.uleb128 0x2
 3872 07bb 91       		.byte	0x91
 3873 07bc 4C       		.sleb128 -52
 3874 07bd 1C       		.uleb128 0x1c
 3875 07be BC050000 		.4byte	.LASF117
 3876 07c2 01       		.byte	0x1
 3877 07c3 DC01     		.2byte	0x1dc
 3878 07c5 0A070000 		.4byte	0x70a
 3879 07c9 02       		.uleb128 0x2
 3880 07ca 91       		.byte	0x91
 3881 07cb 40       		.sleb128 -64
 3882 07cc 1C       		.uleb128 0x1c
 3883 07cd 17030000 		.4byte	.LASF118
 3884 07d1 01       		.byte	0x1
 3885 07d2 DD01     		.2byte	0x1dd
 3886 07d4 0A070000 		.4byte	0x70a
 3887 07d8 03       		.uleb128 0x3
 3888 07d9 91       		.byte	0x91
 3889 07da B47F     		.sleb128 -76
 3890 07dc 1C       		.uleb128 0x1c
 3891 07dd 85070000 		.4byte	.LASF119
 3892 07e1 01       		.byte	0x1
 3893 07e2 E001     		.2byte	0x1e0
 3894 07e4 35040000 		.4byte	0x435
 3895 07e8 03       		.uleb128 0x3
 3896 07e9 91       		.byte	0x91
 3897 07ea D07E     		.sleb128 -176
 3898 07ec 1C       		.uleb128 0x1c
 3899 07ed 78020000 		.4byte	.LASF59
 3900 07f1 01       		.byte	0x1
 3901 07f2 F501     		.2byte	0x1f5
 3902 07f4 7E000000 		.4byte	0x7e
 3903 07f8 03       		.uleb128 0x3
 3904 07f9 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 89


 3905 07fa CC7E     		.sleb128 -180
 3906 07fc 1C       		.uleb128 0x1c
 3907 07fd CA050000 		.4byte	.LASF60
 3908 0801 01       		.byte	0x1
 3909 0802 F501     		.2byte	0x1f5
 3910 0804 7E000000 		.4byte	0x7e
 3911 0808 03       		.uleb128 0x3
 3912 0809 91       		.byte	0x91
 3913 080a C87E     		.sleb128 -184
 3914 080c 1C       		.uleb128 0x1c
 3915 080d 4E010000 		.4byte	.LASF120
 3916 0811 01       		.byte	0x1
 3917 0812 F501     		.2byte	0x1f5
 3918 0814 7E000000 		.4byte	0x7e
 3919 0818 03       		.uleb128 0x3
 3920 0819 91       		.byte	0x91
 3921 081a C47E     		.sleb128 -188
 3922 081c 1C       		.uleb128 0x1c
 3923 081d D0040000 		.4byte	.LASF121
 3924 0821 01       		.byte	0x1
 3925 0822 F501     		.2byte	0x1f5
 3926 0824 7E000000 		.4byte	0x7e
 3927 0828 03       		.uleb128 0x3
 3928 0829 91       		.byte	0x91
 3929 082a C07E     		.sleb128 -192
 3930 082c 1C       		.uleb128 0x1c
 3931 082d 23080000 		.4byte	.LASF122
 3932 0831 01       		.byte	0x1
 3933 0832 F501     		.2byte	0x1f5
 3934 0834 7E000000 		.4byte	0x7e
 3935 0838 03       		.uleb128 0x3
 3936 0839 91       		.byte	0x91
 3937 083a BC7E     		.sleb128 -196
 3938 083c 00       		.byte	0
 3939 083d 1F       		.uleb128 0x1f
 3940 083e 82020000 		.4byte	.LASF123
 3941 0842 01       		.byte	0x1
 3942 0843 1D02     		.2byte	0x21d
 3943 0845 00000000 		.4byte	.LFB82
 3944 0849 68010000 		.4byte	.LFE82-.LFB82
 3945 084d 01       		.uleb128 0x1
 3946 084e 9C       		.byte	0x9c
 3947 084f 6D080000 		.4byte	0x86d
 3948 0853 14       		.uleb128 0x14
 3949 0854 DA000000 		.4byte	.LBB9
 3950 0858 38000000 		.4byte	.LBE9-.LBB9
 3951 085c 1C       		.uleb128 0x1c
 3952 085d E7060000 		.4byte	.LASF124
 3953 0861 01       		.byte	0x1
 3954 0862 4B02     		.2byte	0x24b
 3955 0864 0A070000 		.4byte	0x70a
 3956 0868 02       		.uleb128 0x2
 3957 0869 91       		.byte	0x91
 3958 086a 6C       		.sleb128 -20
 3959 086b 00       		.byte	0
 3960 086c 00       		.byte	0
 3961 086d 1B       		.uleb128 0x1b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 90


 3962 086e E1020000 		.4byte	.LASF125
 3963 0872 01       		.byte	0x1
 3964 0873 5E02     		.2byte	0x25e
 3965 0875 57000000 		.4byte	0x57
 3966 0879 00000000 		.4byte	.LFB83
 3967 087d 44010000 		.4byte	.LFE83-.LFB83
 3968 0881 01       		.uleb128 0x1
 3969 0882 9C       		.byte	0x9c
 3970 0883 29090000 		.4byte	0x929
 3971 0887 1C       		.uleb128 0x1c
 3972 0888 61040000 		.4byte	.LASF126
 3973 088c 01       		.byte	0x1
 3974 088d 6902     		.2byte	0x269
 3975 088f 57000000 		.4byte	0x57
 3976 0893 02       		.uleb128 0x2
 3977 0894 91       		.byte	0x91
 3978 0895 74       		.sleb128 -12
 3979 0896 14       		.uleb128 0x14
 3980 0897 30000000 		.4byte	.LBB10
 3981 089b DE000000 		.4byte	.LBE10-.LBB10
 3982 089f 1C       		.uleb128 0x1c
 3983 08a0 A6020000 		.4byte	.LASF97
 3984 08a4 01       		.byte	0x1
 3985 08a5 6E02     		.2byte	0x26e
 3986 08a7 29090000 		.4byte	0x929
 3987 08ab 02       		.uleb128 0x2
 3988 08ac 91       		.byte	0x91
 3989 08ad 54       		.sleb128 -44
 3990 08ae 1A       		.uleb128 0x1a
 3991 08af 7400     		.ascii	"t\000"
 3992 08b1 01       		.byte	0x1
 3993 08b2 7402     		.2byte	0x274
 3994 08b4 2D010000 		.4byte	0x12d
 3995 08b8 03       		.uleb128 0x3
 3996 08b9 91       		.byte	0x91
 3997 08ba 947F     		.sleb128 -108
 3998 08bc 1C       		.uleb128 0x1c
 3999 08bd 1C020000 		.4byte	.LASF127
 4000 08c1 01       		.byte	0x1
 4001 08c2 7702     		.2byte	0x277
 4002 08c4 7E000000 		.4byte	0x7e
 4003 08c8 02       		.uleb128 0x2
 4004 08c9 91       		.byte	0x91
 4005 08ca 50       		.sleb128 -48
 4006 08cb 1C       		.uleb128 0x1c
 4007 08cc FE040000 		.4byte	.LASF128
 4008 08d0 01       		.byte	0x1
 4009 08d1 7702     		.2byte	0x277
 4010 08d3 7E000000 		.4byte	0x7e
 4011 08d7 02       		.uleb128 0x2
 4012 08d8 91       		.byte	0x91
 4013 08d9 4C       		.sleb128 -52
 4014 08da 1A       		.uleb128 0x1a
 4015 08db 64617900 		.ascii	"day\000"
 4016 08df 01       		.byte	0x1
 4017 08e0 7702     		.2byte	0x277
 4018 08e2 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 91


 4019 08e6 02       		.uleb128 0x2
 4020 08e7 91       		.byte	0x91
 4021 08e8 48       		.sleb128 -56
 4022 08e9 1C       		.uleb128 0x1c
 4023 08ea 86050000 		.4byte	.LASF129
 4024 08ee 01       		.byte	0x1
 4025 08ef 7702     		.2byte	0x277
 4026 08f1 7E000000 		.4byte	0x7e
 4027 08f5 02       		.uleb128 0x2
 4028 08f6 91       		.byte	0x91
 4029 08f7 44       		.sleb128 -60
 4030 08f8 1C       		.uleb128 0x1c
 4031 08f9 A4070000 		.4byte	.LASF130
 4032 08fd 01       		.byte	0x1
 4033 08fe 7702     		.2byte	0x277
 4034 0900 7E000000 		.4byte	0x7e
 4035 0904 02       		.uleb128 0x2
 4036 0905 91       		.byte	0x91
 4037 0906 40       		.sleb128 -64
 4038 0907 1C       		.uleb128 0x1c
 4039 0908 15020000 		.4byte	.LASF131
 4040 090c 01       		.byte	0x1
 4041 090d 7702     		.2byte	0x277
 4042 090f 7E000000 		.4byte	0x7e
 4043 0913 03       		.uleb128 0x3
 4044 0914 91       		.byte	0x91
 4045 0915 BC7F     		.sleb128 -68
 4046 0917 1C       		.uleb128 0x1c
 4047 0918 00000000 		.4byte	.LASF132
 4048 091c 01       		.byte	0x1
 4049 091d 7702     		.2byte	0x277
 4050 091f 7E000000 		.4byte	0x7e
 4051 0923 03       		.uleb128 0x3
 4052 0924 91       		.byte	0x91
 4053 0925 B87F     		.sleb128 -72
 4054 0927 00       		.byte	0
 4055 0928 00       		.byte	0
 4056 0929 08       		.uleb128 0x8
 4057 092a F7000000 		.4byte	0xf7
 4058 092e 39090000 		.4byte	0x939
 4059 0932 09       		.uleb128 0x9
 4060 0933 05010000 		.4byte	0x105
 4061 0937 1D       		.byte	0x1d
 4062 0938 00       		.byte	0
 4063 0939 21       		.uleb128 0x21
 4064 093a 46020000 		.4byte	.LASF133
 4065 093e 01       		.byte	0x1
 4066 093f 9702     		.2byte	0x297
 4067 0941 AD000000 		.4byte	0xad
 4068 0945 00000000 		.4byte	.LFB84
 4069 0949 14000000 		.4byte	.LFE84-.LFB84
 4070 094d 01       		.uleb128 0x1
 4071 094e 9C       		.byte	0x9c
 4072 094f 1D       		.uleb128 0x1d
 4073 0950 0B030000 		.4byte	.LASF134
 4074 0954 01       		.byte	0x1
 4075 0955 9C02     		.2byte	0x29c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 92


 4076 0957 00000000 		.4byte	.LFB85
 4077 095b 1A000000 		.4byte	.LFE85-.LFB85
 4078 095f 01       		.uleb128 0x1
 4079 0960 9C       		.byte	0x9c
 4080 0961 1D       		.uleb128 0x1d
 4081 0962 2A010000 		.4byte	.LASF135
 4082 0966 01       		.byte	0x1
 4083 0967 A902     		.2byte	0x2a9
 4084 0969 00000000 		.4byte	.LFB86
 4085 096d 2A000000 		.4byte	.LFE86-.LFB86
 4086 0971 01       		.uleb128 0x1
 4087 0972 9C       		.byte	0x9c
 4088 0973 1B       		.uleb128 0x1b
 4089 0974 38060000 		.4byte	.LASF136
 4090 0978 01       		.byte	0x1
 4091 0979 BC02     		.2byte	0x2bc
 4092 097b 37030000 		.4byte	0x337
 4093 097f 00000000 		.4byte	.LFB87
 4094 0983 7C020000 		.4byte	.LFE87-.LFB87
 4095 0987 01       		.uleb128 0x1
 4096 0988 9C       		.byte	0x9c
 4097 0989 1C0A0000 		.4byte	0xa1c
 4098 098d 1A       		.uleb128 0x1a
 4099 098e 67707300 		.ascii	"gps\000"
 4100 0992 01       		.byte	0x1
 4101 0993 BD02     		.2byte	0x2bd
 4102 0995 37030000 		.4byte	0x337
 4103 0999 02       		.uleb128 0x2
 4104 099a 91       		.byte	0x91
 4105 099b 4C       		.sleb128 -52
 4106 099c 1C       		.uleb128 0x1c
 4107 099d 70080000 		.4byte	.LASF137
 4108 09a1 01       		.byte	0x1
 4109 09a2 C902     		.2byte	0x2c9
 4110 09a4 57000000 		.4byte	0x57
 4111 09a8 02       		.uleb128 0x2
 4112 09a9 91       		.byte	0x91
 4113 09aa 68       		.sleb128 -24
 4114 09ab 1C       		.uleb128 0x1c
 4115 09ac 62070000 		.4byte	.LASF138
 4116 09b0 01       		.byte	0x1
 4117 09b1 F002     		.2byte	0x2f0
 4118 09b3 AD000000 		.4byte	0xad
 4119 09b7 02       		.uleb128 0x2
 4120 09b8 91       		.byte	0x91
 4121 09b9 67       		.sleb128 -25
 4122 09ba 1A       		.uleb128 0x1a
 4123 09bb 6C617400 		.ascii	"lat\000"
 4124 09bf 01       		.byte	0x1
 4125 09c0 FC02     		.2byte	0x2fc
 4126 09c2 E9000000 		.4byte	0xe9
 4127 09c6 02       		.uleb128 0x2
 4128 09c7 91       		.byte	0x91
 4129 09c8 48       		.sleb128 -56
 4130 09c9 1A       		.uleb128 0x1a
 4131 09ca 6C6F6E00 		.ascii	"lon\000"
 4132 09ce 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 93


 4133 09cf FD02     		.2byte	0x2fd
 4134 09d1 E9000000 		.4byte	0xe9
 4135 09d5 02       		.uleb128 0x2
 4136 09d6 91       		.byte	0x91
 4137 09d7 44       		.sleb128 -60
 4138 09d8 1A       		.uleb128 0x1a
 4139 09d9 616C7400 		.ascii	"alt\000"
 4140 09dd 01       		.byte	0x1
 4141 09de FE02     		.2byte	0x2fe
 4142 09e0 E9000000 		.4byte	0xe9
 4143 09e4 02       		.uleb128 0x2
 4144 09e5 91       		.byte	0x91
 4145 09e6 40       		.sleb128 -64
 4146 09e7 1A       		.uleb128 0x1a
 4147 09e8 733100   		.ascii	"s1\000"
 4148 09eb 01       		.byte	0x1
 4149 09ec 0203     		.2byte	0x302
 4150 09ee 0C010000 		.4byte	0x10c
 4151 09f2 02       		.uleb128 0x2
 4152 09f3 91       		.byte	0x91
 4153 09f4 60       		.sleb128 -32
 4154 09f5 1C       		.uleb128 0x1c
 4155 09f6 6B050000 		.4byte	.LASF110
 4156 09fa 01       		.byte	0x1
 4157 09fb 0503     		.2byte	0x305
 4158 09fd 7E000000 		.4byte	0x7e
 4159 0a01 02       		.uleb128 0x2
 4160 0a02 91       		.byte	0x91
 4161 0a03 5C       		.sleb128 -36
 4162 0a04 14       		.uleb128 0x14
 4163 0a05 B4000000 		.4byte	.LBB11
 4164 0a09 38000000 		.4byte	.LBE11-.LBB11
 4165 0a0d 1A       		.uleb128 0x1a
 4166 0a0e 6900     		.ascii	"i\000"
 4167 0a10 01       		.byte	0x1
 4168 0a11 F102     		.2byte	0x2f1
 4169 0a13 B9000000 		.4byte	0xb9
 4170 0a17 02       		.uleb128 0x2
 4171 0a18 91       		.byte	0x91
 4172 0a19 6E       		.sleb128 -18
 4173 0a1a 00       		.byte	0
 4174 0a1b 00       		.byte	0
 4175 0a1c 22       		.uleb128 0x22
 4176 0a1d 78010000 		.4byte	.LASF139
 4177 0a21 0A       		.byte	0xa
 4178 0a22 1207     		.2byte	0x712
 4179 0a24 280A0000 		.4byte	0xa28
 4180 0a28 0F       		.uleb128 0xf
 4181 0a29 97000000 		.4byte	0x97
 4182 0a2d 23       		.uleb128 0x23
 4183 0a2e 60000000 		.4byte	.LASF140
 4184 0a32 07       		.byte	0x7
 4185 0a33 11       		.byte	0x11
 4186 0a34 87030000 		.4byte	0x387
 4187 0a38 05       		.uleb128 0x5
 4188 0a39 03       		.byte	0x3
 4189 0a3a 00000000 		.4byte	buffer_overflow
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 94


 4190 0a3e 23       		.uleb128 0x23
 4191 0a3f DC040000 		.4byte	.LASF141
 4192 0a43 07       		.byte	0x7
 4193 0a44 22       		.byte	0x22
 4194 0a45 B9000000 		.4byte	0xb9
 4195 0a49 05       		.uleb128 0x5
 4196 0a4a 03       		.byte	0x3
 4197 0a4b 00000000 		.4byte	dataPointsInStack
 4198 0a4f 23       		.uleb128 0x23
 4199 0a50 F3070000 		.4byte	.LASF142
 4200 0a54 07       		.byte	0x7
 4201 0a55 23       		.byte	0x23
 4202 0a56 B9000000 		.4byte	0xb9
 4203 0a5a 05       		.uleb128 0x5
 4204 0a5b 03       		.byte	0x3
 4205 0a5c 00000000 		.4byte	dataPointsInStackDesired
 4206 0a60 08       		.uleb128 0x8
 4207 0a61 3B020000 		.4byte	0x23b
 4208 0a65 700A0000 		.4byte	0xa70
 4209 0a69 09       		.uleb128 0x9
 4210 0a6a 05010000 		.4byte	0x105
 4211 0a6e 95       		.byte	0x95
 4212 0a6f 00       		.byte	0
 4213 0a70 23       		.uleb128 0x23
 4214 0a71 D9030000 		.4byte	.LASF143
 4215 0a75 07       		.byte	0x7
 4216 0a76 24       		.byte	0x24
 4217 0a77 600A0000 		.4byte	0xa60
 4218 0a7b 05       		.uleb128 0x5
 4219 0a7c 03       		.byte	0x3
 4220 0a7d 00000000 		.4byte	data
 4221 0a81 23       		.uleb128 0x23
 4222 0a82 5A010000 		.4byte	.LASF144
 4223 0a86 08       		.byte	0x8
 4224 0a87 1F       		.byte	0x1f
 4225 0a88 AD000000 		.4byte	0xad
 4226 0a8c 05       		.uleb128 0x5
 4227 0a8d 03       		.byte	0x3
 4228 0a8e 00000000 		.4byte	modem_state
 4229 0a92 23       		.uleb128 0x23
 4230 0a93 4B070000 		.4byte	.LASF145
 4231 0a97 08       		.byte	0x8
 4232 0a98 62       		.byte	0x62
 4233 0a99 DD000000 		.4byte	0xdd
 4234 0a9d 05       		.uleb128 0x5
 4235 0a9e 03       		.byte	0x3
 4236 0a9f 00000000 		.4byte	modem_start_time_stamp
 4237 0aa3 23       		.uleb128 0x23
 4238 0aa4 EF030000 		.4byte	.LASF71
 4239 0aa8 08       		.byte	0x8
 4240 0aa9 63       		.byte	0x63
 4241 0aaa 73020000 		.4byte	0x273
 4242 0aae 05       		.uleb128 0x5
 4243 0aaf 03       		.byte	0x3
 4244 0ab0 00000000 		.4byte	modem_info
 4245 0ab4 23       		.uleb128 0x23
 4246 0ab5 85010000 		.4byte	.LASF146
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 95


 4247 0ab9 08       		.byte	0x8
 4248 0aba 64       		.byte	0x64
 4249 0abb E7020000 		.4byte	0x2e7
 4250 0abf 05       		.uleb128 0x5
 4251 0ac0 03       		.byte	0x3
 4252 0ac1 00000000 		.4byte	modem_stats
 4253 0ac5 23       		.uleb128 0x23
 4254 0ac6 71050000 		.4byte	.LASF147
 4255 0aca 08       		.byte	0x8
 4256 0acb 65       		.byte	0x65
 4257 0acc 8E030000 		.4byte	0x38e
 4258 0ad0 05       		.uleb128 0x5
 4259 0ad1 03       		.byte	0x3
 4260 0ad2 00000000 		.4byte	updatable_parameters
 4261 0ad6 23       		.uleb128 0x23
 4262 0ad7 8C040000 		.4byte	.LASF148
 4263 0adb 0B       		.byte	0xb
 4264 0adc 12       		.byte	0x12
 4265 0add 35040000 		.4byte	0x435
 4266 0ae1 05       		.uleb128 0x5
 4267 0ae2 03       		.byte	0x3
 4268 0ae3 00000000 		.4byte	inbox
 4269 0ae7 08       		.uleb128 0x8
 4270 0ae8 F7000000 		.4byte	0xf7
 4271 0aec F80A0000 		.4byte	0xaf8
 4272 0af0 24       		.uleb128 0x24
 4273 0af1 05010000 		.4byte	0x105
 4274 0af5 0F27     		.2byte	0x270f
 4275 0af7 00       		.byte	0
 4276 0af8 23       		.uleb128 0x23
 4277 0af9 7A080000 		.4byte	.LASF149
 4278 0afd 09       		.byte	0x9
 4279 0afe 18       		.byte	0x18
 4280 0aff E70A0000 		.4byte	0xae7
 4281 0b03 05       		.uleb128 0x5
 4282 0b04 03       		.byte	0x3
 4283 0b05 00000000 		.4byte	http_request
 4284 0b09 23       		.uleb128 0x23
 4285 0b0a F0010000 		.4byte	.LASF150
 4286 0b0e 09       		.byte	0x9
 4287 0b0f 19       		.byte	0x19
 4288 0b10 E70A0000 		.4byte	0xae7
 4289 0b14 05       		.uleb128 0x5
 4290 0b15 03       		.byte	0x3
 4291 0b16 00000000 		.4byte	http_body
 4292 0b1a 08       		.uleb128 0x8
 4293 0b1b F7000000 		.4byte	0xf7
 4294 0b1f 2A0B0000 		.4byte	0xb2a
 4295 0b23 09       		.uleb128 0x9
 4296 0b24 05010000 		.4byte	0x105
 4297 0b28 C7       		.byte	0xc7
 4298 0b29 00       		.byte	0
 4299 0b2a 23       		.uleb128 0x23
 4300 0b2b F5060000 		.4byte	.LASF151
 4301 0b2f 09       		.byte	0x9
 4302 0b30 1A       		.byte	0x1a
 4303 0b31 1A0B0000 		.4byte	0xb1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 96


 4304 0b35 05       		.uleb128 0x5
 4305 0b36 03       		.byte	0x3
 4306 0b37 00000000 		.4byte	http_route
 4307 0b3b 23       		.uleb128 0x23
 4308 0b3c 59060000 		.4byte	.LASF152
 4309 0b40 09       		.byte	0x9
 4310 0b41 41       		.byte	0x41
 4311 0b42 09040000 		.4byte	0x409
 4312 0b46 05       		.uleb128 0x5
 4313 0b47 03       		.byte	0x3
 4314 0b48 00000000 		.4byte	system_info
 4315 0b4c 23       		.uleb128 0x23
 4316 0b4d 02060000 		.4byte	.LASF153
 4317 0b51 09       		.byte	0x9
 4318 0b52 53       		.byte	0x53
 4319 0b53 45040000 		.4byte	0x445
 4320 0b57 05       		.uleb128 0x5
 4321 0b58 03       		.byte	0x3
 4322 0b59 00000000 		.4byte	system_settings
 4323 0b5d 23       		.uleb128 0x23
 4324 0b5e 6B010000 		.4byte	.LASF154
 4325 0b62 09       		.byte	0x9
 4326 0b63 6F       		.byte	0x6f
 4327 0b64 D2030000 		.4byte	0x3d2
 4328 0b68 05       		.uleb128 0x5
 4329 0b69 03       		.byte	0x3
 4330 0b6a 00000000 		.4byte	alarmMeasure
 4331 0b6e 23       		.uleb128 0x23
 4332 0b6f BF010000 		.4byte	.LASF155
 4333 0b73 09       		.byte	0x9
 4334 0b74 70       		.byte	0x70
 4335 0b75 AD000000 		.4byte	0xad
 4336 0b79 05       		.uleb128 0x5
 4337 0b7a 03       		.byte	0x3
 4338 0b7b 00000000 		.4byte	timeToMeasure
 4339 0b7f 23       		.uleb128 0x23
 4340 0b80 4C030000 		.4byte	.LASF156
 4341 0b84 09       		.byte	0x9
 4342 0b85 71       		.byte	0x71
 4343 0b86 D2030000 		.4byte	0x3d2
 4344 0b8a 05       		.uleb128 0x5
 4345 0b8b 03       		.byte	0x3
 4346 0b8c 00000000 		.4byte	alarmSync
 4347 0b90 23       		.uleb128 0x23
 4348 0b91 E5010000 		.4byte	.LASF157
 4349 0b95 09       		.byte	0x9
 4350 0b96 72       		.byte	0x72
 4351 0b97 AD000000 		.4byte	0xad
 4352 0b9b 05       		.uleb128 0x5
 4353 0b9c 03       		.byte	0x3
 4354 0b9d 00000000 		.4byte	timeToSync
 4355 0ba1 23       		.uleb128 0x23
 4356 0ba2 49050000 		.4byte	.LASF158
 4357 0ba6 09       		.byte	0x9
 4358 0ba7 73       		.byte	0x73
 4359 0ba8 AD000000 		.4byte	0xad
 4360 0bac 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 97


 4361 0bad 03       		.byte	0x3
 4362 0bae 00000000 		.4byte	timeToSycnRemoteParams
 4363 0bb2 25       		.uleb128 0x25
 4364 0bb3 68657900 		.ascii	"hey\000"
 4365 0bb7 09       		.byte	0x9
 4366 0bb8 74       		.byte	0x74
 4367 0bb9 AD000000 		.4byte	0xad
 4368 0bbd 05       		.uleb128 0x5
 4369 0bbe 03       		.byte	0x3
 4370 0bbf 00000000 		.4byte	hey
 4371 0bc3 23       		.uleb128 0x23
 4372 0bc4 76040000 		.4byte	.LASF159
 4373 0bc8 09       		.byte	0x9
 4374 0bc9 77       		.byte	0x77
 4375 0bca D2030000 		.4byte	0x3d2
 4376 0bce 05       		.uleb128 0x5
 4377 0bcf 03       		.byte	0x3
 4378 0bd0 00000000 		.4byte	alarmAppLED
 4379 0bd4 23       		.uleb128 0x23
 4380 0bd5 65020000 		.4byte	.LASF160
 4381 0bd9 09       		.byte	0x9
 4382 0bda 78       		.byte	0x78
 4383 0bdb AD000000 		.4byte	0xad
 4384 0bdf 05       		.uleb128 0x5
 4385 0be0 03       		.byte	0x3
 4386 0be1 00000000 		.4byte	timeToAppLED
 4387 0be5 08       		.uleb128 0x8
 4388 0be6 F7000000 		.4byte	0xf7
 4389 0bea F60B0000 		.4byte	0xbf6
 4390 0bee 24       		.uleb128 0x24
 4391 0bef 05010000 		.4byte	0x105
 4392 0bf3 FF03     		.2byte	0x3ff
 4393 0bf5 00       		.byte	0
 4394 0bf6 23       		.uleb128 0x23
 4395 0bf7 21050000 		.4byte	.LASF161
 4396 0bfb 01       		.byte	0x1
 4397 0bfc 05       		.byte	0x5
 4398 0bfd E50B0000 		.4byte	0xbe5
 4399 0c01 05       		.uleb128 0x5
 4400 0c02 03       		.byte	0x3
 4401 0c03 00000000 		.4byte	uart_received_string
 4402 0c07 23       		.uleb128 0x23
 4403 0c08 13070000 		.4byte	.LASF162
 4404 0c0c 01       		.byte	0x1
 4405 0c0d 06       		.byte	0x6
 4406 0c0e D1000000 		.4byte	0xd1
 4407 0c12 05       		.uleb128 0x5
 4408 0c13 03       		.byte	0x3
 4409 0c14 00000000 		.4byte	uart_string_index
 4410 0c18 00       		.byte	0
 4411              		.section	.debug_abbrev,"",%progbits
 4412              	.Ldebug_abbrev0:
 4413 0000 01       		.uleb128 0x1
 4414 0001 11       		.uleb128 0x11
 4415 0002 01       		.byte	0x1
 4416 0003 25       		.uleb128 0x25
 4417 0004 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 98


 4418 0005 13       		.uleb128 0x13
 4419 0006 0B       		.uleb128 0xb
 4420 0007 03       		.uleb128 0x3
 4421 0008 0E       		.uleb128 0xe
 4422 0009 1B       		.uleb128 0x1b
 4423 000a 0E       		.uleb128 0xe
 4424 000b 55       		.uleb128 0x55
 4425 000c 17       		.uleb128 0x17
 4426 000d 11       		.uleb128 0x11
 4427 000e 01       		.uleb128 0x1
 4428 000f 10       		.uleb128 0x10
 4429 0010 17       		.uleb128 0x17
 4430 0011 00       		.byte	0
 4431 0012 00       		.byte	0
 4432 0013 02       		.uleb128 0x2
 4433 0014 24       		.uleb128 0x24
 4434 0015 00       		.byte	0
 4435 0016 0B       		.uleb128 0xb
 4436 0017 0B       		.uleb128 0xb
 4437 0018 3E       		.uleb128 0x3e
 4438 0019 0B       		.uleb128 0xb
 4439 001a 03       		.uleb128 0x3
 4440 001b 0E       		.uleb128 0xe
 4441 001c 00       		.byte	0
 4442 001d 00       		.byte	0
 4443 001e 03       		.uleb128 0x3
 4444 001f 16       		.uleb128 0x16
 4445 0020 00       		.byte	0
 4446 0021 03       		.uleb128 0x3
 4447 0022 0E       		.uleb128 0xe
 4448 0023 3A       		.uleb128 0x3a
 4449 0024 0B       		.uleb128 0xb
 4450 0025 3B       		.uleb128 0x3b
 4451 0026 0B       		.uleb128 0xb
 4452 0027 49       		.uleb128 0x49
 4453 0028 13       		.uleb128 0x13
 4454 0029 00       		.byte	0
 4455 002a 00       		.byte	0
 4456 002b 04       		.uleb128 0x4
 4457 002c 24       		.uleb128 0x24
 4458 002d 00       		.byte	0
 4459 002e 0B       		.uleb128 0xb
 4460 002f 0B       		.uleb128 0xb
 4461 0030 3E       		.uleb128 0x3e
 4462 0031 0B       		.uleb128 0xb
 4463 0032 03       		.uleb128 0x3
 4464 0033 08       		.uleb128 0x8
 4465 0034 00       		.byte	0
 4466 0035 00       		.byte	0
 4467 0036 05       		.uleb128 0x5
 4468 0037 16       		.uleb128 0x16
 4469 0038 00       		.byte	0
 4470 0039 03       		.uleb128 0x3
 4471 003a 0E       		.uleb128 0xe
 4472 003b 3A       		.uleb128 0x3a
 4473 003c 0B       		.uleb128 0xb
 4474 003d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 99


 4475 003e 05       		.uleb128 0x5
 4476 003f 49       		.uleb128 0x49
 4477 0040 13       		.uleb128 0x13
 4478 0041 00       		.byte	0
 4479 0042 00       		.byte	0
 4480 0043 06       		.uleb128 0x6
 4481 0044 0F       		.uleb128 0xf
 4482 0045 00       		.byte	0
 4483 0046 0B       		.uleb128 0xb
 4484 0047 0B       		.uleb128 0xb
 4485 0048 49       		.uleb128 0x49
 4486 0049 13       		.uleb128 0x13
 4487 004a 00       		.byte	0
 4488 004b 00       		.byte	0
 4489 004c 07       		.uleb128 0x7
 4490 004d 26       		.uleb128 0x26
 4491 004e 00       		.byte	0
 4492 004f 49       		.uleb128 0x49
 4493 0050 13       		.uleb128 0x13
 4494 0051 00       		.byte	0
 4495 0052 00       		.byte	0
 4496 0053 08       		.uleb128 0x8
 4497 0054 01       		.uleb128 0x1
 4498 0055 01       		.byte	0x1
 4499 0056 49       		.uleb128 0x49
 4500 0057 13       		.uleb128 0x13
 4501 0058 01       		.uleb128 0x1
 4502 0059 13       		.uleb128 0x13
 4503 005a 00       		.byte	0
 4504 005b 00       		.byte	0
 4505 005c 09       		.uleb128 0x9
 4506 005d 21       		.uleb128 0x21
 4507 005e 00       		.byte	0
 4508 005f 49       		.uleb128 0x49
 4509 0060 13       		.uleb128 0x13
 4510 0061 2F       		.uleb128 0x2f
 4511 0062 0B       		.uleb128 0xb
 4512 0063 00       		.byte	0
 4513 0064 00       		.byte	0
 4514 0065 0A       		.uleb128 0xa
 4515 0066 13       		.uleb128 0x13
 4516 0067 01       		.byte	0x1
 4517 0068 03       		.uleb128 0x3
 4518 0069 08       		.uleb128 0x8
 4519 006a 0B       		.uleb128 0xb
 4520 006b 0B       		.uleb128 0xb
 4521 006c 3A       		.uleb128 0x3a
 4522 006d 0B       		.uleb128 0xb
 4523 006e 3B       		.uleb128 0x3b
 4524 006f 0B       		.uleb128 0xb
 4525 0070 01       		.uleb128 0x1
 4526 0071 13       		.uleb128 0x13
 4527 0072 00       		.byte	0
 4528 0073 00       		.byte	0
 4529 0074 0B       		.uleb128 0xb
 4530 0075 0D       		.uleb128 0xd
 4531 0076 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 100


 4532 0077 03       		.uleb128 0x3
 4533 0078 0E       		.uleb128 0xe
 4534 0079 3A       		.uleb128 0x3a
 4535 007a 0B       		.uleb128 0xb
 4536 007b 3B       		.uleb128 0x3b
 4537 007c 0B       		.uleb128 0xb
 4538 007d 49       		.uleb128 0x49
 4539 007e 13       		.uleb128 0x13
 4540 007f 38       		.uleb128 0x38
 4541 0080 0B       		.uleb128 0xb
 4542 0081 00       		.byte	0
 4543 0082 00       		.byte	0
 4544 0083 0C       		.uleb128 0xc
 4545 0084 13       		.uleb128 0x13
 4546 0085 01       		.byte	0x1
 4547 0086 0B       		.uleb128 0xb
 4548 0087 05       		.uleb128 0x5
 4549 0088 3A       		.uleb128 0x3a
 4550 0089 0B       		.uleb128 0xb
 4551 008a 3B       		.uleb128 0x3b
 4552 008b 0B       		.uleb128 0xb
 4553 008c 01       		.uleb128 0x1
 4554 008d 13       		.uleb128 0x13
 4555 008e 00       		.byte	0
 4556 008f 00       		.byte	0
 4557 0090 0D       		.uleb128 0xd
 4558 0091 13       		.uleb128 0x13
 4559 0092 01       		.byte	0x1
 4560 0093 0B       		.uleb128 0xb
 4561 0094 0B       		.uleb128 0xb
 4562 0095 3A       		.uleb128 0x3a
 4563 0096 0B       		.uleb128 0xb
 4564 0097 3B       		.uleb128 0x3b
 4565 0098 0B       		.uleb128 0xb
 4566 0099 01       		.uleb128 0x1
 4567 009a 13       		.uleb128 0x13
 4568 009b 00       		.byte	0
 4569 009c 00       		.byte	0
 4570 009d 0E       		.uleb128 0xe
 4571 009e 0D       		.uleb128 0xd
 4572 009f 00       		.byte	0
 4573 00a0 03       		.uleb128 0x3
 4574 00a1 08       		.uleb128 0x8
 4575 00a2 3A       		.uleb128 0x3a
 4576 00a3 0B       		.uleb128 0xb
 4577 00a4 3B       		.uleb128 0x3b
 4578 00a5 0B       		.uleb128 0xb
 4579 00a6 49       		.uleb128 0x49
 4580 00a7 13       		.uleb128 0x13
 4581 00a8 38       		.uleb128 0x38
 4582 00a9 0B       		.uleb128 0xb
 4583 00aa 00       		.byte	0
 4584 00ab 00       		.byte	0
 4585 00ac 0F       		.uleb128 0xf
 4586 00ad 35       		.uleb128 0x35
 4587 00ae 00       		.byte	0
 4588 00af 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 101


 4589 00b0 13       		.uleb128 0x13
 4590 00b1 00       		.byte	0
 4591 00b2 00       		.byte	0
 4592 00b3 10       		.uleb128 0x10
 4593 00b4 2E       		.uleb128 0x2e
 4594 00b5 00       		.byte	0
 4595 00b6 3F       		.uleb128 0x3f
 4596 00b7 19       		.uleb128 0x19
 4597 00b8 03       		.uleb128 0x3
 4598 00b9 0E       		.uleb128 0xe
 4599 00ba 3A       		.uleb128 0x3a
 4600 00bb 0B       		.uleb128 0xb
 4601 00bc 3B       		.uleb128 0x3b
 4602 00bd 0B       		.uleb128 0xb
 4603 00be 27       		.uleb128 0x27
 4604 00bf 19       		.uleb128 0x19
 4605 00c0 11       		.uleb128 0x11
 4606 00c1 01       		.uleb128 0x1
 4607 00c2 12       		.uleb128 0x12
 4608 00c3 06       		.uleb128 0x6
 4609 00c4 40       		.uleb128 0x40
 4610 00c5 18       		.uleb128 0x18
 4611 00c6 9642     		.uleb128 0x2116
 4612 00c8 19       		.uleb128 0x19
 4613 00c9 00       		.byte	0
 4614 00ca 00       		.byte	0
 4615 00cb 11       		.uleb128 0x11
 4616 00cc 2E       		.uleb128 0x2e
 4617 00cd 00       		.byte	0
 4618 00ce 3F       		.uleb128 0x3f
 4619 00cf 19       		.uleb128 0x19
 4620 00d0 03       		.uleb128 0x3
 4621 00d1 0E       		.uleb128 0xe
 4622 00d2 3A       		.uleb128 0x3a
 4623 00d3 0B       		.uleb128 0xb
 4624 00d4 3B       		.uleb128 0x3b
 4625 00d5 0B       		.uleb128 0xb
 4626 00d6 11       		.uleb128 0x11
 4627 00d7 01       		.uleb128 0x1
 4628 00d8 12       		.uleb128 0x12
 4629 00d9 06       		.uleb128 0x6
 4630 00da 40       		.uleb128 0x40
 4631 00db 18       		.uleb128 0x18
 4632 00dc 9642     		.uleb128 0x2116
 4633 00de 19       		.uleb128 0x19
 4634 00df 00       		.byte	0
 4635 00e0 00       		.byte	0
 4636 00e1 12       		.uleb128 0x12
 4637 00e2 2E       		.uleb128 0x2e
 4638 00e3 01       		.byte	0x1
 4639 00e4 3F       		.uleb128 0x3f
 4640 00e5 19       		.uleb128 0x19
 4641 00e6 03       		.uleb128 0x3
 4642 00e7 0E       		.uleb128 0xe
 4643 00e8 3A       		.uleb128 0x3a
 4644 00e9 0B       		.uleb128 0xb
 4645 00ea 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 102


 4646 00eb 0B       		.uleb128 0xb
 4647 00ec 49       		.uleb128 0x49
 4648 00ed 13       		.uleb128 0x13
 4649 00ee 11       		.uleb128 0x11
 4650 00ef 01       		.uleb128 0x1
 4651 00f0 12       		.uleb128 0x12
 4652 00f1 06       		.uleb128 0x6
 4653 00f2 40       		.uleb128 0x40
 4654 00f3 18       		.uleb128 0x18
 4655 00f4 9642     		.uleb128 0x2116
 4656 00f6 19       		.uleb128 0x19
 4657 00f7 01       		.uleb128 0x1
 4658 00f8 13       		.uleb128 0x13
 4659 00f9 00       		.byte	0
 4660 00fa 00       		.byte	0
 4661 00fb 13       		.uleb128 0x13
 4662 00fc 34       		.uleb128 0x34
 4663 00fd 00       		.byte	0
 4664 00fe 03       		.uleb128 0x3
 4665 00ff 0E       		.uleb128 0xe
 4666 0100 3A       		.uleb128 0x3a
 4667 0101 0B       		.uleb128 0xb
 4668 0102 3B       		.uleb128 0x3b
 4669 0103 0B       		.uleb128 0xb
 4670 0104 49       		.uleb128 0x49
 4671 0105 13       		.uleb128 0x13
 4672 0106 02       		.uleb128 0x2
 4673 0107 18       		.uleb128 0x18
 4674 0108 00       		.byte	0
 4675 0109 00       		.byte	0
 4676 010a 14       		.uleb128 0x14
 4677 010b 0B       		.uleb128 0xb
 4678 010c 01       		.byte	0x1
 4679 010d 11       		.uleb128 0x11
 4680 010e 01       		.uleb128 0x1
 4681 010f 12       		.uleb128 0x12
 4682 0110 06       		.uleb128 0x6
 4683 0111 00       		.byte	0
 4684 0112 00       		.byte	0
 4685 0113 15       		.uleb128 0x15
 4686 0114 2E       		.uleb128 0x2e
 4687 0115 01       		.byte	0x1
 4688 0116 3F       		.uleb128 0x3f
 4689 0117 19       		.uleb128 0x19
 4690 0118 03       		.uleb128 0x3
 4691 0119 0E       		.uleb128 0xe
 4692 011a 3A       		.uleb128 0x3a
 4693 011b 0B       		.uleb128 0xb
 4694 011c 3B       		.uleb128 0x3b
 4695 011d 0B       		.uleb128 0xb
 4696 011e 27       		.uleb128 0x27
 4697 011f 19       		.uleb128 0x19
 4698 0120 49       		.uleb128 0x49
 4699 0121 13       		.uleb128 0x13
 4700 0122 11       		.uleb128 0x11
 4701 0123 01       		.uleb128 0x1
 4702 0124 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 103


 4703 0125 06       		.uleb128 0x6
 4704 0126 40       		.uleb128 0x40
 4705 0127 18       		.uleb128 0x18
 4706 0128 9642     		.uleb128 0x2116
 4707 012a 19       		.uleb128 0x19
 4708 012b 01       		.uleb128 0x1
 4709 012c 13       		.uleb128 0x13
 4710 012d 00       		.byte	0
 4711 012e 00       		.byte	0
 4712 012f 16       		.uleb128 0x16
 4713 0130 05       		.uleb128 0x5
 4714 0131 00       		.byte	0
 4715 0132 03       		.uleb128 0x3
 4716 0133 0E       		.uleb128 0xe
 4717 0134 3A       		.uleb128 0x3a
 4718 0135 0B       		.uleb128 0xb
 4719 0136 3B       		.uleb128 0x3b
 4720 0137 0B       		.uleb128 0xb
 4721 0138 49       		.uleb128 0x49
 4722 0139 13       		.uleb128 0x13
 4723 013a 02       		.uleb128 0x2
 4724 013b 18       		.uleb128 0x18
 4725 013c 00       		.byte	0
 4726 013d 00       		.byte	0
 4727 013e 17       		.uleb128 0x17
 4728 013f 34       		.uleb128 0x34
 4729 0140 00       		.byte	0
 4730 0141 03       		.uleb128 0x3
 4731 0142 08       		.uleb128 0x8
 4732 0143 3A       		.uleb128 0x3a
 4733 0144 0B       		.uleb128 0xb
 4734 0145 3B       		.uleb128 0x3b
 4735 0146 0B       		.uleb128 0xb
 4736 0147 49       		.uleb128 0x49
 4737 0148 13       		.uleb128 0x13
 4738 0149 02       		.uleb128 0x2
 4739 014a 18       		.uleb128 0x18
 4740 014b 00       		.byte	0
 4741 014c 00       		.byte	0
 4742 014d 18       		.uleb128 0x18
 4743 014e 2E       		.uleb128 0x2e
 4744 014f 01       		.byte	0x1
 4745 0150 3F       		.uleb128 0x3f
 4746 0151 19       		.uleb128 0x19
 4747 0152 03       		.uleb128 0x3
 4748 0153 0E       		.uleb128 0xe
 4749 0154 3A       		.uleb128 0x3a
 4750 0155 0B       		.uleb128 0xb
 4751 0156 3B       		.uleb128 0x3b
 4752 0157 05       		.uleb128 0x5
 4753 0158 27       		.uleb128 0x27
 4754 0159 19       		.uleb128 0x19
 4755 015a 49       		.uleb128 0x49
 4756 015b 13       		.uleb128 0x13
 4757 015c 11       		.uleb128 0x11
 4758 015d 01       		.uleb128 0x1
 4759 015e 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 104


 4760 015f 06       		.uleb128 0x6
 4761 0160 40       		.uleb128 0x40
 4762 0161 18       		.uleb128 0x18
 4763 0162 9642     		.uleb128 0x2116
 4764 0164 19       		.uleb128 0x19
 4765 0165 01       		.uleb128 0x1
 4766 0166 13       		.uleb128 0x13
 4767 0167 00       		.byte	0
 4768 0168 00       		.byte	0
 4769 0169 19       		.uleb128 0x19
 4770 016a 05       		.uleb128 0x5
 4771 016b 00       		.byte	0
 4772 016c 03       		.uleb128 0x3
 4773 016d 0E       		.uleb128 0xe
 4774 016e 3A       		.uleb128 0x3a
 4775 016f 0B       		.uleb128 0xb
 4776 0170 3B       		.uleb128 0x3b
 4777 0171 05       		.uleb128 0x5
 4778 0172 49       		.uleb128 0x49
 4779 0173 13       		.uleb128 0x13
 4780 0174 02       		.uleb128 0x2
 4781 0175 18       		.uleb128 0x18
 4782 0176 00       		.byte	0
 4783 0177 00       		.byte	0
 4784 0178 1A       		.uleb128 0x1a
 4785 0179 34       		.uleb128 0x34
 4786 017a 00       		.byte	0
 4787 017b 03       		.uleb128 0x3
 4788 017c 08       		.uleb128 0x8
 4789 017d 3A       		.uleb128 0x3a
 4790 017e 0B       		.uleb128 0xb
 4791 017f 3B       		.uleb128 0x3b
 4792 0180 05       		.uleb128 0x5
 4793 0181 49       		.uleb128 0x49
 4794 0182 13       		.uleb128 0x13
 4795 0183 02       		.uleb128 0x2
 4796 0184 18       		.uleb128 0x18
 4797 0185 00       		.byte	0
 4798 0186 00       		.byte	0
 4799 0187 1B       		.uleb128 0x1b
 4800 0188 2E       		.uleb128 0x2e
 4801 0189 01       		.byte	0x1
 4802 018a 3F       		.uleb128 0x3f
 4803 018b 19       		.uleb128 0x19
 4804 018c 03       		.uleb128 0x3
 4805 018d 0E       		.uleb128 0xe
 4806 018e 3A       		.uleb128 0x3a
 4807 018f 0B       		.uleb128 0xb
 4808 0190 3B       		.uleb128 0x3b
 4809 0191 05       		.uleb128 0x5
 4810 0192 49       		.uleb128 0x49
 4811 0193 13       		.uleb128 0x13
 4812 0194 11       		.uleb128 0x11
 4813 0195 01       		.uleb128 0x1
 4814 0196 12       		.uleb128 0x12
 4815 0197 06       		.uleb128 0x6
 4816 0198 40       		.uleb128 0x40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 105


 4817 0199 18       		.uleb128 0x18
 4818 019a 9642     		.uleb128 0x2116
 4819 019c 19       		.uleb128 0x19
 4820 019d 01       		.uleb128 0x1
 4821 019e 13       		.uleb128 0x13
 4822 019f 00       		.byte	0
 4823 01a0 00       		.byte	0
 4824 01a1 1C       		.uleb128 0x1c
 4825 01a2 34       		.uleb128 0x34
 4826 01a3 00       		.byte	0
 4827 01a4 03       		.uleb128 0x3
 4828 01a5 0E       		.uleb128 0xe
 4829 01a6 3A       		.uleb128 0x3a
 4830 01a7 0B       		.uleb128 0xb
 4831 01a8 3B       		.uleb128 0x3b
 4832 01a9 05       		.uleb128 0x5
 4833 01aa 49       		.uleb128 0x49
 4834 01ab 13       		.uleb128 0x13
 4835 01ac 02       		.uleb128 0x2
 4836 01ad 18       		.uleb128 0x18
 4837 01ae 00       		.byte	0
 4838 01af 00       		.byte	0
 4839 01b0 1D       		.uleb128 0x1d
 4840 01b1 2E       		.uleb128 0x2e
 4841 01b2 00       		.byte	0
 4842 01b3 3F       		.uleb128 0x3f
 4843 01b4 19       		.uleb128 0x19
 4844 01b5 03       		.uleb128 0x3
 4845 01b6 0E       		.uleb128 0xe
 4846 01b7 3A       		.uleb128 0x3a
 4847 01b8 0B       		.uleb128 0xb
 4848 01b9 3B       		.uleb128 0x3b
 4849 01ba 05       		.uleb128 0x5
 4850 01bb 11       		.uleb128 0x11
 4851 01bc 01       		.uleb128 0x1
 4852 01bd 12       		.uleb128 0x12
 4853 01be 06       		.uleb128 0x6
 4854 01bf 40       		.uleb128 0x40
 4855 01c0 18       		.uleb128 0x18
 4856 01c1 9642     		.uleb128 0x2116
 4857 01c3 19       		.uleb128 0x19
 4858 01c4 00       		.byte	0
 4859 01c5 00       		.byte	0
 4860 01c6 1E       		.uleb128 0x1e
 4861 01c7 2E       		.uleb128 0x2e
 4862 01c8 00       		.byte	0
 4863 01c9 3F       		.uleb128 0x3f
 4864 01ca 19       		.uleb128 0x19
 4865 01cb 03       		.uleb128 0x3
 4866 01cc 0E       		.uleb128 0xe
 4867 01cd 3A       		.uleb128 0x3a
 4868 01ce 0B       		.uleb128 0xb
 4869 01cf 3B       		.uleb128 0x3b
 4870 01d0 05       		.uleb128 0x5
 4871 01d1 49       		.uleb128 0x49
 4872 01d2 13       		.uleb128 0x13
 4873 01d3 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 106


 4874 01d4 01       		.uleb128 0x1
 4875 01d5 12       		.uleb128 0x12
 4876 01d6 06       		.uleb128 0x6
 4877 01d7 40       		.uleb128 0x40
 4878 01d8 18       		.uleb128 0x18
 4879 01d9 9642     		.uleb128 0x2116
 4880 01db 19       		.uleb128 0x19
 4881 01dc 00       		.byte	0
 4882 01dd 00       		.byte	0
 4883 01de 1F       		.uleb128 0x1f
 4884 01df 2E       		.uleb128 0x2e
 4885 01e0 01       		.byte	0x1
 4886 01e1 3F       		.uleb128 0x3f
 4887 01e2 19       		.uleb128 0x19
 4888 01e3 03       		.uleb128 0x3
 4889 01e4 0E       		.uleb128 0xe
 4890 01e5 3A       		.uleb128 0x3a
 4891 01e6 0B       		.uleb128 0xb
 4892 01e7 3B       		.uleb128 0x3b
 4893 01e8 05       		.uleb128 0x5
 4894 01e9 11       		.uleb128 0x11
 4895 01ea 01       		.uleb128 0x1
 4896 01eb 12       		.uleb128 0x12
 4897 01ec 06       		.uleb128 0x6
 4898 01ed 40       		.uleb128 0x40
 4899 01ee 18       		.uleb128 0x18
 4900 01ef 9642     		.uleb128 0x2116
 4901 01f1 19       		.uleb128 0x19
 4902 01f2 01       		.uleb128 0x1
 4903 01f3 13       		.uleb128 0x13
 4904 01f4 00       		.byte	0
 4905 01f5 00       		.byte	0
 4906 01f6 20       		.uleb128 0x20
 4907 01f7 2E       		.uleb128 0x2e
 4908 01f8 00       		.byte	0
 4909 01f9 3F       		.uleb128 0x3f
 4910 01fa 19       		.uleb128 0x19
 4911 01fb 03       		.uleb128 0x3
 4912 01fc 0E       		.uleb128 0xe
 4913 01fd 3A       		.uleb128 0x3a
 4914 01fe 0B       		.uleb128 0xb
 4915 01ff 3B       		.uleb128 0x3b
 4916 0200 05       		.uleb128 0x5
 4917 0201 11       		.uleb128 0x11
 4918 0202 01       		.uleb128 0x1
 4919 0203 12       		.uleb128 0x12
 4920 0204 06       		.uleb128 0x6
 4921 0205 40       		.uleb128 0x40
 4922 0206 18       		.uleb128 0x18
 4923 0207 9742     		.uleb128 0x2117
 4924 0209 19       		.uleb128 0x19
 4925 020a 00       		.byte	0
 4926 020b 00       		.byte	0
 4927 020c 21       		.uleb128 0x21
 4928 020d 2E       		.uleb128 0x2e
 4929 020e 00       		.byte	0
 4930 020f 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 107


 4931 0210 19       		.uleb128 0x19
 4932 0211 03       		.uleb128 0x3
 4933 0212 0E       		.uleb128 0xe
 4934 0213 3A       		.uleb128 0x3a
 4935 0214 0B       		.uleb128 0xb
 4936 0215 3B       		.uleb128 0x3b
 4937 0216 05       		.uleb128 0x5
 4938 0217 49       		.uleb128 0x49
 4939 0218 13       		.uleb128 0x13
 4940 0219 11       		.uleb128 0x11
 4941 021a 01       		.uleb128 0x1
 4942 021b 12       		.uleb128 0x12
 4943 021c 06       		.uleb128 0x6
 4944 021d 40       		.uleb128 0x40
 4945 021e 18       		.uleb128 0x18
 4946 021f 9742     		.uleb128 0x2117
 4947 0221 19       		.uleb128 0x19
 4948 0222 00       		.byte	0
 4949 0223 00       		.byte	0
 4950 0224 22       		.uleb128 0x22
 4951 0225 34       		.uleb128 0x34
 4952 0226 00       		.byte	0
 4953 0227 03       		.uleb128 0x3
 4954 0228 0E       		.uleb128 0xe
 4955 0229 3A       		.uleb128 0x3a
 4956 022a 0B       		.uleb128 0xb
 4957 022b 3B       		.uleb128 0x3b
 4958 022c 05       		.uleb128 0x5
 4959 022d 49       		.uleb128 0x49
 4960 022e 13       		.uleb128 0x13
 4961 022f 3F       		.uleb128 0x3f
 4962 0230 19       		.uleb128 0x19
 4963 0231 3C       		.uleb128 0x3c
 4964 0232 19       		.uleb128 0x19
 4965 0233 00       		.byte	0
 4966 0234 00       		.byte	0
 4967 0235 23       		.uleb128 0x23
 4968 0236 34       		.uleb128 0x34
 4969 0237 00       		.byte	0
 4970 0238 03       		.uleb128 0x3
 4971 0239 0E       		.uleb128 0xe
 4972 023a 3A       		.uleb128 0x3a
 4973 023b 0B       		.uleb128 0xb
 4974 023c 3B       		.uleb128 0x3b
 4975 023d 0B       		.uleb128 0xb
 4976 023e 49       		.uleb128 0x49
 4977 023f 13       		.uleb128 0x13
 4978 0240 3F       		.uleb128 0x3f
 4979 0241 19       		.uleb128 0x19
 4980 0242 02       		.uleb128 0x2
 4981 0243 18       		.uleb128 0x18
 4982 0244 00       		.byte	0
 4983 0245 00       		.byte	0
 4984 0246 24       		.uleb128 0x24
 4985 0247 21       		.uleb128 0x21
 4986 0248 00       		.byte	0
 4987 0249 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 108


 4988 024a 13       		.uleb128 0x13
 4989 024b 2F       		.uleb128 0x2f
 4990 024c 05       		.uleb128 0x5
 4991 024d 00       		.byte	0
 4992 024e 00       		.byte	0
 4993 024f 25       		.uleb128 0x25
 4994 0250 34       		.uleb128 0x34
 4995 0251 00       		.byte	0
 4996 0252 03       		.uleb128 0x3
 4997 0253 08       		.uleb128 0x8
 4998 0254 3A       		.uleb128 0x3a
 4999 0255 0B       		.uleb128 0xb
 5000 0256 3B       		.uleb128 0x3b
 5001 0257 0B       		.uleb128 0xb
 5002 0258 49       		.uleb128 0x49
 5003 0259 13       		.uleb128 0x13
 5004 025a 3F       		.uleb128 0x3f
 5005 025b 19       		.uleb128 0x19
 5006 025c 02       		.uleb128 0x2
 5007 025d 18       		.uleb128 0x18
 5008 025e 00       		.byte	0
 5009 025f 00       		.byte	0
 5010 0260 00       		.byte	0
 5011              		.section	.debug_aranges,"",%progbits
 5012 0000 D4000000 		.4byte	0xd4
 5013 0004 0200     		.2byte	0x2
 5014 0006 00000000 		.4byte	.Ldebug_info0
 5015 000a 04       		.byte	0x4
 5016 000b 00       		.byte	0
 5017 000c 0000     		.2byte	0
 5018 000e 0000     		.2byte	0
 5019 0010 00000000 		.4byte	.LFB64
 5020 0014 44000000 		.4byte	.LFE64-.LFB64
 5021 0018 00000000 		.4byte	.LFB65
 5022 001c 6C000000 		.4byte	.LFE65-.LFB65
 5023 0020 00000000 		.4byte	.LFB66
 5024 0024 32000000 		.4byte	.LFE66-.LFB66
 5025 0028 00000000 		.4byte	.LFB67
 5026 002c 20000000 		.4byte	.LFE67-.LFB67
 5027 0030 00000000 		.4byte	.LFB68
 5028 0034 40000000 		.4byte	.LFE68-.LFB68
 5029 0038 00000000 		.4byte	.LFB69
 5030 003c DC000000 		.4byte	.LFE69-.LFB69
 5031 0040 00000000 		.4byte	.LFB70
 5032 0044 1C000000 		.4byte	.LFE70-.LFB70
 5033 0048 00000000 		.4byte	.LFB71
 5034 004c 28000000 		.4byte	.LFE71-.LFB71
 5035 0050 00000000 		.4byte	.LFB72
 5036 0054 C8000000 		.4byte	.LFE72-.LFB72
 5037 0058 00000000 		.4byte	.LFB73
 5038 005c 00010000 		.4byte	.LFE73-.LFB73
 5039 0060 00000000 		.4byte	.LFB74
 5040 0064 78000000 		.4byte	.LFE74-.LFB74
 5041 0068 00000000 		.4byte	.LFB75
 5042 006c 74010000 		.4byte	.LFE75-.LFB75
 5043 0070 00000000 		.4byte	.LFB76
 5044 0074 B8000000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 109


 5045 0078 00000000 		.4byte	.LFB77
 5046 007c 1C000000 		.4byte	.LFE77-.LFB77
 5047 0080 00000000 		.4byte	.LFB78
 5048 0084 28000000 		.4byte	.LFE78-.LFB78
 5049 0088 00000000 		.4byte	.LFB79
 5050 008c 84000000 		.4byte	.LFE79-.LFB79
 5051 0090 00000000 		.4byte	.LFB80
 5052 0094 30000000 		.4byte	.LFE80-.LFB80
 5053 0098 00000000 		.4byte	.LFB81
 5054 009c 30020000 		.4byte	.LFE81-.LFB81
 5055 00a0 00000000 		.4byte	.LFB82
 5056 00a4 68010000 		.4byte	.LFE82-.LFB82
 5057 00a8 00000000 		.4byte	.LFB83
 5058 00ac 44010000 		.4byte	.LFE83-.LFB83
 5059 00b0 00000000 		.4byte	.LFB84
 5060 00b4 14000000 		.4byte	.LFE84-.LFB84
 5061 00b8 00000000 		.4byte	.LFB85
 5062 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5063 00c0 00000000 		.4byte	.LFB86
 5064 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5065 00c8 00000000 		.4byte	.LFB87
 5066 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5067 00d0 00000000 		.4byte	0
 5068 00d4 00000000 		.4byte	0
 5069              		.section	.debug_ranges,"",%progbits
 5070              	.Ldebug_ranges0:
 5071 0000 00000000 		.4byte	.LFB64
 5072 0004 44000000 		.4byte	.LFE64
 5073 0008 00000000 		.4byte	.LFB65
 5074 000c 6C000000 		.4byte	.LFE65
 5075 0010 00000000 		.4byte	.LFB66
 5076 0014 32000000 		.4byte	.LFE66
 5077 0018 00000000 		.4byte	.LFB67
 5078 001c 20000000 		.4byte	.LFE67
 5079 0020 00000000 		.4byte	.LFB68
 5080 0024 40000000 		.4byte	.LFE68
 5081 0028 00000000 		.4byte	.LFB69
 5082 002c DC000000 		.4byte	.LFE69
 5083 0030 00000000 		.4byte	.LFB70
 5084 0034 1C000000 		.4byte	.LFE70
 5085 0038 00000000 		.4byte	.LFB71
 5086 003c 28000000 		.4byte	.LFE71
 5087 0040 00000000 		.4byte	.LFB72
 5088 0044 C8000000 		.4byte	.LFE72
 5089 0048 00000000 		.4byte	.LFB73
 5090 004c 00010000 		.4byte	.LFE73
 5091 0050 00000000 		.4byte	.LFB74
 5092 0054 78000000 		.4byte	.LFE74
 5093 0058 00000000 		.4byte	.LFB75
 5094 005c 74010000 		.4byte	.LFE75
 5095 0060 00000000 		.4byte	.LFB76
 5096 0064 B8000000 		.4byte	.LFE76
 5097 0068 00000000 		.4byte	.LFB77
 5098 006c 1C000000 		.4byte	.LFE77
 5099 0070 00000000 		.4byte	.LFB78
 5100 0074 28000000 		.4byte	.LFE78
 5101 0078 00000000 		.4byte	.LFB79
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 110


 5102 007c 84000000 		.4byte	.LFE79
 5103 0080 00000000 		.4byte	.LFB80
 5104 0084 30000000 		.4byte	.LFE80
 5105 0088 00000000 		.4byte	.LFB81
 5106 008c 30020000 		.4byte	.LFE81
 5107 0090 00000000 		.4byte	.LFB82
 5108 0094 68010000 		.4byte	.LFE82
 5109 0098 00000000 		.4byte	.LFB83
 5110 009c 44010000 		.4byte	.LFE83
 5111 00a0 00000000 		.4byte	.LFB84
 5112 00a4 14000000 		.4byte	.LFE84
 5113 00a8 00000000 		.4byte	.LFB85
 5114 00ac 1A000000 		.4byte	.LFE85
 5115 00b0 00000000 		.4byte	.LFB86
 5116 00b4 2A000000 		.4byte	.LFE86
 5117 00b8 00000000 		.4byte	.LFB87
 5118 00bc 7C020000 		.4byte	.LFE87
 5119 00c0 00000000 		.4byte	0
 5120 00c4 00000000 		.4byte	0
 5121              		.section	.debug_line,"",%progbits
 5122              	.Ldebug_line0:
 5123 0000 78050000 		.section	.debug_str,"MS",%progbits,1
 5123      0200FC01 
 5123      00000201 
 5123      FB0E0D00 
 5123      01010101 
 5124              	.LASF132:
 5125 0000 676D745F 		.ascii	"gmt_offset\000"
 5125      6F666673 
 5125      657400
 5126              	.LASF16:
 5127 000b 75696E74 		.ascii	"uint16\000"
 5127      313600
 5128              	.LASF38:
 5129 0012 76616C75 		.ascii	"value\000"
 5129      6500
 5130              	.LASF27:
 5131 0018 746D5F68 		.ascii	"tm_hour\000"
 5131      6F757200 
 5132              	.LASF32:
 5133 0020 746D5F79 		.ascii	"tm_yday\000"
 5133      64617900 
 5134              	.LASF165:
 5135 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5135      73657273 
 5135      5C64616E 
 5135      747A5C44 
 5135      6F63756D 
 5136 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5136      2E637964 
 5136      736E00
 5137              	.LASF140:
 5138 0060 62756666 		.ascii	"buffer_overflow\000"
 5138      65725F6F 
 5138      76657266 
 5138      6C6F7700 
 5139              	.LASF4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 111


 5140 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5140      6E74385F 
 5140      7400
 5141              	.LASF69:
 5142 007a 636F756E 		.ascii	"countDownResetCondition\000"
 5142      74446F77 
 5142      6E526573 
 5142      6574436F 
 5142      6E646974 
 5143              	.LASF54:
 5144 0092 6C6F6E67 		.ascii	"longitude\000"
 5144      69747564 
 5144      6500
 5145              	.LASF163:
 5146 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5146      43313120 
 5146      352E342E 
 5146      31203230 
 5146      31363036 
 5147 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5147      20726576 
 5147      6973696F 
 5147      6E203233 
 5147      37373135 
 5148 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5148      66756E63 
 5148      74696F6E 
 5148      2D736563 
 5148      74696F6E 
 5149              	.LASF135:
 5150 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5150      6D5F7761 
 5150      6B657570 
 5150      00
 5151              	.LASF10:
 5152 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5152      206C6F6E 
 5152      6720756E 
 5152      7369676E 
 5152      65642069 
 5153              	.LASF120:
 5154 014e 73616D70 		.ascii	"sample_freq\000"
 5154      6C655F66 
 5154      72657100 
 5155              	.LASF144:
 5156 015a 6D6F6465 		.ascii	"modem_state\000"
 5156      6D5F7374 
 5156      61746500 
 5157              	.LASF96:
 5158 0166 74657374 		.ascii	"test\000"
 5158      00
 5159              	.LASF154:
 5160 016b 616C6172 		.ascii	"alarmMeasure\000"
 5160      6D4D6561 
 5160      73757265 
 5160      00
 5161              	.LASF139:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 112


 5162 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5162      52784275 
 5162      66666572 
 5162      00
 5163              	.LASF146:
 5164 0185 6D6F6465 		.ascii	"modem_stats\000"
 5164      6D5F7374 
 5164      61747300 
 5165              	.LASF9:
 5166 0191 6C6F6E67 		.ascii	"long long int\000"
 5166      206C6F6E 
 5166      6720696E 
 5166      7400
 5167              	.LASF0:
 5168 019f 7369676E 		.ascii	"signed char\000"
 5168      65642063 
 5168      68617200 
 5169              	.LASF47:
 5170 01ab 65636E6F 		.ascii	"ecno\000"
 5170      00
 5171              	.LASF66:
 5172 01b0 636F756E 		.ascii	"countDownValue\000"
 5172      74446F77 
 5172      6E56616C 
 5172      756500
 5173              	.LASF155:
 5174 01bf 74696D65 		.ascii	"timeToMeasure\000"
 5174      546F4D65 
 5174      61737572 
 5174      6500
 5175              	.LASF50:
 5176 01cd 74696D65 		.ascii	"time_to_network_connect\000"
 5176      5F746F5F 
 5176      6E657477 
 5176      6F726B5F 
 5176      636F6E6E 
 5177              	.LASF157:
 5178 01e5 74696D65 		.ascii	"timeToSync\000"
 5178      546F5379 
 5178      6E6300
 5179              	.LASF150:
 5180 01f0 68747470 		.ascii	"http_body\000"
 5180      5F626F64 
 5180      7900
 5181              	.LASF107:
 5182 01fa 7365745F 		.ascii	"set_up_internet_connection\000"
 5182      75705F69 
 5182      6E746572 
 5182      6E65745F 
 5182      636F6E6E 
 5183              	.LASF131:
 5184 0215 7365636F 		.ascii	"second\000"
 5184      6E6400
 5185              	.LASF127:
 5186 021c 79656172 		.ascii	"year\000"
 5186      00
 5187              	.LASF45:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 113


 5188 0221 72786C65 		.ascii	"rxlev\000"
 5188      7600
 5189              	.LASF6:
 5190 0227 6C6F6E67 		.ascii	"long int\000"
 5190      20696E74 
 5190      00
 5191              	.LASF67:
 5192 0230 63757272 		.ascii	"currentCountDownValue\000"
 5192      656E7443 
 5192      6F756E74 
 5192      446F776E 
 5192      56616C75 
 5193              	.LASF133:
 5194 0246 6D6F6465 		.ascii	"modem_get_state\000"
 5194      6D5F6765 
 5194      745F7374 
 5194      61746500 
 5195              	.LASF55:
 5196 0256 616C7469 		.ascii	"altitude\000"
 5196      74756465 
 5196      00
 5197              	.LASF15:
 5198 025f 75696E74 		.ascii	"uint8\000"
 5198      3800
 5199              	.LASF160:
 5200 0265 74696D65 		.ascii	"timeToAppLED\000"
 5200      546F4170 
 5200      704C4544 
 5200      00
 5201              	.LASF19:
 5202 0272 696E7433 		.ascii	"int32\000"
 5202      3200
 5203              	.LASF59:
 5204 0278 6E6F6465 		.ascii	"node_type\000"
 5204      5F747970 
 5204      6500
 5205              	.LASF123:
 5206 0282 6D6F6465 		.ascii	"modem_configure_settings\000"
 5206      6D5F636F 
 5206      6E666967 
 5206      7572655F 
 5206      73657474 
 5207              	.LASF115:
 5208 029b 735F7369 		.ascii	"s_sim_type\000"
 5208      6D5F7479 
 5208      706500
 5209              	.LASF97:
 5210 02a6 6E657477 		.ascii	"network_time\000"
 5210      6F726B5F 
 5210      74696D65 
 5210      00
 5211              	.LASF3:
 5212 02b3 73686F72 		.ascii	"short unsigned int\000"
 5212      7420756E 
 5212      7369676E 
 5212      65642069 
 5212      6E7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 114


 5213              	.LASF17:
 5214 02c6 75696E74 		.ascii	"uint32\000"
 5214      333200
 5215              	.LASF93:
 5216 02cd 696E7465 		.ascii	"interval\000"
 5216      7276616C 
 5216      00
 5217              	.LASF7:
 5218 02d6 5F5F7569 		.ascii	"__uint32_t\000"
 5218      6E743332 
 5218      5F7400
 5219              	.LASF125:
 5220 02e1 6D6F6465 		.ascii	"modem_get_network_time\000"
 5220      6D5F6765 
 5220      745F6E65 
 5220      74776F72 
 5220      6B5F7469 
 5221              	.LASF29:
 5222 02f8 746D5F6D 		.ascii	"tm_mon\000"
 5222      6F6E00
 5223              	.LASF63:
 5224 02ff 64656275 		.ascii	"debug_level\000"
 5224      675F6C65 
 5224      76656C00 
 5225              	.LASF134:
 5226 030b 6D6F6465 		.ascii	"modem_sleep\000"
 5226      6D5F736C 
 5226      65657000 
 5227              	.LASF118:
 5228 0317 735F6465 		.ascii	"s_debug_freq\000"
 5228      6275675F 
 5228      66726571 
 5228      00
 5229              	.LASF111:
 5230 0324 75706461 		.ascii	"updatable_parameters_initialize\000"
 5230      7461626C 
 5230      655F7061 
 5230      72616D65 
 5230      74657273 
 5231              	.LASF30:
 5232 0344 746D5F79 		.ascii	"tm_year\000"
 5232      65617200 
 5233              	.LASF156:
 5234 034c 616C6172 		.ascii	"alarmSync\000"
 5234      6D53796E 
 5234      6300
 5235              	.LASF79:
 5236 0356 70696E73 		.ascii	"pins_configure_active\000"
 5236      5F636F6E 
 5236      66696775 
 5236      72655F61 
 5236      63746976 
 5237              	.LASF40:
 5238 036c 6B65795F 		.ascii	"key_value_t\000"
 5238      76616C75 
 5238      655F7400 
 5239              	.LASF84:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 115


 5240 0378 7077725F 		.ascii	"pwr_check\000"
 5240      63686563 
 5240      6B00
 5241              	.LASF8:
 5242 0382 6C6F6E67 		.ascii	"long unsigned int\000"
 5242      20756E73 
 5242      69676E65 
 5242      6420696E 
 5242      7400
 5243              	.LASF99:
 5244 0394 65787472 		.ascii	"extract_string\000"
 5244      6163745F 
 5244      73747269 
 5244      6E6700
 5245              	.LASF89:
 5246 03a3 74696D65 		.ascii	"timeout\000"
 5246      6F757400 
 5247              	.LASF112:
 5248 03ab 6765745F 		.ascii	"get_cell_network_stats\000"
 5248      63656C6C 
 5248      5F6E6574 
 5248      776F726B 
 5248      5F737461 
 5249              	.LASF39:
 5250 03c2 74696D65 		.ascii	"timeStamp\000"
 5250      5374616D 
 5250      7000
 5251              	.LASF56:
 5252 03cc 74696D65 		.ascii	"time_to_lock\000"
 5252      5F746F5F 
 5252      6C6F636B 
 5252      00
 5253              	.LASF143:
 5254 03d9 64617461 		.ascii	"data\000"
 5254      00
 5255              	.LASF75:
 5256 03de 65705F70 		.ascii	"ep_port\000"
 5256      6F727400 
 5257              	.LASF33:
 5258 03e6 746D5F69 		.ascii	"tm_isdst\000"
 5258      73647374 
 5258      00
 5259              	.LASF71:
 5260 03ef 6D6F6465 		.ascii	"modem_info\000"
 5260      6D5F696E 
 5260      666F00
 5261              	.LASF74:
 5262 03fa 65705F68 		.ascii	"ep_host\000"
 5262      6F737400 
 5263              	.LASF72:
 5264 0402 63686970 		.ascii	"chip_uniqueId\000"
 5264      5F756E69 
 5264      71756549 
 5264      6400
 5265              	.LASF94:
 5266 0410 6D6F6465 		.ascii	"modem_power_up\000"
 5266      6D5F706F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 116


 5266      7765725F 
 5266      757000
 5267              	.LASF164:
 5268 041f 6D6F6465 		.ascii	"modem.c\000"
 5268      6D2E6300 
 5269              	.LASF101:
 5270 0427 62656769 		.ascii	"beginMarker\000"
 5270      6E4D6172 
 5270      6B657200 
 5271              	.LASF103:
 5272 0433 74617267 		.ascii	"target\000"
 5272      657400
 5273              	.LASF51:
 5274 043a 74696D65 		.ascii	"time_to_acquire_ip\000"
 5274      5F746F5F 
 5274      61637175 
 5274      6972655F 
 5274      697000
 5275              	.LASF102:
 5276 044d 656E644D 		.ascii	"endMarker\000"
 5276      61726B65 
 5276      7200
 5277              	.LASF2:
 5278 0457 73686F72 		.ascii	"short int\000"
 5278      7420696E 
 5278      7400
 5279              	.LASF126:
 5280 0461 65706F63 		.ascii	"epoch_time\000"
 5280      685F7469 
 5280      6D6500
 5281              	.LASF5:
 5282 046c 5F5F696E 		.ascii	"__int32_t\000"
 5282      7433325F 
 5282      7400
 5283              	.LASF159:
 5284 0476 616C6172 		.ascii	"alarmAppLED\000"
 5284      6D417070 
 5284      4C454400 
 5285              	.LASF100:
 5286 0482 66726F6D 		.ascii	"from\000"
 5286      00
 5287              	.LASF106:
 5288 0487 63726567 		.ascii	"creg\000"
 5288      00
 5289              	.LASF148:
 5290 048c 696E626F 		.ascii	"inbox\000"
 5290      7800
 5291              	.LASF90:
 5292 0492 61745F61 		.ascii	"at_attempt\000"
 5292      7474656D 
 5292      707400
 5293              	.LASF98:
 5294 049d 61745F77 		.ascii	"at_write_command\000"
 5294      72697465 
 5294      5F636F6D 
 5294      6D616E64 
 5294      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 117


 5295              	.LASF73:
 5296 04ae 7379735F 		.ascii	"sys_info_t\000"
 5296      696E666F 
 5296      5F7400
 5297              	.LASF65:
 5298 04b9 75706461 		.ascii	"updatable_parameters_t\000"
 5298      7461626C 
 5298      655F7061 
 5298      72616D65 
 5298      74657273 
 5299              	.LASF121:
 5300 04d0 7265706F 		.ascii	"report_freq\000"
 5300      72745F66 
 5300      72657100 
 5301              	.LASF141:
 5302 04dc 64617461 		.ascii	"dataPointsInStack\000"
 5302      506F696E 
 5302      7473496E 
 5302      53746163 
 5302      6B00
 5303              	.LASF26:
 5304 04ee 746D5F6D 		.ascii	"tm_min\000"
 5304      696E00
 5305              	.LASF24:
 5306 04f5 73697A65 		.ascii	"sizetype\000"
 5306      74797065 
 5306      00
 5307              	.LASF128:
 5308 04fe 6D6F6E74 		.ascii	"month\000"
 5308      6800
 5309              	.LASF105:
 5310 0504 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5310      6F6E6E65 
 5310      63746564 
 5310      5F746F5F 
 5310      63656C6C 
 5311              	.LASF161:
 5312 0521 75617274 		.ascii	"uart_received_string\000"
 5312      5F726563 
 5312      65697665 
 5312      645F7374 
 5312      72696E67 
 5313              	.LASF53:
 5314 0536 6C617469 		.ascii	"latitude\000"
 5314      74756465 
 5314      00
 5315              	.LASF34:
 5316 053f 74657374 		.ascii	"test_name\000"
 5316      5F6E616D 
 5316      6500
 5317              	.LASF158:
 5318 0549 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5318      546F5379 
 5318      636E5265 
 5318      6D6F7465 
 5318      50617261 
 5319              	.LASF95:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 118


 5320 0560 6D6F6465 		.ascii	"modem_test\000"
 5320      6D5F7465 
 5320      737400
 5321              	.LASF110:
 5322 056b 6D617463 		.ascii	"match\000"
 5322      6800
 5323              	.LASF147:
 5324 0571 75706461 		.ascii	"updatable_parameters\000"
 5324      7461626C 
 5324      655F7061 
 5324      72616D65 
 5324      74657273 
 5325              	.LASF129:
 5326 0586 686F7572 		.ascii	"hour\000"
 5326      00
 5327              	.LASF87:
 5328 058b 636F6D6D 		.ascii	"commands\000"
 5328      616E6473 
 5328      00
 5329              	.LASF91:
 5330 0594 636F6D70 		.ascii	"compare_location\000"
 5330      6172655F 
 5330      6C6F6361 
 5330      74696F6E 
 5330      00
 5331              	.LASF20:
 5332 05a5 666C6F61 		.ascii	"float\000"
 5332      7400
 5333              	.LASF77:
 5334 05ab 6D6F6465 		.ascii	"modem_initialize\000"
 5334      6D5F696E 
 5334      69746961 
 5334      6C697A65 
 5334      00
 5335              	.LASF117:
 5336 05bc 735F7265 		.ascii	"s_report_freq\000"
 5336      706F7274 
 5336      5F667265 
 5336      7100
 5337              	.LASF60:
 5338 05ca 73696D5F 		.ascii	"sim_type\000"
 5338      74797065 
 5338      00
 5339              	.LASF108:
 5340 05d3 6973725F 		.ascii	"isr_telit_rx\000"
 5340      74656C69 
 5340      745F7278 
 5340      00
 5341              	.LASF70:
 5342 05e0 616C6172 		.ascii	"alarm\000"
 5342      6D00
 5343              	.LASF64:
 5344 05e6 5F426F6F 		.ascii	"_Bool\000"
 5344      6C00
 5345              	.LASF13:
 5346 05ec 696E7433 		.ascii	"int32_t\000"
 5346      325F7400 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 119


 5347              	.LASF1:
 5348 05f4 756E7369 		.ascii	"unsigned char\000"
 5348      676E6564 
 5348      20636861 
 5348      7200
 5349              	.LASF153:
 5350 0602 73797374 		.ascii	"system_settings\000"
 5350      656D5F73 
 5350      65747469 
 5350      6E677300 
 5351              	.LASF92:
 5352 0612 64656C61 		.ascii	"delay\000"
 5352      7900
 5353              	.LASF48:
 5354 0618 72737271 		.ascii	"rsrq\000"
 5354      00
 5355              	.LASF62:
 5356 061d 73796E63 		.ascii	"sync_time\000"
 5356      5F74696D 
 5356      6500
 5357              	.LASF114:
 5358 0627 735F6E6F 		.ascii	"s_node_type\000"
 5358      64655F74 
 5358      79706500 
 5359              	.LASF46:
 5360 0633 72736370 		.ascii	"rscp\000"
 5360      00
 5361              	.LASF136:
 5362 0638 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5362      6D5F6765 
 5362      745F6770 
 5362      735F636F 
 5362      6F726469 
 5363              	.LASF37:
 5364 0652 74657374 		.ascii	"test_t\000"
 5364      5F7400
 5365              	.LASF152:
 5366 0659 73797374 		.ascii	"system_info\000"
 5366      656D5F69 
 5366      6E666F00 
 5367              	.LASF43:
 5368 0665 696D6569 		.ascii	"imei\000"
 5368      00
 5369              	.LASF36:
 5370 066a 72656173 		.ascii	"reason\000"
 5370      6F6E00
 5371              	.LASF49:
 5372 0671 72737270 		.ascii	"rsrp\000"
 5372      00
 5373              	.LASF52:
 5374 0676 6D6F6465 		.ascii	"modem_stats_t\000"
 5374      6D5F7374 
 5374      6174735F 
 5374      7400
 5375              	.LASF86:
 5376 0684 75617274 		.ascii	"uart_string_reset\000"
 5376      5F737472 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 120


 5376      696E675F 
 5376      72657365 
 5376      7400
 5377              	.LASF31:
 5378 0696 746D5F77 		.ascii	"tm_wday\000"
 5378      64617900 
 5379              	.LASF85:
 5380 069e 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5380      6D5F736F 
 5380      66745F70 
 5380      6F776572 
 5380      5F637963 
 5381              	.LASF23:
 5382 06b5 6C6F6E67 		.ascii	"long double\000"
 5382      20646F75 
 5382      626C6500 
 5383              	.LASF22:
 5384 06c1 63686172 		.ascii	"char\000"
 5384      00
 5385              	.LASF104:
 5386 06c6 6D6F6465 		.ascii	"modem_process_tasks\000"
 5386      6D5F7072 
 5386      6F636573 
 5386      735F7461 
 5386      736B7300 
 5387              	.LASF11:
 5388 06da 756E7369 		.ascii	"unsigned int\000"
 5388      676E6564 
 5388      20696E74 
 5388      00
 5389              	.LASF124:
 5390 06e7 4346554E 		.ascii	"CFUN\000"
 5390      00
 5391              	.LASF42:
 5392 06ec 6D6F6465 		.ascii	"model_id\000"
 5392      6C5F6964 
 5392      00
 5393              	.LASF151:
 5394 06f5 68747470 		.ascii	"http_route\000"
 5394      5F726F75 
 5394      746500
 5395              	.LASF44:
 5396 0700 6D6F6465 		.ascii	"modem_info_t\000"
 5396      6D5F696E 
 5396      666F5F74 
 5396      00
 5397              	.LASF58:
 5398 070d 6770735F 		.ascii	"gps_t\000"
 5398      7400
 5399              	.LASF162:
 5400 0713 75617274 		.ascii	"uart_string_index\000"
 5400      5F737472 
 5400      696E675F 
 5400      696E6465 
 5400      7800
 5401              	.LASF61:
 5402 0725 6D656173 		.ascii	"measure_time\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 121


 5402      7572655F 
 5402      74696D65 
 5402      00
 5403              	.LASF109:
 5404 0732 69735F63 		.ascii	"is_connected_to_internet\000"
 5404      6F6E6E65 
 5404      63746564 
 5404      5F746F5F 
 5404      696E7465 
 5405              	.LASF145:
 5406 074b 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5406      6D5F7374 
 5406      6172745F 
 5406      74696D65 
 5406      5F737461 
 5407              	.LASF138:
 5408 0762 6770735F 		.ascii	"gps_status\000"
 5408      73746174 
 5408      757300
 5409              	.LASF78:
 5410 076d 70696E73 		.ascii	"pins_configure_inactive\000"
 5410      5F636F6E 
 5410      66696775 
 5410      72655F69 
 5410      6E616374 
 5411              	.LASF119:
 5412 0785 735F6170 		.ascii	"s_app_led\000"
 5412      705F6C65 
 5412      6400
 5413              	.LASF41:
 5414 078f 73696D5F 		.ascii	"sim_id\000"
 5414      696400
 5415              	.LASF28:
 5416 0796 746D5F6D 		.ascii	"tm_mday\000"
 5416      64617900 
 5417              	.LASF57:
 5418 079e 76616C69 		.ascii	"valid\000"
 5418      6400
 5419              	.LASF130:
 5420 07a4 6D696E75 		.ascii	"minute\000"
 5420      746500
 5421              	.LASF14:
 5422 07ab 75696E74 		.ascii	"uint32_t\000"
 5422      33325F74 
 5422      00
 5423              	.LASF25:
 5424 07b4 746D5F73 		.ascii	"tm_sec\000"
 5424      656300
 5425              	.LASF113:
 5426 07bb 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5426      75706461 
 5426      7465645F 
 5426      70617261 
 5426      6D657465 
 5427              	.LASF116:
 5428 07de 735F7361 		.ascii	"s_sample_freq\000"
 5428      6D706C65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 122


 5428      5F667265 
 5428      7100
 5429              	.LASF35:
 5430 07ec 73746174 		.ascii	"status\000"
 5430      757300
 5431              	.LASF142:
 5432 07f3 64617461 		.ascii	"dataPointsInStackDesired\000"
 5432      506F696E 
 5432      7473496E 
 5432      53746163 
 5432      6B446573 
 5433              	.LASF76:
 5434 080c 7379735F 		.ascii	"sys_settings_t\000"
 5434      73657474 
 5434      696E6773 
 5434      5F7400
 5435              	.LASF12:
 5436 081b 75696E74 		.ascii	"uint8_t\000"
 5436      385F7400 
 5437              	.LASF122:
 5438 0823 64656275 		.ascii	"debug_freq\000"
 5438      675F6672 
 5438      657100
 5439              	.LASF18:
 5440 082e 696E7431 		.ascii	"int16\000"
 5440      3600
 5441              	.LASF81:
 5442 0834 61745F72 		.ascii	"at_ready\000"
 5442      65616479 
 5442      00
 5443              	.LASF82:
 5444 083d 61747465 		.ascii	"attempts\000"
 5444      6D707473 
 5444      00
 5445              	.LASF68:
 5446 0846 636F756E 		.ascii	"countDownType\000"
 5446      74446F77 
 5446      6E547970 
 5446      6500
 5447              	.LASF83:
 5448 0854 626F6F74 		.ascii	"boot_time\000"
 5448      5F74696D 
 5448      6500
 5449              	.LASF88:
 5450 085e 65787065 		.ascii	"expected_response\000"
 5450      63746564 
 5450      5F726573 
 5450      706F6E73 
 5450      6500
 5451              	.LASF137:
 5452 0870 6C6F636B 		.ascii	"lock_time\000"
 5452      5F74696D 
 5452      6500
 5453              	.LASF149:
 5454 087a 68747470 		.ascii	"http_request\000"
 5454      5F726571 
 5454      75657374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccGANCGc.s 			page 123


 5454      00
 5455              	.LASF80:
 5456 0887 6D6F6465 		.ascii	"modem_power_down\000"
 5456      6D5F706F 
 5456      7765725F 
 5456      646F776E 
 5456      00
 5457              	.LASF21:
 5458 0898 646F7562 		.ascii	"double\000"
 5458      6C6500
 5459              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
