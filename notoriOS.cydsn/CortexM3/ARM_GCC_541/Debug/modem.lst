ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,5,4
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.comm	uart_received_string,1024,4
  44              		.global	uart_string_index
  45              		.bss
  46              		.align	1
  47              		.type	uart_string_index, %object
  48              		.size	uart_string_index, 2
  49              	uart_string_index:
  50 0000 0000     		.space	2
  51              		.section	.text.isr_telit_rx,"ax",%progbits
  52              		.align	2
  53              		.global	isr_telit_rx
  54              		.thumb
  55              		.thumb_func
  56              		.type	isr_telit_rx, %function
  57              	isr_telit_rx:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 2


  58              	.LFB64:
  59              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  60              		.loc 1 18 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 98B5     		push	{r3, r4, r7, lr}
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 3, -16
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  72              		.loc 1 20 0
  73 0004 12E0     		b	.L2
  74              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  75              		.loc 1 21 0
  76 0006 0D4B     		ldr	r3, .L4
  77 0008 B3F90030 		ldrsh	r3, [r3]
  78 000c 1C46     		mov	r4, r3
  79 000e FFF7FEFF 		bl	UART_Telit_GetChar
  80 0012 0346     		mov	r3, r0
  81 0014 1A46     		mov	r2, r3
  82 0016 0A4B     		ldr	r3, .L4+4
  83 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  84              		.loc 1 22 0
  85 001a 084B     		ldr	r3, .L4
  86 001c B3F90030 		ldrsh	r3, [r3]
  87 0020 9BB2     		uxth	r3, r3
  88 0022 0133     		adds	r3, r3, #1
  89 0024 9BB2     		uxth	r3, r3
  90 0026 1AB2     		sxth	r2, r3
  91 0028 044B     		ldr	r3, .L4
  92 002a 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 3


  93              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  94              		.loc 1 20 0
  95 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
  96 0030 0346     		mov	r3, r0
  97 0032 012B     		cmp	r3, #1
  98 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
  99              		.loc 1 25 0
 100 0036 00BF     		nop
 101 0038 98BD     		pop	{r3, r4, r7, pc}
 102              	.L5:
 103 003a 00BF     		.align	2
 104              	.L4:
 105 003c 00000000 		.word	uart_string_index
 106 0040 00000000 		.word	uart_received_string
 107              		.cfi_endproc
 108              	.LFE64:
 109              		.size	isr_telit_rx, .-isr_telit_rx
 110              		.section	.text.modem_initialize,"ax",%progbits
 111              		.align	2
 112              		.global	modem_initialize
 113              		.thumb
 114              		.thumb_func
 115              		.type	modem_initialize, %function
 116              	modem_initialize:
 117              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 118              		.loc 1 28 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 128              		.loc 1 31 0
 129 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 130              		.loc 1 32 0
 131 0008 154B     		ldr	r3, .L7
 132 000a 0022     		movs	r2, #0
 133 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 134              		.loc 1 34 0
 135 000e 154B     		ldr	r3, .L7+4
 136 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 4


 137 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 138              		.loc 1 35 0
 139 0016 134B     		ldr	r3, .L7+4
 140 0018 0022     		movs	r2, #0
 141 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 142              		.loc 1 36 0
 143 001c 114B     		ldr	r3, .L7+4
 144 001e 0022     		movs	r2, #0
 145 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 146              		.loc 1 37 0
 147 0022 114B     		ldr	r3, .L7+8
 148 0024 0022     		movs	r2, #0
 149 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 150              		.loc 1 38 0
 151 0028 0F4B     		ldr	r3, .L7+8
 152 002a 0022     		movs	r2, #0
 153 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 154              		.loc 1 39 0
 155 002e 0E4B     		ldr	r3, .L7+8
 156 0030 0022     		movs	r2, #0
 157 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 158              		.loc 1 40 0
 159 0034 0C4B     		ldr	r3, .L7+8
 160 0036 0022     		movs	r2, #0
 161 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 162              		.loc 1 41 0
 163 003a 0B4B     		ldr	r3, .L7+8
 164 003c 0022     		movs	r2, #0
 165 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 166              		.loc 1 42 0
 167 0040 094B     		ldr	r3, .L7+8
 168 0042 0022     		movs	r2, #0
 169 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 170              		.loc 1 43 0
 171 0046 084B     		ldr	r3, .L7+8
 172 0048 0022     		movs	r2, #0
 173 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 174              		.loc 1 44 0
 175 004c 064B     		ldr	r3, .L7+8
 176 004e 0022     		movs	r2, #0
 177 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 178              		.loc 1 48 0
 179 0052 0021     		movs	r1, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 5


 180 0054 4020     		movs	r0, #64
 181 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 182              		.loc 1 50 0
 183 005a 00BF     		nop
 184 005c 80BD     		pop	{r7, pc}
 185              	.L8:
 186 005e 00BF     		.align	2
 187              	.L7:
 188 0060 00000000 		.word	modem_state
 189 0064 00000000 		.word	modem_info
 190 0068 00000000 		.word	modem_stats
 191              		.cfi_endproc
 192              	.LFE65:
 193              		.size	modem_initialize, .-modem_initialize
 194              		.section	.text.pins_configure_inactive,"ax",%progbits
 195              		.align	2
 196              		.global	pins_configure_inactive
 197              		.thumb
 198              		.thumb_func
 199              		.type	pins_configure_inactive, %function
 200              	pins_configure_inactive:
 201              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 202              		.loc 1 54 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 212              		.loc 1 56 0
 213 0004 0020     		movs	r0, #0
 214 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 215              		.loc 1 57 0
 216 000a 0C20     		movs	r0, #12
 217 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 218              		.loc 1 59 0
 219 0010 0020     		movs	r0, #0
 220 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 221              		.loc 1 62 0
 222 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 6


 223 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 224              		.loc 1 63 0
 225 001c 0020     		movs	r0, #0
 226 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 227              		.loc 1 64 0
 228 0022 0020     		movs	r0, #0
 229 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 230              		.loc 1 65 0
 231 0028 0020     		movs	r0, #0
 232 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 233              		.loc 1 67 0
 234 002e 00BF     		nop
 235 0030 80BD     		pop	{r7, pc}
 236              		.cfi_endproc
 237              	.LFE66:
 238              		.size	pins_configure_inactive, .-pins_configure_inactive
 239 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 240              		.align	2
 241              		.global	pins_configure_active
 242              		.thumb
 243              		.thumb_func
 244              		.type	pins_configure_active, %function
 245              	pins_configure_active:
 246              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 247              		.loc 1 70 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 257              		.loc 1 72 0
 258 0004 0220     		movs	r0, #2
 259 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 260              		.loc 1 73 0
 261 000a 0120     		movs	r0, #1
 262 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 263              		.loc 1 74 0
 264 0010 0120     		movs	r0, #1
 265 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 266              		.loc 1 75 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 7


 267 0016 6420     		movs	r0, #100
 268 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 269              		.loc 1 76 0
 270 001c 00BF     		nop
 271 001e 80BD     		pop	{r7, pc}
 272              		.cfi_endproc
 273              	.LFE67:
 274              		.size	pins_configure_active, .-pins_configure_active
 275              		.section	.rodata
 276              		.align	2
 277              	.LC0:
 278 0000 4F4B00   		.ascii	"OK\000"
 279 0003 00       		.align	2
 280              	.LC1:
 281 0004 41542353 		.ascii	"AT#SHDN\015\000"
 281      48444E0D 
 281      00
 282              		.section	.text.modem_power_down,"ax",%progbits
 283              		.align	2
 284              		.global	modem_power_down
 285              		.thumb
 286              		.thumb_func
 287              		.type	modem_power_down, %function
 288              	modem_power_down:
 289              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 290              		.loc 1 79 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 300              		.loc 1 82 0
 301 0004 41F28832 		movw	r2, #5000
 302 0008 0A49     		ldr	r1, .L12
 303 000a 0B48     		ldr	r0, .L12+4
 304 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 305              		.loc 1 85 0
 306 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 307              		.loc 1 86 0
 308 0014 4FF47A70 		mov	r0, #1000
 309 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 8


  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 310              		.loc 1 88 0
 311 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 312              		.loc 1 89 0
 313 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 314              		.loc 1 90 0
 315 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 316              		.loc 1 91 0
 317 0028 044B     		ldr	r3, .L12+8
 318 002a 0022     		movs	r2, #0
 319 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 320              		.loc 1 93 0
 321 002e 00BF     		nop
 322 0030 80BD     		pop	{r7, pc}
 323              	.L13:
 324 0032 00BF     		.align	2
 325              	.L12:
 326 0034 00000000 		.word	.LC0
 327 0038 04000000 		.word	.LC1
 328 003c 00000000 		.word	modem_state
 329              		.cfi_endproc
 330              	.LFE68:
 331              		.size	modem_power_down, .-modem_power_down
 332              		.section	.rodata
 333 000d 000000   		.align	2
 334              	.LC2:
 335 0010 41544530 		.ascii	"ATE0\015\000"
 335      0D00
 336 0016 0000     		.align	2
 337              	.LC3:
 338 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 338      6D20626F 
 338      6F742074 
 338      696D653A 
 338      20256400 
 339              		.align	2
 340              	.LC4:
 341 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 341      6D207265 
 341      61647920 
 341      666F7220 
 341      41542063 
 342 005d 000000   		.align	2
 343              	.LC5:
 344 0060 4E6F2072 		.ascii	"No response from modem.\000"
 344      6573706F 
 344      6E736520 
 344      66726F6D 
 344      206D6F64 
 345              		.section	.text.modem_power_up,"ax",%progbits
 346              		.align	2
 347              		.global	modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 9


 348              		.thumb
 349              		.thumb_func
 350              		.type	modem_power_up, %function
 351              	modem_power_up:
 352              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 353              		.loc 1 97 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 82B0     		sub	sp, sp, #8
 362              		.cfi_def_cfa_offset 16
 363 0004 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 365              		.loc 1 99 0
 366 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 367              		.loc 1 100 0
 368 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 369              		.loc 1 101 0
 370 000e 2C48     		ldr	r0, .L27
 371 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 372              		.loc 1 103 0
 373 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 374              		.loc 1 106 0
 375 0018 0023     		movs	r3, #0
 376 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 377              		.loc 1 107 0
 378 001c 0023     		movs	r3, #0
 379 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 380              		.loc 1 109 0
 381 0020 FFF7FEFF 		bl	getTimeStamp
 382 0024 3860     		str	r0, [r7]
 383              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 384              		.loc 1 112 0
 385 0026 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 10


 386 0028 BB71     		strb	r3, [r7, #6]
 387 002a 1CE0     		b	.L15
 388              	.L22:
 389              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 390              		.loc 1 114 0
 391 002c 0023     		movs	r3, #0
 392 002e 7B71     		strb	r3, [r7, #5]
 393 0030 0EE0     		b	.L16
 394              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 395              		.loc 1 116 0
 396 0032 4FF47A72 		mov	r2, #1000
 397 0036 2349     		ldr	r1, .L27+4
 398 0038 2348     		ldr	r0, .L27+8
 399 003a FFF7FEFF 		bl	at_write_command
 400 003e 0346     		mov	r3, r0
 401 0040 002B     		cmp	r3, #0
 402 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 403              		.loc 1 117 0
 404 0044 0123     		movs	r3, #1
 405 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 406              		.loc 1 118 0
 407 0048 05E0     		b	.L18
 408              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 409              		.loc 1 114 0 discriminator 2
 410 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 411 004c 0133     		adds	r3, r3, #1
 412 004e 7B71     		strb	r3, [r7, #5]
 413              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 414              		.loc 1 114 0 is_stmt 0 discriminator 1
 415 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 416 0052 132B     		cmp	r3, #19
 417 0054 EDD9     		bls	.L19
 418              	.L18:
 419              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 420              		.loc 1 122 0 is_stmt 1
 421 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 422 0058 012B     		cmp	r3, #1
 423 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 424              		.loc 1 126 0 discriminator 2
 425 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 11


 426              		.loc 1 112 0 discriminator 2
 427 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 428 0062 0133     		adds	r3, r3, #1
 429 0064 BB71     		strb	r3, [r7, #6]
 430              	.L15:
 112:modem.c       ****         
 431              		.loc 1 112 0 is_stmt 0 discriminator 1
 432 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 433 0068 022B     		cmp	r3, #2
 434 006a DFD9     		bls	.L22
 435 006c 00E0     		b	.L21
 436              	.L26:
 123:modem.c       ****             break;
 437              		.loc 1 123 0 is_stmt 1
 438 006e 00BF     		nop
 439              	.L21:
 440              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 441              		.loc 1 130 0
 442 0070 FFF7FEFF 		bl	getTimeStamp
 443 0074 0246     		mov	r2, r0
 444 0076 3B68     		ldr	r3, [r7]
 445 0078 D31A     		subs	r3, r2, r3
 446 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 447              		.loc 1 131 0
 448 007c 3A68     		ldr	r2, [r7]
 449 007e 1349     		ldr	r1, .L27+12
 450 0080 0020     		movs	r0, #0
 451 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 452              		.loc 1 133 0
 453 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 454 0088 012B     		cmp	r3, #1
 455 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 456              		.loc 1 134 0
 457 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 458 008e 1A46     		mov	r2, r3
 459 0090 0F49     		ldr	r1, .L27+16
 460 0092 0020     		movs	r0, #0
 461 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 462              		.loc 1 135 0
 463 0098 0E4B     		ldr	r3, .L27+20
 464 009a 0122     		movs	r2, #1
 465 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 12


 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 466              		.loc 1 143 0
 467 009e 0123     		movs	r3, #1
 468 00a0 09E0     		b	.L25
 469              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 470              		.loc 1 137 0
 471 00a2 0D49     		ldr	r1, .L27+24
 472 00a4 0220     		movs	r0, #2
 473 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 474              		.loc 1 138 0
 475 00aa 0A4B     		ldr	r3, .L27+20
 476 00ac 0022     		movs	r2, #0
 477 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 478              		.loc 1 140 0
 479 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 480              		.loc 1 141 0
 481 00b4 0023     		movs	r3, #0
 482              	.L25:
 144:modem.c       **** }
 483              		.loc 1 144 0
 484 00b6 1846     		mov	r0, r3
 485 00b8 0837     		adds	r7, r7, #8
 486              		.cfi_def_cfa_offset 8
 487 00ba BD46     		mov	sp, r7
 488              		.cfi_def_cfa_register 13
 489              		@ sp needed
 490 00bc 80BD     		pop	{r7, pc}
 491              	.L28:
 492 00be 00BF     		.align	2
 493              	.L27:
 494 00c0 00000000 		.word	isr_telit_rx
 495 00c4 00000000 		.word	.LC0
 496 00c8 10000000 		.word	.LC2
 497 00cc 18000000 		.word	.LC3
 498 00d0 2C000000 		.word	.LC4
 499 00d4 00000000 		.word	modem_state
 500 00d8 60000000 		.word	.LC5
 501              		.cfi_endproc
 502              	.LFE69:
 503              		.size	modem_power_up, .-modem_power_up
 504              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 505              		.align	2
 506              		.global	modem_soft_power_cycle
 507              		.thumb
 508              		.thumb_func
 509              		.type	modem_soft_power_cycle, %function
 510              	modem_soft_power_cycle:
 511              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 512              		.loc 1 147 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 13


 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 00AF     		add	r7, sp, #0
 521              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 522              		.loc 1 148 0
 523 0004 0120     		movs	r0, #1
 524 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 525              		.loc 1 149 0
 526 000a 4FF4FA60 		mov	r0, #2000
 527 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 528              		.loc 1 150 0
 529 0012 0020     		movs	r0, #0
 530 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 531              		.loc 1 152 0
 532 0018 00BF     		nop
 533 001a 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE70:
 536              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 537              		.section	.text.uart_string_reset,"ax",%progbits
 538              		.align	2
 539              		.global	uart_string_reset
 540              		.thumb
 541              		.thumb_func
 542              		.type	uart_string_reset, %function
 543              	uart_string_reset:
 544              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 545              		.loc 1 155 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 00AF     		add	r7, sp, #0
 554              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 555              		.loc 1 156 0
 556 0004 064B     		ldr	r3, .L31
 557 0006 0022     		movs	r2, #0
 558 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 14


 559              		.loc 1 158 0
 560 000a 4FF48062 		mov	r2, #1024
 561 000e 0021     		movs	r1, #0
 562 0010 0448     		ldr	r0, .L31+4
 563 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 564              		.loc 1 160 0
 565 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 566              		.loc 1 161 0
 567 001a 00BF     		nop
 568 001c 80BD     		pop	{r7, pc}
 569              	.L32:
 570 001e 00BF     		.align	2
 571              	.L31:
 572 0020 00000000 		.word	uart_string_index
 573 0024 00000000 		.word	uart_received_string
 574              		.cfi_endproc
 575              	.LFE71:
 576              		.size	uart_string_reset, .-uart_string_reset
 577              		.section	.rodata
 578              		.align	2
 579              	.LC6:
 580 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 580      6D207365 
 580      6E742041 
 580      5420636F 
 580      6D6D616E 
 581              		.align	2
 582              	.LC7:
 583 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 583      6D205265 
 583      63656976 
 583      65642065 
 583      78706563 
 584 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 584      616E643A 
 584      2025730A 
 584      52656365 
 584      69766564 
 585 00f1 000000   		.align	2
 586              	.LC8:
 587 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 587      6D207265 
 587      71756972 
 587      65642025 
 587      64207472 
 588 0127 0A00     		.ascii	"\012\000"
 589              		.section	.text.at_write_command,"ax",%progbits
 590              		.align	2
 591              		.global	at_write_command
 592              		.thumb
 593              		.thumb_func
 594              		.type	at_write_command, %function
 595              	at_write_command:
 596              	.LFB72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 15


 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 597              		.loc 1 166 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 40
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601 0000 80B5     		push	{r7, lr}
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 0002 8AB0     		sub	sp, sp, #40
 606              		.cfi_def_cfa_offset 48
 607 0004 00AF     		add	r7, sp, #0
 608              		.cfi_def_cfa_register 7
 609 0006 F860     		str	r0, [r7, #12]
 610 0008 B960     		str	r1, [r7, #8]
 611 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 612              		.loc 1 168 0
 613 000c 0023     		movs	r3, #0
 614 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 615              		.loc 1 170 0
 616 0010 0023     		movs	r3, #0
 617 0012 7B62     		str	r3, [r7, #36]
 618 0014 40E0     		b	.L34
 619              	.L42:
 620              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 621              		.loc 1 173 0
 622 0016 0A23     		movs	r3, #10
 623 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 624              		.loc 1 174 0
 625 001a 7A68     		ldr	r2, [r7, #4]
 626 001c FB69     		ldr	r3, [r7, #28]
 627 001e B2FBF3F3 		udiv	r3, r2, r3
 628 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 629              		.loc 1 177 0
 630 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 631              		.loc 1 180 0
 632 0028 F868     		ldr	r0, [r7, #12]
 633 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 16


 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 634              		.loc 1 184 0
 635 002e 7B68     		ldr	r3, [r7, #4]
 636 0030 002B     		cmp	r3, #0
 637 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 638              		.loc 1 185 0
 639 0034 FA68     		ldr	r2, [r7, #12]
 640 0036 1C49     		ldr	r1, .L43
 641 0038 0020     		movs	r0, #0
 642 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 643              		.loc 1 186 0
 644 003e 0123     		movs	r3, #1
 645 0040 2EE0     		b	.L36
 646              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 647              		.loc 1 190 0
 648 0042 0023     		movs	r3, #0
 649 0044 3B62     		str	r3, [r7, #32]
 650 0046 20E0     		b	.L37
 651              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 652              		.loc 1 191 0
 653 0048 F869     		ldr	r0, [r7, #28]
 654 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 655              		.loc 1 194 0
 656 004e B968     		ldr	r1, [r7, #8]
 657 0050 1648     		ldr	r0, .L43+4
 658 0052 FFF7FEFF 		bl	strstr
 659 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 660              		.loc 1 195 0
 661 0058 7B69     		ldr	r3, [r7, #20]
 662 005a 002B     		cmp	r3, #0
 663 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 664              		.loc 1 196 0
 665 005e 7B6A     		ldr	r3, [r7, #36]
 666 0060 002B     		cmp	r3, #0
 667 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 668              		.loc 1 198 0
 669 0064 114B     		ldr	r3, .L43+4
 670 0066 FA68     		ldr	r2, [r7, #12]
 671 0068 1149     		ldr	r1, .L43+8
 672 006a 0020     		movs	r0, #0
 673 006c FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 17


 674 0070 06E0     		b	.L40
 675              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 676              		.loc 1 200 0
 677 0072 7B6A     		ldr	r3, [r7, #36]
 678 0074 5A1C     		adds	r2, r3, #1
 679 0076 0D4B     		ldr	r3, .L43+4
 680 0078 0E49     		ldr	r1, .L43+12
 681 007a 0120     		movs	r0, #1
 682 007c FFF7FEFF 		bl	printNotif
 683              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 684              		.loc 1 203 0
 685 0080 0123     		movs	r3, #1
 686 0082 0DE0     		b	.L36
 687              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 688              		.loc 1 190 0 discriminator 2
 689 0084 3B6A     		ldr	r3, [r7, #32]
 690 0086 0133     		adds	r3, r3, #1
 691 0088 3B62     		str	r3, [r7, #32]
 692              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 693              		.loc 1 190 0 is_stmt 0 discriminator 1
 694 008a 3A6A     		ldr	r2, [r7, #32]
 695 008c BB69     		ldr	r3, [r7, #24]
 696 008e 9A42     		cmp	r2, r3
 697 0090 DAD3     		bcc	.L41
 698              	.LBE4:
 170:modem.c       ****         
 699              		.loc 1 170 0 is_stmt 1 discriminator 2
 700 0092 7B6A     		ldr	r3, [r7, #36]
 701 0094 0133     		adds	r3, r3, #1
 702 0096 7B62     		str	r3, [r7, #36]
 703              	.L34:
 170:modem.c       ****         
 704              		.loc 1 170 0 is_stmt 0 discriminator 1
 705 0098 7B6A     		ldr	r3, [r7, #36]
 706 009a 022B     		cmp	r3, #2
 707 009c BBD9     		bls	.L42
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         //printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,u
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 708              		.loc 1 214 0 is_stmt 1
 709 009e 0023     		movs	r3, #0
 710              	.L36:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 18


 215:modem.c       **** }
 711              		.loc 1 215 0
 712 00a0 1846     		mov	r0, r3
 713 00a2 2837     		adds	r7, r7, #40
 714              		.cfi_def_cfa_offset 8
 715 00a4 BD46     		mov	sp, r7
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 00a6 80BD     		pop	{r7, pc}
 719              	.L44:
 720              		.align	2
 721              	.L43:
 722 00a8 78000000 		.word	.LC6
 723 00ac 00000000 		.word	uart_received_string
 724 00b0 A4000000 		.word	.LC7
 725 00b4 F4000000 		.word	.LC8
 726              		.cfi_endproc
 727              	.LFE72:
 728              		.size	at_write_command, .-at_write_command
 729              		.section	.rodata
 730 0129 000000   		.align	2
 731              	.LC9:
 732 012c 54455354 		.ascii	"TEST_MODEM\000"
 732      5F4D4F44 
 732      454D00
 733 0137 00       		.align	2
 734              	.LC10:
 735 0138 4E6F2072 		.ascii	"No reponse from modem.\000"
 735      65706F6E 
 735      73652066 
 735      726F6D20 
 735      6D6F6465 
 736 014f 00       		.align	2
 737              	.LC11:
 738 0150 4D6F6465 		.ascii	"Modem connected to network.\000"
 738      6D20636F 
 738      6E6E6563 
 738      74656420 
 738      746F206E 
 739              		.section	.text.modem_test,"ax",%progbits
 740              		.align	2
 741              		.global	modem_test
 742              		.thumb
 743              		.thumb_func
 744              		.type	modem_test, %function
 745              	modem_test:
 746              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 747              		.loc 1 218 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 408
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751 0000 B0B5     		push	{r4, r5, r7, lr}
 752              		.cfi_def_cfa_offset 16
 753              		.cfi_offset 4, -16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 19


 754              		.cfi_offset 5, -12
 755              		.cfi_offset 7, -8
 756              		.cfi_offset 14, -4
 757 0002 E6B0     		sub	sp, sp, #408
 758              		.cfi_def_cfa_offset 424
 759 0004 00AF     		add	r7, sp, #0
 760              		.cfi_def_cfa_register 7
 761 0006 3B1D     		adds	r3, r7, #4
 762 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 763              		.loc 1 221 0
 764 000a 07F10C03 		add	r3, r7, #12
 765 000e 0022     		movs	r2, #0
 766 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 767              		.loc 1 223 0
 768 0014 07F10C03 		add	r3, r7, #12
 769 0018 364A     		ldr	r2, .L53
 770 001a 07CA     		ldmia	r2, {r0, r1, r2}
 771 001c 03C3     		stmia	r3!, {r0, r1}
 772 001e 1A80     		strh	r2, [r3]	@ movhi
 773 0020 0233     		adds	r3, r3, #2
 774 0022 120C     		lsrs	r2, r2, #16
 775 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 776              		.loc 1 224 0
 777 0026 07F10C03 		add	r3, r7, #12
 778 002a 8133     		adds	r3, r3, #129
 779 002c 324A     		ldr	r2, .L53+4
 780 002e 1C46     		mov	r4, r3
 781 0030 1546     		mov	r5, r2
 782 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 783 0034 2060     		str	r0, [r4]	@ unaligned
 784 0036 6160     		str	r1, [r4, #4]	@ unaligned
 785 0038 A260     		str	r2, [r4, #8]	@ unaligned
 786 003a E360     		str	r3, [r4, #12]	@ unaligned
 787 003c 2868     		ldr	r0, [r5]	@ unaligned
 788 003e 2061     		str	r0, [r4, #16]	@ unaligned
 789 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 790 0042 AA79     		ldrb	r2, [r5, #6]
 791 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 792 0046 1346     		mov	r3, r2
 793 0048 A375     		strb	r3, [r4, #22]
 794              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 795              		.loc 1 227 0
 796 004a 0023     		movs	r3, #0
 797 004c C7F89431 		str	r3, [r7, #404]
 798 0050 3AE0     		b	.L46
 799              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 20


 800              		.loc 1 229 0
 801 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 802              		.loc 1 231 0
 803 0056 FFF7FEFF 		bl	modem_get_state
 804 005a 0346     		mov	r3, r0
 805 005c 002B     		cmp	r3, #0
 806 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 807              		.loc 1 233 0
 808 0060 FFF7FEFF 		bl	modem_power_up
 809 0064 27E0     		b	.L48
 810              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 811              		.loc 1 236 0
 812 0066 FFF7FEFF 		bl	modem_get_state
 813 006a 0346     		mov	r3, r0
 814 006c 042B     		cmp	r3, #4
 815 006e 22D1     		bne	.L48
 816              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 817              		.loc 1 240 0
 818 0070 FFF7FEFF 		bl	modem_get_network_time
 819 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 820              		.loc 1 241 0
 821 0078 D7F89031 		ldr	r3, [r7, #400]
 822 007c 002B     		cmp	r3, #0
 823 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 824              		.loc 1 242 0
 825 0080 D7F89001 		ldr	r0, [r7, #400]
 826 0084 FFF7FEFF 		bl	setTime
 827              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 828              		.loc 1 245 0
 829 0088 07F10C03 		add	r3, r7, #12
 830 008c 8133     		adds	r3, r3, #129
 831 008e 1B4A     		ldr	r2, .L53+8
 832 0090 1D46     		mov	r5, r3
 833 0092 1446     		mov	r4, r2
 834 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 835 0096 2860     		str	r0, [r5]	@ unaligned
 836 0098 6960     		str	r1, [r5, #4]	@ unaligned
 837 009a AA60     		str	r2, [r5, #8]	@ unaligned
 838 009c EB60     		str	r3, [r5, #12]	@ unaligned
 839 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 840 00a0 2861     		str	r0, [r5, #16]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 21


 841 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 842 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 843              		.loc 1 246 0
 844 00a6 07F10C03 		add	r3, r7, #12
 845 00aa 0122     		movs	r2, #1
 846 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 847              		.loc 1 248 0
 848 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 849              		.loc 1 249 0
 850 00b4 0CE0     		b	.L50
 851              	.L48:
 852              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 853              		.loc 1 252 0 discriminator 2
 854 00b6 4FF47A70 		mov	r0, #1000
 855 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 856              		.loc 1 227 0 discriminator 2
 857 00be D7F89431 		ldr	r3, [r7, #404]
 858 00c2 0133     		adds	r3, r3, #1
 859 00c4 C7F89431 		str	r3, [r7, #404]
 860              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 861              		.loc 1 227 0 is_stmt 0 discriminator 1
 862 00c8 D7F89431 		ldr	r3, [r7, #404]
 863 00cc 3B2B     		cmp	r3, #59
 864 00ce C0DD     		ble	.L51
 865              	.L50:
 866              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 867              		.loc 1 256 0 is_stmt 1
 868 00d0 3B1D     		adds	r3, r7, #4
 869 00d2 1A68     		ldr	r2, [r3]
 870 00d4 07F10C03 		add	r3, r7, #12
 871 00d8 1046     		mov	r0, r2
 872 00da 1946     		mov	r1, r3
 873 00dc 40F28113 		movw	r3, #385
 874 00e0 1A46     		mov	r2, r3
 875 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 876              		.loc 1 257 0
 877 00e6 3B1D     		adds	r3, r7, #4
 878 00e8 1868     		ldr	r0, [r3]
 879 00ea 07F5CC77 		add	r7, r7, #408
 880              		.cfi_def_cfa_offset 16
 881 00ee BD46     		mov	sp, r7
 882              		.cfi_def_cfa_register 13
 883              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 22


 884 00f0 B0BD     		pop	{r4, r5, r7, pc}
 885              	.L54:
 886 00f2 00BF     		.align	2
 887              	.L53:
 888 00f4 2C010000 		.word	.LC9
 889 00f8 38010000 		.word	.LC10
 890 00fc 50010000 		.word	.LC11
 891              		.cfi_endproc
 892              	.LFE73:
 893              		.size	modem_test, .-modem_test
 894              		.section	.text.extract_string,"ax",%progbits
 895              		.align	2
 896              		.global	extract_string
 897              		.thumb
 898              		.thumb_func
 899              		.type	extract_string, %function
 900              	extract_string:
 901              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 902              		.loc 1 260 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 24
 905              		@ frame_needed = 1, uses_anonymous_args = 0
 906 0000 80B5     		push	{r7, lr}
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 7, -8
 909              		.cfi_offset 14, -4
 910 0002 86B0     		sub	sp, sp, #24
 911              		.cfi_def_cfa_offset 32
 912 0004 00AF     		add	r7, sp, #0
 913              		.cfi_def_cfa_register 7
 914 0006 F860     		str	r0, [r7, #12]
 915 0008 B960     		str	r1, [r7, #8]
 916 000a 7A60     		str	r2, [r7, #4]
 917 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 918              		.loc 1 266 0
 919 000e B968     		ldr	r1, [r7, #8]
 920 0010 F868     		ldr	r0, [r7, #12]
 921 0012 FFF7FEFF 		bl	strstr
 922 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 923              		.loc 1 267 0
 924 0018 7B69     		ldr	r3, [r7, #20]
 925 001a 002B     		cmp	r3, #0
 926 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 927              		.loc 1 269 0
 928 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 23


 929 0020 7B61     		str	r3, [r7, #20]
 930              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 931              		.loc 1 272 0
 932 0022 B868     		ldr	r0, [r7, #8]
 933 0024 FFF7FEFF 		bl	strlen
 934 0028 0246     		mov	r2, r0
 935 002a 7B69     		ldr	r3, [r7, #20]
 936 002c 1344     		add	r3, r3, r2
 937 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 938              		.loc 1 277 0
 939 0030 7968     		ldr	r1, [r7, #4]
 940 0032 7869     		ldr	r0, [r7, #20]
 941 0034 FFF7FEFF 		bl	strstr
 942 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 943              		.loc 1 278 0
 944 003a 3B69     		ldr	r3, [r7, #16]
 945 003c 002B     		cmp	r3, #0
 946 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 947              		.loc 1 280 0
 948 0040 F868     		ldr	r0, [r7, #12]
 949 0042 FFF7FEFF 		bl	strlen
 950 0046 0246     		mov	r2, r0
 951 0048 FB68     		ldr	r3, [r7, #12]
 952 004a 1344     		add	r3, r3, r2
 953 004c 3B61     		str	r3, [r7, #16]
 954              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 955              		.loc 1 284 0
 956 004e 3A69     		ldr	r2, [r7, #16]
 957 0050 7B69     		ldr	r3, [r7, #20]
 958 0052 D31A     		subs	r3, r2, r3
 959 0054 1A46     		mov	r2, r3
 960 0056 7969     		ldr	r1, [r7, #20]
 961 0058 3868     		ldr	r0, [r7]
 962 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 963              		.loc 1 285 0
 964 005e 3A69     		ldr	r2, [r7, #16]
 965 0060 7B69     		ldr	r3, [r7, #20]
 966 0062 D31A     		subs	r3, r2, r3
 967 0064 1A46     		mov	r2, r3
 968 0066 3B68     		ldr	r3, [r7]
 969 0068 1344     		add	r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 24


 970 006a 0022     		movs	r2, #0
 971 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 972              		.loc 1 286 0
 973 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 974              		.loc 1 288 0
 975 0070 1846     		mov	r0, r3
 976 0072 1837     		adds	r7, r7, #24
 977              		.cfi_def_cfa_offset 8
 978 0074 BD46     		mov	sp, r7
 979              		.cfi_def_cfa_register 13
 980              		@ sp needed
 981 0076 80BD     		pop	{r7, pc}
 982              		.cfi_endproc
 983              	.LFE74:
 984              		.size	extract_string, .-extract_string
 985              		.section	.rodata
 986              		.align	2
 987              	.LC12:
 988 016c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 988      20746F20 
 988      636F6E6E 
 988      65637420 
 988      746F206E 
 989 0193 00       		.align	2
 990              	.LC13:
 991 0194 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 991      6D207469 
 991      6D656420 
 991      6F757420 
 991      6F6E206E 
 992 01b7 00       		.align	2
 993              	.LC14:
 994 01b8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 994      69726564 
 994      20495020 
 994      61646472 
 994      6573733A 
 995              		.align	2
 996              	.LC15:
 997 01d8 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 997      6D207469 
 997      6D656420 
 997      6F757420 
 997      6F6E2049 
 998              		.section	.text.modem_process_tasks,"ax",%progbits
 999              		.align	2
 1000              		.global	modem_process_tasks
 1001              		.thumb
 1002              		.thumb_func
 1003              		.type	modem_process_tasks, %function
 1004              	modem_process_tasks:
 1005              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 25


 291:modem.c       **** uint8 modem_process_tasks(){
 1006              		.loc 1 291 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 8
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 82B0     		sub	sp, sp, #8
 1015              		.cfi_def_cfa_offset 16
 1016 0004 00AF     		add	r7, sp, #0
 1017              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1018              		.loc 1 293 0
 1019 0006 464B     		ldr	r3, .L73
 1020 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 000a 012B     		cmp	r3, #1
 1022 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1023              		.loc 1 295 0
 1024 000e FFF7FEFF 		bl	getTimeStamp
 1025 0012 0246     		mov	r2, r0
 1026 0014 434B     		ldr	r3, .L73+4
 1027 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1028              		.loc 1 296 0
 1029 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1030              		.loc 1 297 0
 1031 001c 404B     		ldr	r3, .L73
 1032 001e 0222     		movs	r2, #2
 1033 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1034              		.loc 1 298 0
 1035 0022 0123     		movs	r3, #1
 1036 0024 77E0     		b	.L61
 1037              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1038              		.loc 1 302 0
 1039 0026 3E4B     		ldr	r3, .L73
 1040 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 002a 022B     		cmp	r3, #2
 1042 002c 44D1     		bne	.L62
 1043              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1044              		.loc 1 305 0
 1045 002e 0023     		movs	r3, #0
 1046 0030 FB71     		strb	r3, [r7, #7]
 1047 0032 10E0     		b	.L63
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 26


 1048              	.L66:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1049              		.loc 1 307 0
 1050 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If cell signal (rsrp) is strong enough, break and connect to the network
 309:modem.c       ****             // Otherwise, keep checking rsrp
 310:modem.c       ****             if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1051              		.loc 1 310 0
 1052 0038 3B4B     		ldr	r3, .L73+8
 1053 003a 5B69     		ldr	r3, [r3, #20]
 1054 003c 1A2B     		cmp	r3, #26
 1055 003e 03DD     		ble	.L64
 1056              		.loc 1 310 0 is_stmt 0 discriminator 1
 1057 0040 394B     		ldr	r3, .L73+8
 1058 0042 5B69     		ldr	r3, [r3, #20]
 1059 0044 FF2B     		cmp	r3, #255
 1060 0046 0AD1     		bne	.L72
 1061              	.L64:
 311:modem.c       ****                 break;
 312:modem.c       ****             }
 313:modem.c       ****             // Delay for 1 second
 314:modem.c       ****             CyDelay(1000u);
 1062              		.loc 1 314 0 is_stmt 1 discriminator 2
 1063 0048 4FF47A70 		mov	r0, #1000
 1064 004c FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1065              		.loc 1 305 0 discriminator 2
 1066 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1067 0052 0133     		adds	r3, r3, #1
 1068 0054 FB71     		strb	r3, [r7, #7]
 1069              	.L63:
 305:modem.c       ****             // Get cell network stats
 1070              		.loc 1 305 0 is_stmt 0 discriminator 1
 1071 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1072 0058 1D2B     		cmp	r3, #29
 1073 005a EBD9     		bls	.L66
 1074 005c 00E0     		b	.L65
 1075              	.L72:
 311:modem.c       ****                 break;
 1076              		.loc 1 311 0 is_stmt 1
 1077 005e 00BF     		nop
 1078              	.L65:
 1079              	.LBE7:
 315:modem.c       ****         }
 316:modem.c       ****         
 317:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 318:modem.c       ****         if(is_connected_to_cell_network()){
 1080              		.loc 1 318 0
 1081 0060 FFF7FEFF 		bl	is_connected_to_cell_network
 1082 0064 0346     		mov	r3, r0
 1083 0066 002B     		cmp	r3, #0
 1084 0068 13D0     		beq	.L67
 319:modem.c       ****       
 320:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1085              		.loc 1 320 0
 1086 006a FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 27


 1087 006e 0246     		mov	r2, r0
 1088 0070 2C4B     		ldr	r3, .L73+4
 1089 0072 1B68     		ldr	r3, [r3]
 1090 0074 D31A     		subs	r3, r2, r3
 1091 0076 2C4A     		ldr	r2, .L73+8
 1092 0078 9361     		str	r3, [r2, #24]
 321:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1093              		.loc 1 321 0
 1094 007a 2B4B     		ldr	r3, .L73+8
 1095 007c 9B69     		ldr	r3, [r3, #24]
 1096 007e 1A46     		mov	r2, r3
 1097 0080 2A49     		ldr	r1, .L73+12
 1098 0082 0020     		movs	r0, #0
 1099 0084 FFF7FEFF 		bl	printNotif
 322:modem.c       ****                                             modem_stats.time_to_network_connect);
 323:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1100              		.loc 1 323 0
 1101 0088 FFF7FEFF 		bl	set_up_internet_connection
 324:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1102              		.loc 1 324 0
 1103 008c 244B     		ldr	r3, .L73
 1104 008e 0322     		movs	r2, #3
 1105 0090 1A70     		strb	r2, [r3]
 1106              	.L67:
 325:modem.c       ****         }
 326:modem.c       ****         
 327:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 328:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1107              		.loc 1 328 0
 1108 0092 FFF7FEFF 		bl	getTimeStamp
 1109 0096 0246     		mov	r2, r0
 1110 0098 224B     		ldr	r3, .L73+4
 1111 009a 1B68     		ldr	r3, [r3]
 1112 009c D31A     		subs	r3, r2, r3
 1113 009e B42B     		cmp	r3, #180
 1114 00a0 08DD     		ble	.L68
 329:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1115              		.loc 1 329 0
 1116 00a2 1F4B     		ldr	r3, .L73
 1117 00a4 0022     		movs	r2, #0
 1118 00a6 1A70     		strb	r2, [r3]
 330:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1119              		.loc 1 330 0
 1120 00a8 FFF7FEFF 		bl	modem_power_down
 331:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1121              		.loc 1 331 0
 1122 00ac 2049     		ldr	r1, .L73+16
 1123 00ae 0220     		movs	r0, #2
 1124 00b0 FFF7FEFF 		bl	printNotif
 1125              	.L68:
 332:modem.c       ****             
 333:modem.c       ****         }
 334:modem.c       ****         return 0u;//ok to hand off to sleep
 1126              		.loc 1 334 0
 1127 00b4 0023     		movs	r3, #0
 1128 00b6 2EE0     		b	.L61
 1129              	.L62:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 28


 335:modem.c       ****         
 336:modem.c       ****     // Else if modem state is "waiting for IP"
 337:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1130              		.loc 1 337 0
 1131 00b8 194B     		ldr	r3, .L73
 1132 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1133 00bc 032B     		cmp	r3, #3
 1134 00be 29D1     		bne	.L69
 338:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 339:modem.c       ****         if(is_connected_to_internet()){
 1135              		.loc 1 339 0
 1136 00c0 FFF7FEFF 		bl	is_connected_to_internet
 1137 00c4 0346     		mov	r3, r0
 1138 00c6 002B     		cmp	r3, #0
 1139 00c8 11D0     		beq	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1140              		.loc 1 340 0
 1141 00ca 154B     		ldr	r3, .L73
 1142 00cc 0422     		movs	r2, #4
 1143 00ce 1A70     		strb	r2, [r3]
 341:modem.c       ****             // Save/print time to acquire IP address
 342:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1144              		.loc 1 342 0
 1145 00d0 FFF7FEFF 		bl	getTimeStamp
 1146 00d4 0246     		mov	r2, r0
 1147 00d6 134B     		ldr	r3, .L73+4
 1148 00d8 1B68     		ldr	r3, [r3]
 1149 00da D31A     		subs	r3, r2, r3
 1150 00dc 124A     		ldr	r2, .L73+8
 1151 00de D361     		str	r3, [r2, #28]
 343:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1152              		.loc 1 343 0
 1153 00e0 114B     		ldr	r3, .L73+8
 1154 00e2 DB69     		ldr	r3, [r3, #28]
 1155 00e4 1A46     		mov	r2, r3
 1156 00e6 1349     		ldr	r1, .L73+20
 1157 00e8 0020     		movs	r0, #0
 1158 00ea FFF7FEFF 		bl	printNotif
 1159              	.L70:
 344:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 345:modem.c       ****         }
 346:modem.c       ****         
 347:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 348:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1160              		.loc 1 348 0
 1161 00ee FFF7FEFF 		bl	getTimeStamp
 1162 00f2 0246     		mov	r2, r0
 1163 00f4 0B4B     		ldr	r3, .L73+4
 1164 00f6 1B68     		ldr	r3, [r3]
 1165 00f8 D31A     		subs	r3, r2, r3
 1166 00fa E62B     		cmp	r3, #230
 1167 00fc 08DD     		ble	.L71
 349:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1168              		.loc 1 349 0
 1169 00fe 084B     		ldr	r3, .L73
 1170 0100 0022     		movs	r2, #0
 1171 0102 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 29


 350:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1172              		.loc 1 350 0
 1173 0104 FFF7FEFF 		bl	modem_power_down
 351:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1174              		.loc 1 351 0
 1175 0108 0B49     		ldr	r1, .L73+24
 1176 010a 0220     		movs	r0, #2
 1177 010c FFF7FEFF 		bl	printNotif
 1178              	.L71:
 352:modem.c       ****       
 353:modem.c       ****         }
 354:modem.c       ****         return 0u;//ok to hand off to sleep
 1179              		.loc 1 354 0
 1180 0110 0023     		movs	r3, #0
 1181 0112 00E0     		b	.L61
 1182              	.L69:
 355:modem.c       ****     }
 356:modem.c       ****     
 357:modem.c       ****     return 0u;
 1183              		.loc 1 357 0
 1184 0114 0023     		movs	r3, #0
 1185              	.L61:
 358:modem.c       ****     
 359:modem.c       **** }
 1186              		.loc 1 359 0
 1187 0116 1846     		mov	r0, r3
 1188 0118 0837     		adds	r7, r7, #8
 1189              		.cfi_def_cfa_offset 8
 1190 011a BD46     		mov	sp, r7
 1191              		.cfi_def_cfa_register 13
 1192              		@ sp needed
 1193 011c 80BD     		pop	{r7, pc}
 1194              	.L74:
 1195 011e 00BF     		.align	2
 1196              	.L73:
 1197 0120 00000000 		.word	modem_state
 1198 0124 00000000 		.word	modem_start_time_stamp
 1199 0128 00000000 		.word	modem_stats
 1200 012c 6C010000 		.word	.LC12
 1201 0130 94010000 		.word	.LC13
 1202 0134 B8010000 		.word	.LC14
 1203 0138 D8010000 		.word	.LC15
 1204              		.cfi_endproc
 1205              	.LFE75:
 1206              		.size	modem_process_tasks, .-modem_process_tasks
 1207              		.section	.rodata
 1208 01ff 00       		.align	2
 1209              	.LC16:
 1210 0200 43686563 		.ascii	"Checking AT+CREG?\000"
 1210      6B696E67 
 1210      2041542B 
 1210      43524547 
 1210      3F00
 1211 0212 0000     		.align	2
 1212              	.LC17:
 1213 0214 41542B43 		.ascii	"AT+CREG?\015\000"
 1213      5245473F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 30


 1213      0D00
 1214 021e 0000     		.align	2
 1215              	.LC18:
 1216 0220 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1216      61637469 
 1216      6E672073 
 1216      7472696E 
 1216      67204154 
 1217 023b 00       		.align	2
 1218              	.LC19:
 1219 023c 75617274 		.ascii	"uart_received_string: %s\000"
 1219      5F726563 
 1219      65697665 
 1219      645F7374 
 1219      72696E67 
 1220 0255 000000   		.align	2
 1221              	.LC20:
 1222 0258 0D00     		.ascii	"\015\000"
 1223 025a 0000     		.align	2
 1224              	.LC21:
 1225 025c 3A2000   		.ascii	": \000"
 1226 025f 00       		.align	2
 1227              	.LC22:
 1228 0260 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1228      73746572 
 1228      65642074 
 1228      6F206E65 
 1228      74776F72 
 1229              		.align	2
 1230              	.LC23:
 1231 0280 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1231      20657874 
 1231      72616369 
 1231      6E672073 
 1231      7472696E 
 1232 029f 00       		.align	2
 1233              	.LC24:
 1234 02a0 302C3100 		.ascii	"0,1\000"
 1235              		.align	2
 1236              	.LC25:
 1237 02a4 302C3500 		.ascii	"0,5\000"
 1238              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1239              		.align	2
 1240              		.global	is_connected_to_cell_network
 1241              		.thumb
 1242              		.thumb_func
 1243              		.type	is_connected_to_cell_network, %function
 1244              	is_connected_to_cell_network:
 1245              	.LFB76:
 360:modem.c       **** 
 361:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 362:modem.c       **** uint8 is_connected_to_cell_network(){
 1246              		.loc 1 362 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 16
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 31


 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 84B0     		sub	sp, sp, #16
 1255              		.cfi_def_cfa_offset 24
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 363:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 364:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1258              		.loc 1 364 0
 1259 0006 2049     		ldr	r1, .L80
 1260 0008 0020     		movs	r0, #0
 1261 000a FFF7FEFF 		bl	printNotif
 365:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 366:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1262              		.loc 1 366 0
 1263 000e 4FF4FA62 		mov	r2, #2000
 1264 0012 1E49     		ldr	r1, .L80+4
 1265 0014 1E48     		ldr	r0, .L80+8
 1266 0016 FFF7FEFF 		bl	at_write_command
 1267 001a 0346     		mov	r3, r0
 1268 001c FB73     		strb	r3, [r7, #15]
 367:modem.c       ****     
 368:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1269              		.loc 1 368 0
 1270 001e 1D49     		ldr	r1, .L80+12
 1271 0020 0020     		movs	r0, #0
 1272 0022 FFF7FEFF 		bl	printNotif
 369:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1273              		.loc 1 369 0
 1274 0026 1C4A     		ldr	r2, .L80+16
 1275 0028 1C49     		ldr	r1, .L80+20
 1276 002a 0020     		movs	r0, #0
 1277 002c FFF7FEFF 		bl	printNotif
 370:modem.c       ****     
 371:modem.c       ****     // If the modem has a status
 372:modem.c       ****     if(status){
 1278              		.loc 1 372 0
 1279 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1280 0032 002B     		cmp	r3, #0
 1281 0034 23D0     		beq	.L76
 1282              	.LBB8:
 373:modem.c       ****         // Create a character array of length 10 called creg
 374:modem.c       ****         char creg[10];
 375:modem.c       ****         creg[0] = '\0';
 1283              		.loc 1 375 0
 1284 0036 0023     		movs	r3, #0
 1285 0038 3B71     		strb	r3, [r7, #4]
 376:modem.c       ****         // Extract string from the UART
 377:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1286              		.loc 1 377 0
 1287 003a 3B1D     		adds	r3, r7, #4
 1288 003c 184A     		ldr	r2, .L80+24
 1289 003e 1949     		ldr	r1, .L80+28
 1290 0040 1548     		ldr	r0, .L80+16
 1291 0042 FFF7FEFF 		bl	extract_string
 378:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 32


 1292              		.loc 1 378 0
 1293 0046 3B1D     		adds	r3, r7, #4
 1294 0048 1A46     		mov	r2, r3
 1295 004a 1749     		ldr	r1, .L80+32
 1296 004c 0020     		movs	r0, #0
 1297 004e FFF7FEFF 		bl	printNotif
 379:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1298              		.loc 1 379 0
 1299 0052 1649     		ldr	r1, .L80+36
 1300 0054 0020     		movs	r0, #0
 1301 0056 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     
 381:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 382:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1302              		.loc 1 382 0
 1303 005a 3B1D     		adds	r3, r7, #4
 1304 005c 1449     		ldr	r1, .L80+40
 1305 005e 1846     		mov	r0, r3
 1306 0060 FFF7FEFF 		bl	strstr
 1307 0064 0346     		mov	r3, r0
 1308 0066 002B     		cmp	r3, #0
 1309 0068 07D1     		bne	.L77
 1310              		.loc 1 382 0 is_stmt 0 discriminator 1
 1311 006a 3B1D     		adds	r3, r7, #4
 1312 006c 1149     		ldr	r1, .L80+44
 1313 006e 1846     		mov	r0, r3
 1314 0070 FFF7FEFF 		bl	strstr
 1315 0074 0346     		mov	r3, r0
 1316 0076 002B     		cmp	r3, #0
 1317 0078 01D0     		beq	.L76
 1318              	.L77:
 383:modem.c       ****             return 1u;
 1319              		.loc 1 383 0 is_stmt 1
 1320 007a 0123     		movs	r3, #1
 1321 007c 00E0     		b	.L79
 1322              	.L76:
 1323              	.LBE8:
 384:modem.c       ****         }
 385:modem.c       ****     }
 386:modem.c       ****     // If the modem doesn't have a status, return 0u
 387:modem.c       ****     return 0u;
 1324              		.loc 1 387 0
 1325 007e 0023     		movs	r3, #0
 1326              	.L79:
 388:modem.c       ****         
 389:modem.c       **** }
 1327              		.loc 1 389 0
 1328 0080 1846     		mov	r0, r3
 1329 0082 1037     		adds	r7, r7, #16
 1330              		.cfi_def_cfa_offset 8
 1331 0084 BD46     		mov	sp, r7
 1332              		.cfi_def_cfa_register 13
 1333              		@ sp needed
 1334 0086 80BD     		pop	{r7, pc}
 1335              	.L81:
 1336              		.align	2
 1337              	.L80:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 33


 1338 0088 00020000 		.word	.LC16
 1339 008c 00000000 		.word	.LC0
 1340 0090 14020000 		.word	.LC17
 1341 0094 20020000 		.word	.LC18
 1342 0098 00000000 		.word	uart_received_string
 1343 009c 3C020000 		.word	.LC19
 1344 00a0 58020000 		.word	.LC20
 1345 00a4 5C020000 		.word	.LC21
 1346 00a8 60020000 		.word	.LC22
 1347 00ac 80020000 		.word	.LC23
 1348 00b0 A0020000 		.word	.LC24
 1349 00b4 A4020000 		.word	.LC25
 1350              		.cfi_endproc
 1351              	.LFE76:
 1352              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1353              		.section	.rodata
 1354              		.align	2
 1355              	.LC26:
 1356 02a8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1356      47414354 
 1356      3D312C31 
 1356      0D0A00
 1357              		.section	.text.set_up_internet_connection,"ax",%progbits
 1358              		.align	2
 1359              		.global	set_up_internet_connection
 1360              		.thumb
 1361              		.thumb_func
 1362              		.type	set_up_internet_connection, %function
 1363              	set_up_internet_connection:
 1364              	.LFB77:
 390:modem.c       **** 
 391:modem.c       **** // Connect the modem to the internet
 392:modem.c       **** void set_up_internet_connection(){
 1365              		.loc 1 392 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 80B5     		push	{r7, lr}
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 7, -8
 1372              		.cfi_offset 14, -4
 1373 0002 00AF     		add	r7, sp, #0
 1374              		.cfi_def_cfa_register 7
 393:modem.c       ****     
 394:modem.c       ****     //port 3
 395:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 396:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 397:modem.c       ****     
 398:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 399:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 400:modem.c       ****     // <cid>,<stat>
 401:modem.c       ****    
 402:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 403:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1375              		.loc 1 403 0
 1376 0004 4FF47A72 		mov	r2, #1000
 1377 0008 0249     		ldr	r1, .L83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 34


 1378 000a 0348     		ldr	r0, .L83+4
 1379 000c FFF7FEFF 		bl	at_write_command
 404:modem.c       ****     
 405:modem.c       **** }
 1380              		.loc 1 405 0
 1381 0010 00BF     		nop
 1382 0012 80BD     		pop	{r7, pc}
 1383              	.L84:
 1384              		.align	2
 1385              	.L83:
 1386 0014 00000000 		.word	.LC0
 1387 0018 A8020000 		.word	.LC26
 1388              		.cfi_endproc
 1389              	.LFE77:
 1390              		.size	set_up_internet_connection, .-set_up_internet_connection
 1391              		.section	.rodata
 1392 02b7 00       		.align	2
 1393              	.LC27:
 1394 02b8 312C3100 		.ascii	"1,1\000"
 1395              		.align	2
 1396              	.LC28:
 1397 02bc 41542353 		.ascii	"AT#SGACT?\015\000"
 1397      47414354 
 1397      3F0D00
 1398              		.section	.text.is_connected_to_internet,"ax",%progbits
 1399              		.align	2
 1400              		.global	is_connected_to_internet
 1401              		.thumb
 1402              		.thumb_func
 1403              		.type	is_connected_to_internet, %function
 1404              	is_connected_to_internet:
 1405              	.LFB78:
 406:modem.c       **** 
 407:modem.c       **** // Checks if the modem is connected to the internet
 408:modem.c       **** uint8 is_connected_to_internet(){
 1406              		.loc 1 408 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 1, uses_anonymous_args = 0
 1410 0000 80B5     		push	{r7, lr}
 1411              		.cfi_def_cfa_offset 8
 1412              		.cfi_offset 7, -8
 1413              		.cfi_offset 14, -4
 1414 0002 00AF     		add	r7, sp, #0
 1415              		.cfi_def_cfa_register 7
 409:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 410:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 411:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 412:modem.c       ****     // Check for 3,1 if Verizon 
 413:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1416              		.loc 1 413 0
 1417 0004 4FF4FA62 		mov	r2, #2000
 1418 0008 0549     		ldr	r1, .L88
 1419 000a 0648     		ldr	r0, .L88+4
 1420 000c FFF7FEFF 		bl	at_write_command
 1421 0010 0346     		mov	r3, r0
 1422 0012 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 35


 1423 0014 01D0     		beq	.L86
 414:modem.c       ****         return 1u;
 1424              		.loc 1 414 0
 1425 0016 0123     		movs	r3, #1
 1426 0018 00E0     		b	.L87
 1427              	.L86:
 415:modem.c       ****     }
 416:modem.c       ****     return 0u;  
 1428              		.loc 1 416 0
 1429 001a 0023     		movs	r3, #0
 1430              	.L87:
 417:modem.c       **** }
 1431              		.loc 1 417 0
 1432 001c 1846     		mov	r0, r3
 1433 001e 80BD     		pop	{r7, pc}
 1434              	.L89:
 1435              		.align	2
 1436              	.L88:
 1437 0020 B8020000 		.word	.LC27
 1438 0024 BC020000 		.word	.LC28
 1439              		.cfi_endproc
 1440              	.LFE78:
 1441              		.size	is_connected_to_internet, .-is_connected_to_internet
 1442              		.section	.rodata
 1443 02c7 00       		.align	2
 1444              	.LC29:
 1445 02c8 41542B43 		.ascii	"AT+CESQ\015\000"
 1445      4553510D 
 1445      00
 1446 02d1 000000   		.align	2
 1447              	.LC30:
 1448 02d4 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1448      4553513A 
 1448      2025642C 
 1448      25642C25 
 1448      642C2564 
 1449              		.section	.text.get_cell_network_stats,"ax",%progbits
 1450              		.align	2
 1451              		.global	get_cell_network_stats
 1452              		.thumb
 1453              		.thumb_func
 1454              		.type	get_cell_network_stats, %function
 1455              	get_cell_network_stats:
 1456              	.LFB79:
 418:modem.c       **** 
 419:modem.c       **** void get_cell_network_stats(){
 1457              		.loc 1 419 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0000 80B5     		push	{r7, lr}
 1462              		.cfi_def_cfa_offset 8
 1463              		.cfi_offset 7, -8
 1464              		.cfi_offset 14, -4
 1465 0002 86B0     		sub	sp, sp, #24
 1466              		.cfi_def_cfa_offset 32
 1467 0004 04AF     		add	r7, sp, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 36


 1468              		.cfi_def_cfa 7, 16
 420:modem.c       ****     // Initialize values
 421:modem.c       ****     modem_stats.ber = 255;
 1469              		.loc 1 421 0
 1470 0006 154B     		ldr	r3, .L91
 1471 0008 FF22     		movs	r2, #255
 1472 000a 5A60     		str	r2, [r3, #4]
 422:modem.c       ****     modem_stats.ecno = 255;
 1473              		.loc 1 422 0
 1474 000c 134B     		ldr	r3, .L91
 1475 000e FF22     		movs	r2, #255
 1476 0010 DA60     		str	r2, [r3, #12]
 423:modem.c       ****     modem_stats.rscp = 255;
 1477              		.loc 1 423 0
 1478 0012 124B     		ldr	r3, .L91
 1479 0014 FF22     		movs	r2, #255
 1480 0016 9A60     		str	r2, [r3, #8]
 424:modem.c       ****     modem_stats.rsrp = 255;
 1481              		.loc 1 424 0
 1482 0018 104B     		ldr	r3, .L91
 1483 001a FF22     		movs	r2, #255
 1484 001c 5A61     		str	r2, [r3, #20]
 425:modem.c       ****     modem_stats.rsrq = 255;
 1485              		.loc 1 425 0
 1486 001e 0F4B     		ldr	r3, .L91
 1487 0020 FF22     		movs	r2, #255
 1488 0022 1A61     		str	r2, [r3, #16]
 426:modem.c       ****     modem_stats.rxlev = 255;
 1489              		.loc 1 426 0
 1490 0024 0D4B     		ldr	r3, .L91
 1491 0026 FF22     		movs	r2, #255
 1492 0028 1A60     		str	r2, [r3]
 427:modem.c       **** 
 428:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 429:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1493              		.loc 1 429 0
 1494 002a 4FF4FA62 		mov	r2, #2000
 1495 002e 0C49     		ldr	r1, .L91+4
 1496 0030 0C48     		ldr	r0, .L91+8
 1497 0032 FFF7FEFF 		bl	at_write_command
 430:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 431:modem.c       **** 
 432:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1498              		.loc 1 432 0
 1499 0036 0C4B     		ldr	r3, .L91+12
 1500 0038 0393     		str	r3, [sp, #12]
 1501 003a 0C4B     		ldr	r3, .L91+16
 1502 003c 0293     		str	r3, [sp, #8]
 1503 003e 0C4B     		ldr	r3, .L91+20
 1504 0040 0193     		str	r3, [sp, #4]
 1505 0042 0C4B     		ldr	r3, .L91+24
 1506 0044 0093     		str	r3, [sp]
 1507 0046 0C4B     		ldr	r3, .L91+28
 1508 0048 044A     		ldr	r2, .L91
 1509 004a 0C49     		ldr	r1, .L91+32
 1510 004c 0C48     		ldr	r0, .L91+36
 1511 004e FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 37


 1512 0052 7860     		str	r0, [r7, #4]
 433:modem.c       ****         &modem_stats.rxlev,
 434:modem.c       ****         &modem_stats.ber,
 435:modem.c       ****         &modem_stats.rscp,
 436:modem.c       ****         &modem_stats.ecno,
 437:modem.c       ****         &modem_stats.rsrq,
 438:modem.c       ****         &modem_stats.rsrp);
 439:modem.c       **** 
 440:modem.c       ****         //check to see if we’re getting a good received signal strength
 441:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 442:modem.c       ****         //    break;
 443:modem.c       ****         //}
 444:modem.c       ****         // Delay one second
 445:modem.c       ****         //CyDelay(1000u);
 446:modem.c       ****     //}
 447:modem.c       **** }
 1513              		.loc 1 447 0
 1514 0054 00BF     		nop
 1515 0056 0837     		adds	r7, r7, #8
 1516              		.cfi_def_cfa_offset 8
 1517 0058 BD46     		mov	sp, r7
 1518              		.cfi_def_cfa_register 13
 1519              		@ sp needed
 1520 005a 80BD     		pop	{r7, pc}
 1521              	.L92:
 1522              		.align	2
 1523              	.L91:
 1524 005c 00000000 		.word	modem_stats
 1525 0060 00000000 		.word	.LC0
 1526 0064 C8020000 		.word	.LC29
 1527 0068 14000000 		.word	modem_stats+20
 1528 006c 10000000 		.word	modem_stats+16
 1529 0070 0C000000 		.word	modem_stats+12
 1530 0074 08000000 		.word	modem_stats+8
 1531 0078 04000000 		.word	modem_stats+4
 1532 007c D4020000 		.word	.LC30
 1533 0080 00000000 		.word	uart_received_string
 1534              		.cfi_endproc
 1535              	.LFE79:
 1536              		.size	get_cell_network_stats, .-get_cell_network_stats
 1537              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1538              		.align	2
 1539              		.global	updatable_parameters_initialize
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	updatable_parameters_initialize, %function
 1543              	updatable_parameters_initialize:
 1544              	.LFB80:
 448:modem.c       **** 
 449:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 450:modem.c       **** void updatable_parameters_initialize(){
 1545              		.loc 1 450 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549              		@ link register save eliminated.
 1550 0000 80B4     		push	{r7}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 38


 1551              		.cfi_def_cfa_offset 4
 1552              		.cfi_offset 7, -4
 1553 0002 00AF     		add	r7, sp, #0
 1554              		.cfi_def_cfa_register 7
 451:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DO;
 1555              		.loc 1 451 0
 1556 0004 094B     		ldr	r3, .L94
 1557 0006 0522     		movs	r2, #5
 1558 0008 1A70     		strb	r2, [r3]
 452:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_STANDARD;
 1559              		.loc 1 452 0
 1560 000a 084B     		ldr	r3, .L94
 1561 000c 0022     		movs	r2, #0
 1562 000e 5A70     		strb	r2, [r3, #1]
 453:modem.c       ****     updatable_parameters.measure_time = 10u;
 1563              		.loc 1 453 0
 1564 0010 064B     		ldr	r3, .L94
 1565 0012 0A22     		movs	r2, #10
 1566 0014 9A70     		strb	r2, [r3, #2]
 454:modem.c       ****     updatable_parameters.sync_time = 60u;
 1567              		.loc 1 454 0
 1568 0016 054B     		ldr	r3, .L94
 1569 0018 3C22     		movs	r2, #60
 1570 001a DA70     		strb	r2, [r3, #3]
 455:modem.c       ****     updatable_parameters.debug_level = 1u;
 1571              		.loc 1 455 0
 1572 001c 034B     		ldr	r3, .L94
 1573 001e 0122     		movs	r2, #1
 1574 0020 1A71     		strb	r2, [r3, #4]
 456:modem.c       **** }
 1575              		.loc 1 456 0
 1576 0022 00BF     		nop
 1577 0024 BD46     		mov	sp, r7
 1578              		.cfi_def_cfa_register 13
 1579              		@ sp needed
 1580 0026 80BC     		pop	{r7}
 1581              		.cfi_restore 7
 1582              		.cfi_def_cfa_offset 0
 1583 0028 7047     		bx	lr
 1584              	.L95:
 1585 002a 00BF     		.align	2
 1586              	.L94:
 1587 002c 00000000 		.word	updatable_parameters
 1588              		.cfi_endproc
 1589              	.LFE80:
 1590              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1591              		.section	.rodata
 1592 02f2 0000     		.align	2
 1593              	.LC31:
 1594 02f4 4E6F6465 		.ascii	"Node_Type: \000"
 1594      5F547970 
 1594      653A2000 
 1595              		.align	2
 1596              	.LC32:
 1597 0300 53494D5F 		.ascii	"SIM_Type: \000"
 1597      54797065 
 1597      3A2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 39


 1598 030b 00       		.align	2
 1599              	.LC33:
 1600 030c 53616D70 		.ascii	"Sample_Freq: \000"
 1600      6C655F46 
 1600      7265713A 
 1600      2000
 1601 031a 0000     		.align	2
 1602              	.LC34:
 1603 031c 5265706F 		.ascii	"Report_Freq: \000"
 1603      72745F46 
 1603      7265713A 
 1603      2000
 1604 032a 0000     		.align	2
 1605              	.LC35:
 1606 032c 44656275 		.ascii	"Debug_Freq: \000"
 1606      675F4672 
 1606      65713A20 
 1606      00
 1607 0339 000000   		.align	2
 1608              	.LC36:
 1609 033c 256400   		.ascii	"%d\000"
 1610 033f 00       		.align	2
 1611              	.LC37:
 1612 0340 436F756C 		.ascii	"Could not change node type.\000"
 1612      64206E6F 
 1612      74206368 
 1612      616E6765 
 1612      206E6F64 
 1613              		.align	2
 1614              	.LC38:
 1615 035c 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1615      74797065 
 1615      20636861 
 1615      6E676564 
 1615      20746F3A 
 1616 0376 0000     		.align	2
 1617              	.LC39:
 1618 0378 436F756C 		.ascii	"Could not change SIM type.\000"
 1618      64206E6F 
 1618      74206368 
 1618      616E6765 
 1618      2053494D 
 1619 0393 00       		.align	2
 1620              	.LC40:
 1621 0394 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1621      6C696E67 
 1621      20667265 
 1621      7175656E 
 1621      63792063 
 1622              		.align	2
 1623              	.LC41:
 1624 03b8 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1624      64206E6F 
 1624      74207061 
 1624      72736520 
 1624      6E657720 
 1625 03e6 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 40


 1626              	.LC42:
 1627 03e8 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1627      7274696E 
 1627      67206672 
 1627      65717565 
 1627      6E637920 
 1628 040d 000000   		.align	2
 1629              	.LC43:
 1630 0410 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1630      64206E6F 
 1630      74207061 
 1630      72736520 
 1630      6E657720 
 1631 043f 00       		.align	2
 1632              	.LC44:
 1633 0440 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1633      67207072 
 1633      696E7469 
 1633      6E672066 
 1633      72657175 
 1634 046a 0000     		.align	2
 1635              	.LC45:
 1636 046c 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1636      64206E6F 
 1636      74207061 
 1636      72736520 
 1636      6E657720 
 1637              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1638              		.align	2
 1639              		.global	get_updated_parameters_from_malcom
 1640              		.thumb
 1641              		.thumb_func
 1642              		.type	get_updated_parameters_from_malcom, %function
 1643              	get_updated_parameters_from_malcom:
 1644              	.LFB81:
 457:modem.c       **** 
 458:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 459:modem.c       **** void get_updated_parameters_from_malcom(){
 1645              		.loc 1 459 0
 1646              		.cfi_startproc
 1647              		@ args = 0, pretend = 0, frame = 88
 1648              		@ frame_needed = 1, uses_anonymous_args = 0
 1649 0000 90B5     		push	{r4, r7, lr}
 1650              		.cfi_def_cfa_offset 12
 1651              		.cfi_offset 4, -12
 1652              		.cfi_offset 7, -8
 1653              		.cfi_offset 14, -4
 1654 0002 97B0     		sub	sp, sp, #92
 1655              		.cfi_def_cfa_offset 104
 1656 0004 00AF     		add	r7, sp, #0
 1657              		.cfi_def_cfa_register 7
 460:modem.c       ****     
 461:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 462:modem.c       ****     char s_node_type[10];
 463:modem.c       ****     char s_sim_type[10];
 464:modem.c       ****     char s_sample_freq[10];
 465:modem.c       ****     char s_report_freq[10];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 41


 466:modem.c       ****     char s_debug_freq[10];
 467:modem.c       ****     
 468:modem.c       ****     s_node_type[0] = '\0';
 1658              		.loc 1 468 0
 1659 0006 0023     		movs	r3, #0
 1660 0008 87F84C30 		strb	r3, [r7, #76]
 469:modem.c       ****     s_sim_type[0] = '\0';
 1661              		.loc 1 469 0
 1662 000c 0023     		movs	r3, #0
 1663 000e 87F84030 		strb	r3, [r7, #64]
 470:modem.c       ****     s_sample_freq[0] = '\0';
 1664              		.loc 1 470 0
 1665 0012 0023     		movs	r3, #0
 1666 0014 87F83430 		strb	r3, [r7, #52]
 471:modem.c       ****     s_report_freq[0] = '\0';
 1667              		.loc 1 471 0
 1668 0018 0023     		movs	r3, #0
 1669 001a 87F82830 		strb	r3, [r7, #40]
 472:modem.c       ****     s_debug_freq[0] = '\0';
 1670              		.loc 1 472 0
 1671 001e 0023     		movs	r3, #0
 1672 0020 3B77     		strb	r3, [r7, #28]
 473:modem.c       ****     
 474:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 475:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1673              		.loc 1 475 0
 1674 0022 07F14C03 		add	r3, r7, #76
 1675 0026 5F4A     		ldr	r2, .L107
 1676 0028 5F49     		ldr	r1, .L107+4
 1677 002a 6048     		ldr	r0, .L107+8
 1678 002c FFF7FEFF 		bl	extract_string
 476:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1679              		.loc 1 476 0
 1680 0030 07F14003 		add	r3, r7, #64
 1681 0034 5B4A     		ldr	r2, .L107
 1682 0036 5E49     		ldr	r1, .L107+12
 1683 0038 5C48     		ldr	r0, .L107+8
 1684 003a FFF7FEFF 		bl	extract_string
 477:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1685              		.loc 1 477 0
 1686 003e 07F13403 		add	r3, r7, #52
 1687 0042 584A     		ldr	r2, .L107
 1688 0044 5B49     		ldr	r1, .L107+16
 1689 0046 5948     		ldr	r0, .L107+8
 1690 0048 FFF7FEFF 		bl	extract_string
 478:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1691              		.loc 1 478 0
 1692 004c 07F12803 		add	r3, r7, #40
 1693 0050 544A     		ldr	r2, .L107
 1694 0052 5949     		ldr	r1, .L107+20
 1695 0054 5548     		ldr	r0, .L107+8
 1696 0056 FFF7FEFF 		bl	extract_string
 479:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1697              		.loc 1 479 0
 1698 005a 07F11C03 		add	r3, r7, #28
 1699 005e 514A     		ldr	r2, .L107
 1700 0060 5649     		ldr	r1, .L107+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 42


 1701 0062 5248     		ldr	r0, .L107+8
 1702 0064 FFF7FEFF 		bl	extract_string
 480:modem.c       ****     
 481:modem.c       ****     // Create variables for what is sent back from the server
 482:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq;
 483:modem.c       ****     
 484:modem.c       ****     // Scan character arrays and save values 
 485:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1703              		.loc 1 485 0
 1704 0068 07F11802 		add	r2, r7, #24
 1705 006c 07F14C03 		add	r3, r7, #76
 1706 0070 5349     		ldr	r1, .L107+28
 1707 0072 1846     		mov	r0, r3
 1708 0074 FFF7FEFF 		bl	sscanf
 1709 0078 0346     		mov	r3, r0
 1710 007a 012B     		cmp	r3, #1
 1711 007c 03D0     		beq	.L97
 486:modem.c       ****         // influx isn't updating from airtable properly atm so skip this
 487:modem.c       ****         // updatable_parameters.node_type = node_type;
 488:modem.c       ****         // printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 489:modem.c       ****     }else{
 490:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1712              		.loc 1 490 0
 1713 007e 5149     		ldr	r1, .L107+32
 1714 0080 0220     		movs	r0, #2
 1715 0082 FFF7FEFF 		bl	printNotif
 1716              	.L97:
 491:modem.c       ****     }
 492:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1717              		.loc 1 492 0
 1718 0086 07F11402 		add	r2, r7, #20
 1719 008a 07F14003 		add	r3, r7, #64
 1720 008e 4C49     		ldr	r1, .L107+28
 1721 0090 1846     		mov	r0, r3
 1722 0092 FFF7FEFF 		bl	sscanf
 1723 0096 0346     		mov	r3, r0
 1724 0098 012B     		cmp	r3, #1
 1725 009a 0ED1     		bne	.L98
 493:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1726              		.loc 1 493 0
 1727 009c 7B69     		ldr	r3, [r7, #20]
 1728 009e 002B     		cmp	r3, #0
 1729 00a0 14BF     		ite	ne
 1730 00a2 0123     		movne	r3, #1
 1731 00a4 0023     		moveq	r3, #0
 1732 00a6 DAB2     		uxtb	r2, r3
 1733 00a8 474B     		ldr	r3, .L107+36
 1734 00aa 5A70     		strb	r2, [r3, #1]
 494:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1735              		.loc 1 494 0
 1736 00ac 7B69     		ldr	r3, [r7, #20]
 1737 00ae 1A46     		mov	r2, r3
 1738 00b0 4649     		ldr	r1, .L107+40
 1739 00b2 0020     		movs	r0, #0
 1740 00b4 FFF7FEFF 		bl	printNotif
 1741 00b8 03E0     		b	.L99
 1742              	.L98:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 43


 495:modem.c       ****     }else{
 496:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1743              		.loc 1 496 0
 1744 00ba 4549     		ldr	r1, .L107+44
 1745 00bc 0220     		movs	r0, #2
 1746 00be FFF7FEFF 		bl	printNotif
 1747              	.L99:
 497:modem.c       ****     }
 498:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1748              		.loc 1 498 0
 1749 00c2 07F11002 		add	r2, r7, #16
 1750 00c6 07F13403 		add	r3, r7, #52
 1751 00ca 3D49     		ldr	r1, .L107+28
 1752 00cc 1846     		mov	r0, r3
 1753 00ce FFF7FEFF 		bl	sscanf
 1754 00d2 0346     		mov	r3, r0
 1755 00d4 012B     		cmp	r3, #1
 1756 00d6 19D1     		bne	.L100
 499:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1757              		.loc 1 499 0
 1758 00d8 3B69     		ldr	r3, [r7, #16]
 1759 00da DAB2     		uxtb	r2, r3
 1760 00dc 3A4B     		ldr	r3, .L107+36
 1761 00de 9A70     		strb	r2, [r3, #2]
 500:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 501:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1762              		.loc 1 501 0
 1763 00e0 394B     		ldr	r3, .L107+36
 1764 00e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1765 00e4 99B2     		uxth	r1, r3
 1766 00e6 3B4C     		ldr	r4, .L107+48
 1767 00e8 3846     		mov	r0, r7
 1768 00ea 0723     		movs	r3, #7
 1769 00ec 0122     		movs	r2, #1
 1770 00ee FFF7FEFF 		bl	CreateAlarm
 1771 00f2 2246     		mov	r2, r4
 1772 00f4 3B46     		mov	r3, r7
 1773 00f6 1968     		ldr	r1, [r3]	@ unaligned
 1774 00f8 1160     		str	r1, [r2]	@ unaligned
 1775 00fa 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1776 00fc 9380     		strh	r3, [r2, #4]	@ unaligned
 502:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1777              		.loc 1 502 0
 1778 00fe 3B69     		ldr	r3, [r7, #16]
 1779 0100 1A46     		mov	r2, r3
 1780 0102 3549     		ldr	r1, .L107+52
 1781 0104 0020     		movs	r0, #0
 1782 0106 FFF7FEFF 		bl	printNotif
 1783 010a 03E0     		b	.L101
 1784              	.L100:
 503:modem.c       ****     }else{
 504:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1785              		.loc 1 504 0
 1786 010c 3349     		ldr	r1, .L107+56
 1787 010e 0220     		movs	r0, #2
 1788 0110 FFF7FEFF 		bl	printNotif
 1789              	.L101:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 44


 505:modem.c       ****     }
 506:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1790              		.loc 1 506 0
 1791 0114 07F10C02 		add	r2, r7, #12
 1792 0118 07F12803 		add	r3, r7, #40
 1793 011c 2849     		ldr	r1, .L107+28
 1794 011e 1846     		mov	r0, r3
 1795 0120 FFF7FEFF 		bl	sscanf
 1796 0124 0346     		mov	r3, r0
 1797 0126 012B     		cmp	r3, #1
 1798 0128 19D1     		bne	.L102
 507:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1799              		.loc 1 507 0
 1800 012a FB68     		ldr	r3, [r7, #12]
 1801 012c DAB2     		uxtb	r2, r3
 1802 012e 264B     		ldr	r3, .L107+36
 1803 0130 DA70     		strb	r2, [r3, #3]
 508:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 509:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1804              		.loc 1 509 0
 1805 0132 254B     		ldr	r3, .L107+36
 1806 0134 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1807 0136 99B2     		uxth	r1, r3
 1808 0138 294C     		ldr	r4, .L107+60
 1809 013a 3846     		mov	r0, r7
 1810 013c 0723     		movs	r3, #7
 1811 013e 0122     		movs	r2, #1
 1812 0140 FFF7FEFF 		bl	CreateAlarm
 1813 0144 2246     		mov	r2, r4
 1814 0146 3B46     		mov	r3, r7
 1815 0148 1968     		ldr	r1, [r3]	@ unaligned
 1816 014a 1160     		str	r1, [r2]	@ unaligned
 1817 014c 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1818 014e 9380     		strh	r3, [r2, #4]	@ unaligned
 510:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1819              		.loc 1 510 0
 1820 0150 FB68     		ldr	r3, [r7, #12]
 1821 0152 1A46     		mov	r2, r3
 1822 0154 2349     		ldr	r1, .L107+64
 1823 0156 0020     		movs	r0, #0
 1824 0158 FFF7FEFF 		bl	printNotif
 1825 015c 03E0     		b	.L103
 1826              	.L102:
 511:modem.c       ****         }else{
 512:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1827              		.loc 1 512 0
 1828 015e 2249     		ldr	r1, .L107+68
 1829 0160 0220     		movs	r0, #2
 1830 0162 FFF7FEFF 		bl	printNotif
 1831              	.L103:
 513:modem.c       ****     }
 514:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1832              		.loc 1 514 0
 1833 0166 07F10802 		add	r2, r7, #8
 1834 016a 07F11C03 		add	r3, r7, #28
 1835 016e 1449     		ldr	r1, .L107+28
 1836 0170 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 45


 1837 0172 FFF7FEFF 		bl	sscanf
 1838 0176 0346     		mov	r3, r0
 1839 0178 012B     		cmp	r3, #1
 1840 017a 0AD1     		bne	.L104
 515:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1841              		.loc 1 515 0
 1842 017c BB68     		ldr	r3, [r7, #8]
 1843 017e DAB2     		uxtb	r2, r3
 1844 0180 114B     		ldr	r3, .L107+36
 1845 0182 1A71     		strb	r2, [r3, #4]
 516:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1846              		.loc 1 516 0
 1847 0184 BB68     		ldr	r3, [r7, #8]
 1848 0186 1A46     		mov	r2, r3
 1849 0188 1849     		ldr	r1, .L107+72
 1850 018a 0020     		movs	r0, #0
 1851 018c FFF7FEFF 		bl	printNotif
 517:modem.c       ****     }else{
 518:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 519:modem.c       ****     }
 520:modem.c       **** }
 1852              		.loc 1 520 0
 1853 0190 03E0     		b	.L106
 1854              	.L104:
 518:modem.c       ****     }
 1855              		.loc 1 518 0
 1856 0192 1749     		ldr	r1, .L107+76
 1857 0194 0220     		movs	r0, #2
 1858 0196 FFF7FEFF 		bl	printNotif
 1859              	.L106:
 1860              		.loc 1 520 0
 1861 019a 00BF     		nop
 1862 019c 5C37     		adds	r7, r7, #92
 1863              		.cfi_def_cfa_offset 12
 1864 019e BD46     		mov	sp, r7
 1865              		.cfi_def_cfa_register 13
 1866              		@ sp needed
 1867 01a0 90BD     		pop	{r4, r7, pc}
 1868              	.L108:
 1869 01a2 00BF     		.align	2
 1870              	.L107:
 1871 01a4 58020000 		.word	.LC20
 1872 01a8 F4020000 		.word	.LC31
 1873 01ac 00000000 		.word	uart_received_string
 1874 01b0 00030000 		.word	.LC32
 1875 01b4 0C030000 		.word	.LC33
 1876 01b8 1C030000 		.word	.LC34
 1877 01bc 2C030000 		.word	.LC35
 1878 01c0 3C030000 		.word	.LC36
 1879 01c4 40030000 		.word	.LC37
 1880 01c8 00000000 		.word	updatable_parameters
 1881 01cc 5C030000 		.word	.LC38
 1882 01d0 78030000 		.word	.LC39
 1883 01d4 00000000 		.word	alarmMeasure
 1884 01d8 94030000 		.word	.LC40
 1885 01dc B8030000 		.word	.LC41
 1886 01e0 00000000 		.word	alarmSync
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 46


 1887 01e4 E8030000 		.word	.LC42
 1888 01e8 10040000 		.word	.LC43
 1889 01ec 40040000 		.word	.LC44
 1890 01f0 6C040000 		.word	.LC45
 1891              		.cfi_endproc
 1892              	.LFE81:
 1893              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 1894              		.section	.rodata
 1895 049b 00       		.align	2
 1896              	.LC46:
 1897 049c 41542343 		.ascii	"AT#CGMM\015\000"
 1897      474D4D0D 
 1897      00
 1898 04a5 000000   		.align	2
 1899              	.LC47:
 1900 04a8 4D6F6465 		.ascii	"Modem Model: %s\000"
 1900      6D204D6F 
 1900      64656C3A 
 1900      20257300 
 1901              		.align	2
 1902              	.LC48:
 1903 04b8 41542343 		.ascii	"AT#CCID\015\000"
 1903      4349440D 
 1903      00
 1904 04c1 000000   		.align	2
 1905              	.LC49:
 1906 04c4 53494D20 		.ascii	"SIM ID: %s\000"
 1906      49443A20 
 1906      257300
 1907 04cf 00       		.align	2
 1908              	.LC50:
 1909 04d0 41542B43 		.ascii	"AT+CGSN\015\000"
 1909      47534E0D 
 1909      00
 1910 04d9 000000   		.align	2
 1911              	.LC51:
 1912 04dc 494D4549 		.ascii	"IMEI: %s\000"
 1912      3A202573 
 1912      00
 1913 04e5 000000   		.align	2
 1914              	.LC52:
 1915 04e8 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 1915      4744434F 
 1915      4E543D31 
 1915      2C224950 
 1915      222C2277 
 1916 0511 00       		.ascii	"\000"
 1917 0512 0000     		.align	2
 1918              	.LC53:
 1919 0514 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 1919      4744434F 
 1919      4E543D31 
 1919      2C224950 
 1919      222C2273 
 1920              		.align	2
 1921              	.LC54:
 1922 0530 41542B43 		.ascii	"AT+CFUN?\015\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 47


 1922      46554E3F 
 1922      0D00
 1923 053a 0000     		.align	2
 1924              	.LC55:
 1925 053c 4346554E 		.ascii	"CFUN: %s\000"
 1925      3A202573 
 1925      00
 1926 0545 000000   		.align	2
 1927              	.LC56:
 1928 0548 41542B43 		.ascii	"AT+CFUN=1\015\000"
 1928      46554E3D 
 1928      310D00
 1929              		.section	.text.modem_configure_settings,"ax",%progbits
 1930              		.align	2
 1931              		.global	modem_configure_settings
 1932              		.thumb
 1933              		.thumb_func
 1934              		.type	modem_configure_settings, %function
 1935              	modem_configure_settings:
 1936              	.LFB82:
 521:modem.c       ****     
 522:modem.c       **** // Configure the modem settings
 523:modem.c       **** void modem_configure_settings(){
 1937              		.loc 1 523 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 16
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941 0000 80B5     		push	{r7, lr}
 1942              		.cfi_def_cfa_offset 8
 1943              		.cfi_offset 7, -8
 1944              		.cfi_offset 14, -4
 1945 0002 84B0     		sub	sp, sp, #16
 1946              		.cfi_def_cfa_offset 24
 1947 0004 00AF     		add	r7, sp, #0
 1948              		.cfi_def_cfa_register 7
 524:modem.c       ****     
 525:modem.c       ****     // Save/print modem model ID number
 526:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 1949              		.loc 1 526 0
 1950 0006 454B     		ldr	r3, .L118
 1951 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1952 000a 002B     		cmp	r3, #0
 1953 000c 13D1     		bne	.L110
 527:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 528:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 1954              		.loc 1 528 0
 1955 000e 4FF4FA62 		mov	r2, #2000
 1956 0012 4349     		ldr	r1, .L118+4
 1957 0014 4348     		ldr	r0, .L118+8
 1958 0016 FFF7FEFF 		bl	at_write_command
 1959 001a 0346     		mov	r3, r0
 1960 001c 002B     		cmp	r3, #0
 1961 001e 0AD0     		beq	.L110
 529:modem.c       ****             // Extract modem model ID number string from the UART
 530:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 1962              		.loc 1 530 0
 1963 0020 414B     		ldr	r3, .L118+12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 48


 1964 0022 424A     		ldr	r2, .L118+16
 1965 0024 4249     		ldr	r1, .L118+20
 1966 0026 4348     		ldr	r0, .L118+24
 1967 0028 FFF7FEFF 		bl	extract_string
 531:modem.c       ****             // Print modem model ID number
 532:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 1968              		.loc 1 532 0
 1969 002c 3E4A     		ldr	r2, .L118+12
 1970 002e 4249     		ldr	r1, .L118+28
 1971 0030 0020     		movs	r0, #0
 1972 0032 FFF7FEFF 		bl	printNotif
 1973              	.L110:
 533:modem.c       ****         }
 534:modem.c       ****     }
 535:modem.c       ****     
 536:modem.c       ****    // Save/print SIM-card ID
 537:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 1974              		.loc 1 537 0
 1975 0036 394B     		ldr	r3, .L118
 1976 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1977 003a 002B     		cmp	r3, #0
 1978 003c 13D1     		bne	.L111
 538:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 539:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 1979              		.loc 1 539 0
 1980 003e 4FF4FA62 		mov	r2, #2000
 1981 0042 3749     		ldr	r1, .L118+4
 1982 0044 3D48     		ldr	r0, .L118+32
 1983 0046 FFF7FEFF 		bl	at_write_command
 1984 004a 0346     		mov	r3, r0
 1985 004c 002B     		cmp	r3, #0
 1986 004e 0AD0     		beq	.L111
 540:modem.c       ****             // Extract SIM-card ID string from the UART
 541:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 1987              		.loc 1 541 0
 1988 0050 324B     		ldr	r3, .L118
 1989 0052 364A     		ldr	r2, .L118+16
 1990 0054 3649     		ldr	r1, .L118+20
 1991 0056 3748     		ldr	r0, .L118+24
 1992 0058 FFF7FEFF 		bl	extract_string
 542:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 1993              		.loc 1 542 0
 1994 005c 2F4A     		ldr	r2, .L118
 1995 005e 3849     		ldr	r1, .L118+36
 1996 0060 0020     		movs	r0, #0
 1997 0062 FFF7FEFF 		bl	printNotif
 1998              	.L111:
 543:modem.c       ****         }
 544:modem.c       ****    }
 545:modem.c       **** 
 546:modem.c       ****     // Save/print modem IMEI
 547:modem.c       ****     if(modem_info.imei[0] == '\0'){
 1999              		.loc 1 547 0
 2000 0066 2D4B     		ldr	r3, .L118
 2001 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2002 006c 002B     		cmp	r3, #0
 2003 006e 13D1     		bne	.L112
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 49


 548:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 549:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2004              		.loc 1 549 0
 2005 0070 4FF4FA62 		mov	r2, #2000
 2006 0074 2A49     		ldr	r1, .L118+4
 2007 0076 3348     		ldr	r0, .L118+40
 2008 0078 FFF7FEFF 		bl	at_write_command
 2009 007c 0346     		mov	r3, r0
 2010 007e 002B     		cmp	r3, #0
 2011 0080 0AD0     		beq	.L112
 550:modem.c       ****             // Extract modem IMEI number string from the UART
 551:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2012              		.loc 1 551 0
 2013 0082 314B     		ldr	r3, .L118+44
 2014 0084 294A     		ldr	r2, .L118+16
 2015 0086 2A49     		ldr	r1, .L118+20
 2016 0088 2A48     		ldr	r0, .L118+24
 2017 008a FFF7FEFF 		bl	extract_string
 552:modem.c       ****             // Print modem IMEI number
 553:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2018              		.loc 1 553 0
 2019 008e 2E4A     		ldr	r2, .L118+44
 2020 0090 2E49     		ldr	r1, .L118+48
 2021 0092 0020     		movs	r0, #0
 2022 0094 FFF7FEFF 		bl	printNotif
 2023              	.L112:
 554:modem.c       ****         } 
 555:modem.c       ****     }
 556:modem.c       ****     
 557:modem.c       ****     // Configure protocol and cellular end point
 558:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 559:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2024              		.loc 1 559 0
 2025 0098 2D4B     		ldr	r3, .L118+52
 2026 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2027 009c 83F00103 		eor	r3, r3, #1
 2028 00a0 DBB2     		uxtb	r3, r3
 2029 00a2 002B     		cmp	r3, #0
 2030 00a4 06D0     		beq	.L113
 560:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2031              		.loc 1 560 0
 2032 00a6 4FF4FA62 		mov	r2, #2000
 2033 00aa 1D49     		ldr	r1, .L118+4
 2034 00ac 2948     		ldr	r0, .L118+56
 2035 00ae FFF7FEFF 		bl	at_write_command
 2036 00b2 09E0     		b	.L114
 2037              	.L113:
 561:modem.c       ****     
 562:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2038              		.loc 1 562 0
 2039 00b4 264B     		ldr	r3, .L118+52
 2040 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2041 00b8 002B     		cmp	r3, #0
 2042 00ba 05D0     		beq	.L114
 563:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2043              		.loc 1 563 0
 2044 00bc 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 50


 2045 00c0 1749     		ldr	r1, .L118+4
 2046 00c2 2548     		ldr	r0, .L118+60
 2047 00c4 FFF7FEFF 		bl	at_write_command
 2048              	.L114:
 564:modem.c       ****     }
 565:modem.c       ****     
 566:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 567:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 568:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2049              		.loc 1 568 0
 2050 00c8 4FF4FA62 		mov	r2, #2000
 2051 00cc 1449     		ldr	r1, .L118+4
 2052 00ce 2348     		ldr	r0, .L118+64
 2053 00d0 FFF7FEFF 		bl	at_write_command
 2054 00d4 0346     		mov	r3, r0
 2055 00d6 002B     		cmp	r3, #0
 2056 00d8 1BD0     		beq	.L117
 2057              	.LBB9:
 569:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 570:modem.c       ****         CFUN[0] = '\0';
 2058              		.loc 1 570 0
 2059 00da 0023     		movs	r3, #0
 2060 00dc 3B71     		strb	r3, [r7, #4]
 571:modem.c       ****         // Extract UART string recieved from the modem
 572:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2061              		.loc 1 572 0
 2062 00de 3B1D     		adds	r3, r7, #4
 2063 00e0 124A     		ldr	r2, .L118+16
 2064 00e2 1349     		ldr	r1, .L118+20
 2065 00e4 1348     		ldr	r0, .L118+24
 2066 00e6 FFF7FEFF 		bl	extract_string
 573:modem.c       ****         // Print UART string recieved from the modem
 574:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2067              		.loc 1 574 0
 2068 00ea 3B1D     		adds	r3, r7, #4
 2069 00ec 1A46     		mov	r2, r3
 2070 00ee 1C49     		ldr	r1, .L118+68
 2071 00f0 0020     		movs	r0, #0
 2072 00f2 FFF7FEFF 		bl	printNotif
 575:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 576:modem.c       ****         // If it returns NULL, then write another command to the modem
 577:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2073              		.loc 1 577 0
 2074 00f6 3B1D     		adds	r3, r7, #4
 2075 00f8 3121     		movs	r1, #49
 2076 00fa 1846     		mov	r0, r3
 2077 00fc FFF7FEFF 		bl	strchr
 2078 0100 0346     		mov	r3, r0
 2079 0102 002B     		cmp	r3, #0
 2080 0104 05D1     		bne	.L117
 578:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 579:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 580:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2081              		.loc 1 580 0
 2082 0106 4FF4FA62 		mov	r2, #2000
 2083 010a 0549     		ldr	r1, .L118+4
 2084 010c 1548     		ldr	r0, .L118+72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 51


 2085 010e FFF7FEFF 		bl	at_write_command
 2086              	.L117:
 2087              	.LBE9:
 581:modem.c       ****         }
 582:modem.c       ****     }
 583:modem.c       **** 
 584:modem.c       ****     
 585:modem.c       **** }
 2088              		.loc 1 585 0
 2089 0112 00BF     		nop
 2090 0114 1037     		adds	r7, r7, #16
 2091              		.cfi_def_cfa_offset 8
 2092 0116 BD46     		mov	sp, r7
 2093              		.cfi_def_cfa_register 13
 2094              		@ sp needed
 2095 0118 80BD     		pop	{r7, pc}
 2096              	.L119:
 2097 011a 00BF     		.align	2
 2098              	.L118:
 2099 011c 00000000 		.word	modem_info
 2100 0120 00000000 		.word	.LC0
 2101 0124 9C040000 		.word	.LC46
 2102 0128 14000000 		.word	modem_info+20
 2103 012c 58020000 		.word	.LC20
 2104 0130 5C020000 		.word	.LC21
 2105 0134 00000000 		.word	uart_received_string
 2106 0138 A8040000 		.word	.LC47
 2107 013c B8040000 		.word	.LC48
 2108 0140 C4040000 		.word	.LC49
 2109 0144 D0040000 		.word	.LC50
 2110 0148 28000000 		.word	modem_info+40
 2111 014c DC040000 		.word	.LC51
 2112 0150 00000000 		.word	updatable_parameters
 2113 0154 E8040000 		.word	.LC52
 2114 0158 14050000 		.word	.LC53
 2115 015c 30050000 		.word	.LC54
 2116 0160 3C050000 		.word	.LC55
 2117 0164 48050000 		.word	.LC56
 2118              		.cfi_endproc
 2119              	.LFE82:
 2120              		.size	modem_configure_settings, .-modem_configure_settings
 2121              		.section	.rodata
 2122 0553 00       		.align	2
 2123              	.LC57:
 2124 0554 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2124      6D206E6F 
 2124      74207265 
 2124      61647920 
 2124      746F2067 
 2125 0587 6B2E00   		.ascii	"k.\000"
 2126 058a 0000     		.align	2
 2127              	.LC58:
 2128 058c 41542B43 		.ascii	"AT+CCLK?\015\000"
 2128      434C4B3F 
 2128      0D00
 2129 0596 0000     		.align	2
 2130              	.LC59:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 52


 2131 0598 220D00   		.ascii	"\"\015\000"
 2132 059b 00       		.align	2
 2133              	.LC60:
 2134 059c 3A202200 		.ascii	": \"\000"
 2135              		.align	2
 2136              	.LC61:
 2137 05a0 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2137      642F2564 
 2137      2C25643A 
 2137      25643A25 
 2137      642D2564 
 2138 05b5 000000   		.align	2
 2139              	.LC62:
 2140 05b8 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2140      642F2564 
 2140      2C25643A 
 2140      25643A25 
 2140      642B2564 
 2141 05cd 000000   		.align	2
 2142              	.LC63:
 2143 05d0 436F756C 		.ascii	"Could not parse modem time.\000"
 2143      64206E6F 
 2143      74207061 
 2143      72736520 
 2143      6D6F6465 
 2144              		.section	.text.modem_get_network_time,"ax",%progbits
 2145              		.align	2
 2146              		.global	modem_get_network_time
 2147              		.thumb
 2148              		.thumb_func
 2149              		.type	modem_get_network_time, %function
 2150              	modem_get_network_time:
 2151              	.LFB83:
 586:modem.c       **** 
 587:modem.c       **** //returns 0 if modem can't get time
 588:modem.c       **** long modem_get_network_time(){
 2152              		.loc 1 588 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 104
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156 0000 80B5     		push	{r7, lr}
 2157              		.cfi_def_cfa_offset 8
 2158              		.cfi_offset 7, -8
 2159              		.cfi_offset 14, -4
 2160 0002 A0B0     		sub	sp, sp, #128
 2161              		.cfi_def_cfa_offset 136
 2162 0004 06AF     		add	r7, sp, #24
 2163              		.cfi_def_cfa 7, 112
 589:modem.c       ****     
 590:modem.c       ****     //modem reposen format (careful to include the quotes "")
 591:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 592:modem.c       ****     //ex: 14:48 GMT
 593:modem.c       **** 
 594:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 595:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2164              		.loc 1 595 0
 2165 0006 444B     		ldr	r3, .L127
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 53


 2166 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2167 000a 042B     		cmp	r3, #4
 2168 000c 05D0     		beq	.L121
 596:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2169              		.loc 1 596 0
 2170 000e 4349     		ldr	r1, .L127+4
 2171 0010 0220     		movs	r0, #2
 2172 0012 FFF7FEFF 		bl	printNotif
 597:modem.c       ****         return 0;   
 2173              		.loc 1 597 0
 2174 0016 0023     		movs	r3, #0
 2175 0018 7AE0     		b	.L122
 2176              	.L121:
 598:modem.c       ****     }
 599:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2177              		.loc 1 599 0
 2178 001a 0023     		movs	r3, #0
 2179 001c 7B66     		str	r3, [r7, #100]
 600:modem.c       ****     
 601:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 602:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2180              		.loc 1 602 0
 2181 001e 4FF4FA62 		mov	r2, #2000
 2182 0022 3F49     		ldr	r1, .L127+8
 2183 0024 3F48     		ldr	r0, .L127+12
 2184 0026 FFF7FEFF 		bl	at_write_command
 2185 002a 0346     		mov	r3, r0
 2186 002c 002B     		cmp	r3, #0
 2187 002e 6ED0     		beq	.L123
 2188              	.LBB10:
 603:modem.c       ****         // need to set this to /0
 604:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 605:modem.c       ****         network_time[0] = '\0';
 2189              		.loc 1 605 0
 2190 0030 0023     		movs	r3, #0
 2191 0032 87F84430 		strb	r3, [r7, #68]
 606:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 607:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2192              		.loc 1 607 0
 2193 0036 07F14403 		add	r3, r7, #68
 2194 003a 3B4A     		ldr	r2, .L127+16
 2195 003c 3B49     		ldr	r1, .L127+20
 2196 003e 3C48     		ldr	r0, .L127+24
 2197 0040 FFF7FEFF 		bl	extract_string
 608:modem.c       ****         
 609:modem.c       ****         ///////////////////  
 610:modem.c       ****         struct tm t; // Creates variable t of struct tm
 611:modem.c       ****         
 612:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 613:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2198              		.loc 1 613 0
 2199 0044 0023     		movs	r3, #0
 2200 0046 BB62     		str	r3, [r7, #40]
 614:modem.c       ****       
 615:modem.c       ****         // Determines the GMT offset 
 616:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 617:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 54


 618:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2201              		.loc 1 618 0
 2202 0048 07F13C01 		add	r1, r7, #60
 2203 004c 07F14002 		add	r2, r7, #64
 2204 0050 07F14400 		add	r0, r7, #68
 2205 0054 07F12803 		add	r3, r7, #40
 2206 0058 0493     		str	r3, [sp, #16]
 2207 005a 07F12C03 		add	r3, r7, #44
 2208 005e 0393     		str	r3, [sp, #12]
 2209 0060 07F13003 		add	r3, r7, #48
 2210 0064 0293     		str	r3, [sp, #8]
 2211 0066 07F13403 		add	r3, r7, #52
 2212 006a 0193     		str	r3, [sp, #4]
 2213 006c 07F13803 		add	r3, r7, #56
 2214 0070 0093     		str	r3, [sp]
 2215 0072 0B46     		mov	r3, r1
 2216 0074 2F49     		ldr	r1, .L127+28
 2217 0076 FFF7FEFF 		bl	sscanf
 2218 007a 0346     		mov	r3, r0
 2219 007c 072B     		cmp	r3, #7
 2220 007e 06D1     		bne	.L124
 619:modem.c       ****             gmt_offset = gmt_offset*(900);
 2221              		.loc 1 619 0
 2222 0080 BB6A     		ldr	r3, [r7, #40]
 2223 0082 4FF46172 		mov	r2, #900
 2224 0086 02FB03F3 		mul	r3, r2, r3
 2225 008a BB62     		str	r3, [r7, #40]
 2226 008c 27E0     		b	.L125
 2227              	.L124:
 620:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2228              		.loc 1 620 0
 2229 008e 07F13C01 		add	r1, r7, #60
 2230 0092 07F14002 		add	r2, r7, #64
 2231 0096 07F14400 		add	r0, r7, #68
 2232 009a 07F12803 		add	r3, r7, #40
 2233 009e 0493     		str	r3, [sp, #16]
 2234 00a0 07F12C03 		add	r3, r7, #44
 2235 00a4 0393     		str	r3, [sp, #12]
 2236 00a6 07F13003 		add	r3, r7, #48
 2237 00aa 0293     		str	r3, [sp, #8]
 2238 00ac 07F13403 		add	r3, r7, #52
 2239 00b0 0193     		str	r3, [sp, #4]
 2240 00b2 07F13803 		add	r3, r7, #56
 2241 00b6 0093     		str	r3, [sp]
 2242 00b8 0B46     		mov	r3, r1
 2243 00ba 1F49     		ldr	r1, .L127+32
 2244 00bc FFF7FEFF 		bl	sscanf
 2245 00c0 0346     		mov	r3, r0
 2246 00c2 072B     		cmp	r3, #7
 2247 00c4 05D1     		bne	.L126
 621:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2248              		.loc 1 621 0
 2249 00c6 BB6A     		ldr	r3, [r7, #40]
 2250 00c8 1C4A     		ldr	r2, .L127+36
 2251 00ca 02FB03F3 		mul	r3, r2, r3
 2252 00ce BB62     		str	r3, [r7, #40]
 2253 00d0 05E0     		b	.L125
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 55


 2254              	.L126:
 622:modem.c       ****         }else{
 623:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2255              		.loc 1 623 0
 2256 00d2 1B49     		ldr	r1, .L127+40
 2257 00d4 0220     		movs	r0, #2
 2258 00d6 FFF7FEFF 		bl	printNotif
 624:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2259              		.loc 1 624 0
 2260 00da 0023     		movs	r3, #0
 2261 00dc 18E0     		b	.L122
 2262              	.L125:
 625:modem.c       ****         }
 626:modem.c       ****         
 627:modem.c       ****         // Sets each variable to the correct time 
 628:modem.c       ****         t.tm_sec = second;
 2263              		.loc 1 628 0
 2264 00de FB6A     		ldr	r3, [r7, #44]
 2265 00e0 7B60     		str	r3, [r7, #4]
 629:modem.c       ****         t.tm_min = minute;
 2266              		.loc 1 629 0
 2267 00e2 3B6B     		ldr	r3, [r7, #48]
 2268 00e4 BB60     		str	r3, [r7, #8]
 630:modem.c       ****         t.tm_hour = hour;
 2269              		.loc 1 630 0
 2270 00e6 7B6B     		ldr	r3, [r7, #52]
 2271 00e8 FB60     		str	r3, [r7, #12]
 631:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2272              		.loc 1 631 0
 2273 00ea 3B6C     		ldr	r3, [r7, #64]
 2274 00ec 6433     		adds	r3, r3, #100
 2275 00ee BB61     		str	r3, [r7, #24]
 632:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2276              		.loc 1 632 0
 2277 00f0 FB6B     		ldr	r3, [r7, #60]
 2278 00f2 013B     		subs	r3, r3, #1
 2279 00f4 7B61     		str	r3, [r7, #20]
 633:modem.c       ****         t.tm_mday = day;           // Day of the month
 2280              		.loc 1 633 0
 2281 00f6 BB6B     		ldr	r3, [r7, #56]
 2282 00f8 3B61     		str	r3, [r7, #16]
 634:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2283              		.loc 1 634 0
 2284 00fa 0023     		movs	r3, #0
 2285 00fc 7B62     		str	r3, [r7, #36]
 635:modem.c       ****     
 636:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 637:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 638:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2286              		.loc 1 638 0
 2287 00fe 3B1D     		adds	r3, r7, #4
 2288 0100 1846     		mov	r0, r3
 2289 0102 FFF7FEFF 		bl	mktime
 2290 0106 0246     		mov	r2, r0
 2291 0108 BB6A     		ldr	r3, [r7, #40]
 2292 010a 1344     		add	r3, r3, r2
 2293 010c 7B66     		str	r3, [r7, #100]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 56


 2294              	.L123:
 2295              	.LBE10:
 639:modem.c       ****     }
 640:modem.c       ****     
 641:modem.c       ****     return epoch_time;
 2296              		.loc 1 641 0
 2297 010e 7B6E     		ldr	r3, [r7, #100]
 2298              	.L122:
 642:modem.c       **** }
 2299              		.loc 1 642 0
 2300 0110 1846     		mov	r0, r3
 2301 0112 6837     		adds	r7, r7, #104
 2302              		.cfi_def_cfa_offset 8
 2303 0114 BD46     		mov	sp, r7
 2304              		.cfi_def_cfa_register 13
 2305              		@ sp needed
 2306 0116 80BD     		pop	{r7, pc}
 2307              	.L128:
 2308              		.align	2
 2309              	.L127:
 2310 0118 00000000 		.word	modem_state
 2311 011c 54050000 		.word	.LC57
 2312 0120 00000000 		.word	.LC0
 2313 0124 8C050000 		.word	.LC58
 2314 0128 98050000 		.word	.LC59
 2315 012c 9C050000 		.word	.LC60
 2316 0130 00000000 		.word	uart_received_string
 2317 0134 A0050000 		.word	.LC61
 2318 0138 B8050000 		.word	.LC62
 2319 013c 7CFCFFFF 		.word	-900
 2320 0140 D0050000 		.word	.LC63
 2321              		.cfi_endproc
 2322              	.LFE83:
 2323              		.size	modem_get_network_time, .-modem_get_network_time
 2324              		.section	.text.modem_get_state,"ax",%progbits
 2325              		.align	2
 2326              		.global	modem_get_state
 2327              		.thumb
 2328              		.thumb_func
 2329              		.type	modem_get_state, %function
 2330              	modem_get_state:
 2331              	.LFB84:
 643:modem.c       **** 
 644:modem.c       **** // Get the modem state
 645:modem.c       **** uint8 modem_get_state(){
 2332              		.loc 1 645 0
 2333              		.cfi_startproc
 2334              		@ args = 0, pretend = 0, frame = 0
 2335              		@ frame_needed = 1, uses_anonymous_args = 0
 2336              		@ link register save eliminated.
 2337 0000 80B4     		push	{r7}
 2338              		.cfi_def_cfa_offset 4
 2339              		.cfi_offset 7, -4
 2340 0002 00AF     		add	r7, sp, #0
 2341              		.cfi_def_cfa_register 7
 646:modem.c       ****     return modem_state;
 2342              		.loc 1 646 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 57


 2343 0004 024B     		ldr	r3, .L131
 2344 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 647:modem.c       **** }
 2345              		.loc 1 647 0
 2346 0008 1846     		mov	r0, r3
 2347 000a BD46     		mov	sp, r7
 2348              		.cfi_def_cfa_register 13
 2349              		@ sp needed
 2350 000c 80BC     		pop	{r7}
 2351              		.cfi_restore 7
 2352              		.cfi_def_cfa_offset 0
 2353 000e 7047     		bx	lr
 2354              	.L132:
 2355              		.align	2
 2356              	.L131:
 2357 0010 00000000 		.word	modem_state
 2358              		.cfi_endproc
 2359              	.LFE84:
 2360              		.size	modem_get_state, .-modem_get_state
 2361              		.section	.text.modem_sleep,"ax",%progbits
 2362              		.align	2
 2363              		.global	modem_sleep
 2364              		.thumb
 2365              		.thumb_func
 2366              		.type	modem_sleep, %function
 2367              	modem_sleep:
 2368              	.LFB85:
 648:modem.c       **** 
 649:modem.c       **** // Set modem to sleep
 650:modem.c       **** void modem_sleep(){
 2369              		.loc 1 650 0
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 0
 2372              		@ frame_needed = 1, uses_anonymous_args = 0
 2373 0000 80B5     		push	{r7, lr}
 2374              		.cfi_def_cfa_offset 8
 2375              		.cfi_offset 7, -8
 2376              		.cfi_offset 14, -4
 2377 0002 00AF     		add	r7, sp, #0
 2378              		.cfi_def_cfa_register 7
 651:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 652:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2379              		.loc 1 652 0
 2380 0004 FFF7FEFF 		bl	modem_get_state
 2381 0008 0346     		mov	r3, r0
 2382 000a 002B     		cmp	r3, #0
 2383 000c 03D0     		beq	.L135
 653:modem.c       **** 
 654:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2384              		.loc 1 654 0
 2385 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 655:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2386              		.loc 1 655 0
 2387 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2388              	.L135:
 656:modem.c       ****         
 657:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 58


 658:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 659:modem.c       ****      }
 660:modem.c       **** }
 2389              		.loc 1 660 0
 2390 0016 00BF     		nop
 2391 0018 80BD     		pop	{r7, pc}
 2392              		.cfi_endproc
 2393              	.LFE85:
 2394              		.size	modem_sleep, .-modem_sleep
 2395 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2396              		.align	2
 2397              		.global	modem_wakeup
 2398              		.thumb
 2399              		.thumb_func
 2400              		.type	modem_wakeup, %function
 2401              	modem_wakeup:
 2402              	.LFB86:
 661:modem.c       **** 
 662:modem.c       **** // Wakeup the modem
 663:modem.c       **** void modem_wakeup(){
 2403              		.loc 1 663 0
 2404              		.cfi_startproc
 2405              		@ args = 0, pretend = 0, frame = 0
 2406              		@ frame_needed = 1, uses_anonymous_args = 0
 2407 0000 80B5     		push	{r7, lr}
 2408              		.cfi_def_cfa_offset 8
 2409              		.cfi_offset 7, -8
 2410              		.cfi_offset 14, -4
 2411 0002 00AF     		add	r7, sp, #0
 2412              		.cfi_def_cfa_register 7
 664:modem.c       ****     // If modem state is not off then wake it up
 665:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2413              		.loc 1 665 0
 2414 0004 FFF7FEFF 		bl	modem_get_state
 2415 0008 0346     		mov	r3, r0
 2416 000a 002B     		cmp	r3, #0
 2417 000c 0BD0     		beq	.L138
 666:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2418              		.loc 1 666 0
 2419 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 667:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 668:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 669:modem.c       ****         UART_Telit_Wakeup();
 2420              		.loc 1 669 0
 2421 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 670:modem.c       ****         // Remove the need for this pin itterupt
 671:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 672:modem.c       ****         
 673:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 674:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2422              		.loc 1 674 0
 2423 0016 FFF7FEFF 		bl	modem_get_state
 2424 001a 0346     		mov	r3, r0
 2425 001c 032B     		cmp	r3, #3
 2426 001e 02D1     		bne	.L138
 675:modem.c       ****             CyDelay(100u);
 2427              		.loc 1 675 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 59


 2428 0020 6420     		movs	r0, #100
 2429 0022 FFF7FEFF 		bl	CyDelay
 2430              	.L138:
 676:modem.c       ****         }
 677:modem.c       ****      }
 678:modem.c       **** }
 2431              		.loc 1 678 0
 2432 0026 00BF     		nop
 2433 0028 80BD     		pop	{r7, pc}
 2434              		.cfi_endproc
 2435              	.LFE86:
 2436              		.size	modem_wakeup, .-modem_wakeup
 2437 002a 00BF     		.section	.rodata
 2438              		.align	2
 2439              	.LC64:
 2440 05ec 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2440      50494F3D 
 2440      352C312C 
 2440      312C300D 
 2440      00
 2441 05fd 000000   		.align	2
 2442              	.LC65:
 2443 0600 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2443      55504C53 
 2443      45433D31 
 2443      0D00
 2444 060e 0000     		.align	2
 2445              	.LC66:
 2446 0610 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2446      55504C56 
 2446      3D320D00 
 2447              		.align	2
 2448              	.LC67:
 2449 061c 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2449      47505345 
 2449      4E3D310D 
 2449      00
 2450 0629 000000   		.align	2
 2451              	.LC68:
 2452 062c 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2452      4C503D31 
 2452      2C227375 
 2452      706C2E67 
 2452      6F6F676C 
 2453 064d 000000   		.align	2
 2454              	.LC69:
 2455 0650 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2455      47414354 
 2455      3D312C30 
 2455      0D0A00
 2456 065f 00       		.align	2
 2457              	.LC70:
 2458 0660 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2458      43534C4B 
 2458      3D312C31 
 2458      0D00
 2459 066e 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 60


 2460              	.LC71:
 2461 0670 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2461      5053534C 
 2461      53523D31 
 2461      2C312C2C 
 2461      2C2C2C32 
 2462 0686 0000     		.align	2
 2463              	.LC72:
 2464 0688 4E00     		.ascii	"N\000"
 2465 068a 0000     		.align	2
 2466              	.LC73:
 2467 068c 41542447 		.ascii	"AT$GPSACP\015\000"
 2467      50534143 
 2467      500D00
 2468 0697 00       		.align	2
 2469              	.LC74:
 2470 0698 24475053 		.ascii	"$GPSACP: \000"
 2470      4143503A 
 2470      2000
 2471 06a2 0000     		.align	2
 2472              	.LC75:
 2473 06a4 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2473      4143503A 
 2473      20252A66 
 2473      2C25664E 
 2473      2C256657 
 2474              		.global	__aeabi_fdiv
 2475              		.global	__aeabi_f2d
 2476              		.global	__aeabi_ddiv
 2477              		.global	__aeabi_dadd
 2478              		.global	__aeabi_d2f
 2479              		.align	2
 2480              	.LC76:
 2481 06c4 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2481      50494F3D 
 2481      352C302C 
 2481      312C300D 
 2481      00
 2482 06d5 000000   		.align	2
 2483              	.LC77:
 2484 06d8 41542447 		.ascii	"AT$GPSR=0\015\000"
 2484      5053523D 
 2484      300D00
 2485 06e3 00       		.align	2
 2486              	.LC78:
 2487 06e4 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2487      20746F20 
 2487      6C6F636B 
 2487      20475053 
 2487      3A202564 
 2488              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2489              		.align	2
 2490              		.global	modem_get_gps_coordinates
 2491              		.thumb
 2492              		.thumb_func
 2493              		.type	modem_get_gps_coordinates, %function
 2494              	modem_get_gps_coordinates:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 61


 2495              	.LFB87:
 679:modem.c       **** 
 680:modem.c       ****     
 681:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 682:modem.c       **** gps_t modem_get_gps_coordinates(){
 2496              		.loc 1 682 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 56
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500 0000 B0B5     		push	{r4, r5, r7, lr}
 2501              		.cfi_def_cfa_offset 16
 2502              		.cfi_offset 4, -16
 2503              		.cfi_offset 5, -12
 2504              		.cfi_offset 7, -8
 2505              		.cfi_offset 14, -4
 2506 0002 90B0     		sub	sp, sp, #64
 2507              		.cfi_def_cfa_offset 80
 2508 0004 02AF     		add	r7, sp, #8
 2509              		.cfi_def_cfa 7, 72
 2510 0006 7860     		str	r0, [r7, #4]
 683:modem.c       ****     gps_t gps;
 684:modem.c       ****     gps.altitude = 0;
 2511              		.loc 1 684 0
 2512 0008 4FF00003 		mov	r3, #0
 2513 000c FB61     		str	r3, [r7, #28]	@ float
 685:modem.c       ****     gps.longitude = 0;
 2514              		.loc 1 685 0
 2515 000e 4FF00003 		mov	r3, #0
 2516 0012 BB61     		str	r3, [r7, #24]	@ float
 686:modem.c       ****     gps.latitude = 0;
 2517              		.loc 1 686 0
 2518 0014 4FF00003 		mov	r3, #0
 2519 0018 7B61     		str	r3, [r7, #20]	@ float
 687:modem.c       ****     gps.time_to_lock =0;
 2520              		.loc 1 687 0
 2521 001a 0023     		movs	r3, #0
 2522 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 688:modem.c       ****     gps.valid = 0;
 2523              		.loc 1 688 0
 2524 001e 0023     		movs	r3, #0
 2525 0020 87F82230 		strb	r3, [r7, #34]
 689:modem.c       ****     
 690:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 691:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2526              		.loc 1 691 0
 2527 0024 7F4B     		ldr	r3, .L149
 2528 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2529 0028 042B     		cmp	r3, #4
 2530 002a 07D0     		beq	.L140
 692:modem.c       ****         return gps;//where valid = 0
 2531              		.loc 1 692 0
 2532 002c 7B68     		ldr	r3, [r7, #4]
 2533 002e 1C46     		mov	r4, r3
 2534 0030 07F11403 		add	r3, r7, #20
 2535 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2536 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2537 003a EFE0     		b	.L139
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 62


 2538              	.L140:
 693:modem.c       ****     }
 694:modem.c       ****     
 695:modem.c       ****     long lock_time = getTimeStamp();
 2539              		.loc 1 695 0
 2540 003c FFF7FEFF 		bl	getTimeStamp
 2541 0040 3863     		str	r0, [r7, #48]
 696:modem.c       ****     
 697:modem.c       ****     // Enable this for the LTER module
 698:modem.c       ****     // Enable GPS Low-Dropout Regulator
 699:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2542              		.loc 1 699 0
 2543 0042 4FF4FA62 		mov	r2, #2000
 2544 0046 7849     		ldr	r1, .L149+4
 2545 0048 7848     		ldr	r0, .L149+8
 2546 004a FFF7FEFF 		bl	at_write_command
 700:modem.c       ****     
 701:modem.c       ****     // Configure SUPL connection params
 702:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2547              		.loc 1 702 0
 2548 004e 4FF4FA62 		mov	r2, #2000
 2549 0052 7549     		ldr	r1, .L149+4
 2550 0054 7648     		ldr	r0, .L149+12
 2551 0056 FFF7FEFF 		bl	at_write_command
 703:modem.c       ****     
 704:modem.c       ****     // Use SUPL2.0
 705:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2552              		.loc 1 705 0
 2553 005a 4FF4FA62 		mov	r2, #2000
 2554 005e 7249     		ldr	r1, .L149+4
 2555 0060 7448     		ldr	r0, .L149+16
 2556 0062 FFF7FEFF 		bl	at_write_command
 706:modem.c       ****     
 707:modem.c       ****     // Enable AGPS service
 708:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2557              		.loc 1 708 0
 2558 0066 4FF4FA62 		mov	r2, #2000
 2559 006a 6F49     		ldr	r1, .L149+4
 2560 006c 7248     		ldr	r0, .L149+20
 2561 006e FFF7FEFF 		bl	at_write_command
 709:modem.c       ****     
 710:modem.c       ****     // Chose SUPL server, use google public service
 711:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2562              		.loc 1 711 0
 2563 0072 4FF4FA62 		mov	r2, #2000
 2564 0076 6C49     		ldr	r1, .L149+4
 2565 0078 7048     		ldr	r0, .L149+24
 2566 007a FFF7FEFF 		bl	at_write_command
 712:modem.c       ****     
 713:modem.c       ****     //pdp context has to be locked to carrier for this to work
 714:modem.c       ****     
 715:modem.c       ****     // Unlock context since it needs to be used by modem
 716:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2567              		.loc 1 716 0
 2568 007e 4FF4FA62 		mov	r2, #2000
 2569 0082 6949     		ldr	r1, .L149+4
 2570 0084 6E48     		ldr	r0, .L149+28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 63


 2571 0086 FFF7FEFF 		bl	at_write_command
 717:modem.c       ****     
 718:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2572              		.loc 1 718 0
 2573 008a 4FF4FA62 		mov	r2, #2000
 2574 008e 6649     		ldr	r1, .L149+4
 2575 0090 6C48     		ldr	r0, .L149+32
 2576 0092 FFF7FEFF 		bl	at_write_command
 719:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 720:modem.c       ****     
 721:modem.c       ****     // Relock the context
 722:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2577              		.loc 1 722 0
 2578 0096 42F21072 		movw	r2, #10000
 2579 009a 6349     		ldr	r1, .L149+4
 2580 009c 6A48     		ldr	r0, .L149+36
 2581 009e FFF7FEFF 		bl	at_write_command
 723:modem.c       ****     
 724:modem.c       ****     //start AGPS service
 725:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2582              		.loc 1 725 0
 2583 00a2 4FF4FA62 		mov	r2, #2000
 2584 00a6 6049     		ldr	r1, .L149+4
 2585 00a8 6848     		ldr	r0, .L149+40
 2586 00aa FFF7FEFF 		bl	at_write_command
 726:modem.c       ****     
 727:modem.c       ****     
 728:modem.c       ****     // Start the AGPS service
 729:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 730:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 731:modem.c       ****     
 732:modem.c       ****     
 733:modem.c       ****  
 734:modem.c       ****     uint8 gps_status = 0;
 2587              		.loc 1 734 0
 2588 00ae 0023     		movs	r3, #0
 2589 00b0 87F82F30 		strb	r3, [r7, #47]
 2590              	.LBB11:
 735:modem.c       ****     for(uint16 i=0;i<200;i++){
 2591              		.loc 1 735 0
 2592 00b4 0023     		movs	r3, #0
 2593 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2594 00b8 13E0     		b	.L142
 2595              	.L145:
 736:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2596              		.loc 1 736 0
 2597 00ba 4FF4FA62 		mov	r2, #2000
 2598 00be 6449     		ldr	r1, .L149+44
 2599 00c0 6448     		ldr	r0, .L149+48
 2600 00c2 FFF7FEFF 		bl	at_write_command
 2601 00c6 0346     		mov	r3, r0
 2602 00c8 87F82F30 		strb	r3, [r7, #47]
 737:modem.c       ****         if(gps_status){
 2603              		.loc 1 737 0
 2604 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2605 00d0 002B     		cmp	r3, #0
 2606 00d2 0AD1     		bne	.L148
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 64


 738:modem.c       ****             break;   
 739:modem.c       ****         }
 740:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2607              		.loc 1 740 0 discriminator 2
 2608 00d4 4FF47A70 		mov	r0, #1000
 2609 00d8 FFF7FEFF 		bl	CyDelay
 735:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2610              		.loc 1 735 0 discriminator 2
 2611 00dc FB8E     		ldrh	r3, [r7, #54]
 2612 00de 0133     		adds	r3, r3, #1
 2613 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2614              	.L142:
 735:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2615              		.loc 1 735 0 is_stmt 0 discriminator 1
 2616 00e2 FB8E     		ldrh	r3, [r7, #54]
 2617 00e4 C72B     		cmp	r3, #199
 2618 00e6 E8D9     		bls	.L145
 2619 00e8 00E0     		b	.L144
 2620              	.L148:
 738:modem.c       ****             break;   
 2621              		.loc 1 738 0 is_stmt 1
 2622 00ea 00BF     		nop
 2623              	.L144:
 2624              	.LBE11:
 741:modem.c       ****     }
 742:modem.c       ****     
 743:modem.c       ****     //parse data here
 744:modem.c       ****     
 745:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 746:modem.c       ****     float lat;
 747:modem.c       ****     float lon;
 748:modem.c       ****     float alt;
 749:modem.c       ****     
 750:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 751:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 752:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2625              		.loc 1 752 0
 2626 00ec 5A49     		ldr	r1, .L149+52
 2627 00ee 5B48     		ldr	r0, .L149+56
 2628 00f0 FFF7FEFF 		bl	strstr
 2629 00f4 B862     		str	r0, [r7, #40]
 753:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 754:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 755:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2630              		.loc 1 755 0
 2631 00f6 07F10C01 		add	r1, r7, #12
 2632 00fa 07F11002 		add	r2, r7, #16
 2633 00fe 07F10803 		add	r3, r7, #8
 2634 0102 0093     		str	r3, [sp]
 2635 0104 0B46     		mov	r3, r1
 2636 0106 5649     		ldr	r1, .L149+60
 2637 0108 B86A     		ldr	r0, [r7, #40]
 2638 010a FFF7FEFF 		bl	sscanf
 2639 010e 7862     		str	r0, [r7, #36]
 756:modem.c       ****     if(match >= 3){
 2640              		.loc 1 756 0
 2641 0110 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 65


 2642 0112 022B     		cmp	r3, #2
 2643 0114 60DD     		ble	.L146
 757:modem.c       ****         // Calculate lat and lon
 758:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 759:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 760:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2644              		.loc 1 760 0
 2645 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2646 0118 5249     		ldr	r1, .L149+64
 2647 011a 1846     		mov	r0, r3
 2648 011c FFF7FEFF 		bl	__aeabi_fdiv
 2649 0120 0346     		mov	r3, r0
 2650 0122 1846     		mov	r0, r3
 2651 0124 FFF7FEFF 		bl	floorf
 2652 0128 0346     		mov	r3, r0
 2653 012a 1846     		mov	r0, r3
 2654 012c FFF7FEFF 		bl	__aeabi_f2d
 2655 0130 0446     		mov	r4, r0
 2656 0132 0D46     		mov	r5, r1
 2657 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2658 0136 1846     		mov	r0, r3
 2659 0138 FFF7FEFF 		bl	__aeabi_f2d
 2660 013c 4FF00002 		mov	r2, #0
 2661 0140 494B     		ldr	r3, .L149+68
 2662 0142 FFF7FEFF 		bl	fmod
 2663 0146 4FF00002 		mov	r2, #0
 2664 014a 484B     		ldr	r3, .L149+72
 2665 014c FFF7FEFF 		bl	__aeabi_ddiv
 2666 0150 0246     		mov	r2, r0
 2667 0152 0B46     		mov	r3, r1
 2668 0154 2046     		mov	r0, r4
 2669 0156 2946     		mov	r1, r5
 2670 0158 FFF7FEFF 		bl	__aeabi_dadd
 2671 015c 0346     		mov	r3, r0
 2672 015e 0C46     		mov	r4, r1
 2673 0160 1846     		mov	r0, r3
 2674 0162 2146     		mov	r1, r4
 2675 0164 FFF7FEFF 		bl	__aeabi_d2f
 2676 0168 0346     		mov	r3, r0
 2677 016a 3B61     		str	r3, [r7, #16]	@ float
 761:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2678              		.loc 1 761 0
 2679 016c FB68     		ldr	r3, [r7, #12]	@ float
 2680 016e 3D49     		ldr	r1, .L149+64
 2681 0170 1846     		mov	r0, r3
 2682 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2683 0176 0346     		mov	r3, r0
 2684 0178 1846     		mov	r0, r3
 2685 017a FFF7FEFF 		bl	floorf
 2686 017e 0346     		mov	r3, r0
 2687 0180 1846     		mov	r0, r3
 2688 0182 FFF7FEFF 		bl	__aeabi_f2d
 2689 0186 0446     		mov	r4, r0
 2690 0188 0D46     		mov	r5, r1
 2691 018a FB68     		ldr	r3, [r7, #12]	@ float
 2692 018c 1846     		mov	r0, r3
 2693 018e FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 66


 2694 0192 4FF00002 		mov	r2, #0
 2695 0196 344B     		ldr	r3, .L149+68
 2696 0198 FFF7FEFF 		bl	fmod
 2697 019c 4FF00002 		mov	r2, #0
 2698 01a0 324B     		ldr	r3, .L149+72
 2699 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2700 01a6 0246     		mov	r2, r0
 2701 01a8 0B46     		mov	r3, r1
 2702 01aa 2046     		mov	r0, r4
 2703 01ac 2946     		mov	r1, r5
 2704 01ae FFF7FEFF 		bl	__aeabi_dadd
 2705 01b2 0346     		mov	r3, r0
 2706 01b4 0C46     		mov	r4, r1
 2707 01b6 1846     		mov	r0, r3
 2708 01b8 2146     		mov	r1, r4
 2709 01ba FFF7FEFF 		bl	__aeabi_d2f
 2710 01be 0346     		mov	r3, r0
 2711 01c0 83F00043 		eor	r3, r3, #-2147483648
 2712 01c4 FB60     		str	r3, [r7, #12]	@ float
 762:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2713              		.loc 1 762 0
 2714 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2715 01c8 FB61     		str	r3, [r7, #28]	@ float
 763:modem.c       ****         gps.latitude = lat;
 2716              		.loc 1 763 0
 2717 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2718 01cc 7B61     		str	r3, [r7, #20]	@ float
 764:modem.c       ****         gps.longitude = lon;
 2719              		.loc 1 764 0
 2720 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2721 01d0 BB61     		str	r3, [r7, #24]	@ float
 765:modem.c       ****         gps.valid = 1;
 2722              		.loc 1 765 0
 2723 01d2 0123     		movs	r3, #1
 2724 01d4 87F82230 		strb	r3, [r7, #34]
 2725              	.L146:
 766:modem.c       ****     }
 767:modem.c       ****     
 768:modem.c       ****     // Disable LDO, just in case
 769:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2726              		.loc 1 769 0
 2727 01d8 4FF4FA62 		mov	r2, #2000
 2728 01dc 1249     		ldr	r1, .L149+4
 2729 01de 2448     		ldr	r0, .L149+76
 2730 01e0 FFF7FEFF 		bl	at_write_command
 770:modem.c       ****     
 771:modem.c       ****     // Flush modem's GPS data, just in case
 772:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2731              		.loc 1 772 0
 2732 01e4 4FF4FA62 		mov	r2, #2000
 2733 01e8 0F49     		ldr	r1, .L149+4
 2734 01ea 2248     		ldr	r0, .L149+80
 2735 01ec FFF7FEFF 		bl	at_write_command
 773:modem.c       ****     
 774:modem.c       ****     
 775:modem.c       ****     
 776:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 67


 777:modem.c       ****     
 778:modem.c       ****     /* Relevant to 3g modem, can ignore
 779:modem.c       ****     
 780:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 781:modem.c       ****     //AT$GPSQOS=50,50,100,0
 782:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 783:modem.c       ****     
 784:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 785:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 786:modem.c       ****     
 787:modem.c       ****     //unlock contedt, simnce its being used by modem
 788:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 789:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 790:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 791:modem.c       ****     
 792:modem.c       ****     //unlock contedt, simnce its being used by modem
 793:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 794:modem.c       ****     
 795:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 796:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 797:modem.c       ****     
 798:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 799:modem.c       ****    uint8 gps_status = 0;
 800:modem.c       ****     for(uint16 i=0;i<200;i++){
 801:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 802:modem.c       ****         if(gps_status){
 803:modem.c       ****             break;   
 804:modem.c       ****         }
 805:modem.c       ****   }
 806:modem.c       ****     
 807:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 808:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 809:modem.c       ****     if(gps_status){
 810:modem.c       ****         float lat,lon,alt = 0;
 811:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 812:modem.c       ****             gps.altitude = alt;
 813:modem.c       ****             gps.latitude = lat/60;
 814:modem.c       ****             gps.longitude = lon/60;
 815:modem.c       ****             gps.valid = 1;
 816:modem.c       ****         }
 817:modem.c       ****         
 818:modem.c       ****     }
 819:modem.c       ****     
 820:modem.c       ****     //turn off gps
 821:modem.c       ****     //AT$GPSP=0
 822:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 823:modem.c       ****     
 824:modem.c       ****     */
 825:modem.c       **** 
 826:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 827:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2736              		.loc 1 827 0
 2737 01f0 FFF7FEFF 		bl	getTimeStamp
 2738 01f4 0246     		mov	r2, r0
 2739 01f6 3B6B     		ldr	r3, [r7, #48]
 2740 01f8 D31A     		subs	r3, r2, r3
 2741 01fa 3B63     		str	r3, [r7, #48]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 68


 828:modem.c       ****     gps.time_to_lock = lock_time;
 2742              		.loc 1 828 0
 2743 01fc 3B6B     		ldr	r3, [r7, #48]
 2744 01fe 9BB2     		uxth	r3, r3
 2745 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 829:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2746              		.loc 1 829 0
 2747 0202 3B8C     		ldrh	r3, [r7, #32]
 2748 0204 1A46     		mov	r2, r3
 2749 0206 1C49     		ldr	r1, .L149+84
 2750 0208 0020     		movs	r0, #0
 2751 020a FFF7FEFF 		bl	printNotif
 830:modem.c       ****     
 831:modem.c       ****     return gps;
 2752              		.loc 1 831 0
 2753 020e 7B68     		ldr	r3, [r7, #4]
 2754 0210 1C46     		mov	r4, r3
 2755 0212 07F11403 		add	r3, r7, #20
 2756 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2757 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2758              	.L139:
 832:modem.c       ****     
 833:modem.c       **** }
 2759              		.loc 1 833 0
 2760 021c 7868     		ldr	r0, [r7, #4]
 2761 021e 3837     		adds	r7, r7, #56
 2762              		.cfi_def_cfa_offset 16
 2763 0220 BD46     		mov	sp, r7
 2764              		.cfi_def_cfa_register 13
 2765              		@ sp needed
 2766 0222 B0BD     		pop	{r4, r5, r7, pc}
 2767              	.L150:
 2768              		.align	2
 2769              	.L149:
 2770 0224 00000000 		.word	modem_state
 2771 0228 00000000 		.word	.LC0
 2772 022c EC050000 		.word	.LC64
 2773 0230 00060000 		.word	.LC65
 2774 0234 10060000 		.word	.LC66
 2775 0238 1C060000 		.word	.LC67
 2776 023c 2C060000 		.word	.LC68
 2777 0240 50060000 		.word	.LC69
 2778 0244 60060000 		.word	.LC70
 2779 0248 A8020000 		.word	.LC26
 2780 024c 70060000 		.word	.LC71
 2781 0250 88060000 		.word	.LC72
 2782 0254 8C060000 		.word	.LC73
 2783 0258 98060000 		.word	.LC74
 2784 025c 00000000 		.word	uart_received_string
 2785 0260 A4060000 		.word	.LC75
 2786 0264 0000C842 		.word	1120403456
 2787 0268 00005940 		.word	1079574528
 2788 026c 00004E40 		.word	1078853632
 2789 0270 C4060000 		.word	.LC76
 2790 0274 D8060000 		.word	.LC77
 2791 0278 E4060000 		.word	.LC78
 2792              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 69


 2793              	.LFE87:
 2794              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2795              		.text
 2796              	.Letext0:
 2797              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2798              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2799              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2800              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2801              		.file 6 "testing.h"
 2802              		.file 7 "data.h"
 2803              		.file 8 "modem.h"
 2804              		.file 9 "notoriOS.h"
 2805              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2806              		.section	.debug_info,"",%progbits
 2807              	.Ldebug_info0:
 2808 0000 D20B0000 		.4byte	0xbd2
 2809 0004 0400     		.2byte	0x4
 2810 0006 00000000 		.4byte	.Ldebug_abbrev0
 2811 000a 04       		.byte	0x4
 2812 000b 01       		.uleb128 0x1
 2813 000c 64000000 		.4byte	.LASF159
 2814 0010 0C       		.byte	0xc
 2815 0011 D1030000 		.4byte	.LASF160
 2816 0015 16050000 		.4byte	.LASF161
 2817 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2818 001d 00000000 		.4byte	0
 2819 0021 00000000 		.4byte	.Ldebug_line0
 2820 0025 02       		.uleb128 0x2
 2821 0026 01       		.byte	0x1
 2822 0027 06       		.byte	0x6
 2823 0028 5B010000 		.4byte	.LASF0
 2824 002c 03       		.uleb128 0x3
 2825 002d 38000000 		.4byte	.LASF4
 2826 0031 02       		.byte	0x2
 2827 0032 1D       		.byte	0x1d
 2828 0033 37000000 		.4byte	0x37
 2829 0037 02       		.uleb128 0x2
 2830 0038 01       		.byte	0x1
 2831 0039 08       		.byte	0x8
 2832 003a D3050000 		.4byte	.LASF1
 2833 003e 02       		.uleb128 0x2
 2834 003f 02       		.byte	0x2
 2835 0040 05       		.byte	0x5
 2836 0041 09040000 		.4byte	.LASF2
 2837 0045 02       		.uleb128 0x2
 2838 0046 02       		.byte	0x2
 2839 0047 07       		.byte	0x7
 2840 0048 69020000 		.4byte	.LASF3
 2841 004c 03       		.uleb128 0x3
 2842 004d 1E040000 		.4byte	.LASF5
 2843 0051 02       		.byte	0x2
 2844 0052 3F       		.byte	0x3f
 2845 0053 57000000 		.4byte	0x57
 2846 0057 02       		.uleb128 0x2
 2847 0058 04       		.byte	0x4
 2848 0059 05       		.byte	0x5
 2849 005a E3010000 		.4byte	.LASF6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 70


 2850 005e 03       		.uleb128 0x3
 2851 005f 8C020000 		.4byte	.LASF7
 2852 0063 02       		.byte	0x2
 2853 0064 41       		.byte	0x41
 2854 0065 69000000 		.4byte	0x69
 2855 0069 02       		.uleb128 0x2
 2856 006a 04       		.byte	0x4
 2857 006b 07       		.byte	0x7
 2858 006c 38030000 		.4byte	.LASF8
 2859 0070 02       		.uleb128 0x2
 2860 0071 08       		.byte	0x8
 2861 0072 05       		.byte	0x5
 2862 0073 4D010000 		.4byte	.LASF9
 2863 0077 02       		.uleb128 0x2
 2864 0078 08       		.byte	0x8
 2865 0079 07       		.byte	0x7
 2866 007a FF000000 		.4byte	.LASF10
 2867 007e 04       		.uleb128 0x4
 2868 007f 04       		.byte	0x4
 2869 0080 05       		.byte	0x5
 2870 0081 696E7400 		.ascii	"int\000"
 2871 0085 02       		.uleb128 0x2
 2872 0086 04       		.byte	0x4
 2873 0087 07       		.byte	0x7
 2874 0088 B9060000 		.4byte	.LASF11
 2875 008c 03       		.uleb128 0x3
 2876 008d FC070000 		.4byte	.LASF12
 2877 0091 03       		.byte	0x3
 2878 0092 18       		.byte	0x18
 2879 0093 2C000000 		.4byte	0x2c
 2880 0097 03       		.uleb128 0x3
 2881 0098 CB050000 		.4byte	.LASF13
 2882 009c 03       		.byte	0x3
 2883 009d 2C       		.byte	0x2c
 2884 009e 4C000000 		.4byte	0x4c
 2885 00a2 03       		.uleb128 0x3
 2886 00a3 8C070000 		.4byte	.LASF14
 2887 00a7 03       		.byte	0x3
 2888 00a8 30       		.byte	0x30
 2889 00a9 5E000000 		.4byte	0x5e
 2890 00ad 05       		.uleb128 0x5
 2891 00ae 1B020000 		.4byte	.LASF15
 2892 00b2 04       		.byte	0x4
 2893 00b3 9201     		.2byte	0x192
 2894 00b5 37000000 		.4byte	0x37
 2895 00b9 05       		.uleb128 0x5
 2896 00ba 0B000000 		.4byte	.LASF16
 2897 00be 04       		.byte	0x4
 2898 00bf 9301     		.2byte	0x193
 2899 00c1 45000000 		.4byte	0x45
 2900 00c5 05       		.uleb128 0x5
 2901 00c6 7C020000 		.4byte	.LASF17
 2902 00ca 04       		.byte	0x4
 2903 00cb 9401     		.2byte	0x194
 2904 00cd 69000000 		.4byte	0x69
 2905 00d1 05       		.uleb128 0x5
 2906 00d2 04080000 		.4byte	.LASF18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 71


 2907 00d6 04       		.byte	0x4
 2908 00d7 9601     		.2byte	0x196
 2909 00d9 3E000000 		.4byte	0x3e
 2910 00dd 05       		.uleb128 0x5
 2911 00de 28020000 		.4byte	.LASF19
 2912 00e2 04       		.byte	0x4
 2913 00e3 9701     		.2byte	0x197
 2914 00e5 57000000 		.4byte	0x57
 2915 00e9 02       		.uleb128 0x2
 2916 00ea 04       		.byte	0x4
 2917 00eb 04       		.byte	0x4
 2918 00ec 84050000 		.4byte	.LASF20
 2919 00f0 02       		.uleb128 0x2
 2920 00f1 08       		.byte	0x8
 2921 00f2 04       		.byte	0x4
 2922 00f3 21020000 		.4byte	.LASF21
 2923 00f7 02       		.uleb128 0x2
 2924 00f8 01       		.byte	0x1
 2925 00f9 08       		.byte	0x8
 2926 00fa A0060000 		.4byte	.LASF22
 2927 00fe 02       		.uleb128 0x2
 2928 00ff 08       		.byte	0x8
 2929 0100 04       		.byte	0x4
 2930 0101 94060000 		.4byte	.LASF23
 2931 0105 02       		.uleb128 0x2
 2932 0106 04       		.byte	0x4
 2933 0107 07       		.byte	0x7
 2934 0108 A0040000 		.4byte	.LASF24
 2935 010c 06       		.uleb128 0x6
 2936 010d 04       		.byte	0x4
 2937 010e F7000000 		.4byte	0xf7
 2938 0112 06       		.uleb128 0x6
 2939 0113 04       		.byte	0x4
 2940 0114 18010000 		.4byte	0x118
 2941 0118 07       		.uleb128 0x7
 2942 0119 F7000000 		.4byte	0xf7
 2943 011d 08       		.uleb128 0x8
 2944 011e F7000000 		.4byte	0xf7
 2945 0122 2D010000 		.4byte	0x12d
 2946 0126 09       		.uleb128 0x9
 2947 0127 05010000 		.4byte	0x105
 2948 012b 17       		.byte	0x17
 2949 012c 00       		.byte	0
 2950 012d 0A       		.uleb128 0xa
 2951 012e 746D00   		.ascii	"tm\000"
 2952 0131 24       		.byte	0x24
 2953 0132 05       		.byte	0x5
 2954 0133 21       		.byte	0x21
 2955 0134 A5010000 		.4byte	0x1a5
 2956 0138 0B       		.uleb128 0xb
 2957 0139 95070000 		.4byte	.LASF25
 2958 013d 05       		.byte	0x5
 2959 013e 23       		.byte	0x23
 2960 013f 7E000000 		.4byte	0x7e
 2961 0143 00       		.byte	0
 2962 0144 0B       		.uleb128 0xb
 2963 0145 99040000 		.4byte	.LASF26
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 72


 2964 0149 05       		.byte	0x5
 2965 014a 24       		.byte	0x24
 2966 014b 7E000000 		.4byte	0x7e
 2967 014f 04       		.byte	0x4
 2968 0150 0B       		.uleb128 0xb
 2969 0151 18000000 		.4byte	.LASF27
 2970 0155 05       		.byte	0x5
 2971 0156 25       		.byte	0x25
 2972 0157 7E000000 		.4byte	0x7e
 2973 015b 08       		.byte	0x8
 2974 015c 0B       		.uleb128 0xb
 2975 015d 6B070000 		.4byte	.LASF28
 2976 0161 05       		.byte	0x5
 2977 0162 26       		.byte	0x26
 2978 0163 7E000000 		.4byte	0x7e
 2979 0167 0C       		.byte	0xc
 2980 0168 0B       		.uleb128 0xb
 2981 0169 AE020000 		.4byte	.LASF29
 2982 016d 05       		.byte	0x5
 2983 016e 27       		.byte	0x27
 2984 016f 7E000000 		.4byte	0x7e
 2985 0173 10       		.byte	0x10
 2986 0174 0B       		.uleb128 0xb
 2987 0175 FA020000 		.4byte	.LASF30
 2988 0179 05       		.byte	0x5
 2989 017a 28       		.byte	0x28
 2990 017b 7E000000 		.4byte	0x7e
 2991 017f 14       		.byte	0x14
 2992 0180 0B       		.uleb128 0xb
 2993 0181 75060000 		.4byte	.LASF31
 2994 0185 05       		.byte	0x5
 2995 0186 29       		.byte	0x29
 2996 0187 7E000000 		.4byte	0x7e
 2997 018b 18       		.byte	0x18
 2998 018c 0B       		.uleb128 0xb
 2999 018d 20000000 		.4byte	.LASF32
 3000 0191 05       		.byte	0x5
 3001 0192 2A       		.byte	0x2a
 3002 0193 7E000000 		.4byte	0x7e
 3003 0197 1C       		.byte	0x1c
 3004 0198 0B       		.uleb128 0xb
 3005 0199 98030000 		.4byte	.LASF33
 3006 019d 05       		.byte	0x5
 3007 019e 2B       		.byte	0x2b
 3008 019f 7E000000 		.4byte	0x7e
 3009 01a3 20       		.byte	0x20
 3010 01a4 00       		.byte	0
 3011 01a5 0C       		.uleb128 0xc
 3012 01a6 8101     		.2byte	0x181
 3013 01a8 06       		.byte	0x6
 3014 01a9 0A       		.byte	0xa
 3015 01aa D3010000 		.4byte	0x1d3
 3016 01ae 0B       		.uleb128 0xb
 3017 01af EA040000 		.4byte	.LASF34
 3018 01b3 06       		.byte	0x6
 3019 01b4 0C       		.byte	0xc
 3020 01b5 D3010000 		.4byte	0x1d3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 73


 3021 01b9 00       		.byte	0
 3022 01ba 0B       		.uleb128 0xb
 3023 01bb CD070000 		.4byte	.LASF35
 3024 01bf 06       		.byte	0x6
 3025 01c0 0D       		.byte	0xd
 3026 01c1 AD000000 		.4byte	0xad
 3027 01c5 80       		.byte	0x80
 3028 01c6 0B       		.uleb128 0xb
 3029 01c7 49060000 		.4byte	.LASF36
 3030 01cb 06       		.byte	0x6
 3031 01cc 0F       		.byte	0xf
 3032 01cd E3010000 		.4byte	0x1e3
 3033 01d1 81       		.byte	0x81
 3034 01d2 00       		.byte	0
 3035 01d3 08       		.uleb128 0x8
 3036 01d4 F7000000 		.4byte	0xf7
 3037 01d8 E3010000 		.4byte	0x1e3
 3038 01dc 09       		.uleb128 0x9
 3039 01dd 05010000 		.4byte	0x105
 3040 01e1 7F       		.byte	0x7f
 3041 01e2 00       		.byte	0
 3042 01e3 08       		.uleb128 0x8
 3043 01e4 F7000000 		.4byte	0xf7
 3044 01e8 F3010000 		.4byte	0x1f3
 3045 01ec 09       		.uleb128 0x9
 3046 01ed 05010000 		.4byte	0x105
 3047 01f1 FF       		.byte	0xff
 3048 01f2 00       		.byte	0
 3049 01f3 03       		.uleb128 0x3
 3050 01f4 31060000 		.4byte	.LASF37
 3051 01f8 06       		.byte	0x6
 3052 01f9 10       		.byte	0x10
 3053 01fa A5010000 		.4byte	0x1a5
 3054 01fe 0D       		.uleb128 0xd
 3055 01ff 2C       		.byte	0x2c
 3056 0200 07       		.byte	0x7
 3057 0201 14       		.byte	0x14
 3058 0202 2B020000 		.4byte	0x22b
 3059 0206 0E       		.uleb128 0xe
 3060 0207 6B657900 		.ascii	"key\000"
 3061 020b 07       		.byte	0x7
 3062 020c 15       		.byte	0x15
 3063 020d 2B020000 		.4byte	0x22b
 3064 0211 00       		.byte	0
 3065 0212 0B       		.uleb128 0xb
 3066 0213 12000000 		.4byte	.LASF38
 3067 0217 07       		.byte	0x7
 3068 0218 16       		.byte	0x16
 3069 0219 2B020000 		.4byte	0x22b
 3070 021d 14       		.byte	0x14
 3071 021e 0B       		.uleb128 0xb
 3072 021f 6E080000 		.4byte	.LASF39
 3073 0223 07       		.byte	0x7
 3074 0224 17       		.byte	0x17
 3075 0225 DD000000 		.4byte	0xdd
 3076 0229 28       		.byte	0x28
 3077 022a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 74


 3078 022b 08       		.uleb128 0x8
 3079 022c F7000000 		.4byte	0xf7
 3080 0230 3B020000 		.4byte	0x23b
 3081 0234 09       		.uleb128 0x9
 3082 0235 05010000 		.4byte	0x105
 3083 0239 13       		.byte	0x13
 3084 023a 00       		.byte	0
 3085 023b 03       		.uleb128 0x3
 3086 023c 22030000 		.4byte	.LASF40
 3087 0240 07       		.byte	0x7
 3088 0241 19       		.byte	0x19
 3089 0242 FE010000 		.4byte	0x1fe
 3090 0246 0D       		.uleb128 0xd
 3091 0247 3C       		.byte	0x3c
 3092 0248 08       		.byte	0x8
 3093 0249 37       		.byte	0x37
 3094 024a 73020000 		.4byte	0x273
 3095 024e 0B       		.uleb128 0xb
 3096 024f 64070000 		.4byte	.LASF41
 3097 0253 08       		.byte	0x8
 3098 0254 38       		.byte	0x38
 3099 0255 2B020000 		.4byte	0x22b
 3100 0259 00       		.byte	0
 3101 025a 0B       		.uleb128 0xb
 3102 025b CB060000 		.4byte	.LASF42
 3103 025f 08       		.byte	0x8
 3104 0260 39       		.byte	0x39
 3105 0261 2B020000 		.4byte	0x22b
 3106 0265 14       		.byte	0x14
 3107 0266 0B       		.uleb128 0xb
 3108 0267 44060000 		.4byte	.LASF43
 3109 026b 08       		.byte	0x8
 3110 026c 3A       		.byte	0x3a
 3111 026d 2B020000 		.4byte	0x22b
 3112 0271 28       		.byte	0x28
 3113 0272 00       		.byte	0
 3114 0273 03       		.uleb128 0x3
 3115 0274 DF060000 		.4byte	.LASF44
 3116 0278 08       		.byte	0x8
 3117 0279 3C       		.byte	0x3c
 3118 027a 46020000 		.4byte	0x246
 3119 027e 0D       		.uleb128 0xd
 3120 027f 20       		.byte	0x20
 3121 0280 08       		.byte	0x8
 3122 0281 3E       		.byte	0x3e
 3123 0282 E7020000 		.4byte	0x2e7
 3124 0286 0B       		.uleb128 0xb
 3125 0287 DD010000 		.4byte	.LASF45
 3126 028b 08       		.byte	0x8
 3127 028c 3F       		.byte	0x3f
 3128 028d 7E000000 		.4byte	0x7e
 3129 0291 00       		.byte	0
 3130 0292 0E       		.uleb128 0xe
 3131 0293 62657200 		.ascii	"ber\000"
 3132 0297 08       		.byte	0x8
 3133 0298 40       		.byte	0x40
 3134 0299 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 75


 3135 029d 04       		.byte	0x4
 3136 029e 0B       		.uleb128 0xb
 3137 029f 12060000 		.4byte	.LASF46
 3138 02a3 08       		.byte	0x8
 3139 02a4 41       		.byte	0x41
 3140 02a5 7E000000 		.4byte	0x7e
 3141 02a9 08       		.byte	0x8
 3142 02aa 0B       		.uleb128 0xb
 3143 02ab 67010000 		.4byte	.LASF47
 3144 02af 08       		.byte	0x8
 3145 02b0 42       		.byte	0x42
 3146 02b1 7E000000 		.4byte	0x7e
 3147 02b5 0C       		.byte	0xc
 3148 02b6 0B       		.uleb128 0xb
 3149 02b7 F7050000 		.4byte	.LASF48
 3150 02bb 08       		.byte	0x8
 3151 02bc 43       		.byte	0x43
 3152 02bd 7E000000 		.4byte	0x7e
 3153 02c1 10       		.byte	0x10
 3154 02c2 0B       		.uleb128 0xb
 3155 02c3 50060000 		.4byte	.LASF49
 3156 02c7 08       		.byte	0x8
 3157 02c8 44       		.byte	0x44
 3158 02c9 7E000000 		.4byte	0x7e
 3159 02cd 14       		.byte	0x14
 3160 02ce 0B       		.uleb128 0xb
 3161 02cf 89010000 		.4byte	.LASF50
 3162 02d3 08       		.byte	0x8
 3163 02d4 45       		.byte	0x45
 3164 02d5 7E000000 		.4byte	0x7e
 3165 02d9 18       		.byte	0x18
 3166 02da 0B       		.uleb128 0xb
 3167 02db EC030000 		.4byte	.LASF51
 3168 02df 08       		.byte	0x8
 3169 02e0 46       		.byte	0x46
 3170 02e1 7E000000 		.4byte	0x7e
 3171 02e5 1C       		.byte	0x1c
 3172 02e6 00       		.byte	0
 3173 02e7 03       		.uleb128 0x3
 3174 02e8 55060000 		.4byte	.LASF52
 3175 02ec 08       		.byte	0x8
 3176 02ed 48       		.byte	0x48
 3177 02ee 7E020000 		.4byte	0x27e
 3178 02f2 0D       		.uleb128 0xd
 3179 02f3 10       		.byte	0x10
 3180 02f4 08       		.byte	0x8
 3181 02f5 4A       		.byte	0x4a
 3182 02f6 37030000 		.4byte	0x337
 3183 02fa 0B       		.uleb128 0xb
 3184 02fb E1040000 		.4byte	.LASF53
 3185 02ff 08       		.byte	0x8
 3186 0300 4B       		.byte	0x4b
 3187 0301 E9000000 		.4byte	0xe9
 3188 0305 00       		.byte	0
 3189 0306 0B       		.uleb128 0xb
 3190 0307 5A000000 		.4byte	.LASF54
 3191 030b 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 76


 3192 030c 4C       		.byte	0x4c
 3193 030d E9000000 		.4byte	0xe9
 3194 0311 04       		.byte	0x4
 3195 0312 0B       		.uleb128 0xb
 3196 0313 12020000 		.4byte	.LASF55
 3197 0317 08       		.byte	0x8
 3198 0318 4D       		.byte	0x4d
 3199 0319 E9000000 		.4byte	0xe9
 3200 031d 08       		.byte	0x8
 3201 031e 0B       		.uleb128 0xb
 3202 031f 78030000 		.4byte	.LASF56
 3203 0323 08       		.byte	0x8
 3204 0324 4E       		.byte	0x4e
 3205 0325 B9000000 		.4byte	0xb9
 3206 0329 0C       		.byte	0xc
 3207 032a 0B       		.uleb128 0xb
 3208 032b 73070000 		.4byte	.LASF57
 3209 032f 08       		.byte	0x8
 3210 0330 4F       		.byte	0x4f
 3211 0331 AD000000 		.4byte	0xad
 3212 0335 0E       		.byte	0xe
 3213 0336 00       		.byte	0
 3214 0337 03       		.uleb128 0x3
 3215 0338 EC060000 		.4byte	.LASF58
 3216 033c 08       		.byte	0x8
 3217 033d 51       		.byte	0x51
 3218 033e F2020000 		.4byte	0x2f2
 3219 0342 0D       		.uleb128 0xd
 3220 0343 05       		.byte	0x5
 3221 0344 08       		.byte	0x8
 3222 0345 54       		.byte	0x54
 3223 0346 87030000 		.4byte	0x387
 3224 034a 0B       		.uleb128 0xb
 3225 034b 2E020000 		.4byte	.LASF59
 3226 034f 08       		.byte	0x8
 3227 0350 56       		.byte	0x56
 3228 0351 AD000000 		.4byte	0xad
 3229 0355 00       		.byte	0
 3230 0356 0B       		.uleb128 0xb
 3231 0357 A9050000 		.4byte	.LASF60
 3232 035b 08       		.byte	0x8
 3233 035c 58       		.byte	0x58
 3234 035d 87030000 		.4byte	0x387
 3235 0361 01       		.byte	0x1
 3236 0362 0B       		.uleb128 0xb
 3237 0363 04070000 		.4byte	.LASF61
 3238 0367 08       		.byte	0x8
 3239 0368 5A       		.byte	0x5a
 3240 0369 AD000000 		.4byte	0xad
 3241 036d 02       		.byte	0x2
 3242 036e 0B       		.uleb128 0xb
 3243 036f FC050000 		.4byte	.LASF62
 3244 0373 08       		.byte	0x8
 3245 0374 5C       		.byte	0x5c
 3246 0375 AD000000 		.4byte	0xad
 3247 0379 03       		.byte	0x3
 3248 037a 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 77


 3249 037b B5020000 		.4byte	.LASF63
 3250 037f 08       		.byte	0x8
 3251 0380 5F       		.byte	0x5f
 3252 0381 AD000000 		.4byte	0xad
 3253 0385 04       		.byte	0x4
 3254 0386 00       		.byte	0
 3255 0387 02       		.uleb128 0x2
 3256 0388 01       		.byte	0x1
 3257 0389 02       		.byte	0x2
 3258 038a C5050000 		.4byte	.LASF64
 3259 038e 03       		.uleb128 0x3
 3260 038f 64040000 		.4byte	.LASF65
 3261 0393 08       		.byte	0x8
 3262 0394 61       		.byte	0x61
 3263 0395 42030000 		.4byte	0x342
 3264 0399 0D       		.uleb128 0xd
 3265 039a 06       		.byte	0x6
 3266 039b 09       		.byte	0x9
 3267 039c 2E       		.byte	0x2e
 3268 039d D2030000 		.4byte	0x3d2
 3269 03a1 0B       		.uleb128 0xb
 3270 03a2 6C010000 		.4byte	.LASF66
 3271 03a6 09       		.byte	0x9
 3272 03a7 30       		.byte	0x30
 3273 03a8 B9000000 		.4byte	0xb9
 3274 03ac 00       		.byte	0
 3275 03ad 0B       		.uleb128 0xb
 3276 03ae EC010000 		.4byte	.LASF67
 3277 03b2 09       		.byte	0x9
 3278 03b3 31       		.byte	0x31
 3279 03b4 D1000000 		.4byte	0xd1
 3280 03b8 02       		.byte	0x2
 3281 03b9 0B       		.uleb128 0xb
 3282 03ba 1C080000 		.4byte	.LASF68
 3283 03be 09       		.byte	0x9
 3284 03bf 32       		.byte	0x32
 3285 03c0 AD000000 		.4byte	0xad
 3286 03c4 04       		.byte	0x4
 3287 03c5 0B       		.uleb128 0xb
 3288 03c6 42000000 		.4byte	.LASF69
 3289 03ca 09       		.byte	0x9
 3290 03cb 33       		.byte	0x33
 3291 03cc AD000000 		.4byte	0xad
 3292 03d0 05       		.byte	0x5
 3293 03d1 00       		.byte	0
 3294 03d2 03       		.uleb128 0x3
 3295 03d3 BF050000 		.4byte	.LASF70
 3296 03d7 09       		.byte	0x9
 3297 03d8 36       		.byte	0x36
 3298 03d9 DD030000 		.4byte	0x3dd
 3299 03dd 0F       		.uleb128 0xf
 3300 03de 99030000 		.4byte	0x399
 3301 03e2 0D       		.uleb128 0xd
 3302 03e3 1C       		.byte	0x1c
 3303 03e4 09       		.byte	0x9
 3304 03e5 39       		.byte	0x39
 3305 03e6 03040000 		.4byte	0x403
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 78


 3306 03ea 0B       		.uleb128 0xb
 3307 03eb A1030000 		.4byte	.LASF71
 3308 03ef 09       		.byte	0x9
 3309 03f0 3B       		.byte	0x3b
 3310 03f1 03040000 		.4byte	0x403
 3311 03f5 00       		.byte	0
 3312 03f6 0B       		.uleb128 0xb
 3313 03f7 B4030000 		.4byte	.LASF72
 3314 03fb 09       		.byte	0x9
 3315 03fc 3C       		.byte	0x3c
 3316 03fd 1D010000 		.4byte	0x11d
 3317 0401 04       		.byte	0x4
 3318 0402 00       		.byte	0
 3319 0403 06       		.uleb128 0x6
 3320 0404 04       		.byte	0x4
 3321 0405 73020000 		.4byte	0x273
 3322 0409 03       		.uleb128 0x3
 3323 040a 59040000 		.4byte	.LASF73
 3324 040e 09       		.byte	0x9
 3325 040f 3E       		.byte	0x3e
 3326 0410 E2030000 		.4byte	0x3e2
 3327 0414 0D       		.uleb128 0xd
 3328 0415 68       		.byte	0x68
 3329 0416 09       		.byte	0x9
 3330 0417 44       		.byte	0x44
 3331 0418 35040000 		.4byte	0x435
 3332 041c 0B       		.uleb128 0xb
 3333 041d AC030000 		.4byte	.LASF74
 3334 0421 09       		.byte	0x9
 3335 0422 49       		.byte	0x49
 3336 0423 35040000 		.4byte	0x435
 3337 0427 00       		.byte	0
 3338 0428 0B       		.uleb128 0xb
 3339 0429 90030000 		.4byte	.LASF75
 3340 042d 09       		.byte	0x9
 3341 042e 4A       		.byte	0x4a
 3342 042f 7E000000 		.4byte	0x7e
 3343 0433 64       		.byte	0x64
 3344 0434 00       		.byte	0
 3345 0435 08       		.uleb128 0x8
 3346 0436 F7000000 		.4byte	0xf7
 3347 043a 45040000 		.4byte	0x445
 3348 043e 09       		.uleb128 0x9
 3349 043f 05010000 		.4byte	0x105
 3350 0443 63       		.byte	0x63
 3351 0444 00       		.byte	0
 3352 0445 03       		.uleb128 0x3
 3353 0446 ED070000 		.4byte	.LASF76
 3354 044a 09       		.byte	0x9
 3355 044b 50       		.byte	0x50
 3356 044c 14040000 		.4byte	0x414
 3357 0450 10       		.uleb128 0x10
 3358 0451 B2050000 		.4byte	.LASF108
 3359 0455 01       		.byte	0x1
 3360 0456 12       		.byte	0x12
 3361 0457 00000000 		.4byte	.LFB64
 3362 045b 44000000 		.4byte	.LFE64-.LFB64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 79


 3363 045f 01       		.uleb128 0x1
 3364 0460 9C       		.byte	0x9c
 3365 0461 11       		.uleb128 0x11
 3366 0462 8A050000 		.4byte	.LASF77
 3367 0466 01       		.byte	0x1
 3368 0467 1C       		.byte	0x1c
 3369 0468 00000000 		.4byte	.LFB65
 3370 046c 6C000000 		.4byte	.LFE65-.LFB65
 3371 0470 01       		.uleb128 0x1
 3372 0471 9C       		.byte	0x9c
 3373 0472 11       		.uleb128 0x11
 3374 0473 4C070000 		.4byte	.LASF78
 3375 0477 01       		.byte	0x1
 3376 0478 36       		.byte	0x36
 3377 0479 00000000 		.4byte	.LFB66
 3378 047d 32000000 		.4byte	.LFE66-.LFB66
 3379 0481 01       		.uleb128 0x1
 3380 0482 9C       		.byte	0x9c
 3381 0483 11       		.uleb128 0x11
 3382 0484 0C030000 		.4byte	.LASF79
 3383 0488 01       		.byte	0x1
 3384 0489 46       		.byte	0x46
 3385 048a 00000000 		.4byte	.LFB67
 3386 048e 20000000 		.4byte	.LFE67-.LFB67
 3387 0492 01       		.uleb128 0x1
 3388 0493 9C       		.byte	0x9c
 3389 0494 11       		.uleb128 0x11
 3390 0495 5D080000 		.4byte	.LASF80
 3391 0499 01       		.byte	0x1
 3392 049a 4F       		.byte	0x4f
 3393 049b 00000000 		.4byte	.LFB68
 3394 049f 40000000 		.4byte	.LFE68-.LFB68
 3395 04a3 01       		.uleb128 0x1
 3396 04a4 9C       		.byte	0x9c
 3397 04a5 12       		.uleb128 0x12
 3398 04a6 C2030000 		.4byte	.LASF94
 3399 04aa 01       		.byte	0x1
 3400 04ab 61       		.byte	0x61
 3401 04ac AD000000 		.4byte	0xad
 3402 04b0 00000000 		.4byte	.LFB69
 3403 04b4 DC000000 		.4byte	.LFE69-.LFB69
 3404 04b8 01       		.uleb128 0x1
 3405 04b9 9C       		.byte	0x9c
 3406 04ba 19050000 		.4byte	0x519
 3407 04be 13       		.uleb128 0x13
 3408 04bf 0A080000 		.4byte	.LASF81
 3409 04c3 01       		.byte	0x1
 3410 04c4 6A       		.byte	0x6a
 3411 04c5 AD000000 		.4byte	0xad
 3412 04c9 02       		.uleb128 0x2
 3413 04ca 91       		.byte	0x91
 3414 04cb 77       		.sleb128 -9
 3415 04cc 13       		.uleb128 0x13
 3416 04cd 13080000 		.4byte	.LASF82
 3417 04d1 01       		.byte	0x1
 3418 04d2 6B       		.byte	0x6b
 3419 04d3 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 80


 3420 04d7 02       		.uleb128 0x2
 3421 04d8 91       		.byte	0x91
 3422 04d9 74       		.sleb128 -12
 3423 04da 13       		.uleb128 0x13
 3424 04db 2A080000 		.4byte	.LASF83
 3425 04df 01       		.byte	0x1
 3426 04e0 6D       		.byte	0x6d
 3427 04e1 57000000 		.4byte	0x57
 3428 04e5 02       		.uleb128 0x2
 3429 04e6 91       		.byte	0x91
 3430 04e7 70       		.sleb128 -16
 3431 04e8 14       		.uleb128 0x14
 3432 04e9 26000000 		.4byte	.LBB2
 3433 04ed 4A000000 		.4byte	.LBE2-.LBB2
 3434 04f1 13       		.uleb128 0x13
 3435 04f2 13080000 		.4byte	.LASF82
 3436 04f6 01       		.byte	0x1
 3437 04f7 70       		.byte	0x70
 3438 04f8 AD000000 		.4byte	0xad
 3439 04fc 02       		.uleb128 0x2
 3440 04fd 91       		.byte	0x91
 3441 04fe 76       		.sleb128 -10
 3442 04ff 14       		.uleb128 0x14
 3443 0500 2C000000 		.4byte	.LBB3
 3444 0504 2A000000 		.4byte	.LBE3-.LBB3
 3445 0508 13       		.uleb128 0x13
 3446 0509 2E030000 		.4byte	.LASF84
 3447 050d 01       		.byte	0x1
 3448 050e 72       		.byte	0x72
 3449 050f AD000000 		.4byte	0xad
 3450 0513 02       		.uleb128 0x2
 3451 0514 91       		.byte	0x91
 3452 0515 75       		.sleb128 -11
 3453 0516 00       		.byte	0
 3454 0517 00       		.byte	0
 3455 0518 00       		.byte	0
 3456 0519 11       		.uleb128 0x11
 3457 051a 7D060000 		.4byte	.LASF85
 3458 051e 01       		.byte	0x1
 3459 051f 93       		.byte	0x93
 3460 0520 00000000 		.4byte	.LFB70
 3461 0524 1C000000 		.4byte	.LFE70-.LFB70
 3462 0528 01       		.uleb128 0x1
 3463 0529 9C       		.byte	0x9c
 3464 052a 11       		.uleb128 0x11
 3465 052b 63060000 		.4byte	.LASF86
 3466 052f 01       		.byte	0x1
 3467 0530 9B       		.byte	0x9b
 3468 0531 00000000 		.4byte	.LFB71
 3469 0535 28000000 		.4byte	.LFE71-.LFB71
 3470 0539 01       		.uleb128 0x1
 3471 053a 9C       		.byte	0x9c
 3472 053b 15       		.uleb128 0x15
 3473 053c 48040000 		.4byte	.LASF98
 3474 0540 01       		.byte	0x1
 3475 0541 A6       		.byte	0xa6
 3476 0542 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 81


 3477 0546 00000000 		.4byte	.LFB72
 3478 054a B8000000 		.4byte	.LFE72-.LFB72
 3479 054e 01       		.uleb128 0x1
 3480 054f 9C       		.byte	0x9c
 3481 0550 CD050000 		.4byte	0x5cd
 3482 0554 16       		.uleb128 0x16
 3483 0555 6A050000 		.4byte	.LASF87
 3484 0559 01       		.byte	0x1
 3485 055a A6       		.byte	0xa6
 3486 055b 0C010000 		.4byte	0x10c
 3487 055f 02       		.uleb128 0x2
 3488 0560 91       		.byte	0x91
 3489 0561 5C       		.sleb128 -36
 3490 0562 16       		.uleb128 0x16
 3491 0563 34080000 		.4byte	.LASF88
 3492 0567 01       		.byte	0x1
 3493 0568 A6       		.byte	0xa6
 3494 0569 0C010000 		.4byte	0x10c
 3495 056d 02       		.uleb128 0x2
 3496 056e 91       		.byte	0x91
 3497 056f 58       		.sleb128 -40
 3498 0570 16       		.uleb128 0x16
 3499 0571 59030000 		.4byte	.LASF89
 3500 0575 01       		.byte	0x1
 3501 0576 A6       		.byte	0xa6
 3502 0577 A2000000 		.4byte	0xa2
 3503 057b 02       		.uleb128 0x2
 3504 057c 91       		.byte	0x91
 3505 057d 54       		.sleb128 -44
 3506 057e 13       		.uleb128 0x13
 3507 057f 3D040000 		.4byte	.LASF90
 3508 0583 01       		.byte	0x1
 3509 0584 A8       		.byte	0xa8
 3510 0585 C5000000 		.4byte	0xc5
 3511 0589 02       		.uleb128 0x2
 3512 058a 91       		.byte	0x91
 3513 058b 74       		.sleb128 -12
 3514 058c 14       		.uleb128 0x14
 3515 058d 16000000 		.4byte	.LBB4
 3516 0591 7C000000 		.4byte	.LBE4-.LBB4
 3517 0595 13       		.uleb128 0x13
 3518 0596 73050000 		.4byte	.LASF91
 3519 059a 01       		.byte	0x1
 3520 059b AC       		.byte	0xac
 3521 059c 0C010000 		.4byte	0x10c
 3522 05a0 02       		.uleb128 0x2
 3523 05a1 91       		.byte	0x91
 3524 05a2 64       		.sleb128 -28
 3525 05a3 13       		.uleb128 0x13
 3526 05a4 F1050000 		.4byte	.LASF92
 3527 05a8 01       		.byte	0x1
 3528 05a9 AD       		.byte	0xad
 3529 05aa A2000000 		.4byte	0xa2
 3530 05ae 02       		.uleb128 0x2
 3531 05af 91       		.byte	0x91
 3532 05b0 6C       		.sleb128 -20
 3533 05b1 17       		.uleb128 0x17
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 82


 3534 05b2 6900     		.ascii	"i\000"
 3535 05b4 01       		.byte	0x1
 3536 05b5 AE       		.byte	0xae
 3537 05b6 A2000000 		.4byte	0xa2
 3538 05ba 02       		.uleb128 0x2
 3539 05bb 91       		.byte	0x91
 3540 05bc 70       		.sleb128 -16
 3541 05bd 13       		.uleb128 0x13
 3542 05be 83020000 		.4byte	.LASF93
 3543 05c2 01       		.byte	0x1
 3544 05c3 AE       		.byte	0xae
 3545 05c4 A2000000 		.4byte	0xa2
 3546 05c8 02       		.uleb128 0x2
 3547 05c9 91       		.byte	0x91
 3548 05ca 68       		.sleb128 -24
 3549 05cb 00       		.byte	0
 3550 05cc 00       		.byte	0
 3551 05cd 12       		.uleb128 0x12
 3552 05ce 0B050000 		.4byte	.LASF95
 3553 05d2 01       		.byte	0x1
 3554 05d3 DA       		.byte	0xda
 3555 05d4 F3010000 		.4byte	0x1f3
 3556 05d8 00000000 		.4byte	.LFB73
 3557 05dc 00010000 		.4byte	.LFE73-.LFB73
 3558 05e0 01       		.uleb128 0x1
 3559 05e1 9C       		.byte	0x9c
 3560 05e2 24060000 		.4byte	0x624
 3561 05e6 13       		.uleb128 0x13
 3562 05e7 22010000 		.4byte	.LASF96
 3563 05eb 01       		.byte	0x1
 3564 05ec DC       		.byte	0xdc
 3565 05ed F3010000 		.4byte	0x1f3
 3566 05f1 03       		.uleb128 0x3
 3567 05f2 91       		.byte	0x91
 3568 05f3 E47C     		.sleb128 -412
 3569 05f5 14       		.uleb128 0x14
 3570 05f6 4A000000 		.4byte	.LBB5
 3571 05fa 86000000 		.4byte	.LBE5-.LBB5
 3572 05fe 17       		.uleb128 0x17
 3573 05ff 6900     		.ascii	"i\000"
 3574 0601 01       		.byte	0x1
 3575 0602 E3       		.byte	0xe3
 3576 0603 7E000000 		.4byte	0x7e
 3577 0607 02       		.uleb128 0x2
 3578 0608 91       		.byte	0x91
 3579 0609 6C       		.sleb128 -20
 3580 060a 14       		.uleb128 0x14
 3581 060b 70000000 		.4byte	.LBB6
 3582 060f 46000000 		.4byte	.LBE6-.LBB6
 3583 0613 13       		.uleb128 0x13
 3584 0614 5C020000 		.4byte	.LASF97
 3585 0618 01       		.byte	0x1
 3586 0619 F0       		.byte	0xf0
 3587 061a 57000000 		.4byte	0x57
 3588 061e 02       		.uleb128 0x2
 3589 061f 91       		.byte	0x91
 3590 0620 68       		.sleb128 -24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 83


 3591 0621 00       		.byte	0
 3592 0622 00       		.byte	0
 3593 0623 00       		.byte	0
 3594 0624 18       		.uleb128 0x18
 3595 0625 4A030000 		.4byte	.LASF99
 3596 0629 01       		.byte	0x1
 3597 062a 0401     		.2byte	0x104
 3598 062c AD000000 		.4byte	0xad
 3599 0630 00000000 		.4byte	.LFB74
 3600 0634 78000000 		.4byte	.LFE74-.LFB74
 3601 0638 01       		.uleb128 0x1
 3602 0639 9C       		.byte	0x9c
 3603 063a 95060000 		.4byte	0x695
 3604 063e 19       		.uleb128 0x19
 3605 063f 28040000 		.4byte	.LASF100
 3606 0643 01       		.byte	0x1
 3607 0644 0401     		.2byte	0x104
 3608 0646 0C010000 		.4byte	0x10c
 3609 064a 02       		.uleb128 0x2
 3610 064b 91       		.byte	0x91
 3611 064c 6C       		.sleb128 -20
 3612 064d 19       		.uleb128 0x19
 3613 064e D9030000 		.4byte	.LASF101
 3614 0652 01       		.byte	0x1
 3615 0653 0401     		.2byte	0x104
 3616 0655 12010000 		.4byte	0x112
 3617 0659 02       		.uleb128 0x2
 3618 065a 91       		.byte	0x91
 3619 065b 68       		.sleb128 -24
 3620 065c 19       		.uleb128 0x19
 3621 065d FF030000 		.4byte	.LASF102
 3622 0661 01       		.byte	0x1
 3623 0662 0401     		.2byte	0x104
 3624 0664 12010000 		.4byte	0x112
 3625 0668 02       		.uleb128 0x2
 3626 0669 91       		.byte	0x91
 3627 066a 64       		.sleb128 -28
 3628 066b 19       		.uleb128 0x19
 3629 066c E5030000 		.4byte	.LASF103
 3630 0670 01       		.byte	0x1
 3631 0671 0401     		.2byte	0x104
 3632 0673 0C010000 		.4byte	0x10c
 3633 0677 02       		.uleb128 0x2
 3634 0678 91       		.byte	0x91
 3635 0679 60       		.sleb128 -32
 3636 067a 1A       		.uleb128 0x1a
 3637 067b 6100     		.ascii	"a\000"
 3638 067d 01       		.byte	0x1
 3639 067e 0601     		.2byte	0x106
 3640 0680 0C010000 		.4byte	0x10c
 3641 0684 02       		.uleb128 0x2
 3642 0685 91       		.byte	0x91
 3643 0686 74       		.sleb128 -12
 3644 0687 1A       		.uleb128 0x1a
 3645 0688 6200     		.ascii	"b\000"
 3646 068a 01       		.byte	0x1
 3647 068b 0601     		.2byte	0x106
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 84


 3648 068d 0C010000 		.4byte	0x10c
 3649 0691 02       		.uleb128 0x2
 3650 0692 91       		.byte	0x91
 3651 0693 70       		.sleb128 -16
 3652 0694 00       		.byte	0
 3653 0695 1B       		.uleb128 0x1b
 3654 0696 A5060000 		.4byte	.LASF104
 3655 069a 01       		.byte	0x1
 3656 069b 2301     		.2byte	0x123
 3657 069d AD000000 		.4byte	0xad
 3658 06a1 00000000 		.4byte	.LFB75
 3659 06a5 3C010000 		.4byte	.LFE75-.LFB75
 3660 06a9 01       		.uleb128 0x1
 3661 06aa 9C       		.byte	0x9c
 3662 06ab C7060000 		.4byte	0x6c7
 3663 06af 14       		.uleb128 0x14
 3664 06b0 2E000000 		.4byte	.LBB7
 3665 06b4 32000000 		.4byte	.LBE7-.LBB7
 3666 06b8 1A       		.uleb128 0x1a
 3667 06b9 6900     		.ascii	"i\000"
 3668 06bb 01       		.byte	0x1
 3669 06bc 3101     		.2byte	0x131
 3670 06be AD000000 		.4byte	0xad
 3671 06c2 02       		.uleb128 0x2
 3672 06c3 91       		.byte	0x91
 3673 06c4 77       		.sleb128 -9
 3674 06c5 00       		.byte	0
 3675 06c6 00       		.byte	0
 3676 06c7 1B       		.uleb128 0x1b
 3677 06c8 AF040000 		.4byte	.LASF105
 3678 06cc 01       		.byte	0x1
 3679 06cd 6A01     		.2byte	0x16a
 3680 06cf AD000000 		.4byte	0xad
 3681 06d3 00000000 		.4byte	.LFB76
 3682 06d7 B8000000 		.4byte	.LFE76-.LFB76
 3683 06db 01       		.uleb128 0x1
 3684 06dc 9C       		.byte	0x9c
 3685 06dd 0A070000 		.4byte	0x70a
 3686 06e1 1C       		.uleb128 0x1c
 3687 06e2 CD070000 		.4byte	.LASF35
 3688 06e6 01       		.byte	0x1
 3689 06e7 6E01     		.2byte	0x16e
 3690 06e9 AD000000 		.4byte	0xad
 3691 06ed 02       		.uleb128 0x2
 3692 06ee 91       		.byte	0x91
 3693 06ef 77       		.sleb128 -9
 3694 06f0 14       		.uleb128 0x14
 3695 06f1 36000000 		.4byte	.LBB8
 3696 06f5 48000000 		.4byte	.LBE8-.LBB8
 3697 06f9 1C       		.uleb128 0x1c
 3698 06fa 2D040000 		.4byte	.LASF106
 3699 06fe 01       		.byte	0x1
 3700 06ff 7601     		.2byte	0x176
 3701 0701 0A070000 		.4byte	0x70a
 3702 0705 02       		.uleb128 0x2
 3703 0706 91       		.byte	0x91
 3704 0707 6C       		.sleb128 -20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 85


 3705 0708 00       		.byte	0
 3706 0709 00       		.byte	0
 3707 070a 08       		.uleb128 0x8
 3708 070b F7000000 		.4byte	0xf7
 3709 070f 1A070000 		.4byte	0x71a
 3710 0713 09       		.uleb128 0x9
 3711 0714 05010000 		.4byte	0x105
 3712 0718 09       		.byte	0x9
 3713 0719 00       		.byte	0
 3714 071a 1D       		.uleb128 0x1d
 3715 071b B6010000 		.4byte	.LASF107
 3716 071f 01       		.byte	0x1
 3717 0720 8801     		.2byte	0x188
 3718 0722 00000000 		.4byte	.LFB77
 3719 0726 1C000000 		.4byte	.LFE77-.LFB77
 3720 072a 01       		.uleb128 0x1
 3721 072b 9C       		.byte	0x9c
 3722 072c 1E       		.uleb128 0x1e
 3723 072d 11070000 		.4byte	.LASF109
 3724 0731 01       		.byte	0x1
 3725 0732 9801     		.2byte	0x198
 3726 0734 AD000000 		.4byte	0xad
 3727 0738 00000000 		.4byte	.LFB78
 3728 073c 28000000 		.4byte	.LFE78-.LFB78
 3729 0740 01       		.uleb128 0x1
 3730 0741 9C       		.byte	0x9c
 3731 0742 1F       		.uleb128 0x1f
 3732 0743 61030000 		.4byte	.LASF112
 3733 0747 01       		.byte	0x1
 3734 0748 A301     		.2byte	0x1a3
 3735 074a 00000000 		.4byte	.LFB79
 3736 074e 84000000 		.4byte	.LFE79-.LFB79
 3737 0752 01       		.uleb128 0x1
 3738 0753 9C       		.byte	0x9c
 3739 0754 68070000 		.4byte	0x768
 3740 0758 1C       		.uleb128 0x1c
 3741 0759 8A030000 		.4byte	.LASF110
 3742 075d 01       		.byte	0x1
 3743 075e B001     		.2byte	0x1b0
 3744 0760 7E000000 		.4byte	0x7e
 3745 0764 02       		.uleb128 0x2
 3746 0765 91       		.byte	0x91
 3747 0766 74       		.sleb128 -12
 3748 0767 00       		.byte	0
 3749 0768 20       		.uleb128 0x20
 3750 0769 DA020000 		.4byte	.LASF111
 3751 076d 01       		.byte	0x1
 3752 076e C201     		.2byte	0x1c2
 3753 0770 00000000 		.4byte	.LFB80
 3754 0774 30000000 		.4byte	.LFE80-.LFB80
 3755 0778 01       		.uleb128 0x1
 3756 0779 9C       		.byte	0x9c
 3757 077a 1F       		.uleb128 0x1f
 3758 077b 9C070000 		.4byte	.LASF113
 3759 077f 01       		.byte	0x1
 3760 0780 CB01     		.2byte	0x1cb
 3761 0782 00000000 		.4byte	.LFB81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 86


 3762 0786 F4010000 		.4byte	.LFE81-.LFB81
 3763 078a 01       		.uleb128 0x1
 3764 078b 9C       		.byte	0x9c
 3765 078c 2D080000 		.4byte	0x82d
 3766 0790 1C       		.uleb128 0x1c
 3767 0791 06060000 		.4byte	.LASF114
 3768 0795 01       		.byte	0x1
 3769 0796 CE01     		.2byte	0x1ce
 3770 0798 0A070000 		.4byte	0x70a
 3771 079c 02       		.uleb128 0x2
 3772 079d 91       		.byte	0x91
 3773 079e 64       		.sleb128 -28
 3774 079f 1C       		.uleb128 0x1c
 3775 07a0 51020000 		.4byte	.LASF115
 3776 07a4 01       		.byte	0x1
 3777 07a5 CF01     		.2byte	0x1cf
 3778 07a7 0A070000 		.4byte	0x70a
 3779 07ab 02       		.uleb128 0x2
 3780 07ac 91       		.byte	0x91
 3781 07ad 58       		.sleb128 -40
 3782 07ae 1C       		.uleb128 0x1c
 3783 07af BF070000 		.4byte	.LASF116
 3784 07b3 01       		.byte	0x1
 3785 07b4 D001     		.2byte	0x1d0
 3786 07b6 0A070000 		.4byte	0x70a
 3787 07ba 02       		.uleb128 0x2
 3788 07bb 91       		.byte	0x91
 3789 07bc 4C       		.sleb128 -52
 3790 07bd 1C       		.uleb128 0x1c
 3791 07be 9B050000 		.4byte	.LASF117
 3792 07c2 01       		.byte	0x1
 3793 07c3 D101     		.2byte	0x1d1
 3794 07c5 0A070000 		.4byte	0x70a
 3795 07c9 02       		.uleb128 0x2
 3796 07ca 91       		.byte	0x91
 3797 07cb 40       		.sleb128 -64
 3798 07cc 1C       		.uleb128 0x1c
 3799 07cd CD020000 		.4byte	.LASF118
 3800 07d1 01       		.byte	0x1
 3801 07d2 D201     		.2byte	0x1d2
 3802 07d4 0A070000 		.4byte	0x70a
 3803 07d8 03       		.uleb128 0x3
 3804 07d9 91       		.byte	0x91
 3805 07da B47F     		.sleb128 -76
 3806 07dc 1C       		.uleb128 0x1c
 3807 07dd 2E020000 		.4byte	.LASF59
 3808 07e1 01       		.byte	0x1
 3809 07e2 E201     		.2byte	0x1e2
 3810 07e4 7E000000 		.4byte	0x7e
 3811 07e8 03       		.uleb128 0x3
 3812 07e9 91       		.byte	0x91
 3813 07ea B07F     		.sleb128 -80
 3814 07ec 1C       		.uleb128 0x1c
 3815 07ed A9050000 		.4byte	.LASF60
 3816 07f1 01       		.byte	0x1
 3817 07f2 E201     		.2byte	0x1e2
 3818 07f4 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 87


 3819 07f8 03       		.uleb128 0x3
 3820 07f9 91       		.byte	0x91
 3821 07fa AC7F     		.sleb128 -84
 3822 07fc 1C       		.uleb128 0x1c
 3823 07fd 79070000 		.4byte	.LASF119
 3824 0801 01       		.byte	0x1
 3825 0802 E201     		.2byte	0x1e2
 3826 0804 7E000000 		.4byte	0x7e
 3827 0808 03       		.uleb128 0x3
 3828 0809 91       		.byte	0x91
 3829 080a A87F     		.sleb128 -88
 3830 080c 1C       		.uleb128 0x1c
 3831 080d 7B040000 		.4byte	.LASF120
 3832 0811 01       		.byte	0x1
 3833 0812 E201     		.2byte	0x1e2
 3834 0814 7E000000 		.4byte	0x7e
 3835 0818 03       		.uleb128 0x3
 3836 0819 91       		.byte	0x91
 3837 081a A47F     		.sleb128 -92
 3838 081c 1C       		.uleb128 0x1c
 3839 081d 32040000 		.4byte	.LASF121
 3840 0821 01       		.byte	0x1
 3841 0822 E201     		.2byte	0x1e2
 3842 0824 7E000000 		.4byte	0x7e
 3843 0828 03       		.uleb128 0x3
 3844 0829 91       		.byte	0x91
 3845 082a A07F     		.sleb128 -96
 3846 082c 00       		.byte	0
 3847 082d 1F       		.uleb128 0x1f
 3848 082e 38020000 		.4byte	.LASF122
 3849 0832 01       		.byte	0x1
 3850 0833 0B02     		.2byte	0x20b
 3851 0835 00000000 		.4byte	.LFB82
 3852 0839 68010000 		.4byte	.LFE82-.LFB82
 3853 083d 01       		.uleb128 0x1
 3854 083e 9C       		.byte	0x9c
 3855 083f 5D080000 		.4byte	0x85d
 3856 0843 14       		.uleb128 0x14
 3857 0844 DA000000 		.4byte	.LBB9
 3858 0848 38000000 		.4byte	.LBE9-.LBB9
 3859 084c 1C       		.uleb128 0x1c
 3860 084d C6060000 		.4byte	.LASF123
 3861 0851 01       		.byte	0x1
 3862 0852 3902     		.2byte	0x239
 3863 0854 0A070000 		.4byte	0x70a
 3864 0858 02       		.uleb128 0x2
 3865 0859 91       		.byte	0x91
 3866 085a 6C       		.sleb128 -20
 3867 085b 00       		.byte	0
 3868 085c 00       		.byte	0
 3869 085d 1B       		.uleb128 0x1b
 3870 085e 97020000 		.4byte	.LASF124
 3871 0862 01       		.byte	0x1
 3872 0863 4C02     		.2byte	0x24c
 3873 0865 57000000 		.4byte	0x57
 3874 0869 00000000 		.4byte	.LFB83
 3875 086d 44010000 		.4byte	.LFE83-.LFB83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 88


 3876 0871 01       		.uleb128 0x1
 3877 0872 9C       		.byte	0x9c
 3878 0873 19090000 		.4byte	0x919
 3879 0877 1C       		.uleb128 0x1c
 3880 0878 13040000 		.4byte	.LASF125
 3881 087c 01       		.byte	0x1
 3882 087d 5702     		.2byte	0x257
 3883 087f 57000000 		.4byte	0x57
 3884 0883 02       		.uleb128 0x2
 3885 0884 91       		.byte	0x91
 3886 0885 74       		.sleb128 -12
 3887 0886 14       		.uleb128 0x14
 3888 0887 30000000 		.4byte	.LBB10
 3889 088b DE000000 		.4byte	.LBE10-.LBB10
 3890 088f 1C       		.uleb128 0x1c
 3891 0890 5C020000 		.4byte	.LASF97
 3892 0894 01       		.byte	0x1
 3893 0895 5C02     		.2byte	0x25c
 3894 0897 19090000 		.4byte	0x919
 3895 089b 02       		.uleb128 0x2
 3896 089c 91       		.byte	0x91
 3897 089d 54       		.sleb128 -44
 3898 089e 1A       		.uleb128 0x1a
 3899 089f 7400     		.ascii	"t\000"
 3900 08a1 01       		.byte	0x1
 3901 08a2 6202     		.2byte	0x262
 3902 08a4 2D010000 		.4byte	0x12d
 3903 08a8 03       		.uleb128 0x3
 3904 08a9 91       		.byte	0x91
 3905 08aa 947F     		.sleb128 -108
 3906 08ac 1C       		.uleb128 0x1c
 3907 08ad D8010000 		.4byte	.LASF126
 3908 08b1 01       		.byte	0x1
 3909 08b2 6502     		.2byte	0x265
 3910 08b4 7E000000 		.4byte	0x7e
 3911 08b8 02       		.uleb128 0x2
 3912 08b9 91       		.byte	0x91
 3913 08ba 50       		.sleb128 -48
 3914 08bb 1C       		.uleb128 0x1c
 3915 08bc A9040000 		.4byte	.LASF127
 3916 08c0 01       		.byte	0x1
 3917 08c1 6502     		.2byte	0x265
 3918 08c3 7E000000 		.4byte	0x7e
 3919 08c7 02       		.uleb128 0x2
 3920 08c8 91       		.byte	0x91
 3921 08c9 4C       		.sleb128 -52
 3922 08ca 1A       		.uleb128 0x1a
 3923 08cb 64617900 		.ascii	"day\000"
 3924 08cf 01       		.byte	0x1
 3925 08d0 6502     		.2byte	0x265
 3926 08d2 7E000000 		.4byte	0x7e
 3927 08d6 02       		.uleb128 0x2
 3928 08d7 91       		.byte	0x91
 3929 08d8 48       		.sleb128 -56
 3930 08d9 1C       		.uleb128 0x1c
 3931 08da 65050000 		.4byte	.LASF128
 3932 08de 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 89


 3933 08df 6502     		.2byte	0x265
 3934 08e1 7E000000 		.4byte	0x7e
 3935 08e5 02       		.uleb128 0x2
 3936 08e6 91       		.byte	0x91
 3937 08e7 44       		.sleb128 -60
 3938 08e8 1C       		.uleb128 0x1c
 3939 08e9 85070000 		.4byte	.LASF129
 3940 08ed 01       		.byte	0x1
 3941 08ee 6502     		.2byte	0x265
 3942 08f0 7E000000 		.4byte	0x7e
 3943 08f4 02       		.uleb128 0x2
 3944 08f5 91       		.byte	0x91
 3945 08f6 40       		.sleb128 -64
 3946 08f7 1C       		.uleb128 0x1c
 3947 08f8 D1010000 		.4byte	.LASF130
 3948 08fc 01       		.byte	0x1
 3949 08fd 6502     		.2byte	0x265
 3950 08ff 7E000000 		.4byte	0x7e
 3951 0903 03       		.uleb128 0x3
 3952 0904 91       		.byte	0x91
 3953 0905 BC7F     		.sleb128 -68
 3954 0907 1C       		.uleb128 0x1c
 3955 0908 00000000 		.4byte	.LASF131
 3956 090c 01       		.byte	0x1
 3957 090d 6502     		.2byte	0x265
 3958 090f 7E000000 		.4byte	0x7e
 3959 0913 03       		.uleb128 0x3
 3960 0914 91       		.byte	0x91
 3961 0915 B87F     		.sleb128 -72
 3962 0917 00       		.byte	0
 3963 0918 00       		.byte	0
 3964 0919 08       		.uleb128 0x8
 3965 091a F7000000 		.4byte	0xf7
 3966 091e 29090000 		.4byte	0x929
 3967 0922 09       		.uleb128 0x9
 3968 0923 05010000 		.4byte	0x105
 3969 0927 1D       		.byte	0x1d
 3970 0928 00       		.byte	0
 3971 0929 21       		.uleb128 0x21
 3972 092a 02020000 		.4byte	.LASF132
 3973 092e 01       		.byte	0x1
 3974 092f 8502     		.2byte	0x285
 3975 0931 AD000000 		.4byte	0xad
 3976 0935 00000000 		.4byte	.LFB84
 3977 0939 14000000 		.4byte	.LFE84-.LFB84
 3978 093d 01       		.uleb128 0x1
 3979 093e 9C       		.byte	0x9c
 3980 093f 1D       		.uleb128 0x1d
 3981 0940 C1020000 		.4byte	.LASF133
 3982 0944 01       		.byte	0x1
 3983 0945 8A02     		.2byte	0x28a
 3984 0947 00000000 		.4byte	.LFB85
 3985 094b 1A000000 		.4byte	.LFE85-.LFB85
 3986 094f 01       		.uleb128 0x1
 3987 0950 9C       		.byte	0x9c
 3988 0951 1D       		.uleb128 0x1d
 3989 0952 F2000000 		.4byte	.LASF134
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 90


 3990 0956 01       		.byte	0x1
 3991 0957 9702     		.2byte	0x297
 3992 0959 00000000 		.4byte	.LFB86
 3993 095d 2A000000 		.4byte	.LFE86-.LFB86
 3994 0961 01       		.uleb128 0x1
 3995 0962 9C       		.byte	0x9c
 3996 0963 1B       		.uleb128 0x1b
 3997 0964 17060000 		.4byte	.LASF135
 3998 0968 01       		.byte	0x1
 3999 0969 AA02     		.2byte	0x2aa
 4000 096b 37030000 		.4byte	0x337
 4001 096f 00000000 		.4byte	.LFB87
 4002 0973 7C020000 		.4byte	.LFE87-.LFB87
 4003 0977 01       		.uleb128 0x1
 4004 0978 9C       		.byte	0x9c
 4005 0979 0C0A0000 		.4byte	0xa0c
 4006 097d 1A       		.uleb128 0x1a
 4007 097e 67707300 		.ascii	"gps\000"
 4008 0982 01       		.byte	0x1
 4009 0983 AB02     		.2byte	0x2ab
 4010 0985 37030000 		.4byte	0x337
 4011 0989 02       		.uleb128 0x2
 4012 098a 91       		.byte	0x91
 4013 098b 4C       		.sleb128 -52
 4014 098c 1C       		.uleb128 0x1c
 4015 098d 46080000 		.4byte	.LASF136
 4016 0991 01       		.byte	0x1
 4017 0992 B702     		.2byte	0x2b7
 4018 0994 57000000 		.4byte	0x57
 4019 0998 02       		.uleb128 0x2
 4020 0999 91       		.byte	0x91
 4021 099a 68       		.sleb128 -24
 4022 099b 1C       		.uleb128 0x1c
 4023 099c 41070000 		.4byte	.LASF137
 4024 09a0 01       		.byte	0x1
 4025 09a1 DE02     		.2byte	0x2de
 4026 09a3 AD000000 		.4byte	0xad
 4027 09a7 02       		.uleb128 0x2
 4028 09a8 91       		.byte	0x91
 4029 09a9 67       		.sleb128 -25
 4030 09aa 1A       		.uleb128 0x1a
 4031 09ab 6C617400 		.ascii	"lat\000"
 4032 09af 01       		.byte	0x1
 4033 09b0 EA02     		.2byte	0x2ea
 4034 09b2 E9000000 		.4byte	0xe9
 4035 09b6 02       		.uleb128 0x2
 4036 09b7 91       		.byte	0x91
 4037 09b8 48       		.sleb128 -56
 4038 09b9 1A       		.uleb128 0x1a
 4039 09ba 6C6F6E00 		.ascii	"lon\000"
 4040 09be 01       		.byte	0x1
 4041 09bf EB02     		.2byte	0x2eb
 4042 09c1 E9000000 		.4byte	0xe9
 4043 09c5 02       		.uleb128 0x2
 4044 09c6 91       		.byte	0x91
 4045 09c7 44       		.sleb128 -60
 4046 09c8 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 91


 4047 09c9 616C7400 		.ascii	"alt\000"
 4048 09cd 01       		.byte	0x1
 4049 09ce EC02     		.2byte	0x2ec
 4050 09d0 E9000000 		.4byte	0xe9
 4051 09d4 02       		.uleb128 0x2
 4052 09d5 91       		.byte	0x91
 4053 09d6 40       		.sleb128 -64
 4054 09d7 1A       		.uleb128 0x1a
 4055 09d8 733100   		.ascii	"s1\000"
 4056 09db 01       		.byte	0x1
 4057 09dc F002     		.2byte	0x2f0
 4058 09de 0C010000 		.4byte	0x10c
 4059 09e2 02       		.uleb128 0x2
 4060 09e3 91       		.byte	0x91
 4061 09e4 60       		.sleb128 -32
 4062 09e5 1C       		.uleb128 0x1c
 4063 09e6 8A030000 		.4byte	.LASF110
 4064 09ea 01       		.byte	0x1
 4065 09eb F302     		.2byte	0x2f3
 4066 09ed 7E000000 		.4byte	0x7e
 4067 09f1 02       		.uleb128 0x2
 4068 09f2 91       		.byte	0x91
 4069 09f3 5C       		.sleb128 -36
 4070 09f4 14       		.uleb128 0x14
 4071 09f5 B4000000 		.4byte	.LBB11
 4072 09f9 38000000 		.4byte	.LBE11-.LBB11
 4073 09fd 1A       		.uleb128 0x1a
 4074 09fe 6900     		.ascii	"i\000"
 4075 0a00 01       		.byte	0x1
 4076 0a01 DF02     		.2byte	0x2df
 4077 0a03 B9000000 		.4byte	0xb9
 4078 0a07 02       		.uleb128 0x2
 4079 0a08 91       		.byte	0x91
 4080 0a09 6E       		.sleb128 -18
 4081 0a0a 00       		.byte	0
 4082 0a0b 00       		.byte	0
 4083 0a0c 22       		.uleb128 0x22
 4084 0a0d 34010000 		.4byte	.LASF138
 4085 0a11 0A       		.byte	0xa
 4086 0a12 1207     		.2byte	0x712
 4087 0a14 180A0000 		.4byte	0xa18
 4088 0a18 0F       		.uleb128 0xf
 4089 0a19 97000000 		.4byte	0x97
 4090 0a1d 23       		.uleb128 0x23
 4091 0a1e 28000000 		.4byte	.LASF139
 4092 0a22 07       		.byte	0x7
 4093 0a23 11       		.byte	0x11
 4094 0a24 87030000 		.4byte	0x387
 4095 0a28 05       		.uleb128 0x5
 4096 0a29 03       		.byte	0x3
 4097 0a2a 00000000 		.4byte	buffer_overflow
 4098 0a2e 23       		.uleb128 0x23
 4099 0a2f 87040000 		.4byte	.LASF140
 4100 0a33 07       		.byte	0x7
 4101 0a34 22       		.byte	0x22
 4102 0a35 B9000000 		.4byte	0xb9
 4103 0a39 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 92


 4104 0a3a 03       		.byte	0x3
 4105 0a3b 00000000 		.4byte	dataPointsInStack
 4106 0a3f 23       		.uleb128 0x23
 4107 0a40 D4070000 		.4byte	.LASF141
 4108 0a44 07       		.byte	0x7
 4109 0a45 23       		.byte	0x23
 4110 0a46 B9000000 		.4byte	0xb9
 4111 0a4a 05       		.uleb128 0x5
 4112 0a4b 03       		.byte	0x3
 4113 0a4c 00000000 		.4byte	dataPointsInStackDesired
 4114 0a50 08       		.uleb128 0x8
 4115 0a51 3B020000 		.4byte	0x23b
 4116 0a55 600A0000 		.4byte	0xa60
 4117 0a59 09       		.uleb128 0x9
 4118 0a5a 05010000 		.4byte	0x105
 4119 0a5e 95       		.byte	0x95
 4120 0a5f 00       		.byte	0
 4121 0a60 23       		.uleb128 0x23
 4122 0a61 85030000 		.4byte	.LASF142
 4123 0a65 07       		.byte	0x7
 4124 0a66 24       		.byte	0x24
 4125 0a67 500A0000 		.4byte	0xa50
 4126 0a6b 05       		.uleb128 0x5
 4127 0a6c 03       		.byte	0x3
 4128 0a6d 00000000 		.4byte	data
 4129 0a71 23       		.uleb128 0x23
 4130 0a72 16010000 		.4byte	.LASF143
 4131 0a76 08       		.byte	0x8
 4132 0a77 21       		.byte	0x21
 4133 0a78 AD000000 		.4byte	0xad
 4134 0a7c 05       		.uleb128 0x5
 4135 0a7d 03       		.byte	0x3
 4136 0a7e 00000000 		.4byte	modem_state
 4137 0a82 23       		.uleb128 0x23
 4138 0a83 2A070000 		.4byte	.LASF144
 4139 0a87 08       		.byte	0x8
 4140 0a88 64       		.byte	0x64
 4141 0a89 DD000000 		.4byte	0xdd
 4142 0a8d 05       		.uleb128 0x5
 4143 0a8e 03       		.byte	0x3
 4144 0a8f 00000000 		.4byte	modem_start_time_stamp
 4145 0a93 23       		.uleb128 0x23
 4146 0a94 A1030000 		.4byte	.LASF71
 4147 0a98 08       		.byte	0x8
 4148 0a99 65       		.byte	0x65
 4149 0a9a 73020000 		.4byte	0x273
 4150 0a9e 05       		.uleb128 0x5
 4151 0a9f 03       		.byte	0x3
 4152 0aa0 00000000 		.4byte	modem_info
 4153 0aa4 23       		.uleb128 0x23
 4154 0aa5 41010000 		.4byte	.LASF145
 4155 0aa9 08       		.byte	0x8
 4156 0aaa 66       		.byte	0x66
 4157 0aab E7020000 		.4byte	0x2e7
 4158 0aaf 05       		.uleb128 0x5
 4159 0ab0 03       		.byte	0x3
 4160 0ab1 00000000 		.4byte	modem_stats
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 93


 4161 0ab5 23       		.uleb128 0x23
 4162 0ab6 50050000 		.4byte	.LASF146
 4163 0aba 08       		.byte	0x8
 4164 0abb 67       		.byte	0x67
 4165 0abc 8E030000 		.4byte	0x38e
 4166 0ac0 05       		.uleb128 0x5
 4167 0ac1 03       		.byte	0x3
 4168 0ac2 00000000 		.4byte	updatable_parameters
 4169 0ac6 08       		.uleb128 0x8
 4170 0ac7 F7000000 		.4byte	0xf7
 4171 0acb D70A0000 		.4byte	0xad7
 4172 0acf 24       		.uleb128 0x24
 4173 0ad0 05010000 		.4byte	0x105
 4174 0ad4 0F27     		.2byte	0x270f
 4175 0ad6 00       		.byte	0
 4176 0ad7 23       		.uleb128 0x23
 4177 0ad8 50080000 		.4byte	.LASF147
 4178 0adc 09       		.byte	0x9
 4179 0add 18       		.byte	0x18
 4180 0ade C60A0000 		.4byte	0xac6
 4181 0ae2 05       		.uleb128 0x5
 4182 0ae3 03       		.byte	0x3
 4183 0ae4 00000000 		.4byte	http_request
 4184 0ae8 23       		.uleb128 0x23
 4185 0ae9 AC010000 		.4byte	.LASF148
 4186 0aed 09       		.byte	0x9
 4187 0aee 19       		.byte	0x19
 4188 0aef C60A0000 		.4byte	0xac6
 4189 0af3 05       		.uleb128 0x5
 4190 0af4 03       		.byte	0x3
 4191 0af5 00000000 		.4byte	http_body
 4192 0af9 08       		.uleb128 0x8
 4193 0afa F7000000 		.4byte	0xf7
 4194 0afe 090B0000 		.4byte	0xb09
 4195 0b02 09       		.uleb128 0x9
 4196 0b03 05010000 		.4byte	0x105
 4197 0b07 C7       		.byte	0xc7
 4198 0b08 00       		.byte	0
 4199 0b09 23       		.uleb128 0x23
 4200 0b0a D4060000 		.4byte	.LASF149
 4201 0b0e 09       		.byte	0x9
 4202 0b0f 1A       		.byte	0x1a
 4203 0b10 F90A0000 		.4byte	0xaf9
 4204 0b14 05       		.uleb128 0x5
 4205 0b15 03       		.byte	0x3
 4206 0b16 00000000 		.4byte	http_route
 4207 0b1a 23       		.uleb128 0x23
 4208 0b1b 38060000 		.4byte	.LASF150
 4209 0b1f 09       		.byte	0x9
 4210 0b20 41       		.byte	0x41
 4211 0b21 09040000 		.4byte	0x409
 4212 0b25 05       		.uleb128 0x5
 4213 0b26 03       		.byte	0x3
 4214 0b27 00000000 		.4byte	system_info
 4215 0b2b 23       		.uleb128 0x23
 4216 0b2c E1050000 		.4byte	.LASF151
 4217 0b30 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 94


 4218 0b31 53       		.byte	0x53
 4219 0b32 45040000 		.4byte	0x445
 4220 0b36 05       		.uleb128 0x5
 4221 0b37 03       		.byte	0x3
 4222 0b38 00000000 		.4byte	system_settings
 4223 0b3c 23       		.uleb128 0x23
 4224 0b3d 27010000 		.4byte	.LASF152
 4225 0b41 09       		.byte	0x9
 4226 0b42 6F       		.byte	0x6f
 4227 0b43 D2030000 		.4byte	0x3d2
 4228 0b47 05       		.uleb128 0x5
 4229 0b48 03       		.byte	0x3
 4230 0b49 00000000 		.4byte	alarmMeasure
 4231 0b4d 23       		.uleb128 0x23
 4232 0b4e 7B010000 		.4byte	.LASF153
 4233 0b52 09       		.byte	0x9
 4234 0b53 70       		.byte	0x70
 4235 0b54 AD000000 		.4byte	0xad
 4236 0b58 05       		.uleb128 0x5
 4237 0b59 03       		.byte	0x3
 4238 0b5a 00000000 		.4byte	timeToMeasure
 4239 0b5e 23       		.uleb128 0x23
 4240 0b5f 02030000 		.4byte	.LASF154
 4241 0b63 09       		.byte	0x9
 4242 0b64 71       		.byte	0x71
 4243 0b65 D2030000 		.4byte	0x3d2
 4244 0b69 05       		.uleb128 0x5
 4245 0b6a 03       		.byte	0x3
 4246 0b6b 00000000 		.4byte	alarmSync
 4247 0b6f 23       		.uleb128 0x23
 4248 0b70 A1010000 		.4byte	.LASF155
 4249 0b74 09       		.byte	0x9
 4250 0b75 72       		.byte	0x72
 4251 0b76 AD000000 		.4byte	0xad
 4252 0b7a 05       		.uleb128 0x5
 4253 0b7b 03       		.byte	0x3
 4254 0b7c 00000000 		.4byte	timeToSync
 4255 0b80 23       		.uleb128 0x23
 4256 0b81 F4040000 		.4byte	.LASF156
 4257 0b85 09       		.byte	0x9
 4258 0b86 73       		.byte	0x73
 4259 0b87 AD000000 		.4byte	0xad
 4260 0b8b 05       		.uleb128 0x5
 4261 0b8c 03       		.byte	0x3
 4262 0b8d 00000000 		.4byte	timeToSycnRemoteParams
 4263 0b91 25       		.uleb128 0x25
 4264 0b92 68657900 		.ascii	"hey\000"
 4265 0b96 09       		.byte	0x9
 4266 0b97 74       		.byte	0x74
 4267 0b98 AD000000 		.4byte	0xad
 4268 0b9c 05       		.uleb128 0x5
 4269 0b9d 03       		.byte	0x3
 4270 0b9e 00000000 		.4byte	hey
 4271 0ba2 08       		.uleb128 0x8
 4272 0ba3 F7000000 		.4byte	0xf7
 4273 0ba7 B30B0000 		.4byte	0xbb3
 4274 0bab 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 95


 4275 0bac 05010000 		.4byte	0x105
 4276 0bb0 FF03     		.2byte	0x3ff
 4277 0bb2 00       		.byte	0
 4278 0bb3 23       		.uleb128 0x23
 4279 0bb4 CC040000 		.4byte	.LASF157
 4280 0bb8 01       		.byte	0x1
 4281 0bb9 05       		.byte	0x5
 4282 0bba A20B0000 		.4byte	0xba2
 4283 0bbe 05       		.uleb128 0x5
 4284 0bbf 03       		.byte	0x3
 4285 0bc0 00000000 		.4byte	uart_received_string
 4286 0bc4 23       		.uleb128 0x23
 4287 0bc5 F2060000 		.4byte	.LASF158
 4288 0bc9 01       		.byte	0x1
 4289 0bca 06       		.byte	0x6
 4290 0bcb D1000000 		.4byte	0xd1
 4291 0bcf 05       		.uleb128 0x5
 4292 0bd0 03       		.byte	0x3
 4293 0bd1 00000000 		.4byte	uart_string_index
 4294 0bd5 00       		.byte	0
 4295              		.section	.debug_abbrev,"",%progbits
 4296              	.Ldebug_abbrev0:
 4297 0000 01       		.uleb128 0x1
 4298 0001 11       		.uleb128 0x11
 4299 0002 01       		.byte	0x1
 4300 0003 25       		.uleb128 0x25
 4301 0004 0E       		.uleb128 0xe
 4302 0005 13       		.uleb128 0x13
 4303 0006 0B       		.uleb128 0xb
 4304 0007 03       		.uleb128 0x3
 4305 0008 0E       		.uleb128 0xe
 4306 0009 1B       		.uleb128 0x1b
 4307 000a 0E       		.uleb128 0xe
 4308 000b 55       		.uleb128 0x55
 4309 000c 17       		.uleb128 0x17
 4310 000d 11       		.uleb128 0x11
 4311 000e 01       		.uleb128 0x1
 4312 000f 10       		.uleb128 0x10
 4313 0010 17       		.uleb128 0x17
 4314 0011 00       		.byte	0
 4315 0012 00       		.byte	0
 4316 0013 02       		.uleb128 0x2
 4317 0014 24       		.uleb128 0x24
 4318 0015 00       		.byte	0
 4319 0016 0B       		.uleb128 0xb
 4320 0017 0B       		.uleb128 0xb
 4321 0018 3E       		.uleb128 0x3e
 4322 0019 0B       		.uleb128 0xb
 4323 001a 03       		.uleb128 0x3
 4324 001b 0E       		.uleb128 0xe
 4325 001c 00       		.byte	0
 4326 001d 00       		.byte	0
 4327 001e 03       		.uleb128 0x3
 4328 001f 16       		.uleb128 0x16
 4329 0020 00       		.byte	0
 4330 0021 03       		.uleb128 0x3
 4331 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 96


 4332 0023 3A       		.uleb128 0x3a
 4333 0024 0B       		.uleb128 0xb
 4334 0025 3B       		.uleb128 0x3b
 4335 0026 0B       		.uleb128 0xb
 4336 0027 49       		.uleb128 0x49
 4337 0028 13       		.uleb128 0x13
 4338 0029 00       		.byte	0
 4339 002a 00       		.byte	0
 4340 002b 04       		.uleb128 0x4
 4341 002c 24       		.uleb128 0x24
 4342 002d 00       		.byte	0
 4343 002e 0B       		.uleb128 0xb
 4344 002f 0B       		.uleb128 0xb
 4345 0030 3E       		.uleb128 0x3e
 4346 0031 0B       		.uleb128 0xb
 4347 0032 03       		.uleb128 0x3
 4348 0033 08       		.uleb128 0x8
 4349 0034 00       		.byte	0
 4350 0035 00       		.byte	0
 4351 0036 05       		.uleb128 0x5
 4352 0037 16       		.uleb128 0x16
 4353 0038 00       		.byte	0
 4354 0039 03       		.uleb128 0x3
 4355 003a 0E       		.uleb128 0xe
 4356 003b 3A       		.uleb128 0x3a
 4357 003c 0B       		.uleb128 0xb
 4358 003d 3B       		.uleb128 0x3b
 4359 003e 05       		.uleb128 0x5
 4360 003f 49       		.uleb128 0x49
 4361 0040 13       		.uleb128 0x13
 4362 0041 00       		.byte	0
 4363 0042 00       		.byte	0
 4364 0043 06       		.uleb128 0x6
 4365 0044 0F       		.uleb128 0xf
 4366 0045 00       		.byte	0
 4367 0046 0B       		.uleb128 0xb
 4368 0047 0B       		.uleb128 0xb
 4369 0048 49       		.uleb128 0x49
 4370 0049 13       		.uleb128 0x13
 4371 004a 00       		.byte	0
 4372 004b 00       		.byte	0
 4373 004c 07       		.uleb128 0x7
 4374 004d 26       		.uleb128 0x26
 4375 004e 00       		.byte	0
 4376 004f 49       		.uleb128 0x49
 4377 0050 13       		.uleb128 0x13
 4378 0051 00       		.byte	0
 4379 0052 00       		.byte	0
 4380 0053 08       		.uleb128 0x8
 4381 0054 01       		.uleb128 0x1
 4382 0055 01       		.byte	0x1
 4383 0056 49       		.uleb128 0x49
 4384 0057 13       		.uleb128 0x13
 4385 0058 01       		.uleb128 0x1
 4386 0059 13       		.uleb128 0x13
 4387 005a 00       		.byte	0
 4388 005b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 97


 4389 005c 09       		.uleb128 0x9
 4390 005d 21       		.uleb128 0x21
 4391 005e 00       		.byte	0
 4392 005f 49       		.uleb128 0x49
 4393 0060 13       		.uleb128 0x13
 4394 0061 2F       		.uleb128 0x2f
 4395 0062 0B       		.uleb128 0xb
 4396 0063 00       		.byte	0
 4397 0064 00       		.byte	0
 4398 0065 0A       		.uleb128 0xa
 4399 0066 13       		.uleb128 0x13
 4400 0067 01       		.byte	0x1
 4401 0068 03       		.uleb128 0x3
 4402 0069 08       		.uleb128 0x8
 4403 006a 0B       		.uleb128 0xb
 4404 006b 0B       		.uleb128 0xb
 4405 006c 3A       		.uleb128 0x3a
 4406 006d 0B       		.uleb128 0xb
 4407 006e 3B       		.uleb128 0x3b
 4408 006f 0B       		.uleb128 0xb
 4409 0070 01       		.uleb128 0x1
 4410 0071 13       		.uleb128 0x13
 4411 0072 00       		.byte	0
 4412 0073 00       		.byte	0
 4413 0074 0B       		.uleb128 0xb
 4414 0075 0D       		.uleb128 0xd
 4415 0076 00       		.byte	0
 4416 0077 03       		.uleb128 0x3
 4417 0078 0E       		.uleb128 0xe
 4418 0079 3A       		.uleb128 0x3a
 4419 007a 0B       		.uleb128 0xb
 4420 007b 3B       		.uleb128 0x3b
 4421 007c 0B       		.uleb128 0xb
 4422 007d 49       		.uleb128 0x49
 4423 007e 13       		.uleb128 0x13
 4424 007f 38       		.uleb128 0x38
 4425 0080 0B       		.uleb128 0xb
 4426 0081 00       		.byte	0
 4427 0082 00       		.byte	0
 4428 0083 0C       		.uleb128 0xc
 4429 0084 13       		.uleb128 0x13
 4430 0085 01       		.byte	0x1
 4431 0086 0B       		.uleb128 0xb
 4432 0087 05       		.uleb128 0x5
 4433 0088 3A       		.uleb128 0x3a
 4434 0089 0B       		.uleb128 0xb
 4435 008a 3B       		.uleb128 0x3b
 4436 008b 0B       		.uleb128 0xb
 4437 008c 01       		.uleb128 0x1
 4438 008d 13       		.uleb128 0x13
 4439 008e 00       		.byte	0
 4440 008f 00       		.byte	0
 4441 0090 0D       		.uleb128 0xd
 4442 0091 13       		.uleb128 0x13
 4443 0092 01       		.byte	0x1
 4444 0093 0B       		.uleb128 0xb
 4445 0094 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 98


 4446 0095 3A       		.uleb128 0x3a
 4447 0096 0B       		.uleb128 0xb
 4448 0097 3B       		.uleb128 0x3b
 4449 0098 0B       		.uleb128 0xb
 4450 0099 01       		.uleb128 0x1
 4451 009a 13       		.uleb128 0x13
 4452 009b 00       		.byte	0
 4453 009c 00       		.byte	0
 4454 009d 0E       		.uleb128 0xe
 4455 009e 0D       		.uleb128 0xd
 4456 009f 00       		.byte	0
 4457 00a0 03       		.uleb128 0x3
 4458 00a1 08       		.uleb128 0x8
 4459 00a2 3A       		.uleb128 0x3a
 4460 00a3 0B       		.uleb128 0xb
 4461 00a4 3B       		.uleb128 0x3b
 4462 00a5 0B       		.uleb128 0xb
 4463 00a6 49       		.uleb128 0x49
 4464 00a7 13       		.uleb128 0x13
 4465 00a8 38       		.uleb128 0x38
 4466 00a9 0B       		.uleb128 0xb
 4467 00aa 00       		.byte	0
 4468 00ab 00       		.byte	0
 4469 00ac 0F       		.uleb128 0xf
 4470 00ad 35       		.uleb128 0x35
 4471 00ae 00       		.byte	0
 4472 00af 49       		.uleb128 0x49
 4473 00b0 13       		.uleb128 0x13
 4474 00b1 00       		.byte	0
 4475 00b2 00       		.byte	0
 4476 00b3 10       		.uleb128 0x10
 4477 00b4 2E       		.uleb128 0x2e
 4478 00b5 00       		.byte	0
 4479 00b6 3F       		.uleb128 0x3f
 4480 00b7 19       		.uleb128 0x19
 4481 00b8 03       		.uleb128 0x3
 4482 00b9 0E       		.uleb128 0xe
 4483 00ba 3A       		.uleb128 0x3a
 4484 00bb 0B       		.uleb128 0xb
 4485 00bc 3B       		.uleb128 0x3b
 4486 00bd 0B       		.uleb128 0xb
 4487 00be 27       		.uleb128 0x27
 4488 00bf 19       		.uleb128 0x19
 4489 00c0 11       		.uleb128 0x11
 4490 00c1 01       		.uleb128 0x1
 4491 00c2 12       		.uleb128 0x12
 4492 00c3 06       		.uleb128 0x6
 4493 00c4 40       		.uleb128 0x40
 4494 00c5 18       		.uleb128 0x18
 4495 00c6 9642     		.uleb128 0x2116
 4496 00c8 19       		.uleb128 0x19
 4497 00c9 00       		.byte	0
 4498 00ca 00       		.byte	0
 4499 00cb 11       		.uleb128 0x11
 4500 00cc 2E       		.uleb128 0x2e
 4501 00cd 00       		.byte	0
 4502 00ce 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 99


 4503 00cf 19       		.uleb128 0x19
 4504 00d0 03       		.uleb128 0x3
 4505 00d1 0E       		.uleb128 0xe
 4506 00d2 3A       		.uleb128 0x3a
 4507 00d3 0B       		.uleb128 0xb
 4508 00d4 3B       		.uleb128 0x3b
 4509 00d5 0B       		.uleb128 0xb
 4510 00d6 11       		.uleb128 0x11
 4511 00d7 01       		.uleb128 0x1
 4512 00d8 12       		.uleb128 0x12
 4513 00d9 06       		.uleb128 0x6
 4514 00da 40       		.uleb128 0x40
 4515 00db 18       		.uleb128 0x18
 4516 00dc 9642     		.uleb128 0x2116
 4517 00de 19       		.uleb128 0x19
 4518 00df 00       		.byte	0
 4519 00e0 00       		.byte	0
 4520 00e1 12       		.uleb128 0x12
 4521 00e2 2E       		.uleb128 0x2e
 4522 00e3 01       		.byte	0x1
 4523 00e4 3F       		.uleb128 0x3f
 4524 00e5 19       		.uleb128 0x19
 4525 00e6 03       		.uleb128 0x3
 4526 00e7 0E       		.uleb128 0xe
 4527 00e8 3A       		.uleb128 0x3a
 4528 00e9 0B       		.uleb128 0xb
 4529 00ea 3B       		.uleb128 0x3b
 4530 00eb 0B       		.uleb128 0xb
 4531 00ec 49       		.uleb128 0x49
 4532 00ed 13       		.uleb128 0x13
 4533 00ee 11       		.uleb128 0x11
 4534 00ef 01       		.uleb128 0x1
 4535 00f0 12       		.uleb128 0x12
 4536 00f1 06       		.uleb128 0x6
 4537 00f2 40       		.uleb128 0x40
 4538 00f3 18       		.uleb128 0x18
 4539 00f4 9642     		.uleb128 0x2116
 4540 00f6 19       		.uleb128 0x19
 4541 00f7 01       		.uleb128 0x1
 4542 00f8 13       		.uleb128 0x13
 4543 00f9 00       		.byte	0
 4544 00fa 00       		.byte	0
 4545 00fb 13       		.uleb128 0x13
 4546 00fc 34       		.uleb128 0x34
 4547 00fd 00       		.byte	0
 4548 00fe 03       		.uleb128 0x3
 4549 00ff 0E       		.uleb128 0xe
 4550 0100 3A       		.uleb128 0x3a
 4551 0101 0B       		.uleb128 0xb
 4552 0102 3B       		.uleb128 0x3b
 4553 0103 0B       		.uleb128 0xb
 4554 0104 49       		.uleb128 0x49
 4555 0105 13       		.uleb128 0x13
 4556 0106 02       		.uleb128 0x2
 4557 0107 18       		.uleb128 0x18
 4558 0108 00       		.byte	0
 4559 0109 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 100


 4560 010a 14       		.uleb128 0x14
 4561 010b 0B       		.uleb128 0xb
 4562 010c 01       		.byte	0x1
 4563 010d 11       		.uleb128 0x11
 4564 010e 01       		.uleb128 0x1
 4565 010f 12       		.uleb128 0x12
 4566 0110 06       		.uleb128 0x6
 4567 0111 00       		.byte	0
 4568 0112 00       		.byte	0
 4569 0113 15       		.uleb128 0x15
 4570 0114 2E       		.uleb128 0x2e
 4571 0115 01       		.byte	0x1
 4572 0116 3F       		.uleb128 0x3f
 4573 0117 19       		.uleb128 0x19
 4574 0118 03       		.uleb128 0x3
 4575 0119 0E       		.uleb128 0xe
 4576 011a 3A       		.uleb128 0x3a
 4577 011b 0B       		.uleb128 0xb
 4578 011c 3B       		.uleb128 0x3b
 4579 011d 0B       		.uleb128 0xb
 4580 011e 27       		.uleb128 0x27
 4581 011f 19       		.uleb128 0x19
 4582 0120 49       		.uleb128 0x49
 4583 0121 13       		.uleb128 0x13
 4584 0122 11       		.uleb128 0x11
 4585 0123 01       		.uleb128 0x1
 4586 0124 12       		.uleb128 0x12
 4587 0125 06       		.uleb128 0x6
 4588 0126 40       		.uleb128 0x40
 4589 0127 18       		.uleb128 0x18
 4590 0128 9642     		.uleb128 0x2116
 4591 012a 19       		.uleb128 0x19
 4592 012b 01       		.uleb128 0x1
 4593 012c 13       		.uleb128 0x13
 4594 012d 00       		.byte	0
 4595 012e 00       		.byte	0
 4596 012f 16       		.uleb128 0x16
 4597 0130 05       		.uleb128 0x5
 4598 0131 00       		.byte	0
 4599 0132 03       		.uleb128 0x3
 4600 0133 0E       		.uleb128 0xe
 4601 0134 3A       		.uleb128 0x3a
 4602 0135 0B       		.uleb128 0xb
 4603 0136 3B       		.uleb128 0x3b
 4604 0137 0B       		.uleb128 0xb
 4605 0138 49       		.uleb128 0x49
 4606 0139 13       		.uleb128 0x13
 4607 013a 02       		.uleb128 0x2
 4608 013b 18       		.uleb128 0x18
 4609 013c 00       		.byte	0
 4610 013d 00       		.byte	0
 4611 013e 17       		.uleb128 0x17
 4612 013f 34       		.uleb128 0x34
 4613 0140 00       		.byte	0
 4614 0141 03       		.uleb128 0x3
 4615 0142 08       		.uleb128 0x8
 4616 0143 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 101


 4617 0144 0B       		.uleb128 0xb
 4618 0145 3B       		.uleb128 0x3b
 4619 0146 0B       		.uleb128 0xb
 4620 0147 49       		.uleb128 0x49
 4621 0148 13       		.uleb128 0x13
 4622 0149 02       		.uleb128 0x2
 4623 014a 18       		.uleb128 0x18
 4624 014b 00       		.byte	0
 4625 014c 00       		.byte	0
 4626 014d 18       		.uleb128 0x18
 4627 014e 2E       		.uleb128 0x2e
 4628 014f 01       		.byte	0x1
 4629 0150 3F       		.uleb128 0x3f
 4630 0151 19       		.uleb128 0x19
 4631 0152 03       		.uleb128 0x3
 4632 0153 0E       		.uleb128 0xe
 4633 0154 3A       		.uleb128 0x3a
 4634 0155 0B       		.uleb128 0xb
 4635 0156 3B       		.uleb128 0x3b
 4636 0157 05       		.uleb128 0x5
 4637 0158 27       		.uleb128 0x27
 4638 0159 19       		.uleb128 0x19
 4639 015a 49       		.uleb128 0x49
 4640 015b 13       		.uleb128 0x13
 4641 015c 11       		.uleb128 0x11
 4642 015d 01       		.uleb128 0x1
 4643 015e 12       		.uleb128 0x12
 4644 015f 06       		.uleb128 0x6
 4645 0160 40       		.uleb128 0x40
 4646 0161 18       		.uleb128 0x18
 4647 0162 9642     		.uleb128 0x2116
 4648 0164 19       		.uleb128 0x19
 4649 0165 01       		.uleb128 0x1
 4650 0166 13       		.uleb128 0x13
 4651 0167 00       		.byte	0
 4652 0168 00       		.byte	0
 4653 0169 19       		.uleb128 0x19
 4654 016a 05       		.uleb128 0x5
 4655 016b 00       		.byte	0
 4656 016c 03       		.uleb128 0x3
 4657 016d 0E       		.uleb128 0xe
 4658 016e 3A       		.uleb128 0x3a
 4659 016f 0B       		.uleb128 0xb
 4660 0170 3B       		.uleb128 0x3b
 4661 0171 05       		.uleb128 0x5
 4662 0172 49       		.uleb128 0x49
 4663 0173 13       		.uleb128 0x13
 4664 0174 02       		.uleb128 0x2
 4665 0175 18       		.uleb128 0x18
 4666 0176 00       		.byte	0
 4667 0177 00       		.byte	0
 4668 0178 1A       		.uleb128 0x1a
 4669 0179 34       		.uleb128 0x34
 4670 017a 00       		.byte	0
 4671 017b 03       		.uleb128 0x3
 4672 017c 08       		.uleb128 0x8
 4673 017d 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 102


 4674 017e 0B       		.uleb128 0xb
 4675 017f 3B       		.uleb128 0x3b
 4676 0180 05       		.uleb128 0x5
 4677 0181 49       		.uleb128 0x49
 4678 0182 13       		.uleb128 0x13
 4679 0183 02       		.uleb128 0x2
 4680 0184 18       		.uleb128 0x18
 4681 0185 00       		.byte	0
 4682 0186 00       		.byte	0
 4683 0187 1B       		.uleb128 0x1b
 4684 0188 2E       		.uleb128 0x2e
 4685 0189 01       		.byte	0x1
 4686 018a 3F       		.uleb128 0x3f
 4687 018b 19       		.uleb128 0x19
 4688 018c 03       		.uleb128 0x3
 4689 018d 0E       		.uleb128 0xe
 4690 018e 3A       		.uleb128 0x3a
 4691 018f 0B       		.uleb128 0xb
 4692 0190 3B       		.uleb128 0x3b
 4693 0191 05       		.uleb128 0x5
 4694 0192 49       		.uleb128 0x49
 4695 0193 13       		.uleb128 0x13
 4696 0194 11       		.uleb128 0x11
 4697 0195 01       		.uleb128 0x1
 4698 0196 12       		.uleb128 0x12
 4699 0197 06       		.uleb128 0x6
 4700 0198 40       		.uleb128 0x40
 4701 0199 18       		.uleb128 0x18
 4702 019a 9642     		.uleb128 0x2116
 4703 019c 19       		.uleb128 0x19
 4704 019d 01       		.uleb128 0x1
 4705 019e 13       		.uleb128 0x13
 4706 019f 00       		.byte	0
 4707 01a0 00       		.byte	0
 4708 01a1 1C       		.uleb128 0x1c
 4709 01a2 34       		.uleb128 0x34
 4710 01a3 00       		.byte	0
 4711 01a4 03       		.uleb128 0x3
 4712 01a5 0E       		.uleb128 0xe
 4713 01a6 3A       		.uleb128 0x3a
 4714 01a7 0B       		.uleb128 0xb
 4715 01a8 3B       		.uleb128 0x3b
 4716 01a9 05       		.uleb128 0x5
 4717 01aa 49       		.uleb128 0x49
 4718 01ab 13       		.uleb128 0x13
 4719 01ac 02       		.uleb128 0x2
 4720 01ad 18       		.uleb128 0x18
 4721 01ae 00       		.byte	0
 4722 01af 00       		.byte	0
 4723 01b0 1D       		.uleb128 0x1d
 4724 01b1 2E       		.uleb128 0x2e
 4725 01b2 00       		.byte	0
 4726 01b3 3F       		.uleb128 0x3f
 4727 01b4 19       		.uleb128 0x19
 4728 01b5 03       		.uleb128 0x3
 4729 01b6 0E       		.uleb128 0xe
 4730 01b7 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 103


 4731 01b8 0B       		.uleb128 0xb
 4732 01b9 3B       		.uleb128 0x3b
 4733 01ba 05       		.uleb128 0x5
 4734 01bb 11       		.uleb128 0x11
 4735 01bc 01       		.uleb128 0x1
 4736 01bd 12       		.uleb128 0x12
 4737 01be 06       		.uleb128 0x6
 4738 01bf 40       		.uleb128 0x40
 4739 01c0 18       		.uleb128 0x18
 4740 01c1 9642     		.uleb128 0x2116
 4741 01c3 19       		.uleb128 0x19
 4742 01c4 00       		.byte	0
 4743 01c5 00       		.byte	0
 4744 01c6 1E       		.uleb128 0x1e
 4745 01c7 2E       		.uleb128 0x2e
 4746 01c8 00       		.byte	0
 4747 01c9 3F       		.uleb128 0x3f
 4748 01ca 19       		.uleb128 0x19
 4749 01cb 03       		.uleb128 0x3
 4750 01cc 0E       		.uleb128 0xe
 4751 01cd 3A       		.uleb128 0x3a
 4752 01ce 0B       		.uleb128 0xb
 4753 01cf 3B       		.uleb128 0x3b
 4754 01d0 05       		.uleb128 0x5
 4755 01d1 49       		.uleb128 0x49
 4756 01d2 13       		.uleb128 0x13
 4757 01d3 11       		.uleb128 0x11
 4758 01d4 01       		.uleb128 0x1
 4759 01d5 12       		.uleb128 0x12
 4760 01d6 06       		.uleb128 0x6
 4761 01d7 40       		.uleb128 0x40
 4762 01d8 18       		.uleb128 0x18
 4763 01d9 9642     		.uleb128 0x2116
 4764 01db 19       		.uleb128 0x19
 4765 01dc 00       		.byte	0
 4766 01dd 00       		.byte	0
 4767 01de 1F       		.uleb128 0x1f
 4768 01df 2E       		.uleb128 0x2e
 4769 01e0 01       		.byte	0x1
 4770 01e1 3F       		.uleb128 0x3f
 4771 01e2 19       		.uleb128 0x19
 4772 01e3 03       		.uleb128 0x3
 4773 01e4 0E       		.uleb128 0xe
 4774 01e5 3A       		.uleb128 0x3a
 4775 01e6 0B       		.uleb128 0xb
 4776 01e7 3B       		.uleb128 0x3b
 4777 01e8 05       		.uleb128 0x5
 4778 01e9 11       		.uleb128 0x11
 4779 01ea 01       		.uleb128 0x1
 4780 01eb 12       		.uleb128 0x12
 4781 01ec 06       		.uleb128 0x6
 4782 01ed 40       		.uleb128 0x40
 4783 01ee 18       		.uleb128 0x18
 4784 01ef 9642     		.uleb128 0x2116
 4785 01f1 19       		.uleb128 0x19
 4786 01f2 01       		.uleb128 0x1
 4787 01f3 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 104


 4788 01f4 00       		.byte	0
 4789 01f5 00       		.byte	0
 4790 01f6 20       		.uleb128 0x20
 4791 01f7 2E       		.uleb128 0x2e
 4792 01f8 00       		.byte	0
 4793 01f9 3F       		.uleb128 0x3f
 4794 01fa 19       		.uleb128 0x19
 4795 01fb 03       		.uleb128 0x3
 4796 01fc 0E       		.uleb128 0xe
 4797 01fd 3A       		.uleb128 0x3a
 4798 01fe 0B       		.uleb128 0xb
 4799 01ff 3B       		.uleb128 0x3b
 4800 0200 05       		.uleb128 0x5
 4801 0201 11       		.uleb128 0x11
 4802 0202 01       		.uleb128 0x1
 4803 0203 12       		.uleb128 0x12
 4804 0204 06       		.uleb128 0x6
 4805 0205 40       		.uleb128 0x40
 4806 0206 18       		.uleb128 0x18
 4807 0207 9742     		.uleb128 0x2117
 4808 0209 19       		.uleb128 0x19
 4809 020a 00       		.byte	0
 4810 020b 00       		.byte	0
 4811 020c 21       		.uleb128 0x21
 4812 020d 2E       		.uleb128 0x2e
 4813 020e 00       		.byte	0
 4814 020f 3F       		.uleb128 0x3f
 4815 0210 19       		.uleb128 0x19
 4816 0211 03       		.uleb128 0x3
 4817 0212 0E       		.uleb128 0xe
 4818 0213 3A       		.uleb128 0x3a
 4819 0214 0B       		.uleb128 0xb
 4820 0215 3B       		.uleb128 0x3b
 4821 0216 05       		.uleb128 0x5
 4822 0217 49       		.uleb128 0x49
 4823 0218 13       		.uleb128 0x13
 4824 0219 11       		.uleb128 0x11
 4825 021a 01       		.uleb128 0x1
 4826 021b 12       		.uleb128 0x12
 4827 021c 06       		.uleb128 0x6
 4828 021d 40       		.uleb128 0x40
 4829 021e 18       		.uleb128 0x18
 4830 021f 9742     		.uleb128 0x2117
 4831 0221 19       		.uleb128 0x19
 4832 0222 00       		.byte	0
 4833 0223 00       		.byte	0
 4834 0224 22       		.uleb128 0x22
 4835 0225 34       		.uleb128 0x34
 4836 0226 00       		.byte	0
 4837 0227 03       		.uleb128 0x3
 4838 0228 0E       		.uleb128 0xe
 4839 0229 3A       		.uleb128 0x3a
 4840 022a 0B       		.uleb128 0xb
 4841 022b 3B       		.uleb128 0x3b
 4842 022c 05       		.uleb128 0x5
 4843 022d 49       		.uleb128 0x49
 4844 022e 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 105


 4845 022f 3F       		.uleb128 0x3f
 4846 0230 19       		.uleb128 0x19
 4847 0231 3C       		.uleb128 0x3c
 4848 0232 19       		.uleb128 0x19
 4849 0233 00       		.byte	0
 4850 0234 00       		.byte	0
 4851 0235 23       		.uleb128 0x23
 4852 0236 34       		.uleb128 0x34
 4853 0237 00       		.byte	0
 4854 0238 03       		.uleb128 0x3
 4855 0239 0E       		.uleb128 0xe
 4856 023a 3A       		.uleb128 0x3a
 4857 023b 0B       		.uleb128 0xb
 4858 023c 3B       		.uleb128 0x3b
 4859 023d 0B       		.uleb128 0xb
 4860 023e 49       		.uleb128 0x49
 4861 023f 13       		.uleb128 0x13
 4862 0240 3F       		.uleb128 0x3f
 4863 0241 19       		.uleb128 0x19
 4864 0242 02       		.uleb128 0x2
 4865 0243 18       		.uleb128 0x18
 4866 0244 00       		.byte	0
 4867 0245 00       		.byte	0
 4868 0246 24       		.uleb128 0x24
 4869 0247 21       		.uleb128 0x21
 4870 0248 00       		.byte	0
 4871 0249 49       		.uleb128 0x49
 4872 024a 13       		.uleb128 0x13
 4873 024b 2F       		.uleb128 0x2f
 4874 024c 05       		.uleb128 0x5
 4875 024d 00       		.byte	0
 4876 024e 00       		.byte	0
 4877 024f 25       		.uleb128 0x25
 4878 0250 34       		.uleb128 0x34
 4879 0251 00       		.byte	0
 4880 0252 03       		.uleb128 0x3
 4881 0253 08       		.uleb128 0x8
 4882 0254 3A       		.uleb128 0x3a
 4883 0255 0B       		.uleb128 0xb
 4884 0256 3B       		.uleb128 0x3b
 4885 0257 0B       		.uleb128 0xb
 4886 0258 49       		.uleb128 0x49
 4887 0259 13       		.uleb128 0x13
 4888 025a 3F       		.uleb128 0x3f
 4889 025b 19       		.uleb128 0x19
 4890 025c 02       		.uleb128 0x2
 4891 025d 18       		.uleb128 0x18
 4892 025e 00       		.byte	0
 4893 025f 00       		.byte	0
 4894 0260 00       		.byte	0
 4895              		.section	.debug_aranges,"",%progbits
 4896 0000 D4000000 		.4byte	0xd4
 4897 0004 0200     		.2byte	0x2
 4898 0006 00000000 		.4byte	.Ldebug_info0
 4899 000a 04       		.byte	0x4
 4900 000b 00       		.byte	0
 4901 000c 0000     		.2byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 106


 4902 000e 0000     		.2byte	0
 4903 0010 00000000 		.4byte	.LFB64
 4904 0014 44000000 		.4byte	.LFE64-.LFB64
 4905 0018 00000000 		.4byte	.LFB65
 4906 001c 6C000000 		.4byte	.LFE65-.LFB65
 4907 0020 00000000 		.4byte	.LFB66
 4908 0024 32000000 		.4byte	.LFE66-.LFB66
 4909 0028 00000000 		.4byte	.LFB67
 4910 002c 20000000 		.4byte	.LFE67-.LFB67
 4911 0030 00000000 		.4byte	.LFB68
 4912 0034 40000000 		.4byte	.LFE68-.LFB68
 4913 0038 00000000 		.4byte	.LFB69
 4914 003c DC000000 		.4byte	.LFE69-.LFB69
 4915 0040 00000000 		.4byte	.LFB70
 4916 0044 1C000000 		.4byte	.LFE70-.LFB70
 4917 0048 00000000 		.4byte	.LFB71
 4918 004c 28000000 		.4byte	.LFE71-.LFB71
 4919 0050 00000000 		.4byte	.LFB72
 4920 0054 B8000000 		.4byte	.LFE72-.LFB72
 4921 0058 00000000 		.4byte	.LFB73
 4922 005c 00010000 		.4byte	.LFE73-.LFB73
 4923 0060 00000000 		.4byte	.LFB74
 4924 0064 78000000 		.4byte	.LFE74-.LFB74
 4925 0068 00000000 		.4byte	.LFB75
 4926 006c 3C010000 		.4byte	.LFE75-.LFB75
 4927 0070 00000000 		.4byte	.LFB76
 4928 0074 B8000000 		.4byte	.LFE76-.LFB76
 4929 0078 00000000 		.4byte	.LFB77
 4930 007c 1C000000 		.4byte	.LFE77-.LFB77
 4931 0080 00000000 		.4byte	.LFB78
 4932 0084 28000000 		.4byte	.LFE78-.LFB78
 4933 0088 00000000 		.4byte	.LFB79
 4934 008c 84000000 		.4byte	.LFE79-.LFB79
 4935 0090 00000000 		.4byte	.LFB80
 4936 0094 30000000 		.4byte	.LFE80-.LFB80
 4937 0098 00000000 		.4byte	.LFB81
 4938 009c F4010000 		.4byte	.LFE81-.LFB81
 4939 00a0 00000000 		.4byte	.LFB82
 4940 00a4 68010000 		.4byte	.LFE82-.LFB82
 4941 00a8 00000000 		.4byte	.LFB83
 4942 00ac 44010000 		.4byte	.LFE83-.LFB83
 4943 00b0 00000000 		.4byte	.LFB84
 4944 00b4 14000000 		.4byte	.LFE84-.LFB84
 4945 00b8 00000000 		.4byte	.LFB85
 4946 00bc 1A000000 		.4byte	.LFE85-.LFB85
 4947 00c0 00000000 		.4byte	.LFB86
 4948 00c4 2A000000 		.4byte	.LFE86-.LFB86
 4949 00c8 00000000 		.4byte	.LFB87
 4950 00cc 7C020000 		.4byte	.LFE87-.LFB87
 4951 00d0 00000000 		.4byte	0
 4952 00d4 00000000 		.4byte	0
 4953              		.section	.debug_ranges,"",%progbits
 4954              	.Ldebug_ranges0:
 4955 0000 00000000 		.4byte	.LFB64
 4956 0004 44000000 		.4byte	.LFE64
 4957 0008 00000000 		.4byte	.LFB65
 4958 000c 6C000000 		.4byte	.LFE65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 107


 4959 0010 00000000 		.4byte	.LFB66
 4960 0014 32000000 		.4byte	.LFE66
 4961 0018 00000000 		.4byte	.LFB67
 4962 001c 20000000 		.4byte	.LFE67
 4963 0020 00000000 		.4byte	.LFB68
 4964 0024 40000000 		.4byte	.LFE68
 4965 0028 00000000 		.4byte	.LFB69
 4966 002c DC000000 		.4byte	.LFE69
 4967 0030 00000000 		.4byte	.LFB70
 4968 0034 1C000000 		.4byte	.LFE70
 4969 0038 00000000 		.4byte	.LFB71
 4970 003c 28000000 		.4byte	.LFE71
 4971 0040 00000000 		.4byte	.LFB72
 4972 0044 B8000000 		.4byte	.LFE72
 4973 0048 00000000 		.4byte	.LFB73
 4974 004c 00010000 		.4byte	.LFE73
 4975 0050 00000000 		.4byte	.LFB74
 4976 0054 78000000 		.4byte	.LFE74
 4977 0058 00000000 		.4byte	.LFB75
 4978 005c 3C010000 		.4byte	.LFE75
 4979 0060 00000000 		.4byte	.LFB76
 4980 0064 B8000000 		.4byte	.LFE76
 4981 0068 00000000 		.4byte	.LFB77
 4982 006c 1C000000 		.4byte	.LFE77
 4983 0070 00000000 		.4byte	.LFB78
 4984 0074 28000000 		.4byte	.LFE78
 4985 0078 00000000 		.4byte	.LFB79
 4986 007c 84000000 		.4byte	.LFE79
 4987 0080 00000000 		.4byte	.LFB80
 4988 0084 30000000 		.4byte	.LFE80
 4989 0088 00000000 		.4byte	.LFB81
 4990 008c F4010000 		.4byte	.LFE81
 4991 0090 00000000 		.4byte	.LFB82
 4992 0094 68010000 		.4byte	.LFE82
 4993 0098 00000000 		.4byte	.LFB83
 4994 009c 44010000 		.4byte	.LFE83
 4995 00a0 00000000 		.4byte	.LFB84
 4996 00a4 14000000 		.4byte	.LFE84
 4997 00a8 00000000 		.4byte	.LFB85
 4998 00ac 1A000000 		.4byte	.LFE85
 4999 00b0 00000000 		.4byte	.LFB86
 5000 00b4 2A000000 		.4byte	.LFE86
 5001 00b8 00000000 		.4byte	.LFB87
 5002 00bc 7C020000 		.4byte	.LFE87
 5003 00c0 00000000 		.4byte	0
 5004 00c4 00000000 		.4byte	0
 5005              		.section	.debug_line,"",%progbits
 5006              	.Ldebug_line0:
 5007 0000 49050000 		.section	.debug_str,"MS",%progbits,1
 5007      0200EF01 
 5007      00000201 
 5007      FB0E0D00 
 5007      01010101 
 5008              	.LASF131:
 5009 0000 676D745F 		.ascii	"gmt_offset\000"
 5009      6F666673 
 5009      657400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 108


 5010              	.LASF16:
 5011 000b 75696E74 		.ascii	"uint16\000"
 5011      313600
 5012              	.LASF38:
 5013 0012 76616C75 		.ascii	"value\000"
 5013      6500
 5014              	.LASF27:
 5015 0018 746D5F68 		.ascii	"tm_hour\000"
 5015      6F757200 
 5016              	.LASF32:
 5017 0020 746D5F79 		.ascii	"tm_yday\000"
 5017      64617900 
 5018              	.LASF139:
 5019 0028 62756666 		.ascii	"buffer_overflow\000"
 5019      65725F6F 
 5019      76657266 
 5019      6C6F7700 
 5020              	.LASF4:
 5021 0038 5F5F7569 		.ascii	"__uint8_t\000"
 5021      6E74385F 
 5021      7400
 5022              	.LASF69:
 5023 0042 636F756E 		.ascii	"countDownResetCondition\000"
 5023      74446F77 
 5023      6E526573 
 5023      6574436F 
 5023      6E646974 
 5024              	.LASF54:
 5025 005a 6C6F6E67 		.ascii	"longitude\000"
 5025      69747564 
 5025      6500
 5026              	.LASF159:
 5027 0064 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5027      43313120 
 5027      352E342E 
 5027      31203230 
 5027      31363036 
 5028 0097 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5028      20726576 
 5028      6973696F 
 5028      6E203233 
 5028      37373135 
 5029 00ca 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5029      66756E63 
 5029      74696F6E 
 5029      2D736563 
 5029      74696F6E 
 5030              	.LASF134:
 5031 00f2 6D6F6465 		.ascii	"modem_wakeup\000"
 5031      6D5F7761 
 5031      6B657570 
 5031      00
 5032              	.LASF10:
 5033 00ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 5033      206C6F6E 
 5033      6720756E 
 5033      7369676E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 109


 5033      65642069 
 5034              	.LASF143:
 5035 0116 6D6F6465 		.ascii	"modem_state\000"
 5035      6D5F7374 
 5035      61746500 
 5036              	.LASF96:
 5037 0122 74657374 		.ascii	"test\000"
 5037      00
 5038              	.LASF152:
 5039 0127 616C6172 		.ascii	"alarmMeasure\000"
 5039      6D4D6561 
 5039      73757265 
 5039      00
 5040              	.LASF138:
 5041 0134 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5041      52784275 
 5041      66666572 
 5041      00
 5042              	.LASF145:
 5043 0141 6D6F6465 		.ascii	"modem_stats\000"
 5043      6D5F7374 
 5043      61747300 
 5044              	.LASF9:
 5045 014d 6C6F6E67 		.ascii	"long long int\000"
 5045      206C6F6E 
 5045      6720696E 
 5045      7400
 5046              	.LASF0:
 5047 015b 7369676E 		.ascii	"signed char\000"
 5047      65642063 
 5047      68617200 
 5048              	.LASF47:
 5049 0167 65636E6F 		.ascii	"ecno\000"
 5049      00
 5050              	.LASF66:
 5051 016c 636F756E 		.ascii	"countDownValue\000"
 5051      74446F77 
 5051      6E56616C 
 5051      756500
 5052              	.LASF153:
 5053 017b 74696D65 		.ascii	"timeToMeasure\000"
 5053      546F4D65 
 5053      61737572 
 5053      6500
 5054              	.LASF50:
 5055 0189 74696D65 		.ascii	"time_to_network_connect\000"
 5055      5F746F5F 
 5055      6E657477 
 5055      6F726B5F 
 5055      636F6E6E 
 5056              	.LASF155:
 5057 01a1 74696D65 		.ascii	"timeToSync\000"
 5057      546F5379 
 5057      6E6300
 5058              	.LASF148:
 5059 01ac 68747470 		.ascii	"http_body\000"
 5059      5F626F64 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 110


 5059      7900
 5060              	.LASF107:
 5061 01b6 7365745F 		.ascii	"set_up_internet_connection\000"
 5061      75705F69 
 5061      6E746572 
 5061      6E65745F 
 5061      636F6E6E 
 5062              	.LASF130:
 5063 01d1 7365636F 		.ascii	"second\000"
 5063      6E6400
 5064              	.LASF126:
 5065 01d8 79656172 		.ascii	"year\000"
 5065      00
 5066              	.LASF45:
 5067 01dd 72786C65 		.ascii	"rxlev\000"
 5067      7600
 5068              	.LASF6:
 5069 01e3 6C6F6E67 		.ascii	"long int\000"
 5069      20696E74 
 5069      00
 5070              	.LASF67:
 5071 01ec 63757272 		.ascii	"currentCountDownValue\000"
 5071      656E7443 
 5071      6F756E74 
 5071      446F776E 
 5071      56616C75 
 5072              	.LASF132:
 5073 0202 6D6F6465 		.ascii	"modem_get_state\000"
 5073      6D5F6765 
 5073      745F7374 
 5073      61746500 
 5074              	.LASF55:
 5075 0212 616C7469 		.ascii	"altitude\000"
 5075      74756465 
 5075      00
 5076              	.LASF15:
 5077 021b 75696E74 		.ascii	"uint8\000"
 5077      3800
 5078              	.LASF21:
 5079 0221 646F7562 		.ascii	"double\000"
 5079      6C6500
 5080              	.LASF19:
 5081 0228 696E7433 		.ascii	"int32\000"
 5081      3200
 5082              	.LASF59:
 5083 022e 6E6F6465 		.ascii	"node_type\000"
 5083      5F747970 
 5083      6500
 5084              	.LASF122:
 5085 0238 6D6F6465 		.ascii	"modem_configure_settings\000"
 5085      6D5F636F 
 5085      6E666967 
 5085      7572655F 
 5085      73657474 
 5086              	.LASF115:
 5087 0251 735F7369 		.ascii	"s_sim_type\000"
 5087      6D5F7479 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 111


 5087      706500
 5088              	.LASF97:
 5089 025c 6E657477 		.ascii	"network_time\000"
 5089      6F726B5F 
 5089      74696D65 
 5089      00
 5090              	.LASF3:
 5091 0269 73686F72 		.ascii	"short unsigned int\000"
 5091      7420756E 
 5091      7369676E 
 5091      65642069 
 5091      6E7400
 5092              	.LASF17:
 5093 027c 75696E74 		.ascii	"uint32\000"
 5093      333200
 5094              	.LASF93:
 5095 0283 696E7465 		.ascii	"interval\000"
 5095      7276616C 
 5095      00
 5096              	.LASF7:
 5097 028c 5F5F7569 		.ascii	"__uint32_t\000"
 5097      6E743332 
 5097      5F7400
 5098              	.LASF124:
 5099 0297 6D6F6465 		.ascii	"modem_get_network_time\000"
 5099      6D5F6765 
 5099      745F6E65 
 5099      74776F72 
 5099      6B5F7469 
 5100              	.LASF29:
 5101 02ae 746D5F6D 		.ascii	"tm_mon\000"
 5101      6F6E00
 5102              	.LASF63:
 5103 02b5 64656275 		.ascii	"debug_level\000"
 5103      675F6C65 
 5103      76656C00 
 5104              	.LASF133:
 5105 02c1 6D6F6465 		.ascii	"modem_sleep\000"
 5105      6D5F736C 
 5105      65657000 
 5106              	.LASF118:
 5107 02cd 735F6465 		.ascii	"s_debug_freq\000"
 5107      6275675F 
 5107      66726571 
 5107      00
 5108              	.LASF111:
 5109 02da 75706461 		.ascii	"updatable_parameters_initialize\000"
 5109      7461626C 
 5109      655F7061 
 5109      72616D65 
 5109      74657273 
 5110              	.LASF30:
 5111 02fa 746D5F79 		.ascii	"tm_year\000"
 5111      65617200 
 5112              	.LASF154:
 5113 0302 616C6172 		.ascii	"alarmSync\000"
 5113      6D53796E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 112


 5113      6300
 5114              	.LASF79:
 5115 030c 70696E73 		.ascii	"pins_configure_active\000"
 5115      5F636F6E 
 5115      66696775 
 5115      72655F61 
 5115      63746976 
 5116              	.LASF40:
 5117 0322 6B65795F 		.ascii	"key_value_t\000"
 5117      76616C75 
 5117      655F7400 
 5118              	.LASF84:
 5119 032e 7077725F 		.ascii	"pwr_check\000"
 5119      63686563 
 5119      6B00
 5120              	.LASF8:
 5121 0338 6C6F6E67 		.ascii	"long unsigned int\000"
 5121      20756E73 
 5121      69676E65 
 5121      6420696E 
 5121      7400
 5122              	.LASF99:
 5123 034a 65787472 		.ascii	"extract_string\000"
 5123      6163745F 
 5123      73747269 
 5123      6E6700
 5124              	.LASF89:
 5125 0359 74696D65 		.ascii	"timeout\000"
 5125      6F757400 
 5126              	.LASF112:
 5127 0361 6765745F 		.ascii	"get_cell_network_stats\000"
 5127      63656C6C 
 5127      5F6E6574 
 5127      776F726B 
 5127      5F737461 
 5128              	.LASF56:
 5129 0378 74696D65 		.ascii	"time_to_lock\000"
 5129      5F746F5F 
 5129      6C6F636B 
 5129      00
 5130              	.LASF142:
 5131 0385 64617461 		.ascii	"data\000"
 5131      00
 5132              	.LASF110:
 5133 038a 6D617463 		.ascii	"match\000"
 5133      6800
 5134              	.LASF75:
 5135 0390 65705F70 		.ascii	"ep_port\000"
 5135      6F727400 
 5136              	.LASF33:
 5137 0398 746D5F69 		.ascii	"tm_isdst\000"
 5137      73647374 
 5137      00
 5138              	.LASF71:
 5139 03a1 6D6F6465 		.ascii	"modem_info\000"
 5139      6D5F696E 
 5139      666F00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 113


 5140              	.LASF74:
 5141 03ac 65705F68 		.ascii	"ep_host\000"
 5141      6F737400 
 5142              	.LASF72:
 5143 03b4 63686970 		.ascii	"chip_uniqueId\000"
 5143      5F756E69 
 5143      71756549 
 5143      6400
 5144              	.LASF94:
 5145 03c2 6D6F6465 		.ascii	"modem_power_up\000"
 5145      6D5F706F 
 5145      7765725F 
 5145      757000
 5146              	.LASF160:
 5147 03d1 6D6F6465 		.ascii	"modem.c\000"
 5147      6D2E6300 
 5148              	.LASF101:
 5149 03d9 62656769 		.ascii	"beginMarker\000"
 5149      6E4D6172 
 5149      6B657200 
 5150              	.LASF103:
 5151 03e5 74617267 		.ascii	"target\000"
 5151      657400
 5152              	.LASF51:
 5153 03ec 74696D65 		.ascii	"time_to_acquire_ip\000"
 5153      5F746F5F 
 5153      61637175 
 5153      6972655F 
 5153      697000
 5154              	.LASF102:
 5155 03ff 656E644D 		.ascii	"endMarker\000"
 5155      61726B65 
 5155      7200
 5156              	.LASF2:
 5157 0409 73686F72 		.ascii	"short int\000"
 5157      7420696E 
 5157      7400
 5158              	.LASF125:
 5159 0413 65706F63 		.ascii	"epoch_time\000"
 5159      685F7469 
 5159      6D6500
 5160              	.LASF5:
 5161 041e 5F5F696E 		.ascii	"__int32_t\000"
 5161      7433325F 
 5161      7400
 5162              	.LASF100:
 5163 0428 66726F6D 		.ascii	"from\000"
 5163      00
 5164              	.LASF106:
 5165 042d 63726567 		.ascii	"creg\000"
 5165      00
 5166              	.LASF121:
 5167 0432 64656275 		.ascii	"debug_freq\000"
 5167      675F6672 
 5167      657100
 5168              	.LASF90:
 5169 043d 61745F61 		.ascii	"at_attempt\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 114


 5169      7474656D 
 5169      707400
 5170              	.LASF98:
 5171 0448 61745F77 		.ascii	"at_write_command\000"
 5171      72697465 
 5171      5F636F6D 
 5171      6D616E64 
 5171      00
 5172              	.LASF73:
 5173 0459 7379735F 		.ascii	"sys_info_t\000"
 5173      696E666F 
 5173      5F7400
 5174              	.LASF65:
 5175 0464 75706461 		.ascii	"updatable_parameters_t\000"
 5175      7461626C 
 5175      655F7061 
 5175      72616D65 
 5175      74657273 
 5176              	.LASF120:
 5177 047b 7265706F 		.ascii	"report_freq\000"
 5177      72745F66 
 5177      72657100 
 5178              	.LASF140:
 5179 0487 64617461 		.ascii	"dataPointsInStack\000"
 5179      506F696E 
 5179      7473496E 
 5179      53746163 
 5179      6B00
 5180              	.LASF26:
 5181 0499 746D5F6D 		.ascii	"tm_min\000"
 5181      696E00
 5182              	.LASF24:
 5183 04a0 73697A65 		.ascii	"sizetype\000"
 5183      74797065 
 5183      00
 5184              	.LASF127:
 5185 04a9 6D6F6E74 		.ascii	"month\000"
 5185      6800
 5186              	.LASF105:
 5187 04af 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5187      6F6E6E65 
 5187      63746564 
 5187      5F746F5F 
 5187      63656C6C 
 5188              	.LASF157:
 5189 04cc 75617274 		.ascii	"uart_received_string\000"
 5189      5F726563 
 5189      65697665 
 5189      645F7374 
 5189      72696E67 
 5190              	.LASF53:
 5191 04e1 6C617469 		.ascii	"latitude\000"
 5191      74756465 
 5191      00
 5192              	.LASF34:
 5193 04ea 74657374 		.ascii	"test_name\000"
 5193      5F6E616D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 115


 5193      6500
 5194              	.LASF156:
 5195 04f4 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5195      546F5379 
 5195      636E5265 
 5195      6D6F7465 
 5195      50617261 
 5196              	.LASF95:
 5197 050b 6D6F6465 		.ascii	"modem_test\000"
 5197      6D5F7465 
 5197      737400
 5198              	.LASF161:
 5199 0516 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\notoriOS\\notoriOS\\no"
 5199      73657273 
 5199      5C64616E 
 5199      747A5C44 
 5199      6F63756D 
 5200 0543 746F7269 		.ascii	"toriOS.cydsn\000"
 5200      4F532E63 
 5200      7964736E 
 5200      00
 5201              	.LASF146:
 5202 0550 75706461 		.ascii	"updatable_parameters\000"
 5202      7461626C 
 5202      655F7061 
 5202      72616D65 
 5202      74657273 
 5203              	.LASF128:
 5204 0565 686F7572 		.ascii	"hour\000"
 5204      00
 5205              	.LASF87:
 5206 056a 636F6D6D 		.ascii	"commands\000"
 5206      616E6473 
 5206      00
 5207              	.LASF91:
 5208 0573 636F6D70 		.ascii	"compare_location\000"
 5208      6172655F 
 5208      6C6F6361 
 5208      74696F6E 
 5208      00
 5209              	.LASF20:
 5210 0584 666C6F61 		.ascii	"float\000"
 5210      7400
 5211              	.LASF77:
 5212 058a 6D6F6465 		.ascii	"modem_initialize\000"
 5212      6D5F696E 
 5212      69746961 
 5212      6C697A65 
 5212      00
 5213              	.LASF117:
 5214 059b 735F7265 		.ascii	"s_report_freq\000"
 5214      706F7274 
 5214      5F667265 
 5214      7100
 5215              	.LASF60:
 5216 05a9 73696D5F 		.ascii	"sim_type\000"
 5216      74797065 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 116


 5216      00
 5217              	.LASF108:
 5218 05b2 6973725F 		.ascii	"isr_telit_rx\000"
 5218      74656C69 
 5218      745F7278 
 5218      00
 5219              	.LASF70:
 5220 05bf 616C6172 		.ascii	"alarm\000"
 5220      6D00
 5221              	.LASF64:
 5222 05c5 5F426F6F 		.ascii	"_Bool\000"
 5222      6C00
 5223              	.LASF13:
 5224 05cb 696E7433 		.ascii	"int32_t\000"
 5224      325F7400 
 5225              	.LASF1:
 5226 05d3 756E7369 		.ascii	"unsigned char\000"
 5226      676E6564 
 5226      20636861 
 5226      7200
 5227              	.LASF151:
 5228 05e1 73797374 		.ascii	"system_settings\000"
 5228      656D5F73 
 5228      65747469 
 5228      6E677300 
 5229              	.LASF92:
 5230 05f1 64656C61 		.ascii	"delay\000"
 5230      7900
 5231              	.LASF48:
 5232 05f7 72737271 		.ascii	"rsrq\000"
 5232      00
 5233              	.LASF62:
 5234 05fc 73796E63 		.ascii	"sync_time\000"
 5234      5F74696D 
 5234      6500
 5235              	.LASF114:
 5236 0606 735F6E6F 		.ascii	"s_node_type\000"
 5236      64655F74 
 5236      79706500 
 5237              	.LASF46:
 5238 0612 72736370 		.ascii	"rscp\000"
 5238      00
 5239              	.LASF135:
 5240 0617 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5240      6D5F6765 
 5240      745F6770 
 5240      735F636F 
 5240      6F726469 
 5241              	.LASF37:
 5242 0631 74657374 		.ascii	"test_t\000"
 5242      5F7400
 5243              	.LASF150:
 5244 0638 73797374 		.ascii	"system_info\000"
 5244      656D5F69 
 5244      6E666F00 
 5245              	.LASF43:
 5246 0644 696D6569 		.ascii	"imei\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 117


 5246      00
 5247              	.LASF36:
 5248 0649 72656173 		.ascii	"reason\000"
 5248      6F6E00
 5249              	.LASF49:
 5250 0650 72737270 		.ascii	"rsrp\000"
 5250      00
 5251              	.LASF52:
 5252 0655 6D6F6465 		.ascii	"modem_stats_t\000"
 5252      6D5F7374 
 5252      6174735F 
 5252      7400
 5253              	.LASF86:
 5254 0663 75617274 		.ascii	"uart_string_reset\000"
 5254      5F737472 
 5254      696E675F 
 5254      72657365 
 5254      7400
 5255              	.LASF31:
 5256 0675 746D5F77 		.ascii	"tm_wday\000"
 5256      64617900 
 5257              	.LASF85:
 5258 067d 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5258      6D5F736F 
 5258      66745F70 
 5258      6F776572 
 5258      5F637963 
 5259              	.LASF23:
 5260 0694 6C6F6E67 		.ascii	"long double\000"
 5260      20646F75 
 5260      626C6500 
 5261              	.LASF22:
 5262 06a0 63686172 		.ascii	"char\000"
 5262      00
 5263              	.LASF104:
 5264 06a5 6D6F6465 		.ascii	"modem_process_tasks\000"
 5264      6D5F7072 
 5264      6F636573 
 5264      735F7461 
 5264      736B7300 
 5265              	.LASF11:
 5266 06b9 756E7369 		.ascii	"unsigned int\000"
 5266      676E6564 
 5266      20696E74 
 5266      00
 5267              	.LASF123:
 5268 06c6 4346554E 		.ascii	"CFUN\000"
 5268      00
 5269              	.LASF42:
 5270 06cb 6D6F6465 		.ascii	"model_id\000"
 5270      6C5F6964 
 5270      00
 5271              	.LASF149:
 5272 06d4 68747470 		.ascii	"http_route\000"
 5272      5F726F75 
 5272      746500
 5273              	.LASF44:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 118


 5274 06df 6D6F6465 		.ascii	"modem_info_t\000"
 5274      6D5F696E 
 5274      666F5F74 
 5274      00
 5275              	.LASF58:
 5276 06ec 6770735F 		.ascii	"gps_t\000"
 5276      7400
 5277              	.LASF158:
 5278 06f2 75617274 		.ascii	"uart_string_index\000"
 5278      5F737472 
 5278      696E675F 
 5278      696E6465 
 5278      7800
 5279              	.LASF61:
 5280 0704 6D656173 		.ascii	"measure_time\000"
 5280      7572655F 
 5280      74696D65 
 5280      00
 5281              	.LASF109:
 5282 0711 69735F63 		.ascii	"is_connected_to_internet\000"
 5282      6F6E6E65 
 5282      63746564 
 5282      5F746F5F 
 5282      696E7465 
 5283              	.LASF144:
 5284 072a 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5284      6D5F7374 
 5284      6172745F 
 5284      74696D65 
 5284      5F737461 
 5285              	.LASF137:
 5286 0741 6770735F 		.ascii	"gps_status\000"
 5286      73746174 
 5286      757300
 5287              	.LASF78:
 5288 074c 70696E73 		.ascii	"pins_configure_inactive\000"
 5288      5F636F6E 
 5288      66696775 
 5288      72655F69 
 5288      6E616374 
 5289              	.LASF41:
 5290 0764 73696D5F 		.ascii	"sim_id\000"
 5290      696400
 5291              	.LASF28:
 5292 076b 746D5F6D 		.ascii	"tm_mday\000"
 5292      64617900 
 5293              	.LASF57:
 5294 0773 76616C69 		.ascii	"valid\000"
 5294      6400
 5295              	.LASF119:
 5296 0779 73616D70 		.ascii	"sample_freq\000"
 5296      6C655F66 
 5296      72657100 
 5297              	.LASF129:
 5298 0785 6D696E75 		.ascii	"minute\000"
 5298      746500
 5299              	.LASF14:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 119


 5300 078c 75696E74 		.ascii	"uint32_t\000"
 5300      33325F74 
 5300      00
 5301              	.LASF25:
 5302 0795 746D5F73 		.ascii	"tm_sec\000"
 5302      656300
 5303              	.LASF113:
 5304 079c 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5304      75706461 
 5304      7465645F 
 5304      70617261 
 5304      6D657465 
 5305              	.LASF116:
 5306 07bf 735F7361 		.ascii	"s_sample_freq\000"
 5306      6D706C65 
 5306      5F667265 
 5306      7100
 5307              	.LASF35:
 5308 07cd 73746174 		.ascii	"status\000"
 5308      757300
 5309              	.LASF141:
 5310 07d4 64617461 		.ascii	"dataPointsInStackDesired\000"
 5310      506F696E 
 5310      7473496E 
 5310      53746163 
 5310      6B446573 
 5311              	.LASF76:
 5312 07ed 7379735F 		.ascii	"sys_settings_t\000"
 5312      73657474 
 5312      696E6773 
 5312      5F7400
 5313              	.LASF12:
 5314 07fc 75696E74 		.ascii	"uint8_t\000"
 5314      385F7400 
 5315              	.LASF18:
 5316 0804 696E7431 		.ascii	"int16\000"
 5316      3600
 5317              	.LASF81:
 5318 080a 61745F72 		.ascii	"at_ready\000"
 5318      65616479 
 5318      00
 5319              	.LASF82:
 5320 0813 61747465 		.ascii	"attempts\000"
 5320      6D707473 
 5320      00
 5321              	.LASF68:
 5322 081c 636F756E 		.ascii	"countDownType\000"
 5322      74446F77 
 5322      6E547970 
 5322      6500
 5323              	.LASF83:
 5324 082a 626F6F74 		.ascii	"boot_time\000"
 5324      5F74696D 
 5324      6500
 5325              	.LASF88:
 5326 0834 65787065 		.ascii	"expected_response\000"
 5326      63746564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccwNN61c.s 			page 120


 5326      5F726573 
 5326      706F6E73 
 5326      6500
 5327              	.LASF136:
 5328 0846 6C6F636B 		.ascii	"lock_time\000"
 5328      5F74696D 
 5328      6500
 5329              	.LASF147:
 5330 0850 68747470 		.ascii	"http_request\000"
 5330      5F726571 
 5330      75657374 
 5330      00
 5331              	.LASF80:
 5332 085d 6D6F6465 		.ascii	"modem_power_down\000"
 5332      6D5F706F 
 5332      7765725F 
 5332      646F776E 
 5332      00
 5333              	.LASF39:
 5334 086e 74696D65 		.ascii	"timeStamp\000"
 5334      5374616D 
 5334      7000
 5335              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
