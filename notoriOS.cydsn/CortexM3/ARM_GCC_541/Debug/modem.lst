ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,5,4
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.comm	uart_received_string,1024,4
  44              		.global	uart_string_index
  45              		.bss
  46              		.align	1
  47              		.type	uart_string_index, %object
  48              		.size	uart_string_index, 2
  49              	uart_string_index:
  50 0000 0000     		.space	2
  51              		.section	.text.isr_telit_rx,"ax",%progbits
  52              		.align	2
  53              		.global	isr_telit_rx
  54              		.thumb
  55              		.thumb_func
  56              		.type	isr_telit_rx, %function
  57              	isr_telit_rx:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 2


  58              	.LFB64:
  59              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  60              		.loc 1 18 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 98B5     		push	{r3, r4, r7, lr}
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 3, -16
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  72              		.loc 1 20 0
  73 0004 12E0     		b	.L2
  74              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  75              		.loc 1 21 0
  76 0006 0D4B     		ldr	r3, .L4
  77 0008 B3F90030 		ldrsh	r3, [r3]
  78 000c 1C46     		mov	r4, r3
  79 000e FFF7FEFF 		bl	UART_Telit_GetChar
  80 0012 0346     		mov	r3, r0
  81 0014 1A46     		mov	r2, r3
  82 0016 0A4B     		ldr	r3, .L4+4
  83 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  84              		.loc 1 22 0
  85 001a 084B     		ldr	r3, .L4
  86 001c B3F90030 		ldrsh	r3, [r3]
  87 0020 9BB2     		uxth	r3, r3
  88 0022 0133     		adds	r3, r3, #1
  89 0024 9BB2     		uxth	r3, r3
  90 0026 1AB2     		sxth	r2, r3
  91 0028 044B     		ldr	r3, .L4
  92 002a 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 3


  93              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  94              		.loc 1 20 0
  95 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
  96 0030 0346     		mov	r3, r0
  97 0032 012B     		cmp	r3, #1
  98 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
  99              		.loc 1 25 0
 100 0036 00BF     		nop
 101 0038 98BD     		pop	{r3, r4, r7, pc}
 102              	.L5:
 103 003a 00BF     		.align	2
 104              	.L4:
 105 003c 00000000 		.word	uart_string_index
 106 0040 00000000 		.word	uart_received_string
 107              		.cfi_endproc
 108              	.LFE64:
 109              		.size	isr_telit_rx, .-isr_telit_rx
 110              		.section	.text.modem_initialize,"ax",%progbits
 111              		.align	2
 112              		.global	modem_initialize
 113              		.thumb
 114              		.thumb_func
 115              		.type	modem_initialize, %function
 116              	modem_initialize:
 117              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 118              		.loc 1 28 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 128              		.loc 1 31 0
 129 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 130              		.loc 1 32 0
 131 0008 154B     		ldr	r3, .L7
 132 000a 0022     		movs	r2, #0
 133 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 134              		.loc 1 34 0
 135 000e 154B     		ldr	r3, .L7+4
 136 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 4


 137 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 138              		.loc 1 35 0
 139 0016 134B     		ldr	r3, .L7+4
 140 0018 0022     		movs	r2, #0
 141 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 142              		.loc 1 36 0
 143 001c 114B     		ldr	r3, .L7+4
 144 001e 0022     		movs	r2, #0
 145 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 146              		.loc 1 37 0
 147 0022 114B     		ldr	r3, .L7+8
 148 0024 0022     		movs	r2, #0
 149 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 150              		.loc 1 38 0
 151 0028 0F4B     		ldr	r3, .L7+8
 152 002a 0022     		movs	r2, #0
 153 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 154              		.loc 1 39 0
 155 002e 0E4B     		ldr	r3, .L7+8
 156 0030 0022     		movs	r2, #0
 157 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 158              		.loc 1 40 0
 159 0034 0C4B     		ldr	r3, .L7+8
 160 0036 0022     		movs	r2, #0
 161 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 162              		.loc 1 41 0
 163 003a 0B4B     		ldr	r3, .L7+8
 164 003c 0022     		movs	r2, #0
 165 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 166              		.loc 1 42 0
 167 0040 094B     		ldr	r3, .L7+8
 168 0042 0022     		movs	r2, #0
 169 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 170              		.loc 1 43 0
 171 0046 084B     		ldr	r3, .L7+8
 172 0048 0022     		movs	r2, #0
 173 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 174              		.loc 1 44 0
 175 004c 064B     		ldr	r3, .L7+8
 176 004e 0022     		movs	r2, #0
 177 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 178              		.loc 1 48 0
 179 0052 0021     		movs	r1, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 5


 180 0054 4020     		movs	r0, #64
 181 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 182              		.loc 1 50 0
 183 005a 00BF     		nop
 184 005c 80BD     		pop	{r7, pc}
 185              	.L8:
 186 005e 00BF     		.align	2
 187              	.L7:
 188 0060 00000000 		.word	modem_state
 189 0064 00000000 		.word	modem_info
 190 0068 00000000 		.word	modem_stats
 191              		.cfi_endproc
 192              	.LFE65:
 193              		.size	modem_initialize, .-modem_initialize
 194              		.section	.text.pins_configure_inactive,"ax",%progbits
 195              		.align	2
 196              		.global	pins_configure_inactive
 197              		.thumb
 198              		.thumb_func
 199              		.type	pins_configure_inactive, %function
 200              	pins_configure_inactive:
 201              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 202              		.loc 1 54 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 212              		.loc 1 56 0
 213 0004 0020     		movs	r0, #0
 214 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 215              		.loc 1 57 0
 216 000a 0C20     		movs	r0, #12
 217 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 218              		.loc 1 59 0
 219 0010 0020     		movs	r0, #0
 220 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 221              		.loc 1 62 0
 222 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 6


 223 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 224              		.loc 1 63 0
 225 001c 0020     		movs	r0, #0
 226 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 227              		.loc 1 64 0
 228 0022 0020     		movs	r0, #0
 229 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 230              		.loc 1 65 0
 231 0028 0020     		movs	r0, #0
 232 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 233              		.loc 1 67 0
 234 002e 00BF     		nop
 235 0030 80BD     		pop	{r7, pc}
 236              		.cfi_endproc
 237              	.LFE66:
 238              		.size	pins_configure_inactive, .-pins_configure_inactive
 239 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 240              		.align	2
 241              		.global	pins_configure_active
 242              		.thumb
 243              		.thumb_func
 244              		.type	pins_configure_active, %function
 245              	pins_configure_active:
 246              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 247              		.loc 1 70 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 257              		.loc 1 72 0
 258 0004 0220     		movs	r0, #2
 259 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 260              		.loc 1 73 0
 261 000a 0120     		movs	r0, #1
 262 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 263              		.loc 1 74 0
 264 0010 0120     		movs	r0, #1
 265 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 266              		.loc 1 75 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 7


 267 0016 6420     		movs	r0, #100
 268 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 269              		.loc 1 76 0
 270 001c 00BF     		nop
 271 001e 80BD     		pop	{r7, pc}
 272              		.cfi_endproc
 273              	.LFE67:
 274              		.size	pins_configure_active, .-pins_configure_active
 275              		.section	.rodata
 276              		.align	2
 277              	.LC0:
 278 0000 4F4B00   		.ascii	"OK\000"
 279 0003 00       		.align	2
 280              	.LC1:
 281 0004 41542353 		.ascii	"AT#SHDN\015\000"
 281      48444E0D 
 281      00
 282              		.section	.text.modem_power_down,"ax",%progbits
 283              		.align	2
 284              		.global	modem_power_down
 285              		.thumb
 286              		.thumb_func
 287              		.type	modem_power_down, %function
 288              	modem_power_down:
 289              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 290              		.loc 1 79 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 300              		.loc 1 82 0
 301 0004 41F28832 		movw	r2, #5000
 302 0008 0A49     		ldr	r1, .L12
 303 000a 0B48     		ldr	r0, .L12+4
 304 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 305              		.loc 1 85 0
 306 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 307              		.loc 1 86 0
 308 0014 4FF47A70 		mov	r0, #1000
 309 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 8


  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 310              		.loc 1 88 0
 311 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 312              		.loc 1 89 0
 313 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 314              		.loc 1 90 0
 315 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 316              		.loc 1 91 0
 317 0028 044B     		ldr	r3, .L12+8
 318 002a 0022     		movs	r2, #0
 319 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 320              		.loc 1 93 0
 321 002e 00BF     		nop
 322 0030 80BD     		pop	{r7, pc}
 323              	.L13:
 324 0032 00BF     		.align	2
 325              	.L12:
 326 0034 00000000 		.word	.LC0
 327 0038 04000000 		.word	.LC1
 328 003c 00000000 		.word	modem_state
 329              		.cfi_endproc
 330              	.LFE68:
 331              		.size	modem_power_down, .-modem_power_down
 332              		.section	.rodata
 333 000d 000000   		.align	2
 334              	.LC2:
 335 0010 41544530 		.ascii	"ATE0\015\000"
 335      0D00
 336 0016 0000     		.align	2
 337              	.LC3:
 338 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 338      6D20626F 
 338      6F742074 
 338      696D653A 
 338      20256400 
 339              		.align	2
 340              	.LC4:
 341 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 341      6D207265 
 341      61647920 
 341      666F7220 
 341      41542063 
 342 005d 000000   		.align	2
 343              	.LC5:
 344 0060 4E6F2072 		.ascii	"No response from modem.\000"
 344      6573706F 
 344      6E736520 
 344      66726F6D 
 344      206D6F64 
 345              		.section	.text.modem_power_up,"ax",%progbits
 346              		.align	2
 347              		.global	modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 9


 348              		.thumb
 349              		.thumb_func
 350              		.type	modem_power_up, %function
 351              	modem_power_up:
 352              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 353              		.loc 1 97 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 82B0     		sub	sp, sp, #8
 362              		.cfi_def_cfa_offset 16
 363 0004 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 365              		.loc 1 99 0
 366 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 367              		.loc 1 100 0
 368 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 369              		.loc 1 101 0
 370 000e 2C48     		ldr	r0, .L27
 371 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 372              		.loc 1 103 0
 373 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 374              		.loc 1 106 0
 375 0018 0023     		movs	r3, #0
 376 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 377              		.loc 1 107 0
 378 001c 0023     		movs	r3, #0
 379 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 380              		.loc 1 109 0
 381 0020 FFF7FEFF 		bl	getTimeStamp
 382 0024 3860     		str	r0, [r7]
 383              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 384              		.loc 1 112 0
 385 0026 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 10


 386 0028 BB71     		strb	r3, [r7, #6]
 387 002a 1CE0     		b	.L15
 388              	.L22:
 389              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 390              		.loc 1 114 0
 391 002c 0023     		movs	r3, #0
 392 002e 7B71     		strb	r3, [r7, #5]
 393 0030 0EE0     		b	.L16
 394              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 395              		.loc 1 116 0
 396 0032 4FF47A72 		mov	r2, #1000
 397 0036 2349     		ldr	r1, .L27+4
 398 0038 2348     		ldr	r0, .L27+8
 399 003a FFF7FEFF 		bl	at_write_command
 400 003e 0346     		mov	r3, r0
 401 0040 002B     		cmp	r3, #0
 402 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 403              		.loc 1 117 0
 404 0044 0123     		movs	r3, #1
 405 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 406              		.loc 1 118 0
 407 0048 05E0     		b	.L18
 408              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 409              		.loc 1 114 0 discriminator 2
 410 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 411 004c 0133     		adds	r3, r3, #1
 412 004e 7B71     		strb	r3, [r7, #5]
 413              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 414              		.loc 1 114 0 is_stmt 0 discriminator 1
 415 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 416 0052 132B     		cmp	r3, #19
 417 0054 EDD9     		bls	.L19
 418              	.L18:
 419              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 420              		.loc 1 122 0 is_stmt 1
 421 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 422 0058 012B     		cmp	r3, #1
 423 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 424              		.loc 1 126 0 discriminator 2
 425 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 11


 426              		.loc 1 112 0 discriminator 2
 427 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 428 0062 0133     		adds	r3, r3, #1
 429 0064 BB71     		strb	r3, [r7, #6]
 430              	.L15:
 112:modem.c       ****         
 431              		.loc 1 112 0 is_stmt 0 discriminator 1
 432 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 433 0068 022B     		cmp	r3, #2
 434 006a DFD9     		bls	.L22
 435 006c 00E0     		b	.L21
 436              	.L26:
 123:modem.c       ****             break;
 437              		.loc 1 123 0 is_stmt 1
 438 006e 00BF     		nop
 439              	.L21:
 440              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 441              		.loc 1 130 0
 442 0070 FFF7FEFF 		bl	getTimeStamp
 443 0074 0246     		mov	r2, r0
 444 0076 3B68     		ldr	r3, [r7]
 445 0078 D31A     		subs	r3, r2, r3
 446 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 447              		.loc 1 131 0
 448 007c 3A68     		ldr	r2, [r7]
 449 007e 1349     		ldr	r1, .L27+12
 450 0080 0020     		movs	r0, #0
 451 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 452              		.loc 1 133 0
 453 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 454 0088 012B     		cmp	r3, #1
 455 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 456              		.loc 1 134 0
 457 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 458 008e 1A46     		mov	r2, r3
 459 0090 0F49     		ldr	r1, .L27+16
 460 0092 0020     		movs	r0, #0
 461 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 462              		.loc 1 135 0
 463 0098 0E4B     		ldr	r3, .L27+20
 464 009a 0122     		movs	r2, #1
 465 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 12


 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 466              		.loc 1 143 0
 467 009e 0123     		movs	r3, #1
 468 00a0 09E0     		b	.L25
 469              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 470              		.loc 1 137 0
 471 00a2 0D49     		ldr	r1, .L27+24
 472 00a4 0220     		movs	r0, #2
 473 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 474              		.loc 1 138 0
 475 00aa 0A4B     		ldr	r3, .L27+20
 476 00ac 0022     		movs	r2, #0
 477 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 478              		.loc 1 140 0
 479 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 480              		.loc 1 141 0
 481 00b4 0023     		movs	r3, #0
 482              	.L25:
 144:modem.c       **** }
 483              		.loc 1 144 0
 484 00b6 1846     		mov	r0, r3
 485 00b8 0837     		adds	r7, r7, #8
 486              		.cfi_def_cfa_offset 8
 487 00ba BD46     		mov	sp, r7
 488              		.cfi_def_cfa_register 13
 489              		@ sp needed
 490 00bc 80BD     		pop	{r7, pc}
 491              	.L28:
 492 00be 00BF     		.align	2
 493              	.L27:
 494 00c0 00000000 		.word	isr_telit_rx
 495 00c4 00000000 		.word	.LC0
 496 00c8 10000000 		.word	.LC2
 497 00cc 18000000 		.word	.LC3
 498 00d0 2C000000 		.word	.LC4
 499 00d4 00000000 		.word	modem_state
 500 00d8 60000000 		.word	.LC5
 501              		.cfi_endproc
 502              	.LFE69:
 503              		.size	modem_power_up, .-modem_power_up
 504              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 505              		.align	2
 506              		.global	modem_soft_power_cycle
 507              		.thumb
 508              		.thumb_func
 509              		.type	modem_soft_power_cycle, %function
 510              	modem_soft_power_cycle:
 511              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 512              		.loc 1 147 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 13


 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 00AF     		add	r7, sp, #0
 521              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 522              		.loc 1 148 0
 523 0004 0120     		movs	r0, #1
 524 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 525              		.loc 1 149 0
 526 000a 4FF4FA60 		mov	r0, #2000
 527 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 528              		.loc 1 150 0
 529 0012 0020     		movs	r0, #0
 530 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 531              		.loc 1 152 0
 532 0018 00BF     		nop
 533 001a 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE70:
 536              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 537              		.section	.text.uart_string_reset,"ax",%progbits
 538              		.align	2
 539              		.global	uart_string_reset
 540              		.thumb
 541              		.thumb_func
 542              		.type	uart_string_reset, %function
 543              	uart_string_reset:
 544              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 545              		.loc 1 155 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 00AF     		add	r7, sp, #0
 554              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 555              		.loc 1 156 0
 556 0004 064B     		ldr	r3, .L31
 557 0006 0022     		movs	r2, #0
 558 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 14


 559              		.loc 1 158 0
 560 000a 4FF48062 		mov	r2, #1024
 561 000e 0021     		movs	r1, #0
 562 0010 0448     		ldr	r0, .L31+4
 563 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 564              		.loc 1 160 0
 565 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 566              		.loc 1 161 0
 567 001a 00BF     		nop
 568 001c 80BD     		pop	{r7, pc}
 569              	.L32:
 570 001e 00BF     		.align	2
 571              	.L31:
 572 0020 00000000 		.word	uart_string_index
 573 0024 00000000 		.word	uart_received_string
 574              		.cfi_endproc
 575              	.LFE71:
 576              		.size	uart_string_reset, .-uart_string_reset
 577              		.section	.rodata
 578              		.align	2
 579              	.LC6:
 580 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 580      6D207365 
 580      6E742041 
 580      5420636F 
 580      6D6D616E 
 581              		.align	2
 582              	.LC7:
 583 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 583      6D205265 
 583      63656976 
 583      65642065 
 583      78706563 
 584 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 584      616E643A 
 584      2025730A 
 584      52656365 
 584      69766564 
 585 00f1 000000   		.align	2
 586              	.LC8:
 587 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 587      6D207265 
 587      71756972 
 587      65642025 
 587      64207472 
 588 0127 0A00     		.ascii	"\012\000"
 589              		.section	.text.at_write_command,"ax",%progbits
 590              		.align	2
 591              		.global	at_write_command
 592              		.thumb
 593              		.thumb_func
 594              		.type	at_write_command, %function
 595              	at_write_command:
 596              	.LFB72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 15


 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 597              		.loc 1 166 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 40
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601 0000 80B5     		push	{r7, lr}
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 0002 8AB0     		sub	sp, sp, #40
 606              		.cfi_def_cfa_offset 48
 607 0004 00AF     		add	r7, sp, #0
 608              		.cfi_def_cfa_register 7
 609 0006 F860     		str	r0, [r7, #12]
 610 0008 B960     		str	r1, [r7, #8]
 611 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 612              		.loc 1 168 0
 613 000c 0023     		movs	r3, #0
 614 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 615              		.loc 1 170 0
 616 0010 0023     		movs	r3, #0
 617 0012 7B62     		str	r3, [r7, #36]
 618 0014 40E0     		b	.L34
 619              	.L42:
 620              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 621              		.loc 1 173 0
 622 0016 0A23     		movs	r3, #10
 623 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 624              		.loc 1 174 0
 625 001a 7A68     		ldr	r2, [r7, #4]
 626 001c FB69     		ldr	r3, [r7, #28]
 627 001e B2FBF3F3 		udiv	r3, r2, r3
 628 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 629              		.loc 1 177 0
 630 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 631              		.loc 1 180 0
 632 0028 F868     		ldr	r0, [r7, #12]
 633 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 16


 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 634              		.loc 1 184 0
 635 002e 7B68     		ldr	r3, [r7, #4]
 636 0030 002B     		cmp	r3, #0
 637 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 638              		.loc 1 185 0
 639 0034 FA68     		ldr	r2, [r7, #12]
 640 0036 1C49     		ldr	r1, .L43
 641 0038 0020     		movs	r0, #0
 642 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 643              		.loc 1 186 0
 644 003e 0123     		movs	r3, #1
 645 0040 2EE0     		b	.L36
 646              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 647              		.loc 1 190 0
 648 0042 0023     		movs	r3, #0
 649 0044 3B62     		str	r3, [r7, #32]
 650 0046 20E0     		b	.L37
 651              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 652              		.loc 1 191 0
 653 0048 F869     		ldr	r0, [r7, #28]
 654 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 655              		.loc 1 194 0
 656 004e B968     		ldr	r1, [r7, #8]
 657 0050 1648     		ldr	r0, .L43+4
 658 0052 FFF7FEFF 		bl	strstr
 659 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 660              		.loc 1 195 0
 661 0058 7B69     		ldr	r3, [r7, #20]
 662 005a 002B     		cmp	r3, #0
 663 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 664              		.loc 1 196 0
 665 005e 7B6A     		ldr	r3, [r7, #36]
 666 0060 002B     		cmp	r3, #0
 667 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 668              		.loc 1 198 0
 669 0064 114B     		ldr	r3, .L43+4
 670 0066 FA68     		ldr	r2, [r7, #12]
 671 0068 1149     		ldr	r1, .L43+8
 672 006a 0020     		movs	r0, #0
 673 006c FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 17


 674 0070 06E0     		b	.L40
 675              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 676              		.loc 1 200 0
 677 0072 7B6A     		ldr	r3, [r7, #36]
 678 0074 5A1C     		adds	r2, r3, #1
 679 0076 0D4B     		ldr	r3, .L43+4
 680 0078 0E49     		ldr	r1, .L43+12
 681 007a 0120     		movs	r0, #1
 682 007c FFF7FEFF 		bl	printNotif
 683              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 684              		.loc 1 203 0
 685 0080 0123     		movs	r3, #1
 686 0082 0DE0     		b	.L36
 687              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 688              		.loc 1 190 0 discriminator 2
 689 0084 3B6A     		ldr	r3, [r7, #32]
 690 0086 0133     		adds	r3, r3, #1
 691 0088 3B62     		str	r3, [r7, #32]
 692              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 693              		.loc 1 190 0 is_stmt 0 discriminator 1
 694 008a 3A6A     		ldr	r2, [r7, #32]
 695 008c BB69     		ldr	r3, [r7, #24]
 696 008e 9A42     		cmp	r2, r3
 697 0090 DAD3     		bcc	.L41
 698              	.LBE4:
 170:modem.c       ****         
 699              		.loc 1 170 0 is_stmt 1 discriminator 2
 700 0092 7B6A     		ldr	r3, [r7, #36]
 701 0094 0133     		adds	r3, r3, #1
 702 0096 7B62     		str	r3, [r7, #36]
 703              	.L34:
 170:modem.c       ****         
 704              		.loc 1 170 0 is_stmt 0 discriminator 1
 705 0098 7B6A     		ldr	r3, [r7, #36]
 706 009a 022B     		cmp	r3, #2
 707 009c BBD9     		bls	.L42
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         //printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,u
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 708              		.loc 1 214 0 is_stmt 1
 709 009e 0023     		movs	r3, #0
 710              	.L36:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 18


 215:modem.c       **** }
 711              		.loc 1 215 0
 712 00a0 1846     		mov	r0, r3
 713 00a2 2837     		adds	r7, r7, #40
 714              		.cfi_def_cfa_offset 8
 715 00a4 BD46     		mov	sp, r7
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 00a6 80BD     		pop	{r7, pc}
 719              	.L44:
 720              		.align	2
 721              	.L43:
 722 00a8 78000000 		.word	.LC6
 723 00ac 00000000 		.word	uart_received_string
 724 00b0 A4000000 		.word	.LC7
 725 00b4 F4000000 		.word	.LC8
 726              		.cfi_endproc
 727              	.LFE72:
 728              		.size	at_write_command, .-at_write_command
 729              		.section	.rodata
 730 0129 000000   		.align	2
 731              	.LC9:
 732 012c 54455354 		.ascii	"TEST_MODEM\000"
 732      5F4D4F44 
 732      454D00
 733 0137 00       		.align	2
 734              	.LC10:
 735 0138 4E6F2072 		.ascii	"No reponse from modem.\000"
 735      65706F6E 
 735      73652066 
 735      726F6D20 
 735      6D6F6465 
 736 014f 00       		.align	2
 737              	.LC11:
 738 0150 4D6F6465 		.ascii	"Modem connected to network.\000"
 738      6D20636F 
 738      6E6E6563 
 738      74656420 
 738      746F206E 
 739              		.section	.text.modem_test,"ax",%progbits
 740              		.align	2
 741              		.global	modem_test
 742              		.thumb
 743              		.thumb_func
 744              		.type	modem_test, %function
 745              	modem_test:
 746              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 747              		.loc 1 218 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 408
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751 0000 B0B5     		push	{r4, r5, r7, lr}
 752              		.cfi_def_cfa_offset 16
 753              		.cfi_offset 4, -16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 19


 754              		.cfi_offset 5, -12
 755              		.cfi_offset 7, -8
 756              		.cfi_offset 14, -4
 757 0002 E6B0     		sub	sp, sp, #408
 758              		.cfi_def_cfa_offset 424
 759 0004 00AF     		add	r7, sp, #0
 760              		.cfi_def_cfa_register 7
 761 0006 3B1D     		adds	r3, r7, #4
 762 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 763              		.loc 1 221 0
 764 000a 07F10C03 		add	r3, r7, #12
 765 000e 0022     		movs	r2, #0
 766 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 767              		.loc 1 223 0
 768 0014 07F10C03 		add	r3, r7, #12
 769 0018 364A     		ldr	r2, .L53
 770 001a 07CA     		ldmia	r2, {r0, r1, r2}
 771 001c 03C3     		stmia	r3!, {r0, r1}
 772 001e 1A80     		strh	r2, [r3]	@ movhi
 773 0020 0233     		adds	r3, r3, #2
 774 0022 120C     		lsrs	r2, r2, #16
 775 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 776              		.loc 1 224 0
 777 0026 07F10C03 		add	r3, r7, #12
 778 002a 8133     		adds	r3, r3, #129
 779 002c 324A     		ldr	r2, .L53+4
 780 002e 1C46     		mov	r4, r3
 781 0030 1546     		mov	r5, r2
 782 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 783 0034 2060     		str	r0, [r4]	@ unaligned
 784 0036 6160     		str	r1, [r4, #4]	@ unaligned
 785 0038 A260     		str	r2, [r4, #8]	@ unaligned
 786 003a E360     		str	r3, [r4, #12]	@ unaligned
 787 003c 2868     		ldr	r0, [r5]	@ unaligned
 788 003e 2061     		str	r0, [r4, #16]	@ unaligned
 789 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 790 0042 AA79     		ldrb	r2, [r5, #6]
 791 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 792 0046 1346     		mov	r3, r2
 793 0048 A375     		strb	r3, [r4, #22]
 794              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 795              		.loc 1 227 0
 796 004a 0023     		movs	r3, #0
 797 004c C7F89431 		str	r3, [r7, #404]
 798 0050 3AE0     		b	.L46
 799              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 20


 800              		.loc 1 229 0
 801 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 802              		.loc 1 231 0
 803 0056 FFF7FEFF 		bl	modem_get_state
 804 005a 0346     		mov	r3, r0
 805 005c 002B     		cmp	r3, #0
 806 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 807              		.loc 1 233 0
 808 0060 FFF7FEFF 		bl	modem_power_up
 809 0064 27E0     		b	.L48
 810              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 811              		.loc 1 236 0
 812 0066 FFF7FEFF 		bl	modem_get_state
 813 006a 0346     		mov	r3, r0
 814 006c 042B     		cmp	r3, #4
 815 006e 22D1     		bne	.L48
 816              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 817              		.loc 1 240 0
 818 0070 FFF7FEFF 		bl	modem_get_network_time
 819 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 820              		.loc 1 241 0
 821 0078 D7F89031 		ldr	r3, [r7, #400]
 822 007c 002B     		cmp	r3, #0
 823 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 824              		.loc 1 242 0
 825 0080 D7F89001 		ldr	r0, [r7, #400]
 826 0084 FFF7FEFF 		bl	setTime
 827              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 828              		.loc 1 245 0
 829 0088 07F10C03 		add	r3, r7, #12
 830 008c 8133     		adds	r3, r3, #129
 831 008e 1B4A     		ldr	r2, .L53+8
 832 0090 1D46     		mov	r5, r3
 833 0092 1446     		mov	r4, r2
 834 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 835 0096 2860     		str	r0, [r5]	@ unaligned
 836 0098 6960     		str	r1, [r5, #4]	@ unaligned
 837 009a AA60     		str	r2, [r5, #8]	@ unaligned
 838 009c EB60     		str	r3, [r5, #12]	@ unaligned
 839 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 840 00a0 2861     		str	r0, [r5, #16]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 21


 841 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 842 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 843              		.loc 1 246 0
 844 00a6 07F10C03 		add	r3, r7, #12
 845 00aa 0122     		movs	r2, #1
 846 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 847              		.loc 1 248 0
 848 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 849              		.loc 1 249 0
 850 00b4 0CE0     		b	.L50
 851              	.L48:
 852              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 853              		.loc 1 252 0 discriminator 2
 854 00b6 4FF47A70 		mov	r0, #1000
 855 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 856              		.loc 1 227 0 discriminator 2
 857 00be D7F89431 		ldr	r3, [r7, #404]
 858 00c2 0133     		adds	r3, r3, #1
 859 00c4 C7F89431 		str	r3, [r7, #404]
 860              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 861              		.loc 1 227 0 is_stmt 0 discriminator 1
 862 00c8 D7F89431 		ldr	r3, [r7, #404]
 863 00cc 3B2B     		cmp	r3, #59
 864 00ce C0DD     		ble	.L51
 865              	.L50:
 866              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 867              		.loc 1 256 0 is_stmt 1
 868 00d0 3B1D     		adds	r3, r7, #4
 869 00d2 1A68     		ldr	r2, [r3]
 870 00d4 07F10C03 		add	r3, r7, #12
 871 00d8 1046     		mov	r0, r2
 872 00da 1946     		mov	r1, r3
 873 00dc 40F28113 		movw	r3, #385
 874 00e0 1A46     		mov	r2, r3
 875 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 876              		.loc 1 257 0
 877 00e6 3B1D     		adds	r3, r7, #4
 878 00e8 1868     		ldr	r0, [r3]
 879 00ea 07F5CC77 		add	r7, r7, #408
 880              		.cfi_def_cfa_offset 16
 881 00ee BD46     		mov	sp, r7
 882              		.cfi_def_cfa_register 13
 883              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 22


 884 00f0 B0BD     		pop	{r4, r5, r7, pc}
 885              	.L54:
 886 00f2 00BF     		.align	2
 887              	.L53:
 888 00f4 2C010000 		.word	.LC9
 889 00f8 38010000 		.word	.LC10
 890 00fc 50010000 		.word	.LC11
 891              		.cfi_endproc
 892              	.LFE73:
 893              		.size	modem_test, .-modem_test
 894              		.section	.text.extract_string,"ax",%progbits
 895              		.align	2
 896              		.global	extract_string
 897              		.thumb
 898              		.thumb_func
 899              		.type	extract_string, %function
 900              	extract_string:
 901              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 902              		.loc 1 260 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 24
 905              		@ frame_needed = 1, uses_anonymous_args = 0
 906 0000 80B5     		push	{r7, lr}
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 7, -8
 909              		.cfi_offset 14, -4
 910 0002 86B0     		sub	sp, sp, #24
 911              		.cfi_def_cfa_offset 32
 912 0004 00AF     		add	r7, sp, #0
 913              		.cfi_def_cfa_register 7
 914 0006 F860     		str	r0, [r7, #12]
 915 0008 B960     		str	r1, [r7, #8]
 916 000a 7A60     		str	r2, [r7, #4]
 917 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 918              		.loc 1 266 0
 919 000e B968     		ldr	r1, [r7, #8]
 920 0010 F868     		ldr	r0, [r7, #12]
 921 0012 FFF7FEFF 		bl	strstr
 922 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 923              		.loc 1 267 0
 924 0018 7B69     		ldr	r3, [r7, #20]
 925 001a 002B     		cmp	r3, #0
 926 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 927              		.loc 1 269 0
 928 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 23


 929 0020 7B61     		str	r3, [r7, #20]
 930              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 931              		.loc 1 272 0
 932 0022 B868     		ldr	r0, [r7, #8]
 933 0024 FFF7FEFF 		bl	strlen
 934 0028 0246     		mov	r2, r0
 935 002a 7B69     		ldr	r3, [r7, #20]
 936 002c 1344     		add	r3, r3, r2
 937 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 938              		.loc 1 277 0
 939 0030 7968     		ldr	r1, [r7, #4]
 940 0032 7869     		ldr	r0, [r7, #20]
 941 0034 FFF7FEFF 		bl	strstr
 942 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 943              		.loc 1 278 0
 944 003a 3B69     		ldr	r3, [r7, #16]
 945 003c 002B     		cmp	r3, #0
 946 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 947              		.loc 1 280 0
 948 0040 F868     		ldr	r0, [r7, #12]
 949 0042 FFF7FEFF 		bl	strlen
 950 0046 0246     		mov	r2, r0
 951 0048 FB68     		ldr	r3, [r7, #12]
 952 004a 1344     		add	r3, r3, r2
 953 004c 3B61     		str	r3, [r7, #16]
 954              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 955              		.loc 1 284 0
 956 004e 3A69     		ldr	r2, [r7, #16]
 957 0050 7B69     		ldr	r3, [r7, #20]
 958 0052 D31A     		subs	r3, r2, r3
 959 0054 1A46     		mov	r2, r3
 960 0056 7969     		ldr	r1, [r7, #20]
 961 0058 3868     		ldr	r0, [r7]
 962 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 963              		.loc 1 285 0
 964 005e 3A69     		ldr	r2, [r7, #16]
 965 0060 7B69     		ldr	r3, [r7, #20]
 966 0062 D31A     		subs	r3, r2, r3
 967 0064 1A46     		mov	r2, r3
 968 0066 3B68     		ldr	r3, [r7]
 969 0068 1344     		add	r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 24


 970 006a 0022     		movs	r2, #0
 971 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 972              		.loc 1 286 0
 973 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 974              		.loc 1 288 0
 975 0070 1846     		mov	r0, r3
 976 0072 1837     		adds	r7, r7, #24
 977              		.cfi_def_cfa_offset 8
 978 0074 BD46     		mov	sp, r7
 979              		.cfi_def_cfa_register 13
 980              		@ sp needed
 981 0076 80BD     		pop	{r7, pc}
 982              		.cfi_endproc
 983              	.LFE74:
 984              		.size	extract_string, .-extract_string
 985              		.section	.rodata
 986              		.align	2
 987              	.LC12:
 988 016c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 988      20746F20 
 988      636F6E6E 
 988      65637420 
 988      746F206E 
 989 0193 00       		.align	2
 990              	.LC13:
 991 0194 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 991      6D207469 
 991      6D656420 
 991      6F757420 
 991      6F6E206E 
 992 01b7 00       		.align	2
 993              	.LC14:
 994 01b8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 994      69726564 
 994      20495020 
 994      61646472 
 994      6573733A 
 995              		.align	2
 996              	.LC15:
 997 01d8 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 997      6D207469 
 997      6D656420 
 997      6F757420 
 997      6F6E2049 
 998              		.section	.text.modem_process_tasks,"ax",%progbits
 999              		.align	2
 1000              		.global	modem_process_tasks
 1001              		.thumb
 1002              		.thumb_func
 1003              		.type	modem_process_tasks, %function
 1004              	modem_process_tasks:
 1005              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 25


 291:modem.c       **** uint8 modem_process_tasks(){
 1006              		.loc 1 291 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 8
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 82B0     		sub	sp, sp, #8
 1015              		.cfi_def_cfa_offset 16
 1016 0004 00AF     		add	r7, sp, #0
 1017              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1018              		.loc 1 293 0
 1019 0006 464B     		ldr	r3, .L73
 1020 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 000a 012B     		cmp	r3, #1
 1022 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1023              		.loc 1 295 0
 1024 000e FFF7FEFF 		bl	getTimeStamp
 1025 0012 0246     		mov	r2, r0
 1026 0014 434B     		ldr	r3, .L73+4
 1027 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1028              		.loc 1 296 0
 1029 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1030              		.loc 1 297 0
 1031 001c 404B     		ldr	r3, .L73
 1032 001e 0222     		movs	r2, #2
 1033 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1034              		.loc 1 298 0
 1035 0022 0123     		movs	r3, #1
 1036 0024 77E0     		b	.L61
 1037              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1038              		.loc 1 302 0
 1039 0026 3E4B     		ldr	r3, .L73
 1040 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 002a 022B     		cmp	r3, #2
 1042 002c 44D1     		bne	.L62
 1043              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1044              		.loc 1 305 0
 1045 002e 0023     		movs	r3, #0
 1046 0030 FB71     		strb	r3, [r7, #7]
 1047 0032 10E0     		b	.L63
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 26


 1048              	.L66:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1049              		.loc 1 307 0
 1050 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If cell signal (rsrp) is strong enough, break and connect to the network
 309:modem.c       ****             // Otherwise, keep checking rsrp
 310:modem.c       ****             if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1051              		.loc 1 310 0
 1052 0038 3B4B     		ldr	r3, .L73+8
 1053 003a 5B69     		ldr	r3, [r3, #20]
 1054 003c 1A2B     		cmp	r3, #26
 1055 003e 03DD     		ble	.L64
 1056              		.loc 1 310 0 is_stmt 0 discriminator 1
 1057 0040 394B     		ldr	r3, .L73+8
 1058 0042 5B69     		ldr	r3, [r3, #20]
 1059 0044 FF2B     		cmp	r3, #255
 1060 0046 0AD1     		bne	.L72
 1061              	.L64:
 311:modem.c       ****                 break;
 312:modem.c       ****             }
 313:modem.c       ****             // Delay for 1 second
 314:modem.c       ****             CyDelay(1000u);
 1062              		.loc 1 314 0 is_stmt 1 discriminator 2
 1063 0048 4FF47A70 		mov	r0, #1000
 1064 004c FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1065              		.loc 1 305 0 discriminator 2
 1066 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1067 0052 0133     		adds	r3, r3, #1
 1068 0054 FB71     		strb	r3, [r7, #7]
 1069              	.L63:
 305:modem.c       ****             // Get cell network stats
 1070              		.loc 1 305 0 is_stmt 0 discriminator 1
 1071 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1072 0058 1D2B     		cmp	r3, #29
 1073 005a EBD9     		bls	.L66
 1074 005c 00E0     		b	.L65
 1075              	.L72:
 311:modem.c       ****                 break;
 1076              		.loc 1 311 0 is_stmt 1
 1077 005e 00BF     		nop
 1078              	.L65:
 1079              	.LBE7:
 315:modem.c       ****         }
 316:modem.c       ****         
 317:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 318:modem.c       ****         if(is_connected_to_cell_network()){
 1080              		.loc 1 318 0
 1081 0060 FFF7FEFF 		bl	is_connected_to_cell_network
 1082 0064 0346     		mov	r3, r0
 1083 0066 002B     		cmp	r3, #0
 1084 0068 13D0     		beq	.L67
 319:modem.c       ****       
 320:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1085              		.loc 1 320 0
 1086 006a FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 27


 1087 006e 0246     		mov	r2, r0
 1088 0070 2C4B     		ldr	r3, .L73+4
 1089 0072 1B68     		ldr	r3, [r3]
 1090 0074 D31A     		subs	r3, r2, r3
 1091 0076 2C4A     		ldr	r2, .L73+8
 1092 0078 9361     		str	r3, [r2, #24]
 321:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1093              		.loc 1 321 0
 1094 007a 2B4B     		ldr	r3, .L73+8
 1095 007c 9B69     		ldr	r3, [r3, #24]
 1096 007e 1A46     		mov	r2, r3
 1097 0080 2A49     		ldr	r1, .L73+12
 1098 0082 0020     		movs	r0, #0
 1099 0084 FFF7FEFF 		bl	printNotif
 322:modem.c       ****                                             modem_stats.time_to_network_connect);
 323:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1100              		.loc 1 323 0
 1101 0088 FFF7FEFF 		bl	set_up_internet_connection
 324:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1102              		.loc 1 324 0
 1103 008c 244B     		ldr	r3, .L73
 1104 008e 0322     		movs	r2, #3
 1105 0090 1A70     		strb	r2, [r3]
 1106              	.L67:
 325:modem.c       ****         }
 326:modem.c       ****         
 327:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 328:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1107              		.loc 1 328 0
 1108 0092 FFF7FEFF 		bl	getTimeStamp
 1109 0096 0246     		mov	r2, r0
 1110 0098 224B     		ldr	r3, .L73+4
 1111 009a 1B68     		ldr	r3, [r3]
 1112 009c D31A     		subs	r3, r2, r3
 1113 009e B42B     		cmp	r3, #180
 1114 00a0 08DD     		ble	.L68
 329:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1115              		.loc 1 329 0
 1116 00a2 1F4B     		ldr	r3, .L73
 1117 00a4 0022     		movs	r2, #0
 1118 00a6 1A70     		strb	r2, [r3]
 330:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1119              		.loc 1 330 0
 1120 00a8 FFF7FEFF 		bl	modem_power_down
 331:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1121              		.loc 1 331 0
 1122 00ac 2049     		ldr	r1, .L73+16
 1123 00ae 0220     		movs	r0, #2
 1124 00b0 FFF7FEFF 		bl	printNotif
 1125              	.L68:
 332:modem.c       ****             
 333:modem.c       ****         }
 334:modem.c       ****         return 0u;//ok to hand off to sleep
 1126              		.loc 1 334 0
 1127 00b4 0023     		movs	r3, #0
 1128 00b6 2EE0     		b	.L61
 1129              	.L62:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 28


 335:modem.c       ****         
 336:modem.c       ****     // Else if modem state is "waiting for IP"
 337:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1130              		.loc 1 337 0
 1131 00b8 194B     		ldr	r3, .L73
 1132 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1133 00bc 032B     		cmp	r3, #3
 1134 00be 29D1     		bne	.L69
 338:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 339:modem.c       ****         if(is_connected_to_internet()){
 1135              		.loc 1 339 0
 1136 00c0 FFF7FEFF 		bl	is_connected_to_internet
 1137 00c4 0346     		mov	r3, r0
 1138 00c6 002B     		cmp	r3, #0
 1139 00c8 11D0     		beq	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1140              		.loc 1 340 0
 1141 00ca 154B     		ldr	r3, .L73
 1142 00cc 0422     		movs	r2, #4
 1143 00ce 1A70     		strb	r2, [r3]
 341:modem.c       ****             // Save/print time to acquire IP address
 342:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1144              		.loc 1 342 0
 1145 00d0 FFF7FEFF 		bl	getTimeStamp
 1146 00d4 0246     		mov	r2, r0
 1147 00d6 134B     		ldr	r3, .L73+4
 1148 00d8 1B68     		ldr	r3, [r3]
 1149 00da D31A     		subs	r3, r2, r3
 1150 00dc 124A     		ldr	r2, .L73+8
 1151 00de D361     		str	r3, [r2, #28]
 343:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1152              		.loc 1 343 0
 1153 00e0 114B     		ldr	r3, .L73+8
 1154 00e2 DB69     		ldr	r3, [r3, #28]
 1155 00e4 1A46     		mov	r2, r3
 1156 00e6 1349     		ldr	r1, .L73+20
 1157 00e8 0020     		movs	r0, #0
 1158 00ea FFF7FEFF 		bl	printNotif
 1159              	.L70:
 344:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 345:modem.c       ****         }
 346:modem.c       ****         
 347:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 348:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1160              		.loc 1 348 0
 1161 00ee FFF7FEFF 		bl	getTimeStamp
 1162 00f2 0246     		mov	r2, r0
 1163 00f4 0B4B     		ldr	r3, .L73+4
 1164 00f6 1B68     		ldr	r3, [r3]
 1165 00f8 D31A     		subs	r3, r2, r3
 1166 00fa E62B     		cmp	r3, #230
 1167 00fc 08DD     		ble	.L71
 349:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1168              		.loc 1 349 0
 1169 00fe 084B     		ldr	r3, .L73
 1170 0100 0022     		movs	r2, #0
 1171 0102 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 29


 350:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1172              		.loc 1 350 0
 1173 0104 FFF7FEFF 		bl	modem_power_down
 351:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1174              		.loc 1 351 0
 1175 0108 0B49     		ldr	r1, .L73+24
 1176 010a 0220     		movs	r0, #2
 1177 010c FFF7FEFF 		bl	printNotif
 1178              	.L71:
 352:modem.c       ****       
 353:modem.c       ****         }
 354:modem.c       ****         return 0u;//ok to hand off to sleep
 1179              		.loc 1 354 0
 1180 0110 0023     		movs	r3, #0
 1181 0112 00E0     		b	.L61
 1182              	.L69:
 355:modem.c       ****     }
 356:modem.c       ****     
 357:modem.c       ****     return 0u;
 1183              		.loc 1 357 0
 1184 0114 0023     		movs	r3, #0
 1185              	.L61:
 358:modem.c       ****     
 359:modem.c       **** }
 1186              		.loc 1 359 0
 1187 0116 1846     		mov	r0, r3
 1188 0118 0837     		adds	r7, r7, #8
 1189              		.cfi_def_cfa_offset 8
 1190 011a BD46     		mov	sp, r7
 1191              		.cfi_def_cfa_register 13
 1192              		@ sp needed
 1193 011c 80BD     		pop	{r7, pc}
 1194              	.L74:
 1195 011e 00BF     		.align	2
 1196              	.L73:
 1197 0120 00000000 		.word	modem_state
 1198 0124 00000000 		.word	modem_start_time_stamp
 1199 0128 00000000 		.word	modem_stats
 1200 012c 6C010000 		.word	.LC12
 1201 0130 94010000 		.word	.LC13
 1202 0134 B8010000 		.word	.LC14
 1203 0138 D8010000 		.word	.LC15
 1204              		.cfi_endproc
 1205              	.LFE75:
 1206              		.size	modem_process_tasks, .-modem_process_tasks
 1207              		.section	.rodata
 1208 01ff 00       		.align	2
 1209              	.LC16:
 1210 0200 43686563 		.ascii	"Checking AT+CREG?\000"
 1210      6B696E67 
 1210      2041542B 
 1210      43524547 
 1210      3F00
 1211 0212 0000     		.align	2
 1212              	.LC17:
 1213 0214 41542B43 		.ascii	"AT+CREG?\015\000"
 1213      5245473F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 30


 1213      0D00
 1214 021e 0000     		.align	2
 1215              	.LC18:
 1216 0220 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1216      61637469 
 1216      6E672073 
 1216      7472696E 
 1216      67204154 
 1217 023b 00       		.align	2
 1218              	.LC19:
 1219 023c 75617274 		.ascii	"uart_received_string: %s\000"
 1219      5F726563 
 1219      65697665 
 1219      645F7374 
 1219      72696E67 
 1220 0255 000000   		.align	2
 1221              	.LC20:
 1222 0258 0D00     		.ascii	"\015\000"
 1223 025a 0000     		.align	2
 1224              	.LC21:
 1225 025c 3A2000   		.ascii	": \000"
 1226 025f 00       		.align	2
 1227              	.LC22:
 1228 0260 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1228      73746572 
 1228      65642074 
 1228      6F206E65 
 1228      74776F72 
 1229              		.align	2
 1230              	.LC23:
 1231 0280 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1231      20657874 
 1231      72616369 
 1231      6E672073 
 1231      7472696E 
 1232 029f 00       		.align	2
 1233              	.LC24:
 1234 02a0 302C3100 		.ascii	"0,1\000"
 1235              		.align	2
 1236              	.LC25:
 1237 02a4 302C3500 		.ascii	"0,5\000"
 1238              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1239              		.align	2
 1240              		.global	is_connected_to_cell_network
 1241              		.thumb
 1242              		.thumb_func
 1243              		.type	is_connected_to_cell_network, %function
 1244              	is_connected_to_cell_network:
 1245              	.LFB76:
 360:modem.c       **** 
 361:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 362:modem.c       **** uint8 is_connected_to_cell_network(){
 1246              		.loc 1 362 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 16
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 31


 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 84B0     		sub	sp, sp, #16
 1255              		.cfi_def_cfa_offset 24
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 363:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 364:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1258              		.loc 1 364 0
 1259 0006 2049     		ldr	r1, .L80
 1260 0008 0020     		movs	r0, #0
 1261 000a FFF7FEFF 		bl	printNotif
 365:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 366:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1262              		.loc 1 366 0
 1263 000e 4FF4FA62 		mov	r2, #2000
 1264 0012 1E49     		ldr	r1, .L80+4
 1265 0014 1E48     		ldr	r0, .L80+8
 1266 0016 FFF7FEFF 		bl	at_write_command
 1267 001a 0346     		mov	r3, r0
 1268 001c FB73     		strb	r3, [r7, #15]
 367:modem.c       ****     
 368:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1269              		.loc 1 368 0
 1270 001e 1D49     		ldr	r1, .L80+12
 1271 0020 0020     		movs	r0, #0
 1272 0022 FFF7FEFF 		bl	printNotif
 369:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1273              		.loc 1 369 0
 1274 0026 1C4A     		ldr	r2, .L80+16
 1275 0028 1C49     		ldr	r1, .L80+20
 1276 002a 0020     		movs	r0, #0
 1277 002c FFF7FEFF 		bl	printNotif
 370:modem.c       ****     
 371:modem.c       ****     // If the modem has a status
 372:modem.c       ****     if(status){
 1278              		.loc 1 372 0
 1279 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1280 0032 002B     		cmp	r3, #0
 1281 0034 23D0     		beq	.L76
 1282              	.LBB8:
 373:modem.c       ****         // Create a character array of length 10 called creg
 374:modem.c       ****         char creg[10];
 375:modem.c       ****         creg[0] = '\0';
 1283              		.loc 1 375 0
 1284 0036 0023     		movs	r3, #0
 1285 0038 3B71     		strb	r3, [r7, #4]
 376:modem.c       ****         // Extract string from the UART
 377:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1286              		.loc 1 377 0
 1287 003a 3B1D     		adds	r3, r7, #4
 1288 003c 184A     		ldr	r2, .L80+24
 1289 003e 1949     		ldr	r1, .L80+28
 1290 0040 1548     		ldr	r0, .L80+16
 1291 0042 FFF7FEFF 		bl	extract_string
 378:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 32


 1292              		.loc 1 378 0
 1293 0046 3B1D     		adds	r3, r7, #4
 1294 0048 1A46     		mov	r2, r3
 1295 004a 1749     		ldr	r1, .L80+32
 1296 004c 0020     		movs	r0, #0
 1297 004e FFF7FEFF 		bl	printNotif
 379:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1298              		.loc 1 379 0
 1299 0052 1649     		ldr	r1, .L80+36
 1300 0054 0020     		movs	r0, #0
 1301 0056 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     
 381:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 382:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1302              		.loc 1 382 0
 1303 005a 3B1D     		adds	r3, r7, #4
 1304 005c 1449     		ldr	r1, .L80+40
 1305 005e 1846     		mov	r0, r3
 1306 0060 FFF7FEFF 		bl	strstr
 1307 0064 0346     		mov	r3, r0
 1308 0066 002B     		cmp	r3, #0
 1309 0068 07D1     		bne	.L77
 1310              		.loc 1 382 0 is_stmt 0 discriminator 1
 1311 006a 3B1D     		adds	r3, r7, #4
 1312 006c 1149     		ldr	r1, .L80+44
 1313 006e 1846     		mov	r0, r3
 1314 0070 FFF7FEFF 		bl	strstr
 1315 0074 0346     		mov	r3, r0
 1316 0076 002B     		cmp	r3, #0
 1317 0078 01D0     		beq	.L76
 1318              	.L77:
 383:modem.c       ****             return 1u;
 1319              		.loc 1 383 0 is_stmt 1
 1320 007a 0123     		movs	r3, #1
 1321 007c 00E0     		b	.L79
 1322              	.L76:
 1323              	.LBE8:
 384:modem.c       ****         }
 385:modem.c       ****     }
 386:modem.c       ****     // If the modem doesn't have a status, return 0u
 387:modem.c       ****     return 0u;
 1324              		.loc 1 387 0
 1325 007e 0023     		movs	r3, #0
 1326              	.L79:
 388:modem.c       ****         
 389:modem.c       **** }
 1327              		.loc 1 389 0
 1328 0080 1846     		mov	r0, r3
 1329 0082 1037     		adds	r7, r7, #16
 1330              		.cfi_def_cfa_offset 8
 1331 0084 BD46     		mov	sp, r7
 1332              		.cfi_def_cfa_register 13
 1333              		@ sp needed
 1334 0086 80BD     		pop	{r7, pc}
 1335              	.L81:
 1336              		.align	2
 1337              	.L80:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 33


 1338 0088 00020000 		.word	.LC16
 1339 008c 00000000 		.word	.LC0
 1340 0090 14020000 		.word	.LC17
 1341 0094 20020000 		.word	.LC18
 1342 0098 00000000 		.word	uart_received_string
 1343 009c 3C020000 		.word	.LC19
 1344 00a0 58020000 		.word	.LC20
 1345 00a4 5C020000 		.word	.LC21
 1346 00a8 60020000 		.word	.LC22
 1347 00ac 80020000 		.word	.LC23
 1348 00b0 A0020000 		.word	.LC24
 1349 00b4 A4020000 		.word	.LC25
 1350              		.cfi_endproc
 1351              	.LFE76:
 1352              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1353              		.section	.rodata
 1354              		.align	2
 1355              	.LC26:
 1356 02a8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1356      47414354 
 1356      3D312C31 
 1356      0D0A00
 1357              		.section	.text.set_up_internet_connection,"ax",%progbits
 1358              		.align	2
 1359              		.global	set_up_internet_connection
 1360              		.thumb
 1361              		.thumb_func
 1362              		.type	set_up_internet_connection, %function
 1363              	set_up_internet_connection:
 1364              	.LFB77:
 390:modem.c       **** 
 391:modem.c       **** // Connect the modem to the internet
 392:modem.c       **** void set_up_internet_connection(){
 1365              		.loc 1 392 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 80B5     		push	{r7, lr}
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 7, -8
 1372              		.cfi_offset 14, -4
 1373 0002 00AF     		add	r7, sp, #0
 1374              		.cfi_def_cfa_register 7
 393:modem.c       ****     
 394:modem.c       ****     //port 3
 395:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 396:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 397:modem.c       ****     
 398:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 399:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 400:modem.c       ****     // <cid>,<stat>
 401:modem.c       ****    
 402:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 403:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1375              		.loc 1 403 0
 1376 0004 4FF47A72 		mov	r2, #1000
 1377 0008 0249     		ldr	r1, .L83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 34


 1378 000a 0348     		ldr	r0, .L83+4
 1379 000c FFF7FEFF 		bl	at_write_command
 404:modem.c       ****     
 405:modem.c       **** }
 1380              		.loc 1 405 0
 1381 0010 00BF     		nop
 1382 0012 80BD     		pop	{r7, pc}
 1383              	.L84:
 1384              		.align	2
 1385              	.L83:
 1386 0014 00000000 		.word	.LC0
 1387 0018 A8020000 		.word	.LC26
 1388              		.cfi_endproc
 1389              	.LFE77:
 1390              		.size	set_up_internet_connection, .-set_up_internet_connection
 1391              		.section	.rodata
 1392 02b7 00       		.align	2
 1393              	.LC27:
 1394 02b8 312C3100 		.ascii	"1,1\000"
 1395              		.align	2
 1396              	.LC28:
 1397 02bc 41542353 		.ascii	"AT#SGACT?\015\000"
 1397      47414354 
 1397      3F0D00
 1398              		.section	.text.is_connected_to_internet,"ax",%progbits
 1399              		.align	2
 1400              		.global	is_connected_to_internet
 1401              		.thumb
 1402              		.thumb_func
 1403              		.type	is_connected_to_internet, %function
 1404              	is_connected_to_internet:
 1405              	.LFB78:
 406:modem.c       **** 
 407:modem.c       **** // Checks if the modem is connected to the internet
 408:modem.c       **** uint8 is_connected_to_internet(){
 1406              		.loc 1 408 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 1, uses_anonymous_args = 0
 1410 0000 80B5     		push	{r7, lr}
 1411              		.cfi_def_cfa_offset 8
 1412              		.cfi_offset 7, -8
 1413              		.cfi_offset 14, -4
 1414 0002 00AF     		add	r7, sp, #0
 1415              		.cfi_def_cfa_register 7
 409:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 410:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 411:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 412:modem.c       ****     // Check for 3,1 if Verizon 
 413:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1416              		.loc 1 413 0
 1417 0004 4FF4FA62 		mov	r2, #2000
 1418 0008 0549     		ldr	r1, .L88
 1419 000a 0648     		ldr	r0, .L88+4
 1420 000c FFF7FEFF 		bl	at_write_command
 1421 0010 0346     		mov	r3, r0
 1422 0012 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 35


 1423 0014 01D0     		beq	.L86
 414:modem.c       ****         return 1u;
 1424              		.loc 1 414 0
 1425 0016 0123     		movs	r3, #1
 1426 0018 00E0     		b	.L87
 1427              	.L86:
 415:modem.c       ****     }
 416:modem.c       ****     return 0u;  
 1428              		.loc 1 416 0
 1429 001a 0023     		movs	r3, #0
 1430              	.L87:
 417:modem.c       **** }
 1431              		.loc 1 417 0
 1432 001c 1846     		mov	r0, r3
 1433 001e 80BD     		pop	{r7, pc}
 1434              	.L89:
 1435              		.align	2
 1436              	.L88:
 1437 0020 B8020000 		.word	.LC27
 1438 0024 BC020000 		.word	.LC28
 1439              		.cfi_endproc
 1440              	.LFE78:
 1441              		.size	is_connected_to_internet, .-is_connected_to_internet
 1442              		.section	.rodata
 1443 02c7 00       		.align	2
 1444              	.LC29:
 1445 02c8 41542B43 		.ascii	"AT+CESQ\015\000"
 1445      4553510D 
 1445      00
 1446 02d1 000000   		.align	2
 1447              	.LC30:
 1448 02d4 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1448      4553513A 
 1448      2025642C 
 1448      25642C25 
 1448      642C2564 
 1449              		.section	.text.get_cell_network_stats,"ax",%progbits
 1450              		.align	2
 1451              		.global	get_cell_network_stats
 1452              		.thumb
 1453              		.thumb_func
 1454              		.type	get_cell_network_stats, %function
 1455              	get_cell_network_stats:
 1456              	.LFB79:
 418:modem.c       **** 
 419:modem.c       **** void get_cell_network_stats(){
 1457              		.loc 1 419 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0000 80B5     		push	{r7, lr}
 1462              		.cfi_def_cfa_offset 8
 1463              		.cfi_offset 7, -8
 1464              		.cfi_offset 14, -4
 1465 0002 86B0     		sub	sp, sp, #24
 1466              		.cfi_def_cfa_offset 32
 1467 0004 04AF     		add	r7, sp, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 36


 1468              		.cfi_def_cfa 7, 16
 420:modem.c       ****     // Initialize values
 421:modem.c       ****     modem_stats.ber = 255;
 1469              		.loc 1 421 0
 1470 0006 154B     		ldr	r3, .L91
 1471 0008 FF22     		movs	r2, #255
 1472 000a 5A60     		str	r2, [r3, #4]
 422:modem.c       ****     modem_stats.ecno = 255;
 1473              		.loc 1 422 0
 1474 000c 134B     		ldr	r3, .L91
 1475 000e FF22     		movs	r2, #255
 1476 0010 DA60     		str	r2, [r3, #12]
 423:modem.c       ****     modem_stats.rscp = 255;
 1477              		.loc 1 423 0
 1478 0012 124B     		ldr	r3, .L91
 1479 0014 FF22     		movs	r2, #255
 1480 0016 9A60     		str	r2, [r3, #8]
 424:modem.c       ****     modem_stats.rsrp = 255;
 1481              		.loc 1 424 0
 1482 0018 104B     		ldr	r3, .L91
 1483 001a FF22     		movs	r2, #255
 1484 001c 5A61     		str	r2, [r3, #20]
 425:modem.c       ****     modem_stats.rsrq = 255;
 1485              		.loc 1 425 0
 1486 001e 0F4B     		ldr	r3, .L91
 1487 0020 FF22     		movs	r2, #255
 1488 0022 1A61     		str	r2, [r3, #16]
 426:modem.c       ****     modem_stats.rxlev = 255;
 1489              		.loc 1 426 0
 1490 0024 0D4B     		ldr	r3, .L91
 1491 0026 FF22     		movs	r2, #255
 1492 0028 1A60     		str	r2, [r3]
 427:modem.c       **** 
 428:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 429:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1493              		.loc 1 429 0
 1494 002a 4FF4FA62 		mov	r2, #2000
 1495 002e 0C49     		ldr	r1, .L91+4
 1496 0030 0C48     		ldr	r0, .L91+8
 1497 0032 FFF7FEFF 		bl	at_write_command
 430:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 431:modem.c       **** 
 432:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1498              		.loc 1 432 0
 1499 0036 0C4B     		ldr	r3, .L91+12
 1500 0038 0393     		str	r3, [sp, #12]
 1501 003a 0C4B     		ldr	r3, .L91+16
 1502 003c 0293     		str	r3, [sp, #8]
 1503 003e 0C4B     		ldr	r3, .L91+20
 1504 0040 0193     		str	r3, [sp, #4]
 1505 0042 0C4B     		ldr	r3, .L91+24
 1506 0044 0093     		str	r3, [sp]
 1507 0046 0C4B     		ldr	r3, .L91+28
 1508 0048 044A     		ldr	r2, .L91
 1509 004a 0C49     		ldr	r1, .L91+32
 1510 004c 0C48     		ldr	r0, .L91+36
 1511 004e FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 37


 1512 0052 7860     		str	r0, [r7, #4]
 433:modem.c       ****         &modem_stats.rxlev,
 434:modem.c       ****         &modem_stats.ber,
 435:modem.c       ****         &modem_stats.rscp,
 436:modem.c       ****         &modem_stats.ecno,
 437:modem.c       ****         &modem_stats.rsrq,
 438:modem.c       ****         &modem_stats.rsrp);
 439:modem.c       **** 
 440:modem.c       ****         //check to see if we’re getting a good received signal strength
 441:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 442:modem.c       ****         //    break;
 443:modem.c       ****         //}
 444:modem.c       ****         // Delay one second
 445:modem.c       ****         //CyDelay(1000u);
 446:modem.c       ****     //}
 447:modem.c       **** }
 1513              		.loc 1 447 0
 1514 0054 00BF     		nop
 1515 0056 0837     		adds	r7, r7, #8
 1516              		.cfi_def_cfa_offset 8
 1517 0058 BD46     		mov	sp, r7
 1518              		.cfi_def_cfa_register 13
 1519              		@ sp needed
 1520 005a 80BD     		pop	{r7, pc}
 1521              	.L92:
 1522              		.align	2
 1523              	.L91:
 1524 005c 00000000 		.word	modem_stats
 1525 0060 00000000 		.word	.LC0
 1526 0064 C8020000 		.word	.LC29
 1527 0068 14000000 		.word	modem_stats+20
 1528 006c 10000000 		.word	modem_stats+16
 1529 0070 0C000000 		.word	modem_stats+12
 1530 0074 08000000 		.word	modem_stats+8
 1531 0078 04000000 		.word	modem_stats+4
 1532 007c D4020000 		.word	.LC30
 1533 0080 00000000 		.word	uart_received_string
 1534              		.cfi_endproc
 1535              	.LFE79:
 1536              		.size	get_cell_network_stats, .-get_cell_network_stats
 1537              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1538              		.align	2
 1539              		.global	updatable_parameters_initialize
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	updatable_parameters_initialize, %function
 1543              	updatable_parameters_initialize:
 1544              	.LFB80:
 448:modem.c       **** 
 449:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 450:modem.c       **** void updatable_parameters_initialize(){
 1545              		.loc 1 450 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549              		@ link register save eliminated.
 1550 0000 80B4     		push	{r7}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 38


 1551              		.cfi_def_cfa_offset 4
 1552              		.cfi_offset 7, -4
 1553 0002 00AF     		add	r7, sp, #0
 1554              		.cfi_def_cfa_register 7
 451:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1555              		.loc 1 451 0
 1556 0004 094B     		ldr	r3, .L94
 1557 0006 0022     		movs	r2, #0
 1558 0008 1A70     		strb	r2, [r3]
 452:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_STANDARD;
 1559              		.loc 1 452 0
 1560 000a 084B     		ldr	r3, .L94
 1561 000c 0022     		movs	r2, #0
 1562 000e 5A70     		strb	r2, [r3, #1]
 453:modem.c       ****     updatable_parameters.measure_time = 1u;
 1563              		.loc 1 453 0
 1564 0010 064B     		ldr	r3, .L94
 1565 0012 0122     		movs	r2, #1
 1566 0014 9A70     		strb	r2, [r3, #2]
 454:modem.c       ****     updatable_parameters.sync_time = 1u;
 1567              		.loc 1 454 0
 1568 0016 054B     		ldr	r3, .L94
 1569 0018 0122     		movs	r2, #1
 1570 001a DA70     		strb	r2, [r3, #3]
 455:modem.c       ****     updatable_parameters.debug_level = 1u;
 1571              		.loc 1 455 0
 1572 001c 034B     		ldr	r3, .L94
 1573 001e 0122     		movs	r2, #1
 1574 0020 1A71     		strb	r2, [r3, #4]
 456:modem.c       **** }
 1575              		.loc 1 456 0
 1576 0022 00BF     		nop
 1577 0024 BD46     		mov	sp, r7
 1578              		.cfi_def_cfa_register 13
 1579              		@ sp needed
 1580 0026 80BC     		pop	{r7}
 1581              		.cfi_restore 7
 1582              		.cfi_def_cfa_offset 0
 1583 0028 7047     		bx	lr
 1584              	.L95:
 1585 002a 00BF     		.align	2
 1586              	.L94:
 1587 002c 00000000 		.word	updatable_parameters
 1588              		.cfi_endproc
 1589              	.LFE80:
 1590              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1591              		.section	.rodata
 1592 02f2 0000     		.align	2
 1593              	.LC31:
 1594 02f4 4E6F6465 		.ascii	"Node_Type: \000"
 1594      5F547970 
 1594      653A2000 
 1595              		.align	2
 1596              	.LC32:
 1597 0300 53494D5F 		.ascii	"SIM_Type: \000"
 1597      54797065 
 1597      3A2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 39


 1598 030b 00       		.align	2
 1599              	.LC33:
 1600 030c 53616D70 		.ascii	"Sample_Freq: \000"
 1600      6C655F46 
 1600      7265713A 
 1600      2000
 1601 031a 0000     		.align	2
 1602              	.LC34:
 1603 031c 5265706F 		.ascii	"Report_Freq: \000"
 1603      72745F46 
 1603      7265713A 
 1603      2000
 1604 032a 0000     		.align	2
 1605              	.LC35:
 1606 032c 44656275 		.ascii	"Debug_Freq: \000"
 1606      675F4672 
 1606      65713A20 
 1606      00
 1607 0339 000000   		.align	2
 1608              	.LC36:
 1609 033c 256400   		.ascii	"%d\000"
 1610 033f 00       		.align	2
 1611              	.LC37:
 1612 0340 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1612      20747970 
 1612      65206368 
 1612      616E6765 
 1612      6420746F 
 1613 035b 00       		.align	2
 1614              	.LC38:
 1615 035c 436F756C 		.ascii	"Could not change node type.\000"
 1615      64206E6F 
 1615      74206368 
 1615      616E6765 
 1615      206E6F64 
 1616              		.align	2
 1617              	.LC39:
 1618 0378 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1618      74797065 
 1618      20636861 
 1618      6E676564 
 1618      20746F3A 
 1619 0392 0000     		.align	2
 1620              	.LC40:
 1621 0394 436F756C 		.ascii	"Could not change SIM type.\000"
 1621      64206E6F 
 1621      74206368 
 1621      616E6765 
 1621      2053494D 
 1622 03af 00       		.align	2
 1623              	.LC41:
 1624 03b0 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1624      6C696E67 
 1624      20667265 
 1624      7175656E 
 1624      63792063 
 1625              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 40


 1626              	.LC42:
 1627 03d4 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1627      64206E6F 
 1627      74207061 
 1627      72736520 
 1627      6E657720 
 1628 0402 0000     		.align	2
 1629              	.LC43:
 1630 0404 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1630      7274696E 
 1630      67206672 
 1630      65717565 
 1630      6E637920 
 1631 0429 000000   		.align	2
 1632              	.LC44:
 1633 042c 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1633      64206E6F 
 1633      74207061 
 1633      72736520 
 1633      6E657720 
 1634 045b 00       		.align	2
 1635              	.LC45:
 1636 045c 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1636      67207072 
 1636      696E7469 
 1636      6E672066 
 1636      72657175 
 1637 0486 0000     		.align	2
 1638              	.LC46:
 1639 0488 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1639      64206E6F 
 1639      74207061 
 1639      72736520 
 1639      6E657720 
 1640              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1641              		.align	2
 1642              		.global	get_updated_parameters_from_malcom
 1643              		.thumb
 1644              		.thumb_func
 1645              		.type	get_updated_parameters_from_malcom, %function
 1646              	get_updated_parameters_from_malcom:
 1647              	.LFB81:
 457:modem.c       **** 
 458:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 459:modem.c       **** void get_updated_parameters_from_malcom(){
 1648              		.loc 1 459 0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 88
 1651              		@ frame_needed = 1, uses_anonymous_args = 0
 1652 0000 90B5     		push	{r4, r7, lr}
 1653              		.cfi_def_cfa_offset 12
 1654              		.cfi_offset 4, -12
 1655              		.cfi_offset 7, -8
 1656              		.cfi_offset 14, -4
 1657 0002 97B0     		sub	sp, sp, #92
 1658              		.cfi_def_cfa_offset 104
 1659 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 41


 1660              		.cfi_def_cfa_register 7
 460:modem.c       ****     
 461:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 462:modem.c       ****     char s_node_type[10];
 463:modem.c       ****     char s_sim_type[10];
 464:modem.c       ****     char s_sample_freq[10];
 465:modem.c       ****     char s_report_freq[10];
 466:modem.c       ****     char s_debug_freq[10];
 467:modem.c       ****     
 468:modem.c       ****     s_node_type[0] = '\0';
 1661              		.loc 1 468 0
 1662 0006 0023     		movs	r3, #0
 1663 0008 87F84C30 		strb	r3, [r7, #76]
 469:modem.c       ****     s_sim_type[0] = '\0';
 1664              		.loc 1 469 0
 1665 000c 0023     		movs	r3, #0
 1666 000e 87F84030 		strb	r3, [r7, #64]
 470:modem.c       ****     s_sample_freq[0] = '\0';
 1667              		.loc 1 470 0
 1668 0012 0023     		movs	r3, #0
 1669 0014 87F83430 		strb	r3, [r7, #52]
 471:modem.c       ****     s_report_freq[0] = '\0';
 1670              		.loc 1 471 0
 1671 0018 0023     		movs	r3, #0
 1672 001a 87F82830 		strb	r3, [r7, #40]
 472:modem.c       ****     s_debug_freq[0] = '\0';
 1673              		.loc 1 472 0
 1674 001e 0023     		movs	r3, #0
 1675 0020 3B77     		strb	r3, [r7, #28]
 473:modem.c       ****     
 474:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 475:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1676              		.loc 1 475 0
 1677 0022 07F14C03 		add	r3, r7, #76
 1678 0026 624A     		ldr	r2, .L108
 1679 0028 6249     		ldr	r1, .L108+4
 1680 002a 6348     		ldr	r0, .L108+8
 1681 002c FFF7FEFF 		bl	extract_string
 476:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1682              		.loc 1 476 0
 1683 0030 07F14003 		add	r3, r7, #64
 1684 0034 5E4A     		ldr	r2, .L108
 1685 0036 6149     		ldr	r1, .L108+12
 1686 0038 5F48     		ldr	r0, .L108+8
 1687 003a FFF7FEFF 		bl	extract_string
 477:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1688              		.loc 1 477 0
 1689 003e 07F13403 		add	r3, r7, #52
 1690 0042 5B4A     		ldr	r2, .L108
 1691 0044 5E49     		ldr	r1, .L108+16
 1692 0046 5C48     		ldr	r0, .L108+8
 1693 0048 FFF7FEFF 		bl	extract_string
 478:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1694              		.loc 1 478 0
 1695 004c 07F12803 		add	r3, r7, #40
 1696 0050 574A     		ldr	r2, .L108
 1697 0052 5C49     		ldr	r1, .L108+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 42


 1698 0054 5848     		ldr	r0, .L108+8
 1699 0056 FFF7FEFF 		bl	extract_string
 479:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1700              		.loc 1 479 0
 1701 005a 07F11C03 		add	r3, r7, #28
 1702 005e 544A     		ldr	r2, .L108
 1703 0060 5949     		ldr	r1, .L108+24
 1704 0062 5548     		ldr	r0, .L108+8
 1705 0064 FFF7FEFF 		bl	extract_string
 480:modem.c       ****     
 481:modem.c       ****     // Create variables for what is sent back from the server
 482:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq;
 483:modem.c       ****     
 484:modem.c       ****     // Scan character arrays and save values 
 485:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1706              		.loc 1 485 0
 1707 0068 07F11802 		add	r2, r7, #24
 1708 006c 07F14C03 		add	r3, r7, #76
 1709 0070 5649     		ldr	r1, .L108+28
 1710 0072 1846     		mov	r0, r3
 1711 0074 FFF7FEFF 		bl	sscanf
 1712 0078 0346     		mov	r3, r0
 1713 007a 012B     		cmp	r3, #1
 1714 007c 0AD1     		bne	.L97
 486:modem.c       ****         // influx isn't updating from airtable properly atm so skip this
 487:modem.c       ****         updatable_parameters.node_type = node_type;
 1715              		.loc 1 487 0
 1716 007e BB69     		ldr	r3, [r7, #24]
 1717 0080 DAB2     		uxtb	r2, r3
 1718 0082 534B     		ldr	r3, .L108+32
 1719 0084 1A70     		strb	r2, [r3]
 488:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1720              		.loc 1 488 0
 1721 0086 BB69     		ldr	r3, [r7, #24]
 1722 0088 1A46     		mov	r2, r3
 1723 008a 5249     		ldr	r1, .L108+36
 1724 008c 0020     		movs	r0, #0
 1725 008e FFF7FEFF 		bl	printNotif
 1726 0092 03E0     		b	.L98
 1727              	.L97:
 489:modem.c       ****     }else{
 490:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1728              		.loc 1 490 0
 1729 0094 5049     		ldr	r1, .L108+40
 1730 0096 0220     		movs	r0, #2
 1731 0098 FFF7FEFF 		bl	printNotif
 1732              	.L98:
 491:modem.c       ****     }
 492:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1733              		.loc 1 492 0
 1734 009c 07F11402 		add	r2, r7, #20
 1735 00a0 07F14003 		add	r3, r7, #64
 1736 00a4 4949     		ldr	r1, .L108+28
 1737 00a6 1846     		mov	r0, r3
 1738 00a8 FFF7FEFF 		bl	sscanf
 1739 00ac 0346     		mov	r3, r0
 1740 00ae 012B     		cmp	r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 43


 1741 00b0 0ED1     		bne	.L99
 493:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1742              		.loc 1 493 0
 1743 00b2 7B69     		ldr	r3, [r7, #20]
 1744 00b4 002B     		cmp	r3, #0
 1745 00b6 14BF     		ite	ne
 1746 00b8 0123     		movne	r3, #1
 1747 00ba 0023     		moveq	r3, #0
 1748 00bc DAB2     		uxtb	r2, r3
 1749 00be 444B     		ldr	r3, .L108+32
 1750 00c0 5A70     		strb	r2, [r3, #1]
 494:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1751              		.loc 1 494 0
 1752 00c2 7B69     		ldr	r3, [r7, #20]
 1753 00c4 1A46     		mov	r2, r3
 1754 00c6 4549     		ldr	r1, .L108+44
 1755 00c8 0020     		movs	r0, #0
 1756 00ca FFF7FEFF 		bl	printNotif
 1757 00ce 03E0     		b	.L100
 1758              	.L99:
 495:modem.c       ****     }else{
 496:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1759              		.loc 1 496 0
 1760 00d0 4349     		ldr	r1, .L108+48
 1761 00d2 0220     		movs	r0, #2
 1762 00d4 FFF7FEFF 		bl	printNotif
 1763              	.L100:
 497:modem.c       ****     }
 498:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1764              		.loc 1 498 0
 1765 00d8 07F11002 		add	r2, r7, #16
 1766 00dc 07F13403 		add	r3, r7, #52
 1767 00e0 3A49     		ldr	r1, .L108+28
 1768 00e2 1846     		mov	r0, r3
 1769 00e4 FFF7FEFF 		bl	sscanf
 1770 00e8 0346     		mov	r3, r0
 1771 00ea 012B     		cmp	r3, #1
 1772 00ec 15D1     		bne	.L101
 499:modem.c       ****         //updatable_parameters.measure_time = sample_freq;
 500:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 501:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1773              		.loc 1 501 0
 1774 00ee 384B     		ldr	r3, .L108+32
 1775 00f0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1776 00f2 99B2     		uxth	r1, r3
 1777 00f4 3B4C     		ldr	r4, .L108+52
 1778 00f6 3846     		mov	r0, r7
 1779 00f8 0723     		movs	r3, #7
 1780 00fa 0122     		movs	r2, #1
 1781 00fc FFF7FEFF 		bl	CreateAlarm
 1782 0100 2246     		mov	r2, r4
 1783 0102 3B46     		mov	r3, r7
 1784 0104 1968     		ldr	r1, [r3]	@ unaligned
 1785 0106 1160     		str	r1, [r2]	@ unaligned
 1786 0108 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1787 010a 9380     		strh	r3, [r2, #4]	@ unaligned
 502:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 44


 1788              		.loc 1 502 0
 1789 010c 3B69     		ldr	r3, [r7, #16]
 1790 010e 1A46     		mov	r2, r3
 1791 0110 3549     		ldr	r1, .L108+56
 1792 0112 0020     		movs	r0, #0
 1793 0114 FFF7FEFF 		bl	printNotif
 1794 0118 03E0     		b	.L102
 1795              	.L101:
 503:modem.c       ****     }else{
 504:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1796              		.loc 1 504 0
 1797 011a 3449     		ldr	r1, .L108+60
 1798 011c 0220     		movs	r0, #2
 1799 011e FFF7FEFF 		bl	printNotif
 1800              	.L102:
 505:modem.c       ****     }
 506:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1801              		.loc 1 506 0
 1802 0122 07F10C02 		add	r2, r7, #12
 1803 0126 07F12803 		add	r3, r7, #40
 1804 012a 2849     		ldr	r1, .L108+28
 1805 012c 1846     		mov	r0, r3
 1806 012e FFF7FEFF 		bl	sscanf
 1807 0132 0346     		mov	r3, r0
 1808 0134 012B     		cmp	r3, #1
 1809 0136 19D1     		bne	.L103
 507:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1810              		.loc 1 507 0
 1811 0138 FB68     		ldr	r3, [r7, #12]
 1812 013a DAB2     		uxtb	r2, r3
 1813 013c 244B     		ldr	r3, .L108+32
 1814 013e DA70     		strb	r2, [r3, #3]
 508:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 509:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1815              		.loc 1 509 0
 1816 0140 234B     		ldr	r3, .L108+32
 1817 0142 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1818 0144 99B2     		uxth	r1, r3
 1819 0146 2A4C     		ldr	r4, .L108+64
 1820 0148 3846     		mov	r0, r7
 1821 014a 0723     		movs	r3, #7
 1822 014c 0122     		movs	r2, #1
 1823 014e FFF7FEFF 		bl	CreateAlarm
 1824 0152 2246     		mov	r2, r4
 1825 0154 3B46     		mov	r3, r7
 1826 0156 1968     		ldr	r1, [r3]	@ unaligned
 1827 0158 1160     		str	r1, [r2]	@ unaligned
 1828 015a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1829 015c 9380     		strh	r3, [r2, #4]	@ unaligned
 510:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1830              		.loc 1 510 0
 1831 015e FB68     		ldr	r3, [r7, #12]
 1832 0160 1A46     		mov	r2, r3
 1833 0162 2449     		ldr	r1, .L108+68
 1834 0164 0020     		movs	r0, #0
 1835 0166 FFF7FEFF 		bl	printNotif
 1836 016a 03E0     		b	.L104
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 45


 1837              	.L103:
 511:modem.c       ****         }else{
 512:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1838              		.loc 1 512 0
 1839 016c 2249     		ldr	r1, .L108+72
 1840 016e 0220     		movs	r0, #2
 1841 0170 FFF7FEFF 		bl	printNotif
 1842              	.L104:
 513:modem.c       ****     }
 514:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1843              		.loc 1 514 0
 1844 0174 07F10802 		add	r2, r7, #8
 1845 0178 07F11C03 		add	r3, r7, #28
 1846 017c 1349     		ldr	r1, .L108+28
 1847 017e 1846     		mov	r0, r3
 1848 0180 FFF7FEFF 		bl	sscanf
 1849 0184 0346     		mov	r3, r0
 1850 0186 012B     		cmp	r3, #1
 1851 0188 0AD1     		bne	.L105
 515:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1852              		.loc 1 515 0
 1853 018a BB68     		ldr	r3, [r7, #8]
 1854 018c DAB2     		uxtb	r2, r3
 1855 018e 104B     		ldr	r3, .L108+32
 1856 0190 1A71     		strb	r2, [r3, #4]
 516:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1857              		.loc 1 516 0
 1858 0192 BB68     		ldr	r3, [r7, #8]
 1859 0194 1A46     		mov	r2, r3
 1860 0196 1949     		ldr	r1, .L108+76
 1861 0198 0020     		movs	r0, #0
 1862 019a FFF7FEFF 		bl	printNotif
 517:modem.c       ****     }else{
 518:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 519:modem.c       ****     }
 520:modem.c       **** }
 1863              		.loc 1 520 0
 1864 019e 03E0     		b	.L107
 1865              	.L105:
 518:modem.c       ****     }
 1866              		.loc 1 518 0
 1867 01a0 1749     		ldr	r1, .L108+80
 1868 01a2 0220     		movs	r0, #2
 1869 01a4 FFF7FEFF 		bl	printNotif
 1870              	.L107:
 1871              		.loc 1 520 0
 1872 01a8 00BF     		nop
 1873 01aa 5C37     		adds	r7, r7, #92
 1874              		.cfi_def_cfa_offset 12
 1875 01ac BD46     		mov	sp, r7
 1876              		.cfi_def_cfa_register 13
 1877              		@ sp needed
 1878 01ae 90BD     		pop	{r4, r7, pc}
 1879              	.L109:
 1880              		.align	2
 1881              	.L108:
 1882 01b0 58020000 		.word	.LC20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 46


 1883 01b4 F4020000 		.word	.LC31
 1884 01b8 00000000 		.word	uart_received_string
 1885 01bc 00030000 		.word	.LC32
 1886 01c0 0C030000 		.word	.LC33
 1887 01c4 1C030000 		.word	.LC34
 1888 01c8 2C030000 		.word	.LC35
 1889 01cc 3C030000 		.word	.LC36
 1890 01d0 00000000 		.word	updatable_parameters
 1891 01d4 40030000 		.word	.LC37
 1892 01d8 5C030000 		.word	.LC38
 1893 01dc 78030000 		.word	.LC39
 1894 01e0 94030000 		.word	.LC40
 1895 01e4 00000000 		.word	alarmMeasure
 1896 01e8 B0030000 		.word	.LC41
 1897 01ec D4030000 		.word	.LC42
 1898 01f0 00000000 		.word	alarmSync
 1899 01f4 04040000 		.word	.LC43
 1900 01f8 2C040000 		.word	.LC44
 1901 01fc 5C040000 		.word	.LC45
 1902 0200 88040000 		.word	.LC46
 1903              		.cfi_endproc
 1904              	.LFE81:
 1905              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 1906              		.section	.rodata
 1907 04b7 00       		.align	2
 1908              	.LC47:
 1909 04b8 41542343 		.ascii	"AT#CGMM\015\000"
 1909      474D4D0D 
 1909      00
 1910 04c1 000000   		.align	2
 1911              	.LC48:
 1912 04c4 4D6F6465 		.ascii	"Modem Model: %s\000"
 1912      6D204D6F 
 1912      64656C3A 
 1912      20257300 
 1913              		.align	2
 1914              	.LC49:
 1915 04d4 41542343 		.ascii	"AT#CCID\015\000"
 1915      4349440D 
 1915      00
 1916 04dd 000000   		.align	2
 1917              	.LC50:
 1918 04e0 53494D20 		.ascii	"SIM ID: %s\000"
 1918      49443A20 
 1918      257300
 1919 04eb 00       		.align	2
 1920              	.LC51:
 1921 04ec 41542B43 		.ascii	"AT+CGSN\015\000"
 1921      47534E0D 
 1921      00
 1922 04f5 000000   		.align	2
 1923              	.LC52:
 1924 04f8 494D4549 		.ascii	"IMEI: %s\000"
 1924      3A202573 
 1924      00
 1925 0501 000000   		.align	2
 1926              	.LC53:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 47


 1927 0504 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 1927      4744434F 
 1927      4E543D31 
 1927      2C224950 
 1927      222C2277 
 1928 052d 00       		.ascii	"\000"
 1929 052e 0000     		.align	2
 1930              	.LC54:
 1931 0530 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 1931      4744434F 
 1931      4E543D31 
 1931      2C224950 
 1931      222C2273 
 1932              		.align	2
 1933              	.LC55:
 1934 054c 41542B43 		.ascii	"AT+CFUN?\015\000"
 1934      46554E3F 
 1934      0D00
 1935 0556 0000     		.align	2
 1936              	.LC56:
 1937 0558 4346554E 		.ascii	"CFUN: %s\000"
 1937      3A202573 
 1937      00
 1938 0561 000000   		.align	2
 1939              	.LC57:
 1940 0564 41542B43 		.ascii	"AT+CFUN=1\015\000"
 1940      46554E3D 
 1940      310D00
 1941              		.section	.text.modem_configure_settings,"ax",%progbits
 1942              		.align	2
 1943              		.global	modem_configure_settings
 1944              		.thumb
 1945              		.thumb_func
 1946              		.type	modem_configure_settings, %function
 1947              	modem_configure_settings:
 1948              	.LFB82:
 521:modem.c       ****     
 522:modem.c       **** // Configure the modem settings
 523:modem.c       **** void modem_configure_settings(){
 1949              		.loc 1 523 0
 1950              		.cfi_startproc
 1951              		@ args = 0, pretend = 0, frame = 16
 1952              		@ frame_needed = 1, uses_anonymous_args = 0
 1953 0000 80B5     		push	{r7, lr}
 1954              		.cfi_def_cfa_offset 8
 1955              		.cfi_offset 7, -8
 1956              		.cfi_offset 14, -4
 1957 0002 84B0     		sub	sp, sp, #16
 1958              		.cfi_def_cfa_offset 24
 1959 0004 00AF     		add	r7, sp, #0
 1960              		.cfi_def_cfa_register 7
 524:modem.c       ****     
 525:modem.c       ****     // Save/print modem model ID number
 526:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 1961              		.loc 1 526 0
 1962 0006 454B     		ldr	r3, .L119
 1963 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 48


 1964 000a 002B     		cmp	r3, #0
 1965 000c 13D1     		bne	.L111
 527:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 528:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 1966              		.loc 1 528 0
 1967 000e 4FF4FA62 		mov	r2, #2000
 1968 0012 4349     		ldr	r1, .L119+4
 1969 0014 4348     		ldr	r0, .L119+8
 1970 0016 FFF7FEFF 		bl	at_write_command
 1971 001a 0346     		mov	r3, r0
 1972 001c 002B     		cmp	r3, #0
 1973 001e 0AD0     		beq	.L111
 529:modem.c       ****             // Extract modem model ID number string from the UART
 530:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 1974              		.loc 1 530 0
 1975 0020 414B     		ldr	r3, .L119+12
 1976 0022 424A     		ldr	r2, .L119+16
 1977 0024 4249     		ldr	r1, .L119+20
 1978 0026 4348     		ldr	r0, .L119+24
 1979 0028 FFF7FEFF 		bl	extract_string
 531:modem.c       ****             // Print modem model ID number
 532:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 1980              		.loc 1 532 0
 1981 002c 3E4A     		ldr	r2, .L119+12
 1982 002e 4249     		ldr	r1, .L119+28
 1983 0030 0020     		movs	r0, #0
 1984 0032 FFF7FEFF 		bl	printNotif
 1985              	.L111:
 533:modem.c       ****         }
 534:modem.c       ****     }
 535:modem.c       ****     
 536:modem.c       ****    // Save/print SIM-card ID
 537:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 1986              		.loc 1 537 0
 1987 0036 394B     		ldr	r3, .L119
 1988 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1989 003a 002B     		cmp	r3, #0
 1990 003c 13D1     		bne	.L112
 538:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 539:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 1991              		.loc 1 539 0
 1992 003e 4FF4FA62 		mov	r2, #2000
 1993 0042 3749     		ldr	r1, .L119+4
 1994 0044 3D48     		ldr	r0, .L119+32
 1995 0046 FFF7FEFF 		bl	at_write_command
 1996 004a 0346     		mov	r3, r0
 1997 004c 002B     		cmp	r3, #0
 1998 004e 0AD0     		beq	.L112
 540:modem.c       ****             // Extract SIM-card ID string from the UART
 541:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 1999              		.loc 1 541 0
 2000 0050 324B     		ldr	r3, .L119
 2001 0052 364A     		ldr	r2, .L119+16
 2002 0054 3649     		ldr	r1, .L119+20
 2003 0056 3748     		ldr	r0, .L119+24
 2004 0058 FFF7FEFF 		bl	extract_string
 542:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 49


 2005              		.loc 1 542 0
 2006 005c 2F4A     		ldr	r2, .L119
 2007 005e 3849     		ldr	r1, .L119+36
 2008 0060 0020     		movs	r0, #0
 2009 0062 FFF7FEFF 		bl	printNotif
 2010              	.L112:
 543:modem.c       ****         }
 544:modem.c       ****    }
 545:modem.c       **** 
 546:modem.c       ****     // Save/print modem IMEI
 547:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2011              		.loc 1 547 0
 2012 0066 2D4B     		ldr	r3, .L119
 2013 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2014 006c 002B     		cmp	r3, #0
 2015 006e 13D1     		bne	.L113
 548:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 549:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2016              		.loc 1 549 0
 2017 0070 4FF4FA62 		mov	r2, #2000
 2018 0074 2A49     		ldr	r1, .L119+4
 2019 0076 3348     		ldr	r0, .L119+40
 2020 0078 FFF7FEFF 		bl	at_write_command
 2021 007c 0346     		mov	r3, r0
 2022 007e 002B     		cmp	r3, #0
 2023 0080 0AD0     		beq	.L113
 550:modem.c       ****             // Extract modem IMEI number string from the UART
 551:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2024              		.loc 1 551 0
 2025 0082 314B     		ldr	r3, .L119+44
 2026 0084 294A     		ldr	r2, .L119+16
 2027 0086 2A49     		ldr	r1, .L119+20
 2028 0088 2A48     		ldr	r0, .L119+24
 2029 008a FFF7FEFF 		bl	extract_string
 552:modem.c       ****             // Print modem IMEI number
 553:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2030              		.loc 1 553 0
 2031 008e 2E4A     		ldr	r2, .L119+44
 2032 0090 2E49     		ldr	r1, .L119+48
 2033 0092 0020     		movs	r0, #0
 2034 0094 FFF7FEFF 		bl	printNotif
 2035              	.L113:
 554:modem.c       ****         } 
 555:modem.c       ****     }
 556:modem.c       ****     
 557:modem.c       ****     // Configure protocol and cellular end point
 558:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 559:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2036              		.loc 1 559 0
 2037 0098 2D4B     		ldr	r3, .L119+52
 2038 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2039 009c 83F00103 		eor	r3, r3, #1
 2040 00a0 DBB2     		uxtb	r3, r3
 2041 00a2 002B     		cmp	r3, #0
 2042 00a4 06D0     		beq	.L114
 560:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2043              		.loc 1 560 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 50


 2044 00a6 4FF4FA62 		mov	r2, #2000
 2045 00aa 1D49     		ldr	r1, .L119+4
 2046 00ac 2948     		ldr	r0, .L119+56
 2047 00ae FFF7FEFF 		bl	at_write_command
 2048 00b2 09E0     		b	.L115
 2049              	.L114:
 561:modem.c       ****     
 562:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2050              		.loc 1 562 0
 2051 00b4 264B     		ldr	r3, .L119+52
 2052 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2053 00b8 002B     		cmp	r3, #0
 2054 00ba 05D0     		beq	.L115
 563:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2055              		.loc 1 563 0
 2056 00bc 4FF4FA62 		mov	r2, #2000
 2057 00c0 1749     		ldr	r1, .L119+4
 2058 00c2 2548     		ldr	r0, .L119+60
 2059 00c4 FFF7FEFF 		bl	at_write_command
 2060              	.L115:
 564:modem.c       ****     }
 565:modem.c       ****     
 566:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 567:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 568:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2061              		.loc 1 568 0
 2062 00c8 4FF4FA62 		mov	r2, #2000
 2063 00cc 1449     		ldr	r1, .L119+4
 2064 00ce 2348     		ldr	r0, .L119+64
 2065 00d0 FFF7FEFF 		bl	at_write_command
 2066 00d4 0346     		mov	r3, r0
 2067 00d6 002B     		cmp	r3, #0
 2068 00d8 1BD0     		beq	.L118
 2069              	.LBB9:
 569:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 570:modem.c       ****         CFUN[0] = '\0';
 2070              		.loc 1 570 0
 2071 00da 0023     		movs	r3, #0
 2072 00dc 3B71     		strb	r3, [r7, #4]
 571:modem.c       ****         // Extract UART string recieved from the modem
 572:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2073              		.loc 1 572 0
 2074 00de 3B1D     		adds	r3, r7, #4
 2075 00e0 124A     		ldr	r2, .L119+16
 2076 00e2 1349     		ldr	r1, .L119+20
 2077 00e4 1348     		ldr	r0, .L119+24
 2078 00e6 FFF7FEFF 		bl	extract_string
 573:modem.c       ****         // Print UART string recieved from the modem
 574:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2079              		.loc 1 574 0
 2080 00ea 3B1D     		adds	r3, r7, #4
 2081 00ec 1A46     		mov	r2, r3
 2082 00ee 1C49     		ldr	r1, .L119+68
 2083 00f0 0020     		movs	r0, #0
 2084 00f2 FFF7FEFF 		bl	printNotif
 575:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 576:modem.c       ****         // If it returns NULL, then write another command to the modem
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 51


 577:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2085              		.loc 1 577 0
 2086 00f6 3B1D     		adds	r3, r7, #4
 2087 00f8 3121     		movs	r1, #49
 2088 00fa 1846     		mov	r0, r3
 2089 00fc FFF7FEFF 		bl	strchr
 2090 0100 0346     		mov	r3, r0
 2091 0102 002B     		cmp	r3, #0
 2092 0104 05D1     		bne	.L118
 578:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 579:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 580:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2093              		.loc 1 580 0
 2094 0106 4FF4FA62 		mov	r2, #2000
 2095 010a 0549     		ldr	r1, .L119+4
 2096 010c 1548     		ldr	r0, .L119+72
 2097 010e FFF7FEFF 		bl	at_write_command
 2098              	.L118:
 2099              	.LBE9:
 581:modem.c       ****         }
 582:modem.c       ****     }
 583:modem.c       **** 
 584:modem.c       ****     
 585:modem.c       **** }
 2100              		.loc 1 585 0
 2101 0112 00BF     		nop
 2102 0114 1037     		adds	r7, r7, #16
 2103              		.cfi_def_cfa_offset 8
 2104 0116 BD46     		mov	sp, r7
 2105              		.cfi_def_cfa_register 13
 2106              		@ sp needed
 2107 0118 80BD     		pop	{r7, pc}
 2108              	.L120:
 2109 011a 00BF     		.align	2
 2110              	.L119:
 2111 011c 00000000 		.word	modem_info
 2112 0120 00000000 		.word	.LC0
 2113 0124 B8040000 		.word	.LC47
 2114 0128 14000000 		.word	modem_info+20
 2115 012c 58020000 		.word	.LC20
 2116 0130 5C020000 		.word	.LC21
 2117 0134 00000000 		.word	uart_received_string
 2118 0138 C4040000 		.word	.LC48
 2119 013c D4040000 		.word	.LC49
 2120 0140 E0040000 		.word	.LC50
 2121 0144 EC040000 		.word	.LC51
 2122 0148 28000000 		.word	modem_info+40
 2123 014c F8040000 		.word	.LC52
 2124 0150 00000000 		.word	updatable_parameters
 2125 0154 04050000 		.word	.LC53
 2126 0158 30050000 		.word	.LC54
 2127 015c 4C050000 		.word	.LC55
 2128 0160 58050000 		.word	.LC56
 2129 0164 64050000 		.word	.LC57
 2130              		.cfi_endproc
 2131              	.LFE82:
 2132              		.size	modem_configure_settings, .-modem_configure_settings
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 52


 2133              		.section	.rodata
 2134 056f 00       		.align	2
 2135              	.LC58:
 2136 0570 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2136      6D206E6F 
 2136      74207265 
 2136      61647920 
 2136      746F2067 
 2137 05a3 6B2E00   		.ascii	"k.\000"
 2138 05a6 0000     		.align	2
 2139              	.LC59:
 2140 05a8 41542B43 		.ascii	"AT+CCLK?\015\000"
 2140      434C4B3F 
 2140      0D00
 2141 05b2 0000     		.align	2
 2142              	.LC60:
 2143 05b4 220D00   		.ascii	"\"\015\000"
 2144 05b7 00       		.align	2
 2145              	.LC61:
 2146 05b8 3A202200 		.ascii	": \"\000"
 2147              		.align	2
 2148              	.LC62:
 2149 05bc 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2149      642F2564 
 2149      2C25643A 
 2149      25643A25 
 2149      642D2564 
 2150 05d1 000000   		.align	2
 2151              	.LC63:
 2152 05d4 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2152      642F2564 
 2152      2C25643A 
 2152      25643A25 
 2152      642B2564 
 2153 05e9 000000   		.align	2
 2154              	.LC64:
 2155 05ec 436F756C 		.ascii	"Could not parse modem time.\000"
 2155      64206E6F 
 2155      74207061 
 2155      72736520 
 2155      6D6F6465 
 2156              		.section	.text.modem_get_network_time,"ax",%progbits
 2157              		.align	2
 2158              		.global	modem_get_network_time
 2159              		.thumb
 2160              		.thumb_func
 2161              		.type	modem_get_network_time, %function
 2162              	modem_get_network_time:
 2163              	.LFB83:
 586:modem.c       **** 
 587:modem.c       **** //returns 0 if modem can't get time
 588:modem.c       **** long modem_get_network_time(){
 2164              		.loc 1 588 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 104
 2167              		@ frame_needed = 1, uses_anonymous_args = 0
 2168 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 53


 2169              		.cfi_def_cfa_offset 8
 2170              		.cfi_offset 7, -8
 2171              		.cfi_offset 14, -4
 2172 0002 A0B0     		sub	sp, sp, #128
 2173              		.cfi_def_cfa_offset 136
 2174 0004 06AF     		add	r7, sp, #24
 2175              		.cfi_def_cfa 7, 112
 589:modem.c       ****     
 590:modem.c       ****     //modem reposen format (careful to include the quotes "")
 591:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 592:modem.c       ****     //ex: 14:48 GMT
 593:modem.c       **** 
 594:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 595:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2176              		.loc 1 595 0
 2177 0006 444B     		ldr	r3, .L128
 2178 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2179 000a 042B     		cmp	r3, #4
 2180 000c 05D0     		beq	.L122
 596:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2181              		.loc 1 596 0
 2182 000e 4349     		ldr	r1, .L128+4
 2183 0010 0220     		movs	r0, #2
 2184 0012 FFF7FEFF 		bl	printNotif
 597:modem.c       ****         return 0;   
 2185              		.loc 1 597 0
 2186 0016 0023     		movs	r3, #0
 2187 0018 7AE0     		b	.L123
 2188              	.L122:
 598:modem.c       ****     }
 599:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2189              		.loc 1 599 0
 2190 001a 0023     		movs	r3, #0
 2191 001c 7B66     		str	r3, [r7, #100]
 600:modem.c       ****     
 601:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 602:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2192              		.loc 1 602 0
 2193 001e 4FF4FA62 		mov	r2, #2000
 2194 0022 3F49     		ldr	r1, .L128+8
 2195 0024 3F48     		ldr	r0, .L128+12
 2196 0026 FFF7FEFF 		bl	at_write_command
 2197 002a 0346     		mov	r3, r0
 2198 002c 002B     		cmp	r3, #0
 2199 002e 6ED0     		beq	.L124
 2200              	.LBB10:
 603:modem.c       ****         // need to set this to /0
 604:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 605:modem.c       ****         network_time[0] = '\0';
 2201              		.loc 1 605 0
 2202 0030 0023     		movs	r3, #0
 2203 0032 87F84430 		strb	r3, [r7, #68]
 606:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 607:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2204              		.loc 1 607 0
 2205 0036 07F14403 		add	r3, r7, #68
 2206 003a 3B4A     		ldr	r2, .L128+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 54


 2207 003c 3B49     		ldr	r1, .L128+20
 2208 003e 3C48     		ldr	r0, .L128+24
 2209 0040 FFF7FEFF 		bl	extract_string
 608:modem.c       ****         
 609:modem.c       ****         ///////////////////  
 610:modem.c       ****         struct tm t; // Creates variable t of struct tm
 611:modem.c       ****         
 612:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 613:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2210              		.loc 1 613 0
 2211 0044 0023     		movs	r3, #0
 2212 0046 BB62     		str	r3, [r7, #40]
 614:modem.c       ****       
 615:modem.c       ****         // Determines the GMT offset 
 616:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 617:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 618:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2213              		.loc 1 618 0
 2214 0048 07F13C01 		add	r1, r7, #60
 2215 004c 07F14002 		add	r2, r7, #64
 2216 0050 07F14400 		add	r0, r7, #68
 2217 0054 07F12803 		add	r3, r7, #40
 2218 0058 0493     		str	r3, [sp, #16]
 2219 005a 07F12C03 		add	r3, r7, #44
 2220 005e 0393     		str	r3, [sp, #12]
 2221 0060 07F13003 		add	r3, r7, #48
 2222 0064 0293     		str	r3, [sp, #8]
 2223 0066 07F13403 		add	r3, r7, #52
 2224 006a 0193     		str	r3, [sp, #4]
 2225 006c 07F13803 		add	r3, r7, #56
 2226 0070 0093     		str	r3, [sp]
 2227 0072 0B46     		mov	r3, r1
 2228 0074 2F49     		ldr	r1, .L128+28
 2229 0076 FFF7FEFF 		bl	sscanf
 2230 007a 0346     		mov	r3, r0
 2231 007c 072B     		cmp	r3, #7
 2232 007e 06D1     		bne	.L125
 619:modem.c       ****             gmt_offset = gmt_offset*(900);
 2233              		.loc 1 619 0
 2234 0080 BB6A     		ldr	r3, [r7, #40]
 2235 0082 4FF46172 		mov	r2, #900
 2236 0086 02FB03F3 		mul	r3, r2, r3
 2237 008a BB62     		str	r3, [r7, #40]
 2238 008c 27E0     		b	.L126
 2239              	.L125:
 620:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2240              		.loc 1 620 0
 2241 008e 07F13C01 		add	r1, r7, #60
 2242 0092 07F14002 		add	r2, r7, #64
 2243 0096 07F14400 		add	r0, r7, #68
 2244 009a 07F12803 		add	r3, r7, #40
 2245 009e 0493     		str	r3, [sp, #16]
 2246 00a0 07F12C03 		add	r3, r7, #44
 2247 00a4 0393     		str	r3, [sp, #12]
 2248 00a6 07F13003 		add	r3, r7, #48
 2249 00aa 0293     		str	r3, [sp, #8]
 2250 00ac 07F13403 		add	r3, r7, #52
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 55


 2251 00b0 0193     		str	r3, [sp, #4]
 2252 00b2 07F13803 		add	r3, r7, #56
 2253 00b6 0093     		str	r3, [sp]
 2254 00b8 0B46     		mov	r3, r1
 2255 00ba 1F49     		ldr	r1, .L128+32
 2256 00bc FFF7FEFF 		bl	sscanf
 2257 00c0 0346     		mov	r3, r0
 2258 00c2 072B     		cmp	r3, #7
 2259 00c4 05D1     		bne	.L127
 621:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2260              		.loc 1 621 0
 2261 00c6 BB6A     		ldr	r3, [r7, #40]
 2262 00c8 1C4A     		ldr	r2, .L128+36
 2263 00ca 02FB03F3 		mul	r3, r2, r3
 2264 00ce BB62     		str	r3, [r7, #40]
 2265 00d0 05E0     		b	.L126
 2266              	.L127:
 622:modem.c       ****         }else{
 623:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2267              		.loc 1 623 0
 2268 00d2 1B49     		ldr	r1, .L128+40
 2269 00d4 0220     		movs	r0, #2
 2270 00d6 FFF7FEFF 		bl	printNotif
 624:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2271              		.loc 1 624 0
 2272 00da 0023     		movs	r3, #0
 2273 00dc 18E0     		b	.L123
 2274              	.L126:
 625:modem.c       ****         }
 626:modem.c       ****         
 627:modem.c       ****         // Sets each variable to the correct time 
 628:modem.c       ****         t.tm_sec = second;
 2275              		.loc 1 628 0
 2276 00de FB6A     		ldr	r3, [r7, #44]
 2277 00e0 7B60     		str	r3, [r7, #4]
 629:modem.c       ****         t.tm_min = minute;
 2278              		.loc 1 629 0
 2279 00e2 3B6B     		ldr	r3, [r7, #48]
 2280 00e4 BB60     		str	r3, [r7, #8]
 630:modem.c       ****         t.tm_hour = hour;
 2281              		.loc 1 630 0
 2282 00e6 7B6B     		ldr	r3, [r7, #52]
 2283 00e8 FB60     		str	r3, [r7, #12]
 631:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2284              		.loc 1 631 0
 2285 00ea 3B6C     		ldr	r3, [r7, #64]
 2286 00ec 6433     		adds	r3, r3, #100
 2287 00ee BB61     		str	r3, [r7, #24]
 632:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2288              		.loc 1 632 0
 2289 00f0 FB6B     		ldr	r3, [r7, #60]
 2290 00f2 013B     		subs	r3, r3, #1
 2291 00f4 7B61     		str	r3, [r7, #20]
 633:modem.c       ****         t.tm_mday = day;           // Day of the month
 2292              		.loc 1 633 0
 2293 00f6 BB6B     		ldr	r3, [r7, #56]
 2294 00f8 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 56


 634:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2295              		.loc 1 634 0
 2296 00fa 0023     		movs	r3, #0
 2297 00fc 7B62     		str	r3, [r7, #36]
 635:modem.c       ****     
 636:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 637:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 638:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2298              		.loc 1 638 0
 2299 00fe 3B1D     		adds	r3, r7, #4
 2300 0100 1846     		mov	r0, r3
 2301 0102 FFF7FEFF 		bl	mktime
 2302 0106 0246     		mov	r2, r0
 2303 0108 BB6A     		ldr	r3, [r7, #40]
 2304 010a 1344     		add	r3, r3, r2
 2305 010c 7B66     		str	r3, [r7, #100]
 2306              	.L124:
 2307              	.LBE10:
 639:modem.c       ****     }
 640:modem.c       ****     
 641:modem.c       ****     return epoch_time;
 2308              		.loc 1 641 0
 2309 010e 7B6E     		ldr	r3, [r7, #100]
 2310              	.L123:
 642:modem.c       **** }
 2311              		.loc 1 642 0
 2312 0110 1846     		mov	r0, r3
 2313 0112 6837     		adds	r7, r7, #104
 2314              		.cfi_def_cfa_offset 8
 2315 0114 BD46     		mov	sp, r7
 2316              		.cfi_def_cfa_register 13
 2317              		@ sp needed
 2318 0116 80BD     		pop	{r7, pc}
 2319              	.L129:
 2320              		.align	2
 2321              	.L128:
 2322 0118 00000000 		.word	modem_state
 2323 011c 70050000 		.word	.LC58
 2324 0120 00000000 		.word	.LC0
 2325 0124 A8050000 		.word	.LC59
 2326 0128 B4050000 		.word	.LC60
 2327 012c B8050000 		.word	.LC61
 2328 0130 00000000 		.word	uart_received_string
 2329 0134 BC050000 		.word	.LC62
 2330 0138 D4050000 		.word	.LC63
 2331 013c 7CFCFFFF 		.word	-900
 2332 0140 EC050000 		.word	.LC64
 2333              		.cfi_endproc
 2334              	.LFE83:
 2335              		.size	modem_get_network_time, .-modem_get_network_time
 2336              		.section	.text.modem_get_state,"ax",%progbits
 2337              		.align	2
 2338              		.global	modem_get_state
 2339              		.thumb
 2340              		.thumb_func
 2341              		.type	modem_get_state, %function
 2342              	modem_get_state:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 57


 2343              	.LFB84:
 643:modem.c       **** 
 644:modem.c       **** // Get the modem state
 645:modem.c       **** uint8 modem_get_state(){
 2344              		.loc 1 645 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 1, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 2349 0000 80B4     		push	{r7}
 2350              		.cfi_def_cfa_offset 4
 2351              		.cfi_offset 7, -4
 2352 0002 00AF     		add	r7, sp, #0
 2353              		.cfi_def_cfa_register 7
 646:modem.c       ****     return modem_state;
 2354              		.loc 1 646 0
 2355 0004 024B     		ldr	r3, .L132
 2356 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 647:modem.c       **** }
 2357              		.loc 1 647 0
 2358 0008 1846     		mov	r0, r3
 2359 000a BD46     		mov	sp, r7
 2360              		.cfi_def_cfa_register 13
 2361              		@ sp needed
 2362 000c 80BC     		pop	{r7}
 2363              		.cfi_restore 7
 2364              		.cfi_def_cfa_offset 0
 2365 000e 7047     		bx	lr
 2366              	.L133:
 2367              		.align	2
 2368              	.L132:
 2369 0010 00000000 		.word	modem_state
 2370              		.cfi_endproc
 2371              	.LFE84:
 2372              		.size	modem_get_state, .-modem_get_state
 2373              		.section	.text.modem_sleep,"ax",%progbits
 2374              		.align	2
 2375              		.global	modem_sleep
 2376              		.thumb
 2377              		.thumb_func
 2378              		.type	modem_sleep, %function
 2379              	modem_sleep:
 2380              	.LFB85:
 648:modem.c       **** 
 649:modem.c       **** // Set modem to sleep
 650:modem.c       **** void modem_sleep(){
 2381              		.loc 1 650 0
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 0
 2384              		@ frame_needed = 1, uses_anonymous_args = 0
 2385 0000 80B5     		push	{r7, lr}
 2386              		.cfi_def_cfa_offset 8
 2387              		.cfi_offset 7, -8
 2388              		.cfi_offset 14, -4
 2389 0002 00AF     		add	r7, sp, #0
 2390              		.cfi_def_cfa_register 7
 651:modem.c       ****     // If the modem_state is not "off" then put it to sleep
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 58


 652:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2391              		.loc 1 652 0
 2392 0004 FFF7FEFF 		bl	modem_get_state
 2393 0008 0346     		mov	r3, r0
 2394 000a 002B     		cmp	r3, #0
 2395 000c 03D0     		beq	.L136
 653:modem.c       **** 
 654:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2396              		.loc 1 654 0
 2397 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 655:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2398              		.loc 1 655 0
 2399 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2400              	.L136:
 656:modem.c       ****         
 657:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 658:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 659:modem.c       ****      }
 660:modem.c       **** }
 2401              		.loc 1 660 0
 2402 0016 00BF     		nop
 2403 0018 80BD     		pop	{r7, pc}
 2404              		.cfi_endproc
 2405              	.LFE85:
 2406              		.size	modem_sleep, .-modem_sleep
 2407 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2408              		.align	2
 2409              		.global	modem_wakeup
 2410              		.thumb
 2411              		.thumb_func
 2412              		.type	modem_wakeup, %function
 2413              	modem_wakeup:
 2414              	.LFB86:
 661:modem.c       **** 
 662:modem.c       **** // Wakeup the modem
 663:modem.c       **** void modem_wakeup(){
 2415              		.loc 1 663 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 1, uses_anonymous_args = 0
 2419 0000 80B5     		push	{r7, lr}
 2420              		.cfi_def_cfa_offset 8
 2421              		.cfi_offset 7, -8
 2422              		.cfi_offset 14, -4
 2423 0002 00AF     		add	r7, sp, #0
 2424              		.cfi_def_cfa_register 7
 664:modem.c       ****     // If modem state is not off then wake it up
 665:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2425              		.loc 1 665 0
 2426 0004 FFF7FEFF 		bl	modem_get_state
 2427 0008 0346     		mov	r3, r0
 2428 000a 002B     		cmp	r3, #0
 2429 000c 0BD0     		beq	.L139
 666:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2430              		.loc 1 666 0
 2431 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 667:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 59


 668:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 669:modem.c       ****         UART_Telit_Wakeup();
 2432              		.loc 1 669 0
 2433 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 670:modem.c       ****         // Remove the need for this pin itterupt
 671:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 672:modem.c       ****         
 673:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 674:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2434              		.loc 1 674 0
 2435 0016 FFF7FEFF 		bl	modem_get_state
 2436 001a 0346     		mov	r3, r0
 2437 001c 032B     		cmp	r3, #3
 2438 001e 02D1     		bne	.L139
 675:modem.c       ****             CyDelay(100u);
 2439              		.loc 1 675 0
 2440 0020 6420     		movs	r0, #100
 2441 0022 FFF7FEFF 		bl	CyDelay
 2442              	.L139:
 676:modem.c       ****         }
 677:modem.c       ****      }
 678:modem.c       **** }
 2443              		.loc 1 678 0
 2444 0026 00BF     		nop
 2445 0028 80BD     		pop	{r7, pc}
 2446              		.cfi_endproc
 2447              	.LFE86:
 2448              		.size	modem_wakeup, .-modem_wakeup
 2449 002a 00BF     		.section	.rodata
 2450              		.align	2
 2451              	.LC65:
 2452 0608 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2452      50494F3D 
 2452      352C312C 
 2452      312C300D 
 2452      00
 2453 0619 000000   		.align	2
 2454              	.LC66:
 2455 061c 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2455      55504C53 
 2455      45433D31 
 2455      0D00
 2456 062a 0000     		.align	2
 2457              	.LC67:
 2458 062c 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2458      55504C56 
 2458      3D320D00 
 2459              		.align	2
 2460              	.LC68:
 2461 0638 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2461      47505345 
 2461      4E3D310D 
 2461      00
 2462 0645 000000   		.align	2
 2463              	.LC69:
 2464 0648 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2464      4C503D31 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 60


 2464      2C227375 
 2464      706C2E67 
 2464      6F6F676C 
 2465 0669 000000   		.align	2
 2466              	.LC70:
 2467 066c 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2467      47414354 
 2467      3D312C30 
 2467      0D0A00
 2468 067b 00       		.align	2
 2469              	.LC71:
 2470 067c 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2470      43534C4B 
 2470      3D312C31 
 2470      0D00
 2471 068a 0000     		.align	2
 2472              	.LC72:
 2473 068c 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2473      5053534C 
 2473      53523D31 
 2473      2C312C2C 
 2473      2C2C2C32 
 2474 06a2 0000     		.align	2
 2475              	.LC73:
 2476 06a4 4E00     		.ascii	"N\000"
 2477 06a6 0000     		.align	2
 2478              	.LC74:
 2479 06a8 41542447 		.ascii	"AT$GPSACP\015\000"
 2479      50534143 
 2479      500D00
 2480 06b3 00       		.align	2
 2481              	.LC75:
 2482 06b4 24475053 		.ascii	"$GPSACP: \000"
 2482      4143503A 
 2482      2000
 2483 06be 0000     		.align	2
 2484              	.LC76:
 2485 06c0 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2485      4143503A 
 2485      20252A66 
 2485      2C25664E 
 2485      2C256657 
 2486              		.global	__aeabi_fdiv
 2487              		.global	__aeabi_f2d
 2488              		.global	__aeabi_ddiv
 2489              		.global	__aeabi_dadd
 2490              		.global	__aeabi_d2f
 2491              		.align	2
 2492              	.LC77:
 2493 06e0 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2493      50494F3D 
 2493      352C302C 
 2493      312C300D 
 2493      00
 2494 06f1 000000   		.align	2
 2495              	.LC78:
 2496 06f4 41542447 		.ascii	"AT$GPSR=0\015\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 61


 2496      5053523D 
 2496      300D00
 2497 06ff 00       		.align	2
 2498              	.LC79:
 2499 0700 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2499      20746F20 
 2499      6C6F636B 
 2499      20475053 
 2499      3A202564 
 2500              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2501              		.align	2
 2502              		.global	modem_get_gps_coordinates
 2503              		.thumb
 2504              		.thumb_func
 2505              		.type	modem_get_gps_coordinates, %function
 2506              	modem_get_gps_coordinates:
 2507              	.LFB87:
 679:modem.c       **** 
 680:modem.c       ****     
 681:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 682:modem.c       **** gps_t modem_get_gps_coordinates(){
 2508              		.loc 1 682 0
 2509              		.cfi_startproc
 2510              		@ args = 0, pretend = 0, frame = 56
 2511              		@ frame_needed = 1, uses_anonymous_args = 0
 2512 0000 B0B5     		push	{r4, r5, r7, lr}
 2513              		.cfi_def_cfa_offset 16
 2514              		.cfi_offset 4, -16
 2515              		.cfi_offset 5, -12
 2516              		.cfi_offset 7, -8
 2517              		.cfi_offset 14, -4
 2518 0002 90B0     		sub	sp, sp, #64
 2519              		.cfi_def_cfa_offset 80
 2520 0004 02AF     		add	r7, sp, #8
 2521              		.cfi_def_cfa 7, 72
 2522 0006 7860     		str	r0, [r7, #4]
 683:modem.c       ****     gps_t gps;
 684:modem.c       ****     gps.altitude = 0;
 2523              		.loc 1 684 0
 2524 0008 4FF00003 		mov	r3, #0
 2525 000c FB61     		str	r3, [r7, #28]	@ float
 685:modem.c       ****     gps.longitude = 0;
 2526              		.loc 1 685 0
 2527 000e 4FF00003 		mov	r3, #0
 2528 0012 BB61     		str	r3, [r7, #24]	@ float
 686:modem.c       ****     gps.latitude = 0;
 2529              		.loc 1 686 0
 2530 0014 4FF00003 		mov	r3, #0
 2531 0018 7B61     		str	r3, [r7, #20]	@ float
 687:modem.c       ****     gps.time_to_lock =0;
 2532              		.loc 1 687 0
 2533 001a 0023     		movs	r3, #0
 2534 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 688:modem.c       ****     gps.valid = 0;
 2535              		.loc 1 688 0
 2536 001e 0023     		movs	r3, #0
 2537 0020 87F82230 		strb	r3, [r7, #34]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 62


 689:modem.c       ****     
 690:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 691:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2538              		.loc 1 691 0
 2539 0024 7F4B     		ldr	r3, .L150
 2540 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2541 0028 042B     		cmp	r3, #4
 2542 002a 07D0     		beq	.L141
 692:modem.c       ****         return gps;//where valid = 0
 2543              		.loc 1 692 0
 2544 002c 7B68     		ldr	r3, [r7, #4]
 2545 002e 1C46     		mov	r4, r3
 2546 0030 07F11403 		add	r3, r7, #20
 2547 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2548 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2549 003a EFE0     		b	.L140
 2550              	.L141:
 693:modem.c       ****     }
 694:modem.c       ****     
 695:modem.c       ****     long lock_time = getTimeStamp();
 2551              		.loc 1 695 0
 2552 003c FFF7FEFF 		bl	getTimeStamp
 2553 0040 3863     		str	r0, [r7, #48]
 696:modem.c       ****     
 697:modem.c       ****     // Enable this for the LTER module
 698:modem.c       ****     // Enable GPS Low-Dropout Regulator
 699:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2554              		.loc 1 699 0
 2555 0042 4FF4FA62 		mov	r2, #2000
 2556 0046 7849     		ldr	r1, .L150+4
 2557 0048 7848     		ldr	r0, .L150+8
 2558 004a FFF7FEFF 		bl	at_write_command
 700:modem.c       ****     
 701:modem.c       ****     // Configure SUPL connection params
 702:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2559              		.loc 1 702 0
 2560 004e 4FF4FA62 		mov	r2, #2000
 2561 0052 7549     		ldr	r1, .L150+4
 2562 0054 7648     		ldr	r0, .L150+12
 2563 0056 FFF7FEFF 		bl	at_write_command
 703:modem.c       ****     
 704:modem.c       ****     // Use SUPL2.0
 705:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2564              		.loc 1 705 0
 2565 005a 4FF4FA62 		mov	r2, #2000
 2566 005e 7249     		ldr	r1, .L150+4
 2567 0060 7448     		ldr	r0, .L150+16
 2568 0062 FFF7FEFF 		bl	at_write_command
 706:modem.c       ****     
 707:modem.c       ****     // Enable AGPS service
 708:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2569              		.loc 1 708 0
 2570 0066 4FF4FA62 		mov	r2, #2000
 2571 006a 6F49     		ldr	r1, .L150+4
 2572 006c 7248     		ldr	r0, .L150+20
 2573 006e FFF7FEFF 		bl	at_write_command
 709:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 63


 710:modem.c       ****     // Chose SUPL server, use google public service
 711:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2574              		.loc 1 711 0
 2575 0072 4FF4FA62 		mov	r2, #2000
 2576 0076 6C49     		ldr	r1, .L150+4
 2577 0078 7048     		ldr	r0, .L150+24
 2578 007a FFF7FEFF 		bl	at_write_command
 712:modem.c       ****     
 713:modem.c       ****     //pdp context has to be locked to carrier for this to work
 714:modem.c       ****     
 715:modem.c       ****     // Unlock context since it needs to be used by modem
 716:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2579              		.loc 1 716 0
 2580 007e 4FF4FA62 		mov	r2, #2000
 2581 0082 6949     		ldr	r1, .L150+4
 2582 0084 6E48     		ldr	r0, .L150+28
 2583 0086 FFF7FEFF 		bl	at_write_command
 717:modem.c       ****     
 718:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2584              		.loc 1 718 0
 2585 008a 4FF4FA62 		mov	r2, #2000
 2586 008e 6649     		ldr	r1, .L150+4
 2587 0090 6C48     		ldr	r0, .L150+32
 2588 0092 FFF7FEFF 		bl	at_write_command
 719:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 720:modem.c       ****     
 721:modem.c       ****     // Relock the context
 722:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2589              		.loc 1 722 0
 2590 0096 42F21072 		movw	r2, #10000
 2591 009a 6349     		ldr	r1, .L150+4
 2592 009c 6A48     		ldr	r0, .L150+36
 2593 009e FFF7FEFF 		bl	at_write_command
 723:modem.c       ****     
 724:modem.c       ****     //start AGPS service
 725:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2594              		.loc 1 725 0
 2595 00a2 4FF4FA62 		mov	r2, #2000
 2596 00a6 6049     		ldr	r1, .L150+4
 2597 00a8 6848     		ldr	r0, .L150+40
 2598 00aa FFF7FEFF 		bl	at_write_command
 726:modem.c       ****     
 727:modem.c       ****     
 728:modem.c       ****     // Start the AGPS service
 729:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 730:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 731:modem.c       ****     
 732:modem.c       ****     
 733:modem.c       ****  
 734:modem.c       ****     uint8 gps_status = 0;
 2599              		.loc 1 734 0
 2600 00ae 0023     		movs	r3, #0
 2601 00b0 87F82F30 		strb	r3, [r7, #47]
 2602              	.LBB11:
 735:modem.c       ****     for(uint16 i=0;i<200;i++){
 2603              		.loc 1 735 0
 2604 00b4 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 64


 2605 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2606 00b8 13E0     		b	.L143
 2607              	.L146:
 736:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2608              		.loc 1 736 0
 2609 00ba 4FF4FA62 		mov	r2, #2000
 2610 00be 6449     		ldr	r1, .L150+44
 2611 00c0 6448     		ldr	r0, .L150+48
 2612 00c2 FFF7FEFF 		bl	at_write_command
 2613 00c6 0346     		mov	r3, r0
 2614 00c8 87F82F30 		strb	r3, [r7, #47]
 737:modem.c       ****         if(gps_status){
 2615              		.loc 1 737 0
 2616 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2617 00d0 002B     		cmp	r3, #0
 2618 00d2 0AD1     		bne	.L149
 738:modem.c       ****             break;   
 739:modem.c       ****         }
 740:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2619              		.loc 1 740 0 discriminator 2
 2620 00d4 4FF47A70 		mov	r0, #1000
 2621 00d8 FFF7FEFF 		bl	CyDelay
 735:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2622              		.loc 1 735 0 discriminator 2
 2623 00dc FB8E     		ldrh	r3, [r7, #54]
 2624 00de 0133     		adds	r3, r3, #1
 2625 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2626              	.L143:
 735:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2627              		.loc 1 735 0 is_stmt 0 discriminator 1
 2628 00e2 FB8E     		ldrh	r3, [r7, #54]
 2629 00e4 C72B     		cmp	r3, #199
 2630 00e6 E8D9     		bls	.L146
 2631 00e8 00E0     		b	.L145
 2632              	.L149:
 738:modem.c       ****             break;   
 2633              		.loc 1 738 0 is_stmt 1
 2634 00ea 00BF     		nop
 2635              	.L145:
 2636              	.LBE11:
 741:modem.c       ****     }
 742:modem.c       ****     
 743:modem.c       ****     //parse data here
 744:modem.c       ****     
 745:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 746:modem.c       ****     float lat;
 747:modem.c       ****     float lon;
 748:modem.c       ****     float alt;
 749:modem.c       ****     
 750:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 751:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 752:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2637              		.loc 1 752 0
 2638 00ec 5A49     		ldr	r1, .L150+52
 2639 00ee 5B48     		ldr	r0, .L150+56
 2640 00f0 FFF7FEFF 		bl	strstr
 2641 00f4 B862     		str	r0, [r7, #40]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 65


 753:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 754:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 755:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2642              		.loc 1 755 0
 2643 00f6 07F10C01 		add	r1, r7, #12
 2644 00fa 07F11002 		add	r2, r7, #16
 2645 00fe 07F10803 		add	r3, r7, #8
 2646 0102 0093     		str	r3, [sp]
 2647 0104 0B46     		mov	r3, r1
 2648 0106 5649     		ldr	r1, .L150+60
 2649 0108 B86A     		ldr	r0, [r7, #40]
 2650 010a FFF7FEFF 		bl	sscanf
 2651 010e 7862     		str	r0, [r7, #36]
 756:modem.c       ****     if(match >= 3){
 2652              		.loc 1 756 0
 2653 0110 7B6A     		ldr	r3, [r7, #36]
 2654 0112 022B     		cmp	r3, #2
 2655 0114 60DD     		ble	.L147
 757:modem.c       ****         // Calculate lat and lon
 758:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 759:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 760:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2656              		.loc 1 760 0
 2657 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2658 0118 5249     		ldr	r1, .L150+64
 2659 011a 1846     		mov	r0, r3
 2660 011c FFF7FEFF 		bl	__aeabi_fdiv
 2661 0120 0346     		mov	r3, r0
 2662 0122 1846     		mov	r0, r3
 2663 0124 FFF7FEFF 		bl	floorf
 2664 0128 0346     		mov	r3, r0
 2665 012a 1846     		mov	r0, r3
 2666 012c FFF7FEFF 		bl	__aeabi_f2d
 2667 0130 0446     		mov	r4, r0
 2668 0132 0D46     		mov	r5, r1
 2669 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2670 0136 1846     		mov	r0, r3
 2671 0138 FFF7FEFF 		bl	__aeabi_f2d
 2672 013c 4FF00002 		mov	r2, #0
 2673 0140 494B     		ldr	r3, .L150+68
 2674 0142 FFF7FEFF 		bl	fmod
 2675 0146 4FF00002 		mov	r2, #0
 2676 014a 484B     		ldr	r3, .L150+72
 2677 014c FFF7FEFF 		bl	__aeabi_ddiv
 2678 0150 0246     		mov	r2, r0
 2679 0152 0B46     		mov	r3, r1
 2680 0154 2046     		mov	r0, r4
 2681 0156 2946     		mov	r1, r5
 2682 0158 FFF7FEFF 		bl	__aeabi_dadd
 2683 015c 0346     		mov	r3, r0
 2684 015e 0C46     		mov	r4, r1
 2685 0160 1846     		mov	r0, r3
 2686 0162 2146     		mov	r1, r4
 2687 0164 FFF7FEFF 		bl	__aeabi_d2f
 2688 0168 0346     		mov	r3, r0
 2689 016a 3B61     		str	r3, [r7, #16]	@ float
 761:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 66


 2690              		.loc 1 761 0
 2691 016c FB68     		ldr	r3, [r7, #12]	@ float
 2692 016e 3D49     		ldr	r1, .L150+64
 2693 0170 1846     		mov	r0, r3
 2694 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2695 0176 0346     		mov	r3, r0
 2696 0178 1846     		mov	r0, r3
 2697 017a FFF7FEFF 		bl	floorf
 2698 017e 0346     		mov	r3, r0
 2699 0180 1846     		mov	r0, r3
 2700 0182 FFF7FEFF 		bl	__aeabi_f2d
 2701 0186 0446     		mov	r4, r0
 2702 0188 0D46     		mov	r5, r1
 2703 018a FB68     		ldr	r3, [r7, #12]	@ float
 2704 018c 1846     		mov	r0, r3
 2705 018e FFF7FEFF 		bl	__aeabi_f2d
 2706 0192 4FF00002 		mov	r2, #0
 2707 0196 344B     		ldr	r3, .L150+68
 2708 0198 FFF7FEFF 		bl	fmod
 2709 019c 4FF00002 		mov	r2, #0
 2710 01a0 324B     		ldr	r3, .L150+72
 2711 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2712 01a6 0246     		mov	r2, r0
 2713 01a8 0B46     		mov	r3, r1
 2714 01aa 2046     		mov	r0, r4
 2715 01ac 2946     		mov	r1, r5
 2716 01ae FFF7FEFF 		bl	__aeabi_dadd
 2717 01b2 0346     		mov	r3, r0
 2718 01b4 0C46     		mov	r4, r1
 2719 01b6 1846     		mov	r0, r3
 2720 01b8 2146     		mov	r1, r4
 2721 01ba FFF7FEFF 		bl	__aeabi_d2f
 2722 01be 0346     		mov	r3, r0
 2723 01c0 83F00043 		eor	r3, r3, #-2147483648
 2724 01c4 FB60     		str	r3, [r7, #12]	@ float
 762:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2725              		.loc 1 762 0
 2726 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2727 01c8 FB61     		str	r3, [r7, #28]	@ float
 763:modem.c       ****         gps.latitude = lat;
 2728              		.loc 1 763 0
 2729 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2730 01cc 7B61     		str	r3, [r7, #20]	@ float
 764:modem.c       ****         gps.longitude = lon;
 2731              		.loc 1 764 0
 2732 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2733 01d0 BB61     		str	r3, [r7, #24]	@ float
 765:modem.c       ****         gps.valid = 1;
 2734              		.loc 1 765 0
 2735 01d2 0123     		movs	r3, #1
 2736 01d4 87F82230 		strb	r3, [r7, #34]
 2737              	.L147:
 766:modem.c       ****     }
 767:modem.c       ****     
 768:modem.c       ****     // Disable LDO, just in case
 769:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2738              		.loc 1 769 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 67


 2739 01d8 4FF4FA62 		mov	r2, #2000
 2740 01dc 1249     		ldr	r1, .L150+4
 2741 01de 2448     		ldr	r0, .L150+76
 2742 01e0 FFF7FEFF 		bl	at_write_command
 770:modem.c       ****     
 771:modem.c       ****     // Flush modem's GPS data, just in case
 772:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2743              		.loc 1 772 0
 2744 01e4 4FF4FA62 		mov	r2, #2000
 2745 01e8 0F49     		ldr	r1, .L150+4
 2746 01ea 2248     		ldr	r0, .L150+80
 2747 01ec FFF7FEFF 		bl	at_write_command
 773:modem.c       ****     
 774:modem.c       ****     
 775:modem.c       ****     
 776:modem.c       ****     
 777:modem.c       ****     
 778:modem.c       ****     /* Relevant to 3g modem, can ignore
 779:modem.c       ****     
 780:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 781:modem.c       ****     //AT$GPSQOS=50,50,100,0
 782:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 783:modem.c       ****     
 784:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 785:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 786:modem.c       ****     
 787:modem.c       ****     //unlock contedt, simnce its being used by modem
 788:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 789:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 790:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 791:modem.c       ****     
 792:modem.c       ****     //unlock contedt, simnce its being used by modem
 793:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 794:modem.c       ****     
 795:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 796:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 797:modem.c       ****     
 798:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 799:modem.c       ****    uint8 gps_status = 0;
 800:modem.c       ****     for(uint16 i=0;i<200;i++){
 801:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 802:modem.c       ****         if(gps_status){
 803:modem.c       ****             break;   
 804:modem.c       ****         }
 805:modem.c       ****   }
 806:modem.c       ****     
 807:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 808:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 809:modem.c       ****     if(gps_status){
 810:modem.c       ****         float lat,lon,alt = 0;
 811:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 812:modem.c       ****             gps.altitude = alt;
 813:modem.c       ****             gps.latitude = lat/60;
 814:modem.c       ****             gps.longitude = lon/60;
 815:modem.c       ****             gps.valid = 1;
 816:modem.c       ****         }
 817:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 68


 818:modem.c       ****     }
 819:modem.c       ****     
 820:modem.c       ****     //turn off gps
 821:modem.c       ****     //AT$GPSP=0
 822:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 823:modem.c       ****     
 824:modem.c       ****     */
 825:modem.c       **** 
 826:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 827:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2748              		.loc 1 827 0
 2749 01f0 FFF7FEFF 		bl	getTimeStamp
 2750 01f4 0246     		mov	r2, r0
 2751 01f6 3B6B     		ldr	r3, [r7, #48]
 2752 01f8 D31A     		subs	r3, r2, r3
 2753 01fa 3B63     		str	r3, [r7, #48]
 828:modem.c       ****     gps.time_to_lock = lock_time;
 2754              		.loc 1 828 0
 2755 01fc 3B6B     		ldr	r3, [r7, #48]
 2756 01fe 9BB2     		uxth	r3, r3
 2757 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 829:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2758              		.loc 1 829 0
 2759 0202 3B8C     		ldrh	r3, [r7, #32]
 2760 0204 1A46     		mov	r2, r3
 2761 0206 1C49     		ldr	r1, .L150+84
 2762 0208 0020     		movs	r0, #0
 2763 020a FFF7FEFF 		bl	printNotif
 830:modem.c       ****     
 831:modem.c       ****     return gps;
 2764              		.loc 1 831 0
 2765 020e 7B68     		ldr	r3, [r7, #4]
 2766 0210 1C46     		mov	r4, r3
 2767 0212 07F11403 		add	r3, r7, #20
 2768 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2769 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2770              	.L140:
 832:modem.c       ****     
 833:modem.c       **** }
 2771              		.loc 1 833 0
 2772 021c 7868     		ldr	r0, [r7, #4]
 2773 021e 3837     		adds	r7, r7, #56
 2774              		.cfi_def_cfa_offset 16
 2775 0220 BD46     		mov	sp, r7
 2776              		.cfi_def_cfa_register 13
 2777              		@ sp needed
 2778 0222 B0BD     		pop	{r4, r5, r7, pc}
 2779              	.L151:
 2780              		.align	2
 2781              	.L150:
 2782 0224 00000000 		.word	modem_state
 2783 0228 00000000 		.word	.LC0
 2784 022c 08060000 		.word	.LC65
 2785 0230 1C060000 		.word	.LC66
 2786 0234 2C060000 		.word	.LC67
 2787 0238 38060000 		.word	.LC68
 2788 023c 48060000 		.word	.LC69
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 69


 2789 0240 6C060000 		.word	.LC70
 2790 0244 7C060000 		.word	.LC71
 2791 0248 A8020000 		.word	.LC26
 2792 024c 8C060000 		.word	.LC72
 2793 0250 A4060000 		.word	.LC73
 2794 0254 A8060000 		.word	.LC74
 2795 0258 B4060000 		.word	.LC75
 2796 025c 00000000 		.word	uart_received_string
 2797 0260 C0060000 		.word	.LC76
 2798 0264 0000C842 		.word	1120403456
 2799 0268 00005940 		.word	1079574528
 2800 026c 00004E40 		.word	1078853632
 2801 0270 E0060000 		.word	.LC77
 2802 0274 F4060000 		.word	.LC78
 2803 0278 00070000 		.word	.LC79
 2804              		.cfi_endproc
 2805              	.LFE87:
 2806              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2807              		.text
 2808              	.Letext0:
 2809              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2810              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2811              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2812              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2813              		.file 6 "testing.h"
 2814              		.file 7 "data.h"
 2815              		.file 8 "modem.h"
 2816              		.file 9 "notoriOS.h"
 2817              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2818              		.section	.debug_info,"",%progbits
 2819              	.Ldebug_info0:
 2820 0000 D20B0000 		.4byte	0xbd2
 2821 0004 0400     		.2byte	0x4
 2822 0006 00000000 		.4byte	.Ldebug_abbrev0
 2823 000a 04       		.byte	0x4
 2824 000b 01       		.uleb128 0x1
 2825 000c 64000000 		.4byte	.LASF159
 2826 0010 0C       		.byte	0xc
 2827 0011 D7030000 		.4byte	.LASF160
 2828 0015 CE050000 		.4byte	.LASF161
 2829 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2830 001d 00000000 		.4byte	0
 2831 0021 00000000 		.4byte	.Ldebug_line0
 2832 0025 02       		.uleb128 0x2
 2833 0026 01       		.byte	0x1
 2834 0027 06       		.byte	0x6
 2835 0028 67010000 		.4byte	.LASF0
 2836 002c 03       		.uleb128 0x3
 2837 002d 38000000 		.4byte	.LASF4
 2838 0031 02       		.byte	0x2
 2839 0032 1D       		.byte	0x1d
 2840 0033 37000000 		.4byte	0x37
 2841 0037 02       		.uleb128 0x2
 2842 0038 01       		.byte	0x1
 2843 0039 08       		.byte	0x8
 2844 003a A5050000 		.4byte	.LASF1
 2845 003e 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 70


 2846 003f 02       		.byte	0x2
 2847 0040 05       		.byte	0x5
 2848 0041 0F040000 		.4byte	.LASF2
 2849 0045 02       		.uleb128 0x2
 2850 0046 02       		.byte	0x2
 2851 0047 07       		.byte	0x7
 2852 0048 75020000 		.4byte	.LASF3
 2853 004c 03       		.uleb128 0x3
 2854 004d 24040000 		.4byte	.LASF5
 2855 0051 02       		.byte	0x2
 2856 0052 3F       		.byte	0x3f
 2857 0053 57000000 		.4byte	0x57
 2858 0057 02       		.uleb128 0x2
 2859 0058 04       		.byte	0x4
 2860 0059 05       		.byte	0x5
 2861 005a EF010000 		.4byte	.LASF6
 2862 005e 03       		.uleb128 0x3
 2863 005f 98020000 		.4byte	.LASF7
 2864 0063 02       		.byte	0x2
 2865 0064 41       		.byte	0x41
 2866 0065 69000000 		.4byte	0x69
 2867 0069 02       		.uleb128 0x2
 2868 006a 04       		.byte	0x4
 2869 006b 07       		.byte	0x7
 2870 006c 44030000 		.4byte	.LASF8
 2871 0070 02       		.uleb128 0x2
 2872 0071 08       		.byte	0x8
 2873 0072 05       		.byte	0x5
 2874 0073 59010000 		.4byte	.LASF9
 2875 0077 02       		.uleb128 0x2
 2876 0078 08       		.byte	0x8
 2877 0079 07       		.byte	0x7
 2878 007a FF000000 		.4byte	.LASF10
 2879 007e 04       		.uleb128 0x4
 2880 007f 04       		.byte	0x4
 2881 0080 05       		.byte	0x5
 2882 0081 696E7400 		.ascii	"int\000"
 2883 0085 02       		.uleb128 0x2
 2884 0086 04       		.byte	0x4
 2885 0087 07       		.byte	0x7
 2886 0088 B8060000 		.4byte	.LASF11
 2887 008c 03       		.uleb128 0x3
 2888 008d EF070000 		.4byte	.LASF12
 2889 0091 03       		.byte	0x3
 2890 0092 18       		.byte	0x18
 2891 0093 2C000000 		.4byte	0x2c
 2892 0097 03       		.uleb128 0x3
 2893 0098 9D050000 		.4byte	.LASF13
 2894 009c 03       		.byte	0x3
 2895 009d 2C       		.byte	0x2c
 2896 009e 4C000000 		.4byte	0x4c
 2897 00a2 03       		.uleb128 0x3
 2898 00a3 7F070000 		.4byte	.LASF14
 2899 00a7 03       		.byte	0x3
 2900 00a8 30       		.byte	0x30
 2901 00a9 5E000000 		.4byte	0x5e
 2902 00ad 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 71


 2903 00ae 27020000 		.4byte	.LASF15
 2904 00b2 04       		.byte	0x4
 2905 00b3 9201     		.2byte	0x192
 2906 00b5 37000000 		.4byte	0x37
 2907 00b9 05       		.uleb128 0x5
 2908 00ba 0B000000 		.4byte	.LASF16
 2909 00be 04       		.byte	0x4
 2910 00bf 9301     		.2byte	0x193
 2911 00c1 45000000 		.4byte	0x45
 2912 00c5 05       		.uleb128 0x5
 2913 00c6 88020000 		.4byte	.LASF17
 2914 00ca 04       		.byte	0x4
 2915 00cb 9401     		.2byte	0x194
 2916 00cd 69000000 		.4byte	0x69
 2917 00d1 05       		.uleb128 0x5
 2918 00d2 F7070000 		.4byte	.LASF18
 2919 00d6 04       		.byte	0x4
 2920 00d7 9601     		.2byte	0x196
 2921 00d9 3E000000 		.4byte	0x3e
 2922 00dd 05       		.uleb128 0x5
 2923 00de 34020000 		.4byte	.LASF19
 2924 00e2 04       		.byte	0x4
 2925 00e3 9701     		.2byte	0x197
 2926 00e5 57000000 		.4byte	0x57
 2927 00e9 02       		.uleb128 0x2
 2928 00ea 04       		.byte	0x4
 2929 00eb 04       		.byte	0x4
 2930 00ec 56050000 		.4byte	.LASF20
 2931 00f0 02       		.uleb128 0x2
 2932 00f1 08       		.byte	0x8
 2933 00f2 04       		.byte	0x4
 2934 00f3 2D020000 		.4byte	.LASF21
 2935 00f7 02       		.uleb128 0x2
 2936 00f8 01       		.byte	0x1
 2937 00f9 08       		.byte	0x8
 2938 00fa 9F060000 		.4byte	.LASF22
 2939 00fe 02       		.uleb128 0x2
 2940 00ff 08       		.byte	0x8
 2941 0100 04       		.byte	0x4
 2942 0101 93060000 		.4byte	.LASF23
 2943 0105 02       		.uleb128 0x2
 2944 0106 04       		.byte	0x4
 2945 0107 07       		.byte	0x7
 2946 0108 A6040000 		.4byte	.LASF24
 2947 010c 06       		.uleb128 0x6
 2948 010d 04       		.byte	0x4
 2949 010e F7000000 		.4byte	0xf7
 2950 0112 06       		.uleb128 0x6
 2951 0113 04       		.byte	0x4
 2952 0114 18010000 		.4byte	0x118
 2953 0118 07       		.uleb128 0x7
 2954 0119 F7000000 		.4byte	0xf7
 2955 011d 08       		.uleb128 0x8
 2956 011e F7000000 		.4byte	0xf7
 2957 0122 2D010000 		.4byte	0x12d
 2958 0126 09       		.uleb128 0x9
 2959 0127 05010000 		.4byte	0x105
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 72


 2960 012b 17       		.byte	0x17
 2961 012c 00       		.byte	0
 2962 012d 0A       		.uleb128 0xa
 2963 012e 746D00   		.ascii	"tm\000"
 2964 0131 24       		.byte	0x24
 2965 0132 05       		.byte	0x5
 2966 0133 21       		.byte	0x21
 2967 0134 A5010000 		.4byte	0x1a5
 2968 0138 0B       		.uleb128 0xb
 2969 0139 88070000 		.4byte	.LASF25
 2970 013d 05       		.byte	0x5
 2971 013e 23       		.byte	0x23
 2972 013f 7E000000 		.4byte	0x7e
 2973 0143 00       		.byte	0
 2974 0144 0B       		.uleb128 0xb
 2975 0145 9F040000 		.4byte	.LASF26
 2976 0149 05       		.byte	0x5
 2977 014a 24       		.byte	0x24
 2978 014b 7E000000 		.4byte	0x7e
 2979 014f 04       		.byte	0x4
 2980 0150 0B       		.uleb128 0xb
 2981 0151 18000000 		.4byte	.LASF27
 2982 0155 05       		.byte	0x5
 2983 0156 25       		.byte	0x25
 2984 0157 7E000000 		.4byte	0x7e
 2985 015b 08       		.byte	0x8
 2986 015c 0B       		.uleb128 0xb
 2987 015d 6A070000 		.4byte	.LASF28
 2988 0161 05       		.byte	0x5
 2989 0162 26       		.byte	0x26
 2990 0163 7E000000 		.4byte	0x7e
 2991 0167 0C       		.byte	0xc
 2992 0168 0B       		.uleb128 0xb
 2993 0169 BA020000 		.4byte	.LASF29
 2994 016d 05       		.byte	0x5
 2995 016e 27       		.byte	0x27
 2996 016f 7E000000 		.4byte	0x7e
 2997 0173 10       		.byte	0x10
 2998 0174 0B       		.uleb128 0xb
 2999 0175 06030000 		.4byte	.LASF30
 3000 0179 05       		.byte	0x5
 3001 017a 28       		.byte	0x28
 3002 017b 7E000000 		.4byte	0x7e
 3003 017f 14       		.byte	0x14
 3004 0180 0B       		.uleb128 0xb
 3005 0181 74060000 		.4byte	.LASF31
 3006 0185 05       		.byte	0x5
 3007 0186 29       		.byte	0x29
 3008 0187 7E000000 		.4byte	0x7e
 3009 018b 18       		.byte	0x18
 3010 018c 0B       		.uleb128 0xb
 3011 018d 20000000 		.4byte	.LASF32
 3012 0191 05       		.byte	0x5
 3013 0192 2A       		.byte	0x2a
 3014 0193 7E000000 		.4byte	0x7e
 3015 0197 1C       		.byte	0x1c
 3016 0198 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 73


 3017 0199 9E030000 		.4byte	.LASF33
 3018 019d 05       		.byte	0x5
 3019 019e 2B       		.byte	0x2b
 3020 019f 7E000000 		.4byte	0x7e
 3021 01a3 20       		.byte	0x20
 3022 01a4 00       		.byte	0
 3023 01a5 0C       		.uleb128 0xc
 3024 01a6 8101     		.2byte	0x181
 3025 01a8 06       		.byte	0x6
 3026 01a9 0A       		.byte	0xa
 3027 01aa D3010000 		.4byte	0x1d3
 3028 01ae 0B       		.uleb128 0xb
 3029 01af F0040000 		.4byte	.LASF34
 3030 01b3 06       		.byte	0x6
 3031 01b4 0C       		.byte	0xc
 3032 01b5 D3010000 		.4byte	0x1d3
 3033 01b9 00       		.byte	0
 3034 01ba 0B       		.uleb128 0xb
 3035 01bb C0070000 		.4byte	.LASF35
 3036 01bf 06       		.byte	0x6
 3037 01c0 0D       		.byte	0xd
 3038 01c1 AD000000 		.4byte	0xad
 3039 01c5 80       		.byte	0x80
 3040 01c6 0B       		.uleb128 0xb
 3041 01c7 48060000 		.4byte	.LASF36
 3042 01cb 06       		.byte	0x6
 3043 01cc 0F       		.byte	0xf
 3044 01cd E3010000 		.4byte	0x1e3
 3045 01d1 81       		.byte	0x81
 3046 01d2 00       		.byte	0
 3047 01d3 08       		.uleb128 0x8
 3048 01d4 F7000000 		.4byte	0xf7
 3049 01d8 E3010000 		.4byte	0x1e3
 3050 01dc 09       		.uleb128 0x9
 3051 01dd 05010000 		.4byte	0x105
 3052 01e1 7F       		.byte	0x7f
 3053 01e2 00       		.byte	0
 3054 01e3 08       		.uleb128 0x8
 3055 01e4 F7000000 		.4byte	0xf7
 3056 01e8 F3010000 		.4byte	0x1f3
 3057 01ec 09       		.uleb128 0x9
 3058 01ed 05010000 		.4byte	0x105
 3059 01f1 FF       		.byte	0xff
 3060 01f2 00       		.byte	0
 3061 01f3 03       		.uleb128 0x3
 3062 01f4 30060000 		.4byte	.LASF37
 3063 01f8 06       		.byte	0x6
 3064 01f9 10       		.byte	0x10
 3065 01fa A5010000 		.4byte	0x1a5
 3066 01fe 0D       		.uleb128 0xd
 3067 01ff 2C       		.byte	0x2c
 3068 0200 07       		.byte	0x7
 3069 0201 14       		.byte	0x14
 3070 0202 2B020000 		.4byte	0x22b
 3071 0206 0E       		.uleb128 0xe
 3072 0207 6B657900 		.ascii	"key\000"
 3073 020b 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 74


 3074 020c 15       		.byte	0x15
 3075 020d 2B020000 		.4byte	0x22b
 3076 0211 00       		.byte	0
 3077 0212 0B       		.uleb128 0xb
 3078 0213 12000000 		.4byte	.LASF38
 3079 0217 07       		.byte	0x7
 3080 0218 16       		.byte	0x16
 3081 0219 2B020000 		.4byte	0x22b
 3082 021d 14       		.byte	0x14
 3083 021e 0B       		.uleb128 0xb
 3084 021f 61080000 		.4byte	.LASF39
 3085 0223 07       		.byte	0x7
 3086 0224 17       		.byte	0x17
 3087 0225 DD000000 		.4byte	0xdd
 3088 0229 28       		.byte	0x28
 3089 022a 00       		.byte	0
 3090 022b 08       		.uleb128 0x8
 3091 022c F7000000 		.4byte	0xf7
 3092 0230 3B020000 		.4byte	0x23b
 3093 0234 09       		.uleb128 0x9
 3094 0235 05010000 		.4byte	0x105
 3095 0239 13       		.byte	0x13
 3096 023a 00       		.byte	0
 3097 023b 03       		.uleb128 0x3
 3098 023c 2E030000 		.4byte	.LASF40
 3099 0240 07       		.byte	0x7
 3100 0241 19       		.byte	0x19
 3101 0242 FE010000 		.4byte	0x1fe
 3102 0246 0D       		.uleb128 0xd
 3103 0247 3C       		.byte	0x3c
 3104 0248 08       		.byte	0x8
 3105 0249 37       		.byte	0x37
 3106 024a 73020000 		.4byte	0x273
 3107 024e 0B       		.uleb128 0xb
 3108 024f 63070000 		.4byte	.LASF41
 3109 0253 08       		.byte	0x8
 3110 0254 38       		.byte	0x38
 3111 0255 2B020000 		.4byte	0x22b
 3112 0259 00       		.byte	0
 3113 025a 0B       		.uleb128 0xb
 3114 025b CA060000 		.4byte	.LASF42
 3115 025f 08       		.byte	0x8
 3116 0260 39       		.byte	0x39
 3117 0261 2B020000 		.4byte	0x22b
 3118 0265 14       		.byte	0x14
 3119 0266 0B       		.uleb128 0xb
 3120 0267 43060000 		.4byte	.LASF43
 3121 026b 08       		.byte	0x8
 3122 026c 3A       		.byte	0x3a
 3123 026d 2B020000 		.4byte	0x22b
 3124 0271 28       		.byte	0x28
 3125 0272 00       		.byte	0
 3126 0273 03       		.uleb128 0x3
 3127 0274 DE060000 		.4byte	.LASF44
 3128 0278 08       		.byte	0x8
 3129 0279 3C       		.byte	0x3c
 3130 027a 46020000 		.4byte	0x246
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 75


 3131 027e 0D       		.uleb128 0xd
 3132 027f 20       		.byte	0x20
 3133 0280 08       		.byte	0x8
 3134 0281 3E       		.byte	0x3e
 3135 0282 E7020000 		.4byte	0x2e7
 3136 0286 0B       		.uleb128 0xb
 3137 0287 E9010000 		.4byte	.LASF45
 3138 028b 08       		.byte	0x8
 3139 028c 3F       		.byte	0x3f
 3140 028d 7E000000 		.4byte	0x7e
 3141 0291 00       		.byte	0
 3142 0292 0E       		.uleb128 0xe
 3143 0293 62657200 		.ascii	"ber\000"
 3144 0297 08       		.byte	0x8
 3145 0298 40       		.byte	0x40
 3146 0299 7E000000 		.4byte	0x7e
 3147 029d 04       		.byte	0x4
 3148 029e 0B       		.uleb128 0xb
 3149 029f 11060000 		.4byte	.LASF46
 3150 02a3 08       		.byte	0x8
 3151 02a4 41       		.byte	0x41
 3152 02a5 7E000000 		.4byte	0x7e
 3153 02a9 08       		.byte	0x8
 3154 02aa 0B       		.uleb128 0xb
 3155 02ab 73010000 		.4byte	.LASF47
 3156 02af 08       		.byte	0x8
 3157 02b0 42       		.byte	0x42
 3158 02b1 7E000000 		.4byte	0x7e
 3159 02b5 0C       		.byte	0xc
 3160 02b6 0B       		.uleb128 0xb
 3161 02b7 C9050000 		.4byte	.LASF48
 3162 02bb 08       		.byte	0x8
 3163 02bc 43       		.byte	0x43
 3164 02bd 7E000000 		.4byte	0x7e
 3165 02c1 10       		.byte	0x10
 3166 02c2 0B       		.uleb128 0xb
 3167 02c3 4F060000 		.4byte	.LASF49
 3168 02c7 08       		.byte	0x8
 3169 02c8 44       		.byte	0x44
 3170 02c9 7E000000 		.4byte	0x7e
 3171 02cd 14       		.byte	0x14
 3172 02ce 0B       		.uleb128 0xb
 3173 02cf 95010000 		.4byte	.LASF50
 3174 02d3 08       		.byte	0x8
 3175 02d4 45       		.byte	0x45
 3176 02d5 7E000000 		.4byte	0x7e
 3177 02d9 18       		.byte	0x18
 3178 02da 0B       		.uleb128 0xb
 3179 02db F2030000 		.4byte	.LASF51
 3180 02df 08       		.byte	0x8
 3181 02e0 46       		.byte	0x46
 3182 02e1 7E000000 		.4byte	0x7e
 3183 02e5 1C       		.byte	0x1c
 3184 02e6 00       		.byte	0
 3185 02e7 03       		.uleb128 0x3
 3186 02e8 54060000 		.4byte	.LASF52
 3187 02ec 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 76


 3188 02ed 48       		.byte	0x48
 3189 02ee 7E020000 		.4byte	0x27e
 3190 02f2 0D       		.uleb128 0xd
 3191 02f3 10       		.byte	0x10
 3192 02f4 08       		.byte	0x8
 3193 02f5 4A       		.byte	0x4a
 3194 02f6 37030000 		.4byte	0x337
 3195 02fa 0B       		.uleb128 0xb
 3196 02fb E7040000 		.4byte	.LASF53
 3197 02ff 08       		.byte	0x8
 3198 0300 4B       		.byte	0x4b
 3199 0301 E9000000 		.4byte	0xe9
 3200 0305 00       		.byte	0
 3201 0306 0B       		.uleb128 0xb
 3202 0307 5A000000 		.4byte	.LASF54
 3203 030b 08       		.byte	0x8
 3204 030c 4C       		.byte	0x4c
 3205 030d E9000000 		.4byte	0xe9
 3206 0311 04       		.byte	0x4
 3207 0312 0B       		.uleb128 0xb
 3208 0313 1E020000 		.4byte	.LASF55
 3209 0317 08       		.byte	0x8
 3210 0318 4D       		.byte	0x4d
 3211 0319 E9000000 		.4byte	0xe9
 3212 031d 08       		.byte	0x8
 3213 031e 0B       		.uleb128 0xb
 3214 031f 84030000 		.4byte	.LASF56
 3215 0323 08       		.byte	0x8
 3216 0324 4E       		.byte	0x4e
 3217 0325 B9000000 		.4byte	0xb9
 3218 0329 0C       		.byte	0xc
 3219 032a 0B       		.uleb128 0xb
 3220 032b 72070000 		.4byte	.LASF57
 3221 032f 08       		.byte	0x8
 3222 0330 4F       		.byte	0x4f
 3223 0331 AD000000 		.4byte	0xad
 3224 0335 0E       		.byte	0xe
 3225 0336 00       		.byte	0
 3226 0337 03       		.uleb128 0x3
 3227 0338 EB060000 		.4byte	.LASF58
 3228 033c 08       		.byte	0x8
 3229 033d 51       		.byte	0x51
 3230 033e F2020000 		.4byte	0x2f2
 3231 0342 0D       		.uleb128 0xd
 3232 0343 05       		.byte	0x5
 3233 0344 08       		.byte	0x8
 3234 0345 54       		.byte	0x54
 3235 0346 87030000 		.4byte	0x387
 3236 034a 0B       		.uleb128 0xb
 3237 034b 3A020000 		.4byte	.LASF59
 3238 034f 08       		.byte	0x8
 3239 0350 56       		.byte	0x56
 3240 0351 AD000000 		.4byte	0xad
 3241 0355 00       		.byte	0
 3242 0356 0B       		.uleb128 0xb
 3243 0357 7B050000 		.4byte	.LASF60
 3244 035b 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 77


 3245 035c 58       		.byte	0x58
 3246 035d 87030000 		.4byte	0x387
 3247 0361 01       		.byte	0x1
 3248 0362 0B       		.uleb128 0xb
 3249 0363 03070000 		.4byte	.LASF61
 3250 0367 08       		.byte	0x8
 3251 0368 5A       		.byte	0x5a
 3252 0369 AD000000 		.4byte	0xad
 3253 036d 02       		.byte	0x2
 3254 036e 0B       		.uleb128 0xb
 3255 036f FB050000 		.4byte	.LASF62
 3256 0373 08       		.byte	0x8
 3257 0374 5C       		.byte	0x5c
 3258 0375 AD000000 		.4byte	0xad
 3259 0379 03       		.byte	0x3
 3260 037a 0B       		.uleb128 0xb
 3261 037b C1020000 		.4byte	.LASF63
 3262 037f 08       		.byte	0x8
 3263 0380 5F       		.byte	0x5f
 3264 0381 AD000000 		.4byte	0xad
 3265 0385 04       		.byte	0x4
 3266 0386 00       		.byte	0
 3267 0387 02       		.uleb128 0x2
 3268 0388 01       		.byte	0x1
 3269 0389 02       		.byte	0x2
 3270 038a 97050000 		.4byte	.LASF64
 3271 038e 03       		.uleb128 0x3
 3272 038f 6A040000 		.4byte	.LASF65
 3273 0393 08       		.byte	0x8
 3274 0394 61       		.byte	0x61
 3275 0395 42030000 		.4byte	0x342
 3276 0399 0D       		.uleb128 0xd
 3277 039a 06       		.byte	0x6
 3278 039b 09       		.byte	0x9
 3279 039c 2E       		.byte	0x2e
 3280 039d D2030000 		.4byte	0x3d2
 3281 03a1 0B       		.uleb128 0xb
 3282 03a2 78010000 		.4byte	.LASF66
 3283 03a6 09       		.byte	0x9
 3284 03a7 30       		.byte	0x30
 3285 03a8 B9000000 		.4byte	0xb9
 3286 03ac 00       		.byte	0
 3287 03ad 0B       		.uleb128 0xb
 3288 03ae F8010000 		.4byte	.LASF67
 3289 03b2 09       		.byte	0x9
 3290 03b3 31       		.byte	0x31
 3291 03b4 D1000000 		.4byte	0xd1
 3292 03b8 02       		.byte	0x2
 3293 03b9 0B       		.uleb128 0xb
 3294 03ba 0F080000 		.4byte	.LASF68
 3295 03be 09       		.byte	0x9
 3296 03bf 32       		.byte	0x32
 3297 03c0 AD000000 		.4byte	0xad
 3298 03c4 04       		.byte	0x4
 3299 03c5 0B       		.uleb128 0xb
 3300 03c6 42000000 		.4byte	.LASF69
 3301 03ca 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 78


 3302 03cb 33       		.byte	0x33
 3303 03cc AD000000 		.4byte	0xad
 3304 03d0 05       		.byte	0x5
 3305 03d1 00       		.byte	0
 3306 03d2 03       		.uleb128 0x3
 3307 03d3 91050000 		.4byte	.LASF70
 3308 03d7 09       		.byte	0x9
 3309 03d8 36       		.byte	0x36
 3310 03d9 DD030000 		.4byte	0x3dd
 3311 03dd 0F       		.uleb128 0xf
 3312 03de 99030000 		.4byte	0x399
 3313 03e2 0D       		.uleb128 0xd
 3314 03e3 1C       		.byte	0x1c
 3315 03e4 09       		.byte	0x9
 3316 03e5 39       		.byte	0x39
 3317 03e6 03040000 		.4byte	0x403
 3318 03ea 0B       		.uleb128 0xb
 3319 03eb A7030000 		.4byte	.LASF71
 3320 03ef 09       		.byte	0x9
 3321 03f0 3B       		.byte	0x3b
 3322 03f1 03040000 		.4byte	0x403
 3323 03f5 00       		.byte	0
 3324 03f6 0B       		.uleb128 0xb
 3325 03f7 BA030000 		.4byte	.LASF72
 3326 03fb 09       		.byte	0x9
 3327 03fc 3C       		.byte	0x3c
 3328 03fd 1D010000 		.4byte	0x11d
 3329 0401 04       		.byte	0x4
 3330 0402 00       		.byte	0
 3331 0403 06       		.uleb128 0x6
 3332 0404 04       		.byte	0x4
 3333 0405 73020000 		.4byte	0x273
 3334 0409 03       		.uleb128 0x3
 3335 040a 5F040000 		.4byte	.LASF73
 3336 040e 09       		.byte	0x9
 3337 040f 3E       		.byte	0x3e
 3338 0410 E2030000 		.4byte	0x3e2
 3339 0414 0D       		.uleb128 0xd
 3340 0415 68       		.byte	0x68
 3341 0416 09       		.byte	0x9
 3342 0417 44       		.byte	0x44
 3343 0418 35040000 		.4byte	0x435
 3344 041c 0B       		.uleb128 0xb
 3345 041d B2030000 		.4byte	.LASF74
 3346 0421 09       		.byte	0x9
 3347 0422 49       		.byte	0x49
 3348 0423 35040000 		.4byte	0x435
 3349 0427 00       		.byte	0
 3350 0428 0B       		.uleb128 0xb
 3351 0429 96030000 		.4byte	.LASF75
 3352 042d 09       		.byte	0x9
 3353 042e 4A       		.byte	0x4a
 3354 042f 7E000000 		.4byte	0x7e
 3355 0433 64       		.byte	0x64
 3356 0434 00       		.byte	0
 3357 0435 08       		.uleb128 0x8
 3358 0436 F7000000 		.4byte	0xf7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 79


 3359 043a 45040000 		.4byte	0x445
 3360 043e 09       		.uleb128 0x9
 3361 043f 05010000 		.4byte	0x105
 3362 0443 63       		.byte	0x63
 3363 0444 00       		.byte	0
 3364 0445 03       		.uleb128 0x3
 3365 0446 E0070000 		.4byte	.LASF76
 3366 044a 09       		.byte	0x9
 3367 044b 50       		.byte	0x50
 3368 044c 14040000 		.4byte	0x414
 3369 0450 10       		.uleb128 0x10
 3370 0451 84050000 		.4byte	.LASF108
 3371 0455 01       		.byte	0x1
 3372 0456 12       		.byte	0x12
 3373 0457 00000000 		.4byte	.LFB64
 3374 045b 44000000 		.4byte	.LFE64-.LFB64
 3375 045f 01       		.uleb128 0x1
 3376 0460 9C       		.byte	0x9c
 3377 0461 11       		.uleb128 0x11
 3378 0462 5C050000 		.4byte	.LASF77
 3379 0466 01       		.byte	0x1
 3380 0467 1C       		.byte	0x1c
 3381 0468 00000000 		.4byte	.LFB65
 3382 046c 6C000000 		.4byte	.LFE65-.LFB65
 3383 0470 01       		.uleb128 0x1
 3384 0471 9C       		.byte	0x9c
 3385 0472 11       		.uleb128 0x11
 3386 0473 4B070000 		.4byte	.LASF78
 3387 0477 01       		.byte	0x1
 3388 0478 36       		.byte	0x36
 3389 0479 00000000 		.4byte	.LFB66
 3390 047d 32000000 		.4byte	.LFE66-.LFB66
 3391 0481 01       		.uleb128 0x1
 3392 0482 9C       		.byte	0x9c
 3393 0483 11       		.uleb128 0x11
 3394 0484 18030000 		.4byte	.LASF79
 3395 0488 01       		.byte	0x1
 3396 0489 46       		.byte	0x46
 3397 048a 00000000 		.4byte	.LFB67
 3398 048e 20000000 		.4byte	.LFE67-.LFB67
 3399 0492 01       		.uleb128 0x1
 3400 0493 9C       		.byte	0x9c
 3401 0494 11       		.uleb128 0x11
 3402 0495 50080000 		.4byte	.LASF80
 3403 0499 01       		.byte	0x1
 3404 049a 4F       		.byte	0x4f
 3405 049b 00000000 		.4byte	.LFB68
 3406 049f 40000000 		.4byte	.LFE68-.LFB68
 3407 04a3 01       		.uleb128 0x1
 3408 04a4 9C       		.byte	0x9c
 3409 04a5 12       		.uleb128 0x12
 3410 04a6 C8030000 		.4byte	.LASF94
 3411 04aa 01       		.byte	0x1
 3412 04ab 61       		.byte	0x61
 3413 04ac AD000000 		.4byte	0xad
 3414 04b0 00000000 		.4byte	.LFB69
 3415 04b4 DC000000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 80


 3416 04b8 01       		.uleb128 0x1
 3417 04b9 9C       		.byte	0x9c
 3418 04ba 19050000 		.4byte	0x519
 3419 04be 13       		.uleb128 0x13
 3420 04bf FD070000 		.4byte	.LASF81
 3421 04c3 01       		.byte	0x1
 3422 04c4 6A       		.byte	0x6a
 3423 04c5 AD000000 		.4byte	0xad
 3424 04c9 02       		.uleb128 0x2
 3425 04ca 91       		.byte	0x91
 3426 04cb 77       		.sleb128 -9
 3427 04cc 13       		.uleb128 0x13
 3428 04cd 06080000 		.4byte	.LASF82
 3429 04d1 01       		.byte	0x1
 3430 04d2 6B       		.byte	0x6b
 3431 04d3 AD000000 		.4byte	0xad
 3432 04d7 02       		.uleb128 0x2
 3433 04d8 91       		.byte	0x91
 3434 04d9 74       		.sleb128 -12
 3435 04da 13       		.uleb128 0x13
 3436 04db 1D080000 		.4byte	.LASF83
 3437 04df 01       		.byte	0x1
 3438 04e0 6D       		.byte	0x6d
 3439 04e1 57000000 		.4byte	0x57
 3440 04e5 02       		.uleb128 0x2
 3441 04e6 91       		.byte	0x91
 3442 04e7 70       		.sleb128 -16
 3443 04e8 14       		.uleb128 0x14
 3444 04e9 26000000 		.4byte	.LBB2
 3445 04ed 4A000000 		.4byte	.LBE2-.LBB2
 3446 04f1 13       		.uleb128 0x13
 3447 04f2 06080000 		.4byte	.LASF82
 3448 04f6 01       		.byte	0x1
 3449 04f7 70       		.byte	0x70
 3450 04f8 AD000000 		.4byte	0xad
 3451 04fc 02       		.uleb128 0x2
 3452 04fd 91       		.byte	0x91
 3453 04fe 76       		.sleb128 -10
 3454 04ff 14       		.uleb128 0x14
 3455 0500 2C000000 		.4byte	.LBB3
 3456 0504 2A000000 		.4byte	.LBE3-.LBB3
 3457 0508 13       		.uleb128 0x13
 3458 0509 3A030000 		.4byte	.LASF84
 3459 050d 01       		.byte	0x1
 3460 050e 72       		.byte	0x72
 3461 050f AD000000 		.4byte	0xad
 3462 0513 02       		.uleb128 0x2
 3463 0514 91       		.byte	0x91
 3464 0515 75       		.sleb128 -11
 3465 0516 00       		.byte	0
 3466 0517 00       		.byte	0
 3467 0518 00       		.byte	0
 3468 0519 11       		.uleb128 0x11
 3469 051a 7C060000 		.4byte	.LASF85
 3470 051e 01       		.byte	0x1
 3471 051f 93       		.byte	0x93
 3472 0520 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 81


 3473 0524 1C000000 		.4byte	.LFE70-.LFB70
 3474 0528 01       		.uleb128 0x1
 3475 0529 9C       		.byte	0x9c
 3476 052a 11       		.uleb128 0x11
 3477 052b 62060000 		.4byte	.LASF86
 3478 052f 01       		.byte	0x1
 3479 0530 9B       		.byte	0x9b
 3480 0531 00000000 		.4byte	.LFB71
 3481 0535 28000000 		.4byte	.LFE71-.LFB71
 3482 0539 01       		.uleb128 0x1
 3483 053a 9C       		.byte	0x9c
 3484 053b 15       		.uleb128 0x15
 3485 053c 4E040000 		.4byte	.LASF98
 3486 0540 01       		.byte	0x1
 3487 0541 A6       		.byte	0xa6
 3488 0542 8C000000 		.4byte	0x8c
 3489 0546 00000000 		.4byte	.LFB72
 3490 054a B8000000 		.4byte	.LFE72-.LFB72
 3491 054e 01       		.uleb128 0x1
 3492 054f 9C       		.byte	0x9c
 3493 0550 CD050000 		.4byte	0x5cd
 3494 0554 16       		.uleb128 0x16
 3495 0555 3C050000 		.4byte	.LASF87
 3496 0559 01       		.byte	0x1
 3497 055a A6       		.byte	0xa6
 3498 055b 0C010000 		.4byte	0x10c
 3499 055f 02       		.uleb128 0x2
 3500 0560 91       		.byte	0x91
 3501 0561 5C       		.sleb128 -36
 3502 0562 16       		.uleb128 0x16
 3503 0563 27080000 		.4byte	.LASF88
 3504 0567 01       		.byte	0x1
 3505 0568 A6       		.byte	0xa6
 3506 0569 0C010000 		.4byte	0x10c
 3507 056d 02       		.uleb128 0x2
 3508 056e 91       		.byte	0x91
 3509 056f 58       		.sleb128 -40
 3510 0570 16       		.uleb128 0x16
 3511 0571 65030000 		.4byte	.LASF89
 3512 0575 01       		.byte	0x1
 3513 0576 A6       		.byte	0xa6
 3514 0577 A2000000 		.4byte	0xa2
 3515 057b 02       		.uleb128 0x2
 3516 057c 91       		.byte	0x91
 3517 057d 54       		.sleb128 -44
 3518 057e 13       		.uleb128 0x13
 3519 057f 43040000 		.4byte	.LASF90
 3520 0583 01       		.byte	0x1
 3521 0584 A8       		.byte	0xa8
 3522 0585 C5000000 		.4byte	0xc5
 3523 0589 02       		.uleb128 0x2
 3524 058a 91       		.byte	0x91
 3525 058b 74       		.sleb128 -12
 3526 058c 14       		.uleb128 0x14
 3527 058d 16000000 		.4byte	.LBB4
 3528 0591 7C000000 		.4byte	.LBE4-.LBB4
 3529 0595 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 82


 3530 0596 45050000 		.4byte	.LASF91
 3531 059a 01       		.byte	0x1
 3532 059b AC       		.byte	0xac
 3533 059c 0C010000 		.4byte	0x10c
 3534 05a0 02       		.uleb128 0x2
 3535 05a1 91       		.byte	0x91
 3536 05a2 64       		.sleb128 -28
 3537 05a3 13       		.uleb128 0x13
 3538 05a4 C3050000 		.4byte	.LASF92
 3539 05a8 01       		.byte	0x1
 3540 05a9 AD       		.byte	0xad
 3541 05aa A2000000 		.4byte	0xa2
 3542 05ae 02       		.uleb128 0x2
 3543 05af 91       		.byte	0x91
 3544 05b0 6C       		.sleb128 -20
 3545 05b1 17       		.uleb128 0x17
 3546 05b2 6900     		.ascii	"i\000"
 3547 05b4 01       		.byte	0x1
 3548 05b5 AE       		.byte	0xae
 3549 05b6 A2000000 		.4byte	0xa2
 3550 05ba 02       		.uleb128 0x2
 3551 05bb 91       		.byte	0x91
 3552 05bc 70       		.sleb128 -16
 3553 05bd 13       		.uleb128 0x13
 3554 05be 8F020000 		.4byte	.LASF93
 3555 05c2 01       		.byte	0x1
 3556 05c3 AE       		.byte	0xae
 3557 05c4 A2000000 		.4byte	0xa2
 3558 05c8 02       		.uleb128 0x2
 3559 05c9 91       		.byte	0x91
 3560 05ca 68       		.sleb128 -24
 3561 05cb 00       		.byte	0
 3562 05cc 00       		.byte	0
 3563 05cd 12       		.uleb128 0x12
 3564 05ce 11050000 		.4byte	.LASF95
 3565 05d2 01       		.byte	0x1
 3566 05d3 DA       		.byte	0xda
 3567 05d4 F3010000 		.4byte	0x1f3
 3568 05d8 00000000 		.4byte	.LFB73
 3569 05dc 00010000 		.4byte	.LFE73-.LFB73
 3570 05e0 01       		.uleb128 0x1
 3571 05e1 9C       		.byte	0x9c
 3572 05e2 24060000 		.4byte	0x624
 3573 05e6 13       		.uleb128 0x13
 3574 05e7 2E010000 		.4byte	.LASF96
 3575 05eb 01       		.byte	0x1
 3576 05ec DC       		.byte	0xdc
 3577 05ed F3010000 		.4byte	0x1f3
 3578 05f1 03       		.uleb128 0x3
 3579 05f2 91       		.byte	0x91
 3580 05f3 E47C     		.sleb128 -412
 3581 05f5 14       		.uleb128 0x14
 3582 05f6 4A000000 		.4byte	.LBB5
 3583 05fa 86000000 		.4byte	.LBE5-.LBB5
 3584 05fe 17       		.uleb128 0x17
 3585 05ff 6900     		.ascii	"i\000"
 3586 0601 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 83


 3587 0602 E3       		.byte	0xe3
 3588 0603 7E000000 		.4byte	0x7e
 3589 0607 02       		.uleb128 0x2
 3590 0608 91       		.byte	0x91
 3591 0609 6C       		.sleb128 -20
 3592 060a 14       		.uleb128 0x14
 3593 060b 70000000 		.4byte	.LBB6
 3594 060f 46000000 		.4byte	.LBE6-.LBB6
 3595 0613 13       		.uleb128 0x13
 3596 0614 68020000 		.4byte	.LASF97
 3597 0618 01       		.byte	0x1
 3598 0619 F0       		.byte	0xf0
 3599 061a 57000000 		.4byte	0x57
 3600 061e 02       		.uleb128 0x2
 3601 061f 91       		.byte	0x91
 3602 0620 68       		.sleb128 -24
 3603 0621 00       		.byte	0
 3604 0622 00       		.byte	0
 3605 0623 00       		.byte	0
 3606 0624 18       		.uleb128 0x18
 3607 0625 56030000 		.4byte	.LASF99
 3608 0629 01       		.byte	0x1
 3609 062a 0401     		.2byte	0x104
 3610 062c AD000000 		.4byte	0xad
 3611 0630 00000000 		.4byte	.LFB74
 3612 0634 78000000 		.4byte	.LFE74-.LFB74
 3613 0638 01       		.uleb128 0x1
 3614 0639 9C       		.byte	0x9c
 3615 063a 95060000 		.4byte	0x695
 3616 063e 19       		.uleb128 0x19
 3617 063f 2E040000 		.4byte	.LASF100
 3618 0643 01       		.byte	0x1
 3619 0644 0401     		.2byte	0x104
 3620 0646 0C010000 		.4byte	0x10c
 3621 064a 02       		.uleb128 0x2
 3622 064b 91       		.byte	0x91
 3623 064c 6C       		.sleb128 -20
 3624 064d 19       		.uleb128 0x19
 3625 064e DF030000 		.4byte	.LASF101
 3626 0652 01       		.byte	0x1
 3627 0653 0401     		.2byte	0x104
 3628 0655 12010000 		.4byte	0x112
 3629 0659 02       		.uleb128 0x2
 3630 065a 91       		.byte	0x91
 3631 065b 68       		.sleb128 -24
 3632 065c 19       		.uleb128 0x19
 3633 065d 05040000 		.4byte	.LASF102
 3634 0661 01       		.byte	0x1
 3635 0662 0401     		.2byte	0x104
 3636 0664 12010000 		.4byte	0x112
 3637 0668 02       		.uleb128 0x2
 3638 0669 91       		.byte	0x91
 3639 066a 64       		.sleb128 -28
 3640 066b 19       		.uleb128 0x19
 3641 066c EB030000 		.4byte	.LASF103
 3642 0670 01       		.byte	0x1
 3643 0671 0401     		.2byte	0x104
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 84


 3644 0673 0C010000 		.4byte	0x10c
 3645 0677 02       		.uleb128 0x2
 3646 0678 91       		.byte	0x91
 3647 0679 60       		.sleb128 -32
 3648 067a 1A       		.uleb128 0x1a
 3649 067b 6100     		.ascii	"a\000"
 3650 067d 01       		.byte	0x1
 3651 067e 0601     		.2byte	0x106
 3652 0680 0C010000 		.4byte	0x10c
 3653 0684 02       		.uleb128 0x2
 3654 0685 91       		.byte	0x91
 3655 0686 74       		.sleb128 -12
 3656 0687 1A       		.uleb128 0x1a
 3657 0688 6200     		.ascii	"b\000"
 3658 068a 01       		.byte	0x1
 3659 068b 0601     		.2byte	0x106
 3660 068d 0C010000 		.4byte	0x10c
 3661 0691 02       		.uleb128 0x2
 3662 0692 91       		.byte	0x91
 3663 0693 70       		.sleb128 -16
 3664 0694 00       		.byte	0
 3665 0695 1B       		.uleb128 0x1b
 3666 0696 A4060000 		.4byte	.LASF104
 3667 069a 01       		.byte	0x1
 3668 069b 2301     		.2byte	0x123
 3669 069d AD000000 		.4byte	0xad
 3670 06a1 00000000 		.4byte	.LFB75
 3671 06a5 3C010000 		.4byte	.LFE75-.LFB75
 3672 06a9 01       		.uleb128 0x1
 3673 06aa 9C       		.byte	0x9c
 3674 06ab C7060000 		.4byte	0x6c7
 3675 06af 14       		.uleb128 0x14
 3676 06b0 2E000000 		.4byte	.LBB7
 3677 06b4 32000000 		.4byte	.LBE7-.LBB7
 3678 06b8 1A       		.uleb128 0x1a
 3679 06b9 6900     		.ascii	"i\000"
 3680 06bb 01       		.byte	0x1
 3681 06bc 3101     		.2byte	0x131
 3682 06be AD000000 		.4byte	0xad
 3683 06c2 02       		.uleb128 0x2
 3684 06c3 91       		.byte	0x91
 3685 06c4 77       		.sleb128 -9
 3686 06c5 00       		.byte	0
 3687 06c6 00       		.byte	0
 3688 06c7 1B       		.uleb128 0x1b
 3689 06c8 B5040000 		.4byte	.LASF105
 3690 06cc 01       		.byte	0x1
 3691 06cd 6A01     		.2byte	0x16a
 3692 06cf AD000000 		.4byte	0xad
 3693 06d3 00000000 		.4byte	.LFB76
 3694 06d7 B8000000 		.4byte	.LFE76-.LFB76
 3695 06db 01       		.uleb128 0x1
 3696 06dc 9C       		.byte	0x9c
 3697 06dd 0A070000 		.4byte	0x70a
 3698 06e1 1C       		.uleb128 0x1c
 3699 06e2 C0070000 		.4byte	.LASF35
 3700 06e6 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 85


 3701 06e7 6E01     		.2byte	0x16e
 3702 06e9 AD000000 		.4byte	0xad
 3703 06ed 02       		.uleb128 0x2
 3704 06ee 91       		.byte	0x91
 3705 06ef 77       		.sleb128 -9
 3706 06f0 14       		.uleb128 0x14
 3707 06f1 36000000 		.4byte	.LBB8
 3708 06f5 48000000 		.4byte	.LBE8-.LBB8
 3709 06f9 1C       		.uleb128 0x1c
 3710 06fa 33040000 		.4byte	.LASF106
 3711 06fe 01       		.byte	0x1
 3712 06ff 7601     		.2byte	0x176
 3713 0701 0A070000 		.4byte	0x70a
 3714 0705 02       		.uleb128 0x2
 3715 0706 91       		.byte	0x91
 3716 0707 6C       		.sleb128 -20
 3717 0708 00       		.byte	0
 3718 0709 00       		.byte	0
 3719 070a 08       		.uleb128 0x8
 3720 070b F7000000 		.4byte	0xf7
 3721 070f 1A070000 		.4byte	0x71a
 3722 0713 09       		.uleb128 0x9
 3723 0714 05010000 		.4byte	0x105
 3724 0718 09       		.byte	0x9
 3725 0719 00       		.byte	0
 3726 071a 1D       		.uleb128 0x1d
 3727 071b C2010000 		.4byte	.LASF107
 3728 071f 01       		.byte	0x1
 3729 0720 8801     		.2byte	0x188
 3730 0722 00000000 		.4byte	.LFB77
 3731 0726 1C000000 		.4byte	.LFE77-.LFB77
 3732 072a 01       		.uleb128 0x1
 3733 072b 9C       		.byte	0x9c
 3734 072c 1E       		.uleb128 0x1e
 3735 072d 10070000 		.4byte	.LASF109
 3736 0731 01       		.byte	0x1
 3737 0732 9801     		.2byte	0x198
 3738 0734 AD000000 		.4byte	0xad
 3739 0738 00000000 		.4byte	.LFB78
 3740 073c 28000000 		.4byte	.LFE78-.LFB78
 3741 0740 01       		.uleb128 0x1
 3742 0741 9C       		.byte	0x9c
 3743 0742 1F       		.uleb128 0x1f
 3744 0743 6D030000 		.4byte	.LASF112
 3745 0747 01       		.byte	0x1
 3746 0748 A301     		.2byte	0x1a3
 3747 074a 00000000 		.4byte	.LFB79
 3748 074e 84000000 		.4byte	.LFE79-.LFB79
 3749 0752 01       		.uleb128 0x1
 3750 0753 9C       		.byte	0x9c
 3751 0754 68070000 		.4byte	0x768
 3752 0758 1C       		.uleb128 0x1c
 3753 0759 1C050000 		.4byte	.LASF110
 3754 075d 01       		.byte	0x1
 3755 075e B001     		.2byte	0x1b0
 3756 0760 7E000000 		.4byte	0x7e
 3757 0764 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 86


 3758 0765 91       		.byte	0x91
 3759 0766 74       		.sleb128 -12
 3760 0767 00       		.byte	0
 3761 0768 20       		.uleb128 0x20
 3762 0769 E6020000 		.4byte	.LASF111
 3763 076d 01       		.byte	0x1
 3764 076e C201     		.2byte	0x1c2
 3765 0770 00000000 		.4byte	.LFB80
 3766 0774 30000000 		.4byte	.LFE80-.LFB80
 3767 0778 01       		.uleb128 0x1
 3768 0779 9C       		.byte	0x9c
 3769 077a 1F       		.uleb128 0x1f
 3770 077b 8F070000 		.4byte	.LASF113
 3771 077f 01       		.byte	0x1
 3772 0780 CB01     		.2byte	0x1cb
 3773 0782 00000000 		.4byte	.LFB81
 3774 0786 04020000 		.4byte	.LFE81-.LFB81
 3775 078a 01       		.uleb128 0x1
 3776 078b 9C       		.byte	0x9c
 3777 078c 2D080000 		.4byte	0x82d
 3778 0790 1C       		.uleb128 0x1c
 3779 0791 05060000 		.4byte	.LASF114
 3780 0795 01       		.byte	0x1
 3781 0796 CE01     		.2byte	0x1ce
 3782 0798 0A070000 		.4byte	0x70a
 3783 079c 02       		.uleb128 0x2
 3784 079d 91       		.byte	0x91
 3785 079e 64       		.sleb128 -28
 3786 079f 1C       		.uleb128 0x1c
 3787 07a0 5D020000 		.4byte	.LASF115
 3788 07a4 01       		.byte	0x1
 3789 07a5 CF01     		.2byte	0x1cf
 3790 07a7 0A070000 		.4byte	0x70a
 3791 07ab 02       		.uleb128 0x2
 3792 07ac 91       		.byte	0x91
 3793 07ad 58       		.sleb128 -40
 3794 07ae 1C       		.uleb128 0x1c
 3795 07af B2070000 		.4byte	.LASF116
 3796 07b3 01       		.byte	0x1
 3797 07b4 D001     		.2byte	0x1d0
 3798 07b6 0A070000 		.4byte	0x70a
 3799 07ba 02       		.uleb128 0x2
 3800 07bb 91       		.byte	0x91
 3801 07bc 4C       		.sleb128 -52
 3802 07bd 1C       		.uleb128 0x1c
 3803 07be 6D050000 		.4byte	.LASF117
 3804 07c2 01       		.byte	0x1
 3805 07c3 D101     		.2byte	0x1d1
 3806 07c5 0A070000 		.4byte	0x70a
 3807 07c9 02       		.uleb128 0x2
 3808 07ca 91       		.byte	0x91
 3809 07cb 40       		.sleb128 -64
 3810 07cc 1C       		.uleb128 0x1c
 3811 07cd D9020000 		.4byte	.LASF118
 3812 07d1 01       		.byte	0x1
 3813 07d2 D201     		.2byte	0x1d2
 3814 07d4 0A070000 		.4byte	0x70a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 87


 3815 07d8 03       		.uleb128 0x3
 3816 07d9 91       		.byte	0x91
 3817 07da B47F     		.sleb128 -76
 3818 07dc 1C       		.uleb128 0x1c
 3819 07dd 3A020000 		.4byte	.LASF59
 3820 07e1 01       		.byte	0x1
 3821 07e2 E201     		.2byte	0x1e2
 3822 07e4 7E000000 		.4byte	0x7e
 3823 07e8 03       		.uleb128 0x3
 3824 07e9 91       		.byte	0x91
 3825 07ea B07F     		.sleb128 -80
 3826 07ec 1C       		.uleb128 0x1c
 3827 07ed 7B050000 		.4byte	.LASF60
 3828 07f1 01       		.byte	0x1
 3829 07f2 E201     		.2byte	0x1e2
 3830 07f4 7E000000 		.4byte	0x7e
 3831 07f8 03       		.uleb128 0x3
 3832 07f9 91       		.byte	0x91
 3833 07fa AC7F     		.sleb128 -84
 3834 07fc 1C       		.uleb128 0x1c
 3835 07fd 16010000 		.4byte	.LASF119
 3836 0801 01       		.byte	0x1
 3837 0802 E201     		.2byte	0x1e2
 3838 0804 7E000000 		.4byte	0x7e
 3839 0808 03       		.uleb128 0x3
 3840 0809 91       		.byte	0x91
 3841 080a A87F     		.sleb128 -88
 3842 080c 1C       		.uleb128 0x1c
 3843 080d 81040000 		.4byte	.LASF120
 3844 0811 01       		.byte	0x1
 3845 0812 E201     		.2byte	0x1e2
 3846 0814 7E000000 		.4byte	0x7e
 3847 0818 03       		.uleb128 0x3
 3848 0819 91       		.byte	0x91
 3849 081a A47F     		.sleb128 -92
 3850 081c 1C       		.uleb128 0x1c
 3851 081d 38040000 		.4byte	.LASF121
 3852 0821 01       		.byte	0x1
 3853 0822 E201     		.2byte	0x1e2
 3854 0824 7E000000 		.4byte	0x7e
 3855 0828 03       		.uleb128 0x3
 3856 0829 91       		.byte	0x91
 3857 082a A07F     		.sleb128 -96
 3858 082c 00       		.byte	0
 3859 082d 1F       		.uleb128 0x1f
 3860 082e 44020000 		.4byte	.LASF122
 3861 0832 01       		.byte	0x1
 3862 0833 0B02     		.2byte	0x20b
 3863 0835 00000000 		.4byte	.LFB82
 3864 0839 68010000 		.4byte	.LFE82-.LFB82
 3865 083d 01       		.uleb128 0x1
 3866 083e 9C       		.byte	0x9c
 3867 083f 5D080000 		.4byte	0x85d
 3868 0843 14       		.uleb128 0x14
 3869 0844 DA000000 		.4byte	.LBB9
 3870 0848 38000000 		.4byte	.LBE9-.LBB9
 3871 084c 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 88


 3872 084d C5060000 		.4byte	.LASF123
 3873 0851 01       		.byte	0x1
 3874 0852 3902     		.2byte	0x239
 3875 0854 0A070000 		.4byte	0x70a
 3876 0858 02       		.uleb128 0x2
 3877 0859 91       		.byte	0x91
 3878 085a 6C       		.sleb128 -20
 3879 085b 00       		.byte	0
 3880 085c 00       		.byte	0
 3881 085d 1B       		.uleb128 0x1b
 3882 085e A3020000 		.4byte	.LASF124
 3883 0862 01       		.byte	0x1
 3884 0863 4C02     		.2byte	0x24c
 3885 0865 57000000 		.4byte	0x57
 3886 0869 00000000 		.4byte	.LFB83
 3887 086d 44010000 		.4byte	.LFE83-.LFB83
 3888 0871 01       		.uleb128 0x1
 3889 0872 9C       		.byte	0x9c
 3890 0873 19090000 		.4byte	0x919
 3891 0877 1C       		.uleb128 0x1c
 3892 0878 19040000 		.4byte	.LASF125
 3893 087c 01       		.byte	0x1
 3894 087d 5702     		.2byte	0x257
 3895 087f 57000000 		.4byte	0x57
 3896 0883 02       		.uleb128 0x2
 3897 0884 91       		.byte	0x91
 3898 0885 74       		.sleb128 -12
 3899 0886 14       		.uleb128 0x14
 3900 0887 30000000 		.4byte	.LBB10
 3901 088b DE000000 		.4byte	.LBE10-.LBB10
 3902 088f 1C       		.uleb128 0x1c
 3903 0890 68020000 		.4byte	.LASF97
 3904 0894 01       		.byte	0x1
 3905 0895 5C02     		.2byte	0x25c
 3906 0897 19090000 		.4byte	0x919
 3907 089b 02       		.uleb128 0x2
 3908 089c 91       		.byte	0x91
 3909 089d 54       		.sleb128 -44
 3910 089e 1A       		.uleb128 0x1a
 3911 089f 7400     		.ascii	"t\000"
 3912 08a1 01       		.byte	0x1
 3913 08a2 6202     		.2byte	0x262
 3914 08a4 2D010000 		.4byte	0x12d
 3915 08a8 03       		.uleb128 0x3
 3916 08a9 91       		.byte	0x91
 3917 08aa 947F     		.sleb128 -108
 3918 08ac 1C       		.uleb128 0x1c
 3919 08ad E4010000 		.4byte	.LASF126
 3920 08b1 01       		.byte	0x1
 3921 08b2 6502     		.2byte	0x265
 3922 08b4 7E000000 		.4byte	0x7e
 3923 08b8 02       		.uleb128 0x2
 3924 08b9 91       		.byte	0x91
 3925 08ba 50       		.sleb128 -48
 3926 08bb 1C       		.uleb128 0x1c
 3927 08bc AF040000 		.4byte	.LASF127
 3928 08c0 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 89


 3929 08c1 6502     		.2byte	0x265
 3930 08c3 7E000000 		.4byte	0x7e
 3931 08c7 02       		.uleb128 0x2
 3932 08c8 91       		.byte	0x91
 3933 08c9 4C       		.sleb128 -52
 3934 08ca 1A       		.uleb128 0x1a
 3935 08cb 64617900 		.ascii	"day\000"
 3936 08cf 01       		.byte	0x1
 3937 08d0 6502     		.2byte	0x265
 3938 08d2 7E000000 		.4byte	0x7e
 3939 08d6 02       		.uleb128 0x2
 3940 08d7 91       		.byte	0x91
 3941 08d8 48       		.sleb128 -56
 3942 08d9 1C       		.uleb128 0x1c
 3943 08da 37050000 		.4byte	.LASF128
 3944 08de 01       		.byte	0x1
 3945 08df 6502     		.2byte	0x265
 3946 08e1 7E000000 		.4byte	0x7e
 3947 08e5 02       		.uleb128 0x2
 3948 08e6 91       		.byte	0x91
 3949 08e7 44       		.sleb128 -60
 3950 08e8 1C       		.uleb128 0x1c
 3951 08e9 78070000 		.4byte	.LASF129
 3952 08ed 01       		.byte	0x1
 3953 08ee 6502     		.2byte	0x265
 3954 08f0 7E000000 		.4byte	0x7e
 3955 08f4 02       		.uleb128 0x2
 3956 08f5 91       		.byte	0x91
 3957 08f6 40       		.sleb128 -64
 3958 08f7 1C       		.uleb128 0x1c
 3959 08f8 DD010000 		.4byte	.LASF130
 3960 08fc 01       		.byte	0x1
 3961 08fd 6502     		.2byte	0x265
 3962 08ff 7E000000 		.4byte	0x7e
 3963 0903 03       		.uleb128 0x3
 3964 0904 91       		.byte	0x91
 3965 0905 BC7F     		.sleb128 -68
 3966 0907 1C       		.uleb128 0x1c
 3967 0908 00000000 		.4byte	.LASF131
 3968 090c 01       		.byte	0x1
 3969 090d 6502     		.2byte	0x265
 3970 090f 7E000000 		.4byte	0x7e
 3971 0913 03       		.uleb128 0x3
 3972 0914 91       		.byte	0x91
 3973 0915 B87F     		.sleb128 -72
 3974 0917 00       		.byte	0
 3975 0918 00       		.byte	0
 3976 0919 08       		.uleb128 0x8
 3977 091a F7000000 		.4byte	0xf7
 3978 091e 29090000 		.4byte	0x929
 3979 0922 09       		.uleb128 0x9
 3980 0923 05010000 		.4byte	0x105
 3981 0927 1D       		.byte	0x1d
 3982 0928 00       		.byte	0
 3983 0929 21       		.uleb128 0x21
 3984 092a 0E020000 		.4byte	.LASF132
 3985 092e 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 90


 3986 092f 8502     		.2byte	0x285
 3987 0931 AD000000 		.4byte	0xad
 3988 0935 00000000 		.4byte	.LFB84
 3989 0939 14000000 		.4byte	.LFE84-.LFB84
 3990 093d 01       		.uleb128 0x1
 3991 093e 9C       		.byte	0x9c
 3992 093f 1D       		.uleb128 0x1d
 3993 0940 CD020000 		.4byte	.LASF133
 3994 0944 01       		.byte	0x1
 3995 0945 8A02     		.2byte	0x28a
 3996 0947 00000000 		.4byte	.LFB85
 3997 094b 1A000000 		.4byte	.LFE85-.LFB85
 3998 094f 01       		.uleb128 0x1
 3999 0950 9C       		.byte	0x9c
 4000 0951 1D       		.uleb128 0x1d
 4001 0952 F2000000 		.4byte	.LASF134
 4002 0956 01       		.byte	0x1
 4003 0957 9702     		.2byte	0x297
 4004 0959 00000000 		.4byte	.LFB86
 4005 095d 2A000000 		.4byte	.LFE86-.LFB86
 4006 0961 01       		.uleb128 0x1
 4007 0962 9C       		.byte	0x9c
 4008 0963 1B       		.uleb128 0x1b
 4009 0964 16060000 		.4byte	.LASF135
 4010 0968 01       		.byte	0x1
 4011 0969 AA02     		.2byte	0x2aa
 4012 096b 37030000 		.4byte	0x337
 4013 096f 00000000 		.4byte	.LFB87
 4014 0973 7C020000 		.4byte	.LFE87-.LFB87
 4015 0977 01       		.uleb128 0x1
 4016 0978 9C       		.byte	0x9c
 4017 0979 0C0A0000 		.4byte	0xa0c
 4018 097d 1A       		.uleb128 0x1a
 4019 097e 67707300 		.ascii	"gps\000"
 4020 0982 01       		.byte	0x1
 4021 0983 AB02     		.2byte	0x2ab
 4022 0985 37030000 		.4byte	0x337
 4023 0989 02       		.uleb128 0x2
 4024 098a 91       		.byte	0x91
 4025 098b 4C       		.sleb128 -52
 4026 098c 1C       		.uleb128 0x1c
 4027 098d 39080000 		.4byte	.LASF136
 4028 0991 01       		.byte	0x1
 4029 0992 B702     		.2byte	0x2b7
 4030 0994 57000000 		.4byte	0x57
 4031 0998 02       		.uleb128 0x2
 4032 0999 91       		.byte	0x91
 4033 099a 68       		.sleb128 -24
 4034 099b 1C       		.uleb128 0x1c
 4035 099c 40070000 		.4byte	.LASF137
 4036 09a0 01       		.byte	0x1
 4037 09a1 DE02     		.2byte	0x2de
 4038 09a3 AD000000 		.4byte	0xad
 4039 09a7 02       		.uleb128 0x2
 4040 09a8 91       		.byte	0x91
 4041 09a9 67       		.sleb128 -25
 4042 09aa 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 91


 4043 09ab 6C617400 		.ascii	"lat\000"
 4044 09af 01       		.byte	0x1
 4045 09b0 EA02     		.2byte	0x2ea
 4046 09b2 E9000000 		.4byte	0xe9
 4047 09b6 02       		.uleb128 0x2
 4048 09b7 91       		.byte	0x91
 4049 09b8 48       		.sleb128 -56
 4050 09b9 1A       		.uleb128 0x1a
 4051 09ba 6C6F6E00 		.ascii	"lon\000"
 4052 09be 01       		.byte	0x1
 4053 09bf EB02     		.2byte	0x2eb
 4054 09c1 E9000000 		.4byte	0xe9
 4055 09c5 02       		.uleb128 0x2
 4056 09c6 91       		.byte	0x91
 4057 09c7 44       		.sleb128 -60
 4058 09c8 1A       		.uleb128 0x1a
 4059 09c9 616C7400 		.ascii	"alt\000"
 4060 09cd 01       		.byte	0x1
 4061 09ce EC02     		.2byte	0x2ec
 4062 09d0 E9000000 		.4byte	0xe9
 4063 09d4 02       		.uleb128 0x2
 4064 09d5 91       		.byte	0x91
 4065 09d6 40       		.sleb128 -64
 4066 09d7 1A       		.uleb128 0x1a
 4067 09d8 733100   		.ascii	"s1\000"
 4068 09db 01       		.byte	0x1
 4069 09dc F002     		.2byte	0x2f0
 4070 09de 0C010000 		.4byte	0x10c
 4071 09e2 02       		.uleb128 0x2
 4072 09e3 91       		.byte	0x91
 4073 09e4 60       		.sleb128 -32
 4074 09e5 1C       		.uleb128 0x1c
 4075 09e6 1C050000 		.4byte	.LASF110
 4076 09ea 01       		.byte	0x1
 4077 09eb F302     		.2byte	0x2f3
 4078 09ed 7E000000 		.4byte	0x7e
 4079 09f1 02       		.uleb128 0x2
 4080 09f2 91       		.byte	0x91
 4081 09f3 5C       		.sleb128 -36
 4082 09f4 14       		.uleb128 0x14
 4083 09f5 B4000000 		.4byte	.LBB11
 4084 09f9 38000000 		.4byte	.LBE11-.LBB11
 4085 09fd 1A       		.uleb128 0x1a
 4086 09fe 6900     		.ascii	"i\000"
 4087 0a00 01       		.byte	0x1
 4088 0a01 DF02     		.2byte	0x2df
 4089 0a03 B9000000 		.4byte	0xb9
 4090 0a07 02       		.uleb128 0x2
 4091 0a08 91       		.byte	0x91
 4092 0a09 6E       		.sleb128 -18
 4093 0a0a 00       		.byte	0
 4094 0a0b 00       		.byte	0
 4095 0a0c 22       		.uleb128 0x22
 4096 0a0d 40010000 		.4byte	.LASF138
 4097 0a11 0A       		.byte	0xa
 4098 0a12 1207     		.2byte	0x712
 4099 0a14 180A0000 		.4byte	0xa18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 92


 4100 0a18 0F       		.uleb128 0xf
 4101 0a19 97000000 		.4byte	0x97
 4102 0a1d 23       		.uleb128 0x23
 4103 0a1e 28000000 		.4byte	.LASF139
 4104 0a22 07       		.byte	0x7
 4105 0a23 11       		.byte	0x11
 4106 0a24 87030000 		.4byte	0x387
 4107 0a28 05       		.uleb128 0x5
 4108 0a29 03       		.byte	0x3
 4109 0a2a 00000000 		.4byte	buffer_overflow
 4110 0a2e 23       		.uleb128 0x23
 4111 0a2f 8D040000 		.4byte	.LASF140
 4112 0a33 07       		.byte	0x7
 4113 0a34 22       		.byte	0x22
 4114 0a35 B9000000 		.4byte	0xb9
 4115 0a39 05       		.uleb128 0x5
 4116 0a3a 03       		.byte	0x3
 4117 0a3b 00000000 		.4byte	dataPointsInStack
 4118 0a3f 23       		.uleb128 0x23
 4119 0a40 C7070000 		.4byte	.LASF141
 4120 0a44 07       		.byte	0x7
 4121 0a45 23       		.byte	0x23
 4122 0a46 B9000000 		.4byte	0xb9
 4123 0a4a 05       		.uleb128 0x5
 4124 0a4b 03       		.byte	0x3
 4125 0a4c 00000000 		.4byte	dataPointsInStackDesired
 4126 0a50 08       		.uleb128 0x8
 4127 0a51 3B020000 		.4byte	0x23b
 4128 0a55 600A0000 		.4byte	0xa60
 4129 0a59 09       		.uleb128 0x9
 4130 0a5a 05010000 		.4byte	0x105
 4131 0a5e 95       		.byte	0x95
 4132 0a5f 00       		.byte	0
 4133 0a60 23       		.uleb128 0x23
 4134 0a61 91030000 		.4byte	.LASF142
 4135 0a65 07       		.byte	0x7
 4136 0a66 24       		.byte	0x24
 4137 0a67 500A0000 		.4byte	0xa50
 4138 0a6b 05       		.uleb128 0x5
 4139 0a6c 03       		.byte	0x3
 4140 0a6d 00000000 		.4byte	data
 4141 0a71 23       		.uleb128 0x23
 4142 0a72 22010000 		.4byte	.LASF143
 4143 0a76 08       		.byte	0x8
 4144 0a77 21       		.byte	0x21
 4145 0a78 AD000000 		.4byte	0xad
 4146 0a7c 05       		.uleb128 0x5
 4147 0a7d 03       		.byte	0x3
 4148 0a7e 00000000 		.4byte	modem_state
 4149 0a82 23       		.uleb128 0x23
 4150 0a83 29070000 		.4byte	.LASF144
 4151 0a87 08       		.byte	0x8
 4152 0a88 64       		.byte	0x64
 4153 0a89 DD000000 		.4byte	0xdd
 4154 0a8d 05       		.uleb128 0x5
 4155 0a8e 03       		.byte	0x3
 4156 0a8f 00000000 		.4byte	modem_start_time_stamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 93


 4157 0a93 23       		.uleb128 0x23
 4158 0a94 A7030000 		.4byte	.LASF71
 4159 0a98 08       		.byte	0x8
 4160 0a99 65       		.byte	0x65
 4161 0a9a 73020000 		.4byte	0x273
 4162 0a9e 05       		.uleb128 0x5
 4163 0a9f 03       		.byte	0x3
 4164 0aa0 00000000 		.4byte	modem_info
 4165 0aa4 23       		.uleb128 0x23
 4166 0aa5 4D010000 		.4byte	.LASF145
 4167 0aa9 08       		.byte	0x8
 4168 0aaa 66       		.byte	0x66
 4169 0aab E7020000 		.4byte	0x2e7
 4170 0aaf 05       		.uleb128 0x5
 4171 0ab0 03       		.byte	0x3
 4172 0ab1 00000000 		.4byte	modem_stats
 4173 0ab5 23       		.uleb128 0x23
 4174 0ab6 22050000 		.4byte	.LASF146
 4175 0aba 08       		.byte	0x8
 4176 0abb 67       		.byte	0x67
 4177 0abc 8E030000 		.4byte	0x38e
 4178 0ac0 05       		.uleb128 0x5
 4179 0ac1 03       		.byte	0x3
 4180 0ac2 00000000 		.4byte	updatable_parameters
 4181 0ac6 08       		.uleb128 0x8
 4182 0ac7 F7000000 		.4byte	0xf7
 4183 0acb D70A0000 		.4byte	0xad7
 4184 0acf 24       		.uleb128 0x24
 4185 0ad0 05010000 		.4byte	0x105
 4186 0ad4 0F27     		.2byte	0x270f
 4187 0ad6 00       		.byte	0
 4188 0ad7 23       		.uleb128 0x23
 4189 0ad8 43080000 		.4byte	.LASF147
 4190 0adc 09       		.byte	0x9
 4191 0add 18       		.byte	0x18
 4192 0ade C60A0000 		.4byte	0xac6
 4193 0ae2 05       		.uleb128 0x5
 4194 0ae3 03       		.byte	0x3
 4195 0ae4 00000000 		.4byte	http_request
 4196 0ae8 23       		.uleb128 0x23
 4197 0ae9 B8010000 		.4byte	.LASF148
 4198 0aed 09       		.byte	0x9
 4199 0aee 19       		.byte	0x19
 4200 0aef C60A0000 		.4byte	0xac6
 4201 0af3 05       		.uleb128 0x5
 4202 0af4 03       		.byte	0x3
 4203 0af5 00000000 		.4byte	http_body
 4204 0af9 08       		.uleb128 0x8
 4205 0afa F7000000 		.4byte	0xf7
 4206 0afe 090B0000 		.4byte	0xb09
 4207 0b02 09       		.uleb128 0x9
 4208 0b03 05010000 		.4byte	0x105
 4209 0b07 C7       		.byte	0xc7
 4210 0b08 00       		.byte	0
 4211 0b09 23       		.uleb128 0x23
 4212 0b0a D3060000 		.4byte	.LASF149
 4213 0b0e 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 94


 4214 0b0f 1A       		.byte	0x1a
 4215 0b10 F90A0000 		.4byte	0xaf9
 4216 0b14 05       		.uleb128 0x5
 4217 0b15 03       		.byte	0x3
 4218 0b16 00000000 		.4byte	http_route
 4219 0b1a 23       		.uleb128 0x23
 4220 0b1b 37060000 		.4byte	.LASF150
 4221 0b1f 09       		.byte	0x9
 4222 0b20 41       		.byte	0x41
 4223 0b21 09040000 		.4byte	0x409
 4224 0b25 05       		.uleb128 0x5
 4225 0b26 03       		.byte	0x3
 4226 0b27 00000000 		.4byte	system_info
 4227 0b2b 23       		.uleb128 0x23
 4228 0b2c B3050000 		.4byte	.LASF151
 4229 0b30 09       		.byte	0x9
 4230 0b31 53       		.byte	0x53
 4231 0b32 45040000 		.4byte	0x445
 4232 0b36 05       		.uleb128 0x5
 4233 0b37 03       		.byte	0x3
 4234 0b38 00000000 		.4byte	system_settings
 4235 0b3c 23       		.uleb128 0x23
 4236 0b3d 33010000 		.4byte	.LASF152
 4237 0b41 09       		.byte	0x9
 4238 0b42 6F       		.byte	0x6f
 4239 0b43 D2030000 		.4byte	0x3d2
 4240 0b47 05       		.uleb128 0x5
 4241 0b48 03       		.byte	0x3
 4242 0b49 00000000 		.4byte	alarmMeasure
 4243 0b4d 23       		.uleb128 0x23
 4244 0b4e 87010000 		.4byte	.LASF153
 4245 0b52 09       		.byte	0x9
 4246 0b53 70       		.byte	0x70
 4247 0b54 AD000000 		.4byte	0xad
 4248 0b58 05       		.uleb128 0x5
 4249 0b59 03       		.byte	0x3
 4250 0b5a 00000000 		.4byte	timeToMeasure
 4251 0b5e 23       		.uleb128 0x23
 4252 0b5f 0E030000 		.4byte	.LASF154
 4253 0b63 09       		.byte	0x9
 4254 0b64 71       		.byte	0x71
 4255 0b65 D2030000 		.4byte	0x3d2
 4256 0b69 05       		.uleb128 0x5
 4257 0b6a 03       		.byte	0x3
 4258 0b6b 00000000 		.4byte	alarmSync
 4259 0b6f 23       		.uleb128 0x23
 4260 0b70 AD010000 		.4byte	.LASF155
 4261 0b74 09       		.byte	0x9
 4262 0b75 72       		.byte	0x72
 4263 0b76 AD000000 		.4byte	0xad
 4264 0b7a 05       		.uleb128 0x5
 4265 0b7b 03       		.byte	0x3
 4266 0b7c 00000000 		.4byte	timeToSync
 4267 0b80 23       		.uleb128 0x23
 4268 0b81 FA040000 		.4byte	.LASF156
 4269 0b85 09       		.byte	0x9
 4270 0b86 73       		.byte	0x73
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 95


 4271 0b87 AD000000 		.4byte	0xad
 4272 0b8b 05       		.uleb128 0x5
 4273 0b8c 03       		.byte	0x3
 4274 0b8d 00000000 		.4byte	timeToSycnRemoteParams
 4275 0b91 25       		.uleb128 0x25
 4276 0b92 68657900 		.ascii	"hey\000"
 4277 0b96 09       		.byte	0x9
 4278 0b97 74       		.byte	0x74
 4279 0b98 AD000000 		.4byte	0xad
 4280 0b9c 05       		.uleb128 0x5
 4281 0b9d 03       		.byte	0x3
 4282 0b9e 00000000 		.4byte	hey
 4283 0ba2 08       		.uleb128 0x8
 4284 0ba3 F7000000 		.4byte	0xf7
 4285 0ba7 B30B0000 		.4byte	0xbb3
 4286 0bab 24       		.uleb128 0x24
 4287 0bac 05010000 		.4byte	0x105
 4288 0bb0 FF03     		.2byte	0x3ff
 4289 0bb2 00       		.byte	0
 4290 0bb3 23       		.uleb128 0x23
 4291 0bb4 D2040000 		.4byte	.LASF157
 4292 0bb8 01       		.byte	0x1
 4293 0bb9 05       		.byte	0x5
 4294 0bba A20B0000 		.4byte	0xba2
 4295 0bbe 05       		.uleb128 0x5
 4296 0bbf 03       		.byte	0x3
 4297 0bc0 00000000 		.4byte	uart_received_string
 4298 0bc4 23       		.uleb128 0x23
 4299 0bc5 F1060000 		.4byte	.LASF158
 4300 0bc9 01       		.byte	0x1
 4301 0bca 06       		.byte	0x6
 4302 0bcb D1000000 		.4byte	0xd1
 4303 0bcf 05       		.uleb128 0x5
 4304 0bd0 03       		.byte	0x3
 4305 0bd1 00000000 		.4byte	uart_string_index
 4306 0bd5 00       		.byte	0
 4307              		.section	.debug_abbrev,"",%progbits
 4308              	.Ldebug_abbrev0:
 4309 0000 01       		.uleb128 0x1
 4310 0001 11       		.uleb128 0x11
 4311 0002 01       		.byte	0x1
 4312 0003 25       		.uleb128 0x25
 4313 0004 0E       		.uleb128 0xe
 4314 0005 13       		.uleb128 0x13
 4315 0006 0B       		.uleb128 0xb
 4316 0007 03       		.uleb128 0x3
 4317 0008 0E       		.uleb128 0xe
 4318 0009 1B       		.uleb128 0x1b
 4319 000a 0E       		.uleb128 0xe
 4320 000b 55       		.uleb128 0x55
 4321 000c 17       		.uleb128 0x17
 4322 000d 11       		.uleb128 0x11
 4323 000e 01       		.uleb128 0x1
 4324 000f 10       		.uleb128 0x10
 4325 0010 17       		.uleb128 0x17
 4326 0011 00       		.byte	0
 4327 0012 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 96


 4328 0013 02       		.uleb128 0x2
 4329 0014 24       		.uleb128 0x24
 4330 0015 00       		.byte	0
 4331 0016 0B       		.uleb128 0xb
 4332 0017 0B       		.uleb128 0xb
 4333 0018 3E       		.uleb128 0x3e
 4334 0019 0B       		.uleb128 0xb
 4335 001a 03       		.uleb128 0x3
 4336 001b 0E       		.uleb128 0xe
 4337 001c 00       		.byte	0
 4338 001d 00       		.byte	0
 4339 001e 03       		.uleb128 0x3
 4340 001f 16       		.uleb128 0x16
 4341 0020 00       		.byte	0
 4342 0021 03       		.uleb128 0x3
 4343 0022 0E       		.uleb128 0xe
 4344 0023 3A       		.uleb128 0x3a
 4345 0024 0B       		.uleb128 0xb
 4346 0025 3B       		.uleb128 0x3b
 4347 0026 0B       		.uleb128 0xb
 4348 0027 49       		.uleb128 0x49
 4349 0028 13       		.uleb128 0x13
 4350 0029 00       		.byte	0
 4351 002a 00       		.byte	0
 4352 002b 04       		.uleb128 0x4
 4353 002c 24       		.uleb128 0x24
 4354 002d 00       		.byte	0
 4355 002e 0B       		.uleb128 0xb
 4356 002f 0B       		.uleb128 0xb
 4357 0030 3E       		.uleb128 0x3e
 4358 0031 0B       		.uleb128 0xb
 4359 0032 03       		.uleb128 0x3
 4360 0033 08       		.uleb128 0x8
 4361 0034 00       		.byte	0
 4362 0035 00       		.byte	0
 4363 0036 05       		.uleb128 0x5
 4364 0037 16       		.uleb128 0x16
 4365 0038 00       		.byte	0
 4366 0039 03       		.uleb128 0x3
 4367 003a 0E       		.uleb128 0xe
 4368 003b 3A       		.uleb128 0x3a
 4369 003c 0B       		.uleb128 0xb
 4370 003d 3B       		.uleb128 0x3b
 4371 003e 05       		.uleb128 0x5
 4372 003f 49       		.uleb128 0x49
 4373 0040 13       		.uleb128 0x13
 4374 0041 00       		.byte	0
 4375 0042 00       		.byte	0
 4376 0043 06       		.uleb128 0x6
 4377 0044 0F       		.uleb128 0xf
 4378 0045 00       		.byte	0
 4379 0046 0B       		.uleb128 0xb
 4380 0047 0B       		.uleb128 0xb
 4381 0048 49       		.uleb128 0x49
 4382 0049 13       		.uleb128 0x13
 4383 004a 00       		.byte	0
 4384 004b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 97


 4385 004c 07       		.uleb128 0x7
 4386 004d 26       		.uleb128 0x26
 4387 004e 00       		.byte	0
 4388 004f 49       		.uleb128 0x49
 4389 0050 13       		.uleb128 0x13
 4390 0051 00       		.byte	0
 4391 0052 00       		.byte	0
 4392 0053 08       		.uleb128 0x8
 4393 0054 01       		.uleb128 0x1
 4394 0055 01       		.byte	0x1
 4395 0056 49       		.uleb128 0x49
 4396 0057 13       		.uleb128 0x13
 4397 0058 01       		.uleb128 0x1
 4398 0059 13       		.uleb128 0x13
 4399 005a 00       		.byte	0
 4400 005b 00       		.byte	0
 4401 005c 09       		.uleb128 0x9
 4402 005d 21       		.uleb128 0x21
 4403 005e 00       		.byte	0
 4404 005f 49       		.uleb128 0x49
 4405 0060 13       		.uleb128 0x13
 4406 0061 2F       		.uleb128 0x2f
 4407 0062 0B       		.uleb128 0xb
 4408 0063 00       		.byte	0
 4409 0064 00       		.byte	0
 4410 0065 0A       		.uleb128 0xa
 4411 0066 13       		.uleb128 0x13
 4412 0067 01       		.byte	0x1
 4413 0068 03       		.uleb128 0x3
 4414 0069 08       		.uleb128 0x8
 4415 006a 0B       		.uleb128 0xb
 4416 006b 0B       		.uleb128 0xb
 4417 006c 3A       		.uleb128 0x3a
 4418 006d 0B       		.uleb128 0xb
 4419 006e 3B       		.uleb128 0x3b
 4420 006f 0B       		.uleb128 0xb
 4421 0070 01       		.uleb128 0x1
 4422 0071 13       		.uleb128 0x13
 4423 0072 00       		.byte	0
 4424 0073 00       		.byte	0
 4425 0074 0B       		.uleb128 0xb
 4426 0075 0D       		.uleb128 0xd
 4427 0076 00       		.byte	0
 4428 0077 03       		.uleb128 0x3
 4429 0078 0E       		.uleb128 0xe
 4430 0079 3A       		.uleb128 0x3a
 4431 007a 0B       		.uleb128 0xb
 4432 007b 3B       		.uleb128 0x3b
 4433 007c 0B       		.uleb128 0xb
 4434 007d 49       		.uleb128 0x49
 4435 007e 13       		.uleb128 0x13
 4436 007f 38       		.uleb128 0x38
 4437 0080 0B       		.uleb128 0xb
 4438 0081 00       		.byte	0
 4439 0082 00       		.byte	0
 4440 0083 0C       		.uleb128 0xc
 4441 0084 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 98


 4442 0085 01       		.byte	0x1
 4443 0086 0B       		.uleb128 0xb
 4444 0087 05       		.uleb128 0x5
 4445 0088 3A       		.uleb128 0x3a
 4446 0089 0B       		.uleb128 0xb
 4447 008a 3B       		.uleb128 0x3b
 4448 008b 0B       		.uleb128 0xb
 4449 008c 01       		.uleb128 0x1
 4450 008d 13       		.uleb128 0x13
 4451 008e 00       		.byte	0
 4452 008f 00       		.byte	0
 4453 0090 0D       		.uleb128 0xd
 4454 0091 13       		.uleb128 0x13
 4455 0092 01       		.byte	0x1
 4456 0093 0B       		.uleb128 0xb
 4457 0094 0B       		.uleb128 0xb
 4458 0095 3A       		.uleb128 0x3a
 4459 0096 0B       		.uleb128 0xb
 4460 0097 3B       		.uleb128 0x3b
 4461 0098 0B       		.uleb128 0xb
 4462 0099 01       		.uleb128 0x1
 4463 009a 13       		.uleb128 0x13
 4464 009b 00       		.byte	0
 4465 009c 00       		.byte	0
 4466 009d 0E       		.uleb128 0xe
 4467 009e 0D       		.uleb128 0xd
 4468 009f 00       		.byte	0
 4469 00a0 03       		.uleb128 0x3
 4470 00a1 08       		.uleb128 0x8
 4471 00a2 3A       		.uleb128 0x3a
 4472 00a3 0B       		.uleb128 0xb
 4473 00a4 3B       		.uleb128 0x3b
 4474 00a5 0B       		.uleb128 0xb
 4475 00a6 49       		.uleb128 0x49
 4476 00a7 13       		.uleb128 0x13
 4477 00a8 38       		.uleb128 0x38
 4478 00a9 0B       		.uleb128 0xb
 4479 00aa 00       		.byte	0
 4480 00ab 00       		.byte	0
 4481 00ac 0F       		.uleb128 0xf
 4482 00ad 35       		.uleb128 0x35
 4483 00ae 00       		.byte	0
 4484 00af 49       		.uleb128 0x49
 4485 00b0 13       		.uleb128 0x13
 4486 00b1 00       		.byte	0
 4487 00b2 00       		.byte	0
 4488 00b3 10       		.uleb128 0x10
 4489 00b4 2E       		.uleb128 0x2e
 4490 00b5 00       		.byte	0
 4491 00b6 3F       		.uleb128 0x3f
 4492 00b7 19       		.uleb128 0x19
 4493 00b8 03       		.uleb128 0x3
 4494 00b9 0E       		.uleb128 0xe
 4495 00ba 3A       		.uleb128 0x3a
 4496 00bb 0B       		.uleb128 0xb
 4497 00bc 3B       		.uleb128 0x3b
 4498 00bd 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 99


 4499 00be 27       		.uleb128 0x27
 4500 00bf 19       		.uleb128 0x19
 4501 00c0 11       		.uleb128 0x11
 4502 00c1 01       		.uleb128 0x1
 4503 00c2 12       		.uleb128 0x12
 4504 00c3 06       		.uleb128 0x6
 4505 00c4 40       		.uleb128 0x40
 4506 00c5 18       		.uleb128 0x18
 4507 00c6 9642     		.uleb128 0x2116
 4508 00c8 19       		.uleb128 0x19
 4509 00c9 00       		.byte	0
 4510 00ca 00       		.byte	0
 4511 00cb 11       		.uleb128 0x11
 4512 00cc 2E       		.uleb128 0x2e
 4513 00cd 00       		.byte	0
 4514 00ce 3F       		.uleb128 0x3f
 4515 00cf 19       		.uleb128 0x19
 4516 00d0 03       		.uleb128 0x3
 4517 00d1 0E       		.uleb128 0xe
 4518 00d2 3A       		.uleb128 0x3a
 4519 00d3 0B       		.uleb128 0xb
 4520 00d4 3B       		.uleb128 0x3b
 4521 00d5 0B       		.uleb128 0xb
 4522 00d6 11       		.uleb128 0x11
 4523 00d7 01       		.uleb128 0x1
 4524 00d8 12       		.uleb128 0x12
 4525 00d9 06       		.uleb128 0x6
 4526 00da 40       		.uleb128 0x40
 4527 00db 18       		.uleb128 0x18
 4528 00dc 9642     		.uleb128 0x2116
 4529 00de 19       		.uleb128 0x19
 4530 00df 00       		.byte	0
 4531 00e0 00       		.byte	0
 4532 00e1 12       		.uleb128 0x12
 4533 00e2 2E       		.uleb128 0x2e
 4534 00e3 01       		.byte	0x1
 4535 00e4 3F       		.uleb128 0x3f
 4536 00e5 19       		.uleb128 0x19
 4537 00e6 03       		.uleb128 0x3
 4538 00e7 0E       		.uleb128 0xe
 4539 00e8 3A       		.uleb128 0x3a
 4540 00e9 0B       		.uleb128 0xb
 4541 00ea 3B       		.uleb128 0x3b
 4542 00eb 0B       		.uleb128 0xb
 4543 00ec 49       		.uleb128 0x49
 4544 00ed 13       		.uleb128 0x13
 4545 00ee 11       		.uleb128 0x11
 4546 00ef 01       		.uleb128 0x1
 4547 00f0 12       		.uleb128 0x12
 4548 00f1 06       		.uleb128 0x6
 4549 00f2 40       		.uleb128 0x40
 4550 00f3 18       		.uleb128 0x18
 4551 00f4 9642     		.uleb128 0x2116
 4552 00f6 19       		.uleb128 0x19
 4553 00f7 01       		.uleb128 0x1
 4554 00f8 13       		.uleb128 0x13
 4555 00f9 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 100


 4556 00fa 00       		.byte	0
 4557 00fb 13       		.uleb128 0x13
 4558 00fc 34       		.uleb128 0x34
 4559 00fd 00       		.byte	0
 4560 00fe 03       		.uleb128 0x3
 4561 00ff 0E       		.uleb128 0xe
 4562 0100 3A       		.uleb128 0x3a
 4563 0101 0B       		.uleb128 0xb
 4564 0102 3B       		.uleb128 0x3b
 4565 0103 0B       		.uleb128 0xb
 4566 0104 49       		.uleb128 0x49
 4567 0105 13       		.uleb128 0x13
 4568 0106 02       		.uleb128 0x2
 4569 0107 18       		.uleb128 0x18
 4570 0108 00       		.byte	0
 4571 0109 00       		.byte	0
 4572 010a 14       		.uleb128 0x14
 4573 010b 0B       		.uleb128 0xb
 4574 010c 01       		.byte	0x1
 4575 010d 11       		.uleb128 0x11
 4576 010e 01       		.uleb128 0x1
 4577 010f 12       		.uleb128 0x12
 4578 0110 06       		.uleb128 0x6
 4579 0111 00       		.byte	0
 4580 0112 00       		.byte	0
 4581 0113 15       		.uleb128 0x15
 4582 0114 2E       		.uleb128 0x2e
 4583 0115 01       		.byte	0x1
 4584 0116 3F       		.uleb128 0x3f
 4585 0117 19       		.uleb128 0x19
 4586 0118 03       		.uleb128 0x3
 4587 0119 0E       		.uleb128 0xe
 4588 011a 3A       		.uleb128 0x3a
 4589 011b 0B       		.uleb128 0xb
 4590 011c 3B       		.uleb128 0x3b
 4591 011d 0B       		.uleb128 0xb
 4592 011e 27       		.uleb128 0x27
 4593 011f 19       		.uleb128 0x19
 4594 0120 49       		.uleb128 0x49
 4595 0121 13       		.uleb128 0x13
 4596 0122 11       		.uleb128 0x11
 4597 0123 01       		.uleb128 0x1
 4598 0124 12       		.uleb128 0x12
 4599 0125 06       		.uleb128 0x6
 4600 0126 40       		.uleb128 0x40
 4601 0127 18       		.uleb128 0x18
 4602 0128 9642     		.uleb128 0x2116
 4603 012a 19       		.uleb128 0x19
 4604 012b 01       		.uleb128 0x1
 4605 012c 13       		.uleb128 0x13
 4606 012d 00       		.byte	0
 4607 012e 00       		.byte	0
 4608 012f 16       		.uleb128 0x16
 4609 0130 05       		.uleb128 0x5
 4610 0131 00       		.byte	0
 4611 0132 03       		.uleb128 0x3
 4612 0133 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 101


 4613 0134 3A       		.uleb128 0x3a
 4614 0135 0B       		.uleb128 0xb
 4615 0136 3B       		.uleb128 0x3b
 4616 0137 0B       		.uleb128 0xb
 4617 0138 49       		.uleb128 0x49
 4618 0139 13       		.uleb128 0x13
 4619 013a 02       		.uleb128 0x2
 4620 013b 18       		.uleb128 0x18
 4621 013c 00       		.byte	0
 4622 013d 00       		.byte	0
 4623 013e 17       		.uleb128 0x17
 4624 013f 34       		.uleb128 0x34
 4625 0140 00       		.byte	0
 4626 0141 03       		.uleb128 0x3
 4627 0142 08       		.uleb128 0x8
 4628 0143 3A       		.uleb128 0x3a
 4629 0144 0B       		.uleb128 0xb
 4630 0145 3B       		.uleb128 0x3b
 4631 0146 0B       		.uleb128 0xb
 4632 0147 49       		.uleb128 0x49
 4633 0148 13       		.uleb128 0x13
 4634 0149 02       		.uleb128 0x2
 4635 014a 18       		.uleb128 0x18
 4636 014b 00       		.byte	0
 4637 014c 00       		.byte	0
 4638 014d 18       		.uleb128 0x18
 4639 014e 2E       		.uleb128 0x2e
 4640 014f 01       		.byte	0x1
 4641 0150 3F       		.uleb128 0x3f
 4642 0151 19       		.uleb128 0x19
 4643 0152 03       		.uleb128 0x3
 4644 0153 0E       		.uleb128 0xe
 4645 0154 3A       		.uleb128 0x3a
 4646 0155 0B       		.uleb128 0xb
 4647 0156 3B       		.uleb128 0x3b
 4648 0157 05       		.uleb128 0x5
 4649 0158 27       		.uleb128 0x27
 4650 0159 19       		.uleb128 0x19
 4651 015a 49       		.uleb128 0x49
 4652 015b 13       		.uleb128 0x13
 4653 015c 11       		.uleb128 0x11
 4654 015d 01       		.uleb128 0x1
 4655 015e 12       		.uleb128 0x12
 4656 015f 06       		.uleb128 0x6
 4657 0160 40       		.uleb128 0x40
 4658 0161 18       		.uleb128 0x18
 4659 0162 9642     		.uleb128 0x2116
 4660 0164 19       		.uleb128 0x19
 4661 0165 01       		.uleb128 0x1
 4662 0166 13       		.uleb128 0x13
 4663 0167 00       		.byte	0
 4664 0168 00       		.byte	0
 4665 0169 19       		.uleb128 0x19
 4666 016a 05       		.uleb128 0x5
 4667 016b 00       		.byte	0
 4668 016c 03       		.uleb128 0x3
 4669 016d 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 102


 4670 016e 3A       		.uleb128 0x3a
 4671 016f 0B       		.uleb128 0xb
 4672 0170 3B       		.uleb128 0x3b
 4673 0171 05       		.uleb128 0x5
 4674 0172 49       		.uleb128 0x49
 4675 0173 13       		.uleb128 0x13
 4676 0174 02       		.uleb128 0x2
 4677 0175 18       		.uleb128 0x18
 4678 0176 00       		.byte	0
 4679 0177 00       		.byte	0
 4680 0178 1A       		.uleb128 0x1a
 4681 0179 34       		.uleb128 0x34
 4682 017a 00       		.byte	0
 4683 017b 03       		.uleb128 0x3
 4684 017c 08       		.uleb128 0x8
 4685 017d 3A       		.uleb128 0x3a
 4686 017e 0B       		.uleb128 0xb
 4687 017f 3B       		.uleb128 0x3b
 4688 0180 05       		.uleb128 0x5
 4689 0181 49       		.uleb128 0x49
 4690 0182 13       		.uleb128 0x13
 4691 0183 02       		.uleb128 0x2
 4692 0184 18       		.uleb128 0x18
 4693 0185 00       		.byte	0
 4694 0186 00       		.byte	0
 4695 0187 1B       		.uleb128 0x1b
 4696 0188 2E       		.uleb128 0x2e
 4697 0189 01       		.byte	0x1
 4698 018a 3F       		.uleb128 0x3f
 4699 018b 19       		.uleb128 0x19
 4700 018c 03       		.uleb128 0x3
 4701 018d 0E       		.uleb128 0xe
 4702 018e 3A       		.uleb128 0x3a
 4703 018f 0B       		.uleb128 0xb
 4704 0190 3B       		.uleb128 0x3b
 4705 0191 05       		.uleb128 0x5
 4706 0192 49       		.uleb128 0x49
 4707 0193 13       		.uleb128 0x13
 4708 0194 11       		.uleb128 0x11
 4709 0195 01       		.uleb128 0x1
 4710 0196 12       		.uleb128 0x12
 4711 0197 06       		.uleb128 0x6
 4712 0198 40       		.uleb128 0x40
 4713 0199 18       		.uleb128 0x18
 4714 019a 9642     		.uleb128 0x2116
 4715 019c 19       		.uleb128 0x19
 4716 019d 01       		.uleb128 0x1
 4717 019e 13       		.uleb128 0x13
 4718 019f 00       		.byte	0
 4719 01a0 00       		.byte	0
 4720 01a1 1C       		.uleb128 0x1c
 4721 01a2 34       		.uleb128 0x34
 4722 01a3 00       		.byte	0
 4723 01a4 03       		.uleb128 0x3
 4724 01a5 0E       		.uleb128 0xe
 4725 01a6 3A       		.uleb128 0x3a
 4726 01a7 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 103


 4727 01a8 3B       		.uleb128 0x3b
 4728 01a9 05       		.uleb128 0x5
 4729 01aa 49       		.uleb128 0x49
 4730 01ab 13       		.uleb128 0x13
 4731 01ac 02       		.uleb128 0x2
 4732 01ad 18       		.uleb128 0x18
 4733 01ae 00       		.byte	0
 4734 01af 00       		.byte	0
 4735 01b0 1D       		.uleb128 0x1d
 4736 01b1 2E       		.uleb128 0x2e
 4737 01b2 00       		.byte	0
 4738 01b3 3F       		.uleb128 0x3f
 4739 01b4 19       		.uleb128 0x19
 4740 01b5 03       		.uleb128 0x3
 4741 01b6 0E       		.uleb128 0xe
 4742 01b7 3A       		.uleb128 0x3a
 4743 01b8 0B       		.uleb128 0xb
 4744 01b9 3B       		.uleb128 0x3b
 4745 01ba 05       		.uleb128 0x5
 4746 01bb 11       		.uleb128 0x11
 4747 01bc 01       		.uleb128 0x1
 4748 01bd 12       		.uleb128 0x12
 4749 01be 06       		.uleb128 0x6
 4750 01bf 40       		.uleb128 0x40
 4751 01c0 18       		.uleb128 0x18
 4752 01c1 9642     		.uleb128 0x2116
 4753 01c3 19       		.uleb128 0x19
 4754 01c4 00       		.byte	0
 4755 01c5 00       		.byte	0
 4756 01c6 1E       		.uleb128 0x1e
 4757 01c7 2E       		.uleb128 0x2e
 4758 01c8 00       		.byte	0
 4759 01c9 3F       		.uleb128 0x3f
 4760 01ca 19       		.uleb128 0x19
 4761 01cb 03       		.uleb128 0x3
 4762 01cc 0E       		.uleb128 0xe
 4763 01cd 3A       		.uleb128 0x3a
 4764 01ce 0B       		.uleb128 0xb
 4765 01cf 3B       		.uleb128 0x3b
 4766 01d0 05       		.uleb128 0x5
 4767 01d1 49       		.uleb128 0x49
 4768 01d2 13       		.uleb128 0x13
 4769 01d3 11       		.uleb128 0x11
 4770 01d4 01       		.uleb128 0x1
 4771 01d5 12       		.uleb128 0x12
 4772 01d6 06       		.uleb128 0x6
 4773 01d7 40       		.uleb128 0x40
 4774 01d8 18       		.uleb128 0x18
 4775 01d9 9642     		.uleb128 0x2116
 4776 01db 19       		.uleb128 0x19
 4777 01dc 00       		.byte	0
 4778 01dd 00       		.byte	0
 4779 01de 1F       		.uleb128 0x1f
 4780 01df 2E       		.uleb128 0x2e
 4781 01e0 01       		.byte	0x1
 4782 01e1 3F       		.uleb128 0x3f
 4783 01e2 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 104


 4784 01e3 03       		.uleb128 0x3
 4785 01e4 0E       		.uleb128 0xe
 4786 01e5 3A       		.uleb128 0x3a
 4787 01e6 0B       		.uleb128 0xb
 4788 01e7 3B       		.uleb128 0x3b
 4789 01e8 05       		.uleb128 0x5
 4790 01e9 11       		.uleb128 0x11
 4791 01ea 01       		.uleb128 0x1
 4792 01eb 12       		.uleb128 0x12
 4793 01ec 06       		.uleb128 0x6
 4794 01ed 40       		.uleb128 0x40
 4795 01ee 18       		.uleb128 0x18
 4796 01ef 9642     		.uleb128 0x2116
 4797 01f1 19       		.uleb128 0x19
 4798 01f2 01       		.uleb128 0x1
 4799 01f3 13       		.uleb128 0x13
 4800 01f4 00       		.byte	0
 4801 01f5 00       		.byte	0
 4802 01f6 20       		.uleb128 0x20
 4803 01f7 2E       		.uleb128 0x2e
 4804 01f8 00       		.byte	0
 4805 01f9 3F       		.uleb128 0x3f
 4806 01fa 19       		.uleb128 0x19
 4807 01fb 03       		.uleb128 0x3
 4808 01fc 0E       		.uleb128 0xe
 4809 01fd 3A       		.uleb128 0x3a
 4810 01fe 0B       		.uleb128 0xb
 4811 01ff 3B       		.uleb128 0x3b
 4812 0200 05       		.uleb128 0x5
 4813 0201 11       		.uleb128 0x11
 4814 0202 01       		.uleb128 0x1
 4815 0203 12       		.uleb128 0x12
 4816 0204 06       		.uleb128 0x6
 4817 0205 40       		.uleb128 0x40
 4818 0206 18       		.uleb128 0x18
 4819 0207 9742     		.uleb128 0x2117
 4820 0209 19       		.uleb128 0x19
 4821 020a 00       		.byte	0
 4822 020b 00       		.byte	0
 4823 020c 21       		.uleb128 0x21
 4824 020d 2E       		.uleb128 0x2e
 4825 020e 00       		.byte	0
 4826 020f 3F       		.uleb128 0x3f
 4827 0210 19       		.uleb128 0x19
 4828 0211 03       		.uleb128 0x3
 4829 0212 0E       		.uleb128 0xe
 4830 0213 3A       		.uleb128 0x3a
 4831 0214 0B       		.uleb128 0xb
 4832 0215 3B       		.uleb128 0x3b
 4833 0216 05       		.uleb128 0x5
 4834 0217 49       		.uleb128 0x49
 4835 0218 13       		.uleb128 0x13
 4836 0219 11       		.uleb128 0x11
 4837 021a 01       		.uleb128 0x1
 4838 021b 12       		.uleb128 0x12
 4839 021c 06       		.uleb128 0x6
 4840 021d 40       		.uleb128 0x40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 105


 4841 021e 18       		.uleb128 0x18
 4842 021f 9742     		.uleb128 0x2117
 4843 0221 19       		.uleb128 0x19
 4844 0222 00       		.byte	0
 4845 0223 00       		.byte	0
 4846 0224 22       		.uleb128 0x22
 4847 0225 34       		.uleb128 0x34
 4848 0226 00       		.byte	0
 4849 0227 03       		.uleb128 0x3
 4850 0228 0E       		.uleb128 0xe
 4851 0229 3A       		.uleb128 0x3a
 4852 022a 0B       		.uleb128 0xb
 4853 022b 3B       		.uleb128 0x3b
 4854 022c 05       		.uleb128 0x5
 4855 022d 49       		.uleb128 0x49
 4856 022e 13       		.uleb128 0x13
 4857 022f 3F       		.uleb128 0x3f
 4858 0230 19       		.uleb128 0x19
 4859 0231 3C       		.uleb128 0x3c
 4860 0232 19       		.uleb128 0x19
 4861 0233 00       		.byte	0
 4862 0234 00       		.byte	0
 4863 0235 23       		.uleb128 0x23
 4864 0236 34       		.uleb128 0x34
 4865 0237 00       		.byte	0
 4866 0238 03       		.uleb128 0x3
 4867 0239 0E       		.uleb128 0xe
 4868 023a 3A       		.uleb128 0x3a
 4869 023b 0B       		.uleb128 0xb
 4870 023c 3B       		.uleb128 0x3b
 4871 023d 0B       		.uleb128 0xb
 4872 023e 49       		.uleb128 0x49
 4873 023f 13       		.uleb128 0x13
 4874 0240 3F       		.uleb128 0x3f
 4875 0241 19       		.uleb128 0x19
 4876 0242 02       		.uleb128 0x2
 4877 0243 18       		.uleb128 0x18
 4878 0244 00       		.byte	0
 4879 0245 00       		.byte	0
 4880 0246 24       		.uleb128 0x24
 4881 0247 21       		.uleb128 0x21
 4882 0248 00       		.byte	0
 4883 0249 49       		.uleb128 0x49
 4884 024a 13       		.uleb128 0x13
 4885 024b 2F       		.uleb128 0x2f
 4886 024c 05       		.uleb128 0x5
 4887 024d 00       		.byte	0
 4888 024e 00       		.byte	0
 4889 024f 25       		.uleb128 0x25
 4890 0250 34       		.uleb128 0x34
 4891 0251 00       		.byte	0
 4892 0252 03       		.uleb128 0x3
 4893 0253 08       		.uleb128 0x8
 4894 0254 3A       		.uleb128 0x3a
 4895 0255 0B       		.uleb128 0xb
 4896 0256 3B       		.uleb128 0x3b
 4897 0257 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 106


 4898 0258 49       		.uleb128 0x49
 4899 0259 13       		.uleb128 0x13
 4900 025a 3F       		.uleb128 0x3f
 4901 025b 19       		.uleb128 0x19
 4902 025c 02       		.uleb128 0x2
 4903 025d 18       		.uleb128 0x18
 4904 025e 00       		.byte	0
 4905 025f 00       		.byte	0
 4906 0260 00       		.byte	0
 4907              		.section	.debug_aranges,"",%progbits
 4908 0000 D4000000 		.4byte	0xd4
 4909 0004 0200     		.2byte	0x2
 4910 0006 00000000 		.4byte	.Ldebug_info0
 4911 000a 04       		.byte	0x4
 4912 000b 00       		.byte	0
 4913 000c 0000     		.2byte	0
 4914 000e 0000     		.2byte	0
 4915 0010 00000000 		.4byte	.LFB64
 4916 0014 44000000 		.4byte	.LFE64-.LFB64
 4917 0018 00000000 		.4byte	.LFB65
 4918 001c 6C000000 		.4byte	.LFE65-.LFB65
 4919 0020 00000000 		.4byte	.LFB66
 4920 0024 32000000 		.4byte	.LFE66-.LFB66
 4921 0028 00000000 		.4byte	.LFB67
 4922 002c 20000000 		.4byte	.LFE67-.LFB67
 4923 0030 00000000 		.4byte	.LFB68
 4924 0034 40000000 		.4byte	.LFE68-.LFB68
 4925 0038 00000000 		.4byte	.LFB69
 4926 003c DC000000 		.4byte	.LFE69-.LFB69
 4927 0040 00000000 		.4byte	.LFB70
 4928 0044 1C000000 		.4byte	.LFE70-.LFB70
 4929 0048 00000000 		.4byte	.LFB71
 4930 004c 28000000 		.4byte	.LFE71-.LFB71
 4931 0050 00000000 		.4byte	.LFB72
 4932 0054 B8000000 		.4byte	.LFE72-.LFB72
 4933 0058 00000000 		.4byte	.LFB73
 4934 005c 00010000 		.4byte	.LFE73-.LFB73
 4935 0060 00000000 		.4byte	.LFB74
 4936 0064 78000000 		.4byte	.LFE74-.LFB74
 4937 0068 00000000 		.4byte	.LFB75
 4938 006c 3C010000 		.4byte	.LFE75-.LFB75
 4939 0070 00000000 		.4byte	.LFB76
 4940 0074 B8000000 		.4byte	.LFE76-.LFB76
 4941 0078 00000000 		.4byte	.LFB77
 4942 007c 1C000000 		.4byte	.LFE77-.LFB77
 4943 0080 00000000 		.4byte	.LFB78
 4944 0084 28000000 		.4byte	.LFE78-.LFB78
 4945 0088 00000000 		.4byte	.LFB79
 4946 008c 84000000 		.4byte	.LFE79-.LFB79
 4947 0090 00000000 		.4byte	.LFB80
 4948 0094 30000000 		.4byte	.LFE80-.LFB80
 4949 0098 00000000 		.4byte	.LFB81
 4950 009c 04020000 		.4byte	.LFE81-.LFB81
 4951 00a0 00000000 		.4byte	.LFB82
 4952 00a4 68010000 		.4byte	.LFE82-.LFB82
 4953 00a8 00000000 		.4byte	.LFB83
 4954 00ac 44010000 		.4byte	.LFE83-.LFB83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 107


 4955 00b0 00000000 		.4byte	.LFB84
 4956 00b4 14000000 		.4byte	.LFE84-.LFB84
 4957 00b8 00000000 		.4byte	.LFB85
 4958 00bc 1A000000 		.4byte	.LFE85-.LFB85
 4959 00c0 00000000 		.4byte	.LFB86
 4960 00c4 2A000000 		.4byte	.LFE86-.LFB86
 4961 00c8 00000000 		.4byte	.LFB87
 4962 00cc 7C020000 		.4byte	.LFE87-.LFB87
 4963 00d0 00000000 		.4byte	0
 4964 00d4 00000000 		.4byte	0
 4965              		.section	.debug_ranges,"",%progbits
 4966              	.Ldebug_ranges0:
 4967 0000 00000000 		.4byte	.LFB64
 4968 0004 44000000 		.4byte	.LFE64
 4969 0008 00000000 		.4byte	.LFB65
 4970 000c 6C000000 		.4byte	.LFE65
 4971 0010 00000000 		.4byte	.LFB66
 4972 0014 32000000 		.4byte	.LFE66
 4973 0018 00000000 		.4byte	.LFB67
 4974 001c 20000000 		.4byte	.LFE67
 4975 0020 00000000 		.4byte	.LFB68
 4976 0024 40000000 		.4byte	.LFE68
 4977 0028 00000000 		.4byte	.LFB69
 4978 002c DC000000 		.4byte	.LFE69
 4979 0030 00000000 		.4byte	.LFB70
 4980 0034 1C000000 		.4byte	.LFE70
 4981 0038 00000000 		.4byte	.LFB71
 4982 003c 28000000 		.4byte	.LFE71
 4983 0040 00000000 		.4byte	.LFB72
 4984 0044 B8000000 		.4byte	.LFE72
 4985 0048 00000000 		.4byte	.LFB73
 4986 004c 00010000 		.4byte	.LFE73
 4987 0050 00000000 		.4byte	.LFB74
 4988 0054 78000000 		.4byte	.LFE74
 4989 0058 00000000 		.4byte	.LFB75
 4990 005c 3C010000 		.4byte	.LFE75
 4991 0060 00000000 		.4byte	.LFB76
 4992 0064 B8000000 		.4byte	.LFE76
 4993 0068 00000000 		.4byte	.LFB77
 4994 006c 1C000000 		.4byte	.LFE77
 4995 0070 00000000 		.4byte	.LFB78
 4996 0074 28000000 		.4byte	.LFE78
 4997 0078 00000000 		.4byte	.LFB79
 4998 007c 84000000 		.4byte	.LFE79
 4999 0080 00000000 		.4byte	.LFB80
 5000 0084 30000000 		.4byte	.LFE80
 5001 0088 00000000 		.4byte	.LFB81
 5002 008c 04020000 		.4byte	.LFE81
 5003 0090 00000000 		.4byte	.LFB82
 5004 0094 68010000 		.4byte	.LFE82
 5005 0098 00000000 		.4byte	.LFB83
 5006 009c 44010000 		.4byte	.LFE83
 5007 00a0 00000000 		.4byte	.LFB84
 5008 00a4 14000000 		.4byte	.LFE84
 5009 00a8 00000000 		.4byte	.LFB85
 5010 00ac 1A000000 		.4byte	.LFE85
 5011 00b0 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 108


 5012 00b4 2A000000 		.4byte	.LFE86
 5013 00b8 00000000 		.4byte	.LFB87
 5014 00bc 7C020000 		.4byte	.LFE87
 5015 00c0 00000000 		.4byte	0
 5016 00c4 00000000 		.4byte	0
 5017              		.section	.debug_line,"",%progbits
 5018              	.Ldebug_line0:
 5019 0000 4A050000 		.section	.debug_str,"MS",%progbits,1
 5019      0200EF01 
 5019      00000201 
 5019      FB0E0D00 
 5019      01010101 
 5020              	.LASF131:
 5021 0000 676D745F 		.ascii	"gmt_offset\000"
 5021      6F666673 
 5021      657400
 5022              	.LASF16:
 5023 000b 75696E74 		.ascii	"uint16\000"
 5023      313600
 5024              	.LASF38:
 5025 0012 76616C75 		.ascii	"value\000"
 5025      6500
 5026              	.LASF27:
 5027 0018 746D5F68 		.ascii	"tm_hour\000"
 5027      6F757200 
 5028              	.LASF32:
 5029 0020 746D5F79 		.ascii	"tm_yday\000"
 5029      64617900 
 5030              	.LASF139:
 5031 0028 62756666 		.ascii	"buffer_overflow\000"
 5031      65725F6F 
 5031      76657266 
 5031      6C6F7700 
 5032              	.LASF4:
 5033 0038 5F5F7569 		.ascii	"__uint8_t\000"
 5033      6E74385F 
 5033      7400
 5034              	.LASF69:
 5035 0042 636F756E 		.ascii	"countDownResetCondition\000"
 5035      74446F77 
 5035      6E526573 
 5035      6574436F 
 5035      6E646974 
 5036              	.LASF54:
 5037 005a 6C6F6E67 		.ascii	"longitude\000"
 5037      69747564 
 5037      6500
 5038              	.LASF159:
 5039 0064 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5039      43313120 
 5039      352E342E 
 5039      31203230 
 5039      31363036 
 5040 0097 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5040      20726576 
 5040      6973696F 
 5040      6E203233 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 109


 5040      37373135 
 5041 00ca 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5041      66756E63 
 5041      74696F6E 
 5041      2D736563 
 5041      74696F6E 
 5042              	.LASF134:
 5043 00f2 6D6F6465 		.ascii	"modem_wakeup\000"
 5043      6D5F7761 
 5043      6B657570 
 5043      00
 5044              	.LASF10:
 5045 00ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 5045      206C6F6E 
 5045      6720756E 
 5045      7369676E 
 5045      65642069 
 5046              	.LASF119:
 5047 0116 73616D70 		.ascii	"sample_freq\000"
 5047      6C655F66 
 5047      72657100 
 5048              	.LASF143:
 5049 0122 6D6F6465 		.ascii	"modem_state\000"
 5049      6D5F7374 
 5049      61746500 
 5050              	.LASF96:
 5051 012e 74657374 		.ascii	"test\000"
 5051      00
 5052              	.LASF152:
 5053 0133 616C6172 		.ascii	"alarmMeasure\000"
 5053      6D4D6561 
 5053      73757265 
 5053      00
 5054              	.LASF138:
 5055 0140 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5055      52784275 
 5055      66666572 
 5055      00
 5056              	.LASF145:
 5057 014d 6D6F6465 		.ascii	"modem_stats\000"
 5057      6D5F7374 
 5057      61747300 
 5058              	.LASF9:
 5059 0159 6C6F6E67 		.ascii	"long long int\000"
 5059      206C6F6E 
 5059      6720696E 
 5059      7400
 5060              	.LASF0:
 5061 0167 7369676E 		.ascii	"signed char\000"
 5061      65642063 
 5061      68617200 
 5062              	.LASF47:
 5063 0173 65636E6F 		.ascii	"ecno\000"
 5063      00
 5064              	.LASF66:
 5065 0178 636F756E 		.ascii	"countDownValue\000"
 5065      74446F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 110


 5065      6E56616C 
 5065      756500
 5066              	.LASF153:
 5067 0187 74696D65 		.ascii	"timeToMeasure\000"
 5067      546F4D65 
 5067      61737572 
 5067      6500
 5068              	.LASF50:
 5069 0195 74696D65 		.ascii	"time_to_network_connect\000"
 5069      5F746F5F 
 5069      6E657477 
 5069      6F726B5F 
 5069      636F6E6E 
 5070              	.LASF155:
 5071 01ad 74696D65 		.ascii	"timeToSync\000"
 5071      546F5379 
 5071      6E6300
 5072              	.LASF148:
 5073 01b8 68747470 		.ascii	"http_body\000"
 5073      5F626F64 
 5073      7900
 5074              	.LASF107:
 5075 01c2 7365745F 		.ascii	"set_up_internet_connection\000"
 5075      75705F69 
 5075      6E746572 
 5075      6E65745F 
 5075      636F6E6E 
 5076              	.LASF130:
 5077 01dd 7365636F 		.ascii	"second\000"
 5077      6E6400
 5078              	.LASF126:
 5079 01e4 79656172 		.ascii	"year\000"
 5079      00
 5080              	.LASF45:
 5081 01e9 72786C65 		.ascii	"rxlev\000"
 5081      7600
 5082              	.LASF6:
 5083 01ef 6C6F6E67 		.ascii	"long int\000"
 5083      20696E74 
 5083      00
 5084              	.LASF67:
 5085 01f8 63757272 		.ascii	"currentCountDownValue\000"
 5085      656E7443 
 5085      6F756E74 
 5085      446F776E 
 5085      56616C75 
 5086              	.LASF132:
 5087 020e 6D6F6465 		.ascii	"modem_get_state\000"
 5087      6D5F6765 
 5087      745F7374 
 5087      61746500 
 5088              	.LASF55:
 5089 021e 616C7469 		.ascii	"altitude\000"
 5089      74756465 
 5089      00
 5090              	.LASF15:
 5091 0227 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 111


 5091      3800
 5092              	.LASF21:
 5093 022d 646F7562 		.ascii	"double\000"
 5093      6C6500
 5094              	.LASF19:
 5095 0234 696E7433 		.ascii	"int32\000"
 5095      3200
 5096              	.LASF59:
 5097 023a 6E6F6465 		.ascii	"node_type\000"
 5097      5F747970 
 5097      6500
 5098              	.LASF122:
 5099 0244 6D6F6465 		.ascii	"modem_configure_settings\000"
 5099      6D5F636F 
 5099      6E666967 
 5099      7572655F 
 5099      73657474 
 5100              	.LASF115:
 5101 025d 735F7369 		.ascii	"s_sim_type\000"
 5101      6D5F7479 
 5101      706500
 5102              	.LASF97:
 5103 0268 6E657477 		.ascii	"network_time\000"
 5103      6F726B5F 
 5103      74696D65 
 5103      00
 5104              	.LASF3:
 5105 0275 73686F72 		.ascii	"short unsigned int\000"
 5105      7420756E 
 5105      7369676E 
 5105      65642069 
 5105      6E7400
 5106              	.LASF17:
 5107 0288 75696E74 		.ascii	"uint32\000"
 5107      333200
 5108              	.LASF93:
 5109 028f 696E7465 		.ascii	"interval\000"
 5109      7276616C 
 5109      00
 5110              	.LASF7:
 5111 0298 5F5F7569 		.ascii	"__uint32_t\000"
 5111      6E743332 
 5111      5F7400
 5112              	.LASF124:
 5113 02a3 6D6F6465 		.ascii	"modem_get_network_time\000"
 5113      6D5F6765 
 5113      745F6E65 
 5113      74776F72 
 5113      6B5F7469 
 5114              	.LASF29:
 5115 02ba 746D5F6D 		.ascii	"tm_mon\000"
 5115      6F6E00
 5116              	.LASF63:
 5117 02c1 64656275 		.ascii	"debug_level\000"
 5117      675F6C65 
 5117      76656C00 
 5118              	.LASF133:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 112


 5119 02cd 6D6F6465 		.ascii	"modem_sleep\000"
 5119      6D5F736C 
 5119      65657000 
 5120              	.LASF118:
 5121 02d9 735F6465 		.ascii	"s_debug_freq\000"
 5121      6275675F 
 5121      66726571 
 5121      00
 5122              	.LASF111:
 5123 02e6 75706461 		.ascii	"updatable_parameters_initialize\000"
 5123      7461626C 
 5123      655F7061 
 5123      72616D65 
 5123      74657273 
 5124              	.LASF30:
 5125 0306 746D5F79 		.ascii	"tm_year\000"
 5125      65617200 
 5126              	.LASF154:
 5127 030e 616C6172 		.ascii	"alarmSync\000"
 5127      6D53796E 
 5127      6300
 5128              	.LASF79:
 5129 0318 70696E73 		.ascii	"pins_configure_active\000"
 5129      5F636F6E 
 5129      66696775 
 5129      72655F61 
 5129      63746976 
 5130              	.LASF40:
 5131 032e 6B65795F 		.ascii	"key_value_t\000"
 5131      76616C75 
 5131      655F7400 
 5132              	.LASF84:
 5133 033a 7077725F 		.ascii	"pwr_check\000"
 5133      63686563 
 5133      6B00
 5134              	.LASF8:
 5135 0344 6C6F6E67 		.ascii	"long unsigned int\000"
 5135      20756E73 
 5135      69676E65 
 5135      6420696E 
 5135      7400
 5136              	.LASF99:
 5137 0356 65787472 		.ascii	"extract_string\000"
 5137      6163745F 
 5137      73747269 
 5137      6E6700
 5138              	.LASF89:
 5139 0365 74696D65 		.ascii	"timeout\000"
 5139      6F757400 
 5140              	.LASF112:
 5141 036d 6765745F 		.ascii	"get_cell_network_stats\000"
 5141      63656C6C 
 5141      5F6E6574 
 5141      776F726B 
 5141      5F737461 
 5142              	.LASF56:
 5143 0384 74696D65 		.ascii	"time_to_lock\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 113


 5143      5F746F5F 
 5143      6C6F636B 
 5143      00
 5144              	.LASF142:
 5145 0391 64617461 		.ascii	"data\000"
 5145      00
 5146              	.LASF75:
 5147 0396 65705F70 		.ascii	"ep_port\000"
 5147      6F727400 
 5148              	.LASF33:
 5149 039e 746D5F69 		.ascii	"tm_isdst\000"
 5149      73647374 
 5149      00
 5150              	.LASF71:
 5151 03a7 6D6F6465 		.ascii	"modem_info\000"
 5151      6D5F696E 
 5151      666F00
 5152              	.LASF74:
 5153 03b2 65705F68 		.ascii	"ep_host\000"
 5153      6F737400 
 5154              	.LASF72:
 5155 03ba 63686970 		.ascii	"chip_uniqueId\000"
 5155      5F756E69 
 5155      71756549 
 5155      6400
 5156              	.LASF94:
 5157 03c8 6D6F6465 		.ascii	"modem_power_up\000"
 5157      6D5F706F 
 5157      7765725F 
 5157      757000
 5158              	.LASF160:
 5159 03d7 6D6F6465 		.ascii	"modem.c\000"
 5159      6D2E6300 
 5160              	.LASF101:
 5161 03df 62656769 		.ascii	"beginMarker\000"
 5161      6E4D6172 
 5161      6B657200 
 5162              	.LASF103:
 5163 03eb 74617267 		.ascii	"target\000"
 5163      657400
 5164              	.LASF51:
 5165 03f2 74696D65 		.ascii	"time_to_acquire_ip\000"
 5165      5F746F5F 
 5165      61637175 
 5165      6972655F 
 5165      697000
 5166              	.LASF102:
 5167 0405 656E644D 		.ascii	"endMarker\000"
 5167      61726B65 
 5167      7200
 5168              	.LASF2:
 5169 040f 73686F72 		.ascii	"short int\000"
 5169      7420696E 
 5169      7400
 5170              	.LASF125:
 5171 0419 65706F63 		.ascii	"epoch_time\000"
 5171      685F7469 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 114


 5171      6D6500
 5172              	.LASF5:
 5173 0424 5F5F696E 		.ascii	"__int32_t\000"
 5173      7433325F 
 5173      7400
 5174              	.LASF100:
 5175 042e 66726F6D 		.ascii	"from\000"
 5175      00
 5176              	.LASF106:
 5177 0433 63726567 		.ascii	"creg\000"
 5177      00
 5178              	.LASF121:
 5179 0438 64656275 		.ascii	"debug_freq\000"
 5179      675F6672 
 5179      657100
 5180              	.LASF90:
 5181 0443 61745F61 		.ascii	"at_attempt\000"
 5181      7474656D 
 5181      707400
 5182              	.LASF98:
 5183 044e 61745F77 		.ascii	"at_write_command\000"
 5183      72697465 
 5183      5F636F6D 
 5183      6D616E64 
 5183      00
 5184              	.LASF73:
 5185 045f 7379735F 		.ascii	"sys_info_t\000"
 5185      696E666F 
 5185      5F7400
 5186              	.LASF65:
 5187 046a 75706461 		.ascii	"updatable_parameters_t\000"
 5187      7461626C 
 5187      655F7061 
 5187      72616D65 
 5187      74657273 
 5188              	.LASF120:
 5189 0481 7265706F 		.ascii	"report_freq\000"
 5189      72745F66 
 5189      72657100 
 5190              	.LASF140:
 5191 048d 64617461 		.ascii	"dataPointsInStack\000"
 5191      506F696E 
 5191      7473496E 
 5191      53746163 
 5191      6B00
 5192              	.LASF26:
 5193 049f 746D5F6D 		.ascii	"tm_min\000"
 5193      696E00
 5194              	.LASF24:
 5195 04a6 73697A65 		.ascii	"sizetype\000"
 5195      74797065 
 5195      00
 5196              	.LASF127:
 5197 04af 6D6F6E74 		.ascii	"month\000"
 5197      6800
 5198              	.LASF105:
 5199 04b5 69735F63 		.ascii	"is_connected_to_cell_network\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 115


 5199      6F6E6E65 
 5199      63746564 
 5199      5F746F5F 
 5199      63656C6C 
 5200              	.LASF157:
 5201 04d2 75617274 		.ascii	"uart_received_string\000"
 5201      5F726563 
 5201      65697665 
 5201      645F7374 
 5201      72696E67 
 5202              	.LASF53:
 5203 04e7 6C617469 		.ascii	"latitude\000"
 5203      74756465 
 5203      00
 5204              	.LASF34:
 5205 04f0 74657374 		.ascii	"test_name\000"
 5205      5F6E616D 
 5205      6500
 5206              	.LASF156:
 5207 04fa 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5207      546F5379 
 5207      636E5265 
 5207      6D6F7465 
 5207      50617261 
 5208              	.LASF95:
 5209 0511 6D6F6465 		.ascii	"modem_test\000"
 5209      6D5F7465 
 5209      737400
 5210              	.LASF110:
 5211 051c 6D617463 		.ascii	"match\000"
 5211      6800
 5212              	.LASF146:
 5213 0522 75706461 		.ascii	"updatable_parameters\000"
 5213      7461626C 
 5213      655F7061 
 5213      72616D65 
 5213      74657273 
 5214              	.LASF128:
 5215 0537 686F7572 		.ascii	"hour\000"
 5215      00
 5216              	.LASF87:
 5217 053c 636F6D6D 		.ascii	"commands\000"
 5217      616E6473 
 5217      00
 5218              	.LASF91:
 5219 0545 636F6D70 		.ascii	"compare_location\000"
 5219      6172655F 
 5219      6C6F6361 
 5219      74696F6E 
 5219      00
 5220              	.LASF20:
 5221 0556 666C6F61 		.ascii	"float\000"
 5221      7400
 5222              	.LASF77:
 5223 055c 6D6F6465 		.ascii	"modem_initialize\000"
 5223      6D5F696E 
 5223      69746961 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 116


 5223      6C697A65 
 5223      00
 5224              	.LASF117:
 5225 056d 735F7265 		.ascii	"s_report_freq\000"
 5225      706F7274 
 5225      5F667265 
 5225      7100
 5226              	.LASF60:
 5227 057b 73696D5F 		.ascii	"sim_type\000"
 5227      74797065 
 5227      00
 5228              	.LASF108:
 5229 0584 6973725F 		.ascii	"isr_telit_rx\000"
 5229      74656C69 
 5229      745F7278 
 5229      00
 5230              	.LASF70:
 5231 0591 616C6172 		.ascii	"alarm\000"
 5231      6D00
 5232              	.LASF64:
 5233 0597 5F426F6F 		.ascii	"_Bool\000"
 5233      6C00
 5234              	.LASF13:
 5235 059d 696E7433 		.ascii	"int32_t\000"
 5235      325F7400 
 5236              	.LASF1:
 5237 05a5 756E7369 		.ascii	"unsigned char\000"
 5237      676E6564 
 5237      20636861 
 5237      7200
 5238              	.LASF151:
 5239 05b3 73797374 		.ascii	"system_settings\000"
 5239      656D5F73 
 5239      65747469 
 5239      6E677300 
 5240              	.LASF92:
 5241 05c3 64656C61 		.ascii	"delay\000"
 5241      7900
 5242              	.LASF48:
 5243 05c9 72737271 		.ascii	"rsrq\000"
 5243      00
 5244              	.LASF161:
 5245 05ce 473A5C4D 		.ascii	"G:\\My Drive\\notoriOS\\notoriOS\\notoriOS.cydsn\000"
 5245      79204472 
 5245      6976655C 
 5245      6E6F746F 
 5245      72694F53 
 5246              	.LASF62:
 5247 05fb 73796E63 		.ascii	"sync_time\000"
 5247      5F74696D 
 5247      6500
 5248              	.LASF114:
 5249 0605 735F6E6F 		.ascii	"s_node_type\000"
 5249      64655F74 
 5249      79706500 
 5250              	.LASF46:
 5251 0611 72736370 		.ascii	"rscp\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 117


 5251      00
 5252              	.LASF135:
 5253 0616 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5253      6D5F6765 
 5253      745F6770 
 5253      735F636F 
 5253      6F726469 
 5254              	.LASF37:
 5255 0630 74657374 		.ascii	"test_t\000"
 5255      5F7400
 5256              	.LASF150:
 5257 0637 73797374 		.ascii	"system_info\000"
 5257      656D5F69 
 5257      6E666F00 
 5258              	.LASF43:
 5259 0643 696D6569 		.ascii	"imei\000"
 5259      00
 5260              	.LASF36:
 5261 0648 72656173 		.ascii	"reason\000"
 5261      6F6E00
 5262              	.LASF49:
 5263 064f 72737270 		.ascii	"rsrp\000"
 5263      00
 5264              	.LASF52:
 5265 0654 6D6F6465 		.ascii	"modem_stats_t\000"
 5265      6D5F7374 
 5265      6174735F 
 5265      7400
 5266              	.LASF86:
 5267 0662 75617274 		.ascii	"uart_string_reset\000"
 5267      5F737472 
 5267      696E675F 
 5267      72657365 
 5267      7400
 5268              	.LASF31:
 5269 0674 746D5F77 		.ascii	"tm_wday\000"
 5269      64617900 
 5270              	.LASF85:
 5271 067c 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5271      6D5F736F 
 5271      66745F70 
 5271      6F776572 
 5271      5F637963 
 5272              	.LASF23:
 5273 0693 6C6F6E67 		.ascii	"long double\000"
 5273      20646F75 
 5273      626C6500 
 5274              	.LASF22:
 5275 069f 63686172 		.ascii	"char\000"
 5275      00
 5276              	.LASF104:
 5277 06a4 6D6F6465 		.ascii	"modem_process_tasks\000"
 5277      6D5F7072 
 5277      6F636573 
 5277      735F7461 
 5277      736B7300 
 5278              	.LASF11:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 118


 5279 06b8 756E7369 		.ascii	"unsigned int\000"
 5279      676E6564 
 5279      20696E74 
 5279      00
 5280              	.LASF123:
 5281 06c5 4346554E 		.ascii	"CFUN\000"
 5281      00
 5282              	.LASF42:
 5283 06ca 6D6F6465 		.ascii	"model_id\000"
 5283      6C5F6964 
 5283      00
 5284              	.LASF149:
 5285 06d3 68747470 		.ascii	"http_route\000"
 5285      5F726F75 
 5285      746500
 5286              	.LASF44:
 5287 06de 6D6F6465 		.ascii	"modem_info_t\000"
 5287      6D5F696E 
 5287      666F5F74 
 5287      00
 5288              	.LASF58:
 5289 06eb 6770735F 		.ascii	"gps_t\000"
 5289      7400
 5290              	.LASF158:
 5291 06f1 75617274 		.ascii	"uart_string_index\000"
 5291      5F737472 
 5291      696E675F 
 5291      696E6465 
 5291      7800
 5292              	.LASF61:
 5293 0703 6D656173 		.ascii	"measure_time\000"
 5293      7572655F 
 5293      74696D65 
 5293      00
 5294              	.LASF109:
 5295 0710 69735F63 		.ascii	"is_connected_to_internet\000"
 5295      6F6E6E65 
 5295      63746564 
 5295      5F746F5F 
 5295      696E7465 
 5296              	.LASF144:
 5297 0729 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5297      6D5F7374 
 5297      6172745F 
 5297      74696D65 
 5297      5F737461 
 5298              	.LASF137:
 5299 0740 6770735F 		.ascii	"gps_status\000"
 5299      73746174 
 5299      757300
 5300              	.LASF78:
 5301 074b 70696E73 		.ascii	"pins_configure_inactive\000"
 5301      5F636F6E 
 5301      66696775 
 5301      72655F69 
 5301      6E616374 
 5302              	.LASF41:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 119


 5303 0763 73696D5F 		.ascii	"sim_id\000"
 5303      696400
 5304              	.LASF28:
 5305 076a 746D5F6D 		.ascii	"tm_mday\000"
 5305      64617900 
 5306              	.LASF57:
 5307 0772 76616C69 		.ascii	"valid\000"
 5307      6400
 5308              	.LASF129:
 5309 0778 6D696E75 		.ascii	"minute\000"
 5309      746500
 5310              	.LASF14:
 5311 077f 75696E74 		.ascii	"uint32_t\000"
 5311      33325F74 
 5311      00
 5312              	.LASF25:
 5313 0788 746D5F73 		.ascii	"tm_sec\000"
 5313      656300
 5314              	.LASF113:
 5315 078f 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5315      75706461 
 5315      7465645F 
 5315      70617261 
 5315      6D657465 
 5316              	.LASF116:
 5317 07b2 735F7361 		.ascii	"s_sample_freq\000"
 5317      6D706C65 
 5317      5F667265 
 5317      7100
 5318              	.LASF35:
 5319 07c0 73746174 		.ascii	"status\000"
 5319      757300
 5320              	.LASF141:
 5321 07c7 64617461 		.ascii	"dataPointsInStackDesired\000"
 5321      506F696E 
 5321      7473496E 
 5321      53746163 
 5321      6B446573 
 5322              	.LASF76:
 5323 07e0 7379735F 		.ascii	"sys_settings_t\000"
 5323      73657474 
 5323      696E6773 
 5323      5F7400
 5324              	.LASF12:
 5325 07ef 75696E74 		.ascii	"uint8_t\000"
 5325      385F7400 
 5326              	.LASF18:
 5327 07f7 696E7431 		.ascii	"int16\000"
 5327      3600
 5328              	.LASF81:
 5329 07fd 61745F72 		.ascii	"at_ready\000"
 5329      65616479 
 5329      00
 5330              	.LASF82:
 5331 0806 61747465 		.ascii	"attempts\000"
 5331      6D707473 
 5331      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccreDaJg.s 			page 120


 5332              	.LASF68:
 5333 080f 636F756E 		.ascii	"countDownType\000"
 5333      74446F77 
 5333      6E547970 
 5333      6500
 5334              	.LASF83:
 5335 081d 626F6F74 		.ascii	"boot_time\000"
 5335      5F74696D 
 5335      6500
 5336              	.LASF88:
 5337 0827 65787065 		.ascii	"expected_response\000"
 5337      63746564 
 5337      5F726573 
 5337      706F6E73 
 5337      6500
 5338              	.LASF136:
 5339 0839 6C6F636B 		.ascii	"lock_time\000"
 5339      5F74696D 
 5339      6500
 5340              	.LASF147:
 5341 0843 68747470 		.ascii	"http_request\000"
 5341      5F726571 
 5341      75657374 
 5341      00
 5342              	.LASF80:
 5343 0850 6D6F6465 		.ascii	"modem_power_down\000"
 5343      6D5F706F 
 5343      7765725F 
 5343      646F776E 
 5343      00
 5344              	.LASF39:
 5345 0861 74696D65 		.ascii	"timeStamp\000"
 5345      5374616D 
 5345      7000
 5346              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
