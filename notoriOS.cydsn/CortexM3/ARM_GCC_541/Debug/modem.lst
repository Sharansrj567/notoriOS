ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,9,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	level_sensor_enabled,1,1
  34              		.comm	downstream_level_sensor_inbox,100,4
  35              		.comm	downstream_level_sensor_enabled,1,1
  36              		.comm	valve_diameter,4,4
  37              		.comm	valve_type,10,4
  38              		.comm	valve_enabled,1,1
  39              		.comm	valve_inbox,100,4
  40              		.comm	App_LED_enabled,1,1
  41              		.comm	app_led_inbox,100,4
  42              		.comm	http_request,10000,4
  43              		.comm	http_body,10000,4
  44              		.comm	http_route,200,4
  45              		.comm	system_info,28,4
  46              		.comm	system_settings,104,4
  47              		.comm	alarmMeasure,6,4
  48              		.comm	timeToMeasure,1,1
  49              		.comm	alarmSync,6,4
  50              		.comm	timeToSync,1,1
  51              		.comm	timeToSycnRemoteParams,1,1
  52              		.comm	hey,1,1
  53              		.comm	alarmAppLED,6,4
  54              		.comm	timeToAppLED,1,1
  55              		.comm	alarmLevelSensor,6,4
  56              		.comm	timetoLevelSensor,1,1
  57              		.comm	alarmDownstreamLevelSensor,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 2


  58              		.comm	timetoDownstreamLevelSensor,1,1
  59              		.comm	alarmValve,6,4
  60              		.comm	timeToValve,1,1
  61              		.comm	uart_received_string,1024,4
  62              		.global	uart_string_index
  63              		.bss
  64              		.align	1
  65              		.type	uart_string_index, %object
  66              		.size	uart_string_index, 2
  67              	uart_string_index:
  68 0000 0000     		.space	2
  69              		.section	.text.isr_telit_rx,"ax",%progbits
  70              		.align	2
  71              		.global	isr_telit_rx
  72              		.thumb
  73              		.thumb_func
  74              		.type	isr_telit_rx, %function
  75              	isr_telit_rx:
  76              	.LFB64:
  77              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  78              		.loc 1 18 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82 0000 98B5     		push	{r3, r4, r7, lr}
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 3, -16
  85              		.cfi_offset 4, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 00AF     		add	r7, sp, #0
  89              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  90              		.loc 1 20 0
  91 0004 12E0     		b	.L2
  92              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  93              		.loc 1 21 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 3


  94 0006 0D4B     		ldr	r3, .L4
  95 0008 B3F90030 		ldrsh	r3, [r3]
  96 000c 1C46     		mov	r4, r3
  97 000e FFF7FEFF 		bl	UART_Telit_GetChar
  98 0012 0346     		mov	r3, r0
  99 0014 1A46     		mov	r2, r3
 100 0016 0A4B     		ldr	r3, .L4+4
 101 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
 102              		.loc 1 22 0
 103 001a 084B     		ldr	r3, .L4
 104 001c B3F90030 		ldrsh	r3, [r3]
 105 0020 9BB2     		uxth	r3, r3
 106 0022 0133     		adds	r3, r3, #1
 107 0024 9BB2     		uxth	r3, r3
 108 0026 1AB2     		sxth	r2, r3
 109 0028 044B     		ldr	r3, .L4
 110 002a 1A80     		strh	r2, [r3]	@ movhi
 111              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 112              		.loc 1 20 0
 113 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 114 0030 0346     		mov	r3, r0
 115 0032 012B     		cmp	r3, #1
 116 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 117              		.loc 1 25 0
 118 0036 00BF     		nop
 119 0038 98BD     		pop	{r3, r4, r7, pc}
 120              	.L5:
 121 003a 00BF     		.align	2
 122              	.L4:
 123 003c 00000000 		.word	uart_string_index
 124 0040 00000000 		.word	uart_received_string
 125              		.cfi_endproc
 126              	.LFE64:
 127              		.size	isr_telit_rx, .-isr_telit_rx
 128              		.section	.text.modem_initialize,"ax",%progbits
 129              		.align	2
 130              		.global	modem_initialize
 131              		.thumb
 132              		.thumb_func
 133              		.type	modem_initialize, %function
 134              	modem_initialize:
 135              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 136              		.loc 1 28 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140 0000 80B5     		push	{r7, lr}
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 4


 143              		.cfi_offset 14, -4
 144 0002 00AF     		add	r7, sp, #0
 145              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 146              		.loc 1 31 0
 147 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 148              		.loc 1 32 0
 149 0008 154B     		ldr	r3, .L7
 150 000a 0022     		movs	r2, #0
 151 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 152              		.loc 1 34 0
 153 000e 154B     		ldr	r3, .L7+4
 154 0010 0022     		movs	r2, #0
 155 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 156              		.loc 1 35 0
 157 0016 134B     		ldr	r3, .L7+4
 158 0018 0022     		movs	r2, #0
 159 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 160              		.loc 1 36 0
 161 001c 114B     		ldr	r3, .L7+4
 162 001e 0022     		movs	r2, #0
 163 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 164              		.loc 1 37 0
 165 0022 114B     		ldr	r3, .L7+8
 166 0024 0022     		movs	r2, #0
 167 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 168              		.loc 1 38 0
 169 0028 0F4B     		ldr	r3, .L7+8
 170 002a 0022     		movs	r2, #0
 171 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 172              		.loc 1 39 0
 173 002e 0E4B     		ldr	r3, .L7+8
 174 0030 0022     		movs	r2, #0
 175 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 176              		.loc 1 40 0
 177 0034 0C4B     		ldr	r3, .L7+8
 178 0036 0022     		movs	r2, #0
 179 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 180              		.loc 1 41 0
 181 003a 0B4B     		ldr	r3, .L7+8
 182 003c 0022     		movs	r2, #0
 183 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 184              		.loc 1 42 0
 185 0040 094B     		ldr	r3, .L7+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 5


 186 0042 0022     		movs	r2, #0
 187 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 188              		.loc 1 43 0
 189 0046 084B     		ldr	r3, .L7+8
 190 0048 0022     		movs	r2, #0
 191 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 192              		.loc 1 44 0
 193 004c 064B     		ldr	r3, .L7+8
 194 004e 0022     		movs	r2, #0
 195 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 196              		.loc 1 48 0
 197 0052 0021     		movs	r1, #0
 198 0054 4020     		movs	r0, #64
 199 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 200              		.loc 1 50 0
 201 005a 00BF     		nop
 202 005c 80BD     		pop	{r7, pc}
 203              	.L8:
 204 005e 00BF     		.align	2
 205              	.L7:
 206 0060 00000000 		.word	modem_state
 207 0064 00000000 		.word	modem_info
 208 0068 00000000 		.word	modem_stats
 209              		.cfi_endproc
 210              	.LFE65:
 211              		.size	modem_initialize, .-modem_initialize
 212              		.section	.text.pins_configure_inactive,"ax",%progbits
 213              		.align	2
 214              		.global	pins_configure_inactive
 215              		.thumb
 216              		.thumb_func
 217              		.type	pins_configure_inactive, %function
 218              	pins_configure_inactive:
 219              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 220              		.loc 1 54 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 1, uses_anonymous_args = 0
 224 0000 80B5     		push	{r7, lr}
 225              		.cfi_def_cfa_offset 8
 226              		.cfi_offset 7, -8
 227              		.cfi_offset 14, -4
 228 0002 00AF     		add	r7, sp, #0
 229              		.cfi_def_cfa_register 7
  55:modem.c       ****    
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 6


  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 230              		.loc 1 56 0
 231 0004 0020     		movs	r0, #0
 232 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 233              		.loc 1 57 0
 234 000a 0C20     		movs	r0, #12
 235 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 236              		.loc 1 59 0
 237 0010 0020     		movs	r0, #0
 238 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 239              		.loc 1 62 0
 240 0016 0020     		movs	r0, #0
 241 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 242              		.loc 1 63 0
 243 001c 0020     		movs	r0, #0
 244 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 245              		.loc 1 64 0
 246 0022 0020     		movs	r0, #0
 247 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 248              		.loc 1 65 0
 249 0028 0020     		movs	r0, #0
 250 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 251              		.loc 1 67 0
 252 002e 00BF     		nop
 253 0030 80BD     		pop	{r7, pc}
 254              		.cfi_endproc
 255              	.LFE66:
 256              		.size	pins_configure_inactive, .-pins_configure_inactive
 257 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 258              		.align	2
 259              		.global	pins_configure_active
 260              		.thumb
 261              		.thumb_func
 262              		.type	pins_configure_active, %function
 263              	pins_configure_active:
 264              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 265              		.loc 1 70 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 7


 272              		.cfi_offset 14, -4
 273 0002 00AF     		add	r7, sp, #0
 274              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 275              		.loc 1 72 0
 276 0004 0220     		movs	r0, #2
 277 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 278              		.loc 1 73 0
 279 000a 0120     		movs	r0, #1
 280 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 281              		.loc 1 74 0
 282 0010 0120     		movs	r0, #1
 283 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 284              		.loc 1 75 0
 285 0016 6420     		movs	r0, #100
 286 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 287              		.loc 1 76 0
 288 001c 00BF     		nop
 289 001e 80BD     		pop	{r7, pc}
 290              		.cfi_endproc
 291              	.LFE67:
 292              		.size	pins_configure_active, .-pins_configure_active
 293              		.section	.rodata
 294              		.align	2
 295              	.LC0:
 296 0000 4F4B00   		.ascii	"OK\000"
 297 0003 00       		.align	2
 298              	.LC1:
 299 0004 41542353 		.ascii	"AT#SHDN\015\000"
 299      48444E0D 
 299      00
 300              		.section	.text.modem_power_down,"ax",%progbits
 301              		.align	2
 302              		.global	modem_power_down
 303              		.thumb
 304              		.thumb_func
 305              		.type	modem_power_down, %function
 306              	modem_power_down:
 307              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 308              		.loc 1 79 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 1, uses_anonymous_args = 0
 312 0000 80B5     		push	{r7, lr}
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 7, -8
 315              		.cfi_offset 14, -4
 316 0002 00AF     		add	r7, sp, #0
 317              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 8


  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 318              		.loc 1 82 0
 319 0004 41F28832 		movw	r2, #5000
 320 0008 0A49     		ldr	r1, .L12
 321 000a 0B48     		ldr	r0, .L12+4
 322 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 323              		.loc 1 85 0
 324 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 325              		.loc 1 86 0
 326 0014 4FF47A70 		mov	r0, #1000
 327 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 328              		.loc 1 88 0
 329 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 330              		.loc 1 89 0
 331 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 332              		.loc 1 90 0
 333 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 334              		.loc 1 91 0
 335 0028 044B     		ldr	r3, .L12+8
 336 002a 0022     		movs	r2, #0
 337 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 338              		.loc 1 93 0
 339 002e 00BF     		nop
 340 0030 80BD     		pop	{r7, pc}
 341              	.L13:
 342 0032 00BF     		.align	2
 343              	.L12:
 344 0034 00000000 		.word	.LC0
 345 0038 04000000 		.word	.LC1
 346 003c 00000000 		.word	modem_state
 347              		.cfi_endproc
 348              	.LFE68:
 349              		.size	modem_power_down, .-modem_power_down
 350              		.section	.rodata
 351 000d 000000   		.align	2
 352              	.LC2:
 353 0010 41544530 		.ascii	"ATE0\015\000"
 353      0D00
 354 0016 0000     		.align	2
 355              	.LC3:
 356 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 356      6D20626F 
 356      6F742074 
 356      696D653A 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 9


 356      20256400 
 357              		.align	2
 358              	.LC4:
 359 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 359      6D207265 
 359      61647920 
 359      666F7220 
 359      41542063 
 360 005d 000000   		.align	2
 361              	.LC5:
 362 0060 4E6F2072 		.ascii	"No response from modem.\000"
 362      6573706F 
 362      6E736520 
 362      66726F6D 
 362      206D6F64 
 363              		.section	.text.modem_power_up,"ax",%progbits
 364              		.align	2
 365              		.global	modem_power_up
 366              		.thumb
 367              		.thumb_func
 368              		.type	modem_power_up, %function
 369              	modem_power_up:
 370              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 371              		.loc 1 97 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 8
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375 0000 80B5     		push	{r7, lr}
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379 0002 82B0     		sub	sp, sp, #8
 380              		.cfi_def_cfa_offset 16
 381 0004 00AF     		add	r7, sp, #0
 382              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 383              		.loc 1 99 0
 384 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 385              		.loc 1 100 0
 386 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 387              		.loc 1 101 0
 388 000e 2C48     		ldr	r0, .L27
 389 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 390              		.loc 1 103 0
 391 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 10


 392              		.loc 1 106 0
 393 0018 0023     		movs	r3, #0
 394 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 395              		.loc 1 107 0
 396 001c 0023     		movs	r3, #0
 397 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 398              		.loc 1 109 0
 399 0020 FFF7FEFF 		bl	getTimeStamp
 400 0024 3860     		str	r0, [r7]
 401              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 402              		.loc 1 112 0
 403 0026 0023     		movs	r3, #0
 404 0028 BB71     		strb	r3, [r7, #6]
 405 002a 1CE0     		b	.L15
 406              	.L22:
 407              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 408              		.loc 1 114 0
 409 002c 0023     		movs	r3, #0
 410 002e 7B71     		strb	r3, [r7, #5]
 411 0030 0EE0     		b	.L16
 412              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 413              		.loc 1 116 0
 414 0032 4FF47A72 		mov	r2, #1000
 415 0036 2349     		ldr	r1, .L27+4
 416 0038 2348     		ldr	r0, .L27+8
 417 003a FFF7FEFF 		bl	at_write_command
 418 003e 0346     		mov	r3, r0
 419 0040 002B     		cmp	r3, #0
 420 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 421              		.loc 1 117 0
 422 0044 0123     		movs	r3, #1
 423 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 424              		.loc 1 118 0
 425 0048 05E0     		b	.L18
 426              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 427              		.loc 1 114 0 discriminator 2
 428 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 429 004c 0133     		adds	r3, r3, #1
 430 004e 7B71     		strb	r3, [r7, #5]
 431              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 432              		.loc 1 114 0 is_stmt 0 discriminator 1
 433 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 434 0052 132B     		cmp	r3, #19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 11


 435 0054 EDD9     		bls	.L19
 436              	.L18:
 437              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 438              		.loc 1 122 0 is_stmt 1
 439 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 440 0058 012B     		cmp	r3, #1
 441 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 442              		.loc 1 126 0 discriminator 2
 443 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 444              		.loc 1 112 0 discriminator 2
 445 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 446 0062 0133     		adds	r3, r3, #1
 447 0064 BB71     		strb	r3, [r7, #6]
 448              	.L15:
 112:modem.c       ****         
 449              		.loc 1 112 0 is_stmt 0 discriminator 1
 450 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 451 0068 022B     		cmp	r3, #2
 452 006a DFD9     		bls	.L22
 453 006c 00E0     		b	.L21
 454              	.L26:
 123:modem.c       ****             break;
 455              		.loc 1 123 0 is_stmt 1
 456 006e 00BF     		nop
 457              	.L21:
 458              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 459              		.loc 1 130 0
 460 0070 FFF7FEFF 		bl	getTimeStamp
 461 0074 0246     		mov	r2, r0
 462 0076 3B68     		ldr	r3, [r7]
 463 0078 D31A     		subs	r3, r2, r3
 464 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 465              		.loc 1 131 0
 466 007c 3A68     		ldr	r2, [r7]
 467 007e 1349     		ldr	r1, .L27+12
 468 0080 0020     		movs	r0, #0
 469 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 470              		.loc 1 133 0
 471 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 472 0088 012B     		cmp	r3, #1
 473 008a 0AD1     		bne	.L23
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 12


 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 474              		.loc 1 134 0
 475 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 476 008e 1A46     		mov	r2, r3
 477 0090 0F49     		ldr	r1, .L27+16
 478 0092 0020     		movs	r0, #0
 479 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 480              		.loc 1 135 0
 481 0098 0E4B     		ldr	r3, .L27+20
 482 009a 0122     		movs	r2, #1
 483 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 484              		.loc 1 143 0
 485 009e 0123     		movs	r3, #1
 486 00a0 09E0     		b	.L25
 487              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 488              		.loc 1 137 0
 489 00a2 0D49     		ldr	r1, .L27+24
 490 00a4 0220     		movs	r0, #2
 491 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 492              		.loc 1 138 0
 493 00aa 0A4B     		ldr	r3, .L27+20
 494 00ac 0022     		movs	r2, #0
 495 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 496              		.loc 1 140 0
 497 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 498              		.loc 1 141 0
 499 00b4 0023     		movs	r3, #0
 500              	.L25:
 144:modem.c       **** }
 501              		.loc 1 144 0
 502 00b6 1846     		mov	r0, r3
 503 00b8 0837     		adds	r7, r7, #8
 504              		.cfi_def_cfa_offset 8
 505 00ba BD46     		mov	sp, r7
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 00bc 80BD     		pop	{r7, pc}
 509              	.L28:
 510 00be 00BF     		.align	2
 511              	.L27:
 512 00c0 00000000 		.word	isr_telit_rx
 513 00c4 00000000 		.word	.LC0
 514 00c8 10000000 		.word	.LC2
 515 00cc 18000000 		.word	.LC3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 13


 516 00d0 2C000000 		.word	.LC4
 517 00d4 00000000 		.word	modem_state
 518 00d8 60000000 		.word	.LC5
 519              		.cfi_endproc
 520              	.LFE69:
 521              		.size	modem_power_up, .-modem_power_up
 522              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 523              		.align	2
 524              		.global	modem_soft_power_cycle
 525              		.thumb
 526              		.thumb_func
 527              		.type	modem_soft_power_cycle, %function
 528              	modem_soft_power_cycle:
 529              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 530              		.loc 1 147 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 80B5     		push	{r7, lr}
 535              		.cfi_def_cfa_offset 8
 536              		.cfi_offset 7, -8
 537              		.cfi_offset 14, -4
 538 0002 00AF     		add	r7, sp, #0
 539              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 540              		.loc 1 148 0
 541 0004 0120     		movs	r0, #1
 542 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 543              		.loc 1 149 0
 544 000a 4FF4FA60 		mov	r0, #2000
 545 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 546              		.loc 1 150 0
 547 0012 0020     		movs	r0, #0
 548 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 549              		.loc 1 152 0
 550 0018 00BF     		nop
 551 001a 80BD     		pop	{r7, pc}
 552              		.cfi_endproc
 553              	.LFE70:
 554              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 555              		.section	.text.uart_string_reset,"ax",%progbits
 556              		.align	2
 557              		.global	uart_string_reset
 558              		.thumb
 559              		.thumb_func
 560              		.type	uart_string_reset, %function
 561              	uart_string_reset:
 562              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 14


 155:modem.c       **** void uart_string_reset(){
 563              		.loc 1 155 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567 0000 80B5     		push	{r7, lr}
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 573              		.loc 1 156 0
 574 0004 064B     		ldr	r3, .L31
 575 0006 0022     		movs	r2, #0
 576 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 577              		.loc 1 158 0
 578 000a 4FF48062 		mov	r2, #1024
 579 000e 0021     		movs	r1, #0
 580 0010 0448     		ldr	r0, .L31+4
 581 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 582              		.loc 1 160 0
 583 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 584              		.loc 1 161 0
 585 001a 00BF     		nop
 586 001c 80BD     		pop	{r7, pc}
 587              	.L32:
 588 001e 00BF     		.align	2
 589              	.L31:
 590 0020 00000000 		.word	uart_string_index
 591 0024 00000000 		.word	uart_received_string
 592              		.cfi_endproc
 593              	.LFE71:
 594              		.size	uart_string_reset, .-uart_string_reset
 595              		.section	.rodata
 596              		.align	2
 597              	.LC6:
 598 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 598      6D207365 
 598      6E742041 
 598      5420636F 
 598      6D6D616E 
 599              		.align	2
 600              	.LC7:
 601 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 601      6D205265 
 601      63656976 
 601      65642065 
 601      78706563 
 602 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 602      616E643A 
 602      2025730A 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 15


 602      52656365 
 602      69766564 
 603 00f1 000000   		.align	2
 604              	.LC8:
 605 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 605      6D207265 
 605      71756972 
 605      65642025 
 605      64207472 
 606 0127 0A00     		.ascii	"\012\000"
 607 0129 000000   		.align	2
 608              	.LC9:
 609 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 609      64206E6F 
 609      74207772 
 609      69746520 
 609      41542063 
 610 0159 00       		.ascii	"\000"
 611              		.section	.text.at_write_command,"ax",%progbits
 612              		.align	2
 613              		.global	at_write_command
 614              		.thumb
 615              		.thumb_func
 616              		.type	at_write_command, %function
 617              	at_write_command:
 618              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 619              		.loc 1 166 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 40
 622              		@ frame_needed = 1, uses_anonymous_args = 0
 623 0000 80B5     		push	{r7, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 8AB0     		sub	sp, sp, #40
 628              		.cfi_def_cfa_offset 48
 629 0004 00AF     		add	r7, sp, #0
 630              		.cfi_def_cfa_register 7
 631 0006 F860     		str	r0, [r7, #12]
 632 0008 B960     		str	r1, [r7, #8]
 633 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 634              		.loc 1 168 0
 635 000c 0023     		movs	r3, #0
 636 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 637              		.loc 1 170 0
 638 0010 0023     		movs	r3, #0
 639 0012 7B62     		str	r3, [r7, #36]
 640 0014 46E0     		b	.L34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 16


 641              	.L42:
 642              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 643              		.loc 1 173 0
 644 0016 0A23     		movs	r3, #10
 645 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 646              		.loc 1 174 0
 647 001a 7A68     		ldr	r2, [r7, #4]
 648 001c FB69     		ldr	r3, [r7, #28]
 649 001e B2FBF3F3 		udiv	r3, r2, r3
 650 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 651              		.loc 1 177 0
 652 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 653              		.loc 1 180 0
 654 0028 F868     		ldr	r0, [r7, #12]
 655 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 656              		.loc 1 184 0
 657 002e 7B68     		ldr	r3, [r7, #4]
 658 0030 002B     		cmp	r3, #0
 659 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 660              		.loc 1 185 0
 661 0034 FA68     		ldr	r2, [r7, #12]
 662 0036 1F49     		ldr	r1, .L43
 663 0038 0020     		movs	r0, #0
 664 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 665              		.loc 1 186 0
 666 003e 0123     		movs	r3, #1
 667 0040 34E0     		b	.L36
 668              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 669              		.loc 1 190 0
 670 0042 0023     		movs	r3, #0
 671 0044 3B62     		str	r3, [r7, #32]
 672 0046 20E0     		b	.L37
 673              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 674              		.loc 1 191 0
 675 0048 F869     		ldr	r0, [r7, #28]
 676 004a FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 17


 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 677              		.loc 1 194 0
 678 004e B968     		ldr	r1, [r7, #8]
 679 0050 1948     		ldr	r0, .L43+4
 680 0052 FFF7FEFF 		bl	strstr
 681 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 682              		.loc 1 195 0
 683 0058 7B69     		ldr	r3, [r7, #20]
 684 005a 002B     		cmp	r3, #0
 685 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 686              		.loc 1 196 0
 687 005e 7B6A     		ldr	r3, [r7, #36]
 688 0060 002B     		cmp	r3, #0
 689 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 690              		.loc 1 198 0
 691 0064 144B     		ldr	r3, .L43+4
 692 0066 FA68     		ldr	r2, [r7, #12]
 693 0068 1449     		ldr	r1, .L43+8
 694 006a 0020     		movs	r0, #0
 695 006c FFF7FEFF 		bl	printNotif
 696 0070 06E0     		b	.L40
 697              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 698              		.loc 1 200 0
 699 0072 7B6A     		ldr	r3, [r7, #36]
 700 0074 5A1C     		adds	r2, r3, #1
 701 0076 104B     		ldr	r3, .L43+4
 702 0078 1149     		ldr	r1, .L43+12
 703 007a 0120     		movs	r0, #1
 704 007c FFF7FEFF 		bl	printNotif
 705              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 706              		.loc 1 203 0
 707 0080 0123     		movs	r3, #1
 708 0082 13E0     		b	.L36
 709              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 710              		.loc 1 190 0 discriminator 2
 711 0084 3B6A     		ldr	r3, [r7, #32]
 712 0086 0133     		adds	r3, r3, #1
 713 0088 3B62     		str	r3, [r7, #32]
 714              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 715              		.loc 1 190 0 is_stmt 0 discriminator 1
 716 008a 3A6A     		ldr	r2, [r7, #32]
 717 008c BB69     		ldr	r3, [r7, #24]
 718 008e 9A42     		cmp	r2, r3
 719 0090 DAD3     		bcc	.L41
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 18


 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 720              		.loc 1 209 0 is_stmt 1 discriminator 2
 721 0092 094B     		ldr	r3, .L43+4
 722 0094 FA68     		ldr	r2, [r7, #12]
 723 0096 0B49     		ldr	r1, .L43+16
 724 0098 0220     		movs	r0, #2
 725 009a FFF7FEFF 		bl	printNotif
 726              	.LBE4:
 170:modem.c       ****         
 727              		.loc 1 170 0 discriminator 2
 728 009e 7B6A     		ldr	r3, [r7, #36]
 729 00a0 0133     		adds	r3, r3, #1
 730 00a2 7B62     		str	r3, [r7, #36]
 731              	.L34:
 170:modem.c       ****         
 732              		.loc 1 170 0 is_stmt 0 discriminator 1
 733 00a4 7B6A     		ldr	r3, [r7, #36]
 734 00a6 022B     		cmp	r3, #2
 735 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 736              		.loc 1 214 0 is_stmt 1
 737 00aa 0023     		movs	r3, #0
 738              	.L36:
 215:modem.c       **** }
 739              		.loc 1 215 0
 740 00ac 1846     		mov	r0, r3
 741 00ae 2837     		adds	r7, r7, #40
 742              		.cfi_def_cfa_offset 8
 743 00b0 BD46     		mov	sp, r7
 744              		.cfi_def_cfa_register 13
 745              		@ sp needed
 746 00b2 80BD     		pop	{r7, pc}
 747              	.L44:
 748              		.align	2
 749              	.L43:
 750 00b4 78000000 		.word	.LC6
 751 00b8 00000000 		.word	uart_received_string
 752 00bc A4000000 		.word	.LC7
 753 00c0 F4000000 		.word	.LC8
 754 00c4 2C010000 		.word	.LC9
 755              		.cfi_endproc
 756              	.LFE72:
 757              		.size	at_write_command, .-at_write_command
 758              		.section	.rodata
 759 015a 0000     		.align	2
 760              	.LC10:
 761 015c 54455354 		.ascii	"TEST_MODEM\000"
 761      5F4D4F44 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 19


 761      454D00
 762 0167 00       		.align	2
 763              	.LC11:
 764 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 764      65706F6E 
 764      73652066 
 764      726F6D20 
 764      6D6F6465 
 765 017f 00       		.align	2
 766              	.LC12:
 767 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 767      6D20636F 
 767      6E6E6563 
 767      74656420 
 767      746F206E 
 768              		.section	.text.modem_test,"ax",%progbits
 769              		.align	2
 770              		.global	modem_test
 771              		.thumb
 772              		.thumb_func
 773              		.type	modem_test, %function
 774              	modem_test:
 775              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 776              		.loc 1 218 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 408
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780 0000 B0B5     		push	{r4, r5, r7, lr}
 781              		.cfi_def_cfa_offset 16
 782              		.cfi_offset 4, -16
 783              		.cfi_offset 5, -12
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 E6B0     		sub	sp, sp, #408
 787              		.cfi_def_cfa_offset 424
 788 0004 00AF     		add	r7, sp, #0
 789              		.cfi_def_cfa_register 7
 790 0006 3B1D     		adds	r3, r7, #4
 791 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 792              		.loc 1 221 0
 793 000a 07F10C03 		add	r3, r7, #12
 794 000e 0022     		movs	r2, #0
 795 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 796              		.loc 1 223 0
 797 0014 07F10C03 		add	r3, r7, #12
 798 0018 364A     		ldr	r2, .L53
 799 001a 07CA     		ldmia	r2, {r0, r1, r2}
 800 001c 03C3     		stmia	r3!, {r0, r1}
 801 001e 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 20


 802 0020 0233     		adds	r3, r3, #2
 803 0022 120C     		lsrs	r2, r2, #16
 804 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 805              		.loc 1 224 0
 806 0026 07F10C03 		add	r3, r7, #12
 807 002a 8133     		adds	r3, r3, #129
 808 002c 324A     		ldr	r2, .L53+4
 809 002e 1C46     		mov	r4, r3
 810 0030 1546     		mov	r5, r2
 811 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 812 0034 2060     		str	r0, [r4]	@ unaligned
 813 0036 6160     		str	r1, [r4, #4]	@ unaligned
 814 0038 A260     		str	r2, [r4, #8]	@ unaligned
 815 003a E360     		str	r3, [r4, #12]	@ unaligned
 816 003c 2868     		ldr	r0, [r5]	@ unaligned
 817 003e 2061     		str	r0, [r4, #16]	@ unaligned
 818 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 819 0042 AA79     		ldrb	r2, [r5, #6]
 820 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 821 0046 1346     		mov	r3, r2
 822 0048 A375     		strb	r3, [r4, #22]
 823              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 824              		.loc 1 227 0
 825 004a 0023     		movs	r3, #0
 826 004c C7F89431 		str	r3, [r7, #404]
 827 0050 3AE0     		b	.L46
 828              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 829              		.loc 1 229 0
 830 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 831              		.loc 1 231 0
 832 0056 FFF7FEFF 		bl	modem_get_state
 833 005a 0346     		mov	r3, r0
 834 005c 002B     		cmp	r3, #0
 835 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 836              		.loc 1 233 0
 837 0060 FFF7FEFF 		bl	modem_power_up
 838 0064 27E0     		b	.L48
 839              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 840              		.loc 1 236 0
 841 0066 FFF7FEFF 		bl	modem_get_state
 842 006a 0346     		mov	r3, r0
 843 006c 042B     		cmp	r3, #4
 844 006e 22D1     		bne	.L48
 845              	.LBB6:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 21


 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 846              		.loc 1 240 0
 847 0070 FFF7FEFF 		bl	modem_get_network_time
 848 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 849              		.loc 1 241 0
 850 0078 D7F89031 		ldr	r3, [r7, #400]
 851 007c 002B     		cmp	r3, #0
 852 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 853              		.loc 1 242 0
 854 0080 D7F89001 		ldr	r0, [r7, #400]
 855 0084 FFF7FEFF 		bl	setTime
 856              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 857              		.loc 1 245 0
 858 0088 07F10C03 		add	r3, r7, #12
 859 008c 8133     		adds	r3, r3, #129
 860 008e 1B4A     		ldr	r2, .L53+8
 861 0090 1D46     		mov	r5, r3
 862 0092 1446     		mov	r4, r2
 863 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 864 0096 2860     		str	r0, [r5]	@ unaligned
 865 0098 6960     		str	r1, [r5, #4]	@ unaligned
 866 009a AA60     		str	r2, [r5, #8]	@ unaligned
 867 009c EB60     		str	r3, [r5, #12]	@ unaligned
 868 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 869 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 870 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 871 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 872              		.loc 1 246 0
 873 00a6 07F10C03 		add	r3, r7, #12
 874 00aa 0122     		movs	r2, #1
 875 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 876              		.loc 1 248 0
 877 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 878              		.loc 1 249 0
 879 00b4 0CE0     		b	.L50
 880              	.L48:
 881              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 882              		.loc 1 252 0 discriminator 2
 883 00b6 4FF47A70 		mov	r0, #1000
 884 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 885              		.loc 1 227 0 discriminator 2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 22


 886 00be D7F89431 		ldr	r3, [r7, #404]
 887 00c2 0133     		adds	r3, r3, #1
 888 00c4 C7F89431 		str	r3, [r7, #404]
 889              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 890              		.loc 1 227 0 is_stmt 0 discriminator 1
 891 00c8 D7F89431 		ldr	r3, [r7, #404]
 892 00cc 3B2B     		cmp	r3, #59
 893 00ce C0DD     		ble	.L51
 894              	.L50:
 895              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 896              		.loc 1 256 0 is_stmt 1
 897 00d0 3B1D     		adds	r3, r7, #4
 898 00d2 1A68     		ldr	r2, [r3]
 899 00d4 07F10C03 		add	r3, r7, #12
 900 00d8 1046     		mov	r0, r2
 901 00da 1946     		mov	r1, r3
 902 00dc 40F28113 		movw	r3, #385
 903 00e0 1A46     		mov	r2, r3
 904 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 905              		.loc 1 257 0
 906 00e6 3B1D     		adds	r3, r7, #4
 907 00e8 1868     		ldr	r0, [r3]
 908 00ea 07F5CC77 		add	r7, r7, #408
 909              		.cfi_def_cfa_offset 16
 910 00ee BD46     		mov	sp, r7
 911              		.cfi_def_cfa_register 13
 912              		@ sp needed
 913 00f0 B0BD     		pop	{r4, r5, r7, pc}
 914              	.L54:
 915 00f2 00BF     		.align	2
 916              	.L53:
 917 00f4 5C010000 		.word	.LC10
 918 00f8 68010000 		.word	.LC11
 919 00fc 80010000 		.word	.LC12
 920              		.cfi_endproc
 921              	.LFE73:
 922              		.size	modem_test, .-modem_test
 923              		.section	.text.extract_string,"ax",%progbits
 924              		.align	2
 925              		.global	extract_string
 926              		.thumb
 927              		.thumb_func
 928              		.type	extract_string, %function
 929              	extract_string:
 930              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 931              		.loc 1 260 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 23


 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935 0000 80B5     		push	{r7, lr}
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 7, -8
 938              		.cfi_offset 14, -4
 939 0002 86B0     		sub	sp, sp, #24
 940              		.cfi_def_cfa_offset 32
 941 0004 00AF     		add	r7, sp, #0
 942              		.cfi_def_cfa_register 7
 943 0006 F860     		str	r0, [r7, #12]
 944 0008 B960     		str	r1, [r7, #8]
 945 000a 7A60     		str	r2, [r7, #4]
 946 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 947              		.loc 1 266 0
 948 000e B968     		ldr	r1, [r7, #8]
 949 0010 F868     		ldr	r0, [r7, #12]
 950 0012 FFF7FEFF 		bl	strstr
 951 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 952              		.loc 1 267 0
 953 0018 7B69     		ldr	r3, [r7, #20]
 954 001a 002B     		cmp	r3, #0
 955 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 956              		.loc 1 269 0
 957 001e FB68     		ldr	r3, [r7, #12]
 958 0020 7B61     		str	r3, [r7, #20]
 959              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 960              		.loc 1 272 0
 961 0022 B868     		ldr	r0, [r7, #8]
 962 0024 FFF7FEFF 		bl	strlen
 963 0028 0246     		mov	r2, r0
 964 002a 7B69     		ldr	r3, [r7, #20]
 965 002c 1344     		add	r3, r3, r2
 966 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 967              		.loc 1 277 0
 968 0030 7968     		ldr	r1, [r7, #4]
 969 0032 7869     		ldr	r0, [r7, #20]
 970 0034 FFF7FEFF 		bl	strstr
 971 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 972              		.loc 1 278 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 24


 973 003a 3B69     		ldr	r3, [r7, #16]
 974 003c 002B     		cmp	r3, #0
 975 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 976              		.loc 1 280 0
 977 0040 F868     		ldr	r0, [r7, #12]
 978 0042 FFF7FEFF 		bl	strlen
 979 0046 0246     		mov	r2, r0
 980 0048 FB68     		ldr	r3, [r7, #12]
 981 004a 1344     		add	r3, r3, r2
 982 004c 3B61     		str	r3, [r7, #16]
 983              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 984              		.loc 1 284 0
 985 004e 3A69     		ldr	r2, [r7, #16]
 986 0050 7B69     		ldr	r3, [r7, #20]
 987 0052 D31A     		subs	r3, r2, r3
 988 0054 1A46     		mov	r2, r3
 989 0056 7969     		ldr	r1, [r7, #20]
 990 0058 3868     		ldr	r0, [r7]
 991 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 992              		.loc 1 285 0
 993 005e 3A69     		ldr	r2, [r7, #16]
 994 0060 7B69     		ldr	r3, [r7, #20]
 995 0062 D31A     		subs	r3, r2, r3
 996 0064 1A46     		mov	r2, r3
 997 0066 3B68     		ldr	r3, [r7]
 998 0068 1344     		add	r3, r3, r2
 999 006a 0022     		movs	r2, #0
 1000 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 1001              		.loc 1 286 0
 1002 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 1003              		.loc 1 288 0
 1004 0070 1846     		mov	r0, r3
 1005 0072 1837     		adds	r7, r7, #24
 1006              		.cfi_def_cfa_offset 8
 1007 0074 BD46     		mov	sp, r7
 1008              		.cfi_def_cfa_register 13
 1009              		@ sp needed
 1010 0076 80BD     		pop	{r7, pc}
 1011              		.cfi_endproc
 1012              	.LFE74:
 1013              		.size	extract_string, .-extract_string
 1014              		.section	.rodata
 1015              		.align	2
 1016              	.LC13:
 1017 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1017      20746F20 
 1017      636F6E6E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 25


 1017      65637420 
 1017      746F206E 
 1018 01c3 00       		.align	2
 1019              	.LC14:
 1020 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1020      6D207469 
 1020      6D656420 
 1020      6F757420 
 1020      6F6E206E 
 1021 01e7 00       		.align	2
 1022              	.LC15:
 1023 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1023      69726564 
 1023      20495020 
 1023      61646472 
 1023      6573733A 
 1024              		.align	2
 1025              	.LC16:
 1026 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1026      6D207469 
 1026      6D656420 
 1026      6F757420 
 1026      6F6E2049 
 1027              		.section	.text.modem_process_tasks,"ax",%progbits
 1028              		.align	2
 1029              		.global	modem_process_tasks
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	modem_process_tasks, %function
 1033              	modem_process_tasks:
 1034              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1035              		.loc 1 291 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 8
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039 0000 80B5     		push	{r7, lr}
 1040              		.cfi_def_cfa_offset 8
 1041              		.cfi_offset 7, -8
 1042              		.cfi_offset 14, -4
 1043 0002 82B0     		sub	sp, sp, #8
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1047              		.loc 1 293 0
 1048 0006 534B     		ldr	r3, .L75
 1049 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1050 000a 012B     		cmp	r3, #1
 1051 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1052              		.loc 1 295 0
 1053 000e FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 26


 1054 0012 0246     		mov	r2, r0
 1055 0014 504B     		ldr	r3, .L75+4
 1056 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1057              		.loc 1 296 0
 1058 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1059              		.loc 1 297 0
 1060 001c 4D4B     		ldr	r3, .L75
 1061 001e 0222     		movs	r2, #2
 1062 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1063              		.loc 1 298 0
 1064 0022 0123     		movs	r3, #1
 1065 0024 92E0     		b	.L61
 1066              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1067              		.loc 1 302 0
 1068 0026 4B4B     		ldr	r3, .L75
 1069 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1070 002a 022B     		cmp	r3, #2
 1071 002c 5FD1     		bne	.L62
 1072              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1073              		.loc 1 305 0
 1074 002e 0023     		movs	r3, #0
 1075 0030 FB71     		strb	r3, [r7, #7]
 1076 0032 2BE0     		b	.L63
 1077              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1078              		.loc 1 307 0
 1079 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1080              		.loc 1 309 0
 1081 0038 484B     		ldr	r3, .L75+8
 1082 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1083 003c 83F00103 		eor	r3, r3, #1
 1084 0040 DBB2     		uxtb	r3, r3
 1085 0042 002B     		cmp	r3, #0
 1086 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1087              		.loc 1 312 0
 1088 0046 464B     		ldr	r3, .L75+12
 1089 0048 5B69     		ldr	r3, [r3, #20]
 1090 004a 1A2B     		cmp	r3, #26
 1091 004c 03DD     		ble	.L64
 1092              		.loc 1 312 0 is_stmt 0 discriminator 1
 1093 004e 444B     		ldr	r3, .L75+12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 27


 1094 0050 5B69     		ldr	r3, [r3, #20]
 1095 0052 FF2B     		cmp	r3, #255
 1096 0054 1ED1     		bne	.L74
 1097              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1098              		.loc 1 317 0 is_stmt 1
 1099 0056 414B     		ldr	r3, .L75+8
 1100 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1101 005a 002B     		cmp	r3, #0
 1102 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1103              		.loc 1 320 0
 1104 005e 404B     		ldr	r3, .L75+12
 1105 0060 9B68     		ldr	r3, [r3, #8]
 1106 0062 242B     		cmp	r3, #36
 1107 0064 03DD     		ble	.L67
 1108              		.loc 1 320 0 is_stmt 0 discriminator 1
 1109 0066 3E4B     		ldr	r3, .L75+12
 1110 0068 9B68     		ldr	r3, [r3, #8]
 1111 006a FF2B     		cmp	r3, #255
 1112 006c 13D1     		bne	.L65
 1113              	.L67:
 1114              		.loc 1 320 0 discriminator 3
 1115 006e 3C4B     		ldr	r3, .L75+12
 1116 0070 5B69     		ldr	r3, [r3, #20]
 1117 0072 1A2B     		cmp	r3, #26
 1118 0074 03DD     		ble	.L66
 1119              		.loc 1 320 0 discriminator 4
 1120 0076 3A4B     		ldr	r3, .L75+12
 1121 0078 5B69     		ldr	r3, [r3, #20]
 1122 007a FF2B     		cmp	r3, #255
 1123 007c 0BD1     		bne	.L65
 1124              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1125              		.loc 1 325 0 is_stmt 1 discriminator 2
 1126 007e 4FF47A70 		mov	r0, #1000
 1127 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1128              		.loc 1 305 0 discriminator 2
 1129 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1130 0088 0133     		adds	r3, r3, #1
 1131 008a FB71     		strb	r3, [r7, #7]
 1132              	.L63:
 305:modem.c       ****             // Get cell network stats
 1133              		.loc 1 305 0 is_stmt 0 discriminator 1
 1134 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1135 008e 1D2B     		cmp	r3, #29
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 28


 1136 0090 D0D9     		bls	.L68
 1137 0092 00E0     		b	.L65
 1138              	.L74:
 313:modem.c       ****                 }
 1139              		.loc 1 313 0 is_stmt 1
 1140 0094 00BF     		nop
 1141              	.L65:
 1142              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1143              		.loc 1 329 0
 1144 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1145 009a 0346     		mov	r3, r0
 1146 009c 002B     		cmp	r3, #0
 1147 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1148              		.loc 1 331 0
 1149 00a0 FFF7FEFF 		bl	getTimeStamp
 1150 00a4 0246     		mov	r2, r0
 1151 00a6 2C4B     		ldr	r3, .L75+4
 1152 00a8 1B68     		ldr	r3, [r3]
 1153 00aa D31A     		subs	r3, r2, r3
 1154 00ac 2C4A     		ldr	r2, .L75+12
 1155 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1156              		.loc 1 332 0
 1157 00b0 2B4B     		ldr	r3, .L75+12
 1158 00b2 9B69     		ldr	r3, [r3, #24]
 1159 00b4 1A46     		mov	r2, r3
 1160 00b6 2B49     		ldr	r1, .L75+16
 1161 00b8 0020     		movs	r0, #0
 1162 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1163              		.loc 1 334 0
 1164 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1165              		.loc 1 335 0
 1166 00c2 244B     		ldr	r3, .L75
 1167 00c4 0322     		movs	r2, #3
 1168 00c6 1A70     		strb	r2, [r3]
 1169              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1170              		.loc 1 339 0
 1171 00c8 FFF7FEFF 		bl	getTimeStamp
 1172 00cc 0246     		mov	r2, r0
 1173 00ce 224B     		ldr	r3, .L75+4
 1174 00d0 1B68     		ldr	r3, [r3]
 1175 00d2 D31A     		subs	r3, r2, r3
 1176 00d4 B42B     		cmp	r3, #180
 1177 00d6 08DD     		ble	.L70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 29


 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1178              		.loc 1 340 0
 1179 00d8 1E4B     		ldr	r3, .L75
 1180 00da 0022     		movs	r2, #0
 1181 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1182              		.loc 1 341 0
 1183 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1184              		.loc 1 342 0
 1185 00e2 2149     		ldr	r1, .L75+20
 1186 00e4 0220     		movs	r0, #2
 1187 00e6 FFF7FEFF 		bl	printNotif
 1188              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1189              		.loc 1 345 0
 1190 00ea 0023     		movs	r3, #0
 1191 00ec 2EE0     		b	.L61
 1192              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1193              		.loc 1 348 0
 1194 00ee 194B     		ldr	r3, .L75
 1195 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1196 00f2 032B     		cmp	r3, #3
 1197 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1198              		.loc 1 350 0
 1199 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1200 00fa 0346     		mov	r3, r0
 1201 00fc 002B     		cmp	r3, #0
 1202 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1203              		.loc 1 351 0
 1204 0100 144B     		ldr	r3, .L75
 1205 0102 0422     		movs	r2, #4
 1206 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1207              		.loc 1 353 0
 1208 0106 FFF7FEFF 		bl	getTimeStamp
 1209 010a 0246     		mov	r2, r0
 1210 010c 124B     		ldr	r3, .L75+4
 1211 010e 1B68     		ldr	r3, [r3]
 1212 0110 D31A     		subs	r3, r2, r3
 1213 0112 134A     		ldr	r2, .L75+12
 1214 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1215              		.loc 1 354 0
 1216 0116 124B     		ldr	r3, .L75+12
 1217 0118 DB69     		ldr	r3, [r3, #28]
 1218 011a 1A46     		mov	r2, r3
 1219 011c 1349     		ldr	r1, .L75+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 30


 1220 011e 0020     		movs	r0, #0
 1221 0120 FFF7FEFF 		bl	printNotif
 1222              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1223              		.loc 1 359 0
 1224 0124 FFF7FEFF 		bl	getTimeStamp
 1225 0128 0246     		mov	r2, r0
 1226 012a 0B4B     		ldr	r3, .L75+4
 1227 012c 1B68     		ldr	r3, [r3]
 1228 012e D31A     		subs	r3, r2, r3
 1229 0130 E62B     		cmp	r3, #230
 1230 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1231              		.loc 1 360 0
 1232 0134 074B     		ldr	r3, .L75
 1233 0136 0022     		movs	r2, #0
 1234 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1235              		.loc 1 361 0
 1236 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1237              		.loc 1 362 0
 1238 013e 0C49     		ldr	r1, .L75+28
 1239 0140 0220     		movs	r0, #2
 1240 0142 FFF7FEFF 		bl	printNotif
 1241              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1242              		.loc 1 365 0
 1243 0146 0023     		movs	r3, #0
 1244 0148 00E0     		b	.L61
 1245              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1246              		.loc 1 368 0
 1247 014a 0023     		movs	r3, #0
 1248              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1249              		.loc 1 370 0
 1250 014c 1846     		mov	r0, r3
 1251 014e 0837     		adds	r7, r7, #8
 1252              		.cfi_def_cfa_offset 8
 1253 0150 BD46     		mov	sp, r7
 1254              		.cfi_def_cfa_register 13
 1255              		@ sp needed
 1256 0152 80BD     		pop	{r7, pc}
 1257              	.L76:
 1258              		.align	2
 1259              	.L75:
 1260 0154 00000000 		.word	modem_state
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 31


 1261 0158 00000000 		.word	modem_start_time_stamp
 1262 015c 00000000 		.word	updatable_parameters
 1263 0160 00000000 		.word	modem_stats
 1264 0164 9C010000 		.word	.LC13
 1265 0168 C4010000 		.word	.LC14
 1266 016c E8010000 		.word	.LC15
 1267 0170 08020000 		.word	.LC16
 1268              		.cfi_endproc
 1269              	.LFE75:
 1270              		.size	modem_process_tasks, .-modem_process_tasks
 1271              		.section	.rodata
 1272 022f 00       		.align	2
 1273              	.LC17:
 1274 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1274      6B696E67 
 1274      2041542B 
 1274      43524547 
 1274      3F00
 1275 0242 0000     		.align	2
 1276              	.LC18:
 1277 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1277      5245473F 
 1277      0D00
 1278 024e 0000     		.align	2
 1279              	.LC19:
 1280 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1280      61637469 
 1280      6E672073 
 1280      7472696E 
 1280      67204154 
 1281 026b 00       		.align	2
 1282              	.LC20:
 1283 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1283      5F726563 
 1283      65697665 
 1283      645F7374 
 1283      72696E67 
 1284 0285 000000   		.align	2
 1285              	.LC21:
 1286 0288 0D00     		.ascii	"\015\000"
 1287 028a 0000     		.align	2
 1288              	.LC22:
 1289 028c 3A2000   		.ascii	": \000"
 1290 028f 00       		.align	2
 1291              	.LC23:
 1292 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1292      73746572 
 1292      65642074 
 1292      6F206E65 
 1292      74776F72 
 1293              		.align	2
 1294              	.LC24:
 1295 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1295      20657874 
 1295      72616369 
 1295      6E672073 
 1295      7472696E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 32


 1296 02cf 00       		.align	2
 1297              	.LC25:
 1298 02d0 302C3100 		.ascii	"0,1\000"
 1299              		.align	2
 1300              	.LC26:
 1301 02d4 302C3500 		.ascii	"0,5\000"
 1302              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1303              		.align	2
 1304              		.global	is_connected_to_cell_network
 1305              		.thumb
 1306              		.thumb_func
 1307              		.type	is_connected_to_cell_network, %function
 1308              	is_connected_to_cell_network:
 1309              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1310              		.loc 1 373 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 16
 1313              		@ frame_needed = 1, uses_anonymous_args = 0
 1314 0000 80B5     		push	{r7, lr}
 1315              		.cfi_def_cfa_offset 8
 1316              		.cfi_offset 7, -8
 1317              		.cfi_offset 14, -4
 1318 0002 84B0     		sub	sp, sp, #16
 1319              		.cfi_def_cfa_offset 24
 1320 0004 00AF     		add	r7, sp, #0
 1321              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1322              		.loc 1 375 0
 1323 0006 2049     		ldr	r1, .L82
 1324 0008 0020     		movs	r0, #0
 1325 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1326              		.loc 1 377 0
 1327 000e 4FF4FA62 		mov	r2, #2000
 1328 0012 1E49     		ldr	r1, .L82+4
 1329 0014 1E48     		ldr	r0, .L82+8
 1330 0016 FFF7FEFF 		bl	at_write_command
 1331 001a 0346     		mov	r3, r0
 1332 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1333              		.loc 1 379 0
 1334 001e 1D49     		ldr	r1, .L82+12
 1335 0020 0020     		movs	r0, #0
 1336 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1337              		.loc 1 380 0
 1338 0026 1C4A     		ldr	r2, .L82+16
 1339 0028 1C49     		ldr	r1, .L82+20
 1340 002a 0020     		movs	r0, #0
 1341 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 33


 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1342              		.loc 1 383 0
 1343 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1344 0032 002B     		cmp	r3, #0
 1345 0034 23D0     		beq	.L78
 1346              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1347              		.loc 1 386 0
 1348 0036 0023     		movs	r3, #0
 1349 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1350              		.loc 1 388 0
 1351 003a 3B1D     		adds	r3, r7, #4
 1352 003c 184A     		ldr	r2, .L82+24
 1353 003e 1949     		ldr	r1, .L82+28
 1354 0040 1548     		ldr	r0, .L82+16
 1355 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1356              		.loc 1 389 0
 1357 0046 3B1D     		adds	r3, r7, #4
 1358 0048 1A46     		mov	r2, r3
 1359 004a 1749     		ldr	r1, .L82+32
 1360 004c 0020     		movs	r0, #0
 1361 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1362              		.loc 1 390 0
 1363 0052 1649     		ldr	r1, .L82+36
 1364 0054 0020     		movs	r0, #0
 1365 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1366              		.loc 1 393 0
 1367 005a 3B1D     		adds	r3, r7, #4
 1368 005c 1449     		ldr	r1, .L82+40
 1369 005e 1846     		mov	r0, r3
 1370 0060 FFF7FEFF 		bl	strstr
 1371 0064 0346     		mov	r3, r0
 1372 0066 002B     		cmp	r3, #0
 1373 0068 07D1     		bne	.L79
 1374              		.loc 1 393 0 is_stmt 0 discriminator 1
 1375 006a 3B1D     		adds	r3, r7, #4
 1376 006c 1149     		ldr	r1, .L82+44
 1377 006e 1846     		mov	r0, r3
 1378 0070 FFF7FEFF 		bl	strstr
 1379 0074 0346     		mov	r3, r0
 1380 0076 002B     		cmp	r3, #0
 1381 0078 01D0     		beq	.L78
 1382              	.L79:
 394:modem.c       ****             return 1u;
 1383              		.loc 1 394 0 is_stmt 1
 1384 007a 0123     		movs	r3, #1
 1385 007c 00E0     		b	.L81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 34


 1386              	.L78:
 1387              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
 1388              		.loc 1 398 0
 1389 007e 0023     		movs	r3, #0
 1390              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1391              		.loc 1 400 0
 1392 0080 1846     		mov	r0, r3
 1393 0082 1037     		adds	r7, r7, #16
 1394              		.cfi_def_cfa_offset 8
 1395 0084 BD46     		mov	sp, r7
 1396              		.cfi_def_cfa_register 13
 1397              		@ sp needed
 1398 0086 80BD     		pop	{r7, pc}
 1399              	.L83:
 1400              		.align	2
 1401              	.L82:
 1402 0088 30020000 		.word	.LC17
 1403 008c 00000000 		.word	.LC0
 1404 0090 44020000 		.word	.LC18
 1405 0094 50020000 		.word	.LC19
 1406 0098 00000000 		.word	uart_received_string
 1407 009c 6C020000 		.word	.LC20
 1408 00a0 88020000 		.word	.LC21
 1409 00a4 8C020000 		.word	.LC22
 1410 00a8 90020000 		.word	.LC23
 1411 00ac B0020000 		.word	.LC24
 1412 00b0 D0020000 		.word	.LC25
 1413 00b4 D4020000 		.word	.LC26
 1414              		.cfi_endproc
 1415              	.LFE76:
 1416              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1417              		.section	.rodata
 1418              		.align	2
 1419              	.LC27:
 1420 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1420      47414354 
 1420      3D312C31 
 1420      0D0A00
 1421              		.section	.text.set_up_internet_connection,"ax",%progbits
 1422              		.align	2
 1423              		.global	set_up_internet_connection
 1424              		.thumb
 1425              		.thumb_func
 1426              		.type	set_up_internet_connection, %function
 1427              	set_up_internet_connection:
 1428              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1429              		.loc 1 403 0
 1430              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 35


 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433 0000 80B5     		push	{r7, lr}
 1434              		.cfi_def_cfa_offset 8
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
 1437 0002 00AF     		add	r7, sp, #0
 1438              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1439              		.loc 1 414 0
 1440 0004 4FF47A72 		mov	r2, #1000
 1441 0008 0249     		ldr	r1, .L85
 1442 000a 0348     		ldr	r0, .L85+4
 1443 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1444              		.loc 1 416 0
 1445 0010 00BF     		nop
 1446 0012 80BD     		pop	{r7, pc}
 1447              	.L86:
 1448              		.align	2
 1449              	.L85:
 1450 0014 00000000 		.word	.LC0
 1451 0018 D8020000 		.word	.LC27
 1452              		.cfi_endproc
 1453              	.LFE77:
 1454              		.size	set_up_internet_connection, .-set_up_internet_connection
 1455              		.section	.rodata
 1456 02e7 00       		.align	2
 1457              	.LC28:
 1458 02e8 312C3100 		.ascii	"1,1\000"
 1459              		.align	2
 1460              	.LC29:
 1461 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1461      47414354 
 1461      3F0D00
 1462              		.section	.text.is_connected_to_internet,"ax",%progbits
 1463              		.align	2
 1464              		.global	is_connected_to_internet
 1465              		.thumb
 1466              		.thumb_func
 1467              		.type	is_connected_to_internet, %function
 1468              	is_connected_to_internet:
 1469              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 36


 1470              		.loc 1 419 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474 0000 80B5     		push	{r7, lr}
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 7, -8
 1477              		.cfi_offset 14, -4
 1478 0002 00AF     		add	r7, sp, #0
 1479              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1480              		.loc 1 424 0
 1481 0004 4FF4FA62 		mov	r2, #2000
 1482 0008 0549     		ldr	r1, .L90
 1483 000a 0648     		ldr	r0, .L90+4
 1484 000c FFF7FEFF 		bl	at_write_command
 1485 0010 0346     		mov	r3, r0
 1486 0012 002B     		cmp	r3, #0
 1487 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1488              		.loc 1 425 0
 1489 0016 0123     		movs	r3, #1
 1490 0018 00E0     		b	.L89
 1491              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1492              		.loc 1 427 0
 1493 001a 0023     		movs	r3, #0
 1494              	.L89:
 428:modem.c       **** }
 1495              		.loc 1 428 0
 1496 001c 1846     		mov	r0, r3
 1497 001e 80BD     		pop	{r7, pc}
 1498              	.L91:
 1499              		.align	2
 1500              	.L90:
 1501 0020 E8020000 		.word	.LC28
 1502 0024 EC020000 		.word	.LC29
 1503              		.cfi_endproc
 1504              	.LFE78:
 1505              		.size	is_connected_to_internet, .-is_connected_to_internet
 1506              		.section	.rodata
 1507 02f7 00       		.align	2
 1508              	.LC30:
 1509 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1509      4553510D 
 1509      00
 1510 0301 000000   		.align	2
 1511              	.LC31:
 1512 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1512      4553513A 
 1512      2025642C 
 1512      25642C25 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 37


 1512      642C2564 
 1513              		.section	.text.get_cell_network_stats,"ax",%progbits
 1514              		.align	2
 1515              		.global	get_cell_network_stats
 1516              		.thumb
 1517              		.thumb_func
 1518              		.type	get_cell_network_stats, %function
 1519              	get_cell_network_stats:
 1520              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1521              		.loc 1 430 0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 8
 1524              		@ frame_needed = 1, uses_anonymous_args = 0
 1525 0000 80B5     		push	{r7, lr}
 1526              		.cfi_def_cfa_offset 8
 1527              		.cfi_offset 7, -8
 1528              		.cfi_offset 14, -4
 1529 0002 86B0     		sub	sp, sp, #24
 1530              		.cfi_def_cfa_offset 32
 1531 0004 04AF     		add	r7, sp, #16
 1532              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1533              		.loc 1 432 0
 1534 0006 154B     		ldr	r3, .L93
 1535 0008 FF22     		movs	r2, #255
 1536 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1537              		.loc 1 433 0
 1538 000c 134B     		ldr	r3, .L93
 1539 000e FF22     		movs	r2, #255
 1540 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1541              		.loc 1 434 0
 1542 0012 124B     		ldr	r3, .L93
 1543 0014 FF22     		movs	r2, #255
 1544 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1545              		.loc 1 435 0
 1546 0018 104B     		ldr	r3, .L93
 1547 001a FF22     		movs	r2, #255
 1548 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1549              		.loc 1 436 0
 1550 001e 0F4B     		ldr	r3, .L93
 1551 0020 FF22     		movs	r2, #255
 1552 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1553              		.loc 1 437 0
 1554 0024 0D4B     		ldr	r3, .L93
 1555 0026 FF22     		movs	r2, #255
 1556 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 38


 1557              		.loc 1 440 0
 1558 002a 4FF4FA62 		mov	r2, #2000
 1559 002e 0C49     		ldr	r1, .L93+4
 1560 0030 0C48     		ldr	r0, .L93+8
 1561 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1562              		.loc 1 443 0
 1563 0036 0C4B     		ldr	r3, .L93+12
 1564 0038 0393     		str	r3, [sp, #12]
 1565 003a 0C4B     		ldr	r3, .L93+16
 1566 003c 0293     		str	r3, [sp, #8]
 1567 003e 0C4B     		ldr	r3, .L93+20
 1568 0040 0193     		str	r3, [sp, #4]
 1569 0042 0C4B     		ldr	r3, .L93+24
 1570 0044 0093     		str	r3, [sp]
 1571 0046 0C4B     		ldr	r3, .L93+28
 1572 0048 044A     		ldr	r2, .L93
 1573 004a 0C49     		ldr	r1, .L93+32
 1574 004c 0C48     		ldr	r0, .L93+36
 1575 004e FFF7FEFF 		bl	sscanf
 1576 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1577              		.loc 1 458 0
 1578 0054 00BF     		nop
 1579 0056 0837     		adds	r7, r7, #8
 1580              		.cfi_def_cfa_offset 8
 1581 0058 BD46     		mov	sp, r7
 1582              		.cfi_def_cfa_register 13
 1583              		@ sp needed
 1584 005a 80BD     		pop	{r7, pc}
 1585              	.L94:
 1586              		.align	2
 1587              	.L93:
 1588 005c 00000000 		.word	modem_stats
 1589 0060 00000000 		.word	.LC0
 1590 0064 F8020000 		.word	.LC30
 1591 0068 14000000 		.word	modem_stats+20
 1592 006c 10000000 		.word	modem_stats+16
 1593 0070 0C000000 		.word	modem_stats+12
 1594 0074 08000000 		.word	modem_stats+8
 1595 0078 04000000 		.word	modem_stats+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 39


 1596 007c 04030000 		.word	.LC31
 1597 0080 00000000 		.word	uart_received_string
 1598              		.cfi_endproc
 1599              	.LFE79:
 1600              		.size	get_cell_network_stats, .-get_cell_network_stats
 1601              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1602              		.align	2
 1603              		.global	updatable_parameters_initialize
 1604              		.thumb
 1605              		.thumb_func
 1606              		.type	updatable_parameters_initialize, %function
 1607              	updatable_parameters_initialize:
 1608              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1609              		.loc 1 461 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614 0000 80B4     		push	{r7}
 1615              		.cfi_def_cfa_offset 4
 1616              		.cfi_offset 7, -4
 1617 0002 00AF     		add	r7, sp, #0
 1618              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1619              		.loc 1 462 0
 1620 0004 0F4B     		ldr	r3, .L96
 1621 0006 0022     		movs	r2, #0
 1622 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1623              		.loc 1 463 0
 1624 000a 0E4B     		ldr	r3, .L96
 1625 000c 0122     		movs	r2, #1
 1626 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1627              		.loc 1 464 0
 1628 0010 0C4B     		ldr	r3, .L96
 1629 0012 0122     		movs	r2, #1
 1630 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1631              		.loc 1 465 0
 1632 0016 0B4B     		ldr	r3, .L96
 1633 0018 0122     		movs	r2, #1
 1634 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1635              		.loc 1 466 0
 1636 001c 094B     		ldr	r3, .L96
 1637 001e 0122     		movs	r2, #1
 1638 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     // APP_INTERFACE
 470:modem.c       ****     updatable_parameters.App_LED_freq = 120u; 
 1639              		.loc 1 470 0
 1640 0022 084B     		ldr	r3, .L96
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 40


 1641 0024 7822     		movs	r2, #120
 1642 0026 5A71     		strb	r2, [r3, #5]
 471:modem.c       ****     updatable_parameters.Level_Sensor_freq = 120u; 
 1643              		.loc 1 471 0
 1644 0028 064B     		ldr	r3, .L96
 1645 002a 7822     		movs	r2, #120
 1646 002c 9A71     		strb	r2, [r3, #6]
 472:modem.c       ****     updatable_parameters.Downstream_Level_Sensor_freq = 120u;
 1647              		.loc 1 472 0
 1648 002e 054B     		ldr	r3, .L96
 1649 0030 7822     		movs	r2, #120
 1650 0032 DA71     		strb	r2, [r3, #7]
 473:modem.c       ****     updatable_parameters.valve_freq = 120u;
 1651              		.loc 1 473 0
 1652 0034 034B     		ldr	r3, .L96
 1653 0036 7822     		movs	r2, #120
 1654 0038 1A72     		strb	r2, [r3, #8]
 474:modem.c       **** }
 1655              		.loc 1 474 0
 1656 003a 00BF     		nop
 1657 003c BD46     		mov	sp, r7
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 003e 80BC     		pop	{r7}
 1661              		.cfi_restore 7
 1662              		.cfi_def_cfa_offset 0
 1663 0040 7047     		bx	lr
 1664              	.L97:
 1665 0042 00BF     		.align	2
 1666              	.L96:
 1667 0044 00000000 		.word	updatable_parameters
 1668              		.cfi_endproc
 1669              	.LFE80:
 1670              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1671              		.section	.rodata
 1672 0322 0000     		.align	2
 1673              	.LC32:
 1674 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1674      5F547970 
 1674      653A2000 
 1675              		.align	2
 1676              	.LC33:
 1677 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1677      54797065 
 1677      3A2000
 1678 033b 00       		.align	2
 1679              	.LC34:
 1680 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1680      6C655F46 
 1680      7265713A 
 1680      2000
 1681 034a 0000     		.align	2
 1682              	.LC35:
 1683 034c 5265706F 		.ascii	"Report_Freq: \000"
 1683      72745F46 
 1683      7265713A 
 1683      2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 41


 1684 035a 0000     		.align	2
 1685              	.LC36:
 1686 035c 44656275 		.ascii	"Debug_Freq: \000"
 1686      675F4672 
 1686      65713A20 
 1686      00
 1687 0369 000000   		.align	2
 1688              	.LC37:
 1689 036c 41707073 		.ascii	"Apps_Enabled: \000"
 1689      5F456E61 
 1689      626C6564 
 1689      3A2000
 1690 037b 00       		.align	2
 1691              	.LC38:
 1692 037c 4C657665 		.ascii	"Level_Sensor\000"
 1692      6C5F5365 
 1692      6E736F72 
 1692      00
 1693 0389 000000   		.align	2
 1694              	.LC39:
 1695 038c 4170705F 		.ascii	"App_LED\000"
 1695      4C454400 
 1696              		.align	2
 1697              	.LC40:
 1698 0394 446F776E 		.ascii	"Downstream_Level\000"
 1698      73747265 
 1698      616D5F4C 
 1698      6576656C 
 1698      00
 1699 03a5 000000   		.align	2
 1700              	.LC41:
 1701 03a8 56616C76 		.ascii	"Valve\000"
 1701      6500
 1702 03ae 0000     		.align	2
 1703              	.LC42:
 1704 03b0 4170705F 		.ascii	"App_LED: \000"
 1704      4C45443A 
 1704      2000
 1705 03ba 0000     		.align	2
 1706              	.LC43:
 1707 03bc 4C657665 		.ascii	"Level_Sensor: \000"
 1707      6C5F5365 
 1707      6E736F72 
 1707      3A2000
 1708 03cb 00       		.align	2
 1709              	.LC44:
 1710 03cc 446F776E 		.ascii	"Downstream_Level: \000"
 1710      73747265 
 1710      616D5F4C 
 1710      6576656C 
 1710      3A2000
 1711 03df 00       		.align	2
 1712              	.LC45:
 1713 03e0 56616C76 		.ascii	"Valve:\000"
 1713      653A00
 1714 03e7 00       		.align	2
 1715              	.LC46:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 42


 1716 03e8 256400   		.ascii	"%d\000"
 1717 03eb 00       		.align	2
 1718              	.LC47:
 1719 03ec 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1719      20747970 
 1719      65206368 
 1719      616E6765 
 1719      6420746F 
 1720 0407 00       		.align	2
 1721              	.LC48:
 1722 0408 436F756C 		.ascii	"Could not change node type.\000"
 1722      64206E6F 
 1722      74206368 
 1722      616E6765 
 1722      206E6F64 
 1723              		.align	2
 1724              	.LC49:
 1725 0424 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1725      74797065 
 1725      20636861 
 1725      6E676564 
 1725      20746F3A 
 1726 043e 0000     		.align	2
 1727              	.LC50:
 1728 0440 436F756C 		.ascii	"Could not change SIM type.\000"
 1728      64206E6F 
 1728      74206368 
 1728      616E6765 
 1728      2053494D 
 1729 045b 00       		.align	2
 1730              	.LC51:
 1731 045c 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1731      6C696E67 
 1731      20667265 
 1731      7175656E 
 1731      63792063 
 1732              		.align	2
 1733              	.LC52:
 1734 0480 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1734      64206E6F 
 1734      74207061 
 1734      72736520 
 1734      6E657720 
 1735 04ae 0000     		.align	2
 1736              	.LC53:
 1737 04b0 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1737      7274696E 
 1737      67206672 
 1737      65717565 
 1737      6E637920 
 1738 04d5 000000   		.align	2
 1739              	.LC54:
 1740 04d8 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1740      64206E6F 
 1740      74207061 
 1740      72736520 
 1740      6E657720 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 43


 1741 0507 00       		.align	2
 1742              	.LC55:
 1743 0508 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1743      67207072 
 1743      696E7469 
 1743      6E672066 
 1743      72657175 
 1744 0532 0000     		.align	2
 1745              	.LC56:
 1746 0534 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1746      64206E6F 
 1746      74207061 
 1746      72736520 
 1746      6E657720 
 1747 0563 00       		.align	2
 1748              	.LC57:
 1749 0564 46726571 		.ascii	"Freq=\000"
 1749      3D00
 1750 056a 0000     		.align	2
 1751              	.LC58:
 1752 056c 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1752      4C454420 
 1752      66726571 
 1752      75656E63 
 1752      79206368 
 1753 058f 00       		.align	2
 1754              	.LC59:
 1755 0590 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1755      64206E6F 
 1755      74207061 
 1755      72736520 
 1755      6E657720 
 1756 05bd 000000   		.align	2
 1757              	.LC60:
 1758 05c0 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1758      70705F4C 
 1758      45442066 
 1758      72657175 
 1758      656E6379 
 1759 05e6 0000     		.align	2
 1760              	.LC61:
 1761 05e8 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1761      6C5F5365 
 1761      6E736F72 
 1761      20667265 
 1761      7175656E 
 1762              		.align	2
 1763              	.LC62:
 1764 0610 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1764      64206E6F 
 1764      74207061 
 1764      72736520 
 1764      6E657720 
 1765 0642 0000     		.align	2
 1766              	.LC63:
 1767 0644 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1767      6576656C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 44


 1767      5F53656E 
 1767      736F7220 
 1767      66726571 
 1768 066f 00       		.align	2
 1769              	.LC64:
 1770 0670 446F776E 		.ascii	"Downstream_Level_Sensor frequency changed to: %d\015"
 1770      73747265 
 1770      616D5F4C 
 1770      6576656C 
 1770      5F53656E 
 1771 06a1 0A00     		.ascii	"\012\000"
 1772 06a3 00       		.align	2
 1773              	.LC65:
 1774 06a4 436F756C 		.ascii	"Could not parse new Downstream_Level_Sensor frequen"
 1774      64206E6F 
 1774      74207061 
 1774      72736520 
 1774      6E657720 
 1775 06d7 63792076 		.ascii	"cy value.\000"
 1775      616C7565 
 1775      2E00
 1776 06e1 000000   		.align	2
 1777              	.LC66:
 1778 06e4 4E6F2044 		.ascii	"No Downstream_Level_Sensor frequency value indicate"
 1778      6F776E73 
 1778      74726561 
 1778      6D5F4C65 
 1778      76656C5F 
 1779 0717 642E00   		.ascii	"d.\000"
 1780              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1781              		.align	2
 1782              		.global	get_updated_parameters_from_malcom
 1783              		.thumb
 1784              		.thumb_func
 1785              		.type	get_updated_parameters_from_malcom, %function
 1786              	get_updated_parameters_from_malcom:
 1787              	.LFB81:
 475:modem.c       **** 
 476:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 477:modem.c       **** void get_updated_parameters_from_malcom(){
 1788              		.loc 1 477 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 800
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792 0000 90B5     		push	{r4, r7, lr}
 1793              		.cfi_def_cfa_offset 12
 1794              		.cfi_offset 4, -12
 1795              		.cfi_offset 7, -8
 1796              		.cfi_offset 14, -4
 1797 0002 ADF5497D 		sub	sp, sp, #804
 1798              		.cfi_def_cfa_offset 816
 1799 0006 00AF     		add	r7, sp, #0
 1800              		.cfi_def_cfa_register 7
 478:modem.c       ****     
 479:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 480:modem.c       ****     char s_node_type[10];
 481:modem.c       ****     char s_sim_type[10];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 45


 482:modem.c       ****     char s_sample_freq[10];
 483:modem.c       ****     char s_report_freq[10];
 484:modem.c       ****     char s_debug_freq[10];
 485:modem.c       ****     
 486:modem.c       ****     //apps
 487:modem.c       ****     // APP_INTERFACE
 488:modem.c       ****     char s_app_led[100];
 489:modem.c       ****     s_app_led[0] = '\0';
 1801              		.loc 1 489 0
 1802 0008 0023     		movs	r3, #0
 1803 000a 87F88032 		strb	r3, [r7, #640]
 490:modem.c       ****     
 491:modem.c       ****     char s_level_sensor[100];
 492:modem.c       ****     s_level_sensor[0] = '\0';
 1804              		.loc 1 492 0
 1805 000e 07F50773 		add	r3, r7, #540
 1806 0012 0022     		movs	r2, #0
 1807 0014 1A70     		strb	r2, [r3]
 493:modem.c       ****     
 494:modem.c       ****     char s_down_level_sensor[100];
 495:modem.c       ****     s_down_level_sensor[0] = '\0';
 1808              		.loc 1 495 0
 1809 0016 07F5DC73 		add	r3, r7, #440
 1810 001a 0022     		movs	r2, #0
 1811 001c 1A70     		strb	r2, [r3]
 496:modem.c       ****     
 497:modem.c       ****     char s_valve[100];
 498:modem.c       ****     s_valve[0] = '\0';
 1812              		.loc 1 498 0
 1813 001e 07F5AA73 		add	r3, r7, #340
 1814 0022 0022     		movs	r2, #0
 1815 0024 1A70     		strb	r2, [r3]
 499:modem.c       ****     
 500:modem.c       ****     char s_apps_enabled[200];
 501:modem.c       ****     s_apps_enabled[0]='\0';
 1816              		.loc 1 501 0
 1817 0026 07F18C03 		add	r3, r7, #140
 1818 002a 0022     		movs	r2, #0
 1819 002c 1A70     		strb	r2, [r3]
 502:modem.c       ****     
 503:modem.c       ****     s_node_type[0] = '\0';
 1820              		.loc 1 503 0
 1821 002e 0023     		movs	r3, #0
 1822 0030 87F81433 		strb	r3, [r7, #788]
 504:modem.c       ****     s_sim_type[0] = '\0';
 1823              		.loc 1 504 0
 1824 0034 0023     		movs	r3, #0
 1825 0036 87F80833 		strb	r3, [r7, #776]
 505:modem.c       ****     s_sample_freq[0] = '\0';
 1826              		.loc 1 505 0
 1827 003a 0023     		movs	r3, #0
 1828 003c 87F8FC32 		strb	r3, [r7, #764]
 506:modem.c       ****     s_report_freq[0] = '\0';
 1829              		.loc 1 506 0
 1830 0040 0023     		movs	r3, #0
 1831 0042 87F8F032 		strb	r3, [r7, #752]
 507:modem.c       ****     s_debug_freq[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 46


 1832              		.loc 1 507 0
 1833 0046 0023     		movs	r3, #0
 1834 0048 87F8E432 		strb	r3, [r7, #740]
 508:modem.c       ****     
 509:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 510:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1835              		.loc 1 510 0
 1836 004c 07F54573 		add	r3, r7, #788
 1837 0050 B14A     		ldr	r2, .L131
 1838 0052 B249     		ldr	r1, .L131+4
 1839 0054 B248     		ldr	r0, .L131+8
 1840 0056 FFF7FEFF 		bl	extract_string
 511:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1841              		.loc 1 511 0
 1842 005a 07F54273 		add	r3, r7, #776
 1843 005e AE4A     		ldr	r2, .L131
 1844 0060 B049     		ldr	r1, .L131+12
 1845 0062 AF48     		ldr	r0, .L131+8
 1846 0064 FFF7FEFF 		bl	extract_string
 512:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1847              		.loc 1 512 0
 1848 0068 07F53F73 		add	r3, r7, #764
 1849 006c AA4A     		ldr	r2, .L131
 1850 006e AE49     		ldr	r1, .L131+16
 1851 0070 AB48     		ldr	r0, .L131+8
 1852 0072 FFF7FEFF 		bl	extract_string
 513:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1853              		.loc 1 513 0
 1854 0076 07F53C73 		add	r3, r7, #752
 1855 007a A74A     		ldr	r2, .L131
 1856 007c AB49     		ldr	r1, .L131+20
 1857 007e A848     		ldr	r0, .L131+8
 1858 0080 FFF7FEFF 		bl	extract_string
 514:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1859              		.loc 1 514 0
 1860 0084 07F53973 		add	r3, r7, #740
 1861 0088 A34A     		ldr	r2, .L131
 1862 008a A949     		ldr	r1, .L131+24
 1863 008c A448     		ldr	r0, .L131+8
 1864 008e FFF7FEFF 		bl	extract_string
 515:modem.c       ****     
 516:modem.c       ****     // which apps are enabled?
 517:modem.c       ****     // APP_INTERFACE
 518:modem.c       ****     if (strstr(uart_received_string,"Apps_Enabled: ")){
 1865              		.loc 1 518 0
 1866 0092 A849     		ldr	r1, .L131+28
 1867 0094 A248     		ldr	r0, .L131+8
 1868 0096 FFF7FEFF 		bl	strstr
 1869 009a 0346     		mov	r3, r0
 1870 009c 002B     		cmp	r3, #0
 1871 009e 56D0     		beq	.L99
 519:modem.c       ****         extract_string(uart_received_string,"Apps_Enabled: ","\r",s_apps_enabled);
 1872              		.loc 1 519 0
 1873 00a0 07F18C03 		add	r3, r7, #140
 1874 00a4 9C4A     		ldr	r2, .L131
 1875 00a6 A349     		ldr	r1, .L131+28
 1876 00a8 9D48     		ldr	r0, .L131+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 47


 1877 00aa FFF7FEFF 		bl	extract_string
 520:modem.c       ****         // if an app is in this string, turn it on
 521:modem.c       ****         if (strstr(s_apps_enabled,"Level_Sensor")!=NULL){
 1878              		.loc 1 521 0
 1879 00ae 07F18C03 		add	r3, r7, #140
 1880 00b2 A149     		ldr	r1, .L131+32
 1881 00b4 1846     		mov	r0, r3
 1882 00b6 FFF7FEFF 		bl	strstr
 1883 00ba 0346     		mov	r3, r0
 1884 00bc 002B     		cmp	r3, #0
 1885 00be 03D0     		beq	.L100
 522:modem.c       ****             // if we see level sensor in the enabled list, turn it on
 523:modem.c       ****             level_sensor_enabled = 1;
 1886              		.loc 1 523 0
 1887 00c0 9E4B     		ldr	r3, .L131+36
 1888 00c2 0122     		movs	r2, #1
 1889 00c4 1A70     		strb	r2, [r3]
 1890 00c6 06E0     		b	.L101
 1891              	.L100:
 524:modem.c       ****         }        
 525:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 526:modem.c       ****         else if (level_sensor_enabled){ 
 1892              		.loc 1 526 0
 1893 00c8 9C4B     		ldr	r3, .L131+36
 1894 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1895 00cc 002B     		cmp	r3, #0
 1896 00ce 02D0     		beq	.L101
 527:modem.c       ****             level_sensor_enabled = 0;
 1897              		.loc 1 527 0
 1898 00d0 9A4B     		ldr	r3, .L131+36
 1899 00d2 0022     		movs	r2, #0
 1900 00d4 1A70     		strb	r2, [r3]
 1901              	.L101:
 528:modem.c       ****         }
 529:modem.c       ****         
 530:modem.c       ****         if (strstr(s_apps_enabled,"App_LED")!=NULL){
 1902              		.loc 1 530 0
 1903 00d6 07F18C03 		add	r3, r7, #140
 1904 00da 9949     		ldr	r1, .L131+40
 1905 00dc 1846     		mov	r0, r3
 1906 00de FFF7FEFF 		bl	strstr
 1907 00e2 0346     		mov	r3, r0
 1908 00e4 002B     		cmp	r3, #0
 1909 00e6 03D0     		beq	.L102
 531:modem.c       ****             // if we this app in the enabled list, turn it on
 532:modem.c       ****             App_LED_enabled = 1;
 1910              		.loc 1 532 0
 1911 00e8 964B     		ldr	r3, .L131+44
 1912 00ea 0122     		movs	r2, #1
 1913 00ec 1A70     		strb	r2, [r3]
 1914 00ee 06E0     		b	.L103
 1915              	.L102:
 533:modem.c       ****         }
 534:modem.c       ****         else if (App_LED_enabled){
 1916              		.loc 1 534 0
 1917 00f0 944B     		ldr	r3, .L131+44
 1918 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 48


 1919 00f4 002B     		cmp	r3, #0
 1920 00f6 02D0     		beq	.L103
 535:modem.c       ****             App_LED_enabled = 0;
 1921              		.loc 1 535 0
 1922 00f8 924B     		ldr	r3, .L131+44
 1923 00fa 0022     		movs	r2, #0
 1924 00fc 1A70     		strb	r2, [r3]
 1925              	.L103:
 536:modem.c       ****         }
 537:modem.c       ****         
 538:modem.c       ****         if (strstr(s_apps_enabled,"Downstream_Level") != NULL){
 1926              		.loc 1 538 0
 1927 00fe 07F18C03 		add	r3, r7, #140
 1928 0102 9149     		ldr	r1, .L131+48
 1929 0104 1846     		mov	r0, r3
 1930 0106 FFF7FEFF 		bl	strstr
 1931 010a 0346     		mov	r3, r0
 1932 010c 002B     		cmp	r3, #0
 1933 010e 03D0     		beq	.L104
 539:modem.c       ****             downstream_level_sensor_enabled = 1;
 1934              		.loc 1 539 0
 1935 0110 8E4B     		ldr	r3, .L131+52
 1936 0112 0122     		movs	r2, #1
 1937 0114 1A70     		strb	r2, [r3]
 1938 0116 06E0     		b	.L105
 1939              	.L104:
 540:modem.c       ****         }        
 541:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 542:modem.c       ****         else if (downstream_level_sensor_enabled){ 
 1940              		.loc 1 542 0
 1941 0118 8C4B     		ldr	r3, .L131+52
 1942 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1943 011c 002B     		cmp	r3, #0
 1944 011e 02D0     		beq	.L105
 543:modem.c       ****             downstream_level_sensor_enabled = 0;
 1945              		.loc 1 543 0
 1946 0120 8A4B     		ldr	r3, .L131+52
 1947 0122 0022     		movs	r2, #0
 1948 0124 1A70     		strb	r2, [r3]
 1949              	.L105:
 544:modem.c       ****         }
 545:modem.c       ****         
 546:modem.c       ****         if (strstr(s_apps_enabled, "Valve") != NULL){
 1950              		.loc 1 546 0
 1951 0126 07F18C03 		add	r3, r7, #140
 1952 012a 8949     		ldr	r1, .L131+56
 1953 012c 1846     		mov	r0, r3
 1954 012e FFF7FEFF 		bl	strstr
 1955 0132 0346     		mov	r3, r0
 1956 0134 002B     		cmp	r3, #0
 1957 0136 03D0     		beq	.L106
 547:modem.c       ****             valve_enabled = 1u;
 1958              		.loc 1 547 0
 1959 0138 864B     		ldr	r3, .L131+60
 1960 013a 0122     		movs	r2, #1
 1961 013c 1A70     		strb	r2, [r3]
 1962 013e 06E0     		b	.L99
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 49


 1963              	.L106:
 548:modem.c       ****         }
 549:modem.c       ****         else if(valve_enabled){
 1964              		.loc 1 549 0
 1965 0140 844B     		ldr	r3, .L131+60
 1966 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1967 0144 002B     		cmp	r3, #0
 1968 0146 02D0     		beq	.L99
 550:modem.c       ****             valve_enabled = 0u;
 1969              		.loc 1 550 0
 1970 0148 824B     		ldr	r3, .L131+60
 1971 014a 0022     		movs	r2, #0
 1972 014c 1A70     		strb	r2, [r3]
 1973              	.L99:
 551:modem.c       ****         }
 552:modem.c       ****         
 553:modem.c       ****     }
 554:modem.c       **** 
 555:modem.c       ****         
 556:modem.c       ****     
 557:modem.c       ****     // update app parameters (valve open %, measuring freq, etc)
 558:modem.c       ****     // APP_INTERFACE
 559:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1974              		.loc 1 559 0
 1975 014e 07F52073 		add	r3, r7, #640
 1976 0152 714A     		ldr	r2, .L131
 1977 0154 8049     		ldr	r1, .L131+64
 1978 0156 7248     		ldr	r0, .L131+8
 1979 0158 FFF7FEFF 		bl	extract_string
 560:modem.c       ****     App_LED_Update(s_app_led);
 1980              		.loc 1 560 0
 1981 015c 07F52073 		add	r3, r7, #640
 1982 0160 1846     		mov	r0, r3
 1983 0162 FFF7FEFF 		bl	App_LED_Update
 561:modem.c       ****     
 562:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1984              		.loc 1 562 0
 1985 0166 07F50773 		add	r3, r7, #540
 1986 016a 6B4A     		ldr	r2, .L131
 1987 016c 7B49     		ldr	r1, .L131+68
 1988 016e 6C48     		ldr	r0, .L131+8
 1989 0170 FFF7FEFF 		bl	extract_string
 563:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1990              		.loc 1 563 0
 1991 0174 07F50773 		add	r3, r7, #540
 1992 0178 1846     		mov	r0, r3
 1993 017a FFF7FEFF 		bl	Level_Sensor_Update
 564:modem.c       ****     
 565:modem.c       ****     extract_string(uart_received_string,"Downstream_Level: ","\r",s_down_level_sensor);
 1994              		.loc 1 565 0
 1995 017e 07F5DC73 		add	r3, r7, #440
 1996 0182 654A     		ldr	r2, .L131
 1997 0184 7649     		ldr	r1, .L131+72
 1998 0186 6648     		ldr	r0, .L131+8
 1999 0188 FFF7FEFF 		bl	extract_string
 566:modem.c       ****     downstream_Level_Sensor_Update(s_down_level_sensor);
 2000              		.loc 1 566 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 50


 2001 018c 07F5DC73 		add	r3, r7, #440
 2002 0190 1846     		mov	r0, r3
 2003 0192 FFF7FEFF 		bl	downstream_Level_Sensor_Update
 567:modem.c       ****     
 568:modem.c       ****     extract_string(uart_received_string,"Valve:","\r", s_valve);
 2004              		.loc 1 568 0
 2005 0196 07F5AA73 		add	r3, r7, #340
 2006 019a 5F4A     		ldr	r2, .L131
 2007 019c 7149     		ldr	r1, .L131+76
 2008 019e 6048     		ldr	r0, .L131+8
 2009 01a0 FFF7FEFF 		bl	extract_string
 569:modem.c       ****     valve_Update(s_valve);
 2010              		.loc 1 569 0
 2011 01a4 07F5AA73 		add	r3, r7, #340
 2012 01a8 1846     		mov	r0, r3
 2013 01aa FFF7FEFF 		bl	valve_Update
 570:modem.c       ****     
 571:modem.c       ****     // Create variables for what is sent back from the server
 572:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq,
 573:modem.c       ****     
 574:modem.c       ****     // Scan character arrays and save values 
 575:modem.c       ****     
 576:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 2014              		.loc 1 576 0
 2015 01ae 07F18802 		add	r2, r7, #136
 2016 01b2 07F54573 		add	r3, r7, #788
 2017 01b6 6C49     		ldr	r1, .L131+80
 2018 01b8 1846     		mov	r0, r3
 2019 01ba FFF7FEFF 		bl	sscanf
 2020 01be 0346     		mov	r3, r0
 2021 01c0 012B     		cmp	r3, #1
 2022 01c2 0ED1     		bne	.L107
 577:modem.c       ****         updatable_parameters.node_type = node_type;
 2023              		.loc 1 577 0
 2024 01c4 07F18803 		add	r3, r7, #136
 2025 01c8 1B68     		ldr	r3, [r3]
 2026 01ca DAB2     		uxtb	r2, r3
 2027 01cc 674B     		ldr	r3, .L131+84
 2028 01ce 1A70     		strb	r2, [r3]
 578:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 2029              		.loc 1 578 0
 2030 01d0 07F18803 		add	r3, r7, #136
 2031 01d4 1B68     		ldr	r3, [r3]
 2032 01d6 1A46     		mov	r2, r3
 2033 01d8 6549     		ldr	r1, .L131+88
 2034 01da 0020     		movs	r0, #0
 2035 01dc FFF7FEFF 		bl	printNotif
 2036 01e0 03E0     		b	.L108
 2037              	.L107:
 579:modem.c       ****     }else{
 580:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 2038              		.loc 1 580 0
 2039 01e2 6449     		ldr	r1, .L131+92
 2040 01e4 0220     		movs	r0, #2
 2041 01e6 FFF7FEFF 		bl	printNotif
 2042              	.L108:
 581:modem.c       ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 51


 582:modem.c       ****     
 583:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 2043              		.loc 1 583 0
 2044 01ea 07F18402 		add	r2, r7, #132
 2045 01ee 07F54273 		add	r3, r7, #776
 2046 01f2 5D49     		ldr	r1, .L131+80
 2047 01f4 1846     		mov	r0, r3
 2048 01f6 FFF7FEFF 		bl	sscanf
 2049 01fa 0346     		mov	r3, r0
 2050 01fc 012B     		cmp	r3, #1
 2051 01fe 12D1     		bne	.L109
 584:modem.c       ****         updatable_parameters.sim_type = sim_type;
 2052              		.loc 1 584 0
 2053 0200 07F18403 		add	r3, r7, #132
 2054 0204 1B68     		ldr	r3, [r3]
 2055 0206 002B     		cmp	r3, #0
 2056 0208 14BF     		ite	ne
 2057 020a 0123     		movne	r3, #1
 2058 020c 0023     		moveq	r3, #0
 2059 020e DAB2     		uxtb	r2, r3
 2060 0210 564B     		ldr	r3, .L131+84
 2061 0212 5A70     		strb	r2, [r3, #1]
 585:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 2062              		.loc 1 585 0
 2063 0214 07F18403 		add	r3, r7, #132
 2064 0218 1B68     		ldr	r3, [r3]
 2065 021a 1A46     		mov	r2, r3
 2066 021c 5649     		ldr	r1, .L131+96
 2067 021e 0020     		movs	r0, #0
 2068 0220 FFF7FEFF 		bl	printNotif
 2069 0224 03E0     		b	.L110
 2070              	.L109:
 586:modem.c       ****     }else{
 587:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 2071              		.loc 1 587 0
 2072 0226 5549     		ldr	r1, .L131+100
 2073 0228 0220     		movs	r0, #2
 2074 022a FFF7FEFF 		bl	printNotif
 2075              	.L110:
 588:modem.c       ****     }
 589:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 2076              		.loc 1 589 0
 2077 022e 07F18002 		add	r2, r7, #128
 2078 0232 07F53F73 		add	r3, r7, #764
 2079 0236 4C49     		ldr	r1, .L131+80
 2080 0238 1846     		mov	r0, r3
 2081 023a FFF7FEFF 		bl	sscanf
 2082 023e 0346     		mov	r3, r0
 2083 0240 012B     		cmp	r3, #1
 2084 0242 1DD1     		bne	.L111
 590:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 2085              		.loc 1 590 0
 2086 0244 07F18003 		add	r3, r7, #128
 2087 0248 1B68     		ldr	r3, [r3]
 2088 024a DAB2     		uxtb	r2, r3
 2089 024c 474B     		ldr	r3, .L131+84
 2090 024e 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 52


 591:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 592:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 2091              		.loc 1 592 0
 2092 0250 464B     		ldr	r3, .L131+84
 2093 0252 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2094 0254 99B2     		uxth	r1, r3
 2095 0256 4A4C     		ldr	r4, .L131+104
 2096 0258 3846     		mov	r0, r7
 2097 025a 0723     		movs	r3, #7
 2098 025c 0122     		movs	r2, #1
 2099 025e FFF7FEFF 		bl	CreateAlarm
 2100 0262 3A46     		mov	r2, r7
 2101 0264 2346     		mov	r3, r4
 2102 0266 1168     		ldr	r1, [r2]	@ unaligned
 2103 0268 1960     		str	r1, [r3]	@ unaligned
 2104 026a 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2105 026c 9A80     		strh	r2, [r3, #4]	@ unaligned
 593:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 2106              		.loc 1 593 0
 2107 026e 07F18003 		add	r3, r7, #128
 2108 0272 1B68     		ldr	r3, [r3]
 2109 0274 1A46     		mov	r2, r3
 2110 0276 4349     		ldr	r1, .L131+108
 2111 0278 0020     		movs	r0, #0
 2112 027a FFF7FEFF 		bl	printNotif
 2113 027e 03E0     		b	.L112
 2114              	.L111:
 594:modem.c       ****     }else{
 595:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 2115              		.loc 1 595 0
 2116 0280 4149     		ldr	r1, .L131+112
 2117 0282 0220     		movs	r0, #2
 2118 0284 FFF7FEFF 		bl	printNotif
 2119              	.L112:
 596:modem.c       ****     }
 597:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 2120              		.loc 1 597 0
 2121 0288 07F17C02 		add	r2, r7, #124
 2122 028c 07F53C73 		add	r3, r7, #752
 2123 0290 3549     		ldr	r1, .L131+80
 2124 0292 1846     		mov	r0, r3
 2125 0294 FFF7FEFF 		bl	sscanf
 2126 0298 0346     		mov	r3, r0
 2127 029a 012B     		cmp	r3, #1
 2128 029c 1DD1     		bne	.L113
 598:modem.c       ****         updatable_parameters.sync_time = report_freq;
 2129              		.loc 1 598 0
 2130 029e 07F17C03 		add	r3, r7, #124
 2131 02a2 1B68     		ldr	r3, [r3]
 2132 02a4 DAB2     		uxtb	r2, r3
 2133 02a6 314B     		ldr	r3, .L131+84
 2134 02a8 DA70     		strb	r2, [r3, #3]
 599:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 600:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 2135              		.loc 1 600 0
 2136 02aa 304B     		ldr	r3, .L131+84
 2137 02ac DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 53


 2138 02ae 99B2     		uxth	r1, r3
 2139 02b0 364C     		ldr	r4, .L131+116
 2140 02b2 3846     		mov	r0, r7
 2141 02b4 0723     		movs	r3, #7
 2142 02b6 0122     		movs	r2, #1
 2143 02b8 FFF7FEFF 		bl	CreateAlarm
 2144 02bc 3A46     		mov	r2, r7
 2145 02be 2346     		mov	r3, r4
 2146 02c0 1168     		ldr	r1, [r2]	@ unaligned
 2147 02c2 1960     		str	r1, [r3]	@ unaligned
 2148 02c4 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2149 02c6 9A80     		strh	r2, [r3, #4]	@ unaligned
 601:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 2150              		.loc 1 601 0
 2151 02c8 07F17C03 		add	r3, r7, #124
 2152 02cc 1B68     		ldr	r3, [r3]
 2153 02ce 1A46     		mov	r2, r3
 2154 02d0 2F49     		ldr	r1, .L131+120
 2155 02d2 0020     		movs	r0, #0
 2156 02d4 FFF7FEFF 		bl	printNotif
 2157 02d8 03E0     		b	.L114
 2158              	.L113:
 602:modem.c       ****         }else{
 603:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 2159              		.loc 1 603 0
 2160 02da 2E49     		ldr	r1, .L131+124
 2161 02dc 0220     		movs	r0, #2
 2162 02de FFF7FEFF 		bl	printNotif
 2163              	.L114:
 604:modem.c       ****     }
 605:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 2164              		.loc 1 605 0
 2165 02e2 07F17802 		add	r2, r7, #120
 2166 02e6 07F53973 		add	r3, r7, #740
 2167 02ea 1F49     		ldr	r1, .L131+80
 2168 02ec 1846     		mov	r0, r3
 2169 02ee FFF7FEFF 		bl	sscanf
 2170 02f2 0346     		mov	r3, r0
 2171 02f4 012B     		cmp	r3, #1
 2172 02f6 51D1     		bne	.L115
 606:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 2173              		.loc 1 606 0
 2174 02f8 07F17803 		add	r3, r7, #120
 2175 02fc 1B68     		ldr	r3, [r3]
 2176 02fe DAB2     		uxtb	r2, r3
 2177 0300 1A4B     		ldr	r3, .L131+84
 2178 0302 1A71     		strb	r2, [r3, #4]
 607:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 2179              		.loc 1 607 0
 2180 0304 07F17803 		add	r3, r7, #120
 2181 0308 1B68     		ldr	r3, [r3]
 2182 030a 1A46     		mov	r2, r3
 2183 030c 2249     		ldr	r1, .L131+128
 2184 030e 0020     		movs	r0, #0
 2185 0310 FFF7FEFF 		bl	printNotif
 2186 0314 46E0     		b	.L116
 2187              	.L132:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 54


 2188 0316 00BF     		.align	2
 2189              	.L131:
 2190 0318 88020000 		.word	.LC21
 2191 031c 24030000 		.word	.LC32
 2192 0320 00000000 		.word	uart_received_string
 2193 0324 30030000 		.word	.LC33
 2194 0328 3C030000 		.word	.LC34
 2195 032c 4C030000 		.word	.LC35
 2196 0330 5C030000 		.word	.LC36
 2197 0334 6C030000 		.word	.LC37
 2198 0338 7C030000 		.word	.LC38
 2199 033c 00000000 		.word	level_sensor_enabled
 2200 0340 8C030000 		.word	.LC39
 2201 0344 00000000 		.word	App_LED_enabled
 2202 0348 94030000 		.word	.LC40
 2203 034c 00000000 		.word	downstream_level_sensor_enabled
 2204 0350 A8030000 		.word	.LC41
 2205 0354 00000000 		.word	valve_enabled
 2206 0358 B0030000 		.word	.LC42
 2207 035c BC030000 		.word	.LC43
 2208 0360 CC030000 		.word	.LC44
 2209 0364 E0030000 		.word	.LC45
 2210 0368 E8030000 		.word	.LC46
 2211 036c 00000000 		.word	updatable_parameters
 2212 0370 EC030000 		.word	.LC47
 2213 0374 08040000 		.word	.LC48
 2214 0378 24040000 		.word	.LC49
 2215 037c 40040000 		.word	.LC50
 2216 0380 00000000 		.word	alarmMeasure
 2217 0384 5C040000 		.word	.LC51
 2218 0388 80040000 		.word	.LC52
 2219 038c 00000000 		.word	alarmSync
 2220 0390 B0040000 		.word	.LC53
 2221 0394 D8040000 		.word	.LC54
 2222 0398 08050000 		.word	.LC55
 2223              	.L115:
 608:modem.c       ****     }else{
 609:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 2224              		.loc 1 609 0
 2225 039c 8549     		ldr	r1, .L133
 2226 039e 0220     		movs	r0, #2
 2227 03a0 FFF7FEFF 		bl	printNotif
 2228              	.L116:
 610:modem.c       ****     }
 611:modem.c       ****     
 612:modem.c       ****     // app alarm frequency updates
 613:modem.c       ****     // APP_INTERFACE
 614:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 2229              		.loc 1 614 0
 2230 03a4 844B     		ldr	r3, .L133+4
 2231 03a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2232 03a8 042B     		cmp	r3, #4
 2233 03aa 40F0FD80 		bne	.L130
 2234              	.LBB9:
 615:modem.c       ****         
 616:modem.c       ****         char temp[100];
 617:modem.c       ****         temp[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 55


 2235              		.loc 1 617 0
 2236 03ae 07F10803 		add	r3, r7, #8
 2237 03b2 0022     		movs	r2, #0
 2238 03b4 1A70     		strb	r2, [r3]
 618:modem.c       ****         if(App_LED_enabled){ //if you're not enabled, don't talk
 2239              		.loc 1 618 0
 2240 03b6 814B     		ldr	r3, .L133+8
 2241 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2242 03ba 002B     		cmp	r3, #0
 2243 03bc 4ED0     		beq	.L118
 619:modem.c       ****             if (strstr(s_app_led,"Freq=")!=NULL){
 2244              		.loc 1 619 0
 2245 03be 07F52073 		add	r3, r7, #640
 2246 03c2 7F49     		ldr	r1, .L133+12
 2247 03c4 1846     		mov	r0, r3
 2248 03c6 FFF7FEFF 		bl	strstr
 2249 03ca 0346     		mov	r3, r0
 2250 03cc 002B     		cmp	r3, #0
 2251 03ce 41D0     		beq	.L119
 620:modem.c       ****                 temp[0] = '\0';
 2252              		.loc 1 620 0
 2253 03d0 07F10803 		add	r3, r7, #8
 2254 03d4 0022     		movs	r2, #0
 2255 03d6 1A70     		strb	r2, [r3]
 621:modem.c       ****                 strcpy(temp,s_app_led);
 2256              		.loc 1 621 0
 2257 03d8 07F52072 		add	r2, r7, #640
 2258 03dc 07F10803 		add	r3, r7, #8
 2259 03e0 1146     		mov	r1, r2
 2260 03e2 1846     		mov	r0, r3
 2261 03e4 FFF7FEFF 		bl	strcpy
 622:modem.c       ****                 extract_string(temp,"Freq=","\r",s_app_led); // grab level app frequency
 2262              		.loc 1 622 0
 2263 03e8 07F52073 		add	r3, r7, #640
 2264 03ec 07F10800 		add	r0, r7, #8
 2265 03f0 744A     		ldr	r2, .L133+16
 2266 03f2 7349     		ldr	r1, .L133+12
 2267 03f4 FFF7FEFF 		bl	extract_string
 623:modem.c       ****                 if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2268              		.loc 1 623 0
 2269 03f8 07F17402 		add	r2, r7, #116
 2270 03fc 07F52073 		add	r3, r7, #640
 2271 0400 7149     		ldr	r1, .L133+20
 2272 0402 1846     		mov	r0, r3
 2273 0404 FFF7FEFF 		bl	sscanf
 2274 0408 0346     		mov	r3, r0
 2275 040a 012B     		cmp	r3, #1
 2276 040c 1DD1     		bne	.L120
 624:modem.c       ****                     updatable_parameters.App_LED_freq = app_led_freq;
 2277              		.loc 1 624 0
 2278 040e 07F17403 		add	r3, r7, #116
 2279 0412 1B68     		ldr	r3, [r3]
 2280 0414 DAB2     		uxtb	r2, r3
 2281 0416 684B     		ldr	r3, .L133+4
 2282 0418 5A71     		strb	r2, [r3, #5]
 625:modem.c       ****                     // update the alarm to the new frequency
 626:modem.c       ****                     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,A
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 56


 2283              		.loc 1 626 0
 2284 041a 674B     		ldr	r3, .L133+4
 2285 041c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2286 041e 99B2     		uxth	r1, r3
 2287 0420 6A4C     		ldr	r4, .L133+24
 2288 0422 3846     		mov	r0, r7
 2289 0424 0723     		movs	r3, #7
 2290 0426 0122     		movs	r2, #1
 2291 0428 FFF7FEFF 		bl	CreateAlarm
 2292 042c 3A46     		mov	r2, r7
 2293 042e 2346     		mov	r3, r4
 2294 0430 1168     		ldr	r1, [r2]	@ unaligned
 2295 0432 1960     		str	r1, [r3]	@ unaligned
 2296 0434 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2297 0436 9A80     		strh	r2, [r3, #4]	@ unaligned
 627:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_fr
 2298              		.loc 1 627 0
 2299 0438 07F17403 		add	r3, r7, #116
 2300 043c 1B68     		ldr	r3, [r3]
 2301 043e 1A46     		mov	r2, r3
 2302 0440 6349     		ldr	r1, .L133+28
 2303 0442 0020     		movs	r0, #0
 2304 0444 FFF7FEFF 		bl	printNotif
 2305 0448 08E0     		b	.L118
 2306              	.L120:
 628:modem.c       ****                 } 
 629:modem.c       ****                 else{
 630:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2307              		.loc 1 630 0
 2308 044a 6249     		ldr	r1, .L133+32
 2309 044c 0220     		movs	r0, #2
 2310 044e FFF7FEFF 		bl	printNotif
 2311 0452 03E0     		b	.L118
 2312              	.L119:
 631:modem.c       ****                 }
 632:modem.c       ****             }
 633:modem.c       ****             else{
 634:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 2313              		.loc 1 634 0
 2314 0454 6049     		ldr	r1, .L133+36
 2315 0456 0220     		movs	r0, #2
 2316 0458 FFF7FEFF 		bl	printNotif
 2317              	.L118:
 635:modem.c       ****             }
 636:modem.c       ****         }
 637:modem.c       ****         if(level_sensor_enabled){
 2318              		.loc 1 637 0
 2319 045c 5F4B     		ldr	r3, .L133+40
 2320 045e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2321 0460 002B     		cmp	r3, #0
 2322 0462 4ED0     		beq	.L122
 638:modem.c       ****             if (strstr(s_level_sensor,"Freq=")!=NULL){
 2323              		.loc 1 638 0
 2324 0464 07F50773 		add	r3, r7, #540
 2325 0468 5549     		ldr	r1, .L133+12
 2326 046a 1846     		mov	r0, r3
 2327 046c FFF7FEFF 		bl	strstr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 57


 2328 0470 0346     		mov	r3, r0
 2329 0472 002B     		cmp	r3, #0
 2330 0474 41D0     		beq	.L123
 639:modem.c       ****                 temp[0] = '\0';
 2331              		.loc 1 639 0
 2332 0476 07F10803 		add	r3, r7, #8
 2333 047a 0022     		movs	r2, #0
 2334 047c 1A70     		strb	r2, [r3]
 640:modem.c       ****                 strcpy(temp,s_level_sensor);
 2335              		.loc 1 640 0
 2336 047e 07F50772 		add	r2, r7, #540
 2337 0482 07F10803 		add	r3, r7, #8
 2338 0486 1146     		mov	r1, r2
 2339 0488 1846     		mov	r0, r3
 2340 048a FFF7FEFF 		bl	strcpy
 641:modem.c       ****                 extract_string(temp,"Freq=","\r",s_level_sensor); // grab level app frequency
 2341              		.loc 1 641 0
 2342 048e 07F50773 		add	r3, r7, #540
 2343 0492 07F10800 		add	r0, r7, #8
 2344 0496 4B4A     		ldr	r2, .L133+16
 2345 0498 4949     		ldr	r1, .L133+12
 2346 049a FFF7FEFF 		bl	extract_string
 642:modem.c       ****                 if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2347              		.loc 1 642 0
 2348 049e 07F17002 		add	r2, r7, #112
 2349 04a2 07F50773 		add	r3, r7, #540
 2350 04a6 4849     		ldr	r1, .L133+20
 2351 04a8 1846     		mov	r0, r3
 2352 04aa FFF7FEFF 		bl	sscanf
 2353 04ae 0346     		mov	r3, r0
 2354 04b0 012B     		cmp	r3, #1
 2355 04b2 1DD1     		bne	.L124
 643:modem.c       ****                     updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2356              		.loc 1 643 0
 2357 04b4 07F17003 		add	r3, r7, #112
 2358 04b8 1B68     		ldr	r3, [r3]
 2359 04ba DAB2     		uxtb	r2, r3
 2360 04bc 3E4B     		ldr	r3, .L133+4
 2361 04be 9A71     		strb	r2, [r3, #6]
 644:modem.c       ****                     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYP
 2362              		.loc 1 644 0
 2363 04c0 3D4B     		ldr	r3, .L133+4
 2364 04c2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2365 04c4 99B2     		uxth	r1, r3
 2366 04c6 464C     		ldr	r4, .L133+44
 2367 04c8 3846     		mov	r0, r7
 2368 04ca 0723     		movs	r3, #7
 2369 04cc 0122     		movs	r2, #1
 2370 04ce FFF7FEFF 		bl	CreateAlarm
 2371 04d2 3A46     		mov	r2, r7
 2372 04d4 2346     		mov	r3, r4
 2373 04d6 1168     		ldr	r1, [r2]	@ unaligned
 2374 04d8 1960     		str	r1, [r3]	@ unaligned
 2375 04da 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2376 04dc 9A80     		strh	r2, [r3, #4]	@ unaligned
 645:modem.c       **** 
 646:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_l
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 58


 2377              		.loc 1 646 0
 2378 04de 07F17403 		add	r3, r7, #116
 2379 04e2 1B68     		ldr	r3, [r3]
 2380 04e4 1A46     		mov	r2, r3
 2381 04e6 3F49     		ldr	r1, .L133+48
 2382 04e8 0020     		movs	r0, #0
 2383 04ea FFF7FEFF 		bl	printNotif
 2384 04ee 08E0     		b	.L122
 2385              	.L124:
 647:modem.c       ****                 } 
 648:modem.c       ****                 else{
 649:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value."
 2386              		.loc 1 649 0
 2387 04f0 3D49     		ldr	r1, .L133+52
 2388 04f2 0220     		movs	r0, #2
 2389 04f4 FFF7FEFF 		bl	printNotif
 2390 04f8 03E0     		b	.L122
 2391              	.L123:
 650:modem.c       ****                 }
 651:modem.c       ****             }
 652:modem.c       ****             else{
 653:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2392              		.loc 1 653 0
 2393 04fa 3C49     		ldr	r1, .L133+56
 2394 04fc 0220     		movs	r0, #2
 2395 04fe FFF7FEFF 		bl	printNotif
 2396              	.L122:
 654:modem.c       ****             }
 655:modem.c       ****         }
 656:modem.c       ****         if(downstream_level_sensor_enabled){ 
 2397              		.loc 1 656 0
 2398 0502 3B4B     		ldr	r3, .L133+60
 2399 0504 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2400 0506 002B     		cmp	r3, #0
 2401 0508 4ED0     		beq	.L130
 657:modem.c       ****             if (strstr(s_down_level_sensor,"Freq=") !=NULL){
 2402              		.loc 1 657 0
 2403 050a 07F5DC73 		add	r3, r7, #440
 2404 050e 2C49     		ldr	r1, .L133+12
 2405 0510 1846     		mov	r0, r3
 2406 0512 FFF7FEFF 		bl	strstr
 2407 0516 0346     		mov	r3, r0
 2408 0518 002B     		cmp	r3, #0
 2409 051a 41D0     		beq	.L127
 658:modem.c       ****                 temp[0] = '\0';
 2410              		.loc 1 658 0
 2411 051c 07F10803 		add	r3, r7, #8
 2412 0520 0022     		movs	r2, #0
 2413 0522 1A70     		strb	r2, [r3]
 659:modem.c       ****                 strcpy(temp,s_down_level_sensor); // this temp may not actually be used
 2414              		.loc 1 659 0
 2415 0524 07F5DC72 		add	r2, r7, #440
 2416 0528 07F10803 		add	r3, r7, #8
 2417 052c 1146     		mov	r1, r2
 2418 052e 1846     		mov	r0, r3
 2419 0530 FFF7FEFF 		bl	strcpy
 660:modem.c       ****                 extract_string(temp,"Freq=","\r",s_down_level_sensor); // grab level app frequency
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 59


 2420              		.loc 1 660 0
 2421 0534 07F5DC73 		add	r3, r7, #440
 2422 0538 07F10800 		add	r0, r7, #8
 2423 053c 214A     		ldr	r2, .L133+16
 2424 053e 2049     		ldr	r1, .L133+12
 2425 0540 FFF7FEFF 		bl	extract_string
 661:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &down_level_freq)==1){
 2426              		.loc 1 661 0
 2427 0544 07F16C02 		add	r2, r7, #108
 2428 0548 07F5DC73 		add	r3, r7, #440
 2429 054c 1E49     		ldr	r1, .L133+20
 2430 054e 1846     		mov	r0, r3
 2431 0550 FFF7FEFF 		bl	sscanf
 2432 0554 0346     		mov	r3, r0
 2433 0556 012B     		cmp	r3, #1
 2434 0558 1DD1     		bne	.L128
 662:modem.c       ****                     updatable_parameters.Downstream_Level_Sensor_freq = down_level_freq;
 2435              		.loc 1 662 0
 2436 055a 07F16C03 		add	r3, r7, #108
 2437 055e 1B68     		ldr	r3, [r3]
 2438 0560 DAB2     		uxtb	r2, r3
 2439 0562 154B     		ldr	r3, .L133+4
 2440 0564 DA71     		strb	r2, [r3, #7]
 663:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_
 2441              		.loc 1 663 0
 2442 0566 144B     		ldr	r3, .L133+4
 2443 0568 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2444 056a 99B2     		uxth	r1, r3
 2445 056c 214C     		ldr	r4, .L133+64
 2446 056e 3846     		mov	r0, r7
 2447 0570 0723     		movs	r3, #7
 2448 0572 0122     		movs	r2, #1
 2449 0574 FFF7FEFF 		bl	CreateAlarm
 2450 0578 3A46     		mov	r2, r7
 2451 057a 2346     		mov	r3, r4
 2452 057c 1168     		ldr	r1, [r2]	@ unaligned
 2453 057e 1960     		str	r1, [r3]	@ unaligned
 2454 0580 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2455 0582 9A80     		strh	r2, [r3, #4]	@ unaligned
 664:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Downstream_Level_Sensor frequency changed to: %d\
 2456              		.loc 1 664 0
 2457 0584 07F17403 		add	r3, r7, #116
 2458 0588 1B68     		ldr	r3, [r3]
 2459 058a 1A46     		mov	r2, r3
 2460 058c 1A49     		ldr	r1, .L133+68
 2461 058e 0020     		movs	r0, #0
 2462 0590 FFF7FEFF 		bl	printNotif
 2463              	.LBE9:
 665:modem.c       ****                 } 
 666:modem.c       ****                 else{
 667:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Downstream_Level_Sensor freque
 668:modem.c       ****                 }
 669:modem.c       ****             }
 670:modem.c       ****             else{
 671:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Downstream_Level_Sensor frequency value indicated."
 672:modem.c       ****             }
 673:modem.c       ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 60


 674:modem.c       ****         /*
 675:modem.c       ****         if(valve_enabled){ 
 676:modem.c       ****             if (strstr(s_valve,"Freq=") !=NULL){
 677:modem.c       ****                 temp[0] = '\0';
 678:modem.c       ****                 strcpy(temp,s_valve);
 679:modem.c       ****                 extract_string(temp,"Freq=","\r",s_valve); // grab app frequency
 680:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &valve_freq)==1){
 681:modem.c       ****                     updatable_parameters.valve_freq = valve_freq;
 682:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.valve_freq,ALARM_
 683:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Valve frequency changed to: %d\r\n", app_led_freq
 684:modem.c       ****                 } 
 685:modem.c       ****                 else{
 686:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Valve frequency value.");
 687:modem.c       ****                 }
 688:modem.c       ****             }
 689:modem.c       ****             else{
 690:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Valve frequency value indicated.");
 691:modem.c       ****             }
 692:modem.c       ****         }
 693:modem.c       ****         */
 694:modem.c       ****     }
 695:modem.c       ****         
 696:modem.c       **** 
 697:modem.c       ****         
 698:modem.c       **** }
 2464              		.loc 1 698 0
 2465 0594 08E0     		b	.L130
 2466              	.L128:
 2467              	.LBB10:
 667:modem.c       ****                 }
 2468              		.loc 1 667 0
 2469 0596 1949     		ldr	r1, .L133+72
 2470 0598 0220     		movs	r0, #2
 2471 059a FFF7FEFF 		bl	printNotif
 2472              	.LBE10:
 2473              		.loc 1 698 0
 2474 059e 03E0     		b	.L130
 2475              	.L127:
 2476              	.LBB11:
 671:modem.c       ****             }
 2477              		.loc 1 671 0
 2478 05a0 1749     		ldr	r1, .L133+76
 2479 05a2 0220     		movs	r0, #2
 2480 05a4 FFF7FEFF 		bl	printNotif
 2481              	.L130:
 2482              	.LBE11:
 2483              		.loc 1 698 0
 2484 05a8 00BF     		nop
 2485 05aa 07F54977 		add	r7, r7, #804
 2486              		.cfi_def_cfa_offset 12
 2487 05ae BD46     		mov	sp, r7
 2488              		.cfi_def_cfa_register 13
 2489              		@ sp needed
 2490 05b0 90BD     		pop	{r4, r7, pc}
 2491              	.L134:
 2492 05b2 00BF     		.align	2
 2493              	.L133:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 61


 2494 05b4 34050000 		.word	.LC56
 2495 05b8 00000000 		.word	updatable_parameters
 2496 05bc 00000000 		.word	App_LED_enabled
 2497 05c0 64050000 		.word	.LC57
 2498 05c4 88020000 		.word	.LC21
 2499 05c8 E8030000 		.word	.LC46
 2500 05cc 00000000 		.word	alarmAppLED
 2501 05d0 6C050000 		.word	.LC58
 2502 05d4 90050000 		.word	.LC59
 2503 05d8 C0050000 		.word	.LC60
 2504 05dc 00000000 		.word	level_sensor_enabled
 2505 05e0 00000000 		.word	alarmLevelSensor
 2506 05e4 E8050000 		.word	.LC61
 2507 05e8 10060000 		.word	.LC62
 2508 05ec 44060000 		.word	.LC63
 2509 05f0 00000000 		.word	downstream_level_sensor_enabled
 2510 05f4 00000000 		.word	alarmDownstreamLevelSensor
 2511 05f8 70060000 		.word	.LC64
 2512 05fc A4060000 		.word	.LC65
 2513 0600 E4060000 		.word	.LC66
 2514              		.cfi_endproc
 2515              	.LFE81:
 2516              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2517              		.section	.rodata
 2518 071a 0000     		.align	2
 2519              	.LC67:
 2520 071c 41542343 		.ascii	"AT#CGMM\015\000"
 2520      474D4D0D 
 2520      00
 2521 0725 000000   		.align	2
 2522              	.LC68:
 2523 0728 4D6F6465 		.ascii	"Modem Model: %s\000"
 2523      6D204D6F 
 2523      64656C3A 
 2523      20257300 
 2524              		.align	2
 2525              	.LC69:
 2526 0738 41542343 		.ascii	"AT#CCID\015\000"
 2526      4349440D 
 2526      00
 2527 0741 000000   		.align	2
 2528              	.LC70:
 2529 0744 53494D20 		.ascii	"SIM ID: %s\000"
 2529      49443A20 
 2529      257300
 2530 074f 00       		.align	2
 2531              	.LC71:
 2532 0750 41542B43 		.ascii	"AT+CGSN\015\000"
 2532      47534E0D 
 2532      00
 2533 0759 000000   		.align	2
 2534              	.LC72:
 2535 075c 494D4549 		.ascii	"IMEI: %s\000"
 2535      3A202573 
 2535      00
 2536 0765 000000   		.align	2
 2537              	.LC73:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 62


 2538 0768 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2538      4744434F 
 2538      4E543D31 
 2538      2C224950 
 2538      222C2277 
 2539 0791 00       		.ascii	"\000"
 2540 0792 0000     		.align	2
 2541              	.LC74:
 2542 0794 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2542      4744434F 
 2542      4E543D31 
 2542      2C224950 
 2542      222C2273 
 2543              		.align	2
 2544              	.LC75:
 2545 07b0 41542B43 		.ascii	"AT+CFUN?\015\000"
 2545      46554E3F 
 2545      0D00
 2546 07ba 0000     		.align	2
 2547              	.LC76:
 2548 07bc 4346554E 		.ascii	"CFUN: %s\000"
 2548      3A202573 
 2548      00
 2549 07c5 000000   		.align	2
 2550              	.LC77:
 2551 07c8 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2551      46554E3D 
 2551      310D00
 2552              		.section	.text.modem_configure_settings,"ax",%progbits
 2553              		.align	2
 2554              		.global	modem_configure_settings
 2555              		.thumb
 2556              		.thumb_func
 2557              		.type	modem_configure_settings, %function
 2558              	modem_configure_settings:
 2559              	.LFB82:
 699:modem.c       ****     
 700:modem.c       **** // Configure the modem settings
 701:modem.c       **** void modem_configure_settings(){
 2560              		.loc 1 701 0
 2561              		.cfi_startproc
 2562              		@ args = 0, pretend = 0, frame = 16
 2563              		@ frame_needed = 1, uses_anonymous_args = 0
 2564 0000 80B5     		push	{r7, lr}
 2565              		.cfi_def_cfa_offset 8
 2566              		.cfi_offset 7, -8
 2567              		.cfi_offset 14, -4
 2568 0002 84B0     		sub	sp, sp, #16
 2569              		.cfi_def_cfa_offset 24
 2570 0004 00AF     		add	r7, sp, #0
 2571              		.cfi_def_cfa_register 7
 702:modem.c       ****     
 703:modem.c       ****     // Save/print modem model ID number
 704:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2572              		.loc 1 704 0
 2573 0006 454B     		ldr	r3, .L144
 2574 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 63


 2575 000a 002B     		cmp	r3, #0
 2576 000c 13D1     		bne	.L136
 705:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 706:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2577              		.loc 1 706 0
 2578 000e 4FF4FA62 		mov	r2, #2000
 2579 0012 4349     		ldr	r1, .L144+4
 2580 0014 4348     		ldr	r0, .L144+8
 2581 0016 FFF7FEFF 		bl	at_write_command
 2582 001a 0346     		mov	r3, r0
 2583 001c 002B     		cmp	r3, #0
 2584 001e 0AD0     		beq	.L136
 707:modem.c       ****             // Extract modem model ID number string from the UART
 708:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2585              		.loc 1 708 0
 2586 0020 414B     		ldr	r3, .L144+12
 2587 0022 424A     		ldr	r2, .L144+16
 2588 0024 4249     		ldr	r1, .L144+20
 2589 0026 4348     		ldr	r0, .L144+24
 2590 0028 FFF7FEFF 		bl	extract_string
 709:modem.c       ****             // Print modem model ID number
 710:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2591              		.loc 1 710 0
 2592 002c 3E4A     		ldr	r2, .L144+12
 2593 002e 4249     		ldr	r1, .L144+28
 2594 0030 0020     		movs	r0, #0
 2595 0032 FFF7FEFF 		bl	printNotif
 2596              	.L136:
 711:modem.c       ****         }
 712:modem.c       ****     }
 713:modem.c       ****     
 714:modem.c       ****    // Save/print SIM-card ID
 715:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2597              		.loc 1 715 0
 2598 0036 394B     		ldr	r3, .L144
 2599 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2600 003a 002B     		cmp	r3, #0
 2601 003c 13D1     		bne	.L137
 716:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 717:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2602              		.loc 1 717 0
 2603 003e 4FF4FA62 		mov	r2, #2000
 2604 0042 3749     		ldr	r1, .L144+4
 2605 0044 3D48     		ldr	r0, .L144+32
 2606 0046 FFF7FEFF 		bl	at_write_command
 2607 004a 0346     		mov	r3, r0
 2608 004c 002B     		cmp	r3, #0
 2609 004e 0AD0     		beq	.L137
 718:modem.c       ****             // Extract SIM-card ID string from the UART
 719:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2610              		.loc 1 719 0
 2611 0050 324B     		ldr	r3, .L144
 2612 0052 364A     		ldr	r2, .L144+16
 2613 0054 3649     		ldr	r1, .L144+20
 2614 0056 3748     		ldr	r0, .L144+24
 2615 0058 FFF7FEFF 		bl	extract_string
 720:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 64


 2616              		.loc 1 720 0
 2617 005c 2F4A     		ldr	r2, .L144
 2618 005e 3849     		ldr	r1, .L144+36
 2619 0060 0020     		movs	r0, #0
 2620 0062 FFF7FEFF 		bl	printNotif
 2621              	.L137:
 721:modem.c       ****         }
 722:modem.c       ****    }
 723:modem.c       **** 
 724:modem.c       ****     // Save/print modem IMEI
 725:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2622              		.loc 1 725 0
 2623 0066 2D4B     		ldr	r3, .L144
 2624 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2625 006c 002B     		cmp	r3, #0
 2626 006e 13D1     		bne	.L138
 726:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 727:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2627              		.loc 1 727 0
 2628 0070 4FF4FA62 		mov	r2, #2000
 2629 0074 2A49     		ldr	r1, .L144+4
 2630 0076 3348     		ldr	r0, .L144+40
 2631 0078 FFF7FEFF 		bl	at_write_command
 2632 007c 0346     		mov	r3, r0
 2633 007e 002B     		cmp	r3, #0
 2634 0080 0AD0     		beq	.L138
 728:modem.c       ****             // Extract modem IMEI number string from the UART
 729:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2635              		.loc 1 729 0
 2636 0082 314B     		ldr	r3, .L144+44
 2637 0084 294A     		ldr	r2, .L144+16
 2638 0086 2A49     		ldr	r1, .L144+20
 2639 0088 2A48     		ldr	r0, .L144+24
 2640 008a FFF7FEFF 		bl	extract_string
 730:modem.c       ****             // Print modem IMEI number
 731:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2641              		.loc 1 731 0
 2642 008e 2E4A     		ldr	r2, .L144+44
 2643 0090 2E49     		ldr	r1, .L144+48
 2644 0092 0020     		movs	r0, #0
 2645 0094 FFF7FEFF 		bl	printNotif
 2646              	.L138:
 732:modem.c       ****         } 
 733:modem.c       ****     }
 734:modem.c       ****     
 735:modem.c       ****     // Configure protocol and cellular end point
 736:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 737:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2647              		.loc 1 737 0
 2648 0098 2D4B     		ldr	r3, .L144+52
 2649 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2650 009c 83F00103 		eor	r3, r3, #1
 2651 00a0 DBB2     		uxtb	r3, r3
 2652 00a2 002B     		cmp	r3, #0
 2653 00a4 06D0     		beq	.L139
 738:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2654              		.loc 1 738 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 65


 2655 00a6 4FF4FA62 		mov	r2, #2000
 2656 00aa 1D49     		ldr	r1, .L144+4
 2657 00ac 2948     		ldr	r0, .L144+56
 2658 00ae FFF7FEFF 		bl	at_write_command
 2659 00b2 09E0     		b	.L140
 2660              	.L139:
 739:modem.c       ****     
 740:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2661              		.loc 1 740 0
 2662 00b4 264B     		ldr	r3, .L144+52
 2663 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2664 00b8 002B     		cmp	r3, #0
 2665 00ba 05D0     		beq	.L140
 741:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2666              		.loc 1 741 0
 2667 00bc 4FF4FA62 		mov	r2, #2000
 2668 00c0 1749     		ldr	r1, .L144+4
 2669 00c2 2548     		ldr	r0, .L144+60
 2670 00c4 FFF7FEFF 		bl	at_write_command
 2671              	.L140:
 742:modem.c       ****     }
 743:modem.c       ****     
 744:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 745:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 746:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2672              		.loc 1 746 0
 2673 00c8 4FF4FA62 		mov	r2, #2000
 2674 00cc 1449     		ldr	r1, .L144+4
 2675 00ce 2348     		ldr	r0, .L144+64
 2676 00d0 FFF7FEFF 		bl	at_write_command
 2677 00d4 0346     		mov	r3, r0
 2678 00d6 002B     		cmp	r3, #0
 2679 00d8 1BD0     		beq	.L143
 2680              	.LBB12:
 747:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 748:modem.c       ****         CFUN[0] = '\0';
 2681              		.loc 1 748 0
 2682 00da 0023     		movs	r3, #0
 2683 00dc 3B71     		strb	r3, [r7, #4]
 749:modem.c       ****         // Extract UART string recieved from the modem
 750:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2684              		.loc 1 750 0
 2685 00de 3B1D     		adds	r3, r7, #4
 2686 00e0 124A     		ldr	r2, .L144+16
 2687 00e2 1349     		ldr	r1, .L144+20
 2688 00e4 1348     		ldr	r0, .L144+24
 2689 00e6 FFF7FEFF 		bl	extract_string
 751:modem.c       ****         // Print UART string recieved from the modem
 752:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2690              		.loc 1 752 0
 2691 00ea 3B1D     		adds	r3, r7, #4
 2692 00ec 1A46     		mov	r2, r3
 2693 00ee 1C49     		ldr	r1, .L144+68
 2694 00f0 0020     		movs	r0, #0
 2695 00f2 FFF7FEFF 		bl	printNotif
 753:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 754:modem.c       ****         // If it returns NULL, then write another command to the modem
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 66


 755:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2696              		.loc 1 755 0
 2697 00f6 3B1D     		adds	r3, r7, #4
 2698 00f8 3121     		movs	r1, #49
 2699 00fa 1846     		mov	r0, r3
 2700 00fc FFF7FEFF 		bl	strchr
 2701 0100 0346     		mov	r3, r0
 2702 0102 002B     		cmp	r3, #0
 2703 0104 05D1     		bne	.L143
 756:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 757:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 758:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2704              		.loc 1 758 0
 2705 0106 4FF4FA62 		mov	r2, #2000
 2706 010a 0549     		ldr	r1, .L144+4
 2707 010c 1548     		ldr	r0, .L144+72
 2708 010e FFF7FEFF 		bl	at_write_command
 2709              	.L143:
 2710              	.LBE12:
 759:modem.c       ****         }
 760:modem.c       ****     }
 761:modem.c       **** 
 762:modem.c       ****     
 763:modem.c       **** }
 2711              		.loc 1 763 0
 2712 0112 00BF     		nop
 2713 0114 1037     		adds	r7, r7, #16
 2714              		.cfi_def_cfa_offset 8
 2715 0116 BD46     		mov	sp, r7
 2716              		.cfi_def_cfa_register 13
 2717              		@ sp needed
 2718 0118 80BD     		pop	{r7, pc}
 2719              	.L145:
 2720 011a 00BF     		.align	2
 2721              	.L144:
 2722 011c 00000000 		.word	modem_info
 2723 0120 00000000 		.word	.LC0
 2724 0124 1C070000 		.word	.LC67
 2725 0128 14000000 		.word	modem_info+20
 2726 012c 88020000 		.word	.LC21
 2727 0130 8C020000 		.word	.LC22
 2728 0134 00000000 		.word	uart_received_string
 2729 0138 28070000 		.word	.LC68
 2730 013c 38070000 		.word	.LC69
 2731 0140 44070000 		.word	.LC70
 2732 0144 50070000 		.word	.LC71
 2733 0148 28000000 		.word	modem_info+40
 2734 014c 5C070000 		.word	.LC72
 2735 0150 00000000 		.word	updatable_parameters
 2736 0154 68070000 		.word	.LC73
 2737 0158 94070000 		.word	.LC74
 2738 015c B0070000 		.word	.LC75
 2739 0160 BC070000 		.word	.LC76
 2740 0164 C8070000 		.word	.LC77
 2741              		.cfi_endproc
 2742              	.LFE82:
 2743              		.size	modem_configure_settings, .-modem_configure_settings
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 67


 2744              		.section	.rodata
 2745 07d3 00       		.align	2
 2746              	.LC78:
 2747 07d4 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2747      6D206E6F 
 2747      74207265 
 2747      61647920 
 2747      746F2067 
 2748 0807 6B2E00   		.ascii	"k.\000"
 2749 080a 0000     		.align	2
 2750              	.LC79:
 2751 080c 41542B43 		.ascii	"AT+CCLK?\015\000"
 2751      434C4B3F 
 2751      0D00
 2752 0816 0000     		.align	2
 2753              	.LC80:
 2754 0818 220D00   		.ascii	"\"\015\000"
 2755 081b 00       		.align	2
 2756              	.LC81:
 2757 081c 3A202200 		.ascii	": \"\000"
 2758              		.align	2
 2759              	.LC82:
 2760 0820 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2760      642F2564 
 2760      2C25643A 
 2760      25643A25 
 2760      642D2564 
 2761 0835 000000   		.align	2
 2762              	.LC83:
 2763 0838 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2763      642F2564 
 2763      2C25643A 
 2763      25643A25 
 2763      642B2564 
 2764 084d 000000   		.align	2
 2765              	.LC84:
 2766 0850 436F756C 		.ascii	"Could not parse modem time.\000"
 2766      64206E6F 
 2766      74207061 
 2766      72736520 
 2766      6D6F6465 
 2767              		.section	.text.modem_get_network_time,"ax",%progbits
 2768              		.align	2
 2769              		.global	modem_get_network_time
 2770              		.thumb
 2771              		.thumb_func
 2772              		.type	modem_get_network_time, %function
 2773              	modem_get_network_time:
 2774              	.LFB83:
 764:modem.c       **** 
 765:modem.c       **** //returns 0 if modem can't get time
 766:modem.c       **** long modem_get_network_time(){
 2775              		.loc 1 766 0
 2776              		.cfi_startproc
 2777              		@ args = 0, pretend = 0, frame = 104
 2778              		@ frame_needed = 1, uses_anonymous_args = 0
 2779 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 68


 2780              		.cfi_def_cfa_offset 8
 2781              		.cfi_offset 7, -8
 2782              		.cfi_offset 14, -4
 2783 0002 A0B0     		sub	sp, sp, #128
 2784              		.cfi_def_cfa_offset 136
 2785 0004 06AF     		add	r7, sp, #24
 2786              		.cfi_def_cfa 7, 112
 767:modem.c       ****     
 768:modem.c       ****     //modem reposen format (careful to include the quotes "")
 769:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 770:modem.c       ****     //ex: 14:48 GMT
 771:modem.c       **** 
 772:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 773:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2787              		.loc 1 773 0
 2788 0006 444B     		ldr	r3, .L153
 2789 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2790 000a 042B     		cmp	r3, #4
 2791 000c 05D0     		beq	.L147
 774:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2792              		.loc 1 774 0
 2793 000e 4349     		ldr	r1, .L153+4
 2794 0010 0220     		movs	r0, #2
 2795 0012 FFF7FEFF 		bl	printNotif
 775:modem.c       ****         return 0;   
 2796              		.loc 1 775 0
 2797 0016 0023     		movs	r3, #0
 2798 0018 7AE0     		b	.L148
 2799              	.L147:
 776:modem.c       ****     }
 777:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2800              		.loc 1 777 0
 2801 001a 0023     		movs	r3, #0
 2802 001c 7B66     		str	r3, [r7, #100]
 778:modem.c       ****     
 779:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 780:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2803              		.loc 1 780 0
 2804 001e 4FF4FA62 		mov	r2, #2000
 2805 0022 3F49     		ldr	r1, .L153+8
 2806 0024 3F48     		ldr	r0, .L153+12
 2807 0026 FFF7FEFF 		bl	at_write_command
 2808 002a 0346     		mov	r3, r0
 2809 002c 002B     		cmp	r3, #0
 2810 002e 6ED0     		beq	.L149
 2811              	.LBB13:
 781:modem.c       ****         // need to set this to /0
 782:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 783:modem.c       ****         network_time[0] = '\0';
 2812              		.loc 1 783 0
 2813 0030 0023     		movs	r3, #0
 2814 0032 87F84430 		strb	r3, [r7, #68]
 784:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 785:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2815              		.loc 1 785 0
 2816 0036 07F14403 		add	r3, r7, #68
 2817 003a 3B4A     		ldr	r2, .L153+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 69


 2818 003c 3B49     		ldr	r1, .L153+20
 2819 003e 3C48     		ldr	r0, .L153+24
 2820 0040 FFF7FEFF 		bl	extract_string
 786:modem.c       ****         
 787:modem.c       ****         ///////////////////  
 788:modem.c       ****         struct tm t; // Creates variable t of struct tm
 789:modem.c       ****         
 790:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 791:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2821              		.loc 1 791 0
 2822 0044 0023     		movs	r3, #0
 2823 0046 BB62     		str	r3, [r7, #40]
 792:modem.c       ****       
 793:modem.c       ****         // Determines the GMT offset 
 794:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 795:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 796:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2824              		.loc 1 796 0
 2825 0048 07F13C01 		add	r1, r7, #60
 2826 004c 07F14002 		add	r2, r7, #64
 2827 0050 07F14400 		add	r0, r7, #68
 2828 0054 07F12803 		add	r3, r7, #40
 2829 0058 0493     		str	r3, [sp, #16]
 2830 005a 07F12C03 		add	r3, r7, #44
 2831 005e 0393     		str	r3, [sp, #12]
 2832 0060 07F13003 		add	r3, r7, #48
 2833 0064 0293     		str	r3, [sp, #8]
 2834 0066 07F13403 		add	r3, r7, #52
 2835 006a 0193     		str	r3, [sp, #4]
 2836 006c 07F13803 		add	r3, r7, #56
 2837 0070 0093     		str	r3, [sp]
 2838 0072 0B46     		mov	r3, r1
 2839 0074 2F49     		ldr	r1, .L153+28
 2840 0076 FFF7FEFF 		bl	sscanf
 2841 007a 0346     		mov	r3, r0
 2842 007c 072B     		cmp	r3, #7
 2843 007e 06D1     		bne	.L150
 797:modem.c       ****             gmt_offset = gmt_offset*(900);
 2844              		.loc 1 797 0
 2845 0080 BB6A     		ldr	r3, [r7, #40]
 2846 0082 4FF46172 		mov	r2, #900
 2847 0086 02FB03F3 		mul	r3, r2, r3
 2848 008a BB62     		str	r3, [r7, #40]
 2849 008c 27E0     		b	.L151
 2850              	.L150:
 798:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2851              		.loc 1 798 0
 2852 008e 07F13C01 		add	r1, r7, #60
 2853 0092 07F14002 		add	r2, r7, #64
 2854 0096 07F14400 		add	r0, r7, #68
 2855 009a 07F12803 		add	r3, r7, #40
 2856 009e 0493     		str	r3, [sp, #16]
 2857 00a0 07F12C03 		add	r3, r7, #44
 2858 00a4 0393     		str	r3, [sp, #12]
 2859 00a6 07F13003 		add	r3, r7, #48
 2860 00aa 0293     		str	r3, [sp, #8]
 2861 00ac 07F13403 		add	r3, r7, #52
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 70


 2862 00b0 0193     		str	r3, [sp, #4]
 2863 00b2 07F13803 		add	r3, r7, #56
 2864 00b6 0093     		str	r3, [sp]
 2865 00b8 0B46     		mov	r3, r1
 2866 00ba 1F49     		ldr	r1, .L153+32
 2867 00bc FFF7FEFF 		bl	sscanf
 2868 00c0 0346     		mov	r3, r0
 2869 00c2 072B     		cmp	r3, #7
 2870 00c4 05D1     		bne	.L152
 799:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2871              		.loc 1 799 0
 2872 00c6 BB6A     		ldr	r3, [r7, #40]
 2873 00c8 1C4A     		ldr	r2, .L153+36
 2874 00ca 02FB03F3 		mul	r3, r2, r3
 2875 00ce BB62     		str	r3, [r7, #40]
 2876 00d0 05E0     		b	.L151
 2877              	.L152:
 800:modem.c       ****         }else{
 801:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2878              		.loc 1 801 0
 2879 00d2 1B49     		ldr	r1, .L153+40
 2880 00d4 0220     		movs	r0, #2
 2881 00d6 FFF7FEFF 		bl	printNotif
 802:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2882              		.loc 1 802 0
 2883 00da 0023     		movs	r3, #0
 2884 00dc 18E0     		b	.L148
 2885              	.L151:
 803:modem.c       ****         }
 804:modem.c       ****         
 805:modem.c       ****         // Sets each variable to the correct time 
 806:modem.c       ****         t.tm_sec = second;
 2886              		.loc 1 806 0
 2887 00de FB6A     		ldr	r3, [r7, #44]
 2888 00e0 7B60     		str	r3, [r7, #4]
 807:modem.c       ****         t.tm_min = minute;
 2889              		.loc 1 807 0
 2890 00e2 3B6B     		ldr	r3, [r7, #48]
 2891 00e4 BB60     		str	r3, [r7, #8]
 808:modem.c       ****         t.tm_hour = hour;
 2892              		.loc 1 808 0
 2893 00e6 7B6B     		ldr	r3, [r7, #52]
 2894 00e8 FB60     		str	r3, [r7, #12]
 809:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2895              		.loc 1 809 0
 2896 00ea 3B6C     		ldr	r3, [r7, #64]
 2897 00ec 6433     		adds	r3, r3, #100
 2898 00ee BB61     		str	r3, [r7, #24]
 810:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2899              		.loc 1 810 0
 2900 00f0 FB6B     		ldr	r3, [r7, #60]
 2901 00f2 013B     		subs	r3, r3, #1
 2902 00f4 7B61     		str	r3, [r7, #20]
 811:modem.c       ****         t.tm_mday = day;           // Day of the month
 2903              		.loc 1 811 0
 2904 00f6 BB6B     		ldr	r3, [r7, #56]
 2905 00f8 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 71


 812:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2906              		.loc 1 812 0
 2907 00fa 0023     		movs	r3, #0
 2908 00fc 7B62     		str	r3, [r7, #36]
 813:modem.c       ****     
 814:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 815:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 816:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2909              		.loc 1 816 0
 2910 00fe 3B1D     		adds	r3, r7, #4
 2911 0100 1846     		mov	r0, r3
 2912 0102 FFF7FEFF 		bl	mktime
 2913 0106 0246     		mov	r2, r0
 2914 0108 BB6A     		ldr	r3, [r7, #40]
 2915 010a 1344     		add	r3, r3, r2
 2916 010c 7B66     		str	r3, [r7, #100]
 2917              	.L149:
 2918              	.LBE13:
 817:modem.c       ****     }
 818:modem.c       ****     
 819:modem.c       ****     return epoch_time;
 2919              		.loc 1 819 0
 2920 010e 7B6E     		ldr	r3, [r7, #100]
 2921              	.L148:
 820:modem.c       **** }
 2922              		.loc 1 820 0
 2923 0110 1846     		mov	r0, r3
 2924 0112 6837     		adds	r7, r7, #104
 2925              		.cfi_def_cfa_offset 8
 2926 0114 BD46     		mov	sp, r7
 2927              		.cfi_def_cfa_register 13
 2928              		@ sp needed
 2929 0116 80BD     		pop	{r7, pc}
 2930              	.L154:
 2931              		.align	2
 2932              	.L153:
 2933 0118 00000000 		.word	modem_state
 2934 011c D4070000 		.word	.LC78
 2935 0120 00000000 		.word	.LC0
 2936 0124 0C080000 		.word	.LC79
 2937 0128 18080000 		.word	.LC80
 2938 012c 1C080000 		.word	.LC81
 2939 0130 00000000 		.word	uart_received_string
 2940 0134 20080000 		.word	.LC82
 2941 0138 38080000 		.word	.LC83
 2942 013c 7CFCFFFF 		.word	-900
 2943 0140 50080000 		.word	.LC84
 2944              		.cfi_endproc
 2945              	.LFE83:
 2946              		.size	modem_get_network_time, .-modem_get_network_time
 2947              		.section	.text.modem_get_state,"ax",%progbits
 2948              		.align	2
 2949              		.global	modem_get_state
 2950              		.thumb
 2951              		.thumb_func
 2952              		.type	modem_get_state, %function
 2953              	modem_get_state:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 72


 2954              	.LFB84:
 821:modem.c       **** 
 822:modem.c       **** // Get the modem state
 823:modem.c       **** uint8 modem_get_state(){
 2955              		.loc 1 823 0
 2956              		.cfi_startproc
 2957              		@ args = 0, pretend = 0, frame = 0
 2958              		@ frame_needed = 1, uses_anonymous_args = 0
 2959              		@ link register save eliminated.
 2960 0000 80B4     		push	{r7}
 2961              		.cfi_def_cfa_offset 4
 2962              		.cfi_offset 7, -4
 2963 0002 00AF     		add	r7, sp, #0
 2964              		.cfi_def_cfa_register 7
 824:modem.c       ****     return modem_state;
 2965              		.loc 1 824 0
 2966 0004 024B     		ldr	r3, .L157
 2967 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 825:modem.c       **** }
 2968              		.loc 1 825 0
 2969 0008 1846     		mov	r0, r3
 2970 000a BD46     		mov	sp, r7
 2971              		.cfi_def_cfa_register 13
 2972              		@ sp needed
 2973 000c 80BC     		pop	{r7}
 2974              		.cfi_restore 7
 2975              		.cfi_def_cfa_offset 0
 2976 000e 7047     		bx	lr
 2977              	.L158:
 2978              		.align	2
 2979              	.L157:
 2980 0010 00000000 		.word	modem_state
 2981              		.cfi_endproc
 2982              	.LFE84:
 2983              		.size	modem_get_state, .-modem_get_state
 2984              		.section	.text.modem_sleep,"ax",%progbits
 2985              		.align	2
 2986              		.global	modem_sleep
 2987              		.thumb
 2988              		.thumb_func
 2989              		.type	modem_sleep, %function
 2990              	modem_sleep:
 2991              	.LFB85:
 826:modem.c       **** 
 827:modem.c       **** // Set modem to sleep
 828:modem.c       **** void modem_sleep(){
 2992              		.loc 1 828 0
 2993              		.cfi_startproc
 2994              		@ args = 0, pretend = 0, frame = 0
 2995              		@ frame_needed = 1, uses_anonymous_args = 0
 2996 0000 80B5     		push	{r7, lr}
 2997              		.cfi_def_cfa_offset 8
 2998              		.cfi_offset 7, -8
 2999              		.cfi_offset 14, -4
 3000 0002 00AF     		add	r7, sp, #0
 3001              		.cfi_def_cfa_register 7
 829:modem.c       ****     // If the modem_state is not "off" then put it to sleep
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 73


 830:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 3002              		.loc 1 830 0
 3003 0004 FFF7FEFF 		bl	modem_get_state
 3004 0008 0346     		mov	r3, r0
 3005 000a 002B     		cmp	r3, #0
 3006 000c 03D0     		beq	.L161
 831:modem.c       **** 
 832:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 3007              		.loc 1 832 0
 3008 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 833:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 3009              		.loc 1 833 0
 3010 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 3011              	.L161:
 834:modem.c       ****         
 835:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 836:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 837:modem.c       ****      }
 838:modem.c       **** }
 3012              		.loc 1 838 0
 3013 0016 00BF     		nop
 3014 0018 80BD     		pop	{r7, pc}
 3015              		.cfi_endproc
 3016              	.LFE85:
 3017              		.size	modem_sleep, .-modem_sleep
 3018 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 3019              		.align	2
 3020              		.global	modem_wakeup
 3021              		.thumb
 3022              		.thumb_func
 3023              		.type	modem_wakeup, %function
 3024              	modem_wakeup:
 3025              	.LFB86:
 839:modem.c       **** 
 840:modem.c       **** // Wakeup the modem
 841:modem.c       **** void modem_wakeup(){
 3026              		.loc 1 841 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 1, uses_anonymous_args = 0
 3030 0000 80B5     		push	{r7, lr}
 3031              		.cfi_def_cfa_offset 8
 3032              		.cfi_offset 7, -8
 3033              		.cfi_offset 14, -4
 3034 0002 00AF     		add	r7, sp, #0
 3035              		.cfi_def_cfa_register 7
 842:modem.c       ****     // If modem state is not off then wake it up
 843:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 3036              		.loc 1 843 0
 3037 0004 FFF7FEFF 		bl	modem_get_state
 3038 0008 0346     		mov	r3, r0
 3039 000a 002B     		cmp	r3, #0
 3040 000c 0BD0     		beq	.L164
 844:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 3041              		.loc 1 844 0
 3042 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 845:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 74


 846:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 847:modem.c       ****         UART_Telit_Wakeup();
 3043              		.loc 1 847 0
 3044 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 848:modem.c       ****         // Remove the need for this pin itterupt
 849:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 850:modem.c       ****         
 851:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 852:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 3045              		.loc 1 852 0
 3046 0016 FFF7FEFF 		bl	modem_get_state
 3047 001a 0346     		mov	r3, r0
 3048 001c 032B     		cmp	r3, #3
 3049 001e 02D1     		bne	.L164
 853:modem.c       ****             CyDelay(100u);
 3050              		.loc 1 853 0
 3051 0020 6420     		movs	r0, #100
 3052 0022 FFF7FEFF 		bl	CyDelay
 3053              	.L164:
 854:modem.c       ****         }
 855:modem.c       ****      }
 856:modem.c       **** }
 3054              		.loc 1 856 0
 3055 0026 00BF     		nop
 3056 0028 80BD     		pop	{r7, pc}
 3057              		.cfi_endproc
 3058              	.LFE86:
 3059              		.size	modem_wakeup, .-modem_wakeup
 3060 002a 00BF     		.section	.rodata
 3061              		.align	2
 3062              	.LC85:
 3063 086c 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 3063      50494F3D 
 3063      352C312C 
 3063      312C300D 
 3063      00
 3064 087d 000000   		.align	2
 3065              	.LC86:
 3066 0880 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 3066      55504C53 
 3066      45433D31 
 3066      0D00
 3067 088e 0000     		.align	2
 3068              	.LC87:
 3069 0890 41542453 		.ascii	"AT$SUPLV=2\015\000"
 3069      55504C56 
 3069      3D320D00 
 3070              		.align	2
 3071              	.LC88:
 3072 089c 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 3072      47505345 
 3072      4E3D310D 
 3072      00
 3073 08a9 000000   		.align	2
 3074              	.LC89:
 3075 08ac 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 3075      4C503D31 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 75


 3075      2C227375 
 3075      706C2E67 
 3075      6F6F676C 
 3076 08cd 000000   		.align	2
 3077              	.LC90:
 3078 08d0 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 3078      47414354 
 3078      3D312C30 
 3078      0D0A00
 3079 08df 00       		.align	2
 3080              	.LC91:
 3081 08e0 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 3081      43534C4B 
 3081      3D312C31 
 3081      0D00
 3082 08ee 0000     		.align	2
 3083              	.LC92:
 3084 08f0 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 3084      5053534C 
 3084      53523D31 
 3084      2C312C2C 
 3084      2C2C2C32 
 3085 0906 0000     		.align	2
 3086              	.LC93:
 3087 0908 4E00     		.ascii	"N\000"
 3088 090a 0000     		.align	2
 3089              	.LC94:
 3090 090c 41542447 		.ascii	"AT$GPSACP\015\000"
 3090      50534143 
 3090      500D00
 3091 0917 00       		.align	2
 3092              	.LC95:
 3093 0918 24475053 		.ascii	"$GPSACP: \000"
 3093      4143503A 
 3093      2000
 3094 0922 0000     		.align	2
 3095              	.LC96:
 3096 0924 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 3096      4143503A 
 3096      20252A66 
 3096      2C25664E 
 3096      2C256657 
 3097              		.global	__aeabi_fdiv
 3098              		.global	__aeabi_f2d
 3099              		.global	__aeabi_ddiv
 3100              		.global	__aeabi_dadd
 3101              		.global	__aeabi_d2f
 3102              		.align	2
 3103              	.LC97:
 3104 0944 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 3104      50494F3D 
 3104      352C302C 
 3104      312C300D 
 3104      00
 3105 0955 000000   		.align	2
 3106              	.LC98:
 3107 0958 41542447 		.ascii	"AT$GPSR=0\015\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 76


 3107      5053523D 
 3107      300D00
 3108 0963 00       		.align	2
 3109              	.LC99:
 3110 0964 54696D65 		.ascii	"Time to lock GPS: %d\000"
 3110      20746F20 
 3110      6C6F636B 
 3110      20475053 
 3110      3A202564 
 3111              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 3112              		.align	2
 3113              		.global	modem_get_gps_coordinates
 3114              		.thumb
 3115              		.thumb_func
 3116              		.type	modem_get_gps_coordinates, %function
 3117              	modem_get_gps_coordinates:
 3118              	.LFB87:
 857:modem.c       **** 
 858:modem.c       ****     
 859:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 860:modem.c       **** gps_t modem_get_gps_coordinates(){
 3119              		.loc 1 860 0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 56
 3122              		@ frame_needed = 1, uses_anonymous_args = 0
 3123 0000 B0B5     		push	{r4, r5, r7, lr}
 3124              		.cfi_def_cfa_offset 16
 3125              		.cfi_offset 4, -16
 3126              		.cfi_offset 5, -12
 3127              		.cfi_offset 7, -8
 3128              		.cfi_offset 14, -4
 3129 0002 90B0     		sub	sp, sp, #64
 3130              		.cfi_def_cfa_offset 80
 3131 0004 02AF     		add	r7, sp, #8
 3132              		.cfi_def_cfa 7, 72
 3133 0006 7860     		str	r0, [r7, #4]
 861:modem.c       ****     gps_t gps;
 862:modem.c       ****     gps.altitude = 0;
 3134              		.loc 1 862 0
 3135 0008 4FF00003 		mov	r3, #0
 3136 000c FB61     		str	r3, [r7, #28]	@ float
 863:modem.c       ****     gps.longitude = 0;
 3137              		.loc 1 863 0
 3138 000e 4FF00003 		mov	r3, #0
 3139 0012 BB61     		str	r3, [r7, #24]	@ float
 864:modem.c       ****     gps.latitude = 0;
 3140              		.loc 1 864 0
 3141 0014 4FF00003 		mov	r3, #0
 3142 0018 7B61     		str	r3, [r7, #20]	@ float
 865:modem.c       ****     gps.time_to_lock =0;
 3143              		.loc 1 865 0
 3144 001a 0023     		movs	r3, #0
 3145 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 866:modem.c       ****     gps.valid = 0;
 3146              		.loc 1 866 0
 3147 001e 0023     		movs	r3, #0
 3148 0020 87F82230 		strb	r3, [r7, #34]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 77


 867:modem.c       ****     
 868:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 869:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 3149              		.loc 1 869 0
 3150 0024 7F4B     		ldr	r3, .L175
 3151 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3152 0028 042B     		cmp	r3, #4
 3153 002a 07D0     		beq	.L166
 870:modem.c       ****         return gps;//where valid = 0
 3154              		.loc 1 870 0
 3155 002c 7B68     		ldr	r3, [r7, #4]
 3156 002e 1C46     		mov	r4, r3
 3157 0030 07F11403 		add	r3, r7, #20
 3158 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3159 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3160 003a EFE0     		b	.L165
 3161              	.L166:
 871:modem.c       ****     }
 872:modem.c       ****     
 873:modem.c       ****     long lock_time = getTimeStamp();
 3162              		.loc 1 873 0
 3163 003c FFF7FEFF 		bl	getTimeStamp
 3164 0040 3863     		str	r0, [r7, #48]
 874:modem.c       ****     
 875:modem.c       ****     // Enable this for the LTER module
 876:modem.c       ****     // Enable GPS Low-Dropout Regulator
 877:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3165              		.loc 1 877 0
 3166 0042 4FF4FA62 		mov	r2, #2000
 3167 0046 7849     		ldr	r1, .L175+4
 3168 0048 7848     		ldr	r0, .L175+8
 3169 004a FFF7FEFF 		bl	at_write_command
 878:modem.c       ****     
 879:modem.c       ****     // Configure SUPL connection params
 880:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 3170              		.loc 1 880 0
 3171 004e 4FF4FA62 		mov	r2, #2000
 3172 0052 7549     		ldr	r1, .L175+4
 3173 0054 7648     		ldr	r0, .L175+12
 3174 0056 FFF7FEFF 		bl	at_write_command
 881:modem.c       ****     
 882:modem.c       ****     // Use SUPL2.0
 883:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 3175              		.loc 1 883 0
 3176 005a 4FF4FA62 		mov	r2, #2000
 3177 005e 7249     		ldr	r1, .L175+4
 3178 0060 7448     		ldr	r0, .L175+16
 3179 0062 FFF7FEFF 		bl	at_write_command
 884:modem.c       ****     
 885:modem.c       ****     // Enable AGPS service
 886:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 3180              		.loc 1 886 0
 3181 0066 4FF4FA62 		mov	r2, #2000
 3182 006a 6F49     		ldr	r1, .L175+4
 3183 006c 7248     		ldr	r0, .L175+20
 3184 006e FFF7FEFF 		bl	at_write_command
 887:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 78


 888:modem.c       ****     // Chose SUPL server, use google public service
 889:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 3185              		.loc 1 889 0
 3186 0072 4FF4FA62 		mov	r2, #2000
 3187 0076 6C49     		ldr	r1, .L175+4
 3188 0078 7048     		ldr	r0, .L175+24
 3189 007a FFF7FEFF 		bl	at_write_command
 890:modem.c       ****     
 891:modem.c       ****     //pdp context has to be locked to carrier for this to work
 892:modem.c       ****     
 893:modem.c       ****     // Unlock context since it needs to be used by modem
 894:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 3190              		.loc 1 894 0
 3191 007e 4FF4FA62 		mov	r2, #2000
 3192 0082 6949     		ldr	r1, .L175+4
 3193 0084 6E48     		ldr	r0, .L175+28
 3194 0086 FFF7FEFF 		bl	at_write_command
 895:modem.c       ****     
 896:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 3195              		.loc 1 896 0
 3196 008a 4FF4FA62 		mov	r2, #2000
 3197 008e 6649     		ldr	r1, .L175+4
 3198 0090 6C48     		ldr	r0, .L175+32
 3199 0092 FFF7FEFF 		bl	at_write_command
 897:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 898:modem.c       ****     
 899:modem.c       ****     // Relock the context
 900:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 3200              		.loc 1 900 0
 3201 0096 42F21072 		movw	r2, #10000
 3202 009a 6349     		ldr	r1, .L175+4
 3203 009c 6A48     		ldr	r0, .L175+36
 3204 009e FFF7FEFF 		bl	at_write_command
 901:modem.c       ****     
 902:modem.c       ****     //start AGPS service
 903:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 3205              		.loc 1 903 0
 3206 00a2 4FF4FA62 		mov	r2, #2000
 3207 00a6 6049     		ldr	r1, .L175+4
 3208 00a8 6848     		ldr	r0, .L175+40
 3209 00aa FFF7FEFF 		bl	at_write_command
 904:modem.c       ****     
 905:modem.c       ****     
 906:modem.c       ****     // Start the AGPS service
 907:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 908:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 909:modem.c       ****     
 910:modem.c       ****     
 911:modem.c       ****  
 912:modem.c       ****     uint8 gps_status = 0;
 3210              		.loc 1 912 0
 3211 00ae 0023     		movs	r3, #0
 3212 00b0 87F82F30 		strb	r3, [r7, #47]
 3213              	.LBB14:
 913:modem.c       ****     for(uint16 i=0;i<200;i++){
 3214              		.loc 1 913 0
 3215 00b4 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 79


 3216 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 3217 00b8 13E0     		b	.L168
 3218              	.L171:
 914:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3219              		.loc 1 914 0
 3220 00ba 4FF4FA62 		mov	r2, #2000
 3221 00be 6449     		ldr	r1, .L175+44
 3222 00c0 6448     		ldr	r0, .L175+48
 3223 00c2 FFF7FEFF 		bl	at_write_command
 3224 00c6 0346     		mov	r3, r0
 3225 00c8 87F82F30 		strb	r3, [r7, #47]
 915:modem.c       ****         if(gps_status){
 3226              		.loc 1 915 0
 3227 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3228 00d0 002B     		cmp	r3, #0
 3229 00d2 0AD1     		bne	.L174
 916:modem.c       ****             break;   
 917:modem.c       ****         }
 918:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 3230              		.loc 1 918 0 discriminator 2
 3231 00d4 4FF47A70 		mov	r0, #1000
 3232 00d8 FFF7FEFF 		bl	CyDelay
 913:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3233              		.loc 1 913 0 discriminator 2
 3234 00dc FB8E     		ldrh	r3, [r7, #54]
 3235 00de 0133     		adds	r3, r3, #1
 3236 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 3237              	.L168:
 913:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3238              		.loc 1 913 0 is_stmt 0 discriminator 1
 3239 00e2 FB8E     		ldrh	r3, [r7, #54]
 3240 00e4 C72B     		cmp	r3, #199
 3241 00e6 E8D9     		bls	.L171
 3242 00e8 00E0     		b	.L170
 3243              	.L174:
 916:modem.c       ****             break;   
 3244              		.loc 1 916 0 is_stmt 1
 3245 00ea 00BF     		nop
 3246              	.L170:
 3247              	.LBE14:
 919:modem.c       ****     }
 920:modem.c       ****     
 921:modem.c       ****     //parse data here
 922:modem.c       ****     
 923:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 924:modem.c       ****     float lat;
 925:modem.c       ****     float lon;
 926:modem.c       ****     float alt;
 927:modem.c       ****     
 928:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 929:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 930:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 3248              		.loc 1 930 0
 3249 00ec 5A49     		ldr	r1, .L175+52
 3250 00ee 5B48     		ldr	r0, .L175+56
 3251 00f0 FFF7FEFF 		bl	strstr
 3252 00f4 B862     		str	r0, [r7, #40]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 80


 931:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 932:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 933:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 3253              		.loc 1 933 0
 3254 00f6 07F10C01 		add	r1, r7, #12
 3255 00fa 07F11002 		add	r2, r7, #16
 3256 00fe 07F10803 		add	r3, r7, #8
 3257 0102 0093     		str	r3, [sp]
 3258 0104 0B46     		mov	r3, r1
 3259 0106 5649     		ldr	r1, .L175+60
 3260 0108 B86A     		ldr	r0, [r7, #40]
 3261 010a FFF7FEFF 		bl	sscanf
 3262 010e 7862     		str	r0, [r7, #36]
 934:modem.c       ****     if(match >= 3){
 3263              		.loc 1 934 0
 3264 0110 7B6A     		ldr	r3, [r7, #36]
 3265 0112 022B     		cmp	r3, #2
 3266 0114 60DD     		ble	.L172
 935:modem.c       ****         // Calculate lat and lon
 936:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 937:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 938:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 3267              		.loc 1 938 0
 3268 0116 3B69     		ldr	r3, [r7, #16]	@ float
 3269 0118 5249     		ldr	r1, .L175+64
 3270 011a 1846     		mov	r0, r3
 3271 011c FFF7FEFF 		bl	__aeabi_fdiv
 3272 0120 0346     		mov	r3, r0
 3273 0122 1846     		mov	r0, r3
 3274 0124 FFF7FEFF 		bl	floorf
 3275 0128 0346     		mov	r3, r0
 3276 012a 1846     		mov	r0, r3
 3277 012c FFF7FEFF 		bl	__aeabi_f2d
 3278 0130 0446     		mov	r4, r0
 3279 0132 0D46     		mov	r5, r1
 3280 0134 3B69     		ldr	r3, [r7, #16]	@ float
 3281 0136 1846     		mov	r0, r3
 3282 0138 FFF7FEFF 		bl	__aeabi_f2d
 3283 013c 4FF00002 		mov	r2, #0
 3284 0140 494B     		ldr	r3, .L175+68
 3285 0142 FFF7FEFF 		bl	fmod
 3286 0146 4FF00002 		mov	r2, #0
 3287 014a 484B     		ldr	r3, .L175+72
 3288 014c FFF7FEFF 		bl	__aeabi_ddiv
 3289 0150 0246     		mov	r2, r0
 3290 0152 0B46     		mov	r3, r1
 3291 0154 2046     		mov	r0, r4
 3292 0156 2946     		mov	r1, r5
 3293 0158 FFF7FEFF 		bl	__aeabi_dadd
 3294 015c 0346     		mov	r3, r0
 3295 015e 0C46     		mov	r4, r1
 3296 0160 1846     		mov	r0, r3
 3297 0162 2146     		mov	r1, r4
 3298 0164 FFF7FEFF 		bl	__aeabi_d2f
 3299 0168 0346     		mov	r3, r0
 3300 016a 3B61     		str	r3, [r7, #16]	@ float
 939:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 81


 3301              		.loc 1 939 0
 3302 016c FB68     		ldr	r3, [r7, #12]	@ float
 3303 016e 3D49     		ldr	r1, .L175+64
 3304 0170 1846     		mov	r0, r3
 3305 0172 FFF7FEFF 		bl	__aeabi_fdiv
 3306 0176 0346     		mov	r3, r0
 3307 0178 1846     		mov	r0, r3
 3308 017a FFF7FEFF 		bl	floorf
 3309 017e 0346     		mov	r3, r0
 3310 0180 1846     		mov	r0, r3
 3311 0182 FFF7FEFF 		bl	__aeabi_f2d
 3312 0186 0446     		mov	r4, r0
 3313 0188 0D46     		mov	r5, r1
 3314 018a FB68     		ldr	r3, [r7, #12]	@ float
 3315 018c 1846     		mov	r0, r3
 3316 018e FFF7FEFF 		bl	__aeabi_f2d
 3317 0192 4FF00002 		mov	r2, #0
 3318 0196 344B     		ldr	r3, .L175+68
 3319 0198 FFF7FEFF 		bl	fmod
 3320 019c 4FF00002 		mov	r2, #0
 3321 01a0 324B     		ldr	r3, .L175+72
 3322 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 3323 01a6 0246     		mov	r2, r0
 3324 01a8 0B46     		mov	r3, r1
 3325 01aa 2046     		mov	r0, r4
 3326 01ac 2946     		mov	r1, r5
 3327 01ae FFF7FEFF 		bl	__aeabi_dadd
 3328 01b2 0346     		mov	r3, r0
 3329 01b4 0C46     		mov	r4, r1
 3330 01b6 1846     		mov	r0, r3
 3331 01b8 2146     		mov	r1, r4
 3332 01ba FFF7FEFF 		bl	__aeabi_d2f
 3333 01be 0346     		mov	r3, r0
 3334 01c0 83F00043 		eor	r3, r3, #-2147483648
 3335 01c4 FB60     		str	r3, [r7, #12]	@ float
 940:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3336              		.loc 1 940 0
 3337 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3338 01c8 FB61     		str	r3, [r7, #28]	@ float
 941:modem.c       ****         gps.latitude = lat;
 3339              		.loc 1 941 0
 3340 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3341 01cc 7B61     		str	r3, [r7, #20]	@ float
 942:modem.c       ****         gps.longitude = lon;
 3342              		.loc 1 942 0
 3343 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3344 01d0 BB61     		str	r3, [r7, #24]	@ float
 943:modem.c       ****         gps.valid = 1;
 3345              		.loc 1 943 0
 3346 01d2 0123     		movs	r3, #1
 3347 01d4 87F82230 		strb	r3, [r7, #34]
 3348              	.L172:
 944:modem.c       ****     }
 945:modem.c       ****     
 946:modem.c       ****     // Disable LDO, just in case
 947:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3349              		.loc 1 947 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 82


 3350 01d8 4FF4FA62 		mov	r2, #2000
 3351 01dc 1249     		ldr	r1, .L175+4
 3352 01de 2448     		ldr	r0, .L175+76
 3353 01e0 FFF7FEFF 		bl	at_write_command
 948:modem.c       ****     
 949:modem.c       ****     // Flush modem's GPS data, just in case
 950:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3354              		.loc 1 950 0
 3355 01e4 4FF4FA62 		mov	r2, #2000
 3356 01e8 0F49     		ldr	r1, .L175+4
 3357 01ea 2248     		ldr	r0, .L175+80
 3358 01ec FFF7FEFF 		bl	at_write_command
 951:modem.c       ****     
 952:modem.c       ****     
 953:modem.c       ****     
 954:modem.c       ****     
 955:modem.c       ****     
 956:modem.c       ****     /* Relevant to 3g modem, can ignore
 957:modem.c       ****     
 958:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 959:modem.c       ****     //AT$GPSQOS=50,50,100,0
 960:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 961:modem.c       ****     
 962:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 963:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 964:modem.c       ****     
 965:modem.c       ****     //unlock contedt, simnce its being used by modem
 966:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 967:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 968:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 969:modem.c       ****     
 970:modem.c       ****     //unlock contedt, simnce its being used by modem
 971:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 972:modem.c       ****     
 973:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 974:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 975:modem.c       ****     
 976:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 977:modem.c       ****    uint8 gps_status = 0;
 978:modem.c       ****     for(uint16 i=0;i<200;i++){
 979:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 980:modem.c       ****         if(gps_status){
 981:modem.c       ****             break;   
 982:modem.c       ****         }
 983:modem.c       ****   }
 984:modem.c       ****     
 985:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 986:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 987:modem.c       ****     if(gps_status){
 988:modem.c       ****         float lat,lon,alt = 0;
 989:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 990:modem.c       ****             gps.altitude = alt;
 991:modem.c       ****             gps.latitude = lat/60;
 992:modem.c       ****             gps.longitude = lon/60;
 993:modem.c       ****             gps.valid = 1;
 994:modem.c       ****         }
 995:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 83


 996:modem.c       ****     }
 997:modem.c       ****     
 998:modem.c       ****     //turn off gps
 999:modem.c       ****     //AT$GPSP=0
1000:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
1001:modem.c       ****     
1002:modem.c       ****     */
1003:modem.c       **** 
1004:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
1005:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3359              		.loc 1 1005 0
 3360 01f0 FFF7FEFF 		bl	getTimeStamp
 3361 01f4 0246     		mov	r2, r0
 3362 01f6 3B6B     		ldr	r3, [r7, #48]
 3363 01f8 D31A     		subs	r3, r2, r3
 3364 01fa 3B63     		str	r3, [r7, #48]
1006:modem.c       ****     gps.time_to_lock = lock_time;
 3365              		.loc 1 1006 0
 3366 01fc 3B6B     		ldr	r3, [r7, #48]
 3367 01fe 9BB2     		uxth	r3, r3
 3368 0200 3B84     		strh	r3, [r7, #32]	@ movhi
1007:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3369              		.loc 1 1007 0
 3370 0202 3B8C     		ldrh	r3, [r7, #32]
 3371 0204 1A46     		mov	r2, r3
 3372 0206 1C49     		ldr	r1, .L175+84
 3373 0208 0020     		movs	r0, #0
 3374 020a FFF7FEFF 		bl	printNotif
1008:modem.c       ****     
1009:modem.c       ****     return gps;
 3375              		.loc 1 1009 0
 3376 020e 7B68     		ldr	r3, [r7, #4]
 3377 0210 1C46     		mov	r4, r3
 3378 0212 07F11403 		add	r3, r7, #20
 3379 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3380 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3381              	.L165:
1010:modem.c       ****     
1011:modem.c       **** }
 3382              		.loc 1 1011 0
 3383 021c 7868     		ldr	r0, [r7, #4]
 3384 021e 3837     		adds	r7, r7, #56
 3385              		.cfi_def_cfa_offset 16
 3386 0220 BD46     		mov	sp, r7
 3387              		.cfi_def_cfa_register 13
 3388              		@ sp needed
 3389 0222 B0BD     		pop	{r4, r5, r7, pc}
 3390              	.L176:
 3391              		.align	2
 3392              	.L175:
 3393 0224 00000000 		.word	modem_state
 3394 0228 00000000 		.word	.LC0
 3395 022c 6C080000 		.word	.LC85
 3396 0230 80080000 		.word	.LC86
 3397 0234 90080000 		.word	.LC87
 3398 0238 9C080000 		.word	.LC88
 3399 023c AC080000 		.word	.LC89
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 84


 3400 0240 D0080000 		.word	.LC90
 3401 0244 E0080000 		.word	.LC91
 3402 0248 D8020000 		.word	.LC27
 3403 024c F0080000 		.word	.LC92
 3404 0250 08090000 		.word	.LC93
 3405 0254 0C090000 		.word	.LC94
 3406 0258 18090000 		.word	.LC95
 3407 025c 00000000 		.word	uart_received_string
 3408 0260 24090000 		.word	.LC96
 3409 0264 0000C842 		.word	1120403456
 3410 0268 00005940 		.word	1079574528
 3411 026c 00004E40 		.word	1078853632
 3412 0270 44090000 		.word	.LC97
 3413 0274 58090000 		.word	.LC98
 3414 0278 64090000 		.word	.LC99
 3415              		.cfi_endproc
 3416              	.LFE87:
 3417              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3418              		.text
 3419              	.Letext0:
 3420              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3421              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3422              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3423              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3424              		.file 6 "testing.h"
 3425              		.file 7 "data.h"
 3426              		.file 8 "modem.h"
 3427              		.file 9 "notoriOS.h"
 3428              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3429              		.file 11 "level_sensor.h"
 3430              		.file 12 "downstream_level_sensor.h"
 3431              		.file 13 "valve.h"
 3432              		.file 14 "App_LED.h"
 3433              		.section	.debug_info,"",%progbits
 3434              	.Ldebug_info0:
 3435 0000 E20D0000 		.4byte	0xde2
 3436 0004 0400     		.2byte	0x4
 3437 0006 00000000 		.4byte	.Ldebug_abbrev0
 3438 000a 04       		.byte	0x4
 3439 000b 01       		.uleb128 0x1
 3440 000c B3000000 		.4byte	.LASF191
 3441 0010 0C       		.byte	0xc
 3442 0011 BE040000 		.4byte	.LASF192
 3443 0015 34000000 		.4byte	.LASF193
 3444 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3445 001d 00000000 		.4byte	0
 3446 0021 00000000 		.4byte	.Ldebug_line0
 3447 0025 02       		.uleb128 0x2
 3448 0026 01       		.byte	0x1
 3449 0027 06       		.byte	0x6
 3450 0028 C8010000 		.4byte	.LASF0
 3451 002c 03       		.uleb128 0x3
 3452 002d 7C000000 		.4byte	.LASF4
 3453 0031 02       		.byte	0x2
 3454 0032 1D       		.byte	0x1d
 3455 0033 37000000 		.4byte	0x37
 3456 0037 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 85


 3457 0038 01       		.byte	0x1
 3458 0039 08       		.byte	0x8
 3459 003a E7060000 		.4byte	.LASF1
 3460 003e 02       		.uleb128 0x2
 3461 003f 02       		.byte	0x2
 3462 0040 05       		.byte	0x5
 3463 0041 F6040000 		.4byte	.LASF2
 3464 0045 02       		.uleb128 0x2
 3465 0046 02       		.byte	0x2
 3466 0047 07       		.byte	0x7
 3467 0048 2D030000 		.4byte	.LASF3
 3468 004c 03       		.uleb128 0x3
 3469 004d 0B050000 		.4byte	.LASF5
 3470 0051 02       		.byte	0x2
 3471 0052 3F       		.byte	0x3f
 3472 0053 57000000 		.4byte	0x57
 3473 0057 02       		.uleb128 0x2
 3474 0058 04       		.byte	0x4
 3475 0059 05       		.byte	0x5
 3476 005a 89020000 		.4byte	.LASF6
 3477 005e 03       		.uleb128 0x3
 3478 005f 50030000 		.4byte	.LASF7
 3479 0063 02       		.byte	0x2
 3480 0064 41       		.byte	0x41
 3481 0065 69000000 		.4byte	0x69
 3482 0069 02       		.uleb128 0x2
 3483 006a 04       		.byte	0x4
 3484 006b 07       		.byte	0x7
 3485 006c 21040000 		.4byte	.LASF8
 3486 0070 02       		.uleb128 0x2
 3487 0071 08       		.byte	0x8
 3488 0072 05       		.byte	0x5
 3489 0073 BA010000 		.4byte	.LASF9
 3490 0077 02       		.uleb128 0x2
 3491 0078 08       		.byte	0x8
 3492 0079 07       		.byte	0x7
 3493 007a 4E010000 		.4byte	.LASF10
 3494 007e 04       		.uleb128 0x4
 3495 007f 04       		.byte	0x4
 3496 0080 05       		.byte	0x5
 3497 0081 696E7400 		.ascii	"int\000"
 3498 0085 02       		.uleb128 0x2
 3499 0086 04       		.byte	0x4
 3500 0087 07       		.byte	0x7
 3501 0088 03080000 		.4byte	.LASF11
 3502 008c 03       		.uleb128 0x3
 3503 008d BC090000 		.4byte	.LASF12
 3504 0091 03       		.byte	0x3
 3505 0092 18       		.byte	0x18
 3506 0093 2C000000 		.4byte	0x2c
 3507 0097 03       		.uleb128 0x3
 3508 0098 DF060000 		.4byte	.LASF13
 3509 009c 03       		.byte	0x3
 3510 009d 2C       		.byte	0x2c
 3511 009e 4C000000 		.4byte	0x4c
 3512 00a2 03       		.uleb128 0x3
 3513 00a3 FF080000 		.4byte	.LASF14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 86


 3514 00a7 03       		.byte	0x3
 3515 00a8 30       		.byte	0x30
 3516 00a9 5E000000 		.4byte	0x5e
 3517 00ad 05       		.uleb128 0x5
 3518 00ae C7020000 		.4byte	.LASF15
 3519 00b2 04       		.byte	0x4
 3520 00b3 9201     		.2byte	0x192
 3521 00b5 37000000 		.4byte	0x37
 3522 00b9 05       		.uleb128 0x5
 3523 00ba 17000000 		.4byte	.LASF16
 3524 00be 04       		.byte	0x4
 3525 00bf 9301     		.2byte	0x193
 3526 00c1 45000000 		.4byte	0x45
 3527 00c5 05       		.uleb128 0x5
 3528 00c6 40030000 		.4byte	.LASF17
 3529 00ca 04       		.byte	0x4
 3530 00cb 9401     		.2byte	0x194
 3531 00cd 69000000 		.4byte	0x69
 3532 00d1 05       		.uleb128 0x5
 3533 00d2 1C060000 		.4byte	.LASF18
 3534 00d6 04       		.byte	0x4
 3535 00d7 9601     		.2byte	0x196
 3536 00d9 3E000000 		.4byte	0x3e
 3537 00dd 05       		.uleb128 0x5
 3538 00de EC020000 		.4byte	.LASF19
 3539 00e2 04       		.byte	0x4
 3540 00e3 9701     		.2byte	0x197
 3541 00e5 57000000 		.4byte	0x57
 3542 00e9 05       		.uleb128 0x5
 3543 00ea C1050000 		.4byte	.LASF20
 3544 00ee 04       		.byte	0x4
 3545 00ef 9801     		.2byte	0x198
 3546 00f1 F5000000 		.4byte	0xf5
 3547 00f5 02       		.uleb128 0x2
 3548 00f6 04       		.byte	0x4
 3549 00f7 04       		.byte	0x4
 3550 00f8 89060000 		.4byte	.LASF21
 3551 00fc 02       		.uleb128 0x2
 3552 00fd 08       		.byte	0x8
 3553 00fe 04       		.byte	0x4
 3554 00ff 3F0A0000 		.4byte	.LASF22
 3555 0103 02       		.uleb128 0x2
 3556 0104 01       		.byte	0x1
 3557 0105 08       		.byte	0x8
 3558 0106 EA070000 		.4byte	.LASF23
 3559 010a 02       		.uleb128 0x2
 3560 010b 08       		.byte	0x8
 3561 010c 04       		.byte	0x4
 3562 010d DE070000 		.4byte	.LASF24
 3563 0111 02       		.uleb128 0x2
 3564 0112 04       		.byte	0x4
 3565 0113 07       		.byte	0x7
 3566 0114 C9050000 		.4byte	.LASF25
 3567 0118 06       		.uleb128 0x6
 3568 0119 04       		.byte	0x4
 3569 011a 03010000 		.4byte	0x103
 3570 011e 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 87


 3571 011f 04       		.byte	0x4
 3572 0120 24010000 		.4byte	0x124
 3573 0124 07       		.uleb128 0x7
 3574 0125 03010000 		.4byte	0x103
 3575 0129 08       		.uleb128 0x8
 3576 012a 03010000 		.4byte	0x103
 3577 012e 39010000 		.4byte	0x139
 3578 0132 09       		.uleb128 0x9
 3579 0133 11010000 		.4byte	0x111
 3580 0137 17       		.byte	0x17
 3581 0138 00       		.byte	0
 3582 0139 0A       		.uleb128 0xa
 3583 013a 746D00   		.ascii	"tm\000"
 3584 013d 24       		.byte	0x24
 3585 013e 05       		.byte	0x5
 3586 013f 21       		.byte	0x21
 3587 0140 B1010000 		.4byte	0x1b1
 3588 0144 0B       		.uleb128 0xb
 3589 0145 08090000 		.4byte	.LASF26
 3590 0149 05       		.byte	0x5
 3591 014a 23       		.byte	0x23
 3592 014b 7E000000 		.4byte	0x7e
 3593 014f 00       		.byte	0
 3594 0150 0B       		.uleb128 0xb
 3595 0151 BA050000 		.4byte	.LASF27
 3596 0155 05       		.byte	0x5
 3597 0156 24       		.byte	0x24
 3598 0157 7E000000 		.4byte	0x7e
 3599 015b 04       		.byte	0x4
 3600 015c 0B       		.uleb128 0xb
 3601 015d 24000000 		.4byte	.LASF28
 3602 0161 05       		.byte	0x5
 3603 0162 25       		.byte	0x25
 3604 0163 7E000000 		.4byte	0x7e
 3605 0167 08       		.byte	0x8
 3606 0168 0B       		.uleb128 0xb
 3607 0169 D4080000 		.4byte	.LASF29
 3608 016d 05       		.byte	0x5
 3609 016e 26       		.byte	0x26
 3610 016f 7E000000 		.4byte	0x7e
 3611 0173 0C       		.byte	0xc
 3612 0174 0B       		.uleb128 0xb
 3613 0175 72030000 		.4byte	.LASF30
 3614 0179 05       		.byte	0x5
 3615 017a 27       		.byte	0x27
 3616 017b 7E000000 		.4byte	0x7e
 3617 017f 10       		.byte	0x10
 3618 0180 0B       		.uleb128 0xb
 3619 0181 E9030000 		.4byte	.LASF31
 3620 0185 05       		.byte	0x5
 3621 0186 28       		.byte	0x28
 3622 0187 7E000000 		.4byte	0x7e
 3623 018b 14       		.byte	0x14
 3624 018c 0B       		.uleb128 0xb
 3625 018d 9A070000 		.4byte	.LASF32
 3626 0191 05       		.byte	0x5
 3627 0192 29       		.byte	0x29
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 88


 3628 0193 7E000000 		.4byte	0x7e
 3629 0197 18       		.byte	0x18
 3630 0198 0B       		.uleb128 0xb
 3631 0199 2C000000 		.4byte	.LASF33
 3632 019d 05       		.byte	0x5
 3633 019e 2A       		.byte	0x2a
 3634 019f 7E000000 		.4byte	0x7e
 3635 01a3 1C       		.byte	0x1c
 3636 01a4 0B       		.uleb128 0xb
 3637 01a5 85040000 		.4byte	.LASF34
 3638 01a9 05       		.byte	0x5
 3639 01aa 2B       		.byte	0x2b
 3640 01ab 7E000000 		.4byte	0x7e
 3641 01af 20       		.byte	0x20
 3642 01b0 00       		.byte	0
 3643 01b1 0C       		.uleb128 0xc
 3644 01b2 8101     		.2byte	0x181
 3645 01b4 06       		.byte	0x6
 3646 01b5 0A       		.byte	0xa
 3647 01b6 DF010000 		.4byte	0x1df
 3648 01ba 0B       		.uleb128 0xb
 3649 01bb 12060000 		.4byte	.LASF35
 3650 01bf 06       		.byte	0x6
 3651 01c0 0C       		.byte	0xc
 3652 01c1 DF010000 		.4byte	0x1df
 3653 01c5 00       		.byte	0
 3654 01c6 0B       		.uleb128 0xb
 3655 01c7 4E090000 		.4byte	.LASF36
 3656 01cb 06       		.byte	0x6
 3657 01cc 0D       		.byte	0xd
 3658 01cd AD000000 		.4byte	0xad
 3659 01d1 80       		.byte	0x80
 3660 01d2 0B       		.uleb128 0xb
 3661 01d3 5D070000 		.4byte	.LASF37
 3662 01d7 06       		.byte	0x6
 3663 01d8 0F       		.byte	0xf
 3664 01d9 EF010000 		.4byte	0x1ef
 3665 01dd 81       		.byte	0x81
 3666 01de 00       		.byte	0
 3667 01df 08       		.uleb128 0x8
 3668 01e0 03010000 		.4byte	0x103
 3669 01e4 EF010000 		.4byte	0x1ef
 3670 01e8 09       		.uleb128 0x9
 3671 01e9 11010000 		.4byte	0x111
 3672 01ed 7F       		.byte	0x7f
 3673 01ee 00       		.byte	0
 3674 01ef 08       		.uleb128 0x8
 3675 01f0 03010000 		.4byte	0x103
 3676 01f4 FF010000 		.4byte	0x1ff
 3677 01f8 09       		.uleb128 0x9
 3678 01f9 11010000 		.4byte	0x111
 3679 01fd FF       		.byte	0xff
 3680 01fe 00       		.byte	0
 3681 01ff 03       		.uleb128 0x3
 3682 0200 45070000 		.4byte	.LASF38
 3683 0204 06       		.byte	0x6
 3684 0205 10       		.byte	0x10
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 89


 3685 0206 B1010000 		.4byte	0x1b1
 3686 020a 0D       		.uleb128 0xd
 3687 020b 2C       		.byte	0x2c
 3688 020c 07       		.byte	0x7
 3689 020d 14       		.byte	0x14
 3690 020e 37020000 		.4byte	0x237
 3691 0212 0E       		.uleb128 0xe
 3692 0213 6B657900 		.ascii	"key\000"
 3693 0217 07       		.byte	0x7
 3694 0218 15       		.byte	0x15
 3695 0219 37020000 		.4byte	0x237
 3696 021d 00       		.byte	0
 3697 021e 0B       		.uleb128 0xb
 3698 021f 1E000000 		.4byte	.LASF39
 3699 0223 07       		.byte	0x7
 3700 0224 16       		.byte	0x16
 3701 0225 37020000 		.4byte	0x237
 3702 0229 14       		.byte	0x14
 3703 022a 0B       		.uleb128 0xb
 3704 022b 61040000 		.4byte	.LASF40
 3705 022f 07       		.byte	0x7
 3706 0230 17       		.byte	0x17
 3707 0231 DD000000 		.4byte	0xdd
 3708 0235 28       		.byte	0x28
 3709 0236 00       		.byte	0
 3710 0237 08       		.uleb128 0x8
 3711 0238 03010000 		.4byte	0x103
 3712 023c 47020000 		.4byte	0x247
 3713 0240 09       		.uleb128 0x9
 3714 0241 11010000 		.4byte	0x111
 3715 0245 13       		.byte	0x13
 3716 0246 00       		.byte	0
 3717 0247 03       		.uleb128 0x3
 3718 0248 0B040000 		.4byte	.LASF41
 3719 024c 07       		.byte	0x7
 3720 024d 19       		.byte	0x19
 3721 024e 0A020000 		.4byte	0x20a
 3722 0252 0D       		.uleb128 0xd
 3723 0253 3C       		.byte	0x3c
 3724 0254 08       		.byte	0x8
 3725 0255 36       		.byte	0x36
 3726 0256 7F020000 		.4byte	0x27f
 3727 025a 0B       		.uleb128 0xb
 3728 025b CD080000 		.4byte	.LASF42
 3729 025f 08       		.byte	0x8
 3730 0260 37       		.byte	0x37
 3731 0261 37020000 		.4byte	0x237
 3732 0265 00       		.byte	0
 3733 0266 0B       		.uleb128 0xb
 3734 0267 20080000 		.4byte	.LASF43
 3735 026b 08       		.byte	0x8
 3736 026c 38       		.byte	0x38
 3737 026d 37020000 		.4byte	0x237
 3738 0271 14       		.byte	0x14
 3739 0272 0B       		.uleb128 0xb
 3740 0273 58070000 		.4byte	.LASF44
 3741 0277 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 90


 3742 0278 39       		.byte	0x39
 3743 0279 37020000 		.4byte	0x237
 3744 027d 28       		.byte	0x28
 3745 027e 00       		.byte	0
 3746 027f 03       		.uleb128 0x3
 3747 0280 34080000 		.4byte	.LASF45
 3748 0284 08       		.byte	0x8
 3749 0285 3B       		.byte	0x3b
 3750 0286 52020000 		.4byte	0x252
 3751 028a 0D       		.uleb128 0xd
 3752 028b 20       		.byte	0x20
 3753 028c 08       		.byte	0x8
 3754 028d 3D       		.byte	0x3d
 3755 028e F3020000 		.4byte	0x2f3
 3756 0292 0B       		.uleb128 0xb
 3757 0293 92020000 		.4byte	.LASF46
 3758 0297 08       		.byte	0x8
 3759 0298 3E       		.byte	0x3e
 3760 0299 7E000000 		.4byte	0x7e
 3761 029d 00       		.byte	0
 3762 029e 0E       		.uleb128 0xe
 3763 029f 62657200 		.ascii	"ber\000"
 3764 02a3 08       		.byte	0x8
 3765 02a4 3F       		.byte	0x3f
 3766 02a5 7E000000 		.4byte	0x7e
 3767 02a9 04       		.byte	0x4
 3768 02aa 0B       		.uleb128 0xb
 3769 02ab 26070000 		.4byte	.LASF47
 3770 02af 08       		.byte	0x8
 3771 02b0 40       		.byte	0x40
 3772 02b1 7E000000 		.4byte	0x7e
 3773 02b5 08       		.byte	0x8
 3774 02b6 0B       		.uleb128 0xb
 3775 02b7 D4010000 		.4byte	.LASF48
 3776 02bb 08       		.byte	0x8
 3777 02bc 41       		.byte	0x41
 3778 02bd 7E000000 		.4byte	0x7e
 3779 02c1 0C       		.byte	0xc
 3780 02c2 0B       		.uleb128 0xb
 3781 02c3 0B070000 		.4byte	.LASF49
 3782 02c7 08       		.byte	0x8
 3783 02c8 42       		.byte	0x42
 3784 02c9 7E000000 		.4byte	0x7e
 3785 02cd 10       		.byte	0x10
 3786 02ce 0B       		.uleb128 0xb
 3787 02cf 64070000 		.4byte	.LASF50
 3788 02d3 08       		.byte	0x8
 3789 02d4 43       		.byte	0x43
 3790 02d5 7E000000 		.4byte	0x7e
 3791 02d9 14       		.byte	0x14
 3792 02da 0B       		.uleb128 0xb
 3793 02db F6010000 		.4byte	.LASF51
 3794 02df 08       		.byte	0x8
 3795 02e0 44       		.byte	0x44
 3796 02e1 7E000000 		.4byte	0x7e
 3797 02e5 18       		.byte	0x18
 3798 02e6 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 91


 3799 02e7 D9040000 		.4byte	.LASF52
 3800 02eb 08       		.byte	0x8
 3801 02ec 45       		.byte	0x45
 3802 02ed 7E000000 		.4byte	0x7e
 3803 02f1 1C       		.byte	0x1c
 3804 02f2 00       		.byte	0
 3805 02f3 03       		.uleb128 0x3
 3806 02f4 69070000 		.4byte	.LASF53
 3807 02f8 08       		.byte	0x8
 3808 02f9 47       		.byte	0x47
 3809 02fa 8A020000 		.4byte	0x28a
 3810 02fe 0D       		.uleb128 0xd
 3811 02ff 10       		.byte	0x10
 3812 0300 08       		.byte	0x8
 3813 0301 49       		.byte	0x49
 3814 0302 43030000 		.4byte	0x343
 3815 0306 0B       		.uleb128 0xb
 3816 0307 09060000 		.4byte	.LASF54
 3817 030b 08       		.byte	0x8
 3818 030c 4A       		.byte	0x4a
 3819 030d F5000000 		.4byte	0xf5
 3820 0311 00       		.byte	0
 3821 0312 0B       		.uleb128 0xb
 3822 0313 A9000000 		.4byte	.LASF55
 3823 0317 08       		.byte	0x8
 3824 0318 4B       		.byte	0x4b
 3825 0319 F5000000 		.4byte	0xf5
 3826 031d 04       		.byte	0x4
 3827 031e 0B       		.uleb128 0xb
 3828 031f BE020000 		.4byte	.LASF56
 3829 0323 08       		.byte	0x8
 3830 0324 4C       		.byte	0x4c
 3831 0325 F5000000 		.4byte	0xf5
 3832 0329 08       		.byte	0x8
 3833 032a 0B       		.uleb128 0xb
 3834 032b 6B040000 		.4byte	.LASF57
 3835 032f 08       		.byte	0x8
 3836 0330 4D       		.byte	0x4d
 3837 0331 B9000000 		.4byte	0xb9
 3838 0335 0C       		.byte	0xc
 3839 0336 0B       		.uleb128 0xb
 3840 0337 DC080000 		.4byte	.LASF58
 3841 033b 08       		.byte	0x8
 3842 033c 4E       		.byte	0x4e
 3843 033d AD000000 		.4byte	0xad
 3844 0341 0E       		.byte	0xe
 3845 0342 00       		.byte	0
 3846 0343 03       		.uleb128 0x3
 3847 0344 41080000 		.4byte	.LASF59
 3848 0348 08       		.byte	0x8
 3849 0349 50       		.byte	0x50
 3850 034a FE020000 		.4byte	0x2fe
 3851 034e 0D       		.uleb128 0xd
 3852 034f 09       		.byte	0x9
 3853 0350 08       		.byte	0x8
 3854 0351 53       		.byte	0x53
 3855 0352 C3030000 		.4byte	0x3c3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 92


 3856 0356 0B       		.uleb128 0xb
 3857 0357 F2020000 		.4byte	.LASF60
 3858 035b 08       		.byte	0x8
 3859 035c 55       		.byte	0x55
 3860 035d AD000000 		.4byte	0xad
 3861 0361 00       		.byte	0
 3862 0362 0B       		.uleb128 0xb
 3863 0363 BD060000 		.4byte	.LASF61
 3864 0367 08       		.byte	0x8
 3865 0368 57       		.byte	0x57
 3866 0369 C3030000 		.4byte	0x3c3
 3867 036d 01       		.byte	0x1
 3868 036e 0B       		.uleb128 0xb
 3869 036f 59080000 		.4byte	.LASF62
 3870 0373 08       		.byte	0x8
 3871 0374 59       		.byte	0x59
 3872 0375 AD000000 		.4byte	0xad
 3873 0379 02       		.byte	0x2
 3874 037a 0B       		.uleb128 0xb
 3875 037b 10070000 		.4byte	.LASF63
 3876 037f 08       		.byte	0x8
 3877 0380 5B       		.byte	0x5b
 3878 0381 AD000000 		.4byte	0xad
 3879 0385 03       		.byte	0x3
 3880 0386 0B       		.uleb128 0xb
 3881 0387 A4030000 		.4byte	.LASF64
 3882 038b 08       		.byte	0x8
 3883 038c 5E       		.byte	0x5e
 3884 038d AD000000 		.4byte	0xad
 3885 0391 04       		.byte	0x4
 3886 0392 0B       		.uleb128 0xb
 3887 0393 A0090000 		.4byte	.LASF65
 3888 0397 08       		.byte	0x8
 3889 0398 63       		.byte	0x63
 3890 0399 AD000000 		.4byte	0xad
 3891 039d 05       		.byte	0x5
 3892 039e 0B       		.uleb128 0xb
 3893 039f B9070000 		.4byte	.LASF66
 3894 03a3 08       		.byte	0x8
 3895 03a4 65       		.byte	0x65
 3896 03a5 AD000000 		.4byte	0xad
 3897 03a9 06       		.byte	0x6
 3898 03aa 0B       		.uleb128 0xb
 3899 03ab 83090000 		.4byte	.LASF67
 3900 03af 08       		.byte	0x8
 3901 03b0 66       		.byte	0x66
 3902 03b1 AD000000 		.4byte	0xad
 3903 03b5 07       		.byte	0x7
 3904 03b6 0B       		.uleb128 0xb
 3905 03b7 F0090000 		.4byte	.LASF68
 3906 03bb 08       		.byte	0x8
 3907 03bc 67       		.byte	0x67
 3908 03bd AD000000 		.4byte	0xad
 3909 03c1 08       		.byte	0x8
 3910 03c2 00       		.byte	0
 3911 03c3 02       		.uleb128 0x2
 3912 03c4 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 93


 3913 03c5 02       		.byte	0x2
 3914 03c6 D9060000 		.4byte	.LASF69
 3915 03ca 03       		.uleb128 0x3
 3916 03cb 85050000 		.4byte	.LASF70
 3917 03cf 08       		.byte	0x8
 3918 03d0 69       		.byte	0x69
 3919 03d1 4E030000 		.4byte	0x34e
 3920 03d5 0D       		.uleb128 0xd
 3921 03d6 06       		.byte	0x6
 3922 03d7 09       		.byte	0x9
 3923 03d8 30       		.byte	0x30
 3924 03d9 0E040000 		.4byte	0x40e
 3925 03dd 0B       		.uleb128 0xb
 3926 03de D9010000 		.4byte	.LASF71
 3927 03e2 09       		.byte	0x9
 3928 03e3 32       		.byte	0x32
 3929 03e4 B9000000 		.4byte	0xb9
 3930 03e8 00       		.byte	0
 3931 03e9 0B       		.uleb128 0xb
 3932 03ea 98020000 		.4byte	.LASF72
 3933 03ee 09       		.byte	0x9
 3934 03ef 33       		.byte	0x33
 3935 03f0 D1000000 		.4byte	0xd1
 3936 03f4 02       		.byte	0x2
 3937 03f5 0B       		.uleb128 0xb
 3938 03f6 E2090000 		.4byte	.LASF73
 3939 03fa 09       		.byte	0x9
 3940 03fb 34       		.byte	0x34
 3941 03fc AD000000 		.4byte	0xad
 3942 0400 04       		.byte	0x4
 3943 0401 0B       		.uleb128 0xb
 3944 0402 86000000 		.4byte	.LASF74
 3945 0406 09       		.byte	0x9
 3946 0407 35       		.byte	0x35
 3947 0408 AD000000 		.4byte	0xad
 3948 040c 05       		.byte	0x5
 3949 040d 00       		.byte	0
 3950 040e 03       		.uleb128 0x3
 3951 040f D3060000 		.4byte	.LASF75
 3952 0413 09       		.byte	0x9
 3953 0414 38       		.byte	0x38
 3954 0415 19040000 		.4byte	0x419
 3955 0419 0F       		.uleb128 0xf
 3956 041a D5030000 		.4byte	0x3d5
 3957 041e 0D       		.uleb128 0xd
 3958 041f 1C       		.byte	0x1c
 3959 0420 09       		.byte	0x9
 3960 0421 3B       		.byte	0x3b
 3961 0422 3F040000 		.4byte	0x43f
 3962 0426 0B       		.uleb128 0xb
 3963 0427 8E040000 		.4byte	.LASF76
 3964 042b 09       		.byte	0x9
 3965 042c 3D       		.byte	0x3d
 3966 042d 3F040000 		.4byte	0x43f
 3967 0431 00       		.byte	0
 3968 0432 0B       		.uleb128 0xb
 3969 0433 A1040000 		.4byte	.LASF77
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 94


 3970 0437 09       		.byte	0x9
 3971 0438 3E       		.byte	0x3e
 3972 0439 29010000 		.4byte	0x129
 3973 043d 04       		.byte	0x4
 3974 043e 00       		.byte	0
 3975 043f 06       		.uleb128 0x6
 3976 0440 04       		.byte	0x4
 3977 0441 7F020000 		.4byte	0x27f
 3978 0445 03       		.uleb128 0x3
 3979 0446 7A050000 		.4byte	.LASF78
 3980 044a 09       		.byte	0x9
 3981 044b 40       		.byte	0x40
 3982 044c 1E040000 		.4byte	0x41e
 3983 0450 0D       		.uleb128 0xd
 3984 0451 68       		.byte	0x68
 3985 0452 09       		.byte	0x9
 3986 0453 46       		.byte	0x46
 3987 0454 71040000 		.4byte	0x471
 3988 0458 0B       		.uleb128 0xb
 3989 0459 99040000 		.4byte	.LASF79
 3990 045d 09       		.byte	0x9
 3991 045e 4B       		.byte	0x4b
 3992 045f 71040000 		.4byte	0x471
 3993 0463 00       		.byte	0
 3994 0464 0B       		.uleb128 0xb
 3995 0465 7D040000 		.4byte	.LASF80
 3996 0469 09       		.byte	0x9
 3997 046a 4C       		.byte	0x4c
 3998 046b 7E000000 		.4byte	0x7e
 3999 046f 64       		.byte	0x64
 4000 0470 00       		.byte	0
 4001 0471 08       		.uleb128 0x8
 4002 0472 03010000 		.4byte	0x103
 4003 0476 81040000 		.4byte	0x481
 4004 047a 09       		.uleb128 0x9
 4005 047b 11010000 		.4byte	0x111
 4006 047f 63       		.byte	0x63
 4007 0480 00       		.byte	0
 4008 0481 03       		.uleb128 0x3
 4009 0482 AD090000 		.4byte	.LASF81
 4010 0486 09       		.byte	0x9
 4011 0487 52       		.byte	0x52
 4012 0488 50040000 		.4byte	0x450
 4013 048c 10       		.uleb128 0x10
 4014 048d C6060000 		.4byte	.LASF113
 4015 0491 01       		.byte	0x1
 4016 0492 12       		.byte	0x12
 4017 0493 00000000 		.4byte	.LFB64
 4018 0497 44000000 		.4byte	.LFE64-.LFB64
 4019 049b 01       		.uleb128 0x1
 4020 049c 9C       		.byte	0x9c
 4021 049d 11       		.uleb128 0x11
 4022 049e 8F060000 		.4byte	.LASF82
 4023 04a2 01       		.byte	0x1
 4024 04a3 1C       		.byte	0x1c
 4025 04a4 00000000 		.4byte	.LFB65
 4026 04a8 6C000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 95


 4027 04ac 01       		.uleb128 0x1
 4028 04ad 9C       		.byte	0x9c
 4029 04ae 11       		.uleb128 0x11
 4030 04af AB080000 		.4byte	.LASF83
 4031 04b3 01       		.byte	0x1
 4032 04b4 36       		.byte	0x36
 4033 04b5 00000000 		.4byte	.LFB66
 4034 04b9 32000000 		.4byte	.LFE66-.LFB66
 4035 04bd 01       		.uleb128 0x1
 4036 04be 9C       		.byte	0x9c
 4037 04bf 11       		.uleb128 0x11
 4038 04c0 E2080000 		.4byte	.LASF84
 4039 04c4 01       		.byte	0x1
 4040 04c5 46       		.byte	0x46
 4041 04c6 00000000 		.4byte	.LFB67
 4042 04ca 20000000 		.4byte	.LFE67-.LFB67
 4043 04ce 01       		.uleb128 0x1
 4044 04cf 9C       		.byte	0x9c
 4045 04d0 11       		.uleb128 0x11
 4046 04d1 2E0A0000 		.4byte	.LASF85
 4047 04d5 01       		.byte	0x1
 4048 04d6 4F       		.byte	0x4f
 4049 04d7 00000000 		.4byte	.LFB68
 4050 04db 40000000 		.4byte	.LFE68-.LFB68
 4051 04df 01       		.uleb128 0x1
 4052 04e0 9C       		.byte	0x9c
 4053 04e1 12       		.uleb128 0x12
 4054 04e2 AF040000 		.4byte	.LASF99
 4055 04e6 01       		.byte	0x1
 4056 04e7 61       		.byte	0x61
 4057 04e8 AD000000 		.4byte	0xad
 4058 04ec 00000000 		.4byte	.LFB69
 4059 04f0 DC000000 		.4byte	.LFE69-.LFB69
 4060 04f4 01       		.uleb128 0x1
 4061 04f5 9C       		.byte	0x9c
 4062 04f6 55050000 		.4byte	0x555
 4063 04fa 13       		.uleb128 0x13
 4064 04fb D0090000 		.4byte	.LASF86
 4065 04ff 01       		.byte	0x1
 4066 0500 6A       		.byte	0x6a
 4067 0501 AD000000 		.4byte	0xad
 4068 0505 02       		.uleb128 0x2
 4069 0506 91       		.byte	0x91
 4070 0507 77       		.sleb128 -9
 4071 0508 13       		.uleb128 0x13
 4072 0509 D9090000 		.4byte	.LASF87
 4073 050d 01       		.byte	0x1
 4074 050e 6B       		.byte	0x6b
 4075 050f AD000000 		.4byte	0xad
 4076 0513 02       		.uleb128 0x2
 4077 0514 91       		.byte	0x91
 4078 0515 74       		.sleb128 -12
 4079 0516 13       		.uleb128 0x13
 4080 0517 FB090000 		.4byte	.LASF88
 4081 051b 01       		.byte	0x1
 4082 051c 6D       		.byte	0x6d
 4083 051d 57000000 		.4byte	0x57
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 96


 4084 0521 02       		.uleb128 0x2
 4085 0522 91       		.byte	0x91
 4086 0523 70       		.sleb128 -16
 4087 0524 14       		.uleb128 0x14
 4088 0525 26000000 		.4byte	.LBB2
 4089 0529 4A000000 		.4byte	.LBE2-.LBB2
 4090 052d 13       		.uleb128 0x13
 4091 052e D9090000 		.4byte	.LASF87
 4092 0532 01       		.byte	0x1
 4093 0533 70       		.byte	0x70
 4094 0534 AD000000 		.4byte	0xad
 4095 0538 02       		.uleb128 0x2
 4096 0539 91       		.byte	0x91
 4097 053a 76       		.sleb128 -10
 4098 053b 14       		.uleb128 0x14
 4099 053c 2C000000 		.4byte	.LBB3
 4100 0540 2A000000 		.4byte	.LBE3-.LBB3
 4101 0544 13       		.uleb128 0x13
 4102 0545 17040000 		.4byte	.LASF89
 4103 0549 01       		.byte	0x1
 4104 054a 72       		.byte	0x72
 4105 054b AD000000 		.4byte	0xad
 4106 054f 02       		.uleb128 0x2
 4107 0550 91       		.byte	0x91
 4108 0551 75       		.sleb128 -11
 4109 0552 00       		.byte	0
 4110 0553 00       		.byte	0
 4111 0554 00       		.byte	0
 4112 0555 11       		.uleb128 0x11
 4113 0556 A2070000 		.4byte	.LASF90
 4114 055a 01       		.byte	0x1
 4115 055b 93       		.byte	0x93
 4116 055c 00000000 		.4byte	.LFB70
 4117 0560 1C000000 		.4byte	.LFE70-.LFB70
 4118 0564 01       		.uleb128 0x1
 4119 0565 9C       		.byte	0x9c
 4120 0566 11       		.uleb128 0x11
 4121 0567 77070000 		.4byte	.LASF91
 4122 056b 01       		.byte	0x1
 4123 056c 9B       		.byte	0x9b
 4124 056d 00000000 		.4byte	.LFB71
 4125 0571 28000000 		.4byte	.LFE71-.LFB71
 4126 0575 01       		.uleb128 0x1
 4127 0576 9C       		.byte	0x9c
 4128 0577 15       		.uleb128 0x15
 4129 0578 69050000 		.4byte	.LASF103
 4130 057c 01       		.byte	0x1
 4131 057d A6       		.byte	0xa6
 4132 057e 8C000000 		.4byte	0x8c
 4133 0582 00000000 		.4byte	.LFB72
 4134 0586 C8000000 		.4byte	.LFE72-.LFB72
 4135 058a 01       		.uleb128 0x1
 4136 058b 9C       		.byte	0x9c
 4137 058c 09060000 		.4byte	0x609
 4138 0590 16       		.uleb128 0x16
 4139 0591 6F060000 		.4byte	.LASF92
 4140 0595 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 97


 4141 0596 A6       		.byte	0xa6
 4142 0597 18010000 		.4byte	0x118
 4143 059b 02       		.uleb128 0x2
 4144 059c 91       		.byte	0x91
 4145 059d 5C       		.sleb128 -36
 4146 059e 16       		.uleb128 0x16
 4147 059f 050A0000 		.4byte	.LASF93
 4148 05a3 01       		.byte	0x1
 4149 05a4 A6       		.byte	0xa6
 4150 05a5 18010000 		.4byte	0x118
 4151 05a9 02       		.uleb128 0x2
 4152 05aa 91       		.byte	0x91
 4153 05ab 58       		.sleb128 -40
 4154 05ac 16       		.uleb128 0x16
 4155 05ad 42040000 		.4byte	.LASF94
 4156 05b1 01       		.byte	0x1
 4157 05b2 A6       		.byte	0xa6
 4158 05b3 A2000000 		.4byte	0xa2
 4159 05b7 02       		.uleb128 0x2
 4160 05b8 91       		.byte	0x91
 4161 05b9 54       		.sleb128 -44
 4162 05ba 13       		.uleb128 0x13
 4163 05bb 36050000 		.4byte	.LASF95
 4164 05bf 01       		.byte	0x1
 4165 05c0 A8       		.byte	0xa8
 4166 05c1 C5000000 		.4byte	0xc5
 4167 05c5 02       		.uleb128 0x2
 4168 05c6 91       		.byte	0x91
 4169 05c7 74       		.sleb128 -12
 4170 05c8 14       		.uleb128 0x14
 4171 05c9 16000000 		.4byte	.LBB4
 4172 05cd 88000000 		.4byte	.LBE4-.LBB4
 4173 05d1 13       		.uleb128 0x13
 4174 05d2 78060000 		.4byte	.LASF96
 4175 05d6 01       		.byte	0x1
 4176 05d7 AC       		.byte	0xac
 4177 05d8 18010000 		.4byte	0x118
 4178 05dc 02       		.uleb128 0x2
 4179 05dd 91       		.byte	0x91
 4180 05de 64       		.sleb128 -28
 4181 05df 13       		.uleb128 0x13
 4182 05e0 05070000 		.4byte	.LASF97
 4183 05e4 01       		.byte	0x1
 4184 05e5 AD       		.byte	0xad
 4185 05e6 A2000000 		.4byte	0xa2
 4186 05ea 02       		.uleb128 0x2
 4187 05eb 91       		.byte	0x91
 4188 05ec 6C       		.sleb128 -20
 4189 05ed 17       		.uleb128 0x17
 4190 05ee 6900     		.ascii	"i\000"
 4191 05f0 01       		.byte	0x1
 4192 05f1 AE       		.byte	0xae
 4193 05f2 A2000000 		.4byte	0xa2
 4194 05f6 02       		.uleb128 0x2
 4195 05f7 91       		.byte	0x91
 4196 05f8 70       		.sleb128 -16
 4197 05f9 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 98


 4198 05fa 47030000 		.4byte	.LASF98
 4199 05fe 01       		.byte	0x1
 4200 05ff AE       		.byte	0xae
 4201 0600 A2000000 		.4byte	0xa2
 4202 0604 02       		.uleb128 0x2
 4203 0605 91       		.byte	0x91
 4204 0606 68       		.sleb128 -24
 4205 0607 00       		.byte	0
 4206 0608 00       		.byte	0
 4207 0609 12       		.uleb128 0x12
 4208 060a 44060000 		.4byte	.LASF100
 4209 060e 01       		.byte	0x1
 4210 060f DA       		.byte	0xda
 4211 0610 FF010000 		.4byte	0x1ff
 4212 0614 00000000 		.4byte	.LFB73
 4213 0618 00010000 		.4byte	.LFE73-.LFB73
 4214 061c 01       		.uleb128 0x1
 4215 061d 9C       		.byte	0x9c
 4216 061e 60060000 		.4byte	0x660
 4217 0622 13       		.uleb128 0x13
 4218 0623 7D010000 		.4byte	.LASF101
 4219 0627 01       		.byte	0x1
 4220 0628 DC       		.byte	0xdc
 4221 0629 FF010000 		.4byte	0x1ff
 4222 062d 03       		.uleb128 0x3
 4223 062e 91       		.byte	0x91
 4224 062f E47C     		.sleb128 -412
 4225 0631 14       		.uleb128 0x14
 4226 0632 4A000000 		.4byte	.LBB5
 4227 0636 86000000 		.4byte	.LBE5-.LBB5
 4228 063a 17       		.uleb128 0x17
 4229 063b 6900     		.ascii	"i\000"
 4230 063d 01       		.byte	0x1
 4231 063e E3       		.byte	0xe3
 4232 063f 7E000000 		.4byte	0x7e
 4233 0643 02       		.uleb128 0x2
 4234 0644 91       		.byte	0x91
 4235 0645 6C       		.sleb128 -20
 4236 0646 14       		.uleb128 0x14
 4237 0647 70000000 		.4byte	.LBB6
 4238 064b 46000000 		.4byte	.LBE6-.LBB6
 4239 064f 13       		.uleb128 0x13
 4240 0650 20030000 		.4byte	.LASF102
 4241 0654 01       		.byte	0x1
 4242 0655 F0       		.byte	0xf0
 4243 0656 57000000 		.4byte	0x57
 4244 065a 02       		.uleb128 0x2
 4245 065b 91       		.byte	0x91
 4246 065c 68       		.sleb128 -24
 4247 065d 00       		.byte	0
 4248 065e 00       		.byte	0
 4249 065f 00       		.byte	0
 4250 0660 18       		.uleb128 0x18
 4251 0661 33040000 		.4byte	.LASF104
 4252 0665 01       		.byte	0x1
 4253 0666 0401     		.2byte	0x104
 4254 0668 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 99


 4255 066c 00000000 		.4byte	.LFB74
 4256 0670 78000000 		.4byte	.LFE74-.LFB74
 4257 0674 01       		.uleb128 0x1
 4258 0675 9C       		.byte	0x9c
 4259 0676 D1060000 		.4byte	0x6d1
 4260 067a 19       		.uleb128 0x19
 4261 067b 21050000 		.4byte	.LASF105
 4262 067f 01       		.byte	0x1
 4263 0680 0401     		.2byte	0x104
 4264 0682 18010000 		.4byte	0x118
 4265 0686 02       		.uleb128 0x2
 4266 0687 91       		.byte	0x91
 4267 0688 6C       		.sleb128 -20
 4268 0689 19       		.uleb128 0x19
 4269 068a C6040000 		.4byte	.LASF106
 4270 068e 01       		.byte	0x1
 4271 068f 0401     		.2byte	0x104
 4272 0691 1E010000 		.4byte	0x11e
 4273 0695 02       		.uleb128 0x2
 4274 0696 91       		.byte	0x91
 4275 0697 68       		.sleb128 -24
 4276 0698 19       		.uleb128 0x19
 4277 0699 EC040000 		.4byte	.LASF107
 4278 069d 01       		.byte	0x1
 4279 069e 0401     		.2byte	0x104
 4280 06a0 1E010000 		.4byte	0x11e
 4281 06a4 02       		.uleb128 0x2
 4282 06a5 91       		.byte	0x91
 4283 06a6 64       		.sleb128 -28
 4284 06a7 19       		.uleb128 0x19
 4285 06a8 D2040000 		.4byte	.LASF108
 4286 06ac 01       		.byte	0x1
 4287 06ad 0401     		.2byte	0x104
 4288 06af 18010000 		.4byte	0x118
 4289 06b3 02       		.uleb128 0x2
 4290 06b4 91       		.byte	0x91
 4291 06b5 60       		.sleb128 -32
 4292 06b6 1A       		.uleb128 0x1a
 4293 06b7 6100     		.ascii	"a\000"
 4294 06b9 01       		.byte	0x1
 4295 06ba 0601     		.2byte	0x106
 4296 06bc 18010000 		.4byte	0x118
 4297 06c0 02       		.uleb128 0x2
 4298 06c1 91       		.byte	0x91
 4299 06c2 74       		.sleb128 -12
 4300 06c3 1A       		.uleb128 0x1a
 4301 06c4 6200     		.ascii	"b\000"
 4302 06c6 01       		.byte	0x1
 4303 06c7 0601     		.2byte	0x106
 4304 06c9 18010000 		.4byte	0x118
 4305 06cd 02       		.uleb128 0x2
 4306 06ce 91       		.byte	0x91
 4307 06cf 70       		.sleb128 -16
 4308 06d0 00       		.byte	0
 4309 06d1 1B       		.uleb128 0x1b
 4310 06d2 EF070000 		.4byte	.LASF109
 4311 06d6 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 100


 4312 06d7 2301     		.2byte	0x123
 4313 06d9 AD000000 		.4byte	0xad
 4314 06dd 00000000 		.4byte	.LFB75
 4315 06e1 74010000 		.4byte	.LFE75-.LFB75
 4316 06e5 01       		.uleb128 0x1
 4317 06e6 9C       		.byte	0x9c
 4318 06e7 03070000 		.4byte	0x703
 4319 06eb 14       		.uleb128 0x14
 4320 06ec 2E000000 		.4byte	.LBB7
 4321 06f0 68000000 		.4byte	.LBE7-.LBB7
 4322 06f4 1A       		.uleb128 0x1a
 4323 06f5 6900     		.ascii	"i\000"
 4324 06f7 01       		.byte	0x1
 4325 06f8 3101     		.2byte	0x131
 4326 06fa AD000000 		.4byte	0xad
 4327 06fe 02       		.uleb128 0x2
 4328 06ff 91       		.byte	0x91
 4329 0700 77       		.sleb128 -9
 4330 0701 00       		.byte	0
 4331 0702 00       		.byte	0
 4332 0703 1B       		.uleb128 0x1b
 4333 0704 EC050000 		.4byte	.LASF110
 4334 0708 01       		.byte	0x1
 4335 0709 7501     		.2byte	0x175
 4336 070b AD000000 		.4byte	0xad
 4337 070f 00000000 		.4byte	.LFB76
 4338 0713 B8000000 		.4byte	.LFE76-.LFB76
 4339 0717 01       		.uleb128 0x1
 4340 0718 9C       		.byte	0x9c
 4341 0719 46070000 		.4byte	0x746
 4342 071d 1C       		.uleb128 0x1c
 4343 071e 4E090000 		.4byte	.LASF36
 4344 0722 01       		.byte	0x1
 4345 0723 7901     		.2byte	0x179
 4346 0725 AD000000 		.4byte	0xad
 4347 0729 02       		.uleb128 0x2
 4348 072a 91       		.byte	0x91
 4349 072b 77       		.sleb128 -9
 4350 072c 14       		.uleb128 0x14
 4351 072d 36000000 		.4byte	.LBB8
 4352 0731 48000000 		.4byte	.LBE8-.LBB8
 4353 0735 1C       		.uleb128 0x1c
 4354 0736 26050000 		.4byte	.LASF111
 4355 073a 01       		.byte	0x1
 4356 073b 8101     		.2byte	0x181
 4357 073d 46070000 		.4byte	0x746
 4358 0741 02       		.uleb128 0x2
 4359 0742 91       		.byte	0x91
 4360 0743 6C       		.sleb128 -20
 4361 0744 00       		.byte	0
 4362 0745 00       		.byte	0
 4363 0746 08       		.uleb128 0x8
 4364 0747 03010000 		.4byte	0x103
 4365 074b 56070000 		.4byte	0x756
 4366 074f 09       		.uleb128 0x9
 4367 0750 11010000 		.4byte	0x111
 4368 0754 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 101


 4369 0755 00       		.byte	0
 4370 0756 1D       		.uleb128 0x1d
 4371 0757 33020000 		.4byte	.LASF112
 4372 075b 01       		.byte	0x1
 4373 075c 9301     		.2byte	0x193
 4374 075e 00000000 		.4byte	.LFB77
 4375 0762 1C000000 		.4byte	.LFE77-.LFB77
 4376 0766 01       		.uleb128 0x1
 4377 0767 9C       		.byte	0x9c
 4378 0768 1E       		.uleb128 0x1e
 4379 0769 66080000 		.4byte	.LASF114
 4380 076d 01       		.byte	0x1
 4381 076e A301     		.2byte	0x1a3
 4382 0770 AD000000 		.4byte	0xad
 4383 0774 00000000 		.4byte	.LFB78
 4384 0778 28000000 		.4byte	.LFE78-.LFB78
 4385 077c 01       		.uleb128 0x1
 4386 077d 9C       		.byte	0x9c
 4387 077e 1F       		.uleb128 0x1f
 4388 077f 4A040000 		.4byte	.LASF117
 4389 0783 01       		.byte	0x1
 4390 0784 AE01     		.2byte	0x1ae
 4391 0786 00000000 		.4byte	.LFB79
 4392 078a 84000000 		.4byte	.LFE79-.LFB79
 4393 078e 01       		.uleb128 0x1
 4394 078f 9C       		.byte	0x9c
 4395 0790 A4070000 		.4byte	0x7a4
 4396 0794 1C       		.uleb128 0x1c
 4397 0795 4F060000 		.4byte	.LASF115
 4398 0799 01       		.byte	0x1
 4399 079a BB01     		.2byte	0x1bb
 4400 079c 7E000000 		.4byte	0x7e
 4401 07a0 02       		.uleb128 0x2
 4402 07a1 91       		.byte	0x91
 4403 07a2 74       		.sleb128 -12
 4404 07a3 00       		.byte	0
 4405 07a4 20       		.uleb128 0x20
 4406 07a5 C9030000 		.4byte	.LASF116
 4407 07a9 01       		.byte	0x1
 4408 07aa CD01     		.2byte	0x1cd
 4409 07ac 00000000 		.4byte	.LFB80
 4410 07b0 48000000 		.4byte	.LFE80-.LFB80
 4411 07b4 01       		.uleb128 0x1
 4412 07b5 9C       		.byte	0x9c
 4413 07b6 1F       		.uleb128 0x1f
 4414 07b7 1D090000 		.4byte	.LASF118
 4415 07bb 01       		.byte	0x1
 4416 07bc DD01     		.2byte	0x1dd
 4417 07be 00000000 		.4byte	.LFB81
 4418 07c2 04060000 		.4byte	.LFE81-.LFB81
 4419 07c6 01       		.uleb128 0x1
 4420 07c7 9C       		.byte	0x9c
 4421 07c8 0B090000 		.4byte	0x90b
 4422 07cc 1C       		.uleb128 0x1c
 4423 07cd 1A070000 		.4byte	.LASF119
 4424 07d1 01       		.byte	0x1
 4425 07d2 E001     		.2byte	0x1e0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 102


 4426 07d4 46070000 		.4byte	0x746
 4427 07d8 02       		.uleb128 0x2
 4428 07d9 91       		.byte	0x91
 4429 07da 64       		.sleb128 -28
 4430 07db 1C       		.uleb128 0x1c
 4431 07dc 15030000 		.4byte	.LASF120
 4432 07e0 01       		.byte	0x1
 4433 07e1 E101     		.2byte	0x1e1
 4434 07e3 46070000 		.4byte	0x746
 4435 07e7 02       		.uleb128 0x2
 4436 07e8 91       		.byte	0x91
 4437 07e9 58       		.sleb128 -40
 4438 07ea 1C       		.uleb128 0x1c
 4439 07eb 40090000 		.4byte	.LASF121
 4440 07ef 01       		.byte	0x1
 4441 07f0 E201     		.2byte	0x1e2
 4442 07f2 46070000 		.4byte	0x746
 4443 07f6 02       		.uleb128 0x2
 4444 07f7 91       		.byte	0x91
 4445 07f8 4C       		.sleb128 -52
 4446 07f9 1C       		.uleb128 0x1c
 4447 07fa A0060000 		.4byte	.LASF122
 4448 07fe 01       		.byte	0x1
 4449 07ff E301     		.2byte	0x1e3
 4450 0801 46070000 		.4byte	0x746
 4451 0805 02       		.uleb128 0x2
 4452 0806 91       		.byte	0x91
 4453 0807 40       		.sleb128 -64
 4454 0808 1C       		.uleb128 0x1c
 4455 0809 BC030000 		.4byte	.LASF123
 4456 080d 01       		.byte	0x1
 4457 080e E401     		.2byte	0x1e4
 4458 0810 46070000 		.4byte	0x746
 4459 0814 03       		.uleb128 0x3
 4460 0815 91       		.byte	0x91
 4461 0816 B47F     		.sleb128 -76
 4462 0818 1C       		.uleb128 0x1c
 4463 0819 C3080000 		.4byte	.LASF124
 4464 081d 01       		.byte	0x1
 4465 081e E801     		.2byte	0x1e8
 4466 0820 71040000 		.4byte	0x471
 4467 0824 03       		.uleb128 0x3
 4468 0825 91       		.byte	0x91
 4469 0826 D07E     		.sleb128 -176
 4470 0828 1C       		.uleb128 0x1c
 4471 0829 79030000 		.4byte	.LASF125
 4472 082d 01       		.byte	0x1
 4473 082e EB01     		.2byte	0x1eb
 4474 0830 71040000 		.4byte	0x471
 4475 0834 03       		.uleb128 0x3
 4476 0835 91       		.byte	0x91
 4477 0836 EC7D     		.sleb128 -276
 4478 0838 1C       		.uleb128 0x1c
 4479 0839 D2050000 		.4byte	.LASF126
 4480 083d 01       		.byte	0x1
 4481 083e EE01     		.2byte	0x1ee
 4482 0840 71040000 		.4byte	0x471
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 103


 4483 0844 03       		.uleb128 0x3
 4484 0845 91       		.byte	0x91
 4485 0846 887D     		.sleb128 -376
 4486 0848 1C       		.uleb128 0x1c
 4487 0849 41050000 		.4byte	.LASF127
 4488 084d 01       		.byte	0x1
 4489 084e F101     		.2byte	0x1f1
 4490 0850 71040000 		.4byte	0x471
 4491 0854 03       		.uleb128 0x3
 4492 0855 91       		.byte	0x91
 4493 0856 A47C     		.sleb128 -476
 4494 0858 1C       		.uleb128 0x1c
 4495 0859 AE060000 		.4byte	.LASF128
 4496 085d 01       		.byte	0x1
 4497 085e F401     		.2byte	0x1f4
 4498 0860 0B090000 		.4byte	0x90b
 4499 0864 03       		.uleb128 0x3
 4500 0865 91       		.byte	0x91
 4501 0866 DC7A     		.sleb128 -676
 4502 0868 1C       		.uleb128 0x1c
 4503 0869 F2020000 		.4byte	.LASF60
 4504 086d 01       		.byte	0x1
 4505 086e 3C02     		.2byte	0x23c
 4506 0870 7E000000 		.4byte	0x7e
 4507 0874 03       		.uleb128 0x3
 4508 0875 91       		.byte	0x91
 4509 0876 D87A     		.sleb128 -680
 4510 0878 1C       		.uleb128 0x1c
 4511 0879 BD060000 		.4byte	.LASF61
 4512 087d 01       		.byte	0x1
 4513 087e 3C02     		.2byte	0x23c
 4514 0880 7E000000 		.4byte	0x7e
 4515 0884 03       		.uleb128 0x3
 4516 0885 91       		.byte	0x91
 4517 0886 D47A     		.sleb128 -684
 4518 0888 1C       		.uleb128 0x1c
 4519 0889 65010000 		.4byte	.LASF129
 4520 088d 01       		.byte	0x1
 4521 088e 3C02     		.2byte	0x23c
 4522 0890 7E000000 		.4byte	0x7e
 4523 0894 03       		.uleb128 0x3
 4524 0895 91       		.byte	0x91
 4525 0896 D07A     		.sleb128 -688
 4526 0898 1C       		.uleb128 0x1c
 4527 0899 9C050000 		.4byte	.LASF130
 4528 089d 01       		.byte	0x1
 4529 089e 3C02     		.2byte	0x23c
 4530 08a0 7E000000 		.4byte	0x7e
 4531 08a4 03       		.uleb128 0x3
 4532 08a5 91       		.byte	0x91
 4533 08a6 CC7A     		.sleb128 -692
 4534 08a8 1C       		.uleb128 0x1c
 4535 08a9 2B050000 		.4byte	.LASF131
 4536 08ad 01       		.byte	0x1
 4537 08ae 3C02     		.2byte	0x23c
 4538 08b0 7E000000 		.4byte	0x7e
 4539 08b4 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 104


 4540 08b5 91       		.byte	0x91
 4541 08b6 C87A     		.sleb128 -696
 4542 08b8 1C       		.uleb128 0x1c
 4543 08b9 720A0000 		.4byte	.LASF132
 4544 08bd 01       		.byte	0x1
 4545 08be 3C02     		.2byte	0x23c
 4546 08c0 7E000000 		.4byte	0x7e
 4547 08c4 03       		.uleb128 0x3
 4548 08c5 91       		.byte	0x91
 4549 08c6 C47A     		.sleb128 -700
 4550 08c8 1C       		.uleb128 0x1c
 4551 08c9 CD020000 		.4byte	.LASF133
 4552 08cd 01       		.byte	0x1
 4553 08ce 3C02     		.2byte	0x23c
 4554 08d0 7E000000 		.4byte	0x7e
 4555 08d4 03       		.uleb128 0x3
 4556 08d5 91       		.byte	0x91
 4557 08d6 C07A     		.sleb128 -704
 4558 08d8 1C       		.uleb128 0x1c
 4559 08d9 19020000 		.4byte	.LASF134
 4560 08dd 01       		.byte	0x1
 4561 08de 3C02     		.2byte	0x23c
 4562 08e0 7E000000 		.4byte	0x7e
 4563 08e4 03       		.uleb128 0x3
 4564 08e5 91       		.byte	0x91
 4565 08e6 BC7A     		.sleb128 -708
 4566 08e8 21       		.uleb128 0x21
 4567 08e9 F0090000 		.4byte	.LASF68
 4568 08ed 01       		.byte	0x1
 4569 08ee 3C02     		.2byte	0x23c
 4570 08f0 7E000000 		.4byte	0x7e
 4571 08f4 22       		.uleb128 0x22
 4572 08f5 00000000 		.4byte	.Ldebug_ranges0+0
 4573 08f9 1C       		.uleb128 0x1c
 4574 08fa 84020000 		.4byte	.LASF135
 4575 08fe 01       		.byte	0x1
 4576 08ff 6802     		.2byte	0x268
 4577 0901 71040000 		.4byte	0x471
 4578 0905 03       		.uleb128 0x3
 4579 0906 91       		.byte	0x91
 4580 0907 D879     		.sleb128 -808
 4581 0909 00       		.byte	0
 4582 090a 00       		.byte	0
 4583 090b 08       		.uleb128 0x8
 4584 090c 03010000 		.4byte	0x103
 4585 0910 1B090000 		.4byte	0x91b
 4586 0914 09       		.uleb128 0x9
 4587 0915 11010000 		.4byte	0x111
 4588 0919 C7       		.byte	0xc7
 4589 091a 00       		.byte	0
 4590 091b 1F       		.uleb128 0x1f
 4591 091c FC020000 		.4byte	.LASF136
 4592 0920 01       		.byte	0x1
 4593 0921 BD02     		.2byte	0x2bd
 4594 0923 00000000 		.4byte	.LFB82
 4595 0927 68010000 		.4byte	.LFE82-.LFB82
 4596 092b 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 105


 4597 092c 9C       		.byte	0x9c
 4598 092d 4B090000 		.4byte	0x94b
 4599 0931 14       		.uleb128 0x14
 4600 0932 DA000000 		.4byte	.LBB12
 4601 0936 38000000 		.4byte	.LBE12-.LBB12
 4602 093a 1C       		.uleb128 0x1c
 4603 093b 10080000 		.4byte	.LASF137
 4604 093f 01       		.byte	0x1
 4605 0940 EB02     		.2byte	0x2eb
 4606 0942 46070000 		.4byte	0x746
 4607 0946 02       		.uleb128 0x2
 4608 0947 91       		.byte	0x91
 4609 0948 6C       		.sleb128 -20
 4610 0949 00       		.byte	0
 4611 094a 00       		.byte	0
 4612 094b 1B       		.uleb128 0x1b
 4613 094c 5B030000 		.4byte	.LASF138
 4614 0950 01       		.byte	0x1
 4615 0951 FE02     		.2byte	0x2fe
 4616 0953 57000000 		.4byte	0x57
 4617 0957 00000000 		.4byte	.LFB83
 4618 095b 44010000 		.4byte	.LFE83-.LFB83
 4619 095f 01       		.uleb128 0x1
 4620 0960 9C       		.byte	0x9c
 4621 0961 070A0000 		.4byte	0xa07
 4622 0965 1C       		.uleb128 0x1c
 4623 0966 00050000 		.4byte	.LASF139
 4624 096a 01       		.byte	0x1
 4625 096b 0903     		.2byte	0x309
 4626 096d 57000000 		.4byte	0x57
 4627 0971 02       		.uleb128 0x2
 4628 0972 91       		.byte	0x91
 4629 0973 74       		.sleb128 -12
 4630 0974 14       		.uleb128 0x14
 4631 0975 30000000 		.4byte	.LBB13
 4632 0979 DE000000 		.4byte	.LBE13-.LBB13
 4633 097d 1C       		.uleb128 0x1c
 4634 097e 20030000 		.4byte	.LASF102
 4635 0982 01       		.byte	0x1
 4636 0983 0E03     		.2byte	0x30e
 4637 0985 070A0000 		.4byte	0xa07
 4638 0989 02       		.uleb128 0x2
 4639 098a 91       		.byte	0x91
 4640 098b 54       		.sleb128 -44
 4641 098c 1A       		.uleb128 0x1a
 4642 098d 7400     		.ascii	"t\000"
 4643 098f 01       		.byte	0x1
 4644 0990 1403     		.2byte	0x314
 4645 0992 39010000 		.4byte	0x139
 4646 0996 03       		.uleb128 0x3
 4647 0997 91       		.byte	0x91
 4648 0998 947F     		.sleb128 -108
 4649 099a 1C       		.uleb128 0x1c
 4650 099b 64020000 		.4byte	.LASF140
 4651 099f 01       		.byte	0x1
 4652 09a0 1703     		.2byte	0x317
 4653 09a2 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 106


 4654 09a6 02       		.uleb128 0x2
 4655 09a7 91       		.byte	0x91
 4656 09a8 50       		.sleb128 -48
 4657 09a9 1C       		.uleb128 0x1c
 4658 09aa E6050000 		.4byte	.LASF141
 4659 09ae 01       		.byte	0x1
 4660 09af 1703     		.2byte	0x317
 4661 09b1 7E000000 		.4byte	0x7e
 4662 09b5 02       		.uleb128 0x2
 4663 09b6 91       		.byte	0x91
 4664 09b7 4C       		.sleb128 -52
 4665 09b8 1A       		.uleb128 0x1a
 4666 09b9 64617900 		.ascii	"day\000"
 4667 09bd 01       		.byte	0x1
 4668 09be 1703     		.2byte	0x317
 4669 09c0 7E000000 		.4byte	0x7e
 4670 09c4 02       		.uleb128 0x2
 4671 09c5 91       		.byte	0x91
 4672 09c6 48       		.sleb128 -56
 4673 09c7 1C       		.uleb128 0x1c
 4674 09c8 6A060000 		.4byte	.LASF142
 4675 09cc 01       		.byte	0x1
 4676 09cd 1703     		.2byte	0x317
 4677 09cf 7E000000 		.4byte	0x7e
 4678 09d3 02       		.uleb128 0x2
 4679 09d4 91       		.byte	0x91
 4680 09d5 44       		.sleb128 -60
 4681 09d6 1C       		.uleb128 0x1c
 4682 09d7 F8080000 		.4byte	.LASF143
 4683 09db 01       		.byte	0x1
 4684 09dc 1703     		.2byte	0x317
 4685 09de 7E000000 		.4byte	0x7e
 4686 09e2 02       		.uleb128 0x2
 4687 09e3 91       		.byte	0x91
 4688 09e4 40       		.sleb128 -64
 4689 09e5 1C       		.uleb128 0x1c
 4690 09e6 5D020000 		.4byte	.LASF144
 4691 09ea 01       		.byte	0x1
 4692 09eb 1703     		.2byte	0x317
 4693 09ed 7E000000 		.4byte	0x7e
 4694 09f1 03       		.uleb128 0x3
 4695 09f2 91       		.byte	0x91
 4696 09f3 BC7F     		.sleb128 -68
 4697 09f5 1C       		.uleb128 0x1c
 4698 09f6 0C000000 		.4byte	.LASF145
 4699 09fa 01       		.byte	0x1
 4700 09fb 1703     		.2byte	0x317
 4701 09fd 7E000000 		.4byte	0x7e
 4702 0a01 03       		.uleb128 0x3
 4703 0a02 91       		.byte	0x91
 4704 0a03 B87F     		.sleb128 -72
 4705 0a05 00       		.byte	0
 4706 0a06 00       		.byte	0
 4707 0a07 08       		.uleb128 0x8
 4708 0a08 03010000 		.4byte	0x103
 4709 0a0c 170A0000 		.4byte	0xa17
 4710 0a10 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 107


 4711 0a11 11010000 		.4byte	0x111
 4712 0a15 1D       		.byte	0x1d
 4713 0a16 00       		.byte	0
 4714 0a17 23       		.uleb128 0x23
 4715 0a18 AE020000 		.4byte	.LASF146
 4716 0a1c 01       		.byte	0x1
 4717 0a1d 3703     		.2byte	0x337
 4718 0a1f AD000000 		.4byte	0xad
 4719 0a23 00000000 		.4byte	.LFB84
 4720 0a27 14000000 		.4byte	.LFE84-.LFB84
 4721 0a2b 01       		.uleb128 0x1
 4722 0a2c 9C       		.byte	0x9c
 4723 0a2d 1D       		.uleb128 0x1d
 4724 0a2e B0030000 		.4byte	.LASF147
 4725 0a32 01       		.byte	0x1
 4726 0a33 3C03     		.2byte	0x33c
 4727 0a35 00000000 		.4byte	.LFB85
 4728 0a39 1A000000 		.4byte	.LFE85-.LFB85
 4729 0a3d 01       		.uleb128 0x1
 4730 0a3e 9C       		.byte	0x9c
 4731 0a3f 1D       		.uleb128 0x1d
 4732 0a40 41010000 		.4byte	.LASF148
 4733 0a44 01       		.byte	0x1
 4734 0a45 4903     		.2byte	0x349
 4735 0a47 00000000 		.4byte	.LFB86
 4736 0a4b 2A000000 		.4byte	.LFE86-.LFB86
 4737 0a4f 01       		.uleb128 0x1
 4738 0a50 9C       		.byte	0x9c
 4739 0a51 1B       		.uleb128 0x1b
 4740 0a52 2B070000 		.4byte	.LASF149
 4741 0a56 01       		.byte	0x1
 4742 0a57 5C03     		.2byte	0x35c
 4743 0a59 43030000 		.4byte	0x343
 4744 0a5d 00000000 		.4byte	.LFB87
 4745 0a61 7C020000 		.4byte	.LFE87-.LFB87
 4746 0a65 01       		.uleb128 0x1
 4747 0a66 9C       		.byte	0x9c
 4748 0a67 FA0A0000 		.4byte	0xafa
 4749 0a6b 1A       		.uleb128 0x1a
 4750 0a6c 67707300 		.ascii	"gps\000"
 4751 0a70 01       		.byte	0x1
 4752 0a71 5D03     		.2byte	0x35d
 4753 0a73 43030000 		.4byte	0x343
 4754 0a77 02       		.uleb128 0x2
 4755 0a78 91       		.byte	0x91
 4756 0a79 4C       		.sleb128 -52
 4757 0a7a 1C       		.uleb128 0x1c
 4758 0a7b 170A0000 		.4byte	.LASF150
 4759 0a7f 01       		.byte	0x1
 4760 0a80 6903     		.2byte	0x369
 4761 0a82 57000000 		.4byte	0x57
 4762 0a86 02       		.uleb128 0x2
 4763 0a87 91       		.byte	0x91
 4764 0a88 68       		.sleb128 -24
 4765 0a89 1C       		.uleb128 0x1c
 4766 0a8a 22060000 		.4byte	.LASF151
 4767 0a8e 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 108


 4768 0a8f 9003     		.2byte	0x390
 4769 0a91 AD000000 		.4byte	0xad
 4770 0a95 02       		.uleb128 0x2
 4771 0a96 91       		.byte	0x91
 4772 0a97 67       		.sleb128 -25
 4773 0a98 1A       		.uleb128 0x1a
 4774 0a99 6C617400 		.ascii	"lat\000"
 4775 0a9d 01       		.byte	0x1
 4776 0a9e 9C03     		.2byte	0x39c
 4777 0aa0 F5000000 		.4byte	0xf5
 4778 0aa4 02       		.uleb128 0x2
 4779 0aa5 91       		.byte	0x91
 4780 0aa6 48       		.sleb128 -56
 4781 0aa7 1A       		.uleb128 0x1a
 4782 0aa8 6C6F6E00 		.ascii	"lon\000"
 4783 0aac 01       		.byte	0x1
 4784 0aad 9D03     		.2byte	0x39d
 4785 0aaf F5000000 		.4byte	0xf5
 4786 0ab3 02       		.uleb128 0x2
 4787 0ab4 91       		.byte	0x91
 4788 0ab5 44       		.sleb128 -60
 4789 0ab6 1A       		.uleb128 0x1a
 4790 0ab7 616C7400 		.ascii	"alt\000"
 4791 0abb 01       		.byte	0x1
 4792 0abc 9E03     		.2byte	0x39e
 4793 0abe F5000000 		.4byte	0xf5
 4794 0ac2 02       		.uleb128 0x2
 4795 0ac3 91       		.byte	0x91
 4796 0ac4 40       		.sleb128 -64
 4797 0ac5 1A       		.uleb128 0x1a
 4798 0ac6 733100   		.ascii	"s1\000"
 4799 0ac9 01       		.byte	0x1
 4800 0aca A203     		.2byte	0x3a2
 4801 0acc 18010000 		.4byte	0x118
 4802 0ad0 02       		.uleb128 0x2
 4803 0ad1 91       		.byte	0x91
 4804 0ad2 60       		.sleb128 -32
 4805 0ad3 1C       		.uleb128 0x1c
 4806 0ad4 4F060000 		.4byte	.LASF115
 4807 0ad8 01       		.byte	0x1
 4808 0ad9 A503     		.2byte	0x3a5
 4809 0adb 7E000000 		.4byte	0x7e
 4810 0adf 02       		.uleb128 0x2
 4811 0ae0 91       		.byte	0x91
 4812 0ae1 5C       		.sleb128 -36
 4813 0ae2 14       		.uleb128 0x14
 4814 0ae3 B4000000 		.4byte	.LBB14
 4815 0ae7 38000000 		.4byte	.LBE14-.LBB14
 4816 0aeb 1A       		.uleb128 0x1a
 4817 0aec 6900     		.ascii	"i\000"
 4818 0aee 01       		.byte	0x1
 4819 0aef 9103     		.2byte	0x391
 4820 0af1 B9000000 		.4byte	0xb9
 4821 0af5 02       		.uleb128 0x2
 4822 0af6 91       		.byte	0x91
 4823 0af7 6E       		.sleb128 -18
 4824 0af8 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 109


 4825 0af9 00       		.byte	0
 4826 0afa 24       		.uleb128 0x24
 4827 0afb 8F010000 		.4byte	.LASF152
 4828 0aff 0A       		.byte	0xa
 4829 0b00 1207     		.2byte	0x712
 4830 0b02 060B0000 		.4byte	0xb06
 4831 0b06 0F       		.uleb128 0xf
 4832 0b07 97000000 		.4byte	0x97
 4833 0b0b 25       		.uleb128 0x25
 4834 0b0c 6C000000 		.4byte	.LASF153
 4835 0b10 07       		.byte	0x7
 4836 0b11 11       		.byte	0x11
 4837 0b12 C3030000 		.4byte	0x3c3
 4838 0b16 05       		.uleb128 0x5
 4839 0b17 03       		.byte	0x3
 4840 0b18 00000000 		.4byte	buffer_overflow
 4841 0b1c 25       		.uleb128 0x25
 4842 0b1d A8050000 		.4byte	.LASF154
 4843 0b21 07       		.byte	0x7
 4844 0b22 22       		.byte	0x22
 4845 0b23 B9000000 		.4byte	0xb9
 4846 0b27 05       		.uleb128 0x5
 4847 0b28 03       		.byte	0x3
 4848 0b29 00000000 		.4byte	dataPointsInStack
 4849 0b2d 25       		.uleb128 0x25
 4850 0b2e 6A090000 		.4byte	.LASF155
 4851 0b32 07       		.byte	0x7
 4852 0b33 23       		.byte	0x23
 4853 0b34 B9000000 		.4byte	0xb9
 4854 0b38 05       		.uleb128 0x5
 4855 0b39 03       		.byte	0x3
 4856 0b3a 00000000 		.4byte	dataPointsInStackDesired
 4857 0b3e 08       		.uleb128 0x8
 4858 0b3f 47020000 		.4byte	0x247
 4859 0b43 4E0B0000 		.4byte	0xb4e
 4860 0b47 09       		.uleb128 0x9
 4861 0b48 11010000 		.4byte	0x111
 4862 0b4c 95       		.byte	0x95
 4863 0b4d 00       		.byte	0
 4864 0b4e 25       		.uleb128 0x25
 4865 0b4f 78040000 		.4byte	.LASF156
 4866 0b53 07       		.byte	0x7
 4867 0b54 24       		.byte	0x24
 4868 0b55 3E0B0000 		.4byte	0xb3e
 4869 0b59 05       		.uleb128 0x5
 4870 0b5a 03       		.byte	0x3
 4871 0b5b 00000000 		.4byte	data
 4872 0b5f 25       		.uleb128 0x25
 4873 0b60 71010000 		.4byte	.LASF157
 4874 0b64 08       		.byte	0x8
 4875 0b65 20       		.byte	0x20
 4876 0b66 AD000000 		.4byte	0xad
 4877 0b6a 05       		.uleb128 0x5
 4878 0b6b 03       		.byte	0x3
 4879 0b6c 00000000 		.4byte	modem_state
 4880 0b70 25       		.uleb128 0x25
 4881 0b71 7F080000 		.4byte	.LASF158
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 110


 4882 0b75 08       		.byte	0x8
 4883 0b76 6C       		.byte	0x6c
 4884 0b77 DD000000 		.4byte	0xdd
 4885 0b7b 05       		.uleb128 0x5
 4886 0b7c 03       		.byte	0x3
 4887 0b7d 00000000 		.4byte	modem_start_time_stamp
 4888 0b81 25       		.uleb128 0x25
 4889 0b82 8E040000 		.4byte	.LASF76
 4890 0b86 08       		.byte	0x8
 4891 0b87 6D       		.byte	0x6d
 4892 0b88 7F020000 		.4byte	0x27f
 4893 0b8c 05       		.uleb128 0x5
 4894 0b8d 03       		.byte	0x3
 4895 0b8e 00000000 		.4byte	modem_info
 4896 0b92 25       		.uleb128 0x25
 4897 0b93 AE010000 		.4byte	.LASF159
 4898 0b97 08       		.byte	0x8
 4899 0b98 6E       		.byte	0x6e
 4900 0b99 F3020000 		.4byte	0x2f3
 4901 0b9d 05       		.uleb128 0x5
 4902 0b9e 03       		.byte	0x3
 4903 0b9f 00000000 		.4byte	modem_stats
 4904 0ba3 25       		.uleb128 0x25
 4905 0ba4 55060000 		.4byte	.LASF160
 4906 0ba8 08       		.byte	0x8
 4907 0ba9 6F       		.byte	0x6f
 4908 0baa CA030000 		.4byte	0x3ca
 4909 0bae 05       		.uleb128 0x5
 4910 0baf 03       		.byte	0x3
 4911 0bb0 00000000 		.4byte	updatable_parameters
 4912 0bb4 25       		.uleb128 0x25
 4913 0bb5 CB070000 		.4byte	.LASF161
 4914 0bb9 0B       		.byte	0xb
 4915 0bba 25       		.byte	0x25
 4916 0bbb 71040000 		.4byte	0x471
 4917 0bbf 05       		.uleb128 0x5
 4918 0bc0 03       		.byte	0x3
 4919 0bc1 00000000 		.4byte	level_sensor_inbox
 4920 0bc5 25       		.uleb128 0x25
 4921 0bc6 55090000 		.4byte	.LASF162
 4922 0bca 0B       		.byte	0xb
 4923 0bcb 27       		.byte	0x27
 4924 0bcc C3030000 		.4byte	0x3c3
 4925 0bd0 05       		.uleb128 0x5
 4926 0bd1 03       		.byte	0x3
 4927 0bd2 00000000 		.4byte	level_sensor_enabled
 4928 0bd6 25       		.uleb128 0x25
 4929 0bd7 540A0000 		.4byte	.LASF163
 4930 0bdb 0C       		.byte	0xc
 4931 0bdc 0F       		.byte	0xf
 4932 0bdd 71040000 		.4byte	0x471
 4933 0be1 05       		.uleb128 0x5
 4934 0be2 03       		.byte	0x3
 4935 0be3 00000000 		.4byte	downstream_level_sensor_inbox
 4936 0be7 25       		.uleb128 0x25
 4937 0be8 49050000 		.4byte	.LASF164
 4938 0bec 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 111


 4939 0bed 11       		.byte	0x11
 4940 0bee C3030000 		.4byte	0x3c3
 4941 0bf2 05       		.uleb128 0x5
 4942 0bf3 03       		.byte	0x3
 4943 0bf4 00000000 		.4byte	downstream_level_sensor_enabled
 4944 0bf8 25       		.uleb128 0x25
 4945 0bf9 4E020000 		.4byte	.LASF165
 4946 0bfd 0D       		.byte	0xd
 4947 0bfe 2A       		.byte	0x2a
 4948 0bff E9000000 		.4byte	0xe9
 4949 0c03 05       		.uleb128 0x5
 4950 0c04 03       		.byte	0x3
 4951 0c05 00000000 		.4byte	valve_diameter
 4952 0c09 25       		.uleb128 0x25
 4953 0c0a 9E000000 		.4byte	.LASF166
 4954 0c0e 0D       		.byte	0xd
 4955 0c0f 2B       		.byte	0x2b
 4956 0c10 46070000 		.4byte	0x746
 4957 0c14 05       		.uleb128 0x5
 4958 0c15 03       		.byte	0x3
 4959 0c16 00000000 		.4byte	valve_type
 4960 0c1a 25       		.uleb128 0x25
 4961 0c1b 0F090000 		.4byte	.LASF167
 4962 0c1f 0D       		.byte	0xd
 4963 0c20 30       		.byte	0x30
 4964 0c21 AD000000 		.4byte	0xad
 4965 0c25 05       		.uleb128 0x5
 4966 0c26 03       		.byte	0x3
 4967 0c27 00000000 		.4byte	valve_enabled
 4968 0c2b 25       		.uleb128 0x25
 4969 0c2c C4090000 		.4byte	.LASF168
 4970 0c30 0D       		.byte	0xd
 4971 0c31 31       		.byte	0x31
 4972 0c32 71040000 		.4byte	0x471
 4973 0c36 05       		.uleb128 0x5
 4974 0c37 03       		.byte	0x3
 4975 0c38 00000000 		.4byte	valve_inbox
 4976 0c3c 25       		.uleb128 0x25
 4977 0c3d FB030000 		.4byte	.LASF169
 4978 0c41 0E       		.byte	0xe
 4979 0c42 07       		.byte	0x7
 4980 0c43 AD000000 		.4byte	0xad
 4981 0c47 05       		.uleb128 0x5
 4982 0c48 03       		.byte	0x3
 4983 0c49 00000000 		.4byte	App_LED_enabled
 4984 0c4d 25       		.uleb128 0x25
 4985 0c4e 460A0000 		.4byte	.LASF170
 4986 0c52 0E       		.byte	0xe
 4987 0c53 08       		.byte	0x8
 4988 0c54 71040000 		.4byte	0x471
 4989 0c58 05       		.uleb128 0x5
 4990 0c59 03       		.byte	0x3
 4991 0c5a 00000000 		.4byte	app_led_inbox
 4992 0c5e 08       		.uleb128 0x8
 4993 0c5f 03010000 		.4byte	0x103
 4994 0c63 6F0C0000 		.4byte	0xc6f
 4995 0c67 26       		.uleb128 0x26
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 112


 4996 0c68 11010000 		.4byte	0x111
 4997 0c6c 0F27     		.2byte	0x270f
 4998 0c6e 00       		.byte	0
 4999 0c6f 25       		.uleb128 0x25
 5000 0c70 210A0000 		.4byte	.LASF171
 5001 0c74 09       		.byte	0x9
 5002 0c75 1A       		.byte	0x1a
 5003 0c76 5E0C0000 		.4byte	0xc5e
 5004 0c7a 05       		.uleb128 0x5
 5005 0c7b 03       		.byte	0x3
 5006 0c7c 00000000 		.4byte	http_request
 5007 0c80 25       		.uleb128 0x25
 5008 0c81 29020000 		.4byte	.LASF172
 5009 0c85 09       		.byte	0x9
 5010 0c86 1B       		.byte	0x1b
 5011 0c87 5E0C0000 		.4byte	0xc5e
 5012 0c8b 05       		.uleb128 0x5
 5013 0c8c 03       		.byte	0x3
 5014 0c8d 00000000 		.4byte	http_body
 5015 0c91 25       		.uleb128 0x25
 5016 0c92 29080000 		.4byte	.LASF173
 5017 0c96 09       		.byte	0x9
 5018 0c97 1C       		.byte	0x1c
 5019 0c98 0B090000 		.4byte	0x90b
 5020 0c9c 05       		.uleb128 0x5
 5021 0c9d 03       		.byte	0x3
 5022 0c9e 00000000 		.4byte	http_route
 5023 0ca2 25       		.uleb128 0x25
 5024 0ca3 4C070000 		.4byte	.LASF174
 5025 0ca7 09       		.byte	0x9
 5026 0ca8 43       		.byte	0x43
 5027 0ca9 45040000 		.4byte	0x445
 5028 0cad 05       		.uleb128 0x5
 5029 0cae 03       		.byte	0x3
 5030 0caf 00000000 		.4byte	system_info
 5031 0cb3 25       		.uleb128 0x25
 5032 0cb4 F5060000 		.4byte	.LASF175
 5033 0cb8 09       		.byte	0x9
 5034 0cb9 55       		.byte	0x55
 5035 0cba 81040000 		.4byte	0x481
 5036 0cbe 05       		.uleb128 0x5
 5037 0cbf 03       		.byte	0x3
 5038 0cc0 00000000 		.4byte	system_settings
 5039 0cc4 25       		.uleb128 0x25
 5040 0cc5 82010000 		.4byte	.LASF176
 5041 0cc9 09       		.byte	0x9
 5042 0cca 71       		.byte	0x71
 5043 0ccb 0E040000 		.4byte	0x40e
 5044 0ccf 05       		.uleb128 0x5
 5045 0cd0 03       		.byte	0x3
 5046 0cd1 00000000 		.4byte	alarmMeasure
 5047 0cd5 25       		.uleb128 0x25
 5048 0cd6 E8010000 		.4byte	.LASF177
 5049 0cda 09       		.byte	0x9
 5050 0cdb 72       		.byte	0x72
 5051 0cdc AD000000 		.4byte	0xad
 5052 0ce0 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 113


 5053 0ce1 03       		.byte	0x3
 5054 0ce2 00000000 		.4byte	timeToMeasure
 5055 0ce6 25       		.uleb128 0x25
 5056 0ce7 F1030000 		.4byte	.LASF178
 5057 0ceb 09       		.byte	0x9
 5058 0cec 73       		.byte	0x73
 5059 0ced 0E040000 		.4byte	0x40e
 5060 0cf1 05       		.uleb128 0x5
 5061 0cf2 03       		.byte	0x3
 5062 0cf3 00000000 		.4byte	alarmSync
 5063 0cf7 25       		.uleb128 0x25
 5064 0cf8 0E020000 		.4byte	.LASF179
 5065 0cfc 09       		.byte	0x9
 5066 0cfd 74       		.byte	0x74
 5067 0cfe AD000000 		.4byte	0xad
 5068 0d02 05       		.uleb128 0x5
 5069 0d03 03       		.byte	0x3
 5070 0d04 00000000 		.4byte	timeToSync
 5071 0d08 25       		.uleb128 0x25
 5072 0d09 2D060000 		.4byte	.LASF180
 5073 0d0d 09       		.byte	0x9
 5074 0d0e 75       		.byte	0x75
 5075 0d0f AD000000 		.4byte	0xad
 5076 0d13 05       		.uleb128 0x5
 5077 0d14 03       		.byte	0x3
 5078 0d15 00000000 		.4byte	timeToSycnRemoteParams
 5079 0d19 27       		.uleb128 0x27
 5080 0d1a 68657900 		.ascii	"hey\000"
 5081 0d1e 09       		.byte	0x9
 5082 0d1f 76       		.byte	0x76
 5083 0d20 AD000000 		.4byte	0xad
 5084 0d24 05       		.uleb128 0x5
 5085 0d25 03       		.byte	0x3
 5086 0d26 00000000 		.4byte	hey
 5087 0d2a 25       		.uleb128 0x25
 5088 0d2b 15050000 		.4byte	.LASF181
 5089 0d2f 09       		.byte	0x9
 5090 0d30 7A       		.byte	0x7a
 5091 0d31 0E040000 		.4byte	0x40e
 5092 0d35 05       		.uleb128 0x5
 5093 0d36 03       		.byte	0x3
 5094 0d37 00000000 		.4byte	alarmAppLED
 5095 0d3b 25       		.uleb128 0x25
 5096 0d3c DF020000 		.4byte	.LASF182
 5097 0d40 09       		.byte	0x9
 5098 0d41 7B       		.byte	0x7b
 5099 0d42 AD000000 		.4byte	0xad
 5100 0d46 05       		.uleb128 0x5
 5101 0d47 03       		.byte	0x3
 5102 0d48 00000000 		.4byte	timeToAppLED
 5103 0d4c 25       		.uleb128 0x25
 5104 0d4d 89070000 		.4byte	.LASF183
 5105 0d51 09       		.byte	0x9
 5106 0d52 7D       		.byte	0x7d
 5107 0d53 0E040000 		.4byte	0x40e
 5108 0d57 05       		.uleb128 0x5
 5109 0d58 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 114


 5110 0d59 00000000 		.4byte	alarmLevelSensor
 5111 0d5d 25       		.uleb128 0x25
 5112 0d5e 9C010000 		.4byte	.LASF184
 5113 0d62 09       		.byte	0x9
 5114 0d63 7E       		.byte	0x7e
 5115 0d64 AD000000 		.4byte	0xad
 5116 0d68 05       		.uleb128 0x5
 5117 0d69 03       		.byte	0x3
 5118 0d6a 00000000 		.4byte	timetoLevelSensor
 5119 0d6e 25       		.uleb128 0x25
 5120 0d6f 69020000 		.4byte	.LASF185
 5121 0d73 09       		.byte	0x9
 5122 0d74 80       		.byte	0x80
 5123 0d75 0E040000 		.4byte	0x40e
 5124 0d79 05       		.uleb128 0x5
 5125 0d7a 03       		.byte	0x3
 5126 0d7b 00000000 		.4byte	alarmDownstreamLevelSensor
 5127 0d7f 25       		.uleb128 0x25
 5128 0d80 88030000 		.4byte	.LASF186
 5129 0d84 09       		.byte	0x9
 5130 0d85 81       		.byte	0x81
 5131 0d86 AD000000 		.4byte	0xad
 5132 0d8a 05       		.uleb128 0x5
 5133 0d8b 03       		.byte	0x3
 5134 0d8c 00000000 		.4byte	timetoDownstreamLevelSensor
 5135 0d90 25       		.uleb128 0x25
 5136 0d91 15080000 		.4byte	.LASF187
 5137 0d95 09       		.byte	0x9
 5138 0d96 83       		.byte	0x83
 5139 0d97 0E040000 		.4byte	0x40e
 5140 0d9b 05       		.uleb128 0x5
 5141 0d9c 03       		.byte	0x3
 5142 0d9d 00000000 		.4byte	alarmValve
 5143 0da1 25       		.uleb128 0x25
 5144 0da2 00000000 		.4byte	.LASF188
 5145 0da6 09       		.byte	0x9
 5146 0da7 84       		.byte	0x84
 5147 0da8 AD000000 		.4byte	0xad
 5148 0dac 05       		.uleb128 0x5
 5149 0dad 03       		.byte	0x3
 5150 0dae 00000000 		.4byte	timeToValve
 5151 0db2 08       		.uleb128 0x8
 5152 0db3 03010000 		.4byte	0x103
 5153 0db7 C30D0000 		.4byte	0xdc3
 5154 0dbb 26       		.uleb128 0x26
 5155 0dbc 11010000 		.4byte	0x111
 5156 0dc0 FF03     		.2byte	0x3ff
 5157 0dc2 00       		.byte	0
 5158 0dc3 25       		.uleb128 0x25
 5159 0dc4 96080000 		.4byte	.LASF189
 5160 0dc8 01       		.byte	0x1
 5161 0dc9 05       		.byte	0x5
 5162 0dca B20D0000 		.4byte	0xdb2
 5163 0dce 05       		.uleb128 0x5
 5164 0dcf 03       		.byte	0x3
 5165 0dd0 00000000 		.4byte	uart_received_string
 5166 0dd4 25       		.uleb128 0x25
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 115


 5167 0dd5 47080000 		.4byte	.LASF190
 5168 0dd9 01       		.byte	0x1
 5169 0dda 06       		.byte	0x6
 5170 0ddb D1000000 		.4byte	0xd1
 5171 0ddf 05       		.uleb128 0x5
 5172 0de0 03       		.byte	0x3
 5173 0de1 00000000 		.4byte	uart_string_index
 5174 0de5 00       		.byte	0
 5175              		.section	.debug_abbrev,"",%progbits
 5176              	.Ldebug_abbrev0:
 5177 0000 01       		.uleb128 0x1
 5178 0001 11       		.uleb128 0x11
 5179 0002 01       		.byte	0x1
 5180 0003 25       		.uleb128 0x25
 5181 0004 0E       		.uleb128 0xe
 5182 0005 13       		.uleb128 0x13
 5183 0006 0B       		.uleb128 0xb
 5184 0007 03       		.uleb128 0x3
 5185 0008 0E       		.uleb128 0xe
 5186 0009 1B       		.uleb128 0x1b
 5187 000a 0E       		.uleb128 0xe
 5188 000b 55       		.uleb128 0x55
 5189 000c 17       		.uleb128 0x17
 5190 000d 11       		.uleb128 0x11
 5191 000e 01       		.uleb128 0x1
 5192 000f 10       		.uleb128 0x10
 5193 0010 17       		.uleb128 0x17
 5194 0011 00       		.byte	0
 5195 0012 00       		.byte	0
 5196 0013 02       		.uleb128 0x2
 5197 0014 24       		.uleb128 0x24
 5198 0015 00       		.byte	0
 5199 0016 0B       		.uleb128 0xb
 5200 0017 0B       		.uleb128 0xb
 5201 0018 3E       		.uleb128 0x3e
 5202 0019 0B       		.uleb128 0xb
 5203 001a 03       		.uleb128 0x3
 5204 001b 0E       		.uleb128 0xe
 5205 001c 00       		.byte	0
 5206 001d 00       		.byte	0
 5207 001e 03       		.uleb128 0x3
 5208 001f 16       		.uleb128 0x16
 5209 0020 00       		.byte	0
 5210 0021 03       		.uleb128 0x3
 5211 0022 0E       		.uleb128 0xe
 5212 0023 3A       		.uleb128 0x3a
 5213 0024 0B       		.uleb128 0xb
 5214 0025 3B       		.uleb128 0x3b
 5215 0026 0B       		.uleb128 0xb
 5216 0027 49       		.uleb128 0x49
 5217 0028 13       		.uleb128 0x13
 5218 0029 00       		.byte	0
 5219 002a 00       		.byte	0
 5220 002b 04       		.uleb128 0x4
 5221 002c 24       		.uleb128 0x24
 5222 002d 00       		.byte	0
 5223 002e 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 116


 5224 002f 0B       		.uleb128 0xb
 5225 0030 3E       		.uleb128 0x3e
 5226 0031 0B       		.uleb128 0xb
 5227 0032 03       		.uleb128 0x3
 5228 0033 08       		.uleb128 0x8
 5229 0034 00       		.byte	0
 5230 0035 00       		.byte	0
 5231 0036 05       		.uleb128 0x5
 5232 0037 16       		.uleb128 0x16
 5233 0038 00       		.byte	0
 5234 0039 03       		.uleb128 0x3
 5235 003a 0E       		.uleb128 0xe
 5236 003b 3A       		.uleb128 0x3a
 5237 003c 0B       		.uleb128 0xb
 5238 003d 3B       		.uleb128 0x3b
 5239 003e 05       		.uleb128 0x5
 5240 003f 49       		.uleb128 0x49
 5241 0040 13       		.uleb128 0x13
 5242 0041 00       		.byte	0
 5243 0042 00       		.byte	0
 5244 0043 06       		.uleb128 0x6
 5245 0044 0F       		.uleb128 0xf
 5246 0045 00       		.byte	0
 5247 0046 0B       		.uleb128 0xb
 5248 0047 0B       		.uleb128 0xb
 5249 0048 49       		.uleb128 0x49
 5250 0049 13       		.uleb128 0x13
 5251 004a 00       		.byte	0
 5252 004b 00       		.byte	0
 5253 004c 07       		.uleb128 0x7
 5254 004d 26       		.uleb128 0x26
 5255 004e 00       		.byte	0
 5256 004f 49       		.uleb128 0x49
 5257 0050 13       		.uleb128 0x13
 5258 0051 00       		.byte	0
 5259 0052 00       		.byte	0
 5260 0053 08       		.uleb128 0x8
 5261 0054 01       		.uleb128 0x1
 5262 0055 01       		.byte	0x1
 5263 0056 49       		.uleb128 0x49
 5264 0057 13       		.uleb128 0x13
 5265 0058 01       		.uleb128 0x1
 5266 0059 13       		.uleb128 0x13
 5267 005a 00       		.byte	0
 5268 005b 00       		.byte	0
 5269 005c 09       		.uleb128 0x9
 5270 005d 21       		.uleb128 0x21
 5271 005e 00       		.byte	0
 5272 005f 49       		.uleb128 0x49
 5273 0060 13       		.uleb128 0x13
 5274 0061 2F       		.uleb128 0x2f
 5275 0062 0B       		.uleb128 0xb
 5276 0063 00       		.byte	0
 5277 0064 00       		.byte	0
 5278 0065 0A       		.uleb128 0xa
 5279 0066 13       		.uleb128 0x13
 5280 0067 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 117


 5281 0068 03       		.uleb128 0x3
 5282 0069 08       		.uleb128 0x8
 5283 006a 0B       		.uleb128 0xb
 5284 006b 0B       		.uleb128 0xb
 5285 006c 3A       		.uleb128 0x3a
 5286 006d 0B       		.uleb128 0xb
 5287 006e 3B       		.uleb128 0x3b
 5288 006f 0B       		.uleb128 0xb
 5289 0070 01       		.uleb128 0x1
 5290 0071 13       		.uleb128 0x13
 5291 0072 00       		.byte	0
 5292 0073 00       		.byte	0
 5293 0074 0B       		.uleb128 0xb
 5294 0075 0D       		.uleb128 0xd
 5295 0076 00       		.byte	0
 5296 0077 03       		.uleb128 0x3
 5297 0078 0E       		.uleb128 0xe
 5298 0079 3A       		.uleb128 0x3a
 5299 007a 0B       		.uleb128 0xb
 5300 007b 3B       		.uleb128 0x3b
 5301 007c 0B       		.uleb128 0xb
 5302 007d 49       		.uleb128 0x49
 5303 007e 13       		.uleb128 0x13
 5304 007f 38       		.uleb128 0x38
 5305 0080 0B       		.uleb128 0xb
 5306 0081 00       		.byte	0
 5307 0082 00       		.byte	0
 5308 0083 0C       		.uleb128 0xc
 5309 0084 13       		.uleb128 0x13
 5310 0085 01       		.byte	0x1
 5311 0086 0B       		.uleb128 0xb
 5312 0087 05       		.uleb128 0x5
 5313 0088 3A       		.uleb128 0x3a
 5314 0089 0B       		.uleb128 0xb
 5315 008a 3B       		.uleb128 0x3b
 5316 008b 0B       		.uleb128 0xb
 5317 008c 01       		.uleb128 0x1
 5318 008d 13       		.uleb128 0x13
 5319 008e 00       		.byte	0
 5320 008f 00       		.byte	0
 5321 0090 0D       		.uleb128 0xd
 5322 0091 13       		.uleb128 0x13
 5323 0092 01       		.byte	0x1
 5324 0093 0B       		.uleb128 0xb
 5325 0094 0B       		.uleb128 0xb
 5326 0095 3A       		.uleb128 0x3a
 5327 0096 0B       		.uleb128 0xb
 5328 0097 3B       		.uleb128 0x3b
 5329 0098 0B       		.uleb128 0xb
 5330 0099 01       		.uleb128 0x1
 5331 009a 13       		.uleb128 0x13
 5332 009b 00       		.byte	0
 5333 009c 00       		.byte	0
 5334 009d 0E       		.uleb128 0xe
 5335 009e 0D       		.uleb128 0xd
 5336 009f 00       		.byte	0
 5337 00a0 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 118


 5338 00a1 08       		.uleb128 0x8
 5339 00a2 3A       		.uleb128 0x3a
 5340 00a3 0B       		.uleb128 0xb
 5341 00a4 3B       		.uleb128 0x3b
 5342 00a5 0B       		.uleb128 0xb
 5343 00a6 49       		.uleb128 0x49
 5344 00a7 13       		.uleb128 0x13
 5345 00a8 38       		.uleb128 0x38
 5346 00a9 0B       		.uleb128 0xb
 5347 00aa 00       		.byte	0
 5348 00ab 00       		.byte	0
 5349 00ac 0F       		.uleb128 0xf
 5350 00ad 35       		.uleb128 0x35
 5351 00ae 00       		.byte	0
 5352 00af 49       		.uleb128 0x49
 5353 00b0 13       		.uleb128 0x13
 5354 00b1 00       		.byte	0
 5355 00b2 00       		.byte	0
 5356 00b3 10       		.uleb128 0x10
 5357 00b4 2E       		.uleb128 0x2e
 5358 00b5 00       		.byte	0
 5359 00b6 3F       		.uleb128 0x3f
 5360 00b7 19       		.uleb128 0x19
 5361 00b8 03       		.uleb128 0x3
 5362 00b9 0E       		.uleb128 0xe
 5363 00ba 3A       		.uleb128 0x3a
 5364 00bb 0B       		.uleb128 0xb
 5365 00bc 3B       		.uleb128 0x3b
 5366 00bd 0B       		.uleb128 0xb
 5367 00be 27       		.uleb128 0x27
 5368 00bf 19       		.uleb128 0x19
 5369 00c0 11       		.uleb128 0x11
 5370 00c1 01       		.uleb128 0x1
 5371 00c2 12       		.uleb128 0x12
 5372 00c3 06       		.uleb128 0x6
 5373 00c4 40       		.uleb128 0x40
 5374 00c5 18       		.uleb128 0x18
 5375 00c6 9642     		.uleb128 0x2116
 5376 00c8 19       		.uleb128 0x19
 5377 00c9 00       		.byte	0
 5378 00ca 00       		.byte	0
 5379 00cb 11       		.uleb128 0x11
 5380 00cc 2E       		.uleb128 0x2e
 5381 00cd 00       		.byte	0
 5382 00ce 3F       		.uleb128 0x3f
 5383 00cf 19       		.uleb128 0x19
 5384 00d0 03       		.uleb128 0x3
 5385 00d1 0E       		.uleb128 0xe
 5386 00d2 3A       		.uleb128 0x3a
 5387 00d3 0B       		.uleb128 0xb
 5388 00d4 3B       		.uleb128 0x3b
 5389 00d5 0B       		.uleb128 0xb
 5390 00d6 11       		.uleb128 0x11
 5391 00d7 01       		.uleb128 0x1
 5392 00d8 12       		.uleb128 0x12
 5393 00d9 06       		.uleb128 0x6
 5394 00da 40       		.uleb128 0x40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 119


 5395 00db 18       		.uleb128 0x18
 5396 00dc 9642     		.uleb128 0x2116
 5397 00de 19       		.uleb128 0x19
 5398 00df 00       		.byte	0
 5399 00e0 00       		.byte	0
 5400 00e1 12       		.uleb128 0x12
 5401 00e2 2E       		.uleb128 0x2e
 5402 00e3 01       		.byte	0x1
 5403 00e4 3F       		.uleb128 0x3f
 5404 00e5 19       		.uleb128 0x19
 5405 00e6 03       		.uleb128 0x3
 5406 00e7 0E       		.uleb128 0xe
 5407 00e8 3A       		.uleb128 0x3a
 5408 00e9 0B       		.uleb128 0xb
 5409 00ea 3B       		.uleb128 0x3b
 5410 00eb 0B       		.uleb128 0xb
 5411 00ec 49       		.uleb128 0x49
 5412 00ed 13       		.uleb128 0x13
 5413 00ee 11       		.uleb128 0x11
 5414 00ef 01       		.uleb128 0x1
 5415 00f0 12       		.uleb128 0x12
 5416 00f1 06       		.uleb128 0x6
 5417 00f2 40       		.uleb128 0x40
 5418 00f3 18       		.uleb128 0x18
 5419 00f4 9642     		.uleb128 0x2116
 5420 00f6 19       		.uleb128 0x19
 5421 00f7 01       		.uleb128 0x1
 5422 00f8 13       		.uleb128 0x13
 5423 00f9 00       		.byte	0
 5424 00fa 00       		.byte	0
 5425 00fb 13       		.uleb128 0x13
 5426 00fc 34       		.uleb128 0x34
 5427 00fd 00       		.byte	0
 5428 00fe 03       		.uleb128 0x3
 5429 00ff 0E       		.uleb128 0xe
 5430 0100 3A       		.uleb128 0x3a
 5431 0101 0B       		.uleb128 0xb
 5432 0102 3B       		.uleb128 0x3b
 5433 0103 0B       		.uleb128 0xb
 5434 0104 49       		.uleb128 0x49
 5435 0105 13       		.uleb128 0x13
 5436 0106 02       		.uleb128 0x2
 5437 0107 18       		.uleb128 0x18
 5438 0108 00       		.byte	0
 5439 0109 00       		.byte	0
 5440 010a 14       		.uleb128 0x14
 5441 010b 0B       		.uleb128 0xb
 5442 010c 01       		.byte	0x1
 5443 010d 11       		.uleb128 0x11
 5444 010e 01       		.uleb128 0x1
 5445 010f 12       		.uleb128 0x12
 5446 0110 06       		.uleb128 0x6
 5447 0111 00       		.byte	0
 5448 0112 00       		.byte	0
 5449 0113 15       		.uleb128 0x15
 5450 0114 2E       		.uleb128 0x2e
 5451 0115 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 120


 5452 0116 3F       		.uleb128 0x3f
 5453 0117 19       		.uleb128 0x19
 5454 0118 03       		.uleb128 0x3
 5455 0119 0E       		.uleb128 0xe
 5456 011a 3A       		.uleb128 0x3a
 5457 011b 0B       		.uleb128 0xb
 5458 011c 3B       		.uleb128 0x3b
 5459 011d 0B       		.uleb128 0xb
 5460 011e 27       		.uleb128 0x27
 5461 011f 19       		.uleb128 0x19
 5462 0120 49       		.uleb128 0x49
 5463 0121 13       		.uleb128 0x13
 5464 0122 11       		.uleb128 0x11
 5465 0123 01       		.uleb128 0x1
 5466 0124 12       		.uleb128 0x12
 5467 0125 06       		.uleb128 0x6
 5468 0126 40       		.uleb128 0x40
 5469 0127 18       		.uleb128 0x18
 5470 0128 9642     		.uleb128 0x2116
 5471 012a 19       		.uleb128 0x19
 5472 012b 01       		.uleb128 0x1
 5473 012c 13       		.uleb128 0x13
 5474 012d 00       		.byte	0
 5475 012e 00       		.byte	0
 5476 012f 16       		.uleb128 0x16
 5477 0130 05       		.uleb128 0x5
 5478 0131 00       		.byte	0
 5479 0132 03       		.uleb128 0x3
 5480 0133 0E       		.uleb128 0xe
 5481 0134 3A       		.uleb128 0x3a
 5482 0135 0B       		.uleb128 0xb
 5483 0136 3B       		.uleb128 0x3b
 5484 0137 0B       		.uleb128 0xb
 5485 0138 49       		.uleb128 0x49
 5486 0139 13       		.uleb128 0x13
 5487 013a 02       		.uleb128 0x2
 5488 013b 18       		.uleb128 0x18
 5489 013c 00       		.byte	0
 5490 013d 00       		.byte	0
 5491 013e 17       		.uleb128 0x17
 5492 013f 34       		.uleb128 0x34
 5493 0140 00       		.byte	0
 5494 0141 03       		.uleb128 0x3
 5495 0142 08       		.uleb128 0x8
 5496 0143 3A       		.uleb128 0x3a
 5497 0144 0B       		.uleb128 0xb
 5498 0145 3B       		.uleb128 0x3b
 5499 0146 0B       		.uleb128 0xb
 5500 0147 49       		.uleb128 0x49
 5501 0148 13       		.uleb128 0x13
 5502 0149 02       		.uleb128 0x2
 5503 014a 18       		.uleb128 0x18
 5504 014b 00       		.byte	0
 5505 014c 00       		.byte	0
 5506 014d 18       		.uleb128 0x18
 5507 014e 2E       		.uleb128 0x2e
 5508 014f 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 121


 5509 0150 3F       		.uleb128 0x3f
 5510 0151 19       		.uleb128 0x19
 5511 0152 03       		.uleb128 0x3
 5512 0153 0E       		.uleb128 0xe
 5513 0154 3A       		.uleb128 0x3a
 5514 0155 0B       		.uleb128 0xb
 5515 0156 3B       		.uleb128 0x3b
 5516 0157 05       		.uleb128 0x5
 5517 0158 27       		.uleb128 0x27
 5518 0159 19       		.uleb128 0x19
 5519 015a 49       		.uleb128 0x49
 5520 015b 13       		.uleb128 0x13
 5521 015c 11       		.uleb128 0x11
 5522 015d 01       		.uleb128 0x1
 5523 015e 12       		.uleb128 0x12
 5524 015f 06       		.uleb128 0x6
 5525 0160 40       		.uleb128 0x40
 5526 0161 18       		.uleb128 0x18
 5527 0162 9642     		.uleb128 0x2116
 5528 0164 19       		.uleb128 0x19
 5529 0165 01       		.uleb128 0x1
 5530 0166 13       		.uleb128 0x13
 5531 0167 00       		.byte	0
 5532 0168 00       		.byte	0
 5533 0169 19       		.uleb128 0x19
 5534 016a 05       		.uleb128 0x5
 5535 016b 00       		.byte	0
 5536 016c 03       		.uleb128 0x3
 5537 016d 0E       		.uleb128 0xe
 5538 016e 3A       		.uleb128 0x3a
 5539 016f 0B       		.uleb128 0xb
 5540 0170 3B       		.uleb128 0x3b
 5541 0171 05       		.uleb128 0x5
 5542 0172 49       		.uleb128 0x49
 5543 0173 13       		.uleb128 0x13
 5544 0174 02       		.uleb128 0x2
 5545 0175 18       		.uleb128 0x18
 5546 0176 00       		.byte	0
 5547 0177 00       		.byte	0
 5548 0178 1A       		.uleb128 0x1a
 5549 0179 34       		.uleb128 0x34
 5550 017a 00       		.byte	0
 5551 017b 03       		.uleb128 0x3
 5552 017c 08       		.uleb128 0x8
 5553 017d 3A       		.uleb128 0x3a
 5554 017e 0B       		.uleb128 0xb
 5555 017f 3B       		.uleb128 0x3b
 5556 0180 05       		.uleb128 0x5
 5557 0181 49       		.uleb128 0x49
 5558 0182 13       		.uleb128 0x13
 5559 0183 02       		.uleb128 0x2
 5560 0184 18       		.uleb128 0x18
 5561 0185 00       		.byte	0
 5562 0186 00       		.byte	0
 5563 0187 1B       		.uleb128 0x1b
 5564 0188 2E       		.uleb128 0x2e
 5565 0189 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 122


 5566 018a 3F       		.uleb128 0x3f
 5567 018b 19       		.uleb128 0x19
 5568 018c 03       		.uleb128 0x3
 5569 018d 0E       		.uleb128 0xe
 5570 018e 3A       		.uleb128 0x3a
 5571 018f 0B       		.uleb128 0xb
 5572 0190 3B       		.uleb128 0x3b
 5573 0191 05       		.uleb128 0x5
 5574 0192 49       		.uleb128 0x49
 5575 0193 13       		.uleb128 0x13
 5576 0194 11       		.uleb128 0x11
 5577 0195 01       		.uleb128 0x1
 5578 0196 12       		.uleb128 0x12
 5579 0197 06       		.uleb128 0x6
 5580 0198 40       		.uleb128 0x40
 5581 0199 18       		.uleb128 0x18
 5582 019a 9642     		.uleb128 0x2116
 5583 019c 19       		.uleb128 0x19
 5584 019d 01       		.uleb128 0x1
 5585 019e 13       		.uleb128 0x13
 5586 019f 00       		.byte	0
 5587 01a0 00       		.byte	0
 5588 01a1 1C       		.uleb128 0x1c
 5589 01a2 34       		.uleb128 0x34
 5590 01a3 00       		.byte	0
 5591 01a4 03       		.uleb128 0x3
 5592 01a5 0E       		.uleb128 0xe
 5593 01a6 3A       		.uleb128 0x3a
 5594 01a7 0B       		.uleb128 0xb
 5595 01a8 3B       		.uleb128 0x3b
 5596 01a9 05       		.uleb128 0x5
 5597 01aa 49       		.uleb128 0x49
 5598 01ab 13       		.uleb128 0x13
 5599 01ac 02       		.uleb128 0x2
 5600 01ad 18       		.uleb128 0x18
 5601 01ae 00       		.byte	0
 5602 01af 00       		.byte	0
 5603 01b0 1D       		.uleb128 0x1d
 5604 01b1 2E       		.uleb128 0x2e
 5605 01b2 00       		.byte	0
 5606 01b3 3F       		.uleb128 0x3f
 5607 01b4 19       		.uleb128 0x19
 5608 01b5 03       		.uleb128 0x3
 5609 01b6 0E       		.uleb128 0xe
 5610 01b7 3A       		.uleb128 0x3a
 5611 01b8 0B       		.uleb128 0xb
 5612 01b9 3B       		.uleb128 0x3b
 5613 01ba 05       		.uleb128 0x5
 5614 01bb 11       		.uleb128 0x11
 5615 01bc 01       		.uleb128 0x1
 5616 01bd 12       		.uleb128 0x12
 5617 01be 06       		.uleb128 0x6
 5618 01bf 40       		.uleb128 0x40
 5619 01c0 18       		.uleb128 0x18
 5620 01c1 9642     		.uleb128 0x2116
 5621 01c3 19       		.uleb128 0x19
 5622 01c4 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 123


 5623 01c5 00       		.byte	0
 5624 01c6 1E       		.uleb128 0x1e
 5625 01c7 2E       		.uleb128 0x2e
 5626 01c8 00       		.byte	0
 5627 01c9 3F       		.uleb128 0x3f
 5628 01ca 19       		.uleb128 0x19
 5629 01cb 03       		.uleb128 0x3
 5630 01cc 0E       		.uleb128 0xe
 5631 01cd 3A       		.uleb128 0x3a
 5632 01ce 0B       		.uleb128 0xb
 5633 01cf 3B       		.uleb128 0x3b
 5634 01d0 05       		.uleb128 0x5
 5635 01d1 49       		.uleb128 0x49
 5636 01d2 13       		.uleb128 0x13
 5637 01d3 11       		.uleb128 0x11
 5638 01d4 01       		.uleb128 0x1
 5639 01d5 12       		.uleb128 0x12
 5640 01d6 06       		.uleb128 0x6
 5641 01d7 40       		.uleb128 0x40
 5642 01d8 18       		.uleb128 0x18
 5643 01d9 9642     		.uleb128 0x2116
 5644 01db 19       		.uleb128 0x19
 5645 01dc 00       		.byte	0
 5646 01dd 00       		.byte	0
 5647 01de 1F       		.uleb128 0x1f
 5648 01df 2E       		.uleb128 0x2e
 5649 01e0 01       		.byte	0x1
 5650 01e1 3F       		.uleb128 0x3f
 5651 01e2 19       		.uleb128 0x19
 5652 01e3 03       		.uleb128 0x3
 5653 01e4 0E       		.uleb128 0xe
 5654 01e5 3A       		.uleb128 0x3a
 5655 01e6 0B       		.uleb128 0xb
 5656 01e7 3B       		.uleb128 0x3b
 5657 01e8 05       		.uleb128 0x5
 5658 01e9 11       		.uleb128 0x11
 5659 01ea 01       		.uleb128 0x1
 5660 01eb 12       		.uleb128 0x12
 5661 01ec 06       		.uleb128 0x6
 5662 01ed 40       		.uleb128 0x40
 5663 01ee 18       		.uleb128 0x18
 5664 01ef 9642     		.uleb128 0x2116
 5665 01f1 19       		.uleb128 0x19
 5666 01f2 01       		.uleb128 0x1
 5667 01f3 13       		.uleb128 0x13
 5668 01f4 00       		.byte	0
 5669 01f5 00       		.byte	0
 5670 01f6 20       		.uleb128 0x20
 5671 01f7 2E       		.uleb128 0x2e
 5672 01f8 00       		.byte	0
 5673 01f9 3F       		.uleb128 0x3f
 5674 01fa 19       		.uleb128 0x19
 5675 01fb 03       		.uleb128 0x3
 5676 01fc 0E       		.uleb128 0xe
 5677 01fd 3A       		.uleb128 0x3a
 5678 01fe 0B       		.uleb128 0xb
 5679 01ff 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 124


 5680 0200 05       		.uleb128 0x5
 5681 0201 11       		.uleb128 0x11
 5682 0202 01       		.uleb128 0x1
 5683 0203 12       		.uleb128 0x12
 5684 0204 06       		.uleb128 0x6
 5685 0205 40       		.uleb128 0x40
 5686 0206 18       		.uleb128 0x18
 5687 0207 9742     		.uleb128 0x2117
 5688 0209 19       		.uleb128 0x19
 5689 020a 00       		.byte	0
 5690 020b 00       		.byte	0
 5691 020c 21       		.uleb128 0x21
 5692 020d 34       		.uleb128 0x34
 5693 020e 00       		.byte	0
 5694 020f 03       		.uleb128 0x3
 5695 0210 0E       		.uleb128 0xe
 5696 0211 3A       		.uleb128 0x3a
 5697 0212 0B       		.uleb128 0xb
 5698 0213 3B       		.uleb128 0x3b
 5699 0214 05       		.uleb128 0x5
 5700 0215 49       		.uleb128 0x49
 5701 0216 13       		.uleb128 0x13
 5702 0217 00       		.byte	0
 5703 0218 00       		.byte	0
 5704 0219 22       		.uleb128 0x22
 5705 021a 0B       		.uleb128 0xb
 5706 021b 01       		.byte	0x1
 5707 021c 55       		.uleb128 0x55
 5708 021d 17       		.uleb128 0x17
 5709 021e 00       		.byte	0
 5710 021f 00       		.byte	0
 5711 0220 23       		.uleb128 0x23
 5712 0221 2E       		.uleb128 0x2e
 5713 0222 00       		.byte	0
 5714 0223 3F       		.uleb128 0x3f
 5715 0224 19       		.uleb128 0x19
 5716 0225 03       		.uleb128 0x3
 5717 0226 0E       		.uleb128 0xe
 5718 0227 3A       		.uleb128 0x3a
 5719 0228 0B       		.uleb128 0xb
 5720 0229 3B       		.uleb128 0x3b
 5721 022a 05       		.uleb128 0x5
 5722 022b 49       		.uleb128 0x49
 5723 022c 13       		.uleb128 0x13
 5724 022d 11       		.uleb128 0x11
 5725 022e 01       		.uleb128 0x1
 5726 022f 12       		.uleb128 0x12
 5727 0230 06       		.uleb128 0x6
 5728 0231 40       		.uleb128 0x40
 5729 0232 18       		.uleb128 0x18
 5730 0233 9742     		.uleb128 0x2117
 5731 0235 19       		.uleb128 0x19
 5732 0236 00       		.byte	0
 5733 0237 00       		.byte	0
 5734 0238 24       		.uleb128 0x24
 5735 0239 34       		.uleb128 0x34
 5736 023a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 125


 5737 023b 03       		.uleb128 0x3
 5738 023c 0E       		.uleb128 0xe
 5739 023d 3A       		.uleb128 0x3a
 5740 023e 0B       		.uleb128 0xb
 5741 023f 3B       		.uleb128 0x3b
 5742 0240 05       		.uleb128 0x5
 5743 0241 49       		.uleb128 0x49
 5744 0242 13       		.uleb128 0x13
 5745 0243 3F       		.uleb128 0x3f
 5746 0244 19       		.uleb128 0x19
 5747 0245 3C       		.uleb128 0x3c
 5748 0246 19       		.uleb128 0x19
 5749 0247 00       		.byte	0
 5750 0248 00       		.byte	0
 5751 0249 25       		.uleb128 0x25
 5752 024a 34       		.uleb128 0x34
 5753 024b 00       		.byte	0
 5754 024c 03       		.uleb128 0x3
 5755 024d 0E       		.uleb128 0xe
 5756 024e 3A       		.uleb128 0x3a
 5757 024f 0B       		.uleb128 0xb
 5758 0250 3B       		.uleb128 0x3b
 5759 0251 0B       		.uleb128 0xb
 5760 0252 49       		.uleb128 0x49
 5761 0253 13       		.uleb128 0x13
 5762 0254 3F       		.uleb128 0x3f
 5763 0255 19       		.uleb128 0x19
 5764 0256 02       		.uleb128 0x2
 5765 0257 18       		.uleb128 0x18
 5766 0258 00       		.byte	0
 5767 0259 00       		.byte	0
 5768 025a 26       		.uleb128 0x26
 5769 025b 21       		.uleb128 0x21
 5770 025c 00       		.byte	0
 5771 025d 49       		.uleb128 0x49
 5772 025e 13       		.uleb128 0x13
 5773 025f 2F       		.uleb128 0x2f
 5774 0260 05       		.uleb128 0x5
 5775 0261 00       		.byte	0
 5776 0262 00       		.byte	0
 5777 0263 27       		.uleb128 0x27
 5778 0264 34       		.uleb128 0x34
 5779 0265 00       		.byte	0
 5780 0266 03       		.uleb128 0x3
 5781 0267 08       		.uleb128 0x8
 5782 0268 3A       		.uleb128 0x3a
 5783 0269 0B       		.uleb128 0xb
 5784 026a 3B       		.uleb128 0x3b
 5785 026b 0B       		.uleb128 0xb
 5786 026c 49       		.uleb128 0x49
 5787 026d 13       		.uleb128 0x13
 5788 026e 3F       		.uleb128 0x3f
 5789 026f 19       		.uleb128 0x19
 5790 0270 02       		.uleb128 0x2
 5791 0271 18       		.uleb128 0x18
 5792 0272 00       		.byte	0
 5793 0273 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 126


 5794 0274 00       		.byte	0
 5795              		.section	.debug_aranges,"",%progbits
 5796 0000 D4000000 		.4byte	0xd4
 5797 0004 0200     		.2byte	0x2
 5798 0006 00000000 		.4byte	.Ldebug_info0
 5799 000a 04       		.byte	0x4
 5800 000b 00       		.byte	0
 5801 000c 0000     		.2byte	0
 5802 000e 0000     		.2byte	0
 5803 0010 00000000 		.4byte	.LFB64
 5804 0014 44000000 		.4byte	.LFE64-.LFB64
 5805 0018 00000000 		.4byte	.LFB65
 5806 001c 6C000000 		.4byte	.LFE65-.LFB65
 5807 0020 00000000 		.4byte	.LFB66
 5808 0024 32000000 		.4byte	.LFE66-.LFB66
 5809 0028 00000000 		.4byte	.LFB67
 5810 002c 20000000 		.4byte	.LFE67-.LFB67
 5811 0030 00000000 		.4byte	.LFB68
 5812 0034 40000000 		.4byte	.LFE68-.LFB68
 5813 0038 00000000 		.4byte	.LFB69
 5814 003c DC000000 		.4byte	.LFE69-.LFB69
 5815 0040 00000000 		.4byte	.LFB70
 5816 0044 1C000000 		.4byte	.LFE70-.LFB70
 5817 0048 00000000 		.4byte	.LFB71
 5818 004c 28000000 		.4byte	.LFE71-.LFB71
 5819 0050 00000000 		.4byte	.LFB72
 5820 0054 C8000000 		.4byte	.LFE72-.LFB72
 5821 0058 00000000 		.4byte	.LFB73
 5822 005c 00010000 		.4byte	.LFE73-.LFB73
 5823 0060 00000000 		.4byte	.LFB74
 5824 0064 78000000 		.4byte	.LFE74-.LFB74
 5825 0068 00000000 		.4byte	.LFB75
 5826 006c 74010000 		.4byte	.LFE75-.LFB75
 5827 0070 00000000 		.4byte	.LFB76
 5828 0074 B8000000 		.4byte	.LFE76-.LFB76
 5829 0078 00000000 		.4byte	.LFB77
 5830 007c 1C000000 		.4byte	.LFE77-.LFB77
 5831 0080 00000000 		.4byte	.LFB78
 5832 0084 28000000 		.4byte	.LFE78-.LFB78
 5833 0088 00000000 		.4byte	.LFB79
 5834 008c 84000000 		.4byte	.LFE79-.LFB79
 5835 0090 00000000 		.4byte	.LFB80
 5836 0094 48000000 		.4byte	.LFE80-.LFB80
 5837 0098 00000000 		.4byte	.LFB81
 5838 009c 04060000 		.4byte	.LFE81-.LFB81
 5839 00a0 00000000 		.4byte	.LFB82
 5840 00a4 68010000 		.4byte	.LFE82-.LFB82
 5841 00a8 00000000 		.4byte	.LFB83
 5842 00ac 44010000 		.4byte	.LFE83-.LFB83
 5843 00b0 00000000 		.4byte	.LFB84
 5844 00b4 14000000 		.4byte	.LFE84-.LFB84
 5845 00b8 00000000 		.4byte	.LFB85
 5846 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5847 00c0 00000000 		.4byte	.LFB86
 5848 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5849 00c8 00000000 		.4byte	.LFB87
 5850 00cc 7C020000 		.4byte	.LFE87-.LFB87
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 127


 5851 00d0 00000000 		.4byte	0
 5852 00d4 00000000 		.4byte	0
 5853              		.section	.debug_ranges,"",%progbits
 5854              	.Ldebug_ranges0:
 5855 0000 AE030000 		.4byte	.LBB9
 5856 0004 94050000 		.4byte	.LBE9
 5857 0008 96050000 		.4byte	.LBB10
 5858 000c 9E050000 		.4byte	.LBE10
 5859 0010 A0050000 		.4byte	.LBB11
 5860 0014 A8050000 		.4byte	.LBE11
 5861 0018 00000000 		.4byte	0
 5862 001c 00000000 		.4byte	0
 5863 0020 00000000 		.4byte	.LFB64
 5864 0024 44000000 		.4byte	.LFE64
 5865 0028 00000000 		.4byte	.LFB65
 5866 002c 6C000000 		.4byte	.LFE65
 5867 0030 00000000 		.4byte	.LFB66
 5868 0034 32000000 		.4byte	.LFE66
 5869 0038 00000000 		.4byte	.LFB67
 5870 003c 20000000 		.4byte	.LFE67
 5871 0040 00000000 		.4byte	.LFB68
 5872 0044 40000000 		.4byte	.LFE68
 5873 0048 00000000 		.4byte	.LFB69
 5874 004c DC000000 		.4byte	.LFE69
 5875 0050 00000000 		.4byte	.LFB70
 5876 0054 1C000000 		.4byte	.LFE70
 5877 0058 00000000 		.4byte	.LFB71
 5878 005c 28000000 		.4byte	.LFE71
 5879 0060 00000000 		.4byte	.LFB72
 5880 0064 C8000000 		.4byte	.LFE72
 5881 0068 00000000 		.4byte	.LFB73
 5882 006c 00010000 		.4byte	.LFE73
 5883 0070 00000000 		.4byte	.LFB74
 5884 0074 78000000 		.4byte	.LFE74
 5885 0078 00000000 		.4byte	.LFB75
 5886 007c 74010000 		.4byte	.LFE75
 5887 0080 00000000 		.4byte	.LFB76
 5888 0084 B8000000 		.4byte	.LFE76
 5889 0088 00000000 		.4byte	.LFB77
 5890 008c 1C000000 		.4byte	.LFE77
 5891 0090 00000000 		.4byte	.LFB78
 5892 0094 28000000 		.4byte	.LFE78
 5893 0098 00000000 		.4byte	.LFB79
 5894 009c 84000000 		.4byte	.LFE79
 5895 00a0 00000000 		.4byte	.LFB80
 5896 00a4 48000000 		.4byte	.LFE80
 5897 00a8 00000000 		.4byte	.LFB81
 5898 00ac 04060000 		.4byte	.LFE81
 5899 00b0 00000000 		.4byte	.LFB82
 5900 00b4 68010000 		.4byte	.LFE82
 5901 00b8 00000000 		.4byte	.LFB83
 5902 00bc 44010000 		.4byte	.LFE83
 5903 00c0 00000000 		.4byte	.LFB84
 5904 00c4 14000000 		.4byte	.LFE84
 5905 00c8 00000000 		.4byte	.LFB85
 5906 00cc 1A000000 		.4byte	.LFE85
 5907 00d0 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 128


 5908 00d4 2A000000 		.4byte	.LFE86
 5909 00d8 00000000 		.4byte	.LFB87
 5910 00dc 7C020000 		.4byte	.LFE87
 5911 00e0 00000000 		.4byte	0
 5912 00e4 00000000 		.4byte	0
 5913              		.section	.debug_line,"",%progbits
 5914              	.Ldebug_line0:
 5915 0000 04060000 		.section	.debug_str,"MS",%progbits,1
 5915      02003602 
 5915      00000201 
 5915      FB0E0D00 
 5915      01010101 
 5916              	.LASF188:
 5917 0000 74696D65 		.ascii	"timeToValve\000"
 5917      546F5661 
 5917      6C766500 
 5918              	.LASF145:
 5919 000c 676D745F 		.ascii	"gmt_offset\000"
 5919      6F666673 
 5919      657400
 5920              	.LASF16:
 5921 0017 75696E74 		.ascii	"uint16\000"
 5921      313600
 5922              	.LASF39:
 5923 001e 76616C75 		.ascii	"value\000"
 5923      6500
 5924              	.LASF28:
 5925 0024 746D5F68 		.ascii	"tm_hour\000"
 5925      6F757200 
 5926              	.LASF33:
 5927 002c 746D5F79 		.ascii	"tm_yday\000"
 5927      64617900 
 5928              	.LASF193:
 5929 0034 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5929      73657273 
 5929      5C64616E 
 5929      747A5C44 
 5929      6F63756D 
 5930 0061 72694F53 		.ascii	"riOS.cydsn\000"
 5930      2E637964 
 5930      736E00
 5931              	.LASF153:
 5932 006c 62756666 		.ascii	"buffer_overflow\000"
 5932      65725F6F 
 5932      76657266 
 5932      6C6F7700 
 5933              	.LASF4:
 5934 007c 5F5F7569 		.ascii	"__uint8_t\000"
 5934      6E74385F 
 5934      7400
 5935              	.LASF74:
 5936 0086 636F756E 		.ascii	"countDownResetCondition\000"
 5936      74446F77 
 5936      6E526573 
 5936      6574436F 
 5936      6E646974 
 5937              	.LASF166:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 129


 5938 009e 76616C76 		.ascii	"valve_type\000"
 5938      655F7479 
 5938      706500
 5939              	.LASF55:
 5940 00a9 6C6F6E67 		.ascii	"longitude\000"
 5940      69747564 
 5940      6500
 5941              	.LASF191:
 5942 00b3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5942      43313120 
 5942      352E342E 
 5942      31203230 
 5942      31363036 
 5943 00e6 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5943      20726576 
 5943      6973696F 
 5943      6E203233 
 5943      37373135 
 5944 0119 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5944      66756E63 
 5944      74696F6E 
 5944      2D736563 
 5944      74696F6E 
 5945              	.LASF148:
 5946 0141 6D6F6465 		.ascii	"modem_wakeup\000"
 5946      6D5F7761 
 5946      6B657570 
 5946      00
 5947              	.LASF10:
 5948 014e 6C6F6E67 		.ascii	"long long unsigned int\000"
 5948      206C6F6E 
 5948      6720756E 
 5948      7369676E 
 5948      65642069 
 5949              	.LASF129:
 5950 0165 73616D70 		.ascii	"sample_freq\000"
 5950      6C655F66 
 5950      72657100 
 5951              	.LASF157:
 5952 0171 6D6F6465 		.ascii	"modem_state\000"
 5952      6D5F7374 
 5952      61746500 
 5953              	.LASF101:
 5954 017d 74657374 		.ascii	"test\000"
 5954      00
 5955              	.LASF176:
 5956 0182 616C6172 		.ascii	"alarmMeasure\000"
 5956      6D4D6561 
 5956      73757265 
 5956      00
 5957              	.LASF152:
 5958 018f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5958      52784275 
 5958      66666572 
 5958      00
 5959              	.LASF184:
 5960 019c 74696D65 		.ascii	"timetoLevelSensor\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 130


 5960      746F4C65 
 5960      76656C53 
 5960      656E736F 
 5960      7200
 5961              	.LASF159:
 5962 01ae 6D6F6465 		.ascii	"modem_stats\000"
 5962      6D5F7374 
 5962      61747300 
 5963              	.LASF9:
 5964 01ba 6C6F6E67 		.ascii	"long long int\000"
 5964      206C6F6E 
 5964      6720696E 
 5964      7400
 5965              	.LASF0:
 5966 01c8 7369676E 		.ascii	"signed char\000"
 5966      65642063 
 5966      68617200 
 5967              	.LASF48:
 5968 01d4 65636E6F 		.ascii	"ecno\000"
 5968      00
 5969              	.LASF71:
 5970 01d9 636F756E 		.ascii	"countDownValue\000"
 5970      74446F77 
 5970      6E56616C 
 5970      756500
 5971              	.LASF177:
 5972 01e8 74696D65 		.ascii	"timeToMeasure\000"
 5972      546F4D65 
 5972      61737572 
 5972      6500
 5973              	.LASF51:
 5974 01f6 74696D65 		.ascii	"time_to_network_connect\000"
 5974      5F746F5F 
 5974      6E657477 
 5974      6F726B5F 
 5974      636F6E6E 
 5975              	.LASF179:
 5976 020e 74696D65 		.ascii	"timeToSync\000"
 5976      546F5379 
 5976      6E6300
 5977              	.LASF134:
 5978 0219 646F776E 		.ascii	"down_level_freq\000"
 5978      5F6C6576 
 5978      656C5F66 
 5978      72657100 
 5979              	.LASF172:
 5980 0229 68747470 		.ascii	"http_body\000"
 5980      5F626F64 
 5980      7900
 5981              	.LASF112:
 5982 0233 7365745F 		.ascii	"set_up_internet_connection\000"
 5982      75705F69 
 5982      6E746572 
 5982      6E65745F 
 5982      636F6E6E 
 5983              	.LASF165:
 5984 024e 76616C76 		.ascii	"valve_diameter\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 131


 5984      655F6469 
 5984      616D6574 
 5984      657200
 5985              	.LASF144:
 5986 025d 7365636F 		.ascii	"second\000"
 5986      6E6400
 5987              	.LASF140:
 5988 0264 79656172 		.ascii	"year\000"
 5988      00
 5989              	.LASF185:
 5990 0269 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 5990      6D446F77 
 5990      6E737472 
 5990      65616D4C 
 5990      6576656C 
 5991              	.LASF135:
 5992 0284 74656D70 		.ascii	"temp\000"
 5992      00
 5993              	.LASF6:
 5994 0289 6C6F6E67 		.ascii	"long int\000"
 5994      20696E74 
 5994      00
 5995              	.LASF46:
 5996 0292 72786C65 		.ascii	"rxlev\000"
 5996      7600
 5997              	.LASF72:
 5998 0298 63757272 		.ascii	"currentCountDownValue\000"
 5998      656E7443 
 5998      6F756E74 
 5998      446F776E 
 5998      56616C75 
 5999              	.LASF146:
 6000 02ae 6D6F6465 		.ascii	"modem_get_state\000"
 6000      6D5F6765 
 6000      745F7374 
 6000      61746500 
 6001              	.LASF56:
 6002 02be 616C7469 		.ascii	"altitude\000"
 6002      74756465 
 6002      00
 6003              	.LASF15:
 6004 02c7 75696E74 		.ascii	"uint8\000"
 6004      3800
 6005              	.LASF133:
 6006 02cd 6C657665 		.ascii	"level_sensor_freq\000"
 6006      6C5F7365 
 6006      6E736F72 
 6006      5F667265 
 6006      7100
 6007              	.LASF182:
 6008 02df 74696D65 		.ascii	"timeToAppLED\000"
 6008      546F4170 
 6008      704C4544 
 6008      00
 6009              	.LASF19:
 6010 02ec 696E7433 		.ascii	"int32\000"
 6010      3200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 132


 6011              	.LASF60:
 6012 02f2 6E6F6465 		.ascii	"node_type\000"
 6012      5F747970 
 6012      6500
 6013              	.LASF136:
 6014 02fc 6D6F6465 		.ascii	"modem_configure_settings\000"
 6014      6D5F636F 
 6014      6E666967 
 6014      7572655F 
 6014      73657474 
 6015              	.LASF120:
 6016 0315 735F7369 		.ascii	"s_sim_type\000"
 6016      6D5F7479 
 6016      706500
 6017              	.LASF102:
 6018 0320 6E657477 		.ascii	"network_time\000"
 6018      6F726B5F 
 6018      74696D65 
 6018      00
 6019              	.LASF3:
 6020 032d 73686F72 		.ascii	"short unsigned int\000"
 6020      7420756E 
 6020      7369676E 
 6020      65642069 
 6020      6E7400
 6021              	.LASF17:
 6022 0340 75696E74 		.ascii	"uint32\000"
 6022      333200
 6023              	.LASF98:
 6024 0347 696E7465 		.ascii	"interval\000"
 6024      7276616C 
 6024      00
 6025              	.LASF7:
 6026 0350 5F5F7569 		.ascii	"__uint32_t\000"
 6026      6E743332 
 6026      5F7400
 6027              	.LASF138:
 6028 035b 6D6F6465 		.ascii	"modem_get_network_time\000"
 6028      6D5F6765 
 6028      745F6E65 
 6028      74776F72 
 6028      6B5F7469 
 6029              	.LASF30:
 6030 0372 746D5F6D 		.ascii	"tm_mon\000"
 6030      6F6E00
 6031              	.LASF125:
 6032 0379 735F6C65 		.ascii	"s_level_sensor\000"
 6032      76656C5F 
 6032      73656E73 
 6032      6F7200
 6033              	.LASF186:
 6034 0388 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 6034      746F446F 
 6034      776E7374 
 6034      7265616D 
 6034      4C657665 
 6035              	.LASF64:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 133


 6036 03a4 64656275 		.ascii	"debug_level\000"
 6036      675F6C65 
 6036      76656C00 
 6037              	.LASF147:
 6038 03b0 6D6F6465 		.ascii	"modem_sleep\000"
 6038      6D5F736C 
 6038      65657000 
 6039              	.LASF123:
 6040 03bc 735F6465 		.ascii	"s_debug_freq\000"
 6040      6275675F 
 6040      66726571 
 6040      00
 6041              	.LASF116:
 6042 03c9 75706461 		.ascii	"updatable_parameters_initialize\000"
 6042      7461626C 
 6042      655F7061 
 6042      72616D65 
 6042      74657273 
 6043              	.LASF31:
 6044 03e9 746D5F79 		.ascii	"tm_year\000"
 6044      65617200 
 6045              	.LASF178:
 6046 03f1 616C6172 		.ascii	"alarmSync\000"
 6046      6D53796E 
 6046      6300
 6047              	.LASF169:
 6048 03fb 4170705F 		.ascii	"App_LED_enabled\000"
 6048      4C45445F 
 6048      656E6162 
 6048      6C656400 
 6049              	.LASF41:
 6050 040b 6B65795F 		.ascii	"key_value_t\000"
 6050      76616C75 
 6050      655F7400 
 6051              	.LASF89:
 6052 0417 7077725F 		.ascii	"pwr_check\000"
 6052      63686563 
 6052      6B00
 6053              	.LASF8:
 6054 0421 6C6F6E67 		.ascii	"long unsigned int\000"
 6054      20756E73 
 6054      69676E65 
 6054      6420696E 
 6054      7400
 6055              	.LASF104:
 6056 0433 65787472 		.ascii	"extract_string\000"
 6056      6163745F 
 6056      73747269 
 6056      6E6700
 6057              	.LASF94:
 6058 0442 74696D65 		.ascii	"timeout\000"
 6058      6F757400 
 6059              	.LASF117:
 6060 044a 6765745F 		.ascii	"get_cell_network_stats\000"
 6060      63656C6C 
 6060      5F6E6574 
 6060      776F726B 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 134


 6060      5F737461 
 6061              	.LASF40:
 6062 0461 74696D65 		.ascii	"timeStamp\000"
 6062      5374616D 
 6062      7000
 6063              	.LASF57:
 6064 046b 74696D65 		.ascii	"time_to_lock\000"
 6064      5F746F5F 
 6064      6C6F636B 
 6064      00
 6065              	.LASF156:
 6066 0478 64617461 		.ascii	"data\000"
 6066      00
 6067              	.LASF80:
 6068 047d 65705F70 		.ascii	"ep_port\000"
 6068      6F727400 
 6069              	.LASF34:
 6070 0485 746D5F69 		.ascii	"tm_isdst\000"
 6070      73647374 
 6070      00
 6071              	.LASF76:
 6072 048e 6D6F6465 		.ascii	"modem_info\000"
 6072      6D5F696E 
 6072      666F00
 6073              	.LASF79:
 6074 0499 65705F68 		.ascii	"ep_host\000"
 6074      6F737400 
 6075              	.LASF77:
 6076 04a1 63686970 		.ascii	"chip_uniqueId\000"
 6076      5F756E69 
 6076      71756549 
 6076      6400
 6077              	.LASF99:
 6078 04af 6D6F6465 		.ascii	"modem_power_up\000"
 6078      6D5F706F 
 6078      7765725F 
 6078      757000
 6079              	.LASF192:
 6080 04be 6D6F6465 		.ascii	"modem.c\000"
 6080      6D2E6300 
 6081              	.LASF106:
 6082 04c6 62656769 		.ascii	"beginMarker\000"
 6082      6E4D6172 
 6082      6B657200 
 6083              	.LASF108:
 6084 04d2 74617267 		.ascii	"target\000"
 6084      657400
 6085              	.LASF52:
 6086 04d9 74696D65 		.ascii	"time_to_acquire_ip\000"
 6086      5F746F5F 
 6086      61637175 
 6086      6972655F 
 6086      697000
 6087              	.LASF107:
 6088 04ec 656E644D 		.ascii	"endMarker\000"
 6088      61726B65 
 6088      7200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 135


 6089              	.LASF2:
 6090 04f6 73686F72 		.ascii	"short int\000"
 6090      7420696E 
 6090      7400
 6091              	.LASF139:
 6092 0500 65706F63 		.ascii	"epoch_time\000"
 6092      685F7469 
 6092      6D6500
 6093              	.LASF5:
 6094 050b 5F5F696E 		.ascii	"__int32_t\000"
 6094      7433325F 
 6094      7400
 6095              	.LASF181:
 6096 0515 616C6172 		.ascii	"alarmAppLED\000"
 6096      6D417070 
 6096      4C454400 
 6097              	.LASF105:
 6098 0521 66726F6D 		.ascii	"from\000"
 6098      00
 6099              	.LASF111:
 6100 0526 63726567 		.ascii	"creg\000"
 6100      00
 6101              	.LASF131:
 6102 052b 64656275 		.ascii	"debug_freq\000"
 6102      675F6672 
 6102      657100
 6103              	.LASF95:
 6104 0536 61745F61 		.ascii	"at_attempt\000"
 6104      7474656D 
 6104      707400
 6105              	.LASF127:
 6106 0541 735F7661 		.ascii	"s_valve\000"
 6106      6C766500 
 6107              	.LASF164:
 6108 0549 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 6108      73747265 
 6108      616D5F6C 
 6108      6576656C 
 6108      5F73656E 
 6109              	.LASF103:
 6110 0569 61745F77 		.ascii	"at_write_command\000"
 6110      72697465 
 6110      5F636F6D 
 6110      6D616E64 
 6110      00
 6111              	.LASF78:
 6112 057a 7379735F 		.ascii	"sys_info_t\000"
 6112      696E666F 
 6112      5F7400
 6113              	.LASF70:
 6114 0585 75706461 		.ascii	"updatable_parameters_t\000"
 6114      7461626C 
 6114      655F7061 
 6114      72616D65 
 6114      74657273 
 6115              	.LASF130:
 6116 059c 7265706F 		.ascii	"report_freq\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 136


 6116      72745F66 
 6116      72657100 
 6117              	.LASF154:
 6118 05a8 64617461 		.ascii	"dataPointsInStack\000"
 6118      506F696E 
 6118      7473496E 
 6118      53746163 
 6118      6B00
 6119              	.LASF27:
 6120 05ba 746D5F6D 		.ascii	"tm_min\000"
 6120      696E00
 6121              	.LASF20:
 6122 05c1 666C6F61 		.ascii	"float32\000"
 6122      74333200 
 6123              	.LASF25:
 6124 05c9 73697A65 		.ascii	"sizetype\000"
 6124      74797065 
 6124      00
 6125              	.LASF126:
 6126 05d2 735F646F 		.ascii	"s_down_level_sensor\000"
 6126      776E5F6C 
 6126      6576656C 
 6126      5F73656E 
 6126      736F7200 
 6127              	.LASF141:
 6128 05e6 6D6F6E74 		.ascii	"month\000"
 6128      6800
 6129              	.LASF110:
 6130 05ec 69735F63 		.ascii	"is_connected_to_cell_network\000"
 6130      6F6E6E65 
 6130      63746564 
 6130      5F746F5F 
 6130      63656C6C 
 6131              	.LASF54:
 6132 0609 6C617469 		.ascii	"latitude\000"
 6132      74756465 
 6132      00
 6133              	.LASF35:
 6134 0612 74657374 		.ascii	"test_name\000"
 6134      5F6E616D 
 6134      6500
 6135              	.LASF18:
 6136 061c 696E7431 		.ascii	"int16\000"
 6136      3600
 6137              	.LASF151:
 6138 0622 6770735F 		.ascii	"gps_status\000"
 6138      73746174 
 6138      757300
 6139              	.LASF180:
 6140 062d 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 6140      546F5379 
 6140      636E5265 
 6140      6D6F7465 
 6140      50617261 
 6141              	.LASF100:
 6142 0644 6D6F6465 		.ascii	"modem_test\000"
 6142      6D5F7465 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 137


 6142      737400
 6143              	.LASF115:
 6144 064f 6D617463 		.ascii	"match\000"
 6144      6800
 6145              	.LASF160:
 6146 0655 75706461 		.ascii	"updatable_parameters\000"
 6146      7461626C 
 6146      655F7061 
 6146      72616D65 
 6146      74657273 
 6147              	.LASF142:
 6148 066a 686F7572 		.ascii	"hour\000"
 6148      00
 6149              	.LASF92:
 6150 066f 636F6D6D 		.ascii	"commands\000"
 6150      616E6473 
 6150      00
 6151              	.LASF96:
 6152 0678 636F6D70 		.ascii	"compare_location\000"
 6152      6172655F 
 6152      6C6F6361 
 6152      74696F6E 
 6152      00
 6153              	.LASF21:
 6154 0689 666C6F61 		.ascii	"float\000"
 6154      7400
 6155              	.LASF82:
 6156 068f 6D6F6465 		.ascii	"modem_initialize\000"
 6156      6D5F696E 
 6156      69746961 
 6156      6C697A65 
 6156      00
 6157              	.LASF122:
 6158 06a0 735F7265 		.ascii	"s_report_freq\000"
 6158      706F7274 
 6158      5F667265 
 6158      7100
 6159              	.LASF128:
 6160 06ae 735F6170 		.ascii	"s_apps_enabled\000"
 6160      70735F65 
 6160      6E61626C 
 6160      656400
 6161              	.LASF61:
 6162 06bd 73696D5F 		.ascii	"sim_type\000"
 6162      74797065 
 6162      00
 6163              	.LASF113:
 6164 06c6 6973725F 		.ascii	"isr_telit_rx\000"
 6164      74656C69 
 6164      745F7278 
 6164      00
 6165              	.LASF75:
 6166 06d3 616C6172 		.ascii	"alarm\000"
 6166      6D00
 6167              	.LASF69:
 6168 06d9 5F426F6F 		.ascii	"_Bool\000"
 6168      6C00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 138


 6169              	.LASF13:
 6170 06df 696E7433 		.ascii	"int32_t\000"
 6170      325F7400 
 6171              	.LASF1:
 6172 06e7 756E7369 		.ascii	"unsigned char\000"
 6172      676E6564 
 6172      20636861 
 6172      7200
 6173              	.LASF175:
 6174 06f5 73797374 		.ascii	"system_settings\000"
 6174      656D5F73 
 6174      65747469 
 6174      6E677300 
 6175              	.LASF97:
 6176 0705 64656C61 		.ascii	"delay\000"
 6176      7900
 6177              	.LASF49:
 6178 070b 72737271 		.ascii	"rsrq\000"
 6178      00
 6179              	.LASF63:
 6180 0710 73796E63 		.ascii	"sync_time\000"
 6180      5F74696D 
 6180      6500
 6181              	.LASF119:
 6182 071a 735F6E6F 		.ascii	"s_node_type\000"
 6182      64655F74 
 6182      79706500 
 6183              	.LASF47:
 6184 0726 72736370 		.ascii	"rscp\000"
 6184      00
 6185              	.LASF149:
 6186 072b 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 6186      6D5F6765 
 6186      745F6770 
 6186      735F636F 
 6186      6F726469 
 6187              	.LASF38:
 6188 0745 74657374 		.ascii	"test_t\000"
 6188      5F7400
 6189              	.LASF174:
 6190 074c 73797374 		.ascii	"system_info\000"
 6190      656D5F69 
 6190      6E666F00 
 6191              	.LASF44:
 6192 0758 696D6569 		.ascii	"imei\000"
 6192      00
 6193              	.LASF37:
 6194 075d 72656173 		.ascii	"reason\000"
 6194      6F6E00
 6195              	.LASF50:
 6196 0764 72737270 		.ascii	"rsrp\000"
 6196      00
 6197              	.LASF53:
 6198 0769 6D6F6465 		.ascii	"modem_stats_t\000"
 6198      6D5F7374 
 6198      6174735F 
 6198      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 139


 6199              	.LASF91:
 6200 0777 75617274 		.ascii	"uart_string_reset\000"
 6200      5F737472 
 6200      696E675F 
 6200      72657365 
 6200      7400
 6201              	.LASF183:
 6202 0789 616C6172 		.ascii	"alarmLevelSensor\000"
 6202      6D4C6576 
 6202      656C5365 
 6202      6E736F72 
 6202      00
 6203              	.LASF32:
 6204 079a 746D5F77 		.ascii	"tm_wday\000"
 6204      64617900 
 6205              	.LASF90:
 6206 07a2 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 6206      6D5F736F 
 6206      66745F70 
 6206      6F776572 
 6206      5F637963 
 6207              	.LASF66:
 6208 07b9 4C657665 		.ascii	"Level_Sensor_freq\000"
 6208      6C5F5365 
 6208      6E736F72 
 6208      5F667265 
 6208      7100
 6209              	.LASF161:
 6210 07cb 6C657665 		.ascii	"level_sensor_inbox\000"
 6210      6C5F7365 
 6210      6E736F72 
 6210      5F696E62 
 6210      6F7800
 6211              	.LASF24:
 6212 07de 6C6F6E67 		.ascii	"long double\000"
 6212      20646F75 
 6212      626C6500 
 6213              	.LASF23:
 6214 07ea 63686172 		.ascii	"char\000"
 6214      00
 6215              	.LASF109:
 6216 07ef 6D6F6465 		.ascii	"modem_process_tasks\000"
 6216      6D5F7072 
 6216      6F636573 
 6216      735F7461 
 6216      736B7300 
 6217              	.LASF11:
 6218 0803 756E7369 		.ascii	"unsigned int\000"
 6218      676E6564 
 6218      20696E74 
 6218      00
 6219              	.LASF137:
 6220 0810 4346554E 		.ascii	"CFUN\000"
 6220      00
 6221              	.LASF187:
 6222 0815 616C6172 		.ascii	"alarmValve\000"
 6222      6D56616C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 140


 6222      766500
 6223              	.LASF43:
 6224 0820 6D6F6465 		.ascii	"model_id\000"
 6224      6C5F6964 
 6224      00
 6225              	.LASF173:
 6226 0829 68747470 		.ascii	"http_route\000"
 6226      5F726F75 
 6226      746500
 6227              	.LASF45:
 6228 0834 6D6F6465 		.ascii	"modem_info_t\000"
 6228      6D5F696E 
 6228      666F5F74 
 6228      00
 6229              	.LASF59:
 6230 0841 6770735F 		.ascii	"gps_t\000"
 6230      7400
 6231              	.LASF190:
 6232 0847 75617274 		.ascii	"uart_string_index\000"
 6232      5F737472 
 6232      696E675F 
 6232      696E6465 
 6232      7800
 6233              	.LASF62:
 6234 0859 6D656173 		.ascii	"measure_time\000"
 6234      7572655F 
 6234      74696D65 
 6234      00
 6235              	.LASF114:
 6236 0866 69735F63 		.ascii	"is_connected_to_internet\000"
 6236      6F6E6E65 
 6236      63746564 
 6236      5F746F5F 
 6236      696E7465 
 6237              	.LASF158:
 6238 087f 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 6238      6D5F7374 
 6238      6172745F 
 6238      74696D65 
 6238      5F737461 
 6239              	.LASF189:
 6240 0896 75617274 		.ascii	"uart_received_string\000"
 6240      5F726563 
 6240      65697665 
 6240      645F7374 
 6240      72696E67 
 6241              	.LASF83:
 6242 08ab 70696E73 		.ascii	"pins_configure_inactive\000"
 6242      5F636F6E 
 6242      66696775 
 6242      72655F69 
 6242      6E616374 
 6243              	.LASF124:
 6244 08c3 735F6170 		.ascii	"s_app_led\000"
 6244      705F6C65 
 6244      6400
 6245              	.LASF42:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 141


 6246 08cd 73696D5F 		.ascii	"sim_id\000"
 6246      696400
 6247              	.LASF29:
 6248 08d4 746D5F6D 		.ascii	"tm_mday\000"
 6248      64617900 
 6249              	.LASF58:
 6250 08dc 76616C69 		.ascii	"valid\000"
 6250      6400
 6251              	.LASF84:
 6252 08e2 70696E73 		.ascii	"pins_configure_active\000"
 6252      5F636F6E 
 6252      66696775 
 6252      72655F61 
 6252      63746976 
 6253              	.LASF143:
 6254 08f8 6D696E75 		.ascii	"minute\000"
 6254      746500
 6255              	.LASF14:
 6256 08ff 75696E74 		.ascii	"uint32_t\000"
 6256      33325F74 
 6256      00
 6257              	.LASF26:
 6258 0908 746D5F73 		.ascii	"tm_sec\000"
 6258      656300
 6259              	.LASF167:
 6260 090f 76616C76 		.ascii	"valve_enabled\000"
 6260      655F656E 
 6260      61626C65 
 6260      6400
 6261              	.LASF118:
 6262 091d 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 6262      75706461 
 6262      7465645F 
 6262      70617261 
 6262      6D657465 
 6263              	.LASF121:
 6264 0940 735F7361 		.ascii	"s_sample_freq\000"
 6264      6D706C65 
 6264      5F667265 
 6264      7100
 6265              	.LASF36:
 6266 094e 73746174 		.ascii	"status\000"
 6266      757300
 6267              	.LASF162:
 6268 0955 6C657665 		.ascii	"level_sensor_enabled\000"
 6268      6C5F7365 
 6268      6E736F72 
 6268      5F656E61 
 6268      626C6564 
 6269              	.LASF155:
 6270 096a 64617461 		.ascii	"dataPointsInStackDesired\000"
 6270      506F696E 
 6270      7473496E 
 6270      53746163 
 6270      6B446573 
 6271              	.LASF67:
 6272 0983 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 142


 6272      73747265 
 6272      616D5F4C 
 6272      6576656C 
 6272      5F53656E 
 6273              	.LASF65:
 6274 09a0 4170705F 		.ascii	"App_LED_freq\000"
 6274      4C45445F 
 6274      66726571 
 6274      00
 6275              	.LASF81:
 6276 09ad 7379735F 		.ascii	"sys_settings_t\000"
 6276      73657474 
 6276      696E6773 
 6276      5F7400
 6277              	.LASF12:
 6278 09bc 75696E74 		.ascii	"uint8_t\000"
 6278      385F7400 
 6279              	.LASF168:
 6280 09c4 76616C76 		.ascii	"valve_inbox\000"
 6280      655F696E 
 6280      626F7800 
 6281              	.LASF86:
 6282 09d0 61745F72 		.ascii	"at_ready\000"
 6282      65616479 
 6282      00
 6283              	.LASF87:
 6284 09d9 61747465 		.ascii	"attempts\000"
 6284      6D707473 
 6284      00
 6285              	.LASF73:
 6286 09e2 636F756E 		.ascii	"countDownType\000"
 6286      74446F77 
 6286      6E547970 
 6286      6500
 6287              	.LASF68:
 6288 09f0 76616C76 		.ascii	"valve_freq\000"
 6288      655F6672 
 6288      657100
 6289              	.LASF88:
 6290 09fb 626F6F74 		.ascii	"boot_time\000"
 6290      5F74696D 
 6290      6500
 6291              	.LASF93:
 6292 0a05 65787065 		.ascii	"expected_response\000"
 6292      63746564 
 6292      5F726573 
 6292      706F6E73 
 6292      6500
 6293              	.LASF150:
 6294 0a17 6C6F636B 		.ascii	"lock_time\000"
 6294      5F74696D 
 6294      6500
 6295              	.LASF171:
 6296 0a21 68747470 		.ascii	"http_request\000"
 6296      5F726571 
 6296      75657374 
 6296      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctwKN6Q.s 			page 143


 6297              	.LASF85:
 6298 0a2e 6D6F6465 		.ascii	"modem_power_down\000"
 6298      6D5F706F 
 6298      7765725F 
 6298      646F776E 
 6298      00
 6299              	.LASF22:
 6300 0a3f 646F7562 		.ascii	"double\000"
 6300      6C6500
 6301              	.LASF170:
 6302 0a46 6170705F 		.ascii	"app_led_inbox\000"
 6302      6C65645F 
 6302      696E626F 
 6302      7800
 6303              	.LASF163:
 6304 0a54 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 6304      73747265 
 6304      616D5F6C 
 6304      6576656C 
 6304      5F73656E 
 6305              	.LASF132:
 6306 0a72 6170705F 		.ascii	"app_led_freq\000"
 6306      6C65645F 
 6306      66726571 
 6306      00
 6307              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
