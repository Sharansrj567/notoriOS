ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,5,4
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.comm	uart_received_string,1024,4
  44              		.global	uart_string_index
  45              		.bss
  46              		.align	1
  47              		.type	uart_string_index, %object
  48              		.size	uart_string_index, 2
  49              	uart_string_index:
  50 0000 0000     		.space	2
  51              		.section	.text.isr_telit_rx,"ax",%progbits
  52              		.align	2
  53              		.global	isr_telit_rx
  54              		.thumb
  55              		.thumb_func
  56              		.type	isr_telit_rx, %function
  57              	isr_telit_rx:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 2


  58              	.LFB64:
  59              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  60              		.loc 1 18 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 98B5     		push	{r3, r4, r7, lr}
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 3, -16
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  72              		.loc 1 20 0
  73 0004 12E0     		b	.L2
  74              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  75              		.loc 1 21 0
  76 0006 0D4B     		ldr	r3, .L4
  77 0008 B3F90030 		ldrsh	r3, [r3]
  78 000c 1C46     		mov	r4, r3
  79 000e FFF7FEFF 		bl	UART_Telit_GetChar
  80 0012 0346     		mov	r3, r0
  81 0014 1A46     		mov	r2, r3
  82 0016 0A4B     		ldr	r3, .L4+4
  83 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  84              		.loc 1 22 0
  85 001a 084B     		ldr	r3, .L4
  86 001c B3F90030 		ldrsh	r3, [r3]
  87 0020 9BB2     		uxth	r3, r3
  88 0022 0133     		adds	r3, r3, #1
  89 0024 9BB2     		uxth	r3, r3
  90 0026 1AB2     		sxth	r2, r3
  91 0028 044B     		ldr	r3, .L4
  92 002a 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 3


  93              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  94              		.loc 1 20 0
  95 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
  96 0030 0346     		mov	r3, r0
  97 0032 012B     		cmp	r3, #1
  98 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
  99              		.loc 1 25 0
 100 0036 00BF     		nop
 101 0038 98BD     		pop	{r3, r4, r7, pc}
 102              	.L5:
 103 003a 00BF     		.align	2
 104              	.L4:
 105 003c 00000000 		.word	uart_string_index
 106 0040 00000000 		.word	uart_received_string
 107              		.cfi_endproc
 108              	.LFE64:
 109              		.size	isr_telit_rx, .-isr_telit_rx
 110              		.section	.text.modem_initialize,"ax",%progbits
 111              		.align	2
 112              		.global	modem_initialize
 113              		.thumb
 114              		.thumb_func
 115              		.type	modem_initialize, %function
 116              	modem_initialize:
 117              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 118              		.loc 1 28 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 128              		.loc 1 31 0
 129 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 130              		.loc 1 32 0
 131 0008 154B     		ldr	r3, .L7
 132 000a 0022     		movs	r2, #0
 133 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 134              		.loc 1 34 0
 135 000e 154B     		ldr	r3, .L7+4
 136 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 4


 137 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 138              		.loc 1 35 0
 139 0016 134B     		ldr	r3, .L7+4
 140 0018 0022     		movs	r2, #0
 141 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 142              		.loc 1 36 0
 143 001c 114B     		ldr	r3, .L7+4
 144 001e 0022     		movs	r2, #0
 145 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 146              		.loc 1 37 0
 147 0022 114B     		ldr	r3, .L7+8
 148 0024 0022     		movs	r2, #0
 149 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 150              		.loc 1 38 0
 151 0028 0F4B     		ldr	r3, .L7+8
 152 002a 0022     		movs	r2, #0
 153 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 154              		.loc 1 39 0
 155 002e 0E4B     		ldr	r3, .L7+8
 156 0030 0022     		movs	r2, #0
 157 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 158              		.loc 1 40 0
 159 0034 0C4B     		ldr	r3, .L7+8
 160 0036 0022     		movs	r2, #0
 161 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 162              		.loc 1 41 0
 163 003a 0B4B     		ldr	r3, .L7+8
 164 003c 0022     		movs	r2, #0
 165 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 166              		.loc 1 42 0
 167 0040 094B     		ldr	r3, .L7+8
 168 0042 0022     		movs	r2, #0
 169 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 170              		.loc 1 43 0
 171 0046 084B     		ldr	r3, .L7+8
 172 0048 0022     		movs	r2, #0
 173 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 174              		.loc 1 44 0
 175 004c 064B     		ldr	r3, .L7+8
 176 004e 0022     		movs	r2, #0
 177 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 178              		.loc 1 48 0
 179 0052 0021     		movs	r1, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 5


 180 0054 4020     		movs	r0, #64
 181 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 182              		.loc 1 50 0
 183 005a 00BF     		nop
 184 005c 80BD     		pop	{r7, pc}
 185              	.L8:
 186 005e 00BF     		.align	2
 187              	.L7:
 188 0060 00000000 		.word	modem_state
 189 0064 00000000 		.word	modem_info
 190 0068 00000000 		.word	modem_stats
 191              		.cfi_endproc
 192              	.LFE65:
 193              		.size	modem_initialize, .-modem_initialize
 194              		.section	.text.pins_configure_inactive,"ax",%progbits
 195              		.align	2
 196              		.global	pins_configure_inactive
 197              		.thumb
 198              		.thumb_func
 199              		.type	pins_configure_inactive, %function
 200              	pins_configure_inactive:
 201              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 202              		.loc 1 54 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 212              		.loc 1 56 0
 213 0004 0020     		movs	r0, #0
 214 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 215              		.loc 1 57 0
 216 000a 0C20     		movs	r0, #12
 217 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 218              		.loc 1 59 0
 219 0010 0020     		movs	r0, #0
 220 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 221              		.loc 1 62 0
 222 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 6


 223 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 224              		.loc 1 63 0
 225 001c 0020     		movs	r0, #0
 226 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 227              		.loc 1 64 0
 228 0022 0020     		movs	r0, #0
 229 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 230              		.loc 1 65 0
 231 0028 0020     		movs	r0, #0
 232 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 233              		.loc 1 67 0
 234 002e 00BF     		nop
 235 0030 80BD     		pop	{r7, pc}
 236              		.cfi_endproc
 237              	.LFE66:
 238              		.size	pins_configure_inactive, .-pins_configure_inactive
 239 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 240              		.align	2
 241              		.global	pins_configure_active
 242              		.thumb
 243              		.thumb_func
 244              		.type	pins_configure_active, %function
 245              	pins_configure_active:
 246              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 247              		.loc 1 70 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 257              		.loc 1 72 0
 258 0004 0220     		movs	r0, #2
 259 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 260              		.loc 1 73 0
 261 000a 0120     		movs	r0, #1
 262 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 263              		.loc 1 74 0
 264 0010 0120     		movs	r0, #1
 265 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 266              		.loc 1 75 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 7


 267 0016 6420     		movs	r0, #100
 268 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 269              		.loc 1 76 0
 270 001c 00BF     		nop
 271 001e 80BD     		pop	{r7, pc}
 272              		.cfi_endproc
 273              	.LFE67:
 274              		.size	pins_configure_active, .-pins_configure_active
 275              		.section	.rodata
 276              		.align	2
 277              	.LC0:
 278 0000 4F4B00   		.ascii	"OK\000"
 279 0003 00       		.align	2
 280              	.LC1:
 281 0004 41542353 		.ascii	"AT#SHDN\015\000"
 281      48444E0D 
 281      00
 282              		.section	.text.modem_power_down,"ax",%progbits
 283              		.align	2
 284              		.global	modem_power_down
 285              		.thumb
 286              		.thumb_func
 287              		.type	modem_power_down, %function
 288              	modem_power_down:
 289              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 290              		.loc 1 79 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 300              		.loc 1 82 0
 301 0004 41F28832 		movw	r2, #5000
 302 0008 0A49     		ldr	r1, .L12
 303 000a 0B48     		ldr	r0, .L12+4
 304 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 305              		.loc 1 85 0
 306 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 307              		.loc 1 86 0
 308 0014 4FF47A70 		mov	r0, #1000
 309 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 8


  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 310              		.loc 1 88 0
 311 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 312              		.loc 1 89 0
 313 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 314              		.loc 1 90 0
 315 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 316              		.loc 1 91 0
 317 0028 044B     		ldr	r3, .L12+8
 318 002a 0022     		movs	r2, #0
 319 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 320              		.loc 1 93 0
 321 002e 00BF     		nop
 322 0030 80BD     		pop	{r7, pc}
 323              	.L13:
 324 0032 00BF     		.align	2
 325              	.L12:
 326 0034 00000000 		.word	.LC0
 327 0038 04000000 		.word	.LC1
 328 003c 00000000 		.word	modem_state
 329              		.cfi_endproc
 330              	.LFE68:
 331              		.size	modem_power_down, .-modem_power_down
 332              		.section	.rodata
 333 000d 000000   		.align	2
 334              	.LC2:
 335 0010 41544530 		.ascii	"ATE0\015\000"
 335      0D00
 336 0016 0000     		.align	2
 337              	.LC3:
 338 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 338      6D20626F 
 338      6F742074 
 338      696D653A 
 338      20256400 
 339              		.align	2
 340              	.LC4:
 341 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 341      6D207265 
 341      61647920 
 341      666F7220 
 341      41542063 
 342 005d 000000   		.align	2
 343              	.LC5:
 344 0060 4E6F2072 		.ascii	"No response from modem.\000"
 344      6573706F 
 344      6E736520 
 344      66726F6D 
 344      206D6F64 
 345              		.section	.text.modem_power_up,"ax",%progbits
 346              		.align	2
 347              		.global	modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 9


 348              		.thumb
 349              		.thumb_func
 350              		.type	modem_power_up, %function
 351              	modem_power_up:
 352              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 353              		.loc 1 97 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 82B0     		sub	sp, sp, #8
 362              		.cfi_def_cfa_offset 16
 363 0004 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 365              		.loc 1 99 0
 366 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 367              		.loc 1 100 0
 368 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 369              		.loc 1 101 0
 370 000e 2C48     		ldr	r0, .L27
 371 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 372              		.loc 1 103 0
 373 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 374              		.loc 1 106 0
 375 0018 0023     		movs	r3, #0
 376 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 377              		.loc 1 107 0
 378 001c 0023     		movs	r3, #0
 379 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 380              		.loc 1 109 0
 381 0020 FFF7FEFF 		bl	getTimeStamp
 382 0024 3860     		str	r0, [r7]
 383              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 384              		.loc 1 112 0
 385 0026 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 10


 386 0028 BB71     		strb	r3, [r7, #6]
 387 002a 1CE0     		b	.L15
 388              	.L22:
 389              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 390              		.loc 1 114 0
 391 002c 0023     		movs	r3, #0
 392 002e 7B71     		strb	r3, [r7, #5]
 393 0030 0EE0     		b	.L16
 394              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 395              		.loc 1 116 0
 396 0032 4FF47A72 		mov	r2, #1000
 397 0036 2349     		ldr	r1, .L27+4
 398 0038 2348     		ldr	r0, .L27+8
 399 003a FFF7FEFF 		bl	at_write_command
 400 003e 0346     		mov	r3, r0
 401 0040 002B     		cmp	r3, #0
 402 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 403              		.loc 1 117 0
 404 0044 0123     		movs	r3, #1
 405 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 406              		.loc 1 118 0
 407 0048 05E0     		b	.L18
 408              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 409              		.loc 1 114 0 discriminator 2
 410 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 411 004c 0133     		adds	r3, r3, #1
 412 004e 7B71     		strb	r3, [r7, #5]
 413              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 414              		.loc 1 114 0 is_stmt 0 discriminator 1
 415 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 416 0052 132B     		cmp	r3, #19
 417 0054 EDD9     		bls	.L19
 418              	.L18:
 419              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 420              		.loc 1 122 0 is_stmt 1
 421 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 422 0058 012B     		cmp	r3, #1
 423 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 424              		.loc 1 126 0 discriminator 2
 425 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 11


 426              		.loc 1 112 0 discriminator 2
 427 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 428 0062 0133     		adds	r3, r3, #1
 429 0064 BB71     		strb	r3, [r7, #6]
 430              	.L15:
 112:modem.c       ****         
 431              		.loc 1 112 0 is_stmt 0 discriminator 1
 432 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 433 0068 022B     		cmp	r3, #2
 434 006a DFD9     		bls	.L22
 435 006c 00E0     		b	.L21
 436              	.L26:
 123:modem.c       ****             break;
 437              		.loc 1 123 0 is_stmt 1
 438 006e 00BF     		nop
 439              	.L21:
 440              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 441              		.loc 1 130 0
 442 0070 FFF7FEFF 		bl	getTimeStamp
 443 0074 0246     		mov	r2, r0
 444 0076 3B68     		ldr	r3, [r7]
 445 0078 D31A     		subs	r3, r2, r3
 446 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 447              		.loc 1 131 0
 448 007c 3A68     		ldr	r2, [r7]
 449 007e 1349     		ldr	r1, .L27+12
 450 0080 0020     		movs	r0, #0
 451 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 452              		.loc 1 133 0
 453 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 454 0088 012B     		cmp	r3, #1
 455 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 456              		.loc 1 134 0
 457 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 458 008e 1A46     		mov	r2, r3
 459 0090 0F49     		ldr	r1, .L27+16
 460 0092 0020     		movs	r0, #0
 461 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 462              		.loc 1 135 0
 463 0098 0E4B     		ldr	r3, .L27+20
 464 009a 0122     		movs	r2, #1
 465 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 12


 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 466              		.loc 1 143 0
 467 009e 0123     		movs	r3, #1
 468 00a0 09E0     		b	.L25
 469              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 470              		.loc 1 137 0
 471 00a2 0D49     		ldr	r1, .L27+24
 472 00a4 0220     		movs	r0, #2
 473 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 474              		.loc 1 138 0
 475 00aa 0A4B     		ldr	r3, .L27+20
 476 00ac 0022     		movs	r2, #0
 477 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 478              		.loc 1 140 0
 479 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 480              		.loc 1 141 0
 481 00b4 0023     		movs	r3, #0
 482              	.L25:
 144:modem.c       **** }
 483              		.loc 1 144 0
 484 00b6 1846     		mov	r0, r3
 485 00b8 0837     		adds	r7, r7, #8
 486              		.cfi_def_cfa_offset 8
 487 00ba BD46     		mov	sp, r7
 488              		.cfi_def_cfa_register 13
 489              		@ sp needed
 490 00bc 80BD     		pop	{r7, pc}
 491              	.L28:
 492 00be 00BF     		.align	2
 493              	.L27:
 494 00c0 00000000 		.word	isr_telit_rx
 495 00c4 00000000 		.word	.LC0
 496 00c8 10000000 		.word	.LC2
 497 00cc 18000000 		.word	.LC3
 498 00d0 2C000000 		.word	.LC4
 499 00d4 00000000 		.word	modem_state
 500 00d8 60000000 		.word	.LC5
 501              		.cfi_endproc
 502              	.LFE69:
 503              		.size	modem_power_up, .-modem_power_up
 504              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 505              		.align	2
 506              		.global	modem_soft_power_cycle
 507              		.thumb
 508              		.thumb_func
 509              		.type	modem_soft_power_cycle, %function
 510              	modem_soft_power_cycle:
 511              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 512              		.loc 1 147 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 13


 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 00AF     		add	r7, sp, #0
 521              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 522              		.loc 1 148 0
 523 0004 0120     		movs	r0, #1
 524 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 525              		.loc 1 149 0
 526 000a 4FF4FA60 		mov	r0, #2000
 527 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 528              		.loc 1 150 0
 529 0012 0020     		movs	r0, #0
 530 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 531              		.loc 1 152 0
 532 0018 00BF     		nop
 533 001a 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE70:
 536              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 537              		.section	.text.uart_string_reset,"ax",%progbits
 538              		.align	2
 539              		.global	uart_string_reset
 540              		.thumb
 541              		.thumb_func
 542              		.type	uart_string_reset, %function
 543              	uart_string_reset:
 544              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 545              		.loc 1 155 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 00AF     		add	r7, sp, #0
 554              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 555              		.loc 1 156 0
 556 0004 064B     		ldr	r3, .L31
 557 0006 0022     		movs	r2, #0
 558 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 14


 559              		.loc 1 158 0
 560 000a 4FF48062 		mov	r2, #1024
 561 000e 0021     		movs	r1, #0
 562 0010 0448     		ldr	r0, .L31+4
 563 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 564              		.loc 1 160 0
 565 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 566              		.loc 1 161 0
 567 001a 00BF     		nop
 568 001c 80BD     		pop	{r7, pc}
 569              	.L32:
 570 001e 00BF     		.align	2
 571              	.L31:
 572 0020 00000000 		.word	uart_string_index
 573 0024 00000000 		.word	uart_received_string
 574              		.cfi_endproc
 575              	.LFE71:
 576              		.size	uart_string_reset, .-uart_string_reset
 577              		.section	.rodata
 578              		.align	2
 579              	.LC6:
 580 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 580      6D207365 
 580      6E742041 
 580      5420636F 
 580      6D6D616E 
 581              		.align	2
 582              	.LC7:
 583 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 583      6D205265 
 583      63656976 
 583      65642065 
 583      78706563 
 584 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 584      616E643A 
 584      2025730A 
 584      52656365 
 584      69766564 
 585 00f1 000000   		.align	2
 586              	.LC8:
 587 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 587      6D207265 
 587      71756972 
 587      65642025 
 587      64207472 
 588 0127 0A00     		.ascii	"\012\000"
 589              		.section	.text.at_write_command,"ax",%progbits
 590              		.align	2
 591              		.global	at_write_command
 592              		.thumb
 593              		.thumb_func
 594              		.type	at_write_command, %function
 595              	at_write_command:
 596              	.LFB72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 15


 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 597              		.loc 1 166 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 40
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 601 0000 80B5     		push	{r7, lr}
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 7, -8
 604              		.cfi_offset 14, -4
 605 0002 8AB0     		sub	sp, sp, #40
 606              		.cfi_def_cfa_offset 48
 607 0004 00AF     		add	r7, sp, #0
 608              		.cfi_def_cfa_register 7
 609 0006 F860     		str	r0, [r7, #12]
 610 0008 B960     		str	r1, [r7, #8]
 611 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 612              		.loc 1 168 0
 613 000c 0023     		movs	r3, #0
 614 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 615              		.loc 1 170 0
 616 0010 0023     		movs	r3, #0
 617 0012 7B62     		str	r3, [r7, #36]
 618 0014 40E0     		b	.L34
 619              	.L42:
 620              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 621              		.loc 1 173 0
 622 0016 0A23     		movs	r3, #10
 623 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 624              		.loc 1 174 0
 625 001a 7A68     		ldr	r2, [r7, #4]
 626 001c FB69     		ldr	r3, [r7, #28]
 627 001e B2FBF3F3 		udiv	r3, r2, r3
 628 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 629              		.loc 1 177 0
 630 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 631              		.loc 1 180 0
 632 0028 F868     		ldr	r0, [r7, #12]
 633 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 16


 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 634              		.loc 1 184 0
 635 002e 7B68     		ldr	r3, [r7, #4]
 636 0030 002B     		cmp	r3, #0
 637 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 638              		.loc 1 185 0
 639 0034 FA68     		ldr	r2, [r7, #12]
 640 0036 1C49     		ldr	r1, .L43
 641 0038 0020     		movs	r0, #0
 642 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 643              		.loc 1 186 0
 644 003e 0123     		movs	r3, #1
 645 0040 2EE0     		b	.L36
 646              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 647              		.loc 1 190 0
 648 0042 0023     		movs	r3, #0
 649 0044 3B62     		str	r3, [r7, #32]
 650 0046 20E0     		b	.L37
 651              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 652              		.loc 1 191 0
 653 0048 F869     		ldr	r0, [r7, #28]
 654 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 655              		.loc 1 194 0
 656 004e B968     		ldr	r1, [r7, #8]
 657 0050 1648     		ldr	r0, .L43+4
 658 0052 FFF7FEFF 		bl	strstr
 659 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 660              		.loc 1 195 0
 661 0058 7B69     		ldr	r3, [r7, #20]
 662 005a 002B     		cmp	r3, #0
 663 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 664              		.loc 1 196 0
 665 005e 7B6A     		ldr	r3, [r7, #36]
 666 0060 002B     		cmp	r3, #0
 667 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 668              		.loc 1 198 0
 669 0064 114B     		ldr	r3, .L43+4
 670 0066 FA68     		ldr	r2, [r7, #12]
 671 0068 1149     		ldr	r1, .L43+8
 672 006a 0020     		movs	r0, #0
 673 006c FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 17


 674 0070 06E0     		b	.L40
 675              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 676              		.loc 1 200 0
 677 0072 7B6A     		ldr	r3, [r7, #36]
 678 0074 5A1C     		adds	r2, r3, #1
 679 0076 0D4B     		ldr	r3, .L43+4
 680 0078 0E49     		ldr	r1, .L43+12
 681 007a 0120     		movs	r0, #1
 682 007c FFF7FEFF 		bl	printNotif
 683              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 684              		.loc 1 203 0
 685 0080 0123     		movs	r3, #1
 686 0082 0DE0     		b	.L36
 687              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 688              		.loc 1 190 0 discriminator 2
 689 0084 3B6A     		ldr	r3, [r7, #32]
 690 0086 0133     		adds	r3, r3, #1
 691 0088 3B62     		str	r3, [r7, #32]
 692              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 693              		.loc 1 190 0 is_stmt 0 discriminator 1
 694 008a 3A6A     		ldr	r2, [r7, #32]
 695 008c BB69     		ldr	r3, [r7, #24]
 696 008e 9A42     		cmp	r2, r3
 697 0090 DAD3     		bcc	.L41
 698              	.LBE4:
 170:modem.c       ****         
 699              		.loc 1 170 0 is_stmt 1 discriminator 2
 700 0092 7B6A     		ldr	r3, [r7, #36]
 701 0094 0133     		adds	r3, r3, #1
 702 0096 7B62     		str	r3, [r7, #36]
 703              	.L34:
 170:modem.c       ****         
 704              		.loc 1 170 0 is_stmt 0 discriminator 1
 705 0098 7B6A     		ldr	r3, [r7, #36]
 706 009a 022B     		cmp	r3, #2
 707 009c BBD9     		bls	.L42
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         //printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,u
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 708              		.loc 1 214 0 is_stmt 1
 709 009e 0023     		movs	r3, #0
 710              	.L36:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 18


 215:modem.c       **** }
 711              		.loc 1 215 0
 712 00a0 1846     		mov	r0, r3
 713 00a2 2837     		adds	r7, r7, #40
 714              		.cfi_def_cfa_offset 8
 715 00a4 BD46     		mov	sp, r7
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 00a6 80BD     		pop	{r7, pc}
 719              	.L44:
 720              		.align	2
 721              	.L43:
 722 00a8 78000000 		.word	.LC6
 723 00ac 00000000 		.word	uart_received_string
 724 00b0 A4000000 		.word	.LC7
 725 00b4 F4000000 		.word	.LC8
 726              		.cfi_endproc
 727              	.LFE72:
 728              		.size	at_write_command, .-at_write_command
 729              		.section	.rodata
 730 0129 000000   		.align	2
 731              	.LC9:
 732 012c 54455354 		.ascii	"TEST_MODEM\000"
 732      5F4D4F44 
 732      454D00
 733 0137 00       		.align	2
 734              	.LC10:
 735 0138 4E6F2072 		.ascii	"No reponse from modem.\000"
 735      65706F6E 
 735      73652066 
 735      726F6D20 
 735      6D6F6465 
 736 014f 00       		.align	2
 737              	.LC11:
 738 0150 4D6F6465 		.ascii	"Modem connected to network.\000"
 738      6D20636F 
 738      6E6E6563 
 738      74656420 
 738      746F206E 
 739              		.section	.text.modem_test,"ax",%progbits
 740              		.align	2
 741              		.global	modem_test
 742              		.thumb
 743              		.thumb_func
 744              		.type	modem_test, %function
 745              	modem_test:
 746              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 747              		.loc 1 218 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 408
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751 0000 B0B5     		push	{r4, r5, r7, lr}
 752              		.cfi_def_cfa_offset 16
 753              		.cfi_offset 4, -16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 19


 754              		.cfi_offset 5, -12
 755              		.cfi_offset 7, -8
 756              		.cfi_offset 14, -4
 757 0002 E6B0     		sub	sp, sp, #408
 758              		.cfi_def_cfa_offset 424
 759 0004 00AF     		add	r7, sp, #0
 760              		.cfi_def_cfa_register 7
 761 0006 3B1D     		adds	r3, r7, #4
 762 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 763              		.loc 1 221 0
 764 000a 07F10C03 		add	r3, r7, #12
 765 000e 0022     		movs	r2, #0
 766 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 767              		.loc 1 223 0
 768 0014 07F10C03 		add	r3, r7, #12
 769 0018 364A     		ldr	r2, .L53
 770 001a 07CA     		ldmia	r2, {r0, r1, r2}
 771 001c 03C3     		stmia	r3!, {r0, r1}
 772 001e 1A80     		strh	r2, [r3]	@ movhi
 773 0020 0233     		adds	r3, r3, #2
 774 0022 120C     		lsrs	r2, r2, #16
 775 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 776              		.loc 1 224 0
 777 0026 07F10C03 		add	r3, r7, #12
 778 002a 8133     		adds	r3, r3, #129
 779 002c 324A     		ldr	r2, .L53+4
 780 002e 1C46     		mov	r4, r3
 781 0030 1546     		mov	r5, r2
 782 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 783 0034 2060     		str	r0, [r4]	@ unaligned
 784 0036 6160     		str	r1, [r4, #4]	@ unaligned
 785 0038 A260     		str	r2, [r4, #8]	@ unaligned
 786 003a E360     		str	r3, [r4, #12]	@ unaligned
 787 003c 2868     		ldr	r0, [r5]	@ unaligned
 788 003e 2061     		str	r0, [r4, #16]	@ unaligned
 789 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 790 0042 AA79     		ldrb	r2, [r5, #6]
 791 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 792 0046 1346     		mov	r3, r2
 793 0048 A375     		strb	r3, [r4, #22]
 794              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 795              		.loc 1 227 0
 796 004a 0023     		movs	r3, #0
 797 004c C7F89431 		str	r3, [r7, #404]
 798 0050 3AE0     		b	.L46
 799              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 20


 800              		.loc 1 229 0
 801 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 802              		.loc 1 231 0
 803 0056 FFF7FEFF 		bl	modem_get_state
 804 005a 0346     		mov	r3, r0
 805 005c 002B     		cmp	r3, #0
 806 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 807              		.loc 1 233 0
 808 0060 FFF7FEFF 		bl	modem_power_up
 809 0064 27E0     		b	.L48
 810              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 811              		.loc 1 236 0
 812 0066 FFF7FEFF 		bl	modem_get_state
 813 006a 0346     		mov	r3, r0
 814 006c 042B     		cmp	r3, #4
 815 006e 22D1     		bne	.L48
 816              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 817              		.loc 1 240 0
 818 0070 FFF7FEFF 		bl	modem_get_network_time
 819 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 820              		.loc 1 241 0
 821 0078 D7F89031 		ldr	r3, [r7, #400]
 822 007c 002B     		cmp	r3, #0
 823 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 824              		.loc 1 242 0
 825 0080 D7F89001 		ldr	r0, [r7, #400]
 826 0084 FFF7FEFF 		bl	setTime
 827              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 828              		.loc 1 245 0
 829 0088 07F10C03 		add	r3, r7, #12
 830 008c 8133     		adds	r3, r3, #129
 831 008e 1B4A     		ldr	r2, .L53+8
 832 0090 1D46     		mov	r5, r3
 833 0092 1446     		mov	r4, r2
 834 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 835 0096 2860     		str	r0, [r5]	@ unaligned
 836 0098 6960     		str	r1, [r5, #4]	@ unaligned
 837 009a AA60     		str	r2, [r5, #8]	@ unaligned
 838 009c EB60     		str	r3, [r5, #12]	@ unaligned
 839 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 840 00a0 2861     		str	r0, [r5, #16]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 21


 841 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 842 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 843              		.loc 1 246 0
 844 00a6 07F10C03 		add	r3, r7, #12
 845 00aa 0122     		movs	r2, #1
 846 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 847              		.loc 1 248 0
 848 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 849              		.loc 1 249 0
 850 00b4 0CE0     		b	.L50
 851              	.L48:
 852              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 853              		.loc 1 252 0 discriminator 2
 854 00b6 4FF47A70 		mov	r0, #1000
 855 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 856              		.loc 1 227 0 discriminator 2
 857 00be D7F89431 		ldr	r3, [r7, #404]
 858 00c2 0133     		adds	r3, r3, #1
 859 00c4 C7F89431 		str	r3, [r7, #404]
 860              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 861              		.loc 1 227 0 is_stmt 0 discriminator 1
 862 00c8 D7F89431 		ldr	r3, [r7, #404]
 863 00cc 3B2B     		cmp	r3, #59
 864 00ce C0DD     		ble	.L51
 865              	.L50:
 866              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 867              		.loc 1 256 0 is_stmt 1
 868 00d0 3B1D     		adds	r3, r7, #4
 869 00d2 1A68     		ldr	r2, [r3]
 870 00d4 07F10C03 		add	r3, r7, #12
 871 00d8 1046     		mov	r0, r2
 872 00da 1946     		mov	r1, r3
 873 00dc 40F28113 		movw	r3, #385
 874 00e0 1A46     		mov	r2, r3
 875 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 876              		.loc 1 257 0
 877 00e6 3B1D     		adds	r3, r7, #4
 878 00e8 1868     		ldr	r0, [r3]
 879 00ea 07F5CC77 		add	r7, r7, #408
 880              		.cfi_def_cfa_offset 16
 881 00ee BD46     		mov	sp, r7
 882              		.cfi_def_cfa_register 13
 883              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 22


 884 00f0 B0BD     		pop	{r4, r5, r7, pc}
 885              	.L54:
 886 00f2 00BF     		.align	2
 887              	.L53:
 888 00f4 2C010000 		.word	.LC9
 889 00f8 38010000 		.word	.LC10
 890 00fc 50010000 		.word	.LC11
 891              		.cfi_endproc
 892              	.LFE73:
 893              		.size	modem_test, .-modem_test
 894              		.section	.text.extract_string,"ax",%progbits
 895              		.align	2
 896              		.global	extract_string
 897              		.thumb
 898              		.thumb_func
 899              		.type	extract_string, %function
 900              	extract_string:
 901              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 902              		.loc 1 260 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 24
 905              		@ frame_needed = 1, uses_anonymous_args = 0
 906 0000 80B5     		push	{r7, lr}
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 7, -8
 909              		.cfi_offset 14, -4
 910 0002 86B0     		sub	sp, sp, #24
 911              		.cfi_def_cfa_offset 32
 912 0004 00AF     		add	r7, sp, #0
 913              		.cfi_def_cfa_register 7
 914 0006 F860     		str	r0, [r7, #12]
 915 0008 B960     		str	r1, [r7, #8]
 916 000a 7A60     		str	r2, [r7, #4]
 917 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 918              		.loc 1 266 0
 919 000e B968     		ldr	r1, [r7, #8]
 920 0010 F868     		ldr	r0, [r7, #12]
 921 0012 FFF7FEFF 		bl	strstr
 922 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 923              		.loc 1 267 0
 924 0018 7B69     		ldr	r3, [r7, #20]
 925 001a 002B     		cmp	r3, #0
 926 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 927              		.loc 1 269 0
 928 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 23


 929 0020 7B61     		str	r3, [r7, #20]
 930              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 931              		.loc 1 272 0
 932 0022 B868     		ldr	r0, [r7, #8]
 933 0024 FFF7FEFF 		bl	strlen
 934 0028 0246     		mov	r2, r0
 935 002a 7B69     		ldr	r3, [r7, #20]
 936 002c 1344     		add	r3, r3, r2
 937 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 938              		.loc 1 277 0
 939 0030 7968     		ldr	r1, [r7, #4]
 940 0032 7869     		ldr	r0, [r7, #20]
 941 0034 FFF7FEFF 		bl	strstr
 942 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 943              		.loc 1 278 0
 944 003a 3B69     		ldr	r3, [r7, #16]
 945 003c 002B     		cmp	r3, #0
 946 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 947              		.loc 1 280 0
 948 0040 F868     		ldr	r0, [r7, #12]
 949 0042 FFF7FEFF 		bl	strlen
 950 0046 0246     		mov	r2, r0
 951 0048 FB68     		ldr	r3, [r7, #12]
 952 004a 1344     		add	r3, r3, r2
 953 004c 3B61     		str	r3, [r7, #16]
 954              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 955              		.loc 1 284 0
 956 004e 3A69     		ldr	r2, [r7, #16]
 957 0050 7B69     		ldr	r3, [r7, #20]
 958 0052 D31A     		subs	r3, r2, r3
 959 0054 1A46     		mov	r2, r3
 960 0056 7969     		ldr	r1, [r7, #20]
 961 0058 3868     		ldr	r0, [r7]
 962 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 963              		.loc 1 285 0
 964 005e 3A69     		ldr	r2, [r7, #16]
 965 0060 7B69     		ldr	r3, [r7, #20]
 966 0062 D31A     		subs	r3, r2, r3
 967 0064 1A46     		mov	r2, r3
 968 0066 3B68     		ldr	r3, [r7]
 969 0068 1344     		add	r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 24


 970 006a 0022     		movs	r2, #0
 971 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 972              		.loc 1 286 0
 973 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 974              		.loc 1 288 0
 975 0070 1846     		mov	r0, r3
 976 0072 1837     		adds	r7, r7, #24
 977              		.cfi_def_cfa_offset 8
 978 0074 BD46     		mov	sp, r7
 979              		.cfi_def_cfa_register 13
 980              		@ sp needed
 981 0076 80BD     		pop	{r7, pc}
 982              		.cfi_endproc
 983              	.LFE74:
 984              		.size	extract_string, .-extract_string
 985              		.section	.rodata
 986              		.align	2
 987              	.LC12:
 988 016c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 988      20746F20 
 988      636F6E6E 
 988      65637420 
 988      746F206E 
 989 0193 00       		.align	2
 990              	.LC13:
 991 0194 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 991      6D207469 
 991      6D656420 
 991      6F757420 
 991      6F6E206E 
 992 01b7 00       		.align	2
 993              	.LC14:
 994 01b8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 994      69726564 
 994      20495020 
 994      61646472 
 994      6573733A 
 995              		.align	2
 996              	.LC15:
 997 01d8 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 997      6D207469 
 997      6D656420 
 997      6F757420 
 997      6F6E2049 
 998              		.section	.text.modem_process_tasks,"ax",%progbits
 999              		.align	2
 1000              		.global	modem_process_tasks
 1001              		.thumb
 1002              		.thumb_func
 1003              		.type	modem_process_tasks, %function
 1004              	modem_process_tasks:
 1005              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 25


 291:modem.c       **** uint8 modem_process_tasks(){
 1006              		.loc 1 291 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 8
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 82B0     		sub	sp, sp, #8
 1015              		.cfi_def_cfa_offset 16
 1016 0004 00AF     		add	r7, sp, #0
 1017              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1018              		.loc 1 293 0
 1019 0006 464B     		ldr	r3, .L73
 1020 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 000a 012B     		cmp	r3, #1
 1022 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1023              		.loc 1 295 0
 1024 000e FFF7FEFF 		bl	getTimeStamp
 1025 0012 0246     		mov	r2, r0
 1026 0014 434B     		ldr	r3, .L73+4
 1027 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1028              		.loc 1 296 0
 1029 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1030              		.loc 1 297 0
 1031 001c 404B     		ldr	r3, .L73
 1032 001e 0222     		movs	r2, #2
 1033 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1034              		.loc 1 298 0
 1035 0022 0123     		movs	r3, #1
 1036 0024 77E0     		b	.L61
 1037              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1038              		.loc 1 302 0
 1039 0026 3E4B     		ldr	r3, .L73
 1040 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 002a 022B     		cmp	r3, #2
 1042 002c 44D1     		bne	.L62
 1043              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1044              		.loc 1 305 0
 1045 002e 0023     		movs	r3, #0
 1046 0030 FB71     		strb	r3, [r7, #7]
 1047 0032 10E0     		b	.L63
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 26


 1048              	.L66:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1049              		.loc 1 307 0
 1050 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If cell signal (rsrp) is strong enough, break and connect to the network
 309:modem.c       ****             // Otherwise, keep checking rsrp
 310:modem.c       ****             if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1051              		.loc 1 310 0
 1052 0038 3B4B     		ldr	r3, .L73+8
 1053 003a 5B69     		ldr	r3, [r3, #20]
 1054 003c 1A2B     		cmp	r3, #26
 1055 003e 03DD     		ble	.L64
 1056              		.loc 1 310 0 is_stmt 0 discriminator 1
 1057 0040 394B     		ldr	r3, .L73+8
 1058 0042 5B69     		ldr	r3, [r3, #20]
 1059 0044 FF2B     		cmp	r3, #255
 1060 0046 0AD1     		bne	.L72
 1061              	.L64:
 311:modem.c       ****                 break;
 312:modem.c       ****             }
 313:modem.c       ****             // Delay for 1 second
 314:modem.c       ****             CyDelay(1000u);
 1062              		.loc 1 314 0 is_stmt 1 discriminator 2
 1063 0048 4FF47A70 		mov	r0, #1000
 1064 004c FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1065              		.loc 1 305 0 discriminator 2
 1066 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1067 0052 0133     		adds	r3, r3, #1
 1068 0054 FB71     		strb	r3, [r7, #7]
 1069              	.L63:
 305:modem.c       ****             // Get cell network stats
 1070              		.loc 1 305 0 is_stmt 0 discriminator 1
 1071 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1072 0058 1D2B     		cmp	r3, #29
 1073 005a EBD9     		bls	.L66
 1074 005c 00E0     		b	.L65
 1075              	.L72:
 311:modem.c       ****                 break;
 1076              		.loc 1 311 0 is_stmt 1
 1077 005e 00BF     		nop
 1078              	.L65:
 1079              	.LBE7:
 315:modem.c       ****         }
 316:modem.c       ****         
 317:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 318:modem.c       ****         if(is_connected_to_cell_network()){
 1080              		.loc 1 318 0
 1081 0060 FFF7FEFF 		bl	is_connected_to_cell_network
 1082 0064 0346     		mov	r3, r0
 1083 0066 002B     		cmp	r3, #0
 1084 0068 13D0     		beq	.L67
 319:modem.c       ****       
 320:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1085              		.loc 1 320 0
 1086 006a FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 27


 1087 006e 0246     		mov	r2, r0
 1088 0070 2C4B     		ldr	r3, .L73+4
 1089 0072 1B68     		ldr	r3, [r3]
 1090 0074 D31A     		subs	r3, r2, r3
 1091 0076 2C4A     		ldr	r2, .L73+8
 1092 0078 9361     		str	r3, [r2, #24]
 321:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1093              		.loc 1 321 0
 1094 007a 2B4B     		ldr	r3, .L73+8
 1095 007c 9B69     		ldr	r3, [r3, #24]
 1096 007e 1A46     		mov	r2, r3
 1097 0080 2A49     		ldr	r1, .L73+12
 1098 0082 0020     		movs	r0, #0
 1099 0084 FFF7FEFF 		bl	printNotif
 322:modem.c       ****                                             modem_stats.time_to_network_connect);
 323:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1100              		.loc 1 323 0
 1101 0088 FFF7FEFF 		bl	set_up_internet_connection
 324:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1102              		.loc 1 324 0
 1103 008c 244B     		ldr	r3, .L73
 1104 008e 0322     		movs	r2, #3
 1105 0090 1A70     		strb	r2, [r3]
 1106              	.L67:
 325:modem.c       ****         }
 326:modem.c       ****         
 327:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 328:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1107              		.loc 1 328 0
 1108 0092 FFF7FEFF 		bl	getTimeStamp
 1109 0096 0246     		mov	r2, r0
 1110 0098 224B     		ldr	r3, .L73+4
 1111 009a 1B68     		ldr	r3, [r3]
 1112 009c D31A     		subs	r3, r2, r3
 1113 009e B42B     		cmp	r3, #180
 1114 00a0 08DD     		ble	.L68
 329:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1115              		.loc 1 329 0
 1116 00a2 1F4B     		ldr	r3, .L73
 1117 00a4 0022     		movs	r2, #0
 1118 00a6 1A70     		strb	r2, [r3]
 330:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1119              		.loc 1 330 0
 1120 00a8 FFF7FEFF 		bl	modem_power_down
 331:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1121              		.loc 1 331 0
 1122 00ac 2049     		ldr	r1, .L73+16
 1123 00ae 0220     		movs	r0, #2
 1124 00b0 FFF7FEFF 		bl	printNotif
 1125              	.L68:
 332:modem.c       ****             
 333:modem.c       ****         }
 334:modem.c       ****         return 0u;//ok to hand off to sleep
 1126              		.loc 1 334 0
 1127 00b4 0023     		movs	r3, #0
 1128 00b6 2EE0     		b	.L61
 1129              	.L62:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 28


 335:modem.c       ****         
 336:modem.c       ****     // Else if modem state is "waiting for IP"
 337:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1130              		.loc 1 337 0
 1131 00b8 194B     		ldr	r3, .L73
 1132 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1133 00bc 032B     		cmp	r3, #3
 1134 00be 29D1     		bne	.L69
 338:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 339:modem.c       ****         if(is_connected_to_internet()){
 1135              		.loc 1 339 0
 1136 00c0 FFF7FEFF 		bl	is_connected_to_internet
 1137 00c4 0346     		mov	r3, r0
 1138 00c6 002B     		cmp	r3, #0
 1139 00c8 11D0     		beq	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1140              		.loc 1 340 0
 1141 00ca 154B     		ldr	r3, .L73
 1142 00cc 0422     		movs	r2, #4
 1143 00ce 1A70     		strb	r2, [r3]
 341:modem.c       ****             // Save/print time to acquire IP address
 342:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1144              		.loc 1 342 0
 1145 00d0 FFF7FEFF 		bl	getTimeStamp
 1146 00d4 0246     		mov	r2, r0
 1147 00d6 134B     		ldr	r3, .L73+4
 1148 00d8 1B68     		ldr	r3, [r3]
 1149 00da D31A     		subs	r3, r2, r3
 1150 00dc 124A     		ldr	r2, .L73+8
 1151 00de D361     		str	r3, [r2, #28]
 343:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1152              		.loc 1 343 0
 1153 00e0 114B     		ldr	r3, .L73+8
 1154 00e2 DB69     		ldr	r3, [r3, #28]
 1155 00e4 1A46     		mov	r2, r3
 1156 00e6 1349     		ldr	r1, .L73+20
 1157 00e8 0020     		movs	r0, #0
 1158 00ea FFF7FEFF 		bl	printNotif
 1159              	.L70:
 344:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 345:modem.c       ****         }
 346:modem.c       ****         
 347:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 348:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1160              		.loc 1 348 0
 1161 00ee FFF7FEFF 		bl	getTimeStamp
 1162 00f2 0246     		mov	r2, r0
 1163 00f4 0B4B     		ldr	r3, .L73+4
 1164 00f6 1B68     		ldr	r3, [r3]
 1165 00f8 D31A     		subs	r3, r2, r3
 1166 00fa E62B     		cmp	r3, #230
 1167 00fc 08DD     		ble	.L71
 349:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1168              		.loc 1 349 0
 1169 00fe 084B     		ldr	r3, .L73
 1170 0100 0022     		movs	r2, #0
 1171 0102 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 29


 350:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1172              		.loc 1 350 0
 1173 0104 FFF7FEFF 		bl	modem_power_down
 351:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1174              		.loc 1 351 0
 1175 0108 0B49     		ldr	r1, .L73+24
 1176 010a 0220     		movs	r0, #2
 1177 010c FFF7FEFF 		bl	printNotif
 1178              	.L71:
 352:modem.c       ****       
 353:modem.c       ****         }
 354:modem.c       ****         return 0u;//ok to hand off to sleep
 1179              		.loc 1 354 0
 1180 0110 0023     		movs	r3, #0
 1181 0112 00E0     		b	.L61
 1182              	.L69:
 355:modem.c       ****     }
 356:modem.c       ****     
 357:modem.c       ****     return 0u;
 1183              		.loc 1 357 0
 1184 0114 0023     		movs	r3, #0
 1185              	.L61:
 358:modem.c       ****     
 359:modem.c       **** }
 1186              		.loc 1 359 0
 1187 0116 1846     		mov	r0, r3
 1188 0118 0837     		adds	r7, r7, #8
 1189              		.cfi_def_cfa_offset 8
 1190 011a BD46     		mov	sp, r7
 1191              		.cfi_def_cfa_register 13
 1192              		@ sp needed
 1193 011c 80BD     		pop	{r7, pc}
 1194              	.L74:
 1195 011e 00BF     		.align	2
 1196              	.L73:
 1197 0120 00000000 		.word	modem_state
 1198 0124 00000000 		.word	modem_start_time_stamp
 1199 0128 00000000 		.word	modem_stats
 1200 012c 6C010000 		.word	.LC12
 1201 0130 94010000 		.word	.LC13
 1202 0134 B8010000 		.word	.LC14
 1203 0138 D8010000 		.word	.LC15
 1204              		.cfi_endproc
 1205              	.LFE75:
 1206              		.size	modem_process_tasks, .-modem_process_tasks
 1207              		.section	.rodata
 1208 01ff 00       		.align	2
 1209              	.LC16:
 1210 0200 43686563 		.ascii	"Checking AT+CREG?\000"
 1210      6B696E67 
 1210      2041542B 
 1210      43524547 
 1210      3F00
 1211 0212 0000     		.align	2
 1212              	.LC17:
 1213 0214 41542B43 		.ascii	"AT+CREG?\015\000"
 1213      5245473F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 30


 1213      0D00
 1214 021e 0000     		.align	2
 1215              	.LC18:
 1216 0220 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1216      61637469 
 1216      6E672073 
 1216      7472696E 
 1216      67204154 
 1217 023b 00       		.align	2
 1218              	.LC19:
 1219 023c 75617274 		.ascii	"uart_received_string: %s\000"
 1219      5F726563 
 1219      65697665 
 1219      645F7374 
 1219      72696E67 
 1220 0255 000000   		.align	2
 1221              	.LC20:
 1222 0258 0D00     		.ascii	"\015\000"
 1223 025a 0000     		.align	2
 1224              	.LC21:
 1225 025c 3A2000   		.ascii	": \000"
 1226 025f 00       		.align	2
 1227              	.LC22:
 1228 0260 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1228      73746572 
 1228      65642074 
 1228      6F206E65 
 1228      74776F72 
 1229              		.align	2
 1230              	.LC23:
 1231 0280 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1231      20657874 
 1231      72616369 
 1231      6E672073 
 1231      7472696E 
 1232 029f 00       		.align	2
 1233              	.LC24:
 1234 02a0 302C3100 		.ascii	"0,1\000"
 1235              		.align	2
 1236              	.LC25:
 1237 02a4 302C3500 		.ascii	"0,5\000"
 1238              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1239              		.align	2
 1240              		.global	is_connected_to_cell_network
 1241              		.thumb
 1242              		.thumb_func
 1243              		.type	is_connected_to_cell_network, %function
 1244              	is_connected_to_cell_network:
 1245              	.LFB76:
 360:modem.c       **** 
 361:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 362:modem.c       **** uint8 is_connected_to_cell_network(){
 1246              		.loc 1 362 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 16
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 31


 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 7, -8
 1253              		.cfi_offset 14, -4
 1254 0002 84B0     		sub	sp, sp, #16
 1255              		.cfi_def_cfa_offset 24
 1256 0004 00AF     		add	r7, sp, #0
 1257              		.cfi_def_cfa_register 7
 363:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 364:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1258              		.loc 1 364 0
 1259 0006 2049     		ldr	r1, .L80
 1260 0008 0020     		movs	r0, #0
 1261 000a FFF7FEFF 		bl	printNotif
 365:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 366:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1262              		.loc 1 366 0
 1263 000e 4FF4FA62 		mov	r2, #2000
 1264 0012 1E49     		ldr	r1, .L80+4
 1265 0014 1E48     		ldr	r0, .L80+8
 1266 0016 FFF7FEFF 		bl	at_write_command
 1267 001a 0346     		mov	r3, r0
 1268 001c FB73     		strb	r3, [r7, #15]
 367:modem.c       ****     
 368:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1269              		.loc 1 368 0
 1270 001e 1D49     		ldr	r1, .L80+12
 1271 0020 0020     		movs	r0, #0
 1272 0022 FFF7FEFF 		bl	printNotif
 369:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1273              		.loc 1 369 0
 1274 0026 1C4A     		ldr	r2, .L80+16
 1275 0028 1C49     		ldr	r1, .L80+20
 1276 002a 0020     		movs	r0, #0
 1277 002c FFF7FEFF 		bl	printNotif
 370:modem.c       ****     
 371:modem.c       ****     // If the modem has a status
 372:modem.c       ****     if(status){
 1278              		.loc 1 372 0
 1279 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1280 0032 002B     		cmp	r3, #0
 1281 0034 23D0     		beq	.L76
 1282              	.LBB8:
 373:modem.c       ****         // Create a character array of length 10 called creg
 374:modem.c       ****         char creg[10];
 375:modem.c       ****         creg[0] = '\0';
 1283              		.loc 1 375 0
 1284 0036 0023     		movs	r3, #0
 1285 0038 3B71     		strb	r3, [r7, #4]
 376:modem.c       ****         // Extract string from the UART
 377:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1286              		.loc 1 377 0
 1287 003a 3B1D     		adds	r3, r7, #4
 1288 003c 184A     		ldr	r2, .L80+24
 1289 003e 1949     		ldr	r1, .L80+28
 1290 0040 1548     		ldr	r0, .L80+16
 1291 0042 FFF7FEFF 		bl	extract_string
 378:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 32


 1292              		.loc 1 378 0
 1293 0046 3B1D     		adds	r3, r7, #4
 1294 0048 1A46     		mov	r2, r3
 1295 004a 1749     		ldr	r1, .L80+32
 1296 004c 0020     		movs	r0, #0
 1297 004e FFF7FEFF 		bl	printNotif
 379:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1298              		.loc 1 379 0
 1299 0052 1649     		ldr	r1, .L80+36
 1300 0054 0020     		movs	r0, #0
 1301 0056 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     
 381:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 382:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1302              		.loc 1 382 0
 1303 005a 3B1D     		adds	r3, r7, #4
 1304 005c 1449     		ldr	r1, .L80+40
 1305 005e 1846     		mov	r0, r3
 1306 0060 FFF7FEFF 		bl	strstr
 1307 0064 0346     		mov	r3, r0
 1308 0066 002B     		cmp	r3, #0
 1309 0068 07D1     		bne	.L77
 1310              		.loc 1 382 0 is_stmt 0 discriminator 1
 1311 006a 3B1D     		adds	r3, r7, #4
 1312 006c 1149     		ldr	r1, .L80+44
 1313 006e 1846     		mov	r0, r3
 1314 0070 FFF7FEFF 		bl	strstr
 1315 0074 0346     		mov	r3, r0
 1316 0076 002B     		cmp	r3, #0
 1317 0078 01D0     		beq	.L76
 1318              	.L77:
 383:modem.c       ****             return 1u;
 1319              		.loc 1 383 0 is_stmt 1
 1320 007a 0123     		movs	r3, #1
 1321 007c 00E0     		b	.L79
 1322              	.L76:
 1323              	.LBE8:
 384:modem.c       ****         }
 385:modem.c       ****     }
 386:modem.c       ****     // If the modem doesn't have a status, return 0u
 387:modem.c       ****     return 0u;
 1324              		.loc 1 387 0
 1325 007e 0023     		movs	r3, #0
 1326              	.L79:
 388:modem.c       ****         
 389:modem.c       **** }
 1327              		.loc 1 389 0
 1328 0080 1846     		mov	r0, r3
 1329 0082 1037     		adds	r7, r7, #16
 1330              		.cfi_def_cfa_offset 8
 1331 0084 BD46     		mov	sp, r7
 1332              		.cfi_def_cfa_register 13
 1333              		@ sp needed
 1334 0086 80BD     		pop	{r7, pc}
 1335              	.L81:
 1336              		.align	2
 1337              	.L80:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 33


 1338 0088 00020000 		.word	.LC16
 1339 008c 00000000 		.word	.LC0
 1340 0090 14020000 		.word	.LC17
 1341 0094 20020000 		.word	.LC18
 1342 0098 00000000 		.word	uart_received_string
 1343 009c 3C020000 		.word	.LC19
 1344 00a0 58020000 		.word	.LC20
 1345 00a4 5C020000 		.word	.LC21
 1346 00a8 60020000 		.word	.LC22
 1347 00ac 80020000 		.word	.LC23
 1348 00b0 A0020000 		.word	.LC24
 1349 00b4 A4020000 		.word	.LC25
 1350              		.cfi_endproc
 1351              	.LFE76:
 1352              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1353              		.section	.rodata
 1354              		.align	2
 1355              	.LC26:
 1356 02a8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1356      47414354 
 1356      3D312C31 
 1356      0D0A00
 1357              		.section	.text.set_up_internet_connection,"ax",%progbits
 1358              		.align	2
 1359              		.global	set_up_internet_connection
 1360              		.thumb
 1361              		.thumb_func
 1362              		.type	set_up_internet_connection, %function
 1363              	set_up_internet_connection:
 1364              	.LFB77:
 390:modem.c       **** 
 391:modem.c       **** // Connect the modem to the internet
 392:modem.c       **** void set_up_internet_connection(){
 1365              		.loc 1 392 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369 0000 80B5     		push	{r7, lr}
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 7, -8
 1372              		.cfi_offset 14, -4
 1373 0002 00AF     		add	r7, sp, #0
 1374              		.cfi_def_cfa_register 7
 393:modem.c       ****     
 394:modem.c       ****     //port 3
 395:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 396:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 397:modem.c       ****     
 398:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 399:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 400:modem.c       ****     // <cid>,<stat>
 401:modem.c       ****    
 402:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 403:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1375              		.loc 1 403 0
 1376 0004 4FF47A72 		mov	r2, #1000
 1377 0008 0249     		ldr	r1, .L83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 34


 1378 000a 0348     		ldr	r0, .L83+4
 1379 000c FFF7FEFF 		bl	at_write_command
 404:modem.c       ****     
 405:modem.c       **** }
 1380              		.loc 1 405 0
 1381 0010 00BF     		nop
 1382 0012 80BD     		pop	{r7, pc}
 1383              	.L84:
 1384              		.align	2
 1385              	.L83:
 1386 0014 00000000 		.word	.LC0
 1387 0018 A8020000 		.word	.LC26
 1388              		.cfi_endproc
 1389              	.LFE77:
 1390              		.size	set_up_internet_connection, .-set_up_internet_connection
 1391              		.section	.rodata
 1392 02b7 00       		.align	2
 1393              	.LC27:
 1394 02b8 312C3100 		.ascii	"1,1\000"
 1395              		.align	2
 1396              	.LC28:
 1397 02bc 41542353 		.ascii	"AT#SGACT?\015\000"
 1397      47414354 
 1397      3F0D00
 1398              		.section	.text.is_connected_to_internet,"ax",%progbits
 1399              		.align	2
 1400              		.global	is_connected_to_internet
 1401              		.thumb
 1402              		.thumb_func
 1403              		.type	is_connected_to_internet, %function
 1404              	is_connected_to_internet:
 1405              	.LFB78:
 406:modem.c       **** 
 407:modem.c       **** // Checks if the modem is connected to the internet
 408:modem.c       **** uint8 is_connected_to_internet(){
 1406              		.loc 1 408 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 1, uses_anonymous_args = 0
 1410 0000 80B5     		push	{r7, lr}
 1411              		.cfi_def_cfa_offset 8
 1412              		.cfi_offset 7, -8
 1413              		.cfi_offset 14, -4
 1414 0002 00AF     		add	r7, sp, #0
 1415              		.cfi_def_cfa_register 7
 409:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 410:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 411:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 412:modem.c       ****     // Check for 3,1 if Verizon 
 413:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1416              		.loc 1 413 0
 1417 0004 4FF4FA62 		mov	r2, #2000
 1418 0008 0549     		ldr	r1, .L88
 1419 000a 0648     		ldr	r0, .L88+4
 1420 000c FFF7FEFF 		bl	at_write_command
 1421 0010 0346     		mov	r3, r0
 1422 0012 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 35


 1423 0014 01D0     		beq	.L86
 414:modem.c       ****         return 1u;
 1424              		.loc 1 414 0
 1425 0016 0123     		movs	r3, #1
 1426 0018 00E0     		b	.L87
 1427              	.L86:
 415:modem.c       ****     }
 416:modem.c       ****     return 0u;  
 1428              		.loc 1 416 0
 1429 001a 0023     		movs	r3, #0
 1430              	.L87:
 417:modem.c       **** }
 1431              		.loc 1 417 0
 1432 001c 1846     		mov	r0, r3
 1433 001e 80BD     		pop	{r7, pc}
 1434              	.L89:
 1435              		.align	2
 1436              	.L88:
 1437 0020 B8020000 		.word	.LC27
 1438 0024 BC020000 		.word	.LC28
 1439              		.cfi_endproc
 1440              	.LFE78:
 1441              		.size	is_connected_to_internet, .-is_connected_to_internet
 1442              		.section	.rodata
 1443 02c7 00       		.align	2
 1444              	.LC29:
 1445 02c8 41542B43 		.ascii	"AT+CESQ\015\000"
 1445      4553510D 
 1445      00
 1446 02d1 000000   		.align	2
 1447              	.LC30:
 1448 02d4 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1448      4553513A 
 1448      2025642C 
 1448      25642C25 
 1448      642C2564 
 1449              		.section	.text.get_cell_network_stats,"ax",%progbits
 1450              		.align	2
 1451              		.global	get_cell_network_stats
 1452              		.thumb
 1453              		.thumb_func
 1454              		.type	get_cell_network_stats, %function
 1455              	get_cell_network_stats:
 1456              	.LFB79:
 418:modem.c       **** 
 419:modem.c       **** void get_cell_network_stats(){
 1457              		.loc 1 419 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0000 80B5     		push	{r7, lr}
 1462              		.cfi_def_cfa_offset 8
 1463              		.cfi_offset 7, -8
 1464              		.cfi_offset 14, -4
 1465 0002 86B0     		sub	sp, sp, #24
 1466              		.cfi_def_cfa_offset 32
 1467 0004 04AF     		add	r7, sp, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 36


 1468              		.cfi_def_cfa 7, 16
 420:modem.c       ****     // Initialize values
 421:modem.c       ****     modem_stats.ber = 255;
 1469              		.loc 1 421 0
 1470 0006 154B     		ldr	r3, .L91
 1471 0008 FF22     		movs	r2, #255
 1472 000a 5A60     		str	r2, [r3, #4]
 422:modem.c       ****     modem_stats.ecno = 255;
 1473              		.loc 1 422 0
 1474 000c 134B     		ldr	r3, .L91
 1475 000e FF22     		movs	r2, #255
 1476 0010 DA60     		str	r2, [r3, #12]
 423:modem.c       ****     modem_stats.rscp = 255;
 1477              		.loc 1 423 0
 1478 0012 124B     		ldr	r3, .L91
 1479 0014 FF22     		movs	r2, #255
 1480 0016 9A60     		str	r2, [r3, #8]
 424:modem.c       ****     modem_stats.rsrp = 255;
 1481              		.loc 1 424 0
 1482 0018 104B     		ldr	r3, .L91
 1483 001a FF22     		movs	r2, #255
 1484 001c 5A61     		str	r2, [r3, #20]
 425:modem.c       ****     modem_stats.rsrq = 255;
 1485              		.loc 1 425 0
 1486 001e 0F4B     		ldr	r3, .L91
 1487 0020 FF22     		movs	r2, #255
 1488 0022 1A61     		str	r2, [r3, #16]
 426:modem.c       ****     modem_stats.rxlev = 255;
 1489              		.loc 1 426 0
 1490 0024 0D4B     		ldr	r3, .L91
 1491 0026 FF22     		movs	r2, #255
 1492 0028 1A60     		str	r2, [r3]
 427:modem.c       **** 
 428:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 429:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1493              		.loc 1 429 0
 1494 002a 4FF4FA62 		mov	r2, #2000
 1495 002e 0C49     		ldr	r1, .L91+4
 1496 0030 0C48     		ldr	r0, .L91+8
 1497 0032 FFF7FEFF 		bl	at_write_command
 430:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 431:modem.c       **** 
 432:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1498              		.loc 1 432 0
 1499 0036 0C4B     		ldr	r3, .L91+12
 1500 0038 0393     		str	r3, [sp, #12]
 1501 003a 0C4B     		ldr	r3, .L91+16
 1502 003c 0293     		str	r3, [sp, #8]
 1503 003e 0C4B     		ldr	r3, .L91+20
 1504 0040 0193     		str	r3, [sp, #4]
 1505 0042 0C4B     		ldr	r3, .L91+24
 1506 0044 0093     		str	r3, [sp]
 1507 0046 0C4B     		ldr	r3, .L91+28
 1508 0048 044A     		ldr	r2, .L91
 1509 004a 0C49     		ldr	r1, .L91+32
 1510 004c 0C48     		ldr	r0, .L91+36
 1511 004e FFF7FEFF 		bl	sscanf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 37


 1512 0052 7860     		str	r0, [r7, #4]
 433:modem.c       ****         &modem_stats.rxlev,
 434:modem.c       ****         &modem_stats.ber,
 435:modem.c       ****         &modem_stats.rscp,
 436:modem.c       ****         &modem_stats.ecno,
 437:modem.c       ****         &modem_stats.rsrq,
 438:modem.c       ****         &modem_stats.rsrp);
 439:modem.c       **** 
 440:modem.c       ****         //check to see if we’re getting a good received signal strength
 441:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 442:modem.c       ****         //    break;
 443:modem.c       ****         //}
 444:modem.c       ****         // Delay one second
 445:modem.c       ****         //CyDelay(1000u);
 446:modem.c       ****     //}
 447:modem.c       **** }
 1513              		.loc 1 447 0
 1514 0054 00BF     		nop
 1515 0056 0837     		adds	r7, r7, #8
 1516              		.cfi_def_cfa_offset 8
 1517 0058 BD46     		mov	sp, r7
 1518              		.cfi_def_cfa_register 13
 1519              		@ sp needed
 1520 005a 80BD     		pop	{r7, pc}
 1521              	.L92:
 1522              		.align	2
 1523              	.L91:
 1524 005c 00000000 		.word	modem_stats
 1525 0060 00000000 		.word	.LC0
 1526 0064 C8020000 		.word	.LC29
 1527 0068 14000000 		.word	modem_stats+20
 1528 006c 10000000 		.word	modem_stats+16
 1529 0070 0C000000 		.word	modem_stats+12
 1530 0074 08000000 		.word	modem_stats+8
 1531 0078 04000000 		.word	modem_stats+4
 1532 007c D4020000 		.word	.LC30
 1533 0080 00000000 		.word	uart_received_string
 1534              		.cfi_endproc
 1535              	.LFE79:
 1536              		.size	get_cell_network_stats, .-get_cell_network_stats
 1537              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1538              		.align	2
 1539              		.global	updatable_parameters_initialize
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	updatable_parameters_initialize, %function
 1543              	updatable_parameters_initialize:
 1544              	.LFB80:
 448:modem.c       **** 
 449:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 450:modem.c       **** void updatable_parameters_initialize(){
 1545              		.loc 1 450 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549              		@ link register save eliminated.
 1550 0000 80B4     		push	{r7}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 38


 1551              		.cfi_def_cfa_offset 4
 1552              		.cfi_offset 7, -4
 1553 0002 00AF     		add	r7, sp, #0
 1554              		.cfi_def_cfa_register 7
 451:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1555              		.loc 1 451 0
 1556 0004 094B     		ldr	r3, .L94
 1557 0006 0022     		movs	r2, #0
 1558 0008 1A70     		strb	r2, [r3]
 452:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_STANDARD;
 1559              		.loc 1 452 0
 1560 000a 084B     		ldr	r3, .L94
 1561 000c 0022     		movs	r2, #0
 1562 000e 5A70     		strb	r2, [r3, #1]
 453:modem.c       ****     updatable_parameters.measure_time = 10u;
 1563              		.loc 1 453 0
 1564 0010 064B     		ldr	r3, .L94
 1565 0012 0A22     		movs	r2, #10
 1566 0014 9A70     		strb	r2, [r3, #2]
 454:modem.c       ****     updatable_parameters.sync_time = 60u;
 1567              		.loc 1 454 0
 1568 0016 054B     		ldr	r3, .L94
 1569 0018 3C22     		movs	r2, #60
 1570 001a DA70     		strb	r2, [r3, #3]
 455:modem.c       ****     updatable_parameters.debug_level = 1u;
 1571              		.loc 1 455 0
 1572 001c 034B     		ldr	r3, .L94
 1573 001e 0122     		movs	r2, #1
 1574 0020 1A71     		strb	r2, [r3, #4]
 456:modem.c       **** }
 1575              		.loc 1 456 0
 1576 0022 00BF     		nop
 1577 0024 BD46     		mov	sp, r7
 1578              		.cfi_def_cfa_register 13
 1579              		@ sp needed
 1580 0026 80BC     		pop	{r7}
 1581              		.cfi_restore 7
 1582              		.cfi_def_cfa_offset 0
 1583 0028 7047     		bx	lr
 1584              	.L95:
 1585 002a 00BF     		.align	2
 1586              	.L94:
 1587 002c 00000000 		.word	updatable_parameters
 1588              		.cfi_endproc
 1589              	.LFE80:
 1590              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1591              		.section	.rodata
 1592 02f2 0000     		.align	2
 1593              	.LC31:
 1594 02f4 4E6F6465 		.ascii	"Node_Type: \000"
 1594      5F547970 
 1594      653A2000 
 1595              		.align	2
 1596              	.LC32:
 1597 0300 53494D5F 		.ascii	"SIM_Type: \000"
 1597      54797065 
 1597      3A2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 39


 1598 030b 00       		.align	2
 1599              	.LC33:
 1600 030c 53616D70 		.ascii	"Sample_Freq: \000"
 1600      6C655F46 
 1600      7265713A 
 1600      2000
 1601 031a 0000     		.align	2
 1602              	.LC34:
 1603 031c 5265706F 		.ascii	"Report_Freq: \000"
 1603      72745F46 
 1603      7265713A 
 1603      2000
 1604 032a 0000     		.align	2
 1605              	.LC35:
 1606 032c 44656275 		.ascii	"Debug_Freq: \000"
 1606      675F4672 
 1606      65713A20 
 1606      00
 1607 0339 000000   		.align	2
 1608              	.LC36:
 1609 033c 256400   		.ascii	"%d\000"
 1610 033f 00       		.align	2
 1611              	.LC37:
 1612 0340 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1612      20747970 
 1612      65206368 
 1612      616E6765 
 1612      6420746F 
 1613 035b 00       		.align	2
 1614              	.LC38:
 1615 035c 436F756C 		.ascii	"Could not change node type.\000"
 1615      64206E6F 
 1615      74206368 
 1615      616E6765 
 1615      206E6F64 
 1616              		.align	2
 1617              	.LC39:
 1618 0378 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1618      74797065 
 1618      20636861 
 1618      6E676564 
 1618      20746F3A 
 1619 0392 0000     		.align	2
 1620              	.LC40:
 1621 0394 436F756C 		.ascii	"Could not change SIM type.\000"
 1621      64206E6F 
 1621      74206368 
 1621      616E6765 
 1621      2053494D 
 1622 03af 00       		.align	2
 1623              	.LC41:
 1624 03b0 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1624      6C696E67 
 1624      20667265 
 1624      7175656E 
 1624      63792063 
 1625              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 40


 1626              	.LC42:
 1627 03d4 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1627      64206E6F 
 1627      74207061 
 1627      72736520 
 1627      6E657720 
 1628 0402 0000     		.align	2
 1629              	.LC43:
 1630 0404 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1630      7274696E 
 1630      67206672 
 1630      65717565 
 1630      6E637920 
 1631 0429 000000   		.align	2
 1632              	.LC44:
 1633 042c 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1633      64206E6F 
 1633      74207061 
 1633      72736520 
 1633      6E657720 
 1634 045b 00       		.align	2
 1635              	.LC45:
 1636 045c 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1636      67207072 
 1636      696E7469 
 1636      6E672066 
 1636      72657175 
 1637 0486 0000     		.align	2
 1638              	.LC46:
 1639 0488 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1639      64206E6F 
 1639      74207061 
 1639      72736520 
 1639      6E657720 
 1640              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1641              		.align	2
 1642              		.global	get_updated_parameters_from_malcom
 1643              		.thumb
 1644              		.thumb_func
 1645              		.type	get_updated_parameters_from_malcom, %function
 1646              	get_updated_parameters_from_malcom:
 1647              	.LFB81:
 457:modem.c       **** 
 458:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 459:modem.c       **** void get_updated_parameters_from_malcom(){
 1648              		.loc 1 459 0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 88
 1651              		@ frame_needed = 1, uses_anonymous_args = 0
 1652 0000 90B5     		push	{r4, r7, lr}
 1653              		.cfi_def_cfa_offset 12
 1654              		.cfi_offset 4, -12
 1655              		.cfi_offset 7, -8
 1656              		.cfi_offset 14, -4
 1657 0002 97B0     		sub	sp, sp, #92
 1658              		.cfi_def_cfa_offset 104
 1659 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 41


 1660              		.cfi_def_cfa_register 7
 460:modem.c       ****     
 461:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 462:modem.c       ****     char s_node_type[10];
 463:modem.c       ****     char s_sim_type[10];
 464:modem.c       ****     char s_sample_freq[10];
 465:modem.c       ****     char s_report_freq[10];
 466:modem.c       ****     char s_debug_freq[10];
 467:modem.c       ****     
 468:modem.c       ****     s_node_type[0] = '\0';
 1661              		.loc 1 468 0
 1662 0006 0023     		movs	r3, #0
 1663 0008 87F84C30 		strb	r3, [r7, #76]
 469:modem.c       ****     s_sim_type[0] = '\0';
 1664              		.loc 1 469 0
 1665 000c 0023     		movs	r3, #0
 1666 000e 87F84030 		strb	r3, [r7, #64]
 470:modem.c       ****     s_sample_freq[0] = '\0';
 1667              		.loc 1 470 0
 1668 0012 0023     		movs	r3, #0
 1669 0014 87F83430 		strb	r3, [r7, #52]
 471:modem.c       ****     s_report_freq[0] = '\0';
 1670              		.loc 1 471 0
 1671 0018 0023     		movs	r3, #0
 1672 001a 87F82830 		strb	r3, [r7, #40]
 472:modem.c       ****     s_debug_freq[0] = '\0';
 1673              		.loc 1 472 0
 1674 001e 0023     		movs	r3, #0
 1675 0020 3B77     		strb	r3, [r7, #28]
 473:modem.c       ****     
 474:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 475:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1676              		.loc 1 475 0
 1677 0022 07F14C03 		add	r3, r7, #76
 1678 0026 644A     		ldr	r2, .L108
 1679 0028 6449     		ldr	r1, .L108+4
 1680 002a 6548     		ldr	r0, .L108+8
 1681 002c FFF7FEFF 		bl	extract_string
 476:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1682              		.loc 1 476 0
 1683 0030 07F14003 		add	r3, r7, #64
 1684 0034 604A     		ldr	r2, .L108
 1685 0036 6349     		ldr	r1, .L108+12
 1686 0038 6148     		ldr	r0, .L108+8
 1687 003a FFF7FEFF 		bl	extract_string
 477:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1688              		.loc 1 477 0
 1689 003e 07F13403 		add	r3, r7, #52
 1690 0042 5D4A     		ldr	r2, .L108
 1691 0044 6049     		ldr	r1, .L108+16
 1692 0046 5E48     		ldr	r0, .L108+8
 1693 0048 FFF7FEFF 		bl	extract_string
 478:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1694              		.loc 1 478 0
 1695 004c 07F12803 		add	r3, r7, #40
 1696 0050 594A     		ldr	r2, .L108
 1697 0052 5E49     		ldr	r1, .L108+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 42


 1698 0054 5A48     		ldr	r0, .L108+8
 1699 0056 FFF7FEFF 		bl	extract_string
 479:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1700              		.loc 1 479 0
 1701 005a 07F11C03 		add	r3, r7, #28
 1702 005e 564A     		ldr	r2, .L108
 1703 0060 5B49     		ldr	r1, .L108+24
 1704 0062 5748     		ldr	r0, .L108+8
 1705 0064 FFF7FEFF 		bl	extract_string
 480:modem.c       ****     
 481:modem.c       ****     // Create variables for what is sent back from the server
 482:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq;
 483:modem.c       ****     
 484:modem.c       ****     // Scan character arrays and save values 
 485:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1706              		.loc 1 485 0
 1707 0068 07F11802 		add	r2, r7, #24
 1708 006c 07F14C03 		add	r3, r7, #76
 1709 0070 5849     		ldr	r1, .L108+28
 1710 0072 1846     		mov	r0, r3
 1711 0074 FFF7FEFF 		bl	sscanf
 1712 0078 0346     		mov	r3, r0
 1713 007a 012B     		cmp	r3, #1
 1714 007c 0AD1     		bne	.L97
 486:modem.c       ****         updatable_parameters.node_type = node_type;
 1715              		.loc 1 486 0
 1716 007e BB69     		ldr	r3, [r7, #24]
 1717 0080 DAB2     		uxtb	r2, r3
 1718 0082 554B     		ldr	r3, .L108+32
 1719 0084 1A70     		strb	r2, [r3]
 487:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1720              		.loc 1 487 0
 1721 0086 BB69     		ldr	r3, [r7, #24]
 1722 0088 1A46     		mov	r2, r3
 1723 008a 5449     		ldr	r1, .L108+36
 1724 008c 0020     		movs	r0, #0
 1725 008e FFF7FEFF 		bl	printNotif
 1726 0092 03E0     		b	.L98
 1727              	.L97:
 488:modem.c       ****     }else{
 489:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1728              		.loc 1 489 0
 1729 0094 5249     		ldr	r1, .L108+40
 1730 0096 0220     		movs	r0, #2
 1731 0098 FFF7FEFF 		bl	printNotif
 1732              	.L98:
 490:modem.c       ****     }
 491:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1733              		.loc 1 491 0
 1734 009c 07F11402 		add	r2, r7, #20
 1735 00a0 07F14003 		add	r3, r7, #64
 1736 00a4 4B49     		ldr	r1, .L108+28
 1737 00a6 1846     		mov	r0, r3
 1738 00a8 FFF7FEFF 		bl	sscanf
 1739 00ac 0346     		mov	r3, r0
 1740 00ae 012B     		cmp	r3, #1
 1741 00b0 0ED1     		bne	.L99
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 43


 492:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1742              		.loc 1 492 0
 1743 00b2 7B69     		ldr	r3, [r7, #20]
 1744 00b4 002B     		cmp	r3, #0
 1745 00b6 14BF     		ite	ne
 1746 00b8 0123     		movne	r3, #1
 1747 00ba 0023     		moveq	r3, #0
 1748 00bc DAB2     		uxtb	r2, r3
 1749 00be 464B     		ldr	r3, .L108+32
 1750 00c0 5A70     		strb	r2, [r3, #1]
 493:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1751              		.loc 1 493 0
 1752 00c2 7B69     		ldr	r3, [r7, #20]
 1753 00c4 1A46     		mov	r2, r3
 1754 00c6 4749     		ldr	r1, .L108+44
 1755 00c8 0020     		movs	r0, #0
 1756 00ca FFF7FEFF 		bl	printNotif
 1757 00ce 03E0     		b	.L100
 1758              	.L99:
 494:modem.c       ****     }else{
 495:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1759              		.loc 1 495 0
 1760 00d0 4549     		ldr	r1, .L108+48
 1761 00d2 0220     		movs	r0, #2
 1762 00d4 FFF7FEFF 		bl	printNotif
 1763              	.L100:
 496:modem.c       ****     }
 497:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1764              		.loc 1 497 0
 1765 00d8 07F11002 		add	r2, r7, #16
 1766 00dc 07F13403 		add	r3, r7, #52
 1767 00e0 3C49     		ldr	r1, .L108+28
 1768 00e2 1846     		mov	r0, r3
 1769 00e4 FFF7FEFF 		bl	sscanf
 1770 00e8 0346     		mov	r3, r0
 1771 00ea 012B     		cmp	r3, #1
 1772 00ec 19D1     		bne	.L101
 498:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1773              		.loc 1 498 0
 1774 00ee 3B69     		ldr	r3, [r7, #16]
 1775 00f0 DAB2     		uxtb	r2, r3
 1776 00f2 394B     		ldr	r3, .L108+32
 1777 00f4 9A70     		strb	r2, [r3, #2]
 499:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 500:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1778              		.loc 1 500 0
 1779 00f6 384B     		ldr	r3, .L108+32
 1780 00f8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1781 00fa 99B2     		uxth	r1, r3
 1782 00fc 3B4C     		ldr	r4, .L108+52
 1783 00fe 3846     		mov	r0, r7
 1784 0100 0723     		movs	r3, #7
 1785 0102 0122     		movs	r2, #1
 1786 0104 FFF7FEFF 		bl	CreateAlarm
 1787 0108 2246     		mov	r2, r4
 1788 010a 3B46     		mov	r3, r7
 1789 010c 1968     		ldr	r1, [r3]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 44


 1790 010e 1160     		str	r1, [r2]	@ unaligned
 1791 0110 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1792 0112 9380     		strh	r3, [r2, #4]	@ unaligned
 501:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1793              		.loc 1 501 0
 1794 0114 3B69     		ldr	r3, [r7, #16]
 1795 0116 1A46     		mov	r2, r3
 1796 0118 3549     		ldr	r1, .L108+56
 1797 011a 0020     		movs	r0, #0
 1798 011c FFF7FEFF 		bl	printNotif
 1799 0120 03E0     		b	.L102
 1800              	.L101:
 502:modem.c       ****     }else{
 503:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1801              		.loc 1 503 0
 1802 0122 3449     		ldr	r1, .L108+60
 1803 0124 0220     		movs	r0, #2
 1804 0126 FFF7FEFF 		bl	printNotif
 1805              	.L102:
 504:modem.c       ****     }
 505:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1806              		.loc 1 505 0
 1807 012a 07F10C02 		add	r2, r7, #12
 1808 012e 07F12803 		add	r3, r7, #40
 1809 0132 2849     		ldr	r1, .L108+28
 1810 0134 1846     		mov	r0, r3
 1811 0136 FFF7FEFF 		bl	sscanf
 1812 013a 0346     		mov	r3, r0
 1813 013c 012B     		cmp	r3, #1
 1814 013e 19D1     		bne	.L103
 506:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1815              		.loc 1 506 0
 1816 0140 FB68     		ldr	r3, [r7, #12]
 1817 0142 DAB2     		uxtb	r2, r3
 1818 0144 244B     		ldr	r3, .L108+32
 1819 0146 DA70     		strb	r2, [r3, #3]
 507:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 508:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1820              		.loc 1 508 0
 1821 0148 234B     		ldr	r3, .L108+32
 1822 014a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1823 014c 99B2     		uxth	r1, r3
 1824 014e 2A4C     		ldr	r4, .L108+64
 1825 0150 3846     		mov	r0, r7
 1826 0152 0723     		movs	r3, #7
 1827 0154 0122     		movs	r2, #1
 1828 0156 FFF7FEFF 		bl	CreateAlarm
 1829 015a 2246     		mov	r2, r4
 1830 015c 3B46     		mov	r3, r7
 1831 015e 1968     		ldr	r1, [r3]	@ unaligned
 1832 0160 1160     		str	r1, [r2]	@ unaligned
 1833 0162 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1834 0164 9380     		strh	r3, [r2, #4]	@ unaligned
 509:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1835              		.loc 1 509 0
 1836 0166 FB68     		ldr	r3, [r7, #12]
 1837 0168 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 45


 1838 016a 2449     		ldr	r1, .L108+68
 1839 016c 0020     		movs	r0, #0
 1840 016e FFF7FEFF 		bl	printNotif
 1841 0172 03E0     		b	.L104
 1842              	.L103:
 510:modem.c       ****         }else{
 511:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1843              		.loc 1 511 0
 1844 0174 2249     		ldr	r1, .L108+72
 1845 0176 0220     		movs	r0, #2
 1846 0178 FFF7FEFF 		bl	printNotif
 1847              	.L104:
 512:modem.c       ****     }
 513:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1848              		.loc 1 513 0
 1849 017c 07F10802 		add	r2, r7, #8
 1850 0180 07F11C03 		add	r3, r7, #28
 1851 0184 1349     		ldr	r1, .L108+28
 1852 0186 1846     		mov	r0, r3
 1853 0188 FFF7FEFF 		bl	sscanf
 1854 018c 0346     		mov	r3, r0
 1855 018e 012B     		cmp	r3, #1
 1856 0190 0AD1     		bne	.L105
 514:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1857              		.loc 1 514 0
 1858 0192 BB68     		ldr	r3, [r7, #8]
 1859 0194 DAB2     		uxtb	r2, r3
 1860 0196 104B     		ldr	r3, .L108+32
 1861 0198 1A71     		strb	r2, [r3, #4]
 515:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1862              		.loc 1 515 0
 1863 019a BB68     		ldr	r3, [r7, #8]
 1864 019c 1A46     		mov	r2, r3
 1865 019e 1949     		ldr	r1, .L108+76
 1866 01a0 0020     		movs	r0, #0
 1867 01a2 FFF7FEFF 		bl	printNotif
 516:modem.c       ****     }else{
 517:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 518:modem.c       ****     }
 519:modem.c       **** }
 1868              		.loc 1 519 0
 1869 01a6 03E0     		b	.L107
 1870              	.L105:
 517:modem.c       ****     }
 1871              		.loc 1 517 0
 1872 01a8 1749     		ldr	r1, .L108+80
 1873 01aa 0220     		movs	r0, #2
 1874 01ac FFF7FEFF 		bl	printNotif
 1875              	.L107:
 1876              		.loc 1 519 0
 1877 01b0 00BF     		nop
 1878 01b2 5C37     		adds	r7, r7, #92
 1879              		.cfi_def_cfa_offset 12
 1880 01b4 BD46     		mov	sp, r7
 1881              		.cfi_def_cfa_register 13
 1882              		@ sp needed
 1883 01b6 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 46


 1884              	.L109:
 1885              		.align	2
 1886              	.L108:
 1887 01b8 58020000 		.word	.LC20
 1888 01bc F4020000 		.word	.LC31
 1889 01c0 00000000 		.word	uart_received_string
 1890 01c4 00030000 		.word	.LC32
 1891 01c8 0C030000 		.word	.LC33
 1892 01cc 1C030000 		.word	.LC34
 1893 01d0 2C030000 		.word	.LC35
 1894 01d4 3C030000 		.word	.LC36
 1895 01d8 00000000 		.word	updatable_parameters
 1896 01dc 40030000 		.word	.LC37
 1897 01e0 5C030000 		.word	.LC38
 1898 01e4 78030000 		.word	.LC39
 1899 01e8 94030000 		.word	.LC40
 1900 01ec 00000000 		.word	alarmMeasure
 1901 01f0 B0030000 		.word	.LC41
 1902 01f4 D4030000 		.word	.LC42
 1903 01f8 00000000 		.word	alarmSync
 1904 01fc 04040000 		.word	.LC43
 1905 0200 2C040000 		.word	.LC44
 1906 0204 5C040000 		.word	.LC45
 1907 0208 88040000 		.word	.LC46
 1908              		.cfi_endproc
 1909              	.LFE81:
 1910              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 1911              		.section	.rodata
 1912 04b7 00       		.align	2
 1913              	.LC47:
 1914 04b8 41542343 		.ascii	"AT#CGMM\015\000"
 1914      474D4D0D 
 1914      00
 1915 04c1 000000   		.align	2
 1916              	.LC48:
 1917 04c4 4D6F6465 		.ascii	"Modem Model: %s\000"
 1917      6D204D6F 
 1917      64656C3A 
 1917      20257300 
 1918              		.align	2
 1919              	.LC49:
 1920 04d4 41542343 		.ascii	"AT#CCID\015\000"
 1920      4349440D 
 1920      00
 1921 04dd 000000   		.align	2
 1922              	.LC50:
 1923 04e0 53494D20 		.ascii	"SIM ID: %s\000"
 1923      49443A20 
 1923      257300
 1924 04eb 00       		.align	2
 1925              	.LC51:
 1926 04ec 41542B43 		.ascii	"AT+CGSN\015\000"
 1926      47534E0D 
 1926      00
 1927 04f5 000000   		.align	2
 1928              	.LC52:
 1929 04f8 494D4549 		.ascii	"IMEI: %s\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 47


 1929      3A202573 
 1929      00
 1930 0501 000000   		.align	2
 1931              	.LC53:
 1932 0504 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 1932      4744434F 
 1932      4E543D31 
 1932      2C224950 
 1932      222C2277 
 1933 052d 00       		.ascii	"\000"
 1934 052e 0000     		.align	2
 1935              	.LC54:
 1936 0530 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 1936      4744434F 
 1936      4E543D31 
 1936      2C224950 
 1936      222C2273 
 1937              		.align	2
 1938              	.LC55:
 1939 054c 41542B43 		.ascii	"AT+CFUN?\015\000"
 1939      46554E3F 
 1939      0D00
 1940 0556 0000     		.align	2
 1941              	.LC56:
 1942 0558 4346554E 		.ascii	"CFUN: %s\000"
 1942      3A202573 
 1942      00
 1943 0561 000000   		.align	2
 1944              	.LC57:
 1945 0564 41542B43 		.ascii	"AT+CFUN=1\015\000"
 1945      46554E3D 
 1945      310D00
 1946              		.section	.text.modem_configure_settings,"ax",%progbits
 1947              		.align	2
 1948              		.global	modem_configure_settings
 1949              		.thumb
 1950              		.thumb_func
 1951              		.type	modem_configure_settings, %function
 1952              	modem_configure_settings:
 1953              	.LFB82:
 520:modem.c       ****     
 521:modem.c       **** // Configure the modem settings
 522:modem.c       **** void modem_configure_settings(){
 1954              		.loc 1 522 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 16
 1957              		@ frame_needed = 1, uses_anonymous_args = 0
 1958 0000 80B5     		push	{r7, lr}
 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 7, -8
 1961              		.cfi_offset 14, -4
 1962 0002 84B0     		sub	sp, sp, #16
 1963              		.cfi_def_cfa_offset 24
 1964 0004 00AF     		add	r7, sp, #0
 1965              		.cfi_def_cfa_register 7
 523:modem.c       ****     
 524:modem.c       ****     // Save/print modem model ID number
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 48


 525:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 1966              		.loc 1 525 0
 1967 0006 454B     		ldr	r3, .L119
 1968 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1969 000a 002B     		cmp	r3, #0
 1970 000c 13D1     		bne	.L111
 526:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 527:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 1971              		.loc 1 527 0
 1972 000e 4FF4FA62 		mov	r2, #2000
 1973 0012 4349     		ldr	r1, .L119+4
 1974 0014 4348     		ldr	r0, .L119+8
 1975 0016 FFF7FEFF 		bl	at_write_command
 1976 001a 0346     		mov	r3, r0
 1977 001c 002B     		cmp	r3, #0
 1978 001e 0AD0     		beq	.L111
 528:modem.c       ****             // Extract modem model ID number string from the UART
 529:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 1979              		.loc 1 529 0
 1980 0020 414B     		ldr	r3, .L119+12
 1981 0022 424A     		ldr	r2, .L119+16
 1982 0024 4249     		ldr	r1, .L119+20
 1983 0026 4348     		ldr	r0, .L119+24
 1984 0028 FFF7FEFF 		bl	extract_string
 530:modem.c       ****             // Print modem model ID number
 531:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 1985              		.loc 1 531 0
 1986 002c 3E4A     		ldr	r2, .L119+12
 1987 002e 4249     		ldr	r1, .L119+28
 1988 0030 0020     		movs	r0, #0
 1989 0032 FFF7FEFF 		bl	printNotif
 1990              	.L111:
 532:modem.c       ****         }
 533:modem.c       ****     }
 534:modem.c       ****     
 535:modem.c       ****    // Save/print SIM-card ID
 536:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 1991              		.loc 1 536 0
 1992 0036 394B     		ldr	r3, .L119
 1993 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1994 003a 002B     		cmp	r3, #0
 1995 003c 13D1     		bne	.L112
 537:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 538:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 1996              		.loc 1 538 0
 1997 003e 4FF4FA62 		mov	r2, #2000
 1998 0042 3749     		ldr	r1, .L119+4
 1999 0044 3D48     		ldr	r0, .L119+32
 2000 0046 FFF7FEFF 		bl	at_write_command
 2001 004a 0346     		mov	r3, r0
 2002 004c 002B     		cmp	r3, #0
 2003 004e 0AD0     		beq	.L112
 539:modem.c       ****             // Extract SIM-card ID string from the UART
 540:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2004              		.loc 1 540 0
 2005 0050 324B     		ldr	r3, .L119
 2006 0052 364A     		ldr	r2, .L119+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 49


 2007 0054 3649     		ldr	r1, .L119+20
 2008 0056 3748     		ldr	r0, .L119+24
 2009 0058 FFF7FEFF 		bl	extract_string
 541:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2010              		.loc 1 541 0
 2011 005c 2F4A     		ldr	r2, .L119
 2012 005e 3849     		ldr	r1, .L119+36
 2013 0060 0020     		movs	r0, #0
 2014 0062 FFF7FEFF 		bl	printNotif
 2015              	.L112:
 542:modem.c       ****         }
 543:modem.c       ****    }
 544:modem.c       **** 
 545:modem.c       ****     // Save/print modem IMEI
 546:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2016              		.loc 1 546 0
 2017 0066 2D4B     		ldr	r3, .L119
 2018 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2019 006c 002B     		cmp	r3, #0
 2020 006e 13D1     		bne	.L113
 547:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 548:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2021              		.loc 1 548 0
 2022 0070 4FF4FA62 		mov	r2, #2000
 2023 0074 2A49     		ldr	r1, .L119+4
 2024 0076 3348     		ldr	r0, .L119+40
 2025 0078 FFF7FEFF 		bl	at_write_command
 2026 007c 0346     		mov	r3, r0
 2027 007e 002B     		cmp	r3, #0
 2028 0080 0AD0     		beq	.L113
 549:modem.c       ****             // Extract modem IMEI number string from the UART
 550:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2029              		.loc 1 550 0
 2030 0082 314B     		ldr	r3, .L119+44
 2031 0084 294A     		ldr	r2, .L119+16
 2032 0086 2A49     		ldr	r1, .L119+20
 2033 0088 2A48     		ldr	r0, .L119+24
 2034 008a FFF7FEFF 		bl	extract_string
 551:modem.c       ****             // Print modem IMEI number
 552:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2035              		.loc 1 552 0
 2036 008e 2E4A     		ldr	r2, .L119+44
 2037 0090 2E49     		ldr	r1, .L119+48
 2038 0092 0020     		movs	r0, #0
 2039 0094 FFF7FEFF 		bl	printNotif
 2040              	.L113:
 553:modem.c       ****         } 
 554:modem.c       ****     }
 555:modem.c       ****     
 556:modem.c       ****     // Configure protocol and cellular end point
 557:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 558:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2041              		.loc 1 558 0
 2042 0098 2D4B     		ldr	r3, .L119+52
 2043 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2044 009c 83F00103 		eor	r3, r3, #1
 2045 00a0 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 50


 2046 00a2 002B     		cmp	r3, #0
 2047 00a4 06D0     		beq	.L114
 559:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2048              		.loc 1 559 0
 2049 00a6 4FF4FA62 		mov	r2, #2000
 2050 00aa 1D49     		ldr	r1, .L119+4
 2051 00ac 2948     		ldr	r0, .L119+56
 2052 00ae FFF7FEFF 		bl	at_write_command
 2053 00b2 09E0     		b	.L115
 2054              	.L114:
 560:modem.c       ****     
 561:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2055              		.loc 1 561 0
 2056 00b4 264B     		ldr	r3, .L119+52
 2057 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2058 00b8 002B     		cmp	r3, #0
 2059 00ba 05D0     		beq	.L115
 562:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2060              		.loc 1 562 0
 2061 00bc 4FF4FA62 		mov	r2, #2000
 2062 00c0 1749     		ldr	r1, .L119+4
 2063 00c2 2548     		ldr	r0, .L119+60
 2064 00c4 FFF7FEFF 		bl	at_write_command
 2065              	.L115:
 563:modem.c       ****     }
 564:modem.c       ****     
 565:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 566:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 567:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2066              		.loc 1 567 0
 2067 00c8 4FF4FA62 		mov	r2, #2000
 2068 00cc 1449     		ldr	r1, .L119+4
 2069 00ce 2348     		ldr	r0, .L119+64
 2070 00d0 FFF7FEFF 		bl	at_write_command
 2071 00d4 0346     		mov	r3, r0
 2072 00d6 002B     		cmp	r3, #0
 2073 00d8 1BD0     		beq	.L118
 2074              	.LBB9:
 568:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 569:modem.c       ****         CFUN[0] = '\0';
 2075              		.loc 1 569 0
 2076 00da 0023     		movs	r3, #0
 2077 00dc 3B71     		strb	r3, [r7, #4]
 570:modem.c       ****         // Extract UART string recieved from the modem
 571:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2078              		.loc 1 571 0
 2079 00de 3B1D     		adds	r3, r7, #4
 2080 00e0 124A     		ldr	r2, .L119+16
 2081 00e2 1349     		ldr	r1, .L119+20
 2082 00e4 1348     		ldr	r0, .L119+24
 2083 00e6 FFF7FEFF 		bl	extract_string
 572:modem.c       ****         // Print UART string recieved from the modem
 573:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2084              		.loc 1 573 0
 2085 00ea 3B1D     		adds	r3, r7, #4
 2086 00ec 1A46     		mov	r2, r3
 2087 00ee 1C49     		ldr	r1, .L119+68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 51


 2088 00f0 0020     		movs	r0, #0
 2089 00f2 FFF7FEFF 		bl	printNotif
 574:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 575:modem.c       ****         // If it returns NULL, then write another command to the modem
 576:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2090              		.loc 1 576 0
 2091 00f6 3B1D     		adds	r3, r7, #4
 2092 00f8 3121     		movs	r1, #49
 2093 00fa 1846     		mov	r0, r3
 2094 00fc FFF7FEFF 		bl	strchr
 2095 0100 0346     		mov	r3, r0
 2096 0102 002B     		cmp	r3, #0
 2097 0104 05D1     		bne	.L118
 577:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 578:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 579:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2098              		.loc 1 579 0
 2099 0106 4FF4FA62 		mov	r2, #2000
 2100 010a 0549     		ldr	r1, .L119+4
 2101 010c 1548     		ldr	r0, .L119+72
 2102 010e FFF7FEFF 		bl	at_write_command
 2103              	.L118:
 2104              	.LBE9:
 580:modem.c       ****         }
 581:modem.c       ****     }
 582:modem.c       **** 
 583:modem.c       ****     
 584:modem.c       **** }
 2105              		.loc 1 584 0
 2106 0112 00BF     		nop
 2107 0114 1037     		adds	r7, r7, #16
 2108              		.cfi_def_cfa_offset 8
 2109 0116 BD46     		mov	sp, r7
 2110              		.cfi_def_cfa_register 13
 2111              		@ sp needed
 2112 0118 80BD     		pop	{r7, pc}
 2113              	.L120:
 2114 011a 00BF     		.align	2
 2115              	.L119:
 2116 011c 00000000 		.word	modem_info
 2117 0120 00000000 		.word	.LC0
 2118 0124 B8040000 		.word	.LC47
 2119 0128 14000000 		.word	modem_info+20
 2120 012c 58020000 		.word	.LC20
 2121 0130 5C020000 		.word	.LC21
 2122 0134 00000000 		.word	uart_received_string
 2123 0138 C4040000 		.word	.LC48
 2124 013c D4040000 		.word	.LC49
 2125 0140 E0040000 		.word	.LC50
 2126 0144 EC040000 		.word	.LC51
 2127 0148 28000000 		.word	modem_info+40
 2128 014c F8040000 		.word	.LC52
 2129 0150 00000000 		.word	updatable_parameters
 2130 0154 04050000 		.word	.LC53
 2131 0158 30050000 		.word	.LC54
 2132 015c 4C050000 		.word	.LC55
 2133 0160 58050000 		.word	.LC56
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 52


 2134 0164 64050000 		.word	.LC57
 2135              		.cfi_endproc
 2136              	.LFE82:
 2137              		.size	modem_configure_settings, .-modem_configure_settings
 2138              		.section	.rodata
 2139 056f 00       		.align	2
 2140              	.LC58:
 2141 0570 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2141      6D206E6F 
 2141      74207265 
 2141      61647920 
 2141      746F2067 
 2142 05a3 6B2E00   		.ascii	"k.\000"
 2143 05a6 0000     		.align	2
 2144              	.LC59:
 2145 05a8 41542B43 		.ascii	"AT+CCLK?\015\000"
 2145      434C4B3F 
 2145      0D00
 2146 05b2 0000     		.align	2
 2147              	.LC60:
 2148 05b4 220D00   		.ascii	"\"\015\000"
 2149 05b7 00       		.align	2
 2150              	.LC61:
 2151 05b8 3A202200 		.ascii	": \"\000"
 2152              		.align	2
 2153              	.LC62:
 2154 05bc 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2154      642F2564 
 2154      2C25643A 
 2154      25643A25 
 2154      642D2564 
 2155 05d1 000000   		.align	2
 2156              	.LC63:
 2157 05d4 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2157      642F2564 
 2157      2C25643A 
 2157      25643A25 
 2157      642B2564 
 2158 05e9 000000   		.align	2
 2159              	.LC64:
 2160 05ec 436F756C 		.ascii	"Could not parse modem time.\000"
 2160      64206E6F 
 2160      74207061 
 2160      72736520 
 2160      6D6F6465 
 2161              		.section	.text.modem_get_network_time,"ax",%progbits
 2162              		.align	2
 2163              		.global	modem_get_network_time
 2164              		.thumb
 2165              		.thumb_func
 2166              		.type	modem_get_network_time, %function
 2167              	modem_get_network_time:
 2168              	.LFB83:
 585:modem.c       **** 
 586:modem.c       **** //returns 0 if modem can't get time
 587:modem.c       **** long modem_get_network_time(){
 2169              		.loc 1 587 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 53


 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 104
 2172              		@ frame_needed = 1, uses_anonymous_args = 0
 2173 0000 80B5     		push	{r7, lr}
 2174              		.cfi_def_cfa_offset 8
 2175              		.cfi_offset 7, -8
 2176              		.cfi_offset 14, -4
 2177 0002 A0B0     		sub	sp, sp, #128
 2178              		.cfi_def_cfa_offset 136
 2179 0004 06AF     		add	r7, sp, #24
 2180              		.cfi_def_cfa 7, 112
 588:modem.c       ****     
 589:modem.c       ****     //modem reposen format (careful to include the quotes "")
 590:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 591:modem.c       ****     //ex: 14:48 GMT
 592:modem.c       **** 
 593:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 594:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2181              		.loc 1 594 0
 2182 0006 444B     		ldr	r3, .L128
 2183 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2184 000a 042B     		cmp	r3, #4
 2185 000c 05D0     		beq	.L122
 595:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2186              		.loc 1 595 0
 2187 000e 4349     		ldr	r1, .L128+4
 2188 0010 0220     		movs	r0, #2
 2189 0012 FFF7FEFF 		bl	printNotif
 596:modem.c       ****         return 0;   
 2190              		.loc 1 596 0
 2191 0016 0023     		movs	r3, #0
 2192 0018 7AE0     		b	.L123
 2193              	.L122:
 597:modem.c       ****     }
 598:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2194              		.loc 1 598 0
 2195 001a 0023     		movs	r3, #0
 2196 001c 7B66     		str	r3, [r7, #100]
 599:modem.c       ****     
 600:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 601:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2197              		.loc 1 601 0
 2198 001e 4FF4FA62 		mov	r2, #2000
 2199 0022 3F49     		ldr	r1, .L128+8
 2200 0024 3F48     		ldr	r0, .L128+12
 2201 0026 FFF7FEFF 		bl	at_write_command
 2202 002a 0346     		mov	r3, r0
 2203 002c 002B     		cmp	r3, #0
 2204 002e 6ED0     		beq	.L124
 2205              	.LBB10:
 602:modem.c       ****         // need to set this to /0
 603:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 604:modem.c       ****         network_time[0] = '\0';
 2206              		.loc 1 604 0
 2207 0030 0023     		movs	r3, #0
 2208 0032 87F84430 		strb	r3, [r7, #68]
 605:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 54


 606:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2209              		.loc 1 606 0
 2210 0036 07F14403 		add	r3, r7, #68
 2211 003a 3B4A     		ldr	r2, .L128+16
 2212 003c 3B49     		ldr	r1, .L128+20
 2213 003e 3C48     		ldr	r0, .L128+24
 2214 0040 FFF7FEFF 		bl	extract_string
 607:modem.c       ****         
 608:modem.c       ****         ///////////////////  
 609:modem.c       ****         struct tm t; // Creates variable t of struct tm
 610:modem.c       ****         
 611:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 612:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2215              		.loc 1 612 0
 2216 0044 0023     		movs	r3, #0
 2217 0046 BB62     		str	r3, [r7, #40]
 613:modem.c       ****       
 614:modem.c       ****         // Determines the GMT offset 
 615:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 616:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 617:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2218              		.loc 1 617 0
 2219 0048 07F13C01 		add	r1, r7, #60
 2220 004c 07F14002 		add	r2, r7, #64
 2221 0050 07F14400 		add	r0, r7, #68
 2222 0054 07F12803 		add	r3, r7, #40
 2223 0058 0493     		str	r3, [sp, #16]
 2224 005a 07F12C03 		add	r3, r7, #44
 2225 005e 0393     		str	r3, [sp, #12]
 2226 0060 07F13003 		add	r3, r7, #48
 2227 0064 0293     		str	r3, [sp, #8]
 2228 0066 07F13403 		add	r3, r7, #52
 2229 006a 0193     		str	r3, [sp, #4]
 2230 006c 07F13803 		add	r3, r7, #56
 2231 0070 0093     		str	r3, [sp]
 2232 0072 0B46     		mov	r3, r1
 2233 0074 2F49     		ldr	r1, .L128+28
 2234 0076 FFF7FEFF 		bl	sscanf
 2235 007a 0346     		mov	r3, r0
 2236 007c 072B     		cmp	r3, #7
 2237 007e 06D1     		bne	.L125
 618:modem.c       ****             gmt_offset = gmt_offset*(900);
 2238              		.loc 1 618 0
 2239 0080 BB6A     		ldr	r3, [r7, #40]
 2240 0082 4FF46172 		mov	r2, #900
 2241 0086 02FB03F3 		mul	r3, r2, r3
 2242 008a BB62     		str	r3, [r7, #40]
 2243 008c 27E0     		b	.L126
 2244              	.L125:
 619:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2245              		.loc 1 619 0
 2246 008e 07F13C01 		add	r1, r7, #60
 2247 0092 07F14002 		add	r2, r7, #64
 2248 0096 07F14400 		add	r0, r7, #68
 2249 009a 07F12803 		add	r3, r7, #40
 2250 009e 0493     		str	r3, [sp, #16]
 2251 00a0 07F12C03 		add	r3, r7, #44
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 55


 2252 00a4 0393     		str	r3, [sp, #12]
 2253 00a6 07F13003 		add	r3, r7, #48
 2254 00aa 0293     		str	r3, [sp, #8]
 2255 00ac 07F13403 		add	r3, r7, #52
 2256 00b0 0193     		str	r3, [sp, #4]
 2257 00b2 07F13803 		add	r3, r7, #56
 2258 00b6 0093     		str	r3, [sp]
 2259 00b8 0B46     		mov	r3, r1
 2260 00ba 1F49     		ldr	r1, .L128+32
 2261 00bc FFF7FEFF 		bl	sscanf
 2262 00c0 0346     		mov	r3, r0
 2263 00c2 072B     		cmp	r3, #7
 2264 00c4 05D1     		bne	.L127
 620:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2265              		.loc 1 620 0
 2266 00c6 BB6A     		ldr	r3, [r7, #40]
 2267 00c8 1C4A     		ldr	r2, .L128+36
 2268 00ca 02FB03F3 		mul	r3, r2, r3
 2269 00ce BB62     		str	r3, [r7, #40]
 2270 00d0 05E0     		b	.L126
 2271              	.L127:
 621:modem.c       ****         }else{
 622:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2272              		.loc 1 622 0
 2273 00d2 1B49     		ldr	r1, .L128+40
 2274 00d4 0220     		movs	r0, #2
 2275 00d6 FFF7FEFF 		bl	printNotif
 623:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2276              		.loc 1 623 0
 2277 00da 0023     		movs	r3, #0
 2278 00dc 18E0     		b	.L123
 2279              	.L126:
 624:modem.c       ****         }
 625:modem.c       ****         
 626:modem.c       ****         // Sets each variable to the correct time 
 627:modem.c       ****         t.tm_sec = second;
 2280              		.loc 1 627 0
 2281 00de FB6A     		ldr	r3, [r7, #44]
 2282 00e0 7B60     		str	r3, [r7, #4]
 628:modem.c       ****         t.tm_min = minute;
 2283              		.loc 1 628 0
 2284 00e2 3B6B     		ldr	r3, [r7, #48]
 2285 00e4 BB60     		str	r3, [r7, #8]
 629:modem.c       ****         t.tm_hour = hour;
 2286              		.loc 1 629 0
 2287 00e6 7B6B     		ldr	r3, [r7, #52]
 2288 00e8 FB60     		str	r3, [r7, #12]
 630:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2289              		.loc 1 630 0
 2290 00ea 3B6C     		ldr	r3, [r7, #64]
 2291 00ec 6433     		adds	r3, r3, #100
 2292 00ee BB61     		str	r3, [r7, #24]
 631:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2293              		.loc 1 631 0
 2294 00f0 FB6B     		ldr	r3, [r7, #60]
 2295 00f2 013B     		subs	r3, r3, #1
 2296 00f4 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 56


 632:modem.c       ****         t.tm_mday = day;           // Day of the month
 2297              		.loc 1 632 0
 2298 00f6 BB6B     		ldr	r3, [r7, #56]
 2299 00f8 3B61     		str	r3, [r7, #16]
 633:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2300              		.loc 1 633 0
 2301 00fa 0023     		movs	r3, #0
 2302 00fc 7B62     		str	r3, [r7, #36]
 634:modem.c       ****     
 635:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 636:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 637:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2303              		.loc 1 637 0
 2304 00fe 3B1D     		adds	r3, r7, #4
 2305 0100 1846     		mov	r0, r3
 2306 0102 FFF7FEFF 		bl	mktime
 2307 0106 0246     		mov	r2, r0
 2308 0108 BB6A     		ldr	r3, [r7, #40]
 2309 010a 1344     		add	r3, r3, r2
 2310 010c 7B66     		str	r3, [r7, #100]
 2311              	.L124:
 2312              	.LBE10:
 638:modem.c       ****     }
 639:modem.c       ****     
 640:modem.c       ****     return epoch_time;
 2313              		.loc 1 640 0
 2314 010e 7B6E     		ldr	r3, [r7, #100]
 2315              	.L123:
 641:modem.c       **** }
 2316              		.loc 1 641 0
 2317 0110 1846     		mov	r0, r3
 2318 0112 6837     		adds	r7, r7, #104
 2319              		.cfi_def_cfa_offset 8
 2320 0114 BD46     		mov	sp, r7
 2321              		.cfi_def_cfa_register 13
 2322              		@ sp needed
 2323 0116 80BD     		pop	{r7, pc}
 2324              	.L129:
 2325              		.align	2
 2326              	.L128:
 2327 0118 00000000 		.word	modem_state
 2328 011c 70050000 		.word	.LC58
 2329 0120 00000000 		.word	.LC0
 2330 0124 A8050000 		.word	.LC59
 2331 0128 B4050000 		.word	.LC60
 2332 012c B8050000 		.word	.LC61
 2333 0130 00000000 		.word	uart_received_string
 2334 0134 BC050000 		.word	.LC62
 2335 0138 D4050000 		.word	.LC63
 2336 013c 7CFCFFFF 		.word	-900
 2337 0140 EC050000 		.word	.LC64
 2338              		.cfi_endproc
 2339              	.LFE83:
 2340              		.size	modem_get_network_time, .-modem_get_network_time
 2341              		.section	.text.modem_get_state,"ax",%progbits
 2342              		.align	2
 2343              		.global	modem_get_state
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 57


 2344              		.thumb
 2345              		.thumb_func
 2346              		.type	modem_get_state, %function
 2347              	modem_get_state:
 2348              	.LFB84:
 642:modem.c       **** 
 643:modem.c       **** // Get the modem state
 644:modem.c       **** uint8 modem_get_state(){
 2349              		.loc 1 644 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 1, uses_anonymous_args = 0
 2353              		@ link register save eliminated.
 2354 0000 80B4     		push	{r7}
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 7, -4
 2357 0002 00AF     		add	r7, sp, #0
 2358              		.cfi_def_cfa_register 7
 645:modem.c       ****     return modem_state;
 2359              		.loc 1 645 0
 2360 0004 024B     		ldr	r3, .L132
 2361 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646:modem.c       **** }
 2362              		.loc 1 646 0
 2363 0008 1846     		mov	r0, r3
 2364 000a BD46     		mov	sp, r7
 2365              		.cfi_def_cfa_register 13
 2366              		@ sp needed
 2367 000c 80BC     		pop	{r7}
 2368              		.cfi_restore 7
 2369              		.cfi_def_cfa_offset 0
 2370 000e 7047     		bx	lr
 2371              	.L133:
 2372              		.align	2
 2373              	.L132:
 2374 0010 00000000 		.word	modem_state
 2375              		.cfi_endproc
 2376              	.LFE84:
 2377              		.size	modem_get_state, .-modem_get_state
 2378              		.section	.text.modem_sleep,"ax",%progbits
 2379              		.align	2
 2380              		.global	modem_sleep
 2381              		.thumb
 2382              		.thumb_func
 2383              		.type	modem_sleep, %function
 2384              	modem_sleep:
 2385              	.LFB85:
 647:modem.c       **** 
 648:modem.c       **** // Set modem to sleep
 649:modem.c       **** void modem_sleep(){
 2386              		.loc 1 649 0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 0
 2389              		@ frame_needed = 1, uses_anonymous_args = 0
 2390 0000 80B5     		push	{r7, lr}
 2391              		.cfi_def_cfa_offset 8
 2392              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 58


 2393              		.cfi_offset 14, -4
 2394 0002 00AF     		add	r7, sp, #0
 2395              		.cfi_def_cfa_register 7
 650:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 651:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2396              		.loc 1 651 0
 2397 0004 FFF7FEFF 		bl	modem_get_state
 2398 0008 0346     		mov	r3, r0
 2399 000a 002B     		cmp	r3, #0
 2400 000c 03D0     		beq	.L136
 652:modem.c       **** 
 653:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2401              		.loc 1 653 0
 2402 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 654:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2403              		.loc 1 654 0
 2404 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2405              	.L136:
 655:modem.c       ****         
 656:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 657:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 658:modem.c       ****      }
 659:modem.c       **** }
 2406              		.loc 1 659 0
 2407 0016 00BF     		nop
 2408 0018 80BD     		pop	{r7, pc}
 2409              		.cfi_endproc
 2410              	.LFE85:
 2411              		.size	modem_sleep, .-modem_sleep
 2412 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2413              		.align	2
 2414              		.global	modem_wakeup
 2415              		.thumb
 2416              		.thumb_func
 2417              		.type	modem_wakeup, %function
 2418              	modem_wakeup:
 2419              	.LFB86:
 660:modem.c       **** 
 661:modem.c       **** // Wakeup the modem
 662:modem.c       **** void modem_wakeup(){
 2420              		.loc 1 662 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 0
 2423              		@ frame_needed = 1, uses_anonymous_args = 0
 2424 0000 80B5     		push	{r7, lr}
 2425              		.cfi_def_cfa_offset 8
 2426              		.cfi_offset 7, -8
 2427              		.cfi_offset 14, -4
 2428 0002 00AF     		add	r7, sp, #0
 2429              		.cfi_def_cfa_register 7
 663:modem.c       ****     // If modem state is not off then wake it up
 664:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2430              		.loc 1 664 0
 2431 0004 FFF7FEFF 		bl	modem_get_state
 2432 0008 0346     		mov	r3, r0
 2433 000a 002B     		cmp	r3, #0
 2434 000c 0BD0     		beq	.L139
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 59


 665:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2435              		.loc 1 665 0
 2436 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 666:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 667:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 668:modem.c       ****         UART_Telit_Wakeup();
 2437              		.loc 1 668 0
 2438 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 669:modem.c       ****         // Remove the need for this pin itterupt
 670:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 671:modem.c       ****         
 672:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 673:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2439              		.loc 1 673 0
 2440 0016 FFF7FEFF 		bl	modem_get_state
 2441 001a 0346     		mov	r3, r0
 2442 001c 032B     		cmp	r3, #3
 2443 001e 02D1     		bne	.L139
 674:modem.c       ****             CyDelay(100u);
 2444              		.loc 1 674 0
 2445 0020 6420     		movs	r0, #100
 2446 0022 FFF7FEFF 		bl	CyDelay
 2447              	.L139:
 675:modem.c       ****         }
 676:modem.c       ****      }
 677:modem.c       **** }
 2448              		.loc 1 677 0
 2449 0026 00BF     		nop
 2450 0028 80BD     		pop	{r7, pc}
 2451              		.cfi_endproc
 2452              	.LFE86:
 2453              		.size	modem_wakeup, .-modem_wakeup
 2454 002a 00BF     		.section	.rodata
 2455              		.align	2
 2456              	.LC65:
 2457 0608 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2457      50494F3D 
 2457      352C312C 
 2457      312C300D 
 2457      00
 2458 0619 000000   		.align	2
 2459              	.LC66:
 2460 061c 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2460      55504C53 
 2460      45433D31 
 2460      0D00
 2461 062a 0000     		.align	2
 2462              	.LC67:
 2463 062c 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2463      55504C56 
 2463      3D320D00 
 2464              		.align	2
 2465              	.LC68:
 2466 0638 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2466      47505345 
 2466      4E3D310D 
 2466      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 60


 2467 0645 000000   		.align	2
 2468              	.LC69:
 2469 0648 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2469      4C503D31 
 2469      2C227375 
 2469      706C2E67 
 2469      6F6F676C 
 2470 0669 000000   		.align	2
 2471              	.LC70:
 2472 066c 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2472      47414354 
 2472      3D312C30 
 2472      0D0A00
 2473 067b 00       		.align	2
 2474              	.LC71:
 2475 067c 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2475      43534C4B 
 2475      3D312C31 
 2475      0D00
 2476 068a 0000     		.align	2
 2477              	.LC72:
 2478 068c 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2478      5053534C 
 2478      53523D31 
 2478      2C312C2C 
 2478      2C2C2C32 
 2479 06a2 0000     		.align	2
 2480              	.LC73:
 2481 06a4 4E00     		.ascii	"N\000"
 2482 06a6 0000     		.align	2
 2483              	.LC74:
 2484 06a8 41542447 		.ascii	"AT$GPSACP\015\000"
 2484      50534143 
 2484      500D00
 2485 06b3 00       		.align	2
 2486              	.LC75:
 2487 06b4 24475053 		.ascii	"$GPSACP: \000"
 2487      4143503A 
 2487      2000
 2488 06be 0000     		.align	2
 2489              	.LC76:
 2490 06c0 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2490      4143503A 
 2490      20252A66 
 2490      2C25664E 
 2490      2C256657 
 2491              		.global	__aeabi_fdiv
 2492              		.global	__aeabi_f2d
 2493              		.global	__aeabi_ddiv
 2494              		.global	__aeabi_dadd
 2495              		.global	__aeabi_d2f
 2496              		.align	2
 2497              	.LC77:
 2498 06e0 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2498      50494F3D 
 2498      352C302C 
 2498      312C300D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 61


 2498      00
 2499 06f1 000000   		.align	2
 2500              	.LC78:
 2501 06f4 41542447 		.ascii	"AT$GPSR=0\015\000"
 2501      5053523D 
 2501      300D00
 2502 06ff 00       		.align	2
 2503              	.LC79:
 2504 0700 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2504      20746F20 
 2504      6C6F636B 
 2504      20475053 
 2504      3A202564 
 2505              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2506              		.align	2
 2507              		.global	modem_get_gps_coordinates
 2508              		.thumb
 2509              		.thumb_func
 2510              		.type	modem_get_gps_coordinates, %function
 2511              	modem_get_gps_coordinates:
 2512              	.LFB87:
 678:modem.c       **** 
 679:modem.c       ****     
 680:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 681:modem.c       **** gps_t modem_get_gps_coordinates(){
 2513              		.loc 1 681 0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 56
 2516              		@ frame_needed = 1, uses_anonymous_args = 0
 2517 0000 B0B5     		push	{r4, r5, r7, lr}
 2518              		.cfi_def_cfa_offset 16
 2519              		.cfi_offset 4, -16
 2520              		.cfi_offset 5, -12
 2521              		.cfi_offset 7, -8
 2522              		.cfi_offset 14, -4
 2523 0002 90B0     		sub	sp, sp, #64
 2524              		.cfi_def_cfa_offset 80
 2525 0004 02AF     		add	r7, sp, #8
 2526              		.cfi_def_cfa 7, 72
 2527 0006 7860     		str	r0, [r7, #4]
 682:modem.c       ****     gps_t gps;
 683:modem.c       ****     gps.altitude = 0;
 2528              		.loc 1 683 0
 2529 0008 4FF00003 		mov	r3, #0
 2530 000c FB61     		str	r3, [r7, #28]	@ float
 684:modem.c       ****     gps.longitude = 0;
 2531              		.loc 1 684 0
 2532 000e 4FF00003 		mov	r3, #0
 2533 0012 BB61     		str	r3, [r7, #24]	@ float
 685:modem.c       ****     gps.latitude = 0;
 2534              		.loc 1 685 0
 2535 0014 4FF00003 		mov	r3, #0
 2536 0018 7B61     		str	r3, [r7, #20]	@ float
 686:modem.c       ****     gps.time_to_lock =0;
 2537              		.loc 1 686 0
 2538 001a 0023     		movs	r3, #0
 2539 001c 3B84     		strh	r3, [r7, #32]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 62


 687:modem.c       ****     gps.valid = 0;
 2540              		.loc 1 687 0
 2541 001e 0023     		movs	r3, #0
 2542 0020 87F82230 		strb	r3, [r7, #34]
 688:modem.c       ****     
 689:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 690:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2543              		.loc 1 690 0
 2544 0024 7F4B     		ldr	r3, .L150
 2545 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2546 0028 042B     		cmp	r3, #4
 2547 002a 07D0     		beq	.L141
 691:modem.c       ****         return gps;//where valid = 0
 2548              		.loc 1 691 0
 2549 002c 7B68     		ldr	r3, [r7, #4]
 2550 002e 1C46     		mov	r4, r3
 2551 0030 07F11403 		add	r3, r7, #20
 2552 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2553 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2554 003a EFE0     		b	.L140
 2555              	.L141:
 692:modem.c       ****     }
 693:modem.c       ****     
 694:modem.c       ****     long lock_time = getTimeStamp();
 2556              		.loc 1 694 0
 2557 003c FFF7FEFF 		bl	getTimeStamp
 2558 0040 3863     		str	r0, [r7, #48]
 695:modem.c       ****     
 696:modem.c       ****     // Enable this for the LTER module
 697:modem.c       ****     // Enable GPS Low-Dropout Regulator
 698:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2559              		.loc 1 698 0
 2560 0042 4FF4FA62 		mov	r2, #2000
 2561 0046 7849     		ldr	r1, .L150+4
 2562 0048 7848     		ldr	r0, .L150+8
 2563 004a FFF7FEFF 		bl	at_write_command
 699:modem.c       ****     
 700:modem.c       ****     // Configure SUPL connection params
 701:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2564              		.loc 1 701 0
 2565 004e 4FF4FA62 		mov	r2, #2000
 2566 0052 7549     		ldr	r1, .L150+4
 2567 0054 7648     		ldr	r0, .L150+12
 2568 0056 FFF7FEFF 		bl	at_write_command
 702:modem.c       ****     
 703:modem.c       ****     // Use SUPL2.0
 704:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2569              		.loc 1 704 0
 2570 005a 4FF4FA62 		mov	r2, #2000
 2571 005e 7249     		ldr	r1, .L150+4
 2572 0060 7448     		ldr	r0, .L150+16
 2573 0062 FFF7FEFF 		bl	at_write_command
 705:modem.c       ****     
 706:modem.c       ****     // Enable AGPS service
 707:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2574              		.loc 1 707 0
 2575 0066 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 63


 2576 006a 6F49     		ldr	r1, .L150+4
 2577 006c 7248     		ldr	r0, .L150+20
 2578 006e FFF7FEFF 		bl	at_write_command
 708:modem.c       ****     
 709:modem.c       ****     // Chose SUPL server, use google public service
 710:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2579              		.loc 1 710 0
 2580 0072 4FF4FA62 		mov	r2, #2000
 2581 0076 6C49     		ldr	r1, .L150+4
 2582 0078 7048     		ldr	r0, .L150+24
 2583 007a FFF7FEFF 		bl	at_write_command
 711:modem.c       ****     
 712:modem.c       ****     //pdp context has to be locked to carrier for this to work
 713:modem.c       ****     
 714:modem.c       ****     // Unlock context since it needs to be used by modem
 715:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2584              		.loc 1 715 0
 2585 007e 4FF4FA62 		mov	r2, #2000
 2586 0082 6949     		ldr	r1, .L150+4
 2587 0084 6E48     		ldr	r0, .L150+28
 2588 0086 FFF7FEFF 		bl	at_write_command
 716:modem.c       ****     
 717:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2589              		.loc 1 717 0
 2590 008a 4FF4FA62 		mov	r2, #2000
 2591 008e 6649     		ldr	r1, .L150+4
 2592 0090 6C48     		ldr	r0, .L150+32
 2593 0092 FFF7FEFF 		bl	at_write_command
 718:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 719:modem.c       ****     
 720:modem.c       ****     // Relock the context
 721:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2594              		.loc 1 721 0
 2595 0096 42F21072 		movw	r2, #10000
 2596 009a 6349     		ldr	r1, .L150+4
 2597 009c 6A48     		ldr	r0, .L150+36
 2598 009e FFF7FEFF 		bl	at_write_command
 722:modem.c       ****     
 723:modem.c       ****     //start AGPS service
 724:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2599              		.loc 1 724 0
 2600 00a2 4FF4FA62 		mov	r2, #2000
 2601 00a6 6049     		ldr	r1, .L150+4
 2602 00a8 6848     		ldr	r0, .L150+40
 2603 00aa FFF7FEFF 		bl	at_write_command
 725:modem.c       ****     
 726:modem.c       ****     
 727:modem.c       ****     // Start the AGPS service
 728:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 729:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 730:modem.c       ****     
 731:modem.c       ****     
 732:modem.c       ****  
 733:modem.c       ****     uint8 gps_status = 0;
 2604              		.loc 1 733 0
 2605 00ae 0023     		movs	r3, #0
 2606 00b0 87F82F30 		strb	r3, [r7, #47]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 64


 2607              	.LBB11:
 734:modem.c       ****     for(uint16 i=0;i<200;i++){
 2608              		.loc 1 734 0
 2609 00b4 0023     		movs	r3, #0
 2610 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2611 00b8 13E0     		b	.L143
 2612              	.L146:
 735:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2613              		.loc 1 735 0
 2614 00ba 4FF4FA62 		mov	r2, #2000
 2615 00be 6449     		ldr	r1, .L150+44
 2616 00c0 6448     		ldr	r0, .L150+48
 2617 00c2 FFF7FEFF 		bl	at_write_command
 2618 00c6 0346     		mov	r3, r0
 2619 00c8 87F82F30 		strb	r3, [r7, #47]
 736:modem.c       ****         if(gps_status){
 2620              		.loc 1 736 0
 2621 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2622 00d0 002B     		cmp	r3, #0
 2623 00d2 0AD1     		bne	.L149
 737:modem.c       ****             break;   
 738:modem.c       ****         }
 739:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2624              		.loc 1 739 0 discriminator 2
 2625 00d4 4FF47A70 		mov	r0, #1000
 2626 00d8 FFF7FEFF 		bl	CyDelay
 734:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2627              		.loc 1 734 0 discriminator 2
 2628 00dc FB8E     		ldrh	r3, [r7, #54]
 2629 00de 0133     		adds	r3, r3, #1
 2630 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2631              	.L143:
 734:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2632              		.loc 1 734 0 is_stmt 0 discriminator 1
 2633 00e2 FB8E     		ldrh	r3, [r7, #54]
 2634 00e4 C72B     		cmp	r3, #199
 2635 00e6 E8D9     		bls	.L146
 2636 00e8 00E0     		b	.L145
 2637              	.L149:
 737:modem.c       ****             break;   
 2638              		.loc 1 737 0 is_stmt 1
 2639 00ea 00BF     		nop
 2640              	.L145:
 2641              	.LBE11:
 740:modem.c       ****     }
 741:modem.c       ****     
 742:modem.c       ****     //parse data here
 743:modem.c       ****     
 744:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 745:modem.c       ****     float lat;
 746:modem.c       ****     float lon;
 747:modem.c       ****     float alt;
 748:modem.c       ****     
 749:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 750:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 751:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2642              		.loc 1 751 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 65


 2643 00ec 5A49     		ldr	r1, .L150+52
 2644 00ee 5B48     		ldr	r0, .L150+56
 2645 00f0 FFF7FEFF 		bl	strstr
 2646 00f4 B862     		str	r0, [r7, #40]
 752:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 753:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 754:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2647              		.loc 1 754 0
 2648 00f6 07F10C01 		add	r1, r7, #12
 2649 00fa 07F11002 		add	r2, r7, #16
 2650 00fe 07F10803 		add	r3, r7, #8
 2651 0102 0093     		str	r3, [sp]
 2652 0104 0B46     		mov	r3, r1
 2653 0106 5649     		ldr	r1, .L150+60
 2654 0108 B86A     		ldr	r0, [r7, #40]
 2655 010a FFF7FEFF 		bl	sscanf
 2656 010e 7862     		str	r0, [r7, #36]
 755:modem.c       ****     if(match >= 3){
 2657              		.loc 1 755 0
 2658 0110 7B6A     		ldr	r3, [r7, #36]
 2659 0112 022B     		cmp	r3, #2
 2660 0114 60DD     		ble	.L147
 756:modem.c       ****         // Calculate lat and lon
 757:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 758:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 759:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2661              		.loc 1 759 0
 2662 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2663 0118 5249     		ldr	r1, .L150+64
 2664 011a 1846     		mov	r0, r3
 2665 011c FFF7FEFF 		bl	__aeabi_fdiv
 2666 0120 0346     		mov	r3, r0
 2667 0122 1846     		mov	r0, r3
 2668 0124 FFF7FEFF 		bl	floorf
 2669 0128 0346     		mov	r3, r0
 2670 012a 1846     		mov	r0, r3
 2671 012c FFF7FEFF 		bl	__aeabi_f2d
 2672 0130 0446     		mov	r4, r0
 2673 0132 0D46     		mov	r5, r1
 2674 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2675 0136 1846     		mov	r0, r3
 2676 0138 FFF7FEFF 		bl	__aeabi_f2d
 2677 013c 4FF00002 		mov	r2, #0
 2678 0140 494B     		ldr	r3, .L150+68
 2679 0142 FFF7FEFF 		bl	fmod
 2680 0146 4FF00002 		mov	r2, #0
 2681 014a 484B     		ldr	r3, .L150+72
 2682 014c FFF7FEFF 		bl	__aeabi_ddiv
 2683 0150 0246     		mov	r2, r0
 2684 0152 0B46     		mov	r3, r1
 2685 0154 2046     		mov	r0, r4
 2686 0156 2946     		mov	r1, r5
 2687 0158 FFF7FEFF 		bl	__aeabi_dadd
 2688 015c 0346     		mov	r3, r0
 2689 015e 0C46     		mov	r4, r1
 2690 0160 1846     		mov	r0, r3
 2691 0162 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 66


 2692 0164 FFF7FEFF 		bl	__aeabi_d2f
 2693 0168 0346     		mov	r3, r0
 2694 016a 3B61     		str	r3, [r7, #16]	@ float
 760:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2695              		.loc 1 760 0
 2696 016c FB68     		ldr	r3, [r7, #12]	@ float
 2697 016e 3D49     		ldr	r1, .L150+64
 2698 0170 1846     		mov	r0, r3
 2699 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2700 0176 0346     		mov	r3, r0
 2701 0178 1846     		mov	r0, r3
 2702 017a FFF7FEFF 		bl	floorf
 2703 017e 0346     		mov	r3, r0
 2704 0180 1846     		mov	r0, r3
 2705 0182 FFF7FEFF 		bl	__aeabi_f2d
 2706 0186 0446     		mov	r4, r0
 2707 0188 0D46     		mov	r5, r1
 2708 018a FB68     		ldr	r3, [r7, #12]	@ float
 2709 018c 1846     		mov	r0, r3
 2710 018e FFF7FEFF 		bl	__aeabi_f2d
 2711 0192 4FF00002 		mov	r2, #0
 2712 0196 344B     		ldr	r3, .L150+68
 2713 0198 FFF7FEFF 		bl	fmod
 2714 019c 4FF00002 		mov	r2, #0
 2715 01a0 324B     		ldr	r3, .L150+72
 2716 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2717 01a6 0246     		mov	r2, r0
 2718 01a8 0B46     		mov	r3, r1
 2719 01aa 2046     		mov	r0, r4
 2720 01ac 2946     		mov	r1, r5
 2721 01ae FFF7FEFF 		bl	__aeabi_dadd
 2722 01b2 0346     		mov	r3, r0
 2723 01b4 0C46     		mov	r4, r1
 2724 01b6 1846     		mov	r0, r3
 2725 01b8 2146     		mov	r1, r4
 2726 01ba FFF7FEFF 		bl	__aeabi_d2f
 2727 01be 0346     		mov	r3, r0
 2728 01c0 83F00043 		eor	r3, r3, #-2147483648
 2729 01c4 FB60     		str	r3, [r7, #12]	@ float
 761:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2730              		.loc 1 761 0
 2731 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2732 01c8 FB61     		str	r3, [r7, #28]	@ float
 762:modem.c       ****         gps.latitude = lat;
 2733              		.loc 1 762 0
 2734 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2735 01cc 7B61     		str	r3, [r7, #20]	@ float
 763:modem.c       ****         gps.longitude = lon;
 2736              		.loc 1 763 0
 2737 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2738 01d0 BB61     		str	r3, [r7, #24]	@ float
 764:modem.c       ****         gps.valid = 1;
 2739              		.loc 1 764 0
 2740 01d2 0123     		movs	r3, #1
 2741 01d4 87F82230 		strb	r3, [r7, #34]
 2742              	.L147:
 765:modem.c       ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 67


 766:modem.c       ****     
 767:modem.c       ****     // Disable LDO, just in case
 768:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2743              		.loc 1 768 0
 2744 01d8 4FF4FA62 		mov	r2, #2000
 2745 01dc 1249     		ldr	r1, .L150+4
 2746 01de 2448     		ldr	r0, .L150+76
 2747 01e0 FFF7FEFF 		bl	at_write_command
 769:modem.c       ****     
 770:modem.c       ****     // Flush modem's GPS data, just in case
 771:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2748              		.loc 1 771 0
 2749 01e4 4FF4FA62 		mov	r2, #2000
 2750 01e8 0F49     		ldr	r1, .L150+4
 2751 01ea 2248     		ldr	r0, .L150+80
 2752 01ec FFF7FEFF 		bl	at_write_command
 772:modem.c       ****     
 773:modem.c       ****     
 774:modem.c       ****     
 775:modem.c       ****     
 776:modem.c       ****     
 777:modem.c       ****     /* Relevant to 3g modem, can ignore
 778:modem.c       ****     
 779:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 780:modem.c       ****     //AT$GPSQOS=50,50,100,0
 781:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 782:modem.c       ****     
 783:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 784:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 785:modem.c       ****     
 786:modem.c       ****     //unlock contedt, simnce its being used by modem
 787:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 788:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 789:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 790:modem.c       ****     
 791:modem.c       ****     //unlock contedt, simnce its being used by modem
 792:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 793:modem.c       ****     
 794:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 795:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 796:modem.c       ****     
 797:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 798:modem.c       ****    uint8 gps_status = 0;
 799:modem.c       ****     for(uint16 i=0;i<200;i++){
 800:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 801:modem.c       ****         if(gps_status){
 802:modem.c       ****             break;   
 803:modem.c       ****         }
 804:modem.c       ****   }
 805:modem.c       ****     
 806:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 807:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 808:modem.c       ****     if(gps_status){
 809:modem.c       ****         float lat,lon,alt = 0;
 810:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 811:modem.c       ****             gps.altitude = alt;
 812:modem.c       ****             gps.latitude = lat/60;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 68


 813:modem.c       ****             gps.longitude = lon/60;
 814:modem.c       ****             gps.valid = 1;
 815:modem.c       ****         }
 816:modem.c       ****         
 817:modem.c       ****     }
 818:modem.c       ****     
 819:modem.c       ****     //turn off gps
 820:modem.c       ****     //AT$GPSP=0
 821:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 822:modem.c       ****     
 823:modem.c       ****     */
 824:modem.c       **** 
 825:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 826:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2753              		.loc 1 826 0
 2754 01f0 FFF7FEFF 		bl	getTimeStamp
 2755 01f4 0246     		mov	r2, r0
 2756 01f6 3B6B     		ldr	r3, [r7, #48]
 2757 01f8 D31A     		subs	r3, r2, r3
 2758 01fa 3B63     		str	r3, [r7, #48]
 827:modem.c       ****     gps.time_to_lock = lock_time;
 2759              		.loc 1 827 0
 2760 01fc 3B6B     		ldr	r3, [r7, #48]
 2761 01fe 9BB2     		uxth	r3, r3
 2762 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 828:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2763              		.loc 1 828 0
 2764 0202 3B8C     		ldrh	r3, [r7, #32]
 2765 0204 1A46     		mov	r2, r3
 2766 0206 1C49     		ldr	r1, .L150+84
 2767 0208 0020     		movs	r0, #0
 2768 020a FFF7FEFF 		bl	printNotif
 829:modem.c       ****     
 830:modem.c       ****     return gps;
 2769              		.loc 1 830 0
 2770 020e 7B68     		ldr	r3, [r7, #4]
 2771 0210 1C46     		mov	r4, r3
 2772 0212 07F11403 		add	r3, r7, #20
 2773 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2774 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2775              	.L140:
 831:modem.c       ****     
 832:modem.c       **** }
 2776              		.loc 1 832 0
 2777 021c 7868     		ldr	r0, [r7, #4]
 2778 021e 3837     		adds	r7, r7, #56
 2779              		.cfi_def_cfa_offset 16
 2780 0220 BD46     		mov	sp, r7
 2781              		.cfi_def_cfa_register 13
 2782              		@ sp needed
 2783 0222 B0BD     		pop	{r4, r5, r7, pc}
 2784              	.L151:
 2785              		.align	2
 2786              	.L150:
 2787 0224 00000000 		.word	modem_state
 2788 0228 00000000 		.word	.LC0
 2789 022c 08060000 		.word	.LC65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 69


 2790 0230 1C060000 		.word	.LC66
 2791 0234 2C060000 		.word	.LC67
 2792 0238 38060000 		.word	.LC68
 2793 023c 48060000 		.word	.LC69
 2794 0240 6C060000 		.word	.LC70
 2795 0244 7C060000 		.word	.LC71
 2796 0248 A8020000 		.word	.LC26
 2797 024c 8C060000 		.word	.LC72
 2798 0250 A4060000 		.word	.LC73
 2799 0254 A8060000 		.word	.LC74
 2800 0258 B4060000 		.word	.LC75
 2801 025c 00000000 		.word	uart_received_string
 2802 0260 C0060000 		.word	.LC76
 2803 0264 0000C842 		.word	1120403456
 2804 0268 00005940 		.word	1079574528
 2805 026c 00004E40 		.word	1078853632
 2806 0270 E0060000 		.word	.LC77
 2807 0274 F4060000 		.word	.LC78
 2808 0278 00070000 		.word	.LC79
 2809              		.cfi_endproc
 2810              	.LFE87:
 2811              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2812              		.text
 2813              	.Letext0:
 2814              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2815              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2816              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2817              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2818              		.file 6 "testing.h"
 2819              		.file 7 "data.h"
 2820              		.file 8 "modem.h"
 2821              		.file 9 "notoriOS.h"
 2822              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2823              		.section	.debug_info,"",%progbits
 2824              	.Ldebug_info0:
 2825 0000 D20B0000 		.4byte	0xbd2
 2826 0004 0400     		.2byte	0x4
 2827 0006 00000000 		.4byte	.Ldebug_abbrev0
 2828 000a 04       		.byte	0x4
 2829 000b 01       		.uleb128 0x1
 2830 000c 64000000 		.4byte	.LASF159
 2831 0010 0C       		.byte	0xc
 2832 0011 D1030000 		.4byte	.LASF160
 2833 0015 16050000 		.4byte	.LASF161
 2834 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2835 001d 00000000 		.4byte	0
 2836 0021 00000000 		.4byte	.Ldebug_line0
 2837 0025 02       		.uleb128 0x2
 2838 0026 01       		.byte	0x1
 2839 0027 06       		.byte	0x6
 2840 0028 5B010000 		.4byte	.LASF0
 2841 002c 03       		.uleb128 0x3
 2842 002d 38000000 		.4byte	.LASF4
 2843 0031 02       		.byte	0x2
 2844 0032 1D       		.byte	0x1d
 2845 0033 37000000 		.4byte	0x37
 2846 0037 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 70


 2847 0038 01       		.byte	0x1
 2848 0039 08       		.byte	0x8
 2849 003a D3050000 		.4byte	.LASF1
 2850 003e 02       		.uleb128 0x2
 2851 003f 02       		.byte	0x2
 2852 0040 05       		.byte	0x5
 2853 0041 09040000 		.4byte	.LASF2
 2854 0045 02       		.uleb128 0x2
 2855 0046 02       		.byte	0x2
 2856 0047 07       		.byte	0x7
 2857 0048 69020000 		.4byte	.LASF3
 2858 004c 03       		.uleb128 0x3
 2859 004d 1E040000 		.4byte	.LASF5
 2860 0051 02       		.byte	0x2
 2861 0052 3F       		.byte	0x3f
 2862 0053 57000000 		.4byte	0x57
 2863 0057 02       		.uleb128 0x2
 2864 0058 04       		.byte	0x4
 2865 0059 05       		.byte	0x5
 2866 005a E3010000 		.4byte	.LASF6
 2867 005e 03       		.uleb128 0x3
 2868 005f 8C020000 		.4byte	.LASF7
 2869 0063 02       		.byte	0x2
 2870 0064 41       		.byte	0x41
 2871 0065 69000000 		.4byte	0x69
 2872 0069 02       		.uleb128 0x2
 2873 006a 04       		.byte	0x4
 2874 006b 07       		.byte	0x7
 2875 006c 38030000 		.4byte	.LASF8
 2876 0070 02       		.uleb128 0x2
 2877 0071 08       		.byte	0x8
 2878 0072 05       		.byte	0x5
 2879 0073 4D010000 		.4byte	.LASF9
 2880 0077 02       		.uleb128 0x2
 2881 0078 08       		.byte	0x8
 2882 0079 07       		.byte	0x7
 2883 007a FF000000 		.4byte	.LASF10
 2884 007e 04       		.uleb128 0x4
 2885 007f 04       		.byte	0x4
 2886 0080 05       		.byte	0x5
 2887 0081 696E7400 		.ascii	"int\000"
 2888 0085 02       		.uleb128 0x2
 2889 0086 04       		.byte	0x4
 2890 0087 07       		.byte	0x7
 2891 0088 B9060000 		.4byte	.LASF11
 2892 008c 03       		.uleb128 0x3
 2893 008d FC070000 		.4byte	.LASF12
 2894 0091 03       		.byte	0x3
 2895 0092 18       		.byte	0x18
 2896 0093 2C000000 		.4byte	0x2c
 2897 0097 03       		.uleb128 0x3
 2898 0098 CB050000 		.4byte	.LASF13
 2899 009c 03       		.byte	0x3
 2900 009d 2C       		.byte	0x2c
 2901 009e 4C000000 		.4byte	0x4c
 2902 00a2 03       		.uleb128 0x3
 2903 00a3 8C070000 		.4byte	.LASF14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 71


 2904 00a7 03       		.byte	0x3
 2905 00a8 30       		.byte	0x30
 2906 00a9 5E000000 		.4byte	0x5e
 2907 00ad 05       		.uleb128 0x5
 2908 00ae 1B020000 		.4byte	.LASF15
 2909 00b2 04       		.byte	0x4
 2910 00b3 9201     		.2byte	0x192
 2911 00b5 37000000 		.4byte	0x37
 2912 00b9 05       		.uleb128 0x5
 2913 00ba 0B000000 		.4byte	.LASF16
 2914 00be 04       		.byte	0x4
 2915 00bf 9301     		.2byte	0x193
 2916 00c1 45000000 		.4byte	0x45
 2917 00c5 05       		.uleb128 0x5
 2918 00c6 7C020000 		.4byte	.LASF17
 2919 00ca 04       		.byte	0x4
 2920 00cb 9401     		.2byte	0x194
 2921 00cd 69000000 		.4byte	0x69
 2922 00d1 05       		.uleb128 0x5
 2923 00d2 04080000 		.4byte	.LASF18
 2924 00d6 04       		.byte	0x4
 2925 00d7 9601     		.2byte	0x196
 2926 00d9 3E000000 		.4byte	0x3e
 2927 00dd 05       		.uleb128 0x5
 2928 00de 28020000 		.4byte	.LASF19
 2929 00e2 04       		.byte	0x4
 2930 00e3 9701     		.2byte	0x197
 2931 00e5 57000000 		.4byte	0x57
 2932 00e9 02       		.uleb128 0x2
 2933 00ea 04       		.byte	0x4
 2934 00eb 04       		.byte	0x4
 2935 00ec 84050000 		.4byte	.LASF20
 2936 00f0 02       		.uleb128 0x2
 2937 00f1 08       		.byte	0x8
 2938 00f2 04       		.byte	0x4
 2939 00f3 21020000 		.4byte	.LASF21
 2940 00f7 02       		.uleb128 0x2
 2941 00f8 01       		.byte	0x1
 2942 00f9 08       		.byte	0x8
 2943 00fa A0060000 		.4byte	.LASF22
 2944 00fe 02       		.uleb128 0x2
 2945 00ff 08       		.byte	0x8
 2946 0100 04       		.byte	0x4
 2947 0101 94060000 		.4byte	.LASF23
 2948 0105 02       		.uleb128 0x2
 2949 0106 04       		.byte	0x4
 2950 0107 07       		.byte	0x7
 2951 0108 A0040000 		.4byte	.LASF24
 2952 010c 06       		.uleb128 0x6
 2953 010d 04       		.byte	0x4
 2954 010e F7000000 		.4byte	0xf7
 2955 0112 06       		.uleb128 0x6
 2956 0113 04       		.byte	0x4
 2957 0114 18010000 		.4byte	0x118
 2958 0118 07       		.uleb128 0x7
 2959 0119 F7000000 		.4byte	0xf7
 2960 011d 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 72


 2961 011e F7000000 		.4byte	0xf7
 2962 0122 2D010000 		.4byte	0x12d
 2963 0126 09       		.uleb128 0x9
 2964 0127 05010000 		.4byte	0x105
 2965 012b 17       		.byte	0x17
 2966 012c 00       		.byte	0
 2967 012d 0A       		.uleb128 0xa
 2968 012e 746D00   		.ascii	"tm\000"
 2969 0131 24       		.byte	0x24
 2970 0132 05       		.byte	0x5
 2971 0133 21       		.byte	0x21
 2972 0134 A5010000 		.4byte	0x1a5
 2973 0138 0B       		.uleb128 0xb
 2974 0139 95070000 		.4byte	.LASF25
 2975 013d 05       		.byte	0x5
 2976 013e 23       		.byte	0x23
 2977 013f 7E000000 		.4byte	0x7e
 2978 0143 00       		.byte	0
 2979 0144 0B       		.uleb128 0xb
 2980 0145 99040000 		.4byte	.LASF26
 2981 0149 05       		.byte	0x5
 2982 014a 24       		.byte	0x24
 2983 014b 7E000000 		.4byte	0x7e
 2984 014f 04       		.byte	0x4
 2985 0150 0B       		.uleb128 0xb
 2986 0151 18000000 		.4byte	.LASF27
 2987 0155 05       		.byte	0x5
 2988 0156 25       		.byte	0x25
 2989 0157 7E000000 		.4byte	0x7e
 2990 015b 08       		.byte	0x8
 2991 015c 0B       		.uleb128 0xb
 2992 015d 6B070000 		.4byte	.LASF28
 2993 0161 05       		.byte	0x5
 2994 0162 26       		.byte	0x26
 2995 0163 7E000000 		.4byte	0x7e
 2996 0167 0C       		.byte	0xc
 2997 0168 0B       		.uleb128 0xb
 2998 0169 AE020000 		.4byte	.LASF29
 2999 016d 05       		.byte	0x5
 3000 016e 27       		.byte	0x27
 3001 016f 7E000000 		.4byte	0x7e
 3002 0173 10       		.byte	0x10
 3003 0174 0B       		.uleb128 0xb
 3004 0175 FA020000 		.4byte	.LASF30
 3005 0179 05       		.byte	0x5
 3006 017a 28       		.byte	0x28
 3007 017b 7E000000 		.4byte	0x7e
 3008 017f 14       		.byte	0x14
 3009 0180 0B       		.uleb128 0xb
 3010 0181 75060000 		.4byte	.LASF31
 3011 0185 05       		.byte	0x5
 3012 0186 29       		.byte	0x29
 3013 0187 7E000000 		.4byte	0x7e
 3014 018b 18       		.byte	0x18
 3015 018c 0B       		.uleb128 0xb
 3016 018d 20000000 		.4byte	.LASF32
 3017 0191 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 73


 3018 0192 2A       		.byte	0x2a
 3019 0193 7E000000 		.4byte	0x7e
 3020 0197 1C       		.byte	0x1c
 3021 0198 0B       		.uleb128 0xb
 3022 0199 98030000 		.4byte	.LASF33
 3023 019d 05       		.byte	0x5
 3024 019e 2B       		.byte	0x2b
 3025 019f 7E000000 		.4byte	0x7e
 3026 01a3 20       		.byte	0x20
 3027 01a4 00       		.byte	0
 3028 01a5 0C       		.uleb128 0xc
 3029 01a6 8101     		.2byte	0x181
 3030 01a8 06       		.byte	0x6
 3031 01a9 0A       		.byte	0xa
 3032 01aa D3010000 		.4byte	0x1d3
 3033 01ae 0B       		.uleb128 0xb
 3034 01af EA040000 		.4byte	.LASF34
 3035 01b3 06       		.byte	0x6
 3036 01b4 0C       		.byte	0xc
 3037 01b5 D3010000 		.4byte	0x1d3
 3038 01b9 00       		.byte	0
 3039 01ba 0B       		.uleb128 0xb
 3040 01bb CD070000 		.4byte	.LASF35
 3041 01bf 06       		.byte	0x6
 3042 01c0 0D       		.byte	0xd
 3043 01c1 AD000000 		.4byte	0xad
 3044 01c5 80       		.byte	0x80
 3045 01c6 0B       		.uleb128 0xb
 3046 01c7 49060000 		.4byte	.LASF36
 3047 01cb 06       		.byte	0x6
 3048 01cc 0F       		.byte	0xf
 3049 01cd E3010000 		.4byte	0x1e3
 3050 01d1 81       		.byte	0x81
 3051 01d2 00       		.byte	0
 3052 01d3 08       		.uleb128 0x8
 3053 01d4 F7000000 		.4byte	0xf7
 3054 01d8 E3010000 		.4byte	0x1e3
 3055 01dc 09       		.uleb128 0x9
 3056 01dd 05010000 		.4byte	0x105
 3057 01e1 7F       		.byte	0x7f
 3058 01e2 00       		.byte	0
 3059 01e3 08       		.uleb128 0x8
 3060 01e4 F7000000 		.4byte	0xf7
 3061 01e8 F3010000 		.4byte	0x1f3
 3062 01ec 09       		.uleb128 0x9
 3063 01ed 05010000 		.4byte	0x105
 3064 01f1 FF       		.byte	0xff
 3065 01f2 00       		.byte	0
 3066 01f3 03       		.uleb128 0x3
 3067 01f4 31060000 		.4byte	.LASF37
 3068 01f8 06       		.byte	0x6
 3069 01f9 10       		.byte	0x10
 3070 01fa A5010000 		.4byte	0x1a5
 3071 01fe 0D       		.uleb128 0xd
 3072 01ff 2C       		.byte	0x2c
 3073 0200 07       		.byte	0x7
 3074 0201 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 74


 3075 0202 2B020000 		.4byte	0x22b
 3076 0206 0E       		.uleb128 0xe
 3077 0207 6B657900 		.ascii	"key\000"
 3078 020b 07       		.byte	0x7
 3079 020c 15       		.byte	0x15
 3080 020d 2B020000 		.4byte	0x22b
 3081 0211 00       		.byte	0
 3082 0212 0B       		.uleb128 0xb
 3083 0213 12000000 		.4byte	.LASF38
 3084 0217 07       		.byte	0x7
 3085 0218 16       		.byte	0x16
 3086 0219 2B020000 		.4byte	0x22b
 3087 021d 14       		.byte	0x14
 3088 021e 0B       		.uleb128 0xb
 3089 021f 6E080000 		.4byte	.LASF39
 3090 0223 07       		.byte	0x7
 3091 0224 17       		.byte	0x17
 3092 0225 DD000000 		.4byte	0xdd
 3093 0229 28       		.byte	0x28
 3094 022a 00       		.byte	0
 3095 022b 08       		.uleb128 0x8
 3096 022c F7000000 		.4byte	0xf7
 3097 0230 3B020000 		.4byte	0x23b
 3098 0234 09       		.uleb128 0x9
 3099 0235 05010000 		.4byte	0x105
 3100 0239 13       		.byte	0x13
 3101 023a 00       		.byte	0
 3102 023b 03       		.uleb128 0x3
 3103 023c 22030000 		.4byte	.LASF40
 3104 0240 07       		.byte	0x7
 3105 0241 19       		.byte	0x19
 3106 0242 FE010000 		.4byte	0x1fe
 3107 0246 0D       		.uleb128 0xd
 3108 0247 3C       		.byte	0x3c
 3109 0248 08       		.byte	0x8
 3110 0249 35       		.byte	0x35
 3111 024a 73020000 		.4byte	0x273
 3112 024e 0B       		.uleb128 0xb
 3113 024f 64070000 		.4byte	.LASF41
 3114 0253 08       		.byte	0x8
 3115 0254 36       		.byte	0x36
 3116 0255 2B020000 		.4byte	0x22b
 3117 0259 00       		.byte	0
 3118 025a 0B       		.uleb128 0xb
 3119 025b CB060000 		.4byte	.LASF42
 3120 025f 08       		.byte	0x8
 3121 0260 37       		.byte	0x37
 3122 0261 2B020000 		.4byte	0x22b
 3123 0265 14       		.byte	0x14
 3124 0266 0B       		.uleb128 0xb
 3125 0267 44060000 		.4byte	.LASF43
 3126 026b 08       		.byte	0x8
 3127 026c 38       		.byte	0x38
 3128 026d 2B020000 		.4byte	0x22b
 3129 0271 28       		.byte	0x28
 3130 0272 00       		.byte	0
 3131 0273 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 75


 3132 0274 DF060000 		.4byte	.LASF44
 3133 0278 08       		.byte	0x8
 3134 0279 3A       		.byte	0x3a
 3135 027a 46020000 		.4byte	0x246
 3136 027e 0D       		.uleb128 0xd
 3137 027f 20       		.byte	0x20
 3138 0280 08       		.byte	0x8
 3139 0281 3C       		.byte	0x3c
 3140 0282 E7020000 		.4byte	0x2e7
 3141 0286 0B       		.uleb128 0xb
 3142 0287 DD010000 		.4byte	.LASF45
 3143 028b 08       		.byte	0x8
 3144 028c 3D       		.byte	0x3d
 3145 028d 7E000000 		.4byte	0x7e
 3146 0291 00       		.byte	0
 3147 0292 0E       		.uleb128 0xe
 3148 0293 62657200 		.ascii	"ber\000"
 3149 0297 08       		.byte	0x8
 3150 0298 3E       		.byte	0x3e
 3151 0299 7E000000 		.4byte	0x7e
 3152 029d 04       		.byte	0x4
 3153 029e 0B       		.uleb128 0xb
 3154 029f 12060000 		.4byte	.LASF46
 3155 02a3 08       		.byte	0x8
 3156 02a4 3F       		.byte	0x3f
 3157 02a5 7E000000 		.4byte	0x7e
 3158 02a9 08       		.byte	0x8
 3159 02aa 0B       		.uleb128 0xb
 3160 02ab 67010000 		.4byte	.LASF47
 3161 02af 08       		.byte	0x8
 3162 02b0 40       		.byte	0x40
 3163 02b1 7E000000 		.4byte	0x7e
 3164 02b5 0C       		.byte	0xc
 3165 02b6 0B       		.uleb128 0xb
 3166 02b7 F7050000 		.4byte	.LASF48
 3167 02bb 08       		.byte	0x8
 3168 02bc 41       		.byte	0x41
 3169 02bd 7E000000 		.4byte	0x7e
 3170 02c1 10       		.byte	0x10
 3171 02c2 0B       		.uleb128 0xb
 3172 02c3 50060000 		.4byte	.LASF49
 3173 02c7 08       		.byte	0x8
 3174 02c8 42       		.byte	0x42
 3175 02c9 7E000000 		.4byte	0x7e
 3176 02cd 14       		.byte	0x14
 3177 02ce 0B       		.uleb128 0xb
 3178 02cf 89010000 		.4byte	.LASF50
 3179 02d3 08       		.byte	0x8
 3180 02d4 43       		.byte	0x43
 3181 02d5 7E000000 		.4byte	0x7e
 3182 02d9 18       		.byte	0x18
 3183 02da 0B       		.uleb128 0xb
 3184 02db EC030000 		.4byte	.LASF51
 3185 02df 08       		.byte	0x8
 3186 02e0 44       		.byte	0x44
 3187 02e1 7E000000 		.4byte	0x7e
 3188 02e5 1C       		.byte	0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 76


 3189 02e6 00       		.byte	0
 3190 02e7 03       		.uleb128 0x3
 3191 02e8 55060000 		.4byte	.LASF52
 3192 02ec 08       		.byte	0x8
 3193 02ed 46       		.byte	0x46
 3194 02ee 7E020000 		.4byte	0x27e
 3195 02f2 0D       		.uleb128 0xd
 3196 02f3 10       		.byte	0x10
 3197 02f4 08       		.byte	0x8
 3198 02f5 48       		.byte	0x48
 3199 02f6 37030000 		.4byte	0x337
 3200 02fa 0B       		.uleb128 0xb
 3201 02fb E1040000 		.4byte	.LASF53
 3202 02ff 08       		.byte	0x8
 3203 0300 49       		.byte	0x49
 3204 0301 E9000000 		.4byte	0xe9
 3205 0305 00       		.byte	0
 3206 0306 0B       		.uleb128 0xb
 3207 0307 5A000000 		.4byte	.LASF54
 3208 030b 08       		.byte	0x8
 3209 030c 4A       		.byte	0x4a
 3210 030d E9000000 		.4byte	0xe9
 3211 0311 04       		.byte	0x4
 3212 0312 0B       		.uleb128 0xb
 3213 0313 12020000 		.4byte	.LASF55
 3214 0317 08       		.byte	0x8
 3215 0318 4B       		.byte	0x4b
 3216 0319 E9000000 		.4byte	0xe9
 3217 031d 08       		.byte	0x8
 3218 031e 0B       		.uleb128 0xb
 3219 031f 78030000 		.4byte	.LASF56
 3220 0323 08       		.byte	0x8
 3221 0324 4C       		.byte	0x4c
 3222 0325 B9000000 		.4byte	0xb9
 3223 0329 0C       		.byte	0xc
 3224 032a 0B       		.uleb128 0xb
 3225 032b 73070000 		.4byte	.LASF57
 3226 032f 08       		.byte	0x8
 3227 0330 4D       		.byte	0x4d
 3228 0331 AD000000 		.4byte	0xad
 3229 0335 0E       		.byte	0xe
 3230 0336 00       		.byte	0
 3231 0337 03       		.uleb128 0x3
 3232 0338 EC060000 		.4byte	.LASF58
 3233 033c 08       		.byte	0x8
 3234 033d 4F       		.byte	0x4f
 3235 033e F2020000 		.4byte	0x2f2
 3236 0342 0D       		.uleb128 0xd
 3237 0343 05       		.byte	0x5
 3238 0344 08       		.byte	0x8
 3239 0345 52       		.byte	0x52
 3240 0346 87030000 		.4byte	0x387
 3241 034a 0B       		.uleb128 0xb
 3242 034b 2E020000 		.4byte	.LASF59
 3243 034f 08       		.byte	0x8
 3244 0350 54       		.byte	0x54
 3245 0351 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 77


 3246 0355 00       		.byte	0
 3247 0356 0B       		.uleb128 0xb
 3248 0357 A9050000 		.4byte	.LASF60
 3249 035b 08       		.byte	0x8
 3250 035c 56       		.byte	0x56
 3251 035d 87030000 		.4byte	0x387
 3252 0361 01       		.byte	0x1
 3253 0362 0B       		.uleb128 0xb
 3254 0363 04070000 		.4byte	.LASF61
 3255 0367 08       		.byte	0x8
 3256 0368 58       		.byte	0x58
 3257 0369 AD000000 		.4byte	0xad
 3258 036d 02       		.byte	0x2
 3259 036e 0B       		.uleb128 0xb
 3260 036f FC050000 		.4byte	.LASF62
 3261 0373 08       		.byte	0x8
 3262 0374 5A       		.byte	0x5a
 3263 0375 AD000000 		.4byte	0xad
 3264 0379 03       		.byte	0x3
 3265 037a 0B       		.uleb128 0xb
 3266 037b B5020000 		.4byte	.LASF63
 3267 037f 08       		.byte	0x8
 3268 0380 5D       		.byte	0x5d
 3269 0381 AD000000 		.4byte	0xad
 3270 0385 04       		.byte	0x4
 3271 0386 00       		.byte	0
 3272 0387 02       		.uleb128 0x2
 3273 0388 01       		.byte	0x1
 3274 0389 02       		.byte	0x2
 3275 038a C5050000 		.4byte	.LASF64
 3276 038e 03       		.uleb128 0x3
 3277 038f 64040000 		.4byte	.LASF65
 3278 0393 08       		.byte	0x8
 3279 0394 5F       		.byte	0x5f
 3280 0395 42030000 		.4byte	0x342
 3281 0399 0D       		.uleb128 0xd
 3282 039a 06       		.byte	0x6
 3283 039b 09       		.byte	0x9
 3284 039c 2E       		.byte	0x2e
 3285 039d D2030000 		.4byte	0x3d2
 3286 03a1 0B       		.uleb128 0xb
 3287 03a2 6C010000 		.4byte	.LASF66
 3288 03a6 09       		.byte	0x9
 3289 03a7 30       		.byte	0x30
 3290 03a8 B9000000 		.4byte	0xb9
 3291 03ac 00       		.byte	0
 3292 03ad 0B       		.uleb128 0xb
 3293 03ae EC010000 		.4byte	.LASF67
 3294 03b2 09       		.byte	0x9
 3295 03b3 31       		.byte	0x31
 3296 03b4 D1000000 		.4byte	0xd1
 3297 03b8 02       		.byte	0x2
 3298 03b9 0B       		.uleb128 0xb
 3299 03ba 1C080000 		.4byte	.LASF68
 3300 03be 09       		.byte	0x9
 3301 03bf 32       		.byte	0x32
 3302 03c0 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 78


 3303 03c4 04       		.byte	0x4
 3304 03c5 0B       		.uleb128 0xb
 3305 03c6 42000000 		.4byte	.LASF69
 3306 03ca 09       		.byte	0x9
 3307 03cb 33       		.byte	0x33
 3308 03cc AD000000 		.4byte	0xad
 3309 03d0 05       		.byte	0x5
 3310 03d1 00       		.byte	0
 3311 03d2 03       		.uleb128 0x3
 3312 03d3 BF050000 		.4byte	.LASF70
 3313 03d7 09       		.byte	0x9
 3314 03d8 36       		.byte	0x36
 3315 03d9 DD030000 		.4byte	0x3dd
 3316 03dd 0F       		.uleb128 0xf
 3317 03de 99030000 		.4byte	0x399
 3318 03e2 0D       		.uleb128 0xd
 3319 03e3 1C       		.byte	0x1c
 3320 03e4 09       		.byte	0x9
 3321 03e5 39       		.byte	0x39
 3322 03e6 03040000 		.4byte	0x403
 3323 03ea 0B       		.uleb128 0xb
 3324 03eb A1030000 		.4byte	.LASF71
 3325 03ef 09       		.byte	0x9
 3326 03f0 3B       		.byte	0x3b
 3327 03f1 03040000 		.4byte	0x403
 3328 03f5 00       		.byte	0
 3329 03f6 0B       		.uleb128 0xb
 3330 03f7 B4030000 		.4byte	.LASF72
 3331 03fb 09       		.byte	0x9
 3332 03fc 3C       		.byte	0x3c
 3333 03fd 1D010000 		.4byte	0x11d
 3334 0401 04       		.byte	0x4
 3335 0402 00       		.byte	0
 3336 0403 06       		.uleb128 0x6
 3337 0404 04       		.byte	0x4
 3338 0405 73020000 		.4byte	0x273
 3339 0409 03       		.uleb128 0x3
 3340 040a 59040000 		.4byte	.LASF73
 3341 040e 09       		.byte	0x9
 3342 040f 3E       		.byte	0x3e
 3343 0410 E2030000 		.4byte	0x3e2
 3344 0414 0D       		.uleb128 0xd
 3345 0415 68       		.byte	0x68
 3346 0416 09       		.byte	0x9
 3347 0417 44       		.byte	0x44
 3348 0418 35040000 		.4byte	0x435
 3349 041c 0B       		.uleb128 0xb
 3350 041d AC030000 		.4byte	.LASF74
 3351 0421 09       		.byte	0x9
 3352 0422 49       		.byte	0x49
 3353 0423 35040000 		.4byte	0x435
 3354 0427 00       		.byte	0
 3355 0428 0B       		.uleb128 0xb
 3356 0429 90030000 		.4byte	.LASF75
 3357 042d 09       		.byte	0x9
 3358 042e 4A       		.byte	0x4a
 3359 042f 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 79


 3360 0433 64       		.byte	0x64
 3361 0434 00       		.byte	0
 3362 0435 08       		.uleb128 0x8
 3363 0436 F7000000 		.4byte	0xf7
 3364 043a 45040000 		.4byte	0x445
 3365 043e 09       		.uleb128 0x9
 3366 043f 05010000 		.4byte	0x105
 3367 0443 63       		.byte	0x63
 3368 0444 00       		.byte	0
 3369 0445 03       		.uleb128 0x3
 3370 0446 ED070000 		.4byte	.LASF76
 3371 044a 09       		.byte	0x9
 3372 044b 50       		.byte	0x50
 3373 044c 14040000 		.4byte	0x414
 3374 0450 10       		.uleb128 0x10
 3375 0451 B2050000 		.4byte	.LASF108
 3376 0455 01       		.byte	0x1
 3377 0456 12       		.byte	0x12
 3378 0457 00000000 		.4byte	.LFB64
 3379 045b 44000000 		.4byte	.LFE64-.LFB64
 3380 045f 01       		.uleb128 0x1
 3381 0460 9C       		.byte	0x9c
 3382 0461 11       		.uleb128 0x11
 3383 0462 8A050000 		.4byte	.LASF77
 3384 0466 01       		.byte	0x1
 3385 0467 1C       		.byte	0x1c
 3386 0468 00000000 		.4byte	.LFB65
 3387 046c 6C000000 		.4byte	.LFE65-.LFB65
 3388 0470 01       		.uleb128 0x1
 3389 0471 9C       		.byte	0x9c
 3390 0472 11       		.uleb128 0x11
 3391 0473 4C070000 		.4byte	.LASF78
 3392 0477 01       		.byte	0x1
 3393 0478 36       		.byte	0x36
 3394 0479 00000000 		.4byte	.LFB66
 3395 047d 32000000 		.4byte	.LFE66-.LFB66
 3396 0481 01       		.uleb128 0x1
 3397 0482 9C       		.byte	0x9c
 3398 0483 11       		.uleb128 0x11
 3399 0484 0C030000 		.4byte	.LASF79
 3400 0488 01       		.byte	0x1
 3401 0489 46       		.byte	0x46
 3402 048a 00000000 		.4byte	.LFB67
 3403 048e 20000000 		.4byte	.LFE67-.LFB67
 3404 0492 01       		.uleb128 0x1
 3405 0493 9C       		.byte	0x9c
 3406 0494 11       		.uleb128 0x11
 3407 0495 5D080000 		.4byte	.LASF80
 3408 0499 01       		.byte	0x1
 3409 049a 4F       		.byte	0x4f
 3410 049b 00000000 		.4byte	.LFB68
 3411 049f 40000000 		.4byte	.LFE68-.LFB68
 3412 04a3 01       		.uleb128 0x1
 3413 04a4 9C       		.byte	0x9c
 3414 04a5 12       		.uleb128 0x12
 3415 04a6 C2030000 		.4byte	.LASF94
 3416 04aa 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 80


 3417 04ab 61       		.byte	0x61
 3418 04ac AD000000 		.4byte	0xad
 3419 04b0 00000000 		.4byte	.LFB69
 3420 04b4 DC000000 		.4byte	.LFE69-.LFB69
 3421 04b8 01       		.uleb128 0x1
 3422 04b9 9C       		.byte	0x9c
 3423 04ba 19050000 		.4byte	0x519
 3424 04be 13       		.uleb128 0x13
 3425 04bf 0A080000 		.4byte	.LASF81
 3426 04c3 01       		.byte	0x1
 3427 04c4 6A       		.byte	0x6a
 3428 04c5 AD000000 		.4byte	0xad
 3429 04c9 02       		.uleb128 0x2
 3430 04ca 91       		.byte	0x91
 3431 04cb 77       		.sleb128 -9
 3432 04cc 13       		.uleb128 0x13
 3433 04cd 13080000 		.4byte	.LASF82
 3434 04d1 01       		.byte	0x1
 3435 04d2 6B       		.byte	0x6b
 3436 04d3 AD000000 		.4byte	0xad
 3437 04d7 02       		.uleb128 0x2
 3438 04d8 91       		.byte	0x91
 3439 04d9 74       		.sleb128 -12
 3440 04da 13       		.uleb128 0x13
 3441 04db 2A080000 		.4byte	.LASF83
 3442 04df 01       		.byte	0x1
 3443 04e0 6D       		.byte	0x6d
 3444 04e1 57000000 		.4byte	0x57
 3445 04e5 02       		.uleb128 0x2
 3446 04e6 91       		.byte	0x91
 3447 04e7 70       		.sleb128 -16
 3448 04e8 14       		.uleb128 0x14
 3449 04e9 26000000 		.4byte	.LBB2
 3450 04ed 4A000000 		.4byte	.LBE2-.LBB2
 3451 04f1 13       		.uleb128 0x13
 3452 04f2 13080000 		.4byte	.LASF82
 3453 04f6 01       		.byte	0x1
 3454 04f7 70       		.byte	0x70
 3455 04f8 AD000000 		.4byte	0xad
 3456 04fc 02       		.uleb128 0x2
 3457 04fd 91       		.byte	0x91
 3458 04fe 76       		.sleb128 -10
 3459 04ff 14       		.uleb128 0x14
 3460 0500 2C000000 		.4byte	.LBB3
 3461 0504 2A000000 		.4byte	.LBE3-.LBB3
 3462 0508 13       		.uleb128 0x13
 3463 0509 2E030000 		.4byte	.LASF84
 3464 050d 01       		.byte	0x1
 3465 050e 72       		.byte	0x72
 3466 050f AD000000 		.4byte	0xad
 3467 0513 02       		.uleb128 0x2
 3468 0514 91       		.byte	0x91
 3469 0515 75       		.sleb128 -11
 3470 0516 00       		.byte	0
 3471 0517 00       		.byte	0
 3472 0518 00       		.byte	0
 3473 0519 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 81


 3474 051a 7D060000 		.4byte	.LASF85
 3475 051e 01       		.byte	0x1
 3476 051f 93       		.byte	0x93
 3477 0520 00000000 		.4byte	.LFB70
 3478 0524 1C000000 		.4byte	.LFE70-.LFB70
 3479 0528 01       		.uleb128 0x1
 3480 0529 9C       		.byte	0x9c
 3481 052a 11       		.uleb128 0x11
 3482 052b 63060000 		.4byte	.LASF86
 3483 052f 01       		.byte	0x1
 3484 0530 9B       		.byte	0x9b
 3485 0531 00000000 		.4byte	.LFB71
 3486 0535 28000000 		.4byte	.LFE71-.LFB71
 3487 0539 01       		.uleb128 0x1
 3488 053a 9C       		.byte	0x9c
 3489 053b 15       		.uleb128 0x15
 3490 053c 48040000 		.4byte	.LASF98
 3491 0540 01       		.byte	0x1
 3492 0541 A6       		.byte	0xa6
 3493 0542 8C000000 		.4byte	0x8c
 3494 0546 00000000 		.4byte	.LFB72
 3495 054a B8000000 		.4byte	.LFE72-.LFB72
 3496 054e 01       		.uleb128 0x1
 3497 054f 9C       		.byte	0x9c
 3498 0550 CD050000 		.4byte	0x5cd
 3499 0554 16       		.uleb128 0x16
 3500 0555 6A050000 		.4byte	.LASF87
 3501 0559 01       		.byte	0x1
 3502 055a A6       		.byte	0xa6
 3503 055b 0C010000 		.4byte	0x10c
 3504 055f 02       		.uleb128 0x2
 3505 0560 91       		.byte	0x91
 3506 0561 5C       		.sleb128 -36
 3507 0562 16       		.uleb128 0x16
 3508 0563 34080000 		.4byte	.LASF88
 3509 0567 01       		.byte	0x1
 3510 0568 A6       		.byte	0xa6
 3511 0569 0C010000 		.4byte	0x10c
 3512 056d 02       		.uleb128 0x2
 3513 056e 91       		.byte	0x91
 3514 056f 58       		.sleb128 -40
 3515 0570 16       		.uleb128 0x16
 3516 0571 59030000 		.4byte	.LASF89
 3517 0575 01       		.byte	0x1
 3518 0576 A6       		.byte	0xa6
 3519 0577 A2000000 		.4byte	0xa2
 3520 057b 02       		.uleb128 0x2
 3521 057c 91       		.byte	0x91
 3522 057d 54       		.sleb128 -44
 3523 057e 13       		.uleb128 0x13
 3524 057f 3D040000 		.4byte	.LASF90
 3525 0583 01       		.byte	0x1
 3526 0584 A8       		.byte	0xa8
 3527 0585 C5000000 		.4byte	0xc5
 3528 0589 02       		.uleb128 0x2
 3529 058a 91       		.byte	0x91
 3530 058b 74       		.sleb128 -12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 82


 3531 058c 14       		.uleb128 0x14
 3532 058d 16000000 		.4byte	.LBB4
 3533 0591 7C000000 		.4byte	.LBE4-.LBB4
 3534 0595 13       		.uleb128 0x13
 3535 0596 73050000 		.4byte	.LASF91
 3536 059a 01       		.byte	0x1
 3537 059b AC       		.byte	0xac
 3538 059c 0C010000 		.4byte	0x10c
 3539 05a0 02       		.uleb128 0x2
 3540 05a1 91       		.byte	0x91
 3541 05a2 64       		.sleb128 -28
 3542 05a3 13       		.uleb128 0x13
 3543 05a4 F1050000 		.4byte	.LASF92
 3544 05a8 01       		.byte	0x1
 3545 05a9 AD       		.byte	0xad
 3546 05aa A2000000 		.4byte	0xa2
 3547 05ae 02       		.uleb128 0x2
 3548 05af 91       		.byte	0x91
 3549 05b0 6C       		.sleb128 -20
 3550 05b1 17       		.uleb128 0x17
 3551 05b2 6900     		.ascii	"i\000"
 3552 05b4 01       		.byte	0x1
 3553 05b5 AE       		.byte	0xae
 3554 05b6 A2000000 		.4byte	0xa2
 3555 05ba 02       		.uleb128 0x2
 3556 05bb 91       		.byte	0x91
 3557 05bc 70       		.sleb128 -16
 3558 05bd 13       		.uleb128 0x13
 3559 05be 83020000 		.4byte	.LASF93
 3560 05c2 01       		.byte	0x1
 3561 05c3 AE       		.byte	0xae
 3562 05c4 A2000000 		.4byte	0xa2
 3563 05c8 02       		.uleb128 0x2
 3564 05c9 91       		.byte	0x91
 3565 05ca 68       		.sleb128 -24
 3566 05cb 00       		.byte	0
 3567 05cc 00       		.byte	0
 3568 05cd 12       		.uleb128 0x12
 3569 05ce 0B050000 		.4byte	.LASF95
 3570 05d2 01       		.byte	0x1
 3571 05d3 DA       		.byte	0xda
 3572 05d4 F3010000 		.4byte	0x1f3
 3573 05d8 00000000 		.4byte	.LFB73
 3574 05dc 00010000 		.4byte	.LFE73-.LFB73
 3575 05e0 01       		.uleb128 0x1
 3576 05e1 9C       		.byte	0x9c
 3577 05e2 24060000 		.4byte	0x624
 3578 05e6 13       		.uleb128 0x13
 3579 05e7 22010000 		.4byte	.LASF96
 3580 05eb 01       		.byte	0x1
 3581 05ec DC       		.byte	0xdc
 3582 05ed F3010000 		.4byte	0x1f3
 3583 05f1 03       		.uleb128 0x3
 3584 05f2 91       		.byte	0x91
 3585 05f3 E47C     		.sleb128 -412
 3586 05f5 14       		.uleb128 0x14
 3587 05f6 4A000000 		.4byte	.LBB5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 83


 3588 05fa 86000000 		.4byte	.LBE5-.LBB5
 3589 05fe 17       		.uleb128 0x17
 3590 05ff 6900     		.ascii	"i\000"
 3591 0601 01       		.byte	0x1
 3592 0602 E3       		.byte	0xe3
 3593 0603 7E000000 		.4byte	0x7e
 3594 0607 02       		.uleb128 0x2
 3595 0608 91       		.byte	0x91
 3596 0609 6C       		.sleb128 -20
 3597 060a 14       		.uleb128 0x14
 3598 060b 70000000 		.4byte	.LBB6
 3599 060f 46000000 		.4byte	.LBE6-.LBB6
 3600 0613 13       		.uleb128 0x13
 3601 0614 5C020000 		.4byte	.LASF97
 3602 0618 01       		.byte	0x1
 3603 0619 F0       		.byte	0xf0
 3604 061a 57000000 		.4byte	0x57
 3605 061e 02       		.uleb128 0x2
 3606 061f 91       		.byte	0x91
 3607 0620 68       		.sleb128 -24
 3608 0621 00       		.byte	0
 3609 0622 00       		.byte	0
 3610 0623 00       		.byte	0
 3611 0624 18       		.uleb128 0x18
 3612 0625 4A030000 		.4byte	.LASF99
 3613 0629 01       		.byte	0x1
 3614 062a 0401     		.2byte	0x104
 3615 062c AD000000 		.4byte	0xad
 3616 0630 00000000 		.4byte	.LFB74
 3617 0634 78000000 		.4byte	.LFE74-.LFB74
 3618 0638 01       		.uleb128 0x1
 3619 0639 9C       		.byte	0x9c
 3620 063a 95060000 		.4byte	0x695
 3621 063e 19       		.uleb128 0x19
 3622 063f 28040000 		.4byte	.LASF100
 3623 0643 01       		.byte	0x1
 3624 0644 0401     		.2byte	0x104
 3625 0646 0C010000 		.4byte	0x10c
 3626 064a 02       		.uleb128 0x2
 3627 064b 91       		.byte	0x91
 3628 064c 6C       		.sleb128 -20
 3629 064d 19       		.uleb128 0x19
 3630 064e D9030000 		.4byte	.LASF101
 3631 0652 01       		.byte	0x1
 3632 0653 0401     		.2byte	0x104
 3633 0655 12010000 		.4byte	0x112
 3634 0659 02       		.uleb128 0x2
 3635 065a 91       		.byte	0x91
 3636 065b 68       		.sleb128 -24
 3637 065c 19       		.uleb128 0x19
 3638 065d FF030000 		.4byte	.LASF102
 3639 0661 01       		.byte	0x1
 3640 0662 0401     		.2byte	0x104
 3641 0664 12010000 		.4byte	0x112
 3642 0668 02       		.uleb128 0x2
 3643 0669 91       		.byte	0x91
 3644 066a 64       		.sleb128 -28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 84


 3645 066b 19       		.uleb128 0x19
 3646 066c E5030000 		.4byte	.LASF103
 3647 0670 01       		.byte	0x1
 3648 0671 0401     		.2byte	0x104
 3649 0673 0C010000 		.4byte	0x10c
 3650 0677 02       		.uleb128 0x2
 3651 0678 91       		.byte	0x91
 3652 0679 60       		.sleb128 -32
 3653 067a 1A       		.uleb128 0x1a
 3654 067b 6100     		.ascii	"a\000"
 3655 067d 01       		.byte	0x1
 3656 067e 0601     		.2byte	0x106
 3657 0680 0C010000 		.4byte	0x10c
 3658 0684 02       		.uleb128 0x2
 3659 0685 91       		.byte	0x91
 3660 0686 74       		.sleb128 -12
 3661 0687 1A       		.uleb128 0x1a
 3662 0688 6200     		.ascii	"b\000"
 3663 068a 01       		.byte	0x1
 3664 068b 0601     		.2byte	0x106
 3665 068d 0C010000 		.4byte	0x10c
 3666 0691 02       		.uleb128 0x2
 3667 0692 91       		.byte	0x91
 3668 0693 70       		.sleb128 -16
 3669 0694 00       		.byte	0
 3670 0695 1B       		.uleb128 0x1b
 3671 0696 A5060000 		.4byte	.LASF104
 3672 069a 01       		.byte	0x1
 3673 069b 2301     		.2byte	0x123
 3674 069d AD000000 		.4byte	0xad
 3675 06a1 00000000 		.4byte	.LFB75
 3676 06a5 3C010000 		.4byte	.LFE75-.LFB75
 3677 06a9 01       		.uleb128 0x1
 3678 06aa 9C       		.byte	0x9c
 3679 06ab C7060000 		.4byte	0x6c7
 3680 06af 14       		.uleb128 0x14
 3681 06b0 2E000000 		.4byte	.LBB7
 3682 06b4 32000000 		.4byte	.LBE7-.LBB7
 3683 06b8 1A       		.uleb128 0x1a
 3684 06b9 6900     		.ascii	"i\000"
 3685 06bb 01       		.byte	0x1
 3686 06bc 3101     		.2byte	0x131
 3687 06be AD000000 		.4byte	0xad
 3688 06c2 02       		.uleb128 0x2
 3689 06c3 91       		.byte	0x91
 3690 06c4 77       		.sleb128 -9
 3691 06c5 00       		.byte	0
 3692 06c6 00       		.byte	0
 3693 06c7 1B       		.uleb128 0x1b
 3694 06c8 AF040000 		.4byte	.LASF105
 3695 06cc 01       		.byte	0x1
 3696 06cd 6A01     		.2byte	0x16a
 3697 06cf AD000000 		.4byte	0xad
 3698 06d3 00000000 		.4byte	.LFB76
 3699 06d7 B8000000 		.4byte	.LFE76-.LFB76
 3700 06db 01       		.uleb128 0x1
 3701 06dc 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 85


 3702 06dd 0A070000 		.4byte	0x70a
 3703 06e1 1C       		.uleb128 0x1c
 3704 06e2 CD070000 		.4byte	.LASF35
 3705 06e6 01       		.byte	0x1
 3706 06e7 6E01     		.2byte	0x16e
 3707 06e9 AD000000 		.4byte	0xad
 3708 06ed 02       		.uleb128 0x2
 3709 06ee 91       		.byte	0x91
 3710 06ef 77       		.sleb128 -9
 3711 06f0 14       		.uleb128 0x14
 3712 06f1 36000000 		.4byte	.LBB8
 3713 06f5 48000000 		.4byte	.LBE8-.LBB8
 3714 06f9 1C       		.uleb128 0x1c
 3715 06fa 2D040000 		.4byte	.LASF106
 3716 06fe 01       		.byte	0x1
 3717 06ff 7601     		.2byte	0x176
 3718 0701 0A070000 		.4byte	0x70a
 3719 0705 02       		.uleb128 0x2
 3720 0706 91       		.byte	0x91
 3721 0707 6C       		.sleb128 -20
 3722 0708 00       		.byte	0
 3723 0709 00       		.byte	0
 3724 070a 08       		.uleb128 0x8
 3725 070b F7000000 		.4byte	0xf7
 3726 070f 1A070000 		.4byte	0x71a
 3727 0713 09       		.uleb128 0x9
 3728 0714 05010000 		.4byte	0x105
 3729 0718 09       		.byte	0x9
 3730 0719 00       		.byte	0
 3731 071a 1D       		.uleb128 0x1d
 3732 071b B6010000 		.4byte	.LASF107
 3733 071f 01       		.byte	0x1
 3734 0720 8801     		.2byte	0x188
 3735 0722 00000000 		.4byte	.LFB77
 3736 0726 1C000000 		.4byte	.LFE77-.LFB77
 3737 072a 01       		.uleb128 0x1
 3738 072b 9C       		.byte	0x9c
 3739 072c 1E       		.uleb128 0x1e
 3740 072d 11070000 		.4byte	.LASF109
 3741 0731 01       		.byte	0x1
 3742 0732 9801     		.2byte	0x198
 3743 0734 AD000000 		.4byte	0xad
 3744 0738 00000000 		.4byte	.LFB78
 3745 073c 28000000 		.4byte	.LFE78-.LFB78
 3746 0740 01       		.uleb128 0x1
 3747 0741 9C       		.byte	0x9c
 3748 0742 1F       		.uleb128 0x1f
 3749 0743 61030000 		.4byte	.LASF112
 3750 0747 01       		.byte	0x1
 3751 0748 A301     		.2byte	0x1a3
 3752 074a 00000000 		.4byte	.LFB79
 3753 074e 84000000 		.4byte	.LFE79-.LFB79
 3754 0752 01       		.uleb128 0x1
 3755 0753 9C       		.byte	0x9c
 3756 0754 68070000 		.4byte	0x768
 3757 0758 1C       		.uleb128 0x1c
 3758 0759 8A030000 		.4byte	.LASF110
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 86


 3759 075d 01       		.byte	0x1
 3760 075e B001     		.2byte	0x1b0
 3761 0760 7E000000 		.4byte	0x7e
 3762 0764 02       		.uleb128 0x2
 3763 0765 91       		.byte	0x91
 3764 0766 74       		.sleb128 -12
 3765 0767 00       		.byte	0
 3766 0768 20       		.uleb128 0x20
 3767 0769 DA020000 		.4byte	.LASF111
 3768 076d 01       		.byte	0x1
 3769 076e C201     		.2byte	0x1c2
 3770 0770 00000000 		.4byte	.LFB80
 3771 0774 30000000 		.4byte	.LFE80-.LFB80
 3772 0778 01       		.uleb128 0x1
 3773 0779 9C       		.byte	0x9c
 3774 077a 1F       		.uleb128 0x1f
 3775 077b 9C070000 		.4byte	.LASF113
 3776 077f 01       		.byte	0x1
 3777 0780 CB01     		.2byte	0x1cb
 3778 0782 00000000 		.4byte	.LFB81
 3779 0786 0C020000 		.4byte	.LFE81-.LFB81
 3780 078a 01       		.uleb128 0x1
 3781 078b 9C       		.byte	0x9c
 3782 078c 2D080000 		.4byte	0x82d
 3783 0790 1C       		.uleb128 0x1c
 3784 0791 06060000 		.4byte	.LASF114
 3785 0795 01       		.byte	0x1
 3786 0796 CE01     		.2byte	0x1ce
 3787 0798 0A070000 		.4byte	0x70a
 3788 079c 02       		.uleb128 0x2
 3789 079d 91       		.byte	0x91
 3790 079e 64       		.sleb128 -28
 3791 079f 1C       		.uleb128 0x1c
 3792 07a0 51020000 		.4byte	.LASF115
 3793 07a4 01       		.byte	0x1
 3794 07a5 CF01     		.2byte	0x1cf
 3795 07a7 0A070000 		.4byte	0x70a
 3796 07ab 02       		.uleb128 0x2
 3797 07ac 91       		.byte	0x91
 3798 07ad 58       		.sleb128 -40
 3799 07ae 1C       		.uleb128 0x1c
 3800 07af BF070000 		.4byte	.LASF116
 3801 07b3 01       		.byte	0x1
 3802 07b4 D001     		.2byte	0x1d0
 3803 07b6 0A070000 		.4byte	0x70a
 3804 07ba 02       		.uleb128 0x2
 3805 07bb 91       		.byte	0x91
 3806 07bc 4C       		.sleb128 -52
 3807 07bd 1C       		.uleb128 0x1c
 3808 07be 9B050000 		.4byte	.LASF117
 3809 07c2 01       		.byte	0x1
 3810 07c3 D101     		.2byte	0x1d1
 3811 07c5 0A070000 		.4byte	0x70a
 3812 07c9 02       		.uleb128 0x2
 3813 07ca 91       		.byte	0x91
 3814 07cb 40       		.sleb128 -64
 3815 07cc 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 87


 3816 07cd CD020000 		.4byte	.LASF118
 3817 07d1 01       		.byte	0x1
 3818 07d2 D201     		.2byte	0x1d2
 3819 07d4 0A070000 		.4byte	0x70a
 3820 07d8 03       		.uleb128 0x3
 3821 07d9 91       		.byte	0x91
 3822 07da B47F     		.sleb128 -76
 3823 07dc 1C       		.uleb128 0x1c
 3824 07dd 2E020000 		.4byte	.LASF59
 3825 07e1 01       		.byte	0x1
 3826 07e2 E201     		.2byte	0x1e2
 3827 07e4 7E000000 		.4byte	0x7e
 3828 07e8 03       		.uleb128 0x3
 3829 07e9 91       		.byte	0x91
 3830 07ea B07F     		.sleb128 -80
 3831 07ec 1C       		.uleb128 0x1c
 3832 07ed A9050000 		.4byte	.LASF60
 3833 07f1 01       		.byte	0x1
 3834 07f2 E201     		.2byte	0x1e2
 3835 07f4 7E000000 		.4byte	0x7e
 3836 07f8 03       		.uleb128 0x3
 3837 07f9 91       		.byte	0x91
 3838 07fa AC7F     		.sleb128 -84
 3839 07fc 1C       		.uleb128 0x1c
 3840 07fd 79070000 		.4byte	.LASF119
 3841 0801 01       		.byte	0x1
 3842 0802 E201     		.2byte	0x1e2
 3843 0804 7E000000 		.4byte	0x7e
 3844 0808 03       		.uleb128 0x3
 3845 0809 91       		.byte	0x91
 3846 080a A87F     		.sleb128 -88
 3847 080c 1C       		.uleb128 0x1c
 3848 080d 7B040000 		.4byte	.LASF120
 3849 0811 01       		.byte	0x1
 3850 0812 E201     		.2byte	0x1e2
 3851 0814 7E000000 		.4byte	0x7e
 3852 0818 03       		.uleb128 0x3
 3853 0819 91       		.byte	0x91
 3854 081a A47F     		.sleb128 -92
 3855 081c 1C       		.uleb128 0x1c
 3856 081d 32040000 		.4byte	.LASF121
 3857 0821 01       		.byte	0x1
 3858 0822 E201     		.2byte	0x1e2
 3859 0824 7E000000 		.4byte	0x7e
 3860 0828 03       		.uleb128 0x3
 3861 0829 91       		.byte	0x91
 3862 082a A07F     		.sleb128 -96
 3863 082c 00       		.byte	0
 3864 082d 1F       		.uleb128 0x1f
 3865 082e 38020000 		.4byte	.LASF122
 3866 0832 01       		.byte	0x1
 3867 0833 0A02     		.2byte	0x20a
 3868 0835 00000000 		.4byte	.LFB82
 3869 0839 68010000 		.4byte	.LFE82-.LFB82
 3870 083d 01       		.uleb128 0x1
 3871 083e 9C       		.byte	0x9c
 3872 083f 5D080000 		.4byte	0x85d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 88


 3873 0843 14       		.uleb128 0x14
 3874 0844 DA000000 		.4byte	.LBB9
 3875 0848 38000000 		.4byte	.LBE9-.LBB9
 3876 084c 1C       		.uleb128 0x1c
 3877 084d C6060000 		.4byte	.LASF123
 3878 0851 01       		.byte	0x1
 3879 0852 3802     		.2byte	0x238
 3880 0854 0A070000 		.4byte	0x70a
 3881 0858 02       		.uleb128 0x2
 3882 0859 91       		.byte	0x91
 3883 085a 6C       		.sleb128 -20
 3884 085b 00       		.byte	0
 3885 085c 00       		.byte	0
 3886 085d 1B       		.uleb128 0x1b
 3887 085e 97020000 		.4byte	.LASF124
 3888 0862 01       		.byte	0x1
 3889 0863 4B02     		.2byte	0x24b
 3890 0865 57000000 		.4byte	0x57
 3891 0869 00000000 		.4byte	.LFB83
 3892 086d 44010000 		.4byte	.LFE83-.LFB83
 3893 0871 01       		.uleb128 0x1
 3894 0872 9C       		.byte	0x9c
 3895 0873 19090000 		.4byte	0x919
 3896 0877 1C       		.uleb128 0x1c
 3897 0878 13040000 		.4byte	.LASF125
 3898 087c 01       		.byte	0x1
 3899 087d 5602     		.2byte	0x256
 3900 087f 57000000 		.4byte	0x57
 3901 0883 02       		.uleb128 0x2
 3902 0884 91       		.byte	0x91
 3903 0885 74       		.sleb128 -12
 3904 0886 14       		.uleb128 0x14
 3905 0887 30000000 		.4byte	.LBB10
 3906 088b DE000000 		.4byte	.LBE10-.LBB10
 3907 088f 1C       		.uleb128 0x1c
 3908 0890 5C020000 		.4byte	.LASF97
 3909 0894 01       		.byte	0x1
 3910 0895 5B02     		.2byte	0x25b
 3911 0897 19090000 		.4byte	0x919
 3912 089b 02       		.uleb128 0x2
 3913 089c 91       		.byte	0x91
 3914 089d 54       		.sleb128 -44
 3915 089e 1A       		.uleb128 0x1a
 3916 089f 7400     		.ascii	"t\000"
 3917 08a1 01       		.byte	0x1
 3918 08a2 6102     		.2byte	0x261
 3919 08a4 2D010000 		.4byte	0x12d
 3920 08a8 03       		.uleb128 0x3
 3921 08a9 91       		.byte	0x91
 3922 08aa 947F     		.sleb128 -108
 3923 08ac 1C       		.uleb128 0x1c
 3924 08ad D8010000 		.4byte	.LASF126
 3925 08b1 01       		.byte	0x1
 3926 08b2 6402     		.2byte	0x264
 3927 08b4 7E000000 		.4byte	0x7e
 3928 08b8 02       		.uleb128 0x2
 3929 08b9 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 89


 3930 08ba 50       		.sleb128 -48
 3931 08bb 1C       		.uleb128 0x1c
 3932 08bc A9040000 		.4byte	.LASF127
 3933 08c0 01       		.byte	0x1
 3934 08c1 6402     		.2byte	0x264
 3935 08c3 7E000000 		.4byte	0x7e
 3936 08c7 02       		.uleb128 0x2
 3937 08c8 91       		.byte	0x91
 3938 08c9 4C       		.sleb128 -52
 3939 08ca 1A       		.uleb128 0x1a
 3940 08cb 64617900 		.ascii	"day\000"
 3941 08cf 01       		.byte	0x1
 3942 08d0 6402     		.2byte	0x264
 3943 08d2 7E000000 		.4byte	0x7e
 3944 08d6 02       		.uleb128 0x2
 3945 08d7 91       		.byte	0x91
 3946 08d8 48       		.sleb128 -56
 3947 08d9 1C       		.uleb128 0x1c
 3948 08da 65050000 		.4byte	.LASF128
 3949 08de 01       		.byte	0x1
 3950 08df 6402     		.2byte	0x264
 3951 08e1 7E000000 		.4byte	0x7e
 3952 08e5 02       		.uleb128 0x2
 3953 08e6 91       		.byte	0x91
 3954 08e7 44       		.sleb128 -60
 3955 08e8 1C       		.uleb128 0x1c
 3956 08e9 85070000 		.4byte	.LASF129
 3957 08ed 01       		.byte	0x1
 3958 08ee 6402     		.2byte	0x264
 3959 08f0 7E000000 		.4byte	0x7e
 3960 08f4 02       		.uleb128 0x2
 3961 08f5 91       		.byte	0x91
 3962 08f6 40       		.sleb128 -64
 3963 08f7 1C       		.uleb128 0x1c
 3964 08f8 D1010000 		.4byte	.LASF130
 3965 08fc 01       		.byte	0x1
 3966 08fd 6402     		.2byte	0x264
 3967 08ff 7E000000 		.4byte	0x7e
 3968 0903 03       		.uleb128 0x3
 3969 0904 91       		.byte	0x91
 3970 0905 BC7F     		.sleb128 -68
 3971 0907 1C       		.uleb128 0x1c
 3972 0908 00000000 		.4byte	.LASF131
 3973 090c 01       		.byte	0x1
 3974 090d 6402     		.2byte	0x264
 3975 090f 7E000000 		.4byte	0x7e
 3976 0913 03       		.uleb128 0x3
 3977 0914 91       		.byte	0x91
 3978 0915 B87F     		.sleb128 -72
 3979 0917 00       		.byte	0
 3980 0918 00       		.byte	0
 3981 0919 08       		.uleb128 0x8
 3982 091a F7000000 		.4byte	0xf7
 3983 091e 29090000 		.4byte	0x929
 3984 0922 09       		.uleb128 0x9
 3985 0923 05010000 		.4byte	0x105
 3986 0927 1D       		.byte	0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 90


 3987 0928 00       		.byte	0
 3988 0929 21       		.uleb128 0x21
 3989 092a 02020000 		.4byte	.LASF132
 3990 092e 01       		.byte	0x1
 3991 092f 8402     		.2byte	0x284
 3992 0931 AD000000 		.4byte	0xad
 3993 0935 00000000 		.4byte	.LFB84
 3994 0939 14000000 		.4byte	.LFE84-.LFB84
 3995 093d 01       		.uleb128 0x1
 3996 093e 9C       		.byte	0x9c
 3997 093f 1D       		.uleb128 0x1d
 3998 0940 C1020000 		.4byte	.LASF133
 3999 0944 01       		.byte	0x1
 4000 0945 8902     		.2byte	0x289
 4001 0947 00000000 		.4byte	.LFB85
 4002 094b 1A000000 		.4byte	.LFE85-.LFB85
 4003 094f 01       		.uleb128 0x1
 4004 0950 9C       		.byte	0x9c
 4005 0951 1D       		.uleb128 0x1d
 4006 0952 F2000000 		.4byte	.LASF134
 4007 0956 01       		.byte	0x1
 4008 0957 9602     		.2byte	0x296
 4009 0959 00000000 		.4byte	.LFB86
 4010 095d 2A000000 		.4byte	.LFE86-.LFB86
 4011 0961 01       		.uleb128 0x1
 4012 0962 9C       		.byte	0x9c
 4013 0963 1B       		.uleb128 0x1b
 4014 0964 17060000 		.4byte	.LASF135
 4015 0968 01       		.byte	0x1
 4016 0969 A902     		.2byte	0x2a9
 4017 096b 37030000 		.4byte	0x337
 4018 096f 00000000 		.4byte	.LFB87
 4019 0973 7C020000 		.4byte	.LFE87-.LFB87
 4020 0977 01       		.uleb128 0x1
 4021 0978 9C       		.byte	0x9c
 4022 0979 0C0A0000 		.4byte	0xa0c
 4023 097d 1A       		.uleb128 0x1a
 4024 097e 67707300 		.ascii	"gps\000"
 4025 0982 01       		.byte	0x1
 4026 0983 AA02     		.2byte	0x2aa
 4027 0985 37030000 		.4byte	0x337
 4028 0989 02       		.uleb128 0x2
 4029 098a 91       		.byte	0x91
 4030 098b 4C       		.sleb128 -52
 4031 098c 1C       		.uleb128 0x1c
 4032 098d 46080000 		.4byte	.LASF136
 4033 0991 01       		.byte	0x1
 4034 0992 B602     		.2byte	0x2b6
 4035 0994 57000000 		.4byte	0x57
 4036 0998 02       		.uleb128 0x2
 4037 0999 91       		.byte	0x91
 4038 099a 68       		.sleb128 -24
 4039 099b 1C       		.uleb128 0x1c
 4040 099c 41070000 		.4byte	.LASF137
 4041 09a0 01       		.byte	0x1
 4042 09a1 DD02     		.2byte	0x2dd
 4043 09a3 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 91


 4044 09a7 02       		.uleb128 0x2
 4045 09a8 91       		.byte	0x91
 4046 09a9 67       		.sleb128 -25
 4047 09aa 1A       		.uleb128 0x1a
 4048 09ab 6C617400 		.ascii	"lat\000"
 4049 09af 01       		.byte	0x1
 4050 09b0 E902     		.2byte	0x2e9
 4051 09b2 E9000000 		.4byte	0xe9
 4052 09b6 02       		.uleb128 0x2
 4053 09b7 91       		.byte	0x91
 4054 09b8 48       		.sleb128 -56
 4055 09b9 1A       		.uleb128 0x1a
 4056 09ba 6C6F6E00 		.ascii	"lon\000"
 4057 09be 01       		.byte	0x1
 4058 09bf EA02     		.2byte	0x2ea
 4059 09c1 E9000000 		.4byte	0xe9
 4060 09c5 02       		.uleb128 0x2
 4061 09c6 91       		.byte	0x91
 4062 09c7 44       		.sleb128 -60
 4063 09c8 1A       		.uleb128 0x1a
 4064 09c9 616C7400 		.ascii	"alt\000"
 4065 09cd 01       		.byte	0x1
 4066 09ce EB02     		.2byte	0x2eb
 4067 09d0 E9000000 		.4byte	0xe9
 4068 09d4 02       		.uleb128 0x2
 4069 09d5 91       		.byte	0x91
 4070 09d6 40       		.sleb128 -64
 4071 09d7 1A       		.uleb128 0x1a
 4072 09d8 733100   		.ascii	"s1\000"
 4073 09db 01       		.byte	0x1
 4074 09dc EF02     		.2byte	0x2ef
 4075 09de 0C010000 		.4byte	0x10c
 4076 09e2 02       		.uleb128 0x2
 4077 09e3 91       		.byte	0x91
 4078 09e4 60       		.sleb128 -32
 4079 09e5 1C       		.uleb128 0x1c
 4080 09e6 8A030000 		.4byte	.LASF110
 4081 09ea 01       		.byte	0x1
 4082 09eb F202     		.2byte	0x2f2
 4083 09ed 7E000000 		.4byte	0x7e
 4084 09f1 02       		.uleb128 0x2
 4085 09f2 91       		.byte	0x91
 4086 09f3 5C       		.sleb128 -36
 4087 09f4 14       		.uleb128 0x14
 4088 09f5 B4000000 		.4byte	.LBB11
 4089 09f9 38000000 		.4byte	.LBE11-.LBB11
 4090 09fd 1A       		.uleb128 0x1a
 4091 09fe 6900     		.ascii	"i\000"
 4092 0a00 01       		.byte	0x1
 4093 0a01 DE02     		.2byte	0x2de
 4094 0a03 B9000000 		.4byte	0xb9
 4095 0a07 02       		.uleb128 0x2
 4096 0a08 91       		.byte	0x91
 4097 0a09 6E       		.sleb128 -18
 4098 0a0a 00       		.byte	0
 4099 0a0b 00       		.byte	0
 4100 0a0c 22       		.uleb128 0x22
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 92


 4101 0a0d 34010000 		.4byte	.LASF138
 4102 0a11 0A       		.byte	0xa
 4103 0a12 1207     		.2byte	0x712
 4104 0a14 180A0000 		.4byte	0xa18
 4105 0a18 0F       		.uleb128 0xf
 4106 0a19 97000000 		.4byte	0x97
 4107 0a1d 23       		.uleb128 0x23
 4108 0a1e 28000000 		.4byte	.LASF139
 4109 0a22 07       		.byte	0x7
 4110 0a23 11       		.byte	0x11
 4111 0a24 87030000 		.4byte	0x387
 4112 0a28 05       		.uleb128 0x5
 4113 0a29 03       		.byte	0x3
 4114 0a2a 00000000 		.4byte	buffer_overflow
 4115 0a2e 23       		.uleb128 0x23
 4116 0a2f 87040000 		.4byte	.LASF140
 4117 0a33 07       		.byte	0x7
 4118 0a34 22       		.byte	0x22
 4119 0a35 B9000000 		.4byte	0xb9
 4120 0a39 05       		.uleb128 0x5
 4121 0a3a 03       		.byte	0x3
 4122 0a3b 00000000 		.4byte	dataPointsInStack
 4123 0a3f 23       		.uleb128 0x23
 4124 0a40 D4070000 		.4byte	.LASF141
 4125 0a44 07       		.byte	0x7
 4126 0a45 23       		.byte	0x23
 4127 0a46 B9000000 		.4byte	0xb9
 4128 0a4a 05       		.uleb128 0x5
 4129 0a4b 03       		.byte	0x3
 4130 0a4c 00000000 		.4byte	dataPointsInStackDesired
 4131 0a50 08       		.uleb128 0x8
 4132 0a51 3B020000 		.4byte	0x23b
 4133 0a55 600A0000 		.4byte	0xa60
 4134 0a59 09       		.uleb128 0x9
 4135 0a5a 05010000 		.4byte	0x105
 4136 0a5e 95       		.byte	0x95
 4137 0a5f 00       		.byte	0
 4138 0a60 23       		.uleb128 0x23
 4139 0a61 85030000 		.4byte	.LASF142
 4140 0a65 07       		.byte	0x7
 4141 0a66 24       		.byte	0x24
 4142 0a67 500A0000 		.4byte	0xa50
 4143 0a6b 05       		.uleb128 0x5
 4144 0a6c 03       		.byte	0x3
 4145 0a6d 00000000 		.4byte	data
 4146 0a71 23       		.uleb128 0x23
 4147 0a72 16010000 		.4byte	.LASF143
 4148 0a76 08       		.byte	0x8
 4149 0a77 1F       		.byte	0x1f
 4150 0a78 AD000000 		.4byte	0xad
 4151 0a7c 05       		.uleb128 0x5
 4152 0a7d 03       		.byte	0x3
 4153 0a7e 00000000 		.4byte	modem_state
 4154 0a82 23       		.uleb128 0x23
 4155 0a83 2A070000 		.4byte	.LASF144
 4156 0a87 08       		.byte	0x8
 4157 0a88 62       		.byte	0x62
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 93


 4158 0a89 DD000000 		.4byte	0xdd
 4159 0a8d 05       		.uleb128 0x5
 4160 0a8e 03       		.byte	0x3
 4161 0a8f 00000000 		.4byte	modem_start_time_stamp
 4162 0a93 23       		.uleb128 0x23
 4163 0a94 A1030000 		.4byte	.LASF71
 4164 0a98 08       		.byte	0x8
 4165 0a99 63       		.byte	0x63
 4166 0a9a 73020000 		.4byte	0x273
 4167 0a9e 05       		.uleb128 0x5
 4168 0a9f 03       		.byte	0x3
 4169 0aa0 00000000 		.4byte	modem_info
 4170 0aa4 23       		.uleb128 0x23
 4171 0aa5 41010000 		.4byte	.LASF145
 4172 0aa9 08       		.byte	0x8
 4173 0aaa 64       		.byte	0x64
 4174 0aab E7020000 		.4byte	0x2e7
 4175 0aaf 05       		.uleb128 0x5
 4176 0ab0 03       		.byte	0x3
 4177 0ab1 00000000 		.4byte	modem_stats
 4178 0ab5 23       		.uleb128 0x23
 4179 0ab6 50050000 		.4byte	.LASF146
 4180 0aba 08       		.byte	0x8
 4181 0abb 65       		.byte	0x65
 4182 0abc 8E030000 		.4byte	0x38e
 4183 0ac0 05       		.uleb128 0x5
 4184 0ac1 03       		.byte	0x3
 4185 0ac2 00000000 		.4byte	updatable_parameters
 4186 0ac6 08       		.uleb128 0x8
 4187 0ac7 F7000000 		.4byte	0xf7
 4188 0acb D70A0000 		.4byte	0xad7
 4189 0acf 24       		.uleb128 0x24
 4190 0ad0 05010000 		.4byte	0x105
 4191 0ad4 0F27     		.2byte	0x270f
 4192 0ad6 00       		.byte	0
 4193 0ad7 23       		.uleb128 0x23
 4194 0ad8 50080000 		.4byte	.LASF147
 4195 0adc 09       		.byte	0x9
 4196 0add 18       		.byte	0x18
 4197 0ade C60A0000 		.4byte	0xac6
 4198 0ae2 05       		.uleb128 0x5
 4199 0ae3 03       		.byte	0x3
 4200 0ae4 00000000 		.4byte	http_request
 4201 0ae8 23       		.uleb128 0x23
 4202 0ae9 AC010000 		.4byte	.LASF148
 4203 0aed 09       		.byte	0x9
 4204 0aee 19       		.byte	0x19
 4205 0aef C60A0000 		.4byte	0xac6
 4206 0af3 05       		.uleb128 0x5
 4207 0af4 03       		.byte	0x3
 4208 0af5 00000000 		.4byte	http_body
 4209 0af9 08       		.uleb128 0x8
 4210 0afa F7000000 		.4byte	0xf7
 4211 0afe 090B0000 		.4byte	0xb09
 4212 0b02 09       		.uleb128 0x9
 4213 0b03 05010000 		.4byte	0x105
 4214 0b07 C7       		.byte	0xc7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 94


 4215 0b08 00       		.byte	0
 4216 0b09 23       		.uleb128 0x23
 4217 0b0a D4060000 		.4byte	.LASF149
 4218 0b0e 09       		.byte	0x9
 4219 0b0f 1A       		.byte	0x1a
 4220 0b10 F90A0000 		.4byte	0xaf9
 4221 0b14 05       		.uleb128 0x5
 4222 0b15 03       		.byte	0x3
 4223 0b16 00000000 		.4byte	http_route
 4224 0b1a 23       		.uleb128 0x23
 4225 0b1b 38060000 		.4byte	.LASF150
 4226 0b1f 09       		.byte	0x9
 4227 0b20 41       		.byte	0x41
 4228 0b21 09040000 		.4byte	0x409
 4229 0b25 05       		.uleb128 0x5
 4230 0b26 03       		.byte	0x3
 4231 0b27 00000000 		.4byte	system_info
 4232 0b2b 23       		.uleb128 0x23
 4233 0b2c E1050000 		.4byte	.LASF151
 4234 0b30 09       		.byte	0x9
 4235 0b31 53       		.byte	0x53
 4236 0b32 45040000 		.4byte	0x445
 4237 0b36 05       		.uleb128 0x5
 4238 0b37 03       		.byte	0x3
 4239 0b38 00000000 		.4byte	system_settings
 4240 0b3c 23       		.uleb128 0x23
 4241 0b3d 27010000 		.4byte	.LASF152
 4242 0b41 09       		.byte	0x9
 4243 0b42 6F       		.byte	0x6f
 4244 0b43 D2030000 		.4byte	0x3d2
 4245 0b47 05       		.uleb128 0x5
 4246 0b48 03       		.byte	0x3
 4247 0b49 00000000 		.4byte	alarmMeasure
 4248 0b4d 23       		.uleb128 0x23
 4249 0b4e 7B010000 		.4byte	.LASF153
 4250 0b52 09       		.byte	0x9
 4251 0b53 70       		.byte	0x70
 4252 0b54 AD000000 		.4byte	0xad
 4253 0b58 05       		.uleb128 0x5
 4254 0b59 03       		.byte	0x3
 4255 0b5a 00000000 		.4byte	timeToMeasure
 4256 0b5e 23       		.uleb128 0x23
 4257 0b5f 02030000 		.4byte	.LASF154
 4258 0b63 09       		.byte	0x9
 4259 0b64 71       		.byte	0x71
 4260 0b65 D2030000 		.4byte	0x3d2
 4261 0b69 05       		.uleb128 0x5
 4262 0b6a 03       		.byte	0x3
 4263 0b6b 00000000 		.4byte	alarmSync
 4264 0b6f 23       		.uleb128 0x23
 4265 0b70 A1010000 		.4byte	.LASF155
 4266 0b74 09       		.byte	0x9
 4267 0b75 72       		.byte	0x72
 4268 0b76 AD000000 		.4byte	0xad
 4269 0b7a 05       		.uleb128 0x5
 4270 0b7b 03       		.byte	0x3
 4271 0b7c 00000000 		.4byte	timeToSync
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 95


 4272 0b80 23       		.uleb128 0x23
 4273 0b81 F4040000 		.4byte	.LASF156
 4274 0b85 09       		.byte	0x9
 4275 0b86 73       		.byte	0x73
 4276 0b87 AD000000 		.4byte	0xad
 4277 0b8b 05       		.uleb128 0x5
 4278 0b8c 03       		.byte	0x3
 4279 0b8d 00000000 		.4byte	timeToSycnRemoteParams
 4280 0b91 25       		.uleb128 0x25
 4281 0b92 68657900 		.ascii	"hey\000"
 4282 0b96 09       		.byte	0x9
 4283 0b97 74       		.byte	0x74
 4284 0b98 AD000000 		.4byte	0xad
 4285 0b9c 05       		.uleb128 0x5
 4286 0b9d 03       		.byte	0x3
 4287 0b9e 00000000 		.4byte	hey
 4288 0ba2 08       		.uleb128 0x8
 4289 0ba3 F7000000 		.4byte	0xf7
 4290 0ba7 B30B0000 		.4byte	0xbb3
 4291 0bab 24       		.uleb128 0x24
 4292 0bac 05010000 		.4byte	0x105
 4293 0bb0 FF03     		.2byte	0x3ff
 4294 0bb2 00       		.byte	0
 4295 0bb3 23       		.uleb128 0x23
 4296 0bb4 CC040000 		.4byte	.LASF157
 4297 0bb8 01       		.byte	0x1
 4298 0bb9 05       		.byte	0x5
 4299 0bba A20B0000 		.4byte	0xba2
 4300 0bbe 05       		.uleb128 0x5
 4301 0bbf 03       		.byte	0x3
 4302 0bc0 00000000 		.4byte	uart_received_string
 4303 0bc4 23       		.uleb128 0x23
 4304 0bc5 F2060000 		.4byte	.LASF158
 4305 0bc9 01       		.byte	0x1
 4306 0bca 06       		.byte	0x6
 4307 0bcb D1000000 		.4byte	0xd1
 4308 0bcf 05       		.uleb128 0x5
 4309 0bd0 03       		.byte	0x3
 4310 0bd1 00000000 		.4byte	uart_string_index
 4311 0bd5 00       		.byte	0
 4312              		.section	.debug_abbrev,"",%progbits
 4313              	.Ldebug_abbrev0:
 4314 0000 01       		.uleb128 0x1
 4315 0001 11       		.uleb128 0x11
 4316 0002 01       		.byte	0x1
 4317 0003 25       		.uleb128 0x25
 4318 0004 0E       		.uleb128 0xe
 4319 0005 13       		.uleb128 0x13
 4320 0006 0B       		.uleb128 0xb
 4321 0007 03       		.uleb128 0x3
 4322 0008 0E       		.uleb128 0xe
 4323 0009 1B       		.uleb128 0x1b
 4324 000a 0E       		.uleb128 0xe
 4325 000b 55       		.uleb128 0x55
 4326 000c 17       		.uleb128 0x17
 4327 000d 11       		.uleb128 0x11
 4328 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 96


 4329 000f 10       		.uleb128 0x10
 4330 0010 17       		.uleb128 0x17
 4331 0011 00       		.byte	0
 4332 0012 00       		.byte	0
 4333 0013 02       		.uleb128 0x2
 4334 0014 24       		.uleb128 0x24
 4335 0015 00       		.byte	0
 4336 0016 0B       		.uleb128 0xb
 4337 0017 0B       		.uleb128 0xb
 4338 0018 3E       		.uleb128 0x3e
 4339 0019 0B       		.uleb128 0xb
 4340 001a 03       		.uleb128 0x3
 4341 001b 0E       		.uleb128 0xe
 4342 001c 00       		.byte	0
 4343 001d 00       		.byte	0
 4344 001e 03       		.uleb128 0x3
 4345 001f 16       		.uleb128 0x16
 4346 0020 00       		.byte	0
 4347 0021 03       		.uleb128 0x3
 4348 0022 0E       		.uleb128 0xe
 4349 0023 3A       		.uleb128 0x3a
 4350 0024 0B       		.uleb128 0xb
 4351 0025 3B       		.uleb128 0x3b
 4352 0026 0B       		.uleb128 0xb
 4353 0027 49       		.uleb128 0x49
 4354 0028 13       		.uleb128 0x13
 4355 0029 00       		.byte	0
 4356 002a 00       		.byte	0
 4357 002b 04       		.uleb128 0x4
 4358 002c 24       		.uleb128 0x24
 4359 002d 00       		.byte	0
 4360 002e 0B       		.uleb128 0xb
 4361 002f 0B       		.uleb128 0xb
 4362 0030 3E       		.uleb128 0x3e
 4363 0031 0B       		.uleb128 0xb
 4364 0032 03       		.uleb128 0x3
 4365 0033 08       		.uleb128 0x8
 4366 0034 00       		.byte	0
 4367 0035 00       		.byte	0
 4368 0036 05       		.uleb128 0x5
 4369 0037 16       		.uleb128 0x16
 4370 0038 00       		.byte	0
 4371 0039 03       		.uleb128 0x3
 4372 003a 0E       		.uleb128 0xe
 4373 003b 3A       		.uleb128 0x3a
 4374 003c 0B       		.uleb128 0xb
 4375 003d 3B       		.uleb128 0x3b
 4376 003e 05       		.uleb128 0x5
 4377 003f 49       		.uleb128 0x49
 4378 0040 13       		.uleb128 0x13
 4379 0041 00       		.byte	0
 4380 0042 00       		.byte	0
 4381 0043 06       		.uleb128 0x6
 4382 0044 0F       		.uleb128 0xf
 4383 0045 00       		.byte	0
 4384 0046 0B       		.uleb128 0xb
 4385 0047 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 97


 4386 0048 49       		.uleb128 0x49
 4387 0049 13       		.uleb128 0x13
 4388 004a 00       		.byte	0
 4389 004b 00       		.byte	0
 4390 004c 07       		.uleb128 0x7
 4391 004d 26       		.uleb128 0x26
 4392 004e 00       		.byte	0
 4393 004f 49       		.uleb128 0x49
 4394 0050 13       		.uleb128 0x13
 4395 0051 00       		.byte	0
 4396 0052 00       		.byte	0
 4397 0053 08       		.uleb128 0x8
 4398 0054 01       		.uleb128 0x1
 4399 0055 01       		.byte	0x1
 4400 0056 49       		.uleb128 0x49
 4401 0057 13       		.uleb128 0x13
 4402 0058 01       		.uleb128 0x1
 4403 0059 13       		.uleb128 0x13
 4404 005a 00       		.byte	0
 4405 005b 00       		.byte	0
 4406 005c 09       		.uleb128 0x9
 4407 005d 21       		.uleb128 0x21
 4408 005e 00       		.byte	0
 4409 005f 49       		.uleb128 0x49
 4410 0060 13       		.uleb128 0x13
 4411 0061 2F       		.uleb128 0x2f
 4412 0062 0B       		.uleb128 0xb
 4413 0063 00       		.byte	0
 4414 0064 00       		.byte	0
 4415 0065 0A       		.uleb128 0xa
 4416 0066 13       		.uleb128 0x13
 4417 0067 01       		.byte	0x1
 4418 0068 03       		.uleb128 0x3
 4419 0069 08       		.uleb128 0x8
 4420 006a 0B       		.uleb128 0xb
 4421 006b 0B       		.uleb128 0xb
 4422 006c 3A       		.uleb128 0x3a
 4423 006d 0B       		.uleb128 0xb
 4424 006e 3B       		.uleb128 0x3b
 4425 006f 0B       		.uleb128 0xb
 4426 0070 01       		.uleb128 0x1
 4427 0071 13       		.uleb128 0x13
 4428 0072 00       		.byte	0
 4429 0073 00       		.byte	0
 4430 0074 0B       		.uleb128 0xb
 4431 0075 0D       		.uleb128 0xd
 4432 0076 00       		.byte	0
 4433 0077 03       		.uleb128 0x3
 4434 0078 0E       		.uleb128 0xe
 4435 0079 3A       		.uleb128 0x3a
 4436 007a 0B       		.uleb128 0xb
 4437 007b 3B       		.uleb128 0x3b
 4438 007c 0B       		.uleb128 0xb
 4439 007d 49       		.uleb128 0x49
 4440 007e 13       		.uleb128 0x13
 4441 007f 38       		.uleb128 0x38
 4442 0080 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 98


 4443 0081 00       		.byte	0
 4444 0082 00       		.byte	0
 4445 0083 0C       		.uleb128 0xc
 4446 0084 13       		.uleb128 0x13
 4447 0085 01       		.byte	0x1
 4448 0086 0B       		.uleb128 0xb
 4449 0087 05       		.uleb128 0x5
 4450 0088 3A       		.uleb128 0x3a
 4451 0089 0B       		.uleb128 0xb
 4452 008a 3B       		.uleb128 0x3b
 4453 008b 0B       		.uleb128 0xb
 4454 008c 01       		.uleb128 0x1
 4455 008d 13       		.uleb128 0x13
 4456 008e 00       		.byte	0
 4457 008f 00       		.byte	0
 4458 0090 0D       		.uleb128 0xd
 4459 0091 13       		.uleb128 0x13
 4460 0092 01       		.byte	0x1
 4461 0093 0B       		.uleb128 0xb
 4462 0094 0B       		.uleb128 0xb
 4463 0095 3A       		.uleb128 0x3a
 4464 0096 0B       		.uleb128 0xb
 4465 0097 3B       		.uleb128 0x3b
 4466 0098 0B       		.uleb128 0xb
 4467 0099 01       		.uleb128 0x1
 4468 009a 13       		.uleb128 0x13
 4469 009b 00       		.byte	0
 4470 009c 00       		.byte	0
 4471 009d 0E       		.uleb128 0xe
 4472 009e 0D       		.uleb128 0xd
 4473 009f 00       		.byte	0
 4474 00a0 03       		.uleb128 0x3
 4475 00a1 08       		.uleb128 0x8
 4476 00a2 3A       		.uleb128 0x3a
 4477 00a3 0B       		.uleb128 0xb
 4478 00a4 3B       		.uleb128 0x3b
 4479 00a5 0B       		.uleb128 0xb
 4480 00a6 49       		.uleb128 0x49
 4481 00a7 13       		.uleb128 0x13
 4482 00a8 38       		.uleb128 0x38
 4483 00a9 0B       		.uleb128 0xb
 4484 00aa 00       		.byte	0
 4485 00ab 00       		.byte	0
 4486 00ac 0F       		.uleb128 0xf
 4487 00ad 35       		.uleb128 0x35
 4488 00ae 00       		.byte	0
 4489 00af 49       		.uleb128 0x49
 4490 00b0 13       		.uleb128 0x13
 4491 00b1 00       		.byte	0
 4492 00b2 00       		.byte	0
 4493 00b3 10       		.uleb128 0x10
 4494 00b4 2E       		.uleb128 0x2e
 4495 00b5 00       		.byte	0
 4496 00b6 3F       		.uleb128 0x3f
 4497 00b7 19       		.uleb128 0x19
 4498 00b8 03       		.uleb128 0x3
 4499 00b9 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 99


 4500 00ba 3A       		.uleb128 0x3a
 4501 00bb 0B       		.uleb128 0xb
 4502 00bc 3B       		.uleb128 0x3b
 4503 00bd 0B       		.uleb128 0xb
 4504 00be 27       		.uleb128 0x27
 4505 00bf 19       		.uleb128 0x19
 4506 00c0 11       		.uleb128 0x11
 4507 00c1 01       		.uleb128 0x1
 4508 00c2 12       		.uleb128 0x12
 4509 00c3 06       		.uleb128 0x6
 4510 00c4 40       		.uleb128 0x40
 4511 00c5 18       		.uleb128 0x18
 4512 00c6 9642     		.uleb128 0x2116
 4513 00c8 19       		.uleb128 0x19
 4514 00c9 00       		.byte	0
 4515 00ca 00       		.byte	0
 4516 00cb 11       		.uleb128 0x11
 4517 00cc 2E       		.uleb128 0x2e
 4518 00cd 00       		.byte	0
 4519 00ce 3F       		.uleb128 0x3f
 4520 00cf 19       		.uleb128 0x19
 4521 00d0 03       		.uleb128 0x3
 4522 00d1 0E       		.uleb128 0xe
 4523 00d2 3A       		.uleb128 0x3a
 4524 00d3 0B       		.uleb128 0xb
 4525 00d4 3B       		.uleb128 0x3b
 4526 00d5 0B       		.uleb128 0xb
 4527 00d6 11       		.uleb128 0x11
 4528 00d7 01       		.uleb128 0x1
 4529 00d8 12       		.uleb128 0x12
 4530 00d9 06       		.uleb128 0x6
 4531 00da 40       		.uleb128 0x40
 4532 00db 18       		.uleb128 0x18
 4533 00dc 9642     		.uleb128 0x2116
 4534 00de 19       		.uleb128 0x19
 4535 00df 00       		.byte	0
 4536 00e0 00       		.byte	0
 4537 00e1 12       		.uleb128 0x12
 4538 00e2 2E       		.uleb128 0x2e
 4539 00e3 01       		.byte	0x1
 4540 00e4 3F       		.uleb128 0x3f
 4541 00e5 19       		.uleb128 0x19
 4542 00e6 03       		.uleb128 0x3
 4543 00e7 0E       		.uleb128 0xe
 4544 00e8 3A       		.uleb128 0x3a
 4545 00e9 0B       		.uleb128 0xb
 4546 00ea 3B       		.uleb128 0x3b
 4547 00eb 0B       		.uleb128 0xb
 4548 00ec 49       		.uleb128 0x49
 4549 00ed 13       		.uleb128 0x13
 4550 00ee 11       		.uleb128 0x11
 4551 00ef 01       		.uleb128 0x1
 4552 00f0 12       		.uleb128 0x12
 4553 00f1 06       		.uleb128 0x6
 4554 00f2 40       		.uleb128 0x40
 4555 00f3 18       		.uleb128 0x18
 4556 00f4 9642     		.uleb128 0x2116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 100


 4557 00f6 19       		.uleb128 0x19
 4558 00f7 01       		.uleb128 0x1
 4559 00f8 13       		.uleb128 0x13
 4560 00f9 00       		.byte	0
 4561 00fa 00       		.byte	0
 4562 00fb 13       		.uleb128 0x13
 4563 00fc 34       		.uleb128 0x34
 4564 00fd 00       		.byte	0
 4565 00fe 03       		.uleb128 0x3
 4566 00ff 0E       		.uleb128 0xe
 4567 0100 3A       		.uleb128 0x3a
 4568 0101 0B       		.uleb128 0xb
 4569 0102 3B       		.uleb128 0x3b
 4570 0103 0B       		.uleb128 0xb
 4571 0104 49       		.uleb128 0x49
 4572 0105 13       		.uleb128 0x13
 4573 0106 02       		.uleb128 0x2
 4574 0107 18       		.uleb128 0x18
 4575 0108 00       		.byte	0
 4576 0109 00       		.byte	0
 4577 010a 14       		.uleb128 0x14
 4578 010b 0B       		.uleb128 0xb
 4579 010c 01       		.byte	0x1
 4580 010d 11       		.uleb128 0x11
 4581 010e 01       		.uleb128 0x1
 4582 010f 12       		.uleb128 0x12
 4583 0110 06       		.uleb128 0x6
 4584 0111 00       		.byte	0
 4585 0112 00       		.byte	0
 4586 0113 15       		.uleb128 0x15
 4587 0114 2E       		.uleb128 0x2e
 4588 0115 01       		.byte	0x1
 4589 0116 3F       		.uleb128 0x3f
 4590 0117 19       		.uleb128 0x19
 4591 0118 03       		.uleb128 0x3
 4592 0119 0E       		.uleb128 0xe
 4593 011a 3A       		.uleb128 0x3a
 4594 011b 0B       		.uleb128 0xb
 4595 011c 3B       		.uleb128 0x3b
 4596 011d 0B       		.uleb128 0xb
 4597 011e 27       		.uleb128 0x27
 4598 011f 19       		.uleb128 0x19
 4599 0120 49       		.uleb128 0x49
 4600 0121 13       		.uleb128 0x13
 4601 0122 11       		.uleb128 0x11
 4602 0123 01       		.uleb128 0x1
 4603 0124 12       		.uleb128 0x12
 4604 0125 06       		.uleb128 0x6
 4605 0126 40       		.uleb128 0x40
 4606 0127 18       		.uleb128 0x18
 4607 0128 9642     		.uleb128 0x2116
 4608 012a 19       		.uleb128 0x19
 4609 012b 01       		.uleb128 0x1
 4610 012c 13       		.uleb128 0x13
 4611 012d 00       		.byte	0
 4612 012e 00       		.byte	0
 4613 012f 16       		.uleb128 0x16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 101


 4614 0130 05       		.uleb128 0x5
 4615 0131 00       		.byte	0
 4616 0132 03       		.uleb128 0x3
 4617 0133 0E       		.uleb128 0xe
 4618 0134 3A       		.uleb128 0x3a
 4619 0135 0B       		.uleb128 0xb
 4620 0136 3B       		.uleb128 0x3b
 4621 0137 0B       		.uleb128 0xb
 4622 0138 49       		.uleb128 0x49
 4623 0139 13       		.uleb128 0x13
 4624 013a 02       		.uleb128 0x2
 4625 013b 18       		.uleb128 0x18
 4626 013c 00       		.byte	0
 4627 013d 00       		.byte	0
 4628 013e 17       		.uleb128 0x17
 4629 013f 34       		.uleb128 0x34
 4630 0140 00       		.byte	0
 4631 0141 03       		.uleb128 0x3
 4632 0142 08       		.uleb128 0x8
 4633 0143 3A       		.uleb128 0x3a
 4634 0144 0B       		.uleb128 0xb
 4635 0145 3B       		.uleb128 0x3b
 4636 0146 0B       		.uleb128 0xb
 4637 0147 49       		.uleb128 0x49
 4638 0148 13       		.uleb128 0x13
 4639 0149 02       		.uleb128 0x2
 4640 014a 18       		.uleb128 0x18
 4641 014b 00       		.byte	0
 4642 014c 00       		.byte	0
 4643 014d 18       		.uleb128 0x18
 4644 014e 2E       		.uleb128 0x2e
 4645 014f 01       		.byte	0x1
 4646 0150 3F       		.uleb128 0x3f
 4647 0151 19       		.uleb128 0x19
 4648 0152 03       		.uleb128 0x3
 4649 0153 0E       		.uleb128 0xe
 4650 0154 3A       		.uleb128 0x3a
 4651 0155 0B       		.uleb128 0xb
 4652 0156 3B       		.uleb128 0x3b
 4653 0157 05       		.uleb128 0x5
 4654 0158 27       		.uleb128 0x27
 4655 0159 19       		.uleb128 0x19
 4656 015a 49       		.uleb128 0x49
 4657 015b 13       		.uleb128 0x13
 4658 015c 11       		.uleb128 0x11
 4659 015d 01       		.uleb128 0x1
 4660 015e 12       		.uleb128 0x12
 4661 015f 06       		.uleb128 0x6
 4662 0160 40       		.uleb128 0x40
 4663 0161 18       		.uleb128 0x18
 4664 0162 9642     		.uleb128 0x2116
 4665 0164 19       		.uleb128 0x19
 4666 0165 01       		.uleb128 0x1
 4667 0166 13       		.uleb128 0x13
 4668 0167 00       		.byte	0
 4669 0168 00       		.byte	0
 4670 0169 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 102


 4671 016a 05       		.uleb128 0x5
 4672 016b 00       		.byte	0
 4673 016c 03       		.uleb128 0x3
 4674 016d 0E       		.uleb128 0xe
 4675 016e 3A       		.uleb128 0x3a
 4676 016f 0B       		.uleb128 0xb
 4677 0170 3B       		.uleb128 0x3b
 4678 0171 05       		.uleb128 0x5
 4679 0172 49       		.uleb128 0x49
 4680 0173 13       		.uleb128 0x13
 4681 0174 02       		.uleb128 0x2
 4682 0175 18       		.uleb128 0x18
 4683 0176 00       		.byte	0
 4684 0177 00       		.byte	0
 4685 0178 1A       		.uleb128 0x1a
 4686 0179 34       		.uleb128 0x34
 4687 017a 00       		.byte	0
 4688 017b 03       		.uleb128 0x3
 4689 017c 08       		.uleb128 0x8
 4690 017d 3A       		.uleb128 0x3a
 4691 017e 0B       		.uleb128 0xb
 4692 017f 3B       		.uleb128 0x3b
 4693 0180 05       		.uleb128 0x5
 4694 0181 49       		.uleb128 0x49
 4695 0182 13       		.uleb128 0x13
 4696 0183 02       		.uleb128 0x2
 4697 0184 18       		.uleb128 0x18
 4698 0185 00       		.byte	0
 4699 0186 00       		.byte	0
 4700 0187 1B       		.uleb128 0x1b
 4701 0188 2E       		.uleb128 0x2e
 4702 0189 01       		.byte	0x1
 4703 018a 3F       		.uleb128 0x3f
 4704 018b 19       		.uleb128 0x19
 4705 018c 03       		.uleb128 0x3
 4706 018d 0E       		.uleb128 0xe
 4707 018e 3A       		.uleb128 0x3a
 4708 018f 0B       		.uleb128 0xb
 4709 0190 3B       		.uleb128 0x3b
 4710 0191 05       		.uleb128 0x5
 4711 0192 49       		.uleb128 0x49
 4712 0193 13       		.uleb128 0x13
 4713 0194 11       		.uleb128 0x11
 4714 0195 01       		.uleb128 0x1
 4715 0196 12       		.uleb128 0x12
 4716 0197 06       		.uleb128 0x6
 4717 0198 40       		.uleb128 0x40
 4718 0199 18       		.uleb128 0x18
 4719 019a 9642     		.uleb128 0x2116
 4720 019c 19       		.uleb128 0x19
 4721 019d 01       		.uleb128 0x1
 4722 019e 13       		.uleb128 0x13
 4723 019f 00       		.byte	0
 4724 01a0 00       		.byte	0
 4725 01a1 1C       		.uleb128 0x1c
 4726 01a2 34       		.uleb128 0x34
 4727 01a3 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 103


 4728 01a4 03       		.uleb128 0x3
 4729 01a5 0E       		.uleb128 0xe
 4730 01a6 3A       		.uleb128 0x3a
 4731 01a7 0B       		.uleb128 0xb
 4732 01a8 3B       		.uleb128 0x3b
 4733 01a9 05       		.uleb128 0x5
 4734 01aa 49       		.uleb128 0x49
 4735 01ab 13       		.uleb128 0x13
 4736 01ac 02       		.uleb128 0x2
 4737 01ad 18       		.uleb128 0x18
 4738 01ae 00       		.byte	0
 4739 01af 00       		.byte	0
 4740 01b0 1D       		.uleb128 0x1d
 4741 01b1 2E       		.uleb128 0x2e
 4742 01b2 00       		.byte	0
 4743 01b3 3F       		.uleb128 0x3f
 4744 01b4 19       		.uleb128 0x19
 4745 01b5 03       		.uleb128 0x3
 4746 01b6 0E       		.uleb128 0xe
 4747 01b7 3A       		.uleb128 0x3a
 4748 01b8 0B       		.uleb128 0xb
 4749 01b9 3B       		.uleb128 0x3b
 4750 01ba 05       		.uleb128 0x5
 4751 01bb 11       		.uleb128 0x11
 4752 01bc 01       		.uleb128 0x1
 4753 01bd 12       		.uleb128 0x12
 4754 01be 06       		.uleb128 0x6
 4755 01bf 40       		.uleb128 0x40
 4756 01c0 18       		.uleb128 0x18
 4757 01c1 9642     		.uleb128 0x2116
 4758 01c3 19       		.uleb128 0x19
 4759 01c4 00       		.byte	0
 4760 01c5 00       		.byte	0
 4761 01c6 1E       		.uleb128 0x1e
 4762 01c7 2E       		.uleb128 0x2e
 4763 01c8 00       		.byte	0
 4764 01c9 3F       		.uleb128 0x3f
 4765 01ca 19       		.uleb128 0x19
 4766 01cb 03       		.uleb128 0x3
 4767 01cc 0E       		.uleb128 0xe
 4768 01cd 3A       		.uleb128 0x3a
 4769 01ce 0B       		.uleb128 0xb
 4770 01cf 3B       		.uleb128 0x3b
 4771 01d0 05       		.uleb128 0x5
 4772 01d1 49       		.uleb128 0x49
 4773 01d2 13       		.uleb128 0x13
 4774 01d3 11       		.uleb128 0x11
 4775 01d4 01       		.uleb128 0x1
 4776 01d5 12       		.uleb128 0x12
 4777 01d6 06       		.uleb128 0x6
 4778 01d7 40       		.uleb128 0x40
 4779 01d8 18       		.uleb128 0x18
 4780 01d9 9642     		.uleb128 0x2116
 4781 01db 19       		.uleb128 0x19
 4782 01dc 00       		.byte	0
 4783 01dd 00       		.byte	0
 4784 01de 1F       		.uleb128 0x1f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 104


 4785 01df 2E       		.uleb128 0x2e
 4786 01e0 01       		.byte	0x1
 4787 01e1 3F       		.uleb128 0x3f
 4788 01e2 19       		.uleb128 0x19
 4789 01e3 03       		.uleb128 0x3
 4790 01e4 0E       		.uleb128 0xe
 4791 01e5 3A       		.uleb128 0x3a
 4792 01e6 0B       		.uleb128 0xb
 4793 01e7 3B       		.uleb128 0x3b
 4794 01e8 05       		.uleb128 0x5
 4795 01e9 11       		.uleb128 0x11
 4796 01ea 01       		.uleb128 0x1
 4797 01eb 12       		.uleb128 0x12
 4798 01ec 06       		.uleb128 0x6
 4799 01ed 40       		.uleb128 0x40
 4800 01ee 18       		.uleb128 0x18
 4801 01ef 9642     		.uleb128 0x2116
 4802 01f1 19       		.uleb128 0x19
 4803 01f2 01       		.uleb128 0x1
 4804 01f3 13       		.uleb128 0x13
 4805 01f4 00       		.byte	0
 4806 01f5 00       		.byte	0
 4807 01f6 20       		.uleb128 0x20
 4808 01f7 2E       		.uleb128 0x2e
 4809 01f8 00       		.byte	0
 4810 01f9 3F       		.uleb128 0x3f
 4811 01fa 19       		.uleb128 0x19
 4812 01fb 03       		.uleb128 0x3
 4813 01fc 0E       		.uleb128 0xe
 4814 01fd 3A       		.uleb128 0x3a
 4815 01fe 0B       		.uleb128 0xb
 4816 01ff 3B       		.uleb128 0x3b
 4817 0200 05       		.uleb128 0x5
 4818 0201 11       		.uleb128 0x11
 4819 0202 01       		.uleb128 0x1
 4820 0203 12       		.uleb128 0x12
 4821 0204 06       		.uleb128 0x6
 4822 0205 40       		.uleb128 0x40
 4823 0206 18       		.uleb128 0x18
 4824 0207 9742     		.uleb128 0x2117
 4825 0209 19       		.uleb128 0x19
 4826 020a 00       		.byte	0
 4827 020b 00       		.byte	0
 4828 020c 21       		.uleb128 0x21
 4829 020d 2E       		.uleb128 0x2e
 4830 020e 00       		.byte	0
 4831 020f 3F       		.uleb128 0x3f
 4832 0210 19       		.uleb128 0x19
 4833 0211 03       		.uleb128 0x3
 4834 0212 0E       		.uleb128 0xe
 4835 0213 3A       		.uleb128 0x3a
 4836 0214 0B       		.uleb128 0xb
 4837 0215 3B       		.uleb128 0x3b
 4838 0216 05       		.uleb128 0x5
 4839 0217 49       		.uleb128 0x49
 4840 0218 13       		.uleb128 0x13
 4841 0219 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 105


 4842 021a 01       		.uleb128 0x1
 4843 021b 12       		.uleb128 0x12
 4844 021c 06       		.uleb128 0x6
 4845 021d 40       		.uleb128 0x40
 4846 021e 18       		.uleb128 0x18
 4847 021f 9742     		.uleb128 0x2117
 4848 0221 19       		.uleb128 0x19
 4849 0222 00       		.byte	0
 4850 0223 00       		.byte	0
 4851 0224 22       		.uleb128 0x22
 4852 0225 34       		.uleb128 0x34
 4853 0226 00       		.byte	0
 4854 0227 03       		.uleb128 0x3
 4855 0228 0E       		.uleb128 0xe
 4856 0229 3A       		.uleb128 0x3a
 4857 022a 0B       		.uleb128 0xb
 4858 022b 3B       		.uleb128 0x3b
 4859 022c 05       		.uleb128 0x5
 4860 022d 49       		.uleb128 0x49
 4861 022e 13       		.uleb128 0x13
 4862 022f 3F       		.uleb128 0x3f
 4863 0230 19       		.uleb128 0x19
 4864 0231 3C       		.uleb128 0x3c
 4865 0232 19       		.uleb128 0x19
 4866 0233 00       		.byte	0
 4867 0234 00       		.byte	0
 4868 0235 23       		.uleb128 0x23
 4869 0236 34       		.uleb128 0x34
 4870 0237 00       		.byte	0
 4871 0238 03       		.uleb128 0x3
 4872 0239 0E       		.uleb128 0xe
 4873 023a 3A       		.uleb128 0x3a
 4874 023b 0B       		.uleb128 0xb
 4875 023c 3B       		.uleb128 0x3b
 4876 023d 0B       		.uleb128 0xb
 4877 023e 49       		.uleb128 0x49
 4878 023f 13       		.uleb128 0x13
 4879 0240 3F       		.uleb128 0x3f
 4880 0241 19       		.uleb128 0x19
 4881 0242 02       		.uleb128 0x2
 4882 0243 18       		.uleb128 0x18
 4883 0244 00       		.byte	0
 4884 0245 00       		.byte	0
 4885 0246 24       		.uleb128 0x24
 4886 0247 21       		.uleb128 0x21
 4887 0248 00       		.byte	0
 4888 0249 49       		.uleb128 0x49
 4889 024a 13       		.uleb128 0x13
 4890 024b 2F       		.uleb128 0x2f
 4891 024c 05       		.uleb128 0x5
 4892 024d 00       		.byte	0
 4893 024e 00       		.byte	0
 4894 024f 25       		.uleb128 0x25
 4895 0250 34       		.uleb128 0x34
 4896 0251 00       		.byte	0
 4897 0252 03       		.uleb128 0x3
 4898 0253 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 106


 4899 0254 3A       		.uleb128 0x3a
 4900 0255 0B       		.uleb128 0xb
 4901 0256 3B       		.uleb128 0x3b
 4902 0257 0B       		.uleb128 0xb
 4903 0258 49       		.uleb128 0x49
 4904 0259 13       		.uleb128 0x13
 4905 025a 3F       		.uleb128 0x3f
 4906 025b 19       		.uleb128 0x19
 4907 025c 02       		.uleb128 0x2
 4908 025d 18       		.uleb128 0x18
 4909 025e 00       		.byte	0
 4910 025f 00       		.byte	0
 4911 0260 00       		.byte	0
 4912              		.section	.debug_aranges,"",%progbits
 4913 0000 D4000000 		.4byte	0xd4
 4914 0004 0200     		.2byte	0x2
 4915 0006 00000000 		.4byte	.Ldebug_info0
 4916 000a 04       		.byte	0x4
 4917 000b 00       		.byte	0
 4918 000c 0000     		.2byte	0
 4919 000e 0000     		.2byte	0
 4920 0010 00000000 		.4byte	.LFB64
 4921 0014 44000000 		.4byte	.LFE64-.LFB64
 4922 0018 00000000 		.4byte	.LFB65
 4923 001c 6C000000 		.4byte	.LFE65-.LFB65
 4924 0020 00000000 		.4byte	.LFB66
 4925 0024 32000000 		.4byte	.LFE66-.LFB66
 4926 0028 00000000 		.4byte	.LFB67
 4927 002c 20000000 		.4byte	.LFE67-.LFB67
 4928 0030 00000000 		.4byte	.LFB68
 4929 0034 40000000 		.4byte	.LFE68-.LFB68
 4930 0038 00000000 		.4byte	.LFB69
 4931 003c DC000000 		.4byte	.LFE69-.LFB69
 4932 0040 00000000 		.4byte	.LFB70
 4933 0044 1C000000 		.4byte	.LFE70-.LFB70
 4934 0048 00000000 		.4byte	.LFB71
 4935 004c 28000000 		.4byte	.LFE71-.LFB71
 4936 0050 00000000 		.4byte	.LFB72
 4937 0054 B8000000 		.4byte	.LFE72-.LFB72
 4938 0058 00000000 		.4byte	.LFB73
 4939 005c 00010000 		.4byte	.LFE73-.LFB73
 4940 0060 00000000 		.4byte	.LFB74
 4941 0064 78000000 		.4byte	.LFE74-.LFB74
 4942 0068 00000000 		.4byte	.LFB75
 4943 006c 3C010000 		.4byte	.LFE75-.LFB75
 4944 0070 00000000 		.4byte	.LFB76
 4945 0074 B8000000 		.4byte	.LFE76-.LFB76
 4946 0078 00000000 		.4byte	.LFB77
 4947 007c 1C000000 		.4byte	.LFE77-.LFB77
 4948 0080 00000000 		.4byte	.LFB78
 4949 0084 28000000 		.4byte	.LFE78-.LFB78
 4950 0088 00000000 		.4byte	.LFB79
 4951 008c 84000000 		.4byte	.LFE79-.LFB79
 4952 0090 00000000 		.4byte	.LFB80
 4953 0094 30000000 		.4byte	.LFE80-.LFB80
 4954 0098 00000000 		.4byte	.LFB81
 4955 009c 0C020000 		.4byte	.LFE81-.LFB81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 107


 4956 00a0 00000000 		.4byte	.LFB82
 4957 00a4 68010000 		.4byte	.LFE82-.LFB82
 4958 00a8 00000000 		.4byte	.LFB83
 4959 00ac 44010000 		.4byte	.LFE83-.LFB83
 4960 00b0 00000000 		.4byte	.LFB84
 4961 00b4 14000000 		.4byte	.LFE84-.LFB84
 4962 00b8 00000000 		.4byte	.LFB85
 4963 00bc 1A000000 		.4byte	.LFE85-.LFB85
 4964 00c0 00000000 		.4byte	.LFB86
 4965 00c4 2A000000 		.4byte	.LFE86-.LFB86
 4966 00c8 00000000 		.4byte	.LFB87
 4967 00cc 7C020000 		.4byte	.LFE87-.LFB87
 4968 00d0 00000000 		.4byte	0
 4969 00d4 00000000 		.4byte	0
 4970              		.section	.debug_ranges,"",%progbits
 4971              	.Ldebug_ranges0:
 4972 0000 00000000 		.4byte	.LFB64
 4973 0004 44000000 		.4byte	.LFE64
 4974 0008 00000000 		.4byte	.LFB65
 4975 000c 6C000000 		.4byte	.LFE65
 4976 0010 00000000 		.4byte	.LFB66
 4977 0014 32000000 		.4byte	.LFE66
 4978 0018 00000000 		.4byte	.LFB67
 4979 001c 20000000 		.4byte	.LFE67
 4980 0020 00000000 		.4byte	.LFB68
 4981 0024 40000000 		.4byte	.LFE68
 4982 0028 00000000 		.4byte	.LFB69
 4983 002c DC000000 		.4byte	.LFE69
 4984 0030 00000000 		.4byte	.LFB70
 4985 0034 1C000000 		.4byte	.LFE70
 4986 0038 00000000 		.4byte	.LFB71
 4987 003c 28000000 		.4byte	.LFE71
 4988 0040 00000000 		.4byte	.LFB72
 4989 0044 B8000000 		.4byte	.LFE72
 4990 0048 00000000 		.4byte	.LFB73
 4991 004c 00010000 		.4byte	.LFE73
 4992 0050 00000000 		.4byte	.LFB74
 4993 0054 78000000 		.4byte	.LFE74
 4994 0058 00000000 		.4byte	.LFB75
 4995 005c 3C010000 		.4byte	.LFE75
 4996 0060 00000000 		.4byte	.LFB76
 4997 0064 B8000000 		.4byte	.LFE76
 4998 0068 00000000 		.4byte	.LFB77
 4999 006c 1C000000 		.4byte	.LFE77
 5000 0070 00000000 		.4byte	.LFB78
 5001 0074 28000000 		.4byte	.LFE78
 5002 0078 00000000 		.4byte	.LFB79
 5003 007c 84000000 		.4byte	.LFE79
 5004 0080 00000000 		.4byte	.LFB80
 5005 0084 30000000 		.4byte	.LFE80
 5006 0088 00000000 		.4byte	.LFB81
 5007 008c 0C020000 		.4byte	.LFE81
 5008 0090 00000000 		.4byte	.LFB82
 5009 0094 68010000 		.4byte	.LFE82
 5010 0098 00000000 		.4byte	.LFB83
 5011 009c 44010000 		.4byte	.LFE83
 5012 00a0 00000000 		.4byte	.LFB84
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 108


 5013 00a4 14000000 		.4byte	.LFE84
 5014 00a8 00000000 		.4byte	.LFB85
 5015 00ac 1A000000 		.4byte	.LFE85
 5016 00b0 00000000 		.4byte	.LFB86
 5017 00b4 2A000000 		.4byte	.LFE86
 5018 00b8 00000000 		.4byte	.LFB87
 5019 00bc 7C020000 		.4byte	.LFE87
 5020 00c0 00000000 		.4byte	0
 5021 00c4 00000000 		.4byte	0
 5022              		.section	.debug_line,"",%progbits
 5023              	.Ldebug_line0:
 5024 0000 4B050000 		.section	.debug_str,"MS",%progbits,1
 5024      0200EF01 
 5024      00000201 
 5024      FB0E0D00 
 5024      01010101 
 5025              	.LASF131:
 5026 0000 676D745F 		.ascii	"gmt_offset\000"
 5026      6F666673 
 5026      657400
 5027              	.LASF16:
 5028 000b 75696E74 		.ascii	"uint16\000"
 5028      313600
 5029              	.LASF38:
 5030 0012 76616C75 		.ascii	"value\000"
 5030      6500
 5031              	.LASF27:
 5032 0018 746D5F68 		.ascii	"tm_hour\000"
 5032      6F757200 
 5033              	.LASF32:
 5034 0020 746D5F79 		.ascii	"tm_yday\000"
 5034      64617900 
 5035              	.LASF139:
 5036 0028 62756666 		.ascii	"buffer_overflow\000"
 5036      65725F6F 
 5036      76657266 
 5036      6C6F7700 
 5037              	.LASF4:
 5038 0038 5F5F7569 		.ascii	"__uint8_t\000"
 5038      6E74385F 
 5038      7400
 5039              	.LASF69:
 5040 0042 636F756E 		.ascii	"countDownResetCondition\000"
 5040      74446F77 
 5040      6E526573 
 5040      6574436F 
 5040      6E646974 
 5041              	.LASF54:
 5042 005a 6C6F6E67 		.ascii	"longitude\000"
 5042      69747564 
 5042      6500
 5043              	.LASF159:
 5044 0064 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5044      43313120 
 5044      352E342E 
 5044      31203230 
 5044      31363036 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 109


 5045 0097 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5045      20726576 
 5045      6973696F 
 5045      6E203233 
 5045      37373135 
 5046 00ca 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5046      66756E63 
 5046      74696F6E 
 5046      2D736563 
 5046      74696F6E 
 5047              	.LASF134:
 5048 00f2 6D6F6465 		.ascii	"modem_wakeup\000"
 5048      6D5F7761 
 5048      6B657570 
 5048      00
 5049              	.LASF10:
 5050 00ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 5050      206C6F6E 
 5050      6720756E 
 5050      7369676E 
 5050      65642069 
 5051              	.LASF143:
 5052 0116 6D6F6465 		.ascii	"modem_state\000"
 5052      6D5F7374 
 5052      61746500 
 5053              	.LASF96:
 5054 0122 74657374 		.ascii	"test\000"
 5054      00
 5055              	.LASF152:
 5056 0127 616C6172 		.ascii	"alarmMeasure\000"
 5056      6D4D6561 
 5056      73757265 
 5056      00
 5057              	.LASF138:
 5058 0134 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5058      52784275 
 5058      66666572 
 5058      00
 5059              	.LASF145:
 5060 0141 6D6F6465 		.ascii	"modem_stats\000"
 5060      6D5F7374 
 5060      61747300 
 5061              	.LASF9:
 5062 014d 6C6F6E67 		.ascii	"long long int\000"
 5062      206C6F6E 
 5062      6720696E 
 5062      7400
 5063              	.LASF0:
 5064 015b 7369676E 		.ascii	"signed char\000"
 5064      65642063 
 5064      68617200 
 5065              	.LASF47:
 5066 0167 65636E6F 		.ascii	"ecno\000"
 5066      00
 5067              	.LASF66:
 5068 016c 636F756E 		.ascii	"countDownValue\000"
 5068      74446F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 110


 5068      6E56616C 
 5068      756500
 5069              	.LASF153:
 5070 017b 74696D65 		.ascii	"timeToMeasure\000"
 5070      546F4D65 
 5070      61737572 
 5070      6500
 5071              	.LASF50:
 5072 0189 74696D65 		.ascii	"time_to_network_connect\000"
 5072      5F746F5F 
 5072      6E657477 
 5072      6F726B5F 
 5072      636F6E6E 
 5073              	.LASF155:
 5074 01a1 74696D65 		.ascii	"timeToSync\000"
 5074      546F5379 
 5074      6E6300
 5075              	.LASF148:
 5076 01ac 68747470 		.ascii	"http_body\000"
 5076      5F626F64 
 5076      7900
 5077              	.LASF107:
 5078 01b6 7365745F 		.ascii	"set_up_internet_connection\000"
 5078      75705F69 
 5078      6E746572 
 5078      6E65745F 
 5078      636F6E6E 
 5079              	.LASF130:
 5080 01d1 7365636F 		.ascii	"second\000"
 5080      6E6400
 5081              	.LASF126:
 5082 01d8 79656172 		.ascii	"year\000"
 5082      00
 5083              	.LASF45:
 5084 01dd 72786C65 		.ascii	"rxlev\000"
 5084      7600
 5085              	.LASF6:
 5086 01e3 6C6F6E67 		.ascii	"long int\000"
 5086      20696E74 
 5086      00
 5087              	.LASF67:
 5088 01ec 63757272 		.ascii	"currentCountDownValue\000"
 5088      656E7443 
 5088      6F756E74 
 5088      446F776E 
 5088      56616C75 
 5089              	.LASF132:
 5090 0202 6D6F6465 		.ascii	"modem_get_state\000"
 5090      6D5F6765 
 5090      745F7374 
 5090      61746500 
 5091              	.LASF55:
 5092 0212 616C7469 		.ascii	"altitude\000"
 5092      74756465 
 5092      00
 5093              	.LASF15:
 5094 021b 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 111


 5094      3800
 5095              	.LASF21:
 5096 0221 646F7562 		.ascii	"double\000"
 5096      6C6500
 5097              	.LASF19:
 5098 0228 696E7433 		.ascii	"int32\000"
 5098      3200
 5099              	.LASF59:
 5100 022e 6E6F6465 		.ascii	"node_type\000"
 5100      5F747970 
 5100      6500
 5101              	.LASF122:
 5102 0238 6D6F6465 		.ascii	"modem_configure_settings\000"
 5102      6D5F636F 
 5102      6E666967 
 5102      7572655F 
 5102      73657474 
 5103              	.LASF115:
 5104 0251 735F7369 		.ascii	"s_sim_type\000"
 5104      6D5F7479 
 5104      706500
 5105              	.LASF97:
 5106 025c 6E657477 		.ascii	"network_time\000"
 5106      6F726B5F 
 5106      74696D65 
 5106      00
 5107              	.LASF3:
 5108 0269 73686F72 		.ascii	"short unsigned int\000"
 5108      7420756E 
 5108      7369676E 
 5108      65642069 
 5108      6E7400
 5109              	.LASF17:
 5110 027c 75696E74 		.ascii	"uint32\000"
 5110      333200
 5111              	.LASF93:
 5112 0283 696E7465 		.ascii	"interval\000"
 5112      7276616C 
 5112      00
 5113              	.LASF7:
 5114 028c 5F5F7569 		.ascii	"__uint32_t\000"
 5114      6E743332 
 5114      5F7400
 5115              	.LASF124:
 5116 0297 6D6F6465 		.ascii	"modem_get_network_time\000"
 5116      6D5F6765 
 5116      745F6E65 
 5116      74776F72 
 5116      6B5F7469 
 5117              	.LASF29:
 5118 02ae 746D5F6D 		.ascii	"tm_mon\000"
 5118      6F6E00
 5119              	.LASF63:
 5120 02b5 64656275 		.ascii	"debug_level\000"
 5120      675F6C65 
 5120      76656C00 
 5121              	.LASF133:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 112


 5122 02c1 6D6F6465 		.ascii	"modem_sleep\000"
 5122      6D5F736C 
 5122      65657000 
 5123              	.LASF118:
 5124 02cd 735F6465 		.ascii	"s_debug_freq\000"
 5124      6275675F 
 5124      66726571 
 5124      00
 5125              	.LASF111:
 5126 02da 75706461 		.ascii	"updatable_parameters_initialize\000"
 5126      7461626C 
 5126      655F7061 
 5126      72616D65 
 5126      74657273 
 5127              	.LASF30:
 5128 02fa 746D5F79 		.ascii	"tm_year\000"
 5128      65617200 
 5129              	.LASF154:
 5130 0302 616C6172 		.ascii	"alarmSync\000"
 5130      6D53796E 
 5130      6300
 5131              	.LASF79:
 5132 030c 70696E73 		.ascii	"pins_configure_active\000"
 5132      5F636F6E 
 5132      66696775 
 5132      72655F61 
 5132      63746976 
 5133              	.LASF40:
 5134 0322 6B65795F 		.ascii	"key_value_t\000"
 5134      76616C75 
 5134      655F7400 
 5135              	.LASF84:
 5136 032e 7077725F 		.ascii	"pwr_check\000"
 5136      63686563 
 5136      6B00
 5137              	.LASF8:
 5138 0338 6C6F6E67 		.ascii	"long unsigned int\000"
 5138      20756E73 
 5138      69676E65 
 5138      6420696E 
 5138      7400
 5139              	.LASF99:
 5140 034a 65787472 		.ascii	"extract_string\000"
 5140      6163745F 
 5140      73747269 
 5140      6E6700
 5141              	.LASF89:
 5142 0359 74696D65 		.ascii	"timeout\000"
 5142      6F757400 
 5143              	.LASF112:
 5144 0361 6765745F 		.ascii	"get_cell_network_stats\000"
 5144      63656C6C 
 5144      5F6E6574 
 5144      776F726B 
 5144      5F737461 
 5145              	.LASF56:
 5146 0378 74696D65 		.ascii	"time_to_lock\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 113


 5146      5F746F5F 
 5146      6C6F636B 
 5146      00
 5147              	.LASF142:
 5148 0385 64617461 		.ascii	"data\000"
 5148      00
 5149              	.LASF110:
 5150 038a 6D617463 		.ascii	"match\000"
 5150      6800
 5151              	.LASF75:
 5152 0390 65705F70 		.ascii	"ep_port\000"
 5152      6F727400 
 5153              	.LASF33:
 5154 0398 746D5F69 		.ascii	"tm_isdst\000"
 5154      73647374 
 5154      00
 5155              	.LASF71:
 5156 03a1 6D6F6465 		.ascii	"modem_info\000"
 5156      6D5F696E 
 5156      666F00
 5157              	.LASF74:
 5158 03ac 65705F68 		.ascii	"ep_host\000"
 5158      6F737400 
 5159              	.LASF72:
 5160 03b4 63686970 		.ascii	"chip_uniqueId\000"
 5160      5F756E69 
 5160      71756549 
 5160      6400
 5161              	.LASF94:
 5162 03c2 6D6F6465 		.ascii	"modem_power_up\000"
 5162      6D5F706F 
 5162      7765725F 
 5162      757000
 5163              	.LASF160:
 5164 03d1 6D6F6465 		.ascii	"modem.c\000"
 5164      6D2E6300 
 5165              	.LASF101:
 5166 03d9 62656769 		.ascii	"beginMarker\000"
 5166      6E4D6172 
 5166      6B657200 
 5167              	.LASF103:
 5168 03e5 74617267 		.ascii	"target\000"
 5168      657400
 5169              	.LASF51:
 5170 03ec 74696D65 		.ascii	"time_to_acquire_ip\000"
 5170      5F746F5F 
 5170      61637175 
 5170      6972655F 
 5170      697000
 5171              	.LASF102:
 5172 03ff 656E644D 		.ascii	"endMarker\000"
 5172      61726B65 
 5172      7200
 5173              	.LASF2:
 5174 0409 73686F72 		.ascii	"short int\000"
 5174      7420696E 
 5174      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 114


 5175              	.LASF125:
 5176 0413 65706F63 		.ascii	"epoch_time\000"
 5176      685F7469 
 5176      6D6500
 5177              	.LASF5:
 5178 041e 5F5F696E 		.ascii	"__int32_t\000"
 5178      7433325F 
 5178      7400
 5179              	.LASF100:
 5180 0428 66726F6D 		.ascii	"from\000"
 5180      00
 5181              	.LASF106:
 5182 042d 63726567 		.ascii	"creg\000"
 5182      00
 5183              	.LASF121:
 5184 0432 64656275 		.ascii	"debug_freq\000"
 5184      675F6672 
 5184      657100
 5185              	.LASF90:
 5186 043d 61745F61 		.ascii	"at_attempt\000"
 5186      7474656D 
 5186      707400
 5187              	.LASF98:
 5188 0448 61745F77 		.ascii	"at_write_command\000"
 5188      72697465 
 5188      5F636F6D 
 5188      6D616E64 
 5188      00
 5189              	.LASF73:
 5190 0459 7379735F 		.ascii	"sys_info_t\000"
 5190      696E666F 
 5190      5F7400
 5191              	.LASF65:
 5192 0464 75706461 		.ascii	"updatable_parameters_t\000"
 5192      7461626C 
 5192      655F7061 
 5192      72616D65 
 5192      74657273 
 5193              	.LASF120:
 5194 047b 7265706F 		.ascii	"report_freq\000"
 5194      72745F66 
 5194      72657100 
 5195              	.LASF140:
 5196 0487 64617461 		.ascii	"dataPointsInStack\000"
 5196      506F696E 
 5196      7473496E 
 5196      53746163 
 5196      6B00
 5197              	.LASF26:
 5198 0499 746D5F6D 		.ascii	"tm_min\000"
 5198      696E00
 5199              	.LASF24:
 5200 04a0 73697A65 		.ascii	"sizetype\000"
 5200      74797065 
 5200      00
 5201              	.LASF127:
 5202 04a9 6D6F6E74 		.ascii	"month\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 115


 5202      6800
 5203              	.LASF105:
 5204 04af 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5204      6F6E6E65 
 5204      63746564 
 5204      5F746F5F 
 5204      63656C6C 
 5205              	.LASF157:
 5206 04cc 75617274 		.ascii	"uart_received_string\000"
 5206      5F726563 
 5206      65697665 
 5206      645F7374 
 5206      72696E67 
 5207              	.LASF53:
 5208 04e1 6C617469 		.ascii	"latitude\000"
 5208      74756465 
 5208      00
 5209              	.LASF34:
 5210 04ea 74657374 		.ascii	"test_name\000"
 5210      5F6E616D 
 5210      6500
 5211              	.LASF156:
 5212 04f4 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5212      546F5379 
 5212      636E5265 
 5212      6D6F7465 
 5212      50617261 
 5213              	.LASF95:
 5214 050b 6D6F6465 		.ascii	"modem_test\000"
 5214      6D5F7465 
 5214      737400
 5215              	.LASF161:
 5216 0516 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\notoriOS\\notoriOS\\no"
 5216      73657273 
 5216      5C64616E 
 5216      747A5C44 
 5216      6F63756D 
 5217 0543 746F7269 		.ascii	"toriOS.cydsn\000"
 5217      4F532E63 
 5217      7964736E 
 5217      00
 5218              	.LASF146:
 5219 0550 75706461 		.ascii	"updatable_parameters\000"
 5219      7461626C 
 5219      655F7061 
 5219      72616D65 
 5219      74657273 
 5220              	.LASF128:
 5221 0565 686F7572 		.ascii	"hour\000"
 5221      00
 5222              	.LASF87:
 5223 056a 636F6D6D 		.ascii	"commands\000"
 5223      616E6473 
 5223      00
 5224              	.LASF91:
 5225 0573 636F6D70 		.ascii	"compare_location\000"
 5225      6172655F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 116


 5225      6C6F6361 
 5225      74696F6E 
 5225      00
 5226              	.LASF20:
 5227 0584 666C6F61 		.ascii	"float\000"
 5227      7400
 5228              	.LASF77:
 5229 058a 6D6F6465 		.ascii	"modem_initialize\000"
 5229      6D5F696E 
 5229      69746961 
 5229      6C697A65 
 5229      00
 5230              	.LASF117:
 5231 059b 735F7265 		.ascii	"s_report_freq\000"
 5231      706F7274 
 5231      5F667265 
 5231      7100
 5232              	.LASF60:
 5233 05a9 73696D5F 		.ascii	"sim_type\000"
 5233      74797065 
 5233      00
 5234              	.LASF108:
 5235 05b2 6973725F 		.ascii	"isr_telit_rx\000"
 5235      74656C69 
 5235      745F7278 
 5235      00
 5236              	.LASF70:
 5237 05bf 616C6172 		.ascii	"alarm\000"
 5237      6D00
 5238              	.LASF64:
 5239 05c5 5F426F6F 		.ascii	"_Bool\000"
 5239      6C00
 5240              	.LASF13:
 5241 05cb 696E7433 		.ascii	"int32_t\000"
 5241      325F7400 
 5242              	.LASF1:
 5243 05d3 756E7369 		.ascii	"unsigned char\000"
 5243      676E6564 
 5243      20636861 
 5243      7200
 5244              	.LASF151:
 5245 05e1 73797374 		.ascii	"system_settings\000"
 5245      656D5F73 
 5245      65747469 
 5245      6E677300 
 5246              	.LASF92:
 5247 05f1 64656C61 		.ascii	"delay\000"
 5247      7900
 5248              	.LASF48:
 5249 05f7 72737271 		.ascii	"rsrq\000"
 5249      00
 5250              	.LASF62:
 5251 05fc 73796E63 		.ascii	"sync_time\000"
 5251      5F74696D 
 5251      6500
 5252              	.LASF114:
 5253 0606 735F6E6F 		.ascii	"s_node_type\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 117


 5253      64655F74 
 5253      79706500 
 5254              	.LASF46:
 5255 0612 72736370 		.ascii	"rscp\000"
 5255      00
 5256              	.LASF135:
 5257 0617 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5257      6D5F6765 
 5257      745F6770 
 5257      735F636F 
 5257      6F726469 
 5258              	.LASF37:
 5259 0631 74657374 		.ascii	"test_t\000"
 5259      5F7400
 5260              	.LASF150:
 5261 0638 73797374 		.ascii	"system_info\000"
 5261      656D5F69 
 5261      6E666F00 
 5262              	.LASF43:
 5263 0644 696D6569 		.ascii	"imei\000"
 5263      00
 5264              	.LASF36:
 5265 0649 72656173 		.ascii	"reason\000"
 5265      6F6E00
 5266              	.LASF49:
 5267 0650 72737270 		.ascii	"rsrp\000"
 5267      00
 5268              	.LASF52:
 5269 0655 6D6F6465 		.ascii	"modem_stats_t\000"
 5269      6D5F7374 
 5269      6174735F 
 5269      7400
 5270              	.LASF86:
 5271 0663 75617274 		.ascii	"uart_string_reset\000"
 5271      5F737472 
 5271      696E675F 
 5271      72657365 
 5271      7400
 5272              	.LASF31:
 5273 0675 746D5F77 		.ascii	"tm_wday\000"
 5273      64617900 
 5274              	.LASF85:
 5275 067d 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5275      6D5F736F 
 5275      66745F70 
 5275      6F776572 
 5275      5F637963 
 5276              	.LASF23:
 5277 0694 6C6F6E67 		.ascii	"long double\000"
 5277      20646F75 
 5277      626C6500 
 5278              	.LASF22:
 5279 06a0 63686172 		.ascii	"char\000"
 5279      00
 5280              	.LASF104:
 5281 06a5 6D6F6465 		.ascii	"modem_process_tasks\000"
 5281      6D5F7072 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 118


 5281      6F636573 
 5281      735F7461 
 5281      736B7300 
 5282              	.LASF11:
 5283 06b9 756E7369 		.ascii	"unsigned int\000"
 5283      676E6564 
 5283      20696E74 
 5283      00
 5284              	.LASF123:
 5285 06c6 4346554E 		.ascii	"CFUN\000"
 5285      00
 5286              	.LASF42:
 5287 06cb 6D6F6465 		.ascii	"model_id\000"
 5287      6C5F6964 
 5287      00
 5288              	.LASF149:
 5289 06d4 68747470 		.ascii	"http_route\000"
 5289      5F726F75 
 5289      746500
 5290              	.LASF44:
 5291 06df 6D6F6465 		.ascii	"modem_info_t\000"
 5291      6D5F696E 
 5291      666F5F74 
 5291      00
 5292              	.LASF58:
 5293 06ec 6770735F 		.ascii	"gps_t\000"
 5293      7400
 5294              	.LASF158:
 5295 06f2 75617274 		.ascii	"uart_string_index\000"
 5295      5F737472 
 5295      696E675F 
 5295      696E6465 
 5295      7800
 5296              	.LASF61:
 5297 0704 6D656173 		.ascii	"measure_time\000"
 5297      7572655F 
 5297      74696D65 
 5297      00
 5298              	.LASF109:
 5299 0711 69735F63 		.ascii	"is_connected_to_internet\000"
 5299      6F6E6E65 
 5299      63746564 
 5299      5F746F5F 
 5299      696E7465 
 5300              	.LASF144:
 5301 072a 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5301      6D5F7374 
 5301      6172745F 
 5301      74696D65 
 5301      5F737461 
 5302              	.LASF137:
 5303 0741 6770735F 		.ascii	"gps_status\000"
 5303      73746174 
 5303      757300
 5304              	.LASF78:
 5305 074c 70696E73 		.ascii	"pins_configure_inactive\000"
 5305      5F636F6E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 119


 5305      66696775 
 5305      72655F69 
 5305      6E616374 
 5306              	.LASF41:
 5307 0764 73696D5F 		.ascii	"sim_id\000"
 5307      696400
 5308              	.LASF28:
 5309 076b 746D5F6D 		.ascii	"tm_mday\000"
 5309      64617900 
 5310              	.LASF57:
 5311 0773 76616C69 		.ascii	"valid\000"
 5311      6400
 5312              	.LASF119:
 5313 0779 73616D70 		.ascii	"sample_freq\000"
 5313      6C655F66 
 5313      72657100 
 5314              	.LASF129:
 5315 0785 6D696E75 		.ascii	"minute\000"
 5315      746500
 5316              	.LASF14:
 5317 078c 75696E74 		.ascii	"uint32_t\000"
 5317      33325F74 
 5317      00
 5318              	.LASF25:
 5319 0795 746D5F73 		.ascii	"tm_sec\000"
 5319      656300
 5320              	.LASF113:
 5321 079c 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5321      75706461 
 5321      7465645F 
 5321      70617261 
 5321      6D657465 
 5322              	.LASF116:
 5323 07bf 735F7361 		.ascii	"s_sample_freq\000"
 5323      6D706C65 
 5323      5F667265 
 5323      7100
 5324              	.LASF35:
 5325 07cd 73746174 		.ascii	"status\000"
 5325      757300
 5326              	.LASF141:
 5327 07d4 64617461 		.ascii	"dataPointsInStackDesired\000"
 5327      506F696E 
 5327      7473496E 
 5327      53746163 
 5327      6B446573 
 5328              	.LASF76:
 5329 07ed 7379735F 		.ascii	"sys_settings_t\000"
 5329      73657474 
 5329      696E6773 
 5329      5F7400
 5330              	.LASF12:
 5331 07fc 75696E74 		.ascii	"uint8_t\000"
 5331      385F7400 
 5332              	.LASF18:
 5333 0804 696E7431 		.ascii	"int16\000"
 5333      3600
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc7mJsEe.s 			page 120


 5334              	.LASF81:
 5335 080a 61745F72 		.ascii	"at_ready\000"
 5335      65616479 
 5335      00
 5336              	.LASF82:
 5337 0813 61747465 		.ascii	"attempts\000"
 5337      6D707473 
 5337      00
 5338              	.LASF68:
 5339 081c 636F756E 		.ascii	"countDownType\000"
 5339      74446F77 
 5339      6E547970 
 5339      6500
 5340              	.LASF83:
 5341 082a 626F6F74 		.ascii	"boot_time\000"
 5341      5F74696D 
 5341      6500
 5342              	.LASF88:
 5343 0834 65787065 		.ascii	"expected_response\000"
 5343      63746564 
 5343      5F726573 
 5343      706F6E73 
 5343      6500
 5344              	.LASF136:
 5345 0846 6C6F636B 		.ascii	"lock_time\000"
 5345      5F74696D 
 5345      6500
 5346              	.LASF147:
 5347 0850 68747470 		.ascii	"http_request\000"
 5347      5F726571 
 5347      75657374 
 5347      00
 5348              	.LASF80:
 5349 085d 6D6F6465 		.ascii	"modem_power_down\000"
 5349      6D5F706F 
 5349      7765725F 
 5349      646F776E 
 5349      00
 5350              	.LASF39:
 5351 086e 74696D65 		.ascii	"timeStamp\000"
 5351      5374616D 
 5351      7000
 5352              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
