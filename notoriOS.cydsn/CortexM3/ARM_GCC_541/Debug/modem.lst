ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,8,4
  32              		.comm	level_sensor_inbox,100,4
  33              		.comm	level_sensor_enabled,1,1
  34              		.comm	downstream_level_sensor_inbox,100,4
  35              		.comm	downstream_level_sensor_enabled,1,1
  36              		.comm	App_LED_enabled,1,1
  37              		.comm	app_led_inbox,100,4
  38              		.comm	http_request,10000,4
  39              		.comm	http_body,10000,4
  40              		.comm	http_route,200,4
  41              		.comm	system_info,28,4
  42              		.comm	system_settings,104,4
  43              		.comm	alarmMeasure,6,4
  44              		.comm	timeToMeasure,1,1
  45              		.comm	alarmSync,6,4
  46              		.comm	timeToSync,1,1
  47              		.comm	timeToSycnRemoteParams,1,1
  48              		.comm	hey,1,1
  49              		.comm	alarmAppLED,6,4
  50              		.comm	timeToAppLED,1,1
  51              		.comm	alarmLevelSensor,6,4
  52              		.comm	timetoLevelSensor,1,1
  53              		.comm	alarmDownstreamLevelSensor,6,4
  54              		.comm	timetoDownstreamLevelSensor,1,1
  55              		.comm	uart_received_string,1024,4
  56              		.global	uart_string_index
  57              		.bss
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 2


  58              		.align	1
  59              		.type	uart_string_index, %object
  60              		.size	uart_string_index, 2
  61              	uart_string_index:
  62 0000 0000     		.space	2
  63              		.section	.text.isr_telit_rx,"ax",%progbits
  64              		.align	2
  65              		.global	isr_telit_rx
  66              		.thumb
  67              		.thumb_func
  68              		.type	isr_telit_rx, %function
  69              	isr_telit_rx:
  70              	.LFB64:
  71              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  72              		.loc 1 18 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 1, uses_anonymous_args = 0
  76 0000 98B5     		push	{r3, r4, r7, lr}
  77              		.cfi_def_cfa_offset 16
  78              		.cfi_offset 3, -16
  79              		.cfi_offset 4, -12
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  84              		.loc 1 20 0
  85 0004 12E0     		b	.L2
  86              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  87              		.loc 1 21 0
  88 0006 0D4B     		ldr	r3, .L4
  89 0008 B3F90030 		ldrsh	r3, [r3]
  90 000c 1C46     		mov	r4, r3
  91 000e FFF7FEFF 		bl	UART_Telit_GetChar
  92 0012 0346     		mov	r3, r0
  93 0014 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 3


  94 0016 0A4B     		ldr	r3, .L4+4
  95 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  96              		.loc 1 22 0
  97 001a 084B     		ldr	r3, .L4
  98 001c B3F90030 		ldrsh	r3, [r3]
  99 0020 9BB2     		uxth	r3, r3
 100 0022 0133     		adds	r3, r3, #1
 101 0024 9BB2     		uxth	r3, r3
 102 0026 1AB2     		sxth	r2, r3
 103 0028 044B     		ldr	r3, .L4
 104 002a 1A80     		strh	r2, [r3]	@ movhi
 105              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
 106              		.loc 1 20 0
 107 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
 108 0030 0346     		mov	r3, r0
 109 0032 012B     		cmp	r3, #1
 110 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
 111              		.loc 1 25 0
 112 0036 00BF     		nop
 113 0038 98BD     		pop	{r3, r4, r7, pc}
 114              	.L5:
 115 003a 00BF     		.align	2
 116              	.L4:
 117 003c 00000000 		.word	uart_string_index
 118 0040 00000000 		.word	uart_received_string
 119              		.cfi_endproc
 120              	.LFE64:
 121              		.size	isr_telit_rx, .-isr_telit_rx
 122              		.section	.text.modem_initialize,"ax",%progbits
 123              		.align	2
 124              		.global	modem_initialize
 125              		.thumb
 126              		.thumb_func
 127              		.type	modem_initialize, %function
 128              	modem_initialize:
 129              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 130              		.loc 1 28 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134 0000 80B5     		push	{r7, lr}
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 7, -8
 137              		.cfi_offset 14, -4
 138 0002 00AF     		add	r7, sp, #0
 139              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 4


 140              		.loc 1 31 0
 141 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 142              		.loc 1 32 0
 143 0008 154B     		ldr	r3, .L7
 144 000a 0022     		movs	r2, #0
 145 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 146              		.loc 1 34 0
 147 000e 154B     		ldr	r3, .L7+4
 148 0010 0022     		movs	r2, #0
 149 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 150              		.loc 1 35 0
 151 0016 134B     		ldr	r3, .L7+4
 152 0018 0022     		movs	r2, #0
 153 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 154              		.loc 1 36 0
 155 001c 114B     		ldr	r3, .L7+4
 156 001e 0022     		movs	r2, #0
 157 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 158              		.loc 1 37 0
 159 0022 114B     		ldr	r3, .L7+8
 160 0024 0022     		movs	r2, #0
 161 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 162              		.loc 1 38 0
 163 0028 0F4B     		ldr	r3, .L7+8
 164 002a 0022     		movs	r2, #0
 165 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 166              		.loc 1 39 0
 167 002e 0E4B     		ldr	r3, .L7+8
 168 0030 0022     		movs	r2, #0
 169 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 170              		.loc 1 40 0
 171 0034 0C4B     		ldr	r3, .L7+8
 172 0036 0022     		movs	r2, #0
 173 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 174              		.loc 1 41 0
 175 003a 0B4B     		ldr	r3, .L7+8
 176 003c 0022     		movs	r2, #0
 177 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 178              		.loc 1 42 0
 179 0040 094B     		ldr	r3, .L7+8
 180 0042 0022     		movs	r2, #0
 181 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 182              		.loc 1 43 0
 183 0046 084B     		ldr	r3, .L7+8
 184 0048 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 5


 185 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 186              		.loc 1 44 0
 187 004c 064B     		ldr	r3, .L7+8
 188 004e 0022     		movs	r2, #0
 189 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 190              		.loc 1 48 0
 191 0052 0021     		movs	r1, #0
 192 0054 4020     		movs	r0, #64
 193 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 194              		.loc 1 50 0
 195 005a 00BF     		nop
 196 005c 80BD     		pop	{r7, pc}
 197              	.L8:
 198 005e 00BF     		.align	2
 199              	.L7:
 200 0060 00000000 		.word	modem_state
 201 0064 00000000 		.word	modem_info
 202 0068 00000000 		.word	modem_stats
 203              		.cfi_endproc
 204              	.LFE65:
 205              		.size	modem_initialize, .-modem_initialize
 206              		.section	.text.pins_configure_inactive,"ax",%progbits
 207              		.align	2
 208              		.global	pins_configure_inactive
 209              		.thumb
 210              		.thumb_func
 211              		.type	pins_configure_inactive, %function
 212              	pins_configure_inactive:
 213              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 214              		.loc 1 54 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 218 0000 80B5     		push	{r7, lr}
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 7, -8
 221              		.cfi_offset 14, -4
 222 0002 00AF     		add	r7, sp, #0
 223              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 224              		.loc 1 56 0
 225 0004 0020     		movs	r0, #0
 226 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 227              		.loc 1 57 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 6


 228 000a 0C20     		movs	r0, #12
 229 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 230              		.loc 1 59 0
 231 0010 0020     		movs	r0, #0
 232 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 233              		.loc 1 62 0
 234 0016 0020     		movs	r0, #0
 235 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 236              		.loc 1 63 0
 237 001c 0020     		movs	r0, #0
 238 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 239              		.loc 1 64 0
 240 0022 0020     		movs	r0, #0
 241 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 242              		.loc 1 65 0
 243 0028 0020     		movs	r0, #0
 244 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 245              		.loc 1 67 0
 246 002e 00BF     		nop
 247 0030 80BD     		pop	{r7, pc}
 248              		.cfi_endproc
 249              	.LFE66:
 250              		.size	pins_configure_inactive, .-pins_configure_inactive
 251 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 252              		.align	2
 253              		.global	pins_configure_active
 254              		.thumb
 255              		.thumb_func
 256              		.type	pins_configure_active, %function
 257              	pins_configure_active:
 258              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 259              		.loc 1 70 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0000 80B5     		push	{r7, lr}
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 00AF     		add	r7, sp, #0
 268              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 269              		.loc 1 72 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 7


 270 0004 0220     		movs	r0, #2
 271 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 272              		.loc 1 73 0
 273 000a 0120     		movs	r0, #1
 274 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 275              		.loc 1 74 0
 276 0010 0120     		movs	r0, #1
 277 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 278              		.loc 1 75 0
 279 0016 6420     		movs	r0, #100
 280 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 281              		.loc 1 76 0
 282 001c 00BF     		nop
 283 001e 80BD     		pop	{r7, pc}
 284              		.cfi_endproc
 285              	.LFE67:
 286              		.size	pins_configure_active, .-pins_configure_active
 287              		.section	.rodata
 288              		.align	2
 289              	.LC0:
 290 0000 4F4B00   		.ascii	"OK\000"
 291 0003 00       		.align	2
 292              	.LC1:
 293 0004 41542353 		.ascii	"AT#SHDN\015\000"
 293      48444E0D 
 293      00
 294              		.section	.text.modem_power_down,"ax",%progbits
 295              		.align	2
 296              		.global	modem_power_down
 297              		.thumb
 298              		.thumb_func
 299              		.type	modem_power_down, %function
 300              	modem_power_down:
 301              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 302              		.loc 1 79 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306 0000 80B5     		push	{r7, lr}
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 7, -8
 309              		.cfi_offset 14, -4
 310 0002 00AF     		add	r7, sp, #0
 311              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 312              		.loc 1 82 0
 313 0004 41F28832 		movw	r2, #5000
 314 0008 0A49     		ldr	r1, .L12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 8


 315 000a 0B48     		ldr	r0, .L12+4
 316 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 317              		.loc 1 85 0
 318 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 319              		.loc 1 86 0
 320 0014 4FF47A70 		mov	r0, #1000
 321 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 322              		.loc 1 88 0
 323 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 324              		.loc 1 89 0
 325 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 326              		.loc 1 90 0
 327 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 328              		.loc 1 91 0
 329 0028 044B     		ldr	r3, .L12+8
 330 002a 0022     		movs	r2, #0
 331 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 332              		.loc 1 93 0
 333 002e 00BF     		nop
 334 0030 80BD     		pop	{r7, pc}
 335              	.L13:
 336 0032 00BF     		.align	2
 337              	.L12:
 338 0034 00000000 		.word	.LC0
 339 0038 04000000 		.word	.LC1
 340 003c 00000000 		.word	modem_state
 341              		.cfi_endproc
 342              	.LFE68:
 343              		.size	modem_power_down, .-modem_power_down
 344              		.section	.rodata
 345 000d 000000   		.align	2
 346              	.LC2:
 347 0010 41544530 		.ascii	"ATE0\015\000"
 347      0D00
 348 0016 0000     		.align	2
 349              	.LC3:
 350 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 350      6D20626F 
 350      6F742074 
 350      696D653A 
 350      20256400 
 351              		.align	2
 352              	.LC4:
 353 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 353      6D207265 
 353      61647920 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 9


 353      666F7220 
 353      41542063 
 354 005d 000000   		.align	2
 355              	.LC5:
 356 0060 4E6F2072 		.ascii	"No response from modem.\000"
 356      6573706F 
 356      6E736520 
 356      66726F6D 
 356      206D6F64 
 357              		.section	.text.modem_power_up,"ax",%progbits
 358              		.align	2
 359              		.global	modem_power_up
 360              		.thumb
 361              		.thumb_func
 362              		.type	modem_power_up, %function
 363              	modem_power_up:
 364              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 365              		.loc 1 97 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 8
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369 0000 80B5     		push	{r7, lr}
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 0002 82B0     		sub	sp, sp, #8
 374              		.cfi_def_cfa_offset 16
 375 0004 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 377              		.loc 1 99 0
 378 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 379              		.loc 1 100 0
 380 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 381              		.loc 1 101 0
 382 000e 2C48     		ldr	r0, .L27
 383 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 384              		.loc 1 103 0
 385 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 386              		.loc 1 106 0
 387 0018 0023     		movs	r3, #0
 388 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 389              		.loc 1 107 0
 390 001c 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 10


 391 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 392              		.loc 1 109 0
 393 0020 FFF7FEFF 		bl	getTimeStamp
 394 0024 3860     		str	r0, [r7]
 395              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 396              		.loc 1 112 0
 397 0026 0023     		movs	r3, #0
 398 0028 BB71     		strb	r3, [r7, #6]
 399 002a 1CE0     		b	.L15
 400              	.L22:
 401              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 402              		.loc 1 114 0
 403 002c 0023     		movs	r3, #0
 404 002e 7B71     		strb	r3, [r7, #5]
 405 0030 0EE0     		b	.L16
 406              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 407              		.loc 1 116 0
 408 0032 4FF47A72 		mov	r2, #1000
 409 0036 2349     		ldr	r1, .L27+4
 410 0038 2348     		ldr	r0, .L27+8
 411 003a FFF7FEFF 		bl	at_write_command
 412 003e 0346     		mov	r3, r0
 413 0040 002B     		cmp	r3, #0
 414 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 415              		.loc 1 117 0
 416 0044 0123     		movs	r3, #1
 417 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 418              		.loc 1 118 0
 419 0048 05E0     		b	.L18
 420              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 421              		.loc 1 114 0 discriminator 2
 422 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 423 004c 0133     		adds	r3, r3, #1
 424 004e 7B71     		strb	r3, [r7, #5]
 425              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 426              		.loc 1 114 0 is_stmt 0 discriminator 1
 427 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 428 0052 132B     		cmp	r3, #19
 429 0054 EDD9     		bls	.L19
 430              	.L18:
 431              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 11


 122:modem.c       ****         if(at_ready == 1){
 432              		.loc 1 122 0 is_stmt 1
 433 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 434 0058 012B     		cmp	r3, #1
 435 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 436              		.loc 1 126 0 discriminator 2
 437 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
 438              		.loc 1 112 0 discriminator 2
 439 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 440 0062 0133     		adds	r3, r3, #1
 441 0064 BB71     		strb	r3, [r7, #6]
 442              	.L15:
 112:modem.c       ****         
 443              		.loc 1 112 0 is_stmt 0 discriminator 1
 444 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 445 0068 022B     		cmp	r3, #2
 446 006a DFD9     		bls	.L22
 447 006c 00E0     		b	.L21
 448              	.L26:
 123:modem.c       ****             break;
 449              		.loc 1 123 0 is_stmt 1
 450 006e 00BF     		nop
 451              	.L21:
 452              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 453              		.loc 1 130 0
 454 0070 FFF7FEFF 		bl	getTimeStamp
 455 0074 0246     		mov	r2, r0
 456 0076 3B68     		ldr	r3, [r7]
 457 0078 D31A     		subs	r3, r2, r3
 458 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 459              		.loc 1 131 0
 460 007c 3A68     		ldr	r2, [r7]
 461 007e 1349     		ldr	r1, .L27+12
 462 0080 0020     		movs	r0, #0
 463 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 464              		.loc 1 133 0
 465 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 466 0088 012B     		cmp	r3, #1
 467 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 468              		.loc 1 134 0
 469 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 470 008e 1A46     		mov	r2, r3
 471 0090 0F49     		ldr	r1, .L27+16
 472 0092 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 12


 473 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 474              		.loc 1 135 0
 475 0098 0E4B     		ldr	r3, .L27+20
 476 009a 0122     		movs	r2, #1
 477 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 478              		.loc 1 143 0
 479 009e 0123     		movs	r3, #1
 480 00a0 09E0     		b	.L25
 481              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 482              		.loc 1 137 0
 483 00a2 0D49     		ldr	r1, .L27+24
 484 00a4 0220     		movs	r0, #2
 485 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 486              		.loc 1 138 0
 487 00aa 0A4B     		ldr	r3, .L27+20
 488 00ac 0022     		movs	r2, #0
 489 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 490              		.loc 1 140 0
 491 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 492              		.loc 1 141 0
 493 00b4 0023     		movs	r3, #0
 494              	.L25:
 144:modem.c       **** }
 495              		.loc 1 144 0
 496 00b6 1846     		mov	r0, r3
 497 00b8 0837     		adds	r7, r7, #8
 498              		.cfi_def_cfa_offset 8
 499 00ba BD46     		mov	sp, r7
 500              		.cfi_def_cfa_register 13
 501              		@ sp needed
 502 00bc 80BD     		pop	{r7, pc}
 503              	.L28:
 504 00be 00BF     		.align	2
 505              	.L27:
 506 00c0 00000000 		.word	isr_telit_rx
 507 00c4 00000000 		.word	.LC0
 508 00c8 10000000 		.word	.LC2
 509 00cc 18000000 		.word	.LC3
 510 00d0 2C000000 		.word	.LC4
 511 00d4 00000000 		.word	modem_state
 512 00d8 60000000 		.word	.LC5
 513              		.cfi_endproc
 514              	.LFE69:
 515              		.size	modem_power_up, .-modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 13


 516              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 517              		.align	2
 518              		.global	modem_soft_power_cycle
 519              		.thumb
 520              		.thumb_func
 521              		.type	modem_soft_power_cycle, %function
 522              	modem_soft_power_cycle:
 523              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 524              		.loc 1 147 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0000 80B5     		push	{r7, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 7, -8
 531              		.cfi_offset 14, -4
 532 0002 00AF     		add	r7, sp, #0
 533              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 534              		.loc 1 148 0
 535 0004 0120     		movs	r0, #1
 536 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 537              		.loc 1 149 0
 538 000a 4FF4FA60 		mov	r0, #2000
 539 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 540              		.loc 1 150 0
 541 0012 0020     		movs	r0, #0
 542 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 543              		.loc 1 152 0
 544 0018 00BF     		nop
 545 001a 80BD     		pop	{r7, pc}
 546              		.cfi_endproc
 547              	.LFE70:
 548              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 549              		.section	.text.uart_string_reset,"ax",%progbits
 550              		.align	2
 551              		.global	uart_string_reset
 552              		.thumb
 553              		.thumb_func
 554              		.type	uart_string_reset, %function
 555              	uart_string_reset:
 556              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 557              		.loc 1 155 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 14


 562              		.cfi_def_cfa_offset 8
 563              		.cfi_offset 7, -8
 564              		.cfi_offset 14, -4
 565 0002 00AF     		add	r7, sp, #0
 566              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 567              		.loc 1 156 0
 568 0004 064B     		ldr	r3, .L31
 569 0006 0022     		movs	r2, #0
 570 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
 571              		.loc 1 158 0
 572 000a 4FF48062 		mov	r2, #1024
 573 000e 0021     		movs	r1, #0
 574 0010 0448     		ldr	r0, .L31+4
 575 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 576              		.loc 1 160 0
 577 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 578              		.loc 1 161 0
 579 001a 00BF     		nop
 580 001c 80BD     		pop	{r7, pc}
 581              	.L32:
 582 001e 00BF     		.align	2
 583              	.L31:
 584 0020 00000000 		.word	uart_string_index
 585 0024 00000000 		.word	uart_received_string
 586              		.cfi_endproc
 587              	.LFE71:
 588              		.size	uart_string_reset, .-uart_string_reset
 589              		.section	.rodata
 590              		.align	2
 591              	.LC6:
 592 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 592      6D207365 
 592      6E742041 
 592      5420636F 
 592      6D6D616E 
 593              		.align	2
 594              	.LC7:
 595 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 595      6D205265 
 595      63656976 
 595      65642065 
 595      78706563 
 596 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 596      616E643A 
 596      2025730A 
 596      52656365 
 596      69766564 
 597 00f1 000000   		.align	2
 598              	.LC8:
 599 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 599      6D207265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 15


 599      71756972 
 599      65642025 
 599      64207472 
 600 0127 0A00     		.ascii	"\012\000"
 601 0129 000000   		.align	2
 602              	.LC9:
 603 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 603      64206E6F 
 603      74207772 
 603      69746520 
 603      41542063 
 604 0159 00       		.ascii	"\000"
 605              		.section	.text.at_write_command,"ax",%progbits
 606              		.align	2
 607              		.global	at_write_command
 608              		.thumb
 609              		.thumb_func
 610              		.type	at_write_command, %function
 611              	at_write_command:
 612              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 613              		.loc 1 166 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 40
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617 0000 80B5     		push	{r7, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 7, -8
 620              		.cfi_offset 14, -4
 621 0002 8AB0     		sub	sp, sp, #40
 622              		.cfi_def_cfa_offset 48
 623 0004 00AF     		add	r7, sp, #0
 624              		.cfi_def_cfa_register 7
 625 0006 F860     		str	r0, [r7, #12]
 626 0008 B960     		str	r1, [r7, #8]
 627 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 628              		.loc 1 168 0
 629 000c 0023     		movs	r3, #0
 630 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 631              		.loc 1 170 0
 632 0010 0023     		movs	r3, #0
 633 0012 7B62     		str	r3, [r7, #36]
 634 0014 46E0     		b	.L34
 635              	.L42:
 636              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 637              		.loc 1 173 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 16


 638 0016 0A23     		movs	r3, #10
 639 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 640              		.loc 1 174 0
 641 001a 7A68     		ldr	r2, [r7, #4]
 642 001c FB69     		ldr	r3, [r7, #28]
 643 001e B2FBF3F3 		udiv	r3, r2, r3
 644 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 645              		.loc 1 177 0
 646 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 647              		.loc 1 180 0
 648 0028 F868     		ldr	r0, [r7, #12]
 649 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 650              		.loc 1 184 0
 651 002e 7B68     		ldr	r3, [r7, #4]
 652 0030 002B     		cmp	r3, #0
 653 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 654              		.loc 1 185 0
 655 0034 FA68     		ldr	r2, [r7, #12]
 656 0036 1F49     		ldr	r1, .L43
 657 0038 0020     		movs	r0, #0
 658 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 659              		.loc 1 186 0
 660 003e 0123     		movs	r3, #1
 661 0040 34E0     		b	.L36
 662              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 663              		.loc 1 190 0
 664 0042 0023     		movs	r3, #0
 665 0044 3B62     		str	r3, [r7, #32]
 666 0046 20E0     		b	.L37
 667              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 668              		.loc 1 191 0
 669 0048 F869     		ldr	r0, [r7, #28]
 670 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 671              		.loc 1 194 0
 672 004e B968     		ldr	r1, [r7, #8]
 673 0050 1948     		ldr	r0, .L43+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 17


 674 0052 FFF7FEFF 		bl	strstr
 675 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 676              		.loc 1 195 0
 677 0058 7B69     		ldr	r3, [r7, #20]
 678 005a 002B     		cmp	r3, #0
 679 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 680              		.loc 1 196 0
 681 005e 7B6A     		ldr	r3, [r7, #36]
 682 0060 002B     		cmp	r3, #0
 683 0062 06D1     		bne	.L39
 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 684              		.loc 1 198 0
 685 0064 144B     		ldr	r3, .L43+4
 686 0066 FA68     		ldr	r2, [r7, #12]
 687 0068 1449     		ldr	r1, .L43+8
 688 006a 0020     		movs	r0, #0
 689 006c FFF7FEFF 		bl	printNotif
 690 0070 06E0     		b	.L40
 691              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 692              		.loc 1 200 0
 693 0072 7B6A     		ldr	r3, [r7, #36]
 694 0074 5A1C     		adds	r2, r3, #1
 695 0076 104B     		ldr	r3, .L43+4
 696 0078 1149     		ldr	r1, .L43+12
 697 007a 0120     		movs	r0, #1
 698 007c FFF7FEFF 		bl	printNotif
 699              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 700              		.loc 1 203 0
 701 0080 0123     		movs	r3, #1
 702 0082 13E0     		b	.L36
 703              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 704              		.loc 1 190 0 discriminator 2
 705 0084 3B6A     		ldr	r3, [r7, #32]
 706 0086 0133     		adds	r3, r3, #1
 707 0088 3B62     		str	r3, [r7, #32]
 708              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 709              		.loc 1 190 0 is_stmt 0 discriminator 1
 710 008a 3A6A     		ldr	r2, [r7, #32]
 711 008c BB69     		ldr	r3, [r7, #24]
 712 008e 9A42     		cmp	r2, r3
 713 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 18


 714              		.loc 1 209 0 is_stmt 1 discriminator 2
 715 0092 094B     		ldr	r3, .L43+4
 716 0094 FA68     		ldr	r2, [r7, #12]
 717 0096 0B49     		ldr	r1, .L43+16
 718 0098 0220     		movs	r0, #2
 719 009a FFF7FEFF 		bl	printNotif
 720              	.LBE4:
 170:modem.c       ****         
 721              		.loc 1 170 0 discriminator 2
 722 009e 7B6A     		ldr	r3, [r7, #36]
 723 00a0 0133     		adds	r3, r3, #1
 724 00a2 7B62     		str	r3, [r7, #36]
 725              	.L34:
 170:modem.c       ****         
 726              		.loc 1 170 0 is_stmt 0 discriminator 1
 727 00a4 7B6A     		ldr	r3, [r7, #36]
 728 00a6 022B     		cmp	r3, #2
 729 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 730              		.loc 1 214 0 is_stmt 1
 731 00aa 0023     		movs	r3, #0
 732              	.L36:
 215:modem.c       **** }
 733              		.loc 1 215 0
 734 00ac 1846     		mov	r0, r3
 735 00ae 2837     		adds	r7, r7, #40
 736              		.cfi_def_cfa_offset 8
 737 00b0 BD46     		mov	sp, r7
 738              		.cfi_def_cfa_register 13
 739              		@ sp needed
 740 00b2 80BD     		pop	{r7, pc}
 741              	.L44:
 742              		.align	2
 743              	.L43:
 744 00b4 78000000 		.word	.LC6
 745 00b8 00000000 		.word	uart_received_string
 746 00bc A4000000 		.word	.LC7
 747 00c0 F4000000 		.word	.LC8
 748 00c4 2C010000 		.word	.LC9
 749              		.cfi_endproc
 750              	.LFE72:
 751              		.size	at_write_command, .-at_write_command
 752              		.section	.rodata
 753 015a 0000     		.align	2
 754              	.LC10:
 755 015c 54455354 		.ascii	"TEST_MODEM\000"
 755      5F4D4F44 
 755      454D00
 756 0167 00       		.align	2
 757              	.LC11:
 758 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 758      65706F6E 
 758      73652066 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 19


 758      726F6D20 
 758      6D6F6465 
 759 017f 00       		.align	2
 760              	.LC12:
 761 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 761      6D20636F 
 761      6E6E6563 
 761      74656420 
 761      746F206E 
 762              		.section	.text.modem_test,"ax",%progbits
 763              		.align	2
 764              		.global	modem_test
 765              		.thumb
 766              		.thumb_func
 767              		.type	modem_test, %function
 768              	modem_test:
 769              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 770              		.loc 1 218 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 408
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774 0000 B0B5     		push	{r4, r5, r7, lr}
 775              		.cfi_def_cfa_offset 16
 776              		.cfi_offset 4, -16
 777              		.cfi_offset 5, -12
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 0002 E6B0     		sub	sp, sp, #408
 781              		.cfi_def_cfa_offset 424
 782 0004 00AF     		add	r7, sp, #0
 783              		.cfi_def_cfa_register 7
 784 0006 3B1D     		adds	r3, r7, #4
 785 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 786              		.loc 1 221 0
 787 000a 07F10C03 		add	r3, r7, #12
 788 000e 0022     		movs	r2, #0
 789 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 790              		.loc 1 223 0
 791 0014 07F10C03 		add	r3, r7, #12
 792 0018 364A     		ldr	r2, .L53
 793 001a 07CA     		ldmia	r2, {r0, r1, r2}
 794 001c 03C3     		stmia	r3!, {r0, r1}
 795 001e 1A80     		strh	r2, [r3]	@ movhi
 796 0020 0233     		adds	r3, r3, #2
 797 0022 120C     		lsrs	r2, r2, #16
 798 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 799              		.loc 1 224 0
 800 0026 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 20


 801 002a 8133     		adds	r3, r3, #129
 802 002c 324A     		ldr	r2, .L53+4
 803 002e 1C46     		mov	r4, r3
 804 0030 1546     		mov	r5, r2
 805 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 806 0034 2060     		str	r0, [r4]	@ unaligned
 807 0036 6160     		str	r1, [r4, #4]	@ unaligned
 808 0038 A260     		str	r2, [r4, #8]	@ unaligned
 809 003a E360     		str	r3, [r4, #12]	@ unaligned
 810 003c 2868     		ldr	r0, [r5]	@ unaligned
 811 003e 2061     		str	r0, [r4, #16]	@ unaligned
 812 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 813 0042 AA79     		ldrb	r2, [r5, #6]
 814 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 815 0046 1346     		mov	r3, r2
 816 0048 A375     		strb	r3, [r4, #22]
 817              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 818              		.loc 1 227 0
 819 004a 0023     		movs	r3, #0
 820 004c C7F89431 		str	r3, [r7, #404]
 821 0050 3AE0     		b	.L46
 822              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 823              		.loc 1 229 0
 824 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 825              		.loc 1 231 0
 826 0056 FFF7FEFF 		bl	modem_get_state
 827 005a 0346     		mov	r3, r0
 828 005c 002B     		cmp	r3, #0
 829 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 830              		.loc 1 233 0
 831 0060 FFF7FEFF 		bl	modem_power_up
 832 0064 27E0     		b	.L48
 833              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 834              		.loc 1 236 0
 835 0066 FFF7FEFF 		bl	modem_get_state
 836 006a 0346     		mov	r3, r0
 837 006c 042B     		cmp	r3, #4
 838 006e 22D1     		bne	.L48
 839              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 840              		.loc 1 240 0
 841 0070 FFF7FEFF 		bl	modem_get_network_time
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 21


 842 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 843              		.loc 1 241 0
 844 0078 D7F89031 		ldr	r3, [r7, #400]
 845 007c 002B     		cmp	r3, #0
 846 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 847              		.loc 1 242 0
 848 0080 D7F89001 		ldr	r0, [r7, #400]
 849 0084 FFF7FEFF 		bl	setTime
 850              	.L49:
 243:modem.c       ****         }
 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 851              		.loc 1 245 0
 852 0088 07F10C03 		add	r3, r7, #12
 853 008c 8133     		adds	r3, r3, #129
 854 008e 1B4A     		ldr	r2, .L53+8
 855 0090 1D46     		mov	r5, r3
 856 0092 1446     		mov	r4, r2
 857 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 858 0096 2860     		str	r0, [r5]	@ unaligned
 859 0098 6960     		str	r1, [r5, #4]	@ unaligned
 860 009a AA60     		str	r2, [r5, #8]	@ unaligned
 861 009c EB60     		str	r3, [r5, #12]	@ unaligned
 862 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 863 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 864 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 865 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 866              		.loc 1 246 0
 867 00a6 07F10C03 		add	r3, r7, #12
 868 00aa 0122     		movs	r2, #1
 869 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 870              		.loc 1 248 0
 871 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 872              		.loc 1 249 0
 873 00b4 0CE0     		b	.L50
 874              	.L48:
 875              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 876              		.loc 1 252 0 discriminator 2
 877 00b6 4FF47A70 		mov	r0, #1000
 878 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 879              		.loc 1 227 0 discriminator 2
 880 00be D7F89431 		ldr	r3, [r7, #404]
 881 00c2 0133     		adds	r3, r3, #1
 882 00c4 C7F89431 		str	r3, [r7, #404]
 883              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 884              		.loc 1 227 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 22


 885 00c8 D7F89431 		ldr	r3, [r7, #404]
 886 00cc 3B2B     		cmp	r3, #59
 887 00ce C0DD     		ble	.L51
 888              	.L50:
 889              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 890              		.loc 1 256 0 is_stmt 1
 891 00d0 3B1D     		adds	r3, r7, #4
 892 00d2 1A68     		ldr	r2, [r3]
 893 00d4 07F10C03 		add	r3, r7, #12
 894 00d8 1046     		mov	r0, r2
 895 00da 1946     		mov	r1, r3
 896 00dc 40F28113 		movw	r3, #385
 897 00e0 1A46     		mov	r2, r3
 898 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 899              		.loc 1 257 0
 900 00e6 3B1D     		adds	r3, r7, #4
 901 00e8 1868     		ldr	r0, [r3]
 902 00ea 07F5CC77 		add	r7, r7, #408
 903              		.cfi_def_cfa_offset 16
 904 00ee BD46     		mov	sp, r7
 905              		.cfi_def_cfa_register 13
 906              		@ sp needed
 907 00f0 B0BD     		pop	{r4, r5, r7, pc}
 908              	.L54:
 909 00f2 00BF     		.align	2
 910              	.L53:
 911 00f4 5C010000 		.word	.LC10
 912 00f8 68010000 		.word	.LC11
 913 00fc 80010000 		.word	.LC12
 914              		.cfi_endproc
 915              	.LFE73:
 916              		.size	modem_test, .-modem_test
 917              		.section	.text.extract_string,"ax",%progbits
 918              		.align	2
 919              		.global	extract_string
 920              		.thumb
 921              		.thumb_func
 922              		.type	extract_string, %function
 923              	extract_string:
 924              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 925              		.loc 1 260 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 24
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929 0000 80B5     		push	{r7, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 23


 934              		.cfi_def_cfa_offset 32
 935 0004 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 937 0006 F860     		str	r0, [r7, #12]
 938 0008 B960     		str	r1, [r7, #8]
 939 000a 7A60     		str	r2, [r7, #4]
 940 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
 266:modem.c       ****         a = strstr(from,beginMarker);
 941              		.loc 1 266 0
 942 000e B968     		ldr	r1, [r7, #8]
 943 0010 F868     		ldr	r0, [r7, #12]
 944 0012 FFF7FEFF 		bl	strstr
 945 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 946              		.loc 1 267 0
 947 0018 7B69     		ldr	r3, [r7, #20]
 948 001a 002B     		cmp	r3, #0
 949 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 950              		.loc 1 269 0
 951 001e FB68     		ldr	r3, [r7, #12]
 952 0020 7B61     		str	r3, [r7, #20]
 953              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 954              		.loc 1 272 0
 955 0022 B868     		ldr	r0, [r7, #8]
 956 0024 FFF7FEFF 		bl	strlen
 957 0028 0246     		mov	r2, r0
 958 002a 7B69     		ldr	r3, [r7, #20]
 959 002c 1344     		add	r3, r3, r2
 960 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 961              		.loc 1 277 0
 962 0030 7968     		ldr	r1, [r7, #4]
 963 0032 7869     		ldr	r0, [r7, #20]
 964 0034 FFF7FEFF 		bl	strstr
 965 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 966              		.loc 1 278 0
 967 003a 3B69     		ldr	r3, [r7, #16]
 968 003c 002B     		cmp	r3, #0
 969 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 970              		.loc 1 280 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 24


 971 0040 F868     		ldr	r0, [r7, #12]
 972 0042 FFF7FEFF 		bl	strlen
 973 0046 0246     		mov	r2, r0
 974 0048 FB68     		ldr	r3, [r7, #12]
 975 004a 1344     		add	r3, r3, r2
 976 004c 3B61     		str	r3, [r7, #16]
 977              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 978              		.loc 1 284 0
 979 004e 3A69     		ldr	r2, [r7, #16]
 980 0050 7B69     		ldr	r3, [r7, #20]
 981 0052 D31A     		subs	r3, r2, r3
 982 0054 1A46     		mov	r2, r3
 983 0056 7969     		ldr	r1, [r7, #20]
 984 0058 3868     		ldr	r0, [r7]
 985 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 986              		.loc 1 285 0
 987 005e 3A69     		ldr	r2, [r7, #16]
 988 0060 7B69     		ldr	r3, [r7, #20]
 989 0062 D31A     		subs	r3, r2, r3
 990 0064 1A46     		mov	r2, r3
 991 0066 3B68     		ldr	r3, [r7]
 992 0068 1344     		add	r3, r3, r2
 993 006a 0022     		movs	r2, #0
 994 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 995              		.loc 1 286 0
 996 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 997              		.loc 1 288 0
 998 0070 1846     		mov	r0, r3
 999 0072 1837     		adds	r7, r7, #24
 1000              		.cfi_def_cfa_offset 8
 1001 0074 BD46     		mov	sp, r7
 1002              		.cfi_def_cfa_register 13
 1003              		@ sp needed
 1004 0076 80BD     		pop	{r7, pc}
 1005              		.cfi_endproc
 1006              	.LFE74:
 1007              		.size	extract_string, .-extract_string
 1008              		.section	.rodata
 1009              		.align	2
 1010              	.LC13:
 1011 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 1011      20746F20 
 1011      636F6E6E 
 1011      65637420 
 1011      746F206E 
 1012 01c3 00       		.align	2
 1013              	.LC14:
 1014 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1014      6D207469 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 25


 1014      6D656420 
 1014      6F757420 
 1014      6F6E206E 
 1015 01e7 00       		.align	2
 1016              	.LC15:
 1017 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1017      69726564 
 1017      20495020 
 1017      61646472 
 1017      6573733A 
 1018              		.align	2
 1019              	.LC16:
 1020 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1020      6D207469 
 1020      6D656420 
 1020      6F757420 
 1020      6F6E2049 
 1021              		.section	.text.modem_process_tasks,"ax",%progbits
 1022              		.align	2
 1023              		.global	modem_process_tasks
 1024              		.thumb
 1025              		.thumb_func
 1026              		.type	modem_process_tasks, %function
 1027              	modem_process_tasks:
 1028              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1029              		.loc 1 291 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 8
 1032              		@ frame_needed = 1, uses_anonymous_args = 0
 1033 0000 80B5     		push	{r7, lr}
 1034              		.cfi_def_cfa_offset 8
 1035              		.cfi_offset 7, -8
 1036              		.cfi_offset 14, -4
 1037 0002 82B0     		sub	sp, sp, #8
 1038              		.cfi_def_cfa_offset 16
 1039 0004 00AF     		add	r7, sp, #0
 1040              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1041              		.loc 1 293 0
 1042 0006 534B     		ldr	r3, .L75
 1043 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1044 000a 012B     		cmp	r3, #1
 1045 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1046              		.loc 1 295 0
 1047 000e FFF7FEFF 		bl	getTimeStamp
 1048 0012 0246     		mov	r2, r0
 1049 0014 504B     		ldr	r3, .L75+4
 1050 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1051              		.loc 1 296 0
 1052 0018 FFF7FEFF 		bl	modem_configure_settings
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 26


 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1053              		.loc 1 297 0
 1054 001c 4D4B     		ldr	r3, .L75
 1055 001e 0222     		movs	r2, #2
 1056 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1057              		.loc 1 298 0
 1058 0022 0123     		movs	r3, #1
 1059 0024 92E0     		b	.L61
 1060              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1061              		.loc 1 302 0
 1062 0026 4B4B     		ldr	r3, .L75
 1063 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 002a 022B     		cmp	r3, #2
 1065 002c 5FD1     		bne	.L62
 1066              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1067              		.loc 1 305 0
 1068 002e 0023     		movs	r3, #0
 1069 0030 FB71     		strb	r3, [r7, #7]
 1070 0032 2BE0     		b	.L63
 1071              	.L68:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1072              		.loc 1 307 0
 1073 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If SIM is standard, check rsrp
 309:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 1074              		.loc 1 309 0
 1075 0038 484B     		ldr	r3, .L75+8
 1076 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1077 003c 83F00103 		eor	r3, r3, #1
 1078 0040 DBB2     		uxtb	r3, r3
 1079 0042 002B     		cmp	r3, #0
 1080 0044 07D0     		beq	.L64
 310:modem.c       ****                 // If cell signal (rsrp) is strong enough, break and connect to the network
 311:modem.c       ****                 // Otherwise, keep checking rsrp
 312:modem.c       ****                 if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1081              		.loc 1 312 0
 1082 0046 464B     		ldr	r3, .L75+12
 1083 0048 5B69     		ldr	r3, [r3, #20]
 1084 004a 1A2B     		cmp	r3, #26
 1085 004c 03DD     		ble	.L64
 1086              		.loc 1 312 0 is_stmt 0 discriminator 1
 1087 004e 444B     		ldr	r3, .L75+12
 1088 0050 5B69     		ldr	r3, [r3, #20]
 1089 0052 FF2B     		cmp	r3, #255
 1090 0054 1ED1     		bne	.L74
 1091              	.L64:
 313:modem.c       ****                     break;
 314:modem.c       ****                 }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 27


 315:modem.c       ****             }
 316:modem.c       ****             // If SIM is super, check if rsrp or rscp are strong enough
 317:modem.c       ****             if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 1092              		.loc 1 317 0 is_stmt 1
 1093 0056 414B     		ldr	r3, .L75+8
 1094 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1095 005a 002B     		cmp	r3, #0
 1096 005c 0FD0     		beq	.L66
 318:modem.c       ****                 // If cell signal is strong enough, break and connect to the network
 319:modem.c       ****                 // Otherwise, keep checking rsrp or rscp
 320:modem.c       ****                 if((modem_stats.rscp > 36 && modem_stats.rscp != 255)||(modem_stats.rsrp > 26 && mo
 1097              		.loc 1 320 0
 1098 005e 404B     		ldr	r3, .L75+12
 1099 0060 9B68     		ldr	r3, [r3, #8]
 1100 0062 242B     		cmp	r3, #36
 1101 0064 03DD     		ble	.L67
 1102              		.loc 1 320 0 is_stmt 0 discriminator 1
 1103 0066 3E4B     		ldr	r3, .L75+12
 1104 0068 9B68     		ldr	r3, [r3, #8]
 1105 006a FF2B     		cmp	r3, #255
 1106 006c 13D1     		bne	.L65
 1107              	.L67:
 1108              		.loc 1 320 0 discriminator 3
 1109 006e 3C4B     		ldr	r3, .L75+12
 1110 0070 5B69     		ldr	r3, [r3, #20]
 1111 0072 1A2B     		cmp	r3, #26
 1112 0074 03DD     		ble	.L66
 1113              		.loc 1 320 0 discriminator 4
 1114 0076 3A4B     		ldr	r3, .L75+12
 1115 0078 5B69     		ldr	r3, [r3, #20]
 1116 007a FF2B     		cmp	r3, #255
 1117 007c 0BD1     		bne	.L65
 1118              	.L66:
 321:modem.c       ****                     break;
 322:modem.c       ****                 }
 323:modem.c       ****             }
 324:modem.c       ****             // Delay for 1 second
 325:modem.c       ****             CyDelay(1000u);
 1119              		.loc 1 325 0 is_stmt 1 discriminator 2
 1120 007e 4FF47A70 		mov	r0, #1000
 1121 0082 FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1122              		.loc 1 305 0 discriminator 2
 1123 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1124 0088 0133     		adds	r3, r3, #1
 1125 008a FB71     		strb	r3, [r7, #7]
 1126              	.L63:
 305:modem.c       ****             // Get cell network stats
 1127              		.loc 1 305 0 is_stmt 0 discriminator 1
 1128 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1129 008e 1D2B     		cmp	r3, #29
 1130 0090 D0D9     		bls	.L68
 1131 0092 00E0     		b	.L65
 1132              	.L74:
 313:modem.c       ****                 }
 1133              		.loc 1 313 0 is_stmt 1
 1134 0094 00BF     		nop
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 28


 1135              	.L65:
 1136              	.LBE7:
 326:modem.c       ****         }
 327:modem.c       ****         
 328:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 329:modem.c       ****         if(is_connected_to_cell_network()){
 1137              		.loc 1 329 0
 1138 0096 FFF7FEFF 		bl	is_connected_to_cell_network
 1139 009a 0346     		mov	r3, r0
 1140 009c 002B     		cmp	r3, #0
 1141 009e 13D0     		beq	.L69
 330:modem.c       ****       
 331:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1142              		.loc 1 331 0
 1143 00a0 FFF7FEFF 		bl	getTimeStamp
 1144 00a4 0246     		mov	r2, r0
 1145 00a6 2C4B     		ldr	r3, .L75+4
 1146 00a8 1B68     		ldr	r3, [r3]
 1147 00aa D31A     		subs	r3, r2, r3
 1148 00ac 2C4A     		ldr	r2, .L75+12
 1149 00ae 9361     		str	r3, [r2, #24]
 332:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1150              		.loc 1 332 0
 1151 00b0 2B4B     		ldr	r3, .L75+12
 1152 00b2 9B69     		ldr	r3, [r3, #24]
 1153 00b4 1A46     		mov	r2, r3
 1154 00b6 2B49     		ldr	r1, .L75+16
 1155 00b8 0020     		movs	r0, #0
 1156 00ba FFF7FEFF 		bl	printNotif
 333:modem.c       ****                                             modem_stats.time_to_network_connect);
 334:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1157              		.loc 1 334 0
 1158 00be FFF7FEFF 		bl	set_up_internet_connection
 335:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1159              		.loc 1 335 0
 1160 00c2 244B     		ldr	r3, .L75
 1161 00c4 0322     		movs	r2, #3
 1162 00c6 1A70     		strb	r2, [r3]
 1163              	.L69:
 336:modem.c       ****         }
 337:modem.c       ****         
 338:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 339:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1164              		.loc 1 339 0
 1165 00c8 FFF7FEFF 		bl	getTimeStamp
 1166 00cc 0246     		mov	r2, r0
 1167 00ce 224B     		ldr	r3, .L75+4
 1168 00d0 1B68     		ldr	r3, [r3]
 1169 00d2 D31A     		subs	r3, r2, r3
 1170 00d4 B42B     		cmp	r3, #180
 1171 00d6 08DD     		ble	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1172              		.loc 1 340 0
 1173 00d8 1E4B     		ldr	r3, .L75
 1174 00da 0022     		movs	r2, #0
 1175 00dc 1A70     		strb	r2, [r3]
 341:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 29


 1176              		.loc 1 341 0
 1177 00de FFF7FEFF 		bl	modem_power_down
 342:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1178              		.loc 1 342 0
 1179 00e2 2149     		ldr	r1, .L75+20
 1180 00e4 0220     		movs	r0, #2
 1181 00e6 FFF7FEFF 		bl	printNotif
 1182              	.L70:
 343:modem.c       ****             
 344:modem.c       ****         }
 345:modem.c       ****         return 0u;//ok to hand off to sleep
 1183              		.loc 1 345 0
 1184 00ea 0023     		movs	r3, #0
 1185 00ec 2EE0     		b	.L61
 1186              	.L62:
 346:modem.c       ****         
 347:modem.c       ****     // Else if modem state is "waiting for IP"
 348:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1187              		.loc 1 348 0
 1188 00ee 194B     		ldr	r3, .L75
 1189 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1190 00f2 032B     		cmp	r3, #3
 1191 00f4 29D1     		bne	.L71
 349:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 350:modem.c       ****         if(is_connected_to_internet()){
 1192              		.loc 1 350 0
 1193 00f6 FFF7FEFF 		bl	is_connected_to_internet
 1194 00fa 0346     		mov	r3, r0
 1195 00fc 002B     		cmp	r3, #0
 1196 00fe 11D0     		beq	.L72
 351:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1197              		.loc 1 351 0
 1198 0100 144B     		ldr	r3, .L75
 1199 0102 0422     		movs	r2, #4
 1200 0104 1A70     		strb	r2, [r3]
 352:modem.c       ****             // Save/print time to acquire IP address
 353:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1201              		.loc 1 353 0
 1202 0106 FFF7FEFF 		bl	getTimeStamp
 1203 010a 0246     		mov	r2, r0
 1204 010c 124B     		ldr	r3, .L75+4
 1205 010e 1B68     		ldr	r3, [r3]
 1206 0110 D31A     		subs	r3, r2, r3
 1207 0112 134A     		ldr	r2, .L75+12
 1208 0114 D361     		str	r3, [r2, #28]
 354:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1209              		.loc 1 354 0
 1210 0116 124B     		ldr	r3, .L75+12
 1211 0118 DB69     		ldr	r3, [r3, #28]
 1212 011a 1A46     		mov	r2, r3
 1213 011c 1349     		ldr	r1, .L75+24
 1214 011e 0020     		movs	r0, #0
 1215 0120 FFF7FEFF 		bl	printNotif
 1216              	.L72:
 355:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 356:modem.c       ****         }
 357:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 30


 358:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 359:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1217              		.loc 1 359 0
 1218 0124 FFF7FEFF 		bl	getTimeStamp
 1219 0128 0246     		mov	r2, r0
 1220 012a 0B4B     		ldr	r3, .L75+4
 1221 012c 1B68     		ldr	r3, [r3]
 1222 012e D31A     		subs	r3, r2, r3
 1223 0130 E62B     		cmp	r3, #230
 1224 0132 08DD     		ble	.L73
 360:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1225              		.loc 1 360 0
 1226 0134 074B     		ldr	r3, .L75
 1227 0136 0022     		movs	r2, #0
 1228 0138 1A70     		strb	r2, [r3]
 361:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1229              		.loc 1 361 0
 1230 013a FFF7FEFF 		bl	modem_power_down
 362:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1231              		.loc 1 362 0
 1232 013e 0C49     		ldr	r1, .L75+28
 1233 0140 0220     		movs	r0, #2
 1234 0142 FFF7FEFF 		bl	printNotif
 1235              	.L73:
 363:modem.c       ****       
 364:modem.c       ****         }
 365:modem.c       ****         return 0u;//ok to hand off to sleep
 1236              		.loc 1 365 0
 1237 0146 0023     		movs	r3, #0
 1238 0148 00E0     		b	.L61
 1239              	.L71:
 366:modem.c       ****     }
 367:modem.c       ****     
 368:modem.c       ****     return 0u;
 1240              		.loc 1 368 0
 1241 014a 0023     		movs	r3, #0
 1242              	.L61:
 369:modem.c       ****     
 370:modem.c       **** }
 1243              		.loc 1 370 0
 1244 014c 1846     		mov	r0, r3
 1245 014e 0837     		adds	r7, r7, #8
 1246              		.cfi_def_cfa_offset 8
 1247 0150 BD46     		mov	sp, r7
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 0152 80BD     		pop	{r7, pc}
 1251              	.L76:
 1252              		.align	2
 1253              	.L75:
 1254 0154 00000000 		.word	modem_state
 1255 0158 00000000 		.word	modem_start_time_stamp
 1256 015c 00000000 		.word	updatable_parameters
 1257 0160 00000000 		.word	modem_stats
 1258 0164 9C010000 		.word	.LC13
 1259 0168 C4010000 		.word	.LC14
 1260 016c E8010000 		.word	.LC15
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 31


 1261 0170 08020000 		.word	.LC16
 1262              		.cfi_endproc
 1263              	.LFE75:
 1264              		.size	modem_process_tasks, .-modem_process_tasks
 1265              		.section	.rodata
 1266 022f 00       		.align	2
 1267              	.LC17:
 1268 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1268      6B696E67 
 1268      2041542B 
 1268      43524547 
 1268      3F00
 1269 0242 0000     		.align	2
 1270              	.LC18:
 1271 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1271      5245473F 
 1271      0D00
 1272 024e 0000     		.align	2
 1273              	.LC19:
 1274 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1274      61637469 
 1274      6E672073 
 1274      7472696E 
 1274      67204154 
 1275 026b 00       		.align	2
 1276              	.LC20:
 1277 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1277      5F726563 
 1277      65697665 
 1277      645F7374 
 1277      72696E67 
 1278 0285 000000   		.align	2
 1279              	.LC21:
 1280 0288 0D00     		.ascii	"\015\000"
 1281 028a 0000     		.align	2
 1282              	.LC22:
 1283 028c 3A2000   		.ascii	": \000"
 1284 028f 00       		.align	2
 1285              	.LC23:
 1286 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1286      73746572 
 1286      65642074 
 1286      6F206E65 
 1286      74776F72 
 1287              		.align	2
 1288              	.LC24:
 1289 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1289      20657874 
 1289      72616369 
 1289      6E672073 
 1289      7472696E 
 1290 02cf 00       		.align	2
 1291              	.LC25:
 1292 02d0 302C3100 		.ascii	"0,1\000"
 1293              		.align	2
 1294              	.LC26:
 1295 02d4 302C3500 		.ascii	"0,5\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 32


 1296              		.section	.text.is_connected_to_cell_network,"ax",%progbits
 1297              		.align	2
 1298              		.global	is_connected_to_cell_network
 1299              		.thumb
 1300              		.thumb_func
 1301              		.type	is_connected_to_cell_network, %function
 1302              	is_connected_to_cell_network:
 1303              	.LFB76:
 371:modem.c       **** 
 372:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 373:modem.c       **** uint8 is_connected_to_cell_network(){
 1304              		.loc 1 373 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 16
 1307              		@ frame_needed = 1, uses_anonymous_args = 0
 1308 0000 80B5     		push	{r7, lr}
 1309              		.cfi_def_cfa_offset 8
 1310              		.cfi_offset 7, -8
 1311              		.cfi_offset 14, -4
 1312 0002 84B0     		sub	sp, sp, #16
 1313              		.cfi_def_cfa_offset 24
 1314 0004 00AF     		add	r7, sp, #0
 1315              		.cfi_def_cfa_register 7
 374:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 375:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1316              		.loc 1 375 0
 1317 0006 2049     		ldr	r1, .L82
 1318 0008 0020     		movs	r0, #0
 1319 000a FFF7FEFF 		bl	printNotif
 376:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 377:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1320              		.loc 1 377 0
 1321 000e 4FF4FA62 		mov	r2, #2000
 1322 0012 1E49     		ldr	r1, .L82+4
 1323 0014 1E48     		ldr	r0, .L82+8
 1324 0016 FFF7FEFF 		bl	at_write_command
 1325 001a 0346     		mov	r3, r0
 1326 001c FB73     		strb	r3, [r7, #15]
 378:modem.c       ****     
 379:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1327              		.loc 1 379 0
 1328 001e 1D49     		ldr	r1, .L82+12
 1329 0020 0020     		movs	r0, #0
 1330 0022 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1331              		.loc 1 380 0
 1332 0026 1C4A     		ldr	r2, .L82+16
 1333 0028 1C49     		ldr	r1, .L82+20
 1334 002a 0020     		movs	r0, #0
 1335 002c FFF7FEFF 		bl	printNotif
 381:modem.c       ****     
 382:modem.c       ****     // If the modem has a status
 383:modem.c       ****     if(status){
 1336              		.loc 1 383 0
 1337 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1338 0032 002B     		cmp	r3, #0
 1339 0034 23D0     		beq	.L78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 33


 1340              	.LBB8:
 384:modem.c       ****         // Create a character array of length 10 called creg
 385:modem.c       ****         char creg[10];
 386:modem.c       ****         creg[0] = '\0';
 1341              		.loc 1 386 0
 1342 0036 0023     		movs	r3, #0
 1343 0038 3B71     		strb	r3, [r7, #4]
 387:modem.c       ****         // Extract string from the UART
 388:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1344              		.loc 1 388 0
 1345 003a 3B1D     		adds	r3, r7, #4
 1346 003c 184A     		ldr	r2, .L82+24
 1347 003e 1949     		ldr	r1, .L82+28
 1348 0040 1548     		ldr	r0, .L82+16
 1349 0042 FFF7FEFF 		bl	extract_string
 389:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1350              		.loc 1 389 0
 1351 0046 3B1D     		adds	r3, r7, #4
 1352 0048 1A46     		mov	r2, r3
 1353 004a 1749     		ldr	r1, .L82+32
 1354 004c 0020     		movs	r0, #0
 1355 004e FFF7FEFF 		bl	printNotif
 390:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1356              		.loc 1 390 0
 1357 0052 1649     		ldr	r1, .L82+36
 1358 0054 0020     		movs	r0, #0
 1359 0056 FFF7FEFF 		bl	printNotif
 391:modem.c       ****     
 392:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 393:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1360              		.loc 1 393 0
 1361 005a 3B1D     		adds	r3, r7, #4
 1362 005c 1449     		ldr	r1, .L82+40
 1363 005e 1846     		mov	r0, r3
 1364 0060 FFF7FEFF 		bl	strstr
 1365 0064 0346     		mov	r3, r0
 1366 0066 002B     		cmp	r3, #0
 1367 0068 07D1     		bne	.L79
 1368              		.loc 1 393 0 is_stmt 0 discriminator 1
 1369 006a 3B1D     		adds	r3, r7, #4
 1370 006c 1149     		ldr	r1, .L82+44
 1371 006e 1846     		mov	r0, r3
 1372 0070 FFF7FEFF 		bl	strstr
 1373 0074 0346     		mov	r3, r0
 1374 0076 002B     		cmp	r3, #0
 1375 0078 01D0     		beq	.L78
 1376              	.L79:
 394:modem.c       ****             return 1u;
 1377              		.loc 1 394 0 is_stmt 1
 1378 007a 0123     		movs	r3, #1
 1379 007c 00E0     		b	.L81
 1380              	.L78:
 1381              	.LBE8:
 395:modem.c       ****         }
 396:modem.c       ****     }
 397:modem.c       ****     // If the modem doesn't have a status, return 0u
 398:modem.c       ****     return 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 34


 1382              		.loc 1 398 0
 1383 007e 0023     		movs	r3, #0
 1384              	.L81:
 399:modem.c       ****         
 400:modem.c       **** }
 1385              		.loc 1 400 0
 1386 0080 1846     		mov	r0, r3
 1387 0082 1037     		adds	r7, r7, #16
 1388              		.cfi_def_cfa_offset 8
 1389 0084 BD46     		mov	sp, r7
 1390              		.cfi_def_cfa_register 13
 1391              		@ sp needed
 1392 0086 80BD     		pop	{r7, pc}
 1393              	.L83:
 1394              		.align	2
 1395              	.L82:
 1396 0088 30020000 		.word	.LC17
 1397 008c 00000000 		.word	.LC0
 1398 0090 44020000 		.word	.LC18
 1399 0094 50020000 		.word	.LC19
 1400 0098 00000000 		.word	uart_received_string
 1401 009c 6C020000 		.word	.LC20
 1402 00a0 88020000 		.word	.LC21
 1403 00a4 8C020000 		.word	.LC22
 1404 00a8 90020000 		.word	.LC23
 1405 00ac B0020000 		.word	.LC24
 1406 00b0 D0020000 		.word	.LC25
 1407 00b4 D4020000 		.word	.LC26
 1408              		.cfi_endproc
 1409              	.LFE76:
 1410              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1411              		.section	.rodata
 1412              		.align	2
 1413              	.LC27:
 1414 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1414      47414354 
 1414      3D312C31 
 1414      0D0A00
 1415              		.section	.text.set_up_internet_connection,"ax",%progbits
 1416              		.align	2
 1417              		.global	set_up_internet_connection
 1418              		.thumb
 1419              		.thumb_func
 1420              		.type	set_up_internet_connection, %function
 1421              	set_up_internet_connection:
 1422              	.LFB77:
 401:modem.c       **** 
 402:modem.c       **** // Connect the modem to the internet
 403:modem.c       **** void set_up_internet_connection(){
 1423              		.loc 1 403 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427 0000 80B5     		push	{r7, lr}
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 7, -8
 1430              		.cfi_offset 14, -4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 35


 1431 0002 00AF     		add	r7, sp, #0
 1432              		.cfi_def_cfa_register 7
 404:modem.c       ****     
 405:modem.c       ****     //port 3
 406:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 407:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 408:modem.c       ****     
 409:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 410:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 411:modem.c       ****     // <cid>,<stat>
 412:modem.c       ****    
 413:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 414:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1433              		.loc 1 414 0
 1434 0004 4FF47A72 		mov	r2, #1000
 1435 0008 0249     		ldr	r1, .L85
 1436 000a 0348     		ldr	r0, .L85+4
 1437 000c FFF7FEFF 		bl	at_write_command
 415:modem.c       ****     
 416:modem.c       **** }
 1438              		.loc 1 416 0
 1439 0010 00BF     		nop
 1440 0012 80BD     		pop	{r7, pc}
 1441              	.L86:
 1442              		.align	2
 1443              	.L85:
 1444 0014 00000000 		.word	.LC0
 1445 0018 D8020000 		.word	.LC27
 1446              		.cfi_endproc
 1447              	.LFE77:
 1448              		.size	set_up_internet_connection, .-set_up_internet_connection
 1449              		.section	.rodata
 1450 02e7 00       		.align	2
 1451              	.LC28:
 1452 02e8 312C3100 		.ascii	"1,1\000"
 1453              		.align	2
 1454              	.LC29:
 1455 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1455      47414354 
 1455      3F0D00
 1456              		.section	.text.is_connected_to_internet,"ax",%progbits
 1457              		.align	2
 1458              		.global	is_connected_to_internet
 1459              		.thumb
 1460              		.thumb_func
 1461              		.type	is_connected_to_internet, %function
 1462              	is_connected_to_internet:
 1463              	.LFB78:
 417:modem.c       **** 
 418:modem.c       **** // Checks if the modem is connected to the internet
 419:modem.c       **** uint8 is_connected_to_internet(){
 1464              		.loc 1 419 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468 0000 80B5     		push	{r7, lr}
 1469              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 36


 1470              		.cfi_offset 7, -8
 1471              		.cfi_offset 14, -4
 1472 0002 00AF     		add	r7, sp, #0
 1473              		.cfi_def_cfa_register 7
 420:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 421:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 422:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 423:modem.c       ****     // Check for 3,1 if Verizon 
 424:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1474              		.loc 1 424 0
 1475 0004 4FF4FA62 		mov	r2, #2000
 1476 0008 0549     		ldr	r1, .L90
 1477 000a 0648     		ldr	r0, .L90+4
 1478 000c FFF7FEFF 		bl	at_write_command
 1479 0010 0346     		mov	r3, r0
 1480 0012 002B     		cmp	r3, #0
 1481 0014 01D0     		beq	.L88
 425:modem.c       ****         return 1u;
 1482              		.loc 1 425 0
 1483 0016 0123     		movs	r3, #1
 1484 0018 00E0     		b	.L89
 1485              	.L88:
 426:modem.c       ****     }
 427:modem.c       ****     return 0u;  
 1486              		.loc 1 427 0
 1487 001a 0023     		movs	r3, #0
 1488              	.L89:
 428:modem.c       **** }
 1489              		.loc 1 428 0
 1490 001c 1846     		mov	r0, r3
 1491 001e 80BD     		pop	{r7, pc}
 1492              	.L91:
 1493              		.align	2
 1494              	.L90:
 1495 0020 E8020000 		.word	.LC28
 1496 0024 EC020000 		.word	.LC29
 1497              		.cfi_endproc
 1498              	.LFE78:
 1499              		.size	is_connected_to_internet, .-is_connected_to_internet
 1500              		.section	.rodata
 1501 02f7 00       		.align	2
 1502              	.LC30:
 1503 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1503      4553510D 
 1503      00
 1504 0301 000000   		.align	2
 1505              	.LC31:
 1506 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1506      4553513A 
 1506      2025642C 
 1506      25642C25 
 1506      642C2564 
 1507              		.section	.text.get_cell_network_stats,"ax",%progbits
 1508              		.align	2
 1509              		.global	get_cell_network_stats
 1510              		.thumb
 1511              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 37


 1512              		.type	get_cell_network_stats, %function
 1513              	get_cell_network_stats:
 1514              	.LFB79:
 429:modem.c       **** 
 430:modem.c       **** void get_cell_network_stats(){
 1515              		.loc 1 430 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 8
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519 0000 80B5     		push	{r7, lr}
 1520              		.cfi_def_cfa_offset 8
 1521              		.cfi_offset 7, -8
 1522              		.cfi_offset 14, -4
 1523 0002 86B0     		sub	sp, sp, #24
 1524              		.cfi_def_cfa_offset 32
 1525 0004 04AF     		add	r7, sp, #16
 1526              		.cfi_def_cfa 7, 16
 431:modem.c       ****     // Initialize values
 432:modem.c       ****     modem_stats.ber = 255;
 1527              		.loc 1 432 0
 1528 0006 154B     		ldr	r3, .L93
 1529 0008 FF22     		movs	r2, #255
 1530 000a 5A60     		str	r2, [r3, #4]
 433:modem.c       ****     modem_stats.ecno = 255;
 1531              		.loc 1 433 0
 1532 000c 134B     		ldr	r3, .L93
 1533 000e FF22     		movs	r2, #255
 1534 0010 DA60     		str	r2, [r3, #12]
 434:modem.c       ****     modem_stats.rscp = 255;
 1535              		.loc 1 434 0
 1536 0012 124B     		ldr	r3, .L93
 1537 0014 FF22     		movs	r2, #255
 1538 0016 9A60     		str	r2, [r3, #8]
 435:modem.c       ****     modem_stats.rsrp = 255;
 1539              		.loc 1 435 0
 1540 0018 104B     		ldr	r3, .L93
 1541 001a FF22     		movs	r2, #255
 1542 001c 5A61     		str	r2, [r3, #20]
 436:modem.c       ****     modem_stats.rsrq = 255;
 1543              		.loc 1 436 0
 1544 001e 0F4B     		ldr	r3, .L93
 1545 0020 FF22     		movs	r2, #255
 1546 0022 1A61     		str	r2, [r3, #16]
 437:modem.c       ****     modem_stats.rxlev = 255;
 1547              		.loc 1 437 0
 1548 0024 0D4B     		ldr	r3, .L93
 1549 0026 FF22     		movs	r2, #255
 1550 0028 1A60     		str	r2, [r3]
 438:modem.c       **** 
 439:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 440:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1551              		.loc 1 440 0
 1552 002a 4FF4FA62 		mov	r2, #2000
 1553 002e 0C49     		ldr	r1, .L93+4
 1554 0030 0C48     		ldr	r0, .L93+8
 1555 0032 FFF7FEFF 		bl	at_write_command
 441:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 38


 442:modem.c       **** 
 443:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1556              		.loc 1 443 0
 1557 0036 0C4B     		ldr	r3, .L93+12
 1558 0038 0393     		str	r3, [sp, #12]
 1559 003a 0C4B     		ldr	r3, .L93+16
 1560 003c 0293     		str	r3, [sp, #8]
 1561 003e 0C4B     		ldr	r3, .L93+20
 1562 0040 0193     		str	r3, [sp, #4]
 1563 0042 0C4B     		ldr	r3, .L93+24
 1564 0044 0093     		str	r3, [sp]
 1565 0046 0C4B     		ldr	r3, .L93+28
 1566 0048 044A     		ldr	r2, .L93
 1567 004a 0C49     		ldr	r1, .L93+32
 1568 004c 0C48     		ldr	r0, .L93+36
 1569 004e FFF7FEFF 		bl	sscanf
 1570 0052 7860     		str	r0, [r7, #4]
 444:modem.c       ****         &modem_stats.rxlev,
 445:modem.c       ****         &modem_stats.ber,
 446:modem.c       ****         &modem_stats.rscp,
 447:modem.c       ****         &modem_stats.ecno,
 448:modem.c       ****         &modem_stats.rsrq,
 449:modem.c       ****         &modem_stats.rsrp);
 450:modem.c       **** 
 451:modem.c       ****         //check to see if we’re getting a good received signal strength
 452:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 453:modem.c       ****         //    break;
 454:modem.c       ****         //}
 455:modem.c       ****         // Delay one second
 456:modem.c       ****         //CyDelay(1000u);
 457:modem.c       ****     //}
 458:modem.c       **** }
 1571              		.loc 1 458 0
 1572 0054 00BF     		nop
 1573 0056 0837     		adds	r7, r7, #8
 1574              		.cfi_def_cfa_offset 8
 1575 0058 BD46     		mov	sp, r7
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 005a 80BD     		pop	{r7, pc}
 1579              	.L94:
 1580              		.align	2
 1581              	.L93:
 1582 005c 00000000 		.word	modem_stats
 1583 0060 00000000 		.word	.LC0
 1584 0064 F8020000 		.word	.LC30
 1585 0068 14000000 		.word	modem_stats+20
 1586 006c 10000000 		.word	modem_stats+16
 1587 0070 0C000000 		.word	modem_stats+12
 1588 0074 08000000 		.word	modem_stats+8
 1589 0078 04000000 		.word	modem_stats+4
 1590 007c 04030000 		.word	.LC31
 1591 0080 00000000 		.word	uart_received_string
 1592              		.cfi_endproc
 1593              	.LFE79:
 1594              		.size	get_cell_network_stats, .-get_cell_network_stats
 1595              		.section	.text.updatable_parameters_initialize,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 39


 1596              		.align	2
 1597              		.global	updatable_parameters_initialize
 1598              		.thumb
 1599              		.thumb_func
 1600              		.type	updatable_parameters_initialize, %function
 1601              	updatable_parameters_initialize:
 1602              	.LFB80:
 459:modem.c       **** 
 460:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 461:modem.c       **** void updatable_parameters_initialize(){
 1603              		.loc 1 461 0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 1, uses_anonymous_args = 0
 1607              		@ link register save eliminated.
 1608 0000 80B4     		push	{r7}
 1609              		.cfi_def_cfa_offset 4
 1610              		.cfi_offset 7, -4
 1611 0002 00AF     		add	r7, sp, #0
 1612              		.cfi_def_cfa_register 7
 462:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1613              		.loc 1 462 0
 1614 0004 0D4B     		ldr	r3, .L96
 1615 0006 0022     		movs	r2, #0
 1616 0008 1A70     		strb	r2, [r3]
 463:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_SUPER;
 1617              		.loc 1 463 0
 1618 000a 0C4B     		ldr	r3, .L96
 1619 000c 0122     		movs	r2, #1
 1620 000e 5A70     		strb	r2, [r3, #1]
 464:modem.c       ****     updatable_parameters.measure_time = 1u;
 1621              		.loc 1 464 0
 1622 0010 0A4B     		ldr	r3, .L96
 1623 0012 0122     		movs	r2, #1
 1624 0014 9A70     		strb	r2, [r3, #2]
 465:modem.c       ****     updatable_parameters.sync_time = 1u;
 1625              		.loc 1 465 0
 1626 0016 094B     		ldr	r3, .L96
 1627 0018 0122     		movs	r2, #1
 1628 001a DA70     		strb	r2, [r3, #3]
 466:modem.c       ****     updatable_parameters.debug_level = 1u;
 1629              		.loc 1 466 0
 1630 001c 074B     		ldr	r3, .L96
 1631 001e 0122     		movs	r2, #1
 1632 0020 1A71     		strb	r2, [r3, #4]
 467:modem.c       ****     
 468:modem.c       ****     // App timers
 469:modem.c       ****     // APP_INTERFACE
 470:modem.c       ****     updatable_parameters.App_LED_freq = 120u; 
 1633              		.loc 1 470 0
 1634 0022 064B     		ldr	r3, .L96
 1635 0024 7822     		movs	r2, #120
 1636 0026 5A71     		strb	r2, [r3, #5]
 471:modem.c       ****     updatable_parameters.Level_Sensor_freq = 120u; 
 1637              		.loc 1 471 0
 1638 0028 044B     		ldr	r3, .L96
 1639 002a 7822     		movs	r2, #120
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 40


 1640 002c 9A71     		strb	r2, [r3, #6]
 472:modem.c       ****     updatable_parameters.Downstream_Level_Sensor_freq = 120u;
 1641              		.loc 1 472 0
 1642 002e 034B     		ldr	r3, .L96
 1643 0030 7822     		movs	r2, #120
 1644 0032 DA71     		strb	r2, [r3, #7]
 473:modem.c       **** }
 1645              		.loc 1 473 0
 1646 0034 00BF     		nop
 1647 0036 BD46     		mov	sp, r7
 1648              		.cfi_def_cfa_register 13
 1649              		@ sp needed
 1650 0038 80BC     		pop	{r7}
 1651              		.cfi_restore 7
 1652              		.cfi_def_cfa_offset 0
 1653 003a 7047     		bx	lr
 1654              	.L97:
 1655              		.align	2
 1656              	.L96:
 1657 003c 00000000 		.word	updatable_parameters
 1658              		.cfi_endproc
 1659              	.LFE80:
 1660              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1661              		.section	.rodata
 1662 0322 0000     		.align	2
 1663              	.LC32:
 1664 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1664      5F547970 
 1664      653A2000 
 1665              		.align	2
 1666              	.LC33:
 1667 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1667      54797065 
 1667      3A2000
 1668 033b 00       		.align	2
 1669              	.LC34:
 1670 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1670      6C655F46 
 1670      7265713A 
 1670      2000
 1671 034a 0000     		.align	2
 1672              	.LC35:
 1673 034c 5265706F 		.ascii	"Report_Freq: \000"
 1673      72745F46 
 1673      7265713A 
 1673      2000
 1674 035a 0000     		.align	2
 1675              	.LC36:
 1676 035c 44656275 		.ascii	"Debug_Freq: \000"
 1676      675F4672 
 1676      65713A20 
 1676      00
 1677 0369 000000   		.align	2
 1678              	.LC37:
 1679 036c 41707073 		.ascii	"Apps_Enabled: \000"
 1679      5F456E61 
 1679      626C6564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 41


 1679      3A2000
 1680 037b 00       		.align	2
 1681              	.LC38:
 1682 037c 4C657665 		.ascii	"Level_Sensor\000"
 1682      6C5F5365 
 1682      6E736F72 
 1682      00
 1683 0389 000000   		.align	2
 1684              	.LC39:
 1685 038c 4170705F 		.ascii	"App_LED\000"
 1685      4C454400 
 1686              		.align	2
 1687              	.LC40:
 1688 0394 446F776E 		.ascii	"Downstream_Level\000"
 1688      73747265 
 1688      616D5F4C 
 1688      6576656C 
 1688      00
 1689 03a5 000000   		.align	2
 1690              	.LC41:
 1691 03a8 4170705F 		.ascii	"App_LED: \000"
 1691      4C45443A 
 1691      2000
 1692 03b2 0000     		.align	2
 1693              	.LC42:
 1694 03b4 4C657665 		.ascii	"Level_Sensor: \000"
 1694      6C5F5365 
 1694      6E736F72 
 1694      3A2000
 1695 03c3 00       		.align	2
 1696              	.LC43:
 1697 03c4 446F776E 		.ascii	"Downstream_Level: \000"
 1697      73747265 
 1697      616D5F4C 
 1697      6576656C 
 1697      3A2000
 1698 03d7 00       		.align	2
 1699              	.LC44:
 1700 03d8 256400   		.ascii	"%d\000"
 1701 03db 00       		.align	2
 1702              	.LC45:
 1703 03dc 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1703      20747970 
 1703      65206368 
 1703      616E6765 
 1703      6420746F 
 1704 03f7 00       		.align	2
 1705              	.LC46:
 1706 03f8 436F756C 		.ascii	"Could not change node type.\000"
 1706      64206E6F 
 1706      74206368 
 1706      616E6765 
 1706      206E6F64 
 1707              		.align	2
 1708              	.LC47:
 1709 0414 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1709      74797065 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 42


 1709      20636861 
 1709      6E676564 
 1709      20746F3A 
 1710 042e 0000     		.align	2
 1711              	.LC48:
 1712 0430 436F756C 		.ascii	"Could not change SIM type.\000"
 1712      64206E6F 
 1712      74206368 
 1712      616E6765 
 1712      2053494D 
 1713 044b 00       		.align	2
 1714              	.LC49:
 1715 044c 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1715      6C696E67 
 1715      20667265 
 1715      7175656E 
 1715      63792063 
 1716              		.align	2
 1717              	.LC50:
 1718 0470 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1718      64206E6F 
 1718      74207061 
 1718      72736520 
 1718      6E657720 
 1719 049e 0000     		.align	2
 1720              	.LC51:
 1721 04a0 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1721      7274696E 
 1721      67206672 
 1721      65717565 
 1721      6E637920 
 1722 04c5 000000   		.align	2
 1723              	.LC52:
 1724 04c8 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1724      64206E6F 
 1724      74207061 
 1724      72736520 
 1724      6E657720 
 1725 04f7 00       		.align	2
 1726              	.LC53:
 1727 04f8 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1727      67207072 
 1727      696E7469 
 1727      6E672066 
 1727      72657175 
 1728 0522 0000     		.align	2
 1729              	.LC54:
 1730 0524 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1730      64206E6F 
 1730      74207061 
 1730      72736520 
 1730      6E657720 
 1731 0553 00       		.align	2
 1732              	.LC55:
 1733 0554 41707073 		.ascii	"Apps_Enabled\000"
 1733      5F456E61 
 1733      626C6564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 43


 1733      00
 1734 0561 000000   		.align	2
 1735              	.LC56:
 1736 0564 46726571 		.ascii	"Freq=\000"
 1736      3D00
 1737 056a 0000     		.align	2
 1738              	.LC57:
 1739 056c 4170705F 		.ascii	"App_LED frequency changed to: %d\015\012\000"
 1739      4C454420 
 1739      66726571 
 1739      75656E63 
 1739      79206368 
 1740 058f 00       		.align	2
 1741              	.LC58:
 1742 0590 436F756C 		.ascii	"Could not parse new App_LED frequency value.\000"
 1742      64206E6F 
 1742      74207061 
 1742      72736520 
 1742      6E657720 
 1743 05bd 000000   		.align	2
 1744              	.LC59:
 1745 05c0 4E6F2041 		.ascii	"No App_LED frequency value indicated.\000"
 1745      70705F4C 
 1745      45442066 
 1745      72657175 
 1745      656E6379 
 1746 05e6 0000     		.align	2
 1747              	.LC60:
 1748 05e8 4C657665 		.ascii	"Level_Sensor frequency changed to: %d\015\012\000"
 1748      6C5F5365 
 1748      6E736F72 
 1748      20667265 
 1748      7175656E 
 1749              		.align	2
 1750              	.LC61:
 1751 0610 436F756C 		.ascii	"Could not parse new Level_Sensor frequency value.\000"
 1751      64206E6F 
 1751      74207061 
 1751      72736520 
 1751      6E657720 
 1752 0642 0000     		.align	2
 1753              	.LC62:
 1754 0644 4E6F204C 		.ascii	"No Level_Sensor frequency value indicated.\000"
 1754      6576656C 
 1754      5F53656E 
 1754      736F7220 
 1754      66726571 
 1755 066f 00       		.align	2
 1756              	.LC63:
 1757 0670 446F776E 		.ascii	"Downstream_Level_Sensor frequency changed to: %d\015"
 1757      73747265 
 1757      616D5F4C 
 1757      6576656C 
 1757      5F53656E 
 1758 06a1 0A00     		.ascii	"\012\000"
 1759 06a3 00       		.align	2
 1760              	.LC64:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 44


 1761 06a4 436F756C 		.ascii	"Could not parse new Downstream_Level_Sensor frequen"
 1761      64206E6F 
 1761      74207061 
 1761      72736520 
 1761      6E657720 
 1762 06d7 63792076 		.ascii	"cy value.\000"
 1762      616C7565 
 1762      2E00
 1763 06e1 000000   		.align	2
 1764              	.LC65:
 1765 06e4 4E6F2044 		.ascii	"No Downstream_Level_Sensor frequency value indicate"
 1765      6F776E73 
 1765      74726561 
 1765      6D5F4C65 
 1765      76656C5F 
 1766 0717 642E00   		.ascii	"d.\000"
 1767              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1768              		.align	2
 1769              		.global	get_updated_parameters_from_malcom
 1770              		.thumb
 1771              		.thumb_func
 1772              		.type	get_updated_parameters_from_malcom, %function
 1773              	get_updated_parameters_from_malcom:
 1774              	.LFB81:
 474:modem.c       **** 
 475:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 476:modem.c       **** void get_updated_parameters_from_malcom(){
 1775              		.loc 1 476 0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 704
 1778              		@ frame_needed = 1, uses_anonymous_args = 0
 1779 0000 90B5     		push	{r4, r7, lr}
 1780              		.cfi_def_cfa_offset 12
 1781              		.cfi_offset 4, -12
 1782              		.cfi_offset 7, -8
 1783              		.cfi_offset 14, -4
 1784 0002 ADF5317D 		sub	sp, sp, #708
 1785              		.cfi_def_cfa_offset 720
 1786 0006 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 477:modem.c       ****     
 478:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
 479:modem.c       ****     char s_node_type[10];
 480:modem.c       ****     char s_sim_type[10];
 481:modem.c       ****     char s_sample_freq[10];
 482:modem.c       ****     char s_report_freq[10];
 483:modem.c       ****     char s_debug_freq[10];
 484:modem.c       ****     
 485:modem.c       ****     //apps
 486:modem.c       ****     // APP_INTERFACE
 487:modem.c       ****     char s_app_led[100];
 488:modem.c       ****     s_app_led[0] = '\0';
 1788              		.loc 1 488 0
 1789 0008 0023     		movs	r3, #0
 1790 000a 87F82032 		strb	r3, [r7, #544]
 489:modem.c       ****     
 490:modem.c       ****     char s_level_sensor[100];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 45


 491:modem.c       ****     s_level_sensor[0] = '\0';
 1791              		.loc 1 491 0
 1792 000e 07F5DE73 		add	r3, r7, #444
 1793 0012 0022     		movs	r2, #0
 1794 0014 1A70     		strb	r2, [r3]
 492:modem.c       ****     
 493:modem.c       ****     char s_down_level_sensor[100];
 494:modem.c       ****     s_down_level_sensor[0] = '\0';
 1795              		.loc 1 494 0
 1796 0016 07F5AC73 		add	r3, r7, #344
 1797 001a 0022     		movs	r2, #0
 1798 001c 1A70     		strb	r2, [r3]
 495:modem.c       ****     
 496:modem.c       ****     char s_apps_enabled[200];
 497:modem.c       ****     s_apps_enabled[0]='\0';
 1799              		.loc 1 497 0
 1800 001e 07F19003 		add	r3, r7, #144
 1801 0022 0022     		movs	r2, #0
 1802 0024 1A70     		strb	r2, [r3]
 498:modem.c       ****     
 499:modem.c       ****     s_node_type[0] = '\0';
 1803              		.loc 1 499 0
 1804 0026 0023     		movs	r3, #0
 1805 0028 87F8B432 		strb	r3, [r7, #692]
 500:modem.c       ****     s_sim_type[0] = '\0';
 1806              		.loc 1 500 0
 1807 002c 0023     		movs	r3, #0
 1808 002e 87F8A832 		strb	r3, [r7, #680]
 501:modem.c       ****     s_sample_freq[0] = '\0';
 1809              		.loc 1 501 0
 1810 0032 0023     		movs	r3, #0
 1811 0034 87F89C32 		strb	r3, [r7, #668]
 502:modem.c       ****     s_report_freq[0] = '\0';
 1812              		.loc 1 502 0
 1813 0038 0023     		movs	r3, #0
 1814 003a 87F89032 		strb	r3, [r7, #656]
 503:modem.c       ****     s_debug_freq[0] = '\0';
 1815              		.loc 1 503 0
 1816 003e 0023     		movs	r3, #0
 1817 0040 87F88432 		strb	r3, [r7, #644]
 504:modem.c       ****     
 505:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 506:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1818              		.loc 1 506 0
 1819 0044 07F52D73 		add	r3, r7, #692
 1820 0048 A14A     		ldr	r2, .L129
 1821 004a A249     		ldr	r1, .L129+4
 1822 004c A248     		ldr	r0, .L129+8
 1823 004e FFF7FEFF 		bl	extract_string
 507:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1824              		.loc 1 507 0
 1825 0052 07F52A73 		add	r3, r7, #680
 1826 0056 9E4A     		ldr	r2, .L129
 1827 0058 A049     		ldr	r1, .L129+12
 1828 005a 9F48     		ldr	r0, .L129+8
 1829 005c FFF7FEFF 		bl	extract_string
 508:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 46


 1830              		.loc 1 508 0
 1831 0060 07F52773 		add	r3, r7, #668
 1832 0064 9A4A     		ldr	r2, .L129
 1833 0066 9E49     		ldr	r1, .L129+16
 1834 0068 9B48     		ldr	r0, .L129+8
 1835 006a FFF7FEFF 		bl	extract_string
 509:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1836              		.loc 1 509 0
 1837 006e 07F52473 		add	r3, r7, #656
 1838 0072 974A     		ldr	r2, .L129
 1839 0074 9B49     		ldr	r1, .L129+20
 1840 0076 9848     		ldr	r0, .L129+8
 1841 0078 FFF7FEFF 		bl	extract_string
 510:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
 1842              		.loc 1 510 0
 1843 007c 07F52173 		add	r3, r7, #644
 1844 0080 934A     		ldr	r2, .L129
 1845 0082 9949     		ldr	r1, .L129+24
 1846 0084 9448     		ldr	r0, .L129+8
 1847 0086 FFF7FEFF 		bl	extract_string
 511:modem.c       ****     
 512:modem.c       ****     // which apps are enabled?
 513:modem.c       ****     // APP_INTERFACE
 514:modem.c       ****     if (strstr(uart_received_string,"Apps_Enabled: ")){
 1848              		.loc 1 514 0
 1849 008a 9849     		ldr	r1, .L129+28
 1850 008c 9248     		ldr	r0, .L129+8
 1851 008e FFF7FEFF 		bl	strstr
 1852 0092 0346     		mov	r3, r0
 1853 0094 002B     		cmp	r3, #0
 1854 0096 42D0     		beq	.L99
 515:modem.c       ****         extract_string(uart_received_string,"Apps_Enabled: ","\r",s_apps_enabled);
 1855              		.loc 1 515 0
 1856 0098 07F19003 		add	r3, r7, #144
 1857 009c 8C4A     		ldr	r2, .L129
 1858 009e 9349     		ldr	r1, .L129+28
 1859 00a0 8D48     		ldr	r0, .L129+8
 1860 00a2 FFF7FEFF 		bl	extract_string
 516:modem.c       ****         // if an app is in this string, turn it on
 517:modem.c       ****         if (strstr(s_apps_enabled,"Level_Sensor")!=NULL){
 1861              		.loc 1 517 0
 1862 00a6 07F19003 		add	r3, r7, #144
 1863 00aa 9149     		ldr	r1, .L129+32
 1864 00ac 1846     		mov	r0, r3
 1865 00ae FFF7FEFF 		bl	strstr
 1866 00b2 0346     		mov	r3, r0
 1867 00b4 002B     		cmp	r3, #0
 1868 00b6 03D0     		beq	.L100
 518:modem.c       ****             // if we see level sensor in the enabled list, turn it on
 519:modem.c       ****             level_sensor_enabled = 1;
 1869              		.loc 1 519 0
 1870 00b8 8E4B     		ldr	r3, .L129+36
 1871 00ba 0122     		movs	r2, #1
 1872 00bc 1A70     		strb	r2, [r3]
 1873 00be 06E0     		b	.L101
 1874              	.L100:
 520:modem.c       ****         }        
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 47


 521:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 522:modem.c       ****         else if (level_sensor_enabled){ 
 1875              		.loc 1 522 0
 1876 00c0 8C4B     		ldr	r3, .L129+36
 1877 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1878 00c4 002B     		cmp	r3, #0
 1879 00c6 02D0     		beq	.L101
 523:modem.c       ****             level_sensor_enabled = 0;
 1880              		.loc 1 523 0
 1881 00c8 8A4B     		ldr	r3, .L129+36
 1882 00ca 0022     		movs	r2, #0
 1883 00cc 1A70     		strb	r2, [r3]
 1884              	.L101:
 524:modem.c       ****         }
 525:modem.c       ****         
 526:modem.c       ****         if (strstr(s_apps_enabled,"App_LED")!=NULL){
 1885              		.loc 1 526 0
 1886 00ce 07F19003 		add	r3, r7, #144
 1887 00d2 8949     		ldr	r1, .L129+40
 1888 00d4 1846     		mov	r0, r3
 1889 00d6 FFF7FEFF 		bl	strstr
 1890 00da 0346     		mov	r3, r0
 1891 00dc 002B     		cmp	r3, #0
 1892 00de 03D0     		beq	.L102
 527:modem.c       ****             // if we this app in the enabled list, turn it on
 528:modem.c       ****             App_LED_enabled = 1;
 1893              		.loc 1 528 0
 1894 00e0 864B     		ldr	r3, .L129+44
 1895 00e2 0122     		movs	r2, #1
 1896 00e4 1A70     		strb	r2, [r3]
 1897 00e6 06E0     		b	.L103
 1898              	.L102:
 529:modem.c       ****         }
 530:modem.c       ****         else if (App_LED_enabled){
 1899              		.loc 1 530 0
 1900 00e8 844B     		ldr	r3, .L129+44
 1901 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1902 00ec 002B     		cmp	r3, #0
 1903 00ee 02D0     		beq	.L103
 531:modem.c       ****             App_LED_enabled = 0;
 1904              		.loc 1 531 0
 1905 00f0 824B     		ldr	r3, .L129+44
 1906 00f2 0022     		movs	r2, #0
 1907 00f4 1A70     		strb	r2, [r3]
 1908              	.L103:
 532:modem.c       ****         }
 533:modem.c       ****         
 534:modem.c       ****         if (strstr(s_apps_enabled,"Downstream_Level") != NULL){
 1909              		.loc 1 534 0
 1910 00f6 07F19003 		add	r3, r7, #144
 1911 00fa 8149     		ldr	r1, .L129+48
 1912 00fc 1846     		mov	r0, r3
 1913 00fe FFF7FEFF 		bl	strstr
 1914 0102 0346     		mov	r3, r0
 1915 0104 002B     		cmp	r3, #0
 1916 0106 03D0     		beq	.L104
 535:modem.c       ****             downstream_level_sensor_enabled = 1;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 48


 1917              		.loc 1 535 0
 1918 0108 7E4B     		ldr	r3, .L129+52
 1919 010a 0122     		movs	r2, #1
 1920 010c 1A70     		strb	r2, [r3]
 1921 010e 06E0     		b	.L99
 1922              	.L104:
 536:modem.c       ****         }        
 537:modem.c       ****         // if an app is currently on and not in this string, turn it off  
 538:modem.c       ****         else if (downstream_level_sensor_enabled){ 
 1923              		.loc 1 538 0
 1924 0110 7C4B     		ldr	r3, .L129+52
 1925 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1926 0114 002B     		cmp	r3, #0
 1927 0116 02D0     		beq	.L99
 539:modem.c       ****             downstream_level_sensor_enabled = 0;
 1928              		.loc 1 539 0
 1929 0118 7A4B     		ldr	r3, .L129+52
 1930 011a 0022     		movs	r2, #0
 1931 011c 1A70     		strb	r2, [r3]
 1932              	.L99:
 540:modem.c       ****         }
 541:modem.c       ****         
 542:modem.c       ****     }
 543:modem.c       **** 
 544:modem.c       ****         
 545:modem.c       ****     
 546:modem.c       ****     // update app parameters (valve open %, measuring freq, etc)
 547:modem.c       ****     // APP_INTERFACE
 548:modem.c       ****     extract_string(uart_received_string,"App_LED: ","\r",s_app_led);
 1933              		.loc 1 548 0
 1934 011e 07F50873 		add	r3, r7, #544
 1935 0122 6B4A     		ldr	r2, .L129
 1936 0124 7849     		ldr	r1, .L129+56
 1937 0126 6C48     		ldr	r0, .L129+8
 1938 0128 FFF7FEFF 		bl	extract_string
 549:modem.c       ****     App_LED_Update(s_app_led);
 1939              		.loc 1 549 0
 1940 012c 07F50873 		add	r3, r7, #544
 1941 0130 1846     		mov	r0, r3
 1942 0132 FFF7FEFF 		bl	App_LED_Update
 550:modem.c       ****     
 551:modem.c       ****     extract_string(uart_received_string,"Level_Sensor: ","\r",s_level_sensor);
 1943              		.loc 1 551 0
 1944 0136 07F5DE73 		add	r3, r7, #444
 1945 013a 654A     		ldr	r2, .L129
 1946 013c 7349     		ldr	r1, .L129+60
 1947 013e 6648     		ldr	r0, .L129+8
 1948 0140 FFF7FEFF 		bl	extract_string
 552:modem.c       ****     Level_Sensor_Update(s_level_sensor);
 1949              		.loc 1 552 0
 1950 0144 07F5DE73 		add	r3, r7, #444
 1951 0148 1846     		mov	r0, r3
 1952 014a FFF7FEFF 		bl	Level_Sensor_Update
 553:modem.c       ****     
 554:modem.c       ****     extract_string(uart_received_string,"Downstream_Level: ","\r",s_down_level_sensor);
 1953              		.loc 1 554 0
 1954 014e 07F5AC73 		add	r3, r7, #344
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 49


 1955 0152 5F4A     		ldr	r2, .L129
 1956 0154 6E49     		ldr	r1, .L129+64
 1957 0156 6048     		ldr	r0, .L129+8
 1958 0158 FFF7FEFF 		bl	extract_string
 555:modem.c       ****     downstream_Level_Sensor_Update(s_down_level_sensor);
 1959              		.loc 1 555 0
 1960 015c 07F5AC73 		add	r3, r7, #344
 1961 0160 1846     		mov	r0, r3
 1962 0162 FFF7FEFF 		bl	downstream_Level_Sensor_Update
 556:modem.c       ****     
 557:modem.c       ****     // Create variables for what is sent back from the server
 558:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq, app_led_freq, level_sensor_freq,
 559:modem.c       ****     
 560:modem.c       ****     // Scan character arrays and save values 
 561:modem.c       ****     
 562:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1963              		.loc 1 562 0
 1964 0166 07F18C02 		add	r2, r7, #140
 1965 016a 07F52D73 		add	r3, r7, #692
 1966 016e 6949     		ldr	r1, .L129+68
 1967 0170 1846     		mov	r0, r3
 1968 0172 FFF7FEFF 		bl	sscanf
 1969 0176 0346     		mov	r3, r0
 1970 0178 012B     		cmp	r3, #1
 1971 017a 0ED1     		bne	.L105
 563:modem.c       ****         updatable_parameters.node_type = node_type;
 1972              		.loc 1 563 0
 1973 017c 07F18C03 		add	r3, r7, #140
 1974 0180 1B68     		ldr	r3, [r3]
 1975 0182 DAB2     		uxtb	r2, r3
 1976 0184 644B     		ldr	r3, .L129+72
 1977 0186 1A70     		strb	r2, [r3]
 564:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1978              		.loc 1 564 0
 1979 0188 07F18C03 		add	r3, r7, #140
 1980 018c 1B68     		ldr	r3, [r3]
 1981 018e 1A46     		mov	r2, r3
 1982 0190 6249     		ldr	r1, .L129+76
 1983 0192 0020     		movs	r0, #0
 1984 0194 FFF7FEFF 		bl	printNotif
 1985 0198 03E0     		b	.L106
 1986              	.L105:
 565:modem.c       ****     }else{
 566:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1987              		.loc 1 566 0
 1988 019a 6149     		ldr	r1, .L129+80
 1989 019c 0220     		movs	r0, #2
 1990 019e FFF7FEFF 		bl	printNotif
 1991              	.L106:
 567:modem.c       ****     }
 568:modem.c       ****     
 569:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1992              		.loc 1 569 0
 1993 01a2 07F18802 		add	r2, r7, #136
 1994 01a6 07F52A73 		add	r3, r7, #680
 1995 01aa 5A49     		ldr	r1, .L129+68
 1996 01ac 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 50


 1997 01ae FFF7FEFF 		bl	sscanf
 1998 01b2 0346     		mov	r3, r0
 1999 01b4 012B     		cmp	r3, #1
 2000 01b6 12D1     		bne	.L107
 570:modem.c       ****         updatable_parameters.sim_type = sim_type;
 2001              		.loc 1 570 0
 2002 01b8 07F18803 		add	r3, r7, #136
 2003 01bc 1B68     		ldr	r3, [r3]
 2004 01be 002B     		cmp	r3, #0
 2005 01c0 14BF     		ite	ne
 2006 01c2 0123     		movne	r3, #1
 2007 01c4 0023     		moveq	r3, #0
 2008 01c6 DAB2     		uxtb	r2, r3
 2009 01c8 534B     		ldr	r3, .L129+72
 2010 01ca 5A70     		strb	r2, [r3, #1]
 571:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 2011              		.loc 1 571 0
 2012 01cc 07F18803 		add	r3, r7, #136
 2013 01d0 1B68     		ldr	r3, [r3]
 2014 01d2 1A46     		mov	r2, r3
 2015 01d4 5349     		ldr	r1, .L129+84
 2016 01d6 0020     		movs	r0, #0
 2017 01d8 FFF7FEFF 		bl	printNotif
 2018 01dc 03E0     		b	.L108
 2019              	.L107:
 572:modem.c       ****     }else{
 573:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 2020              		.loc 1 573 0
 2021 01de 5249     		ldr	r1, .L129+88
 2022 01e0 0220     		movs	r0, #2
 2023 01e2 FFF7FEFF 		bl	printNotif
 2024              	.L108:
 574:modem.c       ****     }
 575:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 2025              		.loc 1 575 0
 2026 01e6 07F18402 		add	r2, r7, #132
 2027 01ea 07F52773 		add	r3, r7, #668
 2028 01ee 4949     		ldr	r1, .L129+68
 2029 01f0 1846     		mov	r0, r3
 2030 01f2 FFF7FEFF 		bl	sscanf
 2031 01f6 0346     		mov	r3, r0
 2032 01f8 012B     		cmp	r3, #1
 2033 01fa 1DD1     		bne	.L109
 576:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 2034              		.loc 1 576 0
 2035 01fc 07F18403 		add	r3, r7, #132
 2036 0200 1B68     		ldr	r3, [r3]
 2037 0202 DAB2     		uxtb	r2, r3
 2038 0204 444B     		ldr	r3, .L129+72
 2039 0206 9A70     		strb	r2, [r3, #2]
 577:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 578:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 2040              		.loc 1 578 0
 2041 0208 434B     		ldr	r3, .L129+72
 2042 020a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2043 020c 99B2     		uxth	r1, r3
 2044 020e 474C     		ldr	r4, .L129+92
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 51


 2045 0210 3846     		mov	r0, r7
 2046 0212 0723     		movs	r3, #7
 2047 0214 0122     		movs	r2, #1
 2048 0216 FFF7FEFF 		bl	CreateAlarm
 2049 021a 3A46     		mov	r2, r7
 2050 021c 2346     		mov	r3, r4
 2051 021e 1168     		ldr	r1, [r2]	@ unaligned
 2052 0220 1960     		str	r1, [r3]	@ unaligned
 2053 0222 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2054 0224 9A80     		strh	r2, [r3, #4]	@ unaligned
 579:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 2055              		.loc 1 579 0
 2056 0226 07F18403 		add	r3, r7, #132
 2057 022a 1B68     		ldr	r3, [r3]
 2058 022c 1A46     		mov	r2, r3
 2059 022e 4049     		ldr	r1, .L129+96
 2060 0230 0020     		movs	r0, #0
 2061 0232 FFF7FEFF 		bl	printNotif
 2062 0236 03E0     		b	.L110
 2063              	.L109:
 580:modem.c       ****     }else{
 581:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 2064              		.loc 1 581 0
 2065 0238 3E49     		ldr	r1, .L129+100
 2066 023a 0220     		movs	r0, #2
 2067 023c FFF7FEFF 		bl	printNotif
 2068              	.L110:
 582:modem.c       ****     }
 583:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 2069              		.loc 1 583 0
 2070 0240 07F18002 		add	r2, r7, #128
 2071 0244 07F52473 		add	r3, r7, #656
 2072 0248 3249     		ldr	r1, .L129+68
 2073 024a 1846     		mov	r0, r3
 2074 024c FFF7FEFF 		bl	sscanf
 2075 0250 0346     		mov	r3, r0
 2076 0252 012B     		cmp	r3, #1
 2077 0254 1DD1     		bne	.L111
 584:modem.c       ****         updatable_parameters.sync_time = report_freq;
 2078              		.loc 1 584 0
 2079 0256 07F18003 		add	r3, r7, #128
 2080 025a 1B68     		ldr	r3, [r3]
 2081 025c DAB2     		uxtb	r2, r3
 2082 025e 2E4B     		ldr	r3, .L129+72
 2083 0260 DA70     		strb	r2, [r3, #3]
 585:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 586:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 2084              		.loc 1 586 0
 2085 0262 2D4B     		ldr	r3, .L129+72
 2086 0264 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2087 0266 99B2     		uxth	r1, r3
 2088 0268 334C     		ldr	r4, .L129+104
 2089 026a 3846     		mov	r0, r7
 2090 026c 0723     		movs	r3, #7
 2091 026e 0122     		movs	r2, #1
 2092 0270 FFF7FEFF 		bl	CreateAlarm
 2093 0274 3A46     		mov	r2, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 52


 2094 0276 2346     		mov	r3, r4
 2095 0278 1168     		ldr	r1, [r2]	@ unaligned
 2096 027a 1960     		str	r1, [r3]	@ unaligned
 2097 027c 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2098 027e 9A80     		strh	r2, [r3, #4]	@ unaligned
 587:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 2099              		.loc 1 587 0
 2100 0280 07F18003 		add	r3, r7, #128
 2101 0284 1B68     		ldr	r3, [r3]
 2102 0286 1A46     		mov	r2, r3
 2103 0288 2C49     		ldr	r1, .L129+108
 2104 028a 0020     		movs	r0, #0
 2105 028c FFF7FEFF 		bl	printNotif
 2106 0290 03E0     		b	.L112
 2107              	.L111:
 588:modem.c       ****         }else{
 589:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 2108              		.loc 1 589 0
 2109 0292 2B49     		ldr	r1, .L129+112
 2110 0294 0220     		movs	r0, #2
 2111 0296 FFF7FEFF 		bl	printNotif
 2112              	.L112:
 590:modem.c       ****     }
 591:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 2113              		.loc 1 591 0
 2114 029a 07F17C02 		add	r2, r7, #124
 2115 029e 07F52173 		add	r3, r7, #644
 2116 02a2 1C49     		ldr	r1, .L129+68
 2117 02a4 1846     		mov	r0, r3
 2118 02a6 FFF7FEFF 		bl	sscanf
 2119 02aa 0346     		mov	r3, r0
 2120 02ac 012B     		cmp	r3, #1
 2121 02ae 4BD1     		bne	.L113
 592:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 2122              		.loc 1 592 0
 2123 02b0 07F17C03 		add	r3, r7, #124
 2124 02b4 1B68     		ldr	r3, [r3]
 2125 02b6 DAB2     		uxtb	r2, r3
 2126 02b8 174B     		ldr	r3, .L129+72
 2127 02ba 1A71     		strb	r2, [r3, #4]
 593:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 2128              		.loc 1 593 0
 2129 02bc 07F17C03 		add	r3, r7, #124
 2130 02c0 1B68     		ldr	r3, [r3]
 2131 02c2 1A46     		mov	r2, r3
 2132 02c4 1F49     		ldr	r1, .L129+116
 2133 02c6 0020     		movs	r0, #0
 2134 02c8 FFF7FEFF 		bl	printNotif
 2135 02cc 40E0     		b	.L114
 2136              	.L130:
 2137 02ce 00BF     		.align	2
 2138              	.L129:
 2139 02d0 88020000 		.word	.LC21
 2140 02d4 24030000 		.word	.LC32
 2141 02d8 00000000 		.word	uart_received_string
 2142 02dc 30030000 		.word	.LC33
 2143 02e0 3C030000 		.word	.LC34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 53


 2144 02e4 4C030000 		.word	.LC35
 2145 02e8 5C030000 		.word	.LC36
 2146 02ec 6C030000 		.word	.LC37
 2147 02f0 7C030000 		.word	.LC38
 2148 02f4 00000000 		.word	level_sensor_enabled
 2149 02f8 8C030000 		.word	.LC39
 2150 02fc 00000000 		.word	App_LED_enabled
 2151 0300 94030000 		.word	.LC40
 2152 0304 00000000 		.word	downstream_level_sensor_enabled
 2153 0308 A8030000 		.word	.LC41
 2154 030c B4030000 		.word	.LC42
 2155 0310 C4030000 		.word	.LC43
 2156 0314 D8030000 		.word	.LC44
 2157 0318 00000000 		.word	updatable_parameters
 2158 031c DC030000 		.word	.LC45
 2159 0320 F8030000 		.word	.LC46
 2160 0324 14040000 		.word	.LC47
 2161 0328 30040000 		.word	.LC48
 2162 032c 00000000 		.word	alarmMeasure
 2163 0330 4C040000 		.word	.LC49
 2164 0334 70040000 		.word	.LC50
 2165 0338 00000000 		.word	alarmSync
 2166 033c A0040000 		.word	.LC51
 2167 0340 C8040000 		.word	.LC52
 2168 0344 F8040000 		.word	.LC53
 2169              	.L113:
 594:modem.c       ****     }else{
 595:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 2170              		.loc 1 595 0
 2171 0348 8949     		ldr	r1, .L131
 2172 034a 0220     		movs	r0, #2
 2173 034c FFF7FEFF 		bl	printNotif
 2174              	.L114:
 596:modem.c       ****     }
 597:modem.c       ****     
 598:modem.c       ****     // app alarm frequency updates
 599:modem.c       ****     // APP_INTERFACE
 600:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 2175              		.loc 1 600 0
 2176 0350 884B     		ldr	r3, .L131+4
 2177 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2178 0354 042B     		cmp	r3, #4
 2179 0356 40F00681 		bne	.L128
 2180              	.LBB9:
 601:modem.c       **** 
 602:modem.c       ****         // tell influxdb what we've got running (mostly for development)
 603:modem.c       ****         pushData("Apps_Enabled",s_apps_enabled,getTimeStamp());
 2181              		.loc 1 603 0
 2182 035a FFF7FEFF 		bl	getTimeStamp
 2183 035e 0246     		mov	r2, r0
 2184 0360 07F19003 		add	r3, r7, #144
 2185 0364 1946     		mov	r1, r3
 2186 0366 8448     		ldr	r0, .L131+8
 2187 0368 FFF7FEFF 		bl	pushData
 604:modem.c       ****       
 605:modem.c       ****         char temp[100];
 606:modem.c       ****         temp[0] = '\0';
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 54


 2188              		.loc 1 606 0
 2189 036c 07F10C03 		add	r3, r7, #12
 2190 0370 0022     		movs	r2, #0
 2191 0372 1A70     		strb	r2, [r3]
 607:modem.c       ****         if(App_LED_enabled){ //if you're not enabled, don't talk
 2192              		.loc 1 607 0
 2193 0374 814B     		ldr	r3, .L131+12
 2194 0376 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2195 0378 002B     		cmp	r3, #0
 2196 037a 4ED0     		beq	.L116
 608:modem.c       ****             if (strstr(s_app_led,"Freq=")!=NULL){
 2197              		.loc 1 608 0
 2198 037c 07F50873 		add	r3, r7, #544
 2199 0380 7F49     		ldr	r1, .L131+16
 2200 0382 1846     		mov	r0, r3
 2201 0384 FFF7FEFF 		bl	strstr
 2202 0388 0346     		mov	r3, r0
 2203 038a 002B     		cmp	r3, #0
 2204 038c 41D0     		beq	.L117
 609:modem.c       ****                 temp[0] = '\0';
 2205              		.loc 1 609 0
 2206 038e 07F10C03 		add	r3, r7, #12
 2207 0392 0022     		movs	r2, #0
 2208 0394 1A70     		strb	r2, [r3]
 610:modem.c       ****                 strcpy(temp,s_app_led);
 2209              		.loc 1 610 0
 2210 0396 07F50872 		add	r2, r7, #544
 2211 039a 07F10C03 		add	r3, r7, #12
 2212 039e 1146     		mov	r1, r2
 2213 03a0 1846     		mov	r0, r3
 2214 03a2 FFF7FEFF 		bl	strcpy
 611:modem.c       ****                 extract_string(temp,"Freq=","\r",s_app_led); // grab level app frequency
 2215              		.loc 1 611 0
 2216 03a6 07F50873 		add	r3, r7, #544
 2217 03aa 07F10C00 		add	r0, r7, #12
 2218 03ae 754A     		ldr	r2, .L131+20
 2219 03b0 7349     		ldr	r1, .L131+16
 2220 03b2 FFF7FEFF 		bl	extract_string
 612:modem.c       ****                 if(sscanf(s_app_led, "%d", &app_led_freq)==1){
 2221              		.loc 1 612 0
 2222 03b6 07F17802 		add	r2, r7, #120
 2223 03ba 07F50873 		add	r3, r7, #544
 2224 03be 7249     		ldr	r1, .L131+24
 2225 03c0 1846     		mov	r0, r3
 2226 03c2 FFF7FEFF 		bl	sscanf
 2227 03c6 0346     		mov	r3, r0
 2228 03c8 012B     		cmp	r3, #1
 2229 03ca 1DD1     		bne	.L118
 613:modem.c       ****                     updatable_parameters.App_LED_freq = app_led_freq;
 2230              		.loc 1 613 0
 2231 03cc 07F17803 		add	r3, r7, #120
 2232 03d0 1B68     		ldr	r3, [r3]
 2233 03d2 DAB2     		uxtb	r2, r3
 2234 03d4 674B     		ldr	r3, .L131+4
 2235 03d6 5A71     		strb	r2, [r3, #5]
 614:modem.c       ****                     // update the alarm to the new frequency
 615:modem.c       ****                     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,A
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 55


 2236              		.loc 1 615 0
 2237 03d8 664B     		ldr	r3, .L131+4
 2238 03da 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 2239 03dc 99B2     		uxth	r1, r3
 2240 03de 6B4C     		ldr	r4, .L131+28
 2241 03e0 3846     		mov	r0, r7
 2242 03e2 0723     		movs	r3, #7
 2243 03e4 0122     		movs	r2, #1
 2244 03e6 FFF7FEFF 		bl	CreateAlarm
 2245 03ea 3A46     		mov	r2, r7
 2246 03ec 2346     		mov	r3, r4
 2247 03ee 1168     		ldr	r1, [r2]	@ unaligned
 2248 03f0 1960     		str	r1, [r3]	@ unaligned
 2249 03f2 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2250 03f4 9A80     		strh	r2, [r3, #4]	@ unaligned
 616:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "App_LED frequency changed to: %d\r\n", app_led_fr
 2251              		.loc 1 616 0
 2252 03f6 07F17803 		add	r3, r7, #120
 2253 03fa 1B68     		ldr	r3, [r3]
 2254 03fc 1A46     		mov	r2, r3
 2255 03fe 6449     		ldr	r1, .L131+32
 2256 0400 0020     		movs	r0, #0
 2257 0402 FFF7FEFF 		bl	printNotif
 2258 0406 08E0     		b	.L116
 2259              	.L118:
 617:modem.c       ****                 } 
 618:modem.c       ****                 else{
 619:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new App_LED frequency value.");
 2260              		.loc 1 619 0
 2261 0408 6249     		ldr	r1, .L131+36
 2262 040a 0220     		movs	r0, #2
 2263 040c FFF7FEFF 		bl	printNotif
 2264 0410 03E0     		b	.L116
 2265              	.L117:
 620:modem.c       ****                 }
 621:modem.c       ****             }
 622:modem.c       ****             else{
 623:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No App_LED frequency value indicated.");
 2266              		.loc 1 623 0
 2267 0412 6149     		ldr	r1, .L131+40
 2268 0414 0220     		movs	r0, #2
 2269 0416 FFF7FEFF 		bl	printNotif
 2270              	.L116:
 624:modem.c       ****             }
 625:modem.c       ****         }
 626:modem.c       ****         if(level_sensor_enabled){
 2271              		.loc 1 626 0
 2272 041a 604B     		ldr	r3, .L131+44
 2273 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2274 041e 002B     		cmp	r3, #0
 2275 0420 4ED0     		beq	.L120
 627:modem.c       ****             if (strstr(s_level_sensor,"Freq=")!=NULL){
 2276              		.loc 1 627 0
 2277 0422 07F5DE73 		add	r3, r7, #444
 2278 0426 5649     		ldr	r1, .L131+16
 2279 0428 1846     		mov	r0, r3
 2280 042a FFF7FEFF 		bl	strstr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 56


 2281 042e 0346     		mov	r3, r0
 2282 0430 002B     		cmp	r3, #0
 2283 0432 41D0     		beq	.L121
 628:modem.c       ****                 temp[0] = '\0';
 2284              		.loc 1 628 0
 2285 0434 07F10C03 		add	r3, r7, #12
 2286 0438 0022     		movs	r2, #0
 2287 043a 1A70     		strb	r2, [r3]
 629:modem.c       ****                 strcpy(temp,s_level_sensor);
 2288              		.loc 1 629 0
 2289 043c 07F5DE72 		add	r2, r7, #444
 2290 0440 07F10C03 		add	r3, r7, #12
 2291 0444 1146     		mov	r1, r2
 2292 0446 1846     		mov	r0, r3
 2293 0448 FFF7FEFF 		bl	strcpy
 630:modem.c       ****                 extract_string(temp,"Freq=","\r",s_level_sensor); // grab level app frequency
 2294              		.loc 1 630 0
 2295 044c 07F5DE73 		add	r3, r7, #444
 2296 0450 07F10C00 		add	r0, r7, #12
 2297 0454 4B4A     		ldr	r2, .L131+20
 2298 0456 4A49     		ldr	r1, .L131+16
 2299 0458 FFF7FEFF 		bl	extract_string
 631:modem.c       ****                 if(sscanf(s_level_sensor, "%d", &level_sensor_freq)==1){
 2300              		.loc 1 631 0
 2301 045c 07F17402 		add	r2, r7, #116
 2302 0460 07F5DE73 		add	r3, r7, #444
 2303 0464 4849     		ldr	r1, .L131+24
 2304 0466 1846     		mov	r0, r3
 2305 0468 FFF7FEFF 		bl	sscanf
 2306 046c 0346     		mov	r3, r0
 2307 046e 012B     		cmp	r3, #1
 2308 0470 1DD1     		bne	.L122
 632:modem.c       ****                     updatable_parameters.Level_Sensor_freq = level_sensor_freq;
 2309              		.loc 1 632 0
 2310 0472 07F17403 		add	r3, r7, #116
 2311 0476 1B68     		ldr	r3, [r3]
 2312 0478 DAB2     		uxtb	r2, r3
 2313 047a 3E4B     		ldr	r3, .L131+4
 2314 047c 9A71     		strb	r2, [r3, #6]
 633:modem.c       ****                     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYP
 2315              		.loc 1 633 0
 2316 047e 3D4B     		ldr	r3, .L131+4
 2317 0480 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2318 0482 99B2     		uxth	r1, r3
 2319 0484 464C     		ldr	r4, .L131+48
 2320 0486 3846     		mov	r0, r7
 2321 0488 0723     		movs	r3, #7
 2322 048a 0122     		movs	r2, #1
 2323 048c FFF7FEFF 		bl	CreateAlarm
 2324 0490 3A46     		mov	r2, r7
 2325 0492 2346     		mov	r3, r4
 2326 0494 1168     		ldr	r1, [r2]	@ unaligned
 2327 0496 1960     		str	r1, [r3]	@ unaligned
 2328 0498 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2329 049a 9A80     		strh	r2, [r3, #4]	@ unaligned
 634:modem.c       **** 
 635:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Level_Sensor frequency changed to: %d\r\n", app_l
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 57


 2330              		.loc 1 635 0
 2331 049c 07F17803 		add	r3, r7, #120
 2332 04a0 1B68     		ldr	r3, [r3]
 2333 04a2 1A46     		mov	r2, r3
 2334 04a4 3F49     		ldr	r1, .L131+52
 2335 04a6 0020     		movs	r0, #0
 2336 04a8 FFF7FEFF 		bl	printNotif
 2337 04ac 08E0     		b	.L120
 2338              	.L122:
 636:modem.c       ****                 } 
 637:modem.c       ****                 else{
 638:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Level_Sensor frequency value."
 2339              		.loc 1 638 0
 2340 04ae 3E49     		ldr	r1, .L131+56
 2341 04b0 0220     		movs	r0, #2
 2342 04b2 FFF7FEFF 		bl	printNotif
 2343 04b6 03E0     		b	.L120
 2344              	.L121:
 639:modem.c       ****                 }
 640:modem.c       ****             }
 641:modem.c       ****             else{
 642:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Level_Sensor frequency value indicated.");
 2345              		.loc 1 642 0
 2346 04b8 3C49     		ldr	r1, .L131+60
 2347 04ba 0220     		movs	r0, #2
 2348 04bc FFF7FEFF 		bl	printNotif
 2349              	.L120:
 643:modem.c       ****             }
 644:modem.c       ****         }
 645:modem.c       ****         if(downstream_level_sensor_enabled){ 
 2350              		.loc 1 645 0
 2351 04c0 3B4B     		ldr	r3, .L131+64
 2352 04c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2353 04c4 002B     		cmp	r3, #0
 2354 04c6 4ED0     		beq	.L128
 646:modem.c       ****             if (strstr(s_down_level_sensor,"Freq=") !=NULL){
 2355              		.loc 1 646 0
 2356 04c8 07F5AC73 		add	r3, r7, #344
 2357 04cc 2C49     		ldr	r1, .L131+16
 2358 04ce 1846     		mov	r0, r3
 2359 04d0 FFF7FEFF 		bl	strstr
 2360 04d4 0346     		mov	r3, r0
 2361 04d6 002B     		cmp	r3, #0
 2362 04d8 41D0     		beq	.L125
 647:modem.c       ****                 temp[0] = '\0';
 2363              		.loc 1 647 0
 2364 04da 07F10C03 		add	r3, r7, #12
 2365 04de 0022     		movs	r2, #0
 2366 04e0 1A70     		strb	r2, [r3]
 648:modem.c       ****                 strcpy(temp,s_down_level_sensor);
 2367              		.loc 1 648 0
 2368 04e2 07F5AC72 		add	r2, r7, #344
 2369 04e6 07F10C03 		add	r3, r7, #12
 2370 04ea 1146     		mov	r1, r2
 2371 04ec 1846     		mov	r0, r3
 2372 04ee FFF7FEFF 		bl	strcpy
 649:modem.c       ****                 extract_string(temp,"Freq=","\r",s_down_level_sensor); // grab level app frequency
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 58


 2373              		.loc 1 649 0
 2374 04f2 07F5AC73 		add	r3, r7, #344
 2375 04f6 07F10C00 		add	r0, r7, #12
 2376 04fa 224A     		ldr	r2, .L131+20
 2377 04fc 2049     		ldr	r1, .L131+16
 2378 04fe FFF7FEFF 		bl	extract_string
 650:modem.c       ****                 if(sscanf(s_down_level_sensor, "%d", &down_level_freq)==1){
 2379              		.loc 1 650 0
 2380 0502 07F17002 		add	r2, r7, #112
 2381 0506 07F5AC73 		add	r3, r7, #344
 2382 050a 1F49     		ldr	r1, .L131+24
 2383 050c 1846     		mov	r0, r3
 2384 050e FFF7FEFF 		bl	sscanf
 2385 0512 0346     		mov	r3, r0
 2386 0514 012B     		cmp	r3, #1
 2387 0516 1DD1     		bne	.L126
 651:modem.c       ****                     updatable_parameters.Downstream_Level_Sensor_freq = down_level_freq;
 2388              		.loc 1 651 0
 2389 0518 07F17003 		add	r3, r7, #112
 2390 051c 1B68     		ldr	r3, [r3]
 2391 051e DAB2     		uxtb	r2, r3
 2392 0520 144B     		ldr	r3, .L131+4
 2393 0522 DA71     		strb	r2, [r3, #7]
 652:modem.c       ****                     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_
 2394              		.loc 1 652 0
 2395 0524 134B     		ldr	r3, .L131+4
 2396 0526 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2397 0528 99B2     		uxth	r1, r3
 2398 052a 224C     		ldr	r4, .L131+68
 2399 052c 3846     		mov	r0, r7
 2400 052e 0723     		movs	r3, #7
 2401 0530 0122     		movs	r2, #1
 2402 0532 FFF7FEFF 		bl	CreateAlarm
 2403 0536 3A46     		mov	r2, r7
 2404 0538 2346     		mov	r3, r4
 2405 053a 1168     		ldr	r1, [r2]	@ unaligned
 2406 053c 1960     		str	r1, [r3]	@ unaligned
 2407 053e 9288     		ldrh	r2, [r2, #4]	@ unaligned
 2408 0540 9A80     		strh	r2, [r3, #4]	@ unaligned
 653:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT, "Downstream_Level_Sensor frequency changed to: %d\
 2409              		.loc 1 653 0
 2410 0542 07F17803 		add	r3, r7, #120
 2411 0546 1B68     		ldr	r3, [r3]
 2412 0548 1A46     		mov	r2, r3
 2413 054a 1B49     		ldr	r1, .L131+72
 2414 054c 0020     		movs	r0, #0
 2415 054e FFF7FEFF 		bl	printNotif
 2416              	.LBE9:
 654:modem.c       ****                 } 
 655:modem.c       ****                 else{
 656:modem.c       ****                     printNotif(NOTIF_TYPE_ERROR,"Could not parse new Downstream_Level_Sensor freque
 657:modem.c       ****                 }
 658:modem.c       ****             }
 659:modem.c       ****             else{
 660:modem.c       ****                 printNotif(NOTIF_TYPE_ERROR,"No Downstream_Level_Sensor frequency value indicated."
 661:modem.c       ****             }
 662:modem.c       ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 59


 663:modem.c       ****     }
 664:modem.c       ****         
 665:modem.c       **** 
 666:modem.c       ****         
 667:modem.c       **** }
 2417              		.loc 1 667 0
 2418 0552 08E0     		b	.L128
 2419              	.L126:
 2420              	.LBB10:
 656:modem.c       ****                 }
 2421              		.loc 1 656 0
 2422 0554 1949     		ldr	r1, .L131+76
 2423 0556 0220     		movs	r0, #2
 2424 0558 FFF7FEFF 		bl	printNotif
 2425              	.LBE10:
 2426              		.loc 1 667 0
 2427 055c 03E0     		b	.L128
 2428              	.L125:
 2429              	.LBB11:
 660:modem.c       ****             }
 2430              		.loc 1 660 0
 2431 055e 1849     		ldr	r1, .L131+80
 2432 0560 0220     		movs	r0, #2
 2433 0562 FFF7FEFF 		bl	printNotif
 2434              	.L128:
 2435              	.LBE11:
 2436              		.loc 1 667 0
 2437 0566 00BF     		nop
 2438 0568 07F53177 		add	r7, r7, #708
 2439              		.cfi_def_cfa_offset 12
 2440 056c BD46     		mov	sp, r7
 2441              		.cfi_def_cfa_register 13
 2442              		@ sp needed
 2443 056e 90BD     		pop	{r4, r7, pc}
 2444              	.L132:
 2445              		.align	2
 2446              	.L131:
 2447 0570 24050000 		.word	.LC54
 2448 0574 00000000 		.word	updatable_parameters
 2449 0578 54050000 		.word	.LC55
 2450 057c 00000000 		.word	App_LED_enabled
 2451 0580 64050000 		.word	.LC56
 2452 0584 88020000 		.word	.LC21
 2453 0588 D8030000 		.word	.LC44
 2454 058c 00000000 		.word	alarmAppLED
 2455 0590 6C050000 		.word	.LC57
 2456 0594 90050000 		.word	.LC58
 2457 0598 C0050000 		.word	.LC59
 2458 059c 00000000 		.word	level_sensor_enabled
 2459 05a0 00000000 		.word	alarmLevelSensor
 2460 05a4 E8050000 		.word	.LC60
 2461 05a8 10060000 		.word	.LC61
 2462 05ac 44060000 		.word	.LC62
 2463 05b0 00000000 		.word	downstream_level_sensor_enabled
 2464 05b4 00000000 		.word	alarmDownstreamLevelSensor
 2465 05b8 70060000 		.word	.LC63
 2466 05bc A4060000 		.word	.LC64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 60


 2467 05c0 E4060000 		.word	.LC65
 2468              		.cfi_endproc
 2469              	.LFE81:
 2470              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2471              		.section	.rodata
 2472 071a 0000     		.align	2
 2473              	.LC66:
 2474 071c 41542343 		.ascii	"AT#CGMM\015\000"
 2474      474D4D0D 
 2474      00
 2475 0725 000000   		.align	2
 2476              	.LC67:
 2477 0728 4D6F6465 		.ascii	"Modem Model: %s\000"
 2477      6D204D6F 
 2477      64656C3A 
 2477      20257300 
 2478              		.align	2
 2479              	.LC68:
 2480 0738 41542343 		.ascii	"AT#CCID\015\000"
 2480      4349440D 
 2480      00
 2481 0741 000000   		.align	2
 2482              	.LC69:
 2483 0744 53494D20 		.ascii	"SIM ID: %s\000"
 2483      49443A20 
 2483      257300
 2484 074f 00       		.align	2
 2485              	.LC70:
 2486 0750 41542B43 		.ascii	"AT+CGSN\015\000"
 2486      47534E0D 
 2486      00
 2487 0759 000000   		.align	2
 2488              	.LC71:
 2489 075c 494D4549 		.ascii	"IMEI: %s\000"
 2489      3A202573 
 2489      00
 2490 0765 000000   		.align	2
 2491              	.LC72:
 2492 0768 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2492      4744434F 
 2492      4E543D31 
 2492      2C224950 
 2492      222C2277 
 2493 0791 00       		.ascii	"\000"
 2494 0792 0000     		.align	2
 2495              	.LC73:
 2496 0794 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2496      4744434F 
 2496      4E543D31 
 2496      2C224950 
 2496      222C2273 
 2497              		.align	2
 2498              	.LC74:
 2499 07b0 41542B43 		.ascii	"AT+CFUN?\015\000"
 2499      46554E3F 
 2499      0D00
 2500 07ba 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 61


 2501              	.LC75:
 2502 07bc 4346554E 		.ascii	"CFUN: %s\000"
 2502      3A202573 
 2502      00
 2503 07c5 000000   		.align	2
 2504              	.LC76:
 2505 07c8 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2505      46554E3D 
 2505      310D00
 2506              		.section	.text.modem_configure_settings,"ax",%progbits
 2507              		.align	2
 2508              		.global	modem_configure_settings
 2509              		.thumb
 2510              		.thumb_func
 2511              		.type	modem_configure_settings, %function
 2512              	modem_configure_settings:
 2513              	.LFB82:
 668:modem.c       ****     
 669:modem.c       **** // Configure the modem settings
 670:modem.c       **** void modem_configure_settings(){
 2514              		.loc 1 670 0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 16
 2517              		@ frame_needed = 1, uses_anonymous_args = 0
 2518 0000 80B5     		push	{r7, lr}
 2519              		.cfi_def_cfa_offset 8
 2520              		.cfi_offset 7, -8
 2521              		.cfi_offset 14, -4
 2522 0002 84B0     		sub	sp, sp, #16
 2523              		.cfi_def_cfa_offset 24
 2524 0004 00AF     		add	r7, sp, #0
 2525              		.cfi_def_cfa_register 7
 671:modem.c       ****     
 672:modem.c       ****     // Save/print modem model ID number
 673:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2526              		.loc 1 673 0
 2527 0006 454B     		ldr	r3, .L142
 2528 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2529 000a 002B     		cmp	r3, #0
 2530 000c 13D1     		bne	.L134
 674:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 675:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2531              		.loc 1 675 0
 2532 000e 4FF4FA62 		mov	r2, #2000
 2533 0012 4349     		ldr	r1, .L142+4
 2534 0014 4348     		ldr	r0, .L142+8
 2535 0016 FFF7FEFF 		bl	at_write_command
 2536 001a 0346     		mov	r3, r0
 2537 001c 002B     		cmp	r3, #0
 2538 001e 0AD0     		beq	.L134
 676:modem.c       ****             // Extract modem model ID number string from the UART
 677:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2539              		.loc 1 677 0
 2540 0020 414B     		ldr	r3, .L142+12
 2541 0022 424A     		ldr	r2, .L142+16
 2542 0024 4249     		ldr	r1, .L142+20
 2543 0026 4348     		ldr	r0, .L142+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 62


 2544 0028 FFF7FEFF 		bl	extract_string
 678:modem.c       ****             // Print modem model ID number
 679:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2545              		.loc 1 679 0
 2546 002c 3E4A     		ldr	r2, .L142+12
 2547 002e 4249     		ldr	r1, .L142+28
 2548 0030 0020     		movs	r0, #0
 2549 0032 FFF7FEFF 		bl	printNotif
 2550              	.L134:
 680:modem.c       ****         }
 681:modem.c       ****     }
 682:modem.c       ****     
 683:modem.c       ****    // Save/print SIM-card ID
 684:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2551              		.loc 1 684 0
 2552 0036 394B     		ldr	r3, .L142
 2553 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2554 003a 002B     		cmp	r3, #0
 2555 003c 13D1     		bne	.L135
 685:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 686:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2556              		.loc 1 686 0
 2557 003e 4FF4FA62 		mov	r2, #2000
 2558 0042 3749     		ldr	r1, .L142+4
 2559 0044 3D48     		ldr	r0, .L142+32
 2560 0046 FFF7FEFF 		bl	at_write_command
 2561 004a 0346     		mov	r3, r0
 2562 004c 002B     		cmp	r3, #0
 2563 004e 0AD0     		beq	.L135
 687:modem.c       ****             // Extract SIM-card ID string from the UART
 688:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2564              		.loc 1 688 0
 2565 0050 324B     		ldr	r3, .L142
 2566 0052 364A     		ldr	r2, .L142+16
 2567 0054 3649     		ldr	r1, .L142+20
 2568 0056 3748     		ldr	r0, .L142+24
 2569 0058 FFF7FEFF 		bl	extract_string
 689:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2570              		.loc 1 689 0
 2571 005c 2F4A     		ldr	r2, .L142
 2572 005e 3849     		ldr	r1, .L142+36
 2573 0060 0020     		movs	r0, #0
 2574 0062 FFF7FEFF 		bl	printNotif
 2575              	.L135:
 690:modem.c       ****         }
 691:modem.c       ****    }
 692:modem.c       **** 
 693:modem.c       ****     // Save/print modem IMEI
 694:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2576              		.loc 1 694 0
 2577 0066 2D4B     		ldr	r3, .L142
 2578 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2579 006c 002B     		cmp	r3, #0
 2580 006e 13D1     		bne	.L136
 695:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 696:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2581              		.loc 1 696 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 63


 2582 0070 4FF4FA62 		mov	r2, #2000
 2583 0074 2A49     		ldr	r1, .L142+4
 2584 0076 3348     		ldr	r0, .L142+40
 2585 0078 FFF7FEFF 		bl	at_write_command
 2586 007c 0346     		mov	r3, r0
 2587 007e 002B     		cmp	r3, #0
 2588 0080 0AD0     		beq	.L136
 697:modem.c       ****             // Extract modem IMEI number string from the UART
 698:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2589              		.loc 1 698 0
 2590 0082 314B     		ldr	r3, .L142+44
 2591 0084 294A     		ldr	r2, .L142+16
 2592 0086 2A49     		ldr	r1, .L142+20
 2593 0088 2A48     		ldr	r0, .L142+24
 2594 008a FFF7FEFF 		bl	extract_string
 699:modem.c       ****             // Print modem IMEI number
 700:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2595              		.loc 1 700 0
 2596 008e 2E4A     		ldr	r2, .L142+44
 2597 0090 2E49     		ldr	r1, .L142+48
 2598 0092 0020     		movs	r0, #0
 2599 0094 FFF7FEFF 		bl	printNotif
 2600              	.L136:
 701:modem.c       ****         } 
 702:modem.c       ****     }
 703:modem.c       ****     
 704:modem.c       ****     // Configure protocol and cellular end point
 705:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 706:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2601              		.loc 1 706 0
 2602 0098 2D4B     		ldr	r3, .L142+52
 2603 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2604 009c 83F00103 		eor	r3, r3, #1
 2605 00a0 DBB2     		uxtb	r3, r3
 2606 00a2 002B     		cmp	r3, #0
 2607 00a4 06D0     		beq	.L137
 707:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2608              		.loc 1 707 0
 2609 00a6 4FF4FA62 		mov	r2, #2000
 2610 00aa 1D49     		ldr	r1, .L142+4
 2611 00ac 2948     		ldr	r0, .L142+56
 2612 00ae FFF7FEFF 		bl	at_write_command
 2613 00b2 09E0     		b	.L138
 2614              	.L137:
 708:modem.c       ****     
 709:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
 2615              		.loc 1 709 0
 2616 00b4 264B     		ldr	r3, .L142+52
 2617 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2618 00b8 002B     		cmp	r3, #0
 2619 00ba 05D0     		beq	.L138
 710:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2620              		.loc 1 710 0
 2621 00bc 4FF4FA62 		mov	r2, #2000
 2622 00c0 1749     		ldr	r1, .L142+4
 2623 00c2 2548     		ldr	r0, .L142+60
 2624 00c4 FFF7FEFF 		bl	at_write_command
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 64


 2625              	.L138:
 711:modem.c       ****     }
 712:modem.c       ****     
 713:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 714:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 715:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2626              		.loc 1 715 0
 2627 00c8 4FF4FA62 		mov	r2, #2000
 2628 00cc 1449     		ldr	r1, .L142+4
 2629 00ce 2348     		ldr	r0, .L142+64
 2630 00d0 FFF7FEFF 		bl	at_write_command
 2631 00d4 0346     		mov	r3, r0
 2632 00d6 002B     		cmp	r3, #0
 2633 00d8 1BD0     		beq	.L141
 2634              	.LBB12:
 716:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 717:modem.c       ****         CFUN[0] = '\0';
 2635              		.loc 1 717 0
 2636 00da 0023     		movs	r3, #0
 2637 00dc 3B71     		strb	r3, [r7, #4]
 718:modem.c       ****         // Extract UART string recieved from the modem
 719:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2638              		.loc 1 719 0
 2639 00de 3B1D     		adds	r3, r7, #4
 2640 00e0 124A     		ldr	r2, .L142+16
 2641 00e2 1349     		ldr	r1, .L142+20
 2642 00e4 1348     		ldr	r0, .L142+24
 2643 00e6 FFF7FEFF 		bl	extract_string
 720:modem.c       ****         // Print UART string recieved from the modem
 721:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2644              		.loc 1 721 0
 2645 00ea 3B1D     		adds	r3, r7, #4
 2646 00ec 1A46     		mov	r2, r3
 2647 00ee 1C49     		ldr	r1, .L142+68
 2648 00f0 0020     		movs	r0, #0
 2649 00f2 FFF7FEFF 		bl	printNotif
 722:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 723:modem.c       ****         // If it returns NULL, then write another command to the modem
 724:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2650              		.loc 1 724 0
 2651 00f6 3B1D     		adds	r3, r7, #4
 2652 00f8 3121     		movs	r1, #49
 2653 00fa 1846     		mov	r0, r3
 2654 00fc FFF7FEFF 		bl	strchr
 2655 0100 0346     		mov	r3, r0
 2656 0102 002B     		cmp	r3, #0
 2657 0104 05D1     		bne	.L141
 725:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 726:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 727:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2658              		.loc 1 727 0
 2659 0106 4FF4FA62 		mov	r2, #2000
 2660 010a 0549     		ldr	r1, .L142+4
 2661 010c 1548     		ldr	r0, .L142+72
 2662 010e FFF7FEFF 		bl	at_write_command
 2663              	.L141:
 2664              	.LBE12:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 65


 728:modem.c       ****         }
 729:modem.c       ****     }
 730:modem.c       **** 
 731:modem.c       ****     
 732:modem.c       **** }
 2665              		.loc 1 732 0
 2666 0112 00BF     		nop
 2667 0114 1037     		adds	r7, r7, #16
 2668              		.cfi_def_cfa_offset 8
 2669 0116 BD46     		mov	sp, r7
 2670              		.cfi_def_cfa_register 13
 2671              		@ sp needed
 2672 0118 80BD     		pop	{r7, pc}
 2673              	.L143:
 2674 011a 00BF     		.align	2
 2675              	.L142:
 2676 011c 00000000 		.word	modem_info
 2677 0120 00000000 		.word	.LC0
 2678 0124 1C070000 		.word	.LC66
 2679 0128 14000000 		.word	modem_info+20
 2680 012c 88020000 		.word	.LC21
 2681 0130 8C020000 		.word	.LC22
 2682 0134 00000000 		.word	uart_received_string
 2683 0138 28070000 		.word	.LC67
 2684 013c 38070000 		.word	.LC68
 2685 0140 44070000 		.word	.LC69
 2686 0144 50070000 		.word	.LC70
 2687 0148 28000000 		.word	modem_info+40
 2688 014c 5C070000 		.word	.LC71
 2689 0150 00000000 		.word	updatable_parameters
 2690 0154 68070000 		.word	.LC72
 2691 0158 94070000 		.word	.LC73
 2692 015c B0070000 		.word	.LC74
 2693 0160 BC070000 		.word	.LC75
 2694 0164 C8070000 		.word	.LC76
 2695              		.cfi_endproc
 2696              	.LFE82:
 2697              		.size	modem_configure_settings, .-modem_configure_settings
 2698              		.section	.rodata
 2699 07d3 00       		.align	2
 2700              	.LC77:
 2701 07d4 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2701      6D206E6F 
 2701      74207265 
 2701      61647920 
 2701      746F2067 
 2702 0807 6B2E00   		.ascii	"k.\000"
 2703 080a 0000     		.align	2
 2704              	.LC78:
 2705 080c 41542B43 		.ascii	"AT+CCLK?\015\000"
 2705      434C4B3F 
 2705      0D00
 2706 0816 0000     		.align	2
 2707              	.LC79:
 2708 0818 220D00   		.ascii	"\"\015\000"
 2709 081b 00       		.align	2
 2710              	.LC80:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 66


 2711 081c 3A202200 		.ascii	": \"\000"
 2712              		.align	2
 2713              	.LC81:
 2714 0820 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2714      642F2564 
 2714      2C25643A 
 2714      25643A25 
 2714      642D2564 
 2715 0835 000000   		.align	2
 2716              	.LC82:
 2717 0838 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2717      642F2564 
 2717      2C25643A 
 2717      25643A25 
 2717      642B2564 
 2718 084d 000000   		.align	2
 2719              	.LC83:
 2720 0850 436F756C 		.ascii	"Could not parse modem time.\000"
 2720      64206E6F 
 2720      74207061 
 2720      72736520 
 2720      6D6F6465 
 2721              		.section	.text.modem_get_network_time,"ax",%progbits
 2722              		.align	2
 2723              		.global	modem_get_network_time
 2724              		.thumb
 2725              		.thumb_func
 2726              		.type	modem_get_network_time, %function
 2727              	modem_get_network_time:
 2728              	.LFB83:
 733:modem.c       **** 
 734:modem.c       **** //returns 0 if modem can't get time
 735:modem.c       **** long modem_get_network_time(){
 2729              		.loc 1 735 0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 104
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733 0000 80B5     		push	{r7, lr}
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 7, -8
 2736              		.cfi_offset 14, -4
 2737 0002 A0B0     		sub	sp, sp, #128
 2738              		.cfi_def_cfa_offset 136
 2739 0004 06AF     		add	r7, sp, #24
 2740              		.cfi_def_cfa 7, 112
 736:modem.c       ****     
 737:modem.c       ****     //modem reposen format (careful to include the quotes "")
 738:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 739:modem.c       ****     //ex: 14:48 GMT
 740:modem.c       **** 
 741:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 742:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2741              		.loc 1 742 0
 2742 0006 444B     		ldr	r3, .L151
 2743 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2744 000a 042B     		cmp	r3, #4
 2745 000c 05D0     		beq	.L145
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 67


 743:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2746              		.loc 1 743 0
 2747 000e 4349     		ldr	r1, .L151+4
 2748 0010 0220     		movs	r0, #2
 2749 0012 FFF7FEFF 		bl	printNotif
 744:modem.c       ****         return 0;   
 2750              		.loc 1 744 0
 2751 0016 0023     		movs	r3, #0
 2752 0018 7AE0     		b	.L146
 2753              	.L145:
 745:modem.c       ****     }
 746:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2754              		.loc 1 746 0
 2755 001a 0023     		movs	r3, #0
 2756 001c 7B66     		str	r3, [r7, #100]
 747:modem.c       ****     
 748:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 749:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2757              		.loc 1 749 0
 2758 001e 4FF4FA62 		mov	r2, #2000
 2759 0022 3F49     		ldr	r1, .L151+8
 2760 0024 3F48     		ldr	r0, .L151+12
 2761 0026 FFF7FEFF 		bl	at_write_command
 2762 002a 0346     		mov	r3, r0
 2763 002c 002B     		cmp	r3, #0
 2764 002e 6ED0     		beq	.L147
 2765              	.LBB13:
 750:modem.c       ****         // need to set this to /0
 751:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 752:modem.c       ****         network_time[0] = '\0';
 2766              		.loc 1 752 0
 2767 0030 0023     		movs	r3, #0
 2768 0032 87F84430 		strb	r3, [r7, #68]
 753:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 754:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2769              		.loc 1 754 0
 2770 0036 07F14403 		add	r3, r7, #68
 2771 003a 3B4A     		ldr	r2, .L151+16
 2772 003c 3B49     		ldr	r1, .L151+20
 2773 003e 3C48     		ldr	r0, .L151+24
 2774 0040 FFF7FEFF 		bl	extract_string
 755:modem.c       ****         
 756:modem.c       ****         ///////////////////  
 757:modem.c       ****         struct tm t; // Creates variable t of struct tm
 758:modem.c       ****         
 759:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
 760:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2775              		.loc 1 760 0
 2776 0044 0023     		movs	r3, #0
 2777 0046 BB62     		str	r3, [r7, #40]
 761:modem.c       ****       
 762:modem.c       ****         // Determines the GMT offset 
 763:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 764:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 765:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2778              		.loc 1 765 0
 2779 0048 07F13C01 		add	r1, r7, #60
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 68


 2780 004c 07F14002 		add	r2, r7, #64
 2781 0050 07F14400 		add	r0, r7, #68
 2782 0054 07F12803 		add	r3, r7, #40
 2783 0058 0493     		str	r3, [sp, #16]
 2784 005a 07F12C03 		add	r3, r7, #44
 2785 005e 0393     		str	r3, [sp, #12]
 2786 0060 07F13003 		add	r3, r7, #48
 2787 0064 0293     		str	r3, [sp, #8]
 2788 0066 07F13403 		add	r3, r7, #52
 2789 006a 0193     		str	r3, [sp, #4]
 2790 006c 07F13803 		add	r3, r7, #56
 2791 0070 0093     		str	r3, [sp]
 2792 0072 0B46     		mov	r3, r1
 2793 0074 2F49     		ldr	r1, .L151+28
 2794 0076 FFF7FEFF 		bl	sscanf
 2795 007a 0346     		mov	r3, r0
 2796 007c 072B     		cmp	r3, #7
 2797 007e 06D1     		bne	.L148
 766:modem.c       ****             gmt_offset = gmt_offset*(900);
 2798              		.loc 1 766 0
 2799 0080 BB6A     		ldr	r3, [r7, #40]
 2800 0082 4FF46172 		mov	r2, #900
 2801 0086 02FB03F3 		mul	r3, r2, r3
 2802 008a BB62     		str	r3, [r7, #40]
 2803 008c 27E0     		b	.L149
 2804              	.L148:
 767:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2805              		.loc 1 767 0
 2806 008e 07F13C01 		add	r1, r7, #60
 2807 0092 07F14002 		add	r2, r7, #64
 2808 0096 07F14400 		add	r0, r7, #68
 2809 009a 07F12803 		add	r3, r7, #40
 2810 009e 0493     		str	r3, [sp, #16]
 2811 00a0 07F12C03 		add	r3, r7, #44
 2812 00a4 0393     		str	r3, [sp, #12]
 2813 00a6 07F13003 		add	r3, r7, #48
 2814 00aa 0293     		str	r3, [sp, #8]
 2815 00ac 07F13403 		add	r3, r7, #52
 2816 00b0 0193     		str	r3, [sp, #4]
 2817 00b2 07F13803 		add	r3, r7, #56
 2818 00b6 0093     		str	r3, [sp]
 2819 00b8 0B46     		mov	r3, r1
 2820 00ba 1F49     		ldr	r1, .L151+32
 2821 00bc FFF7FEFF 		bl	sscanf
 2822 00c0 0346     		mov	r3, r0
 2823 00c2 072B     		cmp	r3, #7
 2824 00c4 05D1     		bne	.L150
 768:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2825              		.loc 1 768 0
 2826 00c6 BB6A     		ldr	r3, [r7, #40]
 2827 00c8 1C4A     		ldr	r2, .L151+36
 2828 00ca 02FB03F3 		mul	r3, r2, r3
 2829 00ce BB62     		str	r3, [r7, #40]
 2830 00d0 05E0     		b	.L149
 2831              	.L150:
 769:modem.c       ****         }else{
 770:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 69


 2832              		.loc 1 770 0
 2833 00d2 1B49     		ldr	r1, .L151+40
 2834 00d4 0220     		movs	r0, #2
 2835 00d6 FFF7FEFF 		bl	printNotif
 771:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2836              		.loc 1 771 0
 2837 00da 0023     		movs	r3, #0
 2838 00dc 18E0     		b	.L146
 2839              	.L149:
 772:modem.c       ****         }
 773:modem.c       ****         
 774:modem.c       ****         // Sets each variable to the correct time 
 775:modem.c       ****         t.tm_sec = second;
 2840              		.loc 1 775 0
 2841 00de FB6A     		ldr	r3, [r7, #44]
 2842 00e0 7B60     		str	r3, [r7, #4]
 776:modem.c       ****         t.tm_min = minute;
 2843              		.loc 1 776 0
 2844 00e2 3B6B     		ldr	r3, [r7, #48]
 2845 00e4 BB60     		str	r3, [r7, #8]
 777:modem.c       ****         t.tm_hour = hour;
 2846              		.loc 1 777 0
 2847 00e6 7B6B     		ldr	r3, [r7, #52]
 2848 00e8 FB60     		str	r3, [r7, #12]
 778:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2849              		.loc 1 778 0
 2850 00ea 3B6C     		ldr	r3, [r7, #64]
 2851 00ec 6433     		adds	r3, r3, #100
 2852 00ee BB61     		str	r3, [r7, #24]
 779:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2853              		.loc 1 779 0
 2854 00f0 FB6B     		ldr	r3, [r7, #60]
 2855 00f2 013B     		subs	r3, r3, #1
 2856 00f4 7B61     		str	r3, [r7, #20]
 780:modem.c       ****         t.tm_mday = day;           // Day of the month
 2857              		.loc 1 780 0
 2858 00f6 BB6B     		ldr	r3, [r7, #56]
 2859 00f8 3B61     		str	r3, [r7, #16]
 781:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2860              		.loc 1 781 0
 2861 00fa 0023     		movs	r3, #0
 2862 00fc 7B62     		str	r3, [r7, #36]
 782:modem.c       ****     
 783:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 784:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 785:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
 2863              		.loc 1 785 0
 2864 00fe 3B1D     		adds	r3, r7, #4
 2865 0100 1846     		mov	r0, r3
 2866 0102 FFF7FEFF 		bl	mktime
 2867 0106 0246     		mov	r2, r0
 2868 0108 BB6A     		ldr	r3, [r7, #40]
 2869 010a 1344     		add	r3, r3, r2
 2870 010c 7B66     		str	r3, [r7, #100]
 2871              	.L147:
 2872              	.LBE13:
 786:modem.c       ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 70


 787:modem.c       ****     
 788:modem.c       ****     return epoch_time;
 2873              		.loc 1 788 0
 2874 010e 7B6E     		ldr	r3, [r7, #100]
 2875              	.L146:
 789:modem.c       **** }
 2876              		.loc 1 789 0
 2877 0110 1846     		mov	r0, r3
 2878 0112 6837     		adds	r7, r7, #104
 2879              		.cfi_def_cfa_offset 8
 2880 0114 BD46     		mov	sp, r7
 2881              		.cfi_def_cfa_register 13
 2882              		@ sp needed
 2883 0116 80BD     		pop	{r7, pc}
 2884              	.L152:
 2885              		.align	2
 2886              	.L151:
 2887 0118 00000000 		.word	modem_state
 2888 011c D4070000 		.word	.LC77
 2889 0120 00000000 		.word	.LC0
 2890 0124 0C080000 		.word	.LC78
 2891 0128 18080000 		.word	.LC79
 2892 012c 1C080000 		.word	.LC80
 2893 0130 00000000 		.word	uart_received_string
 2894 0134 20080000 		.word	.LC81
 2895 0138 38080000 		.word	.LC82
 2896 013c 7CFCFFFF 		.word	-900
 2897 0140 50080000 		.word	.LC83
 2898              		.cfi_endproc
 2899              	.LFE83:
 2900              		.size	modem_get_network_time, .-modem_get_network_time
 2901              		.section	.text.modem_get_state,"ax",%progbits
 2902              		.align	2
 2903              		.global	modem_get_state
 2904              		.thumb
 2905              		.thumb_func
 2906              		.type	modem_get_state, %function
 2907              	modem_get_state:
 2908              	.LFB84:
 790:modem.c       **** 
 791:modem.c       **** // Get the modem state
 792:modem.c       **** uint8 modem_get_state(){
 2909              		.loc 1 792 0
 2910              		.cfi_startproc
 2911              		@ args = 0, pretend = 0, frame = 0
 2912              		@ frame_needed = 1, uses_anonymous_args = 0
 2913              		@ link register save eliminated.
 2914 0000 80B4     		push	{r7}
 2915              		.cfi_def_cfa_offset 4
 2916              		.cfi_offset 7, -4
 2917 0002 00AF     		add	r7, sp, #0
 2918              		.cfi_def_cfa_register 7
 793:modem.c       ****     return modem_state;
 2919              		.loc 1 793 0
 2920 0004 024B     		ldr	r3, .L155
 2921 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 794:modem.c       **** }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 71


 2922              		.loc 1 794 0
 2923 0008 1846     		mov	r0, r3
 2924 000a BD46     		mov	sp, r7
 2925              		.cfi_def_cfa_register 13
 2926              		@ sp needed
 2927 000c 80BC     		pop	{r7}
 2928              		.cfi_restore 7
 2929              		.cfi_def_cfa_offset 0
 2930 000e 7047     		bx	lr
 2931              	.L156:
 2932              		.align	2
 2933              	.L155:
 2934 0010 00000000 		.word	modem_state
 2935              		.cfi_endproc
 2936              	.LFE84:
 2937              		.size	modem_get_state, .-modem_get_state
 2938              		.section	.text.modem_sleep,"ax",%progbits
 2939              		.align	2
 2940              		.global	modem_sleep
 2941              		.thumb
 2942              		.thumb_func
 2943              		.type	modem_sleep, %function
 2944              	modem_sleep:
 2945              	.LFB85:
 795:modem.c       **** 
 796:modem.c       **** // Set modem to sleep
 797:modem.c       **** void modem_sleep(){
 2946              		.loc 1 797 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 0
 2949              		@ frame_needed = 1, uses_anonymous_args = 0
 2950 0000 80B5     		push	{r7, lr}
 2951              		.cfi_def_cfa_offset 8
 2952              		.cfi_offset 7, -8
 2953              		.cfi_offset 14, -4
 2954 0002 00AF     		add	r7, sp, #0
 2955              		.cfi_def_cfa_register 7
 798:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 799:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2956              		.loc 1 799 0
 2957 0004 FFF7FEFF 		bl	modem_get_state
 2958 0008 0346     		mov	r3, r0
 2959 000a 002B     		cmp	r3, #0
 2960 000c 03D0     		beq	.L159
 800:modem.c       **** 
 801:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
 2961              		.loc 1 801 0
 2962 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 802:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2963              		.loc 1 802 0
 2964 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2965              	.L159:
 803:modem.c       ****         
 804:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 805:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 806:modem.c       ****      }
 807:modem.c       **** }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 72


 2966              		.loc 1 807 0
 2967 0016 00BF     		nop
 2968 0018 80BD     		pop	{r7, pc}
 2969              		.cfi_endproc
 2970              	.LFE85:
 2971              		.size	modem_sleep, .-modem_sleep
 2972 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2973              		.align	2
 2974              		.global	modem_wakeup
 2975              		.thumb
 2976              		.thumb_func
 2977              		.type	modem_wakeup, %function
 2978              	modem_wakeup:
 2979              	.LFB86:
 808:modem.c       **** 
 809:modem.c       **** // Wakeup the modem
 810:modem.c       **** void modem_wakeup(){
 2980              		.loc 1 810 0
 2981              		.cfi_startproc
 2982              		@ args = 0, pretend = 0, frame = 0
 2983              		@ frame_needed = 1, uses_anonymous_args = 0
 2984 0000 80B5     		push	{r7, lr}
 2985              		.cfi_def_cfa_offset 8
 2986              		.cfi_offset 7, -8
 2987              		.cfi_offset 14, -4
 2988 0002 00AF     		add	r7, sp, #0
 2989              		.cfi_def_cfa_register 7
 811:modem.c       ****     // If modem state is not off then wake it up
 812:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2990              		.loc 1 812 0
 2991 0004 FFF7FEFF 		bl	modem_get_state
 2992 0008 0346     		mov	r3, r0
 2993 000a 002B     		cmp	r3, #0
 2994 000c 0BD0     		beq	.L162
 813:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2995              		.loc 1 813 0
 2996 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 814:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 815:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 816:modem.c       ****         UART_Telit_Wakeup();
 2997              		.loc 1 816 0
 2998 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 817:modem.c       ****         // Remove the need for this pin itterupt
 818:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 819:modem.c       ****         
 820:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
 821:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2999              		.loc 1 821 0
 3000 0016 FFF7FEFF 		bl	modem_get_state
 3001 001a 0346     		mov	r3, r0
 3002 001c 032B     		cmp	r3, #3
 3003 001e 02D1     		bne	.L162
 822:modem.c       ****             CyDelay(100u);
 3004              		.loc 1 822 0
 3005 0020 6420     		movs	r0, #100
 3006 0022 FFF7FEFF 		bl	CyDelay
 3007              	.L162:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 73


 823:modem.c       ****         }
 824:modem.c       ****      }
 825:modem.c       **** }
 3008              		.loc 1 825 0
 3009 0026 00BF     		nop
 3010 0028 80BD     		pop	{r7, pc}
 3011              		.cfi_endproc
 3012              	.LFE86:
 3013              		.size	modem_wakeup, .-modem_wakeup
 3014 002a 00BF     		.section	.rodata
 3015              		.align	2
 3016              	.LC84:
 3017 086c 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 3017      50494F3D 
 3017      352C312C 
 3017      312C300D 
 3017      00
 3018 087d 000000   		.align	2
 3019              	.LC85:
 3020 0880 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 3020      55504C53 
 3020      45433D31 
 3020      0D00
 3021 088e 0000     		.align	2
 3022              	.LC86:
 3023 0890 41542453 		.ascii	"AT$SUPLV=2\015\000"
 3023      55504C56 
 3023      3D320D00 
 3024              		.align	2
 3025              	.LC87:
 3026 089c 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 3026      47505345 
 3026      4E3D310D 
 3026      00
 3027 08a9 000000   		.align	2
 3028              	.LC88:
 3029 08ac 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 3029      4C503D31 
 3029      2C227375 
 3029      706C2E67 
 3029      6F6F676C 
 3030 08cd 000000   		.align	2
 3031              	.LC89:
 3032 08d0 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 3032      47414354 
 3032      3D312C30 
 3032      0D0A00
 3033 08df 00       		.align	2
 3034              	.LC90:
 3035 08e0 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 3035      43534C4B 
 3035      3D312C31 
 3035      0D00
 3036 08ee 0000     		.align	2
 3037              	.LC91:
 3038 08f0 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 3038      5053534C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 74


 3038      53523D31 
 3038      2C312C2C 
 3038      2C2C2C32 
 3039 0906 0000     		.align	2
 3040              	.LC92:
 3041 0908 4E00     		.ascii	"N\000"
 3042 090a 0000     		.align	2
 3043              	.LC93:
 3044 090c 41542447 		.ascii	"AT$GPSACP\015\000"
 3044      50534143 
 3044      500D00
 3045 0917 00       		.align	2
 3046              	.LC94:
 3047 0918 24475053 		.ascii	"$GPSACP: \000"
 3047      4143503A 
 3047      2000
 3048 0922 0000     		.align	2
 3049              	.LC95:
 3050 0924 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 3050      4143503A 
 3050      20252A66 
 3050      2C25664E 
 3050      2C256657 
 3051              		.global	__aeabi_fdiv
 3052              		.global	__aeabi_f2d
 3053              		.global	__aeabi_ddiv
 3054              		.global	__aeabi_dadd
 3055              		.global	__aeabi_d2f
 3056              		.align	2
 3057              	.LC96:
 3058 0944 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 3058      50494F3D 
 3058      352C302C 
 3058      312C300D 
 3058      00
 3059 0955 000000   		.align	2
 3060              	.LC97:
 3061 0958 41542447 		.ascii	"AT$GPSR=0\015\000"
 3061      5053523D 
 3061      300D00
 3062 0963 00       		.align	2
 3063              	.LC98:
 3064 0964 54696D65 		.ascii	"Time to lock GPS: %d\000"
 3064      20746F20 
 3064      6C6F636B 
 3064      20475053 
 3064      3A202564 
 3065              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 3066              		.align	2
 3067              		.global	modem_get_gps_coordinates
 3068              		.thumb
 3069              		.thumb_func
 3070              		.type	modem_get_gps_coordinates, %function
 3071              	modem_get_gps_coordinates:
 3072              	.LFB87:
 826:modem.c       **** 
 827:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 75


 828:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 829:modem.c       **** gps_t modem_get_gps_coordinates(){
 3073              		.loc 1 829 0
 3074              		.cfi_startproc
 3075              		@ args = 0, pretend = 0, frame = 56
 3076              		@ frame_needed = 1, uses_anonymous_args = 0
 3077 0000 B0B5     		push	{r4, r5, r7, lr}
 3078              		.cfi_def_cfa_offset 16
 3079              		.cfi_offset 4, -16
 3080              		.cfi_offset 5, -12
 3081              		.cfi_offset 7, -8
 3082              		.cfi_offset 14, -4
 3083 0002 90B0     		sub	sp, sp, #64
 3084              		.cfi_def_cfa_offset 80
 3085 0004 02AF     		add	r7, sp, #8
 3086              		.cfi_def_cfa 7, 72
 3087 0006 7860     		str	r0, [r7, #4]
 830:modem.c       ****     gps_t gps;
 831:modem.c       ****     gps.altitude = 0;
 3088              		.loc 1 831 0
 3089 0008 4FF00003 		mov	r3, #0
 3090 000c FB61     		str	r3, [r7, #28]	@ float
 832:modem.c       ****     gps.longitude = 0;
 3091              		.loc 1 832 0
 3092 000e 4FF00003 		mov	r3, #0
 3093 0012 BB61     		str	r3, [r7, #24]	@ float
 833:modem.c       ****     gps.latitude = 0;
 3094              		.loc 1 833 0
 3095 0014 4FF00003 		mov	r3, #0
 3096 0018 7B61     		str	r3, [r7, #20]	@ float
 834:modem.c       ****     gps.time_to_lock =0;
 3097              		.loc 1 834 0
 3098 001a 0023     		movs	r3, #0
 3099 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 835:modem.c       ****     gps.valid = 0;
 3100              		.loc 1 835 0
 3101 001e 0023     		movs	r3, #0
 3102 0020 87F82230 		strb	r3, [r7, #34]
 836:modem.c       ****     
 837:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 838:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 3103              		.loc 1 838 0
 3104 0024 7F4B     		ldr	r3, .L173
 3105 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3106 0028 042B     		cmp	r3, #4
 3107 002a 07D0     		beq	.L164
 839:modem.c       ****         return gps;//where valid = 0
 3108              		.loc 1 839 0
 3109 002c 7B68     		ldr	r3, [r7, #4]
 3110 002e 1C46     		mov	r4, r3
 3111 0030 07F11403 		add	r3, r7, #20
 3112 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3113 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3114 003a EFE0     		b	.L163
 3115              	.L164:
 840:modem.c       ****     }
 841:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 76


 842:modem.c       ****     long lock_time = getTimeStamp();
 3116              		.loc 1 842 0
 3117 003c FFF7FEFF 		bl	getTimeStamp
 3118 0040 3863     		str	r0, [r7, #48]
 843:modem.c       ****     
 844:modem.c       ****     // Enable this for the LTER module
 845:modem.c       ****     // Enable GPS Low-Dropout Regulator
 846:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3119              		.loc 1 846 0
 3120 0042 4FF4FA62 		mov	r2, #2000
 3121 0046 7849     		ldr	r1, .L173+4
 3122 0048 7848     		ldr	r0, .L173+8
 3123 004a FFF7FEFF 		bl	at_write_command
 847:modem.c       ****     
 848:modem.c       ****     // Configure SUPL connection params
 849:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 3124              		.loc 1 849 0
 3125 004e 4FF4FA62 		mov	r2, #2000
 3126 0052 7549     		ldr	r1, .L173+4
 3127 0054 7648     		ldr	r0, .L173+12
 3128 0056 FFF7FEFF 		bl	at_write_command
 850:modem.c       ****     
 851:modem.c       ****     // Use SUPL2.0
 852:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 3129              		.loc 1 852 0
 3130 005a 4FF4FA62 		mov	r2, #2000
 3131 005e 7249     		ldr	r1, .L173+4
 3132 0060 7448     		ldr	r0, .L173+16
 3133 0062 FFF7FEFF 		bl	at_write_command
 853:modem.c       ****     
 854:modem.c       ****     // Enable AGPS service
 855:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 3134              		.loc 1 855 0
 3135 0066 4FF4FA62 		mov	r2, #2000
 3136 006a 6F49     		ldr	r1, .L173+4
 3137 006c 7248     		ldr	r0, .L173+20
 3138 006e FFF7FEFF 		bl	at_write_command
 856:modem.c       ****     
 857:modem.c       ****     // Chose SUPL server, use google public service
 858:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 3139              		.loc 1 858 0
 3140 0072 4FF4FA62 		mov	r2, #2000
 3141 0076 6C49     		ldr	r1, .L173+4
 3142 0078 7048     		ldr	r0, .L173+24
 3143 007a FFF7FEFF 		bl	at_write_command
 859:modem.c       ****     
 860:modem.c       ****     //pdp context has to be locked to carrier for this to work
 861:modem.c       ****     
 862:modem.c       ****     // Unlock context since it needs to be used by modem
 863:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 3144              		.loc 1 863 0
 3145 007e 4FF4FA62 		mov	r2, #2000
 3146 0082 6949     		ldr	r1, .L173+4
 3147 0084 6E48     		ldr	r0, .L173+28
 3148 0086 FFF7FEFF 		bl	at_write_command
 864:modem.c       ****     
 865:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 77


 3149              		.loc 1 865 0
 3150 008a 4FF4FA62 		mov	r2, #2000
 3151 008e 6649     		ldr	r1, .L173+4
 3152 0090 6C48     		ldr	r0, .L173+32
 3153 0092 FFF7FEFF 		bl	at_write_command
 866:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 867:modem.c       ****     
 868:modem.c       ****     // Relock the context
 869:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 3154              		.loc 1 869 0
 3155 0096 42F21072 		movw	r2, #10000
 3156 009a 6349     		ldr	r1, .L173+4
 3157 009c 6A48     		ldr	r0, .L173+36
 3158 009e FFF7FEFF 		bl	at_write_command
 870:modem.c       ****     
 871:modem.c       ****     //start AGPS service
 872:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 3159              		.loc 1 872 0
 3160 00a2 4FF4FA62 		mov	r2, #2000
 3161 00a6 6049     		ldr	r1, .L173+4
 3162 00a8 6848     		ldr	r0, .L173+40
 3163 00aa FFF7FEFF 		bl	at_write_command
 873:modem.c       ****     
 874:modem.c       ****     
 875:modem.c       ****     // Start the AGPS service
 876:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 877:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 878:modem.c       ****     
 879:modem.c       ****     
 880:modem.c       ****  
 881:modem.c       ****     uint8 gps_status = 0;
 3164              		.loc 1 881 0
 3165 00ae 0023     		movs	r3, #0
 3166 00b0 87F82F30 		strb	r3, [r7, #47]
 3167              	.LBB14:
 882:modem.c       ****     for(uint16 i=0;i<200;i++){
 3168              		.loc 1 882 0
 3169 00b4 0023     		movs	r3, #0
 3170 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 3171 00b8 13E0     		b	.L166
 3172              	.L169:
 883:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3173              		.loc 1 883 0
 3174 00ba 4FF4FA62 		mov	r2, #2000
 3175 00be 6449     		ldr	r1, .L173+44
 3176 00c0 6448     		ldr	r0, .L173+48
 3177 00c2 FFF7FEFF 		bl	at_write_command
 3178 00c6 0346     		mov	r3, r0
 3179 00c8 87F82F30 		strb	r3, [r7, #47]
 884:modem.c       ****         if(gps_status){
 3180              		.loc 1 884 0
 3181 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3182 00d0 002B     		cmp	r3, #0
 3183 00d2 0AD1     		bne	.L172
 885:modem.c       ****             break;   
 886:modem.c       ****         }
 887:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 78


 3184              		.loc 1 887 0 discriminator 2
 3185 00d4 4FF47A70 		mov	r0, #1000
 3186 00d8 FFF7FEFF 		bl	CyDelay
 882:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3187              		.loc 1 882 0 discriminator 2
 3188 00dc FB8E     		ldrh	r3, [r7, #54]
 3189 00de 0133     		adds	r3, r3, #1
 3190 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 3191              	.L166:
 882:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 3192              		.loc 1 882 0 is_stmt 0 discriminator 1
 3193 00e2 FB8E     		ldrh	r3, [r7, #54]
 3194 00e4 C72B     		cmp	r3, #199
 3195 00e6 E8D9     		bls	.L169
 3196 00e8 00E0     		b	.L168
 3197              	.L172:
 885:modem.c       ****             break;   
 3198              		.loc 1 885 0 is_stmt 1
 3199 00ea 00BF     		nop
 3200              	.L168:
 3201              	.LBE14:
 888:modem.c       ****     }
 889:modem.c       ****     
 890:modem.c       ****     //parse data here
 891:modem.c       ****     
 892:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 893:modem.c       ****     float lat;
 894:modem.c       ****     float lon;
 895:modem.c       ****     float alt;
 896:modem.c       ****     
 897:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 898:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 899:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 3202              		.loc 1 899 0
 3203 00ec 5A49     		ldr	r1, .L173+52
 3204 00ee 5B48     		ldr	r0, .L173+56
 3205 00f0 FFF7FEFF 		bl	strstr
 3206 00f4 B862     		str	r0, [r7, #40]
 900:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 901:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 902:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 3207              		.loc 1 902 0
 3208 00f6 07F10C01 		add	r1, r7, #12
 3209 00fa 07F11002 		add	r2, r7, #16
 3210 00fe 07F10803 		add	r3, r7, #8
 3211 0102 0093     		str	r3, [sp]
 3212 0104 0B46     		mov	r3, r1
 3213 0106 5649     		ldr	r1, .L173+60
 3214 0108 B86A     		ldr	r0, [r7, #40]
 3215 010a FFF7FEFF 		bl	sscanf
 3216 010e 7862     		str	r0, [r7, #36]
 903:modem.c       ****     if(match >= 3){
 3217              		.loc 1 903 0
 3218 0110 7B6A     		ldr	r3, [r7, #36]
 3219 0112 022B     		cmp	r3, #2
 3220 0114 60DD     		ble	.L170
 904:modem.c       ****         // Calculate lat and lon
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 79


 905:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 906:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 907:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 3221              		.loc 1 907 0
 3222 0116 3B69     		ldr	r3, [r7, #16]	@ float
 3223 0118 5249     		ldr	r1, .L173+64
 3224 011a 1846     		mov	r0, r3
 3225 011c FFF7FEFF 		bl	__aeabi_fdiv
 3226 0120 0346     		mov	r3, r0
 3227 0122 1846     		mov	r0, r3
 3228 0124 FFF7FEFF 		bl	floorf
 3229 0128 0346     		mov	r3, r0
 3230 012a 1846     		mov	r0, r3
 3231 012c FFF7FEFF 		bl	__aeabi_f2d
 3232 0130 0446     		mov	r4, r0
 3233 0132 0D46     		mov	r5, r1
 3234 0134 3B69     		ldr	r3, [r7, #16]	@ float
 3235 0136 1846     		mov	r0, r3
 3236 0138 FFF7FEFF 		bl	__aeabi_f2d
 3237 013c 4FF00002 		mov	r2, #0
 3238 0140 494B     		ldr	r3, .L173+68
 3239 0142 FFF7FEFF 		bl	fmod
 3240 0146 4FF00002 		mov	r2, #0
 3241 014a 484B     		ldr	r3, .L173+72
 3242 014c FFF7FEFF 		bl	__aeabi_ddiv
 3243 0150 0246     		mov	r2, r0
 3244 0152 0B46     		mov	r3, r1
 3245 0154 2046     		mov	r0, r4
 3246 0156 2946     		mov	r1, r5
 3247 0158 FFF7FEFF 		bl	__aeabi_dadd
 3248 015c 0346     		mov	r3, r0
 3249 015e 0C46     		mov	r4, r1
 3250 0160 1846     		mov	r0, r3
 3251 0162 2146     		mov	r1, r4
 3252 0164 FFF7FEFF 		bl	__aeabi_d2f
 3253 0168 0346     		mov	r3, r0
 3254 016a 3B61     		str	r3, [r7, #16]	@ float
 908:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 3255              		.loc 1 908 0
 3256 016c FB68     		ldr	r3, [r7, #12]	@ float
 3257 016e 3D49     		ldr	r1, .L173+64
 3258 0170 1846     		mov	r0, r3
 3259 0172 FFF7FEFF 		bl	__aeabi_fdiv
 3260 0176 0346     		mov	r3, r0
 3261 0178 1846     		mov	r0, r3
 3262 017a FFF7FEFF 		bl	floorf
 3263 017e 0346     		mov	r3, r0
 3264 0180 1846     		mov	r0, r3
 3265 0182 FFF7FEFF 		bl	__aeabi_f2d
 3266 0186 0446     		mov	r4, r0
 3267 0188 0D46     		mov	r5, r1
 3268 018a FB68     		ldr	r3, [r7, #12]	@ float
 3269 018c 1846     		mov	r0, r3
 3270 018e FFF7FEFF 		bl	__aeabi_f2d
 3271 0192 4FF00002 		mov	r2, #0
 3272 0196 344B     		ldr	r3, .L173+68
 3273 0198 FFF7FEFF 		bl	fmod
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 80


 3274 019c 4FF00002 		mov	r2, #0
 3275 01a0 324B     		ldr	r3, .L173+72
 3276 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 3277 01a6 0246     		mov	r2, r0
 3278 01a8 0B46     		mov	r3, r1
 3279 01aa 2046     		mov	r0, r4
 3280 01ac 2946     		mov	r1, r5
 3281 01ae FFF7FEFF 		bl	__aeabi_dadd
 3282 01b2 0346     		mov	r3, r0
 3283 01b4 0C46     		mov	r4, r1
 3284 01b6 1846     		mov	r0, r3
 3285 01b8 2146     		mov	r1, r4
 3286 01ba FFF7FEFF 		bl	__aeabi_d2f
 3287 01be 0346     		mov	r3, r0
 3288 01c0 83F00043 		eor	r3, r3, #-2147483648
 3289 01c4 FB60     		str	r3, [r7, #12]	@ float
 909:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 3290              		.loc 1 909 0
 3291 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 3292 01c8 FB61     		str	r3, [r7, #28]	@ float
 910:modem.c       ****         gps.latitude = lat;
 3293              		.loc 1 910 0
 3294 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 3295 01cc 7B61     		str	r3, [r7, #20]	@ float
 911:modem.c       ****         gps.longitude = lon;
 3296              		.loc 1 911 0
 3297 01ce FB68     		ldr	r3, [r7, #12]	@ float
 3298 01d0 BB61     		str	r3, [r7, #24]	@ float
 912:modem.c       ****         gps.valid = 1;
 3299              		.loc 1 912 0
 3300 01d2 0123     		movs	r3, #1
 3301 01d4 87F82230 		strb	r3, [r7, #34]
 3302              	.L170:
 913:modem.c       ****     }
 914:modem.c       ****     
 915:modem.c       ****     // Disable LDO, just in case
 916:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 3303              		.loc 1 916 0
 3304 01d8 4FF4FA62 		mov	r2, #2000
 3305 01dc 1249     		ldr	r1, .L173+4
 3306 01de 2448     		ldr	r0, .L173+76
 3307 01e0 FFF7FEFF 		bl	at_write_command
 917:modem.c       ****     
 918:modem.c       ****     // Flush modem's GPS data, just in case
 919:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 3308              		.loc 1 919 0
 3309 01e4 4FF4FA62 		mov	r2, #2000
 3310 01e8 0F49     		ldr	r1, .L173+4
 3311 01ea 2248     		ldr	r0, .L173+80
 3312 01ec FFF7FEFF 		bl	at_write_command
 920:modem.c       ****     
 921:modem.c       ****     
 922:modem.c       ****     
 923:modem.c       ****     
 924:modem.c       ****     
 925:modem.c       ****     /* Relevant to 3g modem, can ignore
 926:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 81


 927:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 928:modem.c       ****     //AT$GPSQOS=50,50,100,0
 929:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 930:modem.c       ****     
 931:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 932:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 933:modem.c       ****     
 934:modem.c       ****     //unlock contedt, simnce its being used by modem
 935:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 936:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 937:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 938:modem.c       ****     
 939:modem.c       ****     //unlock contedt, simnce its being used by modem
 940:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 941:modem.c       ****     
 942:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 943:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 944:modem.c       ****     
 945:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 946:modem.c       ****    uint8 gps_status = 0;
 947:modem.c       ****     for(uint16 i=0;i<200;i++){
 948:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 949:modem.c       ****         if(gps_status){
 950:modem.c       ****             break;   
 951:modem.c       ****         }
 952:modem.c       ****   }
 953:modem.c       ****     
 954:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 955:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 956:modem.c       ****     if(gps_status){
 957:modem.c       ****         float lat,lon,alt = 0;
 958:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 959:modem.c       ****             gps.altitude = alt;
 960:modem.c       ****             gps.latitude = lat/60;
 961:modem.c       ****             gps.longitude = lon/60;
 962:modem.c       ****             gps.valid = 1;
 963:modem.c       ****         }
 964:modem.c       ****         
 965:modem.c       ****     }
 966:modem.c       ****     
 967:modem.c       ****     //turn off gps
 968:modem.c       ****     //AT$GPSP=0
 969:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 970:modem.c       ****     
 971:modem.c       ****     */
 972:modem.c       **** 
 973:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
 974:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 3313              		.loc 1 974 0
 3314 01f0 FFF7FEFF 		bl	getTimeStamp
 3315 01f4 0246     		mov	r2, r0
 3316 01f6 3B6B     		ldr	r3, [r7, #48]
 3317 01f8 D31A     		subs	r3, r2, r3
 3318 01fa 3B63     		str	r3, [r7, #48]
 975:modem.c       ****     gps.time_to_lock = lock_time;
 3319              		.loc 1 975 0
 3320 01fc 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 82


 3321 01fe 9BB2     		uxth	r3, r3
 3322 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 976:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 3323              		.loc 1 976 0
 3324 0202 3B8C     		ldrh	r3, [r7, #32]
 3325 0204 1A46     		mov	r2, r3
 3326 0206 1C49     		ldr	r1, .L173+84
 3327 0208 0020     		movs	r0, #0
 3328 020a FFF7FEFF 		bl	printNotif
 977:modem.c       ****     
 978:modem.c       ****     return gps;
 3329              		.loc 1 978 0
 3330 020e 7B68     		ldr	r3, [r7, #4]
 3331 0210 1C46     		mov	r4, r3
 3332 0212 07F11403 		add	r3, r7, #20
 3333 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 3334 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 3335              	.L163:
 979:modem.c       ****     
 980:modem.c       **** }
 3336              		.loc 1 980 0
 3337 021c 7868     		ldr	r0, [r7, #4]
 3338 021e 3837     		adds	r7, r7, #56
 3339              		.cfi_def_cfa_offset 16
 3340 0220 BD46     		mov	sp, r7
 3341              		.cfi_def_cfa_register 13
 3342              		@ sp needed
 3343 0222 B0BD     		pop	{r4, r5, r7, pc}
 3344              	.L174:
 3345              		.align	2
 3346              	.L173:
 3347 0224 00000000 		.word	modem_state
 3348 0228 00000000 		.word	.LC0
 3349 022c 6C080000 		.word	.LC84
 3350 0230 80080000 		.word	.LC85
 3351 0234 90080000 		.word	.LC86
 3352 0238 9C080000 		.word	.LC87
 3353 023c AC080000 		.word	.LC88
 3354 0240 D0080000 		.word	.LC89
 3355 0244 E0080000 		.word	.LC90
 3356 0248 D8020000 		.word	.LC27
 3357 024c F0080000 		.word	.LC91
 3358 0250 08090000 		.word	.LC92
 3359 0254 0C090000 		.word	.LC93
 3360 0258 18090000 		.word	.LC94
 3361 025c 00000000 		.word	uart_received_string
 3362 0260 24090000 		.word	.LC95
 3363 0264 0000C842 		.word	1120403456
 3364 0268 00005940 		.word	1079574528
 3365 026c 00004E40 		.word	1078853632
 3366 0270 44090000 		.word	.LC96
 3367 0274 58090000 		.word	.LC97
 3368 0278 64090000 		.word	.LC98
 3369              		.cfi_endproc
 3370              	.LFE87:
 3371              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 3372              		.text
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 83


 3373              	.Letext0:
 3374              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3375              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3376              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3377              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 3378              		.file 6 "testing.h"
 3379              		.file 7 "data.h"
 3380              		.file 8 "modem.h"
 3381              		.file 9 "notoriOS.h"
 3382              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 3383              		.file 11 "level_sensor.h"
 3384              		.file 12 "downstream_level_sensor.h"
 3385              		.file 13 "App_LED.h"
 3386              		.section	.debug_info,"",%progbits
 3387              	.Ldebug_info0:
 3388 0000 480D0000 		.4byte	0xd48
 3389 0004 0400     		.2byte	0x4
 3390 0006 00000000 		.4byte	.Ldebug_abbrev0
 3391 000a 04       		.byte	0x4
 3392 000b 01       		.uleb128 0x1
 3393 000c 9C000000 		.4byte	.LASF182
 3394 0010 0C       		.byte	0xc
 3395 0011 98040000 		.4byte	.LASF183
 3396 0015 28000000 		.4byte	.LASF184
 3397 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 3398 001d 00000000 		.4byte	0
 3399 0021 00000000 		.4byte	.Ldebug_line0
 3400 0025 02       		.uleb128 0x2
 3401 0026 01       		.byte	0x1
 3402 0027 06       		.byte	0x6
 3403 0028 B1010000 		.4byte	.LASF0
 3404 002c 03       		.uleb128 0x3
 3405 002d 70000000 		.4byte	.LASF4
 3406 0031 02       		.byte	0x2
 3407 0032 1D       		.byte	0x1d
 3408 0033 37000000 		.4byte	0x37
 3409 0037 02       		.uleb128 0x2
 3410 0038 01       		.byte	0x1
 3411 0039 08       		.byte	0x8
 3412 003a B5060000 		.4byte	.LASF1
 3413 003e 02       		.uleb128 0x2
 3414 003f 02       		.byte	0x2
 3415 0040 05       		.byte	0x5
 3416 0041 D0040000 		.4byte	.LASF2
 3417 0045 02       		.uleb128 0x2
 3418 0046 02       		.byte	0x2
 3419 0047 07       		.byte	0x7
 3420 0048 07030000 		.4byte	.LASF3
 3421 004c 03       		.uleb128 0x3
 3422 004d E5040000 		.4byte	.LASF5
 3423 0051 02       		.byte	0x2
 3424 0052 3F       		.byte	0x3f
 3425 0053 57000000 		.4byte	0x57
 3426 0057 02       		.uleb128 0x2
 3427 0058 04       		.byte	0x4
 3428 0059 05       		.byte	0x5
 3429 005a 63020000 		.4byte	.LASF6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 84


 3430 005e 03       		.uleb128 0x3
 3431 005f 2A030000 		.4byte	.LASF7
 3432 0063 02       		.byte	0x2
 3433 0064 41       		.byte	0x41
 3434 0065 69000000 		.4byte	0x69
 3435 0069 02       		.uleb128 0x2
 3436 006a 04       		.byte	0x4
 3437 006b 07       		.byte	0x7
 3438 006c FB030000 		.4byte	.LASF8
 3439 0070 02       		.uleb128 0x2
 3440 0071 08       		.byte	0x8
 3441 0072 05       		.byte	0x5
 3442 0073 A3010000 		.4byte	.LASF9
 3443 0077 02       		.uleb128 0x2
 3444 0078 08       		.byte	0x8
 3445 0079 07       		.byte	0x7
 3446 007a 37010000 		.4byte	.LASF10
 3447 007e 04       		.uleb128 0x4
 3448 007f 04       		.byte	0x4
 3449 0080 05       		.byte	0x5
 3450 0081 696E7400 		.ascii	"int\000"
 3451 0085 02       		.uleb128 0x2
 3452 0086 04       		.byte	0x4
 3453 0087 07       		.byte	0x7
 3454 0088 D1070000 		.4byte	.LASF11
 3455 008c 03       		.uleb128 0x3
 3456 008d 67090000 		.4byte	.LASF12
 3457 0091 03       		.byte	0x3
 3458 0092 18       		.byte	0x18
 3459 0093 2C000000 		.4byte	0x2c
 3460 0097 03       		.uleb128 0x3
 3461 0098 AD060000 		.4byte	.LASF13
 3462 009c 03       		.byte	0x3
 3463 009d 2C       		.byte	0x2c
 3464 009e 4C000000 		.4byte	0x4c
 3465 00a2 03       		.uleb128 0x3
 3466 00a3 B8080000 		.4byte	.LASF14
 3467 00a7 03       		.byte	0x3
 3468 00a8 30       		.byte	0x30
 3469 00a9 5E000000 		.4byte	0x5e
 3470 00ad 05       		.uleb128 0x5
 3471 00ae A1020000 		.4byte	.LASF15
 3472 00b2 04       		.byte	0x4
 3473 00b3 9201     		.2byte	0x192
 3474 00b5 37000000 		.4byte	0x37
 3475 00b9 05       		.uleb128 0x5
 3476 00ba 0B000000 		.4byte	.LASF16
 3477 00be 04       		.byte	0x4
 3478 00bf 9301     		.2byte	0x193
 3479 00c1 45000000 		.4byte	0x45
 3480 00c5 05       		.uleb128 0x5
 3481 00c6 1A030000 		.4byte	.LASF17
 3482 00ca 04       		.byte	0x4
 3483 00cb 9401     		.2byte	0x194
 3484 00cd 69000000 		.4byte	0x69
 3485 00d1 05       		.uleb128 0x5
 3486 00d2 6F090000 		.4byte	.LASF18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 85


 3487 00d6 04       		.byte	0x4
 3488 00d7 9601     		.2byte	0x196
 3489 00d9 3E000000 		.4byte	0x3e
 3490 00dd 05       		.uleb128 0x5
 3491 00de C6020000 		.4byte	.LASF19
 3492 00e2 04       		.byte	0x4
 3493 00e3 9701     		.2byte	0x197
 3494 00e5 57000000 		.4byte	0x57
 3495 00e9 02       		.uleb128 0x2
 3496 00ea 04       		.byte	0x4
 3497 00eb 04       		.byte	0x4
 3498 00ec 57060000 		.4byte	.LASF20
 3499 00f0 02       		.uleb128 0x2
 3500 00f1 08       		.byte	0x8
 3501 00f2 04       		.byte	0x4
 3502 00f3 D9090000 		.4byte	.LASF21
 3503 00f7 02       		.uleb128 0x2
 3504 00f8 01       		.byte	0x1
 3505 00f9 08       		.byte	0x8
 3506 00fa B8070000 		.4byte	.LASF22
 3507 00fe 02       		.uleb128 0x2
 3508 00ff 08       		.byte	0x8
 3509 0100 04       		.byte	0x4
 3510 0101 AC070000 		.4byte	.LASF23
 3511 0105 02       		.uleb128 0x2
 3512 0106 04       		.byte	0x4
 3513 0107 07       		.byte	0x7
 3514 0108 93050000 		.4byte	.LASF24
 3515 010c 06       		.uleb128 0x6
 3516 010d 04       		.byte	0x4
 3517 010e F7000000 		.4byte	0xf7
 3518 0112 06       		.uleb128 0x6
 3519 0113 04       		.byte	0x4
 3520 0114 18010000 		.4byte	0x118
 3521 0118 07       		.uleb128 0x7
 3522 0119 F7000000 		.4byte	0xf7
 3523 011d 08       		.uleb128 0x8
 3524 011e F7000000 		.4byte	0xf7
 3525 0122 2D010000 		.4byte	0x12d
 3526 0126 09       		.uleb128 0x9
 3527 0127 05010000 		.4byte	0x105
 3528 012b 17       		.byte	0x17
 3529 012c 00       		.byte	0
 3530 012d 0A       		.uleb128 0xa
 3531 012e 746D00   		.ascii	"tm\000"
 3532 0131 24       		.byte	0x24
 3533 0132 05       		.byte	0x5
 3534 0133 21       		.byte	0x21
 3535 0134 A5010000 		.4byte	0x1a5
 3536 0138 0B       		.uleb128 0xb
 3537 0139 C1080000 		.4byte	.LASF25
 3538 013d 05       		.byte	0x5
 3539 013e 23       		.byte	0x23
 3540 013f 7E000000 		.4byte	0x7e
 3541 0143 00       		.byte	0
 3542 0144 0B       		.uleb128 0xb
 3543 0145 8C050000 		.4byte	.LASF26
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 86


 3544 0149 05       		.byte	0x5
 3545 014a 24       		.byte	0x24
 3546 014b 7E000000 		.4byte	0x7e
 3547 014f 04       		.byte	0x4
 3548 0150 0B       		.uleb128 0xb
 3549 0151 18000000 		.4byte	.LASF27
 3550 0155 05       		.byte	0x5
 3551 0156 25       		.byte	0x25
 3552 0157 7E000000 		.4byte	0x7e
 3553 015b 08       		.byte	0x8
 3554 015c 0B       		.uleb128 0xb
 3555 015d 8D080000 		.4byte	.LASF28
 3556 0161 05       		.byte	0x5
 3557 0162 26       		.byte	0x26
 3558 0163 7E000000 		.4byte	0x7e
 3559 0167 0C       		.byte	0xc
 3560 0168 0B       		.uleb128 0xb
 3561 0169 4C030000 		.4byte	.LASF29
 3562 016d 05       		.byte	0x5
 3563 016e 27       		.byte	0x27
 3564 016f 7E000000 		.4byte	0x7e
 3565 0173 10       		.byte	0x10
 3566 0174 0B       		.uleb128 0xb
 3567 0175 C3030000 		.4byte	.LASF30
 3568 0179 05       		.byte	0x5
 3569 017a 28       		.byte	0x28
 3570 017b 7E000000 		.4byte	0x7e
 3571 017f 14       		.byte	0x14
 3572 0180 0B       		.uleb128 0xb
 3573 0181 68070000 		.4byte	.LASF31
 3574 0185 05       		.byte	0x5
 3575 0186 29       		.byte	0x29
 3576 0187 7E000000 		.4byte	0x7e
 3577 018b 18       		.byte	0x18
 3578 018c 0B       		.uleb128 0xb
 3579 018d 20000000 		.4byte	.LASF32
 3580 0191 05       		.byte	0x5
 3581 0192 2A       		.byte	0x2a
 3582 0193 7E000000 		.4byte	0x7e
 3583 0197 1C       		.byte	0x1c
 3584 0198 0B       		.uleb128 0xb
 3585 0199 5F040000 		.4byte	.LASF33
 3586 019d 05       		.byte	0x5
 3587 019e 2B       		.byte	0x2b
 3588 019f 7E000000 		.4byte	0x7e
 3589 01a3 20       		.byte	0x20
 3590 01a4 00       		.byte	0
 3591 01a5 0C       		.uleb128 0xc
 3592 01a6 8101     		.2byte	0x181
 3593 01a8 06       		.byte	0x6
 3594 01a9 0A       		.byte	0xa
 3595 01aa D3010000 		.4byte	0x1d3
 3596 01ae 0B       		.uleb128 0xb
 3597 01af F1050000 		.4byte	.LASF34
 3598 01b3 06       		.byte	0x6
 3599 01b4 0C       		.byte	0xc
 3600 01b5 D3010000 		.4byte	0x1d3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 87


 3601 01b9 00       		.byte	0
 3602 01ba 0B       		.uleb128 0xb
 3603 01bb F9080000 		.4byte	.LASF35
 3604 01bf 06       		.byte	0x6
 3605 01c0 0D       		.byte	0xd
 3606 01c1 AD000000 		.4byte	0xad
 3607 01c5 80       		.byte	0x80
 3608 01c6 0B       		.uleb128 0xb
 3609 01c7 2B070000 		.4byte	.LASF36
 3610 01cb 06       		.byte	0x6
 3611 01cc 0F       		.byte	0xf
 3612 01cd E3010000 		.4byte	0x1e3
 3613 01d1 81       		.byte	0x81
 3614 01d2 00       		.byte	0
 3615 01d3 08       		.uleb128 0x8
 3616 01d4 F7000000 		.4byte	0xf7
 3617 01d8 E3010000 		.4byte	0x1e3
 3618 01dc 09       		.uleb128 0x9
 3619 01dd 05010000 		.4byte	0x105
 3620 01e1 7F       		.byte	0x7f
 3621 01e2 00       		.byte	0
 3622 01e3 08       		.uleb128 0x8
 3623 01e4 F7000000 		.4byte	0xf7
 3624 01e8 F3010000 		.4byte	0x1f3
 3625 01ec 09       		.uleb128 0x9
 3626 01ed 05010000 		.4byte	0x105
 3627 01f1 FF       		.byte	0xff
 3628 01f2 00       		.byte	0
 3629 01f3 03       		.uleb128 0x3
 3630 01f4 13070000 		.4byte	.LASF37
 3631 01f8 06       		.byte	0x6
 3632 01f9 10       		.byte	0x10
 3633 01fa A5010000 		.4byte	0x1a5
 3634 01fe 0D       		.uleb128 0xd
 3635 01ff 2C       		.byte	0x2c
 3636 0200 07       		.byte	0x7
 3637 0201 14       		.byte	0x14
 3638 0202 2B020000 		.4byte	0x22b
 3639 0206 0E       		.uleb128 0xe
 3640 0207 6B657900 		.ascii	"key\000"
 3641 020b 07       		.byte	0x7
 3642 020c 15       		.byte	0x15
 3643 020d 2B020000 		.4byte	0x22b
 3644 0211 00       		.byte	0
 3645 0212 0B       		.uleb128 0xb
 3646 0213 12000000 		.4byte	.LASF38
 3647 0217 07       		.byte	0x7
 3648 0218 16       		.byte	0x16
 3649 0219 2B020000 		.4byte	0x22b
 3650 021d 14       		.byte	0x14
 3651 021e 0B       		.uleb128 0xb
 3652 021f 3B040000 		.4byte	.LASF39
 3653 0223 07       		.byte	0x7
 3654 0224 17       		.byte	0x17
 3655 0225 DD000000 		.4byte	0xdd
 3656 0229 28       		.byte	0x28
 3657 022a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 88


 3658 022b 08       		.uleb128 0x8
 3659 022c F7000000 		.4byte	0xf7
 3660 0230 3B020000 		.4byte	0x23b
 3661 0234 09       		.uleb128 0x9
 3662 0235 05010000 		.4byte	0x105
 3663 0239 13       		.byte	0x13
 3664 023a 00       		.byte	0
 3665 023b 03       		.uleb128 0x3
 3666 023c E5030000 		.4byte	.LASF40
 3667 0240 07       		.byte	0x7
 3668 0241 19       		.byte	0x19
 3669 0242 FE010000 		.4byte	0x1fe
 3670 0246 0D       		.uleb128 0xd
 3671 0247 3C       		.byte	0x3c
 3672 0248 08       		.byte	0x8
 3673 0249 36       		.byte	0x36
 3674 024a 73020000 		.4byte	0x273
 3675 024e 0B       		.uleb128 0xb
 3676 024f 86080000 		.4byte	.LASF41
 3677 0253 08       		.byte	0x8
 3678 0254 37       		.byte	0x37
 3679 0255 2B020000 		.4byte	0x22b
 3680 0259 00       		.byte	0
 3681 025a 0B       		.uleb128 0xb
 3682 025b E3070000 		.4byte	.LASF42
 3683 025f 08       		.byte	0x8
 3684 0260 38       		.byte	0x38
 3685 0261 2B020000 		.4byte	0x22b
 3686 0265 14       		.byte	0x14
 3687 0266 0B       		.uleb128 0xb
 3688 0267 26070000 		.4byte	.LASF43
 3689 026b 08       		.byte	0x8
 3690 026c 39       		.byte	0x39
 3691 026d 2B020000 		.4byte	0x22b
 3692 0271 28       		.byte	0x28
 3693 0272 00       		.byte	0
 3694 0273 03       		.uleb128 0x3
 3695 0274 F7070000 		.4byte	.LASF44
 3696 0278 08       		.byte	0x8
 3697 0279 3B       		.byte	0x3b
 3698 027a 46020000 		.4byte	0x246
 3699 027e 0D       		.uleb128 0xd
 3700 027f 20       		.byte	0x20
 3701 0280 08       		.byte	0x8
 3702 0281 3D       		.byte	0x3d
 3703 0282 E7020000 		.4byte	0x2e7
 3704 0286 0B       		.uleb128 0xb
 3705 0287 6C020000 		.4byte	.LASF45
 3706 028b 08       		.byte	0x8
 3707 028c 3E       		.byte	0x3e
 3708 028d 7E000000 		.4byte	0x7e
 3709 0291 00       		.byte	0
 3710 0292 0E       		.uleb128 0xe
 3711 0293 62657200 		.ascii	"ber\000"
 3712 0297 08       		.byte	0x8
 3713 0298 3F       		.byte	0x3f
 3714 0299 7E000000 		.4byte	0x7e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 89


 3715 029d 04       		.byte	0x4
 3716 029e 0B       		.uleb128 0xb
 3717 029f F4060000 		.4byte	.LASF46
 3718 02a3 08       		.byte	0x8
 3719 02a4 40       		.byte	0x40
 3720 02a5 7E000000 		.4byte	0x7e
 3721 02a9 08       		.byte	0x8
 3722 02aa 0B       		.uleb128 0xb
 3723 02ab BD010000 		.4byte	.LASF47
 3724 02af 08       		.byte	0x8
 3725 02b0 41       		.byte	0x41
 3726 02b1 7E000000 		.4byte	0x7e
 3727 02b5 0C       		.byte	0xc
 3728 02b6 0B       		.uleb128 0xb
 3729 02b7 D9060000 		.4byte	.LASF48
 3730 02bb 08       		.byte	0x8
 3731 02bc 42       		.byte	0x42
 3732 02bd 7E000000 		.4byte	0x7e
 3733 02c1 10       		.byte	0x10
 3734 02c2 0B       		.uleb128 0xb
 3735 02c3 32070000 		.4byte	.LASF49
 3736 02c7 08       		.byte	0x8
 3737 02c8 43       		.byte	0x43
 3738 02c9 7E000000 		.4byte	0x7e
 3739 02cd 14       		.byte	0x14
 3740 02ce 0B       		.uleb128 0xb
 3741 02cf DF010000 		.4byte	.LASF50
 3742 02d3 08       		.byte	0x8
 3743 02d4 44       		.byte	0x44
 3744 02d5 7E000000 		.4byte	0x7e
 3745 02d9 18       		.byte	0x18
 3746 02da 0B       		.uleb128 0xb
 3747 02db B3040000 		.4byte	.LASF51
 3748 02df 08       		.byte	0x8
 3749 02e0 45       		.byte	0x45
 3750 02e1 7E000000 		.4byte	0x7e
 3751 02e5 1C       		.byte	0x1c
 3752 02e6 00       		.byte	0
 3753 02e7 03       		.uleb128 0x3
 3754 02e8 37070000 		.4byte	.LASF52
 3755 02ec 08       		.byte	0x8
 3756 02ed 47       		.byte	0x47
 3757 02ee 7E020000 		.4byte	0x27e
 3758 02f2 0D       		.uleb128 0xd
 3759 02f3 10       		.byte	0x10
 3760 02f4 08       		.byte	0x8
 3761 02f5 49       		.byte	0x49
 3762 02f6 37030000 		.4byte	0x337
 3763 02fa 0B       		.uleb128 0xb
 3764 02fb E8050000 		.4byte	.LASF53
 3765 02ff 08       		.byte	0x8
 3766 0300 4A       		.byte	0x4a
 3767 0301 E9000000 		.4byte	0xe9
 3768 0305 00       		.byte	0
 3769 0306 0B       		.uleb128 0xb
 3770 0307 92000000 		.4byte	.LASF54
 3771 030b 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 90


 3772 030c 4B       		.byte	0x4b
 3773 030d E9000000 		.4byte	0xe9
 3774 0311 04       		.byte	0x4
 3775 0312 0B       		.uleb128 0xb
 3776 0313 98020000 		.4byte	.LASF55
 3777 0317 08       		.byte	0x8
 3778 0318 4C       		.byte	0x4c
 3779 0319 E9000000 		.4byte	0xe9
 3780 031d 08       		.byte	0x8
 3781 031e 0B       		.uleb128 0xb
 3782 031f 45040000 		.4byte	.LASF56
 3783 0323 08       		.byte	0x8
 3784 0324 4D       		.byte	0x4d
 3785 0325 B9000000 		.4byte	0xb9
 3786 0329 0C       		.byte	0xc
 3787 032a 0B       		.uleb128 0xb
 3788 032b 95080000 		.4byte	.LASF57
 3789 032f 08       		.byte	0x8
 3790 0330 4E       		.byte	0x4e
 3791 0331 AD000000 		.4byte	0xad
 3792 0335 0E       		.byte	0xe
 3793 0336 00       		.byte	0
 3794 0337 03       		.uleb128 0x3
 3795 0338 04080000 		.4byte	.LASF58
 3796 033c 08       		.byte	0x8
 3797 033d 50       		.byte	0x50
 3798 033e F2020000 		.4byte	0x2f2
 3799 0342 0D       		.uleb128 0xd
 3800 0343 08       		.byte	0x8
 3801 0344 08       		.byte	0x8
 3802 0345 53       		.byte	0x53
 3803 0346 AB030000 		.4byte	0x3ab
 3804 034a 0B       		.uleb128 0xb
 3805 034b CC020000 		.4byte	.LASF59
 3806 034f 08       		.byte	0x8
 3807 0350 55       		.byte	0x55
 3808 0351 AD000000 		.4byte	0xad
 3809 0355 00       		.byte	0
 3810 0356 0B       		.uleb128 0xb
 3811 0357 8B060000 		.4byte	.LASF60
 3812 035b 08       		.byte	0x8
 3813 035c 57       		.byte	0x57
 3814 035d AB030000 		.4byte	0x3ab
 3815 0361 01       		.byte	0x1
 3816 0362 0B       		.uleb128 0xb
 3817 0363 1C080000 		.4byte	.LASF61
 3818 0367 08       		.byte	0x8
 3819 0368 59       		.byte	0x59
 3820 0369 AD000000 		.4byte	0xad
 3821 036d 02       		.byte	0x2
 3822 036e 0B       		.uleb128 0xb
 3823 036f DE060000 		.4byte	.LASF62
 3824 0373 08       		.byte	0x8
 3825 0374 5B       		.byte	0x5b
 3826 0375 AD000000 		.4byte	0xad
 3827 0379 03       		.byte	0x3
 3828 037a 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 91


 3829 037b 7E030000 		.4byte	.LASF63
 3830 037f 08       		.byte	0x8
 3831 0380 5E       		.byte	0x5e
 3832 0381 AD000000 		.4byte	0xad
 3833 0385 04       		.byte	0x4
 3834 0386 0B       		.uleb128 0xb
 3835 0387 4B090000 		.4byte	.LASF64
 3836 038b 08       		.byte	0x8
 3837 038c 63       		.byte	0x63
 3838 038d AD000000 		.4byte	0xad
 3839 0391 05       		.byte	0x5
 3840 0392 0B       		.uleb128 0xb
 3841 0393 87070000 		.4byte	.LASF65
 3842 0397 08       		.byte	0x8
 3843 0398 65       		.byte	0x65
 3844 0399 AD000000 		.4byte	0xad
 3845 039d 06       		.byte	0x6
 3846 039e 0B       		.uleb128 0xb
 3847 039f 2E090000 		.4byte	.LASF66
 3848 03a3 08       		.byte	0x8
 3849 03a4 66       		.byte	0x66
 3850 03a5 AD000000 		.4byte	0xad
 3851 03a9 07       		.byte	0x7
 3852 03aa 00       		.byte	0
 3853 03ab 02       		.uleb128 0x2
 3854 03ac 01       		.byte	0x1
 3855 03ad 02       		.byte	0x2
 3856 03ae A7060000 		.4byte	.LASF67
 3857 03b2 03       		.uleb128 0x3
 3858 03b3 57050000 		.4byte	.LASF68
 3859 03b7 08       		.byte	0x8
 3860 03b8 68       		.byte	0x68
 3861 03b9 42030000 		.4byte	0x342
 3862 03bd 0D       		.uleb128 0xd
 3863 03be 06       		.byte	0x6
 3864 03bf 09       		.byte	0x9
 3865 03c0 2F       		.byte	0x2f
 3866 03c1 F6030000 		.4byte	0x3f6
 3867 03c5 0B       		.uleb128 0xb
 3868 03c6 C2010000 		.4byte	.LASF69
 3869 03ca 09       		.byte	0x9
 3870 03cb 31       		.byte	0x31
 3871 03cc B9000000 		.4byte	0xb9
 3872 03d0 00       		.byte	0
 3873 03d1 0B       		.uleb128 0xb
 3874 03d2 72020000 		.4byte	.LASF70
 3875 03d6 09       		.byte	0x9
 3876 03d7 32       		.byte	0x32
 3877 03d8 D1000000 		.4byte	0xd1
 3878 03dc 02       		.byte	0x2
 3879 03dd 0B       		.uleb128 0xb
 3880 03de 87090000 		.4byte	.LASF71
 3881 03e2 09       		.byte	0x9
 3882 03e3 33       		.byte	0x33
 3883 03e4 AD000000 		.4byte	0xad
 3884 03e8 04       		.byte	0x4
 3885 03e9 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 92


 3886 03ea 7A000000 		.4byte	.LASF72
 3887 03ee 09       		.byte	0x9
 3888 03ef 34       		.byte	0x34
 3889 03f0 AD000000 		.4byte	0xad
 3890 03f4 05       		.byte	0x5
 3891 03f5 00       		.byte	0
 3892 03f6 03       		.uleb128 0x3
 3893 03f7 A1060000 		.4byte	.LASF73
 3894 03fb 09       		.byte	0x9
 3895 03fc 37       		.byte	0x37
 3896 03fd 01040000 		.4byte	0x401
 3897 0401 0F       		.uleb128 0xf
 3898 0402 BD030000 		.4byte	0x3bd
 3899 0406 0D       		.uleb128 0xd
 3900 0407 1C       		.byte	0x1c
 3901 0408 09       		.byte	0x9
 3902 0409 3A       		.byte	0x3a
 3903 040a 27040000 		.4byte	0x427
 3904 040e 0B       		.uleb128 0xb
 3905 040f 68040000 		.4byte	.LASF74
 3906 0413 09       		.byte	0x9
 3907 0414 3C       		.byte	0x3c
 3908 0415 27040000 		.4byte	0x427
 3909 0419 00       		.byte	0
 3910 041a 0B       		.uleb128 0xb
 3911 041b 7B040000 		.4byte	.LASF75
 3912 041f 09       		.byte	0x9
 3913 0420 3D       		.byte	0x3d
 3914 0421 1D010000 		.4byte	0x11d
 3915 0425 04       		.byte	0x4
 3916 0426 00       		.byte	0
 3917 0427 06       		.uleb128 0x6
 3918 0428 04       		.byte	0x4
 3919 0429 73020000 		.4byte	0x273
 3920 042d 03       		.uleb128 0x3
 3921 042e 4C050000 		.4byte	.LASF76
 3922 0432 09       		.byte	0x9
 3923 0433 3F       		.byte	0x3f
 3924 0434 06040000 		.4byte	0x406
 3925 0438 0D       		.uleb128 0xd
 3926 0439 68       		.byte	0x68
 3927 043a 09       		.byte	0x9
 3928 043b 45       		.byte	0x45
 3929 043c 59040000 		.4byte	0x459
 3930 0440 0B       		.uleb128 0xb
 3931 0441 73040000 		.4byte	.LASF77
 3932 0445 09       		.byte	0x9
 3933 0446 4A       		.byte	0x4a
 3934 0447 59040000 		.4byte	0x459
 3935 044b 00       		.byte	0
 3936 044c 0B       		.uleb128 0xb
 3937 044d 57040000 		.4byte	.LASF78
 3938 0451 09       		.byte	0x9
 3939 0452 4B       		.byte	0x4b
 3940 0453 7E000000 		.4byte	0x7e
 3941 0457 64       		.byte	0x64
 3942 0458 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 93


 3943 0459 08       		.uleb128 0x8
 3944 045a F7000000 		.4byte	0xf7
 3945 045e 69040000 		.4byte	0x469
 3946 0462 09       		.uleb128 0x9
 3947 0463 05010000 		.4byte	0x105
 3948 0467 63       		.byte	0x63
 3949 0468 00       		.byte	0
 3950 0469 03       		.uleb128 0x3
 3951 046a 58090000 		.4byte	.LASF79
 3952 046e 09       		.byte	0x9
 3953 046f 51       		.byte	0x51
 3954 0470 38040000 		.4byte	0x438
 3955 0474 10       		.uleb128 0x10
 3956 0475 94060000 		.4byte	.LASF111
 3957 0479 01       		.byte	0x1
 3958 047a 12       		.byte	0x12
 3959 047b 00000000 		.4byte	.LFB64
 3960 047f 44000000 		.4byte	.LFE64-.LFB64
 3961 0483 01       		.uleb128 0x1
 3962 0484 9C       		.byte	0x9c
 3963 0485 11       		.uleb128 0x11
 3964 0486 5D060000 		.4byte	.LASF80
 3965 048a 01       		.byte	0x1
 3966 048b 1C       		.byte	0x1c
 3967 048c 00000000 		.4byte	.LFB65
 3968 0490 6C000000 		.4byte	.LFE65-.LFB65
 3969 0494 01       		.uleb128 0x1
 3970 0495 9C       		.byte	0x9c
 3971 0496 11       		.uleb128 0x11
 3972 0497 64080000 		.4byte	.LASF81
 3973 049b 01       		.byte	0x1
 3974 049c 36       		.byte	0x36
 3975 049d 00000000 		.4byte	.LFB66
 3976 04a1 32000000 		.4byte	.LFE66-.LFB66
 3977 04a5 01       		.uleb128 0x1
 3978 04a6 9C       		.byte	0x9c
 3979 04a7 11       		.uleb128 0x11
 3980 04a8 9B080000 		.4byte	.LASF82
 3981 04ac 01       		.byte	0x1
 3982 04ad 46       		.byte	0x46
 3983 04ae 00000000 		.4byte	.LFB67
 3984 04b2 20000000 		.4byte	.LFE67-.LFB67
 3985 04b6 01       		.uleb128 0x1
 3986 04b7 9C       		.byte	0x9c
 3987 04b8 11       		.uleb128 0x11
 3988 04b9 C8090000 		.4byte	.LASF83
 3989 04bd 01       		.byte	0x1
 3990 04be 4F       		.byte	0x4f
 3991 04bf 00000000 		.4byte	.LFB68
 3992 04c3 40000000 		.4byte	.LFE68-.LFB68
 3993 04c7 01       		.uleb128 0x1
 3994 04c8 9C       		.byte	0x9c
 3995 04c9 12       		.uleb128 0x12
 3996 04ca 89040000 		.4byte	.LASF97
 3997 04ce 01       		.byte	0x1
 3998 04cf 61       		.byte	0x61
 3999 04d0 AD000000 		.4byte	0xad
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 94


 4000 04d4 00000000 		.4byte	.LFB69
 4001 04d8 DC000000 		.4byte	.LFE69-.LFB69
 4002 04dc 01       		.uleb128 0x1
 4003 04dd 9C       		.byte	0x9c
 4004 04de 3D050000 		.4byte	0x53d
 4005 04e2 13       		.uleb128 0x13
 4006 04e3 75090000 		.4byte	.LASF84
 4007 04e7 01       		.byte	0x1
 4008 04e8 6A       		.byte	0x6a
 4009 04e9 AD000000 		.4byte	0xad
 4010 04ed 02       		.uleb128 0x2
 4011 04ee 91       		.byte	0x91
 4012 04ef 77       		.sleb128 -9
 4013 04f0 13       		.uleb128 0x13
 4014 04f1 7E090000 		.4byte	.LASF85
 4015 04f5 01       		.byte	0x1
 4016 04f6 6B       		.byte	0x6b
 4017 04f7 AD000000 		.4byte	0xad
 4018 04fb 02       		.uleb128 0x2
 4019 04fc 91       		.byte	0x91
 4020 04fd 74       		.sleb128 -12
 4021 04fe 13       		.uleb128 0x13
 4022 04ff 95090000 		.4byte	.LASF86
 4023 0503 01       		.byte	0x1
 4024 0504 6D       		.byte	0x6d
 4025 0505 57000000 		.4byte	0x57
 4026 0509 02       		.uleb128 0x2
 4027 050a 91       		.byte	0x91
 4028 050b 70       		.sleb128 -16
 4029 050c 14       		.uleb128 0x14
 4030 050d 26000000 		.4byte	.LBB2
 4031 0511 4A000000 		.4byte	.LBE2-.LBB2
 4032 0515 13       		.uleb128 0x13
 4033 0516 7E090000 		.4byte	.LASF85
 4034 051a 01       		.byte	0x1
 4035 051b 70       		.byte	0x70
 4036 051c AD000000 		.4byte	0xad
 4037 0520 02       		.uleb128 0x2
 4038 0521 91       		.byte	0x91
 4039 0522 76       		.sleb128 -10
 4040 0523 14       		.uleb128 0x14
 4041 0524 2C000000 		.4byte	.LBB3
 4042 0528 2A000000 		.4byte	.LBE3-.LBB3
 4043 052c 13       		.uleb128 0x13
 4044 052d F1030000 		.4byte	.LASF87
 4045 0531 01       		.byte	0x1
 4046 0532 72       		.byte	0x72
 4047 0533 AD000000 		.4byte	0xad
 4048 0537 02       		.uleb128 0x2
 4049 0538 91       		.byte	0x91
 4050 0539 75       		.sleb128 -11
 4051 053a 00       		.byte	0
 4052 053b 00       		.byte	0
 4053 053c 00       		.byte	0
 4054 053d 11       		.uleb128 0x11
 4055 053e 70070000 		.4byte	.LASF88
 4056 0542 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 95


 4057 0543 93       		.byte	0x93
 4058 0544 00000000 		.4byte	.LFB70
 4059 0548 1C000000 		.4byte	.LFE70-.LFB70
 4060 054c 01       		.uleb128 0x1
 4061 054d 9C       		.byte	0x9c
 4062 054e 11       		.uleb128 0x11
 4063 054f 45070000 		.4byte	.LASF89
 4064 0553 01       		.byte	0x1
 4065 0554 9B       		.byte	0x9b
 4066 0555 00000000 		.4byte	.LFB71
 4067 0559 28000000 		.4byte	.LFE71-.LFB71
 4068 055d 01       		.uleb128 0x1
 4069 055e 9C       		.byte	0x9c
 4070 055f 15       		.uleb128 0x15
 4071 0560 3B050000 		.4byte	.LASF101
 4072 0564 01       		.byte	0x1
 4073 0565 A6       		.byte	0xa6
 4074 0566 8C000000 		.4byte	0x8c
 4075 056a 00000000 		.4byte	.LFB72
 4076 056e C8000000 		.4byte	.LFE72-.LFB72
 4077 0572 01       		.uleb128 0x1
 4078 0573 9C       		.byte	0x9c
 4079 0574 F1050000 		.4byte	0x5f1
 4080 0578 16       		.uleb128 0x16
 4081 0579 3D060000 		.4byte	.LASF90
 4082 057d 01       		.byte	0x1
 4083 057e A6       		.byte	0xa6
 4084 057f 0C010000 		.4byte	0x10c
 4085 0583 02       		.uleb128 0x2
 4086 0584 91       		.byte	0x91
 4087 0585 5C       		.sleb128 -36
 4088 0586 16       		.uleb128 0x16
 4089 0587 9F090000 		.4byte	.LASF91
 4090 058b 01       		.byte	0x1
 4091 058c A6       		.byte	0xa6
 4092 058d 0C010000 		.4byte	0x10c
 4093 0591 02       		.uleb128 0x2
 4094 0592 91       		.byte	0x91
 4095 0593 58       		.sleb128 -40
 4096 0594 16       		.uleb128 0x16
 4097 0595 1C040000 		.4byte	.LASF92
 4098 0599 01       		.byte	0x1
 4099 059a A6       		.byte	0xa6
 4100 059b A2000000 		.4byte	0xa2
 4101 059f 02       		.uleb128 0x2
 4102 05a0 91       		.byte	0x91
 4103 05a1 54       		.sleb128 -44
 4104 05a2 13       		.uleb128 0x13
 4105 05a3 10050000 		.4byte	.LASF93
 4106 05a7 01       		.byte	0x1
 4107 05a8 A8       		.byte	0xa8
 4108 05a9 C5000000 		.4byte	0xc5
 4109 05ad 02       		.uleb128 0x2
 4110 05ae 91       		.byte	0x91
 4111 05af 74       		.sleb128 -12
 4112 05b0 14       		.uleb128 0x14
 4113 05b1 16000000 		.4byte	.LBB4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 96


 4114 05b5 88000000 		.4byte	.LBE4-.LBB4
 4115 05b9 13       		.uleb128 0x13
 4116 05ba 46060000 		.4byte	.LASF94
 4117 05be 01       		.byte	0x1
 4118 05bf AC       		.byte	0xac
 4119 05c0 0C010000 		.4byte	0x10c
 4120 05c4 02       		.uleb128 0x2
 4121 05c5 91       		.byte	0x91
 4122 05c6 64       		.sleb128 -28
 4123 05c7 13       		.uleb128 0x13
 4124 05c8 D3060000 		.4byte	.LASF95
 4125 05cc 01       		.byte	0x1
 4126 05cd AD       		.byte	0xad
 4127 05ce A2000000 		.4byte	0xa2
 4128 05d2 02       		.uleb128 0x2
 4129 05d3 91       		.byte	0x91
 4130 05d4 6C       		.sleb128 -20
 4131 05d5 17       		.uleb128 0x17
 4132 05d6 6900     		.ascii	"i\000"
 4133 05d8 01       		.byte	0x1
 4134 05d9 AE       		.byte	0xae
 4135 05da A2000000 		.4byte	0xa2
 4136 05de 02       		.uleb128 0x2
 4137 05df 91       		.byte	0x91
 4138 05e0 70       		.sleb128 -16
 4139 05e1 13       		.uleb128 0x13
 4140 05e2 21030000 		.4byte	.LASF96
 4141 05e6 01       		.byte	0x1
 4142 05e7 AE       		.byte	0xae
 4143 05e8 A2000000 		.4byte	0xa2
 4144 05ec 02       		.uleb128 0x2
 4145 05ed 91       		.byte	0x91
 4146 05ee 68       		.sleb128 -24
 4147 05ef 00       		.byte	0
 4148 05f0 00       		.byte	0
 4149 05f1 12       		.uleb128 0x12
 4150 05f2 12060000 		.4byte	.LASF98
 4151 05f6 01       		.byte	0x1
 4152 05f7 DA       		.byte	0xda
 4153 05f8 F3010000 		.4byte	0x1f3
 4154 05fc 00000000 		.4byte	.LFB73
 4155 0600 00010000 		.4byte	.LFE73-.LFB73
 4156 0604 01       		.uleb128 0x1
 4157 0605 9C       		.byte	0x9c
 4158 0606 48060000 		.4byte	0x648
 4159 060a 13       		.uleb128 0x13
 4160 060b 66010000 		.4byte	.LASF99
 4161 060f 01       		.byte	0x1
 4162 0610 DC       		.byte	0xdc
 4163 0611 F3010000 		.4byte	0x1f3
 4164 0615 03       		.uleb128 0x3
 4165 0616 91       		.byte	0x91
 4166 0617 E47C     		.sleb128 -412
 4167 0619 14       		.uleb128 0x14
 4168 061a 4A000000 		.4byte	.LBB5
 4169 061e 86000000 		.4byte	.LBE5-.LBB5
 4170 0622 17       		.uleb128 0x17
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 97


 4171 0623 6900     		.ascii	"i\000"
 4172 0625 01       		.byte	0x1
 4173 0626 E3       		.byte	0xe3
 4174 0627 7E000000 		.4byte	0x7e
 4175 062b 02       		.uleb128 0x2
 4176 062c 91       		.byte	0x91
 4177 062d 6C       		.sleb128 -20
 4178 062e 14       		.uleb128 0x14
 4179 062f 70000000 		.4byte	.LBB6
 4180 0633 46000000 		.4byte	.LBE6-.LBB6
 4181 0637 13       		.uleb128 0x13
 4182 0638 FA020000 		.4byte	.LASF100
 4183 063c 01       		.byte	0x1
 4184 063d F0       		.byte	0xf0
 4185 063e 57000000 		.4byte	0x57
 4186 0642 02       		.uleb128 0x2
 4187 0643 91       		.byte	0x91
 4188 0644 68       		.sleb128 -24
 4189 0645 00       		.byte	0
 4190 0646 00       		.byte	0
 4191 0647 00       		.byte	0
 4192 0648 18       		.uleb128 0x18
 4193 0649 0D040000 		.4byte	.LASF102
 4194 064d 01       		.byte	0x1
 4195 064e 0401     		.2byte	0x104
 4196 0650 AD000000 		.4byte	0xad
 4197 0654 00000000 		.4byte	.LFB74
 4198 0658 78000000 		.4byte	.LFE74-.LFB74
 4199 065c 01       		.uleb128 0x1
 4200 065d 9C       		.byte	0x9c
 4201 065e B9060000 		.4byte	0x6b9
 4202 0662 19       		.uleb128 0x19
 4203 0663 FB040000 		.4byte	.LASF103
 4204 0667 01       		.byte	0x1
 4205 0668 0401     		.2byte	0x104
 4206 066a 0C010000 		.4byte	0x10c
 4207 066e 02       		.uleb128 0x2
 4208 066f 91       		.byte	0x91
 4209 0670 6C       		.sleb128 -20
 4210 0671 19       		.uleb128 0x19
 4211 0672 A0040000 		.4byte	.LASF104
 4212 0676 01       		.byte	0x1
 4213 0677 0401     		.2byte	0x104
 4214 0679 12010000 		.4byte	0x112
 4215 067d 02       		.uleb128 0x2
 4216 067e 91       		.byte	0x91
 4217 067f 68       		.sleb128 -24
 4218 0680 19       		.uleb128 0x19
 4219 0681 C6040000 		.4byte	.LASF105
 4220 0685 01       		.byte	0x1
 4221 0686 0401     		.2byte	0x104
 4222 0688 12010000 		.4byte	0x112
 4223 068c 02       		.uleb128 0x2
 4224 068d 91       		.byte	0x91
 4225 068e 64       		.sleb128 -28
 4226 068f 19       		.uleb128 0x19
 4227 0690 AC040000 		.4byte	.LASF106
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 98


 4228 0694 01       		.byte	0x1
 4229 0695 0401     		.2byte	0x104
 4230 0697 0C010000 		.4byte	0x10c
 4231 069b 02       		.uleb128 0x2
 4232 069c 91       		.byte	0x91
 4233 069d 60       		.sleb128 -32
 4234 069e 1A       		.uleb128 0x1a
 4235 069f 6100     		.ascii	"a\000"
 4236 06a1 01       		.byte	0x1
 4237 06a2 0601     		.2byte	0x106
 4238 06a4 0C010000 		.4byte	0x10c
 4239 06a8 02       		.uleb128 0x2
 4240 06a9 91       		.byte	0x91
 4241 06aa 74       		.sleb128 -12
 4242 06ab 1A       		.uleb128 0x1a
 4243 06ac 6200     		.ascii	"b\000"
 4244 06ae 01       		.byte	0x1
 4245 06af 0601     		.2byte	0x106
 4246 06b1 0C010000 		.4byte	0x10c
 4247 06b5 02       		.uleb128 0x2
 4248 06b6 91       		.byte	0x91
 4249 06b7 70       		.sleb128 -16
 4250 06b8 00       		.byte	0
 4251 06b9 1B       		.uleb128 0x1b
 4252 06ba BD070000 		.4byte	.LASF107
 4253 06be 01       		.byte	0x1
 4254 06bf 2301     		.2byte	0x123
 4255 06c1 AD000000 		.4byte	0xad
 4256 06c5 00000000 		.4byte	.LFB75
 4257 06c9 74010000 		.4byte	.LFE75-.LFB75
 4258 06cd 01       		.uleb128 0x1
 4259 06ce 9C       		.byte	0x9c
 4260 06cf EB060000 		.4byte	0x6eb
 4261 06d3 14       		.uleb128 0x14
 4262 06d4 2E000000 		.4byte	.LBB7
 4263 06d8 68000000 		.4byte	.LBE7-.LBB7
 4264 06dc 1A       		.uleb128 0x1a
 4265 06dd 6900     		.ascii	"i\000"
 4266 06df 01       		.byte	0x1
 4267 06e0 3101     		.2byte	0x131
 4268 06e2 AD000000 		.4byte	0xad
 4269 06e6 02       		.uleb128 0x2
 4270 06e7 91       		.byte	0x91
 4271 06e8 77       		.sleb128 -9
 4272 06e9 00       		.byte	0
 4273 06ea 00       		.byte	0
 4274 06eb 1B       		.uleb128 0x1b
 4275 06ec B6050000 		.4byte	.LASF108
 4276 06f0 01       		.byte	0x1
 4277 06f1 7501     		.2byte	0x175
 4278 06f3 AD000000 		.4byte	0xad
 4279 06f7 00000000 		.4byte	.LFB76
 4280 06fb B8000000 		.4byte	.LFE76-.LFB76
 4281 06ff 01       		.uleb128 0x1
 4282 0700 9C       		.byte	0x9c
 4283 0701 2E070000 		.4byte	0x72e
 4284 0705 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 99


 4285 0706 F9080000 		.4byte	.LASF35
 4286 070a 01       		.byte	0x1
 4287 070b 7901     		.2byte	0x179
 4288 070d AD000000 		.4byte	0xad
 4289 0711 02       		.uleb128 0x2
 4290 0712 91       		.byte	0x91
 4291 0713 77       		.sleb128 -9
 4292 0714 14       		.uleb128 0x14
 4293 0715 36000000 		.4byte	.LBB8
 4294 0719 48000000 		.4byte	.LBE8-.LBB8
 4295 071d 1C       		.uleb128 0x1c
 4296 071e 00050000 		.4byte	.LASF109
 4297 0722 01       		.byte	0x1
 4298 0723 8101     		.2byte	0x181
 4299 0725 2E070000 		.4byte	0x72e
 4300 0729 02       		.uleb128 0x2
 4301 072a 91       		.byte	0x91
 4302 072b 6C       		.sleb128 -20
 4303 072c 00       		.byte	0
 4304 072d 00       		.byte	0
 4305 072e 08       		.uleb128 0x8
 4306 072f F7000000 		.4byte	0xf7
 4307 0733 3E070000 		.4byte	0x73e
 4308 0737 09       		.uleb128 0x9
 4309 0738 05010000 		.4byte	0x105
 4310 073c 09       		.byte	0x9
 4311 073d 00       		.byte	0
 4312 073e 1D       		.uleb128 0x1d
 4313 073f 1C020000 		.4byte	.LASF110
 4314 0743 01       		.byte	0x1
 4315 0744 9301     		.2byte	0x193
 4316 0746 00000000 		.4byte	.LFB77
 4317 074a 1C000000 		.4byte	.LFE77-.LFB77
 4318 074e 01       		.uleb128 0x1
 4319 074f 9C       		.byte	0x9c
 4320 0750 1E       		.uleb128 0x1e
 4321 0751 29080000 		.4byte	.LASF112
 4322 0755 01       		.byte	0x1
 4323 0756 A301     		.2byte	0x1a3
 4324 0758 AD000000 		.4byte	0xad
 4325 075c 00000000 		.4byte	.LFB78
 4326 0760 28000000 		.4byte	.LFE78-.LFB78
 4327 0764 01       		.uleb128 0x1
 4328 0765 9C       		.byte	0x9c
 4329 0766 1F       		.uleb128 0x1f
 4330 0767 24040000 		.4byte	.LASF115
 4331 076b 01       		.byte	0x1
 4332 076c AE01     		.2byte	0x1ae
 4333 076e 00000000 		.4byte	.LFB79
 4334 0772 84000000 		.4byte	.LFE79-.LFB79
 4335 0776 01       		.uleb128 0x1
 4336 0777 9C       		.byte	0x9c
 4337 0778 8C070000 		.4byte	0x78c
 4338 077c 1C       		.uleb128 0x1c
 4339 077d 1D060000 		.4byte	.LASF113
 4340 0781 01       		.byte	0x1
 4341 0782 BB01     		.2byte	0x1bb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 100


 4342 0784 7E000000 		.4byte	0x7e
 4343 0788 02       		.uleb128 0x2
 4344 0789 91       		.byte	0x91
 4345 078a 74       		.sleb128 -12
 4346 078b 00       		.byte	0
 4347 078c 20       		.uleb128 0x20
 4348 078d A3030000 		.4byte	.LASF114
 4349 0791 01       		.byte	0x1
 4350 0792 CD01     		.2byte	0x1cd
 4351 0794 00000000 		.4byte	.LFB80
 4352 0798 40000000 		.4byte	.LFE80-.LFB80
 4353 079c 01       		.uleb128 0x1
 4354 079d 9C       		.byte	0x9c
 4355 079e 1F       		.uleb128 0x1f
 4356 079f C8080000 		.4byte	.LASF116
 4357 07a3 01       		.byte	0x1
 4358 07a4 DC01     		.2byte	0x1dc
 4359 07a6 00000000 		.4byte	.LFB81
 4360 07aa C4050000 		.4byte	.LFE81-.LFB81
 4361 07ae 01       		.uleb128 0x1
 4362 07af 9C       		.byte	0x9c
 4363 07b0 D7080000 		.4byte	0x8d7
 4364 07b4 1C       		.uleb128 0x1c
 4365 07b5 E8060000 		.4byte	.LASF117
 4366 07b9 01       		.byte	0x1
 4367 07ba DF01     		.2byte	0x1df
 4368 07bc 2E070000 		.4byte	0x72e
 4369 07c0 02       		.uleb128 0x2
 4370 07c1 91       		.byte	0x91
 4371 07c2 64       		.sleb128 -28
 4372 07c3 1C       		.uleb128 0x1c
 4373 07c4 EF020000 		.4byte	.LASF118
 4374 07c8 01       		.byte	0x1
 4375 07c9 E001     		.2byte	0x1e0
 4376 07cb 2E070000 		.4byte	0x72e
 4377 07cf 02       		.uleb128 0x2
 4378 07d0 91       		.byte	0x91
 4379 07d1 58       		.sleb128 -40
 4380 07d2 1C       		.uleb128 0x1c
 4381 07d3 EB080000 		.4byte	.LASF119
 4382 07d7 01       		.byte	0x1
 4383 07d8 E101     		.2byte	0x1e1
 4384 07da 2E070000 		.4byte	0x72e
 4385 07de 02       		.uleb128 0x2
 4386 07df 91       		.byte	0x91
 4387 07e0 4C       		.sleb128 -52
 4388 07e1 1C       		.uleb128 0x1c
 4389 07e2 6E060000 		.4byte	.LASF120
 4390 07e6 01       		.byte	0x1
 4391 07e7 E201     		.2byte	0x1e2
 4392 07e9 2E070000 		.4byte	0x72e
 4393 07ed 02       		.uleb128 0x2
 4394 07ee 91       		.byte	0x91
 4395 07ef 40       		.sleb128 -64
 4396 07f0 1C       		.uleb128 0x1c
 4397 07f1 96030000 		.4byte	.LASF121
 4398 07f5 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 101


 4399 07f6 E301     		.2byte	0x1e3
 4400 07f8 2E070000 		.4byte	0x72e
 4401 07fc 03       		.uleb128 0x3
 4402 07fd 91       		.byte	0x91
 4403 07fe B47F     		.sleb128 -76
 4404 0800 1C       		.uleb128 0x1c
 4405 0801 7C080000 		.4byte	.LASF122
 4406 0805 01       		.byte	0x1
 4407 0806 E701     		.2byte	0x1e7
 4408 0808 59040000 		.4byte	0x459
 4409 080c 03       		.uleb128 0x3
 4410 080d 91       		.byte	0x91
 4411 080e D07E     		.sleb128 -176
 4412 0810 1C       		.uleb128 0x1c
 4413 0811 53030000 		.4byte	.LASF123
 4414 0815 01       		.byte	0x1
 4415 0816 EA01     		.2byte	0x1ea
 4416 0818 59040000 		.4byte	0x459
 4417 081c 03       		.uleb128 0x3
 4418 081d 91       		.byte	0x91
 4419 081e EC7D     		.sleb128 -276
 4420 0820 1C       		.uleb128 0x1c
 4421 0821 9C050000 		.4byte	.LASF124
 4422 0825 01       		.byte	0x1
 4423 0826 ED01     		.2byte	0x1ed
 4424 0828 59040000 		.4byte	0x459
 4425 082c 03       		.uleb128 0x3
 4426 082d 91       		.byte	0x91
 4427 082e 887D     		.sleb128 -376
 4428 0830 1C       		.uleb128 0x1c
 4429 0831 7C060000 		.4byte	.LASF125
 4430 0835 01       		.byte	0x1
 4431 0836 F001     		.2byte	0x1f0
 4432 0838 D7080000 		.4byte	0x8d7
 4433 083c 03       		.uleb128 0x3
 4434 083d 91       		.byte	0x91
 4435 083e C07B     		.sleb128 -576
 4436 0840 1C       		.uleb128 0x1c
 4437 0841 CC020000 		.4byte	.LASF59
 4438 0845 01       		.byte	0x1
 4439 0846 2E02     		.2byte	0x22e
 4440 0848 7E000000 		.4byte	0x7e
 4441 084c 03       		.uleb128 0x3
 4442 084d 91       		.byte	0x91
 4443 084e BC7B     		.sleb128 -580
 4444 0850 1C       		.uleb128 0x1c
 4445 0851 8B060000 		.4byte	.LASF60
 4446 0855 01       		.byte	0x1
 4447 0856 2E02     		.2byte	0x22e
 4448 0858 7E000000 		.4byte	0x7e
 4449 085c 03       		.uleb128 0x3
 4450 085d 91       		.byte	0x91
 4451 085e B87B     		.sleb128 -584
 4452 0860 1C       		.uleb128 0x1c
 4453 0861 4E010000 		.4byte	.LASF126
 4454 0865 01       		.byte	0x1
 4455 0866 2E02     		.2byte	0x22e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 102


 4456 0868 7E000000 		.4byte	0x7e
 4457 086c 03       		.uleb128 0x3
 4458 086d 91       		.byte	0x91
 4459 086e B47B     		.sleb128 -588
 4460 0870 1C       		.uleb128 0x1c
 4461 0871 6E050000 		.4byte	.LASF127
 4462 0875 01       		.byte	0x1
 4463 0876 2E02     		.2byte	0x22e
 4464 0878 7E000000 		.4byte	0x7e
 4465 087c 03       		.uleb128 0x3
 4466 087d 91       		.byte	0x91
 4467 087e B07B     		.sleb128 -592
 4468 0880 1C       		.uleb128 0x1c
 4469 0881 05050000 		.4byte	.LASF128
 4470 0885 01       		.byte	0x1
 4471 0886 2E02     		.2byte	0x22e
 4472 0888 7E000000 		.4byte	0x7e
 4473 088c 03       		.uleb128 0x3
 4474 088d 91       		.byte	0x91
 4475 088e AC7B     		.sleb128 -596
 4476 0890 1C       		.uleb128 0x1c
 4477 0891 0C0A0000 		.4byte	.LASF129
 4478 0895 01       		.byte	0x1
 4479 0896 2E02     		.2byte	0x22e
 4480 0898 7E000000 		.4byte	0x7e
 4481 089c 03       		.uleb128 0x3
 4482 089d 91       		.byte	0x91
 4483 089e A87B     		.sleb128 -600
 4484 08a0 1C       		.uleb128 0x1c
 4485 08a1 A7020000 		.4byte	.LASF130
 4486 08a5 01       		.byte	0x1
 4487 08a6 2E02     		.2byte	0x22e
 4488 08a8 7E000000 		.4byte	0x7e
 4489 08ac 03       		.uleb128 0x3
 4490 08ad 91       		.byte	0x91
 4491 08ae A47B     		.sleb128 -604
 4492 08b0 1C       		.uleb128 0x1c
 4493 08b1 02020000 		.4byte	.LASF131
 4494 08b5 01       		.byte	0x1
 4495 08b6 2E02     		.2byte	0x22e
 4496 08b8 7E000000 		.4byte	0x7e
 4497 08bc 03       		.uleb128 0x3
 4498 08bd 91       		.byte	0x91
 4499 08be A07B     		.sleb128 -608
 4500 08c0 21       		.uleb128 0x21
 4501 08c1 00000000 		.4byte	.Ldebug_ranges0+0
 4502 08c5 1C       		.uleb128 0x1c
 4503 08c6 5E020000 		.4byte	.LASF132
 4504 08ca 01       		.byte	0x1
 4505 08cb 5D02     		.2byte	0x25d
 4506 08cd 59040000 		.4byte	0x459
 4507 08d1 03       		.uleb128 0x3
 4508 08d2 91       		.byte	0x91
 4509 08d3 BC7A     		.sleb128 -708
 4510 08d5 00       		.byte	0
 4511 08d6 00       		.byte	0
 4512 08d7 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 103


 4513 08d8 F7000000 		.4byte	0xf7
 4514 08dc E7080000 		.4byte	0x8e7
 4515 08e0 09       		.uleb128 0x9
 4516 08e1 05010000 		.4byte	0x105
 4517 08e5 C7       		.byte	0xc7
 4518 08e6 00       		.byte	0
 4519 08e7 1F       		.uleb128 0x1f
 4520 08e8 D6020000 		.4byte	.LASF133
 4521 08ec 01       		.byte	0x1
 4522 08ed 9E02     		.2byte	0x29e
 4523 08ef 00000000 		.4byte	.LFB82
 4524 08f3 68010000 		.4byte	.LFE82-.LFB82
 4525 08f7 01       		.uleb128 0x1
 4526 08f8 9C       		.byte	0x9c
 4527 08f9 17090000 		.4byte	0x917
 4528 08fd 14       		.uleb128 0x14
 4529 08fe DA000000 		.4byte	.LBB12
 4530 0902 38000000 		.4byte	.LBE12-.LBB12
 4531 0906 1C       		.uleb128 0x1c
 4532 0907 DE070000 		.4byte	.LASF134
 4533 090b 01       		.byte	0x1
 4534 090c CC02     		.2byte	0x2cc
 4535 090e 2E070000 		.4byte	0x72e
 4536 0912 02       		.uleb128 0x2
 4537 0913 91       		.byte	0x91
 4538 0914 6C       		.sleb128 -20
 4539 0915 00       		.byte	0
 4540 0916 00       		.byte	0
 4541 0917 1B       		.uleb128 0x1b
 4542 0918 35030000 		.4byte	.LASF135
 4543 091c 01       		.byte	0x1
 4544 091d DF02     		.2byte	0x2df
 4545 091f 57000000 		.4byte	0x57
 4546 0923 00000000 		.4byte	.LFB83
 4547 0927 44010000 		.4byte	.LFE83-.LFB83
 4548 092b 01       		.uleb128 0x1
 4549 092c 9C       		.byte	0x9c
 4550 092d D3090000 		.4byte	0x9d3
 4551 0931 1C       		.uleb128 0x1c
 4552 0932 DA040000 		.4byte	.LASF136
 4553 0936 01       		.byte	0x1
 4554 0937 EA02     		.2byte	0x2ea
 4555 0939 57000000 		.4byte	0x57
 4556 093d 02       		.uleb128 0x2
 4557 093e 91       		.byte	0x91
 4558 093f 74       		.sleb128 -12
 4559 0940 14       		.uleb128 0x14
 4560 0941 30000000 		.4byte	.LBB13
 4561 0945 DE000000 		.4byte	.LBE13-.LBB13
 4562 0949 1C       		.uleb128 0x1c
 4563 094a FA020000 		.4byte	.LASF100
 4564 094e 01       		.byte	0x1
 4565 094f EF02     		.2byte	0x2ef
 4566 0951 D3090000 		.4byte	0x9d3
 4567 0955 02       		.uleb128 0x2
 4568 0956 91       		.byte	0x91
 4569 0957 54       		.sleb128 -44
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 104


 4570 0958 1A       		.uleb128 0x1a
 4571 0959 7400     		.ascii	"t\000"
 4572 095b 01       		.byte	0x1
 4573 095c F502     		.2byte	0x2f5
 4574 095e 2D010000 		.4byte	0x12d
 4575 0962 03       		.uleb128 0x3
 4576 0963 91       		.byte	0x91
 4577 0964 947F     		.sleb128 -108
 4578 0966 1C       		.uleb128 0x1c
 4579 0967 3E020000 		.4byte	.LASF137
 4580 096b 01       		.byte	0x1
 4581 096c F802     		.2byte	0x2f8
 4582 096e 7E000000 		.4byte	0x7e
 4583 0972 02       		.uleb128 0x2
 4584 0973 91       		.byte	0x91
 4585 0974 50       		.sleb128 -48
 4586 0975 1C       		.uleb128 0x1c
 4587 0976 B0050000 		.4byte	.LASF138
 4588 097a 01       		.byte	0x1
 4589 097b F802     		.2byte	0x2f8
 4590 097d 7E000000 		.4byte	0x7e
 4591 0981 02       		.uleb128 0x2
 4592 0982 91       		.byte	0x91
 4593 0983 4C       		.sleb128 -52
 4594 0984 1A       		.uleb128 0x1a
 4595 0985 64617900 		.ascii	"day\000"
 4596 0989 01       		.byte	0x1
 4597 098a F802     		.2byte	0x2f8
 4598 098c 7E000000 		.4byte	0x7e
 4599 0990 02       		.uleb128 0x2
 4600 0991 91       		.byte	0x91
 4601 0992 48       		.sleb128 -56
 4602 0993 1C       		.uleb128 0x1c
 4603 0994 38060000 		.4byte	.LASF139
 4604 0998 01       		.byte	0x1
 4605 0999 F802     		.2byte	0x2f8
 4606 099b 7E000000 		.4byte	0x7e
 4607 099f 02       		.uleb128 0x2
 4608 09a0 91       		.byte	0x91
 4609 09a1 44       		.sleb128 -60
 4610 09a2 1C       		.uleb128 0x1c
 4611 09a3 B1080000 		.4byte	.LASF140
 4612 09a7 01       		.byte	0x1
 4613 09a8 F802     		.2byte	0x2f8
 4614 09aa 7E000000 		.4byte	0x7e
 4615 09ae 02       		.uleb128 0x2
 4616 09af 91       		.byte	0x91
 4617 09b0 40       		.sleb128 -64
 4618 09b1 1C       		.uleb128 0x1c
 4619 09b2 37020000 		.4byte	.LASF141
 4620 09b6 01       		.byte	0x1
 4621 09b7 F802     		.2byte	0x2f8
 4622 09b9 7E000000 		.4byte	0x7e
 4623 09bd 03       		.uleb128 0x3
 4624 09be 91       		.byte	0x91
 4625 09bf BC7F     		.sleb128 -68
 4626 09c1 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 105


 4627 09c2 00000000 		.4byte	.LASF142
 4628 09c6 01       		.byte	0x1
 4629 09c7 F802     		.2byte	0x2f8
 4630 09c9 7E000000 		.4byte	0x7e
 4631 09cd 03       		.uleb128 0x3
 4632 09ce 91       		.byte	0x91
 4633 09cf B87F     		.sleb128 -72
 4634 09d1 00       		.byte	0
 4635 09d2 00       		.byte	0
 4636 09d3 08       		.uleb128 0x8
 4637 09d4 F7000000 		.4byte	0xf7
 4638 09d8 E3090000 		.4byte	0x9e3
 4639 09dc 09       		.uleb128 0x9
 4640 09dd 05010000 		.4byte	0x105
 4641 09e1 1D       		.byte	0x1d
 4642 09e2 00       		.byte	0
 4643 09e3 22       		.uleb128 0x22
 4644 09e4 88020000 		.4byte	.LASF143
 4645 09e8 01       		.byte	0x1
 4646 09e9 1803     		.2byte	0x318
 4647 09eb AD000000 		.4byte	0xad
 4648 09ef 00000000 		.4byte	.LFB84
 4649 09f3 14000000 		.4byte	.LFE84-.LFB84
 4650 09f7 01       		.uleb128 0x1
 4651 09f8 9C       		.byte	0x9c
 4652 09f9 1D       		.uleb128 0x1d
 4653 09fa 8A030000 		.4byte	.LASF144
 4654 09fe 01       		.byte	0x1
 4655 09ff 1D03     		.2byte	0x31d
 4656 0a01 00000000 		.4byte	.LFB85
 4657 0a05 1A000000 		.4byte	.LFE85-.LFB85
 4658 0a09 01       		.uleb128 0x1
 4659 0a0a 9C       		.byte	0x9c
 4660 0a0b 1D       		.uleb128 0x1d
 4661 0a0c 2A010000 		.4byte	.LASF145
 4662 0a10 01       		.byte	0x1
 4663 0a11 2A03     		.2byte	0x32a
 4664 0a13 00000000 		.4byte	.LFB86
 4665 0a17 2A000000 		.4byte	.LFE86-.LFB86
 4666 0a1b 01       		.uleb128 0x1
 4667 0a1c 9C       		.byte	0x9c
 4668 0a1d 1B       		.uleb128 0x1b
 4669 0a1e F9060000 		.4byte	.LASF146
 4670 0a22 01       		.byte	0x1
 4671 0a23 3D03     		.2byte	0x33d
 4672 0a25 37030000 		.4byte	0x337
 4673 0a29 00000000 		.4byte	.LFB87
 4674 0a2d 7C020000 		.4byte	.LFE87-.LFB87
 4675 0a31 01       		.uleb128 0x1
 4676 0a32 9C       		.byte	0x9c
 4677 0a33 C60A0000 		.4byte	0xac6
 4678 0a37 1A       		.uleb128 0x1a
 4679 0a38 67707300 		.ascii	"gps\000"
 4680 0a3c 01       		.byte	0x1
 4681 0a3d 3E03     		.2byte	0x33e
 4682 0a3f 37030000 		.4byte	0x337
 4683 0a43 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 106


 4684 0a44 91       		.byte	0x91
 4685 0a45 4C       		.sleb128 -52
 4686 0a46 1C       		.uleb128 0x1c
 4687 0a47 B1090000 		.4byte	.LASF147
 4688 0a4b 01       		.byte	0x1
 4689 0a4c 4A03     		.2byte	0x34a
 4690 0a4e 57000000 		.4byte	0x57
 4691 0a52 02       		.uleb128 0x2
 4692 0a53 91       		.byte	0x91
 4693 0a54 68       		.sleb128 -24
 4694 0a55 1C       		.uleb128 0x1c
 4695 0a56 59080000 		.4byte	.LASF148
 4696 0a5a 01       		.byte	0x1
 4697 0a5b 7103     		.2byte	0x371
 4698 0a5d AD000000 		.4byte	0xad
 4699 0a61 02       		.uleb128 0x2
 4700 0a62 91       		.byte	0x91
 4701 0a63 67       		.sleb128 -25
 4702 0a64 1A       		.uleb128 0x1a
 4703 0a65 6C617400 		.ascii	"lat\000"
 4704 0a69 01       		.byte	0x1
 4705 0a6a 7D03     		.2byte	0x37d
 4706 0a6c E9000000 		.4byte	0xe9
 4707 0a70 02       		.uleb128 0x2
 4708 0a71 91       		.byte	0x91
 4709 0a72 48       		.sleb128 -56
 4710 0a73 1A       		.uleb128 0x1a
 4711 0a74 6C6F6E00 		.ascii	"lon\000"
 4712 0a78 01       		.byte	0x1
 4713 0a79 7E03     		.2byte	0x37e
 4714 0a7b E9000000 		.4byte	0xe9
 4715 0a7f 02       		.uleb128 0x2
 4716 0a80 91       		.byte	0x91
 4717 0a81 44       		.sleb128 -60
 4718 0a82 1A       		.uleb128 0x1a
 4719 0a83 616C7400 		.ascii	"alt\000"
 4720 0a87 01       		.byte	0x1
 4721 0a88 7F03     		.2byte	0x37f
 4722 0a8a E9000000 		.4byte	0xe9
 4723 0a8e 02       		.uleb128 0x2
 4724 0a8f 91       		.byte	0x91
 4725 0a90 40       		.sleb128 -64
 4726 0a91 1A       		.uleb128 0x1a
 4727 0a92 733100   		.ascii	"s1\000"
 4728 0a95 01       		.byte	0x1
 4729 0a96 8303     		.2byte	0x383
 4730 0a98 0C010000 		.4byte	0x10c
 4731 0a9c 02       		.uleb128 0x2
 4732 0a9d 91       		.byte	0x91
 4733 0a9e 60       		.sleb128 -32
 4734 0a9f 1C       		.uleb128 0x1c
 4735 0aa0 1D060000 		.4byte	.LASF113
 4736 0aa4 01       		.byte	0x1
 4737 0aa5 8603     		.2byte	0x386
 4738 0aa7 7E000000 		.4byte	0x7e
 4739 0aab 02       		.uleb128 0x2
 4740 0aac 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 107


 4741 0aad 5C       		.sleb128 -36
 4742 0aae 14       		.uleb128 0x14
 4743 0aaf B4000000 		.4byte	.LBB14
 4744 0ab3 38000000 		.4byte	.LBE14-.LBB14
 4745 0ab7 1A       		.uleb128 0x1a
 4746 0ab8 6900     		.ascii	"i\000"
 4747 0aba 01       		.byte	0x1
 4748 0abb 7203     		.2byte	0x372
 4749 0abd B9000000 		.4byte	0xb9
 4750 0ac1 02       		.uleb128 0x2
 4751 0ac2 91       		.byte	0x91
 4752 0ac3 6E       		.sleb128 -18
 4753 0ac4 00       		.byte	0
 4754 0ac5 00       		.byte	0
 4755 0ac6 23       		.uleb128 0x23
 4756 0ac7 78010000 		.4byte	.LASF149
 4757 0acb 0A       		.byte	0xa
 4758 0acc 1207     		.2byte	0x712
 4759 0ace D20A0000 		.4byte	0xad2
 4760 0ad2 0F       		.uleb128 0xf
 4761 0ad3 97000000 		.4byte	0x97
 4762 0ad7 24       		.uleb128 0x24
 4763 0ad8 60000000 		.4byte	.LASF150
 4764 0adc 07       		.byte	0x7
 4765 0add 11       		.byte	0x11
 4766 0ade AB030000 		.4byte	0x3ab
 4767 0ae2 05       		.uleb128 0x5
 4768 0ae3 03       		.byte	0x3
 4769 0ae4 00000000 		.4byte	buffer_overflow
 4770 0ae8 24       		.uleb128 0x24
 4771 0ae9 7A050000 		.4byte	.LASF151
 4772 0aed 07       		.byte	0x7
 4773 0aee 22       		.byte	0x22
 4774 0aef B9000000 		.4byte	0xb9
 4775 0af3 05       		.uleb128 0x5
 4776 0af4 03       		.byte	0x3
 4777 0af5 00000000 		.4byte	dataPointsInStack
 4778 0af9 24       		.uleb128 0x24
 4779 0afa 15090000 		.4byte	.LASF152
 4780 0afe 07       		.byte	0x7
 4781 0aff 23       		.byte	0x23
 4782 0b00 B9000000 		.4byte	0xb9
 4783 0b04 05       		.uleb128 0x5
 4784 0b05 03       		.byte	0x3
 4785 0b06 00000000 		.4byte	dataPointsInStackDesired
 4786 0b0a 08       		.uleb128 0x8
 4787 0b0b 3B020000 		.4byte	0x23b
 4788 0b0f 1A0B0000 		.4byte	0xb1a
 4789 0b13 09       		.uleb128 0x9
 4790 0b14 05010000 		.4byte	0x105
 4791 0b18 95       		.byte	0x95
 4792 0b19 00       		.byte	0
 4793 0b1a 24       		.uleb128 0x24
 4794 0b1b 52040000 		.4byte	.LASF153
 4795 0b1f 07       		.byte	0x7
 4796 0b20 24       		.byte	0x24
 4797 0b21 0A0B0000 		.4byte	0xb0a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 108


 4798 0b25 05       		.uleb128 0x5
 4799 0b26 03       		.byte	0x3
 4800 0b27 00000000 		.4byte	data
 4801 0b2b 24       		.uleb128 0x24
 4802 0b2c 5A010000 		.4byte	.LASF154
 4803 0b30 08       		.byte	0x8
 4804 0b31 20       		.byte	0x20
 4805 0b32 AD000000 		.4byte	0xad
 4806 0b36 05       		.uleb128 0x5
 4807 0b37 03       		.byte	0x3
 4808 0b38 00000000 		.4byte	modem_state
 4809 0b3c 24       		.uleb128 0x24
 4810 0b3d 42080000 		.4byte	.LASF155
 4811 0b41 08       		.byte	0x8
 4812 0b42 6B       		.byte	0x6b
 4813 0b43 DD000000 		.4byte	0xdd
 4814 0b47 05       		.uleb128 0x5
 4815 0b48 03       		.byte	0x3
 4816 0b49 00000000 		.4byte	modem_start_time_stamp
 4817 0b4d 24       		.uleb128 0x24
 4818 0b4e 68040000 		.4byte	.LASF74
 4819 0b52 08       		.byte	0x8
 4820 0b53 6C       		.byte	0x6c
 4821 0b54 73020000 		.4byte	0x273
 4822 0b58 05       		.uleb128 0x5
 4823 0b59 03       		.byte	0x3
 4824 0b5a 00000000 		.4byte	modem_info
 4825 0b5e 24       		.uleb128 0x24
 4826 0b5f 97010000 		.4byte	.LASF156
 4827 0b63 08       		.byte	0x8
 4828 0b64 6D       		.byte	0x6d
 4829 0b65 E7020000 		.4byte	0x2e7
 4830 0b69 05       		.uleb128 0x5
 4831 0b6a 03       		.byte	0x3
 4832 0b6b 00000000 		.4byte	modem_stats
 4833 0b6f 24       		.uleb128 0x24
 4834 0b70 23060000 		.4byte	.LASF157
 4835 0b74 08       		.byte	0x8
 4836 0b75 6E       		.byte	0x6e
 4837 0b76 B2030000 		.4byte	0x3b2
 4838 0b7a 05       		.uleb128 0x5
 4839 0b7b 03       		.byte	0x3
 4840 0b7c 00000000 		.4byte	updatable_parameters
 4841 0b80 24       		.uleb128 0x24
 4842 0b81 99070000 		.4byte	.LASF158
 4843 0b85 0B       		.byte	0xb
 4844 0b86 25       		.byte	0x25
 4845 0b87 59040000 		.4byte	0x459
 4846 0b8b 05       		.uleb128 0x5
 4847 0b8c 03       		.byte	0x3
 4848 0b8d 00000000 		.4byte	level_sensor_inbox
 4849 0b91 24       		.uleb128 0x24
 4850 0b92 00090000 		.4byte	.LASF159
 4851 0b96 0B       		.byte	0xb
 4852 0b97 27       		.byte	0x27
 4853 0b98 AB030000 		.4byte	0x3ab
 4854 0b9c 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 109


 4855 0b9d 03       		.byte	0x3
 4856 0b9e 00000000 		.4byte	level_sensor_enabled
 4857 0ba2 24       		.uleb128 0x24
 4858 0ba3 EE090000 		.4byte	.LASF160
 4859 0ba7 0C       		.byte	0xc
 4860 0ba8 0F       		.byte	0xf
 4861 0ba9 59040000 		.4byte	0x459
 4862 0bad 05       		.uleb128 0x5
 4863 0bae 03       		.byte	0x3
 4864 0baf 00000000 		.4byte	downstream_level_sensor_inbox
 4865 0bb3 24       		.uleb128 0x24
 4866 0bb4 1B050000 		.4byte	.LASF161
 4867 0bb8 0C       		.byte	0xc
 4868 0bb9 11       		.byte	0x11
 4869 0bba AB030000 		.4byte	0x3ab
 4870 0bbe 05       		.uleb128 0x5
 4871 0bbf 03       		.byte	0x3
 4872 0bc0 00000000 		.4byte	downstream_level_sensor_enabled
 4873 0bc4 24       		.uleb128 0x24
 4874 0bc5 D5030000 		.4byte	.LASF162
 4875 0bc9 0D       		.byte	0xd
 4876 0bca 07       		.byte	0x7
 4877 0bcb AB030000 		.4byte	0x3ab
 4878 0bcf 05       		.uleb128 0x5
 4879 0bd0 03       		.byte	0x3
 4880 0bd1 00000000 		.4byte	App_LED_enabled
 4881 0bd5 24       		.uleb128 0x24
 4882 0bd6 E0090000 		.4byte	.LASF163
 4883 0bda 0D       		.byte	0xd
 4884 0bdb 08       		.byte	0x8
 4885 0bdc 59040000 		.4byte	0x459
 4886 0be0 05       		.uleb128 0x5
 4887 0be1 03       		.byte	0x3
 4888 0be2 00000000 		.4byte	app_led_inbox
 4889 0be6 08       		.uleb128 0x8
 4890 0be7 F7000000 		.4byte	0xf7
 4891 0beb F70B0000 		.4byte	0xbf7
 4892 0bef 25       		.uleb128 0x25
 4893 0bf0 05010000 		.4byte	0x105
 4894 0bf4 0F27     		.2byte	0x270f
 4895 0bf6 00       		.byte	0
 4896 0bf7 24       		.uleb128 0x24
 4897 0bf8 BB090000 		.4byte	.LASF164
 4898 0bfc 09       		.byte	0x9
 4899 0bfd 19       		.byte	0x19
 4900 0bfe E60B0000 		.4byte	0xbe6
 4901 0c02 05       		.uleb128 0x5
 4902 0c03 03       		.byte	0x3
 4903 0c04 00000000 		.4byte	http_request
 4904 0c08 24       		.uleb128 0x24
 4905 0c09 12020000 		.4byte	.LASF165
 4906 0c0d 09       		.byte	0x9
 4907 0c0e 1A       		.byte	0x1a
 4908 0c0f E60B0000 		.4byte	0xbe6
 4909 0c13 05       		.uleb128 0x5
 4910 0c14 03       		.byte	0x3
 4911 0c15 00000000 		.4byte	http_body
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 110


 4912 0c19 24       		.uleb128 0x24
 4913 0c1a EC070000 		.4byte	.LASF166
 4914 0c1e 09       		.byte	0x9
 4915 0c1f 1B       		.byte	0x1b
 4916 0c20 D7080000 		.4byte	0x8d7
 4917 0c24 05       		.uleb128 0x5
 4918 0c25 03       		.byte	0x3
 4919 0c26 00000000 		.4byte	http_route
 4920 0c2a 24       		.uleb128 0x24
 4921 0c2b 1A070000 		.4byte	.LASF167
 4922 0c2f 09       		.byte	0x9
 4923 0c30 42       		.byte	0x42
 4924 0c31 2D040000 		.4byte	0x42d
 4925 0c35 05       		.uleb128 0x5
 4926 0c36 03       		.byte	0x3
 4927 0c37 00000000 		.4byte	system_info
 4928 0c3b 24       		.uleb128 0x24
 4929 0c3c C3060000 		.4byte	.LASF168
 4930 0c40 09       		.byte	0x9
 4931 0c41 54       		.byte	0x54
 4932 0c42 69040000 		.4byte	0x469
 4933 0c46 05       		.uleb128 0x5
 4934 0c47 03       		.byte	0x3
 4935 0c48 00000000 		.4byte	system_settings
 4936 0c4c 24       		.uleb128 0x24
 4937 0c4d 6B010000 		.4byte	.LASF169
 4938 0c51 09       		.byte	0x9
 4939 0c52 70       		.byte	0x70
 4940 0c53 F6030000 		.4byte	0x3f6
 4941 0c57 05       		.uleb128 0x5
 4942 0c58 03       		.byte	0x3
 4943 0c59 00000000 		.4byte	alarmMeasure
 4944 0c5d 24       		.uleb128 0x24
 4945 0c5e D1010000 		.4byte	.LASF170
 4946 0c62 09       		.byte	0x9
 4947 0c63 71       		.byte	0x71
 4948 0c64 AD000000 		.4byte	0xad
 4949 0c68 05       		.uleb128 0x5
 4950 0c69 03       		.byte	0x3
 4951 0c6a 00000000 		.4byte	timeToMeasure
 4952 0c6e 24       		.uleb128 0x24
 4953 0c6f CB030000 		.4byte	.LASF171
 4954 0c73 09       		.byte	0x9
 4955 0c74 72       		.byte	0x72
 4956 0c75 F6030000 		.4byte	0x3f6
 4957 0c79 05       		.uleb128 0x5
 4958 0c7a 03       		.byte	0x3
 4959 0c7b 00000000 		.4byte	alarmSync
 4960 0c7f 24       		.uleb128 0x24
 4961 0c80 F7010000 		.4byte	.LASF172
 4962 0c84 09       		.byte	0x9
 4963 0c85 73       		.byte	0x73
 4964 0c86 AD000000 		.4byte	0xad
 4965 0c8a 05       		.uleb128 0x5
 4966 0c8b 03       		.byte	0x3
 4967 0c8c 00000000 		.4byte	timeToSync
 4968 0c90 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 111


 4969 0c91 FB050000 		.4byte	.LASF173
 4970 0c95 09       		.byte	0x9
 4971 0c96 74       		.byte	0x74
 4972 0c97 AD000000 		.4byte	0xad
 4973 0c9b 05       		.uleb128 0x5
 4974 0c9c 03       		.byte	0x3
 4975 0c9d 00000000 		.4byte	timeToSycnRemoteParams
 4976 0ca1 26       		.uleb128 0x26
 4977 0ca2 68657900 		.ascii	"hey\000"
 4978 0ca6 09       		.byte	0x9
 4979 0ca7 75       		.byte	0x75
 4980 0ca8 AD000000 		.4byte	0xad
 4981 0cac 05       		.uleb128 0x5
 4982 0cad 03       		.byte	0x3
 4983 0cae 00000000 		.4byte	hey
 4984 0cb2 24       		.uleb128 0x24
 4985 0cb3 EF040000 		.4byte	.LASF174
 4986 0cb7 09       		.byte	0x9
 4987 0cb8 79       		.byte	0x79
 4988 0cb9 F6030000 		.4byte	0x3f6
 4989 0cbd 05       		.uleb128 0x5
 4990 0cbe 03       		.byte	0x3
 4991 0cbf 00000000 		.4byte	alarmAppLED
 4992 0cc3 24       		.uleb128 0x24
 4993 0cc4 B9020000 		.4byte	.LASF175
 4994 0cc8 09       		.byte	0x9
 4995 0cc9 7A       		.byte	0x7a
 4996 0cca AD000000 		.4byte	0xad
 4997 0cce 05       		.uleb128 0x5
 4998 0ccf 03       		.byte	0x3
 4999 0cd0 00000000 		.4byte	timeToAppLED
 5000 0cd4 24       		.uleb128 0x24
 5001 0cd5 57070000 		.4byte	.LASF176
 5002 0cd9 09       		.byte	0x9
 5003 0cda 7C       		.byte	0x7c
 5004 0cdb F6030000 		.4byte	0x3f6
 5005 0cdf 05       		.uleb128 0x5
 5006 0ce0 03       		.byte	0x3
 5007 0ce1 00000000 		.4byte	alarmLevelSensor
 5008 0ce5 24       		.uleb128 0x24
 5009 0ce6 85010000 		.4byte	.LASF177
 5010 0cea 09       		.byte	0x9
 5011 0ceb 7D       		.byte	0x7d
 5012 0cec AD000000 		.4byte	0xad
 5013 0cf0 05       		.uleb128 0x5
 5014 0cf1 03       		.byte	0x3
 5015 0cf2 00000000 		.4byte	timetoLevelSensor
 5016 0cf6 24       		.uleb128 0x24
 5017 0cf7 43020000 		.4byte	.LASF178
 5018 0cfb 09       		.byte	0x9
 5019 0cfc 7F       		.byte	0x7f
 5020 0cfd F6030000 		.4byte	0x3f6
 5021 0d01 05       		.uleb128 0x5
 5022 0d02 03       		.byte	0x3
 5023 0d03 00000000 		.4byte	alarmDownstreamLevelSensor
 5024 0d07 24       		.uleb128 0x24
 5025 0d08 62030000 		.4byte	.LASF179
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 112


 5026 0d0c 09       		.byte	0x9
 5027 0d0d 80       		.byte	0x80
 5028 0d0e AD000000 		.4byte	0xad
 5029 0d12 05       		.uleb128 0x5
 5030 0d13 03       		.byte	0x3
 5031 0d14 00000000 		.4byte	timetoDownstreamLevelSensor
 5032 0d18 08       		.uleb128 0x8
 5033 0d19 F7000000 		.4byte	0xf7
 5034 0d1d 290D0000 		.4byte	0xd29
 5035 0d21 25       		.uleb128 0x25
 5036 0d22 05010000 		.4byte	0x105
 5037 0d26 FF03     		.2byte	0x3ff
 5038 0d28 00       		.byte	0
 5039 0d29 24       		.uleb128 0x24
 5040 0d2a D3050000 		.4byte	.LASF180
 5041 0d2e 01       		.byte	0x1
 5042 0d2f 05       		.byte	0x5
 5043 0d30 180D0000 		.4byte	0xd18
 5044 0d34 05       		.uleb128 0x5
 5045 0d35 03       		.byte	0x3
 5046 0d36 00000000 		.4byte	uart_received_string
 5047 0d3a 24       		.uleb128 0x24
 5048 0d3b 0A080000 		.4byte	.LASF181
 5049 0d3f 01       		.byte	0x1
 5050 0d40 06       		.byte	0x6
 5051 0d41 D1000000 		.4byte	0xd1
 5052 0d45 05       		.uleb128 0x5
 5053 0d46 03       		.byte	0x3
 5054 0d47 00000000 		.4byte	uart_string_index
 5055 0d4b 00       		.byte	0
 5056              		.section	.debug_abbrev,"",%progbits
 5057              	.Ldebug_abbrev0:
 5058 0000 01       		.uleb128 0x1
 5059 0001 11       		.uleb128 0x11
 5060 0002 01       		.byte	0x1
 5061 0003 25       		.uleb128 0x25
 5062 0004 0E       		.uleb128 0xe
 5063 0005 13       		.uleb128 0x13
 5064 0006 0B       		.uleb128 0xb
 5065 0007 03       		.uleb128 0x3
 5066 0008 0E       		.uleb128 0xe
 5067 0009 1B       		.uleb128 0x1b
 5068 000a 0E       		.uleb128 0xe
 5069 000b 55       		.uleb128 0x55
 5070 000c 17       		.uleb128 0x17
 5071 000d 11       		.uleb128 0x11
 5072 000e 01       		.uleb128 0x1
 5073 000f 10       		.uleb128 0x10
 5074 0010 17       		.uleb128 0x17
 5075 0011 00       		.byte	0
 5076 0012 00       		.byte	0
 5077 0013 02       		.uleb128 0x2
 5078 0014 24       		.uleb128 0x24
 5079 0015 00       		.byte	0
 5080 0016 0B       		.uleb128 0xb
 5081 0017 0B       		.uleb128 0xb
 5082 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 113


 5083 0019 0B       		.uleb128 0xb
 5084 001a 03       		.uleb128 0x3
 5085 001b 0E       		.uleb128 0xe
 5086 001c 00       		.byte	0
 5087 001d 00       		.byte	0
 5088 001e 03       		.uleb128 0x3
 5089 001f 16       		.uleb128 0x16
 5090 0020 00       		.byte	0
 5091 0021 03       		.uleb128 0x3
 5092 0022 0E       		.uleb128 0xe
 5093 0023 3A       		.uleb128 0x3a
 5094 0024 0B       		.uleb128 0xb
 5095 0025 3B       		.uleb128 0x3b
 5096 0026 0B       		.uleb128 0xb
 5097 0027 49       		.uleb128 0x49
 5098 0028 13       		.uleb128 0x13
 5099 0029 00       		.byte	0
 5100 002a 00       		.byte	0
 5101 002b 04       		.uleb128 0x4
 5102 002c 24       		.uleb128 0x24
 5103 002d 00       		.byte	0
 5104 002e 0B       		.uleb128 0xb
 5105 002f 0B       		.uleb128 0xb
 5106 0030 3E       		.uleb128 0x3e
 5107 0031 0B       		.uleb128 0xb
 5108 0032 03       		.uleb128 0x3
 5109 0033 08       		.uleb128 0x8
 5110 0034 00       		.byte	0
 5111 0035 00       		.byte	0
 5112 0036 05       		.uleb128 0x5
 5113 0037 16       		.uleb128 0x16
 5114 0038 00       		.byte	0
 5115 0039 03       		.uleb128 0x3
 5116 003a 0E       		.uleb128 0xe
 5117 003b 3A       		.uleb128 0x3a
 5118 003c 0B       		.uleb128 0xb
 5119 003d 3B       		.uleb128 0x3b
 5120 003e 05       		.uleb128 0x5
 5121 003f 49       		.uleb128 0x49
 5122 0040 13       		.uleb128 0x13
 5123 0041 00       		.byte	0
 5124 0042 00       		.byte	0
 5125 0043 06       		.uleb128 0x6
 5126 0044 0F       		.uleb128 0xf
 5127 0045 00       		.byte	0
 5128 0046 0B       		.uleb128 0xb
 5129 0047 0B       		.uleb128 0xb
 5130 0048 49       		.uleb128 0x49
 5131 0049 13       		.uleb128 0x13
 5132 004a 00       		.byte	0
 5133 004b 00       		.byte	0
 5134 004c 07       		.uleb128 0x7
 5135 004d 26       		.uleb128 0x26
 5136 004e 00       		.byte	0
 5137 004f 49       		.uleb128 0x49
 5138 0050 13       		.uleb128 0x13
 5139 0051 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 114


 5140 0052 00       		.byte	0
 5141 0053 08       		.uleb128 0x8
 5142 0054 01       		.uleb128 0x1
 5143 0055 01       		.byte	0x1
 5144 0056 49       		.uleb128 0x49
 5145 0057 13       		.uleb128 0x13
 5146 0058 01       		.uleb128 0x1
 5147 0059 13       		.uleb128 0x13
 5148 005a 00       		.byte	0
 5149 005b 00       		.byte	0
 5150 005c 09       		.uleb128 0x9
 5151 005d 21       		.uleb128 0x21
 5152 005e 00       		.byte	0
 5153 005f 49       		.uleb128 0x49
 5154 0060 13       		.uleb128 0x13
 5155 0061 2F       		.uleb128 0x2f
 5156 0062 0B       		.uleb128 0xb
 5157 0063 00       		.byte	0
 5158 0064 00       		.byte	0
 5159 0065 0A       		.uleb128 0xa
 5160 0066 13       		.uleb128 0x13
 5161 0067 01       		.byte	0x1
 5162 0068 03       		.uleb128 0x3
 5163 0069 08       		.uleb128 0x8
 5164 006a 0B       		.uleb128 0xb
 5165 006b 0B       		.uleb128 0xb
 5166 006c 3A       		.uleb128 0x3a
 5167 006d 0B       		.uleb128 0xb
 5168 006e 3B       		.uleb128 0x3b
 5169 006f 0B       		.uleb128 0xb
 5170 0070 01       		.uleb128 0x1
 5171 0071 13       		.uleb128 0x13
 5172 0072 00       		.byte	0
 5173 0073 00       		.byte	0
 5174 0074 0B       		.uleb128 0xb
 5175 0075 0D       		.uleb128 0xd
 5176 0076 00       		.byte	0
 5177 0077 03       		.uleb128 0x3
 5178 0078 0E       		.uleb128 0xe
 5179 0079 3A       		.uleb128 0x3a
 5180 007a 0B       		.uleb128 0xb
 5181 007b 3B       		.uleb128 0x3b
 5182 007c 0B       		.uleb128 0xb
 5183 007d 49       		.uleb128 0x49
 5184 007e 13       		.uleb128 0x13
 5185 007f 38       		.uleb128 0x38
 5186 0080 0B       		.uleb128 0xb
 5187 0081 00       		.byte	0
 5188 0082 00       		.byte	0
 5189 0083 0C       		.uleb128 0xc
 5190 0084 13       		.uleb128 0x13
 5191 0085 01       		.byte	0x1
 5192 0086 0B       		.uleb128 0xb
 5193 0087 05       		.uleb128 0x5
 5194 0088 3A       		.uleb128 0x3a
 5195 0089 0B       		.uleb128 0xb
 5196 008a 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 115


 5197 008b 0B       		.uleb128 0xb
 5198 008c 01       		.uleb128 0x1
 5199 008d 13       		.uleb128 0x13
 5200 008e 00       		.byte	0
 5201 008f 00       		.byte	0
 5202 0090 0D       		.uleb128 0xd
 5203 0091 13       		.uleb128 0x13
 5204 0092 01       		.byte	0x1
 5205 0093 0B       		.uleb128 0xb
 5206 0094 0B       		.uleb128 0xb
 5207 0095 3A       		.uleb128 0x3a
 5208 0096 0B       		.uleb128 0xb
 5209 0097 3B       		.uleb128 0x3b
 5210 0098 0B       		.uleb128 0xb
 5211 0099 01       		.uleb128 0x1
 5212 009a 13       		.uleb128 0x13
 5213 009b 00       		.byte	0
 5214 009c 00       		.byte	0
 5215 009d 0E       		.uleb128 0xe
 5216 009e 0D       		.uleb128 0xd
 5217 009f 00       		.byte	0
 5218 00a0 03       		.uleb128 0x3
 5219 00a1 08       		.uleb128 0x8
 5220 00a2 3A       		.uleb128 0x3a
 5221 00a3 0B       		.uleb128 0xb
 5222 00a4 3B       		.uleb128 0x3b
 5223 00a5 0B       		.uleb128 0xb
 5224 00a6 49       		.uleb128 0x49
 5225 00a7 13       		.uleb128 0x13
 5226 00a8 38       		.uleb128 0x38
 5227 00a9 0B       		.uleb128 0xb
 5228 00aa 00       		.byte	0
 5229 00ab 00       		.byte	0
 5230 00ac 0F       		.uleb128 0xf
 5231 00ad 35       		.uleb128 0x35
 5232 00ae 00       		.byte	0
 5233 00af 49       		.uleb128 0x49
 5234 00b0 13       		.uleb128 0x13
 5235 00b1 00       		.byte	0
 5236 00b2 00       		.byte	0
 5237 00b3 10       		.uleb128 0x10
 5238 00b4 2E       		.uleb128 0x2e
 5239 00b5 00       		.byte	0
 5240 00b6 3F       		.uleb128 0x3f
 5241 00b7 19       		.uleb128 0x19
 5242 00b8 03       		.uleb128 0x3
 5243 00b9 0E       		.uleb128 0xe
 5244 00ba 3A       		.uleb128 0x3a
 5245 00bb 0B       		.uleb128 0xb
 5246 00bc 3B       		.uleb128 0x3b
 5247 00bd 0B       		.uleb128 0xb
 5248 00be 27       		.uleb128 0x27
 5249 00bf 19       		.uleb128 0x19
 5250 00c0 11       		.uleb128 0x11
 5251 00c1 01       		.uleb128 0x1
 5252 00c2 12       		.uleb128 0x12
 5253 00c3 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 116


 5254 00c4 40       		.uleb128 0x40
 5255 00c5 18       		.uleb128 0x18
 5256 00c6 9642     		.uleb128 0x2116
 5257 00c8 19       		.uleb128 0x19
 5258 00c9 00       		.byte	0
 5259 00ca 00       		.byte	0
 5260 00cb 11       		.uleb128 0x11
 5261 00cc 2E       		.uleb128 0x2e
 5262 00cd 00       		.byte	0
 5263 00ce 3F       		.uleb128 0x3f
 5264 00cf 19       		.uleb128 0x19
 5265 00d0 03       		.uleb128 0x3
 5266 00d1 0E       		.uleb128 0xe
 5267 00d2 3A       		.uleb128 0x3a
 5268 00d3 0B       		.uleb128 0xb
 5269 00d4 3B       		.uleb128 0x3b
 5270 00d5 0B       		.uleb128 0xb
 5271 00d6 11       		.uleb128 0x11
 5272 00d7 01       		.uleb128 0x1
 5273 00d8 12       		.uleb128 0x12
 5274 00d9 06       		.uleb128 0x6
 5275 00da 40       		.uleb128 0x40
 5276 00db 18       		.uleb128 0x18
 5277 00dc 9642     		.uleb128 0x2116
 5278 00de 19       		.uleb128 0x19
 5279 00df 00       		.byte	0
 5280 00e0 00       		.byte	0
 5281 00e1 12       		.uleb128 0x12
 5282 00e2 2E       		.uleb128 0x2e
 5283 00e3 01       		.byte	0x1
 5284 00e4 3F       		.uleb128 0x3f
 5285 00e5 19       		.uleb128 0x19
 5286 00e6 03       		.uleb128 0x3
 5287 00e7 0E       		.uleb128 0xe
 5288 00e8 3A       		.uleb128 0x3a
 5289 00e9 0B       		.uleb128 0xb
 5290 00ea 3B       		.uleb128 0x3b
 5291 00eb 0B       		.uleb128 0xb
 5292 00ec 49       		.uleb128 0x49
 5293 00ed 13       		.uleb128 0x13
 5294 00ee 11       		.uleb128 0x11
 5295 00ef 01       		.uleb128 0x1
 5296 00f0 12       		.uleb128 0x12
 5297 00f1 06       		.uleb128 0x6
 5298 00f2 40       		.uleb128 0x40
 5299 00f3 18       		.uleb128 0x18
 5300 00f4 9642     		.uleb128 0x2116
 5301 00f6 19       		.uleb128 0x19
 5302 00f7 01       		.uleb128 0x1
 5303 00f8 13       		.uleb128 0x13
 5304 00f9 00       		.byte	0
 5305 00fa 00       		.byte	0
 5306 00fb 13       		.uleb128 0x13
 5307 00fc 34       		.uleb128 0x34
 5308 00fd 00       		.byte	0
 5309 00fe 03       		.uleb128 0x3
 5310 00ff 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 117


 5311 0100 3A       		.uleb128 0x3a
 5312 0101 0B       		.uleb128 0xb
 5313 0102 3B       		.uleb128 0x3b
 5314 0103 0B       		.uleb128 0xb
 5315 0104 49       		.uleb128 0x49
 5316 0105 13       		.uleb128 0x13
 5317 0106 02       		.uleb128 0x2
 5318 0107 18       		.uleb128 0x18
 5319 0108 00       		.byte	0
 5320 0109 00       		.byte	0
 5321 010a 14       		.uleb128 0x14
 5322 010b 0B       		.uleb128 0xb
 5323 010c 01       		.byte	0x1
 5324 010d 11       		.uleb128 0x11
 5325 010e 01       		.uleb128 0x1
 5326 010f 12       		.uleb128 0x12
 5327 0110 06       		.uleb128 0x6
 5328 0111 00       		.byte	0
 5329 0112 00       		.byte	0
 5330 0113 15       		.uleb128 0x15
 5331 0114 2E       		.uleb128 0x2e
 5332 0115 01       		.byte	0x1
 5333 0116 3F       		.uleb128 0x3f
 5334 0117 19       		.uleb128 0x19
 5335 0118 03       		.uleb128 0x3
 5336 0119 0E       		.uleb128 0xe
 5337 011a 3A       		.uleb128 0x3a
 5338 011b 0B       		.uleb128 0xb
 5339 011c 3B       		.uleb128 0x3b
 5340 011d 0B       		.uleb128 0xb
 5341 011e 27       		.uleb128 0x27
 5342 011f 19       		.uleb128 0x19
 5343 0120 49       		.uleb128 0x49
 5344 0121 13       		.uleb128 0x13
 5345 0122 11       		.uleb128 0x11
 5346 0123 01       		.uleb128 0x1
 5347 0124 12       		.uleb128 0x12
 5348 0125 06       		.uleb128 0x6
 5349 0126 40       		.uleb128 0x40
 5350 0127 18       		.uleb128 0x18
 5351 0128 9642     		.uleb128 0x2116
 5352 012a 19       		.uleb128 0x19
 5353 012b 01       		.uleb128 0x1
 5354 012c 13       		.uleb128 0x13
 5355 012d 00       		.byte	0
 5356 012e 00       		.byte	0
 5357 012f 16       		.uleb128 0x16
 5358 0130 05       		.uleb128 0x5
 5359 0131 00       		.byte	0
 5360 0132 03       		.uleb128 0x3
 5361 0133 0E       		.uleb128 0xe
 5362 0134 3A       		.uleb128 0x3a
 5363 0135 0B       		.uleb128 0xb
 5364 0136 3B       		.uleb128 0x3b
 5365 0137 0B       		.uleb128 0xb
 5366 0138 49       		.uleb128 0x49
 5367 0139 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 118


 5368 013a 02       		.uleb128 0x2
 5369 013b 18       		.uleb128 0x18
 5370 013c 00       		.byte	0
 5371 013d 00       		.byte	0
 5372 013e 17       		.uleb128 0x17
 5373 013f 34       		.uleb128 0x34
 5374 0140 00       		.byte	0
 5375 0141 03       		.uleb128 0x3
 5376 0142 08       		.uleb128 0x8
 5377 0143 3A       		.uleb128 0x3a
 5378 0144 0B       		.uleb128 0xb
 5379 0145 3B       		.uleb128 0x3b
 5380 0146 0B       		.uleb128 0xb
 5381 0147 49       		.uleb128 0x49
 5382 0148 13       		.uleb128 0x13
 5383 0149 02       		.uleb128 0x2
 5384 014a 18       		.uleb128 0x18
 5385 014b 00       		.byte	0
 5386 014c 00       		.byte	0
 5387 014d 18       		.uleb128 0x18
 5388 014e 2E       		.uleb128 0x2e
 5389 014f 01       		.byte	0x1
 5390 0150 3F       		.uleb128 0x3f
 5391 0151 19       		.uleb128 0x19
 5392 0152 03       		.uleb128 0x3
 5393 0153 0E       		.uleb128 0xe
 5394 0154 3A       		.uleb128 0x3a
 5395 0155 0B       		.uleb128 0xb
 5396 0156 3B       		.uleb128 0x3b
 5397 0157 05       		.uleb128 0x5
 5398 0158 27       		.uleb128 0x27
 5399 0159 19       		.uleb128 0x19
 5400 015a 49       		.uleb128 0x49
 5401 015b 13       		.uleb128 0x13
 5402 015c 11       		.uleb128 0x11
 5403 015d 01       		.uleb128 0x1
 5404 015e 12       		.uleb128 0x12
 5405 015f 06       		.uleb128 0x6
 5406 0160 40       		.uleb128 0x40
 5407 0161 18       		.uleb128 0x18
 5408 0162 9642     		.uleb128 0x2116
 5409 0164 19       		.uleb128 0x19
 5410 0165 01       		.uleb128 0x1
 5411 0166 13       		.uleb128 0x13
 5412 0167 00       		.byte	0
 5413 0168 00       		.byte	0
 5414 0169 19       		.uleb128 0x19
 5415 016a 05       		.uleb128 0x5
 5416 016b 00       		.byte	0
 5417 016c 03       		.uleb128 0x3
 5418 016d 0E       		.uleb128 0xe
 5419 016e 3A       		.uleb128 0x3a
 5420 016f 0B       		.uleb128 0xb
 5421 0170 3B       		.uleb128 0x3b
 5422 0171 05       		.uleb128 0x5
 5423 0172 49       		.uleb128 0x49
 5424 0173 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 119


 5425 0174 02       		.uleb128 0x2
 5426 0175 18       		.uleb128 0x18
 5427 0176 00       		.byte	0
 5428 0177 00       		.byte	0
 5429 0178 1A       		.uleb128 0x1a
 5430 0179 34       		.uleb128 0x34
 5431 017a 00       		.byte	0
 5432 017b 03       		.uleb128 0x3
 5433 017c 08       		.uleb128 0x8
 5434 017d 3A       		.uleb128 0x3a
 5435 017e 0B       		.uleb128 0xb
 5436 017f 3B       		.uleb128 0x3b
 5437 0180 05       		.uleb128 0x5
 5438 0181 49       		.uleb128 0x49
 5439 0182 13       		.uleb128 0x13
 5440 0183 02       		.uleb128 0x2
 5441 0184 18       		.uleb128 0x18
 5442 0185 00       		.byte	0
 5443 0186 00       		.byte	0
 5444 0187 1B       		.uleb128 0x1b
 5445 0188 2E       		.uleb128 0x2e
 5446 0189 01       		.byte	0x1
 5447 018a 3F       		.uleb128 0x3f
 5448 018b 19       		.uleb128 0x19
 5449 018c 03       		.uleb128 0x3
 5450 018d 0E       		.uleb128 0xe
 5451 018e 3A       		.uleb128 0x3a
 5452 018f 0B       		.uleb128 0xb
 5453 0190 3B       		.uleb128 0x3b
 5454 0191 05       		.uleb128 0x5
 5455 0192 49       		.uleb128 0x49
 5456 0193 13       		.uleb128 0x13
 5457 0194 11       		.uleb128 0x11
 5458 0195 01       		.uleb128 0x1
 5459 0196 12       		.uleb128 0x12
 5460 0197 06       		.uleb128 0x6
 5461 0198 40       		.uleb128 0x40
 5462 0199 18       		.uleb128 0x18
 5463 019a 9642     		.uleb128 0x2116
 5464 019c 19       		.uleb128 0x19
 5465 019d 01       		.uleb128 0x1
 5466 019e 13       		.uleb128 0x13
 5467 019f 00       		.byte	0
 5468 01a0 00       		.byte	0
 5469 01a1 1C       		.uleb128 0x1c
 5470 01a2 34       		.uleb128 0x34
 5471 01a3 00       		.byte	0
 5472 01a4 03       		.uleb128 0x3
 5473 01a5 0E       		.uleb128 0xe
 5474 01a6 3A       		.uleb128 0x3a
 5475 01a7 0B       		.uleb128 0xb
 5476 01a8 3B       		.uleb128 0x3b
 5477 01a9 05       		.uleb128 0x5
 5478 01aa 49       		.uleb128 0x49
 5479 01ab 13       		.uleb128 0x13
 5480 01ac 02       		.uleb128 0x2
 5481 01ad 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 120


 5482 01ae 00       		.byte	0
 5483 01af 00       		.byte	0
 5484 01b0 1D       		.uleb128 0x1d
 5485 01b1 2E       		.uleb128 0x2e
 5486 01b2 00       		.byte	0
 5487 01b3 3F       		.uleb128 0x3f
 5488 01b4 19       		.uleb128 0x19
 5489 01b5 03       		.uleb128 0x3
 5490 01b6 0E       		.uleb128 0xe
 5491 01b7 3A       		.uleb128 0x3a
 5492 01b8 0B       		.uleb128 0xb
 5493 01b9 3B       		.uleb128 0x3b
 5494 01ba 05       		.uleb128 0x5
 5495 01bb 11       		.uleb128 0x11
 5496 01bc 01       		.uleb128 0x1
 5497 01bd 12       		.uleb128 0x12
 5498 01be 06       		.uleb128 0x6
 5499 01bf 40       		.uleb128 0x40
 5500 01c0 18       		.uleb128 0x18
 5501 01c1 9642     		.uleb128 0x2116
 5502 01c3 19       		.uleb128 0x19
 5503 01c4 00       		.byte	0
 5504 01c5 00       		.byte	0
 5505 01c6 1E       		.uleb128 0x1e
 5506 01c7 2E       		.uleb128 0x2e
 5507 01c8 00       		.byte	0
 5508 01c9 3F       		.uleb128 0x3f
 5509 01ca 19       		.uleb128 0x19
 5510 01cb 03       		.uleb128 0x3
 5511 01cc 0E       		.uleb128 0xe
 5512 01cd 3A       		.uleb128 0x3a
 5513 01ce 0B       		.uleb128 0xb
 5514 01cf 3B       		.uleb128 0x3b
 5515 01d0 05       		.uleb128 0x5
 5516 01d1 49       		.uleb128 0x49
 5517 01d2 13       		.uleb128 0x13
 5518 01d3 11       		.uleb128 0x11
 5519 01d4 01       		.uleb128 0x1
 5520 01d5 12       		.uleb128 0x12
 5521 01d6 06       		.uleb128 0x6
 5522 01d7 40       		.uleb128 0x40
 5523 01d8 18       		.uleb128 0x18
 5524 01d9 9642     		.uleb128 0x2116
 5525 01db 19       		.uleb128 0x19
 5526 01dc 00       		.byte	0
 5527 01dd 00       		.byte	0
 5528 01de 1F       		.uleb128 0x1f
 5529 01df 2E       		.uleb128 0x2e
 5530 01e0 01       		.byte	0x1
 5531 01e1 3F       		.uleb128 0x3f
 5532 01e2 19       		.uleb128 0x19
 5533 01e3 03       		.uleb128 0x3
 5534 01e4 0E       		.uleb128 0xe
 5535 01e5 3A       		.uleb128 0x3a
 5536 01e6 0B       		.uleb128 0xb
 5537 01e7 3B       		.uleb128 0x3b
 5538 01e8 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 121


 5539 01e9 11       		.uleb128 0x11
 5540 01ea 01       		.uleb128 0x1
 5541 01eb 12       		.uleb128 0x12
 5542 01ec 06       		.uleb128 0x6
 5543 01ed 40       		.uleb128 0x40
 5544 01ee 18       		.uleb128 0x18
 5545 01ef 9642     		.uleb128 0x2116
 5546 01f1 19       		.uleb128 0x19
 5547 01f2 01       		.uleb128 0x1
 5548 01f3 13       		.uleb128 0x13
 5549 01f4 00       		.byte	0
 5550 01f5 00       		.byte	0
 5551 01f6 20       		.uleb128 0x20
 5552 01f7 2E       		.uleb128 0x2e
 5553 01f8 00       		.byte	0
 5554 01f9 3F       		.uleb128 0x3f
 5555 01fa 19       		.uleb128 0x19
 5556 01fb 03       		.uleb128 0x3
 5557 01fc 0E       		.uleb128 0xe
 5558 01fd 3A       		.uleb128 0x3a
 5559 01fe 0B       		.uleb128 0xb
 5560 01ff 3B       		.uleb128 0x3b
 5561 0200 05       		.uleb128 0x5
 5562 0201 11       		.uleb128 0x11
 5563 0202 01       		.uleb128 0x1
 5564 0203 12       		.uleb128 0x12
 5565 0204 06       		.uleb128 0x6
 5566 0205 40       		.uleb128 0x40
 5567 0206 18       		.uleb128 0x18
 5568 0207 9742     		.uleb128 0x2117
 5569 0209 19       		.uleb128 0x19
 5570 020a 00       		.byte	0
 5571 020b 00       		.byte	0
 5572 020c 21       		.uleb128 0x21
 5573 020d 0B       		.uleb128 0xb
 5574 020e 01       		.byte	0x1
 5575 020f 55       		.uleb128 0x55
 5576 0210 17       		.uleb128 0x17
 5577 0211 00       		.byte	0
 5578 0212 00       		.byte	0
 5579 0213 22       		.uleb128 0x22
 5580 0214 2E       		.uleb128 0x2e
 5581 0215 00       		.byte	0
 5582 0216 3F       		.uleb128 0x3f
 5583 0217 19       		.uleb128 0x19
 5584 0218 03       		.uleb128 0x3
 5585 0219 0E       		.uleb128 0xe
 5586 021a 3A       		.uleb128 0x3a
 5587 021b 0B       		.uleb128 0xb
 5588 021c 3B       		.uleb128 0x3b
 5589 021d 05       		.uleb128 0x5
 5590 021e 49       		.uleb128 0x49
 5591 021f 13       		.uleb128 0x13
 5592 0220 11       		.uleb128 0x11
 5593 0221 01       		.uleb128 0x1
 5594 0222 12       		.uleb128 0x12
 5595 0223 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 122


 5596 0224 40       		.uleb128 0x40
 5597 0225 18       		.uleb128 0x18
 5598 0226 9742     		.uleb128 0x2117
 5599 0228 19       		.uleb128 0x19
 5600 0229 00       		.byte	0
 5601 022a 00       		.byte	0
 5602 022b 23       		.uleb128 0x23
 5603 022c 34       		.uleb128 0x34
 5604 022d 00       		.byte	0
 5605 022e 03       		.uleb128 0x3
 5606 022f 0E       		.uleb128 0xe
 5607 0230 3A       		.uleb128 0x3a
 5608 0231 0B       		.uleb128 0xb
 5609 0232 3B       		.uleb128 0x3b
 5610 0233 05       		.uleb128 0x5
 5611 0234 49       		.uleb128 0x49
 5612 0235 13       		.uleb128 0x13
 5613 0236 3F       		.uleb128 0x3f
 5614 0237 19       		.uleb128 0x19
 5615 0238 3C       		.uleb128 0x3c
 5616 0239 19       		.uleb128 0x19
 5617 023a 00       		.byte	0
 5618 023b 00       		.byte	0
 5619 023c 24       		.uleb128 0x24
 5620 023d 34       		.uleb128 0x34
 5621 023e 00       		.byte	0
 5622 023f 03       		.uleb128 0x3
 5623 0240 0E       		.uleb128 0xe
 5624 0241 3A       		.uleb128 0x3a
 5625 0242 0B       		.uleb128 0xb
 5626 0243 3B       		.uleb128 0x3b
 5627 0244 0B       		.uleb128 0xb
 5628 0245 49       		.uleb128 0x49
 5629 0246 13       		.uleb128 0x13
 5630 0247 3F       		.uleb128 0x3f
 5631 0248 19       		.uleb128 0x19
 5632 0249 02       		.uleb128 0x2
 5633 024a 18       		.uleb128 0x18
 5634 024b 00       		.byte	0
 5635 024c 00       		.byte	0
 5636 024d 25       		.uleb128 0x25
 5637 024e 21       		.uleb128 0x21
 5638 024f 00       		.byte	0
 5639 0250 49       		.uleb128 0x49
 5640 0251 13       		.uleb128 0x13
 5641 0252 2F       		.uleb128 0x2f
 5642 0253 05       		.uleb128 0x5
 5643 0254 00       		.byte	0
 5644 0255 00       		.byte	0
 5645 0256 26       		.uleb128 0x26
 5646 0257 34       		.uleb128 0x34
 5647 0258 00       		.byte	0
 5648 0259 03       		.uleb128 0x3
 5649 025a 08       		.uleb128 0x8
 5650 025b 3A       		.uleb128 0x3a
 5651 025c 0B       		.uleb128 0xb
 5652 025d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 123


 5653 025e 0B       		.uleb128 0xb
 5654 025f 49       		.uleb128 0x49
 5655 0260 13       		.uleb128 0x13
 5656 0261 3F       		.uleb128 0x3f
 5657 0262 19       		.uleb128 0x19
 5658 0263 02       		.uleb128 0x2
 5659 0264 18       		.uleb128 0x18
 5660 0265 00       		.byte	0
 5661 0266 00       		.byte	0
 5662 0267 00       		.byte	0
 5663              		.section	.debug_aranges,"",%progbits
 5664 0000 D4000000 		.4byte	0xd4
 5665 0004 0200     		.2byte	0x2
 5666 0006 00000000 		.4byte	.Ldebug_info0
 5667 000a 04       		.byte	0x4
 5668 000b 00       		.byte	0
 5669 000c 0000     		.2byte	0
 5670 000e 0000     		.2byte	0
 5671 0010 00000000 		.4byte	.LFB64
 5672 0014 44000000 		.4byte	.LFE64-.LFB64
 5673 0018 00000000 		.4byte	.LFB65
 5674 001c 6C000000 		.4byte	.LFE65-.LFB65
 5675 0020 00000000 		.4byte	.LFB66
 5676 0024 32000000 		.4byte	.LFE66-.LFB66
 5677 0028 00000000 		.4byte	.LFB67
 5678 002c 20000000 		.4byte	.LFE67-.LFB67
 5679 0030 00000000 		.4byte	.LFB68
 5680 0034 40000000 		.4byte	.LFE68-.LFB68
 5681 0038 00000000 		.4byte	.LFB69
 5682 003c DC000000 		.4byte	.LFE69-.LFB69
 5683 0040 00000000 		.4byte	.LFB70
 5684 0044 1C000000 		.4byte	.LFE70-.LFB70
 5685 0048 00000000 		.4byte	.LFB71
 5686 004c 28000000 		.4byte	.LFE71-.LFB71
 5687 0050 00000000 		.4byte	.LFB72
 5688 0054 C8000000 		.4byte	.LFE72-.LFB72
 5689 0058 00000000 		.4byte	.LFB73
 5690 005c 00010000 		.4byte	.LFE73-.LFB73
 5691 0060 00000000 		.4byte	.LFB74
 5692 0064 78000000 		.4byte	.LFE74-.LFB74
 5693 0068 00000000 		.4byte	.LFB75
 5694 006c 74010000 		.4byte	.LFE75-.LFB75
 5695 0070 00000000 		.4byte	.LFB76
 5696 0074 B8000000 		.4byte	.LFE76-.LFB76
 5697 0078 00000000 		.4byte	.LFB77
 5698 007c 1C000000 		.4byte	.LFE77-.LFB77
 5699 0080 00000000 		.4byte	.LFB78
 5700 0084 28000000 		.4byte	.LFE78-.LFB78
 5701 0088 00000000 		.4byte	.LFB79
 5702 008c 84000000 		.4byte	.LFE79-.LFB79
 5703 0090 00000000 		.4byte	.LFB80
 5704 0094 40000000 		.4byte	.LFE80-.LFB80
 5705 0098 00000000 		.4byte	.LFB81
 5706 009c C4050000 		.4byte	.LFE81-.LFB81
 5707 00a0 00000000 		.4byte	.LFB82
 5708 00a4 68010000 		.4byte	.LFE82-.LFB82
 5709 00a8 00000000 		.4byte	.LFB83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 124


 5710 00ac 44010000 		.4byte	.LFE83-.LFB83
 5711 00b0 00000000 		.4byte	.LFB84
 5712 00b4 14000000 		.4byte	.LFE84-.LFB84
 5713 00b8 00000000 		.4byte	.LFB85
 5714 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5715 00c0 00000000 		.4byte	.LFB86
 5716 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5717 00c8 00000000 		.4byte	.LFB87
 5718 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5719 00d0 00000000 		.4byte	0
 5720 00d4 00000000 		.4byte	0
 5721              		.section	.debug_ranges,"",%progbits
 5722              	.Ldebug_ranges0:
 5723 0000 5A030000 		.4byte	.LBB9
 5724 0004 52050000 		.4byte	.LBE9
 5725 0008 54050000 		.4byte	.LBB10
 5726 000c 5C050000 		.4byte	.LBE10
 5727 0010 5E050000 		.4byte	.LBB11
 5728 0014 66050000 		.4byte	.LBE11
 5729 0018 00000000 		.4byte	0
 5730 001c 00000000 		.4byte	0
 5731 0020 00000000 		.4byte	.LFB64
 5732 0024 44000000 		.4byte	.LFE64
 5733 0028 00000000 		.4byte	.LFB65
 5734 002c 6C000000 		.4byte	.LFE65
 5735 0030 00000000 		.4byte	.LFB66
 5736 0034 32000000 		.4byte	.LFE66
 5737 0038 00000000 		.4byte	.LFB67
 5738 003c 20000000 		.4byte	.LFE67
 5739 0040 00000000 		.4byte	.LFB68
 5740 0044 40000000 		.4byte	.LFE68
 5741 0048 00000000 		.4byte	.LFB69
 5742 004c DC000000 		.4byte	.LFE69
 5743 0050 00000000 		.4byte	.LFB70
 5744 0054 1C000000 		.4byte	.LFE70
 5745 0058 00000000 		.4byte	.LFB71
 5746 005c 28000000 		.4byte	.LFE71
 5747 0060 00000000 		.4byte	.LFB72
 5748 0064 C8000000 		.4byte	.LFE72
 5749 0068 00000000 		.4byte	.LFB73
 5750 006c 00010000 		.4byte	.LFE73
 5751 0070 00000000 		.4byte	.LFB74
 5752 0074 78000000 		.4byte	.LFE74
 5753 0078 00000000 		.4byte	.LFB75
 5754 007c 74010000 		.4byte	.LFE75
 5755 0080 00000000 		.4byte	.LFB76
 5756 0084 B8000000 		.4byte	.LFE76
 5757 0088 00000000 		.4byte	.LFB77
 5758 008c 1C000000 		.4byte	.LFE77
 5759 0090 00000000 		.4byte	.LFB78
 5760 0094 28000000 		.4byte	.LFE78
 5761 0098 00000000 		.4byte	.LFB79
 5762 009c 84000000 		.4byte	.LFE79
 5763 00a0 00000000 		.4byte	.LFB80
 5764 00a4 40000000 		.4byte	.LFE80
 5765 00a8 00000000 		.4byte	.LFB81
 5766 00ac C4050000 		.4byte	.LFE81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 125


 5767 00b0 00000000 		.4byte	.LFB82
 5768 00b4 68010000 		.4byte	.LFE82
 5769 00b8 00000000 		.4byte	.LFB83
 5770 00bc 44010000 		.4byte	.LFE83
 5771 00c0 00000000 		.4byte	.LFB84
 5772 00c4 14000000 		.4byte	.LFE84
 5773 00c8 00000000 		.4byte	.LFB85
 5774 00cc 1A000000 		.4byte	.LFE85
 5775 00d0 00000000 		.4byte	.LFB86
 5776 00d4 2A000000 		.4byte	.LFE86
 5777 00d8 00000000 		.4byte	.LFB87
 5778 00dc 7C020000 		.4byte	.LFE87
 5779 00e0 00000000 		.4byte	0
 5780 00e4 00000000 		.4byte	0
 5781              		.section	.debug_line,"",%progbits
 5782              	.Ldebug_line0:
 5783 0000 F0050000 		.section	.debug_str,"MS",%progbits,1
 5783      02002B02 
 5783      00000201 
 5783      FB0E0D00 
 5783      01010101 
 5784              	.LASF142:
 5785 0000 676D745F 		.ascii	"gmt_offset\000"
 5785      6F666673 
 5785      657400
 5786              	.LASF16:
 5787 000b 75696E74 		.ascii	"uint16\000"
 5787      313600
 5788              	.LASF38:
 5789 0012 76616C75 		.ascii	"value\000"
 5789      6500
 5790              	.LASF27:
 5791 0018 746D5F68 		.ascii	"tm_hour\000"
 5791      6F757200 
 5792              	.LASF32:
 5793 0020 746D5F79 		.ascii	"tm_yday\000"
 5793      64617900 
 5794              	.LASF184:
 5795 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5795      73657273 
 5795      5C64616E 
 5795      747A5C44 
 5795      6F63756D 
 5796 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5796      2E637964 
 5796      736E00
 5797              	.LASF150:
 5798 0060 62756666 		.ascii	"buffer_overflow\000"
 5798      65725F6F 
 5798      76657266 
 5798      6C6F7700 
 5799              	.LASF4:
 5800 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5800      6E74385F 
 5800      7400
 5801              	.LASF72:
 5802 007a 636F756E 		.ascii	"countDownResetCondition\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 126


 5802      74446F77 
 5802      6E526573 
 5802      6574436F 
 5802      6E646974 
 5803              	.LASF54:
 5804 0092 6C6F6E67 		.ascii	"longitude\000"
 5804      69747564 
 5804      6500
 5805              	.LASF182:
 5806 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5806      43313120 
 5806      352E342E 
 5806      31203230 
 5806      31363036 
 5807 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5807      20726576 
 5807      6973696F 
 5807      6E203233 
 5807      37373135 
 5808 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5808      66756E63 
 5808      74696F6E 
 5808      2D736563 
 5808      74696F6E 
 5809              	.LASF145:
 5810 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5810      6D5F7761 
 5810      6B657570 
 5810      00
 5811              	.LASF10:
 5812 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5812      206C6F6E 
 5812      6720756E 
 5812      7369676E 
 5812      65642069 
 5813              	.LASF126:
 5814 014e 73616D70 		.ascii	"sample_freq\000"
 5814      6C655F66 
 5814      72657100 
 5815              	.LASF154:
 5816 015a 6D6F6465 		.ascii	"modem_state\000"
 5816      6D5F7374 
 5816      61746500 
 5817              	.LASF99:
 5818 0166 74657374 		.ascii	"test\000"
 5818      00
 5819              	.LASF169:
 5820 016b 616C6172 		.ascii	"alarmMeasure\000"
 5820      6D4D6561 
 5820      73757265 
 5820      00
 5821              	.LASF149:
 5822 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5822      52784275 
 5822      66666572 
 5822      00
 5823              	.LASF177:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 127


 5824 0185 74696D65 		.ascii	"timetoLevelSensor\000"
 5824      746F4C65 
 5824      76656C53 
 5824      656E736F 
 5824      7200
 5825              	.LASF156:
 5826 0197 6D6F6465 		.ascii	"modem_stats\000"
 5826      6D5F7374 
 5826      61747300 
 5827              	.LASF9:
 5828 01a3 6C6F6E67 		.ascii	"long long int\000"
 5828      206C6F6E 
 5828      6720696E 
 5828      7400
 5829              	.LASF0:
 5830 01b1 7369676E 		.ascii	"signed char\000"
 5830      65642063 
 5830      68617200 
 5831              	.LASF47:
 5832 01bd 65636E6F 		.ascii	"ecno\000"
 5832      00
 5833              	.LASF69:
 5834 01c2 636F756E 		.ascii	"countDownValue\000"
 5834      74446F77 
 5834      6E56616C 
 5834      756500
 5835              	.LASF170:
 5836 01d1 74696D65 		.ascii	"timeToMeasure\000"
 5836      546F4D65 
 5836      61737572 
 5836      6500
 5837              	.LASF50:
 5838 01df 74696D65 		.ascii	"time_to_network_connect\000"
 5838      5F746F5F 
 5838      6E657477 
 5838      6F726B5F 
 5838      636F6E6E 
 5839              	.LASF172:
 5840 01f7 74696D65 		.ascii	"timeToSync\000"
 5840      546F5379 
 5840      6E6300
 5841              	.LASF131:
 5842 0202 646F776E 		.ascii	"down_level_freq\000"
 5842      5F6C6576 
 5842      656C5F66 
 5842      72657100 
 5843              	.LASF165:
 5844 0212 68747470 		.ascii	"http_body\000"
 5844      5F626F64 
 5844      7900
 5845              	.LASF110:
 5846 021c 7365745F 		.ascii	"set_up_internet_connection\000"
 5846      75705F69 
 5846      6E746572 
 5846      6E65745F 
 5846      636F6E6E 
 5847              	.LASF141:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 128


 5848 0237 7365636F 		.ascii	"second\000"
 5848      6E6400
 5849              	.LASF137:
 5850 023e 79656172 		.ascii	"year\000"
 5850      00
 5851              	.LASF178:
 5852 0243 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 5852      6D446F77 
 5852      6E737472 
 5852      65616D4C 
 5852      6576656C 
 5853              	.LASF132:
 5854 025e 74656D70 		.ascii	"temp\000"
 5854      00
 5855              	.LASF6:
 5856 0263 6C6F6E67 		.ascii	"long int\000"
 5856      20696E74 
 5856      00
 5857              	.LASF45:
 5858 026c 72786C65 		.ascii	"rxlev\000"
 5858      7600
 5859              	.LASF70:
 5860 0272 63757272 		.ascii	"currentCountDownValue\000"
 5860      656E7443 
 5860      6F756E74 
 5860      446F776E 
 5860      56616C75 
 5861              	.LASF143:
 5862 0288 6D6F6465 		.ascii	"modem_get_state\000"
 5862      6D5F6765 
 5862      745F7374 
 5862      61746500 
 5863              	.LASF55:
 5864 0298 616C7469 		.ascii	"altitude\000"
 5864      74756465 
 5864      00
 5865              	.LASF15:
 5866 02a1 75696E74 		.ascii	"uint8\000"
 5866      3800
 5867              	.LASF130:
 5868 02a7 6C657665 		.ascii	"level_sensor_freq\000"
 5868      6C5F7365 
 5868      6E736F72 
 5868      5F667265 
 5868      7100
 5869              	.LASF175:
 5870 02b9 74696D65 		.ascii	"timeToAppLED\000"
 5870      546F4170 
 5870      704C4544 
 5870      00
 5871              	.LASF19:
 5872 02c6 696E7433 		.ascii	"int32\000"
 5872      3200
 5873              	.LASF59:
 5874 02cc 6E6F6465 		.ascii	"node_type\000"
 5874      5F747970 
 5874      6500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 129


 5875              	.LASF133:
 5876 02d6 6D6F6465 		.ascii	"modem_configure_settings\000"
 5876      6D5F636F 
 5876      6E666967 
 5876      7572655F 
 5876      73657474 
 5877              	.LASF118:
 5878 02ef 735F7369 		.ascii	"s_sim_type\000"
 5878      6D5F7479 
 5878      706500
 5879              	.LASF100:
 5880 02fa 6E657477 		.ascii	"network_time\000"
 5880      6F726B5F 
 5880      74696D65 
 5880      00
 5881              	.LASF3:
 5882 0307 73686F72 		.ascii	"short unsigned int\000"
 5882      7420756E 
 5882      7369676E 
 5882      65642069 
 5882      6E7400
 5883              	.LASF17:
 5884 031a 75696E74 		.ascii	"uint32\000"
 5884      333200
 5885              	.LASF96:
 5886 0321 696E7465 		.ascii	"interval\000"
 5886      7276616C 
 5886      00
 5887              	.LASF7:
 5888 032a 5F5F7569 		.ascii	"__uint32_t\000"
 5888      6E743332 
 5888      5F7400
 5889              	.LASF135:
 5890 0335 6D6F6465 		.ascii	"modem_get_network_time\000"
 5890      6D5F6765 
 5890      745F6E65 
 5890      74776F72 
 5890      6B5F7469 
 5891              	.LASF29:
 5892 034c 746D5F6D 		.ascii	"tm_mon\000"
 5892      6F6E00
 5893              	.LASF123:
 5894 0353 735F6C65 		.ascii	"s_level_sensor\000"
 5894      76656C5F 
 5894      73656E73 
 5894      6F7200
 5895              	.LASF179:
 5896 0362 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 5896      746F446F 
 5896      776E7374 
 5896      7265616D 
 5896      4C657665 
 5897              	.LASF63:
 5898 037e 64656275 		.ascii	"debug_level\000"
 5898      675F6C65 
 5898      76656C00 
 5899              	.LASF144:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 130


 5900 038a 6D6F6465 		.ascii	"modem_sleep\000"
 5900      6D5F736C 
 5900      65657000 
 5901              	.LASF121:
 5902 0396 735F6465 		.ascii	"s_debug_freq\000"
 5902      6275675F 
 5902      66726571 
 5902      00
 5903              	.LASF114:
 5904 03a3 75706461 		.ascii	"updatable_parameters_initialize\000"
 5904      7461626C 
 5904      655F7061 
 5904      72616D65 
 5904      74657273 
 5905              	.LASF30:
 5906 03c3 746D5F79 		.ascii	"tm_year\000"
 5906      65617200 
 5907              	.LASF171:
 5908 03cb 616C6172 		.ascii	"alarmSync\000"
 5908      6D53796E 
 5908      6300
 5909              	.LASF162:
 5910 03d5 4170705F 		.ascii	"App_LED_enabled\000"
 5910      4C45445F 
 5910      656E6162 
 5910      6C656400 
 5911              	.LASF40:
 5912 03e5 6B65795F 		.ascii	"key_value_t\000"
 5912      76616C75 
 5912      655F7400 
 5913              	.LASF87:
 5914 03f1 7077725F 		.ascii	"pwr_check\000"
 5914      63686563 
 5914      6B00
 5915              	.LASF8:
 5916 03fb 6C6F6E67 		.ascii	"long unsigned int\000"
 5916      20756E73 
 5916      69676E65 
 5916      6420696E 
 5916      7400
 5917              	.LASF102:
 5918 040d 65787472 		.ascii	"extract_string\000"
 5918      6163745F 
 5918      73747269 
 5918      6E6700
 5919              	.LASF92:
 5920 041c 74696D65 		.ascii	"timeout\000"
 5920      6F757400 
 5921              	.LASF115:
 5922 0424 6765745F 		.ascii	"get_cell_network_stats\000"
 5922      63656C6C 
 5922      5F6E6574 
 5922      776F726B 
 5922      5F737461 
 5923              	.LASF39:
 5924 043b 74696D65 		.ascii	"timeStamp\000"
 5924      5374616D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 131


 5924      7000
 5925              	.LASF56:
 5926 0445 74696D65 		.ascii	"time_to_lock\000"
 5926      5F746F5F 
 5926      6C6F636B 
 5926      00
 5927              	.LASF153:
 5928 0452 64617461 		.ascii	"data\000"
 5928      00
 5929              	.LASF78:
 5930 0457 65705F70 		.ascii	"ep_port\000"
 5930      6F727400 
 5931              	.LASF33:
 5932 045f 746D5F69 		.ascii	"tm_isdst\000"
 5932      73647374 
 5932      00
 5933              	.LASF74:
 5934 0468 6D6F6465 		.ascii	"modem_info\000"
 5934      6D5F696E 
 5934      666F00
 5935              	.LASF77:
 5936 0473 65705F68 		.ascii	"ep_host\000"
 5936      6F737400 
 5937              	.LASF75:
 5938 047b 63686970 		.ascii	"chip_uniqueId\000"
 5938      5F756E69 
 5938      71756549 
 5938      6400
 5939              	.LASF97:
 5940 0489 6D6F6465 		.ascii	"modem_power_up\000"
 5940      6D5F706F 
 5940      7765725F 
 5940      757000
 5941              	.LASF183:
 5942 0498 6D6F6465 		.ascii	"modem.c\000"
 5942      6D2E6300 
 5943              	.LASF104:
 5944 04a0 62656769 		.ascii	"beginMarker\000"
 5944      6E4D6172 
 5944      6B657200 
 5945              	.LASF106:
 5946 04ac 74617267 		.ascii	"target\000"
 5946      657400
 5947              	.LASF51:
 5948 04b3 74696D65 		.ascii	"time_to_acquire_ip\000"
 5948      5F746F5F 
 5948      61637175 
 5948      6972655F 
 5948      697000
 5949              	.LASF105:
 5950 04c6 656E644D 		.ascii	"endMarker\000"
 5950      61726B65 
 5950      7200
 5951              	.LASF2:
 5952 04d0 73686F72 		.ascii	"short int\000"
 5952      7420696E 
 5952      7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 132


 5953              	.LASF136:
 5954 04da 65706F63 		.ascii	"epoch_time\000"
 5954      685F7469 
 5954      6D6500
 5955              	.LASF5:
 5956 04e5 5F5F696E 		.ascii	"__int32_t\000"
 5956      7433325F 
 5956      7400
 5957              	.LASF174:
 5958 04ef 616C6172 		.ascii	"alarmAppLED\000"
 5958      6D417070 
 5958      4C454400 
 5959              	.LASF103:
 5960 04fb 66726F6D 		.ascii	"from\000"
 5960      00
 5961              	.LASF109:
 5962 0500 63726567 		.ascii	"creg\000"
 5962      00
 5963              	.LASF128:
 5964 0505 64656275 		.ascii	"debug_freq\000"
 5964      675F6672 
 5964      657100
 5965              	.LASF93:
 5966 0510 61745F61 		.ascii	"at_attempt\000"
 5966      7474656D 
 5966      707400
 5967              	.LASF161:
 5968 051b 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 5968      73747265 
 5968      616D5F6C 
 5968      6576656C 
 5968      5F73656E 
 5969              	.LASF101:
 5970 053b 61745F77 		.ascii	"at_write_command\000"
 5970      72697465 
 5970      5F636F6D 
 5970      6D616E64 
 5970      00
 5971              	.LASF76:
 5972 054c 7379735F 		.ascii	"sys_info_t\000"
 5972      696E666F 
 5972      5F7400
 5973              	.LASF68:
 5974 0557 75706461 		.ascii	"updatable_parameters_t\000"
 5974      7461626C 
 5974      655F7061 
 5974      72616D65 
 5974      74657273 
 5975              	.LASF127:
 5976 056e 7265706F 		.ascii	"report_freq\000"
 5976      72745F66 
 5976      72657100 
 5977              	.LASF151:
 5978 057a 64617461 		.ascii	"dataPointsInStack\000"
 5978      506F696E 
 5978      7473496E 
 5978      53746163 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 133


 5978      6B00
 5979              	.LASF26:
 5980 058c 746D5F6D 		.ascii	"tm_min\000"
 5980      696E00
 5981              	.LASF24:
 5982 0593 73697A65 		.ascii	"sizetype\000"
 5982      74797065 
 5982      00
 5983              	.LASF124:
 5984 059c 735F646F 		.ascii	"s_down_level_sensor\000"
 5984      776E5F6C 
 5984      6576656C 
 5984      5F73656E 
 5984      736F7200 
 5985              	.LASF138:
 5986 05b0 6D6F6E74 		.ascii	"month\000"
 5986      6800
 5987              	.LASF108:
 5988 05b6 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5988      6F6E6E65 
 5988      63746564 
 5988      5F746F5F 
 5988      63656C6C 
 5989              	.LASF180:
 5990 05d3 75617274 		.ascii	"uart_received_string\000"
 5990      5F726563 
 5990      65697665 
 5990      645F7374 
 5990      72696E67 
 5991              	.LASF53:
 5992 05e8 6C617469 		.ascii	"latitude\000"
 5992      74756465 
 5992      00
 5993              	.LASF34:
 5994 05f1 74657374 		.ascii	"test_name\000"
 5994      5F6E616D 
 5994      6500
 5995              	.LASF173:
 5996 05fb 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5996      546F5379 
 5996      636E5265 
 5996      6D6F7465 
 5996      50617261 
 5997              	.LASF98:
 5998 0612 6D6F6465 		.ascii	"modem_test\000"
 5998      6D5F7465 
 5998      737400
 5999              	.LASF113:
 6000 061d 6D617463 		.ascii	"match\000"
 6000      6800
 6001              	.LASF157:
 6002 0623 75706461 		.ascii	"updatable_parameters\000"
 6002      7461626C 
 6002      655F7061 
 6002      72616D65 
 6002      74657273 
 6003              	.LASF139:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 134


 6004 0638 686F7572 		.ascii	"hour\000"
 6004      00
 6005              	.LASF90:
 6006 063d 636F6D6D 		.ascii	"commands\000"
 6006      616E6473 
 6006      00
 6007              	.LASF94:
 6008 0646 636F6D70 		.ascii	"compare_location\000"
 6008      6172655F 
 6008      6C6F6361 
 6008      74696F6E 
 6008      00
 6009              	.LASF20:
 6010 0657 666C6F61 		.ascii	"float\000"
 6010      7400
 6011              	.LASF80:
 6012 065d 6D6F6465 		.ascii	"modem_initialize\000"
 6012      6D5F696E 
 6012      69746961 
 6012      6C697A65 
 6012      00
 6013              	.LASF120:
 6014 066e 735F7265 		.ascii	"s_report_freq\000"
 6014      706F7274 
 6014      5F667265 
 6014      7100
 6015              	.LASF125:
 6016 067c 735F6170 		.ascii	"s_apps_enabled\000"
 6016      70735F65 
 6016      6E61626C 
 6016      656400
 6017              	.LASF60:
 6018 068b 73696D5F 		.ascii	"sim_type\000"
 6018      74797065 
 6018      00
 6019              	.LASF111:
 6020 0694 6973725F 		.ascii	"isr_telit_rx\000"
 6020      74656C69 
 6020      745F7278 
 6020      00
 6021              	.LASF73:
 6022 06a1 616C6172 		.ascii	"alarm\000"
 6022      6D00
 6023              	.LASF67:
 6024 06a7 5F426F6F 		.ascii	"_Bool\000"
 6024      6C00
 6025              	.LASF13:
 6026 06ad 696E7433 		.ascii	"int32_t\000"
 6026      325F7400 
 6027              	.LASF1:
 6028 06b5 756E7369 		.ascii	"unsigned char\000"
 6028      676E6564 
 6028      20636861 
 6028      7200
 6029              	.LASF168:
 6030 06c3 73797374 		.ascii	"system_settings\000"
 6030      656D5F73 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 135


 6030      65747469 
 6030      6E677300 
 6031              	.LASF95:
 6032 06d3 64656C61 		.ascii	"delay\000"
 6032      7900
 6033              	.LASF48:
 6034 06d9 72737271 		.ascii	"rsrq\000"
 6034      00
 6035              	.LASF62:
 6036 06de 73796E63 		.ascii	"sync_time\000"
 6036      5F74696D 
 6036      6500
 6037              	.LASF117:
 6038 06e8 735F6E6F 		.ascii	"s_node_type\000"
 6038      64655F74 
 6038      79706500 
 6039              	.LASF46:
 6040 06f4 72736370 		.ascii	"rscp\000"
 6040      00
 6041              	.LASF146:
 6042 06f9 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 6042      6D5F6765 
 6042      745F6770 
 6042      735F636F 
 6042      6F726469 
 6043              	.LASF37:
 6044 0713 74657374 		.ascii	"test_t\000"
 6044      5F7400
 6045              	.LASF167:
 6046 071a 73797374 		.ascii	"system_info\000"
 6046      656D5F69 
 6046      6E666F00 
 6047              	.LASF43:
 6048 0726 696D6569 		.ascii	"imei\000"
 6048      00
 6049              	.LASF36:
 6050 072b 72656173 		.ascii	"reason\000"
 6050      6F6E00
 6051              	.LASF49:
 6052 0732 72737270 		.ascii	"rsrp\000"
 6052      00
 6053              	.LASF52:
 6054 0737 6D6F6465 		.ascii	"modem_stats_t\000"
 6054      6D5F7374 
 6054      6174735F 
 6054      7400
 6055              	.LASF89:
 6056 0745 75617274 		.ascii	"uart_string_reset\000"
 6056      5F737472 
 6056      696E675F 
 6056      72657365 
 6056      7400
 6057              	.LASF176:
 6058 0757 616C6172 		.ascii	"alarmLevelSensor\000"
 6058      6D4C6576 
 6058      656C5365 
 6058      6E736F72 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 136


 6058      00
 6059              	.LASF31:
 6060 0768 746D5F77 		.ascii	"tm_wday\000"
 6060      64617900 
 6061              	.LASF88:
 6062 0770 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 6062      6D5F736F 
 6062      66745F70 
 6062      6F776572 
 6062      5F637963 
 6063              	.LASF65:
 6064 0787 4C657665 		.ascii	"Level_Sensor_freq\000"
 6064      6C5F5365 
 6064      6E736F72 
 6064      5F667265 
 6064      7100
 6065              	.LASF158:
 6066 0799 6C657665 		.ascii	"level_sensor_inbox\000"
 6066      6C5F7365 
 6066      6E736F72 
 6066      5F696E62 
 6066      6F7800
 6067              	.LASF23:
 6068 07ac 6C6F6E67 		.ascii	"long double\000"
 6068      20646F75 
 6068      626C6500 
 6069              	.LASF22:
 6070 07b8 63686172 		.ascii	"char\000"
 6070      00
 6071              	.LASF107:
 6072 07bd 6D6F6465 		.ascii	"modem_process_tasks\000"
 6072      6D5F7072 
 6072      6F636573 
 6072      735F7461 
 6072      736B7300 
 6073              	.LASF11:
 6074 07d1 756E7369 		.ascii	"unsigned int\000"
 6074      676E6564 
 6074      20696E74 
 6074      00
 6075              	.LASF134:
 6076 07de 4346554E 		.ascii	"CFUN\000"
 6076      00
 6077              	.LASF42:
 6078 07e3 6D6F6465 		.ascii	"model_id\000"
 6078      6C5F6964 
 6078      00
 6079              	.LASF166:
 6080 07ec 68747470 		.ascii	"http_route\000"
 6080      5F726F75 
 6080      746500
 6081              	.LASF44:
 6082 07f7 6D6F6465 		.ascii	"modem_info_t\000"
 6082      6D5F696E 
 6082      666F5F74 
 6082      00
 6083              	.LASF58:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 137


 6084 0804 6770735F 		.ascii	"gps_t\000"
 6084      7400
 6085              	.LASF181:
 6086 080a 75617274 		.ascii	"uart_string_index\000"
 6086      5F737472 
 6086      696E675F 
 6086      696E6465 
 6086      7800
 6087              	.LASF61:
 6088 081c 6D656173 		.ascii	"measure_time\000"
 6088      7572655F 
 6088      74696D65 
 6088      00
 6089              	.LASF112:
 6090 0829 69735F63 		.ascii	"is_connected_to_internet\000"
 6090      6F6E6E65 
 6090      63746564 
 6090      5F746F5F 
 6090      696E7465 
 6091              	.LASF155:
 6092 0842 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 6092      6D5F7374 
 6092      6172745F 
 6092      74696D65 
 6092      5F737461 
 6093              	.LASF148:
 6094 0859 6770735F 		.ascii	"gps_status\000"
 6094      73746174 
 6094      757300
 6095              	.LASF81:
 6096 0864 70696E73 		.ascii	"pins_configure_inactive\000"
 6096      5F636F6E 
 6096      66696775 
 6096      72655F69 
 6096      6E616374 
 6097              	.LASF122:
 6098 087c 735F6170 		.ascii	"s_app_led\000"
 6098      705F6C65 
 6098      6400
 6099              	.LASF41:
 6100 0886 73696D5F 		.ascii	"sim_id\000"
 6100      696400
 6101              	.LASF28:
 6102 088d 746D5F6D 		.ascii	"tm_mday\000"
 6102      64617900 
 6103              	.LASF57:
 6104 0895 76616C69 		.ascii	"valid\000"
 6104      6400
 6105              	.LASF82:
 6106 089b 70696E73 		.ascii	"pins_configure_active\000"
 6106      5F636F6E 
 6106      66696775 
 6106      72655F61 
 6106      63746976 
 6107              	.LASF140:
 6108 08b1 6D696E75 		.ascii	"minute\000"
 6108      746500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 138


 6109              	.LASF14:
 6110 08b8 75696E74 		.ascii	"uint32_t\000"
 6110      33325F74 
 6110      00
 6111              	.LASF25:
 6112 08c1 746D5F73 		.ascii	"tm_sec\000"
 6112      656300
 6113              	.LASF116:
 6114 08c8 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 6114      75706461 
 6114      7465645F 
 6114      70617261 
 6114      6D657465 
 6115              	.LASF119:
 6116 08eb 735F7361 		.ascii	"s_sample_freq\000"
 6116      6D706C65 
 6116      5F667265 
 6116      7100
 6117              	.LASF35:
 6118 08f9 73746174 		.ascii	"status\000"
 6118      757300
 6119              	.LASF159:
 6120 0900 6C657665 		.ascii	"level_sensor_enabled\000"
 6120      6C5F7365 
 6120      6E736F72 
 6120      5F656E61 
 6120      626C6564 
 6121              	.LASF152:
 6122 0915 64617461 		.ascii	"dataPointsInStackDesired\000"
 6122      506F696E 
 6122      7473496E 
 6122      53746163 
 6122      6B446573 
 6123              	.LASF66:
 6124 092e 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 6124      73747265 
 6124      616D5F4C 
 6124      6576656C 
 6124      5F53656E 
 6125              	.LASF64:
 6126 094b 4170705F 		.ascii	"App_LED_freq\000"
 6126      4C45445F 
 6126      66726571 
 6126      00
 6127              	.LASF79:
 6128 0958 7379735F 		.ascii	"sys_settings_t\000"
 6128      73657474 
 6128      696E6773 
 6128      5F7400
 6129              	.LASF12:
 6130 0967 75696E74 		.ascii	"uint8_t\000"
 6130      385F7400 
 6131              	.LASF18:
 6132 096f 696E7431 		.ascii	"int16\000"
 6132      3600
 6133              	.LASF84:
 6134 0975 61745F72 		.ascii	"at_ready\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cctMqjfM.s 			page 139


 6134      65616479 
 6134      00
 6135              	.LASF85:
 6136 097e 61747465 		.ascii	"attempts\000"
 6136      6D707473 
 6136      00
 6137              	.LASF71:
 6138 0987 636F756E 		.ascii	"countDownType\000"
 6138      74446F77 
 6138      6E547970 
 6138      6500
 6139              	.LASF86:
 6140 0995 626F6F74 		.ascii	"boot_time\000"
 6140      5F74696D 
 6140      6500
 6141              	.LASF91:
 6142 099f 65787065 		.ascii	"expected_response\000"
 6142      63746564 
 6142      5F726573 
 6142      706F6E73 
 6142      6500
 6143              	.LASF147:
 6144 09b1 6C6F636B 		.ascii	"lock_time\000"
 6144      5F74696D 
 6144      6500
 6145              	.LASF164:
 6146 09bb 68747470 		.ascii	"http_request\000"
 6146      5F726571 
 6146      75657374 
 6146      00
 6147              	.LASF83:
 6148 09c8 6D6F6465 		.ascii	"modem_power_down\000"
 6148      6D5F706F 
 6148      7765725F 
 6148      646F776E 
 6148      00
 6149              	.LASF21:
 6150 09d9 646F7562 		.ascii	"double\000"
 6150      6C6500
 6151              	.LASF163:
 6152 09e0 6170705F 		.ascii	"app_led_inbox\000"
 6152      6C65645F 
 6152      696E626F 
 6152      7800
 6153              	.LASF160:
 6154 09ee 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 6154      73747265 
 6154      616D5F6C 
 6154      6576656C 
 6154      5F73656E 
 6155              	.LASF129:
 6156 0a0c 6170705F 		.ascii	"app_led_freq\000"
 6156      6C65645F 
 6156      66726571 
 6156      00
 6157              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
