ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"modem.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.syntax unified
  24              		.global _printf_float
  25              		.thumb
  26              		.syntax unified
  27              		.comm	modem_state,1,1
  28              		.comm	modem_start_time_stamp,4,4
  29              		.comm	modem_info,60,4
  30              		.comm	modem_stats,32,4
  31              		.comm	updatable_parameters,5,4
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.comm	uart_received_string,1024,4
  44              		.global	uart_string_index
  45              		.bss
  46              		.align	1
  47              		.type	uart_string_index, %object
  48              		.size	uart_string_index, 2
  49              	uart_string_index:
  50 0000 0000     		.space	2
  51              		.section	.text.isr_telit_rx,"ax",%progbits
  52              		.align	2
  53              		.global	isr_telit_rx
  54              		.thumb
  55              		.thumb_func
  56              		.type	isr_telit_rx, %function
  57              	isr_telit_rx:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 2


  58              	.LFB64:
  59              		.file 1 "modem.c"
   1:modem.c       **** //Methods for Telit modem 
   2:modem.c       **** #include "modem.h"
   3:modem.c       **** #include "notoriOS.h"
   4:modem.c       **** 
   5:modem.c       **** char uart_received_string[1024];
   6:modem.c       **** int16 uart_string_index=0;
   7:modem.c       **** 
   8:modem.c       **** #define DEFAULT_AT_TIMEOUT 2000u // Send command and wait 2000 ms
   9:modem.c       **** #define NO_AT_TIMEOUT 0u // Send command, no timeout/ don't wait 
  10:modem.c       **** 
  11:modem.c       **** #define TIMEOUT_NETWORK_CONNECT 180 //seconds
  12:modem.c       **** #define TIMEOUT_IP_ACQUIRE 230 //seconds (cummulatinve) add to TIMEOUT_NETWORK_CONNECT
  13:modem.c       **** 
  14:modem.c       **** CY_ISR_PROTO(isr_telit_rx); // Declares a custom ISR function "isr_telit_rx" using the CY_ISR_PROTO
  15:modem.c       **** 
  16:modem.c       **** // Define the custom ISR function "isr_telit_rx" using the CY_ISR macro
  17:modem.c       **** // Get each character from Telit and saves it to uart_received_string
  18:modem.c       **** CY_ISR(isr_telit_rx){      
  60              		.loc 1 18 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 98B5     		push	{r3, r4, r7, lr}
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 3, -16
  67              		.cfi_offset 4, -12
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  19:modem.c       ****     // UART_Telit_GetRxBufferSize() returns the number of received bytes available in the RX buffer
  20:modem.c       ****     while(UART_Telit_GetRxBufferSize()==1){
  72              		.loc 1 20 0
  73 0004 12E0     		b	.L2
  74              	.L3:
  21:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  75              		.loc 1 21 0
  76 0006 0D4B     		ldr	r3, .L4
  77 0008 B3F90030 		ldrsh	r3, [r3]
  78 000c 1C46     		mov	r4, r3
  79 000e FFF7FEFF 		bl	UART_Telit_GetChar
  80 0012 0346     		mov	r3, r0
  81 0014 1A46     		mov	r2, r3
  82 0016 0A4B     		ldr	r3, .L4+4
  83 0018 1A55     		strb	r2, [r3, r4]
  22:modem.c       ****         uart_string_index++;
  84              		.loc 1 22 0
  85 001a 084B     		ldr	r3, .L4
  86 001c B3F90030 		ldrsh	r3, [r3]
  87 0020 9BB2     		uxth	r3, r3
  88 0022 0133     		adds	r3, r3, #1
  89 0024 9BB2     		uxth	r3, r3
  90 0026 1AB2     		sxth	r2, r3
  91 0028 044B     		ldr	r3, .L4
  92 002a 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 3


  93              	.L2:
  20:modem.c       ****         uart_received_string[uart_string_index]=UART_Telit_GetChar();
  94              		.loc 1 20 0
  95 002c FFF7FEFF 		bl	UART_Telit_GetRxBufferSize
  96 0030 0346     		mov	r3, r0
  97 0032 012B     		cmp	r3, #1
  98 0034 E7D0     		beq	.L3
  23:modem.c       ****     }
  24:modem.c       **** 
  25:modem.c       **** }
  99              		.loc 1 25 0
 100 0036 00BF     		nop
 101 0038 98BD     		pop	{r3, r4, r7, pc}
 102              	.L5:
 103 003a 00BF     		.align	2
 104              	.L4:
 105 003c 00000000 		.word	uart_string_index
 106 0040 00000000 		.word	uart_received_string
 107              		.cfi_endproc
 108              	.LFE64:
 109              		.size	isr_telit_rx, .-isr_telit_rx
 110              		.section	.text.modem_initialize,"ax",%progbits
 111              		.align	2
 112              		.global	modem_initialize
 113              		.thumb
 114              		.thumb_func
 115              		.type	modem_initialize, %function
 116              	modem_initialize:
 117              	.LFB65:
  26:modem.c       **** 
  27:modem.c       **** // Initialize the modem
  28:modem.c       **** void modem_initialize(){
 118              		.loc 1 28 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
  29:modem.c       ****     // Don't do much except make sure that all the modem pins are pulled low
  30:modem.c       ****     // Also make sure that the TX PIN is fully disabled
  31:modem.c       ****     pins_configure_inactive();
 128              		.loc 1 31 0
 129 0004 FFF7FEFF 		bl	pins_configure_inactive
  32:modem.c       ****     modem_state = 0;
 130              		.loc 1 32 0
 131 0008 154B     		ldr	r3, .L7
 132 000a 0022     		movs	r2, #0
 133 000c 1A70     		strb	r2, [r3]
  33:modem.c       ****     //initialize states
  34:modem.c       ****     modem_info.imei[0] = '\0';
 134              		.loc 1 34 0
 135 000e 154B     		ldr	r3, .L7+4
 136 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 4


 137 0012 83F82820 		strb	r2, [r3, #40]
  35:modem.c       ****     modem_info.model_id[0] = '\0';
 138              		.loc 1 35 0
 139 0016 134B     		ldr	r3, .L7+4
 140 0018 0022     		movs	r2, #0
 141 001a 1A75     		strb	r2, [r3, #20]
  36:modem.c       ****     modem_info.sim_id[0] = '\0';
 142              		.loc 1 36 0
 143 001c 114B     		ldr	r3, .L7+4
 144 001e 0022     		movs	r2, #0
 145 0020 1A70     		strb	r2, [r3]
  37:modem.c       ****     modem_stats.rxlev = 0;
 146              		.loc 1 37 0
 147 0022 114B     		ldr	r3, .L7+8
 148 0024 0022     		movs	r2, #0
 149 0026 1A60     		str	r2, [r3]
  38:modem.c       ****     modem_stats.ber = 0;
 150              		.loc 1 38 0
 151 0028 0F4B     		ldr	r3, .L7+8
 152 002a 0022     		movs	r2, #0
 153 002c 5A60     		str	r2, [r3, #4]
  39:modem.c       ****     modem_stats.rscp = 0;
 154              		.loc 1 39 0
 155 002e 0E4B     		ldr	r3, .L7+8
 156 0030 0022     		movs	r2, #0
 157 0032 9A60     		str	r2, [r3, #8]
  40:modem.c       ****     modem_stats.ecno = 0;
 158              		.loc 1 40 0
 159 0034 0C4B     		ldr	r3, .L7+8
 160 0036 0022     		movs	r2, #0
 161 0038 DA60     		str	r2, [r3, #12]
  41:modem.c       ****     modem_stats.rsrq = 0;
 162              		.loc 1 41 0
 163 003a 0B4B     		ldr	r3, .L7+8
 164 003c 0022     		movs	r2, #0
 165 003e 1A61     		str	r2, [r3, #16]
  42:modem.c       ****     modem_stats.rsrp = 0;
 166              		.loc 1 42 0
 167 0040 094B     		ldr	r3, .L7+8
 168 0042 0022     		movs	r2, #0
 169 0044 5A61     		str	r2, [r3, #20]
  43:modem.c       ****     modem_stats.time_to_acquire_ip = 0;
 170              		.loc 1 43 0
 171 0046 084B     		ldr	r3, .L7+8
 172 0048 0022     		movs	r2, #0
 173 004a DA61     		str	r2, [r3, #28]
  44:modem.c       ****     modem_stats.time_to_network_connect = 0;
 174              		.loc 1 44 0
 175 004c 064B     		ldr	r3, .L7+8
 176 004e 0022     		movs	r2, #0
 177 0050 9A61     		str	r2, [r3, #24]
  45:modem.c       ****     // Disable the RX Pin interrupt, and only enable it during long timeouts
  46:modem.c       ****     // Rx_Telit_SetInterruptMode(): Configures the interrupt mode for each of the Pins component's 
  47:modem.c       ****     // Rx_Telit_0_INTR selects the first pin in the list, and Rx_Telit_INTR_NONE disables the Rx pi
  48:modem.c       ****     Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 178              		.loc 1 48 0
 179 0052 0021     		movs	r1, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 5


 180 0054 4020     		movs	r0, #64
 181 0056 FFF7FEFF 		bl	Rx_Telit_SetInterruptMode
  49:modem.c       ****     
  50:modem.c       **** }
 182              		.loc 1 50 0
 183 005a 00BF     		nop
 184 005c 80BD     		pop	{r7, pc}
 185              	.L8:
 186 005e 00BF     		.align	2
 187              	.L7:
 188 0060 00000000 		.word	modem_state
 189 0064 00000000 		.word	modem_info
 190 0068 00000000 		.word	modem_stats
 191              		.cfi_endproc
 192              	.LFE65:
 193              		.size	modem_initialize, .-modem_initialize
 194              		.section	.text.pins_configure_inactive,"ax",%progbits
 195              		.align	2
 196              		.global	pins_configure_inactive
 197              		.thumb
 198              		.thumb_func
 199              		.type	pins_configure_inactive, %function
 200              	pins_configure_inactive:
 201              	.LFB66:
  51:modem.c       **** 
  52:modem.c       **** 
  53:modem.c       **** // To be used when the modem power is to be "killed" conpletely to conserve power
  54:modem.c       **** void pins_configure_inactive(){
 202              		.loc 1 54 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0002 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
  55:modem.c       ****    
  56:modem.c       ****    Telit_ControlReg_Write(0u); // Physically disconect UART pin
 212              		.loc 1 56 0
 213 0004 0020     		movs	r0, #0
 214 0006 FFF7FEFF 		bl	Telit_ControlReg_Write
  57:modem.c       ****    Rx_Telit_SetDriveMode(PIN_DM_STRONG); // Set drive mode
 215              		.loc 1 57 0
 216 000a 0C20     		movs	r0, #12
 217 000c FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  58:modem.c       **** 
  59:modem.c       ****    Pin_Telit_pwr_Write(OFF); // Kill power to modem (pulls pin low).
 218              		.loc 1 59 0
 219 0010 0020     		movs	r0, #0
 220 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  60:modem.c       **** 
  61:modem.c       ****    // Pull down all of these, just in case (turns the off).
  62:modem.c       ****    Rx_Telit_Write(OFF); 
 221              		.loc 1 62 0
 222 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 6


 223 0018 FFF7FEFF 		bl	Rx_Telit_Write
  63:modem.c       ****    Tx_Telit_Write(OFF);
 224              		.loc 1 63 0
 225 001c 0020     		movs	r0, #0
 226 001e FFF7FEFF 		bl	Tx_Telit_Write
  64:modem.c       ****    Pin_Telit_ONOFF_Write(OFF);
 227              		.loc 1 64 0
 228 0022 0020     		movs	r0, #0
 229 0024 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
  65:modem.c       ****    Pin_Telit_SWRDY_Write(OFF);
 230              		.loc 1 65 0
 231 0028 0020     		movs	r0, #0
 232 002a FFF7FEFF 		bl	Pin_Telit_SWRDY_Write
  66:modem.c       ****     
  67:modem.c       **** }
 233              		.loc 1 67 0
 234 002e 00BF     		nop
 235 0030 80BD     		pop	{r7, pc}
 236              		.cfi_endproc
 237              	.LFE66:
 238              		.size	pins_configure_inactive, .-pins_configure_inactive
 239 0032 00BF     		.section	.text.pins_configure_active,"ax",%progbits
 240              		.align	2
 241              		.global	pins_configure_active
 242              		.thumb
 243              		.thumb_func
 244              		.type	pins_configure_active, %function
 245              	pins_configure_active:
 246              	.LFB67:
  68:modem.c       **** 
  69:modem.c       **** // Turns on power and configures all UART pin modes
  70:modem.c       **** void pins_configure_active(){
 247              		.loc 1 70 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
  71:modem.c       ****     
  72:modem.c       ****     Rx_Telit_SetDriveMode(PIN_DM_DIG_HIZ); // Power up. Set RX pin to High Impedance Digital mode.
 257              		.loc 1 72 0
 258 0004 0220     		movs	r0, #2
 259 0006 FFF7FEFF 		bl	Rx_Telit_SetDriveMode
  73:modem.c       ****     Telit_ControlReg_Write(1u); // Pull Telit_ControlReg pin high (turns it on).
 260              		.loc 1 73 0
 261 000a 0120     		movs	r0, #1
 262 000c FFF7FEFF 		bl	Telit_ControlReg_Write
  74:modem.c       ****     Pin_Telit_pwr_Write(ON); // Pulls Telit_pwr pin high (turns it on).
 263              		.loc 1 74 0
 264 0010 0120     		movs	r0, #1
 265 0012 FFF7FEFF 		bl	Pin_Telit_pwr_Write
  75:modem.c       ****     CyDelay(100u); // Give the MOSFET a few ms to stalbilise power 
 266              		.loc 1 75 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 7


 267 0016 6420     		movs	r0, #100
 268 0018 FFF7FEFF 		bl	CyDelay
  76:modem.c       **** }
 269              		.loc 1 76 0
 270 001c 00BF     		nop
 271 001e 80BD     		pop	{r7, pc}
 272              		.cfi_endproc
 273              	.LFE67:
 274              		.size	pins_configure_active, .-pins_configure_active
 275              		.section	.rodata
 276              		.align	2
 277              	.LC0:
 278 0000 4F4B00   		.ascii	"OK\000"
 279 0003 00       		.align	2
 280              	.LC1:
 281 0004 41542353 		.ascii	"AT#SHDN\015\000"
 281      48444E0D 
 281      00
 282              		.section	.text.modem_power_down,"ax",%progbits
 283              		.align	2
 284              		.global	modem_power_down
 285              		.thumb
 286              		.thumb_func
 287              		.type	modem_power_down, %function
 288              	modem_power_down:
 289              	.LFB68:
  77:modem.c       **** 
  78:modem.c       **** // Power down the modem -- completely "kill" modem to conserve power.
  79:modem.c       **** void modem_power_down(){
 290              		.loc 1 79 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
  80:modem.c       ****     // AT Command to modem for Software Shut Down - #SHDN
  81:modem.c       ****     // \r is carriage return, it is necessary for the modem to know it got a command
  82:modem.c       ****     at_write_command("AT#SHDN\r","OK",5000u); 
 300              		.loc 1 82 0
 301 0004 41F28832 		movw	r2, #5000
 302 0008 0A49     		ldr	r1, .L12
 303 000a 0B48     		ldr	r0, .L12+4
 304 000c FFF7FEFF 		bl	at_write_command
  83:modem.c       ****    
  84:modem.c       ****     // Soft power cycle makes sure that the modem is all the way on (like holding on button on for 
  85:modem.c       ****     modem_soft_power_cycle();
 305              		.loc 1 85 0
 306 0010 FFF7FEFF 		bl	modem_soft_power_cycle
  86:modem.c       ****     CyDelay(1000u);
 307              		.loc 1 86 0
 308 0014 4FF47A70 		mov	r0, #1000
 309 0018 FFF7FEFF 		bl	CyDelay
  87:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 8


  88:modem.c       ****     UART_Telit_Stop(); // Disables the UART operation.
 310              		.loc 1 88 0
 311 001c FFF7FEFF 		bl	UART_Telit_Stop
  89:modem.c       ****     isr_telit_rx_Stop(); // Disables and removes the interrupt.
 312              		.loc 1 89 0
 313 0020 FFF7FEFF 		bl	isr_telit_rx_Stop
  90:modem.c       ****     pins_configure_inactive(); // We want the modem power to be "killed" completely to conserve pow
 314              		.loc 1 90 0
 315 0024 FFF7FEFF 		bl	pins_configure_inactive
  91:modem.c       ****     modem_state = MODEM_STATE_OFF;
 316              		.loc 1 91 0
 317 0028 044B     		ldr	r3, .L12+8
 318 002a 0022     		movs	r2, #0
 319 002c 1A70     		strb	r2, [r3]
  92:modem.c       ****     
  93:modem.c       **** }
 320              		.loc 1 93 0
 321 002e 00BF     		nop
 322 0030 80BD     		pop	{r7, pc}
 323              	.L13:
 324 0032 00BF     		.align	2
 325              	.L12:
 326 0034 00000000 		.word	.LC0
 327 0038 04000000 		.word	.LC1
 328 003c 00000000 		.word	modem_state
 329              		.cfi_endproc
 330              	.LFE68:
 331              		.size	modem_power_down, .-modem_power_down
 332              		.section	.rodata
 333 000d 000000   		.align	2
 334              	.LC2:
 335 0010 41544530 		.ascii	"ATE0\015\000"
 335      0D00
 336 0016 0000     		.align	2
 337              	.LC3:
 338 0018 4D6F6465 		.ascii	"Modem boot time: %d\000"
 338      6D20626F 
 338      6F742074 
 338      696D653A 
 338      20256400 
 339              		.align	2
 340              	.LC4:
 341 002c 4D6F6465 		.ascii	"Modem ready for AT commands after %d attempt(s).\000"
 341      6D207265 
 341      61647920 
 341      666F7220 
 341      41542063 
 342 005d 000000   		.align	2
 343              	.LC5:
 344 0060 4E6F2072 		.ascii	"No response from modem.\000"
 344      6573706F 
 344      6E736520 
 344      66726F6D 
 344      206D6F64 
 345              		.section	.text.modem_power_up,"ax",%progbits
 346              		.align	2
 347              		.global	modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 9


 348              		.thumb
 349              		.thumb_func
 350              		.type	modem_power_up, %function
 351              	modem_power_up:
 352              	.LFB69:
  94:modem.c       **** 
  95:modem.c       **** // This puts all the modem pins into a state that won't leak power
  96:modem.c       **** // Please call restore_pins() to bring them abck to function when they are needed for UART
  97:modem.c       **** uint8 modem_power_up(){
 353              		.loc 1 97 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357 0000 80B5     		push	{r7, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 82B0     		sub	sp, sp, #8
 362              		.cfi_def_cfa_offset 16
 363 0004 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
  98:modem.c       **** 
  99:modem.c       ****     pins_configure_active(); // Turns on power and configures all UART pin modes
 365              		.loc 1 99 0
 366 0006 FFF7FEFF 		bl	pins_configure_active
 100:modem.c       ****     UART_Telit_Start(); // Sets the initVar variable, calls the UART_Telit_Init() function, and the
 367              		.loc 1 100 0
 368 000a FFF7FEFF 		bl	UART_Telit_Start
 101:modem.c       ****     isr_telit_rx_StartEx(isr_telit_rx); // Sets up the interrupt and enables it. 
 369              		.loc 1 101 0
 370 000e 2C48     		ldr	r0, .L27
 371 0010 FFF7FEFF 		bl	isr_telit_rx_StartEx
 102:modem.c       **** 
 103:modem.c       ****     modem_soft_power_cycle(); // Soft power cycle makes sure that the modem is all the way on (like
 372              		.loc 1 103 0
 373 0014 FFF7FEFF 		bl	modem_soft_power_cycle
 104:modem.c       ****     
 105:modem.c       ****     // Turn off ECHO command (doesn't repeat your command back to you).
 106:modem.c       ****     uint8 at_ready = 0;
 374              		.loc 1 106 0
 375 0018 0023     		movs	r3, #0
 376 001a FB71     		strb	r3, [r7, #7]
 107:modem.c       ****     uint8 attempts = 0;
 377              		.loc 1 107 0
 378 001c 0023     		movs	r3, #0
 379 001e 3B71     		strb	r3, [r7, #4]
 108:modem.c       ****     // Create variable boot_time of the current time stamp.
 109:modem.c       ****     long boot_time = getTimeStamp();
 380              		.loc 1 109 0
 381 0020 FFF7FEFF 		bl	getTimeStamp
 382 0024 3860     		str	r0, [r7]
 383              	.LBB2:
 110:modem.c       ****     
 111:modem.c       ****     //it takes the 4G modem 10+secs (max 20) to boot up, so keep hitting it with AT commands until 
 112:modem.c       ****     for(uint8 attempts = 0; attempts<3; attempts++){
 384              		.loc 1 112 0
 385 0026 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 10


 386 0028 BB71     		strb	r3, [r7, #6]
 387 002a 1CE0     		b	.L15
 388              	.L22:
 389              	.LBB3:
 113:modem.c       ****         
 114:modem.c       ****         for(uint8 pwr_check = 0; pwr_check<20; pwr_check++){
 390              		.loc 1 114 0
 391 002c 0023     		movs	r3, #0
 392 002e 7B71     		strb	r3, [r7, #5]
 393 0030 0EE0     		b	.L16
 394              	.L19:
 115:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 116:modem.c       ****             if(at_write_command("ATE0\r","OK",1000u)){
 395              		.loc 1 116 0
 396 0032 4FF47A72 		mov	r2, #1000
 397 0036 2349     		ldr	r1, .L27+4
 398 0038 2348     		ldr	r0, .L27+8
 399 003a FFF7FEFF 		bl	at_write_command
 400 003e 0346     		mov	r3, r0
 401 0040 002B     		cmp	r3, #0
 402 0042 02D0     		beq	.L17
 117:modem.c       ****                 at_ready = 1;
 403              		.loc 1 117 0
 404 0044 0123     		movs	r3, #1
 405 0046 FB71     		strb	r3, [r7, #7]
 118:modem.c       ****                 break;
 406              		.loc 1 118 0
 407 0048 05E0     		b	.L18
 408              	.L17:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 409              		.loc 1 114 0 discriminator 2
 410 004a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 411 004c 0133     		adds	r3, r3, #1
 412 004e 7B71     		strb	r3, [r7, #5]
 413              	.L16:
 114:modem.c       ****             // AT command ATE0 disables the command echo (doesn't repeat your command back to you).
 414              		.loc 1 114 0 is_stmt 0 discriminator 1
 415 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 416 0052 132B     		cmp	r3, #19
 417 0054 EDD9     		bls	.L19
 418              	.L18:
 419              	.LBE3:
 119:modem.c       ****             }
 120:modem.c       ****         }
 121:modem.c       ****             
 122:modem.c       ****         if(at_ready == 1){
 420              		.loc 1 122 0 is_stmt 1
 421 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 422 0058 012B     		cmp	r3, #1
 423 005a 08D0     		beq	.L26
 123:modem.c       ****             break;
 124:modem.c       ****         }else{
 125:modem.c       ****             // Soft power cycle makes sure that the modem is all the way on (like holding on button
 126:modem.c       ****             modem_soft_power_cycle();
 424              		.loc 1 126 0 discriminator 2
 425 005c FFF7FEFF 		bl	modem_soft_power_cycle
 112:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 11


 426              		.loc 1 112 0 discriminator 2
 427 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 428 0062 0133     		adds	r3, r3, #1
 429 0064 BB71     		strb	r3, [r7, #6]
 430              	.L15:
 112:modem.c       ****         
 431              		.loc 1 112 0 is_stmt 0 discriminator 1
 432 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 433 0068 022B     		cmp	r3, #2
 434 006a DFD9     		bls	.L22
 435 006c 00E0     		b	.L21
 436              	.L26:
 123:modem.c       ****             break;
 437              		.loc 1 123 0 is_stmt 1
 438 006e 00BF     		nop
 439              	.L21:
 440              	.LBE2:
 127:modem.c       ****         }
 128:modem.c       ****     }
 129:modem.c       ****     // Calculate boot up time and save to variable boot_time.
 130:modem.c       ****     boot_time = getTimeStamp() - boot_time;
 441              		.loc 1 130 0
 442 0070 FFF7FEFF 		bl	getTimeStamp
 443 0074 0246     		mov	r2, r0
 444 0076 3B68     		ldr	r3, [r7]
 445 0078 D31A     		subs	r3, r2, r3
 446 007a 3B60     		str	r3, [r7]
 131:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Modem boot time: %d",boot_time);
 447              		.loc 1 131 0
 448 007c 3A68     		ldr	r2, [r7]
 449 007e 1349     		ldr	r1, .L27+12
 450 0080 0020     		movs	r0, #0
 451 0082 FFF7FEFF 		bl	printNotif
 132:modem.c       ****    
 133:modem.c       ****     if(at_ready == 1){
 452              		.loc 1 133 0
 453 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 454 0088 012B     		cmp	r3, #1
 455 008a 0AD1     		bne	.L23
 134:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Modem ready for AT commands after %d attempt(s).",attempts);
 456              		.loc 1 134 0
 457 008c 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 458 008e 1A46     		mov	r2, r3
 459 0090 0F49     		ldr	r1, .L27+16
 460 0092 0020     		movs	r0, #0
 461 0094 FFF7FEFF 		bl	printNotif
 135:modem.c       ****         modem_state = MODEM_STATE_STARTUP;
 462              		.loc 1 135 0
 463 0098 0E4B     		ldr	r3, .L27+20
 464 009a 0122     		movs	r2, #1
 465 009c 1A70     		strb	r2, [r3]
 136:modem.c       ****     }else{
 137:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"No response from modem.");
 138:modem.c       ****         modem_state = MODEM_STATE_OFF;
 139:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 140:modem.c       ****         modem_power_down();
 141:modem.c       ****         return 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 12


 142:modem.c       ****     }
 143:modem.c       ****     return 1u;
 466              		.loc 1 143 0
 467 009e 0123     		movs	r3, #1
 468 00a0 09E0     		b	.L25
 469              	.L23:
 137:modem.c       ****         modem_state = MODEM_STATE_OFF;
 470              		.loc 1 137 0
 471 00a2 0D49     		ldr	r1, .L27+24
 472 00a4 0220     		movs	r0, #2
 473 00a6 FFF7FEFF 		bl	printNotif
 138:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 474              		.loc 1 138 0
 475 00aa 0A4B     		ldr	r3, .L27+20
 476 00ac 0022     		movs	r2, #0
 477 00ae 1A70     		strb	r2, [r3]
 140:modem.c       ****         return 0u;
 478              		.loc 1 140 0
 479 00b0 FFF7FEFF 		bl	modem_power_down
 141:modem.c       ****     }
 480              		.loc 1 141 0
 481 00b4 0023     		movs	r3, #0
 482              	.L25:
 144:modem.c       **** }
 483              		.loc 1 144 0
 484 00b6 1846     		mov	r0, r3
 485 00b8 0837     		adds	r7, r7, #8
 486              		.cfi_def_cfa_offset 8
 487 00ba BD46     		mov	sp, r7
 488              		.cfi_def_cfa_register 13
 489              		@ sp needed
 490 00bc 80BD     		pop	{r7, pc}
 491              	.L28:
 492 00be 00BF     		.align	2
 493              	.L27:
 494 00c0 00000000 		.word	isr_telit_rx
 495 00c4 00000000 		.word	.LC0
 496 00c8 10000000 		.word	.LC2
 497 00cc 18000000 		.word	.LC3
 498 00d0 2C000000 		.word	.LC4
 499 00d4 00000000 		.word	modem_state
 500 00d8 60000000 		.word	.LC5
 501              		.cfi_endproc
 502              	.LFE69:
 503              		.size	modem_power_up, .-modem_power_up
 504              		.section	.text.modem_soft_power_cycle,"ax",%progbits
 505              		.align	2
 506              		.global	modem_soft_power_cycle
 507              		.thumb
 508              		.thumb_func
 509              		.type	modem_soft_power_cycle, %function
 510              	modem_soft_power_cycle:
 511              	.LFB70:
 145:modem.c       **** 
 146:modem.c       **** // Puts modem in soft power cycle -- modem has power but isn't all the way on, so soft power cycle 
 147:modem.c       **** void modem_soft_power_cycle(){
 512              		.loc 1 147 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 13


 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 00AF     		add	r7, sp, #0
 521              		.cfi_def_cfa_register 7
 148:modem.c       ****     Pin_Telit_ONOFF_Write(1u); // Pulls Telit_ONOFF pin high
 522              		.loc 1 148 0
 523 0004 0120     		movs	r0, #1
 524 0006 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 149:modem.c       ****     CyDelay(2000u); // Give modem a sec to boot
 525              		.loc 1 149 0
 526 000a 4FF4FA60 		mov	r0, #2000
 527 000e FFF7FEFF 		bl	CyDelay
 150:modem.c       ****     Pin_Telit_ONOFF_Write(0u); // Pulls Telit_ONOFF pin low
 528              		.loc 1 150 0
 529 0012 0020     		movs	r0, #0
 530 0014 FFF7FEFF 		bl	Pin_Telit_ONOFF_Write
 151:modem.c       ****     
 152:modem.c       **** }
 531              		.loc 1 152 0
 532 0018 00BF     		nop
 533 001a 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE70:
 536              		.size	modem_soft_power_cycle, .-modem_soft_power_cycle
 537              		.section	.text.uart_string_reset,"ax",%progbits
 538              		.align	2
 539              		.global	uart_string_reset
 540              		.thumb
 541              		.thumb_func
 542              		.type	uart_string_reset, %function
 543              	uart_string_reset:
 544              	.LFB71:
 153:modem.c       **** 
 154:modem.c       **** // Clear and reset the uart_received_string variable and uart_string_index for the next transmissio
 155:modem.c       **** void uart_string_reset(){
 545              		.loc 1 155 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 00AF     		add	r7, sp, #0
 554              		.cfi_def_cfa_register 7
 156:modem.c       ****     uart_string_index=0;
 555              		.loc 1 156 0
 556 0004 064B     		ldr	r3, .L31
 557 0006 0022     		movs	r2, #0
 558 0008 1A80     		strh	r2, [r3]	@ movhi
 157:modem.c       ****     // memset(void *str, int c, size_t n) copies the character c (an unsigned char) to the first n 
 158:modem.c       ****     memset(uart_received_string,'\0',sizeof(uart_received_string));
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 14


 559              		.loc 1 158 0
 560 000a 4FF48062 		mov	r2, #1024
 561 000e 0021     		movs	r1, #0
 562 0010 0448     		ldr	r0, .L31+4
 563 0012 FFF7FEFF 		bl	memset
 159:modem.c       ****     // Clears the receiver memory buffer and hardware RX FIFO of all received data.
 160:modem.c       ****     UART_Telit_ClearRxBuffer();
 564              		.loc 1 160 0
 565 0016 FFF7FEFF 		bl	UART_Telit_ClearRxBuffer
 161:modem.c       **** }
 566              		.loc 1 161 0
 567 001a 00BF     		nop
 568 001c 80BD     		pop	{r7, pc}
 569              	.L32:
 570 001e 00BF     		.align	2
 571              	.L31:
 572 0020 00000000 		.word	uart_string_index
 573 0024 00000000 		.word	uart_received_string
 574              		.cfi_endproc
 575              	.LFE71:
 576              		.size	uart_string_reset, .-uart_string_reset
 577              		.section	.rodata
 578              		.align	2
 579              	.LC6:
 580 0078 4D6F6465 		.ascii	"Modem sent AT command without timeout: %s\015\012\000"
 580      6D207365 
 580      6E742041 
 580      5420636F 
 580      6D6D616E 
 581              		.align	2
 582              	.LC7:
 583 00a4 4D6F6465 		.ascii	"Modem Received expected AT Response on first Try:\012"
 583      6D205265 
 583      63656976 
 583      65642065 
 583      78706563 
 584 00d6 436F6D6D 		.ascii	"Command: %s\012Received: %s\015\012\000"
 584      616E643A 
 584      2025730A 
 584      52656365 
 584      69766564 
 585 00f1 000000   		.align	2
 586              	.LC8:
 587 00f4 4D6F6465 		.ascii	"Modem required %d tries to receive AT Response: %s\015"
 587      6D207265 
 587      71756972 
 587      65642025 
 587      64207472 
 588 0127 0A00     		.ascii	"\012\000"
 589 0129 000000   		.align	2
 590              	.LC9:
 591 012c 436F756C 		.ascii	"Could not write AT command: %s\012 Received: %s\012"
 591      64206E6F 
 591      74207772 
 591      69746520 
 591      41542063 
 592 0159 00       		.ascii	"\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 15


 593              		.section	.text.at_write_command,"ax",%progbits
 594              		.align	2
 595              		.global	at_write_command
 596              		.thumb
 597              		.thumb_func
 598              		.type	at_write_command, %function
 599              	at_write_command:
 600              	.LFB72:
 162:modem.c       **** 
 163:modem.c       **** // Modem controlled  via  the  serial  interface  using  the  standard  AT commands.
 164:modem.c       **** // AT is an ATTENTION command and is used as a prefix to other parameters in a string. 
 165:modem.c       **** // Sends commands to the modem
 166:modem.c       **** uint8_t at_write_command(char* commands, char* expected_response,uint32_t timeout){
 601              		.loc 1 166 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 40
 604              		@ frame_needed = 1, uses_anonymous_args = 0
 605 0000 80B5     		push	{r7, lr}
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 7, -8
 608              		.cfi_offset 14, -4
 609 0002 8AB0     		sub	sp, sp, #40
 610              		.cfi_def_cfa_offset 48
 611 0004 00AF     		add	r7, sp, #0
 612              		.cfi_def_cfa_register 7
 613 0006 F860     		str	r0, [r7, #12]
 614 0008 B960     		str	r1, [r7, #8]
 615 000a 7A60     		str	r2, [r7, #4]
 167:modem.c       **** 
 168:modem.c       ****     uint32 at_attempt = 0;
 616              		.loc 1 168 0
 617 000c 0023     		movs	r3, #0
 618 000e 7B62     		str	r3, [r7, #36]
 169:modem.c       ****     
 170:modem.c       ****     for(at_attempt = 0; at_attempt < 3; at_attempt++) {
 619              		.loc 1 170 0
 620 0010 0023     		movs	r3, #0
 621 0012 7B62     		str	r3, [r7, #36]
 622 0014 46E0     		b	.L34
 623              	.L42:
 624              	.LBB4:
 171:modem.c       ****         
 172:modem.c       ****         char* compare_location;
 173:modem.c       ****         uint32_t delay=10;
 625              		.loc 1 173 0
 626 0016 0A23     		movs	r3, #10
 627 0018 FB61     		str	r3, [r7, #28]
 174:modem.c       ****         uint32_t i, interval=timeout/delay;        
 628              		.loc 1 174 0
 629 001a 7A68     		ldr	r2, [r7, #4]
 630 001c FB69     		ldr	r3, [r7, #28]
 631 001e B2FBF3F3 		udiv	r3, r2, r3
 632 0022 BB61     		str	r3, [r7, #24]
 175:modem.c       ****         
 176:modem.c       ****         // Clear and reset the uart_received_string variable and uart_string_index for the next tra
 177:modem.c       ****         uart_string_reset();
 633              		.loc 1 177 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 16


 634 0024 FFF7FEFF 		bl	uart_string_reset
 178:modem.c       ****         
 179:modem.c       ****         // Sends a NULL terminated string to the TX buffer for transmission.
 180:modem.c       ****         UART_Telit_PutString(commands);
 635              		.loc 1 180 0
 636 0028 F868     		ldr	r0, [r7, #12]
 637 002a FFF7FEFF 		bl	UART_Telit_PutString
 181:modem.c       ****         
 182:modem.c       ****         
 183:modem.c       ****         // If no timeout, no need to wait for response
 184:modem.c       ****         if(timeout == NO_AT_TIMEOUT){
 638              		.loc 1 184 0
 639 002e 7B68     		ldr	r3, [r7, #4]
 640 0030 002B     		cmp	r3, #0
 641 0032 06D1     		bne	.L35
 185:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem sent AT command without timeout: %s\r\n", commands);
 642              		.loc 1 185 0
 643 0034 FA68     		ldr	r2, [r7, #12]
 644 0036 1F49     		ldr	r1, .L43
 645 0038 0020     		movs	r0, #0
 646 003a FFF7FEFF 		bl	printNotif
 186:modem.c       ****             return 1u;
 647              		.loc 1 186 0
 648 003e 0123     		movs	r3, #1
 649 0040 34E0     		b	.L36
 650              	.L35:
 187:modem.c       ****         }
 188:modem.c       ****       
 189:modem.c       ****      
 190:modem.c       ****         for(i=0;i<interval;i++){ 
 651              		.loc 1 190 0
 652 0042 0023     		movs	r3, #0
 653 0044 3B62     		str	r3, [r7, #32]
 654 0046 20E0     		b	.L37
 655              	.L41:
 191:modem.c       ****             CyDelay((uint32) delay);
 656              		.loc 1 191 0
 657 0048 F869     		ldr	r0, [r7, #28]
 658 004a FFF7FEFF 		bl	CyDelay
 192:modem.c       ****             // strstr(const char *haystack, const char *needle) function finds the first occurrence
 193:modem.c       ****             // Returns a pointer to the first occurrence in haystack of any of the entire sequence 
 194:modem.c       ****             compare_location=strstr(uart_received_string,expected_response);        
 659              		.loc 1 194 0
 660 004e B968     		ldr	r1, [r7, #8]
 661 0050 1948     		ldr	r0, .L43+4
 662 0052 FFF7FEFF 		bl	strstr
 663 0056 7861     		str	r0, [r7, #20]
 195:modem.c       ****             if(compare_location!=NULL) {
 664              		.loc 1 195 0
 665 0058 7B69     		ldr	r3, [r7, #20]
 666 005a 002B     		cmp	r3, #0
 667 005c 12D0     		beq	.L38
 196:modem.c       ****                 if (at_attempt == 0){
 668              		.loc 1 196 0
 669 005e 7B6A     		ldr	r3, [r7, #36]
 670 0060 002B     		cmp	r3, #0
 671 0062 06D1     		bne	.L39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 17


 197:modem.c       ****                     // we add \n for new line to make it easier to decipher
 198:modem.c       ****                     printNotif(NOTIF_TYPE_EVENT,"Modem Received expected AT Response on first Try:\
 672              		.loc 1 198 0
 673 0064 144B     		ldr	r3, .L43+4
 674 0066 FA68     		ldr	r2, [r7, #12]
 675 0068 1449     		ldr	r1, .L43+8
 676 006a 0020     		movs	r0, #0
 677 006c FFF7FEFF 		bl	printNotif
 678 0070 06E0     		b	.L40
 679              	.L39:
 199:modem.c       ****                 }else{
 200:modem.c       ****                     printNotif(NOTIF_TYPE_WARNING,"Modem required %d tries to receive AT Response: 
 680              		.loc 1 200 0
 681 0072 7B6A     		ldr	r3, [r7, #36]
 682 0074 5A1C     		adds	r2, r3, #1
 683 0076 104B     		ldr	r3, .L43+4
 684 0078 1149     		ldr	r1, .L43+12
 685 007a 0120     		movs	r0, #1
 686 007c FFF7FEFF 		bl	printNotif
 687              	.L40:
 201:modem.c       ****                  
 202:modem.c       ****                 }
 203:modem.c       ****                 return(1);
 688              		.loc 1 203 0
 689 0080 0123     		movs	r3, #1
 690 0082 13E0     		b	.L36
 691              	.L38:
 190:modem.c       ****             CyDelay((uint32) delay);
 692              		.loc 1 190 0 discriminator 2
 693 0084 3B6A     		ldr	r3, [r7, #32]
 694 0086 0133     		adds	r3, r3, #1
 695 0088 3B62     		str	r3, [r7, #32]
 696              	.L37:
 190:modem.c       ****             CyDelay((uint32) delay);
 697              		.loc 1 190 0 is_stmt 0 discriminator 1
 698 008a 3A6A     		ldr	r2, [r7, #32]
 699 008c BB69     		ldr	r3, [r7, #24]
 700 008e 9A42     		cmp	r2, r3
 701 0090 DAD3     		bcc	.L41
 204:modem.c       ****             }
 205:modem.c       ****             
 206:modem.c       ****         }  
 207:modem.c       ****         
 208:modem.c       ****         // Something went wrong, restart UART
 209:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not write AT command: %s\n Received: %s\n", commands,uar
 702              		.loc 1 209 0 is_stmt 1 discriminator 2
 703 0092 094B     		ldr	r3, .L43+4
 704 0094 FA68     		ldr	r2, [r7, #12]
 705 0096 0B49     		ldr	r1, .L43+16
 706 0098 0220     		movs	r0, #2
 707 009a FFF7FEFF 		bl	printNotif
 708              	.LBE4:
 170:modem.c       ****         
 709              		.loc 1 170 0 discriminator 2
 710 009e 7B6A     		ldr	r3, [r7, #36]
 711 00a0 0133     		adds	r3, r3, #1
 712 00a2 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 18


 713              	.L34:
 170:modem.c       ****         
 714              		.loc 1 170 0 is_stmt 0 discriminator 1
 715 00a4 7B6A     		ldr	r3, [r7, #36]
 716 00a6 022B     		cmp	r3, #2
 717 00a8 B5D9     		bls	.L42
 210:modem.c       ****       
 211:modem.c       ****     }
 212:modem.c       ****    // printNotif(NOTIF_TYPE_ERROR,"Modem AT response timeout: %s\r\n", commands);
 213:modem.c       ****           
 214:modem.c       ****     return(0);    
 718              		.loc 1 214 0 is_stmt 1
 719 00aa 0023     		movs	r3, #0
 720              	.L36:
 215:modem.c       **** }
 721              		.loc 1 215 0
 722 00ac 1846     		mov	r0, r3
 723 00ae 2837     		adds	r7, r7, #40
 724              		.cfi_def_cfa_offset 8
 725 00b0 BD46     		mov	sp, r7
 726              		.cfi_def_cfa_register 13
 727              		@ sp needed
 728 00b2 80BD     		pop	{r7, pc}
 729              	.L44:
 730              		.align	2
 731              	.L43:
 732 00b4 78000000 		.word	.LC6
 733 00b8 00000000 		.word	uart_received_string
 734 00bc A4000000 		.word	.LC7
 735 00c0 F4000000 		.word	.LC8
 736 00c4 2C010000 		.word	.LC9
 737              		.cfi_endproc
 738              	.LFE72:
 739              		.size	at_write_command, .-at_write_command
 740              		.section	.rodata
 741 015a 0000     		.align	2
 742              	.LC10:
 743 015c 54455354 		.ascii	"TEST_MODEM\000"
 743      5F4D4F44 
 743      454D00
 744 0167 00       		.align	2
 745              	.LC11:
 746 0168 4E6F2072 		.ascii	"No reponse from modem.\000"
 746      65706F6E 
 746      73652066 
 746      726F6D20 
 746      6D6F6465 
 747 017f 00       		.align	2
 748              	.LC12:
 749 0180 4D6F6465 		.ascii	"Modem connected to network.\000"
 749      6D20636F 
 749      6E6E6563 
 749      74656420 
 749      746F206E 
 750              		.section	.text.modem_test,"ax",%progbits
 751              		.align	2
 752              		.global	modem_test
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 19


 753              		.thumb
 754              		.thumb_func
 755              		.type	modem_test, %function
 756              	modem_test:
 757              	.LFB73:
 216:modem.c       **** 
 217:modem.c       **** // Test modem -- needs fleshed out
 218:modem.c       **** test_t modem_test(){
 758              		.loc 1 218 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 408
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 B0B5     		push	{r4, r5, r7, lr}
 763              		.cfi_def_cfa_offset 16
 764              		.cfi_offset 4, -16
 765              		.cfi_offset 5, -12
 766              		.cfi_offset 7, -8
 767              		.cfi_offset 14, -4
 768 0002 E6B0     		sub	sp, sp, #408
 769              		.cfi_def_cfa_offset 424
 770 0004 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 772 0006 3B1D     		adds	r3, r7, #4
 773 0008 1860     		str	r0, [r3]
 219:modem.c       ****     
 220:modem.c       ****     test_t test; // test_t is a new data type we defined in test.h. We then use that data type to d
 221:modem.c       ****     test.status = 0;
 774              		.loc 1 221 0
 775 000a 07F10C03 		add	r3, r7, #12
 776 000e 0022     		movs	r2, #0
 777 0010 83F88020 		strb	r2, [r3, #128]
 222:modem.c       ****     // Print test name and test reason
 223:modem.c       ****     snprintf(test.test_name,sizeof(test.test_name),"TEST_MODEM");
 778              		.loc 1 223 0
 779 0014 07F10C03 		add	r3, r7, #12
 780 0018 364A     		ldr	r2, .L53
 781 001a 07CA     		ldmia	r2, {r0, r1, r2}
 782 001c 03C3     		stmia	r3!, {r0, r1}
 783 001e 1A80     		strh	r2, [r3]	@ movhi
 784 0020 0233     		adds	r3, r3, #2
 785 0022 120C     		lsrs	r2, r2, #16
 786 0024 1A70     		strb	r2, [r3]
 224:modem.c       ****     snprintf(test.reason,sizeof(test.reason),"No reponse from modem.");
 787              		.loc 1 224 0
 788 0026 07F10C03 		add	r3, r7, #12
 789 002a 8133     		adds	r3, r3, #129
 790 002c 324A     		ldr	r2, .L53+4
 791 002e 1C46     		mov	r4, r3
 792 0030 1546     		mov	r5, r2
 793 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 794 0034 2060     		str	r0, [r4]	@ unaligned
 795 0036 6160     		str	r1, [r4, #4]	@ unaligned
 796 0038 A260     		str	r2, [r4, #8]	@ unaligned
 797 003a E360     		str	r3, [r4, #12]	@ unaligned
 798 003c 2868     		ldr	r0, [r5]	@ unaligned
 799 003e 2061     		str	r0, [r4, #16]	@ unaligned
 800 0040 AB88     		ldrh	r3, [r5, #4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 20


 801 0042 AA79     		ldrb	r2, [r5, #6]
 802 0044 A382     		strh	r3, [r4, #20]	@ unaligned
 803 0046 1346     		mov	r3, r2
 804 0048 A375     		strb	r3, [r4, #22]
 805              	.LBB5:
 225:modem.c       ****    
 226:modem.c       ****     //try the modem 60*1000ms (60 secs)
 227:modem.c       ****     for(int i = 0; i< 60; i++){
 806              		.loc 1 227 0
 807 004a 0023     		movs	r3, #0
 808 004c C7F89431 		str	r3, [r7, #404]
 809 0050 3AE0     		b	.L46
 810              	.L51:
 228:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 229:modem.c       ****         modem_process_tasks();
 811              		.loc 1 229 0
 812 0052 FFF7FEFF 		bl	modem_process_tasks
 230:modem.c       ****          
 231:modem.c       ****         if(modem_get_state() == MODEM_STATE_OFF){
 813              		.loc 1 231 0
 814 0056 FFF7FEFF 		bl	modem_get_state
 815 005a 0346     		mov	r3, r0
 816 005c 002B     		cmp	r3, #0
 817 005e 02D1     		bne	.L47
 232:modem.c       ****             // This puts all the modem points into a state that won't leak power
 233:modem.c       ****             modem_power_up();
 818              		.loc 1 233 0
 819 0060 FFF7FEFF 		bl	modem_power_up
 820 0064 27E0     		b	.L48
 821              	.L47:
 234:modem.c       ****             // Should put this on a max_try counter, so we don't just keep trying to connect over a
 235:modem.c       ****             
 236:modem.c       ****         }else if(modem_get_state() == MODEM_STATE_READY){
 822              		.loc 1 236 0
 823 0066 FFF7FEFF 		bl	modem_get_state
 824 006a 0346     		mov	r3, r0
 825 006c 042B     		cmp	r3, #4
 826 006e 22D1     		bne	.L48
 827              	.LBB6:
 237:modem.c       ****         
 238:modem.c       ****         
 239:modem.c       ****         // Get time, and if it looks good, set the RTC with it
 240:modem.c       ****         long network_time = modem_get_network_time();
 828              		.loc 1 240 0
 829 0070 FFF7FEFF 		bl	modem_get_network_time
 830 0074 C7F89001 		str	r0, [r7, #400]
 241:modem.c       ****         if(network_time != 0){
 831              		.loc 1 241 0
 832 0078 D7F89031 		ldr	r3, [r7, #400]
 833 007c 002B     		cmp	r3, #0
 834 007e 03D0     		beq	.L49
 242:modem.c       ****             setTime(network_time); // Set the system time 
 835              		.loc 1 242 0
 836 0080 D7F89001 		ldr	r0, [r7, #400]
 837 0084 FFF7FEFF 		bl	setTime
 838              	.L49:
 243:modem.c       ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 21


 244:modem.c       ****             
 245:modem.c       ****         snprintf(test.reason,sizeof(test.reason),"Modem connected to network.");
 839              		.loc 1 245 0
 840 0088 07F10C03 		add	r3, r7, #12
 841 008c 8133     		adds	r3, r3, #129
 842 008e 1B4A     		ldr	r2, .L53+8
 843 0090 1D46     		mov	r5, r3
 844 0092 1446     		mov	r4, r2
 845 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 846 0096 2860     		str	r0, [r5]	@ unaligned
 847 0098 6960     		str	r1, [r5, #4]	@ unaligned
 848 009a AA60     		str	r2, [r5, #8]	@ unaligned
 849 009c EB60     		str	r3, [r5, #12]	@ unaligned
 850 009e 07CC     		ldmia	r4!, {r0, r1, r2}
 851 00a0 2861     		str	r0, [r5, #16]	@ unaligned
 852 00a2 6961     		str	r1, [r5, #20]	@ unaligned
 853 00a4 AA61     		str	r2, [r5, #24]	@ unaligned
 246:modem.c       ****         test.status = 1;
 854              		.loc 1 246 0
 855 00a6 07F10C03 		add	r3, r7, #12
 856 00aa 0122     		movs	r2, #1
 857 00ac 83F88020 		strb	r2, [r3, #128]
 247:modem.c       ****         // Power down the modem -- completely "kill" modem to conserve power.
 248:modem.c       ****         modem_power_down();
 858              		.loc 1 248 0
 859 00b0 FFF7FEFF 		bl	modem_power_down
 249:modem.c       ****         break;
 860              		.loc 1 249 0
 861 00b4 0CE0     		b	.L50
 862              	.L48:
 863              	.LBE6:
 250:modem.c       ****         
 251:modem.c       ****       }
 252:modem.c       ****         CyDelay(1000u);
 864              		.loc 1 252 0 discriminator 2
 865 00b6 4FF47A70 		mov	r0, #1000
 866 00ba FFF7FEFF 		bl	CyDelay
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 867              		.loc 1 227 0 discriminator 2
 868 00be D7F89431 		ldr	r3, [r7, #404]
 869 00c2 0133     		adds	r3, r3, #1
 870 00c4 C7F89431 		str	r3, [r7, #404]
 871              	.L46:
 227:modem.c       ****         // Function to startup the modem, connect to the network, and then hand it off to sleep.
 872              		.loc 1 227 0 is_stmt 0 discriminator 1
 873 00c8 D7F89431 		ldr	r3, [r7, #404]
 874 00cc 3B2B     		cmp	r3, #59
 875 00ce C0DD     		ble	.L51
 876              	.L50:
 877              	.LBE5:
 253:modem.c       ****         
 254:modem.c       ****     }
 255:modem.c       ****     
 256:modem.c       ****     return test;
 878              		.loc 1 256 0 is_stmt 1
 879 00d0 3B1D     		adds	r3, r7, #4
 880 00d2 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 22


 881 00d4 07F10C03 		add	r3, r7, #12
 882 00d8 1046     		mov	r0, r2
 883 00da 1946     		mov	r1, r3
 884 00dc 40F28113 		movw	r3, #385
 885 00e0 1A46     		mov	r2, r3
 886 00e2 FFF7FEFF 		bl	memcpy
 257:modem.c       **** }
 887              		.loc 1 257 0
 888 00e6 3B1D     		adds	r3, r7, #4
 889 00e8 1868     		ldr	r0, [r3]
 890 00ea 07F5CC77 		add	r7, r7, #408
 891              		.cfi_def_cfa_offset 16
 892 00ee BD46     		mov	sp, r7
 893              		.cfi_def_cfa_register 13
 894              		@ sp needed
 895 00f0 B0BD     		pop	{r4, r5, r7, pc}
 896              	.L54:
 897 00f2 00BF     		.align	2
 898              	.L53:
 899 00f4 5C010000 		.word	.LC10
 900 00f8 68010000 		.word	.LC11
 901 00fc 80010000 		.word	.LC12
 902              		.cfi_endproc
 903              	.LFE73:
 904              		.size	modem_test, .-modem_test
 905              		.section	.text.extract_string,"ax",%progbits
 906              		.align	2
 907              		.global	extract_string
 908              		.thumb
 909              		.thumb_func
 910              		.type	extract_string, %function
 911              	extract_string:
 912              	.LFB74:
 258:modem.c       **** 
 259:modem.c       **** // Extract string from the UART
 260:modem.c       **** uint8 extract_string(char* from, const char* beginMarker, const char* endMarker,  char* target){
 913              		.loc 1 260 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 24
 916              		@ frame_needed = 1, uses_anonymous_args = 0
 917 0000 80B5     		push	{r7, lr}
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 7, -8
 920              		.cfi_offset 14, -4
 921 0002 86B0     		sub	sp, sp, #24
 922              		.cfi_def_cfa_offset 32
 923 0004 00AF     		add	r7, sp, #0
 924              		.cfi_def_cfa_register 7
 925 0006 F860     		str	r0, [r7, #12]
 926 0008 B960     		str	r1, [r7, #8]
 927 000a 7A60     		str	r2, [r7, #4]
 928 000c 3B60     		str	r3, [r7]
 261:modem.c       ****     
 262:modem.c       ****         char *a, *b;
 263:modem.c       ****   
 264:modem.c       ****         // Expect the UART to contain something like "+CESQ: ##,##,##,##,##,##\r\n\r\nOK"
 265:modem.c       ****         // - Search for "+CESQ: ".  Place the starting pointer, a, at the resulting index
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 23


 266:modem.c       ****         a = strstr(from,beginMarker);
 929              		.loc 1 266 0
 930 000e B968     		ldr	r1, [r7, #8]
 931 0010 F868     		ldr	r0, [r7, #12]
 932 0012 FFF7FEFF 		bl	strstr
 933 0016 7861     		str	r0, [r7, #20]
 267:modem.c       ****         if (a == NULL) {
 934              		.loc 1 267 0
 935 0018 7B69     		ldr	r3, [r7, #20]
 936 001a 002B     		cmp	r3, #0
 937 001c 01D1     		bne	.L56
 268:modem.c       ****             //puts("+CESQ: not found in uart_received_string");
 269:modem.c       ****             a = from;
 938              		.loc 1 269 0
 939 001e FB68     		ldr	r3, [r7, #12]
 940 0020 7B61     		str	r3, [r7, #20]
 941              	.L56:
 270:modem.c       ****         }
 271:modem.c       ****         // The strlen() function calculates the length of a given string.
 272:modem.c       ****         a += strlen(beginMarker);
 942              		.loc 1 272 0
 943 0022 B868     		ldr	r0, [r7, #8]
 944 0024 FFF7FEFF 		bl	strlen
 945 0028 0246     		mov	r2, r0
 946 002a 7B69     		ldr	r3, [r7, #20]
 947 002c 1344     		add	r3, r3, r2
 948 002e 7B61     		str	r3, [r7, #20]
 273:modem.c       ****         
 274:modem.c       ****         // - Find the end marking and offset by 1
 275:modem.c       ****         // strstr(const char *haystack, const char *needle) function finds the first occurrence of 
 276:modem.c       ****         // Returns a pointer to the first occurrence in haystack of any of the entire sequence of c
 277:modem.c       ****         b = strstr(a,endMarker);
 949              		.loc 1 277 0
 950 0030 7968     		ldr	r1, [r7, #4]
 951 0032 7869     		ldr	r0, [r7, #20]
 952 0034 FFF7FEFF 		bl	strstr
 953 0038 3861     		str	r0, [r7, #16]
 278:modem.c       ****         if (b == NULL) {
 954              		.loc 1 278 0
 955 003a 3B69     		ldr	r3, [r7, #16]
 956 003c 002B     		cmp	r3, #0
 957 003e 06D1     		bne	.L57
 279:modem.c       ****             // Puts("Comma not found in uart_received_string");
 280:modem.c       ****             b=from+strlen(from);
 958              		.loc 1 280 0
 959 0040 F868     		ldr	r0, [r7, #12]
 960 0042 FFF7FEFF 		bl	strlen
 961 0046 0246     		mov	r2, r0
 962 0048 FB68     		ldr	r3, [r7, #12]
 963 004a 1344     		add	r3, r3, r2
 964 004c 3B61     		str	r3, [r7, #16]
 965              	.L57:
 281:modem.c       ****         }        
 282:modem.c       ****         
 283:modem.c       ****         // Parse the strings and store the respective rssi and fer values
 284:modem.c       ****         strncpy(target,a,b-a);
 966              		.loc 1 284 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 24


 967 004e 3A69     		ldr	r2, [r7, #16]
 968 0050 7B69     		ldr	r3, [r7, #20]
 969 0052 D31A     		subs	r3, r2, r3
 970 0054 1A46     		mov	r2, r3
 971 0056 7969     		ldr	r1, [r7, #20]
 972 0058 3868     		ldr	r0, [r7]
 973 005a FFF7FEFF 		bl	strncpy
 285:modem.c       ****         target[b-a] = '\0';
 974              		.loc 1 285 0
 975 005e 3A69     		ldr	r2, [r7, #16]
 976 0060 7B69     		ldr	r3, [r7, #20]
 977 0062 D31A     		subs	r3, r2, r3
 978 0064 1A46     		mov	r2, r3
 979 0066 3B68     		ldr	r3, [r7]
 980 0068 1344     		add	r3, r3, r2
 981 006a 0022     		movs	r2, #0
 982 006c 1A70     		strb	r2, [r3]
 286:modem.c       ****         return 1u;
 983              		.loc 1 286 0
 984 006e 0123     		movs	r3, #1
 287:modem.c       ****         
 288:modem.c       **** }
 985              		.loc 1 288 0
 986 0070 1846     		mov	r0, r3
 987 0072 1837     		adds	r7, r7, #24
 988              		.cfi_def_cfa_offset 8
 989 0074 BD46     		mov	sp, r7
 990              		.cfi_def_cfa_register 13
 991              		@ sp needed
 992 0076 80BD     		pop	{r7, pc}
 993              		.cfi_endproc
 994              	.LFE74:
 995              		.size	extract_string, .-extract_string
 996              		.section	.rodata
 997              		.align	2
 998              	.LC13:
 999 019c 54696D65 		.ascii	"Time to connect to network: %d seconds\000"
 999      20746F20 
 999      636F6E6E 
 999      65637420 
 999      746F206E 
 1000 01c3 00       		.align	2
 1001              	.LC14:
 1002 01c4 4D6F6465 		.ascii	"Modem timed out on network connect\000"
 1002      6D207469 
 1002      6D656420 
 1002      6F757420 
 1002      6F6E206E 
 1003 01e7 00       		.align	2
 1004              	.LC15:
 1005 01e8 41637175 		.ascii	"Acquired IP address: %d seconds\000"
 1005      69726564 
 1005      20495020 
 1005      61646472 
 1005      6573733A 
 1006              		.align	2
 1007              	.LC16:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 25


 1008 0208 4D6F6465 		.ascii	"Modem timed out on IP address acquire.\000"
 1008      6D207469 
 1008      6D656420 
 1008      6F757420 
 1008      6F6E2049 
 1009              		.section	.text.modem_process_tasks,"ax",%progbits
 1010              		.align	2
 1011              		.global	modem_process_tasks
 1012              		.thumb
 1013              		.thumb_func
 1014              		.type	modem_process_tasks, %function
 1015              	modem_process_tasks:
 1016              	.LFB75:
 289:modem.c       **** 
 290:modem.c       **** // Function to startup the modem, connect to the network, and then hand it off to sleep
 291:modem.c       **** uint8 modem_process_tasks(){
 1017              		.loc 1 291 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021 0000 80B5     		push	{r7, lr}
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 0002 82B0     		sub	sp, sp, #8
 1026              		.cfi_def_cfa_offset 16
 1027 0004 00AF     		add	r7, sp, #0
 1028              		.cfi_def_cfa_register 7
 292:modem.c       ****     // If modem state is "startup" then get the modem start time, configure modem settings, and cha
 293:modem.c       ****     if(modem_state == MODEM_STATE_STARTUP){
 1029              		.loc 1 293 0
 1030 0006 464B     		ldr	r3, .L73
 1031 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1032 000a 012B     		cmp	r3, #1
 1033 000c 0BD1     		bne	.L60
 294:modem.c       ****         
 295:modem.c       ****         modem_start_time_stamp = getTimeStamp(); // Get timestamp for modem start time
 1034              		.loc 1 295 0
 1035 000e FFF7FEFF 		bl	getTimeStamp
 1036 0012 0246     		mov	r2, r0
 1037 0014 434B     		ldr	r3, .L73+4
 1038 0016 1A60     		str	r2, [r3]
 296:modem.c       ****         modem_configure_settings(); // Configure modem settings
 1039              		.loc 1 296 0
 1040 0018 FFF7FEFF 		bl	modem_configure_settings
 297:modem.c       ****         modem_state = MODEM_STATE_WAITING_FOR_NETWORK; // Change modem state 
 1041              		.loc 1 297 0
 1042 001c 404B     		ldr	r3, .L73
 1043 001e 0222     		movs	r2, #2
 1044 0020 1A70     		strb	r2, [r3]
 298:modem.c       ****         return 1u; // Keep going, don't hand off to sleep yet
 1045              		.loc 1 298 0
 1046 0022 0123     		movs	r3, #1
 1047 0024 77E0     		b	.L61
 1048              	.L60:
 299:modem.c       ****         
 300:modem.c       ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 26


 301:modem.c       ****     // Else if modem state is "waiting for network" 
 302:modem.c       ****     else if(modem_state == MODEM_STATE_WAITING_FOR_NETWORK){
 1049              		.loc 1 302 0
 1050 0026 3E4B     		ldr	r3, .L73
 1051 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1052 002a 022B     		cmp	r3, #2
 1053 002c 44D1     		bne	.L62
 1054              	.LBB7:
 303:modem.c       ****         
 304:modem.c       ****         // Check if modem has a good cell signal each second for up to 30 seconds
 305:modem.c       ****         for(uint8 i=0;i<30;i++){
 1055              		.loc 1 305 0
 1056 002e 0023     		movs	r3, #0
 1057 0030 FB71     		strb	r3, [r7, #7]
 1058 0032 10E0     		b	.L63
 1059              	.L66:
 306:modem.c       ****             // Get cell network stats
 307:modem.c       ****             get_cell_network_stats();
 1060              		.loc 1 307 0
 1061 0034 FFF7FEFF 		bl	get_cell_network_stats
 308:modem.c       ****             // If cell signal (rsrp) is strong enough, break and connect to the network
 309:modem.c       ****             // Otherwise, keep checking rsrp
 310:modem.c       ****             if(modem_stats.rsrp > 26 && modem_stats.rsrp != 255){
 1062              		.loc 1 310 0
 1063 0038 3B4B     		ldr	r3, .L73+8
 1064 003a 5B69     		ldr	r3, [r3, #20]
 1065 003c 1A2B     		cmp	r3, #26
 1066 003e 03DD     		ble	.L64
 1067              		.loc 1 310 0 is_stmt 0 discriminator 1
 1068 0040 394B     		ldr	r3, .L73+8
 1069 0042 5B69     		ldr	r3, [r3, #20]
 1070 0044 FF2B     		cmp	r3, #255
 1071 0046 0AD1     		bne	.L72
 1072              	.L64:
 311:modem.c       ****                 break;
 312:modem.c       ****             }
 313:modem.c       ****             // Delay for 1 second
 314:modem.c       ****             CyDelay(1000u);
 1073              		.loc 1 314 0 is_stmt 1 discriminator 2
 1074 0048 4FF47A70 		mov	r0, #1000
 1075 004c FFF7FEFF 		bl	CyDelay
 305:modem.c       ****             // Get cell network stats
 1076              		.loc 1 305 0 discriminator 2
 1077 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1078 0052 0133     		adds	r3, r3, #1
 1079 0054 FB71     		strb	r3, [r7, #7]
 1080              	.L63:
 305:modem.c       ****             // Get cell network stats
 1081              		.loc 1 305 0 is_stmt 0 discriminator 1
 1082 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1083 0058 1D2B     		cmp	r3, #29
 1084 005a EBD9     		bls	.L66
 1085 005c 00E0     		b	.L65
 1086              	.L72:
 311:modem.c       ****                 break;
 1087              		.loc 1 311 0 is_stmt 1
 1088 005e 00BF     		nop
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 27


 1089              	.L65:
 1090              	.LBE7:
 315:modem.c       ****         }
 316:modem.c       ****         
 317:modem.c       ****         // If modem connected to the cell network, save/print the time to connect to the network
 318:modem.c       ****         if(is_connected_to_cell_network()){
 1091              		.loc 1 318 0
 1092 0060 FFF7FEFF 		bl	is_connected_to_cell_network
 1093 0064 0346     		mov	r3, r0
 1094 0066 002B     		cmp	r3, #0
 1095 0068 13D0     		beq	.L67
 319:modem.c       ****       
 320:modem.c       ****              modem_stats.time_to_network_connect = (int)(getTimeStamp() - (int32)modem_start_time_s
 1096              		.loc 1 320 0
 1097 006a FFF7FEFF 		bl	getTimeStamp
 1098 006e 0246     		mov	r2, r0
 1099 0070 2C4B     		ldr	r3, .L73+4
 1100 0072 1B68     		ldr	r3, [r3]
 1101 0074 D31A     		subs	r3, r2, r3
 1102 0076 2C4A     		ldr	r2, .L73+8
 1103 0078 9361     		str	r3, [r2, #24]
 321:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Time to connect to network: %d seconds",
 1104              		.loc 1 321 0
 1105 007a 2B4B     		ldr	r3, .L73+8
 1106 007c 9B69     		ldr	r3, [r3, #24]
 1107 007e 1A46     		mov	r2, r3
 1108 0080 2A49     		ldr	r1, .L73+12
 1109 0082 0020     		movs	r0, #0
 1110 0084 FFF7FEFF 		bl	printNotif
 322:modem.c       ****                                             modem_stats.time_to_network_connect);
 323:modem.c       ****             set_up_internet_connection(); // Setup the internet connection
 1111              		.loc 1 323 0
 1112 0088 FFF7FEFF 		bl	set_up_internet_connection
 324:modem.c       ****             modem_state = MODEM_STATE_WAITING_FOR_IP; // Change modem state 
 1113              		.loc 1 324 0
 1114 008c 244B     		ldr	r3, .L73
 1115 008e 0322     		movs	r2, #3
 1116 0090 1A70     		strb	r2, [r3]
 1117              	.L67:
 325:modem.c       ****         }
 326:modem.c       ****         
 327:modem.c       ****         //power off if we time out should only take ~30 secs to connect to network
 328:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_NETWORK_CONNECT){
 1118              		.loc 1 328 0
 1119 0092 FFF7FEFF 		bl	getTimeStamp
 1120 0096 0246     		mov	r2, r0
 1121 0098 224B     		ldr	r3, .L73+4
 1122 009a 1B68     		ldr	r3, [r3]
 1123 009c D31A     		subs	r3, r2, r3
 1124 009e B42B     		cmp	r3, #180
 1125 00a0 08DD     		ble	.L68
 329:modem.c       ****             modem_state = MODEM_STATE_OFF; // Change modem state
 1126              		.loc 1 329 0
 1127 00a2 1F4B     		ldr	r3, .L73
 1128 00a4 0022     		movs	r2, #0
 1129 00a6 1A70     		strb	r2, [r3]
 330:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 28


 1130              		.loc 1 330 0
 1131 00a8 FFF7FEFF 		bl	modem_power_down
 331:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on network connect");
 1132              		.loc 1 331 0
 1133 00ac 2049     		ldr	r1, .L73+16
 1134 00ae 0220     		movs	r0, #2
 1135 00b0 FFF7FEFF 		bl	printNotif
 1136              	.L68:
 332:modem.c       ****             
 333:modem.c       ****         }
 334:modem.c       ****         return 0u;//ok to hand off to sleep
 1137              		.loc 1 334 0
 1138 00b4 0023     		movs	r3, #0
 1139 00b6 2EE0     		b	.L61
 1140              	.L62:
 335:modem.c       ****         
 336:modem.c       ****     // Else if modem state is "waiting for IP"
 337:modem.c       ****     }else if(modem_state == MODEM_STATE_WAITING_FOR_IP){
 1141              		.loc 1 337 0
 1142 00b8 194B     		ldr	r3, .L73
 1143 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1144 00bc 032B     		cmp	r3, #3
 1145 00be 29D1     		bne	.L69
 338:modem.c       ****         // If the modem is connected to the internet, change modem state to "ready", save/print tim
 339:modem.c       ****         if(is_connected_to_internet()){
 1146              		.loc 1 339 0
 1147 00c0 FFF7FEFF 		bl	is_connected_to_internet
 1148 00c4 0346     		mov	r3, r0
 1149 00c6 002B     		cmp	r3, #0
 1150 00c8 11D0     		beq	.L70
 340:modem.c       ****             modem_state = MODEM_STATE_READY; // Change modem state
 1151              		.loc 1 340 0
 1152 00ca 154B     		ldr	r3, .L73
 1153 00cc 0422     		movs	r2, #4
 1154 00ce 1A70     		strb	r2, [r3]
 341:modem.c       ****             // Save/print time to acquire IP address
 342:modem.c       ****             modem_stats.time_to_acquire_ip = (int)(getTimeStamp() - (int32)modem_start_time_stamp);
 1155              		.loc 1 342 0
 1156 00d0 FFF7FEFF 		bl	getTimeStamp
 1157 00d4 0246     		mov	r2, r0
 1158 00d6 134B     		ldr	r3, .L73+4
 1159 00d8 1B68     		ldr	r3, [r3]
 1160 00da D31A     		subs	r3, r2, r3
 1161 00dc 124A     		ldr	r2, .L73+8
 1162 00de D361     		str	r3, [r2, #28]
 343:modem.c       ****              printNotif(NOTIF_TYPE_EVENT,"Acquired IP address: %d seconds",
 1163              		.loc 1 343 0
 1164 00e0 114B     		ldr	r3, .L73+8
 1165 00e2 DB69     		ldr	r3, [r3, #28]
 1166 00e4 1A46     		mov	r2, r3
 1167 00e6 1349     		ldr	r1, .L73+20
 1168 00e8 0020     		movs	r0, #0
 1169 00ea FFF7FEFF 		bl	printNotif
 1170              	.L70:
 344:modem.c       ****                                             modem_stats.time_to_acquire_ip);
 345:modem.c       ****         }
 346:modem.c       ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 29


 347:modem.c       ****         // Power off if we times out should only take ~30 secs to connect to network
 348:modem.c       ****         if((int)(getTimeStamp()-(int32)modem_start_time_stamp) > TIMEOUT_IP_ACQUIRE){
 1171              		.loc 1 348 0
 1172 00ee FFF7FEFF 		bl	getTimeStamp
 1173 00f2 0246     		mov	r2, r0
 1174 00f4 0B4B     		ldr	r3, .L73+4
 1175 00f6 1B68     		ldr	r3, [r3]
 1176 00f8 D31A     		subs	r3, r2, r3
 1177 00fa E62B     		cmp	r3, #230
 1178 00fc 08DD     		ble	.L71
 349:modem.c       ****             modem_state = MODEM_STATE_OFF;
 1179              		.loc 1 349 0
 1180 00fe 084B     		ldr	r3, .L73
 1181 0100 0022     		movs	r2, #0
 1182 0102 1A70     		strb	r2, [r3]
 350:modem.c       ****             modem_power_down(); // Power down the modem -- completely "kill" modem to conserve powe
 1183              		.loc 1 350 0
 1184 0104 FFF7FEFF 		bl	modem_power_down
 351:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Modem timed out on IP address acquire.");
 1185              		.loc 1 351 0
 1186 0108 0B49     		ldr	r1, .L73+24
 1187 010a 0220     		movs	r0, #2
 1188 010c FFF7FEFF 		bl	printNotif
 1189              	.L71:
 352:modem.c       ****       
 353:modem.c       ****         }
 354:modem.c       ****         return 0u;//ok to hand off to sleep
 1190              		.loc 1 354 0
 1191 0110 0023     		movs	r3, #0
 1192 0112 00E0     		b	.L61
 1193              	.L69:
 355:modem.c       ****     }
 356:modem.c       ****     
 357:modem.c       ****     return 0u;
 1194              		.loc 1 357 0
 1195 0114 0023     		movs	r3, #0
 1196              	.L61:
 358:modem.c       ****     
 359:modem.c       **** }
 1197              		.loc 1 359 0
 1198 0116 1846     		mov	r0, r3
 1199 0118 0837     		adds	r7, r7, #8
 1200              		.cfi_def_cfa_offset 8
 1201 011a BD46     		mov	sp, r7
 1202              		.cfi_def_cfa_register 13
 1203              		@ sp needed
 1204 011c 80BD     		pop	{r7, pc}
 1205              	.L74:
 1206 011e 00BF     		.align	2
 1207              	.L73:
 1208 0120 00000000 		.word	modem_state
 1209 0124 00000000 		.word	modem_start_time_stamp
 1210 0128 00000000 		.word	modem_stats
 1211 012c 9C010000 		.word	.LC13
 1212 0130 C4010000 		.word	.LC14
 1213 0134 E8010000 		.word	.LC15
 1214 0138 08020000 		.word	.LC16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 30


 1215              		.cfi_endproc
 1216              	.LFE75:
 1217              		.size	modem_process_tasks, .-modem_process_tasks
 1218              		.section	.rodata
 1219 022f 00       		.align	2
 1220              	.LC17:
 1221 0230 43686563 		.ascii	"Checking AT+CREG?\000"
 1221      6B696E67 
 1221      2041542B 
 1221      43524547 
 1221      3F00
 1222 0242 0000     		.align	2
 1223              	.LC18:
 1224 0244 41542B43 		.ascii	"AT+CREG?\015\000"
 1224      5245473F 
 1224      0D00
 1225 024e 0000     		.align	2
 1226              	.LC19:
 1227 0250 45787472 		.ascii	"Extracting string AT+CREG?\000"
 1227      61637469 
 1227      6E672073 
 1227      7472696E 
 1227      67204154 
 1228 026b 00       		.align	2
 1229              	.LC20:
 1230 026c 75617274 		.ascii	"uart_received_string: %s\000"
 1230      5F726563 
 1230      65697665 
 1230      645F7374 
 1230      72696E67 
 1231 0285 000000   		.align	2
 1232              	.LC21:
 1233 0288 0D00     		.ascii	"\015\000"
 1234 028a 0000     		.align	2
 1235              	.LC22:
 1236 028c 3A2000   		.ascii	": \000"
 1237 028f 00       		.align	2
 1238              	.LC23:
 1239 0290 52656769 		.ascii	"Registered to network, CREG: %s\000"
 1239      73746572 
 1239      65642074 
 1239      6F206E65 
 1239      74776F72 
 1240              		.align	2
 1241              	.LC24:
 1242 02b0 446F6E65 		.ascii	"Done extracing string AT+CREG?\000"
 1242      20657874 
 1242      72616369 
 1242      6E672073 
 1242      7472696E 
 1243 02cf 00       		.align	2
 1244              	.LC25:
 1245 02d0 302C3100 		.ascii	"0,1\000"
 1246              		.align	2
 1247              	.LC26:
 1248 02d4 302C3500 		.ascii	"0,5\000"
 1249              		.section	.text.is_connected_to_cell_network,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 31


 1250              		.align	2
 1251              		.global	is_connected_to_cell_network
 1252              		.thumb
 1253              		.thumb_func
 1254              		.type	is_connected_to_cell_network, %function
 1255              	is_connected_to_cell_network:
 1256              	.LFB76:
 360:modem.c       **** 
 361:modem.c       **** // Checks network status, writes commands to the modem, then extracts string from UART
 362:modem.c       **** uint8 is_connected_to_cell_network(){
 1257              		.loc 1 362 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 16
 1260              		@ frame_needed = 1, uses_anonymous_args = 0
 1261 0000 80B5     		push	{r7, lr}
 1262              		.cfi_def_cfa_offset 8
 1263              		.cfi_offset 7, -8
 1264              		.cfi_offset 14, -4
 1265 0002 84B0     		sub	sp, sp, #16
 1266              		.cfi_def_cfa_offset 24
 1267 0004 00AF     		add	r7, sp, #0
 1268              		.cfi_def_cfa_register 7
 363:modem.c       ****     // AT command AT+CREG? is the Network Registration Report to check network status -- need '0,0'
 364:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Checking AT+CREG?");
 1269              		.loc 1 364 0
 1270 0006 2049     		ldr	r1, .L80
 1271 0008 0020     		movs	r0, #0
 1272 000a FFF7FEFF 		bl	printNotif
 365:modem.c       ****     // create new uint8 variable stust and set to equal the output of the function at_write_command
 366:modem.c       ****     uint8 status = at_write_command("AT+CREG?\r", "OK",DEFAULT_AT_TIMEOUT);
 1273              		.loc 1 366 0
 1274 000e 4FF4FA62 		mov	r2, #2000
 1275 0012 1E49     		ldr	r1, .L80+4
 1276 0014 1E48     		ldr	r0, .L80+8
 1277 0016 FFF7FEFF 		bl	at_write_command
 1278 001a 0346     		mov	r3, r0
 1279 001c FB73     		strb	r3, [r7, #15]
 367:modem.c       ****     
 368:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Extracting string AT+CREG?");
 1280              		.loc 1 368 0
 1281 001e 1D49     		ldr	r1, .L80+12
 1282 0020 0020     		movs	r0, #0
 1283 0022 FFF7FEFF 		bl	printNotif
 369:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"uart_received_string: %s",uart_received_string);
 1284              		.loc 1 369 0
 1285 0026 1C4A     		ldr	r2, .L80+16
 1286 0028 1C49     		ldr	r1, .L80+20
 1287 002a 0020     		movs	r0, #0
 1288 002c FFF7FEFF 		bl	printNotif
 370:modem.c       ****     
 371:modem.c       ****     // If the modem has a status
 372:modem.c       ****     if(status){
 1289              		.loc 1 372 0
 1290 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1291 0032 002B     		cmp	r3, #0
 1292 0034 23D0     		beq	.L76
 1293              	.LBB8:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 32


 373:modem.c       ****         // Create a character array of length 10 called creg
 374:modem.c       ****         char creg[10];
 375:modem.c       ****         creg[0] = '\0';
 1294              		.loc 1 375 0
 1295 0036 0023     		movs	r3, #0
 1296 0038 3B71     		strb	r3, [r7, #4]
 376:modem.c       ****         // Extract string from the UART
 377:modem.c       ****         extract_string(uart_received_string,": ","\r",creg);
 1297              		.loc 1 377 0
 1298 003a 3B1D     		adds	r3, r7, #4
 1299 003c 184A     		ldr	r2, .L80+24
 1300 003e 1949     		ldr	r1, .L80+28
 1301 0040 1548     		ldr	r0, .L80+16
 1302 0042 FFF7FEFF 		bl	extract_string
 378:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Registered to network, CREG: %s",creg);
 1303              		.loc 1 378 0
 1304 0046 3B1D     		adds	r3, r7, #4
 1305 0048 1A46     		mov	r2, r3
 1306 004a 1749     		ldr	r1, .L80+32
 1307 004c 0020     		movs	r0, #0
 1308 004e FFF7FEFF 		bl	printNotif
 379:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"Done extracing string AT+CREG?");
 1309              		.loc 1 379 0
 1310 0052 1649     		ldr	r1, .L80+36
 1311 0054 0020     		movs	r0, #0
 1312 0056 FFF7FEFF 		bl	printNotif
 380:modem.c       ****     
 381:modem.c       ****         // Search creg for "0,1" or "0,5", if either exists and either is not equal to NULL, return
 382:modem.c       ****         if((strstr(creg,"0,1")!=NULL)||(strstr(creg,"0,5")!=NULL)){
 1313              		.loc 1 382 0
 1314 005a 3B1D     		adds	r3, r7, #4
 1315 005c 1449     		ldr	r1, .L80+40
 1316 005e 1846     		mov	r0, r3
 1317 0060 FFF7FEFF 		bl	strstr
 1318 0064 0346     		mov	r3, r0
 1319 0066 002B     		cmp	r3, #0
 1320 0068 07D1     		bne	.L77
 1321              		.loc 1 382 0 is_stmt 0 discriminator 1
 1322 006a 3B1D     		adds	r3, r7, #4
 1323 006c 1149     		ldr	r1, .L80+44
 1324 006e 1846     		mov	r0, r3
 1325 0070 FFF7FEFF 		bl	strstr
 1326 0074 0346     		mov	r3, r0
 1327 0076 002B     		cmp	r3, #0
 1328 0078 01D0     		beq	.L76
 1329              	.L77:
 383:modem.c       ****             return 1u;
 1330              		.loc 1 383 0 is_stmt 1
 1331 007a 0123     		movs	r3, #1
 1332 007c 00E0     		b	.L79
 1333              	.L76:
 1334              	.LBE8:
 384:modem.c       ****         }
 385:modem.c       ****     }
 386:modem.c       ****     // If the modem doesn't have a status, return 0u
 387:modem.c       ****     return 0u;
 1335              		.loc 1 387 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 33


 1336 007e 0023     		movs	r3, #0
 1337              	.L79:
 388:modem.c       ****         
 389:modem.c       **** }
 1338              		.loc 1 389 0
 1339 0080 1846     		mov	r0, r3
 1340 0082 1037     		adds	r7, r7, #16
 1341              		.cfi_def_cfa_offset 8
 1342 0084 BD46     		mov	sp, r7
 1343              		.cfi_def_cfa_register 13
 1344              		@ sp needed
 1345 0086 80BD     		pop	{r7, pc}
 1346              	.L81:
 1347              		.align	2
 1348              	.L80:
 1349 0088 30020000 		.word	.LC17
 1350 008c 00000000 		.word	.LC0
 1351 0090 44020000 		.word	.LC18
 1352 0094 50020000 		.word	.LC19
 1353 0098 00000000 		.word	uart_received_string
 1354 009c 6C020000 		.word	.LC20
 1355 00a0 88020000 		.word	.LC21
 1356 00a4 8C020000 		.word	.LC22
 1357 00a8 90020000 		.word	.LC23
 1358 00ac B0020000 		.word	.LC24
 1359 00b0 D0020000 		.word	.LC25
 1360 00b4 D4020000 		.word	.LC26
 1361              		.cfi_endproc
 1362              	.LFE76:
 1363              		.size	is_connected_to_cell_network, .-is_connected_to_cell_network
 1364              		.section	.rodata
 1365              		.align	2
 1366              	.LC27:
 1367 02d8 41542353 		.ascii	"AT#SGACT=1,1\015\012\000"
 1367      47414354 
 1367      3D312C31 
 1367      0D0A00
 1368              		.section	.text.set_up_internet_connection,"ax",%progbits
 1369              		.align	2
 1370              		.global	set_up_internet_connection
 1371              		.thumb
 1372              		.thumb_func
 1373              		.type	set_up_internet_connection, %function
 1374              	set_up_internet_connection:
 1375              	.LFB77:
 390:modem.c       **** 
 391:modem.c       **** // Connect the modem to the internet
 392:modem.c       **** void set_up_internet_connection(){
 1376              		.loc 1 392 0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 0
 1379              		@ frame_needed = 1, uses_anonymous_args = 0
 1380 0000 80B5     		push	{r7, lr}
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 7, -8
 1383              		.cfi_offset 14, -4
 1384 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 34


 1385              		.cfi_def_cfa_register 7
 393:modem.c       ****     
 394:modem.c       ****     //port 3
 395:modem.c       ****    //<connId>,<srMode>,<dataMode>, 
 396:modem.c       ****     //at_write_command("AT#SCFGEXT=1,1,0,0,0,0\r", "OK",DEFAULT_AT_TIMEOUT);////LTE modem relevant
 397:modem.c       ****     
 398:modem.c       ****     //<connId>,<cid>,<pktSz>,<maxTo>,<connTo>,<txTo>
 399:modem.c       ****     //at_write_command("AT#SCFG=1,3,300,90,600,50\r", "OK",DEFAULT_AT_TIMEOUT); //LTE modem relevan
 400:modem.c       ****     // <cid>,<stat>
 401:modem.c       ****    
 402:modem.c       ****     // AT command SGACT is Context Activation command is used to activate the specified PDP context
 403:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",1000u);
 1386              		.loc 1 403 0
 1387 0004 4FF47A72 		mov	r2, #1000
 1388 0008 0249     		ldr	r1, .L83
 1389 000a 0348     		ldr	r0, .L83+4
 1390 000c FFF7FEFF 		bl	at_write_command
 404:modem.c       ****     
 405:modem.c       **** }
 1391              		.loc 1 405 0
 1392 0010 00BF     		nop
 1393 0012 80BD     		pop	{r7, pc}
 1394              	.L84:
 1395              		.align	2
 1396              	.L83:
 1397 0014 00000000 		.word	.LC0
 1398 0018 D8020000 		.word	.LC27
 1399              		.cfi_endproc
 1400              	.LFE77:
 1401              		.size	set_up_internet_connection, .-set_up_internet_connection
 1402              		.section	.rodata
 1403 02e7 00       		.align	2
 1404              	.LC28:
 1405 02e8 312C3100 		.ascii	"1,1\000"
 1406              		.align	2
 1407              	.LC29:
 1408 02ec 41542353 		.ascii	"AT#SGACT?\015\000"
 1408      47414354 
 1408      3F0D00
 1409              		.section	.text.is_connected_to_internet,"ax",%progbits
 1410              		.align	2
 1411              		.global	is_connected_to_internet
 1412              		.thumb
 1413              		.thumb_func
 1414              		.type	is_connected_to_internet, %function
 1415              	is_connected_to_internet:
 1416              	.LFB78:
 406:modem.c       **** 
 407:modem.c       **** // Checks if the modem is connected to the internet
 408:modem.c       **** uint8 is_connected_to_internet(){
 1417              		.loc 1 408 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 0000 80B5     		push	{r7, lr}
 1422              		.cfi_def_cfa_offset 8
 1423              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 35


 1424              		.cfi_offset 14, -4
 1425 0002 00AF     		add	r7, sp, #0
 1426              		.cfi_def_cfa_register 7
 409:modem.c       ****     // AT command SGACT? reports the range for the parameters <cid> and <stat>
 410:modem.c       ****     // cid: is the Packet Data Protocol (PDP) Context Identifier which specifies the particular PDP
 411:modem.c       ****     // stat: gives the context staus (0 deactivated and 1 activated)
 412:modem.c       ****     // Check for 3,1 if Verizon 
 413:modem.c       ****     if(at_write_command("AT#SGACT?\r", "1,1",DEFAULT_AT_TIMEOUT)){
 1427              		.loc 1 413 0
 1428 0004 4FF4FA62 		mov	r2, #2000
 1429 0008 0549     		ldr	r1, .L88
 1430 000a 0648     		ldr	r0, .L88+4
 1431 000c FFF7FEFF 		bl	at_write_command
 1432 0010 0346     		mov	r3, r0
 1433 0012 002B     		cmp	r3, #0
 1434 0014 01D0     		beq	.L86
 414:modem.c       ****         return 1u;
 1435              		.loc 1 414 0
 1436 0016 0123     		movs	r3, #1
 1437 0018 00E0     		b	.L87
 1438              	.L86:
 415:modem.c       ****     }
 416:modem.c       ****     return 0u;  
 1439              		.loc 1 416 0
 1440 001a 0023     		movs	r3, #0
 1441              	.L87:
 417:modem.c       **** }
 1442              		.loc 1 417 0
 1443 001c 1846     		mov	r0, r3
 1444 001e 80BD     		pop	{r7, pc}
 1445              	.L89:
 1446              		.align	2
 1447              	.L88:
 1448 0020 E8020000 		.word	.LC28
 1449 0024 EC020000 		.word	.LC29
 1450              		.cfi_endproc
 1451              	.LFE78:
 1452              		.size	is_connected_to_internet, .-is_connected_to_internet
 1453              		.section	.rodata
 1454 02f7 00       		.align	2
 1455              	.LC30:
 1456 02f8 41542B43 		.ascii	"AT+CESQ\015\000"
 1456      4553510D 
 1456      00
 1457 0301 000000   		.align	2
 1458              	.LC31:
 1459 0304 0D0A2B43 		.ascii	"\015\012+CESQ: %d,%d,%d,%d,%d,%d%*s\000"
 1459      4553513A 
 1459      2025642C 
 1459      25642C25 
 1459      642C2564 
 1460              		.section	.text.get_cell_network_stats,"ax",%progbits
 1461              		.align	2
 1462              		.global	get_cell_network_stats
 1463              		.thumb
 1464              		.thumb_func
 1465              		.type	get_cell_network_stats, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 36


 1466              	get_cell_network_stats:
 1467              	.LFB79:
 418:modem.c       **** 
 419:modem.c       **** void get_cell_network_stats(){
 1468              		.loc 1 419 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 8
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472 0000 80B5     		push	{r7, lr}
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 7, -8
 1475              		.cfi_offset 14, -4
 1476 0002 86B0     		sub	sp, sp, #24
 1477              		.cfi_def_cfa_offset 32
 1478 0004 04AF     		add	r7, sp, #16
 1479              		.cfi_def_cfa 7, 16
 420:modem.c       ****     // Initialize values
 421:modem.c       ****     modem_stats.ber = 255;
 1480              		.loc 1 421 0
 1481 0006 154B     		ldr	r3, .L91
 1482 0008 FF22     		movs	r2, #255
 1483 000a 5A60     		str	r2, [r3, #4]
 422:modem.c       ****     modem_stats.ecno = 255;
 1484              		.loc 1 422 0
 1485 000c 134B     		ldr	r3, .L91
 1486 000e FF22     		movs	r2, #255
 1487 0010 DA60     		str	r2, [r3, #12]
 423:modem.c       ****     modem_stats.rscp = 255;
 1488              		.loc 1 423 0
 1489 0012 124B     		ldr	r3, .L91
 1490 0014 FF22     		movs	r2, #255
 1491 0016 9A60     		str	r2, [r3, #8]
 424:modem.c       ****     modem_stats.rsrp = 255;
 1492              		.loc 1 424 0
 1493 0018 104B     		ldr	r3, .L91
 1494 001a FF22     		movs	r2, #255
 1495 001c 5A61     		str	r2, [r3, #20]
 425:modem.c       ****     modem_stats.rsrq = 255;
 1496              		.loc 1 425 0
 1497 001e 0F4B     		ldr	r3, .L91
 1498 0020 FF22     		movs	r2, #255
 1499 0022 1A61     		str	r2, [r3, #16]
 426:modem.c       ****     modem_stats.rxlev = 255;
 1500              		.loc 1 426 0
 1501 0024 0D4B     		ldr	r3, .L91
 1502 0026 FF22     		movs	r2, #255
 1503 0028 1A60     		str	r2, [r3]
 427:modem.c       **** 
 428:modem.c       ****     //for(uint8 attempts =0; attempts <10; attempts++){
 429:modem.c       ****     at_write_command("AT+CESQ\r", "OK", DEFAULT_AT_TIMEOUT);
 1504              		.loc 1 429 0
 1505 002a 4FF4FA62 		mov	r2, #2000
 1506 002e 0C49     		ldr	r1, .L91+4
 1507 0030 0C48     		ldr	r0, .L91+8
 1508 0032 FFF7FEFF 		bl	at_write_command
 430:modem.c       ****     //CESQ: <rxlev>,<ber>,<rscp>,<ecno>,<rsrq>,<rsrp>
 431:modem.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 37


 432:modem.c       ****     int match = sscanf(uart_received_string,"\r\n+CESQ: %d,%d,%d,%d,%d,%d%*s",
 1509              		.loc 1 432 0
 1510 0036 0C4B     		ldr	r3, .L91+12
 1511 0038 0393     		str	r3, [sp, #12]
 1512 003a 0C4B     		ldr	r3, .L91+16
 1513 003c 0293     		str	r3, [sp, #8]
 1514 003e 0C4B     		ldr	r3, .L91+20
 1515 0040 0193     		str	r3, [sp, #4]
 1516 0042 0C4B     		ldr	r3, .L91+24
 1517 0044 0093     		str	r3, [sp]
 1518 0046 0C4B     		ldr	r3, .L91+28
 1519 0048 044A     		ldr	r2, .L91
 1520 004a 0C49     		ldr	r1, .L91+32
 1521 004c 0C48     		ldr	r0, .L91+36
 1522 004e FFF7FEFF 		bl	sscanf
 1523 0052 7860     		str	r0, [r7, #4]
 433:modem.c       ****         &modem_stats.rxlev,
 434:modem.c       ****         &modem_stats.ber,
 435:modem.c       ****         &modem_stats.rscp,
 436:modem.c       ****         &modem_stats.ecno,
 437:modem.c       ****         &modem_stats.rsrq,
 438:modem.c       ****         &modem_stats.rsrp);
 439:modem.c       **** 
 440:modem.c       ****         //check to see if we’re getting a good received signal strength
 441:modem.c       ****         //if(modem_stats.rsrp != 255 && modem_stats.rsrp > 26){// || modem_stats.rxlev !=0){
 442:modem.c       ****         //    break;
 443:modem.c       ****         //}
 444:modem.c       ****         // Delay one second
 445:modem.c       ****         //CyDelay(1000u);
 446:modem.c       ****     //}
 447:modem.c       **** }
 1524              		.loc 1 447 0
 1525 0054 00BF     		nop
 1526 0056 0837     		adds	r7, r7, #8
 1527              		.cfi_def_cfa_offset 8
 1528 0058 BD46     		mov	sp, r7
 1529              		.cfi_def_cfa_register 13
 1530              		@ sp needed
 1531 005a 80BD     		pop	{r7, pc}
 1532              	.L92:
 1533              		.align	2
 1534              	.L91:
 1535 005c 00000000 		.word	modem_stats
 1536 0060 00000000 		.word	.LC0
 1537 0064 F8020000 		.word	.LC30
 1538 0068 14000000 		.word	modem_stats+20
 1539 006c 10000000 		.word	modem_stats+16
 1540 0070 0C000000 		.word	modem_stats+12
 1541 0074 08000000 		.word	modem_stats+8
 1542 0078 04000000 		.word	modem_stats+4
 1543 007c 04030000 		.word	.LC31
 1544 0080 00000000 		.word	uart_received_string
 1545              		.cfi_endproc
 1546              	.LFE79:
 1547              		.size	get_cell_network_stats, .-get_cell_network_stats
 1548              		.section	.text.updatable_parameters_initialize,"ax",%progbits
 1549              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 38


 1550              		.global	updatable_parameters_initialize
 1551              		.thumb
 1552              		.thumb_func
 1553              		.type	updatable_parameters_initialize, %function
 1554              	updatable_parameters_initialize:
 1555              	.LFB80:
 448:modem.c       **** 
 449:modem.c       **** // Initialize updatable parameters (sampling, reporting, and debug frequencies)
 450:modem.c       **** void updatable_parameters_initialize(){
 1556              		.loc 1 450 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 1, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 1561 0000 80B4     		push	{r7}
 1562              		.cfi_def_cfa_offset 4
 1563              		.cfi_offset 7, -4
 1564 0002 00AF     		add	r7, sp, #0
 1565              		.cfi_def_cfa_register 7
 451:modem.c       ****     updatable_parameters.node_type = NODE_TYPE_DEPTH;
 1566              		.loc 1 451 0
 1567 0004 094B     		ldr	r3, .L94
 1568 0006 0022     		movs	r2, #0
 1569 0008 1A70     		strb	r2, [r3]
 452:modem.c       ****     updatable_parameters.sim_type = SIM_TYPE_STANDARD;
 1570              		.loc 1 452 0
 1571 000a 084B     		ldr	r3, .L94
 1572 000c 0022     		movs	r2, #0
 1573 000e 5A70     		strb	r2, [r3, #1]
 453:modem.c       ****     updatable_parameters.measure_time = 10u;
 1574              		.loc 1 453 0
 1575 0010 064B     		ldr	r3, .L94
 1576 0012 0A22     		movs	r2, #10
 1577 0014 9A70     		strb	r2, [r3, #2]
 454:modem.c       ****     updatable_parameters.sync_time = 60u;
 1578              		.loc 1 454 0
 1579 0016 054B     		ldr	r3, .L94
 1580 0018 3C22     		movs	r2, #60
 1581 001a DA70     		strb	r2, [r3, #3]
 455:modem.c       ****     updatable_parameters.debug_level = 1u;
 1582              		.loc 1 455 0
 1583 001c 034B     		ldr	r3, .L94
 1584 001e 0122     		movs	r2, #1
 1585 0020 1A71     		strb	r2, [r3, #4]
 456:modem.c       **** }
 1586              		.loc 1 456 0
 1587 0022 00BF     		nop
 1588 0024 BD46     		mov	sp, r7
 1589              		.cfi_def_cfa_register 13
 1590              		@ sp needed
 1591 0026 80BC     		pop	{r7}
 1592              		.cfi_restore 7
 1593              		.cfi_def_cfa_offset 0
 1594 0028 7047     		bx	lr
 1595              	.L95:
 1596 002a 00BF     		.align	2
 1597              	.L94:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 39


 1598 002c 00000000 		.word	updatable_parameters
 1599              		.cfi_endproc
 1600              	.LFE80:
 1601              		.size	updatable_parameters_initialize, .-updatable_parameters_initialize
 1602              		.section	.rodata
 1603 0322 0000     		.align	2
 1604              	.LC32:
 1605 0324 4E6F6465 		.ascii	"Node_Type: \000"
 1605      5F547970 
 1605      653A2000 
 1606              		.align	2
 1607              	.LC33:
 1608 0330 53494D5F 		.ascii	"SIM_Type: \000"
 1608      54797065 
 1608      3A2000
 1609 033b 00       		.align	2
 1610              	.LC34:
 1611 033c 53616D70 		.ascii	"Sample_Freq: \000"
 1611      6C655F46 
 1611      7265713A 
 1611      2000
 1612 034a 0000     		.align	2
 1613              	.LC35:
 1614 034c 5265706F 		.ascii	"Report_Freq: \000"
 1614      72745F46 
 1614      7265713A 
 1614      2000
 1615 035a 0000     		.align	2
 1616              	.LC36:
 1617 035c 44656275 		.ascii	"Debug_Freq: \000"
 1617      675F4672 
 1617      65713A20 
 1617      00
 1618 0369 000000   		.align	2
 1619              	.LC37:
 1620 036c 256400   		.ascii	"%d\000"
 1621 036f 00       		.align	2
 1622              	.LC38:
 1623 0370 4E6F6465 		.ascii	"Node type changed to: %d\015\012\000"
 1623      20747970 
 1623      65206368 
 1623      616E6765 
 1623      6420746F 
 1624 038b 00       		.align	2
 1625              	.LC39:
 1626 038c 436F756C 		.ascii	"Could not change node type.\000"
 1626      64206E6F 
 1626      74206368 
 1626      616E6765 
 1626      206E6F64 
 1627              		.align	2
 1628              	.LC40:
 1629 03a8 53494D20 		.ascii	"SIM type changed to: %d\015\012\000"
 1629      74797065 
 1629      20636861 
 1629      6E676564 
 1629      20746F3A 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 40


 1630 03c2 0000     		.align	2
 1631              	.LC41:
 1632 03c4 436F756C 		.ascii	"Could not change SIM type.\000"
 1632      64206E6F 
 1632      74206368 
 1632      616E6765 
 1632      2053494D 
 1633 03df 00       		.align	2
 1634              	.LC42:
 1635 03e0 53616D70 		.ascii	"Sampling frequency changed to: %d\015\012\000"
 1635      6C696E67 
 1635      20667265 
 1635      7175656E 
 1635      63792063 
 1636              		.align	2
 1637              	.LC43:
 1638 0404 436F756C 		.ascii	"Could not parse new sampling frequency value.\000"
 1638      64206E6F 
 1638      74207061 
 1638      72736520 
 1638      6E657720 
 1639 0432 0000     		.align	2
 1640              	.LC44:
 1641 0434 5265706F 		.ascii	"Reporting frequency changed to: %d\015\012\000"
 1641      7274696E 
 1641      67206672 
 1641      65717565 
 1641      6E637920 
 1642 0459 000000   		.align	2
 1643              	.LC45:
 1644 045c 436F756C 		.ascii	"Could not parse new reporting frequency value.\000"
 1644      64206E6F 
 1644      74207061 
 1644      72736520 
 1644      6E657720 
 1645 048b 00       		.align	2
 1646              	.LC46:
 1647 048c 44656275 		.ascii	"Debug printing frequency changed to: %d\015\012\000"
 1647      67207072 
 1647      696E7469 
 1647      6E672066 
 1647      72657175 
 1648 04b6 0000     		.align	2
 1649              	.LC47:
 1650 04b8 436F756C 		.ascii	"Could not parse new debugging frequency value.\000"
 1650      64206E6F 
 1650      74207061 
 1650      72736520 
 1650      6E657720 
 1651 04e7 00       		.align	2
 1652              	.LC49:
 1653 04e8 56616C76 		.ascii	"Valve_Open: \000"
 1653      655F4F70 
 1653      656E3A20 
 1653      00
 1654              		.global	__aeabi_d2f
 1655 04f5 000000   		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 41


 1656              	.LC50:
 1657 04f8 53756363 		.ascii	"Successfully moved valve to %f\000"
 1657      65737366 
 1657      756C6C79 
 1657      206D6F76 
 1657      65642076 
 1658 0517 00       		.align	2
 1659              	.LC51:
 1660 0518 76616C76 		.ascii	"valve_moved_to: \000"
 1660      655F6D6F 
 1660      7665645F 
 1660      746F3A20 
 1660      00
 1661 0529 000000   		.align	2
 1662              	.LC52:
 1663 052c 56616C76 		.ascii	"Valve move requested but failed to %f\000"
 1663      65206D6F 
 1663      76652072 
 1663      65717565 
 1663      73746564 
 1664 0552 0000     		.align	2
 1665              	.LC53:
 1666 0554 76616C76 		.ascii	"valve_move_requested_but_failed: \000"
 1666      655F6D6F 
 1666      76655F72 
 1666      65717565 
 1666      73746564 
 1667 0576 0000     		.align	2
 1668              	.LC48:
 1669 0578 2D310000 		.ascii	"-1\000\000"
 1670 057c 0000     		.space	2
 1671              		.section	.text.get_updated_parameters_from_malcom,"ax",%progbits
 1672              		.align	2
 1673              		.global	get_updated_parameters_from_malcom
 1674              		.thumb
 1675              		.thumb_func
 1676              		.type	get_updated_parameters_from_malcom, %function
 1677              	get_updated_parameters_from_malcom:
 1678              	.LFB81:
 457:modem.c       **** 
 458:modem.c       **** // Get the update values for sampling frequency, reporting frequency, and the debug level from the 
 459:modem.c       **** void get_updated_parameters_from_malcom(){
 1679              		.loc 1 459 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 96
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683 0000 90B5     		push	{r4, r7, lr}
 1684              		.cfi_def_cfa_offset 12
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 7, -8
 1687              		.cfi_offset 14, -4
 1688 0002 99B0     		sub	sp, sp, #100
 1689              		.cfi_def_cfa_offset 112
 1690 0004 00AF     		add	r7, sp, #0
 1691              		.cfi_def_cfa_register 7
 460:modem.c       ****     
 461:modem.c       ****     // Create character array of size 1024 characters to hold the uart received string
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 42


 462:modem.c       ****     char s_node_type[10];
 463:modem.c       ****     char s_sim_type[10];
 464:modem.c       ****     char s_sample_freq[10];
 465:modem.c       ****     char s_report_freq[10];
 466:modem.c       ****     char s_debug_freq[10];
 467:modem.c       ****     
 468:modem.c       ****     s_node_type[0] = '\0';
 1692              		.loc 1 468 0
 1693 0006 0023     		movs	r3, #0
 1694 0008 87F85430 		strb	r3, [r7, #84]
 469:modem.c       ****     s_sim_type[0] = '\0';
 1695              		.loc 1 469 0
 1696 000c 0023     		movs	r3, #0
 1697 000e 87F84830 		strb	r3, [r7, #72]
 470:modem.c       ****     s_sample_freq[0] = '\0';
 1698              		.loc 1 470 0
 1699 0012 0023     		movs	r3, #0
 1700 0014 87F83C30 		strb	r3, [r7, #60]
 471:modem.c       ****     s_report_freq[0] = '\0';
 1701              		.loc 1 471 0
 1702 0018 0023     		movs	r3, #0
 1703 001a 87F83030 		strb	r3, [r7, #48]
 472:modem.c       ****     s_debug_freq[0] = '\0';
 1704              		.loc 1 472 0
 1705 001e 0023     		movs	r3, #0
 1706 0020 87F82430 		strb	r3, [r7, #36]
 473:modem.c       ****     
 474:modem.c       ****     // Extract UART string recieved from the modem and save to variables
 475:modem.c       ****     extract_string(uart_received_string,"Node_Type: ","\r",s_node_type);
 1707              		.loc 1 475 0
 1708 0024 07F15403 		add	r3, r7, #84
 1709 0028 8D4A     		ldr	r2, .L111
 1710 002a 8E49     		ldr	r1, .L111+4
 1711 002c 8E48     		ldr	r0, .L111+8
 1712 002e FFF7FEFF 		bl	extract_string
 476:modem.c       ****     extract_string(uart_received_string,"SIM_Type: ","\r",s_sim_type);
 1713              		.loc 1 476 0
 1714 0032 07F14803 		add	r3, r7, #72
 1715 0036 8A4A     		ldr	r2, .L111
 1716 0038 8C49     		ldr	r1, .L111+12
 1717 003a 8B48     		ldr	r0, .L111+8
 1718 003c FFF7FEFF 		bl	extract_string
 477:modem.c       ****     extract_string(uart_received_string,"Sample_Freq: ","\r",s_sample_freq);
 1719              		.loc 1 477 0
 1720 0040 07F13C03 		add	r3, r7, #60
 1721 0044 864A     		ldr	r2, .L111
 1722 0046 8A49     		ldr	r1, .L111+16
 1723 0048 8748     		ldr	r0, .L111+8
 1724 004a FFF7FEFF 		bl	extract_string
 478:modem.c       ****     extract_string(uart_received_string,"Report_Freq: ","\r",s_report_freq);
 1725              		.loc 1 478 0
 1726 004e 07F13003 		add	r3, r7, #48
 1727 0052 834A     		ldr	r2, .L111
 1728 0054 8749     		ldr	r1, .L111+20
 1729 0056 8448     		ldr	r0, .L111+8
 1730 0058 FFF7FEFF 		bl	extract_string
 479:modem.c       ****     extract_string(uart_received_string,"Debug_Freq: ","\r",s_debug_freq);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 43


 1731              		.loc 1 479 0
 1732 005c 07F12403 		add	r3, r7, #36
 1733 0060 7F4A     		ldr	r2, .L111
 1734 0062 8549     		ldr	r1, .L111+24
 1735 0064 8048     		ldr	r0, .L111+8
 1736 0066 FFF7FEFF 		bl	extract_string
 480:modem.c       ****     // Create variables for what is sent back from the server
 481:modem.c       ****     int node_type, sim_type, sample_freq, report_freq, debug_freq;
 482:modem.c       ****     
 483:modem.c       ****     // Scan character arrays and save values 
 484:modem.c       ****     
 485:modem.c       ****     if(sscanf(s_node_type, "%d", &node_type)==1){
 1737              		.loc 1 485 0
 1738 006a 07F12002 		add	r2, r7, #32
 1739 006e 07F15403 		add	r3, r7, #84
 1740 0072 8249     		ldr	r1, .L111+28
 1741 0074 1846     		mov	r0, r3
 1742 0076 FFF7FEFF 		bl	sscanf
 1743 007a 0346     		mov	r3, r0
 1744 007c 012B     		cmp	r3, #1
 1745 007e 0AD1     		bne	.L97
 486:modem.c       ****         updatable_parameters.node_type = node_type;
 1746              		.loc 1 486 0
 1747 0080 3B6A     		ldr	r3, [r7, #32]
 1748 0082 DAB2     		uxtb	r2, r3
 1749 0084 7E4B     		ldr	r3, .L111+32
 1750 0086 1A70     		strb	r2, [r3]
 487:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Node type changed to: %d\r\n", node_type);
 1751              		.loc 1 487 0
 1752 0088 3B6A     		ldr	r3, [r7, #32]
 1753 008a 1A46     		mov	r2, r3
 1754 008c 7D49     		ldr	r1, .L111+36
 1755 008e 0020     		movs	r0, #0
 1756 0090 FFF7FEFF 		bl	printNotif
 1757 0094 03E0     		b	.L98
 1758              	.L97:
 488:modem.c       ****     }else{
 489:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change node type.");
 1759              		.loc 1 489 0
 1760 0096 7C49     		ldr	r1, .L111+40
 1761 0098 0220     		movs	r0, #2
 1762 009a FFF7FEFF 		bl	printNotif
 1763              	.L98:
 490:modem.c       ****     }
 491:modem.c       ****     if(sscanf(s_sim_type, "%d", &sim_type)==1){
 1764              		.loc 1 491 0
 1765 009e 07F11C02 		add	r2, r7, #28
 1766 00a2 07F14803 		add	r3, r7, #72
 1767 00a6 7549     		ldr	r1, .L111+28
 1768 00a8 1846     		mov	r0, r3
 1769 00aa FFF7FEFF 		bl	sscanf
 1770 00ae 0346     		mov	r3, r0
 1771 00b0 012B     		cmp	r3, #1
 1772 00b2 0ED1     		bne	.L99
 492:modem.c       ****         updatable_parameters.sim_type = sim_type;
 1773              		.loc 1 492 0
 1774 00b4 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 44


 1775 00b6 002B     		cmp	r3, #0
 1776 00b8 14BF     		ite	ne
 1777 00ba 0123     		movne	r3, #1
 1778 00bc 0023     		moveq	r3, #0
 1779 00be DAB2     		uxtb	r2, r3
 1780 00c0 6F4B     		ldr	r3, .L111+32
 1781 00c2 5A70     		strb	r2, [r3, #1]
 493:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "SIM type changed to: %d\r\n", sim_type);
 1782              		.loc 1 493 0
 1783 00c4 FB69     		ldr	r3, [r7, #28]
 1784 00c6 1A46     		mov	r2, r3
 1785 00c8 7049     		ldr	r1, .L111+44
 1786 00ca 0020     		movs	r0, #0
 1787 00cc FFF7FEFF 		bl	printNotif
 1788 00d0 03E0     		b	.L100
 1789              	.L99:
 494:modem.c       ****     }else{
 495:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not change SIM type.");
 1790              		.loc 1 495 0
 1791 00d2 6F49     		ldr	r1, .L111+48
 1792 00d4 0220     		movs	r0, #2
 1793 00d6 FFF7FEFF 		bl	printNotif
 1794              	.L100:
 496:modem.c       ****     }
 497:modem.c       ****     if(sscanf(s_sample_freq, "%d", &sample_freq)==1){
 1795              		.loc 1 497 0
 1796 00da 07F11802 		add	r2, r7, #24
 1797 00de 07F13C03 		add	r3, r7, #60
 1798 00e2 6649     		ldr	r1, .L111+28
 1799 00e4 1846     		mov	r0, r3
 1800 00e6 FFF7FEFF 		bl	sscanf
 1801 00ea 0346     		mov	r3, r0
 1802 00ec 012B     		cmp	r3, #1
 1803 00ee 19D1     		bne	.L101
 498:modem.c       ****         updatable_parameters.measure_time = sample_freq;
 1804              		.loc 1 498 0
 1805 00f0 BB69     		ldr	r3, [r7, #24]
 1806 00f2 DAB2     		uxtb	r2, r3
 1807 00f4 624B     		ldr	r3, .L111+32
 1808 00f6 9A70     		strb	r2, [r3, #2]
 499:modem.c       ****         // Create a continuous alarm called alarmMeasure that triggers at the required time to take
 500:modem.c       ****         alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_C
 1809              		.loc 1 500 0
 1810 00f8 614B     		ldr	r3, .L111+32
 1811 00fa 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1812 00fc 99B2     		uxth	r1, r3
 1813 00fe 654C     		ldr	r4, .L111+52
 1814 0100 3846     		mov	r0, r7
 1815 0102 0723     		movs	r3, #7
 1816 0104 0122     		movs	r2, #1
 1817 0106 FFF7FEFF 		bl	CreateAlarm
 1818 010a 2246     		mov	r2, r4
 1819 010c 3B46     		mov	r3, r7
 1820 010e 1968     		ldr	r1, [r3]	@ unaligned
 1821 0110 1160     		str	r1, [r2]	@ unaligned
 1822 0112 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1823 0114 9380     		strh	r3, [r2, #4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 45


 501:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Sampling frequency changed to: %d\r\n", sample_freq);
 1824              		.loc 1 501 0
 1825 0116 BB69     		ldr	r3, [r7, #24]
 1826 0118 1A46     		mov	r2, r3
 1827 011a 5F49     		ldr	r1, .L111+56
 1828 011c 0020     		movs	r0, #0
 1829 011e FFF7FEFF 		bl	printNotif
 1830 0122 03E0     		b	.L102
 1831              	.L101:
 502:modem.c       ****     }else{
 503:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new sampling frequency value.");
 1832              		.loc 1 503 0
 1833 0124 5D49     		ldr	r1, .L111+60
 1834 0126 0220     		movs	r0, #2
 1835 0128 FFF7FEFF 		bl	printNotif
 1836              	.L102:
 504:modem.c       ****     }
 505:modem.c       ****     if(sscanf(s_report_freq, "%d", &report_freq)==1){
 1837              		.loc 1 505 0
 1838 012c 07F11402 		add	r2, r7, #20
 1839 0130 07F13003 		add	r3, r7, #48
 1840 0134 5149     		ldr	r1, .L111+28
 1841 0136 1846     		mov	r0, r3
 1842 0138 FFF7FEFF 		bl	sscanf
 1843 013c 0346     		mov	r3, r0
 1844 013e 012B     		cmp	r3, #1
 1845 0140 19D1     		bne	.L103
 506:modem.c       ****         updatable_parameters.sync_time = report_freq;
 1846              		.loc 1 506 0
 1847 0142 7B69     		ldr	r3, [r7, #20]
 1848 0144 DAB2     		uxtb	r2, r3
 1849 0146 4E4B     		ldr	r3, .L111+32
 1850 0148 DA70     		strb	r2, [r3, #3]
 507:modem.c       ****         // Create a continuous alarm called alarmSync that triggers at the required time to sync th
 508:modem.c       ****         alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINU
 1851              		.loc 1 508 0
 1852 014a 4D4B     		ldr	r3, .L111+32
 1853 014c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1854 014e 99B2     		uxth	r1, r3
 1855 0150 534C     		ldr	r4, .L111+64
 1856 0152 3846     		mov	r0, r7
 1857 0154 0723     		movs	r3, #7
 1858 0156 0122     		movs	r2, #1
 1859 0158 FFF7FEFF 		bl	CreateAlarm
 1860 015c 2246     		mov	r2, r4
 1861 015e 3B46     		mov	r3, r7
 1862 0160 1968     		ldr	r1, [r3]	@ unaligned
 1863 0162 1160     		str	r1, [r2]	@ unaligned
 1864 0164 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1865 0166 9380     		strh	r3, [r2, #4]	@ unaligned
 509:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Reporting frequency changed to: %d\r\n", report_freq);
 1866              		.loc 1 509 0
 1867 0168 7B69     		ldr	r3, [r7, #20]
 1868 016a 1A46     		mov	r2, r3
 1869 016c 4D49     		ldr	r1, .L111+68
 1870 016e 0020     		movs	r0, #0
 1871 0170 FFF7FEFF 		bl	printNotif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 46


 1872 0174 03E0     		b	.L104
 1873              	.L103:
 510:modem.c       ****         }else{
 511:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new reporting frequency value.");
 1874              		.loc 1 511 0
 1875 0176 4C49     		ldr	r1, .L111+72
 1876 0178 0220     		movs	r0, #2
 1877 017a FFF7FEFF 		bl	printNotif
 1878              	.L104:
 512:modem.c       ****     }
 513:modem.c       ****     if(sscanf(s_debug_freq, "%d", &debug_freq)==1){
 1879              		.loc 1 513 0
 1880 017e 07F11002 		add	r2, r7, #16
 1881 0182 07F12403 		add	r3, r7, #36
 1882 0186 3D49     		ldr	r1, .L111+28
 1883 0188 1846     		mov	r0, r3
 1884 018a FFF7FEFF 		bl	sscanf
 1885 018e 0346     		mov	r3, r0
 1886 0190 012B     		cmp	r3, #1
 1887 0192 0AD1     		bne	.L105
 514:modem.c       ****         updatable_parameters.debug_level = debug_freq;
 1888              		.loc 1 514 0
 1889 0194 3B69     		ldr	r3, [r7, #16]
 1890 0196 DAB2     		uxtb	r2, r3
 1891 0198 394B     		ldr	r3, .L111+32
 1892 019a 1A71     		strb	r2, [r3, #4]
 515:modem.c       ****         printNotif(NOTIF_TYPE_EVENT, "Debug printing frequency changed to: %d\r\n", debug_freq);
 1893              		.loc 1 515 0
 1894 019c 3B69     		ldr	r3, [r7, #16]
 1895 019e 1A46     		mov	r2, r3
 1896 01a0 4249     		ldr	r1, .L111+76
 1897 01a2 0020     		movs	r0, #0
 1898 01a4 FFF7FEFF 		bl	printNotif
 1899 01a8 03E0     		b	.L106
 1900              	.L105:
 516:modem.c       ****     }else{
 517:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Could not parse new debugging frequency value.");
 1901              		.loc 1 517 0
 1902 01aa 4149     		ldr	r1, .L111+80
 1903 01ac 0220     		movs	r0, #2
 1904 01ae FFF7FEFF 		bl	printNotif
 1905              	.L106:
 518:modem.c       ****     }
 519:modem.c       ****    
 520:modem.c       ****     
 521:modem.c       ****     if (updatable_parameters.node_type == NODE_TYPE_VALVE){
 1906              		.loc 1 521 0
 1907 01b2 334B     		ldr	r3, .L111+32
 1908 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1909 01b6 042B     		cmp	r3, #4
 1910 01b8 4ED1     		bne	.L110
 1911              	.LBB9:
 522:modem.c       ****         char valve_open_desired[6] = "-1\0"; // if we see -1 in the print we know we didn't parse c
 1912              		.loc 1 522 0
 1913 01ba 3E4B     		ldr	r3, .L111+84
 1914 01bc 1B68     		ldr	r3, [r3]
 1915 01be BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 47


 1916 01c0 0023     		movs	r3, #0
 1917 01c2 BB81     		strh	r3, [r7, #12]	@ movhi
 523:modem.c       ****         extract_string(uart_received_string,"Valve_Open: ","\r",valve_open_desired);
 1918              		.loc 1 523 0
 1919 01c4 07F10803 		add	r3, r7, #8
 1920 01c8 254A     		ldr	r2, .L111
 1921 01ca 3B49     		ldr	r1, .L111+88
 1922 01cc 2648     		ldr	r0, .L111+8
 1923 01ce FFF7FEFF 		bl	extract_string
 524:modem.c       ****         
 525:modem.c       ****         uint8 success = move_valve(atof(valve_open_desired));
 1924              		.loc 1 525 0
 1925 01d2 07F10803 		add	r3, r7, #8
 1926 01d6 1846     		mov	r0, r3
 1927 01d8 FFF7FEFF 		bl	atof
 1928 01dc 0346     		mov	r3, r0
 1929 01de 0C46     		mov	r4, r1
 1930 01e0 1846     		mov	r0, r3
 1931 01e2 2146     		mov	r1, r4
 1932 01e4 FFF7FEFF 		bl	__aeabi_d2f
 1933 01e8 0346     		mov	r3, r0
 1934 01ea 1846     		mov	r0, r3
 1935 01ec FFF7FEFF 		bl	move_valve
 1936 01f0 0346     		mov	r3, r0
 1937 01f2 87F85F30 		strb	r3, [r7, #95]
 526:modem.c       ****         if (success){
 1938              		.loc 1 526 0
 1939 01f6 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 1940 01fa 002B     		cmp	r3, #0
 1941 01fc 16D0     		beq	.L108
 527:modem.c       ****             printNotif(NOTIF_TYPE_EVENT, "Successfully moved valve to %f",atof(valve_open_desired))
 1942              		.loc 1 527 0
 1943 01fe 07F10803 		add	r3, r7, #8
 1944 0202 1846     		mov	r0, r3
 1945 0204 FFF7FEFF 		bl	atof
 1946 0208 0346     		mov	r3, r0
 1947 020a 0C46     		mov	r4, r1
 1948 020c 1A46     		mov	r2, r3
 1949 020e 2346     		mov	r3, r4
 1950 0210 2A49     		ldr	r1, .L111+92
 1951 0212 0020     		movs	r0, #0
 1952 0214 FFF7FEFF 		bl	printNotif
 528:modem.c       ****             pushData("valve_moved_to: ", valve_open_desired,getTimeStamp());
 1953              		.loc 1 528 0
 1954 0218 FFF7FEFF 		bl	getTimeStamp
 1955 021c 0246     		mov	r2, r0
 1956 021e 07F10803 		add	r3, r7, #8
 1957 0222 1946     		mov	r1, r3
 1958 0224 2648     		ldr	r0, .L111+96
 1959 0226 FFF7FEFF 		bl	pushData
 1960              	.LBE9:
 529:modem.c       ****         }
 530:modem.c       ****         else {
 531:modem.c       ****             // move_valve will print to serial that we failed
 532:modem.c       ****             // i wrote that function to follow a pythonic idea of being quiet when successful, it j
 533:modem.c       ****             printNotif(NOTIF_TYPE_ERROR, "Valve move requested but failed to %f",atof(valve_open_de
 534:modem.c       ****             pushData("valve_move_requested_but_failed: ", valve_open_desired,getTimeStamp());
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 48


 535:modem.c       ****         }
 536:modem.c       ****     }
 537:modem.c       ****     
 538:modem.c       ****     
 539:modem.c       **** }
 1961              		.loc 1 539 0
 1962 022a 15E0     		b	.L110
 1963              	.L108:
 1964              	.LBB10:
 533:modem.c       ****             pushData("valve_move_requested_but_failed: ", valve_open_desired,getTimeStamp());
 1965              		.loc 1 533 0
 1966 022c 07F10803 		add	r3, r7, #8
 1967 0230 1846     		mov	r0, r3
 1968 0232 FFF7FEFF 		bl	atof
 1969 0236 0346     		mov	r3, r0
 1970 0238 0C46     		mov	r4, r1
 1971 023a 1A46     		mov	r2, r3
 1972 023c 2346     		mov	r3, r4
 1973 023e 2149     		ldr	r1, .L111+100
 1974 0240 0220     		movs	r0, #2
 1975 0242 FFF7FEFF 		bl	printNotif
 534:modem.c       ****         }
 1976              		.loc 1 534 0
 1977 0246 FFF7FEFF 		bl	getTimeStamp
 1978 024a 0246     		mov	r2, r0
 1979 024c 07F10803 		add	r3, r7, #8
 1980 0250 1946     		mov	r1, r3
 1981 0252 1D48     		ldr	r0, .L111+104
 1982 0254 FFF7FEFF 		bl	pushData
 1983              	.L110:
 1984              	.LBE10:
 1985              		.loc 1 539 0
 1986 0258 00BF     		nop
 1987 025a 6437     		adds	r7, r7, #100
 1988              		.cfi_def_cfa_offset 12
 1989 025c BD46     		mov	sp, r7
 1990              		.cfi_def_cfa_register 13
 1991              		@ sp needed
 1992 025e 90BD     		pop	{r4, r7, pc}
 1993              	.L112:
 1994              		.align	2
 1995              	.L111:
 1996 0260 88020000 		.word	.LC21
 1997 0264 24030000 		.word	.LC32
 1998 0268 00000000 		.word	uart_received_string
 1999 026c 30030000 		.word	.LC33
 2000 0270 3C030000 		.word	.LC34
 2001 0274 4C030000 		.word	.LC35
 2002 0278 5C030000 		.word	.LC36
 2003 027c 6C030000 		.word	.LC37
 2004 0280 00000000 		.word	updatable_parameters
 2005 0284 70030000 		.word	.LC38
 2006 0288 8C030000 		.word	.LC39
 2007 028c A8030000 		.word	.LC40
 2008 0290 C4030000 		.word	.LC41
 2009 0294 00000000 		.word	alarmMeasure
 2010 0298 E0030000 		.word	.LC42
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 49


 2011 029c 04040000 		.word	.LC43
 2012 02a0 00000000 		.word	alarmSync
 2013 02a4 34040000 		.word	.LC44
 2014 02a8 5C040000 		.word	.LC45
 2015 02ac 8C040000 		.word	.LC46
 2016 02b0 B8040000 		.word	.LC47
 2017 02b4 78050000 		.word	.LC48
 2018 02b8 E8040000 		.word	.LC49
 2019 02bc F8040000 		.word	.LC50
 2020 02c0 18050000 		.word	.LC51
 2021 02c4 2C050000 		.word	.LC52
 2022 02c8 54050000 		.word	.LC53
 2023              		.cfi_endproc
 2024              	.LFE81:
 2025              		.size	get_updated_parameters_from_malcom, .-get_updated_parameters_from_malcom
 2026              		.section	.rodata
 2027 057e 0000     		.align	2
 2028              	.LC54:
 2029 0580 41542343 		.ascii	"AT#CGMM\015\000"
 2029      474D4D0D 
 2029      00
 2030 0589 000000   		.align	2
 2031              	.LC55:
 2032 058c 4D6F6465 		.ascii	"Modem Model: %s\000"
 2032      6D204D6F 
 2032      64656C3A 
 2032      20257300 
 2033              		.align	2
 2034              	.LC56:
 2035 059c 41542343 		.ascii	"AT#CCID\015\000"
 2035      4349440D 
 2035      00
 2036 05a5 000000   		.align	2
 2037              	.LC57:
 2038 05a8 53494D20 		.ascii	"SIM ID: %s\000"
 2038      49443A20 
 2038      257300
 2039 05b3 00       		.align	2
 2040              	.LC58:
 2041 05b4 41542B43 		.ascii	"AT+CGSN\015\000"
 2041      47534E0D 
 2041      00
 2042 05bd 000000   		.align	2
 2043              	.LC59:
 2044 05c0 494D4549 		.ascii	"IMEI: %s\000"
 2044      3A202573 
 2044      00
 2045 05c9 000000   		.align	2
 2046              	.LC60:
 2047 05cc 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\015\012"
 2047      4744434F 
 2047      4E543D31 
 2047      2C224950 
 2047      222C2277 
 2048 05f5 00       		.ascii	"\000"
 2049 05f6 0000     		.align	2
 2050              	.LC61:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 50


 2051 05f8 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"super\"\015\012\000"
 2051      4744434F 
 2051      4E543D31 
 2051      2C224950 
 2051      222C2273 
 2052              		.align	2
 2053              	.LC62:
 2054 0614 41542B43 		.ascii	"AT+CFUN?\015\000"
 2054      46554E3F 
 2054      0D00
 2055 061e 0000     		.align	2
 2056              	.LC63:
 2057 0620 4346554E 		.ascii	"CFUN: %s\000"
 2057      3A202573 
 2057      00
 2058 0629 000000   		.align	2
 2059              	.LC64:
 2060 062c 41542B43 		.ascii	"AT+CFUN=1\015\000"
 2060      46554E3D 
 2060      310D00
 2061              		.section	.text.modem_configure_settings,"ax",%progbits
 2062              		.align	2
 2063              		.global	modem_configure_settings
 2064              		.thumb
 2065              		.thumb_func
 2066              		.type	modem_configure_settings, %function
 2067              	modem_configure_settings:
 2068              	.LFB82:
 540:modem.c       ****     
 541:modem.c       **** // Configure the modem settings
 542:modem.c       **** void modem_configure_settings(){
 2069              		.loc 1 542 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 16
 2072              		@ frame_needed = 1, uses_anonymous_args = 0
 2073 0000 80B5     		push	{r7, lr}
 2074              		.cfi_def_cfa_offset 8
 2075              		.cfi_offset 7, -8
 2076              		.cfi_offset 14, -4
 2077 0002 84B0     		sub	sp, sp, #16
 2078              		.cfi_def_cfa_offset 24
 2079 0004 00AF     		add	r7, sp, #0
 2080              		.cfi_def_cfa_register 7
 543:modem.c       ****     
 544:modem.c       ****     // Save/print modem model ID number
 545:modem.c       ****     if(modem_info.model_id[0] == '\0'){
 2081              		.loc 1 545 0
 2082 0006 454B     		ldr	r3, .L122
 2083 0008 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2084 000a 002B     		cmp	r3, #0
 2085 000c 13D1     		bne	.L114
 546:modem.c       ****         // AT command #CGMM returns the "device model identification" code with the command echo.
 547:modem.c       ****         if(at_write_command("AT#CGMM\r","OK",DEFAULT_AT_TIMEOUT)){
 2086              		.loc 1 547 0
 2087 000e 4FF4FA62 		mov	r2, #2000
 2088 0012 4349     		ldr	r1, .L122+4
 2089 0014 4348     		ldr	r0, .L122+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 51


 2090 0016 FFF7FEFF 		bl	at_write_command
 2091 001a 0346     		mov	r3, r0
 2092 001c 002B     		cmp	r3, #0
 2093 001e 0AD0     		beq	.L114
 548:modem.c       ****             // Extract modem model ID number string from the UART
 549:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.model_id);
 2094              		.loc 1 549 0
 2095 0020 414B     		ldr	r3, .L122+12
 2096 0022 424A     		ldr	r2, .L122+16
 2097 0024 4249     		ldr	r1, .L122+20
 2098 0026 4348     		ldr	r0, .L122+24
 2099 0028 FFF7FEFF 		bl	extract_string
 550:modem.c       ****             // Print modem model ID number
 551:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"Modem Model: %s",modem_info.model_id);
 2100              		.loc 1 551 0
 2101 002c 3E4A     		ldr	r2, .L122+12
 2102 002e 4249     		ldr	r1, .L122+28
 2103 0030 0020     		movs	r0, #0
 2104 0032 FFF7FEFF 		bl	printNotif
 2105              	.L114:
 552:modem.c       ****         }
 553:modem.c       ****     }
 554:modem.c       ****     
 555:modem.c       ****    // Save/print SIM-card ID
 556:modem.c       ****    if(modem_info.sim_id[0] == '\0'){
 2106              		.loc 1 556 0
 2107 0036 394B     		ldr	r3, .L122
 2108 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2109 003a 002B     		cmp	r3, #0
 2110 003c 13D1     		bne	.L115
 557:modem.c       ****         // AT command #CCID is an execution command that reads the SIM number 
 558:modem.c       ****         if(at_write_command("AT#CCID\r", "OK", DEFAULT_AT_TIMEOUT)){
 2111              		.loc 1 558 0
 2112 003e 4FF4FA62 		mov	r2, #2000
 2113 0042 3749     		ldr	r1, .L122+4
 2114 0044 3D48     		ldr	r0, .L122+32
 2115 0046 FFF7FEFF 		bl	at_write_command
 2116 004a 0346     		mov	r3, r0
 2117 004c 002B     		cmp	r3, #0
 2118 004e 0AD0     		beq	.L115
 559:modem.c       ****             // Extract SIM-card ID string from the UART
 560:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.sim_id);
 2119              		.loc 1 560 0
 2120 0050 324B     		ldr	r3, .L122
 2121 0052 364A     		ldr	r2, .L122+16
 2122 0054 3649     		ldr	r1, .L122+20
 2123 0056 3748     		ldr	r0, .L122+24
 2124 0058 FFF7FEFF 		bl	extract_string
 561:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"SIM ID: %s",modem_info.sim_id);
 2125              		.loc 1 561 0
 2126 005c 2F4A     		ldr	r2, .L122
 2127 005e 3849     		ldr	r1, .L122+36
 2128 0060 0020     		movs	r0, #0
 2129 0062 FFF7FEFF 		bl	printNotif
 2130              	.L115:
 562:modem.c       ****         }
 563:modem.c       ****    }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 52


 564:modem.c       **** 
 565:modem.c       ****     // Save/print modem IMEI
 566:modem.c       ****     if(modem_info.imei[0] == '\0'){
 2131              		.loc 1 566 0
 2132 0066 2D4B     		ldr	r3, .L122
 2133 0068 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2134 006c 002B     		cmp	r3, #0
 2135 006e 13D1     		bne	.L116
 567:modem.c       ****         // AT command #CGSN returns the product serial number, identified as the IMEI of the mobile
 568:modem.c       ****         if(at_write_command("AT+CGSN\r","OK",DEFAULT_AT_TIMEOUT)){
 2136              		.loc 1 568 0
 2137 0070 4FF4FA62 		mov	r2, #2000
 2138 0074 2A49     		ldr	r1, .L122+4
 2139 0076 3348     		ldr	r0, .L122+40
 2140 0078 FFF7FEFF 		bl	at_write_command
 2141 007c 0346     		mov	r3, r0
 2142 007e 002B     		cmp	r3, #0
 2143 0080 0AD0     		beq	.L116
 569:modem.c       ****             // Extract modem IMEI number string from the UART
 570:modem.c       ****             extract_string(uart_received_string,": ","\r",modem_info.imei);
 2144              		.loc 1 570 0
 2145 0082 314B     		ldr	r3, .L122+44
 2146 0084 294A     		ldr	r2, .L122+16
 2147 0086 2A49     		ldr	r1, .L122+20
 2148 0088 2A48     		ldr	r0, .L122+24
 2149 008a FFF7FEFF 		bl	extract_string
 571:modem.c       ****             // Print modem IMEI number
 572:modem.c       ****             printNotif(NOTIF_TYPE_EVENT,"IMEI: %s",modem_info.imei);
 2150              		.loc 1 572 0
 2151 008e 2E4A     		ldr	r2, .L122+44
 2152 0090 2E49     		ldr	r1, .L122+48
 2153 0092 0020     		movs	r0, #0
 2154 0094 FFF7FEFF 		bl	printNotif
 2155              	.L116:
 573:modem.c       ****         } 
 574:modem.c       ****     }
 575:modem.c       ****     
 576:modem.c       ****     // Configure protocol and cellular end point
 577:modem.c       ****     // AT command +CGDCONT defines the PDP context parameter values for a PDP context identified by
 578:modem.c       ****     if(updatable_parameters.sim_type == SIM_TYPE_STANDARD){
 2156              		.loc 1 578 0
 2157 0098 2D4B     		ldr	r3, .L122+52
 2158 009a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2159 009c 83F00103 		eor	r3, r3, #1
 2160 00a0 DBB2     		uxtb	r3, r3
 2161 00a2 002B     		cmp	r3, #0
 2162 00a4 06D0     		beq	.L117
 579:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"wireless.twilio.com\"\r\n", "OK", DEFAULT_AT_TIMEOU
 2163              		.loc 1 579 0
 2164 00a6 4FF4FA62 		mov	r2, #2000
 2165 00aa 1D49     		ldr	r1, .L122+4
 2166 00ac 2948     		ldr	r0, .L122+56
 2167 00ae FFF7FEFF 		bl	at_write_command
 2168 00b2 09E0     		b	.L118
 2169              	.L117:
 580:modem.c       ****     
 581:modem.c       ****     }else if(updatable_parameters.sim_type == SIM_TYPE_SUPER){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 53


 2170              		.loc 1 581 0
 2171 00b4 264B     		ldr	r3, .L122+52
 2172 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2173 00b8 002B     		cmp	r3, #0
 2174 00ba 05D0     		beq	.L118
 582:modem.c       ****         at_write_command("AT+CGDCONT=1,\"IP\",\"super\"\r\n", "OK", DEFAULT_AT_TIMEOUT);
 2175              		.loc 1 582 0
 2176 00bc 4FF4FA62 		mov	r2, #2000
 2177 00c0 1749     		ldr	r1, .L122+4
 2178 00c2 2548     		ldr	r0, .L122+60
 2179 00c4 FFF7FEFF 		bl	at_write_command
 2180              	.L118:
 583:modem.c       ****     }
 584:modem.c       ****     
 585:modem.c       ****     // Check if modem power savings is enabled. If so, disable it so we can send data.
 586:modem.c       ****     // AT command +CFUN? is a read command that reports the current setting of <fun> which is the p
 587:modem.c       ****     if(at_write_command("AT+CFUN?\r", "OK",DEFAULT_AT_TIMEOUT)){
 2181              		.loc 1 587 0
 2182 00c8 4FF4FA62 		mov	r2, #2000
 2183 00cc 1449     		ldr	r1, .L122+4
 2184 00ce 2348     		ldr	r0, .L122+64
 2185 00d0 FFF7FEFF 		bl	at_write_command
 2186 00d4 0346     		mov	r3, r0
 2187 00d6 002B     		cmp	r3, #0
 2188 00d8 1BD0     		beq	.L121
 2189              	.LBB11:
 588:modem.c       ****         char CFUN[10]; // Create a character array of length 10 called CFUN 
 589:modem.c       ****         CFUN[0] = '\0';
 2190              		.loc 1 589 0
 2191 00da 0023     		movs	r3, #0
 2192 00dc 3B71     		strb	r3, [r7, #4]
 590:modem.c       ****         // Extract UART string recieved from the modem
 591:modem.c       ****         extract_string(uart_received_string,": ","\r",CFUN);
 2193              		.loc 1 591 0
 2194 00de 3B1D     		adds	r3, r7, #4
 2195 00e0 124A     		ldr	r2, .L122+16
 2196 00e2 1349     		ldr	r1, .L122+20
 2197 00e4 1348     		ldr	r0, .L122+24
 2198 00e6 FFF7FEFF 		bl	extract_string
 592:modem.c       ****         // Print UART string recieved from the modem
 593:modem.c       ****         printNotif(NOTIF_TYPE_EVENT,"CFUN: %s",CFUN);
 2199              		.loc 1 593 0
 2200 00ea 3B1D     		adds	r3, r7, #4
 2201 00ec 1A46     		mov	r2, r3
 2202 00ee 1C49     		ldr	r1, .L122+68
 2203 00f0 0020     		movs	r0, #0
 2204 00f2 FFF7FEFF 		bl	printNotif
 594:modem.c       ****         // Search CRUN for "1", if "1" exists, it will return 1u otherwise it will return NULL
 595:modem.c       ****         // If it returns NULL, then write another command to the modem
 596:modem.c       ****         if(strstr(CFUN,"1") == NULL){
 2205              		.loc 1 596 0
 2206 00f6 3B1D     		adds	r3, r7, #4
 2207 00f8 3121     		movs	r1, #49
 2208 00fa 1846     		mov	r0, r3
 2209 00fc FFF7FEFF 		bl	strchr
 2210 0100 0346     		mov	r3, r0
 2211 0102 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 54


 2212 0104 05D1     		bne	.L121
 597:modem.c       ****             // AT command +CFUN= is a set command which selects the level of functionality in the m
 598:modem.c       ****             // = 1 means mobile full functionality with power saving disabled 
 599:modem.c       ****             at_write_command("AT+CFUN=1\r", "OK",DEFAULT_AT_TIMEOUT);
 2213              		.loc 1 599 0
 2214 0106 4FF4FA62 		mov	r2, #2000
 2215 010a 0549     		ldr	r1, .L122+4
 2216 010c 1548     		ldr	r0, .L122+72
 2217 010e FFF7FEFF 		bl	at_write_command
 2218              	.L121:
 2219              	.LBE11:
 600:modem.c       ****         }
 601:modem.c       ****     }
 602:modem.c       **** 
 603:modem.c       ****     
 604:modem.c       **** }
 2220              		.loc 1 604 0
 2221 0112 00BF     		nop
 2222 0114 1037     		adds	r7, r7, #16
 2223              		.cfi_def_cfa_offset 8
 2224 0116 BD46     		mov	sp, r7
 2225              		.cfi_def_cfa_register 13
 2226              		@ sp needed
 2227 0118 80BD     		pop	{r7, pc}
 2228              	.L123:
 2229 011a 00BF     		.align	2
 2230              	.L122:
 2231 011c 00000000 		.word	modem_info
 2232 0120 00000000 		.word	.LC0
 2233 0124 80050000 		.word	.LC54
 2234 0128 14000000 		.word	modem_info+20
 2235 012c 88020000 		.word	.LC21
 2236 0130 8C020000 		.word	.LC22
 2237 0134 00000000 		.word	uart_received_string
 2238 0138 8C050000 		.word	.LC55
 2239 013c 9C050000 		.word	.LC56
 2240 0140 A8050000 		.word	.LC57
 2241 0144 B4050000 		.word	.LC58
 2242 0148 28000000 		.word	modem_info+40
 2243 014c C0050000 		.word	.LC59
 2244 0150 00000000 		.word	updatable_parameters
 2245 0154 CC050000 		.word	.LC60
 2246 0158 F8050000 		.word	.LC61
 2247 015c 14060000 		.word	.LC62
 2248 0160 20060000 		.word	.LC63
 2249 0164 2C060000 		.word	.LC64
 2250              		.cfi_endproc
 2251              	.LFE82:
 2252              		.size	modem_configure_settings, .-modem_configure_settings
 2253              		.section	.rodata
 2254 0637 00       		.align	2
 2255              	.LC65:
 2256 0638 4D6F6465 		.ascii	"Modem not ready to get time. Not conncted to networ"
 2256      6D206E6F 
 2256      74207265 
 2256      61647920 
 2256      746F2067 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 55


 2257 066b 6B2E00   		.ascii	"k.\000"
 2258 066e 0000     		.align	2
 2259              	.LC66:
 2260 0670 41542B43 		.ascii	"AT+CCLK?\015\000"
 2260      434C4B3F 
 2260      0D00
 2261 067a 0000     		.align	2
 2262              	.LC67:
 2263 067c 220D00   		.ascii	"\"\015\000"
 2264 067f 00       		.align	2
 2265              	.LC68:
 2266 0680 3A202200 		.ascii	": \"\000"
 2267              		.align	2
 2268              	.LC69:
 2269 0684 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d-%d\000"
 2269      642F2564 
 2269      2C25643A 
 2269      25643A25 
 2269      642D2564 
 2270 0699 000000   		.align	2
 2271              	.LC70:
 2272 069c 25642F25 		.ascii	"%d/%d/%d,%d:%d:%d+%d\000"
 2272      642F2564 
 2272      2C25643A 
 2272      25643A25 
 2272      642B2564 
 2273 06b1 000000   		.align	2
 2274              	.LC71:
 2275 06b4 436F756C 		.ascii	"Could not parse modem time.\000"
 2275      64206E6F 
 2275      74207061 
 2275      72736520 
 2275      6D6F6465 
 2276              		.section	.text.modem_get_network_time,"ax",%progbits
 2277              		.align	2
 2278              		.global	modem_get_network_time
 2279              		.thumb
 2280              		.thumb_func
 2281              		.type	modem_get_network_time, %function
 2282              	modem_get_network_time:
 2283              	.LFB83:
 605:modem.c       **** 
 606:modem.c       **** //returns 0 if modem can't get time
 607:modem.c       **** long modem_get_network_time(){
 2284              		.loc 1 607 0
 2285              		.cfi_startproc
 2286              		@ args = 0, pretend = 0, frame = 104
 2287              		@ frame_needed = 1, uses_anonymous_args = 0
 2288 0000 80B5     		push	{r7, lr}
 2289              		.cfi_def_cfa_offset 8
 2290              		.cfi_offset 7, -8
 2291              		.cfi_offset 14, -4
 2292 0002 A0B0     		sub	sp, sp, #128
 2293              		.cfi_def_cfa_offset 136
 2294 0004 06AF     		add	r7, sp, #24
 2295              		.cfi_def_cfa 7, 112
 608:modem.c       ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 56


 609:modem.c       ****     //modem reposen format (careful to include the quotes "")
 610:modem.c       ****     //+CCLK: "20/05/01,10:48:33-16" the "-16" is the number of quarter hourts (15 mins) from GMT ti
 611:modem.c       ****     //ex: 14:48 GMT
 612:modem.c       **** 
 613:modem.c       ****     // If modem_state is not "ready", then print error and return 0
 614:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2296              		.loc 1 614 0
 2297 0006 444B     		ldr	r3, .L131
 2298 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2299 000a 042B     		cmp	r3, #4
 2300 000c 05D0     		beq	.L125
 615:modem.c       ****         printNotif(NOTIF_TYPE_ERROR,"Modem not ready to get time. Not conncted to network.");
 2301              		.loc 1 615 0
 2302 000e 4349     		ldr	r1, .L131+4
 2303 0010 0220     		movs	r0, #2
 2304 0012 FFF7FEFF 		bl	printNotif
 616:modem.c       ****         return 0;   
 2305              		.loc 1 616 0
 2306 0016 0023     		movs	r3, #0
 2307 0018 7AE0     		b	.L126
 2308              	.L125:
 617:modem.c       ****     }
 618:modem.c       ****     long epoch_time = 0; // Create variable of long time and set equal to 0
 2309              		.loc 1 618 0
 2310 001a 0023     		movs	r3, #0
 2311 001c 7B66     		str	r3, [r7, #100]
 619:modem.c       ****     
 620:modem.c       ****     // AT command +CCLK? is a read command that returns the current setting of the real-time clock 
 621:modem.c       ****     if(at_write_command("AT+CCLK?\r","OK",DEFAULT_AT_TIMEOUT)){
 2312              		.loc 1 621 0
 2313 001e 4FF4FA62 		mov	r2, #2000
 2314 0022 3F49     		ldr	r1, .L131+8
 2315 0024 3F48     		ldr	r0, .L131+12
 2316 0026 FFF7FEFF 		bl	at_write_command
 2317 002a 0346     		mov	r3, r0
 2318 002c 002B     		cmp	r3, #0
 2319 002e 6ED0     		beq	.L127
 2320              	.LBB12:
 622:modem.c       ****         // need to set this to /0
 623:modem.c       ****         char network_time[30]; // Create a character array of length 30 called network_time 
 624:modem.c       ****         network_time[0] = '\0';
 2321              		.loc 1 624 0
 2322 0030 0023     		movs	r3, #0
 2323 0032 87F84430 		strb	r3, [r7, #68]
 625:modem.c       ****         // Extract UART string recieved from the modem and save to variable network_time
 626:modem.c       ****         extract_string(uart_received_string,": \"","\"\r",network_time);
 2324              		.loc 1 626 0
 2325 0036 07F14403 		add	r3, r7, #68
 2326 003a 3B4A     		ldr	r2, .L131+16
 2327 003c 3B49     		ldr	r1, .L131+20
 2328 003e 3C48     		ldr	r0, .L131+24
 2329 0040 FFF7FEFF 		bl	extract_string
 627:modem.c       ****         
 628:modem.c       ****         ///////////////////  
 629:modem.c       ****         struct tm t; // Creates variable t of struct tm
 630:modem.c       ****         
 631:modem.c       ****         // Creates a bunch of variables of type int and sets them to 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 57


 632:modem.c       ****         int year, month, day, hour, minute, second, gmt_offset = 0;
 2330              		.loc 1 632 0
 2331 0044 0023     		movs	r3, #0
 2332 0046 BB62     		str	r3, [r7, #40]
 633:modem.c       ****       
 634:modem.c       ****         // Determines the GMT offset 
 635:modem.c       ****         // int sscanf(const char *str, const char *format, ...) reads formatted input from a string
 636:modem.c       ****         // On success, the function returns the number of variables filled. In the case of an input
 637:modem.c       ****         if(sscanf(network_time,"%d/%d/%d,%d:%d:%d-%d",&year,&month,&day,&hour,&minute,&second,&gmt_
 2333              		.loc 1 637 0
 2334 0048 07F13C01 		add	r1, r7, #60
 2335 004c 07F14002 		add	r2, r7, #64
 2336 0050 07F14400 		add	r0, r7, #68
 2337 0054 07F12803 		add	r3, r7, #40
 2338 0058 0493     		str	r3, [sp, #16]
 2339 005a 07F12C03 		add	r3, r7, #44
 2340 005e 0393     		str	r3, [sp, #12]
 2341 0060 07F13003 		add	r3, r7, #48
 2342 0064 0293     		str	r3, [sp, #8]
 2343 0066 07F13403 		add	r3, r7, #52
 2344 006a 0193     		str	r3, [sp, #4]
 2345 006c 07F13803 		add	r3, r7, #56
 2346 0070 0093     		str	r3, [sp]
 2347 0072 0B46     		mov	r3, r1
 2348 0074 2F49     		ldr	r1, .L131+28
 2349 0076 FFF7FEFF 		bl	sscanf
 2350 007a 0346     		mov	r3, r0
 2351 007c 072B     		cmp	r3, #7
 2352 007e 06D1     		bne	.L128
 638:modem.c       ****             gmt_offset = gmt_offset*(900);
 2353              		.loc 1 638 0
 2354 0080 BB6A     		ldr	r3, [r7, #40]
 2355 0082 4FF46172 		mov	r2, #900
 2356 0086 02FB03F3 		mul	r3, r2, r3
 2357 008a BB62     		str	r3, [r7, #40]
 2358 008c 27E0     		b	.L129
 2359              	.L128:
 639:modem.c       ****         }else if(sscanf(network_time,"%d/%d/%d,%d:%d:%d+%d",&year,&month,&day,&hour,&minute,&second
 2360              		.loc 1 639 0
 2361 008e 07F13C01 		add	r1, r7, #60
 2362 0092 07F14002 		add	r2, r7, #64
 2363 0096 07F14400 		add	r0, r7, #68
 2364 009a 07F12803 		add	r3, r7, #40
 2365 009e 0493     		str	r3, [sp, #16]
 2366 00a0 07F12C03 		add	r3, r7, #44
 2367 00a4 0393     		str	r3, [sp, #12]
 2368 00a6 07F13003 		add	r3, r7, #48
 2369 00aa 0293     		str	r3, [sp, #8]
 2370 00ac 07F13403 		add	r3, r7, #52
 2371 00b0 0193     		str	r3, [sp, #4]
 2372 00b2 07F13803 		add	r3, r7, #56
 2373 00b6 0093     		str	r3, [sp]
 2374 00b8 0B46     		mov	r3, r1
 2375 00ba 1F49     		ldr	r1, .L131+32
 2376 00bc FFF7FEFF 		bl	sscanf
 2377 00c0 0346     		mov	r3, r0
 2378 00c2 072B     		cmp	r3, #7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 58


 2379 00c4 05D1     		bne	.L130
 640:modem.c       ****             gmt_offset = gmt_offset*(-900);
 2380              		.loc 1 640 0
 2381 00c6 BB6A     		ldr	r3, [r7, #40]
 2382 00c8 1C4A     		ldr	r2, .L131+36
 2383 00ca 02FB03F3 		mul	r3, r2, r3
 2384 00ce BB62     		str	r3, [r7, #40]
 2385 00d0 05E0     		b	.L129
 2386              	.L130:
 641:modem.c       ****         }else{
 642:modem.c       ****             printNotif(NOTIF_TYPE_ERROR,"Could not parse modem time.");
 2387              		.loc 1 642 0
 2388 00d2 1B49     		ldr	r1, .L131+40
 2389 00d4 0220     		movs	r0, #2
 2390 00d6 FFF7FEFF 		bl	printNotif
 643:modem.c       ****             return 0;  // Return 0 if cannot get time 
 2391              		.loc 1 643 0
 2392 00da 0023     		movs	r3, #0
 2393 00dc 18E0     		b	.L126
 2394              	.L129:
 644:modem.c       ****         }
 645:modem.c       ****         
 646:modem.c       ****         // Sets each variable to the correct time 
 647:modem.c       ****         t.tm_sec = second;
 2395              		.loc 1 647 0
 2396 00de FB6A     		ldr	r3, [r7, #44]
 2397 00e0 7B60     		str	r3, [r7, #4]
 648:modem.c       ****         t.tm_min = minute;
 2398              		.loc 1 648 0
 2399 00e2 3B6B     		ldr	r3, [r7, #48]
 2400 00e4 BB60     		str	r3, [r7, #8]
 649:modem.c       ****         t.tm_hour = hour;
 2401              		.loc 1 649 0
 2402 00e6 7B6B     		ldr	r3, [r7, #52]
 2403 00e8 FB60     		str	r3, [r7, #12]
 650:modem.c       ****         t.tm_year = year + 100;    // Year since 1900
 2404              		.loc 1 650 0
 2405 00ea 3B6C     		ldr	r3, [r7, #64]
 2406 00ec 6433     		adds	r3, r3, #100
 2407 00ee BB61     		str	r3, [r7, #24]
 651:modem.c       ****         t.tm_mon = month-1;        // Month, where 0 = jan
 2408              		.loc 1 651 0
 2409 00f0 FB6B     		ldr	r3, [r7, #60]
 2410 00f2 013B     		subs	r3, r3, #1
 2411 00f4 7B61     		str	r3, [r7, #20]
 652:modem.c       ****         t.tm_mday = day;           // Day of the month
 2412              		.loc 1 652 0
 2413 00f6 BB6B     		ldr	r3, [r7, #56]
 2414 00f8 3B61     		str	r3, [r7, #16]
 653:modem.c       ****         t.tm_isdst = 0;            // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 2415              		.loc 1 653 0
 2416 00fa 0023     		movs	r3, #0
 2417 00fc 7B62     		str	r3, [r7, #36]
 654:modem.c       ****     
 655:modem.c       ****         // Set variable epoch-time to be equal to the local time plus the GMT offset
 656:modem.c       ****         // the mktime function converts a broken-down local time (pointed to by timeptr) and return
 657:modem.c       ****         epoch_time = mktime(&t) + gmt_offset;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 59


 2418              		.loc 1 657 0
 2419 00fe 3B1D     		adds	r3, r7, #4
 2420 0100 1846     		mov	r0, r3
 2421 0102 FFF7FEFF 		bl	mktime
 2422 0106 0246     		mov	r2, r0
 2423 0108 BB6A     		ldr	r3, [r7, #40]
 2424 010a 1344     		add	r3, r3, r2
 2425 010c 7B66     		str	r3, [r7, #100]
 2426              	.L127:
 2427              	.LBE12:
 658:modem.c       ****     }
 659:modem.c       ****     
 660:modem.c       ****     return epoch_time;
 2428              		.loc 1 660 0
 2429 010e 7B6E     		ldr	r3, [r7, #100]
 2430              	.L126:
 661:modem.c       **** }
 2431              		.loc 1 661 0
 2432 0110 1846     		mov	r0, r3
 2433 0112 6837     		adds	r7, r7, #104
 2434              		.cfi_def_cfa_offset 8
 2435 0114 BD46     		mov	sp, r7
 2436              		.cfi_def_cfa_register 13
 2437              		@ sp needed
 2438 0116 80BD     		pop	{r7, pc}
 2439              	.L132:
 2440              		.align	2
 2441              	.L131:
 2442 0118 00000000 		.word	modem_state
 2443 011c 38060000 		.word	.LC65
 2444 0120 00000000 		.word	.LC0
 2445 0124 70060000 		.word	.LC66
 2446 0128 7C060000 		.word	.LC67
 2447 012c 80060000 		.word	.LC68
 2448 0130 00000000 		.word	uart_received_string
 2449 0134 84060000 		.word	.LC69
 2450 0138 9C060000 		.word	.LC70
 2451 013c 7CFCFFFF 		.word	-900
 2452 0140 B4060000 		.word	.LC71
 2453              		.cfi_endproc
 2454              	.LFE83:
 2455              		.size	modem_get_network_time, .-modem_get_network_time
 2456              		.section	.text.modem_get_state,"ax",%progbits
 2457              		.align	2
 2458              		.global	modem_get_state
 2459              		.thumb
 2460              		.thumb_func
 2461              		.type	modem_get_state, %function
 2462              	modem_get_state:
 2463              	.LFB84:
 662:modem.c       **** 
 663:modem.c       **** // Get the modem state
 664:modem.c       **** uint8 modem_get_state(){
 2464              		.loc 1 664 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 60


 2468              		@ link register save eliminated.
 2469 0000 80B4     		push	{r7}
 2470              		.cfi_def_cfa_offset 4
 2471              		.cfi_offset 7, -4
 2472 0002 00AF     		add	r7, sp, #0
 2473              		.cfi_def_cfa_register 7
 665:modem.c       ****     return modem_state;
 2474              		.loc 1 665 0
 2475 0004 024B     		ldr	r3, .L135
 2476 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 666:modem.c       **** }
 2477              		.loc 1 666 0
 2478 0008 1846     		mov	r0, r3
 2479 000a BD46     		mov	sp, r7
 2480              		.cfi_def_cfa_register 13
 2481              		@ sp needed
 2482 000c 80BC     		pop	{r7}
 2483              		.cfi_restore 7
 2484              		.cfi_def_cfa_offset 0
 2485 000e 7047     		bx	lr
 2486              	.L136:
 2487              		.align	2
 2488              	.L135:
 2489 0010 00000000 		.word	modem_state
 2490              		.cfi_endproc
 2491              	.LFE84:
 2492              		.size	modem_get_state, .-modem_get_state
 2493              		.section	.text.modem_sleep,"ax",%progbits
 2494              		.align	2
 2495              		.global	modem_sleep
 2496              		.thumb
 2497              		.thumb_func
 2498              		.type	modem_sleep, %function
 2499              	modem_sleep:
 2500              	.LFB85:
 667:modem.c       **** 
 668:modem.c       **** // Set modem to sleep
 669:modem.c       **** void modem_sleep(){
 2501              		.loc 1 669 0
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 1, uses_anonymous_args = 0
 2505 0000 80B5     		push	{r7, lr}
 2506              		.cfi_def_cfa_offset 8
 2507              		.cfi_offset 7, -8
 2508              		.cfi_offset 14, -4
 2509 0002 00AF     		add	r7, sp, #0
 2510              		.cfi_def_cfa_register 7
 670:modem.c       ****     // If the modem_state is not "off" then put it to sleep
 671:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2511              		.loc 1 671 0
 2512 0004 FFF7FEFF 		bl	modem_get_state
 2513 0008 0346     		mov	r3, r0
 2514 000a 002B     		cmp	r3, #0
 2515 000c 03D0     		beq	.L139
 672:modem.c       **** 
 673:modem.c       ****         Telit_ControlReg_Sleep(); // Prepares the modem for entering the low power mode.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 61


 2516              		.loc 1 673 0
 2517 000e FFF7FEFF 		bl	Telit_ControlReg_Sleep
 674:modem.c       ****         UART_Telit_Sleep(); // Saves the current component state, calls the UART_Telit_Stop() funct
 2518              		.loc 1 674 0
 2519 0012 FFF7FEFF 		bl	UART_Telit_Sleep
 2520              	.L139:
 675:modem.c       ****         
 676:modem.c       ****         // Set interrupt on RX pin to wakeup chip from sleep if UART comm starts
 677:modem.c       ****        // Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_FALLING);
 678:modem.c       ****      }
 679:modem.c       **** }
 2521              		.loc 1 679 0
 2522 0016 00BF     		nop
 2523 0018 80BD     		pop	{r7, pc}
 2524              		.cfi_endproc
 2525              	.LFE85:
 2526              		.size	modem_sleep, .-modem_sleep
 2527 001a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2528              		.align	2
 2529              		.global	modem_wakeup
 2530              		.thumb
 2531              		.thumb_func
 2532              		.type	modem_wakeup, %function
 2533              	modem_wakeup:
 2534              	.LFB86:
 680:modem.c       **** 
 681:modem.c       **** // Wakeup the modem
 682:modem.c       **** void modem_wakeup(){
 2535              		.loc 1 682 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 1, uses_anonymous_args = 0
 2539 0000 80B5     		push	{r7, lr}
 2540              		.cfi_def_cfa_offset 8
 2541              		.cfi_offset 7, -8
 2542              		.cfi_offset 14, -4
 2543 0002 00AF     		add	r7, sp, #0
 2544              		.cfi_def_cfa_register 7
 683:modem.c       ****     // If modem state is not off then wake it up
 684:modem.c       ****     if(modem_get_state() != MODEM_STATE_OFF){
 2545              		.loc 1 684 0
 2546 0004 FFF7FEFF 		bl	modem_get_state
 2547 0008 0346     		mov	r3, r0
 2548 000a 002B     		cmp	r3, #0
 2549 000c 0BD0     		beq	.L142
 685:modem.c       ****         Telit_ControlReg_Wakeup(); // Restores the modem after waking up from the low power mode.
 2550              		.loc 1 685 0
 2551 000e FFF7FEFF 		bl	Telit_ControlReg_Wakeup
 686:modem.c       ****         // Calls the UART_Telit_RestoreConfig() function to restore the configuration.
 687:modem.c       ****         // If the modem was enabled before the UART_Telit_Sleep() function was called, the UART_Tel
 688:modem.c       ****         UART_Telit_Wakeup();
 2552              		.loc 1 688 0
 2553 0012 FFF7FEFF 		bl	UART_Telit_Wakeup
 689:modem.c       ****         // Remove the need for this pin itterupt
 690:modem.c       ****         //Rx_Telit_SetInterruptMode(Rx_Telit_0_INTR,Rx_Telit_INTR_NONE);
 691:modem.c       ****         
 692:modem.c       ****         // If woken up from pin, go ahead and delay for 100ms to allow modem UART to deliver the me
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 62


 693:modem.c       ****         if(modem_get_state() == MODEM_STATE_WAITING_FOR_IP){
 2554              		.loc 1 693 0
 2555 0016 FFF7FEFF 		bl	modem_get_state
 2556 001a 0346     		mov	r3, r0
 2557 001c 032B     		cmp	r3, #3
 2558 001e 02D1     		bne	.L142
 694:modem.c       ****             CyDelay(100u);
 2559              		.loc 1 694 0
 2560 0020 6420     		movs	r0, #100
 2561 0022 FFF7FEFF 		bl	CyDelay
 2562              	.L142:
 695:modem.c       ****         }
 696:modem.c       ****      }
 697:modem.c       **** }
 2563              		.loc 1 697 0
 2564 0026 00BF     		nop
 2565 0028 80BD     		pop	{r7, pc}
 2566              		.cfi_endproc
 2567              	.LFE86:
 2568              		.size	modem_wakeup, .-modem_wakeup
 2569 002a 00BF     		.section	.rodata
 2570              		.align	2
 2571              	.LC72:
 2572 06d0 41542347 		.ascii	"AT#GPIO=5,1,1,0\015\000"
 2572      50494F3D 
 2572      352C312C 
 2572      312C300D 
 2572      00
 2573 06e1 000000   		.align	2
 2574              	.LC73:
 2575 06e4 41542453 		.ascii	"AT$SUPLSEC=1\015\000"
 2575      55504C53 
 2575      45433D31 
 2575      0D00
 2576 06f2 0000     		.align	2
 2577              	.LC74:
 2578 06f4 41542453 		.ascii	"AT$SUPLV=2\015\000"
 2578      55504C56 
 2578      3D320D00 
 2579              		.align	2
 2580              	.LC75:
 2581 0700 41542441 		.ascii	"AT$AGPSEN=1\015\000"
 2581      47505345 
 2581      4E3D310D 
 2581      00
 2582 070d 000000   		.align	2
 2583              	.LC76:
 2584 0710 41542453 		.ascii	"AT$SLP=1,\"supl.google.com:7275\"\015\000"
 2584      4C503D31 
 2584      2C227375 
 2584      706C2E67 
 2584      6F6F676C 
 2585 0731 000000   		.align	2
 2586              	.LC77:
 2587 0734 41542353 		.ascii	"AT#SGACT=1,0\015\012\000"
 2587      47414354 
 2587      3D312C30 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 63


 2587      0D0A00
 2588 0743 00       		.align	2
 2589              	.LC78:
 2590 0744 4154244C 		.ascii	"AT$LCSLK=1,1\015\000"
 2590      43534C4B 
 2590      3D312C31 
 2590      0D00
 2591 0752 0000     		.align	2
 2592              	.LC79:
 2593 0754 41542447 		.ascii	"AT$GPSSLSR=1,1,,,,,2\015\000"
 2593      5053534C 
 2593      53523D31 
 2593      2C312C2C 
 2593      2C2C2C32 
 2594 076a 0000     		.align	2
 2595              	.LC80:
 2596 076c 4E00     		.ascii	"N\000"
 2597 076e 0000     		.align	2
 2598              	.LC81:
 2599 0770 41542447 		.ascii	"AT$GPSACP\015\000"
 2599      50534143 
 2599      500D00
 2600 077b 00       		.align	2
 2601              	.LC82:
 2602 077c 24475053 		.ascii	"$GPSACP: \000"
 2602      4143503A 
 2602      2000
 2603 0786 0000     		.align	2
 2604              	.LC83:
 2605 0788 24475053 		.ascii	"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s\000"
 2605      4143503A 
 2605      20252A66 
 2605      2C25664E 
 2605      2C256657 
 2606              		.global	__aeabi_fdiv
 2607              		.global	__aeabi_f2d
 2608              		.global	__aeabi_ddiv
 2609              		.global	__aeabi_dadd
 2610              		.align	2
 2611              	.LC84:
 2612 07a8 41542347 		.ascii	"AT#GPIO=5,0,1,0\015\000"
 2612      50494F3D 
 2612      352C302C 
 2612      312C300D 
 2612      00
 2613 07b9 000000   		.align	2
 2614              	.LC85:
 2615 07bc 41542447 		.ascii	"AT$GPSR=0\015\000"
 2615      5053523D 
 2615      300D00
 2616 07c7 00       		.align	2
 2617              	.LC86:
 2618 07c8 54696D65 		.ascii	"Time to lock GPS: %d\000"
 2618      20746F20 
 2618      6C6F636B 
 2618      20475053 
 2618      3A202564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 64


 2619              		.section	.text.modem_get_gps_coordinates,"ax",%progbits
 2620              		.align	2
 2621              		.global	modem_get_gps_coordinates
 2622              		.thumb
 2623              		.thumb_func
 2624              		.type	modem_get_gps_coordinates, %function
 2625              	modem_get_gps_coordinates:
 2626              	.LFB87:
 698:modem.c       **** 
 699:modem.c       ****     
 700:modem.c       **** // Returns lat,lom,alt data from Assited GPS (AGPS) system
 701:modem.c       **** gps_t modem_get_gps_coordinates(){
 2627              		.loc 1 701 0
 2628              		.cfi_startproc
 2629              		@ args = 0, pretend = 0, frame = 56
 2630              		@ frame_needed = 1, uses_anonymous_args = 0
 2631 0000 B0B5     		push	{r4, r5, r7, lr}
 2632              		.cfi_def_cfa_offset 16
 2633              		.cfi_offset 4, -16
 2634              		.cfi_offset 5, -12
 2635              		.cfi_offset 7, -8
 2636              		.cfi_offset 14, -4
 2637 0002 90B0     		sub	sp, sp, #64
 2638              		.cfi_def_cfa_offset 80
 2639 0004 02AF     		add	r7, sp, #8
 2640              		.cfi_def_cfa 7, 72
 2641 0006 7860     		str	r0, [r7, #4]
 702:modem.c       ****     gps_t gps;
 703:modem.c       ****     gps.altitude = 0;
 2642              		.loc 1 703 0
 2643 0008 4FF00003 		mov	r3, #0
 2644 000c FB61     		str	r3, [r7, #28]	@ float
 704:modem.c       ****     gps.longitude = 0;
 2645              		.loc 1 704 0
 2646 000e 4FF00003 		mov	r3, #0
 2647 0012 BB61     		str	r3, [r7, #24]	@ float
 705:modem.c       ****     gps.latitude = 0;
 2648              		.loc 1 705 0
 2649 0014 4FF00003 		mov	r3, #0
 2650 0018 7B61     		str	r3, [r7, #20]	@ float
 706:modem.c       ****     gps.time_to_lock =0;
 2651              		.loc 1 706 0
 2652 001a 0023     		movs	r3, #0
 2653 001c 3B84     		strh	r3, [r7, #32]	@ movhi
 707:modem.c       ****     gps.valid = 0;
 2654              		.loc 1 707 0
 2655 001e 0023     		movs	r3, #0
 2656 0020 87F82230 		strb	r3, [r7, #34]
 708:modem.c       ****     
 709:modem.c       ****     //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 710:modem.c       ****     if(modem_state != MODEM_STATE_READY){
 2657              		.loc 1 710 0
 2658 0024 7F4B     		ldr	r3, .L153
 2659 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2660 0028 042B     		cmp	r3, #4
 2661 002a 07D0     		beq	.L144
 711:modem.c       ****         return gps;//where valid = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 65


 2662              		.loc 1 711 0
 2663 002c 7B68     		ldr	r3, [r7, #4]
 2664 002e 1C46     		mov	r4, r3
 2665 0030 07F11403 		add	r3, r7, #20
 2666 0034 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2667 0036 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2668 003a EFE0     		b	.L143
 2669              	.L144:
 712:modem.c       ****     }
 713:modem.c       ****     
 714:modem.c       ****     long lock_time = getTimeStamp();
 2670              		.loc 1 714 0
 2671 003c FFF7FEFF 		bl	getTimeStamp
 2672 0040 3863     		str	r0, [r7, #48]
 715:modem.c       ****     
 716:modem.c       ****     // Enable this for the LTER module
 717:modem.c       ****     // Enable GPS Low-Dropout Regulator
 718:modem.c       ****     at_write_command("AT#GPIO=5,1,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2673              		.loc 1 718 0
 2674 0042 4FF4FA62 		mov	r2, #2000
 2675 0046 7849     		ldr	r1, .L153+4
 2676 0048 7848     		ldr	r0, .L153+8
 2677 004a FFF7FEFF 		bl	at_write_command
 719:modem.c       ****     
 720:modem.c       ****     // Configure SUPL connection params
 721:modem.c       ****     at_write_command("AT$SUPLSEC=1\r","OK",DEFAULT_AT_TIMEOUT);
 2678              		.loc 1 721 0
 2679 004e 4FF4FA62 		mov	r2, #2000
 2680 0052 7549     		ldr	r1, .L153+4
 2681 0054 7648     		ldr	r0, .L153+12
 2682 0056 FFF7FEFF 		bl	at_write_command
 722:modem.c       ****     
 723:modem.c       ****     // Use SUPL2.0
 724:modem.c       ****     at_write_command("AT$SUPLV=2\r","OK",DEFAULT_AT_TIMEOUT);
 2683              		.loc 1 724 0
 2684 005a 4FF4FA62 		mov	r2, #2000
 2685 005e 7249     		ldr	r1, .L153+4
 2686 0060 7448     		ldr	r0, .L153+16
 2687 0062 FFF7FEFF 		bl	at_write_command
 725:modem.c       ****     
 726:modem.c       ****     // Enable AGPS service
 727:modem.c       ****     at_write_command("AT$AGPSEN=1\r","OK",DEFAULT_AT_TIMEOUT);
 2688              		.loc 1 727 0
 2689 0066 4FF4FA62 		mov	r2, #2000
 2690 006a 6F49     		ldr	r1, .L153+4
 2691 006c 7248     		ldr	r0, .L153+20
 2692 006e FFF7FEFF 		bl	at_write_command
 728:modem.c       ****     
 729:modem.c       ****     // Chose SUPL server, use google public service
 730:modem.c       ****     at_write_command("AT$SLP=1,\"supl.google.com:7275\"\r","OK",DEFAULT_AT_TIMEOUT);
 2693              		.loc 1 730 0
 2694 0072 4FF4FA62 		mov	r2, #2000
 2695 0076 6C49     		ldr	r1, .L153+4
 2696 0078 7048     		ldr	r0, .L153+24
 2697 007a FFF7FEFF 		bl	at_write_command
 731:modem.c       ****     
 732:modem.c       ****     //pdp context has to be locked to carrier for this to work
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 66


 733:modem.c       ****     
 734:modem.c       ****     // Unlock context since it needs to be used by modem
 735:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 2698              		.loc 1 735 0
 2699 007e 4FF4FA62 		mov	r2, #2000
 2700 0082 6949     		ldr	r1, .L153+4
 2701 0084 6E48     		ldr	r0, .L153+28
 2702 0086 FFF7FEFF 		bl	at_write_command
 736:modem.c       ****     
 737:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",DEFAULT_AT_TIMEOUT);//ATT
 2703              		.loc 1 737 0
 2704 008a 4FF4FA62 		mov	r2, #2000
 2705 008e 6649     		ldr	r1, .L153+4
 2706 0090 6C48     		ldr	r0, .L153+32
 2707 0092 FFF7FEFF 		bl	at_write_command
 738:modem.c       ****     //at_write_command("AT$LCSLK=1,3\r","OK",DEFAULT_AT_TIMEOUT);//Verizon
 739:modem.c       ****     
 740:modem.c       ****     // Relock the context
 741:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 2708              		.loc 1 741 0
 2709 0096 42F21072 		movw	r2, #10000
 2710 009a 6349     		ldr	r1, .L153+4
 2711 009c 6A48     		ldr	r0, .L153+36
 2712 009e FFF7FEFF 		bl	at_write_command
 742:modem.c       ****     
 743:modem.c       ****     //start AGPS service
 744:modem.c       ****     at_write_command("AT$GPSSLSR=1,1,,,,,2\r","OK",DEFAULT_AT_TIMEOUT); 
 2713              		.loc 1 744 0
 2714 00a2 4FF4FA62 		mov	r2, #2000
 2715 00a6 6049     		ldr	r1, .L153+4
 2716 00a8 6848     		ldr	r0, .L153+40
 2717 00aa FFF7FEFF 		bl	at_write_command
 745:modem.c       ****     
 746:modem.c       ****     
 747:modem.c       ****     // Start the AGPS service
 748:modem.c       ****     // Will keep receiving a buynch of commas without numbers, until GPS locks
 749:modem.c       ****     // Good lock will return a string with "N" and "W" coordinates
 750:modem.c       ****     
 751:modem.c       ****     
 752:modem.c       ****  
 753:modem.c       ****     uint8 gps_status = 0;
 2718              		.loc 1 753 0
 2719 00ae 0023     		movs	r3, #0
 2720 00b0 87F82F30 		strb	r3, [r7, #47]
 2721              	.LBB13:
 754:modem.c       ****     for(uint16 i=0;i<200;i++){
 2722              		.loc 1 754 0
 2723 00b4 0023     		movs	r3, #0
 2724 00b6 FB86     		strh	r3, [r7, #54]	@ movhi
 2725 00b8 13E0     		b	.L146
 2726              	.L149:
 755:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2727              		.loc 1 755 0
 2728 00ba 4FF4FA62 		mov	r2, #2000
 2729 00be 6449     		ldr	r1, .L153+44
 2730 00c0 6448     		ldr	r0, .L153+48
 2731 00c2 FFF7FEFF 		bl	at_write_command
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 67


 2732 00c6 0346     		mov	r3, r0
 2733 00c8 87F82F30 		strb	r3, [r7, #47]
 756:modem.c       ****         if(gps_status){
 2734              		.loc 1 756 0
 2735 00cc 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2736 00d0 002B     		cmp	r3, #0
 2737 00d2 0AD1     		bne	.L152
 757:modem.c       ****             break;   
 758:modem.c       ****         }
 759:modem.c       ****         CyDelay(1000u);// Wait for a second -- BLOCKING. Could be more elegant to incorporate this 
 2738              		.loc 1 759 0 discriminator 2
 2739 00d4 4FF47A70 		mov	r0, #1000
 2740 00d8 FFF7FEFF 		bl	CyDelay
 754:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2741              		.loc 1 754 0 discriminator 2
 2742 00dc FB8E     		ldrh	r3, [r7, #54]
 2743 00de 0133     		adds	r3, r3, #1
 2744 00e0 FB86     		strh	r3, [r7, #54]	@ movhi
 2745              	.L146:
 754:modem.c       ****         gps_status = at_write_command("AT$GPSACP\r","N",DEFAULT_AT_TIMEOUT);//ATT
 2746              		.loc 1 754 0 is_stmt 0 discriminator 1
 2747 00e2 FB8E     		ldrh	r3, [r7, #54]
 2748 00e4 C72B     		cmp	r3, #199
 2749 00e6 E8D9     		bls	.L149
 2750 00e8 00E0     		b	.L148
 2751              	.L152:
 757:modem.c       ****             break;   
 2752              		.loc 1 757 0 is_stmt 1
 2753 00ea 00BF     		nop
 2754              	.L148:
 2755              	.LBE13:
 760:modem.c       ****     }
 761:modem.c       ****     
 762:modem.c       ****     //parse data here
 763:modem.c       ****     
 764:modem.c       ****     //example $GPSACP: 210926.000,4217.8003N,08341.3158W,2.3,258.2,3,17.8,4.8,2.6,220520,05,00
 765:modem.c       ****     float lat;
 766:modem.c       ****     float lon;
 767:modem.c       ****     float alt;
 768:modem.c       ****     
 769:modem.c       ****     // Look for $GPSACP:  in uart_received_string and save to sl
 770:modem.c       ****     // char *strstr(const char *haystack, const char *needle) function finds the first occurrence o
 771:modem.c       ****     char *s1 = strstr(uart_received_string,"$GPSACP: ");
 2756              		.loc 1 771 0
 2757 00ec 5A49     		ldr	r1, .L153+52
 2758 00ee 5B48     		ldr	r0, .L153+56
 2759 00f0 FFF7FEFF 		bl	strstr
 2760 00f4 B862     		str	r0, [r7, #40]
 772:modem.c       ****     // Look in sl for lat, long, alt and save in match 
 773:modem.c       ****     // int sscanf(const char *str, const char *format, ...) reads formatted input from a string.
 774:modem.c       ****     int match = sscanf(s1,"$GPSACP: %*f,%fN,%fW,%*f,%f,%*s",&lat,&lon,&alt);
 2761              		.loc 1 774 0
 2762 00f6 07F10C01 		add	r1, r7, #12
 2763 00fa 07F11002 		add	r2, r7, #16
 2764 00fe 07F10803 		add	r3, r7, #8
 2765 0102 0093     		str	r3, [sp]
 2766 0104 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 68


 2767 0106 5649     		ldr	r1, .L153+60
 2768 0108 B86A     		ldr	r0, [r7, #40]
 2769 010a FFF7FEFF 		bl	sscanf
 2770 010e 7862     		str	r0, [r7, #36]
 775:modem.c       ****     if(match >= 3){
 2771              		.loc 1 775 0
 2772 0110 7B6A     		ldr	r3, [r7, #36]
 2773 0112 022B     		cmp	r3, #2
 2774 0114 60DD     		ble	.L150
 776:modem.c       ****         // Calculate lat and lon
 777:modem.c       ****         // floorf(x) calculates the largest integer that is less than or equal to x. 
 778:modem.c       ****         // fmod(double x, double y) returns the remainder of x divided by y.
 779:modem.c       ****         lat = floorf(lat/100) + fmod(lat,100)/60;
 2775              		.loc 1 779 0
 2776 0116 3B69     		ldr	r3, [r7, #16]	@ float
 2777 0118 5249     		ldr	r1, .L153+64
 2778 011a 1846     		mov	r0, r3
 2779 011c FFF7FEFF 		bl	__aeabi_fdiv
 2780 0120 0346     		mov	r3, r0
 2781 0122 1846     		mov	r0, r3
 2782 0124 FFF7FEFF 		bl	floorf
 2783 0128 0346     		mov	r3, r0
 2784 012a 1846     		mov	r0, r3
 2785 012c FFF7FEFF 		bl	__aeabi_f2d
 2786 0130 0446     		mov	r4, r0
 2787 0132 0D46     		mov	r5, r1
 2788 0134 3B69     		ldr	r3, [r7, #16]	@ float
 2789 0136 1846     		mov	r0, r3
 2790 0138 FFF7FEFF 		bl	__aeabi_f2d
 2791 013c 4FF00002 		mov	r2, #0
 2792 0140 494B     		ldr	r3, .L153+68
 2793 0142 FFF7FEFF 		bl	fmod
 2794 0146 4FF00002 		mov	r2, #0
 2795 014a 484B     		ldr	r3, .L153+72
 2796 014c FFF7FEFF 		bl	__aeabi_ddiv
 2797 0150 0246     		mov	r2, r0
 2798 0152 0B46     		mov	r3, r1
 2799 0154 2046     		mov	r0, r4
 2800 0156 2946     		mov	r1, r5
 2801 0158 FFF7FEFF 		bl	__aeabi_dadd
 2802 015c 0346     		mov	r3, r0
 2803 015e 0C46     		mov	r4, r1
 2804 0160 1846     		mov	r0, r3
 2805 0162 2146     		mov	r1, r4
 2806 0164 FFF7FEFF 		bl	__aeabi_d2f
 2807 0168 0346     		mov	r3, r0
 2808 016a 3B61     		str	r3, [r7, #16]	@ float
 780:modem.c       ****         lon = -(floorf(lon/100) + fmod(lon,100)/60);
 2809              		.loc 1 780 0
 2810 016c FB68     		ldr	r3, [r7, #12]	@ float
 2811 016e 3D49     		ldr	r1, .L153+64
 2812 0170 1846     		mov	r0, r3
 2813 0172 FFF7FEFF 		bl	__aeabi_fdiv
 2814 0176 0346     		mov	r3, r0
 2815 0178 1846     		mov	r0, r3
 2816 017a FFF7FEFF 		bl	floorf
 2817 017e 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 69


 2818 0180 1846     		mov	r0, r3
 2819 0182 FFF7FEFF 		bl	__aeabi_f2d
 2820 0186 0446     		mov	r4, r0
 2821 0188 0D46     		mov	r5, r1
 2822 018a FB68     		ldr	r3, [r7, #12]	@ float
 2823 018c 1846     		mov	r0, r3
 2824 018e FFF7FEFF 		bl	__aeabi_f2d
 2825 0192 4FF00002 		mov	r2, #0
 2826 0196 344B     		ldr	r3, .L153+68
 2827 0198 FFF7FEFF 		bl	fmod
 2828 019c 4FF00002 		mov	r2, #0
 2829 01a0 324B     		ldr	r3, .L153+72
 2830 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 2831 01a6 0246     		mov	r2, r0
 2832 01a8 0B46     		mov	r3, r1
 2833 01aa 2046     		mov	r0, r4
 2834 01ac 2946     		mov	r1, r5
 2835 01ae FFF7FEFF 		bl	__aeabi_dadd
 2836 01b2 0346     		mov	r3, r0
 2837 01b4 0C46     		mov	r4, r1
 2838 01b6 1846     		mov	r0, r3
 2839 01b8 2146     		mov	r1, r4
 2840 01ba FFF7FEFF 		bl	__aeabi_d2f
 2841 01be 0346     		mov	r3, r0
 2842 01c0 83F00043 		eor	r3, r3, #-2147483648
 2843 01c4 FB60     		str	r3, [r7, #12]	@ float
 781:modem.c       ****         gps.altitude = alt; // Save alt, lat, and lon to the variable gps.
 2844              		.loc 1 781 0
 2845 01c6 BB68     		ldr	r3, [r7, #8]	@ float
 2846 01c8 FB61     		str	r3, [r7, #28]	@ float
 782:modem.c       ****         gps.latitude = lat;
 2847              		.loc 1 782 0
 2848 01ca 3B69     		ldr	r3, [r7, #16]	@ float
 2849 01cc 7B61     		str	r3, [r7, #20]	@ float
 783:modem.c       ****         gps.longitude = lon;
 2850              		.loc 1 783 0
 2851 01ce FB68     		ldr	r3, [r7, #12]	@ float
 2852 01d0 BB61     		str	r3, [r7, #24]	@ float
 784:modem.c       ****         gps.valid = 1;
 2853              		.loc 1 784 0
 2854 01d2 0123     		movs	r3, #1
 2855 01d4 87F82230 		strb	r3, [r7, #34]
 2856              	.L150:
 785:modem.c       ****     }
 786:modem.c       ****     
 787:modem.c       ****     // Disable LDO, just in case
 788:modem.c       ****     at_write_command("AT#GPIO=5,0,1,0\r","OK",DEFAULT_AT_TIMEOUT);
 2857              		.loc 1 788 0
 2858 01d8 4FF4FA62 		mov	r2, #2000
 2859 01dc 1249     		ldr	r1, .L153+4
 2860 01de 2448     		ldr	r0, .L153+76
 2861 01e0 FFF7FEFF 		bl	at_write_command
 789:modem.c       ****     
 790:modem.c       ****     // Flush modem's GPS data, just in case
 791:modem.c       ****     at_write_command("AT$GPSR=0\r","OK",DEFAULT_AT_TIMEOUT);
 2862              		.loc 1 791 0
 2863 01e4 4FF4FA62 		mov	r2, #2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 70


 2864 01e8 0F49     		ldr	r1, .L153+4
 2865 01ea 2248     		ldr	r0, .L153+80
 2866 01ec FFF7FEFF 		bl	at_write_command
 792:modem.c       ****     
 793:modem.c       ****     
 794:modem.c       ****     
 795:modem.c       ****     
 796:modem.c       ****     
 797:modem.c       ****     /* Relevant to 3g modem, can ignore
 798:modem.c       ****     
 799:modem.c       ****     //Setthe GPS Quality of Servicep arameters. Inorder,theyare<horiz_accuracy(inmeters)>,<vertical
 800:modem.c       ****     //AT$GPSQOS=50,50,100,0
 801:modem.c       ****     at_write_command("AT$GPSQOS=50,50,100,0\r","OK",DEFAULT_AT_TIMEOUT);
 802:modem.c       ****     
 803:modem.c       ****     //SettheSUPLLocationPlatform(SLP)addressoftheserverthatwillprovidetheA-GPS data:
 804:modem.c       ****     at_write_command("AT$LCSSLP=1,\"supl.google.com\"\r","OK",DEFAULT_AT_TIMEOUT);
 805:modem.c       ****     
 806:modem.c       ****     //unlock contedt, simnce its being used by modem
 807:modem.c       ****     at_write_command("AT#SGACT=1,0\r\n", "OK",DEFAULT_AT_TIMEOUT);
 808:modem.c       ****     //Lock context 1 for LoCation Services (LCS) use only
 809:modem.c       ****     at_write_command("AT$LCSLK=1,1\r","OK",5000u);
 810:modem.c       ****     
 811:modem.c       ****     //unlock contedt, simnce its being used by modem
 812:modem.c       ****     at_write_command("AT#SGACT=1,1\r\n", "OK",10000u);
 813:modem.c       ****     
 814:modem.c       ****     //EnableunsolicitedNMEAGPSdataintheformatof<NMEASENTENCE><CR>
 815:modem.c       ****     at_write_command("AT$GPSNMUN=2,1,0,0,0,0,0\r","OK",DEFAULT_AT_TIMEOUT);
 816:modem.c       ****     
 817:modem.c       ****     //StartGPSlocationservicerequest.Sendingthiscommandsets$GPSP=1
 818:modem.c       ****    uint8 gps_status = 0;
 819:modem.c       ****     for(uint16 i=0;i<200;i++){
 820:modem.c       ****         gps_status = at_write_command("AT$GPSSLSR=1,1,,,,,0,255\r","N",3000u);
 821:modem.c       ****         if(gps_status){
 822:modem.c       ****             break;   
 823:modem.c       ****         }
 824:modem.c       ****   }
 825:modem.c       ****     
 826:modem.c       ****     //$GPGGA,030307.691,4217.7923,N,08341.3240,W,1,05,2.25,225.0,M,,M,,0000*6E
 827:modem.c       ****     //$GPGGA,213852.000,4600.8755,N,09327.7008,W,1,05,3.00,292.0,M,,M,,0000*6E
 828:modem.c       ****     if(gps_status){
 829:modem.c       ****         float lat,lon,alt = 0;
 830:modem.c       ****         if(sscanf(uart_received_string,"%*s,%f,N,%f,W,%*s",&lat,&lon) > 0){
 831:modem.c       ****             gps.altitude = alt;
 832:modem.c       ****             gps.latitude = lat/60;
 833:modem.c       ****             gps.longitude = lon/60;
 834:modem.c       ****             gps.valid = 1;
 835:modem.c       ****         }
 836:modem.c       ****         
 837:modem.c       ****     }
 838:modem.c       ****     
 839:modem.c       ****     //turn off gps
 840:modem.c       ****     //AT$GPSP=0
 841:modem.c       ****     at_write_command("AT$GPSP=0\r","OK",DEFAULT_AT_TIMEOUT);
 842:modem.c       ****     
 843:modem.c       ****     */
 844:modem.c       **** 
 845:modem.c       ****     // Calculate time to lock into GPS location and save in variable lock_time
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 71


 846:modem.c       ****     lock_time = getTimeStamp() - lock_time;
 2867              		.loc 1 846 0
 2868 01f0 FFF7FEFF 		bl	getTimeStamp
 2869 01f4 0246     		mov	r2, r0
 2870 01f6 3B6B     		ldr	r3, [r7, #48]
 2871 01f8 D31A     		subs	r3, r2, r3
 2872 01fa 3B63     		str	r3, [r7, #48]
 847:modem.c       ****     gps.time_to_lock = lock_time;
 2873              		.loc 1 847 0
 2874 01fc 3B6B     		ldr	r3, [r7, #48]
 2875 01fe 9BB2     		uxth	r3, r3
 2876 0200 3B84     		strh	r3, [r7, #32]	@ movhi
 848:modem.c       ****     printNotif(NOTIF_TYPE_EVENT,"Time to lock GPS: %d", gps.time_to_lock);
 2877              		.loc 1 848 0
 2878 0202 3B8C     		ldrh	r3, [r7, #32]
 2879 0204 1A46     		mov	r2, r3
 2880 0206 1C49     		ldr	r1, .L153+84
 2881 0208 0020     		movs	r0, #0
 2882 020a FFF7FEFF 		bl	printNotif
 849:modem.c       ****     
 850:modem.c       ****     return gps;
 2883              		.loc 1 850 0
 2884 020e 7B68     		ldr	r3, [r7, #4]
 2885 0210 1C46     		mov	r4, r3
 2886 0212 07F11403 		add	r3, r7, #20
 2887 0216 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2888 0218 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2889              	.L143:
 851:modem.c       ****     
 852:modem.c       **** }
 2890              		.loc 1 852 0
 2891 021c 7868     		ldr	r0, [r7, #4]
 2892 021e 3837     		adds	r7, r7, #56
 2893              		.cfi_def_cfa_offset 16
 2894 0220 BD46     		mov	sp, r7
 2895              		.cfi_def_cfa_register 13
 2896              		@ sp needed
 2897 0222 B0BD     		pop	{r4, r5, r7, pc}
 2898              	.L154:
 2899              		.align	2
 2900              	.L153:
 2901 0224 00000000 		.word	modem_state
 2902 0228 00000000 		.word	.LC0
 2903 022c D0060000 		.word	.LC72
 2904 0230 E4060000 		.word	.LC73
 2905 0234 F4060000 		.word	.LC74
 2906 0238 00070000 		.word	.LC75
 2907 023c 10070000 		.word	.LC76
 2908 0240 34070000 		.word	.LC77
 2909 0244 44070000 		.word	.LC78
 2910 0248 D8020000 		.word	.LC27
 2911 024c 54070000 		.word	.LC79
 2912 0250 6C070000 		.word	.LC80
 2913 0254 70070000 		.word	.LC81
 2914 0258 7C070000 		.word	.LC82
 2915 025c 00000000 		.word	uart_received_string
 2916 0260 88070000 		.word	.LC83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 72


 2917 0264 0000C842 		.word	1120403456
 2918 0268 00005940 		.word	1079574528
 2919 026c 00004E40 		.word	1078853632
 2920 0270 A8070000 		.word	.LC84
 2921 0274 BC070000 		.word	.LC85
 2922 0278 C8070000 		.word	.LC86
 2923              		.cfi_endproc
 2924              	.LFE87:
 2925              		.size	modem_get_gps_coordinates, .-modem_get_gps_coordinates
 2926              		.text
 2927              	.Letext0:
 2928              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2929              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2930              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2931              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2932              		.file 6 "testing.h"
 2933              		.file 7 "data.h"
 2934              		.file 8 "modem.h"
 2935              		.file 9 "notoriOS.h"
 2936              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 2937              		.section	.debug_info,"",%progbits
 2938              	.Ldebug_info0:
 2939 0000 070C0000 		.4byte	0xc07
 2940 0004 0400     		.2byte	0x4
 2941 0006 00000000 		.4byte	.Ldebug_abbrev0
 2942 000a 04       		.byte	0x4
 2943 000b 01       		.uleb128 0x1
 2944 000c 9C000000 		.4byte	.LASF161
 2945 0010 0C       		.byte	0xc
 2946 0011 0F040000 		.4byte	.LASF162
 2947 0015 28000000 		.4byte	.LASF163
 2948 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 2949 001d 00000000 		.4byte	0
 2950 0021 00000000 		.4byte	.Ldebug_line0
 2951 0025 02       		.uleb128 0x2
 2952 0026 01       		.byte	0x1
 2953 0027 06       		.byte	0x6
 2954 0028 9F010000 		.4byte	.LASF0
 2955 002c 03       		.uleb128 0x3
 2956 002d 70000000 		.4byte	.LASF4
 2957 0031 02       		.byte	0x2
 2958 0032 1D       		.byte	0x1d
 2959 0033 37000000 		.4byte	0x37
 2960 0037 02       		.uleb128 0x2
 2961 0038 01       		.byte	0x1
 2962 0039 08       		.byte	0x8
 2963 003a F0050000 		.4byte	.LASF1
 2964 003e 02       		.uleb128 0x2
 2965 003f 02       		.byte	0x2
 2966 0040 05       		.byte	0x5
 2967 0041 47040000 		.4byte	.LASF2
 2968 0045 02       		.uleb128 0x2
 2969 0046 02       		.byte	0x2
 2970 0047 07       		.byte	0x7
 2971 0048 AD020000 		.4byte	.LASF3
 2972 004c 03       		.uleb128 0x3
 2973 004d 5C040000 		.4byte	.LASF5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 73


 2974 0051 02       		.byte	0x2
 2975 0052 3F       		.byte	0x3f
 2976 0053 57000000 		.4byte	0x57
 2977 0057 02       		.uleb128 0x2
 2978 0058 04       		.byte	0x4
 2979 0059 05       		.byte	0x5
 2980 005a 27020000 		.4byte	.LASF6
 2981 005e 03       		.uleb128 0x3
 2982 005f D0020000 		.4byte	.LASF7
 2983 0063 02       		.byte	0x2
 2984 0064 41       		.byte	0x41
 2985 0065 69000000 		.4byte	0x69
 2986 0069 02       		.uleb128 0x2
 2987 006a 04       		.byte	0x4
 2988 006b 07       		.byte	0x7
 2989 006c 7C030000 		.4byte	.LASF8
 2990 0070 02       		.uleb128 0x2
 2991 0071 08       		.byte	0x8
 2992 0072 05       		.byte	0x5
 2993 0073 91010000 		.4byte	.LASF9
 2994 0077 02       		.uleb128 0x2
 2995 0078 08       		.byte	0x8
 2996 0079 07       		.byte	0x7
 2997 007a 37010000 		.4byte	.LASF10
 2998 007e 04       		.uleb128 0x4
 2999 007f 04       		.byte	0x4
 3000 0080 05       		.byte	0x5
 3001 0081 696E7400 		.ascii	"int\000"
 3002 0085 02       		.uleb128 0x2
 3003 0086 04       		.byte	0x4
 3004 0087 07       		.byte	0x7
 3005 0088 D6060000 		.4byte	.LASF11
 3006 008c 03       		.uleb128 0x3
 3007 008d 0D080000 		.4byte	.LASF12
 3008 0091 03       		.byte	0x3
 3009 0092 18       		.byte	0x18
 3010 0093 2C000000 		.4byte	0x2c
 3011 0097 03       		.uleb128 0x3
 3012 0098 E8050000 		.4byte	.LASF13
 3013 009c 03       		.byte	0x3
 3014 009d 2C       		.byte	0x2c
 3015 009e 4C000000 		.4byte	0x4c
 3016 00a2 03       		.uleb128 0x3
 3017 00a3 9D070000 		.4byte	.LASF14
 3018 00a7 03       		.byte	0x3
 3019 00a8 30       		.byte	0x30
 3020 00a9 5E000000 		.4byte	0x5e
 3021 00ad 05       		.uleb128 0x5
 3022 00ae 5F020000 		.4byte	.LASF15
 3023 00b2 04       		.byte	0x4
 3024 00b3 9201     		.2byte	0x192
 3025 00b5 37000000 		.4byte	0x37
 3026 00b9 05       		.uleb128 0x5
 3027 00ba 0B000000 		.4byte	.LASF16
 3028 00be 04       		.byte	0x4
 3029 00bf 9301     		.2byte	0x193
 3030 00c1 45000000 		.4byte	0x45
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 74


 3031 00c5 05       		.uleb128 0x5
 3032 00c6 C0020000 		.4byte	.LASF17
 3033 00ca 04       		.byte	0x4
 3034 00cb 9401     		.2byte	0x194
 3035 00cd 69000000 		.4byte	0x69
 3036 00d1 05       		.uleb128 0x5
 3037 00d2 15080000 		.4byte	.LASF18
 3038 00d6 04       		.byte	0x4
 3039 00d7 9601     		.2byte	0x196
 3040 00d9 3E000000 		.4byte	0x3e
 3041 00dd 05       		.uleb128 0x5
 3042 00de 6C020000 		.4byte	.LASF19
 3043 00e2 04       		.byte	0x4
 3044 00e3 9701     		.2byte	0x197
 3045 00e5 57000000 		.4byte	0x57
 3046 00e9 02       		.uleb128 0x2
 3047 00ea 04       		.byte	0x4
 3048 00eb 04       		.byte	0x4
 3049 00ec 98050000 		.4byte	.LASF20
 3050 00f0 02       		.uleb128 0x2
 3051 00f1 08       		.byte	0x8
 3052 00f2 04       		.byte	0x4
 3053 00f3 65020000 		.4byte	.LASF21
 3054 00f7 02       		.uleb128 0x2
 3055 00f8 01       		.byte	0x1
 3056 00f9 08       		.byte	0x8
 3057 00fa BD060000 		.4byte	.LASF22
 3058 00fe 02       		.uleb128 0x2
 3059 00ff 08       		.byte	0x8
 3060 0100 04       		.byte	0x4
 3061 0101 B1060000 		.4byte	.LASF23
 3062 0105 02       		.uleb128 0x2
 3063 0106 04       		.byte	0x4
 3064 0107 07       		.byte	0x7
 3065 0108 DE040000 		.4byte	.LASF24
 3066 010c 06       		.uleb128 0x6
 3067 010d 04       		.byte	0x4
 3068 010e F7000000 		.4byte	0xf7
 3069 0112 06       		.uleb128 0x6
 3070 0113 04       		.byte	0x4
 3071 0114 18010000 		.4byte	0x118
 3072 0118 07       		.uleb128 0x7
 3073 0119 F7000000 		.4byte	0xf7
 3074 011d 08       		.uleb128 0x8
 3075 011e F7000000 		.4byte	0xf7
 3076 0122 2D010000 		.4byte	0x12d
 3077 0126 09       		.uleb128 0x9
 3078 0127 05010000 		.4byte	0x105
 3079 012b 17       		.byte	0x17
 3080 012c 00       		.byte	0
 3081 012d 0A       		.uleb128 0xa
 3082 012e 746D00   		.ascii	"tm\000"
 3083 0131 24       		.byte	0x24
 3084 0132 05       		.byte	0x5
 3085 0133 21       		.byte	0x21
 3086 0134 A5010000 		.4byte	0x1a5
 3087 0138 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 75


 3088 0139 A6070000 		.4byte	.LASF25
 3089 013d 05       		.byte	0x5
 3090 013e 23       		.byte	0x23
 3091 013f 7E000000 		.4byte	0x7e
 3092 0143 00       		.byte	0
 3093 0144 0B       		.uleb128 0xb
 3094 0145 D7040000 		.4byte	.LASF26
 3095 0149 05       		.byte	0x5
 3096 014a 24       		.byte	0x24
 3097 014b 7E000000 		.4byte	0x7e
 3098 014f 04       		.byte	0x4
 3099 0150 0B       		.uleb128 0xb
 3100 0151 18000000 		.4byte	.LASF27
 3101 0155 05       		.byte	0x5
 3102 0156 25       		.byte	0x25
 3103 0157 7E000000 		.4byte	0x7e
 3104 015b 08       		.byte	0x8
 3105 015c 0B       		.uleb128 0xb
 3106 015d 88070000 		.4byte	.LASF28
 3107 0161 05       		.byte	0x5
 3108 0162 26       		.byte	0x26
 3109 0163 7E000000 		.4byte	0x7e
 3110 0167 0C       		.byte	0xc
 3111 0168 0B       		.uleb128 0xb
 3112 0169 F2020000 		.4byte	.LASF29
 3113 016d 05       		.byte	0x5
 3114 016e 27       		.byte	0x27
 3115 016f 7E000000 		.4byte	0x7e
 3116 0173 10       		.byte	0x10
 3117 0174 0B       		.uleb128 0xb
 3118 0175 3E030000 		.4byte	.LASF30
 3119 0179 05       		.byte	0x5
 3120 017a 28       		.byte	0x28
 3121 017b 7E000000 		.4byte	0x7e
 3122 017f 14       		.byte	0x14
 3123 0180 0B       		.uleb128 0xb
 3124 0181 92060000 		.4byte	.LASF31
 3125 0185 05       		.byte	0x5
 3126 0186 29       		.byte	0x29
 3127 0187 7E000000 		.4byte	0x7e
 3128 018b 18       		.byte	0x18
 3129 018c 0B       		.uleb128 0xb
 3130 018d 20000000 		.4byte	.LASF32
 3131 0191 05       		.byte	0x5
 3132 0192 2A       		.byte	0x2a
 3133 0193 7E000000 		.4byte	0x7e
 3134 0197 1C       		.byte	0x1c
 3135 0198 0B       		.uleb128 0xb
 3136 0199 D6030000 		.4byte	.LASF33
 3137 019d 05       		.byte	0x5
 3138 019e 2B       		.byte	0x2b
 3139 019f 7E000000 		.4byte	0x7e
 3140 01a3 20       		.byte	0x20
 3141 01a4 00       		.byte	0
 3142 01a5 0C       		.uleb128 0xc
 3143 01a6 8101     		.2byte	0x181
 3144 01a8 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 76


 3145 01a9 0A       		.byte	0xa
 3146 01aa D3010000 		.4byte	0x1d3
 3147 01ae 0B       		.uleb128 0xb
 3148 01af 32050000 		.4byte	.LASF34
 3149 01b3 06       		.byte	0x6
 3150 01b4 0C       		.byte	0xc
 3151 01b5 D3010000 		.4byte	0x1d3
 3152 01b9 00       		.byte	0
 3153 01ba 0B       		.uleb128 0xb
 3154 01bb DE070000 		.4byte	.LASF35
 3155 01bf 06       		.byte	0x6
 3156 01c0 0D       		.byte	0xd
 3157 01c1 AD000000 		.4byte	0xad
 3158 01c5 80       		.byte	0x80
 3159 01c6 0B       		.uleb128 0xb
 3160 01c7 66060000 		.4byte	.LASF36
 3161 01cb 06       		.byte	0x6
 3162 01cc 0F       		.byte	0xf
 3163 01cd E3010000 		.4byte	0x1e3
 3164 01d1 81       		.byte	0x81
 3165 01d2 00       		.byte	0
 3166 01d3 08       		.uleb128 0x8
 3167 01d4 F7000000 		.4byte	0xf7
 3168 01d8 E3010000 		.4byte	0x1e3
 3169 01dc 09       		.uleb128 0x9
 3170 01dd 05010000 		.4byte	0x105
 3171 01e1 7F       		.byte	0x7f
 3172 01e2 00       		.byte	0
 3173 01e3 08       		.uleb128 0x8
 3174 01e4 F7000000 		.4byte	0xf7
 3175 01e8 F3010000 		.4byte	0x1f3
 3176 01ec 09       		.uleb128 0x9
 3177 01ed 05010000 		.4byte	0x105
 3178 01f1 FF       		.byte	0xff
 3179 01f2 00       		.byte	0
 3180 01f3 03       		.uleb128 0x3
 3181 01f4 4E060000 		.4byte	.LASF37
 3182 01f8 06       		.byte	0x6
 3183 01f9 10       		.byte	0x10
 3184 01fa A5010000 		.4byte	0x1a5
 3185 01fe 0D       		.uleb128 0xd
 3186 01ff 2C       		.byte	0x2c
 3187 0200 07       		.byte	0x7
 3188 0201 14       		.byte	0x14
 3189 0202 2B020000 		.4byte	0x22b
 3190 0206 0E       		.uleb128 0xe
 3191 0207 6B657900 		.ascii	"key\000"
 3192 020b 07       		.byte	0x7
 3193 020c 15       		.byte	0x15
 3194 020d 2B020000 		.4byte	0x22b
 3195 0211 00       		.byte	0
 3196 0212 0B       		.uleb128 0xb
 3197 0213 12000000 		.4byte	.LASF38
 3198 0217 07       		.byte	0x7
 3199 0218 16       		.byte	0x16
 3200 0219 2B020000 		.4byte	0x22b
 3201 021d 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 77


 3202 021e 0B       		.uleb128 0xb
 3203 021f 7F080000 		.4byte	.LASF39
 3204 0223 07       		.byte	0x7
 3205 0224 17       		.byte	0x17
 3206 0225 DD000000 		.4byte	0xdd
 3207 0229 28       		.byte	0x28
 3208 022a 00       		.byte	0
 3209 022b 08       		.uleb128 0x8
 3210 022c F7000000 		.4byte	0xf7
 3211 0230 3B020000 		.4byte	0x23b
 3212 0234 09       		.uleb128 0x9
 3213 0235 05010000 		.4byte	0x105
 3214 0239 13       		.byte	0x13
 3215 023a 00       		.byte	0
 3216 023b 03       		.uleb128 0x3
 3217 023c 66030000 		.4byte	.LASF40
 3218 0240 07       		.byte	0x7
 3219 0241 19       		.byte	0x19
 3220 0242 FE010000 		.4byte	0x1fe
 3221 0246 0D       		.uleb128 0xd
 3222 0247 3C       		.byte	0x3c
 3223 0248 08       		.byte	0x8
 3224 0249 37       		.byte	0x37
 3225 024a 73020000 		.4byte	0x273
 3226 024e 0B       		.uleb128 0xb
 3227 024f 81070000 		.4byte	.LASF41
 3228 0253 08       		.byte	0x8
 3229 0254 38       		.byte	0x38
 3230 0255 2B020000 		.4byte	0x22b
 3231 0259 00       		.byte	0
 3232 025a 0B       		.uleb128 0xb
 3233 025b E8060000 		.4byte	.LASF42
 3234 025f 08       		.byte	0x8
 3235 0260 39       		.byte	0x39
 3236 0261 2B020000 		.4byte	0x22b
 3237 0265 14       		.byte	0x14
 3238 0266 0B       		.uleb128 0xb
 3239 0267 61060000 		.4byte	.LASF43
 3240 026b 08       		.byte	0x8
 3241 026c 3A       		.byte	0x3a
 3242 026d 2B020000 		.4byte	0x22b
 3243 0271 28       		.byte	0x28
 3244 0272 00       		.byte	0
 3245 0273 03       		.uleb128 0x3
 3246 0274 FC060000 		.4byte	.LASF44
 3247 0278 08       		.byte	0x8
 3248 0279 3C       		.byte	0x3c
 3249 027a 46020000 		.4byte	0x246
 3250 027e 0D       		.uleb128 0xd
 3251 027f 20       		.byte	0x20
 3252 0280 08       		.byte	0x8
 3253 0281 3E       		.byte	0x3e
 3254 0282 E7020000 		.4byte	0x2e7
 3255 0286 0B       		.uleb128 0xb
 3256 0287 21020000 		.4byte	.LASF45
 3257 028b 08       		.byte	0x8
 3258 028c 3F       		.byte	0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 78


 3259 028d 7E000000 		.4byte	0x7e
 3260 0291 00       		.byte	0
 3261 0292 0E       		.uleb128 0xe
 3262 0293 62657200 		.ascii	"ber\000"
 3263 0297 08       		.byte	0x8
 3264 0298 40       		.byte	0x40
 3265 0299 7E000000 		.4byte	0x7e
 3266 029d 04       		.byte	0x4
 3267 029e 0B       		.uleb128 0xb
 3268 029f 2F060000 		.4byte	.LASF46
 3269 02a3 08       		.byte	0x8
 3270 02a4 41       		.byte	0x41
 3271 02a5 7E000000 		.4byte	0x7e
 3272 02a9 08       		.byte	0x8
 3273 02aa 0B       		.uleb128 0xb
 3274 02ab AB010000 		.4byte	.LASF47
 3275 02af 08       		.byte	0x8
 3276 02b0 42       		.byte	0x42
 3277 02b1 7E000000 		.4byte	0x7e
 3278 02b5 0C       		.byte	0xc
 3279 02b6 0B       		.uleb128 0xb
 3280 02b7 14060000 		.4byte	.LASF48
 3281 02bb 08       		.byte	0x8
 3282 02bc 43       		.byte	0x43
 3283 02bd 7E000000 		.4byte	0x7e
 3284 02c1 10       		.byte	0x10
 3285 02c2 0B       		.uleb128 0xb
 3286 02c3 6D060000 		.4byte	.LASF49
 3287 02c7 08       		.byte	0x8
 3288 02c8 44       		.byte	0x44
 3289 02c9 7E000000 		.4byte	0x7e
 3290 02cd 14       		.byte	0x14
 3291 02ce 0B       		.uleb128 0xb
 3292 02cf CD010000 		.4byte	.LASF50
 3293 02d3 08       		.byte	0x8
 3294 02d4 45       		.byte	0x45
 3295 02d5 7E000000 		.4byte	0x7e
 3296 02d9 18       		.byte	0x18
 3297 02da 0B       		.uleb128 0xb
 3298 02db 2A040000 		.4byte	.LASF51
 3299 02df 08       		.byte	0x8
 3300 02e0 46       		.byte	0x46
 3301 02e1 7E000000 		.4byte	0x7e
 3302 02e5 1C       		.byte	0x1c
 3303 02e6 00       		.byte	0
 3304 02e7 03       		.uleb128 0x3
 3305 02e8 72060000 		.4byte	.LASF52
 3306 02ec 08       		.byte	0x8
 3307 02ed 48       		.byte	0x48
 3308 02ee 7E020000 		.4byte	0x27e
 3309 02f2 0D       		.uleb128 0xd
 3310 02f3 10       		.byte	0x10
 3311 02f4 08       		.byte	0x8
 3312 02f5 4A       		.byte	0x4a
 3313 02f6 37030000 		.4byte	0x337
 3314 02fa 0B       		.uleb128 0xb
 3315 02fb C6050000 		.4byte	.LASF53
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 79


 3316 02ff 08       		.byte	0x8
 3317 0300 4B       		.byte	0x4b
 3318 0301 E9000000 		.4byte	0xe9
 3319 0305 00       		.byte	0
 3320 0306 0B       		.uleb128 0xb
 3321 0307 92000000 		.4byte	.LASF54
 3322 030b 08       		.byte	0x8
 3323 030c 4C       		.byte	0x4c
 3324 030d E9000000 		.4byte	0xe9
 3325 0311 04       		.byte	0x4
 3326 0312 0B       		.uleb128 0xb
 3327 0313 56020000 		.4byte	.LASF55
 3328 0317 08       		.byte	0x8
 3329 0318 4D       		.byte	0x4d
 3330 0319 E9000000 		.4byte	0xe9
 3331 031d 08       		.byte	0x8
 3332 031e 0B       		.uleb128 0xb
 3333 031f BC030000 		.4byte	.LASF56
 3334 0323 08       		.byte	0x8
 3335 0324 4E       		.byte	0x4e
 3336 0325 B9000000 		.4byte	0xb9
 3337 0329 0C       		.byte	0xc
 3338 032a 0B       		.uleb128 0xb
 3339 032b 90070000 		.4byte	.LASF57
 3340 032f 08       		.byte	0x8
 3341 0330 4F       		.byte	0x4f
 3342 0331 AD000000 		.4byte	0xad
 3343 0335 0E       		.byte	0xe
 3344 0336 00       		.byte	0
 3345 0337 03       		.uleb128 0x3
 3346 0338 09070000 		.4byte	.LASF58
 3347 033c 08       		.byte	0x8
 3348 033d 51       		.byte	0x51
 3349 033e F2020000 		.4byte	0x2f2
 3350 0342 0D       		.uleb128 0xd
 3351 0343 05       		.byte	0x5
 3352 0344 08       		.byte	0x8
 3353 0345 54       		.byte	0x54
 3354 0346 87030000 		.4byte	0x387
 3355 034a 0B       		.uleb128 0xb
 3356 034b 72020000 		.4byte	.LASF59
 3357 034f 08       		.byte	0x8
 3358 0350 56       		.byte	0x56
 3359 0351 AD000000 		.4byte	0xad
 3360 0355 00       		.byte	0
 3361 0356 0B       		.uleb128 0xb
 3362 0357 BD050000 		.4byte	.LASF60
 3363 035b 08       		.byte	0x8
 3364 035c 58       		.byte	0x58
 3365 035d 87030000 		.4byte	0x387
 3366 0361 01       		.byte	0x1
 3367 0362 0B       		.uleb128 0xb
 3368 0363 21070000 		.4byte	.LASF61
 3369 0367 08       		.byte	0x8
 3370 0368 5A       		.byte	0x5a
 3371 0369 AD000000 		.4byte	0xad
 3372 036d 02       		.byte	0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 80


 3373 036e 0B       		.uleb128 0xb
 3374 036f 19060000 		.4byte	.LASF62
 3375 0373 08       		.byte	0x8
 3376 0374 5C       		.byte	0x5c
 3377 0375 AD000000 		.4byte	0xad
 3378 0379 03       		.byte	0x3
 3379 037a 0B       		.uleb128 0xb
 3380 037b F9020000 		.4byte	.LASF63
 3381 037f 08       		.byte	0x8
 3382 0380 5F       		.byte	0x5f
 3383 0381 AD000000 		.4byte	0xad
 3384 0385 04       		.byte	0x4
 3385 0386 00       		.byte	0
 3386 0387 02       		.uleb128 0x2
 3387 0388 01       		.byte	0x1
 3388 0389 02       		.byte	0x2
 3389 038a E2050000 		.4byte	.LASF64
 3390 038e 03       		.uleb128 0x3
 3391 038f A2040000 		.4byte	.LASF65
 3392 0393 08       		.byte	0x8
 3393 0394 61       		.byte	0x61
 3394 0395 42030000 		.4byte	0x342
 3395 0399 0D       		.uleb128 0xd
 3396 039a 06       		.byte	0x6
 3397 039b 09       		.byte	0x9
 3398 039c 2E       		.byte	0x2e
 3399 039d D2030000 		.4byte	0x3d2
 3400 03a1 0B       		.uleb128 0xb
 3401 03a2 B0010000 		.4byte	.LASF66
 3402 03a6 09       		.byte	0x9
 3403 03a7 30       		.byte	0x30
 3404 03a8 B9000000 		.4byte	0xb9
 3405 03ac 00       		.byte	0
 3406 03ad 0B       		.uleb128 0xb
 3407 03ae 30020000 		.4byte	.LASF67
 3408 03b2 09       		.byte	0x9
 3409 03b3 31       		.byte	0x31
 3410 03b4 D1000000 		.4byte	0xd1
 3411 03b8 02       		.byte	0x2
 3412 03b9 0B       		.uleb128 0xb
 3413 03ba 2D080000 		.4byte	.LASF68
 3414 03be 09       		.byte	0x9
 3415 03bf 32       		.byte	0x32
 3416 03c0 AD000000 		.4byte	0xad
 3417 03c4 04       		.byte	0x4
 3418 03c5 0B       		.uleb128 0xb
 3419 03c6 7A000000 		.4byte	.LASF69
 3420 03ca 09       		.byte	0x9
 3421 03cb 33       		.byte	0x33
 3422 03cc AD000000 		.4byte	0xad
 3423 03d0 05       		.byte	0x5
 3424 03d1 00       		.byte	0
 3425 03d2 03       		.uleb128 0x3
 3426 03d3 DC050000 		.4byte	.LASF70
 3427 03d7 09       		.byte	0x9
 3428 03d8 36       		.byte	0x36
 3429 03d9 DD030000 		.4byte	0x3dd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 81


 3430 03dd 0F       		.uleb128 0xf
 3431 03de 99030000 		.4byte	0x399
 3432 03e2 0D       		.uleb128 0xd
 3433 03e3 1C       		.byte	0x1c
 3434 03e4 09       		.byte	0x9
 3435 03e5 39       		.byte	0x39
 3436 03e6 03040000 		.4byte	0x403
 3437 03ea 0B       		.uleb128 0xb
 3438 03eb DF030000 		.4byte	.LASF71
 3439 03ef 09       		.byte	0x9
 3440 03f0 3B       		.byte	0x3b
 3441 03f1 03040000 		.4byte	0x403
 3442 03f5 00       		.byte	0
 3443 03f6 0B       		.uleb128 0xb
 3444 03f7 F2030000 		.4byte	.LASF72
 3445 03fb 09       		.byte	0x9
 3446 03fc 3C       		.byte	0x3c
 3447 03fd 1D010000 		.4byte	0x11d
 3448 0401 04       		.byte	0x4
 3449 0402 00       		.byte	0
 3450 0403 06       		.uleb128 0x6
 3451 0404 04       		.byte	0x4
 3452 0405 73020000 		.4byte	0x273
 3453 0409 03       		.uleb128 0x3
 3454 040a 97040000 		.4byte	.LASF73
 3455 040e 09       		.byte	0x9
 3456 040f 3E       		.byte	0x3e
 3457 0410 E2030000 		.4byte	0x3e2
 3458 0414 0D       		.uleb128 0xd
 3459 0415 68       		.byte	0x68
 3460 0416 09       		.byte	0x9
 3461 0417 44       		.byte	0x44
 3462 0418 35040000 		.4byte	0x435
 3463 041c 0B       		.uleb128 0xb
 3464 041d EA030000 		.4byte	.LASF74
 3465 0421 09       		.byte	0x9
 3466 0422 49       		.byte	0x49
 3467 0423 35040000 		.4byte	0x435
 3468 0427 00       		.byte	0
 3469 0428 0B       		.uleb128 0xb
 3470 0429 CE030000 		.4byte	.LASF75
 3471 042d 09       		.byte	0x9
 3472 042e 4A       		.byte	0x4a
 3473 042f 7E000000 		.4byte	0x7e
 3474 0433 64       		.byte	0x64
 3475 0434 00       		.byte	0
 3476 0435 08       		.uleb128 0x8
 3477 0436 F7000000 		.4byte	0xf7
 3478 043a 45040000 		.4byte	0x445
 3479 043e 09       		.uleb128 0x9
 3480 043f 05010000 		.4byte	0x105
 3481 0443 63       		.byte	0x63
 3482 0444 00       		.byte	0
 3483 0445 03       		.uleb128 0x3
 3484 0446 FE070000 		.4byte	.LASF76
 3485 044a 09       		.byte	0x9
 3486 044b 50       		.byte	0x50
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 82


 3487 044c 14040000 		.4byte	0x414
 3488 0450 10       		.uleb128 0x10
 3489 0451 CF050000 		.4byte	.LASF108
 3490 0455 01       		.byte	0x1
 3491 0456 12       		.byte	0x12
 3492 0457 00000000 		.4byte	.LFB64
 3493 045b 44000000 		.4byte	.LFE64-.LFB64
 3494 045f 01       		.uleb128 0x1
 3495 0460 9C       		.byte	0x9c
 3496 0461 11       		.uleb128 0x11
 3497 0462 9E050000 		.4byte	.LASF77
 3498 0466 01       		.byte	0x1
 3499 0467 1C       		.byte	0x1c
 3500 0468 00000000 		.4byte	.LFB65
 3501 046c 6C000000 		.4byte	.LFE65-.LFB65
 3502 0470 01       		.uleb128 0x1
 3503 0471 9C       		.byte	0x9c
 3504 0472 11       		.uleb128 0x11
 3505 0473 69070000 		.4byte	.LASF78
 3506 0477 01       		.byte	0x1
 3507 0478 36       		.byte	0x36
 3508 0479 00000000 		.4byte	.LFB66
 3509 047d 32000000 		.4byte	.LFE66-.LFB66
 3510 0481 01       		.uleb128 0x1
 3511 0482 9C       		.byte	0x9c
 3512 0483 11       		.uleb128 0x11
 3513 0484 50030000 		.4byte	.LASF79
 3514 0488 01       		.byte	0x1
 3515 0489 46       		.byte	0x46
 3516 048a 00000000 		.4byte	.LFB67
 3517 048e 20000000 		.4byte	.LFE67-.LFB67
 3518 0492 01       		.uleb128 0x1
 3519 0493 9C       		.byte	0x9c
 3520 0494 11       		.uleb128 0x11
 3521 0495 6E080000 		.4byte	.LASF80
 3522 0499 01       		.byte	0x1
 3523 049a 4F       		.byte	0x4f
 3524 049b 00000000 		.4byte	.LFB68
 3525 049f 40000000 		.4byte	.LFE68-.LFB68
 3526 04a3 01       		.uleb128 0x1
 3527 04a4 9C       		.byte	0x9c
 3528 04a5 12       		.uleb128 0x12
 3529 04a6 00040000 		.4byte	.LASF94
 3530 04aa 01       		.byte	0x1
 3531 04ab 61       		.byte	0x61
 3532 04ac AD000000 		.4byte	0xad
 3533 04b0 00000000 		.4byte	.LFB69
 3534 04b4 DC000000 		.4byte	.LFE69-.LFB69
 3535 04b8 01       		.uleb128 0x1
 3536 04b9 9C       		.byte	0x9c
 3537 04ba 19050000 		.4byte	0x519
 3538 04be 13       		.uleb128 0x13
 3539 04bf 1B080000 		.4byte	.LASF81
 3540 04c3 01       		.byte	0x1
 3541 04c4 6A       		.byte	0x6a
 3542 04c5 AD000000 		.4byte	0xad
 3543 04c9 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 83


 3544 04ca 91       		.byte	0x91
 3545 04cb 77       		.sleb128 -9
 3546 04cc 13       		.uleb128 0x13
 3547 04cd 24080000 		.4byte	.LASF82
 3548 04d1 01       		.byte	0x1
 3549 04d2 6B       		.byte	0x6b
 3550 04d3 AD000000 		.4byte	0xad
 3551 04d7 02       		.uleb128 0x2
 3552 04d8 91       		.byte	0x91
 3553 04d9 74       		.sleb128 -12
 3554 04da 13       		.uleb128 0x13
 3555 04db 3B080000 		.4byte	.LASF83
 3556 04df 01       		.byte	0x1
 3557 04e0 6D       		.byte	0x6d
 3558 04e1 57000000 		.4byte	0x57
 3559 04e5 02       		.uleb128 0x2
 3560 04e6 91       		.byte	0x91
 3561 04e7 70       		.sleb128 -16
 3562 04e8 14       		.uleb128 0x14
 3563 04e9 26000000 		.4byte	.LBB2
 3564 04ed 4A000000 		.4byte	.LBE2-.LBB2
 3565 04f1 13       		.uleb128 0x13
 3566 04f2 24080000 		.4byte	.LASF82
 3567 04f6 01       		.byte	0x1
 3568 04f7 70       		.byte	0x70
 3569 04f8 AD000000 		.4byte	0xad
 3570 04fc 02       		.uleb128 0x2
 3571 04fd 91       		.byte	0x91
 3572 04fe 76       		.sleb128 -10
 3573 04ff 14       		.uleb128 0x14
 3574 0500 2C000000 		.4byte	.LBB3
 3575 0504 2A000000 		.4byte	.LBE3-.LBB3
 3576 0508 13       		.uleb128 0x13
 3577 0509 72030000 		.4byte	.LASF84
 3578 050d 01       		.byte	0x1
 3579 050e 72       		.byte	0x72
 3580 050f AD000000 		.4byte	0xad
 3581 0513 02       		.uleb128 0x2
 3582 0514 91       		.byte	0x91
 3583 0515 75       		.sleb128 -11
 3584 0516 00       		.byte	0
 3585 0517 00       		.byte	0
 3586 0518 00       		.byte	0
 3587 0519 11       		.uleb128 0x11
 3588 051a 9A060000 		.4byte	.LASF85
 3589 051e 01       		.byte	0x1
 3590 051f 93       		.byte	0x93
 3591 0520 00000000 		.4byte	.LFB70
 3592 0524 1C000000 		.4byte	.LFE70-.LFB70
 3593 0528 01       		.uleb128 0x1
 3594 0529 9C       		.byte	0x9c
 3595 052a 11       		.uleb128 0x11
 3596 052b 80060000 		.4byte	.LASF86
 3597 052f 01       		.byte	0x1
 3598 0530 9B       		.byte	0x9b
 3599 0531 00000000 		.4byte	.LFB71
 3600 0535 28000000 		.4byte	.LFE71-.LFB71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 84


 3601 0539 01       		.uleb128 0x1
 3602 053a 9C       		.byte	0x9c
 3603 053b 15       		.uleb128 0x15
 3604 053c 86040000 		.4byte	.LASF98
 3605 0540 01       		.byte	0x1
 3606 0541 A6       		.byte	0xa6
 3607 0542 8C000000 		.4byte	0x8c
 3608 0546 00000000 		.4byte	.LFB72
 3609 054a C8000000 		.4byte	.LFE72-.LFB72
 3610 054e 01       		.uleb128 0x1
 3611 054f 9C       		.byte	0x9c
 3612 0550 CD050000 		.4byte	0x5cd
 3613 0554 16       		.uleb128 0x16
 3614 0555 7E050000 		.4byte	.LASF87
 3615 0559 01       		.byte	0x1
 3616 055a A6       		.byte	0xa6
 3617 055b 0C010000 		.4byte	0x10c
 3618 055f 02       		.uleb128 0x2
 3619 0560 91       		.byte	0x91
 3620 0561 5C       		.sleb128 -36
 3621 0562 16       		.uleb128 0x16
 3622 0563 45080000 		.4byte	.LASF88
 3623 0567 01       		.byte	0x1
 3624 0568 A6       		.byte	0xa6
 3625 0569 0C010000 		.4byte	0x10c
 3626 056d 02       		.uleb128 0x2
 3627 056e 91       		.byte	0x91
 3628 056f 58       		.sleb128 -40
 3629 0570 16       		.uleb128 0x16
 3630 0571 9D030000 		.4byte	.LASF89
 3631 0575 01       		.byte	0x1
 3632 0576 A6       		.byte	0xa6
 3633 0577 A2000000 		.4byte	0xa2
 3634 057b 02       		.uleb128 0x2
 3635 057c 91       		.byte	0x91
 3636 057d 54       		.sleb128 -44
 3637 057e 13       		.uleb128 0x13
 3638 057f 7B040000 		.4byte	.LASF90
 3639 0583 01       		.byte	0x1
 3640 0584 A8       		.byte	0xa8
 3641 0585 C5000000 		.4byte	0xc5
 3642 0589 02       		.uleb128 0x2
 3643 058a 91       		.byte	0x91
 3644 058b 74       		.sleb128 -12
 3645 058c 14       		.uleb128 0x14
 3646 058d 16000000 		.4byte	.LBB4
 3647 0591 88000000 		.4byte	.LBE4-.LBB4
 3648 0595 13       		.uleb128 0x13
 3649 0596 87050000 		.4byte	.LASF91
 3650 059a 01       		.byte	0x1
 3651 059b AC       		.byte	0xac
 3652 059c 0C010000 		.4byte	0x10c
 3653 05a0 02       		.uleb128 0x2
 3654 05a1 91       		.byte	0x91
 3655 05a2 64       		.sleb128 -28
 3656 05a3 13       		.uleb128 0x13
 3657 05a4 0E060000 		.4byte	.LASF92
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 85


 3658 05a8 01       		.byte	0x1
 3659 05a9 AD       		.byte	0xad
 3660 05aa A2000000 		.4byte	0xa2
 3661 05ae 02       		.uleb128 0x2
 3662 05af 91       		.byte	0x91
 3663 05b0 6C       		.sleb128 -20
 3664 05b1 17       		.uleb128 0x17
 3665 05b2 6900     		.ascii	"i\000"
 3666 05b4 01       		.byte	0x1
 3667 05b5 AE       		.byte	0xae
 3668 05b6 A2000000 		.4byte	0xa2
 3669 05ba 02       		.uleb128 0x2
 3670 05bb 91       		.byte	0x91
 3671 05bc 70       		.sleb128 -16
 3672 05bd 13       		.uleb128 0x13
 3673 05be C7020000 		.4byte	.LASF93
 3674 05c2 01       		.byte	0x1
 3675 05c3 AE       		.byte	0xae
 3676 05c4 A2000000 		.4byte	0xa2
 3677 05c8 02       		.uleb128 0x2
 3678 05c9 91       		.byte	0x91
 3679 05ca 68       		.sleb128 -24
 3680 05cb 00       		.byte	0
 3681 05cc 00       		.byte	0
 3682 05cd 12       		.uleb128 0x12
 3683 05ce 53050000 		.4byte	.LASF95
 3684 05d2 01       		.byte	0x1
 3685 05d3 DA       		.byte	0xda
 3686 05d4 F3010000 		.4byte	0x1f3
 3687 05d8 00000000 		.4byte	.LFB73
 3688 05dc 00010000 		.4byte	.LFE73-.LFB73
 3689 05e0 01       		.uleb128 0x1
 3690 05e1 9C       		.byte	0x9c
 3691 05e2 24060000 		.4byte	0x624
 3692 05e6 13       		.uleb128 0x13
 3693 05e7 66010000 		.4byte	.LASF96
 3694 05eb 01       		.byte	0x1
 3695 05ec DC       		.byte	0xdc
 3696 05ed F3010000 		.4byte	0x1f3
 3697 05f1 03       		.uleb128 0x3
 3698 05f2 91       		.byte	0x91
 3699 05f3 E47C     		.sleb128 -412
 3700 05f5 14       		.uleb128 0x14
 3701 05f6 4A000000 		.4byte	.LBB5
 3702 05fa 86000000 		.4byte	.LBE5-.LBB5
 3703 05fe 17       		.uleb128 0x17
 3704 05ff 6900     		.ascii	"i\000"
 3705 0601 01       		.byte	0x1
 3706 0602 E3       		.byte	0xe3
 3707 0603 7E000000 		.4byte	0x7e
 3708 0607 02       		.uleb128 0x2
 3709 0608 91       		.byte	0x91
 3710 0609 6C       		.sleb128 -20
 3711 060a 14       		.uleb128 0x14
 3712 060b 70000000 		.4byte	.LBB6
 3713 060f 46000000 		.4byte	.LBE6-.LBB6
 3714 0613 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 86


 3715 0614 A0020000 		.4byte	.LASF97
 3716 0618 01       		.byte	0x1
 3717 0619 F0       		.byte	0xf0
 3718 061a 57000000 		.4byte	0x57
 3719 061e 02       		.uleb128 0x2
 3720 061f 91       		.byte	0x91
 3721 0620 68       		.sleb128 -24
 3722 0621 00       		.byte	0
 3723 0622 00       		.byte	0
 3724 0623 00       		.byte	0
 3725 0624 18       		.uleb128 0x18
 3726 0625 8E030000 		.4byte	.LASF99
 3727 0629 01       		.byte	0x1
 3728 062a 0401     		.2byte	0x104
 3729 062c AD000000 		.4byte	0xad
 3730 0630 00000000 		.4byte	.LFB74
 3731 0634 78000000 		.4byte	.LFE74-.LFB74
 3732 0638 01       		.uleb128 0x1
 3733 0639 9C       		.byte	0x9c
 3734 063a 95060000 		.4byte	0x695
 3735 063e 19       		.uleb128 0x19
 3736 063f 66040000 		.4byte	.LASF100
 3737 0643 01       		.byte	0x1
 3738 0644 0401     		.2byte	0x104
 3739 0646 0C010000 		.4byte	0x10c
 3740 064a 02       		.uleb128 0x2
 3741 064b 91       		.byte	0x91
 3742 064c 6C       		.sleb128 -20
 3743 064d 19       		.uleb128 0x19
 3744 064e 17040000 		.4byte	.LASF101
 3745 0652 01       		.byte	0x1
 3746 0653 0401     		.2byte	0x104
 3747 0655 12010000 		.4byte	0x112
 3748 0659 02       		.uleb128 0x2
 3749 065a 91       		.byte	0x91
 3750 065b 68       		.sleb128 -24
 3751 065c 19       		.uleb128 0x19
 3752 065d 3D040000 		.4byte	.LASF102
 3753 0661 01       		.byte	0x1
 3754 0662 0401     		.2byte	0x104
 3755 0664 12010000 		.4byte	0x112
 3756 0668 02       		.uleb128 0x2
 3757 0669 91       		.byte	0x91
 3758 066a 64       		.sleb128 -28
 3759 066b 19       		.uleb128 0x19
 3760 066c 23040000 		.4byte	.LASF103
 3761 0670 01       		.byte	0x1
 3762 0671 0401     		.2byte	0x104
 3763 0673 0C010000 		.4byte	0x10c
 3764 0677 02       		.uleb128 0x2
 3765 0678 91       		.byte	0x91
 3766 0679 60       		.sleb128 -32
 3767 067a 1A       		.uleb128 0x1a
 3768 067b 6100     		.ascii	"a\000"
 3769 067d 01       		.byte	0x1
 3770 067e 0601     		.2byte	0x106
 3771 0680 0C010000 		.4byte	0x10c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 87


 3772 0684 02       		.uleb128 0x2
 3773 0685 91       		.byte	0x91
 3774 0686 74       		.sleb128 -12
 3775 0687 1A       		.uleb128 0x1a
 3776 0688 6200     		.ascii	"b\000"
 3777 068a 01       		.byte	0x1
 3778 068b 0601     		.2byte	0x106
 3779 068d 0C010000 		.4byte	0x10c
 3780 0691 02       		.uleb128 0x2
 3781 0692 91       		.byte	0x91
 3782 0693 70       		.sleb128 -16
 3783 0694 00       		.byte	0
 3784 0695 1B       		.uleb128 0x1b
 3785 0696 C2060000 		.4byte	.LASF104
 3786 069a 01       		.byte	0x1
 3787 069b 2301     		.2byte	0x123
 3788 069d AD000000 		.4byte	0xad
 3789 06a1 00000000 		.4byte	.LFB75
 3790 06a5 3C010000 		.4byte	.LFE75-.LFB75
 3791 06a9 01       		.uleb128 0x1
 3792 06aa 9C       		.byte	0x9c
 3793 06ab C7060000 		.4byte	0x6c7
 3794 06af 14       		.uleb128 0x14
 3795 06b0 2E000000 		.4byte	.LBB7
 3796 06b4 32000000 		.4byte	.LBE7-.LBB7
 3797 06b8 1A       		.uleb128 0x1a
 3798 06b9 6900     		.ascii	"i\000"
 3799 06bb 01       		.byte	0x1
 3800 06bc 3101     		.2byte	0x131
 3801 06be AD000000 		.4byte	0xad
 3802 06c2 02       		.uleb128 0x2
 3803 06c3 91       		.byte	0x91
 3804 06c4 77       		.sleb128 -9
 3805 06c5 00       		.byte	0
 3806 06c6 00       		.byte	0
 3807 06c7 1B       		.uleb128 0x1b
 3808 06c8 ED040000 		.4byte	.LASF105
 3809 06cc 01       		.byte	0x1
 3810 06cd 6A01     		.2byte	0x16a
 3811 06cf AD000000 		.4byte	0xad
 3812 06d3 00000000 		.4byte	.LFB76
 3813 06d7 B8000000 		.4byte	.LFE76-.LFB76
 3814 06db 01       		.uleb128 0x1
 3815 06dc 9C       		.byte	0x9c
 3816 06dd 0A070000 		.4byte	0x70a
 3817 06e1 1C       		.uleb128 0x1c
 3818 06e2 DE070000 		.4byte	.LASF35
 3819 06e6 01       		.byte	0x1
 3820 06e7 6E01     		.2byte	0x16e
 3821 06e9 AD000000 		.4byte	0xad
 3822 06ed 02       		.uleb128 0x2
 3823 06ee 91       		.byte	0x91
 3824 06ef 77       		.sleb128 -9
 3825 06f0 14       		.uleb128 0x14
 3826 06f1 36000000 		.4byte	.LBB8
 3827 06f5 48000000 		.4byte	.LBE8-.LBB8
 3828 06f9 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 88


 3829 06fa 6B040000 		.4byte	.LASF106
 3830 06fe 01       		.byte	0x1
 3831 06ff 7601     		.2byte	0x176
 3832 0701 0A070000 		.4byte	0x70a
 3833 0705 02       		.uleb128 0x2
 3834 0706 91       		.byte	0x91
 3835 0707 6C       		.sleb128 -20
 3836 0708 00       		.byte	0
 3837 0709 00       		.byte	0
 3838 070a 08       		.uleb128 0x8
 3839 070b F7000000 		.4byte	0xf7
 3840 070f 1A070000 		.4byte	0x71a
 3841 0713 09       		.uleb128 0x9
 3842 0714 05010000 		.4byte	0x105
 3843 0718 09       		.byte	0x9
 3844 0719 00       		.byte	0
 3845 071a 1D       		.uleb128 0x1d
 3846 071b FA010000 		.4byte	.LASF107
 3847 071f 01       		.byte	0x1
 3848 0720 8801     		.2byte	0x188
 3849 0722 00000000 		.4byte	.LFB77
 3850 0726 1C000000 		.4byte	.LFE77-.LFB77
 3851 072a 01       		.uleb128 0x1
 3852 072b 9C       		.byte	0x9c
 3853 072c 1E       		.uleb128 0x1e
 3854 072d 2E070000 		.4byte	.LASF109
 3855 0731 01       		.byte	0x1
 3856 0732 9801     		.2byte	0x198
 3857 0734 AD000000 		.4byte	0xad
 3858 0738 00000000 		.4byte	.LFB78
 3859 073c 28000000 		.4byte	.LFE78-.LFB78
 3860 0740 01       		.uleb128 0x1
 3861 0741 9C       		.byte	0x9c
 3862 0742 1F       		.uleb128 0x1f
 3863 0743 A5030000 		.4byte	.LASF112
 3864 0747 01       		.byte	0x1
 3865 0748 A301     		.2byte	0x1a3
 3866 074a 00000000 		.4byte	.LFB79
 3867 074e 84000000 		.4byte	.LFE79-.LFB79
 3868 0752 01       		.uleb128 0x1
 3869 0753 9C       		.byte	0x9c
 3870 0754 68070000 		.4byte	0x768
 3871 0758 1C       		.uleb128 0x1c
 3872 0759 5E050000 		.4byte	.LASF110
 3873 075d 01       		.byte	0x1
 3874 075e B001     		.2byte	0x1b0
 3875 0760 7E000000 		.4byte	0x7e
 3876 0764 02       		.uleb128 0x2
 3877 0765 91       		.byte	0x91
 3878 0766 74       		.sleb128 -12
 3879 0767 00       		.byte	0
 3880 0768 20       		.uleb128 0x20
 3881 0769 1E030000 		.4byte	.LASF111
 3882 076d 01       		.byte	0x1
 3883 076e C201     		.2byte	0x1c2
 3884 0770 00000000 		.4byte	.LFB80
 3885 0774 30000000 		.4byte	.LFE80-.LFB80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 89


 3886 0778 01       		.uleb128 0x1
 3887 0779 9C       		.byte	0x9c
 3888 077a 1F       		.uleb128 0x1f
 3889 077b AD070000 		.4byte	.LASF113
 3890 077f 01       		.byte	0x1
 3891 0780 CB01     		.2byte	0x1cb
 3892 0782 00000000 		.4byte	.LFB81
 3893 0786 CC020000 		.4byte	.LFE81-.LFB81
 3894 078a 01       		.uleb128 0x1
 3895 078b 9C       		.byte	0x9c
 3896 078c 52080000 		.4byte	0x852
 3897 0790 1C       		.uleb128 0x1c
 3898 0791 23060000 		.4byte	.LASF114
 3899 0795 01       		.byte	0x1
 3900 0796 CE01     		.2byte	0x1ce
 3901 0798 0A070000 		.4byte	0x70a
 3902 079c 02       		.uleb128 0x2
 3903 079d 91       		.byte	0x91
 3904 079e 64       		.sleb128 -28
 3905 079f 1C       		.uleb128 0x1c
 3906 07a0 95020000 		.4byte	.LASF115
 3907 07a4 01       		.byte	0x1
 3908 07a5 CF01     		.2byte	0x1cf
 3909 07a7 0A070000 		.4byte	0x70a
 3910 07ab 02       		.uleb128 0x2
 3911 07ac 91       		.byte	0x91
 3912 07ad 58       		.sleb128 -40
 3913 07ae 1C       		.uleb128 0x1c
 3914 07af D0070000 		.4byte	.LASF116
 3915 07b3 01       		.byte	0x1
 3916 07b4 D001     		.2byte	0x1d0
 3917 07b6 0A070000 		.4byte	0x70a
 3918 07ba 02       		.uleb128 0x2
 3919 07bb 91       		.byte	0x91
 3920 07bc 4C       		.sleb128 -52
 3921 07bd 1C       		.uleb128 0x1c
 3922 07be AF050000 		.4byte	.LASF117
 3923 07c2 01       		.byte	0x1
 3924 07c3 D101     		.2byte	0x1d1
 3925 07c5 0A070000 		.4byte	0x70a
 3926 07c9 02       		.uleb128 0x2
 3927 07ca 91       		.byte	0x91
 3928 07cb 40       		.sleb128 -64
 3929 07cc 1C       		.uleb128 0x1c
 3930 07cd 11030000 		.4byte	.LASF118
 3931 07d1 01       		.byte	0x1
 3932 07d2 D201     		.2byte	0x1d2
 3933 07d4 0A070000 		.4byte	0x70a
 3934 07d8 03       		.uleb128 0x3
 3935 07d9 91       		.byte	0x91
 3936 07da B47F     		.sleb128 -76
 3937 07dc 1C       		.uleb128 0x1c
 3938 07dd 72020000 		.4byte	.LASF59
 3939 07e1 01       		.byte	0x1
 3940 07e2 E101     		.2byte	0x1e1
 3941 07e4 7E000000 		.4byte	0x7e
 3942 07e8 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 90


 3943 07e9 91       		.byte	0x91
 3944 07ea B07F     		.sleb128 -80
 3945 07ec 1C       		.uleb128 0x1c
 3946 07ed BD050000 		.4byte	.LASF60
 3947 07f1 01       		.byte	0x1
 3948 07f2 E101     		.2byte	0x1e1
 3949 07f4 7E000000 		.4byte	0x7e
 3950 07f8 03       		.uleb128 0x3
 3951 07f9 91       		.byte	0x91
 3952 07fa AC7F     		.sleb128 -84
 3953 07fc 1C       		.uleb128 0x1c
 3954 07fd 4E010000 		.4byte	.LASF119
 3955 0801 01       		.byte	0x1
 3956 0802 E101     		.2byte	0x1e1
 3957 0804 7E000000 		.4byte	0x7e
 3958 0808 03       		.uleb128 0x3
 3959 0809 91       		.byte	0x91
 3960 080a A87F     		.sleb128 -88
 3961 080c 1C       		.uleb128 0x1c
 3962 080d B9040000 		.4byte	.LASF120
 3963 0811 01       		.byte	0x1
 3964 0812 E101     		.2byte	0x1e1
 3965 0814 7E000000 		.4byte	0x7e
 3966 0818 03       		.uleb128 0x3
 3967 0819 91       		.byte	0x91
 3968 081a A47F     		.sleb128 -92
 3969 081c 1C       		.uleb128 0x1c
 3970 081d 70040000 		.4byte	.LASF121
 3971 0821 01       		.byte	0x1
 3972 0822 E101     		.2byte	0x1e1
 3973 0824 7E000000 		.4byte	0x7e
 3974 0828 03       		.uleb128 0x3
 3975 0829 91       		.byte	0x91
 3976 082a A07F     		.sleb128 -96
 3977 082c 21       		.uleb128 0x21
 3978 082d 00000000 		.4byte	.Ldebug_ranges0+0
 3979 0831 1C       		.uleb128 0x1c
 3980 0832 1F050000 		.4byte	.LASF122
 3981 0836 01       		.byte	0x1
 3982 0837 0A02     		.2byte	0x20a
 3983 0839 52080000 		.4byte	0x852
 3984 083d 03       		.uleb128 0x3
 3985 083e 91       		.byte	0x91
 3986 083f 987F     		.sleb128 -104
 3987 0841 1C       		.uleb128 0x1c
 3988 0842 89080000 		.4byte	.LASF123
 3989 0846 01       		.byte	0x1
 3990 0847 0D02     		.2byte	0x20d
 3991 0849 AD000000 		.4byte	0xad
 3992 084d 02       		.uleb128 0x2
 3993 084e 91       		.byte	0x91
 3994 084f 6F       		.sleb128 -17
 3995 0850 00       		.byte	0
 3996 0851 00       		.byte	0
 3997 0852 08       		.uleb128 0x8
 3998 0853 F7000000 		.4byte	0xf7
 3999 0857 62080000 		.4byte	0x862
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 91


 4000 085b 09       		.uleb128 0x9
 4001 085c 05010000 		.4byte	0x105
 4002 0860 05       		.byte	0x5
 4003 0861 00       		.byte	0
 4004 0862 1F       		.uleb128 0x1f
 4005 0863 7C020000 		.4byte	.LASF124
 4006 0867 01       		.byte	0x1
 4007 0868 1E02     		.2byte	0x21e
 4008 086a 00000000 		.4byte	.LFB82
 4009 086e 68010000 		.4byte	.LFE82-.LFB82
 4010 0872 01       		.uleb128 0x1
 4011 0873 9C       		.byte	0x9c
 4012 0874 92080000 		.4byte	0x892
 4013 0878 14       		.uleb128 0x14
 4014 0879 DA000000 		.4byte	.LBB11
 4015 087d 38000000 		.4byte	.LBE11-.LBB11
 4016 0881 1C       		.uleb128 0x1c
 4017 0882 E3060000 		.4byte	.LASF125
 4018 0886 01       		.byte	0x1
 4019 0887 4C02     		.2byte	0x24c
 4020 0889 0A070000 		.4byte	0x70a
 4021 088d 02       		.uleb128 0x2
 4022 088e 91       		.byte	0x91
 4023 088f 6C       		.sleb128 -20
 4024 0890 00       		.byte	0
 4025 0891 00       		.byte	0
 4026 0892 1B       		.uleb128 0x1b
 4027 0893 DB020000 		.4byte	.LASF126
 4028 0897 01       		.byte	0x1
 4029 0898 5F02     		.2byte	0x25f
 4030 089a 57000000 		.4byte	0x57
 4031 089e 00000000 		.4byte	.LFB83
 4032 08a2 44010000 		.4byte	.LFE83-.LFB83
 4033 08a6 01       		.uleb128 0x1
 4034 08a7 9C       		.byte	0x9c
 4035 08a8 4E090000 		.4byte	0x94e
 4036 08ac 1C       		.uleb128 0x1c
 4037 08ad 51040000 		.4byte	.LASF127
 4038 08b1 01       		.byte	0x1
 4039 08b2 6A02     		.2byte	0x26a
 4040 08b4 57000000 		.4byte	0x57
 4041 08b8 02       		.uleb128 0x2
 4042 08b9 91       		.byte	0x91
 4043 08ba 74       		.sleb128 -12
 4044 08bb 14       		.uleb128 0x14
 4045 08bc 30000000 		.4byte	.LBB12
 4046 08c0 DE000000 		.4byte	.LBE12-.LBB12
 4047 08c4 1C       		.uleb128 0x1c
 4048 08c5 A0020000 		.4byte	.LASF97
 4049 08c9 01       		.byte	0x1
 4050 08ca 6F02     		.2byte	0x26f
 4051 08cc 4E090000 		.4byte	0x94e
 4052 08d0 02       		.uleb128 0x2
 4053 08d1 91       		.byte	0x91
 4054 08d2 54       		.sleb128 -44
 4055 08d3 1A       		.uleb128 0x1a
 4056 08d4 7400     		.ascii	"t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 92


 4057 08d6 01       		.byte	0x1
 4058 08d7 7502     		.2byte	0x275
 4059 08d9 2D010000 		.4byte	0x12d
 4060 08dd 03       		.uleb128 0x3
 4061 08de 91       		.byte	0x91
 4062 08df 947F     		.sleb128 -108
 4063 08e1 1C       		.uleb128 0x1c
 4064 08e2 1C020000 		.4byte	.LASF128
 4065 08e6 01       		.byte	0x1
 4066 08e7 7802     		.2byte	0x278
 4067 08e9 7E000000 		.4byte	0x7e
 4068 08ed 02       		.uleb128 0x2
 4069 08ee 91       		.byte	0x91
 4070 08ef 50       		.sleb128 -48
 4071 08f0 1C       		.uleb128 0x1c
 4072 08f1 E7040000 		.4byte	.LASF129
 4073 08f5 01       		.byte	0x1
 4074 08f6 7802     		.2byte	0x278
 4075 08f8 7E000000 		.4byte	0x7e
 4076 08fc 02       		.uleb128 0x2
 4077 08fd 91       		.byte	0x91
 4078 08fe 4C       		.sleb128 -52
 4079 08ff 1A       		.uleb128 0x1a
 4080 0900 64617900 		.ascii	"day\000"
 4081 0904 01       		.byte	0x1
 4082 0905 7802     		.2byte	0x278
 4083 0907 7E000000 		.4byte	0x7e
 4084 090b 02       		.uleb128 0x2
 4085 090c 91       		.byte	0x91
 4086 090d 48       		.sleb128 -56
 4087 090e 1C       		.uleb128 0x1c
 4088 090f 79050000 		.4byte	.LASF130
 4089 0913 01       		.byte	0x1
 4090 0914 7802     		.2byte	0x278
 4091 0916 7E000000 		.4byte	0x7e
 4092 091a 02       		.uleb128 0x2
 4093 091b 91       		.byte	0x91
 4094 091c 44       		.sleb128 -60
 4095 091d 1C       		.uleb128 0x1c
 4096 091e 96070000 		.4byte	.LASF131
 4097 0922 01       		.byte	0x1
 4098 0923 7802     		.2byte	0x278
 4099 0925 7E000000 		.4byte	0x7e
 4100 0929 02       		.uleb128 0x2
 4101 092a 91       		.byte	0x91
 4102 092b 40       		.sleb128 -64
 4103 092c 1C       		.uleb128 0x1c
 4104 092d 15020000 		.4byte	.LASF132
 4105 0931 01       		.byte	0x1
 4106 0932 7802     		.2byte	0x278
 4107 0934 7E000000 		.4byte	0x7e
 4108 0938 03       		.uleb128 0x3
 4109 0939 91       		.byte	0x91
 4110 093a BC7F     		.sleb128 -68
 4111 093c 1C       		.uleb128 0x1c
 4112 093d 00000000 		.4byte	.LASF133
 4113 0941 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 93


 4114 0942 7802     		.2byte	0x278
 4115 0944 7E000000 		.4byte	0x7e
 4116 0948 03       		.uleb128 0x3
 4117 0949 91       		.byte	0x91
 4118 094a B87F     		.sleb128 -72
 4119 094c 00       		.byte	0
 4120 094d 00       		.byte	0
 4121 094e 08       		.uleb128 0x8
 4122 094f F7000000 		.4byte	0xf7
 4123 0953 5E090000 		.4byte	0x95e
 4124 0957 09       		.uleb128 0x9
 4125 0958 05010000 		.4byte	0x105
 4126 095c 1D       		.byte	0x1d
 4127 095d 00       		.byte	0
 4128 095e 22       		.uleb128 0x22
 4129 095f 46020000 		.4byte	.LASF134
 4130 0963 01       		.byte	0x1
 4131 0964 9802     		.2byte	0x298
 4132 0966 AD000000 		.4byte	0xad
 4133 096a 00000000 		.4byte	.LFB84
 4134 096e 14000000 		.4byte	.LFE84-.LFB84
 4135 0972 01       		.uleb128 0x1
 4136 0973 9C       		.byte	0x9c
 4137 0974 1D       		.uleb128 0x1d
 4138 0975 05030000 		.4byte	.LASF135
 4139 0979 01       		.byte	0x1
 4140 097a 9D02     		.2byte	0x29d
 4141 097c 00000000 		.4byte	.LFB85
 4142 0980 1A000000 		.4byte	.LFE85-.LFB85
 4143 0984 01       		.uleb128 0x1
 4144 0985 9C       		.byte	0x9c
 4145 0986 1D       		.uleb128 0x1d
 4146 0987 2A010000 		.4byte	.LASF136
 4147 098b 01       		.byte	0x1
 4148 098c AA02     		.2byte	0x2aa
 4149 098e 00000000 		.4byte	.LFB86
 4150 0992 2A000000 		.4byte	.LFE86-.LFB86
 4151 0996 01       		.uleb128 0x1
 4152 0997 9C       		.byte	0x9c
 4153 0998 1B       		.uleb128 0x1b
 4154 0999 34060000 		.4byte	.LASF137
 4155 099d 01       		.byte	0x1
 4156 099e BD02     		.2byte	0x2bd
 4157 09a0 37030000 		.4byte	0x337
 4158 09a4 00000000 		.4byte	.LFB87
 4159 09a8 7C020000 		.4byte	.LFE87-.LFB87
 4160 09ac 01       		.uleb128 0x1
 4161 09ad 9C       		.byte	0x9c
 4162 09ae 410A0000 		.4byte	0xa41
 4163 09b2 1A       		.uleb128 0x1a
 4164 09b3 67707300 		.ascii	"gps\000"
 4165 09b7 01       		.byte	0x1
 4166 09b8 BE02     		.2byte	0x2be
 4167 09ba 37030000 		.4byte	0x337
 4168 09be 02       		.uleb128 0x2
 4169 09bf 91       		.byte	0x91
 4170 09c0 4C       		.sleb128 -52
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 94


 4171 09c1 1C       		.uleb128 0x1c
 4172 09c2 57080000 		.4byte	.LASF138
 4173 09c6 01       		.byte	0x1
 4174 09c7 CA02     		.2byte	0x2ca
 4175 09c9 57000000 		.4byte	0x57
 4176 09cd 02       		.uleb128 0x2
 4177 09ce 91       		.byte	0x91
 4178 09cf 68       		.sleb128 -24
 4179 09d0 1C       		.uleb128 0x1c
 4180 09d1 5E070000 		.4byte	.LASF139
 4181 09d5 01       		.byte	0x1
 4182 09d6 F102     		.2byte	0x2f1
 4183 09d8 AD000000 		.4byte	0xad
 4184 09dc 02       		.uleb128 0x2
 4185 09dd 91       		.byte	0x91
 4186 09de 67       		.sleb128 -25
 4187 09df 1A       		.uleb128 0x1a
 4188 09e0 6C617400 		.ascii	"lat\000"
 4189 09e4 01       		.byte	0x1
 4190 09e5 FD02     		.2byte	0x2fd
 4191 09e7 E9000000 		.4byte	0xe9
 4192 09eb 02       		.uleb128 0x2
 4193 09ec 91       		.byte	0x91
 4194 09ed 48       		.sleb128 -56
 4195 09ee 1A       		.uleb128 0x1a
 4196 09ef 6C6F6E00 		.ascii	"lon\000"
 4197 09f3 01       		.byte	0x1
 4198 09f4 FE02     		.2byte	0x2fe
 4199 09f6 E9000000 		.4byte	0xe9
 4200 09fa 02       		.uleb128 0x2
 4201 09fb 91       		.byte	0x91
 4202 09fc 44       		.sleb128 -60
 4203 09fd 1A       		.uleb128 0x1a
 4204 09fe 616C7400 		.ascii	"alt\000"
 4205 0a02 01       		.byte	0x1
 4206 0a03 FF02     		.2byte	0x2ff
 4207 0a05 E9000000 		.4byte	0xe9
 4208 0a09 02       		.uleb128 0x2
 4209 0a0a 91       		.byte	0x91
 4210 0a0b 40       		.sleb128 -64
 4211 0a0c 1A       		.uleb128 0x1a
 4212 0a0d 733100   		.ascii	"s1\000"
 4213 0a10 01       		.byte	0x1
 4214 0a11 0303     		.2byte	0x303
 4215 0a13 0C010000 		.4byte	0x10c
 4216 0a17 02       		.uleb128 0x2
 4217 0a18 91       		.byte	0x91
 4218 0a19 60       		.sleb128 -32
 4219 0a1a 1C       		.uleb128 0x1c
 4220 0a1b 5E050000 		.4byte	.LASF110
 4221 0a1f 01       		.byte	0x1
 4222 0a20 0603     		.2byte	0x306
 4223 0a22 7E000000 		.4byte	0x7e
 4224 0a26 02       		.uleb128 0x2
 4225 0a27 91       		.byte	0x91
 4226 0a28 5C       		.sleb128 -36
 4227 0a29 14       		.uleb128 0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 95


 4228 0a2a B4000000 		.4byte	.LBB13
 4229 0a2e 38000000 		.4byte	.LBE13-.LBB13
 4230 0a32 1A       		.uleb128 0x1a
 4231 0a33 6900     		.ascii	"i\000"
 4232 0a35 01       		.byte	0x1
 4233 0a36 F202     		.2byte	0x2f2
 4234 0a38 B9000000 		.4byte	0xb9
 4235 0a3c 02       		.uleb128 0x2
 4236 0a3d 91       		.byte	0x91
 4237 0a3e 6E       		.sleb128 -18
 4238 0a3f 00       		.byte	0
 4239 0a40 00       		.byte	0
 4240 0a41 23       		.uleb128 0x23
 4241 0a42 78010000 		.4byte	.LASF140
 4242 0a46 0A       		.byte	0xa
 4243 0a47 1207     		.2byte	0x712
 4244 0a49 4D0A0000 		.4byte	0xa4d
 4245 0a4d 0F       		.uleb128 0xf
 4246 0a4e 97000000 		.4byte	0x97
 4247 0a52 24       		.uleb128 0x24
 4248 0a53 60000000 		.4byte	.LASF141
 4249 0a57 07       		.byte	0x7
 4250 0a58 11       		.byte	0x11
 4251 0a59 87030000 		.4byte	0x387
 4252 0a5d 05       		.uleb128 0x5
 4253 0a5e 03       		.byte	0x3
 4254 0a5f 00000000 		.4byte	buffer_overflow
 4255 0a63 24       		.uleb128 0x24
 4256 0a64 C5040000 		.4byte	.LASF142
 4257 0a68 07       		.byte	0x7
 4258 0a69 22       		.byte	0x22
 4259 0a6a B9000000 		.4byte	0xb9
 4260 0a6e 05       		.uleb128 0x5
 4261 0a6f 03       		.byte	0x3
 4262 0a70 00000000 		.4byte	dataPointsInStack
 4263 0a74 24       		.uleb128 0x24
 4264 0a75 E5070000 		.4byte	.LASF143
 4265 0a79 07       		.byte	0x7
 4266 0a7a 23       		.byte	0x23
 4267 0a7b B9000000 		.4byte	0xb9
 4268 0a7f 05       		.uleb128 0x5
 4269 0a80 03       		.byte	0x3
 4270 0a81 00000000 		.4byte	dataPointsInStackDesired
 4271 0a85 08       		.uleb128 0x8
 4272 0a86 3B020000 		.4byte	0x23b
 4273 0a8a 950A0000 		.4byte	0xa95
 4274 0a8e 09       		.uleb128 0x9
 4275 0a8f 05010000 		.4byte	0x105
 4276 0a93 95       		.byte	0x95
 4277 0a94 00       		.byte	0
 4278 0a95 24       		.uleb128 0x24
 4279 0a96 C9030000 		.4byte	.LASF144
 4280 0a9a 07       		.byte	0x7
 4281 0a9b 24       		.byte	0x24
 4282 0a9c 850A0000 		.4byte	0xa85
 4283 0aa0 05       		.uleb128 0x5
 4284 0aa1 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 96


 4285 0aa2 00000000 		.4byte	data
 4286 0aa6 24       		.uleb128 0x24
 4287 0aa7 5A010000 		.4byte	.LASF145
 4288 0aab 08       		.byte	0x8
 4289 0aac 21       		.byte	0x21
 4290 0aad AD000000 		.4byte	0xad
 4291 0ab1 05       		.uleb128 0x5
 4292 0ab2 03       		.byte	0x3
 4293 0ab3 00000000 		.4byte	modem_state
 4294 0ab7 24       		.uleb128 0x24
 4295 0ab8 47070000 		.4byte	.LASF146
 4296 0abc 08       		.byte	0x8
 4297 0abd 64       		.byte	0x64
 4298 0abe DD000000 		.4byte	0xdd
 4299 0ac2 05       		.uleb128 0x5
 4300 0ac3 03       		.byte	0x3
 4301 0ac4 00000000 		.4byte	modem_start_time_stamp
 4302 0ac8 24       		.uleb128 0x24
 4303 0ac9 DF030000 		.4byte	.LASF71
 4304 0acd 08       		.byte	0x8
 4305 0ace 65       		.byte	0x65
 4306 0acf 73020000 		.4byte	0x273
 4307 0ad3 05       		.uleb128 0x5
 4308 0ad4 03       		.byte	0x3
 4309 0ad5 00000000 		.4byte	modem_info
 4310 0ad9 24       		.uleb128 0x24
 4311 0ada 85010000 		.4byte	.LASF147
 4312 0ade 08       		.byte	0x8
 4313 0adf 66       		.byte	0x66
 4314 0ae0 E7020000 		.4byte	0x2e7
 4315 0ae4 05       		.uleb128 0x5
 4316 0ae5 03       		.byte	0x3
 4317 0ae6 00000000 		.4byte	modem_stats
 4318 0aea 24       		.uleb128 0x24
 4319 0aeb 64050000 		.4byte	.LASF148
 4320 0aef 08       		.byte	0x8
 4321 0af0 67       		.byte	0x67
 4322 0af1 8E030000 		.4byte	0x38e
 4323 0af5 05       		.uleb128 0x5
 4324 0af6 03       		.byte	0x3
 4325 0af7 00000000 		.4byte	updatable_parameters
 4326 0afb 08       		.uleb128 0x8
 4327 0afc F7000000 		.4byte	0xf7
 4328 0b00 0C0B0000 		.4byte	0xb0c
 4329 0b04 25       		.uleb128 0x25
 4330 0b05 05010000 		.4byte	0x105
 4331 0b09 0F27     		.2byte	0x270f
 4332 0b0b 00       		.byte	0
 4333 0b0c 24       		.uleb128 0x24
 4334 0b0d 61080000 		.4byte	.LASF149
 4335 0b11 09       		.byte	0x9
 4336 0b12 18       		.byte	0x18
 4337 0b13 FB0A0000 		.4byte	0xafb
 4338 0b17 05       		.uleb128 0x5
 4339 0b18 03       		.byte	0x3
 4340 0b19 00000000 		.4byte	http_request
 4341 0b1d 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 97


 4342 0b1e F0010000 		.4byte	.LASF150
 4343 0b22 09       		.byte	0x9
 4344 0b23 19       		.byte	0x19
 4345 0b24 FB0A0000 		.4byte	0xafb
 4346 0b28 05       		.uleb128 0x5
 4347 0b29 03       		.byte	0x3
 4348 0b2a 00000000 		.4byte	http_body
 4349 0b2e 08       		.uleb128 0x8
 4350 0b2f F7000000 		.4byte	0xf7
 4351 0b33 3E0B0000 		.4byte	0xb3e
 4352 0b37 09       		.uleb128 0x9
 4353 0b38 05010000 		.4byte	0x105
 4354 0b3c C7       		.byte	0xc7
 4355 0b3d 00       		.byte	0
 4356 0b3e 24       		.uleb128 0x24
 4357 0b3f F1060000 		.4byte	.LASF151
 4358 0b43 09       		.byte	0x9
 4359 0b44 1A       		.byte	0x1a
 4360 0b45 2E0B0000 		.4byte	0xb2e
 4361 0b49 05       		.uleb128 0x5
 4362 0b4a 03       		.byte	0x3
 4363 0b4b 00000000 		.4byte	http_route
 4364 0b4f 24       		.uleb128 0x24
 4365 0b50 55060000 		.4byte	.LASF152
 4366 0b54 09       		.byte	0x9
 4367 0b55 41       		.byte	0x41
 4368 0b56 09040000 		.4byte	0x409
 4369 0b5a 05       		.uleb128 0x5
 4370 0b5b 03       		.byte	0x3
 4371 0b5c 00000000 		.4byte	system_info
 4372 0b60 24       		.uleb128 0x24
 4373 0b61 FE050000 		.4byte	.LASF153
 4374 0b65 09       		.byte	0x9
 4375 0b66 53       		.byte	0x53
 4376 0b67 45040000 		.4byte	0x445
 4377 0b6b 05       		.uleb128 0x5
 4378 0b6c 03       		.byte	0x3
 4379 0b6d 00000000 		.4byte	system_settings
 4380 0b71 24       		.uleb128 0x24
 4381 0b72 6B010000 		.4byte	.LASF154
 4382 0b76 09       		.byte	0x9
 4383 0b77 6F       		.byte	0x6f
 4384 0b78 D2030000 		.4byte	0x3d2
 4385 0b7c 05       		.uleb128 0x5
 4386 0b7d 03       		.byte	0x3
 4387 0b7e 00000000 		.4byte	alarmMeasure
 4388 0b82 24       		.uleb128 0x24
 4389 0b83 BF010000 		.4byte	.LASF155
 4390 0b87 09       		.byte	0x9
 4391 0b88 70       		.byte	0x70
 4392 0b89 AD000000 		.4byte	0xad
 4393 0b8d 05       		.uleb128 0x5
 4394 0b8e 03       		.byte	0x3
 4395 0b8f 00000000 		.4byte	timeToMeasure
 4396 0b93 24       		.uleb128 0x24
 4397 0b94 46030000 		.4byte	.LASF156
 4398 0b98 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 98


 4399 0b99 71       		.byte	0x71
 4400 0b9a D2030000 		.4byte	0x3d2
 4401 0b9e 05       		.uleb128 0x5
 4402 0b9f 03       		.byte	0x3
 4403 0ba0 00000000 		.4byte	alarmSync
 4404 0ba4 24       		.uleb128 0x24
 4405 0ba5 E5010000 		.4byte	.LASF157
 4406 0ba9 09       		.byte	0x9
 4407 0baa 72       		.byte	0x72
 4408 0bab AD000000 		.4byte	0xad
 4409 0baf 05       		.uleb128 0x5
 4410 0bb0 03       		.byte	0x3
 4411 0bb1 00000000 		.4byte	timeToSync
 4412 0bb5 24       		.uleb128 0x24
 4413 0bb6 3C050000 		.4byte	.LASF158
 4414 0bba 09       		.byte	0x9
 4415 0bbb 73       		.byte	0x73
 4416 0bbc AD000000 		.4byte	0xad
 4417 0bc0 05       		.uleb128 0x5
 4418 0bc1 03       		.byte	0x3
 4419 0bc2 00000000 		.4byte	timeToSycnRemoteParams
 4420 0bc6 26       		.uleb128 0x26
 4421 0bc7 68657900 		.ascii	"hey\000"
 4422 0bcb 09       		.byte	0x9
 4423 0bcc 74       		.byte	0x74
 4424 0bcd AD000000 		.4byte	0xad
 4425 0bd1 05       		.uleb128 0x5
 4426 0bd2 03       		.byte	0x3
 4427 0bd3 00000000 		.4byte	hey
 4428 0bd7 08       		.uleb128 0x8
 4429 0bd8 F7000000 		.4byte	0xf7
 4430 0bdc E80B0000 		.4byte	0xbe8
 4431 0be0 25       		.uleb128 0x25
 4432 0be1 05010000 		.4byte	0x105
 4433 0be5 FF03     		.2byte	0x3ff
 4434 0be7 00       		.byte	0
 4435 0be8 24       		.uleb128 0x24
 4436 0be9 0A050000 		.4byte	.LASF159
 4437 0bed 01       		.byte	0x1
 4438 0bee 05       		.byte	0x5
 4439 0bef D70B0000 		.4byte	0xbd7
 4440 0bf3 05       		.uleb128 0x5
 4441 0bf4 03       		.byte	0x3
 4442 0bf5 00000000 		.4byte	uart_received_string
 4443 0bf9 24       		.uleb128 0x24
 4444 0bfa 0F070000 		.4byte	.LASF160
 4445 0bfe 01       		.byte	0x1
 4446 0bff 06       		.byte	0x6
 4447 0c00 D1000000 		.4byte	0xd1
 4448 0c04 05       		.uleb128 0x5
 4449 0c05 03       		.byte	0x3
 4450 0c06 00000000 		.4byte	uart_string_index
 4451 0c0a 00       		.byte	0
 4452              		.section	.debug_abbrev,"",%progbits
 4453              	.Ldebug_abbrev0:
 4454 0000 01       		.uleb128 0x1
 4455 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 99


 4456 0002 01       		.byte	0x1
 4457 0003 25       		.uleb128 0x25
 4458 0004 0E       		.uleb128 0xe
 4459 0005 13       		.uleb128 0x13
 4460 0006 0B       		.uleb128 0xb
 4461 0007 03       		.uleb128 0x3
 4462 0008 0E       		.uleb128 0xe
 4463 0009 1B       		.uleb128 0x1b
 4464 000a 0E       		.uleb128 0xe
 4465 000b 55       		.uleb128 0x55
 4466 000c 17       		.uleb128 0x17
 4467 000d 11       		.uleb128 0x11
 4468 000e 01       		.uleb128 0x1
 4469 000f 10       		.uleb128 0x10
 4470 0010 17       		.uleb128 0x17
 4471 0011 00       		.byte	0
 4472 0012 00       		.byte	0
 4473 0013 02       		.uleb128 0x2
 4474 0014 24       		.uleb128 0x24
 4475 0015 00       		.byte	0
 4476 0016 0B       		.uleb128 0xb
 4477 0017 0B       		.uleb128 0xb
 4478 0018 3E       		.uleb128 0x3e
 4479 0019 0B       		.uleb128 0xb
 4480 001a 03       		.uleb128 0x3
 4481 001b 0E       		.uleb128 0xe
 4482 001c 00       		.byte	0
 4483 001d 00       		.byte	0
 4484 001e 03       		.uleb128 0x3
 4485 001f 16       		.uleb128 0x16
 4486 0020 00       		.byte	0
 4487 0021 03       		.uleb128 0x3
 4488 0022 0E       		.uleb128 0xe
 4489 0023 3A       		.uleb128 0x3a
 4490 0024 0B       		.uleb128 0xb
 4491 0025 3B       		.uleb128 0x3b
 4492 0026 0B       		.uleb128 0xb
 4493 0027 49       		.uleb128 0x49
 4494 0028 13       		.uleb128 0x13
 4495 0029 00       		.byte	0
 4496 002a 00       		.byte	0
 4497 002b 04       		.uleb128 0x4
 4498 002c 24       		.uleb128 0x24
 4499 002d 00       		.byte	0
 4500 002e 0B       		.uleb128 0xb
 4501 002f 0B       		.uleb128 0xb
 4502 0030 3E       		.uleb128 0x3e
 4503 0031 0B       		.uleb128 0xb
 4504 0032 03       		.uleb128 0x3
 4505 0033 08       		.uleb128 0x8
 4506 0034 00       		.byte	0
 4507 0035 00       		.byte	0
 4508 0036 05       		.uleb128 0x5
 4509 0037 16       		.uleb128 0x16
 4510 0038 00       		.byte	0
 4511 0039 03       		.uleb128 0x3
 4512 003a 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 100


 4513 003b 3A       		.uleb128 0x3a
 4514 003c 0B       		.uleb128 0xb
 4515 003d 3B       		.uleb128 0x3b
 4516 003e 05       		.uleb128 0x5
 4517 003f 49       		.uleb128 0x49
 4518 0040 13       		.uleb128 0x13
 4519 0041 00       		.byte	0
 4520 0042 00       		.byte	0
 4521 0043 06       		.uleb128 0x6
 4522 0044 0F       		.uleb128 0xf
 4523 0045 00       		.byte	0
 4524 0046 0B       		.uleb128 0xb
 4525 0047 0B       		.uleb128 0xb
 4526 0048 49       		.uleb128 0x49
 4527 0049 13       		.uleb128 0x13
 4528 004a 00       		.byte	0
 4529 004b 00       		.byte	0
 4530 004c 07       		.uleb128 0x7
 4531 004d 26       		.uleb128 0x26
 4532 004e 00       		.byte	0
 4533 004f 49       		.uleb128 0x49
 4534 0050 13       		.uleb128 0x13
 4535 0051 00       		.byte	0
 4536 0052 00       		.byte	0
 4537 0053 08       		.uleb128 0x8
 4538 0054 01       		.uleb128 0x1
 4539 0055 01       		.byte	0x1
 4540 0056 49       		.uleb128 0x49
 4541 0057 13       		.uleb128 0x13
 4542 0058 01       		.uleb128 0x1
 4543 0059 13       		.uleb128 0x13
 4544 005a 00       		.byte	0
 4545 005b 00       		.byte	0
 4546 005c 09       		.uleb128 0x9
 4547 005d 21       		.uleb128 0x21
 4548 005e 00       		.byte	0
 4549 005f 49       		.uleb128 0x49
 4550 0060 13       		.uleb128 0x13
 4551 0061 2F       		.uleb128 0x2f
 4552 0062 0B       		.uleb128 0xb
 4553 0063 00       		.byte	0
 4554 0064 00       		.byte	0
 4555 0065 0A       		.uleb128 0xa
 4556 0066 13       		.uleb128 0x13
 4557 0067 01       		.byte	0x1
 4558 0068 03       		.uleb128 0x3
 4559 0069 08       		.uleb128 0x8
 4560 006a 0B       		.uleb128 0xb
 4561 006b 0B       		.uleb128 0xb
 4562 006c 3A       		.uleb128 0x3a
 4563 006d 0B       		.uleb128 0xb
 4564 006e 3B       		.uleb128 0x3b
 4565 006f 0B       		.uleb128 0xb
 4566 0070 01       		.uleb128 0x1
 4567 0071 13       		.uleb128 0x13
 4568 0072 00       		.byte	0
 4569 0073 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 101


 4570 0074 0B       		.uleb128 0xb
 4571 0075 0D       		.uleb128 0xd
 4572 0076 00       		.byte	0
 4573 0077 03       		.uleb128 0x3
 4574 0078 0E       		.uleb128 0xe
 4575 0079 3A       		.uleb128 0x3a
 4576 007a 0B       		.uleb128 0xb
 4577 007b 3B       		.uleb128 0x3b
 4578 007c 0B       		.uleb128 0xb
 4579 007d 49       		.uleb128 0x49
 4580 007e 13       		.uleb128 0x13
 4581 007f 38       		.uleb128 0x38
 4582 0080 0B       		.uleb128 0xb
 4583 0081 00       		.byte	0
 4584 0082 00       		.byte	0
 4585 0083 0C       		.uleb128 0xc
 4586 0084 13       		.uleb128 0x13
 4587 0085 01       		.byte	0x1
 4588 0086 0B       		.uleb128 0xb
 4589 0087 05       		.uleb128 0x5
 4590 0088 3A       		.uleb128 0x3a
 4591 0089 0B       		.uleb128 0xb
 4592 008a 3B       		.uleb128 0x3b
 4593 008b 0B       		.uleb128 0xb
 4594 008c 01       		.uleb128 0x1
 4595 008d 13       		.uleb128 0x13
 4596 008e 00       		.byte	0
 4597 008f 00       		.byte	0
 4598 0090 0D       		.uleb128 0xd
 4599 0091 13       		.uleb128 0x13
 4600 0092 01       		.byte	0x1
 4601 0093 0B       		.uleb128 0xb
 4602 0094 0B       		.uleb128 0xb
 4603 0095 3A       		.uleb128 0x3a
 4604 0096 0B       		.uleb128 0xb
 4605 0097 3B       		.uleb128 0x3b
 4606 0098 0B       		.uleb128 0xb
 4607 0099 01       		.uleb128 0x1
 4608 009a 13       		.uleb128 0x13
 4609 009b 00       		.byte	0
 4610 009c 00       		.byte	0
 4611 009d 0E       		.uleb128 0xe
 4612 009e 0D       		.uleb128 0xd
 4613 009f 00       		.byte	0
 4614 00a0 03       		.uleb128 0x3
 4615 00a1 08       		.uleb128 0x8
 4616 00a2 3A       		.uleb128 0x3a
 4617 00a3 0B       		.uleb128 0xb
 4618 00a4 3B       		.uleb128 0x3b
 4619 00a5 0B       		.uleb128 0xb
 4620 00a6 49       		.uleb128 0x49
 4621 00a7 13       		.uleb128 0x13
 4622 00a8 38       		.uleb128 0x38
 4623 00a9 0B       		.uleb128 0xb
 4624 00aa 00       		.byte	0
 4625 00ab 00       		.byte	0
 4626 00ac 0F       		.uleb128 0xf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 102


 4627 00ad 35       		.uleb128 0x35
 4628 00ae 00       		.byte	0
 4629 00af 49       		.uleb128 0x49
 4630 00b0 13       		.uleb128 0x13
 4631 00b1 00       		.byte	0
 4632 00b2 00       		.byte	0
 4633 00b3 10       		.uleb128 0x10
 4634 00b4 2E       		.uleb128 0x2e
 4635 00b5 00       		.byte	0
 4636 00b6 3F       		.uleb128 0x3f
 4637 00b7 19       		.uleb128 0x19
 4638 00b8 03       		.uleb128 0x3
 4639 00b9 0E       		.uleb128 0xe
 4640 00ba 3A       		.uleb128 0x3a
 4641 00bb 0B       		.uleb128 0xb
 4642 00bc 3B       		.uleb128 0x3b
 4643 00bd 0B       		.uleb128 0xb
 4644 00be 27       		.uleb128 0x27
 4645 00bf 19       		.uleb128 0x19
 4646 00c0 11       		.uleb128 0x11
 4647 00c1 01       		.uleb128 0x1
 4648 00c2 12       		.uleb128 0x12
 4649 00c3 06       		.uleb128 0x6
 4650 00c4 40       		.uleb128 0x40
 4651 00c5 18       		.uleb128 0x18
 4652 00c6 9642     		.uleb128 0x2116
 4653 00c8 19       		.uleb128 0x19
 4654 00c9 00       		.byte	0
 4655 00ca 00       		.byte	0
 4656 00cb 11       		.uleb128 0x11
 4657 00cc 2E       		.uleb128 0x2e
 4658 00cd 00       		.byte	0
 4659 00ce 3F       		.uleb128 0x3f
 4660 00cf 19       		.uleb128 0x19
 4661 00d0 03       		.uleb128 0x3
 4662 00d1 0E       		.uleb128 0xe
 4663 00d2 3A       		.uleb128 0x3a
 4664 00d3 0B       		.uleb128 0xb
 4665 00d4 3B       		.uleb128 0x3b
 4666 00d5 0B       		.uleb128 0xb
 4667 00d6 11       		.uleb128 0x11
 4668 00d7 01       		.uleb128 0x1
 4669 00d8 12       		.uleb128 0x12
 4670 00d9 06       		.uleb128 0x6
 4671 00da 40       		.uleb128 0x40
 4672 00db 18       		.uleb128 0x18
 4673 00dc 9642     		.uleb128 0x2116
 4674 00de 19       		.uleb128 0x19
 4675 00df 00       		.byte	0
 4676 00e0 00       		.byte	0
 4677 00e1 12       		.uleb128 0x12
 4678 00e2 2E       		.uleb128 0x2e
 4679 00e3 01       		.byte	0x1
 4680 00e4 3F       		.uleb128 0x3f
 4681 00e5 19       		.uleb128 0x19
 4682 00e6 03       		.uleb128 0x3
 4683 00e7 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 103


 4684 00e8 3A       		.uleb128 0x3a
 4685 00e9 0B       		.uleb128 0xb
 4686 00ea 3B       		.uleb128 0x3b
 4687 00eb 0B       		.uleb128 0xb
 4688 00ec 49       		.uleb128 0x49
 4689 00ed 13       		.uleb128 0x13
 4690 00ee 11       		.uleb128 0x11
 4691 00ef 01       		.uleb128 0x1
 4692 00f0 12       		.uleb128 0x12
 4693 00f1 06       		.uleb128 0x6
 4694 00f2 40       		.uleb128 0x40
 4695 00f3 18       		.uleb128 0x18
 4696 00f4 9642     		.uleb128 0x2116
 4697 00f6 19       		.uleb128 0x19
 4698 00f7 01       		.uleb128 0x1
 4699 00f8 13       		.uleb128 0x13
 4700 00f9 00       		.byte	0
 4701 00fa 00       		.byte	0
 4702 00fb 13       		.uleb128 0x13
 4703 00fc 34       		.uleb128 0x34
 4704 00fd 00       		.byte	0
 4705 00fe 03       		.uleb128 0x3
 4706 00ff 0E       		.uleb128 0xe
 4707 0100 3A       		.uleb128 0x3a
 4708 0101 0B       		.uleb128 0xb
 4709 0102 3B       		.uleb128 0x3b
 4710 0103 0B       		.uleb128 0xb
 4711 0104 49       		.uleb128 0x49
 4712 0105 13       		.uleb128 0x13
 4713 0106 02       		.uleb128 0x2
 4714 0107 18       		.uleb128 0x18
 4715 0108 00       		.byte	0
 4716 0109 00       		.byte	0
 4717 010a 14       		.uleb128 0x14
 4718 010b 0B       		.uleb128 0xb
 4719 010c 01       		.byte	0x1
 4720 010d 11       		.uleb128 0x11
 4721 010e 01       		.uleb128 0x1
 4722 010f 12       		.uleb128 0x12
 4723 0110 06       		.uleb128 0x6
 4724 0111 00       		.byte	0
 4725 0112 00       		.byte	0
 4726 0113 15       		.uleb128 0x15
 4727 0114 2E       		.uleb128 0x2e
 4728 0115 01       		.byte	0x1
 4729 0116 3F       		.uleb128 0x3f
 4730 0117 19       		.uleb128 0x19
 4731 0118 03       		.uleb128 0x3
 4732 0119 0E       		.uleb128 0xe
 4733 011a 3A       		.uleb128 0x3a
 4734 011b 0B       		.uleb128 0xb
 4735 011c 3B       		.uleb128 0x3b
 4736 011d 0B       		.uleb128 0xb
 4737 011e 27       		.uleb128 0x27
 4738 011f 19       		.uleb128 0x19
 4739 0120 49       		.uleb128 0x49
 4740 0121 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 104


 4741 0122 11       		.uleb128 0x11
 4742 0123 01       		.uleb128 0x1
 4743 0124 12       		.uleb128 0x12
 4744 0125 06       		.uleb128 0x6
 4745 0126 40       		.uleb128 0x40
 4746 0127 18       		.uleb128 0x18
 4747 0128 9642     		.uleb128 0x2116
 4748 012a 19       		.uleb128 0x19
 4749 012b 01       		.uleb128 0x1
 4750 012c 13       		.uleb128 0x13
 4751 012d 00       		.byte	0
 4752 012e 00       		.byte	0
 4753 012f 16       		.uleb128 0x16
 4754 0130 05       		.uleb128 0x5
 4755 0131 00       		.byte	0
 4756 0132 03       		.uleb128 0x3
 4757 0133 0E       		.uleb128 0xe
 4758 0134 3A       		.uleb128 0x3a
 4759 0135 0B       		.uleb128 0xb
 4760 0136 3B       		.uleb128 0x3b
 4761 0137 0B       		.uleb128 0xb
 4762 0138 49       		.uleb128 0x49
 4763 0139 13       		.uleb128 0x13
 4764 013a 02       		.uleb128 0x2
 4765 013b 18       		.uleb128 0x18
 4766 013c 00       		.byte	0
 4767 013d 00       		.byte	0
 4768 013e 17       		.uleb128 0x17
 4769 013f 34       		.uleb128 0x34
 4770 0140 00       		.byte	0
 4771 0141 03       		.uleb128 0x3
 4772 0142 08       		.uleb128 0x8
 4773 0143 3A       		.uleb128 0x3a
 4774 0144 0B       		.uleb128 0xb
 4775 0145 3B       		.uleb128 0x3b
 4776 0146 0B       		.uleb128 0xb
 4777 0147 49       		.uleb128 0x49
 4778 0148 13       		.uleb128 0x13
 4779 0149 02       		.uleb128 0x2
 4780 014a 18       		.uleb128 0x18
 4781 014b 00       		.byte	0
 4782 014c 00       		.byte	0
 4783 014d 18       		.uleb128 0x18
 4784 014e 2E       		.uleb128 0x2e
 4785 014f 01       		.byte	0x1
 4786 0150 3F       		.uleb128 0x3f
 4787 0151 19       		.uleb128 0x19
 4788 0152 03       		.uleb128 0x3
 4789 0153 0E       		.uleb128 0xe
 4790 0154 3A       		.uleb128 0x3a
 4791 0155 0B       		.uleb128 0xb
 4792 0156 3B       		.uleb128 0x3b
 4793 0157 05       		.uleb128 0x5
 4794 0158 27       		.uleb128 0x27
 4795 0159 19       		.uleb128 0x19
 4796 015a 49       		.uleb128 0x49
 4797 015b 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 105


 4798 015c 11       		.uleb128 0x11
 4799 015d 01       		.uleb128 0x1
 4800 015e 12       		.uleb128 0x12
 4801 015f 06       		.uleb128 0x6
 4802 0160 40       		.uleb128 0x40
 4803 0161 18       		.uleb128 0x18
 4804 0162 9642     		.uleb128 0x2116
 4805 0164 19       		.uleb128 0x19
 4806 0165 01       		.uleb128 0x1
 4807 0166 13       		.uleb128 0x13
 4808 0167 00       		.byte	0
 4809 0168 00       		.byte	0
 4810 0169 19       		.uleb128 0x19
 4811 016a 05       		.uleb128 0x5
 4812 016b 00       		.byte	0
 4813 016c 03       		.uleb128 0x3
 4814 016d 0E       		.uleb128 0xe
 4815 016e 3A       		.uleb128 0x3a
 4816 016f 0B       		.uleb128 0xb
 4817 0170 3B       		.uleb128 0x3b
 4818 0171 05       		.uleb128 0x5
 4819 0172 49       		.uleb128 0x49
 4820 0173 13       		.uleb128 0x13
 4821 0174 02       		.uleb128 0x2
 4822 0175 18       		.uleb128 0x18
 4823 0176 00       		.byte	0
 4824 0177 00       		.byte	0
 4825 0178 1A       		.uleb128 0x1a
 4826 0179 34       		.uleb128 0x34
 4827 017a 00       		.byte	0
 4828 017b 03       		.uleb128 0x3
 4829 017c 08       		.uleb128 0x8
 4830 017d 3A       		.uleb128 0x3a
 4831 017e 0B       		.uleb128 0xb
 4832 017f 3B       		.uleb128 0x3b
 4833 0180 05       		.uleb128 0x5
 4834 0181 49       		.uleb128 0x49
 4835 0182 13       		.uleb128 0x13
 4836 0183 02       		.uleb128 0x2
 4837 0184 18       		.uleb128 0x18
 4838 0185 00       		.byte	0
 4839 0186 00       		.byte	0
 4840 0187 1B       		.uleb128 0x1b
 4841 0188 2E       		.uleb128 0x2e
 4842 0189 01       		.byte	0x1
 4843 018a 3F       		.uleb128 0x3f
 4844 018b 19       		.uleb128 0x19
 4845 018c 03       		.uleb128 0x3
 4846 018d 0E       		.uleb128 0xe
 4847 018e 3A       		.uleb128 0x3a
 4848 018f 0B       		.uleb128 0xb
 4849 0190 3B       		.uleb128 0x3b
 4850 0191 05       		.uleb128 0x5
 4851 0192 49       		.uleb128 0x49
 4852 0193 13       		.uleb128 0x13
 4853 0194 11       		.uleb128 0x11
 4854 0195 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 106


 4855 0196 12       		.uleb128 0x12
 4856 0197 06       		.uleb128 0x6
 4857 0198 40       		.uleb128 0x40
 4858 0199 18       		.uleb128 0x18
 4859 019a 9642     		.uleb128 0x2116
 4860 019c 19       		.uleb128 0x19
 4861 019d 01       		.uleb128 0x1
 4862 019e 13       		.uleb128 0x13
 4863 019f 00       		.byte	0
 4864 01a0 00       		.byte	0
 4865 01a1 1C       		.uleb128 0x1c
 4866 01a2 34       		.uleb128 0x34
 4867 01a3 00       		.byte	0
 4868 01a4 03       		.uleb128 0x3
 4869 01a5 0E       		.uleb128 0xe
 4870 01a6 3A       		.uleb128 0x3a
 4871 01a7 0B       		.uleb128 0xb
 4872 01a8 3B       		.uleb128 0x3b
 4873 01a9 05       		.uleb128 0x5
 4874 01aa 49       		.uleb128 0x49
 4875 01ab 13       		.uleb128 0x13
 4876 01ac 02       		.uleb128 0x2
 4877 01ad 18       		.uleb128 0x18
 4878 01ae 00       		.byte	0
 4879 01af 00       		.byte	0
 4880 01b0 1D       		.uleb128 0x1d
 4881 01b1 2E       		.uleb128 0x2e
 4882 01b2 00       		.byte	0
 4883 01b3 3F       		.uleb128 0x3f
 4884 01b4 19       		.uleb128 0x19
 4885 01b5 03       		.uleb128 0x3
 4886 01b6 0E       		.uleb128 0xe
 4887 01b7 3A       		.uleb128 0x3a
 4888 01b8 0B       		.uleb128 0xb
 4889 01b9 3B       		.uleb128 0x3b
 4890 01ba 05       		.uleb128 0x5
 4891 01bb 11       		.uleb128 0x11
 4892 01bc 01       		.uleb128 0x1
 4893 01bd 12       		.uleb128 0x12
 4894 01be 06       		.uleb128 0x6
 4895 01bf 40       		.uleb128 0x40
 4896 01c0 18       		.uleb128 0x18
 4897 01c1 9642     		.uleb128 0x2116
 4898 01c3 19       		.uleb128 0x19
 4899 01c4 00       		.byte	0
 4900 01c5 00       		.byte	0
 4901 01c6 1E       		.uleb128 0x1e
 4902 01c7 2E       		.uleb128 0x2e
 4903 01c8 00       		.byte	0
 4904 01c9 3F       		.uleb128 0x3f
 4905 01ca 19       		.uleb128 0x19
 4906 01cb 03       		.uleb128 0x3
 4907 01cc 0E       		.uleb128 0xe
 4908 01cd 3A       		.uleb128 0x3a
 4909 01ce 0B       		.uleb128 0xb
 4910 01cf 3B       		.uleb128 0x3b
 4911 01d0 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 107


 4912 01d1 49       		.uleb128 0x49
 4913 01d2 13       		.uleb128 0x13
 4914 01d3 11       		.uleb128 0x11
 4915 01d4 01       		.uleb128 0x1
 4916 01d5 12       		.uleb128 0x12
 4917 01d6 06       		.uleb128 0x6
 4918 01d7 40       		.uleb128 0x40
 4919 01d8 18       		.uleb128 0x18
 4920 01d9 9642     		.uleb128 0x2116
 4921 01db 19       		.uleb128 0x19
 4922 01dc 00       		.byte	0
 4923 01dd 00       		.byte	0
 4924 01de 1F       		.uleb128 0x1f
 4925 01df 2E       		.uleb128 0x2e
 4926 01e0 01       		.byte	0x1
 4927 01e1 3F       		.uleb128 0x3f
 4928 01e2 19       		.uleb128 0x19
 4929 01e3 03       		.uleb128 0x3
 4930 01e4 0E       		.uleb128 0xe
 4931 01e5 3A       		.uleb128 0x3a
 4932 01e6 0B       		.uleb128 0xb
 4933 01e7 3B       		.uleb128 0x3b
 4934 01e8 05       		.uleb128 0x5
 4935 01e9 11       		.uleb128 0x11
 4936 01ea 01       		.uleb128 0x1
 4937 01eb 12       		.uleb128 0x12
 4938 01ec 06       		.uleb128 0x6
 4939 01ed 40       		.uleb128 0x40
 4940 01ee 18       		.uleb128 0x18
 4941 01ef 9642     		.uleb128 0x2116
 4942 01f1 19       		.uleb128 0x19
 4943 01f2 01       		.uleb128 0x1
 4944 01f3 13       		.uleb128 0x13
 4945 01f4 00       		.byte	0
 4946 01f5 00       		.byte	0
 4947 01f6 20       		.uleb128 0x20
 4948 01f7 2E       		.uleb128 0x2e
 4949 01f8 00       		.byte	0
 4950 01f9 3F       		.uleb128 0x3f
 4951 01fa 19       		.uleb128 0x19
 4952 01fb 03       		.uleb128 0x3
 4953 01fc 0E       		.uleb128 0xe
 4954 01fd 3A       		.uleb128 0x3a
 4955 01fe 0B       		.uleb128 0xb
 4956 01ff 3B       		.uleb128 0x3b
 4957 0200 05       		.uleb128 0x5
 4958 0201 11       		.uleb128 0x11
 4959 0202 01       		.uleb128 0x1
 4960 0203 12       		.uleb128 0x12
 4961 0204 06       		.uleb128 0x6
 4962 0205 40       		.uleb128 0x40
 4963 0206 18       		.uleb128 0x18
 4964 0207 9742     		.uleb128 0x2117
 4965 0209 19       		.uleb128 0x19
 4966 020a 00       		.byte	0
 4967 020b 00       		.byte	0
 4968 020c 21       		.uleb128 0x21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 108


 4969 020d 0B       		.uleb128 0xb
 4970 020e 01       		.byte	0x1
 4971 020f 55       		.uleb128 0x55
 4972 0210 17       		.uleb128 0x17
 4973 0211 00       		.byte	0
 4974 0212 00       		.byte	0
 4975 0213 22       		.uleb128 0x22
 4976 0214 2E       		.uleb128 0x2e
 4977 0215 00       		.byte	0
 4978 0216 3F       		.uleb128 0x3f
 4979 0217 19       		.uleb128 0x19
 4980 0218 03       		.uleb128 0x3
 4981 0219 0E       		.uleb128 0xe
 4982 021a 3A       		.uleb128 0x3a
 4983 021b 0B       		.uleb128 0xb
 4984 021c 3B       		.uleb128 0x3b
 4985 021d 05       		.uleb128 0x5
 4986 021e 49       		.uleb128 0x49
 4987 021f 13       		.uleb128 0x13
 4988 0220 11       		.uleb128 0x11
 4989 0221 01       		.uleb128 0x1
 4990 0222 12       		.uleb128 0x12
 4991 0223 06       		.uleb128 0x6
 4992 0224 40       		.uleb128 0x40
 4993 0225 18       		.uleb128 0x18
 4994 0226 9742     		.uleb128 0x2117
 4995 0228 19       		.uleb128 0x19
 4996 0229 00       		.byte	0
 4997 022a 00       		.byte	0
 4998 022b 23       		.uleb128 0x23
 4999 022c 34       		.uleb128 0x34
 5000 022d 00       		.byte	0
 5001 022e 03       		.uleb128 0x3
 5002 022f 0E       		.uleb128 0xe
 5003 0230 3A       		.uleb128 0x3a
 5004 0231 0B       		.uleb128 0xb
 5005 0232 3B       		.uleb128 0x3b
 5006 0233 05       		.uleb128 0x5
 5007 0234 49       		.uleb128 0x49
 5008 0235 13       		.uleb128 0x13
 5009 0236 3F       		.uleb128 0x3f
 5010 0237 19       		.uleb128 0x19
 5011 0238 3C       		.uleb128 0x3c
 5012 0239 19       		.uleb128 0x19
 5013 023a 00       		.byte	0
 5014 023b 00       		.byte	0
 5015 023c 24       		.uleb128 0x24
 5016 023d 34       		.uleb128 0x34
 5017 023e 00       		.byte	0
 5018 023f 03       		.uleb128 0x3
 5019 0240 0E       		.uleb128 0xe
 5020 0241 3A       		.uleb128 0x3a
 5021 0242 0B       		.uleb128 0xb
 5022 0243 3B       		.uleb128 0x3b
 5023 0244 0B       		.uleb128 0xb
 5024 0245 49       		.uleb128 0x49
 5025 0246 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 109


 5026 0247 3F       		.uleb128 0x3f
 5027 0248 19       		.uleb128 0x19
 5028 0249 02       		.uleb128 0x2
 5029 024a 18       		.uleb128 0x18
 5030 024b 00       		.byte	0
 5031 024c 00       		.byte	0
 5032 024d 25       		.uleb128 0x25
 5033 024e 21       		.uleb128 0x21
 5034 024f 00       		.byte	0
 5035 0250 49       		.uleb128 0x49
 5036 0251 13       		.uleb128 0x13
 5037 0252 2F       		.uleb128 0x2f
 5038 0253 05       		.uleb128 0x5
 5039 0254 00       		.byte	0
 5040 0255 00       		.byte	0
 5041 0256 26       		.uleb128 0x26
 5042 0257 34       		.uleb128 0x34
 5043 0258 00       		.byte	0
 5044 0259 03       		.uleb128 0x3
 5045 025a 08       		.uleb128 0x8
 5046 025b 3A       		.uleb128 0x3a
 5047 025c 0B       		.uleb128 0xb
 5048 025d 3B       		.uleb128 0x3b
 5049 025e 0B       		.uleb128 0xb
 5050 025f 49       		.uleb128 0x49
 5051 0260 13       		.uleb128 0x13
 5052 0261 3F       		.uleb128 0x3f
 5053 0262 19       		.uleb128 0x19
 5054 0263 02       		.uleb128 0x2
 5055 0264 18       		.uleb128 0x18
 5056 0265 00       		.byte	0
 5057 0266 00       		.byte	0
 5058 0267 00       		.byte	0
 5059              		.section	.debug_aranges,"",%progbits
 5060 0000 D4000000 		.4byte	0xd4
 5061 0004 0200     		.2byte	0x2
 5062 0006 00000000 		.4byte	.Ldebug_info0
 5063 000a 04       		.byte	0x4
 5064 000b 00       		.byte	0
 5065 000c 0000     		.2byte	0
 5066 000e 0000     		.2byte	0
 5067 0010 00000000 		.4byte	.LFB64
 5068 0014 44000000 		.4byte	.LFE64-.LFB64
 5069 0018 00000000 		.4byte	.LFB65
 5070 001c 6C000000 		.4byte	.LFE65-.LFB65
 5071 0020 00000000 		.4byte	.LFB66
 5072 0024 32000000 		.4byte	.LFE66-.LFB66
 5073 0028 00000000 		.4byte	.LFB67
 5074 002c 20000000 		.4byte	.LFE67-.LFB67
 5075 0030 00000000 		.4byte	.LFB68
 5076 0034 40000000 		.4byte	.LFE68-.LFB68
 5077 0038 00000000 		.4byte	.LFB69
 5078 003c DC000000 		.4byte	.LFE69-.LFB69
 5079 0040 00000000 		.4byte	.LFB70
 5080 0044 1C000000 		.4byte	.LFE70-.LFB70
 5081 0048 00000000 		.4byte	.LFB71
 5082 004c 28000000 		.4byte	.LFE71-.LFB71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 110


 5083 0050 00000000 		.4byte	.LFB72
 5084 0054 C8000000 		.4byte	.LFE72-.LFB72
 5085 0058 00000000 		.4byte	.LFB73
 5086 005c 00010000 		.4byte	.LFE73-.LFB73
 5087 0060 00000000 		.4byte	.LFB74
 5088 0064 78000000 		.4byte	.LFE74-.LFB74
 5089 0068 00000000 		.4byte	.LFB75
 5090 006c 3C010000 		.4byte	.LFE75-.LFB75
 5091 0070 00000000 		.4byte	.LFB76
 5092 0074 B8000000 		.4byte	.LFE76-.LFB76
 5093 0078 00000000 		.4byte	.LFB77
 5094 007c 1C000000 		.4byte	.LFE77-.LFB77
 5095 0080 00000000 		.4byte	.LFB78
 5096 0084 28000000 		.4byte	.LFE78-.LFB78
 5097 0088 00000000 		.4byte	.LFB79
 5098 008c 84000000 		.4byte	.LFE79-.LFB79
 5099 0090 00000000 		.4byte	.LFB80
 5100 0094 30000000 		.4byte	.LFE80-.LFB80
 5101 0098 00000000 		.4byte	.LFB81
 5102 009c CC020000 		.4byte	.LFE81-.LFB81
 5103 00a0 00000000 		.4byte	.LFB82
 5104 00a4 68010000 		.4byte	.LFE82-.LFB82
 5105 00a8 00000000 		.4byte	.LFB83
 5106 00ac 44010000 		.4byte	.LFE83-.LFB83
 5107 00b0 00000000 		.4byte	.LFB84
 5108 00b4 14000000 		.4byte	.LFE84-.LFB84
 5109 00b8 00000000 		.4byte	.LFB85
 5110 00bc 1A000000 		.4byte	.LFE85-.LFB85
 5111 00c0 00000000 		.4byte	.LFB86
 5112 00c4 2A000000 		.4byte	.LFE86-.LFB86
 5113 00c8 00000000 		.4byte	.LFB87
 5114 00cc 7C020000 		.4byte	.LFE87-.LFB87
 5115 00d0 00000000 		.4byte	0
 5116 00d4 00000000 		.4byte	0
 5117              		.section	.debug_ranges,"",%progbits
 5118              	.Ldebug_ranges0:
 5119 0000 BA010000 		.4byte	.LBB9
 5120 0004 2A020000 		.4byte	.LBE9
 5121 0008 2C020000 		.4byte	.LBB10
 5122 000c 58020000 		.4byte	.LBE10
 5123 0010 00000000 		.4byte	0
 5124 0014 00000000 		.4byte	0
 5125 0018 00000000 		.4byte	.LFB64
 5126 001c 44000000 		.4byte	.LFE64
 5127 0020 00000000 		.4byte	.LFB65
 5128 0024 6C000000 		.4byte	.LFE65
 5129 0028 00000000 		.4byte	.LFB66
 5130 002c 32000000 		.4byte	.LFE66
 5131 0030 00000000 		.4byte	.LFB67
 5132 0034 20000000 		.4byte	.LFE67
 5133 0038 00000000 		.4byte	.LFB68
 5134 003c 40000000 		.4byte	.LFE68
 5135 0040 00000000 		.4byte	.LFB69
 5136 0044 DC000000 		.4byte	.LFE69
 5137 0048 00000000 		.4byte	.LFB70
 5138 004c 1C000000 		.4byte	.LFE70
 5139 0050 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 111


 5140 0054 28000000 		.4byte	.LFE71
 5141 0058 00000000 		.4byte	.LFB72
 5142 005c C8000000 		.4byte	.LFE72
 5143 0060 00000000 		.4byte	.LFB73
 5144 0064 00010000 		.4byte	.LFE73
 5145 0068 00000000 		.4byte	.LFB74
 5146 006c 78000000 		.4byte	.LFE74
 5147 0070 00000000 		.4byte	.LFB75
 5148 0074 3C010000 		.4byte	.LFE75
 5149 0078 00000000 		.4byte	.LFB76
 5150 007c B8000000 		.4byte	.LFE76
 5151 0080 00000000 		.4byte	.LFB77
 5152 0084 1C000000 		.4byte	.LFE77
 5153 0088 00000000 		.4byte	.LFB78
 5154 008c 28000000 		.4byte	.LFE78
 5155 0090 00000000 		.4byte	.LFB79
 5156 0094 84000000 		.4byte	.LFE79
 5157 0098 00000000 		.4byte	.LFB80
 5158 009c 30000000 		.4byte	.LFE80
 5159 00a0 00000000 		.4byte	.LFB81
 5160 00a4 CC020000 		.4byte	.LFE81
 5161 00a8 00000000 		.4byte	.LFB82
 5162 00ac 68010000 		.4byte	.LFE82
 5163 00b0 00000000 		.4byte	.LFB83
 5164 00b4 44010000 		.4byte	.LFE83
 5165 00b8 00000000 		.4byte	.LFB84
 5166 00bc 14000000 		.4byte	.LFE84
 5167 00c0 00000000 		.4byte	.LFB85
 5168 00c4 1A000000 		.4byte	.LFE85
 5169 00c8 00000000 		.4byte	.LFB86
 5170 00cc 2A000000 		.4byte	.LFE86
 5171 00d0 00000000 		.4byte	.LFB87
 5172 00d4 7C020000 		.4byte	.LFE87
 5173 00d8 00000000 		.4byte	0
 5174 00dc 00000000 		.4byte	0
 5175              		.section	.debug_line,"",%progbits
 5176              	.Ldebug_line0:
 5177 0000 60050000 		.section	.debug_str,"MS",%progbits,1
 5177      0200EF01 
 5177      00000201 
 5177      FB0E0D00 
 5177      01010101 
 5178              	.LASF133:
 5179 0000 676D745F 		.ascii	"gmt_offset\000"
 5179      6F666673 
 5179      657400
 5180              	.LASF16:
 5181 000b 75696E74 		.ascii	"uint16\000"
 5181      313600
 5182              	.LASF38:
 5183 0012 76616C75 		.ascii	"value\000"
 5183      6500
 5184              	.LASF27:
 5185 0018 746D5F68 		.ascii	"tm_hour\000"
 5185      6F757200 
 5186              	.LASF32:
 5187 0020 746D5F79 		.ascii	"tm_yday\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 112


 5187      64617900 
 5188              	.LASF163:
 5189 0028 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 5189      73657273 
 5189      5C64616E 
 5189      747A5C44 
 5189      6F63756D 
 5190 0055 72694F53 		.ascii	"riOS.cydsn\000"
 5190      2E637964 
 5190      736E00
 5191              	.LASF141:
 5192 0060 62756666 		.ascii	"buffer_overflow\000"
 5192      65725F6F 
 5192      76657266 
 5192      6C6F7700 
 5193              	.LASF4:
 5194 0070 5F5F7569 		.ascii	"__uint8_t\000"
 5194      6E74385F 
 5194      7400
 5195              	.LASF69:
 5196 007a 636F756E 		.ascii	"countDownResetCondition\000"
 5196      74446F77 
 5196      6E526573 
 5196      6574436F 
 5196      6E646974 
 5197              	.LASF54:
 5198 0092 6C6F6E67 		.ascii	"longitude\000"
 5198      69747564 
 5198      6500
 5199              	.LASF161:
 5200 009c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5200      43313120 
 5200      352E342E 
 5200      31203230 
 5200      31363036 
 5201 00cf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5201      20726576 
 5201      6973696F 
 5201      6E203233 
 5201      37373135 
 5202 0102 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5202      66756E63 
 5202      74696F6E 
 5202      2D736563 
 5202      74696F6E 
 5203              	.LASF136:
 5204 012a 6D6F6465 		.ascii	"modem_wakeup\000"
 5204      6D5F7761 
 5204      6B657570 
 5204      00
 5205              	.LASF10:
 5206 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 5206      206C6F6E 
 5206      6720756E 
 5206      7369676E 
 5206      65642069 
 5207              	.LASF119:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 113


 5208 014e 73616D70 		.ascii	"sample_freq\000"
 5208      6C655F66 
 5208      72657100 
 5209              	.LASF145:
 5210 015a 6D6F6465 		.ascii	"modem_state\000"
 5210      6D5F7374 
 5210      61746500 
 5211              	.LASF96:
 5212 0166 74657374 		.ascii	"test\000"
 5212      00
 5213              	.LASF154:
 5214 016b 616C6172 		.ascii	"alarmMeasure\000"
 5214      6D4D6561 
 5214      73757265 
 5214      00
 5215              	.LASF140:
 5216 0178 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5216      52784275 
 5216      66666572 
 5216      00
 5217              	.LASF147:
 5218 0185 6D6F6465 		.ascii	"modem_stats\000"
 5218      6D5F7374 
 5218      61747300 
 5219              	.LASF9:
 5220 0191 6C6F6E67 		.ascii	"long long int\000"
 5220      206C6F6E 
 5220      6720696E 
 5220      7400
 5221              	.LASF0:
 5222 019f 7369676E 		.ascii	"signed char\000"
 5222      65642063 
 5222      68617200 
 5223              	.LASF47:
 5224 01ab 65636E6F 		.ascii	"ecno\000"
 5224      00
 5225              	.LASF66:
 5226 01b0 636F756E 		.ascii	"countDownValue\000"
 5226      74446F77 
 5226      6E56616C 
 5226      756500
 5227              	.LASF155:
 5228 01bf 74696D65 		.ascii	"timeToMeasure\000"
 5228      546F4D65 
 5228      61737572 
 5228      6500
 5229              	.LASF50:
 5230 01cd 74696D65 		.ascii	"time_to_network_connect\000"
 5230      5F746F5F 
 5230      6E657477 
 5230      6F726B5F 
 5230      636F6E6E 
 5231              	.LASF157:
 5232 01e5 74696D65 		.ascii	"timeToSync\000"
 5232      546F5379 
 5232      6E6300
 5233              	.LASF150:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 114


 5234 01f0 68747470 		.ascii	"http_body\000"
 5234      5F626F64 
 5234      7900
 5235              	.LASF107:
 5236 01fa 7365745F 		.ascii	"set_up_internet_connection\000"
 5236      75705F69 
 5236      6E746572 
 5236      6E65745F 
 5236      636F6E6E 
 5237              	.LASF132:
 5238 0215 7365636F 		.ascii	"second\000"
 5238      6E6400
 5239              	.LASF128:
 5240 021c 79656172 		.ascii	"year\000"
 5240      00
 5241              	.LASF45:
 5242 0221 72786C65 		.ascii	"rxlev\000"
 5242      7600
 5243              	.LASF6:
 5244 0227 6C6F6E67 		.ascii	"long int\000"
 5244      20696E74 
 5244      00
 5245              	.LASF67:
 5246 0230 63757272 		.ascii	"currentCountDownValue\000"
 5246      656E7443 
 5246      6F756E74 
 5246      446F776E 
 5246      56616C75 
 5247              	.LASF134:
 5248 0246 6D6F6465 		.ascii	"modem_get_state\000"
 5248      6D5F6765 
 5248      745F7374 
 5248      61746500 
 5249              	.LASF55:
 5250 0256 616C7469 		.ascii	"altitude\000"
 5250      74756465 
 5250      00
 5251              	.LASF15:
 5252 025f 75696E74 		.ascii	"uint8\000"
 5252      3800
 5253              	.LASF21:
 5254 0265 646F7562 		.ascii	"double\000"
 5254      6C6500
 5255              	.LASF19:
 5256 026c 696E7433 		.ascii	"int32\000"
 5256      3200
 5257              	.LASF59:
 5258 0272 6E6F6465 		.ascii	"node_type\000"
 5258      5F747970 
 5258      6500
 5259              	.LASF124:
 5260 027c 6D6F6465 		.ascii	"modem_configure_settings\000"
 5260      6D5F636F 
 5260      6E666967 
 5260      7572655F 
 5260      73657474 
 5261              	.LASF115:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 115


 5262 0295 735F7369 		.ascii	"s_sim_type\000"
 5262      6D5F7479 
 5262      706500
 5263              	.LASF97:
 5264 02a0 6E657477 		.ascii	"network_time\000"
 5264      6F726B5F 
 5264      74696D65 
 5264      00
 5265              	.LASF3:
 5266 02ad 73686F72 		.ascii	"short unsigned int\000"
 5266      7420756E 
 5266      7369676E 
 5266      65642069 
 5266      6E7400
 5267              	.LASF17:
 5268 02c0 75696E74 		.ascii	"uint32\000"
 5268      333200
 5269              	.LASF93:
 5270 02c7 696E7465 		.ascii	"interval\000"
 5270      7276616C 
 5270      00
 5271              	.LASF7:
 5272 02d0 5F5F7569 		.ascii	"__uint32_t\000"
 5272      6E743332 
 5272      5F7400
 5273              	.LASF126:
 5274 02db 6D6F6465 		.ascii	"modem_get_network_time\000"
 5274      6D5F6765 
 5274      745F6E65 
 5274      74776F72 
 5274      6B5F7469 
 5275              	.LASF29:
 5276 02f2 746D5F6D 		.ascii	"tm_mon\000"
 5276      6F6E00
 5277              	.LASF63:
 5278 02f9 64656275 		.ascii	"debug_level\000"
 5278      675F6C65 
 5278      76656C00 
 5279              	.LASF135:
 5280 0305 6D6F6465 		.ascii	"modem_sleep\000"
 5280      6D5F736C 
 5280      65657000 
 5281              	.LASF118:
 5282 0311 735F6465 		.ascii	"s_debug_freq\000"
 5282      6275675F 
 5282      66726571 
 5282      00
 5283              	.LASF111:
 5284 031e 75706461 		.ascii	"updatable_parameters_initialize\000"
 5284      7461626C 
 5284      655F7061 
 5284      72616D65 
 5284      74657273 
 5285              	.LASF30:
 5286 033e 746D5F79 		.ascii	"tm_year\000"
 5286      65617200 
 5287              	.LASF156:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 116


 5288 0346 616C6172 		.ascii	"alarmSync\000"
 5288      6D53796E 
 5288      6300
 5289              	.LASF79:
 5290 0350 70696E73 		.ascii	"pins_configure_active\000"
 5290      5F636F6E 
 5290      66696775 
 5290      72655F61 
 5290      63746976 
 5291              	.LASF40:
 5292 0366 6B65795F 		.ascii	"key_value_t\000"
 5292      76616C75 
 5292      655F7400 
 5293              	.LASF84:
 5294 0372 7077725F 		.ascii	"pwr_check\000"
 5294      63686563 
 5294      6B00
 5295              	.LASF8:
 5296 037c 6C6F6E67 		.ascii	"long unsigned int\000"
 5296      20756E73 
 5296      69676E65 
 5296      6420696E 
 5296      7400
 5297              	.LASF99:
 5298 038e 65787472 		.ascii	"extract_string\000"
 5298      6163745F 
 5298      73747269 
 5298      6E6700
 5299              	.LASF89:
 5300 039d 74696D65 		.ascii	"timeout\000"
 5300      6F757400 
 5301              	.LASF112:
 5302 03a5 6765745F 		.ascii	"get_cell_network_stats\000"
 5302      63656C6C 
 5302      5F6E6574 
 5302      776F726B 
 5302      5F737461 
 5303              	.LASF56:
 5304 03bc 74696D65 		.ascii	"time_to_lock\000"
 5304      5F746F5F 
 5304      6C6F636B 
 5304      00
 5305              	.LASF144:
 5306 03c9 64617461 		.ascii	"data\000"
 5306      00
 5307              	.LASF75:
 5308 03ce 65705F70 		.ascii	"ep_port\000"
 5308      6F727400 
 5309              	.LASF33:
 5310 03d6 746D5F69 		.ascii	"tm_isdst\000"
 5310      73647374 
 5310      00
 5311              	.LASF71:
 5312 03df 6D6F6465 		.ascii	"modem_info\000"
 5312      6D5F696E 
 5312      666F00
 5313              	.LASF74:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 117


 5314 03ea 65705F68 		.ascii	"ep_host\000"
 5314      6F737400 
 5315              	.LASF72:
 5316 03f2 63686970 		.ascii	"chip_uniqueId\000"
 5316      5F756E69 
 5316      71756549 
 5316      6400
 5317              	.LASF94:
 5318 0400 6D6F6465 		.ascii	"modem_power_up\000"
 5318      6D5F706F 
 5318      7765725F 
 5318      757000
 5319              	.LASF162:
 5320 040f 6D6F6465 		.ascii	"modem.c\000"
 5320      6D2E6300 
 5321              	.LASF101:
 5322 0417 62656769 		.ascii	"beginMarker\000"
 5322      6E4D6172 
 5322      6B657200 
 5323              	.LASF103:
 5324 0423 74617267 		.ascii	"target\000"
 5324      657400
 5325              	.LASF51:
 5326 042a 74696D65 		.ascii	"time_to_acquire_ip\000"
 5326      5F746F5F 
 5326      61637175 
 5326      6972655F 
 5326      697000
 5327              	.LASF102:
 5328 043d 656E644D 		.ascii	"endMarker\000"
 5328      61726B65 
 5328      7200
 5329              	.LASF2:
 5330 0447 73686F72 		.ascii	"short int\000"
 5330      7420696E 
 5330      7400
 5331              	.LASF127:
 5332 0451 65706F63 		.ascii	"epoch_time\000"
 5332      685F7469 
 5332      6D6500
 5333              	.LASF5:
 5334 045c 5F5F696E 		.ascii	"__int32_t\000"
 5334      7433325F 
 5334      7400
 5335              	.LASF100:
 5336 0466 66726F6D 		.ascii	"from\000"
 5336      00
 5337              	.LASF106:
 5338 046b 63726567 		.ascii	"creg\000"
 5338      00
 5339              	.LASF121:
 5340 0470 64656275 		.ascii	"debug_freq\000"
 5340      675F6672 
 5340      657100
 5341              	.LASF90:
 5342 047b 61745F61 		.ascii	"at_attempt\000"
 5342      7474656D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 118


 5342      707400
 5343              	.LASF98:
 5344 0486 61745F77 		.ascii	"at_write_command\000"
 5344      72697465 
 5344      5F636F6D 
 5344      6D616E64 
 5344      00
 5345              	.LASF73:
 5346 0497 7379735F 		.ascii	"sys_info_t\000"
 5346      696E666F 
 5346      5F7400
 5347              	.LASF65:
 5348 04a2 75706461 		.ascii	"updatable_parameters_t\000"
 5348      7461626C 
 5348      655F7061 
 5348      72616D65 
 5348      74657273 
 5349              	.LASF120:
 5350 04b9 7265706F 		.ascii	"report_freq\000"
 5350      72745F66 
 5350      72657100 
 5351              	.LASF142:
 5352 04c5 64617461 		.ascii	"dataPointsInStack\000"
 5352      506F696E 
 5352      7473496E 
 5352      53746163 
 5352      6B00
 5353              	.LASF26:
 5354 04d7 746D5F6D 		.ascii	"tm_min\000"
 5354      696E00
 5355              	.LASF24:
 5356 04de 73697A65 		.ascii	"sizetype\000"
 5356      74797065 
 5356      00
 5357              	.LASF129:
 5358 04e7 6D6F6E74 		.ascii	"month\000"
 5358      6800
 5359              	.LASF105:
 5360 04ed 69735F63 		.ascii	"is_connected_to_cell_network\000"
 5360      6F6E6E65 
 5360      63746564 
 5360      5F746F5F 
 5360      63656C6C 
 5361              	.LASF159:
 5362 050a 75617274 		.ascii	"uart_received_string\000"
 5362      5F726563 
 5362      65697665 
 5362      645F7374 
 5362      72696E67 
 5363              	.LASF122:
 5364 051f 76616C76 		.ascii	"valve_open_desired\000"
 5364      655F6F70 
 5364      656E5F64 
 5364      65736972 
 5364      656400
 5365              	.LASF34:
 5366 0532 74657374 		.ascii	"test_name\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 119


 5366      5F6E616D 
 5366      6500
 5367              	.LASF158:
 5368 053c 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 5368      546F5379 
 5368      636E5265 
 5368      6D6F7465 
 5368      50617261 
 5369              	.LASF95:
 5370 0553 6D6F6465 		.ascii	"modem_test\000"
 5370      6D5F7465 
 5370      737400
 5371              	.LASF110:
 5372 055e 6D617463 		.ascii	"match\000"
 5372      6800
 5373              	.LASF148:
 5374 0564 75706461 		.ascii	"updatable_parameters\000"
 5374      7461626C 
 5374      655F7061 
 5374      72616D65 
 5374      74657273 
 5375              	.LASF130:
 5376 0579 686F7572 		.ascii	"hour\000"
 5376      00
 5377              	.LASF87:
 5378 057e 636F6D6D 		.ascii	"commands\000"
 5378      616E6473 
 5378      00
 5379              	.LASF91:
 5380 0587 636F6D70 		.ascii	"compare_location\000"
 5380      6172655F 
 5380      6C6F6361 
 5380      74696F6E 
 5380      00
 5381              	.LASF20:
 5382 0598 666C6F61 		.ascii	"float\000"
 5382      7400
 5383              	.LASF77:
 5384 059e 6D6F6465 		.ascii	"modem_initialize\000"
 5384      6D5F696E 
 5384      69746961 
 5384      6C697A65 
 5384      00
 5385              	.LASF117:
 5386 05af 735F7265 		.ascii	"s_report_freq\000"
 5386      706F7274 
 5386      5F667265 
 5386      7100
 5387              	.LASF60:
 5388 05bd 73696D5F 		.ascii	"sim_type\000"
 5388      74797065 
 5388      00
 5389              	.LASF53:
 5390 05c6 6C617469 		.ascii	"latitude\000"
 5390      74756465 
 5390      00
 5391              	.LASF108:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 120


 5392 05cf 6973725F 		.ascii	"isr_telit_rx\000"
 5392      74656C69 
 5392      745F7278 
 5392      00
 5393              	.LASF70:
 5394 05dc 616C6172 		.ascii	"alarm\000"
 5394      6D00
 5395              	.LASF64:
 5396 05e2 5F426F6F 		.ascii	"_Bool\000"
 5396      6C00
 5397              	.LASF13:
 5398 05e8 696E7433 		.ascii	"int32_t\000"
 5398      325F7400 
 5399              	.LASF1:
 5400 05f0 756E7369 		.ascii	"unsigned char\000"
 5400      676E6564 
 5400      20636861 
 5400      7200
 5401              	.LASF153:
 5402 05fe 73797374 		.ascii	"system_settings\000"
 5402      656D5F73 
 5402      65747469 
 5402      6E677300 
 5403              	.LASF92:
 5404 060e 64656C61 		.ascii	"delay\000"
 5404      7900
 5405              	.LASF48:
 5406 0614 72737271 		.ascii	"rsrq\000"
 5406      00
 5407              	.LASF62:
 5408 0619 73796E63 		.ascii	"sync_time\000"
 5408      5F74696D 
 5408      6500
 5409              	.LASF114:
 5410 0623 735F6E6F 		.ascii	"s_node_type\000"
 5410      64655F74 
 5410      79706500 
 5411              	.LASF46:
 5412 062f 72736370 		.ascii	"rscp\000"
 5412      00
 5413              	.LASF137:
 5414 0634 6D6F6465 		.ascii	"modem_get_gps_coordinates\000"
 5414      6D5F6765 
 5414      745F6770 
 5414      735F636F 
 5414      6F726469 
 5415              	.LASF37:
 5416 064e 74657374 		.ascii	"test_t\000"
 5416      5F7400
 5417              	.LASF152:
 5418 0655 73797374 		.ascii	"system_info\000"
 5418      656D5F69 
 5418      6E666F00 
 5419              	.LASF43:
 5420 0661 696D6569 		.ascii	"imei\000"
 5420      00
 5421              	.LASF36:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 121


 5422 0666 72656173 		.ascii	"reason\000"
 5422      6F6E00
 5423              	.LASF49:
 5424 066d 72737270 		.ascii	"rsrp\000"
 5424      00
 5425              	.LASF52:
 5426 0672 6D6F6465 		.ascii	"modem_stats_t\000"
 5426      6D5F7374 
 5426      6174735F 
 5426      7400
 5427              	.LASF86:
 5428 0680 75617274 		.ascii	"uart_string_reset\000"
 5428      5F737472 
 5428      696E675F 
 5428      72657365 
 5428      7400
 5429              	.LASF31:
 5430 0692 746D5F77 		.ascii	"tm_wday\000"
 5430      64617900 
 5431              	.LASF85:
 5432 069a 6D6F6465 		.ascii	"modem_soft_power_cycle\000"
 5432      6D5F736F 
 5432      66745F70 
 5432      6F776572 
 5432      5F637963 
 5433              	.LASF23:
 5434 06b1 6C6F6E67 		.ascii	"long double\000"
 5434      20646F75 
 5434      626C6500 
 5435              	.LASF22:
 5436 06bd 63686172 		.ascii	"char\000"
 5436      00
 5437              	.LASF104:
 5438 06c2 6D6F6465 		.ascii	"modem_process_tasks\000"
 5438      6D5F7072 
 5438      6F636573 
 5438      735F7461 
 5438      736B7300 
 5439              	.LASF11:
 5440 06d6 756E7369 		.ascii	"unsigned int\000"
 5440      676E6564 
 5440      20696E74 
 5440      00
 5441              	.LASF125:
 5442 06e3 4346554E 		.ascii	"CFUN\000"
 5442      00
 5443              	.LASF42:
 5444 06e8 6D6F6465 		.ascii	"model_id\000"
 5444      6C5F6964 
 5444      00
 5445              	.LASF151:
 5446 06f1 68747470 		.ascii	"http_route\000"
 5446      5F726F75 
 5446      746500
 5447              	.LASF44:
 5448 06fc 6D6F6465 		.ascii	"modem_info_t\000"
 5448      6D5F696E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 122


 5448      666F5F74 
 5448      00
 5449              	.LASF58:
 5450 0709 6770735F 		.ascii	"gps_t\000"
 5450      7400
 5451              	.LASF160:
 5452 070f 75617274 		.ascii	"uart_string_index\000"
 5452      5F737472 
 5452      696E675F 
 5452      696E6465 
 5452      7800
 5453              	.LASF61:
 5454 0721 6D656173 		.ascii	"measure_time\000"
 5454      7572655F 
 5454      74696D65 
 5454      00
 5455              	.LASF109:
 5456 072e 69735F63 		.ascii	"is_connected_to_internet\000"
 5456      6F6E6E65 
 5456      63746564 
 5456      5F746F5F 
 5456      696E7465 
 5457              	.LASF146:
 5458 0747 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 5458      6D5F7374 
 5458      6172745F 
 5458      74696D65 
 5458      5F737461 
 5459              	.LASF139:
 5460 075e 6770735F 		.ascii	"gps_status\000"
 5460      73746174 
 5460      757300
 5461              	.LASF78:
 5462 0769 70696E73 		.ascii	"pins_configure_inactive\000"
 5462      5F636F6E 
 5462      66696775 
 5462      72655F69 
 5462      6E616374 
 5463              	.LASF41:
 5464 0781 73696D5F 		.ascii	"sim_id\000"
 5464      696400
 5465              	.LASF28:
 5466 0788 746D5F6D 		.ascii	"tm_mday\000"
 5466      64617900 
 5467              	.LASF57:
 5468 0790 76616C69 		.ascii	"valid\000"
 5468      6400
 5469              	.LASF131:
 5470 0796 6D696E75 		.ascii	"minute\000"
 5470      746500
 5471              	.LASF14:
 5472 079d 75696E74 		.ascii	"uint32_t\000"
 5472      33325F74 
 5472      00
 5473              	.LASF25:
 5474 07a6 746D5F73 		.ascii	"tm_sec\000"
 5474      656300
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 123


 5475              	.LASF113:
 5476 07ad 6765745F 		.ascii	"get_updated_parameters_from_malcom\000"
 5476      75706461 
 5476      7465645F 
 5476      70617261 
 5476      6D657465 
 5477              	.LASF116:
 5478 07d0 735F7361 		.ascii	"s_sample_freq\000"
 5478      6D706C65 
 5478      5F667265 
 5478      7100
 5479              	.LASF35:
 5480 07de 73746174 		.ascii	"status\000"
 5480      757300
 5481              	.LASF143:
 5482 07e5 64617461 		.ascii	"dataPointsInStackDesired\000"
 5482      506F696E 
 5482      7473496E 
 5482      53746163 
 5482      6B446573 
 5483              	.LASF76:
 5484 07fe 7379735F 		.ascii	"sys_settings_t\000"
 5484      73657474 
 5484      696E6773 
 5484      5F7400
 5485              	.LASF12:
 5486 080d 75696E74 		.ascii	"uint8_t\000"
 5486      385F7400 
 5487              	.LASF18:
 5488 0815 696E7431 		.ascii	"int16\000"
 5488      3600
 5489              	.LASF81:
 5490 081b 61745F72 		.ascii	"at_ready\000"
 5490      65616479 
 5490      00
 5491              	.LASF82:
 5492 0824 61747465 		.ascii	"attempts\000"
 5492      6D707473 
 5492      00
 5493              	.LASF68:
 5494 082d 636F756E 		.ascii	"countDownType\000"
 5494      74446F77 
 5494      6E547970 
 5494      6500
 5495              	.LASF83:
 5496 083b 626F6F74 		.ascii	"boot_time\000"
 5496      5F74696D 
 5496      6500
 5497              	.LASF88:
 5498 0845 65787065 		.ascii	"expected_response\000"
 5498      63746564 
 5498      5F726573 
 5498      706F6E73 
 5498      6500
 5499              	.LASF138:
 5500 0857 6C6F636B 		.ascii	"lock_time\000"
 5500      5F74696D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchP7NWN.s 			page 124


 5500      6500
 5501              	.LASF149:
 5502 0861 68747470 		.ascii	"http_request\000"
 5502      5F726571 
 5502      75657374 
 5502      00
 5503              	.LASF80:
 5504 086e 6D6F6465 		.ascii	"modem_power_down\000"
 5504      6D5F706F 
 5504      7765725F 
 5504      646F776E 
 5504      00
 5505              	.LASF39:
 5506 087f 74696D65 		.ascii	"timeStamp\000"
 5506      5374616D 
 5506      7000
 5507              	.LASF123:
 5508 0889 73756363 		.ascii	"success\000"
 5508      65737300 
 5509              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
