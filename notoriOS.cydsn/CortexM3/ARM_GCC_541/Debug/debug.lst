ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"debug.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,7,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.global	BB_fileName
  33              		.data
  34              		.align	2
  35              		.type	BB_fileName, %object
  36              		.size	BB_fileName, 30
  37              	BB_fileName:
  38 0000 626C6163 		.ascii	"blackbox.txt\000"
  38      6B626F78 
  38      2E747874 
  38      00
  39 000d 00000000 		.space	17
  39      00000000 
  39      00000000 
  39      00000000 
  39      00
  40              		.section	.text.debug_start,"ax",%progbits
  41              		.align	2
  42              		.global	debug_start
  43              		.thumb
  44              		.thumb_func
  45              		.type	debug_start, %function
  46              	debug_start:
  47              	.LFB64:
  48              		.file 1 "debug.c"
   1:debug.c       **** #include "debug.h"
   2:debug.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 2


   3:debug.c       **** 
   4:debug.c       **** char    BB_fileName[30] = "blackbox.txt";
   5:debug.c       **** 
   6:debug.c       **** // function to start UART debug
   7:debug.c       **** void debug_start(){
  49              		.loc 1 7 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 1, uses_anonymous_args = 0
  53 0000 80B5     		push	{r7, lr}
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 00AF     		add	r7, sp, #0
  58              		.cfi_def_cfa_register 7
   8:debug.c       ****     // if debug flag = 1 then start UART
   9:debug.c       ****     #if USE_DEBUG
  10:debug.c       ****        Debug_UART_Start();
  59              		.loc 1 10 0
  60 0004 FFF7FEFF 		bl	Debug_UART_Start
  11:debug.c       ****        //setvbuf(stdout, NULL, _IOFBF, Debug_UART_TX_BUFFER_SIZE);//this sets the printf() bufefr t
  12:debug.c       ****        //setbuf(stdout, NULL);
  13:debug.c       ****     #endif
  14:debug.c       **** }
  61              		.loc 1 14 0
  62 0008 00BF     		nop
  63 000a 80BD     		pop	{r7, pc}
  64              		.cfi_endproc
  65              	.LFE64:
  66              		.size	debug_start, .-debug_start
  67              		.section	.text.debug_stop,"ax",%progbits
  68              		.align	2
  69              		.global	debug_stop
  70              		.thumb
  71              		.thumb_func
  72              		.type	debug_stop, %function
  73              	debug_stop:
  74              	.LFB65:
  15:debug.c       **** 
  16:debug.c       **** // function to stop UART debug
  17:debug.c       **** void debug_stop(){
  75              		.loc 1 17 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79 0000 80B5     		push	{r7, lr}
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 00AF     		add	r7, sp, #0
  84              		.cfi_def_cfa_register 7
  18:debug.c       ****     // if debug flag = 1 then stop UART
  19:debug.c       ****     #if USE_DEBUG
  20:debug.c       ****         Debug_UART_Stop();
  85              		.loc 1 20 0
  86 0004 FFF7FEFF 		bl	Debug_UART_Stop
  21:debug.c       ****     #endif
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 3


  22:debug.c       **** }
  87              		.loc 1 22 0
  88 0008 00BF     		nop
  89 000a 80BD     		pop	{r7, pc}
  90              		.cfi_endproc
  91              	.LFE65:
  92              		.size	debug_stop, .-debug_stop
  93              		.section	.text.debug_sleep,"ax",%progbits
  94              		.align	2
  95              		.global	debug_sleep
  96              		.thumb
  97              		.thumb_func
  98              		.type	debug_sleep, %function
  99              	debug_sleep:
 100              	.LFB66:
  23:debug.c       **** 
  24:debug.c       **** // function to sleep UART debug
  25:debug.c       **** void debug_sleep(){
 101              		.loc 1 25 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0000 80B5     		push	{r7, lr}
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0002 00AF     		add	r7, sp, #0
 110              		.cfi_def_cfa_register 7
  26:debug.c       ****     // if debug flag = 1 and printf still writing, sleep UART
  27:debug.c       ****     #if USE_DEBUG
  28:debug.c       **** 
  29:debug.c       ****         // Check if UART is busy writing and waiit, if needed
  30:debug.c       ****         // Debug_UART_ReadTxStatus() reads the status register for the TX portion of the UART.
  31:debug.c       ****         if(!(Debug_UART_ReadTxStatus() & Debug_UART_TX_STS_FIFO_EMPTY)){
 111              		.loc 1 31 0
 112 0004 FFF7FEFF 		bl	Debug_UART_ReadTxStatus
 113 0008 0346     		mov	r3, r0
 114 000a 03F00203 		and	r3, r3, #2
 115 000e 002B     		cmp	r3, #0
 116 0010 02D1     		bne	.L4
  32:debug.c       ****             CyDelay(1u);
 117              		.loc 1 32 0
 118 0012 0120     		movs	r0, #1
 119 0014 FFF7FEFF 		bl	CyDelay
 120              	.L4:
  33:debug.c       ****         }
  34:debug.c       ****     // This is the preferred API to prepare the component for sleep. 
  35:debug.c       ****     // The Debug_UART_Sleep() API saves the current component state. Then it calls the Debug_UART_S
  36:debug.c       ****     Debug_UART_Sleep(); 
 121              		.loc 1 36 0
 122 0018 FFF7FEFF 		bl	Debug_UART_Sleep
  37:debug.c       ****    #endif
  38:debug.c       ****    
  39:debug.c       **** }
 123              		.loc 1 39 0
 124 001c 00BF     		nop
 125 001e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 4


 126              		.cfi_endproc
 127              	.LFE66:
 128              		.size	debug_sleep, .-debug_sleep
 129              		.section	.text.debug_wakeup,"ax",%progbits
 130              		.align	2
 131              		.global	debug_wakeup
 132              		.thumb
 133              		.thumb_func
 134              		.type	debug_wakeup, %function
 135              	debug_wakeup:
 136              	.LFB67:
  40:debug.c       **** 
  41:debug.c       **** // function to wakeup UART debug
  42:debug.c       **** void debug_wakeup(){
 137              		.loc 1 42 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141 0000 80B5     		push	{r7, lr}
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 7, -8
 144              		.cfi_offset 14, -4
 145 0002 00AF     		add	r7, sp, #0
 146              		.cfi_def_cfa_register 7
  43:debug.c       ****     // if debug flag = 1, wakeup UART debug and turn off stillWriting flag
  44:debug.c       ****     #if USE_DEBUG
  45:debug.c       ****         Debug_UART_Wakeup();
 147              		.loc 1 45 0
 148 0004 FFF7FEFF 		bl	Debug_UART_Wakeup
  46:debug.c       ****     #endif
  47:debug.c       **** }
 149              		.loc 1 47 0
 150 0008 00BF     		nop
 151 000a 80BD     		pop	{r7, pc}
 152              		.cfi_endproc
 153              	.LFE67:
 154              		.size	debug_wakeup, .-debug_wakeup
 155              		.section	.text._write,"ax",%progbits
 156              		.align	2
 157              		.global	_write
 158              		.thumb
 159              		.thumb_func
 160              		.type	_write, %function
 161              	_write:
 162              	.LFB68:
  48:debug.c       **** 
  49:debug.c       **** // if debug flag = 1, and using the GCC compiler, revise the _write() function so that when we call
  50:debug.c       **** // NOTE: For this to work HEAP size in "System" must be set to 0x300 or more
  51:debug.c       **** // Stack and heap are both a part of memory. Stack holds functions, variables, etc. Heap sits on to
  52:debug.c       **** // If heap is too small, then you get a stack overflow. FOr printing, need to have a bigger heap. B
  53:debug.c       **** // If have memory problems, play around with heap size.
  54:debug.c       **** #if USE_DEBUG
  55:debug.c       ****     
  56:debug.c       ****     
  57:debug.c       **** // This will allow you to use printf(), as you would in regulart c programs
  58:debug.c       **** // careful though, printf() is sometimes not safe in embedded sytems
  59:debug.c       **** // may want to use printd() function below
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 5


  60:debug.c       **** int _write(int file, char *ptr, int len)
  61:debug.c       **** {
 163              		.loc 1 61 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 24
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 80B5     		push	{r7, lr}
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 86B0     		sub	sp, sp, #24
 172              		.cfi_def_cfa_offset 32
 173 0004 00AF     		add	r7, sp, #0
 174              		.cfi_def_cfa_register 7
 175 0006 F860     		str	r0, [r7, #12]
 176 0008 B960     		str	r1, [r7, #8]
 177 000a 7A60     		str	r2, [r7, #4]
  62:debug.c       ****     int i;
  63:debug.c       ****     file = file;
  64:debug.c       ****     for (i = 0; i < len; i++)
 178              		.loc 1 64 0
 179 000c 0023     		movs	r3, #0
 180 000e 7B61     		str	r3, [r7, #20]
 181 0010 09E0     		b	.L7
 182              	.L8:
  65:debug.c       ****     {   
  66:debug.c       ****         // Puts a byte of data into the transmit buffer to be sent when the bus is available.
  67:debug.c       ****         Debug_UART_PutChar(*ptr++);
 183              		.loc 1 67 0 discriminator 3
 184 0012 BB68     		ldr	r3, [r7, #8]
 185 0014 5A1C     		adds	r2, r3, #1
 186 0016 BA60     		str	r2, [r7, #8]
 187 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 188 001a 1846     		mov	r0, r3
 189 001c FFF7FEFF 		bl	Debug_UART_PutChar
  64:debug.c       ****     {   
 190              		.loc 1 64 0 discriminator 3
 191 0020 7B69     		ldr	r3, [r7, #20]
 192 0022 0133     		adds	r3, r3, #1
 193 0024 7B61     		str	r3, [r7, #20]
 194              	.L7:
  64:debug.c       ****     {   
 195              		.loc 1 64 0 is_stmt 0 discriminator 1
 196 0026 7A69     		ldr	r2, [r7, #20]
 197 0028 7B68     		ldr	r3, [r7, #4]
 198 002a 9A42     		cmp	r2, r3
 199 002c F1DB     		blt	.L8
  68:debug.c       ****     }
  69:debug.c       ****     
  70:debug.c       ****     return (len);
 200              		.loc 1 70 0 is_stmt 1
 201 002e 7B68     		ldr	r3, [r7, #4]
  71:debug.c       **** }
 202              		.loc 1 71 0
 203 0030 1846     		mov	r0, r3
 204 0032 1837     		adds	r7, r7, #24
 205              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 6


 206 0034 BD46     		mov	sp, r7
 207              		.cfi_def_cfa_register 13
 208              		@ sp needed
 209 0036 80BD     		pop	{r7, pc}
 210              		.cfi_endproc
 211              	.LFE68:
 212              		.size	_write, .-_write
 213              		.section	.rodata
 214              		.align	2
 215              	.LC0:
 216 0000 7B2000   		.ascii	"{ \000"
 217 0003 00       		.align	2
 218              	.LC1:
 219 0004 2274696D 		.ascii	"\"time\":\"%ld\" \000"
 219      65223A22 
 219      256C6422 
 219      2000
 220 0012 0000     		.align	2
 221              	.LC2:
 222 0014 22657665 		.ascii	"\"event\":\"error\" \"value\":\"\000"
 222      6E74223A 
 222      22657272 
 222      6F722220 
 222      2276616C 
 223 002e 0000     		.align	2
 224              	.LC3:
 225 0030 22657665 		.ascii	"\"event\":\"warning\" \"value\":\"\000"
 225      6E74223A 
 225      22776172 
 225      6E696E67 
 225      22202276 
 226              		.align	2
 227              	.LC4:
 228 004c 22657665 		.ascii	"\"event\":\"startup\" \"value\":\"\000"
 228      6E74223A 
 228      22737461 
 228      72747570 
 228      22202276 
 229              		.align	2
 230              	.LC5:
 231 0068 22657665 		.ascii	"\"event\":\"notif\" \"value\":\"\000"
 231      6E74223A 
 231      226E6F74 
 231      69662220 
 231      2276616C 
 232 0082 0000     		.align	2
 233              	.LC6:
 234 0084 227D0D0A 		.ascii	"\"}\015\012\000"
 234      00
 235              		.section	.text.printNotif,"ax",%progbits
 236              		.align	2
 237              		.global	printNotif
 238              		.thumb
 239              		.thumb_func
 240              		.type	printNotif, %function
 241              	printNotif:
 242              	.LFB69:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 7


  72:debug.c       **** 
  73:debug.c       **** #endif
  74:debug.c       **** 
  75:debug.c       **** // Create function to hijack printf to add an epoch timestamp to print output
  76:debug.c       **** // Whenever a function is declared to have an indeterminate number of arguments, in place of the la
  77:debug.c       **** // to tell the compiler the function should accept however many arguments that the programmer uses,
  78:debug.c       **** // to at least the number of variables declared. 
  79:debug.c       **** void printNotif(uint8 type, char* format, ...){
 243              		.loc 1 79 0
 244              		.cfi_startproc
 245              		@ args = 4, pretend = 12, frame = 2064
 246              		@ frame_needed = 1, uses_anonymous_args = 1
 247 0000 0EB4     		push	{r1, r2, r3}
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 1, -12
 250              		.cfi_offset 2, -8
 251              		.cfi_offset 3, -4
 252 0002 80B5     		push	{r7, lr}
 253              		.cfi_def_cfa_offset 20
 254              		.cfi_offset 7, -20
 255              		.cfi_offset 14, -16
 256 0004 ADF6140D 		subw	sp, sp, #2068
 257              		.cfi_def_cfa_offset 2088
 258 0008 00AF     		add	r7, sp, #0
 259              		.cfi_def_cfa_register 7
 260 000a 0246     		mov	r2, r0
 261 000c FB1D     		adds	r3, r7, #7
 262 000e 1A70     		strb	r2, [r3]
  80:debug.c       ****     
  81:debug.c       ****     char debug_string[MAX_DEBUG_STRING_LENGTH]; // string to be printed
  82:debug.c       ****     
  83:debug.c       ****     // if debug flag = 1, then print debug statements, otherwise don't print anything
  84:debug.c       ****     #if USE_DEBUG
  85:debug.c       ****    
  86:debug.c       ****         // if it is an error, warning, or startup notification and debug_level >= 0, then print the
  87:debug.c       ****         if ((type == NOTIF_TYPE_ERROR || type == NOTIF_TYPE_WARNING  || type == NOTIF_TYPE_STARTUP)
 263              		.loc 1 87 0
 264 0010 FB1D     		adds	r3, r7, #7
 265 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 266 0014 022B     		cmp	r3, #2
 267 0016 07D0     		beq	.L11
 268              		.loc 1 87 0 is_stmt 0 discriminator 1
 269 0018 FB1D     		adds	r3, r7, #7
 270 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 271 001c 012B     		cmp	r3, #1
 272 001e 03D0     		beq	.L11
 273              		.loc 1 87 0 discriminator 2
 274 0020 FB1D     		adds	r3, r7, #7
 275 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 276 0024 032B     		cmp	r3, #3
 277 0026 1DD1     		bne	.L12
 278              	.L11:
  88:debug.c       ****             printd("{ ");
 279              		.loc 1 88 0 is_stmt 1
 280 0028 2948     		ldr	r0, .L20
 281 002a FFF7FEFF 		bl	printd
  89:debug.c       ****             printd("\"time\":\"%ld\" " , getTimeStamp());
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 8


 282              		.loc 1 89 0
 283 002e FFF7FEFF 		bl	getTimeStamp
 284 0032 0346     		mov	r3, r0
 285 0034 1946     		mov	r1, r3
 286 0036 2748     		ldr	r0, .L20+4
 287 0038 FFF7FEFF 		bl	printd
  90:debug.c       ****             
  91:debug.c       ****             if (type == NOTIF_TYPE_ERROR){
 288              		.loc 1 91 0
 289 003c FB1D     		adds	r3, r7, #7
 290 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 291 0040 022B     		cmp	r3, #2
 292 0042 03D1     		bne	.L13
  92:debug.c       ****                 printd("\"event\":\"error\" \"value\":\"");
 293              		.loc 1 92 0
 294 0044 2448     		ldr	r0, .L20+8
 295 0046 FFF7FEFF 		bl	printd
  91:debug.c       ****                 printd("\"event\":\"error\" \"value\":\"");
 296              		.loc 1 91 0
 297 004a 20E0     		b	.L16
 298              	.L13:
  93:debug.c       ****             }else if(type == NOTIF_TYPE_WARNING){
 299              		.loc 1 93 0
 300 004c FB1D     		adds	r3, r7, #7
 301 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 0050 012B     		cmp	r3, #1
 303 0052 03D1     		bne	.L15
  94:debug.c       ****                 printd("\"event\":\"warning\" \"value\":\"");
 304              		.loc 1 94 0
 305 0054 2148     		ldr	r0, .L20+12
 306 0056 FFF7FEFF 		bl	printd
  91:debug.c       ****                 printd("\"event\":\"error\" \"value\":\"");
 307              		.loc 1 91 0
 308 005a 18E0     		b	.L16
 309              	.L15:
  95:debug.c       ****             } else{
  96:debug.c       ****                 printd("\"event\":\"startup\" \"value\":\"");
 310              		.loc 1 96 0
 311 005c 2048     		ldr	r0, .L20+16
 312 005e FFF7FEFF 		bl	printd
  91:debug.c       ****                 printd("\"event\":\"error\" \"value\":\"");
 313              		.loc 1 91 0
 314 0062 14E0     		b	.L16
 315              	.L12:
  97:debug.c       ****             }
  98:debug.c       ****         
  99:debug.c       ****         // else if it is an event notification and debug level >= 1, then print everything
 100:debug.c       ****         }else if (type == NOTIF_TYPE_EVENT && updatable_parameters.debug_level >= 1){
 316              		.loc 1 100 0
 317 0064 FB1D     		adds	r3, r7, #7
 318 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 319 0068 002B     		cmp	r3, #0
 320 006a 29D1     		bne	.L19
 321              		.loc 1 100 0 is_stmt 0 discriminator 1
 322 006c 1D4B     		ldr	r3, .L20+20
 323 006e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 324 0070 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 9


 325 0072 25D0     		beq	.L19
 101:debug.c       ****             printd("{ ");
 326              		.loc 1 101 0 is_stmt 1
 327 0074 1648     		ldr	r0, .L20
 328 0076 FFF7FEFF 		bl	printd
 102:debug.c       ****             printd("\"time\":\"%ld\" " , getTimeStamp());
 329              		.loc 1 102 0
 330 007a FFF7FEFF 		bl	getTimeStamp
 331 007e 0346     		mov	r3, r0
 332 0080 1946     		mov	r1, r3
 333 0082 1448     		ldr	r0, .L20+4
 334 0084 FFF7FEFF 		bl	printd
 103:debug.c       ****             printd("\"event\":\"notif\" \"value\":\"");
 335              		.loc 1 103 0
 336 0088 1748     		ldr	r0, .L20+24
 337 008a FFF7FEFF 		bl	printd
 338              	.L16:
 104:debug.c       **** 
 105:debug.c       ****         // else do not print and exit the function    
 106:debug.c       ****         }else{
 107:debug.c       ****             return;
 108:debug.c       ****         }
 109:debug.c       ****         
 110:debug.c       ****         va_list argptr; // create variable argprt of the type va_list from stdarg.h
 111:debug.c       ****         va_start(argptr, format); // from stdarg.h: the va_start() macro is invoked to initialize a
 339              		.loc 1 111 0 discriminator 1
 340 008e 07F50262 		add	r2, r7, #2080
 341 0092 07F10C03 		add	r3, r7, #12
 342 0096 1A60     		str	r2, [r3]
 112:debug.c       ****         vsnprintf(debug_string, MAX_DEBUG_STRING_LENGTH, format, argptr); // send text to buffer
 343              		.loc 1 112 0 discriminator 1
 344 0098 07F10C03 		add	r3, r7, #12
 345 009c 07F11000 		add	r0, r7, #16
 346 00a0 1B68     		ldr	r3, [r3]
 347 00a2 D7F81C28 		ldr	r2, [r7, #2076]
 348 00a6 4FF40061 		mov	r1, #2048
 349 00aa FFF7FEFF 		bl	vsnprintf
 113:debug.c       ****         Debug_UART_PutString(debug_string); // Sends a NULL terminated string to the TX buffer for 
 350              		.loc 1 113 0 discriminator 1
 351 00ae 07F11003 		add	r3, r7, #16
 352 00b2 1846     		mov	r0, r3
 353 00b4 FFF7FEFF 		bl	Debug_UART_PutString
 114:debug.c       ****         va_end(argptr); // the va_end() macro is used to clean up; it invalidates ap for use (unles
 115:debug.c       ****         printd("\"}\r\n");
 354              		.loc 1 115 0 discriminator 1
 355 00b8 0C48     		ldr	r0, .L20+28
 356 00ba FFF7FEFF 		bl	printd
 357 00be 00E0     		b	.L10
 358              	.L19:
 107:debug.c       ****         }
 359              		.loc 1 107 0
 360 00c0 00BF     		nop
 361              	.L10:
 116:debug.c       **** //        // Get clock time and save to timeStamp
 117:debug.c       **** //        long timeStamp = getTimeStamp();
 118:debug.c       **** //        char c_timeStamp[32];
 119:debug.c       **** //        snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 10


 120:debug.c       **** //        SD_write(BB_fileName,"a+"," "); // Write a space to the SD Card  
 121:debug.c       **** //        SD_write(BB_fileName,"a+",c_timeStamp); // Write timestamp to SD Card 
 122:debug.c       **** //        SD_write(BB_fileName,"a+"," "); // Write a space to the SD Card  
 123:debug.c       **** //        SD_write(BB_fileName,"a+",debug_string); // Write data to SD Card  
 124:debug.c       **** //        SD_write(BB_fileName,"a+"," "); // Write a space to the SD Card  
 125:debug.c       **** 
 126:debug.c       ****     #endif 
 127:debug.c       **** }
 362              		.loc 1 127 0
 363 00c2 07F61407 		addw	r7, r7, #2068
 364              		.cfi_def_cfa_offset 20
 365 00c6 BD46     		mov	sp, r7
 366              		.cfi_def_cfa_register 13
 367              		@ sp needed
 368 00c8 BDE88040 		pop	{r7, lr}
 369              		.cfi_restore 14
 370              		.cfi_restore 7
 371              		.cfi_def_cfa_offset 12
 372 00cc 03B0     		add	sp, sp, #12
 373              		.cfi_restore 3
 374              		.cfi_restore 2
 375              		.cfi_restore 1
 376              		.cfi_def_cfa_offset 0
 377 00ce 7047     		bx	lr
 378              	.L21:
 379              		.align	2
 380              	.L20:
 381 00d0 00000000 		.word	.LC0
 382 00d4 04000000 		.word	.LC1
 383 00d8 14000000 		.word	.LC2
 384 00dc 30000000 		.word	.LC3
 385 00e0 4C000000 		.word	.LC4
 386 00e4 00000000 		.word	updatable_parameters
 387 00e8 68000000 		.word	.LC5
 388 00ec 84000000 		.word	.LC6
 389              		.cfi_endproc
 390              	.LFE69:
 391              		.size	printNotif, .-printNotif
 392              		.section	.rodata
 393 0089 000000   		.align	2
 394              	.LC7:
 395 008c 22657665 		.ascii	"\"event\":\"test\" \000"
 395      6E74223A 
 395      22746573 
 395      74222000 
 396              		.align	2
 397              	.LC8:
 398 009c 226E616D 		.ascii	"\"name\":\"%s\" \000"
 398      65223A22 
 398      25732220 
 398      00
 399 00a9 000000   		.align	2
 400              	.LC9:
 401 00ac 22737461 		.ascii	"\"status\":\"%d\" \000"
 401      74757322 
 401      3A222564 
 401      222000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 11


 402 00bb 00       		.align	2
 403              	.LC10:
 404 00bc 22726561 		.ascii	"\"reason\":\"%s\" \000"
 404      736F6E22 
 404      3A222573 
 404      222000
 405 00cb 00       		.align	2
 406              	.LC11:
 407 00cc 7D0D0A00 		.ascii	"}\015\012\000"
 408              		.section	.text.printTestStatus,"ax",%progbits
 409              		.align	2
 410              		.global	printTestStatus
 411              		.thumb
 412              		.thumb_func
 413              		.type	printTestStatus, %function
 414              	printTestStatus:
 415              	.LFB70:
 128:debug.c       **** 
 129:debug.c       **** // Print debug test status
 130:debug.c       **** void printTestStatus(test_t test){
 416              		.loc 1 130 0
 417              		.cfi_startproc
 418              		@ args = 388, pretend = 16, frame = 0
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 0000 84B0     		sub	sp, sp, #16
 421              		.cfi_def_cfa_offset 16
 422 0002 80B5     		push	{r7, lr}
 423              		.cfi_def_cfa_offset 24
 424              		.cfi_offset 7, -24
 425              		.cfi_offset 14, -20
 426 0004 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 428 0006 07F1080E 		add	lr, r7, #8
 429 000a 8EE80F00 		stmia	lr, {r0, r1, r2, r3}
 131:debug.c       ****     // if debug flag = 1
 132:debug.c       ****     #if USE_DEBUG
 133:debug.c       ****         printd("{ ");
 430              		.loc 1 133 0
 431 000e 1348     		ldr	r0, .L23
 432 0010 FFF7FEFF 		bl	printd
 134:debug.c       ****         printd("\"time\":\"%ld\" " , getTimeStamp());
 433              		.loc 1 134 0
 434 0014 FFF7FEFF 		bl	getTimeStamp
 435 0018 0346     		mov	r3, r0
 436 001a 1946     		mov	r1, r3
 437 001c 1048     		ldr	r0, .L23+4
 438 001e FFF7FEFF 		bl	printd
 135:debug.c       ****         
 136:debug.c       ****         printd("\"event\":\"test\" ");
 439              		.loc 1 136 0
 440 0022 1048     		ldr	r0, .L23+8
 441 0024 FFF7FEFF 		bl	printd
 137:debug.c       ****         printd("\"name\":\"%s\" ", test.test_name);
 442              		.loc 1 137 0
 443 0028 07F10801 		add	r1, r7, #8
 444 002c 0E48     		ldr	r0, .L23+12
 445 002e FFF7FEFF 		bl	printd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 12


 138:debug.c       ****         printd("\"status\":\"%d\" ", test.status);
 446              		.loc 1 138 0
 447 0032 97F88830 		ldrb	r3, [r7, #136]	@ zero_extendqisi2
 448 0036 1946     		mov	r1, r3
 449 0038 0C48     		ldr	r0, .L23+16
 450 003a FFF7FEFF 		bl	printd
 139:debug.c       ****         printd("\"reason\":\"%s\" ", test.reason);
 451              		.loc 1 139 0
 452 003e 07F18903 		add	r3, r7, #137
 453 0042 1946     		mov	r1, r3
 454 0044 0A48     		ldr	r0, .L23+20
 455 0046 FFF7FEFF 		bl	printd
 140:debug.c       **** 
 141:debug.c       ****         printd("}\r\n");
 456              		.loc 1 141 0
 457 004a 0A48     		ldr	r0, .L23+24
 458 004c FFF7FEFF 		bl	printd
 142:debug.c       ****     #endif
 143:debug.c       ****    
 144:debug.c       **** }
 459              		.loc 1 144 0
 460 0050 00BF     		nop
 461 0052 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 0054 BDE88040 		pop	{r7, lr}
 465              		.cfi_restore 14
 466              		.cfi_restore 7
 467              		.cfi_def_cfa_offset 16
 468 0058 04B0     		add	sp, sp, #16
 469              		.cfi_def_cfa_offset 0
 470 005a 7047     		bx	lr
 471              	.L24:
 472              		.align	2
 473              	.L23:
 474 005c 00000000 		.word	.LC0
 475 0060 04000000 		.word	.LC1
 476 0064 8C000000 		.word	.LC7
 477 0068 9C000000 		.word	.LC8
 478 006c AC000000 		.word	.LC9
 479 0070 BC000000 		.word	.LC10
 480 0074 CC000000 		.word	.LC11
 481              		.cfi_endproc
 482              	.LFE70:
 483              		.size	printTestStatus, .-printTestStatus
 484              		.section	.text.getTimeStamp,"ax",%progbits
 485              		.align	2
 486              		.global	getTimeStamp
 487              		.thumb
 488              		.thumb_func
 489              		.type	getTimeStamp, %function
 490              	getTimeStamp:
 491              	.LFB71:
 145:debug.c       **** 
 146:debug.c       **** 
 147:debug.c       **** // Returns local times in epoch seconds (seconds since Jan 1, 1970)
 148:debug.c       **** // Can also cast this to a t_of_day struct
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 13


 149:debug.c       **** long getTimeStamp(){
 492              		.loc 1 149 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 48
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 80B5     		push	{r7, lr}
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0002 8CB0     		sub	sp, sp, #48
 501              		.cfi_def_cfa_offset 56
 502 0004 00AF     		add	r7, sp, #0
 503              		.cfi_def_cfa_register 7
 150:debug.c       ****     // RTC_TIME_DATE * RTC_ReadTime(void) Description: Reads the current time and date. Parameters:
 151:debug.c       ****     // Creates a variable named localTime that is a pointer to RTC_TIME_DATE. It saves the time and
 152:debug.c       ****     RTC_TIME_DATE *localTime = RTC_ReadTime();
 504              		.loc 1 152 0
 505 0006 FFF7FEFF 		bl	RTC_ReadTime
 506 000a F862     		str	r0, [r7, #44]
 153:debug.c       ****    
 154:debug.c       ****     struct tm t; // creates variable t of struct tm
 155:debug.c       ****     time_t t_of_day;
 156:debug.c       **** 
 157:debug.c       ****     // sets each variable to the correct time 
 158:debug.c       ****     t.tm_sec = localTime->Sec;
 507              		.loc 1 158 0
 508 000c FB6A     		ldr	r3, [r7, #44]
 509 000e 1B78     		ldrb	r3, [r3]
 510 0010 DBB2     		uxtb	r3, r3
 511 0012 7B60     		str	r3, [r7, #4]
 159:debug.c       ****     t.tm_min = localTime->Min;
 512              		.loc 1 159 0
 513 0014 FB6A     		ldr	r3, [r7, #44]
 514 0016 5B78     		ldrb	r3, [r3, #1]
 515 0018 DBB2     		uxtb	r3, r3
 516 001a BB60     		str	r3, [r7, #8]
 160:debug.c       ****     t.tm_hour = localTime->Hour;
 517              		.loc 1 160 0
 518 001c FB6A     		ldr	r3, [r7, #44]
 519 001e 9B78     		ldrb	r3, [r3, #2]
 520 0020 DBB2     		uxtb	r3, r3
 521 0022 FB60     		str	r3, [r7, #12]
 161:debug.c       ****     t.tm_year = localTime->Year - 1900;  // Year - 1900
 522              		.loc 1 161 0
 523 0024 FB6A     		ldr	r3, [r7, #44]
 524 0026 5B89     		ldrh	r3, [r3, #10]	@ movhi
 525 0028 9BB2     		uxth	r3, r3
 526 002a A3F26C73 		subw	r3, r3, #1900
 527 002e BB61     		str	r3, [r7, #24]
 162:debug.c       ****     t.tm_mon = localTime->Month;           // Month, where 0 = jan
 528              		.loc 1 162 0
 529 0030 FB6A     		ldr	r3, [r7, #44]
 530 0032 1B7A     		ldrb	r3, [r3, #8]
 531 0034 DBB2     		uxtb	r3, r3
 532 0036 7B61     		str	r3, [r7, #20]
 163:debug.c       ****     t.tm_mday = localTime->DayOfMonth;          // Day of the month
 533              		.loc 1 163 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 14


 534 0038 FB6A     		ldr	r3, [r7, #44]
 535 003a 1B79     		ldrb	r3, [r3, #4]
 536 003c DBB2     		uxtb	r3, r3
 537 003e 3B61     		str	r3, [r7, #16]
 164:debug.c       ****     t.tm_isdst = 0;        // Is Daylight Savings on? 1 = yes, 0 = no, -1 = unknown
 538              		.loc 1 164 0
 539 0040 0023     		movs	r3, #0
 540 0042 7B62     		str	r3, [r7, #36]
 165:debug.c       ****     
 166:debug.c       ****     // the mktime() function converts a broken-down local time (pointed to by timeptr) and returns 
 167:debug.c       ****     // the syntax for the mktime function in the C Language is: time_t mktime(struct tm *timeptr);
 168:debug.c       ****     // creates variable t_of_day of type time_t
 169:debug.c       ****     t_of_day = mktime(&t); // determines a calendar time
 541              		.loc 1 169 0
 542 0044 3B1D     		adds	r3, r7, #4
 543 0046 1846     		mov	r0, r3
 544 0048 FFF7FEFF 		bl	mktime
 545 004c B862     		str	r0, [r7, #40]
 170:debug.c       **** 
 171:debug.c       ****     return (long) t_of_day;
 546              		.loc 1 171 0
 547 004e BB6A     		ldr	r3, [r7, #40]
 172:debug.c       **** }
 548              		.loc 1 172 0
 549 0050 1846     		mov	r0, r3
 550 0052 3037     		adds	r7, r7, #48
 551              		.cfi_def_cfa_offset 8
 552 0054 BD46     		mov	sp, r7
 553              		.cfi_def_cfa_register 13
 554              		@ sp needed
 555 0056 80BD     		pop	{r7, pc}
 556              		.cfi_endproc
 557              	.LFE71:
 558              		.size	getTimeStamp, .-getTimeStamp
 559              		.section	.text.stripEscapeCharacters,"ax",%progbits
 560              		.align	2
 561              		.global	stripEscapeCharacters
 562              		.thumb
 563              		.thumb_func
 564              		.type	stripEscapeCharacters, %function
 565              	stripEscapeCharacters:
 566              	.LFB72:
 173:debug.c       **** 
 174:debug.c       **** // The C library function char *strchr(const char *str, int c) searches for the first occurrence of
 175:debug.c       **** // Format for strchr() function: char *strchr(const char *str, int c).
 176:debug.c       **** void stripEscapeCharacters(char *string){
 567              		.loc 1 176 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 16
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571 0000 80B5     		push	{r7, lr}
 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 7, -8
 574              		.cfi_offset 14, -4
 575 0002 84B0     		sub	sp, sp, #16
 576              		.cfi_def_cfa_offset 24
 577 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 15


 578              		.cfi_def_cfa_register 7
 579 0006 7860     		str	r0, [r7, #4]
 177:debug.c       **** 
 178:debug.c       ****   char * pch;
 179:debug.c       ****   pch=strchr(string,'\n');
 580              		.loc 1 179 0
 581 0008 0A21     		movs	r1, #10
 582 000a 7868     		ldr	r0, [r7, #4]
 583 000c FFF7FEFF 		bl	strchr
 584 0010 F860     		str	r0, [r7, #12]
 180:debug.c       ****   while (pch!=NULL)
 585              		.loc 1 180 0
 586 0012 0EE0     		b	.L28
 587              	.L29:
 181:debug.c       ****   {
 182:debug.c       ****     string[pch-string+1] = 0;
 588              		.loc 1 182 0
 589 0014 FA68     		ldr	r2, [r7, #12]
 590 0016 7B68     		ldr	r3, [r7, #4]
 591 0018 D31A     		subs	r3, r2, r3
 592 001a 0133     		adds	r3, r3, #1
 593 001c 7A68     		ldr	r2, [r7, #4]
 594 001e 1344     		add	r3, r3, r2
 595 0020 0022     		movs	r2, #0
 596 0022 1A70     		strb	r2, [r3]
 183:debug.c       ****     pch=strchr(pch+1,'s');
 597              		.loc 1 183 0
 598 0024 FB68     		ldr	r3, [r7, #12]
 599 0026 0133     		adds	r3, r3, #1
 600 0028 7321     		movs	r1, #115
 601 002a 1846     		mov	r0, r3
 602 002c FFF7FEFF 		bl	strchr
 603 0030 F860     		str	r0, [r7, #12]
 604              	.L28:
 180:debug.c       ****   while (pch!=NULL)
 605              		.loc 1 180 0
 606 0032 FB68     		ldr	r3, [r7, #12]
 607 0034 002B     		cmp	r3, #0
 608 0036 EDD1     		bne	.L29
 184:debug.c       ****   }
 185:debug.c       **** }
 609              		.loc 1 185 0
 610 0038 00BF     		nop
 611 003a 1037     		adds	r7, r7, #16
 612              		.cfi_def_cfa_offset 8
 613 003c BD46     		mov	sp, r7
 614              		.cfi_def_cfa_register 13
 615              		@ sp needed
 616 003e 80BD     		pop	{r7, pc}
 617              		.cfi_endproc
 618              	.LFE72:
 619              		.size	stripEscapeCharacters, .-stripEscapeCharacters
 620              		.section	.text.strextract,"ax",%progbits
 621              		.align	2
 622              		.global	strextract
 623              		.thumb
 624              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 16


 625              		.type	strextract, %function
 626              	strextract:
 627              	.LFB73:
 186:debug.c       **** 
 187:debug.c       **** // Extract
 188:debug.c       **** char *strextract(const char input_str[], char output_str[],
 189:debug.c       ****                  const char search_start[], const char search_end[]) {
 628              		.loc 1 189 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 24
 631              		@ frame_needed = 1, uses_anonymous_args = 0
 632 0000 80B5     		push	{r7, lr}
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 7, -8
 635              		.cfi_offset 14, -4
 636 0002 86B0     		sub	sp, sp, #24
 637              		.cfi_def_cfa_offset 32
 638 0004 00AF     		add	r7, sp, #0
 639              		.cfi_def_cfa_register 7
 640 0006 F860     		str	r0, [r7, #12]
 641 0008 B960     		str	r1, [r7, #8]
 642 000a 7A60     		str	r2, [r7, #4]
 643 000c 3B60     		str	r3, [r7]
 190:debug.c       ****     if (input_str == NULL) return NULL;
 644              		.loc 1 190 0
 645 000e FB68     		ldr	r3, [r7, #12]
 646 0010 002B     		cmp	r3, #0
 647 0012 01D1     		bne	.L31
 648              		.loc 1 190 0 is_stmt 0 discriminator 1
 649 0014 0023     		movs	r3, #0
 650 0016 29E0     		b	.L32
 651              	.L31:
 191:debug.c       ****     char *begin, *end = NULL;
 652              		.loc 1 191 0 is_stmt 1
 653 0018 0023     		movs	r3, #0
 654 001a 7B61     		str	r3, [r7, #20]
 192:debug.c       **** 
 193:debug.c       ****     // strstr(): char *strstr(const char *haystack, const char *needle). haystack - main C string t
 194:debug.c       ****     if ((begin = strstr(input_str, search_start))) {
 655              		.loc 1 194 0
 656 001c 7968     		ldr	r1, [r7, #4]
 657 001e F868     		ldr	r0, [r7, #12]
 658 0020 FFF7FEFF 		bl	strstr
 659 0024 3861     		str	r0, [r7, #16]
 660 0026 3B69     		ldr	r3, [r7, #16]
 661 0028 002B     		cmp	r3, #0
 662 002a 1ED0     		beq	.L33
 195:debug.c       ****         // The strlen() function calculates the length of a given string. The strlen() function tak
 196:debug.c       ****         begin += strlen(search_start);
 663              		.loc 1 196 0
 664 002c 7868     		ldr	r0, [r7, #4]
 665 002e FFF7FEFF 		bl	strlen
 666 0032 0246     		mov	r2, r0
 667 0034 3B69     		ldr	r3, [r7, #16]
 668 0036 1344     		add	r3, r3, r2
 669 0038 3B61     		str	r3, [r7, #16]
 197:debug.c       ****         if ((end = strstr(begin, search_end))) {
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 17


 670              		.loc 1 197 0
 671 003a 3968     		ldr	r1, [r7]
 672 003c 3869     		ldr	r0, [r7, #16]
 673 003e FFF7FEFF 		bl	strstr
 674 0042 7861     		str	r0, [r7, #20]
 675 0044 7B69     		ldr	r3, [r7, #20]
 676 0046 002B     		cmp	r3, #0
 677 0048 0FD0     		beq	.L33
 198:debug.c       ****             // strncpy(: char *strncpy(char *dest, const char *src, size_t n). dest -  pointer to t
 199:debug.c       ****             strncpy(output_str, begin, end - begin);
 678              		.loc 1 199 0
 679 004a 7A69     		ldr	r2, [r7, #20]
 680 004c 3B69     		ldr	r3, [r7, #16]
 681 004e D31A     		subs	r3, r2, r3
 682 0050 1A46     		mov	r2, r3
 683 0052 3969     		ldr	r1, [r7, #16]
 684 0054 B868     		ldr	r0, [r7, #8]
 685 0056 FFF7FEFF 		bl	strncpy
 200:debug.c       ****             output_str[end - begin] = '\0';
 686              		.loc 1 200 0
 687 005a 7A69     		ldr	r2, [r7, #20]
 688 005c 3B69     		ldr	r3, [r7, #16]
 689 005e D31A     		subs	r3, r2, r3
 690 0060 1A46     		mov	r2, r3
 691 0062 BB68     		ldr	r3, [r7, #8]
 692 0064 1344     		add	r3, r3, r2
 693 0066 0022     		movs	r2, #0
 694 0068 1A70     		strb	r2, [r3]
 695              	.L33:
 201:debug.c       ****         }
 202:debug.c       ****     }
 203:debug.c       **** 
 204:debug.c       ****     return end;
 696              		.loc 1 204 0
 697 006a 7B69     		ldr	r3, [r7, #20]
 698              	.L32:
 205:debug.c       **** }
 699              		.loc 1 205 0
 700 006c 1846     		mov	r0, r3
 701 006e 1837     		adds	r7, r7, #24
 702              		.cfi_def_cfa_offset 8
 703 0070 BD46     		mov	sp, r7
 704              		.cfi_def_cfa_register 13
 705              		@ sp needed
 706 0072 80BD     		pop	{r7, pc}
 707              		.cfi_endproc
 708              	.LFE73:
 709              		.size	strextract, .-strextract
 710              		.section	.text.printd,"ax",%progbits
 711              		.align	2
 712              		.global	printd
 713              		.thumb
 714              		.thumb_func
 715              		.type	printd, %function
 716              	printd:
 717              	.LFB74:
 206:debug.c       **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 18


 207:debug.c       **** //outr attempt at a safe (from buffer overflow) version of printf     
 208:debug.c       **** void printd(char* format, ...){
 718              		.loc 1 208 0
 719              		.cfi_startproc
 720              		@ args = 4, pretend = 16, frame = 2056
 721              		@ frame_needed = 1, uses_anonymous_args = 1
 722 0000 0FB4     		push	{r0, r1, r2, r3}
 723              		.cfi_def_cfa_offset 16
 724              		.cfi_offset 0, -16
 725              		.cfi_offset 1, -12
 726              		.cfi_offset 2, -8
 727              		.cfi_offset 3, -4
 728 0002 80B5     		push	{r7, lr}
 729              		.cfi_def_cfa_offset 24
 730              		.cfi_offset 7, -24
 731              		.cfi_offset 14, -20
 732 0004 ADF6080D 		subw	sp, sp, #2056
 733              		.cfi_def_cfa_offset 2080
 734 0008 00AF     		add	r7, sp, #0
 735              		.cfi_def_cfa_register 7
 209:debug.c       ****     
 210:debug.c       ****     va_list argptr; // Create variable argptr of data structure va_list
 211:debug.c       ****     va_start(argptr, format); // void va_start(va_list ap, last_arg) initializes ap variable to be 
 736              		.loc 1 211 0
 737 000a 07F61403 		addw	r3, r7, #2068
 738 000e C7F80438 		str	r3, [r7, #2052]
 212:debug.c       ****     
 213:debug.c       ****     // Create character array debug_string of size MAX_DEBUG_STRING_LENGTH
 214:debug.c       ****     char debug_string[MAX_DEBUG_STRING_LENGTH];
 215:debug.c       ****     // The vsnprintf() used to write a formatted string to a string buffer.vsnprintf(debug_string,M
 216:debug.c       ****     vsnprintf(debug_string,MAX_DEBUG_STRING_LENGTH,format, argptr);
 739              		.loc 1 216 0
 740 0012 381D     		adds	r0, r7, #4
 741 0014 D7F80438 		ldr	r3, [r7, #2052]
 742 0018 D7F81028 		ldr	r2, [r7, #2064]
 743 001c 4FF40061 		mov	r1, #2048
 744 0020 FFF7FEFF 		bl	vsnprintf
 217:debug.c       ****     // Sends a NULL terminated string to the TX buffer for transmission.
 218:debug.c       ****     Debug_UART_PutString(debug_string);
 745              		.loc 1 218 0
 746 0024 3B1D     		adds	r3, r7, #4
 747 0026 1846     		mov	r0, r3
 748 0028 FFF7FEFF 		bl	Debug_UART_PutString
 219:debug.c       ****     
 220:debug.c       ****     va_end(argptr); // macro void va_end(va_list ap) allows a function with variable arguments whic
 221:debug.c       ****     
 222:debug.c       **** }
 749              		.loc 1 222 0
 750 002c 00BF     		nop
 751 002e 07F60807 		addw	r7, r7, #2056
 752              		.cfi_def_cfa_offset 24
 753 0032 BD46     		mov	sp, r7
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 0034 BDE88040 		pop	{r7, lr}
 757              		.cfi_restore 14
 758              		.cfi_restore 7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 19


 759              		.cfi_def_cfa_offset 16
 760 0038 04B0     		add	sp, sp, #16
 761              		.cfi_restore 3
 762              		.cfi_restore 2
 763              		.cfi_restore 1
 764              		.cfi_restore 0
 765              		.cfi_def_cfa_offset 0
 766 003a 7047     		bx	lr
 767              		.cfi_endproc
 768              	.LFE74:
 769              		.size	printd, .-printd
 770              		.text
 771              	.Letext0:
 772              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 773              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 774              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 775              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 776              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 777              		.file 7 "Generated_Source\\PSoC5/cytypes.h"
 778              		.file 8 "Generated_Source\\PSoC5/RTC.h"
 779              		.file 9 "testing.h"
 780              		.file 10 "data.h"
 781              		.file 11 "modem.h"
 782              		.file 12 "Generated_Source\\PSoC5/core_cm3.h"
 783              		.file 13 "<built-in>"
 784              		.section	.debug_info,"",%progbits
 785              	.Ldebug_info0:
 786 0000 DD060000 		.4byte	0x6dd
 787 0004 0400     		.2byte	0x4
 788 0006 00000000 		.4byte	.Ldebug_abbrev0
 789 000a 04       		.byte	0x4
 790 000b 01       		.uleb128 0x1
 791 000c 71000000 		.4byte	.LASF103
 792 0010 0C       		.byte	0xc
 793 0011 E6020000 		.4byte	.LASF104
 794 0015 B2010000 		.4byte	.LASF105
 795 0019 00000000 		.4byte	.Ldebug_ranges0+0
 796 001d 00000000 		.4byte	0
 797 0021 00000000 		.4byte	.Ldebug_line0
 798 0025 02       		.uleb128 0x2
 799 0026 01       		.byte	0x1
 800 0027 06       		.byte	0x6
 801 0028 EE020000 		.4byte	.LASF0
 802 002c 02       		.uleb128 0x2
 803 002d 01       		.byte	0x1
 804 002e 08       		.byte	0x8
 805 002f 9E020000 		.4byte	.LASF1
 806 0033 02       		.uleb128 0x2
 807 0034 02       		.byte	0x2
 808 0035 05       		.byte	0x5
 809 0036 4D000000 		.4byte	.LASF2
 810 003a 02       		.uleb128 0x2
 811 003b 02       		.byte	0x2
 812 003c 07       		.byte	0x7
 813 003d 78030000 		.4byte	.LASF3
 814 0041 03       		.uleb128 0x3
 815 0042 92040000 		.4byte	.LASF10
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 20


 816 0046 02       		.byte	0x2
 817 0047 3F       		.byte	0x3f
 818 0048 4C000000 		.4byte	0x4c
 819 004c 02       		.uleb128 0x2
 820 004d 04       		.byte	0x4
 821 004e 05       		.byte	0x5
 822 004f 1F020000 		.4byte	.LASF4
 823 0053 02       		.uleb128 0x2
 824 0054 04       		.byte	0x4
 825 0055 07       		.byte	0x7
 826 0056 58040000 		.4byte	.LASF5
 827 005a 02       		.uleb128 0x2
 828 005b 08       		.byte	0x8
 829 005c 05       		.byte	0x5
 830 005d 07010000 		.4byte	.LASF6
 831 0061 02       		.uleb128 0x2
 832 0062 08       		.byte	0x8
 833 0063 07       		.byte	0x7
 834 0064 02030000 		.4byte	.LASF7
 835 0068 04       		.uleb128 0x4
 836 0069 04       		.byte	0x4
 837 006a 05       		.byte	0x5
 838 006b 696E7400 		.ascii	"int\000"
 839 006f 02       		.uleb128 0x2
 840 0070 04       		.byte	0x4
 841 0071 07       		.byte	0x7
 842 0072 1E030000 		.4byte	.LASF8
 843 0076 02       		.uleb128 0x2
 844 0077 08       		.byte	0x8
 845 0078 04       		.byte	0x4
 846 0079 7D020000 		.4byte	.LASF9
 847 007d 03       		.uleb128 0x3
 848 007e A3040000 		.4byte	.LASF11
 849 0082 03       		.byte	0x3
 850 0083 28       		.byte	0x28
 851 0084 88000000 		.4byte	0x88
 852 0088 05       		.uleb128 0x5
 853 0089 FC010000 		.4byte	.LASF16
 854 008d 04       		.byte	0x4
 855 008e 0D       		.byte	0xd
 856 008f 00       		.byte	0
 857 0090 9F000000 		.4byte	0x9f
 858 0094 06       		.uleb128 0x6
 859 0095 AA030000 		.4byte	.LASF106
 860 0099 9F000000 		.4byte	0x9f
 861 009d 00       		.byte	0
 862 009e 00       		.byte	0
 863 009f 07       		.uleb128 0x7
 864 00a0 04       		.byte	0x4
 865 00a1 02       		.uleb128 0x2
 866 00a2 04       		.byte	0x4
 867 00a3 07       		.byte	0x7
 868 00a4 57000000 		.4byte	.LASF12
 869 00a8 08       		.uleb128 0x8
 870 00a9 04       		.byte	0x4
 871 00aa AE000000 		.4byte	0xae
 872 00ae 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 21


 873 00af 01       		.byte	0x1
 874 00b0 08       		.byte	0x8
 875 00b1 06020000 		.4byte	.LASF13
 876 00b5 08       		.uleb128 0x8
 877 00b6 04       		.byte	0x4
 878 00b7 BB000000 		.4byte	0xbb
 879 00bb 09       		.uleb128 0x9
 880 00bc AE000000 		.4byte	0xae
 881 00c0 03       		.uleb128 0x3
 882 00c1 DD030000 		.4byte	.LASF14
 883 00c5 04       		.byte	0x4
 884 00c6 2C       		.byte	0x2c
 885 00c7 41000000 		.4byte	0x41
 886 00cb 03       		.uleb128 0x3
 887 00cc 52010000 		.4byte	.LASF15
 888 00d0 05       		.byte	0x5
 889 00d1 28       		.byte	0x28
 890 00d2 4C000000 		.4byte	0x4c
 891 00d6 0A       		.uleb128 0xa
 892 00d7 746D00   		.ascii	"tm\000"
 893 00da 24       		.byte	0x24
 894 00db 06       		.byte	0x6
 895 00dc 21       		.byte	0x21
 896 00dd 4E010000 		.4byte	0x14e
 897 00e1 0B       		.uleb128 0xb
 898 00e2 CA040000 		.4byte	.LASF17
 899 00e6 06       		.byte	0x6
 900 00e7 23       		.byte	0x23
 901 00e8 68000000 		.4byte	0x68
 902 00ec 00       		.byte	0
 903 00ed 0B       		.uleb128 0xb
 904 00ee 2D040000 		.4byte	.LASF18
 905 00f2 06       		.byte	0x6
 906 00f3 24       		.byte	0x24
 907 00f4 68000000 		.4byte	0x68
 908 00f8 04       		.byte	0x4
 909 00f9 0B       		.uleb128 0xb
 910 00fa 93010000 		.4byte	.LASF19
 911 00fe 06       		.byte	0x6
 912 00ff 25       		.byte	0x25
 913 0100 68000000 		.4byte	0x68
 914 0104 08       		.byte	0x8
 915 0105 0B       		.uleb128 0xb
 916 0106 19000000 		.4byte	.LASF20
 917 010a 06       		.byte	0x6
 918 010b 26       		.byte	0x26
 919 010c 68000000 		.4byte	0x68
 920 0110 0C       		.byte	0xc
 921 0111 0B       		.uleb128 0xb
 922 0112 AB010000 		.4byte	.LASF21
 923 0116 06       		.byte	0x6
 924 0117 27       		.byte	0x27
 925 0118 68000000 		.4byte	0x68
 926 011c 10       		.byte	0x10
 927 011d 0B       		.uleb128 0xb
 928 011e FA020000 		.4byte	.LASF22
 929 0122 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 22


 930 0123 28       		.byte	0x28
 931 0124 68000000 		.4byte	0x68
 932 0128 14       		.byte	0x14
 933 0129 0B       		.uleb128 0xb
 934 012a FF000000 		.4byte	.LASF23
 935 012e 06       		.byte	0x6
 936 012f 29       		.byte	0x29
 937 0130 68000000 		.4byte	0x68
 938 0134 18       		.byte	0x18
 939 0135 0B       		.uleb128 0xb
 940 0136 6A040000 		.4byte	.LASF24
 941 013a 06       		.byte	0x6
 942 013b 2A       		.byte	0x2a
 943 013c 68000000 		.4byte	0x68
 944 0140 1C       		.byte	0x1c
 945 0141 0B       		.uleb128 0xb
 946 0142 44040000 		.4byte	.LASF25
 947 0146 06       		.byte	0x6
 948 0147 2B       		.byte	0x2b
 949 0148 68000000 		.4byte	0x68
 950 014c 20       		.byte	0x20
 951 014d 00       		.byte	0
 952 014e 03       		.uleb128 0x3
 953 014f 59010000 		.4byte	.LASF26
 954 0153 03       		.byte	0x3
 955 0154 62       		.byte	0x62
 956 0155 7D000000 		.4byte	0x7d
 957 0159 0C       		.uleb128 0xc
 958 015a 73010000 		.4byte	.LASF27
 959 015e 07       		.byte	0x7
 960 015f 9201     		.2byte	0x192
 961 0161 2C000000 		.4byte	0x2c
 962 0165 0C       		.uleb128 0xc
 963 0166 4B010000 		.4byte	.LASF28
 964 016a 07       		.byte	0x7
 965 016b 9301     		.2byte	0x193
 966 016d 3A000000 		.4byte	0x3a
 967 0171 0C       		.uleb128 0xc
 968 0172 72040000 		.4byte	.LASF29
 969 0176 07       		.byte	0x7
 970 0177 9701     		.2byte	0x197
 971 0179 4C000000 		.4byte	0x4c
 972 017d 02       		.uleb128 0x2
 973 017e 04       		.byte	0x4
 974 017f 04       		.byte	0x4
 975 0180 9B010000 		.4byte	.LASF30
 976 0184 02       		.uleb128 0x2
 977 0185 08       		.byte	0x8
 978 0186 04       		.byte	0x4
 979 0187 78040000 		.4byte	.LASF31
 980 018b 0D       		.uleb128 0xd
 981 018c 0C       		.byte	0xc
 982 018d 08       		.byte	0x8
 983 018e 30       		.byte	0x30
 984 018f F4010000 		.4byte	0x1f4
 985 0193 0E       		.uleb128 0xe
 986 0194 53656300 		.ascii	"Sec\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 23


 987 0198 08       		.byte	0x8
 988 0199 32       		.byte	0x32
 989 019a 59010000 		.4byte	0x159
 990 019e 00       		.byte	0
 991 019f 0E       		.uleb128 0xe
 992 01a0 4D696E00 		.ascii	"Min\000"
 993 01a4 08       		.byte	0x8
 994 01a5 33       		.byte	0x33
 995 01a6 59010000 		.4byte	0x159
 996 01aa 01       		.byte	0x1
 997 01ab 0B       		.uleb128 0xb
 998 01ac 36010000 		.4byte	.LASF32
 999 01b0 08       		.byte	0x8
 1000 01b1 34       		.byte	0x34
 1001 01b2 59010000 		.4byte	0x159
 1002 01b6 02       		.byte	0x2
 1003 01b7 0B       		.uleb128 0xb
 1004 01b8 A1010000 		.4byte	.LASF33
 1005 01bc 08       		.byte	0x8
 1006 01bd 35       		.byte	0x35
 1007 01be 59010000 		.4byte	0x159
 1008 01c2 03       		.byte	0x3
 1009 01c3 0B       		.uleb128 0xb
 1010 01c4 1D040000 		.4byte	.LASF34
 1011 01c8 08       		.byte	0x8
 1012 01c9 36       		.byte	0x36
 1013 01ca 59010000 		.4byte	0x159
 1014 01ce 04       		.byte	0x4
 1015 01cf 0B       		.uleb128 0xb
 1016 01d0 0C050000 		.4byte	.LASF35
 1017 01d4 08       		.byte	0x8
 1018 01d5 37       		.byte	0x37
 1019 01d6 65010000 		.4byte	0x165
 1020 01da 06       		.byte	0x6
 1021 01db 0B       		.uleb128 0xb
 1022 01dc 77020000 		.4byte	.LASF36
 1023 01e0 08       		.byte	0x8
 1024 01e1 38       		.byte	0x38
 1025 01e2 59010000 		.4byte	0x159
 1026 01e6 08       		.byte	0x8
 1027 01e7 0B       		.uleb128 0xb
 1028 01e8 47020000 		.4byte	.LASF37
 1029 01ec 08       		.byte	0x8
 1030 01ed 39       		.byte	0x39
 1031 01ee 65010000 		.4byte	0x165
 1032 01f2 0A       		.byte	0xa
 1033 01f3 00       		.byte	0
 1034 01f4 03       		.uleb128 0x3
 1035 01f5 DE040000 		.4byte	.LASF38
 1036 01f9 08       		.byte	0x8
 1037 01fa 3A       		.byte	0x3a
 1038 01fb FF010000 		.4byte	0x1ff
 1039 01ff 0F       		.uleb128 0xf
 1040 0200 8B010000 		.4byte	0x18b
 1041 0204 10       		.uleb128 0x10
 1042 0205 8101     		.2byte	0x181
 1043 0207 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 24


 1044 0208 0A       		.byte	0xa
 1045 0209 32020000 		.4byte	0x232
 1046 020d 0B       		.uleb128 0xb
 1047 020e 2D000000 		.4byte	.LASF39
 1048 0212 09       		.byte	0x9
 1049 0213 0C       		.byte	0xc
 1050 0214 32020000 		.4byte	0x232
 1051 0218 00       		.byte	0
 1052 0219 0B       		.uleb128 0xb
 1053 021a A3030000 		.4byte	.LASF40
 1054 021e 09       		.byte	0x9
 1055 021f 0D       		.byte	0xd
 1056 0220 59010000 		.4byte	0x159
 1057 0224 80       		.byte	0x80
 1058 0225 0B       		.uleb128 0xb
 1059 0226 18020000 		.4byte	.LASF41
 1060 022a 09       		.byte	0x9
 1061 022b 0F       		.byte	0xf
 1062 022c 42020000 		.4byte	0x242
 1063 0230 81       		.byte	0x81
 1064 0231 00       		.byte	0
 1065 0232 11       		.uleb128 0x11
 1066 0233 AE000000 		.4byte	0xae
 1067 0237 42020000 		.4byte	0x242
 1068 023b 12       		.uleb128 0x12
 1069 023c A1000000 		.4byte	0xa1
 1070 0240 7F       		.byte	0x7f
 1071 0241 00       		.byte	0
 1072 0242 11       		.uleb128 0x11
 1073 0243 AE000000 		.4byte	0xae
 1074 0247 52020000 		.4byte	0x252
 1075 024b 12       		.uleb128 0x12
 1076 024c A1000000 		.4byte	0xa1
 1077 0250 FF       		.byte	0xff
 1078 0251 00       		.byte	0
 1079 0252 03       		.uleb128 0x3
 1080 0253 9C040000 		.4byte	.LASF42
 1081 0257 09       		.byte	0x9
 1082 0258 10       		.byte	0x10
 1083 0259 04020000 		.4byte	0x204
 1084 025d 0D       		.uleb128 0xd
 1085 025e 2C       		.byte	0x2c
 1086 025f 0A       		.byte	0xa
 1087 0260 14       		.byte	0x14
 1088 0261 8A020000 		.4byte	0x28a
 1089 0265 0E       		.uleb128 0xe
 1090 0266 6B657900 		.ascii	"key\000"
 1091 026a 0A       		.byte	0xa
 1092 026b 15       		.byte	0x15
 1093 026c 8A020000 		.4byte	0x28a
 1094 0270 00       		.byte	0
 1095 0271 0B       		.uleb128 0xb
 1096 0272 45010000 		.4byte	.LASF43
 1097 0276 0A       		.byte	0xa
 1098 0277 16       		.byte	0x16
 1099 0278 8A020000 		.4byte	0x28a
 1100 027c 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 25


 1101 027d 0B       		.uleb128 0xb
 1102 027e 89010000 		.4byte	.LASF44
 1103 0282 0A       		.byte	0xa
 1104 0283 17       		.byte	0x17
 1105 0284 71010000 		.4byte	0x171
 1106 0288 28       		.byte	0x28
 1107 0289 00       		.byte	0
 1108 028a 11       		.uleb128 0x11
 1109 028b AE000000 		.4byte	0xae
 1110 028f 9A020000 		.4byte	0x29a
 1111 0293 12       		.uleb128 0x12
 1112 0294 A1000000 		.4byte	0xa1
 1113 0298 13       		.byte	0x13
 1114 0299 00       		.byte	0
 1115 029a 03       		.uleb128 0x3
 1116 029b 2B030000 		.4byte	.LASF45
 1117 029f 0A       		.byte	0xa
 1118 02a0 19       		.byte	0x19
 1119 02a1 5D020000 		.4byte	0x25d
 1120 02a5 0D       		.uleb128 0xd
 1121 02a6 3C       		.byte	0x3c
 1122 02a7 0B       		.byte	0xb
 1123 02a8 36       		.byte	0x36
 1124 02a9 D2020000 		.4byte	0x2d2
 1125 02ad 0B       		.uleb128 0xb
 1126 02ae 12000000 		.4byte	.LASF46
 1127 02b2 0B       		.byte	0xb
 1128 02b3 37       		.byte	0x37
 1129 02b4 8A020000 		.4byte	0x28a
 1130 02b8 00       		.byte	0
 1131 02b9 0B       		.uleb128 0xb
 1132 02ba 00000000 		.4byte	.LASF47
 1133 02be 0B       		.byte	0xb
 1134 02bf 38       		.byte	0x38
 1135 02c0 8A020000 		.4byte	0x28a
 1136 02c4 14       		.byte	0x14
 1137 02c5 0B       		.uleb128 0xb
 1138 02c6 C8030000 		.4byte	.LASF48
 1139 02ca 0B       		.byte	0xb
 1140 02cb 39       		.byte	0x39
 1141 02cc 8A020000 		.4byte	0x28a
 1142 02d0 28       		.byte	0x28
 1143 02d1 00       		.byte	0
 1144 02d2 03       		.uleb128 0x3
 1145 02d3 0B020000 		.4byte	.LASF49
 1146 02d7 0B       		.byte	0xb
 1147 02d8 3B       		.byte	0x3b
 1148 02d9 A5020000 		.4byte	0x2a5
 1149 02dd 0D       		.uleb128 0xd
 1150 02de 20       		.byte	0x20
 1151 02df 0B       		.byte	0xb
 1152 02e0 3D       		.byte	0x3d
 1153 02e1 46030000 		.4byte	0x346
 1154 02e5 0B       		.uleb128 0xb
 1155 02e6 37030000 		.4byte	.LASF50
 1156 02ea 0B       		.byte	0xb
 1157 02eb 3E       		.byte	0x3e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 26


 1158 02ec 68000000 		.4byte	0x68
 1159 02f0 00       		.byte	0
 1160 02f1 0E       		.uleb128 0xe
 1161 02f2 62657200 		.ascii	"ber\000"
 1162 02f6 0B       		.byte	0xb
 1163 02f7 3F       		.byte	0x3f
 1164 02f8 68000000 		.4byte	0x68
 1165 02fc 04       		.byte	0x4
 1166 02fd 0B       		.uleb128 0xb
 1167 02fe 84010000 		.4byte	.LASF51
 1168 0302 0B       		.byte	0xb
 1169 0303 40       		.byte	0x40
 1170 0304 68000000 		.4byte	0x68
 1171 0308 08       		.byte	0x8
 1172 0309 0B       		.uleb128 0xb
 1173 030a 40010000 		.4byte	.LASF52
 1174 030e 0B       		.byte	0xb
 1175 030f 41       		.byte	0x41
 1176 0310 68000000 		.4byte	0x68
 1177 0314 0C       		.byte	0xc
 1178 0315 0B       		.uleb128 0xb
 1179 0316 28040000 		.4byte	.LASF53
 1180 031a 0B       		.byte	0xb
 1181 031b 42       		.byte	0x42
 1182 031c 68000000 		.4byte	0x68
 1183 0320 10       		.byte	0x10
 1184 0321 0B       		.uleb128 0xb
 1185 0322 AC020000 		.4byte	.LASF54
 1186 0326 0B       		.byte	0xb
 1187 0327 43       		.byte	0x43
 1188 0328 68000000 		.4byte	0x68
 1189 032c 14       		.byte	0x14
 1190 032d 0B       		.uleb128 0xb
 1191 032e 8B030000 		.4byte	.LASF55
 1192 0332 0B       		.byte	0xb
 1193 0333 44       		.byte	0x44
 1194 0334 68000000 		.4byte	0x68
 1195 0338 18       		.byte	0x18
 1196 0339 0B       		.uleb128 0xb
 1197 033a AF030000 		.4byte	.LASF56
 1198 033e 0B       		.byte	0xb
 1199 033f 45       		.byte	0x45
 1200 0340 68000000 		.4byte	0x68
 1201 0344 1C       		.byte	0x1c
 1202 0345 00       		.byte	0
 1203 0346 03       		.uleb128 0x3
 1204 0347 F2030000 		.4byte	.LASF57
 1205 034b 0B       		.byte	0xb
 1206 034c 47       		.byte	0x47
 1207 034d DD020000 		.4byte	0x2dd
 1208 0351 0D       		.uleb128 0xd
 1209 0352 07       		.byte	0x7
 1210 0353 0B       		.byte	0xb
 1211 0354 53       		.byte	0x53
 1212 0355 AE030000 		.4byte	0x3ae
 1213 0359 0B       		.uleb128 0xb
 1214 035a EC040000 		.4byte	.LASF58
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 27


 1215 035e 0B       		.byte	0xb
 1216 035f 55       		.byte	0x55
 1217 0360 59010000 		.4byte	0x159
 1218 0364 00       		.byte	0
 1219 0365 0B       		.uleb128 0xb
 1220 0366 6F030000 		.4byte	.LASF59
 1221 036a 0B       		.byte	0xb
 1222 036b 57       		.byte	0x57
 1223 036c AE030000 		.4byte	0x3ae
 1224 0370 01       		.byte	0x1
 1225 0371 0B       		.uleb128 0xb
 1226 0372 58020000 		.4byte	.LASF60
 1227 0376 0B       		.byte	0xb
 1228 0377 59       		.byte	0x59
 1229 0378 59010000 		.4byte	0x159
 1230 037c 02       		.byte	0x2
 1231 037d 0B       		.uleb128 0xb
 1232 037e 3D030000 		.4byte	.LASF61
 1233 0382 0B       		.byte	0xb
 1234 0383 5B       		.byte	0x5b
 1235 0384 59010000 		.4byte	0x159
 1236 0388 03       		.byte	0x3
 1237 0389 0B       		.uleb128 0xb
 1238 038a 86040000 		.4byte	.LASF62
 1239 038e 0B       		.byte	0xb
 1240 038f 5E       		.byte	0x5e
 1241 0390 59010000 		.4byte	0x159
 1242 0394 04       		.byte	0x4
 1243 0395 0B       		.uleb128 0xb
 1244 0396 1C010000 		.4byte	.LASF63
 1245 039a 0B       		.byte	0xb
 1246 039b 63       		.byte	0x63
 1247 039c 59010000 		.4byte	0x159
 1248 03a0 05       		.byte	0x5
 1249 03a1 0B       		.uleb128 0xb
 1250 03a2 65020000 		.4byte	.LASF64
 1251 03a6 0B       		.byte	0xb
 1252 03a7 65       		.byte	0x65
 1253 03a8 59010000 		.4byte	0x159
 1254 03ac 06       		.byte	0x6
 1255 03ad 00       		.byte	0
 1256 03ae 02       		.uleb128 0x2
 1257 03af 01       		.byte	0x1
 1258 03b0 02       		.byte	0x2
 1259 03b1 C2030000 		.4byte	.LASF65
 1260 03b5 03       		.uleb128 0x3
 1261 03b6 58030000 		.4byte	.LASF66
 1262 03ba 0B       		.byte	0xb
 1263 03bb 67       		.byte	0x67
 1264 03bc 51030000 		.4byte	0x351
 1265 03c0 13       		.uleb128 0x13
 1266 03c1 41000000 		.4byte	.LASF67
 1267 03c5 01       		.byte	0x1
 1268 03c6 07       		.byte	0x7
 1269 03c7 00000000 		.4byte	.LFB64
 1270 03cb 0C000000 		.4byte	.LFE64-.LFB64
 1271 03cf 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 28


 1272 03d0 9C       		.byte	0x9c
 1273 03d1 13       		.uleb128 0x13
 1274 03d2 4D040000 		.4byte	.LASF68
 1275 03d6 01       		.byte	0x1
 1276 03d7 11       		.byte	0x11
 1277 03d8 00000000 		.4byte	.LFB65
 1278 03dc 0C000000 		.4byte	.LFE65-.LFB65
 1279 03e0 01       		.uleb128 0x1
 1280 03e1 9C       		.byte	0x9c
 1281 03e2 13       		.uleb128 0x13
 1282 03e3 21000000 		.4byte	.LASF69
 1283 03e7 01       		.byte	0x1
 1284 03e8 19       		.byte	0x19
 1285 03e9 00000000 		.4byte	.LFB66
 1286 03ed 20000000 		.4byte	.LFE66-.LFB66
 1287 03f1 01       		.uleb128 0x1
 1288 03f2 9C       		.byte	0x9c
 1289 03f3 13       		.uleb128 0x13
 1290 03f4 B2040000 		.4byte	.LASF70
 1291 03f8 01       		.byte	0x1
 1292 03f9 2A       		.byte	0x2a
 1293 03fa 00000000 		.4byte	.LFB67
 1294 03fe 0C000000 		.4byte	.LFE67-.LFB67
 1295 0402 01       		.uleb128 0x1
 1296 0403 9C       		.byte	0x9c
 1297 0404 14       		.uleb128 0x14
 1298 0405 15010000 		.4byte	.LASF84
 1299 0409 01       		.byte	0x1
 1300 040a 3C       		.byte	0x3c
 1301 040b 68000000 		.4byte	0x68
 1302 040f 00000000 		.4byte	.LFB68
 1303 0413 38000000 		.4byte	.LFE68-.LFB68
 1304 0417 01       		.uleb128 0x1
 1305 0418 9C       		.byte	0x9c
 1306 0419 54040000 		.4byte	0x454
 1307 041d 15       		.uleb128 0x15
 1308 041e 3B010000 		.4byte	.LASF71
 1309 0422 01       		.byte	0x1
 1310 0423 3C       		.byte	0x3c
 1311 0424 68000000 		.4byte	0x68
 1312 0428 02       		.uleb128 0x2
 1313 0429 91       		.byte	0x91
 1314 042a 6C       		.sleb128 -20
 1315 042b 16       		.uleb128 0x16
 1316 042c 70747200 		.ascii	"ptr\000"
 1317 0430 01       		.byte	0x1
 1318 0431 3C       		.byte	0x3c
 1319 0432 A8000000 		.4byte	0xa8
 1320 0436 02       		.uleb128 0x2
 1321 0437 91       		.byte	0x91
 1322 0438 68       		.sleb128 -24
 1323 0439 16       		.uleb128 0x16
 1324 043a 6C656E00 		.ascii	"len\000"
 1325 043e 01       		.byte	0x1
 1326 043f 3C       		.byte	0x3c
 1327 0440 68000000 		.4byte	0x68
 1328 0444 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 29


 1329 0445 91       		.byte	0x91
 1330 0446 64       		.sleb128 -28
 1331 0447 17       		.uleb128 0x17
 1332 0448 6900     		.ascii	"i\000"
 1333 044a 01       		.byte	0x1
 1334 044b 3E       		.byte	0x3e
 1335 044c 68000000 		.4byte	0x68
 1336 0450 02       		.uleb128 0x2
 1337 0451 91       		.byte	0x91
 1338 0452 74       		.sleb128 -12
 1339 0453 00       		.byte	0
 1340 0454 18       		.uleb128 0x18
 1341 0455 BF040000 		.4byte	.LASF76
 1342 0459 01       		.byte	0x1
 1343 045a 4F       		.byte	0x4f
 1344 045b 00000000 		.4byte	.LFB69
 1345 045f F0000000 		.4byte	.LFE69-.LFB69
 1346 0463 01       		.uleb128 0x1
 1347 0464 9C       		.byte	0x9c
 1348 0465 A6040000 		.4byte	0x4a6
 1349 0469 15       		.uleb128 0x15
 1350 046a 19030000 		.4byte	.LASF72
 1351 046e 01       		.byte	0x1
 1352 046f 4F       		.byte	0x4f
 1353 0470 59010000 		.4byte	0x159
 1354 0474 03       		.uleb128 0x3
 1355 0475 91       		.byte	0x91
 1356 0476 DF6F     		.sleb128 -2081
 1357 0478 15       		.uleb128 0x15
 1358 0479 EA010000 		.4byte	.LASF73
 1359 047d 01       		.byte	0x1
 1360 047e 4F       		.byte	0x4f
 1361 047f A8000000 		.4byte	0xa8
 1362 0483 02       		.uleb128 0x2
 1363 0484 91       		.byte	0x91
 1364 0485 74       		.sleb128 -12
 1365 0486 19       		.uleb128 0x19
 1366 0487 1A       		.uleb128 0x1a
 1367 0488 E5030000 		.4byte	.LASF74
 1368 048c 01       		.byte	0x1
 1369 048d 51       		.byte	0x51
 1370 048e A6040000 		.4byte	0x4a6
 1371 0492 03       		.uleb128 0x3
 1372 0493 91       		.byte	0x91
 1373 0494 E86F     		.sleb128 -2072
 1374 0496 1A       		.uleb128 0x1a
 1375 0497 7F040000 		.4byte	.LASF75
 1376 049b 01       		.byte	0x1
 1377 049c 6E       		.byte	0x6e
 1378 049d 4E010000 		.4byte	0x14e
 1379 04a1 03       		.uleb128 0x3
 1380 04a2 91       		.byte	0x91
 1381 04a3 E46F     		.sleb128 -2076
 1382 04a5 00       		.byte	0
 1383 04a6 11       		.uleb128 0x11
 1384 04a7 AE000000 		.4byte	0xae
 1385 04ab B7040000 		.4byte	0x4b7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 30


 1386 04af 1B       		.uleb128 0x1b
 1387 04b0 A1000000 		.4byte	0xa1
 1388 04b4 FF07     		.2byte	0x7ff
 1389 04b6 00       		.byte	0
 1390 04b7 18       		.uleb128 0x18
 1391 04b8 CD030000 		.4byte	.LASF77
 1392 04bc 01       		.byte	0x1
 1393 04bd 82       		.byte	0x82
 1394 04be 00000000 		.4byte	.LFB70
 1395 04c2 78000000 		.4byte	.LFE70-.LFB70
 1396 04c6 01       		.uleb128 0x1
 1397 04c7 9C       		.byte	0x9c
 1398 04c8 DB040000 		.4byte	0x4db
 1399 04cc 15       		.uleb128 0x15
 1400 04cd 47030000 		.4byte	.LASF78
 1401 04d1 01       		.byte	0x1
 1402 04d2 82       		.byte	0x82
 1403 04d3 52020000 		.4byte	0x252
 1404 04d7 02       		.uleb128 0x2
 1405 04d8 91       		.byte	0x91
 1406 04d9 70       		.sleb128 -16
 1407 04da 00       		.byte	0
 1408 04db 1C       		.uleb128 0x1c
 1409 04dc 29010000 		.4byte	.LASF79
 1410 04e0 01       		.byte	0x1
 1411 04e1 95       		.byte	0x95
 1412 04e2 4C000000 		.4byte	0x4c
 1413 04e6 00000000 		.4byte	.LFB71
 1414 04ea 58000000 		.4byte	.LFE71-.LFB71
 1415 04ee 01       		.uleb128 0x1
 1416 04ef 9C       		.byte	0x9c
 1417 04f0 1D050000 		.4byte	0x51d
 1418 04f4 1A       		.uleb128 0x1a
 1419 04f5 13040000 		.4byte	.LASF80
 1420 04f9 01       		.byte	0x1
 1421 04fa 98       		.byte	0x98
 1422 04fb 1D050000 		.4byte	0x51d
 1423 04ff 02       		.uleb128 0x2
 1424 0500 91       		.byte	0x91
 1425 0501 74       		.sleb128 -12
 1426 0502 17       		.uleb128 0x17
 1427 0503 7400     		.ascii	"t\000"
 1428 0505 01       		.byte	0x1
 1429 0506 9A       		.byte	0x9a
 1430 0507 D6000000 		.4byte	0xd6
 1431 050b 02       		.uleb128 0x2
 1432 050c 91       		.byte	0x91
 1433 050d 4C       		.sleb128 -52
 1434 050e 1A       		.uleb128 0x1a
 1435 050f 09000000 		.4byte	.LASF81
 1436 0513 01       		.byte	0x1
 1437 0514 9B       		.byte	0x9b
 1438 0515 CB000000 		.4byte	0xcb
 1439 0519 02       		.uleb128 0x2
 1440 051a 91       		.byte	0x91
 1441 051b 70       		.sleb128 -16
 1442 051c 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 31


 1443 051d 08       		.uleb128 0x8
 1444 051e 04       		.byte	0x4
 1445 051f F4010000 		.4byte	0x1f4
 1446 0523 18       		.uleb128 0x18
 1447 0524 F6040000 		.4byte	.LASF82
 1448 0528 01       		.byte	0x1
 1449 0529 B0       		.byte	0xb0
 1450 052a 00000000 		.4byte	.LFB72
 1451 052e 40000000 		.4byte	.LFE72-.LFB72
 1452 0532 01       		.uleb128 0x1
 1453 0533 9C       		.byte	0x9c
 1454 0534 55050000 		.4byte	0x555
 1455 0538 15       		.uleb128 0x15
 1456 0539 0C040000 		.4byte	.LASF83
 1457 053d 01       		.byte	0x1
 1458 053e B0       		.byte	0xb0
 1459 053f A8000000 		.4byte	0xa8
 1460 0543 02       		.uleb128 0x2
 1461 0544 91       		.byte	0x91
 1462 0545 6C       		.sleb128 -20
 1463 0546 17       		.uleb128 0x17
 1464 0547 70636800 		.ascii	"pch\000"
 1465 054b 01       		.byte	0x1
 1466 054c B2       		.byte	0xb2
 1467 054d A8000000 		.4byte	0xa8
 1468 0551 02       		.uleb128 0x2
 1469 0552 91       		.byte	0x91
 1470 0553 74       		.sleb128 -12
 1471 0554 00       		.byte	0
 1472 0555 14       		.uleb128 0x14
 1473 0556 60000000 		.4byte	.LASF85
 1474 055a 01       		.byte	0x1
 1475 055b BC       		.byte	0xbc
 1476 055c A8000000 		.4byte	0xa8
 1477 0560 00000000 		.4byte	.LFB73
 1478 0564 74000000 		.4byte	.LFE73-.LFB73
 1479 0568 01       		.uleb128 0x1
 1480 0569 9C       		.byte	0x9c
 1481 056a C3050000 		.4byte	0x5c3
 1482 056e 15       		.uleb128 0x15
 1483 056f 37000000 		.4byte	.LASF86
 1484 0573 01       		.byte	0x1
 1485 0574 BC       		.byte	0xbc
 1486 0575 B5000000 		.4byte	0xb5
 1487 0579 02       		.uleb128 0x2
 1488 057a 91       		.byte	0x91
 1489 057b 6C       		.sleb128 -20
 1490 057c 15       		.uleb128 0x15
 1491 057d 79010000 		.4byte	.LASF87
 1492 0581 01       		.byte	0x1
 1493 0582 BC       		.byte	0xbc
 1494 0583 A8000000 		.4byte	0xa8
 1495 0587 02       		.uleb128 0x2
 1496 0588 91       		.byte	0x91
 1497 0589 68       		.sleb128 -24
 1498 058a 15       		.uleb128 0x15
 1499 058b 28020000 		.4byte	.LASF88
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 32


 1500 058f 01       		.byte	0x1
 1501 0590 BD       		.byte	0xbd
 1502 0591 B5000000 		.4byte	0xb5
 1503 0595 02       		.uleb128 0x2
 1504 0596 91       		.byte	0x91
 1505 0597 64       		.sleb128 -28
 1506 0598 15       		.uleb128 0x15
 1507 0599 F1010000 		.4byte	.LASF89
 1508 059d 01       		.byte	0x1
 1509 059e BD       		.byte	0xbd
 1510 059f B5000000 		.4byte	0xb5
 1511 05a3 02       		.uleb128 0x2
 1512 05a4 91       		.byte	0x91
 1513 05a5 60       		.sleb128 -32
 1514 05a6 1A       		.uleb128 0x1a
 1515 05a7 6B000000 		.4byte	.LASF90
 1516 05ab 01       		.byte	0x1
 1517 05ac BF       		.byte	0xbf
 1518 05ad A8000000 		.4byte	0xa8
 1519 05b1 02       		.uleb128 0x2
 1520 05b2 91       		.byte	0x91
 1521 05b3 70       		.sleb128 -16
 1522 05b4 17       		.uleb128 0x17
 1523 05b5 656E6400 		.ascii	"end\000"
 1524 05b9 01       		.byte	0x1
 1525 05ba BF       		.byte	0xbf
 1526 05bb A8000000 		.4byte	0xa8
 1527 05bf 02       		.uleb128 0x2
 1528 05c0 91       		.byte	0x91
 1529 05c1 74       		.sleb128 -12
 1530 05c2 00       		.byte	0
 1531 05c3 18       		.uleb128 0x18
 1532 05c4 35020000 		.4byte	.LASF91
 1533 05c8 01       		.byte	0x1
 1534 05c9 D0       		.byte	0xd0
 1535 05ca 00000000 		.4byte	.LFB74
 1536 05ce 3C000000 		.4byte	.LFE74-.LFB74
 1537 05d2 01       		.uleb128 0x1
 1538 05d3 9C       		.byte	0x9c
 1539 05d4 05060000 		.4byte	0x605
 1540 05d8 15       		.uleb128 0x15
 1541 05d9 EA010000 		.4byte	.LASF73
 1542 05dd 01       		.byte	0x1
 1543 05de D0       		.byte	0xd0
 1544 05df A8000000 		.4byte	0xa8
 1545 05e3 02       		.uleb128 0x2
 1546 05e4 91       		.byte	0x91
 1547 05e5 70       		.sleb128 -16
 1548 05e6 19       		.uleb128 0x19
 1549 05e7 1A       		.uleb128 0x1a
 1550 05e8 7F040000 		.4byte	.LASF75
 1551 05ec 01       		.byte	0x1
 1552 05ed D2       		.byte	0xd2
 1553 05ee 4E010000 		.4byte	0x14e
 1554 05f2 02       		.uleb128 0x2
 1555 05f3 91       		.byte	0x91
 1556 05f4 64       		.sleb128 -28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 33


 1557 05f5 1A       		.uleb128 0x1a
 1558 05f6 E5030000 		.4byte	.LASF74
 1559 05fa 01       		.byte	0x1
 1560 05fb D6       		.byte	0xd6
 1561 05fc A6040000 		.4byte	0x4a6
 1562 0600 03       		.uleb128 0x3
 1563 0601 91       		.byte	0x91
 1564 0602 E46F     		.sleb128 -2076
 1565 0604 00       		.byte	0
 1566 0605 1D       		.uleb128 0x1d
 1567 0606 D1040000 		.4byte	.LASF92
 1568 060a 0C       		.byte	0xc
 1569 060b 1207     		.2byte	0x712
 1570 060d 11060000 		.4byte	0x611
 1571 0611 0F       		.uleb128 0xf
 1572 0612 C0000000 		.4byte	0xc0
 1573 0616 1E       		.uleb128 0x1e
 1574 0617 34040000 		.4byte	.LASF93
 1575 061b 0A       		.byte	0xa
 1576 061c 11       		.byte	0x11
 1577 061d AE030000 		.4byte	0x3ae
 1578 0621 05       		.uleb128 0x5
 1579 0622 03       		.byte	0x3
 1580 0623 00000000 		.4byte	buffer_overflow
 1581 0627 1E       		.uleb128 0x1e
 1582 0628 61010000 		.4byte	.LASF94
 1583 062c 0A       		.byte	0xa
 1584 062d 22       		.byte	0x22
 1585 062e 65010000 		.4byte	0x165
 1586 0632 05       		.uleb128 0x5
 1587 0633 03       		.byte	0x3
 1588 0634 00000000 		.4byte	dataPointsInStack
 1589 0638 1E       		.uleb128 0x1e
 1590 0639 CD020000 		.4byte	.LASF95
 1591 063d 0A       		.byte	0xa
 1592 063e 23       		.byte	0x23
 1593 063f 65010000 		.4byte	0x165
 1594 0643 05       		.uleb128 0x5
 1595 0644 03       		.byte	0x3
 1596 0645 00000000 		.4byte	dataPointsInStackDesired
 1597 0649 11       		.uleb128 0x11
 1598 064a 9A020000 		.4byte	0x29a
 1599 064e 59060000 		.4byte	0x659
 1600 0652 12       		.uleb128 0x12
 1601 0653 A1000000 		.4byte	0xa1
 1602 0657 95       		.byte	0x95
 1603 0658 00       		.byte	0
 1604 0659 1E       		.uleb128 0x1e
 1605 065a C8020000 		.4byte	.LASF96
 1606 065e 0A       		.byte	0xa
 1607 065f 24       		.byte	0x24
 1608 0660 49060000 		.4byte	0x649
 1609 0664 05       		.uleb128 0x5
 1610 0665 03       		.byte	0x3
 1611 0666 00000000 		.4byte	data
 1612 066a 1E       		.uleb128 0x1e
 1613 066b 00040000 		.4byte	.LASF97
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 34


 1614 066f 0B       		.byte	0xb
 1615 0670 20       		.byte	0x20
 1616 0671 59010000 		.4byte	0x159
 1617 0675 05       		.uleb128 0x5
 1618 0676 03       		.byte	0x3
 1619 0677 00000000 		.4byte	modem_state
 1620 067b 1E       		.uleb128 0x1e
 1621 067c B1020000 		.4byte	.LASF98
 1622 0680 0B       		.byte	0xb
 1623 0681 6A       		.byte	0x6a
 1624 0682 71010000 		.4byte	0x171
 1625 0686 05       		.uleb128 0x5
 1626 0687 03       		.byte	0x3
 1627 0688 00000000 		.4byte	modem_start_time_stamp
 1628 068c 1E       		.uleb128 0x1e
 1629 068d 3C020000 		.4byte	.LASF99
 1630 0691 0B       		.byte	0xb
 1631 0692 6B       		.byte	0x6b
 1632 0693 D2020000 		.4byte	0x2d2
 1633 0697 05       		.uleb128 0x5
 1634 0698 03       		.byte	0x3
 1635 0699 00000000 		.4byte	modem_info
 1636 069d 1E       		.uleb128 0x1e
 1637 069e 4C030000 		.4byte	.LASF100
 1638 06a2 0B       		.byte	0xb
 1639 06a3 6C       		.byte	0x6c
 1640 06a4 46030000 		.4byte	0x346
 1641 06a8 05       		.uleb128 0x5
 1642 06a9 03       		.byte	0x3
 1643 06aa 00000000 		.4byte	modem_stats
 1644 06ae 1E       		.uleb128 0x1e
 1645 06af 89020000 		.4byte	.LASF101
 1646 06b3 0B       		.byte	0xb
 1647 06b4 6D       		.byte	0x6d
 1648 06b5 B5030000 		.4byte	0x3b5
 1649 06b9 05       		.uleb128 0x5
 1650 06ba 03       		.byte	0x3
 1651 06bb 00000000 		.4byte	updatable_parameters
 1652 06bf 11       		.uleb128 0x11
 1653 06c0 AE000000 		.4byte	0xae
 1654 06c4 CF060000 		.4byte	0x6cf
 1655 06c8 12       		.uleb128 0x12
 1656 06c9 A1000000 		.4byte	0xa1
 1657 06cd 1D       		.byte	0x1d
 1658 06ce 00       		.byte	0
 1659 06cf 1E       		.uleb128 0x1e
 1660 06d0 4C020000 		.4byte	.LASF102
 1661 06d4 01       		.byte	0x1
 1662 06d5 04       		.byte	0x4
 1663 06d6 BF060000 		.4byte	0x6bf
 1664 06da 05       		.uleb128 0x5
 1665 06db 03       		.byte	0x3
 1666 06dc 00000000 		.4byte	BB_fileName
 1667 06e0 00       		.byte	0
 1668              		.section	.debug_abbrev,"",%progbits
 1669              	.Ldebug_abbrev0:
 1670 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 35


 1671 0001 11       		.uleb128 0x11
 1672 0002 01       		.byte	0x1
 1673 0003 25       		.uleb128 0x25
 1674 0004 0E       		.uleb128 0xe
 1675 0005 13       		.uleb128 0x13
 1676 0006 0B       		.uleb128 0xb
 1677 0007 03       		.uleb128 0x3
 1678 0008 0E       		.uleb128 0xe
 1679 0009 1B       		.uleb128 0x1b
 1680 000a 0E       		.uleb128 0xe
 1681 000b 55       		.uleb128 0x55
 1682 000c 17       		.uleb128 0x17
 1683 000d 11       		.uleb128 0x11
 1684 000e 01       		.uleb128 0x1
 1685 000f 10       		.uleb128 0x10
 1686 0010 17       		.uleb128 0x17
 1687 0011 00       		.byte	0
 1688 0012 00       		.byte	0
 1689 0013 02       		.uleb128 0x2
 1690 0014 24       		.uleb128 0x24
 1691 0015 00       		.byte	0
 1692 0016 0B       		.uleb128 0xb
 1693 0017 0B       		.uleb128 0xb
 1694 0018 3E       		.uleb128 0x3e
 1695 0019 0B       		.uleb128 0xb
 1696 001a 03       		.uleb128 0x3
 1697 001b 0E       		.uleb128 0xe
 1698 001c 00       		.byte	0
 1699 001d 00       		.byte	0
 1700 001e 03       		.uleb128 0x3
 1701 001f 16       		.uleb128 0x16
 1702 0020 00       		.byte	0
 1703 0021 03       		.uleb128 0x3
 1704 0022 0E       		.uleb128 0xe
 1705 0023 3A       		.uleb128 0x3a
 1706 0024 0B       		.uleb128 0xb
 1707 0025 3B       		.uleb128 0x3b
 1708 0026 0B       		.uleb128 0xb
 1709 0027 49       		.uleb128 0x49
 1710 0028 13       		.uleb128 0x13
 1711 0029 00       		.byte	0
 1712 002a 00       		.byte	0
 1713 002b 04       		.uleb128 0x4
 1714 002c 24       		.uleb128 0x24
 1715 002d 00       		.byte	0
 1716 002e 0B       		.uleb128 0xb
 1717 002f 0B       		.uleb128 0xb
 1718 0030 3E       		.uleb128 0x3e
 1719 0031 0B       		.uleb128 0xb
 1720 0032 03       		.uleb128 0x3
 1721 0033 08       		.uleb128 0x8
 1722 0034 00       		.byte	0
 1723 0035 00       		.byte	0
 1724 0036 05       		.uleb128 0x5
 1725 0037 13       		.uleb128 0x13
 1726 0038 01       		.byte	0x1
 1727 0039 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 36


 1728 003a 0E       		.uleb128 0xe
 1729 003b 0B       		.uleb128 0xb
 1730 003c 0B       		.uleb128 0xb
 1731 003d 3A       		.uleb128 0x3a
 1732 003e 0B       		.uleb128 0xb
 1733 003f 3B       		.uleb128 0x3b
 1734 0040 0B       		.uleb128 0xb
 1735 0041 01       		.uleb128 0x1
 1736 0042 13       		.uleb128 0x13
 1737 0043 00       		.byte	0
 1738 0044 00       		.byte	0
 1739 0045 06       		.uleb128 0x6
 1740 0046 0D       		.uleb128 0xd
 1741 0047 00       		.byte	0
 1742 0048 03       		.uleb128 0x3
 1743 0049 0E       		.uleb128 0xe
 1744 004a 49       		.uleb128 0x49
 1745 004b 13       		.uleb128 0x13
 1746 004c 38       		.uleb128 0x38
 1747 004d 0B       		.uleb128 0xb
 1748 004e 34       		.uleb128 0x34
 1749 004f 19       		.uleb128 0x19
 1750 0050 00       		.byte	0
 1751 0051 00       		.byte	0
 1752 0052 07       		.uleb128 0x7
 1753 0053 0F       		.uleb128 0xf
 1754 0054 00       		.byte	0
 1755 0055 0B       		.uleb128 0xb
 1756 0056 0B       		.uleb128 0xb
 1757 0057 00       		.byte	0
 1758 0058 00       		.byte	0
 1759 0059 08       		.uleb128 0x8
 1760 005a 0F       		.uleb128 0xf
 1761 005b 00       		.byte	0
 1762 005c 0B       		.uleb128 0xb
 1763 005d 0B       		.uleb128 0xb
 1764 005e 49       		.uleb128 0x49
 1765 005f 13       		.uleb128 0x13
 1766 0060 00       		.byte	0
 1767 0061 00       		.byte	0
 1768 0062 09       		.uleb128 0x9
 1769 0063 26       		.uleb128 0x26
 1770 0064 00       		.byte	0
 1771 0065 49       		.uleb128 0x49
 1772 0066 13       		.uleb128 0x13
 1773 0067 00       		.byte	0
 1774 0068 00       		.byte	0
 1775 0069 0A       		.uleb128 0xa
 1776 006a 13       		.uleb128 0x13
 1777 006b 01       		.byte	0x1
 1778 006c 03       		.uleb128 0x3
 1779 006d 08       		.uleb128 0x8
 1780 006e 0B       		.uleb128 0xb
 1781 006f 0B       		.uleb128 0xb
 1782 0070 3A       		.uleb128 0x3a
 1783 0071 0B       		.uleb128 0xb
 1784 0072 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 37


 1785 0073 0B       		.uleb128 0xb
 1786 0074 01       		.uleb128 0x1
 1787 0075 13       		.uleb128 0x13
 1788 0076 00       		.byte	0
 1789 0077 00       		.byte	0
 1790 0078 0B       		.uleb128 0xb
 1791 0079 0D       		.uleb128 0xd
 1792 007a 00       		.byte	0
 1793 007b 03       		.uleb128 0x3
 1794 007c 0E       		.uleb128 0xe
 1795 007d 3A       		.uleb128 0x3a
 1796 007e 0B       		.uleb128 0xb
 1797 007f 3B       		.uleb128 0x3b
 1798 0080 0B       		.uleb128 0xb
 1799 0081 49       		.uleb128 0x49
 1800 0082 13       		.uleb128 0x13
 1801 0083 38       		.uleb128 0x38
 1802 0084 0B       		.uleb128 0xb
 1803 0085 00       		.byte	0
 1804 0086 00       		.byte	0
 1805 0087 0C       		.uleb128 0xc
 1806 0088 16       		.uleb128 0x16
 1807 0089 00       		.byte	0
 1808 008a 03       		.uleb128 0x3
 1809 008b 0E       		.uleb128 0xe
 1810 008c 3A       		.uleb128 0x3a
 1811 008d 0B       		.uleb128 0xb
 1812 008e 3B       		.uleb128 0x3b
 1813 008f 05       		.uleb128 0x5
 1814 0090 49       		.uleb128 0x49
 1815 0091 13       		.uleb128 0x13
 1816 0092 00       		.byte	0
 1817 0093 00       		.byte	0
 1818 0094 0D       		.uleb128 0xd
 1819 0095 13       		.uleb128 0x13
 1820 0096 01       		.byte	0x1
 1821 0097 0B       		.uleb128 0xb
 1822 0098 0B       		.uleb128 0xb
 1823 0099 3A       		.uleb128 0x3a
 1824 009a 0B       		.uleb128 0xb
 1825 009b 3B       		.uleb128 0x3b
 1826 009c 0B       		.uleb128 0xb
 1827 009d 01       		.uleb128 0x1
 1828 009e 13       		.uleb128 0x13
 1829 009f 00       		.byte	0
 1830 00a0 00       		.byte	0
 1831 00a1 0E       		.uleb128 0xe
 1832 00a2 0D       		.uleb128 0xd
 1833 00a3 00       		.byte	0
 1834 00a4 03       		.uleb128 0x3
 1835 00a5 08       		.uleb128 0x8
 1836 00a6 3A       		.uleb128 0x3a
 1837 00a7 0B       		.uleb128 0xb
 1838 00a8 3B       		.uleb128 0x3b
 1839 00a9 0B       		.uleb128 0xb
 1840 00aa 49       		.uleb128 0x49
 1841 00ab 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 38


 1842 00ac 38       		.uleb128 0x38
 1843 00ad 0B       		.uleb128 0xb
 1844 00ae 00       		.byte	0
 1845 00af 00       		.byte	0
 1846 00b0 0F       		.uleb128 0xf
 1847 00b1 35       		.uleb128 0x35
 1848 00b2 00       		.byte	0
 1849 00b3 49       		.uleb128 0x49
 1850 00b4 13       		.uleb128 0x13
 1851 00b5 00       		.byte	0
 1852 00b6 00       		.byte	0
 1853 00b7 10       		.uleb128 0x10
 1854 00b8 13       		.uleb128 0x13
 1855 00b9 01       		.byte	0x1
 1856 00ba 0B       		.uleb128 0xb
 1857 00bb 05       		.uleb128 0x5
 1858 00bc 3A       		.uleb128 0x3a
 1859 00bd 0B       		.uleb128 0xb
 1860 00be 3B       		.uleb128 0x3b
 1861 00bf 0B       		.uleb128 0xb
 1862 00c0 01       		.uleb128 0x1
 1863 00c1 13       		.uleb128 0x13
 1864 00c2 00       		.byte	0
 1865 00c3 00       		.byte	0
 1866 00c4 11       		.uleb128 0x11
 1867 00c5 01       		.uleb128 0x1
 1868 00c6 01       		.byte	0x1
 1869 00c7 49       		.uleb128 0x49
 1870 00c8 13       		.uleb128 0x13
 1871 00c9 01       		.uleb128 0x1
 1872 00ca 13       		.uleb128 0x13
 1873 00cb 00       		.byte	0
 1874 00cc 00       		.byte	0
 1875 00cd 12       		.uleb128 0x12
 1876 00ce 21       		.uleb128 0x21
 1877 00cf 00       		.byte	0
 1878 00d0 49       		.uleb128 0x49
 1879 00d1 13       		.uleb128 0x13
 1880 00d2 2F       		.uleb128 0x2f
 1881 00d3 0B       		.uleb128 0xb
 1882 00d4 00       		.byte	0
 1883 00d5 00       		.byte	0
 1884 00d6 13       		.uleb128 0x13
 1885 00d7 2E       		.uleb128 0x2e
 1886 00d8 00       		.byte	0
 1887 00d9 3F       		.uleb128 0x3f
 1888 00da 19       		.uleb128 0x19
 1889 00db 03       		.uleb128 0x3
 1890 00dc 0E       		.uleb128 0xe
 1891 00dd 3A       		.uleb128 0x3a
 1892 00de 0B       		.uleb128 0xb
 1893 00df 3B       		.uleb128 0x3b
 1894 00e0 0B       		.uleb128 0xb
 1895 00e1 11       		.uleb128 0x11
 1896 00e2 01       		.uleb128 0x1
 1897 00e3 12       		.uleb128 0x12
 1898 00e4 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 39


 1899 00e5 40       		.uleb128 0x40
 1900 00e6 18       		.uleb128 0x18
 1901 00e7 9642     		.uleb128 0x2116
 1902 00e9 19       		.uleb128 0x19
 1903 00ea 00       		.byte	0
 1904 00eb 00       		.byte	0
 1905 00ec 14       		.uleb128 0x14
 1906 00ed 2E       		.uleb128 0x2e
 1907 00ee 01       		.byte	0x1
 1908 00ef 3F       		.uleb128 0x3f
 1909 00f0 19       		.uleb128 0x19
 1910 00f1 03       		.uleb128 0x3
 1911 00f2 0E       		.uleb128 0xe
 1912 00f3 3A       		.uleb128 0x3a
 1913 00f4 0B       		.uleb128 0xb
 1914 00f5 3B       		.uleb128 0x3b
 1915 00f6 0B       		.uleb128 0xb
 1916 00f7 27       		.uleb128 0x27
 1917 00f8 19       		.uleb128 0x19
 1918 00f9 49       		.uleb128 0x49
 1919 00fa 13       		.uleb128 0x13
 1920 00fb 11       		.uleb128 0x11
 1921 00fc 01       		.uleb128 0x1
 1922 00fd 12       		.uleb128 0x12
 1923 00fe 06       		.uleb128 0x6
 1924 00ff 40       		.uleb128 0x40
 1925 0100 18       		.uleb128 0x18
 1926 0101 9642     		.uleb128 0x2116
 1927 0103 19       		.uleb128 0x19
 1928 0104 01       		.uleb128 0x1
 1929 0105 13       		.uleb128 0x13
 1930 0106 00       		.byte	0
 1931 0107 00       		.byte	0
 1932 0108 15       		.uleb128 0x15
 1933 0109 05       		.uleb128 0x5
 1934 010a 00       		.byte	0
 1935 010b 03       		.uleb128 0x3
 1936 010c 0E       		.uleb128 0xe
 1937 010d 3A       		.uleb128 0x3a
 1938 010e 0B       		.uleb128 0xb
 1939 010f 3B       		.uleb128 0x3b
 1940 0110 0B       		.uleb128 0xb
 1941 0111 49       		.uleb128 0x49
 1942 0112 13       		.uleb128 0x13
 1943 0113 02       		.uleb128 0x2
 1944 0114 18       		.uleb128 0x18
 1945 0115 00       		.byte	0
 1946 0116 00       		.byte	0
 1947 0117 16       		.uleb128 0x16
 1948 0118 05       		.uleb128 0x5
 1949 0119 00       		.byte	0
 1950 011a 03       		.uleb128 0x3
 1951 011b 08       		.uleb128 0x8
 1952 011c 3A       		.uleb128 0x3a
 1953 011d 0B       		.uleb128 0xb
 1954 011e 3B       		.uleb128 0x3b
 1955 011f 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 40


 1956 0120 49       		.uleb128 0x49
 1957 0121 13       		.uleb128 0x13
 1958 0122 02       		.uleb128 0x2
 1959 0123 18       		.uleb128 0x18
 1960 0124 00       		.byte	0
 1961 0125 00       		.byte	0
 1962 0126 17       		.uleb128 0x17
 1963 0127 34       		.uleb128 0x34
 1964 0128 00       		.byte	0
 1965 0129 03       		.uleb128 0x3
 1966 012a 08       		.uleb128 0x8
 1967 012b 3A       		.uleb128 0x3a
 1968 012c 0B       		.uleb128 0xb
 1969 012d 3B       		.uleb128 0x3b
 1970 012e 0B       		.uleb128 0xb
 1971 012f 49       		.uleb128 0x49
 1972 0130 13       		.uleb128 0x13
 1973 0131 02       		.uleb128 0x2
 1974 0132 18       		.uleb128 0x18
 1975 0133 00       		.byte	0
 1976 0134 00       		.byte	0
 1977 0135 18       		.uleb128 0x18
 1978 0136 2E       		.uleb128 0x2e
 1979 0137 01       		.byte	0x1
 1980 0138 3F       		.uleb128 0x3f
 1981 0139 19       		.uleb128 0x19
 1982 013a 03       		.uleb128 0x3
 1983 013b 0E       		.uleb128 0xe
 1984 013c 3A       		.uleb128 0x3a
 1985 013d 0B       		.uleb128 0xb
 1986 013e 3B       		.uleb128 0x3b
 1987 013f 0B       		.uleb128 0xb
 1988 0140 27       		.uleb128 0x27
 1989 0141 19       		.uleb128 0x19
 1990 0142 11       		.uleb128 0x11
 1991 0143 01       		.uleb128 0x1
 1992 0144 12       		.uleb128 0x12
 1993 0145 06       		.uleb128 0x6
 1994 0146 40       		.uleb128 0x40
 1995 0147 18       		.uleb128 0x18
 1996 0148 9642     		.uleb128 0x2116
 1997 014a 19       		.uleb128 0x19
 1998 014b 01       		.uleb128 0x1
 1999 014c 13       		.uleb128 0x13
 2000 014d 00       		.byte	0
 2001 014e 00       		.byte	0
 2002 014f 19       		.uleb128 0x19
 2003 0150 18       		.uleb128 0x18
 2004 0151 00       		.byte	0
 2005 0152 00       		.byte	0
 2006 0153 00       		.byte	0
 2007 0154 1A       		.uleb128 0x1a
 2008 0155 34       		.uleb128 0x34
 2009 0156 00       		.byte	0
 2010 0157 03       		.uleb128 0x3
 2011 0158 0E       		.uleb128 0xe
 2012 0159 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 41


 2013 015a 0B       		.uleb128 0xb
 2014 015b 3B       		.uleb128 0x3b
 2015 015c 0B       		.uleb128 0xb
 2016 015d 49       		.uleb128 0x49
 2017 015e 13       		.uleb128 0x13
 2018 015f 02       		.uleb128 0x2
 2019 0160 18       		.uleb128 0x18
 2020 0161 00       		.byte	0
 2021 0162 00       		.byte	0
 2022 0163 1B       		.uleb128 0x1b
 2023 0164 21       		.uleb128 0x21
 2024 0165 00       		.byte	0
 2025 0166 49       		.uleb128 0x49
 2026 0167 13       		.uleb128 0x13
 2027 0168 2F       		.uleb128 0x2f
 2028 0169 05       		.uleb128 0x5
 2029 016a 00       		.byte	0
 2030 016b 00       		.byte	0
 2031 016c 1C       		.uleb128 0x1c
 2032 016d 2E       		.uleb128 0x2e
 2033 016e 01       		.byte	0x1
 2034 016f 3F       		.uleb128 0x3f
 2035 0170 19       		.uleb128 0x19
 2036 0171 03       		.uleb128 0x3
 2037 0172 0E       		.uleb128 0xe
 2038 0173 3A       		.uleb128 0x3a
 2039 0174 0B       		.uleb128 0xb
 2040 0175 3B       		.uleb128 0x3b
 2041 0176 0B       		.uleb128 0xb
 2042 0177 49       		.uleb128 0x49
 2043 0178 13       		.uleb128 0x13
 2044 0179 11       		.uleb128 0x11
 2045 017a 01       		.uleb128 0x1
 2046 017b 12       		.uleb128 0x12
 2047 017c 06       		.uleb128 0x6
 2048 017d 40       		.uleb128 0x40
 2049 017e 18       		.uleb128 0x18
 2050 017f 9642     		.uleb128 0x2116
 2051 0181 19       		.uleb128 0x19
 2052 0182 01       		.uleb128 0x1
 2053 0183 13       		.uleb128 0x13
 2054 0184 00       		.byte	0
 2055 0185 00       		.byte	0
 2056 0186 1D       		.uleb128 0x1d
 2057 0187 34       		.uleb128 0x34
 2058 0188 00       		.byte	0
 2059 0189 03       		.uleb128 0x3
 2060 018a 0E       		.uleb128 0xe
 2061 018b 3A       		.uleb128 0x3a
 2062 018c 0B       		.uleb128 0xb
 2063 018d 3B       		.uleb128 0x3b
 2064 018e 05       		.uleb128 0x5
 2065 018f 49       		.uleb128 0x49
 2066 0190 13       		.uleb128 0x13
 2067 0191 3F       		.uleb128 0x3f
 2068 0192 19       		.uleb128 0x19
 2069 0193 3C       		.uleb128 0x3c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 42


 2070 0194 19       		.uleb128 0x19
 2071 0195 00       		.byte	0
 2072 0196 00       		.byte	0
 2073 0197 1E       		.uleb128 0x1e
 2074 0198 34       		.uleb128 0x34
 2075 0199 00       		.byte	0
 2076 019a 03       		.uleb128 0x3
 2077 019b 0E       		.uleb128 0xe
 2078 019c 3A       		.uleb128 0x3a
 2079 019d 0B       		.uleb128 0xb
 2080 019e 3B       		.uleb128 0x3b
 2081 019f 0B       		.uleb128 0xb
 2082 01a0 49       		.uleb128 0x49
 2083 01a1 13       		.uleb128 0x13
 2084 01a2 3F       		.uleb128 0x3f
 2085 01a3 19       		.uleb128 0x19
 2086 01a4 02       		.uleb128 0x2
 2087 01a5 18       		.uleb128 0x18
 2088 01a6 00       		.byte	0
 2089 01a7 00       		.byte	0
 2090 01a8 00       		.byte	0
 2091              		.section	.debug_aranges,"",%progbits
 2092 0000 6C000000 		.4byte	0x6c
 2093 0004 0200     		.2byte	0x2
 2094 0006 00000000 		.4byte	.Ldebug_info0
 2095 000a 04       		.byte	0x4
 2096 000b 00       		.byte	0
 2097 000c 0000     		.2byte	0
 2098 000e 0000     		.2byte	0
 2099 0010 00000000 		.4byte	.LFB64
 2100 0014 0C000000 		.4byte	.LFE64-.LFB64
 2101 0018 00000000 		.4byte	.LFB65
 2102 001c 0C000000 		.4byte	.LFE65-.LFB65
 2103 0020 00000000 		.4byte	.LFB66
 2104 0024 20000000 		.4byte	.LFE66-.LFB66
 2105 0028 00000000 		.4byte	.LFB67
 2106 002c 0C000000 		.4byte	.LFE67-.LFB67
 2107 0030 00000000 		.4byte	.LFB68
 2108 0034 38000000 		.4byte	.LFE68-.LFB68
 2109 0038 00000000 		.4byte	.LFB69
 2110 003c F0000000 		.4byte	.LFE69-.LFB69
 2111 0040 00000000 		.4byte	.LFB70
 2112 0044 78000000 		.4byte	.LFE70-.LFB70
 2113 0048 00000000 		.4byte	.LFB71
 2114 004c 58000000 		.4byte	.LFE71-.LFB71
 2115 0050 00000000 		.4byte	.LFB72
 2116 0054 40000000 		.4byte	.LFE72-.LFB72
 2117 0058 00000000 		.4byte	.LFB73
 2118 005c 74000000 		.4byte	.LFE73-.LFB73
 2119 0060 00000000 		.4byte	.LFB74
 2120 0064 3C000000 		.4byte	.LFE74-.LFB74
 2121 0068 00000000 		.4byte	0
 2122 006c 00000000 		.4byte	0
 2123              		.section	.debug_ranges,"",%progbits
 2124              	.Ldebug_ranges0:
 2125 0000 00000000 		.4byte	.LFB64
 2126 0004 0C000000 		.4byte	.LFE64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 43


 2127 0008 00000000 		.4byte	.LFB65
 2128 000c 0C000000 		.4byte	.LFE65
 2129 0010 00000000 		.4byte	.LFB66
 2130 0014 20000000 		.4byte	.LFE66
 2131 0018 00000000 		.4byte	.LFB67
 2132 001c 0C000000 		.4byte	.LFE67
 2133 0020 00000000 		.4byte	.LFB68
 2134 0024 38000000 		.4byte	.LFE68
 2135 0028 00000000 		.4byte	.LFB69
 2136 002c F0000000 		.4byte	.LFE69
 2137 0030 00000000 		.4byte	.LFB70
 2138 0034 78000000 		.4byte	.LFE70
 2139 0038 00000000 		.4byte	.LFB71
 2140 003c 58000000 		.4byte	.LFE71
 2141 0040 00000000 		.4byte	.LFB72
 2142 0044 40000000 		.4byte	.LFE72
 2143 0048 00000000 		.4byte	.LFB73
 2144 004c 74000000 		.4byte	.LFE73
 2145 0050 00000000 		.4byte	.LFB74
 2146 0054 3C000000 		.4byte	.LFE74
 2147 0058 00000000 		.4byte	0
 2148 005c 00000000 		.4byte	0
 2149              		.section	.debug_line,"",%progbits
 2150              	.Ldebug_line0:
 2151 0000 C0030000 		.section	.debug_str,"MS",%progbits,1
 2151      02008802 
 2151      00000201 
 2151      FB0E0D00 
 2151      01010101 
 2152              	.LASF47:
 2153 0000 6D6F6465 		.ascii	"model_id\000"
 2153      6C5F6964 
 2153      00
 2154              	.LASF81:
 2155 0009 745F6F66 		.ascii	"t_of_day\000"
 2155      5F646179 
 2155      00
 2156              	.LASF46:
 2157 0012 73696D5F 		.ascii	"sim_id\000"
 2157      696400
 2158              	.LASF20:
 2159 0019 746D5F6D 		.ascii	"tm_mday\000"
 2159      64617900 
 2160              	.LASF69:
 2161 0021 64656275 		.ascii	"debug_sleep\000"
 2161      675F736C 
 2161      65657000 
 2162              	.LASF39:
 2163 002d 74657374 		.ascii	"test_name\000"
 2163      5F6E616D 
 2163      6500
 2164              	.LASF86:
 2165 0037 696E7075 		.ascii	"input_str\000"
 2165      745F7374 
 2165      7200
 2166              	.LASF67:
 2167 0041 64656275 		.ascii	"debug_start\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 44


 2167      675F7374 
 2167      61727400 
 2168              	.LASF2:
 2169 004d 73686F72 		.ascii	"short int\000"
 2169      7420696E 
 2169      7400
 2170              	.LASF12:
 2171 0057 73697A65 		.ascii	"sizetype\000"
 2171      74797065 
 2171      00
 2172              	.LASF85:
 2173 0060 73747265 		.ascii	"strextract\000"
 2173      78747261 
 2173      637400
 2174              	.LASF90:
 2175 006b 62656769 		.ascii	"begin\000"
 2175      6E00
 2176              	.LASF103:
 2177 0071 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2177      43313120 
 2177      352E342E 
 2177      31203230 
 2177      31363036 
 2178 00a4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2178      20726576 
 2178      6973696F 
 2178      6E203233 
 2178      37373135 
 2179 00d7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2179      66756E63 
 2179      74696F6E 
 2179      2D736563 
 2179      74696F6E 
 2180              	.LASF23:
 2181 00ff 746D5F77 		.ascii	"tm_wday\000"
 2181      64617900 
 2182              	.LASF6:
 2183 0107 6C6F6E67 		.ascii	"long long int\000"
 2183      206C6F6E 
 2183      6720696E 
 2183      7400
 2184              	.LASF84:
 2185 0115 5F777269 		.ascii	"_write\000"
 2185      746500
 2186              	.LASF63:
 2187 011c 4170705F 		.ascii	"App_LED_freq\000"
 2187      4C45445F 
 2187      66726571 
 2187      00
 2188              	.LASF79:
 2189 0129 67657454 		.ascii	"getTimeStamp\000"
 2189      696D6553 
 2189      74616D70 
 2189      00
 2190              	.LASF32:
 2191 0136 486F7572 		.ascii	"Hour\000"
 2191      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 45


 2192              	.LASF71:
 2193 013b 66696C65 		.ascii	"file\000"
 2193      00
 2194              	.LASF52:
 2195 0140 65636E6F 		.ascii	"ecno\000"
 2195      00
 2196              	.LASF43:
 2197 0145 76616C75 		.ascii	"value\000"
 2197      6500
 2198              	.LASF28:
 2199 014b 75696E74 		.ascii	"uint16\000"
 2199      313600
 2200              	.LASF15:
 2201 0152 74696D65 		.ascii	"time_t\000"
 2201      5F7400
 2202              	.LASF26:
 2203 0159 76615F6C 		.ascii	"va_list\000"
 2203      69737400 
 2204              	.LASF94:
 2205 0161 64617461 		.ascii	"dataPointsInStack\000"
 2205      506F696E 
 2205      7473496E 
 2205      53746163 
 2205      6B00
 2206              	.LASF27:
 2207 0173 75696E74 		.ascii	"uint8\000"
 2207      3800
 2208              	.LASF87:
 2209 0179 6F757470 		.ascii	"output_str\000"
 2209      75745F73 
 2209      747200
 2210              	.LASF51:
 2211 0184 72736370 		.ascii	"rscp\000"
 2211      00
 2212              	.LASF44:
 2213 0189 74696D65 		.ascii	"timeStamp\000"
 2213      5374616D 
 2213      7000
 2214              	.LASF19:
 2215 0193 746D5F68 		.ascii	"tm_hour\000"
 2215      6F757200 
 2216              	.LASF30:
 2217 019b 666C6F61 		.ascii	"float\000"
 2217      7400
 2218              	.LASF33:
 2219 01a1 4461794F 		.ascii	"DayOfWeek\000"
 2219      66576565 
 2219      6B00
 2220              	.LASF21:
 2221 01ab 746D5F6D 		.ascii	"tm_mon\000"
 2221      6F6E00
 2222              	.LASF105:
 2223 01b2 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 2223      73657273 
 2223      5C64616E 
 2223      747A5C44 
 2223      6F63756D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 46


 2224 01df 72694F53 		.ascii	"riOS.cydsn\000"
 2224      2E637964 
 2224      736E00
 2225              	.LASF73:
 2226 01ea 666F726D 		.ascii	"format\000"
 2226      617400
 2227              	.LASF89:
 2228 01f1 73656172 		.ascii	"search_end\000"
 2228      63685F65 
 2228      6E6400
 2229              	.LASF16:
 2230 01fc 5F5F7661 		.ascii	"__va_list\000"
 2230      5F6C6973 
 2230      7400
 2231              	.LASF13:
 2232 0206 63686172 		.ascii	"char\000"
 2232      00
 2233              	.LASF49:
 2234 020b 6D6F6465 		.ascii	"modem_info_t\000"
 2234      6D5F696E 
 2234      666F5F74 
 2234      00
 2235              	.LASF41:
 2236 0218 72656173 		.ascii	"reason\000"
 2236      6F6E00
 2237              	.LASF4:
 2238 021f 6C6F6E67 		.ascii	"long int\000"
 2238      20696E74 
 2238      00
 2239              	.LASF88:
 2240 0228 73656172 		.ascii	"search_start\000"
 2240      63685F73 
 2240      74617274 
 2240      00
 2241              	.LASF91:
 2242 0235 7072696E 		.ascii	"printd\000"
 2242      746400
 2243              	.LASF99:
 2244 023c 6D6F6465 		.ascii	"modem_info\000"
 2244      6D5F696E 
 2244      666F00
 2245              	.LASF37:
 2246 0247 59656172 		.ascii	"Year\000"
 2246      00
 2247              	.LASF102:
 2248 024c 42425F66 		.ascii	"BB_fileName\000"
 2248      696C654E 
 2248      616D6500 
 2249              	.LASF60:
 2250 0258 6D656173 		.ascii	"measure_time\000"
 2250      7572655F 
 2250      74696D65 
 2250      00
 2251              	.LASF64:
 2252 0265 4C657665 		.ascii	"Level_Sensor_freq\000"
 2252      6C5F5365 
 2252      6E736F72 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 47


 2252      5F667265 
 2252      7100
 2253              	.LASF36:
 2254 0277 4D6F6E74 		.ascii	"Month\000"
 2254      6800
 2255              	.LASF9:
 2256 027d 6C6F6E67 		.ascii	"long double\000"
 2256      20646F75 
 2256      626C6500 
 2257              	.LASF101:
 2258 0289 75706461 		.ascii	"updatable_parameters\000"
 2258      7461626C 
 2258      655F7061 
 2258      72616D65 
 2258      74657273 
 2259              	.LASF1:
 2260 029e 756E7369 		.ascii	"unsigned char\000"
 2260      676E6564 
 2260      20636861 
 2260      7200
 2261              	.LASF54:
 2262 02ac 72737270 		.ascii	"rsrp\000"
 2262      00
 2263              	.LASF98:
 2264 02b1 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2264      6D5F7374 
 2264      6172745F 
 2264      74696D65 
 2264      5F737461 
 2265              	.LASF96:
 2266 02c8 64617461 		.ascii	"data\000"
 2266      00
 2267              	.LASF95:
 2268 02cd 64617461 		.ascii	"dataPointsInStackDesired\000"
 2268      506F696E 
 2268      7473496E 
 2268      53746163 
 2268      6B446573 
 2269              	.LASF104:
 2270 02e6 64656275 		.ascii	"debug.c\000"
 2270      672E6300 
 2271              	.LASF0:
 2272 02ee 7369676E 		.ascii	"signed char\000"
 2272      65642063 
 2272      68617200 
 2273              	.LASF22:
 2274 02fa 746D5F79 		.ascii	"tm_year\000"
 2274      65617200 
 2275              	.LASF7:
 2276 0302 6C6F6E67 		.ascii	"long long unsigned int\000"
 2276      206C6F6E 
 2276      6720756E 
 2276      7369676E 
 2276      65642069 
 2277              	.LASF72:
 2278 0319 74797065 		.ascii	"type\000"
 2278      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 48


 2279              	.LASF8:
 2280 031e 756E7369 		.ascii	"unsigned int\000"
 2280      676E6564 
 2280      20696E74 
 2280      00
 2281              	.LASF45:
 2282 032b 6B65795F 		.ascii	"key_value_t\000"
 2282      76616C75 
 2282      655F7400 
 2283              	.LASF50:
 2284 0337 72786C65 		.ascii	"rxlev\000"
 2284      7600
 2285              	.LASF61:
 2286 033d 73796E63 		.ascii	"sync_time\000"
 2286      5F74696D 
 2286      6500
 2287              	.LASF78:
 2288 0347 74657374 		.ascii	"test\000"
 2288      00
 2289              	.LASF100:
 2290 034c 6D6F6465 		.ascii	"modem_stats\000"
 2290      6D5F7374 
 2290      61747300 
 2291              	.LASF66:
 2292 0358 75706461 		.ascii	"updatable_parameters_t\000"
 2292      7461626C 
 2292      655F7061 
 2292      72616D65 
 2292      74657273 
 2293              	.LASF59:
 2294 036f 73696D5F 		.ascii	"sim_type\000"
 2294      74797065 
 2294      00
 2295              	.LASF3:
 2296 0378 73686F72 		.ascii	"short unsigned int\000"
 2296      7420756E 
 2296      7369676E 
 2296      65642069 
 2296      6E7400
 2297              	.LASF55:
 2298 038b 74696D65 		.ascii	"time_to_network_connect\000"
 2298      5F746F5F 
 2298      6E657477 
 2298      6F726B5F 
 2298      636F6E6E 
 2299              	.LASF40:
 2300 03a3 73746174 		.ascii	"status\000"
 2300      757300
 2301              	.LASF106:
 2302 03aa 5F5F6170 		.ascii	"__ap\000"
 2302      00
 2303              	.LASF56:
 2304 03af 74696D65 		.ascii	"time_to_acquire_ip\000"
 2304      5F746F5F 
 2304      61637175 
 2304      6972655F 
 2304      697000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 49


 2305              	.LASF65:
 2306 03c2 5F426F6F 		.ascii	"_Bool\000"
 2306      6C00
 2307              	.LASF48:
 2308 03c8 696D6569 		.ascii	"imei\000"
 2308      00
 2309              	.LASF77:
 2310 03cd 7072696E 		.ascii	"printTestStatus\000"
 2310      74546573 
 2310      74537461 
 2310      74757300 
 2311              	.LASF14:
 2312 03dd 696E7433 		.ascii	"int32_t\000"
 2312      325F7400 
 2313              	.LASF74:
 2314 03e5 64656275 		.ascii	"debug_string\000"
 2314      675F7374 
 2314      72696E67 
 2314      00
 2315              	.LASF57:
 2316 03f2 6D6F6465 		.ascii	"modem_stats_t\000"
 2316      6D5F7374 
 2316      6174735F 
 2316      7400
 2317              	.LASF97:
 2318 0400 6D6F6465 		.ascii	"modem_state\000"
 2318      6D5F7374 
 2318      61746500 
 2319              	.LASF83:
 2320 040c 73747269 		.ascii	"string\000"
 2320      6E6700
 2321              	.LASF80:
 2322 0413 6C6F6361 		.ascii	"localTime\000"
 2322      6C54696D 
 2322      6500
 2323              	.LASF34:
 2324 041d 4461794F 		.ascii	"DayOfMonth\000"
 2324      664D6F6E 
 2324      746800
 2325              	.LASF53:
 2326 0428 72737271 		.ascii	"rsrq\000"
 2326      00
 2327              	.LASF18:
 2328 042d 746D5F6D 		.ascii	"tm_min\000"
 2328      696E00
 2329              	.LASF93:
 2330 0434 62756666 		.ascii	"buffer_overflow\000"
 2330      65725F6F 
 2330      76657266 
 2330      6C6F7700 
 2331              	.LASF25:
 2332 0444 746D5F69 		.ascii	"tm_isdst\000"
 2332      73647374 
 2332      00
 2333              	.LASF68:
 2334 044d 64656275 		.ascii	"debug_stop\000"
 2334      675F7374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 50


 2334      6F7000
 2335              	.LASF5:
 2336 0458 6C6F6E67 		.ascii	"long unsigned int\000"
 2336      20756E73 
 2336      69676E65 
 2336      6420696E 
 2336      7400
 2337              	.LASF24:
 2338 046a 746D5F79 		.ascii	"tm_yday\000"
 2338      64617900 
 2339              	.LASF29:
 2340 0472 696E7433 		.ascii	"int32\000"
 2340      3200
 2341              	.LASF31:
 2342 0478 646F7562 		.ascii	"double\000"
 2342      6C6500
 2343              	.LASF75:
 2344 047f 61726770 		.ascii	"argptr\000"
 2344      747200
 2345              	.LASF62:
 2346 0486 64656275 		.ascii	"debug_level\000"
 2346      675F6C65 
 2346      76656C00 
 2347              	.LASF10:
 2348 0492 5F5F696E 		.ascii	"__int32_t\000"
 2348      7433325F 
 2348      7400
 2349              	.LASF42:
 2350 049c 74657374 		.ascii	"test_t\000"
 2350      5F7400
 2351              	.LASF11:
 2352 04a3 5F5F676E 		.ascii	"__gnuc_va_list\000"
 2352      75635F76 
 2352      615F6C69 
 2352      737400
 2353              	.LASF70:
 2354 04b2 64656275 		.ascii	"debug_wakeup\000"
 2354      675F7761 
 2354      6B657570 
 2354      00
 2355              	.LASF76:
 2356 04bf 7072696E 		.ascii	"printNotif\000"
 2356      744E6F74 
 2356      696600
 2357              	.LASF17:
 2358 04ca 746D5F73 		.ascii	"tm_sec\000"
 2358      656300
 2359              	.LASF92:
 2360 04d1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2360      52784275 
 2360      66666572 
 2360      00
 2361              	.LASF38:
 2362 04de 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2362      54494D45 
 2362      5F444154 
 2362      4500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccWkldPd.s 			page 51


 2363              	.LASF58:
 2364 04ec 6E6F6465 		.ascii	"node_type\000"
 2364      5F747970 
 2364      6500
 2365              	.LASF82:
 2366 04f6 73747269 		.ascii	"stripEscapeCharacters\000"
 2366      70457363 
 2366      61706543 
 2366      68617261 
 2366      63746572 
 2367              	.LASF35:
 2368 050c 4461794F 		.ascii	"DayOfYear\000"
 2368      66596561 
 2368      7200
 2369              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
