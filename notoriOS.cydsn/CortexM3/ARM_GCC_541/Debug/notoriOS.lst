ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.Wakeup_ISR,"ax",%progbits
  44              		.align	2
  45              		.global	Wakeup_ISR
  46              		.thumb
  47              		.thumb_func
  48              		.type	Wakeup_ISR, %function
  49              	Wakeup_ISR:
  50              	.LFB64:
  51              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 2


   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  62              		.loc 1 22 0
  63 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  64              		.loc 1 23 0
  65 0008 00BF     		nop
  66 000a 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	Wakeup_ISR, .-Wakeup_ISR
  70              		.global	Data_fileName
  71              		.data
  72              		.align	2
  73              		.type	Data_fileName, %object
  74              		.size	Data_fileName, 30
  75              	Data_fileName:
  76 0000 64617461 		.ascii	"data.txt\000"
  76      2E747874 
  76      00
  77 0009 00000000 		.space	21
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.comm	try_counter,1,1
  79              		.section	.rodata
  80              		.align	2
  81              	.LC0:
  82 0000 25582D25 		.ascii	"%X-%X\000"
  82      5800
  83 0006 0000     		.align	2
  84              	.LC1:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 3


  85 0008 6563322D 		.ascii	"ec2-13-59-131-167.us-east-2.compute.amazonaws.com\000"
  85      31332D35 
  85      392D3133 
  85      312D3136 
  85      372E7573 
  86 003a 0000     		.align	2
  87              	.LC2:
  88 003c 256400   		.ascii	"%d\000"
  89 003f 00       		.align	2
  90              	.LC3:
  91 0040 7265626F 		.ascii	"reboot\000"
  91      6F7400
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 32
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 8AB0     		sub	sp, sp, #40
 111              		.cfi_def_cfa_offset 56
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 48
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 3948     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 4


  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F11403 		add	r3, r7, #20
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 7A69     		ldr	r2, [r7, #20]
 136 0032 BB69     		ldr	r3, [r7, #24]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 2D4A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 2D48     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 2D4B     		ldr	r3, .L3+12
 145 0044 2D4A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-13-59-131-167.us-eas
 147              		.loc 1 68 0
 148 0048 2D4A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 5


 149 004a 2E4B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 2380     		strh	r3, [r4]	@ movhi
  69:notoriOS.c    ****    
  70:notoriOS.c    ****     system_settings.ep_port = 5000;
 160              		.loc 1 70 0
 161 0060 274B     		ldr	r3, .L3+20
 162 0062 41F28832 		movw	r2, #5000
 163 0066 5A66     		str	r2, [r3, #100]
  71:notoriOS.c    ****     // Don't need the following for new nodes
  72:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  73:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  74:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  75:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  76:notoriOS.c    ****         
  77:notoriOS.c    ****     
  78:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  79:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 164              		.loc 1 79 0
 165 0068 274B     		ldr	r3, .L3+28
 166 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 167 006c 99B2     		uxth	r1, r3
 168 006e 274C     		ldr	r4, .L3+32
 169 0070 3846     		mov	r0, r7
 170 0072 0723     		movs	r3, #7
 171 0074 0122     		movs	r2, #1
 172 0076 FFF7FEFF 		bl	CreateAlarm
 173 007a 2246     		mov	r2, r4
 174 007c 3B46     		mov	r3, r7
 175 007e 1968     		ldr	r1, [r3]	@ unaligned
 176 0080 1160     		str	r1, [r2]	@ unaligned
 177 0082 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 178 0084 9380     		strh	r3, [r2, #4]	@ unaligned
  80:notoriOS.c    ****     timeToMeasure = 1u;
 179              		.loc 1 80 0
 180 0086 224B     		ldr	r3, .L3+36
 181 0088 0122     		movs	r2, #1
 182 008a 1A70     		strb	r2, [r3]
  81:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  82:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 183              		.loc 1 82 0
 184 008c 1E4B     		ldr	r3, .L3+28
 185 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 186 0090 99B2     		uxth	r1, r3
 187 0092 204C     		ldr	r4, .L3+40
 188 0094 3846     		mov	r0, r7
 189 0096 0723     		movs	r3, #7
 190 0098 0122     		movs	r2, #1
 191 009a FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 6


 192 009e 2246     		mov	r2, r4
 193 00a0 3B46     		mov	r3, r7
 194 00a2 1968     		ldr	r1, [r3]	@ unaligned
 195 00a4 1160     		str	r1, [r2]	@ unaligned
 196 00a6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 197 00a8 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToSync = 1u;
 198              		.loc 1 83 0
 199 00aa 1B4B     		ldr	r3, .L3+44
 200 00ac 0122     		movs	r2, #1
 201 00ae 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     
  85:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 202              		.loc 1 85 0
 203 00b0 1A4B     		ldr	r3, .L3+48
 204 00b2 0022     		movs	r2, #0
 205 00b4 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     
  87:notoriOS.c    ****     // send hey to server saying the node rebooted
  88:notoriOS.c    ****     hey = 1u;
 206              		.loc 1 88 0
 207 00b6 1A4B     		ldr	r3, .L3+52
 208 00b8 0122     		movs	r2, #1
 209 00ba 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     char c_hey[10];
  90:notoriOS.c    ****     snprintf(c_hey,sizeof(c_hey),"%d",hey);
 210              		.loc 1 90 0
 211 00bc 184B     		ldr	r3, .L3+52
 212 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00c0 07F10800 		add	r0, r7, #8
 214 00c4 174A     		ldr	r2, .L3+56
 215 00c6 0A21     		movs	r1, #10
 216 00c8 FFF7FEFF 		bl	snprintf
  91:notoriOS.c    ****     pushData("reboot",c_hey,getTimeStamp());
 217              		.loc 1 91 0
 218 00cc FFF7FEFF 		bl	getTimeStamp
 219 00d0 0246     		mov	r2, r0
 220 00d2 07F10803 		add	r3, r7, #8
 221 00d6 1946     		mov	r1, r3
 222 00d8 1348     		ldr	r0, .L3+60
 223 00da FFF7FEFF 		bl	pushData
  92:notoriOS.c    ****     
  93:notoriOS.c    ****     // Initialize the try counter to 0
  94:notoriOS.c    ****     uint8 try_counter = 0;
 224              		.loc 1 94 0
 225 00de 0023     		movs	r3, #0
 226 00e0 FB77     		strb	r3, [r7, #31]
  95:notoriOS.c    **** }
 227              		.loc 1 95 0
 228 00e2 00BF     		nop
 229 00e4 2037     		adds	r7, r7, #32
 230              		.cfi_def_cfa_offset 16
 231 00e6 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 00e8 B0BD     		pop	{r4, r5, r7, pc}
 235              	.L4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 7


 236 00ea 00BF     		.align	2
 237              	.L3:
 238 00ec 00000000 		.word	Wakeup_ISR
 239 00f0 00000000 		.word	.LC0
 240 00f4 04000000 		.word	system_info+4
 241 00f8 00000000 		.word	system_info
 242 00fc 00000000 		.word	modem_info
 243 0100 00000000 		.word	system_settings
 244 0104 08000000 		.word	.LC1
 245 0108 00000000 		.word	updatable_parameters
 246 010c 00000000 		.word	alarmMeasure
 247 0110 00000000 		.word	timeToMeasure
 248 0114 00000000 		.word	alarmSync
 249 0118 00000000 		.word	timeToSync
 250 011c 00000000 		.word	timeToSycnRemoteParams
 251 0120 00000000 		.word	hey
 252 0124 3C000000 		.word	.LC2
 253 0128 40000000 		.word	.LC3
 254              		.cfi_endproc
 255              	.LFE65:
 256              		.size	ReadyOrNot, .-ReadyOrNot
 257              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 258              		.align	2
 259              		.global	WorkWorkWorkWorkWorkWork
 260              		.thumb
 261              		.thumb_func
 262              		.type	WorkWorkWorkWorkWorkWork, %function
 263              	WorkWorkWorkWorkWorkWork:
 264              	.LFB66:
  96:notoriOS.c    **** 
  97:notoriOS.c    **** 
  98:notoriOS.c    **** // ==============================================
  99:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 100:notoriOS.c    **** //      - Rhiana, feat Drake (2016)
 101:notoriOS.c    **** //
 102:notoriOS.c    **** // Prorcesses core tasks
 103:notoriOS.c    **** // ==============================================
 104:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 105:notoriOS.c    **** {
 265              		.loc 1 105 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 106:notoriOS.c    ****     
 107:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 108:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 109:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 110:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 111:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 8


 112:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 113:notoriOS.c    ****     if(timeToSycnRemoteParams){
 277              		.loc 1 113 0
 278 0006 144B     		ldr	r3, .L10
 279 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 280 000a 002B     		cmp	r3, #0
 281 000c 06D0     		beq	.L6
 114:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 282              		.loc 1 114 0
 283 000e FFF7FEFF 		bl	configureRemoteParams
 284 0012 0346     		mov	r3, r0
 285 0014 1A46     		mov	r2, r3
 286 0016 104B     		ldr	r3, .L10
 287 0018 1A70     		strb	r2, [r3]
 288 001a 14E0     		b	.L7
 289              	.L6:
 115:notoriOS.c    ****     }
 116:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 117:notoriOS.c    ****     else if(timeToMeasure){
 290              		.loc 1 117 0
 291 001c 0F4B     		ldr	r3, .L10+4
 292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 0020 002B     		cmp	r3, #0
 294 0022 06D0     		beq	.L8
 118:notoriOS.c    ****         //(int i=0; i<=30; i++){
 119:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 295              		.loc 1 119 0
 296 0024 FFF7FEFF 		bl	makeMeasurements
 297 0028 0346     		mov	r3, r0
 298 002a 1A46     		mov	r2, r3
 299 002c 0B4B     		ldr	r3, .L10+4
 300 002e 1A70     		strb	r2, [r3]
 301 0030 09E0     		b	.L7
 302              	.L8:
 120:notoriOS.c    ****         //CyDelay(1000u);
 121:notoriOS.c    ****         //}
 122:notoriOS.c    ****     }else if(timeToSync){
 303              		.loc 1 122 0
 304 0032 0B4B     		ldr	r3, .L10+8
 305 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 0036 002B     		cmp	r3, #0
 307 0038 05D0     		beq	.L7
 123:notoriOS.c    ****             timeToSync = syncData();
 308              		.loc 1 123 0
 309 003a FFF7FEFF 		bl	syncData
 310 003e 0346     		mov	r3, r0
 311 0040 1A46     		mov	r2, r3
 312 0042 074B     		ldr	r3, .L10+8
 313 0044 1A70     		strb	r2, [r3]
 314              	.L7:
 124:notoriOS.c    ****     }
 125:notoriOS.c    ****     // Print the countdown to the next alarm
 126:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 127:notoriOS.c    ****     
 128:notoriOS.c    ****     
 129:notoriOS.c    ****     // Check modem state machine on every loop
 130:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 9


 315              		.loc 1 130 0
 316 0046 FFF7FEFF 		bl	modem_process_tasks
 317 004a 0346     		mov	r3, r0
 318 004c FB71     		strb	r3, [r7, #7]
 131:notoriOS.c    **** 
 132:notoriOS.c    ****     return 0u +  modem_status;  
 319              		.loc 1 132 0
 320 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133:notoriOS.c    **** }
 321              		.loc 1 133 0
 322 0050 1846     		mov	r0, r3
 323 0052 0837     		adds	r7, r7, #8
 324              		.cfi_def_cfa_offset 8
 325 0054 BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 0056 80BD     		pop	{r7, pc}
 329              	.L11:
 330              		.align	2
 331              	.L10:
 332 0058 00000000 		.word	timeToSycnRemoteParams
 333 005c 00000000 		.word	timeToMeasure
 334 0060 00000000 		.word	timeToSync
 335              		.cfi_endproc
 336              	.LFE66:
 337              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 338              		.section	.text.LayBack,"ax",%progbits
 339              		.align	2
 340              		.global	LayBack
 341              		.thumb
 342              		.thumb_func
 343              		.type	LayBack, %function
 344              	LayBack:
 345              	.LFB67:
 134:notoriOS.c    **** 
 135:notoriOS.c    **** 
 136:notoriOS.c    **** 
 137:notoriOS.c    **** 
 138:notoriOS.c    **** 
 139:notoriOS.c    **** 
 140:notoriOS.c    **** // ==============================================
 141:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 142:notoriOS.c    **** //      - Snoop Dogg (1993)
 143:notoriOS.c    **** //
 144:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** void LayBack()
 147:notoriOS.c    **** {
 346              		.loc 1 147 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 10


 355              		.cfi_def_cfa_register 7
 148:notoriOS.c    ****   
 149:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 356              		.loc 1 149 0
 357 0004 FFF7FEFF 		bl	modem_sleep
 150:notoriOS.c    ****     
 151:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 152:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 358              		.loc 1 152 0
 359 0008 FFF7FEFF 		bl	debug_sleep
 153:notoriOS.c    ****     
 154:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 360              		.loc 1 154 0
 361 000c FFF7FEFF 		bl	CyPmSaveClocks
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 157:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 158:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 159:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 160:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 161:notoriOS.c    ****     //CyPmHibernate();
 162:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 163:notoriOS.c    **** 
 164:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 362              		.loc 1 164 0
 363 0010 4FF40061 		mov	r1, #2048
 364 0014 0020     		movs	r0, #0
 365 0016 FFF7FEFF 		bl	CyPmSleep
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 366              		.loc 1 166 0
 367 001a FFF7FEFF 		bl	CyPmRestoreClocks
 167:notoriOS.c    **** 
 168:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 368              		.loc 1 168 0
 369 001e FFF7FEFF 		bl	debug_wakeup
 169:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 370              		.loc 1 169 0
 371 0022 FFF7FEFF 		bl	modem_wakeup
 170:notoriOS.c    **** 
 171:notoriOS.c    **** }
 372              		.loc 1 171 0
 373 0026 00BF     		nop
 374 0028 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE67:
 377              		.size	LayBack, .-LayBack
 378 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 379              		.align	2
 380              		.global	AyoItsTime
 381              		.thumb
 382              		.thumb_func
 383              		.type	AyoItsTime, %function
 384              	AyoItsTime:
 385              	.LFB68:
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 11


 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 176:notoriOS.c    **** //      - NAS (1994)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 179:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 180:notoriOS.c    **** // It will add tasks to the work queue,
 181:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 182:notoriOS.c    **** // ==============================================
 183:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 184:notoriOS.c    **** {
 386              		.loc 1 184 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 FB71     		strb	r3, [r7, #7]
 185:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 186:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 400              		.loc 1 186 0
 401 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 402 000c 1946     		mov	r1, r3
 403 000e 0C48     		ldr	r0, .L17
 404 0010 FFF7FEFF 		bl	AlarmReady
 405 0014 0346     		mov	r3, r0
 406 0016 002B     		cmp	r3, #0
 407 0018 02D0     		beq	.L14
 187:notoriOS.c    ****     {
 188:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 189:notoriOS.c    ****         timeToMeasure = 1u;
 408              		.loc 1 189 0
 409 001a 0A4B     		ldr	r3, .L17+4
 410 001c 0122     		movs	r2, #1
 411 001e 1A70     		strb	r2, [r3]
 412              	.L14:
 190:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 191:notoriOS.c    ****         
 192:notoriOS.c    ****     }
 193:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 413              		.loc 1 193 0
 414 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415 0022 1946     		mov	r1, r3
 416 0024 0848     		ldr	r0, .L17+8
 417 0026 FFF7FEFF 		bl	AlarmReady
 418 002a 0346     		mov	r3, r0
 419 002c 002B     		cmp	r3, #0
 420 002e 02D0     		beq	.L16
 194:notoriOS.c    ****     {
 195:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 12


 196:notoriOS.c    ****         timeToSync = 1u;
 421              		.loc 1 196 0
 422 0030 064B     		ldr	r3, .L17+12
 423 0032 0122     		movs	r2, #1
 424 0034 1A70     		strb	r2, [r3]
 425              	.L16:
 197:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 198:notoriOS.c    ****     }
 199:notoriOS.c    ****     
 200:notoriOS.c    **** }
 426              		.loc 1 200 0
 427 0036 00BF     		nop
 428 0038 0837     		adds	r7, r7, #8
 429              		.cfi_def_cfa_offset 8
 430 003a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 003c 80BD     		pop	{r7, pc}
 434              	.L18:
 435 003e 00BF     		.align	2
 436              	.L17:
 437 0040 00000000 		.word	alarmMeasure
 438 0044 00000000 		.word	timeToMeasure
 439 0048 00000000 		.word	alarmSync
 440 004c 00000000 		.word	timeToSync
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	AyoItsTime, .-AyoItsTime
 444              		.section	.text.AlarmReady,"ax",%progbits
 445              		.align	2
 446              		.global	AlarmReady
 447              		.thumb
 448              		.thumb_func
 449              		.type	AlarmReady, %function
 450              	AlarmReady:
 451              	.LFB69:
 201:notoriOS.c    **** 
 202:notoriOS.c    **** 
 203:notoriOS.c    **** // ==============================================
 204:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 205:notoriOS.c    **** // ==============================================
 206:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 207:notoriOS.c    **** {
 452              		.loc 1 207 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 13


 466 000a FB70     		strb	r3, [r7, #3]
 208:notoriOS.c    ****     // if the countDownType matches the alarmType
 209:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 467              		.loc 1 209 0
 468 000c 7B68     		ldr	r3, [r7, #4]
 469 000e 1B79     		ldrb	r3, [r3, #4]
 470 0010 DBB2     		uxtb	r3, r3
 471 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 472 0014 9A42     		cmp	r2, r3
 473 0016 12D1     		bne	.L20
 210:notoriOS.c    ****        
 211:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 212:notoriOS.c    ****         // Decrement the count down value by 1
 213:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 474              		.loc 1 213 0
 475 0018 7B68     		ldr	r3, [r7, #4]
 476 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 477 001c 1BB2     		sxth	r3, r3
 478 001e 9BB2     		uxth	r3, r3
 479 0020 013B     		subs	r3, r3, #1
 480 0022 9BB2     		uxth	r3, r3
 481 0024 1AB2     		sxth	r2, r3
 482 0026 7B68     		ldr	r3, [r7, #4]
 483 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 214:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 215:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 484              		.loc 1 215 0
 485 002a 7B68     		ldr	r3, [r7, #4]
 486 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 487 002e 1BB2     		sxth	r3, r3
 488 0030 002B     		cmp	r3, #0
 489 0032 04DC     		bgt	.L20
 216:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 490              		.loc 1 216 0
 491 0034 7868     		ldr	r0, [r7, #4]
 492 0036 FFF7FEFF 		bl	ResetAlarm
 217:notoriOS.c    ****             return 1u;
 493              		.loc 1 217 0
 494 003a 0123     		movs	r3, #1
 495 003c 00E0     		b	.L21
 496              	.L20:
 218:notoriOS.c    ****         } 
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     
 221:notoriOS.c    ****     return 0u; // Otherwise return 0
 497              		.loc 1 221 0
 498 003e 0023     		movs	r3, #0
 499              	.L21:
 222:notoriOS.c    **** }
 500              		.loc 1 222 0
 501 0040 1846     		mov	r0, r3
 502 0042 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0044 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 14


 508              		.cfi_endproc
 509              	.LFE69:
 510              		.size	AlarmReady, .-AlarmReady
 511              		.section	.text.ResetAlarm,"ax",%progbits
 512              		.align	2
 513              		.global	ResetAlarm
 514              		.thumb
 515              		.thumb_func
 516              		.type	ResetAlarm, %function
 517              	ResetAlarm:
 518              	.LFB70:
 223:notoriOS.c    **** 
 224:notoriOS.c    **** // ==============================================
 225:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 226:notoriOS.c    **** // ==============================================
 227:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 228:notoriOS.c    **** {
 519              		.loc 1 228 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 229:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 230:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 532              		.loc 1 230 0
 533 0008 7B68     		ldr	r3, [r7, #4]
 534 000a 1B88     		ldrh	r3, [r3]	@ movhi
 535 000c 9BB2     		uxth	r3, r3
 536 000e 1AB2     		sxth	r2, r3
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 231:notoriOS.c    **** }
 539              		.loc 1 231 0
 540 0014 00BF     		nop
 541 0016 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0018 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 001a 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 001c 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	ResetAlarm, .-ResetAlarm
 553 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 554              		.align	2
 555              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 15


 556              		.thumb
 557              		.thumb_func
 558              		.type	CreateAlarm, %function
 559              	CreateAlarm:
 560              	.LFB71:
 232:notoriOS.c    **** 
 233:notoriOS.c    **** // ==============================================
 234:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 237:notoriOS.c    **** {
 561              		.loc 1 237 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 85B0     		sub	sp, sp, #20
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0846     		mov	r0, r1
 575 000a 1146     		mov	r1, r2
 576 000c 1A46     		mov	r2, r3
 577 000e 0346     		mov	r3, r0	@ movhi
 578 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 579 0012 0B46     		mov	r3, r1
 580 0014 7B70     		strb	r3, [r7, #1]
 581 0016 1346     		mov	r3, r2
 582 0018 3B70     		strb	r3, [r7]
 238:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 239:notoriOS.c    ****     alarm newAlarm;
 240:notoriOS.c    ****     
 241:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 242:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 583              		.loc 1 242 0
 584 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 585 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 243:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 586              		.loc 1 243 0
 587 001e 7B78     		ldrb	r3, [r7, #1]
 588 0020 3B73     		strb	r3, [r7, #12]
 244:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 589              		.loc 1 244 0
 590 0022 3B78     		ldrb	r3, [r7]
 591 0024 7B73     		strb	r3, [r7, #13]
 245:notoriOS.c    ****     
 246:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 247:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 248:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 592              		.loc 1 248 0
 593 0026 B7F90230 		ldrsh	r3, [r7, #2]
 594 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 249:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 16


 250:notoriOS.c    ****     return newAlarm;
 595              		.loc 1 250 0
 596 002c 7B68     		ldr	r3, [r7, #4]
 597 002e 1A46     		mov	r2, r3
 598 0030 07F10803 		add	r3, r7, #8
 599 0034 1868     		ldr	r0, [r3]	@ unaligned
 600 0036 1060     		str	r0, [r2]	@ unaligned
 601 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 602 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 251:notoriOS.c    ****     
 252:notoriOS.c    **** }
 603              		.loc 1 252 0
 604 003c 7868     		ldr	r0, [r7, #4]
 605 003e 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 0040 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0042 80BC     		pop	{r7}
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0044 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE71:
 616              		.size	CreateAlarm, .-CreateAlarm
 617 0046 00BF     		.section	.rodata
 618 0047 00       		.align	2
 619              	.LC4:
 620 0048 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 620      2D2D2D2D 
 620      2D2D2D2D 
 620      2D424547 
 620      494E2054 
 621 0072 0000     		.align	2
 622              	.LC5:
 623 0074 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 623      3D25732C 
 623      2053494D 
 623      49443D25 
 623      732C2044 
 624 0093 00       		.align	2
 625              	.LC6:
 626 0094 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 626      2D2D2D2D 
 626      2D2D2D2D 
 626      2D2D2D45 
 626      4E442054 
 627 00bd 00       		.ascii	"\000"
 628              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 629              		.align	2
 630              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 631              		.thumb
 632              		.thumb_func
 633              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 634              	ChickityCheckYourselfBeforeYouWreckYourself:
 635              	.LFB72:
 253:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 17


 254:notoriOS.c    **** // ==============================================
 255:notoriOS.c    **** // Dropping bombs on your moms
 256:notoriOS.c    **** //      - Ice Cube (1992)
 257:notoriOS.c    **** //
 258:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 259:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 260:notoriOS.c    **** // ==============================================
 261:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 636              		.loc 1 261 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 2328
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 90B5     		push	{r4, r7, lr}
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 ADF6942D 		subw	sp, sp, #2708
 646              		.cfi_def_cfa_offset 2720
 647 0006 5EAF     		add	r7, sp, #376
 648              		.cfi_def_cfa 7, 2344
 262:notoriOS.c    **** 
 263:notoriOS.c    ****     //test_t t_influx = influx_test();
 264:notoriOS.c    ****     //printTestStatus(t_influx);
 265:notoriOS.c    ****     
 266:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 649              		.loc 1 266 0
 650 0008 4249     		ldr	r1, .L26
 651 000a 0320     		movs	r0, #3
 652 000c FFF7FEFF 		bl	printNotif
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Test DO sensor
 269:notoriOS.c    ****     test_t t_DO_sensor = DO_sensor_test();
 653              		.loc 1 269 0
 654 0010 07F29473 		addw	r3, r7, #1940
 655 0014 1846     		mov	r0, r3
 656 0016 FFF7FEFF 		bl	DO_sensor_test
 270:notoriOS.c    ****     printTestStatus(t_DO_sensor);
 657              		.loc 1 270 0
 658 001a 07F29474 		addw	r4, r7, #1940
 659 001e 6846     		mov	r0, sp
 660 0020 04F11003 		add	r3, r4, #16
 661 0024 40F27112 		movw	r2, #369
 662 0028 1946     		mov	r1, r3
 663 002a FFF7FEFF 		bl	memcpy
 664 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 665 0032 FFF7FEFF 		bl	printTestStatus
 271:notoriOS.c    ****     
 272:notoriOS.c    ****     // Test level sensor
 273:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 666              		.loc 1 273 0
 667 0036 07F5C263 		add	r3, r7, #1552
 668 003a 1846     		mov	r0, r3
 669 003c FFF7FEFF 		bl	level_sensor_test
 274:notoriOS.c    ****     printTestStatus(t_level_sensor);
 670              		.loc 1 274 0
 671 0040 07F5C264 		add	r4, r7, #1552
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 18


 672 0044 6846     		mov	r0, sp
 673 0046 04F11003 		add	r3, r4, #16
 674 004a 40F27112 		movw	r2, #369
 675 004e 1946     		mov	r1, r3
 676 0050 FFF7FEFF 		bl	memcpy
 677 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 678 0058 FFF7FEFF 		bl	printTestStatus
 275:notoriOS.c    ****     
 276:notoriOS.c    ****     // Test voltages
 277:notoriOS.c    ****     test_t t_voltages = voltages_test();
 679              		.loc 1 277 0
 680 005c 07F28C43 		addw	r3, r7, #1164
 681 0060 1846     		mov	r0, r3
 682 0062 FFF7FEFF 		bl	voltages_test
 278:notoriOS.c    ****     printTestStatus(t_voltages);
 683              		.loc 1 278 0
 684 0066 07F28C44 		addw	r4, r7, #1164
 685 006a 6846     		mov	r0, sp
 686 006c 04F11003 		add	r3, r4, #16
 687 0070 40F27112 		movw	r2, #369
 688 0074 1946     		mov	r1, r3
 689 0076 FFF7FEFF 		bl	memcpy
 690 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 691 007e FFF7FEFF 		bl	printTestStatus
 279:notoriOS.c    ****     
 280:notoriOS.c    ****     // Test voltages
 281:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 692              		.loc 1 281 0
 693 0082 07F54273 		add	r3, r7, #776
 694 0086 1846     		mov	r0, r3
 695 0088 FFF7FEFF 		bl	pressure_sensor_test
 282:notoriOS.c    ****     printTestStatus(t_pressure);
 696              		.loc 1 282 0
 697 008c 07F54274 		add	r4, r7, #776
 698 0090 6846     		mov	r0, sp
 699 0092 04F11003 		add	r3, r4, #16
 700 0096 40F27112 		movw	r2, #369
 701 009a 1946     		mov	r1, r3
 702 009c FFF7FEFF 		bl	memcpy
 703 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 704 00a4 FFF7FEFF 		bl	printTestStatus
 283:notoriOS.c    ****     
 284:notoriOS.c    ****     // Test SD card
 285:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 705              		.loc 1 285 0
 706 00a8 07F5C273 		add	r3, r7, #388
 707 00ac 1846     		mov	r0, r3
 708 00ae FFF7FEFF 		bl	SD_card_test
 286:notoriOS.c    ****     printTestStatus(t_sd_card);
 709              		.loc 1 286 0
 710 00b2 07F5C274 		add	r4, r7, #388
 711 00b6 6846     		mov	r0, sp
 712 00b8 04F11003 		add	r3, r4, #16
 713 00bc 40F27112 		movw	r2, #369
 714 00c0 1946     		mov	r1, r3
 715 00c2 FFF7FEFF 		bl	memcpy
 716 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 19


 717 00ca FFF7FEFF 		bl	printTestStatus
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // Test modem
 289:notoriOS.c    ****     test_t t_modem = modem_test();
 718              		.loc 1 289 0
 719 00ce 3B46     		mov	r3, r7
 720 00d0 1846     		mov	r0, r3
 721 00d2 FFF7FEFF 		bl	modem_test
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 722              		.loc 1 290 0
 723 00d6 104B     		ldr	r3, .L26+4
 724 00d8 0093     		str	r3, [sp]
 725 00da 104B     		ldr	r3, .L26+8
 726 00dc 104A     		ldr	r2, .L26+12
 727 00de 1149     		ldr	r1, .L26+16
 728 00e0 0320     		movs	r0, #3
 729 00e2 FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     printTestStatus(t_modem);
 730              		.loc 1 291 0
 731 00e6 3C46     		mov	r4, r7
 732 00e8 6846     		mov	r0, sp
 733 00ea 04F11003 		add	r3, r4, #16
 734 00ee 40F27112 		movw	r2, #369
 735 00f2 1946     		mov	r1, r3
 736 00f4 FFF7FEFF 		bl	memcpy
 737 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 738 00fc FFF7FEFF 		bl	printTestStatus
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 739              		.loc 1 293 0
 740 0100 0949     		ldr	r1, .L26+20
 741 0102 0320     		movs	r0, #3
 742 0104 FFF7FEFF 		bl	printNotif
 294:notoriOS.c    **** 
 295:notoriOS.c    **** }
 743              		.loc 1 295 0
 744 0108 00BF     		nop
 745 010a 07F61C17 		addw	r7, r7, #2332
 746              		.cfi_def_cfa_offset 12
 747 010e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0110 90BD     		pop	{r4, r7, pc}
 751              	.L27:
 752 0112 00BF     		.align	2
 753              	.L26:
 754 0114 48000000 		.word	.LC4
 755 0118 04000000 		.word	system_info+4
 756 011c 00000000 		.word	modem_info
 757 0120 28000000 		.word	modem_info+40
 758 0124 74000000 		.word	.LC5
 759 0128 94000000 		.word	.LC6
 760              		.cfi_endproc
 761              	.LFE72:
 762              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 763              		.section	.text.main,"ax",%progbits
 764              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 20


 765              		.global	main
 766              		.thumb
 767              		.thumb_func
 768              		.type	main, %function
 769              	main:
 770              	.LFB73:
 296:notoriOS.c    **** 
 297:notoriOS.c    **** // ==============================================
 298:notoriOS.c    **** // Processes Core Tasks
 299:notoriOS.c    **** // ==============================================
 300:notoriOS.c    **** int main(void)
 301:notoriOS.c    **** {
 771              		.loc 1 301 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 302:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 781              		.loc 1 302 0
 782              		.syntax unified
 783              	@ 302 "notoriOS.c" 1
 784 0004 62B6     		CPSIE   i
 785              	@ 0 "" 2
 303:notoriOS.c    **** 
 304:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 786              		.loc 1 304 0
 787              		.thumb
 788              		.syntax unified
 789 0006 FFF7FEFF 		bl	ReadyOrNot
 305:notoriOS.c    ****     
 306:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 790              		.loc 1 306 0
 791 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 792              	.L30:
 307:notoriOS.c    ****    
 308:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 309:notoriOS.c    ****     {
 310:notoriOS.c    ****         
 311:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 793              		.loc 1 311 0
 794 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 795 0012 0346     		mov	r3, r0
 796 0014 002B     		cmp	r3, #0
 797 0016 FAD1     		bne	.L30
 312:notoriOS.c    ****         {
 313:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 798              		.loc 1 313 0
 799 0018 FFF7FEFF 		bl	LayBack
 314:notoriOS.c    ****         }
 315:notoriOS.c    ****     }
 800              		.loc 1 315 0
 801 001c F7E7     		b	.L30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 21


 802              		.cfi_endproc
 803              	.LFE73:
 804              		.size	main, .-main
 805 001e 00BF     		.section	.rodata
 806 00be 0000     		.align	2
 807              	.LC7:
 808 00c0 4D6F6465 		.ascii	"Modem is ready.\000"
 808      6D206973 
 808      20726561 
 808      64792E00 
 809              		.align	2
 810              	.LC8:
 811 00d0 72737270 		.ascii	"rsrp\000"
 811      00
 812 00d5 000000   		.align	2
 813              	.LC9:
 814 00d8 7472795F 		.ascii	"try_counter\000"
 814      636F756E 
 814      74657200 
 815              		.align	2
 816              	.LC10:
 817 00e4 64617461 		.ascii	"data_count_sent\000"
 817      5F636F75 
 817      6E745F73 
 817      656E7400 
 818              		.align	2
 819              	.LC11:
 820 00f4 64617461 		.ascii	"data_count_desired\000"
 820      5F636F75 
 820      6E745F64 
 820      65736972 
 820      656400
 821 0107 00       		.align	2
 822              	.LC12:
 823 0108 42656769 		.ascii	"Begin HTTP post.\000"
 823      6E204854 
 823      54502070 
 823      6F73742E 
 823      00
 824 0119 000000   		.align	2
 825              	.LC13:
 826 011c 35343538 		.ascii	"545820afb376cb3351f3f39b45e322f7d5c61b99\000"
 826      32306166 
 826      62333736 
 826      63623333 
 826      35316633 
 827 0145 000000   		.align	2
 828              	.LC14:
 829 0148 6170692F 		.ascii	"api/v1/write\000"
 829      76312F77 
 829      72697465 
 829      00
 830 0155 000000   		.align	2
 831              	.LC15:
 832 0158 48545450 		.ascii	"HTTP route: %s\000"
 832      20726F75 
 832      74653A20 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 22


 832      257300
 833 0167 00       		.align	2
 834              	.LC16:
 835 0168 312E3100 		.ascii	"1.1\000"
 836              		.align	2
 837              	.LC17:
 838 016c 00       		.ascii	"\000"
 839 016d 000000   		.align	2
 840              	.LC18:
 841 0170 436C6F73 		.ascii	"Close\000"
 841      6500
 842 0176 0000     		.align	2
 843              	.LC19:
 844 0178 504F5354 		.ascii	"POST\000"
 844      00
 845 017d 000000   		.align	2
 846              	.LC20:
 847 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 847      20485454 
 847      50205265 
 847      71756573 
 847      743A2025 
 848 0196 0000     		.align	2
 849              	.LC21:
 850 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 850      443D312C 
 850      302C2564 
 850      2C222573 
 850      222C302C 
 851 01b1 000000   		.align	2
 852              	.LC22:
 853 01b4 257300   		.ascii	"%s\000"
 854 01b7 00       		.align	2
 855              	.LC23:
 856 01b8 4F4B00   		.ascii	"OK\000"
 857              		.global	__aeabi_ui2d
 858              		.global	__aeabi_d2iz
 859 01bb 00       		.align	2
 860              	.LC24:
 861 01bc 68747470 		.ascii	"http_request len: %d\000"
 861      5F726571 
 861      75657374 
 861      206C656E 
 861      3A202564 
 862 01d1 000000   		.align	2
 863              	.LC25:
 864 01d4 23206F66 		.ascii	"# of packets: %d\000"
 864      20706163 
 864      6B657473 
 864      3A202564 
 864      00
 865 01e5 000000   		.align	2
 866              	.LC26:
 867 01e8 3E00     		.ascii	">\000"
 868 01ea 0000     		.align	2
 869              	.LC27:
 870 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 23


 870      53454E44 
 870      3D310D0A 
 870      00
 871 01f9 000000   		.align	2
 872              	.LC28:
 873 01fc 1A00     		.ascii	"\032\000"
 874 01fe 0000     		.align	2
 875              	.LC29:
 876 0200 6368756E 		.ascii	"chunk %d: %s\000"
 876      6B202564 
 876      3A202573 
 876      00
 877 020d 000000   		.align	2
 878              	.LC30:
 879 0210 5352494E 		.ascii	"SRING\000"
 879      4700
 880 0216 0000     		.align	2
 881              	.LC31:
 882 0218 4F532D4F 		.ascii	"OS-OK\000"
 882      4B00
 883 021e 0000     		.align	2
 884              	.LC32:
 885 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 885      52454356 
 885      3D312C31 
 885      3030300D 
 885      00
 886 0231 000000   		.align	2
 887              	.LC33:
 888 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 888      6D5F7478 
 888      5F74696D 
 888      6500
 889 0242 0000     		.align	2
 890              	.LC34:
 891 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 891      4F3A2043 
 891      6F756C64 
 891      206E6F74 
 891      20726563 
 892              		.section	.text.syncData,"ax",%progbits
 893              		.align	2
 894              		.global	syncData
 895              		.thumb
 896              		.thumb_func
 897              		.type	syncData, %function
 898              	syncData:
 899              	.LFB74:
 316:notoriOS.c    **** }
 317:notoriOS.c    **** 
 318:notoriOS.c    **** // ==============================================
 319:notoriOS.c    **** // Syncs data with server
 320:notoriOS.c    **** // Returns 0 when done
 321:notoriOS.c    **** // ==============================================
 322:notoriOS.c    **** uint8 syncData(){
 900              		.loc 1 322 0
 901              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 24


 902              		@ args = 0, pretend = 0, frame = 1336
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 90B5     		push	{r4, r7, lr}
 905              		.cfi_def_cfa_offset 12
 906              		.cfi_offset 4, -12
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 ADF2545D 		subw	sp, sp, #1364
 910              		.cfi_def_cfa_offset 1376
 911 0006 06AF     		add	r7, sp, #24
 912              		.cfi_def_cfa 7, 1352
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     /*
 325:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 326:notoriOS.c    ****     uint8 check = 0;
 327:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 328:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 329:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 330:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 331:notoriOS.c    ****     */
 332:notoriOS.c    **** 
 333:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 334:notoriOS.c    ****     LED_Write(1u);
 913              		.loc 1 334 0
 914 0008 0120     		movs	r0, #1
 915 000a FFF7FEFF 		bl	LED_Write
 335:notoriOS.c    ****     CyDelay(100u);
 916              		.loc 1 335 0
 917 000e 6420     		movs	r0, #100
 918 0010 FFF7FEFF 		bl	CyDelay
 336:notoriOS.c    ****     LED_Write(0u);
 919              		.loc 1 336 0
 920 0014 0020     		movs	r0, #0
 921 0016 FFF7FEFF 		bl	LED_Write
 337:notoriOS.c    **** 
 338:notoriOS.c    ****     
 339:notoriOS.c    ****     // If there's no data, not need to do anything
 340:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 922              		.loc 1 340 0
 923 001a FFF7FEFF 		bl	sizeOfDataStack
 924 001e 0346     		mov	r3, r0
 925 0020 002B     		cmp	r3, #0
 926 0022 01D1     		bne	.L32
 341:notoriOS.c    ****         return 0u;
 927              		.loc 1 341 0
 928 0024 0023     		movs	r3, #0
 929 0026 F9E1     		b	.L33
 930              	.L32:
 342:notoriOS.c    ****         }
 343:notoriOS.c    ****     
 344:notoriOS.c    ****     // Create request body, in this case influx
 345:notoriOS.c    ****     // Place body into HTTP request header
 346:notoriOS.c    ****     // Fire up modem and get it out
 347:notoriOS.c    ****      
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 350:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 25


 931              		.loc 1 350 0
 932 0028 FFF7FEFF 		bl	modem_get_state
 933 002c 0346     		mov	r3, r0
 934 002e 002B     		cmp	r3, #0
 935 0030 11D1     		bne	.L34
 351:notoriOS.c    **** 
 352:notoriOS.c    ****         try_counter++;
 936              		.loc 1 352 0
 937 0032 C74B     		ldr	r3, .L46
 938 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 939 0036 0133     		adds	r3, r3, #1
 940 0038 DAB2     		uxtb	r2, r3
 941 003a C54B     		ldr	r3, .L46
 942 003c 1A70     		strb	r2, [r3]
 353:notoriOS.c    ****         	
 354:notoriOS.c    ****         if(try_counter <= 2){
 943              		.loc 1 354 0
 944 003e C44B     		ldr	r3, .L46
 945 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 946 0042 022B     		cmp	r3, #2
 947 0044 02D8     		bhi	.L35
 355:notoriOS.c    ****             modem_power_up();
 948              		.loc 1 355 0
 949 0046 FFF7FEFF 		bl	modem_power_up
 950 004a E6E1     		b	.L36
 951              	.L35:
 356:notoriOS.c    ****         }else{
 357:notoriOS.c    ****             try_counter = 0;
 952              		.loc 1 357 0
 953 004c C04B     		ldr	r3, .L46
 954 004e 0022     		movs	r2, #0
 955 0050 1A70     		strb	r2, [r3]
 358:notoriOS.c    ****             return 0u;
 956              		.loc 1 358 0
 957 0052 0023     		movs	r3, #0
 958 0054 E2E1     		b	.L33
 959              	.L34:
 359:notoriOS.c    ****             }
 360:notoriOS.c    ****             
 361:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 960              		.loc 1 361 0
 961 0056 FFF7FEFF 		bl	modem_get_state
 962 005a 0346     		mov	r3, r0
 963 005c 042B     		cmp	r3, #4
 964 005e 40F0DC81 		bne	.L36
 965              	.LBB2:
 362:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 966              		.loc 1 362 0
 967 0062 BC49     		ldr	r1, .L46+4
 968 0064 0020     		movs	r0, #0
 969 0066 FFF7FEFF 		bl	printNotif
 363:notoriOS.c    ****         
 364:notoriOS.c    ****         http_request[0] = '\0';
 970              		.loc 1 364 0
 971 006a BB4B     		ldr	r3, .L46+8
 972 006c 0022     		movs	r2, #0
 973 006e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 26


 365:notoriOS.c    ****         http_body[0] = '\0';
 974              		.loc 1 365 0
 975 0070 BA4B     		ldr	r3, .L46+12
 976 0072 0022     		movs	r2, #0
 977 0074 1A70     		strb	r2, [r3]
 366:notoriOS.c    ****         http_route[0] = '\0';
 978              		.loc 1 366 0
 979 0076 BA4B     		ldr	r3, .L46+16
 980 0078 0022     		movs	r2, #0
 981 007a 1A70     		strb	r2, [r3]
 367:notoriOS.c    ****         //char *base = "write";
 368:notoriOS.c    ****         
 369:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power)
 370:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 371:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 982              		.loc 1 371 0
 983 007c B94B     		ldr	r3, .L46+20
 984 007e 5B69     		ldr	r3, [r3, #20]
 985 0080 07F5A260 		add	r0, r7, #1296
 986 0084 B84A     		ldr	r2, .L46+24
 987 0086 1421     		movs	r1, #20
 988 0088 FFF7FEFF 		bl	snprintf
 372:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 989              		.loc 1 372 0
 990 008c FFF7FEFF 		bl	getTimeStamp
 991 0090 0246     		mov	r2, r0
 992 0092 07F5A263 		add	r3, r7, #1296
 993 0096 1946     		mov	r1, r3
 994 0098 B448     		ldr	r0, .L46+28
 995 009a FFF7FEFF 		bl	pushData
 373:notoriOS.c    ****         
 374:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 375:notoriOS.c    ****         char c_try_counter[20];
 376:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 996              		.loc 1 376 0
 997 009e AC4B     		ldr	r3, .L46
 998 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 00a2 07F2FC40 		addw	r0, r7, #1276
 1000 00a6 B04A     		ldr	r2, .L46+24
 1001 00a8 1421     		movs	r1, #20
 1002 00aa FFF7FEFF 		bl	snprintf
 377:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1003              		.loc 1 377 0
 1004 00ae FFF7FEFF 		bl	getTimeStamp
 1005 00b2 0246     		mov	r2, r0
 1006 00b4 07F2FC43 		addw	r3, r7, #1276
 1007 00b8 1946     		mov	r1, r3
 1008 00ba AD48     		ldr	r0, .L46+32
 1009 00bc FFF7FEFF 		bl	pushData
 378:notoriOS.c    ****         
 379:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 380:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 381:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 382:notoriOS.c    ****         if(buffer_overflow == false){
 1010              		.loc 1 382 0
 1011 00c0 AC4B     		ldr	r3, .L46+36
 1012 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 27


 1013 00c4 83F00103 		eor	r3, r3, #1
 1014 00c8 DBB2     		uxtb	r3, r3
 1015 00ca 002B     		cmp	r3, #0
 1016 00cc 16D0     		beq	.L37
 1017              	.LBB3:
 383:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1018              		.loc 1 383 0
 1019 00ce FFF7FEFF 		bl	sizeOfDataStack
 1020 00d2 0346     		mov	r3, r0
 1021 00d4 A7F83035 		strh	r3, [r7, #1328]	@ movhi
 384:notoriOS.c    ****             char c_data_count_sent[20];
 385:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1022              		.loc 1 385 0
 1023 00d8 B7F83035 		ldrh	r3, [r7, #1328]
 1024 00dc 07F2D440 		addw	r0, r7, #1236
 1025 00e0 A14A     		ldr	r2, .L46+24
 1026 00e2 1421     		movs	r1, #20
 1027 00e4 FFF7FEFF 		bl	snprintf
 386:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1028              		.loc 1 386 0
 1029 00e8 FFF7FEFF 		bl	getTimeStamp
 1030 00ec 0246     		mov	r2, r0
 1031 00ee 07F2D443 		addw	r3, r7, #1236
 1032 00f2 1946     		mov	r1, r3
 1033 00f4 A048     		ldr	r0, .L46+40
 1034 00f6 FFF7FEFF 		bl	pushData
 1035              	.LBE3:
 1036 00fa 0FE0     		b	.L38
 1037              	.L37:
 1038              	.LBB4:
 387:notoriOS.c    ****         }else{
 388:notoriOS.c    ****             char c_data_count_sent[20];
 389:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1039              		.loc 1 389 0
 1040 00fc 07F59860 		add	r0, r7, #1216
 1041 0100 9623     		movs	r3, #150
 1042 0102 994A     		ldr	r2, .L46+24
 1043 0104 1421     		movs	r1, #20
 1044 0106 FFF7FEFF 		bl	snprintf
 390:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1045              		.loc 1 390 0
 1046 010a FFF7FEFF 		bl	getTimeStamp
 1047 010e 0246     		mov	r2, r0
 1048 0110 07F59863 		add	r3, r7, #1216
 1049 0114 1946     		mov	r1, r3
 1050 0116 9848     		ldr	r0, .L46+40
 1051 0118 FFF7FEFF 		bl	pushData
 1052              	.L38:
 1053              	.LBE4:
 391:notoriOS.c    ****         }
 392:notoriOS.c    ****         
 393:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 394:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1054              		.loc 1 394 0
 1055 011c FFF7FEFF 		bl	sizeOfDataStackDesired
 1056 0120 0346     		mov	r3, r0
 1057 0122 A7F82E35 		strh	r3, [r7, #1326]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 28


 395:notoriOS.c    ****         char c_data_count_desired[20];
 396:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 397:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1058              		.loc 1 397 0
 1059 0126 B7F82E35 		ldrh	r3, [r7, #1326]
 1060 012a 013B     		subs	r3, r3, #1
 1061 012c 07F59D60 		add	r0, r7, #1256
 1062 0130 8D4A     		ldr	r2, .L46+24
 1063 0132 1421     		movs	r1, #20
 1064 0134 FFF7FEFF 		bl	snprintf
 398:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1065              		.loc 1 398 0
 1066 0138 FFF7FEFF 		bl	getTimeStamp
 1067 013c 0246     		mov	r2, r0
 1068 013e 07F59D63 		add	r3, r7, #1256
 1069 0142 1946     		mov	r1, r3
 1070 0144 8D48     		ldr	r0, .L46+44
 1071 0146 FFF7FEFF 		bl	pushData
 399:notoriOS.c    ****         
 400:notoriOS.c    ****         // Construct HTPP request
 401:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1072              		.loc 1 401 0
 1073 014a 8D49     		ldr	r1, .L46+48
 1074 014c 0020     		movs	r0, #0
 1075 014e FFF7FEFF 		bl	printNotif
 402:notoriOS.c    ****         
 403:notoriOS.c    ****         // Old influx API
 404:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 405:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1076              		.loc 1 405 0
 1077 0152 8C4B     		ldr	r3, .L46+52
 1078 0154 8C4A     		ldr	r2, .L46+56
 1079 0156 8D49     		ldr	r1, .L46+60
 1080 0158 8148     		ldr	r0, .L46+16
 1081 015a FFF7FEFF 		bl	construct_malcom_route
 406:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1082              		.loc 1 406 0
 1083 015e 804A     		ldr	r2, .L46+16
 1084 0160 8B49     		ldr	r1, .L46+64
 1085 0162 0020     		movs	r0, #0
 1086 0164 FFF7FEFF 		bl	printNotif
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         //OLD INFLUX API
 409:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 410:notoriOS.c    ****         construct_malcom_body(http_body);
 1087              		.loc 1 410 0
 1088 0168 7C48     		ldr	r0, .L46+12
 1089 016a FFF7FEFF 		bl	construct_malcom_body
 411:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1090              		.loc 1 411 0
 1091 016e 894B     		ldr	r3, .L46+68
 1092 0170 5B6E     		ldr	r3, [r3, #100]
 1093 0172 894A     		ldr	r2, .L46+72
 1094 0174 0592     		str	r2, [sp, #20]
 1095 0176 0022     		movs	r2, #0
 1096 0178 0492     		str	r2, [sp, #16]
 1097 017a 884A     		ldr	r2, .L46+76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 29


 1098 017c 0392     		str	r2, [sp, #12]
 1099 017e 884A     		ldr	r2, .L46+80
 1100 0180 0292     		str	r2, [sp, #8]
 1101 0182 884A     		ldr	r2, .L46+84
 1102 0184 0192     		str	r2, [sp, #4]
 1103 0186 0093     		str	r3, [sp]
 1104 0188 754B     		ldr	r3, .L46+16
 1105 018a 824A     		ldr	r2, .L46+68
 1106 018c 7349     		ldr	r1, .L46+12
 1107 018e 7248     		ldr	r0, .L46+8
 1108 0190 FFF7FEFF 		bl	construct_generic_HTTP_request
 412:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1109              		.loc 1 412 0
 1110 0194 704A     		ldr	r2, .L46+8
 1111 0196 8449     		ldr	r1, .L46+88
 1112 0198 0020     		movs	r0, #0
 1113 019a FFF7FEFF 		bl	printNotif
 413:notoriOS.c    ****         
 414:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 415:notoriOS.c    ****         // Open port and begin command line sequence
 416:notoriOS.c    ****         char portConfig[200];
 417:notoriOS.c    ****         uint8 status = 0u;
 1114              		.loc 1 417 0
 1115 019e 0023     		movs	r3, #0
 1116 01a0 87F82D35 		strb	r3, [r7, #1325]
 418:notoriOS.c    ****         
 419:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1117              		.loc 1 419 0
 1118 01a4 7B4B     		ldr	r3, .L46+68
 1119 01a6 5A6E     		ldr	r2, [r3, #100]
 1120 01a8 3846     		mov	r0, r7
 1121 01aa 7A4B     		ldr	r3, .L46+68
 1122 01ac 0093     		str	r3, [sp]
 1123 01ae 1346     		mov	r3, r2
 1124 01b0 7E4A     		ldr	r2, .L46+92
 1125 01b2 C821     		movs	r1, #200
 1126 01b4 FFF7FEFF 		bl	snprintf
 420:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1127              		.loc 1 420 0
 1128 01b8 3B46     		mov	r3, r7
 1129 01ba 1A46     		mov	r2, r3
 1130 01bc 7C49     		ldr	r1, .L46+96
 1131 01be 0020     		movs	r0, #0
 1132 01c0 FFF7FEFF 		bl	printNotif
 421:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1133              		.loc 1 421 0
 1134 01c4 3B46     		mov	r3, r7
 1135 01c6 42F21072 		movw	r2, #10000
 1136 01ca 7A49     		ldr	r1, .L46+100
 1137 01cc 1846     		mov	r0, r3
 1138 01ce FFF7FEFF 		bl	at_write_command
 1139 01d2 0346     		mov	r3, r0
 1140 01d4 87F82D35 		strb	r3, [r7, #1325]
 422:notoriOS.c    ****         
 423:notoriOS.c    ****         // create character pointer to chunk through the http_request
 424:notoriOS.c    ****         char *chunk;
 425:notoriOS.c    ****         // Set chunk to start where http_request starts
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 30


 426:notoriOS.c    ****         chunk = http_request;
 1141              		.loc 1 426 0
 1142 01d8 5F4B     		ldr	r3, .L46+8
 1143 01da C7F83435 		str	r3, [r7, #1332]
 427:notoriOS.c    ****         // variable for the number of packets to send
 428:notoriOS.c    ****         int8 packets;
 429:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1144              		.loc 1 429 0
 1145 01de 5E48     		ldr	r0, .L46+8
 1146 01e0 FFF7FEFF 		bl	strlen
 1147 01e4 0246     		mov	r2, r0
 1148 01e6 744B     		ldr	r3, .L46+104
 1149 01e8 A3FB0223 		umull	r2, r3, r3, r2
 1150 01ec 5B09     		lsrs	r3, r3, #5
 1151 01ee 1846     		mov	r0, r3
 1152 01f0 FFF7FEFF 		bl	__aeabi_ui2d
 1153 01f4 4FF00002 		mov	r2, #0
 1154 01f8 704B     		ldr	r3, .L46+108
 1155 01fa FFF7FEFF 		bl	nextafter
 1156 01fe 0346     		mov	r3, r0
 1157 0200 0C46     		mov	r4, r1
 1158 0202 1846     		mov	r0, r3
 1159 0204 2146     		mov	r1, r4
 1160 0206 FFF7FEFF 		bl	ceil
 1161 020a 0346     		mov	r3, r0
 1162 020c 0C46     		mov	r4, r1
 1163 020e 1846     		mov	r0, r3
 1164 0210 2146     		mov	r1, r4
 1165 0212 FFF7FEFF 		bl	__aeabi_d2iz
 1166 0216 0346     		mov	r3, r0
 1167 0218 87F82C35 		strb	r3, [r7, #1324]
 430:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1168              		.loc 1 430 0
 1169 021c 4E48     		ldr	r0, .L46+8
 1170 021e FFF7FEFF 		bl	strlen
 1171 0222 0346     		mov	r3, r0
 1172 0224 1A46     		mov	r2, r3
 1173 0226 6649     		ldr	r1, .L46+112
 1174 0228 0020     		movs	r0, #0
 1175 022a FFF7FEFF 		bl	printNotif
 431:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1176              		.loc 1 431 0
 1177 022e 97F92C35 		ldrsb	r3, [r7, #1324]
 1178 0232 1A46     		mov	r2, r3
 1179 0234 6349     		ldr	r1, .L46+116
 1180 0236 0020     		movs	r0, #0
 1181 0238 FFF7FEFF 		bl	printNotif
 1182              	.LBB5:
 432:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 433:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1183              		.loc 1 433 0
 1184 023c 0023     		movs	r3, #0
 1185 023e 87F83335 		strb	r3, [r7, #1331]
 1186 0242 53E0     		b	.L39
 1187              	.L42:
 1188              	.LBB6:
 434:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 31


 435:notoriOS.c    ****             char http_chunk[1001];
 436:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 437:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 438:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1189              		.loc 1 438 0
 1190 0244 4FF47A72 		mov	r2, #1000
 1191 0248 5F49     		ldr	r1, .L46+120
 1192 024a 6048     		ldr	r0, .L46+124
 1193 024c FFF7FEFF 		bl	at_write_command
 1194 0250 0346     		mov	r3, r0
 1195 0252 87F82D35 		strb	r3, [r7, #1325]
 439:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 440:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1196              		.loc 1 440 0
 1197 0256 07F1C800 		add	r0, r7, #200
 1198 025a D7F83435 		ldr	r3, [r7, #1332]
 1199 025e 544A     		ldr	r2, .L46+96
 1200 0260 4FF4FA71 		mov	r1, #500
 1201 0264 FFF7FEFF 		bl	snprintf
 441:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 442:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1202              		.loc 1 442 0
 1203 0268 07F1C803 		add	r3, r7, #200
 1204 026c 1846     		mov	r0, r3
 1205 026e FFF7FEFF 		bl	strlen
 1206 0272 0346     		mov	r3, r0
 1207 0274 1A46     		mov	r2, r3
 1208 0276 07F1C803 		add	r3, r7, #200
 1209 027a 1344     		add	r3, r3, r2
 1210 027c 5449     		ldr	r1, .L46+128
 1211 027e 1A46     		mov	r2, r3
 1212 0280 0B46     		mov	r3, r1
 1213 0282 1B88     		ldrh	r3, [r3]	@ unaligned
 1214 0284 1380     		strh	r3, [r2]	@ unaligned
 443:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1215              		.loc 1 443 0
 1216 0286 97F93325 		ldrsb	r2, [r7, #1331]
 1217 028a 07F1C803 		add	r3, r7, #200
 1218 028e 5149     		ldr	r1, .L46+132
 1219 0290 0020     		movs	r0, #0
 1220 0292 FFF7FEFF 		bl	printNotif
 444:notoriOS.c    ****             // Send data to server
 445:notoriOS.c    ****             if ((packet+1) != packets){
 1221              		.loc 1 445 0
 1222 0296 97F93335 		ldrsb	r3, [r7, #1331]
 1223 029a 5A1C     		adds	r2, r3, #1
 1224 029c 97F92C35 		ldrsb	r3, [r7, #1324]
 1225 02a0 9A42     		cmp	r2, r3
 1226 02a2 11D0     		beq	.L40
 446:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1227              		.loc 1 446 0
 1228 02a4 07F1C803 		add	r3, r7, #200
 1229 02a8 41F28832 		movw	r2, #5000
 1230 02ac 4149     		ldr	r1, .L46+100
 1231 02ae 1846     		mov	r0, r3
 1232 02b0 FFF7FEFF 		bl	at_write_command
 1233 02b4 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 32


 1234 02b6 87F82D35 		strb	r3, [r7, #1325]
 447:notoriOS.c    ****                 // Move the pointer forward 
 448:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1235              		.loc 1 448 0
 1236 02ba D7F83435 		ldr	r3, [r7, #1332]
 1237 02be 03F2F313 		addw	r3, r3, #499
 1238 02c2 C7F83435 		str	r3, [r7, #1332]
 1239 02c6 0AE0     		b	.L41
 1240              	.L40:
 449:notoriOS.c    ****             }else{
 450:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1241              		.loc 1 450 0
 1242 02c8 07F1C803 		add	r3, r7, #200
 1243 02cc 41F28832 		movw	r2, #5000
 1244 02d0 4149     		ldr	r1, .L46+136
 1245 02d2 1846     		mov	r0, r3
 1246 02d4 FFF7FEFF 		bl	at_write_command
 1247 02d8 0346     		mov	r3, r0
 1248 02da 87F82D35 		strb	r3, [r7, #1325]
 1249              	.L41:
 1250              	.LBE6:
 433:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1251              		.loc 1 433 0 discriminator 2
 1252 02de 97F93335 		ldrsb	r3, [r7, #1331]
 1253 02e2 DBB2     		uxtb	r3, r3
 1254 02e4 0133     		adds	r3, r3, #1
 1255 02e6 DBB2     		uxtb	r3, r3
 1256 02e8 87F83335 		strb	r3, [r7, #1331]
 1257              	.L39:
 433:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1258              		.loc 1 433 0 is_stmt 0 discriminator 1
 1259 02ec 97F93325 		ldrsb	r2, [r7, #1331]
 1260 02f0 97F92C35 		ldrsb	r3, [r7, #1324]
 1261 02f4 9A42     		cmp	r2, r3
 1262 02f6 A5DB     		blt	.L42
 1263              	.LBE5:
 451:notoriOS.c    ****             }
 452:notoriOS.c    ****             
 453:notoriOS.c    ****         }
 454:notoriOS.c    ****         
 455:notoriOS.c    ****         // Read received buffer
 456:notoriOS.c    ****         // A good write will return code "OS-OK"
 457:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 458:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 459:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1264              		.loc 1 459 0 is_stmt 1
 1265 02f8 41F28832 		movw	r2, #5000
 1266 02fc 3749     		ldr	r1, .L46+140
 1267 02fe 3848     		ldr	r0, .L46+144
 1268 0300 FFF7FEFF 		bl	at_write_command
 1269 0304 0346     		mov	r3, r0
 1270 0306 87F82D35 		strb	r3, [r7, #1325]
 460:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 461:notoriOS.c    ****     
 462:notoriOS.c    ****   
 463:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 464:notoriOS.c    ****         if(status == 1u){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 33


 1271              		.loc 1 464 0
 1272 030a 97F82D35 		ldrb	r3, [r7, #1325]	@ zero_extendqisi2
 1273 030e 012B     		cmp	r3, #1
 1274 0310 6CD1     		bne	.L43
 1275              	.LBB7:
 465:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1276              		.loc 1 465 0
 1277 0312 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 466:notoriOS.c    ****             Clear_Data_Stack();
 1278              		.loc 1 466 0
 1279 0316 FFF7FEFF 		bl	Clear_Data_Stack
 467:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1280              		.loc 1 467 0
 1281 031a FFF7FEFF 		bl	getTimeStamp
 1282 031e 0246     		mov	r2, r0
 1283 0320 304B     		ldr	r3, .L46+148
 1284 0322 1B68     		ldr	r3, [r3]
 1285 0324 D31A     		subs	r3, r2, r3
 1286 0326 C7F82835 		str	r3, [r7, #1320]
 468:notoriOS.c    ****             char s_send_time[10];
 469:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1287              		.loc 1 469 0
 1288 032a 07F2B440 		addw	r0, r7, #1204
 1289 032e D7F82835 		ldr	r3, [r7, #1320]
 1290 0332 0D4A     		ldr	r2, .L46+24
 1291 0334 0A21     		movs	r1, #10
 1292 0336 FFF7FEFF 		bl	snprintf
 470:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1293              		.loc 1 470 0
 1294 033a FFF7FEFF 		bl	getTimeStamp
 1295 033e 0246     		mov	r2, r0
 1296 0340 07F2B443 		addw	r3, r7, #1204
 1297 0344 1946     		mov	r1, r3
 1298 0346 2848     		ldr	r0, .L46+152
 1299 0348 FFF7FEFF 		bl	pushData
 1300              	.LBE7:
 1301 034c 52E0     		b	.L44
 1302              	.L47:
 1303 034e 00BF     		.align	2
 1304              	.L46:
 1305 0350 00000000 		.word	try_counter
 1306 0354 C0000000 		.word	.LC7
 1307 0358 00000000 		.word	http_request
 1308 035c 00000000 		.word	http_body
 1309 0360 00000000 		.word	http_route
 1310 0364 00000000 		.word	modem_stats
 1311 0368 3C000000 		.word	.LC2
 1312 036c D0000000 		.word	.LC8
 1313 0370 D8000000 		.word	.LC9
 1314 0374 00000000 		.word	buffer_overflow
 1315 0378 E4000000 		.word	.LC10
 1316 037c F4000000 		.word	.LC11
 1317 0380 08010000 		.word	.LC12
 1318 0384 1C010000 		.word	.LC13
 1319 0388 28000000 		.word	modem_info+40
 1320 038c 48010000 		.word	.LC14
 1321 0390 58010000 		.word	.LC15
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 34


 1322 0394 00000000 		.word	system_settings
 1323 0398 68010000 		.word	.LC16
 1324 039c 6C010000 		.word	.LC17
 1325 03a0 70010000 		.word	.LC18
 1326 03a4 78010000 		.word	.LC19
 1327 03a8 80010000 		.word	.LC20
 1328 03ac 98010000 		.word	.LC21
 1329 03b0 B4010000 		.word	.LC22
 1330 03b4 B8010000 		.word	.LC23
 1331 03b8 D34D6210 		.word	274877907
 1332 03bc 00407F40 		.word	1082081280
 1333 03c0 BC010000 		.word	.LC24
 1334 03c4 D4010000 		.word	.LC25
 1335 03c8 E8010000 		.word	.LC26
 1336 03cc EC010000 		.word	.LC27
 1337 03d0 FC010000 		.word	.LC28
 1338 03d4 00020000 		.word	.LC29
 1339 03d8 10020000 		.word	.LC30
 1340 03dc 18020000 		.word	.LC31
 1341 03e0 20020000 		.word	.LC32
 1342 03e4 00000000 		.word	modem_start_time_stamp
 1343 03e8 34020000 		.word	.LC33
 1344              	.L43:
 471:notoriOS.c    ****         }else{
 472:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1345              		.loc 1 472 0
 1346 03ec 0E49     		ldr	r1, .L48
 1347 03ee 0220     		movs	r0, #2
 1348 03f0 FFF7FEFF 		bl	printNotif
 1349              	.L44:
 473:notoriOS.c    ****         }
 474:notoriOS.c    ****          
 475:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 476:notoriOS.c    ****         long network_time = modem_get_network_time();
 1350              		.loc 1 476 0
 1351 03f4 FFF7FEFF 		bl	modem_get_network_time
 1352 03f8 C7F82405 		str	r0, [r7, #1316]
 477:notoriOS.c    ****         if(network_time != 0){
 1353              		.loc 1 477 0
 1354 03fc D7F82435 		ldr	r3, [r7, #1316]
 1355 0400 002B     		cmp	r3, #0
 1356 0402 03D0     		beq	.L45
 478:notoriOS.c    ****            setTime(network_time);
 1357              		.loc 1 478 0
 1358 0404 D7F82405 		ldr	r0, [r7, #1316]
 1359 0408 FFF7FEFF 		bl	setTime
 1360              	.L45:
 479:notoriOS.c    ****         }
 480:notoriOS.c    ****         
 481:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 482:notoriOS.c    ****         // If not -- keep the statck and try next time
 483:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 484:notoriOS.c    ****         modem_power_down();
 1361              		.loc 1 484 0
 1362 040c FFF7FEFF 		bl	modem_power_down
 485:notoriOS.c    ****         
 486:notoriOS.c    ****         try_counter = 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 35


 1363              		.loc 1 486 0
 1364 0410 064B     		ldr	r3, .L48+4
 1365 0412 0022     		movs	r2, #0
 1366 0414 1A70     		strb	r2, [r3]
 487:notoriOS.c    ****         return 0u;
 1367              		.loc 1 487 0
 1368 0416 0023     		movs	r3, #0
 1369 0418 00E0     		b	.L33
 1370              	.L36:
 1371              	.LBE2:
 488:notoriOS.c    ****     }
 489:notoriOS.c    ****       
 490:notoriOS.c    ****       return 1u; // Not done yet
 1372              		.loc 1 490 0
 1373 041a 0123     		movs	r3, #1
 1374              	.L33:
 491:notoriOS.c    **** }
 1375              		.loc 1 491 0 discriminator 1
 1376 041c 1846     		mov	r0, r3
 1377 041e 07F23C57 		addw	r7, r7, #1340
 1378              		.cfi_def_cfa_offset 12
 1379 0422 BD46     		mov	sp, r7
 1380              		.cfi_def_cfa_register 13
 1381              		@ sp needed
 1382 0424 90BD     		pop	{r4, r7, pc}
 1383              	.L49:
 1384 0426 00BF     		.align	2
 1385              	.L48:
 1386 0428 44020000 		.word	.LC34
 1387 042c 00000000 		.word	try_counter
 1388              		.cfi_endproc
 1389              	.LFE74:
 1390              		.size	syncData, .-syncData
 1391              		.section	.text.configureRemoteParams,"ax",%progbits
 1392              		.align	2
 1393              		.global	configureRemoteParams
 1394              		.thumb
 1395              		.thumb_func
 1396              		.type	configureRemoteParams, %function
 1397              	configureRemoteParams:
 1398              	.LFB75:
 492:notoriOS.c    **** 
 493:notoriOS.c    **** // ==============================================
 494:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 495:notoriOS.c    **** // Returns 0 when done
 496:notoriOS.c    **** // ==============================================
 497:notoriOS.c    **** uint8 configureRemoteParams(){
 1399              		.loc 1 497 0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 8
 1402              		@ frame_needed = 1, uses_anonymous_args = 0
 1403 0000 80B5     		push	{r7, lr}
 1404              		.cfi_def_cfa_offset 8
 1405              		.cfi_offset 7, -8
 1406              		.cfi_offset 14, -4
 1407 0002 82B0     		sub	sp, sp, #8
 1408              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 36


 1409 0004 00AF     		add	r7, sp, #0
 1410              		.cfi_def_cfa_register 7
 498:notoriOS.c    ****     
 499:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1411              		.loc 1 499 0
 1412 0006 FFF7FEFF 		bl	modem_get_state
 1413 000a 0346     		mov	r3, r0
 1414 000c 002B     		cmp	r3, #0
 1415 000e 02D1     		bne	.L51
 500:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 501:notoriOS.c    ****         modem_power_up();
 1416              		.loc 1 501 0
 1417 0010 FFF7FEFF 		bl	modem_power_up
 1418 0014 11E0     		b	.L52
 1419              	.L51:
 502:notoriOS.c    ****             
 503:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1420              		.loc 1 503 0
 1421 0016 FFF7FEFF 		bl	modem_get_state
 1422 001a 0346     		mov	r3, r0
 1423 001c 042B     		cmp	r3, #4
 1424 001e 0CD1     		bne	.L52
 1425              	.LBB8:
 504:notoriOS.c    ****         
 505:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 506:notoriOS.c    ****         
 507:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 508:notoriOS.c    ****         long network_time = modem_get_network_time();
 1426              		.loc 1 508 0
 1427 0020 FFF7FEFF 		bl	modem_get_network_time
 1428 0024 7860     		str	r0, [r7, #4]
 509:notoriOS.c    ****         if(network_time != 0){
 1429              		.loc 1 509 0
 1430 0026 7B68     		ldr	r3, [r7, #4]
 1431 0028 002B     		cmp	r3, #0
 1432 002a 02D0     		beq	.L53
 510:notoriOS.c    ****             setTime(network_time);
 1433              		.loc 1 510 0
 1434 002c 7868     		ldr	r0, [r7, #4]
 1435 002e FFF7FEFF 		bl	setTime
 1436              	.L53:
 511:notoriOS.c    ****         }
 512:notoriOS.c    ****         
 513:notoriOS.c    ****         // Get GPS coordinates
 514:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 515:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 516:notoriOS.c    ****         modem_power_down();
 1437              		.loc 1 516 0
 1438 0032 FFF7FEFF 		bl	modem_power_down
 517:notoriOS.c    ****         return 0u;
 1439              		.loc 1 517 0
 1440 0036 0023     		movs	r3, #0
 1441 0038 00E0     		b	.L54
 1442              	.L52:
 1443              	.LBE8:
 518:notoriOS.c    ****         
 519:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 37


 520:notoriOS.c    ****     
 521:notoriOS.c    ****     return 1u;
 1444              		.loc 1 521 0
 1445 003a 0123     		movs	r3, #1
 1446              	.L54:
 522:notoriOS.c    **** }
 1447              		.loc 1 522 0
 1448 003c 1846     		mov	r0, r3
 1449 003e 0837     		adds	r7, r7, #8
 1450              		.cfi_def_cfa_offset 8
 1451 0040 BD46     		mov	sp, r7
 1452              		.cfi_def_cfa_register 13
 1453              		@ sp needed
 1454 0042 80BD     		pop	{r7, pc}
 1455              		.cfi_endproc
 1456              	.LFE75:
 1457              		.size	configureRemoteParams, .-configureRemoteParams
 1458              		.section	.rodata
 1459 026f 00       		.align	2
 1460              	.LC35:
 1461 0270 256C6400 		.ascii	"%ld\000"
 1462              		.align	2
 1463              	.LC36:
 1464 0274 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1464      6F746978 
 1464      5F646570 
 1464      74683D25 
 1464      7300
 1465 0286 0000     		.align	2
 1466              	.LC37:
 1467 0288 6D617862 		.ascii	"maxbotix_depth\000"
 1467      6F746978 
 1467      5F646570 
 1467      746800
 1468 0297 00       		.align	2
 1469              	.LC38:
 1470 0298 612B00   		.ascii	"a+\000"
 1471 029b 00       		.align	2
 1472              	.LC39:
 1473 029c 206D6178 		.ascii	" maxbotix_depth: \000"
 1473      626F7469 
 1473      785F6465 
 1473      7074683A 
 1473      2000
 1474 02ae 0000     		.align	2
 1475              	.LC40:
 1476 02b0 2000     		.ascii	" \000"
 1477 02b2 0000     		.align	2
 1478              	.LC41:
 1479 02b4 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1479      64206E6F 
 1479      74206765 
 1479      74207661 
 1479      6C696420 
 1480              		.global	__aeabi_f2d
 1481              		.align	2
 1482              	.LC42:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 38


 1483 02e0 252E3266 		.ascii	"%.2f\000"
 1483      00
 1484 02e5 000000   		.align	2
 1485              	.LC43:
 1486 02e8 765F6261 		.ascii	"v_bat=%s\000"
 1486      743D2573 
 1486      00
 1487 02f1 000000   		.align	2
 1488              	.LC44:
 1489 02f4 765F6261 		.ascii	"v_bat\000"
 1489      7400
 1490 02fa 0000     		.align	2
 1491              	.LC45:
 1492 02fc 20766261 		.ascii	" vbat: \000"
 1492      743A2000 
 1493              		.align	2
 1494              	.LC46:
 1495 0304 70726573 		.ascii	"pressure_current=%s\000"
 1495      73757265 
 1495      5F637572 
 1495      72656E74 
 1495      3D257300 
 1496              		.align	2
 1497              	.LC47:
 1498 0318 70726573 		.ascii	"pressure_current\000"
 1498      73757265 
 1498      5F637572 
 1498      72656E74 
 1498      00
 1499 0329 000000   		.align	2
 1500              	.LC48:
 1501 032c 20707265 		.ascii	" pressure_current: \000"
 1501      73737572 
 1501      655F6375 
 1501      7272656E 
 1501      743A2000 
 1502              		.align	2
 1503              	.LC49:
 1504 0340 70726573 		.ascii	"pressure_depth=%s\000"
 1504      73757265 
 1504      5F646570 
 1504      74683D25 
 1504      7300
 1505 0352 0000     		.align	2
 1506              	.LC50:
 1507 0354 70726573 		.ascii	"pressure_depth\000"
 1507      73757265 
 1507      5F646570 
 1507      746800
 1508 0363 00       		.align	2
 1509              	.LC51:
 1510 0364 20707265 		.ascii	" pressure_depth: \000"
 1510      73737572 
 1510      655F6465 
 1510      7074683A 
 1510      2000
 1511 0376 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 39


 1512              	.LC52:
 1513 0378 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1513      64206E6F 
 1513      74206765 
 1513      74207661 
 1513      6C696420 
 1514 039f 00       		.align	2
 1515              	.LC53:
 1516 03a0 256600   		.ascii	"%f\000"
 1517 03a3 00       		.align	2
 1518              	.LC54:
 1519 03a4 70757368 		.ascii	"pushed: dissolved_oxygen_mg_L=%s\000"
 1519      65643A20 
 1519      64697373 
 1519      6F6C7665 
 1519      645F6F78 
 1520 03c5 000000   		.align	2
 1521              	.LC55:
 1522 03c8 64697373 		.ascii	"dissolved_oxygen_mg_L\000"
 1522      6F6C7665 
 1522      645F6F78 
 1522      7967656E 
 1522      5F6D675F 
 1523 03de 0000     		.align	2
 1524              	.LC56:
 1525 03e0 20646973 		.ascii	" dissolved_oxygen_mg_L: \000"
 1525      736F6C76 
 1525      65645F6F 
 1525      78796765 
 1525      6E5F6D67 
 1526 03f9 000000   		.align	2
 1527              	.LC57:
 1528 03fc 436F756C 		.ascii	"Could not get valid readings from DO sensor.\000"
 1528      64206E6F 
 1528      74206765 
 1528      74207661 
 1528      6C696420 
 1529              		.section	.text.makeMeasurements,"ax",%progbits
 1530              		.align	2
 1531              		.global	makeMeasurements
 1532              		.thumb
 1533              		.thumb_func
 1534              		.type	makeMeasurements, %function
 1535              	makeMeasurements:
 1536              	.LFB76:
 523:notoriOS.c    **** 
 524:notoriOS.c    **** 
 525:notoriOS.c    **** // ==============================================
 526:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 527:notoriOS.c    **** // Returns 0 when finished
 528:notoriOS.c    **** // ==============================================
 529:notoriOS.c    **** uint8 makeMeasurements(){
 1537              		.loc 1 529 0
 1538              		.cfi_startproc
 1539              		@ args = 0, pretend = 0, frame = 176
 1540              		@ frame_needed = 1, uses_anonymous_args = 0
 1541 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 40


 1542              		.cfi_def_cfa_offset 12
 1543              		.cfi_offset 4, -12
 1544              		.cfi_offset 7, -8
 1545              		.cfi_offset 14, -4
 1546 0002 AFB0     		sub	sp, sp, #188
 1547              		.cfi_def_cfa_offset 200
 1548 0004 02AF     		add	r7, sp, #8
 1549              		.cfi_def_cfa 7, 192
 530:notoriOS.c    ****     
 531:notoriOS.c    ****     // Get clock time and save to timeStamp
 532:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1550              		.loc 1 532 0
 1551 0006 FFF7FEFF 		bl	getTimeStamp
 1552 000a C7F8AC00 		str	r0, [r7, #172]
 533:notoriOS.c    ****     char c_timeStamp[32];
 534:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1553              		.loc 1 534 0
 1554 000e 07F18800 		add	r0, r7, #136
 1555 0012 D7F8AC30 		ldr	r3, [r7, #172]
 1556 0016 AA4A     		ldr	r2, .L66
 1557 0018 2021     		movs	r1, #32
 1558 001a FFF7FEFF 		bl	snprintf
 535:notoriOS.c    ****     
 536:notoriOS.c    ****     // Holds string for value that will be written 
 537:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 538:notoriOS.c    ****     
 539:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 540:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1559              		.loc 1 540 0
 1560 001e A94B     		ldr	r3, .L66+4
 1561 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1562 0022 002B     		cmp	r3, #0
 1563 0024 3CD1     		bne	.L56
 1564              	.LBB9:
 541:notoriOS.c    ****         
 542:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 543:notoriOS.c    ****         level_sensor_t m_level_sensor;
 544:notoriOS.c    ****         
 545:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 546:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1565              		.loc 1 546 0
 1566 0026 07F14403 		add	r3, r7, #68
 1567 002a 1846     		mov	r0, r3
 1568 002c FFF7FEFF 		bl	level_sensor_take_reading
 547:notoriOS.c    ****     
 548:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 549:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1569              		.loc 1 549 0
 1570 0030 97F85C30 		ldrb	r3, [r7, #92]	@ zero_extendqisi2
 1571 0034 002B     		cmp	r3, #0
 1572 0036 2FD0     		beq	.L57
 550:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1573              		.loc 1 550 0
 1574 0038 B7F95A30 		ldrsh	r3, [r7, #90]
 1575 003c 07F17400 		add	r0, r7, #116
 1576 0040 A14A     		ldr	r2, .L66+8
 1577 0042 1421     		movs	r1, #20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 41


 1578 0044 FFF7FEFF 		bl	snprintf
 551:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1579              		.loc 1 551 0
 1580 0048 07F17403 		add	r3, r7, #116
 1581 004c 1A46     		mov	r2, r3
 1582 004e 9F49     		ldr	r1, .L66+12
 1583 0050 0020     		movs	r0, #0
 1584 0052 FFF7FEFF 		bl	printNotif
 552:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1585              		.loc 1 552 0
 1586 0056 07F17403 		add	r3, r7, #116
 1587 005a D7F8AC20 		ldr	r2, [r7, #172]
 1588 005e 1946     		mov	r1, r3
 1589 0060 9B48     		ldr	r0, .L66+16
 1590 0062 FFF7FEFF 		bl	pushData
 553:notoriOS.c    ****             
 554:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 555:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1591              		.loc 1 555 0
 1592 0066 07F18803 		add	r3, r7, #136
 1593 006a 1A46     		mov	r2, r3
 1594 006c 9949     		ldr	r1, .L66+20
 1595 006e 9A48     		ldr	r0, .L66+24
 1596 0070 FFF7FEFF 		bl	SD_write
 556:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1597              		.loc 1 556 0
 1598 0074 994A     		ldr	r2, .L66+28
 1599 0076 9749     		ldr	r1, .L66+20
 1600 0078 9748     		ldr	r0, .L66+24
 1601 007a FFF7FEFF 		bl	SD_write
 557:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1602              		.loc 1 557 0
 1603 007e 07F17403 		add	r3, r7, #116
 1604 0082 1A46     		mov	r2, r3
 1605 0084 9349     		ldr	r1, .L66+20
 1606 0086 9448     		ldr	r0, .L66+24
 1607 0088 FFF7FEFF 		bl	SD_write
 558:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1608              		.loc 1 558 0
 1609 008c 944A     		ldr	r2, .L66+32
 1610 008e 9149     		ldr	r1, .L66+20
 1611 0090 9148     		ldr	r0, .L66+24
 1612 0092 FFF7FEFF 		bl	SD_write
 1613 0096 03E0     		b	.L56
 1614              	.L57:
 559:notoriOS.c    ****         }else{
 560:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1615              		.loc 1 560 0
 1616 0098 9249     		ldr	r1, .L66+36
 1617 009a 0220     		movs	r0, #2
 1618 009c FFF7FEFF 		bl	printNotif
 1619              	.L56:
 1620              	.LBE9:
 561:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 562:notoriOS.c    ****         }
 563:notoriOS.c    ****     }
 564:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 42


 565:notoriOS.c    ****     
 566:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 567:notoriOS.c    ****     voltage_t m_voltage;
 568:notoriOS.c    ****     
 569:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 570:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1621              		.loc 1 570 0
 1622 00a0 07F16003 		add	r3, r7, #96
 1623 00a4 1846     		mov	r0, r3
 1624 00a6 FFF7FEFF 		bl	voltage_take_readings
 571:notoriOS.c    ****     
 572:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 573:notoriOS.c    ****     if(m_voltage.valid){
 1625              		.loc 1 573 0
 1626 00aa 97F87030 		ldrb	r3, [r7, #112]	@ zero_extendqisi2
 1627 00ae 002B     		cmp	r3, #0
 1628 00b0 00F0B380 		beq	.L59
 574:notoriOS.c    ****         // battery voltage data
 575:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1629              		.loc 1 575 0
 1630 00b4 3B6E     		ldr	r3, [r7, #96]	@ float
 1631 00b6 1846     		mov	r0, r3
 1632 00b8 FFF7FEFF 		bl	__aeabi_f2d
 1633 00bc 0346     		mov	r3, r0
 1634 00be 0C46     		mov	r4, r1
 1635 00c0 07F17400 		add	r0, r7, #116
 1636 00c4 CDE90034 		strd	r3, [sp]
 1637 00c8 874A     		ldr	r2, .L66+40
 1638 00ca 1421     		movs	r1, #20
 1639 00cc FFF7FEFF 		bl	snprintf
 576:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1640              		.loc 1 576 0
 1641 00d0 07F17403 		add	r3, r7, #116
 1642 00d4 1A46     		mov	r2, r3
 1643 00d6 8549     		ldr	r1, .L66+44
 1644 00d8 0020     		movs	r0, #0
 1645 00da FFF7FEFF 		bl	printNotif
 577:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1646              		.loc 1 577 0
 1647 00de 07F17403 		add	r3, r7, #116
 1648 00e2 D7F8AC20 		ldr	r2, [r7, #172]
 1649 00e6 1946     		mov	r1, r3
 1650 00e8 8148     		ldr	r0, .L66+48
 1651 00ea FFF7FEFF 		bl	pushData
 578:notoriOS.c    ****         
 579:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 580:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1652              		.loc 1 580 0
 1653 00ee 7C4A     		ldr	r2, .L66+32
 1654 00f0 7849     		ldr	r1, .L66+20
 1655 00f2 7948     		ldr	r0, .L66+24
 1656 00f4 FFF7FEFF 		bl	SD_write
 581:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1657              		.loc 1 581 0
 1658 00f8 07F18803 		add	r3, r7, #136
 1659 00fc 1A46     		mov	r2, r3
 1660 00fe 7549     		ldr	r1, .L66+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 43


 1661 0100 7548     		ldr	r0, .L66+24
 1662 0102 FFF7FEFF 		bl	SD_write
 582:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1663              		.loc 1 582 0
 1664 0106 7B4A     		ldr	r2, .L66+52
 1665 0108 7249     		ldr	r1, .L66+20
 1666 010a 7348     		ldr	r0, .L66+24
 1667 010c FFF7FEFF 		bl	SD_write
 583:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1668              		.loc 1 583 0
 1669 0110 07F17403 		add	r3, r7, #116
 1670 0114 1A46     		mov	r2, r3
 1671 0116 6F49     		ldr	r1, .L66+20
 1672 0118 6F48     		ldr	r0, .L66+24
 1673 011a FFF7FEFF 		bl	SD_write
 584:notoriOS.c    ****         
 585:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 586:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1674              		.loc 1 586 0
 1675 011e 694B     		ldr	r3, .L66+4
 1676 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1677 0122 012B     		cmp	r3, #1
 1678 0124 7DD1     		bne	.L61
 1679              	.LBB10:
 587:notoriOS.c    ****             
 588:notoriOS.c    ****             // pressure transducer voltage (V) data
 589:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 590:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 591:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 592:notoriOS.c    ****             
 593:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 594:notoriOS.c    ****             pressure_t m_pressure;
 595:notoriOS.c    ****             
 596:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 597:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1680              		.loc 1 597 0
 1681 0126 07F13404 		add	r4, r7, #52
 1682 012a 6A46     		mov	r2, sp
 1683 012c 07F16C03 		add	r3, r7, #108
 1684 0130 93E80300 		ldmia	r3, {r0, r1}
 1685 0134 82E80300 		stmia	r2, {r0, r1}
 1686 0138 07F16003 		add	r3, r7, #96
 1687 013c 0ECB     		ldmia	r3, {r1, r2, r3}
 1688 013e 2046     		mov	r0, r4
 1689 0140 FFF7FEFF 		bl	pressure_calculations
 598:notoriOS.c    ****             
 599:notoriOS.c    ****             // pressure transducer current (mA) data
 600:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1690              		.loc 1 600 0
 1691 0144 FB6B     		ldr	r3, [r7, #60]	@ float
 1692 0146 1846     		mov	r0, r3
 1693 0148 FFF7FEFF 		bl	__aeabi_f2d
 1694 014c 0346     		mov	r3, r0
 1695 014e 0C46     		mov	r4, r1
 1696 0150 07F17400 		add	r0, r7, #116
 1697 0154 CDE90034 		strd	r3, [sp]
 1698 0158 634A     		ldr	r2, .L66+40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 44


 1699 015a 1421     		movs	r1, #20
 1700 015c FFF7FEFF 		bl	snprintf
 601:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1701              		.loc 1 601 0
 1702 0160 07F17403 		add	r3, r7, #116
 1703 0164 1A46     		mov	r2, r3
 1704 0166 6449     		ldr	r1, .L66+56
 1705 0168 0020     		movs	r0, #0
 1706 016a FFF7FEFF 		bl	printNotif
 602:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1707              		.loc 1 602 0
 1708 016e 07F17403 		add	r3, r7, #116
 1709 0172 D7F8AC20 		ldr	r2, [r7, #172]
 1710 0176 1946     		mov	r1, r3
 1711 0178 6048     		ldr	r0, .L66+60
 1712 017a FFF7FEFF 		bl	pushData
 603:notoriOS.c    ****             
 604:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 605:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1713              		.loc 1 605 0
 1714 017e 584A     		ldr	r2, .L66+32
 1715 0180 5449     		ldr	r1, .L66+20
 1716 0182 5548     		ldr	r0, .L66+24
 1717 0184 FFF7FEFF 		bl	SD_write
 606:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1718              		.loc 1 606 0
 1719 0188 07F18803 		add	r3, r7, #136
 1720 018c 1A46     		mov	r2, r3
 1721 018e 5149     		ldr	r1, .L66+20
 1722 0190 5148     		ldr	r0, .L66+24
 1723 0192 FFF7FEFF 		bl	SD_write
 607:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1724              		.loc 1 607 0
 1725 0196 5A4A     		ldr	r2, .L66+64
 1726 0198 4E49     		ldr	r1, .L66+20
 1727 019a 4F48     		ldr	r0, .L66+24
 1728 019c FFF7FEFF 		bl	SD_write
 608:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1729              		.loc 1 608 0
 1730 01a0 07F17403 		add	r3, r7, #116
 1731 01a4 1A46     		mov	r2, r3
 1732 01a6 4B49     		ldr	r1, .L66+20
 1733 01a8 4B48     		ldr	r0, .L66+24
 1734 01aa FFF7FEFF 		bl	SD_write
 609:notoriOS.c    ****             
 610:notoriOS.c    ****             // pressure transducer depth (ft) data
 611:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1735              		.loc 1 611 0
 1736 01ae 3B6C     		ldr	r3, [r7, #64]	@ float
 1737 01b0 1846     		mov	r0, r3
 1738 01b2 FFF7FEFF 		bl	__aeabi_f2d
 1739 01b6 0346     		mov	r3, r0
 1740 01b8 0C46     		mov	r4, r1
 1741 01ba 07F17400 		add	r0, r7, #116
 1742 01be CDE90034 		strd	r3, [sp]
 1743 01c2 494A     		ldr	r2, .L66+40
 1744 01c4 1421     		movs	r1, #20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 45


 1745 01c6 FFF7FEFF 		bl	snprintf
 612:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1746              		.loc 1 612 0
 1747 01ca 07F17403 		add	r3, r7, #116
 1748 01ce 1A46     		mov	r2, r3
 1749 01d0 4C49     		ldr	r1, .L66+68
 1750 01d2 0020     		movs	r0, #0
 1751 01d4 FFF7FEFF 		bl	printNotif
 613:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1752              		.loc 1 613 0
 1753 01d8 07F17403 		add	r3, r7, #116
 1754 01dc D7F8AC20 		ldr	r2, [r7, #172]
 1755 01e0 1946     		mov	r1, r3
 1756 01e2 4948     		ldr	r0, .L66+72
 1757 01e4 FFF7FEFF 		bl	pushData
 614:notoriOS.c    ****             
 615:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 616:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1758              		.loc 1 616 0
 1759 01e8 3D4A     		ldr	r2, .L66+32
 1760 01ea 3A49     		ldr	r1, .L66+20
 1761 01ec 3A48     		ldr	r0, .L66+24
 1762 01ee FFF7FEFF 		bl	SD_write
 617:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1763              		.loc 1 617 0
 1764 01f2 07F18803 		add	r3, r7, #136
 1765 01f6 1A46     		mov	r2, r3
 1766 01f8 3649     		ldr	r1, .L66+20
 1767 01fa 3748     		ldr	r0, .L66+24
 1768 01fc FFF7FEFF 		bl	SD_write
 618:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1769              		.loc 1 618 0
 1770 0200 424A     		ldr	r2, .L66+76
 1771 0202 3449     		ldr	r1, .L66+20
 1772 0204 3448     		ldr	r0, .L66+24
 1773 0206 FFF7FEFF 		bl	SD_write
 619:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1774              		.loc 1 619 0
 1775 020a 07F17403 		add	r3, r7, #116
 1776 020e 1A46     		mov	r2, r3
 1777 0210 3049     		ldr	r1, .L66+20
 1778 0212 3148     		ldr	r0, .L66+24
 1779 0214 FFF7FEFF 		bl	SD_write
 1780 0218 03E0     		b	.L61
 1781              	.L59:
 1782              	.LBE10:
 620:notoriOS.c    ****         }    
 621:notoriOS.c    ****     }else{
 622:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1783              		.loc 1 622 0
 1784 021a 3D49     		ldr	r1, .L66+80
 1785 021c 0220     		movs	r0, #2
 1786 021e FFF7FEFF 		bl	printNotif
 1787              	.L61:
 623:notoriOS.c    ****     }
 624:notoriOS.c    ****     
 625:notoriOS.c    ****         // If node type is dissolved oxygen, take DO measuremetns
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 46


 626:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DO){
 1788              		.loc 1 626 0
 1789 0222 284B     		ldr	r3, .L66+4
 1790 0224 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1791 0226 052B     		cmp	r3, #5
 1792 0228 44D1     		bne	.L62
 1793              	.LBB11:
 627:notoriOS.c    ****         
 628:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 629:notoriOS.c    ****         DO_sensor_t m_DO_sensor;
 630:notoriOS.c    ****         
 631:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 632:notoriOS.c    ****         m_DO_sensor = DO_read();
 1794              		.loc 1 632 0
 1795 022a 3B1D     		adds	r3, r7, #4
 1796 022c 1846     		mov	r0, r3
 1797 022e FFF7FEFF 		bl	DO_read
 633:notoriOS.c    ****     
 634:notoriOS.c    ****         // TODO: data validity check for DO readings
 635:notoriOS.c    ****         // for now
 636:notoriOS.c    ****         bool DO_valid = 1;
 1798              		.loc 1 636 0
 1799 0232 0123     		movs	r3, #1
 1800 0234 87F8AB30 		strb	r3, [r7, #171]
 637:notoriOS.c    ****         
 638:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 639:notoriOS.c    ****         if(DO_valid){
 1801              		.loc 1 639 0
 1802 0238 97F8AB30 		ldrb	r3, [r7, #171]	@ zero_extendqisi2
 1803 023c 002B     		cmp	r3, #0
 1804 023e 35D0     		beq	.L63
 640:notoriOS.c    ****             snprintf(value,sizeof(value),"%f",m_DO_sensor.do_reading);
 1805              		.loc 1 640 0
 1806 0240 3B6B     		ldr	r3, [r7, #48]	@ float
 1807 0242 1846     		mov	r0, r3
 1808 0244 FFF7FEFF 		bl	__aeabi_f2d
 1809 0248 0346     		mov	r3, r0
 1810 024a 0C46     		mov	r4, r1
 1811 024c 07F17400 		add	r0, r7, #116
 1812 0250 CDE90034 		strd	r3, [sp]
 1813 0254 2F4A     		ldr	r2, .L66+84
 1814 0256 1421     		movs	r1, #20
 1815 0258 FFF7FEFF 		bl	snprintf
 641:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pushed: dissolved_oxygen_mg_L=%s",value);
 1816              		.loc 1 641 0
 1817 025c 07F17403 		add	r3, r7, #116
 1818 0260 1A46     		mov	r2, r3
 1819 0262 2D49     		ldr	r1, .L66+88
 1820 0264 0020     		movs	r0, #0
 1821 0266 FFF7FEFF 		bl	printNotif
 642:notoriOS.c    ****             pushData("dissolved_oxygen_mg_L",value,timeStamp);
 1822              		.loc 1 642 0
 1823 026a 07F17403 		add	r3, r7, #116
 1824 026e D7F8AC20 		ldr	r2, [r7, #172]
 1825 0272 1946     		mov	r1, r3
 1826 0274 2948     		ldr	r0, .L66+92
 1827 0276 FFF7FEFF 		bl	pushData
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 47


 643:notoriOS.c    ****             
 644:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 645:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1828              		.loc 1 645 0
 1829 027a 07F18803 		add	r3, r7, #136
 1830 027e 1A46     		mov	r2, r3
 1831 0280 1449     		ldr	r1, .L66+20
 1832 0282 1548     		ldr	r0, .L66+24
 1833 0284 FFF7FEFF 		bl	SD_write
 646:notoriOS.c    ****             SD_write(Data_fileName, "a+", " dissolved_oxygen_mg_L: ");
 1834              		.loc 1 646 0
 1835 0288 254A     		ldr	r2, .L66+96
 1836 028a 1249     		ldr	r1, .L66+20
 1837 028c 1248     		ldr	r0, .L66+24
 1838 028e FFF7FEFF 		bl	SD_write
 647:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1839              		.loc 1 647 0
 1840 0292 07F17403 		add	r3, r7, #116
 1841 0296 1A46     		mov	r2, r3
 1842 0298 0E49     		ldr	r1, .L66+20
 1843 029a 0F48     		ldr	r0, .L66+24
 1844 029c FFF7FEFF 		bl	SD_write
 648:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1845              		.loc 1 648 0
 1846 02a0 0F4A     		ldr	r2, .L66+32
 1847 02a2 0C49     		ldr	r1, .L66+20
 1848 02a4 0C48     		ldr	r0, .L66+24
 1849 02a6 FFF7FEFF 		bl	SD_write
 1850 02aa 03E0     		b	.L62
 1851              	.L63:
 649:notoriOS.c    ****         }else{
 650:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from DO sensor.");
 1852              		.loc 1 650 0
 1853 02ac 1D49     		ldr	r1, .L66+100
 1854 02ae 0220     		movs	r0, #2
 1855 02b0 FFF7FEFF 		bl	printNotif
 1856              	.L62:
 1857              	.LBE11:
 651:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 652:notoriOS.c    ****         }
 653:notoriOS.c    ****     }
 654:notoriOS.c    ****     
 655:notoriOS.c    ****     return 0u;
 1858              		.loc 1 655 0
 1859 02b4 0023     		movs	r3, #0
 656:notoriOS.c    **** }
 1860              		.loc 1 656 0
 1861 02b6 1846     		mov	r0, r3
 1862 02b8 B437     		adds	r7, r7, #180
 1863              		.cfi_def_cfa_offset 12
 1864 02ba BD46     		mov	sp, r7
 1865              		.cfi_def_cfa_register 13
 1866              		@ sp needed
 1867 02bc 90BD     		pop	{r4, r7, pc}
 1868              	.L67:
 1869 02be 00BF     		.align	2
 1870              	.L66:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 48


 1871 02c0 70020000 		.word	.LC35
 1872 02c4 00000000 		.word	updatable_parameters
 1873 02c8 3C000000 		.word	.LC2
 1874 02cc 74020000 		.word	.LC36
 1875 02d0 88020000 		.word	.LC37
 1876 02d4 98020000 		.word	.LC38
 1877 02d8 00000000 		.word	Data_fileName
 1878 02dc 9C020000 		.word	.LC39
 1879 02e0 B0020000 		.word	.LC40
 1880 02e4 B4020000 		.word	.LC41
 1881 02e8 E0020000 		.word	.LC42
 1882 02ec E8020000 		.word	.LC43
 1883 02f0 F4020000 		.word	.LC44
 1884 02f4 FC020000 		.word	.LC45
 1885 02f8 04030000 		.word	.LC46
 1886 02fc 18030000 		.word	.LC47
 1887 0300 2C030000 		.word	.LC48
 1888 0304 40030000 		.word	.LC49
 1889 0308 54030000 		.word	.LC50
 1890 030c 64030000 		.word	.LC51
 1891 0310 78030000 		.word	.LC52
 1892 0314 A0030000 		.word	.LC53
 1893 0318 A4030000 		.word	.LC54
 1894 031c C8030000 		.word	.LC55
 1895 0320 E0030000 		.word	.LC56
 1896 0324 FC030000 		.word	.LC57
 1897              		.cfi_endproc
 1898              	.LFE76:
 1899              		.size	makeMeasurements, .-makeMeasurements
 1900              		.section	.rodata
 1901 0429 000000   		.align	2
 1902              	.LC58:
 1903 042c 4572726F 		.ascii	"Error setting system time.\000"
 1903      72207365 
 1903      7474696E 
 1903      67207379 
 1903      7374656D 
 1904              		.section	.text.setTime,"ax",%progbits
 1905              		.align	2
 1906              		.global	setTime
 1907              		.thumb
 1908              		.thumb_func
 1909              		.type	setTime, %function
 1910              	setTime:
 1911              	.LFB77:
 657:notoriOS.c    **** 
 658:notoriOS.c    **** // ==============================================
 659:notoriOS.c    **** // Set the system time
 660:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 661:notoriOS.c    **** // ==============================================
 662:notoriOS.c    **** uint8 setTime(long timeStamp){
 1912              		.loc 1 662 0
 1913              		.cfi_startproc
 1914              		@ args = 0, pretend = 0, frame = 24
 1915              		@ frame_needed = 1, uses_anonymous_args = 0
 1916 0000 80B5     		push	{r7, lr}
 1917              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 49


 1918              		.cfi_offset 7, -8
 1919              		.cfi_offset 14, -4
 1920 0002 86B0     		sub	sp, sp, #24
 1921              		.cfi_def_cfa_offset 32
 1922 0004 00AF     		add	r7, sp, #0
 1923              		.cfi_def_cfa_register 7
 1924 0006 7860     		str	r0, [r7, #4]
 663:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 664:notoriOS.c    ****     if(timeStamp <=0){
 1925              		.loc 1 664 0
 1926 0008 7B68     		ldr	r3, [r7, #4]
 1927 000a 002B     		cmp	r3, #0
 1928 000c 05DC     		bgt	.L69
 665:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1929              		.loc 1 665 0
 1930 000e 1849     		ldr	r1, .L71
 1931 0010 0220     		movs	r0, #2
 1932 0012 FFF7FEFF 		bl	printNotif
 666:notoriOS.c    ****         return 0;  
 1933              		.loc 1 666 0
 1934 0016 0023     		movs	r3, #0
 1935 0018 25E0     		b	.L70
 1936              	.L69:
 667:notoriOS.c    ****     }
 668:notoriOS.c    ****     // Create a new pointer t of data structure tm
 669:notoriOS.c    ****     struct tm * t;
 670:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 671:notoriOS.c    ****     t = gmtime(&timeStamp);
 1937              		.loc 1 671 0
 1938 001a 3B1D     		adds	r3, r7, #4
 1939 001c 1846     		mov	r0, r3
 1940 001e FFF7FEFF 		bl	gmtime
 1941 0022 7861     		str	r0, [r7, #20]
 672:notoriOS.c    ****     
 673:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 674:notoriOS.c    ****     RTC_TIME_DATE localTime;
 675:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1942              		.loc 1 675 0
 1943 0024 7B69     		ldr	r3, [r7, #20]
 1944 0026 1B68     		ldr	r3, [r3]
 1945 0028 DBB2     		uxtb	r3, r3
 1946 002a 3B72     		strb	r3, [r7, #8]
 676:notoriOS.c    ****     localTime.Min = t->tm_min;
 1947              		.loc 1 676 0
 1948 002c 7B69     		ldr	r3, [r7, #20]
 1949 002e 5B68     		ldr	r3, [r3, #4]
 1950 0030 DBB2     		uxtb	r3, r3
 1951 0032 7B72     		strb	r3, [r7, #9]
 677:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1952              		.loc 1 677 0
 1953 0034 7B69     		ldr	r3, [r7, #20]
 1954 0036 9B68     		ldr	r3, [r3, #8]
 1955 0038 DBB2     		uxtb	r3, r3
 1956 003a BB72     		strb	r3, [r7, #10]
 678:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1957              		.loc 1 678 0
 1958 003c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 50


 1959 003e 5B69     		ldr	r3, [r3, #20]
 1960 0040 9BB2     		uxth	r3, r3
 1961 0042 03F26C73 		addw	r3, r3, #1900
 1962 0046 9BB2     		uxth	r3, r3
 1963 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 679:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1964              		.loc 1 679 0
 1965 004a 7B69     		ldr	r3, [r7, #20]
 1966 004c 1B69     		ldr	r3, [r3, #16]
 1967 004e DBB2     		uxtb	r3, r3
 1968 0050 3B74     		strb	r3, [r7, #16]
 680:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1969              		.loc 1 680 0
 1970 0052 7B69     		ldr	r3, [r7, #20]
 1971 0054 DB68     		ldr	r3, [r3, #12]
 1972 0056 DBB2     		uxtb	r3, r3
 1973 0058 3B73     		strb	r3, [r7, #12]
 681:notoriOS.c    **** 
 682:notoriOS.c    ****     // Writes time and date values as current time and date.
 683:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1974              		.loc 1 683 0
 1975 005a 07F10803 		add	r3, r7, #8
 1976 005e 1846     		mov	r0, r3
 1977 0060 FFF7FEFF 		bl	RTC_WriteTime
 684:notoriOS.c    ****     
 685:notoriOS.c    ****     // Return 1 when the system time was set properly.
 686:notoriOS.c    ****     return 1;
 1978              		.loc 1 686 0
 1979 0064 0123     		movs	r3, #1
 1980              	.L70:
 687:notoriOS.c    **** }
 1981              		.loc 1 687 0
 1982 0066 1846     		mov	r0, r3
 1983 0068 1837     		adds	r7, r7, #24
 1984              		.cfi_def_cfa_offset 8
 1985 006a BD46     		mov	sp, r7
 1986              		.cfi_def_cfa_register 13
 1987              		@ sp needed
 1988 006c 80BD     		pop	{r7, pc}
 1989              	.L72:
 1990 006e 00BF     		.align	2
 1991              	.L71:
 1992 0070 2C040000 		.word	.LC58
 1993              		.cfi_endproc
 1994              	.LFE77:
 1995              		.size	setTime, .-setTime
 1996              		.section	.rodata
 1997 0447 00       		.align	2
 1998              	.LC59:
 1999 0448 75706772 		.ascii	"upgrade.hex\000"
 1999      6164652E 
 1999      68657800 
 2000              		.section	.text.upgraded,"ax",%progbits
 2001              		.align	2
 2002              		.global	upgraded
 2003              		.thumb
 2004              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 51


 2005              		.type	upgraded, %function
 2006              	upgraded:
 2007              	.LFB78:
 688:notoriOS.c    **** 
 689:notoriOS.c    **** //downloads and stores files on SD card
 690:notoriOS.c    **** 
 691:notoriOS.c    **** 
 692:notoriOS.c    **** 
 693:notoriOS.c    **** // ==============================================
 694:notoriOS.c    **** // Will they love it, will they hate it
 695:notoriOS.c    **** // Never fade it, I evade it
 696:notoriOS.c    **** // Cause I never really want to complicate it
 697:notoriOS.c    **** //      - Logic, Upgraded (2015)
 698:notoriOS.c    **** //
 699:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 700:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 701:notoriOS.c    **** // ==============================================
 702:notoriOS.c    **** 
 703:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2008              		.loc 1 703 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 232
 2011              		@ frame_needed = 1, uses_anonymous_args = 0
 2012 0000 80B5     		push	{r7, lr}
 2013              		.cfi_def_cfa_offset 8
 2014              		.cfi_offset 7, -8
 2015              		.cfi_offset 14, -4
 2016 0002 C0B0     		sub	sp, sp, #256
 2017              		.cfi_def_cfa_offset 264
 2018 0004 06AF     		add	r7, sp, #24
 2019              		.cfi_def_cfa 7, 240
 2020 0006 F860     		str	r0, [r7, #12]
 2021 0008 B960     		str	r1, [r7, #8]
 2022 000a 7A60     		str	r2, [r7, #4]
 704:notoriOS.c    ****     
 705:notoriOS.c    ****     uint8 upgrade_status = 0;
 2023              		.loc 1 705 0
 2024 000c 0023     		movs	r3, #0
 2025 000e 87F8E730 		strb	r3, [r7, #231]
 706:notoriOS.c    ****     
 707:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 708:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2026              		.loc 1 708 0
 2027 0012 384B     		ldr	r3, .L77
 2028 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2029 0016 042B     		cmp	r3, #4
 2030 0018 02D0     		beq	.L74
 709:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2031              		.loc 1 709 0
 2032 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2033 001e 65E0     		b	.L76
 2034              	.L74:
 710:notoriOS.c    ****     }
 711:notoriOS.c    ****     
 712:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2035              		.loc 1 712 0
 2036 0020 354A     		ldr	r2, .L77+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 52


 2037 0022 07F1D803 		add	r3, r7, #216
 2038 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2039 0028 83E80700 		stmia	r3, {r0, r1, r2}
 713:notoriOS.c    ****     //delete file, if one exisits already
 714:notoriOS.c    ****     SD_rmfile(fileName);
 2040              		.loc 1 714 0
 2041 002c 07F1D803 		add	r3, r7, #216
 2042 0030 1846     		mov	r0, r3
 2043 0032 FFF7FEFF 		bl	SD_rmfile
 715:notoriOS.c    ****     
 716:notoriOS.c    ****     // Create http request
 717:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2044              		.loc 1 717 0
 2045 0036 314B     		ldr	r3, .L77+8
 2046 0038 0593     		str	r3, [sp, #20]
 2047 003a 0023     		movs	r3, #0
 2048 003c 0493     		str	r3, [sp, #16]
 2049 003e 304B     		ldr	r3, .L77+12
 2050 0040 0393     		str	r3, [sp, #12]
 2051 0042 304B     		ldr	r3, .L77+16
 2052 0044 0293     		str	r3, [sp, #8]
 2053 0046 304B     		ldr	r3, .L77+20
 2054 0048 0193     		str	r3, [sp, #4]
 2055 004a BB68     		ldr	r3, [r7, #8]
 2056 004c 0093     		str	r3, [sp]
 2057 004e 7B68     		ldr	r3, [r7, #4]
 2058 0050 FA68     		ldr	r2, [r7, #12]
 2059 0052 2E49     		ldr	r1, .L77+24
 2060 0054 2E48     		ldr	r0, .L77+28
 2061 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 718:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2062              		.loc 1 718 0
 2063 005a 2D4A     		ldr	r2, .L77+28
 2064 005c 2D49     		ldr	r1, .L77+32
 2065 005e 0020     		movs	r0, #0
 2066 0060 FFF7FEFF 		bl	printNotif
 719:notoriOS.c    ****     // Create array portConfig of size 200 characters
 720:notoriOS.c    ****     char portConfig[200];
 721:notoriOS.c    ****     // Print port configurations
 722:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2067              		.loc 1 722 0
 2068 0064 07F11000 		add	r0, r7, #16
 2069 0068 FB68     		ldr	r3, [r7, #12]
 2070 006a 0093     		str	r3, [sp]
 2071 006c BB68     		ldr	r3, [r7, #8]
 2072 006e 2A4A     		ldr	r2, .L77+36
 2073 0070 C821     		movs	r1, #200
 2074 0072 FFF7FEFF 		bl	snprintf
 723:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2075              		.loc 1 723 0
 2076 0076 07F11003 		add	r3, r7, #16
 2077 007a 1A46     		mov	r2, r3
 2078 007c 2749     		ldr	r1, .L77+40
 2079 007e 0020     		movs	r0, #0
 2080 0080 FFF7FEFF 		bl	printNotif
 724:notoriOS.c    ****     // AT command to configure the port
 725:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 53


 2081              		.loc 1 725 0
 2082 0084 07F11003 		add	r3, r7, #16
 2083 0088 42F21072 		movw	r2, #10000
 2084 008c 2449     		ldr	r1, .L77+44
 2085 008e 1846     		mov	r0, r3
 2086 0090 FFF7FEFF 		bl	at_write_command
 2087 0094 0346     		mov	r3, r0
 2088 0096 87F8E730 		strb	r3, [r7, #231]
 726:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 727:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 728:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2089              		.loc 1 728 0
 2090 009a 4FF47A72 		mov	r2, #1000
 2091 009e 2149     		ldr	r1, .L77+48
 2092 00a0 2148     		ldr	r0, .L77+52
 2093 00a2 FFF7FEFF 		bl	at_write_command
 2094 00a6 0346     		mov	r3, r0
 2095 00a8 87F8E730 		strb	r3, [r7, #231]
 729:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 730:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2096              		.loc 1 730 0
 2097 00ac 1848     		ldr	r0, .L77+28
 2098 00ae FFF7FEFF 		bl	strlen
 2099 00b2 0346     		mov	r3, r0
 2100 00b4 1A46     		mov	r2, r3
 2101 00b6 164B     		ldr	r3, .L77+28
 2102 00b8 1344     		add	r3, r3, r2
 2103 00ba 1C49     		ldr	r1, .L77+56
 2104 00bc 1A46     		mov	r2, r3
 2105 00be 0B46     		mov	r3, r1
 2106 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2107 00c2 1380     		strh	r3, [r2]	@ unaligned
 731:notoriOS.c    ****     // AT command to send http request
 732:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2108              		.loc 1 732 0
 2109 00c4 41F28832 		movw	r2, #5000
 2110 00c8 1549     		ldr	r1, .L77+44
 2111 00ca 1148     		ldr	r0, .L77+28
 2112 00cc FFF7FEFF 		bl	at_write_command
 2113 00d0 0346     		mov	r3, r0
 2114 00d2 87F8E730 		strb	r3, [r7, #231]
 733:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 734:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 735:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2115              		.loc 1 735 0
 2116 00d6 41F28832 		movw	r2, #5000
 2117 00da 1549     		ldr	r1, .L77+60
 2118 00dc 1548     		ldr	r0, .L77+64
 2119 00de FFF7FEFF 		bl	at_write_command
 2120 00e2 0346     		mov	r3, r0
 2121 00e4 87F8E730 		strb	r3, [r7, #231]
 736:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 737:notoriOS.c    ****     
 738:notoriOS.c    ****     
 739:notoriOS.c    ****     return upgrade_status;
 2122              		.loc 1 739 0
 2123 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 54


 2124              	.L76:
 740:notoriOS.c    ****     
 741:notoriOS.c    **** }
 2125              		.loc 1 741 0 discriminator 1
 2126 00ec 1846     		mov	r0, r3
 2127 00ee E837     		adds	r7, r7, #232
 2128              		.cfi_def_cfa_offset 8
 2129 00f0 BD46     		mov	sp, r7
 2130              		.cfi_def_cfa_register 13
 2131              		@ sp needed
 2132 00f2 80BD     		pop	{r7, pc}
 2133              	.L78:
 2134              		.align	2
 2135              	.L77:
 2136 00f4 00000000 		.word	modem_state
 2137 00f8 48040000 		.word	.LC59
 2138 00fc 68010000 		.word	.LC16
 2139 0100 6C010000 		.word	.LC17
 2140 0104 70010000 		.word	.LC18
 2141 0108 78010000 		.word	.LC19
 2142 010c 00000000 		.word	http_body
 2143 0110 00000000 		.word	http_request
 2144 0114 80010000 		.word	.LC20
 2145 0118 98010000 		.word	.LC21
 2146 011c B4010000 		.word	.LC22
 2147 0120 B8010000 		.word	.LC23
 2148 0124 E8010000 		.word	.LC26
 2149 0128 EC010000 		.word	.LC27
 2150 012c FC010000 		.word	.LC28
 2151 0130 18020000 		.word	.LC31
 2152 0134 20020000 		.word	.LC32
 2153              		.cfi_endproc
 2154              	.LFE78:
 2155              		.size	upgraded, .-upgraded
 2156              		.text
 2157              	.Letext0:
 2158              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2159              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2160              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2161              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2162              		.file 6 "testing.h"
 2163              		.file 7 "level_sensor.h"
 2164              		.file 8 "voltages.h"
 2165              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2166              		.file 10 "data.h"
 2167              		.file 11 "modem.h"
 2168              		.file 12 "diss_oxy.h"
 2169              		.file 13 "notoriOS.h"
 2170              		.file 14 "Generated_Source\\PSoC5/core_cm3.h"
 2171              		.section	.debug_info,"",%progbits
 2172              	.Ldebug_info0:
 2173 0000 920C0000 		.4byte	0xc92
 2174 0004 0400     		.2byte	0x4
 2175 0006 00000000 		.4byte	.Ldebug_abbrev0
 2176 000a 04       		.byte	0x4
 2177 000b 01       		.uleb128 0x1
 2178 000c 7F000000 		.4byte	.LASF167
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 55


 2179 0010 0C       		.byte	0xc
 2180 0011 F9070000 		.4byte	.LASF168
 2181 0015 00060000 		.4byte	.LASF169
 2182 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2183 001d 00000000 		.4byte	0
 2184 0021 00000000 		.4byte	.Ldebug_line0
 2185 0025 02       		.uleb128 0x2
 2186 0026 01       		.byte	0x1
 2187 0027 06       		.byte	0x6
 2188 0028 50000000 		.4byte	.LASF0
 2189 002c 02       		.uleb128 0x2
 2190 002d 01       		.byte	0x1
 2191 002e 08       		.byte	0x8
 2192 002f D2050000 		.4byte	.LASF1
 2193 0033 02       		.uleb128 0x2
 2194 0034 02       		.byte	0x2
 2195 0035 05       		.byte	0x5
 2196 0036 3F040000 		.4byte	.LASF2
 2197 003a 02       		.uleb128 0x2
 2198 003b 02       		.byte	0x2
 2199 003c 07       		.byte	0x7
 2200 003d 85070000 		.4byte	.LASF3
 2201 0041 03       		.uleb128 0x3
 2202 0042 4D070000 		.4byte	.LASF9
 2203 0046 02       		.byte	0x2
 2204 0047 3F       		.byte	0x3f
 2205 0048 4C000000 		.4byte	0x4c
 2206 004c 02       		.uleb128 0x2
 2207 004d 04       		.byte	0x4
 2208 004e 05       		.byte	0x5
 2209 004f 14020000 		.4byte	.LASF4
 2210 0053 02       		.uleb128 0x2
 2211 0054 04       		.byte	0x4
 2212 0055 07       		.byte	0x7
 2213 0056 73030000 		.4byte	.LASF5
 2214 005a 02       		.uleb128 0x2
 2215 005b 08       		.byte	0x8
 2216 005c 05       		.byte	0x5
 2217 005d 6F010000 		.4byte	.LASF6
 2218 0061 02       		.uleb128 0x2
 2219 0062 08       		.byte	0x8
 2220 0063 07       		.byte	0x7
 2221 0064 1E010000 		.4byte	.LASF7
 2222 0068 04       		.uleb128 0x4
 2223 0069 04       		.byte	0x4
 2224 006a 05       		.byte	0x5
 2225 006b 696E7400 		.ascii	"int\000"
 2226 006f 02       		.uleb128 0x2
 2227 0070 04       		.byte	0x4
 2228 0071 07       		.byte	0x7
 2229 0072 13030000 		.4byte	.LASF8
 2230 0076 03       		.uleb128 0x3
 2231 0077 CA050000 		.4byte	.LASF10
 2232 007b 03       		.byte	0x3
 2233 007c 2C       		.byte	0x2c
 2234 007d 41000000 		.4byte	0x41
 2235 0081 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 56


 2236 0082 4B020000 		.4byte	.LASF11
 2237 0086 04       		.byte	0x4
 2238 0087 9201     		.2byte	0x192
 2239 0089 2C000000 		.4byte	0x2c
 2240 008d 05       		.uleb128 0x5
 2241 008e 08000000 		.4byte	.LASF12
 2242 0092 04       		.byte	0x4
 2243 0093 9301     		.2byte	0x193
 2244 0095 3A000000 		.4byte	0x3a
 2245 0099 05       		.uleb128 0x5
 2246 009a 8F020000 		.4byte	.LASF13
 2247 009e 04       		.byte	0x4
 2248 009f 9401     		.2byte	0x194
 2249 00a1 53000000 		.4byte	0x53
 2250 00a5 05       		.uleb128 0x5
 2251 00a6 F9030000 		.4byte	.LASF14
 2252 00aa 04       		.byte	0x4
 2253 00ab 9501     		.2byte	0x195
 2254 00ad 25000000 		.4byte	0x25
 2255 00b1 05       		.uleb128 0x5
 2256 00b2 0E080000 		.4byte	.LASF15
 2257 00b6 04       		.byte	0x4
 2258 00b7 9601     		.2byte	0x196
 2259 00b9 33000000 		.4byte	0x33
 2260 00bd 05       		.uleb128 0x5
 2261 00be 69020000 		.4byte	.LASF16
 2262 00c2 04       		.byte	0x4
 2263 00c3 9701     		.2byte	0x197
 2264 00c5 4C000000 		.4byte	0x4c
 2265 00c9 05       		.uleb128 0x5
 2266 00ca A5040000 		.4byte	.LASF17
 2267 00ce 04       		.byte	0x4
 2268 00cf 9801     		.2byte	0x198
 2269 00d1 D5000000 		.4byte	0xd5
 2270 00d5 02       		.uleb128 0x2
 2271 00d6 04       		.byte	0x4
 2272 00d7 04       		.byte	0x4
 2273 00d8 6F050000 		.4byte	.LASF18
 2274 00dc 02       		.uleb128 0x2
 2275 00dd 08       		.byte	0x8
 2276 00de 04       		.byte	0x4
 2277 00df 9E080000 		.4byte	.LASF19
 2278 00e3 02       		.uleb128 0x2
 2279 00e4 01       		.byte	0x1
 2280 00e5 08       		.byte	0x8
 2281 00e6 26070000 		.4byte	.LASF20
 2282 00ea 02       		.uleb128 0x2
 2283 00eb 08       		.byte	0x8
 2284 00ec 04       		.byte	0x4
 2285 00ed 08070000 		.4byte	.LASF21
 2286 00f1 02       		.uleb128 0x2
 2287 00f2 04       		.byte	0x4
 2288 00f3 07       		.byte	0x7
 2289 00f4 BE040000 		.4byte	.LASF22
 2290 00f8 06       		.uleb128 0x6
 2291 00f9 04       		.byte	0x4
 2292 00fa E3000000 		.4byte	0xe3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 57


 2293 00fe 07       		.uleb128 0x7
 2294 00ff E3000000 		.4byte	0xe3
 2295 0103 0E010000 		.4byte	0x10e
 2296 0107 08       		.uleb128 0x8
 2297 0108 F1000000 		.4byte	0xf1
 2298 010c 17       		.byte	0x17
 2299 010d 00       		.byte	0
 2300 010e 09       		.uleb128 0x9
 2301 010f 0C       		.byte	0xc
 2302 0110 05       		.byte	0x5
 2303 0111 30       		.byte	0x30
 2304 0112 77010000 		.4byte	0x177
 2305 0116 0A       		.uleb128 0xa
 2306 0117 53656300 		.ascii	"Sec\000"
 2307 011b 05       		.byte	0x5
 2308 011c 32       		.byte	0x32
 2309 011d 81000000 		.4byte	0x81
 2310 0121 00       		.byte	0
 2311 0122 0A       		.uleb128 0xa
 2312 0123 4D696E00 		.ascii	"Min\000"
 2313 0127 05       		.byte	0x5
 2314 0128 33       		.byte	0x33
 2315 0129 81000000 		.4byte	0x81
 2316 012d 01       		.byte	0x1
 2317 012e 0B       		.uleb128 0xb
 2318 012f 35010000 		.4byte	.LASF23
 2319 0133 05       		.byte	0x5
 2320 0134 34       		.byte	0x34
 2321 0135 81000000 		.4byte	0x81
 2322 0139 02       		.byte	0x2
 2323 013a 0B       		.uleb128 0xb
 2324 013b 57060000 		.4byte	.LASF24
 2325 013f 05       		.byte	0x5
 2326 0140 35       		.byte	0x35
 2327 0141 81000000 		.4byte	0x81
 2328 0145 03       		.byte	0x3
 2329 0146 0B       		.uleb128 0xb
 2330 0147 B4030000 		.4byte	.LASF25
 2331 014b 05       		.byte	0x5
 2332 014c 36       		.byte	0x36
 2333 014d 81000000 		.4byte	0x81
 2334 0151 04       		.byte	0x4
 2335 0152 0B       		.uleb128 0xb
 2336 0153 53080000 		.4byte	.LASF26
 2337 0157 05       		.byte	0x5
 2338 0158 37       		.byte	0x37
 2339 0159 8D000000 		.4byte	0x8d
 2340 015d 06       		.byte	0x6
 2341 015e 0B       		.uleb128 0xb
 2342 015f 18010000 		.4byte	.LASF27
 2343 0163 05       		.byte	0x5
 2344 0164 38       		.byte	0x38
 2345 0165 81000000 		.4byte	0x81
 2346 0169 08       		.byte	0x8
 2347 016a 0B       		.uleb128 0xb
 2348 016b BF050000 		.4byte	.LASF28
 2349 016f 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 58


 2350 0170 39       		.byte	0x39
 2351 0171 8D000000 		.4byte	0x8d
 2352 0175 0A       		.byte	0xa
 2353 0176 00       		.byte	0
 2354 0177 03       		.uleb128 0x3
 2355 0178 14050000 		.4byte	.LASF29
 2356 017c 05       		.byte	0x5
 2357 017d 3A       		.byte	0x3a
 2358 017e 82010000 		.4byte	0x182
 2359 0182 0C       		.uleb128 0xc
 2360 0183 0E010000 		.4byte	0x10e
 2361 0187 0D       		.uleb128 0xd
 2362 0188 8101     		.2byte	0x181
 2363 018a 06       		.byte	0x6
 2364 018b 0A       		.byte	0xa
 2365 018c B5010000 		.4byte	0x1b5
 2366 0190 0B       		.uleb128 0xb
 2367 0191 B5050000 		.4byte	.LASF30
 2368 0195 06       		.byte	0x6
 2369 0196 0C       		.byte	0xc
 2370 0197 B5010000 		.4byte	0x1b5
 2371 019b 00       		.byte	0
 2372 019c 0B       		.uleb128 0xb
 2373 019d CE070000 		.4byte	.LASF31
 2374 01a1 06       		.byte	0x6
 2375 01a2 0D       		.byte	0xd
 2376 01a3 81000000 		.4byte	0x81
 2377 01a7 80       		.byte	0x80
 2378 01a8 0B       		.uleb128 0xb
 2379 01a9 79060000 		.4byte	.LASF32
 2380 01ad 06       		.byte	0x6
 2381 01ae 0F       		.byte	0xf
 2382 01af C5010000 		.4byte	0x1c5
 2383 01b3 81       		.byte	0x81
 2384 01b4 00       		.byte	0
 2385 01b5 07       		.uleb128 0x7
 2386 01b6 E3000000 		.4byte	0xe3
 2387 01ba C5010000 		.4byte	0x1c5
 2388 01be 08       		.uleb128 0x8
 2389 01bf F1000000 		.4byte	0xf1
 2390 01c3 7F       		.byte	0x7f
 2391 01c4 00       		.byte	0
 2392 01c5 07       		.uleb128 0x7
 2393 01c6 E3000000 		.4byte	0xe3
 2394 01ca D5010000 		.4byte	0x1d5
 2395 01ce 08       		.uleb128 0x8
 2396 01cf F1000000 		.4byte	0xf1
 2397 01d3 FF       		.byte	0xff
 2398 01d4 00       		.byte	0
 2399 01d5 03       		.uleb128 0x3
 2400 01d6 61060000 		.4byte	.LASF33
 2401 01da 06       		.byte	0x6
 2402 01db 10       		.byte	0x10
 2403 01dc 87010000 		.4byte	0x187
 2404 01e0 09       		.uleb128 0x9
 2405 01e1 1A       		.byte	0x1a
 2406 01e2 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 59


 2407 01e3 10       		.byte	0x10
 2408 01e4 19020000 		.4byte	0x219
 2409 01e8 0B       		.uleb128 0xb
 2410 01e9 9F020000 		.4byte	.LASF34
 2411 01ed 07       		.byte	0x7
 2412 01ee 11       		.byte	0x11
 2413 01ef 19020000 		.4byte	0x219
 2414 01f3 00       		.byte	0
 2415 01f4 0B       		.uleb128 0xb
 2416 01f5 6F070000 		.4byte	.LASF35
 2417 01f9 07       		.byte	0x7
 2418 01fa 12       		.byte	0x12
 2419 01fb B1000000 		.4byte	0xb1
 2420 01ff 16       		.byte	0x16
 2421 0200 0B       		.uleb128 0xb
 2422 0201 4B030000 		.4byte	.LASF36
 2423 0205 07       		.byte	0x7
 2424 0206 13       		.byte	0x13
 2425 0207 81000000 		.4byte	0x81
 2426 020b 18       		.byte	0x18
 2427 020c 0B       		.uleb128 0xb
 2428 020d 22000000 		.4byte	.LASF37
 2429 0211 07       		.byte	0x7
 2430 0212 14       		.byte	0x14
 2431 0213 81000000 		.4byte	0x81
 2432 0217 19       		.byte	0x19
 2433 0218 00       		.byte	0
 2434 0219 07       		.uleb128 0x7
 2435 021a B1000000 		.4byte	0xb1
 2436 021e 29020000 		.4byte	0x229
 2437 0222 08       		.uleb128 0x8
 2438 0223 F1000000 		.4byte	0xf1
 2439 0227 0A       		.byte	0xa
 2440 0228 00       		.byte	0
 2441 0229 03       		.uleb128 0x3
 2442 022a 75050000 		.4byte	.LASF38
 2443 022e 07       		.byte	0x7
 2444 022f 15       		.byte	0x15
 2445 0230 E0010000 		.4byte	0x1e0
 2446 0234 09       		.uleb128 0x9
 2447 0235 14       		.byte	0x14
 2448 0236 08       		.byte	0x8
 2449 0237 11       		.byte	0x11
 2450 0238 79020000 		.4byte	0x279
 2451 023c 0B       		.uleb128 0xb
 2452 023d A4030000 		.4byte	.LASF39
 2453 0241 08       		.byte	0x8
 2454 0242 12       		.byte	0x12
 2455 0243 D5000000 		.4byte	0xd5
 2456 0247 00       		.byte	0
 2457 0248 0B       		.uleb128 0xb
 2458 0249 BB010000 		.4byte	.LASF40
 2459 024d 08       		.byte	0x8
 2460 024e 13       		.byte	0x13
 2461 024f D5000000 		.4byte	0xd5
 2462 0253 04       		.byte	0x4
 2463 0254 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 60


 2464 0255 C9010000 		.4byte	.LASF41
 2465 0259 08       		.byte	0x8
 2466 025a 14       		.byte	0x14
 2467 025b D5000000 		.4byte	0xd5
 2468 025f 08       		.byte	0x8
 2469 0260 0B       		.uleb128 0xb
 2470 0261 51050000 		.4byte	.LASF42
 2471 0265 08       		.byte	0x8
 2472 0266 15       		.byte	0x15
 2473 0267 D5000000 		.4byte	0xd5
 2474 026b 0C       		.byte	0xc
 2475 026c 0B       		.uleb128 0xb
 2476 026d EA060000 		.4byte	.LASF43
 2477 0271 08       		.byte	0x8
 2478 0272 16       		.byte	0x16
 2479 0273 81000000 		.4byte	0x81
 2480 0277 10       		.byte	0x10
 2481 0278 00       		.byte	0
 2482 0279 03       		.uleb128 0x3
 2483 027a A5080000 		.4byte	.LASF44
 2484 027e 08       		.byte	0x8
 2485 027f 17       		.byte	0x17
 2486 0280 34020000 		.4byte	0x234
 2487 0284 09       		.uleb128 0x9
 2488 0285 10       		.byte	0x10
 2489 0286 08       		.byte	0x8
 2490 0287 19       		.byte	0x19
 2491 0288 BD020000 		.4byte	0x2bd
 2492 028c 0B       		.uleb128 0xb
 2493 028d FF020000 		.4byte	.LASF45
 2494 0291 08       		.byte	0x8
 2495 0292 1A       		.byte	0x1a
 2496 0293 D5000000 		.4byte	0xd5
 2497 0297 00       		.byte	0
 2498 0298 0B       		.uleb128 0xb
 2499 0299 36020000 		.4byte	.LASF46
 2500 029d 08       		.byte	0x8
 2501 029e 1B       		.byte	0x1b
 2502 029f D5000000 		.4byte	0xd5
 2503 02a3 04       		.byte	0x4
 2504 02a4 0B       		.uleb128 0xb
 2505 02a5 D9060000 		.4byte	.LASF47
 2506 02a9 08       		.byte	0x8
 2507 02aa 1C       		.byte	0x1c
 2508 02ab D5000000 		.4byte	0xd5
 2509 02af 08       		.byte	0x8
 2510 02b0 0B       		.uleb128 0xb
 2511 02b1 43060000 		.4byte	.LASF48
 2512 02b5 08       		.byte	0x8
 2513 02b6 1D       		.byte	0x1d
 2514 02b7 D5000000 		.4byte	0xd5
 2515 02bb 0C       		.byte	0xc
 2516 02bc 00       		.byte	0
 2517 02bd 03       		.uleb128 0x3
 2518 02be 5D080000 		.4byte	.LASF49
 2519 02c2 08       		.byte	0x8
 2520 02c3 1E       		.byte	0x1e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 61


 2521 02c4 84020000 		.4byte	0x284
 2522 02c8 0E       		.uleb128 0xe
 2523 02c9 746D00   		.ascii	"tm\000"
 2524 02cc 24       		.byte	0x24
 2525 02cd 09       		.byte	0x9
 2526 02ce 21       		.byte	0x21
 2527 02cf 40030000 		.4byte	0x340
 2528 02d3 0B       		.uleb128 0xb
 2529 02d4 B0070000 		.4byte	.LASF50
 2530 02d8 09       		.byte	0x9
 2531 02d9 23       		.byte	0x23
 2532 02da 68000000 		.4byte	0x68
 2533 02de 00       		.byte	0
 2534 02df 0B       		.uleb128 0xb
 2535 02e0 9E040000 		.4byte	.LASF51
 2536 02e4 09       		.byte	0x9
 2537 02e5 24       		.byte	0x24
 2538 02e6 68000000 		.4byte	0x68
 2539 02ea 04       		.byte	0x4
 2540 02eb 0B       		.uleb128 0xb
 2541 02ec 1A000000 		.4byte	.LASF52
 2542 02f0 09       		.byte	0x9
 2543 02f1 25       		.byte	0x25
 2544 02f2 68000000 		.4byte	0x68
 2545 02f6 08       		.byte	0x8
 2546 02f7 0B       		.uleb128 0xb
 2547 02f8 9F070000 		.4byte	.LASF53
 2548 02fc 09       		.byte	0x9
 2549 02fd 26       		.byte	0x26
 2550 02fe 68000000 		.4byte	0x68
 2551 0302 0C       		.byte	0xc
 2552 0303 0B       		.uleb128 0xb
 2553 0304 CA020000 		.4byte	.LASF54
 2554 0308 09       		.byte	0x9
 2555 0309 27       		.byte	0x27
 2556 030a 68000000 		.4byte	0x68
 2557 030e 10       		.byte	0x10
 2558 030f 0B       		.uleb128 0xb
 2559 0310 ED020000 		.4byte	.LASF55
 2560 0314 09       		.byte	0x9
 2561 0315 28       		.byte	0x28
 2562 0316 68000000 		.4byte	0x68
 2563 031a 14       		.byte	0x14
 2564 031b 0B       		.uleb128 0xb
 2565 031c F0060000 		.4byte	.LASF56
 2566 0320 09       		.byte	0x9
 2567 0321 29       		.byte	0x29
 2568 0322 68000000 		.4byte	0x68
 2569 0326 18       		.byte	0x18
 2570 0327 0B       		.uleb128 0xb
 2571 0328 D2040000 		.4byte	.LASF57
 2572 032c 09       		.byte	0x9
 2573 032d 2A       		.byte	0x2a
 2574 032e 68000000 		.4byte	0x68
 2575 0332 1C       		.byte	0x1c
 2576 0333 0B       		.uleb128 0xb
 2577 0334 DD030000 		.4byte	.LASF58
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 62


 2578 0338 09       		.byte	0x9
 2579 0339 2B       		.byte	0x2b
 2580 033a 68000000 		.4byte	0x68
 2581 033e 20       		.byte	0x20
 2582 033f 00       		.byte	0
 2583 0340 09       		.uleb128 0x9
 2584 0341 2C       		.byte	0x2c
 2585 0342 0A       		.byte	0xa
 2586 0343 14       		.byte	0x14
 2587 0344 6D030000 		.4byte	0x36d
 2588 0348 0A       		.uleb128 0xa
 2589 0349 6B657900 		.ascii	"key\000"
 2590 034d 0A       		.byte	0xa
 2591 034e 15       		.byte	0x15
 2592 034f 6D030000 		.4byte	0x36d
 2593 0353 00       		.byte	0
 2594 0354 0B       		.uleb128 0xb
 2595 0355 E2020000 		.4byte	.LASF59
 2596 0359 0A       		.byte	0xa
 2597 035a 16       		.byte	0x16
 2598 035b 6D030000 		.4byte	0x36d
 2599 035f 14       		.byte	0x14
 2600 0360 0B       		.uleb128 0xb
 2601 0361 0A050000 		.4byte	.LASF60
 2602 0365 0A       		.byte	0xa
 2603 0366 17       		.byte	0x17
 2604 0367 BD000000 		.4byte	0xbd
 2605 036b 28       		.byte	0x28
 2606 036c 00       		.byte	0
 2607 036d 07       		.uleb128 0x7
 2608 036e E3000000 		.4byte	0xe3
 2609 0372 7D030000 		.4byte	0x37d
 2610 0376 08       		.uleb128 0x8
 2611 0377 F1000000 		.4byte	0xf1
 2612 037b 13       		.byte	0x13
 2613 037c 00       		.byte	0
 2614 037d 03       		.uleb128 0x3
 2615 037e 28030000 		.4byte	.LASF61
 2616 0382 0A       		.byte	0xa
 2617 0383 19       		.byte	0x19
 2618 0384 40030000 		.4byte	0x340
 2619 0388 09       		.uleb128 0x9
 2620 0389 3C       		.byte	0x3c
 2621 038a 0B       		.byte	0xb
 2622 038b 37       		.byte	0x37
 2623 038c B5030000 		.4byte	0x3b5
 2624 0390 0B       		.uleb128 0xb
 2625 0391 98070000 		.4byte	.LASF62
 2626 0395 0B       		.byte	0xb
 2627 0396 38       		.byte	0x38
 2628 0397 6D030000 		.4byte	0x36d
 2629 039b 00       		.byte	0
 2630 039c 0B       		.uleb128 0xb
 2631 039d 96020000 		.4byte	.LASF63
 2632 03a1 0B       		.byte	0xb
 2633 03a2 39       		.byte	0x39
 2634 03a3 6D030000 		.4byte	0x36d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 63


 2635 03a7 14       		.byte	0x14
 2636 03a8 0B       		.uleb128 0xb
 2637 03a9 74060000 		.4byte	.LASF64
 2638 03ad 0B       		.byte	0xb
 2639 03ae 3A       		.byte	0x3a
 2640 03af 6D030000 		.4byte	0x36d
 2641 03b3 28       		.byte	0x28
 2642 03b4 00       		.byte	0
 2643 03b5 03       		.uleb128 0x3
 2644 03b6 01020000 		.4byte	.LASF65
 2645 03ba 0B       		.byte	0xb
 2646 03bb 3C       		.byte	0x3c
 2647 03bc 88030000 		.4byte	0x388
 2648 03c0 09       		.uleb128 0x9
 2649 03c1 20       		.byte	0x20
 2650 03c2 0B       		.byte	0xb
 2651 03c3 3E       		.byte	0x3e
 2652 03c4 29040000 		.4byte	0x429
 2653 03c8 0B       		.uleb128 0xb
 2654 03c9 0E020000 		.4byte	.LASF66
 2655 03cd 0B       		.byte	0xb
 2656 03ce 3F       		.byte	0x3f
 2657 03cf 68000000 		.4byte	0x68
 2658 03d3 00       		.byte	0
 2659 03d4 0A       		.uleb128 0xa
 2660 03d5 62657200 		.ascii	"ber\000"
 2661 03d9 0B       		.byte	0xb
 2662 03da 40       		.byte	0x40
 2663 03db 68000000 		.4byte	0x68
 2664 03df 04       		.byte	0x4
 2665 03e0 0B       		.uleb128 0xb
 2666 03e1 52060000 		.4byte	.LASF67
 2667 03e5 0B       		.byte	0xb
 2668 03e6 41       		.byte	0x41
 2669 03e7 68000000 		.4byte	0x68
 2670 03eb 08       		.byte	0x8
 2671 03ec 0B       		.uleb128 0xb
 2672 03ed 85010000 		.4byte	.LASF68
 2673 03f1 0B       		.byte	0xb
 2674 03f2 42       		.byte	0x42
 2675 03f3 68000000 		.4byte	0x68
 2676 03f7 0C       		.byte	0xc
 2677 03f8 0B       		.uleb128 0xb
 2678 03f9 FB050000 		.4byte	.LASF69
 2679 03fd 0B       		.byte	0xb
 2680 03fe 43       		.byte	0x43
 2681 03ff 68000000 		.4byte	0x68
 2682 0403 10       		.byte	0x10
 2683 0404 0B       		.uleb128 0xb
 2684 0405 F6050000 		.4byte	.LASF70
 2685 0409 0B       		.byte	0xb
 2686 040a 44       		.byte	0x44
 2687 040b 68000000 		.4byte	0x68
 2688 040f 14       		.byte	0x14
 2689 0410 0B       		.uleb128 0xb
 2690 0411 98010000 		.4byte	.LASF71
 2691 0415 0B       		.byte	0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 64


 2692 0416 45       		.byte	0x45
 2693 0417 68000000 		.4byte	0x68
 2694 041b 18       		.byte	0x18
 2695 041c 0B       		.uleb128 0xb
 2696 041d 1D020000 		.4byte	.LASF72
 2697 0421 0B       		.byte	0xb
 2698 0422 46       		.byte	0x46
 2699 0423 68000000 		.4byte	0x68
 2700 0427 1C       		.byte	0x1c
 2701 0428 00       		.byte	0
 2702 0429 03       		.uleb128 0x3
 2703 042a CB060000 		.4byte	.LASF73
 2704 042e 0B       		.byte	0xb
 2705 042f 48       		.byte	0x48
 2706 0430 C0030000 		.4byte	0x3c0
 2707 0434 09       		.uleb128 0x9
 2708 0435 05       		.byte	0x5
 2709 0436 0B       		.byte	0xb
 2710 0437 54       		.byte	0x54
 2711 0438 79040000 		.4byte	0x479
 2712 043c 0B       		.uleb128 0xb
 2713 043d 6F020000 		.4byte	.LASF74
 2714 0441 0B       		.byte	0xb
 2715 0442 56       		.byte	0x56
 2716 0443 81000000 		.4byte	0x81
 2717 0447 00       		.byte	0
 2718 0448 0B       		.uleb128 0xb
 2719 0449 44080000 		.4byte	.LASF75
 2720 044d 0B       		.byte	0xb
 2721 044e 58       		.byte	0x58
 2722 044f 79040000 		.4byte	0x479
 2723 0453 01       		.byte	0x1
 2724 0454 0B       		.uleb128 0xb
 2725 0455 91080000 		.4byte	.LASF76
 2726 0459 0B       		.byte	0xb
 2727 045a 5A       		.byte	0x5a
 2728 045b 81000000 		.4byte	0x81
 2729 045f 02       		.byte	0x2
 2730 0460 0B       		.uleb128 0xb
 2731 0461 39060000 		.4byte	.LASF77
 2732 0465 0B       		.byte	0xb
 2733 0466 5C       		.byte	0x5c
 2734 0467 81000000 		.4byte	0x81
 2735 046b 03       		.byte	0x3
 2736 046c 0B       		.uleb128 0xb
 2737 046d D1020000 		.4byte	.LASF78
 2738 0471 0B       		.byte	0xb
 2739 0472 5F       		.byte	0x5f
 2740 0473 81000000 		.4byte	0x81
 2741 0477 04       		.byte	0x4
 2742 0478 00       		.byte	0
 2743 0479 02       		.uleb128 0x2
 2744 047a 01       		.byte	0x1
 2745 047b 02       		.byte	0x2
 2746 047c C4050000 		.4byte	.LASF79
 2747 0480 03       		.uleb128 0x3
 2748 0481 6B040000 		.4byte	.LASF80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 65


 2749 0485 0B       		.byte	0xb
 2750 0486 61       		.byte	0x61
 2751 0487 34040000 		.4byte	0x434
 2752 048b 09       		.uleb128 0x9
 2753 048c 30       		.byte	0x30
 2754 048d 0C       		.byte	0xc
 2755 048e 07       		.byte	0x7
 2756 048f AC040000 		.4byte	0x4ac
 2757 0493 0B       		.uleb128 0xb
 2758 0494 F8060000 		.4byte	.LASF81
 2759 0498 0C       		.byte	0xc
 2760 0499 08       		.byte	0x8
 2761 049a AC040000 		.4byte	0x4ac
 2762 049e 00       		.byte	0
 2763 049f 0B       		.uleb128 0xb
 2764 04a0 0F000000 		.4byte	.LASF82
 2765 04a4 0C       		.byte	0xc
 2766 04a5 09       		.byte	0x9
 2767 04a6 C9000000 		.4byte	0xc9
 2768 04aa 2C       		.byte	0x2c
 2769 04ab 00       		.byte	0
 2770 04ac 07       		.uleb128 0x7
 2771 04ad C9000000 		.4byte	0xc9
 2772 04b1 BC040000 		.4byte	0x4bc
 2773 04b5 08       		.uleb128 0x8
 2774 04b6 F1000000 		.4byte	0xf1
 2775 04ba 0A       		.byte	0xa
 2776 04bb 00       		.byte	0
 2777 04bc 03       		.uleb128 0x3
 2778 04bd C2070000 		.4byte	.LASF83
 2779 04c1 0C       		.byte	0xc
 2780 04c2 0A       		.byte	0xa
 2781 04c3 8B040000 		.4byte	0x48b
 2782 04c7 09       		.uleb128 0x9
 2783 04c8 06       		.byte	0x6
 2784 04c9 0D       		.byte	0xd
 2785 04ca 2E       		.byte	0x2e
 2786 04cb 00050000 		.4byte	0x500
 2787 04cf 0B       		.uleb128 0xb
 2788 04d0 B2020000 		.4byte	.LASF84
 2789 04d4 0D       		.byte	0xd
 2790 04d5 30       		.byte	0x30
 2791 04d6 8D000000 		.4byte	0x8d
 2792 04da 00       		.byte	0
 2793 04db 0B       		.uleb128 0xb
 2794 04dc 2E080000 		.4byte	.LASF85
 2795 04e0 0D       		.byte	0xd
 2796 04e1 31       		.byte	0x31
 2797 04e2 B1000000 		.4byte	0xb1
 2798 04e6 02       		.byte	0x2
 2799 04e7 0B       		.uleb128 0xb
 2800 04e8 20080000 		.4byte	.LASF86
 2801 04ec 0D       		.byte	0xd
 2802 04ed 32       		.byte	0x32
 2803 04ee 81000000 		.4byte	0x81
 2804 04f2 04       		.byte	0x4
 2805 04f3 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 66


 2806 04f4 5C000000 		.4byte	.LASF87
 2807 04f8 0D       		.byte	0xd
 2808 04f9 33       		.byte	0x33
 2809 04fa 81000000 		.4byte	0x81
 2810 04fe 05       		.byte	0x5
 2811 04ff 00       		.byte	0
 2812 0500 03       		.uleb128 0x3
 2813 0501 30020000 		.4byte	.LASF88
 2814 0505 0D       		.byte	0xd
 2815 0506 36       		.byte	0x36
 2816 0507 0B050000 		.4byte	0x50b
 2817 050b 0C       		.uleb128 0xc
 2818 050c C7040000 		.4byte	0x4c7
 2819 0510 09       		.uleb128 0x9
 2820 0511 1C       		.byte	0x1c
 2821 0512 0D       		.byte	0xd
 2822 0513 39       		.byte	0x39
 2823 0514 31050000 		.4byte	0x531
 2824 0518 0B       		.uleb128 0xb
 2825 0519 E6030000 		.4byte	.LASF89
 2826 051d 0D       		.byte	0xd
 2827 051e 3B       		.byte	0x3b
 2828 051f 31050000 		.4byte	0x531
 2829 0523 00       		.byte	0
 2830 0524 0B       		.uleb128 0xb
 2831 0525 83080000 		.4byte	.LASF90
 2832 0529 0D       		.byte	0xd
 2833 052a 3C       		.byte	0x3c
 2834 052b FE000000 		.4byte	0xfe
 2835 052f 04       		.byte	0x4
 2836 0530 00       		.byte	0
 2837 0531 06       		.uleb128 0x6
 2838 0532 04       		.byte	0x4
 2839 0533 B5030000 		.4byte	0x3b5
 2840 0537 03       		.uleb128 0x3
 2841 0538 60040000 		.4byte	.LASF91
 2842 053c 0D       		.byte	0xd
 2843 053d 3E       		.byte	0x3e
 2844 053e 10050000 		.4byte	0x510
 2845 0542 09       		.uleb128 0x9
 2846 0543 68       		.byte	0x68
 2847 0544 0D       		.byte	0xd
 2848 0545 44       		.byte	0x44
 2849 0546 63050000 		.4byte	0x563
 2850 054a 0B       		.uleb128 0xb
 2851 054b F1030000 		.4byte	.LASF92
 2852 054f 0D       		.byte	0xd
 2853 0550 49       		.byte	0x49
 2854 0551 63050000 		.4byte	0x563
 2855 0555 00       		.byte	0
 2856 0556 0B       		.uleb128 0xb
 2857 0557 D5030000 		.4byte	.LASF93
 2858 055b 0D       		.byte	0xd
 2859 055c 4A       		.byte	0x4a
 2860 055d 68000000 		.4byte	0x68
 2861 0561 64       		.byte	0x64
 2862 0562 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 67


 2863 0563 07       		.uleb128 0x7
 2864 0564 E3000000 		.4byte	0xe3
 2865 0568 73050000 		.4byte	0x573
 2866 056c 08       		.uleb128 0x8
 2867 056d F1000000 		.4byte	0xf1
 2868 0571 63       		.byte	0x63
 2869 0572 00       		.byte	0
 2870 0573 03       		.uleb128 0x3
 2871 0574 DA040000 		.4byte	.LASF94
 2872 0578 0D       		.byte	0xd
 2873 0579 50       		.byte	0x50
 2874 057a 42050000 		.4byte	0x542
 2875 057e 0F       		.uleb128 0xf
 2876 057f 74000000 		.4byte	.LASF170
 2877 0583 01       		.byte	0x1
 2878 0584 14       		.byte	0x14
 2879 0585 00000000 		.4byte	.LFB64
 2880 0589 0C000000 		.4byte	.LFE64-.LFB64
 2881 058d 01       		.uleb128 0x1
 2882 058e 9C       		.byte	0x9c
 2883 058f 10       		.uleb128 0x10
 2884 0590 73080000 		.4byte	.LASF108
 2885 0594 01       		.byte	0x1
 2886 0595 28       		.byte	0x28
 2887 0596 00000000 		.4byte	.LFB65
 2888 059a 2C010000 		.4byte	.LFE65-.LFB65
 2889 059e 01       		.uleb128 0x1
 2890 059f 9C       		.byte	0x9c
 2891 05a0 CF050000 		.4byte	0x5cf
 2892 05a4 11       		.uleb128 0x11
 2893 05a5 57070000 		.4byte	.LASF95
 2894 05a9 01       		.byte	0x1
 2895 05aa 3C       		.byte	0x3c
 2896 05ab CF050000 		.4byte	0x5cf
 2897 05af 02       		.uleb128 0x2
 2898 05b0 91       		.byte	0x91
 2899 05b1 64       		.sleb128 -28
 2900 05b2 11       		.uleb128 0x11
 2901 05b3 4D080000 		.4byte	.LASF96
 2902 05b7 01       		.byte	0x1
 2903 05b8 59       		.byte	0x59
 2904 05b9 DF050000 		.4byte	0x5df
 2905 05bd 02       		.uleb128 0x2
 2906 05be 91       		.byte	0x91
 2907 05bf 58       		.sleb128 -40
 2908 05c0 11       		.uleb128 0x11
 2909 05c1 85030000 		.4byte	.LASF97
 2910 05c5 01       		.byte	0x1
 2911 05c6 5E       		.byte	0x5e
 2912 05c7 81000000 		.4byte	0x81
 2913 05cb 02       		.uleb128 0x2
 2914 05cc 91       		.byte	0x91
 2915 05cd 6F       		.sleb128 -17
 2916 05ce 00       		.byte	0
 2917 05cf 07       		.uleb128 0x7
 2918 05d0 99000000 		.4byte	0x99
 2919 05d4 DF050000 		.4byte	0x5df
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 68


 2920 05d8 08       		.uleb128 0x8
 2921 05d9 F1000000 		.4byte	0xf1
 2922 05dd 01       		.byte	0x1
 2923 05de 00       		.byte	0
 2924 05df 07       		.uleb128 0x7
 2925 05e0 E3000000 		.4byte	0xe3
 2926 05e4 EF050000 		.4byte	0x5ef
 2927 05e8 08       		.uleb128 0x8
 2928 05e9 F1000000 		.4byte	0xf1
 2929 05ed 09       		.byte	0x9
 2930 05ee 00       		.byte	0
 2931 05ef 12       		.uleb128 0x12
 2932 05f0 07040000 		.4byte	.LASF99
 2933 05f4 01       		.byte	0x1
 2934 05f5 68       		.byte	0x68
 2935 05f6 68000000 		.4byte	0x68
 2936 05fa 00000000 		.4byte	.LFB66
 2937 05fe 64000000 		.4byte	.LFE66-.LFB66
 2938 0602 01       		.uleb128 0x1
 2939 0603 9C       		.byte	0x9c
 2940 0604 17060000 		.4byte	0x617
 2941 0608 11       		.uleb128 0x11
 2942 0609 A8050000 		.4byte	.LASF98
 2943 060d 01       		.byte	0x1
 2944 060e 82       		.byte	0x82
 2945 060f 81000000 		.4byte	0x81
 2946 0613 02       		.uleb128 0x2
 2947 0614 91       		.byte	0x91
 2948 0615 77       		.sleb128 -9
 2949 0616 00       		.byte	0
 2950 0617 13       		.uleb128 0x13
 2951 0618 7D070000 		.4byte	.LASF171
 2952 061c 01       		.byte	0x1
 2953 061d 92       		.byte	0x92
 2954 061e 00000000 		.4byte	.LFB67
 2955 0622 2A000000 		.4byte	.LFE67-.LFB67
 2956 0626 01       		.uleb128 0x1
 2957 0627 9C       		.byte	0x9c
 2958 0628 14       		.uleb128 0x14
 2959 0629 40030000 		.4byte	.LASF100
 2960 062d 01       		.byte	0x1
 2961 062e B7       		.byte	0xb7
 2962 062f 00000000 		.4byte	.LFB68
 2963 0633 50000000 		.4byte	.LFE68-.LFB68
 2964 0637 01       		.uleb128 0x1
 2965 0638 9C       		.byte	0x9c
 2966 0639 4C060000 		.4byte	0x64c
 2967 063d 15       		.uleb128 0x15
 2968 063e 82040000 		.4byte	.LASF101
 2969 0642 01       		.byte	0x1
 2970 0643 B7       		.byte	0xb7
 2971 0644 81000000 		.4byte	0x81
 2972 0648 02       		.uleb128 0x2
 2973 0649 91       		.byte	0x91
 2974 064a 77       		.sleb128 -9
 2975 064b 00       		.byte	0
 2976 064c 16       		.uleb128 0x16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 69


 2977 064d 68080000 		.4byte	.LASF105
 2978 0651 01       		.byte	0x1
 2979 0652 CE       		.byte	0xce
 2980 0653 81000000 		.4byte	0x81
 2981 0657 00000000 		.4byte	.LFB69
 2982 065b 48000000 		.4byte	.LFE69-.LFB69
 2983 065f 01       		.uleb128 0x1
 2984 0660 9C       		.byte	0x9c
 2985 0661 82060000 		.4byte	0x682
 2986 0665 15       		.uleb128 0x15
 2987 0666 AD040000 		.4byte	.LASF102
 2988 066a 01       		.byte	0x1
 2989 066b CE       		.byte	0xce
 2990 066c 82060000 		.4byte	0x682
 2991 0670 02       		.uleb128 0x2
 2992 0671 91       		.byte	0x91
 2993 0672 74       		.sleb128 -12
 2994 0673 15       		.uleb128 0x15
 2995 0674 82040000 		.4byte	.LASF101
 2996 0678 01       		.byte	0x1
 2997 0679 CE       		.byte	0xce
 2998 067a 81000000 		.4byte	0x81
 2999 067e 02       		.uleb128 0x2
 3000 067f 91       		.byte	0x91
 3001 0680 73       		.sleb128 -13
 3002 0681 00       		.byte	0
 3003 0682 06       		.uleb128 0x6
 3004 0683 04       		.byte	0x4
 3005 0684 00050000 		.4byte	0x500
 3006 0688 17       		.uleb128 0x17
 3007 0689 C7040000 		.4byte	.LASF103
 3008 068d 01       		.byte	0x1
 3009 068e E3       		.byte	0xe3
 3010 068f 00000000 		.4byte	.LFB70
 3011 0693 1E000000 		.4byte	.LFE70-.LFB70
 3012 0697 01       		.uleb128 0x1
 3013 0698 9C       		.byte	0x9c
 3014 0699 AC060000 		.4byte	0x6ac
 3015 069d 15       		.uleb128 0x15
 3016 069e 80060000 		.4byte	.LASF104
 3017 06a2 01       		.byte	0x1
 3018 06a3 E3       		.byte	0xe3
 3019 06a4 82060000 		.4byte	0x682
 3020 06a8 02       		.uleb128 0x2
 3021 06a9 91       		.byte	0x91
 3022 06aa 74       		.sleb128 -12
 3023 06ab 00       		.byte	0
 3024 06ac 18       		.uleb128 0x18
 3025 06ad 37050000 		.4byte	.LASF106
 3026 06b1 01       		.byte	0x1
 3027 06b2 EC       		.byte	0xec
 3028 06b3 00050000 		.4byte	0x500
 3029 06b7 00000000 		.4byte	.LFB71
 3030 06bb 46000000 		.4byte	.LFE71-.LFB71
 3031 06bf 01       		.uleb128 0x1
 3032 06c0 9C       		.byte	0x9c
 3033 06c1 FE060000 		.4byte	0x6fe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 70


 3034 06c5 15       		.uleb128 0x15
 3035 06c6 B2020000 		.4byte	.LASF84
 3036 06ca 01       		.byte	0x1
 3037 06cb EC       		.byte	0xec
 3038 06cc 8D000000 		.4byte	0x8d
 3039 06d0 02       		.uleb128 0x2
 3040 06d1 91       		.byte	0x91
 3041 06d2 6A       		.sleb128 -22
 3042 06d3 15       		.uleb128 0x15
 3043 06d4 20080000 		.4byte	.LASF86
 3044 06d8 01       		.byte	0x1
 3045 06d9 EC       		.byte	0xec
 3046 06da 81000000 		.4byte	0x81
 3047 06de 02       		.uleb128 0x2
 3048 06df 91       		.byte	0x91
 3049 06e0 69       		.sleb128 -23
 3050 06e1 15       		.uleb128 0x15
 3051 06e2 5C000000 		.4byte	.LASF87
 3052 06e6 01       		.byte	0x1
 3053 06e7 EC       		.byte	0xec
 3054 06e8 81000000 		.4byte	0x81
 3055 06ec 02       		.uleb128 0x2
 3056 06ed 91       		.byte	0x91
 3057 06ee 68       		.sleb128 -24
 3058 06ef 11       		.uleb128 0x11
 3059 06f0 A7070000 		.4byte	.LASF107
 3060 06f4 01       		.byte	0x1
 3061 06f5 EF       		.byte	0xef
 3062 06f6 00050000 		.4byte	0x500
 3063 06fa 02       		.uleb128 0x2
 3064 06fb 91       		.byte	0x91
 3065 06fc 70       		.sleb128 -16
 3066 06fd 00       		.byte	0
 3067 06fe 19       		.uleb128 0x19
 3068 06ff 8F060000 		.4byte	.LASF109
 3069 0703 01       		.byte	0x1
 3070 0704 0501     		.2byte	0x105
 3071 0706 00000000 		.4byte	.LFB72
 3072 070a 2C010000 		.4byte	.LFE72-.LFB72
 3073 070e 01       		.uleb128 0x1
 3074 070f 9C       		.byte	0x9c
 3075 0710 75070000 		.4byte	0x775
 3076 0714 1A       		.uleb128 0x1a
 3077 0715 14080000 		.4byte	.LASF110
 3078 0719 01       		.byte	0x1
 3079 071a 0D01     		.2byte	0x10d
 3080 071c D5010000 		.4byte	0x1d5
 3081 0720 03       		.uleb128 0x3
 3082 0721 91       		.byte	0x91
 3083 0722 EC7C     		.sleb128 -404
 3084 0724 1A       		.uleb128 0x1a
 3085 0725 60010000 		.4byte	.LASF111
 3086 0729 01       		.byte	0x1
 3087 072a 1101     		.2byte	0x111
 3088 072c D5010000 		.4byte	0x1d5
 3089 0730 03       		.uleb128 0x3
 3090 0731 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 71


 3091 0732 E879     		.sleb128 -792
 3092 0734 1A       		.uleb128 0x1a
 3093 0735 EE070000 		.4byte	.LASF112
 3094 0739 01       		.byte	0x1
 3095 073a 1501     		.2byte	0x115
 3096 073c D5010000 		.4byte	0x1d5
 3097 0740 03       		.uleb128 0x3
 3098 0741 91       		.byte	0x91
 3099 0742 E476     		.sleb128 -1180
 3100 0744 1A       		.uleb128 0x1a
 3101 0745 0D010000 		.4byte	.LASF113
 3102 0749 01       		.byte	0x1
 3103 074a 1901     		.2byte	0x119
 3104 074c D5010000 		.4byte	0x1d5
 3105 0750 03       		.uleb128 0x3
 3106 0751 91       		.byte	0x91
 3107 0752 E073     		.sleb128 -1568
 3108 0754 1A       		.uleb128 0x1a
 3109 0755 35040000 		.4byte	.LASF114
 3110 0759 01       		.byte	0x1
 3111 075a 1D01     		.2byte	0x11d
 3112 075c D5010000 		.4byte	0x1d5
 3113 0760 03       		.uleb128 0x3
 3114 0761 91       		.byte	0x91
 3115 0762 DC70     		.sleb128 -1956
 3116 0764 1A       		.uleb128 0x1a
 3117 0765 00000000 		.4byte	.LASF115
 3118 0769 01       		.byte	0x1
 3119 076a 2101     		.2byte	0x121
 3120 076c D5010000 		.4byte	0x1d5
 3121 0770 03       		.uleb128 0x3
 3122 0771 91       		.byte	0x91
 3123 0772 D86D     		.sleb128 -2344
 3124 0774 00       		.byte	0
 3125 0775 1B       		.uleb128 0x1b
 3126 0776 7E080000 		.4byte	.LASF172
 3127 077a 01       		.byte	0x1
 3128 077b 2C01     		.2byte	0x12c
 3129 077d 68000000 		.4byte	0x68
 3130 0781 00000000 		.4byte	.LFB73
 3131 0785 1E000000 		.4byte	.LFE73-.LFB73
 3132 0789 01       		.uleb128 0x1
 3133 078a 9C       		.byte	0x9c
 3134 078b 1C       		.uleb128 0x1c
 3135 078c 79020000 		.4byte	.LASF116
 3136 0790 01       		.byte	0x1
 3137 0791 4201     		.2byte	0x142
 3138 0793 81000000 		.4byte	0x81
 3139 0797 00000000 		.4byte	.LFB74
 3140 079b 30040000 		.4byte	.LFE74-.LFB74
 3141 079f 01       		.uleb128 0x1
 3142 07a0 9C       		.byte	0x9c
 3143 07a1 E5080000 		.4byte	0x8e5
 3144 07a5 1D       		.uleb128 0x1d
 3145 07a6 62000000 		.4byte	.LBB2
 3146 07aa B8030000 		.4byte	.LBE2-.LBB2
 3147 07ae 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 72


 3148 07af 4A050000 		.4byte	.LASF117
 3149 07b3 01       		.byte	0x1
 3150 07b4 7201     		.2byte	0x172
 3151 07b6 6D030000 		.4byte	0x36d
 3152 07ba 02       		.uleb128 0x2
 3153 07bb 91       		.byte	0x91
 3154 07bc 48       		.sleb128 -56
 3155 07bd 1A       		.uleb128 0x1a
 3156 07be 51020000 		.4byte	.LASF118
 3157 07c2 01       		.byte	0x1
 3158 07c3 7701     		.2byte	0x177
 3159 07c5 6D030000 		.4byte	0x36d
 3160 07c9 03       		.uleb128 0x3
 3161 07ca 91       		.byte	0x91
 3162 07cb B47F     		.sleb128 -76
 3163 07cd 1A       		.uleb128 0x1a
 3164 07ce 91030000 		.4byte	.LASF119
 3165 07d2 01       		.byte	0x1
 3166 07d3 8A01     		.2byte	0x18a
 3167 07d5 8D000000 		.4byte	0x8d
 3168 07d9 02       		.uleb128 0x2
 3169 07da 91       		.byte	0x91
 3170 07db 66       		.sleb128 -26
 3171 07dc 1A       		.uleb128 0x1a
 3172 07dd 20040000 		.4byte	.LASF120
 3173 07e1 01       		.byte	0x1
 3174 07e2 8B01     		.2byte	0x18b
 3175 07e4 6D030000 		.4byte	0x36d
 3176 07e8 03       		.uleb128 0x3
 3177 07e9 91       		.byte	0x91
 3178 07ea A07F     		.sleb128 -96
 3179 07ec 1A       		.uleb128 0x1a
 3180 07ed 42070000 		.4byte	.LASF121
 3181 07f1 01       		.byte	0x1
 3182 07f2 A001     		.2byte	0x1a0
 3183 07f4 E5080000 		.4byte	0x8e5
 3184 07f8 03       		.uleb128 0x3
 3185 07f9 91       		.byte	0x91
 3186 07fa B875     		.sleb128 -1352
 3187 07fc 1A       		.uleb128 0x1a
 3188 07fd CE070000 		.4byte	.LASF31
 3189 0801 01       		.byte	0x1
 3190 0802 A101     		.2byte	0x1a1
 3191 0804 81000000 		.4byte	0x81
 3192 0808 02       		.uleb128 0x2
 3193 0809 91       		.byte	0x91
 3194 080a 65       		.sleb128 -27
 3195 080b 1A       		.uleb128 0x1a
 3196 080c 14070000 		.4byte	.LASF122
 3197 0810 01       		.byte	0x1
 3198 0811 A801     		.2byte	0x1a8
 3199 0813 F8000000 		.4byte	0xf8
 3200 0817 02       		.uleb128 0x2
 3201 0818 91       		.byte	0x91
 3202 0819 6C       		.sleb128 -20
 3203 081a 1A       		.uleb128 0x1a
 3204 081b 7D010000 		.4byte	.LASF123
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 73


 3205 081f 01       		.byte	0x1
 3206 0820 AC01     		.2byte	0x1ac
 3207 0822 A5000000 		.4byte	0xa5
 3208 0826 02       		.uleb128 0x2
 3209 0827 91       		.byte	0x91
 3210 0828 64       		.sleb128 -28
 3211 0829 1A       		.uleb128 0x1a
 3212 082a 82020000 		.4byte	.LASF124
 3213 082e 01       		.byte	0x1
 3214 082f DC01     		.2byte	0x1dc
 3215 0831 4C000000 		.4byte	0x4c
 3216 0835 02       		.uleb128 0x2
 3217 0836 91       		.byte	0x91
 3218 0837 5C       		.sleb128 -36
 3219 0838 1E       		.uleb128 0x1e
 3220 0839 CE000000 		.4byte	.LBB3
 3221 083d 2C000000 		.4byte	.LBE3-.LBB3
 3222 0841 65080000 		.4byte	0x865
 3223 0845 1A       		.uleb128 0x1a
 3224 0846 BB060000 		.4byte	.LASF125
 3225 084a 01       		.byte	0x1
 3226 084b 7F01     		.2byte	0x17f
 3227 084d 8D000000 		.4byte	0x8d
 3228 0851 02       		.uleb128 0x2
 3229 0852 91       		.byte	0x91
 3230 0853 68       		.sleb128 -24
 3231 0854 1A       		.uleb128 0x1a
 3232 0855 EF010000 		.4byte	.LASF126
 3233 0859 01       		.byte	0x1
 3234 085a 8001     		.2byte	0x180
 3235 085c 6D030000 		.4byte	0x36d
 3236 0860 03       		.uleb128 0x3
 3237 0861 91       		.byte	0x91
 3238 0862 8C7F     		.sleb128 -116
 3239 0864 00       		.byte	0
 3240 0865 1E       		.uleb128 0x1e
 3241 0866 FC000000 		.4byte	.LBB4
 3242 086a 20000000 		.4byte	.LBE4-.LBB4
 3243 086e 83080000 		.4byte	0x883
 3244 0872 1A       		.uleb128 0x1a
 3245 0873 EF010000 		.4byte	.LASF126
 3246 0877 01       		.byte	0x1
 3247 0878 8401     		.2byte	0x184
 3248 087a 6D030000 		.4byte	0x36d
 3249 087e 03       		.uleb128 0x3
 3250 087f 91       		.byte	0x91
 3251 0880 F87E     		.sleb128 -136
 3252 0882 00       		.byte	0
 3253 0883 1E       		.uleb128 0x1e
 3254 0884 3C020000 		.4byte	.LBB5
 3255 0888 BC000000 		.4byte	.LBE5-.LBB5
 3256 088c BA080000 		.4byte	0x8ba
 3257 0890 1A       		.uleb128 0x1a
 3258 0891 43050000 		.4byte	.LASF127
 3259 0895 01       		.byte	0x1
 3260 0896 B101     		.2byte	0x1b1
 3261 0898 A5000000 		.4byte	0xa5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 74


 3262 089c 02       		.uleb128 0x2
 3263 089d 91       		.byte	0x91
 3264 089e 6B       		.sleb128 -21
 3265 089f 1D       		.uleb128 0x1d
 3266 08a0 44020000 		.4byte	.LBB6
 3267 08a4 9A000000 		.4byte	.LBE6-.LBB6
 3268 08a8 1A       		.uleb128 0x1a
 3269 08a9 5E030000 		.4byte	.LASF128
 3270 08ad 01       		.byte	0x1
 3271 08ae B301     		.2byte	0x1b3
 3272 08b0 F5080000 		.4byte	0x8f5
 3273 08b4 03       		.uleb128 0x3
 3274 08b5 91       		.byte	0x91
 3275 08b6 8077     		.sleb128 -1152
 3276 08b8 00       		.byte	0
 3277 08b9 00       		.byte	0
 3278 08ba 1D       		.uleb128 0x1d
 3279 08bb 12030000 		.4byte	.LBB7
 3280 08bf 3A000000 		.4byte	.LBE7-.LBB7
 3281 08c3 1A       		.uleb128 0x1a
 3282 08c4 5F020000 		.4byte	.LASF129
 3283 08c8 01       		.byte	0x1
 3284 08c9 D301     		.2byte	0x1d3
 3285 08cb 68000000 		.4byte	0x68
 3286 08cf 02       		.uleb128 0x2
 3287 08d0 91       		.byte	0x91
 3288 08d1 60       		.sleb128 -32
 3289 08d2 1A       		.uleb128 0x1a
 3290 08d3 2D060000 		.4byte	.LASF130
 3291 08d7 01       		.byte	0x1
 3292 08d8 D401     		.2byte	0x1d4
 3293 08da DF050000 		.4byte	0x5df
 3294 08de 03       		.uleb128 0x3
 3295 08df 91       		.byte	0x91
 3296 08e0 EC7E     		.sleb128 -148
 3297 08e2 00       		.byte	0
 3298 08e3 00       		.byte	0
 3299 08e4 00       		.byte	0
 3300 08e5 07       		.uleb128 0x7
 3301 08e6 E3000000 		.4byte	0xe3
 3302 08ea F5080000 		.4byte	0x8f5
 3303 08ee 08       		.uleb128 0x8
 3304 08ef F1000000 		.4byte	0xf1
 3305 08f3 C7       		.byte	0xc7
 3306 08f4 00       		.byte	0
 3307 08f5 07       		.uleb128 0x7
 3308 08f6 E3000000 		.4byte	0xe3
 3309 08fa 06090000 		.4byte	0x906
 3310 08fe 1F       		.uleb128 0x1f
 3311 08ff F1000000 		.4byte	0xf1
 3312 0903 E803     		.2byte	0x3e8
 3313 0905 00       		.byte	0
 3314 0906 1C       		.uleb128 0x1c
 3315 0907 84050000 		.4byte	.LASF131
 3316 090b 01       		.byte	0x1
 3317 090c F101     		.2byte	0x1f1
 3318 090e 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 75


 3319 0912 00000000 		.4byte	.LFB75
 3320 0916 44000000 		.4byte	.LFE75-.LFB75
 3321 091a 01       		.uleb128 0x1
 3322 091b 9C       		.byte	0x9c
 3323 091c 3A090000 		.4byte	0x93a
 3324 0920 1D       		.uleb128 0x1d
 3325 0921 20000000 		.4byte	.LBB8
 3326 0925 1A000000 		.4byte	.LBE8-.LBB8
 3327 0929 1A       		.uleb128 0x1a
 3328 092a 82020000 		.4byte	.LASF124
 3329 092e 01       		.byte	0x1
 3330 092f FC01     		.2byte	0x1fc
 3331 0931 4C000000 		.4byte	0x4c
 3332 0935 02       		.uleb128 0x2
 3333 0936 91       		.byte	0x91
 3334 0937 74       		.sleb128 -12
 3335 0938 00       		.byte	0
 3336 0939 00       		.byte	0
 3337 093a 1C       		.uleb128 0x1c
 3338 093b BF030000 		.4byte	.LASF132
 3339 093f 01       		.byte	0x1
 3340 0940 1102     		.2byte	0x211
 3341 0942 81000000 		.4byte	0x81
 3342 0946 00000000 		.4byte	.LFB76
 3343 094a 28030000 		.4byte	.LFE76-.LFB76
 3344 094e 01       		.uleb128 0x1
 3345 094f 9C       		.byte	0x9c
 3346 0950 F8090000 		.4byte	0x9f8
 3347 0954 1A       		.uleb128 0x1a
 3348 0955 0A050000 		.4byte	.LASF60
 3349 0959 01       		.byte	0x1
 3350 095a 1402     		.2byte	0x214
 3351 095c 4C000000 		.4byte	0x4c
 3352 0960 02       		.uleb128 0x2
 3353 0961 91       		.byte	0x91
 3354 0962 6C       		.sleb128 -20
 3355 0963 1A       		.uleb128 0x1a
 3356 0964 1A070000 		.4byte	.LASF133
 3357 0968 01       		.byte	0x1
 3358 0969 1502     		.2byte	0x215
 3359 096b F8090000 		.4byte	0x9f8
 3360 096f 02       		.uleb128 0x2
 3361 0970 91       		.byte	0x91
 3362 0971 48       		.sleb128 -56
 3363 0972 1A       		.uleb128 0x1a
 3364 0973 E2020000 		.4byte	.LASF59
 3365 0977 01       		.byte	0x1
 3366 0978 1902     		.2byte	0x219
 3367 097a 6D030000 		.4byte	0x36d
 3368 097e 03       		.uleb128 0x3
 3369 097f 91       		.byte	0x91
 3370 0980 B47F     		.sleb128 -76
 3371 0982 1A       		.uleb128 0x1a
 3372 0983 69030000 		.4byte	.LASF134
 3373 0987 01       		.byte	0x1
 3374 0988 3702     		.2byte	0x237
 3375 098a 79020000 		.4byte	0x279
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 76


 3376 098e 03       		.uleb128 0x3
 3377 098f 91       		.byte	0x91
 3378 0990 A07F     		.sleb128 -96
 3379 0992 1E       		.uleb128 0x1e
 3380 0993 26000000 		.4byte	.LBB9
 3381 0997 7A000000 		.4byte	.LBE9-.LBB9
 3382 099b B0090000 		.4byte	0x9b0
 3383 099f 1A       		.uleb128 0x1a
 3384 09a0 60070000 		.4byte	.LASF135
 3385 09a4 01       		.byte	0x1
 3386 09a5 1F02     		.2byte	0x21f
 3387 09a7 29020000 		.4byte	0x229
 3388 09ab 03       		.uleb128 0x3
 3389 09ac 91       		.byte	0x91
 3390 09ad 847F     		.sleb128 -124
 3391 09af 00       		.byte	0
 3392 09b0 1E       		.uleb128 0x1e
 3393 09b1 26010000 		.4byte	.LBB10
 3394 09b5 F4000000 		.4byte	.LBE10-.LBB10
 3395 09b9 CE090000 		.4byte	0x9ce
 3396 09bd 1A       		.uleb128 0x1a
 3397 09be B7070000 		.4byte	.LASF136
 3398 09c2 01       		.byte	0x1
 3399 09c3 5202     		.2byte	0x252
 3400 09c5 BD020000 		.4byte	0x2bd
 3401 09c9 03       		.uleb128 0x3
 3402 09ca 91       		.byte	0x91
 3403 09cb F47E     		.sleb128 -140
 3404 09cd 00       		.byte	0
 3405 09ce 1D       		.uleb128 0x1d
 3406 09cf 2A020000 		.4byte	.LBB11
 3407 09d3 8A000000 		.4byte	.LBE11-.LBB11
 3408 09d7 1A       		.uleb128 0x1a
 3409 09d8 34030000 		.4byte	.LASF137
 3410 09dc 01       		.byte	0x1
 3411 09dd 7502     		.2byte	0x275
 3412 09df BC040000 		.4byte	0x4bc
 3413 09e3 03       		.uleb128 0x3
 3414 09e4 91       		.byte	0x91
 3415 09e5 C47E     		.sleb128 -188
 3416 09e7 1A       		.uleb128 0x1a
 3417 09e8 FE030000 		.4byte	.LASF138
 3418 09ec 01       		.byte	0x1
 3419 09ed 7C02     		.2byte	0x27c
 3420 09ef 79040000 		.4byte	0x479
 3421 09f3 02       		.uleb128 0x2
 3422 09f4 91       		.byte	0x91
 3423 09f5 6B       		.sleb128 -21
 3424 09f6 00       		.byte	0
 3425 09f7 00       		.byte	0
 3426 09f8 07       		.uleb128 0x7
 3427 09f9 E3000000 		.4byte	0xe3
 3428 09fd 080A0000 		.4byte	0xa08
 3429 0a01 08       		.uleb128 0x8
 3430 0a02 F1000000 		.4byte	0xf1
 3431 0a06 1F       		.byte	0x1f
 3432 0a07 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 77


 3433 0a08 20       		.uleb128 0x20
 3434 0a09 20030000 		.4byte	.LASF139
 3435 0a0d 01       		.byte	0x1
 3436 0a0e 9602     		.2byte	0x296
 3437 0a10 81000000 		.4byte	0x81
 3438 0a14 00000000 		.4byte	.LFB77
 3439 0a18 74000000 		.4byte	.LFE77-.LFB77
 3440 0a1c 01       		.uleb128 0x1
 3441 0a1d 9C       		.byte	0x9c
 3442 0a1e 4E0A0000 		.4byte	0xa4e
 3443 0a22 21       		.uleb128 0x21
 3444 0a23 0A050000 		.4byte	.LASF60
 3445 0a27 01       		.byte	0x1
 3446 0a28 9602     		.2byte	0x296
 3447 0a2a 4C000000 		.4byte	0x4c
 3448 0a2e 02       		.uleb128 0x2
 3449 0a2f 91       		.byte	0x91
 3450 0a30 64       		.sleb128 -28
 3451 0a31 22       		.uleb128 0x22
 3452 0a32 7400     		.ascii	"t\000"
 3453 0a34 01       		.byte	0x1
 3454 0a35 9D02     		.2byte	0x29d
 3455 0a37 4E0A0000 		.4byte	0xa4e
 3456 0a3b 02       		.uleb128 0x2
 3457 0a3c 91       		.byte	0x91
 3458 0a3d 74       		.sleb128 -12
 3459 0a3e 1A       		.uleb128 0x1a
 3460 0a3f E9040000 		.4byte	.LASF140
 3461 0a43 01       		.byte	0x1
 3462 0a44 A202     		.2byte	0x2a2
 3463 0a46 77010000 		.4byte	0x177
 3464 0a4a 02       		.uleb128 0x2
 3465 0a4b 91       		.byte	0x91
 3466 0a4c 68       		.sleb128 -24
 3467 0a4d 00       		.byte	0
 3468 0a4e 06       		.uleb128 0x6
 3469 0a4f 04       		.byte	0x4
 3470 0a50 C8020000 		.4byte	0x2c8
 3471 0a54 20       		.uleb128 0x20
 3472 0a55 C1020000 		.4byte	.LASF141
 3473 0a59 01       		.byte	0x1
 3474 0a5a BF02     		.2byte	0x2bf
 3475 0a5c 81000000 		.4byte	0x81
 3476 0a60 00000000 		.4byte	.LFB78
 3477 0a64 38010000 		.4byte	.LFE78-.LFB78
 3478 0a68 01       		.uleb128 0x1
 3479 0a69 9C       		.byte	0x9c
 3480 0a6a CD0A0000 		.4byte	0xacd
 3481 0a6e 21       		.uleb128 0x21
 3482 0a6f E8020000 		.4byte	.LASF142
 3483 0a73 01       		.byte	0x1
 3484 0a74 BF02     		.2byte	0x2bf
 3485 0a76 F8000000 		.4byte	0xf8
 3486 0a7a 03       		.uleb128 0x3
 3487 0a7b 91       		.byte	0x91
 3488 0a7c 9C7E     		.sleb128 -228
 3489 0a7e 21       		.uleb128 0x21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 78


 3490 0a7f DD020000 		.4byte	.LASF143
 3491 0a83 01       		.byte	0x1
 3492 0a84 BF02     		.2byte	0x2bf
 3493 0a86 68000000 		.4byte	0x68
 3494 0a8a 03       		.uleb128 0x3
 3495 0a8b 91       		.byte	0x91
 3496 0a8c 987E     		.sleb128 -232
 3497 0a8e 21       		.uleb128 0x21
 3498 0a8f E0050000 		.4byte	.LASF144
 3499 0a93 01       		.byte	0x1
 3500 0a94 BF02     		.2byte	0x2bf
 3501 0a96 F8000000 		.4byte	0xf8
 3502 0a9a 03       		.uleb128 0x3
 3503 0a9b 91       		.byte	0x91
 3504 0a9c 947E     		.sleb128 -236
 3505 0a9e 1A       		.uleb128 0x1a
 3506 0a9f E0010000 		.4byte	.LASF145
 3507 0aa3 01       		.byte	0x1
 3508 0aa4 C102     		.2byte	0x2c1
 3509 0aa6 81000000 		.4byte	0x81
 3510 0aaa 02       		.uleb128 0x2
 3511 0aab 91       		.byte	0x91
 3512 0aac 77       		.sleb128 -9
 3513 0aad 1A       		.uleb128 0x1a
 3514 0aae 47000000 		.4byte	.LASF146
 3515 0ab2 01       		.byte	0x1
 3516 0ab3 C802     		.2byte	0x2c8
 3517 0ab5 CD0A0000 		.4byte	0xacd
 3518 0ab9 02       		.uleb128 0x2
 3519 0aba 91       		.byte	0x91
 3520 0abb 68       		.sleb128 -24
 3521 0abc 1A       		.uleb128 0x1a
 3522 0abd 42070000 		.4byte	.LASF121
 3523 0ac1 01       		.byte	0x1
 3524 0ac2 D002     		.2byte	0x2d0
 3525 0ac4 E5080000 		.4byte	0x8e5
 3526 0ac8 03       		.uleb128 0x3
 3527 0ac9 91       		.byte	0x91
 3528 0aca A07E     		.sleb128 -224
 3529 0acc 00       		.byte	0
 3530 0acd 07       		.uleb128 0x7
 3531 0ace E3000000 		.4byte	0xe3
 3532 0ad2 DD0A0000 		.4byte	0xadd
 3533 0ad6 08       		.uleb128 0x8
 3534 0ad7 F1000000 		.4byte	0xf1
 3535 0adb 0B       		.byte	0xb
 3536 0adc 00       		.byte	0
 3537 0add 23       		.uleb128 0x23
 3538 0ade 53010000 		.4byte	.LASF147
 3539 0ae2 0E       		.byte	0xe
 3540 0ae3 1207     		.2byte	0x712
 3541 0ae5 E90A0000 		.4byte	0xae9
 3542 0ae9 0C       		.uleb128 0xc
 3543 0aea 76000000 		.4byte	0x76
 3544 0aee 24       		.uleb128 0x24
 3545 0aef 37000000 		.4byte	.LASF148
 3546 0af3 0A       		.byte	0xa
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 79


 3547 0af4 11       		.byte	0x11
 3548 0af5 79040000 		.4byte	0x479
 3549 0af9 05       		.uleb128 0x5
 3550 0afa 03       		.byte	0x3
 3551 0afb 00000000 		.4byte	buffer_overflow
 3552 0aff 24       		.uleb128 0x24
 3553 0b00 8C040000 		.4byte	.LASF149
 3554 0b04 0A       		.byte	0xa
 3555 0b05 22       		.byte	0x22
 3556 0b06 8D000000 		.4byte	0x8d
 3557 0b0a 05       		.uleb128 0x5
 3558 0b0b 03       		.byte	0x3
 3559 0b0c 00000000 		.4byte	dataPointsInStack
 3560 0b10 24       		.uleb128 0x24
 3561 0b11 D5070000 		.4byte	.LASF150
 3562 0b15 0A       		.byte	0xa
 3563 0b16 23       		.byte	0x23
 3564 0b17 8D000000 		.4byte	0x8d
 3565 0b1b 05       		.uleb128 0x5
 3566 0b1c 03       		.byte	0x3
 3567 0b1d 00000000 		.4byte	dataPointsInStackDesired
 3568 0b21 07       		.uleb128 0x7
 3569 0b22 7D030000 		.4byte	0x37d
 3570 0b26 310B0000 		.4byte	0xb31
 3571 0b2a 08       		.uleb128 0x8
 3572 0b2b F1000000 		.4byte	0xf1
 3573 0b2f 95       		.byte	0x95
 3574 0b30 00       		.byte	0
 3575 0b31 24       		.uleb128 0x24
 3576 0b32 D0030000 		.4byte	.LASF151
 3577 0b36 0A       		.byte	0xa
 3578 0b37 24       		.byte	0x24
 3579 0b38 210B0000 		.4byte	0xb21
 3580 0b3c 05       		.uleb128 0x5
 3581 0b3d 03       		.byte	0x3
 3582 0b3e 00000000 		.4byte	data
 3583 0b42 24       		.uleb128 0x24
 3584 0b43 3A010000 		.4byte	.LASF152
 3585 0b47 0B       		.byte	0xb
 3586 0b48 21       		.byte	0x21
 3587 0b49 81000000 		.4byte	0x81
 3588 0b4d 05       		.uleb128 0x5
 3589 0b4e 03       		.byte	0x3
 3590 0b4f 00000000 		.4byte	modem_state
 3591 0b53 24       		.uleb128 0x24
 3592 0b54 49040000 		.4byte	.LASF153
 3593 0b58 0B       		.byte	0xb
 3594 0b59 64       		.byte	0x64
 3595 0b5a BD000000 		.4byte	0xbd
 3596 0b5e 05       		.uleb128 0x5
 3597 0b5f 03       		.byte	0x3
 3598 0b60 00000000 		.4byte	modem_start_time_stamp
 3599 0b64 24       		.uleb128 0x24
 3600 0b65 E6030000 		.4byte	.LASF89
 3601 0b69 0B       		.byte	0xb
 3602 0b6a 65       		.byte	0x65
 3603 0b6b B5030000 		.4byte	0x3b5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 80


 3604 0b6f 05       		.uleb128 0x5
 3605 0b70 03       		.byte	0x3
 3606 0b71 00000000 		.4byte	modem_info
 3607 0b75 24       		.uleb128 0x24
 3608 0b76 2B070000 		.4byte	.LASF154
 3609 0b7a 0B       		.byte	0xb
 3610 0b7b 66       		.byte	0x66
 3611 0b7c 29040000 		.4byte	0x429
 3612 0b80 05       		.uleb128 0x5
 3613 0b81 03       		.byte	0x3
 3614 0b82 00000000 		.4byte	modem_stats
 3615 0b86 24       		.uleb128 0x24
 3616 0b87 22050000 		.4byte	.LASF155
 3617 0b8b 0B       		.byte	0xb
 3618 0b8c 67       		.byte	0x67
 3619 0b8d 80040000 		.4byte	0x480
 3620 0b91 05       		.uleb128 0x5
 3621 0b92 03       		.byte	0x3
 3622 0b93 00000000 		.4byte	updatable_parameters
 3623 0b97 07       		.uleb128 0x7
 3624 0b98 E3000000 		.4byte	0xe3
 3625 0b9c A80B0000 		.4byte	0xba8
 3626 0ba0 1F       		.uleb128 0x1f
 3627 0ba1 F1000000 		.4byte	0xf1
 3628 0ba5 0F27     		.2byte	0x270f
 3629 0ba7 00       		.byte	0
 3630 0ba8 24       		.uleb128 0x24
 3631 0ba9 62050000 		.4byte	.LASF156
 3632 0bad 0D       		.byte	0xd
 3633 0bae 18       		.byte	0x18
 3634 0baf 970B0000 		.4byte	0xb97
 3635 0bb3 05       		.uleb128 0x5
 3636 0bb4 03       		.byte	0x3
 3637 0bb5 00000000 		.4byte	http_request
 3638 0bb9 24       		.uleb128 0x24
 3639 0bba 04080000 		.4byte	.LASF157
 3640 0bbe 0D       		.byte	0xd
 3641 0bbf 19       		.byte	0x19
 3642 0bc0 970B0000 		.4byte	0xb97
 3643 0bc4 05       		.uleb128 0x5
 3644 0bc5 03       		.byte	0x3
 3645 0bc6 00000000 		.4byte	http_body
 3646 0bca 24       		.uleb128 0x24
 3647 0bcb 37070000 		.4byte	.LASF158
 3648 0bcf 0D       		.byte	0xd
 3649 0bd0 1A       		.byte	0x1a
 3650 0bd1 E5080000 		.4byte	0x8e5
 3651 0bd5 05       		.uleb128 0x5
 3652 0bd6 03       		.byte	0x3
 3653 0bd7 00000000 		.4byte	http_route
 3654 0bdb 24       		.uleb128 0x24
 3655 0bdc 68060000 		.4byte	.LASF159
 3656 0be0 0D       		.byte	0xd
 3657 0be1 41       		.byte	0x41
 3658 0be2 37050000 		.4byte	0x537
 3659 0be6 05       		.uleb128 0x5
 3660 0be7 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 81


 3661 0be8 00000000 		.4byte	system_info
 3662 0bec 24       		.uleb128 0x24
 3663 0bed E6050000 		.4byte	.LASF160
 3664 0bf1 0D       		.byte	0xd
 3665 0bf2 53       		.byte	0x53
 3666 0bf3 73050000 		.4byte	0x573
 3667 0bf7 05       		.uleb128 0x5
 3668 0bf8 03       		.byte	0x3
 3669 0bf9 00000000 		.4byte	system_settings
 3670 0bfd 24       		.uleb128 0x24
 3671 0bfe 46010000 		.4byte	.LASF161
 3672 0c02 0D       		.byte	0xd
 3673 0c03 6F       		.byte	0x6f
 3674 0c04 00050000 		.4byte	0x500
 3675 0c08 05       		.uleb128 0x5
 3676 0c09 03       		.byte	0x3
 3677 0c0a 00000000 		.4byte	alarmMeasure
 3678 0c0e 24       		.uleb128 0x24
 3679 0c0f 8A010000 		.4byte	.LASF162
 3680 0c13 0D       		.byte	0xd
 3681 0c14 70       		.byte	0x70
 3682 0c15 81000000 		.4byte	0x81
 3683 0c19 05       		.uleb128 0x5
 3684 0c1a 03       		.byte	0x3
 3685 0c1b 00000000 		.4byte	timeToMeasure
 3686 0c1f 24       		.uleb128 0x24
 3687 0c20 F5020000 		.4byte	.LASF163
 3688 0c24 0D       		.byte	0xd
 3689 0c25 71       		.byte	0x71
 3690 0c26 00050000 		.4byte	0x500
 3691 0c2a 05       		.uleb128 0x5
 3692 0c2b 03       		.byte	0x3
 3693 0c2c 00000000 		.4byte	alarmSync
 3694 0c30 24       		.uleb128 0x24
 3695 0c31 B0010000 		.4byte	.LASF164
 3696 0c35 0D       		.byte	0xd
 3697 0c36 72       		.byte	0x72
 3698 0c37 81000000 		.4byte	0x81
 3699 0c3b 05       		.uleb128 0x5
 3700 0c3c 03       		.byte	0x3
 3701 0c3d 00000000 		.4byte	timeToSync
 3702 0c41 24       		.uleb128 0x24
 3703 0c42 F3040000 		.4byte	.LASF165
 3704 0c46 0D       		.byte	0xd
 3705 0c47 73       		.byte	0x73
 3706 0c48 81000000 		.4byte	0x81
 3707 0c4c 05       		.uleb128 0x5
 3708 0c4d 03       		.byte	0x3
 3709 0c4e 00000000 		.4byte	timeToSycnRemoteParams
 3710 0c52 25       		.uleb128 0x25
 3711 0c53 68657900 		.ascii	"hey\000"
 3712 0c57 0D       		.byte	0xd
 3713 0c58 74       		.byte	0x74
 3714 0c59 81000000 		.4byte	0x81
 3715 0c5d 05       		.uleb128 0x5
 3716 0c5e 03       		.byte	0x3
 3717 0c5f 00000000 		.4byte	hey
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 82


 3718 0c63 07       		.uleb128 0x7
 3719 0c64 E3000000 		.4byte	0xe3
 3720 0c68 730C0000 		.4byte	0xc73
 3721 0c6c 08       		.uleb128 0x8
 3722 0c6d F1000000 		.4byte	0xf1
 3723 0c71 1D       		.byte	0x1d
 3724 0c72 00       		.byte	0
 3725 0c73 24       		.uleb128 0x24
 3726 0c74 9A050000 		.4byte	.LASF166
 3727 0c78 01       		.byte	0x1
 3728 0c79 1D       		.byte	0x1d
 3729 0c7a 630C0000 		.4byte	0xc63
 3730 0c7e 05       		.uleb128 0x5
 3731 0c7f 03       		.byte	0x3
 3732 0c80 00000000 		.4byte	Data_fileName
 3733 0c84 24       		.uleb128 0x24
 3734 0c85 85030000 		.4byte	.LASF97
 3735 0c89 01       		.byte	0x1
 3736 0c8a 1E       		.byte	0x1e
 3737 0c8b 81000000 		.4byte	0x81
 3738 0c8f 05       		.uleb128 0x5
 3739 0c90 03       		.byte	0x3
 3740 0c91 00000000 		.4byte	try_counter
 3741 0c95 00       		.byte	0
 3742              		.section	.debug_abbrev,"",%progbits
 3743              	.Ldebug_abbrev0:
 3744 0000 01       		.uleb128 0x1
 3745 0001 11       		.uleb128 0x11
 3746 0002 01       		.byte	0x1
 3747 0003 25       		.uleb128 0x25
 3748 0004 0E       		.uleb128 0xe
 3749 0005 13       		.uleb128 0x13
 3750 0006 0B       		.uleb128 0xb
 3751 0007 03       		.uleb128 0x3
 3752 0008 0E       		.uleb128 0xe
 3753 0009 1B       		.uleb128 0x1b
 3754 000a 0E       		.uleb128 0xe
 3755 000b 55       		.uleb128 0x55
 3756 000c 17       		.uleb128 0x17
 3757 000d 11       		.uleb128 0x11
 3758 000e 01       		.uleb128 0x1
 3759 000f 10       		.uleb128 0x10
 3760 0010 17       		.uleb128 0x17
 3761 0011 00       		.byte	0
 3762 0012 00       		.byte	0
 3763 0013 02       		.uleb128 0x2
 3764 0014 24       		.uleb128 0x24
 3765 0015 00       		.byte	0
 3766 0016 0B       		.uleb128 0xb
 3767 0017 0B       		.uleb128 0xb
 3768 0018 3E       		.uleb128 0x3e
 3769 0019 0B       		.uleb128 0xb
 3770 001a 03       		.uleb128 0x3
 3771 001b 0E       		.uleb128 0xe
 3772 001c 00       		.byte	0
 3773 001d 00       		.byte	0
 3774 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 83


 3775 001f 16       		.uleb128 0x16
 3776 0020 00       		.byte	0
 3777 0021 03       		.uleb128 0x3
 3778 0022 0E       		.uleb128 0xe
 3779 0023 3A       		.uleb128 0x3a
 3780 0024 0B       		.uleb128 0xb
 3781 0025 3B       		.uleb128 0x3b
 3782 0026 0B       		.uleb128 0xb
 3783 0027 49       		.uleb128 0x49
 3784 0028 13       		.uleb128 0x13
 3785 0029 00       		.byte	0
 3786 002a 00       		.byte	0
 3787 002b 04       		.uleb128 0x4
 3788 002c 24       		.uleb128 0x24
 3789 002d 00       		.byte	0
 3790 002e 0B       		.uleb128 0xb
 3791 002f 0B       		.uleb128 0xb
 3792 0030 3E       		.uleb128 0x3e
 3793 0031 0B       		.uleb128 0xb
 3794 0032 03       		.uleb128 0x3
 3795 0033 08       		.uleb128 0x8
 3796 0034 00       		.byte	0
 3797 0035 00       		.byte	0
 3798 0036 05       		.uleb128 0x5
 3799 0037 16       		.uleb128 0x16
 3800 0038 00       		.byte	0
 3801 0039 03       		.uleb128 0x3
 3802 003a 0E       		.uleb128 0xe
 3803 003b 3A       		.uleb128 0x3a
 3804 003c 0B       		.uleb128 0xb
 3805 003d 3B       		.uleb128 0x3b
 3806 003e 05       		.uleb128 0x5
 3807 003f 49       		.uleb128 0x49
 3808 0040 13       		.uleb128 0x13
 3809 0041 00       		.byte	0
 3810 0042 00       		.byte	0
 3811 0043 06       		.uleb128 0x6
 3812 0044 0F       		.uleb128 0xf
 3813 0045 00       		.byte	0
 3814 0046 0B       		.uleb128 0xb
 3815 0047 0B       		.uleb128 0xb
 3816 0048 49       		.uleb128 0x49
 3817 0049 13       		.uleb128 0x13
 3818 004a 00       		.byte	0
 3819 004b 00       		.byte	0
 3820 004c 07       		.uleb128 0x7
 3821 004d 01       		.uleb128 0x1
 3822 004e 01       		.byte	0x1
 3823 004f 49       		.uleb128 0x49
 3824 0050 13       		.uleb128 0x13
 3825 0051 01       		.uleb128 0x1
 3826 0052 13       		.uleb128 0x13
 3827 0053 00       		.byte	0
 3828 0054 00       		.byte	0
 3829 0055 08       		.uleb128 0x8
 3830 0056 21       		.uleb128 0x21
 3831 0057 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 84


 3832 0058 49       		.uleb128 0x49
 3833 0059 13       		.uleb128 0x13
 3834 005a 2F       		.uleb128 0x2f
 3835 005b 0B       		.uleb128 0xb
 3836 005c 00       		.byte	0
 3837 005d 00       		.byte	0
 3838 005e 09       		.uleb128 0x9
 3839 005f 13       		.uleb128 0x13
 3840 0060 01       		.byte	0x1
 3841 0061 0B       		.uleb128 0xb
 3842 0062 0B       		.uleb128 0xb
 3843 0063 3A       		.uleb128 0x3a
 3844 0064 0B       		.uleb128 0xb
 3845 0065 3B       		.uleb128 0x3b
 3846 0066 0B       		.uleb128 0xb
 3847 0067 01       		.uleb128 0x1
 3848 0068 13       		.uleb128 0x13
 3849 0069 00       		.byte	0
 3850 006a 00       		.byte	0
 3851 006b 0A       		.uleb128 0xa
 3852 006c 0D       		.uleb128 0xd
 3853 006d 00       		.byte	0
 3854 006e 03       		.uleb128 0x3
 3855 006f 08       		.uleb128 0x8
 3856 0070 3A       		.uleb128 0x3a
 3857 0071 0B       		.uleb128 0xb
 3858 0072 3B       		.uleb128 0x3b
 3859 0073 0B       		.uleb128 0xb
 3860 0074 49       		.uleb128 0x49
 3861 0075 13       		.uleb128 0x13
 3862 0076 38       		.uleb128 0x38
 3863 0077 0B       		.uleb128 0xb
 3864 0078 00       		.byte	0
 3865 0079 00       		.byte	0
 3866 007a 0B       		.uleb128 0xb
 3867 007b 0D       		.uleb128 0xd
 3868 007c 00       		.byte	0
 3869 007d 03       		.uleb128 0x3
 3870 007e 0E       		.uleb128 0xe
 3871 007f 3A       		.uleb128 0x3a
 3872 0080 0B       		.uleb128 0xb
 3873 0081 3B       		.uleb128 0x3b
 3874 0082 0B       		.uleb128 0xb
 3875 0083 49       		.uleb128 0x49
 3876 0084 13       		.uleb128 0x13
 3877 0085 38       		.uleb128 0x38
 3878 0086 0B       		.uleb128 0xb
 3879 0087 00       		.byte	0
 3880 0088 00       		.byte	0
 3881 0089 0C       		.uleb128 0xc
 3882 008a 35       		.uleb128 0x35
 3883 008b 00       		.byte	0
 3884 008c 49       		.uleb128 0x49
 3885 008d 13       		.uleb128 0x13
 3886 008e 00       		.byte	0
 3887 008f 00       		.byte	0
 3888 0090 0D       		.uleb128 0xd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 85


 3889 0091 13       		.uleb128 0x13
 3890 0092 01       		.byte	0x1
 3891 0093 0B       		.uleb128 0xb
 3892 0094 05       		.uleb128 0x5
 3893 0095 3A       		.uleb128 0x3a
 3894 0096 0B       		.uleb128 0xb
 3895 0097 3B       		.uleb128 0x3b
 3896 0098 0B       		.uleb128 0xb
 3897 0099 01       		.uleb128 0x1
 3898 009a 13       		.uleb128 0x13
 3899 009b 00       		.byte	0
 3900 009c 00       		.byte	0
 3901 009d 0E       		.uleb128 0xe
 3902 009e 13       		.uleb128 0x13
 3903 009f 01       		.byte	0x1
 3904 00a0 03       		.uleb128 0x3
 3905 00a1 08       		.uleb128 0x8
 3906 00a2 0B       		.uleb128 0xb
 3907 00a3 0B       		.uleb128 0xb
 3908 00a4 3A       		.uleb128 0x3a
 3909 00a5 0B       		.uleb128 0xb
 3910 00a6 3B       		.uleb128 0x3b
 3911 00a7 0B       		.uleb128 0xb
 3912 00a8 01       		.uleb128 0x1
 3913 00a9 13       		.uleb128 0x13
 3914 00aa 00       		.byte	0
 3915 00ab 00       		.byte	0
 3916 00ac 0F       		.uleb128 0xf
 3917 00ad 2E       		.uleb128 0x2e
 3918 00ae 00       		.byte	0
 3919 00af 3F       		.uleb128 0x3f
 3920 00b0 19       		.uleb128 0x19
 3921 00b1 03       		.uleb128 0x3
 3922 00b2 0E       		.uleb128 0xe
 3923 00b3 3A       		.uleb128 0x3a
 3924 00b4 0B       		.uleb128 0xb
 3925 00b5 3B       		.uleb128 0x3b
 3926 00b6 0B       		.uleb128 0xb
 3927 00b7 27       		.uleb128 0x27
 3928 00b8 19       		.uleb128 0x19
 3929 00b9 11       		.uleb128 0x11
 3930 00ba 01       		.uleb128 0x1
 3931 00bb 12       		.uleb128 0x12
 3932 00bc 06       		.uleb128 0x6
 3933 00bd 40       		.uleb128 0x40
 3934 00be 18       		.uleb128 0x18
 3935 00bf 9642     		.uleb128 0x2116
 3936 00c1 19       		.uleb128 0x19
 3937 00c2 00       		.byte	0
 3938 00c3 00       		.byte	0
 3939 00c4 10       		.uleb128 0x10
 3940 00c5 2E       		.uleb128 0x2e
 3941 00c6 01       		.byte	0x1
 3942 00c7 3F       		.uleb128 0x3f
 3943 00c8 19       		.uleb128 0x19
 3944 00c9 03       		.uleb128 0x3
 3945 00ca 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 86


 3946 00cb 3A       		.uleb128 0x3a
 3947 00cc 0B       		.uleb128 0xb
 3948 00cd 3B       		.uleb128 0x3b
 3949 00ce 0B       		.uleb128 0xb
 3950 00cf 11       		.uleb128 0x11
 3951 00d0 01       		.uleb128 0x1
 3952 00d1 12       		.uleb128 0x12
 3953 00d2 06       		.uleb128 0x6
 3954 00d3 40       		.uleb128 0x40
 3955 00d4 18       		.uleb128 0x18
 3956 00d5 9642     		.uleb128 0x2116
 3957 00d7 19       		.uleb128 0x19
 3958 00d8 01       		.uleb128 0x1
 3959 00d9 13       		.uleb128 0x13
 3960 00da 00       		.byte	0
 3961 00db 00       		.byte	0
 3962 00dc 11       		.uleb128 0x11
 3963 00dd 34       		.uleb128 0x34
 3964 00de 00       		.byte	0
 3965 00df 03       		.uleb128 0x3
 3966 00e0 0E       		.uleb128 0xe
 3967 00e1 3A       		.uleb128 0x3a
 3968 00e2 0B       		.uleb128 0xb
 3969 00e3 3B       		.uleb128 0x3b
 3970 00e4 0B       		.uleb128 0xb
 3971 00e5 49       		.uleb128 0x49
 3972 00e6 13       		.uleb128 0x13
 3973 00e7 02       		.uleb128 0x2
 3974 00e8 18       		.uleb128 0x18
 3975 00e9 00       		.byte	0
 3976 00ea 00       		.byte	0
 3977 00eb 12       		.uleb128 0x12
 3978 00ec 2E       		.uleb128 0x2e
 3979 00ed 01       		.byte	0x1
 3980 00ee 3F       		.uleb128 0x3f
 3981 00ef 19       		.uleb128 0x19
 3982 00f0 03       		.uleb128 0x3
 3983 00f1 0E       		.uleb128 0xe
 3984 00f2 3A       		.uleb128 0x3a
 3985 00f3 0B       		.uleb128 0xb
 3986 00f4 3B       		.uleb128 0x3b
 3987 00f5 0B       		.uleb128 0xb
 3988 00f6 49       		.uleb128 0x49
 3989 00f7 13       		.uleb128 0x13
 3990 00f8 11       		.uleb128 0x11
 3991 00f9 01       		.uleb128 0x1
 3992 00fa 12       		.uleb128 0x12
 3993 00fb 06       		.uleb128 0x6
 3994 00fc 40       		.uleb128 0x40
 3995 00fd 18       		.uleb128 0x18
 3996 00fe 9642     		.uleb128 0x2116
 3997 0100 19       		.uleb128 0x19
 3998 0101 01       		.uleb128 0x1
 3999 0102 13       		.uleb128 0x13
 4000 0103 00       		.byte	0
 4001 0104 00       		.byte	0
 4002 0105 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 87


 4003 0106 2E       		.uleb128 0x2e
 4004 0107 00       		.byte	0
 4005 0108 3F       		.uleb128 0x3f
 4006 0109 19       		.uleb128 0x19
 4007 010a 03       		.uleb128 0x3
 4008 010b 0E       		.uleb128 0xe
 4009 010c 3A       		.uleb128 0x3a
 4010 010d 0B       		.uleb128 0xb
 4011 010e 3B       		.uleb128 0x3b
 4012 010f 0B       		.uleb128 0xb
 4013 0110 11       		.uleb128 0x11
 4014 0111 01       		.uleb128 0x1
 4015 0112 12       		.uleb128 0x12
 4016 0113 06       		.uleb128 0x6
 4017 0114 40       		.uleb128 0x40
 4018 0115 18       		.uleb128 0x18
 4019 0116 9642     		.uleb128 0x2116
 4020 0118 19       		.uleb128 0x19
 4021 0119 00       		.byte	0
 4022 011a 00       		.byte	0
 4023 011b 14       		.uleb128 0x14
 4024 011c 2E       		.uleb128 0x2e
 4025 011d 01       		.byte	0x1
 4026 011e 3F       		.uleb128 0x3f
 4027 011f 19       		.uleb128 0x19
 4028 0120 03       		.uleb128 0x3
 4029 0121 0E       		.uleb128 0xe
 4030 0122 3A       		.uleb128 0x3a
 4031 0123 0B       		.uleb128 0xb
 4032 0124 3B       		.uleb128 0x3b
 4033 0125 0B       		.uleb128 0xb
 4034 0126 27       		.uleb128 0x27
 4035 0127 19       		.uleb128 0x19
 4036 0128 11       		.uleb128 0x11
 4037 0129 01       		.uleb128 0x1
 4038 012a 12       		.uleb128 0x12
 4039 012b 06       		.uleb128 0x6
 4040 012c 40       		.uleb128 0x40
 4041 012d 18       		.uleb128 0x18
 4042 012e 9642     		.uleb128 0x2116
 4043 0130 19       		.uleb128 0x19
 4044 0131 01       		.uleb128 0x1
 4045 0132 13       		.uleb128 0x13
 4046 0133 00       		.byte	0
 4047 0134 00       		.byte	0
 4048 0135 15       		.uleb128 0x15
 4049 0136 05       		.uleb128 0x5
 4050 0137 00       		.byte	0
 4051 0138 03       		.uleb128 0x3
 4052 0139 0E       		.uleb128 0xe
 4053 013a 3A       		.uleb128 0x3a
 4054 013b 0B       		.uleb128 0xb
 4055 013c 3B       		.uleb128 0x3b
 4056 013d 0B       		.uleb128 0xb
 4057 013e 49       		.uleb128 0x49
 4058 013f 13       		.uleb128 0x13
 4059 0140 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 88


 4060 0141 18       		.uleb128 0x18
 4061 0142 00       		.byte	0
 4062 0143 00       		.byte	0
 4063 0144 16       		.uleb128 0x16
 4064 0145 2E       		.uleb128 0x2e
 4065 0146 01       		.byte	0x1
 4066 0147 3F       		.uleb128 0x3f
 4067 0148 19       		.uleb128 0x19
 4068 0149 03       		.uleb128 0x3
 4069 014a 0E       		.uleb128 0xe
 4070 014b 3A       		.uleb128 0x3a
 4071 014c 0B       		.uleb128 0xb
 4072 014d 3B       		.uleb128 0x3b
 4073 014e 0B       		.uleb128 0xb
 4074 014f 27       		.uleb128 0x27
 4075 0150 19       		.uleb128 0x19
 4076 0151 49       		.uleb128 0x49
 4077 0152 13       		.uleb128 0x13
 4078 0153 11       		.uleb128 0x11
 4079 0154 01       		.uleb128 0x1
 4080 0155 12       		.uleb128 0x12
 4081 0156 06       		.uleb128 0x6
 4082 0157 40       		.uleb128 0x40
 4083 0158 18       		.uleb128 0x18
 4084 0159 9642     		.uleb128 0x2116
 4085 015b 19       		.uleb128 0x19
 4086 015c 01       		.uleb128 0x1
 4087 015d 13       		.uleb128 0x13
 4088 015e 00       		.byte	0
 4089 015f 00       		.byte	0
 4090 0160 17       		.uleb128 0x17
 4091 0161 2E       		.uleb128 0x2e
 4092 0162 01       		.byte	0x1
 4093 0163 3F       		.uleb128 0x3f
 4094 0164 19       		.uleb128 0x19
 4095 0165 03       		.uleb128 0x3
 4096 0166 0E       		.uleb128 0xe
 4097 0167 3A       		.uleb128 0x3a
 4098 0168 0B       		.uleb128 0xb
 4099 0169 3B       		.uleb128 0x3b
 4100 016a 0B       		.uleb128 0xb
 4101 016b 27       		.uleb128 0x27
 4102 016c 19       		.uleb128 0x19
 4103 016d 11       		.uleb128 0x11
 4104 016e 01       		.uleb128 0x1
 4105 016f 12       		.uleb128 0x12
 4106 0170 06       		.uleb128 0x6
 4107 0171 40       		.uleb128 0x40
 4108 0172 18       		.uleb128 0x18
 4109 0173 9742     		.uleb128 0x2117
 4110 0175 19       		.uleb128 0x19
 4111 0176 01       		.uleb128 0x1
 4112 0177 13       		.uleb128 0x13
 4113 0178 00       		.byte	0
 4114 0179 00       		.byte	0
 4115 017a 18       		.uleb128 0x18
 4116 017b 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 89


 4117 017c 01       		.byte	0x1
 4118 017d 3F       		.uleb128 0x3f
 4119 017e 19       		.uleb128 0x19
 4120 017f 03       		.uleb128 0x3
 4121 0180 0E       		.uleb128 0xe
 4122 0181 3A       		.uleb128 0x3a
 4123 0182 0B       		.uleb128 0xb
 4124 0183 3B       		.uleb128 0x3b
 4125 0184 0B       		.uleb128 0xb
 4126 0185 27       		.uleb128 0x27
 4127 0186 19       		.uleb128 0x19
 4128 0187 49       		.uleb128 0x49
 4129 0188 13       		.uleb128 0x13
 4130 0189 11       		.uleb128 0x11
 4131 018a 01       		.uleb128 0x1
 4132 018b 12       		.uleb128 0x12
 4133 018c 06       		.uleb128 0x6
 4134 018d 40       		.uleb128 0x40
 4135 018e 18       		.uleb128 0x18
 4136 018f 9742     		.uleb128 0x2117
 4137 0191 19       		.uleb128 0x19
 4138 0192 01       		.uleb128 0x1
 4139 0193 13       		.uleb128 0x13
 4140 0194 00       		.byte	0
 4141 0195 00       		.byte	0
 4142 0196 19       		.uleb128 0x19
 4143 0197 2E       		.uleb128 0x2e
 4144 0198 01       		.byte	0x1
 4145 0199 3F       		.uleb128 0x3f
 4146 019a 19       		.uleb128 0x19
 4147 019b 03       		.uleb128 0x3
 4148 019c 0E       		.uleb128 0xe
 4149 019d 3A       		.uleb128 0x3a
 4150 019e 0B       		.uleb128 0xb
 4151 019f 3B       		.uleb128 0x3b
 4152 01a0 05       		.uleb128 0x5
 4153 01a1 11       		.uleb128 0x11
 4154 01a2 01       		.uleb128 0x1
 4155 01a3 12       		.uleb128 0x12
 4156 01a4 06       		.uleb128 0x6
 4157 01a5 40       		.uleb128 0x40
 4158 01a6 18       		.uleb128 0x18
 4159 01a7 9642     		.uleb128 0x2116
 4160 01a9 19       		.uleb128 0x19
 4161 01aa 01       		.uleb128 0x1
 4162 01ab 13       		.uleb128 0x13
 4163 01ac 00       		.byte	0
 4164 01ad 00       		.byte	0
 4165 01ae 1A       		.uleb128 0x1a
 4166 01af 34       		.uleb128 0x34
 4167 01b0 00       		.byte	0
 4168 01b1 03       		.uleb128 0x3
 4169 01b2 0E       		.uleb128 0xe
 4170 01b3 3A       		.uleb128 0x3a
 4171 01b4 0B       		.uleb128 0xb
 4172 01b5 3B       		.uleb128 0x3b
 4173 01b6 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 90


 4174 01b7 49       		.uleb128 0x49
 4175 01b8 13       		.uleb128 0x13
 4176 01b9 02       		.uleb128 0x2
 4177 01ba 18       		.uleb128 0x18
 4178 01bb 00       		.byte	0
 4179 01bc 00       		.byte	0
 4180 01bd 1B       		.uleb128 0x1b
 4181 01be 2E       		.uleb128 0x2e
 4182 01bf 00       		.byte	0
 4183 01c0 3F       		.uleb128 0x3f
 4184 01c1 19       		.uleb128 0x19
 4185 01c2 03       		.uleb128 0x3
 4186 01c3 0E       		.uleb128 0xe
 4187 01c4 3A       		.uleb128 0x3a
 4188 01c5 0B       		.uleb128 0xb
 4189 01c6 3B       		.uleb128 0x3b
 4190 01c7 05       		.uleb128 0x5
 4191 01c8 27       		.uleb128 0x27
 4192 01c9 19       		.uleb128 0x19
 4193 01ca 49       		.uleb128 0x49
 4194 01cb 13       		.uleb128 0x13
 4195 01cc 11       		.uleb128 0x11
 4196 01cd 01       		.uleb128 0x1
 4197 01ce 12       		.uleb128 0x12
 4198 01cf 06       		.uleb128 0x6
 4199 01d0 40       		.uleb128 0x40
 4200 01d1 18       		.uleb128 0x18
 4201 01d2 9642     		.uleb128 0x2116
 4202 01d4 19       		.uleb128 0x19
 4203 01d5 00       		.byte	0
 4204 01d6 00       		.byte	0
 4205 01d7 1C       		.uleb128 0x1c
 4206 01d8 2E       		.uleb128 0x2e
 4207 01d9 01       		.byte	0x1
 4208 01da 3F       		.uleb128 0x3f
 4209 01db 19       		.uleb128 0x19
 4210 01dc 03       		.uleb128 0x3
 4211 01dd 0E       		.uleb128 0xe
 4212 01de 3A       		.uleb128 0x3a
 4213 01df 0B       		.uleb128 0xb
 4214 01e0 3B       		.uleb128 0x3b
 4215 01e1 05       		.uleb128 0x5
 4216 01e2 49       		.uleb128 0x49
 4217 01e3 13       		.uleb128 0x13
 4218 01e4 11       		.uleb128 0x11
 4219 01e5 01       		.uleb128 0x1
 4220 01e6 12       		.uleb128 0x12
 4221 01e7 06       		.uleb128 0x6
 4222 01e8 40       		.uleb128 0x40
 4223 01e9 18       		.uleb128 0x18
 4224 01ea 9642     		.uleb128 0x2116
 4225 01ec 19       		.uleb128 0x19
 4226 01ed 01       		.uleb128 0x1
 4227 01ee 13       		.uleb128 0x13
 4228 01ef 00       		.byte	0
 4229 01f0 00       		.byte	0
 4230 01f1 1D       		.uleb128 0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 91


 4231 01f2 0B       		.uleb128 0xb
 4232 01f3 01       		.byte	0x1
 4233 01f4 11       		.uleb128 0x11
 4234 01f5 01       		.uleb128 0x1
 4235 01f6 12       		.uleb128 0x12
 4236 01f7 06       		.uleb128 0x6
 4237 01f8 00       		.byte	0
 4238 01f9 00       		.byte	0
 4239 01fa 1E       		.uleb128 0x1e
 4240 01fb 0B       		.uleb128 0xb
 4241 01fc 01       		.byte	0x1
 4242 01fd 11       		.uleb128 0x11
 4243 01fe 01       		.uleb128 0x1
 4244 01ff 12       		.uleb128 0x12
 4245 0200 06       		.uleb128 0x6
 4246 0201 01       		.uleb128 0x1
 4247 0202 13       		.uleb128 0x13
 4248 0203 00       		.byte	0
 4249 0204 00       		.byte	0
 4250 0205 1F       		.uleb128 0x1f
 4251 0206 21       		.uleb128 0x21
 4252 0207 00       		.byte	0
 4253 0208 49       		.uleb128 0x49
 4254 0209 13       		.uleb128 0x13
 4255 020a 2F       		.uleb128 0x2f
 4256 020b 05       		.uleb128 0x5
 4257 020c 00       		.byte	0
 4258 020d 00       		.byte	0
 4259 020e 20       		.uleb128 0x20
 4260 020f 2E       		.uleb128 0x2e
 4261 0210 01       		.byte	0x1
 4262 0211 3F       		.uleb128 0x3f
 4263 0212 19       		.uleb128 0x19
 4264 0213 03       		.uleb128 0x3
 4265 0214 0E       		.uleb128 0xe
 4266 0215 3A       		.uleb128 0x3a
 4267 0216 0B       		.uleb128 0xb
 4268 0217 3B       		.uleb128 0x3b
 4269 0218 05       		.uleb128 0x5
 4270 0219 27       		.uleb128 0x27
 4271 021a 19       		.uleb128 0x19
 4272 021b 49       		.uleb128 0x49
 4273 021c 13       		.uleb128 0x13
 4274 021d 11       		.uleb128 0x11
 4275 021e 01       		.uleb128 0x1
 4276 021f 12       		.uleb128 0x12
 4277 0220 06       		.uleb128 0x6
 4278 0221 40       		.uleb128 0x40
 4279 0222 18       		.uleb128 0x18
 4280 0223 9642     		.uleb128 0x2116
 4281 0225 19       		.uleb128 0x19
 4282 0226 01       		.uleb128 0x1
 4283 0227 13       		.uleb128 0x13
 4284 0228 00       		.byte	0
 4285 0229 00       		.byte	0
 4286 022a 21       		.uleb128 0x21
 4287 022b 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 92


 4288 022c 00       		.byte	0
 4289 022d 03       		.uleb128 0x3
 4290 022e 0E       		.uleb128 0xe
 4291 022f 3A       		.uleb128 0x3a
 4292 0230 0B       		.uleb128 0xb
 4293 0231 3B       		.uleb128 0x3b
 4294 0232 05       		.uleb128 0x5
 4295 0233 49       		.uleb128 0x49
 4296 0234 13       		.uleb128 0x13
 4297 0235 02       		.uleb128 0x2
 4298 0236 18       		.uleb128 0x18
 4299 0237 00       		.byte	0
 4300 0238 00       		.byte	0
 4301 0239 22       		.uleb128 0x22
 4302 023a 34       		.uleb128 0x34
 4303 023b 00       		.byte	0
 4304 023c 03       		.uleb128 0x3
 4305 023d 08       		.uleb128 0x8
 4306 023e 3A       		.uleb128 0x3a
 4307 023f 0B       		.uleb128 0xb
 4308 0240 3B       		.uleb128 0x3b
 4309 0241 05       		.uleb128 0x5
 4310 0242 49       		.uleb128 0x49
 4311 0243 13       		.uleb128 0x13
 4312 0244 02       		.uleb128 0x2
 4313 0245 18       		.uleb128 0x18
 4314 0246 00       		.byte	0
 4315 0247 00       		.byte	0
 4316 0248 23       		.uleb128 0x23
 4317 0249 34       		.uleb128 0x34
 4318 024a 00       		.byte	0
 4319 024b 03       		.uleb128 0x3
 4320 024c 0E       		.uleb128 0xe
 4321 024d 3A       		.uleb128 0x3a
 4322 024e 0B       		.uleb128 0xb
 4323 024f 3B       		.uleb128 0x3b
 4324 0250 05       		.uleb128 0x5
 4325 0251 49       		.uleb128 0x49
 4326 0252 13       		.uleb128 0x13
 4327 0253 3F       		.uleb128 0x3f
 4328 0254 19       		.uleb128 0x19
 4329 0255 3C       		.uleb128 0x3c
 4330 0256 19       		.uleb128 0x19
 4331 0257 00       		.byte	0
 4332 0258 00       		.byte	0
 4333 0259 24       		.uleb128 0x24
 4334 025a 34       		.uleb128 0x34
 4335 025b 00       		.byte	0
 4336 025c 03       		.uleb128 0x3
 4337 025d 0E       		.uleb128 0xe
 4338 025e 3A       		.uleb128 0x3a
 4339 025f 0B       		.uleb128 0xb
 4340 0260 3B       		.uleb128 0x3b
 4341 0261 0B       		.uleb128 0xb
 4342 0262 49       		.uleb128 0x49
 4343 0263 13       		.uleb128 0x13
 4344 0264 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 93


 4345 0265 19       		.uleb128 0x19
 4346 0266 02       		.uleb128 0x2
 4347 0267 18       		.uleb128 0x18
 4348 0268 00       		.byte	0
 4349 0269 00       		.byte	0
 4350 026a 25       		.uleb128 0x25
 4351 026b 34       		.uleb128 0x34
 4352 026c 00       		.byte	0
 4353 026d 03       		.uleb128 0x3
 4354 026e 08       		.uleb128 0x8
 4355 026f 3A       		.uleb128 0x3a
 4356 0270 0B       		.uleb128 0xb
 4357 0271 3B       		.uleb128 0x3b
 4358 0272 0B       		.uleb128 0xb
 4359 0273 49       		.uleb128 0x49
 4360 0274 13       		.uleb128 0x13
 4361 0275 3F       		.uleb128 0x3f
 4362 0276 19       		.uleb128 0x19
 4363 0277 02       		.uleb128 0x2
 4364 0278 18       		.uleb128 0x18
 4365 0279 00       		.byte	0
 4366 027a 00       		.byte	0
 4367 027b 00       		.byte	0
 4368              		.section	.debug_aranges,"",%progbits
 4369 0000 8C000000 		.4byte	0x8c
 4370 0004 0200     		.2byte	0x2
 4371 0006 00000000 		.4byte	.Ldebug_info0
 4372 000a 04       		.byte	0x4
 4373 000b 00       		.byte	0
 4374 000c 0000     		.2byte	0
 4375 000e 0000     		.2byte	0
 4376 0010 00000000 		.4byte	.LFB64
 4377 0014 0C000000 		.4byte	.LFE64-.LFB64
 4378 0018 00000000 		.4byte	.LFB65
 4379 001c 2C010000 		.4byte	.LFE65-.LFB65
 4380 0020 00000000 		.4byte	.LFB66
 4381 0024 64000000 		.4byte	.LFE66-.LFB66
 4382 0028 00000000 		.4byte	.LFB67
 4383 002c 2A000000 		.4byte	.LFE67-.LFB67
 4384 0030 00000000 		.4byte	.LFB68
 4385 0034 50000000 		.4byte	.LFE68-.LFB68
 4386 0038 00000000 		.4byte	.LFB69
 4387 003c 48000000 		.4byte	.LFE69-.LFB69
 4388 0040 00000000 		.4byte	.LFB70
 4389 0044 1E000000 		.4byte	.LFE70-.LFB70
 4390 0048 00000000 		.4byte	.LFB71
 4391 004c 46000000 		.4byte	.LFE71-.LFB71
 4392 0050 00000000 		.4byte	.LFB72
 4393 0054 2C010000 		.4byte	.LFE72-.LFB72
 4394 0058 00000000 		.4byte	.LFB73
 4395 005c 1E000000 		.4byte	.LFE73-.LFB73
 4396 0060 00000000 		.4byte	.LFB74
 4397 0064 30040000 		.4byte	.LFE74-.LFB74
 4398 0068 00000000 		.4byte	.LFB75
 4399 006c 44000000 		.4byte	.LFE75-.LFB75
 4400 0070 00000000 		.4byte	.LFB76
 4401 0074 28030000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 94


 4402 0078 00000000 		.4byte	.LFB77
 4403 007c 74000000 		.4byte	.LFE77-.LFB77
 4404 0080 00000000 		.4byte	.LFB78
 4405 0084 38010000 		.4byte	.LFE78-.LFB78
 4406 0088 00000000 		.4byte	0
 4407 008c 00000000 		.4byte	0
 4408              		.section	.debug_ranges,"",%progbits
 4409              	.Ldebug_ranges0:
 4410 0000 00000000 		.4byte	.LFB64
 4411 0004 0C000000 		.4byte	.LFE64
 4412 0008 00000000 		.4byte	.LFB65
 4413 000c 2C010000 		.4byte	.LFE65
 4414 0010 00000000 		.4byte	.LFB66
 4415 0014 64000000 		.4byte	.LFE66
 4416 0018 00000000 		.4byte	.LFB67
 4417 001c 2A000000 		.4byte	.LFE67
 4418 0020 00000000 		.4byte	.LFB68
 4419 0024 50000000 		.4byte	.LFE68
 4420 0028 00000000 		.4byte	.LFB69
 4421 002c 48000000 		.4byte	.LFE69
 4422 0030 00000000 		.4byte	.LFB70
 4423 0034 1E000000 		.4byte	.LFE70
 4424 0038 00000000 		.4byte	.LFB71
 4425 003c 46000000 		.4byte	.LFE71
 4426 0040 00000000 		.4byte	.LFB72
 4427 0044 2C010000 		.4byte	.LFE72
 4428 0048 00000000 		.4byte	.LFB73
 4429 004c 1E000000 		.4byte	.LFE73
 4430 0050 00000000 		.4byte	.LFB74
 4431 0054 30040000 		.4byte	.LFE74
 4432 0058 00000000 		.4byte	.LFB75
 4433 005c 44000000 		.4byte	.LFE75
 4434 0060 00000000 		.4byte	.LFB76
 4435 0064 28030000 		.4byte	.LFE76
 4436 0068 00000000 		.4byte	.LFB77
 4437 006c 74000000 		.4byte	.LFE77
 4438 0070 00000000 		.4byte	.LFB78
 4439 0074 38010000 		.4byte	.LFE78
 4440 0078 00000000 		.4byte	0
 4441 007c 00000000 		.4byte	0
 4442              		.section	.debug_line,"",%progbits
 4443              	.Ldebug_line0:
 4444 0000 3B040000 		.section	.debug_str,"MS",%progbits,1
 4444      02002902 
 4444      00000201 
 4444      FB0E0D00 
 4444      01010101 
 4445              	.LASF115:
 4446 0000 745F6D6F 		.ascii	"t_modem\000"
 4446      64656D00 
 4447              	.LASF12:
 4448 0008 75696E74 		.ascii	"uint16\000"
 4448      313600
 4449              	.LASF82:
 4450 000f 646F5F72 		.ascii	"do_reading\000"
 4450      65616469 
 4450      6E6700
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 95


 4451              	.LASF52:
 4452 001a 746D5F68 		.ascii	"tm_hour\000"
 4452      6F757200 
 4453              	.LASF37:
 4454 0022 6E756D5F 		.ascii	"num_invalid_readings\000"
 4454      696E7661 
 4454      6C69645F 
 4454      72656164 
 4454      696E6773 
 4455              	.LASF148:
 4456 0037 62756666 		.ascii	"buffer_overflow\000"
 4456      65725F6F 
 4456      76657266 
 4456      6C6F7700 
 4457              	.LASF146:
 4458 0047 66696C65 		.ascii	"fileName\000"
 4458      4E616D65 
 4458      00
 4459              	.LASF0:
 4460 0050 7369676E 		.ascii	"signed char\000"
 4460      65642063 
 4460      68617200 
 4461              	.LASF87:
 4462 005c 636F756E 		.ascii	"countDownResetCondition\000"
 4462      74446F77 
 4462      6E526573 
 4462      6574436F 
 4462      6E646974 
 4463              	.LASF170:
 4464 0074 57616B65 		.ascii	"Wakeup_ISR\000"
 4464      75705F49 
 4464      535200
 4465              	.LASF167:
 4466 007f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4466      43313120 
 4466      352E342E 
 4466      31203230 
 4466      31363036 
 4467 00b2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4467      20726576 
 4467      6973696F 
 4467      6E203233 
 4467      37373135 
 4468 00e5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4468      66756E63 
 4468      74696F6E 
 4468      2D736563 
 4468      74696F6E 
 4469              	.LASF113:
 4470 010d 745F7072 		.ascii	"t_pressure\000"
 4470      65737375 
 4470      726500
 4471              	.LASF27:
 4472 0118 4D6F6E74 		.ascii	"Month\000"
 4472      6800
 4473              	.LASF7:
 4474 011e 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 96


 4474      206C6F6E 
 4474      6720756E 
 4474      7369676E 
 4474      65642069 
 4475              	.LASF23:
 4476 0135 486F7572 		.ascii	"Hour\000"
 4476      00
 4477              	.LASF152:
 4478 013a 6D6F6465 		.ascii	"modem_state\000"
 4478      6D5F7374 
 4478      61746500 
 4479              	.LASF161:
 4480 0146 616C6172 		.ascii	"alarmMeasure\000"
 4480      6D4D6561 
 4480      73757265 
 4480      00
 4481              	.LASF147:
 4482 0153 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4482      52784275 
 4482      66666572 
 4482      00
 4483              	.LASF111:
 4484 0160 745F6C65 		.ascii	"t_level_sensor\000"
 4484      76656C5F 
 4484      73656E73 
 4484      6F7200
 4485              	.LASF6:
 4486 016f 6C6F6E67 		.ascii	"long long int\000"
 4486      206C6F6E 
 4486      6720696E 
 4486      7400
 4487              	.LASF123:
 4488 017d 7061636B 		.ascii	"packets\000"
 4488      65747300 
 4489              	.LASF68:
 4490 0185 65636E6F 		.ascii	"ecno\000"
 4490      00
 4491              	.LASF162:
 4492 018a 74696D65 		.ascii	"timeToMeasure\000"
 4492      546F4D65 
 4492      61737572 
 4492      6500
 4493              	.LASF71:
 4494 0198 74696D65 		.ascii	"time_to_network_connect\000"
 4494      5F746F5F 
 4494      6E657477 
 4494      6F726B5F 
 4494      636F6E6E 
 4495              	.LASF164:
 4496 01b0 74696D65 		.ascii	"timeToSync\000"
 4496      546F5379 
 4496      6E6300
 4497              	.LASF40:
 4498 01bb 766F6C74 		.ascii	"voltage_solar\000"
 4498      6167655F 
 4498      736F6C61 
 4498      7200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 97


 4499              	.LASF41:
 4500 01c9 766F6C74 		.ascii	"voltage_charge_current\000"
 4500      6167655F 
 4500      63686172 
 4500      67655F63 
 4500      75727265 
 4501              	.LASF145:
 4502 01e0 75706772 		.ascii	"upgrade_status\000"
 4502      6164655F 
 4502      73746174 
 4502      757300
 4503              	.LASF126:
 4504 01ef 635F6461 		.ascii	"c_data_count_sent\000"
 4504      74615F63 
 4504      6F756E74 
 4504      5F73656E 
 4504      7400
 4505              	.LASF65:
 4506 0201 6D6F6465 		.ascii	"modem_info_t\000"
 4506      6D5F696E 
 4506      666F5F74 
 4506      00
 4507              	.LASF66:
 4508 020e 72786C65 		.ascii	"rxlev\000"
 4508      7600
 4509              	.LASF4:
 4510 0214 6C6F6E67 		.ascii	"long int\000"
 4510      20696E74 
 4510      00
 4511              	.LASF72:
 4512 021d 74696D65 		.ascii	"time_to_acquire_ip\000"
 4512      5F746F5F 
 4512      61637175 
 4512      6972655F 
 4512      697000
 4513              	.LASF88:
 4514 0230 616C6172 		.ascii	"alarm\000"
 4514      6D00
 4515              	.LASF46:
 4516 0236 70726573 		.ascii	"pressure_voltage_off\000"
 4516      73757265 
 4516      5F766F6C 
 4516      74616765 
 4516      5F6F6666 
 4517              	.LASF11:
 4518 024b 75696E74 		.ascii	"uint8\000"
 4518      3800
 4519              	.LASF118:
 4520 0251 635F7472 		.ascii	"c_try_counter\000"
 4520      795F636F 
 4520      756E7465 
 4520      7200
 4521              	.LASF129:
 4522 025f 73656E64 		.ascii	"send_time\000"
 4522      5F74696D 
 4522      6500
 4523              	.LASF16:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 98


 4524 0269 696E7433 		.ascii	"int32\000"
 4524      3200
 4525              	.LASF74:
 4526 026f 6E6F6465 		.ascii	"node_type\000"
 4526      5F747970 
 4526      6500
 4527              	.LASF116:
 4528 0279 73796E63 		.ascii	"syncData\000"
 4528      44617461 
 4528      00
 4529              	.LASF124:
 4530 0282 6E657477 		.ascii	"network_time\000"
 4530      6F726B5F 
 4530      74696D65 
 4530      00
 4531              	.LASF13:
 4532 028f 75696E74 		.ascii	"uint32\000"
 4532      333200
 4533              	.LASF63:
 4534 0296 6D6F6465 		.ascii	"model_id\000"
 4534      6C5F6964 
 4534      00
 4535              	.LASF34:
 4536 029f 616C6C5F 		.ascii	"all_level_readings\000"
 4536      6C657665 
 4536      6C5F7265 
 4536      6164696E 
 4536      677300
 4537              	.LASF84:
 4538 02b2 636F756E 		.ascii	"countDownValue\000"
 4538      74446F77 
 4538      6E56616C 
 4538      756500
 4539              	.LASF141:
 4540 02c1 75706772 		.ascii	"upgraded\000"
 4540      61646564 
 4540      00
 4541              	.LASF54:
 4542 02ca 746D5F6D 		.ascii	"tm_mon\000"
 4542      6F6E00
 4543              	.LASF78:
 4544 02d1 64656275 		.ascii	"debug_level\000"
 4544      675F6C65 
 4544      76656C00 
 4545              	.LASF143:
 4546 02dd 706F7274 		.ascii	"port\000"
 4546      00
 4547              	.LASF59:
 4548 02e2 76616C75 		.ascii	"value\000"
 4548      6500
 4549              	.LASF142:
 4550 02e8 686F7374 		.ascii	"host\000"
 4550      00
 4551              	.LASF55:
 4552 02ed 746D5F79 		.ascii	"tm_year\000"
 4552      65617200 
 4553              	.LASF163:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 99


 4554 02f5 616C6172 		.ascii	"alarmSync\000"
 4554      6D53796E 
 4554      6300
 4555              	.LASF45:
 4556 02ff 70726573 		.ascii	"pressure_voltage_on\000"
 4556      73757265 
 4556      5F766F6C 
 4556      74616765 
 4556      5F6F6E00 
 4557              	.LASF8:
 4558 0313 756E7369 		.ascii	"unsigned int\000"
 4558      676E6564 
 4558      20696E74 
 4558      00
 4559              	.LASF139:
 4560 0320 73657454 		.ascii	"setTime\000"
 4560      696D6500 
 4561              	.LASF61:
 4562 0328 6B65795F 		.ascii	"key_value_t\000"
 4562      76616C75 
 4562      655F7400 
 4563              	.LASF137:
 4564 0334 6D5F444F 		.ascii	"m_DO_sensor\000"
 4564      5F73656E 
 4564      736F7200 
 4565              	.LASF100:
 4566 0340 41796F49 		.ascii	"AyoItsTime\000"
 4566      74735469 
 4566      6D6500
 4567              	.LASF36:
 4568 034b 6E756D5F 		.ascii	"num_valid_readings\000"
 4568      76616C69 
 4568      645F7265 
 4568      6164696E 
 4568      677300
 4569              	.LASF128:
 4570 035e 68747470 		.ascii	"http_chunk\000"
 4570      5F636875 
 4570      6E6B00
 4571              	.LASF134:
 4572 0369 6D5F766F 		.ascii	"m_voltage\000"
 4572      6C746167 
 4572      6500
 4573              	.LASF5:
 4574 0373 6C6F6E67 		.ascii	"long unsigned int\000"
 4574      20756E73 
 4574      69676E65 
 4574      6420696E 
 4574      7400
 4575              	.LASF97:
 4576 0385 7472795F 		.ascii	"try_counter\000"
 4576      636F756E 
 4576      74657200 
 4577              	.LASF119:
 4578 0391 64617461 		.ascii	"data_count_desired\000"
 4578      5F636F75 
 4578      6E745F64 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 100


 4578      65736972 
 4578      656400
 4579              	.LASF39:
 4580 03a4 766F6C74 		.ascii	"voltage_battery\000"
 4580      6167655F 
 4580      62617474 
 4580      65727900 
 4581              	.LASF25:
 4582 03b4 4461794F 		.ascii	"DayOfMonth\000"
 4582      664D6F6E 
 4582      746800
 4583              	.LASF132:
 4584 03bf 6D616B65 		.ascii	"makeMeasurements\000"
 4584      4D656173 
 4584      7572656D 
 4584      656E7473 
 4584      00
 4585              	.LASF151:
 4586 03d0 64617461 		.ascii	"data\000"
 4586      00
 4587              	.LASF93:
 4588 03d5 65705F70 		.ascii	"ep_port\000"
 4588      6F727400 
 4589              	.LASF58:
 4590 03dd 746D5F69 		.ascii	"tm_isdst\000"
 4590      73647374 
 4590      00
 4591              	.LASF89:
 4592 03e6 6D6F6465 		.ascii	"modem_info\000"
 4592      6D5F696E 
 4592      666F00
 4593              	.LASF92:
 4594 03f1 65705F68 		.ascii	"ep_host\000"
 4594      6F737400 
 4595              	.LASF14:
 4596 03f9 696E7438 		.ascii	"int8\000"
 4596      00
 4597              	.LASF138:
 4598 03fe 444F5F76 		.ascii	"DO_valid\000"
 4598      616C6964 
 4598      00
 4599              	.LASF99:
 4600 0407 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4600      576F726B 
 4600      576F726B 
 4600      576F726B 
 4600      576F726B 
 4601              	.LASF120:
 4602 0420 635F6461 		.ascii	"c_data_count_desired\000"
 4602      74615F63 
 4602      6F756E74 
 4602      5F646573 
 4602      69726564 
 4603              	.LASF114:
 4604 0435 745F7364 		.ascii	"t_sd_card\000"
 4604      5F636172 
 4604      6400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 101


 4605              	.LASF2:
 4606 043f 73686F72 		.ascii	"short int\000"
 4606      7420696E 
 4606      7400
 4607              	.LASF153:
 4608 0449 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4608      6D5F7374 
 4608      6172745F 
 4608      74696D65 
 4608      5F737461 
 4609              	.LASF91:
 4610 0460 7379735F 		.ascii	"sys_info_t\000"
 4610      696E666F 
 4610      5F7400
 4611              	.LASF80:
 4612 046b 75706461 		.ascii	"updatable_parameters_t\000"
 4612      7461626C 
 4612      655F7061 
 4612      72616D65 
 4612      74657273 
 4613              	.LASF101:
 4614 0482 616C6172 		.ascii	"alarmType\000"
 4614      6D547970 
 4614      6500
 4615              	.LASF149:
 4616 048c 64617461 		.ascii	"dataPointsInStack\000"
 4616      506F696E 
 4616      7473496E 
 4616      53746163 
 4616      6B00
 4617              	.LASF51:
 4618 049e 746D5F6D 		.ascii	"tm_min\000"
 4618      696E00
 4619              	.LASF17:
 4620 04a5 666C6F61 		.ascii	"float32\000"
 4620      74333200 
 4621              	.LASF102:
 4622 04ad 616C6172 		.ascii	"alarmToBeUpdated\000"
 4622      6D546F42 
 4622      65557064 
 4622      61746564 
 4622      00
 4623              	.LASF22:
 4624 04be 73697A65 		.ascii	"sizetype\000"
 4624      74797065 
 4624      00
 4625              	.LASF103:
 4626 04c7 52657365 		.ascii	"ResetAlarm\000"
 4626      74416C61 
 4626      726D00
 4627              	.LASF57:
 4628 04d2 746D5F79 		.ascii	"tm_yday\000"
 4628      64617900 
 4629              	.LASF94:
 4630 04da 7379735F 		.ascii	"sys_settings_t\000"
 4630      73657474 
 4630      696E6773 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 102


 4630      5F7400
 4631              	.LASF140:
 4632 04e9 6C6F6361 		.ascii	"localTime\000"
 4632      6C54696D 
 4632      6500
 4633              	.LASF165:
 4634 04f3 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4634      546F5379 
 4634      636E5265 
 4634      6D6F7465 
 4634      50617261 
 4635              	.LASF60:
 4636 050a 74696D65 		.ascii	"timeStamp\000"
 4636      5374616D 
 4636      7000
 4637              	.LASF29:
 4638 0514 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4638      54494D45 
 4638      5F444154 
 4638      4500
 4639              	.LASF155:
 4640 0522 75706461 		.ascii	"updatable_parameters\000"
 4640      7461626C 
 4640      655F7061 
 4640      72616D65 
 4640      74657273 
 4641              	.LASF106:
 4642 0537 43726561 		.ascii	"CreateAlarm\000"
 4642      7465416C 
 4642      61726D00 
 4643              	.LASF127:
 4644 0543 7061636B 		.ascii	"packet\000"
 4644      657400
 4645              	.LASF117:
 4646 054a 735F7273 		.ascii	"s_rsrp\000"
 4646      727000
 4647              	.LASF42:
 4648 0551 766F6C74 		.ascii	"voltage_pressure\000"
 4648      6167655F 
 4648      70726573 
 4648      73757265 
 4648      00
 4649              	.LASF156:
 4650 0562 68747470 		.ascii	"http_request\000"
 4650      5F726571 
 4650      75657374 
 4650      00
 4651              	.LASF18:
 4652 056f 666C6F61 		.ascii	"float\000"
 4652      7400
 4653              	.LASF38:
 4654 0575 6C657665 		.ascii	"level_sensor_t\000"
 4654      6C5F7365 
 4654      6E736F72 
 4654      5F7400
 4655              	.LASF131:
 4656 0584 636F6E66 		.ascii	"configureRemoteParams\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 103


 4656      69677572 
 4656      6552656D 
 4656      6F746550 
 4656      6172616D 
 4657              	.LASF166:
 4658 059a 44617461 		.ascii	"Data_fileName\000"
 4658      5F66696C 
 4658      654E616D 
 4658      6500
 4659              	.LASF98:
 4660 05a8 6D6F6465 		.ascii	"modem_status\000"
 4660      6D5F7374 
 4660      61747573 
 4660      00
 4661              	.LASF30:
 4662 05b5 74657374 		.ascii	"test_name\000"
 4662      5F6E616D 
 4662      6500
 4663              	.LASF28:
 4664 05bf 59656172 		.ascii	"Year\000"
 4664      00
 4665              	.LASF79:
 4666 05c4 5F426F6F 		.ascii	"_Bool\000"
 4666      6C00
 4667              	.LASF10:
 4668 05ca 696E7433 		.ascii	"int32_t\000"
 4668      325F7400 
 4669              	.LASF1:
 4670 05d2 756E7369 		.ascii	"unsigned char\000"
 4670      676E6564 
 4670      20636861 
 4670      7200
 4671              	.LASF144:
 4672 05e0 726F7574 		.ascii	"route\000"
 4672      6500
 4673              	.LASF160:
 4674 05e6 73797374 		.ascii	"system_settings\000"
 4674      656D5F73 
 4674      65747469 
 4674      6E677300 
 4675              	.LASF70:
 4676 05f6 72737270 		.ascii	"rsrp\000"
 4676      00
 4677              	.LASF69:
 4678 05fb 72737271 		.ascii	"rsrq\000"
 4678      00
 4679              	.LASF169:
 4680 0600 473A5C4D 		.ascii	"G:\\My Drive\\notoriOS\\notoriOS\\notoriOS.cydsn\000"
 4680      79204472 
 4680      6976655C 
 4680      6E6F746F 
 4680      72694F53 
 4681              	.LASF130:
 4682 062d 735F7365 		.ascii	"s_send_time\000"
 4682      6E645F74 
 4682      696D6500 
 4683              	.LASF77:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 104


 4684 0639 73796E63 		.ascii	"sync_time\000"
 4684      5F74696D 
 4684      6500
 4685              	.LASF48:
 4686 0643 70726573 		.ascii	"pressure_depth\000"
 4686      73757265 
 4686      5F646570 
 4686      746800
 4687              	.LASF67:
 4688 0652 72736370 		.ascii	"rscp\000"
 4688      00
 4689              	.LASF24:
 4690 0657 4461794F 		.ascii	"DayOfWeek\000"
 4690      66576565 
 4690      6B00
 4691              	.LASF33:
 4692 0661 74657374 		.ascii	"test_t\000"
 4692      5F7400
 4693              	.LASF159:
 4694 0668 73797374 		.ascii	"system_info\000"
 4694      656D5F69 
 4694      6E666F00 
 4695              	.LASF64:
 4696 0674 696D6569 		.ascii	"imei\000"
 4696      00
 4697              	.LASF32:
 4698 0679 72656173 		.ascii	"reason\000"
 4698      6F6E00
 4699              	.LASF104:
 4700 0680 616C6172 		.ascii	"alarmToBeReset\000"
 4700      6D546F42 
 4700      65526573 
 4700      657400
 4701              	.LASF109:
 4702 068f 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4702      6B697479 
 4702      43686563 
 4702      6B596F75 
 4702      7273656C 
 4703              	.LASF125:
 4704 06bb 64617461 		.ascii	"data_count_sent\000"
 4704      5F636F75 
 4704      6E745F73 
 4704      656E7400 
 4705              	.LASF73:
 4706 06cb 6D6F6465 		.ascii	"modem_stats_t\000"
 4706      6D5F7374 
 4706      6174735F 
 4706      7400
 4707              	.LASF47:
 4708 06d9 70726573 		.ascii	"pressure_current\000"
 4708      73757265 
 4708      5F637572 
 4708      72656E74 
 4708      00
 4709              	.LASF43:
 4710 06ea 76616C69 		.ascii	"valid\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 105


 4710      6400
 4711              	.LASF56:
 4712 06f0 746D5F77 		.ascii	"tm_wday\000"
 4712      64617900 
 4713              	.LASF81:
 4714 06f8 616C6C5F 		.ascii	"all_do_readings\000"
 4714      646F5F72 
 4714      65616469 
 4714      6E677300 
 4715              	.LASF21:
 4716 0708 6C6F6E67 		.ascii	"long double\000"
 4716      20646F75 
 4716      626C6500 
 4717              	.LASF122:
 4718 0714 6368756E 		.ascii	"chunk\000"
 4718      6B00
 4719              	.LASF133:
 4720 071a 635F7469 		.ascii	"c_timeStamp\000"
 4720      6D655374 
 4720      616D7000 
 4721              	.LASF20:
 4722 0726 63686172 		.ascii	"char\000"
 4722      00
 4723              	.LASF154:
 4724 072b 6D6F6465 		.ascii	"modem_stats\000"
 4724      6D5F7374 
 4724      61747300 
 4725              	.LASF158:
 4726 0737 68747470 		.ascii	"http_route\000"
 4726      5F726F75 
 4726      746500
 4727              	.LASF121:
 4728 0742 706F7274 		.ascii	"portConfig\000"
 4728      436F6E66 
 4728      696700
 4729              	.LASF9:
 4730 074d 5F5F696E 		.ascii	"__int32_t\000"
 4730      7433325F 
 4730      7400
 4731              	.LASF95:
 4732 0757 756E6971 		.ascii	"uniqueId\000"
 4732      75654964 
 4732      00
 4733              	.LASF135:
 4734 0760 6D5F6C65 		.ascii	"m_level_sensor\000"
 4734      76656C5F 
 4734      73656E73 
 4734      6F7200
 4735              	.LASF35:
 4736 076f 6C657665 		.ascii	"level_reading\000"
 4736      6C5F7265 
 4736      6164696E 
 4736      6700
 4737              	.LASF171:
 4738 077d 4C617942 		.ascii	"LayBack\000"
 4738      61636B00 
 4739              	.LASF3:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 106


 4740 0785 73686F72 		.ascii	"short unsigned int\000"
 4740      7420756E 
 4740      7369676E 
 4740      65642069 
 4740      6E7400
 4741              	.LASF62:
 4742 0798 73696D5F 		.ascii	"sim_id\000"
 4742      696400
 4743              	.LASF53:
 4744 079f 746D5F6D 		.ascii	"tm_mday\000"
 4744      64617900 
 4745              	.LASF107:
 4746 07a7 6E657741 		.ascii	"newAlarm\000"
 4746      6C61726D 
 4746      00
 4747              	.LASF50:
 4748 07b0 746D5F73 		.ascii	"tm_sec\000"
 4748      656300
 4749              	.LASF136:
 4750 07b7 6D5F7072 		.ascii	"m_pressure\000"
 4750      65737375 
 4750      726500
 4751              	.LASF83:
 4752 07c2 444F5F73 		.ascii	"DO_sensor_t\000"
 4752      656E736F 
 4752      725F7400 
 4753              	.LASF31:
 4754 07ce 73746174 		.ascii	"status\000"
 4754      757300
 4755              	.LASF150:
 4756 07d5 64617461 		.ascii	"dataPointsInStackDesired\000"
 4756      506F696E 
 4756      7473496E 
 4756      53746163 
 4756      6B446573 
 4757              	.LASF112:
 4758 07ee 745F766F 		.ascii	"t_voltages\000"
 4758      6C746167 
 4758      657300
 4759              	.LASF168:
 4760 07f9 6E6F746F 		.ascii	"notoriOS.c\000"
 4760      72694F53 
 4760      2E6300
 4761              	.LASF157:
 4762 0804 68747470 		.ascii	"http_body\000"
 4762      5F626F64 
 4762      7900
 4763              	.LASF15:
 4764 080e 696E7431 		.ascii	"int16\000"
 4764      3600
 4765              	.LASF110:
 4766 0814 745F444F 		.ascii	"t_DO_sensor\000"
 4766      5F73656E 
 4766      736F7200 
 4767              	.LASF86:
 4768 0820 636F756E 		.ascii	"countDownType\000"
 4768      74446F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccU64mzu.s 			page 107


 4768      6E547970 
 4768      6500
 4769              	.LASF85:
 4770 082e 63757272 		.ascii	"currentCountDownValue\000"
 4770      656E7443 
 4770      6F756E74 
 4770      446F776E 
 4770      56616C75 
 4771              	.LASF75:
 4772 0844 73696D5F 		.ascii	"sim_type\000"
 4772      74797065 
 4772      00
 4773              	.LASF96:
 4774 084d 635F6865 		.ascii	"c_hey\000"
 4774      7900
 4775              	.LASF26:
 4776 0853 4461794F 		.ascii	"DayOfYear\000"
 4776      66596561 
 4776      7200
 4777              	.LASF49:
 4778 085d 70726573 		.ascii	"pressure_t\000"
 4778      73757265 
 4778      5F7400
 4779              	.LASF105:
 4780 0868 416C6172 		.ascii	"AlarmReady\000"
 4780      6D526561 
 4780      647900
 4781              	.LASF108:
 4782 0873 52656164 		.ascii	"ReadyOrNot\000"
 4782      794F724E 
 4782      6F7400
 4783              	.LASF172:
 4784 087e 6D61696E 		.ascii	"main\000"
 4784      00
 4785              	.LASF90:
 4786 0883 63686970 		.ascii	"chip_uniqueId\000"
 4786      5F756E69 
 4786      71756549 
 4786      6400
 4787              	.LASF76:
 4788 0891 6D656173 		.ascii	"measure_time\000"
 4788      7572655F 
 4788      74696D65 
 4788      00
 4789              	.LASF19:
 4790 089e 646F7562 		.ascii	"double\000"
 4790      6C6500
 4791              	.LASF44:
 4792 08a5 766F6C74 		.ascii	"voltage_t\000"
 4792      6167655F 
 4792      7400
 4793              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
