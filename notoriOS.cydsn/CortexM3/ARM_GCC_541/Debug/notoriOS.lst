ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	inbox,100,4
  33              		.comm	http_request,10000,4
  34              		.comm	http_body,10000,4
  35              		.comm	http_route,200,4
  36              		.comm	system_info,28,4
  37              		.comm	system_settings,104,4
  38              		.comm	alarmMeasure,6,4
  39              		.comm	timeToMeasure,1,1
  40              		.comm	alarmSync,6,4
  41              		.comm	timeToSync,1,1
  42              		.comm	timeToSycnRemoteParams,1,1
  43              		.comm	hey,1,1
  44              		.comm	alarmAppLED,6,4
  45              		.comm	timeToAppLED,1,1
  46              		.section	.text.Wakeup_ISR,"ax",%progbits
  47              		.align	2
  48              		.global	Wakeup_ISR
  49              		.thumb
  50              		.thumb_func
  51              		.type	Wakeup_ISR, %function
  52              	Wakeup_ISR:
  53              	.LFB64:
  54              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 2


   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  55              		.loc 1 20 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59 0000 80B5     		push	{r7, lr}
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 00AF     		add	r7, sp, #0
  64              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  65              		.loc 1 22 0
  66 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  67              		.loc 1 23 0
  68 0008 00BF     		nop
  69 000a 80BD     		pop	{r7, pc}
  70              		.cfi_endproc
  71              	.LFE64:
  72              		.size	Wakeup_ISR, .-Wakeup_ISR
  73              		.global	Data_fileName
  74              		.data
  75              		.align	2
  76              		.type	Data_fileName, %object
  77              		.size	Data_fileName, 30
  78              	Data_fileName:
  79 0000 64617461 		.ascii	"data.txt\000"
  79      2E747874 
  79      00
  80 0009 00000000 		.space	21
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.comm	try_counter,1,1
  82              		.section	.rodata
  83              		.align	2
  84              	.LC0:
  85 0000 25582D25 		.ascii	"%X-%X\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 3


  85      5800
  86 0006 0000     		.align	2
  87              	.LC1:
  88 0008 6D616C63 		.ascii	"malcom.open-storm.org\000"
  88      6F6D2E6F 
  88      70656E2D 
  88      73746F72 
  88      6D2E6F72 
  89              		.section	.text.ReadyOrNot,"ax",%progbits
  90              		.align	2
  91              		.global	ReadyOrNot
  92              		.thumb
  93              		.thumb_func
  94              		.type	ReadyOrNot, %function
  95              	ReadyOrNot:
  96              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
  97              		.loc 1 41 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 24
 100              		@ frame_needed = 1, uses_anonymous_args = 0
 101 0000 B0B5     		push	{r4, r5, r7, lr}
 102              		.cfi_def_cfa_offset 16
 103              		.cfi_offset 4, -16
 104              		.cfi_offset 5, -12
 105              		.cfi_offset 7, -8
 106              		.cfi_offset 14, -4
 107 0002 88B0     		sub	sp, sp, #32
 108              		.cfi_def_cfa_offset 48
 109 0004 02AF     		add	r7, sp, #8
 110              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 111              		.loc 1 43 0
 112 0006 3648     		ldr	r0, .L3
 113 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 114              		.loc 1 44 0
 115 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 4


  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 116              		.loc 1 46 0
 117 0010 FF20     		movs	r0, #255
 118 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 119              		.loc 1 47 0
 120 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 121              		.loc 1 48 0
 122 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 123              		.loc 1 50 0
 124 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 125              		.loc 1 52 0
 126 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 127              		.loc 1 62 0
 128 0026 07F10C03 		add	r3, r7, #12
 129 002a 1846     		mov	r0, r3
 130 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 131              		.loc 1 63 0
 132 0030 FA68     		ldr	r2, [r7, #12]
 133 0032 3B69     		ldr	r3, [r7, #16]
 134 0034 0093     		str	r3, [sp]
 135 0036 1346     		mov	r3, r2
 136 0038 2A4A     		ldr	r2, .L3+4
 137 003a 1821     		movs	r1, #24
 138 003c 2A48     		ldr	r0, .L3+8
 139 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 140              		.loc 1 65 0
 141 0042 2A4B     		ldr	r3, .L3+12
 142 0044 2A4A     		ldr	r2, .L3+16
 143 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-
  70:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org");
 144              		.loc 1 70 0
 145 0048 2A4A     		ldr	r2, .L3+20
 146 004a 2B4B     		ldr	r3, .L3+24
 147 004c 1446     		mov	r4, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 5


 148 004e 1D46     		mov	r5, r3
 149 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 150 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 151 0054 95E80300 		ldmia	r5, {r0, r1}
 152 0058 2060     		str	r0, [r4]
 153 005a 0434     		adds	r4, r4, #4
 154 005c 2180     		strh	r1, [r4]	@ movhi
  71:notoriOS.c    ****     
  72:notoriOS.c    **** 
  73:notoriOS.c    ****     system_settings.ep_port = 5000;
 155              		.loc 1 73 0
 156 005e 254B     		ldr	r3, .L3+20
 157 0060 41F28832 		movw	r2, #5000
 158 0064 5A66     		str	r2, [r3, #100]
  74:notoriOS.c    ****     // Don't need the following for new nodes
  75:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  76:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  77:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  78:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  79:notoriOS.c    ****         
  80:notoriOS.c    ****     
  81:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  82:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 159              		.loc 1 82 0
 160 0066 254B     		ldr	r3, .L3+28
 161 0068 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 162 006a 99B2     		uxth	r1, r3
 163 006c 244C     		ldr	r4, .L3+32
 164 006e 3846     		mov	r0, r7
 165 0070 0723     		movs	r3, #7
 166 0072 0122     		movs	r2, #1
 167 0074 FFF7FEFF 		bl	CreateAlarm
 168 0078 2246     		mov	r2, r4
 169 007a 3B46     		mov	r3, r7
 170 007c 1968     		ldr	r1, [r3]	@ unaligned
 171 007e 1160     		str	r1, [r2]	@ unaligned
 172 0080 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 173 0082 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToMeasure = 1u;
 174              		.loc 1 83 0
 175 0084 1F4B     		ldr	r3, .L3+36
 176 0086 0122     		movs	r2, #1
 177 0088 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  85:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 178              		.loc 1 85 0
 179 008a 1C4B     		ldr	r3, .L3+28
 180 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 181 008e 99B2     		uxth	r1, r3
 182 0090 1D4C     		ldr	r4, .L3+40
 183 0092 3846     		mov	r0, r7
 184 0094 0723     		movs	r3, #7
 185 0096 0122     		movs	r2, #1
 186 0098 FFF7FEFF 		bl	CreateAlarm
 187 009c 2246     		mov	r2, r4
 188 009e 3B46     		mov	r3, r7
 189 00a0 1968     		ldr	r1, [r3]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 6


 190 00a2 1160     		str	r1, [r2]	@ unaligned
 191 00a4 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 192 00a6 9380     		strh	r3, [r2, #4]	@ unaligned
  86:notoriOS.c    ****     timeToSync = 1u;
 193              		.loc 1 86 0
 194 00a8 184B     		ldr	r3, .L3+44
 195 00aa 0122     		movs	r2, #1
 196 00ac 1A70     		strb	r2, [r3]
  87:notoriOS.c    ****     
  88:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 197              		.loc 1 88 0
 198 00ae 184B     		ldr	r3, .L3+48
 199 00b0 0022     		movs	r2, #0
 200 00b2 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     // App Initializations
  91:notoriOS.c    ****     alarmAppLED = CreateAlarm(10u,ALARM_TYPE_SECOND,ALARM_TYPE_CONTINUOUS);
 201              		.loc 1 91 0
 202 00b4 174C     		ldr	r4, .L3+52
 203 00b6 3846     		mov	r0, r7
 204 00b8 0723     		movs	r3, #7
 205 00ba 0022     		movs	r2, #0
 206 00bc 0A21     		movs	r1, #10
 207 00be FFF7FEFF 		bl	CreateAlarm
 208 00c2 2246     		mov	r2, r4
 209 00c4 3B46     		mov	r3, r7
 210 00c6 1968     		ldr	r1, [r3]	@ unaligned
 211 00c8 1160     		str	r1, [r2]	@ unaligned
 212 00ca 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 213 00cc 9380     		strh	r3, [r2, #4]	@ unaligned
  92:notoriOS.c    ****     timeToAppLED = 1u;
 214              		.loc 1 92 0
 215 00ce 124B     		ldr	r3, .L3+56
 216 00d0 0122     		movs	r2, #1
 217 00d2 1A70     		strb	r2, [r3]
  93:notoriOS.c    ****     
  94:notoriOS.c    ****     
  95:notoriOS.c    ****     // Initialize the try counter to 0
  96:notoriOS.c    ****     uint8 try_counter = 0;
 218              		.loc 1 96 0
 219 00d4 0023     		movs	r3, #0
 220 00d6 FB75     		strb	r3, [r7, #23]
  97:notoriOS.c    **** }
 221              		.loc 1 97 0
 222 00d8 00BF     		nop
 223 00da 1837     		adds	r7, r7, #24
 224              		.cfi_def_cfa_offset 16
 225 00dc BD46     		mov	sp, r7
 226              		.cfi_def_cfa_register 13
 227              		@ sp needed
 228 00de B0BD     		pop	{r4, r5, r7, pc}
 229              	.L4:
 230              		.align	2
 231              	.L3:
 232 00e0 00000000 		.word	Wakeup_ISR
 233 00e4 00000000 		.word	.LC0
 234 00e8 04000000 		.word	system_info+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 7


 235 00ec 00000000 		.word	system_info
 236 00f0 00000000 		.word	modem_info
 237 00f4 00000000 		.word	system_settings
 238 00f8 08000000 		.word	.LC1
 239 00fc 00000000 		.word	updatable_parameters
 240 0100 00000000 		.word	alarmMeasure
 241 0104 00000000 		.word	timeToMeasure
 242 0108 00000000 		.word	alarmSync
 243 010c 00000000 		.word	timeToSync
 244 0110 00000000 		.word	timeToSycnRemoteParams
 245 0114 00000000 		.word	alarmAppLED
 246 0118 00000000 		.word	timeToAppLED
 247              		.cfi_endproc
 248              	.LFE65:
 249              		.size	ReadyOrNot, .-ReadyOrNot
 250              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 251              		.align	2
 252              		.global	WorkWorkWorkWorkWorkWork
 253              		.thumb
 254              		.thumb_func
 255              		.type	WorkWorkWorkWorkWorkWork, %function
 256              	WorkWorkWorkWorkWorkWork:
 257              	.LFB66:
  98:notoriOS.c    **** 
  99:notoriOS.c    **** 
 100:notoriOS.c    **** // ==============================================
 101:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 102:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 103:notoriOS.c    **** //
 104:notoriOS.c    **** // Prorcesses core tasks
 105:notoriOS.c    **** // ==============================================
 106:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 107:notoriOS.c    **** {
 258              		.loc 1 107 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 8
 261              		@ frame_needed = 1, uses_anonymous_args = 0
 262 0000 80B5     		push	{r7, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 82B0     		sub	sp, sp, #8
 267              		.cfi_def_cfa_offset 16
 268 0004 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 108:notoriOS.c    ****     
 109:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 110:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 111:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 112:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 113:notoriOS.c    ****     
 114:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 115:notoriOS.c    ****     if(timeToSycnRemoteParams){
 270              		.loc 1 115 0
 271 0006 194B     		ldr	r3, .L11
 272 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 273 000a 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 8


 274 000c 06D0     		beq	.L6
 116:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 275              		.loc 1 116 0
 276 000e FFF7FEFF 		bl	configureRemoteParams
 277 0012 0346     		mov	r3, r0
 278 0014 1A46     		mov	r2, r3
 279 0016 154B     		ldr	r3, .L11
 280 0018 1A70     		strb	r2, [r3]
 281 001a 14E0     		b	.L7
 282              	.L6:
 117:notoriOS.c    ****     }
 118:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 119:notoriOS.c    ****     else if(timeToMeasure){
 283              		.loc 1 119 0
 284 001c 144B     		ldr	r3, .L11+4
 285 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 286 0020 002B     		cmp	r3, #0
 287 0022 06D0     		beq	.L8
 120:notoriOS.c    ****         //(int i=0; i<=30; i++){
 121:notoriOS.c    ****          timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 288              		.loc 1 121 0
 289 0024 FFF7FEFF 		bl	makeMeasurements
 290 0028 0346     		mov	r3, r0
 291 002a 1A46     		mov	r2, r3
 292 002c 104B     		ldr	r3, .L11+4
 293 002e 1A70     		strb	r2, [r3]
 294 0030 09E0     		b	.L7
 295              	.L8:
 122:notoriOS.c    ****         //CyDelay(1000u);
 123:notoriOS.c    ****         //}
 124:notoriOS.c    ****     }else if(timeToSync){
 296              		.loc 1 124 0
 297 0032 104B     		ldr	r3, .L11+8
 298 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299 0036 002B     		cmp	r3, #0
 300 0038 05D0     		beq	.L7
 125:notoriOS.c    ****             timeToSync = syncData();
 301              		.loc 1 125 0
 302 003a FFF7FEFF 		bl	syncData
 303 003e 0346     		mov	r3, r0
 304 0040 1A46     		mov	r2, r3
 305 0042 0C4B     		ldr	r3, .L11+8
 306 0044 1A70     		strb	r2, [r3]
 307              	.L7:
 126:notoriOS.c    ****     } 
 127:notoriOS.c    ****     if(timeToAppLED){
 308              		.loc 1 127 0
 309 0046 0C4B     		ldr	r3, .L11+12
 310 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 311 004a 002B     		cmp	r3, #0
 312 004c 05D0     		beq	.L9
 128:notoriOS.c    ****         timeToAppLED = App_LED();
 313              		.loc 1 128 0
 314 004e FFF7FEFF 		bl	App_LED
 315 0052 0346     		mov	r3, r0
 316 0054 1A46     		mov	r2, r3
 317 0056 084B     		ldr	r3, .L11+12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 9


 318 0058 1A70     		strb	r2, [r3]
 319              	.L9:
 129:notoriOS.c    ****     }
 130:notoriOS.c    ****     // Print the countdown to the next alarm
 131:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 132:notoriOS.c    ****     
 133:notoriOS.c    ****     
 134:notoriOS.c    ****     // Check modem state machine on every loop
 135:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 320              		.loc 1 135 0
 321 005a FFF7FEFF 		bl	modem_process_tasks
 322 005e 0346     		mov	r3, r0
 323 0060 FB71     		strb	r3, [r7, #7]
 136:notoriOS.c    **** 
 137:notoriOS.c    ****     return 0u +  modem_status;  
 324              		.loc 1 137 0
 325 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 138:notoriOS.c    **** }
 326              		.loc 1 138 0
 327 0064 1846     		mov	r0, r3
 328 0066 0837     		adds	r7, r7, #8
 329              		.cfi_def_cfa_offset 8
 330 0068 BD46     		mov	sp, r7
 331              		.cfi_def_cfa_register 13
 332              		@ sp needed
 333 006a 80BD     		pop	{r7, pc}
 334              	.L12:
 335              		.align	2
 336              	.L11:
 337 006c 00000000 		.word	timeToSycnRemoteParams
 338 0070 00000000 		.word	timeToMeasure
 339 0074 00000000 		.word	timeToSync
 340 0078 00000000 		.word	timeToAppLED
 341              		.cfi_endproc
 342              	.LFE66:
 343              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 344              		.section	.text.LayBack,"ax",%progbits
 345              		.align	2
 346              		.global	LayBack
 347              		.thumb
 348              		.thumb_func
 349              		.type	LayBack, %function
 350              	LayBack:
 351              	.LFB67:
 139:notoriOS.c    **** 
 140:notoriOS.c    **** 
 141:notoriOS.c    **** 
 142:notoriOS.c    **** 
 143:notoriOS.c    **** 
 144:notoriOS.c    **** 
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 147:notoriOS.c    **** //      - Snoop Dogg (1993)
 148:notoriOS.c    **** //
 149:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 150:notoriOS.c    **** // ==============================================
 151:notoriOS.c    **** void LayBack()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 10


 152:notoriOS.c    **** {
 352              		.loc 1 152 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0000 80B5     		push	{r7, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0002 00AF     		add	r7, sp, #0
 361              		.cfi_def_cfa_register 7
 153:notoriOS.c    ****   
 154:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 362              		.loc 1 154 0
 363 0004 FFF7FEFF 		bl	modem_sleep
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 157:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 364              		.loc 1 157 0
 365 0008 FFF7FEFF 		bl	debug_sleep
 158:notoriOS.c    ****     
 159:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 366              		.loc 1 159 0
 367 000c FFF7FEFF 		bl	CyPmSaveClocks
 160:notoriOS.c    ****     
 161:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 162:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 163:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 164:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 165:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 166:notoriOS.c    ****     //CyPmHibernate();
 167:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 168:notoriOS.c    **** 
 169:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 368              		.loc 1 169 0
 369 0010 4FF40061 		mov	r1, #2048
 370 0014 0020     		movs	r0, #0
 371 0016 FFF7FEFF 		bl	CyPmSleep
 170:notoriOS.c    **** 
 171:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 372              		.loc 1 171 0
 373 001a FFF7FEFF 		bl	CyPmRestoreClocks
 172:notoriOS.c    **** 
 173:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 374              		.loc 1 173 0
 375 001e FFF7FEFF 		bl	debug_wakeup
 174:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 376              		.loc 1 174 0
 377 0022 FFF7FEFF 		bl	modem_wakeup
 175:notoriOS.c    **** 
 176:notoriOS.c    **** }
 378              		.loc 1 176 0
 379 0026 00BF     		nop
 380 0028 80BD     		pop	{r7, pc}
 381              		.cfi_endproc
 382              	.LFE67:
 383              		.size	LayBack, .-LayBack
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 11


 384 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 385              		.align	2
 386              		.global	AyoItsTime
 387              		.thumb
 388              		.thumb_func
 389              		.type	AyoItsTime, %function
 390              	AyoItsTime:
 391              	.LFB68:
 177:notoriOS.c    **** 
 178:notoriOS.c    **** 
 179:notoriOS.c    **** // ==============================================
 180:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 181:notoriOS.c    **** //      - NAS (1994)
 182:notoriOS.c    **** //
 183:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 184:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 185:notoriOS.c    **** // It will add tasks to the work queue,
 186:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 187:notoriOS.c    **** // ==============================================
 188:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 189:notoriOS.c    **** {
 392              		.loc 1 189 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 8
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396 0000 80B5     		push	{r7, lr}
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 7, -8
 399              		.cfi_offset 14, -4
 400 0002 82B0     		sub	sp, sp, #8
 401              		.cfi_def_cfa_offset 16
 402 0004 00AF     		add	r7, sp, #0
 403              		.cfi_def_cfa_register 7
 404 0006 0346     		mov	r3, r0
 405 0008 FB71     		strb	r3, [r7, #7]
 190:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 191:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 406              		.loc 1 191 0
 407 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 408 000c 1946     		mov	r1, r3
 409 000e 1148     		ldr	r0, .L19
 410 0010 FFF7FEFF 		bl	AlarmReady
 411 0014 0346     		mov	r3, r0
 412 0016 002B     		cmp	r3, #0
 413 0018 02D0     		beq	.L15
 192:notoriOS.c    ****     {
 193:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 194:notoriOS.c    ****         timeToMeasure = 1u;
 414              		.loc 1 194 0
 415 001a 0F4B     		ldr	r3, .L19+4
 416 001c 0122     		movs	r2, #1
 417 001e 1A70     		strb	r2, [r3]
 418              	.L15:
 195:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 196:notoriOS.c    ****         
 197:notoriOS.c    ****     }
 198:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 12


 419              		.loc 1 198 0
 420 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 421 0022 1946     		mov	r1, r3
 422 0024 0D48     		ldr	r0, .L19+8
 423 0026 FFF7FEFF 		bl	AlarmReady
 424 002a 0346     		mov	r3, r0
 425 002c 002B     		cmp	r3, #0
 426 002e 02D0     		beq	.L16
 199:notoriOS.c    ****     {
 200:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 201:notoriOS.c    ****         timeToSync = 1u;
 427              		.loc 1 201 0
 428 0030 0B4B     		ldr	r3, .L19+12
 429 0032 0122     		movs	r2, #1
 430 0034 1A70     		strb	r2, [r3]
 431              	.L16:
 202:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 203:notoriOS.c    ****     }
 204:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 432              		.loc 1 204 0
 433 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 434 0038 1946     		mov	r1, r3
 435 003a 0A48     		ldr	r0, .L19+16
 436 003c FFF7FEFF 		bl	AlarmReady
 437 0040 0346     		mov	r3, r0
 438 0042 002B     		cmp	r3, #0
 439 0044 02D0     		beq	.L18
 205:notoriOS.c    ****     {
 206:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 207:notoriOS.c    ****         timeToAppLED = 1u;
 440              		.loc 1 207 0
 441 0046 084B     		ldr	r3, .L19+20
 442 0048 0122     		movs	r2, #1
 443 004a 1A70     		strb	r2, [r3]
 444              	.L18:
 208:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 209:notoriOS.c    ****     }
 210:notoriOS.c    ****     
 211:notoriOS.c    **** }
 445              		.loc 1 211 0
 446 004c 00BF     		nop
 447 004e 0837     		adds	r7, r7, #8
 448              		.cfi_def_cfa_offset 8
 449 0050 BD46     		mov	sp, r7
 450              		.cfi_def_cfa_register 13
 451              		@ sp needed
 452 0052 80BD     		pop	{r7, pc}
 453              	.L20:
 454              		.align	2
 455              	.L19:
 456 0054 00000000 		.word	alarmMeasure
 457 0058 00000000 		.word	timeToMeasure
 458 005c 00000000 		.word	alarmSync
 459 0060 00000000 		.word	timeToSync
 460 0064 00000000 		.word	alarmAppLED
 461 0068 00000000 		.word	timeToAppLED
 462              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 13


 463              	.LFE68:
 464              		.size	AyoItsTime, .-AyoItsTime
 465              		.section	.text.AlarmReady,"ax",%progbits
 466              		.align	2
 467              		.global	AlarmReady
 468              		.thumb
 469              		.thumb_func
 470              		.type	AlarmReady, %function
 471              	AlarmReady:
 472              	.LFB69:
 212:notoriOS.c    **** 
 213:notoriOS.c    **** 
 214:notoriOS.c    **** // ==============================================
 215:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 216:notoriOS.c    **** // ==============================================
 217:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 218:notoriOS.c    **** {
 473              		.loc 1 218 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 8
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477 0000 80B5     		push	{r7, lr}
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 7, -8
 480              		.cfi_offset 14, -4
 481 0002 82B0     		sub	sp, sp, #8
 482              		.cfi_def_cfa_offset 16
 483 0004 00AF     		add	r7, sp, #0
 484              		.cfi_def_cfa_register 7
 485 0006 7860     		str	r0, [r7, #4]
 486 0008 0B46     		mov	r3, r1
 487 000a FB70     		strb	r3, [r7, #3]
 219:notoriOS.c    ****     // if the countDownType matches the alarmType
 220:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 488              		.loc 1 220 0
 489 000c 7B68     		ldr	r3, [r7, #4]
 490 000e 1B79     		ldrb	r3, [r3, #4]
 491 0010 DBB2     		uxtb	r3, r3
 492 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 493 0014 9A42     		cmp	r2, r3
 494 0016 12D1     		bne	.L22
 221:notoriOS.c    ****        
 222:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 223:notoriOS.c    ****         // Decrement the count down value by 1
 224:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 495              		.loc 1 224 0
 496 0018 7B68     		ldr	r3, [r7, #4]
 497 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 498 001c 1BB2     		sxth	r3, r3
 499 001e 9BB2     		uxth	r3, r3
 500 0020 013B     		subs	r3, r3, #1
 501 0022 9BB2     		uxth	r3, r3
 502 0024 1AB2     		sxth	r2, r3
 503 0026 7B68     		ldr	r3, [r7, #4]
 504 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 225:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 226:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 14


 505              		.loc 1 226 0
 506 002a 7B68     		ldr	r3, [r7, #4]
 507 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 508 002e 1BB2     		sxth	r3, r3
 509 0030 002B     		cmp	r3, #0
 510 0032 04DC     		bgt	.L22
 227:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 511              		.loc 1 227 0
 512 0034 7868     		ldr	r0, [r7, #4]
 513 0036 FFF7FEFF 		bl	ResetAlarm
 228:notoriOS.c    ****             return 1u;
 514              		.loc 1 228 0
 515 003a 0123     		movs	r3, #1
 516 003c 00E0     		b	.L23
 517              	.L22:
 229:notoriOS.c    ****         } 
 230:notoriOS.c    ****     }
 231:notoriOS.c    ****     
 232:notoriOS.c    ****     return 0u; // Otherwise return 0
 518              		.loc 1 232 0
 519 003e 0023     		movs	r3, #0
 520              	.L23:
 233:notoriOS.c    **** }
 521              		.loc 1 233 0
 522 0040 1846     		mov	r0, r3
 523 0042 0837     		adds	r7, r7, #8
 524              		.cfi_def_cfa_offset 8
 525 0044 BD46     		mov	sp, r7
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 0046 80BD     		pop	{r7, pc}
 529              		.cfi_endproc
 530              	.LFE69:
 531              		.size	AlarmReady, .-AlarmReady
 532              		.section	.text.ResetAlarm,"ax",%progbits
 533              		.align	2
 534              		.global	ResetAlarm
 535              		.thumb
 536              		.thumb_func
 537              		.type	ResetAlarm, %function
 538              	ResetAlarm:
 539              	.LFB70:
 234:notoriOS.c    **** 
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 237:notoriOS.c    **** // ==============================================
 238:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 239:notoriOS.c    **** {
 540              		.loc 1 239 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 8
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545 0000 80B4     		push	{r7}
 546              		.cfi_def_cfa_offset 4
 547              		.cfi_offset 7, -4
 548 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 15


 549              		.cfi_def_cfa_offset 16
 550 0004 00AF     		add	r7, sp, #0
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 240:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 241:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 553              		.loc 1 241 0
 554 0008 7B68     		ldr	r3, [r7, #4]
 555 000a 1B88     		ldrh	r3, [r3]	@ movhi
 556 000c 9BB2     		uxth	r3, r3
 557 000e 1AB2     		sxth	r2, r3
 558 0010 7B68     		ldr	r3, [r7, #4]
 559 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 242:notoriOS.c    **** }
 560              		.loc 1 242 0
 561 0014 00BF     		nop
 562 0016 0C37     		adds	r7, r7, #12
 563              		.cfi_def_cfa_offset 4
 564 0018 BD46     		mov	sp, r7
 565              		.cfi_def_cfa_register 13
 566              		@ sp needed
 567 001a 80BC     		pop	{r7}
 568              		.cfi_restore 7
 569              		.cfi_def_cfa_offset 0
 570 001c 7047     		bx	lr
 571              		.cfi_endproc
 572              	.LFE70:
 573              		.size	ResetAlarm, .-ResetAlarm
 574 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 575              		.align	2
 576              		.global	CreateAlarm
 577              		.thumb
 578              		.thumb_func
 579              		.type	CreateAlarm, %function
 580              	CreateAlarm:
 581              	.LFB71:
 243:notoriOS.c    **** 
 244:notoriOS.c    **** // ==============================================
 245:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 246:notoriOS.c    **** // ==============================================
 247:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 248:notoriOS.c    **** {
 582              		.loc 1 248 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 16
 585              		@ frame_needed = 1, uses_anonymous_args = 0
 586              		@ link register save eliminated.
 587 0000 80B4     		push	{r7}
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 7, -4
 590 0002 85B0     		sub	sp, sp, #20
 591              		.cfi_def_cfa_offset 24
 592 0004 00AF     		add	r7, sp, #0
 593              		.cfi_def_cfa_register 7
 594 0006 7860     		str	r0, [r7, #4]
 595 0008 0846     		mov	r0, r1
 596 000a 1146     		mov	r1, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 16


 597 000c 1A46     		mov	r2, r3
 598 000e 0346     		mov	r3, r0	@ movhi
 599 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 600 0012 0B46     		mov	r3, r1
 601 0014 7B70     		strb	r3, [r7, #1]
 602 0016 1346     		mov	r3, r2
 603 0018 3B70     		strb	r3, [r7]
 249:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 250:notoriOS.c    ****     alarm newAlarm;
 251:notoriOS.c    ****     
 252:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 253:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 604              		.loc 1 253 0
 605 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 606 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 254:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 607              		.loc 1 254 0
 608 001e 7B78     		ldrb	r3, [r7, #1]
 609 0020 3B73     		strb	r3, [r7, #12]
 255:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 610              		.loc 1 255 0
 611 0022 3B78     		ldrb	r3, [r7]
 612 0024 7B73     		strb	r3, [r7, #13]
 256:notoriOS.c    ****     
 257:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 258:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 259:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 613              		.loc 1 259 0
 614 0026 B7F90230 		ldrsh	r3, [r7, #2]
 615 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 260:notoriOS.c    ****     
 261:notoriOS.c    ****     return newAlarm;
 616              		.loc 1 261 0
 617 002c 7B68     		ldr	r3, [r7, #4]
 618 002e 1A46     		mov	r2, r3
 619 0030 07F10803 		add	r3, r7, #8
 620 0034 1868     		ldr	r0, [r3]	@ unaligned
 621 0036 1060     		str	r0, [r2]	@ unaligned
 622 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 623 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 262:notoriOS.c    ****     
 263:notoriOS.c    **** }
 624              		.loc 1 263 0
 625 003c 7868     		ldr	r0, [r7, #4]
 626 003e 1437     		adds	r7, r7, #20
 627              		.cfi_def_cfa_offset 4
 628 0040 BD46     		mov	sp, r7
 629              		.cfi_def_cfa_register 13
 630              		@ sp needed
 631 0042 80BC     		pop	{r7}
 632              		.cfi_restore 7
 633              		.cfi_def_cfa_offset 0
 634 0044 7047     		bx	lr
 635              		.cfi_endproc
 636              	.LFE71:
 637              		.size	CreateAlarm, .-CreateAlarm
 638 0046 00BF     		.section	.rodata
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 17


 639 001e 0000     		.align	2
 640              	.LC2:
 641 0020 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 641      2D2D2D2D 
 641      2D2D2D2D 
 641      2D424547 
 641      494E2054 
 642 004a 0000     		.align	2
 643              	.LC3:
 644 004c 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 644      3D25732C 
 644      2053494D 
 644      49443D25 
 644      732C2044 
 645 006b 00       		.align	2
 646              	.LC4:
 647 006c 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 647      2D2D2D2D 
 647      2D2D2D2D 
 647      2D2D2D45 
 647      4E442054 
 648 0095 00       		.ascii	"\000"
 649              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 650              		.align	2
 651              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 652              		.thumb
 653              		.thumb_func
 654              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 655              	ChickityCheckYourselfBeforeYouWreckYourself:
 656              	.LFB72:
 264:notoriOS.c    **** 
 265:notoriOS.c    **** // ==============================================
 266:notoriOS.c    **** // Dropping bombs on your moms
 267:notoriOS.c    **** //      - Ice Cube (1992)
 268:notoriOS.c    **** //
 269:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 270:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 271:notoriOS.c    **** // ==============================================
 272:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 657              		.loc 1 272 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 1944
 660              		@ frame_needed = 1, uses_anonymous_args = 0
 661 0000 90B5     		push	{r4, r7, lr}
 662              		.cfi_def_cfa_offset 12
 663              		.cfi_offset 4, -12
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0002 ADF6141D 		subw	sp, sp, #2324
 667              		.cfi_def_cfa_offset 2336
 668 0006 5EAF     		add	r7, sp, #376
 669              		.cfi_def_cfa 7, 1960
 273:notoriOS.c    **** 
 274:notoriOS.c    ****     //test_t t_influx = influx_test();
 275:notoriOS.c    ****     //printTestStatus(t_influx);
 276:notoriOS.c    ****     
 277:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 18


 670              		.loc 1 277 0
 671 0008 3849     		ldr	r1, .L28
 672 000a 0320     		movs	r0, #3
 673 000c FFF7FEFF 		bl	printNotif
 278:notoriOS.c    ****     
 279:notoriOS.c    ****     // Test level sensor
 280:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 674              		.loc 1 280 0
 675 0010 07F21463 		addw	r3, r7, #1556
 676 0014 1846     		mov	r0, r3
 677 0016 FFF7FEFF 		bl	level_sensor_test
 281:notoriOS.c    ****     printTestStatus(t_level_sensor);
 678              		.loc 1 281 0
 679 001a 07F21464 		addw	r4, r7, #1556
 680 001e 6846     		mov	r0, sp
 681 0020 04F11003 		add	r3, r4, #16
 682 0024 40F27112 		movw	r2, #369
 683 0028 1946     		mov	r1, r3
 684 002a FFF7FEFF 		bl	memcpy
 685 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 686 0032 FFF7FEFF 		bl	printTestStatus
 282:notoriOS.c    ****     
 283:notoriOS.c    ****     // Test voltages
 284:notoriOS.c    ****     test_t t_voltages = voltages_test();
 687              		.loc 1 284 0
 688 0036 07F59263 		add	r3, r7, #1168
 689 003a 1846     		mov	r0, r3
 690 003c FFF7FEFF 		bl	voltages_test
 285:notoriOS.c    ****     printTestStatus(t_voltages);
 691              		.loc 1 285 0
 692 0040 07F59264 		add	r4, r7, #1168
 693 0044 6846     		mov	r0, sp
 694 0046 04F11003 		add	r3, r4, #16
 695 004a 40F27112 		movw	r2, #369
 696 004e 1946     		mov	r1, r3
 697 0050 FFF7FEFF 		bl	memcpy
 698 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 699 0058 FFF7FEFF 		bl	printTestStatus
 286:notoriOS.c    ****  
 287:notoriOS.c    ****     // Test voltages
 288:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 700              		.loc 1 288 0
 701 005c 07F54373 		add	r3, r7, #780
 702 0060 1846     		mov	r0, r3
 703 0062 FFF7FEFF 		bl	pressure_sensor_test
 289:notoriOS.c    ****     printTestStatus(t_pressure);
 704              		.loc 1 289 0
 705 0066 07F54374 		add	r4, r7, #780
 706 006a 6846     		mov	r0, sp
 707 006c 04F11003 		add	r3, r4, #16
 708 0070 40F27112 		movw	r2, #369
 709 0074 1946     		mov	r1, r3
 710 0076 FFF7FEFF 		bl	memcpy
 711 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 712 007e FFF7FEFF 		bl	printTestStatus
 290:notoriOS.c    ****     
 291:notoriOS.c    ****     // Test SD card
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 19


 292:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 713              		.loc 1 292 0
 714 0082 07F5C473 		add	r3, r7, #392
 715 0086 1846     		mov	r0, r3
 716 0088 FFF7FEFF 		bl	SD_card_test
 293:notoriOS.c    ****     printTestStatus(t_sd_card);
 717              		.loc 1 293 0
 718 008c 07F5C474 		add	r4, r7, #392
 719 0090 6846     		mov	r0, sp
 720 0092 04F11003 		add	r3, r4, #16
 721 0096 40F27112 		movw	r2, #369
 722 009a 1946     		mov	r1, r3
 723 009c FFF7FEFF 		bl	memcpy
 724 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 725 00a4 FFF7FEFF 		bl	printTestStatus
 294:notoriOS.c    ****     
 295:notoriOS.c    ****     // Test modem
 296:notoriOS.c    ****     test_t t_modem = modem_test();
 726              		.loc 1 296 0
 727 00a8 3B1D     		adds	r3, r7, #4
 728 00aa 1846     		mov	r0, r3
 729 00ac FFF7FEFF 		bl	modem_test
 297:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 730              		.loc 1 297 0
 731 00b0 0F4B     		ldr	r3, .L28+4
 732 00b2 0093     		str	r3, [sp]
 733 00b4 0F4B     		ldr	r3, .L28+8
 734 00b6 104A     		ldr	r2, .L28+12
 735 00b8 1049     		ldr	r1, .L28+16
 736 00ba 0320     		movs	r0, #3
 737 00bc FFF7FEFF 		bl	printNotif
 298:notoriOS.c    ****     printTestStatus(t_modem);
 738              		.loc 1 298 0
 739 00c0 3C1D     		adds	r4, r7, #4
 740 00c2 6846     		mov	r0, sp
 741 00c4 04F11003 		add	r3, r4, #16
 742 00c8 40F27112 		movw	r2, #369
 743 00cc 1946     		mov	r1, r3
 744 00ce FFF7FEFF 		bl	memcpy
 745 00d2 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 746 00d6 FFF7FEFF 		bl	printTestStatus
 299:notoriOS.c    ****     
 300:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 747              		.loc 1 300 0
 748 00da 0949     		ldr	r1, .L28+20
 749 00dc 0320     		movs	r0, #3
 750 00de FFF7FEFF 		bl	printNotif
 301:notoriOS.c    **** 
 302:notoriOS.c    **** }
 751              		.loc 1 302 0
 752 00e2 00BF     		nop
 753 00e4 07F29C77 		addw	r7, r7, #1948
 754              		.cfi_def_cfa_offset 12
 755 00e8 BD46     		mov	sp, r7
 756              		.cfi_def_cfa_register 13
 757              		@ sp needed
 758 00ea 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 20


 759              	.L29:
 760              		.align	2
 761              	.L28:
 762 00ec 20000000 		.word	.LC2
 763 00f0 04000000 		.word	system_info+4
 764 00f4 00000000 		.word	modem_info
 765 00f8 28000000 		.word	modem_info+40
 766 00fc 4C000000 		.word	.LC3
 767 0100 6C000000 		.word	.LC4
 768              		.cfi_endproc
 769              	.LFE72:
 770              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 771              		.section	.text.main,"ax",%progbits
 772              		.align	2
 773              		.global	main
 774              		.thumb
 775              		.thumb_func
 776              		.type	main, %function
 777              	main:
 778              	.LFB73:
 303:notoriOS.c    **** 
 304:notoriOS.c    **** // ==============================================
 305:notoriOS.c    **** // Processes Core Tasks
 306:notoriOS.c    **** // ==============================================
 307:notoriOS.c    **** int main(void)
 308:notoriOS.c    **** {
 779              		.loc 1 308 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783 0000 80B5     		push	{r7, lr}
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 00AF     		add	r7, sp, #0
 788              		.cfi_def_cfa_register 7
 309:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 789              		.loc 1 309 0
 790              		.syntax unified
 791              	@ 309 "notoriOS.c" 1
 792 0004 62B6     		CPSIE   i
 793              	@ 0 "" 2
 310:notoriOS.c    **** 
 311:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 794              		.loc 1 311 0
 795              		.thumb
 796              		.syntax unified
 797 0006 FFF7FEFF 		bl	ReadyOrNot
 312:notoriOS.c    ****     
 313:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 798              		.loc 1 313 0
 799 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 800              	.L32:
 314:notoriOS.c    ****    
 315:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 316:notoriOS.c    ****     {
 317:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 21


 318:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 801              		.loc 1 318 0
 802 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 803 0012 0346     		mov	r3, r0
 804 0014 002B     		cmp	r3, #0
 805 0016 FAD1     		bne	.L32
 319:notoriOS.c    ****         {
 320:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 806              		.loc 1 320 0
 807 0018 FFF7FEFF 		bl	LayBack
 321:notoriOS.c    ****         }
 322:notoriOS.c    ****     }
 808              		.loc 1 322 0
 809 001c F7E7     		b	.L32
 810              		.cfi_endproc
 811              	.LFE73:
 812              		.size	main, .-main
 813 001e 00BF     		.section	.rodata
 814 0096 0000     		.align	2
 815              	.LC5:
 816 0098 4D6F6465 		.ascii	"Modem is ready.\000"
 816      6D206973 
 816      20726561 
 816      64792E00 
 817              		.align	2
 818              	.LC6:
 819 00a8 256400   		.ascii	"%d\000"
 820 00ab 00       		.align	2
 821              	.LC7:
 822 00ac 72737270 		.ascii	"rsrp\000"
 822      00
 823 00b1 000000   		.align	2
 824              	.LC8:
 825 00b4 72736370 		.ascii	"rscp\000"
 825      00
 826 00b9 000000   		.align	2
 827              	.LC9:
 828 00bc 7472795F 		.ascii	"try_counter\000"
 828      636F756E 
 828      74657200 
 829              		.align	2
 830              	.LC10:
 831 00c8 64617461 		.ascii	"data_count_sent\000"
 831      5F636F75 
 831      6E745F73 
 831      656E7400 
 832              		.align	2
 833              	.LC11:
 834 00d8 64617461 		.ascii	"data_count_desired\000"
 834      5F636F75 
 834      6E745F64 
 834      65736972 
 834      656400
 835 00eb 00       		.align	2
 836              	.LC12:
 837 00ec 42656769 		.ascii	"Begin HTTP post.\000"
 837      6E204854 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 22


 837      54502070 
 837      6F73742E 
 837      00
 838 00fd 000000   		.align	2
 839              	.LC13:
 840 0100 65633733 		.ascii	"ec73fb872735d78ae15a240cb42c07ea3d80e74b\000"
 840      66623837 
 840      32373335 
 840      64373861 
 840      65313561 
 841 0129 000000   		.align	2
 842              	.LC14:
 843 012c 6170692F 		.ascii	"api/v1/write\000"
 843      76312F77 
 843      72697465 
 843      00
 844 0139 000000   		.align	2
 845              	.LC15:
 846 013c 48545450 		.ascii	"HTTP route: %s\000"
 846      20726F75 
 846      74653A20 
 846      257300
 847 014b 00       		.align	2
 848              	.LC16:
 849 014c 312E3100 		.ascii	"1.1\000"
 850              		.align	2
 851              	.LC17:
 852 0150 00       		.ascii	"\000"
 853 0151 000000   		.align	2
 854              	.LC18:
 855 0154 436C6F73 		.ascii	"Close\000"
 855      6500
 856 015a 0000     		.align	2
 857              	.LC19:
 858 015c 504F5354 		.ascii	"POST\000"
 858      00
 859 0161 000000   		.align	2
 860              	.LC20:
 861 0164 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 861      20485454 
 861      50205265 
 861      71756573 
 861      743A2025 
 862 017a 0000     		.align	2
 863              	.LC21:
 864 017c 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 864      443D312C 
 864      302C2564 
 864      2C222573 
 864      222C302C 
 865 0195 000000   		.align	2
 866              	.LC22:
 867 0198 257300   		.ascii	"%s\000"
 868 019b 00       		.align	2
 869              	.LC23:
 870 019c 4F4B00   		.ascii	"OK\000"
 871              		.global	__aeabi_ui2d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 23


 872              		.global	__aeabi_d2iz
 873 019f 00       		.align	2
 874              	.LC24:
 875 01a0 68747470 		.ascii	"http_request len: %d\000"
 875      5F726571 
 875      75657374 
 875      206C656E 
 875      3A202564 
 876 01b5 000000   		.align	2
 877              	.LC25:
 878 01b8 23206F66 		.ascii	"# of packets: %d\000"
 878      20706163 
 878      6B657473 
 878      3A202564 
 878      00
 879 01c9 000000   		.align	2
 880              	.LC26:
 881 01cc 3E00     		.ascii	">\000"
 882 01ce 0000     		.align	2
 883              	.LC27:
 884 01d0 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 884      53454E44 
 884      3D310D0A 
 884      00
 885 01dd 000000   		.align	2
 886              	.LC28:
 887 01e0 1A00     		.ascii	"\032\000"
 888 01e2 0000     		.align	2
 889              	.LC29:
 890 01e4 6368756E 		.ascii	"chunk %d: %s\000"
 890      6B202564 
 890      3A202573 
 890      00
 891 01f1 000000   		.align	2
 892              	.LC30:
 893 01f4 5352494E 		.ascii	"SRING\000"
 893      4700
 894 01fa 0000     		.align	2
 895              	.LC31:
 896 01fc 4F532D4F 		.ascii	"OS-OK\000"
 896      4B00
 897 0202 0000     		.align	2
 898              	.LC32:
 899 0204 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 899      52454356 
 899      3D312C31 
 899      3030300D 
 899      00
 900 0215 000000   		.align	2
 901              	.LC33:
 902 0218 6D6F6465 		.ascii	"modem_tx_time\000"
 902      6D5F7478 
 902      5F74696D 
 902      6500
 903 0226 0000     		.align	2
 904              	.LC34:
 905 0228 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 24


 905      4F3A2043 
 905      6F756C64 
 905      206E6F74 
 905      20726563 
 906              		.section	.text.syncData,"ax",%progbits
 907              		.align	2
 908              		.global	syncData
 909              		.thumb
 910              		.thumb_func
 911              		.type	syncData, %function
 912              	syncData:
 913              	.LFB74:
 323:notoriOS.c    **** }
 324:notoriOS.c    **** 
 325:notoriOS.c    **** // ==============================================
 326:notoriOS.c    **** // Syncs data with server
 327:notoriOS.c    **** // Returns 0 when done
 328:notoriOS.c    **** // ==============================================
 329:notoriOS.c    **** uint8 syncData(){
 914              		.loc 1 329 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 1360
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918 0000 90B5     		push	{r4, r7, lr}
 919              		.cfi_def_cfa_offset 12
 920              		.cfi_offset 4, -12
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 ADF26C5D 		subw	sp, sp, #1388
 924              		.cfi_def_cfa_offset 1400
 925 0006 06AF     		add	r7, sp, #24
 926              		.cfi_def_cfa 7, 1376
 330:notoriOS.c    ****     
 331:notoriOS.c    ****     /*
 332:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 333:notoriOS.c    ****     uint8 check = 0;
 334:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 335:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 336:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 337:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 338:notoriOS.c    ****     */
 339:notoriOS.c    **** 
 340:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 341:notoriOS.c    ****     LED_Write(1u);
 927              		.loc 1 341 0
 928 0008 0120     		movs	r0, #1
 929 000a FFF7FEFF 		bl	LED_Write
 342:notoriOS.c    ****     CyDelay(100u);
 930              		.loc 1 342 0
 931 000e 6420     		movs	r0, #100
 932 0010 FFF7FEFF 		bl	CyDelay
 343:notoriOS.c    ****     LED_Write(0u);
 933              		.loc 1 343 0
 934 0014 0020     		movs	r0, #0
 935 0016 FFF7FEFF 		bl	LED_Write
 344:notoriOS.c    **** 
 345:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 25


 346:notoriOS.c    ****     // If there's no data, not need to do anything
 347:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 936              		.loc 1 347 0
 937 001a FFF7FEFF 		bl	sizeOfDataStack
 938 001e 0346     		mov	r3, r0
 939 0020 002B     		cmp	r3, #0
 940 0022 01D1     		bne	.L34
 348:notoriOS.c    ****         return 0u;
 941              		.loc 1 348 0
 942 0024 0023     		movs	r3, #0
 943 0026 03E2     		b	.L35
 944              	.L34:
 349:notoriOS.c    ****         }
 350:notoriOS.c    ****     
 351:notoriOS.c    ****     // Create request body, in this case influx
 352:notoriOS.c    ****     // Place body into HTTP request header
 353:notoriOS.c    ****     // Fire up modem and get it out
 354:notoriOS.c    ****      
 355:notoriOS.c    ****     
 356:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 357:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 945              		.loc 1 357 0
 946 0028 FFF7FEFF 		bl	modem_get_state
 947 002c 0346     		mov	r3, r0
 948 002e 002B     		cmp	r3, #0
 949 0030 11D1     		bne	.L36
 358:notoriOS.c    **** 
 359:notoriOS.c    ****         try_counter++;
 950              		.loc 1 359 0
 951 0032 AE4B     		ldr	r3, .L48
 952 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 953 0036 0133     		adds	r3, r3, #1
 954 0038 DAB2     		uxtb	r2, r3
 955 003a AC4B     		ldr	r3, .L48
 956 003c 1A70     		strb	r2, [r3]
 360:notoriOS.c    ****         	
 361:notoriOS.c    ****         if(try_counter <= 2){
 957              		.loc 1 361 0
 958 003e AB4B     		ldr	r3, .L48
 959 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 960 0042 022B     		cmp	r3, #2
 961 0044 02D8     		bhi	.L37
 362:notoriOS.c    ****             modem_power_up();
 962              		.loc 1 362 0
 963 0046 FFF7FEFF 		bl	modem_power_up
 964 004a F0E1     		b	.L38
 965              	.L37:
 363:notoriOS.c    ****         }else{
 364:notoriOS.c    ****             try_counter = 0;
 966              		.loc 1 364 0
 967 004c A74B     		ldr	r3, .L48
 968 004e 0022     		movs	r2, #0
 969 0050 1A70     		strb	r2, [r3]
 365:notoriOS.c    ****             return 0u;
 970              		.loc 1 365 0
 971 0052 0023     		movs	r3, #0
 972 0054 ECE1     		b	.L35
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 26


 973              	.L36:
 366:notoriOS.c    ****             }
 367:notoriOS.c    ****             
 368:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 974              		.loc 1 368 0
 975 0056 FFF7FEFF 		bl	modem_get_state
 976 005a 0346     		mov	r3, r0
 977 005c 042B     		cmp	r3, #4
 978 005e 40F0E681 		bne	.L38
 979              	.LBB2:
 369:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 980              		.loc 1 369 0
 981 0062 A349     		ldr	r1, .L48+4
 982 0064 0020     		movs	r0, #0
 983 0066 FFF7FEFF 		bl	printNotif
 370:notoriOS.c    ****         
 371:notoriOS.c    ****         http_request[0] = '\0';
 984              		.loc 1 371 0
 985 006a A24B     		ldr	r3, .L48+8
 986 006c 0022     		movs	r2, #0
 987 006e 1A70     		strb	r2, [r3]
 372:notoriOS.c    ****         http_body[0] = '\0';
 988              		.loc 1 372 0
 989 0070 A14B     		ldr	r3, .L48+12
 990 0072 0022     		movs	r2, #0
 991 0074 1A70     		strb	r2, [r3]
 373:notoriOS.c    ****         http_route[0] = '\0';
 992              		.loc 1 373 0
 993 0076 A14B     		ldr	r3, .L48+16
 994 0078 0022     		movs	r2, #0
 995 007a 1A70     		strb	r2, [r3]
 374:notoriOS.c    ****         //char *base = "write";
 375:notoriOS.c    ****         
 376:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 377:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 378:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 996              		.loc 1 378 0
 997 007c A04B     		ldr	r3, .L48+20
 998 007e 5B69     		ldr	r3, [r3, #20]
 999 0080 07F5A560 		add	r0, r7, #1320
 1000 0084 9F4A     		ldr	r2, .L48+24
 1001 0086 1421     		movs	r1, #20
 1002 0088 FFF7FEFF 		bl	snprintf
 379:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1003              		.loc 1 379 0
 1004 008c FFF7FEFF 		bl	getTimeStamp
 1005 0090 0246     		mov	r2, r0
 1006 0092 07F5A563 		add	r3, r7, #1320
 1007 0096 1946     		mov	r1, r3
 1008 0098 9B48     		ldr	r0, .L48+28
 1009 009a FFF7FEFF 		bl	pushData
 380:notoriOS.c    ****         
 381:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 382:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1010              		.loc 1 382 0
 1011 009e 984B     		ldr	r3, .L48+20
 1012 00a0 9B68     		ldr	r3, [r3, #8]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 27


 1013 00a2 07F21450 		addw	r0, r7, #1300
 1014 00a6 974A     		ldr	r2, .L48+24
 1015 00a8 1421     		movs	r1, #20
 1016 00aa FFF7FEFF 		bl	snprintf
 383:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1017              		.loc 1 383 0
 1018 00ae FFF7FEFF 		bl	getTimeStamp
 1019 00b2 0246     		mov	r2, r0
 1020 00b4 07F21453 		addw	r3, r7, #1300
 1021 00b8 1946     		mov	r1, r3
 1022 00ba 9448     		ldr	r0, .L48+32
 1023 00bc FFF7FEFF 		bl	pushData
 384:notoriOS.c    ****         
 385:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 386:notoriOS.c    ****         char c_try_counter[20];
 387:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1024              		.loc 1 387 0
 1025 00c0 8A4B     		ldr	r3, .L48
 1026 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1027 00c4 07F5A060 		add	r0, r7, #1280
 1028 00c8 8E4A     		ldr	r2, .L48+24
 1029 00ca 1421     		movs	r1, #20
 1030 00cc FFF7FEFF 		bl	snprintf
 388:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1031              		.loc 1 388 0
 1032 00d0 FFF7FEFF 		bl	getTimeStamp
 1033 00d4 0246     		mov	r2, r0
 1034 00d6 07F5A063 		add	r3, r7, #1280
 1035 00da 1946     		mov	r1, r3
 1036 00dc 8C48     		ldr	r0, .L48+36
 1037 00de FFF7FEFF 		bl	pushData
 389:notoriOS.c    ****         
 390:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 391:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 392:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 393:notoriOS.c    ****         if(buffer_overflow == false){
 1038              		.loc 1 393 0
 1039 00e2 8C4B     		ldr	r3, .L48+40
 1040 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 00e6 83F00103 		eor	r3, r3, #1
 1042 00ea DBB2     		uxtb	r3, r3
 1043 00ec 002B     		cmp	r3, #0
 1044 00ee 16D0     		beq	.L39
 1045              	.LBB3:
 394:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1046              		.loc 1 394 0
 1047 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1048 00f4 0346     		mov	r3, r0
 1049 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 395:notoriOS.c    ****             char c_data_count_sent[20];
 396:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1050              		.loc 1 396 0
 1051 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1052 00fe 07F59B60 		add	r0, r7, #1240
 1053 0102 804A     		ldr	r2, .L48+24
 1054 0104 1421     		movs	r1, #20
 1055 0106 FFF7FEFF 		bl	snprintf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 28


 397:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1056              		.loc 1 397 0
 1057 010a FFF7FEFF 		bl	getTimeStamp
 1058 010e 0246     		mov	r2, r0
 1059 0110 07F59B63 		add	r3, r7, #1240
 1060 0114 1946     		mov	r1, r3
 1061 0116 8048     		ldr	r0, .L48+44
 1062 0118 FFF7FEFF 		bl	pushData
 1063              	.LBE3:
 1064 011c 0FE0     		b	.L40
 1065              	.L39:
 1066              	.LBB4:
 398:notoriOS.c    ****         }else{
 399:notoriOS.c    ****             char c_data_count_sent[20];
 400:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1067              		.loc 1 400 0
 1068 011e 07F2C440 		addw	r0, r7, #1220
 1069 0122 9623     		movs	r3, #150
 1070 0124 774A     		ldr	r2, .L48+24
 1071 0126 1421     		movs	r1, #20
 1072 0128 FFF7FEFF 		bl	snprintf
 401:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1073              		.loc 1 401 0
 1074 012c FFF7FEFF 		bl	getTimeStamp
 1075 0130 0246     		mov	r2, r0
 1076 0132 07F2C443 		addw	r3, r7, #1220
 1077 0136 1946     		mov	r1, r3
 1078 0138 7748     		ldr	r0, .L48+44
 1079 013a FFF7FEFF 		bl	pushData
 1080              	.L40:
 1081              	.LBE4:
 402:notoriOS.c    ****         }
 403:notoriOS.c    ****         
 404:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 405:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1082              		.loc 1 405 0
 1083 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1084 0142 0346     		mov	r3, r0
 1085 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 406:notoriOS.c    ****         char c_data_count_desired[20];
 407:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 408:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1086              		.loc 1 408 0
 1087 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1088 014c 013B     		subs	r3, r3, #1
 1089 014e 07F2EC40 		addw	r0, r7, #1260
 1090 0152 6C4A     		ldr	r2, .L48+24
 1091 0154 1421     		movs	r1, #20
 1092 0156 FFF7FEFF 		bl	snprintf
 409:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1093              		.loc 1 409 0
 1094 015a FFF7FEFF 		bl	getTimeStamp
 1095 015e 0246     		mov	r2, r0
 1096 0160 07F2EC43 		addw	r3, r7, #1260
 1097 0164 1946     		mov	r1, r3
 1098 0166 6D48     		ldr	r0, .L48+48
 1099 0168 FFF7FEFF 		bl	pushData
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 29


 410:notoriOS.c    ****         
 411:notoriOS.c    ****         // Construct HTPP request
 412:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1100              		.loc 1 412 0
 1101 016c 6C49     		ldr	r1, .L48+52
 1102 016e 0020     		movs	r0, #0
 1103 0170 FFF7FEFF 		bl	printNotif
 413:notoriOS.c    ****         
 414:notoriOS.c    ****         // Old influx API
 415:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 416:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1104              		.loc 1 416 0
 1105 0174 6B4B     		ldr	r3, .L48+56
 1106 0176 6C4A     		ldr	r2, .L48+60
 1107 0178 6C49     		ldr	r1, .L48+64
 1108 017a 6048     		ldr	r0, .L48+16
 1109 017c FFF7FEFF 		bl	construct_malcom_route
 417:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1110              		.loc 1 417 0
 1111 0180 5E4A     		ldr	r2, .L48+16
 1112 0182 6B49     		ldr	r1, .L48+68
 1113 0184 0020     		movs	r0, #0
 1114 0186 FFF7FEFF 		bl	printNotif
 418:notoriOS.c    ****         
 419:notoriOS.c    ****         //OLD INFLUX API
 420:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 421:notoriOS.c    ****         construct_malcom_body(http_body);
 1115              		.loc 1 421 0
 1116 018a 5B48     		ldr	r0, .L48+12
 1117 018c FFF7FEFF 		bl	construct_malcom_body
 422:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1118              		.loc 1 422 0
 1119 0190 684B     		ldr	r3, .L48+72
 1120 0192 5B6E     		ldr	r3, [r3, #100]
 1121 0194 684A     		ldr	r2, .L48+76
 1122 0196 0592     		str	r2, [sp, #20]
 1123 0198 0022     		movs	r2, #0
 1124 019a 0492     		str	r2, [sp, #16]
 1125 019c 674A     		ldr	r2, .L48+80
 1126 019e 0392     		str	r2, [sp, #12]
 1127 01a0 674A     		ldr	r2, .L48+84
 1128 01a2 0292     		str	r2, [sp, #8]
 1129 01a4 674A     		ldr	r2, .L48+88
 1130 01a6 0192     		str	r2, [sp, #4]
 1131 01a8 0093     		str	r3, [sp]
 1132 01aa 544B     		ldr	r3, .L48+16
 1133 01ac 614A     		ldr	r2, .L48+72
 1134 01ae 5249     		ldr	r1, .L48+12
 1135 01b0 5048     		ldr	r0, .L48+8
 1136 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 423:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1137              		.loc 1 423 0
 1138 01b6 4F4A     		ldr	r2, .L48+8
 1139 01b8 6349     		ldr	r1, .L48+92
 1140 01ba 0020     		movs	r0, #0
 1141 01bc FFF7FEFF 		bl	printNotif
 424:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 30


 425:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 426:notoriOS.c    ****         // Open port and begin command line sequence
 427:notoriOS.c    ****         char portConfig[200];
 428:notoriOS.c    ****         uint8 status = 0u;
 1142              		.loc 1 428 0
 1143 01c0 0023     		movs	r3, #0
 1144 01c2 87F84535 		strb	r3, [r7, #1349]
 429:notoriOS.c    ****         
 430:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1145              		.loc 1 430 0
 1146 01c6 5B4B     		ldr	r3, .L48+72
 1147 01c8 5A6E     		ldr	r2, [r3, #100]
 1148 01ca 381D     		adds	r0, r7, #4
 1149 01cc 594B     		ldr	r3, .L48+72
 1150 01ce 0093     		str	r3, [sp]
 1151 01d0 1346     		mov	r3, r2
 1152 01d2 5E4A     		ldr	r2, .L48+96
 1153 01d4 C821     		movs	r1, #200
 1154 01d6 FFF7FEFF 		bl	snprintf
 431:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1155              		.loc 1 431 0
 1156 01da 3B1D     		adds	r3, r7, #4
 1157 01dc 1A46     		mov	r2, r3
 1158 01de 5C49     		ldr	r1, .L48+100
 1159 01e0 0020     		movs	r0, #0
 1160 01e2 FFF7FEFF 		bl	printNotif
 432:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1161              		.loc 1 432 0
 1162 01e6 3B1D     		adds	r3, r7, #4
 1163 01e8 42F21072 		movw	r2, #10000
 1164 01ec 5949     		ldr	r1, .L48+104
 1165 01ee 1846     		mov	r0, r3
 1166 01f0 FFF7FEFF 		bl	at_write_command
 1167 01f4 0346     		mov	r3, r0
 1168 01f6 87F84535 		strb	r3, [r7, #1349]
 433:notoriOS.c    ****         
 434:notoriOS.c    ****         // create character pointer to chunk through the http_request
 435:notoriOS.c    ****         char *chunk;
 436:notoriOS.c    ****         // Set chunk to start where http_request starts
 437:notoriOS.c    ****         chunk = http_request;
 1169              		.loc 1 437 0
 1170 01fa 3E4B     		ldr	r3, .L48+8
 1171 01fc C7F84C35 		str	r3, [r7, #1356]
 438:notoriOS.c    ****         // variable for the number of packets to send
 439:notoriOS.c    ****         int8 packets;
 440:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1172              		.loc 1 440 0
 1173 0200 3C48     		ldr	r0, .L48+8
 1174 0202 FFF7FEFF 		bl	strlen
 1175 0206 0246     		mov	r2, r0
 1176 0208 534B     		ldr	r3, .L48+108
 1177 020a A3FB0223 		umull	r2, r3, r3, r2
 1178 020e 5B09     		lsrs	r3, r3, #5
 1179 0210 1846     		mov	r0, r3
 1180 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1181 0216 4FF00002 		mov	r2, #0
 1182 021a 504B     		ldr	r3, .L48+112
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 31


 1183 021c FFF7FEFF 		bl	nextafter
 1184 0220 0346     		mov	r3, r0
 1185 0222 0C46     		mov	r4, r1
 1186 0224 1846     		mov	r0, r3
 1187 0226 2146     		mov	r1, r4
 1188 0228 FFF7FEFF 		bl	ceil
 1189 022c 0346     		mov	r3, r0
 1190 022e 0C46     		mov	r4, r1
 1191 0230 1846     		mov	r0, r3
 1192 0232 2146     		mov	r1, r4
 1193 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1194 0238 0346     		mov	r3, r0
 1195 023a 87F84435 		strb	r3, [r7, #1348]
 441:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1196              		.loc 1 441 0
 1197 023e 2D48     		ldr	r0, .L48+8
 1198 0240 FFF7FEFF 		bl	strlen
 1199 0244 0346     		mov	r3, r0
 1200 0246 1A46     		mov	r2, r3
 1201 0248 4549     		ldr	r1, .L48+116
 1202 024a 0020     		movs	r0, #0
 1203 024c FFF7FEFF 		bl	printNotif
 442:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1204              		.loc 1 442 0
 1205 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1206 0254 1A46     		mov	r2, r3
 1207 0256 4349     		ldr	r1, .L48+120
 1208 0258 0020     		movs	r0, #0
 1209 025a FFF7FEFF 		bl	printNotif
 1210              	.LBB5:
 443:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 444:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1211              		.loc 1 444 0
 1212 025e 0023     		movs	r3, #0
 1213 0260 87F84B35 		strb	r3, [r7, #1355]
 1214 0264 9AE0     		b	.L41
 1215              	.L44:
 1216              	.LBB6:
 445:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 446:notoriOS.c    ****             char http_chunk[1001];
 447:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 448:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 449:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1217              		.loc 1 449 0
 1218 0266 4FF47A72 		mov	r2, #1000
 1219 026a 3F49     		ldr	r1, .L48+124
 1220 026c 3F48     		ldr	r0, .L48+128
 1221 026e FFF7FEFF 		bl	at_write_command
 1222 0272 0346     		mov	r3, r0
 1223 0274 87F84535 		strb	r3, [r7, #1349]
 450:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 451:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1224              		.loc 1 451 0
 1225 0278 07F1CC00 		add	r0, r7, #204
 1226 027c D7F84C35 		ldr	r3, [r7, #1356]
 1227 0280 334A     		ldr	r2, .L48+100
 1228 0282 4FF4FA71 		mov	r1, #500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 32


 1229 0286 FFF7FEFF 		bl	snprintf
 452:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 453:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1230              		.loc 1 453 0
 1231 028a 07F1CC03 		add	r3, r7, #204
 1232 028e 1846     		mov	r0, r3
 1233 0290 FFF7FEFF 		bl	strlen
 1234 0294 0346     		mov	r3, r0
 1235 0296 1A46     		mov	r2, r3
 1236 0298 07F1CC03 		add	r3, r7, #204
 1237 029c 1344     		add	r3, r3, r2
 1238 029e 3449     		ldr	r1, .L48+132
 1239 02a0 1A46     		mov	r2, r3
 1240 02a2 0B46     		mov	r3, r1
 1241 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1242 02a6 1380     		strh	r3, [r2]	@ unaligned
 454:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1243              		.loc 1 454 0
 1244 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1245 02ac 07F1CC03 		add	r3, r7, #204
 1246 02b0 3049     		ldr	r1, .L48+136
 1247 02b2 0020     		movs	r0, #0
 1248 02b4 FFF7FEFF 		bl	printNotif
 455:notoriOS.c    ****             // Send data to server
 456:notoriOS.c    ****             if ((packet+1) != packets){
 1249              		.loc 1 456 0
 1250 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1251 02bc 5A1C     		adds	r2, r3, #1
 1252 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1253 02c2 9A42     		cmp	r2, r3
 1254 02c4 58D0     		beq	.L42
 457:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1255              		.loc 1 457 0
 1256 02c6 07F1CC03 		add	r3, r7, #204
 1257 02ca 41F28832 		movw	r2, #5000
 1258 02ce 2149     		ldr	r1, .L48+104
 1259 02d0 1846     		mov	r0, r3
 1260 02d2 FFF7FEFF 		bl	at_write_command
 1261 02d6 0346     		mov	r3, r0
 1262 02d8 87F84535 		strb	r3, [r7, #1349]
 458:notoriOS.c    ****                 // Move the pointer forward 
 459:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1263              		.loc 1 459 0
 1264 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1265 02e0 03F2F313 		addw	r3, r3, #499
 1266 02e4 C7F84C35 		str	r3, [r7, #1356]
 1267 02e8 51E0     		b	.L43
 1268              	.L49:
 1269 02ea 00BF     		.align	2
 1270              	.L48:
 1271 02ec 00000000 		.word	try_counter
 1272 02f0 98000000 		.word	.LC5
 1273 02f4 00000000 		.word	http_request
 1274 02f8 00000000 		.word	http_body
 1275 02fc 00000000 		.word	http_route
 1276 0300 00000000 		.word	modem_stats
 1277 0304 A8000000 		.word	.LC6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 33


 1278 0308 AC000000 		.word	.LC7
 1279 030c B4000000 		.word	.LC8
 1280 0310 BC000000 		.word	.LC9
 1281 0314 00000000 		.word	buffer_overflow
 1282 0318 C8000000 		.word	.LC10
 1283 031c D8000000 		.word	.LC11
 1284 0320 EC000000 		.word	.LC12
 1285 0324 00010000 		.word	.LC13
 1286 0328 28000000 		.word	modem_info+40
 1287 032c 2C010000 		.word	.LC14
 1288 0330 3C010000 		.word	.LC15
 1289 0334 00000000 		.word	system_settings
 1290 0338 4C010000 		.word	.LC16
 1291 033c 50010000 		.word	.LC17
 1292 0340 54010000 		.word	.LC18
 1293 0344 5C010000 		.word	.LC19
 1294 0348 64010000 		.word	.LC20
 1295 034c 7C010000 		.word	.LC21
 1296 0350 98010000 		.word	.LC22
 1297 0354 9C010000 		.word	.LC23
 1298 0358 D34D6210 		.word	274877907
 1299 035c 00407F40 		.word	1082081280
 1300 0360 A0010000 		.word	.LC24
 1301 0364 B8010000 		.word	.LC25
 1302 0368 CC010000 		.word	.LC26
 1303 036c D0010000 		.word	.LC27
 1304 0370 E0010000 		.word	.LC28
 1305 0374 E4010000 		.word	.LC29
 1306              	.L42:
 460:notoriOS.c    ****             }else{
 461:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1307              		.loc 1 461 0
 1308 0378 07F1CC03 		add	r3, r7, #204
 1309 037c 41F28832 		movw	r2, #5000
 1310 0380 2E49     		ldr	r1, .L50
 1311 0382 1846     		mov	r0, r3
 1312 0384 FFF7FEFF 		bl	at_write_command
 1313 0388 0346     		mov	r3, r0
 1314 038a 87F84535 		strb	r3, [r7, #1349]
 1315              	.L43:
 1316              	.LBE6:
 444:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1317              		.loc 1 444 0 discriminator 2
 1318 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1319 0392 DBB2     		uxtb	r3, r3
 1320 0394 0133     		adds	r3, r3, #1
 1321 0396 DBB2     		uxtb	r3, r3
 1322 0398 87F84B35 		strb	r3, [r7, #1355]
 1323              	.L41:
 444:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1324              		.loc 1 444 0 is_stmt 0 discriminator 1
 1325 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1326 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1327 03a4 9A42     		cmp	r2, r3
 1328 03a6 FFF65EAF 		blt	.L44
 1329              	.LBE5:
 462:notoriOS.c    ****             }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 34


 463:notoriOS.c    ****             
 464:notoriOS.c    ****         }
 465:notoriOS.c    ****         
 466:notoriOS.c    ****         // Read received buffer
 467:notoriOS.c    ****         // A good write will return code "OS-OK"
 468:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 469:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 470:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1330              		.loc 1 470 0 is_stmt 1
 1331 03aa 41F28832 		movw	r2, #5000
 1332 03ae 2449     		ldr	r1, .L50+4
 1333 03b0 2448     		ldr	r0, .L50+8
 1334 03b2 FFF7FEFF 		bl	at_write_command
 1335 03b6 0346     		mov	r3, r0
 1336 03b8 87F84535 		strb	r3, [r7, #1349]
 471:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 472:notoriOS.c    ****     
 473:notoriOS.c    ****   
 474:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 475:notoriOS.c    ****         if(status == 1u){
 1337              		.loc 1 475 0
 1338 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1339 03c0 012B     		cmp	r3, #1
 1340 03c2 1DD1     		bne	.L45
 1341              	.LBB7:
 476:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1342              		.loc 1 476 0
 1343 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 477:notoriOS.c    ****             Clear_Data_Stack();
 1344              		.loc 1 477 0
 1345 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 478:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1346              		.loc 1 478 0
 1347 03cc FFF7FEFF 		bl	getTimeStamp
 1348 03d0 0246     		mov	r2, r0
 1349 03d2 1D4B     		ldr	r3, .L50+12
 1350 03d4 1B68     		ldr	r3, [r3]
 1351 03d6 D31A     		subs	r3, r2, r3
 1352 03d8 C7F84035 		str	r3, [r7, #1344]
 479:notoriOS.c    ****             char s_send_time[10];
 480:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1353              		.loc 1 480 0
 1354 03dc 07F59760 		add	r0, r7, #1208
 1355 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1356 03e4 194A     		ldr	r2, .L50+16
 1357 03e6 0A21     		movs	r1, #10
 1358 03e8 FFF7FEFF 		bl	snprintf
 481:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1359              		.loc 1 481 0
 1360 03ec FFF7FEFF 		bl	getTimeStamp
 1361 03f0 0246     		mov	r2, r0
 1362 03f2 07F59763 		add	r3, r7, #1208
 1363 03f6 1946     		mov	r1, r3
 1364 03f8 1548     		ldr	r0, .L50+20
 1365 03fa FFF7FEFF 		bl	pushData
 1366              	.LBE7:
 1367 03fe 03E0     		b	.L46
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 35


 1368              	.L45:
 482:notoriOS.c    ****         }else{
 483:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1369              		.loc 1 483 0
 1370 0400 1449     		ldr	r1, .L50+24
 1371 0402 0220     		movs	r0, #2
 1372 0404 FFF7FEFF 		bl	printNotif
 1373              	.L46:
 484:notoriOS.c    ****         }
 485:notoriOS.c    ****          
 486:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 487:notoriOS.c    ****         long network_time = modem_get_network_time();
 1374              		.loc 1 487 0
 1375 0408 FFF7FEFF 		bl	modem_get_network_time
 1376 040c C7F83C05 		str	r0, [r7, #1340]
 488:notoriOS.c    ****         if(network_time != 0){
 1377              		.loc 1 488 0
 1378 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1379 0414 002B     		cmp	r3, #0
 1380 0416 03D0     		beq	.L47
 489:notoriOS.c    ****            setTime(network_time);
 1381              		.loc 1 489 0
 1382 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1383 041c FFF7FEFF 		bl	setTime
 1384              	.L47:
 490:notoriOS.c    ****         }
 491:notoriOS.c    ****         
 492:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 493:notoriOS.c    ****         // If not -- keep the statck and try next time
 494:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 495:notoriOS.c    ****         modem_power_down();
 1385              		.loc 1 495 0
 1386 0420 FFF7FEFF 		bl	modem_power_down
 496:notoriOS.c    ****         
 497:notoriOS.c    ****         try_counter = 0u;
 1387              		.loc 1 497 0
 1388 0424 0C4B     		ldr	r3, .L50+28
 1389 0426 0022     		movs	r2, #0
 1390 0428 1A70     		strb	r2, [r3]
 498:notoriOS.c    ****         return 0u;
 1391              		.loc 1 498 0
 1392 042a 0023     		movs	r3, #0
 1393 042c 00E0     		b	.L35
 1394              	.L38:
 1395              	.LBE2:
 499:notoriOS.c    ****     }
 500:notoriOS.c    ****       
 501:notoriOS.c    ****       return 1u; // Not done yet
 1396              		.loc 1 501 0
 1397 042e 0123     		movs	r3, #1
 1398              	.L35:
 502:notoriOS.c    **** }
 1399              		.loc 1 502 0 discriminator 1
 1400 0430 1846     		mov	r0, r3
 1401 0432 07F25457 		addw	r7, r7, #1364
 1402              		.cfi_def_cfa_offset 12
 1403 0436 BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 36


 1404              		.cfi_def_cfa_register 13
 1405              		@ sp needed
 1406 0438 90BD     		pop	{r4, r7, pc}
 1407              	.L51:
 1408 043a 00BF     		.align	2
 1409              	.L50:
 1410 043c F4010000 		.word	.LC30
 1411 0440 FC010000 		.word	.LC31
 1412 0444 04020000 		.word	.LC32
 1413 0448 00000000 		.word	modem_start_time_stamp
 1414 044c A8000000 		.word	.LC6
 1415 0450 18020000 		.word	.LC33
 1416 0454 28020000 		.word	.LC34
 1417 0458 00000000 		.word	try_counter
 1418              		.cfi_endproc
 1419              	.LFE74:
 1420              		.size	syncData, .-syncData
 1421              		.section	.text.configureRemoteParams,"ax",%progbits
 1422              		.align	2
 1423              		.global	configureRemoteParams
 1424              		.thumb
 1425              		.thumb_func
 1426              		.type	configureRemoteParams, %function
 1427              	configureRemoteParams:
 1428              	.LFB75:
 503:notoriOS.c    **** 
 504:notoriOS.c    **** // ==============================================
 505:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 506:notoriOS.c    **** // Returns 0 when done
 507:notoriOS.c    **** // ==============================================
 508:notoriOS.c    **** uint8 configureRemoteParams(){
 1429              		.loc 1 508 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 8
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433 0000 80B5     		push	{r7, lr}
 1434              		.cfi_def_cfa_offset 8
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
 1437 0002 82B0     		sub	sp, sp, #8
 1438              		.cfi_def_cfa_offset 16
 1439 0004 00AF     		add	r7, sp, #0
 1440              		.cfi_def_cfa_register 7
 509:notoriOS.c    ****     
 510:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1441              		.loc 1 510 0
 1442 0006 FFF7FEFF 		bl	modem_get_state
 1443 000a 0346     		mov	r3, r0
 1444 000c 002B     		cmp	r3, #0
 1445 000e 02D1     		bne	.L53
 511:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 512:notoriOS.c    ****         modem_power_up();
 1446              		.loc 1 512 0
 1447 0010 FFF7FEFF 		bl	modem_power_up
 1448 0014 11E0     		b	.L54
 1449              	.L53:
 513:notoriOS.c    ****             
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 37


 514:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1450              		.loc 1 514 0
 1451 0016 FFF7FEFF 		bl	modem_get_state
 1452 001a 0346     		mov	r3, r0
 1453 001c 042B     		cmp	r3, #4
 1454 001e 0CD1     		bne	.L54
 1455              	.LBB8:
 515:notoriOS.c    ****         
 516:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 517:notoriOS.c    ****         
 518:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 519:notoriOS.c    ****         long network_time = modem_get_network_time();
 1456              		.loc 1 519 0
 1457 0020 FFF7FEFF 		bl	modem_get_network_time
 1458 0024 7860     		str	r0, [r7, #4]
 520:notoriOS.c    ****         if(network_time != 0){
 1459              		.loc 1 520 0
 1460 0026 7B68     		ldr	r3, [r7, #4]
 1461 0028 002B     		cmp	r3, #0
 1462 002a 02D0     		beq	.L55
 521:notoriOS.c    ****             setTime(network_time);
 1463              		.loc 1 521 0
 1464 002c 7868     		ldr	r0, [r7, #4]
 1465 002e FFF7FEFF 		bl	setTime
 1466              	.L55:
 522:notoriOS.c    ****         }
 523:notoriOS.c    ****         
 524:notoriOS.c    ****         // Get GPS coordinates
 525:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 526:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 527:notoriOS.c    ****         modem_power_down();
 1467              		.loc 1 527 0
 1468 0032 FFF7FEFF 		bl	modem_power_down
 528:notoriOS.c    ****         return 0u;
 1469              		.loc 1 528 0
 1470 0036 0023     		movs	r3, #0
 1471 0038 00E0     		b	.L56
 1472              	.L54:
 1473              	.LBE8:
 529:notoriOS.c    ****         
 530:notoriOS.c    ****     }
 531:notoriOS.c    ****     
 532:notoriOS.c    ****     return 1u;
 1474              		.loc 1 532 0
 1475 003a 0123     		movs	r3, #1
 1476              	.L56:
 533:notoriOS.c    **** }
 1477              		.loc 1 533 0
 1478 003c 1846     		mov	r0, r3
 1479 003e 0837     		adds	r7, r7, #8
 1480              		.cfi_def_cfa_offset 8
 1481 0040 BD46     		mov	sp, r7
 1482              		.cfi_def_cfa_register 13
 1483              		@ sp needed
 1484 0042 80BD     		pop	{r7, pc}
 1485              		.cfi_endproc
 1486              	.LFE75:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 38


 1487              		.size	configureRemoteParams, .-configureRemoteParams
 1488              		.section	.rodata
 1489 0253 00       		.align	2
 1490              	.LC35:
 1491 0254 256C6400 		.ascii	"%ld\000"
 1492              		.align	2
 1493              	.LC36:
 1494 0258 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1494      6F746978 
 1494      5F646570 
 1494      74683D25 
 1494      7300
 1495 026a 0000     		.align	2
 1496              	.LC37:
 1497 026c 6D617862 		.ascii	"maxbotix_depth\000"
 1497      6F746978 
 1497      5F646570 
 1497      746800
 1498 027b 00       		.align	2
 1499              	.LC38:
 1500 027c 612B00   		.ascii	"a+\000"
 1501 027f 00       		.align	2
 1502              	.LC39:
 1503 0280 206D6178 		.ascii	" maxbotix_depth: \000"
 1503      626F7469 
 1503      785F6465 
 1503      7074683A 
 1503      2000
 1504 0292 0000     		.align	2
 1505              	.LC40:
 1506 0294 2000     		.ascii	" \000"
 1507 0296 0000     		.align	2
 1508              	.LC41:
 1509 0298 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1509      64206E6F 
 1509      74206765 
 1509      74207661 
 1509      6C696420 
 1510              		.global	__aeabi_f2d
 1511              		.align	2
 1512              	.LC42:
 1513 02c4 252E3266 		.ascii	"%.2f\000"
 1513      00
 1514 02c9 000000   		.align	2
 1515              	.LC43:
 1516 02cc 765F6261 		.ascii	"v_bat=%s\000"
 1516      743D2573 
 1516      00
 1517 02d5 000000   		.align	2
 1518              	.LC44:
 1519 02d8 765F6261 		.ascii	"v_bat\000"
 1519      7400
 1520 02de 0000     		.align	2
 1521              	.LC45:
 1522 02e0 20766261 		.ascii	" vbat: \000"
 1522      743A2000 
 1523              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 39


 1524              	.LC46:
 1525 02e8 70726573 		.ascii	"pressure_current=%s\000"
 1525      73757265 
 1525      5F637572 
 1525      72656E74 
 1525      3D257300 
 1526              		.align	2
 1527              	.LC47:
 1528 02fc 70726573 		.ascii	"pressure_current\000"
 1528      73757265 
 1528      5F637572 
 1528      72656E74 
 1528      00
 1529 030d 000000   		.align	2
 1530              	.LC48:
 1531 0310 20707265 		.ascii	" pressure_current: \000"
 1531      73737572 
 1531      655F6375 
 1531      7272656E 
 1531      743A2000 
 1532              		.align	2
 1533              	.LC49:
 1534 0324 70726573 		.ascii	"pressure_depth=%s\000"
 1534      73757265 
 1534      5F646570 
 1534      74683D25 
 1534      7300
 1535 0336 0000     		.align	2
 1536              	.LC50:
 1537 0338 70726573 		.ascii	"pressure_depth\000"
 1537      73757265 
 1537      5F646570 
 1537      746800
 1538 0347 00       		.align	2
 1539              	.LC51:
 1540 0348 20707265 		.ascii	" pressure_depth: \000"
 1540      73737572 
 1540      655F6465 
 1540      7074683A 
 1540      2000
 1541 035a 0000     		.align	2
 1542              	.LC52:
 1543 035c 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1543      64206E6F 
 1543      74206765 
 1543      74207661 
 1543      6C696420 
 1544              		.section	.text.makeMeasurements,"ax",%progbits
 1545              		.align	2
 1546              		.global	makeMeasurements
 1547              		.thumb
 1548              		.thumb_func
 1549              		.type	makeMeasurements, %function
 1550              	makeMeasurements:
 1551              	.LFB76:
 534:notoriOS.c    **** 
 535:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 40


 536:notoriOS.c    **** // ==============================================
 537:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 538:notoriOS.c    **** // Returns 0 when finished
 539:notoriOS.c    **** // ==============================================
 540:notoriOS.c    **** uint8 makeMeasurements(){
 1552              		.loc 1 540 0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 120
 1555              		@ frame_needed = 1, uses_anonymous_args = 0
 1556 0000 90B5     		push	{r4, r7, lr}
 1557              		.cfi_def_cfa_offset 12
 1558              		.cfi_offset 4, -12
 1559              		.cfi_offset 7, -8
 1560              		.cfi_offset 14, -4
 1561 0002 A1B0     		sub	sp, sp, #132
 1562              		.cfi_def_cfa_offset 144
 1563 0004 02AF     		add	r7, sp, #8
 1564              		.cfi_def_cfa 7, 136
 541:notoriOS.c    ****     
 542:notoriOS.c    ****     // Get clock time and save to timeStamp
 543:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1565              		.loc 1 543 0
 1566 0006 FFF7FEFF 		bl	getTimeStamp
 1567 000a 7867     		str	r0, [r7, #116]
 544:notoriOS.c    ****     char c_timeStamp[32];
 545:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1568              		.loc 1 545 0
 1569 000c 07F15400 		add	r0, r7, #84
 1570 0010 7B6F     		ldr	r3, [r7, #116]
 1571 0012 834A     		ldr	r2, .L65
 1572 0014 2021     		movs	r1, #32
 1573 0016 FFF7FEFF 		bl	snprintf
 546:notoriOS.c    ****     
 547:notoriOS.c    ****     // Holds string for value that will be written 
 548:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 549:notoriOS.c    ****     
 550:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 551:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1574              		.loc 1 551 0
 1575 001a 824B     		ldr	r3, .L65+4
 1576 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1577 001e 002B     		cmp	r3, #0
 1578 0020 3BD1     		bne	.L58
 1579              	.LBB9:
 552:notoriOS.c    ****         
 553:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 554:notoriOS.c    ****         level_sensor_t m_level_sensor;
 555:notoriOS.c    ****         
 556:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 557:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1580              		.loc 1 557 0
 1581 0022 07F11003 		add	r3, r7, #16
 1582 0026 1846     		mov	r0, r3
 1583 0028 FFF7FEFF 		bl	level_sensor_take_reading
 558:notoriOS.c    ****     
 559:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 560:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 41


 1584              		.loc 1 560 0
 1585 002c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1586 0030 002B     		cmp	r3, #0
 1587 0032 2ED0     		beq	.L59
 561:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1588              		.loc 1 561 0
 1589 0034 B7F92630 		ldrsh	r3, [r7, #38]
 1590 0038 07F14000 		add	r0, r7, #64
 1591 003c 7A4A     		ldr	r2, .L65+8
 1592 003e 1421     		movs	r1, #20
 1593 0040 FFF7FEFF 		bl	snprintf
 562:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1594              		.loc 1 562 0
 1595 0044 07F14003 		add	r3, r7, #64
 1596 0048 1A46     		mov	r2, r3
 1597 004a 7849     		ldr	r1, .L65+12
 1598 004c 0020     		movs	r0, #0
 1599 004e FFF7FEFF 		bl	printNotif
 563:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1600              		.loc 1 563 0
 1601 0052 07F14003 		add	r3, r7, #64
 1602 0056 7A6F     		ldr	r2, [r7, #116]
 1603 0058 1946     		mov	r1, r3
 1604 005a 7548     		ldr	r0, .L65+16
 1605 005c FFF7FEFF 		bl	pushData
 564:notoriOS.c    ****             
 565:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 566:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1606              		.loc 1 566 0
 1607 0060 07F15403 		add	r3, r7, #84
 1608 0064 1A46     		mov	r2, r3
 1609 0066 7349     		ldr	r1, .L65+20
 1610 0068 7348     		ldr	r0, .L65+24
 1611 006a FFF7FEFF 		bl	SD_write
 567:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1612              		.loc 1 567 0
 1613 006e 734A     		ldr	r2, .L65+28
 1614 0070 7049     		ldr	r1, .L65+20
 1615 0072 7148     		ldr	r0, .L65+24
 1616 0074 FFF7FEFF 		bl	SD_write
 568:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1617              		.loc 1 568 0
 1618 0078 07F14003 		add	r3, r7, #64
 1619 007c 1A46     		mov	r2, r3
 1620 007e 6D49     		ldr	r1, .L65+20
 1621 0080 6D48     		ldr	r0, .L65+24
 1622 0082 FFF7FEFF 		bl	SD_write
 569:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1623              		.loc 1 569 0
 1624 0086 6E4A     		ldr	r2, .L65+32
 1625 0088 6A49     		ldr	r1, .L65+20
 1626 008a 6B48     		ldr	r0, .L65+24
 1627 008c FFF7FEFF 		bl	SD_write
 1628 0090 03E0     		b	.L58
 1629              	.L59:
 570:notoriOS.c    ****         }else{
 571:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 42


 1630              		.loc 1 571 0
 1631 0092 6C49     		ldr	r1, .L65+36
 1632 0094 0220     		movs	r0, #2
 1633 0096 FFF7FEFF 		bl	printNotif
 1634              	.L58:
 1635              	.LBE9:
 572:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 573:notoriOS.c    ****         }
 574:notoriOS.c    ****     }
 575:notoriOS.c    ****     
 576:notoriOS.c    ****     
 577:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 578:notoriOS.c    ****     voltage_t m_voltage;
 579:notoriOS.c    ****     
 580:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 581:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1636              		.loc 1 581 0
 1637 009a 07F12C03 		add	r3, r7, #44
 1638 009e 1846     		mov	r0, r3
 1639 00a0 FFF7FEFF 		bl	voltage_take_readings
 582:notoriOS.c    ****     
 583:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 584:notoriOS.c    ****     if(m_voltage.valid){
 1640              		.loc 1 584 0
 1641 00a4 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1642 00a8 002B     		cmp	r3, #0
 1643 00aa 00F0AF80 		beq	.L61
 585:notoriOS.c    ****         // battery voltage data
 586:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1644              		.loc 1 586 0
 1645 00ae FB6A     		ldr	r3, [r7, #44]	@ float
 1646 00b0 1846     		mov	r0, r3
 1647 00b2 FFF7FEFF 		bl	__aeabi_f2d
 1648 00b6 0346     		mov	r3, r0
 1649 00b8 0C46     		mov	r4, r1
 1650 00ba 07F14000 		add	r0, r7, #64
 1651 00be CDE90034 		strd	r3, [sp]
 1652 00c2 614A     		ldr	r2, .L65+40
 1653 00c4 1421     		movs	r1, #20
 1654 00c6 FFF7FEFF 		bl	snprintf
 587:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1655              		.loc 1 587 0
 1656 00ca 07F14003 		add	r3, r7, #64
 1657 00ce 1A46     		mov	r2, r3
 1658 00d0 5E49     		ldr	r1, .L65+44
 1659 00d2 0020     		movs	r0, #0
 1660 00d4 FFF7FEFF 		bl	printNotif
 588:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1661              		.loc 1 588 0
 1662 00d8 07F14003 		add	r3, r7, #64
 1663 00dc 7A6F     		ldr	r2, [r7, #116]
 1664 00de 1946     		mov	r1, r3
 1665 00e0 5B48     		ldr	r0, .L65+48
 1666 00e2 FFF7FEFF 		bl	pushData
 589:notoriOS.c    ****         
 590:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 591:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 43


 1667              		.loc 1 591 0
 1668 00e6 564A     		ldr	r2, .L65+32
 1669 00e8 5249     		ldr	r1, .L65+20
 1670 00ea 5348     		ldr	r0, .L65+24
 1671 00ec FFF7FEFF 		bl	SD_write
 592:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1672              		.loc 1 592 0
 1673 00f0 07F15403 		add	r3, r7, #84
 1674 00f4 1A46     		mov	r2, r3
 1675 00f6 4F49     		ldr	r1, .L65+20
 1676 00f8 4F48     		ldr	r0, .L65+24
 1677 00fa FFF7FEFF 		bl	SD_write
 593:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1678              		.loc 1 593 0
 1679 00fe 554A     		ldr	r2, .L65+52
 1680 0100 4C49     		ldr	r1, .L65+20
 1681 0102 4D48     		ldr	r0, .L65+24
 1682 0104 FFF7FEFF 		bl	SD_write
 594:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1683              		.loc 1 594 0
 1684 0108 07F14003 		add	r3, r7, #64
 1685 010c 1A46     		mov	r2, r3
 1686 010e 4949     		ldr	r1, .L65+20
 1687 0110 4948     		ldr	r0, .L65+24
 1688 0112 FFF7FEFF 		bl	SD_write
 595:notoriOS.c    ****         
 596:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 597:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1689              		.loc 1 597 0
 1690 0116 434B     		ldr	r3, .L65+4
 1691 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1692 011a 012B     		cmp	r3, #1
 1693 011c 7AD1     		bne	.L63
 1694              	.LBB10:
 598:notoriOS.c    ****             
 599:notoriOS.c    ****             // pressure transducer voltage (V) data
 600:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 601:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 602:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 603:notoriOS.c    ****             
 604:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 605:notoriOS.c    ****             pressure_t m_pressure;
 606:notoriOS.c    ****             
 607:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 608:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1695              		.loc 1 608 0
 1696 011e 3C46     		mov	r4, r7
 1697 0120 6A46     		mov	r2, sp
 1698 0122 07F13803 		add	r3, r7, #56
 1699 0126 93E80300 		ldmia	r3, {r0, r1}
 1700 012a 82E80300 		stmia	r2, {r0, r1}
 1701 012e 07F12C03 		add	r3, r7, #44
 1702 0132 0ECB     		ldmia	r3, {r1, r2, r3}
 1703 0134 2046     		mov	r0, r4
 1704 0136 FFF7FEFF 		bl	pressure_calculations
 609:notoriOS.c    ****             
 610:notoriOS.c    ****             // pressure transducer current (mA) data
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 44


 611:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1705              		.loc 1 611 0
 1706 013a BB68     		ldr	r3, [r7, #8]	@ float
 1707 013c 1846     		mov	r0, r3
 1708 013e FFF7FEFF 		bl	__aeabi_f2d
 1709 0142 0346     		mov	r3, r0
 1710 0144 0C46     		mov	r4, r1
 1711 0146 07F14000 		add	r0, r7, #64
 1712 014a CDE90034 		strd	r3, [sp]
 1713 014e 3E4A     		ldr	r2, .L65+40
 1714 0150 1421     		movs	r1, #20
 1715 0152 FFF7FEFF 		bl	snprintf
 612:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1716              		.loc 1 612 0
 1717 0156 07F14003 		add	r3, r7, #64
 1718 015a 1A46     		mov	r2, r3
 1719 015c 3E49     		ldr	r1, .L65+56
 1720 015e 0020     		movs	r0, #0
 1721 0160 FFF7FEFF 		bl	printNotif
 613:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1722              		.loc 1 613 0
 1723 0164 07F14003 		add	r3, r7, #64
 1724 0168 7A6F     		ldr	r2, [r7, #116]
 1725 016a 1946     		mov	r1, r3
 1726 016c 3B48     		ldr	r0, .L65+60
 1727 016e FFF7FEFF 		bl	pushData
 614:notoriOS.c    ****             
 615:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 616:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1728              		.loc 1 616 0
 1729 0172 334A     		ldr	r2, .L65+32
 1730 0174 2F49     		ldr	r1, .L65+20
 1731 0176 3048     		ldr	r0, .L65+24
 1732 0178 FFF7FEFF 		bl	SD_write
 617:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1733              		.loc 1 617 0
 1734 017c 07F15403 		add	r3, r7, #84
 1735 0180 1A46     		mov	r2, r3
 1736 0182 2C49     		ldr	r1, .L65+20
 1737 0184 2C48     		ldr	r0, .L65+24
 1738 0186 FFF7FEFF 		bl	SD_write
 618:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1739              		.loc 1 618 0
 1740 018a 354A     		ldr	r2, .L65+64
 1741 018c 2949     		ldr	r1, .L65+20
 1742 018e 2A48     		ldr	r0, .L65+24
 1743 0190 FFF7FEFF 		bl	SD_write
 619:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1744              		.loc 1 619 0
 1745 0194 07F14003 		add	r3, r7, #64
 1746 0198 1A46     		mov	r2, r3
 1747 019a 2649     		ldr	r1, .L65+20
 1748 019c 2648     		ldr	r0, .L65+24
 1749 019e FFF7FEFF 		bl	SD_write
 620:notoriOS.c    ****             
 621:notoriOS.c    ****             // pressure transducer depth (ft) data
 622:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 45


 1750              		.loc 1 622 0
 1751 01a2 FB68     		ldr	r3, [r7, #12]	@ float
 1752 01a4 1846     		mov	r0, r3
 1753 01a6 FFF7FEFF 		bl	__aeabi_f2d
 1754 01aa 0346     		mov	r3, r0
 1755 01ac 0C46     		mov	r4, r1
 1756 01ae 07F14000 		add	r0, r7, #64
 1757 01b2 CDE90034 		strd	r3, [sp]
 1758 01b6 244A     		ldr	r2, .L65+40
 1759 01b8 1421     		movs	r1, #20
 1760 01ba FFF7FEFF 		bl	snprintf
 623:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1761              		.loc 1 623 0
 1762 01be 07F14003 		add	r3, r7, #64
 1763 01c2 1A46     		mov	r2, r3
 1764 01c4 2749     		ldr	r1, .L65+68
 1765 01c6 0020     		movs	r0, #0
 1766 01c8 FFF7FEFF 		bl	printNotif
 624:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1767              		.loc 1 624 0
 1768 01cc 07F14003 		add	r3, r7, #64
 1769 01d0 7A6F     		ldr	r2, [r7, #116]
 1770 01d2 1946     		mov	r1, r3
 1771 01d4 2448     		ldr	r0, .L65+72
 1772 01d6 FFF7FEFF 		bl	pushData
 625:notoriOS.c    ****             
 626:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 627:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1773              		.loc 1 627 0
 1774 01da 194A     		ldr	r2, .L65+32
 1775 01dc 1549     		ldr	r1, .L65+20
 1776 01de 1648     		ldr	r0, .L65+24
 1777 01e0 FFF7FEFF 		bl	SD_write
 628:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1778              		.loc 1 628 0
 1779 01e4 07F15403 		add	r3, r7, #84
 1780 01e8 1A46     		mov	r2, r3
 1781 01ea 1249     		ldr	r1, .L65+20
 1782 01ec 1248     		ldr	r0, .L65+24
 1783 01ee FFF7FEFF 		bl	SD_write
 629:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1784              		.loc 1 629 0
 1785 01f2 1E4A     		ldr	r2, .L65+76
 1786 01f4 0F49     		ldr	r1, .L65+20
 1787 01f6 1048     		ldr	r0, .L65+24
 1788 01f8 FFF7FEFF 		bl	SD_write
 630:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1789              		.loc 1 630 0
 1790 01fc 07F14003 		add	r3, r7, #64
 1791 0200 1A46     		mov	r2, r3
 1792 0202 0C49     		ldr	r1, .L65+20
 1793 0204 0C48     		ldr	r0, .L65+24
 1794 0206 FFF7FEFF 		bl	SD_write
 1795 020a 03E0     		b	.L63
 1796              	.L61:
 1797              	.LBE10:
 631:notoriOS.c    ****         }    
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 46


 632:notoriOS.c    ****     }else{
 633:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1798              		.loc 1 633 0
 1799 020c 1849     		ldr	r1, .L65+80
 1800 020e 0220     		movs	r0, #2
 1801 0210 FFF7FEFF 		bl	printNotif
 1802              	.L63:
 634:notoriOS.c    ****     }
 635:notoriOS.c    ****     
 636:notoriOS.c    ****     return 0u;
 1803              		.loc 1 636 0
 1804 0214 0023     		movs	r3, #0
 637:notoriOS.c    **** }
 1805              		.loc 1 637 0
 1806 0216 1846     		mov	r0, r3
 1807 0218 7C37     		adds	r7, r7, #124
 1808              		.cfi_def_cfa_offset 12
 1809 021a BD46     		mov	sp, r7
 1810              		.cfi_def_cfa_register 13
 1811              		@ sp needed
 1812 021c 90BD     		pop	{r4, r7, pc}
 1813              	.L66:
 1814 021e 00BF     		.align	2
 1815              	.L65:
 1816 0220 54020000 		.word	.LC35
 1817 0224 00000000 		.word	updatable_parameters
 1818 0228 A8000000 		.word	.LC6
 1819 022c 58020000 		.word	.LC36
 1820 0230 6C020000 		.word	.LC37
 1821 0234 7C020000 		.word	.LC38
 1822 0238 00000000 		.word	Data_fileName
 1823 023c 80020000 		.word	.LC39
 1824 0240 94020000 		.word	.LC40
 1825 0244 98020000 		.word	.LC41
 1826 0248 C4020000 		.word	.LC42
 1827 024c CC020000 		.word	.LC43
 1828 0250 D8020000 		.word	.LC44
 1829 0254 E0020000 		.word	.LC45
 1830 0258 E8020000 		.word	.LC46
 1831 025c FC020000 		.word	.LC47
 1832 0260 10030000 		.word	.LC48
 1833 0264 24030000 		.word	.LC49
 1834 0268 38030000 		.word	.LC50
 1835 026c 48030000 		.word	.LC51
 1836 0270 5C030000 		.word	.LC52
 1837              		.cfi_endproc
 1838              	.LFE76:
 1839              		.size	makeMeasurements, .-makeMeasurements
 1840              		.section	.rodata
 1841 0383 00       		.align	2
 1842              	.LC53:
 1843 0384 4572726F 		.ascii	"Error setting system time.\000"
 1843      72207365 
 1843      7474696E 
 1843      67207379 
 1843      7374656D 
 1844              		.section	.text.setTime,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 47


 1845              		.align	2
 1846              		.global	setTime
 1847              		.thumb
 1848              		.thumb_func
 1849              		.type	setTime, %function
 1850              	setTime:
 1851              	.LFB77:
 638:notoriOS.c    **** 
 639:notoriOS.c    **** // ==============================================
 640:notoriOS.c    **** // Set the system time
 641:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 642:notoriOS.c    **** // ==============================================
 643:notoriOS.c    **** uint8 setTime(long timeStamp){
 1852              		.loc 1 643 0
 1853              		.cfi_startproc
 1854              		@ args = 0, pretend = 0, frame = 24
 1855              		@ frame_needed = 1, uses_anonymous_args = 0
 1856 0000 80B5     		push	{r7, lr}
 1857              		.cfi_def_cfa_offset 8
 1858              		.cfi_offset 7, -8
 1859              		.cfi_offset 14, -4
 1860 0002 86B0     		sub	sp, sp, #24
 1861              		.cfi_def_cfa_offset 32
 1862 0004 00AF     		add	r7, sp, #0
 1863              		.cfi_def_cfa_register 7
 1864 0006 7860     		str	r0, [r7, #4]
 644:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 645:notoriOS.c    ****     if(timeStamp <=0){
 1865              		.loc 1 645 0
 1866 0008 7B68     		ldr	r3, [r7, #4]
 1867 000a 002B     		cmp	r3, #0
 1868 000c 05DC     		bgt	.L68
 646:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1869              		.loc 1 646 0
 1870 000e 1849     		ldr	r1, .L70
 1871 0010 0220     		movs	r0, #2
 1872 0012 FFF7FEFF 		bl	printNotif
 647:notoriOS.c    ****         return 0;  
 1873              		.loc 1 647 0
 1874 0016 0023     		movs	r3, #0
 1875 0018 25E0     		b	.L69
 1876              	.L68:
 648:notoriOS.c    ****     }
 649:notoriOS.c    ****     // Create a new pointer t of data structure tm
 650:notoriOS.c    ****     struct tm * t;
 651:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 652:notoriOS.c    ****     t = gmtime(&timeStamp);
 1877              		.loc 1 652 0
 1878 001a 3B1D     		adds	r3, r7, #4
 1879 001c 1846     		mov	r0, r3
 1880 001e FFF7FEFF 		bl	gmtime
 1881 0022 7861     		str	r0, [r7, #20]
 653:notoriOS.c    ****     
 654:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 655:notoriOS.c    ****     RTC_TIME_DATE localTime;
 656:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1882              		.loc 1 656 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 48


 1883 0024 7B69     		ldr	r3, [r7, #20]
 1884 0026 1B68     		ldr	r3, [r3]
 1885 0028 DBB2     		uxtb	r3, r3
 1886 002a 3B72     		strb	r3, [r7, #8]
 657:notoriOS.c    ****     localTime.Min = t->tm_min;
 1887              		.loc 1 657 0
 1888 002c 7B69     		ldr	r3, [r7, #20]
 1889 002e 5B68     		ldr	r3, [r3, #4]
 1890 0030 DBB2     		uxtb	r3, r3
 1891 0032 7B72     		strb	r3, [r7, #9]
 658:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1892              		.loc 1 658 0
 1893 0034 7B69     		ldr	r3, [r7, #20]
 1894 0036 9B68     		ldr	r3, [r3, #8]
 1895 0038 DBB2     		uxtb	r3, r3
 1896 003a BB72     		strb	r3, [r7, #10]
 659:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1897              		.loc 1 659 0
 1898 003c 7B69     		ldr	r3, [r7, #20]
 1899 003e 5B69     		ldr	r3, [r3, #20]
 1900 0040 9BB2     		uxth	r3, r3
 1901 0042 03F26C73 		addw	r3, r3, #1900
 1902 0046 9BB2     		uxth	r3, r3
 1903 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 660:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1904              		.loc 1 660 0
 1905 004a 7B69     		ldr	r3, [r7, #20]
 1906 004c 1B69     		ldr	r3, [r3, #16]
 1907 004e DBB2     		uxtb	r3, r3
 1908 0050 3B74     		strb	r3, [r7, #16]
 661:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1909              		.loc 1 661 0
 1910 0052 7B69     		ldr	r3, [r7, #20]
 1911 0054 DB68     		ldr	r3, [r3, #12]
 1912 0056 DBB2     		uxtb	r3, r3
 1913 0058 3B73     		strb	r3, [r7, #12]
 662:notoriOS.c    **** 
 663:notoriOS.c    ****     // Writes time and date values as current time and date.
 664:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1914              		.loc 1 664 0
 1915 005a 07F10803 		add	r3, r7, #8
 1916 005e 1846     		mov	r0, r3
 1917 0060 FFF7FEFF 		bl	RTC_WriteTime
 665:notoriOS.c    ****     
 666:notoriOS.c    ****     // Return 1 when the system time was set properly.
 667:notoriOS.c    ****     return 1;
 1918              		.loc 1 667 0
 1919 0064 0123     		movs	r3, #1
 1920              	.L69:
 668:notoriOS.c    **** }
 1921              		.loc 1 668 0
 1922 0066 1846     		mov	r0, r3
 1923 0068 1837     		adds	r7, r7, #24
 1924              		.cfi_def_cfa_offset 8
 1925 006a BD46     		mov	sp, r7
 1926              		.cfi_def_cfa_register 13
 1927              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 49


 1928 006c 80BD     		pop	{r7, pc}
 1929              	.L71:
 1930 006e 00BF     		.align	2
 1931              	.L70:
 1932 0070 84030000 		.word	.LC53
 1933              		.cfi_endproc
 1934              	.LFE77:
 1935              		.size	setTime, .-setTime
 1936              		.section	.rodata
 1937 039f 00       		.align	2
 1938              	.LC54:
 1939 03a0 75706772 		.ascii	"upgrade.hex\000"
 1939      6164652E 
 1939      68657800 
 1940              		.section	.text.upgraded,"ax",%progbits
 1941              		.align	2
 1942              		.global	upgraded
 1943              		.thumb
 1944              		.thumb_func
 1945              		.type	upgraded, %function
 1946              	upgraded:
 1947              	.LFB78:
 669:notoriOS.c    **** 
 670:notoriOS.c    **** //downloads and stores files on SD card
 671:notoriOS.c    **** 
 672:notoriOS.c    **** 
 673:notoriOS.c    **** 
 674:notoriOS.c    **** // ==============================================
 675:notoriOS.c    **** // Will they love it, will they hate it
 676:notoriOS.c    **** // Never fade it, I evade it
 677:notoriOS.c    **** // Cause I never really want to complicate it
 678:notoriOS.c    **** //      - Logic, Upgraded (2015)
 679:notoriOS.c    **** //
 680:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 681:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 682:notoriOS.c    **** // ==============================================
 683:notoriOS.c    **** 
 684:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 1948              		.loc 1 684 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 232
 1951              		@ frame_needed = 1, uses_anonymous_args = 0
 1952 0000 80B5     		push	{r7, lr}
 1953              		.cfi_def_cfa_offset 8
 1954              		.cfi_offset 7, -8
 1955              		.cfi_offset 14, -4
 1956 0002 C0B0     		sub	sp, sp, #256
 1957              		.cfi_def_cfa_offset 264
 1958 0004 06AF     		add	r7, sp, #24
 1959              		.cfi_def_cfa 7, 240
 1960 0006 F860     		str	r0, [r7, #12]
 1961 0008 B960     		str	r1, [r7, #8]
 1962 000a 7A60     		str	r2, [r7, #4]
 685:notoriOS.c    ****     
 686:notoriOS.c    ****     uint8 upgrade_status = 0;
 1963              		.loc 1 686 0
 1964 000c 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 50


 1965 000e 87F8E730 		strb	r3, [r7, #231]
 687:notoriOS.c    ****     
 688:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 689:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 1966              		.loc 1 689 0
 1967 0012 384B     		ldr	r3, .L76
 1968 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1969 0016 042B     		cmp	r3, #4
 1970 0018 02D0     		beq	.L73
 690:notoriOS.c    ****         return upgrade_status;//where valid = 0
 1971              		.loc 1 690 0
 1972 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 1973 001e 65E0     		b	.L75
 1974              	.L73:
 691:notoriOS.c    ****     }
 692:notoriOS.c    ****     
 693:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 1975              		.loc 1 693 0
 1976 0020 354A     		ldr	r2, .L76+4
 1977 0022 07F1D803 		add	r3, r7, #216
 1978 0026 07CA     		ldmia	r2, {r0, r1, r2}
 1979 0028 83E80700 		stmia	r3, {r0, r1, r2}
 694:notoriOS.c    ****     //delete file, if one exisits already
 695:notoriOS.c    ****     SD_rmfile(fileName);
 1980              		.loc 1 695 0
 1981 002c 07F1D803 		add	r3, r7, #216
 1982 0030 1846     		mov	r0, r3
 1983 0032 FFF7FEFF 		bl	SD_rmfile
 696:notoriOS.c    ****     
 697:notoriOS.c    ****     // Create http request
 698:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 1984              		.loc 1 698 0
 1985 0036 314B     		ldr	r3, .L76+8
 1986 0038 0593     		str	r3, [sp, #20]
 1987 003a 0023     		movs	r3, #0
 1988 003c 0493     		str	r3, [sp, #16]
 1989 003e 304B     		ldr	r3, .L76+12
 1990 0040 0393     		str	r3, [sp, #12]
 1991 0042 304B     		ldr	r3, .L76+16
 1992 0044 0293     		str	r3, [sp, #8]
 1993 0046 304B     		ldr	r3, .L76+20
 1994 0048 0193     		str	r3, [sp, #4]
 1995 004a BB68     		ldr	r3, [r7, #8]
 1996 004c 0093     		str	r3, [sp]
 1997 004e 7B68     		ldr	r3, [r7, #4]
 1998 0050 FA68     		ldr	r2, [r7, #12]
 1999 0052 2E49     		ldr	r1, .L76+24
 2000 0054 2E48     		ldr	r0, .L76+28
 2001 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 699:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2002              		.loc 1 699 0
 2003 005a 2D4A     		ldr	r2, .L76+28
 2004 005c 2D49     		ldr	r1, .L76+32
 2005 005e 0020     		movs	r0, #0
 2006 0060 FFF7FEFF 		bl	printNotif
 700:notoriOS.c    ****     // Create array portConfig of size 200 characters
 701:notoriOS.c    ****     char portConfig[200];
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 51


 702:notoriOS.c    ****     // Print port configurations
 703:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2007              		.loc 1 703 0
 2008 0064 07F11000 		add	r0, r7, #16
 2009 0068 FB68     		ldr	r3, [r7, #12]
 2010 006a 0093     		str	r3, [sp]
 2011 006c BB68     		ldr	r3, [r7, #8]
 2012 006e 2A4A     		ldr	r2, .L76+36
 2013 0070 C821     		movs	r1, #200
 2014 0072 FFF7FEFF 		bl	snprintf
 704:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2015              		.loc 1 704 0
 2016 0076 07F11003 		add	r3, r7, #16
 2017 007a 1A46     		mov	r2, r3
 2018 007c 2749     		ldr	r1, .L76+40
 2019 007e 0020     		movs	r0, #0
 2020 0080 FFF7FEFF 		bl	printNotif
 705:notoriOS.c    ****     // AT command to configure the port
 706:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2021              		.loc 1 706 0
 2022 0084 07F11003 		add	r3, r7, #16
 2023 0088 42F21072 		movw	r2, #10000
 2024 008c 2449     		ldr	r1, .L76+44
 2025 008e 1846     		mov	r0, r3
 2026 0090 FFF7FEFF 		bl	at_write_command
 2027 0094 0346     		mov	r3, r0
 2028 0096 87F8E730 		strb	r3, [r7, #231]
 707:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 708:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 709:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2029              		.loc 1 709 0
 2030 009a 4FF47A72 		mov	r2, #1000
 2031 009e 2149     		ldr	r1, .L76+48
 2032 00a0 2148     		ldr	r0, .L76+52
 2033 00a2 FFF7FEFF 		bl	at_write_command
 2034 00a6 0346     		mov	r3, r0
 2035 00a8 87F8E730 		strb	r3, [r7, #231]
 710:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 711:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2036              		.loc 1 711 0
 2037 00ac 1848     		ldr	r0, .L76+28
 2038 00ae FFF7FEFF 		bl	strlen
 2039 00b2 0346     		mov	r3, r0
 2040 00b4 1A46     		mov	r2, r3
 2041 00b6 164B     		ldr	r3, .L76+28
 2042 00b8 1344     		add	r3, r3, r2
 2043 00ba 1C49     		ldr	r1, .L76+56
 2044 00bc 1A46     		mov	r2, r3
 2045 00be 0B46     		mov	r3, r1
 2046 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2047 00c2 1380     		strh	r3, [r2]	@ unaligned
 712:notoriOS.c    ****     // AT command to send http request
 713:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2048              		.loc 1 713 0
 2049 00c4 41F28832 		movw	r2, #5000
 2050 00c8 1549     		ldr	r1, .L76+44
 2051 00ca 1148     		ldr	r0, .L76+28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 52


 2052 00cc FFF7FEFF 		bl	at_write_command
 2053 00d0 0346     		mov	r3, r0
 2054 00d2 87F8E730 		strb	r3, [r7, #231]
 714:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 715:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 716:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2055              		.loc 1 716 0
 2056 00d6 41F28832 		movw	r2, #5000
 2057 00da 1549     		ldr	r1, .L76+60
 2058 00dc 1548     		ldr	r0, .L76+64
 2059 00de FFF7FEFF 		bl	at_write_command
 2060 00e2 0346     		mov	r3, r0
 2061 00e4 87F8E730 		strb	r3, [r7, #231]
 717:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 718:notoriOS.c    ****     
 719:notoriOS.c    ****     
 720:notoriOS.c    ****     return upgrade_status;
 2062              		.loc 1 720 0
 2063 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2064              	.L75:
 721:notoriOS.c    ****     
 722:notoriOS.c    **** }
 2065              		.loc 1 722 0 discriminator 1
 2066 00ec 1846     		mov	r0, r3
 2067 00ee E837     		adds	r7, r7, #232
 2068              		.cfi_def_cfa_offset 8
 2069 00f0 BD46     		mov	sp, r7
 2070              		.cfi_def_cfa_register 13
 2071              		@ sp needed
 2072 00f2 80BD     		pop	{r7, pc}
 2073              	.L77:
 2074              		.align	2
 2075              	.L76:
 2076 00f4 00000000 		.word	modem_state
 2077 00f8 A0030000 		.word	.LC54
 2078 00fc 4C010000 		.word	.LC16
 2079 0100 50010000 		.word	.LC17
 2080 0104 54010000 		.word	.LC18
 2081 0108 5C010000 		.word	.LC19
 2082 010c 00000000 		.word	http_body
 2083 0110 00000000 		.word	http_request
 2084 0114 64010000 		.word	.LC20
 2085 0118 7C010000 		.word	.LC21
 2086 011c 98010000 		.word	.LC22
 2087 0120 9C010000 		.word	.LC23
 2088 0124 CC010000 		.word	.LC26
 2089 0128 D0010000 		.word	.LC27
 2090 012c E0010000 		.word	.LC28
 2091 0130 FC010000 		.word	.LC31
 2092 0134 04020000 		.word	.LC32
 2093              		.cfi_endproc
 2094              	.LFE78:
 2095              		.size	upgraded, .-upgraded
 2096              		.text
 2097              	.Letext0:
 2098              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2099              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 53


 2100              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2101              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2102              		.file 6 "testing.h"
 2103              		.file 7 "level_sensor.h"
 2104              		.file 8 "voltages.h"
 2105              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2106              		.file 10 "data.h"
 2107              		.file 11 "modem.h"
 2108              		.file 12 "notoriOS.h"
 2109              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2110              		.file 14 "App_LED.h"
 2111              		.section	.debug_info,"",%progbits
 2112              	.Ldebug_info0:
 2113 0000 420C0000 		.4byte	0xc42
 2114 0004 0400     		.2byte	0x4
 2115 0006 00000000 		.4byte	.Ldebug_abbrev0
 2116 000a 04       		.byte	0x4
 2117 000b 01       		.uleb128 0x1
 2118 000c AC000000 		.4byte	.LASF163
 2119 0010 0C       		.byte	0xc
 2120 0011 E6070000 		.4byte	.LASF164
 2121 0015 2C000000 		.4byte	.LASF165
 2122 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2123 001d 00000000 		.4byte	0
 2124 0021 00000000 		.4byte	.Ldebug_line0
 2125 0025 02       		.uleb128 0x2
 2126 0026 01       		.byte	0x1
 2127 0027 06       		.byte	0x6
 2128 0028 7D000000 		.4byte	.LASF0
 2129 002c 02       		.uleb128 0x2
 2130 002d 01       		.byte	0x1
 2131 002e 08       		.byte	0x8
 2132 002f 03060000 		.4byte	.LASF1
 2133 0033 02       		.uleb128 0x2
 2134 0034 02       		.byte	0x2
 2135 0035 05       		.byte	0x5
 2136 0036 64040000 		.4byte	.LASF2
 2137 003a 02       		.uleb128 0x2
 2138 003b 02       		.byte	0x2
 2139 003c 07       		.byte	0x7
 2140 003d 7E070000 		.4byte	.LASF3
 2141 0041 03       		.uleb128 0x3
 2142 0042 46070000 		.4byte	.LASF9
 2143 0046 02       		.byte	0x2
 2144 0047 3F       		.byte	0x3f
 2145 0048 4C000000 		.4byte	0x4c
 2146 004c 02       		.uleb128 0x2
 2147 004d 04       		.byte	0x4
 2148 004e 05       		.byte	0x5
 2149 004f 41020000 		.4byte	.LASF4
 2150 0053 02       		.uleb128 0x2
 2151 0054 04       		.byte	0x4
 2152 0055 07       		.byte	0x7
 2153 0056 A1030000 		.4byte	.LASF5
 2154 005a 02       		.uleb128 0x2
 2155 005b 08       		.byte	0x8
 2156 005c 05       		.byte	0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 54


 2157 005d 9C010000 		.4byte	.LASF6
 2158 0061 02       		.uleb128 0x2
 2159 0062 08       		.byte	0x8
 2160 0063 07       		.byte	0x7
 2161 0064 4B010000 		.4byte	.LASF7
 2162 0068 04       		.uleb128 0x4
 2163 0069 04       		.byte	0x4
 2164 006a 05       		.byte	0x5
 2165 006b 696E7400 		.ascii	"int\000"
 2166 006f 02       		.uleb128 0x2
 2167 0070 04       		.byte	0x4
 2168 0071 07       		.byte	0x7
 2169 0072 4D030000 		.4byte	.LASF8
 2170 0076 03       		.uleb128 0x3
 2171 0077 FB050000 		.4byte	.LASF10
 2172 007b 03       		.byte	0x3
 2173 007c 2C       		.byte	0x2c
 2174 007d 41000000 		.4byte	0x41
 2175 0081 05       		.uleb128 0x5
 2176 0082 78020000 		.4byte	.LASF11
 2177 0086 04       		.byte	0x4
 2178 0087 9201     		.2byte	0x192
 2179 0089 2C000000 		.4byte	0x2c
 2180 008d 05       		.uleb128 0x5
 2181 008e 08000000 		.4byte	.LASF12
 2182 0092 04       		.byte	0x4
 2183 0093 9301     		.2byte	0x193
 2184 0095 3A000000 		.4byte	0x3a
 2185 0099 05       		.uleb128 0x5
 2186 009a C9020000 		.4byte	.LASF13
 2187 009e 04       		.byte	0x4
 2188 009f 9401     		.2byte	0x194
 2189 00a1 53000000 		.4byte	0x53
 2190 00a5 05       		.uleb128 0x5
 2191 00a6 27040000 		.4byte	.LASF14
 2192 00aa 04       		.byte	0x4
 2193 00ab 9501     		.2byte	0x195
 2194 00ad 25000000 		.4byte	0x25
 2195 00b1 05       		.uleb128 0x5
 2196 00b2 FB070000 		.4byte	.LASF15
 2197 00b6 04       		.byte	0x4
 2198 00b7 9601     		.2byte	0x196
 2199 00b9 33000000 		.4byte	0x33
 2200 00bd 05       		.uleb128 0x5
 2201 00be A3020000 		.4byte	.LASF16
 2202 00c2 04       		.byte	0x4
 2203 00c3 9701     		.2byte	0x197
 2204 00c5 4C000000 		.4byte	0x4c
 2205 00c9 02       		.uleb128 0x2
 2206 00ca 04       		.byte	0x4
 2207 00cb 04       		.byte	0x4
 2208 00cc 99050000 		.4byte	.LASF17
 2209 00d0 02       		.uleb128 0x2
 2210 00d1 08       		.byte	0x8
 2211 00d2 04       		.byte	0x4
 2212 00d3 79080000 		.4byte	.LASF18
 2213 00d7 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 55


 2214 00d8 01       		.byte	0x1
 2215 00d9 08       		.byte	0x8
 2216 00da 1F070000 		.4byte	.LASF19
 2217 00de 02       		.uleb128 0x2
 2218 00df 08       		.byte	0x8
 2219 00e0 04       		.byte	0x4
 2220 00e1 01070000 		.4byte	.LASF20
 2221 00e5 02       		.uleb128 0x2
 2222 00e6 04       		.byte	0x4
 2223 00e7 07       		.byte	0x7
 2224 00e8 F3040000 		.4byte	.LASF21
 2225 00ec 06       		.uleb128 0x6
 2226 00ed 04       		.byte	0x4
 2227 00ee D7000000 		.4byte	0xd7
 2228 00f2 07       		.uleb128 0x7
 2229 00f3 D7000000 		.4byte	0xd7
 2230 00f7 02010000 		.4byte	0x102
 2231 00fb 08       		.uleb128 0x8
 2232 00fc E5000000 		.4byte	0xe5
 2233 0100 17       		.byte	0x17
 2234 0101 00       		.byte	0
 2235 0102 09       		.uleb128 0x9
 2236 0103 0C       		.byte	0xc
 2237 0104 05       		.byte	0x5
 2238 0105 30       		.byte	0x30
 2239 0106 6B010000 		.4byte	0x16b
 2240 010a 0A       		.uleb128 0xa
 2241 010b 53656300 		.ascii	"Sec\000"
 2242 010f 05       		.byte	0x5
 2243 0110 32       		.byte	0x32
 2244 0111 81000000 		.4byte	0x81
 2245 0115 00       		.byte	0
 2246 0116 0A       		.uleb128 0xa
 2247 0117 4D696E00 		.ascii	"Min\000"
 2248 011b 05       		.byte	0x5
 2249 011c 33       		.byte	0x33
 2250 011d 81000000 		.4byte	0x81
 2251 0121 01       		.byte	0x1
 2252 0122 0B       		.uleb128 0xb
 2253 0123 62010000 		.4byte	.LASF22
 2254 0127 05       		.byte	0x5
 2255 0128 34       		.byte	0x34
 2256 0129 81000000 		.4byte	0x81
 2257 012d 02       		.byte	0x2
 2258 012e 0B       		.uleb128 0xb
 2259 012f 60060000 		.4byte	.LASF23
 2260 0133 05       		.byte	0x5
 2261 0134 35       		.byte	0x35
 2262 0135 81000000 		.4byte	0x81
 2263 0139 03       		.byte	0x3
 2264 013a 0B       		.uleb128 0xb
 2265 013b E2030000 		.4byte	.LASF24
 2266 013f 05       		.byte	0x5
 2267 0140 36       		.byte	0x36
 2268 0141 81000000 		.4byte	0x81
 2269 0145 04       		.byte	0x4
 2270 0146 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 56


 2271 0147 2E080000 		.4byte	.LASF25
 2272 014b 05       		.byte	0x5
 2273 014c 37       		.byte	0x37
 2274 014d 8D000000 		.4byte	0x8d
 2275 0151 06       		.byte	0x6
 2276 0152 0B       		.uleb128 0xb
 2277 0153 45010000 		.4byte	.LASF26
 2278 0157 05       		.byte	0x5
 2279 0158 38       		.byte	0x38
 2280 0159 81000000 		.4byte	0x81
 2281 015d 08       		.byte	0x8
 2282 015e 0B       		.uleb128 0xb
 2283 015f F0050000 		.4byte	.LASF27
 2284 0163 05       		.byte	0x5
 2285 0164 39       		.byte	0x39
 2286 0165 8D000000 		.4byte	0x8d
 2287 0169 0A       		.byte	0xa
 2288 016a 00       		.byte	0
 2289 016b 03       		.uleb128 0x3
 2290 016c 3E050000 		.4byte	.LASF28
 2291 0170 05       		.byte	0x5
 2292 0171 3A       		.byte	0x3a
 2293 0172 76010000 		.4byte	0x176
 2294 0176 0C       		.uleb128 0xc
 2295 0177 02010000 		.4byte	0x102
 2296 017b 0D       		.uleb128 0xd
 2297 017c 8101     		.2byte	0x181
 2298 017e 06       		.byte	0x6
 2299 017f 0A       		.byte	0xa
 2300 0180 A9010000 		.4byte	0x1a9
 2301 0184 0B       		.uleb128 0xb
 2302 0185 E6050000 		.4byte	.LASF29
 2303 0189 06       		.byte	0x6
 2304 018a 0C       		.byte	0xc
 2305 018b A9010000 		.4byte	0x1a9
 2306 018f 00       		.byte	0
 2307 0190 0B       		.uleb128 0xb
 2308 0191 BB070000 		.4byte	.LASF30
 2309 0195 06       		.byte	0x6
 2310 0196 0D       		.byte	0xd
 2311 0197 81000000 		.4byte	0x81
 2312 019b 80       		.byte	0x80
 2313 019c 0B       		.uleb128 0xb
 2314 019d 82060000 		.4byte	.LASF31
 2315 01a1 06       		.byte	0x6
 2316 01a2 0F       		.byte	0xf
 2317 01a3 B9010000 		.4byte	0x1b9
 2318 01a7 81       		.byte	0x81
 2319 01a8 00       		.byte	0
 2320 01a9 07       		.uleb128 0x7
 2321 01aa D7000000 		.4byte	0xd7
 2322 01ae B9010000 		.4byte	0x1b9
 2323 01b2 08       		.uleb128 0x8
 2324 01b3 E5000000 		.4byte	0xe5
 2325 01b7 7F       		.byte	0x7f
 2326 01b8 00       		.byte	0
 2327 01b9 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 57


 2328 01ba D7000000 		.4byte	0xd7
 2329 01be C9010000 		.4byte	0x1c9
 2330 01c2 08       		.uleb128 0x8
 2331 01c3 E5000000 		.4byte	0xe5
 2332 01c7 FF       		.byte	0xff
 2333 01c8 00       		.byte	0
 2334 01c9 03       		.uleb128 0x3
 2335 01ca 6A060000 		.4byte	.LASF32
 2336 01ce 06       		.byte	0x6
 2337 01cf 10       		.byte	0x10
 2338 01d0 7B010000 		.4byte	0x17b
 2339 01d4 09       		.uleb128 0x9
 2340 01d5 1A       		.byte	0x1a
 2341 01d6 07       		.byte	0x7
 2342 01d7 10       		.byte	0x10
 2343 01d8 0D020000 		.4byte	0x20d
 2344 01dc 0B       		.uleb128 0xb
 2345 01dd D9020000 		.4byte	.LASF33
 2346 01e1 07       		.byte	0x7
 2347 01e2 11       		.byte	0x11
 2348 01e3 0D020000 		.4byte	0x20d
 2349 01e7 00       		.byte	0
 2350 01e8 0B       		.uleb128 0xb
 2351 01e9 68070000 		.4byte	.LASF34
 2352 01ed 07       		.byte	0x7
 2353 01ee 12       		.byte	0x12
 2354 01ef B1000000 		.4byte	0xb1
 2355 01f3 16       		.byte	0x16
 2356 01f4 0B       		.uleb128 0xb
 2357 01f5 79030000 		.4byte	.LASF35
 2358 01f9 07       		.byte	0x7
 2359 01fa 13       		.byte	0x13
 2360 01fb 81000000 		.4byte	0x81
 2361 01ff 18       		.byte	0x18
 2362 0200 0B       		.uleb128 0xb
 2363 0201 17000000 		.4byte	.LASF36
 2364 0205 07       		.byte	0x7
 2365 0206 14       		.byte	0x14
 2366 0207 81000000 		.4byte	0x81
 2367 020b 19       		.byte	0x19
 2368 020c 00       		.byte	0
 2369 020d 07       		.uleb128 0x7
 2370 020e B1000000 		.4byte	0xb1
 2371 0212 1D020000 		.4byte	0x21d
 2372 0216 08       		.uleb128 0x8
 2373 0217 E5000000 		.4byte	0xe5
 2374 021b 0A       		.byte	0xa
 2375 021c 00       		.byte	0
 2376 021d 03       		.uleb128 0x3
 2377 021e 9F050000 		.4byte	.LASF37
 2378 0222 07       		.byte	0x7
 2379 0223 15       		.byte	0x15
 2380 0224 D4010000 		.4byte	0x1d4
 2381 0228 09       		.uleb128 0x9
 2382 0229 14       		.byte	0x14
 2383 022a 08       		.byte	0x8
 2384 022b 11       		.byte	0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 58


 2385 022c 6D020000 		.4byte	0x26d
 2386 0230 0B       		.uleb128 0xb
 2387 0231 D2030000 		.4byte	.LASF38
 2388 0235 08       		.byte	0x8
 2389 0236 12       		.byte	0x12
 2390 0237 C9000000 		.4byte	0xc9
 2391 023b 00       		.byte	0
 2392 023c 0B       		.uleb128 0xb
 2393 023d E8010000 		.4byte	.LASF39
 2394 0241 08       		.byte	0x8
 2395 0242 13       		.byte	0x13
 2396 0243 C9000000 		.4byte	0xc9
 2397 0247 04       		.byte	0x4
 2398 0248 0B       		.uleb128 0xb
 2399 0249 F6010000 		.4byte	.LASF40
 2400 024d 08       		.byte	0x8
 2401 024e 14       		.byte	0x14
 2402 024f C9000000 		.4byte	0xc9
 2403 0253 08       		.byte	0x8
 2404 0254 0B       		.uleb128 0xb
 2405 0255 7B050000 		.4byte	.LASF41
 2406 0259 08       		.byte	0x8
 2407 025a 15       		.byte	0x15
 2408 025b C9000000 		.4byte	0xc9
 2409 025f 0C       		.byte	0xc
 2410 0260 0B       		.uleb128 0xb
 2411 0261 F3060000 		.4byte	.LASF42
 2412 0265 08       		.byte	0x8
 2413 0266 16       		.byte	0x16
 2414 0267 81000000 		.4byte	0x81
 2415 026b 10       		.byte	0x10
 2416 026c 00       		.byte	0
 2417 026d 03       		.uleb128 0x3
 2418 026e 80080000 		.4byte	.LASF43
 2419 0272 08       		.byte	0x8
 2420 0273 17       		.byte	0x17
 2421 0274 28020000 		.4byte	0x228
 2422 0278 09       		.uleb128 0x9
 2423 0279 10       		.byte	0x10
 2424 027a 08       		.byte	0x8
 2425 027b 19       		.byte	0x19
 2426 027c B1020000 		.4byte	0x2b1
 2427 0280 0B       		.uleb128 0xb
 2428 0281 39030000 		.4byte	.LASF44
 2429 0285 08       		.byte	0x8
 2430 0286 1A       		.byte	0x1a
 2431 0287 C9000000 		.4byte	0xc9
 2432 028b 00       		.byte	0
 2433 028c 0B       		.uleb128 0xb
 2434 028d 63020000 		.4byte	.LASF45
 2435 0291 08       		.byte	0x8
 2436 0292 1B       		.byte	0x1b
 2437 0293 C9000000 		.4byte	0xc9
 2438 0297 04       		.byte	0x4
 2439 0298 0B       		.uleb128 0xb
 2440 0299 E2060000 		.4byte	.LASF46
 2441 029d 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 59


 2442 029e 1C       		.byte	0x1c
 2443 029f C9000000 		.4byte	0xc9
 2444 02a3 08       		.byte	0x8
 2445 02a4 0B       		.uleb128 0xb
 2446 02a5 4C060000 		.4byte	.LASF47
 2447 02a9 08       		.byte	0x8
 2448 02aa 1D       		.byte	0x1d
 2449 02ab C9000000 		.4byte	0xc9
 2450 02af 0C       		.byte	0xc
 2451 02b0 00       		.byte	0
 2452 02b1 03       		.uleb128 0x3
 2453 02b2 38080000 		.4byte	.LASF48
 2454 02b6 08       		.byte	0x8
 2455 02b7 1E       		.byte	0x1e
 2456 02b8 78020000 		.4byte	0x278
 2457 02bc 0E       		.uleb128 0xe
 2458 02bd 746D00   		.ascii	"tm\000"
 2459 02c0 24       		.byte	0x24
 2460 02c1 09       		.byte	0x9
 2461 02c2 21       		.byte	0x21
 2462 02c3 34030000 		.4byte	0x334
 2463 02c7 0B       		.uleb128 0xb
 2464 02c8 A9070000 		.4byte	.LASF49
 2465 02cc 09       		.byte	0x9
 2466 02cd 23       		.byte	0x23
 2467 02ce 68000000 		.4byte	0x68
 2468 02d2 00       		.byte	0
 2469 02d3 0B       		.uleb128 0xb
 2470 02d4 D5040000 		.4byte	.LASF50
 2471 02d8 09       		.byte	0x9
 2472 02d9 24       		.byte	0x24
 2473 02da 68000000 		.4byte	0x68
 2474 02de 04       		.byte	0x4
 2475 02df 0B       		.uleb128 0xb
 2476 02e0 0F000000 		.4byte	.LASF51
 2477 02e4 09       		.byte	0x9
 2478 02e5 25       		.byte	0x25
 2479 02e6 68000000 		.4byte	0x68
 2480 02ea 08       		.byte	0x8
 2481 02eb 0B       		.uleb128 0xb
 2482 02ec 98070000 		.4byte	.LASF52
 2483 02f0 09       		.byte	0x9
 2484 02f1 26       		.byte	0x26
 2485 02f2 68000000 		.4byte	0x68
 2486 02f6 0C       		.byte	0xc
 2487 02f7 0B       		.uleb128 0xb
 2488 02f8 04030000 		.4byte	.LASF53
 2489 02fc 09       		.byte	0x9
 2490 02fd 27       		.byte	0x27
 2491 02fe 68000000 		.4byte	0x68
 2492 0302 10       		.byte	0x10
 2493 0303 0B       		.uleb128 0xb
 2494 0304 27030000 		.4byte	.LASF54
 2495 0308 09       		.byte	0x9
 2496 0309 28       		.byte	0x28
 2497 030a 68000000 		.4byte	0x68
 2498 030e 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 60


 2499 030f 0B       		.uleb128 0xb
 2500 0310 F9060000 		.4byte	.LASF55
 2501 0314 09       		.byte	0x9
 2502 0315 29       		.byte	0x29
 2503 0316 68000000 		.4byte	0x68
 2504 031a 18       		.byte	0x18
 2505 031b 0B       		.uleb128 0xb
 2506 031c FC040000 		.4byte	.LASF56
 2507 0320 09       		.byte	0x9
 2508 0321 2A       		.byte	0x2a
 2509 0322 68000000 		.4byte	0x68
 2510 0326 1C       		.byte	0x1c
 2511 0327 0B       		.uleb128 0xb
 2512 0328 0B040000 		.4byte	.LASF57
 2513 032c 09       		.byte	0x9
 2514 032d 2B       		.byte	0x2b
 2515 032e 68000000 		.4byte	0x68
 2516 0332 20       		.byte	0x20
 2517 0333 00       		.byte	0
 2518 0334 09       		.uleb128 0x9
 2519 0335 2C       		.byte	0x2c
 2520 0336 0A       		.byte	0xa
 2521 0337 14       		.byte	0x14
 2522 0338 61030000 		.4byte	0x361
 2523 033c 0A       		.uleb128 0xa
 2524 033d 6B657900 		.ascii	"key\000"
 2525 0341 0A       		.byte	0xa
 2526 0342 15       		.byte	0x15
 2527 0343 61030000 		.4byte	0x361
 2528 0347 00       		.byte	0
 2529 0348 0B       		.uleb128 0xb
 2530 0349 1C030000 		.4byte	.LASF58
 2531 034d 0A       		.byte	0xa
 2532 034e 16       		.byte	0x16
 2533 034f 61030000 		.4byte	0x361
 2534 0353 14       		.byte	0x14
 2535 0354 0B       		.uleb128 0xb
 2536 0355 34050000 		.4byte	.LASF59
 2537 0359 0A       		.byte	0xa
 2538 035a 17       		.byte	0x17
 2539 035b BD000000 		.4byte	0xbd
 2540 035f 28       		.byte	0x28
 2541 0360 00       		.byte	0
 2542 0361 07       		.uleb128 0x7
 2543 0362 D7000000 		.4byte	0xd7
 2544 0366 71030000 		.4byte	0x371
 2545 036a 08       		.uleb128 0x8
 2546 036b E5000000 		.4byte	0xe5
 2547 036f 13       		.byte	0x13
 2548 0370 00       		.byte	0
 2549 0371 03       		.uleb128 0x3
 2550 0372 62030000 		.4byte	.LASF60
 2551 0376 0A       		.byte	0xa
 2552 0377 19       		.byte	0x19
 2553 0378 34030000 		.4byte	0x334
 2554 037c 09       		.uleb128 0x9
 2555 037d 3C       		.byte	0x3c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 61


 2556 037e 0B       		.byte	0xb
 2557 037f 35       		.byte	0x35
 2558 0380 A9030000 		.4byte	0x3a9
 2559 0384 0B       		.uleb128 0xb
 2560 0385 91070000 		.4byte	.LASF61
 2561 0389 0B       		.byte	0xb
 2562 038a 36       		.byte	0x36
 2563 038b 61030000 		.4byte	0x361
 2564 038f 00       		.byte	0
 2565 0390 0B       		.uleb128 0xb
 2566 0391 D0020000 		.4byte	.LASF62
 2567 0395 0B       		.byte	0xb
 2568 0396 37       		.byte	0x37
 2569 0397 61030000 		.4byte	0x361
 2570 039b 14       		.byte	0x14
 2571 039c 0B       		.uleb128 0xb
 2572 039d 7D060000 		.4byte	.LASF63
 2573 03a1 0B       		.byte	0xb
 2574 03a2 38       		.byte	0x38
 2575 03a3 61030000 		.4byte	0x361
 2576 03a7 28       		.byte	0x28
 2577 03a8 00       		.byte	0
 2578 03a9 03       		.uleb128 0x3
 2579 03aa 2E020000 		.4byte	.LASF64
 2580 03ae 0B       		.byte	0xb
 2581 03af 3A       		.byte	0x3a
 2582 03b0 7C030000 		.4byte	0x37c
 2583 03b4 09       		.uleb128 0x9
 2584 03b5 20       		.byte	0x20
 2585 03b6 0B       		.byte	0xb
 2586 03b7 3C       		.byte	0x3c
 2587 03b8 1D040000 		.4byte	0x41d
 2588 03bc 0B       		.uleb128 0xb
 2589 03bd 3B020000 		.4byte	.LASF65
 2590 03c1 0B       		.byte	0xb
 2591 03c2 3D       		.byte	0x3d
 2592 03c3 68000000 		.4byte	0x68
 2593 03c7 00       		.byte	0
 2594 03c8 0A       		.uleb128 0xa
 2595 03c9 62657200 		.ascii	"ber\000"
 2596 03cd 0B       		.byte	0xb
 2597 03ce 3E       		.byte	0x3e
 2598 03cf 68000000 		.4byte	0x68
 2599 03d3 04       		.byte	0x4
 2600 03d4 0B       		.uleb128 0xb
 2601 03d5 5B060000 		.4byte	.LASF66
 2602 03d9 0B       		.byte	0xb
 2603 03da 3F       		.byte	0x3f
 2604 03db 68000000 		.4byte	0x68
 2605 03df 08       		.byte	0x8
 2606 03e0 0B       		.uleb128 0xb
 2607 03e1 B2010000 		.4byte	.LASF67
 2608 03e5 0B       		.byte	0xb
 2609 03e6 40       		.byte	0x40
 2610 03e7 68000000 		.4byte	0x68
 2611 03eb 0C       		.byte	0xc
 2612 03ec 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 62


 2613 03ed 26060000 		.4byte	.LASF68
 2614 03f1 0B       		.byte	0xb
 2615 03f2 41       		.byte	0x41
 2616 03f3 68000000 		.4byte	0x68
 2617 03f7 10       		.byte	0x10
 2618 03f8 0B       		.uleb128 0xb
 2619 03f9 21060000 		.4byte	.LASF69
 2620 03fd 0B       		.byte	0xb
 2621 03fe 42       		.byte	0x42
 2622 03ff 68000000 		.4byte	0x68
 2623 0403 14       		.byte	0x14
 2624 0404 0B       		.uleb128 0xb
 2625 0405 C5010000 		.4byte	.LASF70
 2626 0409 0B       		.byte	0xb
 2627 040a 43       		.byte	0x43
 2628 040b 68000000 		.4byte	0x68
 2629 040f 18       		.byte	0x18
 2630 0410 0B       		.uleb128 0xb
 2631 0411 4A020000 		.4byte	.LASF71
 2632 0415 0B       		.byte	0xb
 2633 0416 44       		.byte	0x44
 2634 0417 68000000 		.4byte	0x68
 2635 041b 1C       		.byte	0x1c
 2636 041c 00       		.byte	0
 2637 041d 03       		.uleb128 0x3
 2638 041e D4060000 		.4byte	.LASF72
 2639 0422 0B       		.byte	0xb
 2640 0423 46       		.byte	0x46
 2641 0424 B4030000 		.4byte	0x3b4
 2642 0428 09       		.uleb128 0x9
 2643 0429 05       		.byte	0x5
 2644 042a 0B       		.byte	0xb
 2645 042b 52       		.byte	0x52
 2646 042c 6D040000 		.4byte	0x46d
 2647 0430 0B       		.uleb128 0xb
 2648 0431 A9020000 		.4byte	.LASF73
 2649 0435 0B       		.byte	0xb
 2650 0436 54       		.byte	0x54
 2651 0437 81000000 		.4byte	0x81
 2652 043b 00       		.byte	0
 2653 043c 0B       		.uleb128 0xb
 2654 043d 25080000 		.4byte	.LASF74
 2655 0441 0B       		.byte	0xb
 2656 0442 56       		.byte	0x56
 2657 0443 6D040000 		.4byte	0x46d
 2658 0447 01       		.byte	0x1
 2659 0448 0B       		.uleb128 0xb
 2660 0449 6C080000 		.4byte	.LASF75
 2661 044d 0B       		.byte	0xb
 2662 044e 58       		.byte	0x58
 2663 044f 81000000 		.4byte	0x81
 2664 0453 02       		.byte	0x2
 2665 0454 0B       		.uleb128 0xb
 2666 0455 42060000 		.4byte	.LASF76
 2667 0459 0B       		.byte	0xb
 2668 045a 5A       		.byte	0x5a
 2669 045b 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 63


 2670 045f 03       		.byte	0x3
 2671 0460 0B       		.uleb128 0xb
 2672 0461 0B030000 		.4byte	.LASF77
 2673 0465 0B       		.byte	0xb
 2674 0466 5D       		.byte	0x5d
 2675 0467 81000000 		.4byte	0x81
 2676 046b 04       		.byte	0x4
 2677 046c 00       		.byte	0
 2678 046d 02       		.uleb128 0x2
 2679 046e 01       		.byte	0x1
 2680 046f 02       		.byte	0x2
 2681 0470 F5050000 		.4byte	.LASF78
 2682 0474 03       		.uleb128 0x3
 2683 0475 A2040000 		.4byte	.LASF79
 2684 0479 0B       		.byte	0xb
 2685 047a 5F       		.byte	0x5f
 2686 047b 28040000 		.4byte	0x428
 2687 047f 09       		.uleb128 0x9
 2688 0480 06       		.byte	0x6
 2689 0481 0C       		.byte	0xc
 2690 0482 2E       		.byte	0x2e
 2691 0483 B8040000 		.4byte	0x4b8
 2692 0487 0B       		.uleb128 0xb
 2693 0488 EC020000 		.4byte	.LASF80
 2694 048c 0C       		.byte	0xc
 2695 048d 30       		.byte	0x30
 2696 048e 8D000000 		.4byte	0x8d
 2697 0492 00       		.byte	0
 2698 0493 0B       		.uleb128 0xb
 2699 0494 0F080000 		.4byte	.LASF81
 2700 0498 0C       		.byte	0xc
 2701 0499 31       		.byte	0x31
 2702 049a B1000000 		.4byte	0xb1
 2703 049e 02       		.byte	0x2
 2704 049f 0B       		.uleb128 0xb
 2705 04a0 01080000 		.4byte	.LASF82
 2706 04a4 0C       		.byte	0xc
 2707 04a5 32       		.byte	0x32
 2708 04a6 81000000 		.4byte	0x81
 2709 04aa 04       		.byte	0x4
 2710 04ab 0B       		.uleb128 0xb
 2711 04ac 89000000 		.4byte	.LASF83
 2712 04b0 0C       		.byte	0xc
 2713 04b1 33       		.byte	0x33
 2714 04b2 81000000 		.4byte	0x81
 2715 04b6 05       		.byte	0x5
 2716 04b7 00       		.byte	0
 2717 04b8 03       		.uleb128 0x3
 2718 04b9 5D020000 		.4byte	.LASF84
 2719 04bd 0C       		.byte	0xc
 2720 04be 36       		.byte	0x36
 2721 04bf C3040000 		.4byte	0x4c3
 2722 04c3 0C       		.uleb128 0xc
 2723 04c4 7F040000 		.4byte	0x47f
 2724 04c8 09       		.uleb128 0x9
 2725 04c9 1C       		.byte	0x1c
 2726 04ca 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 64


 2727 04cb 39       		.byte	0x39
 2728 04cc E9040000 		.4byte	0x4e9
 2729 04d0 0B       		.uleb128 0xb
 2730 04d1 14040000 		.4byte	.LASF85
 2731 04d5 0C       		.byte	0xc
 2732 04d6 3B       		.byte	0x3b
 2733 04d7 E9040000 		.4byte	0x4e9
 2734 04db 00       		.byte	0
 2735 04dc 0B       		.uleb128 0xb
 2736 04dd 5E080000 		.4byte	.LASF86
 2737 04e1 0C       		.byte	0xc
 2738 04e2 3C       		.byte	0x3c
 2739 04e3 F2000000 		.4byte	0xf2
 2740 04e7 04       		.byte	0x4
 2741 04e8 00       		.byte	0
 2742 04e9 06       		.uleb128 0x6
 2743 04ea 04       		.byte	0x4
 2744 04eb A9030000 		.4byte	0x3a9
 2745 04ef 03       		.uleb128 0x3
 2746 04f0 97040000 		.4byte	.LASF87
 2747 04f4 0C       		.byte	0xc
 2748 04f5 3E       		.byte	0x3e
 2749 04f6 C8040000 		.4byte	0x4c8
 2750 04fa 09       		.uleb128 0x9
 2751 04fb 68       		.byte	0x68
 2752 04fc 0C       		.byte	0xc
 2753 04fd 44       		.byte	0x44
 2754 04fe 1B050000 		.4byte	0x51b
 2755 0502 0B       		.uleb128 0xb
 2756 0503 1F040000 		.4byte	.LASF88
 2757 0507 0C       		.byte	0xc
 2758 0508 49       		.byte	0x49
 2759 0509 1B050000 		.4byte	0x51b
 2760 050d 00       		.byte	0
 2761 050e 0B       		.uleb128 0xb
 2762 050f 03040000 		.4byte	.LASF89
 2763 0513 0C       		.byte	0xc
 2764 0514 4A       		.byte	0x4a
 2765 0515 68000000 		.4byte	0x68
 2766 0519 64       		.byte	0x64
 2767 051a 00       		.byte	0
 2768 051b 07       		.uleb128 0x7
 2769 051c D7000000 		.4byte	0xd7
 2770 0520 2B050000 		.4byte	0x52b
 2771 0524 08       		.uleb128 0x8
 2772 0525 E5000000 		.4byte	0xe5
 2773 0529 63       		.byte	0x63
 2774 052a 00       		.byte	0
 2775 052b 03       		.uleb128 0x3
 2776 052c 04050000 		.4byte	.LASF90
 2777 0530 0C       		.byte	0xc
 2778 0531 50       		.byte	0x50
 2779 0532 FA040000 		.4byte	0x4fa
 2780 0536 0F       		.uleb128 0xf
 2781 0537 A1000000 		.4byte	.LASF166
 2782 053b 01       		.byte	0x1
 2783 053c 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 65


 2784 053d 00000000 		.4byte	.LFB64
 2785 0541 0C000000 		.4byte	.LFE64-.LFB64
 2786 0545 01       		.uleb128 0x1
 2787 0546 9C       		.byte	0x9c
 2788 0547 10       		.uleb128 0x10
 2789 0548 4E080000 		.4byte	.LASF103
 2790 054c 01       		.byte	0x1
 2791 054d 28       		.byte	0x28
 2792 054e 00000000 		.4byte	.LFB65
 2793 0552 1C010000 		.4byte	.LFE65-.LFB65
 2794 0556 01       		.uleb128 0x1
 2795 0557 9C       		.byte	0x9c
 2796 0558 79050000 		.4byte	0x579
 2797 055c 11       		.uleb128 0x11
 2798 055d 50070000 		.4byte	.LASF91
 2799 0561 01       		.byte	0x1
 2800 0562 3C       		.byte	0x3c
 2801 0563 79050000 		.4byte	0x579
 2802 0567 02       		.uleb128 0x2
 2803 0568 91       		.byte	0x91
 2804 0569 64       		.sleb128 -28
 2805 056a 11       		.uleb128 0x11
 2806 056b B3030000 		.4byte	.LASF92
 2807 056f 01       		.byte	0x1
 2808 0570 60       		.byte	0x60
 2809 0571 81000000 		.4byte	0x81
 2810 0575 02       		.uleb128 0x2
 2811 0576 91       		.byte	0x91
 2812 0577 6F       		.sleb128 -17
 2813 0578 00       		.byte	0
 2814 0579 07       		.uleb128 0x7
 2815 057a 99000000 		.4byte	0x99
 2816 057e 89050000 		.4byte	0x589
 2817 0582 08       		.uleb128 0x8
 2818 0583 E5000000 		.4byte	0xe5
 2819 0587 01       		.byte	0x1
 2820 0588 00       		.byte	0
 2821 0589 12       		.uleb128 0x12
 2822 058a 2C040000 		.4byte	.LASF94
 2823 058e 01       		.byte	0x1
 2824 058f 6A       		.byte	0x6a
 2825 0590 68000000 		.4byte	0x68
 2826 0594 00000000 		.4byte	.LFB66
 2827 0598 7C000000 		.4byte	.LFE66-.LFB66
 2828 059c 01       		.uleb128 0x1
 2829 059d 9C       		.byte	0x9c
 2830 059e B1050000 		.4byte	0x5b1
 2831 05a2 11       		.uleb128 0x11
 2832 05a3 D9050000 		.4byte	.LASF93
 2833 05a7 01       		.byte	0x1
 2834 05a8 87       		.byte	0x87
 2835 05a9 81000000 		.4byte	0x81
 2836 05ad 02       		.uleb128 0x2
 2837 05ae 91       		.byte	0x91
 2838 05af 77       		.sleb128 -9
 2839 05b0 00       		.byte	0
 2840 05b1 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 66


 2841 05b2 76070000 		.4byte	.LASF167
 2842 05b6 01       		.byte	0x1
 2843 05b7 97       		.byte	0x97
 2844 05b8 00000000 		.4byte	.LFB67
 2845 05bc 2A000000 		.4byte	.LFE67-.LFB67
 2846 05c0 01       		.uleb128 0x1
 2847 05c1 9C       		.byte	0x9c
 2848 05c2 14       		.uleb128 0x14
 2849 05c3 6E030000 		.4byte	.LASF95
 2850 05c7 01       		.byte	0x1
 2851 05c8 BC       		.byte	0xbc
 2852 05c9 00000000 		.4byte	.LFB68
 2853 05cd 6C000000 		.4byte	.LFE68-.LFB68
 2854 05d1 01       		.uleb128 0x1
 2855 05d2 9C       		.byte	0x9c
 2856 05d3 E6050000 		.4byte	0x5e6
 2857 05d7 15       		.uleb128 0x15
 2858 05d8 B9040000 		.4byte	.LASF96
 2859 05dc 01       		.byte	0x1
 2860 05dd BC       		.byte	0xbc
 2861 05de 81000000 		.4byte	0x81
 2862 05e2 02       		.uleb128 0x2
 2863 05e3 91       		.byte	0x91
 2864 05e4 77       		.sleb128 -9
 2865 05e5 00       		.byte	0
 2866 05e6 16       		.uleb128 0x16
 2867 05e7 43080000 		.4byte	.LASF100
 2868 05eb 01       		.byte	0x1
 2869 05ec D9       		.byte	0xd9
 2870 05ed 81000000 		.4byte	0x81
 2871 05f1 00000000 		.4byte	.LFB69
 2872 05f5 48000000 		.4byte	.LFE69-.LFB69
 2873 05f9 01       		.uleb128 0x1
 2874 05fa 9C       		.byte	0x9c
 2875 05fb 1C060000 		.4byte	0x61c
 2876 05ff 15       		.uleb128 0x15
 2877 0600 E2040000 		.4byte	.LASF97
 2878 0604 01       		.byte	0x1
 2879 0605 D9       		.byte	0xd9
 2880 0606 1C060000 		.4byte	0x61c
 2881 060a 02       		.uleb128 0x2
 2882 060b 91       		.byte	0x91
 2883 060c 74       		.sleb128 -12
 2884 060d 15       		.uleb128 0x15
 2885 060e B9040000 		.4byte	.LASF96
 2886 0612 01       		.byte	0x1
 2887 0613 D9       		.byte	0xd9
 2888 0614 81000000 		.4byte	0x81
 2889 0618 02       		.uleb128 0x2
 2890 0619 91       		.byte	0x91
 2891 061a 73       		.sleb128 -13
 2892 061b 00       		.byte	0
 2893 061c 06       		.uleb128 0x6
 2894 061d 04       		.byte	0x4
 2895 061e B8040000 		.4byte	0x4b8
 2896 0622 17       		.uleb128 0x17
 2897 0623 2B060000 		.4byte	.LASF98
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 67


 2898 0627 01       		.byte	0x1
 2899 0628 EE       		.byte	0xee
 2900 0629 00000000 		.4byte	.LFB70
 2901 062d 1E000000 		.4byte	.LFE70-.LFB70
 2902 0631 01       		.uleb128 0x1
 2903 0632 9C       		.byte	0x9c
 2904 0633 46060000 		.4byte	0x646
 2905 0637 15       		.uleb128 0x15
 2906 0638 89060000 		.4byte	.LASF99
 2907 063c 01       		.byte	0x1
 2908 063d EE       		.byte	0xee
 2909 063e 1C060000 		.4byte	0x61c
 2910 0642 02       		.uleb128 0x2
 2911 0643 91       		.byte	0x91
 2912 0644 74       		.sleb128 -12
 2913 0645 00       		.byte	0
 2914 0646 18       		.uleb128 0x18
 2915 0647 61050000 		.4byte	.LASF101
 2916 064b 01       		.byte	0x1
 2917 064c F7       		.byte	0xf7
 2918 064d B8040000 		.4byte	0x4b8
 2919 0651 00000000 		.4byte	.LFB71
 2920 0655 46000000 		.4byte	.LFE71-.LFB71
 2921 0659 01       		.uleb128 0x1
 2922 065a 9C       		.byte	0x9c
 2923 065b 98060000 		.4byte	0x698
 2924 065f 15       		.uleb128 0x15
 2925 0660 EC020000 		.4byte	.LASF80
 2926 0664 01       		.byte	0x1
 2927 0665 F7       		.byte	0xf7
 2928 0666 8D000000 		.4byte	0x8d
 2929 066a 02       		.uleb128 0x2
 2930 066b 91       		.byte	0x91
 2931 066c 6A       		.sleb128 -22
 2932 066d 15       		.uleb128 0x15
 2933 066e 01080000 		.4byte	.LASF82
 2934 0672 01       		.byte	0x1
 2935 0673 F7       		.byte	0xf7
 2936 0674 81000000 		.4byte	0x81
 2937 0678 02       		.uleb128 0x2
 2938 0679 91       		.byte	0x91
 2939 067a 69       		.sleb128 -23
 2940 067b 15       		.uleb128 0x15
 2941 067c 89000000 		.4byte	.LASF83
 2942 0680 01       		.byte	0x1
 2943 0681 F7       		.byte	0xf7
 2944 0682 81000000 		.4byte	0x81
 2945 0686 02       		.uleb128 0x2
 2946 0687 91       		.byte	0x91
 2947 0688 68       		.sleb128 -24
 2948 0689 11       		.uleb128 0x11
 2949 068a A0070000 		.4byte	.LASF102
 2950 068e 01       		.byte	0x1
 2951 068f FA       		.byte	0xfa
 2952 0690 B8040000 		.4byte	0x4b8
 2953 0694 02       		.uleb128 0x2
 2954 0695 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 68


 2955 0696 70       		.sleb128 -16
 2956 0697 00       		.byte	0
 2957 0698 19       		.uleb128 0x19
 2958 0699 98060000 		.4byte	.LASF104
 2959 069d 01       		.byte	0x1
 2960 069e 1001     		.2byte	0x110
 2961 06a0 00000000 		.4byte	.LFB72
 2962 06a4 04010000 		.4byte	.LFE72-.LFB72
 2963 06a8 01       		.uleb128 0x1
 2964 06a9 9C       		.byte	0x9c
 2965 06aa FF060000 		.4byte	0x6ff
 2966 06ae 1A       		.uleb128 0x1a
 2967 06af 8D010000 		.4byte	.LASF105
 2968 06b3 01       		.byte	0x1
 2969 06b4 1801     		.2byte	0x118
 2970 06b6 C9010000 		.4byte	0x1c9
 2971 06ba 03       		.uleb128 0x3
 2972 06bb 91       		.byte	0x91
 2973 06bc EC7C     		.sleb128 -404
 2974 06be 1A       		.uleb128 0x1a
 2975 06bf DB070000 		.4byte	.LASF106
 2976 06c3 01       		.byte	0x1
 2977 06c4 1C01     		.2byte	0x11c
 2978 06c6 C9010000 		.4byte	0x1c9
 2979 06ca 03       		.uleb128 0x3
 2980 06cb 91       		.byte	0x91
 2981 06cc E879     		.sleb128 -792
 2982 06ce 1A       		.uleb128 0x1a
 2983 06cf 3A010000 		.4byte	.LASF107
 2984 06d3 01       		.byte	0x1
 2985 06d4 2001     		.2byte	0x120
 2986 06d6 C9010000 		.4byte	0x1c9
 2987 06da 03       		.uleb128 0x3
 2988 06db 91       		.byte	0x91
 2989 06dc E476     		.sleb128 -1180
 2990 06de 1A       		.uleb128 0x1a
 2991 06df 5A040000 		.4byte	.LASF108
 2992 06e3 01       		.byte	0x1
 2993 06e4 2401     		.2byte	0x124
 2994 06e6 C9010000 		.4byte	0x1c9
 2995 06ea 03       		.uleb128 0x3
 2996 06eb 91       		.byte	0x91
 2997 06ec E073     		.sleb128 -1568
 2998 06ee 1A       		.uleb128 0x1a
 2999 06ef 00000000 		.4byte	.LASF109
 3000 06f3 01       		.byte	0x1
 3001 06f4 2801     		.2byte	0x128
 3002 06f6 C9010000 		.4byte	0x1c9
 3003 06fa 03       		.uleb128 0x3
 3004 06fb 91       		.byte	0x91
 3005 06fc DC70     		.sleb128 -1956
 3006 06fe 00       		.byte	0
 3007 06ff 1B       		.uleb128 0x1b
 3008 0700 59080000 		.4byte	.LASF168
 3009 0704 01       		.byte	0x1
 3010 0705 3301     		.2byte	0x133
 3011 0707 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 69


 3012 070b 00000000 		.4byte	.LFB73
 3013 070f 1E000000 		.4byte	.LFE73-.LFB73
 3014 0713 01       		.uleb128 0x1
 3015 0714 9C       		.byte	0x9c
 3016 0715 1C       		.uleb128 0x1c
 3017 0716 B3020000 		.4byte	.LASF110
 3018 071a 01       		.byte	0x1
 3019 071b 4901     		.2byte	0x149
 3020 071d 81000000 		.4byte	0x81
 3021 0721 00000000 		.4byte	.LFB74
 3022 0725 5C040000 		.4byte	.LFE74-.LFB74
 3023 0729 01       		.uleb128 0x1
 3024 072a 9C       		.byte	0x9c
 3025 072b 7F080000 		.4byte	0x87f
 3026 072f 1D       		.uleb128 0x1d
 3027 0730 62000000 		.4byte	.LBB2
 3028 0734 CC030000 		.4byte	.LBE2-.LBB2
 3029 0738 1A       		.uleb128 0x1a
 3030 0739 74050000 		.4byte	.LASF111
 3031 073d 01       		.byte	0x1
 3032 073e 7901     		.2byte	0x179
 3033 0740 61030000 		.4byte	0x361
 3034 0744 02       		.uleb128 0x2
 3035 0745 91       		.byte	0x91
 3036 0746 48       		.sleb128 -56
 3037 0747 1A       		.uleb128 0x1a
 3038 0748 AE050000 		.4byte	.LASF112
 3039 074c 01       		.byte	0x1
 3040 074d 7D01     		.2byte	0x17d
 3041 074f 61030000 		.4byte	0x361
 3042 0753 03       		.uleb128 0x3
 3043 0754 91       		.byte	0x91
 3044 0755 B47F     		.sleb128 -76
 3045 0757 1A       		.uleb128 0x1a
 3046 0758 7E020000 		.4byte	.LASF113
 3047 075c 01       		.byte	0x1
 3048 075d 8201     		.2byte	0x182
 3049 075f 61030000 		.4byte	0x361
 3050 0763 03       		.uleb128 0x3
 3051 0764 91       		.byte	0x91
 3052 0765 A07F     		.sleb128 -96
 3053 0767 1A       		.uleb128 0x1a
 3054 0768 BF030000 		.4byte	.LASF114
 3055 076c 01       		.byte	0x1
 3056 076d 9501     		.2byte	0x195
 3057 076f 8D000000 		.4byte	0x8d
 3058 0773 02       		.uleb128 0x2
 3059 0774 91       		.byte	0x91
 3060 0775 66       		.sleb128 -26
 3061 0776 1A       		.uleb128 0x1a
 3062 0777 45040000 		.4byte	.LASF115
 3063 077b 01       		.byte	0x1
 3064 077c 9601     		.2byte	0x196
 3065 077e 61030000 		.4byte	0x361
 3066 0782 03       		.uleb128 0x3
 3067 0783 91       		.byte	0x91
 3068 0784 8C7F     		.sleb128 -116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 70


 3069 0786 1A       		.uleb128 0x1a
 3070 0787 3B070000 		.4byte	.LASF116
 3071 078b 01       		.byte	0x1
 3072 078c AB01     		.2byte	0x1ab
 3073 078e 7F080000 		.4byte	0x87f
 3074 0792 03       		.uleb128 0x3
 3075 0793 91       		.byte	0x91
 3076 0794 A475     		.sleb128 -1372
 3077 0796 1A       		.uleb128 0x1a
 3078 0797 BB070000 		.4byte	.LASF30
 3079 079b 01       		.byte	0x1
 3080 079c AC01     		.2byte	0x1ac
 3081 079e 81000000 		.4byte	0x81
 3082 07a2 02       		.uleb128 0x2
 3083 07a3 91       		.byte	0x91
 3084 07a4 65       		.sleb128 -27
 3085 07a5 1A       		.uleb128 0x1a
 3086 07a6 0D070000 		.4byte	.LASF117
 3087 07aa 01       		.byte	0x1
 3088 07ab B301     		.2byte	0x1b3
 3089 07ad EC000000 		.4byte	0xec
 3090 07b1 02       		.uleb128 0x2
 3091 07b2 91       		.byte	0x91
 3092 07b3 6C       		.sleb128 -20
 3093 07b4 1A       		.uleb128 0x1a
 3094 07b5 AA010000 		.4byte	.LASF118
 3095 07b9 01       		.byte	0x1
 3096 07ba B701     		.2byte	0x1b7
 3097 07bc A5000000 		.4byte	0xa5
 3098 07c0 02       		.uleb128 0x2
 3099 07c1 91       		.byte	0x91
 3100 07c2 64       		.sleb128 -28
 3101 07c3 1A       		.uleb128 0x1a
 3102 07c4 BC020000 		.4byte	.LASF119
 3103 07c8 01       		.byte	0x1
 3104 07c9 E701     		.2byte	0x1e7
 3105 07cb 4C000000 		.4byte	0x4c
 3106 07cf 02       		.uleb128 0x2
 3107 07d0 91       		.byte	0x91
 3108 07d1 5C       		.sleb128 -36
 3109 07d2 1E       		.uleb128 0x1e
 3110 07d3 F0000000 		.4byte	.LBB3
 3111 07d7 2C000000 		.4byte	.LBE3-.LBB3
 3112 07db FF070000 		.4byte	0x7ff
 3113 07df 1A       		.uleb128 0x1a
 3114 07e0 C4060000 		.4byte	.LASF120
 3115 07e4 01       		.byte	0x1
 3116 07e5 8A01     		.2byte	0x18a
 3117 07e7 8D000000 		.4byte	0x8d
 3118 07eb 02       		.uleb128 0x2
 3119 07ec 91       		.byte	0x91
 3120 07ed 68       		.sleb128 -24
 3121 07ee 1A       		.uleb128 0x1a
 3122 07ef 1C020000 		.4byte	.LASF121
 3123 07f3 01       		.byte	0x1
 3124 07f4 8B01     		.2byte	0x18b
 3125 07f6 61030000 		.4byte	0x361
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 71


 3126 07fa 03       		.uleb128 0x3
 3127 07fb 91       		.byte	0x91
 3128 07fc F87E     		.sleb128 -136
 3129 07fe 00       		.byte	0
 3130 07ff 1E       		.uleb128 0x1e
 3131 0800 1E010000 		.4byte	.LBB4
 3132 0804 20000000 		.4byte	.LBE4-.LBB4
 3133 0808 1D080000 		.4byte	0x81d
 3134 080c 1A       		.uleb128 0x1a
 3135 080d 1C020000 		.4byte	.LASF121
 3136 0811 01       		.byte	0x1
 3137 0812 8F01     		.2byte	0x18f
 3138 0814 61030000 		.4byte	0x361
 3139 0818 03       		.uleb128 0x3
 3140 0819 91       		.byte	0x91
 3141 081a E47E     		.sleb128 -156
 3142 081c 00       		.byte	0
 3143 081d 1E       		.uleb128 0x1e
 3144 081e 5E020000 		.4byte	.LBB5
 3145 0822 4C010000 		.4byte	.LBE5-.LBB5
 3146 0826 54080000 		.4byte	0x854
 3147 082a 1A       		.uleb128 0x1a
 3148 082b 6D050000 		.4byte	.LASF122
 3149 082f 01       		.byte	0x1
 3150 0830 BC01     		.2byte	0x1bc
 3151 0832 A5000000 		.4byte	0xa5
 3152 0836 02       		.uleb128 0x2
 3153 0837 91       		.byte	0x91
 3154 0838 6B       		.sleb128 -21
 3155 0839 1D       		.uleb128 0x1d
 3156 083a 66020000 		.4byte	.LBB6
 3157 083e 28010000 		.4byte	.LBE6-.LBB6
 3158 0842 1A       		.uleb128 0x1a
 3159 0843 8C030000 		.4byte	.LASF123
 3160 0847 01       		.byte	0x1
 3161 0848 BE01     		.2byte	0x1be
 3162 084a 8F080000 		.4byte	0x88f
 3163 084e 03       		.uleb128 0x3
 3164 084f 91       		.byte	0x91
 3165 0850 EC76     		.sleb128 -1172
 3166 0852 00       		.byte	0
 3167 0853 00       		.byte	0
 3168 0854 1D       		.uleb128 0x1d
 3169 0855 C4030000 		.4byte	.LBB7
 3170 0859 3A000000 		.4byte	.LBE7-.LBB7
 3171 085d 1A       		.uleb128 0x1a
 3172 085e 8C020000 		.4byte	.LASF124
 3173 0862 01       		.byte	0x1
 3174 0863 DE01     		.2byte	0x1de
 3175 0865 68000000 		.4byte	0x68
 3176 0869 02       		.uleb128 0x2
 3177 086a 91       		.byte	0x91
 3178 086b 60       		.sleb128 -32
 3179 086c 1A       		.uleb128 0x1a
 3180 086d 36060000 		.4byte	.LASF125
 3181 0871 01       		.byte	0x1
 3182 0872 DF01     		.2byte	0x1df
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 72


 3183 0874 A0080000 		.4byte	0x8a0
 3184 0878 03       		.uleb128 0x3
 3185 0879 91       		.byte	0x91
 3186 087a D87E     		.sleb128 -168
 3187 087c 00       		.byte	0
 3188 087d 00       		.byte	0
 3189 087e 00       		.byte	0
 3190 087f 07       		.uleb128 0x7
 3191 0880 D7000000 		.4byte	0xd7
 3192 0884 8F080000 		.4byte	0x88f
 3193 0888 08       		.uleb128 0x8
 3194 0889 E5000000 		.4byte	0xe5
 3195 088d C7       		.byte	0xc7
 3196 088e 00       		.byte	0
 3197 088f 07       		.uleb128 0x7
 3198 0890 D7000000 		.4byte	0xd7
 3199 0894 A0080000 		.4byte	0x8a0
 3200 0898 1F       		.uleb128 0x1f
 3201 0899 E5000000 		.4byte	0xe5
 3202 089d E803     		.2byte	0x3e8
 3203 089f 00       		.byte	0
 3204 08a0 07       		.uleb128 0x7
 3205 08a1 D7000000 		.4byte	0xd7
 3206 08a5 B0080000 		.4byte	0x8b0
 3207 08a9 08       		.uleb128 0x8
 3208 08aa E5000000 		.4byte	0xe5
 3209 08ae 09       		.byte	0x9
 3210 08af 00       		.byte	0
 3211 08b0 1C       		.uleb128 0x1c
 3212 08b1 B5050000 		.4byte	.LASF126
 3213 08b5 01       		.byte	0x1
 3214 08b6 FC01     		.2byte	0x1fc
 3215 08b8 81000000 		.4byte	0x81
 3216 08bc 00000000 		.4byte	.LFB75
 3217 08c0 44000000 		.4byte	.LFE75-.LFB75
 3218 08c4 01       		.uleb128 0x1
 3219 08c5 9C       		.byte	0x9c
 3220 08c6 E4080000 		.4byte	0x8e4
 3221 08ca 1D       		.uleb128 0x1d
 3222 08cb 20000000 		.4byte	.LBB8
 3223 08cf 1A000000 		.4byte	.LBE8-.LBB8
 3224 08d3 1A       		.uleb128 0x1a
 3225 08d4 BC020000 		.4byte	.LASF119
 3226 08d8 01       		.byte	0x1
 3227 08d9 0702     		.2byte	0x207
 3228 08db 4C000000 		.4byte	0x4c
 3229 08df 02       		.uleb128 0x2
 3230 08e0 91       		.byte	0x91
 3231 08e1 74       		.sleb128 -12
 3232 08e2 00       		.byte	0
 3233 08e3 00       		.byte	0
 3234 08e4 1C       		.uleb128 0x1c
 3235 08e5 ED030000 		.4byte	.LASF127
 3236 08e9 01       		.byte	0x1
 3237 08ea 1C02     		.2byte	0x21c
 3238 08ec 81000000 		.4byte	0x81
 3239 08f0 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 73


 3240 08f4 74020000 		.4byte	.LFE76-.LFB76
 3241 08f8 01       		.uleb128 0x1
 3242 08f9 9C       		.byte	0x9c
 3243 08fa 75090000 		.4byte	0x975
 3244 08fe 1A       		.uleb128 0x1a
 3245 08ff 34050000 		.4byte	.LASF59
 3246 0903 01       		.byte	0x1
 3247 0904 1F02     		.2byte	0x21f
 3248 0906 4C000000 		.4byte	0x4c
 3249 090a 02       		.uleb128 0x2
 3250 090b 91       		.byte	0x91
 3251 090c 6C       		.sleb128 -20
 3252 090d 1A       		.uleb128 0x1a
 3253 090e 13070000 		.4byte	.LASF128
 3254 0912 01       		.byte	0x1
 3255 0913 2002     		.2byte	0x220
 3256 0915 75090000 		.4byte	0x975
 3257 0919 02       		.uleb128 0x2
 3258 091a 91       		.byte	0x91
 3259 091b 4C       		.sleb128 -52
 3260 091c 1A       		.uleb128 0x1a
 3261 091d 1C030000 		.4byte	.LASF58
 3262 0921 01       		.byte	0x1
 3263 0922 2402     		.2byte	0x224
 3264 0924 61030000 		.4byte	0x361
 3265 0928 03       		.uleb128 0x3
 3266 0929 91       		.byte	0x91
 3267 092a B87F     		.sleb128 -72
 3268 092c 1A       		.uleb128 0x1a
 3269 092d 97030000 		.4byte	.LASF129
 3270 0931 01       		.byte	0x1
 3271 0932 4202     		.2byte	0x242
 3272 0934 6D020000 		.4byte	0x26d
 3273 0938 03       		.uleb128 0x3
 3274 0939 91       		.byte	0x91
 3275 093a A47F     		.sleb128 -92
 3276 093c 1E       		.uleb128 0x1e
 3277 093d 22000000 		.4byte	.LBB9
 3278 0941 78000000 		.4byte	.LBE9-.LBB9
 3279 0945 5A090000 		.4byte	0x95a
 3280 0949 1A       		.uleb128 0x1a
 3281 094a 59070000 		.4byte	.LASF130
 3282 094e 01       		.byte	0x1
 3283 094f 2A02     		.2byte	0x22a
 3284 0951 1D020000 		.4byte	0x21d
 3285 0955 03       		.uleb128 0x3
 3286 0956 91       		.byte	0x91
 3287 0957 887F     		.sleb128 -120
 3288 0959 00       		.byte	0
 3289 095a 1D       		.uleb128 0x1d
 3290 095b 1E010000 		.4byte	.LBB10
 3291 095f EE000000 		.4byte	.LBE10-.LBB10
 3292 0963 1A       		.uleb128 0x1a
 3293 0964 B0070000 		.4byte	.LASF131
 3294 0968 01       		.byte	0x1
 3295 0969 5D02     		.2byte	0x25d
 3296 096b B1020000 		.4byte	0x2b1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 74


 3297 096f 03       		.uleb128 0x3
 3298 0970 91       		.byte	0x91
 3299 0971 F87E     		.sleb128 -136
 3300 0973 00       		.byte	0
 3301 0974 00       		.byte	0
 3302 0975 07       		.uleb128 0x7
 3303 0976 D7000000 		.4byte	0xd7
 3304 097a 85090000 		.4byte	0x985
 3305 097e 08       		.uleb128 0x8
 3306 097f E5000000 		.4byte	0xe5
 3307 0983 1F       		.byte	0x1f
 3308 0984 00       		.byte	0
 3309 0985 20       		.uleb128 0x20
 3310 0986 5A030000 		.4byte	.LASF132
 3311 098a 01       		.byte	0x1
 3312 098b 8302     		.2byte	0x283
 3313 098d 81000000 		.4byte	0x81
 3314 0991 00000000 		.4byte	.LFB77
 3315 0995 74000000 		.4byte	.LFE77-.LFB77
 3316 0999 01       		.uleb128 0x1
 3317 099a 9C       		.byte	0x9c
 3318 099b CB090000 		.4byte	0x9cb
 3319 099f 21       		.uleb128 0x21
 3320 09a0 34050000 		.4byte	.LASF59
 3321 09a4 01       		.byte	0x1
 3322 09a5 8302     		.2byte	0x283
 3323 09a7 4C000000 		.4byte	0x4c
 3324 09ab 02       		.uleb128 0x2
 3325 09ac 91       		.byte	0x91
 3326 09ad 64       		.sleb128 -28
 3327 09ae 22       		.uleb128 0x22
 3328 09af 7400     		.ascii	"t\000"
 3329 09b1 01       		.byte	0x1
 3330 09b2 8A02     		.2byte	0x28a
 3331 09b4 CB090000 		.4byte	0x9cb
 3332 09b8 02       		.uleb128 0x2
 3333 09b9 91       		.byte	0x91
 3334 09ba 74       		.sleb128 -12
 3335 09bb 1A       		.uleb128 0x1a
 3336 09bc 13050000 		.4byte	.LASF133
 3337 09c0 01       		.byte	0x1
 3338 09c1 8F02     		.2byte	0x28f
 3339 09c3 6B010000 		.4byte	0x16b
 3340 09c7 02       		.uleb128 0x2
 3341 09c8 91       		.byte	0x91
 3342 09c9 68       		.sleb128 -24
 3343 09ca 00       		.byte	0
 3344 09cb 06       		.uleb128 0x6
 3345 09cc 04       		.byte	0x4
 3346 09cd BC020000 		.4byte	0x2bc
 3347 09d1 20       		.uleb128 0x20
 3348 09d2 FB020000 		.4byte	.LASF134
 3349 09d6 01       		.byte	0x1
 3350 09d7 AC02     		.2byte	0x2ac
 3351 09d9 81000000 		.4byte	0x81
 3352 09dd 00000000 		.4byte	.LFB78
 3353 09e1 38010000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 75


 3354 09e5 01       		.uleb128 0x1
 3355 09e6 9C       		.byte	0x9c
 3356 09e7 4A0A0000 		.4byte	0xa4a
 3357 09eb 21       		.uleb128 0x21
 3358 09ec 22030000 		.4byte	.LASF135
 3359 09f0 01       		.byte	0x1
 3360 09f1 AC02     		.2byte	0x2ac
 3361 09f3 EC000000 		.4byte	0xec
 3362 09f7 03       		.uleb128 0x3
 3363 09f8 91       		.byte	0x91
 3364 09f9 9C7E     		.sleb128 -228
 3365 09fb 21       		.uleb128 0x21
 3366 09fc 17030000 		.4byte	.LASF136
 3367 0a00 01       		.byte	0x1
 3368 0a01 AC02     		.2byte	0x2ac
 3369 0a03 68000000 		.4byte	0x68
 3370 0a07 03       		.uleb128 0x3
 3371 0a08 91       		.byte	0x91
 3372 0a09 987E     		.sleb128 -232
 3373 0a0b 21       		.uleb128 0x21
 3374 0a0c DC040000 		.4byte	.LASF137
 3375 0a10 01       		.byte	0x1
 3376 0a11 AC02     		.2byte	0x2ac
 3377 0a13 EC000000 		.4byte	0xec
 3378 0a17 03       		.uleb128 0x3
 3379 0a18 91       		.byte	0x91
 3380 0a19 947E     		.sleb128 -236
 3381 0a1b 1A       		.uleb128 0x1a
 3382 0a1c 0D020000 		.4byte	.LASF138
 3383 0a20 01       		.byte	0x1
 3384 0a21 AE02     		.2byte	0x2ae
 3385 0a23 81000000 		.4byte	0x81
 3386 0a27 02       		.uleb128 0x2
 3387 0a28 91       		.byte	0x91
 3388 0a29 77       		.sleb128 -9
 3389 0a2a 1A       		.uleb128 0x1a
 3390 0a2b 74000000 		.4byte	.LASF139
 3391 0a2f 01       		.byte	0x1
 3392 0a30 B502     		.2byte	0x2b5
 3393 0a32 4A0A0000 		.4byte	0xa4a
 3394 0a36 02       		.uleb128 0x2
 3395 0a37 91       		.byte	0x91
 3396 0a38 68       		.sleb128 -24
 3397 0a39 1A       		.uleb128 0x1a
 3398 0a3a 3B070000 		.4byte	.LASF116
 3399 0a3e 01       		.byte	0x1
 3400 0a3f BD02     		.2byte	0x2bd
 3401 0a41 7F080000 		.4byte	0x87f
 3402 0a45 03       		.uleb128 0x3
 3403 0a46 91       		.byte	0x91
 3404 0a47 A07E     		.sleb128 -224
 3405 0a49 00       		.byte	0
 3406 0a4a 07       		.uleb128 0x7
 3407 0a4b D7000000 		.4byte	0xd7
 3408 0a4f 5A0A0000 		.4byte	0xa5a
 3409 0a53 08       		.uleb128 0x8
 3410 0a54 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 76


 3411 0a58 0B       		.byte	0xb
 3412 0a59 00       		.byte	0
 3413 0a5a 23       		.uleb128 0x23
 3414 0a5b 80010000 		.4byte	.LASF140
 3415 0a5f 0D       		.byte	0xd
 3416 0a60 1207     		.2byte	0x712
 3417 0a62 660A0000 		.4byte	0xa66
 3418 0a66 0C       		.uleb128 0xc
 3419 0a67 76000000 		.4byte	0x76
 3420 0a6b 24       		.uleb128 0x24
 3421 0a6c 64000000 		.4byte	.LASF141
 3422 0a70 0A       		.byte	0xa
 3423 0a71 11       		.byte	0x11
 3424 0a72 6D040000 		.4byte	0x46d
 3425 0a76 05       		.uleb128 0x5
 3426 0a77 03       		.byte	0x3
 3427 0a78 00000000 		.4byte	buffer_overflow
 3428 0a7c 24       		.uleb128 0x24
 3429 0a7d C3040000 		.4byte	.LASF142
 3430 0a81 0A       		.byte	0xa
 3431 0a82 22       		.byte	0x22
 3432 0a83 8D000000 		.4byte	0x8d
 3433 0a87 05       		.uleb128 0x5
 3434 0a88 03       		.byte	0x3
 3435 0a89 00000000 		.4byte	dataPointsInStack
 3436 0a8d 24       		.uleb128 0x24
 3437 0a8e C2070000 		.4byte	.LASF143
 3438 0a92 0A       		.byte	0xa
 3439 0a93 23       		.byte	0x23
 3440 0a94 8D000000 		.4byte	0x8d
 3441 0a98 05       		.uleb128 0x5
 3442 0a99 03       		.byte	0x3
 3443 0a9a 00000000 		.4byte	dataPointsInStackDesired
 3444 0a9e 07       		.uleb128 0x7
 3445 0a9f 71030000 		.4byte	0x371
 3446 0aa3 AE0A0000 		.4byte	0xaae
 3447 0aa7 08       		.uleb128 0x8
 3448 0aa8 E5000000 		.4byte	0xe5
 3449 0aac 95       		.byte	0x95
 3450 0aad 00       		.byte	0
 3451 0aae 24       		.uleb128 0x24
 3452 0aaf FE030000 		.4byte	.LASF144
 3453 0ab3 0A       		.byte	0xa
 3454 0ab4 24       		.byte	0x24
 3455 0ab5 9E0A0000 		.4byte	0xa9e
 3456 0ab9 05       		.uleb128 0x5
 3457 0aba 03       		.byte	0x3
 3458 0abb 00000000 		.4byte	data
 3459 0abf 24       		.uleb128 0x24
 3460 0ac0 67010000 		.4byte	.LASF145
 3461 0ac4 0B       		.byte	0xb
 3462 0ac5 1F       		.byte	0x1f
 3463 0ac6 81000000 		.4byte	0x81
 3464 0aca 05       		.uleb128 0x5
 3465 0acb 03       		.byte	0x3
 3466 0acc 00000000 		.4byte	modem_state
 3467 0ad0 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 77


 3468 0ad1 7A040000 		.4byte	.LASF146
 3469 0ad5 0B       		.byte	0xb
 3470 0ad6 62       		.byte	0x62
 3471 0ad7 BD000000 		.4byte	0xbd
 3472 0adb 05       		.uleb128 0x5
 3473 0adc 03       		.byte	0x3
 3474 0add 00000000 		.4byte	modem_start_time_stamp
 3475 0ae1 24       		.uleb128 0x24
 3476 0ae2 14040000 		.4byte	.LASF85
 3477 0ae6 0B       		.byte	0xb
 3478 0ae7 63       		.byte	0x63
 3479 0ae8 A9030000 		.4byte	0x3a9
 3480 0aec 05       		.uleb128 0x5
 3481 0aed 03       		.byte	0x3
 3482 0aee 00000000 		.4byte	modem_info
 3483 0af2 24       		.uleb128 0x24
 3484 0af3 24070000 		.4byte	.LASF147
 3485 0af7 0B       		.byte	0xb
 3486 0af8 64       		.byte	0x64
 3487 0af9 1D040000 		.4byte	0x41d
 3488 0afd 05       		.uleb128 0x5
 3489 0afe 03       		.byte	0x3
 3490 0aff 00000000 		.4byte	modem_stats
 3491 0b03 24       		.uleb128 0x24
 3492 0b04 4C050000 		.4byte	.LASF148
 3493 0b08 0B       		.byte	0xb
 3494 0b09 65       		.byte	0x65
 3495 0b0a 74040000 		.4byte	0x474
 3496 0b0e 05       		.uleb128 0x5
 3497 0b0f 03       		.byte	0x3
 3498 0b10 00000000 		.4byte	updatable_parameters
 3499 0b14 24       		.uleb128 0x24
 3500 0b15 91040000 		.4byte	.LASF149
 3501 0b19 0E       		.byte	0xe
 3502 0b1a 12       		.byte	0x12
 3503 0b1b 1B050000 		.4byte	0x51b
 3504 0b1f 05       		.uleb128 0x5
 3505 0b20 03       		.byte	0x3
 3506 0b21 00000000 		.4byte	inbox
 3507 0b25 07       		.uleb128 0x7
 3508 0b26 D7000000 		.4byte	0xd7
 3509 0b2a 360B0000 		.4byte	0xb36
 3510 0b2e 1F       		.uleb128 0x1f
 3511 0b2f E5000000 		.4byte	0xe5
 3512 0b33 0F27     		.2byte	0x270f
 3513 0b35 00       		.byte	0
 3514 0b36 24       		.uleb128 0x24
 3515 0b37 8C050000 		.4byte	.LASF150
 3516 0b3b 0C       		.byte	0xc
 3517 0b3c 18       		.byte	0x18
 3518 0b3d 250B0000 		.4byte	0xb25
 3519 0b41 05       		.uleb128 0x5
 3520 0b42 03       		.byte	0x3
 3521 0b43 00000000 		.4byte	http_request
 3522 0b47 24       		.uleb128 0x24
 3523 0b48 F1070000 		.4byte	.LASF151
 3524 0b4c 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 78


 3525 0b4d 19       		.byte	0x19
 3526 0b4e 250B0000 		.4byte	0xb25
 3527 0b52 05       		.uleb128 0x5
 3528 0b53 03       		.byte	0x3
 3529 0b54 00000000 		.4byte	http_body
 3530 0b58 24       		.uleb128 0x24
 3531 0b59 30070000 		.4byte	.LASF152
 3532 0b5d 0C       		.byte	0xc
 3533 0b5e 1A       		.byte	0x1a
 3534 0b5f 7F080000 		.4byte	0x87f
 3535 0b63 05       		.uleb128 0x5
 3536 0b64 03       		.byte	0x3
 3537 0b65 00000000 		.4byte	http_route
 3538 0b69 24       		.uleb128 0x24
 3539 0b6a 71060000 		.4byte	.LASF153
 3540 0b6e 0C       		.byte	0xc
 3541 0b6f 41       		.byte	0x41
 3542 0b70 EF040000 		.4byte	0x4ef
 3543 0b74 05       		.uleb128 0x5
 3544 0b75 03       		.byte	0x3
 3545 0b76 00000000 		.4byte	system_info
 3546 0b7a 24       		.uleb128 0x24
 3547 0b7b 11060000 		.4byte	.LASF154
 3548 0b7f 0C       		.byte	0xc
 3549 0b80 53       		.byte	0x53
 3550 0b81 2B050000 		.4byte	0x52b
 3551 0b85 05       		.uleb128 0x5
 3552 0b86 03       		.byte	0x3
 3553 0b87 00000000 		.4byte	system_settings
 3554 0b8b 24       		.uleb128 0x24
 3555 0b8c 73010000 		.4byte	.LASF155
 3556 0b90 0C       		.byte	0xc
 3557 0b91 6F       		.byte	0x6f
 3558 0b92 B8040000 		.4byte	0x4b8
 3559 0b96 05       		.uleb128 0x5
 3560 0b97 03       		.byte	0x3
 3561 0b98 00000000 		.4byte	alarmMeasure
 3562 0b9c 24       		.uleb128 0x24
 3563 0b9d B7010000 		.4byte	.LASF156
 3564 0ba1 0C       		.byte	0xc
 3565 0ba2 70       		.byte	0x70
 3566 0ba3 81000000 		.4byte	0x81
 3567 0ba7 05       		.uleb128 0x5
 3568 0ba8 03       		.byte	0x3
 3569 0ba9 00000000 		.4byte	timeToMeasure
 3570 0bad 24       		.uleb128 0x24
 3571 0bae 2F030000 		.4byte	.LASF157
 3572 0bb2 0C       		.byte	0xc
 3573 0bb3 71       		.byte	0x71
 3574 0bb4 B8040000 		.4byte	0x4b8
 3575 0bb8 05       		.uleb128 0x5
 3576 0bb9 03       		.byte	0x3
 3577 0bba 00000000 		.4byte	alarmSync
 3578 0bbe 24       		.uleb128 0x24
 3579 0bbf DD010000 		.4byte	.LASF158
 3580 0bc3 0C       		.byte	0xc
 3581 0bc4 72       		.byte	0x72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 79


 3582 0bc5 81000000 		.4byte	0x81
 3583 0bc9 05       		.uleb128 0x5
 3584 0bca 03       		.byte	0x3
 3585 0bcb 00000000 		.4byte	timeToSync
 3586 0bcf 24       		.uleb128 0x24
 3587 0bd0 1D050000 		.4byte	.LASF159
 3588 0bd4 0C       		.byte	0xc
 3589 0bd5 73       		.byte	0x73
 3590 0bd6 81000000 		.4byte	0x81
 3591 0bda 05       		.uleb128 0x5
 3592 0bdb 03       		.byte	0x3
 3593 0bdc 00000000 		.4byte	timeToSycnRemoteParams
 3594 0be0 25       		.uleb128 0x25
 3595 0be1 68657900 		.ascii	"hey\000"
 3596 0be5 0C       		.byte	0xc
 3597 0be6 74       		.byte	0x74
 3598 0be7 81000000 		.4byte	0x81
 3599 0beb 05       		.uleb128 0x5
 3600 0bec 03       		.byte	0x3
 3601 0bed 00000000 		.4byte	hey
 3602 0bf1 24       		.uleb128 0x24
 3603 0bf2 6E040000 		.4byte	.LASF160
 3604 0bf6 0C       		.byte	0xc
 3605 0bf7 77       		.byte	0x77
 3606 0bf8 B8040000 		.4byte	0x4b8
 3607 0bfc 05       		.uleb128 0x5
 3608 0bfd 03       		.byte	0x3
 3609 0bfe 00000000 		.4byte	alarmAppLED
 3610 0c02 24       		.uleb128 0x24
 3611 0c03 96020000 		.4byte	.LASF161
 3612 0c07 0C       		.byte	0xc
 3613 0c08 78       		.byte	0x78
 3614 0c09 81000000 		.4byte	0x81
 3615 0c0d 05       		.uleb128 0x5
 3616 0c0e 03       		.byte	0x3
 3617 0c0f 00000000 		.4byte	timeToAppLED
 3618 0c13 07       		.uleb128 0x7
 3619 0c14 D7000000 		.4byte	0xd7
 3620 0c18 230C0000 		.4byte	0xc23
 3621 0c1c 08       		.uleb128 0x8
 3622 0c1d E5000000 		.4byte	0xe5
 3623 0c21 1D       		.byte	0x1d
 3624 0c22 00       		.byte	0
 3625 0c23 24       		.uleb128 0x24
 3626 0c24 CB050000 		.4byte	.LASF162
 3627 0c28 01       		.byte	0x1
 3628 0c29 1D       		.byte	0x1d
 3629 0c2a 130C0000 		.4byte	0xc13
 3630 0c2e 05       		.uleb128 0x5
 3631 0c2f 03       		.byte	0x3
 3632 0c30 00000000 		.4byte	Data_fileName
 3633 0c34 24       		.uleb128 0x24
 3634 0c35 B3030000 		.4byte	.LASF92
 3635 0c39 01       		.byte	0x1
 3636 0c3a 1E       		.byte	0x1e
 3637 0c3b 81000000 		.4byte	0x81
 3638 0c3f 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 80


 3639 0c40 03       		.byte	0x3
 3640 0c41 00000000 		.4byte	try_counter
 3641 0c45 00       		.byte	0
 3642              		.section	.debug_abbrev,"",%progbits
 3643              	.Ldebug_abbrev0:
 3644 0000 01       		.uleb128 0x1
 3645 0001 11       		.uleb128 0x11
 3646 0002 01       		.byte	0x1
 3647 0003 25       		.uleb128 0x25
 3648 0004 0E       		.uleb128 0xe
 3649 0005 13       		.uleb128 0x13
 3650 0006 0B       		.uleb128 0xb
 3651 0007 03       		.uleb128 0x3
 3652 0008 0E       		.uleb128 0xe
 3653 0009 1B       		.uleb128 0x1b
 3654 000a 0E       		.uleb128 0xe
 3655 000b 55       		.uleb128 0x55
 3656 000c 17       		.uleb128 0x17
 3657 000d 11       		.uleb128 0x11
 3658 000e 01       		.uleb128 0x1
 3659 000f 10       		.uleb128 0x10
 3660 0010 17       		.uleb128 0x17
 3661 0011 00       		.byte	0
 3662 0012 00       		.byte	0
 3663 0013 02       		.uleb128 0x2
 3664 0014 24       		.uleb128 0x24
 3665 0015 00       		.byte	0
 3666 0016 0B       		.uleb128 0xb
 3667 0017 0B       		.uleb128 0xb
 3668 0018 3E       		.uleb128 0x3e
 3669 0019 0B       		.uleb128 0xb
 3670 001a 03       		.uleb128 0x3
 3671 001b 0E       		.uleb128 0xe
 3672 001c 00       		.byte	0
 3673 001d 00       		.byte	0
 3674 001e 03       		.uleb128 0x3
 3675 001f 16       		.uleb128 0x16
 3676 0020 00       		.byte	0
 3677 0021 03       		.uleb128 0x3
 3678 0022 0E       		.uleb128 0xe
 3679 0023 3A       		.uleb128 0x3a
 3680 0024 0B       		.uleb128 0xb
 3681 0025 3B       		.uleb128 0x3b
 3682 0026 0B       		.uleb128 0xb
 3683 0027 49       		.uleb128 0x49
 3684 0028 13       		.uleb128 0x13
 3685 0029 00       		.byte	0
 3686 002a 00       		.byte	0
 3687 002b 04       		.uleb128 0x4
 3688 002c 24       		.uleb128 0x24
 3689 002d 00       		.byte	0
 3690 002e 0B       		.uleb128 0xb
 3691 002f 0B       		.uleb128 0xb
 3692 0030 3E       		.uleb128 0x3e
 3693 0031 0B       		.uleb128 0xb
 3694 0032 03       		.uleb128 0x3
 3695 0033 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 81


 3696 0034 00       		.byte	0
 3697 0035 00       		.byte	0
 3698 0036 05       		.uleb128 0x5
 3699 0037 16       		.uleb128 0x16
 3700 0038 00       		.byte	0
 3701 0039 03       		.uleb128 0x3
 3702 003a 0E       		.uleb128 0xe
 3703 003b 3A       		.uleb128 0x3a
 3704 003c 0B       		.uleb128 0xb
 3705 003d 3B       		.uleb128 0x3b
 3706 003e 05       		.uleb128 0x5
 3707 003f 49       		.uleb128 0x49
 3708 0040 13       		.uleb128 0x13
 3709 0041 00       		.byte	0
 3710 0042 00       		.byte	0
 3711 0043 06       		.uleb128 0x6
 3712 0044 0F       		.uleb128 0xf
 3713 0045 00       		.byte	0
 3714 0046 0B       		.uleb128 0xb
 3715 0047 0B       		.uleb128 0xb
 3716 0048 49       		.uleb128 0x49
 3717 0049 13       		.uleb128 0x13
 3718 004a 00       		.byte	0
 3719 004b 00       		.byte	0
 3720 004c 07       		.uleb128 0x7
 3721 004d 01       		.uleb128 0x1
 3722 004e 01       		.byte	0x1
 3723 004f 49       		.uleb128 0x49
 3724 0050 13       		.uleb128 0x13
 3725 0051 01       		.uleb128 0x1
 3726 0052 13       		.uleb128 0x13
 3727 0053 00       		.byte	0
 3728 0054 00       		.byte	0
 3729 0055 08       		.uleb128 0x8
 3730 0056 21       		.uleb128 0x21
 3731 0057 00       		.byte	0
 3732 0058 49       		.uleb128 0x49
 3733 0059 13       		.uleb128 0x13
 3734 005a 2F       		.uleb128 0x2f
 3735 005b 0B       		.uleb128 0xb
 3736 005c 00       		.byte	0
 3737 005d 00       		.byte	0
 3738 005e 09       		.uleb128 0x9
 3739 005f 13       		.uleb128 0x13
 3740 0060 01       		.byte	0x1
 3741 0061 0B       		.uleb128 0xb
 3742 0062 0B       		.uleb128 0xb
 3743 0063 3A       		.uleb128 0x3a
 3744 0064 0B       		.uleb128 0xb
 3745 0065 3B       		.uleb128 0x3b
 3746 0066 0B       		.uleb128 0xb
 3747 0067 01       		.uleb128 0x1
 3748 0068 13       		.uleb128 0x13
 3749 0069 00       		.byte	0
 3750 006a 00       		.byte	0
 3751 006b 0A       		.uleb128 0xa
 3752 006c 0D       		.uleb128 0xd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 82


 3753 006d 00       		.byte	0
 3754 006e 03       		.uleb128 0x3
 3755 006f 08       		.uleb128 0x8
 3756 0070 3A       		.uleb128 0x3a
 3757 0071 0B       		.uleb128 0xb
 3758 0072 3B       		.uleb128 0x3b
 3759 0073 0B       		.uleb128 0xb
 3760 0074 49       		.uleb128 0x49
 3761 0075 13       		.uleb128 0x13
 3762 0076 38       		.uleb128 0x38
 3763 0077 0B       		.uleb128 0xb
 3764 0078 00       		.byte	0
 3765 0079 00       		.byte	0
 3766 007a 0B       		.uleb128 0xb
 3767 007b 0D       		.uleb128 0xd
 3768 007c 00       		.byte	0
 3769 007d 03       		.uleb128 0x3
 3770 007e 0E       		.uleb128 0xe
 3771 007f 3A       		.uleb128 0x3a
 3772 0080 0B       		.uleb128 0xb
 3773 0081 3B       		.uleb128 0x3b
 3774 0082 0B       		.uleb128 0xb
 3775 0083 49       		.uleb128 0x49
 3776 0084 13       		.uleb128 0x13
 3777 0085 38       		.uleb128 0x38
 3778 0086 0B       		.uleb128 0xb
 3779 0087 00       		.byte	0
 3780 0088 00       		.byte	0
 3781 0089 0C       		.uleb128 0xc
 3782 008a 35       		.uleb128 0x35
 3783 008b 00       		.byte	0
 3784 008c 49       		.uleb128 0x49
 3785 008d 13       		.uleb128 0x13
 3786 008e 00       		.byte	0
 3787 008f 00       		.byte	0
 3788 0090 0D       		.uleb128 0xd
 3789 0091 13       		.uleb128 0x13
 3790 0092 01       		.byte	0x1
 3791 0093 0B       		.uleb128 0xb
 3792 0094 05       		.uleb128 0x5
 3793 0095 3A       		.uleb128 0x3a
 3794 0096 0B       		.uleb128 0xb
 3795 0097 3B       		.uleb128 0x3b
 3796 0098 0B       		.uleb128 0xb
 3797 0099 01       		.uleb128 0x1
 3798 009a 13       		.uleb128 0x13
 3799 009b 00       		.byte	0
 3800 009c 00       		.byte	0
 3801 009d 0E       		.uleb128 0xe
 3802 009e 13       		.uleb128 0x13
 3803 009f 01       		.byte	0x1
 3804 00a0 03       		.uleb128 0x3
 3805 00a1 08       		.uleb128 0x8
 3806 00a2 0B       		.uleb128 0xb
 3807 00a3 0B       		.uleb128 0xb
 3808 00a4 3A       		.uleb128 0x3a
 3809 00a5 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 83


 3810 00a6 3B       		.uleb128 0x3b
 3811 00a7 0B       		.uleb128 0xb
 3812 00a8 01       		.uleb128 0x1
 3813 00a9 13       		.uleb128 0x13
 3814 00aa 00       		.byte	0
 3815 00ab 00       		.byte	0
 3816 00ac 0F       		.uleb128 0xf
 3817 00ad 2E       		.uleb128 0x2e
 3818 00ae 00       		.byte	0
 3819 00af 3F       		.uleb128 0x3f
 3820 00b0 19       		.uleb128 0x19
 3821 00b1 03       		.uleb128 0x3
 3822 00b2 0E       		.uleb128 0xe
 3823 00b3 3A       		.uleb128 0x3a
 3824 00b4 0B       		.uleb128 0xb
 3825 00b5 3B       		.uleb128 0x3b
 3826 00b6 0B       		.uleb128 0xb
 3827 00b7 27       		.uleb128 0x27
 3828 00b8 19       		.uleb128 0x19
 3829 00b9 11       		.uleb128 0x11
 3830 00ba 01       		.uleb128 0x1
 3831 00bb 12       		.uleb128 0x12
 3832 00bc 06       		.uleb128 0x6
 3833 00bd 40       		.uleb128 0x40
 3834 00be 18       		.uleb128 0x18
 3835 00bf 9642     		.uleb128 0x2116
 3836 00c1 19       		.uleb128 0x19
 3837 00c2 00       		.byte	0
 3838 00c3 00       		.byte	0
 3839 00c4 10       		.uleb128 0x10
 3840 00c5 2E       		.uleb128 0x2e
 3841 00c6 01       		.byte	0x1
 3842 00c7 3F       		.uleb128 0x3f
 3843 00c8 19       		.uleb128 0x19
 3844 00c9 03       		.uleb128 0x3
 3845 00ca 0E       		.uleb128 0xe
 3846 00cb 3A       		.uleb128 0x3a
 3847 00cc 0B       		.uleb128 0xb
 3848 00cd 3B       		.uleb128 0x3b
 3849 00ce 0B       		.uleb128 0xb
 3850 00cf 11       		.uleb128 0x11
 3851 00d0 01       		.uleb128 0x1
 3852 00d1 12       		.uleb128 0x12
 3853 00d2 06       		.uleb128 0x6
 3854 00d3 40       		.uleb128 0x40
 3855 00d4 18       		.uleb128 0x18
 3856 00d5 9642     		.uleb128 0x2116
 3857 00d7 19       		.uleb128 0x19
 3858 00d8 01       		.uleb128 0x1
 3859 00d9 13       		.uleb128 0x13
 3860 00da 00       		.byte	0
 3861 00db 00       		.byte	0
 3862 00dc 11       		.uleb128 0x11
 3863 00dd 34       		.uleb128 0x34
 3864 00de 00       		.byte	0
 3865 00df 03       		.uleb128 0x3
 3866 00e0 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 84


 3867 00e1 3A       		.uleb128 0x3a
 3868 00e2 0B       		.uleb128 0xb
 3869 00e3 3B       		.uleb128 0x3b
 3870 00e4 0B       		.uleb128 0xb
 3871 00e5 49       		.uleb128 0x49
 3872 00e6 13       		.uleb128 0x13
 3873 00e7 02       		.uleb128 0x2
 3874 00e8 18       		.uleb128 0x18
 3875 00e9 00       		.byte	0
 3876 00ea 00       		.byte	0
 3877 00eb 12       		.uleb128 0x12
 3878 00ec 2E       		.uleb128 0x2e
 3879 00ed 01       		.byte	0x1
 3880 00ee 3F       		.uleb128 0x3f
 3881 00ef 19       		.uleb128 0x19
 3882 00f0 03       		.uleb128 0x3
 3883 00f1 0E       		.uleb128 0xe
 3884 00f2 3A       		.uleb128 0x3a
 3885 00f3 0B       		.uleb128 0xb
 3886 00f4 3B       		.uleb128 0x3b
 3887 00f5 0B       		.uleb128 0xb
 3888 00f6 49       		.uleb128 0x49
 3889 00f7 13       		.uleb128 0x13
 3890 00f8 11       		.uleb128 0x11
 3891 00f9 01       		.uleb128 0x1
 3892 00fa 12       		.uleb128 0x12
 3893 00fb 06       		.uleb128 0x6
 3894 00fc 40       		.uleb128 0x40
 3895 00fd 18       		.uleb128 0x18
 3896 00fe 9642     		.uleb128 0x2116
 3897 0100 19       		.uleb128 0x19
 3898 0101 01       		.uleb128 0x1
 3899 0102 13       		.uleb128 0x13
 3900 0103 00       		.byte	0
 3901 0104 00       		.byte	0
 3902 0105 13       		.uleb128 0x13
 3903 0106 2E       		.uleb128 0x2e
 3904 0107 00       		.byte	0
 3905 0108 3F       		.uleb128 0x3f
 3906 0109 19       		.uleb128 0x19
 3907 010a 03       		.uleb128 0x3
 3908 010b 0E       		.uleb128 0xe
 3909 010c 3A       		.uleb128 0x3a
 3910 010d 0B       		.uleb128 0xb
 3911 010e 3B       		.uleb128 0x3b
 3912 010f 0B       		.uleb128 0xb
 3913 0110 11       		.uleb128 0x11
 3914 0111 01       		.uleb128 0x1
 3915 0112 12       		.uleb128 0x12
 3916 0113 06       		.uleb128 0x6
 3917 0114 40       		.uleb128 0x40
 3918 0115 18       		.uleb128 0x18
 3919 0116 9642     		.uleb128 0x2116
 3920 0118 19       		.uleb128 0x19
 3921 0119 00       		.byte	0
 3922 011a 00       		.byte	0
 3923 011b 14       		.uleb128 0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 85


 3924 011c 2E       		.uleb128 0x2e
 3925 011d 01       		.byte	0x1
 3926 011e 3F       		.uleb128 0x3f
 3927 011f 19       		.uleb128 0x19
 3928 0120 03       		.uleb128 0x3
 3929 0121 0E       		.uleb128 0xe
 3930 0122 3A       		.uleb128 0x3a
 3931 0123 0B       		.uleb128 0xb
 3932 0124 3B       		.uleb128 0x3b
 3933 0125 0B       		.uleb128 0xb
 3934 0126 27       		.uleb128 0x27
 3935 0127 19       		.uleb128 0x19
 3936 0128 11       		.uleb128 0x11
 3937 0129 01       		.uleb128 0x1
 3938 012a 12       		.uleb128 0x12
 3939 012b 06       		.uleb128 0x6
 3940 012c 40       		.uleb128 0x40
 3941 012d 18       		.uleb128 0x18
 3942 012e 9642     		.uleb128 0x2116
 3943 0130 19       		.uleb128 0x19
 3944 0131 01       		.uleb128 0x1
 3945 0132 13       		.uleb128 0x13
 3946 0133 00       		.byte	0
 3947 0134 00       		.byte	0
 3948 0135 15       		.uleb128 0x15
 3949 0136 05       		.uleb128 0x5
 3950 0137 00       		.byte	0
 3951 0138 03       		.uleb128 0x3
 3952 0139 0E       		.uleb128 0xe
 3953 013a 3A       		.uleb128 0x3a
 3954 013b 0B       		.uleb128 0xb
 3955 013c 3B       		.uleb128 0x3b
 3956 013d 0B       		.uleb128 0xb
 3957 013e 49       		.uleb128 0x49
 3958 013f 13       		.uleb128 0x13
 3959 0140 02       		.uleb128 0x2
 3960 0141 18       		.uleb128 0x18
 3961 0142 00       		.byte	0
 3962 0143 00       		.byte	0
 3963 0144 16       		.uleb128 0x16
 3964 0145 2E       		.uleb128 0x2e
 3965 0146 01       		.byte	0x1
 3966 0147 3F       		.uleb128 0x3f
 3967 0148 19       		.uleb128 0x19
 3968 0149 03       		.uleb128 0x3
 3969 014a 0E       		.uleb128 0xe
 3970 014b 3A       		.uleb128 0x3a
 3971 014c 0B       		.uleb128 0xb
 3972 014d 3B       		.uleb128 0x3b
 3973 014e 0B       		.uleb128 0xb
 3974 014f 27       		.uleb128 0x27
 3975 0150 19       		.uleb128 0x19
 3976 0151 49       		.uleb128 0x49
 3977 0152 13       		.uleb128 0x13
 3978 0153 11       		.uleb128 0x11
 3979 0154 01       		.uleb128 0x1
 3980 0155 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 86


 3981 0156 06       		.uleb128 0x6
 3982 0157 40       		.uleb128 0x40
 3983 0158 18       		.uleb128 0x18
 3984 0159 9642     		.uleb128 0x2116
 3985 015b 19       		.uleb128 0x19
 3986 015c 01       		.uleb128 0x1
 3987 015d 13       		.uleb128 0x13
 3988 015e 00       		.byte	0
 3989 015f 00       		.byte	0
 3990 0160 17       		.uleb128 0x17
 3991 0161 2E       		.uleb128 0x2e
 3992 0162 01       		.byte	0x1
 3993 0163 3F       		.uleb128 0x3f
 3994 0164 19       		.uleb128 0x19
 3995 0165 03       		.uleb128 0x3
 3996 0166 0E       		.uleb128 0xe
 3997 0167 3A       		.uleb128 0x3a
 3998 0168 0B       		.uleb128 0xb
 3999 0169 3B       		.uleb128 0x3b
 4000 016a 0B       		.uleb128 0xb
 4001 016b 27       		.uleb128 0x27
 4002 016c 19       		.uleb128 0x19
 4003 016d 11       		.uleb128 0x11
 4004 016e 01       		.uleb128 0x1
 4005 016f 12       		.uleb128 0x12
 4006 0170 06       		.uleb128 0x6
 4007 0171 40       		.uleb128 0x40
 4008 0172 18       		.uleb128 0x18
 4009 0173 9742     		.uleb128 0x2117
 4010 0175 19       		.uleb128 0x19
 4011 0176 01       		.uleb128 0x1
 4012 0177 13       		.uleb128 0x13
 4013 0178 00       		.byte	0
 4014 0179 00       		.byte	0
 4015 017a 18       		.uleb128 0x18
 4016 017b 2E       		.uleb128 0x2e
 4017 017c 01       		.byte	0x1
 4018 017d 3F       		.uleb128 0x3f
 4019 017e 19       		.uleb128 0x19
 4020 017f 03       		.uleb128 0x3
 4021 0180 0E       		.uleb128 0xe
 4022 0181 3A       		.uleb128 0x3a
 4023 0182 0B       		.uleb128 0xb
 4024 0183 3B       		.uleb128 0x3b
 4025 0184 0B       		.uleb128 0xb
 4026 0185 27       		.uleb128 0x27
 4027 0186 19       		.uleb128 0x19
 4028 0187 49       		.uleb128 0x49
 4029 0188 13       		.uleb128 0x13
 4030 0189 11       		.uleb128 0x11
 4031 018a 01       		.uleb128 0x1
 4032 018b 12       		.uleb128 0x12
 4033 018c 06       		.uleb128 0x6
 4034 018d 40       		.uleb128 0x40
 4035 018e 18       		.uleb128 0x18
 4036 018f 9742     		.uleb128 0x2117
 4037 0191 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 87


 4038 0192 01       		.uleb128 0x1
 4039 0193 13       		.uleb128 0x13
 4040 0194 00       		.byte	0
 4041 0195 00       		.byte	0
 4042 0196 19       		.uleb128 0x19
 4043 0197 2E       		.uleb128 0x2e
 4044 0198 01       		.byte	0x1
 4045 0199 3F       		.uleb128 0x3f
 4046 019a 19       		.uleb128 0x19
 4047 019b 03       		.uleb128 0x3
 4048 019c 0E       		.uleb128 0xe
 4049 019d 3A       		.uleb128 0x3a
 4050 019e 0B       		.uleb128 0xb
 4051 019f 3B       		.uleb128 0x3b
 4052 01a0 05       		.uleb128 0x5
 4053 01a1 11       		.uleb128 0x11
 4054 01a2 01       		.uleb128 0x1
 4055 01a3 12       		.uleb128 0x12
 4056 01a4 06       		.uleb128 0x6
 4057 01a5 40       		.uleb128 0x40
 4058 01a6 18       		.uleb128 0x18
 4059 01a7 9642     		.uleb128 0x2116
 4060 01a9 19       		.uleb128 0x19
 4061 01aa 01       		.uleb128 0x1
 4062 01ab 13       		.uleb128 0x13
 4063 01ac 00       		.byte	0
 4064 01ad 00       		.byte	0
 4065 01ae 1A       		.uleb128 0x1a
 4066 01af 34       		.uleb128 0x34
 4067 01b0 00       		.byte	0
 4068 01b1 03       		.uleb128 0x3
 4069 01b2 0E       		.uleb128 0xe
 4070 01b3 3A       		.uleb128 0x3a
 4071 01b4 0B       		.uleb128 0xb
 4072 01b5 3B       		.uleb128 0x3b
 4073 01b6 05       		.uleb128 0x5
 4074 01b7 49       		.uleb128 0x49
 4075 01b8 13       		.uleb128 0x13
 4076 01b9 02       		.uleb128 0x2
 4077 01ba 18       		.uleb128 0x18
 4078 01bb 00       		.byte	0
 4079 01bc 00       		.byte	0
 4080 01bd 1B       		.uleb128 0x1b
 4081 01be 2E       		.uleb128 0x2e
 4082 01bf 00       		.byte	0
 4083 01c0 3F       		.uleb128 0x3f
 4084 01c1 19       		.uleb128 0x19
 4085 01c2 03       		.uleb128 0x3
 4086 01c3 0E       		.uleb128 0xe
 4087 01c4 3A       		.uleb128 0x3a
 4088 01c5 0B       		.uleb128 0xb
 4089 01c6 3B       		.uleb128 0x3b
 4090 01c7 05       		.uleb128 0x5
 4091 01c8 27       		.uleb128 0x27
 4092 01c9 19       		.uleb128 0x19
 4093 01ca 49       		.uleb128 0x49
 4094 01cb 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 88


 4095 01cc 11       		.uleb128 0x11
 4096 01cd 01       		.uleb128 0x1
 4097 01ce 12       		.uleb128 0x12
 4098 01cf 06       		.uleb128 0x6
 4099 01d0 40       		.uleb128 0x40
 4100 01d1 18       		.uleb128 0x18
 4101 01d2 9642     		.uleb128 0x2116
 4102 01d4 19       		.uleb128 0x19
 4103 01d5 00       		.byte	0
 4104 01d6 00       		.byte	0
 4105 01d7 1C       		.uleb128 0x1c
 4106 01d8 2E       		.uleb128 0x2e
 4107 01d9 01       		.byte	0x1
 4108 01da 3F       		.uleb128 0x3f
 4109 01db 19       		.uleb128 0x19
 4110 01dc 03       		.uleb128 0x3
 4111 01dd 0E       		.uleb128 0xe
 4112 01de 3A       		.uleb128 0x3a
 4113 01df 0B       		.uleb128 0xb
 4114 01e0 3B       		.uleb128 0x3b
 4115 01e1 05       		.uleb128 0x5
 4116 01e2 49       		.uleb128 0x49
 4117 01e3 13       		.uleb128 0x13
 4118 01e4 11       		.uleb128 0x11
 4119 01e5 01       		.uleb128 0x1
 4120 01e6 12       		.uleb128 0x12
 4121 01e7 06       		.uleb128 0x6
 4122 01e8 40       		.uleb128 0x40
 4123 01e9 18       		.uleb128 0x18
 4124 01ea 9642     		.uleb128 0x2116
 4125 01ec 19       		.uleb128 0x19
 4126 01ed 01       		.uleb128 0x1
 4127 01ee 13       		.uleb128 0x13
 4128 01ef 00       		.byte	0
 4129 01f0 00       		.byte	0
 4130 01f1 1D       		.uleb128 0x1d
 4131 01f2 0B       		.uleb128 0xb
 4132 01f3 01       		.byte	0x1
 4133 01f4 11       		.uleb128 0x11
 4134 01f5 01       		.uleb128 0x1
 4135 01f6 12       		.uleb128 0x12
 4136 01f7 06       		.uleb128 0x6
 4137 01f8 00       		.byte	0
 4138 01f9 00       		.byte	0
 4139 01fa 1E       		.uleb128 0x1e
 4140 01fb 0B       		.uleb128 0xb
 4141 01fc 01       		.byte	0x1
 4142 01fd 11       		.uleb128 0x11
 4143 01fe 01       		.uleb128 0x1
 4144 01ff 12       		.uleb128 0x12
 4145 0200 06       		.uleb128 0x6
 4146 0201 01       		.uleb128 0x1
 4147 0202 13       		.uleb128 0x13
 4148 0203 00       		.byte	0
 4149 0204 00       		.byte	0
 4150 0205 1F       		.uleb128 0x1f
 4151 0206 21       		.uleb128 0x21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 89


 4152 0207 00       		.byte	0
 4153 0208 49       		.uleb128 0x49
 4154 0209 13       		.uleb128 0x13
 4155 020a 2F       		.uleb128 0x2f
 4156 020b 05       		.uleb128 0x5
 4157 020c 00       		.byte	0
 4158 020d 00       		.byte	0
 4159 020e 20       		.uleb128 0x20
 4160 020f 2E       		.uleb128 0x2e
 4161 0210 01       		.byte	0x1
 4162 0211 3F       		.uleb128 0x3f
 4163 0212 19       		.uleb128 0x19
 4164 0213 03       		.uleb128 0x3
 4165 0214 0E       		.uleb128 0xe
 4166 0215 3A       		.uleb128 0x3a
 4167 0216 0B       		.uleb128 0xb
 4168 0217 3B       		.uleb128 0x3b
 4169 0218 05       		.uleb128 0x5
 4170 0219 27       		.uleb128 0x27
 4171 021a 19       		.uleb128 0x19
 4172 021b 49       		.uleb128 0x49
 4173 021c 13       		.uleb128 0x13
 4174 021d 11       		.uleb128 0x11
 4175 021e 01       		.uleb128 0x1
 4176 021f 12       		.uleb128 0x12
 4177 0220 06       		.uleb128 0x6
 4178 0221 40       		.uleb128 0x40
 4179 0222 18       		.uleb128 0x18
 4180 0223 9642     		.uleb128 0x2116
 4181 0225 19       		.uleb128 0x19
 4182 0226 01       		.uleb128 0x1
 4183 0227 13       		.uleb128 0x13
 4184 0228 00       		.byte	0
 4185 0229 00       		.byte	0
 4186 022a 21       		.uleb128 0x21
 4187 022b 05       		.uleb128 0x5
 4188 022c 00       		.byte	0
 4189 022d 03       		.uleb128 0x3
 4190 022e 0E       		.uleb128 0xe
 4191 022f 3A       		.uleb128 0x3a
 4192 0230 0B       		.uleb128 0xb
 4193 0231 3B       		.uleb128 0x3b
 4194 0232 05       		.uleb128 0x5
 4195 0233 49       		.uleb128 0x49
 4196 0234 13       		.uleb128 0x13
 4197 0235 02       		.uleb128 0x2
 4198 0236 18       		.uleb128 0x18
 4199 0237 00       		.byte	0
 4200 0238 00       		.byte	0
 4201 0239 22       		.uleb128 0x22
 4202 023a 34       		.uleb128 0x34
 4203 023b 00       		.byte	0
 4204 023c 03       		.uleb128 0x3
 4205 023d 08       		.uleb128 0x8
 4206 023e 3A       		.uleb128 0x3a
 4207 023f 0B       		.uleb128 0xb
 4208 0240 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 90


 4209 0241 05       		.uleb128 0x5
 4210 0242 49       		.uleb128 0x49
 4211 0243 13       		.uleb128 0x13
 4212 0244 02       		.uleb128 0x2
 4213 0245 18       		.uleb128 0x18
 4214 0246 00       		.byte	0
 4215 0247 00       		.byte	0
 4216 0248 23       		.uleb128 0x23
 4217 0249 34       		.uleb128 0x34
 4218 024a 00       		.byte	0
 4219 024b 03       		.uleb128 0x3
 4220 024c 0E       		.uleb128 0xe
 4221 024d 3A       		.uleb128 0x3a
 4222 024e 0B       		.uleb128 0xb
 4223 024f 3B       		.uleb128 0x3b
 4224 0250 05       		.uleb128 0x5
 4225 0251 49       		.uleb128 0x49
 4226 0252 13       		.uleb128 0x13
 4227 0253 3F       		.uleb128 0x3f
 4228 0254 19       		.uleb128 0x19
 4229 0255 3C       		.uleb128 0x3c
 4230 0256 19       		.uleb128 0x19
 4231 0257 00       		.byte	0
 4232 0258 00       		.byte	0
 4233 0259 24       		.uleb128 0x24
 4234 025a 34       		.uleb128 0x34
 4235 025b 00       		.byte	0
 4236 025c 03       		.uleb128 0x3
 4237 025d 0E       		.uleb128 0xe
 4238 025e 3A       		.uleb128 0x3a
 4239 025f 0B       		.uleb128 0xb
 4240 0260 3B       		.uleb128 0x3b
 4241 0261 0B       		.uleb128 0xb
 4242 0262 49       		.uleb128 0x49
 4243 0263 13       		.uleb128 0x13
 4244 0264 3F       		.uleb128 0x3f
 4245 0265 19       		.uleb128 0x19
 4246 0266 02       		.uleb128 0x2
 4247 0267 18       		.uleb128 0x18
 4248 0268 00       		.byte	0
 4249 0269 00       		.byte	0
 4250 026a 25       		.uleb128 0x25
 4251 026b 34       		.uleb128 0x34
 4252 026c 00       		.byte	0
 4253 026d 03       		.uleb128 0x3
 4254 026e 08       		.uleb128 0x8
 4255 026f 3A       		.uleb128 0x3a
 4256 0270 0B       		.uleb128 0xb
 4257 0271 3B       		.uleb128 0x3b
 4258 0272 0B       		.uleb128 0xb
 4259 0273 49       		.uleb128 0x49
 4260 0274 13       		.uleb128 0x13
 4261 0275 3F       		.uleb128 0x3f
 4262 0276 19       		.uleb128 0x19
 4263 0277 02       		.uleb128 0x2
 4264 0278 18       		.uleb128 0x18
 4265 0279 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 91


 4266 027a 00       		.byte	0
 4267 027b 00       		.byte	0
 4268              		.section	.debug_aranges,"",%progbits
 4269 0000 8C000000 		.4byte	0x8c
 4270 0004 0200     		.2byte	0x2
 4271 0006 00000000 		.4byte	.Ldebug_info0
 4272 000a 04       		.byte	0x4
 4273 000b 00       		.byte	0
 4274 000c 0000     		.2byte	0
 4275 000e 0000     		.2byte	0
 4276 0010 00000000 		.4byte	.LFB64
 4277 0014 0C000000 		.4byte	.LFE64-.LFB64
 4278 0018 00000000 		.4byte	.LFB65
 4279 001c 1C010000 		.4byte	.LFE65-.LFB65
 4280 0020 00000000 		.4byte	.LFB66
 4281 0024 7C000000 		.4byte	.LFE66-.LFB66
 4282 0028 00000000 		.4byte	.LFB67
 4283 002c 2A000000 		.4byte	.LFE67-.LFB67
 4284 0030 00000000 		.4byte	.LFB68
 4285 0034 6C000000 		.4byte	.LFE68-.LFB68
 4286 0038 00000000 		.4byte	.LFB69
 4287 003c 48000000 		.4byte	.LFE69-.LFB69
 4288 0040 00000000 		.4byte	.LFB70
 4289 0044 1E000000 		.4byte	.LFE70-.LFB70
 4290 0048 00000000 		.4byte	.LFB71
 4291 004c 46000000 		.4byte	.LFE71-.LFB71
 4292 0050 00000000 		.4byte	.LFB72
 4293 0054 04010000 		.4byte	.LFE72-.LFB72
 4294 0058 00000000 		.4byte	.LFB73
 4295 005c 1E000000 		.4byte	.LFE73-.LFB73
 4296 0060 00000000 		.4byte	.LFB74
 4297 0064 5C040000 		.4byte	.LFE74-.LFB74
 4298 0068 00000000 		.4byte	.LFB75
 4299 006c 44000000 		.4byte	.LFE75-.LFB75
 4300 0070 00000000 		.4byte	.LFB76
 4301 0074 74020000 		.4byte	.LFE76-.LFB76
 4302 0078 00000000 		.4byte	.LFB77
 4303 007c 74000000 		.4byte	.LFE77-.LFB77
 4304 0080 00000000 		.4byte	.LFB78
 4305 0084 38010000 		.4byte	.LFE78-.LFB78
 4306 0088 00000000 		.4byte	0
 4307 008c 00000000 		.4byte	0
 4308              		.section	.debug_ranges,"",%progbits
 4309              	.Ldebug_ranges0:
 4310 0000 00000000 		.4byte	.LFB64
 4311 0004 0C000000 		.4byte	.LFE64
 4312 0008 00000000 		.4byte	.LFB65
 4313 000c 1C010000 		.4byte	.LFE65
 4314 0010 00000000 		.4byte	.LFB66
 4315 0014 7C000000 		.4byte	.LFE66
 4316 0018 00000000 		.4byte	.LFB67
 4317 001c 2A000000 		.4byte	.LFE67
 4318 0020 00000000 		.4byte	.LFB68
 4319 0024 6C000000 		.4byte	.LFE68
 4320 0028 00000000 		.4byte	.LFB69
 4321 002c 48000000 		.4byte	.LFE69
 4322 0030 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 92


 4323 0034 1E000000 		.4byte	.LFE70
 4324 0038 00000000 		.4byte	.LFB71
 4325 003c 46000000 		.4byte	.LFE71
 4326 0040 00000000 		.4byte	.LFB72
 4327 0044 04010000 		.4byte	.LFE72
 4328 0048 00000000 		.4byte	.LFB73
 4329 004c 1E000000 		.4byte	.LFE73
 4330 0050 00000000 		.4byte	.LFB74
 4331 0054 5C040000 		.4byte	.LFE74
 4332 0058 00000000 		.4byte	.LFB75
 4333 005c 44000000 		.4byte	.LFE75
 4334 0060 00000000 		.4byte	.LFB76
 4335 0064 74020000 		.4byte	.LFE76
 4336 0068 00000000 		.4byte	.LFB77
 4337 006c 74000000 		.4byte	.LFE77
 4338 0070 00000000 		.4byte	.LFB78
 4339 0074 38010000 		.4byte	.LFE78
 4340 0078 00000000 		.4byte	0
 4341 007c 00000000 		.4byte	0
 4342              		.section	.debug_line,"",%progbits
 4343              	.Ldebug_line0:
 4344 0000 30040000 		.section	.debug_str,"MS",%progbits,1
 4344      02002802 
 4344      00000201 
 4344      FB0E0D00 
 4344      01010101 
 4345              	.LASF109:
 4346 0000 745F6D6F 		.ascii	"t_modem\000"
 4346      64656D00 
 4347              	.LASF12:
 4348 0008 75696E74 		.ascii	"uint16\000"
 4348      313600
 4349              	.LASF51:
 4350 000f 746D5F68 		.ascii	"tm_hour\000"
 4350      6F757200 
 4351              	.LASF36:
 4352 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4352      696E7661 
 4352      6C69645F 
 4352      72656164 
 4352      696E6773 
 4353              	.LASF165:
 4354 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4354      73657273 
 4354      5C64616E 
 4354      747A5C44 
 4354      6F63756D 
 4355 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4355      2E637964 
 4355      736E00
 4356              	.LASF141:
 4357 0064 62756666 		.ascii	"buffer_overflow\000"
 4357      65725F6F 
 4357      76657266 
 4357      6C6F7700 
 4358              	.LASF139:
 4359 0074 66696C65 		.ascii	"fileName\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 93


 4359      4E616D65 
 4359      00
 4360              	.LASF0:
 4361 007d 7369676E 		.ascii	"signed char\000"
 4361      65642063 
 4361      68617200 
 4362              	.LASF83:
 4363 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4363      74446F77 
 4363      6E526573 
 4363      6574436F 
 4363      6E646974 
 4364              	.LASF166:
 4365 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4365      75705F49 
 4365      535200
 4366              	.LASF163:
 4367 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4367      43313120 
 4367      352E342E 
 4367      31203230 
 4367      31363036 
 4368 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4368      20726576 
 4368      6973696F 
 4368      6E203233 
 4368      37373135 
 4369 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4369      66756E63 
 4369      74696F6E 
 4369      2D736563 
 4369      74696F6E 
 4370              	.LASF107:
 4371 013a 745F7072 		.ascii	"t_pressure\000"
 4371      65737375 
 4371      726500
 4372              	.LASF26:
 4373 0145 4D6F6E74 		.ascii	"Month\000"
 4373      6800
 4374              	.LASF7:
 4375 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4375      206C6F6E 
 4375      6720756E 
 4375      7369676E 
 4375      65642069 
 4376              	.LASF22:
 4377 0162 486F7572 		.ascii	"Hour\000"
 4377      00
 4378              	.LASF145:
 4379 0167 6D6F6465 		.ascii	"modem_state\000"
 4379      6D5F7374 
 4379      61746500 
 4380              	.LASF155:
 4381 0173 616C6172 		.ascii	"alarmMeasure\000"
 4381      6D4D6561 
 4381      73757265 
 4381      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 94


 4382              	.LASF140:
 4383 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4383      52784275 
 4383      66666572 
 4383      00
 4384              	.LASF105:
 4385 018d 745F6C65 		.ascii	"t_level_sensor\000"
 4385      76656C5F 
 4385      73656E73 
 4385      6F7200
 4386              	.LASF6:
 4387 019c 6C6F6E67 		.ascii	"long long int\000"
 4387      206C6F6E 
 4387      6720696E 
 4387      7400
 4388              	.LASF118:
 4389 01aa 7061636B 		.ascii	"packets\000"
 4389      65747300 
 4390              	.LASF67:
 4391 01b2 65636E6F 		.ascii	"ecno\000"
 4391      00
 4392              	.LASF156:
 4393 01b7 74696D65 		.ascii	"timeToMeasure\000"
 4393      546F4D65 
 4393      61737572 
 4393      6500
 4394              	.LASF70:
 4395 01c5 74696D65 		.ascii	"time_to_network_connect\000"
 4395      5F746F5F 
 4395      6E657477 
 4395      6F726B5F 
 4395      636F6E6E 
 4396              	.LASF158:
 4397 01dd 74696D65 		.ascii	"timeToSync\000"
 4397      546F5379 
 4397      6E6300
 4398              	.LASF39:
 4399 01e8 766F6C74 		.ascii	"voltage_solar\000"
 4399      6167655F 
 4399      736F6C61 
 4399      7200
 4400              	.LASF40:
 4401 01f6 766F6C74 		.ascii	"voltage_charge_current\000"
 4401      6167655F 
 4401      63686172 
 4401      67655F63 
 4401      75727265 
 4402              	.LASF138:
 4403 020d 75706772 		.ascii	"upgrade_status\000"
 4403      6164655F 
 4403      73746174 
 4403      757300
 4404              	.LASF121:
 4405 021c 635F6461 		.ascii	"c_data_count_sent\000"
 4405      74615F63 
 4405      6F756E74 
 4405      5F73656E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 95


 4405      7400
 4406              	.LASF64:
 4407 022e 6D6F6465 		.ascii	"modem_info_t\000"
 4407      6D5F696E 
 4407      666F5F74 
 4407      00
 4408              	.LASF65:
 4409 023b 72786C65 		.ascii	"rxlev\000"
 4409      7600
 4410              	.LASF4:
 4411 0241 6C6F6E67 		.ascii	"long int\000"
 4411      20696E74 
 4411      00
 4412              	.LASF71:
 4413 024a 74696D65 		.ascii	"time_to_acquire_ip\000"
 4413      5F746F5F 
 4413      61637175 
 4413      6972655F 
 4413      697000
 4414              	.LASF84:
 4415 025d 616C6172 		.ascii	"alarm\000"
 4415      6D00
 4416              	.LASF45:
 4417 0263 70726573 		.ascii	"pressure_voltage_off\000"
 4417      73757265 
 4417      5F766F6C 
 4417      74616765 
 4417      5F6F6666 
 4418              	.LASF11:
 4419 0278 75696E74 		.ascii	"uint8\000"
 4419      3800
 4420              	.LASF113:
 4421 027e 635F7472 		.ascii	"c_try_counter\000"
 4421      795F636F 
 4421      756E7465 
 4421      7200
 4422              	.LASF124:
 4423 028c 73656E64 		.ascii	"send_time\000"
 4423      5F74696D 
 4423      6500
 4424              	.LASF161:
 4425 0296 74696D65 		.ascii	"timeToAppLED\000"
 4425      546F4170 
 4425      704C4544 
 4425      00
 4426              	.LASF16:
 4427 02a3 696E7433 		.ascii	"int32\000"
 4427      3200
 4428              	.LASF73:
 4429 02a9 6E6F6465 		.ascii	"node_type\000"
 4429      5F747970 
 4429      6500
 4430              	.LASF110:
 4431 02b3 73796E63 		.ascii	"syncData\000"
 4431      44617461 
 4431      00
 4432              	.LASF119:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 96


 4433 02bc 6E657477 		.ascii	"network_time\000"
 4433      6F726B5F 
 4433      74696D65 
 4433      00
 4434              	.LASF13:
 4435 02c9 75696E74 		.ascii	"uint32\000"
 4435      333200
 4436              	.LASF62:
 4437 02d0 6D6F6465 		.ascii	"model_id\000"
 4437      6C5F6964 
 4437      00
 4438              	.LASF33:
 4439 02d9 616C6C5F 		.ascii	"all_level_readings\000"
 4439      6C657665 
 4439      6C5F7265 
 4439      6164696E 
 4439      677300
 4440              	.LASF80:
 4441 02ec 636F756E 		.ascii	"countDownValue\000"
 4441      74446F77 
 4441      6E56616C 
 4441      756500
 4442              	.LASF134:
 4443 02fb 75706772 		.ascii	"upgraded\000"
 4443      61646564 
 4443      00
 4444              	.LASF53:
 4445 0304 746D5F6D 		.ascii	"tm_mon\000"
 4445      6F6E00
 4446              	.LASF77:
 4447 030b 64656275 		.ascii	"debug_level\000"
 4447      675F6C65 
 4447      76656C00 
 4448              	.LASF136:
 4449 0317 706F7274 		.ascii	"port\000"
 4449      00
 4450              	.LASF58:
 4451 031c 76616C75 		.ascii	"value\000"
 4451      6500
 4452              	.LASF135:
 4453 0322 686F7374 		.ascii	"host\000"
 4453      00
 4454              	.LASF54:
 4455 0327 746D5F79 		.ascii	"tm_year\000"
 4455      65617200 
 4456              	.LASF157:
 4457 032f 616C6172 		.ascii	"alarmSync\000"
 4457      6D53796E 
 4457      6300
 4458              	.LASF44:
 4459 0339 70726573 		.ascii	"pressure_voltage_on\000"
 4459      73757265 
 4459      5F766F6C 
 4459      74616765 
 4459      5F6F6E00 
 4460              	.LASF8:
 4461 034d 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 97


 4461      676E6564 
 4461      20696E74 
 4461      00
 4462              	.LASF132:
 4463 035a 73657454 		.ascii	"setTime\000"
 4463      696D6500 
 4464              	.LASF60:
 4465 0362 6B65795F 		.ascii	"key_value_t\000"
 4465      76616C75 
 4465      655F7400 
 4466              	.LASF95:
 4467 036e 41796F49 		.ascii	"AyoItsTime\000"
 4467      74735469 
 4467      6D6500
 4468              	.LASF35:
 4469 0379 6E756D5F 		.ascii	"num_valid_readings\000"
 4469      76616C69 
 4469      645F7265 
 4469      6164696E 
 4469      677300
 4470              	.LASF123:
 4471 038c 68747470 		.ascii	"http_chunk\000"
 4471      5F636875 
 4471      6E6B00
 4472              	.LASF129:
 4473 0397 6D5F766F 		.ascii	"m_voltage\000"
 4473      6C746167 
 4473      6500
 4474              	.LASF5:
 4475 03a1 6C6F6E67 		.ascii	"long unsigned int\000"
 4475      20756E73 
 4475      69676E65 
 4475      6420696E 
 4475      7400
 4476              	.LASF92:
 4477 03b3 7472795F 		.ascii	"try_counter\000"
 4477      636F756E 
 4477      74657200 
 4478              	.LASF114:
 4479 03bf 64617461 		.ascii	"data_count_desired\000"
 4479      5F636F75 
 4479      6E745F64 
 4479      65736972 
 4479      656400
 4480              	.LASF38:
 4481 03d2 766F6C74 		.ascii	"voltage_battery\000"
 4481      6167655F 
 4481      62617474 
 4481      65727900 
 4482              	.LASF24:
 4483 03e2 4461794F 		.ascii	"DayOfMonth\000"
 4483      664D6F6E 
 4483      746800
 4484              	.LASF127:
 4485 03ed 6D616B65 		.ascii	"makeMeasurements\000"
 4485      4D656173 
 4485      7572656D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 98


 4485      656E7473 
 4485      00
 4486              	.LASF144:
 4487 03fe 64617461 		.ascii	"data\000"
 4487      00
 4488              	.LASF89:
 4489 0403 65705F70 		.ascii	"ep_port\000"
 4489      6F727400 
 4490              	.LASF57:
 4491 040b 746D5F69 		.ascii	"tm_isdst\000"
 4491      73647374 
 4491      00
 4492              	.LASF85:
 4493 0414 6D6F6465 		.ascii	"modem_info\000"
 4493      6D5F696E 
 4493      666F00
 4494              	.LASF88:
 4495 041f 65705F68 		.ascii	"ep_host\000"
 4495      6F737400 
 4496              	.LASF14:
 4497 0427 696E7438 		.ascii	"int8\000"
 4497      00
 4498              	.LASF94:
 4499 042c 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4499      576F726B 
 4499      576F726B 
 4499      576F726B 
 4499      576F726B 
 4500              	.LASF115:
 4501 0445 635F6461 		.ascii	"c_data_count_desired\000"
 4501      74615F63 
 4501      6F756E74 
 4501      5F646573 
 4501      69726564 
 4502              	.LASF108:
 4503 045a 745F7364 		.ascii	"t_sd_card\000"
 4503      5F636172 
 4503      6400
 4504              	.LASF2:
 4505 0464 73686F72 		.ascii	"short int\000"
 4505      7420696E 
 4505      7400
 4506              	.LASF160:
 4507 046e 616C6172 		.ascii	"alarmAppLED\000"
 4507      6D417070 
 4507      4C454400 
 4508              	.LASF146:
 4509 047a 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4509      6D5F7374 
 4509      6172745F 
 4509      74696D65 
 4509      5F737461 
 4510              	.LASF149:
 4511 0491 696E626F 		.ascii	"inbox\000"
 4511      7800
 4512              	.LASF87:
 4513 0497 7379735F 		.ascii	"sys_info_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 99


 4513      696E666F 
 4513      5F7400
 4514              	.LASF79:
 4515 04a2 75706461 		.ascii	"updatable_parameters_t\000"
 4515      7461626C 
 4515      655F7061 
 4515      72616D65 
 4515      74657273 
 4516              	.LASF96:
 4517 04b9 616C6172 		.ascii	"alarmType\000"
 4517      6D547970 
 4517      6500
 4518              	.LASF142:
 4519 04c3 64617461 		.ascii	"dataPointsInStack\000"
 4519      506F696E 
 4519      7473496E 
 4519      53746163 
 4519      6B00
 4520              	.LASF50:
 4521 04d5 746D5F6D 		.ascii	"tm_min\000"
 4521      696E00
 4522              	.LASF137:
 4523 04dc 726F7574 		.ascii	"route\000"
 4523      6500
 4524              	.LASF97:
 4525 04e2 616C6172 		.ascii	"alarmToBeUpdated\000"
 4525      6D546F42 
 4525      65557064 
 4525      61746564 
 4525      00
 4526              	.LASF21:
 4527 04f3 73697A65 		.ascii	"sizetype\000"
 4527      74797065 
 4527      00
 4528              	.LASF56:
 4529 04fc 746D5F79 		.ascii	"tm_yday\000"
 4529      64617900 
 4530              	.LASF90:
 4531 0504 7379735F 		.ascii	"sys_settings_t\000"
 4531      73657474 
 4531      696E6773 
 4531      5F7400
 4532              	.LASF133:
 4533 0513 6C6F6361 		.ascii	"localTime\000"
 4533      6C54696D 
 4533      6500
 4534              	.LASF159:
 4535 051d 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4535      546F5379 
 4535      636E5265 
 4535      6D6F7465 
 4535      50617261 
 4536              	.LASF59:
 4537 0534 74696D65 		.ascii	"timeStamp\000"
 4537      5374616D 
 4537      7000
 4538              	.LASF28:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 100


 4539 053e 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4539      54494D45 
 4539      5F444154 
 4539      4500
 4540              	.LASF148:
 4541 054c 75706461 		.ascii	"updatable_parameters\000"
 4541      7461626C 
 4541      655F7061 
 4541      72616D65 
 4541      74657273 
 4542              	.LASF101:
 4543 0561 43726561 		.ascii	"CreateAlarm\000"
 4543      7465416C 
 4543      61726D00 
 4544              	.LASF122:
 4545 056d 7061636B 		.ascii	"packet\000"
 4545      657400
 4546              	.LASF111:
 4547 0574 735F7273 		.ascii	"s_rsrp\000"
 4547      727000
 4548              	.LASF41:
 4549 057b 766F6C74 		.ascii	"voltage_pressure\000"
 4549      6167655F 
 4549      70726573 
 4549      73757265 
 4549      00
 4550              	.LASF150:
 4551 058c 68747470 		.ascii	"http_request\000"
 4551      5F726571 
 4551      75657374 
 4551      00
 4552              	.LASF17:
 4553 0599 666C6F61 		.ascii	"float\000"
 4553      7400
 4554              	.LASF37:
 4555 059f 6C657665 		.ascii	"level_sensor_t\000"
 4555      6C5F7365 
 4555      6E736F72 
 4555      5F7400
 4556              	.LASF112:
 4557 05ae 735F7273 		.ascii	"s_rscp\000"
 4557      637000
 4558              	.LASF126:
 4559 05b5 636F6E66 		.ascii	"configureRemoteParams\000"
 4559      69677572 
 4559      6552656D 
 4559      6F746550 
 4559      6172616D 
 4560              	.LASF162:
 4561 05cb 44617461 		.ascii	"Data_fileName\000"
 4561      5F66696C 
 4561      654E616D 
 4561      6500
 4562              	.LASF93:
 4563 05d9 6D6F6465 		.ascii	"modem_status\000"
 4563      6D5F7374 
 4563      61747573 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 101


 4563      00
 4564              	.LASF29:
 4565 05e6 74657374 		.ascii	"test_name\000"
 4565      5F6E616D 
 4565      6500
 4566              	.LASF27:
 4567 05f0 59656172 		.ascii	"Year\000"
 4567      00
 4568              	.LASF78:
 4569 05f5 5F426F6F 		.ascii	"_Bool\000"
 4569      6C00
 4570              	.LASF10:
 4571 05fb 696E7433 		.ascii	"int32_t\000"
 4571      325F7400 
 4572              	.LASF1:
 4573 0603 756E7369 		.ascii	"unsigned char\000"
 4573      676E6564 
 4573      20636861 
 4573      7200
 4574              	.LASF154:
 4575 0611 73797374 		.ascii	"system_settings\000"
 4575      656D5F73 
 4575      65747469 
 4575      6E677300 
 4576              	.LASF69:
 4577 0621 72737270 		.ascii	"rsrp\000"
 4577      00
 4578              	.LASF68:
 4579 0626 72737271 		.ascii	"rsrq\000"
 4579      00
 4580              	.LASF98:
 4581 062b 52657365 		.ascii	"ResetAlarm\000"
 4581      74416C61 
 4581      726D00
 4582              	.LASF125:
 4583 0636 735F7365 		.ascii	"s_send_time\000"
 4583      6E645F74 
 4583      696D6500 
 4584              	.LASF76:
 4585 0642 73796E63 		.ascii	"sync_time\000"
 4585      5F74696D 
 4585      6500
 4586              	.LASF47:
 4587 064c 70726573 		.ascii	"pressure_depth\000"
 4587      73757265 
 4587      5F646570 
 4587      746800
 4588              	.LASF66:
 4589 065b 72736370 		.ascii	"rscp\000"
 4589      00
 4590              	.LASF23:
 4591 0660 4461794F 		.ascii	"DayOfWeek\000"
 4591      66576565 
 4591      6B00
 4592              	.LASF32:
 4593 066a 74657374 		.ascii	"test_t\000"
 4593      5F7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 102


 4594              	.LASF153:
 4595 0671 73797374 		.ascii	"system_info\000"
 4595      656D5F69 
 4595      6E666F00 
 4596              	.LASF63:
 4597 067d 696D6569 		.ascii	"imei\000"
 4597      00
 4598              	.LASF31:
 4599 0682 72656173 		.ascii	"reason\000"
 4599      6F6E00
 4600              	.LASF99:
 4601 0689 616C6172 		.ascii	"alarmToBeReset\000"
 4601      6D546F42 
 4601      65526573 
 4601      657400
 4602              	.LASF104:
 4603 0698 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4603      6B697479 
 4603      43686563 
 4603      6B596F75 
 4603      7273656C 
 4604              	.LASF120:
 4605 06c4 64617461 		.ascii	"data_count_sent\000"
 4605      5F636F75 
 4605      6E745F73 
 4605      656E7400 
 4606              	.LASF72:
 4607 06d4 6D6F6465 		.ascii	"modem_stats_t\000"
 4607      6D5F7374 
 4607      6174735F 
 4607      7400
 4608              	.LASF46:
 4609 06e2 70726573 		.ascii	"pressure_current\000"
 4609      73757265 
 4609      5F637572 
 4609      72656E74 
 4609      00
 4610              	.LASF42:
 4611 06f3 76616C69 		.ascii	"valid\000"
 4611      6400
 4612              	.LASF55:
 4613 06f9 746D5F77 		.ascii	"tm_wday\000"
 4613      64617900 
 4614              	.LASF20:
 4615 0701 6C6F6E67 		.ascii	"long double\000"
 4615      20646F75 
 4615      626C6500 
 4616              	.LASF117:
 4617 070d 6368756E 		.ascii	"chunk\000"
 4617      6B00
 4618              	.LASF128:
 4619 0713 635F7469 		.ascii	"c_timeStamp\000"
 4619      6D655374 
 4619      616D7000 
 4620              	.LASF19:
 4621 071f 63686172 		.ascii	"char\000"
 4621      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 103


 4622              	.LASF147:
 4623 0724 6D6F6465 		.ascii	"modem_stats\000"
 4623      6D5F7374 
 4623      61747300 
 4624              	.LASF152:
 4625 0730 68747470 		.ascii	"http_route\000"
 4625      5F726F75 
 4625      746500
 4626              	.LASF116:
 4627 073b 706F7274 		.ascii	"portConfig\000"
 4627      436F6E66 
 4627      696700
 4628              	.LASF9:
 4629 0746 5F5F696E 		.ascii	"__int32_t\000"
 4629      7433325F 
 4629      7400
 4630              	.LASF91:
 4631 0750 756E6971 		.ascii	"uniqueId\000"
 4631      75654964 
 4631      00
 4632              	.LASF130:
 4633 0759 6D5F6C65 		.ascii	"m_level_sensor\000"
 4633      76656C5F 
 4633      73656E73 
 4633      6F7200
 4634              	.LASF34:
 4635 0768 6C657665 		.ascii	"level_reading\000"
 4635      6C5F7265 
 4635      6164696E 
 4635      6700
 4636              	.LASF167:
 4637 0776 4C617942 		.ascii	"LayBack\000"
 4637      61636B00 
 4638              	.LASF3:
 4639 077e 73686F72 		.ascii	"short unsigned int\000"
 4639      7420756E 
 4639      7369676E 
 4639      65642069 
 4639      6E7400
 4640              	.LASF61:
 4641 0791 73696D5F 		.ascii	"sim_id\000"
 4641      696400
 4642              	.LASF52:
 4643 0798 746D5F6D 		.ascii	"tm_mday\000"
 4643      64617900 
 4644              	.LASF102:
 4645 07a0 6E657741 		.ascii	"newAlarm\000"
 4645      6C61726D 
 4645      00
 4646              	.LASF49:
 4647 07a9 746D5F73 		.ascii	"tm_sec\000"
 4647      656300
 4648              	.LASF131:
 4649 07b0 6D5F7072 		.ascii	"m_pressure\000"
 4649      65737375 
 4649      726500
 4650              	.LASF30:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 104


 4651 07bb 73746174 		.ascii	"status\000"
 4651      757300
 4652              	.LASF143:
 4653 07c2 64617461 		.ascii	"dataPointsInStackDesired\000"
 4653      506F696E 
 4653      7473496E 
 4653      53746163 
 4653      6B446573 
 4654              	.LASF106:
 4655 07db 745F766F 		.ascii	"t_voltages\000"
 4655      6C746167 
 4655      657300
 4656              	.LASF164:
 4657 07e6 6E6F746F 		.ascii	"notoriOS.c\000"
 4657      72694F53 
 4657      2E6300
 4658              	.LASF151:
 4659 07f1 68747470 		.ascii	"http_body\000"
 4659      5F626F64 
 4659      7900
 4660              	.LASF15:
 4661 07fb 696E7431 		.ascii	"int16\000"
 4661      3600
 4662              	.LASF82:
 4663 0801 636F756E 		.ascii	"countDownType\000"
 4663      74446F77 
 4663      6E547970 
 4663      6500
 4664              	.LASF81:
 4665 080f 63757272 		.ascii	"currentCountDownValue\000"
 4665      656E7443 
 4665      6F756E74 
 4665      446F776E 
 4665      56616C75 
 4666              	.LASF74:
 4667 0825 73696D5F 		.ascii	"sim_type\000"
 4667      74797065 
 4667      00
 4668              	.LASF25:
 4669 082e 4461794F 		.ascii	"DayOfYear\000"
 4669      66596561 
 4669      7200
 4670              	.LASF48:
 4671 0838 70726573 		.ascii	"pressure_t\000"
 4671      73757265 
 4671      5F7400
 4672              	.LASF100:
 4673 0843 416C6172 		.ascii	"AlarmReady\000"
 4673      6D526561 
 4673      647900
 4674              	.LASF103:
 4675 084e 52656164 		.ascii	"ReadyOrNot\000"
 4675      794F724E 
 4675      6F7400
 4676              	.LASF168:
 4677 0859 6D61696E 		.ascii	"main\000"
 4677      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cc8ukIEX.s 			page 105


 4678              	.LASF86:
 4679 085e 63686970 		.ascii	"chip_uniqueId\000"
 4679      5F756E69 
 4679      71756549 
 4679      6400
 4680              	.LASF75:
 4681 086c 6D656173 		.ascii	"measure_time\000"
 4681      7572655F 
 4681      74696D65 
 4681      00
 4682              	.LASF18:
 4683 0879 646F7562 		.ascii	"double\000"
 4683      6C6500
 4684              	.LASF43:
 4685 0880 766F6C74 		.ascii	"voltage_t\000"
 4685      6167655F 
 4685      7400
 4686              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
