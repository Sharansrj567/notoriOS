ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.Wakeup_ISR,"ax",%progbits
  44              		.align	2
  45              		.global	Wakeup_ISR
  46              		.thumb
  47              		.thumb_func
  48              		.type	Wakeup_ISR, %function
  49              	Wakeup_ISR:
  50              	.LFB64:
  51              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 2


   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  62              		.loc 1 22 0
  63 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  64              		.loc 1 23 0
  65 0008 00BF     		nop
  66 000a 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	Wakeup_ISR, .-Wakeup_ISR
  70              		.global	Data_fileName
  71              		.data
  72              		.align	2
  73              		.type	Data_fileName, %object
  74              		.size	Data_fileName, 30
  75              	Data_fileName:
  76 0000 64617461 		.ascii	"data.txt\000"
  76      2E747874 
  76      00
  77 0009 00000000 		.space	21
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.comm	try_counter,1,1
  79              		.section	.rodata
  80              		.align	2
  81              	.LC0:
  82 0000 25582D25 		.ascii	"%X-%X\000"
  82      5800
  83 0006 0000     		.align	2
  84              	.LC1:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 3


  85 0008 6563322D 		.ascii	"ec2-13-59-131-167.us-east-2.compute.amazonaws.com\000"
  85      31332D35 
  85      392D3133 
  85      312D3136 
  85      372E7573 
  86 003a 0000     		.align	2
  87              	.LC2:
  88 003c 256400   		.ascii	"%d\000"
  89 003f 00       		.align	2
  90              	.LC3:
  91 0040 7265626F 		.ascii	"reboot\000"
  91      6F7400
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 32
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 8AB0     		sub	sp, sp, #40
 111              		.cfi_def_cfa_offset 56
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 48
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 3948     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 4


  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F11403 		add	r3, r7, #20
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 7A69     		ldr	r2, [r7, #20]
 136 0032 BB69     		ldr	r3, [r7, #24]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 2D4A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 2D48     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 2D4B     		ldr	r3, .L3+12
 145 0044 2D4A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-13-59-131-167.us-eas
 147              		.loc 1 68 0
 148 0048 2D4A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 5


 149 004a 2E4B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 2380     		strh	r3, [r4]	@ movhi
  69:notoriOS.c    ****    
  70:notoriOS.c    ****     system_settings.ep_port = 5000;
 160              		.loc 1 70 0
 161 0060 274B     		ldr	r3, .L3+20
 162 0062 41F28832 		movw	r2, #5000
 163 0066 5A66     		str	r2, [r3, #100]
  71:notoriOS.c    ****     // Don't need the following for new nodes
  72:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  73:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  74:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  75:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  76:notoriOS.c    ****         
  77:notoriOS.c    ****     
  78:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  79:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 164              		.loc 1 79 0
 165 0068 274B     		ldr	r3, .L3+28
 166 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 167 006c 99B2     		uxth	r1, r3
 168 006e 274C     		ldr	r4, .L3+32
 169 0070 3846     		mov	r0, r7
 170 0072 0723     		movs	r3, #7
 171 0074 0122     		movs	r2, #1
 172 0076 FFF7FEFF 		bl	CreateAlarm
 173 007a 2246     		mov	r2, r4
 174 007c 3B46     		mov	r3, r7
 175 007e 1968     		ldr	r1, [r3]	@ unaligned
 176 0080 1160     		str	r1, [r2]	@ unaligned
 177 0082 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 178 0084 9380     		strh	r3, [r2, #4]	@ unaligned
  80:notoriOS.c    ****     timeToMeasure = 1u;
 179              		.loc 1 80 0
 180 0086 224B     		ldr	r3, .L3+36
 181 0088 0122     		movs	r2, #1
 182 008a 1A70     		strb	r2, [r3]
  81:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  82:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 183              		.loc 1 82 0
 184 008c 1E4B     		ldr	r3, .L3+28
 185 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 186 0090 99B2     		uxth	r1, r3
 187 0092 204C     		ldr	r4, .L3+40
 188 0094 3846     		mov	r0, r7
 189 0096 0723     		movs	r3, #7
 190 0098 0122     		movs	r2, #1
 191 009a FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 6


 192 009e 2246     		mov	r2, r4
 193 00a0 3B46     		mov	r3, r7
 194 00a2 1968     		ldr	r1, [r3]	@ unaligned
 195 00a4 1160     		str	r1, [r2]	@ unaligned
 196 00a6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 197 00a8 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToSync = 1u;
 198              		.loc 1 83 0
 199 00aa 1B4B     		ldr	r3, .L3+44
 200 00ac 0122     		movs	r2, #1
 201 00ae 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     
  85:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 202              		.loc 1 85 0
 203 00b0 1A4B     		ldr	r3, .L3+48
 204 00b2 0022     		movs	r2, #0
 205 00b4 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     
  87:notoriOS.c    ****     // send hey to server saying the node rebooted
  88:notoriOS.c    ****     hey = 1u;
 206              		.loc 1 88 0
 207 00b6 1A4B     		ldr	r3, .L3+52
 208 00b8 0122     		movs	r2, #1
 209 00ba 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     char c_hey[10];
  90:notoriOS.c    ****     snprintf(c_hey,sizeof(c_hey),"%d",hey);
 210              		.loc 1 90 0
 211 00bc 184B     		ldr	r3, .L3+52
 212 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00c0 07F10800 		add	r0, r7, #8
 214 00c4 174A     		ldr	r2, .L3+56
 215 00c6 0A21     		movs	r1, #10
 216 00c8 FFF7FEFF 		bl	snprintf
  91:notoriOS.c    ****     pushData("reboot",c_hey,getTimeStamp());
 217              		.loc 1 91 0
 218 00cc FFF7FEFF 		bl	getTimeStamp
 219 00d0 0246     		mov	r2, r0
 220 00d2 07F10803 		add	r3, r7, #8
 221 00d6 1946     		mov	r1, r3
 222 00d8 1348     		ldr	r0, .L3+60
 223 00da FFF7FEFF 		bl	pushData
  92:notoriOS.c    ****     
  93:notoriOS.c    ****     // Initialize the try counter to 0
  94:notoriOS.c    ****     uint8 try_counter = 0;
 224              		.loc 1 94 0
 225 00de 0023     		movs	r3, #0
 226 00e0 FB77     		strb	r3, [r7, #31]
  95:notoriOS.c    **** }
 227              		.loc 1 95 0
 228 00e2 00BF     		nop
 229 00e4 2037     		adds	r7, r7, #32
 230              		.cfi_def_cfa_offset 16
 231 00e6 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 00e8 B0BD     		pop	{r4, r5, r7, pc}
 235              	.L4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 7


 236 00ea 00BF     		.align	2
 237              	.L3:
 238 00ec 00000000 		.word	Wakeup_ISR
 239 00f0 00000000 		.word	.LC0
 240 00f4 04000000 		.word	system_info+4
 241 00f8 00000000 		.word	system_info
 242 00fc 00000000 		.word	modem_info
 243 0100 00000000 		.word	system_settings
 244 0104 08000000 		.word	.LC1
 245 0108 00000000 		.word	updatable_parameters
 246 010c 00000000 		.word	alarmMeasure
 247 0110 00000000 		.word	timeToMeasure
 248 0114 00000000 		.word	alarmSync
 249 0118 00000000 		.word	timeToSync
 250 011c 00000000 		.word	timeToSycnRemoteParams
 251 0120 00000000 		.word	hey
 252 0124 3C000000 		.word	.LC2
 253 0128 40000000 		.word	.LC3
 254              		.cfi_endproc
 255              	.LFE65:
 256              		.size	ReadyOrNot, .-ReadyOrNot
 257              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 258              		.align	2
 259              		.global	WorkWorkWorkWorkWorkWork
 260              		.thumb
 261              		.thumb_func
 262              		.type	WorkWorkWorkWorkWorkWork, %function
 263              	WorkWorkWorkWorkWorkWork:
 264              	.LFB66:
  96:notoriOS.c    **** 
  97:notoriOS.c    **** 
  98:notoriOS.c    **** // ==============================================
  99:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 100:notoriOS.c    **** //      - Rhiana, feat Drake (2016)
 101:notoriOS.c    **** //
 102:notoriOS.c    **** // Prorcesses core tasks
 103:notoriOS.c    **** // ==============================================
 104:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 105:notoriOS.c    **** {
 265              		.loc 1 105 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 106:notoriOS.c    ****     
 107:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 108:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 109:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 110:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 111:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 8


 112:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 113:notoriOS.c    ****     if(timeToSycnRemoteParams){
 277              		.loc 1 113 0
 278 0006 144B     		ldr	r3, .L10
 279 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 280 000a 002B     		cmp	r3, #0
 281 000c 06D0     		beq	.L6
 114:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 282              		.loc 1 114 0
 283 000e FFF7FEFF 		bl	configureRemoteParams
 284 0012 0346     		mov	r3, r0
 285 0014 1A46     		mov	r2, r3
 286 0016 104B     		ldr	r3, .L10
 287 0018 1A70     		strb	r2, [r3]
 288 001a 14E0     		b	.L7
 289              	.L6:
 115:notoriOS.c    ****     }
 116:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 117:notoriOS.c    ****     else if(timeToMeasure){
 290              		.loc 1 117 0
 291 001c 0F4B     		ldr	r3, .L10+4
 292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 0020 002B     		cmp	r3, #0
 294 0022 06D0     		beq	.L8
 118:notoriOS.c    ****         //(int i=0; i<=30; i++){
 119:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 295              		.loc 1 119 0
 296 0024 FFF7FEFF 		bl	makeMeasurements
 297 0028 0346     		mov	r3, r0
 298 002a 1A46     		mov	r2, r3
 299 002c 0B4B     		ldr	r3, .L10+4
 300 002e 1A70     		strb	r2, [r3]
 301 0030 09E0     		b	.L7
 302              	.L8:
 120:notoriOS.c    ****         //CyDelay(1000u);
 121:notoriOS.c    ****         //}
 122:notoriOS.c    ****     }else if(timeToSync){
 303              		.loc 1 122 0
 304 0032 0B4B     		ldr	r3, .L10+8
 305 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 0036 002B     		cmp	r3, #0
 307 0038 05D0     		beq	.L7
 123:notoriOS.c    ****             timeToSync = syncData();
 308              		.loc 1 123 0
 309 003a FFF7FEFF 		bl	syncData
 310 003e 0346     		mov	r3, r0
 311 0040 1A46     		mov	r2, r3
 312 0042 074B     		ldr	r3, .L10+8
 313 0044 1A70     		strb	r2, [r3]
 314              	.L7:
 124:notoriOS.c    ****     }
 125:notoriOS.c    ****     // Print the countdown to the next alarm
 126:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 127:notoriOS.c    ****     
 128:notoriOS.c    ****     
 129:notoriOS.c    ****     // Check modem state machine on every loop
 130:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 9


 315              		.loc 1 130 0
 316 0046 FFF7FEFF 		bl	modem_process_tasks
 317 004a 0346     		mov	r3, r0
 318 004c FB71     		strb	r3, [r7, #7]
 131:notoriOS.c    **** 
 132:notoriOS.c    ****     return 0u +  modem_status;  
 319              		.loc 1 132 0
 320 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133:notoriOS.c    **** }
 321              		.loc 1 133 0
 322 0050 1846     		mov	r0, r3
 323 0052 0837     		adds	r7, r7, #8
 324              		.cfi_def_cfa_offset 8
 325 0054 BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 0056 80BD     		pop	{r7, pc}
 329              	.L11:
 330              		.align	2
 331              	.L10:
 332 0058 00000000 		.word	timeToSycnRemoteParams
 333 005c 00000000 		.word	timeToMeasure
 334 0060 00000000 		.word	timeToSync
 335              		.cfi_endproc
 336              	.LFE66:
 337              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 338              		.section	.text.LayBack,"ax",%progbits
 339              		.align	2
 340              		.global	LayBack
 341              		.thumb
 342              		.thumb_func
 343              		.type	LayBack, %function
 344              	LayBack:
 345              	.LFB67:
 134:notoriOS.c    **** 
 135:notoriOS.c    **** 
 136:notoriOS.c    **** 
 137:notoriOS.c    **** 
 138:notoriOS.c    **** 
 139:notoriOS.c    **** 
 140:notoriOS.c    **** // ==============================================
 141:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 142:notoriOS.c    **** //      - Snoop Dogg (1993)
 143:notoriOS.c    **** //
 144:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** void LayBack()
 147:notoriOS.c    **** {
 346              		.loc 1 147 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 10


 355              		.cfi_def_cfa_register 7
 148:notoriOS.c    ****   
 149:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 356              		.loc 1 149 0
 357 0004 FFF7FEFF 		bl	modem_sleep
 150:notoriOS.c    ****     
 151:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 152:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 358              		.loc 1 152 0
 359 0008 FFF7FEFF 		bl	debug_sleep
 153:notoriOS.c    ****     
 154:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 360              		.loc 1 154 0
 361 000c FFF7FEFF 		bl	CyPmSaveClocks
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 157:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 158:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 159:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 160:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 161:notoriOS.c    ****     //CyPmHibernate();
 162:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 163:notoriOS.c    **** 
 164:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 362              		.loc 1 164 0
 363 0010 4FF40061 		mov	r1, #2048
 364 0014 0020     		movs	r0, #0
 365 0016 FFF7FEFF 		bl	CyPmSleep
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 366              		.loc 1 166 0
 367 001a FFF7FEFF 		bl	CyPmRestoreClocks
 167:notoriOS.c    **** 
 168:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 368              		.loc 1 168 0
 369 001e FFF7FEFF 		bl	debug_wakeup
 169:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 370              		.loc 1 169 0
 371 0022 FFF7FEFF 		bl	modem_wakeup
 170:notoriOS.c    **** 
 171:notoriOS.c    **** }
 372              		.loc 1 171 0
 373 0026 00BF     		nop
 374 0028 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE67:
 377              		.size	LayBack, .-LayBack
 378 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 379              		.align	2
 380              		.global	AyoItsTime
 381              		.thumb
 382              		.thumb_func
 383              		.type	AyoItsTime, %function
 384              	AyoItsTime:
 385              	.LFB68:
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 11


 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 176:notoriOS.c    **** //      - NAS (1994)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 179:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 180:notoriOS.c    **** // It will add tasks to the work queue,
 181:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 182:notoriOS.c    **** // ==============================================
 183:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 184:notoriOS.c    **** {
 386              		.loc 1 184 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 FB71     		strb	r3, [r7, #7]
 185:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 186:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 400              		.loc 1 186 0
 401 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 402 000c 1946     		mov	r1, r3
 403 000e 0C48     		ldr	r0, .L17
 404 0010 FFF7FEFF 		bl	AlarmReady
 405 0014 0346     		mov	r3, r0
 406 0016 002B     		cmp	r3, #0
 407 0018 02D0     		beq	.L14
 187:notoriOS.c    ****     {
 188:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 189:notoriOS.c    ****         timeToMeasure = 1u;
 408              		.loc 1 189 0
 409 001a 0A4B     		ldr	r3, .L17+4
 410 001c 0122     		movs	r2, #1
 411 001e 1A70     		strb	r2, [r3]
 412              	.L14:
 190:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 191:notoriOS.c    ****         
 192:notoriOS.c    ****     }
 193:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 413              		.loc 1 193 0
 414 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415 0022 1946     		mov	r1, r3
 416 0024 0848     		ldr	r0, .L17+8
 417 0026 FFF7FEFF 		bl	AlarmReady
 418 002a 0346     		mov	r3, r0
 419 002c 002B     		cmp	r3, #0
 420 002e 02D0     		beq	.L16
 194:notoriOS.c    ****     {
 195:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 12


 196:notoriOS.c    ****         timeToSync = 1u;
 421              		.loc 1 196 0
 422 0030 064B     		ldr	r3, .L17+12
 423 0032 0122     		movs	r2, #1
 424 0034 1A70     		strb	r2, [r3]
 425              	.L16:
 197:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 198:notoriOS.c    ****     }
 199:notoriOS.c    ****     
 200:notoriOS.c    **** }
 426              		.loc 1 200 0
 427 0036 00BF     		nop
 428 0038 0837     		adds	r7, r7, #8
 429              		.cfi_def_cfa_offset 8
 430 003a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 003c 80BD     		pop	{r7, pc}
 434              	.L18:
 435 003e 00BF     		.align	2
 436              	.L17:
 437 0040 00000000 		.word	alarmMeasure
 438 0044 00000000 		.word	timeToMeasure
 439 0048 00000000 		.word	alarmSync
 440 004c 00000000 		.word	timeToSync
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	AyoItsTime, .-AyoItsTime
 444              		.section	.text.AlarmReady,"ax",%progbits
 445              		.align	2
 446              		.global	AlarmReady
 447              		.thumb
 448              		.thumb_func
 449              		.type	AlarmReady, %function
 450              	AlarmReady:
 451              	.LFB69:
 201:notoriOS.c    **** 
 202:notoriOS.c    **** 
 203:notoriOS.c    **** // ==============================================
 204:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 205:notoriOS.c    **** // ==============================================
 206:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 207:notoriOS.c    **** {
 452              		.loc 1 207 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 13


 466 000a FB70     		strb	r3, [r7, #3]
 208:notoriOS.c    ****     // if the countDownType matches the alarmType
 209:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 467              		.loc 1 209 0
 468 000c 7B68     		ldr	r3, [r7, #4]
 469 000e 1B79     		ldrb	r3, [r3, #4]
 470 0010 DBB2     		uxtb	r3, r3
 471 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 472 0014 9A42     		cmp	r2, r3
 473 0016 12D1     		bne	.L20
 210:notoriOS.c    ****        
 211:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 212:notoriOS.c    ****         // Decrement the count down value by 1
 213:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 474              		.loc 1 213 0
 475 0018 7B68     		ldr	r3, [r7, #4]
 476 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 477 001c 1BB2     		sxth	r3, r3
 478 001e 9BB2     		uxth	r3, r3
 479 0020 013B     		subs	r3, r3, #1
 480 0022 9BB2     		uxth	r3, r3
 481 0024 1AB2     		sxth	r2, r3
 482 0026 7B68     		ldr	r3, [r7, #4]
 483 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 214:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 215:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 484              		.loc 1 215 0
 485 002a 7B68     		ldr	r3, [r7, #4]
 486 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 487 002e 1BB2     		sxth	r3, r3
 488 0030 002B     		cmp	r3, #0
 489 0032 04DC     		bgt	.L20
 216:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 490              		.loc 1 216 0
 491 0034 7868     		ldr	r0, [r7, #4]
 492 0036 FFF7FEFF 		bl	ResetAlarm
 217:notoriOS.c    ****             return 1u;
 493              		.loc 1 217 0
 494 003a 0123     		movs	r3, #1
 495 003c 00E0     		b	.L21
 496              	.L20:
 218:notoriOS.c    ****         } 
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     
 221:notoriOS.c    ****     return 0u; // Otherwise return 0
 497              		.loc 1 221 0
 498 003e 0023     		movs	r3, #0
 499              	.L21:
 222:notoriOS.c    **** }
 500              		.loc 1 222 0
 501 0040 1846     		mov	r0, r3
 502 0042 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0044 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 14


 508              		.cfi_endproc
 509              	.LFE69:
 510              		.size	AlarmReady, .-AlarmReady
 511              		.section	.text.ResetAlarm,"ax",%progbits
 512              		.align	2
 513              		.global	ResetAlarm
 514              		.thumb
 515              		.thumb_func
 516              		.type	ResetAlarm, %function
 517              	ResetAlarm:
 518              	.LFB70:
 223:notoriOS.c    **** 
 224:notoriOS.c    **** // ==============================================
 225:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 226:notoriOS.c    **** // ==============================================
 227:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 228:notoriOS.c    **** {
 519              		.loc 1 228 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 229:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 230:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 532              		.loc 1 230 0
 533 0008 7B68     		ldr	r3, [r7, #4]
 534 000a 1B88     		ldrh	r3, [r3]	@ movhi
 535 000c 9BB2     		uxth	r3, r3
 536 000e 1AB2     		sxth	r2, r3
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 231:notoriOS.c    **** }
 539              		.loc 1 231 0
 540 0014 00BF     		nop
 541 0016 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0018 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 001a 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 001c 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	ResetAlarm, .-ResetAlarm
 553 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 554              		.align	2
 555              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 15


 556              		.thumb
 557              		.thumb_func
 558              		.type	CreateAlarm, %function
 559              	CreateAlarm:
 560              	.LFB71:
 232:notoriOS.c    **** 
 233:notoriOS.c    **** // ==============================================
 234:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 237:notoriOS.c    **** {
 561              		.loc 1 237 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 85B0     		sub	sp, sp, #20
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0846     		mov	r0, r1
 575 000a 1146     		mov	r1, r2
 576 000c 1A46     		mov	r2, r3
 577 000e 0346     		mov	r3, r0	@ movhi
 578 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 579 0012 0B46     		mov	r3, r1
 580 0014 7B70     		strb	r3, [r7, #1]
 581 0016 1346     		mov	r3, r2
 582 0018 3B70     		strb	r3, [r7]
 238:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 239:notoriOS.c    ****     alarm newAlarm;
 240:notoriOS.c    ****     
 241:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 242:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 583              		.loc 1 242 0
 584 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 585 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 243:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 586              		.loc 1 243 0
 587 001e 7B78     		ldrb	r3, [r7, #1]
 588 0020 3B73     		strb	r3, [r7, #12]
 244:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 589              		.loc 1 244 0
 590 0022 3B78     		ldrb	r3, [r7]
 591 0024 7B73     		strb	r3, [r7, #13]
 245:notoriOS.c    ****     
 246:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 247:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 248:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 592              		.loc 1 248 0
 593 0026 B7F90230 		ldrsh	r3, [r7, #2]
 594 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 249:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 16


 250:notoriOS.c    ****     return newAlarm;
 595              		.loc 1 250 0
 596 002c 7B68     		ldr	r3, [r7, #4]
 597 002e 1A46     		mov	r2, r3
 598 0030 07F10803 		add	r3, r7, #8
 599 0034 1868     		ldr	r0, [r3]	@ unaligned
 600 0036 1060     		str	r0, [r2]	@ unaligned
 601 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 602 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 251:notoriOS.c    ****     
 252:notoriOS.c    **** }
 603              		.loc 1 252 0
 604 003c 7868     		ldr	r0, [r7, #4]
 605 003e 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 0040 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0042 80BC     		pop	{r7}
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0044 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE71:
 616              		.size	CreateAlarm, .-CreateAlarm
 617 0046 00BF     		.section	.rodata
 618 0047 00       		.align	2
 619              	.LC4:
 620 0048 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 620      2D2D2D2D 
 620      2D2D2D2D 
 620      2D424547 
 620      494E2054 
 621 0072 0000     		.align	2
 622              	.LC5:
 623 0074 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 623      3D25732C 
 623      2053494D 
 623      49443D25 
 623      732C2044 
 624 0093 00       		.align	2
 625              	.LC6:
 626 0094 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 626      2D2D2D2D 
 626      2D2D2D2D 
 626      2D2D2D45 
 626      4E442054 
 627 00bd 00       		.ascii	"\000"
 628              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 629              		.align	2
 630              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 631              		.thumb
 632              		.thumb_func
 633              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 634              	ChickityCheckYourselfBeforeYouWreckYourself:
 635              	.LFB72:
 253:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 17


 254:notoriOS.c    **** // ==============================================
 255:notoriOS.c    **** // Dropping bombs on your moms
 256:notoriOS.c    **** //      - Ice Cube (1992)
 257:notoriOS.c    **** //
 258:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 259:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 260:notoriOS.c    **** // ==============================================
 261:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 636              		.loc 1 261 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 2328
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 90B5     		push	{r4, r7, lr}
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 ADF6942D 		subw	sp, sp, #2708
 646              		.cfi_def_cfa_offset 2720
 647 0006 5EAF     		add	r7, sp, #376
 648              		.cfi_def_cfa 7, 2344
 262:notoriOS.c    **** 
 263:notoriOS.c    ****     //test_t t_influx = influx_test();
 264:notoriOS.c    ****     //printTestStatus(t_influx);
 265:notoriOS.c    ****     
 266:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 649              		.loc 1 266 0
 650 0008 4249     		ldr	r1, .L26
 651 000a 0320     		movs	r0, #3
 652 000c FFF7FEFF 		bl	printNotif
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Test level sensor
 269:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 653              		.loc 1 269 0
 654 0010 07F29473 		addw	r3, r7, #1940
 655 0014 1846     		mov	r0, r3
 656 0016 FFF7FEFF 		bl	level_sensor_test
 270:notoriOS.c    ****     printTestStatus(t_level_sensor);
 657              		.loc 1 270 0
 658 001a 07F29474 		addw	r4, r7, #1940
 659 001e 6846     		mov	r0, sp
 660 0020 04F11003 		add	r3, r4, #16
 661 0024 40F27112 		movw	r2, #369
 662 0028 1946     		mov	r1, r3
 663 002a FFF7FEFF 		bl	memcpy
 664 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 665 0032 FFF7FEFF 		bl	printTestStatus
 271:notoriOS.c    ****     
 272:notoriOS.c    ****     // Test Valve
 273:notoriOS.c    ****     test_t t_valve = valve_test();
 666              		.loc 1 273 0
 667 0036 07F5C263 		add	r3, r7, #1552
 668 003a 1846     		mov	r0, r3
 669 003c FFF7FEFF 		bl	valve_test
 274:notoriOS.c    ****     printTestStatus(t_valve);
 670              		.loc 1 274 0
 671 0040 07F5C264 		add	r4, r7, #1552
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 18


 672 0044 6846     		mov	r0, sp
 673 0046 04F11003 		add	r3, r4, #16
 674 004a 40F27112 		movw	r2, #369
 675 004e 1946     		mov	r1, r3
 676 0050 FFF7FEFF 		bl	memcpy
 677 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 678 0058 FFF7FEFF 		bl	printTestStatus
 275:notoriOS.c    ****     
 276:notoriOS.c    ****     // Test voltages
 277:notoriOS.c    ****     test_t t_voltages = voltages_test();
 679              		.loc 1 277 0
 680 005c 07F28C43 		addw	r3, r7, #1164
 681 0060 1846     		mov	r0, r3
 682 0062 FFF7FEFF 		bl	voltages_test
 278:notoriOS.c    ****     printTestStatus(t_voltages);
 683              		.loc 1 278 0
 684 0066 07F28C44 		addw	r4, r7, #1164
 685 006a 6846     		mov	r0, sp
 686 006c 04F11003 		add	r3, r4, #16
 687 0070 40F27112 		movw	r2, #369
 688 0074 1946     		mov	r1, r3
 689 0076 FFF7FEFF 		bl	memcpy
 690 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 691 007e FFF7FEFF 		bl	printTestStatus
 279:notoriOS.c    ****  
 280:notoriOS.c    ****     // Test voltages
 281:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 692              		.loc 1 281 0
 693 0082 07F54273 		add	r3, r7, #776
 694 0086 1846     		mov	r0, r3
 695 0088 FFF7FEFF 		bl	pressure_sensor_test
 282:notoriOS.c    ****     printTestStatus(t_pressure);
 696              		.loc 1 282 0
 697 008c 07F54274 		add	r4, r7, #776
 698 0090 6846     		mov	r0, sp
 699 0092 04F11003 		add	r3, r4, #16
 700 0096 40F27112 		movw	r2, #369
 701 009a 1946     		mov	r1, r3
 702 009c FFF7FEFF 		bl	memcpy
 703 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 704 00a4 FFF7FEFF 		bl	printTestStatus
 283:notoriOS.c    ****     
 284:notoriOS.c    ****     // Test SD card
 285:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 705              		.loc 1 285 0
 706 00a8 07F5C273 		add	r3, r7, #388
 707 00ac 1846     		mov	r0, r3
 708 00ae FFF7FEFF 		bl	SD_card_test
 286:notoriOS.c    ****     printTestStatus(t_sd_card);
 709              		.loc 1 286 0
 710 00b2 07F5C274 		add	r4, r7, #388
 711 00b6 6846     		mov	r0, sp
 712 00b8 04F11003 		add	r3, r4, #16
 713 00bc 40F27112 		movw	r2, #369
 714 00c0 1946     		mov	r1, r3
 715 00c2 FFF7FEFF 		bl	memcpy
 716 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 19


 717 00ca FFF7FEFF 		bl	printTestStatus
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // Test modem
 289:notoriOS.c    ****     test_t t_modem = modem_test();
 718              		.loc 1 289 0
 719 00ce 3B46     		mov	r3, r7
 720 00d0 1846     		mov	r0, r3
 721 00d2 FFF7FEFF 		bl	modem_test
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 722              		.loc 1 290 0
 723 00d6 104B     		ldr	r3, .L26+4
 724 00d8 0093     		str	r3, [sp]
 725 00da 104B     		ldr	r3, .L26+8
 726 00dc 104A     		ldr	r2, .L26+12
 727 00de 1149     		ldr	r1, .L26+16
 728 00e0 0320     		movs	r0, #3
 729 00e2 FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     printTestStatus(t_modem);
 730              		.loc 1 291 0
 731 00e6 3C46     		mov	r4, r7
 732 00e8 6846     		mov	r0, sp
 733 00ea 04F11003 		add	r3, r4, #16
 734 00ee 40F27112 		movw	r2, #369
 735 00f2 1946     		mov	r1, r3
 736 00f4 FFF7FEFF 		bl	memcpy
 737 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 738 00fc FFF7FEFF 		bl	printTestStatus
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 739              		.loc 1 293 0
 740 0100 0949     		ldr	r1, .L26+20
 741 0102 0320     		movs	r0, #3
 742 0104 FFF7FEFF 		bl	printNotif
 294:notoriOS.c    **** 
 295:notoriOS.c    **** }
 743              		.loc 1 295 0
 744 0108 00BF     		nop
 745 010a 07F61C17 		addw	r7, r7, #2332
 746              		.cfi_def_cfa_offset 12
 747 010e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0110 90BD     		pop	{r4, r7, pc}
 751              	.L27:
 752 0112 00BF     		.align	2
 753              	.L26:
 754 0114 48000000 		.word	.LC4
 755 0118 04000000 		.word	system_info+4
 756 011c 00000000 		.word	modem_info
 757 0120 28000000 		.word	modem_info+40
 758 0124 74000000 		.word	.LC5
 759 0128 94000000 		.word	.LC6
 760              		.cfi_endproc
 761              	.LFE72:
 762              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 763              		.section	.text.main,"ax",%progbits
 764              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 20


 765              		.global	main
 766              		.thumb
 767              		.thumb_func
 768              		.type	main, %function
 769              	main:
 770              	.LFB73:
 296:notoriOS.c    **** 
 297:notoriOS.c    **** // ==============================================
 298:notoriOS.c    **** // Processes Core Tasks
 299:notoriOS.c    **** // ==============================================
 300:notoriOS.c    **** int main(void)
 301:notoriOS.c    **** {
 771              		.loc 1 301 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 302:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 781              		.loc 1 302 0
 782              		.syntax unified
 783              	@ 302 "notoriOS.c" 1
 784 0004 62B6     		CPSIE   i
 785              	@ 0 "" 2
 303:notoriOS.c    **** 
 304:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 786              		.loc 1 304 0
 787              		.thumb
 788              		.syntax unified
 789 0006 FFF7FEFF 		bl	ReadyOrNot
 305:notoriOS.c    ****     
 306:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 790              		.loc 1 306 0
 791 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 792              	.L30:
 307:notoriOS.c    ****    
 308:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 309:notoriOS.c    ****     {
 310:notoriOS.c    ****         
 311:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 793              		.loc 1 311 0
 794 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 795 0012 0346     		mov	r3, r0
 796 0014 002B     		cmp	r3, #0
 797 0016 FAD1     		bne	.L30
 312:notoriOS.c    ****         {
 313:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 798              		.loc 1 313 0
 799 0018 FFF7FEFF 		bl	LayBack
 314:notoriOS.c    ****         }
 315:notoriOS.c    ****     }
 800              		.loc 1 315 0
 801 001c F7E7     		b	.L30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 21


 802              		.cfi_endproc
 803              	.LFE73:
 804              		.size	main, .-main
 805 001e 00BF     		.section	.rodata
 806 00be 0000     		.align	2
 807              	.LC7:
 808 00c0 496D706C 		.ascii	"Implementing fallback controller strategy\000"
 808      656D656E 
 808      74696E67 
 808      2066616C 
 808      6C626163 
 809 00ea 0000     		.align	2
 810              	.LC8:
 811 00ec 4D6F6465 		.ascii	"Modem is ready.\000"
 811      6D206973 
 811      20726561 
 811      64792E00 
 812              		.align	2
 813              	.LC9:
 814 00fc 72737270 		.ascii	"rsrp\000"
 814      00
 815 0101 000000   		.align	2
 816              	.LC10:
 817 0104 7472795F 		.ascii	"try_counter\000"
 817      636F756E 
 817      74657200 
 818              		.align	2
 819              	.LC11:
 820 0110 64617461 		.ascii	"data_count_sent\000"
 820      5F636F75 
 820      6E745F73 
 820      656E7400 
 821              		.align	2
 822              	.LC12:
 823 0120 64617461 		.ascii	"data_count_desired\000"
 823      5F636F75 
 823      6E745F64 
 823      65736972 
 823      656400
 824 0133 00       		.align	2
 825              	.LC13:
 826 0134 42656769 		.ascii	"Begin HTTP post.\000"
 826      6E204854 
 826      54502070 
 826      6F73742E 
 826      00
 827 0145 000000   		.align	2
 828              	.LC14:
 829 0148 63646135 		.ascii	"cda55da7c2c60f86e6e4c356f256ba45f3c78568\000"
 829      35646137 
 829      63326336 
 829      30663836 
 829      65366534 
 830 0171 000000   		.align	2
 831              	.LC15:
 832 0174 6170692F 		.ascii	"api/v1/write\000"
 832      76312F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 22


 832      72697465 
 832      00
 833 0181 000000   		.align	2
 834              	.LC16:
 835 0184 48545450 		.ascii	"HTTP route: %s\000"
 835      20726F75 
 835      74653A20 
 835      257300
 836 0193 00       		.align	2
 837              	.LC17:
 838 0194 312E3100 		.ascii	"1.1\000"
 839              		.align	2
 840              	.LC18:
 841 0198 00       		.ascii	"\000"
 842 0199 000000   		.align	2
 843              	.LC19:
 844 019c 436C6F73 		.ascii	"Close\000"
 844      6500
 845 01a2 0000     		.align	2
 846              	.LC20:
 847 01a4 504F5354 		.ascii	"POST\000"
 847      00
 848 01a9 000000   		.align	2
 849              	.LC21:
 850 01ac 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 850      20485454 
 850      50205265 
 850      71756573 
 850      743A2025 
 851 01c2 0000     		.align	2
 852              	.LC22:
 853 01c4 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 853      443D312C 
 853      302C2564 
 853      2C222573 
 853      222C302C 
 854 01dd 000000   		.align	2
 855              	.LC23:
 856 01e0 257300   		.ascii	"%s\000"
 857 01e3 00       		.align	2
 858              	.LC24:
 859 01e4 4F4B00   		.ascii	"OK\000"
 860              		.global	__aeabi_ui2d
 861              		.global	__aeabi_d2iz
 862 01e7 00       		.align	2
 863              	.LC25:
 864 01e8 68747470 		.ascii	"http_request len: %d\000"
 864      5F726571 
 864      75657374 
 864      206C656E 
 864      3A202564 
 865 01fd 000000   		.align	2
 866              	.LC26:
 867 0200 23206F66 		.ascii	"# of packets: %d\000"
 867      20706163 
 867      6B657473 
 867      3A202564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 23


 867      00
 868 0211 000000   		.align	2
 869              	.LC27:
 870 0214 3E00     		.ascii	">\000"
 871 0216 0000     		.align	2
 872              	.LC28:
 873 0218 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 873      53454E44 
 873      3D310D0A 
 873      00
 874 0225 000000   		.align	2
 875              	.LC29:
 876 0228 1A00     		.ascii	"\032\000"
 877 022a 0000     		.align	2
 878              	.LC30:
 879 022c 6368756E 		.ascii	"chunk %d: %s\000"
 879      6B202564 
 879      3A202573 
 879      00
 880 0239 000000   		.align	2
 881              	.LC31:
 882 023c 5352494E 		.ascii	"SRING\000"
 882      4700
 883 0242 0000     		.align	2
 884              	.LC32:
 885 0244 4F532D4F 		.ascii	"OS-OK\000"
 885      4B00
 886 024a 0000     		.align	2
 887              	.LC33:
 888 024c 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 888      52454356 
 888      3D312C31 
 888      3030300D 
 888      00
 889 025d 000000   		.align	2
 890              	.LC34:
 891 0260 6D6F6465 		.ascii	"modem_tx_time\000"
 891      6D5F7478 
 891      5F74696D 
 891      6500
 892 026e 0000     		.align	2
 893              	.LC35:
 894 0270 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 894      4F3A2043 
 894      6F756C64 
 894      206E6F74 
 894      20726563 
 895              		.section	.text.syncData,"ax",%progbits
 896              		.align	2
 897              		.global	syncData
 898              		.thumb
 899              		.thumb_func
 900              		.type	syncData, %function
 901              	syncData:
 902              	.LFB74:
 316:notoriOS.c    **** }
 317:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 24


 318:notoriOS.c    **** // ==============================================
 319:notoriOS.c    **** // Syncs data with server
 320:notoriOS.c    **** // Returns 0 when done
 321:notoriOS.c    **** // ==============================================
 322:notoriOS.c    **** uint8 syncData(){
 903              		.loc 1 322 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 1368
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 90B5     		push	{r4, r7, lr}
 908              		.cfi_def_cfa_offset 12
 909              		.cfi_offset 4, -12
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912 0002 ADF2745D 		subw	sp, sp, #1396
 913              		.cfi_def_cfa_offset 1408
 914 0006 06AF     		add	r7, sp, #24
 915              		.cfi_def_cfa 7, 1384
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     /*
 325:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 326:notoriOS.c    ****     uint8 check = 0;
 327:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 328:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 329:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 330:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 331:notoriOS.c    ****     */
 332:notoriOS.c    **** 
 333:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 334:notoriOS.c    ****     LED_Write(1u);
 916              		.loc 1 334 0
 917 0008 0120     		movs	r0, #1
 918 000a FFF7FEFF 		bl	LED_Write
 335:notoriOS.c    ****     CyDelay(100u);
 919              		.loc 1 335 0
 920 000e 6420     		movs	r0, #100
 921 0010 FFF7FEFF 		bl	CyDelay
 336:notoriOS.c    ****     LED_Write(0u);
 922              		.loc 1 336 0
 923 0014 0020     		movs	r0, #0
 924 0016 FFF7FEFF 		bl	LED_Write
 337:notoriOS.c    **** 
 338:notoriOS.c    ****     
 339:notoriOS.c    ****     // If there's no data, not need to do anything
 340:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 925              		.loc 1 340 0
 926 001a FFF7FEFF 		bl	sizeOfDataStack
 927 001e 0346     		mov	r3, r0
 928 0020 002B     		cmp	r3, #0
 929 0022 01D1     		bne	.L32
 341:notoriOS.c    ****         return 0u;
 930              		.loc 1 341 0
 931 0024 0023     		movs	r3, #0
 932 0026 05E2     		b	.L33
 933              	.L32:
 342:notoriOS.c    ****         }
 343:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 25


 344:notoriOS.c    ****     // Create request body, in this case influx
 345:notoriOS.c    ****     // Place body into HTTP request header
 346:notoriOS.c    ****     // Fire up modem and get it out
 347:notoriOS.c    ****      
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 350:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 934              		.loc 1 350 0
 935 0028 FFF7FEFF 		bl	modem_get_state
 936 002c 0346     		mov	r3, r0
 937 002e 002B     		cmp	r3, #0
 938 0030 23D1     		bne	.L34
 351:notoriOS.c    **** 
 352:notoriOS.c    ****         try_counter++;
 939              		.loc 1 352 0
 940 0032 AE4B     		ldr	r3, .L47
 941 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 942 0036 0133     		adds	r3, r3, #1
 943 0038 DAB2     		uxtb	r2, r3
 944 003a AC4B     		ldr	r3, .L47
 945 003c 1A70     		strb	r2, [r3]
 353:notoriOS.c    ****         	
 354:notoriOS.c    ****         if(try_counter <= 2){
 946              		.loc 1 354 0
 947 003e AB4B     		ldr	r3, .L47
 948 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 0042 022B     		cmp	r3, #2
 950 0044 02D8     		bhi	.L35
 355:notoriOS.c    ****             modem_power_up();
 951              		.loc 1 355 0
 952 0046 FFF7FEFF 		bl	modem_power_up
 953 004a F2E1     		b	.L36
 954              	.L35:
 356:notoriOS.c    ****         }else{
 357:notoriOS.c    ****             try_counter = 0;
 955              		.loc 1 357 0
 956 004c A74B     		ldr	r3, .L47
 957 004e 0022     		movs	r2, #0
 958 0050 1A70     		strb	r2, [r3]
 358:notoriOS.c    ****             // call default valve controller when not connected to server
 359:notoriOS.c    ****             if (updatable_parameters.node_type ==NODE_TYPE_VALVE){
 959              		.loc 1 359 0
 960 0052 A74B     		ldr	r3, .L47+4
 961 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0056 042B     		cmp	r3, #4
 963 0058 0DD1     		bne	.L37
 360:notoriOS.c    ****                 printNotif(NOTIF_TYPE_EVENT, "Implementing fallback controller strategy");
 964              		.loc 1 360 0
 965 005a A649     		ldr	r1, .L47+8
 966 005c 0020     		movs	r0, #0
 967 005e FFF7FEFF 		bl	printNotif
 361:notoriOS.c    ****                 valve_level_controller(level_sensor_take_reading().level_reading); // want to take 
 968              		.loc 1 361 0
 969 0062 07F5A563 		add	r3, r7, #1320
 970 0066 1846     		mov	r0, r3
 971 0068 FFF7FEFF 		bl	level_sensor_take_reading
 972 006c B7F93E35 		ldrsh	r3, [r7, #1342]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 26


 973 0070 1846     		mov	r0, r3
 974 0072 FFF7FEFF 		bl	valve_level_controller
 975              	.L37:
 362:notoriOS.c    ****             }
 363:notoriOS.c    ****             return 0u;
 976              		.loc 1 363 0
 977 0076 0023     		movs	r3, #0
 978 0078 DCE1     		b	.L33
 979              	.L34:
 364:notoriOS.c    ****             }
 365:notoriOS.c    ****             
 366:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 980              		.loc 1 366 0
 981 007a FFF7FEFF 		bl	modem_get_state
 982 007e 0346     		mov	r3, r0
 983 0080 042B     		cmp	r3, #4
 984 0082 40F0D681 		bne	.L36
 985              	.LBB2:
 367:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 986              		.loc 1 367 0
 987 0086 9C49     		ldr	r1, .L47+12
 988 0088 0020     		movs	r0, #0
 989 008a FFF7FEFF 		bl	printNotif
 368:notoriOS.c    ****         
 369:notoriOS.c    ****         http_request[0] = '\0';
 990              		.loc 1 369 0
 991 008e 9B4B     		ldr	r3, .L47+16
 992 0090 0022     		movs	r2, #0
 993 0092 1A70     		strb	r2, [r3]
 370:notoriOS.c    ****         http_body[0] = '\0';
 994              		.loc 1 370 0
 995 0094 9A4B     		ldr	r3, .L47+20
 996 0096 0022     		movs	r2, #0
 997 0098 1A70     		strb	r2, [r3]
 371:notoriOS.c    ****         http_route[0] = '\0';
 998              		.loc 1 371 0
 999 009a 9A4B     		ldr	r3, .L47+24
 1000 009c 0022     		movs	r2, #0
 1001 009e 1A70     		strb	r2, [r3]
 372:notoriOS.c    ****         //char *base = "write";
 373:notoriOS.c    ****         
 374:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power)
 375:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 376:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1002              		.loc 1 376 0
 1003 00a0 994B     		ldr	r3, .L47+28
 1004 00a2 5B69     		ldr	r3, [r3, #20]
 1005 00a4 07F21450 		addw	r0, r7, #1300
 1006 00a8 984A     		ldr	r2, .L47+32
 1007 00aa 1421     		movs	r1, #20
 1008 00ac FFF7FEFF 		bl	snprintf
 377:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1009              		.loc 1 377 0
 1010 00b0 FFF7FEFF 		bl	getTimeStamp
 1011 00b4 0246     		mov	r2, r0
 1012 00b6 07F21453 		addw	r3, r7, #1300
 1013 00ba 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 27


 1014 00bc 9448     		ldr	r0, .L47+36
 1015 00be FFF7FEFF 		bl	pushData
 378:notoriOS.c    ****         
 379:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 380:notoriOS.c    ****         char c_try_counter[20];
 381:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1016              		.loc 1 381 0
 1017 00c2 8A4B     		ldr	r3, .L47
 1018 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 00c6 07F5A060 		add	r0, r7, #1280
 1020 00ca 904A     		ldr	r2, .L47+32
 1021 00cc 1421     		movs	r1, #20
 1022 00ce FFF7FEFF 		bl	snprintf
 382:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1023              		.loc 1 382 0
 1024 00d2 FFF7FEFF 		bl	getTimeStamp
 1025 00d6 0246     		mov	r2, r0
 1026 00d8 07F5A063 		add	r3, r7, #1280
 1027 00dc 1946     		mov	r1, r3
 1028 00de 8D48     		ldr	r0, .L47+40
 1029 00e0 FFF7FEFF 		bl	pushData
 383:notoriOS.c    ****         
 384:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 385:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 386:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 387:notoriOS.c    ****         if(buffer_overflow == false){
 1030              		.loc 1 387 0
 1031 00e4 8C4B     		ldr	r3, .L47+44
 1032 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1033 00e8 83F00103 		eor	r3, r3, #1
 1034 00ec DBB2     		uxtb	r3, r3
 1035 00ee 002B     		cmp	r3, #0
 1036 00f0 16D0     		beq	.L38
 1037              	.LBB3:
 388:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1038              		.loc 1 388 0
 1039 00f2 FFF7FEFF 		bl	sizeOfDataStack
 1040 00f6 0346     		mov	r3, r0
 1041 00f8 A7F85035 		strh	r3, [r7, #1360]	@ movhi
 389:notoriOS.c    ****             char c_data_count_sent[20];
 390:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1042              		.loc 1 390 0
 1043 00fc B7F85035 		ldrh	r3, [r7, #1360]
 1044 0100 07F59B60 		add	r0, r7, #1240
 1045 0104 814A     		ldr	r2, .L47+32
 1046 0106 1421     		movs	r1, #20
 1047 0108 FFF7FEFF 		bl	snprintf
 391:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1048              		.loc 1 391 0
 1049 010c FFF7FEFF 		bl	getTimeStamp
 1050 0110 0246     		mov	r2, r0
 1051 0112 07F59B63 		add	r3, r7, #1240
 1052 0116 1946     		mov	r1, r3
 1053 0118 8048     		ldr	r0, .L47+48
 1054 011a FFF7FEFF 		bl	pushData
 1055              	.LBE3:
 1056 011e 0FE0     		b	.L39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 28


 1057              	.L38:
 1058              	.LBB4:
 392:notoriOS.c    ****         }else{
 393:notoriOS.c    ****             char c_data_count_sent[20];
 394:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1059              		.loc 1 394 0
 1060 0120 07F2C440 		addw	r0, r7, #1220
 1061 0124 9623     		movs	r3, #150
 1062 0126 794A     		ldr	r2, .L47+32
 1063 0128 1421     		movs	r1, #20
 1064 012a FFF7FEFF 		bl	snprintf
 395:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1065              		.loc 1 395 0
 1066 012e FFF7FEFF 		bl	getTimeStamp
 1067 0132 0246     		mov	r2, r0
 1068 0134 07F2C443 		addw	r3, r7, #1220
 1069 0138 1946     		mov	r1, r3
 1070 013a 7848     		ldr	r0, .L47+48
 1071 013c FFF7FEFF 		bl	pushData
 1072              	.L39:
 1073              	.LBE4:
 396:notoriOS.c    ****         }
 397:notoriOS.c    ****         
 398:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 399:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1074              		.loc 1 399 0
 1075 0140 FFF7FEFF 		bl	sizeOfDataStackDesired
 1076 0144 0346     		mov	r3, r0
 1077 0146 A7F84E35 		strh	r3, [r7, #1358]	@ movhi
 400:notoriOS.c    ****         char c_data_count_desired[20];
 401:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 402:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1078              		.loc 1 402 0
 1079 014a B7F84E35 		ldrh	r3, [r7, #1358]
 1080 014e 013B     		subs	r3, r3, #1
 1081 0150 07F2EC40 		addw	r0, r7, #1260
 1082 0154 6D4A     		ldr	r2, .L47+32
 1083 0156 1421     		movs	r1, #20
 1084 0158 FFF7FEFF 		bl	snprintf
 403:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1085              		.loc 1 403 0
 1086 015c FFF7FEFF 		bl	getTimeStamp
 1087 0160 0246     		mov	r2, r0
 1088 0162 07F2EC43 		addw	r3, r7, #1260
 1089 0166 1946     		mov	r1, r3
 1090 0168 6D48     		ldr	r0, .L47+52
 1091 016a FFF7FEFF 		bl	pushData
 404:notoriOS.c    ****         
 405:notoriOS.c    ****         // Construct HTPP request
 406:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1092              		.loc 1 406 0
 1093 016e 6D49     		ldr	r1, .L47+56
 1094 0170 0020     		movs	r0, #0
 1095 0172 FFF7FEFF 		bl	printNotif
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         // Old influx API
 409:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 29


 410:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1096              		.loc 1 410 0
 1097 0176 6C4B     		ldr	r3, .L47+60
 1098 0178 6C4A     		ldr	r2, .L47+64
 1099 017a 6D49     		ldr	r1, .L47+68
 1100 017c 6148     		ldr	r0, .L47+24
 1101 017e FFF7FEFF 		bl	construct_malcom_route
 411:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1102              		.loc 1 411 0
 1103 0182 604A     		ldr	r2, .L47+24
 1104 0184 6B49     		ldr	r1, .L47+72
 1105 0186 0020     		movs	r0, #0
 1106 0188 FFF7FEFF 		bl	printNotif
 412:notoriOS.c    ****         
 413:notoriOS.c    ****         //OLD INFLUX API
 414:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 415:notoriOS.c    ****         construct_malcom_body(http_body);
 1107              		.loc 1 415 0
 1108 018c 5C48     		ldr	r0, .L47+20
 1109 018e FFF7FEFF 		bl	construct_malcom_body
 416:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1110              		.loc 1 416 0
 1111 0192 694B     		ldr	r3, .L47+76
 1112 0194 5B6E     		ldr	r3, [r3, #100]
 1113 0196 694A     		ldr	r2, .L47+80
 1114 0198 0592     		str	r2, [sp, #20]
 1115 019a 0022     		movs	r2, #0
 1116 019c 0492     		str	r2, [sp, #16]
 1117 019e 684A     		ldr	r2, .L47+84
 1118 01a0 0392     		str	r2, [sp, #12]
 1119 01a2 684A     		ldr	r2, .L47+88
 1120 01a4 0292     		str	r2, [sp, #8]
 1121 01a6 684A     		ldr	r2, .L47+92
 1122 01a8 0192     		str	r2, [sp, #4]
 1123 01aa 0093     		str	r3, [sp]
 1124 01ac 554B     		ldr	r3, .L47+24
 1125 01ae 624A     		ldr	r2, .L47+76
 1126 01b0 5349     		ldr	r1, .L47+20
 1127 01b2 5248     		ldr	r0, .L47+16
 1128 01b4 FFF7FEFF 		bl	construct_generic_HTTP_request
 417:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1129              		.loc 1 417 0
 1130 01b8 504A     		ldr	r2, .L47+16
 1131 01ba 6449     		ldr	r1, .L47+96
 1132 01bc 0020     		movs	r0, #0
 1133 01be FFF7FEFF 		bl	printNotif
 418:notoriOS.c    ****         
 419:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 420:notoriOS.c    ****         // Open port and begin command line sequence
 421:notoriOS.c    ****         char portConfig[200];
 422:notoriOS.c    ****         uint8 status = 0u;
 1134              		.loc 1 422 0
 1135 01c2 0023     		movs	r3, #0
 1136 01c4 87F84D35 		strb	r3, [r7, #1357]
 423:notoriOS.c    ****         
 424:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1137              		.loc 1 424 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 30


 1138 01c8 5B4B     		ldr	r3, .L47+76
 1139 01ca 5A6E     		ldr	r2, [r3, #100]
 1140 01cc 381D     		adds	r0, r7, #4
 1141 01ce 5A4B     		ldr	r3, .L47+76
 1142 01d0 0093     		str	r3, [sp]
 1143 01d2 1346     		mov	r3, r2
 1144 01d4 5E4A     		ldr	r2, .L47+100
 1145 01d6 C821     		movs	r1, #200
 1146 01d8 FFF7FEFF 		bl	snprintf
 425:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1147              		.loc 1 425 0
 1148 01dc 3B1D     		adds	r3, r7, #4
 1149 01de 1A46     		mov	r2, r3
 1150 01e0 5C49     		ldr	r1, .L47+104
 1151 01e2 0020     		movs	r0, #0
 1152 01e4 FFF7FEFF 		bl	printNotif
 426:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1153              		.loc 1 426 0
 1154 01e8 3B1D     		adds	r3, r7, #4
 1155 01ea 42F21072 		movw	r2, #10000
 1156 01ee 5A49     		ldr	r1, .L47+108
 1157 01f0 1846     		mov	r0, r3
 1158 01f2 FFF7FEFF 		bl	at_write_command
 1159 01f6 0346     		mov	r3, r0
 1160 01f8 87F84D35 		strb	r3, [r7, #1357]
 427:notoriOS.c    ****         
 428:notoriOS.c    ****         // create character pointer to chunk through the http_request
 429:notoriOS.c    ****         char *chunk;
 430:notoriOS.c    ****         // Set chunk to start where http_request starts
 431:notoriOS.c    ****         chunk = http_request;
 1161              		.loc 1 431 0
 1162 01fc 3F4B     		ldr	r3, .L47+16
 1163 01fe C7F85435 		str	r3, [r7, #1364]
 432:notoriOS.c    ****         // variable for the number of packets to send
 433:notoriOS.c    ****         int8 packets;
 434:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1164              		.loc 1 434 0
 1165 0202 3E48     		ldr	r0, .L47+16
 1166 0204 FFF7FEFF 		bl	strlen
 1167 0208 0246     		mov	r2, r0
 1168 020a 544B     		ldr	r3, .L47+112
 1169 020c A3FB0223 		umull	r2, r3, r3, r2
 1170 0210 5B09     		lsrs	r3, r3, #5
 1171 0212 1846     		mov	r0, r3
 1172 0214 FFF7FEFF 		bl	__aeabi_ui2d
 1173 0218 4FF00002 		mov	r2, #0
 1174 021c 504B     		ldr	r3, .L47+116
 1175 021e FFF7FEFF 		bl	nextafter
 1176 0222 0346     		mov	r3, r0
 1177 0224 0C46     		mov	r4, r1
 1178 0226 1846     		mov	r0, r3
 1179 0228 2146     		mov	r1, r4
 1180 022a FFF7FEFF 		bl	ceil
 1181 022e 0346     		mov	r3, r0
 1182 0230 0C46     		mov	r4, r1
 1183 0232 1846     		mov	r0, r3
 1184 0234 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 31


 1185 0236 FFF7FEFF 		bl	__aeabi_d2iz
 1186 023a 0346     		mov	r3, r0
 1187 023c 87F84C35 		strb	r3, [r7, #1356]
 435:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1188              		.loc 1 435 0
 1189 0240 2E48     		ldr	r0, .L47+16
 1190 0242 FFF7FEFF 		bl	strlen
 1191 0246 0346     		mov	r3, r0
 1192 0248 1A46     		mov	r2, r3
 1193 024a 4649     		ldr	r1, .L47+120
 1194 024c 0020     		movs	r0, #0
 1195 024e FFF7FEFF 		bl	printNotif
 436:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1196              		.loc 1 436 0
 1197 0252 97F94C35 		ldrsb	r3, [r7, #1356]
 1198 0256 1A46     		mov	r2, r3
 1199 0258 4349     		ldr	r1, .L47+124
 1200 025a 0020     		movs	r0, #0
 1201 025c FFF7FEFF 		bl	printNotif
 1202              	.LBB5:
 437:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 438:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1203              		.loc 1 438 0
 1204 0260 0023     		movs	r3, #0
 1205 0262 87F85335 		strb	r3, [r7, #1363]
 1206 0266 9BE0     		b	.L40
 1207              	.L43:
 1208              	.LBB6:
 439:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 440:notoriOS.c    ****             char http_chunk[1001];
 441:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 442:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 443:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1209              		.loc 1 443 0
 1210 0268 4FF47A72 		mov	r2, #1000
 1211 026c 3F49     		ldr	r1, .L47+128
 1212 026e 4048     		ldr	r0, .L47+132
 1213 0270 FFF7FEFF 		bl	at_write_command
 1214 0274 0346     		mov	r3, r0
 1215 0276 87F84D35 		strb	r3, [r7, #1357]
 444:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 445:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1216              		.loc 1 445 0
 1217 027a 07F1CC00 		add	r0, r7, #204
 1218 027e D7F85435 		ldr	r3, [r7, #1364]
 1219 0282 344A     		ldr	r2, .L47+104
 1220 0284 4FF4FA71 		mov	r1, #500
 1221 0288 FFF7FEFF 		bl	snprintf
 446:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 447:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1222              		.loc 1 447 0
 1223 028c 07F1CC03 		add	r3, r7, #204
 1224 0290 1846     		mov	r0, r3
 1225 0292 FFF7FEFF 		bl	strlen
 1226 0296 0346     		mov	r3, r0
 1227 0298 1A46     		mov	r2, r3
 1228 029a 07F1CC03 		add	r3, r7, #204
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 32


 1229 029e 1344     		add	r3, r3, r2
 1230 02a0 3449     		ldr	r1, .L47+136
 1231 02a2 1A46     		mov	r2, r3
 1232 02a4 0B46     		mov	r3, r1
 1233 02a6 1B88     		ldrh	r3, [r3]	@ unaligned
 1234 02a8 1380     		strh	r3, [r2]	@ unaligned
 448:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1235              		.loc 1 448 0
 1236 02aa 97F95325 		ldrsb	r2, [r7, #1363]
 1237 02ae 07F1CC03 		add	r3, r7, #204
 1238 02b2 3149     		ldr	r1, .L47+140
 1239 02b4 0020     		movs	r0, #0
 1240 02b6 FFF7FEFF 		bl	printNotif
 449:notoriOS.c    ****             // Send data to server
 450:notoriOS.c    ****             if ((packet+1) != packets){
 1241              		.loc 1 450 0
 1242 02ba 97F95335 		ldrsb	r3, [r7, #1363]
 1243 02be 5A1C     		adds	r2, r3, #1
 1244 02c0 97F94C35 		ldrsb	r3, [r7, #1356]
 1245 02c4 9A42     		cmp	r2, r3
 1246 02c6 59D0     		beq	.L41
 451:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1247              		.loc 1 451 0
 1248 02c8 07F1CC03 		add	r3, r7, #204
 1249 02cc 41F28832 		movw	r2, #5000
 1250 02d0 2149     		ldr	r1, .L47+108
 1251 02d2 1846     		mov	r0, r3
 1252 02d4 FFF7FEFF 		bl	at_write_command
 1253 02d8 0346     		mov	r3, r0
 1254 02da 87F84D35 		strb	r3, [r7, #1357]
 452:notoriOS.c    ****                 // Move the pointer forward 
 453:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1255              		.loc 1 453 0
 1256 02de D7F85435 		ldr	r3, [r7, #1364]
 1257 02e2 03F2F313 		addw	r3, r3, #499
 1258 02e6 C7F85435 		str	r3, [r7, #1364]
 1259 02ea 52E0     		b	.L42
 1260              	.L48:
 1261              		.align	2
 1262              	.L47:
 1263 02ec 00000000 		.word	try_counter
 1264 02f0 00000000 		.word	updatable_parameters
 1265 02f4 C0000000 		.word	.LC7
 1266 02f8 EC000000 		.word	.LC8
 1267 02fc 00000000 		.word	http_request
 1268 0300 00000000 		.word	http_body
 1269 0304 00000000 		.word	http_route
 1270 0308 00000000 		.word	modem_stats
 1271 030c 3C000000 		.word	.LC2
 1272 0310 FC000000 		.word	.LC9
 1273 0314 04010000 		.word	.LC10
 1274 0318 00000000 		.word	buffer_overflow
 1275 031c 10010000 		.word	.LC11
 1276 0320 20010000 		.word	.LC12
 1277 0324 34010000 		.word	.LC13
 1278 0328 48010000 		.word	.LC14
 1279 032c 28000000 		.word	modem_info+40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 33


 1280 0330 74010000 		.word	.LC15
 1281 0334 84010000 		.word	.LC16
 1282 0338 00000000 		.word	system_settings
 1283 033c 94010000 		.word	.LC17
 1284 0340 98010000 		.word	.LC18
 1285 0344 9C010000 		.word	.LC19
 1286 0348 A4010000 		.word	.LC20
 1287 034c AC010000 		.word	.LC21
 1288 0350 C4010000 		.word	.LC22
 1289 0354 E0010000 		.word	.LC23
 1290 0358 E4010000 		.word	.LC24
 1291 035c D34D6210 		.word	274877907
 1292 0360 00407F40 		.word	1082081280
 1293 0364 E8010000 		.word	.LC25
 1294 0368 00020000 		.word	.LC26
 1295 036c 14020000 		.word	.LC27
 1296 0370 18020000 		.word	.LC28
 1297 0374 28020000 		.word	.LC29
 1298 0378 2C020000 		.word	.LC30
 1299              	.L41:
 454:notoriOS.c    ****             }else{
 455:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1300              		.loc 1 455 0
 1301 037c 07F1CC03 		add	r3, r7, #204
 1302 0380 41F28832 		movw	r2, #5000
 1303 0384 2E49     		ldr	r1, .L49
 1304 0386 1846     		mov	r0, r3
 1305 0388 FFF7FEFF 		bl	at_write_command
 1306 038c 0346     		mov	r3, r0
 1307 038e 87F84D35 		strb	r3, [r7, #1357]
 1308              	.L42:
 1309              	.LBE6:
 438:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1310              		.loc 1 438 0 discriminator 2
 1311 0392 97F95335 		ldrsb	r3, [r7, #1363]
 1312 0396 DBB2     		uxtb	r3, r3
 1313 0398 0133     		adds	r3, r3, #1
 1314 039a DBB2     		uxtb	r3, r3
 1315 039c 87F85335 		strb	r3, [r7, #1363]
 1316              	.L40:
 438:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1317              		.loc 1 438 0 is_stmt 0 discriminator 1
 1318 03a0 97F95325 		ldrsb	r2, [r7, #1363]
 1319 03a4 97F94C35 		ldrsb	r3, [r7, #1356]
 1320 03a8 9A42     		cmp	r2, r3
 1321 03aa FFF65DAF 		blt	.L43
 1322              	.LBE5:
 456:notoriOS.c    ****             }
 457:notoriOS.c    ****             
 458:notoriOS.c    ****         }
 459:notoriOS.c    ****         
 460:notoriOS.c    ****         // Read received buffer
 461:notoriOS.c    ****         // A good write will return code "OS-OK"
 462:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 463:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 464:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1323              		.loc 1 464 0 is_stmt 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 34


 1324 03ae 41F28832 		movw	r2, #5000
 1325 03b2 2449     		ldr	r1, .L49+4
 1326 03b4 2448     		ldr	r0, .L49+8
 1327 03b6 FFF7FEFF 		bl	at_write_command
 1328 03ba 0346     		mov	r3, r0
 1329 03bc 87F84D35 		strb	r3, [r7, #1357]
 465:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 466:notoriOS.c    ****     
 467:notoriOS.c    ****   
 468:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 469:notoriOS.c    ****         if(status == 1u){
 1330              		.loc 1 469 0
 1331 03c0 97F84D35 		ldrb	r3, [r7, #1357]	@ zero_extendqisi2
 1332 03c4 012B     		cmp	r3, #1
 1333 03c6 1DD1     		bne	.L44
 1334              	.LBB7:
 470:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1335              		.loc 1 470 0
 1336 03c8 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 471:notoriOS.c    ****             Clear_Data_Stack();
 1337              		.loc 1 471 0
 1338 03cc FFF7FEFF 		bl	Clear_Data_Stack
 472:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1339              		.loc 1 472 0
 1340 03d0 FFF7FEFF 		bl	getTimeStamp
 1341 03d4 0246     		mov	r2, r0
 1342 03d6 1D4B     		ldr	r3, .L49+12
 1343 03d8 1B68     		ldr	r3, [r3]
 1344 03da D31A     		subs	r3, r2, r3
 1345 03dc C7F84835 		str	r3, [r7, #1352]
 473:notoriOS.c    ****             char s_send_time[10];
 474:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1346              		.loc 1 474 0
 1347 03e0 07F59760 		add	r0, r7, #1208
 1348 03e4 D7F84835 		ldr	r3, [r7, #1352]
 1349 03e8 194A     		ldr	r2, .L49+16
 1350 03ea 0A21     		movs	r1, #10
 1351 03ec FFF7FEFF 		bl	snprintf
 475:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1352              		.loc 1 475 0
 1353 03f0 FFF7FEFF 		bl	getTimeStamp
 1354 03f4 0246     		mov	r2, r0
 1355 03f6 07F59763 		add	r3, r7, #1208
 1356 03fa 1946     		mov	r1, r3
 1357 03fc 1548     		ldr	r0, .L49+20
 1358 03fe FFF7FEFF 		bl	pushData
 1359              	.LBE7:
 1360 0402 03E0     		b	.L45
 1361              	.L44:
 476:notoriOS.c    ****         }else{
 477:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1362              		.loc 1 477 0
 1363 0404 1449     		ldr	r1, .L49+24
 1364 0406 0220     		movs	r0, #2
 1365 0408 FFF7FEFF 		bl	printNotif
 1366              	.L45:
 478:notoriOS.c    ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 35


 479:notoriOS.c    ****          
 480:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 481:notoriOS.c    ****         long network_time = modem_get_network_time();
 1367              		.loc 1 481 0
 1368 040c FFF7FEFF 		bl	modem_get_network_time
 1369 0410 C7F84405 		str	r0, [r7, #1348]
 482:notoriOS.c    ****         if(network_time != 0){
 1370              		.loc 1 482 0
 1371 0414 D7F84435 		ldr	r3, [r7, #1348]
 1372 0418 002B     		cmp	r3, #0
 1373 041a 03D0     		beq	.L46
 483:notoriOS.c    ****            setTime(network_time);
 1374              		.loc 1 483 0
 1375 041c D7F84405 		ldr	r0, [r7, #1348]
 1376 0420 FFF7FEFF 		bl	setTime
 1377              	.L46:
 484:notoriOS.c    ****         }
 485:notoriOS.c    ****         
 486:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 487:notoriOS.c    ****         // If not -- keep the statck and try next time
 488:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 489:notoriOS.c    ****         modem_power_down();
 1378              		.loc 1 489 0
 1379 0424 FFF7FEFF 		bl	modem_power_down
 490:notoriOS.c    ****         
 491:notoriOS.c    ****         try_counter = 0u;
 1380              		.loc 1 491 0
 1381 0428 0C4B     		ldr	r3, .L49+28
 1382 042a 0022     		movs	r2, #0
 1383 042c 1A70     		strb	r2, [r3]
 492:notoriOS.c    ****         return 0u;
 1384              		.loc 1 492 0
 1385 042e 0023     		movs	r3, #0
 1386 0430 00E0     		b	.L33
 1387              	.L36:
 1388              	.LBE2:
 493:notoriOS.c    ****     }
 494:notoriOS.c    ****       
 495:notoriOS.c    ****       return 1u; // Not done yet
 1389              		.loc 1 495 0
 1390 0432 0123     		movs	r3, #1
 1391              	.L33:
 496:notoriOS.c    **** }
 1392              		.loc 1 496 0 discriminator 1
 1393 0434 1846     		mov	r0, r3
 1394 0436 07F25C57 		addw	r7, r7, #1372
 1395              		.cfi_def_cfa_offset 12
 1396 043a BD46     		mov	sp, r7
 1397              		.cfi_def_cfa_register 13
 1398              		@ sp needed
 1399 043c 90BD     		pop	{r4, r7, pc}
 1400              	.L50:
 1401 043e 00BF     		.align	2
 1402              	.L49:
 1403 0440 3C020000 		.word	.LC31
 1404 0444 44020000 		.word	.LC32
 1405 0448 4C020000 		.word	.LC33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 36


 1406 044c 00000000 		.word	modem_start_time_stamp
 1407 0450 3C000000 		.word	.LC2
 1408 0454 60020000 		.word	.LC34
 1409 0458 70020000 		.word	.LC35
 1410 045c 00000000 		.word	try_counter
 1411              		.cfi_endproc
 1412              	.LFE74:
 1413              		.size	syncData, .-syncData
 1414              		.section	.text.configureRemoteParams,"ax",%progbits
 1415              		.align	2
 1416              		.global	configureRemoteParams
 1417              		.thumb
 1418              		.thumb_func
 1419              		.type	configureRemoteParams, %function
 1420              	configureRemoteParams:
 1421              	.LFB75:
 497:notoriOS.c    **** 
 498:notoriOS.c    **** // ==============================================
 499:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 500:notoriOS.c    **** // Returns 0 when done
 501:notoriOS.c    **** // ==============================================
 502:notoriOS.c    **** uint8 configureRemoteParams(){
 1422              		.loc 1 502 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 8
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426 0000 80B5     		push	{r7, lr}
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
 1430 0002 82B0     		sub	sp, sp, #8
 1431              		.cfi_def_cfa_offset 16
 1432 0004 00AF     		add	r7, sp, #0
 1433              		.cfi_def_cfa_register 7
 503:notoriOS.c    ****     
 504:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1434              		.loc 1 504 0
 1435 0006 FFF7FEFF 		bl	modem_get_state
 1436 000a 0346     		mov	r3, r0
 1437 000c 002B     		cmp	r3, #0
 1438 000e 02D1     		bne	.L52
 505:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 506:notoriOS.c    ****         modem_power_up();
 1439              		.loc 1 506 0
 1440 0010 FFF7FEFF 		bl	modem_power_up
 1441 0014 11E0     		b	.L53
 1442              	.L52:
 507:notoriOS.c    ****             
 508:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1443              		.loc 1 508 0
 1444 0016 FFF7FEFF 		bl	modem_get_state
 1445 001a 0346     		mov	r3, r0
 1446 001c 042B     		cmp	r3, #4
 1447 001e 0CD1     		bne	.L53
 1448              	.LBB8:
 509:notoriOS.c    ****         
 510:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 37


 511:notoriOS.c    ****         
 512:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 513:notoriOS.c    ****         long network_time = modem_get_network_time();
 1449              		.loc 1 513 0
 1450 0020 FFF7FEFF 		bl	modem_get_network_time
 1451 0024 7860     		str	r0, [r7, #4]
 514:notoriOS.c    ****         if(network_time != 0){
 1452              		.loc 1 514 0
 1453 0026 7B68     		ldr	r3, [r7, #4]
 1454 0028 002B     		cmp	r3, #0
 1455 002a 02D0     		beq	.L54
 515:notoriOS.c    ****             setTime(network_time);
 1456              		.loc 1 515 0
 1457 002c 7868     		ldr	r0, [r7, #4]
 1458 002e FFF7FEFF 		bl	setTime
 1459              	.L54:
 516:notoriOS.c    ****         }
 517:notoriOS.c    ****         
 518:notoriOS.c    ****         // Get GPS coordinates
 519:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 520:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 521:notoriOS.c    ****         modem_power_down();
 1460              		.loc 1 521 0
 1461 0032 FFF7FEFF 		bl	modem_power_down
 522:notoriOS.c    ****         return 0u;
 1462              		.loc 1 522 0
 1463 0036 0023     		movs	r3, #0
 1464 0038 00E0     		b	.L55
 1465              	.L53:
 1466              	.LBE8:
 523:notoriOS.c    ****         
 524:notoriOS.c    ****     }
 525:notoriOS.c    ****     
 526:notoriOS.c    ****     return 1u;
 1467              		.loc 1 526 0
 1468 003a 0123     		movs	r3, #1
 1469              	.L55:
 527:notoriOS.c    **** }
 1470              		.loc 1 527 0
 1471 003c 1846     		mov	r0, r3
 1472 003e 0837     		adds	r7, r7, #8
 1473              		.cfi_def_cfa_offset 8
 1474 0040 BD46     		mov	sp, r7
 1475              		.cfi_def_cfa_register 13
 1476              		@ sp needed
 1477 0042 80BD     		pop	{r7, pc}
 1478              		.cfi_endproc
 1479              	.LFE75:
 1480              		.size	configureRemoteParams, .-configureRemoteParams
 1481              		.section	.rodata
 1482 029b 00       		.align	2
 1483              	.LC36:
 1484 029c 256C6400 		.ascii	"%ld\000"
 1485              		.align	2
 1486              	.LC37:
 1487 02a0 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1487      6F746978 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 38


 1487      5F646570 
 1487      74683D25 
 1487      7300
 1488 02b2 0000     		.align	2
 1489              	.LC38:
 1490 02b4 6D617862 		.ascii	"maxbotix_depth\000"
 1490      6F746978 
 1490      5F646570 
 1490      746800
 1491 02c3 00       		.align	2
 1492              	.LC39:
 1493 02c4 612B00   		.ascii	"a+\000"
 1494 02c7 00       		.align	2
 1495              	.LC40:
 1496 02c8 206D6178 		.ascii	" maxbotix_depth: \000"
 1496      626F7469 
 1496      785F6465 
 1496      7074683A 
 1496      2000
 1497 02da 0000     		.align	2
 1498              	.LC41:
 1499 02dc 2000     		.ascii	" \000"
 1500 02de 0000     		.align	2
 1501              	.LC42:
 1502 02e0 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1502      64206E6F 
 1502      74206765 
 1502      74207661 
 1502      6C696420 
 1503              		.global	__aeabi_f2d
 1504              		.align	2
 1505              	.LC43:
 1506 030c 252E3266 		.ascii	"%.2f\000"
 1506      00
 1507 0311 000000   		.align	2
 1508              	.LC44:
 1509 0314 765F6261 		.ascii	"v_bat=%s\000"
 1509      743D2573 
 1509      00
 1510 031d 000000   		.align	2
 1511              	.LC45:
 1512 0320 765F6261 		.ascii	"v_bat\000"
 1512      7400
 1513 0326 0000     		.align	2
 1514              	.LC46:
 1515 0328 20766261 		.ascii	" vbat: \000"
 1515      743A2000 
 1516              		.align	2
 1517              	.LC47:
 1518 0330 70726573 		.ascii	"pressure_current=%s\000"
 1518      73757265 
 1518      5F637572 
 1518      72656E74 
 1518      3D257300 
 1519              		.align	2
 1520              	.LC48:
 1521 0344 70726573 		.ascii	"pressure_current\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 39


 1521      73757265 
 1521      5F637572 
 1521      72656E74 
 1521      00
 1522 0355 000000   		.align	2
 1523              	.LC49:
 1524 0358 20707265 		.ascii	" pressure_current: \000"
 1524      73737572 
 1524      655F6375 
 1524      7272656E 
 1524      743A2000 
 1525              		.align	2
 1526              	.LC50:
 1527 036c 70726573 		.ascii	"pressure_depth=%s\000"
 1527      73757265 
 1527      5F646570 
 1527      74683D25 
 1527      7300
 1528 037e 0000     		.align	2
 1529              	.LC51:
 1530 0380 70726573 		.ascii	"pressure_depth\000"
 1530      73757265 
 1530      5F646570 
 1530      746800
 1531 038f 00       		.align	2
 1532              	.LC52:
 1533 0390 20707265 		.ascii	" pressure_depth: \000"
 1533      73737572 
 1533      655F6465 
 1533      7074683A 
 1533      2000
 1534 03a2 0000     		.align	2
 1535              	.LC53:
 1536 03a4 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1536      64206E6F 
 1536      74206765 
 1536      74207661 
 1536      6C696420 
 1537 03cb 00       		.align	2
 1538              	.LC54:
 1539 03cc 256600   		.ascii	"%f\000"
 1540 03cf 00       		.align	2
 1541              	.LC55:
 1542 03d0 76616C76 		.ascii	"valve_open=%s\000"
 1542      655F6F70 
 1542      656E3D25 
 1542      7300
 1543 03de 0000     		.align	2
 1544              	.LC56:
 1545 03e0 76616C76 		.ascii	"valve_open\000"
 1545      655F6F70 
 1545      656E00
 1546 03eb 00       		.align	2
 1547              	.LC57:
 1548 03ec 2076616C 		.ascii	" valve_open: \000"
 1548      76655F6F 
 1548      70656E3A 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 40


 1548      2000
 1549 03fa 0000     		.align	2
 1550              	.LC58:
 1551 03fc 646F776E 		.ascii	"downstream_maxbotix_depth=%s\000"
 1551      73747265 
 1551      616D5F6D 
 1551      6178626F 
 1551      7469785F 
 1552 0419 000000   		.align	2
 1553              	.LC59:
 1554 041c 646F776E 		.ascii	"downstream_maxbotix_depth\000"
 1554      73747265 
 1554      616D5F6D 
 1554      6178626F 
 1554      7469785F 
 1555 0436 0000     		.align	2
 1556              	.LC60:
 1557 0438 65737469 		.ascii	"estimated_discharge=%s\000"
 1557      6D617465 
 1557      645F6469 
 1557      73636861 
 1557      7267653D 
 1558 044f 00       		.align	2
 1559              	.LC61:
 1560 0450 65737469 		.ascii	"estimated_discharge\000"
 1560      6D617465 
 1560      645F6469 
 1560      73636861 
 1560      72676500 
 1561              		.section	.text.makeMeasurements,"ax",%progbits
 1562              		.align	2
 1563              		.global	makeMeasurements
 1564              		.thumb
 1565              		.thumb_func
 1566              		.type	makeMeasurements, %function
 1567              	makeMeasurements:
 1568              	.LFB76:
 528:notoriOS.c    **** 
 529:notoriOS.c    **** 
 530:notoriOS.c    **** // ==============================================
 531:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 532:notoriOS.c    **** // Returns 0 when finished
 533:notoriOS.c    **** // ==============================================
 534:notoriOS.c    **** uint8 makeMeasurements(){
 1569              		.loc 1 534 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 192
 1572              		@ frame_needed = 1, uses_anonymous_args = 0
 1573 0000 B0B5     		push	{r4, r5, r7, lr}
 1574              		.cfi_def_cfa_offset 16
 1575              		.cfi_offset 4, -16
 1576              		.cfi_offset 5, -12
 1577              		.cfi_offset 7, -8
 1578              		.cfi_offset 14, -4
 1579 0002 B4B0     		sub	sp, sp, #208
 1580              		.cfi_def_cfa_offset 224
 1581 0004 04AF     		add	r7, sp, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 41


 1582              		.cfi_def_cfa 7, 208
 535:notoriOS.c    ****     
 536:notoriOS.c    ****     // Get clock time and save to timeStamp
 537:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1583              		.loc 1 537 0
 1584 0006 FFF7FEFF 		bl	getTimeStamp
 1585 000a C7F8BC00 		str	r0, [r7, #188]
 538:notoriOS.c    ****     char c_timeStamp[32];
 539:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1586              		.loc 1 539 0
 1587 000e 07F19400 		add	r0, r7, #148
 1588 0012 D7F8BC30 		ldr	r3, [r7, #188]
 1589 0016 A14A     		ldr	r2, .L69
 1590 0018 2021     		movs	r1, #32
 1591 001a FFF7FEFF 		bl	snprintf
 540:notoriOS.c    ****     
 541:notoriOS.c    ****     // Holds string for value that will be written 
 542:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 543:notoriOS.c    ****     
 544:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 545:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1592              		.loc 1 545 0
 1593 001e A04B     		ldr	r3, .L69+4
 1594 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1595 0022 002B     		cmp	r3, #0
 1596 0024 3CD1     		bne	.L57
 1597              	.LBB9:
 546:notoriOS.c    ****         
 547:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 548:notoriOS.c    ****         level_sensor_t m_level_sensor;
 549:notoriOS.c    ****         
 550:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 551:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1598              		.loc 1 551 0
 1599 0026 07F14803 		add	r3, r7, #72
 1600 002a 1846     		mov	r0, r3
 1601 002c FFF7FEFF 		bl	level_sensor_take_reading
 552:notoriOS.c    ****     
 553:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 554:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1602              		.loc 1 554 0
 1603 0030 97F86030 		ldrb	r3, [r7, #96]	@ zero_extendqisi2
 1604 0034 002B     		cmp	r3, #0
 1605 0036 2FD0     		beq	.L58
 555:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1606              		.loc 1 555 0
 1607 0038 B7F95E30 		ldrsh	r3, [r7, #94]
 1608 003c 07F18000 		add	r0, r7, #128
 1609 0040 984A     		ldr	r2, .L69+8
 1610 0042 1421     		movs	r1, #20
 1611 0044 FFF7FEFF 		bl	snprintf
 556:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1612              		.loc 1 556 0
 1613 0048 07F18003 		add	r3, r7, #128
 1614 004c 1A46     		mov	r2, r3
 1615 004e 9649     		ldr	r1, .L69+12
 1616 0050 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 42


 1617 0052 FFF7FEFF 		bl	printNotif
 557:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1618              		.loc 1 557 0
 1619 0056 07F18003 		add	r3, r7, #128
 1620 005a D7F8BC20 		ldr	r2, [r7, #188]
 1621 005e 1946     		mov	r1, r3
 1622 0060 9248     		ldr	r0, .L69+16
 1623 0062 FFF7FEFF 		bl	pushData
 558:notoriOS.c    ****             
 559:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 560:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1624              		.loc 1 560 0
 1625 0066 07F19403 		add	r3, r7, #148
 1626 006a 1A46     		mov	r2, r3
 1627 006c 9049     		ldr	r1, .L69+20
 1628 006e 9148     		ldr	r0, .L69+24
 1629 0070 FFF7FEFF 		bl	SD_write
 561:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1630              		.loc 1 561 0
 1631 0074 904A     		ldr	r2, .L69+28
 1632 0076 8E49     		ldr	r1, .L69+20
 1633 0078 8E48     		ldr	r0, .L69+24
 1634 007a FFF7FEFF 		bl	SD_write
 562:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1635              		.loc 1 562 0
 1636 007e 07F18003 		add	r3, r7, #128
 1637 0082 1A46     		mov	r2, r3
 1638 0084 8A49     		ldr	r1, .L69+20
 1639 0086 8B48     		ldr	r0, .L69+24
 1640 0088 FFF7FEFF 		bl	SD_write
 563:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1641              		.loc 1 563 0
 1642 008c 8B4A     		ldr	r2, .L69+32
 1643 008e 8849     		ldr	r1, .L69+20
 1644 0090 8848     		ldr	r0, .L69+24
 1645 0092 FFF7FEFF 		bl	SD_write
 1646 0096 03E0     		b	.L57
 1647              	.L58:
 564:notoriOS.c    ****         }else{
 565:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1648              		.loc 1 565 0
 1649 0098 8949     		ldr	r1, .L69+36
 1650 009a 0220     		movs	r0, #2
 1651 009c FFF7FEFF 		bl	printNotif
 1652              	.L57:
 1653              	.LBE9:
 566:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 567:notoriOS.c    ****         }
 568:notoriOS.c    ****     }
 569:notoriOS.c    ****     
 570:notoriOS.c    ****     
 571:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 572:notoriOS.c    ****     voltage_t m_voltage;
 573:notoriOS.c    ****     
 574:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 575:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1654              		.loc 1 575 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 43


 1655 00a0 07F16403 		add	r3, r7, #100
 1656 00a4 1846     		mov	r0, r3
 1657 00a6 FFF7FEFF 		bl	voltage_take_readings
 576:notoriOS.c    ****     
 577:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 578:notoriOS.c    ****     if(m_voltage.valid){
 1658              		.loc 1 578 0
 1659 00aa 97F87C30 		ldrb	r3, [r7, #124]	@ zero_extendqisi2
 1660 00ae 002B     		cmp	r3, #0
 1661 00b0 00F0B280 		beq	.L60
 579:notoriOS.c    ****         // battery voltage data
 580:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1662              		.loc 1 580 0
 1663 00b4 7B6E     		ldr	r3, [r7, #100]	@ float
 1664 00b6 1846     		mov	r0, r3
 1665 00b8 FFF7FEFF 		bl	__aeabi_f2d
 1666 00bc 0346     		mov	r3, r0
 1667 00be 0C46     		mov	r4, r1
 1668 00c0 07F18000 		add	r0, r7, #128
 1669 00c4 CDE90034 		strd	r3, [sp]
 1670 00c8 7E4A     		ldr	r2, .L69+40
 1671 00ca 1421     		movs	r1, #20
 1672 00cc FFF7FEFF 		bl	snprintf
 581:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1673              		.loc 1 581 0
 1674 00d0 07F18003 		add	r3, r7, #128
 1675 00d4 1A46     		mov	r2, r3
 1676 00d6 7C49     		ldr	r1, .L69+44
 1677 00d8 0020     		movs	r0, #0
 1678 00da FFF7FEFF 		bl	printNotif
 582:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1679              		.loc 1 582 0
 1680 00de 07F18003 		add	r3, r7, #128
 1681 00e2 D7F8BC20 		ldr	r2, [r7, #188]
 1682 00e6 1946     		mov	r1, r3
 1683 00e8 7848     		ldr	r0, .L69+48
 1684 00ea FFF7FEFF 		bl	pushData
 583:notoriOS.c    ****         
 584:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 585:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1685              		.loc 1 585 0
 1686 00ee 734A     		ldr	r2, .L69+32
 1687 00f0 6F49     		ldr	r1, .L69+20
 1688 00f2 7048     		ldr	r0, .L69+24
 1689 00f4 FFF7FEFF 		bl	SD_write
 586:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1690              		.loc 1 586 0
 1691 00f8 07F19403 		add	r3, r7, #148
 1692 00fc 1A46     		mov	r2, r3
 1693 00fe 6C49     		ldr	r1, .L69+20
 1694 0100 6C48     		ldr	r0, .L69+24
 1695 0102 FFF7FEFF 		bl	SD_write
 587:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1696              		.loc 1 587 0
 1697 0106 724A     		ldr	r2, .L69+52
 1698 0108 6949     		ldr	r1, .L69+20
 1699 010a 6A48     		ldr	r0, .L69+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 44


 1700 010c FFF7FEFF 		bl	SD_write
 588:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1701              		.loc 1 588 0
 1702 0110 07F18003 		add	r3, r7, #128
 1703 0114 1A46     		mov	r2, r3
 1704 0116 6649     		ldr	r1, .L69+20
 1705 0118 6648     		ldr	r0, .L69+24
 1706 011a FFF7FEFF 		bl	SD_write
 589:notoriOS.c    ****         
 590:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 591:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1707              		.loc 1 591 0
 1708 011e 604B     		ldr	r3, .L69+4
 1709 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1710 0122 012B     		cmp	r3, #1
 1711 0124 7CD1     		bne	.L62
 1712              	.LBB10:
 592:notoriOS.c    ****             
 593:notoriOS.c    ****             // pressure transducer voltage (V) data
 594:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 595:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 596:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 597:notoriOS.c    ****             
 598:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 599:notoriOS.c    ****             pressure_t m_pressure;
 600:notoriOS.c    ****             
 601:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 602:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1713              		.loc 1 602 0
 1714 0126 07F13805 		add	r5, r7, #56
 1715 012a 6C46     		mov	r4, sp
 1716 012c 07F17003 		add	r3, r7, #112
 1717 0130 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1718 0132 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1719 0136 07F16403 		add	r3, r7, #100
 1720 013a 0ECB     		ldmia	r3, {r1, r2, r3}
 1721 013c 2846     		mov	r0, r5
 1722 013e FFF7FEFF 		bl	pressure_calculations
 603:notoriOS.c    ****             
 604:notoriOS.c    ****             // pressure transducer current (mA) data
 605:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1723              		.loc 1 605 0
 1724 0142 3B6C     		ldr	r3, [r7, #64]	@ float
 1725 0144 1846     		mov	r0, r3
 1726 0146 FFF7FEFF 		bl	__aeabi_f2d
 1727 014a 0346     		mov	r3, r0
 1728 014c 0C46     		mov	r4, r1
 1729 014e 07F18000 		add	r0, r7, #128
 1730 0152 CDE90034 		strd	r3, [sp]
 1731 0156 5B4A     		ldr	r2, .L69+40
 1732 0158 1421     		movs	r1, #20
 1733 015a FFF7FEFF 		bl	snprintf
 606:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1734              		.loc 1 606 0
 1735 015e 07F18003 		add	r3, r7, #128
 1736 0162 1A46     		mov	r2, r3
 1737 0164 5B49     		ldr	r1, .L69+56
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 45


 1738 0166 0020     		movs	r0, #0
 1739 0168 FFF7FEFF 		bl	printNotif
 607:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1740              		.loc 1 607 0
 1741 016c 07F18003 		add	r3, r7, #128
 1742 0170 D7F8BC20 		ldr	r2, [r7, #188]
 1743 0174 1946     		mov	r1, r3
 1744 0176 5848     		ldr	r0, .L69+60
 1745 0178 FFF7FEFF 		bl	pushData
 608:notoriOS.c    ****             
 609:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 610:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1746              		.loc 1 610 0
 1747 017c 4F4A     		ldr	r2, .L69+32
 1748 017e 4C49     		ldr	r1, .L69+20
 1749 0180 4C48     		ldr	r0, .L69+24
 1750 0182 FFF7FEFF 		bl	SD_write
 611:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1751              		.loc 1 611 0
 1752 0186 07F19403 		add	r3, r7, #148
 1753 018a 1A46     		mov	r2, r3
 1754 018c 4849     		ldr	r1, .L69+20
 1755 018e 4948     		ldr	r0, .L69+24
 1756 0190 FFF7FEFF 		bl	SD_write
 612:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1757              		.loc 1 612 0
 1758 0194 514A     		ldr	r2, .L69+64
 1759 0196 4649     		ldr	r1, .L69+20
 1760 0198 4648     		ldr	r0, .L69+24
 1761 019a FFF7FEFF 		bl	SD_write
 613:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1762              		.loc 1 613 0
 1763 019e 07F18003 		add	r3, r7, #128
 1764 01a2 1A46     		mov	r2, r3
 1765 01a4 4249     		ldr	r1, .L69+20
 1766 01a6 4348     		ldr	r0, .L69+24
 1767 01a8 FFF7FEFF 		bl	SD_write
 614:notoriOS.c    ****             
 615:notoriOS.c    ****             // pressure transducer depth (ft) data
 616:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1768              		.loc 1 616 0
 1769 01ac 7B6C     		ldr	r3, [r7, #68]	@ float
 1770 01ae 1846     		mov	r0, r3
 1771 01b0 FFF7FEFF 		bl	__aeabi_f2d
 1772 01b4 0346     		mov	r3, r0
 1773 01b6 0C46     		mov	r4, r1
 1774 01b8 07F18000 		add	r0, r7, #128
 1775 01bc CDE90034 		strd	r3, [sp]
 1776 01c0 404A     		ldr	r2, .L69+40
 1777 01c2 1421     		movs	r1, #20
 1778 01c4 FFF7FEFF 		bl	snprintf
 617:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1779              		.loc 1 617 0
 1780 01c8 07F18003 		add	r3, r7, #128
 1781 01cc 1A46     		mov	r2, r3
 1782 01ce 4449     		ldr	r1, .L69+68
 1783 01d0 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 46


 1784 01d2 FFF7FEFF 		bl	printNotif
 618:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1785              		.loc 1 618 0
 1786 01d6 07F18003 		add	r3, r7, #128
 1787 01da D7F8BC20 		ldr	r2, [r7, #188]
 1788 01de 1946     		mov	r1, r3
 1789 01e0 4048     		ldr	r0, .L69+72
 1790 01e2 FFF7FEFF 		bl	pushData
 619:notoriOS.c    ****             
 620:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 621:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1791              		.loc 1 621 0
 1792 01e6 354A     		ldr	r2, .L69+32
 1793 01e8 3149     		ldr	r1, .L69+20
 1794 01ea 3248     		ldr	r0, .L69+24
 1795 01ec FFF7FEFF 		bl	SD_write
 622:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1796              		.loc 1 622 0
 1797 01f0 07F19403 		add	r3, r7, #148
 1798 01f4 1A46     		mov	r2, r3
 1799 01f6 2E49     		ldr	r1, .L69+20
 1800 01f8 2E48     		ldr	r0, .L69+24
 1801 01fa FFF7FEFF 		bl	SD_write
 623:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1802              		.loc 1 623 0
 1803 01fe 3A4A     		ldr	r2, .L69+76
 1804 0200 2B49     		ldr	r1, .L69+20
 1805 0202 2C48     		ldr	r0, .L69+24
 1806 0204 FFF7FEFF 		bl	SD_write
 624:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1807              		.loc 1 624 0
 1808 0208 07F18003 		add	r3, r7, #128
 1809 020c 1A46     		mov	r2, r3
 1810 020e 2849     		ldr	r1, .L69+20
 1811 0210 2848     		ldr	r0, .L69+24
 1812 0212 FFF7FEFF 		bl	SD_write
 1813 0216 03E0     		b	.L62
 1814              	.L60:
 1815              	.LBE10:
 625:notoriOS.c    ****         }    
 626:notoriOS.c    ****     }else{
 627:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1816              		.loc 1 627 0
 1817 0218 3449     		ldr	r1, .L69+80
 1818 021a 0220     		movs	r0, #2
 1819 021c FFF7FEFF 		bl	printNotif
 1820              	.L62:
 628:notoriOS.c    ****     }
 629:notoriOS.c    ****     
 630:notoriOS.c    ****        // If node type is valve, take level sensor measurements and valve position measurements
 631:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_VALVE){
 1821              		.loc 1 631 0
 1822 0220 1F4B     		ldr	r3, .L69+4
 1823 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1824 0224 042B     		cmp	r3, #4
 1825 0226 40F01481 		bne	.L63
 1826              	.LBB11:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 47


 632:notoriOS.c    ****         
 633:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 634:notoriOS.c    ****         level_sensor_t m_level_sensor;
 635:notoriOS.c    ****         
 636:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 637:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1827              		.loc 1 637 0
 1828 022a 07F11C03 		add	r3, r7, #28
 1829 022e 1846     		mov	r0, r3
 1830 0230 FFF7FEFF 		bl	level_sensor_take_reading
 638:notoriOS.c    ****     
 639:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 640:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1831              		.loc 1 640 0
 1832 0234 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
 1833 0238 002B     		cmp	r3, #0
 1834 023a 59D0     		beq	.L64
 641:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1835              		.loc 1 641 0
 1836 023c B7F93230 		ldrsh	r3, [r7, #50]
 1837 0240 07F18000 		add	r0, r7, #128
 1838 0244 174A     		ldr	r2, .L69+8
 1839 0246 1421     		movs	r1, #20
 1840 0248 FFF7FEFF 		bl	snprintf
 642:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1841              		.loc 1 642 0
 1842 024c 07F18003 		add	r3, r7, #128
 1843 0250 1A46     		mov	r2, r3
 1844 0252 1549     		ldr	r1, .L69+12
 1845 0254 0020     		movs	r0, #0
 1846 0256 FFF7FEFF 		bl	printNotif
 643:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1847              		.loc 1 643 0
 1848 025a 07F18003 		add	r3, r7, #128
 1849 025e D7F8BC20 		ldr	r2, [r7, #188]
 1850 0262 1946     		mov	r1, r3
 1851 0264 1148     		ldr	r0, .L69+16
 1852 0266 FFF7FEFF 		bl	pushData
 644:notoriOS.c    ****             
 645:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 646:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1853              		.loc 1 646 0
 1854 026a 07F19403 		add	r3, r7, #148
 1855 026e 1A46     		mov	r2, r3
 1856 0270 0F49     		ldr	r1, .L69+20
 1857 0272 1048     		ldr	r0, .L69+24
 1858 0274 FFF7FEFF 		bl	SD_write
 647:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1859              		.loc 1 647 0
 1860 0278 0F4A     		ldr	r2, .L69+28
 1861 027a 0D49     		ldr	r1, .L69+20
 1862 027c 0D48     		ldr	r0, .L69+24
 1863 027e FFF7FEFF 		bl	SD_write
 648:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1864              		.loc 1 648 0
 1865 0282 07F18003 		add	r3, r7, #128
 1866 0286 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 48


 1867 0288 0949     		ldr	r1, .L69+20
 1868 028a 0A48     		ldr	r0, .L69+24
 1869 028c FFF7FEFF 		bl	SD_write
 649:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1870              		.loc 1 649 0
 1871 0290 0A4A     		ldr	r2, .L69+32
 1872 0292 0749     		ldr	r1, .L69+20
 1873 0294 0748     		ldr	r0, .L69+24
 1874 0296 FFF7FEFF 		bl	SD_write
 1875 029a 2DE0     		b	.L65
 1876              	.L70:
 1877              		.align	2
 1878              	.L69:
 1879 029c 9C020000 		.word	.LC36
 1880 02a0 00000000 		.word	updatable_parameters
 1881 02a4 3C000000 		.word	.LC2
 1882 02a8 A0020000 		.word	.LC37
 1883 02ac B4020000 		.word	.LC38
 1884 02b0 C4020000 		.word	.LC39
 1885 02b4 00000000 		.word	Data_fileName
 1886 02b8 C8020000 		.word	.LC40
 1887 02bc DC020000 		.word	.LC41
 1888 02c0 E0020000 		.word	.LC42
 1889 02c4 0C030000 		.word	.LC43
 1890 02c8 14030000 		.word	.LC44
 1891 02cc 20030000 		.word	.LC45
 1892 02d0 28030000 		.word	.LC46
 1893 02d4 30030000 		.word	.LC47
 1894 02d8 44030000 		.word	.LC48
 1895 02dc 58030000 		.word	.LC49
 1896 02e0 6C030000 		.word	.LC50
 1897 02e4 80030000 		.word	.LC51
 1898 02e8 90030000 		.word	.LC52
 1899 02ec A4030000 		.word	.LC53
 1900              	.L64:
 650:notoriOS.c    ****         }else{
 651:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1901              		.loc 1 651 0
 1902 02f0 5A49     		ldr	r1, .L71
 1903 02f2 0220     		movs	r0, #2
 1904 02f4 FFF7FEFF 		bl	printNotif
 1905              	.L65:
 652:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 653:notoriOS.c    ****         }
 654:notoriOS.c    ****         
 655:notoriOS.c    ****         float32 valve_position = read_Valve_pos();
 1906              		.loc 1 655 0
 1907 02f8 FFF7FEFF 		bl	read_Valve_pos
 1908 02fc C7F8B800 		str	r0, [r7, #184]	@ float
 656:notoriOS.c    ****         
 657:notoriOS.c    ****         // TODO: check this reading for validity
 658:notoriOS.c    ****         
 659:notoriOS.c    ****         
 660:notoriOS.c    ****         snprintf(value,sizeof(value),"%f",valve_position);
 1909              		.loc 1 660 0
 1910 0300 D7F8B800 		ldr	r0, [r7, #184]	@ float
 1911 0304 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 49


 1912 0308 0346     		mov	r3, r0
 1913 030a 0C46     		mov	r4, r1
 1914 030c 07F18000 		add	r0, r7, #128
 1915 0310 CDE90034 		strd	r3, [sp]
 1916 0314 524A     		ldr	r2, .L71+4
 1917 0316 1421     		movs	r1, #20
 1918 0318 FFF7FEFF 		bl	snprintf
 661:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"valve_open=%s",value);
 1919              		.loc 1 661 0
 1920 031c 07F18003 		add	r3, r7, #128
 1921 0320 1A46     		mov	r2, r3
 1922 0322 5049     		ldr	r1, .L71+8
 1923 0324 0020     		movs	r0, #0
 1924 0326 FFF7FEFF 		bl	printNotif
 662:notoriOS.c    ****         pushData("valve_open",value,timeStamp);
 1925              		.loc 1 662 0
 1926 032a 07F18003 		add	r3, r7, #128
 1927 032e D7F8BC20 		ldr	r2, [r7, #188]
 1928 0332 1946     		mov	r1, r3
 1929 0334 4C48     		ldr	r0, .L71+12
 1930 0336 FFF7FEFF 		bl	pushData
 663:notoriOS.c    ****         
 664:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 665:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1931              		.loc 1 665 0
 1932 033a 07F19403 		add	r3, r7, #148
 1933 033e 1A46     		mov	r2, r3
 1934 0340 4A49     		ldr	r1, .L71+16
 1935 0342 4B48     		ldr	r0, .L71+20
 1936 0344 FFF7FEFF 		bl	SD_write
 666:notoriOS.c    ****         SD_write(Data_fileName, "a+", " valve_open: ");
 1937              		.loc 1 666 0
 1938 0348 4A4A     		ldr	r2, .L71+24
 1939 034a 4849     		ldr	r1, .L71+16
 1940 034c 4848     		ldr	r0, .L71+20
 1941 034e FFF7FEFF 		bl	SD_write
 667:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1942              		.loc 1 667 0
 1943 0352 07F18003 		add	r3, r7, #128
 1944 0356 1A46     		mov	r2, r3
 1945 0358 4449     		ldr	r1, .L71+16
 1946 035a 4548     		ldr	r0, .L71+20
 1947 035c FFF7FEFF 		bl	SD_write
 668:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1948              		.loc 1 668 0
 1949 0360 454A     		ldr	r2, .L71+28
 1950 0362 4249     		ldr	r1, .L71+16
 1951 0364 4248     		ldr	r0, .L71+20
 1952 0366 FFF7FEFF 		bl	SD_write
 669:notoriOS.c    ****         
 670:notoriOS.c    ****         
 671:notoriOS.c    ****         
 672:notoriOS.c    ****         // downstream level sensing
 673:notoriOS.c    ****                 // Take level sensor readings and save them to m_level_sensor
 674:notoriOS.c    ****         level_sensor_t downstream_level_sensor = downstream_level_sensor_take_reading();
 1953              		.loc 1 674 0
 1954 036a 3B46     		mov	r3, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 50


 1955 036c 1846     		mov	r0, r3
 1956 036e FFF7FEFF 		bl	downstream_level_sensor_take_reading
 675:notoriOS.c    ****     
 676:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 677:notoriOS.c    ****         if(downstream_level_sensor.num_valid_readings > 0){
 1957              		.loc 1 677 0
 1958 0372 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1959 0374 002B     		cmp	r3, #0
 1960 0376 2FD0     		beq	.L66
 678:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",downstream_level_sensor.level_reading);
 1961              		.loc 1 678 0
 1962 0378 B7F91630 		ldrsh	r3, [r7, #22]
 1963 037c 07F18000 		add	r0, r7, #128
 1964 0380 3E4A     		ldr	r2, .L71+32
 1965 0382 1421     		movs	r1, #20
 1966 0384 FFF7FEFF 		bl	snprintf
 679:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"downstream_maxbotix_depth=%s",value);
 1967              		.loc 1 679 0
 1968 0388 07F18003 		add	r3, r7, #128
 1969 038c 1A46     		mov	r2, r3
 1970 038e 3C49     		ldr	r1, .L71+36
 1971 0390 0020     		movs	r0, #0
 1972 0392 FFF7FEFF 		bl	printNotif
 680:notoriOS.c    ****             pushData("downstream_maxbotix_depth",value,timeStamp);
 1973              		.loc 1 680 0
 1974 0396 07F18003 		add	r3, r7, #128
 1975 039a D7F8BC20 		ldr	r2, [r7, #188]
 1976 039e 1946     		mov	r1, r3
 1977 03a0 3848     		ldr	r0, .L71+40
 1978 03a2 FFF7FEFF 		bl	pushData
 681:notoriOS.c    ****             
 682:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 683:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1979              		.loc 1 683 0
 1980 03a6 07F19403 		add	r3, r7, #148
 1981 03aa 1A46     		mov	r2, r3
 1982 03ac 2F49     		ldr	r1, .L71+16
 1983 03ae 3048     		ldr	r0, .L71+20
 1984 03b0 FFF7FEFF 		bl	SD_write
 684:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1985              		.loc 1 684 0
 1986 03b4 344A     		ldr	r2, .L71+44
 1987 03b6 2D49     		ldr	r1, .L71+16
 1988 03b8 2D48     		ldr	r0, .L71+20
 1989 03ba FFF7FEFF 		bl	SD_write
 685:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1990              		.loc 1 685 0
 1991 03be 07F18003 		add	r3, r7, #128
 1992 03c2 1A46     		mov	r2, r3
 1993 03c4 2949     		ldr	r1, .L71+16
 1994 03c6 2A48     		ldr	r0, .L71+20
 1995 03c8 FFF7FEFF 		bl	SD_write
 686:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1996              		.loc 1 686 0
 1997 03cc 2A4A     		ldr	r2, .L71+28
 1998 03ce 2749     		ldr	r1, .L71+16
 1999 03d0 2748     		ldr	r0, .L71+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 51


 2000 03d2 FFF7FEFF 		bl	SD_write
 2001 03d6 03E0     		b	.L67
 2002              	.L66:
 687:notoriOS.c    ****         }else{
 688:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 2003              		.loc 1 688 0
 2004 03d8 2049     		ldr	r1, .L71
 2005 03da 0220     		movs	r0, #2
 2006 03dc FFF7FEFF 		bl	printNotif
 2007              	.L67:
 689:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 690:notoriOS.c    ****         }
 691:notoriOS.c    ****         
 692:notoriOS.c    ****         // discharge estimate
 693:notoriOS.c    ****         float32 discharge_estimate = calculate_discharge();
 2008              		.loc 1 693 0
 2009 03e0 FFF7FEFF 		bl	calculate_discharge
 2010 03e4 C7F8B400 		str	r0, [r7, #180]	@ float
 694:notoriOS.c    ****         snprintf(value,sizeof(value),"%f",discharge_estimate);
 2011              		.loc 1 694 0
 2012 03e8 D7F8B400 		ldr	r0, [r7, #180]	@ float
 2013 03ec FFF7FEFF 		bl	__aeabi_f2d
 2014 03f0 0346     		mov	r3, r0
 2015 03f2 0C46     		mov	r4, r1
 2016 03f4 07F18000 		add	r0, r7, #128
 2017 03f8 CDE90034 		strd	r3, [sp]
 2018 03fc 184A     		ldr	r2, .L71+4
 2019 03fe 1421     		movs	r1, #20
 2020 0400 FFF7FEFF 		bl	snprintf
 695:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"estimated_discharge=%s",value);
 2021              		.loc 1 695 0
 2022 0404 07F18003 		add	r3, r7, #128
 2023 0408 1A46     		mov	r2, r3
 2024 040a 2049     		ldr	r1, .L71+48
 2025 040c 0020     		movs	r0, #0
 2026 040e FFF7FEFF 		bl	printNotif
 696:notoriOS.c    ****         pushData("estimated_discharge",value,timeStamp);
 2027              		.loc 1 696 0
 2028 0412 07F18003 		add	r3, r7, #128
 2029 0416 D7F8BC20 		ldr	r2, [r7, #188]
 2030 041a 1946     		mov	r1, r3
 2031 041c 1C48     		ldr	r0, .L71+52
 2032 041e FFF7FEFF 		bl	pushData
 697:notoriOS.c    ****         
 698:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 699:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 2033              		.loc 1 699 0
 2034 0422 07F19403 		add	r3, r7, #148
 2035 0426 1A46     		mov	r2, r3
 2036 0428 1049     		ldr	r1, .L71+16
 2037 042a 1148     		ldr	r0, .L71+20
 2038 042c FFF7FEFF 		bl	SD_write
 700:notoriOS.c    ****         SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 2039              		.loc 1 700 0
 2040 0430 154A     		ldr	r2, .L71+44
 2041 0432 0E49     		ldr	r1, .L71+16
 2042 0434 0E48     		ldr	r0, .L71+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 52


 2043 0436 FFF7FEFF 		bl	SD_write
 701:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 2044              		.loc 1 701 0
 2045 043a 07F18003 		add	r3, r7, #128
 2046 043e 1A46     		mov	r2, r3
 2047 0440 0A49     		ldr	r1, .L71+16
 2048 0442 0B48     		ldr	r0, .L71+20
 2049 0444 FFF7FEFF 		bl	SD_write
 702:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 2050              		.loc 1 702 0
 2051 0448 0B4A     		ldr	r2, .L71+28
 2052 044a 0849     		ldr	r1, .L71+16
 2053 044c 0848     		ldr	r0, .L71+20
 2054 044e FFF7FEFF 		bl	SD_write
 2055              	.L63:
 2056              	.LBE11:
 703:notoriOS.c    ****         
 704:notoriOS.c    ****         
 705:notoriOS.c    ****     }
 706:notoriOS.c    ****     
 707:notoriOS.c    ****     return 0u;
 2057              		.loc 1 707 0
 2058 0452 0023     		movs	r3, #0
 708:notoriOS.c    **** }
 2059              		.loc 1 708 0
 2060 0454 1846     		mov	r0, r3
 2061 0456 C037     		adds	r7, r7, #192
 2062              		.cfi_def_cfa_offset 16
 2063 0458 BD46     		mov	sp, r7
 2064              		.cfi_def_cfa_register 13
 2065              		@ sp needed
 2066 045a B0BD     		pop	{r4, r5, r7, pc}
 2067              	.L72:
 2068              		.align	2
 2069              	.L71:
 2070 045c E0020000 		.word	.LC42
 2071 0460 CC030000 		.word	.LC54
 2072 0464 D0030000 		.word	.LC55
 2073 0468 E0030000 		.word	.LC56
 2074 046c C4020000 		.word	.LC39
 2075 0470 00000000 		.word	Data_fileName
 2076 0474 EC030000 		.word	.LC57
 2077 0478 DC020000 		.word	.LC41
 2078 047c 3C000000 		.word	.LC2
 2079 0480 FC030000 		.word	.LC58
 2080 0484 1C040000 		.word	.LC59
 2081 0488 C8020000 		.word	.LC40
 2082 048c 38040000 		.word	.LC60
 2083 0490 50040000 		.word	.LC61
 2084              		.cfi_endproc
 2085              	.LFE76:
 2086              		.size	makeMeasurements, .-makeMeasurements
 2087              		.section	.rodata
 2088              		.align	2
 2089              	.LC62:
 2090 0464 4572726F 		.ascii	"Error setting system time.\000"
 2090      72207365 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 53


 2090      7474696E 
 2090      67207379 
 2090      7374656D 
 2091              		.section	.text.setTime,"ax",%progbits
 2092              		.align	2
 2093              		.global	setTime
 2094              		.thumb
 2095              		.thumb_func
 2096              		.type	setTime, %function
 2097              	setTime:
 2098              	.LFB77:
 709:notoriOS.c    **** 
 710:notoriOS.c    **** // ==============================================
 711:notoriOS.c    **** // Set the system time
 712:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 713:notoriOS.c    **** // ==============================================
 714:notoriOS.c    **** uint8 setTime(long timeStamp){
 2099              		.loc 1 714 0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 24
 2102              		@ frame_needed = 1, uses_anonymous_args = 0
 2103 0000 80B5     		push	{r7, lr}
 2104              		.cfi_def_cfa_offset 8
 2105              		.cfi_offset 7, -8
 2106              		.cfi_offset 14, -4
 2107 0002 86B0     		sub	sp, sp, #24
 2108              		.cfi_def_cfa_offset 32
 2109 0004 00AF     		add	r7, sp, #0
 2110              		.cfi_def_cfa_register 7
 2111 0006 7860     		str	r0, [r7, #4]
 715:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 716:notoriOS.c    ****     if(timeStamp <=0){
 2112              		.loc 1 716 0
 2113 0008 7B68     		ldr	r3, [r7, #4]
 2114 000a 002B     		cmp	r3, #0
 2115 000c 05DC     		bgt	.L74
 717:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 2116              		.loc 1 717 0
 2117 000e 1849     		ldr	r1, .L76
 2118 0010 0220     		movs	r0, #2
 2119 0012 FFF7FEFF 		bl	printNotif
 718:notoriOS.c    ****         return 0;  
 2120              		.loc 1 718 0
 2121 0016 0023     		movs	r3, #0
 2122 0018 25E0     		b	.L75
 2123              	.L74:
 719:notoriOS.c    ****     }
 720:notoriOS.c    ****     // Create a new pointer t of data structure tm
 721:notoriOS.c    ****     struct tm * t;
 722:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 723:notoriOS.c    ****     t = gmtime(&timeStamp);
 2124              		.loc 1 723 0
 2125 001a 3B1D     		adds	r3, r7, #4
 2126 001c 1846     		mov	r0, r3
 2127 001e FFF7FEFF 		bl	gmtime
 2128 0022 7861     		str	r0, [r7, #20]
 724:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 54


 725:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 726:notoriOS.c    ****     RTC_TIME_DATE localTime;
 727:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 2129              		.loc 1 727 0
 2130 0024 7B69     		ldr	r3, [r7, #20]
 2131 0026 1B68     		ldr	r3, [r3]
 2132 0028 DBB2     		uxtb	r3, r3
 2133 002a 3B72     		strb	r3, [r7, #8]
 728:notoriOS.c    ****     localTime.Min = t->tm_min;
 2134              		.loc 1 728 0
 2135 002c 7B69     		ldr	r3, [r7, #20]
 2136 002e 5B68     		ldr	r3, [r3, #4]
 2137 0030 DBB2     		uxtb	r3, r3
 2138 0032 7B72     		strb	r3, [r7, #9]
 729:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 2139              		.loc 1 729 0
 2140 0034 7B69     		ldr	r3, [r7, #20]
 2141 0036 9B68     		ldr	r3, [r3, #8]
 2142 0038 DBB2     		uxtb	r3, r3
 2143 003a BB72     		strb	r3, [r7, #10]
 730:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 2144              		.loc 1 730 0
 2145 003c 7B69     		ldr	r3, [r7, #20]
 2146 003e 5B69     		ldr	r3, [r3, #20]
 2147 0040 9BB2     		uxth	r3, r3
 2148 0042 03F26C73 		addw	r3, r3, #1900
 2149 0046 9BB2     		uxth	r3, r3
 2150 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 731:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2151              		.loc 1 731 0
 2152 004a 7B69     		ldr	r3, [r7, #20]
 2153 004c 1B69     		ldr	r3, [r3, #16]
 2154 004e DBB2     		uxtb	r3, r3
 2155 0050 3B74     		strb	r3, [r7, #16]
 732:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2156              		.loc 1 732 0
 2157 0052 7B69     		ldr	r3, [r7, #20]
 2158 0054 DB68     		ldr	r3, [r3, #12]
 2159 0056 DBB2     		uxtb	r3, r3
 2160 0058 3B73     		strb	r3, [r7, #12]
 733:notoriOS.c    **** 
 734:notoriOS.c    ****     // Writes time and date values as current time and date.
 735:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2161              		.loc 1 735 0
 2162 005a 07F10803 		add	r3, r7, #8
 2163 005e 1846     		mov	r0, r3
 2164 0060 FFF7FEFF 		bl	RTC_WriteTime
 736:notoriOS.c    ****     
 737:notoriOS.c    ****     // Return 1 when the system time was set properly.
 738:notoriOS.c    ****     return 1;
 2165              		.loc 1 738 0
 2166 0064 0123     		movs	r3, #1
 2167              	.L75:
 739:notoriOS.c    **** }
 2168              		.loc 1 739 0
 2169 0066 1846     		mov	r0, r3
 2170 0068 1837     		adds	r7, r7, #24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 55


 2171              		.cfi_def_cfa_offset 8
 2172 006a BD46     		mov	sp, r7
 2173              		.cfi_def_cfa_register 13
 2174              		@ sp needed
 2175 006c 80BD     		pop	{r7, pc}
 2176              	.L77:
 2177 006e 00BF     		.align	2
 2178              	.L76:
 2179 0070 64040000 		.word	.LC62
 2180              		.cfi_endproc
 2181              	.LFE77:
 2182              		.size	setTime, .-setTime
 2183              		.section	.rodata
 2184 047f 00       		.align	2
 2185              	.LC63:
 2186 0480 75706772 		.ascii	"upgrade.hex\000"
 2186      6164652E 
 2186      68657800 
 2187              		.section	.text.upgraded,"ax",%progbits
 2188              		.align	2
 2189              		.global	upgraded
 2190              		.thumb
 2191              		.thumb_func
 2192              		.type	upgraded, %function
 2193              	upgraded:
 2194              	.LFB78:
 740:notoriOS.c    **** 
 741:notoriOS.c    **** //downloads and stores files on SD card
 742:notoriOS.c    **** 
 743:notoriOS.c    **** 
 744:notoriOS.c    **** 
 745:notoriOS.c    **** // ==============================================
 746:notoriOS.c    **** // Will they love it, will they hate it
 747:notoriOS.c    **** // Never fade it, I evade it
 748:notoriOS.c    **** // Cause I never really want to complicate it
 749:notoriOS.c    **** //      - Logic, Upgraded (2015)
 750:notoriOS.c    **** //
 751:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 752:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 753:notoriOS.c    **** // ==============================================
 754:notoriOS.c    **** 
 755:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2195              		.loc 1 755 0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 232
 2198              		@ frame_needed = 1, uses_anonymous_args = 0
 2199 0000 80B5     		push	{r7, lr}
 2200              		.cfi_def_cfa_offset 8
 2201              		.cfi_offset 7, -8
 2202              		.cfi_offset 14, -4
 2203 0002 C0B0     		sub	sp, sp, #256
 2204              		.cfi_def_cfa_offset 264
 2205 0004 06AF     		add	r7, sp, #24
 2206              		.cfi_def_cfa 7, 240
 2207 0006 F860     		str	r0, [r7, #12]
 2208 0008 B960     		str	r1, [r7, #8]
 2209 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 56


 756:notoriOS.c    ****     
 757:notoriOS.c    ****     uint8 upgrade_status = 0;
 2210              		.loc 1 757 0
 2211 000c 0023     		movs	r3, #0
 2212 000e 87F8E730 		strb	r3, [r7, #231]
 758:notoriOS.c    ****     
 759:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 760:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2213              		.loc 1 760 0
 2214 0012 384B     		ldr	r3, .L82
 2215 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2216 0016 042B     		cmp	r3, #4
 2217 0018 02D0     		beq	.L79
 761:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2218              		.loc 1 761 0
 2219 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2220 001e 65E0     		b	.L81
 2221              	.L79:
 762:notoriOS.c    ****     }
 763:notoriOS.c    ****     
 764:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2222              		.loc 1 764 0
 2223 0020 354A     		ldr	r2, .L82+4
 2224 0022 07F1D803 		add	r3, r7, #216
 2225 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2226 0028 83E80700 		stmia	r3, {r0, r1, r2}
 765:notoriOS.c    ****     //delete file, if one exisits already
 766:notoriOS.c    ****     SD_rmfile(fileName);
 2227              		.loc 1 766 0
 2228 002c 07F1D803 		add	r3, r7, #216
 2229 0030 1846     		mov	r0, r3
 2230 0032 FFF7FEFF 		bl	SD_rmfile
 767:notoriOS.c    ****     
 768:notoriOS.c    ****     // Create http request
 769:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2231              		.loc 1 769 0
 2232 0036 314B     		ldr	r3, .L82+8
 2233 0038 0593     		str	r3, [sp, #20]
 2234 003a 0023     		movs	r3, #0
 2235 003c 0493     		str	r3, [sp, #16]
 2236 003e 304B     		ldr	r3, .L82+12
 2237 0040 0393     		str	r3, [sp, #12]
 2238 0042 304B     		ldr	r3, .L82+16
 2239 0044 0293     		str	r3, [sp, #8]
 2240 0046 304B     		ldr	r3, .L82+20
 2241 0048 0193     		str	r3, [sp, #4]
 2242 004a BB68     		ldr	r3, [r7, #8]
 2243 004c 0093     		str	r3, [sp]
 2244 004e 7B68     		ldr	r3, [r7, #4]
 2245 0050 FA68     		ldr	r2, [r7, #12]
 2246 0052 2E49     		ldr	r1, .L82+24
 2247 0054 2E48     		ldr	r0, .L82+28
 2248 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 770:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2249              		.loc 1 770 0
 2250 005a 2D4A     		ldr	r2, .L82+28
 2251 005c 2D49     		ldr	r1, .L82+32
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 57


 2252 005e 0020     		movs	r0, #0
 2253 0060 FFF7FEFF 		bl	printNotif
 771:notoriOS.c    ****     // Create array portConfig of size 200 characters
 772:notoriOS.c    ****     char portConfig[200];
 773:notoriOS.c    ****     // Print port configurations
 774:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2254              		.loc 1 774 0
 2255 0064 07F11000 		add	r0, r7, #16
 2256 0068 FB68     		ldr	r3, [r7, #12]
 2257 006a 0093     		str	r3, [sp]
 2258 006c BB68     		ldr	r3, [r7, #8]
 2259 006e 2A4A     		ldr	r2, .L82+36
 2260 0070 C821     		movs	r1, #200
 2261 0072 FFF7FEFF 		bl	snprintf
 775:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2262              		.loc 1 775 0
 2263 0076 07F11003 		add	r3, r7, #16
 2264 007a 1A46     		mov	r2, r3
 2265 007c 2749     		ldr	r1, .L82+40
 2266 007e 0020     		movs	r0, #0
 2267 0080 FFF7FEFF 		bl	printNotif
 776:notoriOS.c    ****     // AT command to configure the port
 777:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2268              		.loc 1 777 0
 2269 0084 07F11003 		add	r3, r7, #16
 2270 0088 42F21072 		movw	r2, #10000
 2271 008c 2449     		ldr	r1, .L82+44
 2272 008e 1846     		mov	r0, r3
 2273 0090 FFF7FEFF 		bl	at_write_command
 2274 0094 0346     		mov	r3, r0
 2275 0096 87F8E730 		strb	r3, [r7, #231]
 778:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 779:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 780:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2276              		.loc 1 780 0
 2277 009a 4FF47A72 		mov	r2, #1000
 2278 009e 2149     		ldr	r1, .L82+48
 2279 00a0 2148     		ldr	r0, .L82+52
 2280 00a2 FFF7FEFF 		bl	at_write_command
 2281 00a6 0346     		mov	r3, r0
 2282 00a8 87F8E730 		strb	r3, [r7, #231]
 781:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 782:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2283              		.loc 1 782 0
 2284 00ac 1848     		ldr	r0, .L82+28
 2285 00ae FFF7FEFF 		bl	strlen
 2286 00b2 0346     		mov	r3, r0
 2287 00b4 1A46     		mov	r2, r3
 2288 00b6 164B     		ldr	r3, .L82+28
 2289 00b8 1344     		add	r3, r3, r2
 2290 00ba 1C49     		ldr	r1, .L82+56
 2291 00bc 1A46     		mov	r2, r3
 2292 00be 0B46     		mov	r3, r1
 2293 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2294 00c2 1380     		strh	r3, [r2]	@ unaligned
 783:notoriOS.c    ****     // AT command to send http request
 784:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 58


 2295              		.loc 1 784 0
 2296 00c4 41F28832 		movw	r2, #5000
 2297 00c8 1549     		ldr	r1, .L82+44
 2298 00ca 1148     		ldr	r0, .L82+28
 2299 00cc FFF7FEFF 		bl	at_write_command
 2300 00d0 0346     		mov	r3, r0
 2301 00d2 87F8E730 		strb	r3, [r7, #231]
 785:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 786:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 787:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2302              		.loc 1 787 0
 2303 00d6 41F28832 		movw	r2, #5000
 2304 00da 1549     		ldr	r1, .L82+60
 2305 00dc 1548     		ldr	r0, .L82+64
 2306 00de FFF7FEFF 		bl	at_write_command
 2307 00e2 0346     		mov	r3, r0
 2308 00e4 87F8E730 		strb	r3, [r7, #231]
 788:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 789:notoriOS.c    ****     
 790:notoriOS.c    ****     
 791:notoriOS.c    ****     return upgrade_status;
 2309              		.loc 1 791 0
 2310 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2311              	.L81:
 792:notoriOS.c    ****     
 793:notoriOS.c    **** }
 2312              		.loc 1 793 0 discriminator 1
 2313 00ec 1846     		mov	r0, r3
 2314 00ee E837     		adds	r7, r7, #232
 2315              		.cfi_def_cfa_offset 8
 2316 00f0 BD46     		mov	sp, r7
 2317              		.cfi_def_cfa_register 13
 2318              		@ sp needed
 2319 00f2 80BD     		pop	{r7, pc}
 2320              	.L83:
 2321              		.align	2
 2322              	.L82:
 2323 00f4 00000000 		.word	modem_state
 2324 00f8 80040000 		.word	.LC63
 2325 00fc 94010000 		.word	.LC17
 2326 0100 98010000 		.word	.LC18
 2327 0104 9C010000 		.word	.LC19
 2328 0108 A4010000 		.word	.LC20
 2329 010c 00000000 		.word	http_body
 2330 0110 00000000 		.word	http_request
 2331 0114 AC010000 		.word	.LC21
 2332 0118 C4010000 		.word	.LC22
 2333 011c E0010000 		.word	.LC23
 2334 0120 E4010000 		.word	.LC24
 2335 0124 14020000 		.word	.LC27
 2336 0128 18020000 		.word	.LC28
 2337 012c 28020000 		.word	.LC29
 2338 0130 44020000 		.word	.LC32
 2339 0134 4C020000 		.word	.LC33
 2340              		.cfi_endproc
 2341              	.LFE78:
 2342              		.size	upgraded, .-upgraded
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 59


 2343              		.text
 2344              	.Letext0:
 2345              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2346              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2347              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2348              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2349              		.file 6 "testing.h"
 2350              		.file 7 "level_sensor.h"
 2351              		.file 8 "voltages.h"
 2352              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2353              		.file 10 "data.h"
 2354              		.file 11 "modem.h"
 2355              		.file 12 "notoriOS.h"
 2356              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2357              		.section	.debug_info,"",%progbits
 2358              	.Ldebug_info0:
 2359 0000 8E0C0000 		.4byte	0xc8e
 2360 0004 0400     		.2byte	0x4
 2361 0006 00000000 		.4byte	.Ldebug_abbrev0
 2362 000a 04       		.byte	0x4
 2363 000b 01       		.uleb128 0x1
 2364 000c AC000000 		.4byte	.LASF167
 2365 0010 0C       		.byte	0xc
 2366 0011 27080000 		.4byte	.LASF168
 2367 0015 2C000000 		.4byte	.LASF169
 2368 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2369 001d 00000000 		.4byte	0
 2370 0021 00000000 		.4byte	.Ldebug_line0
 2371 0025 02       		.uleb128 0x2
 2372 0026 01       		.byte	0x1
 2373 0027 06       		.byte	0x6
 2374 0028 7D000000 		.4byte	.LASF0
 2375 002c 02       		.uleb128 0x2
 2376 002d 01       		.byte	0x1
 2377 002e 08       		.byte	0x8
 2378 002f 01060000 		.4byte	.LASF1
 2379 0033 02       		.uleb128 0x2
 2380 0034 02       		.byte	0x2
 2381 0035 05       		.byte	0x5
 2382 0036 57040000 		.4byte	.LASF2
 2383 003a 02       		.uleb128 0x2
 2384 003b 02       		.byte	0x2
 2385 003c 07       		.byte	0x7
 2386 003d A7070000 		.4byte	.LASF3
 2387 0041 03       		.uleb128 0x3
 2388 0042 62070000 		.4byte	.LASF9
 2389 0046 02       		.byte	0x2
 2390 0047 3F       		.byte	0x3f
 2391 0048 4C000000 		.4byte	0x4c
 2392 004c 02       		.uleb128 0x2
 2393 004d 04       		.byte	0x4
 2394 004e 05       		.byte	0x5
 2395 004f 41020000 		.4byte	.LASF4
 2396 0053 02       		.uleb128 0x2
 2397 0054 04       		.byte	0x4
 2398 0055 07       		.byte	0x7
 2399 0056 94030000 		.4byte	.LASF5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 60


 2400 005a 02       		.uleb128 0x2
 2401 005b 08       		.byte	0x8
 2402 005c 05       		.byte	0x5
 2403 005d 9C010000 		.4byte	.LASF6
 2404 0061 02       		.uleb128 0x2
 2405 0062 08       		.byte	0x8
 2406 0063 07       		.byte	0x7
 2407 0064 4B010000 		.4byte	.LASF7
 2408 0068 04       		.uleb128 0x4
 2409 0069 04       		.byte	0x4
 2410 006a 05       		.byte	0x5
 2411 006b 696E7400 		.ascii	"int\000"
 2412 006f 02       		.uleb128 0x2
 2413 0070 04       		.byte	0x4
 2414 0071 07       		.byte	0x7
 2415 0072 40030000 		.4byte	.LASF8
 2416 0076 03       		.uleb128 0x3
 2417 0077 F9050000 		.4byte	.LASF10
 2418 007b 03       		.byte	0x3
 2419 007c 2C       		.byte	0x2c
 2420 007d 41000000 		.4byte	0x41
 2421 0081 05       		.uleb128 0x5
 2422 0082 78020000 		.4byte	.LASF11
 2423 0086 04       		.byte	0x4
 2424 0087 9201     		.2byte	0x192
 2425 0089 2C000000 		.4byte	0x2c
 2426 008d 05       		.uleb128 0x5
 2427 008e 08000000 		.4byte	.LASF12
 2428 0092 04       		.byte	0x4
 2429 0093 9301     		.2byte	0x193
 2430 0095 3A000000 		.4byte	0x3a
 2431 0099 05       		.uleb128 0x5
 2432 009a BC020000 		.4byte	.LASF13
 2433 009e 04       		.byte	0x4
 2434 009f 9401     		.2byte	0x194
 2435 00a1 53000000 		.4byte	0x53
 2436 00a5 05       		.uleb128 0x5
 2437 00a6 1A040000 		.4byte	.LASF14
 2438 00aa 04       		.byte	0x4
 2439 00ab 9501     		.2byte	0x195
 2440 00ad 25000000 		.4byte	0x25
 2441 00b1 05       		.uleb128 0x5
 2442 00b2 3C080000 		.4byte	.LASF15
 2443 00b6 04       		.byte	0x4
 2444 00b7 9601     		.2byte	0x196
 2445 00b9 33000000 		.4byte	0x33
 2446 00bd 05       		.uleb128 0x5
 2447 00be 96020000 		.4byte	.LASF16
 2448 00c2 04       		.byte	0x4
 2449 00c3 9701     		.2byte	0x197
 2450 00c5 4C000000 		.4byte	0x4c
 2451 00c9 05       		.uleb128 0x5
 2452 00ca CC040000 		.4byte	.LASF17
 2453 00ce 04       		.byte	0x4
 2454 00cf 9801     		.2byte	0x198
 2455 00d1 D5000000 		.4byte	0xd5
 2456 00d5 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 61


 2457 00d6 04       		.byte	0x4
 2458 00d7 04       		.byte	0x4
 2459 00d8 9E050000 		.4byte	.LASF18
 2460 00dc 02       		.uleb128 0x2
 2461 00dd 08       		.byte	0x8
 2462 00de 04       		.byte	0x4
 2463 00df CD080000 		.4byte	.LASF19
 2464 00e3 02       		.uleb128 0x2
 2465 00e4 01       		.byte	0x1
 2466 00e5 08       		.byte	0x8
 2467 00e6 23070000 		.4byte	.LASF20
 2468 00ea 02       		.uleb128 0x2
 2469 00eb 08       		.byte	0x8
 2470 00ec 04       		.byte	0x4
 2471 00ed 05070000 		.4byte	.LASF21
 2472 00f1 02       		.uleb128 0x2
 2473 00f2 04       		.byte	0x4
 2474 00f3 07       		.byte	0x7
 2475 00f4 E5040000 		.4byte	.LASF22
 2476 00f8 06       		.uleb128 0x6
 2477 00f9 04       		.byte	0x4
 2478 00fa E3000000 		.4byte	0xe3
 2479 00fe 07       		.uleb128 0x7
 2480 00ff E3000000 		.4byte	0xe3
 2481 0103 0E010000 		.4byte	0x10e
 2482 0107 08       		.uleb128 0x8
 2483 0108 F1000000 		.4byte	0xf1
 2484 010c 17       		.byte	0x17
 2485 010d 00       		.byte	0
 2486 010e 09       		.uleb128 0x9
 2487 010f 0C       		.byte	0xc
 2488 0110 05       		.byte	0x5
 2489 0111 30       		.byte	0x30
 2490 0112 77010000 		.4byte	0x177
 2491 0116 0A       		.uleb128 0xa
 2492 0117 53656300 		.ascii	"Sec\000"
 2493 011b 05       		.byte	0x5
 2494 011c 32       		.byte	0x32
 2495 011d 81000000 		.4byte	0x81
 2496 0121 00       		.byte	0
 2497 0122 0A       		.uleb128 0xa
 2498 0123 4D696E00 		.ascii	"Min\000"
 2499 0127 05       		.byte	0x5
 2500 0128 33       		.byte	0x33
 2501 0129 81000000 		.4byte	0x81
 2502 012d 01       		.byte	0x1
 2503 012e 0B       		.uleb128 0xb
 2504 012f 62010000 		.4byte	.LASF23
 2505 0133 05       		.byte	0x5
 2506 0134 34       		.byte	0x34
 2507 0135 81000000 		.4byte	0x81
 2508 0139 02       		.byte	0x2
 2509 013a 0B       		.uleb128 0xb
 2510 013b 64060000 		.4byte	.LASF24
 2511 013f 05       		.byte	0x5
 2512 0140 35       		.byte	0x35
 2513 0141 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 62


 2514 0145 03       		.byte	0x3
 2515 0146 0B       		.uleb128 0xb
 2516 0147 D5030000 		.4byte	.LASF25
 2517 014b 05       		.byte	0x5
 2518 014c 36       		.byte	0x36
 2519 014d 81000000 		.4byte	0x81
 2520 0151 04       		.byte	0x4
 2521 0152 0B       		.uleb128 0xb
 2522 0153 87080000 		.4byte	.LASF26
 2523 0157 05       		.byte	0x5
 2524 0158 37       		.byte	0x37
 2525 0159 8D000000 		.4byte	0x8d
 2526 015d 06       		.byte	0x6
 2527 015e 0B       		.uleb128 0xb
 2528 015f 45010000 		.4byte	.LASF27
 2529 0163 05       		.byte	0x5
 2530 0164 38       		.byte	0x38
 2531 0165 81000000 		.4byte	0x81
 2532 0169 08       		.byte	0x8
 2533 016a 0B       		.uleb128 0xb
 2534 016b EE050000 		.4byte	.LASF28
 2535 016f 05       		.byte	0x5
 2536 0170 39       		.byte	0x39
 2537 0171 8D000000 		.4byte	0x8d
 2538 0175 0A       		.byte	0xa
 2539 0176 00       		.byte	0
 2540 0177 03       		.uleb128 0x3
 2541 0178 30050000 		.4byte	.LASF29
 2542 017c 05       		.byte	0x5
 2543 017d 3A       		.byte	0x3a
 2544 017e 82010000 		.4byte	0x182
 2545 0182 0C       		.uleb128 0xc
 2546 0183 0E010000 		.4byte	0x10e
 2547 0187 0D       		.uleb128 0xd
 2548 0188 8101     		.2byte	0x181
 2549 018a 06       		.byte	0x6
 2550 018b 0A       		.byte	0xa
 2551 018c B5010000 		.4byte	0x1b5
 2552 0190 0B       		.uleb128 0xb
 2553 0191 E4050000 		.4byte	.LASF30
 2554 0195 06       		.byte	0x6
 2555 0196 0C       		.byte	0xc
 2556 0197 B5010000 		.4byte	0x1b5
 2557 019b 00       		.byte	0
 2558 019c 0B       		.uleb128 0xb
 2559 019d FC070000 		.4byte	.LASF31
 2560 01a1 06       		.byte	0x6
 2561 01a2 0D       		.byte	0xd
 2562 01a3 81000000 		.4byte	0x81
 2563 01a7 80       		.byte	0x80
 2564 01a8 0B       		.uleb128 0xb
 2565 01a9 86060000 		.4byte	.LASF32
 2566 01ad 06       		.byte	0x6
 2567 01ae 0F       		.byte	0xf
 2568 01af C5010000 		.4byte	0x1c5
 2569 01b3 81       		.byte	0x81
 2570 01b4 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 63


 2571 01b5 07       		.uleb128 0x7
 2572 01b6 E3000000 		.4byte	0xe3
 2573 01ba C5010000 		.4byte	0x1c5
 2574 01be 08       		.uleb128 0x8
 2575 01bf F1000000 		.4byte	0xf1
 2576 01c3 7F       		.byte	0x7f
 2577 01c4 00       		.byte	0
 2578 01c5 07       		.uleb128 0x7
 2579 01c6 E3000000 		.4byte	0xe3
 2580 01ca D5010000 		.4byte	0x1d5
 2581 01ce 08       		.uleb128 0x8
 2582 01cf F1000000 		.4byte	0xf1
 2583 01d3 FF       		.byte	0xff
 2584 01d4 00       		.byte	0
 2585 01d5 03       		.uleb128 0x3
 2586 01d6 6E060000 		.4byte	.LASF33
 2587 01da 06       		.byte	0x6
 2588 01db 10       		.byte	0x10
 2589 01dc 87010000 		.4byte	0x187
 2590 01e0 09       		.uleb128 0x9
 2591 01e1 1A       		.byte	0x1a
 2592 01e2 07       		.byte	0x7
 2593 01e3 10       		.byte	0x10
 2594 01e4 19020000 		.4byte	0x219
 2595 01e8 0B       		.uleb128 0xb
 2596 01e9 CC020000 		.4byte	.LASF34
 2597 01ed 07       		.byte	0x7
 2598 01ee 11       		.byte	0x11
 2599 01ef 19020000 		.4byte	0x219
 2600 01f3 00       		.byte	0
 2601 01f4 0B       		.uleb128 0xb
 2602 01f5 91070000 		.4byte	.LASF35
 2603 01f9 07       		.byte	0x7
 2604 01fa 12       		.byte	0x12
 2605 01fb B1000000 		.4byte	0xb1
 2606 01ff 16       		.byte	0x16
 2607 0200 0B       		.uleb128 0xb
 2608 0201 6C030000 		.4byte	.LASF36
 2609 0205 07       		.byte	0x7
 2610 0206 13       		.byte	0x13
 2611 0207 81000000 		.4byte	0x81
 2612 020b 18       		.byte	0x18
 2613 020c 0B       		.uleb128 0xb
 2614 020d 17000000 		.4byte	.LASF37
 2615 0211 07       		.byte	0x7
 2616 0212 14       		.byte	0x14
 2617 0213 81000000 		.4byte	0x81
 2618 0217 19       		.byte	0x19
 2619 0218 00       		.byte	0
 2620 0219 07       		.uleb128 0x7
 2621 021a B1000000 		.4byte	0xb1
 2622 021e 29020000 		.4byte	0x229
 2623 0222 08       		.uleb128 0x8
 2624 0223 F1000000 		.4byte	0xf1
 2625 0227 0A       		.byte	0xa
 2626 0228 00       		.byte	0
 2627 0229 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 64


 2628 022a A4050000 		.4byte	.LASF38
 2629 022e 07       		.byte	0x7
 2630 022f 15       		.byte	0x15
 2631 0230 E0010000 		.4byte	0x1e0
 2632 0234 09       		.uleb128 0x9
 2633 0235 1C       		.byte	0x1c
 2634 0236 08       		.byte	0x8
 2635 0237 14       		.byte	0x14
 2636 0238 91020000 		.4byte	0x291
 2637 023c 0B       		.uleb128 0xb
 2638 023d C5030000 		.4byte	.LASF39
 2639 0241 08       		.byte	0x8
 2640 0242 15       		.byte	0x15
 2641 0243 D5000000 		.4byte	0xd5
 2642 0247 00       		.byte	0
 2643 0248 0B       		.uleb128 0xb
 2644 0249 E8010000 		.4byte	.LASF40
 2645 024d 08       		.byte	0x8
 2646 024e 16       		.byte	0x16
 2647 024f D5000000 		.4byte	0xd5
 2648 0253 04       		.byte	0x4
 2649 0254 0B       		.uleb128 0xb
 2650 0255 F6010000 		.4byte	.LASF41
 2651 0259 08       		.byte	0x8
 2652 025a 17       		.byte	0x17
 2653 025b D5000000 		.4byte	0xd5
 2654 025f 08       		.byte	0x8
 2655 0260 0B       		.uleb128 0xb
 2656 0261 80050000 		.4byte	.LASF42
 2657 0265 08       		.byte	0x8
 2658 0266 18       		.byte	0x18
 2659 0267 D5000000 		.4byte	0xd5
 2660 026b 0C       		.byte	0xc
 2661 026c 0B       		.uleb128 0xb
 2662 026d 75080000 		.4byte	.LASF43
 2663 0271 08       		.byte	0x8
 2664 0272 19       		.byte	0x19
 2665 0273 D5000000 		.4byte	0xd5
 2666 0277 10       		.byte	0x10
 2667 0278 0B       		.uleb128 0xb
 2668 0279 28070000 		.4byte	.LASF44
 2669 027d 08       		.byte	0x8
 2670 027e 1A       		.byte	0x1a
 2671 027f D5000000 		.4byte	0xd5
 2672 0283 14       		.byte	0x14
 2673 0284 0B       		.uleb128 0xb
 2674 0285 F7060000 		.4byte	.LASF45
 2675 0289 08       		.byte	0x8
 2676 028a 1B       		.byte	0x1b
 2677 028b 81000000 		.4byte	0x81
 2678 028f 18       		.byte	0x18
 2679 0290 00       		.byte	0
 2680 0291 03       		.uleb128 0x3
 2681 0292 D4080000 		.4byte	.LASF46
 2682 0296 08       		.byte	0x8
 2683 0297 1C       		.byte	0x1c
 2684 0298 34020000 		.4byte	0x234
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 65


 2685 029c 09       		.uleb128 0x9
 2686 029d 10       		.byte	0x10
 2687 029e 08       		.byte	0x8
 2688 029f 1E       		.byte	0x1e
 2689 02a0 D5020000 		.4byte	0x2d5
 2690 02a4 0B       		.uleb128 0xb
 2691 02a5 2C030000 		.4byte	.LASF47
 2692 02a9 08       		.byte	0x8
 2693 02aa 1F       		.byte	0x1f
 2694 02ab D5000000 		.4byte	0xd5
 2695 02af 00       		.byte	0
 2696 02b0 0B       		.uleb128 0xb
 2697 02b1 63020000 		.4byte	.LASF48
 2698 02b5 08       		.byte	0x8
 2699 02b6 20       		.byte	0x20
 2700 02b7 D5000000 		.4byte	0xd5
 2701 02bb 04       		.byte	0x4
 2702 02bc 0B       		.uleb128 0xb
 2703 02bd E6060000 		.4byte	.LASF49
 2704 02c1 08       		.byte	0x8
 2705 02c2 21       		.byte	0x21
 2706 02c3 D5000000 		.4byte	0xd5
 2707 02c7 08       		.byte	0x8
 2708 02c8 0B       		.uleb128 0xb
 2709 02c9 50060000 		.4byte	.LASF50
 2710 02cd 08       		.byte	0x8
 2711 02ce 22       		.byte	0x22
 2712 02cf D5000000 		.4byte	0xd5
 2713 02d3 0C       		.byte	0xc
 2714 02d4 00       		.byte	0
 2715 02d5 03       		.uleb128 0x3
 2716 02d6 91080000 		.4byte	.LASF51
 2717 02da 08       		.byte	0x8
 2718 02db 23       		.byte	0x23
 2719 02dc 9C020000 		.4byte	0x29c
 2720 02e0 0E       		.uleb128 0xe
 2721 02e1 746D00   		.ascii	"tm\000"
 2722 02e4 24       		.byte	0x24
 2723 02e5 09       		.byte	0x9
 2724 02e6 21       		.byte	0x21
 2725 02e7 58030000 		.4byte	0x358
 2726 02eb 0B       		.uleb128 0xb
 2727 02ec EA070000 		.4byte	.LASF52
 2728 02f0 09       		.byte	0x9
 2729 02f1 23       		.byte	0x23
 2730 02f2 68000000 		.4byte	0x68
 2731 02f6 00       		.byte	0
 2732 02f7 0B       		.uleb128 0xb
 2733 02f8 C5040000 		.4byte	.LASF53
 2734 02fc 09       		.byte	0x9
 2735 02fd 24       		.byte	0x24
 2736 02fe 68000000 		.4byte	0x68
 2737 0302 04       		.byte	0x4
 2738 0303 0B       		.uleb128 0xb
 2739 0304 0F000000 		.4byte	.LASF54
 2740 0308 09       		.byte	0x9
 2741 0309 25       		.byte	0x25
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 66


 2742 030a 68000000 		.4byte	0x68
 2743 030e 08       		.byte	0x8
 2744 030f 0B       		.uleb128 0xb
 2745 0310 C1070000 		.4byte	.LASF55
 2746 0314 09       		.byte	0x9
 2747 0315 26       		.byte	0x26
 2748 0316 68000000 		.4byte	0x68
 2749 031a 0C       		.byte	0xc
 2750 031b 0B       		.uleb128 0xb
 2751 031c F7020000 		.4byte	.LASF56
 2752 0320 09       		.byte	0x9
 2753 0321 27       		.byte	0x27
 2754 0322 68000000 		.4byte	0x68
 2755 0326 10       		.byte	0x10
 2756 0327 0B       		.uleb128 0xb
 2757 0328 1A030000 		.4byte	.LASF57
 2758 032c 09       		.byte	0x9
 2759 032d 28       		.byte	0x28
 2760 032e 68000000 		.4byte	0x68
 2761 0332 14       		.byte	0x14
 2762 0333 0B       		.uleb128 0xb
 2763 0334 FD060000 		.4byte	.LASF58
 2764 0338 09       		.byte	0x9
 2765 0339 29       		.byte	0x29
 2766 033a 68000000 		.4byte	0x68
 2767 033e 18       		.byte	0x18
 2768 033f 0B       		.uleb128 0xb
 2769 0340 EE040000 		.4byte	.LASF59
 2770 0344 09       		.byte	0x9
 2771 0345 2A       		.byte	0x2a
 2772 0346 68000000 		.4byte	0x68
 2773 034a 1C       		.byte	0x1c
 2774 034b 0B       		.uleb128 0xb
 2775 034c FE030000 		.4byte	.LASF60
 2776 0350 09       		.byte	0x9
 2777 0351 2B       		.byte	0x2b
 2778 0352 68000000 		.4byte	0x68
 2779 0356 20       		.byte	0x20
 2780 0357 00       		.byte	0
 2781 0358 09       		.uleb128 0x9
 2782 0359 2C       		.byte	0x2c
 2783 035a 0A       		.byte	0xa
 2784 035b 14       		.byte	0x14
 2785 035c 85030000 		.4byte	0x385
 2786 0360 0A       		.uleb128 0xa
 2787 0361 6B657900 		.ascii	"key\000"
 2788 0365 0A       		.byte	0xa
 2789 0366 15       		.byte	0x15
 2790 0367 85030000 		.4byte	0x385
 2791 036b 00       		.byte	0
 2792 036c 0B       		.uleb128 0xb
 2793 036d 0F030000 		.4byte	.LASF61
 2794 0371 0A       		.byte	0xa
 2795 0372 16       		.byte	0x16
 2796 0373 85030000 		.4byte	0x385
 2797 0377 14       		.byte	0x14
 2798 0378 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 67


 2799 0379 26050000 		.4byte	.LASF62
 2800 037d 0A       		.byte	0xa
 2801 037e 17       		.byte	0x17
 2802 037f BD000000 		.4byte	0xbd
 2803 0383 28       		.byte	0x28
 2804 0384 00       		.byte	0
 2805 0385 07       		.uleb128 0x7
 2806 0386 E3000000 		.4byte	0xe3
 2807 038a 95030000 		.4byte	0x395
 2808 038e 08       		.uleb128 0x8
 2809 038f F1000000 		.4byte	0xf1
 2810 0393 13       		.byte	0x13
 2811 0394 00       		.byte	0
 2812 0395 03       		.uleb128 0x3
 2813 0396 55030000 		.4byte	.LASF63
 2814 039a 0A       		.byte	0xa
 2815 039b 19       		.byte	0x19
 2816 039c 58030000 		.4byte	0x358
 2817 03a0 09       		.uleb128 0x9
 2818 03a1 3C       		.byte	0x3c
 2819 03a2 0B       		.byte	0xb
 2820 03a3 37       		.byte	0x37
 2821 03a4 CD030000 		.4byte	0x3cd
 2822 03a8 0B       		.uleb128 0xb
 2823 03a9 BA070000 		.4byte	.LASF64
 2824 03ad 0B       		.byte	0xb
 2825 03ae 38       		.byte	0x38
 2826 03af 85030000 		.4byte	0x385
 2827 03b3 00       		.byte	0
 2828 03b4 0B       		.uleb128 0xb
 2829 03b5 C3020000 		.4byte	.LASF65
 2830 03b9 0B       		.byte	0xb
 2831 03ba 39       		.byte	0x39
 2832 03bb 85030000 		.4byte	0x385
 2833 03bf 14       		.byte	0x14
 2834 03c0 0B       		.uleb128 0xb
 2835 03c1 81060000 		.4byte	.LASF66
 2836 03c5 0B       		.byte	0xb
 2837 03c6 3A       		.byte	0x3a
 2838 03c7 85030000 		.4byte	0x385
 2839 03cb 28       		.byte	0x28
 2840 03cc 00       		.byte	0
 2841 03cd 03       		.uleb128 0x3
 2842 03ce 2E020000 		.4byte	.LASF67
 2843 03d2 0B       		.byte	0xb
 2844 03d3 3C       		.byte	0x3c
 2845 03d4 A0030000 		.4byte	0x3a0
 2846 03d8 09       		.uleb128 0x9
 2847 03d9 20       		.byte	0x20
 2848 03da 0B       		.byte	0xb
 2849 03db 3E       		.byte	0x3e
 2850 03dc 41040000 		.4byte	0x441
 2851 03e0 0B       		.uleb128 0xb
 2852 03e1 3B020000 		.4byte	.LASF68
 2853 03e5 0B       		.byte	0xb
 2854 03e6 3F       		.byte	0x3f
 2855 03e7 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 68


 2856 03eb 00       		.byte	0
 2857 03ec 0A       		.uleb128 0xa
 2858 03ed 62657200 		.ascii	"ber\000"
 2859 03f1 0B       		.byte	0xb
 2860 03f2 40       		.byte	0x40
 2861 03f3 68000000 		.4byte	0x68
 2862 03f7 04       		.byte	0x4
 2863 03f8 0B       		.uleb128 0xb
 2864 03f9 5F060000 		.4byte	.LASF69
 2865 03fd 0B       		.byte	0xb
 2866 03fe 41       		.byte	0x41
 2867 03ff 68000000 		.4byte	0x68
 2868 0403 08       		.byte	0x8
 2869 0404 0B       		.uleb128 0xb
 2870 0405 B2010000 		.4byte	.LASF70
 2871 0409 0B       		.byte	0xb
 2872 040a 42       		.byte	0x42
 2873 040b 68000000 		.4byte	0x68
 2874 040f 0C       		.byte	0xc
 2875 0410 0B       		.uleb128 0xb
 2876 0411 2A060000 		.4byte	.LASF71
 2877 0415 0B       		.byte	0xb
 2878 0416 43       		.byte	0x43
 2879 0417 68000000 		.4byte	0x68
 2880 041b 10       		.byte	0x10
 2881 041c 0B       		.uleb128 0xb
 2882 041d 25060000 		.4byte	.LASF72
 2883 0421 0B       		.byte	0xb
 2884 0422 44       		.byte	0x44
 2885 0423 68000000 		.4byte	0x68
 2886 0427 14       		.byte	0x14
 2887 0428 0B       		.uleb128 0xb
 2888 0429 C5010000 		.4byte	.LASF73
 2889 042d 0B       		.byte	0xb
 2890 042e 45       		.byte	0x45
 2891 042f 68000000 		.4byte	0x68
 2892 0433 18       		.byte	0x18
 2893 0434 0B       		.uleb128 0xb
 2894 0435 4A020000 		.4byte	.LASF74
 2895 0439 0B       		.byte	0xb
 2896 043a 46       		.byte	0x46
 2897 043b 68000000 		.4byte	0x68
 2898 043f 1C       		.byte	0x1c
 2899 0440 00       		.byte	0
 2900 0441 03       		.uleb128 0x3
 2901 0442 D8060000 		.4byte	.LASF75
 2902 0446 0B       		.byte	0xb
 2903 0447 48       		.byte	0x48
 2904 0448 D8030000 		.4byte	0x3d8
 2905 044c 09       		.uleb128 0x9
 2906 044d 05       		.byte	0x5
 2907 044e 0B       		.byte	0xb
 2908 044f 54       		.byte	0x54
 2909 0450 91040000 		.4byte	0x491
 2910 0454 0B       		.uleb128 0xb
 2911 0455 9C020000 		.4byte	.LASF76
 2912 0459 0B       		.byte	0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 69


 2913 045a 56       		.byte	0x56
 2914 045b 81000000 		.4byte	0x81
 2915 045f 00       		.byte	0
 2916 0460 0B       		.uleb128 0xb
 2917 0461 66080000 		.4byte	.LASF77
 2918 0465 0B       		.byte	0xb
 2919 0466 58       		.byte	0x58
 2920 0467 91040000 		.4byte	0x491
 2921 046b 01       		.byte	0x1
 2922 046c 0B       		.uleb128 0xb
 2923 046d 75070000 		.4byte	.LASF78
 2924 0471 0B       		.byte	0xb
 2925 0472 5A       		.byte	0x5a
 2926 0473 81000000 		.4byte	0x81
 2927 0477 02       		.byte	0x2
 2928 0478 0B       		.uleb128 0xb
 2929 0479 46060000 		.4byte	.LASF79
 2930 047d 0B       		.byte	0xb
 2931 047e 5C       		.byte	0x5c
 2932 047f 81000000 		.4byte	0x81
 2933 0483 03       		.byte	0x3
 2934 0484 0B       		.uleb128 0xb
 2935 0485 FE020000 		.4byte	.LASF80
 2936 0489 0B       		.byte	0xb
 2937 048a 5F       		.byte	0x5f
 2938 048b 81000000 		.4byte	0x81
 2939 048f 04       		.byte	0x4
 2940 0490 00       		.byte	0
 2941 0491 02       		.uleb128 0x2
 2942 0492 01       		.byte	0x1
 2943 0493 02       		.byte	0x2
 2944 0494 F3050000 		.4byte	.LASF81
 2945 0498 03       		.uleb128 0x3
 2946 0499 92040000 		.4byte	.LASF82
 2947 049d 0B       		.byte	0xb
 2948 049e 61       		.byte	0x61
 2949 049f 4C040000 		.4byte	0x44c
 2950 04a3 09       		.uleb128 0x9
 2951 04a4 06       		.byte	0x6
 2952 04a5 0C       		.byte	0xc
 2953 04a6 2E       		.byte	0x2e
 2954 04a7 DC040000 		.4byte	0x4dc
 2955 04ab 0B       		.uleb128 0xb
 2956 04ac DF020000 		.4byte	.LASF83
 2957 04b0 0C       		.byte	0xc
 2958 04b1 30       		.byte	0x30
 2959 04b2 8D000000 		.4byte	0x8d
 2960 04b6 00       		.byte	0
 2961 04b7 0B       		.uleb128 0xb
 2962 04b8 50080000 		.4byte	.LASF84
 2963 04bc 0C       		.byte	0xc
 2964 04bd 31       		.byte	0x31
 2965 04be B1000000 		.4byte	0xb1
 2966 04c2 02       		.byte	0x2
 2967 04c3 0B       		.uleb128 0xb
 2968 04c4 42080000 		.4byte	.LASF85
 2969 04c8 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 70


 2970 04c9 32       		.byte	0x32
 2971 04ca 81000000 		.4byte	0x81
 2972 04ce 04       		.byte	0x4
 2973 04cf 0B       		.uleb128 0xb
 2974 04d0 89000000 		.4byte	.LASF86
 2975 04d4 0C       		.byte	0xc
 2976 04d5 33       		.byte	0x33
 2977 04d6 81000000 		.4byte	0x81
 2978 04da 05       		.byte	0x5
 2979 04db 00       		.byte	0
 2980 04dc 03       		.uleb128 0x3
 2981 04dd 5D020000 		.4byte	.LASF87
 2982 04e1 0C       		.byte	0xc
 2983 04e2 36       		.byte	0x36
 2984 04e3 E7040000 		.4byte	0x4e7
 2985 04e7 0C       		.uleb128 0xc
 2986 04e8 A3040000 		.4byte	0x4a3
 2987 04ec 09       		.uleb128 0x9
 2988 04ed 1C       		.byte	0x1c
 2989 04ee 0C       		.byte	0xc
 2990 04ef 39       		.byte	0x39
 2991 04f0 0D050000 		.4byte	0x50d
 2992 04f4 0B       		.uleb128 0xb
 2993 04f5 07040000 		.4byte	.LASF88
 2994 04f9 0C       		.byte	0xc
 2995 04fa 3B       		.byte	0x3b
 2996 04fb 0D050000 		.4byte	0x50d
 2997 04ff 00       		.byte	0
 2998 0500 0B       		.uleb128 0xb
 2999 0501 B7080000 		.4byte	.LASF89
 3000 0505 0C       		.byte	0xc
 3001 0506 3C       		.byte	0x3c
 3002 0507 FE000000 		.4byte	0xfe
 3003 050b 04       		.byte	0x4
 3004 050c 00       		.byte	0
 3005 050d 06       		.uleb128 0x6
 3006 050e 04       		.byte	0x4
 3007 050f CD030000 		.4byte	0x3cd
 3008 0513 03       		.uleb128 0x3
 3009 0514 87040000 		.4byte	.LASF90
 3010 0518 0C       		.byte	0xc
 3011 0519 3E       		.byte	0x3e
 3012 051a EC040000 		.4byte	0x4ec
 3013 051e 09       		.uleb128 0x9
 3014 051f 68       		.byte	0x68
 3015 0520 0C       		.byte	0xc
 3016 0521 44       		.byte	0x44
 3017 0522 3F050000 		.4byte	0x53f
 3018 0526 0B       		.uleb128 0xb
 3019 0527 12040000 		.4byte	.LASF91
 3020 052b 0C       		.byte	0xc
 3021 052c 49       		.byte	0x49
 3022 052d 3F050000 		.4byte	0x53f
 3023 0531 00       		.byte	0
 3024 0532 0B       		.uleb128 0xb
 3025 0533 F6030000 		.4byte	.LASF92
 3026 0537 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 71


 3027 0538 4A       		.byte	0x4a
 3028 0539 68000000 		.4byte	0x68
 3029 053d 64       		.byte	0x64
 3030 053e 00       		.byte	0
 3031 053f 07       		.uleb128 0x7
 3032 0540 E3000000 		.4byte	0xe3
 3033 0544 4F050000 		.4byte	0x54f
 3034 0548 08       		.uleb128 0x8
 3035 0549 F1000000 		.4byte	0xf1
 3036 054d 63       		.byte	0x63
 3037 054e 00       		.byte	0
 3038 054f 03       		.uleb128 0x3
 3039 0550 F6040000 		.4byte	.LASF93
 3040 0554 0C       		.byte	0xc
 3041 0555 50       		.byte	0x50
 3042 0556 1E050000 		.4byte	0x51e
 3043 055a 0F       		.uleb128 0xf
 3044 055b A1000000 		.4byte	.LASF170
 3045 055f 01       		.byte	0x1
 3046 0560 14       		.byte	0x14
 3047 0561 00000000 		.4byte	.LFB64
 3048 0565 0C000000 		.4byte	.LFE64-.LFB64
 3049 0569 01       		.uleb128 0x1
 3050 056a 9C       		.byte	0x9c
 3051 056b 10       		.uleb128 0x10
 3052 056c A7080000 		.4byte	.LASF107
 3053 0570 01       		.byte	0x1
 3054 0571 28       		.byte	0x28
 3055 0572 00000000 		.4byte	.LFB65
 3056 0576 2C010000 		.4byte	.LFE65-.LFB65
 3057 057a 01       		.uleb128 0x1
 3058 057b 9C       		.byte	0x9c
 3059 057c AB050000 		.4byte	0x5ab
 3060 0580 11       		.uleb128 0x11
 3061 0581 6C070000 		.4byte	.LASF94
 3062 0585 01       		.byte	0x1
 3063 0586 3C       		.byte	0x3c
 3064 0587 AB050000 		.4byte	0x5ab
 3065 058b 02       		.uleb128 0x2
 3066 058c 91       		.byte	0x91
 3067 058d 64       		.sleb128 -28
 3068 058e 11       		.uleb128 0x11
 3069 058f 6F080000 		.4byte	.LASF95
 3070 0593 01       		.byte	0x1
 3071 0594 59       		.byte	0x59
 3072 0595 BB050000 		.4byte	0x5bb
 3073 0599 02       		.uleb128 0x2
 3074 059a 91       		.byte	0x91
 3075 059b 58       		.sleb128 -40
 3076 059c 11       		.uleb128 0x11
 3077 059d A6030000 		.4byte	.LASF96
 3078 05a1 01       		.byte	0x1
 3079 05a2 5E       		.byte	0x5e
 3080 05a3 81000000 		.4byte	0x81
 3081 05a7 02       		.uleb128 0x2
 3082 05a8 91       		.byte	0x91
 3083 05a9 6F       		.sleb128 -17
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 72


 3084 05aa 00       		.byte	0
 3085 05ab 07       		.uleb128 0x7
 3086 05ac 99000000 		.4byte	0x99
 3087 05b0 BB050000 		.4byte	0x5bb
 3088 05b4 08       		.uleb128 0x8
 3089 05b5 F1000000 		.4byte	0xf1
 3090 05b9 01       		.byte	0x1
 3091 05ba 00       		.byte	0
 3092 05bb 07       		.uleb128 0x7
 3093 05bc E3000000 		.4byte	0xe3
 3094 05c0 CB050000 		.4byte	0x5cb
 3095 05c4 08       		.uleb128 0x8
 3096 05c5 F1000000 		.4byte	0xf1
 3097 05c9 09       		.byte	0x9
 3098 05ca 00       		.byte	0
 3099 05cb 12       		.uleb128 0x12
 3100 05cc 1F040000 		.4byte	.LASF98
 3101 05d0 01       		.byte	0x1
 3102 05d1 68       		.byte	0x68
 3103 05d2 68000000 		.4byte	0x68
 3104 05d6 00000000 		.4byte	.LFB66
 3105 05da 64000000 		.4byte	.LFE66-.LFB66
 3106 05de 01       		.uleb128 0x1
 3107 05df 9C       		.byte	0x9c
 3108 05e0 F3050000 		.4byte	0x5f3
 3109 05e4 11       		.uleb128 0x11
 3110 05e5 D7050000 		.4byte	.LASF97
 3111 05e9 01       		.byte	0x1
 3112 05ea 82       		.byte	0x82
 3113 05eb 81000000 		.4byte	0x81
 3114 05ef 02       		.uleb128 0x2
 3115 05f0 91       		.byte	0x91
 3116 05f1 77       		.sleb128 -9
 3117 05f2 00       		.byte	0
 3118 05f3 13       		.uleb128 0x13
 3119 05f4 9F070000 		.4byte	.LASF171
 3120 05f8 01       		.byte	0x1
 3121 05f9 92       		.byte	0x92
 3122 05fa 00000000 		.4byte	.LFB67
 3123 05fe 2A000000 		.4byte	.LFE67-.LFB67
 3124 0602 01       		.uleb128 0x1
 3125 0603 9C       		.byte	0x9c
 3126 0604 14       		.uleb128 0x14
 3127 0605 61030000 		.4byte	.LASF99
 3128 0609 01       		.byte	0x1
 3129 060a B7       		.byte	0xb7
 3130 060b 00000000 		.4byte	.LFB68
 3131 060f 50000000 		.4byte	.LFE68-.LFB68
 3132 0613 01       		.uleb128 0x1
 3133 0614 9C       		.byte	0x9c
 3134 0615 28060000 		.4byte	0x628
 3135 0619 15       		.uleb128 0x15
 3136 061a A9040000 		.4byte	.LASF100
 3137 061e 01       		.byte	0x1
 3138 061f B7       		.byte	0xb7
 3139 0620 81000000 		.4byte	0x81
 3140 0624 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 73


 3141 0625 91       		.byte	0x91
 3142 0626 77       		.sleb128 -9
 3143 0627 00       		.byte	0
 3144 0628 16       		.uleb128 0x16
 3145 0629 9C080000 		.4byte	.LASF104
 3146 062d 01       		.byte	0x1
 3147 062e CE       		.byte	0xce
 3148 062f 81000000 		.4byte	0x81
 3149 0633 00000000 		.4byte	.LFB69
 3150 0637 48000000 		.4byte	.LFE69-.LFB69
 3151 063b 01       		.uleb128 0x1
 3152 063c 9C       		.byte	0x9c
 3153 063d 5E060000 		.4byte	0x65e
 3154 0641 15       		.uleb128 0x15
 3155 0642 D4040000 		.4byte	.LASF101
 3156 0646 01       		.byte	0x1
 3157 0647 CE       		.byte	0xce
 3158 0648 5E060000 		.4byte	0x65e
 3159 064c 02       		.uleb128 0x2
 3160 064d 91       		.byte	0x91
 3161 064e 74       		.sleb128 -12
 3162 064f 15       		.uleb128 0x15
 3163 0650 A9040000 		.4byte	.LASF100
 3164 0654 01       		.byte	0x1
 3165 0655 CE       		.byte	0xce
 3166 0656 81000000 		.4byte	0x81
 3167 065a 02       		.uleb128 0x2
 3168 065b 91       		.byte	0x91
 3169 065c 73       		.sleb128 -13
 3170 065d 00       		.byte	0
 3171 065e 06       		.uleb128 0x6
 3172 065f 04       		.byte	0x4
 3173 0660 DC040000 		.4byte	0x4dc
 3174 0664 17       		.uleb128 0x17
 3175 0665 2F060000 		.4byte	.LASF102
 3176 0669 01       		.byte	0x1
 3177 066a E3       		.byte	0xe3
 3178 066b 00000000 		.4byte	.LFB70
 3179 066f 1E000000 		.4byte	.LFE70-.LFB70
 3180 0673 01       		.uleb128 0x1
 3181 0674 9C       		.byte	0x9c
 3182 0675 88060000 		.4byte	0x688
 3183 0679 15       		.uleb128 0x15
 3184 067a 8D060000 		.4byte	.LASF103
 3185 067e 01       		.byte	0x1
 3186 067f E3       		.byte	0xe3
 3187 0680 5E060000 		.4byte	0x65e
 3188 0684 02       		.uleb128 0x2
 3189 0685 91       		.byte	0x91
 3190 0686 74       		.sleb128 -12
 3191 0687 00       		.byte	0
 3192 0688 18       		.uleb128 0x18
 3193 0689 53050000 		.4byte	.LASF105
 3194 068d 01       		.byte	0x1
 3195 068e EC       		.byte	0xec
 3196 068f DC040000 		.4byte	0x4dc
 3197 0693 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 74


 3198 0697 46000000 		.4byte	.LFE71-.LFB71
 3199 069b 01       		.uleb128 0x1
 3200 069c 9C       		.byte	0x9c
 3201 069d DA060000 		.4byte	0x6da
 3202 06a1 15       		.uleb128 0x15
 3203 06a2 DF020000 		.4byte	.LASF83
 3204 06a6 01       		.byte	0x1
 3205 06a7 EC       		.byte	0xec
 3206 06a8 8D000000 		.4byte	0x8d
 3207 06ac 02       		.uleb128 0x2
 3208 06ad 91       		.byte	0x91
 3209 06ae 6A       		.sleb128 -22
 3210 06af 15       		.uleb128 0x15
 3211 06b0 42080000 		.4byte	.LASF85
 3212 06b4 01       		.byte	0x1
 3213 06b5 EC       		.byte	0xec
 3214 06b6 81000000 		.4byte	0x81
 3215 06ba 02       		.uleb128 0x2
 3216 06bb 91       		.byte	0x91
 3217 06bc 69       		.sleb128 -23
 3218 06bd 15       		.uleb128 0x15
 3219 06be 89000000 		.4byte	.LASF86
 3220 06c2 01       		.byte	0x1
 3221 06c3 EC       		.byte	0xec
 3222 06c4 81000000 		.4byte	0x81
 3223 06c8 02       		.uleb128 0x2
 3224 06c9 91       		.byte	0x91
 3225 06ca 68       		.sleb128 -24
 3226 06cb 11       		.uleb128 0x11
 3227 06cc E1070000 		.4byte	.LASF106
 3228 06d0 01       		.byte	0x1
 3229 06d1 EF       		.byte	0xef
 3230 06d2 DC040000 		.4byte	0x4dc
 3231 06d6 02       		.uleb128 0x2
 3232 06d7 91       		.byte	0x91
 3233 06d8 70       		.sleb128 -16
 3234 06d9 00       		.byte	0
 3235 06da 19       		.uleb128 0x19
 3236 06db 9C060000 		.4byte	.LASF108
 3237 06df 01       		.byte	0x1
 3238 06e0 0501     		.2byte	0x105
 3239 06e2 00000000 		.4byte	.LFB72
 3240 06e6 2C010000 		.4byte	.LFE72-.LFB72
 3241 06ea 01       		.uleb128 0x1
 3242 06eb 9C       		.byte	0x9c
 3243 06ec 51070000 		.4byte	0x751
 3244 06f0 1A       		.uleb128 0x1a
 3245 06f1 8D010000 		.4byte	.LASF109
 3246 06f5 01       		.byte	0x1
 3247 06f6 0D01     		.2byte	0x10d
 3248 06f8 D5010000 		.4byte	0x1d5
 3249 06fc 03       		.uleb128 0x3
 3250 06fd 91       		.byte	0x91
 3251 06fe EC7C     		.sleb128 -404
 3252 0700 1A       		.uleb128 0x1a
 3253 0701 C5080000 		.4byte	.LASF110
 3254 0705 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 75


 3255 0706 1101     		.2byte	0x111
 3256 0708 D5010000 		.4byte	0x1d5
 3257 070c 03       		.uleb128 0x3
 3258 070d 91       		.byte	0x91
 3259 070e E879     		.sleb128 -792
 3260 0710 1A       		.uleb128 0x1a
 3261 0711 1C080000 		.4byte	.LASF111
 3262 0715 01       		.byte	0x1
 3263 0716 1501     		.2byte	0x115
 3264 0718 D5010000 		.4byte	0x1d5
 3265 071c 03       		.uleb128 0x3
 3266 071d 91       		.byte	0x91
 3267 071e E476     		.sleb128 -1180
 3268 0720 1A       		.uleb128 0x1a
 3269 0721 3A010000 		.4byte	.LASF112
 3270 0725 01       		.byte	0x1
 3271 0726 1901     		.2byte	0x119
 3272 0728 D5010000 		.4byte	0x1d5
 3273 072c 03       		.uleb128 0x3
 3274 072d 91       		.byte	0x91
 3275 072e E073     		.sleb128 -1568
 3276 0730 1A       		.uleb128 0x1a
 3277 0731 4D040000 		.4byte	.LASF113
 3278 0735 01       		.byte	0x1
 3279 0736 1D01     		.2byte	0x11d
 3280 0738 D5010000 		.4byte	0x1d5
 3281 073c 03       		.uleb128 0x3
 3282 073d 91       		.byte	0x91
 3283 073e DC70     		.sleb128 -1956
 3284 0740 1A       		.uleb128 0x1a
 3285 0741 00000000 		.4byte	.LASF114
 3286 0745 01       		.byte	0x1
 3287 0746 2101     		.2byte	0x121
 3288 0748 D5010000 		.4byte	0x1d5
 3289 074c 03       		.uleb128 0x3
 3290 074d 91       		.byte	0x91
 3291 074e D86D     		.sleb128 -2344
 3292 0750 00       		.byte	0
 3293 0751 1B       		.uleb128 0x1b
 3294 0752 B2080000 		.4byte	.LASF172
 3295 0756 01       		.byte	0x1
 3296 0757 2C01     		.2byte	0x12c
 3297 0759 68000000 		.4byte	0x68
 3298 075d 00000000 		.4byte	.LFB73
 3299 0761 1E000000 		.4byte	.LFE73-.LFB73
 3300 0765 01       		.uleb128 0x1
 3301 0766 9C       		.byte	0x9c
 3302 0767 1C       		.uleb128 0x1c
 3303 0768 A6020000 		.4byte	.LASF115
 3304 076c 01       		.byte	0x1
 3305 076d 4201     		.2byte	0x142
 3306 076f 81000000 		.4byte	0x81
 3307 0773 00000000 		.4byte	.LFB74
 3308 0777 60040000 		.4byte	.LFE74-.LFB74
 3309 077b 01       		.uleb128 0x1
 3310 077c 9C       		.byte	0x9c
 3311 077d C2080000 		.4byte	0x8c2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 76


 3312 0781 1D       		.uleb128 0x1d
 3313 0782 86000000 		.4byte	.LBB2
 3314 0786 AC030000 		.4byte	.LBE2-.LBB2
 3315 078a 1A       		.uleb128 0x1a
 3316 078b 79050000 		.4byte	.LASF116
 3317 078f 01       		.byte	0x1
 3318 0790 7701     		.2byte	0x177
 3319 0792 85030000 		.4byte	0x385
 3320 0796 03       		.uleb128 0x3
 3321 0797 91       		.byte	0x91
 3322 0798 AC7F     		.sleb128 -84
 3323 079a 1A       		.uleb128 0x1a
 3324 079b 7E020000 		.4byte	.LASF117
 3325 079f 01       		.byte	0x1
 3326 07a0 7C01     		.2byte	0x17c
 3327 07a2 85030000 		.4byte	0x385
 3328 07a6 03       		.uleb128 0x3
 3329 07a7 91       		.byte	0x91
 3330 07a8 987F     		.sleb128 -104
 3331 07aa 1A       		.uleb128 0x1a
 3332 07ab B2030000 		.4byte	.LASF118
 3333 07af 01       		.byte	0x1
 3334 07b0 8F01     		.2byte	0x18f
 3335 07b2 8D000000 		.4byte	0x8d
 3336 07b6 02       		.uleb128 0x2
 3337 07b7 91       		.byte	0x91
 3338 07b8 66       		.sleb128 -26
 3339 07b9 1A       		.uleb128 0x1a
 3340 07ba 38040000 		.4byte	.LASF119
 3341 07be 01       		.byte	0x1
 3342 07bf 9001     		.2byte	0x190
 3343 07c1 85030000 		.4byte	0x385
 3344 07c5 03       		.uleb128 0x3
 3345 07c6 91       		.byte	0x91
 3346 07c7 847F     		.sleb128 -124
 3347 07c9 1A       		.uleb128 0x1a
 3348 07ca 57070000 		.4byte	.LASF120
 3349 07ce 01       		.byte	0x1
 3350 07cf A501     		.2byte	0x1a5
 3351 07d1 C2080000 		.4byte	0x8c2
 3352 07d5 03       		.uleb128 0x3
 3353 07d6 91       		.byte	0x91
 3354 07d7 9C75     		.sleb128 -1380
 3355 07d9 1A       		.uleb128 0x1a
 3356 07da FC070000 		.4byte	.LASF31
 3357 07de 01       		.byte	0x1
 3358 07df A601     		.2byte	0x1a6
 3359 07e1 81000000 		.4byte	0x81
 3360 07e5 02       		.uleb128 0x2
 3361 07e6 91       		.byte	0x91
 3362 07e7 65       		.sleb128 -27
 3363 07e8 1A       		.uleb128 0x1a
 3364 07e9 11070000 		.4byte	.LASF121
 3365 07ed 01       		.byte	0x1
 3366 07ee AD01     		.2byte	0x1ad
 3367 07f0 F8000000 		.4byte	0xf8
 3368 07f4 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 77


 3369 07f5 91       		.byte	0x91
 3370 07f6 6C       		.sleb128 -20
 3371 07f7 1A       		.uleb128 0x1a
 3372 07f8 AA010000 		.4byte	.LASF122
 3373 07fc 01       		.byte	0x1
 3374 07fd B101     		.2byte	0x1b1
 3375 07ff A5000000 		.4byte	0xa5
 3376 0803 02       		.uleb128 0x2
 3377 0804 91       		.byte	0x91
 3378 0805 64       		.sleb128 -28
 3379 0806 1A       		.uleb128 0x1a
 3380 0807 AF020000 		.4byte	.LASF123
 3381 080b 01       		.byte	0x1
 3382 080c E101     		.2byte	0x1e1
 3383 080e 4C000000 		.4byte	0x4c
 3384 0812 02       		.uleb128 0x2
 3385 0813 91       		.byte	0x91
 3386 0814 5C       		.sleb128 -36
 3387 0815 1E       		.uleb128 0x1e
 3388 0816 F2000000 		.4byte	.LBB3
 3389 081a 2C000000 		.4byte	.LBE3-.LBB3
 3390 081e 42080000 		.4byte	0x842
 3391 0822 1A       		.uleb128 0x1a
 3392 0823 C8060000 		.4byte	.LASF124
 3393 0827 01       		.byte	0x1
 3394 0828 8401     		.2byte	0x184
 3395 082a 8D000000 		.4byte	0x8d
 3396 082e 02       		.uleb128 0x2
 3397 082f 91       		.byte	0x91
 3398 0830 68       		.sleb128 -24
 3399 0831 1A       		.uleb128 0x1a
 3400 0832 1C020000 		.4byte	.LASF125
 3401 0836 01       		.byte	0x1
 3402 0837 8501     		.2byte	0x185
 3403 0839 85030000 		.4byte	0x385
 3404 083d 03       		.uleb128 0x3
 3405 083e 91       		.byte	0x91
 3406 083f F07E     		.sleb128 -144
 3407 0841 00       		.byte	0
 3408 0842 1E       		.uleb128 0x1e
 3409 0843 20010000 		.4byte	.LBB4
 3410 0847 20000000 		.4byte	.LBE4-.LBB4
 3411 084b 60080000 		.4byte	0x860
 3412 084f 1A       		.uleb128 0x1a
 3413 0850 1C020000 		.4byte	.LASF125
 3414 0854 01       		.byte	0x1
 3415 0855 8901     		.2byte	0x189
 3416 0857 85030000 		.4byte	0x385
 3417 085b 03       		.uleb128 0x3
 3418 085c 91       		.byte	0x91
 3419 085d DC7E     		.sleb128 -164
 3420 085f 00       		.byte	0
 3421 0860 1E       		.uleb128 0x1e
 3422 0861 60020000 		.4byte	.LBB5
 3423 0865 4E010000 		.4byte	.LBE5-.LBB5
 3424 0869 97080000 		.4byte	0x897
 3425 086d 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 78


 3426 086e 5F050000 		.4byte	.LASF126
 3427 0872 01       		.byte	0x1
 3428 0873 B601     		.2byte	0x1b6
 3429 0875 A5000000 		.4byte	0xa5
 3430 0879 02       		.uleb128 0x2
 3431 087a 91       		.byte	0x91
 3432 087b 6B       		.sleb128 -21
 3433 087c 1D       		.uleb128 0x1d
 3434 087d 68020000 		.4byte	.LBB6
 3435 0881 2A010000 		.4byte	.LBE6-.LBB6
 3436 0885 1A       		.uleb128 0x1a
 3437 0886 7F030000 		.4byte	.LASF127
 3438 088a 01       		.byte	0x1
 3439 088b B801     		.2byte	0x1b8
 3440 088d D2080000 		.4byte	0x8d2
 3441 0891 03       		.uleb128 0x3
 3442 0892 91       		.byte	0x91
 3443 0893 E476     		.sleb128 -1180
 3444 0895 00       		.byte	0
 3445 0896 00       		.byte	0
 3446 0897 1D       		.uleb128 0x1d
 3447 0898 C8030000 		.4byte	.LBB7
 3448 089c 3A000000 		.4byte	.LBE7-.LBB7
 3449 08a0 1A       		.uleb128 0x1a
 3450 08a1 8C020000 		.4byte	.LASF128
 3451 08a5 01       		.byte	0x1
 3452 08a6 D801     		.2byte	0x1d8
 3453 08a8 68000000 		.4byte	0x68
 3454 08ac 02       		.uleb128 0x2
 3455 08ad 91       		.byte	0x91
 3456 08ae 60       		.sleb128 -32
 3457 08af 1A       		.uleb128 0x1a
 3458 08b0 3A060000 		.4byte	.LASF129
 3459 08b4 01       		.byte	0x1
 3460 08b5 D901     		.2byte	0x1d9
 3461 08b7 BB050000 		.4byte	0x5bb
 3462 08bb 03       		.uleb128 0x3
 3463 08bc 91       		.byte	0x91
 3464 08bd D07E     		.sleb128 -176
 3465 08bf 00       		.byte	0
 3466 08c0 00       		.byte	0
 3467 08c1 00       		.byte	0
 3468 08c2 07       		.uleb128 0x7
 3469 08c3 E3000000 		.4byte	0xe3
 3470 08c7 D2080000 		.4byte	0x8d2
 3471 08cb 08       		.uleb128 0x8
 3472 08cc F1000000 		.4byte	0xf1
 3473 08d0 C7       		.byte	0xc7
 3474 08d1 00       		.byte	0
 3475 08d2 07       		.uleb128 0x7
 3476 08d3 E3000000 		.4byte	0xe3
 3477 08d7 E3080000 		.4byte	0x8e3
 3478 08db 1F       		.uleb128 0x1f
 3479 08dc F1000000 		.4byte	0xf1
 3480 08e0 E803     		.2byte	0x3e8
 3481 08e2 00       		.byte	0
 3482 08e3 1C       		.uleb128 0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 79


 3483 08e4 B3050000 		.4byte	.LASF130
 3484 08e8 01       		.byte	0x1
 3485 08e9 F601     		.2byte	0x1f6
 3486 08eb 81000000 		.4byte	0x81
 3487 08ef 00000000 		.4byte	.LFB75
 3488 08f3 44000000 		.4byte	.LFE75-.LFB75
 3489 08f7 01       		.uleb128 0x1
 3490 08f8 9C       		.byte	0x9c
 3491 08f9 17090000 		.4byte	0x917
 3492 08fd 1D       		.uleb128 0x1d
 3493 08fe 20000000 		.4byte	.LBB8
 3494 0902 1A000000 		.4byte	.LBE8-.LBB8
 3495 0906 1A       		.uleb128 0x1a
 3496 0907 AF020000 		.4byte	.LASF123
 3497 090b 01       		.byte	0x1
 3498 090c 0102     		.2byte	0x201
 3499 090e 4C000000 		.4byte	0x4c
 3500 0912 02       		.uleb128 0x2
 3501 0913 91       		.byte	0x91
 3502 0914 74       		.sleb128 -12
 3503 0915 00       		.byte	0
 3504 0916 00       		.byte	0
 3505 0917 1C       		.uleb128 0x1c
 3506 0918 E0030000 		.4byte	.LASF131
 3507 091c 01       		.byte	0x1
 3508 091d 1602     		.2byte	0x216
 3509 091f 81000000 		.4byte	0x81
 3510 0923 00000000 		.4byte	.LFB76
 3511 0927 94040000 		.4byte	.LFE76-.LFB76
 3512 092b 01       		.uleb128 0x1
 3513 092c 9C       		.byte	0x9c
 3514 092d F4090000 		.4byte	0x9f4
 3515 0931 1A       		.uleb128 0x1a
 3516 0932 26050000 		.4byte	.LASF62
 3517 0936 01       		.byte	0x1
 3518 0937 1902     		.2byte	0x219
 3519 0939 4C000000 		.4byte	0x4c
 3520 093d 02       		.uleb128 0x2
 3521 093e 91       		.byte	0x91
 3522 093f 6C       		.sleb128 -20
 3523 0940 1A       		.uleb128 0x1a
 3524 0941 17070000 		.4byte	.LASF132
 3525 0945 01       		.byte	0x1
 3526 0946 1A02     		.2byte	0x21a
 3527 0948 F4090000 		.4byte	0x9f4
 3528 094c 02       		.uleb128 0x2
 3529 094d 91       		.byte	0x91
 3530 094e 44       		.sleb128 -60
 3531 094f 1A       		.uleb128 0x1a
 3532 0950 0F030000 		.4byte	.LASF61
 3533 0954 01       		.byte	0x1
 3534 0955 1E02     		.2byte	0x21e
 3535 0957 85030000 		.4byte	0x385
 3536 095b 03       		.uleb128 0x3
 3537 095c 91       		.byte	0x91
 3538 095d B07F     		.sleb128 -80
 3539 095f 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 80


 3540 0960 8A030000 		.4byte	.LASF133
 3541 0964 01       		.byte	0x1
 3542 0965 3C02     		.2byte	0x23c
 3543 0967 91020000 		.4byte	0x291
 3544 096b 03       		.uleb128 0x3
 3545 096c 91       		.byte	0x91
 3546 096d 947F     		.sleb128 -108
 3547 096f 1E       		.uleb128 0x1e
 3548 0970 26000000 		.4byte	.LBB9
 3549 0974 7A000000 		.4byte	.LBE9-.LBB9
 3550 0978 8D090000 		.4byte	0x98d
 3551 097c 1A       		.uleb128 0x1a
 3552 097d 82070000 		.4byte	.LASF134
 3553 0981 01       		.byte	0x1
 3554 0982 2402     		.2byte	0x224
 3555 0984 29020000 		.4byte	0x229
 3556 0988 03       		.uleb128 0x3
 3557 0989 91       		.byte	0x91
 3558 098a F87E     		.sleb128 -136
 3559 098c 00       		.byte	0
 3560 098d 1E       		.uleb128 0x1e
 3561 098e 26010000 		.4byte	.LBB10
 3562 0992 F2000000 		.4byte	.LBE10-.LBB10
 3563 0996 AB090000 		.4byte	0x9ab
 3564 099a 1A       		.uleb128 0x1a
 3565 099b F1070000 		.4byte	.LASF135
 3566 099f 01       		.byte	0x1
 3567 09a0 5702     		.2byte	0x257
 3568 09a2 D5020000 		.4byte	0x2d5
 3569 09a6 03       		.uleb128 0x3
 3570 09a7 91       		.byte	0x91
 3571 09a8 E87E     		.sleb128 -152
 3572 09aa 00       		.byte	0
 3573 09ab 1D       		.uleb128 0x1d
 3574 09ac 2A020000 		.4byte	.LBB11
 3575 09b0 28020000 		.4byte	.LBE11-.LBB11
 3576 09b4 1A       		.uleb128 0x1a
 3577 09b5 82070000 		.4byte	.LASF134
 3578 09b9 01       		.byte	0x1
 3579 09ba 7A02     		.2byte	0x27a
 3580 09bc 29020000 		.4byte	0x229
 3581 09c0 03       		.uleb128 0x3
 3582 09c1 91       		.byte	0x91
 3583 09c2 CC7E     		.sleb128 -180
 3584 09c4 1A       		.uleb128 0x1a
 3585 09c5 61040000 		.4byte	.LASF136
 3586 09c9 01       		.byte	0x1
 3587 09ca 8F02     		.2byte	0x28f
 3588 09cc C9000000 		.4byte	0xc9
 3589 09d0 02       		.uleb128 0x2
 3590 09d1 91       		.byte	0x91
 3591 09d2 68       		.sleb128 -24
 3592 09d3 1A       		.uleb128 0x1a
 3593 09d4 C9070000 		.4byte	.LASF137
 3594 09d8 01       		.byte	0x1
 3595 09d9 A202     		.2byte	0x2a2
 3596 09db 29020000 		.4byte	0x229
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 81


 3597 09df 03       		.uleb128 0x3
 3598 09e0 91       		.byte	0x91
 3599 09e1 B07E     		.sleb128 -208
 3600 09e3 1A       		.uleb128 0x1a
 3601 09e4 66050000 		.4byte	.LASF138
 3602 09e8 01       		.byte	0x1
 3603 09e9 B502     		.2byte	0x2b5
 3604 09eb C9000000 		.4byte	0xc9
 3605 09ef 02       		.uleb128 0x2
 3606 09f0 91       		.byte	0x91
 3607 09f1 64       		.sleb128 -28
 3608 09f2 00       		.byte	0
 3609 09f3 00       		.byte	0
 3610 09f4 07       		.uleb128 0x7
 3611 09f5 E3000000 		.4byte	0xe3
 3612 09f9 040A0000 		.4byte	0xa04
 3613 09fd 08       		.uleb128 0x8
 3614 09fe F1000000 		.4byte	0xf1
 3615 0a02 1F       		.byte	0x1f
 3616 0a03 00       		.byte	0
 3617 0a04 20       		.uleb128 0x20
 3618 0a05 4D030000 		.4byte	.LASF139
 3619 0a09 01       		.byte	0x1
 3620 0a0a CA02     		.2byte	0x2ca
 3621 0a0c 81000000 		.4byte	0x81
 3622 0a10 00000000 		.4byte	.LFB77
 3623 0a14 74000000 		.4byte	.LFE77-.LFB77
 3624 0a18 01       		.uleb128 0x1
 3625 0a19 9C       		.byte	0x9c
 3626 0a1a 4A0A0000 		.4byte	0xa4a
 3627 0a1e 21       		.uleb128 0x21
 3628 0a1f 26050000 		.4byte	.LASF62
 3629 0a23 01       		.byte	0x1
 3630 0a24 CA02     		.2byte	0x2ca
 3631 0a26 4C000000 		.4byte	0x4c
 3632 0a2a 02       		.uleb128 0x2
 3633 0a2b 91       		.byte	0x91
 3634 0a2c 64       		.sleb128 -28
 3635 0a2d 22       		.uleb128 0x22
 3636 0a2e 7400     		.ascii	"t\000"
 3637 0a30 01       		.byte	0x1
 3638 0a31 D102     		.2byte	0x2d1
 3639 0a33 4A0A0000 		.4byte	0xa4a
 3640 0a37 02       		.uleb128 0x2
 3641 0a38 91       		.byte	0x91
 3642 0a39 74       		.sleb128 -12
 3643 0a3a 1A       		.uleb128 0x1a
 3644 0a3b 05050000 		.4byte	.LASF140
 3645 0a3f 01       		.byte	0x1
 3646 0a40 D602     		.2byte	0x2d6
 3647 0a42 77010000 		.4byte	0x177
 3648 0a46 02       		.uleb128 0x2
 3649 0a47 91       		.byte	0x91
 3650 0a48 68       		.sleb128 -24
 3651 0a49 00       		.byte	0
 3652 0a4a 06       		.uleb128 0x6
 3653 0a4b 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 82


 3654 0a4c E0020000 		.4byte	0x2e0
 3655 0a50 20       		.uleb128 0x20
 3656 0a51 EE020000 		.4byte	.LASF141
 3657 0a55 01       		.byte	0x1
 3658 0a56 F302     		.2byte	0x2f3
 3659 0a58 81000000 		.4byte	0x81
 3660 0a5c 00000000 		.4byte	.LFB78
 3661 0a60 38010000 		.4byte	.LFE78-.LFB78
 3662 0a64 01       		.uleb128 0x1
 3663 0a65 9C       		.byte	0x9c
 3664 0a66 C90A0000 		.4byte	0xac9
 3665 0a6a 21       		.uleb128 0x21
 3666 0a6b 15030000 		.4byte	.LASF142
 3667 0a6f 01       		.byte	0x1
 3668 0a70 F302     		.2byte	0x2f3
 3669 0a72 F8000000 		.4byte	0xf8
 3670 0a76 03       		.uleb128 0x3
 3671 0a77 91       		.byte	0x91
 3672 0a78 9C7E     		.sleb128 -228
 3673 0a7a 21       		.uleb128 0x21
 3674 0a7b 0A030000 		.4byte	.LASF143
 3675 0a7f 01       		.byte	0x1
 3676 0a80 F302     		.2byte	0x2f3
 3677 0a82 68000000 		.4byte	0x68
 3678 0a86 03       		.uleb128 0x3
 3679 0a87 91       		.byte	0x91
 3680 0a88 987E     		.sleb128 -232
 3681 0a8a 21       		.uleb128 0x21
 3682 0a8b 0F060000 		.4byte	.LASF144
 3683 0a8f 01       		.byte	0x1
 3684 0a90 F302     		.2byte	0x2f3
 3685 0a92 F8000000 		.4byte	0xf8
 3686 0a96 03       		.uleb128 0x3
 3687 0a97 91       		.byte	0x91
 3688 0a98 947E     		.sleb128 -236
 3689 0a9a 1A       		.uleb128 0x1a
 3690 0a9b 0D020000 		.4byte	.LASF145
 3691 0a9f 01       		.byte	0x1
 3692 0aa0 F502     		.2byte	0x2f5
 3693 0aa2 81000000 		.4byte	0x81
 3694 0aa6 02       		.uleb128 0x2
 3695 0aa7 91       		.byte	0x91
 3696 0aa8 77       		.sleb128 -9
 3697 0aa9 1A       		.uleb128 0x1a
 3698 0aaa 74000000 		.4byte	.LASF146
 3699 0aae 01       		.byte	0x1
 3700 0aaf FC02     		.2byte	0x2fc
 3701 0ab1 C90A0000 		.4byte	0xac9
 3702 0ab5 02       		.uleb128 0x2
 3703 0ab6 91       		.byte	0x91
 3704 0ab7 68       		.sleb128 -24
 3705 0ab8 1A       		.uleb128 0x1a
 3706 0ab9 57070000 		.4byte	.LASF120
 3707 0abd 01       		.byte	0x1
 3708 0abe 0403     		.2byte	0x304
 3709 0ac0 C2080000 		.4byte	0x8c2
 3710 0ac4 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 83


 3711 0ac5 91       		.byte	0x91
 3712 0ac6 A07E     		.sleb128 -224
 3713 0ac8 00       		.byte	0
 3714 0ac9 07       		.uleb128 0x7
 3715 0aca E3000000 		.4byte	0xe3
 3716 0ace D90A0000 		.4byte	0xad9
 3717 0ad2 08       		.uleb128 0x8
 3718 0ad3 F1000000 		.4byte	0xf1
 3719 0ad7 0B       		.byte	0xb
 3720 0ad8 00       		.byte	0
 3721 0ad9 23       		.uleb128 0x23
 3722 0ada 80010000 		.4byte	.LASF147
 3723 0ade 0D       		.byte	0xd
 3724 0adf 1207     		.2byte	0x712
 3725 0ae1 E50A0000 		.4byte	0xae5
 3726 0ae5 0C       		.uleb128 0xc
 3727 0ae6 76000000 		.4byte	0x76
 3728 0aea 24       		.uleb128 0x24
 3729 0aeb 64000000 		.4byte	.LASF148
 3730 0aef 0A       		.byte	0xa
 3731 0af0 11       		.byte	0x11
 3732 0af1 91040000 		.4byte	0x491
 3733 0af5 05       		.uleb128 0x5
 3734 0af6 03       		.byte	0x3
 3735 0af7 00000000 		.4byte	buffer_overflow
 3736 0afb 24       		.uleb128 0x24
 3737 0afc B3040000 		.4byte	.LASF149
 3738 0b00 0A       		.byte	0xa
 3739 0b01 22       		.byte	0x22
 3740 0b02 8D000000 		.4byte	0x8d
 3741 0b06 05       		.uleb128 0x5
 3742 0b07 03       		.byte	0x3
 3743 0b08 00000000 		.4byte	dataPointsInStack
 3744 0b0c 24       		.uleb128 0x24
 3745 0b0d 03080000 		.4byte	.LASF150
 3746 0b11 0A       		.byte	0xa
 3747 0b12 23       		.byte	0x23
 3748 0b13 8D000000 		.4byte	0x8d
 3749 0b17 05       		.uleb128 0x5
 3750 0b18 03       		.byte	0x3
 3751 0b19 00000000 		.4byte	dataPointsInStackDesired
 3752 0b1d 07       		.uleb128 0x7
 3753 0b1e 95030000 		.4byte	0x395
 3754 0b22 2D0B0000 		.4byte	0xb2d
 3755 0b26 08       		.uleb128 0x8
 3756 0b27 F1000000 		.4byte	0xf1
 3757 0b2b 95       		.byte	0x95
 3758 0b2c 00       		.byte	0
 3759 0b2d 24       		.uleb128 0x24
 3760 0b2e F1030000 		.4byte	.LASF151
 3761 0b32 0A       		.byte	0xa
 3762 0b33 24       		.byte	0x24
 3763 0b34 1D0B0000 		.4byte	0xb1d
 3764 0b38 05       		.uleb128 0x5
 3765 0b39 03       		.byte	0x3
 3766 0b3a 00000000 		.4byte	data
 3767 0b3e 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 84


 3768 0b3f 67010000 		.4byte	.LASF152
 3769 0b43 0B       		.byte	0xb
 3770 0b44 21       		.byte	0x21
 3771 0b45 81000000 		.4byte	0x81
 3772 0b49 05       		.uleb128 0x5
 3773 0b4a 03       		.byte	0x3
 3774 0b4b 00000000 		.4byte	modem_state
 3775 0b4f 24       		.uleb128 0x24
 3776 0b50 70040000 		.4byte	.LASF153
 3777 0b54 0B       		.byte	0xb
 3778 0b55 64       		.byte	0x64
 3779 0b56 BD000000 		.4byte	0xbd
 3780 0b5a 05       		.uleb128 0x5
 3781 0b5b 03       		.byte	0x3
 3782 0b5c 00000000 		.4byte	modem_start_time_stamp
 3783 0b60 24       		.uleb128 0x24
 3784 0b61 07040000 		.4byte	.LASF88
 3785 0b65 0B       		.byte	0xb
 3786 0b66 65       		.byte	0x65
 3787 0b67 CD030000 		.4byte	0x3cd
 3788 0b6b 05       		.uleb128 0x5
 3789 0b6c 03       		.byte	0x3
 3790 0b6d 00000000 		.4byte	modem_info
 3791 0b71 24       		.uleb128 0x24
 3792 0b72 40070000 		.4byte	.LASF154
 3793 0b76 0B       		.byte	0xb
 3794 0b77 66       		.byte	0x66
 3795 0b78 41040000 		.4byte	0x441
 3796 0b7c 05       		.uleb128 0x5
 3797 0b7d 03       		.byte	0x3
 3798 0b7e 00000000 		.4byte	modem_stats
 3799 0b82 24       		.uleb128 0x24
 3800 0b83 3E050000 		.4byte	.LASF155
 3801 0b87 0B       		.byte	0xb
 3802 0b88 67       		.byte	0x67
 3803 0b89 98040000 		.4byte	0x498
 3804 0b8d 05       		.uleb128 0x5
 3805 0b8e 03       		.byte	0x3
 3806 0b8f 00000000 		.4byte	updatable_parameters
 3807 0b93 07       		.uleb128 0x7
 3808 0b94 E3000000 		.4byte	0xe3
 3809 0b98 A40B0000 		.4byte	0xba4
 3810 0b9c 1F       		.uleb128 0x1f
 3811 0b9d F1000000 		.4byte	0xf1
 3812 0ba1 0F27     		.2byte	0x270f
 3813 0ba3 00       		.byte	0
 3814 0ba4 24       		.uleb128 0x24
 3815 0ba5 91050000 		.4byte	.LASF156
 3816 0ba9 0C       		.byte	0xc
 3817 0baa 18       		.byte	0x18
 3818 0bab 930B0000 		.4byte	0xb93
 3819 0baf 05       		.uleb128 0x5
 3820 0bb0 03       		.byte	0x3
 3821 0bb1 00000000 		.4byte	http_request
 3822 0bb5 24       		.uleb128 0x24
 3823 0bb6 32080000 		.4byte	.LASF157
 3824 0bba 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 85


 3825 0bbb 19       		.byte	0x19
 3826 0bbc 930B0000 		.4byte	0xb93
 3827 0bc0 05       		.uleb128 0x5
 3828 0bc1 03       		.byte	0x3
 3829 0bc2 00000000 		.4byte	http_body
 3830 0bc6 24       		.uleb128 0x24
 3831 0bc7 4C070000 		.4byte	.LASF158
 3832 0bcb 0C       		.byte	0xc
 3833 0bcc 1A       		.byte	0x1a
 3834 0bcd C2080000 		.4byte	0x8c2
 3835 0bd1 05       		.uleb128 0x5
 3836 0bd2 03       		.byte	0x3
 3837 0bd3 00000000 		.4byte	http_route
 3838 0bd7 24       		.uleb128 0x24
 3839 0bd8 75060000 		.4byte	.LASF159
 3840 0bdc 0C       		.byte	0xc
 3841 0bdd 41       		.byte	0x41
 3842 0bde 13050000 		.4byte	0x513
 3843 0be2 05       		.uleb128 0x5
 3844 0be3 03       		.byte	0x3
 3845 0be4 00000000 		.4byte	system_info
 3846 0be8 24       		.uleb128 0x24
 3847 0be9 15060000 		.4byte	.LASF160
 3848 0bed 0C       		.byte	0xc
 3849 0bee 53       		.byte	0x53
 3850 0bef 4F050000 		.4byte	0x54f
 3851 0bf3 05       		.uleb128 0x5
 3852 0bf4 03       		.byte	0x3
 3853 0bf5 00000000 		.4byte	system_settings
 3854 0bf9 24       		.uleb128 0x24
 3855 0bfa 73010000 		.4byte	.LASF161
 3856 0bfe 0C       		.byte	0xc
 3857 0bff 6F       		.byte	0x6f
 3858 0c00 DC040000 		.4byte	0x4dc
 3859 0c04 05       		.uleb128 0x5
 3860 0c05 03       		.byte	0x3
 3861 0c06 00000000 		.4byte	alarmMeasure
 3862 0c0a 24       		.uleb128 0x24
 3863 0c0b B7010000 		.4byte	.LASF162
 3864 0c0f 0C       		.byte	0xc
 3865 0c10 70       		.byte	0x70
 3866 0c11 81000000 		.4byte	0x81
 3867 0c15 05       		.uleb128 0x5
 3868 0c16 03       		.byte	0x3
 3869 0c17 00000000 		.4byte	timeToMeasure
 3870 0c1b 24       		.uleb128 0x24
 3871 0c1c 22030000 		.4byte	.LASF163
 3872 0c20 0C       		.byte	0xc
 3873 0c21 71       		.byte	0x71
 3874 0c22 DC040000 		.4byte	0x4dc
 3875 0c26 05       		.uleb128 0x5
 3876 0c27 03       		.byte	0x3
 3877 0c28 00000000 		.4byte	alarmSync
 3878 0c2c 24       		.uleb128 0x24
 3879 0c2d DD010000 		.4byte	.LASF164
 3880 0c31 0C       		.byte	0xc
 3881 0c32 72       		.byte	0x72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 86


 3882 0c33 81000000 		.4byte	0x81
 3883 0c37 05       		.uleb128 0x5
 3884 0c38 03       		.byte	0x3
 3885 0c39 00000000 		.4byte	timeToSync
 3886 0c3d 24       		.uleb128 0x24
 3887 0c3e 0F050000 		.4byte	.LASF165
 3888 0c42 0C       		.byte	0xc
 3889 0c43 73       		.byte	0x73
 3890 0c44 81000000 		.4byte	0x81
 3891 0c48 05       		.uleb128 0x5
 3892 0c49 03       		.byte	0x3
 3893 0c4a 00000000 		.4byte	timeToSycnRemoteParams
 3894 0c4e 25       		.uleb128 0x25
 3895 0c4f 68657900 		.ascii	"hey\000"
 3896 0c53 0C       		.byte	0xc
 3897 0c54 74       		.byte	0x74
 3898 0c55 81000000 		.4byte	0x81
 3899 0c59 05       		.uleb128 0x5
 3900 0c5a 03       		.byte	0x3
 3901 0c5b 00000000 		.4byte	hey
 3902 0c5f 07       		.uleb128 0x7
 3903 0c60 E3000000 		.4byte	0xe3
 3904 0c64 6F0C0000 		.4byte	0xc6f
 3905 0c68 08       		.uleb128 0x8
 3906 0c69 F1000000 		.4byte	0xf1
 3907 0c6d 1D       		.byte	0x1d
 3908 0c6e 00       		.byte	0
 3909 0c6f 24       		.uleb128 0x24
 3910 0c70 C9050000 		.4byte	.LASF166
 3911 0c74 01       		.byte	0x1
 3912 0c75 1D       		.byte	0x1d
 3913 0c76 5F0C0000 		.4byte	0xc5f
 3914 0c7a 05       		.uleb128 0x5
 3915 0c7b 03       		.byte	0x3
 3916 0c7c 00000000 		.4byte	Data_fileName
 3917 0c80 24       		.uleb128 0x24
 3918 0c81 A6030000 		.4byte	.LASF96
 3919 0c85 01       		.byte	0x1
 3920 0c86 1E       		.byte	0x1e
 3921 0c87 81000000 		.4byte	0x81
 3922 0c8b 05       		.uleb128 0x5
 3923 0c8c 03       		.byte	0x3
 3924 0c8d 00000000 		.4byte	try_counter
 3925 0c91 00       		.byte	0
 3926              		.section	.debug_abbrev,"",%progbits
 3927              	.Ldebug_abbrev0:
 3928 0000 01       		.uleb128 0x1
 3929 0001 11       		.uleb128 0x11
 3930 0002 01       		.byte	0x1
 3931 0003 25       		.uleb128 0x25
 3932 0004 0E       		.uleb128 0xe
 3933 0005 13       		.uleb128 0x13
 3934 0006 0B       		.uleb128 0xb
 3935 0007 03       		.uleb128 0x3
 3936 0008 0E       		.uleb128 0xe
 3937 0009 1B       		.uleb128 0x1b
 3938 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 87


 3939 000b 55       		.uleb128 0x55
 3940 000c 17       		.uleb128 0x17
 3941 000d 11       		.uleb128 0x11
 3942 000e 01       		.uleb128 0x1
 3943 000f 10       		.uleb128 0x10
 3944 0010 17       		.uleb128 0x17
 3945 0011 00       		.byte	0
 3946 0012 00       		.byte	0
 3947 0013 02       		.uleb128 0x2
 3948 0014 24       		.uleb128 0x24
 3949 0015 00       		.byte	0
 3950 0016 0B       		.uleb128 0xb
 3951 0017 0B       		.uleb128 0xb
 3952 0018 3E       		.uleb128 0x3e
 3953 0019 0B       		.uleb128 0xb
 3954 001a 03       		.uleb128 0x3
 3955 001b 0E       		.uleb128 0xe
 3956 001c 00       		.byte	0
 3957 001d 00       		.byte	0
 3958 001e 03       		.uleb128 0x3
 3959 001f 16       		.uleb128 0x16
 3960 0020 00       		.byte	0
 3961 0021 03       		.uleb128 0x3
 3962 0022 0E       		.uleb128 0xe
 3963 0023 3A       		.uleb128 0x3a
 3964 0024 0B       		.uleb128 0xb
 3965 0025 3B       		.uleb128 0x3b
 3966 0026 0B       		.uleb128 0xb
 3967 0027 49       		.uleb128 0x49
 3968 0028 13       		.uleb128 0x13
 3969 0029 00       		.byte	0
 3970 002a 00       		.byte	0
 3971 002b 04       		.uleb128 0x4
 3972 002c 24       		.uleb128 0x24
 3973 002d 00       		.byte	0
 3974 002e 0B       		.uleb128 0xb
 3975 002f 0B       		.uleb128 0xb
 3976 0030 3E       		.uleb128 0x3e
 3977 0031 0B       		.uleb128 0xb
 3978 0032 03       		.uleb128 0x3
 3979 0033 08       		.uleb128 0x8
 3980 0034 00       		.byte	0
 3981 0035 00       		.byte	0
 3982 0036 05       		.uleb128 0x5
 3983 0037 16       		.uleb128 0x16
 3984 0038 00       		.byte	0
 3985 0039 03       		.uleb128 0x3
 3986 003a 0E       		.uleb128 0xe
 3987 003b 3A       		.uleb128 0x3a
 3988 003c 0B       		.uleb128 0xb
 3989 003d 3B       		.uleb128 0x3b
 3990 003e 05       		.uleb128 0x5
 3991 003f 49       		.uleb128 0x49
 3992 0040 13       		.uleb128 0x13
 3993 0041 00       		.byte	0
 3994 0042 00       		.byte	0
 3995 0043 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 88


 3996 0044 0F       		.uleb128 0xf
 3997 0045 00       		.byte	0
 3998 0046 0B       		.uleb128 0xb
 3999 0047 0B       		.uleb128 0xb
 4000 0048 49       		.uleb128 0x49
 4001 0049 13       		.uleb128 0x13
 4002 004a 00       		.byte	0
 4003 004b 00       		.byte	0
 4004 004c 07       		.uleb128 0x7
 4005 004d 01       		.uleb128 0x1
 4006 004e 01       		.byte	0x1
 4007 004f 49       		.uleb128 0x49
 4008 0050 13       		.uleb128 0x13
 4009 0051 01       		.uleb128 0x1
 4010 0052 13       		.uleb128 0x13
 4011 0053 00       		.byte	0
 4012 0054 00       		.byte	0
 4013 0055 08       		.uleb128 0x8
 4014 0056 21       		.uleb128 0x21
 4015 0057 00       		.byte	0
 4016 0058 49       		.uleb128 0x49
 4017 0059 13       		.uleb128 0x13
 4018 005a 2F       		.uleb128 0x2f
 4019 005b 0B       		.uleb128 0xb
 4020 005c 00       		.byte	0
 4021 005d 00       		.byte	0
 4022 005e 09       		.uleb128 0x9
 4023 005f 13       		.uleb128 0x13
 4024 0060 01       		.byte	0x1
 4025 0061 0B       		.uleb128 0xb
 4026 0062 0B       		.uleb128 0xb
 4027 0063 3A       		.uleb128 0x3a
 4028 0064 0B       		.uleb128 0xb
 4029 0065 3B       		.uleb128 0x3b
 4030 0066 0B       		.uleb128 0xb
 4031 0067 01       		.uleb128 0x1
 4032 0068 13       		.uleb128 0x13
 4033 0069 00       		.byte	0
 4034 006a 00       		.byte	0
 4035 006b 0A       		.uleb128 0xa
 4036 006c 0D       		.uleb128 0xd
 4037 006d 00       		.byte	0
 4038 006e 03       		.uleb128 0x3
 4039 006f 08       		.uleb128 0x8
 4040 0070 3A       		.uleb128 0x3a
 4041 0071 0B       		.uleb128 0xb
 4042 0072 3B       		.uleb128 0x3b
 4043 0073 0B       		.uleb128 0xb
 4044 0074 49       		.uleb128 0x49
 4045 0075 13       		.uleb128 0x13
 4046 0076 38       		.uleb128 0x38
 4047 0077 0B       		.uleb128 0xb
 4048 0078 00       		.byte	0
 4049 0079 00       		.byte	0
 4050 007a 0B       		.uleb128 0xb
 4051 007b 0D       		.uleb128 0xd
 4052 007c 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 89


 4053 007d 03       		.uleb128 0x3
 4054 007e 0E       		.uleb128 0xe
 4055 007f 3A       		.uleb128 0x3a
 4056 0080 0B       		.uleb128 0xb
 4057 0081 3B       		.uleb128 0x3b
 4058 0082 0B       		.uleb128 0xb
 4059 0083 49       		.uleb128 0x49
 4060 0084 13       		.uleb128 0x13
 4061 0085 38       		.uleb128 0x38
 4062 0086 0B       		.uleb128 0xb
 4063 0087 00       		.byte	0
 4064 0088 00       		.byte	0
 4065 0089 0C       		.uleb128 0xc
 4066 008a 35       		.uleb128 0x35
 4067 008b 00       		.byte	0
 4068 008c 49       		.uleb128 0x49
 4069 008d 13       		.uleb128 0x13
 4070 008e 00       		.byte	0
 4071 008f 00       		.byte	0
 4072 0090 0D       		.uleb128 0xd
 4073 0091 13       		.uleb128 0x13
 4074 0092 01       		.byte	0x1
 4075 0093 0B       		.uleb128 0xb
 4076 0094 05       		.uleb128 0x5
 4077 0095 3A       		.uleb128 0x3a
 4078 0096 0B       		.uleb128 0xb
 4079 0097 3B       		.uleb128 0x3b
 4080 0098 0B       		.uleb128 0xb
 4081 0099 01       		.uleb128 0x1
 4082 009a 13       		.uleb128 0x13
 4083 009b 00       		.byte	0
 4084 009c 00       		.byte	0
 4085 009d 0E       		.uleb128 0xe
 4086 009e 13       		.uleb128 0x13
 4087 009f 01       		.byte	0x1
 4088 00a0 03       		.uleb128 0x3
 4089 00a1 08       		.uleb128 0x8
 4090 00a2 0B       		.uleb128 0xb
 4091 00a3 0B       		.uleb128 0xb
 4092 00a4 3A       		.uleb128 0x3a
 4093 00a5 0B       		.uleb128 0xb
 4094 00a6 3B       		.uleb128 0x3b
 4095 00a7 0B       		.uleb128 0xb
 4096 00a8 01       		.uleb128 0x1
 4097 00a9 13       		.uleb128 0x13
 4098 00aa 00       		.byte	0
 4099 00ab 00       		.byte	0
 4100 00ac 0F       		.uleb128 0xf
 4101 00ad 2E       		.uleb128 0x2e
 4102 00ae 00       		.byte	0
 4103 00af 3F       		.uleb128 0x3f
 4104 00b0 19       		.uleb128 0x19
 4105 00b1 03       		.uleb128 0x3
 4106 00b2 0E       		.uleb128 0xe
 4107 00b3 3A       		.uleb128 0x3a
 4108 00b4 0B       		.uleb128 0xb
 4109 00b5 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 90


 4110 00b6 0B       		.uleb128 0xb
 4111 00b7 27       		.uleb128 0x27
 4112 00b8 19       		.uleb128 0x19
 4113 00b9 11       		.uleb128 0x11
 4114 00ba 01       		.uleb128 0x1
 4115 00bb 12       		.uleb128 0x12
 4116 00bc 06       		.uleb128 0x6
 4117 00bd 40       		.uleb128 0x40
 4118 00be 18       		.uleb128 0x18
 4119 00bf 9642     		.uleb128 0x2116
 4120 00c1 19       		.uleb128 0x19
 4121 00c2 00       		.byte	0
 4122 00c3 00       		.byte	0
 4123 00c4 10       		.uleb128 0x10
 4124 00c5 2E       		.uleb128 0x2e
 4125 00c6 01       		.byte	0x1
 4126 00c7 3F       		.uleb128 0x3f
 4127 00c8 19       		.uleb128 0x19
 4128 00c9 03       		.uleb128 0x3
 4129 00ca 0E       		.uleb128 0xe
 4130 00cb 3A       		.uleb128 0x3a
 4131 00cc 0B       		.uleb128 0xb
 4132 00cd 3B       		.uleb128 0x3b
 4133 00ce 0B       		.uleb128 0xb
 4134 00cf 11       		.uleb128 0x11
 4135 00d0 01       		.uleb128 0x1
 4136 00d1 12       		.uleb128 0x12
 4137 00d2 06       		.uleb128 0x6
 4138 00d3 40       		.uleb128 0x40
 4139 00d4 18       		.uleb128 0x18
 4140 00d5 9642     		.uleb128 0x2116
 4141 00d7 19       		.uleb128 0x19
 4142 00d8 01       		.uleb128 0x1
 4143 00d9 13       		.uleb128 0x13
 4144 00da 00       		.byte	0
 4145 00db 00       		.byte	0
 4146 00dc 11       		.uleb128 0x11
 4147 00dd 34       		.uleb128 0x34
 4148 00de 00       		.byte	0
 4149 00df 03       		.uleb128 0x3
 4150 00e0 0E       		.uleb128 0xe
 4151 00e1 3A       		.uleb128 0x3a
 4152 00e2 0B       		.uleb128 0xb
 4153 00e3 3B       		.uleb128 0x3b
 4154 00e4 0B       		.uleb128 0xb
 4155 00e5 49       		.uleb128 0x49
 4156 00e6 13       		.uleb128 0x13
 4157 00e7 02       		.uleb128 0x2
 4158 00e8 18       		.uleb128 0x18
 4159 00e9 00       		.byte	0
 4160 00ea 00       		.byte	0
 4161 00eb 12       		.uleb128 0x12
 4162 00ec 2E       		.uleb128 0x2e
 4163 00ed 01       		.byte	0x1
 4164 00ee 3F       		.uleb128 0x3f
 4165 00ef 19       		.uleb128 0x19
 4166 00f0 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 91


 4167 00f1 0E       		.uleb128 0xe
 4168 00f2 3A       		.uleb128 0x3a
 4169 00f3 0B       		.uleb128 0xb
 4170 00f4 3B       		.uleb128 0x3b
 4171 00f5 0B       		.uleb128 0xb
 4172 00f6 49       		.uleb128 0x49
 4173 00f7 13       		.uleb128 0x13
 4174 00f8 11       		.uleb128 0x11
 4175 00f9 01       		.uleb128 0x1
 4176 00fa 12       		.uleb128 0x12
 4177 00fb 06       		.uleb128 0x6
 4178 00fc 40       		.uleb128 0x40
 4179 00fd 18       		.uleb128 0x18
 4180 00fe 9642     		.uleb128 0x2116
 4181 0100 19       		.uleb128 0x19
 4182 0101 01       		.uleb128 0x1
 4183 0102 13       		.uleb128 0x13
 4184 0103 00       		.byte	0
 4185 0104 00       		.byte	0
 4186 0105 13       		.uleb128 0x13
 4187 0106 2E       		.uleb128 0x2e
 4188 0107 00       		.byte	0
 4189 0108 3F       		.uleb128 0x3f
 4190 0109 19       		.uleb128 0x19
 4191 010a 03       		.uleb128 0x3
 4192 010b 0E       		.uleb128 0xe
 4193 010c 3A       		.uleb128 0x3a
 4194 010d 0B       		.uleb128 0xb
 4195 010e 3B       		.uleb128 0x3b
 4196 010f 0B       		.uleb128 0xb
 4197 0110 11       		.uleb128 0x11
 4198 0111 01       		.uleb128 0x1
 4199 0112 12       		.uleb128 0x12
 4200 0113 06       		.uleb128 0x6
 4201 0114 40       		.uleb128 0x40
 4202 0115 18       		.uleb128 0x18
 4203 0116 9642     		.uleb128 0x2116
 4204 0118 19       		.uleb128 0x19
 4205 0119 00       		.byte	0
 4206 011a 00       		.byte	0
 4207 011b 14       		.uleb128 0x14
 4208 011c 2E       		.uleb128 0x2e
 4209 011d 01       		.byte	0x1
 4210 011e 3F       		.uleb128 0x3f
 4211 011f 19       		.uleb128 0x19
 4212 0120 03       		.uleb128 0x3
 4213 0121 0E       		.uleb128 0xe
 4214 0122 3A       		.uleb128 0x3a
 4215 0123 0B       		.uleb128 0xb
 4216 0124 3B       		.uleb128 0x3b
 4217 0125 0B       		.uleb128 0xb
 4218 0126 27       		.uleb128 0x27
 4219 0127 19       		.uleb128 0x19
 4220 0128 11       		.uleb128 0x11
 4221 0129 01       		.uleb128 0x1
 4222 012a 12       		.uleb128 0x12
 4223 012b 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 92


 4224 012c 40       		.uleb128 0x40
 4225 012d 18       		.uleb128 0x18
 4226 012e 9642     		.uleb128 0x2116
 4227 0130 19       		.uleb128 0x19
 4228 0131 01       		.uleb128 0x1
 4229 0132 13       		.uleb128 0x13
 4230 0133 00       		.byte	0
 4231 0134 00       		.byte	0
 4232 0135 15       		.uleb128 0x15
 4233 0136 05       		.uleb128 0x5
 4234 0137 00       		.byte	0
 4235 0138 03       		.uleb128 0x3
 4236 0139 0E       		.uleb128 0xe
 4237 013a 3A       		.uleb128 0x3a
 4238 013b 0B       		.uleb128 0xb
 4239 013c 3B       		.uleb128 0x3b
 4240 013d 0B       		.uleb128 0xb
 4241 013e 49       		.uleb128 0x49
 4242 013f 13       		.uleb128 0x13
 4243 0140 02       		.uleb128 0x2
 4244 0141 18       		.uleb128 0x18
 4245 0142 00       		.byte	0
 4246 0143 00       		.byte	0
 4247 0144 16       		.uleb128 0x16
 4248 0145 2E       		.uleb128 0x2e
 4249 0146 01       		.byte	0x1
 4250 0147 3F       		.uleb128 0x3f
 4251 0148 19       		.uleb128 0x19
 4252 0149 03       		.uleb128 0x3
 4253 014a 0E       		.uleb128 0xe
 4254 014b 3A       		.uleb128 0x3a
 4255 014c 0B       		.uleb128 0xb
 4256 014d 3B       		.uleb128 0x3b
 4257 014e 0B       		.uleb128 0xb
 4258 014f 27       		.uleb128 0x27
 4259 0150 19       		.uleb128 0x19
 4260 0151 49       		.uleb128 0x49
 4261 0152 13       		.uleb128 0x13
 4262 0153 11       		.uleb128 0x11
 4263 0154 01       		.uleb128 0x1
 4264 0155 12       		.uleb128 0x12
 4265 0156 06       		.uleb128 0x6
 4266 0157 40       		.uleb128 0x40
 4267 0158 18       		.uleb128 0x18
 4268 0159 9642     		.uleb128 0x2116
 4269 015b 19       		.uleb128 0x19
 4270 015c 01       		.uleb128 0x1
 4271 015d 13       		.uleb128 0x13
 4272 015e 00       		.byte	0
 4273 015f 00       		.byte	0
 4274 0160 17       		.uleb128 0x17
 4275 0161 2E       		.uleb128 0x2e
 4276 0162 01       		.byte	0x1
 4277 0163 3F       		.uleb128 0x3f
 4278 0164 19       		.uleb128 0x19
 4279 0165 03       		.uleb128 0x3
 4280 0166 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 93


 4281 0167 3A       		.uleb128 0x3a
 4282 0168 0B       		.uleb128 0xb
 4283 0169 3B       		.uleb128 0x3b
 4284 016a 0B       		.uleb128 0xb
 4285 016b 27       		.uleb128 0x27
 4286 016c 19       		.uleb128 0x19
 4287 016d 11       		.uleb128 0x11
 4288 016e 01       		.uleb128 0x1
 4289 016f 12       		.uleb128 0x12
 4290 0170 06       		.uleb128 0x6
 4291 0171 40       		.uleb128 0x40
 4292 0172 18       		.uleb128 0x18
 4293 0173 9742     		.uleb128 0x2117
 4294 0175 19       		.uleb128 0x19
 4295 0176 01       		.uleb128 0x1
 4296 0177 13       		.uleb128 0x13
 4297 0178 00       		.byte	0
 4298 0179 00       		.byte	0
 4299 017a 18       		.uleb128 0x18
 4300 017b 2E       		.uleb128 0x2e
 4301 017c 01       		.byte	0x1
 4302 017d 3F       		.uleb128 0x3f
 4303 017e 19       		.uleb128 0x19
 4304 017f 03       		.uleb128 0x3
 4305 0180 0E       		.uleb128 0xe
 4306 0181 3A       		.uleb128 0x3a
 4307 0182 0B       		.uleb128 0xb
 4308 0183 3B       		.uleb128 0x3b
 4309 0184 0B       		.uleb128 0xb
 4310 0185 27       		.uleb128 0x27
 4311 0186 19       		.uleb128 0x19
 4312 0187 49       		.uleb128 0x49
 4313 0188 13       		.uleb128 0x13
 4314 0189 11       		.uleb128 0x11
 4315 018a 01       		.uleb128 0x1
 4316 018b 12       		.uleb128 0x12
 4317 018c 06       		.uleb128 0x6
 4318 018d 40       		.uleb128 0x40
 4319 018e 18       		.uleb128 0x18
 4320 018f 9742     		.uleb128 0x2117
 4321 0191 19       		.uleb128 0x19
 4322 0192 01       		.uleb128 0x1
 4323 0193 13       		.uleb128 0x13
 4324 0194 00       		.byte	0
 4325 0195 00       		.byte	0
 4326 0196 19       		.uleb128 0x19
 4327 0197 2E       		.uleb128 0x2e
 4328 0198 01       		.byte	0x1
 4329 0199 3F       		.uleb128 0x3f
 4330 019a 19       		.uleb128 0x19
 4331 019b 03       		.uleb128 0x3
 4332 019c 0E       		.uleb128 0xe
 4333 019d 3A       		.uleb128 0x3a
 4334 019e 0B       		.uleb128 0xb
 4335 019f 3B       		.uleb128 0x3b
 4336 01a0 05       		.uleb128 0x5
 4337 01a1 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 94


 4338 01a2 01       		.uleb128 0x1
 4339 01a3 12       		.uleb128 0x12
 4340 01a4 06       		.uleb128 0x6
 4341 01a5 40       		.uleb128 0x40
 4342 01a6 18       		.uleb128 0x18
 4343 01a7 9642     		.uleb128 0x2116
 4344 01a9 19       		.uleb128 0x19
 4345 01aa 01       		.uleb128 0x1
 4346 01ab 13       		.uleb128 0x13
 4347 01ac 00       		.byte	0
 4348 01ad 00       		.byte	0
 4349 01ae 1A       		.uleb128 0x1a
 4350 01af 34       		.uleb128 0x34
 4351 01b0 00       		.byte	0
 4352 01b1 03       		.uleb128 0x3
 4353 01b2 0E       		.uleb128 0xe
 4354 01b3 3A       		.uleb128 0x3a
 4355 01b4 0B       		.uleb128 0xb
 4356 01b5 3B       		.uleb128 0x3b
 4357 01b6 05       		.uleb128 0x5
 4358 01b7 49       		.uleb128 0x49
 4359 01b8 13       		.uleb128 0x13
 4360 01b9 02       		.uleb128 0x2
 4361 01ba 18       		.uleb128 0x18
 4362 01bb 00       		.byte	0
 4363 01bc 00       		.byte	0
 4364 01bd 1B       		.uleb128 0x1b
 4365 01be 2E       		.uleb128 0x2e
 4366 01bf 00       		.byte	0
 4367 01c0 3F       		.uleb128 0x3f
 4368 01c1 19       		.uleb128 0x19
 4369 01c2 03       		.uleb128 0x3
 4370 01c3 0E       		.uleb128 0xe
 4371 01c4 3A       		.uleb128 0x3a
 4372 01c5 0B       		.uleb128 0xb
 4373 01c6 3B       		.uleb128 0x3b
 4374 01c7 05       		.uleb128 0x5
 4375 01c8 27       		.uleb128 0x27
 4376 01c9 19       		.uleb128 0x19
 4377 01ca 49       		.uleb128 0x49
 4378 01cb 13       		.uleb128 0x13
 4379 01cc 11       		.uleb128 0x11
 4380 01cd 01       		.uleb128 0x1
 4381 01ce 12       		.uleb128 0x12
 4382 01cf 06       		.uleb128 0x6
 4383 01d0 40       		.uleb128 0x40
 4384 01d1 18       		.uleb128 0x18
 4385 01d2 9642     		.uleb128 0x2116
 4386 01d4 19       		.uleb128 0x19
 4387 01d5 00       		.byte	0
 4388 01d6 00       		.byte	0
 4389 01d7 1C       		.uleb128 0x1c
 4390 01d8 2E       		.uleb128 0x2e
 4391 01d9 01       		.byte	0x1
 4392 01da 3F       		.uleb128 0x3f
 4393 01db 19       		.uleb128 0x19
 4394 01dc 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 95


 4395 01dd 0E       		.uleb128 0xe
 4396 01de 3A       		.uleb128 0x3a
 4397 01df 0B       		.uleb128 0xb
 4398 01e0 3B       		.uleb128 0x3b
 4399 01e1 05       		.uleb128 0x5
 4400 01e2 49       		.uleb128 0x49
 4401 01e3 13       		.uleb128 0x13
 4402 01e4 11       		.uleb128 0x11
 4403 01e5 01       		.uleb128 0x1
 4404 01e6 12       		.uleb128 0x12
 4405 01e7 06       		.uleb128 0x6
 4406 01e8 40       		.uleb128 0x40
 4407 01e9 18       		.uleb128 0x18
 4408 01ea 9642     		.uleb128 0x2116
 4409 01ec 19       		.uleb128 0x19
 4410 01ed 01       		.uleb128 0x1
 4411 01ee 13       		.uleb128 0x13
 4412 01ef 00       		.byte	0
 4413 01f0 00       		.byte	0
 4414 01f1 1D       		.uleb128 0x1d
 4415 01f2 0B       		.uleb128 0xb
 4416 01f3 01       		.byte	0x1
 4417 01f4 11       		.uleb128 0x11
 4418 01f5 01       		.uleb128 0x1
 4419 01f6 12       		.uleb128 0x12
 4420 01f7 06       		.uleb128 0x6
 4421 01f8 00       		.byte	0
 4422 01f9 00       		.byte	0
 4423 01fa 1E       		.uleb128 0x1e
 4424 01fb 0B       		.uleb128 0xb
 4425 01fc 01       		.byte	0x1
 4426 01fd 11       		.uleb128 0x11
 4427 01fe 01       		.uleb128 0x1
 4428 01ff 12       		.uleb128 0x12
 4429 0200 06       		.uleb128 0x6
 4430 0201 01       		.uleb128 0x1
 4431 0202 13       		.uleb128 0x13
 4432 0203 00       		.byte	0
 4433 0204 00       		.byte	0
 4434 0205 1F       		.uleb128 0x1f
 4435 0206 21       		.uleb128 0x21
 4436 0207 00       		.byte	0
 4437 0208 49       		.uleb128 0x49
 4438 0209 13       		.uleb128 0x13
 4439 020a 2F       		.uleb128 0x2f
 4440 020b 05       		.uleb128 0x5
 4441 020c 00       		.byte	0
 4442 020d 00       		.byte	0
 4443 020e 20       		.uleb128 0x20
 4444 020f 2E       		.uleb128 0x2e
 4445 0210 01       		.byte	0x1
 4446 0211 3F       		.uleb128 0x3f
 4447 0212 19       		.uleb128 0x19
 4448 0213 03       		.uleb128 0x3
 4449 0214 0E       		.uleb128 0xe
 4450 0215 3A       		.uleb128 0x3a
 4451 0216 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 96


 4452 0217 3B       		.uleb128 0x3b
 4453 0218 05       		.uleb128 0x5
 4454 0219 27       		.uleb128 0x27
 4455 021a 19       		.uleb128 0x19
 4456 021b 49       		.uleb128 0x49
 4457 021c 13       		.uleb128 0x13
 4458 021d 11       		.uleb128 0x11
 4459 021e 01       		.uleb128 0x1
 4460 021f 12       		.uleb128 0x12
 4461 0220 06       		.uleb128 0x6
 4462 0221 40       		.uleb128 0x40
 4463 0222 18       		.uleb128 0x18
 4464 0223 9642     		.uleb128 0x2116
 4465 0225 19       		.uleb128 0x19
 4466 0226 01       		.uleb128 0x1
 4467 0227 13       		.uleb128 0x13
 4468 0228 00       		.byte	0
 4469 0229 00       		.byte	0
 4470 022a 21       		.uleb128 0x21
 4471 022b 05       		.uleb128 0x5
 4472 022c 00       		.byte	0
 4473 022d 03       		.uleb128 0x3
 4474 022e 0E       		.uleb128 0xe
 4475 022f 3A       		.uleb128 0x3a
 4476 0230 0B       		.uleb128 0xb
 4477 0231 3B       		.uleb128 0x3b
 4478 0232 05       		.uleb128 0x5
 4479 0233 49       		.uleb128 0x49
 4480 0234 13       		.uleb128 0x13
 4481 0235 02       		.uleb128 0x2
 4482 0236 18       		.uleb128 0x18
 4483 0237 00       		.byte	0
 4484 0238 00       		.byte	0
 4485 0239 22       		.uleb128 0x22
 4486 023a 34       		.uleb128 0x34
 4487 023b 00       		.byte	0
 4488 023c 03       		.uleb128 0x3
 4489 023d 08       		.uleb128 0x8
 4490 023e 3A       		.uleb128 0x3a
 4491 023f 0B       		.uleb128 0xb
 4492 0240 3B       		.uleb128 0x3b
 4493 0241 05       		.uleb128 0x5
 4494 0242 49       		.uleb128 0x49
 4495 0243 13       		.uleb128 0x13
 4496 0244 02       		.uleb128 0x2
 4497 0245 18       		.uleb128 0x18
 4498 0246 00       		.byte	0
 4499 0247 00       		.byte	0
 4500 0248 23       		.uleb128 0x23
 4501 0249 34       		.uleb128 0x34
 4502 024a 00       		.byte	0
 4503 024b 03       		.uleb128 0x3
 4504 024c 0E       		.uleb128 0xe
 4505 024d 3A       		.uleb128 0x3a
 4506 024e 0B       		.uleb128 0xb
 4507 024f 3B       		.uleb128 0x3b
 4508 0250 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 97


 4509 0251 49       		.uleb128 0x49
 4510 0252 13       		.uleb128 0x13
 4511 0253 3F       		.uleb128 0x3f
 4512 0254 19       		.uleb128 0x19
 4513 0255 3C       		.uleb128 0x3c
 4514 0256 19       		.uleb128 0x19
 4515 0257 00       		.byte	0
 4516 0258 00       		.byte	0
 4517 0259 24       		.uleb128 0x24
 4518 025a 34       		.uleb128 0x34
 4519 025b 00       		.byte	0
 4520 025c 03       		.uleb128 0x3
 4521 025d 0E       		.uleb128 0xe
 4522 025e 3A       		.uleb128 0x3a
 4523 025f 0B       		.uleb128 0xb
 4524 0260 3B       		.uleb128 0x3b
 4525 0261 0B       		.uleb128 0xb
 4526 0262 49       		.uleb128 0x49
 4527 0263 13       		.uleb128 0x13
 4528 0264 3F       		.uleb128 0x3f
 4529 0265 19       		.uleb128 0x19
 4530 0266 02       		.uleb128 0x2
 4531 0267 18       		.uleb128 0x18
 4532 0268 00       		.byte	0
 4533 0269 00       		.byte	0
 4534 026a 25       		.uleb128 0x25
 4535 026b 34       		.uleb128 0x34
 4536 026c 00       		.byte	0
 4537 026d 03       		.uleb128 0x3
 4538 026e 08       		.uleb128 0x8
 4539 026f 3A       		.uleb128 0x3a
 4540 0270 0B       		.uleb128 0xb
 4541 0271 3B       		.uleb128 0x3b
 4542 0272 0B       		.uleb128 0xb
 4543 0273 49       		.uleb128 0x49
 4544 0274 13       		.uleb128 0x13
 4545 0275 3F       		.uleb128 0x3f
 4546 0276 19       		.uleb128 0x19
 4547 0277 02       		.uleb128 0x2
 4548 0278 18       		.uleb128 0x18
 4549 0279 00       		.byte	0
 4550 027a 00       		.byte	0
 4551 027b 00       		.byte	0
 4552              		.section	.debug_aranges,"",%progbits
 4553 0000 8C000000 		.4byte	0x8c
 4554 0004 0200     		.2byte	0x2
 4555 0006 00000000 		.4byte	.Ldebug_info0
 4556 000a 04       		.byte	0x4
 4557 000b 00       		.byte	0
 4558 000c 0000     		.2byte	0
 4559 000e 0000     		.2byte	0
 4560 0010 00000000 		.4byte	.LFB64
 4561 0014 0C000000 		.4byte	.LFE64-.LFB64
 4562 0018 00000000 		.4byte	.LFB65
 4563 001c 2C010000 		.4byte	.LFE65-.LFB65
 4564 0020 00000000 		.4byte	.LFB66
 4565 0024 64000000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 98


 4566 0028 00000000 		.4byte	.LFB67
 4567 002c 2A000000 		.4byte	.LFE67-.LFB67
 4568 0030 00000000 		.4byte	.LFB68
 4569 0034 50000000 		.4byte	.LFE68-.LFB68
 4570 0038 00000000 		.4byte	.LFB69
 4571 003c 48000000 		.4byte	.LFE69-.LFB69
 4572 0040 00000000 		.4byte	.LFB70
 4573 0044 1E000000 		.4byte	.LFE70-.LFB70
 4574 0048 00000000 		.4byte	.LFB71
 4575 004c 46000000 		.4byte	.LFE71-.LFB71
 4576 0050 00000000 		.4byte	.LFB72
 4577 0054 2C010000 		.4byte	.LFE72-.LFB72
 4578 0058 00000000 		.4byte	.LFB73
 4579 005c 1E000000 		.4byte	.LFE73-.LFB73
 4580 0060 00000000 		.4byte	.LFB74
 4581 0064 60040000 		.4byte	.LFE74-.LFB74
 4582 0068 00000000 		.4byte	.LFB75
 4583 006c 44000000 		.4byte	.LFE75-.LFB75
 4584 0070 00000000 		.4byte	.LFB76
 4585 0074 94040000 		.4byte	.LFE76-.LFB76
 4586 0078 00000000 		.4byte	.LFB77
 4587 007c 74000000 		.4byte	.LFE77-.LFB77
 4588 0080 00000000 		.4byte	.LFB78
 4589 0084 38010000 		.4byte	.LFE78-.LFB78
 4590 0088 00000000 		.4byte	0
 4591 008c 00000000 		.4byte	0
 4592              		.section	.debug_ranges,"",%progbits
 4593              	.Ldebug_ranges0:
 4594 0000 00000000 		.4byte	.LFB64
 4595 0004 0C000000 		.4byte	.LFE64
 4596 0008 00000000 		.4byte	.LFB65
 4597 000c 2C010000 		.4byte	.LFE65
 4598 0010 00000000 		.4byte	.LFB66
 4599 0014 64000000 		.4byte	.LFE66
 4600 0018 00000000 		.4byte	.LFB67
 4601 001c 2A000000 		.4byte	.LFE67
 4602 0020 00000000 		.4byte	.LFB68
 4603 0024 50000000 		.4byte	.LFE68
 4604 0028 00000000 		.4byte	.LFB69
 4605 002c 48000000 		.4byte	.LFE69
 4606 0030 00000000 		.4byte	.LFB70
 4607 0034 1E000000 		.4byte	.LFE70
 4608 0038 00000000 		.4byte	.LFB71
 4609 003c 46000000 		.4byte	.LFE71
 4610 0040 00000000 		.4byte	.LFB72
 4611 0044 2C010000 		.4byte	.LFE72
 4612 0048 00000000 		.4byte	.LFB73
 4613 004c 1E000000 		.4byte	.LFE73
 4614 0050 00000000 		.4byte	.LFB74
 4615 0054 60040000 		.4byte	.LFE74
 4616 0058 00000000 		.4byte	.LFB75
 4617 005c 44000000 		.4byte	.LFE75
 4618 0060 00000000 		.4byte	.LFB76
 4619 0064 94040000 		.4byte	.LFE76
 4620 0068 00000000 		.4byte	.LFB77
 4621 006c 74000000 		.4byte	.LFE77
 4622 0070 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 99


 4623 0074 38010000 		.4byte	.LFE78
 4624 0078 00000000 		.4byte	0
 4625 007c 00000000 		.4byte	0
 4626              		.section	.debug_line,"",%progbits
 4627              	.Ldebug_line0:
 4628 0000 4B040000 		.section	.debug_str,"MS",%progbits,1
 4628      02001B02 
 4628      00000201 
 4628      FB0E0D00 
 4628      01010101 
 4629              	.LASF114:
 4630 0000 745F6D6F 		.ascii	"t_modem\000"
 4630      64656D00 
 4631              	.LASF12:
 4632 0008 75696E74 		.ascii	"uint16\000"
 4632      313600
 4633              	.LASF54:
 4634 000f 746D5F68 		.ascii	"tm_hour\000"
 4634      6F757200 
 4635              	.LASF37:
 4636 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4636      696E7661 
 4636      6C69645F 
 4636      72656164 
 4636      696E6773 
 4637              	.LASF169:
 4638 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4638      73657273 
 4638      5C64616E 
 4638      747A5C44 
 4638      6F63756D 
 4639 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4639      2E637964 
 4639      736E00
 4640              	.LASF148:
 4641 0064 62756666 		.ascii	"buffer_overflow\000"
 4641      65725F6F 
 4641      76657266 
 4641      6C6F7700 
 4642              	.LASF146:
 4643 0074 66696C65 		.ascii	"fileName\000"
 4643      4E616D65 
 4643      00
 4644              	.LASF0:
 4645 007d 7369676E 		.ascii	"signed char\000"
 4645      65642063 
 4645      68617200 
 4646              	.LASF86:
 4647 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4647      74446F77 
 4647      6E526573 
 4647      6574436F 
 4647      6E646974 
 4648              	.LASF170:
 4649 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4649      75705F49 
 4649      535200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 100


 4650              	.LASF167:
 4651 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4651      43313120 
 4651      352E342E 
 4651      31203230 
 4651      31363036 
 4652 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4652      20726576 
 4652      6973696F 
 4652      6E203233 
 4652      37373135 
 4653 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4653      66756E63 
 4653      74696F6E 
 4653      2D736563 
 4653      74696F6E 
 4654              	.LASF112:
 4655 013a 745F7072 		.ascii	"t_pressure\000"
 4655      65737375 
 4655      726500
 4656              	.LASF27:
 4657 0145 4D6F6E74 		.ascii	"Month\000"
 4657      6800
 4658              	.LASF7:
 4659 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4659      206C6F6E 
 4659      6720756E 
 4659      7369676E 
 4659      65642069 
 4660              	.LASF23:
 4661 0162 486F7572 		.ascii	"Hour\000"
 4661      00
 4662              	.LASF152:
 4663 0167 6D6F6465 		.ascii	"modem_state\000"
 4663      6D5F7374 
 4663      61746500 
 4664              	.LASF161:
 4665 0173 616C6172 		.ascii	"alarmMeasure\000"
 4665      6D4D6561 
 4665      73757265 
 4665      00
 4666              	.LASF147:
 4667 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4667      52784275 
 4667      66666572 
 4667      00
 4668              	.LASF109:
 4669 018d 745F6C65 		.ascii	"t_level_sensor\000"
 4669      76656C5F 
 4669      73656E73 
 4669      6F7200
 4670              	.LASF6:
 4671 019c 6C6F6E67 		.ascii	"long long int\000"
 4671      206C6F6E 
 4671      6720696E 
 4671      7400
 4672              	.LASF122:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 101


 4673 01aa 7061636B 		.ascii	"packets\000"
 4673      65747300 
 4674              	.LASF70:
 4675 01b2 65636E6F 		.ascii	"ecno\000"
 4675      00
 4676              	.LASF162:
 4677 01b7 74696D65 		.ascii	"timeToMeasure\000"
 4677      546F4D65 
 4677      61737572 
 4677      6500
 4678              	.LASF73:
 4679 01c5 74696D65 		.ascii	"time_to_network_connect\000"
 4679      5F746F5F 
 4679      6E657477 
 4679      6F726B5F 
 4679      636F6E6E 
 4680              	.LASF164:
 4681 01dd 74696D65 		.ascii	"timeToSync\000"
 4681      546F5379 
 4681      6E6300
 4682              	.LASF40:
 4683 01e8 766F6C74 		.ascii	"voltage_solar\000"
 4683      6167655F 
 4683      736F6C61 
 4683      7200
 4684              	.LASF41:
 4685 01f6 766F6C74 		.ascii	"voltage_charge_current\000"
 4685      6167655F 
 4685      63686172 
 4685      67655F63 
 4685      75727265 
 4686              	.LASF145:
 4687 020d 75706772 		.ascii	"upgrade_status\000"
 4687      6164655F 
 4687      73746174 
 4687      757300
 4688              	.LASF125:
 4689 021c 635F6461 		.ascii	"c_data_count_sent\000"
 4689      74615F63 
 4689      6F756E74 
 4689      5F73656E 
 4689      7400
 4690              	.LASF67:
 4691 022e 6D6F6465 		.ascii	"modem_info_t\000"
 4691      6D5F696E 
 4691      666F5F74 
 4691      00
 4692              	.LASF68:
 4693 023b 72786C65 		.ascii	"rxlev\000"
 4693      7600
 4694              	.LASF4:
 4695 0241 6C6F6E67 		.ascii	"long int\000"
 4695      20696E74 
 4695      00
 4696              	.LASF74:
 4697 024a 74696D65 		.ascii	"time_to_acquire_ip\000"
 4697      5F746F5F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 102


 4697      61637175 
 4697      6972655F 
 4697      697000
 4698              	.LASF87:
 4699 025d 616C6172 		.ascii	"alarm\000"
 4699      6D00
 4700              	.LASF48:
 4701 0263 70726573 		.ascii	"pressure_voltage_off\000"
 4701      73757265 
 4701      5F766F6C 
 4701      74616765 
 4701      5F6F6666 
 4702              	.LASF11:
 4703 0278 75696E74 		.ascii	"uint8\000"
 4703      3800
 4704              	.LASF117:
 4705 027e 635F7472 		.ascii	"c_try_counter\000"
 4705      795F636F 
 4705      756E7465 
 4705      7200
 4706              	.LASF128:
 4707 028c 73656E64 		.ascii	"send_time\000"
 4707      5F74696D 
 4707      6500
 4708              	.LASF16:
 4709 0296 696E7433 		.ascii	"int32\000"
 4709      3200
 4710              	.LASF76:
 4711 029c 6E6F6465 		.ascii	"node_type\000"
 4711      5F747970 
 4711      6500
 4712              	.LASF115:
 4713 02a6 73796E63 		.ascii	"syncData\000"
 4713      44617461 
 4713      00
 4714              	.LASF123:
 4715 02af 6E657477 		.ascii	"network_time\000"
 4715      6F726B5F 
 4715      74696D65 
 4715      00
 4716              	.LASF13:
 4717 02bc 75696E74 		.ascii	"uint32\000"
 4717      333200
 4718              	.LASF65:
 4719 02c3 6D6F6465 		.ascii	"model_id\000"
 4719      6C5F6964 
 4719      00
 4720              	.LASF34:
 4721 02cc 616C6C5F 		.ascii	"all_level_readings\000"
 4721      6C657665 
 4721      6C5F7265 
 4721      6164696E 
 4721      677300
 4722              	.LASF83:
 4723 02df 636F756E 		.ascii	"countDownValue\000"
 4723      74446F77 
 4723      6E56616C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 103


 4723      756500
 4724              	.LASF141:
 4725 02ee 75706772 		.ascii	"upgraded\000"
 4725      61646564 
 4725      00
 4726              	.LASF56:
 4727 02f7 746D5F6D 		.ascii	"tm_mon\000"
 4727      6F6E00
 4728              	.LASF80:
 4729 02fe 64656275 		.ascii	"debug_level\000"
 4729      675F6C65 
 4729      76656C00 
 4730              	.LASF143:
 4731 030a 706F7274 		.ascii	"port\000"
 4731      00
 4732              	.LASF61:
 4733 030f 76616C75 		.ascii	"value\000"
 4733      6500
 4734              	.LASF142:
 4735 0315 686F7374 		.ascii	"host\000"
 4735      00
 4736              	.LASF57:
 4737 031a 746D5F79 		.ascii	"tm_year\000"
 4737      65617200 
 4738              	.LASF163:
 4739 0322 616C6172 		.ascii	"alarmSync\000"
 4739      6D53796E 
 4739      6300
 4740              	.LASF47:
 4741 032c 70726573 		.ascii	"pressure_voltage_on\000"
 4741      73757265 
 4741      5F766F6C 
 4741      74616765 
 4741      5F6F6E00 
 4742              	.LASF8:
 4743 0340 756E7369 		.ascii	"unsigned int\000"
 4743      676E6564 
 4743      20696E74 
 4743      00
 4744              	.LASF139:
 4745 034d 73657454 		.ascii	"setTime\000"
 4745      696D6500 
 4746              	.LASF63:
 4747 0355 6B65795F 		.ascii	"key_value_t\000"
 4747      76616C75 
 4747      655F7400 
 4748              	.LASF99:
 4749 0361 41796F49 		.ascii	"AyoItsTime\000"
 4749      74735469 
 4749      6D6500
 4750              	.LASF36:
 4751 036c 6E756D5F 		.ascii	"num_valid_readings\000"
 4751      76616C69 
 4751      645F7265 
 4751      6164696E 
 4751      677300
 4752              	.LASF127:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 104


 4753 037f 68747470 		.ascii	"http_chunk\000"
 4753      5F636875 
 4753      6E6B00
 4754              	.LASF133:
 4755 038a 6D5F766F 		.ascii	"m_voltage\000"
 4755      6C746167 
 4755      6500
 4756              	.LASF5:
 4757 0394 6C6F6E67 		.ascii	"long unsigned int\000"
 4757      20756E73 
 4757      69676E65 
 4757      6420696E 
 4757      7400
 4758              	.LASF96:
 4759 03a6 7472795F 		.ascii	"try_counter\000"
 4759      636F756E 
 4759      74657200 
 4760              	.LASF118:
 4761 03b2 64617461 		.ascii	"data_count_desired\000"
 4761      5F636F75 
 4761      6E745F64 
 4761      65736972 
 4761      656400
 4762              	.LASF39:
 4763 03c5 766F6C74 		.ascii	"voltage_battery\000"
 4763      6167655F 
 4763      62617474 
 4763      65727900 
 4764              	.LASF25:
 4765 03d5 4461794F 		.ascii	"DayOfMonth\000"
 4765      664D6F6E 
 4765      746800
 4766              	.LASF131:
 4767 03e0 6D616B65 		.ascii	"makeMeasurements\000"
 4767      4D656173 
 4767      7572656D 
 4767      656E7473 
 4767      00
 4768              	.LASF151:
 4769 03f1 64617461 		.ascii	"data\000"
 4769      00
 4770              	.LASF92:
 4771 03f6 65705F70 		.ascii	"ep_port\000"
 4771      6F727400 
 4772              	.LASF60:
 4773 03fe 746D5F69 		.ascii	"tm_isdst\000"
 4773      73647374 
 4773      00
 4774              	.LASF88:
 4775 0407 6D6F6465 		.ascii	"modem_info\000"
 4775      6D5F696E 
 4775      666F00
 4776              	.LASF91:
 4777 0412 65705F68 		.ascii	"ep_host\000"
 4777      6F737400 
 4778              	.LASF14:
 4779 041a 696E7438 		.ascii	"int8\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 105


 4779      00
 4780              	.LASF98:
 4781 041f 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4781      576F726B 
 4781      576F726B 
 4781      576F726B 
 4781      576F726B 
 4782              	.LASF119:
 4783 0438 635F6461 		.ascii	"c_data_count_desired\000"
 4783      74615F63 
 4783      6F756E74 
 4783      5F646573 
 4783      69726564 
 4784              	.LASF113:
 4785 044d 745F7364 		.ascii	"t_sd_card\000"
 4785      5F636172 
 4785      6400
 4786              	.LASF2:
 4787 0457 73686F72 		.ascii	"short int\000"
 4787      7420696E 
 4787      7400
 4788              	.LASF136:
 4789 0461 76616C76 		.ascii	"valve_position\000"
 4789      655F706F 
 4789      73697469 
 4789      6F6E00
 4790              	.LASF153:
 4791 0470 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4791      6D5F7374 
 4791      6172745F 
 4791      74696D65 
 4791      5F737461 
 4792              	.LASF90:
 4793 0487 7379735F 		.ascii	"sys_info_t\000"
 4793      696E666F 
 4793      5F7400
 4794              	.LASF82:
 4795 0492 75706461 		.ascii	"updatable_parameters_t\000"
 4795      7461626C 
 4795      655F7061 
 4795      72616D65 
 4795      74657273 
 4796              	.LASF100:
 4797 04a9 616C6172 		.ascii	"alarmType\000"
 4797      6D547970 
 4797      6500
 4798              	.LASF149:
 4799 04b3 64617461 		.ascii	"dataPointsInStack\000"
 4799      506F696E 
 4799      7473496E 
 4799      53746163 
 4799      6B00
 4800              	.LASF53:
 4801 04c5 746D5F6D 		.ascii	"tm_min\000"
 4801      696E00
 4802              	.LASF17:
 4803 04cc 666C6F61 		.ascii	"float32\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 106


 4803      74333200 
 4804              	.LASF101:
 4805 04d4 616C6172 		.ascii	"alarmToBeUpdated\000"
 4805      6D546F42 
 4805      65557064 
 4805      61746564 
 4805      00
 4806              	.LASF22:
 4807 04e5 73697A65 		.ascii	"sizetype\000"
 4807      74797065 
 4807      00
 4808              	.LASF59:
 4809 04ee 746D5F79 		.ascii	"tm_yday\000"
 4809      64617900 
 4810              	.LASF93:
 4811 04f6 7379735F 		.ascii	"sys_settings_t\000"
 4811      73657474 
 4811      696E6773 
 4811      5F7400
 4812              	.LASF140:
 4813 0505 6C6F6361 		.ascii	"localTime\000"
 4813      6C54696D 
 4813      6500
 4814              	.LASF165:
 4815 050f 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4815      546F5379 
 4815      636E5265 
 4815      6D6F7465 
 4815      50617261 
 4816              	.LASF62:
 4817 0526 74696D65 		.ascii	"timeStamp\000"
 4817      5374616D 
 4817      7000
 4818              	.LASF29:
 4819 0530 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4819      54494D45 
 4819      5F444154 
 4819      4500
 4820              	.LASF155:
 4821 053e 75706461 		.ascii	"updatable_parameters\000"
 4821      7461626C 
 4821      655F7061 
 4821      72616D65 
 4821      74657273 
 4822              	.LASF105:
 4823 0553 43726561 		.ascii	"CreateAlarm\000"
 4823      7465416C 
 4823      61726D00 
 4824              	.LASF126:
 4825 055f 7061636B 		.ascii	"packet\000"
 4825      657400
 4826              	.LASF138:
 4827 0566 64697363 		.ascii	"discharge_estimate\000"
 4827      68617267 
 4827      655F6573 
 4827      74696D61 
 4827      746500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 107


 4828              	.LASF116:
 4829 0579 735F7273 		.ascii	"s_rsrp\000"
 4829      727000
 4830              	.LASF42:
 4831 0580 766F6C74 		.ascii	"voltage_pressure\000"
 4831      6167655F 
 4831      70726573 
 4831      73757265 
 4831      00
 4832              	.LASF156:
 4833 0591 68747470 		.ascii	"http_request\000"
 4833      5F726571 
 4833      75657374 
 4833      00
 4834              	.LASF18:
 4835 059e 666C6F61 		.ascii	"float\000"
 4835      7400
 4836              	.LASF38:
 4837 05a4 6C657665 		.ascii	"level_sensor_t\000"
 4837      6C5F7365 
 4837      6E736F72 
 4837      5F7400
 4838              	.LASF130:
 4839 05b3 636F6E66 		.ascii	"configureRemoteParams\000"
 4839      69677572 
 4839      6552656D 
 4839      6F746550 
 4839      6172616D 
 4840              	.LASF166:
 4841 05c9 44617461 		.ascii	"Data_fileName\000"
 4841      5F66696C 
 4841      654E616D 
 4841      6500
 4842              	.LASF97:
 4843 05d7 6D6F6465 		.ascii	"modem_status\000"
 4843      6D5F7374 
 4843      61747573 
 4843      00
 4844              	.LASF30:
 4845 05e4 74657374 		.ascii	"test_name\000"
 4845      5F6E616D 
 4845      6500
 4846              	.LASF28:
 4847 05ee 59656172 		.ascii	"Year\000"
 4847      00
 4848              	.LASF81:
 4849 05f3 5F426F6F 		.ascii	"_Bool\000"
 4849      6C00
 4850              	.LASF10:
 4851 05f9 696E7433 		.ascii	"int32_t\000"
 4851      325F7400 
 4852              	.LASF1:
 4853 0601 756E7369 		.ascii	"unsigned char\000"
 4853      676E6564 
 4853      20636861 
 4853      7200
 4854              	.LASF144:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 108


 4855 060f 726F7574 		.ascii	"route\000"
 4855      6500
 4856              	.LASF160:
 4857 0615 73797374 		.ascii	"system_settings\000"
 4857      656D5F73 
 4857      65747469 
 4857      6E677300 
 4858              	.LASF72:
 4859 0625 72737270 		.ascii	"rsrp\000"
 4859      00
 4860              	.LASF71:
 4861 062a 72737271 		.ascii	"rsrq\000"
 4861      00
 4862              	.LASF102:
 4863 062f 52657365 		.ascii	"ResetAlarm\000"
 4863      74416C61 
 4863      726D00
 4864              	.LASF129:
 4865 063a 735F7365 		.ascii	"s_send_time\000"
 4865      6E645F74 
 4865      696D6500 
 4866              	.LASF79:
 4867 0646 73796E63 		.ascii	"sync_time\000"
 4867      5F74696D 
 4867      6500
 4868              	.LASF50:
 4869 0650 70726573 		.ascii	"pressure_depth\000"
 4869      73757265 
 4869      5F646570 
 4869      746800
 4870              	.LASF69:
 4871 065f 72736370 		.ascii	"rscp\000"
 4871      00
 4872              	.LASF24:
 4873 0664 4461794F 		.ascii	"DayOfWeek\000"
 4873      66576565 
 4873      6B00
 4874              	.LASF33:
 4875 066e 74657374 		.ascii	"test_t\000"
 4875      5F7400
 4876              	.LASF159:
 4877 0675 73797374 		.ascii	"system_info\000"
 4877      656D5F69 
 4877      6E666F00 
 4878              	.LASF66:
 4879 0681 696D6569 		.ascii	"imei\000"
 4879      00
 4880              	.LASF32:
 4881 0686 72656173 		.ascii	"reason\000"
 4881      6F6E00
 4882              	.LASF103:
 4883 068d 616C6172 		.ascii	"alarmToBeReset\000"
 4883      6D546F42 
 4883      65526573 
 4883      657400
 4884              	.LASF108:
 4885 069c 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 109


 4885      6B697479 
 4885      43686563 
 4885      6B596F75 
 4885      7273656C 
 4886              	.LASF124:
 4887 06c8 64617461 		.ascii	"data_count_sent\000"
 4887      5F636F75 
 4887      6E745F73 
 4887      656E7400 
 4888              	.LASF75:
 4889 06d8 6D6F6465 		.ascii	"modem_stats_t\000"
 4889      6D5F7374 
 4889      6174735F 
 4889      7400
 4890              	.LASF49:
 4891 06e6 70726573 		.ascii	"pressure_current\000"
 4891      73757265 
 4891      5F637572 
 4891      72656E74 
 4891      00
 4892              	.LASF45:
 4893 06f7 76616C69 		.ascii	"valid\000"
 4893      6400
 4894              	.LASF58:
 4895 06fd 746D5F77 		.ascii	"tm_wday\000"
 4895      64617900 
 4896              	.LASF21:
 4897 0705 6C6F6E67 		.ascii	"long double\000"
 4897      20646F75 
 4897      626C6500 
 4898              	.LASF121:
 4899 0711 6368756E 		.ascii	"chunk\000"
 4899      6B00
 4900              	.LASF132:
 4901 0717 635F7469 		.ascii	"c_timeStamp\000"
 4901      6D655374 
 4901      616D7000 
 4902              	.LASF20:
 4903 0723 63686172 		.ascii	"char\000"
 4903      00
 4904              	.LASF44:
 4905 0728 766F6C74 		.ascii	"voltage_valve_pot_power\000"
 4905      6167655F 
 4905      76616C76 
 4905      655F706F 
 4905      745F706F 
 4906              	.LASF154:
 4907 0740 6D6F6465 		.ascii	"modem_stats\000"
 4907      6D5F7374 
 4907      61747300 
 4908              	.LASF158:
 4909 074c 68747470 		.ascii	"http_route\000"
 4909      5F726F75 
 4909      746500
 4910              	.LASF120:
 4911 0757 706F7274 		.ascii	"portConfig\000"
 4911      436F6E66 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 110


 4911      696700
 4912              	.LASF9:
 4913 0762 5F5F696E 		.ascii	"__int32_t\000"
 4913      7433325F 
 4913      7400
 4914              	.LASF94:
 4915 076c 756E6971 		.ascii	"uniqueId\000"
 4915      75654964 
 4915      00
 4916              	.LASF78:
 4917 0775 6D656173 		.ascii	"measure_time\000"
 4917      7572655F 
 4917      74696D65 
 4917      00
 4918              	.LASF134:
 4919 0782 6D5F6C65 		.ascii	"m_level_sensor\000"
 4919      76656C5F 
 4919      73656E73 
 4919      6F7200
 4920              	.LASF35:
 4921 0791 6C657665 		.ascii	"level_reading\000"
 4921      6C5F7265 
 4921      6164696E 
 4921      6700
 4922              	.LASF171:
 4923 079f 4C617942 		.ascii	"LayBack\000"
 4923      61636B00 
 4924              	.LASF3:
 4925 07a7 73686F72 		.ascii	"short unsigned int\000"
 4925      7420756E 
 4925      7369676E 
 4925      65642069 
 4925      6E7400
 4926              	.LASF64:
 4927 07ba 73696D5F 		.ascii	"sim_id\000"
 4927      696400
 4928              	.LASF55:
 4929 07c1 746D5F6D 		.ascii	"tm_mday\000"
 4929      64617900 
 4930              	.LASF137:
 4931 07c9 646F776E 		.ascii	"downstream_level_sensor\000"
 4931      73747265 
 4931      616D5F6C 
 4931      6576656C 
 4931      5F73656E 
 4932              	.LASF106:
 4933 07e1 6E657741 		.ascii	"newAlarm\000"
 4933      6C61726D 
 4933      00
 4934              	.LASF52:
 4935 07ea 746D5F73 		.ascii	"tm_sec\000"
 4935      656300
 4936              	.LASF135:
 4937 07f1 6D5F7072 		.ascii	"m_pressure\000"
 4937      65737375 
 4937      726500
 4938              	.LASF31:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 111


 4939 07fc 73746174 		.ascii	"status\000"
 4939      757300
 4940              	.LASF150:
 4941 0803 64617461 		.ascii	"dataPointsInStackDesired\000"
 4941      506F696E 
 4941      7473496E 
 4941      53746163 
 4941      6B446573 
 4942              	.LASF111:
 4943 081c 745F766F 		.ascii	"t_voltages\000"
 4943      6C746167 
 4943      657300
 4944              	.LASF168:
 4945 0827 6E6F746F 		.ascii	"notoriOS.c\000"
 4945      72694F53 
 4945      2E6300
 4946              	.LASF157:
 4947 0832 68747470 		.ascii	"http_body\000"
 4947      5F626F64 
 4947      7900
 4948              	.LASF15:
 4949 083c 696E7431 		.ascii	"int16\000"
 4949      3600
 4950              	.LASF85:
 4951 0842 636F756E 		.ascii	"countDownType\000"
 4951      74446F77 
 4951      6E547970 
 4951      6500
 4952              	.LASF84:
 4953 0850 63757272 		.ascii	"currentCountDownValue\000"
 4953      656E7443 
 4953      6F756E74 
 4953      446F776E 
 4953      56616C75 
 4954              	.LASF77:
 4955 0866 73696D5F 		.ascii	"sim_type\000"
 4955      74797065 
 4955      00
 4956              	.LASF95:
 4957 086f 635F6865 		.ascii	"c_hey\000"
 4957      7900
 4958              	.LASF43:
 4959 0875 766F6C74 		.ascii	"voltage_valve_pos\000"
 4959      6167655F 
 4959      76616C76 
 4959      655F706F 
 4959      7300
 4960              	.LASF26:
 4961 0887 4461794F 		.ascii	"DayOfYear\000"
 4961      66596561 
 4961      7200
 4962              	.LASF51:
 4963 0891 70726573 		.ascii	"pressure_t\000"
 4963      73757265 
 4963      5F7400
 4964              	.LASF104:
 4965 089c 416C6172 		.ascii	"AlarmReady\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cccCH3rc.s 			page 112


 4965      6D526561 
 4965      647900
 4966              	.LASF107:
 4967 08a7 52656164 		.ascii	"ReadyOrNot\000"
 4967      794F724E 
 4967      6F7400
 4968              	.LASF172:
 4969 08b2 6D61696E 		.ascii	"main\000"
 4969      00
 4970              	.LASF89:
 4971 08b7 63686970 		.ascii	"chip_uniqueId\000"
 4971      5F756E69 
 4971      71756549 
 4971      6400
 4972              	.LASF110:
 4973 08c5 745F7661 		.ascii	"t_valve\000"
 4973      6C766500 
 4974              	.LASF19:
 4975 08cd 646F7562 		.ascii	"double\000"
 4975      6C6500
 4976              	.LASF46:
 4977 08d4 766F6C74 		.ascii	"voltage_t\000"
 4977      6167655F 
 4977      7400
 4978              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
