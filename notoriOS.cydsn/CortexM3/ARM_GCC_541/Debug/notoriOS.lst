ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	buffer_overflow,1,1
  22              		.comm	dataPointsInStack,2,2
  23              		.comm	dataPointsInStackDesired,2,2
  24              		.comm	data,6600,4
  25              		.comm	modem_state,1,1
  26              		.comm	modem_start_time_stamp,4,4
  27              		.comm	modem_info,60,4
  28              		.comm	modem_stats,32,4
  29              		.comm	updatable_parameters,7,4
  30              		.syntax unified
  31              		.global _printf_float
  32              		.thumb
  33              		.syntax unified
  34              		.comm	App_LED_enabled,1,1
  35              		.comm	app_led_inbox,100,4
  36              		.comm	http_request,10000,4
  37              		.comm	http_body,10000,4
  38              		.comm	http_route,200,4
  39              		.comm	system_info,28,4
  40              		.comm	system_settings,104,4
  41              		.comm	alarmMeasure,6,4
  42              		.comm	timeToMeasure,1,1
  43              		.comm	alarmSync,6,4
  44              		.comm	timeToSync,1,1
  45              		.comm	timeToSycnRemoteParams,1,1
  46              		.comm	hey,1,1
  47              		.comm	alarmAppLED,6,4
  48              		.comm	timeToAppLED,1,1
  49              		.comm	alarmLevelSensor,6,4
  50              		.comm	timetoLevelSensor,1,1
  51              		.section	.text.Wakeup_ISR,"ax",%progbits
  52              		.align	2
  53              		.global	Wakeup_ISR
  54              		.thumb
  55              		.thumb_func
  56              		.type	Wakeup_ISR, %function
  57              	Wakeup_ISR:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 2


  58              	.LFB64:
  59              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  60              		.loc 1 20 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64 0000 80B5     		push	{r7, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 00AF     		add	r7, sp, #0
  69              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  70              		.loc 1 22 0
  71 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  72              		.loc 1 23 0
  73 0008 00BF     		nop
  74 000a 80BD     		pop	{r7, pc}
  75              		.cfi_endproc
  76              	.LFE64:
  77              		.size	Wakeup_ISR, .-Wakeup_ISR
  78              		.global	Data_fileName
  79              		.data
  80              		.align	2
  81              		.type	Data_fileName, %object
  82              		.size	Data_fileName, 30
  83              	Data_fileName:
  84 0000 64617461 		.ascii	"data.txt\000"
  84      2E747874 
  84      00
  85 0009 00000000 		.space	21
  85      00000000 
  85      00000000 
  85      00000000 
  85      00000000 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 3


  86              		.comm	try_counter,1,1
  87              		.section	.rodata
  88              		.align	2
  89              	.LC0:
  90 0000 25582D25 		.ascii	"%X-%X\000"
  90      5800
  91 0006 0000     		.align	2
  92              	.LC1:
  93 0008 6563322D 		.ascii	"ec2-18-222-229-124.us-east-2.compute.amazonaws.com\000"
  93      31382D32 
  93      32322D32 
  93      32392D31 
  93      32342E75 
  94              		.section	.text.ReadyOrNot,"ax",%progbits
  95              		.align	2
  96              		.global	ReadyOrNot
  97              		.thumb
  98              		.thumb_func
  99              		.type	ReadyOrNot, %function
 100              	ReadyOrNot:
 101              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 102              		.loc 1 41 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 24
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0000 B0B5     		push	{r4, r5, r7, lr}
 107              		.cfi_def_cfa_offset 16
 108              		.cfi_offset 4, -16
 109              		.cfi_offset 5, -12
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 88B0     		sub	sp, sp, #32
 113              		.cfi_def_cfa_offset 48
 114 0004 02AF     		add	r7, sp, #8
 115              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 116              		.loc 1 43 0
 117 0006 4348     		ldr	r0, .L3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 4


 118 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 119              		.loc 1 44 0
 120 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 121              		.loc 1 46 0
 122 0010 FF20     		movs	r0, #255
 123 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 124              		.loc 1 47 0
 125 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 126              		.loc 1 48 0
 127 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 128              		.loc 1 50 0
 129 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 130              		.loc 1 52 0
 131 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 132              		.loc 1 62 0
 133 0026 07F10C03 		add	r3, r7, #12
 134 002a 1846     		mov	r0, r3
 135 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 136              		.loc 1 63 0
 137 0030 FA68     		ldr	r2, [r7, #12]
 138 0032 3B69     		ldr	r3, [r7, #16]
 139 0034 0093     		str	r3, [sp]
 140 0036 1346     		mov	r3, r2
 141 0038 374A     		ldr	r2, .L3+4
 142 003a 1821     		movs	r1, #24
 143 003c 3748     		ldr	r0, .L3+8
 144 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 145              		.loc 1 65 0
 146 0042 374B     		ldr	r3, .L3+12
 147 0044 374A     		ldr	r2, .L3+16
 148 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-ea
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 5


 149              		.loc 1 69 0
 150 0048 374A     		ldr	r2, .L3+20
 151 004a 384B     		ldr	r3, .L3+24
 152 004c 1446     		mov	r4, r2
 153 004e 1D46     		mov	r5, r3
 154 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 159 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 160 005c 2B68     		ldr	r3, [r5]
 161 005e 1A46     		mov	r2, r3	@ movhi
 162 0060 2280     		strh	r2, [r4]	@ movhi
 163 0062 0234     		adds	r4, r4, #2
 164 0064 1B0C     		lsrs	r3, r3, #16
 165 0066 2370     		strb	r3, [r4]
  70:notoriOS.c    ****     
  71:notoriOS.c    ****     // production server
  72:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org"
  73:notoriOS.c    ****     
  74:notoriOS.c    **** 
  75:notoriOS.c    ****     system_settings.ep_port = 5000;
 166              		.loc 1 75 0
 167 0068 2F4B     		ldr	r3, .L3+20
 168 006a 41F28832 		movw	r2, #5000
 169 006e 5A66     		str	r2, [r3, #100]
  76:notoriOS.c    ****     // Don't need the following for new nodes
  77:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  78:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  79:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  80:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  81:notoriOS.c    ****         
  82:notoriOS.c    ****     
  83:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  84:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 170              		.loc 1 84 0
 171 0070 2F4B     		ldr	r3, .L3+28
 172 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 173 0074 99B2     		uxth	r1, r3
 174 0076 2F4C     		ldr	r4, .L3+32
 175 0078 3846     		mov	r0, r7
 176 007a 0723     		movs	r3, #7
 177 007c 0122     		movs	r2, #1
 178 007e FFF7FEFF 		bl	CreateAlarm
 179 0082 2246     		mov	r2, r4
 180 0084 3B46     		mov	r3, r7
 181 0086 1968     		ldr	r1, [r3]	@ unaligned
 182 0088 1160     		str	r1, [r2]	@ unaligned
 183 008a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 184 008c 9380     		strh	r3, [r2, #4]	@ unaligned
  85:notoriOS.c    ****     timeToMeasure = 1u;
 185              		.loc 1 85 0
 186 008e 2A4B     		ldr	r3, .L3+36
 187 0090 0122     		movs	r2, #1
 188 0092 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 6


  87:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 189              		.loc 1 87 0
 190 0094 264B     		ldr	r3, .L3+28
 191 0096 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 192 0098 99B2     		uxth	r1, r3
 193 009a 284C     		ldr	r4, .L3+40
 194 009c 3846     		mov	r0, r7
 195 009e 0723     		movs	r3, #7
 196 00a0 0122     		movs	r2, #1
 197 00a2 FFF7FEFF 		bl	CreateAlarm
 198 00a6 2246     		mov	r2, r4
 199 00a8 3B46     		mov	r3, r7
 200 00aa 1968     		ldr	r1, [r3]	@ unaligned
 201 00ac 1160     		str	r1, [r2]	@ unaligned
 202 00ae 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 203 00b0 9380     		strh	r3, [r2, #4]	@ unaligned
  88:notoriOS.c    ****     timeToSync = 1u;
 204              		.loc 1 88 0
 205 00b2 234B     		ldr	r3, .L3+44
 206 00b4 0122     		movs	r2, #1
 207 00b6 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 208              		.loc 1 90 0
 209 00b8 224B     		ldr	r3, .L3+48
 210 00ba 0022     		movs	r2, #0
 211 00bc 1A70     		strb	r2, [r3]
  91:notoriOS.c    ****     
  92:notoriOS.c    ****     // App Initializations
  93:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 212              		.loc 1 93 0
 213 00be 1C4B     		ldr	r3, .L3+28
 214 00c0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 215 00c2 99B2     		uxth	r1, r3
 216 00c4 204C     		ldr	r4, .L3+52
 217 00c6 3846     		mov	r0, r7
 218 00c8 0723     		movs	r3, #7
 219 00ca 0122     		movs	r2, #1
 220 00cc FFF7FEFF 		bl	CreateAlarm
 221 00d0 2246     		mov	r2, r4
 222 00d2 3B46     		mov	r3, r7
 223 00d4 1968     		ldr	r1, [r3]	@ unaligned
 224 00d6 1160     		str	r1, [r2]	@ unaligned
 225 00d8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 226 00da 9380     		strh	r3, [r2, #4]	@ unaligned
  94:notoriOS.c    ****     timeToAppLED = 1u;
 227              		.loc 1 94 0
 228 00dc 1B4B     		ldr	r3, .L3+56
 229 00de 0122     		movs	r2, #1
 230 00e0 1A70     		strb	r2, [r3]
  95:notoriOS.c    ****     
  96:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
 231              		.loc 1 96 0
 232 00e2 134B     		ldr	r3, .L3+28
 233 00e4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 234 00e6 99B2     		uxth	r1, r3
 235 00e8 194C     		ldr	r4, .L3+60
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 7


 236 00ea 3846     		mov	r0, r7
 237 00ec 0723     		movs	r3, #7
 238 00ee 0122     		movs	r2, #1
 239 00f0 FFF7FEFF 		bl	CreateAlarm
 240 00f4 2246     		mov	r2, r4
 241 00f6 3B46     		mov	r3, r7
 242 00f8 1968     		ldr	r1, [r3]	@ unaligned
 243 00fa 1160     		str	r1, [r2]	@ unaligned
 244 00fc 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 245 00fe 9380     		strh	r3, [r2, #4]	@ unaligned
  97:notoriOS.c    ****     timetoLevelSensor = 1u;
 246              		.loc 1 97 0
 247 0100 144B     		ldr	r3, .L3+64
 248 0102 0122     		movs	r2, #1
 249 0104 1A70     		strb	r2, [r3]
  98:notoriOS.c    ****     
  99:notoriOS.c    ****     // Initialize the try counter to 0
 100:notoriOS.c    ****     uint8 try_counter = 0;
 250              		.loc 1 100 0
 251 0106 0023     		movs	r3, #0
 252 0108 FB75     		strb	r3, [r7, #23]
 101:notoriOS.c    **** }
 253              		.loc 1 101 0
 254 010a 00BF     		nop
 255 010c 1837     		adds	r7, r7, #24
 256              		.cfi_def_cfa_offset 16
 257 010e BD46     		mov	sp, r7
 258              		.cfi_def_cfa_register 13
 259              		@ sp needed
 260 0110 B0BD     		pop	{r4, r5, r7, pc}
 261              	.L4:
 262 0112 00BF     		.align	2
 263              	.L3:
 264 0114 00000000 		.word	Wakeup_ISR
 265 0118 00000000 		.word	.LC0
 266 011c 04000000 		.word	system_info+4
 267 0120 00000000 		.word	system_info
 268 0124 00000000 		.word	modem_info
 269 0128 00000000 		.word	system_settings
 270 012c 08000000 		.word	.LC1
 271 0130 00000000 		.word	updatable_parameters
 272 0134 00000000 		.word	alarmMeasure
 273 0138 00000000 		.word	timeToMeasure
 274 013c 00000000 		.word	alarmSync
 275 0140 00000000 		.word	timeToSync
 276 0144 00000000 		.word	timeToSycnRemoteParams
 277 0148 00000000 		.word	alarmAppLED
 278 014c 00000000 		.word	timeToAppLED
 279 0150 00000000 		.word	alarmLevelSensor
 280 0154 00000000 		.word	timetoLevelSensor
 281              		.cfi_endproc
 282              	.LFE65:
 283              		.size	ReadyOrNot, .-ReadyOrNot
 284              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 285              		.align	2
 286              		.global	WorkWorkWorkWorkWorkWork
 287              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 8


 288              		.thumb_func
 289              		.type	WorkWorkWorkWorkWorkWork, %function
 290              	WorkWorkWorkWorkWorkWork:
 291              	.LFB66:
 102:notoriOS.c    **** 
 103:notoriOS.c    **** 
 104:notoriOS.c    **** // ==============================================
 105:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 106:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 107:notoriOS.c    **** //
 108:notoriOS.c    **** // Prorcesses core tasks
 109:notoriOS.c    **** // ==============================================
 110:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 111:notoriOS.c    **** {
 292              		.loc 1 111 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 8
 295              		@ frame_needed = 1, uses_anonymous_args = 0
 296 0000 80B5     		push	{r7, lr}
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 7, -8
 299              		.cfi_offset 14, -4
 300 0002 82B0     		sub	sp, sp, #8
 301              		.cfi_def_cfa_offset 16
 302 0004 00AF     		add	r7, sp, #0
 303              		.cfi_def_cfa_register 7
 112:notoriOS.c    ****     
 113:notoriOS.c    ****     
 114:notoriOS.c    ****     
 115:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 116:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 117:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 118:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 119:notoriOS.c    ****     
 120:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 121:notoriOS.c    ****     if(timeToSycnRemoteParams){
 304              		.loc 1 121 0
 305 0006 244B     		ldr	r3, .L12
 306 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 307 000a 002B     		cmp	r3, #0
 308 000c 06D0     		beq	.L6
 122:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 309              		.loc 1 122 0
 310 000e FFF7FEFF 		bl	configureRemoteParams
 311 0012 0346     		mov	r3, r0
 312 0014 1A46     		mov	r2, r3
 313 0016 204B     		ldr	r3, .L12
 314 0018 1A70     		strb	r2, [r3]
 315 001a 2AE0     		b	.L7
 316              	.L6:
 123:notoriOS.c    ****     }
 124:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 125:notoriOS.c    ****     else if(timeToMeasure){
 317              		.loc 1 125 0
 318 001c 1F4B     		ldr	r3, .L12+4
 319 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 320 0020 002B     		cmp	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 9


 321 0022 06D0     		beq	.L8
 126:notoriOS.c    ****         // on custom nodes makeMeasurements will just be battery voltages
 127:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 322              		.loc 1 127 0
 323 0024 FFF7FEFF 		bl	makeMeasurements
 324 0028 0346     		mov	r3, r0
 325 002a 1A46     		mov	r2, r3
 326 002c 1B4B     		ldr	r3, .L12+4
 327 002e 1A70     		strb	r2, [r3]
 328 0030 1FE0     		b	.L7
 329              	.L8:
 128:notoriOS.c    ****     }  
 129:notoriOS.c    ****     // custom nodes
 130:notoriOS.c    ****     else if(updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 330              		.loc 1 130 0
 331 0032 1B4B     		ldr	r3, .L12+8
 332 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 333 0036 042B     		cmp	r3, #4
 334 0038 1BD1     		bne	.L7
 131:notoriOS.c    ****         if(App_LED_enabled && timeToAppLED){
 335              		.loc 1 131 0
 336 003a 1A4B     		ldr	r3, .L12+12
 337 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 003e 002B     		cmp	r3, #0
 339 0040 09D0     		beq	.L9
 340              		.loc 1 131 0 is_stmt 0 discriminator 1
 341 0042 194B     		ldr	r3, .L12+16
 342 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 0046 002B     		cmp	r3, #0
 344 0048 05D0     		beq	.L9
 132:notoriOS.c    ****             timeToAppLED = App_LED();
 345              		.loc 1 132 0 is_stmt 1
 346 004a FFF7FEFF 		bl	App_LED
 347 004e 0346     		mov	r3, r0
 348 0050 1A46     		mov	r2, r3
 349 0052 154B     		ldr	r3, .L12+16
 350 0054 1A70     		strb	r2, [r3]
 351              	.L9:
 133:notoriOS.c    ****         }
 134:notoriOS.c    ****         if(level_sensor_enabled && timetoLevelSensor){
 352              		.loc 1 134 0
 353 0056 154B     		ldr	r3, .L12+20
 354 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 355 005a 002B     		cmp	r3, #0
 356 005c 09D0     		beq	.L7
 357              		.loc 1 134 0 is_stmt 0 discriminator 1
 358 005e 144B     		ldr	r3, .L12+24
 359 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 360 0062 002B     		cmp	r3, #0
 361 0064 05D0     		beq	.L7
 135:notoriOS.c    ****             timetoLevelSensor = level_sensor();
 362              		.loc 1 135 0 is_stmt 1
 363 0066 FFF7FEFF 		bl	level_sensor
 364 006a 0346     		mov	r3, r0
 365 006c 1A46     		mov	r2, r3
 366 006e 104B     		ldr	r3, .L12+24
 367 0070 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 10


 368              	.L7:
 136:notoriOS.c    ****         }
 137:notoriOS.c    ****         // add other custom apps below
 138:notoriOS.c    ****     }
 139:notoriOS.c    ****     if(timeToSync){
 369              		.loc 1 139 0
 370 0072 104B     		ldr	r3, .L12+28
 371 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0076 002B     		cmp	r3, #0
 373 0078 05D0     		beq	.L10
 140:notoriOS.c    ****         timeToSync = syncData();
 374              		.loc 1 140 0
 375 007a FFF7FEFF 		bl	syncData
 376 007e 0346     		mov	r3, r0
 377 0080 1A46     		mov	r2, r3
 378 0082 0C4B     		ldr	r3, .L12+28
 379 0084 1A70     		strb	r2, [r3]
 380              	.L10:
 141:notoriOS.c    ****     } 
 142:notoriOS.c    ****     
 143:notoriOS.c    **** 
 144:notoriOS.c    ****     
 145:notoriOS.c    ****     // Print the countdown to the next alarm
 146:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 147:notoriOS.c    ****     
 148:notoriOS.c    ****     
 149:notoriOS.c    ****     // Check modem state machine on every loop
 150:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 381              		.loc 1 150 0
 382 0086 FFF7FEFF 		bl	modem_process_tasks
 383 008a 0346     		mov	r3, r0
 384 008c FB71     		strb	r3, [r7, #7]
 151:notoriOS.c    **** 
 152:notoriOS.c    ****     return 0u +  modem_status;  
 385              		.loc 1 152 0
 386 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 153:notoriOS.c    **** }
 387              		.loc 1 153 0
 388 0090 1846     		mov	r0, r3
 389 0092 0837     		adds	r7, r7, #8
 390              		.cfi_def_cfa_offset 8
 391 0094 BD46     		mov	sp, r7
 392              		.cfi_def_cfa_register 13
 393              		@ sp needed
 394 0096 80BD     		pop	{r7, pc}
 395              	.L13:
 396              		.align	2
 397              	.L12:
 398 0098 00000000 		.word	timeToSycnRemoteParams
 399 009c 00000000 		.word	timeToMeasure
 400 00a0 00000000 		.word	updatable_parameters
 401 00a4 00000000 		.word	App_LED_enabled
 402 00a8 00000000 		.word	timeToAppLED
 403 00ac 00000000 		.word	level_sensor_enabled
 404 00b0 00000000 		.word	timetoLevelSensor
 405 00b4 00000000 		.word	timeToSync
 406              		.cfi_endproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 11


 407              	.LFE66:
 408              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 409              		.section	.text.LayBack,"ax",%progbits
 410              		.align	2
 411              		.global	LayBack
 412              		.thumb
 413              		.thumb_func
 414              		.type	LayBack, %function
 415              	LayBack:
 416              	.LFB67:
 154:notoriOS.c    **** 
 155:notoriOS.c    **** 
 156:notoriOS.c    **** 
 157:notoriOS.c    **** 
 158:notoriOS.c    **** 
 159:notoriOS.c    **** 
 160:notoriOS.c    **** // ==============================================
 161:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 162:notoriOS.c    **** //      - Snoop Dogg (1993)
 163:notoriOS.c    **** //
 164:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 165:notoriOS.c    **** // ==============================================
 166:notoriOS.c    **** void LayBack()
 167:notoriOS.c    **** {
 417              		.loc 1 167 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421 0000 80B5     		push	{r7, lr}
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 7, -8
 424              		.cfi_offset 14, -4
 425 0002 00AF     		add	r7, sp, #0
 426              		.cfi_def_cfa_register 7
 168:notoriOS.c    ****   
 169:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 427              		.loc 1 169 0
 428 0004 FFF7FEFF 		bl	modem_sleep
 170:notoriOS.c    ****     
 171:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 172:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 429              		.loc 1 172 0
 430 0008 FFF7FEFF 		bl	debug_sleep
 173:notoriOS.c    ****     
 174:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 431              		.loc 1 174 0
 432 000c FFF7FEFF 		bl	CyPmSaveClocks
 175:notoriOS.c    ****     
 176:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 177:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 178:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 179:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 180:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 181:notoriOS.c    ****     //CyPmHibernate();
 182:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 183:notoriOS.c    **** 
 184:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 12


 433              		.loc 1 184 0
 434 0010 4FF40061 		mov	r1, #2048
 435 0014 0020     		movs	r0, #0
 436 0016 FFF7FEFF 		bl	CyPmSleep
 185:notoriOS.c    **** 
 186:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 437              		.loc 1 186 0
 438 001a FFF7FEFF 		bl	CyPmRestoreClocks
 187:notoriOS.c    **** 
 188:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 439              		.loc 1 188 0
 440 001e FFF7FEFF 		bl	debug_wakeup
 189:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 441              		.loc 1 189 0
 442 0022 FFF7FEFF 		bl	modem_wakeup
 190:notoriOS.c    **** 
 191:notoriOS.c    **** }
 443              		.loc 1 191 0
 444 0026 00BF     		nop
 445 0028 80BD     		pop	{r7, pc}
 446              		.cfi_endproc
 447              	.LFE67:
 448              		.size	LayBack, .-LayBack
 449 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 450              		.align	2
 451              		.global	AyoItsTime
 452              		.thumb
 453              		.thumb_func
 454              		.type	AyoItsTime, %function
 455              	AyoItsTime:
 456              	.LFB68:
 192:notoriOS.c    **** 
 193:notoriOS.c    **** 
 194:notoriOS.c    **** // ==============================================
 195:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 196:notoriOS.c    **** //      - NAS (1994)
 197:notoriOS.c    **** //
 198:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 199:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 200:notoriOS.c    **** // It will add tasks to the work queue,
 201:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 202:notoriOS.c    **** // ==============================================
 203:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 204:notoriOS.c    **** {
 457              		.loc 1 204 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461 0000 80B5     		push	{r7, lr}
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
 465 0002 82B0     		sub	sp, sp, #8
 466              		.cfi_def_cfa_offset 16
 467 0004 00AF     		add	r7, sp, #0
 468              		.cfi_def_cfa_register 7
 469 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 13


 470 0008 FB71     		strb	r3, [r7, #7]
 205:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 206:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 471              		.loc 1 206 0
 472 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 473 000c 1946     		mov	r1, r3
 474 000e 1748     		ldr	r0, .L21
 475 0010 FFF7FEFF 		bl	AlarmReady
 476 0014 0346     		mov	r3, r0
 477 0016 002B     		cmp	r3, #0
 478 0018 02D0     		beq	.L16
 207:notoriOS.c    ****     {
 208:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 209:notoriOS.c    ****         timeToMeasure = 1u;
 479              		.loc 1 209 0
 480 001a 154B     		ldr	r3, .L21+4
 481 001c 0122     		movs	r2, #1
 482 001e 1A70     		strb	r2, [r3]
 483              	.L16:
 210:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 211:notoriOS.c    ****         
 212:notoriOS.c    ****     }
 213:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 484              		.loc 1 213 0
 485 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 486 0022 1946     		mov	r1, r3
 487 0024 1348     		ldr	r0, .L21+8
 488 0026 FFF7FEFF 		bl	AlarmReady
 489 002a 0346     		mov	r3, r0
 490 002c 002B     		cmp	r3, #0
 491 002e 02D0     		beq	.L17
 214:notoriOS.c    ****     {
 215:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 216:notoriOS.c    ****         timeToSync = 1u;
 492              		.loc 1 216 0
 493 0030 114B     		ldr	r3, .L21+12
 494 0032 0122     		movs	r2, #1
 495 0034 1A70     		strb	r2, [r3]
 496              	.L17:
 217:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 218:notoriOS.c    ****     }
 219:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 497              		.loc 1 219 0
 498 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 499 0038 1946     		mov	r1, r3
 500 003a 1048     		ldr	r0, .L21+16
 501 003c FFF7FEFF 		bl	AlarmReady
 502 0040 0346     		mov	r3, r0
 503 0042 002B     		cmp	r3, #0
 504 0044 02D0     		beq	.L18
 220:notoriOS.c    ****     {
 221:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 222:notoriOS.c    ****         timeToAppLED = 1u;
 505              		.loc 1 222 0
 506 0046 0E4B     		ldr	r3, .L21+20
 507 0048 0122     		movs	r2, #1
 508 004a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 14


 509              	.L18:
 223:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 224:notoriOS.c    ****     }
 225:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 510              		.loc 1 225 0
 511 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 512 004e 1946     		mov	r1, r3
 513 0050 0C48     		ldr	r0, .L21+24
 514 0052 FFF7FEFF 		bl	AlarmReady
 515 0056 0346     		mov	r3, r0
 516 0058 002B     		cmp	r3, #0
 517 005a 02D0     		beq	.L20
 226:notoriOS.c    ****         timetoLevelSensor = 1u;
 518              		.loc 1 226 0
 519 005c 0A4B     		ldr	r3, .L21+28
 520 005e 0122     		movs	r2, #1
 521 0060 1A70     		strb	r2, [r3]
 522              	.L20:
 227:notoriOS.c    ****     }
 228:notoriOS.c    ****     
 229:notoriOS.c    **** }
 523              		.loc 1 229 0
 524 0062 00BF     		nop
 525 0064 0837     		adds	r7, r7, #8
 526              		.cfi_def_cfa_offset 8
 527 0066 BD46     		mov	sp, r7
 528              		.cfi_def_cfa_register 13
 529              		@ sp needed
 530 0068 80BD     		pop	{r7, pc}
 531              	.L22:
 532 006a 00BF     		.align	2
 533              	.L21:
 534 006c 00000000 		.word	alarmMeasure
 535 0070 00000000 		.word	timeToMeasure
 536 0074 00000000 		.word	alarmSync
 537 0078 00000000 		.word	timeToSync
 538 007c 00000000 		.word	alarmAppLED
 539 0080 00000000 		.word	timeToAppLED
 540 0084 00000000 		.word	alarmLevelSensor
 541 0088 00000000 		.word	timetoLevelSensor
 542              		.cfi_endproc
 543              	.LFE68:
 544              		.size	AyoItsTime, .-AyoItsTime
 545              		.section	.text.AlarmReady,"ax",%progbits
 546              		.align	2
 547              		.global	AlarmReady
 548              		.thumb
 549              		.thumb_func
 550              		.type	AlarmReady, %function
 551              	AlarmReady:
 552              	.LFB69:
 230:notoriOS.c    **** 
 231:notoriOS.c    **** 
 232:notoriOS.c    **** // ==============================================
 233:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 234:notoriOS.c    **** // ==============================================
 235:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 15


 236:notoriOS.c    **** {
 553              		.loc 1 236 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 8
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 80B5     		push	{r7, lr}
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 82B0     		sub	sp, sp, #8
 562              		.cfi_def_cfa_offset 16
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_def_cfa_register 7
 565 0006 7860     		str	r0, [r7, #4]
 566 0008 0B46     		mov	r3, r1
 567 000a FB70     		strb	r3, [r7, #3]
 237:notoriOS.c    ****     // if the countDownType matches the alarmType
 238:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 568              		.loc 1 238 0
 569 000c 7B68     		ldr	r3, [r7, #4]
 570 000e 1B79     		ldrb	r3, [r3, #4]
 571 0010 DBB2     		uxtb	r3, r3
 572 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 573 0014 9A42     		cmp	r2, r3
 574 0016 12D1     		bne	.L24
 239:notoriOS.c    ****        
 240:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 241:notoriOS.c    ****         // Decrement the count down value by 1
 242:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 575              		.loc 1 242 0
 576 0018 7B68     		ldr	r3, [r7, #4]
 577 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 578 001c 1BB2     		sxth	r3, r3
 579 001e 9BB2     		uxth	r3, r3
 580 0020 013B     		subs	r3, r3, #1
 581 0022 9BB2     		uxth	r3, r3
 582 0024 1AB2     		sxth	r2, r3
 583 0026 7B68     		ldr	r3, [r7, #4]
 584 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 243:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 244:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 585              		.loc 1 244 0
 586 002a 7B68     		ldr	r3, [r7, #4]
 587 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 588 002e 1BB2     		sxth	r3, r3
 589 0030 002B     		cmp	r3, #0
 590 0032 04DC     		bgt	.L24
 245:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 591              		.loc 1 245 0
 592 0034 7868     		ldr	r0, [r7, #4]
 593 0036 FFF7FEFF 		bl	ResetAlarm
 246:notoriOS.c    ****             return 1u;
 594              		.loc 1 246 0
 595 003a 0123     		movs	r3, #1
 596 003c 00E0     		b	.L25
 597              	.L24:
 247:notoriOS.c    ****         } 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 16


 248:notoriOS.c    ****     }
 249:notoriOS.c    ****     
 250:notoriOS.c    ****     return 0u; // Otherwise return 0
 598              		.loc 1 250 0
 599 003e 0023     		movs	r3, #0
 600              	.L25:
 251:notoriOS.c    **** }
 601              		.loc 1 251 0
 602 0040 1846     		mov	r0, r3
 603 0042 0837     		adds	r7, r7, #8
 604              		.cfi_def_cfa_offset 8
 605 0044 BD46     		mov	sp, r7
 606              		.cfi_def_cfa_register 13
 607              		@ sp needed
 608 0046 80BD     		pop	{r7, pc}
 609              		.cfi_endproc
 610              	.LFE69:
 611              		.size	AlarmReady, .-AlarmReady
 612              		.section	.text.ResetAlarm,"ax",%progbits
 613              		.align	2
 614              		.global	ResetAlarm
 615              		.thumb
 616              		.thumb_func
 617              		.type	ResetAlarm, %function
 618              	ResetAlarm:
 619              	.LFB70:
 252:notoriOS.c    **** 
 253:notoriOS.c    **** // ==============================================
 254:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 255:notoriOS.c    **** // ==============================================
 256:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 257:notoriOS.c    **** {
 620              		.loc 1 257 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 8
 623              		@ frame_needed = 1, uses_anonymous_args = 0
 624              		@ link register save eliminated.
 625 0000 80B4     		push	{r7}
 626              		.cfi_def_cfa_offset 4
 627              		.cfi_offset 7, -4
 628 0002 83B0     		sub	sp, sp, #12
 629              		.cfi_def_cfa_offset 16
 630 0004 00AF     		add	r7, sp, #0
 631              		.cfi_def_cfa_register 7
 632 0006 7860     		str	r0, [r7, #4]
 258:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 259:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 633              		.loc 1 259 0
 634 0008 7B68     		ldr	r3, [r7, #4]
 635 000a 1B88     		ldrh	r3, [r3]	@ movhi
 636 000c 9BB2     		uxth	r3, r3
 637 000e 1AB2     		sxth	r2, r3
 638 0010 7B68     		ldr	r3, [r7, #4]
 639 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 260:notoriOS.c    **** }
 640              		.loc 1 260 0
 641 0014 00BF     		nop
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 17


 642 0016 0C37     		adds	r7, r7, #12
 643              		.cfi_def_cfa_offset 4
 644 0018 BD46     		mov	sp, r7
 645              		.cfi_def_cfa_register 13
 646              		@ sp needed
 647 001a 80BC     		pop	{r7}
 648              		.cfi_restore 7
 649              		.cfi_def_cfa_offset 0
 650 001c 7047     		bx	lr
 651              		.cfi_endproc
 652              	.LFE70:
 653              		.size	ResetAlarm, .-ResetAlarm
 654 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 655              		.align	2
 656              		.global	CreateAlarm
 657              		.thumb
 658              		.thumb_func
 659              		.type	CreateAlarm, %function
 660              	CreateAlarm:
 661              	.LFB71:
 261:notoriOS.c    **** 
 262:notoriOS.c    **** // ==============================================
 263:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 264:notoriOS.c    **** // ==============================================
 265:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 266:notoriOS.c    **** {
 662              		.loc 1 266 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 16
 665              		@ frame_needed = 1, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 667 0000 80B4     		push	{r7}
 668              		.cfi_def_cfa_offset 4
 669              		.cfi_offset 7, -4
 670 0002 85B0     		sub	sp, sp, #20
 671              		.cfi_def_cfa_offset 24
 672 0004 00AF     		add	r7, sp, #0
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
 675 0008 0846     		mov	r0, r1
 676 000a 1146     		mov	r1, r2
 677 000c 1A46     		mov	r2, r3
 678 000e 0346     		mov	r3, r0	@ movhi
 679 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 680 0012 0B46     		mov	r3, r1
 681 0014 7B70     		strb	r3, [r7, #1]
 682 0016 1346     		mov	r3, r2
 683 0018 3B70     		strb	r3, [r7]
 267:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 268:notoriOS.c    ****     alarm newAlarm;
 269:notoriOS.c    ****     
 270:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 271:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 684              		.loc 1 271 0
 685 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 686 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 272:notoriOS.c    ****     newAlarm.countDownType = countDownType;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 18


 687              		.loc 1 272 0
 688 001e 7B78     		ldrb	r3, [r7, #1]
 689 0020 3B73     		strb	r3, [r7, #12]
 273:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 690              		.loc 1 273 0
 691 0022 3B78     		ldrb	r3, [r7]
 692 0024 7B73     		strb	r3, [r7, #13]
 274:notoriOS.c    ****     
 275:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 276:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 277:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 693              		.loc 1 277 0
 694 0026 B7F90230 		ldrsh	r3, [r7, #2]
 695 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 278:notoriOS.c    ****     
 279:notoriOS.c    ****     return newAlarm;
 696              		.loc 1 279 0
 697 002c 7B68     		ldr	r3, [r7, #4]
 698 002e 1A46     		mov	r2, r3
 699 0030 07F10803 		add	r3, r7, #8
 700 0034 1868     		ldr	r0, [r3]	@ unaligned
 701 0036 1060     		str	r0, [r2]	@ unaligned
 702 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 703 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 280:notoriOS.c    ****     
 281:notoriOS.c    **** }
 704              		.loc 1 281 0
 705 003c 7868     		ldr	r0, [r7, #4]
 706 003e 1437     		adds	r7, r7, #20
 707              		.cfi_def_cfa_offset 4
 708 0040 BD46     		mov	sp, r7
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 0042 80BC     		pop	{r7}
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 0044 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE71:
 717              		.size	CreateAlarm, .-CreateAlarm
 718 0046 00BF     		.section	.rodata
 719 003b 00       		.align	2
 720              	.LC2:
 721 003c 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 721      2D2D2D2D 
 721      2D2D2D2D 
 721      2D424547 
 721      494E2054 
 722 0066 0000     		.align	2
 723              	.LC3:
 724 0068 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 724      3D25732C 
 724      2053494D 
 724      49443D25 
 724      732C2044 
 725 0087 00       		.align	2
 726              	.LC4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 19


 727 0088 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 727      2D2D2D2D 
 727      2D2D2D2D 
 727      2D2D2D45 
 727      4E442054 
 728 00b1 00       		.ascii	"\000"
 729              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 730              		.align	2
 731              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 732              		.thumb
 733              		.thumb_func
 734              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 735              	ChickityCheckYourselfBeforeYouWreckYourself:
 736              	.LFB72:
 282:notoriOS.c    **** 
 283:notoriOS.c    **** // ==============================================
 284:notoriOS.c    **** // Dropping bombs on your moms
 285:notoriOS.c    **** //      - Ice Cube (1992)
 286:notoriOS.c    **** //
 287:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 288:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 289:notoriOS.c    **** // ==============================================
 290:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 737              		.loc 1 290 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 1944
 740              		@ frame_needed = 1, uses_anonymous_args = 0
 741 0000 90B5     		push	{r4, r7, lr}
 742              		.cfi_def_cfa_offset 12
 743              		.cfi_offset 4, -12
 744              		.cfi_offset 7, -8
 745              		.cfi_offset 14, -4
 746 0002 ADF6141D 		subw	sp, sp, #2324
 747              		.cfi_def_cfa_offset 2336
 748 0006 5EAF     		add	r7, sp, #376
 749              		.cfi_def_cfa 7, 1960
 291:notoriOS.c    **** 
 292:notoriOS.c    ****     //test_t t_influx = influx_test();
 293:notoriOS.c    ****     //printTestStatus(t_influx);
 294:notoriOS.c    ****     
 295:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 750              		.loc 1 295 0
 751 0008 3849     		ldr	r1, .L30
 752 000a 0320     		movs	r0, #3
 753 000c FFF7FEFF 		bl	printNotif
 296:notoriOS.c    ****     
 297:notoriOS.c    ****     // Test level sensor
 298:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 754              		.loc 1 298 0
 755 0010 07F21463 		addw	r3, r7, #1556
 756 0014 1846     		mov	r0, r3
 757 0016 FFF7FEFF 		bl	level_sensor_test
 299:notoriOS.c    ****     printTestStatus(t_level_sensor);
 758              		.loc 1 299 0
 759 001a 07F21464 		addw	r4, r7, #1556
 760 001e 6846     		mov	r0, sp
 761 0020 04F11003 		add	r3, r4, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 20


 762 0024 40F27112 		movw	r2, #369
 763 0028 1946     		mov	r1, r3
 764 002a FFF7FEFF 		bl	memcpy
 765 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 766 0032 FFF7FEFF 		bl	printTestStatus
 300:notoriOS.c    ****     
 301:notoriOS.c    ****     // Test voltages
 302:notoriOS.c    ****     test_t t_voltages = voltages_test();
 767              		.loc 1 302 0
 768 0036 07F59263 		add	r3, r7, #1168
 769 003a 1846     		mov	r0, r3
 770 003c FFF7FEFF 		bl	voltages_test
 303:notoriOS.c    ****     printTestStatus(t_voltages);
 771              		.loc 1 303 0
 772 0040 07F59264 		add	r4, r7, #1168
 773 0044 6846     		mov	r0, sp
 774 0046 04F11003 		add	r3, r4, #16
 775 004a 40F27112 		movw	r2, #369
 776 004e 1946     		mov	r1, r3
 777 0050 FFF7FEFF 		bl	memcpy
 778 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 779 0058 FFF7FEFF 		bl	printTestStatus
 304:notoriOS.c    ****  
 305:notoriOS.c    ****     // Test voltages
 306:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 780              		.loc 1 306 0
 781 005c 07F54373 		add	r3, r7, #780
 782 0060 1846     		mov	r0, r3
 783 0062 FFF7FEFF 		bl	pressure_sensor_test
 307:notoriOS.c    ****     printTestStatus(t_pressure);
 784              		.loc 1 307 0
 785 0066 07F54374 		add	r4, r7, #780
 786 006a 6846     		mov	r0, sp
 787 006c 04F11003 		add	r3, r4, #16
 788 0070 40F27112 		movw	r2, #369
 789 0074 1946     		mov	r1, r3
 790 0076 FFF7FEFF 		bl	memcpy
 791 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 792 007e FFF7FEFF 		bl	printTestStatus
 308:notoriOS.c    ****     
 309:notoriOS.c    ****     // Test SD card
 310:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 793              		.loc 1 310 0
 794 0082 07F5C473 		add	r3, r7, #392
 795 0086 1846     		mov	r0, r3
 796 0088 FFF7FEFF 		bl	SD_card_test
 311:notoriOS.c    ****     printTestStatus(t_sd_card);
 797              		.loc 1 311 0
 798 008c 07F5C474 		add	r4, r7, #392
 799 0090 6846     		mov	r0, sp
 800 0092 04F11003 		add	r3, r4, #16
 801 0096 40F27112 		movw	r2, #369
 802 009a 1946     		mov	r1, r3
 803 009c FFF7FEFF 		bl	memcpy
 804 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 805 00a4 FFF7FEFF 		bl	printTestStatus
 312:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 21


 313:notoriOS.c    ****     // Test modem
 314:notoriOS.c    ****     test_t t_modem = modem_test();
 806              		.loc 1 314 0
 807 00a8 3B1D     		adds	r3, r7, #4
 808 00aa 1846     		mov	r0, r3
 809 00ac FFF7FEFF 		bl	modem_test
 315:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 810              		.loc 1 315 0
 811 00b0 0F4B     		ldr	r3, .L30+4
 812 00b2 0093     		str	r3, [sp]
 813 00b4 0F4B     		ldr	r3, .L30+8
 814 00b6 104A     		ldr	r2, .L30+12
 815 00b8 1049     		ldr	r1, .L30+16
 816 00ba 0320     		movs	r0, #3
 817 00bc FFF7FEFF 		bl	printNotif
 316:notoriOS.c    ****     printTestStatus(t_modem);
 818              		.loc 1 316 0
 819 00c0 3C1D     		adds	r4, r7, #4
 820 00c2 6846     		mov	r0, sp
 821 00c4 04F11003 		add	r3, r4, #16
 822 00c8 40F27112 		movw	r2, #369
 823 00cc 1946     		mov	r1, r3
 824 00ce FFF7FEFF 		bl	memcpy
 825 00d2 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 826 00d6 FFF7FEFF 		bl	printTestStatus
 317:notoriOS.c    ****     
 318:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 827              		.loc 1 318 0
 828 00da 0949     		ldr	r1, .L30+20
 829 00dc 0320     		movs	r0, #3
 830 00de FFF7FEFF 		bl	printNotif
 319:notoriOS.c    **** 
 320:notoriOS.c    **** }
 831              		.loc 1 320 0
 832 00e2 00BF     		nop
 833 00e4 07F29C77 		addw	r7, r7, #1948
 834              		.cfi_def_cfa_offset 12
 835 00e8 BD46     		mov	sp, r7
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 00ea 90BD     		pop	{r4, r7, pc}
 839              	.L31:
 840              		.align	2
 841              	.L30:
 842 00ec 3C000000 		.word	.LC2
 843 00f0 04000000 		.word	system_info+4
 844 00f4 00000000 		.word	modem_info
 845 00f8 28000000 		.word	modem_info+40
 846 00fc 68000000 		.word	.LC3
 847 0100 88000000 		.word	.LC4
 848              		.cfi_endproc
 849              	.LFE72:
 850              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 851              		.section	.text.main,"ax",%progbits
 852              		.align	2
 853              		.global	main
 854              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 22


 855              		.thumb_func
 856              		.type	main, %function
 857              	main:
 858              	.LFB73:
 321:notoriOS.c    **** 
 322:notoriOS.c    **** // ==============================================
 323:notoriOS.c    **** // Processes Core Tasks
 324:notoriOS.c    **** // ==============================================
 325:notoriOS.c    **** int main(void)
 326:notoriOS.c    **** {
 859              		.loc 1 326 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863 0000 80B5     		push	{r7, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 00AF     		add	r7, sp, #0
 868              		.cfi_def_cfa_register 7
 327:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 869              		.loc 1 327 0
 870              		.syntax unified
 871              	@ 327 "notoriOS.c" 1
 872 0004 62B6     		CPSIE   i
 873              	@ 0 "" 2
 328:notoriOS.c    **** 
 329:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 874              		.loc 1 329 0
 875              		.thumb
 876              		.syntax unified
 877 0006 FFF7FEFF 		bl	ReadyOrNot
 330:notoriOS.c    ****     
 331:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 878              		.loc 1 331 0
 879 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 880              	.L34:
 332:notoriOS.c    ****    
 333:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 334:notoriOS.c    ****     {
 335:notoriOS.c    ****         
 336:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 881              		.loc 1 336 0
 882 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 883 0012 0346     		mov	r3, r0
 884 0014 002B     		cmp	r3, #0
 885 0016 FAD1     		bne	.L34
 337:notoriOS.c    ****         {
 338:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 886              		.loc 1 338 0
 887 0018 FFF7FEFF 		bl	LayBack
 339:notoriOS.c    ****         }
 340:notoriOS.c    ****     }
 888              		.loc 1 340 0
 889 001c F7E7     		b	.L34
 890              		.cfi_endproc
 891              	.LFE73:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 23


 892              		.size	main, .-main
 893 001e 00BF     		.section	.rodata
 894 00b2 0000     		.align	2
 895              	.LC5:
 896 00b4 4D6F6465 		.ascii	"Modem is ready.\000"
 896      6D206973 
 896      20726561 
 896      64792E00 
 897              		.align	2
 898              	.LC6:
 899 00c4 256400   		.ascii	"%d\000"
 900 00c7 00       		.align	2
 901              	.LC7:
 902 00c8 72737270 		.ascii	"rsrp\000"
 902      00
 903 00cd 000000   		.align	2
 904              	.LC8:
 905 00d0 72736370 		.ascii	"rscp\000"
 905      00
 906 00d5 000000   		.align	2
 907              	.LC9:
 908 00d8 7472795F 		.ascii	"try_counter\000"
 908      636F756E 
 908      74657200 
 909              		.align	2
 910              	.LC10:
 911 00e4 64617461 		.ascii	"data_count_sent\000"
 911      5F636F75 
 911      6E745F73 
 911      656E7400 
 912              		.align	2
 913              	.LC11:
 914 00f4 64617461 		.ascii	"data_count_desired\000"
 914      5F636F75 
 914      6E745F64 
 914      65736972 
 914      656400
 915 0107 00       		.align	2
 916              	.LC12:
 917 0108 42656769 		.ascii	"Begin HTTP post.\000"
 917      6E204854 
 917      54502070 
 917      6F73742E 
 917      00
 918 0119 000000   		.align	2
 919              	.LC13:
 920 011c 34663533 		.ascii	"4f53a3ef89029e4f1efe2cfc9ced3cc84ea917a2\000"
 920      61336566 
 920      38393032 
 920      39653466 
 920      31656665 
 921 0145 000000   		.align	2
 922              	.LC14:
 923 0148 6170692F 		.ascii	"api/v1/write\000"
 923      76312F77 
 923      72697465 
 923      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 24


 924 0155 000000   		.align	2
 925              	.LC15:
 926 0158 48545450 		.ascii	"HTTP route: %s\000"
 926      20726F75 
 926      74653A20 
 926      257300
 927 0167 00       		.align	2
 928              	.LC16:
 929 0168 312E3100 		.ascii	"1.1\000"
 930              		.align	2
 931              	.LC17:
 932 016c 00       		.ascii	"\000"
 933 016d 000000   		.align	2
 934              	.LC18:
 935 0170 436C6F73 		.ascii	"Close\000"
 935      6500
 936 0176 0000     		.align	2
 937              	.LC19:
 938 0178 504F5354 		.ascii	"POST\000"
 938      00
 939 017d 000000   		.align	2
 940              	.LC20:
 941 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 941      20485454 
 941      50205265 
 941      71756573 
 941      743A2025 
 942 0196 0000     		.align	2
 943              	.LC21:
 944 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 944      443D312C 
 944      302C2564 
 944      2C222573 
 944      222C302C 
 945 01b1 000000   		.align	2
 946              	.LC22:
 947 01b4 257300   		.ascii	"%s\000"
 948 01b7 00       		.align	2
 949              	.LC23:
 950 01b8 4F4B00   		.ascii	"OK\000"
 951              		.global	__aeabi_ui2d
 952              		.global	__aeabi_d2iz
 953 01bb 00       		.align	2
 954              	.LC24:
 955 01bc 68747470 		.ascii	"http_request len: %d\000"
 955      5F726571 
 955      75657374 
 955      206C656E 
 955      3A202564 
 956 01d1 000000   		.align	2
 957              	.LC25:
 958 01d4 23206F66 		.ascii	"# of packets: %d\000"
 958      20706163 
 958      6B657473 
 958      3A202564 
 958      00
 959 01e5 000000   		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 25


 960              	.LC26:
 961 01e8 3E00     		.ascii	">\000"
 962 01ea 0000     		.align	2
 963              	.LC27:
 964 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 964      53454E44 
 964      3D310D0A 
 964      00
 965 01f9 000000   		.align	2
 966              	.LC28:
 967 01fc 1A00     		.ascii	"\032\000"
 968 01fe 0000     		.align	2
 969              	.LC29:
 970 0200 6368756E 		.ascii	"chunk %d: %s\000"
 970      6B202564 
 970      3A202573 
 970      00
 971 020d 000000   		.align	2
 972              	.LC30:
 973 0210 5352494E 		.ascii	"SRING\000"
 973      4700
 974 0216 0000     		.align	2
 975              	.LC31:
 976 0218 4F532D4F 		.ascii	"OS-OK\000"
 976      4B00
 977 021e 0000     		.align	2
 978              	.LC32:
 979 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 979      52454356 
 979      3D312C31 
 979      3030300D 
 979      00
 980 0231 000000   		.align	2
 981              	.LC33:
 982 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 982      6D5F7478 
 982      5F74696D 
 982      6500
 983 0242 0000     		.align	2
 984              	.LC34:
 985 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 985      4F3A2043 
 985      6F756C64 
 985      206E6F74 
 985      20726563 
 986              		.section	.text.syncData,"ax",%progbits
 987              		.align	2
 988              		.global	syncData
 989              		.thumb
 990              		.thumb_func
 991              		.type	syncData, %function
 992              	syncData:
 993              	.LFB74:
 341:notoriOS.c    **** }
 342:notoriOS.c    **** 
 343:notoriOS.c    **** // ==============================================
 344:notoriOS.c    **** // Syncs data with server
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 26


 345:notoriOS.c    **** // Returns 0 when done
 346:notoriOS.c    **** // ==============================================
 347:notoriOS.c    **** uint8 syncData(){
 994              		.loc 1 347 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 1360
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998 0000 90B5     		push	{r4, r7, lr}
 999              		.cfi_def_cfa_offset 12
 1000              		.cfi_offset 4, -12
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 ADF26C5D 		subw	sp, sp, #1388
 1004              		.cfi_def_cfa_offset 1400
 1005 0006 06AF     		add	r7, sp, #24
 1006              		.cfi_def_cfa 7, 1376
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     /*
 350:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 351:notoriOS.c    ****     uint8 check = 0;
 352:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 353:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 354:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 355:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 356:notoriOS.c    ****     */
 357:notoriOS.c    **** 
 358:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 359:notoriOS.c    ****     LED_Write(1u);
 1007              		.loc 1 359 0
 1008 0008 0120     		movs	r0, #1
 1009 000a FFF7FEFF 		bl	LED_Write
 360:notoriOS.c    ****     CyDelay(100u);
 1010              		.loc 1 360 0
 1011 000e 6420     		movs	r0, #100
 1012 0010 FFF7FEFF 		bl	CyDelay
 361:notoriOS.c    ****     LED_Write(0u);
 1013              		.loc 1 361 0
 1014 0014 0020     		movs	r0, #0
 1015 0016 FFF7FEFF 		bl	LED_Write
 362:notoriOS.c    **** 
 363:notoriOS.c    ****     
 364:notoriOS.c    ****     // If there's no data, not need to do anything
 365:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 1016              		.loc 1 365 0
 1017 001a FFF7FEFF 		bl	sizeOfDataStack
 1018 001e 0346     		mov	r3, r0
 1019 0020 002B     		cmp	r3, #0
 1020 0022 01D1     		bne	.L36
 366:notoriOS.c    ****         return 0u;
 1021              		.loc 1 366 0
 1022 0024 0023     		movs	r3, #0
 1023 0026 03E2     		b	.L37
 1024              	.L36:
 367:notoriOS.c    ****         }
 368:notoriOS.c    ****     
 369:notoriOS.c    ****     // Create request body, in this case influx
 370:notoriOS.c    ****     // Place body into HTTP request header
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 27


 371:notoriOS.c    ****     // Fire up modem and get it out
 372:notoriOS.c    ****      
 373:notoriOS.c    ****     
 374:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 375:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1025              		.loc 1 375 0
 1026 0028 FFF7FEFF 		bl	modem_get_state
 1027 002c 0346     		mov	r3, r0
 1028 002e 002B     		cmp	r3, #0
 1029 0030 11D1     		bne	.L38
 376:notoriOS.c    **** 
 377:notoriOS.c    ****         try_counter++;
 1030              		.loc 1 377 0
 1031 0032 AE4B     		ldr	r3, .L50
 1032 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1033 0036 0133     		adds	r3, r3, #1
 1034 0038 DAB2     		uxtb	r2, r3
 1035 003a AC4B     		ldr	r3, .L50
 1036 003c 1A70     		strb	r2, [r3]
 378:notoriOS.c    ****         	
 379:notoriOS.c    ****         if(try_counter <= 2){
 1037              		.loc 1 379 0
 1038 003e AB4B     		ldr	r3, .L50
 1039 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1040 0042 022B     		cmp	r3, #2
 1041 0044 02D8     		bhi	.L39
 380:notoriOS.c    ****             modem_power_up();
 1042              		.loc 1 380 0
 1043 0046 FFF7FEFF 		bl	modem_power_up
 1044 004a F0E1     		b	.L40
 1045              	.L39:
 381:notoriOS.c    ****         }else{
 382:notoriOS.c    ****             try_counter = 0;
 1046              		.loc 1 382 0
 1047 004c A74B     		ldr	r3, .L50
 1048 004e 0022     		movs	r2, #0
 1049 0050 1A70     		strb	r2, [r3]
 383:notoriOS.c    ****             return 0u;
 1050              		.loc 1 383 0
 1051 0052 0023     		movs	r3, #0
 1052 0054 ECE1     		b	.L37
 1053              	.L38:
 384:notoriOS.c    ****             }
 385:notoriOS.c    ****             
 386:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1054              		.loc 1 386 0
 1055 0056 FFF7FEFF 		bl	modem_get_state
 1056 005a 0346     		mov	r3, r0
 1057 005c 042B     		cmp	r3, #4
 1058 005e 40F0E681 		bne	.L40
 1059              	.LBB2:
 387:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1060              		.loc 1 387 0
 1061 0062 A349     		ldr	r1, .L50+4
 1062 0064 0020     		movs	r0, #0
 1063 0066 FFF7FEFF 		bl	printNotif
 388:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 28


 389:notoriOS.c    ****         http_request[0] = '\0';
 1064              		.loc 1 389 0
 1065 006a A24B     		ldr	r3, .L50+8
 1066 006c 0022     		movs	r2, #0
 1067 006e 1A70     		strb	r2, [r3]
 390:notoriOS.c    ****         http_body[0] = '\0';
 1068              		.loc 1 390 0
 1069 0070 A14B     		ldr	r3, .L50+12
 1070 0072 0022     		movs	r2, #0
 1071 0074 1A70     		strb	r2, [r3]
 391:notoriOS.c    ****         http_route[0] = '\0';
 1072              		.loc 1 391 0
 1073 0076 A14B     		ldr	r3, .L50+16
 1074 0078 0022     		movs	r2, #0
 1075 007a 1A70     		strb	r2, [r3]
 392:notoriOS.c    ****         //char *base = "write";
 393:notoriOS.c    ****         
 394:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 395:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 396:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1076              		.loc 1 396 0
 1077 007c A04B     		ldr	r3, .L50+20
 1078 007e 5B69     		ldr	r3, [r3, #20]
 1079 0080 07F5A560 		add	r0, r7, #1320
 1080 0084 9F4A     		ldr	r2, .L50+24
 1081 0086 1421     		movs	r1, #20
 1082 0088 FFF7FEFF 		bl	snprintf
 397:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1083              		.loc 1 397 0
 1084 008c FFF7FEFF 		bl	getTimeStamp
 1085 0090 0246     		mov	r2, r0
 1086 0092 07F5A563 		add	r3, r7, #1320
 1087 0096 1946     		mov	r1, r3
 1088 0098 9B48     		ldr	r0, .L50+28
 1089 009a FFF7FEFF 		bl	pushData
 398:notoriOS.c    ****         
 399:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 400:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1090              		.loc 1 400 0
 1091 009e 984B     		ldr	r3, .L50+20
 1092 00a0 9B68     		ldr	r3, [r3, #8]
 1093 00a2 07F21450 		addw	r0, r7, #1300
 1094 00a6 974A     		ldr	r2, .L50+24
 1095 00a8 1421     		movs	r1, #20
 1096 00aa FFF7FEFF 		bl	snprintf
 401:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1097              		.loc 1 401 0
 1098 00ae FFF7FEFF 		bl	getTimeStamp
 1099 00b2 0246     		mov	r2, r0
 1100 00b4 07F21453 		addw	r3, r7, #1300
 1101 00b8 1946     		mov	r1, r3
 1102 00ba 9448     		ldr	r0, .L50+32
 1103 00bc FFF7FEFF 		bl	pushData
 402:notoriOS.c    ****         
 403:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 404:notoriOS.c    ****         char c_try_counter[20];
 405:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 29


 1104              		.loc 1 405 0
 1105 00c0 8A4B     		ldr	r3, .L50
 1106 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1107 00c4 07F5A060 		add	r0, r7, #1280
 1108 00c8 8E4A     		ldr	r2, .L50+24
 1109 00ca 1421     		movs	r1, #20
 1110 00cc FFF7FEFF 		bl	snprintf
 406:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1111              		.loc 1 406 0
 1112 00d0 FFF7FEFF 		bl	getTimeStamp
 1113 00d4 0246     		mov	r2, r0
 1114 00d6 07F5A063 		add	r3, r7, #1280
 1115 00da 1946     		mov	r1, r3
 1116 00dc 8C48     		ldr	r0, .L50+36
 1117 00de FFF7FEFF 		bl	pushData
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 409:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 410:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 411:notoriOS.c    ****         if(buffer_overflow == false){
 1118              		.loc 1 411 0
 1119 00e2 8C4B     		ldr	r3, .L50+40
 1120 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1121 00e6 83F00103 		eor	r3, r3, #1
 1122 00ea DBB2     		uxtb	r3, r3
 1123 00ec 002B     		cmp	r3, #0
 1124 00ee 16D0     		beq	.L41
 1125              	.LBB3:
 412:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1126              		.loc 1 412 0
 1127 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1128 00f4 0346     		mov	r3, r0
 1129 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 413:notoriOS.c    ****             char c_data_count_sent[20];
 414:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1130              		.loc 1 414 0
 1131 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1132 00fe 07F59B60 		add	r0, r7, #1240
 1133 0102 804A     		ldr	r2, .L50+24
 1134 0104 1421     		movs	r1, #20
 1135 0106 FFF7FEFF 		bl	snprintf
 415:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1136              		.loc 1 415 0
 1137 010a FFF7FEFF 		bl	getTimeStamp
 1138 010e 0246     		mov	r2, r0
 1139 0110 07F59B63 		add	r3, r7, #1240
 1140 0114 1946     		mov	r1, r3
 1141 0116 8048     		ldr	r0, .L50+44
 1142 0118 FFF7FEFF 		bl	pushData
 1143              	.LBE3:
 1144 011c 0FE0     		b	.L42
 1145              	.L41:
 1146              	.LBB4:
 416:notoriOS.c    ****         }else{
 417:notoriOS.c    ****             char c_data_count_sent[20];
 418:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1147              		.loc 1 418 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 30


 1148 011e 07F2C440 		addw	r0, r7, #1220
 1149 0122 9623     		movs	r3, #150
 1150 0124 774A     		ldr	r2, .L50+24
 1151 0126 1421     		movs	r1, #20
 1152 0128 FFF7FEFF 		bl	snprintf
 419:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1153              		.loc 1 419 0
 1154 012c FFF7FEFF 		bl	getTimeStamp
 1155 0130 0246     		mov	r2, r0
 1156 0132 07F2C443 		addw	r3, r7, #1220
 1157 0136 1946     		mov	r1, r3
 1158 0138 7748     		ldr	r0, .L50+44
 1159 013a FFF7FEFF 		bl	pushData
 1160              	.L42:
 1161              	.LBE4:
 420:notoriOS.c    ****         }
 421:notoriOS.c    ****         
 422:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 423:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1162              		.loc 1 423 0
 1163 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1164 0142 0346     		mov	r3, r0
 1165 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 424:notoriOS.c    ****         char c_data_count_desired[20];
 425:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 426:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1166              		.loc 1 426 0
 1167 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1168 014c 013B     		subs	r3, r3, #1
 1169 014e 07F2EC40 		addw	r0, r7, #1260
 1170 0152 6C4A     		ldr	r2, .L50+24
 1171 0154 1421     		movs	r1, #20
 1172 0156 FFF7FEFF 		bl	snprintf
 427:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1173              		.loc 1 427 0
 1174 015a FFF7FEFF 		bl	getTimeStamp
 1175 015e 0246     		mov	r2, r0
 1176 0160 07F2EC43 		addw	r3, r7, #1260
 1177 0164 1946     		mov	r1, r3
 1178 0166 6D48     		ldr	r0, .L50+48
 1179 0168 FFF7FEFF 		bl	pushData
 428:notoriOS.c    ****         
 429:notoriOS.c    ****         // Construct HTPP request
 430:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1180              		.loc 1 430 0
 1181 016c 6C49     		ldr	r1, .L50+52
 1182 016e 0020     		movs	r0, #0
 1183 0170 FFF7FEFF 		bl	printNotif
 431:notoriOS.c    ****         
 432:notoriOS.c    ****         // Old influx API
 433:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 434:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1184              		.loc 1 434 0
 1185 0174 6B4B     		ldr	r3, .L50+56
 1186 0176 6C4A     		ldr	r2, .L50+60
 1187 0178 6C49     		ldr	r1, .L50+64
 1188 017a 6048     		ldr	r0, .L50+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 31


 1189 017c FFF7FEFF 		bl	construct_malcom_route
 435:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1190              		.loc 1 435 0
 1191 0180 5E4A     		ldr	r2, .L50+16
 1192 0182 6B49     		ldr	r1, .L50+68
 1193 0184 0020     		movs	r0, #0
 1194 0186 FFF7FEFF 		bl	printNotif
 436:notoriOS.c    ****         
 437:notoriOS.c    ****         //OLD INFLUX API
 438:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 439:notoriOS.c    ****         construct_malcom_body(http_body);
 1195              		.loc 1 439 0
 1196 018a 5B48     		ldr	r0, .L50+12
 1197 018c FFF7FEFF 		bl	construct_malcom_body
 440:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1198              		.loc 1 440 0
 1199 0190 684B     		ldr	r3, .L50+72
 1200 0192 5B6E     		ldr	r3, [r3, #100]
 1201 0194 684A     		ldr	r2, .L50+76
 1202 0196 0592     		str	r2, [sp, #20]
 1203 0198 0022     		movs	r2, #0
 1204 019a 0492     		str	r2, [sp, #16]
 1205 019c 674A     		ldr	r2, .L50+80
 1206 019e 0392     		str	r2, [sp, #12]
 1207 01a0 674A     		ldr	r2, .L50+84
 1208 01a2 0292     		str	r2, [sp, #8]
 1209 01a4 674A     		ldr	r2, .L50+88
 1210 01a6 0192     		str	r2, [sp, #4]
 1211 01a8 0093     		str	r3, [sp]
 1212 01aa 544B     		ldr	r3, .L50+16
 1213 01ac 614A     		ldr	r2, .L50+72
 1214 01ae 5249     		ldr	r1, .L50+12
 1215 01b0 5048     		ldr	r0, .L50+8
 1216 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 441:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1217              		.loc 1 441 0
 1218 01b6 4F4A     		ldr	r2, .L50+8
 1219 01b8 6349     		ldr	r1, .L50+92
 1220 01ba 0020     		movs	r0, #0
 1221 01bc FFF7FEFF 		bl	printNotif
 442:notoriOS.c    ****         
 443:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 444:notoriOS.c    ****         // Open port and begin command line sequence
 445:notoriOS.c    ****         char portConfig[200];
 446:notoriOS.c    ****         uint8 status = 0u;
 1222              		.loc 1 446 0
 1223 01c0 0023     		movs	r3, #0
 1224 01c2 87F84535 		strb	r3, [r7, #1349]
 447:notoriOS.c    ****         
 448:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1225              		.loc 1 448 0
 1226 01c6 5B4B     		ldr	r3, .L50+72
 1227 01c8 5A6E     		ldr	r2, [r3, #100]
 1228 01ca 381D     		adds	r0, r7, #4
 1229 01cc 594B     		ldr	r3, .L50+72
 1230 01ce 0093     		str	r3, [sp]
 1231 01d0 1346     		mov	r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 32


 1232 01d2 5E4A     		ldr	r2, .L50+96
 1233 01d4 C821     		movs	r1, #200
 1234 01d6 FFF7FEFF 		bl	snprintf
 449:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1235              		.loc 1 449 0
 1236 01da 3B1D     		adds	r3, r7, #4
 1237 01dc 1A46     		mov	r2, r3
 1238 01de 5C49     		ldr	r1, .L50+100
 1239 01e0 0020     		movs	r0, #0
 1240 01e2 FFF7FEFF 		bl	printNotif
 450:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1241              		.loc 1 450 0
 1242 01e6 3B1D     		adds	r3, r7, #4
 1243 01e8 42F21072 		movw	r2, #10000
 1244 01ec 5949     		ldr	r1, .L50+104
 1245 01ee 1846     		mov	r0, r3
 1246 01f0 FFF7FEFF 		bl	at_write_command
 1247 01f4 0346     		mov	r3, r0
 1248 01f6 87F84535 		strb	r3, [r7, #1349]
 451:notoriOS.c    ****         
 452:notoriOS.c    ****         // create character pointer to chunk through the http_request
 453:notoriOS.c    ****         char *chunk;
 454:notoriOS.c    ****         // Set chunk to start where http_request starts
 455:notoriOS.c    ****         chunk = http_request;
 1249              		.loc 1 455 0
 1250 01fa 3E4B     		ldr	r3, .L50+8
 1251 01fc C7F84C35 		str	r3, [r7, #1356]
 456:notoriOS.c    ****         // variable for the number of packets to send
 457:notoriOS.c    ****         int8 packets;
 458:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1252              		.loc 1 458 0
 1253 0200 3C48     		ldr	r0, .L50+8
 1254 0202 FFF7FEFF 		bl	strlen
 1255 0206 0246     		mov	r2, r0
 1256 0208 534B     		ldr	r3, .L50+108
 1257 020a A3FB0223 		umull	r2, r3, r3, r2
 1258 020e 5B09     		lsrs	r3, r3, #5
 1259 0210 1846     		mov	r0, r3
 1260 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1261 0216 4FF00002 		mov	r2, #0
 1262 021a 504B     		ldr	r3, .L50+112
 1263 021c FFF7FEFF 		bl	nextafter
 1264 0220 0346     		mov	r3, r0
 1265 0222 0C46     		mov	r4, r1
 1266 0224 1846     		mov	r0, r3
 1267 0226 2146     		mov	r1, r4
 1268 0228 FFF7FEFF 		bl	ceil
 1269 022c 0346     		mov	r3, r0
 1270 022e 0C46     		mov	r4, r1
 1271 0230 1846     		mov	r0, r3
 1272 0232 2146     		mov	r1, r4
 1273 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1274 0238 0346     		mov	r3, r0
 1275 023a 87F84435 		strb	r3, [r7, #1348]
 459:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1276              		.loc 1 459 0
 1277 023e 2D48     		ldr	r0, .L50+8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 33


 1278 0240 FFF7FEFF 		bl	strlen
 1279 0244 0346     		mov	r3, r0
 1280 0246 1A46     		mov	r2, r3
 1281 0248 4549     		ldr	r1, .L50+116
 1282 024a 0020     		movs	r0, #0
 1283 024c FFF7FEFF 		bl	printNotif
 460:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1284              		.loc 1 460 0
 1285 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1286 0254 1A46     		mov	r2, r3
 1287 0256 4349     		ldr	r1, .L50+120
 1288 0258 0020     		movs	r0, #0
 1289 025a FFF7FEFF 		bl	printNotif
 1290              	.LBB5:
 461:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 462:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1291              		.loc 1 462 0
 1292 025e 0023     		movs	r3, #0
 1293 0260 87F84B35 		strb	r3, [r7, #1355]
 1294 0264 9AE0     		b	.L43
 1295              	.L46:
 1296              	.LBB6:
 463:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 464:notoriOS.c    ****             char http_chunk[1001];
 465:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 466:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 467:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1297              		.loc 1 467 0
 1298 0266 4FF47A72 		mov	r2, #1000
 1299 026a 3F49     		ldr	r1, .L50+124
 1300 026c 3F48     		ldr	r0, .L50+128
 1301 026e FFF7FEFF 		bl	at_write_command
 1302 0272 0346     		mov	r3, r0
 1303 0274 87F84535 		strb	r3, [r7, #1349]
 468:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 469:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1304              		.loc 1 469 0
 1305 0278 07F1CC00 		add	r0, r7, #204
 1306 027c D7F84C35 		ldr	r3, [r7, #1356]
 1307 0280 334A     		ldr	r2, .L50+100
 1308 0282 4FF4FA71 		mov	r1, #500
 1309 0286 FFF7FEFF 		bl	snprintf
 470:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 471:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1310              		.loc 1 471 0
 1311 028a 07F1CC03 		add	r3, r7, #204
 1312 028e 1846     		mov	r0, r3
 1313 0290 FFF7FEFF 		bl	strlen
 1314 0294 0346     		mov	r3, r0
 1315 0296 1A46     		mov	r2, r3
 1316 0298 07F1CC03 		add	r3, r7, #204
 1317 029c 1344     		add	r3, r3, r2
 1318 029e 3449     		ldr	r1, .L50+132
 1319 02a0 1A46     		mov	r2, r3
 1320 02a2 0B46     		mov	r3, r1
 1321 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1322 02a6 1380     		strh	r3, [r2]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 34


 472:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1323              		.loc 1 472 0
 1324 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1325 02ac 07F1CC03 		add	r3, r7, #204
 1326 02b0 3049     		ldr	r1, .L50+136
 1327 02b2 0020     		movs	r0, #0
 1328 02b4 FFF7FEFF 		bl	printNotif
 473:notoriOS.c    ****             // Send data to server
 474:notoriOS.c    ****             if ((packet+1) != packets){
 1329              		.loc 1 474 0
 1330 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1331 02bc 5A1C     		adds	r2, r3, #1
 1332 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1333 02c2 9A42     		cmp	r2, r3
 1334 02c4 58D0     		beq	.L44
 475:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1335              		.loc 1 475 0
 1336 02c6 07F1CC03 		add	r3, r7, #204
 1337 02ca 41F28832 		movw	r2, #5000
 1338 02ce 2149     		ldr	r1, .L50+104
 1339 02d0 1846     		mov	r0, r3
 1340 02d2 FFF7FEFF 		bl	at_write_command
 1341 02d6 0346     		mov	r3, r0
 1342 02d8 87F84535 		strb	r3, [r7, #1349]
 476:notoriOS.c    ****                 // Move the pointer forward 
 477:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1343              		.loc 1 477 0
 1344 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1345 02e0 03F2F313 		addw	r3, r3, #499
 1346 02e4 C7F84C35 		str	r3, [r7, #1356]
 1347 02e8 51E0     		b	.L45
 1348              	.L51:
 1349 02ea 00BF     		.align	2
 1350              	.L50:
 1351 02ec 00000000 		.word	try_counter
 1352 02f0 B4000000 		.word	.LC5
 1353 02f4 00000000 		.word	http_request
 1354 02f8 00000000 		.word	http_body
 1355 02fc 00000000 		.word	http_route
 1356 0300 00000000 		.word	modem_stats
 1357 0304 C4000000 		.word	.LC6
 1358 0308 C8000000 		.word	.LC7
 1359 030c D0000000 		.word	.LC8
 1360 0310 D8000000 		.word	.LC9
 1361 0314 00000000 		.word	buffer_overflow
 1362 0318 E4000000 		.word	.LC10
 1363 031c F4000000 		.word	.LC11
 1364 0320 08010000 		.word	.LC12
 1365 0324 1C010000 		.word	.LC13
 1366 0328 28000000 		.word	modem_info+40
 1367 032c 48010000 		.word	.LC14
 1368 0330 58010000 		.word	.LC15
 1369 0334 00000000 		.word	system_settings
 1370 0338 68010000 		.word	.LC16
 1371 033c 6C010000 		.word	.LC17
 1372 0340 70010000 		.word	.LC18
 1373 0344 78010000 		.word	.LC19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 35


 1374 0348 80010000 		.word	.LC20
 1375 034c 98010000 		.word	.LC21
 1376 0350 B4010000 		.word	.LC22
 1377 0354 B8010000 		.word	.LC23
 1378 0358 D34D6210 		.word	274877907
 1379 035c 00407F40 		.word	1082081280
 1380 0360 BC010000 		.word	.LC24
 1381 0364 D4010000 		.word	.LC25
 1382 0368 E8010000 		.word	.LC26
 1383 036c EC010000 		.word	.LC27
 1384 0370 FC010000 		.word	.LC28
 1385 0374 00020000 		.word	.LC29
 1386              	.L44:
 478:notoriOS.c    ****             }else{
 479:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1387              		.loc 1 479 0
 1388 0378 07F1CC03 		add	r3, r7, #204
 1389 037c 41F28832 		movw	r2, #5000
 1390 0380 2E49     		ldr	r1, .L52
 1391 0382 1846     		mov	r0, r3
 1392 0384 FFF7FEFF 		bl	at_write_command
 1393 0388 0346     		mov	r3, r0
 1394 038a 87F84535 		strb	r3, [r7, #1349]
 1395              	.L45:
 1396              	.LBE6:
 462:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1397              		.loc 1 462 0 discriminator 2
 1398 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1399 0392 DBB2     		uxtb	r3, r3
 1400 0394 0133     		adds	r3, r3, #1
 1401 0396 DBB2     		uxtb	r3, r3
 1402 0398 87F84B35 		strb	r3, [r7, #1355]
 1403              	.L43:
 462:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1404              		.loc 1 462 0 is_stmt 0 discriminator 1
 1405 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1406 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1407 03a4 9A42     		cmp	r2, r3
 1408 03a6 FFF65EAF 		blt	.L46
 1409              	.LBE5:
 480:notoriOS.c    ****             }
 481:notoriOS.c    ****             
 482:notoriOS.c    ****         }
 483:notoriOS.c    ****         
 484:notoriOS.c    ****         // Read received buffer
 485:notoriOS.c    ****         // A good write will return code "OS-OK"
 486:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 487:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 488:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1410              		.loc 1 488 0 is_stmt 1
 1411 03aa 41F28832 		movw	r2, #5000
 1412 03ae 2449     		ldr	r1, .L52+4
 1413 03b0 2448     		ldr	r0, .L52+8
 1414 03b2 FFF7FEFF 		bl	at_write_command
 1415 03b6 0346     		mov	r3, r0
 1416 03b8 87F84535 		strb	r3, [r7, #1349]
 489:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 36


 490:notoriOS.c    ****     
 491:notoriOS.c    ****   
 492:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 493:notoriOS.c    ****         if(status == 1u){
 1417              		.loc 1 493 0
 1418 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1419 03c0 012B     		cmp	r3, #1
 1420 03c2 1DD1     		bne	.L47
 1421              	.LBB7:
 494:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1422              		.loc 1 494 0
 1423 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 495:notoriOS.c    ****             Clear_Data_Stack();
 1424              		.loc 1 495 0
 1425 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 496:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1426              		.loc 1 496 0
 1427 03cc FFF7FEFF 		bl	getTimeStamp
 1428 03d0 0246     		mov	r2, r0
 1429 03d2 1D4B     		ldr	r3, .L52+12
 1430 03d4 1B68     		ldr	r3, [r3]
 1431 03d6 D31A     		subs	r3, r2, r3
 1432 03d8 C7F84035 		str	r3, [r7, #1344]
 497:notoriOS.c    ****             char s_send_time[10];
 498:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1433              		.loc 1 498 0
 1434 03dc 07F59760 		add	r0, r7, #1208
 1435 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1436 03e4 194A     		ldr	r2, .L52+16
 1437 03e6 0A21     		movs	r1, #10
 1438 03e8 FFF7FEFF 		bl	snprintf
 499:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1439              		.loc 1 499 0
 1440 03ec FFF7FEFF 		bl	getTimeStamp
 1441 03f0 0246     		mov	r2, r0
 1442 03f2 07F59763 		add	r3, r7, #1208
 1443 03f6 1946     		mov	r1, r3
 1444 03f8 1548     		ldr	r0, .L52+20
 1445 03fa FFF7FEFF 		bl	pushData
 1446              	.LBE7:
 1447 03fe 03E0     		b	.L48
 1448              	.L47:
 500:notoriOS.c    ****         }else{
 501:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1449              		.loc 1 501 0
 1450 0400 1449     		ldr	r1, .L52+24
 1451 0402 0220     		movs	r0, #2
 1452 0404 FFF7FEFF 		bl	printNotif
 1453              	.L48:
 502:notoriOS.c    ****         }
 503:notoriOS.c    ****          
 504:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 505:notoriOS.c    ****         long network_time = modem_get_network_time();
 1454              		.loc 1 505 0
 1455 0408 FFF7FEFF 		bl	modem_get_network_time
 1456 040c C7F83C05 		str	r0, [r7, #1340]
 506:notoriOS.c    ****         if(network_time != 0){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 37


 1457              		.loc 1 506 0
 1458 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1459 0414 002B     		cmp	r3, #0
 1460 0416 03D0     		beq	.L49
 507:notoriOS.c    ****            setTime(network_time);
 1461              		.loc 1 507 0
 1462 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1463 041c FFF7FEFF 		bl	setTime
 1464              	.L49:
 508:notoriOS.c    ****         }
 509:notoriOS.c    ****         
 510:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 511:notoriOS.c    ****         // If not -- keep the statck and try next time
 512:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 513:notoriOS.c    ****         modem_power_down();
 1465              		.loc 1 513 0
 1466 0420 FFF7FEFF 		bl	modem_power_down
 514:notoriOS.c    ****         
 515:notoriOS.c    ****         try_counter = 0u;
 1467              		.loc 1 515 0
 1468 0424 0C4B     		ldr	r3, .L52+28
 1469 0426 0022     		movs	r2, #0
 1470 0428 1A70     		strb	r2, [r3]
 516:notoriOS.c    ****         return 0u;
 1471              		.loc 1 516 0
 1472 042a 0023     		movs	r3, #0
 1473 042c 00E0     		b	.L37
 1474              	.L40:
 1475              	.LBE2:
 517:notoriOS.c    ****     }
 518:notoriOS.c    ****       
 519:notoriOS.c    ****       return 1u; // Not done yet
 1476              		.loc 1 519 0
 1477 042e 0123     		movs	r3, #1
 1478              	.L37:
 520:notoriOS.c    **** }
 1479              		.loc 1 520 0 discriminator 1
 1480 0430 1846     		mov	r0, r3
 1481 0432 07F25457 		addw	r7, r7, #1364
 1482              		.cfi_def_cfa_offset 12
 1483 0436 BD46     		mov	sp, r7
 1484              		.cfi_def_cfa_register 13
 1485              		@ sp needed
 1486 0438 90BD     		pop	{r4, r7, pc}
 1487              	.L53:
 1488 043a 00BF     		.align	2
 1489              	.L52:
 1490 043c 10020000 		.word	.LC30
 1491 0440 18020000 		.word	.LC31
 1492 0444 20020000 		.word	.LC32
 1493 0448 00000000 		.word	modem_start_time_stamp
 1494 044c C4000000 		.word	.LC6
 1495 0450 34020000 		.word	.LC33
 1496 0454 44020000 		.word	.LC34
 1497 0458 00000000 		.word	try_counter
 1498              		.cfi_endproc
 1499              	.LFE74:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 38


 1500              		.size	syncData, .-syncData
 1501              		.section	.text.configureRemoteParams,"ax",%progbits
 1502              		.align	2
 1503              		.global	configureRemoteParams
 1504              		.thumb
 1505              		.thumb_func
 1506              		.type	configureRemoteParams, %function
 1507              	configureRemoteParams:
 1508              	.LFB75:
 521:notoriOS.c    **** 
 522:notoriOS.c    **** // ==============================================
 523:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 524:notoriOS.c    **** // Returns 0 when done
 525:notoriOS.c    **** // ==============================================
 526:notoriOS.c    **** uint8 configureRemoteParams(){
 1509              		.loc 1 526 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 8
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 82B0     		sub	sp, sp, #8
 1518              		.cfi_def_cfa_offset 16
 1519 0004 00AF     		add	r7, sp, #0
 1520              		.cfi_def_cfa_register 7
 527:notoriOS.c    ****     
 528:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1521              		.loc 1 528 0
 1522 0006 FFF7FEFF 		bl	modem_get_state
 1523 000a 0346     		mov	r3, r0
 1524 000c 002B     		cmp	r3, #0
 1525 000e 02D1     		bne	.L55
 529:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 530:notoriOS.c    ****         modem_power_up();
 1526              		.loc 1 530 0
 1527 0010 FFF7FEFF 		bl	modem_power_up
 1528 0014 11E0     		b	.L56
 1529              	.L55:
 531:notoriOS.c    ****             
 532:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1530              		.loc 1 532 0
 1531 0016 FFF7FEFF 		bl	modem_get_state
 1532 001a 0346     		mov	r3, r0
 1533 001c 042B     		cmp	r3, #4
 1534 001e 0CD1     		bne	.L56
 1535              	.LBB8:
 533:notoriOS.c    ****         
 534:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 535:notoriOS.c    ****         
 536:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 537:notoriOS.c    ****         long network_time = modem_get_network_time();
 1536              		.loc 1 537 0
 1537 0020 FFF7FEFF 		bl	modem_get_network_time
 1538 0024 7860     		str	r0, [r7, #4]
 538:notoriOS.c    ****         if(network_time != 0){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 39


 1539              		.loc 1 538 0
 1540 0026 7B68     		ldr	r3, [r7, #4]
 1541 0028 002B     		cmp	r3, #0
 1542 002a 02D0     		beq	.L57
 539:notoriOS.c    ****             setTime(network_time);
 1543              		.loc 1 539 0
 1544 002c 7868     		ldr	r0, [r7, #4]
 1545 002e FFF7FEFF 		bl	setTime
 1546              	.L57:
 540:notoriOS.c    ****         }
 541:notoriOS.c    ****         
 542:notoriOS.c    ****         // Get GPS coordinates
 543:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 544:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 545:notoriOS.c    ****         modem_power_down();
 1547              		.loc 1 545 0
 1548 0032 FFF7FEFF 		bl	modem_power_down
 546:notoriOS.c    ****         return 0u;
 1549              		.loc 1 546 0
 1550 0036 0023     		movs	r3, #0
 1551 0038 00E0     		b	.L58
 1552              	.L56:
 1553              	.LBE8:
 547:notoriOS.c    ****         
 548:notoriOS.c    ****     }
 549:notoriOS.c    ****     
 550:notoriOS.c    ****     return 1u;
 1554              		.loc 1 550 0
 1555 003a 0123     		movs	r3, #1
 1556              	.L58:
 551:notoriOS.c    **** }
 1557              		.loc 1 551 0
 1558 003c 1846     		mov	r0, r3
 1559 003e 0837     		adds	r7, r7, #8
 1560              		.cfi_def_cfa_offset 8
 1561 0040 BD46     		mov	sp, r7
 1562              		.cfi_def_cfa_register 13
 1563              		@ sp needed
 1564 0042 80BD     		pop	{r7, pc}
 1565              		.cfi_endproc
 1566              	.LFE75:
 1567              		.size	configureRemoteParams, .-configureRemoteParams
 1568              		.section	.rodata
 1569 026f 00       		.align	2
 1570              	.LC35:
 1571 0270 256C6400 		.ascii	"%ld\000"
 1572              		.align	2
 1573              	.LC36:
 1574 0274 43757272 		.ascii	"Current_Node_Type\000"
 1574      656E745F 
 1574      4E6F6465 
 1574      5F547970 
 1574      6500
 1575 0286 0000     		.align	2
 1576              	.LC37:
 1577 0288 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1577      6F746978 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 40


 1577      5F646570 
 1577      74683D25 
 1577      7300
 1578 029a 0000     		.align	2
 1579              	.LC38:
 1580 029c 6D617862 		.ascii	"maxbotix_depth\000"
 1580      6F746978 
 1580      5F646570 
 1580      746800
 1581 02ab 00       		.align	2
 1582              	.LC39:
 1583 02ac 612B00   		.ascii	"a+\000"
 1584 02af 00       		.align	2
 1585              	.LC40:
 1586 02b0 206D6178 		.ascii	" maxbotix_depth: \000"
 1586      626F7469 
 1586      785F6465 
 1586      7074683A 
 1586      2000
 1587 02c2 0000     		.align	2
 1588              	.LC41:
 1589 02c4 2000     		.ascii	" \000"
 1590 02c6 0000     		.align	2
 1591              	.LC42:
 1592 02c8 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1592      64206E6F 
 1592      74206765 
 1592      74207661 
 1592      6C696420 
 1593              		.global	__aeabi_f2d
 1594              		.align	2
 1595              	.LC43:
 1596 02f4 252E3266 		.ascii	"%.2f\000"
 1596      00
 1597 02f9 000000   		.align	2
 1598              	.LC44:
 1599 02fc 765F6261 		.ascii	"v_bat=%s\000"
 1599      743D2573 
 1599      00
 1600 0305 000000   		.align	2
 1601              	.LC45:
 1602 0308 765F6261 		.ascii	"v_bat\000"
 1602      7400
 1603 030e 0000     		.align	2
 1604              	.LC46:
 1605 0310 20766261 		.ascii	" vbat: \000"
 1605      743A2000 
 1606              		.align	2
 1607              	.LC47:
 1608 0318 70726573 		.ascii	"pressure_current=%s\000"
 1608      73757265 
 1608      5F637572 
 1608      72656E74 
 1608      3D257300 
 1609              		.align	2
 1610              	.LC48:
 1611 032c 70726573 		.ascii	"pressure_current\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 41


 1611      73757265 
 1611      5F637572 
 1611      72656E74 
 1611      00
 1612 033d 000000   		.align	2
 1613              	.LC49:
 1614 0340 20707265 		.ascii	" pressure_current: \000"
 1614      73737572 
 1614      655F6375 
 1614      7272656E 
 1614      743A2000 
 1615              		.align	2
 1616              	.LC50:
 1617 0354 70726573 		.ascii	"pressure_depth=%s\000"
 1617      73757265 
 1617      5F646570 
 1617      74683D25 
 1617      7300
 1618 0366 0000     		.align	2
 1619              	.LC51:
 1620 0368 70726573 		.ascii	"pressure_depth\000"
 1620      73757265 
 1620      5F646570 
 1620      746800
 1621 0377 00       		.align	2
 1622              	.LC52:
 1623 0378 20707265 		.ascii	" pressure_depth: \000"
 1623      73737572 
 1623      655F6465 
 1623      7074683A 
 1623      2000
 1624 038a 0000     		.align	2
 1625              	.LC53:
 1626 038c 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1626      64206E6F 
 1626      74206765 
 1626      74207661 
 1626      6C696420 
 1627              		.section	.text.makeMeasurements,"ax",%progbits
 1628              		.align	2
 1629              		.global	makeMeasurements
 1630              		.thumb
 1631              		.thumb_func
 1632              		.type	makeMeasurements, %function
 1633              	makeMeasurements:
 1634              	.LFB76:
 552:notoriOS.c    **** 
 553:notoriOS.c    **** 
 554:notoriOS.c    **** // ==============================================
 555:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 556:notoriOS.c    **** // Returns 0 when finished
 557:notoriOS.c    **** // ==============================================
 558:notoriOS.c    **** uint8 makeMeasurements(){
 1635              		.loc 1 558 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 128
 1638              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 42


 1639 0000 90B5     		push	{r4, r7, lr}
 1640              		.cfi_def_cfa_offset 12
 1641              		.cfi_offset 4, -12
 1642              		.cfi_offset 7, -8
 1643              		.cfi_offset 14, -4
 1644 0002 A3B0     		sub	sp, sp, #140
 1645              		.cfi_def_cfa_offset 152
 1646 0004 02AF     		add	r7, sp, #8
 1647              		.cfi_def_cfa 7, 144
 559:notoriOS.c    ****     
 560:notoriOS.c    ****     // Get clock time and save to timeStamp
 561:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1648              		.loc 1 561 0
 1649 0006 FFF7FEFF 		bl	getTimeStamp
 1650 000a F867     		str	r0, [r7, #124]
 562:notoriOS.c    ****     char c_timeStamp[32];
 563:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1651              		.loc 1 563 0
 1652 000c 07F15C00 		add	r0, r7, #92
 1653 0010 FB6F     		ldr	r3, [r7, #124]
 1654 0012 8C4A     		ldr	r2, .L67
 1655 0014 2021     		movs	r1, #32
 1656 0016 FFF7FEFF 		bl	snprintf
 564:notoriOS.c    ****     
 565:notoriOS.c    ****     // Holds string for value that will be written 
 566:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 567:notoriOS.c    ****     
 568:notoriOS.c    ****     // who i am determines what I'm going to do 
 569:notoriOS.c    ****     // this is primarily for interpretability on grafana dashboards when developing custom nodes
 570:notoriOS.c    ****     char c_node_type[5];
 571:notoriOS.c    ****     itoa(updatable_parameters.node_type,c_node_type,10);
 1657              		.loc 1 571 0
 1658 001a 8B4B     		ldr	r3, .L67+4
 1659 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1660 001e 1846     		mov	r0, r3
 1661 0020 07F14003 		add	r3, r7, #64
 1662 0024 0A22     		movs	r2, #10
 1663 0026 1946     		mov	r1, r3
 1664 0028 FFF7FEFF 		bl	itoa
 572:notoriOS.c    ****     pushData("Current_Node_Type",c_node_type ,getTimeStamp());
 1665              		.loc 1 572 0
 1666 002c FFF7FEFF 		bl	getTimeStamp
 1667 0030 0246     		mov	r2, r0
 1668 0032 07F14003 		add	r3, r7, #64
 1669 0036 1946     		mov	r1, r3
 1670 0038 8448     		ldr	r0, .L67+8
 1671 003a FFF7FEFF 		bl	pushData
 573:notoriOS.c    ****     
 574:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 575:notoriOS.c    ****     
 576:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1672              		.loc 1 576 0
 1673 003e 824B     		ldr	r3, .L67+4
 1674 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1675 0042 002B     		cmp	r3, #0
 1676 0044 3BD1     		bne	.L60
 1677              	.LBB9:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 43


 577:notoriOS.c    ****         
 578:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 579:notoriOS.c    ****         level_sensor_t m_level_sensor;
 580:notoriOS.c    ****         
 581:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 582:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1678              		.loc 1 582 0
 1679 0046 07F11003 		add	r3, r7, #16
 1680 004a 1846     		mov	r0, r3
 1681 004c FFF7FEFF 		bl	level_sensor_take_reading
 583:notoriOS.c    ****     
 584:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 585:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1682              		.loc 1 585 0
 1683 0050 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1684 0054 002B     		cmp	r3, #0
 1685 0056 2ED0     		beq	.L61
 586:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1686              		.loc 1 586 0
 1687 0058 B7F92630 		ldrsh	r3, [r7, #38]
 1688 005c 07F14800 		add	r0, r7, #72
 1689 0060 7B4A     		ldr	r2, .L67+12
 1690 0062 1421     		movs	r1, #20
 1691 0064 FFF7FEFF 		bl	snprintf
 587:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1692              		.loc 1 587 0
 1693 0068 07F14803 		add	r3, r7, #72
 1694 006c 1A46     		mov	r2, r3
 1695 006e 7949     		ldr	r1, .L67+16
 1696 0070 0020     		movs	r0, #0
 1697 0072 FFF7FEFF 		bl	printNotif
 588:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1698              		.loc 1 588 0
 1699 0076 07F14803 		add	r3, r7, #72
 1700 007a FA6F     		ldr	r2, [r7, #124]
 1701 007c 1946     		mov	r1, r3
 1702 007e 7648     		ldr	r0, .L67+20
 1703 0080 FFF7FEFF 		bl	pushData
 589:notoriOS.c    ****             
 590:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 591:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1704              		.loc 1 591 0
 1705 0084 07F15C03 		add	r3, r7, #92
 1706 0088 1A46     		mov	r2, r3
 1707 008a 7449     		ldr	r1, .L67+24
 1708 008c 7448     		ldr	r0, .L67+28
 1709 008e FFF7FEFF 		bl	SD_write
 592:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1710              		.loc 1 592 0
 1711 0092 744A     		ldr	r2, .L67+32
 1712 0094 7149     		ldr	r1, .L67+24
 1713 0096 7248     		ldr	r0, .L67+28
 1714 0098 FFF7FEFF 		bl	SD_write
 593:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1715              		.loc 1 593 0
 1716 009c 07F14803 		add	r3, r7, #72
 1717 00a0 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 44


 1718 00a2 6E49     		ldr	r1, .L67+24
 1719 00a4 6E48     		ldr	r0, .L67+28
 1720 00a6 FFF7FEFF 		bl	SD_write
 594:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1721              		.loc 1 594 0
 1722 00aa 6F4A     		ldr	r2, .L67+36
 1723 00ac 6B49     		ldr	r1, .L67+24
 1724 00ae 6C48     		ldr	r0, .L67+28
 1725 00b0 FFF7FEFF 		bl	SD_write
 1726 00b4 03E0     		b	.L60
 1727              	.L61:
 595:notoriOS.c    ****         }else{
 596:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1728              		.loc 1 596 0
 1729 00b6 6D49     		ldr	r1, .L67+40
 1730 00b8 0220     		movs	r0, #2
 1731 00ba FFF7FEFF 		bl	printNotif
 1732              	.L60:
 1733              	.LBE9:
 597:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 598:notoriOS.c    ****         }
 599:notoriOS.c    ****     }
 600:notoriOS.c    ****     
 601:notoriOS.c    ****     
 602:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 603:notoriOS.c    ****     voltage_t m_voltage;
 604:notoriOS.c    ****     
 605:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 606:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1734              		.loc 1 606 0
 1735 00be 07F12C03 		add	r3, r7, #44
 1736 00c2 1846     		mov	r0, r3
 1737 00c4 FFF7FEFF 		bl	voltage_take_readings
 607:notoriOS.c    ****     
 608:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 609:notoriOS.c    ****     if(m_voltage.valid){
 1738              		.loc 1 609 0
 1739 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1740 00cc 002B     		cmp	r3, #0
 1741 00ce 00F0AF80 		beq	.L63
 610:notoriOS.c    ****         // battery voltage data
 611:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1742              		.loc 1 611 0
 1743 00d2 FB6A     		ldr	r3, [r7, #44]	@ float
 1744 00d4 1846     		mov	r0, r3
 1745 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1746 00da 0346     		mov	r3, r0
 1747 00dc 0C46     		mov	r4, r1
 1748 00de 07F14800 		add	r0, r7, #72
 1749 00e2 CDE90034 		strd	r3, [sp]
 1750 00e6 624A     		ldr	r2, .L67+44
 1751 00e8 1421     		movs	r1, #20
 1752 00ea FFF7FEFF 		bl	snprintf
 612:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1753              		.loc 1 612 0
 1754 00ee 07F14803 		add	r3, r7, #72
 1755 00f2 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 45


 1756 00f4 5F49     		ldr	r1, .L67+48
 1757 00f6 0020     		movs	r0, #0
 1758 00f8 FFF7FEFF 		bl	printNotif
 613:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1759              		.loc 1 613 0
 1760 00fc 07F14803 		add	r3, r7, #72
 1761 0100 FA6F     		ldr	r2, [r7, #124]
 1762 0102 1946     		mov	r1, r3
 1763 0104 5C48     		ldr	r0, .L67+52
 1764 0106 FFF7FEFF 		bl	pushData
 614:notoriOS.c    ****         
 615:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 616:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1765              		.loc 1 616 0
 1766 010a 574A     		ldr	r2, .L67+36
 1767 010c 5349     		ldr	r1, .L67+24
 1768 010e 5448     		ldr	r0, .L67+28
 1769 0110 FFF7FEFF 		bl	SD_write
 617:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1770              		.loc 1 617 0
 1771 0114 07F15C03 		add	r3, r7, #92
 1772 0118 1A46     		mov	r2, r3
 1773 011a 5049     		ldr	r1, .L67+24
 1774 011c 5048     		ldr	r0, .L67+28
 1775 011e FFF7FEFF 		bl	SD_write
 618:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1776              		.loc 1 618 0
 1777 0122 564A     		ldr	r2, .L67+56
 1778 0124 4D49     		ldr	r1, .L67+24
 1779 0126 4E48     		ldr	r0, .L67+28
 1780 0128 FFF7FEFF 		bl	SD_write
 619:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1781              		.loc 1 619 0
 1782 012c 07F14803 		add	r3, r7, #72
 1783 0130 1A46     		mov	r2, r3
 1784 0132 4A49     		ldr	r1, .L67+24
 1785 0134 4A48     		ldr	r0, .L67+28
 1786 0136 FFF7FEFF 		bl	SD_write
 620:notoriOS.c    ****         
 621:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 622:notoriOS.c    ****          
 623:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1787              		.loc 1 623 0
 1788 013a 434B     		ldr	r3, .L67+4
 1789 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1790 013e 012B     		cmp	r3, #1
 1791 0140 7AD1     		bne	.L65
 1792              	.LBB10:
 624:notoriOS.c    ****             
 625:notoriOS.c    ****             // pressure transducer voltage (V) data
 626:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 627:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 628:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 629:notoriOS.c    ****             
 630:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 631:notoriOS.c    ****             pressure_t m_pressure;
 632:notoriOS.c    ****             
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 46


 633:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 634:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1793              		.loc 1 634 0
 1794 0142 3C46     		mov	r4, r7
 1795 0144 6A46     		mov	r2, sp
 1796 0146 07F13803 		add	r3, r7, #56
 1797 014a 93E80300 		ldmia	r3, {r0, r1}
 1798 014e 82E80300 		stmia	r2, {r0, r1}
 1799 0152 07F12C03 		add	r3, r7, #44
 1800 0156 0ECB     		ldmia	r3, {r1, r2, r3}
 1801 0158 2046     		mov	r0, r4
 1802 015a FFF7FEFF 		bl	pressure_calculations
 635:notoriOS.c    ****             
 636:notoriOS.c    ****             // pressure transducer current (mA) data
 637:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1803              		.loc 1 637 0
 1804 015e BB68     		ldr	r3, [r7, #8]	@ float
 1805 0160 1846     		mov	r0, r3
 1806 0162 FFF7FEFF 		bl	__aeabi_f2d
 1807 0166 0346     		mov	r3, r0
 1808 0168 0C46     		mov	r4, r1
 1809 016a 07F14800 		add	r0, r7, #72
 1810 016e CDE90034 		strd	r3, [sp]
 1811 0172 3F4A     		ldr	r2, .L67+44
 1812 0174 1421     		movs	r1, #20
 1813 0176 FFF7FEFF 		bl	snprintf
 638:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1814              		.loc 1 638 0
 1815 017a 07F14803 		add	r3, r7, #72
 1816 017e 1A46     		mov	r2, r3
 1817 0180 3F49     		ldr	r1, .L67+60
 1818 0182 0020     		movs	r0, #0
 1819 0184 FFF7FEFF 		bl	printNotif
 639:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1820              		.loc 1 639 0
 1821 0188 07F14803 		add	r3, r7, #72
 1822 018c FA6F     		ldr	r2, [r7, #124]
 1823 018e 1946     		mov	r1, r3
 1824 0190 3C48     		ldr	r0, .L67+64
 1825 0192 FFF7FEFF 		bl	pushData
 640:notoriOS.c    ****             
 641:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 642:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1826              		.loc 1 642 0
 1827 0196 344A     		ldr	r2, .L67+36
 1828 0198 3049     		ldr	r1, .L67+24
 1829 019a 3148     		ldr	r0, .L67+28
 1830 019c FFF7FEFF 		bl	SD_write
 643:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1831              		.loc 1 643 0
 1832 01a0 07F15C03 		add	r3, r7, #92
 1833 01a4 1A46     		mov	r2, r3
 1834 01a6 2D49     		ldr	r1, .L67+24
 1835 01a8 2D48     		ldr	r0, .L67+28
 1836 01aa FFF7FEFF 		bl	SD_write
 644:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1837              		.loc 1 644 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 47


 1838 01ae 364A     		ldr	r2, .L67+68
 1839 01b0 2A49     		ldr	r1, .L67+24
 1840 01b2 2B48     		ldr	r0, .L67+28
 1841 01b4 FFF7FEFF 		bl	SD_write
 645:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1842              		.loc 1 645 0
 1843 01b8 07F14803 		add	r3, r7, #72
 1844 01bc 1A46     		mov	r2, r3
 1845 01be 2749     		ldr	r1, .L67+24
 1846 01c0 2748     		ldr	r0, .L67+28
 1847 01c2 FFF7FEFF 		bl	SD_write
 646:notoriOS.c    ****             
 647:notoriOS.c    ****             // pressure transducer depth (ft) data
 648:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1848              		.loc 1 648 0
 1849 01c6 FB68     		ldr	r3, [r7, #12]	@ float
 1850 01c8 1846     		mov	r0, r3
 1851 01ca FFF7FEFF 		bl	__aeabi_f2d
 1852 01ce 0346     		mov	r3, r0
 1853 01d0 0C46     		mov	r4, r1
 1854 01d2 07F14800 		add	r0, r7, #72
 1855 01d6 CDE90034 		strd	r3, [sp]
 1856 01da 254A     		ldr	r2, .L67+44
 1857 01dc 1421     		movs	r1, #20
 1858 01de FFF7FEFF 		bl	snprintf
 649:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1859              		.loc 1 649 0
 1860 01e2 07F14803 		add	r3, r7, #72
 1861 01e6 1A46     		mov	r2, r3
 1862 01e8 2849     		ldr	r1, .L67+72
 1863 01ea 0020     		movs	r0, #0
 1864 01ec FFF7FEFF 		bl	printNotif
 650:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1865              		.loc 1 650 0
 1866 01f0 07F14803 		add	r3, r7, #72
 1867 01f4 FA6F     		ldr	r2, [r7, #124]
 1868 01f6 1946     		mov	r1, r3
 1869 01f8 2548     		ldr	r0, .L67+76
 1870 01fa FFF7FEFF 		bl	pushData
 651:notoriOS.c    ****             
 652:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 653:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1871              		.loc 1 653 0
 1872 01fe 1A4A     		ldr	r2, .L67+36
 1873 0200 1649     		ldr	r1, .L67+24
 1874 0202 1748     		ldr	r0, .L67+28
 1875 0204 FFF7FEFF 		bl	SD_write
 654:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1876              		.loc 1 654 0
 1877 0208 07F15C03 		add	r3, r7, #92
 1878 020c 1A46     		mov	r2, r3
 1879 020e 1349     		ldr	r1, .L67+24
 1880 0210 1348     		ldr	r0, .L67+28
 1881 0212 FFF7FEFF 		bl	SD_write
 655:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1882              		.loc 1 655 0
 1883 0216 1F4A     		ldr	r2, .L67+80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 48


 1884 0218 1049     		ldr	r1, .L67+24
 1885 021a 1148     		ldr	r0, .L67+28
 1886 021c FFF7FEFF 		bl	SD_write
 656:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1887              		.loc 1 656 0
 1888 0220 07F14803 		add	r3, r7, #72
 1889 0224 1A46     		mov	r2, r3
 1890 0226 0D49     		ldr	r1, .L67+24
 1891 0228 0D48     		ldr	r0, .L67+28
 1892 022a FFF7FEFF 		bl	SD_write
 1893 022e 03E0     		b	.L65
 1894              	.L63:
 1895              	.LBE10:
 657:notoriOS.c    ****         }    
 658:notoriOS.c    ****     }else{
 659:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1896              		.loc 1 659 0
 1897 0230 1949     		ldr	r1, .L67+84
 1898 0232 0220     		movs	r0, #2
 1899 0234 FFF7FEFF 		bl	printNotif
 1900              	.L65:
 660:notoriOS.c    ****         
 661:notoriOS.c    ****     }
 662:notoriOS.c    ****         
 663:notoriOS.c    ****     
 664:notoriOS.c    ****     return 0u;
 1901              		.loc 1 664 0
 1902 0238 0023     		movs	r3, #0
 665:notoriOS.c    **** }
 1903              		.loc 1 665 0
 1904 023a 1846     		mov	r0, r3
 1905 023c 8437     		adds	r7, r7, #132
 1906              		.cfi_def_cfa_offset 12
 1907 023e BD46     		mov	sp, r7
 1908              		.cfi_def_cfa_register 13
 1909              		@ sp needed
 1910 0240 90BD     		pop	{r4, r7, pc}
 1911              	.L68:
 1912 0242 00BF     		.align	2
 1913              	.L67:
 1914 0244 70020000 		.word	.LC35
 1915 0248 00000000 		.word	updatable_parameters
 1916 024c 74020000 		.word	.LC36
 1917 0250 C4000000 		.word	.LC6
 1918 0254 88020000 		.word	.LC37
 1919 0258 9C020000 		.word	.LC38
 1920 025c AC020000 		.word	.LC39
 1921 0260 00000000 		.word	Data_fileName
 1922 0264 B0020000 		.word	.LC40
 1923 0268 C4020000 		.word	.LC41
 1924 026c C8020000 		.word	.LC42
 1925 0270 F4020000 		.word	.LC43
 1926 0274 FC020000 		.word	.LC44
 1927 0278 08030000 		.word	.LC45
 1928 027c 10030000 		.word	.LC46
 1929 0280 18030000 		.word	.LC47
 1930 0284 2C030000 		.word	.LC48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 49


 1931 0288 40030000 		.word	.LC49
 1932 028c 54030000 		.word	.LC50
 1933 0290 68030000 		.word	.LC51
 1934 0294 78030000 		.word	.LC52
 1935 0298 8C030000 		.word	.LC53
 1936              		.cfi_endproc
 1937              	.LFE76:
 1938              		.size	makeMeasurements, .-makeMeasurements
 1939              		.section	.rodata
 1940 03b3 00       		.align	2
 1941              	.LC54:
 1942 03b4 4572726F 		.ascii	"Error setting system time.\000"
 1942      72207365 
 1942      7474696E 
 1942      67207379 
 1942      7374656D 
 1943              		.section	.text.setTime,"ax",%progbits
 1944              		.align	2
 1945              		.global	setTime
 1946              		.thumb
 1947              		.thumb_func
 1948              		.type	setTime, %function
 1949              	setTime:
 1950              	.LFB77:
 666:notoriOS.c    **** 
 667:notoriOS.c    **** // ==============================================
 668:notoriOS.c    **** // Set the system time
 669:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 670:notoriOS.c    **** // ==============================================
 671:notoriOS.c    **** uint8 setTime(long timeStamp){
 1951              		.loc 1 671 0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 24
 1954              		@ frame_needed = 1, uses_anonymous_args = 0
 1955 0000 80B5     		push	{r7, lr}
 1956              		.cfi_def_cfa_offset 8
 1957              		.cfi_offset 7, -8
 1958              		.cfi_offset 14, -4
 1959 0002 86B0     		sub	sp, sp, #24
 1960              		.cfi_def_cfa_offset 32
 1961 0004 00AF     		add	r7, sp, #0
 1962              		.cfi_def_cfa_register 7
 1963 0006 7860     		str	r0, [r7, #4]
 672:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 673:notoriOS.c    ****     if(timeStamp <=0){
 1964              		.loc 1 673 0
 1965 0008 7B68     		ldr	r3, [r7, #4]
 1966 000a 002B     		cmp	r3, #0
 1967 000c 05DC     		bgt	.L70
 674:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1968              		.loc 1 674 0
 1969 000e 1849     		ldr	r1, .L72
 1970 0010 0220     		movs	r0, #2
 1971 0012 FFF7FEFF 		bl	printNotif
 675:notoriOS.c    ****         return 0;  
 1972              		.loc 1 675 0
 1973 0016 0023     		movs	r3, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 50


 1974 0018 25E0     		b	.L71
 1975              	.L70:
 676:notoriOS.c    ****     }
 677:notoriOS.c    ****     // Create a new pointer t of data structure tm
 678:notoriOS.c    ****     struct tm * t;
 679:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 680:notoriOS.c    ****     t = gmtime(&timeStamp);
 1976              		.loc 1 680 0
 1977 001a 3B1D     		adds	r3, r7, #4
 1978 001c 1846     		mov	r0, r3
 1979 001e FFF7FEFF 		bl	gmtime
 1980 0022 7861     		str	r0, [r7, #20]
 681:notoriOS.c    ****     
 682:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 683:notoriOS.c    ****     RTC_TIME_DATE localTime;
 684:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1981              		.loc 1 684 0
 1982 0024 7B69     		ldr	r3, [r7, #20]
 1983 0026 1B68     		ldr	r3, [r3]
 1984 0028 DBB2     		uxtb	r3, r3
 1985 002a 3B72     		strb	r3, [r7, #8]
 685:notoriOS.c    ****     localTime.Min = t->tm_min;
 1986              		.loc 1 685 0
 1987 002c 7B69     		ldr	r3, [r7, #20]
 1988 002e 5B68     		ldr	r3, [r3, #4]
 1989 0030 DBB2     		uxtb	r3, r3
 1990 0032 7B72     		strb	r3, [r7, #9]
 686:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1991              		.loc 1 686 0
 1992 0034 7B69     		ldr	r3, [r7, #20]
 1993 0036 9B68     		ldr	r3, [r3, #8]
 1994 0038 DBB2     		uxtb	r3, r3
 1995 003a BB72     		strb	r3, [r7, #10]
 687:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1996              		.loc 1 687 0
 1997 003c 7B69     		ldr	r3, [r7, #20]
 1998 003e 5B69     		ldr	r3, [r3, #20]
 1999 0040 9BB2     		uxth	r3, r3
 2000 0042 03F26C73 		addw	r3, r3, #1900
 2001 0046 9BB2     		uxth	r3, r3
 2002 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 688:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2003              		.loc 1 688 0
 2004 004a 7B69     		ldr	r3, [r7, #20]
 2005 004c 1B69     		ldr	r3, [r3, #16]
 2006 004e DBB2     		uxtb	r3, r3
 2007 0050 3B74     		strb	r3, [r7, #16]
 689:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2008              		.loc 1 689 0
 2009 0052 7B69     		ldr	r3, [r7, #20]
 2010 0054 DB68     		ldr	r3, [r3, #12]
 2011 0056 DBB2     		uxtb	r3, r3
 2012 0058 3B73     		strb	r3, [r7, #12]
 690:notoriOS.c    **** 
 691:notoriOS.c    ****     // Writes time and date values as current time and date.
 692:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2013              		.loc 1 692 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 51


 2014 005a 07F10803 		add	r3, r7, #8
 2015 005e 1846     		mov	r0, r3
 2016 0060 FFF7FEFF 		bl	RTC_WriteTime
 693:notoriOS.c    ****     
 694:notoriOS.c    ****     // Return 1 when the system time was set properly.
 695:notoriOS.c    ****     return 1;
 2017              		.loc 1 695 0
 2018 0064 0123     		movs	r3, #1
 2019              	.L71:
 696:notoriOS.c    **** }
 2020              		.loc 1 696 0
 2021 0066 1846     		mov	r0, r3
 2022 0068 1837     		adds	r7, r7, #24
 2023              		.cfi_def_cfa_offset 8
 2024 006a BD46     		mov	sp, r7
 2025              		.cfi_def_cfa_register 13
 2026              		@ sp needed
 2027 006c 80BD     		pop	{r7, pc}
 2028              	.L73:
 2029 006e 00BF     		.align	2
 2030              	.L72:
 2031 0070 B4030000 		.word	.LC54
 2032              		.cfi_endproc
 2033              	.LFE77:
 2034              		.size	setTime, .-setTime
 2035              		.section	.rodata
 2036 03cf 00       		.align	2
 2037              	.LC55:
 2038 03d0 75706772 		.ascii	"upgrade.hex\000"
 2038      6164652E 
 2038      68657800 
 2039              		.section	.text.upgraded,"ax",%progbits
 2040              		.align	2
 2041              		.global	upgraded
 2042              		.thumb
 2043              		.thumb_func
 2044              		.type	upgraded, %function
 2045              	upgraded:
 2046              	.LFB78:
 697:notoriOS.c    **** 
 698:notoriOS.c    **** //downloads and stores files on SD card
 699:notoriOS.c    **** 
 700:notoriOS.c    **** 
 701:notoriOS.c    **** 
 702:notoriOS.c    **** // ==============================================
 703:notoriOS.c    **** // Will they love it, will they hate it
 704:notoriOS.c    **** // Never fade it, I evade it
 705:notoriOS.c    **** // Cause I never really want to complicate it
 706:notoriOS.c    **** //      - Logic, Upgraded (2015)
 707:notoriOS.c    **** //
 708:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 709:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 710:notoriOS.c    **** // ==============================================
 711:notoriOS.c    **** 
 712:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2047              		.loc 1 712 0
 2048              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 52


 2049              		@ args = 0, pretend = 0, frame = 232
 2050              		@ frame_needed = 1, uses_anonymous_args = 0
 2051 0000 80B5     		push	{r7, lr}
 2052              		.cfi_def_cfa_offset 8
 2053              		.cfi_offset 7, -8
 2054              		.cfi_offset 14, -4
 2055 0002 C0B0     		sub	sp, sp, #256
 2056              		.cfi_def_cfa_offset 264
 2057 0004 06AF     		add	r7, sp, #24
 2058              		.cfi_def_cfa 7, 240
 2059 0006 F860     		str	r0, [r7, #12]
 2060 0008 B960     		str	r1, [r7, #8]
 2061 000a 7A60     		str	r2, [r7, #4]
 713:notoriOS.c    ****     
 714:notoriOS.c    ****     uint8 upgrade_status = 0;
 2062              		.loc 1 714 0
 2063 000c 0023     		movs	r3, #0
 2064 000e 87F8E730 		strb	r3, [r7, #231]
 715:notoriOS.c    ****     
 716:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 717:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2065              		.loc 1 717 0
 2066 0012 384B     		ldr	r3, .L78
 2067 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2068 0016 042B     		cmp	r3, #4
 2069 0018 02D0     		beq	.L75
 718:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2070              		.loc 1 718 0
 2071 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2072 001e 65E0     		b	.L77
 2073              	.L75:
 719:notoriOS.c    ****     }
 720:notoriOS.c    ****     
 721:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2074              		.loc 1 721 0
 2075 0020 354A     		ldr	r2, .L78+4
 2076 0022 07F1D803 		add	r3, r7, #216
 2077 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2078 0028 83E80700 		stmia	r3, {r0, r1, r2}
 722:notoriOS.c    ****     //delete file, if one exisits already
 723:notoriOS.c    ****     SD_rmfile(fileName);
 2079              		.loc 1 723 0
 2080 002c 07F1D803 		add	r3, r7, #216
 2081 0030 1846     		mov	r0, r3
 2082 0032 FFF7FEFF 		bl	SD_rmfile
 724:notoriOS.c    ****     
 725:notoriOS.c    ****     // Create http request
 726:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2083              		.loc 1 726 0
 2084 0036 314B     		ldr	r3, .L78+8
 2085 0038 0593     		str	r3, [sp, #20]
 2086 003a 0023     		movs	r3, #0
 2087 003c 0493     		str	r3, [sp, #16]
 2088 003e 304B     		ldr	r3, .L78+12
 2089 0040 0393     		str	r3, [sp, #12]
 2090 0042 304B     		ldr	r3, .L78+16
 2091 0044 0293     		str	r3, [sp, #8]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 53


 2092 0046 304B     		ldr	r3, .L78+20
 2093 0048 0193     		str	r3, [sp, #4]
 2094 004a BB68     		ldr	r3, [r7, #8]
 2095 004c 0093     		str	r3, [sp]
 2096 004e 7B68     		ldr	r3, [r7, #4]
 2097 0050 FA68     		ldr	r2, [r7, #12]
 2098 0052 2E49     		ldr	r1, .L78+24
 2099 0054 2E48     		ldr	r0, .L78+28
 2100 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 727:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2101              		.loc 1 727 0
 2102 005a 2D4A     		ldr	r2, .L78+28
 2103 005c 2D49     		ldr	r1, .L78+32
 2104 005e 0020     		movs	r0, #0
 2105 0060 FFF7FEFF 		bl	printNotif
 728:notoriOS.c    ****     // Create array portConfig of size 200 characters
 729:notoriOS.c    ****     char portConfig[200];
 730:notoriOS.c    ****     // Print port configurations
 731:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2106              		.loc 1 731 0
 2107 0064 07F11000 		add	r0, r7, #16
 2108 0068 FB68     		ldr	r3, [r7, #12]
 2109 006a 0093     		str	r3, [sp]
 2110 006c BB68     		ldr	r3, [r7, #8]
 2111 006e 2A4A     		ldr	r2, .L78+36
 2112 0070 C821     		movs	r1, #200
 2113 0072 FFF7FEFF 		bl	snprintf
 732:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2114              		.loc 1 732 0
 2115 0076 07F11003 		add	r3, r7, #16
 2116 007a 1A46     		mov	r2, r3
 2117 007c 2749     		ldr	r1, .L78+40
 2118 007e 0020     		movs	r0, #0
 2119 0080 FFF7FEFF 		bl	printNotif
 733:notoriOS.c    ****     // AT command to configure the port
 734:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2120              		.loc 1 734 0
 2121 0084 07F11003 		add	r3, r7, #16
 2122 0088 42F21072 		movw	r2, #10000
 2123 008c 2449     		ldr	r1, .L78+44
 2124 008e 1846     		mov	r0, r3
 2125 0090 FFF7FEFF 		bl	at_write_command
 2126 0094 0346     		mov	r3, r0
 2127 0096 87F8E730 		strb	r3, [r7, #231]
 735:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 736:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 737:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2128              		.loc 1 737 0
 2129 009a 4FF47A72 		mov	r2, #1000
 2130 009e 2149     		ldr	r1, .L78+48
 2131 00a0 2148     		ldr	r0, .L78+52
 2132 00a2 FFF7FEFF 		bl	at_write_command
 2133 00a6 0346     		mov	r3, r0
 2134 00a8 87F8E730 		strb	r3, [r7, #231]
 738:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 739:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2135              		.loc 1 739 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 54


 2136 00ac 1848     		ldr	r0, .L78+28
 2137 00ae FFF7FEFF 		bl	strlen
 2138 00b2 0346     		mov	r3, r0
 2139 00b4 1A46     		mov	r2, r3
 2140 00b6 164B     		ldr	r3, .L78+28
 2141 00b8 1344     		add	r3, r3, r2
 2142 00ba 1C49     		ldr	r1, .L78+56
 2143 00bc 1A46     		mov	r2, r3
 2144 00be 0B46     		mov	r3, r1
 2145 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2146 00c2 1380     		strh	r3, [r2]	@ unaligned
 740:notoriOS.c    ****     // AT command to send http request
 741:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2147              		.loc 1 741 0
 2148 00c4 41F28832 		movw	r2, #5000
 2149 00c8 1549     		ldr	r1, .L78+44
 2150 00ca 1148     		ldr	r0, .L78+28
 2151 00cc FFF7FEFF 		bl	at_write_command
 2152 00d0 0346     		mov	r3, r0
 2153 00d2 87F8E730 		strb	r3, [r7, #231]
 742:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 743:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 744:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2154              		.loc 1 744 0
 2155 00d6 41F28832 		movw	r2, #5000
 2156 00da 1549     		ldr	r1, .L78+60
 2157 00dc 1548     		ldr	r0, .L78+64
 2158 00de FFF7FEFF 		bl	at_write_command
 2159 00e2 0346     		mov	r3, r0
 2160 00e4 87F8E730 		strb	r3, [r7, #231]
 745:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 746:notoriOS.c    ****     
 747:notoriOS.c    ****     
 748:notoriOS.c    ****     return upgrade_status;
 2161              		.loc 1 748 0
 2162 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2163              	.L77:
 749:notoriOS.c    ****     
 750:notoriOS.c    **** }
 2164              		.loc 1 750 0 discriminator 1
 2165 00ec 1846     		mov	r0, r3
 2166 00ee E837     		adds	r7, r7, #232
 2167              		.cfi_def_cfa_offset 8
 2168 00f0 BD46     		mov	sp, r7
 2169              		.cfi_def_cfa_register 13
 2170              		@ sp needed
 2171 00f2 80BD     		pop	{r7, pc}
 2172              	.L79:
 2173              		.align	2
 2174              	.L78:
 2175 00f4 00000000 		.word	modem_state
 2176 00f8 D0030000 		.word	.LC55
 2177 00fc 68010000 		.word	.LC16
 2178 0100 6C010000 		.word	.LC17
 2179 0104 70010000 		.word	.LC18
 2180 0108 78010000 		.word	.LC19
 2181 010c 00000000 		.word	http_body
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 55


 2182 0110 00000000 		.word	http_request
 2183 0114 80010000 		.word	.LC20
 2184 0118 98010000 		.word	.LC21
 2185 011c B4010000 		.word	.LC22
 2186 0120 B8010000 		.word	.LC23
 2187 0124 E8010000 		.word	.LC26
 2188 0128 EC010000 		.word	.LC27
 2189 012c FC010000 		.word	.LC28
 2190 0130 18020000 		.word	.LC31
 2191 0134 20020000 		.word	.LC32
 2192              		.cfi_endproc
 2193              	.LFE78:
 2194              		.size	upgraded, .-upgraded
 2195              		.text
 2196              	.Letext0:
 2197              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2198              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2199              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2200              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2201              		.file 6 "testing.h"
 2202              		.file 7 "level_sensor.h"
 2203              		.file 8 "voltages.h"
 2204              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2205              		.file 10 "data.h"
 2206              		.file 11 "modem.h"
 2207              		.file 12 "notoriOS.h"
 2208              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2209              		.file 14 "App_LED.h"
 2210              		.section	.debug_info,"",%progbits
 2211              	.Ldebug_info0:
 2212 0000 D60C0000 		.4byte	0xcd6
 2213 0004 0400     		.2byte	0x4
 2214 0006 00000000 		.4byte	.Ldebug_abbrev0
 2215 000a 04       		.byte	0x4
 2216 000b 01       		.uleb128 0x1
 2217 000c AC000000 		.4byte	.LASF171
 2218 0010 0C       		.byte	0xc
 2219 0011 5A080000 		.4byte	.LASF172
 2220 0015 2C000000 		.4byte	.LASF173
 2221 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2222 001d 00000000 		.4byte	0
 2223 0021 00000000 		.4byte	.Ldebug_line0
 2224 0025 02       		.uleb128 0x2
 2225 0026 01       		.byte	0x1
 2226 0027 06       		.byte	0x6
 2227 0028 7D000000 		.4byte	.LASF0
 2228 002c 02       		.uleb128 0x2
 2229 002d 01       		.byte	0x1
 2230 002e 08       		.byte	0x8
 2231 002f 12060000 		.4byte	.LASF1
 2232 0033 02       		.uleb128 0x2
 2233 0034 02       		.byte	0x2
 2234 0035 05       		.byte	0x5
 2235 0036 79040000 		.4byte	.LASF2
 2236 003a 02       		.uleb128 0x2
 2237 003b 02       		.byte	0x2
 2238 003c 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 56


 2239 003d D0070000 		.4byte	.LASF3
 2240 0041 03       		.uleb128 0x3
 2241 0042 98070000 		.4byte	.LASF9
 2242 0046 02       		.byte	0x2
 2243 0047 3F       		.byte	0x3f
 2244 0048 4C000000 		.4byte	0x4c
 2245 004c 02       		.uleb128 0x2
 2246 004d 04       		.byte	0x4
 2247 004e 05       		.byte	0x5
 2248 004f 53020000 		.4byte	.LASF4
 2249 0053 02       		.uleb128 0x2
 2250 0054 04       		.byte	0x4
 2251 0055 07       		.byte	0x7
 2252 0056 B6030000 		.4byte	.LASF5
 2253 005a 02       		.uleb128 0x2
 2254 005b 08       		.byte	0x8
 2255 005c 05       		.byte	0x5
 2256 005d AE010000 		.4byte	.LASF6
 2257 0061 02       		.uleb128 0x2
 2258 0062 08       		.byte	0x8
 2259 0063 07       		.byte	0x7
 2260 0064 4B010000 		.4byte	.LASF7
 2261 0068 04       		.uleb128 0x4
 2262 0069 04       		.byte	0x4
 2263 006a 05       		.byte	0x5
 2264 006b 696E7400 		.ascii	"int\000"
 2265 006f 02       		.uleb128 0x2
 2266 0070 04       		.byte	0x4
 2267 0071 07       		.byte	0x7
 2268 0072 69070000 		.4byte	.LASF8
 2269 0076 03       		.uleb128 0x3
 2270 0077 0A060000 		.4byte	.LASF10
 2271 007b 03       		.byte	0x3
 2272 007c 2C       		.byte	0x2c
 2273 007d 41000000 		.4byte	0x41
 2274 0081 05       		.uleb128 0x5
 2275 0082 8A020000 		.4byte	.LASF11
 2276 0086 04       		.byte	0x4
 2277 0087 9201     		.2byte	0x192
 2278 0089 2C000000 		.4byte	0x2c
 2279 008d 05       		.uleb128 0x5
 2280 008e 08000000 		.4byte	.LASF12
 2281 0092 04       		.byte	0x4
 2282 0093 9301     		.2byte	0x193
 2283 0095 3A000000 		.4byte	0x3a
 2284 0099 05       		.uleb128 0x5
 2285 009a DB020000 		.4byte	.LASF13
 2286 009e 04       		.byte	0x4
 2287 009f 9401     		.2byte	0x194
 2288 00a1 53000000 		.4byte	0x53
 2289 00a5 05       		.uleb128 0x5
 2290 00a6 3C040000 		.4byte	.LASF14
 2291 00aa 04       		.byte	0x4
 2292 00ab 9501     		.2byte	0x195
 2293 00ad 25000000 		.4byte	0x25
 2294 00b1 05       		.uleb128 0x5
 2295 00b2 6F080000 		.4byte	.LASF15
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 57


 2296 00b6 04       		.byte	0x4
 2297 00b7 9601     		.2byte	0x196
 2298 00b9 33000000 		.4byte	0x33
 2299 00bd 05       		.uleb128 0x5
 2300 00be B5020000 		.4byte	.LASF16
 2301 00c2 04       		.byte	0x4
 2302 00c3 9701     		.2byte	0x197
 2303 00c5 4C000000 		.4byte	0x4c
 2304 00c9 02       		.uleb128 0x2
 2305 00ca 04       		.byte	0x4
 2306 00cb 04       		.byte	0x4
 2307 00cc A8050000 		.4byte	.LASF17
 2308 00d0 02       		.uleb128 0x2
 2309 00d1 08       		.byte	0x8
 2310 00d2 04       		.byte	0x4
 2311 00d3 ED080000 		.4byte	.LASF18
 2312 00d7 02       		.uleb128 0x2
 2313 00d8 01       		.byte	0x1
 2314 00d9 08       		.byte	0x8
 2315 00da 64070000 		.4byte	.LASF19
 2316 00de 02       		.uleb128 0x2
 2317 00df 08       		.byte	0x8
 2318 00e0 04       		.byte	0x4
 2319 00e1 46070000 		.4byte	.LASF20
 2320 00e5 02       		.uleb128 0x2
 2321 00e6 04       		.byte	0x4
 2322 00e7 07       		.byte	0x7
 2323 00e8 02050000 		.4byte	.LASF21
 2324 00ec 06       		.uleb128 0x6
 2325 00ed 04       		.byte	0x4
 2326 00ee D7000000 		.4byte	0xd7
 2327 00f2 07       		.uleb128 0x7
 2328 00f3 D7000000 		.4byte	0xd7
 2329 00f7 02010000 		.4byte	0x102
 2330 00fb 08       		.uleb128 0x8
 2331 00fc E5000000 		.4byte	0xe5
 2332 0100 17       		.byte	0x17
 2333 0101 00       		.byte	0
 2334 0102 09       		.uleb128 0x9
 2335 0103 0C       		.byte	0xc
 2336 0104 05       		.byte	0x5
 2337 0105 30       		.byte	0x30
 2338 0106 6B010000 		.4byte	0x16b
 2339 010a 0A       		.uleb128 0xa
 2340 010b 53656300 		.ascii	"Sec\000"
 2341 010f 05       		.byte	0x5
 2342 0110 32       		.byte	0x32
 2343 0111 81000000 		.4byte	0x81
 2344 0115 00       		.byte	0
 2345 0116 0A       		.uleb128 0xa
 2346 0117 4D696E00 		.ascii	"Min\000"
 2347 011b 05       		.byte	0x5
 2348 011c 33       		.byte	0x33
 2349 011d 81000000 		.4byte	0x81
 2350 0121 01       		.byte	0x1
 2351 0122 0B       		.uleb128 0xb
 2352 0123 62010000 		.4byte	.LASF22
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 58


 2353 0127 05       		.byte	0x5
 2354 0128 34       		.byte	0x34
 2355 0129 81000000 		.4byte	0x81
 2356 012d 02       		.byte	0x2
 2357 012e 0B       		.uleb128 0xb
 2358 012f 6F060000 		.4byte	.LASF23
 2359 0133 05       		.byte	0x5
 2360 0134 35       		.byte	0x35
 2361 0135 81000000 		.4byte	0x81
 2362 0139 03       		.byte	0x3
 2363 013a 0B       		.uleb128 0xb
 2364 013b F7030000 		.4byte	.LASF24
 2365 013f 05       		.byte	0x5
 2366 0140 36       		.byte	0x36
 2367 0141 81000000 		.4byte	0x81
 2368 0145 04       		.byte	0x4
 2369 0146 0B       		.uleb128 0xb
 2370 0147 A2080000 		.4byte	.LASF25
 2371 014b 05       		.byte	0x5
 2372 014c 37       		.byte	0x37
 2373 014d 8D000000 		.4byte	0x8d
 2374 0151 06       		.byte	0x6
 2375 0152 0B       		.uleb128 0xb
 2376 0153 45010000 		.4byte	.LASF26
 2377 0157 05       		.byte	0x5
 2378 0158 38       		.byte	0x38
 2379 0159 81000000 		.4byte	0x81
 2380 015d 08       		.byte	0x8
 2381 015e 0B       		.uleb128 0xb
 2382 015f FF050000 		.4byte	.LASF27
 2383 0163 05       		.byte	0x5
 2384 0164 39       		.byte	0x39
 2385 0165 8D000000 		.4byte	0x8d
 2386 0169 0A       		.byte	0xa
 2387 016a 00       		.byte	0
 2388 016b 03       		.uleb128 0x3
 2389 016c 4D050000 		.4byte	.LASF28
 2390 0170 05       		.byte	0x5
 2391 0171 3A       		.byte	0x3a
 2392 0172 76010000 		.4byte	0x176
 2393 0176 0C       		.uleb128 0xc
 2394 0177 02010000 		.4byte	0x102
 2395 017b 0D       		.uleb128 0xd
 2396 017c 8101     		.2byte	0x181
 2397 017e 06       		.byte	0x6
 2398 017f 0A       		.byte	0xa
 2399 0180 A9010000 		.4byte	0x1a9
 2400 0184 0B       		.uleb128 0xb
 2401 0185 F5050000 		.4byte	.LASF29
 2402 0189 06       		.byte	0x6
 2403 018a 0C       		.byte	0xc
 2404 018b A9010000 		.4byte	0x1a9
 2405 018f 00       		.byte	0
 2406 0190 0B       		.uleb128 0xb
 2407 0191 0D080000 		.4byte	.LASF30
 2408 0195 06       		.byte	0x6
 2409 0196 0D       		.byte	0xd
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 59


 2410 0197 81000000 		.4byte	0x81
 2411 019b 80       		.byte	0x80
 2412 019c 0B       		.uleb128 0xb
 2413 019d 91060000 		.4byte	.LASF31
 2414 01a1 06       		.byte	0x6
 2415 01a2 0F       		.byte	0xf
 2416 01a3 B9010000 		.4byte	0x1b9
 2417 01a7 81       		.byte	0x81
 2418 01a8 00       		.byte	0
 2419 01a9 07       		.uleb128 0x7
 2420 01aa D7000000 		.4byte	0xd7
 2421 01ae B9010000 		.4byte	0x1b9
 2422 01b2 08       		.uleb128 0x8
 2423 01b3 E5000000 		.4byte	0xe5
 2424 01b7 7F       		.byte	0x7f
 2425 01b8 00       		.byte	0
 2426 01b9 07       		.uleb128 0x7
 2427 01ba D7000000 		.4byte	0xd7
 2428 01be C9010000 		.4byte	0x1c9
 2429 01c2 08       		.uleb128 0x8
 2430 01c3 E5000000 		.4byte	0xe5
 2431 01c7 FF       		.byte	0xff
 2432 01c8 00       		.byte	0
 2433 01c9 03       		.uleb128 0x3
 2434 01ca 79060000 		.4byte	.LASF32
 2435 01ce 06       		.byte	0x6
 2436 01cf 10       		.byte	0x10
 2437 01d0 7B010000 		.4byte	0x17b
 2438 01d4 09       		.uleb128 0x9
 2439 01d5 1A       		.byte	0x1a
 2440 01d6 07       		.byte	0x7
 2441 01d7 10       		.byte	0x10
 2442 01d8 0D020000 		.4byte	0x20d
 2443 01dc 0B       		.uleb128 0xb
 2444 01dd EB020000 		.4byte	.LASF33
 2445 01e1 07       		.byte	0x7
 2446 01e2 11       		.byte	0x11
 2447 01e3 0D020000 		.4byte	0x20d
 2448 01e7 00       		.byte	0
 2449 01e8 0B       		.uleb128 0xb
 2450 01e9 BA070000 		.4byte	.LASF34
 2451 01ed 07       		.byte	0x7
 2452 01ee 12       		.byte	0x12
 2453 01ef B1000000 		.4byte	0xb1
 2454 01f3 16       		.byte	0x16
 2455 01f4 0B       		.uleb128 0xb
 2456 01f5 8E030000 		.4byte	.LASF35
 2457 01f9 07       		.byte	0x7
 2458 01fa 13       		.byte	0x13
 2459 01fb 81000000 		.4byte	0x81
 2460 01ff 18       		.byte	0x18
 2461 0200 0B       		.uleb128 0xb
 2462 0201 17000000 		.4byte	.LASF36
 2463 0205 07       		.byte	0x7
 2464 0206 14       		.byte	0x14
 2465 0207 81000000 		.4byte	0x81
 2466 020b 19       		.byte	0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 60


 2467 020c 00       		.byte	0
 2468 020d 07       		.uleb128 0x7
 2469 020e B1000000 		.4byte	0xb1
 2470 0212 1D020000 		.4byte	0x21d
 2471 0216 08       		.uleb128 0x8
 2472 0217 E5000000 		.4byte	0xe5
 2473 021b 0A       		.byte	0xa
 2474 021c 00       		.byte	0
 2475 021d 03       		.uleb128 0x3
 2476 021e AE050000 		.4byte	.LASF37
 2477 0222 07       		.byte	0x7
 2478 0223 15       		.byte	0x15
 2479 0224 D4010000 		.4byte	0x1d4
 2480 0228 09       		.uleb128 0x9
 2481 0229 14       		.byte	0x14
 2482 022a 08       		.byte	0x8
 2483 022b 11       		.byte	0x11
 2484 022c 6D020000 		.4byte	0x26d
 2485 0230 0B       		.uleb128 0xb
 2486 0231 E7030000 		.4byte	.LASF38
 2487 0235 08       		.byte	0x8
 2488 0236 12       		.byte	0x12
 2489 0237 C9000000 		.4byte	0xc9
 2490 023b 00       		.byte	0
 2491 023c 0B       		.uleb128 0xb
 2492 023d FA010000 		.4byte	.LASF39
 2493 0241 08       		.byte	0x8
 2494 0242 13       		.byte	0x13
 2495 0243 C9000000 		.4byte	0xc9
 2496 0247 04       		.byte	0x4
 2497 0248 0B       		.uleb128 0xb
 2498 0249 08020000 		.4byte	.LASF40
 2499 024d 08       		.byte	0x8
 2500 024e 14       		.byte	0x14
 2501 024f C9000000 		.4byte	0xc9
 2502 0253 08       		.byte	0x8
 2503 0254 0B       		.uleb128 0xb
 2504 0255 8A050000 		.4byte	.LASF41
 2505 0259 08       		.byte	0x8
 2506 025a 15       		.byte	0x15
 2507 025b C9000000 		.4byte	0xc9
 2508 025f 0C       		.byte	0xc
 2509 0260 0B       		.uleb128 0xb
 2510 0261 02070000 		.4byte	.LASF42
 2511 0265 08       		.byte	0x8
 2512 0266 16       		.byte	0x16
 2513 0267 81000000 		.4byte	0x81
 2514 026b 10       		.byte	0x10
 2515 026c 00       		.byte	0
 2516 026d 03       		.uleb128 0x3
 2517 026e 02090000 		.4byte	.LASF43
 2518 0272 08       		.byte	0x8
 2519 0273 17       		.byte	0x17
 2520 0274 28020000 		.4byte	0x228
 2521 0278 09       		.uleb128 0x9
 2522 0279 10       		.byte	0x10
 2523 027a 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 61


 2524 027b 19       		.byte	0x19
 2525 027c B1020000 		.4byte	0x2b1
 2526 0280 0B       		.uleb128 0xb
 2527 0281 4B030000 		.4byte	.LASF44
 2528 0285 08       		.byte	0x8
 2529 0286 1A       		.byte	0x1a
 2530 0287 C9000000 		.4byte	0xc9
 2531 028b 00       		.byte	0
 2532 028c 0B       		.uleb128 0xb
 2533 028d 75020000 		.4byte	.LASF45
 2534 0291 08       		.byte	0x8
 2535 0292 1B       		.byte	0x1b
 2536 0293 C9000000 		.4byte	0xc9
 2537 0297 04       		.byte	0x4
 2538 0298 0B       		.uleb128 0xb
 2539 0299 F1060000 		.4byte	.LASF46
 2540 029d 08       		.byte	0x8
 2541 029e 1C       		.byte	0x1c
 2542 029f C9000000 		.4byte	0xc9
 2543 02a3 08       		.byte	0x8
 2544 02a4 0B       		.uleb128 0xb
 2545 02a5 5B060000 		.4byte	.LASF47
 2546 02a9 08       		.byte	0x8
 2547 02aa 1D       		.byte	0x1d
 2548 02ab C9000000 		.4byte	0xc9
 2549 02af 0C       		.byte	0xc
 2550 02b0 00       		.byte	0
 2551 02b1 03       		.uleb128 0x3
 2552 02b2 AC080000 		.4byte	.LASF48
 2553 02b6 08       		.byte	0x8
 2554 02b7 1E       		.byte	0x1e
 2555 02b8 78020000 		.4byte	0x278
 2556 02bc 0E       		.uleb128 0xe
 2557 02bd 746D00   		.ascii	"tm\000"
 2558 02c0 24       		.byte	0x24
 2559 02c1 09       		.byte	0x9
 2560 02c2 21       		.byte	0x21
 2561 02c3 34030000 		.4byte	0x334
 2562 02c7 0B       		.uleb128 0xb
 2563 02c8 FB070000 		.4byte	.LASF49
 2564 02cc 09       		.byte	0x9
 2565 02cd 23       		.byte	0x23
 2566 02ce 68000000 		.4byte	0x68
 2567 02d2 00       		.byte	0
 2568 02d3 0B       		.uleb128 0xb
 2569 02d4 E4040000 		.4byte	.LASF50
 2570 02d8 09       		.byte	0x9
 2571 02d9 24       		.byte	0x24
 2572 02da 68000000 		.4byte	0x68
 2573 02de 04       		.byte	0x4
 2574 02df 0B       		.uleb128 0xb
 2575 02e0 0F000000 		.4byte	.LASF51
 2576 02e4 09       		.byte	0x9
 2577 02e5 25       		.byte	0x25
 2578 02e6 68000000 		.4byte	0x68
 2579 02ea 08       		.byte	0x8
 2580 02eb 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 62


 2581 02ec EA070000 		.4byte	.LASF52
 2582 02f0 09       		.byte	0x9
 2583 02f1 26       		.byte	0x26
 2584 02f2 68000000 		.4byte	0x68
 2585 02f6 0C       		.byte	0xc
 2586 02f7 0B       		.uleb128 0xb
 2587 02f8 16030000 		.4byte	.LASF53
 2588 02fc 09       		.byte	0x9
 2589 02fd 27       		.byte	0x27
 2590 02fe 68000000 		.4byte	0x68
 2591 0302 10       		.byte	0x10
 2592 0303 0B       		.uleb128 0xb
 2593 0304 39030000 		.4byte	.LASF54
 2594 0308 09       		.byte	0x9
 2595 0309 28       		.byte	0x28
 2596 030a 68000000 		.4byte	0x68
 2597 030e 14       		.byte	0x14
 2598 030f 0B       		.uleb128 0xb
 2599 0310 19070000 		.4byte	.LASF55
 2600 0314 09       		.byte	0x9
 2601 0315 29       		.byte	0x29
 2602 0316 68000000 		.4byte	0x68
 2603 031a 18       		.byte	0x18
 2604 031b 0B       		.uleb128 0xb
 2605 031c 0B050000 		.4byte	.LASF56
 2606 0320 09       		.byte	0x9
 2607 0321 2A       		.byte	0x2a
 2608 0322 68000000 		.4byte	0x68
 2609 0326 1C       		.byte	0x1c
 2610 0327 0B       		.uleb128 0xb
 2611 0328 20040000 		.4byte	.LASF57
 2612 032c 09       		.byte	0x9
 2613 032d 2B       		.byte	0x2b
 2614 032e 68000000 		.4byte	0x68
 2615 0332 20       		.byte	0x20
 2616 0333 00       		.byte	0
 2617 0334 09       		.uleb128 0x9
 2618 0335 2C       		.byte	0x2c
 2619 0336 0A       		.byte	0xa
 2620 0337 14       		.byte	0x14
 2621 0338 61030000 		.4byte	0x361
 2622 033c 0A       		.uleb128 0xa
 2623 033d 6B657900 		.ascii	"key\000"
 2624 0341 0A       		.byte	0xa
 2625 0342 15       		.byte	0x15
 2626 0343 61030000 		.4byte	0x361
 2627 0347 00       		.byte	0
 2628 0348 0B       		.uleb128 0xb
 2629 0349 2E030000 		.4byte	.LASF58
 2630 034d 0A       		.byte	0xa
 2631 034e 16       		.byte	0x16
 2632 034f 61030000 		.4byte	0x361
 2633 0353 14       		.byte	0x14
 2634 0354 0B       		.uleb128 0xb
 2635 0355 43050000 		.4byte	.LASF59
 2636 0359 0A       		.byte	0xa
 2637 035a 17       		.byte	0x17
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 63


 2638 035b BD000000 		.4byte	0xbd
 2639 035f 28       		.byte	0x28
 2640 0360 00       		.byte	0
 2641 0361 07       		.uleb128 0x7
 2642 0362 D7000000 		.4byte	0xd7
 2643 0366 71030000 		.4byte	0x371
 2644 036a 08       		.uleb128 0x8
 2645 036b E5000000 		.4byte	0xe5
 2646 036f 13       		.byte	0x13
 2647 0370 00       		.byte	0
 2648 0371 03       		.uleb128 0x3
 2649 0372 77030000 		.4byte	.LASF60
 2650 0376 0A       		.byte	0xa
 2651 0377 19       		.byte	0x19
 2652 0378 34030000 		.4byte	0x334
 2653 037c 09       		.uleb128 0x9
 2654 037d 3C       		.byte	0x3c
 2655 037e 0B       		.byte	0xb
 2656 037f 36       		.byte	0x36
 2657 0380 A9030000 		.4byte	0x3a9
 2658 0384 0B       		.uleb128 0xb
 2659 0385 E3070000 		.4byte	.LASF61
 2660 0389 0B       		.byte	0xb
 2661 038a 37       		.byte	0x37
 2662 038b 61030000 		.4byte	0x361
 2663 038f 00       		.byte	0
 2664 0390 0B       		.uleb128 0xb
 2665 0391 E2020000 		.4byte	.LASF62
 2666 0395 0B       		.byte	0xb
 2667 0396 38       		.byte	0x38
 2668 0397 61030000 		.4byte	0x361
 2669 039b 14       		.byte	0x14
 2670 039c 0B       		.uleb128 0xb
 2671 039d 8C060000 		.4byte	.LASF63
 2672 03a1 0B       		.byte	0xb
 2673 03a2 39       		.byte	0x39
 2674 03a3 61030000 		.4byte	0x361
 2675 03a7 28       		.byte	0x28
 2676 03a8 00       		.byte	0
 2677 03a9 03       		.uleb128 0x3
 2678 03aa 40020000 		.4byte	.LASF64
 2679 03ae 0B       		.byte	0xb
 2680 03af 3B       		.byte	0x3b
 2681 03b0 7C030000 		.4byte	0x37c
 2682 03b4 09       		.uleb128 0x9
 2683 03b5 20       		.byte	0x20
 2684 03b6 0B       		.byte	0xb
 2685 03b7 3D       		.byte	0x3d
 2686 03b8 1D040000 		.4byte	0x41d
 2687 03bc 0B       		.uleb128 0xb
 2688 03bd 4D020000 		.4byte	.LASF65
 2689 03c1 0B       		.byte	0xb
 2690 03c2 3E       		.byte	0x3e
 2691 03c3 68000000 		.4byte	0x68
 2692 03c7 00       		.byte	0
 2693 03c8 0A       		.uleb128 0xa
 2694 03c9 62657200 		.ascii	"ber\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 64


 2695 03cd 0B       		.byte	0xb
 2696 03ce 3F       		.byte	0x3f
 2697 03cf 68000000 		.4byte	0x68
 2698 03d3 04       		.byte	0x4
 2699 03d4 0B       		.uleb128 0xb
 2700 03d5 6A060000 		.4byte	.LASF66
 2701 03d9 0B       		.byte	0xb
 2702 03da 40       		.byte	0x40
 2703 03db 68000000 		.4byte	0x68
 2704 03df 08       		.byte	0x8
 2705 03e0 0B       		.uleb128 0xb
 2706 03e1 C4010000 		.4byte	.LASF67
 2707 03e5 0B       		.byte	0xb
 2708 03e6 41       		.byte	0x41
 2709 03e7 68000000 		.4byte	0x68
 2710 03eb 0C       		.byte	0xc
 2711 03ec 0B       		.uleb128 0xb
 2712 03ed 35060000 		.4byte	.LASF68
 2713 03f1 0B       		.byte	0xb
 2714 03f2 42       		.byte	0x42
 2715 03f3 68000000 		.4byte	0x68
 2716 03f7 10       		.byte	0x10
 2717 03f8 0B       		.uleb128 0xb
 2718 03f9 30060000 		.4byte	.LASF69
 2719 03fd 0B       		.byte	0xb
 2720 03fe 43       		.byte	0x43
 2721 03ff 68000000 		.4byte	0x68
 2722 0403 14       		.byte	0x14
 2723 0404 0B       		.uleb128 0xb
 2724 0405 D7010000 		.4byte	.LASF70
 2725 0409 0B       		.byte	0xb
 2726 040a 44       		.byte	0x44
 2727 040b 68000000 		.4byte	0x68
 2728 040f 18       		.byte	0x18
 2729 0410 0B       		.uleb128 0xb
 2730 0411 5C020000 		.4byte	.LASF71
 2731 0415 0B       		.byte	0xb
 2732 0416 45       		.byte	0x45
 2733 0417 68000000 		.4byte	0x68
 2734 041b 1C       		.byte	0x1c
 2735 041c 00       		.byte	0
 2736 041d 03       		.uleb128 0x3
 2737 041e E3060000 		.4byte	.LASF72
 2738 0422 0B       		.byte	0xb
 2739 0423 47       		.byte	0x47
 2740 0424 B4030000 		.4byte	0x3b4
 2741 0428 09       		.uleb128 0x9
 2742 0429 07       		.byte	0x7
 2743 042a 0B       		.byte	0xb
 2744 042b 53       		.byte	0x53
 2745 042c 85040000 		.4byte	0x485
 2746 0430 0B       		.uleb128 0xb
 2747 0431 BB020000 		.4byte	.LASF73
 2748 0435 0B       		.byte	0xb
 2749 0436 55       		.byte	0x55
 2750 0437 81000000 		.4byte	0x81
 2751 043b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 65


 2752 043c 0B       		.uleb128 0xb
 2753 043d 99080000 		.4byte	.LASF74
 2754 0441 0B       		.byte	0xb
 2755 0442 57       		.byte	0x57
 2756 0443 85040000 		.4byte	0x485
 2757 0447 01       		.byte	0x1
 2758 0448 0B       		.uleb128 0xb
 2759 0449 E0080000 		.4byte	.LASF75
 2760 044d 0B       		.byte	0xb
 2761 044e 59       		.byte	0x59
 2762 044f 81000000 		.4byte	0x81
 2763 0453 02       		.byte	0x2
 2764 0454 0B       		.uleb128 0xb
 2765 0455 51060000 		.4byte	.LASF76
 2766 0459 0B       		.byte	0xb
 2767 045a 5B       		.byte	0x5b
 2768 045b 81000000 		.4byte	0x81
 2769 045f 03       		.byte	0x3
 2770 0460 0B       		.uleb128 0xb
 2771 0461 1D030000 		.4byte	.LASF77
 2772 0465 0B       		.byte	0xb
 2773 0466 5E       		.byte	0x5e
 2774 0467 81000000 		.4byte	0x81
 2775 046b 04       		.byte	0x4
 2776 046c 0B       		.uleb128 0xb
 2777 046d 42080000 		.4byte	.LASF78
 2778 0471 0B       		.byte	0xb
 2779 0472 63       		.byte	0x63
 2780 0473 81000000 		.4byte	0x81
 2781 0477 05       		.byte	0x5
 2782 0478 0B       		.uleb128 0xb
 2783 0479 21070000 		.4byte	.LASF79
 2784 047d 0B       		.byte	0xb
 2785 047e 65       		.byte	0x65
 2786 047f 81000000 		.4byte	0x81
 2787 0483 06       		.byte	0x6
 2788 0484 00       		.byte	0
 2789 0485 02       		.uleb128 0x2
 2790 0486 01       		.byte	0x1
 2791 0487 02       		.byte	0x2
 2792 0488 04060000 		.4byte	.LASF80
 2793 048c 03       		.uleb128 0x3
 2794 048d B1040000 		.4byte	.LASF81
 2795 0491 0B       		.byte	0xb
 2796 0492 67       		.byte	0x67
 2797 0493 28040000 		.4byte	0x428
 2798 0497 09       		.uleb128 0x9
 2799 0498 06       		.byte	0x6
 2800 0499 0C       		.byte	0xc
 2801 049a 2E       		.byte	0x2e
 2802 049b D0040000 		.4byte	0x4d0
 2803 049f 0B       		.uleb128 0xb
 2804 04a0 FE020000 		.4byte	.LASF82
 2805 04a4 0C       		.byte	0xc
 2806 04a5 30       		.byte	0x30
 2807 04a6 8D000000 		.4byte	0x8d
 2808 04aa 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 66


 2809 04ab 0B       		.uleb128 0xb
 2810 04ac 83080000 		.4byte	.LASF83
 2811 04b0 0C       		.byte	0xc
 2812 04b1 31       		.byte	0x31
 2813 04b2 B1000000 		.4byte	0xb1
 2814 04b6 02       		.byte	0x2
 2815 04b7 0B       		.uleb128 0xb
 2816 04b8 75080000 		.4byte	.LASF84
 2817 04bc 0C       		.byte	0xc
 2818 04bd 32       		.byte	0x32
 2819 04be 81000000 		.4byte	0x81
 2820 04c2 04       		.byte	0x4
 2821 04c3 0B       		.uleb128 0xb
 2822 04c4 89000000 		.4byte	.LASF85
 2823 04c8 0C       		.byte	0xc
 2824 04c9 33       		.byte	0x33
 2825 04ca 81000000 		.4byte	0x81
 2826 04ce 05       		.byte	0x5
 2827 04cf 00       		.byte	0
 2828 04d0 03       		.uleb128 0x3
 2829 04d1 6F020000 		.4byte	.LASF86
 2830 04d5 0C       		.byte	0xc
 2831 04d6 36       		.byte	0x36
 2832 04d7 DB040000 		.4byte	0x4db
 2833 04db 0C       		.uleb128 0xc
 2834 04dc 97040000 		.4byte	0x497
 2835 04e0 09       		.uleb128 0x9
 2836 04e1 1C       		.byte	0x1c
 2837 04e2 0C       		.byte	0xc
 2838 04e3 39       		.byte	0x39
 2839 04e4 01050000 		.4byte	0x501
 2840 04e8 0B       		.uleb128 0xb
 2841 04e9 29040000 		.4byte	.LASF87
 2842 04ed 0C       		.byte	0xc
 2843 04ee 3B       		.byte	0x3b
 2844 04ef 01050000 		.4byte	0x501
 2845 04f3 00       		.byte	0
 2846 04f4 0B       		.uleb128 0xb
 2847 04f5 D2080000 		.4byte	.LASF88
 2848 04f9 0C       		.byte	0xc
 2849 04fa 3C       		.byte	0x3c
 2850 04fb F2000000 		.4byte	0xf2
 2851 04ff 04       		.byte	0x4
 2852 0500 00       		.byte	0
 2853 0501 06       		.uleb128 0x6
 2854 0502 04       		.byte	0x4
 2855 0503 A9030000 		.4byte	0x3a9
 2856 0507 03       		.uleb128 0x3
 2857 0508 A6040000 		.4byte	.LASF89
 2858 050c 0C       		.byte	0xc
 2859 050d 3E       		.byte	0x3e
 2860 050e E0040000 		.4byte	0x4e0
 2861 0512 09       		.uleb128 0x9
 2862 0513 68       		.byte	0x68
 2863 0514 0C       		.byte	0xc
 2864 0515 44       		.byte	0x44
 2865 0516 33050000 		.4byte	0x533
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 67


 2866 051a 0B       		.uleb128 0xb
 2867 051b 34040000 		.4byte	.LASF90
 2868 051f 0C       		.byte	0xc
 2869 0520 49       		.byte	0x49
 2870 0521 33050000 		.4byte	0x533
 2871 0525 00       		.byte	0
 2872 0526 0B       		.uleb128 0xb
 2873 0527 18040000 		.4byte	.LASF91
 2874 052b 0C       		.byte	0xc
 2875 052c 4A       		.byte	0x4a
 2876 052d 68000000 		.4byte	0x68
 2877 0531 64       		.byte	0x64
 2878 0532 00       		.byte	0
 2879 0533 07       		.uleb128 0x7
 2880 0534 D7000000 		.4byte	0xd7
 2881 0538 43050000 		.4byte	0x543
 2882 053c 08       		.uleb128 0x8
 2883 053d E5000000 		.4byte	0xe5
 2884 0541 63       		.byte	0x63
 2885 0542 00       		.byte	0
 2886 0543 03       		.uleb128 0x3
 2887 0544 13050000 		.4byte	.LASF92
 2888 0548 0C       		.byte	0xc
 2889 0549 50       		.byte	0x50
 2890 054a 12050000 		.4byte	0x512
 2891 054e 0F       		.uleb128 0xf
 2892 054f A1000000 		.4byte	.LASF174
 2893 0553 01       		.byte	0x1
 2894 0554 14       		.byte	0x14
 2895 0555 00000000 		.4byte	.LFB64
 2896 0559 0C000000 		.4byte	.LFE64-.LFB64
 2897 055d 01       		.uleb128 0x1
 2898 055e 9C       		.byte	0x9c
 2899 055f 10       		.uleb128 0x10
 2900 0560 C2080000 		.4byte	.LASF105
 2901 0564 01       		.byte	0x1
 2902 0565 28       		.byte	0x28
 2903 0566 00000000 		.4byte	.LFB65
 2904 056a 58010000 		.4byte	.LFE65-.LFB65
 2905 056e 01       		.uleb128 0x1
 2906 056f 9C       		.byte	0x9c
 2907 0570 91050000 		.4byte	0x591
 2908 0574 11       		.uleb128 0x11
 2909 0575 A2070000 		.4byte	.LASF93
 2910 0579 01       		.byte	0x1
 2911 057a 3C       		.byte	0x3c
 2912 057b 91050000 		.4byte	0x591
 2913 057f 02       		.uleb128 0x2
 2914 0580 91       		.byte	0x91
 2915 0581 64       		.sleb128 -28
 2916 0582 11       		.uleb128 0x11
 2917 0583 C8030000 		.4byte	.LASF94
 2918 0587 01       		.byte	0x1
 2919 0588 64       		.byte	0x64
 2920 0589 81000000 		.4byte	0x81
 2921 058d 02       		.uleb128 0x2
 2922 058e 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 68


 2923 058f 6F       		.sleb128 -17
 2924 0590 00       		.byte	0
 2925 0591 07       		.uleb128 0x7
 2926 0592 99000000 		.4byte	0x99
 2927 0596 A1050000 		.4byte	0x5a1
 2928 059a 08       		.uleb128 0x8
 2929 059b E5000000 		.4byte	0xe5
 2930 059f 01       		.byte	0x1
 2931 05a0 00       		.byte	0
 2932 05a1 12       		.uleb128 0x12
 2933 05a2 41040000 		.4byte	.LASF96
 2934 05a6 01       		.byte	0x1
 2935 05a7 6E       		.byte	0x6e
 2936 05a8 68000000 		.4byte	0x68
 2937 05ac 00000000 		.4byte	.LFB66
 2938 05b0 B8000000 		.4byte	.LFE66-.LFB66
 2939 05b4 01       		.uleb128 0x1
 2940 05b5 9C       		.byte	0x9c
 2941 05b6 C9050000 		.4byte	0x5c9
 2942 05ba 11       		.uleb128 0x11
 2943 05bb E8050000 		.4byte	.LASF95
 2944 05bf 01       		.byte	0x1
 2945 05c0 96       		.byte	0x96
 2946 05c1 81000000 		.4byte	0x81
 2947 05c5 02       		.uleb128 0x2
 2948 05c6 91       		.byte	0x91
 2949 05c7 77       		.sleb128 -9
 2950 05c8 00       		.byte	0
 2951 05c9 13       		.uleb128 0x13
 2952 05ca C8070000 		.4byte	.LASF175
 2953 05ce 01       		.byte	0x1
 2954 05cf A6       		.byte	0xa6
 2955 05d0 00000000 		.4byte	.LFB67
 2956 05d4 2A000000 		.4byte	.LFE67-.LFB67
 2957 05d8 01       		.uleb128 0x1
 2958 05d9 9C       		.byte	0x9c
 2959 05da 14       		.uleb128 0x14
 2960 05db 83030000 		.4byte	.LASF97
 2961 05df 01       		.byte	0x1
 2962 05e0 CB       		.byte	0xcb
 2963 05e1 00000000 		.4byte	.LFB68
 2964 05e5 8C000000 		.4byte	.LFE68-.LFB68
 2965 05e9 01       		.uleb128 0x1
 2966 05ea 9C       		.byte	0x9c
 2967 05eb FE050000 		.4byte	0x5fe
 2968 05ef 15       		.uleb128 0x15
 2969 05f0 C8040000 		.4byte	.LASF98
 2970 05f4 01       		.byte	0x1
 2971 05f5 CB       		.byte	0xcb
 2972 05f6 81000000 		.4byte	0x81
 2973 05fa 02       		.uleb128 0x2
 2974 05fb 91       		.byte	0x91
 2975 05fc 77       		.sleb128 -9
 2976 05fd 00       		.byte	0
 2977 05fe 16       		.uleb128 0x16
 2978 05ff B7080000 		.4byte	.LASF102
 2979 0603 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 69


 2980 0604 EB       		.byte	0xeb
 2981 0605 81000000 		.4byte	0x81
 2982 0609 00000000 		.4byte	.LFB69
 2983 060d 48000000 		.4byte	.LFE69-.LFB69
 2984 0611 01       		.uleb128 0x1
 2985 0612 9C       		.byte	0x9c
 2986 0613 34060000 		.4byte	0x634
 2987 0617 15       		.uleb128 0x15
 2988 0618 F1040000 		.4byte	.LASF99
 2989 061c 01       		.byte	0x1
 2990 061d EB       		.byte	0xeb
 2991 061e 34060000 		.4byte	0x634
 2992 0622 02       		.uleb128 0x2
 2993 0623 91       		.byte	0x91
 2994 0624 74       		.sleb128 -12
 2995 0625 15       		.uleb128 0x15
 2996 0626 C8040000 		.4byte	.LASF98
 2997 062a 01       		.byte	0x1
 2998 062b EB       		.byte	0xeb
 2999 062c 81000000 		.4byte	0x81
 3000 0630 02       		.uleb128 0x2
 3001 0631 91       		.byte	0x91
 3002 0632 73       		.sleb128 -13
 3003 0633 00       		.byte	0
 3004 0634 06       		.uleb128 0x6
 3005 0635 04       		.byte	0x4
 3006 0636 D0040000 		.4byte	0x4d0
 3007 063a 17       		.uleb128 0x17
 3008 063b 3A060000 		.4byte	.LASF100
 3009 063f 01       		.byte	0x1
 3010 0640 0001     		.2byte	0x100
 3011 0642 00000000 		.4byte	.LFB70
 3012 0646 1E000000 		.4byte	.LFE70-.LFB70
 3013 064a 01       		.uleb128 0x1
 3014 064b 9C       		.byte	0x9c
 3015 064c 60060000 		.4byte	0x660
 3016 0650 18       		.uleb128 0x18
 3017 0651 98060000 		.4byte	.LASF101
 3018 0655 01       		.byte	0x1
 3019 0656 0001     		.2byte	0x100
 3020 0658 34060000 		.4byte	0x634
 3021 065c 02       		.uleb128 0x2
 3022 065d 91       		.byte	0x91
 3023 065e 74       		.sleb128 -12
 3024 065f 00       		.byte	0
 3025 0660 19       		.uleb128 0x19
 3026 0661 70050000 		.4byte	.LASF103
 3027 0665 01       		.byte	0x1
 3028 0666 0901     		.2byte	0x109
 3029 0668 D0040000 		.4byte	0x4d0
 3030 066c 00000000 		.4byte	.LFB71
 3031 0670 46000000 		.4byte	.LFE71-.LFB71
 3032 0674 01       		.uleb128 0x1
 3033 0675 9C       		.byte	0x9c
 3034 0676 B7060000 		.4byte	0x6b7
 3035 067a 18       		.uleb128 0x18
 3036 067b FE020000 		.4byte	.LASF82
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 70


 3037 067f 01       		.byte	0x1
 3038 0680 0901     		.2byte	0x109
 3039 0682 8D000000 		.4byte	0x8d
 3040 0686 02       		.uleb128 0x2
 3041 0687 91       		.byte	0x91
 3042 0688 6A       		.sleb128 -22
 3043 0689 18       		.uleb128 0x18
 3044 068a 75080000 		.4byte	.LASF84
 3045 068e 01       		.byte	0x1
 3046 068f 0901     		.2byte	0x109
 3047 0691 81000000 		.4byte	0x81
 3048 0695 02       		.uleb128 0x2
 3049 0696 91       		.byte	0x91
 3050 0697 69       		.sleb128 -23
 3051 0698 18       		.uleb128 0x18
 3052 0699 89000000 		.4byte	.LASF85
 3053 069d 01       		.byte	0x1
 3054 069e 0901     		.2byte	0x109
 3055 06a0 81000000 		.4byte	0x81
 3056 06a4 02       		.uleb128 0x2
 3057 06a5 91       		.byte	0x91
 3058 06a6 68       		.sleb128 -24
 3059 06a7 1A       		.uleb128 0x1a
 3060 06a8 F2070000 		.4byte	.LASF104
 3061 06ac 01       		.byte	0x1
 3062 06ad 0C01     		.2byte	0x10c
 3063 06af D0040000 		.4byte	0x4d0
 3064 06b3 02       		.uleb128 0x2
 3065 06b4 91       		.byte	0x91
 3066 06b5 70       		.sleb128 -16
 3067 06b6 00       		.byte	0
 3068 06b7 1B       		.uleb128 0x1b
 3069 06b8 A7060000 		.4byte	.LASF106
 3070 06bc 01       		.byte	0x1
 3071 06bd 2201     		.2byte	0x122
 3072 06bf 00000000 		.4byte	.LFB72
 3073 06c3 04010000 		.4byte	.LFE72-.LFB72
 3074 06c7 01       		.uleb128 0x1
 3075 06c8 9C       		.byte	0x9c
 3076 06c9 1E070000 		.4byte	0x71e
 3077 06cd 1A       		.uleb128 0x1a
 3078 06ce 9F010000 		.4byte	.LASF107
 3079 06d2 01       		.byte	0x1
 3080 06d3 2A01     		.2byte	0x12a
 3081 06d5 C9010000 		.4byte	0x1c9
 3082 06d9 03       		.uleb128 0x3
 3083 06da 91       		.byte	0x91
 3084 06db EC7C     		.sleb128 -404
 3085 06dd 1A       		.uleb128 0x1a
 3086 06de 4F080000 		.4byte	.LASF108
 3087 06e2 01       		.byte	0x1
 3088 06e3 2E01     		.2byte	0x12e
 3089 06e5 C9010000 		.4byte	0x1c9
 3090 06e9 03       		.uleb128 0x3
 3091 06ea 91       		.byte	0x91
 3092 06eb E879     		.sleb128 -792
 3093 06ed 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 71


 3094 06ee 3A010000 		.4byte	.LASF109
 3095 06f2 01       		.byte	0x1
 3096 06f3 3201     		.2byte	0x132
 3097 06f5 C9010000 		.4byte	0x1c9
 3098 06f9 03       		.uleb128 0x3
 3099 06fa 91       		.byte	0x91
 3100 06fb E476     		.sleb128 -1180
 3101 06fd 1A       		.uleb128 0x1a
 3102 06fe 6F040000 		.4byte	.LASF110
 3103 0702 01       		.byte	0x1
 3104 0703 3601     		.2byte	0x136
 3105 0705 C9010000 		.4byte	0x1c9
 3106 0709 03       		.uleb128 0x3
 3107 070a 91       		.byte	0x91
 3108 070b E073     		.sleb128 -1568
 3109 070d 1A       		.uleb128 0x1a
 3110 070e 00000000 		.4byte	.LASF111
 3111 0712 01       		.byte	0x1
 3112 0713 3A01     		.2byte	0x13a
 3113 0715 C9010000 		.4byte	0x1c9
 3114 0719 03       		.uleb128 0x3
 3115 071a 91       		.byte	0x91
 3116 071b DC70     		.sleb128 -1956
 3117 071d 00       		.byte	0
 3118 071e 1C       		.uleb128 0x1c
 3119 071f CD080000 		.4byte	.LASF176
 3120 0723 01       		.byte	0x1
 3121 0724 4501     		.2byte	0x145
 3122 0726 68000000 		.4byte	0x68
 3123 072a 00000000 		.4byte	.LFB73
 3124 072e 1E000000 		.4byte	.LFE73-.LFB73
 3125 0732 01       		.uleb128 0x1
 3126 0733 9C       		.byte	0x9c
 3127 0734 1D       		.uleb128 0x1d
 3128 0735 C5020000 		.4byte	.LASF112
 3129 0739 01       		.byte	0x1
 3130 073a 5B01     		.2byte	0x15b
 3131 073c 81000000 		.4byte	0x81
 3132 0740 00000000 		.4byte	.LFB74
 3133 0744 5C040000 		.4byte	.LFE74-.LFB74
 3134 0748 01       		.uleb128 0x1
 3135 0749 9C       		.byte	0x9c
 3136 074a 9E080000 		.4byte	0x89e
 3137 074e 1E       		.uleb128 0x1e
 3138 074f 62000000 		.4byte	.LBB2
 3139 0753 CC030000 		.4byte	.LBE2-.LBB2
 3140 0757 1A       		.uleb128 0x1a
 3141 0758 83050000 		.4byte	.LASF113
 3142 075c 01       		.byte	0x1
 3143 075d 8B01     		.2byte	0x18b
 3144 075f 61030000 		.4byte	0x361
 3145 0763 02       		.uleb128 0x2
 3146 0764 91       		.byte	0x91
 3147 0765 48       		.sleb128 -56
 3148 0766 1A       		.uleb128 0x1a
 3149 0767 BD050000 		.4byte	.LASF114
 3150 076b 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 72


 3151 076c 8F01     		.2byte	0x18f
 3152 076e 61030000 		.4byte	0x361
 3153 0772 03       		.uleb128 0x3
 3154 0773 91       		.byte	0x91
 3155 0774 B47F     		.sleb128 -76
 3156 0776 1A       		.uleb128 0x1a
 3157 0777 90020000 		.4byte	.LASF115
 3158 077b 01       		.byte	0x1
 3159 077c 9401     		.2byte	0x194
 3160 077e 61030000 		.4byte	0x361
 3161 0782 03       		.uleb128 0x3
 3162 0783 91       		.byte	0x91
 3163 0784 A07F     		.sleb128 -96
 3164 0786 1A       		.uleb128 0x1a
 3165 0787 D4030000 		.4byte	.LASF116
 3166 078b 01       		.byte	0x1
 3167 078c A701     		.2byte	0x1a7
 3168 078e 8D000000 		.4byte	0x8d
 3169 0792 02       		.uleb128 0x2
 3170 0793 91       		.byte	0x91
 3171 0794 66       		.sleb128 -26
 3172 0795 1A       		.uleb128 0x1a
 3173 0796 5A040000 		.4byte	.LASF117
 3174 079a 01       		.byte	0x1
 3175 079b A801     		.2byte	0x1a8
 3176 079d 61030000 		.4byte	0x361
 3177 07a1 03       		.uleb128 0x3
 3178 07a2 91       		.byte	0x91
 3179 07a3 8C7F     		.sleb128 -116
 3180 07a5 1A       		.uleb128 0x1a
 3181 07a6 8D070000 		.4byte	.LASF118
 3182 07aa 01       		.byte	0x1
 3183 07ab BD01     		.2byte	0x1bd
 3184 07ad 9E080000 		.4byte	0x89e
 3185 07b1 03       		.uleb128 0x3
 3186 07b2 91       		.byte	0x91
 3187 07b3 A475     		.sleb128 -1372
 3188 07b5 1A       		.uleb128 0x1a
 3189 07b6 0D080000 		.4byte	.LASF30
 3190 07ba 01       		.byte	0x1
 3191 07bb BE01     		.2byte	0x1be
 3192 07bd 81000000 		.4byte	0x81
 3193 07c1 02       		.uleb128 0x2
 3194 07c2 91       		.byte	0x91
 3195 07c3 65       		.sleb128 -27
 3196 07c4 1A       		.uleb128 0x1a
 3197 07c5 52070000 		.4byte	.LASF119
 3198 07c9 01       		.byte	0x1
 3199 07ca C501     		.2byte	0x1c5
 3200 07cc EC000000 		.4byte	0xec
 3201 07d0 02       		.uleb128 0x2
 3202 07d1 91       		.byte	0x91
 3203 07d2 6C       		.sleb128 -20
 3204 07d3 1A       		.uleb128 0x1a
 3205 07d4 BC010000 		.4byte	.LASF120
 3206 07d8 01       		.byte	0x1
 3207 07d9 C901     		.2byte	0x1c9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 73


 3208 07db A5000000 		.4byte	0xa5
 3209 07df 02       		.uleb128 0x2
 3210 07e0 91       		.byte	0x91
 3211 07e1 64       		.sleb128 -28
 3212 07e2 1A       		.uleb128 0x1a
 3213 07e3 CE020000 		.4byte	.LASF121
 3214 07e7 01       		.byte	0x1
 3215 07e8 F901     		.2byte	0x1f9
 3216 07ea 4C000000 		.4byte	0x4c
 3217 07ee 02       		.uleb128 0x2
 3218 07ef 91       		.byte	0x91
 3219 07f0 5C       		.sleb128 -36
 3220 07f1 1F       		.uleb128 0x1f
 3221 07f2 F0000000 		.4byte	.LBB3
 3222 07f6 2C000000 		.4byte	.LBE3-.LBB3
 3223 07fa 1E080000 		.4byte	0x81e
 3224 07fe 1A       		.uleb128 0x1a
 3225 07ff D3060000 		.4byte	.LASF122
 3226 0803 01       		.byte	0x1
 3227 0804 9C01     		.2byte	0x19c
 3228 0806 8D000000 		.4byte	0x8d
 3229 080a 02       		.uleb128 0x2
 3230 080b 91       		.byte	0x91
 3231 080c 68       		.sleb128 -24
 3232 080d 1A       		.uleb128 0x1a
 3233 080e 2E020000 		.4byte	.LASF123
 3234 0812 01       		.byte	0x1
 3235 0813 9D01     		.2byte	0x19d
 3236 0815 61030000 		.4byte	0x361
 3237 0819 03       		.uleb128 0x3
 3238 081a 91       		.byte	0x91
 3239 081b F87E     		.sleb128 -136
 3240 081d 00       		.byte	0
 3241 081e 1F       		.uleb128 0x1f
 3242 081f 1E010000 		.4byte	.LBB4
 3243 0823 20000000 		.4byte	.LBE4-.LBB4
 3244 0827 3C080000 		.4byte	0x83c
 3245 082b 1A       		.uleb128 0x1a
 3246 082c 2E020000 		.4byte	.LASF123
 3247 0830 01       		.byte	0x1
 3248 0831 A101     		.2byte	0x1a1
 3249 0833 61030000 		.4byte	0x361
 3250 0837 03       		.uleb128 0x3
 3251 0838 91       		.byte	0x91
 3252 0839 E47E     		.sleb128 -156
 3253 083b 00       		.byte	0
 3254 083c 1F       		.uleb128 0x1f
 3255 083d 5E020000 		.4byte	.LBB5
 3256 0841 4C010000 		.4byte	.LBE5-.LBB5
 3257 0845 73080000 		.4byte	0x873
 3258 0849 1A       		.uleb128 0x1a
 3259 084a 7C050000 		.4byte	.LASF124
 3260 084e 01       		.byte	0x1
 3261 084f CE01     		.2byte	0x1ce
 3262 0851 A5000000 		.4byte	0xa5
 3263 0855 02       		.uleb128 0x2
 3264 0856 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 74


 3265 0857 6B       		.sleb128 -21
 3266 0858 1E       		.uleb128 0x1e
 3267 0859 66020000 		.4byte	.LBB6
 3268 085d 28010000 		.4byte	.LBE6-.LBB6
 3269 0861 1A       		.uleb128 0x1a
 3270 0862 A1030000 		.4byte	.LASF125
 3271 0866 01       		.byte	0x1
 3272 0867 D001     		.2byte	0x1d0
 3273 0869 AE080000 		.4byte	0x8ae
 3274 086d 03       		.uleb128 0x3
 3275 086e 91       		.byte	0x91
 3276 086f EC76     		.sleb128 -1172
 3277 0871 00       		.byte	0
 3278 0872 00       		.byte	0
 3279 0873 1E       		.uleb128 0x1e
 3280 0874 C4030000 		.4byte	.LBB7
 3281 0878 3A000000 		.4byte	.LBE7-.LBB7
 3282 087c 1A       		.uleb128 0x1a
 3283 087d 9E020000 		.4byte	.LASF126
 3284 0881 01       		.byte	0x1
 3285 0882 F001     		.2byte	0x1f0
 3286 0884 68000000 		.4byte	0x68
 3287 0888 02       		.uleb128 0x2
 3288 0889 91       		.byte	0x91
 3289 088a 60       		.sleb128 -32
 3290 088b 1A       		.uleb128 0x1a
 3291 088c 45060000 		.4byte	.LASF127
 3292 0890 01       		.byte	0x1
 3293 0891 F101     		.2byte	0x1f1
 3294 0893 BF080000 		.4byte	0x8bf
 3295 0897 03       		.uleb128 0x3
 3296 0898 91       		.byte	0x91
 3297 0899 D87E     		.sleb128 -168
 3298 089b 00       		.byte	0
 3299 089c 00       		.byte	0
 3300 089d 00       		.byte	0
 3301 089e 07       		.uleb128 0x7
 3302 089f D7000000 		.4byte	0xd7
 3303 08a3 AE080000 		.4byte	0x8ae
 3304 08a7 08       		.uleb128 0x8
 3305 08a8 E5000000 		.4byte	0xe5
 3306 08ac C7       		.byte	0xc7
 3307 08ad 00       		.byte	0
 3308 08ae 07       		.uleb128 0x7
 3309 08af D7000000 		.4byte	0xd7
 3310 08b3 BF080000 		.4byte	0x8bf
 3311 08b7 20       		.uleb128 0x20
 3312 08b8 E5000000 		.4byte	0xe5
 3313 08bc E803     		.2byte	0x3e8
 3314 08be 00       		.byte	0
 3315 08bf 07       		.uleb128 0x7
 3316 08c0 D7000000 		.4byte	0xd7
 3317 08c4 CF080000 		.4byte	0x8cf
 3318 08c8 08       		.uleb128 0x8
 3319 08c9 E5000000 		.4byte	0xe5
 3320 08cd 09       		.byte	0x9
 3321 08ce 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 75


 3322 08cf 1D       		.uleb128 0x1d
 3323 08d0 C4050000 		.4byte	.LASF128
 3324 08d4 01       		.byte	0x1
 3325 08d5 0E02     		.2byte	0x20e
 3326 08d7 81000000 		.4byte	0x81
 3327 08db 00000000 		.4byte	.LFB75
 3328 08df 44000000 		.4byte	.LFE75-.LFB75
 3329 08e3 01       		.uleb128 0x1
 3330 08e4 9C       		.byte	0x9c
 3331 08e5 03090000 		.4byte	0x903
 3332 08e9 1E       		.uleb128 0x1e
 3333 08ea 20000000 		.4byte	.LBB8
 3334 08ee 1A000000 		.4byte	.LBE8-.LBB8
 3335 08f2 1A       		.uleb128 0x1a
 3336 08f3 CE020000 		.4byte	.LASF121
 3337 08f7 01       		.byte	0x1
 3338 08f8 1902     		.2byte	0x219
 3339 08fa 4C000000 		.4byte	0x4c
 3340 08fe 02       		.uleb128 0x2
 3341 08ff 91       		.byte	0x91
 3342 0900 74       		.sleb128 -12
 3343 0901 00       		.byte	0
 3344 0902 00       		.byte	0
 3345 0903 1D       		.uleb128 0x1d
 3346 0904 02040000 		.4byte	.LASF129
 3347 0908 01       		.byte	0x1
 3348 0909 2E02     		.2byte	0x22e
 3349 090b 81000000 		.4byte	0x81
 3350 090f 00000000 		.4byte	.LFB76
 3351 0913 9C020000 		.4byte	.LFE76-.LFB76
 3352 0917 01       		.uleb128 0x1
 3353 0918 9C       		.byte	0x9c
 3354 0919 A4090000 		.4byte	0x9a4
 3355 091d 1A       		.uleb128 0x1a
 3356 091e 43050000 		.4byte	.LASF59
 3357 0922 01       		.byte	0x1
 3358 0923 3102     		.2byte	0x231
 3359 0925 4C000000 		.4byte	0x4c
 3360 0929 02       		.uleb128 0x2
 3361 092a 91       		.byte	0x91
 3362 092b 6C       		.sleb128 -20
 3363 092c 1A       		.uleb128 0x1a
 3364 092d 58070000 		.4byte	.LASF130
 3365 0931 01       		.byte	0x1
 3366 0932 3202     		.2byte	0x232
 3367 0934 A4090000 		.4byte	0x9a4
 3368 0938 02       		.uleb128 0x2
 3369 0939 91       		.byte	0x91
 3370 093a 4C       		.sleb128 -52
 3371 093b 1A       		.uleb128 0x1a
 3372 093c 2E030000 		.4byte	.LASF58
 3373 0940 01       		.byte	0x1
 3374 0941 3602     		.2byte	0x236
 3375 0943 61030000 		.4byte	0x361
 3376 0947 03       		.uleb128 0x3
 3377 0948 91       		.byte	0x91
 3378 0949 B87F     		.sleb128 -72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 76


 3379 094b 1A       		.uleb128 0x1a
 3380 094c 0C090000 		.4byte	.LASF131
 3381 0950 01       		.byte	0x1
 3382 0951 3A02     		.2byte	0x23a
 3383 0953 B4090000 		.4byte	0x9b4
 3384 0957 03       		.uleb128 0x3
 3385 0958 91       		.byte	0x91
 3386 0959 B07F     		.sleb128 -80
 3387 095b 1A       		.uleb128 0x1a
 3388 095c AC030000 		.4byte	.LASF132
 3389 0960 01       		.byte	0x1
 3390 0961 5B02     		.2byte	0x25b
 3391 0963 6D020000 		.4byte	0x26d
 3392 0967 03       		.uleb128 0x3
 3393 0968 91       		.byte	0x91
 3394 0969 9C7F     		.sleb128 -100
 3395 096b 1F       		.uleb128 0x1f
 3396 096c 46000000 		.4byte	.LBB9
 3397 0970 78000000 		.4byte	.LBE9-.LBB9
 3398 0974 89090000 		.4byte	0x989
 3399 0978 1A       		.uleb128 0x1a
 3400 0979 AB070000 		.4byte	.LASF133
 3401 097d 01       		.byte	0x1
 3402 097e 4302     		.2byte	0x243
 3403 0980 1D020000 		.4byte	0x21d
 3404 0984 03       		.uleb128 0x3
 3405 0985 91       		.byte	0x91
 3406 0986 807F     		.sleb128 -128
 3407 0988 00       		.byte	0
 3408 0989 1E       		.uleb128 0x1e
 3409 098a 42010000 		.4byte	.LBB10
 3410 098e EE000000 		.4byte	.LBE10-.LBB10
 3411 0992 1A       		.uleb128 0x1a
 3412 0993 02080000 		.4byte	.LASF134
 3413 0997 01       		.byte	0x1
 3414 0998 7702     		.2byte	0x277
 3415 099a B1020000 		.4byte	0x2b1
 3416 099e 03       		.uleb128 0x3
 3417 099f 91       		.byte	0x91
 3418 09a0 F07E     		.sleb128 -144
 3419 09a2 00       		.byte	0
 3420 09a3 00       		.byte	0
 3421 09a4 07       		.uleb128 0x7
 3422 09a5 D7000000 		.4byte	0xd7
 3423 09a9 B4090000 		.4byte	0x9b4
 3424 09ad 08       		.uleb128 0x8
 3425 09ae E5000000 		.4byte	0xe5
 3426 09b2 1F       		.byte	0x1f
 3427 09b3 00       		.byte	0
 3428 09b4 07       		.uleb128 0x7
 3429 09b5 D7000000 		.4byte	0xd7
 3430 09b9 C4090000 		.4byte	0x9c4
 3431 09bd 08       		.uleb128 0x8
 3432 09be E5000000 		.4byte	0xe5
 3433 09c2 04       		.byte	0x4
 3434 09c3 00       		.byte	0
 3435 09c4 21       		.uleb128 0x21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 77


 3436 09c5 6F030000 		.4byte	.LASF135
 3437 09c9 01       		.byte	0x1
 3438 09ca 9F02     		.2byte	0x29f
 3439 09cc 81000000 		.4byte	0x81
 3440 09d0 00000000 		.4byte	.LFB77
 3441 09d4 74000000 		.4byte	.LFE77-.LFB77
 3442 09d8 01       		.uleb128 0x1
 3443 09d9 9C       		.byte	0x9c
 3444 09da 0A0A0000 		.4byte	0xa0a
 3445 09de 18       		.uleb128 0x18
 3446 09df 43050000 		.4byte	.LASF59
 3447 09e3 01       		.byte	0x1
 3448 09e4 9F02     		.2byte	0x29f
 3449 09e6 4C000000 		.4byte	0x4c
 3450 09ea 02       		.uleb128 0x2
 3451 09eb 91       		.byte	0x91
 3452 09ec 64       		.sleb128 -28
 3453 09ed 22       		.uleb128 0x22
 3454 09ee 7400     		.ascii	"t\000"
 3455 09f0 01       		.byte	0x1
 3456 09f1 A602     		.2byte	0x2a6
 3457 09f3 0A0A0000 		.4byte	0xa0a
 3458 09f7 02       		.uleb128 0x2
 3459 09f8 91       		.byte	0x91
 3460 09f9 74       		.sleb128 -12
 3461 09fa 1A       		.uleb128 0x1a
 3462 09fb 22050000 		.4byte	.LASF136
 3463 09ff 01       		.byte	0x1
 3464 0a00 AB02     		.2byte	0x2ab
 3465 0a02 6B010000 		.4byte	0x16b
 3466 0a06 02       		.uleb128 0x2
 3467 0a07 91       		.byte	0x91
 3468 0a08 68       		.sleb128 -24
 3469 0a09 00       		.byte	0
 3470 0a0a 06       		.uleb128 0x6
 3471 0a0b 04       		.byte	0x4
 3472 0a0c BC020000 		.4byte	0x2bc
 3473 0a10 21       		.uleb128 0x21
 3474 0a11 0D030000 		.4byte	.LASF137
 3475 0a15 01       		.byte	0x1
 3476 0a16 C802     		.2byte	0x2c8
 3477 0a18 81000000 		.4byte	0x81
 3478 0a1c 00000000 		.4byte	.LFB78
 3479 0a20 38010000 		.4byte	.LFE78-.LFB78
 3480 0a24 01       		.uleb128 0x1
 3481 0a25 9C       		.byte	0x9c
 3482 0a26 890A0000 		.4byte	0xa89
 3483 0a2a 18       		.uleb128 0x18
 3484 0a2b 34030000 		.4byte	.LASF138
 3485 0a2f 01       		.byte	0x1
 3486 0a30 C802     		.2byte	0x2c8
 3487 0a32 EC000000 		.4byte	0xec
 3488 0a36 03       		.uleb128 0x3
 3489 0a37 91       		.byte	0x91
 3490 0a38 9C7E     		.sleb128 -228
 3491 0a3a 18       		.uleb128 0x18
 3492 0a3b 29030000 		.4byte	.LASF139
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 78


 3493 0a3f 01       		.byte	0x1
 3494 0a40 C802     		.2byte	0x2c8
 3495 0a42 68000000 		.4byte	0x68
 3496 0a46 03       		.uleb128 0x3
 3497 0a47 91       		.byte	0x91
 3498 0a48 987E     		.sleb128 -232
 3499 0a4a 18       		.uleb128 0x18
 3500 0a4b EB040000 		.4byte	.LASF140
 3501 0a4f 01       		.byte	0x1
 3502 0a50 C802     		.2byte	0x2c8
 3503 0a52 EC000000 		.4byte	0xec
 3504 0a56 03       		.uleb128 0x3
 3505 0a57 91       		.byte	0x91
 3506 0a58 947E     		.sleb128 -236
 3507 0a5a 1A       		.uleb128 0x1a
 3508 0a5b 1F020000 		.4byte	.LASF141
 3509 0a5f 01       		.byte	0x1
 3510 0a60 CA02     		.2byte	0x2ca
 3511 0a62 81000000 		.4byte	0x81
 3512 0a66 02       		.uleb128 0x2
 3513 0a67 91       		.byte	0x91
 3514 0a68 77       		.sleb128 -9
 3515 0a69 1A       		.uleb128 0x1a
 3516 0a6a 74000000 		.4byte	.LASF142
 3517 0a6e 01       		.byte	0x1
 3518 0a6f D102     		.2byte	0x2d1
 3519 0a71 890A0000 		.4byte	0xa89
 3520 0a75 02       		.uleb128 0x2
 3521 0a76 91       		.byte	0x91
 3522 0a77 68       		.sleb128 -24
 3523 0a78 1A       		.uleb128 0x1a
 3524 0a79 8D070000 		.4byte	.LASF118
 3525 0a7d 01       		.byte	0x1
 3526 0a7e D902     		.2byte	0x2d9
 3527 0a80 9E080000 		.4byte	0x89e
 3528 0a84 03       		.uleb128 0x3
 3529 0a85 91       		.byte	0x91
 3530 0a86 A07E     		.sleb128 -224
 3531 0a88 00       		.byte	0
 3532 0a89 07       		.uleb128 0x7
 3533 0a8a D7000000 		.4byte	0xd7
 3534 0a8e 990A0000 		.4byte	0xa99
 3535 0a92 08       		.uleb128 0x8
 3536 0a93 E5000000 		.4byte	0xe5
 3537 0a97 0B       		.byte	0xb
 3538 0a98 00       		.byte	0
 3539 0a99 23       		.uleb128 0x23
 3540 0a9a 80010000 		.4byte	.LASF143
 3541 0a9e 0D       		.byte	0xd
 3542 0a9f 1207     		.2byte	0x712
 3543 0aa1 A50A0000 		.4byte	0xaa5
 3544 0aa5 0C       		.uleb128 0xc
 3545 0aa6 76000000 		.4byte	0x76
 3546 0aaa 24       		.uleb128 0x24
 3547 0aab 33070000 		.4byte	.LASF144
 3548 0aaf 07       		.byte	0x7
 3549 0ab0 25       		.byte	0x25
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 79


 3550 0ab1 33050000 		.4byte	0x533
 3551 0ab5 05       		.uleb128 0x5
 3552 0ab6 03       		.byte	0x3
 3553 0ab7 00000000 		.4byte	level_sensor_inbox
 3554 0abb 24       		.uleb128 0x24
 3555 0abc 14080000 		.4byte	.LASF145
 3556 0ac0 07       		.byte	0x7
 3557 0ac1 27       		.byte	0x27
 3558 0ac2 85040000 		.4byte	0x485
 3559 0ac6 05       		.uleb128 0x5
 3560 0ac7 03       		.byte	0x3
 3561 0ac8 00000000 		.4byte	level_sensor_enabled
 3562 0acc 24       		.uleb128 0x24
 3563 0acd 64000000 		.4byte	.LASF146
 3564 0ad1 0A       		.byte	0xa
 3565 0ad2 11       		.byte	0x11
 3566 0ad3 85040000 		.4byte	0x485
 3567 0ad7 05       		.uleb128 0x5
 3568 0ad8 03       		.byte	0x3
 3569 0ad9 00000000 		.4byte	buffer_overflow
 3570 0add 24       		.uleb128 0x24
 3571 0ade D2040000 		.4byte	.LASF147
 3572 0ae2 0A       		.byte	0xa
 3573 0ae3 22       		.byte	0x22
 3574 0ae4 8D000000 		.4byte	0x8d
 3575 0ae8 05       		.uleb128 0x5
 3576 0ae9 03       		.byte	0x3
 3577 0aea 00000000 		.4byte	dataPointsInStack
 3578 0aee 24       		.uleb128 0x24
 3579 0aef 29080000 		.4byte	.LASF148
 3580 0af3 0A       		.byte	0xa
 3581 0af4 23       		.byte	0x23
 3582 0af5 8D000000 		.4byte	0x8d
 3583 0af9 05       		.uleb128 0x5
 3584 0afa 03       		.byte	0x3
 3585 0afb 00000000 		.4byte	dataPointsInStackDesired
 3586 0aff 07       		.uleb128 0x7
 3587 0b00 71030000 		.4byte	0x371
 3588 0b04 0F0B0000 		.4byte	0xb0f
 3589 0b08 08       		.uleb128 0x8
 3590 0b09 E5000000 		.4byte	0xe5
 3591 0b0d 95       		.byte	0x95
 3592 0b0e 00       		.byte	0
 3593 0b0f 24       		.uleb128 0x24
 3594 0b10 13040000 		.4byte	.LASF149
 3595 0b14 0A       		.byte	0xa
 3596 0b15 24       		.byte	0x24
 3597 0b16 FF0A0000 		.4byte	0xaff
 3598 0b1a 05       		.uleb128 0x5
 3599 0b1b 03       		.byte	0x3
 3600 0b1c 00000000 		.4byte	data
 3601 0b20 24       		.uleb128 0x24
 3602 0b21 67010000 		.4byte	.LASF150
 3603 0b25 0B       		.byte	0xb
 3604 0b26 20       		.byte	0x20
 3605 0b27 81000000 		.4byte	0x81
 3606 0b2b 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 80


 3607 0b2c 03       		.byte	0x3
 3608 0b2d 00000000 		.4byte	modem_state
 3609 0b31 24       		.uleb128 0x24
 3610 0b32 8F040000 		.4byte	.LASF151
 3611 0b36 0B       		.byte	0xb
 3612 0b37 6A       		.byte	0x6a
 3613 0b38 BD000000 		.4byte	0xbd
 3614 0b3c 05       		.uleb128 0x5
 3615 0b3d 03       		.byte	0x3
 3616 0b3e 00000000 		.4byte	modem_start_time_stamp
 3617 0b42 24       		.uleb128 0x24
 3618 0b43 29040000 		.4byte	.LASF87
 3619 0b47 0B       		.byte	0xb
 3620 0b48 6B       		.byte	0x6b
 3621 0b49 A9030000 		.4byte	0x3a9
 3622 0b4d 05       		.uleb128 0x5
 3623 0b4e 03       		.byte	0x3
 3624 0b4f 00000000 		.4byte	modem_info
 3625 0b53 24       		.uleb128 0x24
 3626 0b54 76070000 		.4byte	.LASF152
 3627 0b58 0B       		.byte	0xb
 3628 0b59 6C       		.byte	0x6c
 3629 0b5a 1D040000 		.4byte	0x41d
 3630 0b5e 05       		.uleb128 0x5
 3631 0b5f 03       		.byte	0x3
 3632 0b60 00000000 		.4byte	modem_stats
 3633 0b64 24       		.uleb128 0x24
 3634 0b65 5B050000 		.4byte	.LASF153
 3635 0b69 0B       		.byte	0xb
 3636 0b6a 6D       		.byte	0x6d
 3637 0b6b 8C040000 		.4byte	0x48c
 3638 0b6f 05       		.uleb128 0x5
 3639 0b70 03       		.byte	0x3
 3640 0b71 00000000 		.4byte	updatable_parameters
 3641 0b75 24       		.uleb128 0x24
 3642 0b76 5F030000 		.4byte	.LASF154
 3643 0b7a 0E       		.byte	0xe
 3644 0b7b 07       		.byte	0x7
 3645 0b7c 85040000 		.4byte	0x485
 3646 0b80 05       		.uleb128 0x5
 3647 0b81 03       		.byte	0x3
 3648 0b82 00000000 		.4byte	App_LED_enabled
 3649 0b86 24       		.uleb128 0x24
 3650 0b87 F4080000 		.4byte	.LASF155
 3651 0b8b 0E       		.byte	0xe
 3652 0b8c 08       		.byte	0x8
 3653 0b8d 33050000 		.4byte	0x533
 3654 0b91 05       		.uleb128 0x5
 3655 0b92 03       		.byte	0x3
 3656 0b93 00000000 		.4byte	app_led_inbox
 3657 0b97 07       		.uleb128 0x7
 3658 0b98 D7000000 		.4byte	0xd7
 3659 0b9c A80B0000 		.4byte	0xba8
 3660 0ba0 20       		.uleb128 0x20
 3661 0ba1 E5000000 		.4byte	0xe5
 3662 0ba5 0F27     		.2byte	0x270f
 3663 0ba7 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 81


 3664 0ba8 24       		.uleb128 0x24
 3665 0ba9 9B050000 		.4byte	.LASF156
 3666 0bad 0C       		.byte	0xc
 3667 0bae 18       		.byte	0x18
 3668 0baf 970B0000 		.4byte	0xb97
 3669 0bb3 05       		.uleb128 0x5
 3670 0bb4 03       		.byte	0x3
 3671 0bb5 00000000 		.4byte	http_request
 3672 0bb9 24       		.uleb128 0x24
 3673 0bba 65080000 		.4byte	.LASF157
 3674 0bbe 0C       		.byte	0xc
 3675 0bbf 19       		.byte	0x19
 3676 0bc0 970B0000 		.4byte	0xb97
 3677 0bc4 05       		.uleb128 0x5
 3678 0bc5 03       		.byte	0x3
 3679 0bc6 00000000 		.4byte	http_body
 3680 0bca 24       		.uleb128 0x24
 3681 0bcb 82070000 		.4byte	.LASF158
 3682 0bcf 0C       		.byte	0xc
 3683 0bd0 1A       		.byte	0x1a
 3684 0bd1 9E080000 		.4byte	0x89e
 3685 0bd5 05       		.uleb128 0x5
 3686 0bd6 03       		.byte	0x3
 3687 0bd7 00000000 		.4byte	http_route
 3688 0bdb 24       		.uleb128 0x24
 3689 0bdc 80060000 		.4byte	.LASF159
 3690 0be0 0C       		.byte	0xc
 3691 0be1 41       		.byte	0x41
 3692 0be2 07050000 		.4byte	0x507
 3693 0be6 05       		.uleb128 0x5
 3694 0be7 03       		.byte	0x3
 3695 0be8 00000000 		.4byte	system_info
 3696 0bec 24       		.uleb128 0x24
 3697 0bed 20060000 		.4byte	.LASF160
 3698 0bf1 0C       		.byte	0xc
 3699 0bf2 53       		.byte	0x53
 3700 0bf3 43050000 		.4byte	0x543
 3701 0bf7 05       		.uleb128 0x5
 3702 0bf8 03       		.byte	0x3
 3703 0bf9 00000000 		.4byte	system_settings
 3704 0bfd 24       		.uleb128 0x24
 3705 0bfe 73010000 		.4byte	.LASF161
 3706 0c02 0C       		.byte	0xc
 3707 0c03 6F       		.byte	0x6f
 3708 0c04 D0040000 		.4byte	0x4d0
 3709 0c08 05       		.uleb128 0x5
 3710 0c09 03       		.byte	0x3
 3711 0c0a 00000000 		.4byte	alarmMeasure
 3712 0c0e 24       		.uleb128 0x24
 3713 0c0f C9010000 		.4byte	.LASF162
 3714 0c13 0C       		.byte	0xc
 3715 0c14 70       		.byte	0x70
 3716 0c15 81000000 		.4byte	0x81
 3717 0c19 05       		.uleb128 0x5
 3718 0c1a 03       		.byte	0x3
 3719 0c1b 00000000 		.4byte	timeToMeasure
 3720 0c1f 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 82


 3721 0c20 41030000 		.4byte	.LASF163
 3722 0c24 0C       		.byte	0xc
 3723 0c25 71       		.byte	0x71
 3724 0c26 D0040000 		.4byte	0x4d0
 3725 0c2a 05       		.uleb128 0x5
 3726 0c2b 03       		.byte	0x3
 3727 0c2c 00000000 		.4byte	alarmSync
 3728 0c30 24       		.uleb128 0x24
 3729 0c31 EF010000 		.4byte	.LASF164
 3730 0c35 0C       		.byte	0xc
 3731 0c36 72       		.byte	0x72
 3732 0c37 81000000 		.4byte	0x81
 3733 0c3b 05       		.uleb128 0x5
 3734 0c3c 03       		.byte	0x3
 3735 0c3d 00000000 		.4byte	timeToSync
 3736 0c41 24       		.uleb128 0x24
 3737 0c42 2C050000 		.4byte	.LASF165
 3738 0c46 0C       		.byte	0xc
 3739 0c47 73       		.byte	0x73
 3740 0c48 81000000 		.4byte	0x81
 3741 0c4c 05       		.uleb128 0x5
 3742 0c4d 03       		.byte	0x3
 3743 0c4e 00000000 		.4byte	timeToSycnRemoteParams
 3744 0c52 25       		.uleb128 0x25
 3745 0c53 68657900 		.ascii	"hey\000"
 3746 0c57 0C       		.byte	0xc
 3747 0c58 74       		.byte	0x74
 3748 0c59 81000000 		.4byte	0x81
 3749 0c5d 05       		.uleb128 0x5
 3750 0c5e 03       		.byte	0x3
 3751 0c5f 00000000 		.4byte	hey
 3752 0c63 24       		.uleb128 0x24
 3753 0c64 83040000 		.4byte	.LASF166
 3754 0c68 0C       		.byte	0xc
 3755 0c69 77       		.byte	0x77
 3756 0c6a D0040000 		.4byte	0x4d0
 3757 0c6e 05       		.uleb128 0x5
 3758 0c6f 03       		.byte	0x3
 3759 0c70 00000000 		.4byte	alarmAppLED
 3760 0c74 24       		.uleb128 0x24
 3761 0c75 A8020000 		.4byte	.LASF167
 3762 0c79 0C       		.byte	0xc
 3763 0c7a 78       		.byte	0x78
 3764 0c7b 81000000 		.4byte	0x81
 3765 0c7f 05       		.uleb128 0x5
 3766 0c80 03       		.byte	0x3
 3767 0c81 00000000 		.4byte	timeToAppLED
 3768 0c85 24       		.uleb128 0x24
 3769 0c86 08070000 		.4byte	.LASF168
 3770 0c8a 0C       		.byte	0xc
 3771 0c8b 7A       		.byte	0x7a
 3772 0c8c D0040000 		.4byte	0x4d0
 3773 0c90 05       		.uleb128 0x5
 3774 0c91 03       		.byte	0x3
 3775 0c92 00000000 		.4byte	alarmLevelSensor
 3776 0c96 24       		.uleb128 0x24
 3777 0c97 8D010000 		.4byte	.LASF169
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 83


 3778 0c9b 0C       		.byte	0xc
 3779 0c9c 7B       		.byte	0x7b
 3780 0c9d 81000000 		.4byte	0x81
 3781 0ca1 05       		.uleb128 0x5
 3782 0ca2 03       		.byte	0x3
 3783 0ca3 00000000 		.4byte	timetoLevelSensor
 3784 0ca7 07       		.uleb128 0x7
 3785 0ca8 D7000000 		.4byte	0xd7
 3786 0cac B70C0000 		.4byte	0xcb7
 3787 0cb0 08       		.uleb128 0x8
 3788 0cb1 E5000000 		.4byte	0xe5
 3789 0cb5 1D       		.byte	0x1d
 3790 0cb6 00       		.byte	0
 3791 0cb7 24       		.uleb128 0x24
 3792 0cb8 DA050000 		.4byte	.LASF170
 3793 0cbc 01       		.byte	0x1
 3794 0cbd 1D       		.byte	0x1d
 3795 0cbe A70C0000 		.4byte	0xca7
 3796 0cc2 05       		.uleb128 0x5
 3797 0cc3 03       		.byte	0x3
 3798 0cc4 00000000 		.4byte	Data_fileName
 3799 0cc8 24       		.uleb128 0x24
 3800 0cc9 C8030000 		.4byte	.LASF94
 3801 0ccd 01       		.byte	0x1
 3802 0cce 1E       		.byte	0x1e
 3803 0ccf 81000000 		.4byte	0x81
 3804 0cd3 05       		.uleb128 0x5
 3805 0cd4 03       		.byte	0x3
 3806 0cd5 00000000 		.4byte	try_counter
 3807 0cd9 00       		.byte	0
 3808              		.section	.debug_abbrev,"",%progbits
 3809              	.Ldebug_abbrev0:
 3810 0000 01       		.uleb128 0x1
 3811 0001 11       		.uleb128 0x11
 3812 0002 01       		.byte	0x1
 3813 0003 25       		.uleb128 0x25
 3814 0004 0E       		.uleb128 0xe
 3815 0005 13       		.uleb128 0x13
 3816 0006 0B       		.uleb128 0xb
 3817 0007 03       		.uleb128 0x3
 3818 0008 0E       		.uleb128 0xe
 3819 0009 1B       		.uleb128 0x1b
 3820 000a 0E       		.uleb128 0xe
 3821 000b 55       		.uleb128 0x55
 3822 000c 17       		.uleb128 0x17
 3823 000d 11       		.uleb128 0x11
 3824 000e 01       		.uleb128 0x1
 3825 000f 10       		.uleb128 0x10
 3826 0010 17       		.uleb128 0x17
 3827 0011 00       		.byte	0
 3828 0012 00       		.byte	0
 3829 0013 02       		.uleb128 0x2
 3830 0014 24       		.uleb128 0x24
 3831 0015 00       		.byte	0
 3832 0016 0B       		.uleb128 0xb
 3833 0017 0B       		.uleb128 0xb
 3834 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 84


 3835 0019 0B       		.uleb128 0xb
 3836 001a 03       		.uleb128 0x3
 3837 001b 0E       		.uleb128 0xe
 3838 001c 00       		.byte	0
 3839 001d 00       		.byte	0
 3840 001e 03       		.uleb128 0x3
 3841 001f 16       		.uleb128 0x16
 3842 0020 00       		.byte	0
 3843 0021 03       		.uleb128 0x3
 3844 0022 0E       		.uleb128 0xe
 3845 0023 3A       		.uleb128 0x3a
 3846 0024 0B       		.uleb128 0xb
 3847 0025 3B       		.uleb128 0x3b
 3848 0026 0B       		.uleb128 0xb
 3849 0027 49       		.uleb128 0x49
 3850 0028 13       		.uleb128 0x13
 3851 0029 00       		.byte	0
 3852 002a 00       		.byte	0
 3853 002b 04       		.uleb128 0x4
 3854 002c 24       		.uleb128 0x24
 3855 002d 00       		.byte	0
 3856 002e 0B       		.uleb128 0xb
 3857 002f 0B       		.uleb128 0xb
 3858 0030 3E       		.uleb128 0x3e
 3859 0031 0B       		.uleb128 0xb
 3860 0032 03       		.uleb128 0x3
 3861 0033 08       		.uleb128 0x8
 3862 0034 00       		.byte	0
 3863 0035 00       		.byte	0
 3864 0036 05       		.uleb128 0x5
 3865 0037 16       		.uleb128 0x16
 3866 0038 00       		.byte	0
 3867 0039 03       		.uleb128 0x3
 3868 003a 0E       		.uleb128 0xe
 3869 003b 3A       		.uleb128 0x3a
 3870 003c 0B       		.uleb128 0xb
 3871 003d 3B       		.uleb128 0x3b
 3872 003e 05       		.uleb128 0x5
 3873 003f 49       		.uleb128 0x49
 3874 0040 13       		.uleb128 0x13
 3875 0041 00       		.byte	0
 3876 0042 00       		.byte	0
 3877 0043 06       		.uleb128 0x6
 3878 0044 0F       		.uleb128 0xf
 3879 0045 00       		.byte	0
 3880 0046 0B       		.uleb128 0xb
 3881 0047 0B       		.uleb128 0xb
 3882 0048 49       		.uleb128 0x49
 3883 0049 13       		.uleb128 0x13
 3884 004a 00       		.byte	0
 3885 004b 00       		.byte	0
 3886 004c 07       		.uleb128 0x7
 3887 004d 01       		.uleb128 0x1
 3888 004e 01       		.byte	0x1
 3889 004f 49       		.uleb128 0x49
 3890 0050 13       		.uleb128 0x13
 3891 0051 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 85


 3892 0052 13       		.uleb128 0x13
 3893 0053 00       		.byte	0
 3894 0054 00       		.byte	0
 3895 0055 08       		.uleb128 0x8
 3896 0056 21       		.uleb128 0x21
 3897 0057 00       		.byte	0
 3898 0058 49       		.uleb128 0x49
 3899 0059 13       		.uleb128 0x13
 3900 005a 2F       		.uleb128 0x2f
 3901 005b 0B       		.uleb128 0xb
 3902 005c 00       		.byte	0
 3903 005d 00       		.byte	0
 3904 005e 09       		.uleb128 0x9
 3905 005f 13       		.uleb128 0x13
 3906 0060 01       		.byte	0x1
 3907 0061 0B       		.uleb128 0xb
 3908 0062 0B       		.uleb128 0xb
 3909 0063 3A       		.uleb128 0x3a
 3910 0064 0B       		.uleb128 0xb
 3911 0065 3B       		.uleb128 0x3b
 3912 0066 0B       		.uleb128 0xb
 3913 0067 01       		.uleb128 0x1
 3914 0068 13       		.uleb128 0x13
 3915 0069 00       		.byte	0
 3916 006a 00       		.byte	0
 3917 006b 0A       		.uleb128 0xa
 3918 006c 0D       		.uleb128 0xd
 3919 006d 00       		.byte	0
 3920 006e 03       		.uleb128 0x3
 3921 006f 08       		.uleb128 0x8
 3922 0070 3A       		.uleb128 0x3a
 3923 0071 0B       		.uleb128 0xb
 3924 0072 3B       		.uleb128 0x3b
 3925 0073 0B       		.uleb128 0xb
 3926 0074 49       		.uleb128 0x49
 3927 0075 13       		.uleb128 0x13
 3928 0076 38       		.uleb128 0x38
 3929 0077 0B       		.uleb128 0xb
 3930 0078 00       		.byte	0
 3931 0079 00       		.byte	0
 3932 007a 0B       		.uleb128 0xb
 3933 007b 0D       		.uleb128 0xd
 3934 007c 00       		.byte	0
 3935 007d 03       		.uleb128 0x3
 3936 007e 0E       		.uleb128 0xe
 3937 007f 3A       		.uleb128 0x3a
 3938 0080 0B       		.uleb128 0xb
 3939 0081 3B       		.uleb128 0x3b
 3940 0082 0B       		.uleb128 0xb
 3941 0083 49       		.uleb128 0x49
 3942 0084 13       		.uleb128 0x13
 3943 0085 38       		.uleb128 0x38
 3944 0086 0B       		.uleb128 0xb
 3945 0087 00       		.byte	0
 3946 0088 00       		.byte	0
 3947 0089 0C       		.uleb128 0xc
 3948 008a 35       		.uleb128 0x35
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 86


 3949 008b 00       		.byte	0
 3950 008c 49       		.uleb128 0x49
 3951 008d 13       		.uleb128 0x13
 3952 008e 00       		.byte	0
 3953 008f 00       		.byte	0
 3954 0090 0D       		.uleb128 0xd
 3955 0091 13       		.uleb128 0x13
 3956 0092 01       		.byte	0x1
 3957 0093 0B       		.uleb128 0xb
 3958 0094 05       		.uleb128 0x5
 3959 0095 3A       		.uleb128 0x3a
 3960 0096 0B       		.uleb128 0xb
 3961 0097 3B       		.uleb128 0x3b
 3962 0098 0B       		.uleb128 0xb
 3963 0099 01       		.uleb128 0x1
 3964 009a 13       		.uleb128 0x13
 3965 009b 00       		.byte	0
 3966 009c 00       		.byte	0
 3967 009d 0E       		.uleb128 0xe
 3968 009e 13       		.uleb128 0x13
 3969 009f 01       		.byte	0x1
 3970 00a0 03       		.uleb128 0x3
 3971 00a1 08       		.uleb128 0x8
 3972 00a2 0B       		.uleb128 0xb
 3973 00a3 0B       		.uleb128 0xb
 3974 00a4 3A       		.uleb128 0x3a
 3975 00a5 0B       		.uleb128 0xb
 3976 00a6 3B       		.uleb128 0x3b
 3977 00a7 0B       		.uleb128 0xb
 3978 00a8 01       		.uleb128 0x1
 3979 00a9 13       		.uleb128 0x13
 3980 00aa 00       		.byte	0
 3981 00ab 00       		.byte	0
 3982 00ac 0F       		.uleb128 0xf
 3983 00ad 2E       		.uleb128 0x2e
 3984 00ae 00       		.byte	0
 3985 00af 3F       		.uleb128 0x3f
 3986 00b0 19       		.uleb128 0x19
 3987 00b1 03       		.uleb128 0x3
 3988 00b2 0E       		.uleb128 0xe
 3989 00b3 3A       		.uleb128 0x3a
 3990 00b4 0B       		.uleb128 0xb
 3991 00b5 3B       		.uleb128 0x3b
 3992 00b6 0B       		.uleb128 0xb
 3993 00b7 27       		.uleb128 0x27
 3994 00b8 19       		.uleb128 0x19
 3995 00b9 11       		.uleb128 0x11
 3996 00ba 01       		.uleb128 0x1
 3997 00bb 12       		.uleb128 0x12
 3998 00bc 06       		.uleb128 0x6
 3999 00bd 40       		.uleb128 0x40
 4000 00be 18       		.uleb128 0x18
 4001 00bf 9642     		.uleb128 0x2116
 4002 00c1 19       		.uleb128 0x19
 4003 00c2 00       		.byte	0
 4004 00c3 00       		.byte	0
 4005 00c4 10       		.uleb128 0x10
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 87


 4006 00c5 2E       		.uleb128 0x2e
 4007 00c6 01       		.byte	0x1
 4008 00c7 3F       		.uleb128 0x3f
 4009 00c8 19       		.uleb128 0x19
 4010 00c9 03       		.uleb128 0x3
 4011 00ca 0E       		.uleb128 0xe
 4012 00cb 3A       		.uleb128 0x3a
 4013 00cc 0B       		.uleb128 0xb
 4014 00cd 3B       		.uleb128 0x3b
 4015 00ce 0B       		.uleb128 0xb
 4016 00cf 11       		.uleb128 0x11
 4017 00d0 01       		.uleb128 0x1
 4018 00d1 12       		.uleb128 0x12
 4019 00d2 06       		.uleb128 0x6
 4020 00d3 40       		.uleb128 0x40
 4021 00d4 18       		.uleb128 0x18
 4022 00d5 9642     		.uleb128 0x2116
 4023 00d7 19       		.uleb128 0x19
 4024 00d8 01       		.uleb128 0x1
 4025 00d9 13       		.uleb128 0x13
 4026 00da 00       		.byte	0
 4027 00db 00       		.byte	0
 4028 00dc 11       		.uleb128 0x11
 4029 00dd 34       		.uleb128 0x34
 4030 00de 00       		.byte	0
 4031 00df 03       		.uleb128 0x3
 4032 00e0 0E       		.uleb128 0xe
 4033 00e1 3A       		.uleb128 0x3a
 4034 00e2 0B       		.uleb128 0xb
 4035 00e3 3B       		.uleb128 0x3b
 4036 00e4 0B       		.uleb128 0xb
 4037 00e5 49       		.uleb128 0x49
 4038 00e6 13       		.uleb128 0x13
 4039 00e7 02       		.uleb128 0x2
 4040 00e8 18       		.uleb128 0x18
 4041 00e9 00       		.byte	0
 4042 00ea 00       		.byte	0
 4043 00eb 12       		.uleb128 0x12
 4044 00ec 2E       		.uleb128 0x2e
 4045 00ed 01       		.byte	0x1
 4046 00ee 3F       		.uleb128 0x3f
 4047 00ef 19       		.uleb128 0x19
 4048 00f0 03       		.uleb128 0x3
 4049 00f1 0E       		.uleb128 0xe
 4050 00f2 3A       		.uleb128 0x3a
 4051 00f3 0B       		.uleb128 0xb
 4052 00f4 3B       		.uleb128 0x3b
 4053 00f5 0B       		.uleb128 0xb
 4054 00f6 49       		.uleb128 0x49
 4055 00f7 13       		.uleb128 0x13
 4056 00f8 11       		.uleb128 0x11
 4057 00f9 01       		.uleb128 0x1
 4058 00fa 12       		.uleb128 0x12
 4059 00fb 06       		.uleb128 0x6
 4060 00fc 40       		.uleb128 0x40
 4061 00fd 18       		.uleb128 0x18
 4062 00fe 9642     		.uleb128 0x2116
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 88


 4063 0100 19       		.uleb128 0x19
 4064 0101 01       		.uleb128 0x1
 4065 0102 13       		.uleb128 0x13
 4066 0103 00       		.byte	0
 4067 0104 00       		.byte	0
 4068 0105 13       		.uleb128 0x13
 4069 0106 2E       		.uleb128 0x2e
 4070 0107 00       		.byte	0
 4071 0108 3F       		.uleb128 0x3f
 4072 0109 19       		.uleb128 0x19
 4073 010a 03       		.uleb128 0x3
 4074 010b 0E       		.uleb128 0xe
 4075 010c 3A       		.uleb128 0x3a
 4076 010d 0B       		.uleb128 0xb
 4077 010e 3B       		.uleb128 0x3b
 4078 010f 0B       		.uleb128 0xb
 4079 0110 11       		.uleb128 0x11
 4080 0111 01       		.uleb128 0x1
 4081 0112 12       		.uleb128 0x12
 4082 0113 06       		.uleb128 0x6
 4083 0114 40       		.uleb128 0x40
 4084 0115 18       		.uleb128 0x18
 4085 0116 9642     		.uleb128 0x2116
 4086 0118 19       		.uleb128 0x19
 4087 0119 00       		.byte	0
 4088 011a 00       		.byte	0
 4089 011b 14       		.uleb128 0x14
 4090 011c 2E       		.uleb128 0x2e
 4091 011d 01       		.byte	0x1
 4092 011e 3F       		.uleb128 0x3f
 4093 011f 19       		.uleb128 0x19
 4094 0120 03       		.uleb128 0x3
 4095 0121 0E       		.uleb128 0xe
 4096 0122 3A       		.uleb128 0x3a
 4097 0123 0B       		.uleb128 0xb
 4098 0124 3B       		.uleb128 0x3b
 4099 0125 0B       		.uleb128 0xb
 4100 0126 27       		.uleb128 0x27
 4101 0127 19       		.uleb128 0x19
 4102 0128 11       		.uleb128 0x11
 4103 0129 01       		.uleb128 0x1
 4104 012a 12       		.uleb128 0x12
 4105 012b 06       		.uleb128 0x6
 4106 012c 40       		.uleb128 0x40
 4107 012d 18       		.uleb128 0x18
 4108 012e 9642     		.uleb128 0x2116
 4109 0130 19       		.uleb128 0x19
 4110 0131 01       		.uleb128 0x1
 4111 0132 13       		.uleb128 0x13
 4112 0133 00       		.byte	0
 4113 0134 00       		.byte	0
 4114 0135 15       		.uleb128 0x15
 4115 0136 05       		.uleb128 0x5
 4116 0137 00       		.byte	0
 4117 0138 03       		.uleb128 0x3
 4118 0139 0E       		.uleb128 0xe
 4119 013a 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 89


 4120 013b 0B       		.uleb128 0xb
 4121 013c 3B       		.uleb128 0x3b
 4122 013d 0B       		.uleb128 0xb
 4123 013e 49       		.uleb128 0x49
 4124 013f 13       		.uleb128 0x13
 4125 0140 02       		.uleb128 0x2
 4126 0141 18       		.uleb128 0x18
 4127 0142 00       		.byte	0
 4128 0143 00       		.byte	0
 4129 0144 16       		.uleb128 0x16
 4130 0145 2E       		.uleb128 0x2e
 4131 0146 01       		.byte	0x1
 4132 0147 3F       		.uleb128 0x3f
 4133 0148 19       		.uleb128 0x19
 4134 0149 03       		.uleb128 0x3
 4135 014a 0E       		.uleb128 0xe
 4136 014b 3A       		.uleb128 0x3a
 4137 014c 0B       		.uleb128 0xb
 4138 014d 3B       		.uleb128 0x3b
 4139 014e 0B       		.uleb128 0xb
 4140 014f 27       		.uleb128 0x27
 4141 0150 19       		.uleb128 0x19
 4142 0151 49       		.uleb128 0x49
 4143 0152 13       		.uleb128 0x13
 4144 0153 11       		.uleb128 0x11
 4145 0154 01       		.uleb128 0x1
 4146 0155 12       		.uleb128 0x12
 4147 0156 06       		.uleb128 0x6
 4148 0157 40       		.uleb128 0x40
 4149 0158 18       		.uleb128 0x18
 4150 0159 9642     		.uleb128 0x2116
 4151 015b 19       		.uleb128 0x19
 4152 015c 01       		.uleb128 0x1
 4153 015d 13       		.uleb128 0x13
 4154 015e 00       		.byte	0
 4155 015f 00       		.byte	0
 4156 0160 17       		.uleb128 0x17
 4157 0161 2E       		.uleb128 0x2e
 4158 0162 01       		.byte	0x1
 4159 0163 3F       		.uleb128 0x3f
 4160 0164 19       		.uleb128 0x19
 4161 0165 03       		.uleb128 0x3
 4162 0166 0E       		.uleb128 0xe
 4163 0167 3A       		.uleb128 0x3a
 4164 0168 0B       		.uleb128 0xb
 4165 0169 3B       		.uleb128 0x3b
 4166 016a 05       		.uleb128 0x5
 4167 016b 27       		.uleb128 0x27
 4168 016c 19       		.uleb128 0x19
 4169 016d 11       		.uleb128 0x11
 4170 016e 01       		.uleb128 0x1
 4171 016f 12       		.uleb128 0x12
 4172 0170 06       		.uleb128 0x6
 4173 0171 40       		.uleb128 0x40
 4174 0172 18       		.uleb128 0x18
 4175 0173 9742     		.uleb128 0x2117
 4176 0175 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 90


 4177 0176 01       		.uleb128 0x1
 4178 0177 13       		.uleb128 0x13
 4179 0178 00       		.byte	0
 4180 0179 00       		.byte	0
 4181 017a 18       		.uleb128 0x18
 4182 017b 05       		.uleb128 0x5
 4183 017c 00       		.byte	0
 4184 017d 03       		.uleb128 0x3
 4185 017e 0E       		.uleb128 0xe
 4186 017f 3A       		.uleb128 0x3a
 4187 0180 0B       		.uleb128 0xb
 4188 0181 3B       		.uleb128 0x3b
 4189 0182 05       		.uleb128 0x5
 4190 0183 49       		.uleb128 0x49
 4191 0184 13       		.uleb128 0x13
 4192 0185 02       		.uleb128 0x2
 4193 0186 18       		.uleb128 0x18
 4194 0187 00       		.byte	0
 4195 0188 00       		.byte	0
 4196 0189 19       		.uleb128 0x19
 4197 018a 2E       		.uleb128 0x2e
 4198 018b 01       		.byte	0x1
 4199 018c 3F       		.uleb128 0x3f
 4200 018d 19       		.uleb128 0x19
 4201 018e 03       		.uleb128 0x3
 4202 018f 0E       		.uleb128 0xe
 4203 0190 3A       		.uleb128 0x3a
 4204 0191 0B       		.uleb128 0xb
 4205 0192 3B       		.uleb128 0x3b
 4206 0193 05       		.uleb128 0x5
 4207 0194 27       		.uleb128 0x27
 4208 0195 19       		.uleb128 0x19
 4209 0196 49       		.uleb128 0x49
 4210 0197 13       		.uleb128 0x13
 4211 0198 11       		.uleb128 0x11
 4212 0199 01       		.uleb128 0x1
 4213 019a 12       		.uleb128 0x12
 4214 019b 06       		.uleb128 0x6
 4215 019c 40       		.uleb128 0x40
 4216 019d 18       		.uleb128 0x18
 4217 019e 9742     		.uleb128 0x2117
 4218 01a0 19       		.uleb128 0x19
 4219 01a1 01       		.uleb128 0x1
 4220 01a2 13       		.uleb128 0x13
 4221 01a3 00       		.byte	0
 4222 01a4 00       		.byte	0
 4223 01a5 1A       		.uleb128 0x1a
 4224 01a6 34       		.uleb128 0x34
 4225 01a7 00       		.byte	0
 4226 01a8 03       		.uleb128 0x3
 4227 01a9 0E       		.uleb128 0xe
 4228 01aa 3A       		.uleb128 0x3a
 4229 01ab 0B       		.uleb128 0xb
 4230 01ac 3B       		.uleb128 0x3b
 4231 01ad 05       		.uleb128 0x5
 4232 01ae 49       		.uleb128 0x49
 4233 01af 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 91


 4234 01b0 02       		.uleb128 0x2
 4235 01b1 18       		.uleb128 0x18
 4236 01b2 00       		.byte	0
 4237 01b3 00       		.byte	0
 4238 01b4 1B       		.uleb128 0x1b
 4239 01b5 2E       		.uleb128 0x2e
 4240 01b6 01       		.byte	0x1
 4241 01b7 3F       		.uleb128 0x3f
 4242 01b8 19       		.uleb128 0x19
 4243 01b9 03       		.uleb128 0x3
 4244 01ba 0E       		.uleb128 0xe
 4245 01bb 3A       		.uleb128 0x3a
 4246 01bc 0B       		.uleb128 0xb
 4247 01bd 3B       		.uleb128 0x3b
 4248 01be 05       		.uleb128 0x5
 4249 01bf 11       		.uleb128 0x11
 4250 01c0 01       		.uleb128 0x1
 4251 01c1 12       		.uleb128 0x12
 4252 01c2 06       		.uleb128 0x6
 4253 01c3 40       		.uleb128 0x40
 4254 01c4 18       		.uleb128 0x18
 4255 01c5 9642     		.uleb128 0x2116
 4256 01c7 19       		.uleb128 0x19
 4257 01c8 01       		.uleb128 0x1
 4258 01c9 13       		.uleb128 0x13
 4259 01ca 00       		.byte	0
 4260 01cb 00       		.byte	0
 4261 01cc 1C       		.uleb128 0x1c
 4262 01cd 2E       		.uleb128 0x2e
 4263 01ce 00       		.byte	0
 4264 01cf 3F       		.uleb128 0x3f
 4265 01d0 19       		.uleb128 0x19
 4266 01d1 03       		.uleb128 0x3
 4267 01d2 0E       		.uleb128 0xe
 4268 01d3 3A       		.uleb128 0x3a
 4269 01d4 0B       		.uleb128 0xb
 4270 01d5 3B       		.uleb128 0x3b
 4271 01d6 05       		.uleb128 0x5
 4272 01d7 27       		.uleb128 0x27
 4273 01d8 19       		.uleb128 0x19
 4274 01d9 49       		.uleb128 0x49
 4275 01da 13       		.uleb128 0x13
 4276 01db 11       		.uleb128 0x11
 4277 01dc 01       		.uleb128 0x1
 4278 01dd 12       		.uleb128 0x12
 4279 01de 06       		.uleb128 0x6
 4280 01df 40       		.uleb128 0x40
 4281 01e0 18       		.uleb128 0x18
 4282 01e1 9642     		.uleb128 0x2116
 4283 01e3 19       		.uleb128 0x19
 4284 01e4 00       		.byte	0
 4285 01e5 00       		.byte	0
 4286 01e6 1D       		.uleb128 0x1d
 4287 01e7 2E       		.uleb128 0x2e
 4288 01e8 01       		.byte	0x1
 4289 01e9 3F       		.uleb128 0x3f
 4290 01ea 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 92


 4291 01eb 03       		.uleb128 0x3
 4292 01ec 0E       		.uleb128 0xe
 4293 01ed 3A       		.uleb128 0x3a
 4294 01ee 0B       		.uleb128 0xb
 4295 01ef 3B       		.uleb128 0x3b
 4296 01f0 05       		.uleb128 0x5
 4297 01f1 49       		.uleb128 0x49
 4298 01f2 13       		.uleb128 0x13
 4299 01f3 11       		.uleb128 0x11
 4300 01f4 01       		.uleb128 0x1
 4301 01f5 12       		.uleb128 0x12
 4302 01f6 06       		.uleb128 0x6
 4303 01f7 40       		.uleb128 0x40
 4304 01f8 18       		.uleb128 0x18
 4305 01f9 9642     		.uleb128 0x2116
 4306 01fb 19       		.uleb128 0x19
 4307 01fc 01       		.uleb128 0x1
 4308 01fd 13       		.uleb128 0x13
 4309 01fe 00       		.byte	0
 4310 01ff 00       		.byte	0
 4311 0200 1E       		.uleb128 0x1e
 4312 0201 0B       		.uleb128 0xb
 4313 0202 01       		.byte	0x1
 4314 0203 11       		.uleb128 0x11
 4315 0204 01       		.uleb128 0x1
 4316 0205 12       		.uleb128 0x12
 4317 0206 06       		.uleb128 0x6
 4318 0207 00       		.byte	0
 4319 0208 00       		.byte	0
 4320 0209 1F       		.uleb128 0x1f
 4321 020a 0B       		.uleb128 0xb
 4322 020b 01       		.byte	0x1
 4323 020c 11       		.uleb128 0x11
 4324 020d 01       		.uleb128 0x1
 4325 020e 12       		.uleb128 0x12
 4326 020f 06       		.uleb128 0x6
 4327 0210 01       		.uleb128 0x1
 4328 0211 13       		.uleb128 0x13
 4329 0212 00       		.byte	0
 4330 0213 00       		.byte	0
 4331 0214 20       		.uleb128 0x20
 4332 0215 21       		.uleb128 0x21
 4333 0216 00       		.byte	0
 4334 0217 49       		.uleb128 0x49
 4335 0218 13       		.uleb128 0x13
 4336 0219 2F       		.uleb128 0x2f
 4337 021a 05       		.uleb128 0x5
 4338 021b 00       		.byte	0
 4339 021c 00       		.byte	0
 4340 021d 21       		.uleb128 0x21
 4341 021e 2E       		.uleb128 0x2e
 4342 021f 01       		.byte	0x1
 4343 0220 3F       		.uleb128 0x3f
 4344 0221 19       		.uleb128 0x19
 4345 0222 03       		.uleb128 0x3
 4346 0223 0E       		.uleb128 0xe
 4347 0224 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 93


 4348 0225 0B       		.uleb128 0xb
 4349 0226 3B       		.uleb128 0x3b
 4350 0227 05       		.uleb128 0x5
 4351 0228 27       		.uleb128 0x27
 4352 0229 19       		.uleb128 0x19
 4353 022a 49       		.uleb128 0x49
 4354 022b 13       		.uleb128 0x13
 4355 022c 11       		.uleb128 0x11
 4356 022d 01       		.uleb128 0x1
 4357 022e 12       		.uleb128 0x12
 4358 022f 06       		.uleb128 0x6
 4359 0230 40       		.uleb128 0x40
 4360 0231 18       		.uleb128 0x18
 4361 0232 9642     		.uleb128 0x2116
 4362 0234 19       		.uleb128 0x19
 4363 0235 01       		.uleb128 0x1
 4364 0236 13       		.uleb128 0x13
 4365 0237 00       		.byte	0
 4366 0238 00       		.byte	0
 4367 0239 22       		.uleb128 0x22
 4368 023a 34       		.uleb128 0x34
 4369 023b 00       		.byte	0
 4370 023c 03       		.uleb128 0x3
 4371 023d 08       		.uleb128 0x8
 4372 023e 3A       		.uleb128 0x3a
 4373 023f 0B       		.uleb128 0xb
 4374 0240 3B       		.uleb128 0x3b
 4375 0241 05       		.uleb128 0x5
 4376 0242 49       		.uleb128 0x49
 4377 0243 13       		.uleb128 0x13
 4378 0244 02       		.uleb128 0x2
 4379 0245 18       		.uleb128 0x18
 4380 0246 00       		.byte	0
 4381 0247 00       		.byte	0
 4382 0248 23       		.uleb128 0x23
 4383 0249 34       		.uleb128 0x34
 4384 024a 00       		.byte	0
 4385 024b 03       		.uleb128 0x3
 4386 024c 0E       		.uleb128 0xe
 4387 024d 3A       		.uleb128 0x3a
 4388 024e 0B       		.uleb128 0xb
 4389 024f 3B       		.uleb128 0x3b
 4390 0250 05       		.uleb128 0x5
 4391 0251 49       		.uleb128 0x49
 4392 0252 13       		.uleb128 0x13
 4393 0253 3F       		.uleb128 0x3f
 4394 0254 19       		.uleb128 0x19
 4395 0255 3C       		.uleb128 0x3c
 4396 0256 19       		.uleb128 0x19
 4397 0257 00       		.byte	0
 4398 0258 00       		.byte	0
 4399 0259 24       		.uleb128 0x24
 4400 025a 34       		.uleb128 0x34
 4401 025b 00       		.byte	0
 4402 025c 03       		.uleb128 0x3
 4403 025d 0E       		.uleb128 0xe
 4404 025e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 94


 4405 025f 0B       		.uleb128 0xb
 4406 0260 3B       		.uleb128 0x3b
 4407 0261 0B       		.uleb128 0xb
 4408 0262 49       		.uleb128 0x49
 4409 0263 13       		.uleb128 0x13
 4410 0264 3F       		.uleb128 0x3f
 4411 0265 19       		.uleb128 0x19
 4412 0266 02       		.uleb128 0x2
 4413 0267 18       		.uleb128 0x18
 4414 0268 00       		.byte	0
 4415 0269 00       		.byte	0
 4416 026a 25       		.uleb128 0x25
 4417 026b 34       		.uleb128 0x34
 4418 026c 00       		.byte	0
 4419 026d 03       		.uleb128 0x3
 4420 026e 08       		.uleb128 0x8
 4421 026f 3A       		.uleb128 0x3a
 4422 0270 0B       		.uleb128 0xb
 4423 0271 3B       		.uleb128 0x3b
 4424 0272 0B       		.uleb128 0xb
 4425 0273 49       		.uleb128 0x49
 4426 0274 13       		.uleb128 0x13
 4427 0275 3F       		.uleb128 0x3f
 4428 0276 19       		.uleb128 0x19
 4429 0277 02       		.uleb128 0x2
 4430 0278 18       		.uleb128 0x18
 4431 0279 00       		.byte	0
 4432 027a 00       		.byte	0
 4433 027b 00       		.byte	0
 4434              		.section	.debug_aranges,"",%progbits
 4435 0000 8C000000 		.4byte	0x8c
 4436 0004 0200     		.2byte	0x2
 4437 0006 00000000 		.4byte	.Ldebug_info0
 4438 000a 04       		.byte	0x4
 4439 000b 00       		.byte	0
 4440 000c 0000     		.2byte	0
 4441 000e 0000     		.2byte	0
 4442 0010 00000000 		.4byte	.LFB64
 4443 0014 0C000000 		.4byte	.LFE64-.LFB64
 4444 0018 00000000 		.4byte	.LFB65
 4445 001c 58010000 		.4byte	.LFE65-.LFB65
 4446 0020 00000000 		.4byte	.LFB66
 4447 0024 B8000000 		.4byte	.LFE66-.LFB66
 4448 0028 00000000 		.4byte	.LFB67
 4449 002c 2A000000 		.4byte	.LFE67-.LFB67
 4450 0030 00000000 		.4byte	.LFB68
 4451 0034 8C000000 		.4byte	.LFE68-.LFB68
 4452 0038 00000000 		.4byte	.LFB69
 4453 003c 48000000 		.4byte	.LFE69-.LFB69
 4454 0040 00000000 		.4byte	.LFB70
 4455 0044 1E000000 		.4byte	.LFE70-.LFB70
 4456 0048 00000000 		.4byte	.LFB71
 4457 004c 46000000 		.4byte	.LFE71-.LFB71
 4458 0050 00000000 		.4byte	.LFB72
 4459 0054 04010000 		.4byte	.LFE72-.LFB72
 4460 0058 00000000 		.4byte	.LFB73
 4461 005c 1E000000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 95


 4462 0060 00000000 		.4byte	.LFB74
 4463 0064 5C040000 		.4byte	.LFE74-.LFB74
 4464 0068 00000000 		.4byte	.LFB75
 4465 006c 44000000 		.4byte	.LFE75-.LFB75
 4466 0070 00000000 		.4byte	.LFB76
 4467 0074 9C020000 		.4byte	.LFE76-.LFB76
 4468 0078 00000000 		.4byte	.LFB77
 4469 007c 74000000 		.4byte	.LFE77-.LFB77
 4470 0080 00000000 		.4byte	.LFB78
 4471 0084 38010000 		.4byte	.LFE78-.LFB78
 4472 0088 00000000 		.4byte	0
 4473 008c 00000000 		.4byte	0
 4474              		.section	.debug_ranges,"",%progbits
 4475              	.Ldebug_ranges0:
 4476 0000 00000000 		.4byte	.LFB64
 4477 0004 0C000000 		.4byte	.LFE64
 4478 0008 00000000 		.4byte	.LFB65
 4479 000c 58010000 		.4byte	.LFE65
 4480 0010 00000000 		.4byte	.LFB66
 4481 0014 B8000000 		.4byte	.LFE66
 4482 0018 00000000 		.4byte	.LFB67
 4483 001c 2A000000 		.4byte	.LFE67
 4484 0020 00000000 		.4byte	.LFB68
 4485 0024 8C000000 		.4byte	.LFE68
 4486 0028 00000000 		.4byte	.LFB69
 4487 002c 48000000 		.4byte	.LFE69
 4488 0030 00000000 		.4byte	.LFB70
 4489 0034 1E000000 		.4byte	.LFE70
 4490 0038 00000000 		.4byte	.LFB71
 4491 003c 46000000 		.4byte	.LFE71
 4492 0040 00000000 		.4byte	.LFB72
 4493 0044 04010000 		.4byte	.LFE72
 4494 0048 00000000 		.4byte	.LFB73
 4495 004c 1E000000 		.4byte	.LFE73
 4496 0050 00000000 		.4byte	.LFB74
 4497 0054 5C040000 		.4byte	.LFE74
 4498 0058 00000000 		.4byte	.LFB75
 4499 005c 44000000 		.4byte	.LFE75
 4500 0060 00000000 		.4byte	.LFB76
 4501 0064 9C020000 		.4byte	.LFE76
 4502 0068 00000000 		.4byte	.LFB77
 4503 006c 74000000 		.4byte	.LFE77
 4504 0070 00000000 		.4byte	.LFB78
 4505 0074 38010000 		.4byte	.LFE78
 4506 0078 00000000 		.4byte	0
 4507 007c 00000000 		.4byte	0
 4508              		.section	.debug_line,"",%progbits
 4509              	.Ldebug_line0:
 4510 0000 4B040000 		.section	.debug_str,"MS",%progbits,1
 4510      02002802 
 4510      00000201 
 4510      FB0E0D00 
 4510      01010101 
 4511              	.LASF111:
 4512 0000 745F6D6F 		.ascii	"t_modem\000"
 4512      64656D00 
 4513              	.LASF12:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 96


 4514 0008 75696E74 		.ascii	"uint16\000"
 4514      313600
 4515              	.LASF51:
 4516 000f 746D5F68 		.ascii	"tm_hour\000"
 4516      6F757200 
 4517              	.LASF36:
 4518 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4518      696E7661 
 4518      6C69645F 
 4518      72656164 
 4518      696E6773 
 4519              	.LASF173:
 4520 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4520      73657273 
 4520      5C64616E 
 4520      747A5C44 
 4520      6F63756D 
 4521 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4521      2E637964 
 4521      736E00
 4522              	.LASF146:
 4523 0064 62756666 		.ascii	"buffer_overflow\000"
 4523      65725F6F 
 4523      76657266 
 4523      6C6F7700 
 4524              	.LASF142:
 4525 0074 66696C65 		.ascii	"fileName\000"
 4525      4E616D65 
 4525      00
 4526              	.LASF0:
 4527 007d 7369676E 		.ascii	"signed char\000"
 4527      65642063 
 4527      68617200 
 4528              	.LASF85:
 4529 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4529      74446F77 
 4529      6E526573 
 4529      6574436F 
 4529      6E646974 
 4530              	.LASF174:
 4531 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4531      75705F49 
 4531      535200
 4532              	.LASF171:
 4533 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4533      43313120 
 4533      352E342E 
 4533      31203230 
 4533      31363036 
 4534 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4534      20726576 
 4534      6973696F 
 4534      6E203233 
 4534      37373135 
 4535 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4535      66756E63 
 4535      74696F6E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 97


 4535      2D736563 
 4535      74696F6E 
 4536              	.LASF109:
 4537 013a 745F7072 		.ascii	"t_pressure\000"
 4537      65737375 
 4537      726500
 4538              	.LASF26:
 4539 0145 4D6F6E74 		.ascii	"Month\000"
 4539      6800
 4540              	.LASF7:
 4541 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4541      206C6F6E 
 4541      6720756E 
 4541      7369676E 
 4541      65642069 
 4542              	.LASF22:
 4543 0162 486F7572 		.ascii	"Hour\000"
 4543      00
 4544              	.LASF150:
 4545 0167 6D6F6465 		.ascii	"modem_state\000"
 4545      6D5F7374 
 4545      61746500 
 4546              	.LASF161:
 4547 0173 616C6172 		.ascii	"alarmMeasure\000"
 4547      6D4D6561 
 4547      73757265 
 4547      00
 4548              	.LASF143:
 4549 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4549      52784275 
 4549      66666572 
 4549      00
 4550              	.LASF169:
 4551 018d 74696D65 		.ascii	"timetoLevelSensor\000"
 4551      746F4C65 
 4551      76656C53 
 4551      656E736F 
 4551      7200
 4552              	.LASF107:
 4553 019f 745F6C65 		.ascii	"t_level_sensor\000"
 4553      76656C5F 
 4553      73656E73 
 4553      6F7200
 4554              	.LASF6:
 4555 01ae 6C6F6E67 		.ascii	"long long int\000"
 4555      206C6F6E 
 4555      6720696E 
 4555      7400
 4556              	.LASF120:
 4557 01bc 7061636B 		.ascii	"packets\000"
 4557      65747300 
 4558              	.LASF67:
 4559 01c4 65636E6F 		.ascii	"ecno\000"
 4559      00
 4560              	.LASF162:
 4561 01c9 74696D65 		.ascii	"timeToMeasure\000"
 4561      546F4D65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 98


 4561      61737572 
 4561      6500
 4562              	.LASF70:
 4563 01d7 74696D65 		.ascii	"time_to_network_connect\000"
 4563      5F746F5F 
 4563      6E657477 
 4563      6F726B5F 
 4563      636F6E6E 
 4564              	.LASF164:
 4565 01ef 74696D65 		.ascii	"timeToSync\000"
 4565      546F5379 
 4565      6E6300
 4566              	.LASF39:
 4567 01fa 766F6C74 		.ascii	"voltage_solar\000"
 4567      6167655F 
 4567      736F6C61 
 4567      7200
 4568              	.LASF40:
 4569 0208 766F6C74 		.ascii	"voltage_charge_current\000"
 4569      6167655F 
 4569      63686172 
 4569      67655F63 
 4569      75727265 
 4570              	.LASF141:
 4571 021f 75706772 		.ascii	"upgrade_status\000"
 4571      6164655F 
 4571      73746174 
 4571      757300
 4572              	.LASF123:
 4573 022e 635F6461 		.ascii	"c_data_count_sent\000"
 4573      74615F63 
 4573      6F756E74 
 4573      5F73656E 
 4573      7400
 4574              	.LASF64:
 4575 0240 6D6F6465 		.ascii	"modem_info_t\000"
 4575      6D5F696E 
 4575      666F5F74 
 4575      00
 4576              	.LASF65:
 4577 024d 72786C65 		.ascii	"rxlev\000"
 4577      7600
 4578              	.LASF4:
 4579 0253 6C6F6E67 		.ascii	"long int\000"
 4579      20696E74 
 4579      00
 4580              	.LASF71:
 4581 025c 74696D65 		.ascii	"time_to_acquire_ip\000"
 4581      5F746F5F 
 4581      61637175 
 4581      6972655F 
 4581      697000
 4582              	.LASF86:
 4583 026f 616C6172 		.ascii	"alarm\000"
 4583      6D00
 4584              	.LASF45:
 4585 0275 70726573 		.ascii	"pressure_voltage_off\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 99


 4585      73757265 
 4585      5F766F6C 
 4585      74616765 
 4585      5F6F6666 
 4586              	.LASF11:
 4587 028a 75696E74 		.ascii	"uint8\000"
 4587      3800
 4588              	.LASF115:
 4589 0290 635F7472 		.ascii	"c_try_counter\000"
 4589      795F636F 
 4589      756E7465 
 4589      7200
 4590              	.LASF126:
 4591 029e 73656E64 		.ascii	"send_time\000"
 4591      5F74696D 
 4591      6500
 4592              	.LASF167:
 4593 02a8 74696D65 		.ascii	"timeToAppLED\000"
 4593      546F4170 
 4593      704C4544 
 4593      00
 4594              	.LASF16:
 4595 02b5 696E7433 		.ascii	"int32\000"
 4595      3200
 4596              	.LASF73:
 4597 02bb 6E6F6465 		.ascii	"node_type\000"
 4597      5F747970 
 4597      6500
 4598              	.LASF112:
 4599 02c5 73796E63 		.ascii	"syncData\000"
 4599      44617461 
 4599      00
 4600              	.LASF121:
 4601 02ce 6E657477 		.ascii	"network_time\000"
 4601      6F726B5F 
 4601      74696D65 
 4601      00
 4602              	.LASF13:
 4603 02db 75696E74 		.ascii	"uint32\000"
 4603      333200
 4604              	.LASF62:
 4605 02e2 6D6F6465 		.ascii	"model_id\000"
 4605      6C5F6964 
 4605      00
 4606              	.LASF33:
 4607 02eb 616C6C5F 		.ascii	"all_level_readings\000"
 4607      6C657665 
 4607      6C5F7265 
 4607      6164696E 
 4607      677300
 4608              	.LASF82:
 4609 02fe 636F756E 		.ascii	"countDownValue\000"
 4609      74446F77 
 4609      6E56616C 
 4609      756500
 4610              	.LASF137:
 4611 030d 75706772 		.ascii	"upgraded\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 100


 4611      61646564 
 4611      00
 4612              	.LASF53:
 4613 0316 746D5F6D 		.ascii	"tm_mon\000"
 4613      6F6E00
 4614              	.LASF77:
 4615 031d 64656275 		.ascii	"debug_level\000"
 4615      675F6C65 
 4615      76656C00 
 4616              	.LASF139:
 4617 0329 706F7274 		.ascii	"port\000"
 4617      00
 4618              	.LASF58:
 4619 032e 76616C75 		.ascii	"value\000"
 4619      6500
 4620              	.LASF138:
 4621 0334 686F7374 		.ascii	"host\000"
 4621      00
 4622              	.LASF54:
 4623 0339 746D5F79 		.ascii	"tm_year\000"
 4623      65617200 
 4624              	.LASF163:
 4625 0341 616C6172 		.ascii	"alarmSync\000"
 4625      6D53796E 
 4625      6300
 4626              	.LASF44:
 4627 034b 70726573 		.ascii	"pressure_voltage_on\000"
 4627      73757265 
 4627      5F766F6C 
 4627      74616765 
 4627      5F6F6E00 
 4628              	.LASF154:
 4629 035f 4170705F 		.ascii	"App_LED_enabled\000"
 4629      4C45445F 
 4629      656E6162 
 4629      6C656400 
 4630              	.LASF135:
 4631 036f 73657454 		.ascii	"setTime\000"
 4631      696D6500 
 4632              	.LASF60:
 4633 0377 6B65795F 		.ascii	"key_value_t\000"
 4633      76616C75 
 4633      655F7400 
 4634              	.LASF97:
 4635 0383 41796F49 		.ascii	"AyoItsTime\000"
 4635      74735469 
 4635      6D6500
 4636              	.LASF35:
 4637 038e 6E756D5F 		.ascii	"num_valid_readings\000"
 4637      76616C69 
 4637      645F7265 
 4637      6164696E 
 4637      677300
 4638              	.LASF125:
 4639 03a1 68747470 		.ascii	"http_chunk\000"
 4639      5F636875 
 4639      6E6B00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 101


 4640              	.LASF132:
 4641 03ac 6D5F766F 		.ascii	"m_voltage\000"
 4641      6C746167 
 4641      6500
 4642              	.LASF5:
 4643 03b6 6C6F6E67 		.ascii	"long unsigned int\000"
 4643      20756E73 
 4643      69676E65 
 4643      6420696E 
 4643      7400
 4644              	.LASF94:
 4645 03c8 7472795F 		.ascii	"try_counter\000"
 4645      636F756E 
 4645      74657200 
 4646              	.LASF116:
 4647 03d4 64617461 		.ascii	"data_count_desired\000"
 4647      5F636F75 
 4647      6E745F64 
 4647      65736972 
 4647      656400
 4648              	.LASF38:
 4649 03e7 766F6C74 		.ascii	"voltage_battery\000"
 4649      6167655F 
 4649      62617474 
 4649      65727900 
 4650              	.LASF24:
 4651 03f7 4461794F 		.ascii	"DayOfMonth\000"
 4651      664D6F6E 
 4651      746800
 4652              	.LASF129:
 4653 0402 6D616B65 		.ascii	"makeMeasurements\000"
 4653      4D656173 
 4653      7572656D 
 4653      656E7473 
 4653      00
 4654              	.LASF149:
 4655 0413 64617461 		.ascii	"data\000"
 4655      00
 4656              	.LASF91:
 4657 0418 65705F70 		.ascii	"ep_port\000"
 4657      6F727400 
 4658              	.LASF57:
 4659 0420 746D5F69 		.ascii	"tm_isdst\000"
 4659      73647374 
 4659      00
 4660              	.LASF87:
 4661 0429 6D6F6465 		.ascii	"modem_info\000"
 4661      6D5F696E 
 4661      666F00
 4662              	.LASF90:
 4663 0434 65705F68 		.ascii	"ep_host\000"
 4663      6F737400 
 4664              	.LASF14:
 4665 043c 696E7438 		.ascii	"int8\000"
 4665      00
 4666              	.LASF96:
 4667 0441 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 102


 4667      576F726B 
 4667      576F726B 
 4667      576F726B 
 4667      576F726B 
 4668              	.LASF117:
 4669 045a 635F6461 		.ascii	"c_data_count_desired\000"
 4669      74615F63 
 4669      6F756E74 
 4669      5F646573 
 4669      69726564 
 4670              	.LASF110:
 4671 046f 745F7364 		.ascii	"t_sd_card\000"
 4671      5F636172 
 4671      6400
 4672              	.LASF2:
 4673 0479 73686F72 		.ascii	"short int\000"
 4673      7420696E 
 4673      7400
 4674              	.LASF166:
 4675 0483 616C6172 		.ascii	"alarmAppLED\000"
 4675      6D417070 
 4675      4C454400 
 4676              	.LASF151:
 4677 048f 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4677      6D5F7374 
 4677      6172745F 
 4677      74696D65 
 4677      5F737461 
 4678              	.LASF89:
 4679 04a6 7379735F 		.ascii	"sys_info_t\000"
 4679      696E666F 
 4679      5F7400
 4680              	.LASF81:
 4681 04b1 75706461 		.ascii	"updatable_parameters_t\000"
 4681      7461626C 
 4681      655F7061 
 4681      72616D65 
 4681      74657273 
 4682              	.LASF98:
 4683 04c8 616C6172 		.ascii	"alarmType\000"
 4683      6D547970 
 4683      6500
 4684              	.LASF147:
 4685 04d2 64617461 		.ascii	"dataPointsInStack\000"
 4685      506F696E 
 4685      7473496E 
 4685      53746163 
 4685      6B00
 4686              	.LASF50:
 4687 04e4 746D5F6D 		.ascii	"tm_min\000"
 4687      696E00
 4688              	.LASF140:
 4689 04eb 726F7574 		.ascii	"route\000"
 4689      6500
 4690              	.LASF99:
 4691 04f1 616C6172 		.ascii	"alarmToBeUpdated\000"
 4691      6D546F42 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 103


 4691      65557064 
 4691      61746564 
 4691      00
 4692              	.LASF21:
 4693 0502 73697A65 		.ascii	"sizetype\000"
 4693      74797065 
 4693      00
 4694              	.LASF56:
 4695 050b 746D5F79 		.ascii	"tm_yday\000"
 4695      64617900 
 4696              	.LASF92:
 4697 0513 7379735F 		.ascii	"sys_settings_t\000"
 4697      73657474 
 4697      696E6773 
 4697      5F7400
 4698              	.LASF136:
 4699 0522 6C6F6361 		.ascii	"localTime\000"
 4699      6C54696D 
 4699      6500
 4700              	.LASF165:
 4701 052c 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4701      546F5379 
 4701      636E5265 
 4701      6D6F7465 
 4701      50617261 
 4702              	.LASF59:
 4703 0543 74696D65 		.ascii	"timeStamp\000"
 4703      5374616D 
 4703      7000
 4704              	.LASF28:
 4705 054d 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4705      54494D45 
 4705      5F444154 
 4705      4500
 4706              	.LASF153:
 4707 055b 75706461 		.ascii	"updatable_parameters\000"
 4707      7461626C 
 4707      655F7061 
 4707      72616D65 
 4707      74657273 
 4708              	.LASF103:
 4709 0570 43726561 		.ascii	"CreateAlarm\000"
 4709      7465416C 
 4709      61726D00 
 4710              	.LASF124:
 4711 057c 7061636B 		.ascii	"packet\000"
 4711      657400
 4712              	.LASF113:
 4713 0583 735F7273 		.ascii	"s_rsrp\000"
 4713      727000
 4714              	.LASF41:
 4715 058a 766F6C74 		.ascii	"voltage_pressure\000"
 4715      6167655F 
 4715      70726573 
 4715      73757265 
 4715      00
 4716              	.LASF156:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 104


 4717 059b 68747470 		.ascii	"http_request\000"
 4717      5F726571 
 4717      75657374 
 4717      00
 4718              	.LASF17:
 4719 05a8 666C6F61 		.ascii	"float\000"
 4719      7400
 4720              	.LASF37:
 4721 05ae 6C657665 		.ascii	"level_sensor_t\000"
 4721      6C5F7365 
 4721      6E736F72 
 4721      5F7400
 4722              	.LASF114:
 4723 05bd 735F7273 		.ascii	"s_rscp\000"
 4723      637000
 4724              	.LASF128:
 4725 05c4 636F6E66 		.ascii	"configureRemoteParams\000"
 4725      69677572 
 4725      6552656D 
 4725      6F746550 
 4725      6172616D 
 4726              	.LASF170:
 4727 05da 44617461 		.ascii	"Data_fileName\000"
 4727      5F66696C 
 4727      654E616D 
 4727      6500
 4728              	.LASF95:
 4729 05e8 6D6F6465 		.ascii	"modem_status\000"
 4729      6D5F7374 
 4729      61747573 
 4729      00
 4730              	.LASF29:
 4731 05f5 74657374 		.ascii	"test_name\000"
 4731      5F6E616D 
 4731      6500
 4732              	.LASF27:
 4733 05ff 59656172 		.ascii	"Year\000"
 4733      00
 4734              	.LASF80:
 4735 0604 5F426F6F 		.ascii	"_Bool\000"
 4735      6C00
 4736              	.LASF10:
 4737 060a 696E7433 		.ascii	"int32_t\000"
 4737      325F7400 
 4738              	.LASF1:
 4739 0612 756E7369 		.ascii	"unsigned char\000"
 4739      676E6564 
 4739      20636861 
 4739      7200
 4740              	.LASF160:
 4741 0620 73797374 		.ascii	"system_settings\000"
 4741      656D5F73 
 4741      65747469 
 4741      6E677300 
 4742              	.LASF69:
 4743 0630 72737270 		.ascii	"rsrp\000"
 4743      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 105


 4744              	.LASF68:
 4745 0635 72737271 		.ascii	"rsrq\000"
 4745      00
 4746              	.LASF100:
 4747 063a 52657365 		.ascii	"ResetAlarm\000"
 4747      74416C61 
 4747      726D00
 4748              	.LASF127:
 4749 0645 735F7365 		.ascii	"s_send_time\000"
 4749      6E645F74 
 4749      696D6500 
 4750              	.LASF76:
 4751 0651 73796E63 		.ascii	"sync_time\000"
 4751      5F74696D 
 4751      6500
 4752              	.LASF47:
 4753 065b 70726573 		.ascii	"pressure_depth\000"
 4753      73757265 
 4753      5F646570 
 4753      746800
 4754              	.LASF66:
 4755 066a 72736370 		.ascii	"rscp\000"
 4755      00
 4756              	.LASF23:
 4757 066f 4461794F 		.ascii	"DayOfWeek\000"
 4757      66576565 
 4757      6B00
 4758              	.LASF32:
 4759 0679 74657374 		.ascii	"test_t\000"
 4759      5F7400
 4760              	.LASF159:
 4761 0680 73797374 		.ascii	"system_info\000"
 4761      656D5F69 
 4761      6E666F00 
 4762              	.LASF63:
 4763 068c 696D6569 		.ascii	"imei\000"
 4763      00
 4764              	.LASF31:
 4765 0691 72656173 		.ascii	"reason\000"
 4765      6F6E00
 4766              	.LASF101:
 4767 0698 616C6172 		.ascii	"alarmToBeReset\000"
 4767      6D546F42 
 4767      65526573 
 4767      657400
 4768              	.LASF106:
 4769 06a7 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4769      6B697479 
 4769      43686563 
 4769      6B596F75 
 4769      7273656C 
 4770              	.LASF122:
 4771 06d3 64617461 		.ascii	"data_count_sent\000"
 4771      5F636F75 
 4771      6E745F73 
 4771      656E7400 
 4772              	.LASF72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 106


 4773 06e3 6D6F6465 		.ascii	"modem_stats_t\000"
 4773      6D5F7374 
 4773      6174735F 
 4773      7400
 4774              	.LASF46:
 4775 06f1 70726573 		.ascii	"pressure_current\000"
 4775      73757265 
 4775      5F637572 
 4775      72656E74 
 4775      00
 4776              	.LASF42:
 4777 0702 76616C69 		.ascii	"valid\000"
 4777      6400
 4778              	.LASF168:
 4779 0708 616C6172 		.ascii	"alarmLevelSensor\000"
 4779      6D4C6576 
 4779      656C5365 
 4779      6E736F72 
 4779      00
 4780              	.LASF55:
 4781 0719 746D5F77 		.ascii	"tm_wday\000"
 4781      64617900 
 4782              	.LASF79:
 4783 0721 4C657665 		.ascii	"Level_Sensor_freq\000"
 4783      6C5F5365 
 4783      6E736F72 
 4783      5F667265 
 4783      7100
 4784              	.LASF144:
 4785 0733 6C657665 		.ascii	"level_sensor_inbox\000"
 4785      6C5F7365 
 4785      6E736F72 
 4785      5F696E62 
 4785      6F7800
 4786              	.LASF20:
 4787 0746 6C6F6E67 		.ascii	"long double\000"
 4787      20646F75 
 4787      626C6500 
 4788              	.LASF119:
 4789 0752 6368756E 		.ascii	"chunk\000"
 4789      6B00
 4790              	.LASF130:
 4791 0758 635F7469 		.ascii	"c_timeStamp\000"
 4791      6D655374 
 4791      616D7000 
 4792              	.LASF19:
 4793 0764 63686172 		.ascii	"char\000"
 4793      00
 4794              	.LASF8:
 4795 0769 756E7369 		.ascii	"unsigned int\000"
 4795      676E6564 
 4795      20696E74 
 4795      00
 4796              	.LASF152:
 4797 0776 6D6F6465 		.ascii	"modem_stats\000"
 4797      6D5F7374 
 4797      61747300 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 107


 4798              	.LASF158:
 4799 0782 68747470 		.ascii	"http_route\000"
 4799      5F726F75 
 4799      746500
 4800              	.LASF118:
 4801 078d 706F7274 		.ascii	"portConfig\000"
 4801      436F6E66 
 4801      696700
 4802              	.LASF9:
 4803 0798 5F5F696E 		.ascii	"__int32_t\000"
 4803      7433325F 
 4803      7400
 4804              	.LASF93:
 4805 07a2 756E6971 		.ascii	"uniqueId\000"
 4805      75654964 
 4805      00
 4806              	.LASF133:
 4807 07ab 6D5F6C65 		.ascii	"m_level_sensor\000"
 4807      76656C5F 
 4807      73656E73 
 4807      6F7200
 4808              	.LASF34:
 4809 07ba 6C657665 		.ascii	"level_reading\000"
 4809      6C5F7265 
 4809      6164696E 
 4809      6700
 4810              	.LASF175:
 4811 07c8 4C617942 		.ascii	"LayBack\000"
 4811      61636B00 
 4812              	.LASF3:
 4813 07d0 73686F72 		.ascii	"short unsigned int\000"
 4813      7420756E 
 4813      7369676E 
 4813      65642069 
 4813      6E7400
 4814              	.LASF61:
 4815 07e3 73696D5F 		.ascii	"sim_id\000"
 4815      696400
 4816              	.LASF52:
 4817 07ea 746D5F6D 		.ascii	"tm_mday\000"
 4817      64617900 
 4818              	.LASF104:
 4819 07f2 6E657741 		.ascii	"newAlarm\000"
 4819      6C61726D 
 4819      00
 4820              	.LASF49:
 4821 07fb 746D5F73 		.ascii	"tm_sec\000"
 4821      656300
 4822              	.LASF134:
 4823 0802 6D5F7072 		.ascii	"m_pressure\000"
 4823      65737375 
 4823      726500
 4824              	.LASF30:
 4825 080d 73746174 		.ascii	"status\000"
 4825      757300
 4826              	.LASF145:
 4827 0814 6C657665 		.ascii	"level_sensor_enabled\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 108


 4827      6C5F7365 
 4827      6E736F72 
 4827      5F656E61 
 4827      626C6564 
 4828              	.LASF148:
 4829 0829 64617461 		.ascii	"dataPointsInStackDesired\000"
 4829      506F696E 
 4829      7473496E 
 4829      53746163 
 4829      6B446573 
 4830              	.LASF78:
 4831 0842 4170705F 		.ascii	"App_LED_freq\000"
 4831      4C45445F 
 4831      66726571 
 4831      00
 4832              	.LASF108:
 4833 084f 745F766F 		.ascii	"t_voltages\000"
 4833      6C746167 
 4833      657300
 4834              	.LASF172:
 4835 085a 6E6F746F 		.ascii	"notoriOS.c\000"
 4835      72694F53 
 4835      2E6300
 4836              	.LASF157:
 4837 0865 68747470 		.ascii	"http_body\000"
 4837      5F626F64 
 4837      7900
 4838              	.LASF15:
 4839 086f 696E7431 		.ascii	"int16\000"
 4839      3600
 4840              	.LASF84:
 4841 0875 636F756E 		.ascii	"countDownType\000"
 4841      74446F77 
 4841      6E547970 
 4841      6500
 4842              	.LASF83:
 4843 0883 63757272 		.ascii	"currentCountDownValue\000"
 4843      656E7443 
 4843      6F756E74 
 4843      446F776E 
 4843      56616C75 
 4844              	.LASF74:
 4845 0899 73696D5F 		.ascii	"sim_type\000"
 4845      74797065 
 4845      00
 4846              	.LASF25:
 4847 08a2 4461794F 		.ascii	"DayOfYear\000"
 4847      66596561 
 4847      7200
 4848              	.LASF48:
 4849 08ac 70726573 		.ascii	"pressure_t\000"
 4849      73757265 
 4849      5F7400
 4850              	.LASF102:
 4851 08b7 416C6172 		.ascii	"AlarmReady\000"
 4851      6D526561 
 4851      647900
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccalH3Zc.s 			page 109


 4852              	.LASF105:
 4853 08c2 52656164 		.ascii	"ReadyOrNot\000"
 4853      794F724E 
 4853      6F7400
 4854              	.LASF176:
 4855 08cd 6D61696E 		.ascii	"main\000"
 4855      00
 4856              	.LASF88:
 4857 08d2 63686970 		.ascii	"chip_uniqueId\000"
 4857      5F756E69 
 4857      71756549 
 4857      6400
 4858              	.LASF75:
 4859 08e0 6D656173 		.ascii	"measure_time\000"
 4859      7572655F 
 4859      74696D65 
 4859      00
 4860              	.LASF18:
 4861 08ed 646F7562 		.ascii	"double\000"
 4861      6C6500
 4862              	.LASF155:
 4863 08f4 6170705F 		.ascii	"app_led_inbox\000"
 4863      6C65645F 
 4863      696E626F 
 4863      7800
 4864              	.LASF43:
 4865 0902 766F6C74 		.ascii	"voltage_t\000"
 4865      6167655F 
 4865      7400
 4866              	.LASF131:
 4867 090c 635F6E6F 		.ascii	"c_node_type\000"
 4867      64655F74 
 4867      79706500 
 4868              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
