ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,6,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.section	.text.Wakeup_ISR,"ax",%progbits
  50              		.align	2
  51              		.global	Wakeup_ISR
  52              		.thumb
  53              		.thumb_func
  54              		.type	Wakeup_ISR, %function
  55              	Wakeup_ISR:
  56              	.LFB64:
  57              		.file 1 "notoriOS.c"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 2


   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  58              		.loc 1 20 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62 0000 80B5     		push	{r7, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 00AF     		add	r7, sp, #0
  67              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  68              		.loc 1 22 0
  69 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  70              		.loc 1 23 0
  71 0008 00BF     		nop
  72 000a 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE64:
  75              		.size	Wakeup_ISR, .-Wakeup_ISR
  76              		.global	Data_fileName
  77              		.data
  78              		.align	2
  79              		.type	Data_fileName, %object
  80              		.size	Data_fileName, 30
  81              	Data_fileName:
  82 0000 64617461 		.ascii	"data.txt\000"
  82      2E747874 
  82      00
  83 0009 00000000 		.space	21
  83      00000000 
  83      00000000 
  83      00000000 
  83      00000000 
  84              		.comm	try_counter,1,1
  85              		.section	.rodata
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 3


  86              		.align	2
  87              	.LC0:
  88 0000 25582D25 		.ascii	"%X-%X\000"
  88      5800
  89 0006 0000     		.align	2
  90              	.LC1:
  91 0008 6D616C63 		.ascii	"malcom.open-storm.org\000"
  91      6F6D2E6F 
  91      70656E2D 
  91      73746F72 
  91      6D2E6F72 
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 24
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 88B0     		sub	sp, sp, #32
 111              		.cfi_def_cfa_offset 48
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 4048     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 4


 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F10C03 		add	r3, r7, #12
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 FA68     		ldr	r2, [r7, #12]
 136 0032 3B69     		ldr	r3, [r7, #16]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 344A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 3448     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 344B     		ldr	r3, .L3+12
 145 0044 344A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-
  70:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org");
 147              		.loc 1 70 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 5


 148 0048 344A     		ldr	r2, .L3+20
 149 004a 354B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 95E80300 		ldmia	r5, {r0, r1}
 155 0058 2060     		str	r0, [r4]
 156 005a 0434     		adds	r4, r4, #4
 157 005c 2180     		strh	r1, [r4]	@ movhi
  71:notoriOS.c    ****     
  72:notoriOS.c    **** 
  73:notoriOS.c    ****     system_settings.ep_port = 5000;
 158              		.loc 1 73 0
 159 005e 2F4B     		ldr	r3, .L3+20
 160 0060 41F28832 		movw	r2, #5000
 161 0064 5A66     		str	r2, [r3, #100]
  74:notoriOS.c    ****     // Don't need the following for new nodes
  75:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  76:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  77:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  78:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  79:notoriOS.c    ****         
  80:notoriOS.c    ****     
  81:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  82:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 162              		.loc 1 82 0
 163 0066 2F4B     		ldr	r3, .L3+28
 164 0068 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 165 006a 99B2     		uxth	r1, r3
 166 006c 2E4C     		ldr	r4, .L3+32
 167 006e 3846     		mov	r0, r7
 168 0070 0723     		movs	r3, #7
 169 0072 0122     		movs	r2, #1
 170 0074 FFF7FEFF 		bl	CreateAlarm
 171 0078 2246     		mov	r2, r4
 172 007a 3B46     		mov	r3, r7
 173 007c 1968     		ldr	r1, [r3]	@ unaligned
 174 007e 1160     		str	r1, [r2]	@ unaligned
 175 0080 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 176 0082 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToMeasure = 1u;
 177              		.loc 1 83 0
 178 0084 294B     		ldr	r3, .L3+36
 179 0086 0122     		movs	r2, #1
 180 0088 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  85:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 181              		.loc 1 85 0
 182 008a 264B     		ldr	r3, .L3+28
 183 008c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 184 008e 99B2     		uxth	r1, r3
 185 0090 274C     		ldr	r4, .L3+40
 186 0092 3846     		mov	r0, r7
 187 0094 0723     		movs	r3, #7
 188 0096 0122     		movs	r2, #1
 189 0098 FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 6


 190 009c 2246     		mov	r2, r4
 191 009e 3B46     		mov	r3, r7
 192 00a0 1968     		ldr	r1, [r3]	@ unaligned
 193 00a2 1160     		str	r1, [r2]	@ unaligned
 194 00a4 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 195 00a6 9380     		strh	r3, [r2, #4]	@ unaligned
  86:notoriOS.c    ****     timeToSync = 1u;
 196              		.loc 1 86 0
 197 00a8 224B     		ldr	r3, .L3+44
 198 00aa 0122     		movs	r2, #1
 199 00ac 1A70     		strb	r2, [r3]
  87:notoriOS.c    ****     
  88:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 200              		.loc 1 88 0
 201 00ae 224B     		ldr	r3, .L3+48
 202 00b0 0022     		movs	r2, #0
 203 00b2 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     // App Initializations
  91:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 204              		.loc 1 91 0
 205 00b4 1B4B     		ldr	r3, .L3+28
 206 00b6 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 207 00b8 99B2     		uxth	r1, r3
 208 00ba 204C     		ldr	r4, .L3+52
 209 00bc 3846     		mov	r0, r7
 210 00be 0723     		movs	r3, #7
 211 00c0 0122     		movs	r2, #1
 212 00c2 FFF7FEFF 		bl	CreateAlarm
 213 00c6 2246     		mov	r2, r4
 214 00c8 3B46     		mov	r3, r7
 215 00ca 1968     		ldr	r1, [r3]	@ unaligned
 216 00cc 1160     		str	r1, [r2]	@ unaligned
 217 00ce 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 218 00d0 9380     		strh	r3, [r2, #4]	@ unaligned
  92:notoriOS.c    ****     timeToAppLED = 1u;
 219              		.loc 1 92 0
 220 00d2 1B4B     		ldr	r3, .L3+56
 221 00d4 0122     		movs	r2, #1
 222 00d6 1A70     		strb	r2, [r3]
  93:notoriOS.c    ****     
  94:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
 223              		.loc 1 94 0
 224 00d8 124B     		ldr	r3, .L3+28
 225 00da 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 226 00dc 99B2     		uxth	r1, r3
 227 00de 194C     		ldr	r4, .L3+60
 228 00e0 3846     		mov	r0, r7
 229 00e2 0723     		movs	r3, #7
 230 00e4 0122     		movs	r2, #1
 231 00e6 FFF7FEFF 		bl	CreateAlarm
 232 00ea 2246     		mov	r2, r4
 233 00ec 3B46     		mov	r3, r7
 234 00ee 1968     		ldr	r1, [r3]	@ unaligned
 235 00f0 1160     		str	r1, [r2]	@ unaligned
 236 00f2 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 237 00f4 9380     		strh	r3, [r2, #4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 7


  95:notoriOS.c    ****     timetoLevelSensor = 1u;
 238              		.loc 1 95 0
 239 00f6 144B     		ldr	r3, .L3+64
 240 00f8 0122     		movs	r2, #1
 241 00fa 1A70     		strb	r2, [r3]
  96:notoriOS.c    ****     
  97:notoriOS.c    ****     // Initialize the try counter to 0
  98:notoriOS.c    ****     uint8 try_counter = 0;
 242              		.loc 1 98 0
 243 00fc 0023     		movs	r3, #0
 244 00fe FB75     		strb	r3, [r7, #23]
  99:notoriOS.c    **** }
 245              		.loc 1 99 0
 246 0100 00BF     		nop
 247 0102 1837     		adds	r7, r7, #24
 248              		.cfi_def_cfa_offset 16
 249 0104 BD46     		mov	sp, r7
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0106 B0BD     		pop	{r4, r5, r7, pc}
 253              	.L4:
 254              		.align	2
 255              	.L3:
 256 0108 00000000 		.word	Wakeup_ISR
 257 010c 00000000 		.word	.LC0
 258 0110 04000000 		.word	system_info+4
 259 0114 00000000 		.word	system_info
 260 0118 00000000 		.word	modem_info
 261 011c 00000000 		.word	system_settings
 262 0120 08000000 		.word	.LC1
 263 0124 00000000 		.word	updatable_parameters
 264 0128 00000000 		.word	alarmMeasure
 265 012c 00000000 		.word	timeToMeasure
 266 0130 00000000 		.word	alarmSync
 267 0134 00000000 		.word	timeToSync
 268 0138 00000000 		.word	timeToSycnRemoteParams
 269 013c 00000000 		.word	alarmAppLED
 270 0140 00000000 		.word	timeToAppLED
 271 0144 00000000 		.word	alarmLevelSensor
 272 0148 00000000 		.word	timetoLevelSensor
 273              		.cfi_endproc
 274              	.LFE65:
 275              		.size	ReadyOrNot, .-ReadyOrNot
 276              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 277              		.align	2
 278              		.global	WorkWorkWorkWorkWorkWork
 279              		.thumb
 280              		.thumb_func
 281              		.type	WorkWorkWorkWorkWorkWork, %function
 282              	WorkWorkWorkWorkWorkWork:
 283              	.LFB66:
 100:notoriOS.c    **** 
 101:notoriOS.c    **** 
 102:notoriOS.c    **** // ==============================================
 103:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 104:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 105:notoriOS.c    **** //
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 8


 106:notoriOS.c    **** // Prorcesses core tasks
 107:notoriOS.c    **** // ==============================================
 108:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 109:notoriOS.c    **** {
 284              		.loc 1 109 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 8
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 82B0     		sub	sp, sp, #8
 293              		.cfi_def_cfa_offset 16
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 110:notoriOS.c    ****     
 111:notoriOS.c    ****     
 112:notoriOS.c    ****     
 113:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 114:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 115:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 116:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 117:notoriOS.c    ****     
 118:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 119:notoriOS.c    ****     if(timeToSycnRemoteParams){
 296              		.loc 1 119 0
 297 0006 1F4B     		ldr	r3, .L12
 298 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299 000a 002B     		cmp	r3, #0
 300 000c 06D0     		beq	.L6
 120:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 301              		.loc 1 120 0
 302 000e FFF7FEFF 		bl	configureRemoteParams
 303 0012 0346     		mov	r3, r0
 304 0014 1A46     		mov	r2, r3
 305 0016 1B4B     		ldr	r3, .L12
 306 0018 1A70     		strb	r2, [r3]
 307 001a 2AE0     		b	.L7
 308              	.L6:
 121:notoriOS.c    ****     }
 122:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 123:notoriOS.c    ****     else if(timeToMeasure){
 309              		.loc 1 123 0
 310 001c 1A4B     		ldr	r3, .L12+4
 311 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 312 0020 002B     		cmp	r3, #0
 313 0022 06D0     		beq	.L8
 124:notoriOS.c    ****         // just battery voltages now
 125:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 314              		.loc 1 125 0
 315 0024 FFF7FEFF 		bl	makeMeasurements
 316 0028 0346     		mov	r3, r0
 317 002a 1A46     		mov	r2, r3
 318 002c 164B     		ldr	r3, .L12+4
 319 002e 1A70     		strb	r2, [r3]
 320 0030 1FE0     		b	.L7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 9


 321              	.L8:
 126:notoriOS.c    ****     }  
 127:notoriOS.c    ****     // peripheral applications
 128:notoriOS.c    ****     else if(timeToAppLED){
 322              		.loc 1 128 0
 323 0032 164B     		ldr	r3, .L12+8
 324 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 325 0036 002B     		cmp	r3, #0
 326 0038 06D0     		beq	.L9
 129:notoriOS.c    ****         timeToAppLED = App_LED();
 327              		.loc 1 129 0
 328 003a FFF7FEFF 		bl	App_LED
 329 003e 0346     		mov	r3, r0
 330 0040 1A46     		mov	r2, r3
 331 0042 124B     		ldr	r3, .L12+8
 332 0044 1A70     		strb	r2, [r3]
 333 0046 14E0     		b	.L7
 334              	.L9:
 130:notoriOS.c    ****     }
 131:notoriOS.c    ****     else if(timetoLevelSensor){
 335              		.loc 1 131 0
 336 0048 114B     		ldr	r3, .L12+12
 337 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 004c 002B     		cmp	r3, #0
 339 004e 06D0     		beq	.L10
 132:notoriOS.c    ****         timetoLevelSensor = level_sensor();
 340              		.loc 1 132 0
 341 0050 FFF7FEFF 		bl	level_sensor
 342 0054 0346     		mov	r3, r0
 343 0056 1A46     		mov	r2, r3
 344 0058 0D4B     		ldr	r3, .L12+12
 345 005a 1A70     		strb	r2, [r3]
 346 005c 09E0     		b	.L7
 347              	.L10:
 133:notoriOS.c    ****     }
 134:notoriOS.c    ****     else if(timeToSync){
 348              		.loc 1 134 0
 349 005e 0D4B     		ldr	r3, .L12+16
 350 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 0062 002B     		cmp	r3, #0
 352 0064 05D0     		beq	.L7
 135:notoriOS.c    ****         timeToSync = syncData();
 353              		.loc 1 135 0
 354 0066 FFF7FEFF 		bl	syncData
 355 006a 0346     		mov	r3, r0
 356 006c 1A46     		mov	r2, r3
 357 006e 094B     		ldr	r3, .L12+16
 358 0070 1A70     		strb	r2, [r3]
 359              	.L7:
 136:notoriOS.c    ****     } 
 137:notoriOS.c    ****     
 138:notoriOS.c    **** 
 139:notoriOS.c    ****     
 140:notoriOS.c    ****     // Print the countdown to the next alarm
 141:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 142:notoriOS.c    ****     
 143:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 10


 144:notoriOS.c    ****     // Check modem state machine on every loop
 145:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 360              		.loc 1 145 0
 361 0072 FFF7FEFF 		bl	modem_process_tasks
 362 0076 0346     		mov	r3, r0
 363 0078 FB71     		strb	r3, [r7, #7]
 146:notoriOS.c    **** 
 147:notoriOS.c    ****     return 0u +  modem_status;  
 364              		.loc 1 147 0
 365 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 148:notoriOS.c    **** }
 366              		.loc 1 148 0
 367 007c 1846     		mov	r0, r3
 368 007e 0837     		adds	r7, r7, #8
 369              		.cfi_def_cfa_offset 8
 370 0080 BD46     		mov	sp, r7
 371              		.cfi_def_cfa_register 13
 372              		@ sp needed
 373 0082 80BD     		pop	{r7, pc}
 374              	.L13:
 375              		.align	2
 376              	.L12:
 377 0084 00000000 		.word	timeToSycnRemoteParams
 378 0088 00000000 		.word	timeToMeasure
 379 008c 00000000 		.word	timeToAppLED
 380 0090 00000000 		.word	timetoLevelSensor
 381 0094 00000000 		.word	timeToSync
 382              		.cfi_endproc
 383              	.LFE66:
 384              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 385              		.section	.text.LayBack,"ax",%progbits
 386              		.align	2
 387              		.global	LayBack
 388              		.thumb
 389              		.thumb_func
 390              		.type	LayBack, %function
 391              	LayBack:
 392              	.LFB67:
 149:notoriOS.c    **** 
 150:notoriOS.c    **** 
 151:notoriOS.c    **** 
 152:notoriOS.c    **** 
 153:notoriOS.c    **** 
 154:notoriOS.c    **** 
 155:notoriOS.c    **** // ==============================================
 156:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 157:notoriOS.c    **** //      - Snoop Dogg (1993)
 158:notoriOS.c    **** //
 159:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 160:notoriOS.c    **** // ==============================================
 161:notoriOS.c    **** void LayBack()
 162:notoriOS.c    **** {
 393              		.loc 1 162 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 1, uses_anonymous_args = 0
 397 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 11


 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 0002 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
 163:notoriOS.c    ****   
 164:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 403              		.loc 1 164 0
 404 0004 FFF7FEFF 		bl	modem_sleep
 165:notoriOS.c    ****     
 166:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 167:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 405              		.loc 1 167 0
 406 0008 FFF7FEFF 		bl	debug_sleep
 168:notoriOS.c    ****     
 169:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 407              		.loc 1 169 0
 408 000c FFF7FEFF 		bl	CyPmSaveClocks
 170:notoriOS.c    ****     
 171:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 172:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 173:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 174:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 175:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 176:notoriOS.c    ****     //CyPmHibernate();
 177:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 178:notoriOS.c    **** 
 179:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 409              		.loc 1 179 0
 410 0010 4FF40061 		mov	r1, #2048
 411 0014 0020     		movs	r0, #0
 412 0016 FFF7FEFF 		bl	CyPmSleep
 180:notoriOS.c    **** 
 181:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 413              		.loc 1 181 0
 414 001a FFF7FEFF 		bl	CyPmRestoreClocks
 182:notoriOS.c    **** 
 183:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 415              		.loc 1 183 0
 416 001e FFF7FEFF 		bl	debug_wakeup
 184:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 417              		.loc 1 184 0
 418 0022 FFF7FEFF 		bl	modem_wakeup
 185:notoriOS.c    **** 
 186:notoriOS.c    **** }
 419              		.loc 1 186 0
 420 0026 00BF     		nop
 421 0028 80BD     		pop	{r7, pc}
 422              		.cfi_endproc
 423              	.LFE67:
 424              		.size	LayBack, .-LayBack
 425 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 426              		.align	2
 427              		.global	AyoItsTime
 428              		.thumb
 429              		.thumb_func
 430              		.type	AyoItsTime, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 12


 431              	AyoItsTime:
 432              	.LFB68:
 187:notoriOS.c    **** 
 188:notoriOS.c    **** 
 189:notoriOS.c    **** // ==============================================
 190:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 191:notoriOS.c    **** //      - NAS (1994)
 192:notoriOS.c    **** //
 193:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 194:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 195:notoriOS.c    **** // It will add tasks to the work queue,
 196:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 197:notoriOS.c    **** // ==============================================
 198:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 199:notoriOS.c    **** {
 433              		.loc 1 199 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 8
 436              		@ frame_needed = 1, uses_anonymous_args = 0
 437 0000 80B5     		push	{r7, lr}
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 7, -8
 440              		.cfi_offset 14, -4
 441 0002 82B0     		sub	sp, sp, #8
 442              		.cfi_def_cfa_offset 16
 443 0004 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 445 0006 0346     		mov	r3, r0
 446 0008 FB71     		strb	r3, [r7, #7]
 200:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 201:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 447              		.loc 1 201 0
 448 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 449 000c 1946     		mov	r1, r3
 450 000e 1748     		ldr	r0, .L21
 451 0010 FFF7FEFF 		bl	AlarmReady
 452 0014 0346     		mov	r3, r0
 453 0016 002B     		cmp	r3, #0
 454 0018 02D0     		beq	.L16
 202:notoriOS.c    ****     {
 203:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 204:notoriOS.c    ****         timeToMeasure = 1u;
 455              		.loc 1 204 0
 456 001a 154B     		ldr	r3, .L21+4
 457 001c 0122     		movs	r2, #1
 458 001e 1A70     		strb	r2, [r3]
 459              	.L16:
 205:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 206:notoriOS.c    ****         
 207:notoriOS.c    ****     }
 208:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 460              		.loc 1 208 0
 461 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 462 0022 1946     		mov	r1, r3
 463 0024 1348     		ldr	r0, .L21+8
 464 0026 FFF7FEFF 		bl	AlarmReady
 465 002a 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 13


 466 002c 002B     		cmp	r3, #0
 467 002e 02D0     		beq	.L17
 209:notoriOS.c    ****     {
 210:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 211:notoriOS.c    ****         timeToSync = 1u;
 468              		.loc 1 211 0
 469 0030 114B     		ldr	r3, .L21+12
 470 0032 0122     		movs	r2, #1
 471 0034 1A70     		strb	r2, [r3]
 472              	.L17:
 212:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 213:notoriOS.c    ****     }
 214:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 473              		.loc 1 214 0
 474 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 475 0038 1946     		mov	r1, r3
 476 003a 1048     		ldr	r0, .L21+16
 477 003c FFF7FEFF 		bl	AlarmReady
 478 0040 0346     		mov	r3, r0
 479 0042 002B     		cmp	r3, #0
 480 0044 02D0     		beq	.L18
 215:notoriOS.c    ****     {
 216:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 217:notoriOS.c    ****         timeToAppLED = 1u;
 481              		.loc 1 217 0
 482 0046 0E4B     		ldr	r3, .L21+20
 483 0048 0122     		movs	r2, #1
 484 004a 1A70     		strb	r2, [r3]
 485              	.L18:
 218:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 486              		.loc 1 220 0
 487 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 488 004e 1946     		mov	r1, r3
 489 0050 0C48     		ldr	r0, .L21+24
 490 0052 FFF7FEFF 		bl	AlarmReady
 491 0056 0346     		mov	r3, r0
 492 0058 002B     		cmp	r3, #0
 493 005a 02D0     		beq	.L20
 221:notoriOS.c    ****         timetoLevelSensor = 1u;
 494              		.loc 1 221 0
 495 005c 0A4B     		ldr	r3, .L21+28
 496 005e 0122     		movs	r2, #1
 497 0060 1A70     		strb	r2, [r3]
 498              	.L20:
 222:notoriOS.c    ****     }
 223:notoriOS.c    ****     
 224:notoriOS.c    **** }
 499              		.loc 1 224 0
 500 0062 00BF     		nop
 501 0064 0837     		adds	r7, r7, #8
 502              		.cfi_def_cfa_offset 8
 503 0066 BD46     		mov	sp, r7
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 0068 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 14


 507              	.L22:
 508 006a 00BF     		.align	2
 509              	.L21:
 510 006c 00000000 		.word	alarmMeasure
 511 0070 00000000 		.word	timeToMeasure
 512 0074 00000000 		.word	alarmSync
 513 0078 00000000 		.word	timeToSync
 514 007c 00000000 		.word	alarmAppLED
 515 0080 00000000 		.word	timeToAppLED
 516 0084 00000000 		.word	alarmLevelSensor
 517 0088 00000000 		.word	timetoLevelSensor
 518              		.cfi_endproc
 519              	.LFE68:
 520              		.size	AyoItsTime, .-AyoItsTime
 521              		.section	.text.AlarmReady,"ax",%progbits
 522              		.align	2
 523              		.global	AlarmReady
 524              		.thumb
 525              		.thumb_func
 526              		.type	AlarmReady, %function
 527              	AlarmReady:
 528              	.LFB69:
 225:notoriOS.c    **** 
 226:notoriOS.c    **** 
 227:notoriOS.c    **** // ==============================================
 228:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 229:notoriOS.c    **** // ==============================================
 230:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 231:notoriOS.c    **** {
 529              		.loc 1 231 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533 0000 80B5     		push	{r7, lr}
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 7, -8
 536              		.cfi_offset 14, -4
 537 0002 82B0     		sub	sp, sp, #8
 538              		.cfi_def_cfa_offset 16
 539 0004 00AF     		add	r7, sp, #0
 540              		.cfi_def_cfa_register 7
 541 0006 7860     		str	r0, [r7, #4]
 542 0008 0B46     		mov	r3, r1
 543 000a FB70     		strb	r3, [r7, #3]
 232:notoriOS.c    ****     // if the countDownType matches the alarmType
 233:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 544              		.loc 1 233 0
 545 000c 7B68     		ldr	r3, [r7, #4]
 546 000e 1B79     		ldrb	r3, [r3, #4]
 547 0010 DBB2     		uxtb	r3, r3
 548 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 549 0014 9A42     		cmp	r2, r3
 550 0016 12D1     		bne	.L24
 234:notoriOS.c    ****        
 235:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 236:notoriOS.c    ****         // Decrement the count down value by 1
 237:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 15


 551              		.loc 1 237 0
 552 0018 7B68     		ldr	r3, [r7, #4]
 553 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 554 001c 1BB2     		sxth	r3, r3
 555 001e 9BB2     		uxth	r3, r3
 556 0020 013B     		subs	r3, r3, #1
 557 0022 9BB2     		uxth	r3, r3
 558 0024 1AB2     		sxth	r2, r3
 559 0026 7B68     		ldr	r3, [r7, #4]
 560 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 238:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 239:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 561              		.loc 1 239 0
 562 002a 7B68     		ldr	r3, [r7, #4]
 563 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 564 002e 1BB2     		sxth	r3, r3
 565 0030 002B     		cmp	r3, #0
 566 0032 04DC     		bgt	.L24
 240:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 567              		.loc 1 240 0
 568 0034 7868     		ldr	r0, [r7, #4]
 569 0036 FFF7FEFF 		bl	ResetAlarm
 241:notoriOS.c    ****             return 1u;
 570              		.loc 1 241 0
 571 003a 0123     		movs	r3, #1
 572 003c 00E0     		b	.L25
 573              	.L24:
 242:notoriOS.c    ****         } 
 243:notoriOS.c    ****     }
 244:notoriOS.c    ****     
 245:notoriOS.c    ****     return 0u; // Otherwise return 0
 574              		.loc 1 245 0
 575 003e 0023     		movs	r3, #0
 576              	.L25:
 246:notoriOS.c    **** }
 577              		.loc 1 246 0
 578 0040 1846     		mov	r0, r3
 579 0042 0837     		adds	r7, r7, #8
 580              		.cfi_def_cfa_offset 8
 581 0044 BD46     		mov	sp, r7
 582              		.cfi_def_cfa_register 13
 583              		@ sp needed
 584 0046 80BD     		pop	{r7, pc}
 585              		.cfi_endproc
 586              	.LFE69:
 587              		.size	AlarmReady, .-AlarmReady
 588              		.section	.text.ResetAlarm,"ax",%progbits
 589              		.align	2
 590              		.global	ResetAlarm
 591              		.thumb
 592              		.thumb_func
 593              		.type	ResetAlarm, %function
 594              	ResetAlarm:
 595              	.LFB70:
 247:notoriOS.c    **** 
 248:notoriOS.c    **** // ==============================================
 249:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 16


 250:notoriOS.c    **** // ==============================================
 251:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 252:notoriOS.c    **** {
 596              		.loc 1 252 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 8
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601 0000 80B4     		push	{r7}
 602              		.cfi_def_cfa_offset 4
 603              		.cfi_offset 7, -4
 604 0002 83B0     		sub	sp, sp, #12
 605              		.cfi_def_cfa_offset 16
 606 0004 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
 253:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 254:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 609              		.loc 1 254 0
 610 0008 7B68     		ldr	r3, [r7, #4]
 611 000a 1B88     		ldrh	r3, [r3]	@ movhi
 612 000c 9BB2     		uxth	r3, r3
 613 000e 1AB2     		sxth	r2, r3
 614 0010 7B68     		ldr	r3, [r7, #4]
 615 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 255:notoriOS.c    **** }
 616              		.loc 1 255 0
 617 0014 00BF     		nop
 618 0016 0C37     		adds	r7, r7, #12
 619              		.cfi_def_cfa_offset 4
 620 0018 BD46     		mov	sp, r7
 621              		.cfi_def_cfa_register 13
 622              		@ sp needed
 623 001a 80BC     		pop	{r7}
 624              		.cfi_restore 7
 625              		.cfi_def_cfa_offset 0
 626 001c 7047     		bx	lr
 627              		.cfi_endproc
 628              	.LFE70:
 629              		.size	ResetAlarm, .-ResetAlarm
 630 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 631              		.align	2
 632              		.global	CreateAlarm
 633              		.thumb
 634              		.thumb_func
 635              		.type	CreateAlarm, %function
 636              	CreateAlarm:
 637              	.LFB71:
 256:notoriOS.c    **** 
 257:notoriOS.c    **** // ==============================================
 258:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 259:notoriOS.c    **** // ==============================================
 260:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 261:notoriOS.c    **** {
 638              		.loc 1 261 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 17


 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643 0000 80B4     		push	{r7}
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 0002 85B0     		sub	sp, sp, #20
 647              		.cfi_def_cfa_offset 24
 648 0004 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 650 0006 7860     		str	r0, [r7, #4]
 651 0008 0846     		mov	r0, r1
 652 000a 1146     		mov	r1, r2
 653 000c 1A46     		mov	r2, r3
 654 000e 0346     		mov	r3, r0	@ movhi
 655 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 656 0012 0B46     		mov	r3, r1
 657 0014 7B70     		strb	r3, [r7, #1]
 658 0016 1346     		mov	r3, r2
 659 0018 3B70     		strb	r3, [r7]
 262:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 263:notoriOS.c    ****     alarm newAlarm;
 264:notoriOS.c    ****     
 265:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 266:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 660              		.loc 1 266 0
 661 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 662 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 267:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 663              		.loc 1 267 0
 664 001e 7B78     		ldrb	r3, [r7, #1]
 665 0020 3B73     		strb	r3, [r7, #12]
 268:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 666              		.loc 1 268 0
 667 0022 3B78     		ldrb	r3, [r7]
 668 0024 7B73     		strb	r3, [r7, #13]
 269:notoriOS.c    ****     
 270:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 271:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 272:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 669              		.loc 1 272 0
 670 0026 B7F90230 		ldrsh	r3, [r7, #2]
 671 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 273:notoriOS.c    ****     
 274:notoriOS.c    ****     return newAlarm;
 672              		.loc 1 274 0
 673 002c 7B68     		ldr	r3, [r7, #4]
 674 002e 1A46     		mov	r2, r3
 675 0030 07F10803 		add	r3, r7, #8
 676 0034 1868     		ldr	r0, [r3]	@ unaligned
 677 0036 1060     		str	r0, [r2]	@ unaligned
 678 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 679 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 275:notoriOS.c    ****     
 276:notoriOS.c    **** }
 680              		.loc 1 276 0
 681 003c 7868     		ldr	r0, [r7, #4]
 682 003e 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 18


 683              		.cfi_def_cfa_offset 4
 684 0040 BD46     		mov	sp, r7
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 0042 80BC     		pop	{r7}
 688              		.cfi_restore 7
 689              		.cfi_def_cfa_offset 0
 690 0044 7047     		bx	lr
 691              		.cfi_endproc
 692              	.LFE71:
 693              		.size	CreateAlarm, .-CreateAlarm
 694 0046 00BF     		.section	.rodata
 695 001e 0000     		.align	2
 696              	.LC2:
 697 0020 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 697      2D2D2D2D 
 697      2D2D2D2D 
 697      2D424547 
 697      494E2054 
 698 004a 0000     		.align	2
 699              	.LC3:
 700 004c 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 700      3D25732C 
 700      2053494D 
 700      49443D25 
 700      732C2044 
 701 006b 00       		.align	2
 702              	.LC4:
 703 006c 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 703      2D2D2D2D 
 703      2D2D2D2D 
 703      2D2D2D45 
 703      4E442054 
 704 0095 00       		.ascii	"\000"
 705              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 706              		.align	2
 707              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 708              		.thumb
 709              		.thumb_func
 710              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 711              	ChickityCheckYourselfBeforeYouWreckYourself:
 712              	.LFB72:
 277:notoriOS.c    **** 
 278:notoriOS.c    **** // ==============================================
 279:notoriOS.c    **** // Dropping bombs on your moms
 280:notoriOS.c    **** //      - Ice Cube (1992)
 281:notoriOS.c    **** //
 282:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 283:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 284:notoriOS.c    **** // ==============================================
 285:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 713              		.loc 1 285 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 1944
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 90B5     		push	{r4, r7, lr}
 718              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 19


 719              		.cfi_offset 4, -12
 720              		.cfi_offset 7, -8
 721              		.cfi_offset 14, -4
 722 0002 ADF6141D 		subw	sp, sp, #2324
 723              		.cfi_def_cfa_offset 2336
 724 0006 5EAF     		add	r7, sp, #376
 725              		.cfi_def_cfa 7, 1960
 286:notoriOS.c    **** 
 287:notoriOS.c    ****     //test_t t_influx = influx_test();
 288:notoriOS.c    ****     //printTestStatus(t_influx);
 289:notoriOS.c    ****     
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 726              		.loc 1 290 0
 727 0008 3849     		ldr	r1, .L30
 728 000a 0320     		movs	r0, #3
 729 000c FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     
 292:notoriOS.c    ****     // Test level sensor
 293:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 730              		.loc 1 293 0
 731 0010 07F21463 		addw	r3, r7, #1556
 732 0014 1846     		mov	r0, r3
 733 0016 FFF7FEFF 		bl	level_sensor_test
 294:notoriOS.c    ****     printTestStatus(t_level_sensor);
 734              		.loc 1 294 0
 735 001a 07F21464 		addw	r4, r7, #1556
 736 001e 6846     		mov	r0, sp
 737 0020 04F11003 		add	r3, r4, #16
 738 0024 40F27112 		movw	r2, #369
 739 0028 1946     		mov	r1, r3
 740 002a FFF7FEFF 		bl	memcpy
 741 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 742 0032 FFF7FEFF 		bl	printTestStatus
 295:notoriOS.c    ****     
 296:notoriOS.c    ****     // Test voltages
 297:notoriOS.c    ****     test_t t_voltages = voltages_test();
 743              		.loc 1 297 0
 744 0036 07F59263 		add	r3, r7, #1168
 745 003a 1846     		mov	r0, r3
 746 003c FFF7FEFF 		bl	voltages_test
 298:notoriOS.c    ****     printTestStatus(t_voltages);
 747              		.loc 1 298 0
 748 0040 07F59264 		add	r4, r7, #1168
 749 0044 6846     		mov	r0, sp
 750 0046 04F11003 		add	r3, r4, #16
 751 004a 40F27112 		movw	r2, #369
 752 004e 1946     		mov	r1, r3
 753 0050 FFF7FEFF 		bl	memcpy
 754 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 755 0058 FFF7FEFF 		bl	printTestStatus
 299:notoriOS.c    ****  
 300:notoriOS.c    ****     // Test voltages
 301:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 756              		.loc 1 301 0
 757 005c 07F54373 		add	r3, r7, #780
 758 0060 1846     		mov	r0, r3
 759 0062 FFF7FEFF 		bl	pressure_sensor_test
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 20


 302:notoriOS.c    ****     printTestStatus(t_pressure);
 760              		.loc 1 302 0
 761 0066 07F54374 		add	r4, r7, #780
 762 006a 6846     		mov	r0, sp
 763 006c 04F11003 		add	r3, r4, #16
 764 0070 40F27112 		movw	r2, #369
 765 0074 1946     		mov	r1, r3
 766 0076 FFF7FEFF 		bl	memcpy
 767 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 768 007e FFF7FEFF 		bl	printTestStatus
 303:notoriOS.c    ****     
 304:notoriOS.c    ****     // Test SD card
 305:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 769              		.loc 1 305 0
 770 0082 07F5C473 		add	r3, r7, #392
 771 0086 1846     		mov	r0, r3
 772 0088 FFF7FEFF 		bl	SD_card_test
 306:notoriOS.c    ****     printTestStatus(t_sd_card);
 773              		.loc 1 306 0
 774 008c 07F5C474 		add	r4, r7, #392
 775 0090 6846     		mov	r0, sp
 776 0092 04F11003 		add	r3, r4, #16
 777 0096 40F27112 		movw	r2, #369
 778 009a 1946     		mov	r1, r3
 779 009c FFF7FEFF 		bl	memcpy
 780 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 781 00a4 FFF7FEFF 		bl	printTestStatus
 307:notoriOS.c    ****     
 308:notoriOS.c    ****     // Test modem
 309:notoriOS.c    ****     test_t t_modem = modem_test();
 782              		.loc 1 309 0
 783 00a8 3B1D     		adds	r3, r7, #4
 784 00aa 1846     		mov	r0, r3
 785 00ac FFF7FEFF 		bl	modem_test
 310:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 786              		.loc 1 310 0
 787 00b0 0F4B     		ldr	r3, .L30+4
 788 00b2 0093     		str	r3, [sp]
 789 00b4 0F4B     		ldr	r3, .L30+8
 790 00b6 104A     		ldr	r2, .L30+12
 791 00b8 1049     		ldr	r1, .L30+16
 792 00ba 0320     		movs	r0, #3
 793 00bc FFF7FEFF 		bl	printNotif
 311:notoriOS.c    ****     printTestStatus(t_modem);
 794              		.loc 1 311 0
 795 00c0 3C1D     		adds	r4, r7, #4
 796 00c2 6846     		mov	r0, sp
 797 00c4 04F11003 		add	r3, r4, #16
 798 00c8 40F27112 		movw	r2, #369
 799 00cc 1946     		mov	r1, r3
 800 00ce FFF7FEFF 		bl	memcpy
 801 00d2 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 802 00d6 FFF7FEFF 		bl	printTestStatus
 312:notoriOS.c    ****     
 313:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 803              		.loc 1 313 0
 804 00da 0949     		ldr	r1, .L30+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 21


 805 00dc 0320     		movs	r0, #3
 806 00de FFF7FEFF 		bl	printNotif
 314:notoriOS.c    **** 
 315:notoriOS.c    **** }
 807              		.loc 1 315 0
 808 00e2 00BF     		nop
 809 00e4 07F29C77 		addw	r7, r7, #1948
 810              		.cfi_def_cfa_offset 12
 811 00e8 BD46     		mov	sp, r7
 812              		.cfi_def_cfa_register 13
 813              		@ sp needed
 814 00ea 90BD     		pop	{r4, r7, pc}
 815              	.L31:
 816              		.align	2
 817              	.L30:
 818 00ec 20000000 		.word	.LC2
 819 00f0 04000000 		.word	system_info+4
 820 00f4 00000000 		.word	modem_info
 821 00f8 28000000 		.word	modem_info+40
 822 00fc 4C000000 		.word	.LC3
 823 0100 6C000000 		.word	.LC4
 824              		.cfi_endproc
 825              	.LFE72:
 826              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 827              		.section	.text.main,"ax",%progbits
 828              		.align	2
 829              		.global	main
 830              		.thumb
 831              		.thumb_func
 832              		.type	main, %function
 833              	main:
 834              	.LFB73:
 316:notoriOS.c    **** 
 317:notoriOS.c    **** // ==============================================
 318:notoriOS.c    **** // Processes Core Tasks
 319:notoriOS.c    **** // ==============================================
 320:notoriOS.c    **** int main(void)
 321:notoriOS.c    **** {
 835              		.loc 1 321 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839 0000 80B5     		push	{r7, lr}
 840              		.cfi_def_cfa_offset 8
 841              		.cfi_offset 7, -8
 842              		.cfi_offset 14, -4
 843 0002 00AF     		add	r7, sp, #0
 844              		.cfi_def_cfa_register 7
 322:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 845              		.loc 1 322 0
 846              		.syntax unified
 847              	@ 322 "notoriOS.c" 1
 848 0004 62B6     		CPSIE   i
 849              	@ 0 "" 2
 323:notoriOS.c    **** 
 324:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 850              		.loc 1 324 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 22


 851              		.thumb
 852              		.syntax unified
 853 0006 FFF7FEFF 		bl	ReadyOrNot
 325:notoriOS.c    ****     
 326:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 854              		.loc 1 326 0
 855 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 856              	.L34:
 327:notoriOS.c    ****    
 328:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 329:notoriOS.c    ****     {
 330:notoriOS.c    ****         
 331:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 857              		.loc 1 331 0
 858 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 859 0012 0346     		mov	r3, r0
 860 0014 002B     		cmp	r3, #0
 861 0016 FAD1     		bne	.L34
 332:notoriOS.c    ****         {
 333:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 862              		.loc 1 333 0
 863 0018 FFF7FEFF 		bl	LayBack
 334:notoriOS.c    ****         }
 335:notoriOS.c    ****     }
 864              		.loc 1 335 0
 865 001c F7E7     		b	.L34
 866              		.cfi_endproc
 867              	.LFE73:
 868              		.size	main, .-main
 869 001e 00BF     		.section	.rodata
 870 0096 0000     		.align	2
 871              	.LC5:
 872 0098 4D6F6465 		.ascii	"Modem is ready.\000"
 872      6D206973 
 872      20726561 
 872      64792E00 
 873              		.align	2
 874              	.LC6:
 875 00a8 256400   		.ascii	"%d\000"
 876 00ab 00       		.align	2
 877              	.LC7:
 878 00ac 72737270 		.ascii	"rsrp\000"
 878      00
 879 00b1 000000   		.align	2
 880              	.LC8:
 881 00b4 72736370 		.ascii	"rscp\000"
 881      00
 882 00b9 000000   		.align	2
 883              	.LC9:
 884 00bc 7472795F 		.ascii	"try_counter\000"
 884      636F756E 
 884      74657200 
 885              		.align	2
 886              	.LC10:
 887 00c8 64617461 		.ascii	"data_count_sent\000"
 887      5F636F75 
 887      6E745F73 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 23


 887      656E7400 
 888              		.align	2
 889              	.LC11:
 890 00d8 64617461 		.ascii	"data_count_desired\000"
 890      5F636F75 
 890      6E745F64 
 890      65736972 
 890      656400
 891 00eb 00       		.align	2
 892              	.LC12:
 893 00ec 42656769 		.ascii	"Begin HTTP post.\000"
 893      6E204854 
 893      54502070 
 893      6F73742E 
 893      00
 894 00fd 000000   		.align	2
 895              	.LC13:
 896 0100 31333864 		.ascii	"138dc7ec9d1ad34c9401ec9d3e9c01d4d3e7dd8a\000"
 896      63376563 
 896      39643161 
 896      64333463 
 896      39343031 
 897 0129 000000   		.align	2
 898              	.LC14:
 899 012c 6170692F 		.ascii	"api/v1/write\000"
 899      76312F77 
 899      72697465 
 899      00
 900 0139 000000   		.align	2
 901              	.LC15:
 902 013c 48545450 		.ascii	"HTTP route: %s\000"
 902      20726F75 
 902      74653A20 
 902      257300
 903 014b 00       		.align	2
 904              	.LC16:
 905 014c 312E3100 		.ascii	"1.1\000"
 906              		.align	2
 907              	.LC17:
 908 0150 00       		.ascii	"\000"
 909 0151 000000   		.align	2
 910              	.LC18:
 911 0154 436C6F73 		.ascii	"Close\000"
 911      6500
 912 015a 0000     		.align	2
 913              	.LC19:
 914 015c 504F5354 		.ascii	"POST\000"
 914      00
 915 0161 000000   		.align	2
 916              	.LC20:
 917 0164 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 917      20485454 
 917      50205265 
 917      71756573 
 917      743A2025 
 918 017a 0000     		.align	2
 919              	.LC21:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 24


 920 017c 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 920      443D312C 
 920      302C2564 
 920      2C222573 
 920      222C302C 
 921 0195 000000   		.align	2
 922              	.LC22:
 923 0198 257300   		.ascii	"%s\000"
 924 019b 00       		.align	2
 925              	.LC23:
 926 019c 4F4B00   		.ascii	"OK\000"
 927              		.global	__aeabi_ui2d
 928              		.global	__aeabi_d2iz
 929 019f 00       		.align	2
 930              	.LC24:
 931 01a0 68747470 		.ascii	"http_request len: %d\000"
 931      5F726571 
 931      75657374 
 931      206C656E 
 931      3A202564 
 932 01b5 000000   		.align	2
 933              	.LC25:
 934 01b8 23206F66 		.ascii	"# of packets: %d\000"
 934      20706163 
 934      6B657473 
 934      3A202564 
 934      00
 935 01c9 000000   		.align	2
 936              	.LC26:
 937 01cc 3E00     		.ascii	">\000"
 938 01ce 0000     		.align	2
 939              	.LC27:
 940 01d0 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 940      53454E44 
 940      3D310D0A 
 940      00
 941 01dd 000000   		.align	2
 942              	.LC28:
 943 01e0 1A00     		.ascii	"\032\000"
 944 01e2 0000     		.align	2
 945              	.LC29:
 946 01e4 6368756E 		.ascii	"chunk %d: %s\000"
 946      6B202564 
 946      3A202573 
 946      00
 947 01f1 000000   		.align	2
 948              	.LC30:
 949 01f4 5352494E 		.ascii	"SRING\000"
 949      4700
 950 01fa 0000     		.align	2
 951              	.LC31:
 952 01fc 4F532D4F 		.ascii	"OS-OK\000"
 952      4B00
 953 0202 0000     		.align	2
 954              	.LC32:
 955 0204 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 955      52454356 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 25


 955      3D312C31 
 955      3030300D 
 955      00
 956 0215 000000   		.align	2
 957              	.LC33:
 958 0218 6D6F6465 		.ascii	"modem_tx_time\000"
 958      6D5F7478 
 958      5F74696D 
 958      6500
 959 0226 0000     		.align	2
 960              	.LC34:
 961 0228 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 961      4F3A2043 
 961      6F756C64 
 961      206E6F74 
 961      20726563 
 962              		.section	.text.syncData,"ax",%progbits
 963              		.align	2
 964              		.global	syncData
 965              		.thumb
 966              		.thumb_func
 967              		.type	syncData, %function
 968              	syncData:
 969              	.LFB74:
 336:notoriOS.c    **** }
 337:notoriOS.c    **** 
 338:notoriOS.c    **** // ==============================================
 339:notoriOS.c    **** // Syncs data with server
 340:notoriOS.c    **** // Returns 0 when done
 341:notoriOS.c    **** // ==============================================
 342:notoriOS.c    **** uint8 syncData(){
 970              		.loc 1 342 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 1360
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974 0000 90B5     		push	{r4, r7, lr}
 975              		.cfi_def_cfa_offset 12
 976              		.cfi_offset 4, -12
 977              		.cfi_offset 7, -8
 978              		.cfi_offset 14, -4
 979 0002 ADF26C5D 		subw	sp, sp, #1388
 980              		.cfi_def_cfa_offset 1400
 981 0006 06AF     		add	r7, sp, #24
 982              		.cfi_def_cfa 7, 1376
 343:notoriOS.c    ****     
 344:notoriOS.c    ****     /*
 345:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 346:notoriOS.c    ****     uint8 check = 0;
 347:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 348:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 349:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 350:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 351:notoriOS.c    ****     */
 352:notoriOS.c    **** 
 353:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 354:notoriOS.c    ****     LED_Write(1u);
 983              		.loc 1 354 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 26


 984 0008 0120     		movs	r0, #1
 985 000a FFF7FEFF 		bl	LED_Write
 355:notoriOS.c    ****     CyDelay(100u);
 986              		.loc 1 355 0
 987 000e 6420     		movs	r0, #100
 988 0010 FFF7FEFF 		bl	CyDelay
 356:notoriOS.c    ****     LED_Write(0u);
 989              		.loc 1 356 0
 990 0014 0020     		movs	r0, #0
 991 0016 FFF7FEFF 		bl	LED_Write
 357:notoriOS.c    **** 
 358:notoriOS.c    ****     
 359:notoriOS.c    ****     // If there's no data, not need to do anything
 360:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 992              		.loc 1 360 0
 993 001a FFF7FEFF 		bl	sizeOfDataStack
 994 001e 0346     		mov	r3, r0
 995 0020 002B     		cmp	r3, #0
 996 0022 01D1     		bne	.L36
 361:notoriOS.c    ****         return 0u;
 997              		.loc 1 361 0
 998 0024 0023     		movs	r3, #0
 999 0026 03E2     		b	.L37
 1000              	.L36:
 362:notoriOS.c    ****         }
 363:notoriOS.c    ****     
 364:notoriOS.c    ****     // Create request body, in this case influx
 365:notoriOS.c    ****     // Place body into HTTP request header
 366:notoriOS.c    ****     // Fire up modem and get it out
 367:notoriOS.c    ****      
 368:notoriOS.c    ****     
 369:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 370:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1001              		.loc 1 370 0
 1002 0028 FFF7FEFF 		bl	modem_get_state
 1003 002c 0346     		mov	r3, r0
 1004 002e 002B     		cmp	r3, #0
 1005 0030 11D1     		bne	.L38
 371:notoriOS.c    **** 
 372:notoriOS.c    ****         try_counter++;
 1006              		.loc 1 372 0
 1007 0032 AE4B     		ldr	r3, .L50
 1008 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 0036 0133     		adds	r3, r3, #1
 1010 0038 DAB2     		uxtb	r2, r3
 1011 003a AC4B     		ldr	r3, .L50
 1012 003c 1A70     		strb	r2, [r3]
 373:notoriOS.c    ****         	
 374:notoriOS.c    ****         if(try_counter <= 2){
 1013              		.loc 1 374 0
 1014 003e AB4B     		ldr	r3, .L50
 1015 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1016 0042 022B     		cmp	r3, #2
 1017 0044 02D8     		bhi	.L39
 375:notoriOS.c    ****             modem_power_up();
 1018              		.loc 1 375 0
 1019 0046 FFF7FEFF 		bl	modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 27


 1020 004a F0E1     		b	.L40
 1021              	.L39:
 376:notoriOS.c    ****         }else{
 377:notoriOS.c    ****             try_counter = 0;
 1022              		.loc 1 377 0
 1023 004c A74B     		ldr	r3, .L50
 1024 004e 0022     		movs	r2, #0
 1025 0050 1A70     		strb	r2, [r3]
 378:notoriOS.c    ****             return 0u;
 1026              		.loc 1 378 0
 1027 0052 0023     		movs	r3, #0
 1028 0054 ECE1     		b	.L37
 1029              	.L38:
 379:notoriOS.c    ****             }
 380:notoriOS.c    ****             
 381:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1030              		.loc 1 381 0
 1031 0056 FFF7FEFF 		bl	modem_get_state
 1032 005a 0346     		mov	r3, r0
 1033 005c 042B     		cmp	r3, #4
 1034 005e 40F0E681 		bne	.L40
 1035              	.LBB2:
 382:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1036              		.loc 1 382 0
 1037 0062 A349     		ldr	r1, .L50+4
 1038 0064 0020     		movs	r0, #0
 1039 0066 FFF7FEFF 		bl	printNotif
 383:notoriOS.c    ****         
 384:notoriOS.c    ****         http_request[0] = '\0';
 1040              		.loc 1 384 0
 1041 006a A24B     		ldr	r3, .L50+8
 1042 006c 0022     		movs	r2, #0
 1043 006e 1A70     		strb	r2, [r3]
 385:notoriOS.c    ****         http_body[0] = '\0';
 1044              		.loc 1 385 0
 1045 0070 A14B     		ldr	r3, .L50+12
 1046 0072 0022     		movs	r2, #0
 1047 0074 1A70     		strb	r2, [r3]
 386:notoriOS.c    ****         http_route[0] = '\0';
 1048              		.loc 1 386 0
 1049 0076 A14B     		ldr	r3, .L50+16
 1050 0078 0022     		movs	r2, #0
 1051 007a 1A70     		strb	r2, [r3]
 387:notoriOS.c    ****         //char *base = "write";
 388:notoriOS.c    ****         
 389:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 390:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 391:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1052              		.loc 1 391 0
 1053 007c A04B     		ldr	r3, .L50+20
 1054 007e 5B69     		ldr	r3, [r3, #20]
 1055 0080 07F5A560 		add	r0, r7, #1320
 1056 0084 9F4A     		ldr	r2, .L50+24
 1057 0086 1421     		movs	r1, #20
 1058 0088 FFF7FEFF 		bl	snprintf
 392:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1059              		.loc 1 392 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 28


 1060 008c FFF7FEFF 		bl	getTimeStamp
 1061 0090 0246     		mov	r2, r0
 1062 0092 07F5A563 		add	r3, r7, #1320
 1063 0096 1946     		mov	r1, r3
 1064 0098 9B48     		ldr	r0, .L50+28
 1065 009a FFF7FEFF 		bl	pushData
 393:notoriOS.c    ****         
 394:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 395:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1066              		.loc 1 395 0
 1067 009e 984B     		ldr	r3, .L50+20
 1068 00a0 9B68     		ldr	r3, [r3, #8]
 1069 00a2 07F21450 		addw	r0, r7, #1300
 1070 00a6 974A     		ldr	r2, .L50+24
 1071 00a8 1421     		movs	r1, #20
 1072 00aa FFF7FEFF 		bl	snprintf
 396:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1073              		.loc 1 396 0
 1074 00ae FFF7FEFF 		bl	getTimeStamp
 1075 00b2 0246     		mov	r2, r0
 1076 00b4 07F21453 		addw	r3, r7, #1300
 1077 00b8 1946     		mov	r1, r3
 1078 00ba 9448     		ldr	r0, .L50+32
 1079 00bc FFF7FEFF 		bl	pushData
 397:notoriOS.c    ****         
 398:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 399:notoriOS.c    ****         char c_try_counter[20];
 400:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1080              		.loc 1 400 0
 1081 00c0 8A4B     		ldr	r3, .L50
 1082 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1083 00c4 07F5A060 		add	r0, r7, #1280
 1084 00c8 8E4A     		ldr	r2, .L50+24
 1085 00ca 1421     		movs	r1, #20
 1086 00cc FFF7FEFF 		bl	snprintf
 401:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1087              		.loc 1 401 0
 1088 00d0 FFF7FEFF 		bl	getTimeStamp
 1089 00d4 0246     		mov	r2, r0
 1090 00d6 07F5A063 		add	r3, r7, #1280
 1091 00da 1946     		mov	r1, r3
 1092 00dc 8C48     		ldr	r0, .L50+36
 1093 00de FFF7FEFF 		bl	pushData
 402:notoriOS.c    ****         
 403:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 404:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 405:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 406:notoriOS.c    ****         if(buffer_overflow == false){
 1094              		.loc 1 406 0
 1095 00e2 8C4B     		ldr	r3, .L50+40
 1096 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1097 00e6 83F00103 		eor	r3, r3, #1
 1098 00ea DBB2     		uxtb	r3, r3
 1099 00ec 002B     		cmp	r3, #0
 1100 00ee 16D0     		beq	.L41
 1101              	.LBB3:
 407:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 29


 1102              		.loc 1 407 0
 1103 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1104 00f4 0346     		mov	r3, r0
 1105 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 408:notoriOS.c    ****             char c_data_count_sent[20];
 409:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1106              		.loc 1 409 0
 1107 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1108 00fe 07F59B60 		add	r0, r7, #1240
 1109 0102 804A     		ldr	r2, .L50+24
 1110 0104 1421     		movs	r1, #20
 1111 0106 FFF7FEFF 		bl	snprintf
 410:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1112              		.loc 1 410 0
 1113 010a FFF7FEFF 		bl	getTimeStamp
 1114 010e 0246     		mov	r2, r0
 1115 0110 07F59B63 		add	r3, r7, #1240
 1116 0114 1946     		mov	r1, r3
 1117 0116 8048     		ldr	r0, .L50+44
 1118 0118 FFF7FEFF 		bl	pushData
 1119              	.LBE3:
 1120 011c 0FE0     		b	.L42
 1121              	.L41:
 1122              	.LBB4:
 411:notoriOS.c    ****         }else{
 412:notoriOS.c    ****             char c_data_count_sent[20];
 413:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1123              		.loc 1 413 0
 1124 011e 07F2C440 		addw	r0, r7, #1220
 1125 0122 9623     		movs	r3, #150
 1126 0124 774A     		ldr	r2, .L50+24
 1127 0126 1421     		movs	r1, #20
 1128 0128 FFF7FEFF 		bl	snprintf
 414:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1129              		.loc 1 414 0
 1130 012c FFF7FEFF 		bl	getTimeStamp
 1131 0130 0246     		mov	r2, r0
 1132 0132 07F2C443 		addw	r3, r7, #1220
 1133 0136 1946     		mov	r1, r3
 1134 0138 7748     		ldr	r0, .L50+44
 1135 013a FFF7FEFF 		bl	pushData
 1136              	.L42:
 1137              	.LBE4:
 415:notoriOS.c    ****         }
 416:notoriOS.c    ****         
 417:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 418:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1138              		.loc 1 418 0
 1139 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1140 0142 0346     		mov	r3, r0
 1141 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 419:notoriOS.c    ****         char c_data_count_desired[20];
 420:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 421:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1142              		.loc 1 421 0
 1143 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1144 014c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 30


 1145 014e 07F2EC40 		addw	r0, r7, #1260
 1146 0152 6C4A     		ldr	r2, .L50+24
 1147 0154 1421     		movs	r1, #20
 1148 0156 FFF7FEFF 		bl	snprintf
 422:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1149              		.loc 1 422 0
 1150 015a FFF7FEFF 		bl	getTimeStamp
 1151 015e 0246     		mov	r2, r0
 1152 0160 07F2EC43 		addw	r3, r7, #1260
 1153 0164 1946     		mov	r1, r3
 1154 0166 6D48     		ldr	r0, .L50+48
 1155 0168 FFF7FEFF 		bl	pushData
 423:notoriOS.c    ****         
 424:notoriOS.c    ****         // Construct HTPP request
 425:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1156              		.loc 1 425 0
 1157 016c 6C49     		ldr	r1, .L50+52
 1158 016e 0020     		movs	r0, #0
 1159 0170 FFF7FEFF 		bl	printNotif
 426:notoriOS.c    ****         
 427:notoriOS.c    ****         // Old influx API
 428:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 429:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1160              		.loc 1 429 0
 1161 0174 6B4B     		ldr	r3, .L50+56
 1162 0176 6C4A     		ldr	r2, .L50+60
 1163 0178 6C49     		ldr	r1, .L50+64
 1164 017a 6048     		ldr	r0, .L50+16
 1165 017c FFF7FEFF 		bl	construct_malcom_route
 430:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1166              		.loc 1 430 0
 1167 0180 5E4A     		ldr	r2, .L50+16
 1168 0182 6B49     		ldr	r1, .L50+68
 1169 0184 0020     		movs	r0, #0
 1170 0186 FFF7FEFF 		bl	printNotif
 431:notoriOS.c    ****         
 432:notoriOS.c    ****         //OLD INFLUX API
 433:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 434:notoriOS.c    ****         construct_malcom_body(http_body);
 1171              		.loc 1 434 0
 1172 018a 5B48     		ldr	r0, .L50+12
 1173 018c FFF7FEFF 		bl	construct_malcom_body
 435:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1174              		.loc 1 435 0
 1175 0190 684B     		ldr	r3, .L50+72
 1176 0192 5B6E     		ldr	r3, [r3, #100]
 1177 0194 684A     		ldr	r2, .L50+76
 1178 0196 0592     		str	r2, [sp, #20]
 1179 0198 0022     		movs	r2, #0
 1180 019a 0492     		str	r2, [sp, #16]
 1181 019c 674A     		ldr	r2, .L50+80
 1182 019e 0392     		str	r2, [sp, #12]
 1183 01a0 674A     		ldr	r2, .L50+84
 1184 01a2 0292     		str	r2, [sp, #8]
 1185 01a4 674A     		ldr	r2, .L50+88
 1186 01a6 0192     		str	r2, [sp, #4]
 1187 01a8 0093     		str	r3, [sp]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 31


 1188 01aa 544B     		ldr	r3, .L50+16
 1189 01ac 614A     		ldr	r2, .L50+72
 1190 01ae 5249     		ldr	r1, .L50+12
 1191 01b0 5048     		ldr	r0, .L50+8
 1192 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 436:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1193              		.loc 1 436 0
 1194 01b6 4F4A     		ldr	r2, .L50+8
 1195 01b8 6349     		ldr	r1, .L50+92
 1196 01ba 0020     		movs	r0, #0
 1197 01bc FFF7FEFF 		bl	printNotif
 437:notoriOS.c    ****         
 438:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 439:notoriOS.c    ****         // Open port and begin command line sequence
 440:notoriOS.c    ****         char portConfig[200];
 441:notoriOS.c    ****         uint8 status = 0u;
 1198              		.loc 1 441 0
 1199 01c0 0023     		movs	r3, #0
 1200 01c2 87F84535 		strb	r3, [r7, #1349]
 442:notoriOS.c    ****         
 443:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1201              		.loc 1 443 0
 1202 01c6 5B4B     		ldr	r3, .L50+72
 1203 01c8 5A6E     		ldr	r2, [r3, #100]
 1204 01ca 381D     		adds	r0, r7, #4
 1205 01cc 594B     		ldr	r3, .L50+72
 1206 01ce 0093     		str	r3, [sp]
 1207 01d0 1346     		mov	r3, r2
 1208 01d2 5E4A     		ldr	r2, .L50+96
 1209 01d4 C821     		movs	r1, #200
 1210 01d6 FFF7FEFF 		bl	snprintf
 444:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1211              		.loc 1 444 0
 1212 01da 3B1D     		adds	r3, r7, #4
 1213 01dc 1A46     		mov	r2, r3
 1214 01de 5C49     		ldr	r1, .L50+100
 1215 01e0 0020     		movs	r0, #0
 1216 01e2 FFF7FEFF 		bl	printNotif
 445:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1217              		.loc 1 445 0
 1218 01e6 3B1D     		adds	r3, r7, #4
 1219 01e8 42F21072 		movw	r2, #10000
 1220 01ec 5949     		ldr	r1, .L50+104
 1221 01ee 1846     		mov	r0, r3
 1222 01f0 FFF7FEFF 		bl	at_write_command
 1223 01f4 0346     		mov	r3, r0
 1224 01f6 87F84535 		strb	r3, [r7, #1349]
 446:notoriOS.c    ****         
 447:notoriOS.c    ****         // create character pointer to chunk through the http_request
 448:notoriOS.c    ****         char *chunk;
 449:notoriOS.c    ****         // Set chunk to start where http_request starts
 450:notoriOS.c    ****         chunk = http_request;
 1225              		.loc 1 450 0
 1226 01fa 3E4B     		ldr	r3, .L50+8
 1227 01fc C7F84C35 		str	r3, [r7, #1356]
 451:notoriOS.c    ****         // variable for the number of packets to send
 452:notoriOS.c    ****         int8 packets;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 32


 453:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1228              		.loc 1 453 0
 1229 0200 3C48     		ldr	r0, .L50+8
 1230 0202 FFF7FEFF 		bl	strlen
 1231 0206 0246     		mov	r2, r0
 1232 0208 534B     		ldr	r3, .L50+108
 1233 020a A3FB0223 		umull	r2, r3, r3, r2
 1234 020e 5B09     		lsrs	r3, r3, #5
 1235 0210 1846     		mov	r0, r3
 1236 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1237 0216 4FF00002 		mov	r2, #0
 1238 021a 504B     		ldr	r3, .L50+112
 1239 021c FFF7FEFF 		bl	nextafter
 1240 0220 0346     		mov	r3, r0
 1241 0222 0C46     		mov	r4, r1
 1242 0224 1846     		mov	r0, r3
 1243 0226 2146     		mov	r1, r4
 1244 0228 FFF7FEFF 		bl	ceil
 1245 022c 0346     		mov	r3, r0
 1246 022e 0C46     		mov	r4, r1
 1247 0230 1846     		mov	r0, r3
 1248 0232 2146     		mov	r1, r4
 1249 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1250 0238 0346     		mov	r3, r0
 1251 023a 87F84435 		strb	r3, [r7, #1348]
 454:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1252              		.loc 1 454 0
 1253 023e 2D48     		ldr	r0, .L50+8
 1254 0240 FFF7FEFF 		bl	strlen
 1255 0244 0346     		mov	r3, r0
 1256 0246 1A46     		mov	r2, r3
 1257 0248 4549     		ldr	r1, .L50+116
 1258 024a 0020     		movs	r0, #0
 1259 024c FFF7FEFF 		bl	printNotif
 455:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1260              		.loc 1 455 0
 1261 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1262 0254 1A46     		mov	r2, r3
 1263 0256 4349     		ldr	r1, .L50+120
 1264 0258 0020     		movs	r0, #0
 1265 025a FFF7FEFF 		bl	printNotif
 1266              	.LBB5:
 456:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 457:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1267              		.loc 1 457 0
 1268 025e 0023     		movs	r3, #0
 1269 0260 87F84B35 		strb	r3, [r7, #1355]
 1270 0264 9AE0     		b	.L43
 1271              	.L46:
 1272              	.LBB6:
 458:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 459:notoriOS.c    ****             char http_chunk[1001];
 460:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 461:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 462:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1273              		.loc 1 462 0
 1274 0266 4FF47A72 		mov	r2, #1000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 33


 1275 026a 3F49     		ldr	r1, .L50+124
 1276 026c 3F48     		ldr	r0, .L50+128
 1277 026e FFF7FEFF 		bl	at_write_command
 1278 0272 0346     		mov	r3, r0
 1279 0274 87F84535 		strb	r3, [r7, #1349]
 463:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 464:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1280              		.loc 1 464 0
 1281 0278 07F1CC00 		add	r0, r7, #204
 1282 027c D7F84C35 		ldr	r3, [r7, #1356]
 1283 0280 334A     		ldr	r2, .L50+100
 1284 0282 4FF4FA71 		mov	r1, #500
 1285 0286 FFF7FEFF 		bl	snprintf
 465:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 466:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1286              		.loc 1 466 0
 1287 028a 07F1CC03 		add	r3, r7, #204
 1288 028e 1846     		mov	r0, r3
 1289 0290 FFF7FEFF 		bl	strlen
 1290 0294 0346     		mov	r3, r0
 1291 0296 1A46     		mov	r2, r3
 1292 0298 07F1CC03 		add	r3, r7, #204
 1293 029c 1344     		add	r3, r3, r2
 1294 029e 3449     		ldr	r1, .L50+132
 1295 02a0 1A46     		mov	r2, r3
 1296 02a2 0B46     		mov	r3, r1
 1297 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1298 02a6 1380     		strh	r3, [r2]	@ unaligned
 467:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1299              		.loc 1 467 0
 1300 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1301 02ac 07F1CC03 		add	r3, r7, #204
 1302 02b0 3049     		ldr	r1, .L50+136
 1303 02b2 0020     		movs	r0, #0
 1304 02b4 FFF7FEFF 		bl	printNotif
 468:notoriOS.c    ****             // Send data to server
 469:notoriOS.c    ****             if ((packet+1) != packets){
 1305              		.loc 1 469 0
 1306 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1307 02bc 5A1C     		adds	r2, r3, #1
 1308 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1309 02c2 9A42     		cmp	r2, r3
 1310 02c4 58D0     		beq	.L44
 470:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1311              		.loc 1 470 0
 1312 02c6 07F1CC03 		add	r3, r7, #204
 1313 02ca 41F28832 		movw	r2, #5000
 1314 02ce 2149     		ldr	r1, .L50+104
 1315 02d0 1846     		mov	r0, r3
 1316 02d2 FFF7FEFF 		bl	at_write_command
 1317 02d6 0346     		mov	r3, r0
 1318 02d8 87F84535 		strb	r3, [r7, #1349]
 471:notoriOS.c    ****                 // Move the pointer forward 
 472:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1319              		.loc 1 472 0
 1320 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1321 02e0 03F2F313 		addw	r3, r3, #499
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 34


 1322 02e4 C7F84C35 		str	r3, [r7, #1356]
 1323 02e8 51E0     		b	.L45
 1324              	.L51:
 1325 02ea 00BF     		.align	2
 1326              	.L50:
 1327 02ec 00000000 		.word	try_counter
 1328 02f0 98000000 		.word	.LC5
 1329 02f4 00000000 		.word	http_request
 1330 02f8 00000000 		.word	http_body
 1331 02fc 00000000 		.word	http_route
 1332 0300 00000000 		.word	modem_stats
 1333 0304 A8000000 		.word	.LC6
 1334 0308 AC000000 		.word	.LC7
 1335 030c B4000000 		.word	.LC8
 1336 0310 BC000000 		.word	.LC9
 1337 0314 00000000 		.word	buffer_overflow
 1338 0318 C8000000 		.word	.LC10
 1339 031c D8000000 		.word	.LC11
 1340 0320 EC000000 		.word	.LC12
 1341 0324 00010000 		.word	.LC13
 1342 0328 28000000 		.word	modem_info+40
 1343 032c 2C010000 		.word	.LC14
 1344 0330 3C010000 		.word	.LC15
 1345 0334 00000000 		.word	system_settings
 1346 0338 4C010000 		.word	.LC16
 1347 033c 50010000 		.word	.LC17
 1348 0340 54010000 		.word	.LC18
 1349 0344 5C010000 		.word	.LC19
 1350 0348 64010000 		.word	.LC20
 1351 034c 7C010000 		.word	.LC21
 1352 0350 98010000 		.word	.LC22
 1353 0354 9C010000 		.word	.LC23
 1354 0358 D34D6210 		.word	274877907
 1355 035c 00407F40 		.word	1082081280
 1356 0360 A0010000 		.word	.LC24
 1357 0364 B8010000 		.word	.LC25
 1358 0368 CC010000 		.word	.LC26
 1359 036c D0010000 		.word	.LC27
 1360 0370 E0010000 		.word	.LC28
 1361 0374 E4010000 		.word	.LC29
 1362              	.L44:
 473:notoriOS.c    ****             }else{
 474:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1363              		.loc 1 474 0
 1364 0378 07F1CC03 		add	r3, r7, #204
 1365 037c 41F28832 		movw	r2, #5000
 1366 0380 2E49     		ldr	r1, .L52
 1367 0382 1846     		mov	r0, r3
 1368 0384 FFF7FEFF 		bl	at_write_command
 1369 0388 0346     		mov	r3, r0
 1370 038a 87F84535 		strb	r3, [r7, #1349]
 1371              	.L45:
 1372              	.LBE6:
 457:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1373              		.loc 1 457 0 discriminator 2
 1374 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1375 0392 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 35


 1376 0394 0133     		adds	r3, r3, #1
 1377 0396 DBB2     		uxtb	r3, r3
 1378 0398 87F84B35 		strb	r3, [r7, #1355]
 1379              	.L43:
 457:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1380              		.loc 1 457 0 is_stmt 0 discriminator 1
 1381 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1382 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1383 03a4 9A42     		cmp	r2, r3
 1384 03a6 FFF65EAF 		blt	.L46
 1385              	.LBE5:
 475:notoriOS.c    ****             }
 476:notoriOS.c    ****             
 477:notoriOS.c    ****         }
 478:notoriOS.c    ****         
 479:notoriOS.c    ****         // Read received buffer
 480:notoriOS.c    ****         // A good write will return code "OS-OK"
 481:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 482:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 483:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1386              		.loc 1 483 0 is_stmt 1
 1387 03aa 41F28832 		movw	r2, #5000
 1388 03ae 2449     		ldr	r1, .L52+4
 1389 03b0 2448     		ldr	r0, .L52+8
 1390 03b2 FFF7FEFF 		bl	at_write_command
 1391 03b6 0346     		mov	r3, r0
 1392 03b8 87F84535 		strb	r3, [r7, #1349]
 484:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 485:notoriOS.c    ****     
 486:notoriOS.c    ****   
 487:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 488:notoriOS.c    ****         if(status == 1u){
 1393              		.loc 1 488 0
 1394 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1395 03c0 012B     		cmp	r3, #1
 1396 03c2 1DD1     		bne	.L47
 1397              	.LBB7:
 489:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1398              		.loc 1 489 0
 1399 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 490:notoriOS.c    ****             Clear_Data_Stack();
 1400              		.loc 1 490 0
 1401 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 491:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1402              		.loc 1 491 0
 1403 03cc FFF7FEFF 		bl	getTimeStamp
 1404 03d0 0246     		mov	r2, r0
 1405 03d2 1D4B     		ldr	r3, .L52+12
 1406 03d4 1B68     		ldr	r3, [r3]
 1407 03d6 D31A     		subs	r3, r2, r3
 1408 03d8 C7F84035 		str	r3, [r7, #1344]
 492:notoriOS.c    ****             char s_send_time[10];
 493:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1409              		.loc 1 493 0
 1410 03dc 07F59760 		add	r0, r7, #1208
 1411 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1412 03e4 194A     		ldr	r2, .L52+16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 36


 1413 03e6 0A21     		movs	r1, #10
 1414 03e8 FFF7FEFF 		bl	snprintf
 494:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1415              		.loc 1 494 0
 1416 03ec FFF7FEFF 		bl	getTimeStamp
 1417 03f0 0246     		mov	r2, r0
 1418 03f2 07F59763 		add	r3, r7, #1208
 1419 03f6 1946     		mov	r1, r3
 1420 03f8 1548     		ldr	r0, .L52+20
 1421 03fa FFF7FEFF 		bl	pushData
 1422              	.LBE7:
 1423 03fe 03E0     		b	.L48
 1424              	.L47:
 495:notoriOS.c    ****         }else{
 496:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1425              		.loc 1 496 0
 1426 0400 1449     		ldr	r1, .L52+24
 1427 0402 0220     		movs	r0, #2
 1428 0404 FFF7FEFF 		bl	printNotif
 1429              	.L48:
 497:notoriOS.c    ****         }
 498:notoriOS.c    ****          
 499:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 500:notoriOS.c    ****         long network_time = modem_get_network_time();
 1430              		.loc 1 500 0
 1431 0408 FFF7FEFF 		bl	modem_get_network_time
 1432 040c C7F83C05 		str	r0, [r7, #1340]
 501:notoriOS.c    ****         if(network_time != 0){
 1433              		.loc 1 501 0
 1434 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1435 0414 002B     		cmp	r3, #0
 1436 0416 03D0     		beq	.L49
 502:notoriOS.c    ****            setTime(network_time);
 1437              		.loc 1 502 0
 1438 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1439 041c FFF7FEFF 		bl	setTime
 1440              	.L49:
 503:notoriOS.c    ****         }
 504:notoriOS.c    ****         
 505:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 506:notoriOS.c    ****         // If not -- keep the statck and try next time
 507:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 508:notoriOS.c    ****         modem_power_down();
 1441              		.loc 1 508 0
 1442 0420 FFF7FEFF 		bl	modem_power_down
 509:notoriOS.c    ****         
 510:notoriOS.c    ****         try_counter = 0u;
 1443              		.loc 1 510 0
 1444 0424 0C4B     		ldr	r3, .L52+28
 1445 0426 0022     		movs	r2, #0
 1446 0428 1A70     		strb	r2, [r3]
 511:notoriOS.c    ****         return 0u;
 1447              		.loc 1 511 0
 1448 042a 0023     		movs	r3, #0
 1449 042c 00E0     		b	.L37
 1450              	.L40:
 1451              	.LBE2:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 37


 512:notoriOS.c    ****     }
 513:notoriOS.c    ****       
 514:notoriOS.c    ****       return 1u; // Not done yet
 1452              		.loc 1 514 0
 1453 042e 0123     		movs	r3, #1
 1454              	.L37:
 515:notoriOS.c    **** }
 1455              		.loc 1 515 0 discriminator 1
 1456 0430 1846     		mov	r0, r3
 1457 0432 07F25457 		addw	r7, r7, #1364
 1458              		.cfi_def_cfa_offset 12
 1459 0436 BD46     		mov	sp, r7
 1460              		.cfi_def_cfa_register 13
 1461              		@ sp needed
 1462 0438 90BD     		pop	{r4, r7, pc}
 1463              	.L53:
 1464 043a 00BF     		.align	2
 1465              	.L52:
 1466 043c F4010000 		.word	.LC30
 1467 0440 FC010000 		.word	.LC31
 1468 0444 04020000 		.word	.LC32
 1469 0448 00000000 		.word	modem_start_time_stamp
 1470 044c A8000000 		.word	.LC6
 1471 0450 18020000 		.word	.LC33
 1472 0454 28020000 		.word	.LC34
 1473 0458 00000000 		.word	try_counter
 1474              		.cfi_endproc
 1475              	.LFE74:
 1476              		.size	syncData, .-syncData
 1477              		.section	.text.configureRemoteParams,"ax",%progbits
 1478              		.align	2
 1479              		.global	configureRemoteParams
 1480              		.thumb
 1481              		.thumb_func
 1482              		.type	configureRemoteParams, %function
 1483              	configureRemoteParams:
 1484              	.LFB75:
 516:notoriOS.c    **** 
 517:notoriOS.c    **** // ==============================================
 518:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 519:notoriOS.c    **** // Returns 0 when done
 520:notoriOS.c    **** // ==============================================
 521:notoriOS.c    **** uint8 configureRemoteParams(){
 1485              		.loc 1 521 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 8
 1488              		@ frame_needed = 1, uses_anonymous_args = 0
 1489 0000 80B5     		push	{r7, lr}
 1490              		.cfi_def_cfa_offset 8
 1491              		.cfi_offset 7, -8
 1492              		.cfi_offset 14, -4
 1493 0002 82B0     		sub	sp, sp, #8
 1494              		.cfi_def_cfa_offset 16
 1495 0004 00AF     		add	r7, sp, #0
 1496              		.cfi_def_cfa_register 7
 522:notoriOS.c    ****     
 523:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 38


 1497              		.loc 1 523 0
 1498 0006 FFF7FEFF 		bl	modem_get_state
 1499 000a 0346     		mov	r3, r0
 1500 000c 002B     		cmp	r3, #0
 1501 000e 02D1     		bne	.L55
 524:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 525:notoriOS.c    ****         modem_power_up();
 1502              		.loc 1 525 0
 1503 0010 FFF7FEFF 		bl	modem_power_up
 1504 0014 11E0     		b	.L56
 1505              	.L55:
 526:notoriOS.c    ****             
 527:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1506              		.loc 1 527 0
 1507 0016 FFF7FEFF 		bl	modem_get_state
 1508 001a 0346     		mov	r3, r0
 1509 001c 042B     		cmp	r3, #4
 1510 001e 0CD1     		bne	.L56
 1511              	.LBB8:
 528:notoriOS.c    ****         
 529:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 530:notoriOS.c    ****         
 531:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 532:notoriOS.c    ****         long network_time = modem_get_network_time();
 1512              		.loc 1 532 0
 1513 0020 FFF7FEFF 		bl	modem_get_network_time
 1514 0024 7860     		str	r0, [r7, #4]
 533:notoriOS.c    ****         if(network_time != 0){
 1515              		.loc 1 533 0
 1516 0026 7B68     		ldr	r3, [r7, #4]
 1517 0028 002B     		cmp	r3, #0
 1518 002a 02D0     		beq	.L57
 534:notoriOS.c    ****             setTime(network_time);
 1519              		.loc 1 534 0
 1520 002c 7868     		ldr	r0, [r7, #4]
 1521 002e FFF7FEFF 		bl	setTime
 1522              	.L57:
 535:notoriOS.c    ****         }
 536:notoriOS.c    ****         
 537:notoriOS.c    ****         // Get GPS coordinates
 538:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 539:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 540:notoriOS.c    ****         modem_power_down();
 1523              		.loc 1 540 0
 1524 0032 FFF7FEFF 		bl	modem_power_down
 541:notoriOS.c    ****         return 0u;
 1525              		.loc 1 541 0
 1526 0036 0023     		movs	r3, #0
 1527 0038 00E0     		b	.L58
 1528              	.L56:
 1529              	.LBE8:
 542:notoriOS.c    ****         
 543:notoriOS.c    ****     }
 544:notoriOS.c    ****     
 545:notoriOS.c    ****     return 1u;
 1530              		.loc 1 545 0
 1531 003a 0123     		movs	r3, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 39


 1532              	.L58:
 546:notoriOS.c    **** }
 1533              		.loc 1 546 0
 1534 003c 1846     		mov	r0, r3
 1535 003e 0837     		adds	r7, r7, #8
 1536              		.cfi_def_cfa_offset 8
 1537 0040 BD46     		mov	sp, r7
 1538              		.cfi_def_cfa_register 13
 1539              		@ sp needed
 1540 0042 80BD     		pop	{r7, pc}
 1541              		.cfi_endproc
 1542              	.LFE75:
 1543              		.size	configureRemoteParams, .-configureRemoteParams
 1544              		.section	.rodata
 1545 0253 00       		.align	2
 1546              	.LC35:
 1547 0254 256C6400 		.ascii	"%ld\000"
 1548              		.global	__aeabi_f2d
 1549              		.align	2
 1550              	.LC36:
 1551 0258 252E3266 		.ascii	"%.2f\000"
 1551      00
 1552 025d 000000   		.align	2
 1553              	.LC37:
 1554 0260 765F6261 		.ascii	"v_bat=%s\000"
 1554      743D2573 
 1554      00
 1555 0269 000000   		.align	2
 1556              	.LC38:
 1557 026c 765F6261 		.ascii	"v_bat\000"
 1557      7400
 1558 0272 0000     		.align	2
 1559              	.LC39:
 1560 0274 2000     		.ascii	" \000"
 1561 0276 0000     		.align	2
 1562              	.LC40:
 1563 0278 612B00   		.ascii	"a+\000"
 1564 027b 00       		.align	2
 1565              	.LC41:
 1566 027c 20766261 		.ascii	" vbat: \000"
 1566      743A2000 
 1567              		.section	.text.makeMeasurements,"ax",%progbits
 1568              		.align	2
 1569              		.global	makeMeasurements
 1570              		.thumb
 1571              		.thumb_func
 1572              		.type	makeMeasurements, %function
 1573              	makeMeasurements:
 1574              	.LFB76:
 547:notoriOS.c    **** 
 548:notoriOS.c    **** 
 549:notoriOS.c    **** // ==============================================
 550:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 551:notoriOS.c    **** // Returns 0 when finished
 552:notoriOS.c    **** // ==============================================
 553:notoriOS.c    **** uint8 makeMeasurements(){
 1575              		.loc 1 553 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 40


 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 80
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
 1579 0000 90B5     		push	{r4, r7, lr}
 1580              		.cfi_def_cfa_offset 12
 1581              		.cfi_offset 4, -12
 1582              		.cfi_offset 7, -8
 1583              		.cfi_offset 14, -4
 1584 0002 97B0     		sub	sp, sp, #92
 1585              		.cfi_def_cfa_offset 104
 1586 0004 02AF     		add	r7, sp, #8
 1587              		.cfi_def_cfa 7, 96
 554:notoriOS.c    ****     
 555:notoriOS.c    ****     // Get clock time and save to timeStamp
 556:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1588              		.loc 1 556 0
 1589 0006 FFF7FEFF 		bl	getTimeStamp
 1590 000a F864     		str	r0, [r7, #76]
 557:notoriOS.c    ****     char c_timeStamp[32];
 558:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1591              		.loc 1 558 0
 1592 000c 07F12C00 		add	r0, r7, #44
 1593 0010 FB6C     		ldr	r3, [r7, #76]
 1594 0012 224A     		ldr	r2, .L62
 1595 0014 2021     		movs	r1, #32
 1596 0016 FFF7FEFF 		bl	snprintf
 559:notoriOS.c    ****     
 560:notoriOS.c    ****     // Holds string for value that will be written 
 561:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 562:notoriOS.c    ****     
 563:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 564:notoriOS.c    ****     // deprecated in app format
 565:notoriOS.c    ****     /*
 566:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 567:notoriOS.c    ****         
 568:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 569:notoriOS.c    ****         level_sensor_t m_level_sensor;
 570:notoriOS.c    ****         
 571:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 572:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 573:notoriOS.c    ****     
 574:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 575:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 576:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 577:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 578:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 579:notoriOS.c    ****             
 580:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 581:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 582:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 583:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 584:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 585:notoriOS.c    ****         }else{
 586:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 587:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 588:notoriOS.c    ****         }
 589:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 41


 590:notoriOS.c    ****     */
 591:notoriOS.c    ****     
 592:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 593:notoriOS.c    ****     voltage_t m_voltage;
 594:notoriOS.c    ****     
 595:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 596:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1597              		.loc 1 596 0
 1598 001a 3B1D     		adds	r3, r7, #4
 1599 001c 1846     		mov	r0, r3
 1600 001e FFF7FEFF 		bl	voltage_take_readings
 597:notoriOS.c    ****     
 598:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 599:notoriOS.c    ****     if(m_voltage.valid){
 1601              		.loc 1 599 0
 1602 0022 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 1603 0024 002B     		cmp	r3, #0
 1604 0026 33D0     		beq	.L60
 600:notoriOS.c    ****         // battery voltage data
 601:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1605              		.loc 1 601 0
 1606 0028 7B68     		ldr	r3, [r7, #4]	@ float
 1607 002a 1846     		mov	r0, r3
 1608 002c FFF7FEFF 		bl	__aeabi_f2d
 1609 0030 0346     		mov	r3, r0
 1610 0032 0C46     		mov	r4, r1
 1611 0034 07F11800 		add	r0, r7, #24
 1612 0038 CDE90034 		strd	r3, [sp]
 1613 003c 184A     		ldr	r2, .L62+4
 1614 003e 1421     		movs	r1, #20
 1615 0040 FFF7FEFF 		bl	snprintf
 602:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1616              		.loc 1 602 0
 1617 0044 07F11803 		add	r3, r7, #24
 1618 0048 1A46     		mov	r2, r3
 1619 004a 1649     		ldr	r1, .L62+8
 1620 004c 0020     		movs	r0, #0
 1621 004e FFF7FEFF 		bl	printNotif
 603:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1622              		.loc 1 603 0
 1623 0052 07F11803 		add	r3, r7, #24
 1624 0056 FA6C     		ldr	r2, [r7, #76]
 1625 0058 1946     		mov	r1, r3
 1626 005a 1348     		ldr	r0, .L62+12
 1627 005c FFF7FEFF 		bl	pushData
 604:notoriOS.c    ****         
 605:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 606:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1628              		.loc 1 606 0
 1629 0060 124A     		ldr	r2, .L62+16
 1630 0062 1349     		ldr	r1, .L62+20
 1631 0064 1348     		ldr	r0, .L62+24
 1632 0066 FFF7FEFF 		bl	SD_write
 607:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1633              		.loc 1 607 0
 1634 006a 07F12C03 		add	r3, r7, #44
 1635 006e 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 42


 1636 0070 0F49     		ldr	r1, .L62+20
 1637 0072 1048     		ldr	r0, .L62+24
 1638 0074 FFF7FEFF 		bl	SD_write
 608:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1639              		.loc 1 608 0
 1640 0078 0F4A     		ldr	r2, .L62+28
 1641 007a 0D49     		ldr	r1, .L62+20
 1642 007c 0D48     		ldr	r0, .L62+24
 1643 007e FFF7FEFF 		bl	SD_write
 609:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1644              		.loc 1 609 0
 1645 0082 07F11803 		add	r3, r7, #24
 1646 0086 1A46     		mov	r2, r3
 1647 0088 0949     		ldr	r1, .L62+20
 1648 008a 0A48     		ldr	r0, .L62+24
 1649 008c FFF7FEFF 		bl	SD_write
 1650              	.L60:
 610:notoriOS.c    ****         
 611:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 612:notoriOS.c    ****         /* 
 613:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 614:notoriOS.c    ****             
 615:notoriOS.c    ****             // pressure transducer voltage (V) data
 616:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 617:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 618:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 619:notoriOS.c    ****             
 620:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 621:notoriOS.c    ****             pressure_t m_pressure;
 622:notoriOS.c    ****             
 623:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 624:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 625:notoriOS.c    ****             
 626:notoriOS.c    ****             // pressure transducer current (mA) data
 627:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 628:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 629:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 630:notoriOS.c    ****             
 631:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 632:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 633:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 634:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 635:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 636:notoriOS.c    ****             
 637:notoriOS.c    ****             // pressure transducer depth (ft) data
 638:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 639:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 640:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 641:notoriOS.c    ****             
 642:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 643:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 644:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 645:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 646:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 647:notoriOS.c    ****         }    
 648:notoriOS.c    ****     }else{
 649:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 43


 650:notoriOS.c    ****         */
 651:notoriOS.c    ****     }
 652:notoriOS.c    ****         
 653:notoriOS.c    ****     
 654:notoriOS.c    ****     return 0u;
 1651              		.loc 1 654 0
 1652 0090 0023     		movs	r3, #0
 655:notoriOS.c    **** }
 1653              		.loc 1 655 0
 1654 0092 1846     		mov	r0, r3
 1655 0094 5437     		adds	r7, r7, #84
 1656              		.cfi_def_cfa_offset 12
 1657 0096 BD46     		mov	sp, r7
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 0098 90BD     		pop	{r4, r7, pc}
 1661              	.L63:
 1662 009a 00BF     		.align	2
 1663              	.L62:
 1664 009c 54020000 		.word	.LC35
 1665 00a0 58020000 		.word	.LC36
 1666 00a4 60020000 		.word	.LC37
 1667 00a8 6C020000 		.word	.LC38
 1668 00ac 74020000 		.word	.LC39
 1669 00b0 78020000 		.word	.LC40
 1670 00b4 00000000 		.word	Data_fileName
 1671 00b8 7C020000 		.word	.LC41
 1672              		.cfi_endproc
 1673              	.LFE76:
 1674              		.size	makeMeasurements, .-makeMeasurements
 1675              		.section	.rodata
 1676              		.align	2
 1677              	.LC42:
 1678 0284 4572726F 		.ascii	"Error setting system time.\000"
 1678      72207365 
 1678      7474696E 
 1678      67207379 
 1678      7374656D 
 1679              		.section	.text.setTime,"ax",%progbits
 1680              		.align	2
 1681              		.global	setTime
 1682              		.thumb
 1683              		.thumb_func
 1684              		.type	setTime, %function
 1685              	setTime:
 1686              	.LFB77:
 656:notoriOS.c    **** 
 657:notoriOS.c    **** // ==============================================
 658:notoriOS.c    **** // Set the system time
 659:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 660:notoriOS.c    **** // ==============================================
 661:notoriOS.c    **** uint8 setTime(long timeStamp){
 1687              		.loc 1 661 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 24
 1690              		@ frame_needed = 1, uses_anonymous_args = 0
 1691 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 44


 1692              		.cfi_def_cfa_offset 8
 1693              		.cfi_offset 7, -8
 1694              		.cfi_offset 14, -4
 1695 0002 86B0     		sub	sp, sp, #24
 1696              		.cfi_def_cfa_offset 32
 1697 0004 00AF     		add	r7, sp, #0
 1698              		.cfi_def_cfa_register 7
 1699 0006 7860     		str	r0, [r7, #4]
 662:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 663:notoriOS.c    ****     if(timeStamp <=0){
 1700              		.loc 1 663 0
 1701 0008 7B68     		ldr	r3, [r7, #4]
 1702 000a 002B     		cmp	r3, #0
 1703 000c 05DC     		bgt	.L65
 664:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1704              		.loc 1 664 0
 1705 000e 1849     		ldr	r1, .L67
 1706 0010 0220     		movs	r0, #2
 1707 0012 FFF7FEFF 		bl	printNotif
 665:notoriOS.c    ****         return 0;  
 1708              		.loc 1 665 0
 1709 0016 0023     		movs	r3, #0
 1710 0018 25E0     		b	.L66
 1711              	.L65:
 666:notoriOS.c    ****     }
 667:notoriOS.c    ****     // Create a new pointer t of data structure tm
 668:notoriOS.c    ****     struct tm * t;
 669:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 670:notoriOS.c    ****     t = gmtime(&timeStamp);
 1712              		.loc 1 670 0
 1713 001a 3B1D     		adds	r3, r7, #4
 1714 001c 1846     		mov	r0, r3
 1715 001e FFF7FEFF 		bl	gmtime
 1716 0022 7861     		str	r0, [r7, #20]
 671:notoriOS.c    ****     
 672:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 673:notoriOS.c    ****     RTC_TIME_DATE localTime;
 674:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1717              		.loc 1 674 0
 1718 0024 7B69     		ldr	r3, [r7, #20]
 1719 0026 1B68     		ldr	r3, [r3]
 1720 0028 DBB2     		uxtb	r3, r3
 1721 002a 3B72     		strb	r3, [r7, #8]
 675:notoriOS.c    ****     localTime.Min = t->tm_min;
 1722              		.loc 1 675 0
 1723 002c 7B69     		ldr	r3, [r7, #20]
 1724 002e 5B68     		ldr	r3, [r3, #4]
 1725 0030 DBB2     		uxtb	r3, r3
 1726 0032 7B72     		strb	r3, [r7, #9]
 676:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1727              		.loc 1 676 0
 1728 0034 7B69     		ldr	r3, [r7, #20]
 1729 0036 9B68     		ldr	r3, [r3, #8]
 1730 0038 DBB2     		uxtb	r3, r3
 1731 003a BB72     		strb	r3, [r7, #10]
 677:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1732              		.loc 1 677 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 45


 1733 003c 7B69     		ldr	r3, [r7, #20]
 1734 003e 5B69     		ldr	r3, [r3, #20]
 1735 0040 9BB2     		uxth	r3, r3
 1736 0042 03F26C73 		addw	r3, r3, #1900
 1737 0046 9BB2     		uxth	r3, r3
 1738 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 678:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1739              		.loc 1 678 0
 1740 004a 7B69     		ldr	r3, [r7, #20]
 1741 004c 1B69     		ldr	r3, [r3, #16]
 1742 004e DBB2     		uxtb	r3, r3
 1743 0050 3B74     		strb	r3, [r7, #16]
 679:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1744              		.loc 1 679 0
 1745 0052 7B69     		ldr	r3, [r7, #20]
 1746 0054 DB68     		ldr	r3, [r3, #12]
 1747 0056 DBB2     		uxtb	r3, r3
 1748 0058 3B73     		strb	r3, [r7, #12]
 680:notoriOS.c    **** 
 681:notoriOS.c    ****     // Writes time and date values as current time and date.
 682:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1749              		.loc 1 682 0
 1750 005a 07F10803 		add	r3, r7, #8
 1751 005e 1846     		mov	r0, r3
 1752 0060 FFF7FEFF 		bl	RTC_WriteTime
 683:notoriOS.c    ****     
 684:notoriOS.c    ****     // Return 1 when the system time was set properly.
 685:notoriOS.c    ****     return 1;
 1753              		.loc 1 685 0
 1754 0064 0123     		movs	r3, #1
 1755              	.L66:
 686:notoriOS.c    **** }
 1756              		.loc 1 686 0
 1757 0066 1846     		mov	r0, r3
 1758 0068 1837     		adds	r7, r7, #24
 1759              		.cfi_def_cfa_offset 8
 1760 006a BD46     		mov	sp, r7
 1761              		.cfi_def_cfa_register 13
 1762              		@ sp needed
 1763 006c 80BD     		pop	{r7, pc}
 1764              	.L68:
 1765 006e 00BF     		.align	2
 1766              	.L67:
 1767 0070 84020000 		.word	.LC42
 1768              		.cfi_endproc
 1769              	.LFE77:
 1770              		.size	setTime, .-setTime
 1771              		.section	.rodata
 1772 029f 00       		.align	2
 1773              	.LC43:
 1774 02a0 75706772 		.ascii	"upgrade.hex\000"
 1774      6164652E 
 1774      68657800 
 1775              		.section	.text.upgraded,"ax",%progbits
 1776              		.align	2
 1777              		.global	upgraded
 1778              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 46


 1779              		.thumb_func
 1780              		.type	upgraded, %function
 1781              	upgraded:
 1782              	.LFB78:
 687:notoriOS.c    **** 
 688:notoriOS.c    **** //downloads and stores files on SD card
 689:notoriOS.c    **** 
 690:notoriOS.c    **** 
 691:notoriOS.c    **** 
 692:notoriOS.c    **** // ==============================================
 693:notoriOS.c    **** // Will they love it, will they hate it
 694:notoriOS.c    **** // Never fade it, I evade it
 695:notoriOS.c    **** // Cause I never really want to complicate it
 696:notoriOS.c    **** //      - Logic, Upgraded (2015)
 697:notoriOS.c    **** //
 698:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 699:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 700:notoriOS.c    **** // ==============================================
 701:notoriOS.c    **** 
 702:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 1783              		.loc 1 702 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 232
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787 0000 80B5     		push	{r7, lr}
 1788              		.cfi_def_cfa_offset 8
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791 0002 C0B0     		sub	sp, sp, #256
 1792              		.cfi_def_cfa_offset 264
 1793 0004 06AF     		add	r7, sp, #24
 1794              		.cfi_def_cfa 7, 240
 1795 0006 F860     		str	r0, [r7, #12]
 1796 0008 B960     		str	r1, [r7, #8]
 1797 000a 7A60     		str	r2, [r7, #4]
 703:notoriOS.c    ****     
 704:notoriOS.c    ****     uint8 upgrade_status = 0;
 1798              		.loc 1 704 0
 1799 000c 0023     		movs	r3, #0
 1800 000e 87F8E730 		strb	r3, [r7, #231]
 705:notoriOS.c    ****     
 706:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 707:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 1801              		.loc 1 707 0
 1802 0012 384B     		ldr	r3, .L73
 1803 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1804 0016 042B     		cmp	r3, #4
 1805 0018 02D0     		beq	.L70
 708:notoriOS.c    ****         return upgrade_status;//where valid = 0
 1806              		.loc 1 708 0
 1807 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 1808 001e 65E0     		b	.L72
 1809              	.L70:
 709:notoriOS.c    ****     }
 710:notoriOS.c    ****     
 711:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 1810              		.loc 1 711 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 47


 1811 0020 354A     		ldr	r2, .L73+4
 1812 0022 07F1D803 		add	r3, r7, #216
 1813 0026 07CA     		ldmia	r2, {r0, r1, r2}
 1814 0028 83E80700 		stmia	r3, {r0, r1, r2}
 712:notoriOS.c    ****     //delete file, if one exisits already
 713:notoriOS.c    ****     SD_rmfile(fileName);
 1815              		.loc 1 713 0
 1816 002c 07F1D803 		add	r3, r7, #216
 1817 0030 1846     		mov	r0, r3
 1818 0032 FFF7FEFF 		bl	SD_rmfile
 714:notoriOS.c    ****     
 715:notoriOS.c    ****     // Create http request
 716:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 1819              		.loc 1 716 0
 1820 0036 314B     		ldr	r3, .L73+8
 1821 0038 0593     		str	r3, [sp, #20]
 1822 003a 0023     		movs	r3, #0
 1823 003c 0493     		str	r3, [sp, #16]
 1824 003e 304B     		ldr	r3, .L73+12
 1825 0040 0393     		str	r3, [sp, #12]
 1826 0042 304B     		ldr	r3, .L73+16
 1827 0044 0293     		str	r3, [sp, #8]
 1828 0046 304B     		ldr	r3, .L73+20
 1829 0048 0193     		str	r3, [sp, #4]
 1830 004a BB68     		ldr	r3, [r7, #8]
 1831 004c 0093     		str	r3, [sp]
 1832 004e 7B68     		ldr	r3, [r7, #4]
 1833 0050 FA68     		ldr	r2, [r7, #12]
 1834 0052 2E49     		ldr	r1, .L73+24
 1835 0054 2E48     		ldr	r0, .L73+28
 1836 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 717:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1837              		.loc 1 717 0
 1838 005a 2D4A     		ldr	r2, .L73+28
 1839 005c 2D49     		ldr	r1, .L73+32
 1840 005e 0020     		movs	r0, #0
 1841 0060 FFF7FEFF 		bl	printNotif
 718:notoriOS.c    ****     // Create array portConfig of size 200 characters
 719:notoriOS.c    ****     char portConfig[200];
 720:notoriOS.c    ****     // Print port configurations
 721:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 1842              		.loc 1 721 0
 1843 0064 07F11000 		add	r0, r7, #16
 1844 0068 FB68     		ldr	r3, [r7, #12]
 1845 006a 0093     		str	r3, [sp]
 1846 006c BB68     		ldr	r3, [r7, #8]
 1847 006e 2A4A     		ldr	r2, .L73+36
 1848 0070 C821     		movs	r1, #200
 1849 0072 FFF7FEFF 		bl	snprintf
 722:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1850              		.loc 1 722 0
 1851 0076 07F11003 		add	r3, r7, #16
 1852 007a 1A46     		mov	r2, r3
 1853 007c 2749     		ldr	r1, .L73+40
 1854 007e 0020     		movs	r0, #0
 1855 0080 FFF7FEFF 		bl	printNotif
 723:notoriOS.c    ****     // AT command to configure the port
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 48


 724:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 1856              		.loc 1 724 0
 1857 0084 07F11003 		add	r3, r7, #16
 1858 0088 42F21072 		movw	r2, #10000
 1859 008c 2449     		ldr	r1, .L73+44
 1860 008e 1846     		mov	r0, r3
 1861 0090 FFF7FEFF 		bl	at_write_command
 1862 0094 0346     		mov	r3, r0
 1863 0096 87F8E730 		strb	r3, [r7, #231]
 725:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 726:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 727:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 1864              		.loc 1 727 0
 1865 009a 4FF47A72 		mov	r2, #1000
 1866 009e 2149     		ldr	r1, .L73+48
 1867 00a0 2148     		ldr	r0, .L73+52
 1868 00a2 FFF7FEFF 		bl	at_write_command
 1869 00a6 0346     		mov	r3, r0
 1870 00a8 87F8E730 		strb	r3, [r7, #231]
 728:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 729:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 1871              		.loc 1 729 0
 1872 00ac 1848     		ldr	r0, .L73+28
 1873 00ae FFF7FEFF 		bl	strlen
 1874 00b2 0346     		mov	r3, r0
 1875 00b4 1A46     		mov	r2, r3
 1876 00b6 164B     		ldr	r3, .L73+28
 1877 00b8 1344     		add	r3, r3, r2
 1878 00ba 1C49     		ldr	r1, .L73+56
 1879 00bc 1A46     		mov	r2, r3
 1880 00be 0B46     		mov	r3, r1
 1881 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 1882 00c2 1380     		strh	r3, [r2]	@ unaligned
 730:notoriOS.c    ****     // AT command to send http request
 731:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 1883              		.loc 1 731 0
 1884 00c4 41F28832 		movw	r2, #5000
 1885 00c8 1549     		ldr	r1, .L73+44
 1886 00ca 1148     		ldr	r0, .L73+28
 1887 00cc FFF7FEFF 		bl	at_write_command
 1888 00d0 0346     		mov	r3, r0
 1889 00d2 87F8E730 		strb	r3, [r7, #231]
 732:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 733:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 734:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1890              		.loc 1 734 0
 1891 00d6 41F28832 		movw	r2, #5000
 1892 00da 1549     		ldr	r1, .L73+60
 1893 00dc 1548     		ldr	r0, .L73+64
 1894 00de FFF7FEFF 		bl	at_write_command
 1895 00e2 0346     		mov	r3, r0
 1896 00e4 87F8E730 		strb	r3, [r7, #231]
 735:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 736:notoriOS.c    ****     
 737:notoriOS.c    ****     
 738:notoriOS.c    ****     return upgrade_status;
 1897              		.loc 1 738 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 49


 1898 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 1899              	.L72:
 739:notoriOS.c    ****     
 740:notoriOS.c    **** }
 1900              		.loc 1 740 0 discriminator 1
 1901 00ec 1846     		mov	r0, r3
 1902 00ee E837     		adds	r7, r7, #232
 1903              		.cfi_def_cfa_offset 8
 1904 00f0 BD46     		mov	sp, r7
 1905              		.cfi_def_cfa_register 13
 1906              		@ sp needed
 1907 00f2 80BD     		pop	{r7, pc}
 1908              	.L74:
 1909              		.align	2
 1910              	.L73:
 1911 00f4 00000000 		.word	modem_state
 1912 00f8 A0020000 		.word	.LC43
 1913 00fc 4C010000 		.word	.LC16
 1914 0100 50010000 		.word	.LC17
 1915 0104 54010000 		.word	.LC18
 1916 0108 5C010000 		.word	.LC19
 1917 010c 00000000 		.word	http_body
 1918 0110 00000000 		.word	http_request
 1919 0114 64010000 		.word	.LC20
 1920 0118 7C010000 		.word	.LC21
 1921 011c 98010000 		.word	.LC22
 1922 0120 9C010000 		.word	.LC23
 1923 0124 CC010000 		.word	.LC26
 1924 0128 D0010000 		.word	.LC27
 1925 012c E0010000 		.word	.LC28
 1926 0130 FC010000 		.word	.LC31
 1927 0134 04020000 		.word	.LC32
 1928              		.cfi_endproc
 1929              	.LFE78:
 1930              		.size	upgraded, .-upgraded
 1931              		.text
 1932              	.Letext0:
 1933              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1934              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1935              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1936              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 1937              		.file 6 "testing.h"
 1938              		.file 7 "voltages.h"
 1939              		.file 8 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1940              		.file 9 "data.h"
 1941              		.file 10 "modem.h"
 1942              		.file 11 "notoriOS.h"
 1943              		.file 12 "Generated_Source\\PSoC5/core_cm3.h"
 1944              		.file 13 "level_sensor.h"
 1945              		.file 14 "App_LED.h"
 1946              		.section	.debug_info,"",%progbits
 1947              	.Ldebug_info0:
 1948 0000 B60B0000 		.4byte	0xbb6
 1949 0004 0400     		.2byte	0x4
 1950 0006 00000000 		.4byte	.Ldebug_abbrev0
 1951 000a 04       		.byte	0x4
 1952 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 50


 1953 000c 8C000000 		.4byte	.LASF155
 1954 0010 0C       		.byte	0xc
 1955 0011 70070000 		.4byte	.LASF156
 1956 0015 17000000 		.4byte	.LASF157
 1957 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1958 001d 00000000 		.4byte	0
 1959 0021 00000000 		.4byte	.Ldebug_line0
 1960 0025 02       		.uleb128 0x2
 1961 0026 01       		.byte	0x1
 1962 0027 06       		.byte	0x6
 1963 0028 68000000 		.4byte	.LASF0
 1964 002c 02       		.uleb128 0x2
 1965 002d 01       		.byte	0x1
 1966 002e 08       		.byte	0x8
 1967 002f 87050000 		.4byte	.LASF1
 1968 0033 02       		.uleb128 0x2
 1969 0034 02       		.byte	0x2
 1970 0035 05       		.byte	0x5
 1971 0036 FD030000 		.4byte	.LASF2
 1972 003a 02       		.uleb128 0x2
 1973 003b 02       		.byte	0x2
 1974 003c 07       		.byte	0x7
 1975 003d 06070000 		.4byte	.LASF3
 1976 0041 03       		.uleb128 0x3
 1977 0042 E0060000 		.4byte	.LASF9
 1978 0046 02       		.byte	0x2
 1979 0047 3F       		.byte	0x3f
 1980 0048 4C000000 		.4byte	0x4c
 1981 004c 02       		.uleb128 0x2
 1982 004d 04       		.byte	0x4
 1983 004e 05       		.byte	0x5
 1984 004f 33020000 		.4byte	.LASF4
 1985 0053 02       		.uleb128 0x2
 1986 0054 04       		.byte	0x4
 1987 0055 07       		.byte	0x7
 1988 0056 3A030000 		.4byte	.LASF5
 1989 005a 02       		.uleb128 0x2
 1990 005b 08       		.byte	0x8
 1991 005c 05       		.byte	0x5
 1992 005d 8E010000 		.4byte	.LASF6
 1993 0061 02       		.uleb128 0x2
 1994 0062 08       		.byte	0x8
 1995 0063 07       		.byte	0x7
 1996 0064 2B010000 		.4byte	.LASF7
 1997 0068 04       		.uleb128 0x4
 1998 0069 04       		.byte	0x4
 1999 006a 05       		.byte	0x5
 2000 006b 696E7400 		.ascii	"int\000"
 2001 006f 02       		.uleb128 0x2
 2002 0070 04       		.byte	0x4
 2003 0071 07       		.byte	0x7
 2004 0072 F9020000 		.4byte	.LASF8
 2005 0076 03       		.uleb128 0x3
 2006 0077 7F050000 		.4byte	.LASF10
 2007 007b 03       		.byte	0x3
 2008 007c 2C       		.byte	0x2c
 2009 007d 41000000 		.4byte	0x41
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 51


 2010 0081 05       		.uleb128 0x5
 2011 0082 55020000 		.4byte	.LASF11
 2012 0086 04       		.byte	0x4
 2013 0087 9201     		.2byte	0x192
 2014 0089 2C000000 		.4byte	0x2c
 2015 008d 05       		.uleb128 0x5
 2016 008e 08000000 		.4byte	.LASF12
 2017 0092 04       		.byte	0x4
 2018 0093 9301     		.2byte	0x193
 2019 0095 3A000000 		.4byte	0x3a
 2020 0099 05       		.uleb128 0x5
 2021 009a 9C020000 		.4byte	.LASF13
 2022 009e 04       		.byte	0x4
 2023 009f 9401     		.2byte	0x194
 2024 00a1 53000000 		.4byte	0x53
 2025 00a5 05       		.uleb128 0x5
 2026 00a6 C0030000 		.4byte	.LASF14
 2027 00aa 04       		.byte	0x4
 2028 00ab 9501     		.2byte	0x195
 2029 00ad 25000000 		.4byte	0x25
 2030 00b1 05       		.uleb128 0x5
 2031 00b2 85070000 		.4byte	.LASF15
 2032 00b6 04       		.byte	0x4
 2033 00b7 9601     		.2byte	0x196
 2034 00b9 33000000 		.4byte	0x33
 2035 00bd 05       		.uleb128 0x5
 2036 00be 80020000 		.4byte	.LASF16
 2037 00c2 04       		.byte	0x4
 2038 00c3 9701     		.2byte	0x197
 2039 00c5 4C000000 		.4byte	0x4c
 2040 00c9 02       		.uleb128 0x2
 2041 00ca 04       		.byte	0x4
 2042 00cb 04       		.byte	0x4
 2043 00cc 2C050000 		.4byte	.LASF17
 2044 00d0 02       		.uleb128 0x2
 2045 00d1 08       		.byte	0x8
 2046 00d2 04       		.byte	0x4
 2047 00d3 F8070000 		.4byte	.LASF18
 2048 00d7 02       		.uleb128 0x2
 2049 00d8 01       		.byte	0x1
 2050 00d9 08       		.byte	0x8
 2051 00da B9060000 		.4byte	.LASF19
 2052 00de 02       		.uleb128 0x2
 2053 00df 08       		.byte	0x8
 2054 00e0 04       		.byte	0x4
 2055 00e1 9B060000 		.4byte	.LASF20
 2056 00e5 02       		.uleb128 0x2
 2057 00e6 04       		.byte	0x4
 2058 00e7 07       		.byte	0x7
 2059 00e8 86040000 		.4byte	.LASF21
 2060 00ec 06       		.uleb128 0x6
 2061 00ed 04       		.byte	0x4
 2062 00ee D7000000 		.4byte	0xd7
 2063 00f2 07       		.uleb128 0x7
 2064 00f3 D7000000 		.4byte	0xd7
 2065 00f7 02010000 		.4byte	0x102
 2066 00fb 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 52


 2067 00fc E5000000 		.4byte	0xe5
 2068 0100 17       		.byte	0x17
 2069 0101 00       		.byte	0
 2070 0102 09       		.uleb128 0x9
 2071 0103 0C       		.byte	0xc
 2072 0104 05       		.byte	0x5
 2073 0105 30       		.byte	0x30
 2074 0106 6B010000 		.4byte	0x16b
 2075 010a 0A       		.uleb128 0xa
 2076 010b 53656300 		.ascii	"Sec\000"
 2077 010f 05       		.byte	0x5
 2078 0110 32       		.byte	0x32
 2079 0111 81000000 		.4byte	0x81
 2080 0115 00       		.byte	0
 2081 0116 0A       		.uleb128 0xa
 2082 0117 4D696E00 		.ascii	"Min\000"
 2083 011b 05       		.byte	0x5
 2084 011c 33       		.byte	0x33
 2085 011d 81000000 		.4byte	0x81
 2086 0121 01       		.byte	0x1
 2087 0122 0B       		.uleb128 0xb
 2088 0123 42010000 		.4byte	.LASF22
 2089 0127 05       		.byte	0x5
 2090 0128 34       		.byte	0x34
 2091 0129 81000000 		.4byte	0x81
 2092 012d 02       		.byte	0x2
 2093 012e 0B       		.uleb128 0xb
 2094 012f D5050000 		.4byte	.LASF23
 2095 0133 05       		.byte	0x5
 2096 0134 35       		.byte	0x35
 2097 0135 81000000 		.4byte	0x81
 2098 0139 03       		.byte	0x3
 2099 013a 0B       		.uleb128 0xb
 2100 013b 7B030000 		.4byte	.LASF24
 2101 013f 05       		.byte	0x5
 2102 0140 36       		.byte	0x36
 2103 0141 81000000 		.4byte	0x81
 2104 0145 04       		.byte	0x4
 2105 0146 0B       		.uleb128 0xb
 2106 0147 B8070000 		.4byte	.LASF25
 2107 014b 05       		.byte	0x5
 2108 014c 37       		.byte	0x37
 2109 014d 8D000000 		.4byte	0x8d
 2110 0151 06       		.byte	0x6
 2111 0152 0B       		.uleb128 0xb
 2112 0153 25010000 		.4byte	.LASF26
 2113 0157 05       		.byte	0x5
 2114 0158 38       		.byte	0x38
 2115 0159 81000000 		.4byte	0x81
 2116 015d 08       		.byte	0x8
 2117 015e 0B       		.uleb128 0xb
 2118 015f 74050000 		.4byte	.LASF27
 2119 0163 05       		.byte	0x5
 2120 0164 39       		.byte	0x39
 2121 0165 8D000000 		.4byte	0x8d
 2122 0169 0A       		.byte	0xa
 2123 016a 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 53


 2124 016b 03       		.uleb128 0x3
 2125 016c D1040000 		.4byte	.LASF28
 2126 0170 05       		.byte	0x5
 2127 0171 3A       		.byte	0x3a
 2128 0172 76010000 		.4byte	0x176
 2129 0176 0C       		.uleb128 0xc
 2130 0177 02010000 		.4byte	0x102
 2131 017b 0D       		.uleb128 0xd
 2132 017c 8101     		.2byte	0x181
 2133 017e 06       		.byte	0x6
 2134 017f 0A       		.byte	0xa
 2135 0180 A9010000 		.4byte	0x1a9
 2136 0184 0B       		.uleb128 0xb
 2137 0185 6A050000 		.4byte	.LASF29
 2138 0189 06       		.byte	0x6
 2139 018a 0C       		.byte	0xc
 2140 018b A9010000 		.4byte	0x1a9
 2141 018f 00       		.byte	0
 2142 0190 0B       		.uleb128 0xb
 2143 0191 38070000 		.4byte	.LASF30
 2144 0195 06       		.byte	0x6
 2145 0196 0D       		.byte	0xd
 2146 0197 81000000 		.4byte	0x81
 2147 019b 80       		.byte	0x80
 2148 019c 0B       		.uleb128 0xb
 2149 019d F7050000 		.4byte	.LASF31
 2150 01a1 06       		.byte	0x6
 2151 01a2 0F       		.byte	0xf
 2152 01a3 B9010000 		.4byte	0x1b9
 2153 01a7 81       		.byte	0x81
 2154 01a8 00       		.byte	0
 2155 01a9 07       		.uleb128 0x7
 2156 01aa D7000000 		.4byte	0xd7
 2157 01ae B9010000 		.4byte	0x1b9
 2158 01b2 08       		.uleb128 0x8
 2159 01b3 E5000000 		.4byte	0xe5
 2160 01b7 7F       		.byte	0x7f
 2161 01b8 00       		.byte	0
 2162 01b9 07       		.uleb128 0x7
 2163 01ba D7000000 		.4byte	0xd7
 2164 01be C9010000 		.4byte	0x1c9
 2165 01c2 08       		.uleb128 0x8
 2166 01c3 E5000000 		.4byte	0xe5
 2167 01c7 FF       		.byte	0xff
 2168 01c8 00       		.byte	0
 2169 01c9 03       		.uleb128 0x3
 2170 01ca DF050000 		.4byte	.LASF32
 2171 01ce 06       		.byte	0x6
 2172 01cf 10       		.byte	0x10
 2173 01d0 7B010000 		.4byte	0x17b
 2174 01d4 09       		.uleb128 0x9
 2175 01d5 14       		.byte	0x14
 2176 01d6 07       		.byte	0x7
 2177 01d7 11       		.byte	0x11
 2178 01d8 19020000 		.4byte	0x219
 2179 01dc 0B       		.uleb128 0xb
 2180 01dd 6B030000 		.4byte	.LASF33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 54


 2181 01e1 07       		.byte	0x7
 2182 01e2 12       		.byte	0x12
 2183 01e3 C9000000 		.4byte	0xc9
 2184 01e7 00       		.byte	0
 2185 01e8 0B       		.uleb128 0xb
 2186 01e9 DA010000 		.4byte	.LASF34
 2187 01ed 07       		.byte	0x7
 2188 01ee 13       		.byte	0x13
 2189 01ef C9000000 		.4byte	0xc9
 2190 01f3 04       		.byte	0x4
 2191 01f4 0B       		.uleb128 0xb
 2192 01f5 E8010000 		.4byte	.LASF35
 2193 01f9 07       		.byte	0x7
 2194 01fa 14       		.byte	0x14
 2195 01fb C9000000 		.4byte	0xc9
 2196 01ff 08       		.byte	0x8
 2197 0200 0B       		.uleb128 0xb
 2198 0201 0E050000 		.4byte	.LASF36
 2199 0205 07       		.byte	0x7
 2200 0206 15       		.byte	0x15
 2201 0207 C9000000 		.4byte	0xc9
 2202 020b 0C       		.byte	0xc
 2203 020c 0B       		.uleb128 0xb
 2204 020d 57060000 		.4byte	.LASF37
 2205 0211 07       		.byte	0x7
 2206 0212 16       		.byte	0x16
 2207 0213 81000000 		.4byte	0x81
 2208 0217 10       		.byte	0x10
 2209 0218 00       		.byte	0
 2210 0219 03       		.uleb128 0x3
 2211 021a 0D080000 		.4byte	.LASF38
 2212 021e 07       		.byte	0x7
 2213 021f 17       		.byte	0x17
 2214 0220 D4010000 		.4byte	0x1d4
 2215 0224 0E       		.uleb128 0xe
 2216 0225 746D00   		.ascii	"tm\000"
 2217 0228 24       		.byte	0x24
 2218 0229 08       		.byte	0x8
 2219 022a 21       		.byte	0x21
 2220 022b 9C020000 		.4byte	0x29c
 2221 022f 0B       		.uleb128 0xb
 2222 0230 31070000 		.4byte	.LASF39
 2223 0234 08       		.byte	0x8
 2224 0235 23       		.byte	0x23
 2225 0236 68000000 		.4byte	0x68
 2226 023a 00       		.byte	0
 2227 023b 0B       		.uleb128 0xb
 2228 023c 68040000 		.4byte	.LASF40
 2229 0240 08       		.byte	0x8
 2230 0241 24       		.byte	0x24
 2231 0242 68000000 		.4byte	0x68
 2232 0246 04       		.byte	0x4
 2233 0247 0B       		.uleb128 0xb
 2234 0248 0F000000 		.4byte	.LASF41
 2235 024c 08       		.byte	0x8
 2236 024d 25       		.byte	0x25
 2237 024e 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 55


 2238 0252 08       		.byte	0x8
 2239 0253 0B       		.uleb128 0xb
 2240 0254 20070000 		.4byte	.LASF42
 2241 0258 08       		.byte	0x8
 2242 0259 26       		.byte	0x26
 2243 025a 68000000 		.4byte	0x68
 2244 025e 0C       		.byte	0xc
 2245 025f 0B       		.uleb128 0xb
 2246 0260 C4020000 		.4byte	.LASF43
 2247 0264 08       		.byte	0x8
 2248 0265 27       		.byte	0x27
 2249 0266 68000000 		.4byte	0x68
 2250 026a 10       		.byte	0x10
 2251 026b 0B       		.uleb128 0xb
 2252 026c E7020000 		.4byte	.LASF44
 2253 0270 08       		.byte	0x8
 2254 0271 28       		.byte	0x28
 2255 0272 68000000 		.4byte	0x68
 2256 0276 14       		.byte	0x14
 2257 0277 0B       		.uleb128 0xb
 2258 0278 6E060000 		.4byte	.LASF45
 2259 027c 08       		.byte	0x8
 2260 027d 29       		.byte	0x29
 2261 027e 68000000 		.4byte	0x68
 2262 0282 18       		.byte	0x18
 2263 0283 0B       		.uleb128 0xb
 2264 0284 8F040000 		.4byte	.LASF46
 2265 0288 08       		.byte	0x8
 2266 0289 2A       		.byte	0x2a
 2267 028a 68000000 		.4byte	0x68
 2268 028e 1C       		.byte	0x1c
 2269 028f 0B       		.uleb128 0xb
 2270 0290 A4030000 		.4byte	.LASF47
 2271 0294 08       		.byte	0x8
 2272 0295 2B       		.byte	0x2b
 2273 0296 68000000 		.4byte	0x68
 2274 029a 20       		.byte	0x20
 2275 029b 00       		.byte	0
 2276 029c 09       		.uleb128 0x9
 2277 029d 2C       		.byte	0x2c
 2278 029e 09       		.byte	0x9
 2279 029f 14       		.byte	0x14
 2280 02a0 C9020000 		.4byte	0x2c9
 2281 02a4 0A       		.uleb128 0xa
 2282 02a5 6B657900 		.ascii	"key\000"
 2283 02a9 09       		.byte	0x9
 2284 02aa 15       		.byte	0x15
 2285 02ab C9020000 		.4byte	0x2c9
 2286 02af 00       		.byte	0
 2287 02b0 0B       		.uleb128 0xb
 2288 02b1 DC020000 		.4byte	.LASF48
 2289 02b5 09       		.byte	0x9
 2290 02b6 16       		.byte	0x16
 2291 02b7 C9020000 		.4byte	0x2c9
 2292 02bb 14       		.byte	0x14
 2293 02bc 0B       		.uleb128 0xb
 2294 02bd C7040000 		.4byte	.LASF49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 56


 2295 02c1 09       		.byte	0x9
 2296 02c2 17       		.byte	0x17
 2297 02c3 BD000000 		.4byte	0xbd
 2298 02c7 28       		.byte	0x28
 2299 02c8 00       		.byte	0
 2300 02c9 07       		.uleb128 0x7
 2301 02ca D7000000 		.4byte	0xd7
 2302 02ce D9020000 		.4byte	0x2d9
 2303 02d2 08       		.uleb128 0x8
 2304 02d3 E5000000 		.4byte	0xe5
 2305 02d7 13       		.byte	0x13
 2306 02d8 00       		.byte	0
 2307 02d9 03       		.uleb128 0x3
 2308 02da 0E030000 		.4byte	.LASF50
 2309 02de 09       		.byte	0x9
 2310 02df 19       		.byte	0x19
 2311 02e0 9C020000 		.4byte	0x29c
 2312 02e4 09       		.uleb128 0x9
 2313 02e5 3C       		.byte	0x3c
 2314 02e6 0A       		.byte	0xa
 2315 02e7 35       		.byte	0x35
 2316 02e8 11030000 		.4byte	0x311
 2317 02ec 0B       		.uleb128 0xb
 2318 02ed 19070000 		.4byte	.LASF51
 2319 02f1 0A       		.byte	0xa
 2320 02f2 36       		.byte	0x36
 2321 02f3 C9020000 		.4byte	0x2c9
 2322 02f7 00       		.byte	0
 2323 02f8 0B       		.uleb128 0xb
 2324 02f9 A3020000 		.4byte	.LASF52
 2325 02fd 0A       		.byte	0xa
 2326 02fe 37       		.byte	0x37
 2327 02ff C9020000 		.4byte	0x2c9
 2328 0303 14       		.byte	0x14
 2329 0304 0B       		.uleb128 0xb
 2330 0305 F2050000 		.4byte	.LASF53
 2331 0309 0A       		.byte	0xa
 2332 030a 38       		.byte	0x38
 2333 030b C9020000 		.4byte	0x2c9
 2334 030f 28       		.byte	0x28
 2335 0310 00       		.byte	0
 2336 0311 03       		.uleb128 0x3
 2337 0312 20020000 		.4byte	.LASF54
 2338 0316 0A       		.byte	0xa
 2339 0317 3A       		.byte	0x3a
 2340 0318 E4020000 		.4byte	0x2e4
 2341 031c 09       		.uleb128 0x9
 2342 031d 20       		.byte	0x20
 2343 031e 0A       		.byte	0xa
 2344 031f 3C       		.byte	0x3c
 2345 0320 85030000 		.4byte	0x385
 2346 0324 0B       		.uleb128 0xb
 2347 0325 2D020000 		.4byte	.LASF55
 2348 0329 0A       		.byte	0xa
 2349 032a 3D       		.byte	0x3d
 2350 032b 68000000 		.4byte	0x68
 2351 032f 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 57


 2352 0330 0A       		.uleb128 0xa
 2353 0331 62657200 		.ascii	"ber\000"
 2354 0335 0A       		.byte	0xa
 2355 0336 3E       		.byte	0x3e
 2356 0337 68000000 		.4byte	0x68
 2357 033b 04       		.byte	0x4
 2358 033c 0B       		.uleb128 0xb
 2359 033d D0050000 		.4byte	.LASF56
 2360 0341 0A       		.byte	0xa
 2361 0342 3F       		.byte	0x3f
 2362 0343 68000000 		.4byte	0x68
 2363 0347 08       		.byte	0x8
 2364 0348 0B       		.uleb128 0xb
 2365 0349 A4010000 		.4byte	.LASF57
 2366 034d 0A       		.byte	0xa
 2367 034e 40       		.byte	0x40
 2368 034f 68000000 		.4byte	0x68
 2369 0353 0C       		.byte	0xc
 2370 0354 0B       		.uleb128 0xb
 2371 0355 AA050000 		.4byte	.LASF58
 2372 0359 0A       		.byte	0xa
 2373 035a 41       		.byte	0x41
 2374 035b 68000000 		.4byte	0x68
 2375 035f 10       		.byte	0x10
 2376 0360 0B       		.uleb128 0xb
 2377 0361 A5050000 		.4byte	.LASF59
 2378 0365 0A       		.byte	0xa
 2379 0366 42       		.byte	0x42
 2380 0367 68000000 		.4byte	0x68
 2381 036b 14       		.byte	0x14
 2382 036c 0B       		.uleb128 0xb
 2383 036d B7010000 		.4byte	.LASF60
 2384 0371 0A       		.byte	0xa
 2385 0372 43       		.byte	0x43
 2386 0373 68000000 		.4byte	0x68
 2387 0377 18       		.byte	0x18
 2388 0378 0B       		.uleb128 0xb
 2389 0379 3C020000 		.4byte	.LASF61
 2390 037d 0A       		.byte	0xa
 2391 037e 44       		.byte	0x44
 2392 037f 68000000 		.4byte	0x68
 2393 0383 1C       		.byte	0x1c
 2394 0384 00       		.byte	0
 2395 0385 03       		.uleb128 0x3
 2396 0386 49060000 		.4byte	.LASF62
 2397 038a 0A       		.byte	0xa
 2398 038b 46       		.byte	0x46
 2399 038c 1C030000 		.4byte	0x31c
 2400 0390 09       		.uleb128 0x9
 2401 0391 06       		.byte	0x6
 2402 0392 0A       		.byte	0xa
 2403 0393 52       		.byte	0x52
 2404 0394 E1030000 		.4byte	0x3e1
 2405 0398 0B       		.uleb128 0xb
 2406 0399 AF070000 		.4byte	.LASF63
 2407 039d 0A       		.byte	0xa
 2408 039e 56       		.byte	0x56
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 58


 2409 039f E1030000 		.4byte	0x3e1
 2410 03a3 00       		.byte	0
 2411 03a4 0B       		.uleb128 0xb
 2412 03a5 EB070000 		.4byte	.LASF64
 2413 03a9 0A       		.byte	0xa
 2414 03aa 58       		.byte	0x58
 2415 03ab 81000000 		.4byte	0x81
 2416 03af 01       		.byte	0x1
 2417 03b0 0B       		.uleb128 0xb
 2418 03b1 C6050000 		.4byte	.LASF65
 2419 03b5 0A       		.byte	0xa
 2420 03b6 5A       		.byte	0x5a
 2421 03b7 81000000 		.4byte	0x81
 2422 03bb 02       		.byte	0x2
 2423 03bc 0B       		.uleb128 0xb
 2424 03bd CB020000 		.4byte	.LASF66
 2425 03c1 0A       		.byte	0xa
 2426 03c2 5D       		.byte	0x5d
 2427 03c3 81000000 		.4byte	0x81
 2428 03c7 03       		.byte	0x3
 2429 03c8 0B       		.uleb128 0xb
 2430 03c9 58070000 		.4byte	.LASF67
 2431 03cd 0A       		.byte	0xa
 2432 03ce 62       		.byte	0x62
 2433 03cf 81000000 		.4byte	0x81
 2434 03d3 04       		.byte	0x4
 2435 03d4 0B       		.uleb128 0xb
 2436 03d5 76060000 		.4byte	.LASF68
 2437 03d9 0A       		.byte	0xa
 2438 03da 64       		.byte	0x64
 2439 03db 81000000 		.4byte	0x81
 2440 03df 05       		.byte	0x5
 2441 03e0 00       		.byte	0
 2442 03e1 02       		.uleb128 0x2
 2443 03e2 01       		.byte	0x1
 2444 03e3 02       		.byte	0x2
 2445 03e4 79050000 		.4byte	.LASF69
 2446 03e8 03       		.uleb128 0x3
 2447 03e9 35040000 		.4byte	.LASF70
 2448 03ed 0A       		.byte	0xa
 2449 03ee 66       		.byte	0x66
 2450 03ef 90030000 		.4byte	0x390
 2451 03f3 09       		.uleb128 0x9
 2452 03f4 06       		.byte	0x6
 2453 03f5 0B       		.byte	0xb
 2454 03f6 2E       		.byte	0x2e
 2455 03f7 2C040000 		.4byte	0x42c
 2456 03fb 0B       		.uleb128 0xb
 2457 03fc AC020000 		.4byte	.LASF71
 2458 0400 0B       		.byte	0xb
 2459 0401 30       		.byte	0x30
 2460 0402 8D000000 		.4byte	0x8d
 2461 0406 00       		.byte	0
 2462 0407 0B       		.uleb128 0xb
 2463 0408 99070000 		.4byte	.LASF72
 2464 040c 0B       		.byte	0xb
 2465 040d 31       		.byte	0x31
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 59


 2466 040e B1000000 		.4byte	0xb1
 2467 0412 02       		.byte	0x2
 2468 0413 0B       		.uleb128 0xb
 2469 0414 8B070000 		.4byte	.LASF73
 2470 0418 0B       		.byte	0xb
 2471 0419 32       		.byte	0x32
 2472 041a 81000000 		.4byte	0x81
 2473 041e 04       		.byte	0x4
 2474 041f 0B       		.uleb128 0xb
 2475 0420 74000000 		.4byte	.LASF74
 2476 0424 0B       		.byte	0xb
 2477 0425 33       		.byte	0x33
 2478 0426 81000000 		.4byte	0x81
 2479 042a 05       		.byte	0x5
 2480 042b 00       		.byte	0
 2481 042c 03       		.uleb128 0x3
 2482 042d 4F020000 		.4byte	.LASF75
 2483 0431 0B       		.byte	0xb
 2484 0432 36       		.byte	0x36
 2485 0433 37040000 		.4byte	0x437
 2486 0437 0C       		.uleb128 0xc
 2487 0438 F3030000 		.4byte	0x3f3
 2488 043c 09       		.uleb128 0x9
 2489 043d 1C       		.byte	0x1c
 2490 043e 0B       		.byte	0xb
 2491 043f 39       		.byte	0x39
 2492 0440 5D040000 		.4byte	0x45d
 2493 0444 0B       		.uleb128 0xb
 2494 0445 AD030000 		.4byte	.LASF76
 2495 0449 0B       		.byte	0xb
 2496 044a 3B       		.byte	0x3b
 2497 044b 5D040000 		.4byte	0x45d
 2498 044f 00       		.byte	0
 2499 0450 0B       		.uleb128 0xb
 2500 0451 DD070000 		.4byte	.LASF77
 2501 0455 0B       		.byte	0xb
 2502 0456 3C       		.byte	0x3c
 2503 0457 F2000000 		.4byte	0xf2
 2504 045b 04       		.byte	0x4
 2505 045c 00       		.byte	0
 2506 045d 06       		.uleb128 0x6
 2507 045e 04       		.byte	0x4
 2508 045f 11030000 		.4byte	0x311
 2509 0463 03       		.uleb128 0x3
 2510 0464 2A040000 		.4byte	.LASF78
 2511 0468 0B       		.byte	0xb
 2512 0469 3E       		.byte	0x3e
 2513 046a 3C040000 		.4byte	0x43c
 2514 046e 09       		.uleb128 0x9
 2515 046f 68       		.byte	0x68
 2516 0470 0B       		.byte	0xb
 2517 0471 44       		.byte	0x44
 2518 0472 8F040000 		.4byte	0x48f
 2519 0476 0B       		.uleb128 0xb
 2520 0477 B8030000 		.4byte	.LASF79
 2521 047b 0B       		.byte	0xb
 2522 047c 49       		.byte	0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 60


 2523 047d 8F040000 		.4byte	0x48f
 2524 0481 00       		.byte	0
 2525 0482 0B       		.uleb128 0xb
 2526 0483 9C030000 		.4byte	.LASF80
 2527 0487 0B       		.byte	0xb
 2528 0488 4A       		.byte	0x4a
 2529 0489 68000000 		.4byte	0x68
 2530 048d 64       		.byte	0x64
 2531 048e 00       		.byte	0
 2532 048f 07       		.uleb128 0x7
 2533 0490 D7000000 		.4byte	0xd7
 2534 0494 9F040000 		.4byte	0x49f
 2535 0498 08       		.uleb128 0x8
 2536 0499 E5000000 		.4byte	0xe5
 2537 049d 63       		.byte	0x63
 2538 049e 00       		.byte	0
 2539 049f 03       		.uleb128 0x3
 2540 04a0 97040000 		.4byte	.LASF81
 2541 04a4 0B       		.byte	0xb
 2542 04a5 50       		.byte	0x50
 2543 04a6 6E040000 		.4byte	0x46e
 2544 04aa 0F       		.uleb128 0xf
 2545 04ab F3060000 		.4byte	.LASF158
 2546 04af 01       		.byte	0x1
 2547 04b0 14       		.byte	0x14
 2548 04b1 00000000 		.4byte	.LFB64
 2549 04b5 0C000000 		.4byte	.LFE64-.LFB64
 2550 04b9 01       		.uleb128 0x1
 2551 04ba 9C       		.byte	0x9c
 2552 04bb 10       		.uleb128 0x10
 2553 04bc CD070000 		.4byte	.LASF94
 2554 04c0 01       		.byte	0x1
 2555 04c1 28       		.byte	0x28
 2556 04c2 00000000 		.4byte	.LFB65
 2557 04c6 4C010000 		.4byte	.LFE65-.LFB65
 2558 04ca 01       		.uleb128 0x1
 2559 04cb 9C       		.byte	0x9c
 2560 04cc ED040000 		.4byte	0x4ed
 2561 04d0 11       		.uleb128 0x11
 2562 04d1 EA060000 		.4byte	.LASF82
 2563 04d5 01       		.byte	0x1
 2564 04d6 3C       		.byte	0x3c
 2565 04d7 ED040000 		.4byte	0x4ed
 2566 04db 02       		.uleb128 0x2
 2567 04dc 91       		.byte	0x91
 2568 04dd 64       		.sleb128 -28
 2569 04de 11       		.uleb128 0x11
 2570 04df 4C030000 		.4byte	.LASF83
 2571 04e3 01       		.byte	0x1
 2572 04e4 62       		.byte	0x62
 2573 04e5 81000000 		.4byte	0x81
 2574 04e9 02       		.uleb128 0x2
 2575 04ea 91       		.byte	0x91
 2576 04eb 6F       		.sleb128 -17
 2577 04ec 00       		.byte	0
 2578 04ed 07       		.uleb128 0x7
 2579 04ee 99000000 		.4byte	0x99
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 61


 2580 04f2 FD040000 		.4byte	0x4fd
 2581 04f6 08       		.uleb128 0x8
 2582 04f7 E5000000 		.4byte	0xe5
 2583 04fb 01       		.byte	0x1
 2584 04fc 00       		.byte	0
 2585 04fd 12       		.uleb128 0x12
 2586 04fe C5030000 		.4byte	.LASF85
 2587 0502 01       		.byte	0x1
 2588 0503 6C       		.byte	0x6c
 2589 0504 68000000 		.4byte	0x68
 2590 0508 00000000 		.4byte	.LFB66
 2591 050c 98000000 		.4byte	.LFE66-.LFB66
 2592 0510 01       		.uleb128 0x1
 2593 0511 9C       		.byte	0x9c
 2594 0512 25050000 		.4byte	0x525
 2595 0516 11       		.uleb128 0x11
 2596 0517 5D050000 		.4byte	.LASF84
 2597 051b 01       		.byte	0x1
 2598 051c 91       		.byte	0x91
 2599 051d 81000000 		.4byte	0x81
 2600 0521 02       		.uleb128 0x2
 2601 0522 91       		.byte	0x91
 2602 0523 77       		.sleb128 -9
 2603 0524 00       		.byte	0
 2604 0525 13       		.uleb128 0x13
 2605 0526 FE060000 		.4byte	.LASF159
 2606 052a 01       		.byte	0x1
 2607 052b A1       		.byte	0xa1
 2608 052c 00000000 		.4byte	.LFB67
 2609 0530 2A000000 		.4byte	.LFE67-.LFB67
 2610 0534 01       		.uleb128 0x1
 2611 0535 9C       		.byte	0x9c
 2612 0536 14       		.uleb128 0x14
 2613 0537 1A030000 		.4byte	.LASF86
 2614 053b 01       		.byte	0x1
 2615 053c C6       		.byte	0xc6
 2616 053d 00000000 		.4byte	.LFB68
 2617 0541 8C000000 		.4byte	.LFE68-.LFB68
 2618 0545 01       		.uleb128 0x1
 2619 0546 9C       		.byte	0x9c
 2620 0547 5A050000 		.4byte	0x55a
 2621 054b 15       		.uleb128 0x15
 2622 054c 4C040000 		.4byte	.LASF87
 2623 0550 01       		.byte	0x1
 2624 0551 C6       		.byte	0xc6
 2625 0552 81000000 		.4byte	0x81
 2626 0556 02       		.uleb128 0x2
 2627 0557 91       		.byte	0x91
 2628 0558 77       		.sleb128 -9
 2629 0559 00       		.byte	0
 2630 055a 16       		.uleb128 0x16
 2631 055b C2070000 		.4byte	.LASF91
 2632 055f 01       		.byte	0x1
 2633 0560 E6       		.byte	0xe6
 2634 0561 81000000 		.4byte	0x81
 2635 0565 00000000 		.4byte	.LFB69
 2636 0569 48000000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 62


 2637 056d 01       		.uleb128 0x1
 2638 056e 9C       		.byte	0x9c
 2639 056f 90050000 		.4byte	0x590
 2640 0573 15       		.uleb128 0x15
 2641 0574 75040000 		.4byte	.LASF88
 2642 0578 01       		.byte	0x1
 2643 0579 E6       		.byte	0xe6
 2644 057a 90050000 		.4byte	0x590
 2645 057e 02       		.uleb128 0x2
 2646 057f 91       		.byte	0x91
 2647 0580 74       		.sleb128 -12
 2648 0581 15       		.uleb128 0x15
 2649 0582 4C040000 		.4byte	.LASF87
 2650 0586 01       		.byte	0x1
 2651 0587 E6       		.byte	0xe6
 2652 0588 81000000 		.4byte	0x81
 2653 058c 02       		.uleb128 0x2
 2654 058d 91       		.byte	0x91
 2655 058e 73       		.sleb128 -13
 2656 058f 00       		.byte	0
 2657 0590 06       		.uleb128 0x6
 2658 0591 04       		.byte	0x4
 2659 0592 2C040000 		.4byte	0x42c
 2660 0596 17       		.uleb128 0x17
 2661 0597 AF050000 		.4byte	.LASF89
 2662 059b 01       		.byte	0x1
 2663 059c FB       		.byte	0xfb
 2664 059d 00000000 		.4byte	.LFB70
 2665 05a1 1E000000 		.4byte	.LFE70-.LFB70
 2666 05a5 01       		.uleb128 0x1
 2667 05a6 9C       		.byte	0x9c
 2668 05a7 BA050000 		.4byte	0x5ba
 2669 05ab 15       		.uleb128 0x15
 2670 05ac FE050000 		.4byte	.LASF90
 2671 05b0 01       		.byte	0x1
 2672 05b1 FB       		.byte	0xfb
 2673 05b2 90050000 		.4byte	0x590
 2674 05b6 02       		.uleb128 0x2
 2675 05b7 91       		.byte	0x91
 2676 05b8 74       		.sleb128 -12
 2677 05b9 00       		.byte	0
 2678 05ba 18       		.uleb128 0x18
 2679 05bb F4040000 		.4byte	.LASF92
 2680 05bf 01       		.byte	0x1
 2681 05c0 0401     		.2byte	0x104
 2682 05c2 2C040000 		.4byte	0x42c
 2683 05c6 00000000 		.4byte	.LFB71
 2684 05ca 46000000 		.4byte	.LFE71-.LFB71
 2685 05ce 01       		.uleb128 0x1
 2686 05cf 9C       		.byte	0x9c
 2687 05d0 11060000 		.4byte	0x611
 2688 05d4 19       		.uleb128 0x19
 2689 05d5 AC020000 		.4byte	.LASF71
 2690 05d9 01       		.byte	0x1
 2691 05da 0401     		.2byte	0x104
 2692 05dc 8D000000 		.4byte	0x8d
 2693 05e0 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 63


 2694 05e1 91       		.byte	0x91
 2695 05e2 6A       		.sleb128 -22
 2696 05e3 19       		.uleb128 0x19
 2697 05e4 8B070000 		.4byte	.LASF73
 2698 05e8 01       		.byte	0x1
 2699 05e9 0401     		.2byte	0x104
 2700 05eb 81000000 		.4byte	0x81
 2701 05ef 02       		.uleb128 0x2
 2702 05f0 91       		.byte	0x91
 2703 05f1 69       		.sleb128 -23
 2704 05f2 19       		.uleb128 0x19
 2705 05f3 74000000 		.4byte	.LASF74
 2706 05f7 01       		.byte	0x1
 2707 05f8 0401     		.2byte	0x104
 2708 05fa 81000000 		.4byte	0x81
 2709 05fe 02       		.uleb128 0x2
 2710 05ff 91       		.byte	0x91
 2711 0600 68       		.sleb128 -24
 2712 0601 1A       		.uleb128 0x1a
 2713 0602 28070000 		.4byte	.LASF93
 2714 0606 01       		.byte	0x1
 2715 0607 0701     		.2byte	0x107
 2716 0609 2C040000 		.4byte	0x42c
 2717 060d 02       		.uleb128 0x2
 2718 060e 91       		.byte	0x91
 2719 060f 70       		.sleb128 -16
 2720 0610 00       		.byte	0
 2721 0611 1B       		.uleb128 0x1b
 2722 0612 0D060000 		.4byte	.LASF95
 2723 0616 01       		.byte	0x1
 2724 0617 1D01     		.2byte	0x11d
 2725 0619 00000000 		.4byte	.LFB72
 2726 061d 04010000 		.4byte	.LFE72-.LFB72
 2727 0621 01       		.uleb128 0x1
 2728 0622 9C       		.byte	0x9c
 2729 0623 78060000 		.4byte	0x678
 2730 0627 1A       		.uleb128 0x1a
 2731 0628 7F010000 		.4byte	.LASF96
 2732 062c 01       		.byte	0x1
 2733 062d 2501     		.2byte	0x125
 2734 062f C9010000 		.4byte	0x1c9
 2735 0633 03       		.uleb128 0x3
 2736 0634 91       		.byte	0x91
 2737 0635 EC7C     		.sleb128 -404
 2738 0637 1A       		.uleb128 0x1a
 2739 0638 65070000 		.4byte	.LASF97
 2740 063c 01       		.byte	0x1
 2741 063d 2901     		.2byte	0x129
 2742 063f C9010000 		.4byte	0x1c9
 2743 0643 03       		.uleb128 0x3
 2744 0644 91       		.byte	0x91
 2745 0645 E879     		.sleb128 -792
 2746 0647 1A       		.uleb128 0x1a
 2747 0648 1A010000 		.4byte	.LASF98
 2748 064c 01       		.byte	0x1
 2749 064d 2D01     		.2byte	0x12d
 2750 064f C9010000 		.4byte	0x1c9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 64


 2751 0653 03       		.uleb128 0x3
 2752 0654 91       		.byte	0x91
 2753 0655 E476     		.sleb128 -1180
 2754 0657 1A       		.uleb128 0x1a
 2755 0658 F3030000 		.4byte	.LASF99
 2756 065c 01       		.byte	0x1
 2757 065d 3101     		.2byte	0x131
 2758 065f C9010000 		.4byte	0x1c9
 2759 0663 03       		.uleb128 0x3
 2760 0664 91       		.byte	0x91
 2761 0665 E073     		.sleb128 -1568
 2762 0667 1A       		.uleb128 0x1a
 2763 0668 00000000 		.4byte	.LASF100
 2764 066c 01       		.byte	0x1
 2765 066d 3501     		.2byte	0x135
 2766 066f C9010000 		.4byte	0x1c9
 2767 0673 03       		.uleb128 0x3
 2768 0674 91       		.byte	0x91
 2769 0675 DC70     		.sleb128 -1956
 2770 0677 00       		.byte	0
 2771 0678 1C       		.uleb128 0x1c
 2772 0679 D8070000 		.4byte	.LASF160
 2773 067d 01       		.byte	0x1
 2774 067e 4001     		.2byte	0x140
 2775 0680 68000000 		.4byte	0x68
 2776 0684 00000000 		.4byte	.LFB73
 2777 0688 1E000000 		.4byte	.LFE73-.LFB73
 2778 068c 01       		.uleb128 0x1
 2779 068d 9C       		.byte	0x9c
 2780 068e 1D       		.uleb128 0x1d
 2781 068f 86020000 		.4byte	.LASF101
 2782 0693 01       		.byte	0x1
 2783 0694 5601     		.2byte	0x156
 2784 0696 81000000 		.4byte	0x81
 2785 069a 00000000 		.4byte	.LFB74
 2786 069e 5C040000 		.4byte	.LFE74-.LFB74
 2787 06a2 01       		.uleb128 0x1
 2788 06a3 9C       		.byte	0x9c
 2789 06a4 F8070000 		.4byte	0x7f8
 2790 06a8 1E       		.uleb128 0x1e
 2791 06a9 62000000 		.4byte	.LBB2
 2792 06ad CC030000 		.4byte	.LBE2-.LBB2
 2793 06b1 1A       		.uleb128 0x1a
 2794 06b2 07050000 		.4byte	.LASF102
 2795 06b6 01       		.byte	0x1
 2796 06b7 8601     		.2byte	0x186
 2797 06b9 C9020000 		.4byte	0x2c9
 2798 06bd 02       		.uleb128 0x2
 2799 06be 91       		.byte	0x91
 2800 06bf 48       		.sleb128 -56
 2801 06c0 1A       		.uleb128 0x1a
 2802 06c1 32050000 		.4byte	.LASF103
 2803 06c5 01       		.byte	0x1
 2804 06c6 8A01     		.2byte	0x18a
 2805 06c8 C9020000 		.4byte	0x2c9
 2806 06cc 03       		.uleb128 0x3
 2807 06cd 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 65


 2808 06ce B47F     		.sleb128 -76
 2809 06d0 1A       		.uleb128 0x1a
 2810 06d1 5B020000 		.4byte	.LASF104
 2811 06d5 01       		.byte	0x1
 2812 06d6 8F01     		.2byte	0x18f
 2813 06d8 C9020000 		.4byte	0x2c9
 2814 06dc 03       		.uleb128 0x3
 2815 06dd 91       		.byte	0x91
 2816 06de A07F     		.sleb128 -96
 2817 06e0 1A       		.uleb128 0x1a
 2818 06e1 58030000 		.4byte	.LASF105
 2819 06e5 01       		.byte	0x1
 2820 06e6 A201     		.2byte	0x1a2
 2821 06e8 8D000000 		.4byte	0x8d
 2822 06ec 02       		.uleb128 0x2
 2823 06ed 91       		.byte	0x91
 2824 06ee 66       		.sleb128 -26
 2825 06ef 1A       		.uleb128 0x1a
 2826 06f0 DE030000 		.4byte	.LASF106
 2827 06f4 01       		.byte	0x1
 2828 06f5 A301     		.2byte	0x1a3
 2829 06f7 C9020000 		.4byte	0x2c9
 2830 06fb 03       		.uleb128 0x3
 2831 06fc 91       		.byte	0x91
 2832 06fd 8C7F     		.sleb128 -116
 2833 06ff 1A       		.uleb128 0x1a
 2834 0700 D5060000 		.4byte	.LASF107
 2835 0704 01       		.byte	0x1
 2836 0705 B801     		.2byte	0x1b8
 2837 0707 F8070000 		.4byte	0x7f8
 2838 070b 03       		.uleb128 0x3
 2839 070c 91       		.byte	0x91
 2840 070d A475     		.sleb128 -1372
 2841 070f 1A       		.uleb128 0x1a
 2842 0710 38070000 		.4byte	.LASF30
 2843 0714 01       		.byte	0x1
 2844 0715 B901     		.2byte	0x1b9
 2845 0717 81000000 		.4byte	0x81
 2846 071b 02       		.uleb128 0x2
 2847 071c 91       		.byte	0x91
 2848 071d 65       		.sleb128 -27
 2849 071e 1A       		.uleb128 0x1a
 2850 071f A7060000 		.4byte	.LASF108
 2851 0723 01       		.byte	0x1
 2852 0724 C001     		.2byte	0x1c0
 2853 0726 EC000000 		.4byte	0xec
 2854 072a 02       		.uleb128 0x2
 2855 072b 91       		.byte	0x91
 2856 072c 6C       		.sleb128 -20
 2857 072d 1A       		.uleb128 0x1a
 2858 072e 9C010000 		.4byte	.LASF109
 2859 0732 01       		.byte	0x1
 2860 0733 C401     		.2byte	0x1c4
 2861 0735 A5000000 		.4byte	0xa5
 2862 0739 02       		.uleb128 0x2
 2863 073a 91       		.byte	0x91
 2864 073b 64       		.sleb128 -28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 66


 2865 073c 1A       		.uleb128 0x1a
 2866 073d 8F020000 		.4byte	.LASF110
 2867 0741 01       		.byte	0x1
 2868 0742 F401     		.2byte	0x1f4
 2869 0744 4C000000 		.4byte	0x4c
 2870 0748 02       		.uleb128 0x2
 2871 0749 91       		.byte	0x91
 2872 074a 5C       		.sleb128 -36
 2873 074b 1F       		.uleb128 0x1f
 2874 074c F0000000 		.4byte	.LBB3
 2875 0750 2C000000 		.4byte	.LBE3-.LBB3
 2876 0754 78070000 		.4byte	0x778
 2877 0758 1A       		.uleb128 0x1a
 2878 0759 39060000 		.4byte	.LASF111
 2879 075d 01       		.byte	0x1
 2880 075e 9701     		.2byte	0x197
 2881 0760 8D000000 		.4byte	0x8d
 2882 0764 02       		.uleb128 0x2
 2883 0765 91       		.byte	0x91
 2884 0766 68       		.sleb128 -24
 2885 0767 1A       		.uleb128 0x1a
 2886 0768 0E020000 		.4byte	.LASF112
 2887 076c 01       		.byte	0x1
 2888 076d 9801     		.2byte	0x198
 2889 076f C9020000 		.4byte	0x2c9
 2890 0773 03       		.uleb128 0x3
 2891 0774 91       		.byte	0x91
 2892 0775 F87E     		.sleb128 -136
 2893 0777 00       		.byte	0
 2894 0778 1F       		.uleb128 0x1f
 2895 0779 1E010000 		.4byte	.LBB4
 2896 077d 20000000 		.4byte	.LBE4-.LBB4
 2897 0781 96070000 		.4byte	0x796
 2898 0785 1A       		.uleb128 0x1a
 2899 0786 0E020000 		.4byte	.LASF112
 2900 078a 01       		.byte	0x1
 2901 078b 9C01     		.2byte	0x19c
 2902 078d C9020000 		.4byte	0x2c9
 2903 0791 03       		.uleb128 0x3
 2904 0792 91       		.byte	0x91
 2905 0793 E47E     		.sleb128 -156
 2906 0795 00       		.byte	0
 2907 0796 1F       		.uleb128 0x1f
 2908 0797 5E020000 		.4byte	.LBB5
 2909 079b 4C010000 		.4byte	.LBE5-.LBB5
 2910 079f CD070000 		.4byte	0x7cd
 2911 07a3 1A       		.uleb128 0x1a
 2912 07a4 00050000 		.4byte	.LASF113
 2913 07a8 01       		.byte	0x1
 2914 07a9 C901     		.2byte	0x1c9
 2915 07ab A5000000 		.4byte	0xa5
 2916 07af 02       		.uleb128 0x2
 2917 07b0 91       		.byte	0x91
 2918 07b1 6B       		.sleb128 -21
 2919 07b2 1E       		.uleb128 0x1e
 2920 07b3 66020000 		.4byte	.LBB6
 2921 07b7 28010000 		.4byte	.LBE6-.LBB6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 67


 2922 07bb 1A       		.uleb128 0x1a
 2923 07bc 25030000 		.4byte	.LASF114
 2924 07c0 01       		.byte	0x1
 2925 07c1 CB01     		.2byte	0x1cb
 2926 07c3 08080000 		.4byte	0x808
 2927 07c7 03       		.uleb128 0x3
 2928 07c8 91       		.byte	0x91
 2929 07c9 EC76     		.sleb128 -1172
 2930 07cb 00       		.byte	0
 2931 07cc 00       		.byte	0
 2932 07cd 1E       		.uleb128 0x1e
 2933 07ce C4030000 		.4byte	.LBB7
 2934 07d2 3A000000 		.4byte	.LBE7-.LBB7
 2935 07d6 1A       		.uleb128 0x1a
 2936 07d7 69020000 		.4byte	.LASF115
 2937 07db 01       		.byte	0x1
 2938 07dc EB01     		.2byte	0x1eb
 2939 07de 68000000 		.4byte	0x68
 2940 07e2 02       		.uleb128 0x2
 2941 07e3 91       		.byte	0x91
 2942 07e4 60       		.sleb128 -32
 2943 07e5 1A       		.uleb128 0x1a
 2944 07e6 BA050000 		.4byte	.LASF116
 2945 07ea 01       		.byte	0x1
 2946 07eb EC01     		.2byte	0x1ec
 2947 07ed 19080000 		.4byte	0x819
 2948 07f1 03       		.uleb128 0x3
 2949 07f2 91       		.byte	0x91
 2950 07f3 D87E     		.sleb128 -168
 2951 07f5 00       		.byte	0
 2952 07f6 00       		.byte	0
 2953 07f7 00       		.byte	0
 2954 07f8 07       		.uleb128 0x7
 2955 07f9 D7000000 		.4byte	0xd7
 2956 07fd 08080000 		.4byte	0x808
 2957 0801 08       		.uleb128 0x8
 2958 0802 E5000000 		.4byte	0xe5
 2959 0806 C7       		.byte	0xc7
 2960 0807 00       		.byte	0
 2961 0808 07       		.uleb128 0x7
 2962 0809 D7000000 		.4byte	0xd7
 2963 080d 19080000 		.4byte	0x819
 2964 0811 20       		.uleb128 0x20
 2965 0812 E5000000 		.4byte	0xe5
 2966 0816 E803     		.2byte	0x3e8
 2967 0818 00       		.byte	0
 2968 0819 07       		.uleb128 0x7
 2969 081a D7000000 		.4byte	0xd7
 2970 081e 29080000 		.4byte	0x829
 2971 0822 08       		.uleb128 0x8
 2972 0823 E5000000 		.4byte	0xe5
 2973 0827 09       		.byte	0x9
 2974 0828 00       		.byte	0
 2975 0829 1D       		.uleb128 0x1d
 2976 082a 39050000 		.4byte	.LASF117
 2977 082e 01       		.byte	0x1
 2978 082f 0902     		.2byte	0x209
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 68


 2979 0831 81000000 		.4byte	0x81
 2980 0835 00000000 		.4byte	.LFB75
 2981 0839 44000000 		.4byte	.LFE75-.LFB75
 2982 083d 01       		.uleb128 0x1
 2983 083e 9C       		.byte	0x9c
 2984 083f 5D080000 		.4byte	0x85d
 2985 0843 1E       		.uleb128 0x1e
 2986 0844 20000000 		.4byte	.LBB8
 2987 0848 1A000000 		.4byte	.LBE8-.LBB8
 2988 084c 1A       		.uleb128 0x1a
 2989 084d 8F020000 		.4byte	.LASF110
 2990 0851 01       		.byte	0x1
 2991 0852 1402     		.2byte	0x214
 2992 0854 4C000000 		.4byte	0x4c
 2993 0858 02       		.uleb128 0x2
 2994 0859 91       		.byte	0x91
 2995 085a 74       		.sleb128 -12
 2996 085b 00       		.byte	0
 2997 085c 00       		.byte	0
 2998 085d 1D       		.uleb128 0x1d
 2999 085e 86030000 		.4byte	.LASF118
 3000 0862 01       		.byte	0x1
 3001 0863 2902     		.2byte	0x229
 3002 0865 81000000 		.4byte	0x81
 3003 0869 00000000 		.4byte	.LFB76
 3004 086d BC000000 		.4byte	.LFE76-.LFB76
 3005 0871 01       		.uleb128 0x1
 3006 0872 9C       		.byte	0x9c
 3007 0873 B6080000 		.4byte	0x8b6
 3008 0877 1A       		.uleb128 0x1a
 3009 0878 C7040000 		.4byte	.LASF49
 3010 087c 01       		.byte	0x1
 3011 087d 2C02     		.2byte	0x22c
 3012 087f 4C000000 		.4byte	0x4c
 3013 0883 02       		.uleb128 0x2
 3014 0884 91       		.byte	0x91
 3015 0885 6C       		.sleb128 -20
 3016 0886 1A       		.uleb128 0x1a
 3017 0887 AD060000 		.4byte	.LASF119
 3018 088b 01       		.byte	0x1
 3019 088c 2D02     		.2byte	0x22d
 3020 088e B6080000 		.4byte	0x8b6
 3021 0892 02       		.uleb128 0x2
 3022 0893 91       		.byte	0x91
 3023 0894 4C       		.sleb128 -52
 3024 0895 1A       		.uleb128 0x1a
 3025 0896 DC020000 		.4byte	.LASF48
 3026 089a 01       		.byte	0x1
 3027 089b 3102     		.2byte	0x231
 3028 089d C9020000 		.4byte	0x2c9
 3029 08a1 03       		.uleb128 0x3
 3030 08a2 91       		.byte	0x91
 3031 08a3 B87F     		.sleb128 -72
 3032 08a5 1A       		.uleb128 0x1a
 3033 08a6 30030000 		.4byte	.LASF120
 3034 08aa 01       		.byte	0x1
 3035 08ab 5102     		.2byte	0x251
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 69


 3036 08ad 19020000 		.4byte	0x219
 3037 08b1 03       		.uleb128 0x3
 3038 08b2 91       		.byte	0x91
 3039 08b3 A47F     		.sleb128 -92
 3040 08b5 00       		.byte	0
 3041 08b6 07       		.uleb128 0x7
 3042 08b7 D7000000 		.4byte	0xd7
 3043 08bb C6080000 		.4byte	0x8c6
 3044 08bf 08       		.uleb128 0x8
 3045 08c0 E5000000 		.4byte	0xe5
 3046 08c4 1F       		.byte	0x1f
 3047 08c5 00       		.byte	0
 3048 08c6 21       		.uleb128 0x21
 3049 08c7 06030000 		.4byte	.LASF121
 3050 08cb 01       		.byte	0x1
 3051 08cc 9502     		.2byte	0x295
 3052 08ce 81000000 		.4byte	0x81
 3053 08d2 00000000 		.4byte	.LFB77
 3054 08d6 74000000 		.4byte	.LFE77-.LFB77
 3055 08da 01       		.uleb128 0x1
 3056 08db 9C       		.byte	0x9c
 3057 08dc 0C090000 		.4byte	0x90c
 3058 08e0 19       		.uleb128 0x19
 3059 08e1 C7040000 		.4byte	.LASF49
 3060 08e5 01       		.byte	0x1
 3061 08e6 9502     		.2byte	0x295
 3062 08e8 4C000000 		.4byte	0x4c
 3063 08ec 02       		.uleb128 0x2
 3064 08ed 91       		.byte	0x91
 3065 08ee 64       		.sleb128 -28
 3066 08ef 22       		.uleb128 0x22
 3067 08f0 7400     		.ascii	"t\000"
 3068 08f2 01       		.byte	0x1
 3069 08f3 9C02     		.2byte	0x29c
 3070 08f5 0C090000 		.4byte	0x90c
 3071 08f9 02       		.uleb128 0x2
 3072 08fa 91       		.byte	0x91
 3073 08fb 74       		.sleb128 -12
 3074 08fc 1A       		.uleb128 0x1a
 3075 08fd A6040000 		.4byte	.LASF122
 3076 0901 01       		.byte	0x1
 3077 0902 A102     		.2byte	0x2a1
 3078 0904 6B010000 		.4byte	0x16b
 3079 0908 02       		.uleb128 0x2
 3080 0909 91       		.byte	0x91
 3081 090a 68       		.sleb128 -24
 3082 090b 00       		.byte	0
 3083 090c 06       		.uleb128 0x6
 3084 090d 04       		.byte	0x4
 3085 090e 24020000 		.4byte	0x224
 3086 0912 21       		.uleb128 0x21
 3087 0913 BB020000 		.4byte	.LASF123
 3088 0917 01       		.byte	0x1
 3089 0918 BE02     		.2byte	0x2be
 3090 091a 81000000 		.4byte	0x81
 3091 091e 00000000 		.4byte	.LFB78
 3092 0922 38010000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 70


 3093 0926 01       		.uleb128 0x1
 3094 0927 9C       		.byte	0x9c
 3095 0928 8B090000 		.4byte	0x98b
 3096 092c 19       		.uleb128 0x19
 3097 092d E2020000 		.4byte	.LASF124
 3098 0931 01       		.byte	0x1
 3099 0932 BE02     		.2byte	0x2be
 3100 0934 EC000000 		.4byte	0xec
 3101 0938 03       		.uleb128 0x3
 3102 0939 91       		.byte	0x91
 3103 093a 9C7E     		.sleb128 -228
 3104 093c 19       		.uleb128 0x19
 3105 093d D7020000 		.4byte	.LASF125
 3106 0941 01       		.byte	0x1
 3107 0942 BE02     		.2byte	0x2be
 3108 0944 68000000 		.4byte	0x68
 3109 0948 03       		.uleb128 0x3
 3110 0949 91       		.byte	0x91
 3111 094a 987E     		.sleb128 -232
 3112 094c 19       		.uleb128 0x19
 3113 094d 6F040000 		.4byte	.LASF126
 3114 0951 01       		.byte	0x1
 3115 0952 BE02     		.2byte	0x2be
 3116 0954 EC000000 		.4byte	0xec
 3117 0958 03       		.uleb128 0x3
 3118 0959 91       		.byte	0x91
 3119 095a 947E     		.sleb128 -236
 3120 095c 1A       		.uleb128 0x1a
 3121 095d FF010000 		.4byte	.LASF127
 3122 0961 01       		.byte	0x1
 3123 0962 C002     		.2byte	0x2c0
 3124 0964 81000000 		.4byte	0x81
 3125 0968 02       		.uleb128 0x2
 3126 0969 91       		.byte	0x91
 3127 096a 77       		.sleb128 -9
 3128 096b 1A       		.uleb128 0x1a
 3129 096c 5F000000 		.4byte	.LASF128
 3130 0970 01       		.byte	0x1
 3131 0971 C702     		.2byte	0x2c7
 3132 0973 8B090000 		.4byte	0x98b
 3133 0977 02       		.uleb128 0x2
 3134 0978 91       		.byte	0x91
 3135 0979 68       		.sleb128 -24
 3136 097a 1A       		.uleb128 0x1a
 3137 097b D5060000 		.4byte	.LASF107
 3138 097f 01       		.byte	0x1
 3139 0980 CF02     		.2byte	0x2cf
 3140 0982 F8070000 		.4byte	0x7f8
 3141 0986 03       		.uleb128 0x3
 3142 0987 91       		.byte	0x91
 3143 0988 A07E     		.sleb128 -224
 3144 098a 00       		.byte	0
 3145 098b 07       		.uleb128 0x7
 3146 098c D7000000 		.4byte	0xd7
 3147 0990 9B090000 		.4byte	0x99b
 3148 0994 08       		.uleb128 0x8
 3149 0995 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 71


 3150 0999 0B       		.byte	0xb
 3151 099a 00       		.byte	0
 3152 099b 23       		.uleb128 0x23
 3153 099c 60010000 		.4byte	.LASF129
 3154 09a0 0C       		.byte	0xc
 3155 09a1 1207     		.2byte	0x712
 3156 09a3 A7090000 		.4byte	0x9a7
 3157 09a7 0C       		.uleb128 0xc
 3158 09a8 76000000 		.4byte	0x76
 3159 09ac 24       		.uleb128 0x24
 3160 09ad 88060000 		.4byte	.LASF130
 3161 09b1 0D       		.byte	0xd
 3162 09b2 25       		.byte	0x25
 3163 09b3 8F040000 		.4byte	0x48f
 3164 09b7 05       		.uleb128 0x5
 3165 09b8 03       		.byte	0x3
 3166 09b9 00000000 		.4byte	level_sensor_inbox
 3167 09bd 24       		.uleb128 0x24
 3168 09be 4F000000 		.4byte	.LASF131
 3169 09c2 09       		.byte	0x9
 3170 09c3 11       		.byte	0x11
 3171 09c4 E1030000 		.4byte	0x3e1
 3172 09c8 05       		.uleb128 0x5
 3173 09c9 03       		.byte	0x3
 3174 09ca 00000000 		.4byte	buffer_overflow
 3175 09ce 24       		.uleb128 0x24
 3176 09cf 56040000 		.4byte	.LASF132
 3177 09d3 09       		.byte	0x9
 3178 09d4 22       		.byte	0x22
 3179 09d5 8D000000 		.4byte	0x8d
 3180 09d9 05       		.uleb128 0x5
 3181 09da 03       		.byte	0x3
 3182 09db 00000000 		.4byte	dataPointsInStack
 3183 09df 24       		.uleb128 0x24
 3184 09e0 3F070000 		.4byte	.LASF133
 3185 09e4 09       		.byte	0x9
 3186 09e5 23       		.byte	0x23
 3187 09e6 8D000000 		.4byte	0x8d
 3188 09ea 05       		.uleb128 0x5
 3189 09eb 03       		.byte	0x3
 3190 09ec 00000000 		.4byte	dataPointsInStackDesired
 3191 09f0 07       		.uleb128 0x7
 3192 09f1 D9020000 		.4byte	0x2d9
 3193 09f5 000A0000 		.4byte	0xa00
 3194 09f9 08       		.uleb128 0x8
 3195 09fa E5000000 		.4byte	0xe5
 3196 09fe 95       		.byte	0x95
 3197 09ff 00       		.byte	0
 3198 0a00 24       		.uleb128 0x24
 3199 0a01 97030000 		.4byte	.LASF134
 3200 0a05 09       		.byte	0x9
 3201 0a06 24       		.byte	0x24
 3202 0a07 F0090000 		.4byte	0x9f0
 3203 0a0b 05       		.uleb128 0x5
 3204 0a0c 03       		.byte	0x3
 3205 0a0d 00000000 		.4byte	data
 3206 0a11 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 72


 3207 0a12 47010000 		.4byte	.LASF135
 3208 0a16 0A       		.byte	0xa
 3209 0a17 1F       		.byte	0x1f
 3210 0a18 81000000 		.4byte	0x81
 3211 0a1c 05       		.uleb128 0x5
 3212 0a1d 03       		.byte	0x3
 3213 0a1e 00000000 		.4byte	modem_state
 3214 0a22 24       		.uleb128 0x24
 3215 0a23 13040000 		.4byte	.LASF136
 3216 0a27 0A       		.byte	0xa
 3217 0a28 69       		.byte	0x69
 3218 0a29 BD000000 		.4byte	0xbd
 3219 0a2d 05       		.uleb128 0x5
 3220 0a2e 03       		.byte	0x3
 3221 0a2f 00000000 		.4byte	modem_start_time_stamp
 3222 0a33 24       		.uleb128 0x24
 3223 0a34 AD030000 		.4byte	.LASF76
 3224 0a38 0A       		.byte	0xa
 3225 0a39 6A       		.byte	0x6a
 3226 0a3a 11030000 		.4byte	0x311
 3227 0a3e 05       		.uleb128 0x5
 3228 0a3f 03       		.byte	0x3
 3229 0a40 00000000 		.4byte	modem_info
 3230 0a44 24       		.uleb128 0x24
 3231 0a45 BE060000 		.4byte	.LASF137
 3232 0a49 0A       		.byte	0xa
 3233 0a4a 6B       		.byte	0x6b
 3234 0a4b 85030000 		.4byte	0x385
 3235 0a4f 05       		.uleb128 0x5
 3236 0a50 03       		.byte	0x3
 3237 0a51 00000000 		.4byte	modem_stats
 3238 0a55 24       		.uleb128 0x24
 3239 0a56 DF040000 		.4byte	.LASF138
 3240 0a5a 0A       		.byte	0xa
 3241 0a5b 6C       		.byte	0x6c
 3242 0a5c E8030000 		.4byte	0x3e8
 3243 0a60 05       		.uleb128 0x5
 3244 0a61 03       		.byte	0x3
 3245 0a62 00000000 		.4byte	updatable_parameters
 3246 0a66 24       		.uleb128 0x24
 3247 0a67 FF070000 		.4byte	.LASF139
 3248 0a6b 0E       		.byte	0xe
 3249 0a6c 12       		.byte	0x12
 3250 0a6d 8F040000 		.4byte	0x48f
 3251 0a71 05       		.uleb128 0x5
 3252 0a72 03       		.byte	0x3
 3253 0a73 00000000 		.4byte	app_led_inbox
 3254 0a77 07       		.uleb128 0x7
 3255 0a78 D7000000 		.4byte	0xd7
 3256 0a7c 880A0000 		.4byte	0xa88
 3257 0a80 20       		.uleb128 0x20
 3258 0a81 E5000000 		.4byte	0xe5
 3259 0a85 0F27     		.2byte	0x270f
 3260 0a87 00       		.byte	0
 3261 0a88 24       		.uleb128 0x24
 3262 0a89 1F050000 		.4byte	.LASF140
 3263 0a8d 0B       		.byte	0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 73


 3264 0a8e 18       		.byte	0x18
 3265 0a8f 770A0000 		.4byte	0xa77
 3266 0a93 05       		.uleb128 0x5
 3267 0a94 03       		.byte	0x3
 3268 0a95 00000000 		.4byte	http_request
 3269 0a99 24       		.uleb128 0x24
 3270 0a9a 7B070000 		.4byte	.LASF141
 3271 0a9e 0B       		.byte	0xb
 3272 0a9f 19       		.byte	0x19
 3273 0aa0 770A0000 		.4byte	0xa77
 3274 0aa4 05       		.uleb128 0x5
 3275 0aa5 03       		.byte	0x3
 3276 0aa6 00000000 		.4byte	http_body
 3277 0aaa 24       		.uleb128 0x24
 3278 0aab CA060000 		.4byte	.LASF142
 3279 0aaf 0B       		.byte	0xb
 3280 0ab0 1A       		.byte	0x1a
 3281 0ab1 F8070000 		.4byte	0x7f8
 3282 0ab5 05       		.uleb128 0x5
 3283 0ab6 03       		.byte	0x3
 3284 0ab7 00000000 		.4byte	http_route
 3285 0abb 24       		.uleb128 0x24
 3286 0abc E6050000 		.4byte	.LASF143
 3287 0ac0 0B       		.byte	0xb
 3288 0ac1 41       		.byte	0x41
 3289 0ac2 63040000 		.4byte	0x463
 3290 0ac6 05       		.uleb128 0x5
 3291 0ac7 03       		.byte	0x3
 3292 0ac8 00000000 		.4byte	system_info
 3293 0acc 24       		.uleb128 0x24
 3294 0acd 95050000 		.4byte	.LASF144
 3295 0ad1 0B       		.byte	0xb
 3296 0ad2 53       		.byte	0x53
 3297 0ad3 9F040000 		.4byte	0x49f
 3298 0ad7 05       		.uleb128 0x5
 3299 0ad8 03       		.byte	0x3
 3300 0ad9 00000000 		.4byte	system_settings
 3301 0add 24       		.uleb128 0x24
 3302 0ade 53010000 		.4byte	.LASF145
 3303 0ae2 0B       		.byte	0xb
 3304 0ae3 6F       		.byte	0x6f
 3305 0ae4 2C040000 		.4byte	0x42c
 3306 0ae8 05       		.uleb128 0x5
 3307 0ae9 03       		.byte	0x3
 3308 0aea 00000000 		.4byte	alarmMeasure
 3309 0aee 24       		.uleb128 0x24
 3310 0aef A9010000 		.4byte	.LASF146
 3311 0af3 0B       		.byte	0xb
 3312 0af4 70       		.byte	0x70
 3313 0af5 81000000 		.4byte	0x81
 3314 0af9 05       		.uleb128 0x5
 3315 0afa 03       		.byte	0x3
 3316 0afb 00000000 		.4byte	timeToMeasure
 3317 0aff 24       		.uleb128 0x24
 3318 0b00 EF020000 		.4byte	.LASF147
 3319 0b04 0B       		.byte	0xb
 3320 0b05 71       		.byte	0x71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 74


 3321 0b06 2C040000 		.4byte	0x42c
 3322 0b0a 05       		.uleb128 0x5
 3323 0b0b 03       		.byte	0x3
 3324 0b0c 00000000 		.4byte	alarmSync
 3325 0b10 24       		.uleb128 0x24
 3326 0b11 CF010000 		.4byte	.LASF148
 3327 0b15 0B       		.byte	0xb
 3328 0b16 72       		.byte	0x72
 3329 0b17 81000000 		.4byte	0x81
 3330 0b1b 05       		.uleb128 0x5
 3331 0b1c 03       		.byte	0x3
 3332 0b1d 00000000 		.4byte	timeToSync
 3333 0b21 24       		.uleb128 0x24
 3334 0b22 B0040000 		.4byte	.LASF149
 3335 0b26 0B       		.byte	0xb
 3336 0b27 73       		.byte	0x73
 3337 0b28 81000000 		.4byte	0x81
 3338 0b2c 05       		.uleb128 0x5
 3339 0b2d 03       		.byte	0x3
 3340 0b2e 00000000 		.4byte	timeToSycnRemoteParams
 3341 0b32 25       		.uleb128 0x25
 3342 0b33 68657900 		.ascii	"hey\000"
 3343 0b37 0B       		.byte	0xb
 3344 0b38 74       		.byte	0x74
 3345 0b39 81000000 		.4byte	0x81
 3346 0b3d 05       		.uleb128 0x5
 3347 0b3e 03       		.byte	0x3
 3348 0b3f 00000000 		.4byte	hey
 3349 0b43 24       		.uleb128 0x24
 3350 0b44 07040000 		.4byte	.LASF150
 3351 0b48 0B       		.byte	0xb
 3352 0b49 77       		.byte	0x77
 3353 0b4a 2C040000 		.4byte	0x42c
 3354 0b4e 05       		.uleb128 0x5
 3355 0b4f 03       		.byte	0x3
 3356 0b50 00000000 		.4byte	alarmAppLED
 3357 0b54 24       		.uleb128 0x24
 3358 0b55 73020000 		.4byte	.LASF151
 3359 0b59 0B       		.byte	0xb
 3360 0b5a 78       		.byte	0x78
 3361 0b5b 81000000 		.4byte	0x81
 3362 0b5f 05       		.uleb128 0x5
 3363 0b60 03       		.byte	0x3
 3364 0b61 00000000 		.4byte	timeToAppLED
 3365 0b65 24       		.uleb128 0x24
 3366 0b66 5D060000 		.4byte	.LASF152
 3367 0b6a 0B       		.byte	0xb
 3368 0b6b 7A       		.byte	0x7a
 3369 0b6c 2C040000 		.4byte	0x42c
 3370 0b70 05       		.uleb128 0x5
 3371 0b71 03       		.byte	0x3
 3372 0b72 00000000 		.4byte	alarmLevelSensor
 3373 0b76 24       		.uleb128 0x24
 3374 0b77 6D010000 		.4byte	.LASF153
 3375 0b7b 0B       		.byte	0xb
 3376 0b7c 7B       		.byte	0x7b
 3377 0b7d 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 75


 3378 0b81 05       		.uleb128 0x5
 3379 0b82 03       		.byte	0x3
 3380 0b83 00000000 		.4byte	timetoLevelSensor
 3381 0b87 07       		.uleb128 0x7
 3382 0b88 D7000000 		.4byte	0xd7
 3383 0b8c 970B0000 		.4byte	0xb97
 3384 0b90 08       		.uleb128 0x8
 3385 0b91 E5000000 		.4byte	0xe5
 3386 0b95 1D       		.byte	0x1d
 3387 0b96 00       		.byte	0
 3388 0b97 24       		.uleb128 0x24
 3389 0b98 4F050000 		.4byte	.LASF154
 3390 0b9c 01       		.byte	0x1
 3391 0b9d 1D       		.byte	0x1d
 3392 0b9e 870B0000 		.4byte	0xb87
 3393 0ba2 05       		.uleb128 0x5
 3394 0ba3 03       		.byte	0x3
 3395 0ba4 00000000 		.4byte	Data_fileName
 3396 0ba8 24       		.uleb128 0x24
 3397 0ba9 4C030000 		.4byte	.LASF83
 3398 0bad 01       		.byte	0x1
 3399 0bae 1E       		.byte	0x1e
 3400 0baf 81000000 		.4byte	0x81
 3401 0bb3 05       		.uleb128 0x5
 3402 0bb4 03       		.byte	0x3
 3403 0bb5 00000000 		.4byte	try_counter
 3404 0bb9 00       		.byte	0
 3405              		.section	.debug_abbrev,"",%progbits
 3406              	.Ldebug_abbrev0:
 3407 0000 01       		.uleb128 0x1
 3408 0001 11       		.uleb128 0x11
 3409 0002 01       		.byte	0x1
 3410 0003 25       		.uleb128 0x25
 3411 0004 0E       		.uleb128 0xe
 3412 0005 13       		.uleb128 0x13
 3413 0006 0B       		.uleb128 0xb
 3414 0007 03       		.uleb128 0x3
 3415 0008 0E       		.uleb128 0xe
 3416 0009 1B       		.uleb128 0x1b
 3417 000a 0E       		.uleb128 0xe
 3418 000b 55       		.uleb128 0x55
 3419 000c 17       		.uleb128 0x17
 3420 000d 11       		.uleb128 0x11
 3421 000e 01       		.uleb128 0x1
 3422 000f 10       		.uleb128 0x10
 3423 0010 17       		.uleb128 0x17
 3424 0011 00       		.byte	0
 3425 0012 00       		.byte	0
 3426 0013 02       		.uleb128 0x2
 3427 0014 24       		.uleb128 0x24
 3428 0015 00       		.byte	0
 3429 0016 0B       		.uleb128 0xb
 3430 0017 0B       		.uleb128 0xb
 3431 0018 3E       		.uleb128 0x3e
 3432 0019 0B       		.uleb128 0xb
 3433 001a 03       		.uleb128 0x3
 3434 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 76


 3435 001c 00       		.byte	0
 3436 001d 00       		.byte	0
 3437 001e 03       		.uleb128 0x3
 3438 001f 16       		.uleb128 0x16
 3439 0020 00       		.byte	0
 3440 0021 03       		.uleb128 0x3
 3441 0022 0E       		.uleb128 0xe
 3442 0023 3A       		.uleb128 0x3a
 3443 0024 0B       		.uleb128 0xb
 3444 0025 3B       		.uleb128 0x3b
 3445 0026 0B       		.uleb128 0xb
 3446 0027 49       		.uleb128 0x49
 3447 0028 13       		.uleb128 0x13
 3448 0029 00       		.byte	0
 3449 002a 00       		.byte	0
 3450 002b 04       		.uleb128 0x4
 3451 002c 24       		.uleb128 0x24
 3452 002d 00       		.byte	0
 3453 002e 0B       		.uleb128 0xb
 3454 002f 0B       		.uleb128 0xb
 3455 0030 3E       		.uleb128 0x3e
 3456 0031 0B       		.uleb128 0xb
 3457 0032 03       		.uleb128 0x3
 3458 0033 08       		.uleb128 0x8
 3459 0034 00       		.byte	0
 3460 0035 00       		.byte	0
 3461 0036 05       		.uleb128 0x5
 3462 0037 16       		.uleb128 0x16
 3463 0038 00       		.byte	0
 3464 0039 03       		.uleb128 0x3
 3465 003a 0E       		.uleb128 0xe
 3466 003b 3A       		.uleb128 0x3a
 3467 003c 0B       		.uleb128 0xb
 3468 003d 3B       		.uleb128 0x3b
 3469 003e 05       		.uleb128 0x5
 3470 003f 49       		.uleb128 0x49
 3471 0040 13       		.uleb128 0x13
 3472 0041 00       		.byte	0
 3473 0042 00       		.byte	0
 3474 0043 06       		.uleb128 0x6
 3475 0044 0F       		.uleb128 0xf
 3476 0045 00       		.byte	0
 3477 0046 0B       		.uleb128 0xb
 3478 0047 0B       		.uleb128 0xb
 3479 0048 49       		.uleb128 0x49
 3480 0049 13       		.uleb128 0x13
 3481 004a 00       		.byte	0
 3482 004b 00       		.byte	0
 3483 004c 07       		.uleb128 0x7
 3484 004d 01       		.uleb128 0x1
 3485 004e 01       		.byte	0x1
 3486 004f 49       		.uleb128 0x49
 3487 0050 13       		.uleb128 0x13
 3488 0051 01       		.uleb128 0x1
 3489 0052 13       		.uleb128 0x13
 3490 0053 00       		.byte	0
 3491 0054 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 77


 3492 0055 08       		.uleb128 0x8
 3493 0056 21       		.uleb128 0x21
 3494 0057 00       		.byte	0
 3495 0058 49       		.uleb128 0x49
 3496 0059 13       		.uleb128 0x13
 3497 005a 2F       		.uleb128 0x2f
 3498 005b 0B       		.uleb128 0xb
 3499 005c 00       		.byte	0
 3500 005d 00       		.byte	0
 3501 005e 09       		.uleb128 0x9
 3502 005f 13       		.uleb128 0x13
 3503 0060 01       		.byte	0x1
 3504 0061 0B       		.uleb128 0xb
 3505 0062 0B       		.uleb128 0xb
 3506 0063 3A       		.uleb128 0x3a
 3507 0064 0B       		.uleb128 0xb
 3508 0065 3B       		.uleb128 0x3b
 3509 0066 0B       		.uleb128 0xb
 3510 0067 01       		.uleb128 0x1
 3511 0068 13       		.uleb128 0x13
 3512 0069 00       		.byte	0
 3513 006a 00       		.byte	0
 3514 006b 0A       		.uleb128 0xa
 3515 006c 0D       		.uleb128 0xd
 3516 006d 00       		.byte	0
 3517 006e 03       		.uleb128 0x3
 3518 006f 08       		.uleb128 0x8
 3519 0070 3A       		.uleb128 0x3a
 3520 0071 0B       		.uleb128 0xb
 3521 0072 3B       		.uleb128 0x3b
 3522 0073 0B       		.uleb128 0xb
 3523 0074 49       		.uleb128 0x49
 3524 0075 13       		.uleb128 0x13
 3525 0076 38       		.uleb128 0x38
 3526 0077 0B       		.uleb128 0xb
 3527 0078 00       		.byte	0
 3528 0079 00       		.byte	0
 3529 007a 0B       		.uleb128 0xb
 3530 007b 0D       		.uleb128 0xd
 3531 007c 00       		.byte	0
 3532 007d 03       		.uleb128 0x3
 3533 007e 0E       		.uleb128 0xe
 3534 007f 3A       		.uleb128 0x3a
 3535 0080 0B       		.uleb128 0xb
 3536 0081 3B       		.uleb128 0x3b
 3537 0082 0B       		.uleb128 0xb
 3538 0083 49       		.uleb128 0x49
 3539 0084 13       		.uleb128 0x13
 3540 0085 38       		.uleb128 0x38
 3541 0086 0B       		.uleb128 0xb
 3542 0087 00       		.byte	0
 3543 0088 00       		.byte	0
 3544 0089 0C       		.uleb128 0xc
 3545 008a 35       		.uleb128 0x35
 3546 008b 00       		.byte	0
 3547 008c 49       		.uleb128 0x49
 3548 008d 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 78


 3549 008e 00       		.byte	0
 3550 008f 00       		.byte	0
 3551 0090 0D       		.uleb128 0xd
 3552 0091 13       		.uleb128 0x13
 3553 0092 01       		.byte	0x1
 3554 0093 0B       		.uleb128 0xb
 3555 0094 05       		.uleb128 0x5
 3556 0095 3A       		.uleb128 0x3a
 3557 0096 0B       		.uleb128 0xb
 3558 0097 3B       		.uleb128 0x3b
 3559 0098 0B       		.uleb128 0xb
 3560 0099 01       		.uleb128 0x1
 3561 009a 13       		.uleb128 0x13
 3562 009b 00       		.byte	0
 3563 009c 00       		.byte	0
 3564 009d 0E       		.uleb128 0xe
 3565 009e 13       		.uleb128 0x13
 3566 009f 01       		.byte	0x1
 3567 00a0 03       		.uleb128 0x3
 3568 00a1 08       		.uleb128 0x8
 3569 00a2 0B       		.uleb128 0xb
 3570 00a3 0B       		.uleb128 0xb
 3571 00a4 3A       		.uleb128 0x3a
 3572 00a5 0B       		.uleb128 0xb
 3573 00a6 3B       		.uleb128 0x3b
 3574 00a7 0B       		.uleb128 0xb
 3575 00a8 01       		.uleb128 0x1
 3576 00a9 13       		.uleb128 0x13
 3577 00aa 00       		.byte	0
 3578 00ab 00       		.byte	0
 3579 00ac 0F       		.uleb128 0xf
 3580 00ad 2E       		.uleb128 0x2e
 3581 00ae 00       		.byte	0
 3582 00af 3F       		.uleb128 0x3f
 3583 00b0 19       		.uleb128 0x19
 3584 00b1 03       		.uleb128 0x3
 3585 00b2 0E       		.uleb128 0xe
 3586 00b3 3A       		.uleb128 0x3a
 3587 00b4 0B       		.uleb128 0xb
 3588 00b5 3B       		.uleb128 0x3b
 3589 00b6 0B       		.uleb128 0xb
 3590 00b7 27       		.uleb128 0x27
 3591 00b8 19       		.uleb128 0x19
 3592 00b9 11       		.uleb128 0x11
 3593 00ba 01       		.uleb128 0x1
 3594 00bb 12       		.uleb128 0x12
 3595 00bc 06       		.uleb128 0x6
 3596 00bd 40       		.uleb128 0x40
 3597 00be 18       		.uleb128 0x18
 3598 00bf 9642     		.uleb128 0x2116
 3599 00c1 19       		.uleb128 0x19
 3600 00c2 00       		.byte	0
 3601 00c3 00       		.byte	0
 3602 00c4 10       		.uleb128 0x10
 3603 00c5 2E       		.uleb128 0x2e
 3604 00c6 01       		.byte	0x1
 3605 00c7 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 79


 3606 00c8 19       		.uleb128 0x19
 3607 00c9 03       		.uleb128 0x3
 3608 00ca 0E       		.uleb128 0xe
 3609 00cb 3A       		.uleb128 0x3a
 3610 00cc 0B       		.uleb128 0xb
 3611 00cd 3B       		.uleb128 0x3b
 3612 00ce 0B       		.uleb128 0xb
 3613 00cf 11       		.uleb128 0x11
 3614 00d0 01       		.uleb128 0x1
 3615 00d1 12       		.uleb128 0x12
 3616 00d2 06       		.uleb128 0x6
 3617 00d3 40       		.uleb128 0x40
 3618 00d4 18       		.uleb128 0x18
 3619 00d5 9642     		.uleb128 0x2116
 3620 00d7 19       		.uleb128 0x19
 3621 00d8 01       		.uleb128 0x1
 3622 00d9 13       		.uleb128 0x13
 3623 00da 00       		.byte	0
 3624 00db 00       		.byte	0
 3625 00dc 11       		.uleb128 0x11
 3626 00dd 34       		.uleb128 0x34
 3627 00de 00       		.byte	0
 3628 00df 03       		.uleb128 0x3
 3629 00e0 0E       		.uleb128 0xe
 3630 00e1 3A       		.uleb128 0x3a
 3631 00e2 0B       		.uleb128 0xb
 3632 00e3 3B       		.uleb128 0x3b
 3633 00e4 0B       		.uleb128 0xb
 3634 00e5 49       		.uleb128 0x49
 3635 00e6 13       		.uleb128 0x13
 3636 00e7 02       		.uleb128 0x2
 3637 00e8 18       		.uleb128 0x18
 3638 00e9 00       		.byte	0
 3639 00ea 00       		.byte	0
 3640 00eb 12       		.uleb128 0x12
 3641 00ec 2E       		.uleb128 0x2e
 3642 00ed 01       		.byte	0x1
 3643 00ee 3F       		.uleb128 0x3f
 3644 00ef 19       		.uleb128 0x19
 3645 00f0 03       		.uleb128 0x3
 3646 00f1 0E       		.uleb128 0xe
 3647 00f2 3A       		.uleb128 0x3a
 3648 00f3 0B       		.uleb128 0xb
 3649 00f4 3B       		.uleb128 0x3b
 3650 00f5 0B       		.uleb128 0xb
 3651 00f6 49       		.uleb128 0x49
 3652 00f7 13       		.uleb128 0x13
 3653 00f8 11       		.uleb128 0x11
 3654 00f9 01       		.uleb128 0x1
 3655 00fa 12       		.uleb128 0x12
 3656 00fb 06       		.uleb128 0x6
 3657 00fc 40       		.uleb128 0x40
 3658 00fd 18       		.uleb128 0x18
 3659 00fe 9642     		.uleb128 0x2116
 3660 0100 19       		.uleb128 0x19
 3661 0101 01       		.uleb128 0x1
 3662 0102 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 80


 3663 0103 00       		.byte	0
 3664 0104 00       		.byte	0
 3665 0105 13       		.uleb128 0x13
 3666 0106 2E       		.uleb128 0x2e
 3667 0107 00       		.byte	0
 3668 0108 3F       		.uleb128 0x3f
 3669 0109 19       		.uleb128 0x19
 3670 010a 03       		.uleb128 0x3
 3671 010b 0E       		.uleb128 0xe
 3672 010c 3A       		.uleb128 0x3a
 3673 010d 0B       		.uleb128 0xb
 3674 010e 3B       		.uleb128 0x3b
 3675 010f 0B       		.uleb128 0xb
 3676 0110 11       		.uleb128 0x11
 3677 0111 01       		.uleb128 0x1
 3678 0112 12       		.uleb128 0x12
 3679 0113 06       		.uleb128 0x6
 3680 0114 40       		.uleb128 0x40
 3681 0115 18       		.uleb128 0x18
 3682 0116 9642     		.uleb128 0x2116
 3683 0118 19       		.uleb128 0x19
 3684 0119 00       		.byte	0
 3685 011a 00       		.byte	0
 3686 011b 14       		.uleb128 0x14
 3687 011c 2E       		.uleb128 0x2e
 3688 011d 01       		.byte	0x1
 3689 011e 3F       		.uleb128 0x3f
 3690 011f 19       		.uleb128 0x19
 3691 0120 03       		.uleb128 0x3
 3692 0121 0E       		.uleb128 0xe
 3693 0122 3A       		.uleb128 0x3a
 3694 0123 0B       		.uleb128 0xb
 3695 0124 3B       		.uleb128 0x3b
 3696 0125 0B       		.uleb128 0xb
 3697 0126 27       		.uleb128 0x27
 3698 0127 19       		.uleb128 0x19
 3699 0128 11       		.uleb128 0x11
 3700 0129 01       		.uleb128 0x1
 3701 012a 12       		.uleb128 0x12
 3702 012b 06       		.uleb128 0x6
 3703 012c 40       		.uleb128 0x40
 3704 012d 18       		.uleb128 0x18
 3705 012e 9642     		.uleb128 0x2116
 3706 0130 19       		.uleb128 0x19
 3707 0131 01       		.uleb128 0x1
 3708 0132 13       		.uleb128 0x13
 3709 0133 00       		.byte	0
 3710 0134 00       		.byte	0
 3711 0135 15       		.uleb128 0x15
 3712 0136 05       		.uleb128 0x5
 3713 0137 00       		.byte	0
 3714 0138 03       		.uleb128 0x3
 3715 0139 0E       		.uleb128 0xe
 3716 013a 3A       		.uleb128 0x3a
 3717 013b 0B       		.uleb128 0xb
 3718 013c 3B       		.uleb128 0x3b
 3719 013d 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 81


 3720 013e 49       		.uleb128 0x49
 3721 013f 13       		.uleb128 0x13
 3722 0140 02       		.uleb128 0x2
 3723 0141 18       		.uleb128 0x18
 3724 0142 00       		.byte	0
 3725 0143 00       		.byte	0
 3726 0144 16       		.uleb128 0x16
 3727 0145 2E       		.uleb128 0x2e
 3728 0146 01       		.byte	0x1
 3729 0147 3F       		.uleb128 0x3f
 3730 0148 19       		.uleb128 0x19
 3731 0149 03       		.uleb128 0x3
 3732 014a 0E       		.uleb128 0xe
 3733 014b 3A       		.uleb128 0x3a
 3734 014c 0B       		.uleb128 0xb
 3735 014d 3B       		.uleb128 0x3b
 3736 014e 0B       		.uleb128 0xb
 3737 014f 27       		.uleb128 0x27
 3738 0150 19       		.uleb128 0x19
 3739 0151 49       		.uleb128 0x49
 3740 0152 13       		.uleb128 0x13
 3741 0153 11       		.uleb128 0x11
 3742 0154 01       		.uleb128 0x1
 3743 0155 12       		.uleb128 0x12
 3744 0156 06       		.uleb128 0x6
 3745 0157 40       		.uleb128 0x40
 3746 0158 18       		.uleb128 0x18
 3747 0159 9642     		.uleb128 0x2116
 3748 015b 19       		.uleb128 0x19
 3749 015c 01       		.uleb128 0x1
 3750 015d 13       		.uleb128 0x13
 3751 015e 00       		.byte	0
 3752 015f 00       		.byte	0
 3753 0160 17       		.uleb128 0x17
 3754 0161 2E       		.uleb128 0x2e
 3755 0162 01       		.byte	0x1
 3756 0163 3F       		.uleb128 0x3f
 3757 0164 19       		.uleb128 0x19
 3758 0165 03       		.uleb128 0x3
 3759 0166 0E       		.uleb128 0xe
 3760 0167 3A       		.uleb128 0x3a
 3761 0168 0B       		.uleb128 0xb
 3762 0169 3B       		.uleb128 0x3b
 3763 016a 0B       		.uleb128 0xb
 3764 016b 27       		.uleb128 0x27
 3765 016c 19       		.uleb128 0x19
 3766 016d 11       		.uleb128 0x11
 3767 016e 01       		.uleb128 0x1
 3768 016f 12       		.uleb128 0x12
 3769 0170 06       		.uleb128 0x6
 3770 0171 40       		.uleb128 0x40
 3771 0172 18       		.uleb128 0x18
 3772 0173 9742     		.uleb128 0x2117
 3773 0175 19       		.uleb128 0x19
 3774 0176 01       		.uleb128 0x1
 3775 0177 13       		.uleb128 0x13
 3776 0178 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 82


 3777 0179 00       		.byte	0
 3778 017a 18       		.uleb128 0x18
 3779 017b 2E       		.uleb128 0x2e
 3780 017c 01       		.byte	0x1
 3781 017d 3F       		.uleb128 0x3f
 3782 017e 19       		.uleb128 0x19
 3783 017f 03       		.uleb128 0x3
 3784 0180 0E       		.uleb128 0xe
 3785 0181 3A       		.uleb128 0x3a
 3786 0182 0B       		.uleb128 0xb
 3787 0183 3B       		.uleb128 0x3b
 3788 0184 05       		.uleb128 0x5
 3789 0185 27       		.uleb128 0x27
 3790 0186 19       		.uleb128 0x19
 3791 0187 49       		.uleb128 0x49
 3792 0188 13       		.uleb128 0x13
 3793 0189 11       		.uleb128 0x11
 3794 018a 01       		.uleb128 0x1
 3795 018b 12       		.uleb128 0x12
 3796 018c 06       		.uleb128 0x6
 3797 018d 40       		.uleb128 0x40
 3798 018e 18       		.uleb128 0x18
 3799 018f 9742     		.uleb128 0x2117
 3800 0191 19       		.uleb128 0x19
 3801 0192 01       		.uleb128 0x1
 3802 0193 13       		.uleb128 0x13
 3803 0194 00       		.byte	0
 3804 0195 00       		.byte	0
 3805 0196 19       		.uleb128 0x19
 3806 0197 05       		.uleb128 0x5
 3807 0198 00       		.byte	0
 3808 0199 03       		.uleb128 0x3
 3809 019a 0E       		.uleb128 0xe
 3810 019b 3A       		.uleb128 0x3a
 3811 019c 0B       		.uleb128 0xb
 3812 019d 3B       		.uleb128 0x3b
 3813 019e 05       		.uleb128 0x5
 3814 019f 49       		.uleb128 0x49
 3815 01a0 13       		.uleb128 0x13
 3816 01a1 02       		.uleb128 0x2
 3817 01a2 18       		.uleb128 0x18
 3818 01a3 00       		.byte	0
 3819 01a4 00       		.byte	0
 3820 01a5 1A       		.uleb128 0x1a
 3821 01a6 34       		.uleb128 0x34
 3822 01a7 00       		.byte	0
 3823 01a8 03       		.uleb128 0x3
 3824 01a9 0E       		.uleb128 0xe
 3825 01aa 3A       		.uleb128 0x3a
 3826 01ab 0B       		.uleb128 0xb
 3827 01ac 3B       		.uleb128 0x3b
 3828 01ad 05       		.uleb128 0x5
 3829 01ae 49       		.uleb128 0x49
 3830 01af 13       		.uleb128 0x13
 3831 01b0 02       		.uleb128 0x2
 3832 01b1 18       		.uleb128 0x18
 3833 01b2 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 83


 3834 01b3 00       		.byte	0
 3835 01b4 1B       		.uleb128 0x1b
 3836 01b5 2E       		.uleb128 0x2e
 3837 01b6 01       		.byte	0x1
 3838 01b7 3F       		.uleb128 0x3f
 3839 01b8 19       		.uleb128 0x19
 3840 01b9 03       		.uleb128 0x3
 3841 01ba 0E       		.uleb128 0xe
 3842 01bb 3A       		.uleb128 0x3a
 3843 01bc 0B       		.uleb128 0xb
 3844 01bd 3B       		.uleb128 0x3b
 3845 01be 05       		.uleb128 0x5
 3846 01bf 11       		.uleb128 0x11
 3847 01c0 01       		.uleb128 0x1
 3848 01c1 12       		.uleb128 0x12
 3849 01c2 06       		.uleb128 0x6
 3850 01c3 40       		.uleb128 0x40
 3851 01c4 18       		.uleb128 0x18
 3852 01c5 9642     		.uleb128 0x2116
 3853 01c7 19       		.uleb128 0x19
 3854 01c8 01       		.uleb128 0x1
 3855 01c9 13       		.uleb128 0x13
 3856 01ca 00       		.byte	0
 3857 01cb 00       		.byte	0
 3858 01cc 1C       		.uleb128 0x1c
 3859 01cd 2E       		.uleb128 0x2e
 3860 01ce 00       		.byte	0
 3861 01cf 3F       		.uleb128 0x3f
 3862 01d0 19       		.uleb128 0x19
 3863 01d1 03       		.uleb128 0x3
 3864 01d2 0E       		.uleb128 0xe
 3865 01d3 3A       		.uleb128 0x3a
 3866 01d4 0B       		.uleb128 0xb
 3867 01d5 3B       		.uleb128 0x3b
 3868 01d6 05       		.uleb128 0x5
 3869 01d7 27       		.uleb128 0x27
 3870 01d8 19       		.uleb128 0x19
 3871 01d9 49       		.uleb128 0x49
 3872 01da 13       		.uleb128 0x13
 3873 01db 11       		.uleb128 0x11
 3874 01dc 01       		.uleb128 0x1
 3875 01dd 12       		.uleb128 0x12
 3876 01de 06       		.uleb128 0x6
 3877 01df 40       		.uleb128 0x40
 3878 01e0 18       		.uleb128 0x18
 3879 01e1 9642     		.uleb128 0x2116
 3880 01e3 19       		.uleb128 0x19
 3881 01e4 00       		.byte	0
 3882 01e5 00       		.byte	0
 3883 01e6 1D       		.uleb128 0x1d
 3884 01e7 2E       		.uleb128 0x2e
 3885 01e8 01       		.byte	0x1
 3886 01e9 3F       		.uleb128 0x3f
 3887 01ea 19       		.uleb128 0x19
 3888 01eb 03       		.uleb128 0x3
 3889 01ec 0E       		.uleb128 0xe
 3890 01ed 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 84


 3891 01ee 0B       		.uleb128 0xb
 3892 01ef 3B       		.uleb128 0x3b
 3893 01f0 05       		.uleb128 0x5
 3894 01f1 49       		.uleb128 0x49
 3895 01f2 13       		.uleb128 0x13
 3896 01f3 11       		.uleb128 0x11
 3897 01f4 01       		.uleb128 0x1
 3898 01f5 12       		.uleb128 0x12
 3899 01f6 06       		.uleb128 0x6
 3900 01f7 40       		.uleb128 0x40
 3901 01f8 18       		.uleb128 0x18
 3902 01f9 9642     		.uleb128 0x2116
 3903 01fb 19       		.uleb128 0x19
 3904 01fc 01       		.uleb128 0x1
 3905 01fd 13       		.uleb128 0x13
 3906 01fe 00       		.byte	0
 3907 01ff 00       		.byte	0
 3908 0200 1E       		.uleb128 0x1e
 3909 0201 0B       		.uleb128 0xb
 3910 0202 01       		.byte	0x1
 3911 0203 11       		.uleb128 0x11
 3912 0204 01       		.uleb128 0x1
 3913 0205 12       		.uleb128 0x12
 3914 0206 06       		.uleb128 0x6
 3915 0207 00       		.byte	0
 3916 0208 00       		.byte	0
 3917 0209 1F       		.uleb128 0x1f
 3918 020a 0B       		.uleb128 0xb
 3919 020b 01       		.byte	0x1
 3920 020c 11       		.uleb128 0x11
 3921 020d 01       		.uleb128 0x1
 3922 020e 12       		.uleb128 0x12
 3923 020f 06       		.uleb128 0x6
 3924 0210 01       		.uleb128 0x1
 3925 0211 13       		.uleb128 0x13
 3926 0212 00       		.byte	0
 3927 0213 00       		.byte	0
 3928 0214 20       		.uleb128 0x20
 3929 0215 21       		.uleb128 0x21
 3930 0216 00       		.byte	0
 3931 0217 49       		.uleb128 0x49
 3932 0218 13       		.uleb128 0x13
 3933 0219 2F       		.uleb128 0x2f
 3934 021a 05       		.uleb128 0x5
 3935 021b 00       		.byte	0
 3936 021c 00       		.byte	0
 3937 021d 21       		.uleb128 0x21
 3938 021e 2E       		.uleb128 0x2e
 3939 021f 01       		.byte	0x1
 3940 0220 3F       		.uleb128 0x3f
 3941 0221 19       		.uleb128 0x19
 3942 0222 03       		.uleb128 0x3
 3943 0223 0E       		.uleb128 0xe
 3944 0224 3A       		.uleb128 0x3a
 3945 0225 0B       		.uleb128 0xb
 3946 0226 3B       		.uleb128 0x3b
 3947 0227 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 85


 3948 0228 27       		.uleb128 0x27
 3949 0229 19       		.uleb128 0x19
 3950 022a 49       		.uleb128 0x49
 3951 022b 13       		.uleb128 0x13
 3952 022c 11       		.uleb128 0x11
 3953 022d 01       		.uleb128 0x1
 3954 022e 12       		.uleb128 0x12
 3955 022f 06       		.uleb128 0x6
 3956 0230 40       		.uleb128 0x40
 3957 0231 18       		.uleb128 0x18
 3958 0232 9642     		.uleb128 0x2116
 3959 0234 19       		.uleb128 0x19
 3960 0235 01       		.uleb128 0x1
 3961 0236 13       		.uleb128 0x13
 3962 0237 00       		.byte	0
 3963 0238 00       		.byte	0
 3964 0239 22       		.uleb128 0x22
 3965 023a 34       		.uleb128 0x34
 3966 023b 00       		.byte	0
 3967 023c 03       		.uleb128 0x3
 3968 023d 08       		.uleb128 0x8
 3969 023e 3A       		.uleb128 0x3a
 3970 023f 0B       		.uleb128 0xb
 3971 0240 3B       		.uleb128 0x3b
 3972 0241 05       		.uleb128 0x5
 3973 0242 49       		.uleb128 0x49
 3974 0243 13       		.uleb128 0x13
 3975 0244 02       		.uleb128 0x2
 3976 0245 18       		.uleb128 0x18
 3977 0246 00       		.byte	0
 3978 0247 00       		.byte	0
 3979 0248 23       		.uleb128 0x23
 3980 0249 34       		.uleb128 0x34
 3981 024a 00       		.byte	0
 3982 024b 03       		.uleb128 0x3
 3983 024c 0E       		.uleb128 0xe
 3984 024d 3A       		.uleb128 0x3a
 3985 024e 0B       		.uleb128 0xb
 3986 024f 3B       		.uleb128 0x3b
 3987 0250 05       		.uleb128 0x5
 3988 0251 49       		.uleb128 0x49
 3989 0252 13       		.uleb128 0x13
 3990 0253 3F       		.uleb128 0x3f
 3991 0254 19       		.uleb128 0x19
 3992 0255 3C       		.uleb128 0x3c
 3993 0256 19       		.uleb128 0x19
 3994 0257 00       		.byte	0
 3995 0258 00       		.byte	0
 3996 0259 24       		.uleb128 0x24
 3997 025a 34       		.uleb128 0x34
 3998 025b 00       		.byte	0
 3999 025c 03       		.uleb128 0x3
 4000 025d 0E       		.uleb128 0xe
 4001 025e 3A       		.uleb128 0x3a
 4002 025f 0B       		.uleb128 0xb
 4003 0260 3B       		.uleb128 0x3b
 4004 0261 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 86


 4005 0262 49       		.uleb128 0x49
 4006 0263 13       		.uleb128 0x13
 4007 0264 3F       		.uleb128 0x3f
 4008 0265 19       		.uleb128 0x19
 4009 0266 02       		.uleb128 0x2
 4010 0267 18       		.uleb128 0x18
 4011 0268 00       		.byte	0
 4012 0269 00       		.byte	0
 4013 026a 25       		.uleb128 0x25
 4014 026b 34       		.uleb128 0x34
 4015 026c 00       		.byte	0
 4016 026d 03       		.uleb128 0x3
 4017 026e 08       		.uleb128 0x8
 4018 026f 3A       		.uleb128 0x3a
 4019 0270 0B       		.uleb128 0xb
 4020 0271 3B       		.uleb128 0x3b
 4021 0272 0B       		.uleb128 0xb
 4022 0273 49       		.uleb128 0x49
 4023 0274 13       		.uleb128 0x13
 4024 0275 3F       		.uleb128 0x3f
 4025 0276 19       		.uleb128 0x19
 4026 0277 02       		.uleb128 0x2
 4027 0278 18       		.uleb128 0x18
 4028 0279 00       		.byte	0
 4029 027a 00       		.byte	0
 4030 027b 00       		.byte	0
 4031              		.section	.debug_aranges,"",%progbits
 4032 0000 8C000000 		.4byte	0x8c
 4033 0004 0200     		.2byte	0x2
 4034 0006 00000000 		.4byte	.Ldebug_info0
 4035 000a 04       		.byte	0x4
 4036 000b 00       		.byte	0
 4037 000c 0000     		.2byte	0
 4038 000e 0000     		.2byte	0
 4039 0010 00000000 		.4byte	.LFB64
 4040 0014 0C000000 		.4byte	.LFE64-.LFB64
 4041 0018 00000000 		.4byte	.LFB65
 4042 001c 4C010000 		.4byte	.LFE65-.LFB65
 4043 0020 00000000 		.4byte	.LFB66
 4044 0024 98000000 		.4byte	.LFE66-.LFB66
 4045 0028 00000000 		.4byte	.LFB67
 4046 002c 2A000000 		.4byte	.LFE67-.LFB67
 4047 0030 00000000 		.4byte	.LFB68
 4048 0034 8C000000 		.4byte	.LFE68-.LFB68
 4049 0038 00000000 		.4byte	.LFB69
 4050 003c 48000000 		.4byte	.LFE69-.LFB69
 4051 0040 00000000 		.4byte	.LFB70
 4052 0044 1E000000 		.4byte	.LFE70-.LFB70
 4053 0048 00000000 		.4byte	.LFB71
 4054 004c 46000000 		.4byte	.LFE71-.LFB71
 4055 0050 00000000 		.4byte	.LFB72
 4056 0054 04010000 		.4byte	.LFE72-.LFB72
 4057 0058 00000000 		.4byte	.LFB73
 4058 005c 1E000000 		.4byte	.LFE73-.LFB73
 4059 0060 00000000 		.4byte	.LFB74
 4060 0064 5C040000 		.4byte	.LFE74-.LFB74
 4061 0068 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 87


 4062 006c 44000000 		.4byte	.LFE75-.LFB75
 4063 0070 00000000 		.4byte	.LFB76
 4064 0074 BC000000 		.4byte	.LFE76-.LFB76
 4065 0078 00000000 		.4byte	.LFB77
 4066 007c 74000000 		.4byte	.LFE77-.LFB77
 4067 0080 00000000 		.4byte	.LFB78
 4068 0084 38010000 		.4byte	.LFE78-.LFB78
 4069 0088 00000000 		.4byte	0
 4070 008c 00000000 		.4byte	0
 4071              		.section	.debug_ranges,"",%progbits
 4072              	.Ldebug_ranges0:
 4073 0000 00000000 		.4byte	.LFB64
 4074 0004 0C000000 		.4byte	.LFE64
 4075 0008 00000000 		.4byte	.LFB65
 4076 000c 4C010000 		.4byte	.LFE65
 4077 0010 00000000 		.4byte	.LFB66
 4078 0014 98000000 		.4byte	.LFE66
 4079 0018 00000000 		.4byte	.LFB67
 4080 001c 2A000000 		.4byte	.LFE67
 4081 0020 00000000 		.4byte	.LFB68
 4082 0024 8C000000 		.4byte	.LFE68
 4083 0028 00000000 		.4byte	.LFB69
 4084 002c 48000000 		.4byte	.LFE69
 4085 0030 00000000 		.4byte	.LFB70
 4086 0034 1E000000 		.4byte	.LFE70
 4087 0038 00000000 		.4byte	.LFB71
 4088 003c 46000000 		.4byte	.LFE71
 4089 0040 00000000 		.4byte	.LFB72
 4090 0044 04010000 		.4byte	.LFE72
 4091 0048 00000000 		.4byte	.LFB73
 4092 004c 1E000000 		.4byte	.LFE73
 4093 0050 00000000 		.4byte	.LFB74
 4094 0054 5C040000 		.4byte	.LFE74
 4095 0058 00000000 		.4byte	.LFB75
 4096 005c 44000000 		.4byte	.LFE75
 4097 0060 00000000 		.4byte	.LFB76
 4098 0064 BC000000 		.4byte	.LFE76
 4099 0068 00000000 		.4byte	.LFB77
 4100 006c 74000000 		.4byte	.LFE77
 4101 0070 00000000 		.4byte	.LFB78
 4102 0074 38010000 		.4byte	.LFE78
 4103 0078 00000000 		.4byte	0
 4104 007c 00000000 		.4byte	0
 4105              		.section	.debug_line,"",%progbits
 4106              	.Ldebug_line0:
 4107 0000 1E040000 		.section	.debug_str,"MS",%progbits,1
 4107      02002802 
 4107      00000201 
 4107      FB0E0D00 
 4107      01010101 
 4108              	.LASF100:
 4109 0000 745F6D6F 		.ascii	"t_modem\000"
 4109      64656D00 
 4110              	.LASF12:
 4111 0008 75696E74 		.ascii	"uint16\000"
 4111      313600
 4112              	.LASF41:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 88


 4113 000f 746D5F68 		.ascii	"tm_hour\000"
 4113      6F757200 
 4114              	.LASF157:
 4115 0017 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4115      73657273 
 4115      5C64616E 
 4115      747A5C44 
 4115      6F63756D 
 4116 0044 72694F53 		.ascii	"riOS.cydsn\000"
 4116      2E637964 
 4116      736E00
 4117              	.LASF131:
 4118 004f 62756666 		.ascii	"buffer_overflow\000"
 4118      65725F6F 
 4118      76657266 
 4118      6C6F7700 
 4119              	.LASF128:
 4120 005f 66696C65 		.ascii	"fileName\000"
 4120      4E616D65 
 4120      00
 4121              	.LASF0:
 4122 0068 7369676E 		.ascii	"signed char\000"
 4122      65642063 
 4122      68617200 
 4123              	.LASF74:
 4124 0074 636F756E 		.ascii	"countDownResetCondition\000"
 4124      74446F77 
 4124      6E526573 
 4124      6574436F 
 4124      6E646974 
 4125              	.LASF155:
 4126 008c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4126      43313120 
 4126      352E342E 
 4126      31203230 
 4126      31363036 
 4127 00bf 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4127      20726576 
 4127      6973696F 
 4127      6E203233 
 4127      37373135 
 4128 00f2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4128      66756E63 
 4128      74696F6E 
 4128      2D736563 
 4128      74696F6E 
 4129              	.LASF98:
 4130 011a 745F7072 		.ascii	"t_pressure\000"
 4130      65737375 
 4130      726500
 4131              	.LASF26:
 4132 0125 4D6F6E74 		.ascii	"Month\000"
 4132      6800
 4133              	.LASF7:
 4134 012b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4134      206C6F6E 
 4134      6720756E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 89


 4134      7369676E 
 4134      65642069 
 4135              	.LASF22:
 4136 0142 486F7572 		.ascii	"Hour\000"
 4136      00
 4137              	.LASF135:
 4138 0147 6D6F6465 		.ascii	"modem_state\000"
 4138      6D5F7374 
 4138      61746500 
 4139              	.LASF145:
 4140 0153 616C6172 		.ascii	"alarmMeasure\000"
 4140      6D4D6561 
 4140      73757265 
 4140      00
 4141              	.LASF129:
 4142 0160 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4142      52784275 
 4142      66666572 
 4142      00
 4143              	.LASF153:
 4144 016d 74696D65 		.ascii	"timetoLevelSensor\000"
 4144      746F4C65 
 4144      76656C53 
 4144      656E736F 
 4144      7200
 4145              	.LASF96:
 4146 017f 745F6C65 		.ascii	"t_level_sensor\000"
 4146      76656C5F 
 4146      73656E73 
 4146      6F7200
 4147              	.LASF6:
 4148 018e 6C6F6E67 		.ascii	"long long int\000"
 4148      206C6F6E 
 4148      6720696E 
 4148      7400
 4149              	.LASF109:
 4150 019c 7061636B 		.ascii	"packets\000"
 4150      65747300 
 4151              	.LASF57:
 4152 01a4 65636E6F 		.ascii	"ecno\000"
 4152      00
 4153              	.LASF146:
 4154 01a9 74696D65 		.ascii	"timeToMeasure\000"
 4154      546F4D65 
 4154      61737572 
 4154      6500
 4155              	.LASF60:
 4156 01b7 74696D65 		.ascii	"time_to_network_connect\000"
 4156      5F746F5F 
 4156      6E657477 
 4156      6F726B5F 
 4156      636F6E6E 
 4157              	.LASF148:
 4158 01cf 74696D65 		.ascii	"timeToSync\000"
 4158      546F5379 
 4158      6E6300
 4159              	.LASF34:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 90


 4160 01da 766F6C74 		.ascii	"voltage_solar\000"
 4160      6167655F 
 4160      736F6C61 
 4160      7200
 4161              	.LASF35:
 4162 01e8 766F6C74 		.ascii	"voltage_charge_current\000"
 4162      6167655F 
 4162      63686172 
 4162      67655F63 
 4162      75727265 
 4163              	.LASF127:
 4164 01ff 75706772 		.ascii	"upgrade_status\000"
 4164      6164655F 
 4164      73746174 
 4164      757300
 4165              	.LASF112:
 4166 020e 635F6461 		.ascii	"c_data_count_sent\000"
 4166      74615F63 
 4166      6F756E74 
 4166      5F73656E 
 4166      7400
 4167              	.LASF54:
 4168 0220 6D6F6465 		.ascii	"modem_info_t\000"
 4168      6D5F696E 
 4168      666F5F74 
 4168      00
 4169              	.LASF55:
 4170 022d 72786C65 		.ascii	"rxlev\000"
 4170      7600
 4171              	.LASF4:
 4172 0233 6C6F6E67 		.ascii	"long int\000"
 4172      20696E74 
 4172      00
 4173              	.LASF61:
 4174 023c 74696D65 		.ascii	"time_to_acquire_ip\000"
 4174      5F746F5F 
 4174      61637175 
 4174      6972655F 
 4174      697000
 4175              	.LASF75:
 4176 024f 616C6172 		.ascii	"alarm\000"
 4176      6D00
 4177              	.LASF11:
 4178 0255 75696E74 		.ascii	"uint8\000"
 4178      3800
 4179              	.LASF104:
 4180 025b 635F7472 		.ascii	"c_try_counter\000"
 4180      795F636F 
 4180      756E7465 
 4180      7200
 4181              	.LASF115:
 4182 0269 73656E64 		.ascii	"send_time\000"
 4182      5F74696D 
 4182      6500
 4183              	.LASF151:
 4184 0273 74696D65 		.ascii	"timeToAppLED\000"
 4184      546F4170 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 91


 4184      704C4544 
 4184      00
 4185              	.LASF16:
 4186 0280 696E7433 		.ascii	"int32\000"
 4186      3200
 4187              	.LASF101:
 4188 0286 73796E63 		.ascii	"syncData\000"
 4188      44617461 
 4188      00
 4189              	.LASF110:
 4190 028f 6E657477 		.ascii	"network_time\000"
 4190      6F726B5F 
 4190      74696D65 
 4190      00
 4191              	.LASF13:
 4192 029c 75696E74 		.ascii	"uint32\000"
 4192      333200
 4193              	.LASF52:
 4194 02a3 6D6F6465 		.ascii	"model_id\000"
 4194      6C5F6964 
 4194      00
 4195              	.LASF71:
 4196 02ac 636F756E 		.ascii	"countDownValue\000"
 4196      74446F77 
 4196      6E56616C 
 4196      756500
 4197              	.LASF123:
 4198 02bb 75706772 		.ascii	"upgraded\000"
 4198      61646564 
 4198      00
 4199              	.LASF43:
 4200 02c4 746D5F6D 		.ascii	"tm_mon\000"
 4200      6F6E00
 4201              	.LASF66:
 4202 02cb 64656275 		.ascii	"debug_level\000"
 4202      675F6C65 
 4202      76656C00 
 4203              	.LASF125:
 4204 02d7 706F7274 		.ascii	"port\000"
 4204      00
 4205              	.LASF48:
 4206 02dc 76616C75 		.ascii	"value\000"
 4206      6500
 4207              	.LASF124:
 4208 02e2 686F7374 		.ascii	"host\000"
 4208      00
 4209              	.LASF44:
 4210 02e7 746D5F79 		.ascii	"tm_year\000"
 4210      65617200 
 4211              	.LASF147:
 4212 02ef 616C6172 		.ascii	"alarmSync\000"
 4212      6D53796E 
 4212      6300
 4213              	.LASF8:
 4214 02f9 756E7369 		.ascii	"unsigned int\000"
 4214      676E6564 
 4214      20696E74 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 92


 4214      00
 4215              	.LASF121:
 4216 0306 73657454 		.ascii	"setTime\000"
 4216      696D6500 
 4217              	.LASF50:
 4218 030e 6B65795F 		.ascii	"key_value_t\000"
 4218      76616C75 
 4218      655F7400 
 4219              	.LASF86:
 4220 031a 41796F49 		.ascii	"AyoItsTime\000"
 4220      74735469 
 4220      6D6500
 4221              	.LASF114:
 4222 0325 68747470 		.ascii	"http_chunk\000"
 4222      5F636875 
 4222      6E6B00
 4223              	.LASF120:
 4224 0330 6D5F766F 		.ascii	"m_voltage\000"
 4224      6C746167 
 4224      6500
 4225              	.LASF5:
 4226 033a 6C6F6E67 		.ascii	"long unsigned int\000"
 4226      20756E73 
 4226      69676E65 
 4226      6420696E 
 4226      7400
 4227              	.LASF83:
 4228 034c 7472795F 		.ascii	"try_counter\000"
 4228      636F756E 
 4228      74657200 
 4229              	.LASF105:
 4230 0358 64617461 		.ascii	"data_count_desired\000"
 4230      5F636F75 
 4230      6E745F64 
 4230      65736972 
 4230      656400
 4231              	.LASF33:
 4232 036b 766F6C74 		.ascii	"voltage_battery\000"
 4232      6167655F 
 4232      62617474 
 4232      65727900 
 4233              	.LASF24:
 4234 037b 4461794F 		.ascii	"DayOfMonth\000"
 4234      664D6F6E 
 4234      746800
 4235              	.LASF118:
 4236 0386 6D616B65 		.ascii	"makeMeasurements\000"
 4236      4D656173 
 4236      7572656D 
 4236      656E7473 
 4236      00
 4237              	.LASF134:
 4238 0397 64617461 		.ascii	"data\000"
 4238      00
 4239              	.LASF80:
 4240 039c 65705F70 		.ascii	"ep_port\000"
 4240      6F727400 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 93


 4241              	.LASF47:
 4242 03a4 746D5F69 		.ascii	"tm_isdst\000"
 4242      73647374 
 4242      00
 4243              	.LASF76:
 4244 03ad 6D6F6465 		.ascii	"modem_info\000"
 4244      6D5F696E 
 4244      666F00
 4245              	.LASF79:
 4246 03b8 65705F68 		.ascii	"ep_host\000"
 4246      6F737400 
 4247              	.LASF14:
 4248 03c0 696E7438 		.ascii	"int8\000"
 4248      00
 4249              	.LASF85:
 4250 03c5 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4250      576F726B 
 4250      576F726B 
 4250      576F726B 
 4250      576F726B 
 4251              	.LASF106:
 4252 03de 635F6461 		.ascii	"c_data_count_desired\000"
 4252      74615F63 
 4252      6F756E74 
 4252      5F646573 
 4252      69726564 
 4253              	.LASF99:
 4254 03f3 745F7364 		.ascii	"t_sd_card\000"
 4254      5F636172 
 4254      6400
 4255              	.LASF2:
 4256 03fd 73686F72 		.ascii	"short int\000"
 4256      7420696E 
 4256      7400
 4257              	.LASF150:
 4258 0407 616C6172 		.ascii	"alarmAppLED\000"
 4258      6D417070 
 4258      4C454400 
 4259              	.LASF136:
 4260 0413 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4260      6D5F7374 
 4260      6172745F 
 4260      74696D65 
 4260      5F737461 
 4261              	.LASF78:
 4262 042a 7379735F 		.ascii	"sys_info_t\000"
 4262      696E666F 
 4262      5F7400
 4263              	.LASF70:
 4264 0435 75706461 		.ascii	"updatable_parameters_t\000"
 4264      7461626C 
 4264      655F7061 
 4264      72616D65 
 4264      74657273 
 4265              	.LASF87:
 4266 044c 616C6172 		.ascii	"alarmType\000"
 4266      6D547970 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 94


 4266      6500
 4267              	.LASF132:
 4268 0456 64617461 		.ascii	"dataPointsInStack\000"
 4268      506F696E 
 4268      7473496E 
 4268      53746163 
 4268      6B00
 4269              	.LASF40:
 4270 0468 746D5F6D 		.ascii	"tm_min\000"
 4270      696E00
 4271              	.LASF126:
 4272 046f 726F7574 		.ascii	"route\000"
 4272      6500
 4273              	.LASF88:
 4274 0475 616C6172 		.ascii	"alarmToBeUpdated\000"
 4274      6D546F42 
 4274      65557064 
 4274      61746564 
 4274      00
 4275              	.LASF21:
 4276 0486 73697A65 		.ascii	"sizetype\000"
 4276      74797065 
 4276      00
 4277              	.LASF46:
 4278 048f 746D5F79 		.ascii	"tm_yday\000"
 4278      64617900 
 4279              	.LASF81:
 4280 0497 7379735F 		.ascii	"sys_settings_t\000"
 4280      73657474 
 4280      696E6773 
 4280      5F7400
 4281              	.LASF122:
 4282 04a6 6C6F6361 		.ascii	"localTime\000"
 4282      6C54696D 
 4282      6500
 4283              	.LASF149:
 4284 04b0 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4284      546F5379 
 4284      636E5265 
 4284      6D6F7465 
 4284      50617261 
 4285              	.LASF49:
 4286 04c7 74696D65 		.ascii	"timeStamp\000"
 4286      5374616D 
 4286      7000
 4287              	.LASF28:
 4288 04d1 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4288      54494D45 
 4288      5F444154 
 4288      4500
 4289              	.LASF138:
 4290 04df 75706461 		.ascii	"updatable_parameters\000"
 4290      7461626C 
 4290      655F7061 
 4290      72616D65 
 4290      74657273 
 4291              	.LASF92:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 95


 4292 04f4 43726561 		.ascii	"CreateAlarm\000"
 4292      7465416C 
 4292      61726D00 
 4293              	.LASF113:
 4294 0500 7061636B 		.ascii	"packet\000"
 4294      657400
 4295              	.LASF102:
 4296 0507 735F7273 		.ascii	"s_rsrp\000"
 4296      727000
 4297              	.LASF36:
 4298 050e 766F6C74 		.ascii	"voltage_pressure\000"
 4298      6167655F 
 4298      70726573 
 4298      73757265 
 4298      00
 4299              	.LASF140:
 4300 051f 68747470 		.ascii	"http_request\000"
 4300      5F726571 
 4300      75657374 
 4300      00
 4301              	.LASF17:
 4302 052c 666C6F61 		.ascii	"float\000"
 4302      7400
 4303              	.LASF103:
 4304 0532 735F7273 		.ascii	"s_rscp\000"
 4304      637000
 4305              	.LASF117:
 4306 0539 636F6E66 		.ascii	"configureRemoteParams\000"
 4306      69677572 
 4306      6552656D 
 4306      6F746550 
 4306      6172616D 
 4307              	.LASF154:
 4308 054f 44617461 		.ascii	"Data_fileName\000"
 4308      5F66696C 
 4308      654E616D 
 4308      6500
 4309              	.LASF84:
 4310 055d 6D6F6465 		.ascii	"modem_status\000"
 4310      6D5F7374 
 4310      61747573 
 4310      00
 4311              	.LASF29:
 4312 056a 74657374 		.ascii	"test_name\000"
 4312      5F6E616D 
 4312      6500
 4313              	.LASF27:
 4314 0574 59656172 		.ascii	"Year\000"
 4314      00
 4315              	.LASF69:
 4316 0579 5F426F6F 		.ascii	"_Bool\000"
 4316      6C00
 4317              	.LASF10:
 4318 057f 696E7433 		.ascii	"int32_t\000"
 4318      325F7400 
 4319              	.LASF1:
 4320 0587 756E7369 		.ascii	"unsigned char\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 96


 4320      676E6564 
 4320      20636861 
 4320      7200
 4321              	.LASF144:
 4322 0595 73797374 		.ascii	"system_settings\000"
 4322      656D5F73 
 4322      65747469 
 4322      6E677300 
 4323              	.LASF59:
 4324 05a5 72737270 		.ascii	"rsrp\000"
 4324      00
 4325              	.LASF58:
 4326 05aa 72737271 		.ascii	"rsrq\000"
 4326      00
 4327              	.LASF89:
 4328 05af 52657365 		.ascii	"ResetAlarm\000"
 4328      74416C61 
 4328      726D00
 4329              	.LASF116:
 4330 05ba 735F7365 		.ascii	"s_send_time\000"
 4330      6E645F74 
 4330      696D6500 
 4331              	.LASF65:
 4332 05c6 73796E63 		.ascii	"sync_time\000"
 4332      5F74696D 
 4332      6500
 4333              	.LASF56:
 4334 05d0 72736370 		.ascii	"rscp\000"
 4334      00
 4335              	.LASF23:
 4336 05d5 4461794F 		.ascii	"DayOfWeek\000"
 4336      66576565 
 4336      6B00
 4337              	.LASF32:
 4338 05df 74657374 		.ascii	"test_t\000"
 4338      5F7400
 4339              	.LASF143:
 4340 05e6 73797374 		.ascii	"system_info\000"
 4340      656D5F69 
 4340      6E666F00 
 4341              	.LASF53:
 4342 05f2 696D6569 		.ascii	"imei\000"
 4342      00
 4343              	.LASF31:
 4344 05f7 72656173 		.ascii	"reason\000"
 4344      6F6E00
 4345              	.LASF90:
 4346 05fe 616C6172 		.ascii	"alarmToBeReset\000"
 4346      6D546F42 
 4346      65526573 
 4346      657400
 4347              	.LASF95:
 4348 060d 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4348      6B697479 
 4348      43686563 
 4348      6B596F75 
 4348      7273656C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 97


 4349              	.LASF111:
 4350 0639 64617461 		.ascii	"data_count_sent\000"
 4350      5F636F75 
 4350      6E745F73 
 4350      656E7400 
 4351              	.LASF62:
 4352 0649 6D6F6465 		.ascii	"modem_stats_t\000"
 4352      6D5F7374 
 4352      6174735F 
 4352      7400
 4353              	.LASF37:
 4354 0657 76616C69 		.ascii	"valid\000"
 4354      6400
 4355              	.LASF152:
 4356 065d 616C6172 		.ascii	"alarmLevelSensor\000"
 4356      6D4C6576 
 4356      656C5365 
 4356      6E736F72 
 4356      00
 4357              	.LASF45:
 4358 066e 746D5F77 		.ascii	"tm_wday\000"
 4358      64617900 
 4359              	.LASF68:
 4360 0676 4C657665 		.ascii	"Level_Sensor_freq\000"
 4360      6C5F5365 
 4360      6E736F72 
 4360      5F667265 
 4360      7100
 4361              	.LASF130:
 4362 0688 6C657665 		.ascii	"level_sensor_inbox\000"
 4362      6C5F7365 
 4362      6E736F72 
 4362      5F696E62 
 4362      6F7800
 4363              	.LASF20:
 4364 069b 6C6F6E67 		.ascii	"long double\000"
 4364      20646F75 
 4364      626C6500 
 4365              	.LASF108:
 4366 06a7 6368756E 		.ascii	"chunk\000"
 4366      6B00
 4367              	.LASF119:
 4368 06ad 635F7469 		.ascii	"c_timeStamp\000"
 4368      6D655374 
 4368      616D7000 
 4369              	.LASF19:
 4370 06b9 63686172 		.ascii	"char\000"
 4370      00
 4371              	.LASF137:
 4372 06be 6D6F6465 		.ascii	"modem_stats\000"
 4372      6D5F7374 
 4372      61747300 
 4373              	.LASF142:
 4374 06ca 68747470 		.ascii	"http_route\000"
 4374      5F726F75 
 4374      746500
 4375              	.LASF107:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 98


 4376 06d5 706F7274 		.ascii	"portConfig\000"
 4376      436F6E66 
 4376      696700
 4377              	.LASF9:
 4378 06e0 5F5F696E 		.ascii	"__int32_t\000"
 4378      7433325F 
 4378      7400
 4379              	.LASF82:
 4380 06ea 756E6971 		.ascii	"uniqueId\000"
 4380      75654964 
 4380      00
 4381              	.LASF158:
 4382 06f3 57616B65 		.ascii	"Wakeup_ISR\000"
 4382      75705F49 
 4382      535200
 4383              	.LASF159:
 4384 06fe 4C617942 		.ascii	"LayBack\000"
 4384      61636B00 
 4385              	.LASF3:
 4386 0706 73686F72 		.ascii	"short unsigned int\000"
 4386      7420756E 
 4386      7369676E 
 4386      65642069 
 4386      6E7400
 4387              	.LASF51:
 4388 0719 73696D5F 		.ascii	"sim_id\000"
 4388      696400
 4389              	.LASF42:
 4390 0720 746D5F6D 		.ascii	"tm_mday\000"
 4390      64617900 
 4391              	.LASF93:
 4392 0728 6E657741 		.ascii	"newAlarm\000"
 4392      6C61726D 
 4392      00
 4393              	.LASF39:
 4394 0731 746D5F73 		.ascii	"tm_sec\000"
 4394      656300
 4395              	.LASF30:
 4396 0738 73746174 		.ascii	"status\000"
 4396      757300
 4397              	.LASF133:
 4398 073f 64617461 		.ascii	"dataPointsInStackDesired\000"
 4398      506F696E 
 4398      7473496E 
 4398      53746163 
 4398      6B446573 
 4399              	.LASF67:
 4400 0758 4170705F 		.ascii	"App_LED_freq\000"
 4400      4C45445F 
 4400      66726571 
 4400      00
 4401              	.LASF97:
 4402 0765 745F766F 		.ascii	"t_voltages\000"
 4402      6C746167 
 4402      657300
 4403              	.LASF156:
 4404 0770 6E6F746F 		.ascii	"notoriOS.c\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 99


 4404      72694F53 
 4404      2E6300
 4405              	.LASF141:
 4406 077b 68747470 		.ascii	"http_body\000"
 4406      5F626F64 
 4406      7900
 4407              	.LASF15:
 4408 0785 696E7431 		.ascii	"int16\000"
 4408      3600
 4409              	.LASF73:
 4410 078b 636F756E 		.ascii	"countDownType\000"
 4410      74446F77 
 4410      6E547970 
 4410      6500
 4411              	.LASF72:
 4412 0799 63757272 		.ascii	"currentCountDownValue\000"
 4412      656E7443 
 4412      6F756E74 
 4412      446F776E 
 4412      56616C75 
 4413              	.LASF63:
 4414 07af 73696D5F 		.ascii	"sim_type\000"
 4414      74797065 
 4414      00
 4415              	.LASF25:
 4416 07b8 4461794F 		.ascii	"DayOfYear\000"
 4416      66596561 
 4416      7200
 4417              	.LASF91:
 4418 07c2 416C6172 		.ascii	"AlarmReady\000"
 4418      6D526561 
 4418      647900
 4419              	.LASF94:
 4420 07cd 52656164 		.ascii	"ReadyOrNot\000"
 4420      794F724E 
 4420      6F7400
 4421              	.LASF160:
 4422 07d8 6D61696E 		.ascii	"main\000"
 4422      00
 4423              	.LASF77:
 4424 07dd 63686970 		.ascii	"chip_uniqueId\000"
 4424      5F756E69 
 4424      71756549 
 4424      6400
 4425              	.LASF64:
 4426 07eb 6D656173 		.ascii	"measure_time\000"
 4426      7572655F 
 4426      74696D65 
 4426      00
 4427              	.LASF18:
 4428 07f8 646F7562 		.ascii	"double\000"
 4428      6C6500
 4429              	.LASF139:
 4430 07ff 6170705F 		.ascii	"app_led_inbox\000"
 4430      6C65645F 
 4430      696E626F 
 4430      7800
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccfL9h4B.s 			page 100


 4431              	.LASF38:
 4432 080d 766F6C74 		.ascii	"voltage_t\000"
 4432      6167655F 
 4432      7400
 4433              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
