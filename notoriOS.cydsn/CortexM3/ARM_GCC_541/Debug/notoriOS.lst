ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	valve_enabled,1,1
  24              		.comm	valve_inbox,100,4
  25              		.comm	buffer_overflow,1,1
  26              		.comm	dataPointsInStack,2,2
  27              		.comm	dataPointsInStackDesired,2,2
  28              		.comm	data,6600,4
  29              		.comm	modem_state,1,1
  30              		.comm	modem_start_time_stamp,4,4
  31              		.comm	modem_info,60,4
  32              		.comm	modem_stats,32,4
  33              		.comm	updatable_parameters,9,4
  34              		.syntax unified
  35              		.global _printf_float
  36              		.thumb
  37              		.syntax unified
  38              		.comm	App_LED_enabled,1,1
  39              		.comm	app_led_inbox,100,4
  40              		.comm	http_request,10000,4
  41              		.comm	http_body,10000,4
  42              		.comm	http_route,200,4
  43              		.comm	system_info,28,4
  44              		.comm	system_settings,104,4
  45              		.comm	alarmMeasure,6,4
  46              		.comm	timeToMeasure,1,1
  47              		.comm	alarmSync,6,4
  48              		.comm	timeToSync,1,1
  49              		.comm	timeToSycnRemoteParams,1,1
  50              		.comm	hey,1,1
  51              		.comm	alarmAppLED,6,4
  52              		.comm	timeToAppLED,1,1
  53              		.comm	alarmLevelSensor,6,4
  54              		.comm	timetoLevelSensor,1,1
  55              		.comm	alarmDownstreamLevelSensor,6,4
  56              		.comm	timetoDownstreamLevelSensor,1,1
  57              		.comm	alarmValve,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 2


  58              		.comm	timeToValve,1,1
  59              		.section	.text.Wakeup_ISR,"ax",%progbits
  60              		.align	2
  61              		.global	Wakeup_ISR
  62              		.thumb
  63              		.thumb_func
  64              		.type	Wakeup_ISR, %function
  65              	Wakeup_ISR:
  66              	.LFB64:
  67              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  68              		.loc 1 20 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72 0000 80B5     		push	{r7, lr}
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 7, -8
  75              		.cfi_offset 14, -4
  76 0002 00AF     		add	r7, sp, #0
  77              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  78              		.loc 1 22 0
  79 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  80              		.loc 1 23 0
  81 0008 00BF     		nop
  82 000a 80BD     		pop	{r7, pc}
  83              		.cfi_endproc
  84              	.LFE64:
  85              		.size	Wakeup_ISR, .-Wakeup_ISR
  86              		.global	Data_fileName
  87              		.data
  88              		.align	2
  89              		.type	Data_fileName, %object
  90              		.size	Data_fileName, 30
  91              	Data_fileName:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 3


  92 0000 64617461 		.ascii	"data.txt\000"
  92      2E747874 
  92      00
  93 0009 00000000 		.space	21
  93      00000000 
  93      00000000 
  93      00000000 
  93      00000000 
  94              		.comm	try_counter,1,1
  95              		.section	.rodata
  96              		.align	2
  97              	.LC0:
  98 0000 25582D25 		.ascii	"%X-%X\000"
  98      5800
  99 0006 0000     		.align	2
 100              	.LC1:
 101 0008 6563322D 		.ascii	"ec2-18-222-229-124.us-east-2.compute.amazonaws.com\000"
 101      31382D32 
 101      32322D32 
 101      32392D31 
 101      32342E75 
 102              		.section	.text.ReadyOrNot,"ax",%progbits
 103              		.align	2
 104              		.global	ReadyOrNot
 105              		.thumb
 106              		.thumb_func
 107              		.type	ReadyOrNot, %function
 108              	ReadyOrNot:
 109              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 110              		.loc 1 41 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 24
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 B0B5     		push	{r4, r5, r7, lr}
 115              		.cfi_def_cfa_offset 16
 116              		.cfi_offset 4, -16
 117              		.cfi_offset 5, -12
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 4


 120 0002 88B0     		sub	sp, sp, #32
 121              		.cfi_def_cfa_offset 48
 122 0004 02AF     		add	r7, sp, #8
 123              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 124              		.loc 1 43 0
 125 0006 4C48     		ldr	r0, .L3
 126 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 127              		.loc 1 44 0
 128 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 129              		.loc 1 46 0
 130 0010 FF20     		movs	r0, #255
 131 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 132              		.loc 1 47 0
 133 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 134              		.loc 1 48 0
 135 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 136              		.loc 1 50 0
 137 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 138              		.loc 1 52 0
 139 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 140              		.loc 1 62 0
 141 0026 07F10C03 		add	r3, r7, #12
 142 002a 1846     		mov	r0, r3
 143 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 144              		.loc 1 63 0
 145 0030 FA68     		ldr	r2, [r7, #12]
 146 0032 3B69     		ldr	r3, [r7, #16]
 147 0034 0093     		str	r3, [sp]
 148 0036 1346     		mov	r3, r2
 149 0038 404A     		ldr	r2, .L3+4
 150 003a 1821     		movs	r1, #24
 151 003c 4048     		ldr	r0, .L3+8
 152 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 5


 153              		.loc 1 65 0
 154 0042 404B     		ldr	r3, .L3+12
 155 0044 404A     		ldr	r2, .L3+16
 156 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-ea
 157              		.loc 1 69 0
 158 0048 404A     		ldr	r2, .L3+20
 159 004a 414B     		ldr	r3, .L3+24
 160 004c 1446     		mov	r4, r2
 161 004e 1D46     		mov	r5, r3
 162 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 163 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 164 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 165 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 166 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 167 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 168 005c 2B68     		ldr	r3, [r5]
 169 005e 1A46     		mov	r2, r3	@ movhi
 170 0060 2280     		strh	r2, [r4]	@ movhi
 171 0062 0234     		adds	r4, r4, #2
 172 0064 1B0C     		lsrs	r3, r3, #16
 173 0066 2370     		strb	r3, [r4]
  70:notoriOS.c    ****     
  71:notoriOS.c    ****     // production server
  72:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org"
  73:notoriOS.c    ****     
  74:notoriOS.c    **** 
  75:notoriOS.c    ****     system_settings.ep_port = 5000;
 174              		.loc 1 75 0
 175 0068 384B     		ldr	r3, .L3+20
 176 006a 41F28832 		movw	r2, #5000
 177 006e 5A66     		str	r2, [r3, #100]
  76:notoriOS.c    ****     // Don't need the following for new nodes
  77:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  78:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  79:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  80:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  81:notoriOS.c    ****         
  82:notoriOS.c    ****     
  83:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  84:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 178              		.loc 1 84 0
 179 0070 384B     		ldr	r3, .L3+28
 180 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 181 0074 99B2     		uxth	r1, r3
 182 0076 384C     		ldr	r4, .L3+32
 183 0078 3846     		mov	r0, r7
 184 007a 0723     		movs	r3, #7
 185 007c 0122     		movs	r2, #1
 186 007e FFF7FEFF 		bl	CreateAlarm
 187 0082 2246     		mov	r2, r4
 188 0084 3B46     		mov	r3, r7
 189 0086 1968     		ldr	r1, [r3]	@ unaligned
 190 0088 1160     		str	r1, [r2]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 6


 191 008a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 192 008c 9380     		strh	r3, [r2, #4]	@ unaligned
  85:notoriOS.c    ****     timeToMeasure = 1u;
 193              		.loc 1 85 0
 194 008e 334B     		ldr	r3, .L3+36
 195 0090 0122     		movs	r2, #1
 196 0092 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  87:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 197              		.loc 1 87 0
 198 0094 2F4B     		ldr	r3, .L3+28
 199 0096 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 200 0098 99B2     		uxth	r1, r3
 201 009a 314C     		ldr	r4, .L3+40
 202 009c 3846     		mov	r0, r7
 203 009e 0723     		movs	r3, #7
 204 00a0 0122     		movs	r2, #1
 205 00a2 FFF7FEFF 		bl	CreateAlarm
 206 00a6 2246     		mov	r2, r4
 207 00a8 3B46     		mov	r3, r7
 208 00aa 1968     		ldr	r1, [r3]	@ unaligned
 209 00ac 1160     		str	r1, [r2]	@ unaligned
 210 00ae 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 211 00b0 9380     		strh	r3, [r2, #4]	@ unaligned
  88:notoriOS.c    ****     timeToSync = 1u;
 212              		.loc 1 88 0
 213 00b2 2C4B     		ldr	r3, .L3+44
 214 00b4 0122     		movs	r2, #1
 215 00b6 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 216              		.loc 1 90 0
 217 00b8 2B4B     		ldr	r3, .L3+48
 218 00ba 0022     		movs	r2, #0
 219 00bc 1A70     		strb	r2, [r3]
  91:notoriOS.c    ****     
  92:notoriOS.c    ****     // App Initializations
  93:notoriOS.c    ****     // APP_INTERFACE
  94:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 220              		.loc 1 94 0
 221 00be 254B     		ldr	r3, .L3+28
 222 00c0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 223 00c2 99B2     		uxth	r1, r3
 224 00c4 294C     		ldr	r4, .L3+52
 225 00c6 3846     		mov	r0, r7
 226 00c8 0723     		movs	r3, #7
 227 00ca 0122     		movs	r2, #1
 228 00cc FFF7FEFF 		bl	CreateAlarm
 229 00d0 2246     		mov	r2, r4
 230 00d2 3B46     		mov	r3, r7
 231 00d4 1968     		ldr	r1, [r3]	@ unaligned
 232 00d6 1160     		str	r1, [r2]	@ unaligned
 233 00d8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 234 00da 9380     		strh	r3, [r2, #4]	@ unaligned
  95:notoriOS.c    ****     timeToAppLED = 1u;
 235              		.loc 1 95 0
 236 00dc 244B     		ldr	r3, .L3+56
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 7


 237 00de 0122     		movs	r2, #1
 238 00e0 1A70     		strb	r2, [r3]
  96:notoriOS.c    ****     
  97:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
 239              		.loc 1 97 0
 240 00e2 1C4B     		ldr	r3, .L3+28
 241 00e4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 242 00e6 99B2     		uxth	r1, r3
 243 00e8 224C     		ldr	r4, .L3+60
 244 00ea 3846     		mov	r0, r7
 245 00ec 0723     		movs	r3, #7
 246 00ee 0122     		movs	r2, #1
 247 00f0 FFF7FEFF 		bl	CreateAlarm
 248 00f4 2246     		mov	r2, r4
 249 00f6 3B46     		mov	r3, r7
 250 00f8 1968     		ldr	r1, [r3]	@ unaligned
 251 00fa 1160     		str	r1, [r2]	@ unaligned
 252 00fc 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 253 00fe 9380     		strh	r3, [r2, #4]	@ unaligned
  98:notoriOS.c    ****     timetoLevelSensor = 1u;
 254              		.loc 1 98 0
 255 0100 1D4B     		ldr	r3, .L3+64
 256 0102 0122     		movs	r2, #1
 257 0104 1A70     		strb	r2, [r3]
  99:notoriOS.c    ****     
 100:notoriOS.c    ****     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_Sensor_freq,ALAR
 258              		.loc 1 100 0
 259 0106 134B     		ldr	r3, .L3+28
 260 0108 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 261 010a 99B2     		uxth	r1, r3
 262 010c 1B4C     		ldr	r4, .L3+68
 263 010e 3846     		mov	r0, r7
 264 0110 0723     		movs	r3, #7
 265 0112 0122     		movs	r2, #1
 266 0114 FFF7FEFF 		bl	CreateAlarm
 267 0118 2246     		mov	r2, r4
 268 011a 3B46     		mov	r3, r7
 269 011c 1968     		ldr	r1, [r3]	@ unaligned
 270 011e 1160     		str	r1, [r2]	@ unaligned
 271 0120 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 272 0122 9380     		strh	r3, [r2, #4]	@ unaligned
 101:notoriOS.c    ****     timetoDownstreamLevelSensor = 1u;
 273              		.loc 1 101 0
 274 0124 164B     		ldr	r3, .L3+72
 275 0126 0122     		movs	r2, #1
 276 0128 1A70     		strb	r2, [r3]
 102:notoriOS.c    ****     
 103:notoriOS.c    ****     //alarmValve = CreateAlarm(updatable_parameters.valve_freq, ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 104:notoriOS.c    ****     //timeToValve = 1u;
 105:notoriOS.c    ****     
 106:notoriOS.c    ****     // Initialize the try counter to 0
 107:notoriOS.c    ****     uint8 try_counter = 0;
 277              		.loc 1 107 0
 278 012a 0023     		movs	r3, #0
 279 012c FB75     		strb	r3, [r7, #23]
 108:notoriOS.c    **** }
 280              		.loc 1 108 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 8


 281 012e 00BF     		nop
 282 0130 1837     		adds	r7, r7, #24
 283              		.cfi_def_cfa_offset 16
 284 0132 BD46     		mov	sp, r7
 285              		.cfi_def_cfa_register 13
 286              		@ sp needed
 287 0134 B0BD     		pop	{r4, r5, r7, pc}
 288              	.L4:
 289 0136 00BF     		.align	2
 290              	.L3:
 291 0138 00000000 		.word	Wakeup_ISR
 292 013c 00000000 		.word	.LC0
 293 0140 04000000 		.word	system_info+4
 294 0144 00000000 		.word	system_info
 295 0148 00000000 		.word	modem_info
 296 014c 00000000 		.word	system_settings
 297 0150 08000000 		.word	.LC1
 298 0154 00000000 		.word	updatable_parameters
 299 0158 00000000 		.word	alarmMeasure
 300 015c 00000000 		.word	timeToMeasure
 301 0160 00000000 		.word	alarmSync
 302 0164 00000000 		.word	timeToSync
 303 0168 00000000 		.word	timeToSycnRemoteParams
 304 016c 00000000 		.word	alarmAppLED
 305 0170 00000000 		.word	timeToAppLED
 306 0174 00000000 		.word	alarmLevelSensor
 307 0178 00000000 		.word	timetoLevelSensor
 308 017c 00000000 		.word	alarmDownstreamLevelSensor
 309 0180 00000000 		.word	timetoDownstreamLevelSensor
 310              		.cfi_endproc
 311              	.LFE65:
 312              		.size	ReadyOrNot, .-ReadyOrNot
 313              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 314              		.align	2
 315              		.global	WorkWorkWorkWorkWorkWork
 316              		.thumb
 317              		.thumb_func
 318              		.type	WorkWorkWorkWorkWorkWork, %function
 319              	WorkWorkWorkWorkWorkWork:
 320              	.LFB66:
 109:notoriOS.c    **** 
 110:notoriOS.c    **** 
 111:notoriOS.c    **** // ==============================================
 112:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 113:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 114:notoriOS.c    **** //
 115:notoriOS.c    **** // Prorcesses core tasks
 116:notoriOS.c    **** // ==============================================
 117:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 118:notoriOS.c    **** {
 321              		.loc 1 118 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 8
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 0000 80B5     		push	{r7, lr}
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 9


 328              		.cfi_offset 14, -4
 329 0002 82B0     		sub	sp, sp, #8
 330              		.cfi_def_cfa_offset 16
 331 0004 00AF     		add	r7, sp, #0
 332              		.cfi_def_cfa_register 7
 119:notoriOS.c    ****     
 120:notoriOS.c    ****     
 121:notoriOS.c    ****     
 122:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 123:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 124:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 125:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 126:notoriOS.c    ****     
 127:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 128:notoriOS.c    ****     if(timeToSycnRemoteParams){
 333              		.loc 1 128 0
 334 0006 304B     		ldr	r3, .L14
 335 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 336 000a 002B     		cmp	r3, #0
 337 000c 06D0     		beq	.L6
 129:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 338              		.loc 1 129 0
 339 000e FFF7FEFF 		bl	configureRemoteParams
 340 0012 0346     		mov	r3, r0
 341 0014 1A46     		mov	r2, r3
 342 0016 2C4B     		ldr	r3, .L14
 343 0018 1A70     		strb	r2, [r3]
 344 001a 42E0     		b	.L7
 345              	.L6:
 130:notoriOS.c    ****     }
 131:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 132:notoriOS.c    ****     else if(timeToMeasure){
 346              		.loc 1 132 0
 347 001c 2B4B     		ldr	r3, .L14+4
 348 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 0020 002B     		cmp	r3, #0
 350 0022 06D0     		beq	.L8
 133:notoriOS.c    ****         // on custom nodes makeMeasurements will just be battery voltages
 134:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 351              		.loc 1 134 0
 352 0024 FFF7FEFF 		bl	makeMeasurements
 353 0028 0346     		mov	r3, r0
 354 002a 1A46     		mov	r2, r3
 355 002c 274B     		ldr	r3, .L14+4
 356 002e 1A70     		strb	r2, [r3]
 357 0030 37E0     		b	.L7
 358              	.L8:
 135:notoriOS.c    ****     }  
 136:notoriOS.c    ****     // custom nodes
 137:notoriOS.c    ****     // APP_INTERFACE
 138:notoriOS.c    ****     else if(updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 359              		.loc 1 138 0
 360 0032 274B     		ldr	r3, .L14+8
 361 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 362 0036 042B     		cmp	r3, #4
 363 0038 33D1     		bne	.L7
 139:notoriOS.c    ****         if(App_LED_enabled && timeToAppLED){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 10


 364              		.loc 1 139 0
 365 003a 264B     		ldr	r3, .L14+12
 366 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 367 003e 002B     		cmp	r3, #0
 368 0040 09D0     		beq	.L9
 369              		.loc 1 139 0 is_stmt 0 discriminator 1
 370 0042 254B     		ldr	r3, .L14+16
 371 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0046 002B     		cmp	r3, #0
 373 0048 05D0     		beq	.L9
 140:notoriOS.c    ****             timeToAppLED = App_LED();
 374              		.loc 1 140 0 is_stmt 1
 375 004a FFF7FEFF 		bl	App_LED
 376 004e 0346     		mov	r3, r0
 377 0050 1A46     		mov	r2, r3
 378 0052 214B     		ldr	r3, .L14+16
 379 0054 1A70     		strb	r2, [r3]
 380              	.L9:
 141:notoriOS.c    ****         }
 142:notoriOS.c    ****         if(level_sensor_enabled && timetoLevelSensor){
 381              		.loc 1 142 0
 382 0056 214B     		ldr	r3, .L14+20
 383 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 384 005a 002B     		cmp	r3, #0
 385 005c 09D0     		beq	.L10
 386              		.loc 1 142 0 is_stmt 0 discriminator 1
 387 005e 204B     		ldr	r3, .L14+24
 388 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 389 0062 002B     		cmp	r3, #0
 390 0064 05D0     		beq	.L10
 143:notoriOS.c    ****             timetoLevelSensor = level_sensor();
 391              		.loc 1 143 0 is_stmt 1
 392 0066 FFF7FEFF 		bl	level_sensor
 393 006a 0346     		mov	r3, r0
 394 006c 1A46     		mov	r2, r3
 395 006e 1C4B     		ldr	r3, .L14+24
 396 0070 1A70     		strb	r2, [r3]
 397              	.L10:
 144:notoriOS.c    ****         }
 145:notoriOS.c    ****         if(downstream_level_sensor_enabled && timetoDownstreamLevelSensor){
 398              		.loc 1 145 0
 399 0072 1C4B     		ldr	r3, .L14+28
 400 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 401 0076 002B     		cmp	r3, #0
 402 0078 09D0     		beq	.L11
 403              		.loc 1 145 0 is_stmt 0 discriminator 1
 404 007a 1B4B     		ldr	r3, .L14+32
 405 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 406 007e 002B     		cmp	r3, #0
 407 0080 05D0     		beq	.L11
 146:notoriOS.c    ****             timetoDownstreamLevelSensor = downstream_level_sensor();
 408              		.loc 1 146 0 is_stmt 1
 409 0082 FFF7FEFF 		bl	downstream_level_sensor
 410 0086 0346     		mov	r3, r0
 411 0088 1A46     		mov	r2, r3
 412 008a 174B     		ldr	r3, .L14+32
 413 008c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 11


 414              	.L11:
 147:notoriOS.c    ****         }
 148:notoriOS.c    ****         if(valve_enabled){
 415              		.loc 1 148 0
 416 008e 174B     		ldr	r3, .L14+36
 417 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 418 0092 002B     		cmp	r3, #0
 419 0094 05D0     		beq	.L7
 149:notoriOS.c    ****             valve_enabled = App_Valve();
 420              		.loc 1 149 0
 421 0096 FFF7FEFF 		bl	App_Valve
 422 009a 0346     		mov	r3, r0
 423 009c 1A46     		mov	r2, r3
 424 009e 134B     		ldr	r3, .L14+36
 425 00a0 1A70     		strb	r2, [r3]
 426              	.L7:
 150:notoriOS.c    ****         }
 151:notoriOS.c    ****         // add other custom apps below
 152:notoriOS.c    ****     }
 153:notoriOS.c    ****     if(timeToSync){
 427              		.loc 1 153 0
 428 00a2 134B     		ldr	r3, .L14+40
 429 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 430 00a6 002B     		cmp	r3, #0
 431 00a8 05D0     		beq	.L12
 154:notoriOS.c    ****         timeToSync = syncData();
 432              		.loc 1 154 0
 433 00aa FFF7FEFF 		bl	syncData
 434 00ae 0346     		mov	r3, r0
 435 00b0 1A46     		mov	r2, r3
 436 00b2 0F4B     		ldr	r3, .L14+40
 437 00b4 1A70     		strb	r2, [r3]
 438              	.L12:
 155:notoriOS.c    ****     } 
 156:notoriOS.c    ****     
 157:notoriOS.c    **** 
 158:notoriOS.c    ****     
 159:notoriOS.c    ****     // Print the countdown to the next alarm
 160:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 161:notoriOS.c    ****     
 162:notoriOS.c    ****     
 163:notoriOS.c    ****     // Check modem state machine on every loop
 164:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 439              		.loc 1 164 0
 440 00b6 FFF7FEFF 		bl	modem_process_tasks
 441 00ba 0346     		mov	r3, r0
 442 00bc FB71     		strb	r3, [r7, #7]
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     return 0u +  modem_status;  
 443              		.loc 1 166 0
 444 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 167:notoriOS.c    **** }
 445              		.loc 1 167 0
 446 00c0 1846     		mov	r0, r3
 447 00c2 0837     		adds	r7, r7, #8
 448              		.cfi_def_cfa_offset 8
 449 00c4 BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 12


 450              		.cfi_def_cfa_register 13
 451              		@ sp needed
 452 00c6 80BD     		pop	{r7, pc}
 453              	.L15:
 454              		.align	2
 455              	.L14:
 456 00c8 00000000 		.word	timeToSycnRemoteParams
 457 00cc 00000000 		.word	timeToMeasure
 458 00d0 00000000 		.word	updatable_parameters
 459 00d4 00000000 		.word	App_LED_enabled
 460 00d8 00000000 		.word	timeToAppLED
 461 00dc 00000000 		.word	level_sensor_enabled
 462 00e0 00000000 		.word	timetoLevelSensor
 463 00e4 00000000 		.word	downstream_level_sensor_enabled
 464 00e8 00000000 		.word	timetoDownstreamLevelSensor
 465 00ec 00000000 		.word	valve_enabled
 466 00f0 00000000 		.word	timeToSync
 467              		.cfi_endproc
 468              	.LFE66:
 469              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 470              		.section	.text.LayBack,"ax",%progbits
 471              		.align	2
 472              		.global	LayBack
 473              		.thumb
 474              		.thumb_func
 475              		.type	LayBack, %function
 476              	LayBack:
 477              	.LFB67:
 168:notoriOS.c    **** 
 169:notoriOS.c    **** 
 170:notoriOS.c    **** 
 171:notoriOS.c    **** 
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 176:notoriOS.c    **** //      - Snoop Dogg (1993)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 179:notoriOS.c    **** // ==============================================
 180:notoriOS.c    **** void LayBack()
 181:notoriOS.c    **** {
 478              		.loc 1 181 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 182:notoriOS.c    ****   
 183:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 488              		.loc 1 183 0
 489 0004 FFF7FEFF 		bl	modem_sleep
 184:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 13


 185:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 186:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 490              		.loc 1 186 0
 491 0008 FFF7FEFF 		bl	debug_sleep
 187:notoriOS.c    ****     
 188:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 492              		.loc 1 188 0
 493 000c FFF7FEFF 		bl	CyPmSaveClocks
 189:notoriOS.c    ****     
 190:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 191:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 192:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 193:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 194:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 195:notoriOS.c    ****     //CyPmHibernate();
 196:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 197:notoriOS.c    **** 
 198:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 494              		.loc 1 198 0
 495 0010 4FF40061 		mov	r1, #2048
 496 0014 0020     		movs	r0, #0
 497 0016 FFF7FEFF 		bl	CyPmSleep
 199:notoriOS.c    **** 
 200:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 498              		.loc 1 200 0
 499 001a FFF7FEFF 		bl	CyPmRestoreClocks
 201:notoriOS.c    **** 
 202:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 500              		.loc 1 202 0
 501 001e FFF7FEFF 		bl	debug_wakeup
 203:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 502              		.loc 1 203 0
 503 0022 FFF7FEFF 		bl	modem_wakeup
 204:notoriOS.c    **** 
 205:notoriOS.c    **** }
 504              		.loc 1 205 0
 505 0026 00BF     		nop
 506 0028 80BD     		pop	{r7, pc}
 507              		.cfi_endproc
 508              	.LFE67:
 509              		.size	LayBack, .-LayBack
 510 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 511              		.align	2
 512              		.global	AyoItsTime
 513              		.thumb
 514              		.thumb_func
 515              		.type	AyoItsTime, %function
 516              	AyoItsTime:
 517              	.LFB68:
 206:notoriOS.c    **** 
 207:notoriOS.c    **** 
 208:notoriOS.c    **** // ==============================================
 209:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 210:notoriOS.c    **** //      - NAS (1994)
 211:notoriOS.c    **** //
 212:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 213:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 14


 214:notoriOS.c    **** // It will add tasks to the work queue,
 215:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 216:notoriOS.c    **** // ==============================================
 217:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 218:notoriOS.c    **** {
 518              		.loc 1 218 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 82B0     		sub	sp, sp, #8
 527              		.cfi_def_cfa_offset 16
 528 0004 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 530 0006 0346     		mov	r3, r0
 531 0008 FB71     		strb	r3, [r7, #7]
 219:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 220:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 532              		.loc 1 220 0
 533 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 534 000c 1946     		mov	r1, r3
 535 000e 1C48     		ldr	r0, .L24
 536 0010 FFF7FEFF 		bl	AlarmReady
 537 0014 0346     		mov	r3, r0
 538 0016 002B     		cmp	r3, #0
 539 0018 02D0     		beq	.L18
 221:notoriOS.c    ****     {
 222:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 223:notoriOS.c    ****         timeToMeasure = 1u;
 540              		.loc 1 223 0
 541 001a 1A4B     		ldr	r3, .L24+4
 542 001c 0122     		movs	r2, #1
 543 001e 1A70     		strb	r2, [r3]
 544              	.L18:
 224:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 225:notoriOS.c    ****         
 226:notoriOS.c    ****     }
 227:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 545              		.loc 1 227 0
 546 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 547 0022 1946     		mov	r1, r3
 548 0024 1848     		ldr	r0, .L24+8
 549 0026 FFF7FEFF 		bl	AlarmReady
 550 002a 0346     		mov	r3, r0
 551 002c 002B     		cmp	r3, #0
 552 002e 02D0     		beq	.L19
 228:notoriOS.c    ****     {
 229:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 230:notoriOS.c    ****         timeToSync = 1u;
 553              		.loc 1 230 0
 554 0030 164B     		ldr	r3, .L24+12
 555 0032 0122     		movs	r2, #1
 556 0034 1A70     		strb	r2, [r3]
 557              	.L19:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 15


 231:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 232:notoriOS.c    ****     }
 233:notoriOS.c    ****     
 234:notoriOS.c    ****     // APP_INTERFACE
 235:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 558              		.loc 1 235 0
 559 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 560 0038 1946     		mov	r1, r3
 561 003a 1548     		ldr	r0, .L24+16
 562 003c FFF7FEFF 		bl	AlarmReady
 563 0040 0346     		mov	r3, r0
 564 0042 002B     		cmp	r3, #0
 565 0044 02D0     		beq	.L20
 236:notoriOS.c    ****     {
 237:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 238:notoriOS.c    ****         timeToAppLED = 1u;
 566              		.loc 1 238 0
 567 0046 134B     		ldr	r3, .L24+20
 568 0048 0122     		movs	r2, #1
 569 004a 1A70     		strb	r2, [r3]
 570              	.L20:
 239:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 240:notoriOS.c    ****     }
 241:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 571              		.loc 1 241 0
 572 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 573 004e 1946     		mov	r1, r3
 574 0050 1148     		ldr	r0, .L24+24
 575 0052 FFF7FEFF 		bl	AlarmReady
 576 0056 0346     		mov	r3, r0
 577 0058 002B     		cmp	r3, #0
 578 005a 02D0     		beq	.L21
 242:notoriOS.c    ****         timetoLevelSensor = 1u;
 579              		.loc 1 242 0
 580 005c 0F4B     		ldr	r3, .L24+28
 581 005e 0122     		movs	r2, #1
 582 0060 1A70     		strb	r2, [r3]
 583              	.L21:
 243:notoriOS.c    ****     }
 244:notoriOS.c    ****     if(AlarmReady(&alarmDownstreamLevelSensor, alarmType)){
 584              		.loc 1 244 0
 585 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 586 0064 1946     		mov	r1, r3
 587 0066 0E48     		ldr	r0, .L24+32
 588 0068 FFF7FEFF 		bl	AlarmReady
 589 006c 0346     		mov	r3, r0
 590 006e 002B     		cmp	r3, #0
 591 0070 02D0     		beq	.L23
 245:notoriOS.c    ****         timetoDownstreamLevelSensor = 1u;
 592              		.loc 1 245 0
 593 0072 0C4B     		ldr	r3, .L24+36
 594 0074 0122     		movs	r2, #1
 595 0076 1A70     		strb	r2, [r3]
 596              	.L23:
 246:notoriOS.c    ****     }
 247:notoriOS.c    ****     /*
 248:notoriOS.c    ****     if(AlarmReady(&alarmValve, alarmType)){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 16


 249:notoriOS.c    ****         timeToValve = 1u;
 250:notoriOS.c    ****     }
 251:notoriOS.c    ****     */
 252:notoriOS.c    **** }
 597              		.loc 1 252 0
 598 0078 00BF     		nop
 599 007a 0837     		adds	r7, r7, #8
 600              		.cfi_def_cfa_offset 8
 601 007c BD46     		mov	sp, r7
 602              		.cfi_def_cfa_register 13
 603              		@ sp needed
 604 007e 80BD     		pop	{r7, pc}
 605              	.L25:
 606              		.align	2
 607              	.L24:
 608 0080 00000000 		.word	alarmMeasure
 609 0084 00000000 		.word	timeToMeasure
 610 0088 00000000 		.word	alarmSync
 611 008c 00000000 		.word	timeToSync
 612 0090 00000000 		.word	alarmAppLED
 613 0094 00000000 		.word	timeToAppLED
 614 0098 00000000 		.word	alarmLevelSensor
 615 009c 00000000 		.word	timetoLevelSensor
 616 00a0 00000000 		.word	alarmDownstreamLevelSensor
 617 00a4 00000000 		.word	timetoDownstreamLevelSensor
 618              		.cfi_endproc
 619              	.LFE68:
 620              		.size	AyoItsTime, .-AyoItsTime
 621              		.section	.text.AlarmReady,"ax",%progbits
 622              		.align	2
 623              		.global	AlarmReady
 624              		.thumb
 625              		.thumb_func
 626              		.type	AlarmReady, %function
 627              	AlarmReady:
 628              	.LFB69:
 253:notoriOS.c    **** 
 254:notoriOS.c    **** 
 255:notoriOS.c    **** // ==============================================
 256:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 257:notoriOS.c    **** // ==============================================
 258:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 259:notoriOS.c    **** {
 629              		.loc 1 259 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 8
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633 0000 80B5     		push	{r7, lr}
 634              		.cfi_def_cfa_offset 8
 635              		.cfi_offset 7, -8
 636              		.cfi_offset 14, -4
 637 0002 82B0     		sub	sp, sp, #8
 638              		.cfi_def_cfa_offset 16
 639 0004 00AF     		add	r7, sp, #0
 640              		.cfi_def_cfa_register 7
 641 0006 7860     		str	r0, [r7, #4]
 642 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 17


 643 000a FB70     		strb	r3, [r7, #3]
 260:notoriOS.c    ****     // if the countDownType matches the alarmType
 261:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 644              		.loc 1 261 0
 645 000c 7B68     		ldr	r3, [r7, #4]
 646 000e 1B79     		ldrb	r3, [r3, #4]
 647 0010 DBB2     		uxtb	r3, r3
 648 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 649 0014 9A42     		cmp	r2, r3
 650 0016 12D1     		bne	.L27
 262:notoriOS.c    ****        
 263:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 264:notoriOS.c    ****         // Decrement the count down value by 1
 265:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 651              		.loc 1 265 0
 652 0018 7B68     		ldr	r3, [r7, #4]
 653 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 654 001c 1BB2     		sxth	r3, r3
 655 001e 9BB2     		uxth	r3, r3
 656 0020 013B     		subs	r3, r3, #1
 657 0022 9BB2     		uxth	r3, r3
 658 0024 1AB2     		sxth	r2, r3
 659 0026 7B68     		ldr	r3, [r7, #4]
 660 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 266:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 267:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 661              		.loc 1 267 0
 662 002a 7B68     		ldr	r3, [r7, #4]
 663 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 664 002e 1BB2     		sxth	r3, r3
 665 0030 002B     		cmp	r3, #0
 666 0032 04DC     		bgt	.L27
 268:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 667              		.loc 1 268 0
 668 0034 7868     		ldr	r0, [r7, #4]
 669 0036 FFF7FEFF 		bl	ResetAlarm
 269:notoriOS.c    ****             return 1u;
 670              		.loc 1 269 0
 671 003a 0123     		movs	r3, #1
 672 003c 00E0     		b	.L28
 673              	.L27:
 270:notoriOS.c    ****         } 
 271:notoriOS.c    ****     }
 272:notoriOS.c    ****     
 273:notoriOS.c    ****     return 0u; // Otherwise return 0
 674              		.loc 1 273 0
 675 003e 0023     		movs	r3, #0
 676              	.L28:
 274:notoriOS.c    **** }
 677              		.loc 1 274 0
 678 0040 1846     		mov	r0, r3
 679 0042 0837     		adds	r7, r7, #8
 680              		.cfi_def_cfa_offset 8
 681 0044 BD46     		mov	sp, r7
 682              		.cfi_def_cfa_register 13
 683              		@ sp needed
 684 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 18


 685              		.cfi_endproc
 686              	.LFE69:
 687              		.size	AlarmReady, .-AlarmReady
 688              		.section	.text.ResetAlarm,"ax",%progbits
 689              		.align	2
 690              		.global	ResetAlarm
 691              		.thumb
 692              		.thumb_func
 693              		.type	ResetAlarm, %function
 694              	ResetAlarm:
 695              	.LFB70:
 275:notoriOS.c    **** 
 276:notoriOS.c    **** // ==============================================
 277:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 278:notoriOS.c    **** // ==============================================
 279:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 280:notoriOS.c    **** {
 696              		.loc 1 280 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 8
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701 0000 80B4     		push	{r7}
 702              		.cfi_def_cfa_offset 4
 703              		.cfi_offset 7, -4
 704 0002 83B0     		sub	sp, sp, #12
 705              		.cfi_def_cfa_offset 16
 706 0004 00AF     		add	r7, sp, #0
 707              		.cfi_def_cfa_register 7
 708 0006 7860     		str	r0, [r7, #4]
 281:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 282:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 709              		.loc 1 282 0
 710 0008 7B68     		ldr	r3, [r7, #4]
 711 000a 1B88     		ldrh	r3, [r3]	@ movhi
 712 000c 9BB2     		uxth	r3, r3
 713 000e 1AB2     		sxth	r2, r3
 714 0010 7B68     		ldr	r3, [r7, #4]
 715 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 283:notoriOS.c    **** }
 716              		.loc 1 283 0
 717 0014 00BF     		nop
 718 0016 0C37     		adds	r7, r7, #12
 719              		.cfi_def_cfa_offset 4
 720 0018 BD46     		mov	sp, r7
 721              		.cfi_def_cfa_register 13
 722              		@ sp needed
 723 001a 80BC     		pop	{r7}
 724              		.cfi_restore 7
 725              		.cfi_def_cfa_offset 0
 726 001c 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE70:
 729              		.size	ResetAlarm, .-ResetAlarm
 730 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 731              		.align	2
 732              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 19


 733              		.thumb
 734              		.thumb_func
 735              		.type	CreateAlarm, %function
 736              	CreateAlarm:
 737              	.LFB71:
 284:notoriOS.c    **** 
 285:notoriOS.c    **** // ==============================================
 286:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 287:notoriOS.c    **** // ==============================================
 288:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 289:notoriOS.c    **** {
 738              		.loc 1 289 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 16
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743 0000 80B4     		push	{r7}
 744              		.cfi_def_cfa_offset 4
 745              		.cfi_offset 7, -4
 746 0002 85B0     		sub	sp, sp, #20
 747              		.cfi_def_cfa_offset 24
 748 0004 00AF     		add	r7, sp, #0
 749              		.cfi_def_cfa_register 7
 750 0006 7860     		str	r0, [r7, #4]
 751 0008 0846     		mov	r0, r1
 752 000a 1146     		mov	r1, r2
 753 000c 1A46     		mov	r2, r3
 754 000e 0346     		mov	r3, r0	@ movhi
 755 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 756 0012 0B46     		mov	r3, r1
 757 0014 7B70     		strb	r3, [r7, #1]
 758 0016 1346     		mov	r3, r2
 759 0018 3B70     		strb	r3, [r7]
 290:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 291:notoriOS.c    ****     alarm newAlarm;
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 294:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 760              		.loc 1 294 0
 761 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 762 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 295:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 763              		.loc 1 295 0
 764 001e 7B78     		ldrb	r3, [r7, #1]
 765 0020 3B73     		strb	r3, [r7, #12]
 296:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 766              		.loc 1 296 0
 767 0022 3B78     		ldrb	r3, [r7]
 768 0024 7B73     		strb	r3, [r7, #13]
 297:notoriOS.c    ****     
 298:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 299:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 300:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 769              		.loc 1 300 0
 770 0026 B7F90230 		ldrsh	r3, [r7, #2]
 771 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 301:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 20


 302:notoriOS.c    ****     return newAlarm;
 772              		.loc 1 302 0
 773 002c 7B68     		ldr	r3, [r7, #4]
 774 002e 1A46     		mov	r2, r3
 775 0030 07F10803 		add	r3, r7, #8
 776 0034 1868     		ldr	r0, [r3]	@ unaligned
 777 0036 1060     		str	r0, [r2]	@ unaligned
 778 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 779 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 303:notoriOS.c    ****     
 304:notoriOS.c    **** }
 780              		.loc 1 304 0
 781 003c 7868     		ldr	r0, [r7, #4]
 782 003e 1437     		adds	r7, r7, #20
 783              		.cfi_def_cfa_offset 4
 784 0040 BD46     		mov	sp, r7
 785              		.cfi_def_cfa_register 13
 786              		@ sp needed
 787 0042 80BC     		pop	{r7}
 788              		.cfi_restore 7
 789              		.cfi_def_cfa_offset 0
 790 0044 7047     		bx	lr
 791              		.cfi_endproc
 792              	.LFE71:
 793              		.size	CreateAlarm, .-CreateAlarm
 794 0046 00BF     		.section	.rodata
 795 003b 00       		.align	2
 796              	.LC2:
 797 003c 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 797      2D2D2D2D 
 797      2D2D2D2D 
 797      2D424547 
 797      494E2054 
 798 0066 0000     		.align	2
 799              	.LC3:
 800 0068 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 800      3D25732C 
 800      2053494D 
 800      49443D25 
 800      732C2044 
 801 0087 00       		.align	2
 802              	.LC4:
 803 0088 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 803      2D2D2D2D 
 803      2D2D2D2D 
 803      2D2D2D45 
 803      4E442054 
 804 00b1 00       		.ascii	"\000"
 805              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 806              		.align	2
 807              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 808              		.thumb
 809              		.thumb_func
 810              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 811              	ChickityCheckYourselfBeforeYouWreckYourself:
 812              	.LFB72:
 305:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 21


 306:notoriOS.c    **** // ==============================================
 307:notoriOS.c    **** // Dropping bombs on your moms
 308:notoriOS.c    **** //      - Ice Cube (1992)
 309:notoriOS.c    **** //
 310:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 311:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 312:notoriOS.c    **** // ==============================================
 313:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 813              		.loc 1 313 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 2720
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817 0000 90B5     		push	{r4, r7, lr}
 818              		.cfi_def_cfa_offset 12
 819              		.cfi_offset 4, -12
 820              		.cfi_offset 7, -8
 821              		.cfi_offset 14, -4
 822 0002 ADF61C4D 		subw	sp, sp, #3100
 823              		.cfi_def_cfa_offset 3112
 824 0006 5EAF     		add	r7, sp, #376
 825              		.cfi_def_cfa 7, 2736
 314:notoriOS.c    **** 
 315:notoriOS.c    ****     //test_t t_influx = influx_test();
 316:notoriOS.c    ****     //printTestStatus(t_influx);
 317:notoriOS.c    ****     
 318:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 826              		.loc 1 318 0
 827 0008 4B49     		ldr	r1, .L33
 828 000a 0320     		movs	r0, #3
 829 000c FFF7FEFF 		bl	printNotif
 319:notoriOS.c    ****     
 320:notoriOS.c    ****     // Test level sensor
 321:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 830              		.loc 1 321 0
 831 0010 07F61C13 		addw	r3, r7, #2332
 832 0014 1846     		mov	r0, r3
 833 0016 FFF7FEFF 		bl	level_sensor_test
 322:notoriOS.c    ****     printTestStatus(t_level_sensor);
 834              		.loc 1 322 0
 835 001a 07F61C14 		addw	r4, r7, #2332
 836 001e 6846     		mov	r0, sp
 837 0020 04F11003 		add	r3, r4, #16
 838 0024 40F27112 		movw	r2, #369
 839 0028 1946     		mov	r1, r3
 840 002a FFF7FEFF 		bl	memcpy
 841 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 842 0032 FFF7FEFF 		bl	printTestStatus
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     // Test downstream level sensor
 325:notoriOS.c    ****     test_t t_down_level = downstream_level_sensor_test();
 843              		.loc 1 325 0
 844 0036 07F5F363 		add	r3, r7, #1944
 845 003a 1846     		mov	r0, r3
 846 003c FFF7FEFF 		bl	downstream_level_sensor_test
 326:notoriOS.c    ****     printTestStatus(t_down_level);
 847              		.loc 1 326 0
 848 0040 07F5F364 		add	r4, r7, #1944
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 22


 849 0044 6846     		mov	r0, sp
 850 0046 04F11003 		add	r3, r4, #16
 851 004a 40F27112 		movw	r2, #369
 852 004e 1946     		mov	r1, r3
 853 0050 FFF7FEFF 		bl	memcpy
 854 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 855 0058 FFF7FEFF 		bl	printTestStatus
 327:notoriOS.c    ****     
 328:notoriOS.c    ****     // Test valve
 329:notoriOS.c    ****     test_t t_valve = valve_test();
 856              		.loc 1 329 0
 857 005c 07F21463 		addw	r3, r7, #1556
 858 0060 1846     		mov	r0, r3
 859 0062 FFF7FEFF 		bl	valve_test
 330:notoriOS.c    ****     printTestStatus(t_valve);
 860              		.loc 1 330 0
 861 0066 07F21464 		addw	r4, r7, #1556
 862 006a 6846     		mov	r0, sp
 863 006c 04F11003 		add	r3, r4, #16
 864 0070 40F27112 		movw	r2, #369
 865 0074 1946     		mov	r1, r3
 866 0076 FFF7FEFF 		bl	memcpy
 867 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 868 007e FFF7FEFF 		bl	printTestStatus
 331:notoriOS.c    ****     
 332:notoriOS.c    ****     // Test voltages
 333:notoriOS.c    ****     test_t t_voltages = voltages_test();
 869              		.loc 1 333 0
 870 0082 07F59263 		add	r3, r7, #1168
 871 0086 1846     		mov	r0, r3
 872 0088 FFF7FEFF 		bl	voltages_test
 334:notoriOS.c    ****     printTestStatus(t_voltages);
 873              		.loc 1 334 0
 874 008c 07F59264 		add	r4, r7, #1168
 875 0090 6846     		mov	r0, sp
 876 0092 04F11003 		add	r3, r4, #16
 877 0096 40F27112 		movw	r2, #369
 878 009a 1946     		mov	r1, r3
 879 009c FFF7FEFF 		bl	memcpy
 880 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 881 00a4 FFF7FEFF 		bl	printTestStatus
 335:notoriOS.c    ****  
 336:notoriOS.c    ****     // Test voltages
 337:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 882              		.loc 1 337 0
 883 00a8 07F54373 		add	r3, r7, #780
 884 00ac 1846     		mov	r0, r3
 885 00ae FFF7FEFF 		bl	pressure_sensor_test
 338:notoriOS.c    ****     printTestStatus(t_pressure);
 886              		.loc 1 338 0
 887 00b2 07F54374 		add	r4, r7, #780
 888 00b6 6846     		mov	r0, sp
 889 00b8 04F11003 		add	r3, r4, #16
 890 00bc 40F27112 		movw	r2, #369
 891 00c0 1946     		mov	r1, r3
 892 00c2 FFF7FEFF 		bl	memcpy
 893 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 23


 894 00ca FFF7FEFF 		bl	printTestStatus
 339:notoriOS.c    ****     
 340:notoriOS.c    ****     // Test SD card
 341:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 895              		.loc 1 341 0
 896 00ce 07F5C473 		add	r3, r7, #392
 897 00d2 1846     		mov	r0, r3
 898 00d4 FFF7FEFF 		bl	SD_card_test
 342:notoriOS.c    ****     printTestStatus(t_sd_card);
 899              		.loc 1 342 0
 900 00d8 07F5C474 		add	r4, r7, #392
 901 00dc 6846     		mov	r0, sp
 902 00de 04F11003 		add	r3, r4, #16
 903 00e2 40F27112 		movw	r2, #369
 904 00e6 1946     		mov	r1, r3
 905 00e8 FFF7FEFF 		bl	memcpy
 906 00ec 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 907 00f0 FFF7FEFF 		bl	printTestStatus
 343:notoriOS.c    ****     
 344:notoriOS.c    ****     // Test modem
 345:notoriOS.c    ****     test_t t_modem = modem_test();
 908              		.loc 1 345 0
 909 00f4 3B1D     		adds	r3, r7, #4
 910 00f6 1846     		mov	r0, r3
 911 00f8 FFF7FEFF 		bl	modem_test
 346:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 912              		.loc 1 346 0
 913 00fc 0F4B     		ldr	r3, .L33+4
 914 00fe 0093     		str	r3, [sp]
 915 0100 0F4B     		ldr	r3, .L33+8
 916 0102 104A     		ldr	r2, .L33+12
 917 0104 1049     		ldr	r1, .L33+16
 918 0106 0320     		movs	r0, #3
 919 0108 FFF7FEFF 		bl	printNotif
 347:notoriOS.c    ****     printTestStatus(t_modem);
 920              		.loc 1 347 0
 921 010c 3C1D     		adds	r4, r7, #4
 922 010e 6846     		mov	r0, sp
 923 0110 04F11003 		add	r3, r4, #16
 924 0114 40F27112 		movw	r2, #369
 925 0118 1946     		mov	r1, r3
 926 011a FFF7FEFF 		bl	memcpy
 927 011e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 928 0122 FFF7FEFF 		bl	printTestStatus
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 929              		.loc 1 349 0
 930 0126 0949     		ldr	r1, .L33+20
 931 0128 0320     		movs	r0, #3
 932 012a FFF7FEFF 		bl	printNotif
 350:notoriOS.c    **** 
 351:notoriOS.c    **** }
 933              		.loc 1 351 0
 934 012e 00BF     		nop
 935 0130 07F6A427 		addw	r7, r7, #2724
 936              		.cfi_def_cfa_offset 12
 937 0134 BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 24


 938              		.cfi_def_cfa_register 13
 939              		@ sp needed
 940 0136 90BD     		pop	{r4, r7, pc}
 941              	.L34:
 942              		.align	2
 943              	.L33:
 944 0138 3C000000 		.word	.LC2
 945 013c 04000000 		.word	system_info+4
 946 0140 00000000 		.word	modem_info
 947 0144 28000000 		.word	modem_info+40
 948 0148 68000000 		.word	.LC3
 949 014c 88000000 		.word	.LC4
 950              		.cfi_endproc
 951              	.LFE72:
 952              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 953              		.section	.text.main,"ax",%progbits
 954              		.align	2
 955              		.global	main
 956              		.thumb
 957              		.thumb_func
 958              		.type	main, %function
 959              	main:
 960              	.LFB73:
 352:notoriOS.c    **** 
 353:notoriOS.c    **** // ==============================================
 354:notoriOS.c    **** // Processes Core Tasks
 355:notoriOS.c    **** // ==============================================
 356:notoriOS.c    **** int main(void)
 357:notoriOS.c    **** {
 961              		.loc 1 357 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 0
 964              		@ frame_needed = 1, uses_anonymous_args = 0
 965 0000 80B5     		push	{r7, lr}
 966              		.cfi_def_cfa_offset 8
 967              		.cfi_offset 7, -8
 968              		.cfi_offset 14, -4
 969 0002 00AF     		add	r7, sp, #0
 970              		.cfi_def_cfa_register 7
 358:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 971              		.loc 1 358 0
 972              		.syntax unified
 973              	@ 358 "notoriOS.c" 1
 974 0004 62B6     		CPSIE   i
 975              	@ 0 "" 2
 359:notoriOS.c    **** 
 360:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 976              		.loc 1 360 0
 977              		.thumb
 978              		.syntax unified
 979 0006 FFF7FEFF 		bl	ReadyOrNot
 361:notoriOS.c    ****     
 362:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 980              		.loc 1 362 0
 981 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 982              	.L37:
 363:notoriOS.c    ****    
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 25


 364:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 365:notoriOS.c    ****     {
 366:notoriOS.c    ****         
 367:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 983              		.loc 1 367 0
 984 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 985 0012 0346     		mov	r3, r0
 986 0014 002B     		cmp	r3, #0
 987 0016 FAD1     		bne	.L37
 368:notoriOS.c    ****         {
 369:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 988              		.loc 1 369 0
 989 0018 FFF7FEFF 		bl	LayBack
 370:notoriOS.c    ****         }
 371:notoriOS.c    ****     }
 990              		.loc 1 371 0
 991 001c F7E7     		b	.L37
 992              		.cfi_endproc
 993              	.LFE73:
 994              		.size	main, .-main
 995 001e 00BF     		.section	.rodata
 996 00b2 0000     		.align	2
 997              	.LC5:
 998 00b4 4D6F6465 		.ascii	"Modem is ready.\000"
 998      6D206973 
 998      20726561 
 998      64792E00 
 999              		.align	2
 1000              	.LC6:
 1001 00c4 256400   		.ascii	"%d\000"
 1002 00c7 00       		.align	2
 1003              	.LC7:
 1004 00c8 72737270 		.ascii	"rsrp\000"
 1004      00
 1005 00cd 000000   		.align	2
 1006              	.LC8:
 1007 00d0 72736370 		.ascii	"rscp\000"
 1007      00
 1008 00d5 000000   		.align	2
 1009              	.LC9:
 1010 00d8 7472795F 		.ascii	"try_counter\000"
 1010      636F756E 
 1010      74657200 
 1011              		.align	2
 1012              	.LC10:
 1013 00e4 64617461 		.ascii	"data_count_sent\000"
 1013      5F636F75 
 1013      6E745F73 
 1013      656E7400 
 1014              		.align	2
 1015              	.LC11:
 1016 00f4 64617461 		.ascii	"data_count_desired\000"
 1016      5F636F75 
 1016      6E745F64 
 1016      65736972 
 1016      656400
 1017 0107 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 26


 1018              	.LC12:
 1019 0108 42656769 		.ascii	"Begin HTTP post.\000"
 1019      6E204854 
 1019      54502070 
 1019      6F73742E 
 1019      00
 1020 0119 000000   		.align	2
 1021              	.LC13:
 1022 011c 35336662 		.ascii	"53fbcdba3f46e971d15d579e7af7131a187380c9\000"
 1022      63646261 
 1022      33663436 
 1022      65393731 
 1022      64313564 
 1023 0145 000000   		.align	2
 1024              	.LC14:
 1025 0148 6170692F 		.ascii	"api/v1/write\000"
 1025      76312F77 
 1025      72697465 
 1025      00
 1026 0155 000000   		.align	2
 1027              	.LC15:
 1028 0158 48545450 		.ascii	"HTTP route: %s\000"
 1028      20726F75 
 1028      74653A20 
 1028      257300
 1029 0167 00       		.align	2
 1030              	.LC16:
 1031 0168 312E3100 		.ascii	"1.1\000"
 1032              		.align	2
 1033              	.LC17:
 1034 016c 00       		.ascii	"\000"
 1035 016d 000000   		.align	2
 1036              	.LC18:
 1037 0170 436C6F73 		.ascii	"Close\000"
 1037      6500
 1038 0176 0000     		.align	2
 1039              	.LC19:
 1040 0178 504F5354 		.ascii	"POST\000"
 1040      00
 1041 017d 000000   		.align	2
 1042              	.LC20:
 1043 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 1043      20485454 
 1043      50205265 
 1043      71756573 
 1043      743A2025 
 1044 0196 0000     		.align	2
 1045              	.LC21:
 1046 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 1046      443D312C 
 1046      302C2564 
 1046      2C222573 
 1046      222C302C 
 1047 01b1 000000   		.align	2
 1048              	.LC22:
 1049 01b4 257300   		.ascii	"%s\000"
 1050 01b7 00       		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 27


 1051              	.LC23:
 1052 01b8 4F4B00   		.ascii	"OK\000"
 1053              		.global	__aeabi_ui2d
 1054              		.global	__aeabi_d2iz
 1055 01bb 00       		.align	2
 1056              	.LC24:
 1057 01bc 68747470 		.ascii	"http_request len: %d\000"
 1057      5F726571 
 1057      75657374 
 1057      206C656E 
 1057      3A202564 
 1058 01d1 000000   		.align	2
 1059              	.LC25:
 1060 01d4 23206F66 		.ascii	"# of packets: %d\000"
 1060      20706163 
 1060      6B657473 
 1060      3A202564 
 1060      00
 1061 01e5 000000   		.align	2
 1062              	.LC26:
 1063 01e8 3E00     		.ascii	">\000"
 1064 01ea 0000     		.align	2
 1065              	.LC27:
 1066 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 1066      53454E44 
 1066      3D310D0A 
 1066      00
 1067 01f9 000000   		.align	2
 1068              	.LC28:
 1069 01fc 1A00     		.ascii	"\032\000"
 1070 01fe 0000     		.align	2
 1071              	.LC29:
 1072 0200 6368756E 		.ascii	"chunk %d: %s\000"
 1072      6B202564 
 1072      3A202573 
 1072      00
 1073 020d 000000   		.align	2
 1074              	.LC30:
 1075 0210 5352494E 		.ascii	"SRING\000"
 1075      4700
 1076 0216 0000     		.align	2
 1077              	.LC31:
 1078 0218 4F532D4F 		.ascii	"OS-OK\000"
 1078      4B00
 1079 021e 0000     		.align	2
 1080              	.LC32:
 1081 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 1081      52454356 
 1081      3D312C31 
 1081      3030300D 
 1081      00
 1082 0231 000000   		.align	2
 1083              	.LC33:
 1084 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 1084      6D5F7478 
 1084      5F74696D 
 1084      6500
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 28


 1085 0242 0000     		.align	2
 1086              	.LC34:
 1087 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 1087      4F3A2043 
 1087      6F756C64 
 1087      206E6F74 
 1087      20726563 
 1088              		.section	.text.syncData,"ax",%progbits
 1089              		.align	2
 1090              		.global	syncData
 1091              		.thumb
 1092              		.thumb_func
 1093              		.type	syncData, %function
 1094              	syncData:
 1095              	.LFB74:
 372:notoriOS.c    **** }
 373:notoriOS.c    **** 
 374:notoriOS.c    **** // ==============================================
 375:notoriOS.c    **** // Syncs data with server
 376:notoriOS.c    **** // Returns 0 when done
 377:notoriOS.c    **** // ==============================================
 378:notoriOS.c    **** uint8 syncData(){
 1096              		.loc 1 378 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 1360
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100 0000 90B5     		push	{r4, r7, lr}
 1101              		.cfi_def_cfa_offset 12
 1102              		.cfi_offset 4, -12
 1103              		.cfi_offset 7, -8
 1104              		.cfi_offset 14, -4
 1105 0002 ADF26C5D 		subw	sp, sp, #1388
 1106              		.cfi_def_cfa_offset 1400
 1107 0006 06AF     		add	r7, sp, #24
 1108              		.cfi_def_cfa 7, 1376
 379:notoriOS.c    ****     
 380:notoriOS.c    ****     /*
 381:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 382:notoriOS.c    ****     uint8 check = 0;
 383:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 384:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 385:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 386:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 387:notoriOS.c    ****     */
 388:notoriOS.c    **** 
 389:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 390:notoriOS.c    ****     LED_Write(1u);
 1109              		.loc 1 390 0
 1110 0008 0120     		movs	r0, #1
 1111 000a FFF7FEFF 		bl	LED_Write
 391:notoriOS.c    ****     CyDelay(100u);
 1112              		.loc 1 391 0
 1113 000e 6420     		movs	r0, #100
 1114 0010 FFF7FEFF 		bl	CyDelay
 392:notoriOS.c    ****     LED_Write(0u);
 1115              		.loc 1 392 0
 1116 0014 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 29


 1117 0016 FFF7FEFF 		bl	LED_Write
 393:notoriOS.c    **** 
 394:notoriOS.c    ****     
 395:notoriOS.c    ****     // If there's no data, not need to do anything
 396:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 1118              		.loc 1 396 0
 1119 001a FFF7FEFF 		bl	sizeOfDataStack
 1120 001e 0346     		mov	r3, r0
 1121 0020 002B     		cmp	r3, #0
 1122 0022 01D1     		bne	.L39
 397:notoriOS.c    ****         return 0u;
 1123              		.loc 1 397 0
 1124 0024 0023     		movs	r3, #0
 1125 0026 03E2     		b	.L40
 1126              	.L39:
 398:notoriOS.c    ****         }
 399:notoriOS.c    ****     
 400:notoriOS.c    ****     // Create request body, in this case influx
 401:notoriOS.c    ****     // Place body into HTTP request header
 402:notoriOS.c    ****     // Fire up modem and get it out
 403:notoriOS.c    ****      
 404:notoriOS.c    ****     
 405:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 406:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1127              		.loc 1 406 0
 1128 0028 FFF7FEFF 		bl	modem_get_state
 1129 002c 0346     		mov	r3, r0
 1130 002e 002B     		cmp	r3, #0
 1131 0030 11D1     		bne	.L41
 407:notoriOS.c    **** 
 408:notoriOS.c    ****         try_counter++;
 1132              		.loc 1 408 0
 1133 0032 AE4B     		ldr	r3, .L53
 1134 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1135 0036 0133     		adds	r3, r3, #1
 1136 0038 DAB2     		uxtb	r2, r3
 1137 003a AC4B     		ldr	r3, .L53
 1138 003c 1A70     		strb	r2, [r3]
 409:notoriOS.c    ****         	
 410:notoriOS.c    ****         if(try_counter <= 2){
 1139              		.loc 1 410 0
 1140 003e AB4B     		ldr	r3, .L53
 1141 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 0042 022B     		cmp	r3, #2
 1143 0044 02D8     		bhi	.L42
 411:notoriOS.c    ****             modem_power_up();
 1144              		.loc 1 411 0
 1145 0046 FFF7FEFF 		bl	modem_power_up
 1146 004a F0E1     		b	.L43
 1147              	.L42:
 412:notoriOS.c    ****         }else{
 413:notoriOS.c    ****             try_counter = 0;
 1148              		.loc 1 413 0
 1149 004c A74B     		ldr	r3, .L53
 1150 004e 0022     		movs	r2, #0
 1151 0050 1A70     		strb	r2, [r3]
 414:notoriOS.c    ****             return 0u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 30


 1152              		.loc 1 414 0
 1153 0052 0023     		movs	r3, #0
 1154 0054 ECE1     		b	.L40
 1155              	.L41:
 415:notoriOS.c    ****             }
 416:notoriOS.c    ****             
 417:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1156              		.loc 1 417 0
 1157 0056 FFF7FEFF 		bl	modem_get_state
 1158 005a 0346     		mov	r3, r0
 1159 005c 042B     		cmp	r3, #4
 1160 005e 40F0E681 		bne	.L43
 1161              	.LBB2:
 418:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1162              		.loc 1 418 0
 1163 0062 A349     		ldr	r1, .L53+4
 1164 0064 0020     		movs	r0, #0
 1165 0066 FFF7FEFF 		bl	printNotif
 419:notoriOS.c    ****         
 420:notoriOS.c    ****         http_request[0] = '\0';
 1166              		.loc 1 420 0
 1167 006a A24B     		ldr	r3, .L53+8
 1168 006c 0022     		movs	r2, #0
 1169 006e 1A70     		strb	r2, [r3]
 421:notoriOS.c    ****         http_body[0] = '\0';
 1170              		.loc 1 421 0
 1171 0070 A14B     		ldr	r3, .L53+12
 1172 0072 0022     		movs	r2, #0
 1173 0074 1A70     		strb	r2, [r3]
 422:notoriOS.c    ****         http_route[0] = '\0';
 1174              		.loc 1 422 0
 1175 0076 A14B     		ldr	r3, .L53+16
 1176 0078 0022     		movs	r2, #0
 1177 007a 1A70     		strb	r2, [r3]
 423:notoriOS.c    ****         //char *base = "write";
 424:notoriOS.c    ****         
 425:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 426:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 427:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1178              		.loc 1 427 0
 1179 007c A04B     		ldr	r3, .L53+20
 1180 007e 5B69     		ldr	r3, [r3, #20]
 1181 0080 07F5A560 		add	r0, r7, #1320
 1182 0084 9F4A     		ldr	r2, .L53+24
 1183 0086 1421     		movs	r1, #20
 1184 0088 FFF7FEFF 		bl	snprintf
 428:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1185              		.loc 1 428 0
 1186 008c FFF7FEFF 		bl	getTimeStamp
 1187 0090 0246     		mov	r2, r0
 1188 0092 07F5A563 		add	r3, r7, #1320
 1189 0096 1946     		mov	r1, r3
 1190 0098 9B48     		ldr	r0, .L53+28
 1191 009a FFF7FEFF 		bl	pushData
 429:notoriOS.c    ****         
 430:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 431:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 31


 1192              		.loc 1 431 0
 1193 009e 984B     		ldr	r3, .L53+20
 1194 00a0 9B68     		ldr	r3, [r3, #8]
 1195 00a2 07F21450 		addw	r0, r7, #1300
 1196 00a6 974A     		ldr	r2, .L53+24
 1197 00a8 1421     		movs	r1, #20
 1198 00aa FFF7FEFF 		bl	snprintf
 432:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1199              		.loc 1 432 0
 1200 00ae FFF7FEFF 		bl	getTimeStamp
 1201 00b2 0246     		mov	r2, r0
 1202 00b4 07F21453 		addw	r3, r7, #1300
 1203 00b8 1946     		mov	r1, r3
 1204 00ba 9448     		ldr	r0, .L53+32
 1205 00bc FFF7FEFF 		bl	pushData
 433:notoriOS.c    ****         
 434:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 435:notoriOS.c    ****         char c_try_counter[20];
 436:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1206              		.loc 1 436 0
 1207 00c0 8A4B     		ldr	r3, .L53
 1208 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1209 00c4 07F5A060 		add	r0, r7, #1280
 1210 00c8 8E4A     		ldr	r2, .L53+24
 1211 00ca 1421     		movs	r1, #20
 1212 00cc FFF7FEFF 		bl	snprintf
 437:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1213              		.loc 1 437 0
 1214 00d0 FFF7FEFF 		bl	getTimeStamp
 1215 00d4 0246     		mov	r2, r0
 1216 00d6 07F5A063 		add	r3, r7, #1280
 1217 00da 1946     		mov	r1, r3
 1218 00dc 8C48     		ldr	r0, .L53+36
 1219 00de FFF7FEFF 		bl	pushData
 438:notoriOS.c    ****         
 439:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 440:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 441:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 442:notoriOS.c    ****         if(buffer_overflow == false){
 1220              		.loc 1 442 0
 1221 00e2 8C4B     		ldr	r3, .L53+40
 1222 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1223 00e6 83F00103 		eor	r3, r3, #1
 1224 00ea DBB2     		uxtb	r3, r3
 1225 00ec 002B     		cmp	r3, #0
 1226 00ee 16D0     		beq	.L44
 1227              	.LBB3:
 443:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1228              		.loc 1 443 0
 1229 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1230 00f4 0346     		mov	r3, r0
 1231 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 444:notoriOS.c    ****             char c_data_count_sent[20];
 445:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1232              		.loc 1 445 0
 1233 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1234 00fe 07F59B60 		add	r0, r7, #1240
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 32


 1235 0102 804A     		ldr	r2, .L53+24
 1236 0104 1421     		movs	r1, #20
 1237 0106 FFF7FEFF 		bl	snprintf
 446:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1238              		.loc 1 446 0
 1239 010a FFF7FEFF 		bl	getTimeStamp
 1240 010e 0246     		mov	r2, r0
 1241 0110 07F59B63 		add	r3, r7, #1240
 1242 0114 1946     		mov	r1, r3
 1243 0116 8048     		ldr	r0, .L53+44
 1244 0118 FFF7FEFF 		bl	pushData
 1245              	.LBE3:
 1246 011c 0FE0     		b	.L45
 1247              	.L44:
 1248              	.LBB4:
 447:notoriOS.c    ****         }else{
 448:notoriOS.c    ****             char c_data_count_sent[20];
 449:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1249              		.loc 1 449 0
 1250 011e 07F2C440 		addw	r0, r7, #1220
 1251 0122 9623     		movs	r3, #150
 1252 0124 774A     		ldr	r2, .L53+24
 1253 0126 1421     		movs	r1, #20
 1254 0128 FFF7FEFF 		bl	snprintf
 450:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1255              		.loc 1 450 0
 1256 012c FFF7FEFF 		bl	getTimeStamp
 1257 0130 0246     		mov	r2, r0
 1258 0132 07F2C443 		addw	r3, r7, #1220
 1259 0136 1946     		mov	r1, r3
 1260 0138 7748     		ldr	r0, .L53+44
 1261 013a FFF7FEFF 		bl	pushData
 1262              	.L45:
 1263              	.LBE4:
 451:notoriOS.c    ****         }
 452:notoriOS.c    ****         
 453:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 454:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1264              		.loc 1 454 0
 1265 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1266 0142 0346     		mov	r3, r0
 1267 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 455:notoriOS.c    ****         char c_data_count_desired[20];
 456:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 457:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1268              		.loc 1 457 0
 1269 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1270 014c 013B     		subs	r3, r3, #1
 1271 014e 07F2EC40 		addw	r0, r7, #1260
 1272 0152 6C4A     		ldr	r2, .L53+24
 1273 0154 1421     		movs	r1, #20
 1274 0156 FFF7FEFF 		bl	snprintf
 458:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1275              		.loc 1 458 0
 1276 015a FFF7FEFF 		bl	getTimeStamp
 1277 015e 0246     		mov	r2, r0
 1278 0160 07F2EC43 		addw	r3, r7, #1260
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 33


 1279 0164 1946     		mov	r1, r3
 1280 0166 6D48     		ldr	r0, .L53+48
 1281 0168 FFF7FEFF 		bl	pushData
 459:notoriOS.c    ****         
 460:notoriOS.c    ****         // Construct HTPP request
 461:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1282              		.loc 1 461 0
 1283 016c 6C49     		ldr	r1, .L53+52
 1284 016e 0020     		movs	r0, #0
 1285 0170 FFF7FEFF 		bl	printNotif
 462:notoriOS.c    ****         
 463:notoriOS.c    ****         // Old influx API
 464:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 465:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1286              		.loc 1 465 0
 1287 0174 6B4B     		ldr	r3, .L53+56
 1288 0176 6C4A     		ldr	r2, .L53+60
 1289 0178 6C49     		ldr	r1, .L53+64
 1290 017a 6048     		ldr	r0, .L53+16
 1291 017c FFF7FEFF 		bl	construct_malcom_route
 466:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1292              		.loc 1 466 0
 1293 0180 5E4A     		ldr	r2, .L53+16
 1294 0182 6B49     		ldr	r1, .L53+68
 1295 0184 0020     		movs	r0, #0
 1296 0186 FFF7FEFF 		bl	printNotif
 467:notoriOS.c    ****         
 468:notoriOS.c    ****         //OLD INFLUX API
 469:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 470:notoriOS.c    ****         construct_malcom_body(http_body);
 1297              		.loc 1 470 0
 1298 018a 5B48     		ldr	r0, .L53+12
 1299 018c FFF7FEFF 		bl	construct_malcom_body
 471:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1300              		.loc 1 471 0
 1301 0190 684B     		ldr	r3, .L53+72
 1302 0192 5B6E     		ldr	r3, [r3, #100]
 1303 0194 684A     		ldr	r2, .L53+76
 1304 0196 0592     		str	r2, [sp, #20]
 1305 0198 0022     		movs	r2, #0
 1306 019a 0492     		str	r2, [sp, #16]
 1307 019c 674A     		ldr	r2, .L53+80
 1308 019e 0392     		str	r2, [sp, #12]
 1309 01a0 674A     		ldr	r2, .L53+84
 1310 01a2 0292     		str	r2, [sp, #8]
 1311 01a4 674A     		ldr	r2, .L53+88
 1312 01a6 0192     		str	r2, [sp, #4]
 1313 01a8 0093     		str	r3, [sp]
 1314 01aa 544B     		ldr	r3, .L53+16
 1315 01ac 614A     		ldr	r2, .L53+72
 1316 01ae 5249     		ldr	r1, .L53+12
 1317 01b0 5048     		ldr	r0, .L53+8
 1318 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 472:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1319              		.loc 1 472 0
 1320 01b6 4F4A     		ldr	r2, .L53+8
 1321 01b8 6349     		ldr	r1, .L53+92
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 34


 1322 01ba 0020     		movs	r0, #0
 1323 01bc FFF7FEFF 		bl	printNotif
 473:notoriOS.c    ****         
 474:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 475:notoriOS.c    ****         // Open port and begin command line sequence
 476:notoriOS.c    ****         char portConfig[200];
 477:notoriOS.c    ****         uint8 status = 0u;
 1324              		.loc 1 477 0
 1325 01c0 0023     		movs	r3, #0
 1326 01c2 87F84535 		strb	r3, [r7, #1349]
 478:notoriOS.c    ****         
 479:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1327              		.loc 1 479 0
 1328 01c6 5B4B     		ldr	r3, .L53+72
 1329 01c8 5A6E     		ldr	r2, [r3, #100]
 1330 01ca 381D     		adds	r0, r7, #4
 1331 01cc 594B     		ldr	r3, .L53+72
 1332 01ce 0093     		str	r3, [sp]
 1333 01d0 1346     		mov	r3, r2
 1334 01d2 5E4A     		ldr	r2, .L53+96
 1335 01d4 C821     		movs	r1, #200
 1336 01d6 FFF7FEFF 		bl	snprintf
 480:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1337              		.loc 1 480 0
 1338 01da 3B1D     		adds	r3, r7, #4
 1339 01dc 1A46     		mov	r2, r3
 1340 01de 5C49     		ldr	r1, .L53+100
 1341 01e0 0020     		movs	r0, #0
 1342 01e2 FFF7FEFF 		bl	printNotif
 481:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1343              		.loc 1 481 0
 1344 01e6 3B1D     		adds	r3, r7, #4
 1345 01e8 42F21072 		movw	r2, #10000
 1346 01ec 5949     		ldr	r1, .L53+104
 1347 01ee 1846     		mov	r0, r3
 1348 01f0 FFF7FEFF 		bl	at_write_command
 1349 01f4 0346     		mov	r3, r0
 1350 01f6 87F84535 		strb	r3, [r7, #1349]
 482:notoriOS.c    ****         
 483:notoriOS.c    ****         // create character pointer to chunk through the http_request
 484:notoriOS.c    ****         char *chunk;
 485:notoriOS.c    ****         // Set chunk to start where http_request starts
 486:notoriOS.c    ****         chunk = http_request;
 1351              		.loc 1 486 0
 1352 01fa 3E4B     		ldr	r3, .L53+8
 1353 01fc C7F84C35 		str	r3, [r7, #1356]
 487:notoriOS.c    ****         // variable for the number of packets to send
 488:notoriOS.c    ****         int8 packets;
 489:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1354              		.loc 1 489 0
 1355 0200 3C48     		ldr	r0, .L53+8
 1356 0202 FFF7FEFF 		bl	strlen
 1357 0206 0246     		mov	r2, r0
 1358 0208 534B     		ldr	r3, .L53+108
 1359 020a A3FB0223 		umull	r2, r3, r3, r2
 1360 020e 5B09     		lsrs	r3, r3, #5
 1361 0210 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 35


 1362 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1363 0216 4FF00002 		mov	r2, #0
 1364 021a 504B     		ldr	r3, .L53+112
 1365 021c FFF7FEFF 		bl	nextafter
 1366 0220 0346     		mov	r3, r0
 1367 0222 0C46     		mov	r4, r1
 1368 0224 1846     		mov	r0, r3
 1369 0226 2146     		mov	r1, r4
 1370 0228 FFF7FEFF 		bl	ceil
 1371 022c 0346     		mov	r3, r0
 1372 022e 0C46     		mov	r4, r1
 1373 0230 1846     		mov	r0, r3
 1374 0232 2146     		mov	r1, r4
 1375 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1376 0238 0346     		mov	r3, r0
 1377 023a 87F84435 		strb	r3, [r7, #1348]
 490:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1378              		.loc 1 490 0
 1379 023e 2D48     		ldr	r0, .L53+8
 1380 0240 FFF7FEFF 		bl	strlen
 1381 0244 0346     		mov	r3, r0
 1382 0246 1A46     		mov	r2, r3
 1383 0248 4549     		ldr	r1, .L53+116
 1384 024a 0020     		movs	r0, #0
 1385 024c FFF7FEFF 		bl	printNotif
 491:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1386              		.loc 1 491 0
 1387 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1388 0254 1A46     		mov	r2, r3
 1389 0256 4349     		ldr	r1, .L53+120
 1390 0258 0020     		movs	r0, #0
 1391 025a FFF7FEFF 		bl	printNotif
 1392              	.LBB5:
 492:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 493:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1393              		.loc 1 493 0
 1394 025e 0023     		movs	r3, #0
 1395 0260 87F84B35 		strb	r3, [r7, #1355]
 1396 0264 9AE0     		b	.L46
 1397              	.L49:
 1398              	.LBB6:
 494:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 495:notoriOS.c    ****             char http_chunk[1001];
 496:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 497:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 498:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1399              		.loc 1 498 0
 1400 0266 4FF47A72 		mov	r2, #1000
 1401 026a 3F49     		ldr	r1, .L53+124
 1402 026c 3F48     		ldr	r0, .L53+128
 1403 026e FFF7FEFF 		bl	at_write_command
 1404 0272 0346     		mov	r3, r0
 1405 0274 87F84535 		strb	r3, [r7, #1349]
 499:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 500:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1406              		.loc 1 500 0
 1407 0278 07F1CC00 		add	r0, r7, #204
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 36


 1408 027c D7F84C35 		ldr	r3, [r7, #1356]
 1409 0280 334A     		ldr	r2, .L53+100
 1410 0282 4FF4FA71 		mov	r1, #500
 1411 0286 FFF7FEFF 		bl	snprintf
 501:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 502:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1412              		.loc 1 502 0
 1413 028a 07F1CC03 		add	r3, r7, #204
 1414 028e 1846     		mov	r0, r3
 1415 0290 FFF7FEFF 		bl	strlen
 1416 0294 0346     		mov	r3, r0
 1417 0296 1A46     		mov	r2, r3
 1418 0298 07F1CC03 		add	r3, r7, #204
 1419 029c 1344     		add	r3, r3, r2
 1420 029e 3449     		ldr	r1, .L53+132
 1421 02a0 1A46     		mov	r2, r3
 1422 02a2 0B46     		mov	r3, r1
 1423 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1424 02a6 1380     		strh	r3, [r2]	@ unaligned
 503:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1425              		.loc 1 503 0
 1426 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1427 02ac 07F1CC03 		add	r3, r7, #204
 1428 02b0 3049     		ldr	r1, .L53+136
 1429 02b2 0020     		movs	r0, #0
 1430 02b4 FFF7FEFF 		bl	printNotif
 504:notoriOS.c    ****             // Send data to server
 505:notoriOS.c    ****             if ((packet+1) != packets){
 1431              		.loc 1 505 0
 1432 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1433 02bc 5A1C     		adds	r2, r3, #1
 1434 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1435 02c2 9A42     		cmp	r2, r3
 1436 02c4 58D0     		beq	.L47
 506:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1437              		.loc 1 506 0
 1438 02c6 07F1CC03 		add	r3, r7, #204
 1439 02ca 41F28832 		movw	r2, #5000
 1440 02ce 2149     		ldr	r1, .L53+104
 1441 02d0 1846     		mov	r0, r3
 1442 02d2 FFF7FEFF 		bl	at_write_command
 1443 02d6 0346     		mov	r3, r0
 1444 02d8 87F84535 		strb	r3, [r7, #1349]
 507:notoriOS.c    ****                 // Move the pointer forward 
 508:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1445              		.loc 1 508 0
 1446 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1447 02e0 03F2F313 		addw	r3, r3, #499
 1448 02e4 C7F84C35 		str	r3, [r7, #1356]
 1449 02e8 51E0     		b	.L48
 1450              	.L54:
 1451 02ea 00BF     		.align	2
 1452              	.L53:
 1453 02ec 00000000 		.word	try_counter
 1454 02f0 B4000000 		.word	.LC5
 1455 02f4 00000000 		.word	http_request
 1456 02f8 00000000 		.word	http_body
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 37


 1457 02fc 00000000 		.word	http_route
 1458 0300 00000000 		.word	modem_stats
 1459 0304 C4000000 		.word	.LC6
 1460 0308 C8000000 		.word	.LC7
 1461 030c D0000000 		.word	.LC8
 1462 0310 D8000000 		.word	.LC9
 1463 0314 00000000 		.word	buffer_overflow
 1464 0318 E4000000 		.word	.LC10
 1465 031c F4000000 		.word	.LC11
 1466 0320 08010000 		.word	.LC12
 1467 0324 1C010000 		.word	.LC13
 1468 0328 28000000 		.word	modem_info+40
 1469 032c 48010000 		.word	.LC14
 1470 0330 58010000 		.word	.LC15
 1471 0334 00000000 		.word	system_settings
 1472 0338 68010000 		.word	.LC16
 1473 033c 6C010000 		.word	.LC17
 1474 0340 70010000 		.word	.LC18
 1475 0344 78010000 		.word	.LC19
 1476 0348 80010000 		.word	.LC20
 1477 034c 98010000 		.word	.LC21
 1478 0350 B4010000 		.word	.LC22
 1479 0354 B8010000 		.word	.LC23
 1480 0358 D34D6210 		.word	274877907
 1481 035c 00407F40 		.word	1082081280
 1482 0360 BC010000 		.word	.LC24
 1483 0364 D4010000 		.word	.LC25
 1484 0368 E8010000 		.word	.LC26
 1485 036c EC010000 		.word	.LC27
 1486 0370 FC010000 		.word	.LC28
 1487 0374 00020000 		.word	.LC29
 1488              	.L47:
 509:notoriOS.c    ****             }else{
 510:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1489              		.loc 1 510 0
 1490 0378 07F1CC03 		add	r3, r7, #204
 1491 037c 41F28832 		movw	r2, #5000
 1492 0380 2E49     		ldr	r1, .L55
 1493 0382 1846     		mov	r0, r3
 1494 0384 FFF7FEFF 		bl	at_write_command
 1495 0388 0346     		mov	r3, r0
 1496 038a 87F84535 		strb	r3, [r7, #1349]
 1497              	.L48:
 1498              	.LBE6:
 493:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1499              		.loc 1 493 0 discriminator 2
 1500 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1501 0392 DBB2     		uxtb	r3, r3
 1502 0394 0133     		adds	r3, r3, #1
 1503 0396 DBB2     		uxtb	r3, r3
 1504 0398 87F84B35 		strb	r3, [r7, #1355]
 1505              	.L46:
 493:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1506              		.loc 1 493 0 is_stmt 0 discriminator 1
 1507 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1508 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1509 03a4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 38


 1510 03a6 FFF65EAF 		blt	.L49
 1511              	.LBE5:
 511:notoriOS.c    ****             }
 512:notoriOS.c    ****             
 513:notoriOS.c    ****         }
 514:notoriOS.c    ****         
 515:notoriOS.c    ****         // Read received buffer
 516:notoriOS.c    ****         // A good write will return code "OS-OK"
 517:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 518:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 519:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1512              		.loc 1 519 0 is_stmt 1
 1513 03aa 41F28832 		movw	r2, #5000
 1514 03ae 2449     		ldr	r1, .L55+4
 1515 03b0 2448     		ldr	r0, .L55+8
 1516 03b2 FFF7FEFF 		bl	at_write_command
 1517 03b6 0346     		mov	r3, r0
 1518 03b8 87F84535 		strb	r3, [r7, #1349]
 520:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 521:notoriOS.c    ****     
 522:notoriOS.c    ****   
 523:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 524:notoriOS.c    ****         if(status == 1u){
 1519              		.loc 1 524 0
 1520 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1521 03c0 012B     		cmp	r3, #1
 1522 03c2 1DD1     		bne	.L50
 1523              	.LBB7:
 525:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1524              		.loc 1 525 0
 1525 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 526:notoriOS.c    ****             Clear_Data_Stack();
 1526              		.loc 1 526 0
 1527 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 527:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1528              		.loc 1 527 0
 1529 03cc FFF7FEFF 		bl	getTimeStamp
 1530 03d0 0246     		mov	r2, r0
 1531 03d2 1D4B     		ldr	r3, .L55+12
 1532 03d4 1B68     		ldr	r3, [r3]
 1533 03d6 D31A     		subs	r3, r2, r3
 1534 03d8 C7F84035 		str	r3, [r7, #1344]
 528:notoriOS.c    ****             char s_send_time[10];
 529:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1535              		.loc 1 529 0
 1536 03dc 07F59760 		add	r0, r7, #1208
 1537 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1538 03e4 194A     		ldr	r2, .L55+16
 1539 03e6 0A21     		movs	r1, #10
 1540 03e8 FFF7FEFF 		bl	snprintf
 530:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1541              		.loc 1 530 0
 1542 03ec FFF7FEFF 		bl	getTimeStamp
 1543 03f0 0246     		mov	r2, r0
 1544 03f2 07F59763 		add	r3, r7, #1208
 1545 03f6 1946     		mov	r1, r3
 1546 03f8 1548     		ldr	r0, .L55+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 39


 1547 03fa FFF7FEFF 		bl	pushData
 1548              	.LBE7:
 1549 03fe 03E0     		b	.L51
 1550              	.L50:
 531:notoriOS.c    ****         }else{
 532:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1551              		.loc 1 532 0
 1552 0400 1449     		ldr	r1, .L55+24
 1553 0402 0220     		movs	r0, #2
 1554 0404 FFF7FEFF 		bl	printNotif
 1555              	.L51:
 533:notoriOS.c    ****         }
 534:notoriOS.c    ****          
 535:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 536:notoriOS.c    ****         long network_time = modem_get_network_time();
 1556              		.loc 1 536 0
 1557 0408 FFF7FEFF 		bl	modem_get_network_time
 1558 040c C7F83C05 		str	r0, [r7, #1340]
 537:notoriOS.c    ****         if(network_time != 0){
 1559              		.loc 1 537 0
 1560 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1561 0414 002B     		cmp	r3, #0
 1562 0416 03D0     		beq	.L52
 538:notoriOS.c    ****            setTime(network_time);
 1563              		.loc 1 538 0
 1564 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1565 041c FFF7FEFF 		bl	setTime
 1566              	.L52:
 539:notoriOS.c    ****         }
 540:notoriOS.c    ****         
 541:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 542:notoriOS.c    ****         // If not -- keep the statck and try next time
 543:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 544:notoriOS.c    ****         modem_power_down();
 1567              		.loc 1 544 0
 1568 0420 FFF7FEFF 		bl	modem_power_down
 545:notoriOS.c    ****         
 546:notoriOS.c    ****         try_counter = 0u;
 1569              		.loc 1 546 0
 1570 0424 0C4B     		ldr	r3, .L55+28
 1571 0426 0022     		movs	r2, #0
 1572 0428 1A70     		strb	r2, [r3]
 547:notoriOS.c    ****         return 0u;
 1573              		.loc 1 547 0
 1574 042a 0023     		movs	r3, #0
 1575 042c 00E0     		b	.L40
 1576              	.L43:
 1577              	.LBE2:
 548:notoriOS.c    ****     }
 549:notoriOS.c    ****       
 550:notoriOS.c    ****       return 1u; // Not done yet
 1578              		.loc 1 550 0
 1579 042e 0123     		movs	r3, #1
 1580              	.L40:
 551:notoriOS.c    **** }
 1581              		.loc 1 551 0 discriminator 1
 1582 0430 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 40


 1583 0432 07F25457 		addw	r7, r7, #1364
 1584              		.cfi_def_cfa_offset 12
 1585 0436 BD46     		mov	sp, r7
 1586              		.cfi_def_cfa_register 13
 1587              		@ sp needed
 1588 0438 90BD     		pop	{r4, r7, pc}
 1589              	.L56:
 1590 043a 00BF     		.align	2
 1591              	.L55:
 1592 043c 10020000 		.word	.LC30
 1593 0440 18020000 		.word	.LC31
 1594 0444 20020000 		.word	.LC32
 1595 0448 00000000 		.word	modem_start_time_stamp
 1596 044c C4000000 		.word	.LC6
 1597 0450 34020000 		.word	.LC33
 1598 0454 44020000 		.word	.LC34
 1599 0458 00000000 		.word	try_counter
 1600              		.cfi_endproc
 1601              	.LFE74:
 1602              		.size	syncData, .-syncData
 1603              		.section	.text.configureRemoteParams,"ax",%progbits
 1604              		.align	2
 1605              		.global	configureRemoteParams
 1606              		.thumb
 1607              		.thumb_func
 1608              		.type	configureRemoteParams, %function
 1609              	configureRemoteParams:
 1610              	.LFB75:
 552:notoriOS.c    **** 
 553:notoriOS.c    **** // ==============================================
 554:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 555:notoriOS.c    **** // Returns 0 when done
 556:notoriOS.c    **** // ==============================================
 557:notoriOS.c    **** uint8 configureRemoteParams(){
 1611              		.loc 1 557 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 8
 1614              		@ frame_needed = 1, uses_anonymous_args = 0
 1615 0000 80B5     		push	{r7, lr}
 1616              		.cfi_def_cfa_offset 8
 1617              		.cfi_offset 7, -8
 1618              		.cfi_offset 14, -4
 1619 0002 82B0     		sub	sp, sp, #8
 1620              		.cfi_def_cfa_offset 16
 1621 0004 00AF     		add	r7, sp, #0
 1622              		.cfi_def_cfa_register 7
 558:notoriOS.c    ****     
 559:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1623              		.loc 1 559 0
 1624 0006 FFF7FEFF 		bl	modem_get_state
 1625 000a 0346     		mov	r3, r0
 1626 000c 002B     		cmp	r3, #0
 1627 000e 02D1     		bne	.L58
 560:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 561:notoriOS.c    ****         modem_power_up();
 1628              		.loc 1 561 0
 1629 0010 FFF7FEFF 		bl	modem_power_up
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 41


 1630 0014 11E0     		b	.L59
 1631              	.L58:
 562:notoriOS.c    ****             
 563:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1632              		.loc 1 563 0
 1633 0016 FFF7FEFF 		bl	modem_get_state
 1634 001a 0346     		mov	r3, r0
 1635 001c 042B     		cmp	r3, #4
 1636 001e 0CD1     		bne	.L59
 1637              	.LBB8:
 564:notoriOS.c    ****         
 565:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 566:notoriOS.c    ****         
 567:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 568:notoriOS.c    ****         long network_time = modem_get_network_time();
 1638              		.loc 1 568 0
 1639 0020 FFF7FEFF 		bl	modem_get_network_time
 1640 0024 7860     		str	r0, [r7, #4]
 569:notoriOS.c    ****         if(network_time != 0){
 1641              		.loc 1 569 0
 1642 0026 7B68     		ldr	r3, [r7, #4]
 1643 0028 002B     		cmp	r3, #0
 1644 002a 02D0     		beq	.L60
 570:notoriOS.c    ****             setTime(network_time);
 1645              		.loc 1 570 0
 1646 002c 7868     		ldr	r0, [r7, #4]
 1647 002e FFF7FEFF 		bl	setTime
 1648              	.L60:
 571:notoriOS.c    ****         }
 572:notoriOS.c    ****         
 573:notoriOS.c    ****         // Get GPS coordinates
 574:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 575:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 576:notoriOS.c    ****         modem_power_down();
 1649              		.loc 1 576 0
 1650 0032 FFF7FEFF 		bl	modem_power_down
 577:notoriOS.c    ****         return 0u;
 1651              		.loc 1 577 0
 1652 0036 0023     		movs	r3, #0
 1653 0038 00E0     		b	.L61
 1654              	.L59:
 1655              	.LBE8:
 578:notoriOS.c    ****         
 579:notoriOS.c    ****     }
 580:notoriOS.c    ****     
 581:notoriOS.c    ****     return 1u;
 1656              		.loc 1 581 0
 1657 003a 0123     		movs	r3, #1
 1658              	.L61:
 582:notoriOS.c    **** }
 1659              		.loc 1 582 0
 1660 003c 1846     		mov	r0, r3
 1661 003e 0837     		adds	r7, r7, #8
 1662              		.cfi_def_cfa_offset 8
 1663 0040 BD46     		mov	sp, r7
 1664              		.cfi_def_cfa_register 13
 1665              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 42


 1666 0042 80BD     		pop	{r7, pc}
 1667              		.cfi_endproc
 1668              	.LFE75:
 1669              		.size	configureRemoteParams, .-configureRemoteParams
 1670              		.section	.rodata
 1671 026f 00       		.align	2
 1672              	.LC35:
 1673 0270 256C6400 		.ascii	"%ld\000"
 1674              		.align	2
 1675              	.LC36:
 1676 0274 43757272 		.ascii	"Current_Node_Type\000"
 1676      656E745F 
 1676      4E6F6465 
 1676      5F547970 
 1676      6500
 1677 0286 0000     		.align	2
 1678              	.LC37:
 1679 0288 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1679      6F746978 
 1679      5F646570 
 1679      74683D25 
 1679      7300
 1680 029a 0000     		.align	2
 1681              	.LC38:
 1682 029c 6D617862 		.ascii	"maxbotix_depth\000"
 1682      6F746978 
 1682      5F646570 
 1682      746800
 1683 02ab 00       		.align	2
 1684              	.LC39:
 1685 02ac 612B00   		.ascii	"a+\000"
 1686 02af 00       		.align	2
 1687              	.LC40:
 1688 02b0 206D6178 		.ascii	" maxbotix_depth: \000"
 1688      626F7469 
 1688      785F6465 
 1688      7074683A 
 1688      2000
 1689 02c2 0000     		.align	2
 1690              	.LC41:
 1691 02c4 2000     		.ascii	" \000"
 1692 02c6 0000     		.align	2
 1693              	.LC42:
 1694 02c8 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1694      64206E6F 
 1694      74206765 
 1694      74207661 
 1694      6C696420 
 1695              		.global	__aeabi_f2d
 1696              		.align	2
 1697              	.LC43:
 1698 02f4 252E3266 		.ascii	"%.2f\000"
 1698      00
 1699 02f9 000000   		.align	2
 1700              	.LC44:
 1701 02fc 765F6261 		.ascii	"v_bat=%s\000"
 1701      743D2573 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 43


 1701      00
 1702 0305 000000   		.align	2
 1703              	.LC45:
 1704 0308 765F6261 		.ascii	"v_bat\000"
 1704      7400
 1705 030e 0000     		.align	2
 1706              	.LC46:
 1707 0310 20766261 		.ascii	" vbat: \000"
 1707      743A2000 
 1708              		.align	2
 1709              	.LC47:
 1710 0318 70726573 		.ascii	"pressure_current=%s\000"
 1710      73757265 
 1710      5F637572 
 1710      72656E74 
 1710      3D257300 
 1711              		.align	2
 1712              	.LC48:
 1713 032c 70726573 		.ascii	"pressure_current\000"
 1713      73757265 
 1713      5F637572 
 1713      72656E74 
 1713      00
 1714 033d 000000   		.align	2
 1715              	.LC49:
 1716 0340 20707265 		.ascii	" pressure_current: \000"
 1716      73737572 
 1716      655F6375 
 1716      7272656E 
 1716      743A2000 
 1717              		.align	2
 1718              	.LC50:
 1719 0354 70726573 		.ascii	"pressure_depth=%s\000"
 1719      73757265 
 1719      5F646570 
 1719      74683D25 
 1719      7300
 1720 0366 0000     		.align	2
 1721              	.LC51:
 1722 0368 70726573 		.ascii	"pressure_depth\000"
 1722      73757265 
 1722      5F646570 
 1722      746800
 1723 0377 00       		.align	2
 1724              	.LC52:
 1725 0378 20707265 		.ascii	" pressure_depth: \000"
 1725      73737572 
 1725      655F6465 
 1725      7074683A 
 1725      2000
 1726 038a 0000     		.align	2
 1727              	.LC53:
 1728 038c 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1728      64206E6F 
 1728      74206765 
 1728      74207661 
 1728      6C696420 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 44


 1729              		.section	.text.makeMeasurements,"ax",%progbits
 1730              		.align	2
 1731              		.global	makeMeasurements
 1732              		.thumb
 1733              		.thumb_func
 1734              		.type	makeMeasurements, %function
 1735              	makeMeasurements:
 1736              	.LFB76:
 583:notoriOS.c    **** 
 584:notoriOS.c    **** 
 585:notoriOS.c    **** // ==============================================
 586:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 587:notoriOS.c    **** // Returns 0 when finished
 588:notoriOS.c    **** // ==============================================
 589:notoriOS.c    **** uint8 makeMeasurements(){
 1737              		.loc 1 589 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 128
 1740              		@ frame_needed = 1, uses_anonymous_args = 0
 1741 0000 90B5     		push	{r4, r7, lr}
 1742              		.cfi_def_cfa_offset 12
 1743              		.cfi_offset 4, -12
 1744              		.cfi_offset 7, -8
 1745              		.cfi_offset 14, -4
 1746 0002 A3B0     		sub	sp, sp, #140
 1747              		.cfi_def_cfa_offset 152
 1748 0004 02AF     		add	r7, sp, #8
 1749              		.cfi_def_cfa 7, 144
 590:notoriOS.c    ****     
 591:notoriOS.c    ****     // Get clock time and save to timeStamp
 592:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1750              		.loc 1 592 0
 1751 0006 FFF7FEFF 		bl	getTimeStamp
 1752 000a F867     		str	r0, [r7, #124]
 593:notoriOS.c    ****     char c_timeStamp[32];
 594:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1753              		.loc 1 594 0
 1754 000c 07F15C00 		add	r0, r7, #92
 1755 0010 FB6F     		ldr	r3, [r7, #124]
 1756 0012 8C4A     		ldr	r2, .L70
 1757 0014 2021     		movs	r1, #32
 1758 0016 FFF7FEFF 		bl	snprintf
 595:notoriOS.c    ****     
 596:notoriOS.c    ****     // Holds string for value that will be written 
 597:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 598:notoriOS.c    ****     
 599:notoriOS.c    ****     // who i am determines what I'm going to do 
 600:notoriOS.c    ****     // this is primarily for interpretability on grafana dashboards when developing custom nodes
 601:notoriOS.c    ****     char c_node_type[5];
 602:notoriOS.c    ****     itoa(updatable_parameters.node_type,c_node_type,10);
 1759              		.loc 1 602 0
 1760 001a 8B4B     		ldr	r3, .L70+4
 1761 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1762 001e 1846     		mov	r0, r3
 1763 0020 07F14003 		add	r3, r7, #64
 1764 0024 0A22     		movs	r2, #10
 1765 0026 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 45


 1766 0028 FFF7FEFF 		bl	itoa
 603:notoriOS.c    ****     pushData("Current_Node_Type",c_node_type ,getTimeStamp());
 1767              		.loc 1 603 0
 1768 002c FFF7FEFF 		bl	getTimeStamp
 1769 0030 0246     		mov	r2, r0
 1770 0032 07F14003 		add	r3, r7, #64
 1771 0036 1946     		mov	r1, r3
 1772 0038 8448     		ldr	r0, .L70+8
 1773 003a FFF7FEFF 		bl	pushData
 604:notoriOS.c    ****     
 605:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 606:notoriOS.c    ****     
 607:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1774              		.loc 1 607 0
 1775 003e 824B     		ldr	r3, .L70+4
 1776 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1777 0042 002B     		cmp	r3, #0
 1778 0044 3BD1     		bne	.L63
 1779              	.LBB9:
 608:notoriOS.c    ****         
 609:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 610:notoriOS.c    ****         level_sensor_t m_level_sensor;
 611:notoriOS.c    ****         
 612:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 613:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1780              		.loc 1 613 0
 1781 0046 07F11003 		add	r3, r7, #16
 1782 004a 1846     		mov	r0, r3
 1783 004c FFF7FEFF 		bl	level_sensor_take_reading
 614:notoriOS.c    ****     
 615:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 616:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1784              		.loc 1 616 0
 1785 0050 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1786 0054 002B     		cmp	r3, #0
 1787 0056 2ED0     		beq	.L64
 617:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1788              		.loc 1 617 0
 1789 0058 B7F92630 		ldrsh	r3, [r7, #38]
 1790 005c 07F14800 		add	r0, r7, #72
 1791 0060 7B4A     		ldr	r2, .L70+12
 1792 0062 1421     		movs	r1, #20
 1793 0064 FFF7FEFF 		bl	snprintf
 618:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1794              		.loc 1 618 0
 1795 0068 07F14803 		add	r3, r7, #72
 1796 006c 1A46     		mov	r2, r3
 1797 006e 7949     		ldr	r1, .L70+16
 1798 0070 0020     		movs	r0, #0
 1799 0072 FFF7FEFF 		bl	printNotif
 619:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1800              		.loc 1 619 0
 1801 0076 07F14803 		add	r3, r7, #72
 1802 007a FA6F     		ldr	r2, [r7, #124]
 1803 007c 1946     		mov	r1, r3
 1804 007e 7648     		ldr	r0, .L70+20
 1805 0080 FFF7FEFF 		bl	pushData
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 46


 620:notoriOS.c    ****             
 621:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 622:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1806              		.loc 1 622 0
 1807 0084 07F15C03 		add	r3, r7, #92
 1808 0088 1A46     		mov	r2, r3
 1809 008a 7449     		ldr	r1, .L70+24
 1810 008c 7448     		ldr	r0, .L70+28
 1811 008e FFF7FEFF 		bl	SD_write
 623:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1812              		.loc 1 623 0
 1813 0092 744A     		ldr	r2, .L70+32
 1814 0094 7149     		ldr	r1, .L70+24
 1815 0096 7248     		ldr	r0, .L70+28
 1816 0098 FFF7FEFF 		bl	SD_write
 624:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1817              		.loc 1 624 0
 1818 009c 07F14803 		add	r3, r7, #72
 1819 00a0 1A46     		mov	r2, r3
 1820 00a2 6E49     		ldr	r1, .L70+24
 1821 00a4 6E48     		ldr	r0, .L70+28
 1822 00a6 FFF7FEFF 		bl	SD_write
 625:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1823              		.loc 1 625 0
 1824 00aa 6F4A     		ldr	r2, .L70+36
 1825 00ac 6B49     		ldr	r1, .L70+24
 1826 00ae 6C48     		ldr	r0, .L70+28
 1827 00b0 FFF7FEFF 		bl	SD_write
 1828 00b4 03E0     		b	.L63
 1829              	.L64:
 626:notoriOS.c    ****         }else{
 627:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1830              		.loc 1 627 0
 1831 00b6 6D49     		ldr	r1, .L70+40
 1832 00b8 0220     		movs	r0, #2
 1833 00ba FFF7FEFF 		bl	printNotif
 1834              	.L63:
 1835              	.LBE9:
 628:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 629:notoriOS.c    ****         }
 630:notoriOS.c    ****     }
 631:notoriOS.c    ****     
 632:notoriOS.c    ****     
 633:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 634:notoriOS.c    ****     voltage_t m_voltage;
 635:notoriOS.c    ****     
 636:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 637:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1836              		.loc 1 637 0
 1837 00be 07F12C03 		add	r3, r7, #44
 1838 00c2 1846     		mov	r0, r3
 1839 00c4 FFF7FEFF 		bl	voltage_take_readings
 638:notoriOS.c    ****     
 639:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 640:notoriOS.c    ****     if(m_voltage.valid){
 1840              		.loc 1 640 0
 1841 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 47


 1842 00cc 002B     		cmp	r3, #0
 1843 00ce 00F0AF80 		beq	.L66
 641:notoriOS.c    ****         // battery voltage data
 642:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1844              		.loc 1 642 0
 1845 00d2 FB6A     		ldr	r3, [r7, #44]	@ float
 1846 00d4 1846     		mov	r0, r3
 1847 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1848 00da 0346     		mov	r3, r0
 1849 00dc 0C46     		mov	r4, r1
 1850 00de 07F14800 		add	r0, r7, #72
 1851 00e2 CDE90034 		strd	r3, [sp]
 1852 00e6 624A     		ldr	r2, .L70+44
 1853 00e8 1421     		movs	r1, #20
 1854 00ea FFF7FEFF 		bl	snprintf
 643:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1855              		.loc 1 643 0
 1856 00ee 07F14803 		add	r3, r7, #72
 1857 00f2 1A46     		mov	r2, r3
 1858 00f4 5F49     		ldr	r1, .L70+48
 1859 00f6 0020     		movs	r0, #0
 1860 00f8 FFF7FEFF 		bl	printNotif
 644:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1861              		.loc 1 644 0
 1862 00fc 07F14803 		add	r3, r7, #72
 1863 0100 FA6F     		ldr	r2, [r7, #124]
 1864 0102 1946     		mov	r1, r3
 1865 0104 5C48     		ldr	r0, .L70+52
 1866 0106 FFF7FEFF 		bl	pushData
 645:notoriOS.c    ****         
 646:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 647:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1867              		.loc 1 647 0
 1868 010a 574A     		ldr	r2, .L70+36
 1869 010c 5349     		ldr	r1, .L70+24
 1870 010e 5448     		ldr	r0, .L70+28
 1871 0110 FFF7FEFF 		bl	SD_write
 648:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1872              		.loc 1 648 0
 1873 0114 07F15C03 		add	r3, r7, #92
 1874 0118 1A46     		mov	r2, r3
 1875 011a 5049     		ldr	r1, .L70+24
 1876 011c 5048     		ldr	r0, .L70+28
 1877 011e FFF7FEFF 		bl	SD_write
 649:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1878              		.loc 1 649 0
 1879 0122 564A     		ldr	r2, .L70+56
 1880 0124 4D49     		ldr	r1, .L70+24
 1881 0126 4E48     		ldr	r0, .L70+28
 1882 0128 FFF7FEFF 		bl	SD_write
 650:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1883              		.loc 1 650 0
 1884 012c 07F14803 		add	r3, r7, #72
 1885 0130 1A46     		mov	r2, r3
 1886 0132 4A49     		ldr	r1, .L70+24
 1887 0134 4A48     		ldr	r0, .L70+28
 1888 0136 FFF7FEFF 		bl	SD_write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 48


 651:notoriOS.c    ****         
 652:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 653:notoriOS.c    ****          
 654:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1889              		.loc 1 654 0
 1890 013a 434B     		ldr	r3, .L70+4
 1891 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1892 013e 012B     		cmp	r3, #1
 1893 0140 7AD1     		bne	.L68
 1894              	.LBB10:
 655:notoriOS.c    ****             
 656:notoriOS.c    ****             // pressure transducer voltage (V) data
 657:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 658:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 659:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 660:notoriOS.c    ****             
 661:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 662:notoriOS.c    ****             pressure_t m_pressure;
 663:notoriOS.c    ****             
 664:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 665:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1895              		.loc 1 665 0
 1896 0142 3C46     		mov	r4, r7
 1897 0144 6A46     		mov	r2, sp
 1898 0146 07F13803 		add	r3, r7, #56
 1899 014a 93E80300 		ldmia	r3, {r0, r1}
 1900 014e 82E80300 		stmia	r2, {r0, r1}
 1901 0152 07F12C03 		add	r3, r7, #44
 1902 0156 0ECB     		ldmia	r3, {r1, r2, r3}
 1903 0158 2046     		mov	r0, r4
 1904 015a FFF7FEFF 		bl	pressure_calculations
 666:notoriOS.c    ****             
 667:notoriOS.c    ****             // pressure transducer current (mA) data
 668:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1905              		.loc 1 668 0
 1906 015e BB68     		ldr	r3, [r7, #8]	@ float
 1907 0160 1846     		mov	r0, r3
 1908 0162 FFF7FEFF 		bl	__aeabi_f2d
 1909 0166 0346     		mov	r3, r0
 1910 0168 0C46     		mov	r4, r1
 1911 016a 07F14800 		add	r0, r7, #72
 1912 016e CDE90034 		strd	r3, [sp]
 1913 0172 3F4A     		ldr	r2, .L70+44
 1914 0174 1421     		movs	r1, #20
 1915 0176 FFF7FEFF 		bl	snprintf
 669:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1916              		.loc 1 669 0
 1917 017a 07F14803 		add	r3, r7, #72
 1918 017e 1A46     		mov	r2, r3
 1919 0180 3F49     		ldr	r1, .L70+60
 1920 0182 0020     		movs	r0, #0
 1921 0184 FFF7FEFF 		bl	printNotif
 670:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1922              		.loc 1 670 0
 1923 0188 07F14803 		add	r3, r7, #72
 1924 018c FA6F     		ldr	r2, [r7, #124]
 1925 018e 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 49


 1926 0190 3C48     		ldr	r0, .L70+64
 1927 0192 FFF7FEFF 		bl	pushData
 671:notoriOS.c    ****             
 672:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 673:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1928              		.loc 1 673 0
 1929 0196 344A     		ldr	r2, .L70+36
 1930 0198 3049     		ldr	r1, .L70+24
 1931 019a 3148     		ldr	r0, .L70+28
 1932 019c FFF7FEFF 		bl	SD_write
 674:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1933              		.loc 1 674 0
 1934 01a0 07F15C03 		add	r3, r7, #92
 1935 01a4 1A46     		mov	r2, r3
 1936 01a6 2D49     		ldr	r1, .L70+24
 1937 01a8 2D48     		ldr	r0, .L70+28
 1938 01aa FFF7FEFF 		bl	SD_write
 675:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1939              		.loc 1 675 0
 1940 01ae 364A     		ldr	r2, .L70+68
 1941 01b0 2A49     		ldr	r1, .L70+24
 1942 01b2 2B48     		ldr	r0, .L70+28
 1943 01b4 FFF7FEFF 		bl	SD_write
 676:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1944              		.loc 1 676 0
 1945 01b8 07F14803 		add	r3, r7, #72
 1946 01bc 1A46     		mov	r2, r3
 1947 01be 2749     		ldr	r1, .L70+24
 1948 01c0 2748     		ldr	r0, .L70+28
 1949 01c2 FFF7FEFF 		bl	SD_write
 677:notoriOS.c    ****             
 678:notoriOS.c    ****             // pressure transducer depth (ft) data
 679:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1950              		.loc 1 679 0
 1951 01c6 FB68     		ldr	r3, [r7, #12]	@ float
 1952 01c8 1846     		mov	r0, r3
 1953 01ca FFF7FEFF 		bl	__aeabi_f2d
 1954 01ce 0346     		mov	r3, r0
 1955 01d0 0C46     		mov	r4, r1
 1956 01d2 07F14800 		add	r0, r7, #72
 1957 01d6 CDE90034 		strd	r3, [sp]
 1958 01da 254A     		ldr	r2, .L70+44
 1959 01dc 1421     		movs	r1, #20
 1960 01de FFF7FEFF 		bl	snprintf
 680:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1961              		.loc 1 680 0
 1962 01e2 07F14803 		add	r3, r7, #72
 1963 01e6 1A46     		mov	r2, r3
 1964 01e8 2849     		ldr	r1, .L70+72
 1965 01ea 0020     		movs	r0, #0
 1966 01ec FFF7FEFF 		bl	printNotif
 681:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1967              		.loc 1 681 0
 1968 01f0 07F14803 		add	r3, r7, #72
 1969 01f4 FA6F     		ldr	r2, [r7, #124]
 1970 01f6 1946     		mov	r1, r3
 1971 01f8 2548     		ldr	r0, .L70+76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 50


 1972 01fa FFF7FEFF 		bl	pushData
 682:notoriOS.c    ****             
 683:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 684:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1973              		.loc 1 684 0
 1974 01fe 1A4A     		ldr	r2, .L70+36
 1975 0200 1649     		ldr	r1, .L70+24
 1976 0202 1748     		ldr	r0, .L70+28
 1977 0204 FFF7FEFF 		bl	SD_write
 685:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1978              		.loc 1 685 0
 1979 0208 07F15C03 		add	r3, r7, #92
 1980 020c 1A46     		mov	r2, r3
 1981 020e 1349     		ldr	r1, .L70+24
 1982 0210 1348     		ldr	r0, .L70+28
 1983 0212 FFF7FEFF 		bl	SD_write
 686:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1984              		.loc 1 686 0
 1985 0216 1F4A     		ldr	r2, .L70+80
 1986 0218 1049     		ldr	r1, .L70+24
 1987 021a 1148     		ldr	r0, .L70+28
 1988 021c FFF7FEFF 		bl	SD_write
 687:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1989              		.loc 1 687 0
 1990 0220 07F14803 		add	r3, r7, #72
 1991 0224 1A46     		mov	r2, r3
 1992 0226 0D49     		ldr	r1, .L70+24
 1993 0228 0D48     		ldr	r0, .L70+28
 1994 022a FFF7FEFF 		bl	SD_write
 1995 022e 03E0     		b	.L68
 1996              	.L66:
 1997              	.LBE10:
 688:notoriOS.c    ****         }    
 689:notoriOS.c    ****     }else{
 690:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1998              		.loc 1 690 0
 1999 0230 1949     		ldr	r1, .L70+84
 2000 0232 0220     		movs	r0, #2
 2001 0234 FFF7FEFF 		bl	printNotif
 2002              	.L68:
 691:notoriOS.c    ****         
 692:notoriOS.c    ****     }
 693:notoriOS.c    ****         
 694:notoriOS.c    ****     
 695:notoriOS.c    ****     return 0u;
 2003              		.loc 1 695 0
 2004 0238 0023     		movs	r3, #0
 696:notoriOS.c    **** }
 2005              		.loc 1 696 0
 2006 023a 1846     		mov	r0, r3
 2007 023c 8437     		adds	r7, r7, #132
 2008              		.cfi_def_cfa_offset 12
 2009 023e BD46     		mov	sp, r7
 2010              		.cfi_def_cfa_register 13
 2011              		@ sp needed
 2012 0240 90BD     		pop	{r4, r7, pc}
 2013              	.L71:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 51


 2014 0242 00BF     		.align	2
 2015              	.L70:
 2016 0244 70020000 		.word	.LC35
 2017 0248 00000000 		.word	updatable_parameters
 2018 024c 74020000 		.word	.LC36
 2019 0250 C4000000 		.word	.LC6
 2020 0254 88020000 		.word	.LC37
 2021 0258 9C020000 		.word	.LC38
 2022 025c AC020000 		.word	.LC39
 2023 0260 00000000 		.word	Data_fileName
 2024 0264 B0020000 		.word	.LC40
 2025 0268 C4020000 		.word	.LC41
 2026 026c C8020000 		.word	.LC42
 2027 0270 F4020000 		.word	.LC43
 2028 0274 FC020000 		.word	.LC44
 2029 0278 08030000 		.word	.LC45
 2030 027c 10030000 		.word	.LC46
 2031 0280 18030000 		.word	.LC47
 2032 0284 2C030000 		.word	.LC48
 2033 0288 40030000 		.word	.LC49
 2034 028c 54030000 		.word	.LC50
 2035 0290 68030000 		.word	.LC51
 2036 0294 78030000 		.word	.LC52
 2037 0298 8C030000 		.word	.LC53
 2038              		.cfi_endproc
 2039              	.LFE76:
 2040              		.size	makeMeasurements, .-makeMeasurements
 2041              		.section	.rodata
 2042 03b3 00       		.align	2
 2043              	.LC54:
 2044 03b4 4572726F 		.ascii	"Error setting system time.\000"
 2044      72207365 
 2044      7474696E 
 2044      67207379 
 2044      7374656D 
 2045              		.section	.text.setTime,"ax",%progbits
 2046              		.align	2
 2047              		.global	setTime
 2048              		.thumb
 2049              		.thumb_func
 2050              		.type	setTime, %function
 2051              	setTime:
 2052              	.LFB77:
 697:notoriOS.c    **** 
 698:notoriOS.c    **** // ==============================================
 699:notoriOS.c    **** // Set the system time
 700:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 701:notoriOS.c    **** // ==============================================
 702:notoriOS.c    **** uint8 setTime(long timeStamp){
 2053              		.loc 1 702 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 24
 2056              		@ frame_needed = 1, uses_anonymous_args = 0
 2057 0000 80B5     		push	{r7, lr}
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 7, -8
 2060              		.cfi_offset 14, -4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 52


 2061 0002 86B0     		sub	sp, sp, #24
 2062              		.cfi_def_cfa_offset 32
 2063 0004 00AF     		add	r7, sp, #0
 2064              		.cfi_def_cfa_register 7
 2065 0006 7860     		str	r0, [r7, #4]
 703:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 704:notoriOS.c    ****     if(timeStamp <=0){
 2066              		.loc 1 704 0
 2067 0008 7B68     		ldr	r3, [r7, #4]
 2068 000a 002B     		cmp	r3, #0
 2069 000c 05DC     		bgt	.L73
 705:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 2070              		.loc 1 705 0
 2071 000e 1849     		ldr	r1, .L75
 2072 0010 0220     		movs	r0, #2
 2073 0012 FFF7FEFF 		bl	printNotif
 706:notoriOS.c    ****         return 0;  
 2074              		.loc 1 706 0
 2075 0016 0023     		movs	r3, #0
 2076 0018 25E0     		b	.L74
 2077              	.L73:
 707:notoriOS.c    ****     }
 708:notoriOS.c    ****     // Create a new pointer t of data structure tm
 709:notoriOS.c    ****     struct tm * t;
 710:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 711:notoriOS.c    ****     t = gmtime(&timeStamp);
 2078              		.loc 1 711 0
 2079 001a 3B1D     		adds	r3, r7, #4
 2080 001c 1846     		mov	r0, r3
 2081 001e FFF7FEFF 		bl	gmtime
 2082 0022 7861     		str	r0, [r7, #20]
 712:notoriOS.c    ****     
 713:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 714:notoriOS.c    ****     RTC_TIME_DATE localTime;
 715:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 2083              		.loc 1 715 0
 2084 0024 7B69     		ldr	r3, [r7, #20]
 2085 0026 1B68     		ldr	r3, [r3]
 2086 0028 DBB2     		uxtb	r3, r3
 2087 002a 3B72     		strb	r3, [r7, #8]
 716:notoriOS.c    ****     localTime.Min = t->tm_min;
 2088              		.loc 1 716 0
 2089 002c 7B69     		ldr	r3, [r7, #20]
 2090 002e 5B68     		ldr	r3, [r3, #4]
 2091 0030 DBB2     		uxtb	r3, r3
 2092 0032 7B72     		strb	r3, [r7, #9]
 717:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 2093              		.loc 1 717 0
 2094 0034 7B69     		ldr	r3, [r7, #20]
 2095 0036 9B68     		ldr	r3, [r3, #8]
 2096 0038 DBB2     		uxtb	r3, r3
 2097 003a BB72     		strb	r3, [r7, #10]
 718:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 2098              		.loc 1 718 0
 2099 003c 7B69     		ldr	r3, [r7, #20]
 2100 003e 5B69     		ldr	r3, [r3, #20]
 2101 0040 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 53


 2102 0042 03F26C73 		addw	r3, r3, #1900
 2103 0046 9BB2     		uxth	r3, r3
 2104 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 719:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2105              		.loc 1 719 0
 2106 004a 7B69     		ldr	r3, [r7, #20]
 2107 004c 1B69     		ldr	r3, [r3, #16]
 2108 004e DBB2     		uxtb	r3, r3
 2109 0050 3B74     		strb	r3, [r7, #16]
 720:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2110              		.loc 1 720 0
 2111 0052 7B69     		ldr	r3, [r7, #20]
 2112 0054 DB68     		ldr	r3, [r3, #12]
 2113 0056 DBB2     		uxtb	r3, r3
 2114 0058 3B73     		strb	r3, [r7, #12]
 721:notoriOS.c    **** 
 722:notoriOS.c    ****     // Writes time and date values as current time and date.
 723:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2115              		.loc 1 723 0
 2116 005a 07F10803 		add	r3, r7, #8
 2117 005e 1846     		mov	r0, r3
 2118 0060 FFF7FEFF 		bl	RTC_WriteTime
 724:notoriOS.c    ****     
 725:notoriOS.c    ****     // Return 1 when the system time was set properly.
 726:notoriOS.c    ****     return 1;
 2119              		.loc 1 726 0
 2120 0064 0123     		movs	r3, #1
 2121              	.L74:
 727:notoriOS.c    **** }
 2122              		.loc 1 727 0
 2123 0066 1846     		mov	r0, r3
 2124 0068 1837     		adds	r7, r7, #24
 2125              		.cfi_def_cfa_offset 8
 2126 006a BD46     		mov	sp, r7
 2127              		.cfi_def_cfa_register 13
 2128              		@ sp needed
 2129 006c 80BD     		pop	{r7, pc}
 2130              	.L76:
 2131 006e 00BF     		.align	2
 2132              	.L75:
 2133 0070 B4030000 		.word	.LC54
 2134              		.cfi_endproc
 2135              	.LFE77:
 2136              		.size	setTime, .-setTime
 2137              		.section	.rodata
 2138 03cf 00       		.align	2
 2139              	.LC55:
 2140 03d0 75706772 		.ascii	"upgrade.hex\000"
 2140      6164652E 
 2140      68657800 
 2141              		.section	.text.upgraded,"ax",%progbits
 2142              		.align	2
 2143              		.global	upgraded
 2144              		.thumb
 2145              		.thumb_func
 2146              		.type	upgraded, %function
 2147              	upgraded:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 54


 2148              	.LFB78:
 728:notoriOS.c    **** 
 729:notoriOS.c    **** //downloads and stores files on SD card
 730:notoriOS.c    **** 
 731:notoriOS.c    **** 
 732:notoriOS.c    **** 
 733:notoriOS.c    **** // ==============================================
 734:notoriOS.c    **** // Will they love it, will they hate it
 735:notoriOS.c    **** // Never fade it, I evade it
 736:notoriOS.c    **** // Cause I never really want to complicate it
 737:notoriOS.c    **** //      - Logic, Upgraded (2015)
 738:notoriOS.c    **** //
 739:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 740:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 741:notoriOS.c    **** // ==============================================
 742:notoriOS.c    **** 
 743:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2149              		.loc 1 743 0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 232
 2152              		@ frame_needed = 1, uses_anonymous_args = 0
 2153 0000 80B5     		push	{r7, lr}
 2154              		.cfi_def_cfa_offset 8
 2155              		.cfi_offset 7, -8
 2156              		.cfi_offset 14, -4
 2157 0002 C0B0     		sub	sp, sp, #256
 2158              		.cfi_def_cfa_offset 264
 2159 0004 06AF     		add	r7, sp, #24
 2160              		.cfi_def_cfa 7, 240
 2161 0006 F860     		str	r0, [r7, #12]
 2162 0008 B960     		str	r1, [r7, #8]
 2163 000a 7A60     		str	r2, [r7, #4]
 744:notoriOS.c    ****     
 745:notoriOS.c    ****     uint8 upgrade_status = 0;
 2164              		.loc 1 745 0
 2165 000c 0023     		movs	r3, #0
 2166 000e 87F8E730 		strb	r3, [r7, #231]
 746:notoriOS.c    ****     
 747:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 748:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2167              		.loc 1 748 0
 2168 0012 384B     		ldr	r3, .L81
 2169 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2170 0016 042B     		cmp	r3, #4
 2171 0018 02D0     		beq	.L78
 749:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2172              		.loc 1 749 0
 2173 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2174 001e 65E0     		b	.L80
 2175              	.L78:
 750:notoriOS.c    ****     }
 751:notoriOS.c    ****     
 752:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2176              		.loc 1 752 0
 2177 0020 354A     		ldr	r2, .L81+4
 2178 0022 07F1D803 		add	r3, r7, #216
 2179 0026 07CA     		ldmia	r2, {r0, r1, r2}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 55


 2180 0028 83E80700 		stmia	r3, {r0, r1, r2}
 753:notoriOS.c    ****     //delete file, if one exisits already
 754:notoriOS.c    ****     SD_rmfile(fileName);
 2181              		.loc 1 754 0
 2182 002c 07F1D803 		add	r3, r7, #216
 2183 0030 1846     		mov	r0, r3
 2184 0032 FFF7FEFF 		bl	SD_rmfile
 755:notoriOS.c    ****     
 756:notoriOS.c    ****     // Create http request
 757:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2185              		.loc 1 757 0
 2186 0036 314B     		ldr	r3, .L81+8
 2187 0038 0593     		str	r3, [sp, #20]
 2188 003a 0023     		movs	r3, #0
 2189 003c 0493     		str	r3, [sp, #16]
 2190 003e 304B     		ldr	r3, .L81+12
 2191 0040 0393     		str	r3, [sp, #12]
 2192 0042 304B     		ldr	r3, .L81+16
 2193 0044 0293     		str	r3, [sp, #8]
 2194 0046 304B     		ldr	r3, .L81+20
 2195 0048 0193     		str	r3, [sp, #4]
 2196 004a BB68     		ldr	r3, [r7, #8]
 2197 004c 0093     		str	r3, [sp]
 2198 004e 7B68     		ldr	r3, [r7, #4]
 2199 0050 FA68     		ldr	r2, [r7, #12]
 2200 0052 2E49     		ldr	r1, .L81+24
 2201 0054 2E48     		ldr	r0, .L81+28
 2202 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 758:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2203              		.loc 1 758 0
 2204 005a 2D4A     		ldr	r2, .L81+28
 2205 005c 2D49     		ldr	r1, .L81+32
 2206 005e 0020     		movs	r0, #0
 2207 0060 FFF7FEFF 		bl	printNotif
 759:notoriOS.c    ****     // Create array portConfig of size 200 characters
 760:notoriOS.c    ****     char portConfig[200];
 761:notoriOS.c    ****     // Print port configurations
 762:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2208              		.loc 1 762 0
 2209 0064 07F11000 		add	r0, r7, #16
 2210 0068 FB68     		ldr	r3, [r7, #12]
 2211 006a 0093     		str	r3, [sp]
 2212 006c BB68     		ldr	r3, [r7, #8]
 2213 006e 2A4A     		ldr	r2, .L81+36
 2214 0070 C821     		movs	r1, #200
 2215 0072 FFF7FEFF 		bl	snprintf
 763:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2216              		.loc 1 763 0
 2217 0076 07F11003 		add	r3, r7, #16
 2218 007a 1A46     		mov	r2, r3
 2219 007c 2749     		ldr	r1, .L81+40
 2220 007e 0020     		movs	r0, #0
 2221 0080 FFF7FEFF 		bl	printNotif
 764:notoriOS.c    ****     // AT command to configure the port
 765:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2222              		.loc 1 765 0
 2223 0084 07F11003 		add	r3, r7, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 56


 2224 0088 42F21072 		movw	r2, #10000
 2225 008c 2449     		ldr	r1, .L81+44
 2226 008e 1846     		mov	r0, r3
 2227 0090 FFF7FEFF 		bl	at_write_command
 2228 0094 0346     		mov	r3, r0
 2229 0096 87F8E730 		strb	r3, [r7, #231]
 766:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 767:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 768:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2230              		.loc 1 768 0
 2231 009a 4FF47A72 		mov	r2, #1000
 2232 009e 2149     		ldr	r1, .L81+48
 2233 00a0 2148     		ldr	r0, .L81+52
 2234 00a2 FFF7FEFF 		bl	at_write_command
 2235 00a6 0346     		mov	r3, r0
 2236 00a8 87F8E730 		strb	r3, [r7, #231]
 769:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 770:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2237              		.loc 1 770 0
 2238 00ac 1848     		ldr	r0, .L81+28
 2239 00ae FFF7FEFF 		bl	strlen
 2240 00b2 0346     		mov	r3, r0
 2241 00b4 1A46     		mov	r2, r3
 2242 00b6 164B     		ldr	r3, .L81+28
 2243 00b8 1344     		add	r3, r3, r2
 2244 00ba 1C49     		ldr	r1, .L81+56
 2245 00bc 1A46     		mov	r2, r3
 2246 00be 0B46     		mov	r3, r1
 2247 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2248 00c2 1380     		strh	r3, [r2]	@ unaligned
 771:notoriOS.c    ****     // AT command to send http request
 772:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2249              		.loc 1 772 0
 2250 00c4 41F28832 		movw	r2, #5000
 2251 00c8 1549     		ldr	r1, .L81+44
 2252 00ca 1148     		ldr	r0, .L81+28
 2253 00cc FFF7FEFF 		bl	at_write_command
 2254 00d0 0346     		mov	r3, r0
 2255 00d2 87F8E730 		strb	r3, [r7, #231]
 773:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 774:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 775:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2256              		.loc 1 775 0
 2257 00d6 41F28832 		movw	r2, #5000
 2258 00da 1549     		ldr	r1, .L81+60
 2259 00dc 1548     		ldr	r0, .L81+64
 2260 00de FFF7FEFF 		bl	at_write_command
 2261 00e2 0346     		mov	r3, r0
 2262 00e4 87F8E730 		strb	r3, [r7, #231]
 776:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 777:notoriOS.c    ****     
 778:notoriOS.c    ****     
 779:notoriOS.c    ****     return upgrade_status;
 2263              		.loc 1 779 0
 2264 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2265              	.L80:
 780:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 57


 781:notoriOS.c    **** }
 2266              		.loc 1 781 0 discriminator 1
 2267 00ec 1846     		mov	r0, r3
 2268 00ee E837     		adds	r7, r7, #232
 2269              		.cfi_def_cfa_offset 8
 2270 00f0 BD46     		mov	sp, r7
 2271              		.cfi_def_cfa_register 13
 2272              		@ sp needed
 2273 00f2 80BD     		pop	{r7, pc}
 2274              	.L82:
 2275              		.align	2
 2276              	.L81:
 2277 00f4 00000000 		.word	modem_state
 2278 00f8 D0030000 		.word	.LC55
 2279 00fc 68010000 		.word	.LC16
 2280 0100 6C010000 		.word	.LC17
 2281 0104 70010000 		.word	.LC18
 2282 0108 78010000 		.word	.LC19
 2283 010c 00000000 		.word	http_body
 2284 0110 00000000 		.word	http_request
 2285 0114 80010000 		.word	.LC20
 2286 0118 98010000 		.word	.LC21
 2287 011c B4010000 		.word	.LC22
 2288 0120 B8010000 		.word	.LC23
 2289 0124 E8010000 		.word	.LC26
 2290 0128 EC010000 		.word	.LC27
 2291 012c FC010000 		.word	.LC28
 2292 0130 18020000 		.word	.LC31
 2293 0134 20020000 		.word	.LC32
 2294              		.cfi_endproc
 2295              	.LFE78:
 2296              		.size	upgraded, .-upgraded
 2297              		.text
 2298              	.Letext0:
 2299              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2300              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2301              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2302              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2303              		.file 6 "testing.h"
 2304              		.file 7 "level_sensor.h"
 2305              		.file 8 "voltages.h"
 2306              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2307              		.file 10 "data.h"
 2308              		.file 11 "modem.h"
 2309              		.file 12 "notoriOS.h"
 2310              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2311              		.file 14 "downstream_level_sensor.h"
 2312              		.file 15 "valve.h"
 2313              		.file 16 "App_LED.h"
 2314              		.section	.debug_info,"",%progbits
 2315              	.Ldebug_info0:
 2316 0000 990D0000 		.4byte	0xd99
 2317 0004 0400     		.2byte	0x4
 2318 0006 00000000 		.4byte	.Ldebug_abbrev0
 2319 000a 04       		.byte	0x4
 2320 000b 01       		.uleb128 0x1
 2321 000c AC000000 		.4byte	.LASF183
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 58


 2322 0010 0C       		.byte	0xc
 2323 0011 1E090000 		.4byte	.LASF184
 2324 0015 2C000000 		.4byte	.LASF185
 2325 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2326 001d 00000000 		.4byte	0
 2327 0021 00000000 		.4byte	.Ldebug_line0
 2328 0025 02       		.uleb128 0x2
 2329 0026 01       		.byte	0x1
 2330 0027 06       		.byte	0x6
 2331 0028 7D000000 		.4byte	.LASF0
 2332 002c 02       		.uleb128 0x2
 2333 002d 01       		.byte	0x1
 2334 002e 08       		.byte	0x8
 2335 002f 94060000 		.4byte	.LASF1
 2336 0033 02       		.uleb128 0x2
 2337 0034 02       		.byte	0x2
 2338 0035 05       		.byte	0x5
 2339 0036 AD040000 		.4byte	.LASF2
 2340 003a 02       		.uleb128 0x2
 2341 003b 02       		.byte	0x2
 2342 003c 07       		.byte	0x7
 2343 003d 5E080000 		.4byte	.LASF3
 2344 0041 03       		.uleb128 0x3
 2345 0042 19080000 		.4byte	.LASF9
 2346 0046 02       		.byte	0x2
 2347 0047 3F       		.byte	0x3f
 2348 0048 4C000000 		.4byte	0x4c
 2349 004c 02       		.uleb128 0x2
 2350 004d 04       		.byte	0x4
 2351 004e 05       		.byte	0x5
 2352 004f 87020000 		.4byte	.LASF4
 2353 0053 02       		.uleb128 0x2
 2354 0054 04       		.byte	0x4
 2355 0055 07       		.byte	0x7
 2356 0056 EA030000 		.4byte	.LASF5
 2357 005a 02       		.uleb128 0x2
 2358 005b 08       		.byte	0x8
 2359 005c 05       		.byte	0x5
 2360 005d C7010000 		.4byte	.LASF6
 2361 0061 02       		.uleb128 0x2
 2362 0062 08       		.byte	0x8
 2363 0063 07       		.byte	0x7
 2364 0064 4B010000 		.4byte	.LASF7
 2365 0068 04       		.uleb128 0x4
 2366 0069 04       		.byte	0x4
 2367 006a 05       		.byte	0x5
 2368 006b 696E7400 		.ascii	"int\000"
 2369 006f 02       		.uleb128 0x2
 2370 0070 04       		.byte	0x4
 2371 0071 07       		.byte	0x7
 2372 0072 EB070000 		.4byte	.LASF8
 2373 0076 03       		.uleb128 0x3
 2374 0077 8C060000 		.4byte	.LASF10
 2375 007b 03       		.byte	0x3
 2376 007c 2C       		.byte	0x2c
 2377 007d 41000000 		.4byte	0x41
 2378 0081 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 59


 2379 0082 BE020000 		.4byte	.LASF11
 2380 0086 04       		.byte	0x4
 2381 0087 9201     		.2byte	0x192
 2382 0089 2C000000 		.4byte	0x2c
 2383 008d 05       		.uleb128 0x5
 2384 008e 08000000 		.4byte	.LASF12
 2385 0092 04       		.byte	0x4
 2386 0093 9301     		.2byte	0x193
 2387 0095 3A000000 		.4byte	0x3a
 2388 0099 05       		.uleb128 0x5
 2389 009a 0F030000 		.4byte	.LASF13
 2390 009e 04       		.byte	0x4
 2391 009f 9401     		.2byte	0x194
 2392 00a1 53000000 		.4byte	0x53
 2393 00a5 05       		.uleb128 0x5
 2394 00a6 70040000 		.4byte	.LASF14
 2395 00aa 04       		.byte	0x4
 2396 00ab 9501     		.2byte	0x195
 2397 00ad 25000000 		.4byte	0x25
 2398 00b1 05       		.uleb128 0x5
 2399 00b2 A9050000 		.4byte	.LASF15
 2400 00b6 04       		.byte	0x4
 2401 00b7 9601     		.2byte	0x196
 2402 00b9 33000000 		.4byte	0x33
 2403 00bd 05       		.uleb128 0x5
 2404 00be E9020000 		.4byte	.LASF16
 2405 00c2 04       		.byte	0x4
 2406 00c3 9701     		.2byte	0x197
 2407 00c5 4C000000 		.4byte	0x4c
 2408 00c9 02       		.uleb128 0x2
 2409 00ca 04       		.byte	0x4
 2410 00cb 04       		.byte	0x4
 2411 00cc 2A060000 		.4byte	.LASF17
 2412 00d0 02       		.uleb128 0x2
 2413 00d1 08       		.byte	0x8
 2414 00d2 04       		.byte	0x4
 2415 00d3 B2090000 		.4byte	.LASF18
 2416 00d7 02       		.uleb128 0x2
 2417 00d8 01       		.byte	0x1
 2418 00d9 08       		.byte	0x8
 2419 00da E6070000 		.4byte	.LASF19
 2420 00de 02       		.uleb128 0x2
 2421 00df 08       		.byte	0x8
 2422 00e0 04       		.byte	0x4
 2423 00e1 C8070000 		.4byte	.LASF20
 2424 00e5 02       		.uleb128 0x2
 2425 00e6 04       		.byte	0x4
 2426 00e7 07       		.byte	0x7
 2427 00e8 63050000 		.4byte	.LASF21
 2428 00ec 06       		.uleb128 0x6
 2429 00ed 04       		.byte	0x4
 2430 00ee D7000000 		.4byte	0xd7
 2431 00f2 07       		.uleb128 0x7
 2432 00f3 D7000000 		.4byte	0xd7
 2433 00f7 02010000 		.4byte	0x102
 2434 00fb 08       		.uleb128 0x8
 2435 00fc E5000000 		.4byte	0xe5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 60


 2436 0100 17       		.byte	0x17
 2437 0101 00       		.byte	0
 2438 0102 09       		.uleb128 0x9
 2439 0103 0C       		.byte	0xc
 2440 0104 05       		.byte	0x5
 2441 0105 30       		.byte	0x30
 2442 0106 6B010000 		.4byte	0x16b
 2443 010a 0A       		.uleb128 0xa
 2444 010b 53656300 		.ascii	"Sec\000"
 2445 010f 05       		.byte	0x5
 2446 0110 32       		.byte	0x32
 2447 0111 81000000 		.4byte	0x81
 2448 0115 00       		.byte	0
 2449 0116 0A       		.uleb128 0xa
 2450 0117 4D696E00 		.ascii	"Min\000"
 2451 011b 05       		.byte	0x5
 2452 011c 33       		.byte	0x33
 2453 011d 81000000 		.4byte	0x81
 2454 0121 01       		.byte	0x1
 2455 0122 0B       		.uleb128 0xb
 2456 0123 62010000 		.4byte	.LASF22
 2457 0127 05       		.byte	0x5
 2458 0128 34       		.byte	0x34
 2459 0129 81000000 		.4byte	0x81
 2460 012d 02       		.byte	0x2
 2461 012e 0B       		.uleb128 0xb
 2462 012f F1060000 		.4byte	.LASF23
 2463 0133 05       		.byte	0x5
 2464 0134 35       		.byte	0x35
 2465 0135 81000000 		.4byte	0x81
 2466 0139 03       		.byte	0x3
 2467 013a 0B       		.uleb128 0xb
 2468 013b 2B040000 		.4byte	.LASF24
 2469 013f 05       		.byte	0x5
 2470 0140 36       		.byte	0x36
 2471 0141 81000000 		.4byte	0x81
 2472 0145 04       		.byte	0x4
 2473 0146 0B       		.uleb128 0xb
 2474 0147 6C090000 		.4byte	.LASF25
 2475 014b 05       		.byte	0x5
 2476 014c 37       		.byte	0x37
 2477 014d 8D000000 		.4byte	0x8d
 2478 0151 06       		.byte	0x6
 2479 0152 0B       		.uleb128 0xb
 2480 0153 45010000 		.4byte	.LASF26
 2481 0157 05       		.byte	0x5
 2482 0158 38       		.byte	0x38
 2483 0159 81000000 		.4byte	0x81
 2484 015d 08       		.byte	0x8
 2485 015e 0B       		.uleb128 0xb
 2486 015f 81060000 		.4byte	.LASF27
 2487 0163 05       		.byte	0x5
 2488 0164 39       		.byte	0x39
 2489 0165 8D000000 		.4byte	0x8d
 2490 0169 0A       		.byte	0xa
 2491 016a 00       		.byte	0
 2492 016b 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 61


 2493 016c D0050000 		.4byte	.LASF28
 2494 0170 05       		.byte	0x5
 2495 0171 3A       		.byte	0x3a
 2496 0172 76010000 		.4byte	0x176
 2497 0176 0C       		.uleb128 0xc
 2498 0177 02010000 		.4byte	0x102
 2499 017b 0D       		.uleb128 0xd
 2500 017c 8101     		.2byte	0x181
 2501 017e 06       		.byte	0x6
 2502 017f 0A       		.byte	0xa
 2503 0180 A9010000 		.4byte	0x1a9
 2504 0184 0B       		.uleb128 0xb
 2505 0185 77060000 		.4byte	.LASF29
 2506 0189 06       		.byte	0x6
 2507 018a 0C       		.byte	0xc
 2508 018b A9010000 		.4byte	0x1a9
 2509 018f 00       		.byte	0
 2510 0190 0B       		.uleb128 0xb
 2511 0191 D1080000 		.4byte	.LASF30
 2512 0195 06       		.byte	0x6
 2513 0196 0D       		.byte	0xd
 2514 0197 81000000 		.4byte	0x81
 2515 019b 80       		.byte	0x80
 2516 019c 0B       		.uleb128 0xb
 2517 019d 13070000 		.4byte	.LASF31
 2518 01a1 06       		.byte	0x6
 2519 01a2 0F       		.byte	0xf
 2520 01a3 B9010000 		.4byte	0x1b9
 2521 01a7 81       		.byte	0x81
 2522 01a8 00       		.byte	0
 2523 01a9 07       		.uleb128 0x7
 2524 01aa D7000000 		.4byte	0xd7
 2525 01ae B9010000 		.4byte	0x1b9
 2526 01b2 08       		.uleb128 0x8
 2527 01b3 E5000000 		.4byte	0xe5
 2528 01b7 7F       		.byte	0x7f
 2529 01b8 00       		.byte	0
 2530 01b9 07       		.uleb128 0x7
 2531 01ba D7000000 		.4byte	0xd7
 2532 01be C9010000 		.4byte	0x1c9
 2533 01c2 08       		.uleb128 0x8
 2534 01c3 E5000000 		.4byte	0xe5
 2535 01c7 FF       		.byte	0xff
 2536 01c8 00       		.byte	0
 2537 01c9 03       		.uleb128 0x3
 2538 01ca FB060000 		.4byte	.LASF32
 2539 01ce 06       		.byte	0x6
 2540 01cf 10       		.byte	0x10
 2541 01d0 7B010000 		.4byte	0x17b
 2542 01d4 09       		.uleb128 0x9
 2543 01d5 1A       		.byte	0x1a
 2544 01d6 07       		.byte	0x7
 2545 01d7 10       		.byte	0x10
 2546 01d8 0D020000 		.4byte	0x20d
 2547 01dc 0B       		.uleb128 0xb
 2548 01dd 1F030000 		.4byte	.LASF33
 2549 01e1 07       		.byte	0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 62


 2550 01e2 11       		.byte	0x11
 2551 01e3 0D020000 		.4byte	0x20d
 2552 01e7 00       		.byte	0
 2553 01e8 0B       		.uleb128 0xb
 2554 01e9 48080000 		.4byte	.LASF34
 2555 01ed 07       		.byte	0x7
 2556 01ee 12       		.byte	0x12
 2557 01ef B1000000 		.4byte	0xb1
 2558 01f3 16       		.byte	0x16
 2559 01f4 0B       		.uleb128 0xb
 2560 01f5 C2030000 		.4byte	.LASF35
 2561 01f9 07       		.byte	0x7
 2562 01fa 13       		.byte	0x13
 2563 01fb 81000000 		.4byte	0x81
 2564 01ff 18       		.byte	0x18
 2565 0200 0B       		.uleb128 0xb
 2566 0201 17000000 		.4byte	.LASF36
 2567 0205 07       		.byte	0x7
 2568 0206 14       		.byte	0x14
 2569 0207 81000000 		.4byte	0x81
 2570 020b 19       		.byte	0x19
 2571 020c 00       		.byte	0
 2572 020d 07       		.uleb128 0x7
 2573 020e B1000000 		.4byte	0xb1
 2574 0212 1D020000 		.4byte	0x21d
 2575 0216 08       		.uleb128 0x8
 2576 0217 E5000000 		.4byte	0xe5
 2577 021b 0A       		.byte	0xa
 2578 021c 00       		.byte	0
 2579 021d 03       		.uleb128 0x3
 2580 021e 30060000 		.4byte	.LASF37
 2581 0222 07       		.byte	0x7
 2582 0223 15       		.byte	0x15
 2583 0224 D4010000 		.4byte	0x1d4
 2584 0228 09       		.uleb128 0x9
 2585 0229 14       		.byte	0x14
 2586 022a 08       		.byte	0x8
 2587 022b 13       		.byte	0x13
 2588 022c 6D020000 		.4byte	0x26d
 2589 0230 0B       		.uleb128 0xb
 2590 0231 1B040000 		.4byte	.LASF38
 2591 0235 08       		.byte	0x8
 2592 0236 14       		.byte	0x14
 2593 0237 C9000000 		.4byte	0xc9
 2594 023b 00       		.byte	0
 2595 023c 0B       		.uleb128 0xb
 2596 023d 13020000 		.4byte	.LASF39
 2597 0241 08       		.byte	0x8
 2598 0242 15       		.byte	0x15
 2599 0243 C9000000 		.4byte	0xc9
 2600 0247 04       		.byte	0x4
 2601 0248 0B       		.uleb128 0xb
 2602 0249 21020000 		.4byte	.LASF40
 2603 024d 08       		.byte	0x8
 2604 024e 16       		.byte	0x16
 2605 024f C9000000 		.4byte	0xc9
 2606 0253 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 63


 2607 0254 0B       		.uleb128 0xb
 2608 0255 0D060000 		.4byte	.LASF41
 2609 0259 08       		.byte	0x8
 2610 025a 17       		.byte	0x17
 2611 025b C9000000 		.4byte	0xc9
 2612 025f 0C       		.byte	0xc
 2613 0260 0B       		.uleb128 0xb
 2614 0261 84070000 		.4byte	.LASF42
 2615 0265 08       		.byte	0x8
 2616 0266 18       		.byte	0x18
 2617 0267 81000000 		.4byte	0x81
 2618 026b 10       		.byte	0x10
 2619 026c 00       		.byte	0
 2620 026d 03       		.uleb128 0x3
 2621 026e E5090000 		.4byte	.LASF43
 2622 0272 08       		.byte	0x8
 2623 0273 19       		.byte	0x19
 2624 0274 28020000 		.4byte	0x228
 2625 0278 09       		.uleb128 0x9
 2626 0279 10       		.byte	0x10
 2627 027a 08       		.byte	0x8
 2628 027b 1B       		.byte	0x1b
 2629 027c B1020000 		.4byte	0x2b1
 2630 0280 0B       		.uleb128 0xb
 2631 0281 7F030000 		.4byte	.LASF44
 2632 0285 08       		.byte	0x8
 2633 0286 1C       		.byte	0x1c
 2634 0287 C9000000 		.4byte	0xc9
 2635 028b 00       		.byte	0
 2636 028c 0B       		.uleb128 0xb
 2637 028d A9020000 		.4byte	.LASF45
 2638 0291 08       		.byte	0x8
 2639 0292 1D       		.byte	0x1d
 2640 0293 C9000000 		.4byte	0xc9
 2641 0297 04       		.byte	0x4
 2642 0298 0B       		.uleb128 0xb
 2643 0299 73070000 		.4byte	.LASF46
 2644 029d 08       		.byte	0x8
 2645 029e 1E       		.byte	0x1e
 2646 029f C9000000 		.4byte	0xc9
 2647 02a3 08       		.byte	0x8
 2648 02a4 0B       		.uleb128 0xb
 2649 02a5 DD060000 		.4byte	.LASF47
 2650 02a9 08       		.byte	0x8
 2651 02aa 1F       		.byte	0x1f
 2652 02ab C9000000 		.4byte	0xc9
 2653 02af 0C       		.byte	0xc
 2654 02b0 00       		.byte	0
 2655 02b1 03       		.uleb128 0x3
 2656 02b2 76090000 		.4byte	.LASF48
 2657 02b6 08       		.byte	0x8
 2658 02b7 20       		.byte	0x20
 2659 02b8 78020000 		.4byte	0x278
 2660 02bc 0E       		.uleb128 0xe
 2661 02bd 746D00   		.ascii	"tm\000"
 2662 02c0 24       		.byte	0x24
 2663 02c1 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 64


 2664 02c2 21       		.byte	0x21
 2665 02c3 34030000 		.4byte	0x334
 2666 02c7 0B       		.uleb128 0xb
 2667 02c8 A6080000 		.4byte	.LASF49
 2668 02cc 09       		.byte	0x9
 2669 02cd 23       		.byte	0x23
 2670 02ce 68000000 		.4byte	0x68
 2671 02d2 00       		.byte	0
 2672 02d3 0B       		.uleb128 0xb
 2673 02d4 45050000 		.4byte	.LASF50
 2674 02d8 09       		.byte	0x9
 2675 02d9 24       		.byte	0x24
 2676 02da 68000000 		.4byte	0x68
 2677 02de 04       		.byte	0x4
 2678 02df 0B       		.uleb128 0xb
 2679 02e0 0F000000 		.4byte	.LASF51
 2680 02e4 09       		.byte	0x9
 2681 02e5 25       		.byte	0x25
 2682 02e6 68000000 		.4byte	0x68
 2683 02ea 08       		.byte	0x8
 2684 02eb 0B       		.uleb128 0xb
 2685 02ec 78080000 		.4byte	.LASF52
 2686 02f0 09       		.byte	0x9
 2687 02f1 26       		.byte	0x26
 2688 02f2 68000000 		.4byte	0x68
 2689 02f6 0C       		.byte	0xc
 2690 02f7 0B       		.uleb128 0xb
 2691 02f8 4A030000 		.4byte	.LASF53
 2692 02fc 09       		.byte	0x9
 2693 02fd 27       		.byte	0x27
 2694 02fe 68000000 		.4byte	0x68
 2695 0302 10       		.byte	0x10
 2696 0303 0B       		.uleb128 0xb
 2697 0304 6D030000 		.4byte	.LASF54
 2698 0308 09       		.byte	0x9
 2699 0309 28       		.byte	0x28
 2700 030a 68000000 		.4byte	0x68
 2701 030e 14       		.byte	0x14
 2702 030f 0B       		.uleb128 0xb
 2703 0310 9B070000 		.4byte	.LASF55
 2704 0314 09       		.byte	0x9
 2705 0315 29       		.byte	0x29
 2706 0316 68000000 		.4byte	0x68
 2707 031a 18       		.byte	0x18
 2708 031b 0B       		.uleb128 0xb
 2709 031c 88050000 		.4byte	.LASF56
 2710 0320 09       		.byte	0x9
 2711 0321 2A       		.byte	0x2a
 2712 0322 68000000 		.4byte	0x68
 2713 0326 1C       		.byte	0x1c
 2714 0327 0B       		.uleb128 0xb
 2715 0328 54040000 		.4byte	.LASF57
 2716 032c 09       		.byte	0x9
 2717 032d 2B       		.byte	0x2b
 2718 032e 68000000 		.4byte	0x68
 2719 0332 20       		.byte	0x20
 2720 0333 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 65


 2721 0334 09       		.uleb128 0x9
 2722 0335 2C       		.byte	0x2c
 2723 0336 0A       		.byte	0xa
 2724 0337 14       		.byte	0x14
 2725 0338 61030000 		.4byte	0x361
 2726 033c 0A       		.uleb128 0xa
 2727 033d 6B657900 		.ascii	"key\000"
 2728 0341 0A       		.byte	0xa
 2729 0342 15       		.byte	0x15
 2730 0343 61030000 		.4byte	0x361
 2731 0347 00       		.byte	0
 2732 0348 0B       		.uleb128 0xb
 2733 0349 62030000 		.4byte	.LASF58
 2734 034d 0A       		.byte	0xa
 2735 034e 16       		.byte	0x16
 2736 034f 61030000 		.4byte	0x361
 2737 0353 14       		.byte	0x14
 2738 0354 0B       		.uleb128 0xb
 2739 0355 C6050000 		.4byte	.LASF59
 2740 0359 0A       		.byte	0xa
 2741 035a 17       		.byte	0x17
 2742 035b BD000000 		.4byte	0xbd
 2743 035f 28       		.byte	0x28
 2744 0360 00       		.byte	0
 2745 0361 07       		.uleb128 0x7
 2746 0362 D7000000 		.4byte	0xd7
 2747 0366 71030000 		.4byte	0x371
 2748 036a 08       		.uleb128 0x8
 2749 036b E5000000 		.4byte	0xe5
 2750 036f 13       		.byte	0x13
 2751 0370 00       		.byte	0
 2752 0371 03       		.uleb128 0x3
 2753 0372 AB030000 		.4byte	.LASF60
 2754 0376 0A       		.byte	0xa
 2755 0377 19       		.byte	0x19
 2756 0378 34030000 		.4byte	0x334
 2757 037c 09       		.uleb128 0x9
 2758 037d 3C       		.byte	0x3c
 2759 037e 0B       		.byte	0xb
 2760 037f 36       		.byte	0x36
 2761 0380 A9030000 		.4byte	0x3a9
 2762 0384 0B       		.uleb128 0xb
 2763 0385 71080000 		.4byte	.LASF61
 2764 0389 0B       		.byte	0xb
 2765 038a 37       		.byte	0x37
 2766 038b 61030000 		.4byte	0x361
 2767 038f 00       		.byte	0
 2768 0390 0B       		.uleb128 0xb
 2769 0391 16030000 		.4byte	.LASF62
 2770 0395 0B       		.byte	0xb
 2771 0396 38       		.byte	0x38
 2772 0397 61030000 		.4byte	0x361
 2773 039b 14       		.byte	0x14
 2774 039c 0B       		.uleb128 0xb
 2775 039d 0E070000 		.4byte	.LASF63
 2776 03a1 0B       		.byte	0xb
 2777 03a2 39       		.byte	0x39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 66


 2778 03a3 61030000 		.4byte	0x361
 2779 03a7 28       		.byte	0x28
 2780 03a8 00       		.byte	0
 2781 03a9 03       		.uleb128 0x3
 2782 03aa 59020000 		.4byte	.LASF64
 2783 03ae 0B       		.byte	0xb
 2784 03af 3B       		.byte	0x3b
 2785 03b0 7C030000 		.4byte	0x37c
 2786 03b4 09       		.uleb128 0x9
 2787 03b5 20       		.byte	0x20
 2788 03b6 0B       		.byte	0xb
 2789 03b7 3D       		.byte	0x3d
 2790 03b8 1D040000 		.4byte	0x41d
 2791 03bc 0B       		.uleb128 0xb
 2792 03bd 81020000 		.4byte	.LASF65
 2793 03c1 0B       		.byte	0xb
 2794 03c2 3E       		.byte	0x3e
 2795 03c3 68000000 		.4byte	0x68
 2796 03c7 00       		.byte	0
 2797 03c8 0A       		.uleb128 0xa
 2798 03c9 62657200 		.ascii	"ber\000"
 2799 03cd 0B       		.byte	0xb
 2800 03ce 3F       		.byte	0x3f
 2801 03cf 68000000 		.4byte	0x68
 2802 03d3 04       		.byte	0x4
 2803 03d4 0B       		.uleb128 0xb
 2804 03d5 EC060000 		.4byte	.LASF66
 2805 03d9 0B       		.byte	0xb
 2806 03da 40       		.byte	0x40
 2807 03db 68000000 		.4byte	0x68
 2808 03df 08       		.byte	0x8
 2809 03e0 0B       		.uleb128 0xb
 2810 03e1 DD010000 		.4byte	.LASF67
 2811 03e5 0B       		.byte	0xb
 2812 03e6 41       		.byte	0x41
 2813 03e7 68000000 		.4byte	0x68
 2814 03eb 0C       		.byte	0xc
 2815 03ec 0B       		.uleb128 0xb
 2816 03ed B7060000 		.4byte	.LASF68
 2817 03f1 0B       		.byte	0xb
 2818 03f2 42       		.byte	0x42
 2819 03f3 68000000 		.4byte	0x68
 2820 03f7 10       		.byte	0x10
 2821 03f8 0B       		.uleb128 0xb
 2822 03f9 B2060000 		.4byte	.LASF69
 2823 03fd 0B       		.byte	0xb
 2824 03fe 43       		.byte	0x43
 2825 03ff 68000000 		.4byte	0x68
 2826 0403 14       		.byte	0x14
 2827 0404 0B       		.uleb128 0xb
 2828 0405 F0010000 		.4byte	.LASF70
 2829 0409 0B       		.byte	0xb
 2830 040a 44       		.byte	0x44
 2831 040b 68000000 		.4byte	0x68
 2832 040f 18       		.byte	0x18
 2833 0410 0B       		.uleb128 0xb
 2834 0411 90020000 		.4byte	.LASF71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 67


 2835 0415 0B       		.byte	0xb
 2836 0416 45       		.byte	0x45
 2837 0417 68000000 		.4byte	0x68
 2838 041b 1C       		.byte	0x1c
 2839 041c 00       		.byte	0
 2840 041d 03       		.uleb128 0x3
 2841 041e 65070000 		.4byte	.LASF72
 2842 0422 0B       		.byte	0xb
 2843 0423 47       		.byte	0x47
 2844 0424 B4030000 		.4byte	0x3b4
 2845 0428 09       		.uleb128 0x9
 2846 0429 09       		.byte	0x9
 2847 042a 0B       		.byte	0xb
 2848 042b 53       		.byte	0x53
 2849 042c 9D040000 		.4byte	0x49d
 2850 0430 0B       		.uleb128 0xb
 2851 0431 EF020000 		.4byte	.LASF73
 2852 0435 0B       		.byte	0xb
 2853 0436 55       		.byte	0x55
 2854 0437 81000000 		.4byte	0x81
 2855 043b 00       		.byte	0
 2856 043c 0B       		.uleb128 0xb
 2857 043d 63090000 		.4byte	.LASF74
 2858 0441 0B       		.byte	0xb
 2859 0442 57       		.byte	0x57
 2860 0443 9D040000 		.4byte	0x49d
 2861 0447 01       		.byte	0x1
 2862 0448 0B       		.uleb128 0xb
 2863 0449 2C080000 		.4byte	.LASF75
 2864 044d 0B       		.byte	0xb
 2865 044e 59       		.byte	0x59
 2866 044f 81000000 		.4byte	0x81
 2867 0453 02       		.byte	0x2
 2868 0454 0B       		.uleb128 0xb
 2869 0455 D3060000 		.4byte	.LASF76
 2870 0459 0B       		.byte	0xb
 2871 045a 5B       		.byte	0x5b
 2872 045b 81000000 		.4byte	0x81
 2873 045f 03       		.byte	0x3
 2874 0460 0B       		.uleb128 0xb
 2875 0461 51030000 		.4byte	.LASF77
 2876 0465 0B       		.byte	0xb
 2877 0466 5E       		.byte	0x5e
 2878 0467 81000000 		.4byte	0x81
 2879 046b 04       		.byte	0x4
 2880 046c 0B       		.uleb128 0xb
 2881 046d 06090000 		.4byte	.LASF78
 2882 0471 0B       		.byte	0xb
 2883 0472 63       		.byte	0x63
 2884 0473 81000000 		.4byte	0x81
 2885 0477 05       		.byte	0x5
 2886 0478 0B       		.uleb128 0xb
 2887 0479 A3070000 		.4byte	.LASF79
 2888 047d 0B       		.byte	0xb
 2889 047e 65       		.byte	0x65
 2890 047f 81000000 		.4byte	0x81
 2891 0483 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 68


 2892 0484 0B       		.uleb128 0xb
 2893 0485 89080000 		.4byte	.LASF80
 2894 0489 0B       		.byte	0xb
 2895 048a 66       		.byte	0x66
 2896 048b 81000000 		.4byte	0x81
 2897 048f 07       		.byte	0x7
 2898 0490 0B       		.uleb128 0xb
 2899 0491 C6080000 		.4byte	.LASF81
 2900 0495 0B       		.byte	0xb
 2901 0496 67       		.byte	0x67
 2902 0497 81000000 		.4byte	0x81
 2903 049b 08       		.byte	0x8
 2904 049c 00       		.byte	0
 2905 049d 02       		.uleb128 0x2
 2906 049e 01       		.byte	0x1
 2907 049f 02       		.byte	0x2
 2908 04a0 86060000 		.4byte	.LASF82
 2909 04a4 03       		.uleb128 0x3
 2910 04a5 05050000 		.4byte	.LASF83
 2911 04a9 0B       		.byte	0xb
 2912 04aa 69       		.byte	0x69
 2913 04ab 28040000 		.4byte	0x428
 2914 04af 09       		.uleb128 0x9
 2915 04b0 06       		.byte	0x6
 2916 04b1 0C       		.byte	0xc
 2917 04b2 30       		.byte	0x30
 2918 04b3 E8040000 		.4byte	0x4e8
 2919 04b7 0B       		.uleb128 0xb
 2920 04b8 32030000 		.4byte	.LASF84
 2921 04bc 0C       		.byte	0xc
 2922 04bd 32       		.byte	0x32
 2923 04be 8D000000 		.4byte	0x8d
 2924 04c2 00       		.byte	0
 2925 04c3 0B       		.uleb128 0xb
 2926 04c4 4D090000 		.4byte	.LASF85
 2927 04c8 0C       		.byte	0xc
 2928 04c9 33       		.byte	0x33
 2929 04ca B1000000 		.4byte	0xb1
 2930 04ce 02       		.byte	0x2
 2931 04cf 0B       		.uleb128 0xb
 2932 04d0 3F090000 		.4byte	.LASF86
 2933 04d4 0C       		.byte	0xc
 2934 04d5 34       		.byte	0x34
 2935 04d6 81000000 		.4byte	0x81
 2936 04da 04       		.byte	0x4
 2937 04db 0B       		.uleb128 0xb
 2938 04dc 89000000 		.4byte	.LASF87
 2939 04e0 0C       		.byte	0xc
 2940 04e1 35       		.byte	0x35
 2941 04e2 81000000 		.4byte	0x81
 2942 04e6 05       		.byte	0x5
 2943 04e7 00       		.byte	0
 2944 04e8 03       		.uleb128 0x3
 2945 04e9 A3020000 		.4byte	.LASF88
 2946 04ed 0C       		.byte	0xc
 2947 04ee 38       		.byte	0x38
 2948 04ef F3040000 		.4byte	0x4f3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 69


 2949 04f3 0C       		.uleb128 0xc
 2950 04f4 AF040000 		.4byte	0x4af
 2951 04f8 09       		.uleb128 0x9
 2952 04f9 1C       		.byte	0x1c
 2953 04fa 0C       		.byte	0xc
 2954 04fb 3B       		.byte	0x3b
 2955 04fc 19050000 		.4byte	0x519
 2956 0500 0B       		.uleb128 0xb
 2957 0501 5D040000 		.4byte	.LASF89
 2958 0505 0C       		.byte	0xc
 2959 0506 3D       		.byte	0x3d
 2960 0507 19050000 		.4byte	0x519
 2961 050b 00       		.byte	0
 2962 050c 0B       		.uleb128 0xb
 2963 050d 9C090000 		.4byte	.LASF90
 2964 0511 0C       		.byte	0xc
 2965 0512 3E       		.byte	0x3e
 2966 0513 F2000000 		.4byte	0xf2
 2967 0517 04       		.byte	0x4
 2968 0518 00       		.byte	0
 2969 0519 06       		.uleb128 0x6
 2970 051a 04       		.byte	0x4
 2971 051b A9030000 		.4byte	0x3a9
 2972 051f 03       		.uleb128 0x3
 2973 0520 FA040000 		.4byte	.LASF91
 2974 0524 0C       		.byte	0xc
 2975 0525 40       		.byte	0x40
 2976 0526 F8040000 		.4byte	0x4f8
 2977 052a 09       		.uleb128 0x9
 2978 052b 68       		.byte	0x68
 2979 052c 0C       		.byte	0xc
 2980 052d 46       		.byte	0x46
 2981 052e 4B050000 		.4byte	0x54b
 2982 0532 0B       		.uleb128 0xb
 2983 0533 68040000 		.4byte	.LASF92
 2984 0537 0C       		.byte	0xc
 2985 0538 4B       		.byte	0x4b
 2986 0539 4B050000 		.4byte	0x54b
 2987 053d 00       		.byte	0
 2988 053e 0B       		.uleb128 0xb
 2989 053f 4C040000 		.4byte	.LASF93
 2990 0543 0C       		.byte	0xc
 2991 0544 4C       		.byte	0x4c
 2992 0545 68000000 		.4byte	0x68
 2993 0549 64       		.byte	0x64
 2994 054a 00       		.byte	0
 2995 054b 07       		.uleb128 0x7
 2996 054c D7000000 		.4byte	0xd7
 2997 0550 5B050000 		.4byte	0x55b
 2998 0554 08       		.uleb128 0x8
 2999 0555 E5000000 		.4byte	0xe5
 3000 0559 63       		.byte	0x63
 3001 055a 00       		.byte	0
 3002 055b 03       		.uleb128 0x3
 3003 055c 90050000 		.4byte	.LASF94
 3004 0560 0C       		.byte	0xc
 3005 0561 52       		.byte	0x52
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 70


 3006 0562 2A050000 		.4byte	0x52a
 3007 0566 0F       		.uleb128 0xf
 3008 0567 A1000000 		.4byte	.LASF186
 3009 056b 01       		.byte	0x1
 3010 056c 14       		.byte	0x14
 3011 056d 00000000 		.4byte	.LFB64
 3012 0571 0C000000 		.4byte	.LFE64-.LFB64
 3013 0575 01       		.uleb128 0x1
 3014 0576 9C       		.byte	0x9c
 3015 0577 10       		.uleb128 0x10
 3016 0578 8C090000 		.4byte	.LASF107
 3017 057c 01       		.byte	0x1
 3018 057d 28       		.byte	0x28
 3019 057e 00000000 		.4byte	.LFB65
 3020 0582 84010000 		.4byte	.LFE65-.LFB65
 3021 0586 01       		.uleb128 0x1
 3022 0587 9C       		.byte	0x9c
 3023 0588 A9050000 		.4byte	0x5a9
 3024 058c 11       		.uleb128 0x11
 3025 058d 23080000 		.4byte	.LASF95
 3026 0591 01       		.byte	0x1
 3027 0592 3C       		.byte	0x3c
 3028 0593 A9050000 		.4byte	0x5a9
 3029 0597 02       		.uleb128 0x2
 3030 0598 91       		.byte	0x91
 3031 0599 64       		.sleb128 -28
 3032 059a 11       		.uleb128 0x11
 3033 059b FC030000 		.4byte	.LASF96
 3034 059f 01       		.byte	0x1
 3035 05a0 6B       		.byte	0x6b
 3036 05a1 81000000 		.4byte	0x81
 3037 05a5 02       		.uleb128 0x2
 3038 05a6 91       		.byte	0x91
 3039 05a7 6F       		.sleb128 -17
 3040 05a8 00       		.byte	0
 3041 05a9 07       		.uleb128 0x7
 3042 05aa 99000000 		.4byte	0x99
 3043 05ae B9050000 		.4byte	0x5b9
 3044 05b2 08       		.uleb128 0x8
 3045 05b3 E5000000 		.4byte	0xe5
 3046 05b7 01       		.byte	0x1
 3047 05b8 00       		.byte	0
 3048 05b9 12       		.uleb128 0x12
 3049 05ba 75040000 		.4byte	.LASF98
 3050 05be 01       		.byte	0x1
 3051 05bf 75       		.byte	0x75
 3052 05c0 68000000 		.4byte	0x68
 3053 05c4 00000000 		.4byte	.LFB66
 3054 05c8 F4000000 		.4byte	.LFE66-.LFB66
 3055 05cc 01       		.uleb128 0x1
 3056 05cd 9C       		.byte	0x9c
 3057 05ce E1050000 		.4byte	0x5e1
 3058 05d2 11       		.uleb128 0x11
 3059 05d3 6A060000 		.4byte	.LASF97
 3060 05d7 01       		.byte	0x1
 3061 05d8 A4       		.byte	0xa4
 3062 05d9 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 71


 3063 05dd 02       		.uleb128 0x2
 3064 05de 91       		.byte	0x91
 3065 05df 77       		.sleb128 -9
 3066 05e0 00       		.byte	0
 3067 05e1 13       		.uleb128 0x13
 3068 05e2 56080000 		.4byte	.LASF187
 3069 05e6 01       		.byte	0x1
 3070 05e7 B4       		.byte	0xb4
 3071 05e8 00000000 		.4byte	.LFB67
 3072 05ec 2A000000 		.4byte	.LFE67-.LFB67
 3073 05f0 01       		.uleb128 0x1
 3074 05f1 9C       		.byte	0x9c
 3075 05f2 14       		.uleb128 0x14
 3076 05f3 B7030000 		.4byte	.LASF99
 3077 05f7 01       		.byte	0x1
 3078 05f8 D9       		.byte	0xd9
 3079 05f9 00000000 		.4byte	.LFB68
 3080 05fd A8000000 		.4byte	.LFE68-.LFB68
 3081 0601 01       		.uleb128 0x1
 3082 0602 9C       		.byte	0x9c
 3083 0603 16060000 		.4byte	0x616
 3084 0607 15       		.uleb128 0x15
 3085 0608 1C050000 		.4byte	.LASF100
 3086 060c 01       		.byte	0x1
 3087 060d D9       		.byte	0xd9
 3088 060e 81000000 		.4byte	0x81
 3089 0612 02       		.uleb128 0x2
 3090 0613 91       		.byte	0x91
 3091 0614 77       		.sleb128 -9
 3092 0615 00       		.byte	0
 3093 0616 16       		.uleb128 0x16
 3094 0617 81090000 		.4byte	.LASF104
 3095 061b 01       		.byte	0x1
 3096 061c 0201     		.2byte	0x102
 3097 061e 81000000 		.4byte	0x81
 3098 0622 00000000 		.4byte	.LFB69
 3099 0626 48000000 		.4byte	.LFE69-.LFB69
 3100 062a 01       		.uleb128 0x1
 3101 062b 9C       		.byte	0x9c
 3102 062c 4F060000 		.4byte	0x64f
 3103 0630 17       		.uleb128 0x17
 3104 0631 52050000 		.4byte	.LASF101
 3105 0635 01       		.byte	0x1
 3106 0636 0201     		.2byte	0x102
 3107 0638 4F060000 		.4byte	0x64f
 3108 063c 02       		.uleb128 0x2
 3109 063d 91       		.byte	0x91
 3110 063e 74       		.sleb128 -12
 3111 063f 17       		.uleb128 0x17
 3112 0640 1C050000 		.4byte	.LASF100
 3113 0644 01       		.byte	0x1
 3114 0645 0201     		.2byte	0x102
 3115 0647 81000000 		.4byte	0x81
 3116 064b 02       		.uleb128 0x2
 3117 064c 91       		.byte	0x91
 3118 064d 73       		.sleb128 -13
 3119 064e 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 72


 3120 064f 06       		.uleb128 0x6
 3121 0650 04       		.byte	0x4
 3122 0651 E8040000 		.4byte	0x4e8
 3123 0655 18       		.uleb128 0x18
 3124 0656 BC060000 		.4byte	.LASF102
 3125 065a 01       		.byte	0x1
 3126 065b 1701     		.2byte	0x117
 3127 065d 00000000 		.4byte	.LFB70
 3128 0661 1E000000 		.4byte	.LFE70-.LFB70
 3129 0665 01       		.uleb128 0x1
 3130 0666 9C       		.byte	0x9c
 3131 0667 7B060000 		.4byte	0x67b
 3132 066b 17       		.uleb128 0x17
 3133 066c 1A070000 		.4byte	.LASF103
 3134 0670 01       		.byte	0x1
 3135 0671 1701     		.2byte	0x117
 3136 0673 4F060000 		.4byte	0x64f
 3137 0677 02       		.uleb128 0x2
 3138 0678 91       		.byte	0x91
 3139 0679 74       		.sleb128 -12
 3140 067a 00       		.byte	0
 3141 067b 19       		.uleb128 0x19
 3142 067c F3050000 		.4byte	.LASF105
 3143 0680 01       		.byte	0x1
 3144 0681 2001     		.2byte	0x120
 3145 0683 E8040000 		.4byte	0x4e8
 3146 0687 00000000 		.4byte	.LFB71
 3147 068b 46000000 		.4byte	.LFE71-.LFB71
 3148 068f 01       		.uleb128 0x1
 3149 0690 9C       		.byte	0x9c
 3150 0691 D2060000 		.4byte	0x6d2
 3151 0695 17       		.uleb128 0x17
 3152 0696 32030000 		.4byte	.LASF84
 3153 069a 01       		.byte	0x1
 3154 069b 2001     		.2byte	0x120
 3155 069d 8D000000 		.4byte	0x8d
 3156 06a1 02       		.uleb128 0x2
 3157 06a2 91       		.byte	0x91
 3158 06a3 6A       		.sleb128 -22
 3159 06a4 17       		.uleb128 0x17
 3160 06a5 3F090000 		.4byte	.LASF86
 3161 06a9 01       		.byte	0x1
 3162 06aa 2001     		.2byte	0x120
 3163 06ac 81000000 		.4byte	0x81
 3164 06b0 02       		.uleb128 0x2
 3165 06b1 91       		.byte	0x91
 3166 06b2 69       		.sleb128 -23
 3167 06b3 17       		.uleb128 0x17
 3168 06b4 89000000 		.4byte	.LASF87
 3169 06b8 01       		.byte	0x1
 3170 06b9 2001     		.2byte	0x120
 3171 06bb 81000000 		.4byte	0x81
 3172 06bf 02       		.uleb128 0x2
 3173 06c0 91       		.byte	0x91
 3174 06c1 68       		.sleb128 -24
 3175 06c2 1A       		.uleb128 0x1a
 3176 06c3 80080000 		.4byte	.LASF106
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 73


 3177 06c7 01       		.byte	0x1
 3178 06c8 2301     		.2byte	0x123
 3179 06ca E8040000 		.4byte	0x4e8
 3180 06ce 02       		.uleb128 0x2
 3181 06cf 91       		.byte	0x91
 3182 06d0 70       		.sleb128 -16
 3183 06d1 00       		.byte	0
 3184 06d2 1B       		.uleb128 0x1b
 3185 06d3 29070000 		.4byte	.LASF108
 3186 06d7 01       		.byte	0x1
 3187 06d8 3901     		.2byte	0x139
 3188 06da 00000000 		.4byte	.LFB72
 3189 06de 50010000 		.4byte	.LFE72-.LFB72
 3190 06e2 01       		.uleb128 0x1
 3191 06e3 9C       		.byte	0x9c
 3192 06e4 59070000 		.4byte	0x759
 3193 06e8 1A       		.uleb128 0x1a
 3194 06e9 AB010000 		.4byte	.LASF109
 3195 06ed 01       		.byte	0x1
 3196 06ee 4101     		.2byte	0x141
 3197 06f0 C9010000 		.4byte	0x1c9
 3198 06f4 03       		.uleb128 0x3
 3199 06f5 91       		.byte	0x91
 3200 06f6 EC7C     		.sleb128 -404
 3201 06f8 1A       		.uleb128 0x1a
 3202 06f9 38050000 		.4byte	.LASF110
 3203 06fd 01       		.byte	0x1
 3204 06fe 4501     		.2byte	0x145
 3205 0700 C9010000 		.4byte	0x1c9
 3206 0704 03       		.uleb128 0x3
 3207 0705 91       		.byte	0x91
 3208 0706 E879     		.sleb128 -792
 3209 0708 1A       		.uleb128 0x1a
 3210 0709 AA090000 		.4byte	.LASF111
 3211 070d 01       		.byte	0x1
 3212 070e 4901     		.2byte	0x149
 3213 0710 C9010000 		.4byte	0x1c9
 3214 0714 03       		.uleb128 0x3
 3215 0715 91       		.byte	0x91
 3216 0716 E476     		.sleb128 -1180
 3217 0718 1A       		.uleb128 0x1a
 3218 0719 13090000 		.4byte	.LASF112
 3219 071d 01       		.byte	0x1
 3220 071e 4D01     		.2byte	0x14d
 3221 0720 C9010000 		.4byte	0x1c9
 3222 0724 03       		.uleb128 0x3
 3223 0725 91       		.byte	0x91
 3224 0726 E073     		.sleb128 -1568
 3225 0728 1A       		.uleb128 0x1a
 3226 0729 3A010000 		.4byte	.LASF113
 3227 072d 01       		.byte	0x1
 3228 072e 5101     		.2byte	0x151
 3229 0730 C9010000 		.4byte	0x1c9
 3230 0734 03       		.uleb128 0x3
 3231 0735 91       		.byte	0x91
 3232 0736 DC70     		.sleb128 -1956
 3233 0738 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 74


 3234 0739 A3040000 		.4byte	.LASF114
 3235 073d 01       		.byte	0x1
 3236 073e 5501     		.2byte	0x155
 3237 0740 C9010000 		.4byte	0x1c9
 3238 0744 03       		.uleb128 0x3
 3239 0745 91       		.byte	0x91
 3240 0746 D86D     		.sleb128 -2344
 3241 0748 1A       		.uleb128 0x1a
 3242 0749 00000000 		.4byte	.LASF115
 3243 074d 01       		.byte	0x1
 3244 074e 5901     		.2byte	0x159
 3245 0750 C9010000 		.4byte	0x1c9
 3246 0754 03       		.uleb128 0x3
 3247 0755 91       		.byte	0x91
 3248 0756 D46A     		.sleb128 -2732
 3249 0758 00       		.byte	0
 3250 0759 1C       		.uleb128 0x1c
 3251 075a 97090000 		.4byte	.LASF188
 3252 075e 01       		.byte	0x1
 3253 075f 6401     		.2byte	0x164
 3254 0761 68000000 		.4byte	0x68
 3255 0765 00000000 		.4byte	.LFB73
 3256 0769 1E000000 		.4byte	.LFE73-.LFB73
 3257 076d 01       		.uleb128 0x1
 3258 076e 9C       		.byte	0x9c
 3259 076f 1D       		.uleb128 0x1d
 3260 0770 F9020000 		.4byte	.LASF116
 3261 0774 01       		.byte	0x1
 3262 0775 7A01     		.2byte	0x17a
 3263 0777 81000000 		.4byte	0x81
 3264 077b 00000000 		.4byte	.LFB74
 3265 077f 5C040000 		.4byte	.LFE74-.LFB74
 3266 0783 01       		.uleb128 0x1
 3267 0784 9C       		.byte	0x9c
 3268 0785 D9080000 		.4byte	0x8d9
 3269 0789 1E       		.uleb128 0x1e
 3270 078a 62000000 		.4byte	.LBB2
 3271 078e CC030000 		.4byte	.LBE2-.LBB2
 3272 0792 1A       		.uleb128 0x1a
 3273 0793 06060000 		.4byte	.LASF117
 3274 0797 01       		.byte	0x1
 3275 0798 AA01     		.2byte	0x1aa
 3276 079a 61030000 		.4byte	0x361
 3277 079e 02       		.uleb128 0x2
 3278 079f 91       		.byte	0x91
 3279 07a0 48       		.sleb128 -56
 3280 07a1 1A       		.uleb128 0x1a
 3281 07a2 3F060000 		.4byte	.LASF118
 3282 07a6 01       		.byte	0x1
 3283 07a7 AE01     		.2byte	0x1ae
 3284 07a9 61030000 		.4byte	0x361
 3285 07ad 03       		.uleb128 0x3
 3286 07ae 91       		.byte	0x91
 3287 07af B47F     		.sleb128 -76
 3288 07b1 1A       		.uleb128 0x1a
 3289 07b2 C4020000 		.4byte	.LASF119
 3290 07b6 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 75


 3291 07b7 B301     		.2byte	0x1b3
 3292 07b9 61030000 		.4byte	0x361
 3293 07bd 03       		.uleb128 0x3
 3294 07be 91       		.byte	0x91
 3295 07bf A07F     		.sleb128 -96
 3296 07c1 1A       		.uleb128 0x1a
 3297 07c2 08040000 		.4byte	.LASF120
 3298 07c6 01       		.byte	0x1
 3299 07c7 C601     		.2byte	0x1c6
 3300 07c9 8D000000 		.4byte	0x8d
 3301 07cd 02       		.uleb128 0x2
 3302 07ce 91       		.byte	0x91
 3303 07cf 66       		.sleb128 -26
 3304 07d0 1A       		.uleb128 0x1a
 3305 07d1 8E040000 		.4byte	.LASF121
 3306 07d5 01       		.byte	0x1
 3307 07d6 C701     		.2byte	0x1c7
 3308 07d8 61030000 		.4byte	0x361
 3309 07dc 03       		.uleb128 0x3
 3310 07dd 91       		.byte	0x91
 3311 07de 8C7F     		.sleb128 -116
 3312 07e0 1A       		.uleb128 0x1a
 3313 07e1 0E080000 		.4byte	.LASF122
 3314 07e5 01       		.byte	0x1
 3315 07e6 DC01     		.2byte	0x1dc
 3316 07e8 D9080000 		.4byte	0x8d9
 3317 07ec 03       		.uleb128 0x3
 3318 07ed 91       		.byte	0x91
 3319 07ee A475     		.sleb128 -1372
 3320 07f0 1A       		.uleb128 0x1a
 3321 07f1 D1080000 		.4byte	.LASF30
 3322 07f5 01       		.byte	0x1
 3323 07f6 DD01     		.2byte	0x1dd
 3324 07f8 81000000 		.4byte	0x81
 3325 07fc 02       		.uleb128 0x2
 3326 07fd 91       		.byte	0x91
 3327 07fe 65       		.sleb128 -27
 3328 07ff 1A       		.uleb128 0x1a
 3329 0800 D4070000 		.4byte	.LASF123
 3330 0804 01       		.byte	0x1
 3331 0805 E401     		.2byte	0x1e4
 3332 0807 EC000000 		.4byte	0xec
 3333 080b 02       		.uleb128 0x2
 3334 080c 91       		.byte	0x91
 3335 080d 6C       		.sleb128 -20
 3336 080e 1A       		.uleb128 0x1a
 3337 080f D5010000 		.4byte	.LASF124
 3338 0813 01       		.byte	0x1
 3339 0814 E801     		.2byte	0x1e8
 3340 0816 A5000000 		.4byte	0xa5
 3341 081a 02       		.uleb128 0x2
 3342 081b 91       		.byte	0x91
 3343 081c 64       		.sleb128 -28
 3344 081d 1A       		.uleb128 0x1a
 3345 081e 02030000 		.4byte	.LASF125
 3346 0822 01       		.byte	0x1
 3347 0823 1802     		.2byte	0x218
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 76


 3348 0825 4C000000 		.4byte	0x4c
 3349 0829 02       		.uleb128 0x2
 3350 082a 91       		.byte	0x91
 3351 082b 5C       		.sleb128 -36
 3352 082c 1F       		.uleb128 0x1f
 3353 082d F0000000 		.4byte	.LBB3
 3354 0831 2C000000 		.4byte	.LBE3-.LBB3
 3355 0835 59080000 		.4byte	0x859
 3356 0839 1A       		.uleb128 0x1a
 3357 083a 55070000 		.4byte	.LASF126
 3358 083e 01       		.byte	0x1
 3359 083f BB01     		.2byte	0x1bb
 3360 0841 8D000000 		.4byte	0x8d
 3361 0845 02       		.uleb128 0x2
 3362 0846 91       		.byte	0x91
 3363 0847 68       		.sleb128 -24
 3364 0848 1A       		.uleb128 0x1a
 3365 0849 47020000 		.4byte	.LASF127
 3366 084d 01       		.byte	0x1
 3367 084e BC01     		.2byte	0x1bc
 3368 0850 61030000 		.4byte	0x361
 3369 0854 03       		.uleb128 0x3
 3370 0855 91       		.byte	0x91
 3371 0856 F87E     		.sleb128 -136
 3372 0858 00       		.byte	0
 3373 0859 1F       		.uleb128 0x1f
 3374 085a 1E010000 		.4byte	.LBB4
 3375 085e 20000000 		.4byte	.LBE4-.LBB4
 3376 0862 77080000 		.4byte	0x877
 3377 0866 1A       		.uleb128 0x1a
 3378 0867 47020000 		.4byte	.LASF127
 3379 086b 01       		.byte	0x1
 3380 086c C001     		.2byte	0x1c0
 3381 086e 61030000 		.4byte	0x361
 3382 0872 03       		.uleb128 0x3
 3383 0873 91       		.byte	0x91
 3384 0874 E47E     		.sleb128 -156
 3385 0876 00       		.byte	0
 3386 0877 1F       		.uleb128 0x1f
 3387 0878 5E020000 		.4byte	.LBB5
 3388 087c 4C010000 		.4byte	.LBE5-.LBB5
 3389 0880 AE080000 		.4byte	0x8ae
 3390 0884 1A       		.uleb128 0x1a
 3391 0885 FF050000 		.4byte	.LASF128
 3392 0889 01       		.byte	0x1
 3393 088a ED01     		.2byte	0x1ed
 3394 088c A5000000 		.4byte	0xa5
 3395 0890 02       		.uleb128 0x2
 3396 0891 91       		.byte	0x91
 3397 0892 6B       		.sleb128 -21
 3398 0893 1E       		.uleb128 0x1e
 3399 0894 66020000 		.4byte	.LBB6
 3400 0898 28010000 		.4byte	.LBE6-.LBB6
 3401 089c 1A       		.uleb128 0x1a
 3402 089d D5030000 		.4byte	.LASF129
 3403 08a1 01       		.byte	0x1
 3404 08a2 EF01     		.2byte	0x1ef
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 77


 3405 08a4 E9080000 		.4byte	0x8e9
 3406 08a8 03       		.uleb128 0x3
 3407 08a9 91       		.byte	0x91
 3408 08aa EC76     		.sleb128 -1172
 3409 08ac 00       		.byte	0
 3410 08ad 00       		.byte	0
 3411 08ae 1E       		.uleb128 0x1e
 3412 08af C4030000 		.4byte	.LBB7
 3413 08b3 3A000000 		.4byte	.LBE7-.LBB7
 3414 08b7 1A       		.uleb128 0x1a
 3415 08b8 D2020000 		.4byte	.LASF130
 3416 08bc 01       		.byte	0x1
 3417 08bd 0F02     		.2byte	0x20f
 3418 08bf 68000000 		.4byte	0x68
 3419 08c3 02       		.uleb128 0x2
 3420 08c4 91       		.byte	0x91
 3421 08c5 60       		.sleb128 -32
 3422 08c6 1A       		.uleb128 0x1a
 3423 08c7 C7060000 		.4byte	.LASF131
 3424 08cb 01       		.byte	0x1
 3425 08cc 1002     		.2byte	0x210
 3426 08ce FA080000 		.4byte	0x8fa
 3427 08d2 03       		.uleb128 0x3
 3428 08d3 91       		.byte	0x91
 3429 08d4 D87E     		.sleb128 -168
 3430 08d6 00       		.byte	0
 3431 08d7 00       		.byte	0
 3432 08d8 00       		.byte	0
 3433 08d9 07       		.uleb128 0x7
 3434 08da D7000000 		.4byte	0xd7
 3435 08de E9080000 		.4byte	0x8e9
 3436 08e2 08       		.uleb128 0x8
 3437 08e3 E5000000 		.4byte	0xe5
 3438 08e7 C7       		.byte	0xc7
 3439 08e8 00       		.byte	0
 3440 08e9 07       		.uleb128 0x7
 3441 08ea D7000000 		.4byte	0xd7
 3442 08ee FA080000 		.4byte	0x8fa
 3443 08f2 20       		.uleb128 0x20
 3444 08f3 E5000000 		.4byte	0xe5
 3445 08f7 E803     		.2byte	0x3e8
 3446 08f9 00       		.byte	0
 3447 08fa 07       		.uleb128 0x7
 3448 08fb D7000000 		.4byte	0xd7
 3449 08ff 0A090000 		.4byte	0x90a
 3450 0903 08       		.uleb128 0x8
 3451 0904 E5000000 		.4byte	0xe5
 3452 0908 09       		.byte	0x9
 3453 0909 00       		.byte	0
 3454 090a 1D       		.uleb128 0x1d
 3455 090b 46060000 		.4byte	.LASF132
 3456 090f 01       		.byte	0x1
 3457 0910 2D02     		.2byte	0x22d
 3458 0912 81000000 		.4byte	0x81
 3459 0916 00000000 		.4byte	.LFB75
 3460 091a 44000000 		.4byte	.LFE75-.LFB75
 3461 091e 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 78


 3462 091f 9C       		.byte	0x9c
 3463 0920 3E090000 		.4byte	0x93e
 3464 0924 1E       		.uleb128 0x1e
 3465 0925 20000000 		.4byte	.LBB8
 3466 0929 1A000000 		.4byte	.LBE8-.LBB8
 3467 092d 1A       		.uleb128 0x1a
 3468 092e 02030000 		.4byte	.LASF125
 3469 0932 01       		.byte	0x1
 3470 0933 3802     		.2byte	0x238
 3471 0935 4C000000 		.4byte	0x4c
 3472 0939 02       		.uleb128 0x2
 3473 093a 91       		.byte	0x91
 3474 093b 74       		.sleb128 -12
 3475 093c 00       		.byte	0
 3476 093d 00       		.byte	0
 3477 093e 1D       		.uleb128 0x1d
 3478 093f 36040000 		.4byte	.LASF133
 3479 0943 01       		.byte	0x1
 3480 0944 4D02     		.2byte	0x24d
 3481 0946 81000000 		.4byte	0x81
 3482 094a 00000000 		.4byte	.LFB76
 3483 094e 9C020000 		.4byte	.LFE76-.LFB76
 3484 0952 01       		.uleb128 0x1
 3485 0953 9C       		.byte	0x9c
 3486 0954 DF090000 		.4byte	0x9df
 3487 0958 1A       		.uleb128 0x1a
 3488 0959 C6050000 		.4byte	.LASF59
 3489 095d 01       		.byte	0x1
 3490 095e 5002     		.2byte	0x250
 3491 0960 4C000000 		.4byte	0x4c
 3492 0964 02       		.uleb128 0x2
 3493 0965 91       		.byte	0x91
 3494 0966 6C       		.sleb128 -20
 3495 0967 1A       		.uleb128 0x1a
 3496 0968 DA070000 		.4byte	.LASF134
 3497 096c 01       		.byte	0x1
 3498 096d 5102     		.2byte	0x251
 3499 096f DF090000 		.4byte	0x9df
 3500 0973 02       		.uleb128 0x2
 3501 0974 91       		.byte	0x91
 3502 0975 4C       		.sleb128 -52
 3503 0976 1A       		.uleb128 0x1a
 3504 0977 62030000 		.4byte	.LASF58
 3505 097b 01       		.byte	0x1
 3506 097c 5502     		.2byte	0x255
 3507 097e 61030000 		.4byte	0x361
 3508 0982 03       		.uleb128 0x3
 3509 0983 91       		.byte	0x91
 3510 0984 B87F     		.sleb128 -72
 3511 0986 1A       		.uleb128 0x1a
 3512 0987 EF090000 		.4byte	.LASF135
 3513 098b 01       		.byte	0x1
 3514 098c 5902     		.2byte	0x259
 3515 098e EF090000 		.4byte	0x9ef
 3516 0992 03       		.uleb128 0x3
 3517 0993 91       		.byte	0x91
 3518 0994 B07F     		.sleb128 -80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 79


 3519 0996 1A       		.uleb128 0x1a
 3520 0997 E0030000 		.4byte	.LASF136
 3521 099b 01       		.byte	0x1
 3522 099c 7A02     		.2byte	0x27a
 3523 099e 6D020000 		.4byte	0x26d
 3524 09a2 03       		.uleb128 0x3
 3525 09a3 91       		.byte	0x91
 3526 09a4 9C7F     		.sleb128 -100
 3527 09a6 1F       		.uleb128 0x1f
 3528 09a7 46000000 		.4byte	.LBB9
 3529 09ab 78000000 		.4byte	.LBE9-.LBB9
 3530 09af C4090000 		.4byte	0x9c4
 3531 09b3 1A       		.uleb128 0x1a
 3532 09b4 39080000 		.4byte	.LASF137
 3533 09b8 01       		.byte	0x1
 3534 09b9 6202     		.2byte	0x262
 3535 09bb 1D020000 		.4byte	0x21d
 3536 09bf 03       		.uleb128 0x3
 3537 09c0 91       		.byte	0x91
 3538 09c1 807F     		.sleb128 -128
 3539 09c3 00       		.byte	0
 3540 09c4 1E       		.uleb128 0x1e
 3541 09c5 42010000 		.4byte	.LBB10
 3542 09c9 EE000000 		.4byte	.LBE10-.LBB10
 3543 09cd 1A       		.uleb128 0x1a
 3544 09ce AD080000 		.4byte	.LASF138
 3545 09d2 01       		.byte	0x1
 3546 09d3 9602     		.2byte	0x296
 3547 09d5 B1020000 		.4byte	0x2b1
 3548 09d9 03       		.uleb128 0x3
 3549 09da 91       		.byte	0x91
 3550 09db F07E     		.sleb128 -144
 3551 09dd 00       		.byte	0
 3552 09de 00       		.byte	0
 3553 09df 07       		.uleb128 0x7
 3554 09e0 D7000000 		.4byte	0xd7
 3555 09e4 EF090000 		.4byte	0x9ef
 3556 09e8 08       		.uleb128 0x8
 3557 09e9 E5000000 		.4byte	0xe5
 3558 09ed 1F       		.byte	0x1f
 3559 09ee 00       		.byte	0
 3560 09ef 07       		.uleb128 0x7
 3561 09f0 D7000000 		.4byte	0xd7
 3562 09f4 FF090000 		.4byte	0x9ff
 3563 09f8 08       		.uleb128 0x8
 3564 09f9 E5000000 		.4byte	0xe5
 3565 09fd 04       		.byte	0x4
 3566 09fe 00       		.byte	0
 3567 09ff 16       		.uleb128 0x16
 3568 0a00 A3030000 		.4byte	.LASF139
 3569 0a04 01       		.byte	0x1
 3570 0a05 BE02     		.2byte	0x2be
 3571 0a07 81000000 		.4byte	0x81
 3572 0a0b 00000000 		.4byte	.LFB77
 3573 0a0f 74000000 		.4byte	.LFE77-.LFB77
 3574 0a13 01       		.uleb128 0x1
 3575 0a14 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 80


 3576 0a15 450A0000 		.4byte	0xa45
 3577 0a19 17       		.uleb128 0x17
 3578 0a1a C6050000 		.4byte	.LASF59
 3579 0a1e 01       		.byte	0x1
 3580 0a1f BE02     		.2byte	0x2be
 3581 0a21 4C000000 		.4byte	0x4c
 3582 0a25 02       		.uleb128 0x2
 3583 0a26 91       		.byte	0x91
 3584 0a27 64       		.sleb128 -28
 3585 0a28 21       		.uleb128 0x21
 3586 0a29 7400     		.ascii	"t\000"
 3587 0a2b 01       		.byte	0x1
 3588 0a2c C502     		.2byte	0x2c5
 3589 0a2e 450A0000 		.4byte	0xa45
 3590 0a32 02       		.uleb128 0x2
 3591 0a33 91       		.byte	0x91
 3592 0a34 74       		.sleb128 -12
 3593 0a35 1A       		.uleb128 0x1a
 3594 0a36 9F050000 		.4byte	.LASF140
 3595 0a3a 01       		.byte	0x1
 3596 0a3b CA02     		.2byte	0x2ca
 3597 0a3d 6B010000 		.4byte	0x16b
 3598 0a41 02       		.uleb128 0x2
 3599 0a42 91       		.byte	0x91
 3600 0a43 68       		.sleb128 -24
 3601 0a44 00       		.byte	0
 3602 0a45 06       		.uleb128 0x6
 3603 0a46 04       		.byte	0x4
 3604 0a47 BC020000 		.4byte	0x2bc
 3605 0a4b 16       		.uleb128 0x16
 3606 0a4c 41030000 		.4byte	.LASF141
 3607 0a50 01       		.byte	0x1
 3608 0a51 E702     		.2byte	0x2e7
 3609 0a53 81000000 		.4byte	0x81
 3610 0a57 00000000 		.4byte	.LFB78
 3611 0a5b 38010000 		.4byte	.LFE78-.LFB78
 3612 0a5f 01       		.uleb128 0x1
 3613 0a60 9C       		.byte	0x9c
 3614 0a61 C40A0000 		.4byte	0xac4
 3615 0a65 17       		.uleb128 0x17
 3616 0a66 68030000 		.4byte	.LASF142
 3617 0a6a 01       		.byte	0x1
 3618 0a6b E702     		.2byte	0x2e7
 3619 0a6d EC000000 		.4byte	0xec
 3620 0a71 03       		.uleb128 0x3
 3621 0a72 91       		.byte	0x91
 3622 0a73 9C7E     		.sleb128 -228
 3623 0a75 17       		.uleb128 0x17
 3624 0a76 5D030000 		.4byte	.LASF143
 3625 0a7a 01       		.byte	0x1
 3626 0a7b E702     		.2byte	0x2e7
 3627 0a7d 68000000 		.4byte	0x68
 3628 0a81 03       		.uleb128 0x3
 3629 0a82 91       		.byte	0x91
 3630 0a83 987E     		.sleb128 -232
 3631 0a85 17       		.uleb128 0x17
 3632 0a86 4C050000 		.4byte	.LASF144
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 81


 3633 0a8a 01       		.byte	0x1
 3634 0a8b E702     		.2byte	0x2e7
 3635 0a8d EC000000 		.4byte	0xec
 3636 0a91 03       		.uleb128 0x3
 3637 0a92 91       		.byte	0x91
 3638 0a93 947E     		.sleb128 -236
 3639 0a95 1A       		.uleb128 0x1a
 3640 0a96 38020000 		.4byte	.LASF145
 3641 0a9a 01       		.byte	0x1
 3642 0a9b E902     		.2byte	0x2e9
 3643 0a9d 81000000 		.4byte	0x81
 3644 0aa1 02       		.uleb128 0x2
 3645 0aa2 91       		.byte	0x91
 3646 0aa3 77       		.sleb128 -9
 3647 0aa4 1A       		.uleb128 0x1a
 3648 0aa5 74000000 		.4byte	.LASF146
 3649 0aa9 01       		.byte	0x1
 3650 0aaa F002     		.2byte	0x2f0
 3651 0aac C40A0000 		.4byte	0xac4
 3652 0ab0 02       		.uleb128 0x2
 3653 0ab1 91       		.byte	0x91
 3654 0ab2 68       		.sleb128 -24
 3655 0ab3 1A       		.uleb128 0x1a
 3656 0ab4 0E080000 		.4byte	.LASF122
 3657 0ab8 01       		.byte	0x1
 3658 0ab9 F802     		.2byte	0x2f8
 3659 0abb D9080000 		.4byte	0x8d9
 3660 0abf 03       		.uleb128 0x3
 3661 0ac0 91       		.byte	0x91
 3662 0ac1 A07E     		.sleb128 -224
 3663 0ac3 00       		.byte	0
 3664 0ac4 07       		.uleb128 0x7
 3665 0ac5 D7000000 		.4byte	0xd7
 3666 0ac9 D40A0000 		.4byte	0xad4
 3667 0acd 08       		.uleb128 0x8
 3668 0ace E5000000 		.4byte	0xe5
 3669 0ad2 0B       		.byte	0xb
 3670 0ad3 00       		.byte	0
 3671 0ad4 22       		.uleb128 0x22
 3672 0ad5 8C010000 		.4byte	.LASF147
 3673 0ad9 0D       		.byte	0xd
 3674 0ada 1207     		.2byte	0x712
 3675 0adc E00A0000 		.4byte	0xae0
 3676 0ae0 0C       		.uleb128 0xc
 3677 0ae1 76000000 		.4byte	0x76
 3678 0ae5 23       		.uleb128 0x23
 3679 0ae6 B5070000 		.4byte	.LASF148
 3680 0aea 07       		.byte	0x7
 3681 0aeb 25       		.byte	0x25
 3682 0aec 4B050000 		.4byte	0x54b
 3683 0af0 05       		.uleb128 0x5
 3684 0af1 03       		.byte	0x3
 3685 0af2 00000000 		.4byte	level_sensor_inbox
 3686 0af6 23       		.uleb128 0x23
 3687 0af7 D8080000 		.4byte	.LASF149
 3688 0afb 07       		.byte	0x7
 3689 0afc 27       		.byte	0x27
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 82


 3690 0afd 9D040000 		.4byte	0x49d
 3691 0b01 05       		.uleb128 0x5
 3692 0b02 03       		.byte	0x3
 3693 0b03 00000000 		.4byte	level_sensor_enabled
 3694 0b07 23       		.uleb128 0x23
 3695 0b08 C7090000 		.4byte	.LASF150
 3696 0b0c 0E       		.byte	0xe
 3697 0b0d 0F       		.byte	0xf
 3698 0b0e 4B050000 		.4byte	0x54b
 3699 0b12 05       		.uleb128 0x5
 3700 0b13 03       		.byte	0x3
 3701 0b14 00000000 		.4byte	downstream_level_sensor_inbox
 3702 0b18 23       		.uleb128 0x23
 3703 0b19 DA040000 		.4byte	.LASF151
 3704 0b1d 0E       		.byte	0xe
 3705 0b1e 11       		.byte	0x11
 3706 0b1f 9D040000 		.4byte	0x49d
 3707 0b23 05       		.uleb128 0x5
 3708 0b24 03       		.byte	0x3
 3709 0b25 00000000 		.4byte	downstream_level_sensor_enabled
 3710 0b29 23       		.uleb128 0x23
 3711 0b2a B8080000 		.4byte	.LASF152
 3712 0b2e 0F       		.byte	0xf
 3713 0b2f 2D       		.byte	0x2d
 3714 0b30 81000000 		.4byte	0x81
 3715 0b34 05       		.uleb128 0x5
 3716 0b35 03       		.byte	0x3
 3717 0b36 00000000 		.4byte	valve_enabled
 3718 0b3a 23       		.uleb128 0x23
 3719 0b3b 33090000 		.4byte	.LASF153
 3720 0b3f 0F       		.byte	0xf
 3721 0b40 2E       		.byte	0x2e
 3722 0b41 4B050000 		.4byte	0x54b
 3723 0b45 05       		.uleb128 0x5
 3724 0b46 03       		.byte	0x3
 3725 0b47 00000000 		.4byte	valve_inbox
 3726 0b4b 23       		.uleb128 0x23
 3727 0b4c 64000000 		.4byte	.LASF154
 3728 0b50 0A       		.byte	0xa
 3729 0b51 11       		.byte	0x11
 3730 0b52 9D040000 		.4byte	0x49d
 3731 0b56 05       		.uleb128 0x5
 3732 0b57 03       		.byte	0x3
 3733 0b58 00000000 		.4byte	buffer_overflow
 3734 0b5c 23       		.uleb128 0x23
 3735 0b5d 26050000 		.4byte	.LASF155
 3736 0b61 0A       		.byte	0xa
 3737 0b62 22       		.byte	0x22
 3738 0b63 8D000000 		.4byte	0x8d
 3739 0b67 05       		.uleb128 0x5
 3740 0b68 03       		.byte	0x3
 3741 0b69 00000000 		.4byte	dataPointsInStack
 3742 0b6d 23       		.uleb128 0x23
 3743 0b6e ED080000 		.4byte	.LASF156
 3744 0b72 0A       		.byte	0xa
 3745 0b73 23       		.byte	0x23
 3746 0b74 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 83


 3747 0b78 05       		.uleb128 0x5
 3748 0b79 03       		.byte	0x3
 3749 0b7a 00000000 		.4byte	dataPointsInStackDesired
 3750 0b7e 07       		.uleb128 0x7
 3751 0b7f 71030000 		.4byte	0x371
 3752 0b83 8E0B0000 		.4byte	0xb8e
 3753 0b87 08       		.uleb128 0x8
 3754 0b88 E5000000 		.4byte	0xe5
 3755 0b8c 95       		.byte	0x95
 3756 0b8d 00       		.byte	0
 3757 0b8e 23       		.uleb128 0x23
 3758 0b8f 47040000 		.4byte	.LASF157
 3759 0b93 0A       		.byte	0xa
 3760 0b94 24       		.byte	0x24
 3761 0b95 7E0B0000 		.4byte	0xb7e
 3762 0b99 05       		.uleb128 0x5
 3763 0b9a 03       		.byte	0x3
 3764 0b9b 00000000 		.4byte	data
 3765 0b9f 23       		.uleb128 0x23
 3766 0ba0 73010000 		.4byte	.LASF158
 3767 0ba4 0B       		.byte	0xb
 3768 0ba5 20       		.byte	0x20
 3769 0ba6 81000000 		.4byte	0x81
 3770 0baa 05       		.uleb128 0x5
 3771 0bab 03       		.byte	0x3
 3772 0bac 00000000 		.4byte	modem_state
 3773 0bb0 23       		.uleb128 0x23
 3774 0bb1 C3040000 		.4byte	.LASF159
 3775 0bb5 0B       		.byte	0xb
 3776 0bb6 6C       		.byte	0x6c
 3777 0bb7 BD000000 		.4byte	0xbd
 3778 0bbb 05       		.uleb128 0x5
 3779 0bbc 03       		.byte	0x3
 3780 0bbd 00000000 		.4byte	modem_start_time_stamp
 3781 0bc1 23       		.uleb128 0x23
 3782 0bc2 5D040000 		.4byte	.LASF89
 3783 0bc6 0B       		.byte	0xb
 3784 0bc7 6D       		.byte	0x6d
 3785 0bc8 A9030000 		.4byte	0x3a9
 3786 0bcc 05       		.uleb128 0x5
 3787 0bcd 03       		.byte	0x3
 3788 0bce 00000000 		.4byte	modem_info
 3789 0bd2 23       		.uleb128 0x23
 3790 0bd3 67010000 		.4byte	.LASF160
 3791 0bd7 0B       		.byte	0xb
 3792 0bd8 6E       		.byte	0x6e
 3793 0bd9 1D040000 		.4byte	0x41d
 3794 0bdd 05       		.uleb128 0x5
 3795 0bde 03       		.byte	0x3
 3796 0bdf 00000000 		.4byte	modem_stats
 3797 0be3 23       		.uleb128 0x23
 3798 0be4 DE050000 		.4byte	.LASF161
 3799 0be8 0B       		.byte	0xb
 3800 0be9 6F       		.byte	0x6f
 3801 0bea A4040000 		.4byte	0x4a4
 3802 0bee 05       		.uleb128 0x5
 3803 0bef 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 84


 3804 0bf0 00000000 		.4byte	updatable_parameters
 3805 0bf4 23       		.uleb128 0x23
 3806 0bf5 93030000 		.4byte	.LASF162
 3807 0bf9 10       		.byte	0x10
 3808 0bfa 07       		.byte	0x7
 3809 0bfb 81000000 		.4byte	0x81
 3810 0bff 05       		.uleb128 0x5
 3811 0c00 03       		.byte	0x3
 3812 0c01 00000000 		.4byte	App_LED_enabled
 3813 0c05 23       		.uleb128 0x23
 3814 0c06 B9090000 		.4byte	.LASF163
 3815 0c0a 10       		.byte	0x10
 3816 0c0b 08       		.byte	0x8
 3817 0c0c 4B050000 		.4byte	0x54b
 3818 0c10 05       		.uleb128 0x5
 3819 0c11 03       		.byte	0x3
 3820 0c12 00000000 		.4byte	app_led_inbox
 3821 0c16 07       		.uleb128 0x7
 3822 0c17 D7000000 		.4byte	0xd7
 3823 0c1b 270C0000 		.4byte	0xc27
 3824 0c1f 20       		.uleb128 0x20
 3825 0c20 E5000000 		.4byte	0xe5
 3826 0c24 0F27     		.2byte	0x270f
 3827 0c26 00       		.byte	0
 3828 0c27 23       		.uleb128 0x23
 3829 0c28 BA010000 		.4byte	.LASF164
 3830 0c2c 0C       		.byte	0xc
 3831 0c2d 1A       		.byte	0x1a
 3832 0c2e 160C0000 		.4byte	0xc16
 3833 0c32 05       		.uleb128 0x5
 3834 0c33 03       		.byte	0x3
 3835 0c34 00000000 		.4byte	http_request
 3836 0c38 23       		.uleb128 0x23
 3837 0c39 29090000 		.4byte	.LASF165
 3838 0c3d 0C       		.byte	0xc
 3839 0c3e 1B       		.byte	0x1b
 3840 0c3f 160C0000 		.4byte	0xc16
 3841 0c43 05       		.uleb128 0x5
 3842 0c44 03       		.byte	0x3
 3843 0c45 00000000 		.4byte	http_body
 3844 0c49 23       		.uleb128 0x23
 3845 0c4a 03080000 		.4byte	.LASF166
 3846 0c4e 0C       		.byte	0xc
 3847 0c4f 1C       		.byte	0x1c
 3848 0c50 D9080000 		.4byte	0x8d9
 3849 0c54 05       		.uleb128 0x5
 3850 0c55 03       		.byte	0x3
 3851 0c56 00000000 		.4byte	http_route
 3852 0c5a 23       		.uleb128 0x23
 3853 0c5b 02070000 		.4byte	.LASF167
 3854 0c5f 0C       		.byte	0xc
 3855 0c60 43       		.byte	0x43
 3856 0c61 1F050000 		.4byte	0x51f
 3857 0c65 05       		.uleb128 0x5
 3858 0c66 03       		.byte	0x3
 3859 0c67 00000000 		.4byte	system_info
 3860 0c6b 23       		.uleb128 0x23
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 85


 3861 0c6c A2060000 		.4byte	.LASF168
 3862 0c70 0C       		.byte	0xc
 3863 0c71 55       		.byte	0x55
 3864 0c72 5B050000 		.4byte	0x55b
 3865 0c76 05       		.uleb128 0x5
 3866 0c77 03       		.byte	0x3
 3867 0c78 00000000 		.4byte	system_settings
 3868 0c7c 23       		.uleb128 0x23
 3869 0c7d 7F010000 		.4byte	.LASF169
 3870 0c81 0C       		.byte	0xc
 3871 0c82 71       		.byte	0x71
 3872 0c83 E8040000 		.4byte	0x4e8
 3873 0c87 05       		.uleb128 0x5
 3874 0c88 03       		.byte	0x3
 3875 0c89 00000000 		.4byte	alarmMeasure
 3876 0c8d 23       		.uleb128 0x23
 3877 0c8e E2010000 		.4byte	.LASF170
 3878 0c92 0C       		.byte	0xc
 3879 0c93 72       		.byte	0x72
 3880 0c94 81000000 		.4byte	0x81
 3881 0c98 05       		.uleb128 0x5
 3882 0c99 03       		.byte	0x3
 3883 0c9a 00000000 		.4byte	timeToMeasure
 3884 0c9e 23       		.uleb128 0x23
 3885 0c9f 75030000 		.4byte	.LASF171
 3886 0ca3 0C       		.byte	0xc
 3887 0ca4 73       		.byte	0x73
 3888 0ca5 E8040000 		.4byte	0x4e8
 3889 0ca9 05       		.uleb128 0x5
 3890 0caa 03       		.byte	0x3
 3891 0cab 00000000 		.4byte	alarmSync
 3892 0caf 23       		.uleb128 0x23
 3893 0cb0 08020000 		.4byte	.LASF172
 3894 0cb4 0C       		.byte	0xc
 3895 0cb5 74       		.byte	0x74
 3896 0cb6 81000000 		.4byte	0x81
 3897 0cba 05       		.uleb128 0x5
 3898 0cbb 03       		.byte	0x3
 3899 0cbc 00000000 		.4byte	timeToSync
 3900 0cc0 23       		.uleb128 0x23
 3901 0cc1 AF050000 		.4byte	.LASF173
 3902 0cc5 0C       		.byte	0xc
 3903 0cc6 75       		.byte	0x75
 3904 0cc7 81000000 		.4byte	0x81
 3905 0ccb 05       		.uleb128 0x5
 3906 0ccc 03       		.byte	0x3
 3907 0ccd 00000000 		.4byte	timeToSycnRemoteParams
 3908 0cd1 24       		.uleb128 0x24
 3909 0cd2 68657900 		.ascii	"hey\000"
 3910 0cd6 0C       		.byte	0xc
 3911 0cd7 76       		.byte	0x76
 3912 0cd8 81000000 		.4byte	0x81
 3913 0cdc 05       		.uleb128 0x5
 3914 0cdd 03       		.byte	0x3
 3915 0cde 00000000 		.4byte	hey
 3916 0ce2 23       		.uleb128 0x23
 3917 0ce3 B7040000 		.4byte	.LASF174
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 86


 3918 0ce7 0C       		.byte	0xc
 3919 0ce8 7A       		.byte	0x7a
 3920 0ce9 E8040000 		.4byte	0x4e8
 3921 0ced 05       		.uleb128 0x5
 3922 0cee 03       		.byte	0x3
 3923 0cef 00000000 		.4byte	alarmAppLED
 3924 0cf3 23       		.uleb128 0x23
 3925 0cf4 DC020000 		.4byte	.LASF175
 3926 0cf8 0C       		.byte	0xc
 3927 0cf9 7B       		.byte	0x7b
 3928 0cfa 81000000 		.4byte	0x81
 3929 0cfe 05       		.uleb128 0x5
 3930 0cff 03       		.byte	0x3
 3931 0d00 00000000 		.4byte	timeToAppLED
 3932 0d04 23       		.uleb128 0x23
 3933 0d05 8A070000 		.4byte	.LASF176
 3934 0d09 0C       		.byte	0xc
 3935 0d0a 7D       		.byte	0x7d
 3936 0d0b E8040000 		.4byte	0x4e8
 3937 0d0f 05       		.uleb128 0x5
 3938 0d10 03       		.byte	0x3
 3939 0d11 00000000 		.4byte	alarmLevelSensor
 3940 0d15 23       		.uleb128 0x23
 3941 0d16 99010000 		.4byte	.LASF177
 3942 0d1a 0C       		.byte	0xc
 3943 0d1b 7E       		.byte	0x7e
 3944 0d1c 81000000 		.4byte	0x81
 3945 0d20 05       		.uleb128 0x5
 3946 0d21 03       		.byte	0x3
 3947 0d22 00000000 		.4byte	timetoLevelSensor
 3948 0d26 23       		.uleb128 0x23
 3949 0d27 66020000 		.4byte	.LASF178
 3950 0d2b 0C       		.byte	0xc
 3951 0d2c 80       		.byte	0x80
 3952 0d2d E8040000 		.4byte	0x4e8
 3953 0d31 05       		.uleb128 0x5
 3954 0d32 03       		.byte	0x3
 3955 0d33 00000000 		.4byte	alarmDownstreamLevelSensor
 3956 0d37 23       		.uleb128 0x23
 3957 0d38 6C050000 		.4byte	.LASF179
 3958 0d3c 0C       		.byte	0xc
 3959 0d3d 81       		.byte	0x81
 3960 0d3e 81000000 		.4byte	0x81
 3961 0d42 05       		.uleb128 0x5
 3962 0d43 03       		.byte	0x3
 3963 0d44 00000000 		.4byte	timetoDownstreamLevelSensor
 3964 0d48 23       		.uleb128 0x23
 3965 0d49 F8070000 		.4byte	.LASF180
 3966 0d4d 0C       		.byte	0xc
 3967 0d4e 83       		.byte	0x83
 3968 0d4f E8040000 		.4byte	0x4e8
 3969 0d53 05       		.uleb128 0x5
 3970 0d54 03       		.byte	0x3
 3971 0d55 00000000 		.4byte	alarmValve
 3972 0d59 23       		.uleb128 0x23
 3973 0d5a 1E060000 		.4byte	.LASF181
 3974 0d5e 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 87


 3975 0d5f 84       		.byte	0x84
 3976 0d60 81000000 		.4byte	0x81
 3977 0d64 05       		.uleb128 0x5
 3978 0d65 03       		.byte	0x3
 3979 0d66 00000000 		.4byte	timeToValve
 3980 0d6a 07       		.uleb128 0x7
 3981 0d6b D7000000 		.4byte	0xd7
 3982 0d6f 7A0D0000 		.4byte	0xd7a
 3983 0d73 08       		.uleb128 0x8
 3984 0d74 E5000000 		.4byte	0xe5
 3985 0d78 1D       		.byte	0x1d
 3986 0d79 00       		.byte	0
 3987 0d7a 23       		.uleb128 0x23
 3988 0d7b 5C060000 		.4byte	.LASF182
 3989 0d7f 01       		.byte	0x1
 3990 0d80 1D       		.byte	0x1d
 3991 0d81 6A0D0000 		.4byte	0xd6a
 3992 0d85 05       		.uleb128 0x5
 3993 0d86 03       		.byte	0x3
 3994 0d87 00000000 		.4byte	Data_fileName
 3995 0d8b 23       		.uleb128 0x23
 3996 0d8c FC030000 		.4byte	.LASF96
 3997 0d90 01       		.byte	0x1
 3998 0d91 1E       		.byte	0x1e
 3999 0d92 81000000 		.4byte	0x81
 4000 0d96 05       		.uleb128 0x5
 4001 0d97 03       		.byte	0x3
 4002 0d98 00000000 		.4byte	try_counter
 4003 0d9c 00       		.byte	0
 4004              		.section	.debug_abbrev,"",%progbits
 4005              	.Ldebug_abbrev0:
 4006 0000 01       		.uleb128 0x1
 4007 0001 11       		.uleb128 0x11
 4008 0002 01       		.byte	0x1
 4009 0003 25       		.uleb128 0x25
 4010 0004 0E       		.uleb128 0xe
 4011 0005 13       		.uleb128 0x13
 4012 0006 0B       		.uleb128 0xb
 4013 0007 03       		.uleb128 0x3
 4014 0008 0E       		.uleb128 0xe
 4015 0009 1B       		.uleb128 0x1b
 4016 000a 0E       		.uleb128 0xe
 4017 000b 55       		.uleb128 0x55
 4018 000c 17       		.uleb128 0x17
 4019 000d 11       		.uleb128 0x11
 4020 000e 01       		.uleb128 0x1
 4021 000f 10       		.uleb128 0x10
 4022 0010 17       		.uleb128 0x17
 4023 0011 00       		.byte	0
 4024 0012 00       		.byte	0
 4025 0013 02       		.uleb128 0x2
 4026 0014 24       		.uleb128 0x24
 4027 0015 00       		.byte	0
 4028 0016 0B       		.uleb128 0xb
 4029 0017 0B       		.uleb128 0xb
 4030 0018 3E       		.uleb128 0x3e
 4031 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 88


 4032 001a 03       		.uleb128 0x3
 4033 001b 0E       		.uleb128 0xe
 4034 001c 00       		.byte	0
 4035 001d 00       		.byte	0
 4036 001e 03       		.uleb128 0x3
 4037 001f 16       		.uleb128 0x16
 4038 0020 00       		.byte	0
 4039 0021 03       		.uleb128 0x3
 4040 0022 0E       		.uleb128 0xe
 4041 0023 3A       		.uleb128 0x3a
 4042 0024 0B       		.uleb128 0xb
 4043 0025 3B       		.uleb128 0x3b
 4044 0026 0B       		.uleb128 0xb
 4045 0027 49       		.uleb128 0x49
 4046 0028 13       		.uleb128 0x13
 4047 0029 00       		.byte	0
 4048 002a 00       		.byte	0
 4049 002b 04       		.uleb128 0x4
 4050 002c 24       		.uleb128 0x24
 4051 002d 00       		.byte	0
 4052 002e 0B       		.uleb128 0xb
 4053 002f 0B       		.uleb128 0xb
 4054 0030 3E       		.uleb128 0x3e
 4055 0031 0B       		.uleb128 0xb
 4056 0032 03       		.uleb128 0x3
 4057 0033 08       		.uleb128 0x8
 4058 0034 00       		.byte	0
 4059 0035 00       		.byte	0
 4060 0036 05       		.uleb128 0x5
 4061 0037 16       		.uleb128 0x16
 4062 0038 00       		.byte	0
 4063 0039 03       		.uleb128 0x3
 4064 003a 0E       		.uleb128 0xe
 4065 003b 3A       		.uleb128 0x3a
 4066 003c 0B       		.uleb128 0xb
 4067 003d 3B       		.uleb128 0x3b
 4068 003e 05       		.uleb128 0x5
 4069 003f 49       		.uleb128 0x49
 4070 0040 13       		.uleb128 0x13
 4071 0041 00       		.byte	0
 4072 0042 00       		.byte	0
 4073 0043 06       		.uleb128 0x6
 4074 0044 0F       		.uleb128 0xf
 4075 0045 00       		.byte	0
 4076 0046 0B       		.uleb128 0xb
 4077 0047 0B       		.uleb128 0xb
 4078 0048 49       		.uleb128 0x49
 4079 0049 13       		.uleb128 0x13
 4080 004a 00       		.byte	0
 4081 004b 00       		.byte	0
 4082 004c 07       		.uleb128 0x7
 4083 004d 01       		.uleb128 0x1
 4084 004e 01       		.byte	0x1
 4085 004f 49       		.uleb128 0x49
 4086 0050 13       		.uleb128 0x13
 4087 0051 01       		.uleb128 0x1
 4088 0052 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 89


 4089 0053 00       		.byte	0
 4090 0054 00       		.byte	0
 4091 0055 08       		.uleb128 0x8
 4092 0056 21       		.uleb128 0x21
 4093 0057 00       		.byte	0
 4094 0058 49       		.uleb128 0x49
 4095 0059 13       		.uleb128 0x13
 4096 005a 2F       		.uleb128 0x2f
 4097 005b 0B       		.uleb128 0xb
 4098 005c 00       		.byte	0
 4099 005d 00       		.byte	0
 4100 005e 09       		.uleb128 0x9
 4101 005f 13       		.uleb128 0x13
 4102 0060 01       		.byte	0x1
 4103 0061 0B       		.uleb128 0xb
 4104 0062 0B       		.uleb128 0xb
 4105 0063 3A       		.uleb128 0x3a
 4106 0064 0B       		.uleb128 0xb
 4107 0065 3B       		.uleb128 0x3b
 4108 0066 0B       		.uleb128 0xb
 4109 0067 01       		.uleb128 0x1
 4110 0068 13       		.uleb128 0x13
 4111 0069 00       		.byte	0
 4112 006a 00       		.byte	0
 4113 006b 0A       		.uleb128 0xa
 4114 006c 0D       		.uleb128 0xd
 4115 006d 00       		.byte	0
 4116 006e 03       		.uleb128 0x3
 4117 006f 08       		.uleb128 0x8
 4118 0070 3A       		.uleb128 0x3a
 4119 0071 0B       		.uleb128 0xb
 4120 0072 3B       		.uleb128 0x3b
 4121 0073 0B       		.uleb128 0xb
 4122 0074 49       		.uleb128 0x49
 4123 0075 13       		.uleb128 0x13
 4124 0076 38       		.uleb128 0x38
 4125 0077 0B       		.uleb128 0xb
 4126 0078 00       		.byte	0
 4127 0079 00       		.byte	0
 4128 007a 0B       		.uleb128 0xb
 4129 007b 0D       		.uleb128 0xd
 4130 007c 00       		.byte	0
 4131 007d 03       		.uleb128 0x3
 4132 007e 0E       		.uleb128 0xe
 4133 007f 3A       		.uleb128 0x3a
 4134 0080 0B       		.uleb128 0xb
 4135 0081 3B       		.uleb128 0x3b
 4136 0082 0B       		.uleb128 0xb
 4137 0083 49       		.uleb128 0x49
 4138 0084 13       		.uleb128 0x13
 4139 0085 38       		.uleb128 0x38
 4140 0086 0B       		.uleb128 0xb
 4141 0087 00       		.byte	0
 4142 0088 00       		.byte	0
 4143 0089 0C       		.uleb128 0xc
 4144 008a 35       		.uleb128 0x35
 4145 008b 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 90


 4146 008c 49       		.uleb128 0x49
 4147 008d 13       		.uleb128 0x13
 4148 008e 00       		.byte	0
 4149 008f 00       		.byte	0
 4150 0090 0D       		.uleb128 0xd
 4151 0091 13       		.uleb128 0x13
 4152 0092 01       		.byte	0x1
 4153 0093 0B       		.uleb128 0xb
 4154 0094 05       		.uleb128 0x5
 4155 0095 3A       		.uleb128 0x3a
 4156 0096 0B       		.uleb128 0xb
 4157 0097 3B       		.uleb128 0x3b
 4158 0098 0B       		.uleb128 0xb
 4159 0099 01       		.uleb128 0x1
 4160 009a 13       		.uleb128 0x13
 4161 009b 00       		.byte	0
 4162 009c 00       		.byte	0
 4163 009d 0E       		.uleb128 0xe
 4164 009e 13       		.uleb128 0x13
 4165 009f 01       		.byte	0x1
 4166 00a0 03       		.uleb128 0x3
 4167 00a1 08       		.uleb128 0x8
 4168 00a2 0B       		.uleb128 0xb
 4169 00a3 0B       		.uleb128 0xb
 4170 00a4 3A       		.uleb128 0x3a
 4171 00a5 0B       		.uleb128 0xb
 4172 00a6 3B       		.uleb128 0x3b
 4173 00a7 0B       		.uleb128 0xb
 4174 00a8 01       		.uleb128 0x1
 4175 00a9 13       		.uleb128 0x13
 4176 00aa 00       		.byte	0
 4177 00ab 00       		.byte	0
 4178 00ac 0F       		.uleb128 0xf
 4179 00ad 2E       		.uleb128 0x2e
 4180 00ae 00       		.byte	0
 4181 00af 3F       		.uleb128 0x3f
 4182 00b0 19       		.uleb128 0x19
 4183 00b1 03       		.uleb128 0x3
 4184 00b2 0E       		.uleb128 0xe
 4185 00b3 3A       		.uleb128 0x3a
 4186 00b4 0B       		.uleb128 0xb
 4187 00b5 3B       		.uleb128 0x3b
 4188 00b6 0B       		.uleb128 0xb
 4189 00b7 27       		.uleb128 0x27
 4190 00b8 19       		.uleb128 0x19
 4191 00b9 11       		.uleb128 0x11
 4192 00ba 01       		.uleb128 0x1
 4193 00bb 12       		.uleb128 0x12
 4194 00bc 06       		.uleb128 0x6
 4195 00bd 40       		.uleb128 0x40
 4196 00be 18       		.uleb128 0x18
 4197 00bf 9642     		.uleb128 0x2116
 4198 00c1 19       		.uleb128 0x19
 4199 00c2 00       		.byte	0
 4200 00c3 00       		.byte	0
 4201 00c4 10       		.uleb128 0x10
 4202 00c5 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 91


 4203 00c6 01       		.byte	0x1
 4204 00c7 3F       		.uleb128 0x3f
 4205 00c8 19       		.uleb128 0x19
 4206 00c9 03       		.uleb128 0x3
 4207 00ca 0E       		.uleb128 0xe
 4208 00cb 3A       		.uleb128 0x3a
 4209 00cc 0B       		.uleb128 0xb
 4210 00cd 3B       		.uleb128 0x3b
 4211 00ce 0B       		.uleb128 0xb
 4212 00cf 11       		.uleb128 0x11
 4213 00d0 01       		.uleb128 0x1
 4214 00d1 12       		.uleb128 0x12
 4215 00d2 06       		.uleb128 0x6
 4216 00d3 40       		.uleb128 0x40
 4217 00d4 18       		.uleb128 0x18
 4218 00d5 9642     		.uleb128 0x2116
 4219 00d7 19       		.uleb128 0x19
 4220 00d8 01       		.uleb128 0x1
 4221 00d9 13       		.uleb128 0x13
 4222 00da 00       		.byte	0
 4223 00db 00       		.byte	0
 4224 00dc 11       		.uleb128 0x11
 4225 00dd 34       		.uleb128 0x34
 4226 00de 00       		.byte	0
 4227 00df 03       		.uleb128 0x3
 4228 00e0 0E       		.uleb128 0xe
 4229 00e1 3A       		.uleb128 0x3a
 4230 00e2 0B       		.uleb128 0xb
 4231 00e3 3B       		.uleb128 0x3b
 4232 00e4 0B       		.uleb128 0xb
 4233 00e5 49       		.uleb128 0x49
 4234 00e6 13       		.uleb128 0x13
 4235 00e7 02       		.uleb128 0x2
 4236 00e8 18       		.uleb128 0x18
 4237 00e9 00       		.byte	0
 4238 00ea 00       		.byte	0
 4239 00eb 12       		.uleb128 0x12
 4240 00ec 2E       		.uleb128 0x2e
 4241 00ed 01       		.byte	0x1
 4242 00ee 3F       		.uleb128 0x3f
 4243 00ef 19       		.uleb128 0x19
 4244 00f0 03       		.uleb128 0x3
 4245 00f1 0E       		.uleb128 0xe
 4246 00f2 3A       		.uleb128 0x3a
 4247 00f3 0B       		.uleb128 0xb
 4248 00f4 3B       		.uleb128 0x3b
 4249 00f5 0B       		.uleb128 0xb
 4250 00f6 49       		.uleb128 0x49
 4251 00f7 13       		.uleb128 0x13
 4252 00f8 11       		.uleb128 0x11
 4253 00f9 01       		.uleb128 0x1
 4254 00fa 12       		.uleb128 0x12
 4255 00fb 06       		.uleb128 0x6
 4256 00fc 40       		.uleb128 0x40
 4257 00fd 18       		.uleb128 0x18
 4258 00fe 9642     		.uleb128 0x2116
 4259 0100 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 92


 4260 0101 01       		.uleb128 0x1
 4261 0102 13       		.uleb128 0x13
 4262 0103 00       		.byte	0
 4263 0104 00       		.byte	0
 4264 0105 13       		.uleb128 0x13
 4265 0106 2E       		.uleb128 0x2e
 4266 0107 00       		.byte	0
 4267 0108 3F       		.uleb128 0x3f
 4268 0109 19       		.uleb128 0x19
 4269 010a 03       		.uleb128 0x3
 4270 010b 0E       		.uleb128 0xe
 4271 010c 3A       		.uleb128 0x3a
 4272 010d 0B       		.uleb128 0xb
 4273 010e 3B       		.uleb128 0x3b
 4274 010f 0B       		.uleb128 0xb
 4275 0110 11       		.uleb128 0x11
 4276 0111 01       		.uleb128 0x1
 4277 0112 12       		.uleb128 0x12
 4278 0113 06       		.uleb128 0x6
 4279 0114 40       		.uleb128 0x40
 4280 0115 18       		.uleb128 0x18
 4281 0116 9642     		.uleb128 0x2116
 4282 0118 19       		.uleb128 0x19
 4283 0119 00       		.byte	0
 4284 011a 00       		.byte	0
 4285 011b 14       		.uleb128 0x14
 4286 011c 2E       		.uleb128 0x2e
 4287 011d 01       		.byte	0x1
 4288 011e 3F       		.uleb128 0x3f
 4289 011f 19       		.uleb128 0x19
 4290 0120 03       		.uleb128 0x3
 4291 0121 0E       		.uleb128 0xe
 4292 0122 3A       		.uleb128 0x3a
 4293 0123 0B       		.uleb128 0xb
 4294 0124 3B       		.uleb128 0x3b
 4295 0125 0B       		.uleb128 0xb
 4296 0126 27       		.uleb128 0x27
 4297 0127 19       		.uleb128 0x19
 4298 0128 11       		.uleb128 0x11
 4299 0129 01       		.uleb128 0x1
 4300 012a 12       		.uleb128 0x12
 4301 012b 06       		.uleb128 0x6
 4302 012c 40       		.uleb128 0x40
 4303 012d 18       		.uleb128 0x18
 4304 012e 9642     		.uleb128 0x2116
 4305 0130 19       		.uleb128 0x19
 4306 0131 01       		.uleb128 0x1
 4307 0132 13       		.uleb128 0x13
 4308 0133 00       		.byte	0
 4309 0134 00       		.byte	0
 4310 0135 15       		.uleb128 0x15
 4311 0136 05       		.uleb128 0x5
 4312 0137 00       		.byte	0
 4313 0138 03       		.uleb128 0x3
 4314 0139 0E       		.uleb128 0xe
 4315 013a 3A       		.uleb128 0x3a
 4316 013b 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 93


 4317 013c 3B       		.uleb128 0x3b
 4318 013d 0B       		.uleb128 0xb
 4319 013e 49       		.uleb128 0x49
 4320 013f 13       		.uleb128 0x13
 4321 0140 02       		.uleb128 0x2
 4322 0141 18       		.uleb128 0x18
 4323 0142 00       		.byte	0
 4324 0143 00       		.byte	0
 4325 0144 16       		.uleb128 0x16
 4326 0145 2E       		.uleb128 0x2e
 4327 0146 01       		.byte	0x1
 4328 0147 3F       		.uleb128 0x3f
 4329 0148 19       		.uleb128 0x19
 4330 0149 03       		.uleb128 0x3
 4331 014a 0E       		.uleb128 0xe
 4332 014b 3A       		.uleb128 0x3a
 4333 014c 0B       		.uleb128 0xb
 4334 014d 3B       		.uleb128 0x3b
 4335 014e 05       		.uleb128 0x5
 4336 014f 27       		.uleb128 0x27
 4337 0150 19       		.uleb128 0x19
 4338 0151 49       		.uleb128 0x49
 4339 0152 13       		.uleb128 0x13
 4340 0153 11       		.uleb128 0x11
 4341 0154 01       		.uleb128 0x1
 4342 0155 12       		.uleb128 0x12
 4343 0156 06       		.uleb128 0x6
 4344 0157 40       		.uleb128 0x40
 4345 0158 18       		.uleb128 0x18
 4346 0159 9642     		.uleb128 0x2116
 4347 015b 19       		.uleb128 0x19
 4348 015c 01       		.uleb128 0x1
 4349 015d 13       		.uleb128 0x13
 4350 015e 00       		.byte	0
 4351 015f 00       		.byte	0
 4352 0160 17       		.uleb128 0x17
 4353 0161 05       		.uleb128 0x5
 4354 0162 00       		.byte	0
 4355 0163 03       		.uleb128 0x3
 4356 0164 0E       		.uleb128 0xe
 4357 0165 3A       		.uleb128 0x3a
 4358 0166 0B       		.uleb128 0xb
 4359 0167 3B       		.uleb128 0x3b
 4360 0168 05       		.uleb128 0x5
 4361 0169 49       		.uleb128 0x49
 4362 016a 13       		.uleb128 0x13
 4363 016b 02       		.uleb128 0x2
 4364 016c 18       		.uleb128 0x18
 4365 016d 00       		.byte	0
 4366 016e 00       		.byte	0
 4367 016f 18       		.uleb128 0x18
 4368 0170 2E       		.uleb128 0x2e
 4369 0171 01       		.byte	0x1
 4370 0172 3F       		.uleb128 0x3f
 4371 0173 19       		.uleb128 0x19
 4372 0174 03       		.uleb128 0x3
 4373 0175 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 94


 4374 0176 3A       		.uleb128 0x3a
 4375 0177 0B       		.uleb128 0xb
 4376 0178 3B       		.uleb128 0x3b
 4377 0179 05       		.uleb128 0x5
 4378 017a 27       		.uleb128 0x27
 4379 017b 19       		.uleb128 0x19
 4380 017c 11       		.uleb128 0x11
 4381 017d 01       		.uleb128 0x1
 4382 017e 12       		.uleb128 0x12
 4383 017f 06       		.uleb128 0x6
 4384 0180 40       		.uleb128 0x40
 4385 0181 18       		.uleb128 0x18
 4386 0182 9742     		.uleb128 0x2117
 4387 0184 19       		.uleb128 0x19
 4388 0185 01       		.uleb128 0x1
 4389 0186 13       		.uleb128 0x13
 4390 0187 00       		.byte	0
 4391 0188 00       		.byte	0
 4392 0189 19       		.uleb128 0x19
 4393 018a 2E       		.uleb128 0x2e
 4394 018b 01       		.byte	0x1
 4395 018c 3F       		.uleb128 0x3f
 4396 018d 19       		.uleb128 0x19
 4397 018e 03       		.uleb128 0x3
 4398 018f 0E       		.uleb128 0xe
 4399 0190 3A       		.uleb128 0x3a
 4400 0191 0B       		.uleb128 0xb
 4401 0192 3B       		.uleb128 0x3b
 4402 0193 05       		.uleb128 0x5
 4403 0194 27       		.uleb128 0x27
 4404 0195 19       		.uleb128 0x19
 4405 0196 49       		.uleb128 0x49
 4406 0197 13       		.uleb128 0x13
 4407 0198 11       		.uleb128 0x11
 4408 0199 01       		.uleb128 0x1
 4409 019a 12       		.uleb128 0x12
 4410 019b 06       		.uleb128 0x6
 4411 019c 40       		.uleb128 0x40
 4412 019d 18       		.uleb128 0x18
 4413 019e 9742     		.uleb128 0x2117
 4414 01a0 19       		.uleb128 0x19
 4415 01a1 01       		.uleb128 0x1
 4416 01a2 13       		.uleb128 0x13
 4417 01a3 00       		.byte	0
 4418 01a4 00       		.byte	0
 4419 01a5 1A       		.uleb128 0x1a
 4420 01a6 34       		.uleb128 0x34
 4421 01a7 00       		.byte	0
 4422 01a8 03       		.uleb128 0x3
 4423 01a9 0E       		.uleb128 0xe
 4424 01aa 3A       		.uleb128 0x3a
 4425 01ab 0B       		.uleb128 0xb
 4426 01ac 3B       		.uleb128 0x3b
 4427 01ad 05       		.uleb128 0x5
 4428 01ae 49       		.uleb128 0x49
 4429 01af 13       		.uleb128 0x13
 4430 01b0 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 95


 4431 01b1 18       		.uleb128 0x18
 4432 01b2 00       		.byte	0
 4433 01b3 00       		.byte	0
 4434 01b4 1B       		.uleb128 0x1b
 4435 01b5 2E       		.uleb128 0x2e
 4436 01b6 01       		.byte	0x1
 4437 01b7 3F       		.uleb128 0x3f
 4438 01b8 19       		.uleb128 0x19
 4439 01b9 03       		.uleb128 0x3
 4440 01ba 0E       		.uleb128 0xe
 4441 01bb 3A       		.uleb128 0x3a
 4442 01bc 0B       		.uleb128 0xb
 4443 01bd 3B       		.uleb128 0x3b
 4444 01be 05       		.uleb128 0x5
 4445 01bf 11       		.uleb128 0x11
 4446 01c0 01       		.uleb128 0x1
 4447 01c1 12       		.uleb128 0x12
 4448 01c2 06       		.uleb128 0x6
 4449 01c3 40       		.uleb128 0x40
 4450 01c4 18       		.uleb128 0x18
 4451 01c5 9642     		.uleb128 0x2116
 4452 01c7 19       		.uleb128 0x19
 4453 01c8 01       		.uleb128 0x1
 4454 01c9 13       		.uleb128 0x13
 4455 01ca 00       		.byte	0
 4456 01cb 00       		.byte	0
 4457 01cc 1C       		.uleb128 0x1c
 4458 01cd 2E       		.uleb128 0x2e
 4459 01ce 00       		.byte	0
 4460 01cf 3F       		.uleb128 0x3f
 4461 01d0 19       		.uleb128 0x19
 4462 01d1 03       		.uleb128 0x3
 4463 01d2 0E       		.uleb128 0xe
 4464 01d3 3A       		.uleb128 0x3a
 4465 01d4 0B       		.uleb128 0xb
 4466 01d5 3B       		.uleb128 0x3b
 4467 01d6 05       		.uleb128 0x5
 4468 01d7 27       		.uleb128 0x27
 4469 01d8 19       		.uleb128 0x19
 4470 01d9 49       		.uleb128 0x49
 4471 01da 13       		.uleb128 0x13
 4472 01db 11       		.uleb128 0x11
 4473 01dc 01       		.uleb128 0x1
 4474 01dd 12       		.uleb128 0x12
 4475 01de 06       		.uleb128 0x6
 4476 01df 40       		.uleb128 0x40
 4477 01e0 18       		.uleb128 0x18
 4478 01e1 9642     		.uleb128 0x2116
 4479 01e3 19       		.uleb128 0x19
 4480 01e4 00       		.byte	0
 4481 01e5 00       		.byte	0
 4482 01e6 1D       		.uleb128 0x1d
 4483 01e7 2E       		.uleb128 0x2e
 4484 01e8 01       		.byte	0x1
 4485 01e9 3F       		.uleb128 0x3f
 4486 01ea 19       		.uleb128 0x19
 4487 01eb 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 96


 4488 01ec 0E       		.uleb128 0xe
 4489 01ed 3A       		.uleb128 0x3a
 4490 01ee 0B       		.uleb128 0xb
 4491 01ef 3B       		.uleb128 0x3b
 4492 01f0 05       		.uleb128 0x5
 4493 01f1 49       		.uleb128 0x49
 4494 01f2 13       		.uleb128 0x13
 4495 01f3 11       		.uleb128 0x11
 4496 01f4 01       		.uleb128 0x1
 4497 01f5 12       		.uleb128 0x12
 4498 01f6 06       		.uleb128 0x6
 4499 01f7 40       		.uleb128 0x40
 4500 01f8 18       		.uleb128 0x18
 4501 01f9 9642     		.uleb128 0x2116
 4502 01fb 19       		.uleb128 0x19
 4503 01fc 01       		.uleb128 0x1
 4504 01fd 13       		.uleb128 0x13
 4505 01fe 00       		.byte	0
 4506 01ff 00       		.byte	0
 4507 0200 1E       		.uleb128 0x1e
 4508 0201 0B       		.uleb128 0xb
 4509 0202 01       		.byte	0x1
 4510 0203 11       		.uleb128 0x11
 4511 0204 01       		.uleb128 0x1
 4512 0205 12       		.uleb128 0x12
 4513 0206 06       		.uleb128 0x6
 4514 0207 00       		.byte	0
 4515 0208 00       		.byte	0
 4516 0209 1F       		.uleb128 0x1f
 4517 020a 0B       		.uleb128 0xb
 4518 020b 01       		.byte	0x1
 4519 020c 11       		.uleb128 0x11
 4520 020d 01       		.uleb128 0x1
 4521 020e 12       		.uleb128 0x12
 4522 020f 06       		.uleb128 0x6
 4523 0210 01       		.uleb128 0x1
 4524 0211 13       		.uleb128 0x13
 4525 0212 00       		.byte	0
 4526 0213 00       		.byte	0
 4527 0214 20       		.uleb128 0x20
 4528 0215 21       		.uleb128 0x21
 4529 0216 00       		.byte	0
 4530 0217 49       		.uleb128 0x49
 4531 0218 13       		.uleb128 0x13
 4532 0219 2F       		.uleb128 0x2f
 4533 021a 05       		.uleb128 0x5
 4534 021b 00       		.byte	0
 4535 021c 00       		.byte	0
 4536 021d 21       		.uleb128 0x21
 4537 021e 34       		.uleb128 0x34
 4538 021f 00       		.byte	0
 4539 0220 03       		.uleb128 0x3
 4540 0221 08       		.uleb128 0x8
 4541 0222 3A       		.uleb128 0x3a
 4542 0223 0B       		.uleb128 0xb
 4543 0224 3B       		.uleb128 0x3b
 4544 0225 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 97


 4545 0226 49       		.uleb128 0x49
 4546 0227 13       		.uleb128 0x13
 4547 0228 02       		.uleb128 0x2
 4548 0229 18       		.uleb128 0x18
 4549 022a 00       		.byte	0
 4550 022b 00       		.byte	0
 4551 022c 22       		.uleb128 0x22
 4552 022d 34       		.uleb128 0x34
 4553 022e 00       		.byte	0
 4554 022f 03       		.uleb128 0x3
 4555 0230 0E       		.uleb128 0xe
 4556 0231 3A       		.uleb128 0x3a
 4557 0232 0B       		.uleb128 0xb
 4558 0233 3B       		.uleb128 0x3b
 4559 0234 05       		.uleb128 0x5
 4560 0235 49       		.uleb128 0x49
 4561 0236 13       		.uleb128 0x13
 4562 0237 3F       		.uleb128 0x3f
 4563 0238 19       		.uleb128 0x19
 4564 0239 3C       		.uleb128 0x3c
 4565 023a 19       		.uleb128 0x19
 4566 023b 00       		.byte	0
 4567 023c 00       		.byte	0
 4568 023d 23       		.uleb128 0x23
 4569 023e 34       		.uleb128 0x34
 4570 023f 00       		.byte	0
 4571 0240 03       		.uleb128 0x3
 4572 0241 0E       		.uleb128 0xe
 4573 0242 3A       		.uleb128 0x3a
 4574 0243 0B       		.uleb128 0xb
 4575 0244 3B       		.uleb128 0x3b
 4576 0245 0B       		.uleb128 0xb
 4577 0246 49       		.uleb128 0x49
 4578 0247 13       		.uleb128 0x13
 4579 0248 3F       		.uleb128 0x3f
 4580 0249 19       		.uleb128 0x19
 4581 024a 02       		.uleb128 0x2
 4582 024b 18       		.uleb128 0x18
 4583 024c 00       		.byte	0
 4584 024d 00       		.byte	0
 4585 024e 24       		.uleb128 0x24
 4586 024f 34       		.uleb128 0x34
 4587 0250 00       		.byte	0
 4588 0251 03       		.uleb128 0x3
 4589 0252 08       		.uleb128 0x8
 4590 0253 3A       		.uleb128 0x3a
 4591 0254 0B       		.uleb128 0xb
 4592 0255 3B       		.uleb128 0x3b
 4593 0256 0B       		.uleb128 0xb
 4594 0257 49       		.uleb128 0x49
 4595 0258 13       		.uleb128 0x13
 4596 0259 3F       		.uleb128 0x3f
 4597 025a 19       		.uleb128 0x19
 4598 025b 02       		.uleb128 0x2
 4599 025c 18       		.uleb128 0x18
 4600 025d 00       		.byte	0
 4601 025e 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 98


 4602 025f 00       		.byte	0
 4603              		.section	.debug_aranges,"",%progbits
 4604 0000 8C000000 		.4byte	0x8c
 4605 0004 0200     		.2byte	0x2
 4606 0006 00000000 		.4byte	.Ldebug_info0
 4607 000a 04       		.byte	0x4
 4608 000b 00       		.byte	0
 4609 000c 0000     		.2byte	0
 4610 000e 0000     		.2byte	0
 4611 0010 00000000 		.4byte	.LFB64
 4612 0014 0C000000 		.4byte	.LFE64-.LFB64
 4613 0018 00000000 		.4byte	.LFB65
 4614 001c 84010000 		.4byte	.LFE65-.LFB65
 4615 0020 00000000 		.4byte	.LFB66
 4616 0024 F4000000 		.4byte	.LFE66-.LFB66
 4617 0028 00000000 		.4byte	.LFB67
 4618 002c 2A000000 		.4byte	.LFE67-.LFB67
 4619 0030 00000000 		.4byte	.LFB68
 4620 0034 A8000000 		.4byte	.LFE68-.LFB68
 4621 0038 00000000 		.4byte	.LFB69
 4622 003c 48000000 		.4byte	.LFE69-.LFB69
 4623 0040 00000000 		.4byte	.LFB70
 4624 0044 1E000000 		.4byte	.LFE70-.LFB70
 4625 0048 00000000 		.4byte	.LFB71
 4626 004c 46000000 		.4byte	.LFE71-.LFB71
 4627 0050 00000000 		.4byte	.LFB72
 4628 0054 50010000 		.4byte	.LFE72-.LFB72
 4629 0058 00000000 		.4byte	.LFB73
 4630 005c 1E000000 		.4byte	.LFE73-.LFB73
 4631 0060 00000000 		.4byte	.LFB74
 4632 0064 5C040000 		.4byte	.LFE74-.LFB74
 4633 0068 00000000 		.4byte	.LFB75
 4634 006c 44000000 		.4byte	.LFE75-.LFB75
 4635 0070 00000000 		.4byte	.LFB76
 4636 0074 9C020000 		.4byte	.LFE76-.LFB76
 4637 0078 00000000 		.4byte	.LFB77
 4638 007c 74000000 		.4byte	.LFE77-.LFB77
 4639 0080 00000000 		.4byte	.LFB78
 4640 0084 38010000 		.4byte	.LFE78-.LFB78
 4641 0088 00000000 		.4byte	0
 4642 008c 00000000 		.4byte	0
 4643              		.section	.debug_ranges,"",%progbits
 4644              	.Ldebug_ranges0:
 4645 0000 00000000 		.4byte	.LFB64
 4646 0004 0C000000 		.4byte	.LFE64
 4647 0008 00000000 		.4byte	.LFB65
 4648 000c 84010000 		.4byte	.LFE65
 4649 0010 00000000 		.4byte	.LFB66
 4650 0014 F4000000 		.4byte	.LFE66
 4651 0018 00000000 		.4byte	.LFB67
 4652 001c 2A000000 		.4byte	.LFE67
 4653 0020 00000000 		.4byte	.LFB68
 4654 0024 A8000000 		.4byte	.LFE68
 4655 0028 00000000 		.4byte	.LFB69
 4656 002c 48000000 		.4byte	.LFE69
 4657 0030 00000000 		.4byte	.LFB70
 4658 0034 1E000000 		.4byte	.LFE70
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 99


 4659 0038 00000000 		.4byte	.LFB71
 4660 003c 46000000 		.4byte	.LFE71
 4661 0040 00000000 		.4byte	.LFB72
 4662 0044 50010000 		.4byte	.LFE72
 4663 0048 00000000 		.4byte	.LFB73
 4664 004c 1E000000 		.4byte	.LFE73
 4665 0050 00000000 		.4byte	.LFB74
 4666 0054 5C040000 		.4byte	.LFE74
 4667 0058 00000000 		.4byte	.LFB75
 4668 005c 44000000 		.4byte	.LFE75
 4669 0060 00000000 		.4byte	.LFB76
 4670 0064 9C020000 		.4byte	.LFE76
 4671 0068 00000000 		.4byte	.LFB77
 4672 006c 74000000 		.4byte	.LFE77
 4673 0070 00000000 		.4byte	.LFB78
 4674 0074 38010000 		.4byte	.LFE78
 4675 0078 00000000 		.4byte	0
 4676 007c 00000000 		.4byte	0
 4677              		.section	.debug_line,"",%progbits
 4678              	.Ldebug_line0:
 4679 0000 86040000 		.section	.debug_str,"MS",%progbits,1
 4679      02005002 
 4679      00000201 
 4679      FB0E0D00 
 4679      01010101 
 4680              	.LASF115:
 4681 0000 745F6D6F 		.ascii	"t_modem\000"
 4681      64656D00 
 4682              	.LASF12:
 4683 0008 75696E74 		.ascii	"uint16\000"
 4683      313600
 4684              	.LASF51:
 4685 000f 746D5F68 		.ascii	"tm_hour\000"
 4685      6F757200 
 4686              	.LASF36:
 4687 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4687      696E7661 
 4687      6C69645F 
 4687      72656164 
 4687      696E6773 
 4688              	.LASF185:
 4689 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4689      73657273 
 4689      5C64616E 
 4689      747A5C44 
 4689      6F63756D 
 4690 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4690      2E637964 
 4690      736E00
 4691              	.LASF154:
 4692 0064 62756666 		.ascii	"buffer_overflow\000"
 4692      65725F6F 
 4692      76657266 
 4692      6C6F7700 
 4693              	.LASF146:
 4694 0074 66696C65 		.ascii	"fileName\000"
 4694      4E616D65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 100


 4694      00
 4695              	.LASF0:
 4696 007d 7369676E 		.ascii	"signed char\000"
 4696      65642063 
 4696      68617200 
 4697              	.LASF87:
 4698 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4698      74446F77 
 4698      6E526573 
 4698      6574436F 
 4698      6E646974 
 4699              	.LASF186:
 4700 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4700      75705F49 
 4700      535200
 4701              	.LASF183:
 4702 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4702      43313120 
 4702      352E342E 
 4702      31203230 
 4702      31363036 
 4703 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4703      20726576 
 4703      6973696F 
 4703      6E203233 
 4703      37373135 
 4704 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4704      66756E63 
 4704      74696F6E 
 4704      2D736563 
 4704      74696F6E 
 4705              	.LASF113:
 4706 013a 745F7072 		.ascii	"t_pressure\000"
 4706      65737375 
 4706      726500
 4707              	.LASF26:
 4708 0145 4D6F6E74 		.ascii	"Month\000"
 4708      6800
 4709              	.LASF7:
 4710 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4710      206C6F6E 
 4710      6720756E 
 4710      7369676E 
 4710      65642069 
 4711              	.LASF22:
 4712 0162 486F7572 		.ascii	"Hour\000"
 4712      00
 4713              	.LASF160:
 4714 0167 6D6F6465 		.ascii	"modem_stats\000"
 4714      6D5F7374 
 4714      61747300 
 4715              	.LASF158:
 4716 0173 6D6F6465 		.ascii	"modem_state\000"
 4716      6D5F7374 
 4716      61746500 
 4717              	.LASF169:
 4718 017f 616C6172 		.ascii	"alarmMeasure\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 101


 4718      6D4D6561 
 4718      73757265 
 4718      00
 4719              	.LASF147:
 4720 018c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4720      52784275 
 4720      66666572 
 4720      00
 4721              	.LASF177:
 4722 0199 74696D65 		.ascii	"timetoLevelSensor\000"
 4722      746F4C65 
 4722      76656C53 
 4722      656E736F 
 4722      7200
 4723              	.LASF109:
 4724 01ab 745F6C65 		.ascii	"t_level_sensor\000"
 4724      76656C5F 
 4724      73656E73 
 4724      6F7200
 4725              	.LASF164:
 4726 01ba 68747470 		.ascii	"http_request\000"
 4726      5F726571 
 4726      75657374 
 4726      00
 4727              	.LASF6:
 4728 01c7 6C6F6E67 		.ascii	"long long int\000"
 4728      206C6F6E 
 4728      6720696E 
 4728      7400
 4729              	.LASF124:
 4730 01d5 7061636B 		.ascii	"packets\000"
 4730      65747300 
 4731              	.LASF67:
 4732 01dd 65636E6F 		.ascii	"ecno\000"
 4732      00
 4733              	.LASF170:
 4734 01e2 74696D65 		.ascii	"timeToMeasure\000"
 4734      546F4D65 
 4734      61737572 
 4734      6500
 4735              	.LASF70:
 4736 01f0 74696D65 		.ascii	"time_to_network_connect\000"
 4736      5F746F5F 
 4736      6E657477 
 4736      6F726B5F 
 4736      636F6E6E 
 4737              	.LASF172:
 4738 0208 74696D65 		.ascii	"timeToSync\000"
 4738      546F5379 
 4738      6E6300
 4739              	.LASF39:
 4740 0213 766F6C74 		.ascii	"voltage_solar\000"
 4740      6167655F 
 4740      736F6C61 
 4740      7200
 4741              	.LASF40:
 4742 0221 766F6C74 		.ascii	"voltage_charge_current\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 102


 4742      6167655F 
 4742      63686172 
 4742      67655F63 
 4742      75727265 
 4743              	.LASF145:
 4744 0238 75706772 		.ascii	"upgrade_status\000"
 4744      6164655F 
 4744      73746174 
 4744      757300
 4745              	.LASF127:
 4746 0247 635F6461 		.ascii	"c_data_count_sent\000"
 4746      74615F63 
 4746      6F756E74 
 4746      5F73656E 
 4746      7400
 4747              	.LASF64:
 4748 0259 6D6F6465 		.ascii	"modem_info_t\000"
 4748      6D5F696E 
 4748      666F5F74 
 4748      00
 4749              	.LASF178:
 4750 0266 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 4750      6D446F77 
 4750      6E737472 
 4750      65616D4C 
 4750      6576656C 
 4751              	.LASF65:
 4752 0281 72786C65 		.ascii	"rxlev\000"
 4752      7600
 4753              	.LASF4:
 4754 0287 6C6F6E67 		.ascii	"long int\000"
 4754      20696E74 
 4754      00
 4755              	.LASF71:
 4756 0290 74696D65 		.ascii	"time_to_acquire_ip\000"
 4756      5F746F5F 
 4756      61637175 
 4756      6972655F 
 4756      697000
 4757              	.LASF88:
 4758 02a3 616C6172 		.ascii	"alarm\000"
 4758      6D00
 4759              	.LASF45:
 4760 02a9 70726573 		.ascii	"pressure_voltage_off\000"
 4760      73757265 
 4760      5F766F6C 
 4760      74616765 
 4760      5F6F6666 
 4761              	.LASF11:
 4762 02be 75696E74 		.ascii	"uint8\000"
 4762      3800
 4763              	.LASF119:
 4764 02c4 635F7472 		.ascii	"c_try_counter\000"
 4764      795F636F 
 4764      756E7465 
 4764      7200
 4765              	.LASF130:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 103


 4766 02d2 73656E64 		.ascii	"send_time\000"
 4766      5F74696D 
 4766      6500
 4767              	.LASF175:
 4768 02dc 74696D65 		.ascii	"timeToAppLED\000"
 4768      546F4170 
 4768      704C4544 
 4768      00
 4769              	.LASF16:
 4770 02e9 696E7433 		.ascii	"int32\000"
 4770      3200
 4771              	.LASF73:
 4772 02ef 6E6F6465 		.ascii	"node_type\000"
 4772      5F747970 
 4772      6500
 4773              	.LASF116:
 4774 02f9 73796E63 		.ascii	"syncData\000"
 4774      44617461 
 4774      00
 4775              	.LASF125:
 4776 0302 6E657477 		.ascii	"network_time\000"
 4776      6F726B5F 
 4776      74696D65 
 4776      00
 4777              	.LASF13:
 4778 030f 75696E74 		.ascii	"uint32\000"
 4778      333200
 4779              	.LASF62:
 4780 0316 6D6F6465 		.ascii	"model_id\000"
 4780      6C5F6964 
 4780      00
 4781              	.LASF33:
 4782 031f 616C6C5F 		.ascii	"all_level_readings\000"
 4782      6C657665 
 4782      6C5F7265 
 4782      6164696E 
 4782      677300
 4783              	.LASF84:
 4784 0332 636F756E 		.ascii	"countDownValue\000"
 4784      74446F77 
 4784      6E56616C 
 4784      756500
 4785              	.LASF141:
 4786 0341 75706772 		.ascii	"upgraded\000"
 4786      61646564 
 4786      00
 4787              	.LASF53:
 4788 034a 746D5F6D 		.ascii	"tm_mon\000"
 4788      6F6E00
 4789              	.LASF77:
 4790 0351 64656275 		.ascii	"debug_level\000"
 4790      675F6C65 
 4790      76656C00 
 4791              	.LASF143:
 4792 035d 706F7274 		.ascii	"port\000"
 4792      00
 4793              	.LASF58:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 104


 4794 0362 76616C75 		.ascii	"value\000"
 4794      6500
 4795              	.LASF142:
 4796 0368 686F7374 		.ascii	"host\000"
 4796      00
 4797              	.LASF54:
 4798 036d 746D5F79 		.ascii	"tm_year\000"
 4798      65617200 
 4799              	.LASF171:
 4800 0375 616C6172 		.ascii	"alarmSync\000"
 4800      6D53796E 
 4800      6300
 4801              	.LASF44:
 4802 037f 70726573 		.ascii	"pressure_voltage_on\000"
 4802      73757265 
 4802      5F766F6C 
 4802      74616765 
 4802      5F6F6E00 
 4803              	.LASF162:
 4804 0393 4170705F 		.ascii	"App_LED_enabled\000"
 4804      4C45445F 
 4804      656E6162 
 4804      6C656400 
 4805              	.LASF139:
 4806 03a3 73657454 		.ascii	"setTime\000"
 4806      696D6500 
 4807              	.LASF60:
 4808 03ab 6B65795F 		.ascii	"key_value_t\000"
 4808      76616C75 
 4808      655F7400 
 4809              	.LASF99:
 4810 03b7 41796F49 		.ascii	"AyoItsTime\000"
 4810      74735469 
 4810      6D6500
 4811              	.LASF35:
 4812 03c2 6E756D5F 		.ascii	"num_valid_readings\000"
 4812      76616C69 
 4812      645F7265 
 4812      6164696E 
 4812      677300
 4813              	.LASF129:
 4814 03d5 68747470 		.ascii	"http_chunk\000"
 4814      5F636875 
 4814      6E6B00
 4815              	.LASF136:
 4816 03e0 6D5F766F 		.ascii	"m_voltage\000"
 4816      6C746167 
 4816      6500
 4817              	.LASF5:
 4818 03ea 6C6F6E67 		.ascii	"long unsigned int\000"
 4818      20756E73 
 4818      69676E65 
 4818      6420696E 
 4818      7400
 4819              	.LASF96:
 4820 03fc 7472795F 		.ascii	"try_counter\000"
 4820      636F756E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 105


 4820      74657200 
 4821              	.LASF120:
 4822 0408 64617461 		.ascii	"data_count_desired\000"
 4822      5F636F75 
 4822      6E745F64 
 4822      65736972 
 4822      656400
 4823              	.LASF38:
 4824 041b 766F6C74 		.ascii	"voltage_battery\000"
 4824      6167655F 
 4824      62617474 
 4824      65727900 
 4825              	.LASF24:
 4826 042b 4461794F 		.ascii	"DayOfMonth\000"
 4826      664D6F6E 
 4826      746800
 4827              	.LASF133:
 4828 0436 6D616B65 		.ascii	"makeMeasurements\000"
 4828      4D656173 
 4828      7572656D 
 4828      656E7473 
 4828      00
 4829              	.LASF157:
 4830 0447 64617461 		.ascii	"data\000"
 4830      00
 4831              	.LASF93:
 4832 044c 65705F70 		.ascii	"ep_port\000"
 4832      6F727400 
 4833              	.LASF57:
 4834 0454 746D5F69 		.ascii	"tm_isdst\000"
 4834      73647374 
 4834      00
 4835              	.LASF89:
 4836 045d 6D6F6465 		.ascii	"modem_info\000"
 4836      6D5F696E 
 4836      666F00
 4837              	.LASF92:
 4838 0468 65705F68 		.ascii	"ep_host\000"
 4838      6F737400 
 4839              	.LASF14:
 4840 0470 696E7438 		.ascii	"int8\000"
 4840      00
 4841              	.LASF98:
 4842 0475 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4842      576F726B 
 4842      576F726B 
 4842      576F726B 
 4842      576F726B 
 4843              	.LASF121:
 4844 048e 635F6461 		.ascii	"c_data_count_desired\000"
 4844      74615F63 
 4844      6F756E74 
 4844      5F646573 
 4844      69726564 
 4845              	.LASF114:
 4846 04a3 745F7364 		.ascii	"t_sd_card\000"
 4846      5F636172 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 106


 4846      6400
 4847              	.LASF2:
 4848 04ad 73686F72 		.ascii	"short int\000"
 4848      7420696E 
 4848      7400
 4849              	.LASF174:
 4850 04b7 616C6172 		.ascii	"alarmAppLED\000"
 4850      6D417070 
 4850      4C454400 
 4851              	.LASF159:
 4852 04c3 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4852      6D5F7374 
 4852      6172745F 
 4852      74696D65 
 4852      5F737461 
 4853              	.LASF151:
 4854 04da 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 4854      73747265 
 4854      616D5F6C 
 4854      6576656C 
 4854      5F73656E 
 4855              	.LASF91:
 4856 04fa 7379735F 		.ascii	"sys_info_t\000"
 4856      696E666F 
 4856      5F7400
 4857              	.LASF83:
 4858 0505 75706461 		.ascii	"updatable_parameters_t\000"
 4858      7461626C 
 4858      655F7061 
 4858      72616D65 
 4858      74657273 
 4859              	.LASF100:
 4860 051c 616C6172 		.ascii	"alarmType\000"
 4860      6D547970 
 4860      6500
 4861              	.LASF155:
 4862 0526 64617461 		.ascii	"dataPointsInStack\000"
 4862      506F696E 
 4862      7473496E 
 4862      53746163 
 4862      6B00
 4863              	.LASF110:
 4864 0538 745F646F 		.ascii	"t_down_level\000"
 4864      776E5F6C 
 4864      6576656C 
 4864      00
 4865              	.LASF50:
 4866 0545 746D5F6D 		.ascii	"tm_min\000"
 4866      696E00
 4867              	.LASF144:
 4868 054c 726F7574 		.ascii	"route\000"
 4868      6500
 4869              	.LASF101:
 4870 0552 616C6172 		.ascii	"alarmToBeUpdated\000"
 4870      6D546F42 
 4870      65557064 
 4870      61746564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 107


 4870      00
 4871              	.LASF21:
 4872 0563 73697A65 		.ascii	"sizetype\000"
 4872      74797065 
 4872      00
 4873              	.LASF179:
 4874 056c 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 4874      746F446F 
 4874      776E7374 
 4874      7265616D 
 4874      4C657665 
 4875              	.LASF56:
 4876 0588 746D5F79 		.ascii	"tm_yday\000"
 4876      64617900 
 4877              	.LASF94:
 4878 0590 7379735F 		.ascii	"sys_settings_t\000"
 4878      73657474 
 4878      696E6773 
 4878      5F7400
 4879              	.LASF140:
 4880 059f 6C6F6361 		.ascii	"localTime\000"
 4880      6C54696D 
 4880      6500
 4881              	.LASF15:
 4882 05a9 696E7431 		.ascii	"int16\000"
 4882      3600
 4883              	.LASF173:
 4884 05af 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4884      546F5379 
 4884      636E5265 
 4884      6D6F7465 
 4884      50617261 
 4885              	.LASF59:
 4886 05c6 74696D65 		.ascii	"timeStamp\000"
 4886      5374616D 
 4886      7000
 4887              	.LASF28:
 4888 05d0 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4888      54494D45 
 4888      5F444154 
 4888      4500
 4889              	.LASF161:
 4890 05de 75706461 		.ascii	"updatable_parameters\000"
 4890      7461626C 
 4890      655F7061 
 4890      72616D65 
 4890      74657273 
 4891              	.LASF105:
 4892 05f3 43726561 		.ascii	"CreateAlarm\000"
 4892      7465416C 
 4892      61726D00 
 4893              	.LASF128:
 4894 05ff 7061636B 		.ascii	"packet\000"
 4894      657400
 4895              	.LASF117:
 4896 0606 735F7273 		.ascii	"s_rsrp\000"
 4896      727000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 108


 4897              	.LASF41:
 4898 060d 766F6C74 		.ascii	"voltage_pressure\000"
 4898      6167655F 
 4898      70726573 
 4898      73757265 
 4898      00
 4899              	.LASF181:
 4900 061e 74696D65 		.ascii	"timeToValve\000"
 4900      546F5661 
 4900      6C766500 
 4901              	.LASF17:
 4902 062a 666C6F61 		.ascii	"float\000"
 4902      7400
 4903              	.LASF37:
 4904 0630 6C657665 		.ascii	"level_sensor_t\000"
 4904      6C5F7365 
 4904      6E736F72 
 4904      5F7400
 4905              	.LASF118:
 4906 063f 735F7273 		.ascii	"s_rscp\000"
 4906      637000
 4907              	.LASF132:
 4908 0646 636F6E66 		.ascii	"configureRemoteParams\000"
 4908      69677572 
 4908      6552656D 
 4908      6F746550 
 4908      6172616D 
 4909              	.LASF182:
 4910 065c 44617461 		.ascii	"Data_fileName\000"
 4910      5F66696C 
 4910      654E616D 
 4910      6500
 4911              	.LASF97:
 4912 066a 6D6F6465 		.ascii	"modem_status\000"
 4912      6D5F7374 
 4912      61747573 
 4912      00
 4913              	.LASF29:
 4914 0677 74657374 		.ascii	"test_name\000"
 4914      5F6E616D 
 4914      6500
 4915              	.LASF27:
 4916 0681 59656172 		.ascii	"Year\000"
 4916      00
 4917              	.LASF82:
 4918 0686 5F426F6F 		.ascii	"_Bool\000"
 4918      6C00
 4919              	.LASF10:
 4920 068c 696E7433 		.ascii	"int32_t\000"
 4920      325F7400 
 4921              	.LASF1:
 4922 0694 756E7369 		.ascii	"unsigned char\000"
 4922      676E6564 
 4922      20636861 
 4922      7200
 4923              	.LASF168:
 4924 06a2 73797374 		.ascii	"system_settings\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 109


 4924      656D5F73 
 4924      65747469 
 4924      6E677300 
 4925              	.LASF69:
 4926 06b2 72737270 		.ascii	"rsrp\000"
 4926      00
 4927              	.LASF68:
 4928 06b7 72737271 		.ascii	"rsrq\000"
 4928      00
 4929              	.LASF102:
 4930 06bc 52657365 		.ascii	"ResetAlarm\000"
 4930      74416C61 
 4930      726D00
 4931              	.LASF131:
 4932 06c7 735F7365 		.ascii	"s_send_time\000"
 4932      6E645F74 
 4932      696D6500 
 4933              	.LASF76:
 4934 06d3 73796E63 		.ascii	"sync_time\000"
 4934      5F74696D 
 4934      6500
 4935              	.LASF47:
 4936 06dd 70726573 		.ascii	"pressure_depth\000"
 4936      73757265 
 4936      5F646570 
 4936      746800
 4937              	.LASF66:
 4938 06ec 72736370 		.ascii	"rscp\000"
 4938      00
 4939              	.LASF23:
 4940 06f1 4461794F 		.ascii	"DayOfWeek\000"
 4940      66576565 
 4940      6B00
 4941              	.LASF32:
 4942 06fb 74657374 		.ascii	"test_t\000"
 4942      5F7400
 4943              	.LASF167:
 4944 0702 73797374 		.ascii	"system_info\000"
 4944      656D5F69 
 4944      6E666F00 
 4945              	.LASF63:
 4946 070e 696D6569 		.ascii	"imei\000"
 4946      00
 4947              	.LASF31:
 4948 0713 72656173 		.ascii	"reason\000"
 4948      6F6E00
 4949              	.LASF103:
 4950 071a 616C6172 		.ascii	"alarmToBeReset\000"
 4950      6D546F42 
 4950      65526573 
 4950      657400
 4951              	.LASF108:
 4952 0729 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4952      6B697479 
 4952      43686563 
 4952      6B596F75 
 4952      7273656C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 110


 4953              	.LASF126:
 4954 0755 64617461 		.ascii	"data_count_sent\000"
 4954      5F636F75 
 4954      6E745F73 
 4954      656E7400 
 4955              	.LASF72:
 4956 0765 6D6F6465 		.ascii	"modem_stats_t\000"
 4956      6D5F7374 
 4956      6174735F 
 4956      7400
 4957              	.LASF46:
 4958 0773 70726573 		.ascii	"pressure_current\000"
 4958      73757265 
 4958      5F637572 
 4958      72656E74 
 4958      00
 4959              	.LASF42:
 4960 0784 76616C69 		.ascii	"valid\000"
 4960      6400
 4961              	.LASF176:
 4962 078a 616C6172 		.ascii	"alarmLevelSensor\000"
 4962      6D4C6576 
 4962      656C5365 
 4962      6E736F72 
 4962      00
 4963              	.LASF55:
 4964 079b 746D5F77 		.ascii	"tm_wday\000"
 4964      64617900 
 4965              	.LASF79:
 4966 07a3 4C657665 		.ascii	"Level_Sensor_freq\000"
 4966      6C5F5365 
 4966      6E736F72 
 4966      5F667265 
 4966      7100
 4967              	.LASF148:
 4968 07b5 6C657665 		.ascii	"level_sensor_inbox\000"
 4968      6C5F7365 
 4968      6E736F72 
 4968      5F696E62 
 4968      6F7800
 4969              	.LASF20:
 4970 07c8 6C6F6E67 		.ascii	"long double\000"
 4970      20646F75 
 4970      626C6500 
 4971              	.LASF123:
 4972 07d4 6368756E 		.ascii	"chunk\000"
 4972      6B00
 4973              	.LASF134:
 4974 07da 635F7469 		.ascii	"c_timeStamp\000"
 4974      6D655374 
 4974      616D7000 
 4975              	.LASF19:
 4976 07e6 63686172 		.ascii	"char\000"
 4976      00
 4977              	.LASF8:
 4978 07eb 756E7369 		.ascii	"unsigned int\000"
 4978      676E6564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 111


 4978      20696E74 
 4978      00
 4979              	.LASF180:
 4980 07f8 616C6172 		.ascii	"alarmValve\000"
 4980      6D56616C 
 4980      766500
 4981              	.LASF166:
 4982 0803 68747470 		.ascii	"http_route\000"
 4982      5F726F75 
 4982      746500
 4983              	.LASF122:
 4984 080e 706F7274 		.ascii	"portConfig\000"
 4984      436F6E66 
 4984      696700
 4985              	.LASF9:
 4986 0819 5F5F696E 		.ascii	"__int32_t\000"
 4986      7433325F 
 4986      7400
 4987              	.LASF95:
 4988 0823 756E6971 		.ascii	"uniqueId\000"
 4988      75654964 
 4988      00
 4989              	.LASF75:
 4990 082c 6D656173 		.ascii	"measure_time\000"
 4990      7572655F 
 4990      74696D65 
 4990      00
 4991              	.LASF137:
 4992 0839 6D5F6C65 		.ascii	"m_level_sensor\000"
 4992      76656C5F 
 4992      73656E73 
 4992      6F7200
 4993              	.LASF34:
 4994 0848 6C657665 		.ascii	"level_reading\000"
 4994      6C5F7265 
 4994      6164696E 
 4994      6700
 4995              	.LASF187:
 4996 0856 4C617942 		.ascii	"LayBack\000"
 4996      61636B00 
 4997              	.LASF3:
 4998 085e 73686F72 		.ascii	"short unsigned int\000"
 4998      7420756E 
 4998      7369676E 
 4998      65642069 
 4998      6E7400
 4999              	.LASF61:
 5000 0871 73696D5F 		.ascii	"sim_id\000"
 5000      696400
 5001              	.LASF52:
 5002 0878 746D5F6D 		.ascii	"tm_mday\000"
 5002      64617900 
 5003              	.LASF106:
 5004 0880 6E657741 		.ascii	"newAlarm\000"
 5004      6C61726D 
 5004      00
 5005              	.LASF80:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 112


 5006 0889 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 5006      73747265 
 5006      616D5F4C 
 5006      6576656C 
 5006      5F53656E 
 5007              	.LASF49:
 5008 08a6 746D5F73 		.ascii	"tm_sec\000"
 5008      656300
 5009              	.LASF138:
 5010 08ad 6D5F7072 		.ascii	"m_pressure\000"
 5010      65737375 
 5010      726500
 5011              	.LASF152:
 5012 08b8 76616C76 		.ascii	"valve_enabled\000"
 5012      655F656E 
 5012      61626C65 
 5012      6400
 5013              	.LASF81:
 5014 08c6 76616C76 		.ascii	"valve_freq\000"
 5014      655F6672 
 5014      657100
 5015              	.LASF30:
 5016 08d1 73746174 		.ascii	"status\000"
 5016      757300
 5017              	.LASF149:
 5018 08d8 6C657665 		.ascii	"level_sensor_enabled\000"
 5018      6C5F7365 
 5018      6E736F72 
 5018      5F656E61 
 5018      626C6564 
 5019              	.LASF156:
 5020 08ed 64617461 		.ascii	"dataPointsInStackDesired\000"
 5020      506F696E 
 5020      7473496E 
 5020      53746163 
 5020      6B446573 
 5021              	.LASF78:
 5022 0906 4170705F 		.ascii	"App_LED_freq\000"
 5022      4C45445F 
 5022      66726571 
 5022      00
 5023              	.LASF112:
 5024 0913 745F766F 		.ascii	"t_voltages\000"
 5024      6C746167 
 5024      657300
 5025              	.LASF184:
 5026 091e 6E6F746F 		.ascii	"notoriOS.c\000"
 5026      72694F53 
 5026      2E6300
 5027              	.LASF165:
 5028 0929 68747470 		.ascii	"http_body\000"
 5028      5F626F64 
 5028      7900
 5029              	.LASF153:
 5030 0933 76616C76 		.ascii	"valve_inbox\000"
 5030      655F696E 
 5030      626F7800 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 113


 5031              	.LASF86:
 5032 093f 636F756E 		.ascii	"countDownType\000"
 5032      74446F77 
 5032      6E547970 
 5032      6500
 5033              	.LASF85:
 5034 094d 63757272 		.ascii	"currentCountDownValue\000"
 5034      656E7443 
 5034      6F756E74 
 5034      446F776E 
 5034      56616C75 
 5035              	.LASF74:
 5036 0963 73696D5F 		.ascii	"sim_type\000"
 5036      74797065 
 5036      00
 5037              	.LASF25:
 5038 096c 4461794F 		.ascii	"DayOfYear\000"
 5038      66596561 
 5038      7200
 5039              	.LASF48:
 5040 0976 70726573 		.ascii	"pressure_t\000"
 5040      73757265 
 5040      5F7400
 5041              	.LASF104:
 5042 0981 416C6172 		.ascii	"AlarmReady\000"
 5042      6D526561 
 5042      647900
 5043              	.LASF107:
 5044 098c 52656164 		.ascii	"ReadyOrNot\000"
 5044      794F724E 
 5044      6F7400
 5045              	.LASF188:
 5046 0997 6D61696E 		.ascii	"main\000"
 5046      00
 5047              	.LASF90:
 5048 099c 63686970 		.ascii	"chip_uniqueId\000"
 5048      5F756E69 
 5048      71756549 
 5048      6400
 5049              	.LASF111:
 5050 09aa 745F7661 		.ascii	"t_valve\000"
 5050      6C766500 
 5051              	.LASF18:
 5052 09b2 646F7562 		.ascii	"double\000"
 5052      6C6500
 5053              	.LASF163:
 5054 09b9 6170705F 		.ascii	"app_led_inbox\000"
 5054      6C65645F 
 5054      696E626F 
 5054      7800
 5055              	.LASF150:
 5056 09c7 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 5056      73747265 
 5056      616D5F6C 
 5056      6576656C 
 5056      5F73656E 
 5057              	.LASF43:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccsYYvBb.s 			page 114


 5058 09e5 766F6C74 		.ascii	"voltage_t\000"
 5058      6167655F 
 5058      7400
 5059              	.LASF135:
 5060 09ef 635F6E6F 		.ascii	"c_node_type\000"
 5060      64655F74 
 5060      79706500 
 5061              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
