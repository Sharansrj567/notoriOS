ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.Wakeup_ISR,"ax",%progbits
  44              		.align	2
  45              		.global	Wakeup_ISR
  46              		.thumb
  47              		.thumb_func
  48              		.type	Wakeup_ISR, %function
  49              	Wakeup_ISR:
  50              	.LFB64:
  51              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 2


   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  62              		.loc 1 22 0
  63 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  64              		.loc 1 23 0
  65 0008 00BF     		nop
  66 000a 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	Wakeup_ISR, .-Wakeup_ISR
  70              		.global	Data_fileName
  71              		.data
  72              		.align	2
  73              		.type	Data_fileName, %object
  74              		.size	Data_fileName, 30
  75              	Data_fileName:
  76 0000 64617461 		.ascii	"data.txt\000"
  76      2E747874 
  76      00
  77 0009 00000000 		.space	21
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.comm	try_counter,1,1
  79              		.section	.rodata
  80              		.align	2
  81              	.LC0:
  82 0000 25582D25 		.ascii	"%X-%X\000"
  82      5800
  83 0006 0000     		.align	2
  84              	.LC1:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 3


  85 0008 6563322D 		.ascii	"ec2-13-59-131-167.us-east-2.compute.amazonaws.com\000"
  85      31332D35 
  85      392D3133 
  85      312D3136 
  85      372E7573 
  86 003a 0000     		.align	2
  87              	.LC2:
  88 003c 256400   		.ascii	"%d\000"
  89 003f 00       		.align	2
  90              	.LC3:
  91 0040 7265626F 		.ascii	"reboot\000"
  91      6F7400
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 32
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 8AB0     		sub	sp, sp, #40
 111              		.cfi_def_cfa_offset 56
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 48
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 3948     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 4


  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F11403 		add	r3, r7, #20
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 7A69     		ldr	r2, [r7, #20]
 136 0032 BB69     		ldr	r3, [r7, #24]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 2D4A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 2D48     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 2D4B     		ldr	r3, .L3+12
 145 0044 2D4A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-13-59-131-167.us-eas
 147              		.loc 1 68 0
 148 0048 2D4A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 5


 149 004a 2E4B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 2380     		strh	r3, [r4]	@ movhi
  69:notoriOS.c    ****    
  70:notoriOS.c    ****     system_settings.ep_port = 5000;
 160              		.loc 1 70 0
 161 0060 274B     		ldr	r3, .L3+20
 162 0062 41F28832 		movw	r2, #5000
 163 0066 5A66     		str	r2, [r3, #100]
  71:notoriOS.c    ****     // Don't need the following for new nodes
  72:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  73:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  74:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  75:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  76:notoriOS.c    ****         
  77:notoriOS.c    ****     
  78:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  79:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 164              		.loc 1 79 0
 165 0068 274B     		ldr	r3, .L3+28
 166 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 167 006c 99B2     		uxth	r1, r3
 168 006e 274C     		ldr	r4, .L3+32
 169 0070 3846     		mov	r0, r7
 170 0072 0723     		movs	r3, #7
 171 0074 0122     		movs	r2, #1
 172 0076 FFF7FEFF 		bl	CreateAlarm
 173 007a 2246     		mov	r2, r4
 174 007c 3B46     		mov	r3, r7
 175 007e 1968     		ldr	r1, [r3]	@ unaligned
 176 0080 1160     		str	r1, [r2]	@ unaligned
 177 0082 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 178 0084 9380     		strh	r3, [r2, #4]	@ unaligned
  80:notoriOS.c    ****     timeToMeasure = 1u;
 179              		.loc 1 80 0
 180 0086 224B     		ldr	r3, .L3+36
 181 0088 0122     		movs	r2, #1
 182 008a 1A70     		strb	r2, [r3]
  81:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  82:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 183              		.loc 1 82 0
 184 008c 1E4B     		ldr	r3, .L3+28
 185 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 186 0090 99B2     		uxth	r1, r3
 187 0092 204C     		ldr	r4, .L3+40
 188 0094 3846     		mov	r0, r7
 189 0096 0723     		movs	r3, #7
 190 0098 0122     		movs	r2, #1
 191 009a FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 6


 192 009e 2246     		mov	r2, r4
 193 00a0 3B46     		mov	r3, r7
 194 00a2 1968     		ldr	r1, [r3]	@ unaligned
 195 00a4 1160     		str	r1, [r2]	@ unaligned
 196 00a6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 197 00a8 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToSync = 1u;
 198              		.loc 1 83 0
 199 00aa 1B4B     		ldr	r3, .L3+44
 200 00ac 0122     		movs	r2, #1
 201 00ae 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     
  85:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 202              		.loc 1 85 0
 203 00b0 1A4B     		ldr	r3, .L3+48
 204 00b2 0022     		movs	r2, #0
 205 00b4 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     
  87:notoriOS.c    ****     // send hey to server saying the node rebooted
  88:notoriOS.c    ****     hey = 1u;
 206              		.loc 1 88 0
 207 00b6 1A4B     		ldr	r3, .L3+52
 208 00b8 0122     		movs	r2, #1
 209 00ba 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     char c_hey[10];
  90:notoriOS.c    ****     snprintf(c_hey,sizeof(c_hey),"%d",hey);
 210              		.loc 1 90 0
 211 00bc 184B     		ldr	r3, .L3+52
 212 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00c0 07F10800 		add	r0, r7, #8
 214 00c4 174A     		ldr	r2, .L3+56
 215 00c6 0A21     		movs	r1, #10
 216 00c8 FFF7FEFF 		bl	snprintf
  91:notoriOS.c    ****     pushData("reboot",c_hey,getTimeStamp());
 217              		.loc 1 91 0
 218 00cc FFF7FEFF 		bl	getTimeStamp
 219 00d0 0246     		mov	r2, r0
 220 00d2 07F10803 		add	r3, r7, #8
 221 00d6 1946     		mov	r1, r3
 222 00d8 1348     		ldr	r0, .L3+60
 223 00da FFF7FEFF 		bl	pushData
  92:notoriOS.c    ****     
  93:notoriOS.c    ****     // Initialize the try counter to 0
  94:notoriOS.c    ****     uint8 try_counter = 0;
 224              		.loc 1 94 0
 225 00de 0023     		movs	r3, #0
 226 00e0 FB77     		strb	r3, [r7, #31]
  95:notoriOS.c    **** }
 227              		.loc 1 95 0
 228 00e2 00BF     		nop
 229 00e4 2037     		adds	r7, r7, #32
 230              		.cfi_def_cfa_offset 16
 231 00e6 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 00e8 B0BD     		pop	{r4, r5, r7, pc}
 235              	.L4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 7


 236 00ea 00BF     		.align	2
 237              	.L3:
 238 00ec 00000000 		.word	Wakeup_ISR
 239 00f0 00000000 		.word	.LC0
 240 00f4 04000000 		.word	system_info+4
 241 00f8 00000000 		.word	system_info
 242 00fc 00000000 		.word	modem_info
 243 0100 00000000 		.word	system_settings
 244 0104 08000000 		.word	.LC1
 245 0108 00000000 		.word	updatable_parameters
 246 010c 00000000 		.word	alarmMeasure
 247 0110 00000000 		.word	timeToMeasure
 248 0114 00000000 		.word	alarmSync
 249 0118 00000000 		.word	timeToSync
 250 011c 00000000 		.word	timeToSycnRemoteParams
 251 0120 00000000 		.word	hey
 252 0124 3C000000 		.word	.LC2
 253 0128 40000000 		.word	.LC3
 254              		.cfi_endproc
 255              	.LFE65:
 256              		.size	ReadyOrNot, .-ReadyOrNot
 257              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 258              		.align	2
 259              		.global	WorkWorkWorkWorkWorkWork
 260              		.thumb
 261              		.thumb_func
 262              		.type	WorkWorkWorkWorkWorkWork, %function
 263              	WorkWorkWorkWorkWorkWork:
 264              	.LFB66:
  96:notoriOS.c    **** 
  97:notoriOS.c    **** 
  98:notoriOS.c    **** // ==============================================
  99:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 100:notoriOS.c    **** //      - Rhiana, feat Drake (2016)
 101:notoriOS.c    **** //
 102:notoriOS.c    **** // Prorcesses core tasks
 103:notoriOS.c    **** // ==============================================
 104:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 105:notoriOS.c    **** {
 265              		.loc 1 105 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 106:notoriOS.c    ****     
 107:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 108:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 109:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 110:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 111:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 8


 112:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 113:notoriOS.c    ****     if(timeToSycnRemoteParams){
 277              		.loc 1 113 0
 278 0006 144B     		ldr	r3, .L10
 279 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 280 000a 002B     		cmp	r3, #0
 281 000c 06D0     		beq	.L6
 114:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 282              		.loc 1 114 0
 283 000e FFF7FEFF 		bl	configureRemoteParams
 284 0012 0346     		mov	r3, r0
 285 0014 1A46     		mov	r2, r3
 286 0016 104B     		ldr	r3, .L10
 287 0018 1A70     		strb	r2, [r3]
 288 001a 14E0     		b	.L7
 289              	.L6:
 115:notoriOS.c    ****     }
 116:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 117:notoriOS.c    ****     else if(timeToMeasure){
 290              		.loc 1 117 0
 291 001c 0F4B     		ldr	r3, .L10+4
 292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 0020 002B     		cmp	r3, #0
 294 0022 06D0     		beq	.L8
 118:notoriOS.c    ****         //(int i=0; i<=30; i++){
 119:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 295              		.loc 1 119 0
 296 0024 FFF7FEFF 		bl	makeMeasurements
 297 0028 0346     		mov	r3, r0
 298 002a 1A46     		mov	r2, r3
 299 002c 0B4B     		ldr	r3, .L10+4
 300 002e 1A70     		strb	r2, [r3]
 301 0030 09E0     		b	.L7
 302              	.L8:
 120:notoriOS.c    ****         //CyDelay(1000u);
 121:notoriOS.c    ****         //}
 122:notoriOS.c    ****     }else if(timeToSync){
 303              		.loc 1 122 0
 304 0032 0B4B     		ldr	r3, .L10+8
 305 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 0036 002B     		cmp	r3, #0
 307 0038 05D0     		beq	.L7
 123:notoriOS.c    ****             timeToSync = syncData();
 308              		.loc 1 123 0
 309 003a FFF7FEFF 		bl	syncData
 310 003e 0346     		mov	r3, r0
 311 0040 1A46     		mov	r2, r3
 312 0042 074B     		ldr	r3, .L10+8
 313 0044 1A70     		strb	r2, [r3]
 314              	.L7:
 124:notoriOS.c    ****     }
 125:notoriOS.c    ****     // Print the countdown to the next alarm
 126:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 127:notoriOS.c    ****     
 128:notoriOS.c    ****     
 129:notoriOS.c    ****     // Check modem state machine on every loop
 130:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 9


 315              		.loc 1 130 0
 316 0046 FFF7FEFF 		bl	modem_process_tasks
 317 004a 0346     		mov	r3, r0
 318 004c FB71     		strb	r3, [r7, #7]
 131:notoriOS.c    **** 
 132:notoriOS.c    ****     return 0u +  modem_status;  
 319              		.loc 1 132 0
 320 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133:notoriOS.c    **** }
 321              		.loc 1 133 0
 322 0050 1846     		mov	r0, r3
 323 0052 0837     		adds	r7, r7, #8
 324              		.cfi_def_cfa_offset 8
 325 0054 BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 0056 80BD     		pop	{r7, pc}
 329              	.L11:
 330              		.align	2
 331              	.L10:
 332 0058 00000000 		.word	timeToSycnRemoteParams
 333 005c 00000000 		.word	timeToMeasure
 334 0060 00000000 		.word	timeToSync
 335              		.cfi_endproc
 336              	.LFE66:
 337              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 338              		.section	.text.LayBack,"ax",%progbits
 339              		.align	2
 340              		.global	LayBack
 341              		.thumb
 342              		.thumb_func
 343              		.type	LayBack, %function
 344              	LayBack:
 345              	.LFB67:
 134:notoriOS.c    **** 
 135:notoriOS.c    **** 
 136:notoriOS.c    **** 
 137:notoriOS.c    **** 
 138:notoriOS.c    **** 
 139:notoriOS.c    **** 
 140:notoriOS.c    **** // ==============================================
 141:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 142:notoriOS.c    **** //      - Snoop Dogg (1993)
 143:notoriOS.c    **** //
 144:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** void LayBack()
 147:notoriOS.c    **** {
 346              		.loc 1 147 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 10


 355              		.cfi_def_cfa_register 7
 148:notoriOS.c    ****   
 149:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 356              		.loc 1 149 0
 357 0004 FFF7FEFF 		bl	modem_sleep
 150:notoriOS.c    ****     
 151:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 152:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 358              		.loc 1 152 0
 359 0008 FFF7FEFF 		bl	debug_sleep
 153:notoriOS.c    ****     
 154:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 360              		.loc 1 154 0
 361 000c FFF7FEFF 		bl	CyPmSaveClocks
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 157:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 158:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 159:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 160:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 161:notoriOS.c    ****     //CyPmHibernate();
 162:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 163:notoriOS.c    **** 
 164:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 362              		.loc 1 164 0
 363 0010 4FF40061 		mov	r1, #2048
 364 0014 0020     		movs	r0, #0
 365 0016 FFF7FEFF 		bl	CyPmSleep
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 366              		.loc 1 166 0
 367 001a FFF7FEFF 		bl	CyPmRestoreClocks
 167:notoriOS.c    **** 
 168:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 368              		.loc 1 168 0
 369 001e FFF7FEFF 		bl	debug_wakeup
 169:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 370              		.loc 1 169 0
 371 0022 FFF7FEFF 		bl	modem_wakeup
 170:notoriOS.c    **** 
 171:notoriOS.c    **** }
 372              		.loc 1 171 0
 373 0026 00BF     		nop
 374 0028 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE67:
 377              		.size	LayBack, .-LayBack
 378 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 379              		.align	2
 380              		.global	AyoItsTime
 381              		.thumb
 382              		.thumb_func
 383              		.type	AyoItsTime, %function
 384              	AyoItsTime:
 385              	.LFB68:
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 11


 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 176:notoriOS.c    **** //      - NAS (1994)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 179:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 180:notoriOS.c    **** // It will add tasks to the work queue,
 181:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 182:notoriOS.c    **** // ==============================================
 183:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 184:notoriOS.c    **** {
 386              		.loc 1 184 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 FB71     		strb	r3, [r7, #7]
 185:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 186:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 400              		.loc 1 186 0
 401 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 402 000c 1946     		mov	r1, r3
 403 000e 0C48     		ldr	r0, .L17
 404 0010 FFF7FEFF 		bl	AlarmReady
 405 0014 0346     		mov	r3, r0
 406 0016 002B     		cmp	r3, #0
 407 0018 02D0     		beq	.L14
 187:notoriOS.c    ****     {
 188:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 189:notoriOS.c    ****         timeToMeasure = 1u;
 408              		.loc 1 189 0
 409 001a 0A4B     		ldr	r3, .L17+4
 410 001c 0122     		movs	r2, #1
 411 001e 1A70     		strb	r2, [r3]
 412              	.L14:
 190:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 191:notoriOS.c    ****         
 192:notoriOS.c    ****     }
 193:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 413              		.loc 1 193 0
 414 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415 0022 1946     		mov	r1, r3
 416 0024 0848     		ldr	r0, .L17+8
 417 0026 FFF7FEFF 		bl	AlarmReady
 418 002a 0346     		mov	r3, r0
 419 002c 002B     		cmp	r3, #0
 420 002e 02D0     		beq	.L16
 194:notoriOS.c    ****     {
 195:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 12


 196:notoriOS.c    ****         timeToSync = 1u;
 421              		.loc 1 196 0
 422 0030 064B     		ldr	r3, .L17+12
 423 0032 0122     		movs	r2, #1
 424 0034 1A70     		strb	r2, [r3]
 425              	.L16:
 197:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 198:notoriOS.c    ****     }
 199:notoriOS.c    ****     
 200:notoriOS.c    **** }
 426              		.loc 1 200 0
 427 0036 00BF     		nop
 428 0038 0837     		adds	r7, r7, #8
 429              		.cfi_def_cfa_offset 8
 430 003a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 003c 80BD     		pop	{r7, pc}
 434              	.L18:
 435 003e 00BF     		.align	2
 436              	.L17:
 437 0040 00000000 		.word	alarmMeasure
 438 0044 00000000 		.word	timeToMeasure
 439 0048 00000000 		.word	alarmSync
 440 004c 00000000 		.word	timeToSync
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	AyoItsTime, .-AyoItsTime
 444              		.section	.text.AlarmReady,"ax",%progbits
 445              		.align	2
 446              		.global	AlarmReady
 447              		.thumb
 448              		.thumb_func
 449              		.type	AlarmReady, %function
 450              	AlarmReady:
 451              	.LFB69:
 201:notoriOS.c    **** 
 202:notoriOS.c    **** 
 203:notoriOS.c    **** // ==============================================
 204:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 205:notoriOS.c    **** // ==============================================
 206:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 207:notoriOS.c    **** {
 452              		.loc 1 207 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 13


 466 000a FB70     		strb	r3, [r7, #3]
 208:notoriOS.c    ****     // if the countDownType matches the alarmType
 209:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 467              		.loc 1 209 0
 468 000c 7B68     		ldr	r3, [r7, #4]
 469 000e 1B79     		ldrb	r3, [r3, #4]
 470 0010 DBB2     		uxtb	r3, r3
 471 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 472 0014 9A42     		cmp	r2, r3
 473 0016 12D1     		bne	.L20
 210:notoriOS.c    ****        
 211:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 212:notoriOS.c    ****         // Decrement the count down value by 1
 213:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 474              		.loc 1 213 0
 475 0018 7B68     		ldr	r3, [r7, #4]
 476 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 477 001c 1BB2     		sxth	r3, r3
 478 001e 9BB2     		uxth	r3, r3
 479 0020 013B     		subs	r3, r3, #1
 480 0022 9BB2     		uxth	r3, r3
 481 0024 1AB2     		sxth	r2, r3
 482 0026 7B68     		ldr	r3, [r7, #4]
 483 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 214:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 215:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 484              		.loc 1 215 0
 485 002a 7B68     		ldr	r3, [r7, #4]
 486 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 487 002e 1BB2     		sxth	r3, r3
 488 0030 002B     		cmp	r3, #0
 489 0032 04DC     		bgt	.L20
 216:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 490              		.loc 1 216 0
 491 0034 7868     		ldr	r0, [r7, #4]
 492 0036 FFF7FEFF 		bl	ResetAlarm
 217:notoriOS.c    ****             return 1u;
 493              		.loc 1 217 0
 494 003a 0123     		movs	r3, #1
 495 003c 00E0     		b	.L21
 496              	.L20:
 218:notoriOS.c    ****         } 
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     
 221:notoriOS.c    ****     return 0u; // Otherwise return 0
 497              		.loc 1 221 0
 498 003e 0023     		movs	r3, #0
 499              	.L21:
 222:notoriOS.c    **** }
 500              		.loc 1 222 0
 501 0040 1846     		mov	r0, r3
 502 0042 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0044 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 14


 508              		.cfi_endproc
 509              	.LFE69:
 510              		.size	AlarmReady, .-AlarmReady
 511              		.section	.text.ResetAlarm,"ax",%progbits
 512              		.align	2
 513              		.global	ResetAlarm
 514              		.thumb
 515              		.thumb_func
 516              		.type	ResetAlarm, %function
 517              	ResetAlarm:
 518              	.LFB70:
 223:notoriOS.c    **** 
 224:notoriOS.c    **** // ==============================================
 225:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 226:notoriOS.c    **** // ==============================================
 227:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 228:notoriOS.c    **** {
 519              		.loc 1 228 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 229:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 230:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 532              		.loc 1 230 0
 533 0008 7B68     		ldr	r3, [r7, #4]
 534 000a 1B88     		ldrh	r3, [r3]	@ movhi
 535 000c 9BB2     		uxth	r3, r3
 536 000e 1AB2     		sxth	r2, r3
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 231:notoriOS.c    **** }
 539              		.loc 1 231 0
 540 0014 00BF     		nop
 541 0016 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0018 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 001a 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 001c 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	ResetAlarm, .-ResetAlarm
 553 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 554              		.align	2
 555              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 15


 556              		.thumb
 557              		.thumb_func
 558              		.type	CreateAlarm, %function
 559              	CreateAlarm:
 560              	.LFB71:
 232:notoriOS.c    **** 
 233:notoriOS.c    **** // ==============================================
 234:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 237:notoriOS.c    **** {
 561              		.loc 1 237 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 85B0     		sub	sp, sp, #20
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0846     		mov	r0, r1
 575 000a 1146     		mov	r1, r2
 576 000c 1A46     		mov	r2, r3
 577 000e 0346     		mov	r3, r0	@ movhi
 578 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 579 0012 0B46     		mov	r3, r1
 580 0014 7B70     		strb	r3, [r7, #1]
 581 0016 1346     		mov	r3, r2
 582 0018 3B70     		strb	r3, [r7]
 238:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 239:notoriOS.c    ****     alarm newAlarm;
 240:notoriOS.c    ****     
 241:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 242:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 583              		.loc 1 242 0
 584 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 585 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 243:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 586              		.loc 1 243 0
 587 001e 7B78     		ldrb	r3, [r7, #1]
 588 0020 3B73     		strb	r3, [r7, #12]
 244:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 589              		.loc 1 244 0
 590 0022 3B78     		ldrb	r3, [r7]
 591 0024 7B73     		strb	r3, [r7, #13]
 245:notoriOS.c    ****     
 246:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 247:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 248:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 592              		.loc 1 248 0
 593 0026 B7F90230 		ldrsh	r3, [r7, #2]
 594 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 249:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 16


 250:notoriOS.c    ****     return newAlarm;
 595              		.loc 1 250 0
 596 002c 7B68     		ldr	r3, [r7, #4]
 597 002e 1A46     		mov	r2, r3
 598 0030 07F10803 		add	r3, r7, #8
 599 0034 1868     		ldr	r0, [r3]	@ unaligned
 600 0036 1060     		str	r0, [r2]	@ unaligned
 601 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 602 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 251:notoriOS.c    ****     
 252:notoriOS.c    **** }
 603              		.loc 1 252 0
 604 003c 7868     		ldr	r0, [r7, #4]
 605 003e 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 0040 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0042 80BC     		pop	{r7}
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0044 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE71:
 616              		.size	CreateAlarm, .-CreateAlarm
 617 0046 00BF     		.section	.rodata
 618 0047 00       		.align	2
 619              	.LC4:
 620 0048 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 620      2D2D2D2D 
 620      2D2D2D2D 
 620      2D424547 
 620      494E2054 
 621 0072 0000     		.align	2
 622              	.LC5:
 623 0074 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 623      3D25732C 
 623      2053494D 
 623      49443D25 
 623      732C2044 
 624 0093 00       		.align	2
 625              	.LC6:
 626 0094 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 626      2D2D2D2D 
 626      2D2D2D2D 
 626      2D2D2D45 
 626      4E442054 
 627 00bd 00       		.ascii	"\000"
 628              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 629              		.align	2
 630              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 631              		.thumb
 632              		.thumb_func
 633              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 634              	ChickityCheckYourselfBeforeYouWreckYourself:
 635              	.LFB72:
 253:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 17


 254:notoriOS.c    **** // ==============================================
 255:notoriOS.c    **** // Dropping bombs on your moms
 256:notoriOS.c    **** //      - Ice Cube (1992)
 257:notoriOS.c    **** //
 258:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 259:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 260:notoriOS.c    **** // ==============================================
 261:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 636              		.loc 1 261 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 2328
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 90B5     		push	{r4, r7, lr}
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 ADF6942D 		subw	sp, sp, #2708
 646              		.cfi_def_cfa_offset 2720
 647 0006 5EAF     		add	r7, sp, #376
 648              		.cfi_def_cfa 7, 2344
 262:notoriOS.c    **** 
 263:notoriOS.c    ****     //test_t t_influx = influx_test();
 264:notoriOS.c    ****     //printTestStatus(t_influx);
 265:notoriOS.c    ****     
 266:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 649              		.loc 1 266 0
 650 0008 4249     		ldr	r1, .L26
 651 000a 0320     		movs	r0, #3
 652 000c FFF7FEFF 		bl	printNotif
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Test level sensor
 269:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 653              		.loc 1 269 0
 654 0010 07F29473 		addw	r3, r7, #1940
 655 0014 1846     		mov	r0, r3
 656 0016 FFF7FEFF 		bl	level_sensor_test
 270:notoriOS.c    ****     printTestStatus(t_level_sensor);
 657              		.loc 1 270 0
 658 001a 07F29474 		addw	r4, r7, #1940
 659 001e 6846     		mov	r0, sp
 660 0020 04F11003 		add	r3, r4, #16
 661 0024 40F27112 		movw	r2, #369
 662 0028 1946     		mov	r1, r3
 663 002a FFF7FEFF 		bl	memcpy
 664 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 665 0032 FFF7FEFF 		bl	printTestStatus
 271:notoriOS.c    ****     
 272:notoriOS.c    ****     // Test Valve
 273:notoriOS.c    ****     test_t t_valve = valve_test();
 666              		.loc 1 273 0
 667 0036 07F5C263 		add	r3, r7, #1552
 668 003a 1846     		mov	r0, r3
 669 003c FFF7FEFF 		bl	valve_test
 274:notoriOS.c    ****     printTestStatus(t_valve);
 670              		.loc 1 274 0
 671 0040 07F5C264 		add	r4, r7, #1552
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 18


 672 0044 6846     		mov	r0, sp
 673 0046 04F11003 		add	r3, r4, #16
 674 004a 40F27112 		movw	r2, #369
 675 004e 1946     		mov	r1, r3
 676 0050 FFF7FEFF 		bl	memcpy
 677 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 678 0058 FFF7FEFF 		bl	printTestStatus
 275:notoriOS.c    ****     
 276:notoriOS.c    ****     // Test voltages
 277:notoriOS.c    ****     test_t t_voltages = voltages_test();
 679              		.loc 1 277 0
 680 005c 07F28C43 		addw	r3, r7, #1164
 681 0060 1846     		mov	r0, r3
 682 0062 FFF7FEFF 		bl	voltages_test
 278:notoriOS.c    ****     printTestStatus(t_voltages);
 683              		.loc 1 278 0
 684 0066 07F28C44 		addw	r4, r7, #1164
 685 006a 6846     		mov	r0, sp
 686 006c 04F11003 		add	r3, r4, #16
 687 0070 40F27112 		movw	r2, #369
 688 0074 1946     		mov	r1, r3
 689 0076 FFF7FEFF 		bl	memcpy
 690 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 691 007e FFF7FEFF 		bl	printTestStatus
 279:notoriOS.c    ****  
 280:notoriOS.c    ****     // Test voltages
 281:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 692              		.loc 1 281 0
 693 0082 07F54273 		add	r3, r7, #776
 694 0086 1846     		mov	r0, r3
 695 0088 FFF7FEFF 		bl	pressure_sensor_test
 282:notoriOS.c    ****     printTestStatus(t_pressure);
 696              		.loc 1 282 0
 697 008c 07F54274 		add	r4, r7, #776
 698 0090 6846     		mov	r0, sp
 699 0092 04F11003 		add	r3, r4, #16
 700 0096 40F27112 		movw	r2, #369
 701 009a 1946     		mov	r1, r3
 702 009c FFF7FEFF 		bl	memcpy
 703 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 704 00a4 FFF7FEFF 		bl	printTestStatus
 283:notoriOS.c    ****     
 284:notoriOS.c    ****     // Test SD card
 285:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 705              		.loc 1 285 0
 706 00a8 07F5C273 		add	r3, r7, #388
 707 00ac 1846     		mov	r0, r3
 708 00ae FFF7FEFF 		bl	SD_card_test
 286:notoriOS.c    ****     printTestStatus(t_sd_card);
 709              		.loc 1 286 0
 710 00b2 07F5C274 		add	r4, r7, #388
 711 00b6 6846     		mov	r0, sp
 712 00b8 04F11003 		add	r3, r4, #16
 713 00bc 40F27112 		movw	r2, #369
 714 00c0 1946     		mov	r1, r3
 715 00c2 FFF7FEFF 		bl	memcpy
 716 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 19


 717 00ca FFF7FEFF 		bl	printTestStatus
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // Test modem
 289:notoriOS.c    ****     test_t t_modem = modem_test();
 718              		.loc 1 289 0
 719 00ce 3B46     		mov	r3, r7
 720 00d0 1846     		mov	r0, r3
 721 00d2 FFF7FEFF 		bl	modem_test
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 722              		.loc 1 290 0
 723 00d6 104B     		ldr	r3, .L26+4
 724 00d8 0093     		str	r3, [sp]
 725 00da 104B     		ldr	r3, .L26+8
 726 00dc 104A     		ldr	r2, .L26+12
 727 00de 1149     		ldr	r1, .L26+16
 728 00e0 0320     		movs	r0, #3
 729 00e2 FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     printTestStatus(t_modem);
 730              		.loc 1 291 0
 731 00e6 3C46     		mov	r4, r7
 732 00e8 6846     		mov	r0, sp
 733 00ea 04F11003 		add	r3, r4, #16
 734 00ee 40F27112 		movw	r2, #369
 735 00f2 1946     		mov	r1, r3
 736 00f4 FFF7FEFF 		bl	memcpy
 737 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 738 00fc FFF7FEFF 		bl	printTestStatus
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 739              		.loc 1 293 0
 740 0100 0949     		ldr	r1, .L26+20
 741 0102 0320     		movs	r0, #3
 742 0104 FFF7FEFF 		bl	printNotif
 294:notoriOS.c    **** 
 295:notoriOS.c    **** }
 743              		.loc 1 295 0
 744 0108 00BF     		nop
 745 010a 07F61C17 		addw	r7, r7, #2332
 746              		.cfi_def_cfa_offset 12
 747 010e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0110 90BD     		pop	{r4, r7, pc}
 751              	.L27:
 752 0112 00BF     		.align	2
 753              	.L26:
 754 0114 48000000 		.word	.LC4
 755 0118 04000000 		.word	system_info+4
 756 011c 00000000 		.word	modem_info
 757 0120 28000000 		.word	modem_info+40
 758 0124 74000000 		.word	.LC5
 759 0128 94000000 		.word	.LC6
 760              		.cfi_endproc
 761              	.LFE72:
 762              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 763              		.section	.text.main,"ax",%progbits
 764              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 20


 765              		.global	main
 766              		.thumb
 767              		.thumb_func
 768              		.type	main, %function
 769              	main:
 770              	.LFB73:
 296:notoriOS.c    **** 
 297:notoriOS.c    **** // ==============================================
 298:notoriOS.c    **** // Processes Core Tasks
 299:notoriOS.c    **** // ==============================================
 300:notoriOS.c    **** int main(void)
 301:notoriOS.c    **** {
 771              		.loc 1 301 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 302:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 781              		.loc 1 302 0
 782              		.syntax unified
 783              	@ 302 "notoriOS.c" 1
 784 0004 62B6     		CPSIE   i
 785              	@ 0 "" 2
 303:notoriOS.c    **** 
 304:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 786              		.loc 1 304 0
 787              		.thumb
 788              		.syntax unified
 789 0006 FFF7FEFF 		bl	ReadyOrNot
 305:notoriOS.c    ****     
 306:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 790              		.loc 1 306 0
 791 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 792              	.L30:
 307:notoriOS.c    ****    
 308:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 309:notoriOS.c    ****     {
 310:notoriOS.c    ****         
 311:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 793              		.loc 1 311 0
 794 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 795 0012 0346     		mov	r3, r0
 796 0014 002B     		cmp	r3, #0
 797 0016 FAD1     		bne	.L30
 312:notoriOS.c    ****         {
 313:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 798              		.loc 1 313 0
 799 0018 FFF7FEFF 		bl	LayBack
 314:notoriOS.c    ****         }
 315:notoriOS.c    ****     }
 800              		.loc 1 315 0
 801 001c F7E7     		b	.L30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 21


 802              		.cfi_endproc
 803              	.LFE73:
 804              		.size	main, .-main
 805 001e 00BF     		.section	.rodata
 806 00be 0000     		.align	2
 807              	.LC7:
 808 00c0 4D6F6465 		.ascii	"Modem is ready.\000"
 808      6D206973 
 808      20726561 
 808      64792E00 
 809              		.align	2
 810              	.LC8:
 811 00d0 72737270 		.ascii	"rsrp\000"
 811      00
 812 00d5 000000   		.align	2
 813              	.LC9:
 814 00d8 7472795F 		.ascii	"try_counter\000"
 814      636F756E 
 814      74657200 
 815              		.align	2
 816              	.LC10:
 817 00e4 64617461 		.ascii	"data_count_sent\000"
 817      5F636F75 
 817      6E745F73 
 817      656E7400 
 818              		.align	2
 819              	.LC11:
 820 00f4 64617461 		.ascii	"data_count_desired\000"
 820      5F636F75 
 820      6E745F64 
 820      65736972 
 820      656400
 821 0107 00       		.align	2
 822              	.LC12:
 823 0108 42656769 		.ascii	"Begin HTTP post.\000"
 823      6E204854 
 823      54502070 
 823      6F73742E 
 823      00
 824 0119 000000   		.align	2
 825              	.LC13:
 826 011c 33623361 		.ascii	"3b3a6be6a830ea0a6d4964385f3e14e8cbd1d8f1\000"
 826      36626536 
 826      61383330 
 826      65613061 
 826      36643439 
 827 0145 000000   		.align	2
 828              	.LC14:
 829 0148 6170692F 		.ascii	"api/v1/write\000"
 829      76312F77 
 829      72697465 
 829      00
 830 0155 000000   		.align	2
 831              	.LC15:
 832 0158 48545450 		.ascii	"HTTP route: %s\000"
 832      20726F75 
 832      74653A20 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 22


 832      257300
 833 0167 00       		.align	2
 834              	.LC16:
 835 0168 312E3100 		.ascii	"1.1\000"
 836              		.align	2
 837              	.LC17:
 838 016c 00       		.ascii	"\000"
 839 016d 000000   		.align	2
 840              	.LC18:
 841 0170 436C6F73 		.ascii	"Close\000"
 841      6500
 842 0176 0000     		.align	2
 843              	.LC19:
 844 0178 504F5354 		.ascii	"POST\000"
 844      00
 845 017d 000000   		.align	2
 846              	.LC20:
 847 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 847      20485454 
 847      50205265 
 847      71756573 
 847      743A2025 
 848 0196 0000     		.align	2
 849              	.LC21:
 850 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 850      443D312C 
 850      302C2564 
 850      2C222573 
 850      222C302C 
 851 01b1 000000   		.align	2
 852              	.LC22:
 853 01b4 257300   		.ascii	"%s\000"
 854 01b7 00       		.align	2
 855              	.LC23:
 856 01b8 4F4B00   		.ascii	"OK\000"
 857              		.global	__aeabi_ui2d
 858              		.global	__aeabi_d2iz
 859 01bb 00       		.align	2
 860              	.LC24:
 861 01bc 68747470 		.ascii	"http_request len: %d\000"
 861      5F726571 
 861      75657374 
 861      206C656E 
 861      3A202564 
 862 01d1 000000   		.align	2
 863              	.LC25:
 864 01d4 23206F66 		.ascii	"# of packets: %d\000"
 864      20706163 
 864      6B657473 
 864      3A202564 
 864      00
 865 01e5 000000   		.align	2
 866              	.LC26:
 867 01e8 3E00     		.ascii	">\000"
 868 01ea 0000     		.align	2
 869              	.LC27:
 870 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 23


 870      53454E44 
 870      3D310D0A 
 870      00
 871 01f9 000000   		.align	2
 872              	.LC28:
 873 01fc 1A00     		.ascii	"\032\000"
 874 01fe 0000     		.align	2
 875              	.LC29:
 876 0200 6368756E 		.ascii	"chunk %d: %s\000"
 876      6B202564 
 876      3A202573 
 876      00
 877 020d 000000   		.align	2
 878              	.LC30:
 879 0210 5352494E 		.ascii	"SRING\000"
 879      4700
 880 0216 0000     		.align	2
 881              	.LC31:
 882 0218 4F532D4F 		.ascii	"OS-OK\000"
 882      4B00
 883 021e 0000     		.align	2
 884              	.LC32:
 885 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 885      52454356 
 885      3D312C31 
 885      3030300D 
 885      00
 886 0231 000000   		.align	2
 887              	.LC33:
 888 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 888      6D5F7478 
 888      5F74696D 
 888      6500
 889 0242 0000     		.align	2
 890              	.LC34:
 891 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 891      4F3A2043 
 891      6F756C64 
 891      206E6F74 
 891      20726563 
 892              		.section	.text.syncData,"ax",%progbits
 893              		.align	2
 894              		.global	syncData
 895              		.thumb
 896              		.thumb_func
 897              		.type	syncData, %function
 898              	syncData:
 899              	.LFB74:
 316:notoriOS.c    **** }
 317:notoriOS.c    **** 
 318:notoriOS.c    **** // ==============================================
 319:notoriOS.c    **** // Syncs data with server
 320:notoriOS.c    **** // Returns 0 when done
 321:notoriOS.c    **** // ==============================================
 322:notoriOS.c    **** uint8 syncData(){
 900              		.loc 1 322 0
 901              		.cfi_startproc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 24


 902              		@ args = 0, pretend = 0, frame = 1336
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 90B5     		push	{r4, r7, lr}
 905              		.cfi_def_cfa_offset 12
 906              		.cfi_offset 4, -12
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 ADF2545D 		subw	sp, sp, #1364
 910              		.cfi_def_cfa_offset 1376
 911 0006 06AF     		add	r7, sp, #24
 912              		.cfi_def_cfa 7, 1352
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     /*
 325:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 326:notoriOS.c    ****     uint8 check = 0;
 327:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 328:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 329:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 330:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 331:notoriOS.c    ****     */
 332:notoriOS.c    **** 
 333:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 334:notoriOS.c    ****     LED_Write(1u);
 913              		.loc 1 334 0
 914 0008 0120     		movs	r0, #1
 915 000a FFF7FEFF 		bl	LED_Write
 335:notoriOS.c    ****     CyDelay(100u);
 916              		.loc 1 335 0
 917 000e 6420     		movs	r0, #100
 918 0010 FFF7FEFF 		bl	CyDelay
 336:notoriOS.c    ****     LED_Write(0u);
 919              		.loc 1 336 0
 920 0014 0020     		movs	r0, #0
 921 0016 FFF7FEFF 		bl	LED_Write
 337:notoriOS.c    **** 
 338:notoriOS.c    ****     
 339:notoriOS.c    ****     // If there's no data, not need to do anything
 340:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 922              		.loc 1 340 0
 923 001a FFF7FEFF 		bl	sizeOfDataStack
 924 001e 0346     		mov	r3, r0
 925 0020 002B     		cmp	r3, #0
 926 0022 01D1     		bne	.L32
 341:notoriOS.c    ****         return 0u;
 927              		.loc 1 341 0
 928 0024 0023     		movs	r3, #0
 929 0026 F7E1     		b	.L33
 930              	.L32:
 342:notoriOS.c    ****         }
 343:notoriOS.c    ****     
 344:notoriOS.c    ****     // Create request body, in this case influx
 345:notoriOS.c    ****     // Place body into HTTP request header
 346:notoriOS.c    ****     // Fire up modem and get it out
 347:notoriOS.c    ****      
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 350:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 25


 931              		.loc 1 350 0
 932 0028 FFF7FEFF 		bl	modem_get_state
 933 002c 0346     		mov	r3, r0
 934 002e 002B     		cmp	r3, #0
 935 0030 11D1     		bne	.L34
 351:notoriOS.c    **** 
 352:notoriOS.c    ****         try_counter++;
 936              		.loc 1 352 0
 937 0032 C64B     		ldr	r3, .L46
 938 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 939 0036 0133     		adds	r3, r3, #1
 940 0038 DAB2     		uxtb	r2, r3
 941 003a C44B     		ldr	r3, .L46
 942 003c 1A70     		strb	r2, [r3]
 353:notoriOS.c    ****         	
 354:notoriOS.c    ****         if(try_counter <= 2){
 943              		.loc 1 354 0
 944 003e C34B     		ldr	r3, .L46
 945 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 946 0042 022B     		cmp	r3, #2
 947 0044 02D8     		bhi	.L35
 355:notoriOS.c    ****             modem_power_up();
 948              		.loc 1 355 0
 949 0046 FFF7FEFF 		bl	modem_power_up
 950 004a E4E1     		b	.L36
 951              	.L35:
 356:notoriOS.c    ****         }else{
 357:notoriOS.c    ****             try_counter = 0;
 952              		.loc 1 357 0
 953 004c BF4B     		ldr	r3, .L46
 954 004e 0022     		movs	r2, #0
 955 0050 1A70     		strb	r2, [r3]
 358:notoriOS.c    ****             return 0u;
 956              		.loc 1 358 0
 957 0052 0023     		movs	r3, #0
 958 0054 E0E1     		b	.L33
 959              	.L34:
 359:notoriOS.c    ****             }
 360:notoriOS.c    ****             
 361:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 960              		.loc 1 361 0
 961 0056 FFF7FEFF 		bl	modem_get_state
 962 005a 0346     		mov	r3, r0
 963 005c 042B     		cmp	r3, #4
 964 005e 40F0DA81 		bne	.L36
 965              	.LBB2:
 362:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 966              		.loc 1 362 0
 967 0062 BB49     		ldr	r1, .L46+4
 968 0064 0020     		movs	r0, #0
 969 0066 FFF7FEFF 		bl	printNotif
 363:notoriOS.c    ****         
 364:notoriOS.c    ****         http_request[0] = '\0';
 970              		.loc 1 364 0
 971 006a BA4B     		ldr	r3, .L46+8
 972 006c 0022     		movs	r2, #0
 973 006e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 26


 365:notoriOS.c    ****         http_body[0] = '\0';
 974              		.loc 1 365 0
 975 0070 B94B     		ldr	r3, .L46+12
 976 0072 0022     		movs	r2, #0
 977 0074 1A70     		strb	r2, [r3]
 366:notoriOS.c    ****         http_route[0] = '\0';
 978              		.loc 1 366 0
 979 0076 B94B     		ldr	r3, .L46+16
 980 0078 0022     		movs	r2, #0
 981 007a 1A70     		strb	r2, [r3]
 367:notoriOS.c    ****         //char *base = "write";
 368:notoriOS.c    ****         
 369:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power)
 370:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 371:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 982              		.loc 1 371 0
 983 007c B84B     		ldr	r3, .L46+20
 984 007e 5B69     		ldr	r3, [r3, #20]
 985 0080 07F5A260 		add	r0, r7, #1296
 986 0084 B74A     		ldr	r2, .L46+24
 987 0086 1421     		movs	r1, #20
 988 0088 FFF7FEFF 		bl	snprintf
 372:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 989              		.loc 1 372 0
 990 008c FFF7FEFF 		bl	getTimeStamp
 991 0090 0246     		mov	r2, r0
 992 0092 07F5A263 		add	r3, r7, #1296
 993 0096 1946     		mov	r1, r3
 994 0098 B348     		ldr	r0, .L46+28
 995 009a FFF7FEFF 		bl	pushData
 373:notoriOS.c    ****         
 374:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 375:notoriOS.c    ****         char c_try_counter[20];
 376:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 996              		.loc 1 376 0
 997 009e AB4B     		ldr	r3, .L46
 998 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 00a2 07F2FC40 		addw	r0, r7, #1276
 1000 00a6 AF4A     		ldr	r2, .L46+24
 1001 00a8 1421     		movs	r1, #20
 1002 00aa FFF7FEFF 		bl	snprintf
 377:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1003              		.loc 1 377 0
 1004 00ae FFF7FEFF 		bl	getTimeStamp
 1005 00b2 0246     		mov	r2, r0
 1006 00b4 07F2FC43 		addw	r3, r7, #1276
 1007 00b8 1946     		mov	r1, r3
 1008 00ba AC48     		ldr	r0, .L46+32
 1009 00bc FFF7FEFF 		bl	pushData
 378:notoriOS.c    ****         
 379:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 380:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 381:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 382:notoriOS.c    ****         if(buffer_overflow == false){
 1010              		.loc 1 382 0
 1011 00c0 AB4B     		ldr	r3, .L46+36
 1012 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 27


 1013 00c4 83F00103 		eor	r3, r3, #1
 1014 00c8 DBB2     		uxtb	r3, r3
 1015 00ca 002B     		cmp	r3, #0
 1016 00cc 16D0     		beq	.L37
 1017              	.LBB3:
 383:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1018              		.loc 1 383 0
 1019 00ce FFF7FEFF 		bl	sizeOfDataStack
 1020 00d2 0346     		mov	r3, r0
 1021 00d4 A7F83035 		strh	r3, [r7, #1328]	@ movhi
 384:notoriOS.c    ****             char c_data_count_sent[20];
 385:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1022              		.loc 1 385 0
 1023 00d8 B7F83035 		ldrh	r3, [r7, #1328]
 1024 00dc 07F2D440 		addw	r0, r7, #1236
 1025 00e0 A04A     		ldr	r2, .L46+24
 1026 00e2 1421     		movs	r1, #20
 1027 00e4 FFF7FEFF 		bl	snprintf
 386:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1028              		.loc 1 386 0
 1029 00e8 FFF7FEFF 		bl	getTimeStamp
 1030 00ec 0246     		mov	r2, r0
 1031 00ee 07F2D443 		addw	r3, r7, #1236
 1032 00f2 1946     		mov	r1, r3
 1033 00f4 9F48     		ldr	r0, .L46+40
 1034 00f6 FFF7FEFF 		bl	pushData
 1035              	.LBE3:
 1036 00fa 0FE0     		b	.L38
 1037              	.L37:
 1038              	.LBB4:
 387:notoriOS.c    ****         }else{
 388:notoriOS.c    ****             char c_data_count_sent[20];
 389:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1039              		.loc 1 389 0
 1040 00fc 07F59860 		add	r0, r7, #1216
 1041 0100 9623     		movs	r3, #150
 1042 0102 984A     		ldr	r2, .L46+24
 1043 0104 1421     		movs	r1, #20
 1044 0106 FFF7FEFF 		bl	snprintf
 390:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1045              		.loc 1 390 0
 1046 010a FFF7FEFF 		bl	getTimeStamp
 1047 010e 0246     		mov	r2, r0
 1048 0110 07F59863 		add	r3, r7, #1216
 1049 0114 1946     		mov	r1, r3
 1050 0116 9748     		ldr	r0, .L46+40
 1051 0118 FFF7FEFF 		bl	pushData
 1052              	.L38:
 1053              	.LBE4:
 391:notoriOS.c    ****         }
 392:notoriOS.c    ****         
 393:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 394:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1054              		.loc 1 394 0
 1055 011c FFF7FEFF 		bl	sizeOfDataStackDesired
 1056 0120 0346     		mov	r3, r0
 1057 0122 A7F82E35 		strh	r3, [r7, #1326]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 28


 395:notoriOS.c    ****         char c_data_count_desired[20];
 396:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 397:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1058              		.loc 1 397 0
 1059 0126 B7F82E35 		ldrh	r3, [r7, #1326]
 1060 012a 013B     		subs	r3, r3, #1
 1061 012c 07F59D60 		add	r0, r7, #1256
 1062 0130 8C4A     		ldr	r2, .L46+24
 1063 0132 1421     		movs	r1, #20
 1064 0134 FFF7FEFF 		bl	snprintf
 398:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1065              		.loc 1 398 0
 1066 0138 FFF7FEFF 		bl	getTimeStamp
 1067 013c 0246     		mov	r2, r0
 1068 013e 07F59D63 		add	r3, r7, #1256
 1069 0142 1946     		mov	r1, r3
 1070 0144 8C48     		ldr	r0, .L46+44
 1071 0146 FFF7FEFF 		bl	pushData
 399:notoriOS.c    ****         
 400:notoriOS.c    ****         // Construct HTPP request
 401:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1072              		.loc 1 401 0
 1073 014a 8C49     		ldr	r1, .L46+48
 1074 014c 0020     		movs	r0, #0
 1075 014e FFF7FEFF 		bl	printNotif
 402:notoriOS.c    ****         
 403:notoriOS.c    ****         // Old influx API
 404:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 405:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1076              		.loc 1 405 0
 1077 0152 8B4B     		ldr	r3, .L46+52
 1078 0154 8B4A     		ldr	r2, .L46+56
 1079 0156 8C49     		ldr	r1, .L46+60
 1080 0158 8048     		ldr	r0, .L46+16
 1081 015a FFF7FEFF 		bl	construct_malcom_route
 406:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1082              		.loc 1 406 0
 1083 015e 7F4A     		ldr	r2, .L46+16
 1084 0160 8A49     		ldr	r1, .L46+64
 1085 0162 0020     		movs	r0, #0
 1086 0164 FFF7FEFF 		bl	printNotif
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         //OLD INFLUX API
 409:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 410:notoriOS.c    ****         construct_malcom_body(http_body);
 1087              		.loc 1 410 0
 1088 0168 7B48     		ldr	r0, .L46+12
 1089 016a FFF7FEFF 		bl	construct_malcom_body
 411:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1090              		.loc 1 411 0
 1091 016e 884B     		ldr	r3, .L46+68
 1092 0170 5B6E     		ldr	r3, [r3, #100]
 1093 0172 884A     		ldr	r2, .L46+72
 1094 0174 0592     		str	r2, [sp, #20]
 1095 0176 0022     		movs	r2, #0
 1096 0178 0492     		str	r2, [sp, #16]
 1097 017a 874A     		ldr	r2, .L46+76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 29


 1098 017c 0392     		str	r2, [sp, #12]
 1099 017e 874A     		ldr	r2, .L46+80
 1100 0180 0292     		str	r2, [sp, #8]
 1101 0182 874A     		ldr	r2, .L46+84
 1102 0184 0192     		str	r2, [sp, #4]
 1103 0186 0093     		str	r3, [sp]
 1104 0188 744B     		ldr	r3, .L46+16
 1105 018a 814A     		ldr	r2, .L46+68
 1106 018c 7249     		ldr	r1, .L46+12
 1107 018e 7148     		ldr	r0, .L46+8
 1108 0190 FFF7FEFF 		bl	construct_generic_HTTP_request
 412:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1109              		.loc 1 412 0
 1110 0194 6F4A     		ldr	r2, .L46+8
 1111 0196 8349     		ldr	r1, .L46+88
 1112 0198 0020     		movs	r0, #0
 1113 019a FFF7FEFF 		bl	printNotif
 413:notoriOS.c    ****         
 414:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 415:notoriOS.c    ****         // Open port and begin command line sequence
 416:notoriOS.c    ****         char portConfig[200];
 417:notoriOS.c    ****         uint8 status = 0u;
 1114              		.loc 1 417 0
 1115 019e 0023     		movs	r3, #0
 1116 01a0 87F82D35 		strb	r3, [r7, #1325]
 418:notoriOS.c    ****         
 419:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1117              		.loc 1 419 0
 1118 01a4 7A4B     		ldr	r3, .L46+68
 1119 01a6 5A6E     		ldr	r2, [r3, #100]
 1120 01a8 3846     		mov	r0, r7
 1121 01aa 794B     		ldr	r3, .L46+68
 1122 01ac 0093     		str	r3, [sp]
 1123 01ae 1346     		mov	r3, r2
 1124 01b0 7D4A     		ldr	r2, .L46+92
 1125 01b2 C821     		movs	r1, #200
 1126 01b4 FFF7FEFF 		bl	snprintf
 420:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1127              		.loc 1 420 0
 1128 01b8 3B46     		mov	r3, r7
 1129 01ba 1A46     		mov	r2, r3
 1130 01bc 7B49     		ldr	r1, .L46+96
 1131 01be 0020     		movs	r0, #0
 1132 01c0 FFF7FEFF 		bl	printNotif
 421:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1133              		.loc 1 421 0
 1134 01c4 3B46     		mov	r3, r7
 1135 01c6 42F21072 		movw	r2, #10000
 1136 01ca 7949     		ldr	r1, .L46+100
 1137 01cc 1846     		mov	r0, r3
 1138 01ce FFF7FEFF 		bl	at_write_command
 1139 01d2 0346     		mov	r3, r0
 1140 01d4 87F82D35 		strb	r3, [r7, #1325]
 422:notoriOS.c    ****         
 423:notoriOS.c    ****         // create character pointer to chunk through the http_request
 424:notoriOS.c    ****         char *chunk;
 425:notoriOS.c    ****         // Set chunk to start where http_request starts
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 30


 426:notoriOS.c    ****         chunk = http_request;
 1141              		.loc 1 426 0
 1142 01d8 5E4B     		ldr	r3, .L46+8
 1143 01da C7F83435 		str	r3, [r7, #1332]
 427:notoriOS.c    ****         // variable for the number of packets to send
 428:notoriOS.c    ****         int8 packets;
 429:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1144              		.loc 1 429 0
 1145 01de 5D48     		ldr	r0, .L46+8
 1146 01e0 FFF7FEFF 		bl	strlen
 1147 01e4 0246     		mov	r2, r0
 1148 01e6 734B     		ldr	r3, .L46+104
 1149 01e8 A3FB0223 		umull	r2, r3, r3, r2
 1150 01ec 5B09     		lsrs	r3, r3, #5
 1151 01ee 1846     		mov	r0, r3
 1152 01f0 FFF7FEFF 		bl	__aeabi_ui2d
 1153 01f4 4FF00002 		mov	r2, #0
 1154 01f8 6F4B     		ldr	r3, .L46+108
 1155 01fa FFF7FEFF 		bl	nextafter
 1156 01fe 0346     		mov	r3, r0
 1157 0200 0C46     		mov	r4, r1
 1158 0202 1846     		mov	r0, r3
 1159 0204 2146     		mov	r1, r4
 1160 0206 FFF7FEFF 		bl	ceil
 1161 020a 0346     		mov	r3, r0
 1162 020c 0C46     		mov	r4, r1
 1163 020e 1846     		mov	r0, r3
 1164 0210 2146     		mov	r1, r4
 1165 0212 FFF7FEFF 		bl	__aeabi_d2iz
 1166 0216 0346     		mov	r3, r0
 1167 0218 87F82C35 		strb	r3, [r7, #1324]
 430:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1168              		.loc 1 430 0
 1169 021c 4D48     		ldr	r0, .L46+8
 1170 021e FFF7FEFF 		bl	strlen
 1171 0222 0346     		mov	r3, r0
 1172 0224 1A46     		mov	r2, r3
 1173 0226 6549     		ldr	r1, .L46+112
 1174 0228 0020     		movs	r0, #0
 1175 022a FFF7FEFF 		bl	printNotif
 431:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1176              		.loc 1 431 0
 1177 022e 97F92C35 		ldrsb	r3, [r7, #1324]
 1178 0232 1A46     		mov	r2, r3
 1179 0234 6249     		ldr	r1, .L46+116
 1180 0236 0020     		movs	r0, #0
 1181 0238 FFF7FEFF 		bl	printNotif
 1182              	.LBB5:
 432:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 433:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1183              		.loc 1 433 0
 1184 023c 0023     		movs	r3, #0
 1185 023e 87F83335 		strb	r3, [r7, #1331]
 1186 0242 53E0     		b	.L39
 1187              	.L42:
 1188              	.LBB6:
 434:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 31


 435:notoriOS.c    ****             char http_chunk[1001];
 436:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 437:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 438:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1189              		.loc 1 438 0
 1190 0244 4FF47A72 		mov	r2, #1000
 1191 0248 5E49     		ldr	r1, .L46+120
 1192 024a 5F48     		ldr	r0, .L46+124
 1193 024c FFF7FEFF 		bl	at_write_command
 1194 0250 0346     		mov	r3, r0
 1195 0252 87F82D35 		strb	r3, [r7, #1325]
 439:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 440:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1196              		.loc 1 440 0
 1197 0256 07F1C800 		add	r0, r7, #200
 1198 025a D7F83435 		ldr	r3, [r7, #1332]
 1199 025e 534A     		ldr	r2, .L46+96
 1200 0260 4FF4FA71 		mov	r1, #500
 1201 0264 FFF7FEFF 		bl	snprintf
 441:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 442:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1202              		.loc 1 442 0
 1203 0268 07F1C803 		add	r3, r7, #200
 1204 026c 1846     		mov	r0, r3
 1205 026e FFF7FEFF 		bl	strlen
 1206 0272 0346     		mov	r3, r0
 1207 0274 1A46     		mov	r2, r3
 1208 0276 07F1C803 		add	r3, r7, #200
 1209 027a 1344     		add	r3, r3, r2
 1210 027c 5349     		ldr	r1, .L46+128
 1211 027e 1A46     		mov	r2, r3
 1212 0280 0B46     		mov	r3, r1
 1213 0282 1B88     		ldrh	r3, [r3]	@ unaligned
 1214 0284 1380     		strh	r3, [r2]	@ unaligned
 443:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1215              		.loc 1 443 0
 1216 0286 97F93325 		ldrsb	r2, [r7, #1331]
 1217 028a 07F1C803 		add	r3, r7, #200
 1218 028e 5049     		ldr	r1, .L46+132
 1219 0290 0020     		movs	r0, #0
 1220 0292 FFF7FEFF 		bl	printNotif
 444:notoriOS.c    ****             // Send data to server
 445:notoriOS.c    ****             if ((packet+1) != packets){
 1221              		.loc 1 445 0
 1222 0296 97F93335 		ldrsb	r3, [r7, #1331]
 1223 029a 5A1C     		adds	r2, r3, #1
 1224 029c 97F92C35 		ldrsb	r3, [r7, #1324]
 1225 02a0 9A42     		cmp	r2, r3
 1226 02a2 11D0     		beq	.L40
 446:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1227              		.loc 1 446 0
 1228 02a4 07F1C803 		add	r3, r7, #200
 1229 02a8 41F28832 		movw	r2, #5000
 1230 02ac 4049     		ldr	r1, .L46+100
 1231 02ae 1846     		mov	r0, r3
 1232 02b0 FFF7FEFF 		bl	at_write_command
 1233 02b4 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 32


 1234 02b6 87F82D35 		strb	r3, [r7, #1325]
 447:notoriOS.c    ****                 // Move the pointer forward 
 448:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1235              		.loc 1 448 0
 1236 02ba D7F83435 		ldr	r3, [r7, #1332]
 1237 02be 03F2F313 		addw	r3, r3, #499
 1238 02c2 C7F83435 		str	r3, [r7, #1332]
 1239 02c6 0AE0     		b	.L41
 1240              	.L40:
 449:notoriOS.c    ****             }else{
 450:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1241              		.loc 1 450 0
 1242 02c8 07F1C803 		add	r3, r7, #200
 1243 02cc 41F28832 		movw	r2, #5000
 1244 02d0 4049     		ldr	r1, .L46+136
 1245 02d2 1846     		mov	r0, r3
 1246 02d4 FFF7FEFF 		bl	at_write_command
 1247 02d8 0346     		mov	r3, r0
 1248 02da 87F82D35 		strb	r3, [r7, #1325]
 1249              	.L41:
 1250              	.LBE6:
 433:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1251              		.loc 1 433 0 discriminator 2
 1252 02de 97F93335 		ldrsb	r3, [r7, #1331]
 1253 02e2 DBB2     		uxtb	r3, r3
 1254 02e4 0133     		adds	r3, r3, #1
 1255 02e6 DBB2     		uxtb	r3, r3
 1256 02e8 87F83335 		strb	r3, [r7, #1331]
 1257              	.L39:
 433:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1258              		.loc 1 433 0 is_stmt 0 discriminator 1
 1259 02ec 97F93325 		ldrsb	r2, [r7, #1331]
 1260 02f0 97F92C35 		ldrsb	r3, [r7, #1324]
 1261 02f4 9A42     		cmp	r2, r3
 1262 02f6 A5DB     		blt	.L42
 1263              	.LBE5:
 451:notoriOS.c    ****             }
 452:notoriOS.c    ****             
 453:notoriOS.c    ****         }
 454:notoriOS.c    ****         
 455:notoriOS.c    ****         // Read received buffer
 456:notoriOS.c    ****         // A good write will return code "OS-OK"
 457:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 458:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 459:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1264              		.loc 1 459 0 is_stmt 1
 1265 02f8 41F28832 		movw	r2, #5000
 1266 02fc 3649     		ldr	r1, .L46+140
 1267 02fe 3748     		ldr	r0, .L46+144
 1268 0300 FFF7FEFF 		bl	at_write_command
 1269 0304 0346     		mov	r3, r0
 1270 0306 87F82D35 		strb	r3, [r7, #1325]
 460:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 461:notoriOS.c    ****     
 462:notoriOS.c    ****   
 463:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 464:notoriOS.c    ****         if(status == 1u){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 33


 1271              		.loc 1 464 0
 1272 030a 97F82D35 		ldrb	r3, [r7, #1325]	@ zero_extendqisi2
 1273 030e 012B     		cmp	r3, #1
 1274 0310 6AD1     		bne	.L43
 1275              	.LBB7:
 465:notoriOS.c    ****             //get_updated_parameters_from_malcom();
 466:notoriOS.c    ****             // commented out to eliminate automatically assigning as depth when reporting
 467:notoriOS.c    ****             Clear_Data_Stack();
 1276              		.loc 1 467 0
 1277 0312 FFF7FEFF 		bl	Clear_Data_Stack
 468:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1278              		.loc 1 468 0
 1279 0316 FFF7FEFF 		bl	getTimeStamp
 1280 031a 0246     		mov	r2, r0
 1281 031c 304B     		ldr	r3, .L46+148
 1282 031e 1B68     		ldr	r3, [r3]
 1283 0320 D31A     		subs	r3, r2, r3
 1284 0322 C7F82835 		str	r3, [r7, #1320]
 469:notoriOS.c    ****             char s_send_time[10];
 470:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1285              		.loc 1 470 0
 1286 0326 07F2B440 		addw	r0, r7, #1204
 1287 032a D7F82835 		ldr	r3, [r7, #1320]
 1288 032e 0D4A     		ldr	r2, .L46+24
 1289 0330 0A21     		movs	r1, #10
 1290 0332 FFF7FEFF 		bl	snprintf
 471:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1291              		.loc 1 471 0
 1292 0336 FFF7FEFF 		bl	getTimeStamp
 1293 033a 0246     		mov	r2, r0
 1294 033c 07F2B443 		addw	r3, r7, #1204
 1295 0340 1946     		mov	r1, r3
 1296 0342 2848     		ldr	r0, .L46+152
 1297 0344 FFF7FEFF 		bl	pushData
 1298              	.LBE7:
 1299 0348 52E0     		b	.L44
 1300              	.L47:
 1301 034a 00BF     		.align	2
 1302              	.L46:
 1303 034c 00000000 		.word	try_counter
 1304 0350 C0000000 		.word	.LC7
 1305 0354 00000000 		.word	http_request
 1306 0358 00000000 		.word	http_body
 1307 035c 00000000 		.word	http_route
 1308 0360 00000000 		.word	modem_stats
 1309 0364 3C000000 		.word	.LC2
 1310 0368 D0000000 		.word	.LC8
 1311 036c D8000000 		.word	.LC9
 1312 0370 00000000 		.word	buffer_overflow
 1313 0374 E4000000 		.word	.LC10
 1314 0378 F4000000 		.word	.LC11
 1315 037c 08010000 		.word	.LC12
 1316 0380 1C010000 		.word	.LC13
 1317 0384 28000000 		.word	modem_info+40
 1318 0388 48010000 		.word	.LC14
 1319 038c 58010000 		.word	.LC15
 1320 0390 00000000 		.word	system_settings
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 34


 1321 0394 68010000 		.word	.LC16
 1322 0398 6C010000 		.word	.LC17
 1323 039c 70010000 		.word	.LC18
 1324 03a0 78010000 		.word	.LC19
 1325 03a4 80010000 		.word	.LC20
 1326 03a8 98010000 		.word	.LC21
 1327 03ac B4010000 		.word	.LC22
 1328 03b0 B8010000 		.word	.LC23
 1329 03b4 D34D6210 		.word	274877907
 1330 03b8 00407F40 		.word	1082081280
 1331 03bc BC010000 		.word	.LC24
 1332 03c0 D4010000 		.word	.LC25
 1333 03c4 E8010000 		.word	.LC26
 1334 03c8 EC010000 		.word	.LC27
 1335 03cc FC010000 		.word	.LC28
 1336 03d0 00020000 		.word	.LC29
 1337 03d4 10020000 		.word	.LC30
 1338 03d8 18020000 		.word	.LC31
 1339 03dc 20020000 		.word	.LC32
 1340 03e0 00000000 		.word	modem_start_time_stamp
 1341 03e4 34020000 		.word	.LC33
 1342              	.L43:
 472:notoriOS.c    ****         }else{
 473:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1343              		.loc 1 473 0
 1344 03e8 0E49     		ldr	r1, .L48
 1345 03ea 0220     		movs	r0, #2
 1346 03ec FFF7FEFF 		bl	printNotif
 1347              	.L44:
 474:notoriOS.c    ****         }
 475:notoriOS.c    ****          
 476:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 477:notoriOS.c    ****         long network_time = modem_get_network_time();
 1348              		.loc 1 477 0
 1349 03f0 FFF7FEFF 		bl	modem_get_network_time
 1350 03f4 C7F82405 		str	r0, [r7, #1316]
 478:notoriOS.c    ****         if(network_time != 0){
 1351              		.loc 1 478 0
 1352 03f8 D7F82435 		ldr	r3, [r7, #1316]
 1353 03fc 002B     		cmp	r3, #0
 1354 03fe 03D0     		beq	.L45
 479:notoriOS.c    ****            setTime(network_time);
 1355              		.loc 1 479 0
 1356 0400 D7F82405 		ldr	r0, [r7, #1316]
 1357 0404 FFF7FEFF 		bl	setTime
 1358              	.L45:
 480:notoriOS.c    ****         }
 481:notoriOS.c    ****         
 482:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 483:notoriOS.c    ****         // If not -- keep the statck and try next time
 484:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 485:notoriOS.c    ****         modem_power_down();
 1359              		.loc 1 485 0
 1360 0408 FFF7FEFF 		bl	modem_power_down
 486:notoriOS.c    ****         
 487:notoriOS.c    ****         try_counter = 0u;
 1361              		.loc 1 487 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 35


 1362 040c 064B     		ldr	r3, .L48+4
 1363 040e 0022     		movs	r2, #0
 1364 0410 1A70     		strb	r2, [r3]
 488:notoriOS.c    ****         return 0u;
 1365              		.loc 1 488 0
 1366 0412 0023     		movs	r3, #0
 1367 0414 00E0     		b	.L33
 1368              	.L36:
 1369              	.LBE2:
 489:notoriOS.c    ****     }
 490:notoriOS.c    ****       
 491:notoriOS.c    ****       return 1u; // Not done yet
 1370              		.loc 1 491 0
 1371 0416 0123     		movs	r3, #1
 1372              	.L33:
 492:notoriOS.c    **** }
 1373              		.loc 1 492 0 discriminator 1
 1374 0418 1846     		mov	r0, r3
 1375 041a 07F23C57 		addw	r7, r7, #1340
 1376              		.cfi_def_cfa_offset 12
 1377 041e BD46     		mov	sp, r7
 1378              		.cfi_def_cfa_register 13
 1379              		@ sp needed
 1380 0420 90BD     		pop	{r4, r7, pc}
 1381              	.L49:
 1382 0422 00BF     		.align	2
 1383              	.L48:
 1384 0424 44020000 		.word	.LC34
 1385 0428 00000000 		.word	try_counter
 1386              		.cfi_endproc
 1387              	.LFE74:
 1388              		.size	syncData, .-syncData
 1389              		.section	.text.configureRemoteParams,"ax",%progbits
 1390              		.align	2
 1391              		.global	configureRemoteParams
 1392              		.thumb
 1393              		.thumb_func
 1394              		.type	configureRemoteParams, %function
 1395              	configureRemoteParams:
 1396              	.LFB75:
 493:notoriOS.c    **** 
 494:notoriOS.c    **** // ==============================================
 495:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 496:notoriOS.c    **** // Returns 0 when done
 497:notoriOS.c    **** // ==============================================
 498:notoriOS.c    **** uint8 configureRemoteParams(){
 1397              		.loc 1 498 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 8
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401 0000 80B5     		push	{r7, lr}
 1402              		.cfi_def_cfa_offset 8
 1403              		.cfi_offset 7, -8
 1404              		.cfi_offset 14, -4
 1405 0002 82B0     		sub	sp, sp, #8
 1406              		.cfi_def_cfa_offset 16
 1407 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 36


 1408              		.cfi_def_cfa_register 7
 499:notoriOS.c    ****     
 500:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1409              		.loc 1 500 0
 1410 0006 FFF7FEFF 		bl	modem_get_state
 1411 000a 0346     		mov	r3, r0
 1412 000c 002B     		cmp	r3, #0
 1413 000e 02D1     		bne	.L51
 501:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 502:notoriOS.c    ****         modem_power_up();
 1414              		.loc 1 502 0
 1415 0010 FFF7FEFF 		bl	modem_power_up
 1416 0014 11E0     		b	.L52
 1417              	.L51:
 503:notoriOS.c    ****             
 504:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1418              		.loc 1 504 0
 1419 0016 FFF7FEFF 		bl	modem_get_state
 1420 001a 0346     		mov	r3, r0
 1421 001c 042B     		cmp	r3, #4
 1422 001e 0CD1     		bne	.L52
 1423              	.LBB8:
 505:notoriOS.c    ****         
 506:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 507:notoriOS.c    ****         
 508:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 509:notoriOS.c    ****         long network_time = modem_get_network_time();
 1424              		.loc 1 509 0
 1425 0020 FFF7FEFF 		bl	modem_get_network_time
 1426 0024 7860     		str	r0, [r7, #4]
 510:notoriOS.c    ****         if(network_time != 0){
 1427              		.loc 1 510 0
 1428 0026 7B68     		ldr	r3, [r7, #4]
 1429 0028 002B     		cmp	r3, #0
 1430 002a 02D0     		beq	.L53
 511:notoriOS.c    ****             setTime(network_time);
 1431              		.loc 1 511 0
 1432 002c 7868     		ldr	r0, [r7, #4]
 1433 002e FFF7FEFF 		bl	setTime
 1434              	.L53:
 512:notoriOS.c    ****         }
 513:notoriOS.c    ****         
 514:notoriOS.c    ****         // Get GPS coordinates
 515:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 516:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 517:notoriOS.c    ****         modem_power_down();
 1435              		.loc 1 517 0
 1436 0032 FFF7FEFF 		bl	modem_power_down
 518:notoriOS.c    ****         return 0u;
 1437              		.loc 1 518 0
 1438 0036 0023     		movs	r3, #0
 1439 0038 00E0     		b	.L54
 1440              	.L52:
 1441              	.LBE8:
 519:notoriOS.c    ****         
 520:notoriOS.c    ****     }
 521:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 37


 522:notoriOS.c    ****     return 1u;
 1442              		.loc 1 522 0
 1443 003a 0123     		movs	r3, #1
 1444              	.L54:
 523:notoriOS.c    **** }
 1445              		.loc 1 523 0
 1446 003c 1846     		mov	r0, r3
 1447 003e 0837     		adds	r7, r7, #8
 1448              		.cfi_def_cfa_offset 8
 1449 0040 BD46     		mov	sp, r7
 1450              		.cfi_def_cfa_register 13
 1451              		@ sp needed
 1452 0042 80BD     		pop	{r7, pc}
 1453              		.cfi_endproc
 1454              	.LFE75:
 1455              		.size	configureRemoteParams, .-configureRemoteParams
 1456              		.section	.rodata
 1457 026f 00       		.align	2
 1458              	.LC35:
 1459 0270 256C6400 		.ascii	"%ld\000"
 1460              		.align	2
 1461              	.LC36:
 1462 0274 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1462      6F746978 
 1462      5F646570 
 1462      74683D25 
 1462      7300
 1463 0286 0000     		.align	2
 1464              	.LC37:
 1465 0288 6D617862 		.ascii	"maxbotix_depth\000"
 1465      6F746978 
 1465      5F646570 
 1465      746800
 1466 0297 00       		.align	2
 1467              	.LC38:
 1468 0298 612B00   		.ascii	"a+\000"
 1469 029b 00       		.align	2
 1470              	.LC39:
 1471 029c 206D6178 		.ascii	" maxbotix_depth: \000"
 1471      626F7469 
 1471      785F6465 
 1471      7074683A 
 1471      2000
 1472 02ae 0000     		.align	2
 1473              	.LC40:
 1474 02b0 2000     		.ascii	" \000"
 1475 02b2 0000     		.align	2
 1476              	.LC41:
 1477 02b4 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1477      64206E6F 
 1477      74206765 
 1477      74207661 
 1477      6C696420 
 1478              		.global	__aeabi_f2d
 1479              		.align	2
 1480              	.LC42:
 1481 02e0 252E3266 		.ascii	"%.2f\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 38


 1481      00
 1482 02e5 000000   		.align	2
 1483              	.LC43:
 1484 02e8 765F6261 		.ascii	"v_bat=%s\000"
 1484      743D2573 
 1484      00
 1485 02f1 000000   		.align	2
 1486              	.LC44:
 1487 02f4 765F6261 		.ascii	"v_bat\000"
 1487      7400
 1488 02fa 0000     		.align	2
 1489              	.LC45:
 1490 02fc 20766261 		.ascii	" vbat: \000"
 1490      743A2000 
 1491              		.align	2
 1492              	.LC46:
 1493 0304 70726573 		.ascii	"pressure_current=%s\000"
 1493      73757265 
 1493      5F637572 
 1493      72656E74 
 1493      3D257300 
 1494              		.align	2
 1495              	.LC47:
 1496 0318 70726573 		.ascii	"pressure_current\000"
 1496      73757265 
 1496      5F637572 
 1496      72656E74 
 1496      00
 1497 0329 000000   		.align	2
 1498              	.LC48:
 1499 032c 20707265 		.ascii	" pressure_current: \000"
 1499      73737572 
 1499      655F6375 
 1499      7272656E 
 1499      743A2000 
 1500              		.align	2
 1501              	.LC49:
 1502 0340 70726573 		.ascii	"pressure_depth=%s\000"
 1502      73757265 
 1502      5F646570 
 1502      74683D25 
 1502      7300
 1503 0352 0000     		.align	2
 1504              	.LC50:
 1505 0354 70726573 		.ascii	"pressure_depth\000"
 1505      73757265 
 1505      5F646570 
 1505      746800
 1506 0363 00       		.align	2
 1507              	.LC51:
 1508 0364 20707265 		.ascii	" pressure_depth: \000"
 1508      73737572 
 1508      655F6465 
 1508      7074683A 
 1508      2000
 1509 0376 0000     		.align	2
 1510              	.LC52:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 39


 1511 0378 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1511      64206E6F 
 1511      74206765 
 1511      74207661 
 1511      6C696420 
 1512              		.section	.text.makeMeasurements,"ax",%progbits
 1513              		.align	2
 1514              		.global	makeMeasurements
 1515              		.thumb
 1516              		.thumb_func
 1517              		.type	makeMeasurements, %function
 1518              	makeMeasurements:
 1519              	.LFB76:
 524:notoriOS.c    **** 
 525:notoriOS.c    **** 
 526:notoriOS.c    **** // ==============================================
 527:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 528:notoriOS.c    **** // Returns 0 when finished
 529:notoriOS.c    **** // ==============================================
 530:notoriOS.c    **** uint8 makeMeasurements(){
 1520              		.loc 1 530 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 128
 1523              		@ frame_needed = 1, uses_anonymous_args = 0
 1524 0000 B0B5     		push	{r4, r5, r7, lr}
 1525              		.cfi_def_cfa_offset 16
 1526              		.cfi_offset 4, -16
 1527              		.cfi_offset 5, -12
 1528              		.cfi_offset 7, -8
 1529              		.cfi_offset 14, -4
 1530 0002 A4B0     		sub	sp, sp, #144
 1531              		.cfi_def_cfa_offset 160
 1532 0004 04AF     		add	r7, sp, #16
 1533              		.cfi_def_cfa 7, 144
 531:notoriOS.c    ****     
 532:notoriOS.c    ****     // Get clock time and save to timeStamp
 533:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1534              		.loc 1 533 0
 1535 0006 FFF7FEFF 		bl	getTimeStamp
 1536 000a F867     		str	r0, [r7, #124]
 534:notoriOS.c    ****     char c_timeStamp[32];
 535:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1537              		.loc 1 535 0
 1538 000c 07F15C00 		add	r0, r7, #92
 1539 0010 FB6F     		ldr	r3, [r7, #124]
 1540 0012 824A     		ldr	r2, .L63
 1541 0014 2021     		movs	r1, #32
 1542 0016 FFF7FEFF 		bl	snprintf
 536:notoriOS.c    ****     
 537:notoriOS.c    ****     // Holds string for value that will be written 
 538:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 539:notoriOS.c    ****     
 540:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 541:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1543              		.loc 1 541 0
 1544 001a 814B     		ldr	r3, .L63+4
 1545 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 40


 1546 001e 002B     		cmp	r3, #0
 1547 0020 3BD1     		bne	.L56
 1548              	.LBB9:
 542:notoriOS.c    ****         
 543:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 544:notoriOS.c    ****         level_sensor_t m_level_sensor;
 545:notoriOS.c    ****         
 546:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 547:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1549              		.loc 1 547 0
 1550 0022 07F11003 		add	r3, r7, #16
 1551 0026 1846     		mov	r0, r3
 1552 0028 FFF7FEFF 		bl	level_sensor_take_reading
 548:notoriOS.c    ****     
 549:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 550:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1553              		.loc 1 550 0
 1554 002c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1555 0030 002B     		cmp	r3, #0
 1556 0032 2ED0     		beq	.L57
 551:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1557              		.loc 1 551 0
 1558 0034 B7F92630 		ldrsh	r3, [r7, #38]
 1559 0038 07F14800 		add	r0, r7, #72
 1560 003c 794A     		ldr	r2, .L63+8
 1561 003e 1421     		movs	r1, #20
 1562 0040 FFF7FEFF 		bl	snprintf
 552:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1563              		.loc 1 552 0
 1564 0044 07F14803 		add	r3, r7, #72
 1565 0048 1A46     		mov	r2, r3
 1566 004a 7749     		ldr	r1, .L63+12
 1567 004c 0020     		movs	r0, #0
 1568 004e FFF7FEFF 		bl	printNotif
 553:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1569              		.loc 1 553 0
 1570 0052 07F14803 		add	r3, r7, #72
 1571 0056 FA6F     		ldr	r2, [r7, #124]
 1572 0058 1946     		mov	r1, r3
 1573 005a 7448     		ldr	r0, .L63+16
 1574 005c FFF7FEFF 		bl	pushData
 554:notoriOS.c    ****             
 555:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 556:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1575              		.loc 1 556 0
 1576 0060 07F15C03 		add	r3, r7, #92
 1577 0064 1A46     		mov	r2, r3
 1578 0066 7249     		ldr	r1, .L63+20
 1579 0068 7248     		ldr	r0, .L63+24
 1580 006a FFF7FEFF 		bl	SD_write
 557:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1581              		.loc 1 557 0
 1582 006e 724A     		ldr	r2, .L63+28
 1583 0070 6F49     		ldr	r1, .L63+20
 1584 0072 7048     		ldr	r0, .L63+24
 1585 0074 FFF7FEFF 		bl	SD_write
 558:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 41


 1586              		.loc 1 558 0
 1587 0078 07F14803 		add	r3, r7, #72
 1588 007c 1A46     		mov	r2, r3
 1589 007e 6C49     		ldr	r1, .L63+20
 1590 0080 6C48     		ldr	r0, .L63+24
 1591 0082 FFF7FEFF 		bl	SD_write
 559:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1592              		.loc 1 559 0
 1593 0086 6D4A     		ldr	r2, .L63+32
 1594 0088 6949     		ldr	r1, .L63+20
 1595 008a 6A48     		ldr	r0, .L63+24
 1596 008c FFF7FEFF 		bl	SD_write
 1597 0090 03E0     		b	.L56
 1598              	.L57:
 560:notoriOS.c    ****         }else{
 561:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1599              		.loc 1 561 0
 1600 0092 6B49     		ldr	r1, .L63+36
 1601 0094 0220     		movs	r0, #2
 1602 0096 FFF7FEFF 		bl	printNotif
 1603              	.L56:
 1604              	.LBE9:
 562:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 563:notoriOS.c    ****         }
 564:notoriOS.c    ****     }
 565:notoriOS.c    ****     
 566:notoriOS.c    ****     
 567:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 568:notoriOS.c    ****     voltage_t m_voltage;
 569:notoriOS.c    ****     
 570:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 571:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1605              		.loc 1 571 0
 1606 009a 07F12C03 		add	r3, r7, #44
 1607 009e 1846     		mov	r0, r3
 1608 00a0 FFF7FEFF 		bl	voltage_take_readings
 572:notoriOS.c    ****     
 573:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 574:notoriOS.c    ****     if(m_voltage.valid){
 1609              		.loc 1 574 0
 1610 00a4 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 1611 00a8 002B     		cmp	r3, #0
 1612 00aa 00F0AE80 		beq	.L59
 575:notoriOS.c    ****         // battery voltage data
 576:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1613              		.loc 1 576 0
 1614 00ae FB6A     		ldr	r3, [r7, #44]	@ float
 1615 00b0 1846     		mov	r0, r3
 1616 00b2 FFF7FEFF 		bl	__aeabi_f2d
 1617 00b6 0346     		mov	r3, r0
 1618 00b8 0C46     		mov	r4, r1
 1619 00ba 07F14800 		add	r0, r7, #72
 1620 00be CDE90034 		strd	r3, [sp]
 1621 00c2 604A     		ldr	r2, .L63+40
 1622 00c4 1421     		movs	r1, #20
 1623 00c6 FFF7FEFF 		bl	snprintf
 577:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 42


 1624              		.loc 1 577 0
 1625 00ca 07F14803 		add	r3, r7, #72
 1626 00ce 1A46     		mov	r2, r3
 1627 00d0 5D49     		ldr	r1, .L63+44
 1628 00d2 0020     		movs	r0, #0
 1629 00d4 FFF7FEFF 		bl	printNotif
 578:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1630              		.loc 1 578 0
 1631 00d8 07F14803 		add	r3, r7, #72
 1632 00dc FA6F     		ldr	r2, [r7, #124]
 1633 00de 1946     		mov	r1, r3
 1634 00e0 5A48     		ldr	r0, .L63+48
 1635 00e2 FFF7FEFF 		bl	pushData
 579:notoriOS.c    ****         
 580:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 581:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1636              		.loc 1 581 0
 1637 00e6 554A     		ldr	r2, .L63+32
 1638 00e8 5149     		ldr	r1, .L63+20
 1639 00ea 5248     		ldr	r0, .L63+24
 1640 00ec FFF7FEFF 		bl	SD_write
 582:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1641              		.loc 1 582 0
 1642 00f0 07F15C03 		add	r3, r7, #92
 1643 00f4 1A46     		mov	r2, r3
 1644 00f6 4E49     		ldr	r1, .L63+20
 1645 00f8 4E48     		ldr	r0, .L63+24
 1646 00fa FFF7FEFF 		bl	SD_write
 583:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1647              		.loc 1 583 0
 1648 00fe 544A     		ldr	r2, .L63+52
 1649 0100 4B49     		ldr	r1, .L63+20
 1650 0102 4C48     		ldr	r0, .L63+24
 1651 0104 FFF7FEFF 		bl	SD_write
 584:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1652              		.loc 1 584 0
 1653 0108 07F14803 		add	r3, r7, #72
 1654 010c 1A46     		mov	r2, r3
 1655 010e 4849     		ldr	r1, .L63+20
 1656 0110 4848     		ldr	r0, .L63+24
 1657 0112 FFF7FEFF 		bl	SD_write
 585:notoriOS.c    ****         
 586:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 587:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1658              		.loc 1 587 0
 1659 0116 424B     		ldr	r3, .L63+4
 1660 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1661 011a 012B     		cmp	r3, #1
 1662 011c 79D1     		bne	.L61
 1663              	.LBB10:
 588:notoriOS.c    ****             
 589:notoriOS.c    ****             // pressure transducer voltage (V) data
 590:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 591:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 592:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 593:notoriOS.c    ****             
 594:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 43


 595:notoriOS.c    ****             pressure_t m_pressure;
 596:notoriOS.c    ****             
 597:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 598:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1664              		.loc 1 598 0
 1665 011e 3D46     		mov	r5, r7
 1666 0120 6C46     		mov	r4, sp
 1667 0122 07F13803 		add	r3, r7, #56
 1668 0126 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1669 0128 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1670 012c 07F12C03 		add	r3, r7, #44
 1671 0130 0ECB     		ldmia	r3, {r1, r2, r3}
 1672 0132 2846     		mov	r0, r5
 1673 0134 FFF7FEFF 		bl	pressure_calculations
 599:notoriOS.c    ****             
 600:notoriOS.c    ****             // pressure transducer current (mA) data
 601:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1674              		.loc 1 601 0
 1675 0138 BB68     		ldr	r3, [r7, #8]	@ float
 1676 013a 1846     		mov	r0, r3
 1677 013c FFF7FEFF 		bl	__aeabi_f2d
 1678 0140 0346     		mov	r3, r0
 1679 0142 0C46     		mov	r4, r1
 1680 0144 07F14800 		add	r0, r7, #72
 1681 0148 CDE90034 		strd	r3, [sp]
 1682 014c 3D4A     		ldr	r2, .L63+40
 1683 014e 1421     		movs	r1, #20
 1684 0150 FFF7FEFF 		bl	snprintf
 602:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1685              		.loc 1 602 0
 1686 0154 07F14803 		add	r3, r7, #72
 1687 0158 1A46     		mov	r2, r3
 1688 015a 3E49     		ldr	r1, .L63+56
 1689 015c 0020     		movs	r0, #0
 1690 015e FFF7FEFF 		bl	printNotif
 603:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1691              		.loc 1 603 0
 1692 0162 07F14803 		add	r3, r7, #72
 1693 0166 FA6F     		ldr	r2, [r7, #124]
 1694 0168 1946     		mov	r1, r3
 1695 016a 3B48     		ldr	r0, .L63+60
 1696 016c FFF7FEFF 		bl	pushData
 604:notoriOS.c    ****             
 605:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 606:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1697              		.loc 1 606 0
 1698 0170 324A     		ldr	r2, .L63+32
 1699 0172 2F49     		ldr	r1, .L63+20
 1700 0174 2F48     		ldr	r0, .L63+24
 1701 0176 FFF7FEFF 		bl	SD_write
 607:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1702              		.loc 1 607 0
 1703 017a 07F15C03 		add	r3, r7, #92
 1704 017e 1A46     		mov	r2, r3
 1705 0180 2B49     		ldr	r1, .L63+20
 1706 0182 2C48     		ldr	r0, .L63+24
 1707 0184 FFF7FEFF 		bl	SD_write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 44


 608:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1708              		.loc 1 608 0
 1709 0188 344A     		ldr	r2, .L63+64
 1710 018a 2949     		ldr	r1, .L63+20
 1711 018c 2948     		ldr	r0, .L63+24
 1712 018e FFF7FEFF 		bl	SD_write
 609:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1713              		.loc 1 609 0
 1714 0192 07F14803 		add	r3, r7, #72
 1715 0196 1A46     		mov	r2, r3
 1716 0198 2549     		ldr	r1, .L63+20
 1717 019a 2648     		ldr	r0, .L63+24
 1718 019c FFF7FEFF 		bl	SD_write
 610:notoriOS.c    ****             
 611:notoriOS.c    ****             // pressure transducer depth (ft) data
 612:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1719              		.loc 1 612 0
 1720 01a0 FB68     		ldr	r3, [r7, #12]	@ float
 1721 01a2 1846     		mov	r0, r3
 1722 01a4 FFF7FEFF 		bl	__aeabi_f2d
 1723 01a8 0346     		mov	r3, r0
 1724 01aa 0C46     		mov	r4, r1
 1725 01ac 07F14800 		add	r0, r7, #72
 1726 01b0 CDE90034 		strd	r3, [sp]
 1727 01b4 234A     		ldr	r2, .L63+40
 1728 01b6 1421     		movs	r1, #20
 1729 01b8 FFF7FEFF 		bl	snprintf
 613:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1730              		.loc 1 613 0
 1731 01bc 07F14803 		add	r3, r7, #72
 1732 01c0 1A46     		mov	r2, r3
 1733 01c2 2749     		ldr	r1, .L63+68
 1734 01c4 0020     		movs	r0, #0
 1735 01c6 FFF7FEFF 		bl	printNotif
 614:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1736              		.loc 1 614 0
 1737 01ca 07F14803 		add	r3, r7, #72
 1738 01ce FA6F     		ldr	r2, [r7, #124]
 1739 01d0 1946     		mov	r1, r3
 1740 01d2 2448     		ldr	r0, .L63+72
 1741 01d4 FFF7FEFF 		bl	pushData
 615:notoriOS.c    ****             
 616:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 617:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1742              		.loc 1 617 0
 1743 01d8 184A     		ldr	r2, .L63+32
 1744 01da 1549     		ldr	r1, .L63+20
 1745 01dc 1548     		ldr	r0, .L63+24
 1746 01de FFF7FEFF 		bl	SD_write
 618:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1747              		.loc 1 618 0
 1748 01e2 07F15C03 		add	r3, r7, #92
 1749 01e6 1A46     		mov	r2, r3
 1750 01e8 1149     		ldr	r1, .L63+20
 1751 01ea 1248     		ldr	r0, .L63+24
 1752 01ec FFF7FEFF 		bl	SD_write
 619:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 45


 1753              		.loc 1 619 0
 1754 01f0 1D4A     		ldr	r2, .L63+76
 1755 01f2 0F49     		ldr	r1, .L63+20
 1756 01f4 0F48     		ldr	r0, .L63+24
 1757 01f6 FFF7FEFF 		bl	SD_write
 620:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1758              		.loc 1 620 0
 1759 01fa 07F14803 		add	r3, r7, #72
 1760 01fe 1A46     		mov	r2, r3
 1761 0200 0B49     		ldr	r1, .L63+20
 1762 0202 0C48     		ldr	r0, .L63+24
 1763 0204 FFF7FEFF 		bl	SD_write
 1764 0208 03E0     		b	.L61
 1765              	.L59:
 1766              	.LBE10:
 621:notoriOS.c    ****         }    
 622:notoriOS.c    ****     }else{
 623:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1767              		.loc 1 623 0
 1768 020a 1849     		ldr	r1, .L63+80
 1769 020c 0220     		movs	r0, #2
 1770 020e FFF7FEFF 		bl	printNotif
 1771              	.L61:
 624:notoriOS.c    ****     }
 625:notoriOS.c    ****     
 626:notoriOS.c    ****     return 0u;
 1772              		.loc 1 626 0
 1773 0212 0023     		movs	r3, #0
 627:notoriOS.c    **** }
 1774              		.loc 1 627 0
 1775 0214 1846     		mov	r0, r3
 1776 0216 8037     		adds	r7, r7, #128
 1777              		.cfi_def_cfa_offset 16
 1778 0218 BD46     		mov	sp, r7
 1779              		.cfi_def_cfa_register 13
 1780              		@ sp needed
 1781 021a B0BD     		pop	{r4, r5, r7, pc}
 1782              	.L64:
 1783              		.align	2
 1784              	.L63:
 1785 021c 70020000 		.word	.LC35
 1786 0220 00000000 		.word	updatable_parameters
 1787 0224 3C000000 		.word	.LC2
 1788 0228 74020000 		.word	.LC36
 1789 022c 88020000 		.word	.LC37
 1790 0230 98020000 		.word	.LC38
 1791 0234 00000000 		.word	Data_fileName
 1792 0238 9C020000 		.word	.LC39
 1793 023c B0020000 		.word	.LC40
 1794 0240 B4020000 		.word	.LC41
 1795 0244 E0020000 		.word	.LC42
 1796 0248 E8020000 		.word	.LC43
 1797 024c F4020000 		.word	.LC44
 1798 0250 FC020000 		.word	.LC45
 1799 0254 04030000 		.word	.LC46
 1800 0258 18030000 		.word	.LC47
 1801 025c 2C030000 		.word	.LC48
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 46


 1802 0260 40030000 		.word	.LC49
 1803 0264 54030000 		.word	.LC50
 1804 0268 64030000 		.word	.LC51
 1805 026c 78030000 		.word	.LC52
 1806              		.cfi_endproc
 1807              	.LFE76:
 1808              		.size	makeMeasurements, .-makeMeasurements
 1809              		.section	.rodata
 1810 039f 00       		.align	2
 1811              	.LC53:
 1812 03a0 4572726F 		.ascii	"Error setting system time.\000"
 1812      72207365 
 1812      7474696E 
 1812      67207379 
 1812      7374656D 
 1813              		.section	.text.setTime,"ax",%progbits
 1814              		.align	2
 1815              		.global	setTime
 1816              		.thumb
 1817              		.thumb_func
 1818              		.type	setTime, %function
 1819              	setTime:
 1820              	.LFB77:
 628:notoriOS.c    **** 
 629:notoriOS.c    **** // ==============================================
 630:notoriOS.c    **** // Set the system time
 631:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 632:notoriOS.c    **** // ==============================================
 633:notoriOS.c    **** uint8 setTime(long timeStamp){
 1821              		.loc 1 633 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 24
 1824              		@ frame_needed = 1, uses_anonymous_args = 0
 1825 0000 80B5     		push	{r7, lr}
 1826              		.cfi_def_cfa_offset 8
 1827              		.cfi_offset 7, -8
 1828              		.cfi_offset 14, -4
 1829 0002 86B0     		sub	sp, sp, #24
 1830              		.cfi_def_cfa_offset 32
 1831 0004 00AF     		add	r7, sp, #0
 1832              		.cfi_def_cfa_register 7
 1833 0006 7860     		str	r0, [r7, #4]
 634:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 635:notoriOS.c    ****     if(timeStamp <=0){
 1834              		.loc 1 635 0
 1835 0008 7B68     		ldr	r3, [r7, #4]
 1836 000a 002B     		cmp	r3, #0
 1837 000c 05DC     		bgt	.L66
 636:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1838              		.loc 1 636 0
 1839 000e 1849     		ldr	r1, .L68
 1840 0010 0220     		movs	r0, #2
 1841 0012 FFF7FEFF 		bl	printNotif
 637:notoriOS.c    ****         return 0;  
 1842              		.loc 1 637 0
 1843 0016 0023     		movs	r3, #0
 1844 0018 25E0     		b	.L67
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 47


 1845              	.L66:
 638:notoriOS.c    ****     }
 639:notoriOS.c    ****     // Create a new pointer t of data structure tm
 640:notoriOS.c    ****     struct tm * t;
 641:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 642:notoriOS.c    ****     t = gmtime(&timeStamp);
 1846              		.loc 1 642 0
 1847 001a 3B1D     		adds	r3, r7, #4
 1848 001c 1846     		mov	r0, r3
 1849 001e FFF7FEFF 		bl	gmtime
 1850 0022 7861     		str	r0, [r7, #20]
 643:notoriOS.c    ****     
 644:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 645:notoriOS.c    ****     RTC_TIME_DATE localTime;
 646:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1851              		.loc 1 646 0
 1852 0024 7B69     		ldr	r3, [r7, #20]
 1853 0026 1B68     		ldr	r3, [r3]
 1854 0028 DBB2     		uxtb	r3, r3
 1855 002a 3B72     		strb	r3, [r7, #8]
 647:notoriOS.c    ****     localTime.Min = t->tm_min;
 1856              		.loc 1 647 0
 1857 002c 7B69     		ldr	r3, [r7, #20]
 1858 002e 5B68     		ldr	r3, [r3, #4]
 1859 0030 DBB2     		uxtb	r3, r3
 1860 0032 7B72     		strb	r3, [r7, #9]
 648:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1861              		.loc 1 648 0
 1862 0034 7B69     		ldr	r3, [r7, #20]
 1863 0036 9B68     		ldr	r3, [r3, #8]
 1864 0038 DBB2     		uxtb	r3, r3
 1865 003a BB72     		strb	r3, [r7, #10]
 649:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1866              		.loc 1 649 0
 1867 003c 7B69     		ldr	r3, [r7, #20]
 1868 003e 5B69     		ldr	r3, [r3, #20]
 1869 0040 9BB2     		uxth	r3, r3
 1870 0042 03F26C73 		addw	r3, r3, #1900
 1871 0046 9BB2     		uxth	r3, r3
 1872 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 650:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1873              		.loc 1 650 0
 1874 004a 7B69     		ldr	r3, [r7, #20]
 1875 004c 1B69     		ldr	r3, [r3, #16]
 1876 004e DBB2     		uxtb	r3, r3
 1877 0050 3B74     		strb	r3, [r7, #16]
 651:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1878              		.loc 1 651 0
 1879 0052 7B69     		ldr	r3, [r7, #20]
 1880 0054 DB68     		ldr	r3, [r3, #12]
 1881 0056 DBB2     		uxtb	r3, r3
 1882 0058 3B73     		strb	r3, [r7, #12]
 652:notoriOS.c    **** 
 653:notoriOS.c    ****     // Writes time and date values as current time and date.
 654:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1883              		.loc 1 654 0
 1884 005a 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 48


 1885 005e 1846     		mov	r0, r3
 1886 0060 FFF7FEFF 		bl	RTC_WriteTime
 655:notoriOS.c    ****     
 656:notoriOS.c    ****     // Return 1 when the system time was set properly.
 657:notoriOS.c    ****     return 1;
 1887              		.loc 1 657 0
 1888 0064 0123     		movs	r3, #1
 1889              	.L67:
 658:notoriOS.c    **** }
 1890              		.loc 1 658 0
 1891 0066 1846     		mov	r0, r3
 1892 0068 1837     		adds	r7, r7, #24
 1893              		.cfi_def_cfa_offset 8
 1894 006a BD46     		mov	sp, r7
 1895              		.cfi_def_cfa_register 13
 1896              		@ sp needed
 1897 006c 80BD     		pop	{r7, pc}
 1898              	.L69:
 1899 006e 00BF     		.align	2
 1900              	.L68:
 1901 0070 A0030000 		.word	.LC53
 1902              		.cfi_endproc
 1903              	.LFE77:
 1904              		.size	setTime, .-setTime
 1905              		.section	.rodata
 1906 03bb 00       		.align	2
 1907              	.LC54:
 1908 03bc 75706772 		.ascii	"upgrade.hex\000"
 1908      6164652E 
 1908      68657800 
 1909              		.section	.text.upgraded,"ax",%progbits
 1910              		.align	2
 1911              		.global	upgraded
 1912              		.thumb
 1913              		.thumb_func
 1914              		.type	upgraded, %function
 1915              	upgraded:
 1916              	.LFB78:
 659:notoriOS.c    **** 
 660:notoriOS.c    **** //downloads and stores files on SD card
 661:notoriOS.c    **** 
 662:notoriOS.c    **** 
 663:notoriOS.c    **** 
 664:notoriOS.c    **** // ==============================================
 665:notoriOS.c    **** // Will they love it, will they hate it
 666:notoriOS.c    **** // Never fade it, I evade it
 667:notoriOS.c    **** // Cause I never really want to complicate it
 668:notoriOS.c    **** //      - Logic, Upgraded (2015)
 669:notoriOS.c    **** //
 670:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 671:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 672:notoriOS.c    **** // ==============================================
 673:notoriOS.c    **** 
 674:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 1917              		.loc 1 674 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 232
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 49


 1920              		@ frame_needed = 1, uses_anonymous_args = 0
 1921 0000 80B5     		push	{r7, lr}
 1922              		.cfi_def_cfa_offset 8
 1923              		.cfi_offset 7, -8
 1924              		.cfi_offset 14, -4
 1925 0002 C0B0     		sub	sp, sp, #256
 1926              		.cfi_def_cfa_offset 264
 1927 0004 06AF     		add	r7, sp, #24
 1928              		.cfi_def_cfa 7, 240
 1929 0006 F860     		str	r0, [r7, #12]
 1930 0008 B960     		str	r1, [r7, #8]
 1931 000a 7A60     		str	r2, [r7, #4]
 675:notoriOS.c    ****     
 676:notoriOS.c    ****     uint8 upgrade_status = 0;
 1932              		.loc 1 676 0
 1933 000c 0023     		movs	r3, #0
 1934 000e 87F8E730 		strb	r3, [r7, #231]
 677:notoriOS.c    ****     
 678:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 679:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 1935              		.loc 1 679 0
 1936 0012 384B     		ldr	r3, .L74
 1937 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1938 0016 042B     		cmp	r3, #4
 1939 0018 02D0     		beq	.L71
 680:notoriOS.c    ****         return upgrade_status;//where valid = 0
 1940              		.loc 1 680 0
 1941 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 1942 001e 65E0     		b	.L73
 1943              	.L71:
 681:notoriOS.c    ****     }
 682:notoriOS.c    ****     
 683:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 1944              		.loc 1 683 0
 1945 0020 354A     		ldr	r2, .L74+4
 1946 0022 07F1D803 		add	r3, r7, #216
 1947 0026 07CA     		ldmia	r2, {r0, r1, r2}
 1948 0028 83E80700 		stmia	r3, {r0, r1, r2}
 684:notoriOS.c    ****     //delete file, if one exisits already
 685:notoriOS.c    ****     SD_rmfile(fileName);
 1949              		.loc 1 685 0
 1950 002c 07F1D803 		add	r3, r7, #216
 1951 0030 1846     		mov	r0, r3
 1952 0032 FFF7FEFF 		bl	SD_rmfile
 686:notoriOS.c    ****     
 687:notoriOS.c    ****     // Create http request
 688:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 1953              		.loc 1 688 0
 1954 0036 314B     		ldr	r3, .L74+8
 1955 0038 0593     		str	r3, [sp, #20]
 1956 003a 0023     		movs	r3, #0
 1957 003c 0493     		str	r3, [sp, #16]
 1958 003e 304B     		ldr	r3, .L74+12
 1959 0040 0393     		str	r3, [sp, #12]
 1960 0042 304B     		ldr	r3, .L74+16
 1961 0044 0293     		str	r3, [sp, #8]
 1962 0046 304B     		ldr	r3, .L74+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 50


 1963 0048 0193     		str	r3, [sp, #4]
 1964 004a BB68     		ldr	r3, [r7, #8]
 1965 004c 0093     		str	r3, [sp]
 1966 004e 7B68     		ldr	r3, [r7, #4]
 1967 0050 FA68     		ldr	r2, [r7, #12]
 1968 0052 2E49     		ldr	r1, .L74+24
 1969 0054 2E48     		ldr	r0, .L74+28
 1970 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 689:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1971              		.loc 1 689 0
 1972 005a 2D4A     		ldr	r2, .L74+28
 1973 005c 2D49     		ldr	r1, .L74+32
 1974 005e 0020     		movs	r0, #0
 1975 0060 FFF7FEFF 		bl	printNotif
 690:notoriOS.c    ****     // Create array portConfig of size 200 characters
 691:notoriOS.c    ****     char portConfig[200];
 692:notoriOS.c    ****     // Print port configurations
 693:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 1976              		.loc 1 693 0
 1977 0064 07F11000 		add	r0, r7, #16
 1978 0068 FB68     		ldr	r3, [r7, #12]
 1979 006a 0093     		str	r3, [sp]
 1980 006c BB68     		ldr	r3, [r7, #8]
 1981 006e 2A4A     		ldr	r2, .L74+36
 1982 0070 C821     		movs	r1, #200
 1983 0072 FFF7FEFF 		bl	snprintf
 694:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1984              		.loc 1 694 0
 1985 0076 07F11003 		add	r3, r7, #16
 1986 007a 1A46     		mov	r2, r3
 1987 007c 2749     		ldr	r1, .L74+40
 1988 007e 0020     		movs	r0, #0
 1989 0080 FFF7FEFF 		bl	printNotif
 695:notoriOS.c    ****     // AT command to configure the port
 696:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 1990              		.loc 1 696 0
 1991 0084 07F11003 		add	r3, r7, #16
 1992 0088 42F21072 		movw	r2, #10000
 1993 008c 2449     		ldr	r1, .L74+44
 1994 008e 1846     		mov	r0, r3
 1995 0090 FFF7FEFF 		bl	at_write_command
 1996 0094 0346     		mov	r3, r0
 1997 0096 87F8E730 		strb	r3, [r7, #231]
 697:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 698:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 699:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 1998              		.loc 1 699 0
 1999 009a 4FF47A72 		mov	r2, #1000
 2000 009e 2149     		ldr	r1, .L74+48
 2001 00a0 2148     		ldr	r0, .L74+52
 2002 00a2 FFF7FEFF 		bl	at_write_command
 2003 00a6 0346     		mov	r3, r0
 2004 00a8 87F8E730 		strb	r3, [r7, #231]
 700:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 701:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2005              		.loc 1 701 0
 2006 00ac 1848     		ldr	r0, .L74+28
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 51


 2007 00ae FFF7FEFF 		bl	strlen
 2008 00b2 0346     		mov	r3, r0
 2009 00b4 1A46     		mov	r2, r3
 2010 00b6 164B     		ldr	r3, .L74+28
 2011 00b8 1344     		add	r3, r3, r2
 2012 00ba 1C49     		ldr	r1, .L74+56
 2013 00bc 1A46     		mov	r2, r3
 2014 00be 0B46     		mov	r3, r1
 2015 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2016 00c2 1380     		strh	r3, [r2]	@ unaligned
 702:notoriOS.c    ****     // AT command to send http request
 703:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2017              		.loc 1 703 0
 2018 00c4 41F28832 		movw	r2, #5000
 2019 00c8 1549     		ldr	r1, .L74+44
 2020 00ca 1148     		ldr	r0, .L74+28
 2021 00cc FFF7FEFF 		bl	at_write_command
 2022 00d0 0346     		mov	r3, r0
 2023 00d2 87F8E730 		strb	r3, [r7, #231]
 704:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 705:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 706:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2024              		.loc 1 706 0
 2025 00d6 41F28832 		movw	r2, #5000
 2026 00da 1549     		ldr	r1, .L74+60
 2027 00dc 1548     		ldr	r0, .L74+64
 2028 00de FFF7FEFF 		bl	at_write_command
 2029 00e2 0346     		mov	r3, r0
 2030 00e4 87F8E730 		strb	r3, [r7, #231]
 707:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 708:notoriOS.c    ****     
 709:notoriOS.c    ****     
 710:notoriOS.c    ****     return upgrade_status;
 2031              		.loc 1 710 0
 2032 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2033              	.L73:
 711:notoriOS.c    ****     
 712:notoriOS.c    **** }
 2034              		.loc 1 712 0 discriminator 1
 2035 00ec 1846     		mov	r0, r3
 2036 00ee E837     		adds	r7, r7, #232
 2037              		.cfi_def_cfa_offset 8
 2038 00f0 BD46     		mov	sp, r7
 2039              		.cfi_def_cfa_register 13
 2040              		@ sp needed
 2041 00f2 80BD     		pop	{r7, pc}
 2042              	.L75:
 2043              		.align	2
 2044              	.L74:
 2045 00f4 00000000 		.word	modem_state
 2046 00f8 BC030000 		.word	.LC54
 2047 00fc 68010000 		.word	.LC16
 2048 0100 6C010000 		.word	.LC17
 2049 0104 70010000 		.word	.LC18
 2050 0108 78010000 		.word	.LC19
 2051 010c 00000000 		.word	http_body
 2052 0110 00000000 		.word	http_request
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 52


 2053 0114 80010000 		.word	.LC20
 2054 0118 98010000 		.word	.LC21
 2055 011c B4010000 		.word	.LC22
 2056 0120 B8010000 		.word	.LC23
 2057 0124 E8010000 		.word	.LC26
 2058 0128 EC010000 		.word	.LC27
 2059 012c FC010000 		.word	.LC28
 2060 0130 18020000 		.word	.LC31
 2061 0134 20020000 		.word	.LC32
 2062              		.cfi_endproc
 2063              	.LFE78:
 2064              		.size	upgraded, .-upgraded
 2065              		.text
 2066              	.Letext0:
 2067              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2068              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2069              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2070              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2071              		.file 6 "testing.h"
 2072              		.file 7 "level_sensor.h"
 2073              		.file 8 "voltages.h"
 2074              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2075              		.file 10 "data.h"
 2076              		.file 11 "modem.h"
 2077              		.file 12 "notoriOS.h"
 2078              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2079              		.section	.debug_info,"",%progbits
 2080              	.Ldebug_info0:
 2081 0000 350C0000 		.4byte	0xc35
 2082 0004 0400     		.2byte	0x4
 2083 0006 00000000 		.4byte	.Ldebug_abbrev0
 2084 000a 04       		.byte	0x4
 2085 000b 01       		.uleb128 0x1
 2086 000c 74000000 		.4byte	.LASF163
 2087 0010 0C       		.byte	0xc
 2088 0011 EF070000 		.4byte	.LASF164
 2089 0015 E7040000 		.4byte	.LASF165
 2090 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2091 001d 00000000 		.4byte	0
 2092 0021 00000000 		.4byte	.Ldebug_line0
 2093 0025 02       		.uleb128 0x2
 2094 0026 01       		.byte	0x1
 2095 0027 06       		.byte	0x6
 2096 0028 45000000 		.4byte	.LASF0
 2097 002c 02       		.uleb128 0x2
 2098 002d 01       		.byte	0x1
 2099 002e 08       		.byte	0x8
 2100 002f E8050000 		.4byte	.LASF1
 2101 0033 02       		.uleb128 0x2
 2102 0034 02       		.byte	0x2
 2103 0035 05       		.byte	0x5
 2104 0036 1F040000 		.4byte	.LASF2
 2105 003a 02       		.uleb128 0x2
 2106 003b 02       		.byte	0x2
 2107 003c 07       		.byte	0x7
 2108 003d 79070000 		.4byte	.LASF3
 2109 0041 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 53


 2110 0042 2B070000 		.4byte	.LASF9
 2111 0046 02       		.byte	0x2
 2112 0047 3F       		.byte	0x3f
 2113 0048 4C000000 		.4byte	0x4c
 2114 004c 02       		.uleb128 0x2
 2115 004d 04       		.byte	0x4
 2116 004e 05       		.byte	0x5
 2117 004f 09020000 		.4byte	.LASF4
 2118 0053 02       		.uleb128 0x2
 2119 0054 04       		.byte	0x4
 2120 0055 07       		.byte	0x7
 2121 0056 5C030000 		.4byte	.LASF5
 2122 005a 02       		.uleb128 0x2
 2123 005b 08       		.byte	0x8
 2124 005c 05       		.byte	0x5
 2125 005d 64010000 		.4byte	.LASF6
 2126 0061 02       		.uleb128 0x2
 2127 0062 08       		.byte	0x8
 2128 0063 07       		.byte	0x7
 2129 0064 13010000 		.4byte	.LASF7
 2130 0068 04       		.uleb128 0x4
 2131 0069 04       		.byte	0x4
 2132 006a 05       		.byte	0x5
 2133 006b 696E7400 		.ascii	"int\000"
 2134 006f 02       		.uleb128 0x2
 2135 0070 04       		.byte	0x4
 2136 0071 07       		.byte	0x7
 2137 0072 08030000 		.4byte	.LASF8
 2138 0076 03       		.uleb128 0x3
 2139 0077 E0050000 		.4byte	.LASF10
 2140 007b 03       		.byte	0x3
 2141 007c 2C       		.byte	0x2c
 2142 007d 41000000 		.4byte	0x41
 2143 0081 05       		.uleb128 0x5
 2144 0082 40020000 		.4byte	.LASF11
 2145 0086 04       		.byte	0x4
 2146 0087 9201     		.2byte	0x192
 2147 0089 2C000000 		.4byte	0x2c
 2148 008d 05       		.uleb128 0x5
 2149 008e 08000000 		.4byte	.LASF12
 2150 0092 04       		.byte	0x4
 2151 0093 9301     		.2byte	0x193
 2152 0095 3A000000 		.4byte	0x3a
 2153 0099 05       		.uleb128 0x5
 2154 009a 84020000 		.4byte	.LASF13
 2155 009e 04       		.byte	0x4
 2156 009f 9401     		.2byte	0x194
 2157 00a1 53000000 		.4byte	0x53
 2158 00a5 05       		.uleb128 0x5
 2159 00a6 E2030000 		.4byte	.LASF14
 2160 00aa 04       		.byte	0x4
 2161 00ab 9501     		.2byte	0x195
 2162 00ad 25000000 		.4byte	0x25
 2163 00b1 05       		.uleb128 0x5
 2164 00b2 04080000 		.4byte	.LASF15
 2165 00b6 04       		.byte	0x4
 2166 00b7 9601     		.2byte	0x196
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 54


 2167 00b9 33000000 		.4byte	0x33
 2168 00bd 05       		.uleb128 0x5
 2169 00be 5E020000 		.4byte	.LASF16
 2170 00c2 04       		.byte	0x4
 2171 00c3 9701     		.2byte	0x197
 2172 00c5 4C000000 		.4byte	0x4c
 2173 00c9 02       		.uleb128 0x2
 2174 00ca 04       		.byte	0x4
 2175 00cb 04       		.byte	0x4
 2176 00cc 7C050000 		.4byte	.LASF17
 2177 00d0 02       		.uleb128 0x2
 2178 00d1 08       		.byte	0x8
 2179 00d2 04       		.byte	0x4
 2180 00d3 92080000 		.4byte	.LASF18
 2181 00d7 02       		.uleb128 0x2
 2182 00d8 01       		.byte	0x1
 2183 00d9 08       		.byte	0x8
 2184 00da 04070000 		.4byte	.LASF19
 2185 00de 02       		.uleb128 0x2
 2186 00df 08       		.byte	0x8
 2187 00e0 04       		.byte	0x4
 2188 00e1 E6060000 		.4byte	.LASF20
 2189 00e5 02       		.uleb128 0x2
 2190 00e6 04       		.byte	0x4
 2191 00e7 07       		.byte	0x7
 2192 00e8 9C040000 		.4byte	.LASF21
 2193 00ec 06       		.uleb128 0x6
 2194 00ed 04       		.byte	0x4
 2195 00ee D7000000 		.4byte	0xd7
 2196 00f2 07       		.uleb128 0x7
 2197 00f3 D7000000 		.4byte	0xd7
 2198 00f7 02010000 		.4byte	0x102
 2199 00fb 08       		.uleb128 0x8
 2200 00fc E5000000 		.4byte	0xe5
 2201 0100 17       		.byte	0x17
 2202 0101 00       		.byte	0
 2203 0102 09       		.uleb128 0x9
 2204 0103 0C       		.byte	0xc
 2205 0104 05       		.byte	0x5
 2206 0105 30       		.byte	0x30
 2207 0106 6B010000 		.4byte	0x16b
 2208 010a 0A       		.uleb128 0xa
 2209 010b 53656300 		.ascii	"Sec\000"
 2210 010f 05       		.byte	0x5
 2211 0110 32       		.byte	0x32
 2212 0111 81000000 		.4byte	0x81
 2213 0115 00       		.byte	0
 2214 0116 0A       		.uleb128 0xa
 2215 0117 4D696E00 		.ascii	"Min\000"
 2216 011b 05       		.byte	0x5
 2217 011c 33       		.byte	0x33
 2218 011d 81000000 		.4byte	0x81
 2219 0121 01       		.byte	0x1
 2220 0122 0B       		.uleb128 0xb
 2221 0123 2A010000 		.4byte	.LASF22
 2222 0127 05       		.byte	0x5
 2223 0128 34       		.byte	0x34
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 55


 2224 0129 81000000 		.4byte	0x81
 2225 012d 02       		.byte	0x2
 2226 012e 0B       		.uleb128 0xb
 2227 012f 45060000 		.4byte	.LASF23
 2228 0133 05       		.byte	0x5
 2229 0134 35       		.byte	0x35
 2230 0135 81000000 		.4byte	0x81
 2231 0139 03       		.byte	0x3
 2232 013a 0B       		.uleb128 0xb
 2233 013b 9D030000 		.4byte	.LASF24
 2234 013f 05       		.byte	0x5
 2235 0140 36       		.byte	0x36
 2236 0141 81000000 		.4byte	0x81
 2237 0145 04       		.byte	0x4
 2238 0146 0B       		.uleb128 0xb
 2239 0147 4C080000 		.4byte	.LASF25
 2240 014b 05       		.byte	0x5
 2241 014c 37       		.byte	0x37
 2242 014d 8D000000 		.4byte	0x8d
 2243 0151 06       		.byte	0x6
 2244 0152 0B       		.uleb128 0xb
 2245 0153 0D010000 		.4byte	.LASF26
 2246 0157 05       		.byte	0x5
 2247 0158 38       		.byte	0x38
 2248 0159 81000000 		.4byte	0x81
 2249 015d 08       		.byte	0x8
 2250 015e 0B       		.uleb128 0xb
 2251 015f D5050000 		.4byte	.LASF27
 2252 0163 05       		.byte	0x5
 2253 0164 39       		.byte	0x39
 2254 0165 8D000000 		.4byte	0x8d
 2255 0169 0A       		.byte	0xa
 2256 016a 00       		.byte	0
 2257 016b 03       		.uleb128 0x3
 2258 016c 21050000 		.4byte	.LASF28
 2259 0170 05       		.byte	0x5
 2260 0171 3A       		.byte	0x3a
 2261 0172 76010000 		.4byte	0x176
 2262 0176 0C       		.uleb128 0xc
 2263 0177 02010000 		.4byte	0x102
 2264 017b 0D       		.uleb128 0xd
 2265 017c 8101     		.2byte	0x181
 2266 017e 06       		.byte	0x6
 2267 017f 0A       		.byte	0xa
 2268 0180 A9010000 		.4byte	0x1a9
 2269 0184 0B       		.uleb128 0xb
 2270 0185 CB050000 		.4byte	.LASF29
 2271 0189 06       		.byte	0x6
 2272 018a 0C       		.byte	0xc
 2273 018b A9010000 		.4byte	0x1a9
 2274 018f 00       		.byte	0
 2275 0190 0B       		.uleb128 0xb
 2276 0191 C4070000 		.4byte	.LASF30
 2277 0195 06       		.byte	0x6
 2278 0196 0D       		.byte	0xd
 2279 0197 81000000 		.4byte	0x81
 2280 019b 80       		.byte	0x80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 56


 2281 019c 0B       		.uleb128 0xb
 2282 019d 67060000 		.4byte	.LASF31
 2283 01a1 06       		.byte	0x6
 2284 01a2 0F       		.byte	0xf
 2285 01a3 B9010000 		.4byte	0x1b9
 2286 01a7 81       		.byte	0x81
 2287 01a8 00       		.byte	0
 2288 01a9 07       		.uleb128 0x7
 2289 01aa D7000000 		.4byte	0xd7
 2290 01ae B9010000 		.4byte	0x1b9
 2291 01b2 08       		.uleb128 0x8
 2292 01b3 E5000000 		.4byte	0xe5
 2293 01b7 7F       		.byte	0x7f
 2294 01b8 00       		.byte	0
 2295 01b9 07       		.uleb128 0x7
 2296 01ba D7000000 		.4byte	0xd7
 2297 01be C9010000 		.4byte	0x1c9
 2298 01c2 08       		.uleb128 0x8
 2299 01c3 E5000000 		.4byte	0xe5
 2300 01c7 FF       		.byte	0xff
 2301 01c8 00       		.byte	0
 2302 01c9 03       		.uleb128 0x3
 2303 01ca 4F060000 		.4byte	.LASF32
 2304 01ce 06       		.byte	0x6
 2305 01cf 10       		.byte	0x10
 2306 01d0 7B010000 		.4byte	0x17b
 2307 01d4 09       		.uleb128 0x9
 2308 01d5 1A       		.byte	0x1a
 2309 01d6 07       		.byte	0x7
 2310 01d7 10       		.byte	0x10
 2311 01d8 0D020000 		.4byte	0x20d
 2312 01dc 0B       		.uleb128 0xb
 2313 01dd 94020000 		.4byte	.LASF33
 2314 01e1 07       		.byte	0x7
 2315 01e2 11       		.byte	0x11
 2316 01e3 0D020000 		.4byte	0x20d
 2317 01e7 00       		.byte	0
 2318 01e8 0B       		.uleb128 0xb
 2319 01e9 5A070000 		.4byte	.LASF34
 2320 01ed 07       		.byte	0x7
 2321 01ee 12       		.byte	0x12
 2322 01ef B1000000 		.4byte	0xb1
 2323 01f3 16       		.byte	0x16
 2324 01f4 0B       		.uleb128 0xb
 2325 01f5 34030000 		.4byte	.LASF35
 2326 01f9 07       		.byte	0x7
 2327 01fa 13       		.byte	0x13
 2328 01fb 81000000 		.4byte	0x81
 2329 01ff 18       		.byte	0x18
 2330 0200 0B       		.uleb128 0xb
 2331 0201 17000000 		.4byte	.LASF36
 2332 0205 07       		.byte	0x7
 2333 0206 14       		.byte	0x14
 2334 0207 81000000 		.4byte	0x81
 2335 020b 19       		.byte	0x19
 2336 020c 00       		.byte	0
 2337 020d 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 57


 2338 020e B1000000 		.4byte	0xb1
 2339 0212 1D020000 		.4byte	0x21d
 2340 0216 08       		.uleb128 0x8
 2341 0217 E5000000 		.4byte	0xe5
 2342 021b 0A       		.byte	0xa
 2343 021c 00       		.byte	0
 2344 021d 03       		.uleb128 0x3
 2345 021e 82050000 		.4byte	.LASF37
 2346 0222 07       		.byte	0x7
 2347 0223 15       		.byte	0x15
 2348 0224 D4010000 		.4byte	0x1d4
 2349 0228 09       		.uleb128 0x9
 2350 0229 1C       		.byte	0x1c
 2351 022a 08       		.byte	0x8
 2352 022b 14       		.byte	0x14
 2353 022c 85020000 		.4byte	0x285
 2354 0230 0B       		.uleb128 0xb
 2355 0231 8D030000 		.4byte	.LASF38
 2356 0235 08       		.byte	0x8
 2357 0236 15       		.byte	0x15
 2358 0237 C9000000 		.4byte	0xc9
 2359 023b 00       		.byte	0
 2360 023c 0B       		.uleb128 0xb
 2361 023d B0010000 		.4byte	.LASF39
 2362 0241 08       		.byte	0x8
 2363 0242 16       		.byte	0x16
 2364 0243 C9000000 		.4byte	0xc9
 2365 0247 04       		.byte	0x4
 2366 0248 0B       		.uleb128 0xb
 2367 0249 BE010000 		.4byte	.LASF40
 2368 024d 08       		.byte	0x8
 2369 024e 17       		.byte	0x17
 2370 024f C9000000 		.4byte	0xc9
 2371 0253 08       		.byte	0x8
 2372 0254 0B       		.uleb128 0xb
 2373 0255 5E050000 		.4byte	.LASF41
 2374 0259 08       		.byte	0x8
 2375 025a 18       		.byte	0x18
 2376 025b C9000000 		.4byte	0xc9
 2377 025f 0C       		.byte	0xc
 2378 0260 0B       		.uleb128 0xb
 2379 0261 2E080000 		.4byte	.LASF42
 2380 0265 08       		.byte	0x8
 2381 0266 19       		.byte	0x19
 2382 0267 C9000000 		.4byte	0xc9
 2383 026b 10       		.byte	0x10
 2384 026c 0B       		.uleb128 0xb
 2385 026d 9B070000 		.4byte	.LASF43
 2386 0271 08       		.byte	0x8
 2387 0272 1A       		.byte	0x1a
 2388 0273 C9000000 		.4byte	0xc9
 2389 0277 14       		.byte	0x14
 2390 0278 0B       		.uleb128 0xb
 2391 0279 D8060000 		.4byte	.LASF44
 2392 027d 08       		.byte	0x8
 2393 027e 1B       		.byte	0x1b
 2394 027f 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 58


 2395 0283 18       		.byte	0x18
 2396 0284 00       		.byte	0
 2397 0285 03       		.uleb128 0x3
 2398 0286 99080000 		.4byte	.LASF45
 2399 028a 08       		.byte	0x8
 2400 028b 1C       		.byte	0x1c
 2401 028c 28020000 		.4byte	0x228
 2402 0290 09       		.uleb128 0x9
 2403 0291 10       		.byte	0x10
 2404 0292 08       		.byte	0x8
 2405 0293 1E       		.byte	0x1e
 2406 0294 C9020000 		.4byte	0x2c9
 2407 0298 0B       		.uleb128 0xb
 2408 0299 F4020000 		.4byte	.LASF46
 2409 029d 08       		.byte	0x8
 2410 029e 1F       		.byte	0x1f
 2411 029f C9000000 		.4byte	0xc9
 2412 02a3 00       		.byte	0
 2413 02a4 0B       		.uleb128 0xb
 2414 02a5 2B020000 		.4byte	.LASF47
 2415 02a9 08       		.byte	0x8
 2416 02aa 20       		.byte	0x20
 2417 02ab C9000000 		.4byte	0xc9
 2418 02af 04       		.byte	0x4
 2419 02b0 0B       		.uleb128 0xb
 2420 02b1 C7060000 		.4byte	.LASF48
 2421 02b5 08       		.byte	0x8
 2422 02b6 21       		.byte	0x21
 2423 02b7 C9000000 		.4byte	0xc9
 2424 02bb 08       		.byte	0x8
 2425 02bc 0B       		.uleb128 0xb
 2426 02bd 31060000 		.4byte	.LASF49
 2427 02c1 08       		.byte	0x8
 2428 02c2 22       		.byte	0x22
 2429 02c3 C9000000 		.4byte	0xc9
 2430 02c7 0C       		.byte	0xc
 2431 02c8 00       		.byte	0
 2432 02c9 03       		.uleb128 0x3
 2433 02ca 56080000 		.4byte	.LASF50
 2434 02ce 08       		.byte	0x8
 2435 02cf 23       		.byte	0x23
 2436 02d0 90020000 		.4byte	0x290
 2437 02d4 0E       		.uleb128 0xe
 2438 02d5 746D00   		.ascii	"tm\000"
 2439 02d8 24       		.byte	0x24
 2440 02d9 09       		.byte	0x9
 2441 02da 21       		.byte	0x21
 2442 02db 4C030000 		.4byte	0x34c
 2443 02df 0B       		.uleb128 0xb
 2444 02e0 B2070000 		.4byte	.LASF51
 2445 02e4 09       		.byte	0x9
 2446 02e5 23       		.byte	0x23
 2447 02e6 68000000 		.4byte	0x68
 2448 02ea 00       		.byte	0
 2449 02eb 0B       		.uleb128 0xb
 2450 02ec 7E040000 		.4byte	.LASF52
 2451 02f0 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 59


 2452 02f1 24       		.byte	0x24
 2453 02f2 68000000 		.4byte	0x68
 2454 02f6 04       		.byte	0x4
 2455 02f7 0B       		.uleb128 0xb
 2456 02f8 0F000000 		.4byte	.LASF53
 2457 02fc 09       		.byte	0x9
 2458 02fd 25       		.byte	0x25
 2459 02fe 68000000 		.4byte	0x68
 2460 0302 08       		.byte	0x8
 2461 0303 0B       		.uleb128 0xb
 2462 0304 93070000 		.4byte	.LASF54
 2463 0308 09       		.byte	0x9
 2464 0309 26       		.byte	0x26
 2465 030a 68000000 		.4byte	0x68
 2466 030e 0C       		.byte	0xc
 2467 030f 0B       		.uleb128 0xb
 2468 0310 BF020000 		.4byte	.LASF55
 2469 0314 09       		.byte	0x9
 2470 0315 27       		.byte	0x27
 2471 0316 68000000 		.4byte	0x68
 2472 031a 10       		.byte	0x10
 2473 031b 0B       		.uleb128 0xb
 2474 031c E2020000 		.4byte	.LASF56
 2475 0320 09       		.byte	0x9
 2476 0321 28       		.byte	0x28
 2477 0322 68000000 		.4byte	0x68
 2478 0326 14       		.byte	0x14
 2479 0327 0B       		.uleb128 0xb
 2480 0328 DE060000 		.4byte	.LASF57
 2481 032c 09       		.byte	0x9
 2482 032d 29       		.byte	0x29
 2483 032e 68000000 		.4byte	0x68
 2484 0332 18       		.byte	0x18
 2485 0333 0B       		.uleb128 0xb
 2486 0334 A5040000 		.4byte	.LASF58
 2487 0338 09       		.byte	0x9
 2488 0339 2A       		.byte	0x2a
 2489 033a 68000000 		.4byte	0x68
 2490 033e 1C       		.byte	0x1c
 2491 033f 0B       		.uleb128 0xb
 2492 0340 C6030000 		.4byte	.LASF59
 2493 0344 09       		.byte	0x9
 2494 0345 2B       		.byte	0x2b
 2495 0346 68000000 		.4byte	0x68
 2496 034a 20       		.byte	0x20
 2497 034b 00       		.byte	0
 2498 034c 09       		.uleb128 0x9
 2499 034d 2C       		.byte	0x2c
 2500 034e 0A       		.byte	0xa
 2501 034f 14       		.byte	0x14
 2502 0350 79030000 		.4byte	0x379
 2503 0354 0A       		.uleb128 0xa
 2504 0355 6B657900 		.ascii	"key\000"
 2505 0359 0A       		.byte	0xa
 2506 035a 15       		.byte	0x15
 2507 035b 79030000 		.4byte	0x379
 2508 035f 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 60


 2509 0360 0B       		.uleb128 0xb
 2510 0361 D7020000 		.4byte	.LASF60
 2511 0365 0A       		.byte	0xa
 2512 0366 16       		.byte	0x16
 2513 0367 79030000 		.4byte	0x379
 2514 036b 14       		.byte	0x14
 2515 036c 0B       		.uleb128 0xb
 2516 036d DD040000 		.4byte	.LASF61
 2517 0371 0A       		.byte	0xa
 2518 0372 17       		.byte	0x17
 2519 0373 BD000000 		.4byte	0xbd
 2520 0377 28       		.byte	0x28
 2521 0378 00       		.byte	0
 2522 0379 07       		.uleb128 0x7
 2523 037a D7000000 		.4byte	0xd7
 2524 037e 89030000 		.4byte	0x389
 2525 0382 08       		.uleb128 0x8
 2526 0383 E5000000 		.4byte	0xe5
 2527 0387 13       		.byte	0x13
 2528 0388 00       		.byte	0
 2529 0389 03       		.uleb128 0x3
 2530 038a 1D030000 		.4byte	.LASF62
 2531 038e 0A       		.byte	0xa
 2532 038f 19       		.byte	0x19
 2533 0390 4C030000 		.4byte	0x34c
 2534 0394 09       		.uleb128 0x9
 2535 0395 3C       		.byte	0x3c
 2536 0396 0B       		.byte	0xb
 2537 0397 37       		.byte	0x37
 2538 0398 C1030000 		.4byte	0x3c1
 2539 039c 0B       		.uleb128 0xb
 2540 039d 8C070000 		.4byte	.LASF63
 2541 03a1 0B       		.byte	0xb
 2542 03a2 38       		.byte	0x38
 2543 03a3 79030000 		.4byte	0x379
 2544 03a7 00       		.byte	0
 2545 03a8 0B       		.uleb128 0xb
 2546 03a9 8B020000 		.4byte	.LASF64
 2547 03ad 0B       		.byte	0xb
 2548 03ae 39       		.byte	0x39
 2549 03af 79030000 		.4byte	0x379
 2550 03b3 14       		.byte	0x14
 2551 03b4 0B       		.uleb128 0xb
 2552 03b5 62060000 		.4byte	.LASF65
 2553 03b9 0B       		.byte	0xb
 2554 03ba 3A       		.byte	0x3a
 2555 03bb 79030000 		.4byte	0x379
 2556 03bf 28       		.byte	0x28
 2557 03c0 00       		.byte	0
 2558 03c1 03       		.uleb128 0x3
 2559 03c2 F6010000 		.4byte	.LASF66
 2560 03c6 0B       		.byte	0xb
 2561 03c7 3C       		.byte	0x3c
 2562 03c8 94030000 		.4byte	0x394
 2563 03cc 09       		.uleb128 0x9
 2564 03cd 20       		.byte	0x20
 2565 03ce 0B       		.byte	0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 61


 2566 03cf 3E       		.byte	0x3e
 2567 03d0 35040000 		.4byte	0x435
 2568 03d4 0B       		.uleb128 0xb
 2569 03d5 03020000 		.4byte	.LASF67
 2570 03d9 0B       		.byte	0xb
 2571 03da 3F       		.byte	0x3f
 2572 03db 68000000 		.4byte	0x68
 2573 03df 00       		.byte	0
 2574 03e0 0A       		.uleb128 0xa
 2575 03e1 62657200 		.ascii	"ber\000"
 2576 03e5 0B       		.byte	0xb
 2577 03e6 40       		.byte	0x40
 2578 03e7 68000000 		.4byte	0x68
 2579 03eb 04       		.byte	0x4
 2580 03ec 0B       		.uleb128 0xb
 2581 03ed 40060000 		.4byte	.LASF68
 2582 03f1 0B       		.byte	0xb
 2583 03f2 41       		.byte	0x41
 2584 03f3 68000000 		.4byte	0x68
 2585 03f7 08       		.byte	0x8
 2586 03f8 0B       		.uleb128 0xb
 2587 03f9 7A010000 		.4byte	.LASF69
 2588 03fd 0B       		.byte	0xb
 2589 03fe 42       		.byte	0x42
 2590 03ff 68000000 		.4byte	0x68
 2591 0403 0C       		.byte	0xc
 2592 0404 0B       		.uleb128 0xb
 2593 0405 0B060000 		.4byte	.LASF70
 2594 0409 0B       		.byte	0xb
 2595 040a 43       		.byte	0x43
 2596 040b 68000000 		.4byte	0x68
 2597 040f 10       		.byte	0x10
 2598 0410 0B       		.uleb128 0xb
 2599 0411 06060000 		.4byte	.LASF71
 2600 0415 0B       		.byte	0xb
 2601 0416 44       		.byte	0x44
 2602 0417 68000000 		.4byte	0x68
 2603 041b 14       		.byte	0x14
 2604 041c 0B       		.uleb128 0xb
 2605 041d 8D010000 		.4byte	.LASF72
 2606 0421 0B       		.byte	0xb
 2607 0422 45       		.byte	0x45
 2608 0423 68000000 		.4byte	0x68
 2609 0427 18       		.byte	0x18
 2610 0428 0B       		.uleb128 0xb
 2611 0429 12020000 		.4byte	.LASF73
 2612 042d 0B       		.byte	0xb
 2613 042e 46       		.byte	0x46
 2614 042f 68000000 		.4byte	0x68
 2615 0433 1C       		.byte	0x1c
 2616 0434 00       		.byte	0
 2617 0435 03       		.uleb128 0x3
 2618 0436 B9060000 		.4byte	.LASF74
 2619 043a 0B       		.byte	0xb
 2620 043b 48       		.byte	0x48
 2621 043c CC030000 		.4byte	0x3cc
 2622 0440 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 62


 2623 0441 05       		.byte	0x5
 2624 0442 0B       		.byte	0xb
 2625 0443 54       		.byte	0x54
 2626 0444 85040000 		.4byte	0x485
 2627 0448 0B       		.uleb128 0xb
 2628 0449 64020000 		.4byte	.LASF75
 2629 044d 0B       		.byte	0xb
 2630 044e 56       		.byte	0x56
 2631 044f 81000000 		.4byte	0x81
 2632 0453 00       		.byte	0
 2633 0454 0B       		.uleb128 0xb
 2634 0455 A7050000 		.4byte	.LASF76
 2635 0459 0B       		.byte	0xb
 2636 045a 58       		.byte	0x58
 2637 045b 85040000 		.4byte	0x485
 2638 045f 01       		.byte	0x1
 2639 0460 0B       		.uleb128 0xb
 2640 0461 3E070000 		.4byte	.LASF77
 2641 0465 0B       		.byte	0xb
 2642 0466 5A       		.byte	0x5a
 2643 0467 81000000 		.4byte	0x81
 2644 046b 02       		.byte	0x2
 2645 046c 0B       		.uleb128 0xb
 2646 046d 27060000 		.4byte	.LASF78
 2647 0471 0B       		.byte	0xb
 2648 0472 5C       		.byte	0x5c
 2649 0473 81000000 		.4byte	0x81
 2650 0477 03       		.byte	0x3
 2651 0478 0B       		.uleb128 0xb
 2652 0479 C6020000 		.4byte	.LASF79
 2653 047d 0B       		.byte	0xb
 2654 047e 5F       		.byte	0x5f
 2655 047f 81000000 		.4byte	0x81
 2656 0483 04       		.byte	0x4
 2657 0484 00       		.byte	0
 2658 0485 02       		.uleb128 0x2
 2659 0486 01       		.byte	0x1
 2660 0487 02       		.byte	0x2
 2661 0488 DA050000 		.4byte	.LASF80
 2662 048c 03       		.uleb128 0x3
 2663 048d 4B040000 		.4byte	.LASF81
 2664 0491 0B       		.byte	0xb
 2665 0492 61       		.byte	0x61
 2666 0493 40040000 		.4byte	0x440
 2667 0497 09       		.uleb128 0x9
 2668 0498 06       		.byte	0x6
 2669 0499 0C       		.byte	0xc
 2670 049a 2E       		.byte	0x2e
 2671 049b D0040000 		.4byte	0x4d0
 2672 049f 0B       		.uleb128 0xb
 2673 04a0 A7020000 		.4byte	.LASF82
 2674 04a4 0C       		.byte	0xc
 2675 04a5 30       		.byte	0x30
 2676 04a6 8D000000 		.4byte	0x8d
 2677 04aa 00       		.byte	0
 2678 04ab 0B       		.uleb128 0xb
 2679 04ac 18080000 		.4byte	.LASF83
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 63


 2680 04b0 0C       		.byte	0xc
 2681 04b1 31       		.byte	0x31
 2682 04b2 B1000000 		.4byte	0xb1
 2683 04b6 02       		.byte	0x2
 2684 04b7 0B       		.uleb128 0xb
 2685 04b8 0A080000 		.4byte	.LASF84
 2686 04bc 0C       		.byte	0xc
 2687 04bd 32       		.byte	0x32
 2688 04be 81000000 		.4byte	0x81
 2689 04c2 04       		.byte	0x4
 2690 04c3 0B       		.uleb128 0xb
 2691 04c4 51000000 		.4byte	.LASF85
 2692 04c8 0C       		.byte	0xc
 2693 04c9 33       		.byte	0x33
 2694 04ca 81000000 		.4byte	0x81
 2695 04ce 05       		.byte	0x5
 2696 04cf 00       		.byte	0
 2697 04d0 03       		.uleb128 0x3
 2698 04d1 25020000 		.4byte	.LASF86
 2699 04d5 0C       		.byte	0xc
 2700 04d6 36       		.byte	0x36
 2701 04d7 DB040000 		.4byte	0x4db
 2702 04db 0C       		.uleb128 0xc
 2703 04dc 97040000 		.4byte	0x497
 2704 04e0 09       		.uleb128 0x9
 2705 04e1 1C       		.byte	0x1c
 2706 04e2 0C       		.byte	0xc
 2707 04e3 39       		.byte	0x39
 2708 04e4 01050000 		.4byte	0x501
 2709 04e8 0B       		.uleb128 0xb
 2710 04e9 CF030000 		.4byte	.LASF87
 2711 04ed 0C       		.byte	0xc
 2712 04ee 3B       		.byte	0x3b
 2713 04ef 01050000 		.4byte	0x501
 2714 04f3 00       		.byte	0
 2715 04f4 0B       		.uleb128 0xb
 2716 04f5 7C080000 		.4byte	.LASF88
 2717 04f9 0C       		.byte	0xc
 2718 04fa 3C       		.byte	0x3c
 2719 04fb F2000000 		.4byte	0xf2
 2720 04ff 04       		.byte	0x4
 2721 0500 00       		.byte	0
 2722 0501 06       		.uleb128 0x6
 2723 0502 04       		.byte	0x4
 2724 0503 C1030000 		.4byte	0x3c1
 2725 0507 03       		.uleb128 0x3
 2726 0508 40040000 		.4byte	.LASF89
 2727 050c 0C       		.byte	0xc
 2728 050d 3E       		.byte	0x3e
 2729 050e E0040000 		.4byte	0x4e0
 2730 0512 09       		.uleb128 0x9
 2731 0513 68       		.byte	0x68
 2732 0514 0C       		.byte	0xc
 2733 0515 44       		.byte	0x44
 2734 0516 33050000 		.4byte	0x533
 2735 051a 0B       		.uleb128 0xb
 2736 051b DA030000 		.4byte	.LASF90
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 64


 2737 051f 0C       		.byte	0xc
 2738 0520 49       		.byte	0x49
 2739 0521 33050000 		.4byte	0x533
 2740 0525 00       		.byte	0
 2741 0526 0B       		.uleb128 0xb
 2742 0527 BE030000 		.4byte	.LASF91
 2743 052b 0C       		.byte	0xc
 2744 052c 4A       		.byte	0x4a
 2745 052d 68000000 		.4byte	0x68
 2746 0531 64       		.byte	0x64
 2747 0532 00       		.byte	0
 2748 0533 07       		.uleb128 0x7
 2749 0534 D7000000 		.4byte	0xd7
 2750 0538 43050000 		.4byte	0x543
 2751 053c 08       		.uleb128 0x8
 2752 053d E5000000 		.4byte	0xe5
 2753 0541 63       		.byte	0x63
 2754 0542 00       		.byte	0
 2755 0543 03       		.uleb128 0x3
 2756 0544 AD040000 		.4byte	.LASF92
 2757 0548 0C       		.byte	0xc
 2758 0549 50       		.byte	0x50
 2759 054a 12050000 		.4byte	0x512
 2760 054e 0F       		.uleb128 0xf
 2761 054f 69000000 		.4byte	.LASF166
 2762 0553 01       		.byte	0x1
 2763 0554 14       		.byte	0x14
 2764 0555 00000000 		.4byte	.LFB64
 2765 0559 0C000000 		.4byte	.LFE64-.LFB64
 2766 055d 01       		.uleb128 0x1
 2767 055e 9C       		.byte	0x9c
 2768 055f 10       		.uleb128 0x10
 2769 0560 6C080000 		.4byte	.LASF106
 2770 0564 01       		.byte	0x1
 2771 0565 28       		.byte	0x28
 2772 0566 00000000 		.4byte	.LFB65
 2773 056a 2C010000 		.4byte	.LFE65-.LFB65
 2774 056e 01       		.uleb128 0x1
 2775 056f 9C       		.byte	0x9c
 2776 0570 9F050000 		.4byte	0x59f
 2777 0574 11       		.uleb128 0x11
 2778 0575 35070000 		.4byte	.LASF93
 2779 0579 01       		.byte	0x1
 2780 057a 3C       		.byte	0x3c
 2781 057b 9F050000 		.4byte	0x59f
 2782 057f 02       		.uleb128 0x2
 2783 0580 91       		.byte	0x91
 2784 0581 64       		.sleb128 -28
 2785 0582 11       		.uleb128 0x11
 2786 0583 46080000 		.4byte	.LASF94
 2787 0587 01       		.byte	0x1
 2788 0588 59       		.byte	0x59
 2789 0589 AF050000 		.4byte	0x5af
 2790 058d 02       		.uleb128 0x2
 2791 058e 91       		.byte	0x91
 2792 058f 58       		.sleb128 -40
 2793 0590 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 65


 2794 0591 6E030000 		.4byte	.LASF95
 2795 0595 01       		.byte	0x1
 2796 0596 5E       		.byte	0x5e
 2797 0597 81000000 		.4byte	0x81
 2798 059b 02       		.uleb128 0x2
 2799 059c 91       		.byte	0x91
 2800 059d 6F       		.sleb128 -17
 2801 059e 00       		.byte	0
 2802 059f 07       		.uleb128 0x7
 2803 05a0 99000000 		.4byte	0x99
 2804 05a4 AF050000 		.4byte	0x5af
 2805 05a8 08       		.uleb128 0x8
 2806 05a9 E5000000 		.4byte	0xe5
 2807 05ad 01       		.byte	0x1
 2808 05ae 00       		.byte	0
 2809 05af 07       		.uleb128 0x7
 2810 05b0 D7000000 		.4byte	0xd7
 2811 05b4 BF050000 		.4byte	0x5bf
 2812 05b8 08       		.uleb128 0x8
 2813 05b9 E5000000 		.4byte	0xe5
 2814 05bd 09       		.byte	0x9
 2815 05be 00       		.byte	0
 2816 05bf 12       		.uleb128 0x12
 2817 05c0 E7030000 		.4byte	.LASF97
 2818 05c4 01       		.byte	0x1
 2819 05c5 68       		.byte	0x68
 2820 05c6 68000000 		.4byte	0x68
 2821 05ca 00000000 		.4byte	.LFB66
 2822 05ce 64000000 		.4byte	.LFE66-.LFB66
 2823 05d2 01       		.uleb128 0x1
 2824 05d3 9C       		.byte	0x9c
 2825 05d4 E7050000 		.4byte	0x5e7
 2826 05d8 11       		.uleb128 0x11
 2827 05d9 BE050000 		.4byte	.LASF96
 2828 05dd 01       		.byte	0x1
 2829 05de 82       		.byte	0x82
 2830 05df 81000000 		.4byte	0x81
 2831 05e3 02       		.uleb128 0x2
 2832 05e4 91       		.byte	0x91
 2833 05e5 77       		.sleb128 -9
 2834 05e6 00       		.byte	0
 2835 05e7 13       		.uleb128 0x13
 2836 05e8 71070000 		.4byte	.LASF167
 2837 05ec 01       		.byte	0x1
 2838 05ed 92       		.byte	0x92
 2839 05ee 00000000 		.4byte	.LFB67
 2840 05f2 2A000000 		.4byte	.LFE67-.LFB67
 2841 05f6 01       		.uleb128 0x1
 2842 05f7 9C       		.byte	0x9c
 2843 05f8 14       		.uleb128 0x14
 2844 05f9 29030000 		.4byte	.LASF98
 2845 05fd 01       		.byte	0x1
 2846 05fe B7       		.byte	0xb7
 2847 05ff 00000000 		.4byte	.LFB68
 2848 0603 50000000 		.4byte	.LFE68-.LFB68
 2849 0607 01       		.uleb128 0x1
 2850 0608 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 66


 2851 0609 1C060000 		.4byte	0x61c
 2852 060d 15       		.uleb128 0x15
 2853 060e 62040000 		.4byte	.LASF99
 2854 0612 01       		.byte	0x1
 2855 0613 B7       		.byte	0xb7
 2856 0614 81000000 		.4byte	0x81
 2857 0618 02       		.uleb128 0x2
 2858 0619 91       		.byte	0x91
 2859 061a 77       		.sleb128 -9
 2860 061b 00       		.byte	0
 2861 061c 16       		.uleb128 0x16
 2862 061d 61080000 		.4byte	.LASF103
 2863 0621 01       		.byte	0x1
 2864 0622 CE       		.byte	0xce
 2865 0623 81000000 		.4byte	0x81
 2866 0627 00000000 		.4byte	.LFB69
 2867 062b 48000000 		.4byte	.LFE69-.LFB69
 2868 062f 01       		.uleb128 0x1
 2869 0630 9C       		.byte	0x9c
 2870 0631 52060000 		.4byte	0x652
 2871 0635 15       		.uleb128 0x15
 2872 0636 8B040000 		.4byte	.LASF100
 2873 063a 01       		.byte	0x1
 2874 063b CE       		.byte	0xce
 2875 063c 52060000 		.4byte	0x652
 2876 0640 02       		.uleb128 0x2
 2877 0641 91       		.byte	0x91
 2878 0642 74       		.sleb128 -12
 2879 0643 15       		.uleb128 0x15
 2880 0644 62040000 		.4byte	.LASF99
 2881 0648 01       		.byte	0x1
 2882 0649 CE       		.byte	0xce
 2883 064a 81000000 		.4byte	0x81
 2884 064e 02       		.uleb128 0x2
 2885 064f 91       		.byte	0x91
 2886 0650 73       		.sleb128 -13
 2887 0651 00       		.byte	0
 2888 0652 06       		.uleb128 0x6
 2889 0653 04       		.byte	0x4
 2890 0654 D0040000 		.4byte	0x4d0
 2891 0658 17       		.uleb128 0x17
 2892 0659 10060000 		.4byte	.LASF101
 2893 065d 01       		.byte	0x1
 2894 065e E3       		.byte	0xe3
 2895 065f 00000000 		.4byte	.LFB70
 2896 0663 1E000000 		.4byte	.LFE70-.LFB70
 2897 0667 01       		.uleb128 0x1
 2898 0668 9C       		.byte	0x9c
 2899 0669 7C060000 		.4byte	0x67c
 2900 066d 15       		.uleb128 0x15
 2901 066e 6E060000 		.4byte	.LASF102
 2902 0672 01       		.byte	0x1
 2903 0673 E3       		.byte	0xe3
 2904 0674 52060000 		.4byte	0x652
 2905 0678 02       		.uleb128 0x2
 2906 0679 91       		.byte	0x91
 2907 067a 74       		.sleb128 -12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 67


 2908 067b 00       		.byte	0
 2909 067c 18       		.uleb128 0x18
 2910 067d 44050000 		.4byte	.LASF104
 2911 0681 01       		.byte	0x1
 2912 0682 EC       		.byte	0xec
 2913 0683 D0040000 		.4byte	0x4d0
 2914 0687 00000000 		.4byte	.LFB71
 2915 068b 46000000 		.4byte	.LFE71-.LFB71
 2916 068f 01       		.uleb128 0x1
 2917 0690 9C       		.byte	0x9c
 2918 0691 CE060000 		.4byte	0x6ce
 2919 0695 15       		.uleb128 0x15
 2920 0696 A7020000 		.4byte	.LASF82
 2921 069a 01       		.byte	0x1
 2922 069b EC       		.byte	0xec
 2923 069c 8D000000 		.4byte	0x8d
 2924 06a0 02       		.uleb128 0x2
 2925 06a1 91       		.byte	0x91
 2926 06a2 6A       		.sleb128 -22
 2927 06a3 15       		.uleb128 0x15
 2928 06a4 0A080000 		.4byte	.LASF84
 2929 06a8 01       		.byte	0x1
 2930 06a9 EC       		.byte	0xec
 2931 06aa 81000000 		.4byte	0x81
 2932 06ae 02       		.uleb128 0x2
 2933 06af 91       		.byte	0x91
 2934 06b0 69       		.sleb128 -23
 2935 06b1 15       		.uleb128 0x15
 2936 06b2 51000000 		.4byte	.LASF85
 2937 06b6 01       		.byte	0x1
 2938 06b7 EC       		.byte	0xec
 2939 06b8 81000000 		.4byte	0x81
 2940 06bc 02       		.uleb128 0x2
 2941 06bd 91       		.byte	0x91
 2942 06be 68       		.sleb128 -24
 2943 06bf 11       		.uleb128 0x11
 2944 06c0 68070000 		.4byte	.LASF105
 2945 06c4 01       		.byte	0x1
 2946 06c5 EF       		.byte	0xef
 2947 06c6 D0040000 		.4byte	0x4d0
 2948 06ca 02       		.uleb128 0x2
 2949 06cb 91       		.byte	0x91
 2950 06cc 70       		.sleb128 -16
 2951 06cd 00       		.byte	0
 2952 06ce 19       		.uleb128 0x19
 2953 06cf 7D060000 		.4byte	.LASF107
 2954 06d3 01       		.byte	0x1
 2955 06d4 0501     		.2byte	0x105
 2956 06d6 00000000 		.4byte	.LFB72
 2957 06da 2C010000 		.4byte	.LFE72-.LFB72
 2958 06de 01       		.uleb128 0x1
 2959 06df 9C       		.byte	0x9c
 2960 06e0 45070000 		.4byte	0x745
 2961 06e4 1A       		.uleb128 0x1a
 2962 06e5 55010000 		.4byte	.LASF108
 2963 06e9 01       		.byte	0x1
 2964 06ea 0D01     		.2byte	0x10d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 68


 2965 06ec C9010000 		.4byte	0x1c9
 2966 06f0 03       		.uleb128 0x3
 2967 06f1 91       		.byte	0x91
 2968 06f2 EC7C     		.sleb128 -404
 2969 06f4 1A       		.uleb128 0x1a
 2970 06f5 8A080000 		.4byte	.LASF109
 2971 06f9 01       		.byte	0x1
 2972 06fa 1101     		.2byte	0x111
 2973 06fc C9010000 		.4byte	0x1c9
 2974 0700 03       		.uleb128 0x3
 2975 0701 91       		.byte	0x91
 2976 0702 E879     		.sleb128 -792
 2977 0704 1A       		.uleb128 0x1a
 2978 0705 E4070000 		.4byte	.LASF110
 2979 0709 01       		.byte	0x1
 2980 070a 1501     		.2byte	0x115
 2981 070c C9010000 		.4byte	0x1c9
 2982 0710 03       		.uleb128 0x3
 2983 0711 91       		.byte	0x91
 2984 0712 E476     		.sleb128 -1180
 2985 0714 1A       		.uleb128 0x1a
 2986 0715 02010000 		.4byte	.LASF111
 2987 0719 01       		.byte	0x1
 2988 071a 1901     		.2byte	0x119
 2989 071c C9010000 		.4byte	0x1c9
 2990 0720 03       		.uleb128 0x3
 2991 0721 91       		.byte	0x91
 2992 0722 E073     		.sleb128 -1568
 2993 0724 1A       		.uleb128 0x1a
 2994 0725 15040000 		.4byte	.LASF112
 2995 0729 01       		.byte	0x1
 2996 072a 1D01     		.2byte	0x11d
 2997 072c C9010000 		.4byte	0x1c9
 2998 0730 03       		.uleb128 0x3
 2999 0731 91       		.byte	0x91
 3000 0732 DC70     		.sleb128 -1956
 3001 0734 1A       		.uleb128 0x1a
 3002 0735 00000000 		.4byte	.LASF113
 3003 0739 01       		.byte	0x1
 3004 073a 2101     		.2byte	0x121
 3005 073c C9010000 		.4byte	0x1c9
 3006 0740 03       		.uleb128 0x3
 3007 0741 91       		.byte	0x91
 3008 0742 D86D     		.sleb128 -2344
 3009 0744 00       		.byte	0
 3010 0745 1B       		.uleb128 0x1b
 3011 0746 77080000 		.4byte	.LASF168
 3012 074a 01       		.byte	0x1
 3013 074b 2C01     		.2byte	0x12c
 3014 074d 68000000 		.4byte	0x68
 3015 0751 00000000 		.4byte	.LFB73
 3016 0755 1E000000 		.4byte	.LFE73-.LFB73
 3017 0759 01       		.uleb128 0x1
 3018 075a 9C       		.byte	0x9c
 3019 075b 1C       		.uleb128 0x1c
 3020 075c 6E020000 		.4byte	.LASF114
 3021 0760 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 69


 3022 0761 4201     		.2byte	0x142
 3023 0763 81000000 		.4byte	0x81
 3024 0767 00000000 		.4byte	.LFB74
 3025 076b 2C040000 		.4byte	.LFE74-.LFB74
 3026 076f 01       		.uleb128 0x1
 3027 0770 9C       		.byte	0x9c
 3028 0771 B5080000 		.4byte	0x8b5
 3029 0775 1D       		.uleb128 0x1d
 3030 0776 62000000 		.4byte	.LBB2
 3031 077a B4030000 		.4byte	.LBE2-.LBB2
 3032 077e 1A       		.uleb128 0x1a
 3033 077f 57050000 		.4byte	.LASF115
 3034 0783 01       		.byte	0x1
 3035 0784 7201     		.2byte	0x172
 3036 0786 79030000 		.4byte	0x379
 3037 078a 02       		.uleb128 0x2
 3038 078b 91       		.byte	0x91
 3039 078c 48       		.sleb128 -56
 3040 078d 1A       		.uleb128 0x1a
 3041 078e 46020000 		.4byte	.LASF116
 3042 0792 01       		.byte	0x1
 3043 0793 7701     		.2byte	0x177
 3044 0795 79030000 		.4byte	0x379
 3045 0799 03       		.uleb128 0x3
 3046 079a 91       		.byte	0x91
 3047 079b B47F     		.sleb128 -76
 3048 079d 1A       		.uleb128 0x1a
 3049 079e 7A030000 		.4byte	.LASF117
 3050 07a2 01       		.byte	0x1
 3051 07a3 8A01     		.2byte	0x18a
 3052 07a5 8D000000 		.4byte	0x8d
 3053 07a9 02       		.uleb128 0x2
 3054 07aa 91       		.byte	0x91
 3055 07ab 66       		.sleb128 -26
 3056 07ac 1A       		.uleb128 0x1a
 3057 07ad 00040000 		.4byte	.LASF118
 3058 07b1 01       		.byte	0x1
 3059 07b2 8B01     		.2byte	0x18b
 3060 07b4 79030000 		.4byte	0x379
 3061 07b8 03       		.uleb128 0x3
 3062 07b9 91       		.byte	0x91
 3063 07ba A07F     		.sleb128 -96
 3064 07bc 1A       		.uleb128 0x1a
 3065 07bd 20070000 		.4byte	.LASF119
 3066 07c1 01       		.byte	0x1
 3067 07c2 A001     		.2byte	0x1a0
 3068 07c4 B5080000 		.4byte	0x8b5
 3069 07c8 03       		.uleb128 0x3
 3070 07c9 91       		.byte	0x91
 3071 07ca B875     		.sleb128 -1352
 3072 07cc 1A       		.uleb128 0x1a
 3073 07cd C4070000 		.4byte	.LASF30
 3074 07d1 01       		.byte	0x1
 3075 07d2 A101     		.2byte	0x1a1
 3076 07d4 81000000 		.4byte	0x81
 3077 07d8 02       		.uleb128 0x2
 3078 07d9 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 70


 3079 07da 65       		.sleb128 -27
 3080 07db 1A       		.uleb128 0x1a
 3081 07dc F2060000 		.4byte	.LASF120
 3082 07e0 01       		.byte	0x1
 3083 07e1 A801     		.2byte	0x1a8
 3084 07e3 EC000000 		.4byte	0xec
 3085 07e7 02       		.uleb128 0x2
 3086 07e8 91       		.byte	0x91
 3087 07e9 6C       		.sleb128 -20
 3088 07ea 1A       		.uleb128 0x1a
 3089 07eb 72010000 		.4byte	.LASF121
 3090 07ef 01       		.byte	0x1
 3091 07f0 AC01     		.2byte	0x1ac
 3092 07f2 A5000000 		.4byte	0xa5
 3093 07f6 02       		.uleb128 0x2
 3094 07f7 91       		.byte	0x91
 3095 07f8 64       		.sleb128 -28
 3096 07f9 1A       		.uleb128 0x1a
 3097 07fa 77020000 		.4byte	.LASF122
 3098 07fe 01       		.byte	0x1
 3099 07ff DD01     		.2byte	0x1dd
 3100 0801 4C000000 		.4byte	0x4c
 3101 0805 02       		.uleb128 0x2
 3102 0806 91       		.byte	0x91
 3103 0807 5C       		.sleb128 -36
 3104 0808 1E       		.uleb128 0x1e
 3105 0809 CE000000 		.4byte	.LBB3
 3106 080d 2C000000 		.4byte	.LBE3-.LBB3
 3107 0811 35080000 		.4byte	0x835
 3108 0815 1A       		.uleb128 0x1a
 3109 0816 A9060000 		.4byte	.LASF123
 3110 081a 01       		.byte	0x1
 3111 081b 7F01     		.2byte	0x17f
 3112 081d 8D000000 		.4byte	0x8d
 3113 0821 02       		.uleb128 0x2
 3114 0822 91       		.byte	0x91
 3115 0823 68       		.sleb128 -24
 3116 0824 1A       		.uleb128 0x1a
 3117 0825 E4010000 		.4byte	.LASF124
 3118 0829 01       		.byte	0x1
 3119 082a 8001     		.2byte	0x180
 3120 082c 79030000 		.4byte	0x379
 3121 0830 03       		.uleb128 0x3
 3122 0831 91       		.byte	0x91
 3123 0832 8C7F     		.sleb128 -116
 3124 0834 00       		.byte	0
 3125 0835 1E       		.uleb128 0x1e
 3126 0836 FC000000 		.4byte	.LBB4
 3127 083a 20000000 		.4byte	.LBE4-.LBB4
 3128 083e 53080000 		.4byte	0x853
 3129 0842 1A       		.uleb128 0x1a
 3130 0843 E4010000 		.4byte	.LASF124
 3131 0847 01       		.byte	0x1
 3132 0848 8401     		.2byte	0x184
 3133 084a 79030000 		.4byte	0x379
 3134 084e 03       		.uleb128 0x3
 3135 084f 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 71


 3136 0850 F87E     		.sleb128 -136
 3137 0852 00       		.byte	0
 3138 0853 1E       		.uleb128 0x1e
 3139 0854 3C020000 		.4byte	.LBB5
 3140 0858 BC000000 		.4byte	.LBE5-.LBB5
 3141 085c 8A080000 		.4byte	0x88a
 3142 0860 1A       		.uleb128 0x1a
 3143 0861 50050000 		.4byte	.LASF125
 3144 0865 01       		.byte	0x1
 3145 0866 B101     		.2byte	0x1b1
 3146 0868 A5000000 		.4byte	0xa5
 3147 086c 02       		.uleb128 0x2
 3148 086d 91       		.byte	0x91
 3149 086e 6B       		.sleb128 -21
 3150 086f 1D       		.uleb128 0x1d
 3151 0870 44020000 		.4byte	.LBB6
 3152 0874 9A000000 		.4byte	.LBE6-.LBB6
 3153 0878 1A       		.uleb128 0x1a
 3154 0879 47030000 		.4byte	.LASF126
 3155 087d 01       		.byte	0x1
 3156 087e B301     		.2byte	0x1b3
 3157 0880 C5080000 		.4byte	0x8c5
 3158 0884 03       		.uleb128 0x3
 3159 0885 91       		.byte	0x91
 3160 0886 8077     		.sleb128 -1152
 3161 0888 00       		.byte	0
 3162 0889 00       		.byte	0
 3163 088a 1D       		.uleb128 0x1d
 3164 088b 12030000 		.4byte	.LBB7
 3165 088f 36000000 		.4byte	.LBE7-.LBB7
 3166 0893 1A       		.uleb128 0x1a
 3167 0894 54020000 		.4byte	.LASF127
 3168 0898 01       		.byte	0x1
 3169 0899 D401     		.2byte	0x1d4
 3170 089b 68000000 		.4byte	0x68
 3171 089f 02       		.uleb128 0x2
 3172 08a0 91       		.byte	0x91
 3173 08a1 60       		.sleb128 -32
 3174 08a2 1A       		.uleb128 0x1a
 3175 08a3 1B060000 		.4byte	.LASF128
 3176 08a7 01       		.byte	0x1
 3177 08a8 D501     		.2byte	0x1d5
 3178 08aa AF050000 		.4byte	0x5af
 3179 08ae 03       		.uleb128 0x3
 3180 08af 91       		.byte	0x91
 3181 08b0 EC7E     		.sleb128 -148
 3182 08b2 00       		.byte	0
 3183 08b3 00       		.byte	0
 3184 08b4 00       		.byte	0
 3185 08b5 07       		.uleb128 0x7
 3186 08b6 D7000000 		.4byte	0xd7
 3187 08ba C5080000 		.4byte	0x8c5
 3188 08be 08       		.uleb128 0x8
 3189 08bf E5000000 		.4byte	0xe5
 3190 08c3 C7       		.byte	0xc7
 3191 08c4 00       		.byte	0
 3192 08c5 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 72


 3193 08c6 D7000000 		.4byte	0xd7
 3194 08ca D6080000 		.4byte	0x8d6
 3195 08ce 1F       		.uleb128 0x1f
 3196 08cf E5000000 		.4byte	0xe5
 3197 08d3 E803     		.2byte	0x3e8
 3198 08d5 00       		.byte	0
 3199 08d6 1C       		.uleb128 0x1c
 3200 08d7 91050000 		.4byte	.LASF129
 3201 08db 01       		.byte	0x1
 3202 08dc F201     		.2byte	0x1f2
 3203 08de 81000000 		.4byte	0x81
 3204 08e2 00000000 		.4byte	.LFB75
 3205 08e6 44000000 		.4byte	.LFE75-.LFB75
 3206 08ea 01       		.uleb128 0x1
 3207 08eb 9C       		.byte	0x9c
 3208 08ec 0A090000 		.4byte	0x90a
 3209 08f0 1D       		.uleb128 0x1d
 3210 08f1 20000000 		.4byte	.LBB8
 3211 08f5 1A000000 		.4byte	.LBE8-.LBB8
 3212 08f9 1A       		.uleb128 0x1a
 3213 08fa 77020000 		.4byte	.LASF122
 3214 08fe 01       		.byte	0x1
 3215 08ff FD01     		.2byte	0x1fd
 3216 0901 4C000000 		.4byte	0x4c
 3217 0905 02       		.uleb128 0x2
 3218 0906 91       		.byte	0x91
 3219 0907 74       		.sleb128 -12
 3220 0908 00       		.byte	0
 3221 0909 00       		.byte	0
 3222 090a 1C       		.uleb128 0x1c
 3223 090b A8030000 		.4byte	.LASF130
 3224 090f 01       		.byte	0x1
 3225 0910 1202     		.2byte	0x212
 3226 0912 81000000 		.4byte	0x81
 3227 0916 00000000 		.4byte	.LFB76
 3228 091a 70020000 		.4byte	.LFE76-.LFB76
 3229 091e 01       		.uleb128 0x1
 3230 091f 9C       		.byte	0x9c
 3231 0920 9B090000 		.4byte	0x99b
 3232 0924 1A       		.uleb128 0x1a
 3233 0925 DD040000 		.4byte	.LASF61
 3234 0929 01       		.byte	0x1
 3235 092a 1502     		.2byte	0x215
 3236 092c 4C000000 		.4byte	0x4c
 3237 0930 02       		.uleb128 0x2
 3238 0931 91       		.byte	0x91
 3239 0932 6C       		.sleb128 -20
 3240 0933 1A       		.uleb128 0x1a
 3241 0934 F8060000 		.4byte	.LASF131
 3242 0938 01       		.byte	0x1
 3243 0939 1602     		.2byte	0x216
 3244 093b 9B090000 		.4byte	0x99b
 3245 093f 02       		.uleb128 0x2
 3246 0940 91       		.byte	0x91
 3247 0941 4C       		.sleb128 -52
 3248 0942 1A       		.uleb128 0x1a
 3249 0943 D7020000 		.4byte	.LASF60
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 73


 3250 0947 01       		.byte	0x1
 3251 0948 1A02     		.2byte	0x21a
 3252 094a 79030000 		.4byte	0x379
 3253 094e 03       		.uleb128 0x3
 3254 094f 91       		.byte	0x91
 3255 0950 B87F     		.sleb128 -72
 3256 0952 1A       		.uleb128 0x1a
 3257 0953 52030000 		.4byte	.LASF132
 3258 0957 01       		.byte	0x1
 3259 0958 3802     		.2byte	0x238
 3260 095a 85020000 		.4byte	0x285
 3261 095e 03       		.uleb128 0x3
 3262 095f 91       		.byte	0x91
 3263 0960 9C7F     		.sleb128 -100
 3264 0962 1E       		.uleb128 0x1e
 3265 0963 22000000 		.4byte	.LBB9
 3266 0967 78000000 		.4byte	.LBE9-.LBB9
 3267 096b 80090000 		.4byte	0x980
 3268 096f 1A       		.uleb128 0x1a
 3269 0970 4B070000 		.4byte	.LASF133
 3270 0974 01       		.byte	0x1
 3271 0975 2002     		.2byte	0x220
 3272 0977 1D020000 		.4byte	0x21d
 3273 097b 03       		.uleb128 0x3
 3274 097c 91       		.byte	0x91
 3275 097d 807F     		.sleb128 -128
 3276 097f 00       		.byte	0
 3277 0980 1D       		.uleb128 0x1d
 3278 0981 1E010000 		.4byte	.LBB10
 3279 0985 EC000000 		.4byte	.LBE10-.LBB10
 3280 0989 1A       		.uleb128 0x1a
 3281 098a B9070000 		.4byte	.LASF134
 3282 098e 01       		.byte	0x1
 3283 098f 5302     		.2byte	0x253
 3284 0991 C9020000 		.4byte	0x2c9
 3285 0995 03       		.uleb128 0x3
 3286 0996 91       		.byte	0x91
 3287 0997 F07E     		.sleb128 -144
 3288 0999 00       		.byte	0
 3289 099a 00       		.byte	0
 3290 099b 07       		.uleb128 0x7
 3291 099c D7000000 		.4byte	0xd7
 3292 09a0 AB090000 		.4byte	0x9ab
 3293 09a4 08       		.uleb128 0x8
 3294 09a5 E5000000 		.4byte	0xe5
 3295 09a9 1F       		.byte	0x1f
 3296 09aa 00       		.byte	0
 3297 09ab 20       		.uleb128 0x20
 3298 09ac 15030000 		.4byte	.LASF135
 3299 09b0 01       		.byte	0x1
 3300 09b1 7902     		.2byte	0x279
 3301 09b3 81000000 		.4byte	0x81
 3302 09b7 00000000 		.4byte	.LFB77
 3303 09bb 74000000 		.4byte	.LFE77-.LFB77
 3304 09bf 01       		.uleb128 0x1
 3305 09c0 9C       		.byte	0x9c
 3306 09c1 F1090000 		.4byte	0x9f1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 74


 3307 09c5 21       		.uleb128 0x21
 3308 09c6 DD040000 		.4byte	.LASF61
 3309 09ca 01       		.byte	0x1
 3310 09cb 7902     		.2byte	0x279
 3311 09cd 4C000000 		.4byte	0x4c
 3312 09d1 02       		.uleb128 0x2
 3313 09d2 91       		.byte	0x91
 3314 09d3 64       		.sleb128 -28
 3315 09d4 22       		.uleb128 0x22
 3316 09d5 7400     		.ascii	"t\000"
 3317 09d7 01       		.byte	0x1
 3318 09d8 8002     		.2byte	0x280
 3319 09da F1090000 		.4byte	0x9f1
 3320 09de 02       		.uleb128 0x2
 3321 09df 91       		.byte	0x91
 3322 09e0 74       		.sleb128 -12
 3323 09e1 1A       		.uleb128 0x1a
 3324 09e2 BC040000 		.4byte	.LASF136
 3325 09e6 01       		.byte	0x1
 3326 09e7 8502     		.2byte	0x285
 3327 09e9 6B010000 		.4byte	0x16b
 3328 09ed 02       		.uleb128 0x2
 3329 09ee 91       		.byte	0x91
 3330 09ef 68       		.sleb128 -24
 3331 09f0 00       		.byte	0
 3332 09f1 06       		.uleb128 0x6
 3333 09f2 04       		.byte	0x4
 3334 09f3 D4020000 		.4byte	0x2d4
 3335 09f7 20       		.uleb128 0x20
 3336 09f8 B6020000 		.4byte	.LASF137
 3337 09fc 01       		.byte	0x1
 3338 09fd A202     		.2byte	0x2a2
 3339 09ff 81000000 		.4byte	0x81
 3340 0a03 00000000 		.4byte	.LFB78
 3341 0a07 38010000 		.4byte	.LFE78-.LFB78
 3342 0a0b 01       		.uleb128 0x1
 3343 0a0c 9C       		.byte	0x9c
 3344 0a0d 700A0000 		.4byte	0xa70
 3345 0a11 21       		.uleb128 0x21
 3346 0a12 DD020000 		.4byte	.LASF138
 3347 0a16 01       		.byte	0x1
 3348 0a17 A202     		.2byte	0x2a2
 3349 0a19 EC000000 		.4byte	0xec
 3350 0a1d 03       		.uleb128 0x3
 3351 0a1e 91       		.byte	0x91
 3352 0a1f 9C7E     		.sleb128 -228
 3353 0a21 21       		.uleb128 0x21
 3354 0a22 D2020000 		.4byte	.LASF139
 3355 0a26 01       		.byte	0x1
 3356 0a27 A202     		.2byte	0x2a2
 3357 0a29 68000000 		.4byte	0x68
 3358 0a2d 03       		.uleb128 0x3
 3359 0a2e 91       		.byte	0x91
 3360 0a2f 987E     		.sleb128 -232
 3361 0a31 21       		.uleb128 0x21
 3362 0a32 85040000 		.4byte	.LASF140
 3363 0a36 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 75


 3364 0a37 A202     		.2byte	0x2a2
 3365 0a39 EC000000 		.4byte	0xec
 3366 0a3d 03       		.uleb128 0x3
 3367 0a3e 91       		.byte	0x91
 3368 0a3f 947E     		.sleb128 -236
 3369 0a41 1A       		.uleb128 0x1a
 3370 0a42 D5010000 		.4byte	.LASF141
 3371 0a46 01       		.byte	0x1
 3372 0a47 A402     		.2byte	0x2a4
 3373 0a49 81000000 		.4byte	0x81
 3374 0a4d 02       		.uleb128 0x2
 3375 0a4e 91       		.byte	0x91
 3376 0a4f 77       		.sleb128 -9
 3377 0a50 1A       		.uleb128 0x1a
 3378 0a51 3C000000 		.4byte	.LASF142
 3379 0a55 01       		.byte	0x1
 3380 0a56 AB02     		.2byte	0x2ab
 3381 0a58 700A0000 		.4byte	0xa70
 3382 0a5c 02       		.uleb128 0x2
 3383 0a5d 91       		.byte	0x91
 3384 0a5e 68       		.sleb128 -24
 3385 0a5f 1A       		.uleb128 0x1a
 3386 0a60 20070000 		.4byte	.LASF119
 3387 0a64 01       		.byte	0x1
 3388 0a65 B302     		.2byte	0x2b3
 3389 0a67 B5080000 		.4byte	0x8b5
 3390 0a6b 03       		.uleb128 0x3
 3391 0a6c 91       		.byte	0x91
 3392 0a6d A07E     		.sleb128 -224
 3393 0a6f 00       		.byte	0
 3394 0a70 07       		.uleb128 0x7
 3395 0a71 D7000000 		.4byte	0xd7
 3396 0a75 800A0000 		.4byte	0xa80
 3397 0a79 08       		.uleb128 0x8
 3398 0a7a E5000000 		.4byte	0xe5
 3399 0a7e 0B       		.byte	0xb
 3400 0a7f 00       		.byte	0
 3401 0a80 23       		.uleb128 0x23
 3402 0a81 48010000 		.4byte	.LASF143
 3403 0a85 0D       		.byte	0xd
 3404 0a86 1207     		.2byte	0x712
 3405 0a88 8C0A0000 		.4byte	0xa8c
 3406 0a8c 0C       		.uleb128 0xc
 3407 0a8d 76000000 		.4byte	0x76
 3408 0a91 24       		.uleb128 0x24
 3409 0a92 2C000000 		.4byte	.LASF144
 3410 0a96 0A       		.byte	0xa
 3411 0a97 11       		.byte	0x11
 3412 0a98 85040000 		.4byte	0x485
 3413 0a9c 05       		.uleb128 0x5
 3414 0a9d 03       		.byte	0x3
 3415 0a9e 00000000 		.4byte	buffer_overflow
 3416 0aa2 24       		.uleb128 0x24
 3417 0aa3 6C040000 		.4byte	.LASF145
 3418 0aa7 0A       		.byte	0xa
 3419 0aa8 22       		.byte	0x22
 3420 0aa9 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 76


 3421 0aad 05       		.uleb128 0x5
 3422 0aae 03       		.byte	0x3
 3423 0aaf 00000000 		.4byte	dataPointsInStack
 3424 0ab3 24       		.uleb128 0x24
 3425 0ab4 CB070000 		.4byte	.LASF146
 3426 0ab8 0A       		.byte	0xa
 3427 0ab9 23       		.byte	0x23
 3428 0aba 8D000000 		.4byte	0x8d
 3429 0abe 05       		.uleb128 0x5
 3430 0abf 03       		.byte	0x3
 3431 0ac0 00000000 		.4byte	dataPointsInStackDesired
 3432 0ac4 07       		.uleb128 0x7
 3433 0ac5 89030000 		.4byte	0x389
 3434 0ac9 D40A0000 		.4byte	0xad4
 3435 0acd 08       		.uleb128 0x8
 3436 0ace E5000000 		.4byte	0xe5
 3437 0ad2 95       		.byte	0x95
 3438 0ad3 00       		.byte	0
 3439 0ad4 24       		.uleb128 0x24
 3440 0ad5 B9030000 		.4byte	.LASF147
 3441 0ad9 0A       		.byte	0xa
 3442 0ada 24       		.byte	0x24
 3443 0adb C40A0000 		.4byte	0xac4
 3444 0adf 05       		.uleb128 0x5
 3445 0ae0 03       		.byte	0x3
 3446 0ae1 00000000 		.4byte	data
 3447 0ae5 24       		.uleb128 0x24
 3448 0ae6 2F010000 		.4byte	.LASF148
 3449 0aea 0B       		.byte	0xb
 3450 0aeb 21       		.byte	0x21
 3451 0aec 81000000 		.4byte	0x81
 3452 0af0 05       		.uleb128 0x5
 3453 0af1 03       		.byte	0x3
 3454 0af2 00000000 		.4byte	modem_state
 3455 0af6 24       		.uleb128 0x24
 3456 0af7 29040000 		.4byte	.LASF149
 3457 0afb 0B       		.byte	0xb
 3458 0afc 64       		.byte	0x64
 3459 0afd BD000000 		.4byte	0xbd
 3460 0b01 05       		.uleb128 0x5
 3461 0b02 03       		.byte	0x3
 3462 0b03 00000000 		.4byte	modem_start_time_stamp
 3463 0b07 24       		.uleb128 0x24
 3464 0b08 CF030000 		.4byte	.LASF87
 3465 0b0c 0B       		.byte	0xb
 3466 0b0d 65       		.byte	0x65
 3467 0b0e C1030000 		.4byte	0x3c1
 3468 0b12 05       		.uleb128 0x5
 3469 0b13 03       		.byte	0x3
 3470 0b14 00000000 		.4byte	modem_info
 3471 0b18 24       		.uleb128 0x24
 3472 0b19 09070000 		.4byte	.LASF150
 3473 0b1d 0B       		.byte	0xb
 3474 0b1e 66       		.byte	0x66
 3475 0b1f 35040000 		.4byte	0x435
 3476 0b23 05       		.uleb128 0x5
 3477 0b24 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 77


 3478 0b25 00000000 		.4byte	modem_stats
 3479 0b29 24       		.uleb128 0x24
 3480 0b2a 2F050000 		.4byte	.LASF151
 3481 0b2e 0B       		.byte	0xb
 3482 0b2f 67       		.byte	0x67
 3483 0b30 8C040000 		.4byte	0x48c
 3484 0b34 05       		.uleb128 0x5
 3485 0b35 03       		.byte	0x3
 3486 0b36 00000000 		.4byte	updatable_parameters
 3487 0b3a 07       		.uleb128 0x7
 3488 0b3b D7000000 		.4byte	0xd7
 3489 0b3f 4B0B0000 		.4byte	0xb4b
 3490 0b43 1F       		.uleb128 0x1f
 3491 0b44 E5000000 		.4byte	0xe5
 3492 0b48 0F27     		.2byte	0x270f
 3493 0b4a 00       		.byte	0
 3494 0b4b 24       		.uleb128 0x24
 3495 0b4c 6F050000 		.4byte	.LASF152
 3496 0b50 0C       		.byte	0xc
 3497 0b51 18       		.byte	0x18
 3498 0b52 3A0B0000 		.4byte	0xb3a
 3499 0b56 05       		.uleb128 0x5
 3500 0b57 03       		.byte	0x3
 3501 0b58 00000000 		.4byte	http_request
 3502 0b5c 24       		.uleb128 0x24
 3503 0b5d FA070000 		.4byte	.LASF153
 3504 0b61 0C       		.byte	0xc
 3505 0b62 19       		.byte	0x19
 3506 0b63 3A0B0000 		.4byte	0xb3a
 3507 0b67 05       		.uleb128 0x5
 3508 0b68 03       		.byte	0x3
 3509 0b69 00000000 		.4byte	http_body
 3510 0b6d 24       		.uleb128 0x24
 3511 0b6e 15070000 		.4byte	.LASF154
 3512 0b72 0C       		.byte	0xc
 3513 0b73 1A       		.byte	0x1a
 3514 0b74 B5080000 		.4byte	0x8b5
 3515 0b78 05       		.uleb128 0x5
 3516 0b79 03       		.byte	0x3
 3517 0b7a 00000000 		.4byte	http_route
 3518 0b7e 24       		.uleb128 0x24
 3519 0b7f 56060000 		.4byte	.LASF155
 3520 0b83 0C       		.byte	0xc
 3521 0b84 41       		.byte	0x41
 3522 0b85 07050000 		.4byte	0x507
 3523 0b89 05       		.uleb128 0x5
 3524 0b8a 03       		.byte	0x3
 3525 0b8b 00000000 		.4byte	system_info
 3526 0b8f 24       		.uleb128 0x24
 3527 0b90 F6050000 		.4byte	.LASF156
 3528 0b94 0C       		.byte	0xc
 3529 0b95 53       		.byte	0x53
 3530 0b96 43050000 		.4byte	0x543
 3531 0b9a 05       		.uleb128 0x5
 3532 0b9b 03       		.byte	0x3
 3533 0b9c 00000000 		.4byte	system_settings
 3534 0ba0 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 78


 3535 0ba1 3B010000 		.4byte	.LASF157
 3536 0ba5 0C       		.byte	0xc
 3537 0ba6 6F       		.byte	0x6f
 3538 0ba7 D0040000 		.4byte	0x4d0
 3539 0bab 05       		.uleb128 0x5
 3540 0bac 03       		.byte	0x3
 3541 0bad 00000000 		.4byte	alarmMeasure
 3542 0bb1 24       		.uleb128 0x24
 3543 0bb2 7F010000 		.4byte	.LASF158
 3544 0bb6 0C       		.byte	0xc
 3545 0bb7 70       		.byte	0x70
 3546 0bb8 81000000 		.4byte	0x81
 3547 0bbc 05       		.uleb128 0x5
 3548 0bbd 03       		.byte	0x3
 3549 0bbe 00000000 		.4byte	timeToMeasure
 3550 0bc2 24       		.uleb128 0x24
 3551 0bc3 EA020000 		.4byte	.LASF159
 3552 0bc7 0C       		.byte	0xc
 3553 0bc8 71       		.byte	0x71
 3554 0bc9 D0040000 		.4byte	0x4d0
 3555 0bcd 05       		.uleb128 0x5
 3556 0bce 03       		.byte	0x3
 3557 0bcf 00000000 		.4byte	alarmSync
 3558 0bd3 24       		.uleb128 0x24
 3559 0bd4 A5010000 		.4byte	.LASF160
 3560 0bd8 0C       		.byte	0xc
 3561 0bd9 72       		.byte	0x72
 3562 0bda 81000000 		.4byte	0x81
 3563 0bde 05       		.uleb128 0x5
 3564 0bdf 03       		.byte	0x3
 3565 0be0 00000000 		.4byte	timeToSync
 3566 0be4 24       		.uleb128 0x24
 3567 0be5 C6040000 		.4byte	.LASF161
 3568 0be9 0C       		.byte	0xc
 3569 0bea 73       		.byte	0x73
 3570 0beb 81000000 		.4byte	0x81
 3571 0bef 05       		.uleb128 0x5
 3572 0bf0 03       		.byte	0x3
 3573 0bf1 00000000 		.4byte	timeToSycnRemoteParams
 3574 0bf5 25       		.uleb128 0x25
 3575 0bf6 68657900 		.ascii	"hey\000"
 3576 0bfa 0C       		.byte	0xc
 3577 0bfb 74       		.byte	0x74
 3578 0bfc 81000000 		.4byte	0x81
 3579 0c00 05       		.uleb128 0x5
 3580 0c01 03       		.byte	0x3
 3581 0c02 00000000 		.4byte	hey
 3582 0c06 07       		.uleb128 0x7
 3583 0c07 D7000000 		.4byte	0xd7
 3584 0c0b 160C0000 		.4byte	0xc16
 3585 0c0f 08       		.uleb128 0x8
 3586 0c10 E5000000 		.4byte	0xe5
 3587 0c14 1D       		.byte	0x1d
 3588 0c15 00       		.byte	0
 3589 0c16 24       		.uleb128 0x24
 3590 0c17 B0050000 		.4byte	.LASF162
 3591 0c1b 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 79


 3592 0c1c 1D       		.byte	0x1d
 3593 0c1d 060C0000 		.4byte	0xc06
 3594 0c21 05       		.uleb128 0x5
 3595 0c22 03       		.byte	0x3
 3596 0c23 00000000 		.4byte	Data_fileName
 3597 0c27 24       		.uleb128 0x24
 3598 0c28 6E030000 		.4byte	.LASF95
 3599 0c2c 01       		.byte	0x1
 3600 0c2d 1E       		.byte	0x1e
 3601 0c2e 81000000 		.4byte	0x81
 3602 0c32 05       		.uleb128 0x5
 3603 0c33 03       		.byte	0x3
 3604 0c34 00000000 		.4byte	try_counter
 3605 0c38 00       		.byte	0
 3606              		.section	.debug_abbrev,"",%progbits
 3607              	.Ldebug_abbrev0:
 3608 0000 01       		.uleb128 0x1
 3609 0001 11       		.uleb128 0x11
 3610 0002 01       		.byte	0x1
 3611 0003 25       		.uleb128 0x25
 3612 0004 0E       		.uleb128 0xe
 3613 0005 13       		.uleb128 0x13
 3614 0006 0B       		.uleb128 0xb
 3615 0007 03       		.uleb128 0x3
 3616 0008 0E       		.uleb128 0xe
 3617 0009 1B       		.uleb128 0x1b
 3618 000a 0E       		.uleb128 0xe
 3619 000b 55       		.uleb128 0x55
 3620 000c 17       		.uleb128 0x17
 3621 000d 11       		.uleb128 0x11
 3622 000e 01       		.uleb128 0x1
 3623 000f 10       		.uleb128 0x10
 3624 0010 17       		.uleb128 0x17
 3625 0011 00       		.byte	0
 3626 0012 00       		.byte	0
 3627 0013 02       		.uleb128 0x2
 3628 0014 24       		.uleb128 0x24
 3629 0015 00       		.byte	0
 3630 0016 0B       		.uleb128 0xb
 3631 0017 0B       		.uleb128 0xb
 3632 0018 3E       		.uleb128 0x3e
 3633 0019 0B       		.uleb128 0xb
 3634 001a 03       		.uleb128 0x3
 3635 001b 0E       		.uleb128 0xe
 3636 001c 00       		.byte	0
 3637 001d 00       		.byte	0
 3638 001e 03       		.uleb128 0x3
 3639 001f 16       		.uleb128 0x16
 3640 0020 00       		.byte	0
 3641 0021 03       		.uleb128 0x3
 3642 0022 0E       		.uleb128 0xe
 3643 0023 3A       		.uleb128 0x3a
 3644 0024 0B       		.uleb128 0xb
 3645 0025 3B       		.uleb128 0x3b
 3646 0026 0B       		.uleb128 0xb
 3647 0027 49       		.uleb128 0x49
 3648 0028 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 80


 3649 0029 00       		.byte	0
 3650 002a 00       		.byte	0
 3651 002b 04       		.uleb128 0x4
 3652 002c 24       		.uleb128 0x24
 3653 002d 00       		.byte	0
 3654 002e 0B       		.uleb128 0xb
 3655 002f 0B       		.uleb128 0xb
 3656 0030 3E       		.uleb128 0x3e
 3657 0031 0B       		.uleb128 0xb
 3658 0032 03       		.uleb128 0x3
 3659 0033 08       		.uleb128 0x8
 3660 0034 00       		.byte	0
 3661 0035 00       		.byte	0
 3662 0036 05       		.uleb128 0x5
 3663 0037 16       		.uleb128 0x16
 3664 0038 00       		.byte	0
 3665 0039 03       		.uleb128 0x3
 3666 003a 0E       		.uleb128 0xe
 3667 003b 3A       		.uleb128 0x3a
 3668 003c 0B       		.uleb128 0xb
 3669 003d 3B       		.uleb128 0x3b
 3670 003e 05       		.uleb128 0x5
 3671 003f 49       		.uleb128 0x49
 3672 0040 13       		.uleb128 0x13
 3673 0041 00       		.byte	0
 3674 0042 00       		.byte	0
 3675 0043 06       		.uleb128 0x6
 3676 0044 0F       		.uleb128 0xf
 3677 0045 00       		.byte	0
 3678 0046 0B       		.uleb128 0xb
 3679 0047 0B       		.uleb128 0xb
 3680 0048 49       		.uleb128 0x49
 3681 0049 13       		.uleb128 0x13
 3682 004a 00       		.byte	0
 3683 004b 00       		.byte	0
 3684 004c 07       		.uleb128 0x7
 3685 004d 01       		.uleb128 0x1
 3686 004e 01       		.byte	0x1
 3687 004f 49       		.uleb128 0x49
 3688 0050 13       		.uleb128 0x13
 3689 0051 01       		.uleb128 0x1
 3690 0052 13       		.uleb128 0x13
 3691 0053 00       		.byte	0
 3692 0054 00       		.byte	0
 3693 0055 08       		.uleb128 0x8
 3694 0056 21       		.uleb128 0x21
 3695 0057 00       		.byte	0
 3696 0058 49       		.uleb128 0x49
 3697 0059 13       		.uleb128 0x13
 3698 005a 2F       		.uleb128 0x2f
 3699 005b 0B       		.uleb128 0xb
 3700 005c 00       		.byte	0
 3701 005d 00       		.byte	0
 3702 005e 09       		.uleb128 0x9
 3703 005f 13       		.uleb128 0x13
 3704 0060 01       		.byte	0x1
 3705 0061 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 81


 3706 0062 0B       		.uleb128 0xb
 3707 0063 3A       		.uleb128 0x3a
 3708 0064 0B       		.uleb128 0xb
 3709 0065 3B       		.uleb128 0x3b
 3710 0066 0B       		.uleb128 0xb
 3711 0067 01       		.uleb128 0x1
 3712 0068 13       		.uleb128 0x13
 3713 0069 00       		.byte	0
 3714 006a 00       		.byte	0
 3715 006b 0A       		.uleb128 0xa
 3716 006c 0D       		.uleb128 0xd
 3717 006d 00       		.byte	0
 3718 006e 03       		.uleb128 0x3
 3719 006f 08       		.uleb128 0x8
 3720 0070 3A       		.uleb128 0x3a
 3721 0071 0B       		.uleb128 0xb
 3722 0072 3B       		.uleb128 0x3b
 3723 0073 0B       		.uleb128 0xb
 3724 0074 49       		.uleb128 0x49
 3725 0075 13       		.uleb128 0x13
 3726 0076 38       		.uleb128 0x38
 3727 0077 0B       		.uleb128 0xb
 3728 0078 00       		.byte	0
 3729 0079 00       		.byte	0
 3730 007a 0B       		.uleb128 0xb
 3731 007b 0D       		.uleb128 0xd
 3732 007c 00       		.byte	0
 3733 007d 03       		.uleb128 0x3
 3734 007e 0E       		.uleb128 0xe
 3735 007f 3A       		.uleb128 0x3a
 3736 0080 0B       		.uleb128 0xb
 3737 0081 3B       		.uleb128 0x3b
 3738 0082 0B       		.uleb128 0xb
 3739 0083 49       		.uleb128 0x49
 3740 0084 13       		.uleb128 0x13
 3741 0085 38       		.uleb128 0x38
 3742 0086 0B       		.uleb128 0xb
 3743 0087 00       		.byte	0
 3744 0088 00       		.byte	0
 3745 0089 0C       		.uleb128 0xc
 3746 008a 35       		.uleb128 0x35
 3747 008b 00       		.byte	0
 3748 008c 49       		.uleb128 0x49
 3749 008d 13       		.uleb128 0x13
 3750 008e 00       		.byte	0
 3751 008f 00       		.byte	0
 3752 0090 0D       		.uleb128 0xd
 3753 0091 13       		.uleb128 0x13
 3754 0092 01       		.byte	0x1
 3755 0093 0B       		.uleb128 0xb
 3756 0094 05       		.uleb128 0x5
 3757 0095 3A       		.uleb128 0x3a
 3758 0096 0B       		.uleb128 0xb
 3759 0097 3B       		.uleb128 0x3b
 3760 0098 0B       		.uleb128 0xb
 3761 0099 01       		.uleb128 0x1
 3762 009a 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 82


 3763 009b 00       		.byte	0
 3764 009c 00       		.byte	0
 3765 009d 0E       		.uleb128 0xe
 3766 009e 13       		.uleb128 0x13
 3767 009f 01       		.byte	0x1
 3768 00a0 03       		.uleb128 0x3
 3769 00a1 08       		.uleb128 0x8
 3770 00a2 0B       		.uleb128 0xb
 3771 00a3 0B       		.uleb128 0xb
 3772 00a4 3A       		.uleb128 0x3a
 3773 00a5 0B       		.uleb128 0xb
 3774 00a6 3B       		.uleb128 0x3b
 3775 00a7 0B       		.uleb128 0xb
 3776 00a8 01       		.uleb128 0x1
 3777 00a9 13       		.uleb128 0x13
 3778 00aa 00       		.byte	0
 3779 00ab 00       		.byte	0
 3780 00ac 0F       		.uleb128 0xf
 3781 00ad 2E       		.uleb128 0x2e
 3782 00ae 00       		.byte	0
 3783 00af 3F       		.uleb128 0x3f
 3784 00b0 19       		.uleb128 0x19
 3785 00b1 03       		.uleb128 0x3
 3786 00b2 0E       		.uleb128 0xe
 3787 00b3 3A       		.uleb128 0x3a
 3788 00b4 0B       		.uleb128 0xb
 3789 00b5 3B       		.uleb128 0x3b
 3790 00b6 0B       		.uleb128 0xb
 3791 00b7 27       		.uleb128 0x27
 3792 00b8 19       		.uleb128 0x19
 3793 00b9 11       		.uleb128 0x11
 3794 00ba 01       		.uleb128 0x1
 3795 00bb 12       		.uleb128 0x12
 3796 00bc 06       		.uleb128 0x6
 3797 00bd 40       		.uleb128 0x40
 3798 00be 18       		.uleb128 0x18
 3799 00bf 9642     		.uleb128 0x2116
 3800 00c1 19       		.uleb128 0x19
 3801 00c2 00       		.byte	0
 3802 00c3 00       		.byte	0
 3803 00c4 10       		.uleb128 0x10
 3804 00c5 2E       		.uleb128 0x2e
 3805 00c6 01       		.byte	0x1
 3806 00c7 3F       		.uleb128 0x3f
 3807 00c8 19       		.uleb128 0x19
 3808 00c9 03       		.uleb128 0x3
 3809 00ca 0E       		.uleb128 0xe
 3810 00cb 3A       		.uleb128 0x3a
 3811 00cc 0B       		.uleb128 0xb
 3812 00cd 3B       		.uleb128 0x3b
 3813 00ce 0B       		.uleb128 0xb
 3814 00cf 11       		.uleb128 0x11
 3815 00d0 01       		.uleb128 0x1
 3816 00d1 12       		.uleb128 0x12
 3817 00d2 06       		.uleb128 0x6
 3818 00d3 40       		.uleb128 0x40
 3819 00d4 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 83


 3820 00d5 9642     		.uleb128 0x2116
 3821 00d7 19       		.uleb128 0x19
 3822 00d8 01       		.uleb128 0x1
 3823 00d9 13       		.uleb128 0x13
 3824 00da 00       		.byte	0
 3825 00db 00       		.byte	0
 3826 00dc 11       		.uleb128 0x11
 3827 00dd 34       		.uleb128 0x34
 3828 00de 00       		.byte	0
 3829 00df 03       		.uleb128 0x3
 3830 00e0 0E       		.uleb128 0xe
 3831 00e1 3A       		.uleb128 0x3a
 3832 00e2 0B       		.uleb128 0xb
 3833 00e3 3B       		.uleb128 0x3b
 3834 00e4 0B       		.uleb128 0xb
 3835 00e5 49       		.uleb128 0x49
 3836 00e6 13       		.uleb128 0x13
 3837 00e7 02       		.uleb128 0x2
 3838 00e8 18       		.uleb128 0x18
 3839 00e9 00       		.byte	0
 3840 00ea 00       		.byte	0
 3841 00eb 12       		.uleb128 0x12
 3842 00ec 2E       		.uleb128 0x2e
 3843 00ed 01       		.byte	0x1
 3844 00ee 3F       		.uleb128 0x3f
 3845 00ef 19       		.uleb128 0x19
 3846 00f0 03       		.uleb128 0x3
 3847 00f1 0E       		.uleb128 0xe
 3848 00f2 3A       		.uleb128 0x3a
 3849 00f3 0B       		.uleb128 0xb
 3850 00f4 3B       		.uleb128 0x3b
 3851 00f5 0B       		.uleb128 0xb
 3852 00f6 49       		.uleb128 0x49
 3853 00f7 13       		.uleb128 0x13
 3854 00f8 11       		.uleb128 0x11
 3855 00f9 01       		.uleb128 0x1
 3856 00fa 12       		.uleb128 0x12
 3857 00fb 06       		.uleb128 0x6
 3858 00fc 40       		.uleb128 0x40
 3859 00fd 18       		.uleb128 0x18
 3860 00fe 9642     		.uleb128 0x2116
 3861 0100 19       		.uleb128 0x19
 3862 0101 01       		.uleb128 0x1
 3863 0102 13       		.uleb128 0x13
 3864 0103 00       		.byte	0
 3865 0104 00       		.byte	0
 3866 0105 13       		.uleb128 0x13
 3867 0106 2E       		.uleb128 0x2e
 3868 0107 00       		.byte	0
 3869 0108 3F       		.uleb128 0x3f
 3870 0109 19       		.uleb128 0x19
 3871 010a 03       		.uleb128 0x3
 3872 010b 0E       		.uleb128 0xe
 3873 010c 3A       		.uleb128 0x3a
 3874 010d 0B       		.uleb128 0xb
 3875 010e 3B       		.uleb128 0x3b
 3876 010f 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 84


 3877 0110 11       		.uleb128 0x11
 3878 0111 01       		.uleb128 0x1
 3879 0112 12       		.uleb128 0x12
 3880 0113 06       		.uleb128 0x6
 3881 0114 40       		.uleb128 0x40
 3882 0115 18       		.uleb128 0x18
 3883 0116 9642     		.uleb128 0x2116
 3884 0118 19       		.uleb128 0x19
 3885 0119 00       		.byte	0
 3886 011a 00       		.byte	0
 3887 011b 14       		.uleb128 0x14
 3888 011c 2E       		.uleb128 0x2e
 3889 011d 01       		.byte	0x1
 3890 011e 3F       		.uleb128 0x3f
 3891 011f 19       		.uleb128 0x19
 3892 0120 03       		.uleb128 0x3
 3893 0121 0E       		.uleb128 0xe
 3894 0122 3A       		.uleb128 0x3a
 3895 0123 0B       		.uleb128 0xb
 3896 0124 3B       		.uleb128 0x3b
 3897 0125 0B       		.uleb128 0xb
 3898 0126 27       		.uleb128 0x27
 3899 0127 19       		.uleb128 0x19
 3900 0128 11       		.uleb128 0x11
 3901 0129 01       		.uleb128 0x1
 3902 012a 12       		.uleb128 0x12
 3903 012b 06       		.uleb128 0x6
 3904 012c 40       		.uleb128 0x40
 3905 012d 18       		.uleb128 0x18
 3906 012e 9642     		.uleb128 0x2116
 3907 0130 19       		.uleb128 0x19
 3908 0131 01       		.uleb128 0x1
 3909 0132 13       		.uleb128 0x13
 3910 0133 00       		.byte	0
 3911 0134 00       		.byte	0
 3912 0135 15       		.uleb128 0x15
 3913 0136 05       		.uleb128 0x5
 3914 0137 00       		.byte	0
 3915 0138 03       		.uleb128 0x3
 3916 0139 0E       		.uleb128 0xe
 3917 013a 3A       		.uleb128 0x3a
 3918 013b 0B       		.uleb128 0xb
 3919 013c 3B       		.uleb128 0x3b
 3920 013d 0B       		.uleb128 0xb
 3921 013e 49       		.uleb128 0x49
 3922 013f 13       		.uleb128 0x13
 3923 0140 02       		.uleb128 0x2
 3924 0141 18       		.uleb128 0x18
 3925 0142 00       		.byte	0
 3926 0143 00       		.byte	0
 3927 0144 16       		.uleb128 0x16
 3928 0145 2E       		.uleb128 0x2e
 3929 0146 01       		.byte	0x1
 3930 0147 3F       		.uleb128 0x3f
 3931 0148 19       		.uleb128 0x19
 3932 0149 03       		.uleb128 0x3
 3933 014a 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 85


 3934 014b 3A       		.uleb128 0x3a
 3935 014c 0B       		.uleb128 0xb
 3936 014d 3B       		.uleb128 0x3b
 3937 014e 0B       		.uleb128 0xb
 3938 014f 27       		.uleb128 0x27
 3939 0150 19       		.uleb128 0x19
 3940 0151 49       		.uleb128 0x49
 3941 0152 13       		.uleb128 0x13
 3942 0153 11       		.uleb128 0x11
 3943 0154 01       		.uleb128 0x1
 3944 0155 12       		.uleb128 0x12
 3945 0156 06       		.uleb128 0x6
 3946 0157 40       		.uleb128 0x40
 3947 0158 18       		.uleb128 0x18
 3948 0159 9642     		.uleb128 0x2116
 3949 015b 19       		.uleb128 0x19
 3950 015c 01       		.uleb128 0x1
 3951 015d 13       		.uleb128 0x13
 3952 015e 00       		.byte	0
 3953 015f 00       		.byte	0
 3954 0160 17       		.uleb128 0x17
 3955 0161 2E       		.uleb128 0x2e
 3956 0162 01       		.byte	0x1
 3957 0163 3F       		.uleb128 0x3f
 3958 0164 19       		.uleb128 0x19
 3959 0165 03       		.uleb128 0x3
 3960 0166 0E       		.uleb128 0xe
 3961 0167 3A       		.uleb128 0x3a
 3962 0168 0B       		.uleb128 0xb
 3963 0169 3B       		.uleb128 0x3b
 3964 016a 0B       		.uleb128 0xb
 3965 016b 27       		.uleb128 0x27
 3966 016c 19       		.uleb128 0x19
 3967 016d 11       		.uleb128 0x11
 3968 016e 01       		.uleb128 0x1
 3969 016f 12       		.uleb128 0x12
 3970 0170 06       		.uleb128 0x6
 3971 0171 40       		.uleb128 0x40
 3972 0172 18       		.uleb128 0x18
 3973 0173 9742     		.uleb128 0x2117
 3974 0175 19       		.uleb128 0x19
 3975 0176 01       		.uleb128 0x1
 3976 0177 13       		.uleb128 0x13
 3977 0178 00       		.byte	0
 3978 0179 00       		.byte	0
 3979 017a 18       		.uleb128 0x18
 3980 017b 2E       		.uleb128 0x2e
 3981 017c 01       		.byte	0x1
 3982 017d 3F       		.uleb128 0x3f
 3983 017e 19       		.uleb128 0x19
 3984 017f 03       		.uleb128 0x3
 3985 0180 0E       		.uleb128 0xe
 3986 0181 3A       		.uleb128 0x3a
 3987 0182 0B       		.uleb128 0xb
 3988 0183 3B       		.uleb128 0x3b
 3989 0184 0B       		.uleb128 0xb
 3990 0185 27       		.uleb128 0x27
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 86


 3991 0186 19       		.uleb128 0x19
 3992 0187 49       		.uleb128 0x49
 3993 0188 13       		.uleb128 0x13
 3994 0189 11       		.uleb128 0x11
 3995 018a 01       		.uleb128 0x1
 3996 018b 12       		.uleb128 0x12
 3997 018c 06       		.uleb128 0x6
 3998 018d 40       		.uleb128 0x40
 3999 018e 18       		.uleb128 0x18
 4000 018f 9742     		.uleb128 0x2117
 4001 0191 19       		.uleb128 0x19
 4002 0192 01       		.uleb128 0x1
 4003 0193 13       		.uleb128 0x13
 4004 0194 00       		.byte	0
 4005 0195 00       		.byte	0
 4006 0196 19       		.uleb128 0x19
 4007 0197 2E       		.uleb128 0x2e
 4008 0198 01       		.byte	0x1
 4009 0199 3F       		.uleb128 0x3f
 4010 019a 19       		.uleb128 0x19
 4011 019b 03       		.uleb128 0x3
 4012 019c 0E       		.uleb128 0xe
 4013 019d 3A       		.uleb128 0x3a
 4014 019e 0B       		.uleb128 0xb
 4015 019f 3B       		.uleb128 0x3b
 4016 01a0 05       		.uleb128 0x5
 4017 01a1 11       		.uleb128 0x11
 4018 01a2 01       		.uleb128 0x1
 4019 01a3 12       		.uleb128 0x12
 4020 01a4 06       		.uleb128 0x6
 4021 01a5 40       		.uleb128 0x40
 4022 01a6 18       		.uleb128 0x18
 4023 01a7 9642     		.uleb128 0x2116
 4024 01a9 19       		.uleb128 0x19
 4025 01aa 01       		.uleb128 0x1
 4026 01ab 13       		.uleb128 0x13
 4027 01ac 00       		.byte	0
 4028 01ad 00       		.byte	0
 4029 01ae 1A       		.uleb128 0x1a
 4030 01af 34       		.uleb128 0x34
 4031 01b0 00       		.byte	0
 4032 01b1 03       		.uleb128 0x3
 4033 01b2 0E       		.uleb128 0xe
 4034 01b3 3A       		.uleb128 0x3a
 4035 01b4 0B       		.uleb128 0xb
 4036 01b5 3B       		.uleb128 0x3b
 4037 01b6 05       		.uleb128 0x5
 4038 01b7 49       		.uleb128 0x49
 4039 01b8 13       		.uleb128 0x13
 4040 01b9 02       		.uleb128 0x2
 4041 01ba 18       		.uleb128 0x18
 4042 01bb 00       		.byte	0
 4043 01bc 00       		.byte	0
 4044 01bd 1B       		.uleb128 0x1b
 4045 01be 2E       		.uleb128 0x2e
 4046 01bf 00       		.byte	0
 4047 01c0 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 87


 4048 01c1 19       		.uleb128 0x19
 4049 01c2 03       		.uleb128 0x3
 4050 01c3 0E       		.uleb128 0xe
 4051 01c4 3A       		.uleb128 0x3a
 4052 01c5 0B       		.uleb128 0xb
 4053 01c6 3B       		.uleb128 0x3b
 4054 01c7 05       		.uleb128 0x5
 4055 01c8 27       		.uleb128 0x27
 4056 01c9 19       		.uleb128 0x19
 4057 01ca 49       		.uleb128 0x49
 4058 01cb 13       		.uleb128 0x13
 4059 01cc 11       		.uleb128 0x11
 4060 01cd 01       		.uleb128 0x1
 4061 01ce 12       		.uleb128 0x12
 4062 01cf 06       		.uleb128 0x6
 4063 01d0 40       		.uleb128 0x40
 4064 01d1 18       		.uleb128 0x18
 4065 01d2 9642     		.uleb128 0x2116
 4066 01d4 19       		.uleb128 0x19
 4067 01d5 00       		.byte	0
 4068 01d6 00       		.byte	0
 4069 01d7 1C       		.uleb128 0x1c
 4070 01d8 2E       		.uleb128 0x2e
 4071 01d9 01       		.byte	0x1
 4072 01da 3F       		.uleb128 0x3f
 4073 01db 19       		.uleb128 0x19
 4074 01dc 03       		.uleb128 0x3
 4075 01dd 0E       		.uleb128 0xe
 4076 01de 3A       		.uleb128 0x3a
 4077 01df 0B       		.uleb128 0xb
 4078 01e0 3B       		.uleb128 0x3b
 4079 01e1 05       		.uleb128 0x5
 4080 01e2 49       		.uleb128 0x49
 4081 01e3 13       		.uleb128 0x13
 4082 01e4 11       		.uleb128 0x11
 4083 01e5 01       		.uleb128 0x1
 4084 01e6 12       		.uleb128 0x12
 4085 01e7 06       		.uleb128 0x6
 4086 01e8 40       		.uleb128 0x40
 4087 01e9 18       		.uleb128 0x18
 4088 01ea 9642     		.uleb128 0x2116
 4089 01ec 19       		.uleb128 0x19
 4090 01ed 01       		.uleb128 0x1
 4091 01ee 13       		.uleb128 0x13
 4092 01ef 00       		.byte	0
 4093 01f0 00       		.byte	0
 4094 01f1 1D       		.uleb128 0x1d
 4095 01f2 0B       		.uleb128 0xb
 4096 01f3 01       		.byte	0x1
 4097 01f4 11       		.uleb128 0x11
 4098 01f5 01       		.uleb128 0x1
 4099 01f6 12       		.uleb128 0x12
 4100 01f7 06       		.uleb128 0x6
 4101 01f8 00       		.byte	0
 4102 01f9 00       		.byte	0
 4103 01fa 1E       		.uleb128 0x1e
 4104 01fb 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 88


 4105 01fc 01       		.byte	0x1
 4106 01fd 11       		.uleb128 0x11
 4107 01fe 01       		.uleb128 0x1
 4108 01ff 12       		.uleb128 0x12
 4109 0200 06       		.uleb128 0x6
 4110 0201 01       		.uleb128 0x1
 4111 0202 13       		.uleb128 0x13
 4112 0203 00       		.byte	0
 4113 0204 00       		.byte	0
 4114 0205 1F       		.uleb128 0x1f
 4115 0206 21       		.uleb128 0x21
 4116 0207 00       		.byte	0
 4117 0208 49       		.uleb128 0x49
 4118 0209 13       		.uleb128 0x13
 4119 020a 2F       		.uleb128 0x2f
 4120 020b 05       		.uleb128 0x5
 4121 020c 00       		.byte	0
 4122 020d 00       		.byte	0
 4123 020e 20       		.uleb128 0x20
 4124 020f 2E       		.uleb128 0x2e
 4125 0210 01       		.byte	0x1
 4126 0211 3F       		.uleb128 0x3f
 4127 0212 19       		.uleb128 0x19
 4128 0213 03       		.uleb128 0x3
 4129 0214 0E       		.uleb128 0xe
 4130 0215 3A       		.uleb128 0x3a
 4131 0216 0B       		.uleb128 0xb
 4132 0217 3B       		.uleb128 0x3b
 4133 0218 05       		.uleb128 0x5
 4134 0219 27       		.uleb128 0x27
 4135 021a 19       		.uleb128 0x19
 4136 021b 49       		.uleb128 0x49
 4137 021c 13       		.uleb128 0x13
 4138 021d 11       		.uleb128 0x11
 4139 021e 01       		.uleb128 0x1
 4140 021f 12       		.uleb128 0x12
 4141 0220 06       		.uleb128 0x6
 4142 0221 40       		.uleb128 0x40
 4143 0222 18       		.uleb128 0x18
 4144 0223 9642     		.uleb128 0x2116
 4145 0225 19       		.uleb128 0x19
 4146 0226 01       		.uleb128 0x1
 4147 0227 13       		.uleb128 0x13
 4148 0228 00       		.byte	0
 4149 0229 00       		.byte	0
 4150 022a 21       		.uleb128 0x21
 4151 022b 05       		.uleb128 0x5
 4152 022c 00       		.byte	0
 4153 022d 03       		.uleb128 0x3
 4154 022e 0E       		.uleb128 0xe
 4155 022f 3A       		.uleb128 0x3a
 4156 0230 0B       		.uleb128 0xb
 4157 0231 3B       		.uleb128 0x3b
 4158 0232 05       		.uleb128 0x5
 4159 0233 49       		.uleb128 0x49
 4160 0234 13       		.uleb128 0x13
 4161 0235 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 89


 4162 0236 18       		.uleb128 0x18
 4163 0237 00       		.byte	0
 4164 0238 00       		.byte	0
 4165 0239 22       		.uleb128 0x22
 4166 023a 34       		.uleb128 0x34
 4167 023b 00       		.byte	0
 4168 023c 03       		.uleb128 0x3
 4169 023d 08       		.uleb128 0x8
 4170 023e 3A       		.uleb128 0x3a
 4171 023f 0B       		.uleb128 0xb
 4172 0240 3B       		.uleb128 0x3b
 4173 0241 05       		.uleb128 0x5
 4174 0242 49       		.uleb128 0x49
 4175 0243 13       		.uleb128 0x13
 4176 0244 02       		.uleb128 0x2
 4177 0245 18       		.uleb128 0x18
 4178 0246 00       		.byte	0
 4179 0247 00       		.byte	0
 4180 0248 23       		.uleb128 0x23
 4181 0249 34       		.uleb128 0x34
 4182 024a 00       		.byte	0
 4183 024b 03       		.uleb128 0x3
 4184 024c 0E       		.uleb128 0xe
 4185 024d 3A       		.uleb128 0x3a
 4186 024e 0B       		.uleb128 0xb
 4187 024f 3B       		.uleb128 0x3b
 4188 0250 05       		.uleb128 0x5
 4189 0251 49       		.uleb128 0x49
 4190 0252 13       		.uleb128 0x13
 4191 0253 3F       		.uleb128 0x3f
 4192 0254 19       		.uleb128 0x19
 4193 0255 3C       		.uleb128 0x3c
 4194 0256 19       		.uleb128 0x19
 4195 0257 00       		.byte	0
 4196 0258 00       		.byte	0
 4197 0259 24       		.uleb128 0x24
 4198 025a 34       		.uleb128 0x34
 4199 025b 00       		.byte	0
 4200 025c 03       		.uleb128 0x3
 4201 025d 0E       		.uleb128 0xe
 4202 025e 3A       		.uleb128 0x3a
 4203 025f 0B       		.uleb128 0xb
 4204 0260 3B       		.uleb128 0x3b
 4205 0261 0B       		.uleb128 0xb
 4206 0262 49       		.uleb128 0x49
 4207 0263 13       		.uleb128 0x13
 4208 0264 3F       		.uleb128 0x3f
 4209 0265 19       		.uleb128 0x19
 4210 0266 02       		.uleb128 0x2
 4211 0267 18       		.uleb128 0x18
 4212 0268 00       		.byte	0
 4213 0269 00       		.byte	0
 4214 026a 25       		.uleb128 0x25
 4215 026b 34       		.uleb128 0x34
 4216 026c 00       		.byte	0
 4217 026d 03       		.uleb128 0x3
 4218 026e 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 90


 4219 026f 3A       		.uleb128 0x3a
 4220 0270 0B       		.uleb128 0xb
 4221 0271 3B       		.uleb128 0x3b
 4222 0272 0B       		.uleb128 0xb
 4223 0273 49       		.uleb128 0x49
 4224 0274 13       		.uleb128 0x13
 4225 0275 3F       		.uleb128 0x3f
 4226 0276 19       		.uleb128 0x19
 4227 0277 02       		.uleb128 0x2
 4228 0278 18       		.uleb128 0x18
 4229 0279 00       		.byte	0
 4230 027a 00       		.byte	0
 4231 027b 00       		.byte	0
 4232              		.section	.debug_aranges,"",%progbits
 4233 0000 8C000000 		.4byte	0x8c
 4234 0004 0200     		.2byte	0x2
 4235 0006 00000000 		.4byte	.Ldebug_info0
 4236 000a 04       		.byte	0x4
 4237 000b 00       		.byte	0
 4238 000c 0000     		.2byte	0
 4239 000e 0000     		.2byte	0
 4240 0010 00000000 		.4byte	.LFB64
 4241 0014 0C000000 		.4byte	.LFE64-.LFB64
 4242 0018 00000000 		.4byte	.LFB65
 4243 001c 2C010000 		.4byte	.LFE65-.LFB65
 4244 0020 00000000 		.4byte	.LFB66
 4245 0024 64000000 		.4byte	.LFE66-.LFB66
 4246 0028 00000000 		.4byte	.LFB67
 4247 002c 2A000000 		.4byte	.LFE67-.LFB67
 4248 0030 00000000 		.4byte	.LFB68
 4249 0034 50000000 		.4byte	.LFE68-.LFB68
 4250 0038 00000000 		.4byte	.LFB69
 4251 003c 48000000 		.4byte	.LFE69-.LFB69
 4252 0040 00000000 		.4byte	.LFB70
 4253 0044 1E000000 		.4byte	.LFE70-.LFB70
 4254 0048 00000000 		.4byte	.LFB71
 4255 004c 46000000 		.4byte	.LFE71-.LFB71
 4256 0050 00000000 		.4byte	.LFB72
 4257 0054 2C010000 		.4byte	.LFE72-.LFB72
 4258 0058 00000000 		.4byte	.LFB73
 4259 005c 1E000000 		.4byte	.LFE73-.LFB73
 4260 0060 00000000 		.4byte	.LFB74
 4261 0064 2C040000 		.4byte	.LFE74-.LFB74
 4262 0068 00000000 		.4byte	.LFB75
 4263 006c 44000000 		.4byte	.LFE75-.LFB75
 4264 0070 00000000 		.4byte	.LFB76
 4265 0074 70020000 		.4byte	.LFE76-.LFB76
 4266 0078 00000000 		.4byte	.LFB77
 4267 007c 74000000 		.4byte	.LFE77-.LFB77
 4268 0080 00000000 		.4byte	.LFB78
 4269 0084 38010000 		.4byte	.LFE78-.LFB78
 4270 0088 00000000 		.4byte	0
 4271 008c 00000000 		.4byte	0
 4272              		.section	.debug_ranges,"",%progbits
 4273              	.Ldebug_ranges0:
 4274 0000 00000000 		.4byte	.LFB64
 4275 0004 0C000000 		.4byte	.LFE64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 91


 4276 0008 00000000 		.4byte	.LFB65
 4277 000c 2C010000 		.4byte	.LFE65
 4278 0010 00000000 		.4byte	.LFB66
 4279 0014 64000000 		.4byte	.LFE66
 4280 0018 00000000 		.4byte	.LFB67
 4281 001c 2A000000 		.4byte	.LFE67
 4282 0020 00000000 		.4byte	.LFB68
 4283 0024 50000000 		.4byte	.LFE68
 4284 0028 00000000 		.4byte	.LFB69
 4285 002c 48000000 		.4byte	.LFE69
 4286 0030 00000000 		.4byte	.LFB70
 4287 0034 1E000000 		.4byte	.LFE70
 4288 0038 00000000 		.4byte	.LFB71
 4289 003c 46000000 		.4byte	.LFE71
 4290 0040 00000000 		.4byte	.LFB72
 4291 0044 2C010000 		.4byte	.LFE72
 4292 0048 00000000 		.4byte	.LFB73
 4293 004c 1E000000 		.4byte	.LFE73
 4294 0050 00000000 		.4byte	.LFB74
 4295 0054 2C040000 		.4byte	.LFE74
 4296 0058 00000000 		.4byte	.LFB75
 4297 005c 44000000 		.4byte	.LFE75
 4298 0060 00000000 		.4byte	.LFB76
 4299 0064 70020000 		.4byte	.LFE76
 4300 0068 00000000 		.4byte	.LFB77
 4301 006c 74000000 		.4byte	.LFE77
 4302 0070 00000000 		.4byte	.LFB78
 4303 0074 38010000 		.4byte	.LFE78
 4304 0078 00000000 		.4byte	0
 4305 007c 00000000 		.4byte	0
 4306              		.section	.debug_line,"",%progbits
 4307              	.Ldebug_line0:
 4308 0000 20040000 		.section	.debug_str,"MS",%progbits,1
 4308      02001B02 
 4308      00000201 
 4308      FB0E0D00 
 4308      01010101 
 4309              	.LASF113:
 4310 0000 745F6D6F 		.ascii	"t_modem\000"
 4310      64656D00 
 4311              	.LASF12:
 4312 0008 75696E74 		.ascii	"uint16\000"
 4312      313600
 4313              	.LASF53:
 4314 000f 746D5F68 		.ascii	"tm_hour\000"
 4314      6F757200 
 4315              	.LASF36:
 4316 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4316      696E7661 
 4316      6C69645F 
 4316      72656164 
 4316      696E6773 
 4317              	.LASF144:
 4318 002c 62756666 		.ascii	"buffer_overflow\000"
 4318      65725F6F 
 4318      76657266 
 4318      6C6F7700 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 92


 4319              	.LASF142:
 4320 003c 66696C65 		.ascii	"fileName\000"
 4320      4E616D65 
 4320      00
 4321              	.LASF0:
 4322 0045 7369676E 		.ascii	"signed char\000"
 4322      65642063 
 4322      68617200 
 4323              	.LASF85:
 4324 0051 636F756E 		.ascii	"countDownResetCondition\000"
 4324      74446F77 
 4324      6E526573 
 4324      6574436F 
 4324      6E646974 
 4325              	.LASF166:
 4326 0069 57616B65 		.ascii	"Wakeup_ISR\000"
 4326      75705F49 
 4326      535200
 4327              	.LASF163:
 4328 0074 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4328      43313120 
 4328      352E342E 
 4328      31203230 
 4328      31363036 
 4329 00a7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4329      20726576 
 4329      6973696F 
 4329      6E203233 
 4329      37373135 
 4330 00da 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4330      66756E63 
 4330      74696F6E 
 4330      2D736563 
 4330      74696F6E 
 4331              	.LASF111:
 4332 0102 745F7072 		.ascii	"t_pressure\000"
 4332      65737375 
 4332      726500
 4333              	.LASF26:
 4334 010d 4D6F6E74 		.ascii	"Month\000"
 4334      6800
 4335              	.LASF7:
 4336 0113 6C6F6E67 		.ascii	"long long unsigned int\000"
 4336      206C6F6E 
 4336      6720756E 
 4336      7369676E 
 4336      65642069 
 4337              	.LASF22:
 4338 012a 486F7572 		.ascii	"Hour\000"
 4338      00
 4339              	.LASF148:
 4340 012f 6D6F6465 		.ascii	"modem_state\000"
 4340      6D5F7374 
 4340      61746500 
 4341              	.LASF157:
 4342 013b 616C6172 		.ascii	"alarmMeasure\000"
 4342      6D4D6561 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 93


 4342      73757265 
 4342      00
 4343              	.LASF143:
 4344 0148 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4344      52784275 
 4344      66666572 
 4344      00
 4345              	.LASF108:
 4346 0155 745F6C65 		.ascii	"t_level_sensor\000"
 4346      76656C5F 
 4346      73656E73 
 4346      6F7200
 4347              	.LASF6:
 4348 0164 6C6F6E67 		.ascii	"long long int\000"
 4348      206C6F6E 
 4348      6720696E 
 4348      7400
 4349              	.LASF121:
 4350 0172 7061636B 		.ascii	"packets\000"
 4350      65747300 
 4351              	.LASF69:
 4352 017a 65636E6F 		.ascii	"ecno\000"
 4352      00
 4353              	.LASF158:
 4354 017f 74696D65 		.ascii	"timeToMeasure\000"
 4354      546F4D65 
 4354      61737572 
 4354      6500
 4355              	.LASF72:
 4356 018d 74696D65 		.ascii	"time_to_network_connect\000"
 4356      5F746F5F 
 4356      6E657477 
 4356      6F726B5F 
 4356      636F6E6E 
 4357              	.LASF160:
 4358 01a5 74696D65 		.ascii	"timeToSync\000"
 4358      546F5379 
 4358      6E6300
 4359              	.LASF39:
 4360 01b0 766F6C74 		.ascii	"voltage_solar\000"
 4360      6167655F 
 4360      736F6C61 
 4360      7200
 4361              	.LASF40:
 4362 01be 766F6C74 		.ascii	"voltage_charge_current\000"
 4362      6167655F 
 4362      63686172 
 4362      67655F63 
 4362      75727265 
 4363              	.LASF141:
 4364 01d5 75706772 		.ascii	"upgrade_status\000"
 4364      6164655F 
 4364      73746174 
 4364      757300
 4365              	.LASF124:
 4366 01e4 635F6461 		.ascii	"c_data_count_sent\000"
 4366      74615F63 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 94


 4366      6F756E74 
 4366      5F73656E 
 4366      7400
 4367              	.LASF66:
 4368 01f6 6D6F6465 		.ascii	"modem_info_t\000"
 4368      6D5F696E 
 4368      666F5F74 
 4368      00
 4369              	.LASF67:
 4370 0203 72786C65 		.ascii	"rxlev\000"
 4370      7600
 4371              	.LASF4:
 4372 0209 6C6F6E67 		.ascii	"long int\000"
 4372      20696E74 
 4372      00
 4373              	.LASF73:
 4374 0212 74696D65 		.ascii	"time_to_acquire_ip\000"
 4374      5F746F5F 
 4374      61637175 
 4374      6972655F 
 4374      697000
 4375              	.LASF86:
 4376 0225 616C6172 		.ascii	"alarm\000"
 4376      6D00
 4377              	.LASF47:
 4378 022b 70726573 		.ascii	"pressure_voltage_off\000"
 4378      73757265 
 4378      5F766F6C 
 4378      74616765 
 4378      5F6F6666 
 4379              	.LASF11:
 4380 0240 75696E74 		.ascii	"uint8\000"
 4380      3800
 4381              	.LASF116:
 4382 0246 635F7472 		.ascii	"c_try_counter\000"
 4382      795F636F 
 4382      756E7465 
 4382      7200
 4383              	.LASF127:
 4384 0254 73656E64 		.ascii	"send_time\000"
 4384      5F74696D 
 4384      6500
 4385              	.LASF16:
 4386 025e 696E7433 		.ascii	"int32\000"
 4386      3200
 4387              	.LASF75:
 4388 0264 6E6F6465 		.ascii	"node_type\000"
 4388      5F747970 
 4388      6500
 4389              	.LASF114:
 4390 026e 73796E63 		.ascii	"syncData\000"
 4390      44617461 
 4390      00
 4391              	.LASF122:
 4392 0277 6E657477 		.ascii	"network_time\000"
 4392      6F726B5F 
 4392      74696D65 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 95


 4392      00
 4393              	.LASF13:
 4394 0284 75696E74 		.ascii	"uint32\000"
 4394      333200
 4395              	.LASF64:
 4396 028b 6D6F6465 		.ascii	"model_id\000"
 4396      6C5F6964 
 4396      00
 4397              	.LASF33:
 4398 0294 616C6C5F 		.ascii	"all_level_readings\000"
 4398      6C657665 
 4398      6C5F7265 
 4398      6164696E 
 4398      677300
 4399              	.LASF82:
 4400 02a7 636F756E 		.ascii	"countDownValue\000"
 4400      74446F77 
 4400      6E56616C 
 4400      756500
 4401              	.LASF137:
 4402 02b6 75706772 		.ascii	"upgraded\000"
 4402      61646564 
 4402      00
 4403              	.LASF55:
 4404 02bf 746D5F6D 		.ascii	"tm_mon\000"
 4404      6F6E00
 4405              	.LASF79:
 4406 02c6 64656275 		.ascii	"debug_level\000"
 4406      675F6C65 
 4406      76656C00 
 4407              	.LASF139:
 4408 02d2 706F7274 		.ascii	"port\000"
 4408      00
 4409              	.LASF60:
 4410 02d7 76616C75 		.ascii	"value\000"
 4410      6500
 4411              	.LASF138:
 4412 02dd 686F7374 		.ascii	"host\000"
 4412      00
 4413              	.LASF56:
 4414 02e2 746D5F79 		.ascii	"tm_year\000"
 4414      65617200 
 4415              	.LASF159:
 4416 02ea 616C6172 		.ascii	"alarmSync\000"
 4416      6D53796E 
 4416      6300
 4417              	.LASF46:
 4418 02f4 70726573 		.ascii	"pressure_voltage_on\000"
 4418      73757265 
 4418      5F766F6C 
 4418      74616765 
 4418      5F6F6E00 
 4419              	.LASF8:
 4420 0308 756E7369 		.ascii	"unsigned int\000"
 4420      676E6564 
 4420      20696E74 
 4420      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 96


 4421              	.LASF135:
 4422 0315 73657454 		.ascii	"setTime\000"
 4422      696D6500 
 4423              	.LASF62:
 4424 031d 6B65795F 		.ascii	"key_value_t\000"
 4424      76616C75 
 4424      655F7400 
 4425              	.LASF98:
 4426 0329 41796F49 		.ascii	"AyoItsTime\000"
 4426      74735469 
 4426      6D6500
 4427              	.LASF35:
 4428 0334 6E756D5F 		.ascii	"num_valid_readings\000"
 4428      76616C69 
 4428      645F7265 
 4428      6164696E 
 4428      677300
 4429              	.LASF126:
 4430 0347 68747470 		.ascii	"http_chunk\000"
 4430      5F636875 
 4430      6E6B00
 4431              	.LASF132:
 4432 0352 6D5F766F 		.ascii	"m_voltage\000"
 4432      6C746167 
 4432      6500
 4433              	.LASF5:
 4434 035c 6C6F6E67 		.ascii	"long unsigned int\000"
 4434      20756E73 
 4434      69676E65 
 4434      6420696E 
 4434      7400
 4435              	.LASF95:
 4436 036e 7472795F 		.ascii	"try_counter\000"
 4436      636F756E 
 4436      74657200 
 4437              	.LASF117:
 4438 037a 64617461 		.ascii	"data_count_desired\000"
 4438      5F636F75 
 4438      6E745F64 
 4438      65736972 
 4438      656400
 4439              	.LASF38:
 4440 038d 766F6C74 		.ascii	"voltage_battery\000"
 4440      6167655F 
 4440      62617474 
 4440      65727900 
 4441              	.LASF24:
 4442 039d 4461794F 		.ascii	"DayOfMonth\000"
 4442      664D6F6E 
 4442      746800
 4443              	.LASF130:
 4444 03a8 6D616B65 		.ascii	"makeMeasurements\000"
 4444      4D656173 
 4444      7572656D 
 4444      656E7473 
 4444      00
 4445              	.LASF147:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 97


 4446 03b9 64617461 		.ascii	"data\000"
 4446      00
 4447              	.LASF91:
 4448 03be 65705F70 		.ascii	"ep_port\000"
 4448      6F727400 
 4449              	.LASF59:
 4450 03c6 746D5F69 		.ascii	"tm_isdst\000"
 4450      73647374 
 4450      00
 4451              	.LASF87:
 4452 03cf 6D6F6465 		.ascii	"modem_info\000"
 4452      6D5F696E 
 4452      666F00
 4453              	.LASF90:
 4454 03da 65705F68 		.ascii	"ep_host\000"
 4454      6F737400 
 4455              	.LASF14:
 4456 03e2 696E7438 		.ascii	"int8\000"
 4456      00
 4457              	.LASF97:
 4458 03e7 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4458      576F726B 
 4458      576F726B 
 4458      576F726B 
 4458      576F726B 
 4459              	.LASF118:
 4460 0400 635F6461 		.ascii	"c_data_count_desired\000"
 4460      74615F63 
 4460      6F756E74 
 4460      5F646573 
 4460      69726564 
 4461              	.LASF112:
 4462 0415 745F7364 		.ascii	"t_sd_card\000"
 4462      5F636172 
 4462      6400
 4463              	.LASF2:
 4464 041f 73686F72 		.ascii	"short int\000"
 4464      7420696E 
 4464      7400
 4465              	.LASF149:
 4466 0429 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4466      6D5F7374 
 4466      6172745F 
 4466      74696D65 
 4466      5F737461 
 4467              	.LASF89:
 4468 0440 7379735F 		.ascii	"sys_info_t\000"
 4468      696E666F 
 4468      5F7400
 4469              	.LASF81:
 4470 044b 75706461 		.ascii	"updatable_parameters_t\000"
 4470      7461626C 
 4470      655F7061 
 4470      72616D65 
 4470      74657273 
 4471              	.LASF99:
 4472 0462 616C6172 		.ascii	"alarmType\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 98


 4472      6D547970 
 4472      6500
 4473              	.LASF145:
 4474 046c 64617461 		.ascii	"dataPointsInStack\000"
 4474      506F696E 
 4474      7473496E 
 4474      53746163 
 4474      6B00
 4475              	.LASF52:
 4476 047e 746D5F6D 		.ascii	"tm_min\000"
 4476      696E00
 4477              	.LASF140:
 4478 0485 726F7574 		.ascii	"route\000"
 4478      6500
 4479              	.LASF100:
 4480 048b 616C6172 		.ascii	"alarmToBeUpdated\000"
 4480      6D546F42 
 4480      65557064 
 4480      61746564 
 4480      00
 4481              	.LASF21:
 4482 049c 73697A65 		.ascii	"sizetype\000"
 4482      74797065 
 4482      00
 4483              	.LASF58:
 4484 04a5 746D5F79 		.ascii	"tm_yday\000"
 4484      64617900 
 4485              	.LASF92:
 4486 04ad 7379735F 		.ascii	"sys_settings_t\000"
 4486      73657474 
 4486      696E6773 
 4486      5F7400
 4487              	.LASF136:
 4488 04bc 6C6F6361 		.ascii	"localTime\000"
 4488      6C54696D 
 4488      6500
 4489              	.LASF161:
 4490 04c6 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4490      546F5379 
 4490      636E5265 
 4490      6D6F7465 
 4490      50617261 
 4491              	.LASF61:
 4492 04dd 74696D65 		.ascii	"timeStamp\000"
 4492      5374616D 
 4492      7000
 4493              	.LASF165:
 4494 04e7 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\notoriOS\\notoriOS\\no"
 4494      73657273 
 4494      5C64616E 
 4494      747A5C44 
 4494      6F63756D 
 4495 0514 746F7269 		.ascii	"toriOS.cydsn\000"
 4495      4F532E63 
 4495      7964736E 
 4495      00
 4496              	.LASF28:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 99


 4497 0521 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4497      54494D45 
 4497      5F444154 
 4497      4500
 4498              	.LASF151:
 4499 052f 75706461 		.ascii	"updatable_parameters\000"
 4499      7461626C 
 4499      655F7061 
 4499      72616D65 
 4499      74657273 
 4500              	.LASF104:
 4501 0544 43726561 		.ascii	"CreateAlarm\000"
 4501      7465416C 
 4501      61726D00 
 4502              	.LASF125:
 4503 0550 7061636B 		.ascii	"packet\000"
 4503      657400
 4504              	.LASF115:
 4505 0557 735F7273 		.ascii	"s_rsrp\000"
 4505      727000
 4506              	.LASF41:
 4507 055e 766F6C74 		.ascii	"voltage_pressure\000"
 4507      6167655F 
 4507      70726573 
 4507      73757265 
 4507      00
 4508              	.LASF152:
 4509 056f 68747470 		.ascii	"http_request\000"
 4509      5F726571 
 4509      75657374 
 4509      00
 4510              	.LASF17:
 4511 057c 666C6F61 		.ascii	"float\000"
 4511      7400
 4512              	.LASF37:
 4513 0582 6C657665 		.ascii	"level_sensor_t\000"
 4513      6C5F7365 
 4513      6E736F72 
 4513      5F7400
 4514              	.LASF129:
 4515 0591 636F6E66 		.ascii	"configureRemoteParams\000"
 4515      69677572 
 4515      6552656D 
 4515      6F746550 
 4515      6172616D 
 4516              	.LASF76:
 4517 05a7 73696D5F 		.ascii	"sim_type\000"
 4517      74797065 
 4517      00
 4518              	.LASF162:
 4519 05b0 44617461 		.ascii	"Data_fileName\000"
 4519      5F66696C 
 4519      654E616D 
 4519      6500
 4520              	.LASF96:
 4521 05be 6D6F6465 		.ascii	"modem_status\000"
 4521      6D5F7374 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 100


 4521      61747573 
 4521      00
 4522              	.LASF29:
 4523 05cb 74657374 		.ascii	"test_name\000"
 4523      5F6E616D 
 4523      6500
 4524              	.LASF27:
 4525 05d5 59656172 		.ascii	"Year\000"
 4525      00
 4526              	.LASF80:
 4527 05da 5F426F6F 		.ascii	"_Bool\000"
 4527      6C00
 4528              	.LASF10:
 4529 05e0 696E7433 		.ascii	"int32_t\000"
 4529      325F7400 
 4530              	.LASF1:
 4531 05e8 756E7369 		.ascii	"unsigned char\000"
 4531      676E6564 
 4531      20636861 
 4531      7200
 4532              	.LASF156:
 4533 05f6 73797374 		.ascii	"system_settings\000"
 4533      656D5F73 
 4533      65747469 
 4533      6E677300 
 4534              	.LASF71:
 4535 0606 72737270 		.ascii	"rsrp\000"
 4535      00
 4536              	.LASF70:
 4537 060b 72737271 		.ascii	"rsrq\000"
 4537      00
 4538              	.LASF101:
 4539 0610 52657365 		.ascii	"ResetAlarm\000"
 4539      74416C61 
 4539      726D00
 4540              	.LASF128:
 4541 061b 735F7365 		.ascii	"s_send_time\000"
 4541      6E645F74 
 4541      696D6500 
 4542              	.LASF78:
 4543 0627 73796E63 		.ascii	"sync_time\000"
 4543      5F74696D 
 4543      6500
 4544              	.LASF49:
 4545 0631 70726573 		.ascii	"pressure_depth\000"
 4545      73757265 
 4545      5F646570 
 4545      746800
 4546              	.LASF68:
 4547 0640 72736370 		.ascii	"rscp\000"
 4547      00
 4548              	.LASF23:
 4549 0645 4461794F 		.ascii	"DayOfWeek\000"
 4549      66576565 
 4549      6B00
 4550              	.LASF32:
 4551 064f 74657374 		.ascii	"test_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 101


 4551      5F7400
 4552              	.LASF155:
 4553 0656 73797374 		.ascii	"system_info\000"
 4553      656D5F69 
 4553      6E666F00 
 4554              	.LASF65:
 4555 0662 696D6569 		.ascii	"imei\000"
 4555      00
 4556              	.LASF31:
 4557 0667 72656173 		.ascii	"reason\000"
 4557      6F6E00
 4558              	.LASF102:
 4559 066e 616C6172 		.ascii	"alarmToBeReset\000"
 4559      6D546F42 
 4559      65526573 
 4559      657400
 4560              	.LASF107:
 4561 067d 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4561      6B697479 
 4561      43686563 
 4561      6B596F75 
 4561      7273656C 
 4562              	.LASF123:
 4563 06a9 64617461 		.ascii	"data_count_sent\000"
 4563      5F636F75 
 4563      6E745F73 
 4563      656E7400 
 4564              	.LASF74:
 4565 06b9 6D6F6465 		.ascii	"modem_stats_t\000"
 4565      6D5F7374 
 4565      6174735F 
 4565      7400
 4566              	.LASF48:
 4567 06c7 70726573 		.ascii	"pressure_current\000"
 4567      73757265 
 4567      5F637572 
 4567      72656E74 
 4567      00
 4568              	.LASF44:
 4569 06d8 76616C69 		.ascii	"valid\000"
 4569      6400
 4570              	.LASF57:
 4571 06de 746D5F77 		.ascii	"tm_wday\000"
 4571      64617900 
 4572              	.LASF20:
 4573 06e6 6C6F6E67 		.ascii	"long double\000"
 4573      20646F75 
 4573      626C6500 
 4574              	.LASF120:
 4575 06f2 6368756E 		.ascii	"chunk\000"
 4575      6B00
 4576              	.LASF131:
 4577 06f8 635F7469 		.ascii	"c_timeStamp\000"
 4577      6D655374 
 4577      616D7000 
 4578              	.LASF19:
 4579 0704 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 102


 4579      00
 4580              	.LASF150:
 4581 0709 6D6F6465 		.ascii	"modem_stats\000"
 4581      6D5F7374 
 4581      61747300 
 4582              	.LASF154:
 4583 0715 68747470 		.ascii	"http_route\000"
 4583      5F726F75 
 4583      746500
 4584              	.LASF119:
 4585 0720 706F7274 		.ascii	"portConfig\000"
 4585      436F6E66 
 4585      696700
 4586              	.LASF9:
 4587 072b 5F5F696E 		.ascii	"__int32_t\000"
 4587      7433325F 
 4587      7400
 4588              	.LASF93:
 4589 0735 756E6971 		.ascii	"uniqueId\000"
 4589      75654964 
 4589      00
 4590              	.LASF77:
 4591 073e 6D656173 		.ascii	"measure_time\000"
 4591      7572655F 
 4591      74696D65 
 4591      00
 4592              	.LASF133:
 4593 074b 6D5F6C65 		.ascii	"m_level_sensor\000"
 4593      76656C5F 
 4593      73656E73 
 4593      6F7200
 4594              	.LASF34:
 4595 075a 6C657665 		.ascii	"level_reading\000"
 4595      6C5F7265 
 4595      6164696E 
 4595      6700
 4596              	.LASF105:
 4597 0768 6E657741 		.ascii	"newAlarm\000"
 4597      6C61726D 
 4597      00
 4598              	.LASF167:
 4599 0771 4C617942 		.ascii	"LayBack\000"
 4599      61636B00 
 4600              	.LASF3:
 4601 0779 73686F72 		.ascii	"short unsigned int\000"
 4601      7420756E 
 4601      7369676E 
 4601      65642069 
 4601      6E7400
 4602              	.LASF63:
 4603 078c 73696D5F 		.ascii	"sim_id\000"
 4603      696400
 4604              	.LASF54:
 4605 0793 746D5F6D 		.ascii	"tm_mday\000"
 4605      64617900 
 4606              	.LASF43:
 4607 079b 766F6C74 		.ascii	"voltage_valve_pos_blue\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 103


 4607      6167655F 
 4607      76616C76 
 4607      655F706F 
 4607      735F626C 
 4608              	.LASF51:
 4609 07b2 746D5F73 		.ascii	"tm_sec\000"
 4609      656300
 4610              	.LASF134:
 4611 07b9 6D5F7072 		.ascii	"m_pressure\000"
 4611      65737375 
 4611      726500
 4612              	.LASF30:
 4613 07c4 73746174 		.ascii	"status\000"
 4613      757300
 4614              	.LASF146:
 4615 07cb 64617461 		.ascii	"dataPointsInStackDesired\000"
 4615      506F696E 
 4615      7473496E 
 4615      53746163 
 4615      6B446573 
 4616              	.LASF110:
 4617 07e4 745F766F 		.ascii	"t_voltages\000"
 4617      6C746167 
 4617      657300
 4618              	.LASF164:
 4619 07ef 6E6F746F 		.ascii	"notoriOS.c\000"
 4619      72694F53 
 4619      2E6300
 4620              	.LASF153:
 4621 07fa 68747470 		.ascii	"http_body\000"
 4621      5F626F64 
 4621      7900
 4622              	.LASF15:
 4623 0804 696E7431 		.ascii	"int16\000"
 4623      3600
 4624              	.LASF84:
 4625 080a 636F756E 		.ascii	"countDownType\000"
 4625      74446F77 
 4625      6E547970 
 4625      6500
 4626              	.LASF83:
 4627 0818 63757272 		.ascii	"currentCountDownValue\000"
 4627      656E7443 
 4627      6F756E74 
 4627      446F776E 
 4627      56616C75 
 4628              	.LASF42:
 4629 082e 766F6C74 		.ascii	"voltage_valve_pos_brown\000"
 4629      6167655F 
 4629      76616C76 
 4629      655F706F 
 4629      735F6272 
 4630              	.LASF94:
 4631 0846 635F6865 		.ascii	"c_hey\000"
 4631      7900
 4632              	.LASF25:
 4633 084c 4461794F 		.ascii	"DayOfYear\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccMCAdD3.s 			page 104


 4633      66596561 
 4633      7200
 4634              	.LASF50:
 4635 0856 70726573 		.ascii	"pressure_t\000"
 4635      73757265 
 4635      5F7400
 4636              	.LASF103:
 4637 0861 416C6172 		.ascii	"AlarmReady\000"
 4637      6D526561 
 4637      647900
 4638              	.LASF106:
 4639 086c 52656164 		.ascii	"ReadyOrNot\000"
 4639      794F724E 
 4639      6F7400
 4640              	.LASF168:
 4641 0877 6D61696E 		.ascii	"main\000"
 4641      00
 4642              	.LASF88:
 4643 087c 63686970 		.ascii	"chip_uniqueId\000"
 4643      5F756E69 
 4643      71756549 
 4643      6400
 4644              	.LASF109:
 4645 088a 745F7661 		.ascii	"t_valve\000"
 4645      6C766500 
 4646              	.LASF18:
 4647 0892 646F7562 		.ascii	"double\000"
 4647      6C6500
 4648              	.LASF45:
 4649 0899 766F6C74 		.ascii	"voltage_t\000"
 4649      6167655F 
 4649      7400
 4650              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
