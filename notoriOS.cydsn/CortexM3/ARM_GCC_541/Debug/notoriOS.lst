ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	level_sensor_enabled,1,1
  21              		.comm	downstream_level_sensor_inbox,100,4
  22              		.comm	downstream_level_sensor_enabled,1,1
  23              		.comm	valve_diameter,4,4
  24              		.comm	valve_type,10,4
  25              		.comm	valve_enabled,1,1
  26              		.comm	valve_inbox,100,4
  27              		.comm	buffer_overflow,1,1
  28              		.comm	dataPointsInStack,2,2
  29              		.comm	dataPointsInStackDesired,2,2
  30              		.comm	data,6600,4
  31              		.comm	modem_state,1,1
  32              		.comm	modem_start_time_stamp,4,4
  33              		.comm	modem_info,60,4
  34              		.comm	modem_stats,32,4
  35              		.comm	updatable_parameters,9,4
  36              		.syntax unified
  37              		.global _printf_float
  38              		.thumb
  39              		.syntax unified
  40              		.comm	App_LED_enabled,1,1
  41              		.comm	app_led_inbox,100,4
  42              		.comm	http_request,10000,4
  43              		.comm	http_body,10000,4
  44              		.comm	http_route,200,4
  45              		.comm	system_info,28,4
  46              		.comm	system_settings,104,4
  47              		.comm	alarmMeasure,6,4
  48              		.comm	timeToMeasure,1,1
  49              		.comm	alarmSync,6,4
  50              		.comm	timeToSync,1,1
  51              		.comm	timeToSycnRemoteParams,1,1
  52              		.comm	hey,1,1
  53              		.comm	alarmAppLED,6,4
  54              		.comm	timeToAppLED,1,1
  55              		.comm	alarmLevelSensor,6,4
  56              		.comm	timetoLevelSensor,1,1
  57              		.comm	alarmDownstreamLevelSensor,6,4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 2


  58              		.comm	timetoDownstreamLevelSensor,1,1
  59              		.comm	alarmValve,6,4
  60              		.comm	timeToValve,1,1
  61              		.section	.text.Wakeup_ISR,"ax",%progbits
  62              		.align	2
  63              		.global	Wakeup_ISR
  64              		.thumb
  65              		.thumb_func
  66              		.type	Wakeup_ISR, %function
  67              	Wakeup_ISR:
  68              	.LFB64:
  69              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  70              		.loc 1 20 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 1, uses_anonymous_args = 0
  74 0000 80B5     		push	{r7, lr}
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 7, -8
  77              		.cfi_offset 14, -4
  78 0002 00AF     		add	r7, sp, #0
  79              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  80              		.loc 1 22 0
  81 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  82              		.loc 1 23 0
  83 0008 00BF     		nop
  84 000a 80BD     		pop	{r7, pc}
  85              		.cfi_endproc
  86              	.LFE64:
  87              		.size	Wakeup_ISR, .-Wakeup_ISR
  88              		.global	Data_fileName
  89              		.data
  90              		.align	2
  91              		.type	Data_fileName, %object
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 3


  92              		.size	Data_fileName, 30
  93              	Data_fileName:
  94 0000 64617461 		.ascii	"data.txt\000"
  94      2E747874 
  94      00
  95 0009 00000000 		.space	21
  95      00000000 
  95      00000000 
  95      00000000 
  95      00000000 
  96              		.comm	try_counter,1,1
  97              		.section	.rodata
  98              		.align	2
  99              	.LC0:
 100 0000 25582D25 		.ascii	"%X-%X\000"
 100      5800
 101 0006 0000     		.align	2
 102              	.LC1:
 103 0008 6563322D 		.ascii	"ec2-18-222-229-124.us-east-2.compute.amazonaws.com\000"
 103      31382D32 
 103      32322D32 
 103      32392D31 
 103      32342E75 
 104              		.section	.text.ReadyOrNot,"ax",%progbits
 105              		.align	2
 106              		.global	ReadyOrNot
 107              		.thumb
 108              		.thumb_func
 109              		.type	ReadyOrNot, %function
 110              	ReadyOrNot:
 111              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 112              		.loc 1 41 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 24
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116 0000 B0B5     		push	{r4, r5, r7, lr}
 117              		.cfi_def_cfa_offset 16
 118              		.cfi_offset 4, -16
 119              		.cfi_offset 5, -12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 4


 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 88B0     		sub	sp, sp, #32
 123              		.cfi_def_cfa_offset 48
 124 0004 02AF     		add	r7, sp, #8
 125              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 126              		.loc 1 43 0
 127 0006 4C48     		ldr	r0, .L3
 128 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 129              		.loc 1 44 0
 130 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 131              		.loc 1 46 0
 132 0010 FF20     		movs	r0, #255
 133 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 134              		.loc 1 47 0
 135 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 136              		.loc 1 48 0
 137 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 138              		.loc 1 50 0
 139 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 140              		.loc 1 52 0
 141 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 142              		.loc 1 62 0
 143 0026 07F10C03 		add	r3, r7, #12
 144 002a 1846     		mov	r0, r3
 145 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 146              		.loc 1 63 0
 147 0030 FA68     		ldr	r2, [r7, #12]
 148 0032 3B69     		ldr	r3, [r7, #16]
 149 0034 0093     		str	r3, [sp]
 150 0036 1346     		mov	r3, r2
 151 0038 404A     		ldr	r2, .L3+4
 152 003a 1821     		movs	r1, #24
 153 003c 4048     		ldr	r0, .L3+8
 154 003e FFF7FEFF 		bl	snprintf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 5


  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 155              		.loc 1 65 0
 156 0042 404B     		ldr	r3, .L3+12
 157 0044 404A     		ldr	r2, .L3+16
 158 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-ea
 159              		.loc 1 69 0
 160 0048 404A     		ldr	r2, .L3+20
 161 004a 414B     		ldr	r3, .L3+24
 162 004c 1446     		mov	r4, r2
 163 004e 1D46     		mov	r5, r3
 164 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 165 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 166 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 167 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 168 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 169 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 170 005c 2B68     		ldr	r3, [r5]
 171 005e 1A46     		mov	r2, r3	@ movhi
 172 0060 2280     		strh	r2, [r4]	@ movhi
 173 0062 0234     		adds	r4, r4, #2
 174 0064 1B0C     		lsrs	r3, r3, #16
 175 0066 2370     		strb	r3, [r4]
  70:notoriOS.c    ****     
  71:notoriOS.c    ****     // production server
  72:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org"
  73:notoriOS.c    ****     
  74:notoriOS.c    **** 
  75:notoriOS.c    ****     system_settings.ep_port = 5000;
 176              		.loc 1 75 0
 177 0068 384B     		ldr	r3, .L3+20
 178 006a 41F28832 		movw	r2, #5000
 179 006e 5A66     		str	r2, [r3, #100]
  76:notoriOS.c    ****     // Don't need the following for new nodes
  77:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  78:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  79:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  80:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  81:notoriOS.c    ****         
  82:notoriOS.c    ****     
  83:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  84:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 180              		.loc 1 84 0
 181 0070 384B     		ldr	r3, .L3+28
 182 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 183 0074 99B2     		uxth	r1, r3
 184 0076 384C     		ldr	r4, .L3+32
 185 0078 3846     		mov	r0, r7
 186 007a 0723     		movs	r3, #7
 187 007c 0122     		movs	r2, #1
 188 007e FFF7FEFF 		bl	CreateAlarm
 189 0082 2246     		mov	r2, r4
 190 0084 3B46     		mov	r3, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 6


 191 0086 1968     		ldr	r1, [r3]	@ unaligned
 192 0088 1160     		str	r1, [r2]	@ unaligned
 193 008a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 194 008c 9380     		strh	r3, [r2, #4]	@ unaligned
  85:notoriOS.c    ****     timeToMeasure = 1u;
 195              		.loc 1 85 0
 196 008e 334B     		ldr	r3, .L3+36
 197 0090 0122     		movs	r2, #1
 198 0092 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  87:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 199              		.loc 1 87 0
 200 0094 2F4B     		ldr	r3, .L3+28
 201 0096 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 202 0098 99B2     		uxth	r1, r3
 203 009a 314C     		ldr	r4, .L3+40
 204 009c 3846     		mov	r0, r7
 205 009e 0723     		movs	r3, #7
 206 00a0 0122     		movs	r2, #1
 207 00a2 FFF7FEFF 		bl	CreateAlarm
 208 00a6 2246     		mov	r2, r4
 209 00a8 3B46     		mov	r3, r7
 210 00aa 1968     		ldr	r1, [r3]	@ unaligned
 211 00ac 1160     		str	r1, [r2]	@ unaligned
 212 00ae 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 213 00b0 9380     		strh	r3, [r2, #4]	@ unaligned
  88:notoriOS.c    ****     timeToSync = 1u;
 214              		.loc 1 88 0
 215 00b2 2C4B     		ldr	r3, .L3+44
 216 00b4 0122     		movs	r2, #1
 217 00b6 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 218              		.loc 1 90 0
 219 00b8 2B4B     		ldr	r3, .L3+48
 220 00ba 0022     		movs	r2, #0
 221 00bc 1A70     		strb	r2, [r3]
  91:notoriOS.c    ****     
  92:notoriOS.c    ****     // App Initializations
  93:notoriOS.c    ****     // APP_INTERFACE
  94:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 222              		.loc 1 94 0
 223 00be 254B     		ldr	r3, .L3+28
 224 00c0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 225 00c2 99B2     		uxth	r1, r3
 226 00c4 294C     		ldr	r4, .L3+52
 227 00c6 3846     		mov	r0, r7
 228 00c8 0723     		movs	r3, #7
 229 00ca 0122     		movs	r2, #1
 230 00cc FFF7FEFF 		bl	CreateAlarm
 231 00d0 2246     		mov	r2, r4
 232 00d2 3B46     		mov	r3, r7
 233 00d4 1968     		ldr	r1, [r3]	@ unaligned
 234 00d6 1160     		str	r1, [r2]	@ unaligned
 235 00d8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 236 00da 9380     		strh	r3, [r2, #4]	@ unaligned
  95:notoriOS.c    ****     timeToAppLED = 1u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 7


 237              		.loc 1 95 0
 238 00dc 244B     		ldr	r3, .L3+56
 239 00de 0122     		movs	r2, #1
 240 00e0 1A70     		strb	r2, [r3]
  96:notoriOS.c    ****     
  97:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
 241              		.loc 1 97 0
 242 00e2 1C4B     		ldr	r3, .L3+28
 243 00e4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 244 00e6 99B2     		uxth	r1, r3
 245 00e8 224C     		ldr	r4, .L3+60
 246 00ea 3846     		mov	r0, r7
 247 00ec 0723     		movs	r3, #7
 248 00ee 0122     		movs	r2, #1
 249 00f0 FFF7FEFF 		bl	CreateAlarm
 250 00f4 2246     		mov	r2, r4
 251 00f6 3B46     		mov	r3, r7
 252 00f8 1968     		ldr	r1, [r3]	@ unaligned
 253 00fa 1160     		str	r1, [r2]	@ unaligned
 254 00fc 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 255 00fe 9380     		strh	r3, [r2, #4]	@ unaligned
  98:notoriOS.c    ****     timetoLevelSensor = 1u;
 256              		.loc 1 98 0
 257 0100 1D4B     		ldr	r3, .L3+64
 258 0102 0122     		movs	r2, #1
 259 0104 1A70     		strb	r2, [r3]
  99:notoriOS.c    ****     
 100:notoriOS.c    ****     alarmDownstreamLevelSensor = CreateAlarm(updatable_parameters.Downstream_Level_Sensor_freq,ALAR
 260              		.loc 1 100 0
 261 0106 134B     		ldr	r3, .L3+28
 262 0108 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 263 010a 99B2     		uxth	r1, r3
 264 010c 1B4C     		ldr	r4, .L3+68
 265 010e 3846     		mov	r0, r7
 266 0110 0723     		movs	r3, #7
 267 0112 0122     		movs	r2, #1
 268 0114 FFF7FEFF 		bl	CreateAlarm
 269 0118 2246     		mov	r2, r4
 270 011a 3B46     		mov	r3, r7
 271 011c 1968     		ldr	r1, [r3]	@ unaligned
 272 011e 1160     		str	r1, [r2]	@ unaligned
 273 0120 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 274 0122 9380     		strh	r3, [r2, #4]	@ unaligned
 101:notoriOS.c    ****     timetoDownstreamLevelSensor = 1u;
 275              		.loc 1 101 0
 276 0124 164B     		ldr	r3, .L3+72
 277 0126 0122     		movs	r2, #1
 278 0128 1A70     		strb	r2, [r3]
 102:notoriOS.c    ****     
 103:notoriOS.c    ****     //alarmValve = CreateAlarm(updatable_parameters.valve_freq, ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 104:notoriOS.c    ****     //timeToValve = 1u;
 105:notoriOS.c    ****     
 106:notoriOS.c    ****     // Initialize the try counter to 0
 107:notoriOS.c    ****     uint8 try_counter = 0;
 279              		.loc 1 107 0
 280 012a 0023     		movs	r3, #0
 281 012c FB75     		strb	r3, [r7, #23]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 8


 108:notoriOS.c    **** }
 282              		.loc 1 108 0
 283 012e 00BF     		nop
 284 0130 1837     		adds	r7, r7, #24
 285              		.cfi_def_cfa_offset 16
 286 0132 BD46     		mov	sp, r7
 287              		.cfi_def_cfa_register 13
 288              		@ sp needed
 289 0134 B0BD     		pop	{r4, r5, r7, pc}
 290              	.L4:
 291 0136 00BF     		.align	2
 292              	.L3:
 293 0138 00000000 		.word	Wakeup_ISR
 294 013c 00000000 		.word	.LC0
 295 0140 04000000 		.word	system_info+4
 296 0144 00000000 		.word	system_info
 297 0148 00000000 		.word	modem_info
 298 014c 00000000 		.word	system_settings
 299 0150 08000000 		.word	.LC1
 300 0154 00000000 		.word	updatable_parameters
 301 0158 00000000 		.word	alarmMeasure
 302 015c 00000000 		.word	timeToMeasure
 303 0160 00000000 		.word	alarmSync
 304 0164 00000000 		.word	timeToSync
 305 0168 00000000 		.word	timeToSycnRemoteParams
 306 016c 00000000 		.word	alarmAppLED
 307 0170 00000000 		.word	timeToAppLED
 308 0174 00000000 		.word	alarmLevelSensor
 309 0178 00000000 		.word	timetoLevelSensor
 310 017c 00000000 		.word	alarmDownstreamLevelSensor
 311 0180 00000000 		.word	timetoDownstreamLevelSensor
 312              		.cfi_endproc
 313              	.LFE65:
 314              		.size	ReadyOrNot, .-ReadyOrNot
 315              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 316              		.align	2
 317              		.global	WorkWorkWorkWorkWorkWork
 318              		.thumb
 319              		.thumb_func
 320              		.type	WorkWorkWorkWorkWorkWork, %function
 321              	WorkWorkWorkWorkWorkWork:
 322              	.LFB66:
 109:notoriOS.c    **** 
 110:notoriOS.c    **** 
 111:notoriOS.c    **** // ==============================================
 112:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 113:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 114:notoriOS.c    **** //
 115:notoriOS.c    **** // Prorcesses core tasks
 116:notoriOS.c    **** // ==============================================
 117:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 118:notoriOS.c    **** {
 323              		.loc 1 118 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 8
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 9


 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 7, -8
 330              		.cfi_offset 14, -4
 331 0002 82B0     		sub	sp, sp, #8
 332              		.cfi_def_cfa_offset 16
 333 0004 00AF     		add	r7, sp, #0
 334              		.cfi_def_cfa_register 7
 119:notoriOS.c    ****     
 120:notoriOS.c    ****     
 121:notoriOS.c    ****     
 122:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 123:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 124:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 125:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 126:notoriOS.c    ****     
 127:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 128:notoriOS.c    ****     if(timeToSycnRemoteParams){
 335              		.loc 1 128 0
 336 0006 304B     		ldr	r3, .L14
 337 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 000a 002B     		cmp	r3, #0
 339 000c 06D0     		beq	.L6
 129:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 340              		.loc 1 129 0
 341 000e FFF7FEFF 		bl	configureRemoteParams
 342 0012 0346     		mov	r3, r0
 343 0014 1A46     		mov	r2, r3
 344 0016 2C4B     		ldr	r3, .L14
 345 0018 1A70     		strb	r2, [r3]
 346 001a 42E0     		b	.L7
 347              	.L6:
 130:notoriOS.c    ****     }
 131:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 132:notoriOS.c    ****     else if(timeToMeasure){
 348              		.loc 1 132 0
 349 001c 2B4B     		ldr	r3, .L14+4
 350 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351 0020 002B     		cmp	r3, #0
 352 0022 06D0     		beq	.L8
 133:notoriOS.c    ****         // on custom nodes makeMeasurements will just be battery voltages
 134:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 353              		.loc 1 134 0
 354 0024 FFF7FEFF 		bl	makeMeasurements
 355 0028 0346     		mov	r3, r0
 356 002a 1A46     		mov	r2, r3
 357 002c 274B     		ldr	r3, .L14+4
 358 002e 1A70     		strb	r2, [r3]
 359 0030 37E0     		b	.L7
 360              	.L8:
 135:notoriOS.c    ****     }  
 136:notoriOS.c    ****     // custom nodes
 137:notoriOS.c    ****     // APP_INTERFACE
 138:notoriOS.c    ****     else if(updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 361              		.loc 1 138 0
 362 0032 274B     		ldr	r3, .L14+8
 363 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364 0036 042B     		cmp	r3, #4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 10


 365 0038 33D1     		bne	.L7
 139:notoriOS.c    ****         if(App_LED_enabled && timeToAppLED){
 366              		.loc 1 139 0
 367 003a 264B     		ldr	r3, .L14+12
 368 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 369 003e 002B     		cmp	r3, #0
 370 0040 09D0     		beq	.L9
 371              		.loc 1 139 0 is_stmt 0 discriminator 1
 372 0042 254B     		ldr	r3, .L14+16
 373 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 0046 002B     		cmp	r3, #0
 375 0048 05D0     		beq	.L9
 140:notoriOS.c    ****             timeToAppLED = App_LED();
 376              		.loc 1 140 0 is_stmt 1
 377 004a FFF7FEFF 		bl	App_LED
 378 004e 0346     		mov	r3, r0
 379 0050 1A46     		mov	r2, r3
 380 0052 214B     		ldr	r3, .L14+16
 381 0054 1A70     		strb	r2, [r3]
 382              	.L9:
 141:notoriOS.c    ****         }
 142:notoriOS.c    ****         if(level_sensor_enabled && timetoLevelSensor){
 383              		.loc 1 142 0
 384 0056 214B     		ldr	r3, .L14+20
 385 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 386 005a 002B     		cmp	r3, #0
 387 005c 09D0     		beq	.L10
 388              		.loc 1 142 0 is_stmt 0 discriminator 1
 389 005e 204B     		ldr	r3, .L14+24
 390 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 391 0062 002B     		cmp	r3, #0
 392 0064 05D0     		beq	.L10
 143:notoriOS.c    ****             timetoLevelSensor = level_sensor();
 393              		.loc 1 143 0 is_stmt 1
 394 0066 FFF7FEFF 		bl	level_sensor
 395 006a 0346     		mov	r3, r0
 396 006c 1A46     		mov	r2, r3
 397 006e 1C4B     		ldr	r3, .L14+24
 398 0070 1A70     		strb	r2, [r3]
 399              	.L10:
 144:notoriOS.c    ****         }
 145:notoriOS.c    ****         if(downstream_level_sensor_enabled && timetoDownstreamLevelSensor){
 400              		.loc 1 145 0
 401 0072 1C4B     		ldr	r3, .L14+28
 402 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 403 0076 002B     		cmp	r3, #0
 404 0078 09D0     		beq	.L11
 405              		.loc 1 145 0 is_stmt 0 discriminator 1
 406 007a 1B4B     		ldr	r3, .L14+32
 407 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 408 007e 002B     		cmp	r3, #0
 409 0080 05D0     		beq	.L11
 146:notoriOS.c    ****             timetoDownstreamLevelSensor = downstream_level_sensor();
 410              		.loc 1 146 0 is_stmt 1
 411 0082 FFF7FEFF 		bl	downstream_level_sensor
 412 0086 0346     		mov	r3, r0
 413 0088 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 11


 414 008a 174B     		ldr	r3, .L14+32
 415 008c 1A70     		strb	r2, [r3]
 416              	.L11:
 147:notoriOS.c    ****         }
 148:notoriOS.c    ****         if(valve_enabled){
 417              		.loc 1 148 0
 418 008e 174B     		ldr	r3, .L14+36
 419 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 420 0092 002B     		cmp	r3, #0
 421 0094 05D0     		beq	.L7
 149:notoriOS.c    ****             valve_enabled = App_Valve();
 422              		.loc 1 149 0
 423 0096 FFF7FEFF 		bl	App_Valve
 424 009a 0346     		mov	r3, r0
 425 009c 1A46     		mov	r2, r3
 426 009e 134B     		ldr	r3, .L14+36
 427 00a0 1A70     		strb	r2, [r3]
 428              	.L7:
 150:notoriOS.c    ****         }
 151:notoriOS.c    ****         // add other custom apps below
 152:notoriOS.c    ****     }
 153:notoriOS.c    ****     if(timeToSync){
 429              		.loc 1 153 0
 430 00a2 134B     		ldr	r3, .L14+40
 431 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 432 00a6 002B     		cmp	r3, #0
 433 00a8 05D0     		beq	.L12
 154:notoriOS.c    ****         timeToSync = syncData();
 434              		.loc 1 154 0
 435 00aa FFF7FEFF 		bl	syncData
 436 00ae 0346     		mov	r3, r0
 437 00b0 1A46     		mov	r2, r3
 438 00b2 0F4B     		ldr	r3, .L14+40
 439 00b4 1A70     		strb	r2, [r3]
 440              	.L12:
 155:notoriOS.c    ****     } 
 156:notoriOS.c    ****     
 157:notoriOS.c    **** 
 158:notoriOS.c    ****     
 159:notoriOS.c    ****     // Print the countdown to the next alarm
 160:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 161:notoriOS.c    ****     
 162:notoriOS.c    ****     
 163:notoriOS.c    ****     // Check modem state machine on every loop
 164:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 441              		.loc 1 164 0
 442 00b6 FFF7FEFF 		bl	modem_process_tasks
 443 00ba 0346     		mov	r3, r0
 444 00bc FB71     		strb	r3, [r7, #7]
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     return 0u +  modem_status;  
 445              		.loc 1 166 0
 446 00be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 167:notoriOS.c    **** }
 447              		.loc 1 167 0
 448 00c0 1846     		mov	r0, r3
 449 00c2 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 12


 450              		.cfi_def_cfa_offset 8
 451 00c4 BD46     		mov	sp, r7
 452              		.cfi_def_cfa_register 13
 453              		@ sp needed
 454 00c6 80BD     		pop	{r7, pc}
 455              	.L15:
 456              		.align	2
 457              	.L14:
 458 00c8 00000000 		.word	timeToSycnRemoteParams
 459 00cc 00000000 		.word	timeToMeasure
 460 00d0 00000000 		.word	updatable_parameters
 461 00d4 00000000 		.word	App_LED_enabled
 462 00d8 00000000 		.word	timeToAppLED
 463 00dc 00000000 		.word	level_sensor_enabled
 464 00e0 00000000 		.word	timetoLevelSensor
 465 00e4 00000000 		.word	downstream_level_sensor_enabled
 466 00e8 00000000 		.word	timetoDownstreamLevelSensor
 467 00ec 00000000 		.word	valve_enabled
 468 00f0 00000000 		.word	timeToSync
 469              		.cfi_endproc
 470              	.LFE66:
 471              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 472              		.section	.text.LayBack,"ax",%progbits
 473              		.align	2
 474              		.global	LayBack
 475              		.thumb
 476              		.thumb_func
 477              		.type	LayBack, %function
 478              	LayBack:
 479              	.LFB67:
 168:notoriOS.c    **** 
 169:notoriOS.c    **** 
 170:notoriOS.c    **** 
 171:notoriOS.c    **** 
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 176:notoriOS.c    **** //      - Snoop Dogg (1993)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 179:notoriOS.c    **** // ==============================================
 180:notoriOS.c    **** void LayBack()
 181:notoriOS.c    **** {
 480              		.loc 1 181 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484 0000 80B5     		push	{r7, lr}
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 182:notoriOS.c    ****   
 183:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 490              		.loc 1 183 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 13


 491 0004 FFF7FEFF 		bl	modem_sleep
 184:notoriOS.c    ****     
 185:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 186:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 492              		.loc 1 186 0
 493 0008 FFF7FEFF 		bl	debug_sleep
 187:notoriOS.c    ****     
 188:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 494              		.loc 1 188 0
 495 000c FFF7FEFF 		bl	CyPmSaveClocks
 189:notoriOS.c    ****     
 190:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 191:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 192:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 193:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 194:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 195:notoriOS.c    ****     //CyPmHibernate();
 196:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 197:notoriOS.c    **** 
 198:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 496              		.loc 1 198 0
 497 0010 4FF40061 		mov	r1, #2048
 498 0014 0020     		movs	r0, #0
 499 0016 FFF7FEFF 		bl	CyPmSleep
 199:notoriOS.c    **** 
 200:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 500              		.loc 1 200 0
 501 001a FFF7FEFF 		bl	CyPmRestoreClocks
 201:notoriOS.c    **** 
 202:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 502              		.loc 1 202 0
 503 001e FFF7FEFF 		bl	debug_wakeup
 203:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 504              		.loc 1 203 0
 505 0022 FFF7FEFF 		bl	modem_wakeup
 204:notoriOS.c    **** 
 205:notoriOS.c    **** }
 506              		.loc 1 205 0
 507 0026 00BF     		nop
 508 0028 80BD     		pop	{r7, pc}
 509              		.cfi_endproc
 510              	.LFE67:
 511              		.size	LayBack, .-LayBack
 512 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 513              		.align	2
 514              		.global	AyoItsTime
 515              		.thumb
 516              		.thumb_func
 517              		.type	AyoItsTime, %function
 518              	AyoItsTime:
 519              	.LFB68:
 206:notoriOS.c    **** 
 207:notoriOS.c    **** 
 208:notoriOS.c    **** // ==============================================
 209:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 210:notoriOS.c    **** //      - NAS (1994)
 211:notoriOS.c    **** //
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 14


 212:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 213:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 214:notoriOS.c    **** // It will add tasks to the work queue,
 215:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 216:notoriOS.c    **** // ==============================================
 217:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 218:notoriOS.c    **** {
 520              		.loc 1 218 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0000 80B5     		push	{r7, lr}
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 82B0     		sub	sp, sp, #8
 529              		.cfi_def_cfa_offset 16
 530 0004 00AF     		add	r7, sp, #0
 531              		.cfi_def_cfa_register 7
 532 0006 0346     		mov	r3, r0
 533 0008 FB71     		strb	r3, [r7, #7]
 219:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 220:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 534              		.loc 1 220 0
 535 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 536 000c 1946     		mov	r1, r3
 537 000e 1C48     		ldr	r0, .L24
 538 0010 FFF7FEFF 		bl	AlarmReady
 539 0014 0346     		mov	r3, r0
 540 0016 002B     		cmp	r3, #0
 541 0018 02D0     		beq	.L18
 221:notoriOS.c    ****     {
 222:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 223:notoriOS.c    ****         timeToMeasure = 1u;
 542              		.loc 1 223 0
 543 001a 1A4B     		ldr	r3, .L24+4
 544 001c 0122     		movs	r2, #1
 545 001e 1A70     		strb	r2, [r3]
 546              	.L18:
 224:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 225:notoriOS.c    ****         
 226:notoriOS.c    ****     }
 227:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 547              		.loc 1 227 0
 548 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 549 0022 1946     		mov	r1, r3
 550 0024 1848     		ldr	r0, .L24+8
 551 0026 FFF7FEFF 		bl	AlarmReady
 552 002a 0346     		mov	r3, r0
 553 002c 002B     		cmp	r3, #0
 554 002e 02D0     		beq	.L19
 228:notoriOS.c    ****     {
 229:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 230:notoriOS.c    ****         timeToSync = 1u;
 555              		.loc 1 230 0
 556 0030 164B     		ldr	r3, .L24+12
 557 0032 0122     		movs	r2, #1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 15


 558 0034 1A70     		strb	r2, [r3]
 559              	.L19:
 231:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 232:notoriOS.c    ****     }
 233:notoriOS.c    ****     
 234:notoriOS.c    ****     // APP_INTERFACE
 235:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 560              		.loc 1 235 0
 561 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 562 0038 1946     		mov	r1, r3
 563 003a 1548     		ldr	r0, .L24+16
 564 003c FFF7FEFF 		bl	AlarmReady
 565 0040 0346     		mov	r3, r0
 566 0042 002B     		cmp	r3, #0
 567 0044 02D0     		beq	.L20
 236:notoriOS.c    ****     {
 237:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 238:notoriOS.c    ****         timeToAppLED = 1u;
 568              		.loc 1 238 0
 569 0046 134B     		ldr	r3, .L24+20
 570 0048 0122     		movs	r2, #1
 571 004a 1A70     		strb	r2, [r3]
 572              	.L20:
 239:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 240:notoriOS.c    ****     }
 241:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 573              		.loc 1 241 0
 574 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 575 004e 1946     		mov	r1, r3
 576 0050 1148     		ldr	r0, .L24+24
 577 0052 FFF7FEFF 		bl	AlarmReady
 578 0056 0346     		mov	r3, r0
 579 0058 002B     		cmp	r3, #0
 580 005a 02D0     		beq	.L21
 242:notoriOS.c    ****         timetoLevelSensor = 1u;
 581              		.loc 1 242 0
 582 005c 0F4B     		ldr	r3, .L24+28
 583 005e 0122     		movs	r2, #1
 584 0060 1A70     		strb	r2, [r3]
 585              	.L21:
 243:notoriOS.c    ****     }
 244:notoriOS.c    ****     if(AlarmReady(&alarmDownstreamLevelSensor, alarmType)){
 586              		.loc 1 244 0
 587 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 588 0064 1946     		mov	r1, r3
 589 0066 0E48     		ldr	r0, .L24+32
 590 0068 FFF7FEFF 		bl	AlarmReady
 591 006c 0346     		mov	r3, r0
 592 006e 002B     		cmp	r3, #0
 593 0070 02D0     		beq	.L23
 245:notoriOS.c    ****         timetoDownstreamLevelSensor = 1u;
 594              		.loc 1 245 0
 595 0072 0C4B     		ldr	r3, .L24+36
 596 0074 0122     		movs	r2, #1
 597 0076 1A70     		strb	r2, [r3]
 598              	.L23:
 246:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 16


 247:notoriOS.c    ****     /*
 248:notoriOS.c    ****     if(AlarmReady(&alarmValve, alarmType)){
 249:notoriOS.c    ****         timeToValve = 1u;
 250:notoriOS.c    ****     }
 251:notoriOS.c    ****     */
 252:notoriOS.c    **** }
 599              		.loc 1 252 0
 600 0078 00BF     		nop
 601 007a 0837     		adds	r7, r7, #8
 602              		.cfi_def_cfa_offset 8
 603 007c BD46     		mov	sp, r7
 604              		.cfi_def_cfa_register 13
 605              		@ sp needed
 606 007e 80BD     		pop	{r7, pc}
 607              	.L25:
 608              		.align	2
 609              	.L24:
 610 0080 00000000 		.word	alarmMeasure
 611 0084 00000000 		.word	timeToMeasure
 612 0088 00000000 		.word	alarmSync
 613 008c 00000000 		.word	timeToSync
 614 0090 00000000 		.word	alarmAppLED
 615 0094 00000000 		.word	timeToAppLED
 616 0098 00000000 		.word	alarmLevelSensor
 617 009c 00000000 		.word	timetoLevelSensor
 618 00a0 00000000 		.word	alarmDownstreamLevelSensor
 619 00a4 00000000 		.word	timetoDownstreamLevelSensor
 620              		.cfi_endproc
 621              	.LFE68:
 622              		.size	AyoItsTime, .-AyoItsTime
 623              		.section	.text.AlarmReady,"ax",%progbits
 624              		.align	2
 625              		.global	AlarmReady
 626              		.thumb
 627              		.thumb_func
 628              		.type	AlarmReady, %function
 629              	AlarmReady:
 630              	.LFB69:
 253:notoriOS.c    **** 
 254:notoriOS.c    **** 
 255:notoriOS.c    **** // ==============================================
 256:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 257:notoriOS.c    **** // ==============================================
 258:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 259:notoriOS.c    **** {
 631              		.loc 1 259 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635 0000 80B5     		push	{r7, lr}
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 7, -8
 638              		.cfi_offset 14, -4
 639 0002 82B0     		sub	sp, sp, #8
 640              		.cfi_def_cfa_offset 16
 641 0004 00AF     		add	r7, sp, #0
 642              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 17


 643 0006 7860     		str	r0, [r7, #4]
 644 0008 0B46     		mov	r3, r1
 645 000a FB70     		strb	r3, [r7, #3]
 260:notoriOS.c    ****     // if the countDownType matches the alarmType
 261:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 646              		.loc 1 261 0
 647 000c 7B68     		ldr	r3, [r7, #4]
 648 000e 1B79     		ldrb	r3, [r3, #4]
 649 0010 DBB2     		uxtb	r3, r3
 650 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 651 0014 9A42     		cmp	r2, r3
 652 0016 12D1     		bne	.L27
 262:notoriOS.c    ****        
 263:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 264:notoriOS.c    ****         // Decrement the count down value by 1
 265:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 653              		.loc 1 265 0
 654 0018 7B68     		ldr	r3, [r7, #4]
 655 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 656 001c 1BB2     		sxth	r3, r3
 657 001e 9BB2     		uxth	r3, r3
 658 0020 013B     		subs	r3, r3, #1
 659 0022 9BB2     		uxth	r3, r3
 660 0024 1AB2     		sxth	r2, r3
 661 0026 7B68     		ldr	r3, [r7, #4]
 662 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 266:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 267:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 663              		.loc 1 267 0
 664 002a 7B68     		ldr	r3, [r7, #4]
 665 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 666 002e 1BB2     		sxth	r3, r3
 667 0030 002B     		cmp	r3, #0
 668 0032 04DC     		bgt	.L27
 268:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 669              		.loc 1 268 0
 670 0034 7868     		ldr	r0, [r7, #4]
 671 0036 FFF7FEFF 		bl	ResetAlarm
 269:notoriOS.c    ****             return 1u;
 672              		.loc 1 269 0
 673 003a 0123     		movs	r3, #1
 674 003c 00E0     		b	.L28
 675              	.L27:
 270:notoriOS.c    ****         } 
 271:notoriOS.c    ****     }
 272:notoriOS.c    ****     
 273:notoriOS.c    ****     return 0u; // Otherwise return 0
 676              		.loc 1 273 0
 677 003e 0023     		movs	r3, #0
 678              	.L28:
 274:notoriOS.c    **** }
 679              		.loc 1 274 0
 680 0040 1846     		mov	r0, r3
 681 0042 0837     		adds	r7, r7, #8
 682              		.cfi_def_cfa_offset 8
 683 0044 BD46     		mov	sp, r7
 684              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 18


 685              		@ sp needed
 686 0046 80BD     		pop	{r7, pc}
 687              		.cfi_endproc
 688              	.LFE69:
 689              		.size	AlarmReady, .-AlarmReady
 690              		.section	.text.ResetAlarm,"ax",%progbits
 691              		.align	2
 692              		.global	ResetAlarm
 693              		.thumb
 694              		.thumb_func
 695              		.type	ResetAlarm, %function
 696              	ResetAlarm:
 697              	.LFB70:
 275:notoriOS.c    **** 
 276:notoriOS.c    **** // ==============================================
 277:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 278:notoriOS.c    **** // ==============================================
 279:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 280:notoriOS.c    **** {
 698              		.loc 1 280 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 8
 701              		@ frame_needed = 1, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 703 0000 80B4     		push	{r7}
 704              		.cfi_def_cfa_offset 4
 705              		.cfi_offset 7, -4
 706 0002 83B0     		sub	sp, sp, #12
 707              		.cfi_def_cfa_offset 16
 708 0004 00AF     		add	r7, sp, #0
 709              		.cfi_def_cfa_register 7
 710 0006 7860     		str	r0, [r7, #4]
 281:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 282:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 711              		.loc 1 282 0
 712 0008 7B68     		ldr	r3, [r7, #4]
 713 000a 1B88     		ldrh	r3, [r3]	@ movhi
 714 000c 9BB2     		uxth	r3, r3
 715 000e 1AB2     		sxth	r2, r3
 716 0010 7B68     		ldr	r3, [r7, #4]
 717 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 283:notoriOS.c    **** }
 718              		.loc 1 283 0
 719 0014 00BF     		nop
 720 0016 0C37     		adds	r7, r7, #12
 721              		.cfi_def_cfa_offset 4
 722 0018 BD46     		mov	sp, r7
 723              		.cfi_def_cfa_register 13
 724              		@ sp needed
 725 001a 80BC     		pop	{r7}
 726              		.cfi_restore 7
 727              		.cfi_def_cfa_offset 0
 728 001c 7047     		bx	lr
 729              		.cfi_endproc
 730              	.LFE70:
 731              		.size	ResetAlarm, .-ResetAlarm
 732 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 19


 733              		.align	2
 734              		.global	CreateAlarm
 735              		.thumb
 736              		.thumb_func
 737              		.type	CreateAlarm, %function
 738              	CreateAlarm:
 739              	.LFB71:
 284:notoriOS.c    **** 
 285:notoriOS.c    **** // ==============================================
 286:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 287:notoriOS.c    **** // ==============================================
 288:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 289:notoriOS.c    **** {
 740              		.loc 1 289 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 16
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745 0000 80B4     		push	{r7}
 746              		.cfi_def_cfa_offset 4
 747              		.cfi_offset 7, -4
 748 0002 85B0     		sub	sp, sp, #20
 749              		.cfi_def_cfa_offset 24
 750 0004 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]
 753 0008 0846     		mov	r0, r1
 754 000a 1146     		mov	r1, r2
 755 000c 1A46     		mov	r2, r3
 756 000e 0346     		mov	r3, r0	@ movhi
 757 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 758 0012 0B46     		mov	r3, r1
 759 0014 7B70     		strb	r3, [r7, #1]
 760 0016 1346     		mov	r3, r2
 761 0018 3B70     		strb	r3, [r7]
 290:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 291:notoriOS.c    ****     alarm newAlarm;
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 294:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 762              		.loc 1 294 0
 763 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 764 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 295:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 765              		.loc 1 295 0
 766 001e 7B78     		ldrb	r3, [r7, #1]
 767 0020 3B73     		strb	r3, [r7, #12]
 296:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 768              		.loc 1 296 0
 769 0022 3B78     		ldrb	r3, [r7]
 770 0024 7B73     		strb	r3, [r7, #13]
 297:notoriOS.c    ****     
 298:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 299:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 300:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 771              		.loc 1 300 0
 772 0026 B7F90230 		ldrsh	r3, [r7, #2]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 20


 773 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 301:notoriOS.c    ****     
 302:notoriOS.c    ****     return newAlarm;
 774              		.loc 1 302 0
 775 002c 7B68     		ldr	r3, [r7, #4]
 776 002e 1A46     		mov	r2, r3
 777 0030 07F10803 		add	r3, r7, #8
 778 0034 1868     		ldr	r0, [r3]	@ unaligned
 779 0036 1060     		str	r0, [r2]	@ unaligned
 780 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 781 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 303:notoriOS.c    ****     
 304:notoriOS.c    **** }
 782              		.loc 1 304 0
 783 003c 7868     		ldr	r0, [r7, #4]
 784 003e 1437     		adds	r7, r7, #20
 785              		.cfi_def_cfa_offset 4
 786 0040 BD46     		mov	sp, r7
 787              		.cfi_def_cfa_register 13
 788              		@ sp needed
 789 0042 80BC     		pop	{r7}
 790              		.cfi_restore 7
 791              		.cfi_def_cfa_offset 0
 792 0044 7047     		bx	lr
 793              		.cfi_endproc
 794              	.LFE71:
 795              		.size	CreateAlarm, .-CreateAlarm
 796 0046 00BF     		.section	.rodata
 797 003b 00       		.align	2
 798              	.LC2:
 799 003c 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 799      2D2D2D2D 
 799      2D2D2D2D 
 799      2D424547 
 799      494E2054 
 800 0066 0000     		.align	2
 801              	.LC3:
 802 0068 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 802      3D25732C 
 802      2053494D 
 802      49443D25 
 802      732C2044 
 803 0087 00       		.align	2
 804              	.LC4:
 805 0088 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 805      2D2D2D2D 
 805      2D2D2D2D 
 805      2D2D2D45 
 805      4E442054 
 806 00b1 00       		.ascii	"\000"
 807              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 808              		.align	2
 809              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 810              		.thumb
 811              		.thumb_func
 812              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 813              	ChickityCheckYourselfBeforeYouWreckYourself:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 21


 814              	.LFB72:
 305:notoriOS.c    **** 
 306:notoriOS.c    **** // ==============================================
 307:notoriOS.c    **** // Dropping bombs on your moms
 308:notoriOS.c    **** //      - Ice Cube (1992)
 309:notoriOS.c    **** //
 310:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 311:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 312:notoriOS.c    **** // ==============================================
 313:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 815              		.loc 1 313 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 2720
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819 0000 90B5     		push	{r4, r7, lr}
 820              		.cfi_def_cfa_offset 12
 821              		.cfi_offset 4, -12
 822              		.cfi_offset 7, -8
 823              		.cfi_offset 14, -4
 824 0002 ADF61C4D 		subw	sp, sp, #3100
 825              		.cfi_def_cfa_offset 3112
 826 0006 5EAF     		add	r7, sp, #376
 827              		.cfi_def_cfa 7, 2736
 314:notoriOS.c    **** 
 315:notoriOS.c    ****     //test_t t_influx = influx_test();
 316:notoriOS.c    ****     //printTestStatus(t_influx);
 317:notoriOS.c    ****     
 318:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 828              		.loc 1 318 0
 829 0008 4B49     		ldr	r1, .L33
 830 000a 0320     		movs	r0, #3
 831 000c FFF7FEFF 		bl	printNotif
 319:notoriOS.c    ****     
 320:notoriOS.c    ****     // Test level sensor
 321:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 832              		.loc 1 321 0
 833 0010 07F61C13 		addw	r3, r7, #2332
 834 0014 1846     		mov	r0, r3
 835 0016 FFF7FEFF 		bl	level_sensor_test
 322:notoriOS.c    ****     printTestStatus(t_level_sensor);
 836              		.loc 1 322 0
 837 001a 07F61C14 		addw	r4, r7, #2332
 838 001e 6846     		mov	r0, sp
 839 0020 04F11003 		add	r3, r4, #16
 840 0024 40F27112 		movw	r2, #369
 841 0028 1946     		mov	r1, r3
 842 002a FFF7FEFF 		bl	memcpy
 843 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 844 0032 FFF7FEFF 		bl	printTestStatus
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     // Test downstream level sensor
 325:notoriOS.c    ****     test_t t_down_level = downstream_level_sensor_test();
 845              		.loc 1 325 0
 846 0036 07F5F363 		add	r3, r7, #1944
 847 003a 1846     		mov	r0, r3
 848 003c FFF7FEFF 		bl	downstream_level_sensor_test
 326:notoriOS.c    ****     printTestStatus(t_down_level);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 22


 849              		.loc 1 326 0
 850 0040 07F5F364 		add	r4, r7, #1944
 851 0044 6846     		mov	r0, sp
 852 0046 04F11003 		add	r3, r4, #16
 853 004a 40F27112 		movw	r2, #369
 854 004e 1946     		mov	r1, r3
 855 0050 FFF7FEFF 		bl	memcpy
 856 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 857 0058 FFF7FEFF 		bl	printTestStatus
 327:notoriOS.c    ****     
 328:notoriOS.c    ****     // Test valve
 329:notoriOS.c    ****     test_t t_valve = valve_test();
 858              		.loc 1 329 0
 859 005c 07F21463 		addw	r3, r7, #1556
 860 0060 1846     		mov	r0, r3
 861 0062 FFF7FEFF 		bl	valve_test
 330:notoriOS.c    ****     printTestStatus(t_valve);
 862              		.loc 1 330 0
 863 0066 07F21464 		addw	r4, r7, #1556
 864 006a 6846     		mov	r0, sp
 865 006c 04F11003 		add	r3, r4, #16
 866 0070 40F27112 		movw	r2, #369
 867 0074 1946     		mov	r1, r3
 868 0076 FFF7FEFF 		bl	memcpy
 869 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 870 007e FFF7FEFF 		bl	printTestStatus
 331:notoriOS.c    ****     
 332:notoriOS.c    ****     // Test voltages
 333:notoriOS.c    ****     test_t t_voltages = voltages_test();
 871              		.loc 1 333 0
 872 0082 07F59263 		add	r3, r7, #1168
 873 0086 1846     		mov	r0, r3
 874 0088 FFF7FEFF 		bl	voltages_test
 334:notoriOS.c    ****     printTestStatus(t_voltages);
 875              		.loc 1 334 0
 876 008c 07F59264 		add	r4, r7, #1168
 877 0090 6846     		mov	r0, sp
 878 0092 04F11003 		add	r3, r4, #16
 879 0096 40F27112 		movw	r2, #369
 880 009a 1946     		mov	r1, r3
 881 009c FFF7FEFF 		bl	memcpy
 882 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 883 00a4 FFF7FEFF 		bl	printTestStatus
 335:notoriOS.c    ****  
 336:notoriOS.c    ****     // Test voltages
 337:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 884              		.loc 1 337 0
 885 00a8 07F54373 		add	r3, r7, #780
 886 00ac 1846     		mov	r0, r3
 887 00ae FFF7FEFF 		bl	pressure_sensor_test
 338:notoriOS.c    ****     printTestStatus(t_pressure);
 888              		.loc 1 338 0
 889 00b2 07F54374 		add	r4, r7, #780
 890 00b6 6846     		mov	r0, sp
 891 00b8 04F11003 		add	r3, r4, #16
 892 00bc 40F27112 		movw	r2, #369
 893 00c0 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 23


 894 00c2 FFF7FEFF 		bl	memcpy
 895 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 896 00ca FFF7FEFF 		bl	printTestStatus
 339:notoriOS.c    ****     
 340:notoriOS.c    ****     // Test SD card
 341:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 897              		.loc 1 341 0
 898 00ce 07F5C473 		add	r3, r7, #392
 899 00d2 1846     		mov	r0, r3
 900 00d4 FFF7FEFF 		bl	SD_card_test
 342:notoriOS.c    ****     printTestStatus(t_sd_card);
 901              		.loc 1 342 0
 902 00d8 07F5C474 		add	r4, r7, #392
 903 00dc 6846     		mov	r0, sp
 904 00de 04F11003 		add	r3, r4, #16
 905 00e2 40F27112 		movw	r2, #369
 906 00e6 1946     		mov	r1, r3
 907 00e8 FFF7FEFF 		bl	memcpy
 908 00ec 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 909 00f0 FFF7FEFF 		bl	printTestStatus
 343:notoriOS.c    ****     
 344:notoriOS.c    ****     // Test modem
 345:notoriOS.c    ****     test_t t_modem = modem_test();
 910              		.loc 1 345 0
 911 00f4 3B1D     		adds	r3, r7, #4
 912 00f6 1846     		mov	r0, r3
 913 00f8 FFF7FEFF 		bl	modem_test
 346:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 914              		.loc 1 346 0
 915 00fc 0F4B     		ldr	r3, .L33+4
 916 00fe 0093     		str	r3, [sp]
 917 0100 0F4B     		ldr	r3, .L33+8
 918 0102 104A     		ldr	r2, .L33+12
 919 0104 1049     		ldr	r1, .L33+16
 920 0106 0320     		movs	r0, #3
 921 0108 FFF7FEFF 		bl	printNotif
 347:notoriOS.c    ****     printTestStatus(t_modem);
 922              		.loc 1 347 0
 923 010c 3C1D     		adds	r4, r7, #4
 924 010e 6846     		mov	r0, sp
 925 0110 04F11003 		add	r3, r4, #16
 926 0114 40F27112 		movw	r2, #369
 927 0118 1946     		mov	r1, r3
 928 011a FFF7FEFF 		bl	memcpy
 929 011e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 930 0122 FFF7FEFF 		bl	printTestStatus
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 931              		.loc 1 349 0
 932 0126 0949     		ldr	r1, .L33+20
 933 0128 0320     		movs	r0, #3
 934 012a FFF7FEFF 		bl	printNotif
 350:notoriOS.c    **** 
 351:notoriOS.c    **** }
 935              		.loc 1 351 0
 936 012e 00BF     		nop
 937 0130 07F6A427 		addw	r7, r7, #2724
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 24


 938              		.cfi_def_cfa_offset 12
 939 0134 BD46     		mov	sp, r7
 940              		.cfi_def_cfa_register 13
 941              		@ sp needed
 942 0136 90BD     		pop	{r4, r7, pc}
 943              	.L34:
 944              		.align	2
 945              	.L33:
 946 0138 3C000000 		.word	.LC2
 947 013c 04000000 		.word	system_info+4
 948 0140 00000000 		.word	modem_info
 949 0144 28000000 		.word	modem_info+40
 950 0148 68000000 		.word	.LC3
 951 014c 88000000 		.word	.LC4
 952              		.cfi_endproc
 953              	.LFE72:
 954              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 955              		.section	.text.main,"ax",%progbits
 956              		.align	2
 957              		.global	main
 958              		.thumb
 959              		.thumb_func
 960              		.type	main, %function
 961              	main:
 962              	.LFB73:
 352:notoriOS.c    **** 
 353:notoriOS.c    **** // ==============================================
 354:notoriOS.c    **** // Processes Core Tasks
 355:notoriOS.c    **** // ==============================================
 356:notoriOS.c    **** int main(void)
 357:notoriOS.c    **** {
 963              		.loc 1 357 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 1, uses_anonymous_args = 0
 967 0000 80B5     		push	{r7, lr}
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 00AF     		add	r7, sp, #0
 972              		.cfi_def_cfa_register 7
 358:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 973              		.loc 1 358 0
 974              		.syntax unified
 975              	@ 358 "notoriOS.c" 1
 976 0004 62B6     		CPSIE   i
 977              	@ 0 "" 2
 359:notoriOS.c    **** 
 360:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 978              		.loc 1 360 0
 979              		.thumb
 980              		.syntax unified
 981 0006 FFF7FEFF 		bl	ReadyOrNot
 361:notoriOS.c    ****     
 362:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 982              		.loc 1 362 0
 983 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 25


 984              	.L37:
 363:notoriOS.c    ****    
 364:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 365:notoriOS.c    ****     {
 366:notoriOS.c    ****         
 367:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 985              		.loc 1 367 0
 986 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 987 0012 0346     		mov	r3, r0
 988 0014 002B     		cmp	r3, #0
 989 0016 FAD1     		bne	.L37
 368:notoriOS.c    ****         {
 369:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 990              		.loc 1 369 0
 991 0018 FFF7FEFF 		bl	LayBack
 370:notoriOS.c    ****         }
 371:notoriOS.c    ****     }
 992              		.loc 1 371 0
 993 001c F7E7     		b	.L37
 994              		.cfi_endproc
 995              	.LFE73:
 996              		.size	main, .-main
 997 001e 00BF     		.section	.rodata
 998 00b2 0000     		.align	2
 999              	.LC5:
 1000 00b4 4D6F6465 		.ascii	"Modem is ready.\000"
 1000      6D206973 
 1000      20726561 
 1000      64792E00 
 1001              		.align	2
 1002              	.LC6:
 1003 00c4 256400   		.ascii	"%d\000"
 1004 00c7 00       		.align	2
 1005              	.LC7:
 1006 00c8 72737270 		.ascii	"rsrp\000"
 1006      00
 1007 00cd 000000   		.align	2
 1008              	.LC8:
 1009 00d0 72736370 		.ascii	"rscp\000"
 1009      00
 1010 00d5 000000   		.align	2
 1011              	.LC9:
 1012 00d8 7472795F 		.ascii	"try_counter\000"
 1012      636F756E 
 1012      74657200 
 1013              		.align	2
 1014              	.LC10:
 1015 00e4 64617461 		.ascii	"data_count_sent\000"
 1015      5F636F75 
 1015      6E745F73 
 1015      656E7400 
 1016              		.align	2
 1017              	.LC11:
 1018 00f4 64617461 		.ascii	"data_count_desired\000"
 1018      5F636F75 
 1018      6E745F64 
 1018      65736972 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 26


 1018      656400
 1019 0107 00       		.align	2
 1020              	.LC12:
 1021 0108 42656769 		.ascii	"Begin HTTP post.\000"
 1021      6E204854 
 1021      54502070 
 1021      6F73742E 
 1021      00
 1022 0119 000000   		.align	2
 1023              	.LC13:
 1024 011c 31376137 		.ascii	"17a70f3873e49eefe2f009956e9b962b80632f52\000"
 1024      30663338 
 1024      37336534 
 1024      39656566 
 1024      65326630 
 1025 0145 000000   		.align	2
 1026              	.LC14:
 1027 0148 6170692F 		.ascii	"api/v1/write\000"
 1027      76312F77 
 1027      72697465 
 1027      00
 1028 0155 000000   		.align	2
 1029              	.LC15:
 1030 0158 48545450 		.ascii	"HTTP route: %s\000"
 1030      20726F75 
 1030      74653A20 
 1030      257300
 1031 0167 00       		.align	2
 1032              	.LC16:
 1033 0168 312E3100 		.ascii	"1.1\000"
 1034              		.align	2
 1035              	.LC17:
 1036 016c 00       		.ascii	"\000"
 1037 016d 000000   		.align	2
 1038              	.LC18:
 1039 0170 436C6F73 		.ascii	"Close\000"
 1039      6500
 1040 0176 0000     		.align	2
 1041              	.LC19:
 1042 0178 504F5354 		.ascii	"POST\000"
 1042      00
 1043 017d 000000   		.align	2
 1044              	.LC20:
 1045 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 1045      20485454 
 1045      50205265 
 1045      71756573 
 1045      743A2025 
 1046 0196 0000     		.align	2
 1047              	.LC21:
 1048 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 1048      443D312C 
 1048      302C2564 
 1048      2C222573 
 1048      222C302C 
 1049 01b1 000000   		.align	2
 1050              	.LC22:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 27


 1051 01b4 257300   		.ascii	"%s\000"
 1052 01b7 00       		.align	2
 1053              	.LC23:
 1054 01b8 4F4B00   		.ascii	"OK\000"
 1055              		.global	__aeabi_ui2d
 1056              		.global	__aeabi_d2iz
 1057 01bb 00       		.align	2
 1058              	.LC24:
 1059 01bc 68747470 		.ascii	"http_request len: %d\000"
 1059      5F726571 
 1059      75657374 
 1059      206C656E 
 1059      3A202564 
 1060 01d1 000000   		.align	2
 1061              	.LC25:
 1062 01d4 23206F66 		.ascii	"# of packets: %d\000"
 1062      20706163 
 1062      6B657473 
 1062      3A202564 
 1062      00
 1063 01e5 000000   		.align	2
 1064              	.LC26:
 1065 01e8 3E00     		.ascii	">\000"
 1066 01ea 0000     		.align	2
 1067              	.LC27:
 1068 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 1068      53454E44 
 1068      3D310D0A 
 1068      00
 1069 01f9 000000   		.align	2
 1070              	.LC28:
 1071 01fc 1A00     		.ascii	"\032\000"
 1072 01fe 0000     		.align	2
 1073              	.LC29:
 1074 0200 6368756E 		.ascii	"chunk %d: %s\000"
 1074      6B202564 
 1074      3A202573 
 1074      00
 1075 020d 000000   		.align	2
 1076              	.LC30:
 1077 0210 5352494E 		.ascii	"SRING\000"
 1077      4700
 1078 0216 0000     		.align	2
 1079              	.LC31:
 1080 0218 4F532D4F 		.ascii	"OS-OK\000"
 1080      4B00
 1081 021e 0000     		.align	2
 1082              	.LC32:
 1083 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 1083      52454356 
 1083      3D312C31 
 1083      3030300D 
 1083      00
 1084 0231 000000   		.align	2
 1085              	.LC33:
 1086 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 1086      6D5F7478 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 28


 1086      5F74696D 
 1086      6500
 1087 0242 0000     		.align	2
 1088              	.LC34:
 1089 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 1089      4F3A2043 
 1089      6F756C64 
 1089      206E6F74 
 1089      20726563 
 1090              		.section	.text.syncData,"ax",%progbits
 1091              		.align	2
 1092              		.global	syncData
 1093              		.thumb
 1094              		.thumb_func
 1095              		.type	syncData, %function
 1096              	syncData:
 1097              	.LFB74:
 372:notoriOS.c    **** }
 373:notoriOS.c    **** 
 374:notoriOS.c    **** // ==============================================
 375:notoriOS.c    **** // Syncs data with server
 376:notoriOS.c    **** // Returns 0 when done
 377:notoriOS.c    **** // ==============================================
 378:notoriOS.c    **** uint8 syncData(){
 1098              		.loc 1 378 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 1360
 1101              		@ frame_needed = 1, uses_anonymous_args = 0
 1102 0000 90B5     		push	{r4, r7, lr}
 1103              		.cfi_def_cfa_offset 12
 1104              		.cfi_offset 4, -12
 1105              		.cfi_offset 7, -8
 1106              		.cfi_offset 14, -4
 1107 0002 ADF26C5D 		subw	sp, sp, #1388
 1108              		.cfi_def_cfa_offset 1400
 1109 0006 06AF     		add	r7, sp, #24
 1110              		.cfi_def_cfa 7, 1376
 379:notoriOS.c    ****     
 380:notoriOS.c    ****     /*
 381:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 382:notoriOS.c    ****     uint8 check = 0;
 383:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 384:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 385:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 386:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 387:notoriOS.c    ****     */
 388:notoriOS.c    **** 
 389:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 390:notoriOS.c    ****     LED_Write(1u);
 1111              		.loc 1 390 0
 1112 0008 0120     		movs	r0, #1
 1113 000a FFF7FEFF 		bl	LED_Write
 391:notoriOS.c    ****     CyDelay(100u);
 1114              		.loc 1 391 0
 1115 000e 6420     		movs	r0, #100
 1116 0010 FFF7FEFF 		bl	CyDelay
 392:notoriOS.c    ****     LED_Write(0u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 29


 1117              		.loc 1 392 0
 1118 0014 0020     		movs	r0, #0
 1119 0016 FFF7FEFF 		bl	LED_Write
 393:notoriOS.c    **** 
 394:notoriOS.c    ****     
 395:notoriOS.c    ****     // If there's no data, not need to do anything
 396:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 1120              		.loc 1 396 0
 1121 001a FFF7FEFF 		bl	sizeOfDataStack
 1122 001e 0346     		mov	r3, r0
 1123 0020 002B     		cmp	r3, #0
 1124 0022 01D1     		bne	.L39
 397:notoriOS.c    ****         return 0u;
 1125              		.loc 1 397 0
 1126 0024 0023     		movs	r3, #0
 1127 0026 03E2     		b	.L40
 1128              	.L39:
 398:notoriOS.c    ****         }
 399:notoriOS.c    ****     
 400:notoriOS.c    ****     // Create request body, in this case influx
 401:notoriOS.c    ****     // Place body into HTTP request header
 402:notoriOS.c    ****     // Fire up modem and get it out
 403:notoriOS.c    ****      
 404:notoriOS.c    ****     
 405:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 406:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1129              		.loc 1 406 0
 1130 0028 FFF7FEFF 		bl	modem_get_state
 1131 002c 0346     		mov	r3, r0
 1132 002e 002B     		cmp	r3, #0
 1133 0030 11D1     		bne	.L41
 407:notoriOS.c    **** 
 408:notoriOS.c    ****         try_counter++;
 1134              		.loc 1 408 0
 1135 0032 AE4B     		ldr	r3, .L53
 1136 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1137 0036 0133     		adds	r3, r3, #1
 1138 0038 DAB2     		uxtb	r2, r3
 1139 003a AC4B     		ldr	r3, .L53
 1140 003c 1A70     		strb	r2, [r3]
 409:notoriOS.c    ****         	
 410:notoriOS.c    ****         if(try_counter <= 2){
 1141              		.loc 1 410 0
 1142 003e AB4B     		ldr	r3, .L53
 1143 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1144 0042 022B     		cmp	r3, #2
 1145 0044 02D8     		bhi	.L42
 411:notoriOS.c    ****             modem_power_up();
 1146              		.loc 1 411 0
 1147 0046 FFF7FEFF 		bl	modem_power_up
 1148 004a F0E1     		b	.L43
 1149              	.L42:
 412:notoriOS.c    ****         }else{
 413:notoriOS.c    ****             try_counter = 0;
 1150              		.loc 1 413 0
 1151 004c A74B     		ldr	r3, .L53
 1152 004e 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 30


 1153 0050 1A70     		strb	r2, [r3]
 414:notoriOS.c    ****             return 0u;
 1154              		.loc 1 414 0
 1155 0052 0023     		movs	r3, #0
 1156 0054 ECE1     		b	.L40
 1157              	.L41:
 415:notoriOS.c    ****             }
 416:notoriOS.c    ****             
 417:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1158              		.loc 1 417 0
 1159 0056 FFF7FEFF 		bl	modem_get_state
 1160 005a 0346     		mov	r3, r0
 1161 005c 042B     		cmp	r3, #4
 1162 005e 40F0E681 		bne	.L43
 1163              	.LBB2:
 418:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1164              		.loc 1 418 0
 1165 0062 A349     		ldr	r1, .L53+4
 1166 0064 0020     		movs	r0, #0
 1167 0066 FFF7FEFF 		bl	printNotif
 419:notoriOS.c    ****         
 420:notoriOS.c    ****         http_request[0] = '\0';
 1168              		.loc 1 420 0
 1169 006a A24B     		ldr	r3, .L53+8
 1170 006c 0022     		movs	r2, #0
 1171 006e 1A70     		strb	r2, [r3]
 421:notoriOS.c    ****         http_body[0] = '\0';
 1172              		.loc 1 421 0
 1173 0070 A14B     		ldr	r3, .L53+12
 1174 0072 0022     		movs	r2, #0
 1175 0074 1A70     		strb	r2, [r3]
 422:notoriOS.c    ****         http_route[0] = '\0';
 1176              		.loc 1 422 0
 1177 0076 A14B     		ldr	r3, .L53+16
 1178 0078 0022     		movs	r2, #0
 1179 007a 1A70     		strb	r2, [r3]
 423:notoriOS.c    ****         //char *base = "write";
 424:notoriOS.c    ****         
 425:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 426:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 427:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1180              		.loc 1 427 0
 1181 007c A04B     		ldr	r3, .L53+20
 1182 007e 5B69     		ldr	r3, [r3, #20]
 1183 0080 07F5A560 		add	r0, r7, #1320
 1184 0084 9F4A     		ldr	r2, .L53+24
 1185 0086 1421     		movs	r1, #20
 1186 0088 FFF7FEFF 		bl	snprintf
 428:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1187              		.loc 1 428 0
 1188 008c FFF7FEFF 		bl	getTimeStamp
 1189 0090 0246     		mov	r2, r0
 1190 0092 07F5A563 		add	r3, r7, #1320
 1191 0096 1946     		mov	r1, r3
 1192 0098 9B48     		ldr	r0, .L53+28
 1193 009a FFF7FEFF 		bl	pushData
 429:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 31


 430:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 431:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1194              		.loc 1 431 0
 1195 009e 984B     		ldr	r3, .L53+20
 1196 00a0 9B68     		ldr	r3, [r3, #8]
 1197 00a2 07F21450 		addw	r0, r7, #1300
 1198 00a6 974A     		ldr	r2, .L53+24
 1199 00a8 1421     		movs	r1, #20
 1200 00aa FFF7FEFF 		bl	snprintf
 432:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1201              		.loc 1 432 0
 1202 00ae FFF7FEFF 		bl	getTimeStamp
 1203 00b2 0246     		mov	r2, r0
 1204 00b4 07F21453 		addw	r3, r7, #1300
 1205 00b8 1946     		mov	r1, r3
 1206 00ba 9448     		ldr	r0, .L53+32
 1207 00bc FFF7FEFF 		bl	pushData
 433:notoriOS.c    ****         
 434:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 435:notoriOS.c    ****         char c_try_counter[20];
 436:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1208              		.loc 1 436 0
 1209 00c0 8A4B     		ldr	r3, .L53
 1210 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1211 00c4 07F5A060 		add	r0, r7, #1280
 1212 00c8 8E4A     		ldr	r2, .L53+24
 1213 00ca 1421     		movs	r1, #20
 1214 00cc FFF7FEFF 		bl	snprintf
 437:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1215              		.loc 1 437 0
 1216 00d0 FFF7FEFF 		bl	getTimeStamp
 1217 00d4 0246     		mov	r2, r0
 1218 00d6 07F5A063 		add	r3, r7, #1280
 1219 00da 1946     		mov	r1, r3
 1220 00dc 8C48     		ldr	r0, .L53+36
 1221 00de FFF7FEFF 		bl	pushData
 438:notoriOS.c    ****         
 439:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 440:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 441:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 442:notoriOS.c    ****         if(buffer_overflow == false){
 1222              		.loc 1 442 0
 1223 00e2 8C4B     		ldr	r3, .L53+40
 1224 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1225 00e6 83F00103 		eor	r3, r3, #1
 1226 00ea DBB2     		uxtb	r3, r3
 1227 00ec 002B     		cmp	r3, #0
 1228 00ee 16D0     		beq	.L44
 1229              	.LBB3:
 443:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1230              		.loc 1 443 0
 1231 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1232 00f4 0346     		mov	r3, r0
 1233 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 444:notoriOS.c    ****             char c_data_count_sent[20];
 445:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1234              		.loc 1 445 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 32


 1235 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1236 00fe 07F59B60 		add	r0, r7, #1240
 1237 0102 804A     		ldr	r2, .L53+24
 1238 0104 1421     		movs	r1, #20
 1239 0106 FFF7FEFF 		bl	snprintf
 446:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1240              		.loc 1 446 0
 1241 010a FFF7FEFF 		bl	getTimeStamp
 1242 010e 0246     		mov	r2, r0
 1243 0110 07F59B63 		add	r3, r7, #1240
 1244 0114 1946     		mov	r1, r3
 1245 0116 8048     		ldr	r0, .L53+44
 1246 0118 FFF7FEFF 		bl	pushData
 1247              	.LBE3:
 1248 011c 0FE0     		b	.L45
 1249              	.L44:
 1250              	.LBB4:
 447:notoriOS.c    ****         }else{
 448:notoriOS.c    ****             char c_data_count_sent[20];
 449:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1251              		.loc 1 449 0
 1252 011e 07F2C440 		addw	r0, r7, #1220
 1253 0122 9623     		movs	r3, #150
 1254 0124 774A     		ldr	r2, .L53+24
 1255 0126 1421     		movs	r1, #20
 1256 0128 FFF7FEFF 		bl	snprintf
 450:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1257              		.loc 1 450 0
 1258 012c FFF7FEFF 		bl	getTimeStamp
 1259 0130 0246     		mov	r2, r0
 1260 0132 07F2C443 		addw	r3, r7, #1220
 1261 0136 1946     		mov	r1, r3
 1262 0138 7748     		ldr	r0, .L53+44
 1263 013a FFF7FEFF 		bl	pushData
 1264              	.L45:
 1265              	.LBE4:
 451:notoriOS.c    ****         }
 452:notoriOS.c    ****         
 453:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 454:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1266              		.loc 1 454 0
 1267 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1268 0142 0346     		mov	r3, r0
 1269 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 455:notoriOS.c    ****         char c_data_count_desired[20];
 456:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 457:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1270              		.loc 1 457 0
 1271 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1272 014c 013B     		subs	r3, r3, #1
 1273 014e 07F2EC40 		addw	r0, r7, #1260
 1274 0152 6C4A     		ldr	r2, .L53+24
 1275 0154 1421     		movs	r1, #20
 1276 0156 FFF7FEFF 		bl	snprintf
 458:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1277              		.loc 1 458 0
 1278 015a FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 33


 1279 015e 0246     		mov	r2, r0
 1280 0160 07F2EC43 		addw	r3, r7, #1260
 1281 0164 1946     		mov	r1, r3
 1282 0166 6D48     		ldr	r0, .L53+48
 1283 0168 FFF7FEFF 		bl	pushData
 459:notoriOS.c    ****         
 460:notoriOS.c    ****         // Construct HTPP request
 461:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1284              		.loc 1 461 0
 1285 016c 6C49     		ldr	r1, .L53+52
 1286 016e 0020     		movs	r0, #0
 1287 0170 FFF7FEFF 		bl	printNotif
 462:notoriOS.c    ****         
 463:notoriOS.c    ****         // Old influx API
 464:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 465:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1288              		.loc 1 465 0
 1289 0174 6B4B     		ldr	r3, .L53+56
 1290 0176 6C4A     		ldr	r2, .L53+60
 1291 0178 6C49     		ldr	r1, .L53+64
 1292 017a 6048     		ldr	r0, .L53+16
 1293 017c FFF7FEFF 		bl	construct_malcom_route
 466:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1294              		.loc 1 466 0
 1295 0180 5E4A     		ldr	r2, .L53+16
 1296 0182 6B49     		ldr	r1, .L53+68
 1297 0184 0020     		movs	r0, #0
 1298 0186 FFF7FEFF 		bl	printNotif
 467:notoriOS.c    ****         
 468:notoriOS.c    ****         //OLD INFLUX API
 469:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 470:notoriOS.c    ****         construct_malcom_body(http_body);
 1299              		.loc 1 470 0
 1300 018a 5B48     		ldr	r0, .L53+12
 1301 018c FFF7FEFF 		bl	construct_malcom_body
 471:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1302              		.loc 1 471 0
 1303 0190 684B     		ldr	r3, .L53+72
 1304 0192 5B6E     		ldr	r3, [r3, #100]
 1305 0194 684A     		ldr	r2, .L53+76
 1306 0196 0592     		str	r2, [sp, #20]
 1307 0198 0022     		movs	r2, #0
 1308 019a 0492     		str	r2, [sp, #16]
 1309 019c 674A     		ldr	r2, .L53+80
 1310 019e 0392     		str	r2, [sp, #12]
 1311 01a0 674A     		ldr	r2, .L53+84
 1312 01a2 0292     		str	r2, [sp, #8]
 1313 01a4 674A     		ldr	r2, .L53+88
 1314 01a6 0192     		str	r2, [sp, #4]
 1315 01a8 0093     		str	r3, [sp]
 1316 01aa 544B     		ldr	r3, .L53+16
 1317 01ac 614A     		ldr	r2, .L53+72
 1318 01ae 5249     		ldr	r1, .L53+12
 1319 01b0 5048     		ldr	r0, .L53+8
 1320 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 472:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1321              		.loc 1 472 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 34


 1322 01b6 4F4A     		ldr	r2, .L53+8
 1323 01b8 6349     		ldr	r1, .L53+92
 1324 01ba 0020     		movs	r0, #0
 1325 01bc FFF7FEFF 		bl	printNotif
 473:notoriOS.c    ****         
 474:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 475:notoriOS.c    ****         // Open port and begin command line sequence
 476:notoriOS.c    ****         char portConfig[200];
 477:notoriOS.c    ****         uint8 status = 0u;
 1326              		.loc 1 477 0
 1327 01c0 0023     		movs	r3, #0
 1328 01c2 87F84535 		strb	r3, [r7, #1349]
 478:notoriOS.c    ****         
 479:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1329              		.loc 1 479 0
 1330 01c6 5B4B     		ldr	r3, .L53+72
 1331 01c8 5A6E     		ldr	r2, [r3, #100]
 1332 01ca 381D     		adds	r0, r7, #4
 1333 01cc 594B     		ldr	r3, .L53+72
 1334 01ce 0093     		str	r3, [sp]
 1335 01d0 1346     		mov	r3, r2
 1336 01d2 5E4A     		ldr	r2, .L53+96
 1337 01d4 C821     		movs	r1, #200
 1338 01d6 FFF7FEFF 		bl	snprintf
 480:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1339              		.loc 1 480 0
 1340 01da 3B1D     		adds	r3, r7, #4
 1341 01dc 1A46     		mov	r2, r3
 1342 01de 5C49     		ldr	r1, .L53+100
 1343 01e0 0020     		movs	r0, #0
 1344 01e2 FFF7FEFF 		bl	printNotif
 481:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1345              		.loc 1 481 0
 1346 01e6 3B1D     		adds	r3, r7, #4
 1347 01e8 42F21072 		movw	r2, #10000
 1348 01ec 5949     		ldr	r1, .L53+104
 1349 01ee 1846     		mov	r0, r3
 1350 01f0 FFF7FEFF 		bl	at_write_command
 1351 01f4 0346     		mov	r3, r0
 1352 01f6 87F84535 		strb	r3, [r7, #1349]
 482:notoriOS.c    ****         
 483:notoriOS.c    ****         // create character pointer to chunk through the http_request
 484:notoriOS.c    ****         char *chunk;
 485:notoriOS.c    ****         // Set chunk to start where http_request starts
 486:notoriOS.c    ****         chunk = http_request;
 1353              		.loc 1 486 0
 1354 01fa 3E4B     		ldr	r3, .L53+8
 1355 01fc C7F84C35 		str	r3, [r7, #1356]
 487:notoriOS.c    ****         // variable for the number of packets to send
 488:notoriOS.c    ****         int8 packets;
 489:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1356              		.loc 1 489 0
 1357 0200 3C48     		ldr	r0, .L53+8
 1358 0202 FFF7FEFF 		bl	strlen
 1359 0206 0246     		mov	r2, r0
 1360 0208 534B     		ldr	r3, .L53+108
 1361 020a A3FB0223 		umull	r2, r3, r3, r2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 35


 1362 020e 5B09     		lsrs	r3, r3, #5
 1363 0210 1846     		mov	r0, r3
 1364 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1365 0216 4FF00002 		mov	r2, #0
 1366 021a 504B     		ldr	r3, .L53+112
 1367 021c FFF7FEFF 		bl	nextafter
 1368 0220 0346     		mov	r3, r0
 1369 0222 0C46     		mov	r4, r1
 1370 0224 1846     		mov	r0, r3
 1371 0226 2146     		mov	r1, r4
 1372 0228 FFF7FEFF 		bl	ceil
 1373 022c 0346     		mov	r3, r0
 1374 022e 0C46     		mov	r4, r1
 1375 0230 1846     		mov	r0, r3
 1376 0232 2146     		mov	r1, r4
 1377 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1378 0238 0346     		mov	r3, r0
 1379 023a 87F84435 		strb	r3, [r7, #1348]
 490:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1380              		.loc 1 490 0
 1381 023e 2D48     		ldr	r0, .L53+8
 1382 0240 FFF7FEFF 		bl	strlen
 1383 0244 0346     		mov	r3, r0
 1384 0246 1A46     		mov	r2, r3
 1385 0248 4549     		ldr	r1, .L53+116
 1386 024a 0020     		movs	r0, #0
 1387 024c FFF7FEFF 		bl	printNotif
 491:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1388              		.loc 1 491 0
 1389 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1390 0254 1A46     		mov	r2, r3
 1391 0256 4349     		ldr	r1, .L53+120
 1392 0258 0020     		movs	r0, #0
 1393 025a FFF7FEFF 		bl	printNotif
 1394              	.LBB5:
 492:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 493:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1395              		.loc 1 493 0
 1396 025e 0023     		movs	r3, #0
 1397 0260 87F84B35 		strb	r3, [r7, #1355]
 1398 0264 9AE0     		b	.L46
 1399              	.L49:
 1400              	.LBB6:
 494:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 495:notoriOS.c    ****             char http_chunk[1001];
 496:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 497:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 498:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1401              		.loc 1 498 0
 1402 0266 4FF47A72 		mov	r2, #1000
 1403 026a 3F49     		ldr	r1, .L53+124
 1404 026c 3F48     		ldr	r0, .L53+128
 1405 026e FFF7FEFF 		bl	at_write_command
 1406 0272 0346     		mov	r3, r0
 1407 0274 87F84535 		strb	r3, [r7, #1349]
 499:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 500:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 36


 1408              		.loc 1 500 0
 1409 0278 07F1CC00 		add	r0, r7, #204
 1410 027c D7F84C35 		ldr	r3, [r7, #1356]
 1411 0280 334A     		ldr	r2, .L53+100
 1412 0282 4FF4FA71 		mov	r1, #500
 1413 0286 FFF7FEFF 		bl	snprintf
 501:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 502:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1414              		.loc 1 502 0
 1415 028a 07F1CC03 		add	r3, r7, #204
 1416 028e 1846     		mov	r0, r3
 1417 0290 FFF7FEFF 		bl	strlen
 1418 0294 0346     		mov	r3, r0
 1419 0296 1A46     		mov	r2, r3
 1420 0298 07F1CC03 		add	r3, r7, #204
 1421 029c 1344     		add	r3, r3, r2
 1422 029e 3449     		ldr	r1, .L53+132
 1423 02a0 1A46     		mov	r2, r3
 1424 02a2 0B46     		mov	r3, r1
 1425 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1426 02a6 1380     		strh	r3, [r2]	@ unaligned
 503:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1427              		.loc 1 503 0
 1428 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1429 02ac 07F1CC03 		add	r3, r7, #204
 1430 02b0 3049     		ldr	r1, .L53+136
 1431 02b2 0020     		movs	r0, #0
 1432 02b4 FFF7FEFF 		bl	printNotif
 504:notoriOS.c    ****             // Send data to server
 505:notoriOS.c    ****             if ((packet+1) != packets){
 1433              		.loc 1 505 0
 1434 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1435 02bc 5A1C     		adds	r2, r3, #1
 1436 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1437 02c2 9A42     		cmp	r2, r3
 1438 02c4 58D0     		beq	.L47
 506:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1439              		.loc 1 506 0
 1440 02c6 07F1CC03 		add	r3, r7, #204
 1441 02ca 41F28832 		movw	r2, #5000
 1442 02ce 2149     		ldr	r1, .L53+104
 1443 02d0 1846     		mov	r0, r3
 1444 02d2 FFF7FEFF 		bl	at_write_command
 1445 02d6 0346     		mov	r3, r0
 1446 02d8 87F84535 		strb	r3, [r7, #1349]
 507:notoriOS.c    ****                 // Move the pointer forward 
 508:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1447              		.loc 1 508 0
 1448 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1449 02e0 03F2F313 		addw	r3, r3, #499
 1450 02e4 C7F84C35 		str	r3, [r7, #1356]
 1451 02e8 51E0     		b	.L48
 1452              	.L54:
 1453 02ea 00BF     		.align	2
 1454              	.L53:
 1455 02ec 00000000 		.word	try_counter
 1456 02f0 B4000000 		.word	.LC5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 37


 1457 02f4 00000000 		.word	http_request
 1458 02f8 00000000 		.word	http_body
 1459 02fc 00000000 		.word	http_route
 1460 0300 00000000 		.word	modem_stats
 1461 0304 C4000000 		.word	.LC6
 1462 0308 C8000000 		.word	.LC7
 1463 030c D0000000 		.word	.LC8
 1464 0310 D8000000 		.word	.LC9
 1465 0314 00000000 		.word	buffer_overflow
 1466 0318 E4000000 		.word	.LC10
 1467 031c F4000000 		.word	.LC11
 1468 0320 08010000 		.word	.LC12
 1469 0324 1C010000 		.word	.LC13
 1470 0328 28000000 		.word	modem_info+40
 1471 032c 48010000 		.word	.LC14
 1472 0330 58010000 		.word	.LC15
 1473 0334 00000000 		.word	system_settings
 1474 0338 68010000 		.word	.LC16
 1475 033c 6C010000 		.word	.LC17
 1476 0340 70010000 		.word	.LC18
 1477 0344 78010000 		.word	.LC19
 1478 0348 80010000 		.word	.LC20
 1479 034c 98010000 		.word	.LC21
 1480 0350 B4010000 		.word	.LC22
 1481 0354 B8010000 		.word	.LC23
 1482 0358 D34D6210 		.word	274877907
 1483 035c 00407F40 		.word	1082081280
 1484 0360 BC010000 		.word	.LC24
 1485 0364 D4010000 		.word	.LC25
 1486 0368 E8010000 		.word	.LC26
 1487 036c EC010000 		.word	.LC27
 1488 0370 FC010000 		.word	.LC28
 1489 0374 00020000 		.word	.LC29
 1490              	.L47:
 509:notoriOS.c    ****             }else{
 510:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1491              		.loc 1 510 0
 1492 0378 07F1CC03 		add	r3, r7, #204
 1493 037c 41F28832 		movw	r2, #5000
 1494 0380 2E49     		ldr	r1, .L55
 1495 0382 1846     		mov	r0, r3
 1496 0384 FFF7FEFF 		bl	at_write_command
 1497 0388 0346     		mov	r3, r0
 1498 038a 87F84535 		strb	r3, [r7, #1349]
 1499              	.L48:
 1500              	.LBE6:
 493:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1501              		.loc 1 493 0 discriminator 2
 1502 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1503 0392 DBB2     		uxtb	r3, r3
 1504 0394 0133     		adds	r3, r3, #1
 1505 0396 DBB2     		uxtb	r3, r3
 1506 0398 87F84B35 		strb	r3, [r7, #1355]
 1507              	.L46:
 493:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1508              		.loc 1 493 0 is_stmt 0 discriminator 1
 1509 039c 97F94B25 		ldrsb	r2, [r7, #1355]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 38


 1510 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1511 03a4 9A42     		cmp	r2, r3
 1512 03a6 FFF65EAF 		blt	.L49
 1513              	.LBE5:
 511:notoriOS.c    ****             }
 512:notoriOS.c    ****             
 513:notoriOS.c    ****         }
 514:notoriOS.c    ****         
 515:notoriOS.c    ****         // Read received buffer
 516:notoriOS.c    ****         // A good write will return code "OS-OK"
 517:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 518:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 519:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1514              		.loc 1 519 0 is_stmt 1
 1515 03aa 41F28832 		movw	r2, #5000
 1516 03ae 2449     		ldr	r1, .L55+4
 1517 03b0 2448     		ldr	r0, .L55+8
 1518 03b2 FFF7FEFF 		bl	at_write_command
 1519 03b6 0346     		mov	r3, r0
 1520 03b8 87F84535 		strb	r3, [r7, #1349]
 520:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 521:notoriOS.c    ****     
 522:notoriOS.c    ****   
 523:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 524:notoriOS.c    ****         if(status == 1u){
 1521              		.loc 1 524 0
 1522 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1523 03c0 012B     		cmp	r3, #1
 1524 03c2 1DD1     		bne	.L50
 1525              	.LBB7:
 525:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1526              		.loc 1 525 0
 1527 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 526:notoriOS.c    ****             Clear_Data_Stack();
 1528              		.loc 1 526 0
 1529 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 527:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1530              		.loc 1 527 0
 1531 03cc FFF7FEFF 		bl	getTimeStamp
 1532 03d0 0246     		mov	r2, r0
 1533 03d2 1D4B     		ldr	r3, .L55+12
 1534 03d4 1B68     		ldr	r3, [r3]
 1535 03d6 D31A     		subs	r3, r2, r3
 1536 03d8 C7F84035 		str	r3, [r7, #1344]
 528:notoriOS.c    ****             char s_send_time[10];
 529:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1537              		.loc 1 529 0
 1538 03dc 07F59760 		add	r0, r7, #1208
 1539 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1540 03e4 194A     		ldr	r2, .L55+16
 1541 03e6 0A21     		movs	r1, #10
 1542 03e8 FFF7FEFF 		bl	snprintf
 530:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1543              		.loc 1 530 0
 1544 03ec FFF7FEFF 		bl	getTimeStamp
 1545 03f0 0246     		mov	r2, r0
 1546 03f2 07F59763 		add	r3, r7, #1208
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 39


 1547 03f6 1946     		mov	r1, r3
 1548 03f8 1548     		ldr	r0, .L55+20
 1549 03fa FFF7FEFF 		bl	pushData
 1550              	.LBE7:
 1551 03fe 03E0     		b	.L51
 1552              	.L50:
 531:notoriOS.c    ****         }else{
 532:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1553              		.loc 1 532 0
 1554 0400 1449     		ldr	r1, .L55+24
 1555 0402 0220     		movs	r0, #2
 1556 0404 FFF7FEFF 		bl	printNotif
 1557              	.L51:
 533:notoriOS.c    ****         }
 534:notoriOS.c    ****          
 535:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 536:notoriOS.c    ****         long network_time = modem_get_network_time();
 1558              		.loc 1 536 0
 1559 0408 FFF7FEFF 		bl	modem_get_network_time
 1560 040c C7F83C05 		str	r0, [r7, #1340]
 537:notoriOS.c    ****         if(network_time != 0){
 1561              		.loc 1 537 0
 1562 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1563 0414 002B     		cmp	r3, #0
 1564 0416 03D0     		beq	.L52
 538:notoriOS.c    ****            setTime(network_time);
 1565              		.loc 1 538 0
 1566 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1567 041c FFF7FEFF 		bl	setTime
 1568              	.L52:
 539:notoriOS.c    ****         }
 540:notoriOS.c    ****         
 541:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 542:notoriOS.c    ****         // If not -- keep the statck and try next time
 543:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 544:notoriOS.c    ****         modem_power_down();
 1569              		.loc 1 544 0
 1570 0420 FFF7FEFF 		bl	modem_power_down
 545:notoriOS.c    ****         
 546:notoriOS.c    ****         try_counter = 0u;
 1571              		.loc 1 546 0
 1572 0424 0C4B     		ldr	r3, .L55+28
 1573 0426 0022     		movs	r2, #0
 1574 0428 1A70     		strb	r2, [r3]
 547:notoriOS.c    ****         return 0u;
 1575              		.loc 1 547 0
 1576 042a 0023     		movs	r3, #0
 1577 042c 00E0     		b	.L40
 1578              	.L43:
 1579              	.LBE2:
 548:notoriOS.c    ****     }
 549:notoriOS.c    ****       
 550:notoriOS.c    ****       return 1u; // Not done yet
 1580              		.loc 1 550 0
 1581 042e 0123     		movs	r3, #1
 1582              	.L40:
 551:notoriOS.c    **** }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 40


 1583              		.loc 1 551 0 discriminator 1
 1584 0430 1846     		mov	r0, r3
 1585 0432 07F25457 		addw	r7, r7, #1364
 1586              		.cfi_def_cfa_offset 12
 1587 0436 BD46     		mov	sp, r7
 1588              		.cfi_def_cfa_register 13
 1589              		@ sp needed
 1590 0438 90BD     		pop	{r4, r7, pc}
 1591              	.L56:
 1592 043a 00BF     		.align	2
 1593              	.L55:
 1594 043c 10020000 		.word	.LC30
 1595 0440 18020000 		.word	.LC31
 1596 0444 20020000 		.word	.LC32
 1597 0448 00000000 		.word	modem_start_time_stamp
 1598 044c C4000000 		.word	.LC6
 1599 0450 34020000 		.word	.LC33
 1600 0454 44020000 		.word	.LC34
 1601 0458 00000000 		.word	try_counter
 1602              		.cfi_endproc
 1603              	.LFE74:
 1604              		.size	syncData, .-syncData
 1605              		.section	.text.configureRemoteParams,"ax",%progbits
 1606              		.align	2
 1607              		.global	configureRemoteParams
 1608              		.thumb
 1609              		.thumb_func
 1610              		.type	configureRemoteParams, %function
 1611              	configureRemoteParams:
 1612              	.LFB75:
 552:notoriOS.c    **** 
 553:notoriOS.c    **** // ==============================================
 554:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 555:notoriOS.c    **** // Returns 0 when done
 556:notoriOS.c    **** // ==============================================
 557:notoriOS.c    **** uint8 configureRemoteParams(){
 1613              		.loc 1 557 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 8
 1616              		@ frame_needed = 1, uses_anonymous_args = 0
 1617 0000 80B5     		push	{r7, lr}
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 7, -8
 1620              		.cfi_offset 14, -4
 1621 0002 82B0     		sub	sp, sp, #8
 1622              		.cfi_def_cfa_offset 16
 1623 0004 00AF     		add	r7, sp, #0
 1624              		.cfi_def_cfa_register 7
 558:notoriOS.c    ****     
 559:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1625              		.loc 1 559 0
 1626 0006 FFF7FEFF 		bl	modem_get_state
 1627 000a 0346     		mov	r3, r0
 1628 000c 002B     		cmp	r3, #0
 1629 000e 02D1     		bne	.L58
 560:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 561:notoriOS.c    ****         modem_power_up();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 41


 1630              		.loc 1 561 0
 1631 0010 FFF7FEFF 		bl	modem_power_up
 1632 0014 11E0     		b	.L59
 1633              	.L58:
 562:notoriOS.c    ****             
 563:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1634              		.loc 1 563 0
 1635 0016 FFF7FEFF 		bl	modem_get_state
 1636 001a 0346     		mov	r3, r0
 1637 001c 042B     		cmp	r3, #4
 1638 001e 0CD1     		bne	.L59
 1639              	.LBB8:
 564:notoriOS.c    ****         
 565:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 566:notoriOS.c    ****         
 567:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 568:notoriOS.c    ****         long network_time = modem_get_network_time();
 1640              		.loc 1 568 0
 1641 0020 FFF7FEFF 		bl	modem_get_network_time
 1642 0024 7860     		str	r0, [r7, #4]
 569:notoriOS.c    ****         if(network_time != 0){
 1643              		.loc 1 569 0
 1644 0026 7B68     		ldr	r3, [r7, #4]
 1645 0028 002B     		cmp	r3, #0
 1646 002a 02D0     		beq	.L60
 570:notoriOS.c    ****             setTime(network_time);
 1647              		.loc 1 570 0
 1648 002c 7868     		ldr	r0, [r7, #4]
 1649 002e FFF7FEFF 		bl	setTime
 1650              	.L60:
 571:notoriOS.c    ****         }
 572:notoriOS.c    ****         
 573:notoriOS.c    ****         // Get GPS coordinates
 574:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 575:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 576:notoriOS.c    ****         modem_power_down();
 1651              		.loc 1 576 0
 1652 0032 FFF7FEFF 		bl	modem_power_down
 577:notoriOS.c    ****         return 0u;
 1653              		.loc 1 577 0
 1654 0036 0023     		movs	r3, #0
 1655 0038 00E0     		b	.L61
 1656              	.L59:
 1657              	.LBE8:
 578:notoriOS.c    ****         
 579:notoriOS.c    ****     }
 580:notoriOS.c    ****     
 581:notoriOS.c    ****     return 1u;
 1658              		.loc 1 581 0
 1659 003a 0123     		movs	r3, #1
 1660              	.L61:
 582:notoriOS.c    **** }
 1661              		.loc 1 582 0
 1662 003c 1846     		mov	r0, r3
 1663 003e 0837     		adds	r7, r7, #8
 1664              		.cfi_def_cfa_offset 8
 1665 0040 BD46     		mov	sp, r7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 42


 1666              		.cfi_def_cfa_register 13
 1667              		@ sp needed
 1668 0042 80BD     		pop	{r7, pc}
 1669              		.cfi_endproc
 1670              	.LFE75:
 1671              		.size	configureRemoteParams, .-configureRemoteParams
 1672              		.section	.rodata
 1673 026f 00       		.align	2
 1674              	.LC35:
 1675 0270 256C6400 		.ascii	"%ld\000"
 1676              		.align	2
 1677              	.LC36:
 1678 0274 43757272 		.ascii	"Current_Node_Type\000"
 1678      656E745F 
 1678      4E6F6465 
 1678      5F547970 
 1678      6500
 1679 0286 0000     		.align	2
 1680              	.LC37:
 1681 0288 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1681      6F746978 
 1681      5F646570 
 1681      74683D25 
 1681      7300
 1682 029a 0000     		.align	2
 1683              	.LC38:
 1684 029c 6D617862 		.ascii	"maxbotix_depth\000"
 1684      6F746978 
 1684      5F646570 
 1684      746800
 1685 02ab 00       		.align	2
 1686              	.LC39:
 1687 02ac 612B00   		.ascii	"a+\000"
 1688 02af 00       		.align	2
 1689              	.LC40:
 1690 02b0 206D6178 		.ascii	" maxbotix_depth: \000"
 1690      626F7469 
 1690      785F6465 
 1690      7074683A 
 1690      2000
 1691 02c2 0000     		.align	2
 1692              	.LC41:
 1693 02c4 2000     		.ascii	" \000"
 1694 02c6 0000     		.align	2
 1695              	.LC42:
 1696 02c8 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1696      64206E6F 
 1696      74206765 
 1696      74207661 
 1696      6C696420 
 1697              		.global	__aeabi_f2d
 1698              		.align	2
 1699              	.LC43:
 1700 02f4 252E3266 		.ascii	"%.2f\000"
 1700      00
 1701 02f9 000000   		.align	2
 1702              	.LC44:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 43


 1703 02fc 765F6261 		.ascii	"v_bat=%s\000"
 1703      743D2573 
 1703      00
 1704 0305 000000   		.align	2
 1705              	.LC45:
 1706 0308 765F6261 		.ascii	"v_bat\000"
 1706      7400
 1707 030e 0000     		.align	2
 1708              	.LC46:
 1709 0310 20766261 		.ascii	" vbat: \000"
 1709      743A2000 
 1710              		.align	2
 1711              	.LC47:
 1712 0318 70726573 		.ascii	"pressure_current=%s\000"
 1712      73757265 
 1712      5F637572 
 1712      72656E74 
 1712      3D257300 
 1713              		.align	2
 1714              	.LC48:
 1715 032c 70726573 		.ascii	"pressure_current\000"
 1715      73757265 
 1715      5F637572 
 1715      72656E74 
 1715      00
 1716 033d 000000   		.align	2
 1717              	.LC49:
 1718 0340 20707265 		.ascii	" pressure_current: \000"
 1718      73737572 
 1718      655F6375 
 1718      7272656E 
 1718      743A2000 
 1719              		.align	2
 1720              	.LC50:
 1721 0354 70726573 		.ascii	"pressure_depth=%s\000"
 1721      73757265 
 1721      5F646570 
 1721      74683D25 
 1721      7300
 1722 0366 0000     		.align	2
 1723              	.LC51:
 1724 0368 70726573 		.ascii	"pressure_depth\000"
 1724      73757265 
 1724      5F646570 
 1724      746800
 1725 0377 00       		.align	2
 1726              	.LC52:
 1727 0378 20707265 		.ascii	" pressure_depth: \000"
 1727      73737572 
 1727      655F6465 
 1727      7074683A 
 1727      2000
 1728 038a 0000     		.align	2
 1729              	.LC53:
 1730 038c 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1730      64206E6F 
 1730      74206765 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 44


 1730      74207661 
 1730      6C696420 
 1731              		.section	.text.makeMeasurements,"ax",%progbits
 1732              		.align	2
 1733              		.global	makeMeasurements
 1734              		.thumb
 1735              		.thumb_func
 1736              		.type	makeMeasurements, %function
 1737              	makeMeasurements:
 1738              	.LFB76:
 583:notoriOS.c    **** 
 584:notoriOS.c    **** 
 585:notoriOS.c    **** // ==============================================
 586:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 587:notoriOS.c    **** // Returns 0 when finished
 588:notoriOS.c    **** // ==============================================
 589:notoriOS.c    **** uint8 makeMeasurements(){
 1739              		.loc 1 589 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 128
 1742              		@ frame_needed = 1, uses_anonymous_args = 0
 1743 0000 90B5     		push	{r4, r7, lr}
 1744              		.cfi_def_cfa_offset 12
 1745              		.cfi_offset 4, -12
 1746              		.cfi_offset 7, -8
 1747              		.cfi_offset 14, -4
 1748 0002 A3B0     		sub	sp, sp, #140
 1749              		.cfi_def_cfa_offset 152
 1750 0004 02AF     		add	r7, sp, #8
 1751              		.cfi_def_cfa 7, 144
 590:notoriOS.c    ****     
 591:notoriOS.c    ****     // Get clock time and save to timeStamp
 592:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1752              		.loc 1 592 0
 1753 0006 FFF7FEFF 		bl	getTimeStamp
 1754 000a F867     		str	r0, [r7, #124]
 593:notoriOS.c    ****     char c_timeStamp[32];
 594:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1755              		.loc 1 594 0
 1756 000c 07F15C00 		add	r0, r7, #92
 1757 0010 FB6F     		ldr	r3, [r7, #124]
 1758 0012 8C4A     		ldr	r2, .L70
 1759 0014 2021     		movs	r1, #32
 1760 0016 FFF7FEFF 		bl	snprintf
 595:notoriOS.c    ****     
 596:notoriOS.c    ****     // Holds string for value that will be written 
 597:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 598:notoriOS.c    ****     
 599:notoriOS.c    ****     // who i am determines what I'm going to do 
 600:notoriOS.c    ****     // this is primarily for interpretability on grafana dashboards when developing custom nodes
 601:notoriOS.c    ****     char c_node_type[5];
 602:notoriOS.c    ****     itoa(updatable_parameters.node_type,c_node_type,10);
 1761              		.loc 1 602 0
 1762 001a 8B4B     		ldr	r3, .L70+4
 1763 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1764 001e 1846     		mov	r0, r3
 1765 0020 07F14003 		add	r3, r7, #64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 45


 1766 0024 0A22     		movs	r2, #10
 1767 0026 1946     		mov	r1, r3
 1768 0028 FFF7FEFF 		bl	itoa
 603:notoriOS.c    ****     pushData("Current_Node_Type",c_node_type ,getTimeStamp());
 1769              		.loc 1 603 0
 1770 002c FFF7FEFF 		bl	getTimeStamp
 1771 0030 0246     		mov	r2, r0
 1772 0032 07F14003 		add	r3, r7, #64
 1773 0036 1946     		mov	r1, r3
 1774 0038 8448     		ldr	r0, .L70+8
 1775 003a FFF7FEFF 		bl	pushData
 604:notoriOS.c    ****     
 605:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 606:notoriOS.c    ****     
 607:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1776              		.loc 1 607 0
 1777 003e 824B     		ldr	r3, .L70+4
 1778 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1779 0042 002B     		cmp	r3, #0
 1780 0044 3BD1     		bne	.L63
 1781              	.LBB9:
 608:notoriOS.c    ****         
 609:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 610:notoriOS.c    ****         level_sensor_t m_level_sensor;
 611:notoriOS.c    ****         
 612:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 613:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1782              		.loc 1 613 0
 1783 0046 07F11003 		add	r3, r7, #16
 1784 004a 1846     		mov	r0, r3
 1785 004c FFF7FEFF 		bl	level_sensor_take_reading
 614:notoriOS.c    ****     
 615:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 616:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1786              		.loc 1 616 0
 1787 0050 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1788 0054 002B     		cmp	r3, #0
 1789 0056 2ED0     		beq	.L64
 617:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1790              		.loc 1 617 0
 1791 0058 B7F92630 		ldrsh	r3, [r7, #38]
 1792 005c 07F14800 		add	r0, r7, #72
 1793 0060 7B4A     		ldr	r2, .L70+12
 1794 0062 1421     		movs	r1, #20
 1795 0064 FFF7FEFF 		bl	snprintf
 618:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1796              		.loc 1 618 0
 1797 0068 07F14803 		add	r3, r7, #72
 1798 006c 1A46     		mov	r2, r3
 1799 006e 7949     		ldr	r1, .L70+16
 1800 0070 0020     		movs	r0, #0
 1801 0072 FFF7FEFF 		bl	printNotif
 619:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1802              		.loc 1 619 0
 1803 0076 07F14803 		add	r3, r7, #72
 1804 007a FA6F     		ldr	r2, [r7, #124]
 1805 007c 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 46


 1806 007e 7648     		ldr	r0, .L70+20
 1807 0080 FFF7FEFF 		bl	pushData
 620:notoriOS.c    ****             
 621:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 622:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1808              		.loc 1 622 0
 1809 0084 07F15C03 		add	r3, r7, #92
 1810 0088 1A46     		mov	r2, r3
 1811 008a 7449     		ldr	r1, .L70+24
 1812 008c 7448     		ldr	r0, .L70+28
 1813 008e FFF7FEFF 		bl	SD_write
 623:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1814              		.loc 1 623 0
 1815 0092 744A     		ldr	r2, .L70+32
 1816 0094 7149     		ldr	r1, .L70+24
 1817 0096 7248     		ldr	r0, .L70+28
 1818 0098 FFF7FEFF 		bl	SD_write
 624:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1819              		.loc 1 624 0
 1820 009c 07F14803 		add	r3, r7, #72
 1821 00a0 1A46     		mov	r2, r3
 1822 00a2 6E49     		ldr	r1, .L70+24
 1823 00a4 6E48     		ldr	r0, .L70+28
 1824 00a6 FFF7FEFF 		bl	SD_write
 625:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1825              		.loc 1 625 0
 1826 00aa 6F4A     		ldr	r2, .L70+36
 1827 00ac 6B49     		ldr	r1, .L70+24
 1828 00ae 6C48     		ldr	r0, .L70+28
 1829 00b0 FFF7FEFF 		bl	SD_write
 1830 00b4 03E0     		b	.L63
 1831              	.L64:
 626:notoriOS.c    ****         }else{
 627:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1832              		.loc 1 627 0
 1833 00b6 6D49     		ldr	r1, .L70+40
 1834 00b8 0220     		movs	r0, #2
 1835 00ba FFF7FEFF 		bl	printNotif
 1836              	.L63:
 1837              	.LBE9:
 628:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 629:notoriOS.c    ****         }
 630:notoriOS.c    ****     }
 631:notoriOS.c    ****     
 632:notoriOS.c    ****     
 633:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 634:notoriOS.c    ****     voltage_t m_voltage;
 635:notoriOS.c    ****     
 636:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 637:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1838              		.loc 1 637 0
 1839 00be 07F12C03 		add	r3, r7, #44
 1840 00c2 1846     		mov	r0, r3
 1841 00c4 FFF7FEFF 		bl	voltage_take_readings
 638:notoriOS.c    ****     
 639:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 640:notoriOS.c    ****     if(m_voltage.valid){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 47


 1842              		.loc 1 640 0
 1843 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1844 00cc 002B     		cmp	r3, #0
 1845 00ce 00F0AF80 		beq	.L66
 641:notoriOS.c    ****         // battery voltage data
 642:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1846              		.loc 1 642 0
 1847 00d2 FB6A     		ldr	r3, [r7, #44]	@ float
 1848 00d4 1846     		mov	r0, r3
 1849 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1850 00da 0346     		mov	r3, r0
 1851 00dc 0C46     		mov	r4, r1
 1852 00de 07F14800 		add	r0, r7, #72
 1853 00e2 CDE90034 		strd	r3, [sp]
 1854 00e6 624A     		ldr	r2, .L70+44
 1855 00e8 1421     		movs	r1, #20
 1856 00ea FFF7FEFF 		bl	snprintf
 643:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1857              		.loc 1 643 0
 1858 00ee 07F14803 		add	r3, r7, #72
 1859 00f2 1A46     		mov	r2, r3
 1860 00f4 5F49     		ldr	r1, .L70+48
 1861 00f6 0020     		movs	r0, #0
 1862 00f8 FFF7FEFF 		bl	printNotif
 644:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1863              		.loc 1 644 0
 1864 00fc 07F14803 		add	r3, r7, #72
 1865 0100 FA6F     		ldr	r2, [r7, #124]
 1866 0102 1946     		mov	r1, r3
 1867 0104 5C48     		ldr	r0, .L70+52
 1868 0106 FFF7FEFF 		bl	pushData
 645:notoriOS.c    ****         
 646:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 647:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1869              		.loc 1 647 0
 1870 010a 574A     		ldr	r2, .L70+36
 1871 010c 5349     		ldr	r1, .L70+24
 1872 010e 5448     		ldr	r0, .L70+28
 1873 0110 FFF7FEFF 		bl	SD_write
 648:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1874              		.loc 1 648 0
 1875 0114 07F15C03 		add	r3, r7, #92
 1876 0118 1A46     		mov	r2, r3
 1877 011a 5049     		ldr	r1, .L70+24
 1878 011c 5048     		ldr	r0, .L70+28
 1879 011e FFF7FEFF 		bl	SD_write
 649:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1880              		.loc 1 649 0
 1881 0122 564A     		ldr	r2, .L70+56
 1882 0124 4D49     		ldr	r1, .L70+24
 1883 0126 4E48     		ldr	r0, .L70+28
 1884 0128 FFF7FEFF 		bl	SD_write
 650:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1885              		.loc 1 650 0
 1886 012c 07F14803 		add	r3, r7, #72
 1887 0130 1A46     		mov	r2, r3
 1888 0132 4A49     		ldr	r1, .L70+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 48


 1889 0134 4A48     		ldr	r0, .L70+28
 1890 0136 FFF7FEFF 		bl	SD_write
 651:notoriOS.c    ****         
 652:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 653:notoriOS.c    ****          
 654:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1891              		.loc 1 654 0
 1892 013a 434B     		ldr	r3, .L70+4
 1893 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1894 013e 012B     		cmp	r3, #1
 1895 0140 7AD1     		bne	.L68
 1896              	.LBB10:
 655:notoriOS.c    ****             
 656:notoriOS.c    ****             // pressure transducer voltage (V) data
 657:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 658:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 659:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 660:notoriOS.c    ****             
 661:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 662:notoriOS.c    ****             pressure_t m_pressure;
 663:notoriOS.c    ****             
 664:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 665:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1897              		.loc 1 665 0
 1898 0142 3C46     		mov	r4, r7
 1899 0144 6A46     		mov	r2, sp
 1900 0146 07F13803 		add	r3, r7, #56
 1901 014a 93E80300 		ldmia	r3, {r0, r1}
 1902 014e 82E80300 		stmia	r2, {r0, r1}
 1903 0152 07F12C03 		add	r3, r7, #44
 1904 0156 0ECB     		ldmia	r3, {r1, r2, r3}
 1905 0158 2046     		mov	r0, r4
 1906 015a FFF7FEFF 		bl	pressure_calculations
 666:notoriOS.c    ****             
 667:notoriOS.c    ****             // pressure transducer current (mA) data
 668:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1907              		.loc 1 668 0
 1908 015e BB68     		ldr	r3, [r7, #8]	@ float
 1909 0160 1846     		mov	r0, r3
 1910 0162 FFF7FEFF 		bl	__aeabi_f2d
 1911 0166 0346     		mov	r3, r0
 1912 0168 0C46     		mov	r4, r1
 1913 016a 07F14800 		add	r0, r7, #72
 1914 016e CDE90034 		strd	r3, [sp]
 1915 0172 3F4A     		ldr	r2, .L70+44
 1916 0174 1421     		movs	r1, #20
 1917 0176 FFF7FEFF 		bl	snprintf
 669:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1918              		.loc 1 669 0
 1919 017a 07F14803 		add	r3, r7, #72
 1920 017e 1A46     		mov	r2, r3
 1921 0180 3F49     		ldr	r1, .L70+60
 1922 0182 0020     		movs	r0, #0
 1923 0184 FFF7FEFF 		bl	printNotif
 670:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1924              		.loc 1 670 0
 1925 0188 07F14803 		add	r3, r7, #72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 49


 1926 018c FA6F     		ldr	r2, [r7, #124]
 1927 018e 1946     		mov	r1, r3
 1928 0190 3C48     		ldr	r0, .L70+64
 1929 0192 FFF7FEFF 		bl	pushData
 671:notoriOS.c    ****             
 672:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 673:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1930              		.loc 1 673 0
 1931 0196 344A     		ldr	r2, .L70+36
 1932 0198 3049     		ldr	r1, .L70+24
 1933 019a 3148     		ldr	r0, .L70+28
 1934 019c FFF7FEFF 		bl	SD_write
 674:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1935              		.loc 1 674 0
 1936 01a0 07F15C03 		add	r3, r7, #92
 1937 01a4 1A46     		mov	r2, r3
 1938 01a6 2D49     		ldr	r1, .L70+24
 1939 01a8 2D48     		ldr	r0, .L70+28
 1940 01aa FFF7FEFF 		bl	SD_write
 675:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1941              		.loc 1 675 0
 1942 01ae 364A     		ldr	r2, .L70+68
 1943 01b0 2A49     		ldr	r1, .L70+24
 1944 01b2 2B48     		ldr	r0, .L70+28
 1945 01b4 FFF7FEFF 		bl	SD_write
 676:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1946              		.loc 1 676 0
 1947 01b8 07F14803 		add	r3, r7, #72
 1948 01bc 1A46     		mov	r2, r3
 1949 01be 2749     		ldr	r1, .L70+24
 1950 01c0 2748     		ldr	r0, .L70+28
 1951 01c2 FFF7FEFF 		bl	SD_write
 677:notoriOS.c    ****             
 678:notoriOS.c    ****             // pressure transducer depth (ft) data
 679:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1952              		.loc 1 679 0
 1953 01c6 FB68     		ldr	r3, [r7, #12]	@ float
 1954 01c8 1846     		mov	r0, r3
 1955 01ca FFF7FEFF 		bl	__aeabi_f2d
 1956 01ce 0346     		mov	r3, r0
 1957 01d0 0C46     		mov	r4, r1
 1958 01d2 07F14800 		add	r0, r7, #72
 1959 01d6 CDE90034 		strd	r3, [sp]
 1960 01da 254A     		ldr	r2, .L70+44
 1961 01dc 1421     		movs	r1, #20
 1962 01de FFF7FEFF 		bl	snprintf
 680:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1963              		.loc 1 680 0
 1964 01e2 07F14803 		add	r3, r7, #72
 1965 01e6 1A46     		mov	r2, r3
 1966 01e8 2849     		ldr	r1, .L70+72
 1967 01ea 0020     		movs	r0, #0
 1968 01ec FFF7FEFF 		bl	printNotif
 681:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1969              		.loc 1 681 0
 1970 01f0 07F14803 		add	r3, r7, #72
 1971 01f4 FA6F     		ldr	r2, [r7, #124]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 50


 1972 01f6 1946     		mov	r1, r3
 1973 01f8 2548     		ldr	r0, .L70+76
 1974 01fa FFF7FEFF 		bl	pushData
 682:notoriOS.c    ****             
 683:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 684:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1975              		.loc 1 684 0
 1976 01fe 1A4A     		ldr	r2, .L70+36
 1977 0200 1649     		ldr	r1, .L70+24
 1978 0202 1748     		ldr	r0, .L70+28
 1979 0204 FFF7FEFF 		bl	SD_write
 685:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1980              		.loc 1 685 0
 1981 0208 07F15C03 		add	r3, r7, #92
 1982 020c 1A46     		mov	r2, r3
 1983 020e 1349     		ldr	r1, .L70+24
 1984 0210 1348     		ldr	r0, .L70+28
 1985 0212 FFF7FEFF 		bl	SD_write
 686:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1986              		.loc 1 686 0
 1987 0216 1F4A     		ldr	r2, .L70+80
 1988 0218 1049     		ldr	r1, .L70+24
 1989 021a 1148     		ldr	r0, .L70+28
 1990 021c FFF7FEFF 		bl	SD_write
 687:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1991              		.loc 1 687 0
 1992 0220 07F14803 		add	r3, r7, #72
 1993 0224 1A46     		mov	r2, r3
 1994 0226 0D49     		ldr	r1, .L70+24
 1995 0228 0D48     		ldr	r0, .L70+28
 1996 022a FFF7FEFF 		bl	SD_write
 1997 022e 03E0     		b	.L68
 1998              	.L66:
 1999              	.LBE10:
 688:notoriOS.c    ****         }    
 689:notoriOS.c    ****     }else{
 690:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 2000              		.loc 1 690 0
 2001 0230 1949     		ldr	r1, .L70+84
 2002 0232 0220     		movs	r0, #2
 2003 0234 FFF7FEFF 		bl	printNotif
 2004              	.L68:
 691:notoriOS.c    ****         
 692:notoriOS.c    ****     }
 693:notoriOS.c    ****         
 694:notoriOS.c    ****     
 695:notoriOS.c    ****     return 0u;
 2005              		.loc 1 695 0
 2006 0238 0023     		movs	r3, #0
 696:notoriOS.c    **** }
 2007              		.loc 1 696 0
 2008 023a 1846     		mov	r0, r3
 2009 023c 8437     		adds	r7, r7, #132
 2010              		.cfi_def_cfa_offset 12
 2011 023e BD46     		mov	sp, r7
 2012              		.cfi_def_cfa_register 13
 2013              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 51


 2014 0240 90BD     		pop	{r4, r7, pc}
 2015              	.L71:
 2016 0242 00BF     		.align	2
 2017              	.L70:
 2018 0244 70020000 		.word	.LC35
 2019 0248 00000000 		.word	updatable_parameters
 2020 024c 74020000 		.word	.LC36
 2021 0250 C4000000 		.word	.LC6
 2022 0254 88020000 		.word	.LC37
 2023 0258 9C020000 		.word	.LC38
 2024 025c AC020000 		.word	.LC39
 2025 0260 00000000 		.word	Data_fileName
 2026 0264 B0020000 		.word	.LC40
 2027 0268 C4020000 		.word	.LC41
 2028 026c C8020000 		.word	.LC42
 2029 0270 F4020000 		.word	.LC43
 2030 0274 FC020000 		.word	.LC44
 2031 0278 08030000 		.word	.LC45
 2032 027c 10030000 		.word	.LC46
 2033 0280 18030000 		.word	.LC47
 2034 0284 2C030000 		.word	.LC48
 2035 0288 40030000 		.word	.LC49
 2036 028c 54030000 		.word	.LC50
 2037 0290 68030000 		.word	.LC51
 2038 0294 78030000 		.word	.LC52
 2039 0298 8C030000 		.word	.LC53
 2040              		.cfi_endproc
 2041              	.LFE76:
 2042              		.size	makeMeasurements, .-makeMeasurements
 2043              		.section	.rodata
 2044 03b3 00       		.align	2
 2045              	.LC54:
 2046 03b4 4572726F 		.ascii	"Error setting system time.\000"
 2046      72207365 
 2046      7474696E 
 2046      67207379 
 2046      7374656D 
 2047              		.section	.text.setTime,"ax",%progbits
 2048              		.align	2
 2049              		.global	setTime
 2050              		.thumb
 2051              		.thumb_func
 2052              		.type	setTime, %function
 2053              	setTime:
 2054              	.LFB77:
 697:notoriOS.c    **** 
 698:notoriOS.c    **** // ==============================================
 699:notoriOS.c    **** // Set the system time
 700:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 701:notoriOS.c    **** // ==============================================
 702:notoriOS.c    **** uint8 setTime(long timeStamp){
 2055              		.loc 1 702 0
 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 24
 2058              		@ frame_needed = 1, uses_anonymous_args = 0
 2059 0000 80B5     		push	{r7, lr}
 2060              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 52


 2061              		.cfi_offset 7, -8
 2062              		.cfi_offset 14, -4
 2063 0002 86B0     		sub	sp, sp, #24
 2064              		.cfi_def_cfa_offset 32
 2065 0004 00AF     		add	r7, sp, #0
 2066              		.cfi_def_cfa_register 7
 2067 0006 7860     		str	r0, [r7, #4]
 703:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 704:notoriOS.c    ****     if(timeStamp <=0){
 2068              		.loc 1 704 0
 2069 0008 7B68     		ldr	r3, [r7, #4]
 2070 000a 002B     		cmp	r3, #0
 2071 000c 05DC     		bgt	.L73
 705:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 2072              		.loc 1 705 0
 2073 000e 1849     		ldr	r1, .L75
 2074 0010 0220     		movs	r0, #2
 2075 0012 FFF7FEFF 		bl	printNotif
 706:notoriOS.c    ****         return 0;  
 2076              		.loc 1 706 0
 2077 0016 0023     		movs	r3, #0
 2078 0018 25E0     		b	.L74
 2079              	.L73:
 707:notoriOS.c    ****     }
 708:notoriOS.c    ****     // Create a new pointer t of data structure tm
 709:notoriOS.c    ****     struct tm * t;
 710:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 711:notoriOS.c    ****     t = gmtime(&timeStamp);
 2080              		.loc 1 711 0
 2081 001a 3B1D     		adds	r3, r7, #4
 2082 001c 1846     		mov	r0, r3
 2083 001e FFF7FEFF 		bl	gmtime
 2084 0022 7861     		str	r0, [r7, #20]
 712:notoriOS.c    ****     
 713:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 714:notoriOS.c    ****     RTC_TIME_DATE localTime;
 715:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 2085              		.loc 1 715 0
 2086 0024 7B69     		ldr	r3, [r7, #20]
 2087 0026 1B68     		ldr	r3, [r3]
 2088 0028 DBB2     		uxtb	r3, r3
 2089 002a 3B72     		strb	r3, [r7, #8]
 716:notoriOS.c    ****     localTime.Min = t->tm_min;
 2090              		.loc 1 716 0
 2091 002c 7B69     		ldr	r3, [r7, #20]
 2092 002e 5B68     		ldr	r3, [r3, #4]
 2093 0030 DBB2     		uxtb	r3, r3
 2094 0032 7B72     		strb	r3, [r7, #9]
 717:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 2095              		.loc 1 717 0
 2096 0034 7B69     		ldr	r3, [r7, #20]
 2097 0036 9B68     		ldr	r3, [r3, #8]
 2098 0038 DBB2     		uxtb	r3, r3
 2099 003a BB72     		strb	r3, [r7, #10]
 718:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 2100              		.loc 1 718 0
 2101 003c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 53


 2102 003e 5B69     		ldr	r3, [r3, #20]
 2103 0040 9BB2     		uxth	r3, r3
 2104 0042 03F26C73 		addw	r3, r3, #1900
 2105 0046 9BB2     		uxth	r3, r3
 2106 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 719:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2107              		.loc 1 719 0
 2108 004a 7B69     		ldr	r3, [r7, #20]
 2109 004c 1B69     		ldr	r3, [r3, #16]
 2110 004e DBB2     		uxtb	r3, r3
 2111 0050 3B74     		strb	r3, [r7, #16]
 720:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2112              		.loc 1 720 0
 2113 0052 7B69     		ldr	r3, [r7, #20]
 2114 0054 DB68     		ldr	r3, [r3, #12]
 2115 0056 DBB2     		uxtb	r3, r3
 2116 0058 3B73     		strb	r3, [r7, #12]
 721:notoriOS.c    **** 
 722:notoriOS.c    ****     // Writes time and date values as current time and date.
 723:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2117              		.loc 1 723 0
 2118 005a 07F10803 		add	r3, r7, #8
 2119 005e 1846     		mov	r0, r3
 2120 0060 FFF7FEFF 		bl	RTC_WriteTime
 724:notoriOS.c    ****     
 725:notoriOS.c    ****     // Return 1 when the system time was set properly.
 726:notoriOS.c    ****     return 1;
 2121              		.loc 1 726 0
 2122 0064 0123     		movs	r3, #1
 2123              	.L74:
 727:notoriOS.c    **** }
 2124              		.loc 1 727 0
 2125 0066 1846     		mov	r0, r3
 2126 0068 1837     		adds	r7, r7, #24
 2127              		.cfi_def_cfa_offset 8
 2128 006a BD46     		mov	sp, r7
 2129              		.cfi_def_cfa_register 13
 2130              		@ sp needed
 2131 006c 80BD     		pop	{r7, pc}
 2132              	.L76:
 2133 006e 00BF     		.align	2
 2134              	.L75:
 2135 0070 B4030000 		.word	.LC54
 2136              		.cfi_endproc
 2137              	.LFE77:
 2138              		.size	setTime, .-setTime
 2139              		.section	.rodata
 2140 03cf 00       		.align	2
 2141              	.LC55:
 2142 03d0 75706772 		.ascii	"upgrade.hex\000"
 2142      6164652E 
 2142      68657800 
 2143              		.section	.text.upgraded,"ax",%progbits
 2144              		.align	2
 2145              		.global	upgraded
 2146              		.thumb
 2147              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 54


 2148              		.type	upgraded, %function
 2149              	upgraded:
 2150              	.LFB78:
 728:notoriOS.c    **** 
 729:notoriOS.c    **** //downloads and stores files on SD card
 730:notoriOS.c    **** 
 731:notoriOS.c    **** 
 732:notoriOS.c    **** 
 733:notoriOS.c    **** // ==============================================
 734:notoriOS.c    **** // Will they love it, will they hate it
 735:notoriOS.c    **** // Never fade it, I evade it
 736:notoriOS.c    **** // Cause I never really want to complicate it
 737:notoriOS.c    **** //      - Logic, Upgraded (2015)
 738:notoriOS.c    **** //
 739:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 740:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 741:notoriOS.c    **** // ==============================================
 742:notoriOS.c    **** 
 743:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2151              		.loc 1 743 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 232
 2154              		@ frame_needed = 1, uses_anonymous_args = 0
 2155 0000 80B5     		push	{r7, lr}
 2156              		.cfi_def_cfa_offset 8
 2157              		.cfi_offset 7, -8
 2158              		.cfi_offset 14, -4
 2159 0002 C0B0     		sub	sp, sp, #256
 2160              		.cfi_def_cfa_offset 264
 2161 0004 06AF     		add	r7, sp, #24
 2162              		.cfi_def_cfa 7, 240
 2163 0006 F860     		str	r0, [r7, #12]
 2164 0008 B960     		str	r1, [r7, #8]
 2165 000a 7A60     		str	r2, [r7, #4]
 744:notoriOS.c    ****     
 745:notoriOS.c    ****     uint8 upgrade_status = 0;
 2166              		.loc 1 745 0
 2167 000c 0023     		movs	r3, #0
 2168 000e 87F8E730 		strb	r3, [r7, #231]
 746:notoriOS.c    ****     
 747:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 748:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2169              		.loc 1 748 0
 2170 0012 384B     		ldr	r3, .L81
 2171 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2172 0016 042B     		cmp	r3, #4
 2173 0018 02D0     		beq	.L78
 749:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2174              		.loc 1 749 0
 2175 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2176 001e 65E0     		b	.L80
 2177              	.L78:
 750:notoriOS.c    ****     }
 751:notoriOS.c    ****     
 752:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2178              		.loc 1 752 0
 2179 0020 354A     		ldr	r2, .L81+4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 55


 2180 0022 07F1D803 		add	r3, r7, #216
 2181 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2182 0028 83E80700 		stmia	r3, {r0, r1, r2}
 753:notoriOS.c    ****     //delete file, if one exisits already
 754:notoriOS.c    ****     SD_rmfile(fileName);
 2183              		.loc 1 754 0
 2184 002c 07F1D803 		add	r3, r7, #216
 2185 0030 1846     		mov	r0, r3
 2186 0032 FFF7FEFF 		bl	SD_rmfile
 755:notoriOS.c    ****     
 756:notoriOS.c    ****     // Create http request
 757:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2187              		.loc 1 757 0
 2188 0036 314B     		ldr	r3, .L81+8
 2189 0038 0593     		str	r3, [sp, #20]
 2190 003a 0023     		movs	r3, #0
 2191 003c 0493     		str	r3, [sp, #16]
 2192 003e 304B     		ldr	r3, .L81+12
 2193 0040 0393     		str	r3, [sp, #12]
 2194 0042 304B     		ldr	r3, .L81+16
 2195 0044 0293     		str	r3, [sp, #8]
 2196 0046 304B     		ldr	r3, .L81+20
 2197 0048 0193     		str	r3, [sp, #4]
 2198 004a BB68     		ldr	r3, [r7, #8]
 2199 004c 0093     		str	r3, [sp]
 2200 004e 7B68     		ldr	r3, [r7, #4]
 2201 0050 FA68     		ldr	r2, [r7, #12]
 2202 0052 2E49     		ldr	r1, .L81+24
 2203 0054 2E48     		ldr	r0, .L81+28
 2204 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 758:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2205              		.loc 1 758 0
 2206 005a 2D4A     		ldr	r2, .L81+28
 2207 005c 2D49     		ldr	r1, .L81+32
 2208 005e 0020     		movs	r0, #0
 2209 0060 FFF7FEFF 		bl	printNotif
 759:notoriOS.c    ****     // Create array portConfig of size 200 characters
 760:notoriOS.c    ****     char portConfig[200];
 761:notoriOS.c    ****     // Print port configurations
 762:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2210              		.loc 1 762 0
 2211 0064 07F11000 		add	r0, r7, #16
 2212 0068 FB68     		ldr	r3, [r7, #12]
 2213 006a 0093     		str	r3, [sp]
 2214 006c BB68     		ldr	r3, [r7, #8]
 2215 006e 2A4A     		ldr	r2, .L81+36
 2216 0070 C821     		movs	r1, #200
 2217 0072 FFF7FEFF 		bl	snprintf
 763:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2218              		.loc 1 763 0
 2219 0076 07F11003 		add	r3, r7, #16
 2220 007a 1A46     		mov	r2, r3
 2221 007c 2749     		ldr	r1, .L81+40
 2222 007e 0020     		movs	r0, #0
 2223 0080 FFF7FEFF 		bl	printNotif
 764:notoriOS.c    ****     // AT command to configure the port
 765:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 56


 2224              		.loc 1 765 0
 2225 0084 07F11003 		add	r3, r7, #16
 2226 0088 42F21072 		movw	r2, #10000
 2227 008c 2449     		ldr	r1, .L81+44
 2228 008e 1846     		mov	r0, r3
 2229 0090 FFF7FEFF 		bl	at_write_command
 2230 0094 0346     		mov	r3, r0
 2231 0096 87F8E730 		strb	r3, [r7, #231]
 766:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 767:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 768:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2232              		.loc 1 768 0
 2233 009a 4FF47A72 		mov	r2, #1000
 2234 009e 2149     		ldr	r1, .L81+48
 2235 00a0 2148     		ldr	r0, .L81+52
 2236 00a2 FFF7FEFF 		bl	at_write_command
 2237 00a6 0346     		mov	r3, r0
 2238 00a8 87F8E730 		strb	r3, [r7, #231]
 769:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 770:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2239              		.loc 1 770 0
 2240 00ac 1848     		ldr	r0, .L81+28
 2241 00ae FFF7FEFF 		bl	strlen
 2242 00b2 0346     		mov	r3, r0
 2243 00b4 1A46     		mov	r2, r3
 2244 00b6 164B     		ldr	r3, .L81+28
 2245 00b8 1344     		add	r3, r3, r2
 2246 00ba 1C49     		ldr	r1, .L81+56
 2247 00bc 1A46     		mov	r2, r3
 2248 00be 0B46     		mov	r3, r1
 2249 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2250 00c2 1380     		strh	r3, [r2]	@ unaligned
 771:notoriOS.c    ****     // AT command to send http request
 772:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2251              		.loc 1 772 0
 2252 00c4 41F28832 		movw	r2, #5000
 2253 00c8 1549     		ldr	r1, .L81+44
 2254 00ca 1148     		ldr	r0, .L81+28
 2255 00cc FFF7FEFF 		bl	at_write_command
 2256 00d0 0346     		mov	r3, r0
 2257 00d2 87F8E730 		strb	r3, [r7, #231]
 773:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 774:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 775:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2258              		.loc 1 775 0
 2259 00d6 41F28832 		movw	r2, #5000
 2260 00da 1549     		ldr	r1, .L81+60
 2261 00dc 1548     		ldr	r0, .L81+64
 2262 00de FFF7FEFF 		bl	at_write_command
 2263 00e2 0346     		mov	r3, r0
 2264 00e4 87F8E730 		strb	r3, [r7, #231]
 776:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 777:notoriOS.c    ****     
 778:notoriOS.c    ****     
 779:notoriOS.c    ****     return upgrade_status;
 2265              		.loc 1 779 0
 2266 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 57


 2267              	.L80:
 780:notoriOS.c    ****     
 781:notoriOS.c    **** }
 2268              		.loc 1 781 0 discriminator 1
 2269 00ec 1846     		mov	r0, r3
 2270 00ee E837     		adds	r7, r7, #232
 2271              		.cfi_def_cfa_offset 8
 2272 00f0 BD46     		mov	sp, r7
 2273              		.cfi_def_cfa_register 13
 2274              		@ sp needed
 2275 00f2 80BD     		pop	{r7, pc}
 2276              	.L82:
 2277              		.align	2
 2278              	.L81:
 2279 00f4 00000000 		.word	modem_state
 2280 00f8 D0030000 		.word	.LC55
 2281 00fc 68010000 		.word	.LC16
 2282 0100 6C010000 		.word	.LC17
 2283 0104 70010000 		.word	.LC18
 2284 0108 78010000 		.word	.LC19
 2285 010c 00000000 		.word	http_body
 2286 0110 00000000 		.word	http_request
 2287 0114 80010000 		.word	.LC20
 2288 0118 98010000 		.word	.LC21
 2289 011c B4010000 		.word	.LC22
 2290 0120 B8010000 		.word	.LC23
 2291 0124 E8010000 		.word	.LC26
 2292 0128 EC010000 		.word	.LC27
 2293 012c FC010000 		.word	.LC28
 2294 0130 18020000 		.word	.LC31
 2295 0134 20020000 		.word	.LC32
 2296              		.cfi_endproc
 2297              	.LFE78:
 2298              		.size	upgraded, .-upgraded
 2299              		.text
 2300              	.Letext0:
 2301              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2302              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2303              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2304              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2305              		.file 6 "testing.h"
 2306              		.file 7 "level_sensor.h"
 2307              		.file 8 "voltages.h"
 2308              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2309              		.file 10 "data.h"
 2310              		.file 11 "modem.h"
 2311              		.file 12 "notoriOS.h"
 2312              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2313              		.file 14 "downstream_level_sensor.h"
 2314              		.file 15 "valve.h"
 2315              		.file 16 "App_LED.h"
 2316              		.section	.debug_info,"",%progbits
 2317              	.Ldebug_info0:
 2318 0000 C70D0000 		.4byte	0xdc7
 2319 0004 0400     		.2byte	0x4
 2320 0006 00000000 		.4byte	.Ldebug_abbrev0
 2321 000a 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 58


 2322 000b 01       		.uleb128 0x1
 2323 000c B7000000 		.4byte	.LASF186
 2324 0010 0C       		.byte	0xc
 2325 0011 40090000 		.4byte	.LASF187
 2326 0015 2C000000 		.4byte	.LASF188
 2327 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2328 001d 00000000 		.4byte	0
 2329 0021 00000000 		.4byte	.Ldebug_line0
 2330 0025 02       		.uleb128 0x2
 2331 0026 01       		.byte	0x1
 2332 0027 06       		.byte	0x6
 2333 0028 7D000000 		.4byte	.LASF0
 2334 002c 02       		.uleb128 0x2
 2335 002d 01       		.byte	0x1
 2336 002e 08       		.byte	0x8
 2337 002f B0060000 		.4byte	.LASF1
 2338 0033 02       		.uleb128 0x2
 2339 0034 02       		.byte	0x2
 2340 0035 05       		.byte	0x5
 2341 0036 C7040000 		.4byte	.LASF2
 2342 003a 02       		.uleb128 0x2
 2343 003b 02       		.byte	0x2
 2344 003c 07       		.byte	0x7
 2345 003d 80080000 		.4byte	.LASF3
 2346 0041 03       		.uleb128 0x3
 2347 0042 3B080000 		.4byte	.LASF9
 2348 0046 02       		.byte	0x2
 2349 0047 3F       		.byte	0x3f
 2350 0048 4C000000 		.4byte	0x4c
 2351 004c 02       		.uleb128 0x2
 2352 004d 04       		.byte	0x4
 2353 004e 05       		.byte	0x5
 2354 004f A1020000 		.4byte	.LASF4
 2355 0053 02       		.uleb128 0x2
 2356 0054 04       		.byte	0x4
 2357 0055 07       		.byte	0x7
 2358 0056 04040000 		.4byte	.LASF5
 2359 005a 02       		.uleb128 0x2
 2360 005b 08       		.byte	0x8
 2361 005c 05       		.byte	0x5
 2362 005d D2010000 		.4byte	.LASF6
 2363 0061 02       		.uleb128 0x2
 2364 0062 08       		.byte	0x8
 2365 0063 07       		.byte	0x7
 2366 0064 56010000 		.4byte	.LASF7
 2367 0068 04       		.uleb128 0x4
 2368 0069 04       		.byte	0x4
 2369 006a 05       		.byte	0x5
 2370 006b 696E7400 		.ascii	"int\000"
 2371 006f 02       		.uleb128 0x2
 2372 0070 04       		.byte	0x4
 2373 0071 07       		.byte	0x7
 2374 0072 0D080000 		.4byte	.LASF8
 2375 0076 03       		.uleb128 0x3
 2376 0077 A8060000 		.4byte	.LASF10
 2377 007b 03       		.byte	0x3
 2378 007c 2C       		.byte	0x2c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 59


 2379 007d 41000000 		.4byte	0x41
 2380 0081 05       		.uleb128 0x5
 2381 0082 D8020000 		.4byte	.LASF11
 2382 0086 04       		.byte	0x4
 2383 0087 9201     		.2byte	0x192
 2384 0089 2C000000 		.4byte	0x2c
 2385 008d 05       		.uleb128 0x5
 2386 008e 08000000 		.4byte	.LASF12
 2387 0092 04       		.byte	0x4
 2388 0093 9301     		.2byte	0x193
 2389 0095 3A000000 		.4byte	0x3a
 2390 0099 05       		.uleb128 0x5
 2391 009a 29030000 		.4byte	.LASF13
 2392 009e 04       		.byte	0x4
 2393 009f 9401     		.2byte	0x194
 2394 00a1 53000000 		.4byte	0x53
 2395 00a5 05       		.uleb128 0x5
 2396 00a6 8A040000 		.4byte	.LASF14
 2397 00aa 04       		.byte	0x4
 2398 00ab 9501     		.2byte	0x195
 2399 00ad 25000000 		.4byte	0x25
 2400 00b1 05       		.uleb128 0x5
 2401 00b2 C5050000 		.4byte	.LASF15
 2402 00b6 04       		.byte	0x4
 2403 00b7 9601     		.2byte	0x196
 2404 00b9 33000000 		.4byte	0x33
 2405 00bd 05       		.uleb128 0x5
 2406 00be 03030000 		.4byte	.LASF16
 2407 00c2 04       		.byte	0x4
 2408 00c3 9701     		.2byte	0x197
 2409 00c5 4C000000 		.4byte	0x4c
 2410 00c9 05       		.uleb128 0x5
 2411 00ca 66050000 		.4byte	.LASF17
 2412 00ce 04       		.byte	0x4
 2413 00cf 9801     		.2byte	0x198
 2414 00d1 D5000000 		.4byte	0xd5
 2415 00d5 02       		.uleb128 0x2
 2416 00d6 04       		.byte	0x4
 2417 00d7 04       		.byte	0x4
 2418 00d8 46060000 		.4byte	.LASF18
 2419 00dc 02       		.uleb128 0x2
 2420 00dd 08       		.byte	0x8
 2421 00de 04       		.byte	0x4
 2422 00df D4090000 		.4byte	.LASF19
 2423 00e3 02       		.uleb128 0x2
 2424 00e4 01       		.byte	0x1
 2425 00e5 08       		.byte	0x8
 2426 00e6 08080000 		.4byte	.LASF20
 2427 00ea 02       		.uleb128 0x2
 2428 00eb 08       		.byte	0x8
 2429 00ec 04       		.byte	0x4
 2430 00ed EA070000 		.4byte	.LASF21
 2431 00f1 02       		.uleb128 0x2
 2432 00f2 04       		.byte	0x4
 2433 00f3 07       		.byte	0x7
 2434 00f4 7F050000 		.4byte	.LASF22
 2435 00f8 06       		.uleb128 0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 60


 2436 00f9 04       		.byte	0x4
 2437 00fa E3000000 		.4byte	0xe3
 2438 00fe 07       		.uleb128 0x7
 2439 00ff E3000000 		.4byte	0xe3
 2440 0103 0E010000 		.4byte	0x10e
 2441 0107 08       		.uleb128 0x8
 2442 0108 F1000000 		.4byte	0xf1
 2443 010c 17       		.byte	0x17
 2444 010d 00       		.byte	0
 2445 010e 09       		.uleb128 0x9
 2446 010f 0C       		.byte	0xc
 2447 0110 05       		.byte	0x5
 2448 0111 30       		.byte	0x30
 2449 0112 77010000 		.4byte	0x177
 2450 0116 0A       		.uleb128 0xa
 2451 0117 53656300 		.ascii	"Sec\000"
 2452 011b 05       		.byte	0x5
 2453 011c 32       		.byte	0x32
 2454 011d 81000000 		.4byte	0x81
 2455 0121 00       		.byte	0
 2456 0122 0A       		.uleb128 0xa
 2457 0123 4D696E00 		.ascii	"Min\000"
 2458 0127 05       		.byte	0x5
 2459 0128 33       		.byte	0x33
 2460 0129 81000000 		.4byte	0x81
 2461 012d 01       		.byte	0x1
 2462 012e 0B       		.uleb128 0xb
 2463 012f 6D010000 		.4byte	.LASF23
 2464 0133 05       		.byte	0x5
 2465 0134 34       		.byte	0x34
 2466 0135 81000000 		.4byte	0x81
 2467 0139 02       		.byte	0x2
 2468 013a 0B       		.uleb128 0xb
 2469 013b 13070000 		.4byte	.LASF24
 2470 013f 05       		.byte	0x5
 2471 0140 35       		.byte	0x35
 2472 0141 81000000 		.4byte	0x81
 2473 0145 03       		.byte	0x3
 2474 0146 0B       		.uleb128 0xb
 2475 0147 45040000 		.4byte	.LASF25
 2476 014b 05       		.byte	0x5
 2477 014c 36       		.byte	0x36
 2478 014d 81000000 		.4byte	0x81
 2479 0151 04       		.byte	0x4
 2480 0152 0B       		.uleb128 0xb
 2481 0153 8E090000 		.4byte	.LASF26
 2482 0157 05       		.byte	0x5
 2483 0158 37       		.byte	0x37
 2484 0159 8D000000 		.4byte	0x8d
 2485 015d 06       		.byte	0x6
 2486 015e 0B       		.uleb128 0xb
 2487 015f 50010000 		.4byte	.LASF27
 2488 0163 05       		.byte	0x5
 2489 0164 38       		.byte	0x38
 2490 0165 81000000 		.4byte	0x81
 2491 0169 08       		.byte	0x8
 2492 016a 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 61


 2493 016b 9D060000 		.4byte	.LASF28
 2494 016f 05       		.byte	0x5
 2495 0170 39       		.byte	0x39
 2496 0171 8D000000 		.4byte	0x8d
 2497 0175 0A       		.byte	0xa
 2498 0176 00       		.byte	0
 2499 0177 03       		.uleb128 0x3
 2500 0178 EC050000 		.4byte	.LASF29
 2501 017c 05       		.byte	0x5
 2502 017d 3A       		.byte	0x3a
 2503 017e 82010000 		.4byte	0x182
 2504 0182 0C       		.uleb128 0xc
 2505 0183 0E010000 		.4byte	0x10e
 2506 0187 0D       		.uleb128 0xd
 2507 0188 8101     		.2byte	0x181
 2508 018a 06       		.byte	0x6
 2509 018b 0A       		.byte	0xa
 2510 018c B5010000 		.4byte	0x1b5
 2511 0190 0B       		.uleb128 0xb
 2512 0191 93060000 		.4byte	.LASF30
 2513 0195 06       		.byte	0x6
 2514 0196 0C       		.byte	0xc
 2515 0197 B5010000 		.4byte	0x1b5
 2516 019b 00       		.byte	0
 2517 019c 0B       		.uleb128 0xb
 2518 019d F3080000 		.4byte	.LASF31
 2519 01a1 06       		.byte	0x6
 2520 01a2 0D       		.byte	0xd
 2521 01a3 81000000 		.4byte	0x81
 2522 01a7 80       		.byte	0x80
 2523 01a8 0B       		.uleb128 0xb
 2524 01a9 35070000 		.4byte	.LASF32
 2525 01ad 06       		.byte	0x6
 2526 01ae 0F       		.byte	0xf
 2527 01af C5010000 		.4byte	0x1c5
 2528 01b3 81       		.byte	0x81
 2529 01b4 00       		.byte	0
 2530 01b5 07       		.uleb128 0x7
 2531 01b6 E3000000 		.4byte	0xe3
 2532 01ba C5010000 		.4byte	0x1c5
 2533 01be 08       		.uleb128 0x8
 2534 01bf F1000000 		.4byte	0xf1
 2535 01c3 7F       		.byte	0x7f
 2536 01c4 00       		.byte	0
 2537 01c5 07       		.uleb128 0x7
 2538 01c6 E3000000 		.4byte	0xe3
 2539 01ca D5010000 		.4byte	0x1d5
 2540 01ce 08       		.uleb128 0x8
 2541 01cf F1000000 		.4byte	0xf1
 2542 01d3 FF       		.byte	0xff
 2543 01d4 00       		.byte	0
 2544 01d5 03       		.uleb128 0x3
 2545 01d6 1D070000 		.4byte	.LASF33
 2546 01da 06       		.byte	0x6
 2547 01db 10       		.byte	0x10
 2548 01dc 87010000 		.4byte	0x187
 2549 01e0 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 62


 2550 01e1 1A       		.byte	0x1a
 2551 01e2 07       		.byte	0x7
 2552 01e3 10       		.byte	0x10
 2553 01e4 19020000 		.4byte	0x219
 2554 01e8 0B       		.uleb128 0xb
 2555 01e9 39030000 		.4byte	.LASF34
 2556 01ed 07       		.byte	0x7
 2557 01ee 11       		.byte	0x11
 2558 01ef 19020000 		.4byte	0x219
 2559 01f3 00       		.byte	0
 2560 01f4 0B       		.uleb128 0xb
 2561 01f5 6A080000 		.4byte	.LASF35
 2562 01f9 07       		.byte	0x7
 2563 01fa 12       		.byte	0x12
 2564 01fb B1000000 		.4byte	0xb1
 2565 01ff 16       		.byte	0x16
 2566 0200 0B       		.uleb128 0xb
 2567 0201 DC030000 		.4byte	.LASF36
 2568 0205 07       		.byte	0x7
 2569 0206 13       		.byte	0x13
 2570 0207 81000000 		.4byte	0x81
 2571 020b 18       		.byte	0x18
 2572 020c 0B       		.uleb128 0xb
 2573 020d 17000000 		.4byte	.LASF37
 2574 0211 07       		.byte	0x7
 2575 0212 14       		.byte	0x14
 2576 0213 81000000 		.4byte	0x81
 2577 0217 19       		.byte	0x19
 2578 0218 00       		.byte	0
 2579 0219 07       		.uleb128 0x7
 2580 021a B1000000 		.4byte	0xb1
 2581 021e 29020000 		.4byte	0x229
 2582 0222 08       		.uleb128 0x8
 2583 0223 F1000000 		.4byte	0xf1
 2584 0227 0A       		.byte	0xa
 2585 0228 00       		.byte	0
 2586 0229 03       		.uleb128 0x3
 2587 022a 4C060000 		.4byte	.LASF38
 2588 022e 07       		.byte	0x7
 2589 022f 15       		.byte	0x15
 2590 0230 E0010000 		.4byte	0x1e0
 2591 0234 09       		.uleb128 0x9
 2592 0235 14       		.byte	0x14
 2593 0236 08       		.byte	0x8
 2594 0237 13       		.byte	0x13
 2595 0238 79020000 		.4byte	0x279
 2596 023c 0B       		.uleb128 0xb
 2597 023d 35040000 		.4byte	.LASF39
 2598 0241 08       		.byte	0x8
 2599 0242 14       		.byte	0x14
 2600 0243 D5000000 		.4byte	0xd5
 2601 0247 00       		.byte	0
 2602 0248 0B       		.uleb128 0xb
 2603 0249 1E020000 		.4byte	.LASF40
 2604 024d 08       		.byte	0x8
 2605 024e 15       		.byte	0x15
 2606 024f D5000000 		.4byte	0xd5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 63


 2607 0253 04       		.byte	0x4
 2608 0254 0B       		.uleb128 0xb
 2609 0255 2C020000 		.4byte	.LASF41
 2610 0259 08       		.byte	0x8
 2611 025a 16       		.byte	0x16
 2612 025b D5000000 		.4byte	0xd5
 2613 025f 08       		.byte	0x8
 2614 0260 0B       		.uleb128 0xb
 2615 0261 29060000 		.4byte	.LASF42
 2616 0265 08       		.byte	0x8
 2617 0266 17       		.byte	0x17
 2618 0267 D5000000 		.4byte	0xd5
 2619 026b 0C       		.byte	0xc
 2620 026c 0B       		.uleb128 0xb
 2621 026d A6070000 		.4byte	.LASF43
 2622 0271 08       		.byte	0x8
 2623 0272 18       		.byte	0x18
 2624 0273 81000000 		.4byte	0x81
 2625 0277 10       		.byte	0x10
 2626 0278 00       		.byte	0
 2627 0279 03       		.uleb128 0x3
 2628 027a 070A0000 		.4byte	.LASF44
 2629 027e 08       		.byte	0x8
 2630 027f 19       		.byte	0x19
 2631 0280 34020000 		.4byte	0x234
 2632 0284 09       		.uleb128 0x9
 2633 0285 10       		.byte	0x10
 2634 0286 08       		.byte	0x8
 2635 0287 1B       		.byte	0x1b
 2636 0288 BD020000 		.4byte	0x2bd
 2637 028c 0B       		.uleb128 0xb
 2638 028d 99030000 		.4byte	.LASF45
 2639 0291 08       		.byte	0x8
 2640 0292 1C       		.byte	0x1c
 2641 0293 D5000000 		.4byte	0xd5
 2642 0297 00       		.byte	0
 2643 0298 0B       		.uleb128 0xb
 2644 0299 C3020000 		.4byte	.LASF46
 2645 029d 08       		.byte	0x8
 2646 029e 1D       		.byte	0x1d
 2647 029f D5000000 		.4byte	0xd5
 2648 02a3 04       		.byte	0x4
 2649 02a4 0B       		.uleb128 0xb
 2650 02a5 95070000 		.4byte	.LASF47
 2651 02a9 08       		.byte	0x8
 2652 02aa 1E       		.byte	0x1e
 2653 02ab D5000000 		.4byte	0xd5
 2654 02af 08       		.byte	0x8
 2655 02b0 0B       		.uleb128 0xb
 2656 02b1 FF060000 		.4byte	.LASF48
 2657 02b5 08       		.byte	0x8
 2658 02b6 1F       		.byte	0x1f
 2659 02b7 D5000000 		.4byte	0xd5
 2660 02bb 0C       		.byte	0xc
 2661 02bc 00       		.byte	0
 2662 02bd 03       		.uleb128 0x3
 2663 02be 98090000 		.4byte	.LASF49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 64


 2664 02c2 08       		.byte	0x8
 2665 02c3 20       		.byte	0x20
 2666 02c4 84020000 		.4byte	0x284
 2667 02c8 0E       		.uleb128 0xe
 2668 02c9 746D00   		.ascii	"tm\000"
 2669 02cc 24       		.byte	0x24
 2670 02cd 09       		.byte	0x9
 2671 02ce 21       		.byte	0x21
 2672 02cf 40030000 		.4byte	0x340
 2673 02d3 0B       		.uleb128 0xb
 2674 02d4 C8080000 		.4byte	.LASF50
 2675 02d8 09       		.byte	0x9
 2676 02d9 23       		.byte	0x23
 2677 02da 68000000 		.4byte	0x68
 2678 02de 00       		.byte	0
 2679 02df 0B       		.uleb128 0xb
 2680 02e0 5F050000 		.4byte	.LASF51
 2681 02e4 09       		.byte	0x9
 2682 02e5 24       		.byte	0x24
 2683 02e6 68000000 		.4byte	0x68
 2684 02ea 04       		.byte	0x4
 2685 02eb 0B       		.uleb128 0xb
 2686 02ec 0F000000 		.4byte	.LASF52
 2687 02f0 09       		.byte	0x9
 2688 02f1 25       		.byte	0x25
 2689 02f2 68000000 		.4byte	0x68
 2690 02f6 08       		.byte	0x8
 2691 02f7 0B       		.uleb128 0xb
 2692 02f8 9A080000 		.4byte	.LASF53
 2693 02fc 09       		.byte	0x9
 2694 02fd 26       		.byte	0x26
 2695 02fe 68000000 		.4byte	0x68
 2696 0302 0C       		.byte	0xc
 2697 0303 0B       		.uleb128 0xb
 2698 0304 64030000 		.4byte	.LASF54
 2699 0308 09       		.byte	0x9
 2700 0309 27       		.byte	0x27
 2701 030a 68000000 		.4byte	0x68
 2702 030e 10       		.byte	0x10
 2703 030f 0B       		.uleb128 0xb
 2704 0310 87030000 		.4byte	.LASF55
 2705 0314 09       		.byte	0x9
 2706 0315 28       		.byte	0x28
 2707 0316 68000000 		.4byte	0x68
 2708 031a 14       		.byte	0x14
 2709 031b 0B       		.uleb128 0xb
 2710 031c BD070000 		.4byte	.LASF56
 2711 0320 09       		.byte	0x9
 2712 0321 29       		.byte	0x29
 2713 0322 68000000 		.4byte	0x68
 2714 0326 18       		.byte	0x18
 2715 0327 0B       		.uleb128 0xb
 2716 0328 A4050000 		.4byte	.LASF57
 2717 032c 09       		.byte	0x9
 2718 032d 2A       		.byte	0x2a
 2719 032e 68000000 		.4byte	0x68
 2720 0332 1C       		.byte	0x1c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 65


 2721 0333 0B       		.uleb128 0xb
 2722 0334 6E040000 		.4byte	.LASF58
 2723 0338 09       		.byte	0x9
 2724 0339 2B       		.byte	0x2b
 2725 033a 68000000 		.4byte	0x68
 2726 033e 20       		.byte	0x20
 2727 033f 00       		.byte	0
 2728 0340 09       		.uleb128 0x9
 2729 0341 2C       		.byte	0x2c
 2730 0342 0A       		.byte	0xa
 2731 0343 14       		.byte	0x14
 2732 0344 6D030000 		.4byte	0x36d
 2733 0348 0A       		.uleb128 0xa
 2734 0349 6B657900 		.ascii	"key\000"
 2735 034d 0A       		.byte	0xa
 2736 034e 15       		.byte	0x15
 2737 034f 6D030000 		.4byte	0x36d
 2738 0353 00       		.byte	0
 2739 0354 0B       		.uleb128 0xb
 2740 0355 7C030000 		.4byte	.LASF59
 2741 0359 0A       		.byte	0xa
 2742 035a 16       		.byte	0x16
 2743 035b 6D030000 		.4byte	0x36d
 2744 035f 14       		.byte	0x14
 2745 0360 0B       		.uleb128 0xb
 2746 0361 E2050000 		.4byte	.LASF60
 2747 0365 0A       		.byte	0xa
 2748 0366 17       		.byte	0x17
 2749 0367 BD000000 		.4byte	0xbd
 2750 036b 28       		.byte	0x28
 2751 036c 00       		.byte	0
 2752 036d 07       		.uleb128 0x7
 2753 036e E3000000 		.4byte	0xe3
 2754 0372 7D030000 		.4byte	0x37d
 2755 0376 08       		.uleb128 0x8
 2756 0377 F1000000 		.4byte	0xf1
 2757 037b 13       		.byte	0x13
 2758 037c 00       		.byte	0
 2759 037d 03       		.uleb128 0x3
 2760 037e C5030000 		.4byte	.LASF61
 2761 0382 0A       		.byte	0xa
 2762 0383 19       		.byte	0x19
 2763 0384 40030000 		.4byte	0x340
 2764 0388 09       		.uleb128 0x9
 2765 0389 3C       		.byte	0x3c
 2766 038a 0B       		.byte	0xb
 2767 038b 36       		.byte	0x36
 2768 038c B5030000 		.4byte	0x3b5
 2769 0390 0B       		.uleb128 0xb
 2770 0391 93080000 		.4byte	.LASF62
 2771 0395 0B       		.byte	0xb
 2772 0396 37       		.byte	0x37
 2773 0397 6D030000 		.4byte	0x36d
 2774 039b 00       		.byte	0
 2775 039c 0B       		.uleb128 0xb
 2776 039d 30030000 		.4byte	.LASF63
 2777 03a1 0B       		.byte	0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 66


 2778 03a2 38       		.byte	0x38
 2779 03a3 6D030000 		.4byte	0x36d
 2780 03a7 14       		.byte	0x14
 2781 03a8 0B       		.uleb128 0xb
 2782 03a9 30070000 		.4byte	.LASF64
 2783 03ad 0B       		.byte	0xb
 2784 03ae 39       		.byte	0x39
 2785 03af 6D030000 		.4byte	0x36d
 2786 03b3 28       		.byte	0x28
 2787 03b4 00       		.byte	0
 2788 03b5 03       		.uleb128 0x3
 2789 03b6 73020000 		.4byte	.LASF65
 2790 03ba 0B       		.byte	0xb
 2791 03bb 3B       		.byte	0x3b
 2792 03bc 88030000 		.4byte	0x388
 2793 03c0 09       		.uleb128 0x9
 2794 03c1 20       		.byte	0x20
 2795 03c2 0B       		.byte	0xb
 2796 03c3 3D       		.byte	0x3d
 2797 03c4 29040000 		.4byte	0x429
 2798 03c8 0B       		.uleb128 0xb
 2799 03c9 9B020000 		.4byte	.LASF66
 2800 03cd 0B       		.byte	0xb
 2801 03ce 3E       		.byte	0x3e
 2802 03cf 68000000 		.4byte	0x68
 2803 03d3 00       		.byte	0
 2804 03d4 0A       		.uleb128 0xa
 2805 03d5 62657200 		.ascii	"ber\000"
 2806 03d9 0B       		.byte	0xb
 2807 03da 3F       		.byte	0x3f
 2808 03db 68000000 		.4byte	0x68
 2809 03df 04       		.byte	0x4
 2810 03e0 0B       		.uleb128 0xb
 2811 03e1 0E070000 		.4byte	.LASF67
 2812 03e5 0B       		.byte	0xb
 2813 03e6 40       		.byte	0x40
 2814 03e7 68000000 		.4byte	0x68
 2815 03eb 08       		.byte	0x8
 2816 03ec 0B       		.uleb128 0xb
 2817 03ed E8010000 		.4byte	.LASF68
 2818 03f1 0B       		.byte	0xb
 2819 03f2 41       		.byte	0x41
 2820 03f3 68000000 		.4byte	0x68
 2821 03f7 0C       		.byte	0xc
 2822 03f8 0B       		.uleb128 0xb
 2823 03f9 D9060000 		.4byte	.LASF69
 2824 03fd 0B       		.byte	0xb
 2825 03fe 42       		.byte	0x42
 2826 03ff 68000000 		.4byte	0x68
 2827 0403 10       		.byte	0x10
 2828 0404 0B       		.uleb128 0xb
 2829 0405 D4060000 		.4byte	.LASF70
 2830 0409 0B       		.byte	0xb
 2831 040a 43       		.byte	0x43
 2832 040b 68000000 		.4byte	0x68
 2833 040f 14       		.byte	0x14
 2834 0410 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 67


 2835 0411 FB010000 		.4byte	.LASF71
 2836 0415 0B       		.byte	0xb
 2837 0416 44       		.byte	0x44
 2838 0417 68000000 		.4byte	0x68
 2839 041b 18       		.byte	0x18
 2840 041c 0B       		.uleb128 0xb
 2841 041d AA020000 		.4byte	.LASF72
 2842 0421 0B       		.byte	0xb
 2843 0422 45       		.byte	0x45
 2844 0423 68000000 		.4byte	0x68
 2845 0427 1C       		.byte	0x1c
 2846 0428 00       		.byte	0
 2847 0429 03       		.uleb128 0x3
 2848 042a 87070000 		.4byte	.LASF73
 2849 042e 0B       		.byte	0xb
 2850 042f 47       		.byte	0x47
 2851 0430 C0030000 		.4byte	0x3c0
 2852 0434 09       		.uleb128 0x9
 2853 0435 09       		.byte	0x9
 2854 0436 0B       		.byte	0xb
 2855 0437 53       		.byte	0x53
 2856 0438 A9040000 		.4byte	0x4a9
 2857 043c 0B       		.uleb128 0xb
 2858 043d 09030000 		.4byte	.LASF74
 2859 0441 0B       		.byte	0xb
 2860 0442 55       		.byte	0x55
 2861 0443 81000000 		.4byte	0x81
 2862 0447 00       		.byte	0
 2863 0448 0B       		.uleb128 0xb
 2864 0449 85090000 		.4byte	.LASF75
 2865 044d 0B       		.byte	0xb
 2866 044e 57       		.byte	0x57
 2867 044f A9040000 		.4byte	0x4a9
 2868 0453 01       		.byte	0x1
 2869 0454 0B       		.uleb128 0xb
 2870 0455 4E080000 		.4byte	.LASF76
 2871 0459 0B       		.byte	0xb
 2872 045a 59       		.byte	0x59
 2873 045b 81000000 		.4byte	0x81
 2874 045f 02       		.byte	0x2
 2875 0460 0B       		.uleb128 0xb
 2876 0461 F5060000 		.4byte	.LASF77
 2877 0465 0B       		.byte	0xb
 2878 0466 5B       		.byte	0x5b
 2879 0467 81000000 		.4byte	0x81
 2880 046b 03       		.byte	0x3
 2881 046c 0B       		.uleb128 0xb
 2882 046d 6B030000 		.4byte	.LASF78
 2883 0471 0B       		.byte	0xb
 2884 0472 5E       		.byte	0x5e
 2885 0473 81000000 		.4byte	0x81
 2886 0477 04       		.byte	0x4
 2887 0478 0B       		.uleb128 0xb
 2888 0479 28090000 		.4byte	.LASF79
 2889 047d 0B       		.byte	0xb
 2890 047e 63       		.byte	0x63
 2891 047f 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 68


 2892 0483 05       		.byte	0x5
 2893 0484 0B       		.uleb128 0xb
 2894 0485 C5070000 		.4byte	.LASF80
 2895 0489 0B       		.byte	0xb
 2896 048a 65       		.byte	0x65
 2897 048b 81000000 		.4byte	0x81
 2898 048f 06       		.byte	0x6
 2899 0490 0B       		.uleb128 0xb
 2900 0491 AB080000 		.4byte	.LASF81
 2901 0495 0B       		.byte	0xb
 2902 0496 66       		.byte	0x66
 2903 0497 81000000 		.4byte	0x81
 2904 049b 07       		.byte	0x7
 2905 049c 0B       		.uleb128 0xb
 2906 049d E8080000 		.4byte	.LASF82
 2907 04a1 0B       		.byte	0xb
 2908 04a2 67       		.byte	0x67
 2909 04a3 81000000 		.4byte	0x81
 2910 04a7 08       		.byte	0x8
 2911 04a8 00       		.byte	0
 2912 04a9 02       		.uleb128 0x2
 2913 04aa 01       		.byte	0x1
 2914 04ab 02       		.byte	0x2
 2915 04ac A2060000 		.4byte	.LASF83
 2916 04b0 03       		.uleb128 0x3
 2917 04b1 1F050000 		.4byte	.LASF84
 2918 04b5 0B       		.byte	0xb
 2919 04b6 69       		.byte	0x69
 2920 04b7 34040000 		.4byte	0x434
 2921 04bb 09       		.uleb128 0x9
 2922 04bc 06       		.byte	0x6
 2923 04bd 0C       		.byte	0xc
 2924 04be 30       		.byte	0x30
 2925 04bf F4040000 		.4byte	0x4f4
 2926 04c3 0B       		.uleb128 0xb
 2927 04c4 4C030000 		.4byte	.LASF85
 2928 04c8 0C       		.byte	0xc
 2929 04c9 32       		.byte	0x32
 2930 04ca 8D000000 		.4byte	0x8d
 2931 04ce 00       		.byte	0
 2932 04cf 0B       		.uleb128 0xb
 2933 04d0 6F090000 		.4byte	.LASF86
 2934 04d4 0C       		.byte	0xc
 2935 04d5 33       		.byte	0x33
 2936 04d6 B1000000 		.4byte	0xb1
 2937 04da 02       		.byte	0x2
 2938 04db 0B       		.uleb128 0xb
 2939 04dc 61090000 		.4byte	.LASF87
 2940 04e0 0C       		.byte	0xc
 2941 04e1 34       		.byte	0x34
 2942 04e2 81000000 		.4byte	0x81
 2943 04e6 04       		.byte	0x4
 2944 04e7 0B       		.uleb128 0xb
 2945 04e8 89000000 		.4byte	.LASF88
 2946 04ec 0C       		.byte	0xc
 2947 04ed 35       		.byte	0x35
 2948 04ee 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 69


 2949 04f2 05       		.byte	0x5
 2950 04f3 00       		.byte	0
 2951 04f4 03       		.uleb128 0x3
 2952 04f5 BD020000 		.4byte	.LASF89
 2953 04f9 0C       		.byte	0xc
 2954 04fa 38       		.byte	0x38
 2955 04fb FF040000 		.4byte	0x4ff
 2956 04ff 0C       		.uleb128 0xc
 2957 0500 BB040000 		.4byte	0x4bb
 2958 0504 09       		.uleb128 0x9
 2959 0505 1C       		.byte	0x1c
 2960 0506 0C       		.byte	0xc
 2961 0507 3B       		.byte	0x3b
 2962 0508 25050000 		.4byte	0x525
 2963 050c 0B       		.uleb128 0xb
 2964 050d 77040000 		.4byte	.LASF90
 2965 0511 0C       		.byte	0xc
 2966 0512 3D       		.byte	0x3d
 2967 0513 25050000 		.4byte	0x525
 2968 0517 00       		.byte	0
 2969 0518 0B       		.uleb128 0xb
 2970 0519 BE090000 		.4byte	.LASF91
 2971 051d 0C       		.byte	0xc
 2972 051e 3E       		.byte	0x3e
 2973 051f FE000000 		.4byte	0xfe
 2974 0523 04       		.byte	0x4
 2975 0524 00       		.byte	0
 2976 0525 06       		.uleb128 0x6
 2977 0526 04       		.byte	0x4
 2978 0527 B5030000 		.4byte	0x3b5
 2979 052b 03       		.uleb128 0x3
 2980 052c 14050000 		.4byte	.LASF92
 2981 0530 0C       		.byte	0xc
 2982 0531 40       		.byte	0x40
 2983 0532 04050000 		.4byte	0x504
 2984 0536 09       		.uleb128 0x9
 2985 0537 68       		.byte	0x68
 2986 0538 0C       		.byte	0xc
 2987 0539 46       		.byte	0x46
 2988 053a 57050000 		.4byte	0x557
 2989 053e 0B       		.uleb128 0xb
 2990 053f 82040000 		.4byte	.LASF93
 2991 0543 0C       		.byte	0xc
 2992 0544 4B       		.byte	0x4b
 2993 0545 57050000 		.4byte	0x557
 2994 0549 00       		.byte	0
 2995 054a 0B       		.uleb128 0xb
 2996 054b 66040000 		.4byte	.LASF94
 2997 054f 0C       		.byte	0xc
 2998 0550 4C       		.byte	0x4c
 2999 0551 68000000 		.4byte	0x68
 3000 0555 64       		.byte	0x64
 3001 0556 00       		.byte	0
 3002 0557 07       		.uleb128 0x7
 3003 0558 E3000000 		.4byte	0xe3
 3004 055c 67050000 		.4byte	0x567
 3005 0560 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 70


 3006 0561 F1000000 		.4byte	0xf1
 3007 0565 63       		.byte	0x63
 3008 0566 00       		.byte	0
 3009 0567 03       		.uleb128 0x3
 3010 0568 AC050000 		.4byte	.LASF95
 3011 056c 0C       		.byte	0xc
 3012 056d 52       		.byte	0x52
 3013 056e 36050000 		.4byte	0x536
 3014 0572 0F       		.uleb128 0xf
 3015 0573 AC000000 		.4byte	.LASF189
 3016 0577 01       		.byte	0x1
 3017 0578 14       		.byte	0x14
 3018 0579 00000000 		.4byte	.LFB64
 3019 057d 0C000000 		.4byte	.LFE64-.LFB64
 3020 0581 01       		.uleb128 0x1
 3021 0582 9C       		.byte	0x9c
 3022 0583 10       		.uleb128 0x10
 3023 0584 AE090000 		.4byte	.LASF108
 3024 0588 01       		.byte	0x1
 3025 0589 28       		.byte	0x28
 3026 058a 00000000 		.4byte	.LFB65
 3027 058e 84010000 		.4byte	.LFE65-.LFB65
 3028 0592 01       		.uleb128 0x1
 3029 0593 9C       		.byte	0x9c
 3030 0594 B5050000 		.4byte	0x5b5
 3031 0598 11       		.uleb128 0x11
 3032 0599 45080000 		.4byte	.LASF96
 3033 059d 01       		.byte	0x1
 3034 059e 3C       		.byte	0x3c
 3035 059f B5050000 		.4byte	0x5b5
 3036 05a3 02       		.uleb128 0x2
 3037 05a4 91       		.byte	0x91
 3038 05a5 64       		.sleb128 -28
 3039 05a6 11       		.uleb128 0x11
 3040 05a7 16040000 		.4byte	.LASF97
 3041 05ab 01       		.byte	0x1
 3042 05ac 6B       		.byte	0x6b
 3043 05ad 81000000 		.4byte	0x81
 3044 05b1 02       		.uleb128 0x2
 3045 05b2 91       		.byte	0x91
 3046 05b3 6F       		.sleb128 -17
 3047 05b4 00       		.byte	0
 3048 05b5 07       		.uleb128 0x7
 3049 05b6 99000000 		.4byte	0x99
 3050 05ba C5050000 		.4byte	0x5c5
 3051 05be 08       		.uleb128 0x8
 3052 05bf F1000000 		.4byte	0xf1
 3053 05c3 01       		.byte	0x1
 3054 05c4 00       		.byte	0
 3055 05c5 12       		.uleb128 0x12
 3056 05c6 8F040000 		.4byte	.LASF99
 3057 05ca 01       		.byte	0x1
 3058 05cb 75       		.byte	0x75
 3059 05cc 68000000 		.4byte	0x68
 3060 05d0 00000000 		.4byte	.LFB66
 3061 05d4 F4000000 		.4byte	.LFE66-.LFB66
 3062 05d8 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 71


 3063 05d9 9C       		.byte	0x9c
 3064 05da ED050000 		.4byte	0x5ed
 3065 05de 11       		.uleb128 0x11
 3066 05df 86060000 		.4byte	.LASF98
 3067 05e3 01       		.byte	0x1
 3068 05e4 A4       		.byte	0xa4
 3069 05e5 81000000 		.4byte	0x81
 3070 05e9 02       		.uleb128 0x2
 3071 05ea 91       		.byte	0x91
 3072 05eb 77       		.sleb128 -9
 3073 05ec 00       		.byte	0
 3074 05ed 13       		.uleb128 0x13
 3075 05ee 78080000 		.4byte	.LASF190
 3076 05f2 01       		.byte	0x1
 3077 05f3 B4       		.byte	0xb4
 3078 05f4 00000000 		.4byte	.LFB67
 3079 05f8 2A000000 		.4byte	.LFE67-.LFB67
 3080 05fc 01       		.uleb128 0x1
 3081 05fd 9C       		.byte	0x9c
 3082 05fe 14       		.uleb128 0x14
 3083 05ff D1030000 		.4byte	.LASF100
 3084 0603 01       		.byte	0x1
 3085 0604 D9       		.byte	0xd9
 3086 0605 00000000 		.4byte	.LFB68
 3087 0609 A8000000 		.4byte	.LFE68-.LFB68
 3088 060d 01       		.uleb128 0x1
 3089 060e 9C       		.byte	0x9c
 3090 060f 22060000 		.4byte	0x622
 3091 0613 15       		.uleb128 0x15
 3092 0614 36050000 		.4byte	.LASF101
 3093 0618 01       		.byte	0x1
 3094 0619 D9       		.byte	0xd9
 3095 061a 81000000 		.4byte	0x81
 3096 061e 02       		.uleb128 0x2
 3097 061f 91       		.byte	0x91
 3098 0620 77       		.sleb128 -9
 3099 0621 00       		.byte	0
 3100 0622 16       		.uleb128 0x16
 3101 0623 A3090000 		.4byte	.LASF105
 3102 0627 01       		.byte	0x1
 3103 0628 0201     		.2byte	0x102
 3104 062a 81000000 		.4byte	0x81
 3105 062e 00000000 		.4byte	.LFB69
 3106 0632 48000000 		.4byte	.LFE69-.LFB69
 3107 0636 01       		.uleb128 0x1
 3108 0637 9C       		.byte	0x9c
 3109 0638 5B060000 		.4byte	0x65b
 3110 063c 17       		.uleb128 0x17
 3111 063d 6E050000 		.4byte	.LASF102
 3112 0641 01       		.byte	0x1
 3113 0642 0201     		.2byte	0x102
 3114 0644 5B060000 		.4byte	0x65b
 3115 0648 02       		.uleb128 0x2
 3116 0649 91       		.byte	0x91
 3117 064a 74       		.sleb128 -12
 3118 064b 17       		.uleb128 0x17
 3119 064c 36050000 		.4byte	.LASF101
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 72


 3120 0650 01       		.byte	0x1
 3121 0651 0201     		.2byte	0x102
 3122 0653 81000000 		.4byte	0x81
 3123 0657 02       		.uleb128 0x2
 3124 0658 91       		.byte	0x91
 3125 0659 73       		.sleb128 -13
 3126 065a 00       		.byte	0
 3127 065b 06       		.uleb128 0x6
 3128 065c 04       		.byte	0x4
 3129 065d F4040000 		.4byte	0x4f4
 3130 0661 18       		.uleb128 0x18
 3131 0662 DE060000 		.4byte	.LASF103
 3132 0666 01       		.byte	0x1
 3133 0667 1701     		.2byte	0x117
 3134 0669 00000000 		.4byte	.LFB70
 3135 066d 1E000000 		.4byte	.LFE70-.LFB70
 3136 0671 01       		.uleb128 0x1
 3137 0672 9C       		.byte	0x9c
 3138 0673 87060000 		.4byte	0x687
 3139 0677 17       		.uleb128 0x17
 3140 0678 3C070000 		.4byte	.LASF104
 3141 067c 01       		.byte	0x1
 3142 067d 1701     		.2byte	0x117
 3143 067f 5B060000 		.4byte	0x65b
 3144 0683 02       		.uleb128 0x2
 3145 0684 91       		.byte	0x91
 3146 0685 74       		.sleb128 -12
 3147 0686 00       		.byte	0
 3148 0687 19       		.uleb128 0x19
 3149 0688 0F060000 		.4byte	.LASF106
 3150 068c 01       		.byte	0x1
 3151 068d 2001     		.2byte	0x120
 3152 068f F4040000 		.4byte	0x4f4
 3153 0693 00000000 		.4byte	.LFB71
 3154 0697 46000000 		.4byte	.LFE71-.LFB71
 3155 069b 01       		.uleb128 0x1
 3156 069c 9C       		.byte	0x9c
 3157 069d DE060000 		.4byte	0x6de
 3158 06a1 17       		.uleb128 0x17
 3159 06a2 4C030000 		.4byte	.LASF85
 3160 06a6 01       		.byte	0x1
 3161 06a7 2001     		.2byte	0x120
 3162 06a9 8D000000 		.4byte	0x8d
 3163 06ad 02       		.uleb128 0x2
 3164 06ae 91       		.byte	0x91
 3165 06af 6A       		.sleb128 -22
 3166 06b0 17       		.uleb128 0x17
 3167 06b1 61090000 		.4byte	.LASF87
 3168 06b5 01       		.byte	0x1
 3169 06b6 2001     		.2byte	0x120
 3170 06b8 81000000 		.4byte	0x81
 3171 06bc 02       		.uleb128 0x2
 3172 06bd 91       		.byte	0x91
 3173 06be 69       		.sleb128 -23
 3174 06bf 17       		.uleb128 0x17
 3175 06c0 89000000 		.4byte	.LASF88
 3176 06c4 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 73


 3177 06c5 2001     		.2byte	0x120
 3178 06c7 81000000 		.4byte	0x81
 3179 06cb 02       		.uleb128 0x2
 3180 06cc 91       		.byte	0x91
 3181 06cd 68       		.sleb128 -24
 3182 06ce 1A       		.uleb128 0x1a
 3183 06cf A2080000 		.4byte	.LASF107
 3184 06d3 01       		.byte	0x1
 3185 06d4 2301     		.2byte	0x123
 3186 06d6 F4040000 		.4byte	0x4f4
 3187 06da 02       		.uleb128 0x2
 3188 06db 91       		.byte	0x91
 3189 06dc 70       		.sleb128 -16
 3190 06dd 00       		.byte	0
 3191 06de 1B       		.uleb128 0x1b
 3192 06df 4B070000 		.4byte	.LASF109
 3193 06e3 01       		.byte	0x1
 3194 06e4 3901     		.2byte	0x139
 3195 06e6 00000000 		.4byte	.LFB72
 3196 06ea 50010000 		.4byte	.LFE72-.LFB72
 3197 06ee 01       		.uleb128 0x1
 3198 06ef 9C       		.byte	0x9c
 3199 06f0 65070000 		.4byte	0x765
 3200 06f4 1A       		.uleb128 0x1a
 3201 06f5 B6010000 		.4byte	.LASF110
 3202 06f9 01       		.byte	0x1
 3203 06fa 4101     		.2byte	0x141
 3204 06fc D5010000 		.4byte	0x1d5
 3205 0700 03       		.uleb128 0x3
 3206 0701 91       		.byte	0x91
 3207 0702 EC7C     		.sleb128 -404
 3208 0704 1A       		.uleb128 0x1a
 3209 0705 52050000 		.4byte	.LASF111
 3210 0709 01       		.byte	0x1
 3211 070a 4501     		.2byte	0x145
 3212 070c D5010000 		.4byte	0x1d5
 3213 0710 03       		.uleb128 0x3
 3214 0711 91       		.byte	0x91
 3215 0712 E879     		.sleb128 -792
 3216 0714 1A       		.uleb128 0x1a
 3217 0715 CC090000 		.4byte	.LASF112
 3218 0719 01       		.byte	0x1
 3219 071a 4901     		.2byte	0x149
 3220 071c D5010000 		.4byte	0x1d5
 3221 0720 03       		.uleb128 0x3
 3222 0721 91       		.byte	0x91
 3223 0722 E476     		.sleb128 -1180
 3224 0724 1A       		.uleb128 0x1a
 3225 0725 35090000 		.4byte	.LASF113
 3226 0729 01       		.byte	0x1
 3227 072a 4D01     		.2byte	0x14d
 3228 072c D5010000 		.4byte	0x1d5
 3229 0730 03       		.uleb128 0x3
 3230 0731 91       		.byte	0x91
 3231 0732 E073     		.sleb128 -1568
 3232 0734 1A       		.uleb128 0x1a
 3233 0735 45010000 		.4byte	.LASF114
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 74


 3234 0739 01       		.byte	0x1
 3235 073a 5101     		.2byte	0x151
 3236 073c D5010000 		.4byte	0x1d5
 3237 0740 03       		.uleb128 0x3
 3238 0741 91       		.byte	0x91
 3239 0742 DC70     		.sleb128 -1956
 3240 0744 1A       		.uleb128 0x1a
 3241 0745 BD040000 		.4byte	.LASF115
 3242 0749 01       		.byte	0x1
 3243 074a 5501     		.2byte	0x155
 3244 074c D5010000 		.4byte	0x1d5
 3245 0750 03       		.uleb128 0x3
 3246 0751 91       		.byte	0x91
 3247 0752 D86D     		.sleb128 -2344
 3248 0754 1A       		.uleb128 0x1a
 3249 0755 00000000 		.4byte	.LASF116
 3250 0759 01       		.byte	0x1
 3251 075a 5901     		.2byte	0x159
 3252 075c D5010000 		.4byte	0x1d5
 3253 0760 03       		.uleb128 0x3
 3254 0761 91       		.byte	0x91
 3255 0762 D46A     		.sleb128 -2732
 3256 0764 00       		.byte	0
 3257 0765 1C       		.uleb128 0x1c
 3258 0766 B9090000 		.4byte	.LASF191
 3259 076a 01       		.byte	0x1
 3260 076b 6401     		.2byte	0x164
 3261 076d 68000000 		.4byte	0x68
 3262 0771 00000000 		.4byte	.LFB73
 3263 0775 1E000000 		.4byte	.LFE73-.LFB73
 3264 0779 01       		.uleb128 0x1
 3265 077a 9C       		.byte	0x9c
 3266 077b 1D       		.uleb128 0x1d
 3267 077c 13030000 		.4byte	.LASF117
 3268 0780 01       		.byte	0x1
 3269 0781 7A01     		.2byte	0x17a
 3270 0783 81000000 		.4byte	0x81
 3271 0787 00000000 		.4byte	.LFB74
 3272 078b 5C040000 		.4byte	.LFE74-.LFB74
 3273 078f 01       		.uleb128 0x1
 3274 0790 9C       		.byte	0x9c
 3275 0791 E5080000 		.4byte	0x8e5
 3276 0795 1E       		.uleb128 0x1e
 3277 0796 62000000 		.4byte	.LBB2
 3278 079a CC030000 		.4byte	.LBE2-.LBB2
 3279 079e 1A       		.uleb128 0x1a
 3280 079f 22060000 		.4byte	.LASF118
 3281 07a3 01       		.byte	0x1
 3282 07a4 AA01     		.2byte	0x1aa
 3283 07a6 6D030000 		.4byte	0x36d
 3284 07aa 02       		.uleb128 0x2
 3285 07ab 91       		.byte	0x91
 3286 07ac 48       		.sleb128 -56
 3287 07ad 1A       		.uleb128 0x1a
 3288 07ae 5B060000 		.4byte	.LASF119
 3289 07b2 01       		.byte	0x1
 3290 07b3 AE01     		.2byte	0x1ae
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 75


 3291 07b5 6D030000 		.4byte	0x36d
 3292 07b9 03       		.uleb128 0x3
 3293 07ba 91       		.byte	0x91
 3294 07bb B47F     		.sleb128 -76
 3295 07bd 1A       		.uleb128 0x1a
 3296 07be DE020000 		.4byte	.LASF120
 3297 07c2 01       		.byte	0x1
 3298 07c3 B301     		.2byte	0x1b3
 3299 07c5 6D030000 		.4byte	0x36d
 3300 07c9 03       		.uleb128 0x3
 3301 07ca 91       		.byte	0x91
 3302 07cb A07F     		.sleb128 -96
 3303 07cd 1A       		.uleb128 0x1a
 3304 07ce 22040000 		.4byte	.LASF121
 3305 07d2 01       		.byte	0x1
 3306 07d3 C601     		.2byte	0x1c6
 3307 07d5 8D000000 		.4byte	0x8d
 3308 07d9 02       		.uleb128 0x2
 3309 07da 91       		.byte	0x91
 3310 07db 66       		.sleb128 -26
 3311 07dc 1A       		.uleb128 0x1a
 3312 07dd A8040000 		.4byte	.LASF122
 3313 07e1 01       		.byte	0x1
 3314 07e2 C701     		.2byte	0x1c7
 3315 07e4 6D030000 		.4byte	0x36d
 3316 07e8 03       		.uleb128 0x3
 3317 07e9 91       		.byte	0x91
 3318 07ea 8C7F     		.sleb128 -116
 3319 07ec 1A       		.uleb128 0x1a
 3320 07ed 30080000 		.4byte	.LASF123
 3321 07f1 01       		.byte	0x1
 3322 07f2 DC01     		.2byte	0x1dc
 3323 07f4 E5080000 		.4byte	0x8e5
 3324 07f8 03       		.uleb128 0x3
 3325 07f9 91       		.byte	0x91
 3326 07fa A475     		.sleb128 -1372
 3327 07fc 1A       		.uleb128 0x1a
 3328 07fd F3080000 		.4byte	.LASF31
 3329 0801 01       		.byte	0x1
 3330 0802 DD01     		.2byte	0x1dd
 3331 0804 81000000 		.4byte	0x81
 3332 0808 02       		.uleb128 0x2
 3333 0809 91       		.byte	0x91
 3334 080a 65       		.sleb128 -27
 3335 080b 1A       		.uleb128 0x1a
 3336 080c F6070000 		.4byte	.LASF124
 3337 0810 01       		.byte	0x1
 3338 0811 E401     		.2byte	0x1e4
 3339 0813 F8000000 		.4byte	0xf8
 3340 0817 02       		.uleb128 0x2
 3341 0818 91       		.byte	0x91
 3342 0819 6C       		.sleb128 -20
 3343 081a 1A       		.uleb128 0x1a
 3344 081b E0010000 		.4byte	.LASF125
 3345 081f 01       		.byte	0x1
 3346 0820 E801     		.2byte	0x1e8
 3347 0822 A5000000 		.4byte	0xa5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 76


 3348 0826 02       		.uleb128 0x2
 3349 0827 91       		.byte	0x91
 3350 0828 64       		.sleb128 -28
 3351 0829 1A       		.uleb128 0x1a
 3352 082a 1C030000 		.4byte	.LASF126
 3353 082e 01       		.byte	0x1
 3354 082f 1802     		.2byte	0x218
 3355 0831 4C000000 		.4byte	0x4c
 3356 0835 02       		.uleb128 0x2
 3357 0836 91       		.byte	0x91
 3358 0837 5C       		.sleb128 -36
 3359 0838 1F       		.uleb128 0x1f
 3360 0839 F0000000 		.4byte	.LBB3
 3361 083d 2C000000 		.4byte	.LBE3-.LBB3
 3362 0841 65080000 		.4byte	0x865
 3363 0845 1A       		.uleb128 0x1a
 3364 0846 77070000 		.4byte	.LASF127
 3365 084a 01       		.byte	0x1
 3366 084b BB01     		.2byte	0x1bb
 3367 084d 8D000000 		.4byte	0x8d
 3368 0851 02       		.uleb128 0x2
 3369 0852 91       		.byte	0x91
 3370 0853 68       		.sleb128 -24
 3371 0854 1A       		.uleb128 0x1a
 3372 0855 61020000 		.4byte	.LASF128
 3373 0859 01       		.byte	0x1
 3374 085a BC01     		.2byte	0x1bc
 3375 085c 6D030000 		.4byte	0x36d
 3376 0860 03       		.uleb128 0x3
 3377 0861 91       		.byte	0x91
 3378 0862 F87E     		.sleb128 -136
 3379 0864 00       		.byte	0
 3380 0865 1F       		.uleb128 0x1f
 3381 0866 1E010000 		.4byte	.LBB4
 3382 086a 20000000 		.4byte	.LBE4-.LBB4
 3383 086e 83080000 		.4byte	0x883
 3384 0872 1A       		.uleb128 0x1a
 3385 0873 61020000 		.4byte	.LASF128
 3386 0877 01       		.byte	0x1
 3387 0878 C001     		.2byte	0x1c0
 3388 087a 6D030000 		.4byte	0x36d
 3389 087e 03       		.uleb128 0x3
 3390 087f 91       		.byte	0x91
 3391 0880 E47E     		.sleb128 -156
 3392 0882 00       		.byte	0
 3393 0883 1F       		.uleb128 0x1f
 3394 0884 5E020000 		.4byte	.LBB5
 3395 0888 4C010000 		.4byte	.LBE5-.LBB5
 3396 088c BA080000 		.4byte	0x8ba
 3397 0890 1A       		.uleb128 0x1a
 3398 0891 1B060000 		.4byte	.LASF129
 3399 0895 01       		.byte	0x1
 3400 0896 ED01     		.2byte	0x1ed
 3401 0898 A5000000 		.4byte	0xa5
 3402 089c 02       		.uleb128 0x2
 3403 089d 91       		.byte	0x91
 3404 089e 6B       		.sleb128 -21
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 77


 3405 089f 1E       		.uleb128 0x1e
 3406 08a0 66020000 		.4byte	.LBB6
 3407 08a4 28010000 		.4byte	.LBE6-.LBB6
 3408 08a8 1A       		.uleb128 0x1a
 3409 08a9 EF030000 		.4byte	.LASF130
 3410 08ad 01       		.byte	0x1
 3411 08ae EF01     		.2byte	0x1ef
 3412 08b0 F5080000 		.4byte	0x8f5
 3413 08b4 03       		.uleb128 0x3
 3414 08b5 91       		.byte	0x91
 3415 08b6 EC76     		.sleb128 -1172
 3416 08b8 00       		.byte	0
 3417 08b9 00       		.byte	0
 3418 08ba 1E       		.uleb128 0x1e
 3419 08bb C4030000 		.4byte	.LBB7
 3420 08bf 3A000000 		.4byte	.LBE7-.LBB7
 3421 08c3 1A       		.uleb128 0x1a
 3422 08c4 EC020000 		.4byte	.LASF131
 3423 08c8 01       		.byte	0x1
 3424 08c9 0F02     		.2byte	0x20f
 3425 08cb 68000000 		.4byte	0x68
 3426 08cf 02       		.uleb128 0x2
 3427 08d0 91       		.byte	0x91
 3428 08d1 60       		.sleb128 -32
 3429 08d2 1A       		.uleb128 0x1a
 3430 08d3 E9060000 		.4byte	.LASF132
 3431 08d7 01       		.byte	0x1
 3432 08d8 1002     		.2byte	0x210
 3433 08da 06090000 		.4byte	0x906
 3434 08de 03       		.uleb128 0x3
 3435 08df 91       		.byte	0x91
 3436 08e0 D87E     		.sleb128 -168
 3437 08e2 00       		.byte	0
 3438 08e3 00       		.byte	0
 3439 08e4 00       		.byte	0
 3440 08e5 07       		.uleb128 0x7
 3441 08e6 E3000000 		.4byte	0xe3
 3442 08ea F5080000 		.4byte	0x8f5
 3443 08ee 08       		.uleb128 0x8
 3444 08ef F1000000 		.4byte	0xf1
 3445 08f3 C7       		.byte	0xc7
 3446 08f4 00       		.byte	0
 3447 08f5 07       		.uleb128 0x7
 3448 08f6 E3000000 		.4byte	0xe3
 3449 08fa 06090000 		.4byte	0x906
 3450 08fe 20       		.uleb128 0x20
 3451 08ff F1000000 		.4byte	0xf1
 3452 0903 E803     		.2byte	0x3e8
 3453 0905 00       		.byte	0
 3454 0906 07       		.uleb128 0x7
 3455 0907 E3000000 		.4byte	0xe3
 3456 090b 16090000 		.4byte	0x916
 3457 090f 08       		.uleb128 0x8
 3458 0910 F1000000 		.4byte	0xf1
 3459 0914 09       		.byte	0x9
 3460 0915 00       		.byte	0
 3461 0916 1D       		.uleb128 0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 78


 3462 0917 62060000 		.4byte	.LASF133
 3463 091b 01       		.byte	0x1
 3464 091c 2D02     		.2byte	0x22d
 3465 091e 81000000 		.4byte	0x81
 3466 0922 00000000 		.4byte	.LFB75
 3467 0926 44000000 		.4byte	.LFE75-.LFB75
 3468 092a 01       		.uleb128 0x1
 3469 092b 9C       		.byte	0x9c
 3470 092c 4A090000 		.4byte	0x94a
 3471 0930 1E       		.uleb128 0x1e
 3472 0931 20000000 		.4byte	.LBB8
 3473 0935 1A000000 		.4byte	.LBE8-.LBB8
 3474 0939 1A       		.uleb128 0x1a
 3475 093a 1C030000 		.4byte	.LASF126
 3476 093e 01       		.byte	0x1
 3477 093f 3802     		.2byte	0x238
 3478 0941 4C000000 		.4byte	0x4c
 3479 0945 02       		.uleb128 0x2
 3480 0946 91       		.byte	0x91
 3481 0947 74       		.sleb128 -12
 3482 0948 00       		.byte	0
 3483 0949 00       		.byte	0
 3484 094a 1D       		.uleb128 0x1d
 3485 094b 50040000 		.4byte	.LASF134
 3486 094f 01       		.byte	0x1
 3487 0950 4D02     		.2byte	0x24d
 3488 0952 81000000 		.4byte	0x81
 3489 0956 00000000 		.4byte	.LFB76
 3490 095a 9C020000 		.4byte	.LFE76-.LFB76
 3491 095e 01       		.uleb128 0x1
 3492 095f 9C       		.byte	0x9c
 3493 0960 EB090000 		.4byte	0x9eb
 3494 0964 1A       		.uleb128 0x1a
 3495 0965 E2050000 		.4byte	.LASF60
 3496 0969 01       		.byte	0x1
 3497 096a 5002     		.2byte	0x250
 3498 096c 4C000000 		.4byte	0x4c
 3499 0970 02       		.uleb128 0x2
 3500 0971 91       		.byte	0x91
 3501 0972 6C       		.sleb128 -20
 3502 0973 1A       		.uleb128 0x1a
 3503 0974 FC070000 		.4byte	.LASF135
 3504 0978 01       		.byte	0x1
 3505 0979 5102     		.2byte	0x251
 3506 097b EB090000 		.4byte	0x9eb
 3507 097f 02       		.uleb128 0x2
 3508 0980 91       		.byte	0x91
 3509 0981 4C       		.sleb128 -52
 3510 0982 1A       		.uleb128 0x1a
 3511 0983 7C030000 		.4byte	.LASF59
 3512 0987 01       		.byte	0x1
 3513 0988 5502     		.2byte	0x255
 3514 098a 6D030000 		.4byte	0x36d
 3515 098e 03       		.uleb128 0x3
 3516 098f 91       		.byte	0x91
 3517 0990 B87F     		.sleb128 -72
 3518 0992 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 79


 3519 0993 110A0000 		.4byte	.LASF136
 3520 0997 01       		.byte	0x1
 3521 0998 5902     		.2byte	0x259
 3522 099a FB090000 		.4byte	0x9fb
 3523 099e 03       		.uleb128 0x3
 3524 099f 91       		.byte	0x91
 3525 09a0 B07F     		.sleb128 -80
 3526 09a2 1A       		.uleb128 0x1a
 3527 09a3 FA030000 		.4byte	.LASF137
 3528 09a7 01       		.byte	0x1
 3529 09a8 7A02     		.2byte	0x27a
 3530 09aa 79020000 		.4byte	0x279
 3531 09ae 03       		.uleb128 0x3
 3532 09af 91       		.byte	0x91
 3533 09b0 9C7F     		.sleb128 -100
 3534 09b2 1F       		.uleb128 0x1f
 3535 09b3 46000000 		.4byte	.LBB9
 3536 09b7 78000000 		.4byte	.LBE9-.LBB9
 3537 09bb D0090000 		.4byte	0x9d0
 3538 09bf 1A       		.uleb128 0x1a
 3539 09c0 5B080000 		.4byte	.LASF138
 3540 09c4 01       		.byte	0x1
 3541 09c5 6202     		.2byte	0x262
 3542 09c7 29020000 		.4byte	0x229
 3543 09cb 03       		.uleb128 0x3
 3544 09cc 91       		.byte	0x91
 3545 09cd 807F     		.sleb128 -128
 3546 09cf 00       		.byte	0
 3547 09d0 1E       		.uleb128 0x1e
 3548 09d1 42010000 		.4byte	.LBB10
 3549 09d5 EE000000 		.4byte	.LBE10-.LBB10
 3550 09d9 1A       		.uleb128 0x1a
 3551 09da CF080000 		.4byte	.LASF139
 3552 09de 01       		.byte	0x1
 3553 09df 9602     		.2byte	0x296
 3554 09e1 BD020000 		.4byte	0x2bd
 3555 09e5 03       		.uleb128 0x3
 3556 09e6 91       		.byte	0x91
 3557 09e7 F07E     		.sleb128 -144
 3558 09e9 00       		.byte	0
 3559 09ea 00       		.byte	0
 3560 09eb 07       		.uleb128 0x7
 3561 09ec E3000000 		.4byte	0xe3
 3562 09f0 FB090000 		.4byte	0x9fb
 3563 09f4 08       		.uleb128 0x8
 3564 09f5 F1000000 		.4byte	0xf1
 3565 09f9 1F       		.byte	0x1f
 3566 09fa 00       		.byte	0
 3567 09fb 07       		.uleb128 0x7
 3568 09fc E3000000 		.4byte	0xe3
 3569 0a00 0B0A0000 		.4byte	0xa0b
 3570 0a04 08       		.uleb128 0x8
 3571 0a05 F1000000 		.4byte	0xf1
 3572 0a09 04       		.byte	0x4
 3573 0a0a 00       		.byte	0
 3574 0a0b 16       		.uleb128 0x16
 3575 0a0c BD030000 		.4byte	.LASF140
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 80


 3576 0a10 01       		.byte	0x1
 3577 0a11 BE02     		.2byte	0x2be
 3578 0a13 81000000 		.4byte	0x81
 3579 0a17 00000000 		.4byte	.LFB77
 3580 0a1b 74000000 		.4byte	.LFE77-.LFB77
 3581 0a1f 01       		.uleb128 0x1
 3582 0a20 9C       		.byte	0x9c
 3583 0a21 510A0000 		.4byte	0xa51
 3584 0a25 17       		.uleb128 0x17
 3585 0a26 E2050000 		.4byte	.LASF60
 3586 0a2a 01       		.byte	0x1
 3587 0a2b BE02     		.2byte	0x2be
 3588 0a2d 4C000000 		.4byte	0x4c
 3589 0a31 02       		.uleb128 0x2
 3590 0a32 91       		.byte	0x91
 3591 0a33 64       		.sleb128 -28
 3592 0a34 21       		.uleb128 0x21
 3593 0a35 7400     		.ascii	"t\000"
 3594 0a37 01       		.byte	0x1
 3595 0a38 C502     		.2byte	0x2c5
 3596 0a3a 510A0000 		.4byte	0xa51
 3597 0a3e 02       		.uleb128 0x2
 3598 0a3f 91       		.byte	0x91
 3599 0a40 74       		.sleb128 -12
 3600 0a41 1A       		.uleb128 0x1a
 3601 0a42 BB050000 		.4byte	.LASF141
 3602 0a46 01       		.byte	0x1
 3603 0a47 CA02     		.2byte	0x2ca
 3604 0a49 77010000 		.4byte	0x177
 3605 0a4d 02       		.uleb128 0x2
 3606 0a4e 91       		.byte	0x91
 3607 0a4f 68       		.sleb128 -24
 3608 0a50 00       		.byte	0
 3609 0a51 06       		.uleb128 0x6
 3610 0a52 04       		.byte	0x4
 3611 0a53 C8020000 		.4byte	0x2c8
 3612 0a57 16       		.uleb128 0x16
 3613 0a58 5B030000 		.4byte	.LASF142
 3614 0a5c 01       		.byte	0x1
 3615 0a5d E702     		.2byte	0x2e7
 3616 0a5f 81000000 		.4byte	0x81
 3617 0a63 00000000 		.4byte	.LFB78
 3618 0a67 38010000 		.4byte	.LFE78-.LFB78
 3619 0a6b 01       		.uleb128 0x1
 3620 0a6c 9C       		.byte	0x9c
 3621 0a6d D00A0000 		.4byte	0xad0
 3622 0a71 17       		.uleb128 0x17
 3623 0a72 82030000 		.4byte	.LASF143
 3624 0a76 01       		.byte	0x1
 3625 0a77 E702     		.2byte	0x2e7
 3626 0a79 F8000000 		.4byte	0xf8
 3627 0a7d 03       		.uleb128 0x3
 3628 0a7e 91       		.byte	0x91
 3629 0a7f 9C7E     		.sleb128 -228
 3630 0a81 17       		.uleb128 0x17
 3631 0a82 77030000 		.4byte	.LASF144
 3632 0a86 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 81


 3633 0a87 E702     		.2byte	0x2e7
 3634 0a89 68000000 		.4byte	0x68
 3635 0a8d 03       		.uleb128 0x3
 3636 0a8e 91       		.byte	0x91
 3637 0a8f 987E     		.sleb128 -232
 3638 0a91 17       		.uleb128 0x17
 3639 0a92 BE060000 		.4byte	.LASF145
 3640 0a96 01       		.byte	0x1
 3641 0a97 E702     		.2byte	0x2e7
 3642 0a99 F8000000 		.4byte	0xf8
 3643 0a9d 03       		.uleb128 0x3
 3644 0a9e 91       		.byte	0x91
 3645 0a9f 947E     		.sleb128 -236
 3646 0aa1 1A       		.uleb128 0x1a
 3647 0aa2 43020000 		.4byte	.LASF146
 3648 0aa6 01       		.byte	0x1
 3649 0aa7 E902     		.2byte	0x2e9
 3650 0aa9 81000000 		.4byte	0x81
 3651 0aad 02       		.uleb128 0x2
 3652 0aae 91       		.byte	0x91
 3653 0aaf 77       		.sleb128 -9
 3654 0ab0 1A       		.uleb128 0x1a
 3655 0ab1 74000000 		.4byte	.LASF147
 3656 0ab5 01       		.byte	0x1
 3657 0ab6 F002     		.2byte	0x2f0
 3658 0ab8 D00A0000 		.4byte	0xad0
 3659 0abc 02       		.uleb128 0x2
 3660 0abd 91       		.byte	0x91
 3661 0abe 68       		.sleb128 -24
 3662 0abf 1A       		.uleb128 0x1a
 3663 0ac0 30080000 		.4byte	.LASF123
 3664 0ac4 01       		.byte	0x1
 3665 0ac5 F802     		.2byte	0x2f8
 3666 0ac7 E5080000 		.4byte	0x8e5
 3667 0acb 03       		.uleb128 0x3
 3668 0acc 91       		.byte	0x91
 3669 0acd A07E     		.sleb128 -224
 3670 0acf 00       		.byte	0
 3671 0ad0 07       		.uleb128 0x7
 3672 0ad1 E3000000 		.4byte	0xe3
 3673 0ad5 E00A0000 		.4byte	0xae0
 3674 0ad9 08       		.uleb128 0x8
 3675 0ada F1000000 		.4byte	0xf1
 3676 0ade 0B       		.byte	0xb
 3677 0adf 00       		.byte	0
 3678 0ae0 22       		.uleb128 0x22
 3679 0ae1 97010000 		.4byte	.LASF148
 3680 0ae5 0D       		.byte	0xd
 3681 0ae6 1207     		.2byte	0x712
 3682 0ae8 EC0A0000 		.4byte	0xaec
 3683 0aec 0C       		.uleb128 0xc
 3684 0aed 76000000 		.4byte	0x76
 3685 0af1 23       		.uleb128 0x23
 3686 0af2 D7070000 		.4byte	.LASF149
 3687 0af6 07       		.byte	0x7
 3688 0af7 25       		.byte	0x25
 3689 0af8 57050000 		.4byte	0x557
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 82


 3690 0afc 05       		.uleb128 0x5
 3691 0afd 03       		.byte	0x3
 3692 0afe 00000000 		.4byte	level_sensor_inbox
 3693 0b02 23       		.uleb128 0x23
 3694 0b03 FA080000 		.4byte	.LASF150
 3695 0b07 07       		.byte	0x7
 3696 0b08 27       		.byte	0x27
 3697 0b09 A9040000 		.4byte	0x4a9
 3698 0b0d 05       		.uleb128 0x5
 3699 0b0e 03       		.byte	0x3
 3700 0b0f 00000000 		.4byte	level_sensor_enabled
 3701 0b13 23       		.uleb128 0x23
 3702 0b14 E9090000 		.4byte	.LASF151
 3703 0b18 0E       		.byte	0xe
 3704 0b19 0F       		.byte	0xf
 3705 0b1a 57050000 		.4byte	0x557
 3706 0b1e 05       		.uleb128 0x5
 3707 0b1f 03       		.byte	0x3
 3708 0b20 00000000 		.4byte	downstream_level_sensor_inbox
 3709 0b24 23       		.uleb128 0x23
 3710 0b25 F4040000 		.4byte	.LASF152
 3711 0b29 0E       		.byte	0xe
 3712 0b2a 11       		.byte	0x11
 3713 0b2b A9040000 		.4byte	0x4a9
 3714 0b2f 05       		.uleb128 0x5
 3715 0b30 03       		.byte	0x3
 3716 0b31 00000000 		.4byte	downstream_level_sensor_enabled
 3717 0b35 23       		.uleb128 0x23
 3718 0b36 52020000 		.4byte	.LASF153
 3719 0b3a 0F       		.byte	0xf
 3720 0b3b 2A       		.byte	0x2a
 3721 0b3c C9000000 		.4byte	0xc9
 3722 0b40 05       		.uleb128 0x5
 3723 0b41 03       		.byte	0x3
 3724 0b42 00000000 		.4byte	valve_diameter
 3725 0b46 23       		.uleb128 0x23
 3726 0b47 A1000000 		.4byte	.LASF154
 3727 0b4b 0F       		.byte	0xf
 3728 0b4c 2B       		.byte	0x2b
 3729 0b4d 06090000 		.4byte	0x906
 3730 0b51 05       		.uleb128 0x5
 3731 0b52 03       		.byte	0x3
 3732 0b53 00000000 		.4byte	valve_type
 3733 0b57 23       		.uleb128 0x23
 3734 0b58 DA080000 		.4byte	.LASF155
 3735 0b5c 0F       		.byte	0xf
 3736 0b5d 30       		.byte	0x30
 3737 0b5e 81000000 		.4byte	0x81
 3738 0b62 05       		.uleb128 0x5
 3739 0b63 03       		.byte	0x3
 3740 0b64 00000000 		.4byte	valve_enabled
 3741 0b68 23       		.uleb128 0x23
 3742 0b69 55090000 		.4byte	.LASF156
 3743 0b6d 0F       		.byte	0xf
 3744 0b6e 31       		.byte	0x31
 3745 0b6f 57050000 		.4byte	0x557
 3746 0b73 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 83


 3747 0b74 03       		.byte	0x3
 3748 0b75 00000000 		.4byte	valve_inbox
 3749 0b79 23       		.uleb128 0x23
 3750 0b7a 64000000 		.4byte	.LASF157
 3751 0b7e 0A       		.byte	0xa
 3752 0b7f 11       		.byte	0x11
 3753 0b80 A9040000 		.4byte	0x4a9
 3754 0b84 05       		.uleb128 0x5
 3755 0b85 03       		.byte	0x3
 3756 0b86 00000000 		.4byte	buffer_overflow
 3757 0b8a 23       		.uleb128 0x23
 3758 0b8b 40050000 		.4byte	.LASF158
 3759 0b8f 0A       		.byte	0xa
 3760 0b90 22       		.byte	0x22
 3761 0b91 8D000000 		.4byte	0x8d
 3762 0b95 05       		.uleb128 0x5
 3763 0b96 03       		.byte	0x3
 3764 0b97 00000000 		.4byte	dataPointsInStack
 3765 0b9b 23       		.uleb128 0x23
 3766 0b9c 0F090000 		.4byte	.LASF159
 3767 0ba0 0A       		.byte	0xa
 3768 0ba1 23       		.byte	0x23
 3769 0ba2 8D000000 		.4byte	0x8d
 3770 0ba6 05       		.uleb128 0x5
 3771 0ba7 03       		.byte	0x3
 3772 0ba8 00000000 		.4byte	dataPointsInStackDesired
 3773 0bac 07       		.uleb128 0x7
 3774 0bad 7D030000 		.4byte	0x37d
 3775 0bb1 BC0B0000 		.4byte	0xbbc
 3776 0bb5 08       		.uleb128 0x8
 3777 0bb6 F1000000 		.4byte	0xf1
 3778 0bba 95       		.byte	0x95
 3779 0bbb 00       		.byte	0
 3780 0bbc 23       		.uleb128 0x23
 3781 0bbd 61040000 		.4byte	.LASF160
 3782 0bc1 0A       		.byte	0xa
 3783 0bc2 24       		.byte	0x24
 3784 0bc3 AC0B0000 		.4byte	0xbac
 3785 0bc7 05       		.uleb128 0x5
 3786 0bc8 03       		.byte	0x3
 3787 0bc9 00000000 		.4byte	data
 3788 0bcd 23       		.uleb128 0x23
 3789 0bce 7E010000 		.4byte	.LASF161
 3790 0bd2 0B       		.byte	0xb
 3791 0bd3 20       		.byte	0x20
 3792 0bd4 81000000 		.4byte	0x81
 3793 0bd8 05       		.uleb128 0x5
 3794 0bd9 03       		.byte	0x3
 3795 0bda 00000000 		.4byte	modem_state
 3796 0bde 23       		.uleb128 0x23
 3797 0bdf DD040000 		.4byte	.LASF162
 3798 0be3 0B       		.byte	0xb
 3799 0be4 6C       		.byte	0x6c
 3800 0be5 BD000000 		.4byte	0xbd
 3801 0be9 05       		.uleb128 0x5
 3802 0bea 03       		.byte	0x3
 3803 0beb 00000000 		.4byte	modem_start_time_stamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 84


 3804 0bef 23       		.uleb128 0x23
 3805 0bf0 77040000 		.4byte	.LASF90
 3806 0bf4 0B       		.byte	0xb
 3807 0bf5 6D       		.byte	0x6d
 3808 0bf6 B5030000 		.4byte	0x3b5
 3809 0bfa 05       		.uleb128 0x5
 3810 0bfb 03       		.byte	0x3
 3811 0bfc 00000000 		.4byte	modem_info
 3812 0c00 23       		.uleb128 0x23
 3813 0c01 72010000 		.4byte	.LASF163
 3814 0c05 0B       		.byte	0xb
 3815 0c06 6E       		.byte	0x6e
 3816 0c07 29040000 		.4byte	0x429
 3817 0c0b 05       		.uleb128 0x5
 3818 0c0c 03       		.byte	0x3
 3819 0c0d 00000000 		.4byte	modem_stats
 3820 0c11 23       		.uleb128 0x23
 3821 0c12 FA050000 		.4byte	.LASF164
 3822 0c16 0B       		.byte	0xb
 3823 0c17 6F       		.byte	0x6f
 3824 0c18 B0040000 		.4byte	0x4b0
 3825 0c1c 05       		.uleb128 0x5
 3826 0c1d 03       		.byte	0x3
 3827 0c1e 00000000 		.4byte	updatable_parameters
 3828 0c22 23       		.uleb128 0x23
 3829 0c23 AD030000 		.4byte	.LASF165
 3830 0c27 10       		.byte	0x10
 3831 0c28 07       		.byte	0x7
 3832 0c29 81000000 		.4byte	0x81
 3833 0c2d 05       		.uleb128 0x5
 3834 0c2e 03       		.byte	0x3
 3835 0c2f 00000000 		.4byte	App_LED_enabled
 3836 0c33 23       		.uleb128 0x23
 3837 0c34 DB090000 		.4byte	.LASF166
 3838 0c38 10       		.byte	0x10
 3839 0c39 08       		.byte	0x8
 3840 0c3a 57050000 		.4byte	0x557
 3841 0c3e 05       		.uleb128 0x5
 3842 0c3f 03       		.byte	0x3
 3843 0c40 00000000 		.4byte	app_led_inbox
 3844 0c44 07       		.uleb128 0x7
 3845 0c45 E3000000 		.4byte	0xe3
 3846 0c49 550C0000 		.4byte	0xc55
 3847 0c4d 20       		.uleb128 0x20
 3848 0c4e F1000000 		.4byte	0xf1
 3849 0c52 0F27     		.2byte	0x270f
 3850 0c54 00       		.byte	0
 3851 0c55 23       		.uleb128 0x23
 3852 0c56 C5010000 		.4byte	.LASF167
 3853 0c5a 0C       		.byte	0xc
 3854 0c5b 1A       		.byte	0x1a
 3855 0c5c 440C0000 		.4byte	0xc44
 3856 0c60 05       		.uleb128 0x5
 3857 0c61 03       		.byte	0x3
 3858 0c62 00000000 		.4byte	http_request
 3859 0c66 23       		.uleb128 0x23
 3860 0c67 4B090000 		.4byte	.LASF168
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 85


 3861 0c6b 0C       		.byte	0xc
 3862 0c6c 1B       		.byte	0x1b
 3863 0c6d 440C0000 		.4byte	0xc44
 3864 0c71 05       		.uleb128 0x5
 3865 0c72 03       		.byte	0x3
 3866 0c73 00000000 		.4byte	http_body
 3867 0c77 23       		.uleb128 0x23
 3868 0c78 25080000 		.4byte	.LASF169
 3869 0c7c 0C       		.byte	0xc
 3870 0c7d 1C       		.byte	0x1c
 3871 0c7e E5080000 		.4byte	0x8e5
 3872 0c82 05       		.uleb128 0x5
 3873 0c83 03       		.byte	0x3
 3874 0c84 00000000 		.4byte	http_route
 3875 0c88 23       		.uleb128 0x23
 3876 0c89 24070000 		.4byte	.LASF170
 3877 0c8d 0C       		.byte	0xc
 3878 0c8e 43       		.byte	0x43
 3879 0c8f 2B050000 		.4byte	0x52b
 3880 0c93 05       		.uleb128 0x5
 3881 0c94 03       		.byte	0x3
 3882 0c95 00000000 		.4byte	system_info
 3883 0c99 23       		.uleb128 0x23
 3884 0c9a C4060000 		.4byte	.LASF171
 3885 0c9e 0C       		.byte	0xc
 3886 0c9f 55       		.byte	0x55
 3887 0ca0 67050000 		.4byte	0x567
 3888 0ca4 05       		.uleb128 0x5
 3889 0ca5 03       		.byte	0x3
 3890 0ca6 00000000 		.4byte	system_settings
 3891 0caa 23       		.uleb128 0x23
 3892 0cab 8A010000 		.4byte	.LASF172
 3893 0caf 0C       		.byte	0xc
 3894 0cb0 71       		.byte	0x71
 3895 0cb1 F4040000 		.4byte	0x4f4
 3896 0cb5 05       		.uleb128 0x5
 3897 0cb6 03       		.byte	0x3
 3898 0cb7 00000000 		.4byte	alarmMeasure
 3899 0cbb 23       		.uleb128 0x23
 3900 0cbc ED010000 		.4byte	.LASF173
 3901 0cc0 0C       		.byte	0xc
 3902 0cc1 72       		.byte	0x72
 3903 0cc2 81000000 		.4byte	0x81
 3904 0cc6 05       		.uleb128 0x5
 3905 0cc7 03       		.byte	0x3
 3906 0cc8 00000000 		.4byte	timeToMeasure
 3907 0ccc 23       		.uleb128 0x23
 3908 0ccd 8F030000 		.4byte	.LASF174
 3909 0cd1 0C       		.byte	0xc
 3910 0cd2 73       		.byte	0x73
 3911 0cd3 F4040000 		.4byte	0x4f4
 3912 0cd7 05       		.uleb128 0x5
 3913 0cd8 03       		.byte	0x3
 3914 0cd9 00000000 		.4byte	alarmSync
 3915 0cdd 23       		.uleb128 0x23
 3916 0cde 13020000 		.4byte	.LASF175
 3917 0ce2 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 86


 3918 0ce3 74       		.byte	0x74
 3919 0ce4 81000000 		.4byte	0x81
 3920 0ce8 05       		.uleb128 0x5
 3921 0ce9 03       		.byte	0x3
 3922 0cea 00000000 		.4byte	timeToSync
 3923 0cee 23       		.uleb128 0x23
 3924 0cef CB050000 		.4byte	.LASF176
 3925 0cf3 0C       		.byte	0xc
 3926 0cf4 75       		.byte	0x75
 3927 0cf5 81000000 		.4byte	0x81
 3928 0cf9 05       		.uleb128 0x5
 3929 0cfa 03       		.byte	0x3
 3930 0cfb 00000000 		.4byte	timeToSycnRemoteParams
 3931 0cff 24       		.uleb128 0x24
 3932 0d00 68657900 		.ascii	"hey\000"
 3933 0d04 0C       		.byte	0xc
 3934 0d05 76       		.byte	0x76
 3935 0d06 81000000 		.4byte	0x81
 3936 0d0a 05       		.uleb128 0x5
 3937 0d0b 03       		.byte	0x3
 3938 0d0c 00000000 		.4byte	hey
 3939 0d10 23       		.uleb128 0x23
 3940 0d11 D1040000 		.4byte	.LASF177
 3941 0d15 0C       		.byte	0xc
 3942 0d16 7A       		.byte	0x7a
 3943 0d17 F4040000 		.4byte	0x4f4
 3944 0d1b 05       		.uleb128 0x5
 3945 0d1c 03       		.byte	0x3
 3946 0d1d 00000000 		.4byte	alarmAppLED
 3947 0d21 23       		.uleb128 0x23
 3948 0d22 F6020000 		.4byte	.LASF178
 3949 0d26 0C       		.byte	0xc
 3950 0d27 7B       		.byte	0x7b
 3951 0d28 81000000 		.4byte	0x81
 3952 0d2c 05       		.uleb128 0x5
 3953 0d2d 03       		.byte	0x3
 3954 0d2e 00000000 		.4byte	timeToAppLED
 3955 0d32 23       		.uleb128 0x23
 3956 0d33 AC070000 		.4byte	.LASF179
 3957 0d37 0C       		.byte	0xc
 3958 0d38 7D       		.byte	0x7d
 3959 0d39 F4040000 		.4byte	0x4f4
 3960 0d3d 05       		.uleb128 0x5
 3961 0d3e 03       		.byte	0x3
 3962 0d3f 00000000 		.4byte	alarmLevelSensor
 3963 0d43 23       		.uleb128 0x23
 3964 0d44 A4010000 		.4byte	.LASF180
 3965 0d48 0C       		.byte	0xc
 3966 0d49 7E       		.byte	0x7e
 3967 0d4a 81000000 		.4byte	0x81
 3968 0d4e 05       		.uleb128 0x5
 3969 0d4f 03       		.byte	0x3
 3970 0d50 00000000 		.4byte	timetoLevelSensor
 3971 0d54 23       		.uleb128 0x23
 3972 0d55 80020000 		.4byte	.LASF181
 3973 0d59 0C       		.byte	0xc
 3974 0d5a 80       		.byte	0x80
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 87


 3975 0d5b F4040000 		.4byte	0x4f4
 3976 0d5f 05       		.uleb128 0x5
 3977 0d60 03       		.byte	0x3
 3978 0d61 00000000 		.4byte	alarmDownstreamLevelSensor
 3979 0d65 23       		.uleb128 0x23
 3980 0d66 88050000 		.4byte	.LASF182
 3981 0d6a 0C       		.byte	0xc
 3982 0d6b 81       		.byte	0x81
 3983 0d6c 81000000 		.4byte	0x81
 3984 0d70 05       		.uleb128 0x5
 3985 0d71 03       		.byte	0x3
 3986 0d72 00000000 		.4byte	timetoDownstreamLevelSensor
 3987 0d76 23       		.uleb128 0x23
 3988 0d77 1A080000 		.4byte	.LASF183
 3989 0d7b 0C       		.byte	0xc
 3990 0d7c 83       		.byte	0x83
 3991 0d7d F4040000 		.4byte	0x4f4
 3992 0d81 05       		.uleb128 0x5
 3993 0d82 03       		.byte	0x3
 3994 0d83 00000000 		.4byte	alarmValve
 3995 0d87 23       		.uleb128 0x23
 3996 0d88 3A060000 		.4byte	.LASF184
 3997 0d8c 0C       		.byte	0xc
 3998 0d8d 84       		.byte	0x84
 3999 0d8e 81000000 		.4byte	0x81
 4000 0d92 05       		.uleb128 0x5
 4001 0d93 03       		.byte	0x3
 4002 0d94 00000000 		.4byte	timeToValve
 4003 0d98 07       		.uleb128 0x7
 4004 0d99 E3000000 		.4byte	0xe3
 4005 0d9d A80D0000 		.4byte	0xda8
 4006 0da1 08       		.uleb128 0x8
 4007 0da2 F1000000 		.4byte	0xf1
 4008 0da6 1D       		.byte	0x1d
 4009 0da7 00       		.byte	0
 4010 0da8 23       		.uleb128 0x23
 4011 0da9 78060000 		.4byte	.LASF185
 4012 0dad 01       		.byte	0x1
 4013 0dae 1D       		.byte	0x1d
 4014 0daf 980D0000 		.4byte	0xd98
 4015 0db3 05       		.uleb128 0x5
 4016 0db4 03       		.byte	0x3
 4017 0db5 00000000 		.4byte	Data_fileName
 4018 0db9 23       		.uleb128 0x23
 4019 0dba 16040000 		.4byte	.LASF97
 4020 0dbe 01       		.byte	0x1
 4021 0dbf 1E       		.byte	0x1e
 4022 0dc0 81000000 		.4byte	0x81
 4023 0dc4 05       		.uleb128 0x5
 4024 0dc5 03       		.byte	0x3
 4025 0dc6 00000000 		.4byte	try_counter
 4026 0dca 00       		.byte	0
 4027              		.section	.debug_abbrev,"",%progbits
 4028              	.Ldebug_abbrev0:
 4029 0000 01       		.uleb128 0x1
 4030 0001 11       		.uleb128 0x11
 4031 0002 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 88


 4032 0003 25       		.uleb128 0x25
 4033 0004 0E       		.uleb128 0xe
 4034 0005 13       		.uleb128 0x13
 4035 0006 0B       		.uleb128 0xb
 4036 0007 03       		.uleb128 0x3
 4037 0008 0E       		.uleb128 0xe
 4038 0009 1B       		.uleb128 0x1b
 4039 000a 0E       		.uleb128 0xe
 4040 000b 55       		.uleb128 0x55
 4041 000c 17       		.uleb128 0x17
 4042 000d 11       		.uleb128 0x11
 4043 000e 01       		.uleb128 0x1
 4044 000f 10       		.uleb128 0x10
 4045 0010 17       		.uleb128 0x17
 4046 0011 00       		.byte	0
 4047 0012 00       		.byte	0
 4048 0013 02       		.uleb128 0x2
 4049 0014 24       		.uleb128 0x24
 4050 0015 00       		.byte	0
 4051 0016 0B       		.uleb128 0xb
 4052 0017 0B       		.uleb128 0xb
 4053 0018 3E       		.uleb128 0x3e
 4054 0019 0B       		.uleb128 0xb
 4055 001a 03       		.uleb128 0x3
 4056 001b 0E       		.uleb128 0xe
 4057 001c 00       		.byte	0
 4058 001d 00       		.byte	0
 4059 001e 03       		.uleb128 0x3
 4060 001f 16       		.uleb128 0x16
 4061 0020 00       		.byte	0
 4062 0021 03       		.uleb128 0x3
 4063 0022 0E       		.uleb128 0xe
 4064 0023 3A       		.uleb128 0x3a
 4065 0024 0B       		.uleb128 0xb
 4066 0025 3B       		.uleb128 0x3b
 4067 0026 0B       		.uleb128 0xb
 4068 0027 49       		.uleb128 0x49
 4069 0028 13       		.uleb128 0x13
 4070 0029 00       		.byte	0
 4071 002a 00       		.byte	0
 4072 002b 04       		.uleb128 0x4
 4073 002c 24       		.uleb128 0x24
 4074 002d 00       		.byte	0
 4075 002e 0B       		.uleb128 0xb
 4076 002f 0B       		.uleb128 0xb
 4077 0030 3E       		.uleb128 0x3e
 4078 0031 0B       		.uleb128 0xb
 4079 0032 03       		.uleb128 0x3
 4080 0033 08       		.uleb128 0x8
 4081 0034 00       		.byte	0
 4082 0035 00       		.byte	0
 4083 0036 05       		.uleb128 0x5
 4084 0037 16       		.uleb128 0x16
 4085 0038 00       		.byte	0
 4086 0039 03       		.uleb128 0x3
 4087 003a 0E       		.uleb128 0xe
 4088 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 89


 4089 003c 0B       		.uleb128 0xb
 4090 003d 3B       		.uleb128 0x3b
 4091 003e 05       		.uleb128 0x5
 4092 003f 49       		.uleb128 0x49
 4093 0040 13       		.uleb128 0x13
 4094 0041 00       		.byte	0
 4095 0042 00       		.byte	0
 4096 0043 06       		.uleb128 0x6
 4097 0044 0F       		.uleb128 0xf
 4098 0045 00       		.byte	0
 4099 0046 0B       		.uleb128 0xb
 4100 0047 0B       		.uleb128 0xb
 4101 0048 49       		.uleb128 0x49
 4102 0049 13       		.uleb128 0x13
 4103 004a 00       		.byte	0
 4104 004b 00       		.byte	0
 4105 004c 07       		.uleb128 0x7
 4106 004d 01       		.uleb128 0x1
 4107 004e 01       		.byte	0x1
 4108 004f 49       		.uleb128 0x49
 4109 0050 13       		.uleb128 0x13
 4110 0051 01       		.uleb128 0x1
 4111 0052 13       		.uleb128 0x13
 4112 0053 00       		.byte	0
 4113 0054 00       		.byte	0
 4114 0055 08       		.uleb128 0x8
 4115 0056 21       		.uleb128 0x21
 4116 0057 00       		.byte	0
 4117 0058 49       		.uleb128 0x49
 4118 0059 13       		.uleb128 0x13
 4119 005a 2F       		.uleb128 0x2f
 4120 005b 0B       		.uleb128 0xb
 4121 005c 00       		.byte	0
 4122 005d 00       		.byte	0
 4123 005e 09       		.uleb128 0x9
 4124 005f 13       		.uleb128 0x13
 4125 0060 01       		.byte	0x1
 4126 0061 0B       		.uleb128 0xb
 4127 0062 0B       		.uleb128 0xb
 4128 0063 3A       		.uleb128 0x3a
 4129 0064 0B       		.uleb128 0xb
 4130 0065 3B       		.uleb128 0x3b
 4131 0066 0B       		.uleb128 0xb
 4132 0067 01       		.uleb128 0x1
 4133 0068 13       		.uleb128 0x13
 4134 0069 00       		.byte	0
 4135 006a 00       		.byte	0
 4136 006b 0A       		.uleb128 0xa
 4137 006c 0D       		.uleb128 0xd
 4138 006d 00       		.byte	0
 4139 006e 03       		.uleb128 0x3
 4140 006f 08       		.uleb128 0x8
 4141 0070 3A       		.uleb128 0x3a
 4142 0071 0B       		.uleb128 0xb
 4143 0072 3B       		.uleb128 0x3b
 4144 0073 0B       		.uleb128 0xb
 4145 0074 49       		.uleb128 0x49
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 90


 4146 0075 13       		.uleb128 0x13
 4147 0076 38       		.uleb128 0x38
 4148 0077 0B       		.uleb128 0xb
 4149 0078 00       		.byte	0
 4150 0079 00       		.byte	0
 4151 007a 0B       		.uleb128 0xb
 4152 007b 0D       		.uleb128 0xd
 4153 007c 00       		.byte	0
 4154 007d 03       		.uleb128 0x3
 4155 007e 0E       		.uleb128 0xe
 4156 007f 3A       		.uleb128 0x3a
 4157 0080 0B       		.uleb128 0xb
 4158 0081 3B       		.uleb128 0x3b
 4159 0082 0B       		.uleb128 0xb
 4160 0083 49       		.uleb128 0x49
 4161 0084 13       		.uleb128 0x13
 4162 0085 38       		.uleb128 0x38
 4163 0086 0B       		.uleb128 0xb
 4164 0087 00       		.byte	0
 4165 0088 00       		.byte	0
 4166 0089 0C       		.uleb128 0xc
 4167 008a 35       		.uleb128 0x35
 4168 008b 00       		.byte	0
 4169 008c 49       		.uleb128 0x49
 4170 008d 13       		.uleb128 0x13
 4171 008e 00       		.byte	0
 4172 008f 00       		.byte	0
 4173 0090 0D       		.uleb128 0xd
 4174 0091 13       		.uleb128 0x13
 4175 0092 01       		.byte	0x1
 4176 0093 0B       		.uleb128 0xb
 4177 0094 05       		.uleb128 0x5
 4178 0095 3A       		.uleb128 0x3a
 4179 0096 0B       		.uleb128 0xb
 4180 0097 3B       		.uleb128 0x3b
 4181 0098 0B       		.uleb128 0xb
 4182 0099 01       		.uleb128 0x1
 4183 009a 13       		.uleb128 0x13
 4184 009b 00       		.byte	0
 4185 009c 00       		.byte	0
 4186 009d 0E       		.uleb128 0xe
 4187 009e 13       		.uleb128 0x13
 4188 009f 01       		.byte	0x1
 4189 00a0 03       		.uleb128 0x3
 4190 00a1 08       		.uleb128 0x8
 4191 00a2 0B       		.uleb128 0xb
 4192 00a3 0B       		.uleb128 0xb
 4193 00a4 3A       		.uleb128 0x3a
 4194 00a5 0B       		.uleb128 0xb
 4195 00a6 3B       		.uleb128 0x3b
 4196 00a7 0B       		.uleb128 0xb
 4197 00a8 01       		.uleb128 0x1
 4198 00a9 13       		.uleb128 0x13
 4199 00aa 00       		.byte	0
 4200 00ab 00       		.byte	0
 4201 00ac 0F       		.uleb128 0xf
 4202 00ad 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 91


 4203 00ae 00       		.byte	0
 4204 00af 3F       		.uleb128 0x3f
 4205 00b0 19       		.uleb128 0x19
 4206 00b1 03       		.uleb128 0x3
 4207 00b2 0E       		.uleb128 0xe
 4208 00b3 3A       		.uleb128 0x3a
 4209 00b4 0B       		.uleb128 0xb
 4210 00b5 3B       		.uleb128 0x3b
 4211 00b6 0B       		.uleb128 0xb
 4212 00b7 27       		.uleb128 0x27
 4213 00b8 19       		.uleb128 0x19
 4214 00b9 11       		.uleb128 0x11
 4215 00ba 01       		.uleb128 0x1
 4216 00bb 12       		.uleb128 0x12
 4217 00bc 06       		.uleb128 0x6
 4218 00bd 40       		.uleb128 0x40
 4219 00be 18       		.uleb128 0x18
 4220 00bf 9642     		.uleb128 0x2116
 4221 00c1 19       		.uleb128 0x19
 4222 00c2 00       		.byte	0
 4223 00c3 00       		.byte	0
 4224 00c4 10       		.uleb128 0x10
 4225 00c5 2E       		.uleb128 0x2e
 4226 00c6 01       		.byte	0x1
 4227 00c7 3F       		.uleb128 0x3f
 4228 00c8 19       		.uleb128 0x19
 4229 00c9 03       		.uleb128 0x3
 4230 00ca 0E       		.uleb128 0xe
 4231 00cb 3A       		.uleb128 0x3a
 4232 00cc 0B       		.uleb128 0xb
 4233 00cd 3B       		.uleb128 0x3b
 4234 00ce 0B       		.uleb128 0xb
 4235 00cf 11       		.uleb128 0x11
 4236 00d0 01       		.uleb128 0x1
 4237 00d1 12       		.uleb128 0x12
 4238 00d2 06       		.uleb128 0x6
 4239 00d3 40       		.uleb128 0x40
 4240 00d4 18       		.uleb128 0x18
 4241 00d5 9642     		.uleb128 0x2116
 4242 00d7 19       		.uleb128 0x19
 4243 00d8 01       		.uleb128 0x1
 4244 00d9 13       		.uleb128 0x13
 4245 00da 00       		.byte	0
 4246 00db 00       		.byte	0
 4247 00dc 11       		.uleb128 0x11
 4248 00dd 34       		.uleb128 0x34
 4249 00de 00       		.byte	0
 4250 00df 03       		.uleb128 0x3
 4251 00e0 0E       		.uleb128 0xe
 4252 00e1 3A       		.uleb128 0x3a
 4253 00e2 0B       		.uleb128 0xb
 4254 00e3 3B       		.uleb128 0x3b
 4255 00e4 0B       		.uleb128 0xb
 4256 00e5 49       		.uleb128 0x49
 4257 00e6 13       		.uleb128 0x13
 4258 00e7 02       		.uleb128 0x2
 4259 00e8 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 92


 4260 00e9 00       		.byte	0
 4261 00ea 00       		.byte	0
 4262 00eb 12       		.uleb128 0x12
 4263 00ec 2E       		.uleb128 0x2e
 4264 00ed 01       		.byte	0x1
 4265 00ee 3F       		.uleb128 0x3f
 4266 00ef 19       		.uleb128 0x19
 4267 00f0 03       		.uleb128 0x3
 4268 00f1 0E       		.uleb128 0xe
 4269 00f2 3A       		.uleb128 0x3a
 4270 00f3 0B       		.uleb128 0xb
 4271 00f4 3B       		.uleb128 0x3b
 4272 00f5 0B       		.uleb128 0xb
 4273 00f6 49       		.uleb128 0x49
 4274 00f7 13       		.uleb128 0x13
 4275 00f8 11       		.uleb128 0x11
 4276 00f9 01       		.uleb128 0x1
 4277 00fa 12       		.uleb128 0x12
 4278 00fb 06       		.uleb128 0x6
 4279 00fc 40       		.uleb128 0x40
 4280 00fd 18       		.uleb128 0x18
 4281 00fe 9642     		.uleb128 0x2116
 4282 0100 19       		.uleb128 0x19
 4283 0101 01       		.uleb128 0x1
 4284 0102 13       		.uleb128 0x13
 4285 0103 00       		.byte	0
 4286 0104 00       		.byte	0
 4287 0105 13       		.uleb128 0x13
 4288 0106 2E       		.uleb128 0x2e
 4289 0107 00       		.byte	0
 4290 0108 3F       		.uleb128 0x3f
 4291 0109 19       		.uleb128 0x19
 4292 010a 03       		.uleb128 0x3
 4293 010b 0E       		.uleb128 0xe
 4294 010c 3A       		.uleb128 0x3a
 4295 010d 0B       		.uleb128 0xb
 4296 010e 3B       		.uleb128 0x3b
 4297 010f 0B       		.uleb128 0xb
 4298 0110 11       		.uleb128 0x11
 4299 0111 01       		.uleb128 0x1
 4300 0112 12       		.uleb128 0x12
 4301 0113 06       		.uleb128 0x6
 4302 0114 40       		.uleb128 0x40
 4303 0115 18       		.uleb128 0x18
 4304 0116 9642     		.uleb128 0x2116
 4305 0118 19       		.uleb128 0x19
 4306 0119 00       		.byte	0
 4307 011a 00       		.byte	0
 4308 011b 14       		.uleb128 0x14
 4309 011c 2E       		.uleb128 0x2e
 4310 011d 01       		.byte	0x1
 4311 011e 3F       		.uleb128 0x3f
 4312 011f 19       		.uleb128 0x19
 4313 0120 03       		.uleb128 0x3
 4314 0121 0E       		.uleb128 0xe
 4315 0122 3A       		.uleb128 0x3a
 4316 0123 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 93


 4317 0124 3B       		.uleb128 0x3b
 4318 0125 0B       		.uleb128 0xb
 4319 0126 27       		.uleb128 0x27
 4320 0127 19       		.uleb128 0x19
 4321 0128 11       		.uleb128 0x11
 4322 0129 01       		.uleb128 0x1
 4323 012a 12       		.uleb128 0x12
 4324 012b 06       		.uleb128 0x6
 4325 012c 40       		.uleb128 0x40
 4326 012d 18       		.uleb128 0x18
 4327 012e 9642     		.uleb128 0x2116
 4328 0130 19       		.uleb128 0x19
 4329 0131 01       		.uleb128 0x1
 4330 0132 13       		.uleb128 0x13
 4331 0133 00       		.byte	0
 4332 0134 00       		.byte	0
 4333 0135 15       		.uleb128 0x15
 4334 0136 05       		.uleb128 0x5
 4335 0137 00       		.byte	0
 4336 0138 03       		.uleb128 0x3
 4337 0139 0E       		.uleb128 0xe
 4338 013a 3A       		.uleb128 0x3a
 4339 013b 0B       		.uleb128 0xb
 4340 013c 3B       		.uleb128 0x3b
 4341 013d 0B       		.uleb128 0xb
 4342 013e 49       		.uleb128 0x49
 4343 013f 13       		.uleb128 0x13
 4344 0140 02       		.uleb128 0x2
 4345 0141 18       		.uleb128 0x18
 4346 0142 00       		.byte	0
 4347 0143 00       		.byte	0
 4348 0144 16       		.uleb128 0x16
 4349 0145 2E       		.uleb128 0x2e
 4350 0146 01       		.byte	0x1
 4351 0147 3F       		.uleb128 0x3f
 4352 0148 19       		.uleb128 0x19
 4353 0149 03       		.uleb128 0x3
 4354 014a 0E       		.uleb128 0xe
 4355 014b 3A       		.uleb128 0x3a
 4356 014c 0B       		.uleb128 0xb
 4357 014d 3B       		.uleb128 0x3b
 4358 014e 05       		.uleb128 0x5
 4359 014f 27       		.uleb128 0x27
 4360 0150 19       		.uleb128 0x19
 4361 0151 49       		.uleb128 0x49
 4362 0152 13       		.uleb128 0x13
 4363 0153 11       		.uleb128 0x11
 4364 0154 01       		.uleb128 0x1
 4365 0155 12       		.uleb128 0x12
 4366 0156 06       		.uleb128 0x6
 4367 0157 40       		.uleb128 0x40
 4368 0158 18       		.uleb128 0x18
 4369 0159 9642     		.uleb128 0x2116
 4370 015b 19       		.uleb128 0x19
 4371 015c 01       		.uleb128 0x1
 4372 015d 13       		.uleb128 0x13
 4373 015e 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 94


 4374 015f 00       		.byte	0
 4375 0160 17       		.uleb128 0x17
 4376 0161 05       		.uleb128 0x5
 4377 0162 00       		.byte	0
 4378 0163 03       		.uleb128 0x3
 4379 0164 0E       		.uleb128 0xe
 4380 0165 3A       		.uleb128 0x3a
 4381 0166 0B       		.uleb128 0xb
 4382 0167 3B       		.uleb128 0x3b
 4383 0168 05       		.uleb128 0x5
 4384 0169 49       		.uleb128 0x49
 4385 016a 13       		.uleb128 0x13
 4386 016b 02       		.uleb128 0x2
 4387 016c 18       		.uleb128 0x18
 4388 016d 00       		.byte	0
 4389 016e 00       		.byte	0
 4390 016f 18       		.uleb128 0x18
 4391 0170 2E       		.uleb128 0x2e
 4392 0171 01       		.byte	0x1
 4393 0172 3F       		.uleb128 0x3f
 4394 0173 19       		.uleb128 0x19
 4395 0174 03       		.uleb128 0x3
 4396 0175 0E       		.uleb128 0xe
 4397 0176 3A       		.uleb128 0x3a
 4398 0177 0B       		.uleb128 0xb
 4399 0178 3B       		.uleb128 0x3b
 4400 0179 05       		.uleb128 0x5
 4401 017a 27       		.uleb128 0x27
 4402 017b 19       		.uleb128 0x19
 4403 017c 11       		.uleb128 0x11
 4404 017d 01       		.uleb128 0x1
 4405 017e 12       		.uleb128 0x12
 4406 017f 06       		.uleb128 0x6
 4407 0180 40       		.uleb128 0x40
 4408 0181 18       		.uleb128 0x18
 4409 0182 9742     		.uleb128 0x2117
 4410 0184 19       		.uleb128 0x19
 4411 0185 01       		.uleb128 0x1
 4412 0186 13       		.uleb128 0x13
 4413 0187 00       		.byte	0
 4414 0188 00       		.byte	0
 4415 0189 19       		.uleb128 0x19
 4416 018a 2E       		.uleb128 0x2e
 4417 018b 01       		.byte	0x1
 4418 018c 3F       		.uleb128 0x3f
 4419 018d 19       		.uleb128 0x19
 4420 018e 03       		.uleb128 0x3
 4421 018f 0E       		.uleb128 0xe
 4422 0190 3A       		.uleb128 0x3a
 4423 0191 0B       		.uleb128 0xb
 4424 0192 3B       		.uleb128 0x3b
 4425 0193 05       		.uleb128 0x5
 4426 0194 27       		.uleb128 0x27
 4427 0195 19       		.uleb128 0x19
 4428 0196 49       		.uleb128 0x49
 4429 0197 13       		.uleb128 0x13
 4430 0198 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 95


 4431 0199 01       		.uleb128 0x1
 4432 019a 12       		.uleb128 0x12
 4433 019b 06       		.uleb128 0x6
 4434 019c 40       		.uleb128 0x40
 4435 019d 18       		.uleb128 0x18
 4436 019e 9742     		.uleb128 0x2117
 4437 01a0 19       		.uleb128 0x19
 4438 01a1 01       		.uleb128 0x1
 4439 01a2 13       		.uleb128 0x13
 4440 01a3 00       		.byte	0
 4441 01a4 00       		.byte	0
 4442 01a5 1A       		.uleb128 0x1a
 4443 01a6 34       		.uleb128 0x34
 4444 01a7 00       		.byte	0
 4445 01a8 03       		.uleb128 0x3
 4446 01a9 0E       		.uleb128 0xe
 4447 01aa 3A       		.uleb128 0x3a
 4448 01ab 0B       		.uleb128 0xb
 4449 01ac 3B       		.uleb128 0x3b
 4450 01ad 05       		.uleb128 0x5
 4451 01ae 49       		.uleb128 0x49
 4452 01af 13       		.uleb128 0x13
 4453 01b0 02       		.uleb128 0x2
 4454 01b1 18       		.uleb128 0x18
 4455 01b2 00       		.byte	0
 4456 01b3 00       		.byte	0
 4457 01b4 1B       		.uleb128 0x1b
 4458 01b5 2E       		.uleb128 0x2e
 4459 01b6 01       		.byte	0x1
 4460 01b7 3F       		.uleb128 0x3f
 4461 01b8 19       		.uleb128 0x19
 4462 01b9 03       		.uleb128 0x3
 4463 01ba 0E       		.uleb128 0xe
 4464 01bb 3A       		.uleb128 0x3a
 4465 01bc 0B       		.uleb128 0xb
 4466 01bd 3B       		.uleb128 0x3b
 4467 01be 05       		.uleb128 0x5
 4468 01bf 11       		.uleb128 0x11
 4469 01c0 01       		.uleb128 0x1
 4470 01c1 12       		.uleb128 0x12
 4471 01c2 06       		.uleb128 0x6
 4472 01c3 40       		.uleb128 0x40
 4473 01c4 18       		.uleb128 0x18
 4474 01c5 9642     		.uleb128 0x2116
 4475 01c7 19       		.uleb128 0x19
 4476 01c8 01       		.uleb128 0x1
 4477 01c9 13       		.uleb128 0x13
 4478 01ca 00       		.byte	0
 4479 01cb 00       		.byte	0
 4480 01cc 1C       		.uleb128 0x1c
 4481 01cd 2E       		.uleb128 0x2e
 4482 01ce 00       		.byte	0
 4483 01cf 3F       		.uleb128 0x3f
 4484 01d0 19       		.uleb128 0x19
 4485 01d1 03       		.uleb128 0x3
 4486 01d2 0E       		.uleb128 0xe
 4487 01d3 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 96


 4488 01d4 0B       		.uleb128 0xb
 4489 01d5 3B       		.uleb128 0x3b
 4490 01d6 05       		.uleb128 0x5
 4491 01d7 27       		.uleb128 0x27
 4492 01d8 19       		.uleb128 0x19
 4493 01d9 49       		.uleb128 0x49
 4494 01da 13       		.uleb128 0x13
 4495 01db 11       		.uleb128 0x11
 4496 01dc 01       		.uleb128 0x1
 4497 01dd 12       		.uleb128 0x12
 4498 01de 06       		.uleb128 0x6
 4499 01df 40       		.uleb128 0x40
 4500 01e0 18       		.uleb128 0x18
 4501 01e1 9642     		.uleb128 0x2116
 4502 01e3 19       		.uleb128 0x19
 4503 01e4 00       		.byte	0
 4504 01e5 00       		.byte	0
 4505 01e6 1D       		.uleb128 0x1d
 4506 01e7 2E       		.uleb128 0x2e
 4507 01e8 01       		.byte	0x1
 4508 01e9 3F       		.uleb128 0x3f
 4509 01ea 19       		.uleb128 0x19
 4510 01eb 03       		.uleb128 0x3
 4511 01ec 0E       		.uleb128 0xe
 4512 01ed 3A       		.uleb128 0x3a
 4513 01ee 0B       		.uleb128 0xb
 4514 01ef 3B       		.uleb128 0x3b
 4515 01f0 05       		.uleb128 0x5
 4516 01f1 49       		.uleb128 0x49
 4517 01f2 13       		.uleb128 0x13
 4518 01f3 11       		.uleb128 0x11
 4519 01f4 01       		.uleb128 0x1
 4520 01f5 12       		.uleb128 0x12
 4521 01f6 06       		.uleb128 0x6
 4522 01f7 40       		.uleb128 0x40
 4523 01f8 18       		.uleb128 0x18
 4524 01f9 9642     		.uleb128 0x2116
 4525 01fb 19       		.uleb128 0x19
 4526 01fc 01       		.uleb128 0x1
 4527 01fd 13       		.uleb128 0x13
 4528 01fe 00       		.byte	0
 4529 01ff 00       		.byte	0
 4530 0200 1E       		.uleb128 0x1e
 4531 0201 0B       		.uleb128 0xb
 4532 0202 01       		.byte	0x1
 4533 0203 11       		.uleb128 0x11
 4534 0204 01       		.uleb128 0x1
 4535 0205 12       		.uleb128 0x12
 4536 0206 06       		.uleb128 0x6
 4537 0207 00       		.byte	0
 4538 0208 00       		.byte	0
 4539 0209 1F       		.uleb128 0x1f
 4540 020a 0B       		.uleb128 0xb
 4541 020b 01       		.byte	0x1
 4542 020c 11       		.uleb128 0x11
 4543 020d 01       		.uleb128 0x1
 4544 020e 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 97


 4545 020f 06       		.uleb128 0x6
 4546 0210 01       		.uleb128 0x1
 4547 0211 13       		.uleb128 0x13
 4548 0212 00       		.byte	0
 4549 0213 00       		.byte	0
 4550 0214 20       		.uleb128 0x20
 4551 0215 21       		.uleb128 0x21
 4552 0216 00       		.byte	0
 4553 0217 49       		.uleb128 0x49
 4554 0218 13       		.uleb128 0x13
 4555 0219 2F       		.uleb128 0x2f
 4556 021a 05       		.uleb128 0x5
 4557 021b 00       		.byte	0
 4558 021c 00       		.byte	0
 4559 021d 21       		.uleb128 0x21
 4560 021e 34       		.uleb128 0x34
 4561 021f 00       		.byte	0
 4562 0220 03       		.uleb128 0x3
 4563 0221 08       		.uleb128 0x8
 4564 0222 3A       		.uleb128 0x3a
 4565 0223 0B       		.uleb128 0xb
 4566 0224 3B       		.uleb128 0x3b
 4567 0225 05       		.uleb128 0x5
 4568 0226 49       		.uleb128 0x49
 4569 0227 13       		.uleb128 0x13
 4570 0228 02       		.uleb128 0x2
 4571 0229 18       		.uleb128 0x18
 4572 022a 00       		.byte	0
 4573 022b 00       		.byte	0
 4574 022c 22       		.uleb128 0x22
 4575 022d 34       		.uleb128 0x34
 4576 022e 00       		.byte	0
 4577 022f 03       		.uleb128 0x3
 4578 0230 0E       		.uleb128 0xe
 4579 0231 3A       		.uleb128 0x3a
 4580 0232 0B       		.uleb128 0xb
 4581 0233 3B       		.uleb128 0x3b
 4582 0234 05       		.uleb128 0x5
 4583 0235 49       		.uleb128 0x49
 4584 0236 13       		.uleb128 0x13
 4585 0237 3F       		.uleb128 0x3f
 4586 0238 19       		.uleb128 0x19
 4587 0239 3C       		.uleb128 0x3c
 4588 023a 19       		.uleb128 0x19
 4589 023b 00       		.byte	0
 4590 023c 00       		.byte	0
 4591 023d 23       		.uleb128 0x23
 4592 023e 34       		.uleb128 0x34
 4593 023f 00       		.byte	0
 4594 0240 03       		.uleb128 0x3
 4595 0241 0E       		.uleb128 0xe
 4596 0242 3A       		.uleb128 0x3a
 4597 0243 0B       		.uleb128 0xb
 4598 0244 3B       		.uleb128 0x3b
 4599 0245 0B       		.uleb128 0xb
 4600 0246 49       		.uleb128 0x49
 4601 0247 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 98


 4602 0248 3F       		.uleb128 0x3f
 4603 0249 19       		.uleb128 0x19
 4604 024a 02       		.uleb128 0x2
 4605 024b 18       		.uleb128 0x18
 4606 024c 00       		.byte	0
 4607 024d 00       		.byte	0
 4608 024e 24       		.uleb128 0x24
 4609 024f 34       		.uleb128 0x34
 4610 0250 00       		.byte	0
 4611 0251 03       		.uleb128 0x3
 4612 0252 08       		.uleb128 0x8
 4613 0253 3A       		.uleb128 0x3a
 4614 0254 0B       		.uleb128 0xb
 4615 0255 3B       		.uleb128 0x3b
 4616 0256 0B       		.uleb128 0xb
 4617 0257 49       		.uleb128 0x49
 4618 0258 13       		.uleb128 0x13
 4619 0259 3F       		.uleb128 0x3f
 4620 025a 19       		.uleb128 0x19
 4621 025b 02       		.uleb128 0x2
 4622 025c 18       		.uleb128 0x18
 4623 025d 00       		.byte	0
 4624 025e 00       		.byte	0
 4625 025f 00       		.byte	0
 4626              		.section	.debug_aranges,"",%progbits
 4627 0000 8C000000 		.4byte	0x8c
 4628 0004 0200     		.2byte	0x2
 4629 0006 00000000 		.4byte	.Ldebug_info0
 4630 000a 04       		.byte	0x4
 4631 000b 00       		.byte	0
 4632 000c 0000     		.2byte	0
 4633 000e 0000     		.2byte	0
 4634 0010 00000000 		.4byte	.LFB64
 4635 0014 0C000000 		.4byte	.LFE64-.LFB64
 4636 0018 00000000 		.4byte	.LFB65
 4637 001c 84010000 		.4byte	.LFE65-.LFB65
 4638 0020 00000000 		.4byte	.LFB66
 4639 0024 F4000000 		.4byte	.LFE66-.LFB66
 4640 0028 00000000 		.4byte	.LFB67
 4641 002c 2A000000 		.4byte	.LFE67-.LFB67
 4642 0030 00000000 		.4byte	.LFB68
 4643 0034 A8000000 		.4byte	.LFE68-.LFB68
 4644 0038 00000000 		.4byte	.LFB69
 4645 003c 48000000 		.4byte	.LFE69-.LFB69
 4646 0040 00000000 		.4byte	.LFB70
 4647 0044 1E000000 		.4byte	.LFE70-.LFB70
 4648 0048 00000000 		.4byte	.LFB71
 4649 004c 46000000 		.4byte	.LFE71-.LFB71
 4650 0050 00000000 		.4byte	.LFB72
 4651 0054 50010000 		.4byte	.LFE72-.LFB72
 4652 0058 00000000 		.4byte	.LFB73
 4653 005c 1E000000 		.4byte	.LFE73-.LFB73
 4654 0060 00000000 		.4byte	.LFB74
 4655 0064 5C040000 		.4byte	.LFE74-.LFB74
 4656 0068 00000000 		.4byte	.LFB75
 4657 006c 44000000 		.4byte	.LFE75-.LFB75
 4658 0070 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 99


 4659 0074 9C020000 		.4byte	.LFE76-.LFB76
 4660 0078 00000000 		.4byte	.LFB77
 4661 007c 74000000 		.4byte	.LFE77-.LFB77
 4662 0080 00000000 		.4byte	.LFB78
 4663 0084 38010000 		.4byte	.LFE78-.LFB78
 4664 0088 00000000 		.4byte	0
 4665 008c 00000000 		.4byte	0
 4666              		.section	.debug_ranges,"",%progbits
 4667              	.Ldebug_ranges0:
 4668 0000 00000000 		.4byte	.LFB64
 4669 0004 0C000000 		.4byte	.LFE64
 4670 0008 00000000 		.4byte	.LFB65
 4671 000c 84010000 		.4byte	.LFE65
 4672 0010 00000000 		.4byte	.LFB66
 4673 0014 F4000000 		.4byte	.LFE66
 4674 0018 00000000 		.4byte	.LFB67
 4675 001c 2A000000 		.4byte	.LFE67
 4676 0020 00000000 		.4byte	.LFB68
 4677 0024 A8000000 		.4byte	.LFE68
 4678 0028 00000000 		.4byte	.LFB69
 4679 002c 48000000 		.4byte	.LFE69
 4680 0030 00000000 		.4byte	.LFB70
 4681 0034 1E000000 		.4byte	.LFE70
 4682 0038 00000000 		.4byte	.LFB71
 4683 003c 46000000 		.4byte	.LFE71
 4684 0040 00000000 		.4byte	.LFB72
 4685 0044 50010000 		.4byte	.LFE72
 4686 0048 00000000 		.4byte	.LFB73
 4687 004c 1E000000 		.4byte	.LFE73
 4688 0050 00000000 		.4byte	.LFB74
 4689 0054 5C040000 		.4byte	.LFE74
 4690 0058 00000000 		.4byte	.LFB75
 4691 005c 44000000 		.4byte	.LFE75
 4692 0060 00000000 		.4byte	.LFB76
 4693 0064 9C020000 		.4byte	.LFE76
 4694 0068 00000000 		.4byte	.LFB77
 4695 006c 74000000 		.4byte	.LFE77
 4696 0070 00000000 		.4byte	.LFB78
 4697 0074 38010000 		.4byte	.LFE78
 4698 0078 00000000 		.4byte	0
 4699 007c 00000000 		.4byte	0
 4700              		.section	.debug_line,"",%progbits
 4701              	.Ldebug_line0:
 4702 0000 86040000 		.section	.debug_str,"MS",%progbits,1
 4702      02005002 
 4702      00000201 
 4702      FB0E0D00 
 4702      01010101 
 4703              	.LASF116:
 4704 0000 745F6D6F 		.ascii	"t_modem\000"
 4704      64656D00 
 4705              	.LASF12:
 4706 0008 75696E74 		.ascii	"uint16\000"
 4706      313600
 4707              	.LASF52:
 4708 000f 746D5F68 		.ascii	"tm_hour\000"
 4708      6F757200 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 100


 4709              	.LASF37:
 4710 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4710      696E7661 
 4710      6C69645F 
 4710      72656164 
 4710      696E6773 
 4711              	.LASF188:
 4712 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4712      73657273 
 4712      5C64616E 
 4712      747A5C44 
 4712      6F63756D 
 4713 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4713      2E637964 
 4713      736E00
 4714              	.LASF157:
 4715 0064 62756666 		.ascii	"buffer_overflow\000"
 4715      65725F6F 
 4715      76657266 
 4715      6C6F7700 
 4716              	.LASF147:
 4717 0074 66696C65 		.ascii	"fileName\000"
 4717      4E616D65 
 4717      00
 4718              	.LASF0:
 4719 007d 7369676E 		.ascii	"signed char\000"
 4719      65642063 
 4719      68617200 
 4720              	.LASF88:
 4721 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4721      74446F77 
 4721      6E526573 
 4721      6574436F 
 4721      6E646974 
 4722              	.LASF154:
 4723 00a1 76616C76 		.ascii	"valve_type\000"
 4723      655F7479 
 4723      706500
 4724              	.LASF189:
 4725 00ac 57616B65 		.ascii	"Wakeup_ISR\000"
 4725      75705F49 
 4725      535200
 4726              	.LASF186:
 4727 00b7 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4727      43313120 
 4727      352E342E 
 4727      31203230 
 4727      31363036 
 4728 00ea 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4728      20726576 
 4728      6973696F 
 4728      6E203233 
 4728      37373135 
 4729 011d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4729      66756E63 
 4729      74696F6E 
 4729      2D736563 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 101


 4729      74696F6E 
 4730              	.LASF114:
 4731 0145 745F7072 		.ascii	"t_pressure\000"
 4731      65737375 
 4731      726500
 4732              	.LASF27:
 4733 0150 4D6F6E74 		.ascii	"Month\000"
 4733      6800
 4734              	.LASF7:
 4735 0156 6C6F6E67 		.ascii	"long long unsigned int\000"
 4735      206C6F6E 
 4735      6720756E 
 4735      7369676E 
 4735      65642069 
 4736              	.LASF23:
 4737 016d 486F7572 		.ascii	"Hour\000"
 4737      00
 4738              	.LASF163:
 4739 0172 6D6F6465 		.ascii	"modem_stats\000"
 4739      6D5F7374 
 4739      61747300 
 4740              	.LASF161:
 4741 017e 6D6F6465 		.ascii	"modem_state\000"
 4741      6D5F7374 
 4741      61746500 
 4742              	.LASF172:
 4743 018a 616C6172 		.ascii	"alarmMeasure\000"
 4743      6D4D6561 
 4743      73757265 
 4743      00
 4744              	.LASF148:
 4745 0197 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4745      52784275 
 4745      66666572 
 4745      00
 4746              	.LASF180:
 4747 01a4 74696D65 		.ascii	"timetoLevelSensor\000"
 4747      746F4C65 
 4747      76656C53 
 4747      656E736F 
 4747      7200
 4748              	.LASF110:
 4749 01b6 745F6C65 		.ascii	"t_level_sensor\000"
 4749      76656C5F 
 4749      73656E73 
 4749      6F7200
 4750              	.LASF167:
 4751 01c5 68747470 		.ascii	"http_request\000"
 4751      5F726571 
 4751      75657374 
 4751      00
 4752              	.LASF6:
 4753 01d2 6C6F6E67 		.ascii	"long long int\000"
 4753      206C6F6E 
 4753      6720696E 
 4753      7400
 4754              	.LASF125:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 102


 4755 01e0 7061636B 		.ascii	"packets\000"
 4755      65747300 
 4756              	.LASF68:
 4757 01e8 65636E6F 		.ascii	"ecno\000"
 4757      00
 4758              	.LASF173:
 4759 01ed 74696D65 		.ascii	"timeToMeasure\000"
 4759      546F4D65 
 4759      61737572 
 4759      6500
 4760              	.LASF71:
 4761 01fb 74696D65 		.ascii	"time_to_network_connect\000"
 4761      5F746F5F 
 4761      6E657477 
 4761      6F726B5F 
 4761      636F6E6E 
 4762              	.LASF175:
 4763 0213 74696D65 		.ascii	"timeToSync\000"
 4763      546F5379 
 4763      6E6300
 4764              	.LASF40:
 4765 021e 766F6C74 		.ascii	"voltage_solar\000"
 4765      6167655F 
 4765      736F6C61 
 4765      7200
 4766              	.LASF41:
 4767 022c 766F6C74 		.ascii	"voltage_charge_current\000"
 4767      6167655F 
 4767      63686172 
 4767      67655F63 
 4767      75727265 
 4768              	.LASF146:
 4769 0243 75706772 		.ascii	"upgrade_status\000"
 4769      6164655F 
 4769      73746174 
 4769      757300
 4770              	.LASF153:
 4771 0252 76616C76 		.ascii	"valve_diameter\000"
 4771      655F6469 
 4771      616D6574 
 4771      657200
 4772              	.LASF128:
 4773 0261 635F6461 		.ascii	"c_data_count_sent\000"
 4773      74615F63 
 4773      6F756E74 
 4773      5F73656E 
 4773      7400
 4774              	.LASF65:
 4775 0273 6D6F6465 		.ascii	"modem_info_t\000"
 4775      6D5F696E 
 4775      666F5F74 
 4775      00
 4776              	.LASF181:
 4777 0280 616C6172 		.ascii	"alarmDownstreamLevelSensor\000"
 4777      6D446F77 
 4777      6E737472 
 4777      65616D4C 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 103


 4777      6576656C 
 4778              	.LASF66:
 4779 029b 72786C65 		.ascii	"rxlev\000"
 4779      7600
 4780              	.LASF4:
 4781 02a1 6C6F6E67 		.ascii	"long int\000"
 4781      20696E74 
 4781      00
 4782              	.LASF72:
 4783 02aa 74696D65 		.ascii	"time_to_acquire_ip\000"
 4783      5F746F5F 
 4783      61637175 
 4783      6972655F 
 4783      697000
 4784              	.LASF89:
 4785 02bd 616C6172 		.ascii	"alarm\000"
 4785      6D00
 4786              	.LASF46:
 4787 02c3 70726573 		.ascii	"pressure_voltage_off\000"
 4787      73757265 
 4787      5F766F6C 
 4787      74616765 
 4787      5F6F6666 
 4788              	.LASF11:
 4789 02d8 75696E74 		.ascii	"uint8\000"
 4789      3800
 4790              	.LASF120:
 4791 02de 635F7472 		.ascii	"c_try_counter\000"
 4791      795F636F 
 4791      756E7465 
 4791      7200
 4792              	.LASF131:
 4793 02ec 73656E64 		.ascii	"send_time\000"
 4793      5F74696D 
 4793      6500
 4794              	.LASF178:
 4795 02f6 74696D65 		.ascii	"timeToAppLED\000"
 4795      546F4170 
 4795      704C4544 
 4795      00
 4796              	.LASF16:
 4797 0303 696E7433 		.ascii	"int32\000"
 4797      3200
 4798              	.LASF74:
 4799 0309 6E6F6465 		.ascii	"node_type\000"
 4799      5F747970 
 4799      6500
 4800              	.LASF117:
 4801 0313 73796E63 		.ascii	"syncData\000"
 4801      44617461 
 4801      00
 4802              	.LASF126:
 4803 031c 6E657477 		.ascii	"network_time\000"
 4803      6F726B5F 
 4803      74696D65 
 4803      00
 4804              	.LASF13:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 104


 4805 0329 75696E74 		.ascii	"uint32\000"
 4805      333200
 4806              	.LASF63:
 4807 0330 6D6F6465 		.ascii	"model_id\000"
 4807      6C5F6964 
 4807      00
 4808              	.LASF34:
 4809 0339 616C6C5F 		.ascii	"all_level_readings\000"
 4809      6C657665 
 4809      6C5F7265 
 4809      6164696E 
 4809      677300
 4810              	.LASF85:
 4811 034c 636F756E 		.ascii	"countDownValue\000"
 4811      74446F77 
 4811      6E56616C 
 4811      756500
 4812              	.LASF142:
 4813 035b 75706772 		.ascii	"upgraded\000"
 4813      61646564 
 4813      00
 4814              	.LASF54:
 4815 0364 746D5F6D 		.ascii	"tm_mon\000"
 4815      6F6E00
 4816              	.LASF78:
 4817 036b 64656275 		.ascii	"debug_level\000"
 4817      675F6C65 
 4817      76656C00 
 4818              	.LASF144:
 4819 0377 706F7274 		.ascii	"port\000"
 4819      00
 4820              	.LASF59:
 4821 037c 76616C75 		.ascii	"value\000"
 4821      6500
 4822              	.LASF143:
 4823 0382 686F7374 		.ascii	"host\000"
 4823      00
 4824              	.LASF55:
 4825 0387 746D5F79 		.ascii	"tm_year\000"
 4825      65617200 
 4826              	.LASF174:
 4827 038f 616C6172 		.ascii	"alarmSync\000"
 4827      6D53796E 
 4827      6300
 4828              	.LASF45:
 4829 0399 70726573 		.ascii	"pressure_voltage_on\000"
 4829      73757265 
 4829      5F766F6C 
 4829      74616765 
 4829      5F6F6E00 
 4830              	.LASF165:
 4831 03ad 4170705F 		.ascii	"App_LED_enabled\000"
 4831      4C45445F 
 4831      656E6162 
 4831      6C656400 
 4832              	.LASF140:
 4833 03bd 73657454 		.ascii	"setTime\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 105


 4833      696D6500 
 4834              	.LASF61:
 4835 03c5 6B65795F 		.ascii	"key_value_t\000"
 4835      76616C75 
 4835      655F7400 
 4836              	.LASF100:
 4837 03d1 41796F49 		.ascii	"AyoItsTime\000"
 4837      74735469 
 4837      6D6500
 4838              	.LASF36:
 4839 03dc 6E756D5F 		.ascii	"num_valid_readings\000"
 4839      76616C69 
 4839      645F7265 
 4839      6164696E 
 4839      677300
 4840              	.LASF130:
 4841 03ef 68747470 		.ascii	"http_chunk\000"
 4841      5F636875 
 4841      6E6B00
 4842              	.LASF137:
 4843 03fa 6D5F766F 		.ascii	"m_voltage\000"
 4843      6C746167 
 4843      6500
 4844              	.LASF5:
 4845 0404 6C6F6E67 		.ascii	"long unsigned int\000"
 4845      20756E73 
 4845      69676E65 
 4845      6420696E 
 4845      7400
 4846              	.LASF97:
 4847 0416 7472795F 		.ascii	"try_counter\000"
 4847      636F756E 
 4847      74657200 
 4848              	.LASF121:
 4849 0422 64617461 		.ascii	"data_count_desired\000"
 4849      5F636F75 
 4849      6E745F64 
 4849      65736972 
 4849      656400
 4850              	.LASF39:
 4851 0435 766F6C74 		.ascii	"voltage_battery\000"
 4851      6167655F 
 4851      62617474 
 4851      65727900 
 4852              	.LASF25:
 4853 0445 4461794F 		.ascii	"DayOfMonth\000"
 4853      664D6F6E 
 4853      746800
 4854              	.LASF134:
 4855 0450 6D616B65 		.ascii	"makeMeasurements\000"
 4855      4D656173 
 4855      7572656D 
 4855      656E7473 
 4855      00
 4856              	.LASF160:
 4857 0461 64617461 		.ascii	"data\000"
 4857      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 106


 4858              	.LASF94:
 4859 0466 65705F70 		.ascii	"ep_port\000"
 4859      6F727400 
 4860              	.LASF58:
 4861 046e 746D5F69 		.ascii	"tm_isdst\000"
 4861      73647374 
 4861      00
 4862              	.LASF90:
 4863 0477 6D6F6465 		.ascii	"modem_info\000"
 4863      6D5F696E 
 4863      666F00
 4864              	.LASF93:
 4865 0482 65705F68 		.ascii	"ep_host\000"
 4865      6F737400 
 4866              	.LASF14:
 4867 048a 696E7438 		.ascii	"int8\000"
 4867      00
 4868              	.LASF99:
 4869 048f 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4869      576F726B 
 4869      576F726B 
 4869      576F726B 
 4869      576F726B 
 4870              	.LASF122:
 4871 04a8 635F6461 		.ascii	"c_data_count_desired\000"
 4871      74615F63 
 4871      6F756E74 
 4871      5F646573 
 4871      69726564 
 4872              	.LASF115:
 4873 04bd 745F7364 		.ascii	"t_sd_card\000"
 4873      5F636172 
 4873      6400
 4874              	.LASF2:
 4875 04c7 73686F72 		.ascii	"short int\000"
 4875      7420696E 
 4875      7400
 4876              	.LASF177:
 4877 04d1 616C6172 		.ascii	"alarmAppLED\000"
 4877      6D417070 
 4877      4C454400 
 4878              	.LASF162:
 4879 04dd 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4879      6D5F7374 
 4879      6172745F 
 4879      74696D65 
 4879      5F737461 
 4880              	.LASF152:
 4881 04f4 646F776E 		.ascii	"downstream_level_sensor_enabled\000"
 4881      73747265 
 4881      616D5F6C 
 4881      6576656C 
 4881      5F73656E 
 4882              	.LASF92:
 4883 0514 7379735F 		.ascii	"sys_info_t\000"
 4883      696E666F 
 4883      5F7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 107


 4884              	.LASF84:
 4885 051f 75706461 		.ascii	"updatable_parameters_t\000"
 4885      7461626C 
 4885      655F7061 
 4885      72616D65 
 4885      74657273 
 4886              	.LASF101:
 4887 0536 616C6172 		.ascii	"alarmType\000"
 4887      6D547970 
 4887      6500
 4888              	.LASF158:
 4889 0540 64617461 		.ascii	"dataPointsInStack\000"
 4889      506F696E 
 4889      7473496E 
 4889      53746163 
 4889      6B00
 4890              	.LASF111:
 4891 0552 745F646F 		.ascii	"t_down_level\000"
 4891      776E5F6C 
 4891      6576656C 
 4891      00
 4892              	.LASF51:
 4893 055f 746D5F6D 		.ascii	"tm_min\000"
 4893      696E00
 4894              	.LASF17:
 4895 0566 666C6F61 		.ascii	"float32\000"
 4895      74333200 
 4896              	.LASF102:
 4897 056e 616C6172 		.ascii	"alarmToBeUpdated\000"
 4897      6D546F42 
 4897      65557064 
 4897      61746564 
 4897      00
 4898              	.LASF22:
 4899 057f 73697A65 		.ascii	"sizetype\000"
 4899      74797065 
 4899      00
 4900              	.LASF182:
 4901 0588 74696D65 		.ascii	"timetoDownstreamLevelSensor\000"
 4901      746F446F 
 4901      776E7374 
 4901      7265616D 
 4901      4C657665 
 4902              	.LASF57:
 4903 05a4 746D5F79 		.ascii	"tm_yday\000"
 4903      64617900 
 4904              	.LASF95:
 4905 05ac 7379735F 		.ascii	"sys_settings_t\000"
 4905      73657474 
 4905      696E6773 
 4905      5F7400
 4906              	.LASF141:
 4907 05bb 6C6F6361 		.ascii	"localTime\000"
 4907      6C54696D 
 4907      6500
 4908              	.LASF15:
 4909 05c5 696E7431 		.ascii	"int16\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 108


 4909      3600
 4910              	.LASF176:
 4911 05cb 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4911      546F5379 
 4911      636E5265 
 4911      6D6F7465 
 4911      50617261 
 4912              	.LASF60:
 4913 05e2 74696D65 		.ascii	"timeStamp\000"
 4913      5374616D 
 4913      7000
 4914              	.LASF29:
 4915 05ec 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4915      54494D45 
 4915      5F444154 
 4915      4500
 4916              	.LASF164:
 4917 05fa 75706461 		.ascii	"updatable_parameters\000"
 4917      7461626C 
 4917      655F7061 
 4917      72616D65 
 4917      74657273 
 4918              	.LASF106:
 4919 060f 43726561 		.ascii	"CreateAlarm\000"
 4919      7465416C 
 4919      61726D00 
 4920              	.LASF129:
 4921 061b 7061636B 		.ascii	"packet\000"
 4921      657400
 4922              	.LASF118:
 4923 0622 735F7273 		.ascii	"s_rsrp\000"
 4923      727000
 4924              	.LASF42:
 4925 0629 766F6C74 		.ascii	"voltage_pressure\000"
 4925      6167655F 
 4925      70726573 
 4925      73757265 
 4925      00
 4926              	.LASF184:
 4927 063a 74696D65 		.ascii	"timeToValve\000"
 4927      546F5661 
 4927      6C766500 
 4928              	.LASF18:
 4929 0646 666C6F61 		.ascii	"float\000"
 4929      7400
 4930              	.LASF38:
 4931 064c 6C657665 		.ascii	"level_sensor_t\000"
 4931      6C5F7365 
 4931      6E736F72 
 4931      5F7400
 4932              	.LASF119:
 4933 065b 735F7273 		.ascii	"s_rscp\000"
 4933      637000
 4934              	.LASF133:
 4935 0662 636F6E66 		.ascii	"configureRemoteParams\000"
 4935      69677572 
 4935      6552656D 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 109


 4935      6F746550 
 4935      6172616D 
 4936              	.LASF185:
 4937 0678 44617461 		.ascii	"Data_fileName\000"
 4937      5F66696C 
 4937      654E616D 
 4937      6500
 4938              	.LASF98:
 4939 0686 6D6F6465 		.ascii	"modem_status\000"
 4939      6D5F7374 
 4939      61747573 
 4939      00
 4940              	.LASF30:
 4941 0693 74657374 		.ascii	"test_name\000"
 4941      5F6E616D 
 4941      6500
 4942              	.LASF28:
 4943 069d 59656172 		.ascii	"Year\000"
 4943      00
 4944              	.LASF83:
 4945 06a2 5F426F6F 		.ascii	"_Bool\000"
 4945      6C00
 4946              	.LASF10:
 4947 06a8 696E7433 		.ascii	"int32_t\000"
 4947      325F7400 
 4948              	.LASF1:
 4949 06b0 756E7369 		.ascii	"unsigned char\000"
 4949      676E6564 
 4949      20636861 
 4949      7200
 4950              	.LASF145:
 4951 06be 726F7574 		.ascii	"route\000"
 4951      6500
 4952              	.LASF171:
 4953 06c4 73797374 		.ascii	"system_settings\000"
 4953      656D5F73 
 4953      65747469 
 4953      6E677300 
 4954              	.LASF70:
 4955 06d4 72737270 		.ascii	"rsrp\000"
 4955      00
 4956              	.LASF69:
 4957 06d9 72737271 		.ascii	"rsrq\000"
 4957      00
 4958              	.LASF103:
 4959 06de 52657365 		.ascii	"ResetAlarm\000"
 4959      74416C61 
 4959      726D00
 4960              	.LASF132:
 4961 06e9 735F7365 		.ascii	"s_send_time\000"
 4961      6E645F74 
 4961      696D6500 
 4962              	.LASF77:
 4963 06f5 73796E63 		.ascii	"sync_time\000"
 4963      5F74696D 
 4963      6500
 4964              	.LASF48:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 110


 4965 06ff 70726573 		.ascii	"pressure_depth\000"
 4965      73757265 
 4965      5F646570 
 4965      746800
 4966              	.LASF67:
 4967 070e 72736370 		.ascii	"rscp\000"
 4967      00
 4968              	.LASF24:
 4969 0713 4461794F 		.ascii	"DayOfWeek\000"
 4969      66576565 
 4969      6B00
 4970              	.LASF33:
 4971 071d 74657374 		.ascii	"test_t\000"
 4971      5F7400
 4972              	.LASF170:
 4973 0724 73797374 		.ascii	"system_info\000"
 4973      656D5F69 
 4973      6E666F00 
 4974              	.LASF64:
 4975 0730 696D6569 		.ascii	"imei\000"
 4975      00
 4976              	.LASF32:
 4977 0735 72656173 		.ascii	"reason\000"
 4977      6F6E00
 4978              	.LASF104:
 4979 073c 616C6172 		.ascii	"alarmToBeReset\000"
 4979      6D546F42 
 4979      65526573 
 4979      657400
 4980              	.LASF109:
 4981 074b 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4981      6B697479 
 4981      43686563 
 4981      6B596F75 
 4981      7273656C 
 4982              	.LASF127:
 4983 0777 64617461 		.ascii	"data_count_sent\000"
 4983      5F636F75 
 4983      6E745F73 
 4983      656E7400 
 4984              	.LASF73:
 4985 0787 6D6F6465 		.ascii	"modem_stats_t\000"
 4985      6D5F7374 
 4985      6174735F 
 4985      7400
 4986              	.LASF47:
 4987 0795 70726573 		.ascii	"pressure_current\000"
 4987      73757265 
 4987      5F637572 
 4987      72656E74 
 4987      00
 4988              	.LASF43:
 4989 07a6 76616C69 		.ascii	"valid\000"
 4989      6400
 4990              	.LASF179:
 4991 07ac 616C6172 		.ascii	"alarmLevelSensor\000"
 4991      6D4C6576 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 111


 4991      656C5365 
 4991      6E736F72 
 4991      00
 4992              	.LASF56:
 4993 07bd 746D5F77 		.ascii	"tm_wday\000"
 4993      64617900 
 4994              	.LASF80:
 4995 07c5 4C657665 		.ascii	"Level_Sensor_freq\000"
 4995      6C5F5365 
 4995      6E736F72 
 4995      5F667265 
 4995      7100
 4996              	.LASF149:
 4997 07d7 6C657665 		.ascii	"level_sensor_inbox\000"
 4997      6C5F7365 
 4997      6E736F72 
 4997      5F696E62 
 4997      6F7800
 4998              	.LASF21:
 4999 07ea 6C6F6E67 		.ascii	"long double\000"
 4999      20646F75 
 4999      626C6500 
 5000              	.LASF124:
 5001 07f6 6368756E 		.ascii	"chunk\000"
 5001      6B00
 5002              	.LASF135:
 5003 07fc 635F7469 		.ascii	"c_timeStamp\000"
 5003      6D655374 
 5003      616D7000 
 5004              	.LASF20:
 5005 0808 63686172 		.ascii	"char\000"
 5005      00
 5006              	.LASF8:
 5007 080d 756E7369 		.ascii	"unsigned int\000"
 5007      676E6564 
 5007      20696E74 
 5007      00
 5008              	.LASF183:
 5009 081a 616C6172 		.ascii	"alarmValve\000"
 5009      6D56616C 
 5009      766500
 5010              	.LASF169:
 5011 0825 68747470 		.ascii	"http_route\000"
 5011      5F726F75 
 5011      746500
 5012              	.LASF123:
 5013 0830 706F7274 		.ascii	"portConfig\000"
 5013      436F6E66 
 5013      696700
 5014              	.LASF9:
 5015 083b 5F5F696E 		.ascii	"__int32_t\000"
 5015      7433325F 
 5015      7400
 5016              	.LASF96:
 5017 0845 756E6971 		.ascii	"uniqueId\000"
 5017      75654964 
 5017      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 112


 5018              	.LASF76:
 5019 084e 6D656173 		.ascii	"measure_time\000"
 5019      7572655F 
 5019      74696D65 
 5019      00
 5020              	.LASF138:
 5021 085b 6D5F6C65 		.ascii	"m_level_sensor\000"
 5021      76656C5F 
 5021      73656E73 
 5021      6F7200
 5022              	.LASF35:
 5023 086a 6C657665 		.ascii	"level_reading\000"
 5023      6C5F7265 
 5023      6164696E 
 5023      6700
 5024              	.LASF190:
 5025 0878 4C617942 		.ascii	"LayBack\000"
 5025      61636B00 
 5026              	.LASF3:
 5027 0880 73686F72 		.ascii	"short unsigned int\000"
 5027      7420756E 
 5027      7369676E 
 5027      65642069 
 5027      6E7400
 5028              	.LASF62:
 5029 0893 73696D5F 		.ascii	"sim_id\000"
 5029      696400
 5030              	.LASF53:
 5031 089a 746D5F6D 		.ascii	"tm_mday\000"
 5031      64617900 
 5032              	.LASF107:
 5033 08a2 6E657741 		.ascii	"newAlarm\000"
 5033      6C61726D 
 5033      00
 5034              	.LASF81:
 5035 08ab 446F776E 		.ascii	"Downstream_Level_Sensor_freq\000"
 5035      73747265 
 5035      616D5F4C 
 5035      6576656C 
 5035      5F53656E 
 5036              	.LASF50:
 5037 08c8 746D5F73 		.ascii	"tm_sec\000"
 5037      656300
 5038              	.LASF139:
 5039 08cf 6D5F7072 		.ascii	"m_pressure\000"
 5039      65737375 
 5039      726500
 5040              	.LASF155:
 5041 08da 76616C76 		.ascii	"valve_enabled\000"
 5041      655F656E 
 5041      61626C65 
 5041      6400
 5042              	.LASF82:
 5043 08e8 76616C76 		.ascii	"valve_freq\000"
 5043      655F6672 
 5043      657100
 5044              	.LASF31:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 113


 5045 08f3 73746174 		.ascii	"status\000"
 5045      757300
 5046              	.LASF150:
 5047 08fa 6C657665 		.ascii	"level_sensor_enabled\000"
 5047      6C5F7365 
 5047      6E736F72 
 5047      5F656E61 
 5047      626C6564 
 5048              	.LASF159:
 5049 090f 64617461 		.ascii	"dataPointsInStackDesired\000"
 5049      506F696E 
 5049      7473496E 
 5049      53746163 
 5049      6B446573 
 5050              	.LASF79:
 5051 0928 4170705F 		.ascii	"App_LED_freq\000"
 5051      4C45445F 
 5051      66726571 
 5051      00
 5052              	.LASF113:
 5053 0935 745F766F 		.ascii	"t_voltages\000"
 5053      6C746167 
 5053      657300
 5054              	.LASF187:
 5055 0940 6E6F746F 		.ascii	"notoriOS.c\000"
 5055      72694F53 
 5055      2E6300
 5056              	.LASF168:
 5057 094b 68747470 		.ascii	"http_body\000"
 5057      5F626F64 
 5057      7900
 5058              	.LASF156:
 5059 0955 76616C76 		.ascii	"valve_inbox\000"
 5059      655F696E 
 5059      626F7800 
 5060              	.LASF87:
 5061 0961 636F756E 		.ascii	"countDownType\000"
 5061      74446F77 
 5061      6E547970 
 5061      6500
 5062              	.LASF86:
 5063 096f 63757272 		.ascii	"currentCountDownValue\000"
 5063      656E7443 
 5063      6F756E74 
 5063      446F776E 
 5063      56616C75 
 5064              	.LASF75:
 5065 0985 73696D5F 		.ascii	"sim_type\000"
 5065      74797065 
 5065      00
 5066              	.LASF26:
 5067 098e 4461794F 		.ascii	"DayOfYear\000"
 5067      66596561 
 5067      7200
 5068              	.LASF49:
 5069 0998 70726573 		.ascii	"pressure_t\000"
 5069      73757265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cchOxKCU.s 			page 114


 5069      5F7400
 5070              	.LASF105:
 5071 09a3 416C6172 		.ascii	"AlarmReady\000"
 5071      6D526561 
 5071      647900
 5072              	.LASF108:
 5073 09ae 52656164 		.ascii	"ReadyOrNot\000"
 5073      794F724E 
 5073      6F7400
 5074              	.LASF191:
 5075 09b9 6D61696E 		.ascii	"main\000"
 5075      00
 5076              	.LASF91:
 5077 09be 63686970 		.ascii	"chip_uniqueId\000"
 5077      5F756E69 
 5077      71756549 
 5077      6400
 5078              	.LASF112:
 5079 09cc 745F7661 		.ascii	"t_valve\000"
 5079      6C766500 
 5080              	.LASF19:
 5081 09d4 646F7562 		.ascii	"double\000"
 5081      6C6500
 5082              	.LASF166:
 5083 09db 6170705F 		.ascii	"app_led_inbox\000"
 5083      6C65645F 
 5083      696E626F 
 5083      7800
 5084              	.LASF151:
 5085 09e9 646F776E 		.ascii	"downstream_level_sensor_inbox\000"
 5085      73747265 
 5085      616D5F6C 
 5085      6576656C 
 5085      5F73656E 
 5086              	.LASF44:
 5087 0a07 766F6C74 		.ascii	"voltage_t\000"
 5087      6167655F 
 5087      7400
 5088              	.LASF136:
 5089 0a11 635F6E6F 		.ascii	"c_node_type\000"
 5089      64655F74 
 5089      79706500 
 5090              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
