ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.Wakeup_ISR,"ax",%progbits
  44              		.align	2
  45              		.global	Wakeup_ISR
  46              		.thumb
  47              		.thumb_func
  48              		.type	Wakeup_ISR, %function
  49              	Wakeup_ISR:
  50              	.LFB64:
  51              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 2


   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  62              		.loc 1 22 0
  63 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  64              		.loc 1 23 0
  65 0008 00BF     		nop
  66 000a 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	Wakeup_ISR, .-Wakeup_ISR
  70              		.global	Data_fileName
  71              		.data
  72              		.align	2
  73              		.type	Data_fileName, %object
  74              		.size	Data_fileName, 30
  75              	Data_fileName:
  76 0000 64617461 		.ascii	"data.txt\000"
  76      2E747874 
  76      00
  77 0009 00000000 		.space	21
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.comm	try_counter,1,1
  79              		.section	.rodata
  80              		.align	2
  81              	.LC0:
  82 0000 25582D25 		.ascii	"%X-%X\000"
  82      5800
  83 0006 0000     		.align	2
  84              	.LC1:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 3


  85 0008 6563322D 		.ascii	"ec2-13-59-131-167.us-east-2.compute.amazonaws.com\000"
  85      31332D35 
  85      392D3133 
  85      312D3136 
  85      372E7573 
  86 003a 0000     		.align	2
  87              	.LC2:
  88 003c 256400   		.ascii	"%d\000"
  89 003f 00       		.align	2
  90              	.LC3:
  91 0040 7265626F 		.ascii	"reboot\000"
  91      6F7400
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 32
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 8AB0     		sub	sp, sp, #40
 111              		.cfi_def_cfa_offset 56
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 48
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 3948     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 4


  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F11403 		add	r3, r7, #20
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 7A69     		ldr	r2, [r7, #20]
 136 0032 BB69     		ldr	r3, [r7, #24]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 2D4A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 2D48     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 2D4B     		ldr	r3, .L3+12
 145 0044 2D4A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-13-59-131-167.us-eas
 147              		.loc 1 68 0
 148 0048 2D4A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 5


 149 004a 2E4B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 2380     		strh	r3, [r4]	@ movhi
  69:notoriOS.c    ****    
  70:notoriOS.c    ****     system_settings.ep_port = 5000;
 160              		.loc 1 70 0
 161 0060 274B     		ldr	r3, .L3+20
 162 0062 41F28832 		movw	r2, #5000
 163 0066 5A66     		str	r2, [r3, #100]
  71:notoriOS.c    ****     // Don't need the following for new nodes
  72:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  73:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  74:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  75:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  76:notoriOS.c    ****         
  77:notoriOS.c    ****     
  78:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  79:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 164              		.loc 1 79 0
 165 0068 274B     		ldr	r3, .L3+28
 166 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 167 006c 99B2     		uxth	r1, r3
 168 006e 274C     		ldr	r4, .L3+32
 169 0070 3846     		mov	r0, r7
 170 0072 0723     		movs	r3, #7
 171 0074 0122     		movs	r2, #1
 172 0076 FFF7FEFF 		bl	CreateAlarm
 173 007a 2246     		mov	r2, r4
 174 007c 3B46     		mov	r3, r7
 175 007e 1968     		ldr	r1, [r3]	@ unaligned
 176 0080 1160     		str	r1, [r2]	@ unaligned
 177 0082 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 178 0084 9380     		strh	r3, [r2, #4]	@ unaligned
  80:notoriOS.c    ****     timeToMeasure = 1u;
 179              		.loc 1 80 0
 180 0086 224B     		ldr	r3, .L3+36
 181 0088 0122     		movs	r2, #1
 182 008a 1A70     		strb	r2, [r3]
  81:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  82:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 183              		.loc 1 82 0
 184 008c 1E4B     		ldr	r3, .L3+28
 185 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 186 0090 99B2     		uxth	r1, r3
 187 0092 204C     		ldr	r4, .L3+40
 188 0094 3846     		mov	r0, r7
 189 0096 0723     		movs	r3, #7
 190 0098 0122     		movs	r2, #1
 191 009a FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 6


 192 009e 2246     		mov	r2, r4
 193 00a0 3B46     		mov	r3, r7
 194 00a2 1968     		ldr	r1, [r3]	@ unaligned
 195 00a4 1160     		str	r1, [r2]	@ unaligned
 196 00a6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 197 00a8 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToSync = 1u;
 198              		.loc 1 83 0
 199 00aa 1B4B     		ldr	r3, .L3+44
 200 00ac 0122     		movs	r2, #1
 201 00ae 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     
  85:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 202              		.loc 1 85 0
 203 00b0 1A4B     		ldr	r3, .L3+48
 204 00b2 0022     		movs	r2, #0
 205 00b4 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     
  87:notoriOS.c    ****     // send hey to server saying the node rebooted
  88:notoriOS.c    ****     hey = 1u;
 206              		.loc 1 88 0
 207 00b6 1A4B     		ldr	r3, .L3+52
 208 00b8 0122     		movs	r2, #1
 209 00ba 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     char c_hey[10];
  90:notoriOS.c    ****     snprintf(c_hey,sizeof(c_hey),"%d",hey);
 210              		.loc 1 90 0
 211 00bc 184B     		ldr	r3, .L3+52
 212 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00c0 07F10800 		add	r0, r7, #8
 214 00c4 174A     		ldr	r2, .L3+56
 215 00c6 0A21     		movs	r1, #10
 216 00c8 FFF7FEFF 		bl	snprintf
  91:notoriOS.c    ****     pushData("reboot",c_hey,getTimeStamp());
 217              		.loc 1 91 0
 218 00cc FFF7FEFF 		bl	getTimeStamp
 219 00d0 0246     		mov	r2, r0
 220 00d2 07F10803 		add	r3, r7, #8
 221 00d6 1946     		mov	r1, r3
 222 00d8 1348     		ldr	r0, .L3+60
 223 00da FFF7FEFF 		bl	pushData
  92:notoriOS.c    ****     
  93:notoriOS.c    ****     // Initialize the try counter to 0
  94:notoriOS.c    ****     uint8 try_counter = 0;
 224              		.loc 1 94 0
 225 00de 0023     		movs	r3, #0
 226 00e0 FB77     		strb	r3, [r7, #31]
  95:notoriOS.c    **** }
 227              		.loc 1 95 0
 228 00e2 00BF     		nop
 229 00e4 2037     		adds	r7, r7, #32
 230              		.cfi_def_cfa_offset 16
 231 00e6 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 00e8 B0BD     		pop	{r4, r5, r7, pc}
 235              	.L4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 7


 236 00ea 00BF     		.align	2
 237              	.L3:
 238 00ec 00000000 		.word	Wakeup_ISR
 239 00f0 00000000 		.word	.LC0
 240 00f4 04000000 		.word	system_info+4
 241 00f8 00000000 		.word	system_info
 242 00fc 00000000 		.word	modem_info
 243 0100 00000000 		.word	system_settings
 244 0104 08000000 		.word	.LC1
 245 0108 00000000 		.word	updatable_parameters
 246 010c 00000000 		.word	alarmMeasure
 247 0110 00000000 		.word	timeToMeasure
 248 0114 00000000 		.word	alarmSync
 249 0118 00000000 		.word	timeToSync
 250 011c 00000000 		.word	timeToSycnRemoteParams
 251 0120 00000000 		.word	hey
 252 0124 3C000000 		.word	.LC2
 253 0128 40000000 		.word	.LC3
 254              		.cfi_endproc
 255              	.LFE65:
 256              		.size	ReadyOrNot, .-ReadyOrNot
 257              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 258              		.align	2
 259              		.global	WorkWorkWorkWorkWorkWork
 260              		.thumb
 261              		.thumb_func
 262              		.type	WorkWorkWorkWorkWorkWork, %function
 263              	WorkWorkWorkWorkWorkWork:
 264              	.LFB66:
  96:notoriOS.c    **** 
  97:notoriOS.c    **** 
  98:notoriOS.c    **** // ==============================================
  99:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 100:notoriOS.c    **** //      - Rhiana, feat Drake (2016)
 101:notoriOS.c    **** //
 102:notoriOS.c    **** // Prorcesses core tasks
 103:notoriOS.c    **** // ==============================================
 104:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 105:notoriOS.c    **** {
 265              		.loc 1 105 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 106:notoriOS.c    ****     
 107:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 108:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 109:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 110:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 111:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 8


 112:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 113:notoriOS.c    ****     if(timeToSycnRemoteParams){
 277              		.loc 1 113 0
 278 0006 144B     		ldr	r3, .L10
 279 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 280 000a 002B     		cmp	r3, #0
 281 000c 06D0     		beq	.L6
 114:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 282              		.loc 1 114 0
 283 000e FFF7FEFF 		bl	configureRemoteParams
 284 0012 0346     		mov	r3, r0
 285 0014 1A46     		mov	r2, r3
 286 0016 104B     		ldr	r3, .L10
 287 0018 1A70     		strb	r2, [r3]
 288 001a 14E0     		b	.L7
 289              	.L6:
 115:notoriOS.c    ****     }
 116:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 117:notoriOS.c    ****     else if(timeToMeasure){
 290              		.loc 1 117 0
 291 001c 0F4B     		ldr	r3, .L10+4
 292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 0020 002B     		cmp	r3, #0
 294 0022 06D0     		beq	.L8
 118:notoriOS.c    ****         //(int i=0; i<=30; i++){
 119:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 295              		.loc 1 119 0
 296 0024 FFF7FEFF 		bl	makeMeasurements
 297 0028 0346     		mov	r3, r0
 298 002a 1A46     		mov	r2, r3
 299 002c 0B4B     		ldr	r3, .L10+4
 300 002e 1A70     		strb	r2, [r3]
 301 0030 09E0     		b	.L7
 302              	.L8:
 120:notoriOS.c    ****         //CyDelay(1000u);
 121:notoriOS.c    ****         //}
 122:notoriOS.c    ****     }else if(timeToSync){
 303              		.loc 1 122 0
 304 0032 0B4B     		ldr	r3, .L10+8
 305 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 0036 002B     		cmp	r3, #0
 307 0038 05D0     		beq	.L7
 123:notoriOS.c    ****             timeToSync = syncData();
 308              		.loc 1 123 0
 309 003a FFF7FEFF 		bl	syncData
 310 003e 0346     		mov	r3, r0
 311 0040 1A46     		mov	r2, r3
 312 0042 074B     		ldr	r3, .L10+8
 313 0044 1A70     		strb	r2, [r3]
 314              	.L7:
 124:notoriOS.c    ****     }
 125:notoriOS.c    ****     // Print the countdown to the next alarm
 126:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 127:notoriOS.c    ****     
 128:notoriOS.c    ****     
 129:notoriOS.c    ****     // Check modem state machine on every loop
 130:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 9


 315              		.loc 1 130 0
 316 0046 FFF7FEFF 		bl	modem_process_tasks
 317 004a 0346     		mov	r3, r0
 318 004c FB71     		strb	r3, [r7, #7]
 131:notoriOS.c    **** 
 132:notoriOS.c    ****     return 0u +  modem_status;  
 319              		.loc 1 132 0
 320 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133:notoriOS.c    **** }
 321              		.loc 1 133 0
 322 0050 1846     		mov	r0, r3
 323 0052 0837     		adds	r7, r7, #8
 324              		.cfi_def_cfa_offset 8
 325 0054 BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 0056 80BD     		pop	{r7, pc}
 329              	.L11:
 330              		.align	2
 331              	.L10:
 332 0058 00000000 		.word	timeToSycnRemoteParams
 333 005c 00000000 		.word	timeToMeasure
 334 0060 00000000 		.word	timeToSync
 335              		.cfi_endproc
 336              	.LFE66:
 337              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 338              		.section	.text.LayBack,"ax",%progbits
 339              		.align	2
 340              		.global	LayBack
 341              		.thumb
 342              		.thumb_func
 343              		.type	LayBack, %function
 344              	LayBack:
 345              	.LFB67:
 134:notoriOS.c    **** 
 135:notoriOS.c    **** 
 136:notoriOS.c    **** 
 137:notoriOS.c    **** 
 138:notoriOS.c    **** 
 139:notoriOS.c    **** 
 140:notoriOS.c    **** // ==============================================
 141:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 142:notoriOS.c    **** //      - Snoop Dogg (1993)
 143:notoriOS.c    **** //
 144:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** void LayBack()
 147:notoriOS.c    **** {
 346              		.loc 1 147 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 10


 355              		.cfi_def_cfa_register 7
 148:notoriOS.c    ****   
 149:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 356              		.loc 1 149 0
 357 0004 FFF7FEFF 		bl	modem_sleep
 150:notoriOS.c    ****     
 151:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 152:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 358              		.loc 1 152 0
 359 0008 FFF7FEFF 		bl	debug_sleep
 153:notoriOS.c    ****     
 154:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 360              		.loc 1 154 0
 361 000c FFF7FEFF 		bl	CyPmSaveClocks
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 157:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 158:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 159:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 160:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 161:notoriOS.c    ****     //CyPmHibernate();
 162:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 163:notoriOS.c    **** 
 164:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 362              		.loc 1 164 0
 363 0010 4FF40061 		mov	r1, #2048
 364 0014 0020     		movs	r0, #0
 365 0016 FFF7FEFF 		bl	CyPmSleep
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 366              		.loc 1 166 0
 367 001a FFF7FEFF 		bl	CyPmRestoreClocks
 167:notoriOS.c    **** 
 168:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 368              		.loc 1 168 0
 369 001e FFF7FEFF 		bl	debug_wakeup
 169:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 370              		.loc 1 169 0
 371 0022 FFF7FEFF 		bl	modem_wakeup
 170:notoriOS.c    **** 
 171:notoriOS.c    **** }
 372              		.loc 1 171 0
 373 0026 00BF     		nop
 374 0028 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE67:
 377              		.size	LayBack, .-LayBack
 378 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 379              		.align	2
 380              		.global	AyoItsTime
 381              		.thumb
 382              		.thumb_func
 383              		.type	AyoItsTime, %function
 384              	AyoItsTime:
 385              	.LFB68:
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 11


 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 176:notoriOS.c    **** //      - NAS (1994)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 179:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 180:notoriOS.c    **** // It will add tasks to the work queue,
 181:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 182:notoriOS.c    **** // ==============================================
 183:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 184:notoriOS.c    **** {
 386              		.loc 1 184 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 FB71     		strb	r3, [r7, #7]
 185:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 186:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 400              		.loc 1 186 0
 401 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 402 000c 1946     		mov	r1, r3
 403 000e 0C48     		ldr	r0, .L17
 404 0010 FFF7FEFF 		bl	AlarmReady
 405 0014 0346     		mov	r3, r0
 406 0016 002B     		cmp	r3, #0
 407 0018 02D0     		beq	.L14
 187:notoriOS.c    ****     {
 188:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 189:notoriOS.c    ****         timeToMeasure = 1u;
 408              		.loc 1 189 0
 409 001a 0A4B     		ldr	r3, .L17+4
 410 001c 0122     		movs	r2, #1
 411 001e 1A70     		strb	r2, [r3]
 412              	.L14:
 190:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 191:notoriOS.c    ****         
 192:notoriOS.c    ****     }
 193:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 413              		.loc 1 193 0
 414 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415 0022 1946     		mov	r1, r3
 416 0024 0848     		ldr	r0, .L17+8
 417 0026 FFF7FEFF 		bl	AlarmReady
 418 002a 0346     		mov	r3, r0
 419 002c 002B     		cmp	r3, #0
 420 002e 02D0     		beq	.L16
 194:notoriOS.c    ****     {
 195:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 12


 196:notoriOS.c    ****         timeToSync = 1u;
 421              		.loc 1 196 0
 422 0030 064B     		ldr	r3, .L17+12
 423 0032 0122     		movs	r2, #1
 424 0034 1A70     		strb	r2, [r3]
 425              	.L16:
 197:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 198:notoriOS.c    ****     }
 199:notoriOS.c    ****     
 200:notoriOS.c    **** }
 426              		.loc 1 200 0
 427 0036 00BF     		nop
 428 0038 0837     		adds	r7, r7, #8
 429              		.cfi_def_cfa_offset 8
 430 003a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 003c 80BD     		pop	{r7, pc}
 434              	.L18:
 435 003e 00BF     		.align	2
 436              	.L17:
 437 0040 00000000 		.word	alarmMeasure
 438 0044 00000000 		.word	timeToMeasure
 439 0048 00000000 		.word	alarmSync
 440 004c 00000000 		.word	timeToSync
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	AyoItsTime, .-AyoItsTime
 444              		.section	.text.AlarmReady,"ax",%progbits
 445              		.align	2
 446              		.global	AlarmReady
 447              		.thumb
 448              		.thumb_func
 449              		.type	AlarmReady, %function
 450              	AlarmReady:
 451              	.LFB69:
 201:notoriOS.c    **** 
 202:notoriOS.c    **** 
 203:notoriOS.c    **** // ==============================================
 204:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 205:notoriOS.c    **** // ==============================================
 206:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 207:notoriOS.c    **** {
 452              		.loc 1 207 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 13


 466 000a FB70     		strb	r3, [r7, #3]
 208:notoriOS.c    ****     // if the countDownType matches the alarmType
 209:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 467              		.loc 1 209 0
 468 000c 7B68     		ldr	r3, [r7, #4]
 469 000e 1B79     		ldrb	r3, [r3, #4]
 470 0010 DBB2     		uxtb	r3, r3
 471 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 472 0014 9A42     		cmp	r2, r3
 473 0016 12D1     		bne	.L20
 210:notoriOS.c    ****        
 211:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 212:notoriOS.c    ****         // Decrement the count down value by 1
 213:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 474              		.loc 1 213 0
 475 0018 7B68     		ldr	r3, [r7, #4]
 476 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 477 001c 1BB2     		sxth	r3, r3
 478 001e 9BB2     		uxth	r3, r3
 479 0020 013B     		subs	r3, r3, #1
 480 0022 9BB2     		uxth	r3, r3
 481 0024 1AB2     		sxth	r2, r3
 482 0026 7B68     		ldr	r3, [r7, #4]
 483 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 214:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 215:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 484              		.loc 1 215 0
 485 002a 7B68     		ldr	r3, [r7, #4]
 486 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 487 002e 1BB2     		sxth	r3, r3
 488 0030 002B     		cmp	r3, #0
 489 0032 04DC     		bgt	.L20
 216:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 490              		.loc 1 216 0
 491 0034 7868     		ldr	r0, [r7, #4]
 492 0036 FFF7FEFF 		bl	ResetAlarm
 217:notoriOS.c    ****             return 1u;
 493              		.loc 1 217 0
 494 003a 0123     		movs	r3, #1
 495 003c 00E0     		b	.L21
 496              	.L20:
 218:notoriOS.c    ****         } 
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     
 221:notoriOS.c    ****     return 0u; // Otherwise return 0
 497              		.loc 1 221 0
 498 003e 0023     		movs	r3, #0
 499              	.L21:
 222:notoriOS.c    **** }
 500              		.loc 1 222 0
 501 0040 1846     		mov	r0, r3
 502 0042 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0044 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 14


 508              		.cfi_endproc
 509              	.LFE69:
 510              		.size	AlarmReady, .-AlarmReady
 511              		.section	.text.ResetAlarm,"ax",%progbits
 512              		.align	2
 513              		.global	ResetAlarm
 514              		.thumb
 515              		.thumb_func
 516              		.type	ResetAlarm, %function
 517              	ResetAlarm:
 518              	.LFB70:
 223:notoriOS.c    **** 
 224:notoriOS.c    **** // ==============================================
 225:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 226:notoriOS.c    **** // ==============================================
 227:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 228:notoriOS.c    **** {
 519              		.loc 1 228 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 229:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 230:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 532              		.loc 1 230 0
 533 0008 7B68     		ldr	r3, [r7, #4]
 534 000a 1B88     		ldrh	r3, [r3]	@ movhi
 535 000c 9BB2     		uxth	r3, r3
 536 000e 1AB2     		sxth	r2, r3
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 231:notoriOS.c    **** }
 539              		.loc 1 231 0
 540 0014 00BF     		nop
 541 0016 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0018 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 001a 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 001c 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	ResetAlarm, .-ResetAlarm
 553 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 554              		.align	2
 555              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 15


 556              		.thumb
 557              		.thumb_func
 558              		.type	CreateAlarm, %function
 559              	CreateAlarm:
 560              	.LFB71:
 232:notoriOS.c    **** 
 233:notoriOS.c    **** // ==============================================
 234:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 237:notoriOS.c    **** {
 561              		.loc 1 237 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 85B0     		sub	sp, sp, #20
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0846     		mov	r0, r1
 575 000a 1146     		mov	r1, r2
 576 000c 1A46     		mov	r2, r3
 577 000e 0346     		mov	r3, r0	@ movhi
 578 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 579 0012 0B46     		mov	r3, r1
 580 0014 7B70     		strb	r3, [r7, #1]
 581 0016 1346     		mov	r3, r2
 582 0018 3B70     		strb	r3, [r7]
 238:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 239:notoriOS.c    ****     alarm newAlarm;
 240:notoriOS.c    ****     
 241:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 242:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 583              		.loc 1 242 0
 584 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 585 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 243:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 586              		.loc 1 243 0
 587 001e 7B78     		ldrb	r3, [r7, #1]
 588 0020 3B73     		strb	r3, [r7, #12]
 244:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 589              		.loc 1 244 0
 590 0022 3B78     		ldrb	r3, [r7]
 591 0024 7B73     		strb	r3, [r7, #13]
 245:notoriOS.c    ****     
 246:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 247:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 248:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 592              		.loc 1 248 0
 593 0026 B7F90230 		ldrsh	r3, [r7, #2]
 594 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 249:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 16


 250:notoriOS.c    ****     return newAlarm;
 595              		.loc 1 250 0
 596 002c 7B68     		ldr	r3, [r7, #4]
 597 002e 1A46     		mov	r2, r3
 598 0030 07F10803 		add	r3, r7, #8
 599 0034 1868     		ldr	r0, [r3]	@ unaligned
 600 0036 1060     		str	r0, [r2]	@ unaligned
 601 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 602 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 251:notoriOS.c    ****     
 252:notoriOS.c    **** }
 603              		.loc 1 252 0
 604 003c 7868     		ldr	r0, [r7, #4]
 605 003e 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 0040 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0042 80BC     		pop	{r7}
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0044 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE71:
 616              		.size	CreateAlarm, .-CreateAlarm
 617 0046 00BF     		.section	.rodata
 618 0047 00       		.align	2
 619              	.LC4:
 620 0048 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 620      2D2D2D2D 
 620      2D2D2D2D 
 620      2D424547 
 620      494E2054 
 621 0072 0000     		.align	2
 622              	.LC5:
 623 0074 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 623      3D25732C 
 623      2053494D 
 623      49443D25 
 623      732C2044 
 624 0093 00       		.align	2
 625              	.LC6:
 626 0094 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 626      2D2D2D2D 
 626      2D2D2D2D 
 626      2D2D2D45 
 626      4E442054 
 627 00bd 00       		.ascii	"\000"
 628              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 629              		.align	2
 630              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 631              		.thumb
 632              		.thumb_func
 633              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 634              	ChickityCheckYourselfBeforeYouWreckYourself:
 635              	.LFB72:
 253:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 17


 254:notoriOS.c    **** // ==============================================
 255:notoriOS.c    **** // Dropping bombs on your moms
 256:notoriOS.c    **** //      - Ice Cube (1992)
 257:notoriOS.c    **** //
 258:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 259:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 260:notoriOS.c    **** // ==============================================
 261:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 636              		.loc 1 261 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 2328
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 90B5     		push	{r4, r7, lr}
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 ADF6942D 		subw	sp, sp, #2708
 646              		.cfi_def_cfa_offset 2720
 647 0006 5EAF     		add	r7, sp, #376
 648              		.cfi_def_cfa 7, 2344
 262:notoriOS.c    **** 
 263:notoriOS.c    ****     //test_t t_influx = influx_test();
 264:notoriOS.c    ****     //printTestStatus(t_influx);
 265:notoriOS.c    ****     
 266:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 649              		.loc 1 266 0
 650 0008 4249     		ldr	r1, .L26
 651 000a 0320     		movs	r0, #3
 652 000c FFF7FEFF 		bl	printNotif
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Test level sensor
 269:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 653              		.loc 1 269 0
 654 0010 07F29473 		addw	r3, r7, #1940
 655 0014 1846     		mov	r0, r3
 656 0016 FFF7FEFF 		bl	level_sensor_test
 270:notoriOS.c    ****     printTestStatus(t_level_sensor);
 657              		.loc 1 270 0
 658 001a 07F29474 		addw	r4, r7, #1940
 659 001e 6846     		mov	r0, sp
 660 0020 04F11003 		add	r3, r4, #16
 661 0024 40F27112 		movw	r2, #369
 662 0028 1946     		mov	r1, r3
 663 002a FFF7FEFF 		bl	memcpy
 664 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 665 0032 FFF7FEFF 		bl	printTestStatus
 271:notoriOS.c    ****     
 272:notoriOS.c    ****     // Test Valve
 273:notoriOS.c    ****     test_t t_valve = valve_test();
 666              		.loc 1 273 0
 667 0036 07F5C263 		add	r3, r7, #1552
 668 003a 1846     		mov	r0, r3
 669 003c FFF7FEFF 		bl	valve_test
 274:notoriOS.c    ****     printTestStatus(t_valve);
 670              		.loc 1 274 0
 671 0040 07F5C264 		add	r4, r7, #1552
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 18


 672 0044 6846     		mov	r0, sp
 673 0046 04F11003 		add	r3, r4, #16
 674 004a 40F27112 		movw	r2, #369
 675 004e 1946     		mov	r1, r3
 676 0050 FFF7FEFF 		bl	memcpy
 677 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 678 0058 FFF7FEFF 		bl	printTestStatus
 275:notoriOS.c    ****     
 276:notoriOS.c    ****     // Test voltages
 277:notoriOS.c    ****     test_t t_voltages = voltages_test();
 679              		.loc 1 277 0
 680 005c 07F28C43 		addw	r3, r7, #1164
 681 0060 1846     		mov	r0, r3
 682 0062 FFF7FEFF 		bl	voltages_test
 278:notoriOS.c    ****     printTestStatus(t_voltages);
 683              		.loc 1 278 0
 684 0066 07F28C44 		addw	r4, r7, #1164
 685 006a 6846     		mov	r0, sp
 686 006c 04F11003 		add	r3, r4, #16
 687 0070 40F27112 		movw	r2, #369
 688 0074 1946     		mov	r1, r3
 689 0076 FFF7FEFF 		bl	memcpy
 690 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 691 007e FFF7FEFF 		bl	printTestStatus
 279:notoriOS.c    ****  
 280:notoriOS.c    ****     // Test voltages
 281:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 692              		.loc 1 281 0
 693 0082 07F54273 		add	r3, r7, #776
 694 0086 1846     		mov	r0, r3
 695 0088 FFF7FEFF 		bl	pressure_sensor_test
 282:notoriOS.c    ****     printTestStatus(t_pressure);
 696              		.loc 1 282 0
 697 008c 07F54274 		add	r4, r7, #776
 698 0090 6846     		mov	r0, sp
 699 0092 04F11003 		add	r3, r4, #16
 700 0096 40F27112 		movw	r2, #369
 701 009a 1946     		mov	r1, r3
 702 009c FFF7FEFF 		bl	memcpy
 703 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 704 00a4 FFF7FEFF 		bl	printTestStatus
 283:notoriOS.c    ****     
 284:notoriOS.c    ****     // Test SD card
 285:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 705              		.loc 1 285 0
 706 00a8 07F5C273 		add	r3, r7, #388
 707 00ac 1846     		mov	r0, r3
 708 00ae FFF7FEFF 		bl	SD_card_test
 286:notoriOS.c    ****     printTestStatus(t_sd_card);
 709              		.loc 1 286 0
 710 00b2 07F5C274 		add	r4, r7, #388
 711 00b6 6846     		mov	r0, sp
 712 00b8 04F11003 		add	r3, r4, #16
 713 00bc 40F27112 		movw	r2, #369
 714 00c0 1946     		mov	r1, r3
 715 00c2 FFF7FEFF 		bl	memcpy
 716 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 19


 717 00ca FFF7FEFF 		bl	printTestStatus
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // Test modem
 289:notoriOS.c    ****     test_t t_modem = modem_test();
 718              		.loc 1 289 0
 719 00ce 3B46     		mov	r3, r7
 720 00d0 1846     		mov	r0, r3
 721 00d2 FFF7FEFF 		bl	modem_test
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 722              		.loc 1 290 0
 723 00d6 104B     		ldr	r3, .L26+4
 724 00d8 0093     		str	r3, [sp]
 725 00da 104B     		ldr	r3, .L26+8
 726 00dc 104A     		ldr	r2, .L26+12
 727 00de 1149     		ldr	r1, .L26+16
 728 00e0 0320     		movs	r0, #3
 729 00e2 FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     printTestStatus(t_modem);
 730              		.loc 1 291 0
 731 00e6 3C46     		mov	r4, r7
 732 00e8 6846     		mov	r0, sp
 733 00ea 04F11003 		add	r3, r4, #16
 734 00ee 40F27112 		movw	r2, #369
 735 00f2 1946     		mov	r1, r3
 736 00f4 FFF7FEFF 		bl	memcpy
 737 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 738 00fc FFF7FEFF 		bl	printTestStatus
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 739              		.loc 1 293 0
 740 0100 0949     		ldr	r1, .L26+20
 741 0102 0320     		movs	r0, #3
 742 0104 FFF7FEFF 		bl	printNotif
 294:notoriOS.c    **** 
 295:notoriOS.c    **** }
 743              		.loc 1 295 0
 744 0108 00BF     		nop
 745 010a 07F61C17 		addw	r7, r7, #2332
 746              		.cfi_def_cfa_offset 12
 747 010e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0110 90BD     		pop	{r4, r7, pc}
 751              	.L27:
 752 0112 00BF     		.align	2
 753              	.L26:
 754 0114 48000000 		.word	.LC4
 755 0118 04000000 		.word	system_info+4
 756 011c 00000000 		.word	modem_info
 757 0120 28000000 		.word	modem_info+40
 758 0124 74000000 		.word	.LC5
 759 0128 94000000 		.word	.LC6
 760              		.cfi_endproc
 761              	.LFE72:
 762              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 763              		.section	.text.main,"ax",%progbits
 764              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 20


 765              		.global	main
 766              		.thumb
 767              		.thumb_func
 768              		.type	main, %function
 769              	main:
 770              	.LFB73:
 296:notoriOS.c    **** 
 297:notoriOS.c    **** // ==============================================
 298:notoriOS.c    **** // Processes Core Tasks
 299:notoriOS.c    **** // ==============================================
 300:notoriOS.c    **** int main(void)
 301:notoriOS.c    **** {
 771              		.loc 1 301 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 302:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 781              		.loc 1 302 0
 782              		.syntax unified
 783              	@ 302 "notoriOS.c" 1
 784 0004 62B6     		CPSIE   i
 785              	@ 0 "" 2
 303:notoriOS.c    **** 
 304:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 786              		.loc 1 304 0
 787              		.thumb
 788              		.syntax unified
 789 0006 FFF7FEFF 		bl	ReadyOrNot
 305:notoriOS.c    ****     
 306:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 790              		.loc 1 306 0
 791 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 792              	.L30:
 307:notoriOS.c    ****    
 308:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 309:notoriOS.c    ****     {
 310:notoriOS.c    ****         
 311:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 793              		.loc 1 311 0
 794 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 795 0012 0346     		mov	r3, r0
 796 0014 002B     		cmp	r3, #0
 797 0016 FAD1     		bne	.L30
 312:notoriOS.c    ****         {
 313:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 798              		.loc 1 313 0
 799 0018 FFF7FEFF 		bl	LayBack
 314:notoriOS.c    ****         }
 315:notoriOS.c    ****     }
 800              		.loc 1 315 0
 801 001c F7E7     		b	.L30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 21


 802              		.cfi_endproc
 803              	.LFE73:
 804              		.size	main, .-main
 805 001e 00BF     		.section	.rodata
 806 00be 0000     		.align	2
 807              	.LC7:
 808 00c0 496D706C 		.ascii	"Implementing fallback controller strategy\000"
 808      656D656E 
 808      74696E67 
 808      2066616C 
 808      6C626163 
 809 00ea 0000     		.align	2
 810              	.LC8:
 811 00ec 4D6F6465 		.ascii	"Modem is ready.\000"
 811      6D206973 
 811      20726561 
 811      64792E00 
 812              		.align	2
 813              	.LC9:
 814 00fc 72737270 		.ascii	"rsrp\000"
 814      00
 815 0101 000000   		.align	2
 816              	.LC10:
 817 0104 7472795F 		.ascii	"try_counter\000"
 817      636F756E 
 817      74657200 
 818              		.align	2
 819              	.LC11:
 820 0110 64617461 		.ascii	"data_count_sent\000"
 820      5F636F75 
 820      6E745F73 
 820      656E7400 
 821              		.align	2
 822              	.LC12:
 823 0120 64617461 		.ascii	"data_count_desired\000"
 823      5F636F75 
 823      6E745F64 
 823      65736972 
 823      656400
 824 0133 00       		.align	2
 825              	.LC13:
 826 0134 42656769 		.ascii	"Begin HTTP post.\000"
 826      6E204854 
 826      54502070 
 826      6F73742E 
 826      00
 827 0145 000000   		.align	2
 828              	.LC14:
 829 0148 64313939 		.ascii	"d199e2ec39c8b9cda6ad842f2128b2048f3acad7\000"
 829      65326563 
 829      33396338 
 829      62396364 
 829      61366164 
 830 0171 000000   		.align	2
 831              	.LC15:
 832 0174 6170692F 		.ascii	"api/v1/write\000"
 832      76312F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 22


 832      72697465 
 832      00
 833 0181 000000   		.align	2
 834              	.LC16:
 835 0184 48545450 		.ascii	"HTTP route: %s\000"
 835      20726F75 
 835      74653A20 
 835      257300
 836 0193 00       		.align	2
 837              	.LC17:
 838 0194 312E3100 		.ascii	"1.1\000"
 839              		.align	2
 840              	.LC18:
 841 0198 00       		.ascii	"\000"
 842 0199 000000   		.align	2
 843              	.LC19:
 844 019c 436C6F73 		.ascii	"Close\000"
 844      6500
 845 01a2 0000     		.align	2
 846              	.LC20:
 847 01a4 504F5354 		.ascii	"POST\000"
 847      00
 848 01a9 000000   		.align	2
 849              	.LC21:
 850 01ac 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 850      20485454 
 850      50205265 
 850      71756573 
 850      743A2025 
 851 01c2 0000     		.align	2
 852              	.LC22:
 853 01c4 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 853      443D312C 
 853      302C2564 
 853      2C222573 
 853      222C302C 
 854 01dd 000000   		.align	2
 855              	.LC23:
 856 01e0 257300   		.ascii	"%s\000"
 857 01e3 00       		.align	2
 858              	.LC24:
 859 01e4 4F4B00   		.ascii	"OK\000"
 860              		.global	__aeabi_ui2d
 861              		.global	__aeabi_d2iz
 862 01e7 00       		.align	2
 863              	.LC25:
 864 01e8 68747470 		.ascii	"http_request len: %d\000"
 864      5F726571 
 864      75657374 
 864      206C656E 
 864      3A202564 
 865 01fd 000000   		.align	2
 866              	.LC26:
 867 0200 23206F66 		.ascii	"# of packets: %d\000"
 867      20706163 
 867      6B657473 
 867      3A202564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 23


 867      00
 868 0211 000000   		.align	2
 869              	.LC27:
 870 0214 3E00     		.ascii	">\000"
 871 0216 0000     		.align	2
 872              	.LC28:
 873 0218 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 873      53454E44 
 873      3D310D0A 
 873      00
 874 0225 000000   		.align	2
 875              	.LC29:
 876 0228 1A00     		.ascii	"\032\000"
 877 022a 0000     		.align	2
 878              	.LC30:
 879 022c 6368756E 		.ascii	"chunk %d: %s\000"
 879      6B202564 
 879      3A202573 
 879      00
 880 0239 000000   		.align	2
 881              	.LC31:
 882 023c 5352494E 		.ascii	"SRING\000"
 882      4700
 883 0242 0000     		.align	2
 884              	.LC32:
 885 0244 4F532D4F 		.ascii	"OS-OK\000"
 885      4B00
 886 024a 0000     		.align	2
 887              	.LC33:
 888 024c 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 888      52454356 
 888      3D312C31 
 888      3030300D 
 888      00
 889 025d 000000   		.align	2
 890              	.LC34:
 891 0260 6D6F6465 		.ascii	"modem_tx_time\000"
 891      6D5F7478 
 891      5F74696D 
 891      6500
 892 026e 0000     		.align	2
 893              	.LC35:
 894 0270 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 894      4F3A2043 
 894      6F756C64 
 894      206E6F74 
 894      20726563 
 895              		.section	.text.syncData,"ax",%progbits
 896              		.align	2
 897              		.global	syncData
 898              		.thumb
 899              		.thumb_func
 900              		.type	syncData, %function
 901              	syncData:
 902              	.LFB74:
 316:notoriOS.c    **** }
 317:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 24


 318:notoriOS.c    **** // ==============================================
 319:notoriOS.c    **** // Syncs data with server
 320:notoriOS.c    **** // Returns 0 when done
 321:notoriOS.c    **** // ==============================================
 322:notoriOS.c    **** uint8 syncData(){
 903              		.loc 1 322 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 1368
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 90B5     		push	{r4, r7, lr}
 908              		.cfi_def_cfa_offset 12
 909              		.cfi_offset 4, -12
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912 0002 ADF2745D 		subw	sp, sp, #1396
 913              		.cfi_def_cfa_offset 1408
 914 0006 06AF     		add	r7, sp, #24
 915              		.cfi_def_cfa 7, 1384
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     /*
 325:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 326:notoriOS.c    ****     uint8 check = 0;
 327:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 328:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 329:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 330:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 331:notoriOS.c    ****     */
 332:notoriOS.c    **** 
 333:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 334:notoriOS.c    ****     LED_Write(1u);
 916              		.loc 1 334 0
 917 0008 0120     		movs	r0, #1
 918 000a FFF7FEFF 		bl	LED_Write
 335:notoriOS.c    ****     CyDelay(100u);
 919              		.loc 1 335 0
 920 000e 6420     		movs	r0, #100
 921 0010 FFF7FEFF 		bl	CyDelay
 336:notoriOS.c    ****     LED_Write(0u);
 922              		.loc 1 336 0
 923 0014 0020     		movs	r0, #0
 924 0016 FFF7FEFF 		bl	LED_Write
 337:notoriOS.c    **** 
 338:notoriOS.c    ****     
 339:notoriOS.c    ****     // If there's no data, not need to do anything
 340:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 925              		.loc 1 340 0
 926 001a FFF7FEFF 		bl	sizeOfDataStack
 927 001e 0346     		mov	r3, r0
 928 0020 002B     		cmp	r3, #0
 929 0022 01D1     		bne	.L32
 341:notoriOS.c    ****         return 0u;
 930              		.loc 1 341 0
 931 0024 0023     		movs	r3, #0
 932 0026 03E2     		b	.L33
 933              	.L32:
 342:notoriOS.c    ****         }
 343:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 25


 344:notoriOS.c    ****     // Create request body, in this case influx
 345:notoriOS.c    ****     // Place body into HTTP request header
 346:notoriOS.c    ****     // Fire up modem and get it out
 347:notoriOS.c    ****      
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 350:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 934              		.loc 1 350 0
 935 0028 FFF7FEFF 		bl	modem_get_state
 936 002c 0346     		mov	r3, r0
 937 002e 002B     		cmp	r3, #0
 938 0030 23D1     		bne	.L34
 351:notoriOS.c    **** 
 352:notoriOS.c    ****         try_counter++;
 939              		.loc 1 352 0
 940 0032 AE4B     		ldr	r3, .L47
 941 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 942 0036 0133     		adds	r3, r3, #1
 943 0038 DAB2     		uxtb	r2, r3
 944 003a AC4B     		ldr	r3, .L47
 945 003c 1A70     		strb	r2, [r3]
 353:notoriOS.c    ****         	
 354:notoriOS.c    ****         if(try_counter <= 2){
 946              		.loc 1 354 0
 947 003e AB4B     		ldr	r3, .L47
 948 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 0042 022B     		cmp	r3, #2
 950 0044 02D8     		bhi	.L35
 355:notoriOS.c    ****             modem_power_up();
 951              		.loc 1 355 0
 952 0046 FFF7FEFF 		bl	modem_power_up
 953 004a F0E1     		b	.L36
 954              	.L35:
 356:notoriOS.c    ****         }else{
 357:notoriOS.c    ****             try_counter = 0;
 955              		.loc 1 357 0
 956 004c A74B     		ldr	r3, .L47
 957 004e 0022     		movs	r2, #0
 958 0050 1A70     		strb	r2, [r3]
 358:notoriOS.c    ****             // call default valve control script here w/in conditional for valve_type node
 359:notoriOS.c    ****             if (updatable_parameters.node_type ==NODE_TYPE_VALVE){
 959              		.loc 1 359 0
 960 0052 A74B     		ldr	r3, .L47+4
 961 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0056 032B     		cmp	r3, #3
 963 0058 0DD1     		bne	.L37
 360:notoriOS.c    ****                 printNotif(NOTIF_TYPE_EVENT, "Implementing fallback controller strategy");
 964              		.loc 1 360 0
 965 005a A649     		ldr	r1, .L47+8
 966 005c 0020     		movs	r0, #0
 967 005e FFF7FEFF 		bl	printNotif
 361:notoriOS.c    ****                 level_controller(level_sensor_take_reading().level_reading); // want to take curren
 968              		.loc 1 361 0
 969 0062 07F5A563 		add	r3, r7, #1320
 970 0066 1846     		mov	r0, r3
 971 0068 FFF7FEFF 		bl	level_sensor_take_reading
 972 006c B7F93E35 		ldrsh	r3, [r7, #1342]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 26


 973 0070 1846     		mov	r0, r3
 974 0072 FFF7FEFF 		bl	level_controller
 975              	.L37:
 362:notoriOS.c    ****             }
 363:notoriOS.c    ****             // above function lives in valve.c
 364:notoriOS.c    ****             return 0u;
 976              		.loc 1 364 0
 977 0076 0023     		movs	r3, #0
 978 0078 DAE1     		b	.L33
 979              	.L34:
 365:notoriOS.c    ****             }
 366:notoriOS.c    ****             
 367:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 980              		.loc 1 367 0
 981 007a FFF7FEFF 		bl	modem_get_state
 982 007e 0346     		mov	r3, r0
 983 0080 042B     		cmp	r3, #4
 984 0082 40F0D481 		bne	.L36
 985              	.LBB2:
 368:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 986              		.loc 1 368 0
 987 0086 9C49     		ldr	r1, .L47+12
 988 0088 0020     		movs	r0, #0
 989 008a FFF7FEFF 		bl	printNotif
 369:notoriOS.c    ****         
 370:notoriOS.c    ****         http_request[0] = '\0';
 990              		.loc 1 370 0
 991 008e 9B4B     		ldr	r3, .L47+16
 992 0090 0022     		movs	r2, #0
 993 0092 1A70     		strb	r2, [r3]
 371:notoriOS.c    ****         http_body[0] = '\0';
 994              		.loc 1 371 0
 995 0094 9A4B     		ldr	r3, .L47+20
 996 0096 0022     		movs	r2, #0
 997 0098 1A70     		strb	r2, [r3]
 372:notoriOS.c    ****         http_route[0] = '\0';
 998              		.loc 1 372 0
 999 009a 9A4B     		ldr	r3, .L47+24
 1000 009c 0022     		movs	r2, #0
 1001 009e 1A70     		strb	r2, [r3]
 373:notoriOS.c    ****         //char *base = "write";
 374:notoriOS.c    ****         
 375:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power)
 376:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 377:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1002              		.loc 1 377 0
 1003 00a0 994B     		ldr	r3, .L47+28
 1004 00a2 5B69     		ldr	r3, [r3, #20]
 1005 00a4 07F21450 		addw	r0, r7, #1300
 1006 00a8 984A     		ldr	r2, .L47+32
 1007 00aa 1421     		movs	r1, #20
 1008 00ac FFF7FEFF 		bl	snprintf
 378:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1009              		.loc 1 378 0
 1010 00b0 FFF7FEFF 		bl	getTimeStamp
 1011 00b4 0246     		mov	r2, r0
 1012 00b6 07F21453 		addw	r3, r7, #1300
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 27


 1013 00ba 1946     		mov	r1, r3
 1014 00bc 9448     		ldr	r0, .L47+36
 1015 00be FFF7FEFF 		bl	pushData
 379:notoriOS.c    ****         
 380:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 381:notoriOS.c    ****         char c_try_counter[20];
 382:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1016              		.loc 1 382 0
 1017 00c2 8A4B     		ldr	r3, .L47
 1018 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 00c6 07F5A060 		add	r0, r7, #1280
 1020 00ca 904A     		ldr	r2, .L47+32
 1021 00cc 1421     		movs	r1, #20
 1022 00ce FFF7FEFF 		bl	snprintf
 383:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1023              		.loc 1 383 0
 1024 00d2 FFF7FEFF 		bl	getTimeStamp
 1025 00d6 0246     		mov	r2, r0
 1026 00d8 07F5A063 		add	r3, r7, #1280
 1027 00dc 1946     		mov	r1, r3
 1028 00de 8D48     		ldr	r0, .L47+40
 1029 00e0 FFF7FEFF 		bl	pushData
 384:notoriOS.c    ****         
 385:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 386:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 387:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 388:notoriOS.c    ****         if(buffer_overflow == false){
 1030              		.loc 1 388 0
 1031 00e4 8C4B     		ldr	r3, .L47+44
 1032 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1033 00e8 83F00103 		eor	r3, r3, #1
 1034 00ec DBB2     		uxtb	r3, r3
 1035 00ee 002B     		cmp	r3, #0
 1036 00f0 16D0     		beq	.L38
 1037              	.LBB3:
 389:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1038              		.loc 1 389 0
 1039 00f2 FFF7FEFF 		bl	sizeOfDataStack
 1040 00f6 0346     		mov	r3, r0
 1041 00f8 A7F85035 		strh	r3, [r7, #1360]	@ movhi
 390:notoriOS.c    ****             char c_data_count_sent[20];
 391:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1042              		.loc 1 391 0
 1043 00fc B7F85035 		ldrh	r3, [r7, #1360]
 1044 0100 07F59B60 		add	r0, r7, #1240
 1045 0104 814A     		ldr	r2, .L47+32
 1046 0106 1421     		movs	r1, #20
 1047 0108 FFF7FEFF 		bl	snprintf
 392:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1048              		.loc 1 392 0
 1049 010c FFF7FEFF 		bl	getTimeStamp
 1050 0110 0246     		mov	r2, r0
 1051 0112 07F59B63 		add	r3, r7, #1240
 1052 0116 1946     		mov	r1, r3
 1053 0118 8048     		ldr	r0, .L47+48
 1054 011a FFF7FEFF 		bl	pushData
 1055              	.LBE3:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 28


 1056 011e 0FE0     		b	.L39
 1057              	.L38:
 1058              	.LBB4:
 393:notoriOS.c    ****         }else{
 394:notoriOS.c    ****             char c_data_count_sent[20];
 395:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1059              		.loc 1 395 0
 1060 0120 07F2C440 		addw	r0, r7, #1220
 1061 0124 9623     		movs	r3, #150
 1062 0126 794A     		ldr	r2, .L47+32
 1063 0128 1421     		movs	r1, #20
 1064 012a FFF7FEFF 		bl	snprintf
 396:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1065              		.loc 1 396 0
 1066 012e FFF7FEFF 		bl	getTimeStamp
 1067 0132 0246     		mov	r2, r0
 1068 0134 07F2C443 		addw	r3, r7, #1220
 1069 0138 1946     		mov	r1, r3
 1070 013a 7848     		ldr	r0, .L47+48
 1071 013c FFF7FEFF 		bl	pushData
 1072              	.L39:
 1073              	.LBE4:
 397:notoriOS.c    ****         }
 398:notoriOS.c    ****         
 399:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 400:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1074              		.loc 1 400 0
 1075 0140 FFF7FEFF 		bl	sizeOfDataStackDesired
 1076 0144 0346     		mov	r3, r0
 1077 0146 A7F84E35 		strh	r3, [r7, #1358]	@ movhi
 401:notoriOS.c    ****         char c_data_count_desired[20];
 402:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 403:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1078              		.loc 1 403 0
 1079 014a B7F84E35 		ldrh	r3, [r7, #1358]
 1080 014e 013B     		subs	r3, r3, #1
 1081 0150 07F2EC40 		addw	r0, r7, #1260
 1082 0154 6D4A     		ldr	r2, .L47+32
 1083 0156 1421     		movs	r1, #20
 1084 0158 FFF7FEFF 		bl	snprintf
 404:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1085              		.loc 1 404 0
 1086 015c FFF7FEFF 		bl	getTimeStamp
 1087 0160 0246     		mov	r2, r0
 1088 0162 07F2EC43 		addw	r3, r7, #1260
 1089 0166 1946     		mov	r1, r3
 1090 0168 6D48     		ldr	r0, .L47+52
 1091 016a FFF7FEFF 		bl	pushData
 405:notoriOS.c    ****         
 406:notoriOS.c    ****         // Construct HTPP request
 407:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1092              		.loc 1 407 0
 1093 016e 6D49     		ldr	r1, .L47+56
 1094 0170 0020     		movs	r0, #0
 1095 0172 FFF7FEFF 		bl	printNotif
 408:notoriOS.c    ****         
 409:notoriOS.c    ****         // Old influx API
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 29


 410:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 411:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1096              		.loc 1 411 0
 1097 0176 6C4B     		ldr	r3, .L47+60
 1098 0178 6C4A     		ldr	r2, .L47+64
 1099 017a 6D49     		ldr	r1, .L47+68
 1100 017c 6148     		ldr	r0, .L47+24
 1101 017e FFF7FEFF 		bl	construct_malcom_route
 412:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1102              		.loc 1 412 0
 1103 0182 604A     		ldr	r2, .L47+24
 1104 0184 6B49     		ldr	r1, .L47+72
 1105 0186 0020     		movs	r0, #0
 1106 0188 FFF7FEFF 		bl	printNotif
 413:notoriOS.c    ****         
 414:notoriOS.c    ****         //OLD INFLUX API
 415:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 416:notoriOS.c    ****         construct_malcom_body(http_body);
 1107              		.loc 1 416 0
 1108 018c 5C48     		ldr	r0, .L47+20
 1109 018e FFF7FEFF 		bl	construct_malcom_body
 417:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1110              		.loc 1 417 0
 1111 0192 694B     		ldr	r3, .L47+76
 1112 0194 5B6E     		ldr	r3, [r3, #100]
 1113 0196 694A     		ldr	r2, .L47+80
 1114 0198 0592     		str	r2, [sp, #20]
 1115 019a 0022     		movs	r2, #0
 1116 019c 0492     		str	r2, [sp, #16]
 1117 019e 684A     		ldr	r2, .L47+84
 1118 01a0 0392     		str	r2, [sp, #12]
 1119 01a2 684A     		ldr	r2, .L47+88
 1120 01a4 0292     		str	r2, [sp, #8]
 1121 01a6 684A     		ldr	r2, .L47+92
 1122 01a8 0192     		str	r2, [sp, #4]
 1123 01aa 0093     		str	r3, [sp]
 1124 01ac 554B     		ldr	r3, .L47+24
 1125 01ae 624A     		ldr	r2, .L47+76
 1126 01b0 5349     		ldr	r1, .L47+20
 1127 01b2 5248     		ldr	r0, .L47+16
 1128 01b4 FFF7FEFF 		bl	construct_generic_HTTP_request
 418:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1129              		.loc 1 418 0
 1130 01b8 504A     		ldr	r2, .L47+16
 1131 01ba 6449     		ldr	r1, .L47+96
 1132 01bc 0020     		movs	r0, #0
 1133 01be FFF7FEFF 		bl	printNotif
 419:notoriOS.c    ****         
 420:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 421:notoriOS.c    ****         // Open port and begin command line sequence
 422:notoriOS.c    ****         char portConfig[200];
 423:notoriOS.c    ****         uint8 status = 0u;
 1134              		.loc 1 423 0
 1135 01c2 0023     		movs	r3, #0
 1136 01c4 87F84D35 		strb	r3, [r7, #1357]
 424:notoriOS.c    ****         
 425:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 30


 1137              		.loc 1 425 0
 1138 01c8 5B4B     		ldr	r3, .L47+76
 1139 01ca 5A6E     		ldr	r2, [r3, #100]
 1140 01cc 381D     		adds	r0, r7, #4
 1141 01ce 5A4B     		ldr	r3, .L47+76
 1142 01d0 0093     		str	r3, [sp]
 1143 01d2 1346     		mov	r3, r2
 1144 01d4 5E4A     		ldr	r2, .L47+100
 1145 01d6 C821     		movs	r1, #200
 1146 01d8 FFF7FEFF 		bl	snprintf
 426:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1147              		.loc 1 426 0
 1148 01dc 3B1D     		adds	r3, r7, #4
 1149 01de 1A46     		mov	r2, r3
 1150 01e0 5C49     		ldr	r1, .L47+104
 1151 01e2 0020     		movs	r0, #0
 1152 01e4 FFF7FEFF 		bl	printNotif
 427:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1153              		.loc 1 427 0
 1154 01e8 3B1D     		adds	r3, r7, #4
 1155 01ea 42F21072 		movw	r2, #10000
 1156 01ee 5A49     		ldr	r1, .L47+108
 1157 01f0 1846     		mov	r0, r3
 1158 01f2 FFF7FEFF 		bl	at_write_command
 1159 01f6 0346     		mov	r3, r0
 1160 01f8 87F84D35 		strb	r3, [r7, #1357]
 428:notoriOS.c    ****         
 429:notoriOS.c    ****         // create character pointer to chunk through the http_request
 430:notoriOS.c    ****         char *chunk;
 431:notoriOS.c    ****         // Set chunk to start where http_request starts
 432:notoriOS.c    ****         chunk = http_request;
 1161              		.loc 1 432 0
 1162 01fc 3F4B     		ldr	r3, .L47+16
 1163 01fe C7F85435 		str	r3, [r7, #1364]
 433:notoriOS.c    ****         // variable for the number of packets to send
 434:notoriOS.c    ****         int8 packets;
 435:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1164              		.loc 1 435 0
 1165 0202 3E48     		ldr	r0, .L47+16
 1166 0204 FFF7FEFF 		bl	strlen
 1167 0208 0246     		mov	r2, r0
 1168 020a 544B     		ldr	r3, .L47+112
 1169 020c A3FB0223 		umull	r2, r3, r3, r2
 1170 0210 5B09     		lsrs	r3, r3, #5
 1171 0212 1846     		mov	r0, r3
 1172 0214 FFF7FEFF 		bl	__aeabi_ui2d
 1173 0218 4FF00002 		mov	r2, #0
 1174 021c 504B     		ldr	r3, .L47+116
 1175 021e FFF7FEFF 		bl	nextafter
 1176 0222 0346     		mov	r3, r0
 1177 0224 0C46     		mov	r4, r1
 1178 0226 1846     		mov	r0, r3
 1179 0228 2146     		mov	r1, r4
 1180 022a FFF7FEFF 		bl	ceil
 1181 022e 0346     		mov	r3, r0
 1182 0230 0C46     		mov	r4, r1
 1183 0232 1846     		mov	r0, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 31


 1184 0234 2146     		mov	r1, r4
 1185 0236 FFF7FEFF 		bl	__aeabi_d2iz
 1186 023a 0346     		mov	r3, r0
 1187 023c 87F84C35 		strb	r3, [r7, #1356]
 436:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1188              		.loc 1 436 0
 1189 0240 2E48     		ldr	r0, .L47+16
 1190 0242 FFF7FEFF 		bl	strlen
 1191 0246 0346     		mov	r3, r0
 1192 0248 1A46     		mov	r2, r3
 1193 024a 4649     		ldr	r1, .L47+120
 1194 024c 0020     		movs	r0, #0
 1195 024e FFF7FEFF 		bl	printNotif
 437:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1196              		.loc 1 437 0
 1197 0252 97F94C35 		ldrsb	r3, [r7, #1356]
 1198 0256 1A46     		mov	r2, r3
 1199 0258 4349     		ldr	r1, .L47+124
 1200 025a 0020     		movs	r0, #0
 1201 025c FFF7FEFF 		bl	printNotif
 1202              	.LBB5:
 438:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 439:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1203              		.loc 1 439 0
 1204 0260 0023     		movs	r3, #0
 1205 0262 87F85335 		strb	r3, [r7, #1363]
 1206 0266 9BE0     		b	.L40
 1207              	.L43:
 1208              	.LBB6:
 440:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 441:notoriOS.c    ****             char http_chunk[1001];
 442:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 443:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 444:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1209              		.loc 1 444 0
 1210 0268 4FF47A72 		mov	r2, #1000
 1211 026c 3F49     		ldr	r1, .L47+128
 1212 026e 4048     		ldr	r0, .L47+132
 1213 0270 FFF7FEFF 		bl	at_write_command
 1214 0274 0346     		mov	r3, r0
 1215 0276 87F84D35 		strb	r3, [r7, #1357]
 445:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 446:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1216              		.loc 1 446 0
 1217 027a 07F1CC00 		add	r0, r7, #204
 1218 027e D7F85435 		ldr	r3, [r7, #1364]
 1219 0282 344A     		ldr	r2, .L47+104
 1220 0284 4FF4FA71 		mov	r1, #500
 1221 0288 FFF7FEFF 		bl	snprintf
 447:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 448:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1222              		.loc 1 448 0
 1223 028c 07F1CC03 		add	r3, r7, #204
 1224 0290 1846     		mov	r0, r3
 1225 0292 FFF7FEFF 		bl	strlen
 1226 0296 0346     		mov	r3, r0
 1227 0298 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 32


 1228 029a 07F1CC03 		add	r3, r7, #204
 1229 029e 1344     		add	r3, r3, r2
 1230 02a0 3449     		ldr	r1, .L47+136
 1231 02a2 1A46     		mov	r2, r3
 1232 02a4 0B46     		mov	r3, r1
 1233 02a6 1B88     		ldrh	r3, [r3]	@ unaligned
 1234 02a8 1380     		strh	r3, [r2]	@ unaligned
 449:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1235              		.loc 1 449 0
 1236 02aa 97F95325 		ldrsb	r2, [r7, #1363]
 1237 02ae 07F1CC03 		add	r3, r7, #204
 1238 02b2 3149     		ldr	r1, .L47+140
 1239 02b4 0020     		movs	r0, #0
 1240 02b6 FFF7FEFF 		bl	printNotif
 450:notoriOS.c    ****             // Send data to server
 451:notoriOS.c    ****             if ((packet+1) != packets){
 1241              		.loc 1 451 0
 1242 02ba 97F95335 		ldrsb	r3, [r7, #1363]
 1243 02be 5A1C     		adds	r2, r3, #1
 1244 02c0 97F94C35 		ldrsb	r3, [r7, #1356]
 1245 02c4 9A42     		cmp	r2, r3
 1246 02c6 59D0     		beq	.L41
 452:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1247              		.loc 1 452 0
 1248 02c8 07F1CC03 		add	r3, r7, #204
 1249 02cc 41F28832 		movw	r2, #5000
 1250 02d0 2149     		ldr	r1, .L47+108
 1251 02d2 1846     		mov	r0, r3
 1252 02d4 FFF7FEFF 		bl	at_write_command
 1253 02d8 0346     		mov	r3, r0
 1254 02da 87F84D35 		strb	r3, [r7, #1357]
 453:notoriOS.c    ****                 // Move the pointer forward 
 454:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1255              		.loc 1 454 0
 1256 02de D7F85435 		ldr	r3, [r7, #1364]
 1257 02e2 03F2F313 		addw	r3, r3, #499
 1258 02e6 C7F85435 		str	r3, [r7, #1364]
 1259 02ea 52E0     		b	.L42
 1260              	.L48:
 1261              		.align	2
 1262              	.L47:
 1263 02ec 00000000 		.word	try_counter
 1264 02f0 00000000 		.word	updatable_parameters
 1265 02f4 C0000000 		.word	.LC7
 1266 02f8 EC000000 		.word	.LC8
 1267 02fc 00000000 		.word	http_request
 1268 0300 00000000 		.word	http_body
 1269 0304 00000000 		.word	http_route
 1270 0308 00000000 		.word	modem_stats
 1271 030c 3C000000 		.word	.LC2
 1272 0310 FC000000 		.word	.LC9
 1273 0314 04010000 		.word	.LC10
 1274 0318 00000000 		.word	buffer_overflow
 1275 031c 10010000 		.word	.LC11
 1276 0320 20010000 		.word	.LC12
 1277 0324 34010000 		.word	.LC13
 1278 0328 48010000 		.word	.LC14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 33


 1279 032c 28000000 		.word	modem_info+40
 1280 0330 74010000 		.word	.LC15
 1281 0334 84010000 		.word	.LC16
 1282 0338 00000000 		.word	system_settings
 1283 033c 94010000 		.word	.LC17
 1284 0340 98010000 		.word	.LC18
 1285 0344 9C010000 		.word	.LC19
 1286 0348 A4010000 		.word	.LC20
 1287 034c AC010000 		.word	.LC21
 1288 0350 C4010000 		.word	.LC22
 1289 0354 E0010000 		.word	.LC23
 1290 0358 E4010000 		.word	.LC24
 1291 035c D34D6210 		.word	274877907
 1292 0360 00407F40 		.word	1082081280
 1293 0364 E8010000 		.word	.LC25
 1294 0368 00020000 		.word	.LC26
 1295 036c 14020000 		.word	.LC27
 1296 0370 18020000 		.word	.LC28
 1297 0374 28020000 		.word	.LC29
 1298 0378 2C020000 		.word	.LC30
 1299              	.L41:
 455:notoriOS.c    ****             }else{
 456:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1300              		.loc 1 456 0
 1301 037c 07F1CC03 		add	r3, r7, #204
 1302 0380 41F28832 		movw	r2, #5000
 1303 0384 2D49     		ldr	r1, .L49
 1304 0386 1846     		mov	r0, r3
 1305 0388 FFF7FEFF 		bl	at_write_command
 1306 038c 0346     		mov	r3, r0
 1307 038e 87F84D35 		strb	r3, [r7, #1357]
 1308              	.L42:
 1309              	.LBE6:
 439:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1310              		.loc 1 439 0 discriminator 2
 1311 0392 97F95335 		ldrsb	r3, [r7, #1363]
 1312 0396 DBB2     		uxtb	r3, r3
 1313 0398 0133     		adds	r3, r3, #1
 1314 039a DBB2     		uxtb	r3, r3
 1315 039c 87F85335 		strb	r3, [r7, #1363]
 1316              	.L40:
 439:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1317              		.loc 1 439 0 is_stmt 0 discriminator 1
 1318 03a0 97F95325 		ldrsb	r2, [r7, #1363]
 1319 03a4 97F94C35 		ldrsb	r3, [r7, #1356]
 1320 03a8 9A42     		cmp	r2, r3
 1321 03aa FFF65DAF 		blt	.L43
 1322              	.LBE5:
 457:notoriOS.c    ****             }
 458:notoriOS.c    ****             
 459:notoriOS.c    ****         }
 460:notoriOS.c    ****         
 461:notoriOS.c    ****         // Read received buffer
 462:notoriOS.c    ****         // A good write will return code "OS-OK"
 463:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 464:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 465:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 34


 1323              		.loc 1 465 0 is_stmt 1
 1324 03ae 41F28832 		movw	r2, #5000
 1325 03b2 2349     		ldr	r1, .L49+4
 1326 03b4 2348     		ldr	r0, .L49+8
 1327 03b6 FFF7FEFF 		bl	at_write_command
 1328 03ba 0346     		mov	r3, r0
 1329 03bc 87F84D35 		strb	r3, [r7, #1357]
 466:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 467:notoriOS.c    ****     
 468:notoriOS.c    ****   
 469:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 470:notoriOS.c    ****         if(status == 1u){
 1330              		.loc 1 470 0
 1331 03c0 97F84D35 		ldrb	r3, [r7, #1357]	@ zero_extendqisi2
 1332 03c4 012B     		cmp	r3, #1
 1333 03c6 1BD1     		bne	.L44
 1334              	.LBB7:
 471:notoriOS.c    ****             //get_updated_parameters_from_malcom();
 472:notoriOS.c    ****             // commented out to eliminate automatically assigning as depth when reporting
 473:notoriOS.c    ****             Clear_Data_Stack();
 1335              		.loc 1 473 0
 1336 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 474:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1337              		.loc 1 474 0
 1338 03cc FFF7FEFF 		bl	getTimeStamp
 1339 03d0 0246     		mov	r2, r0
 1340 03d2 1D4B     		ldr	r3, .L49+12
 1341 03d4 1B68     		ldr	r3, [r3]
 1342 03d6 D31A     		subs	r3, r2, r3
 1343 03d8 C7F84835 		str	r3, [r7, #1352]
 475:notoriOS.c    ****             char s_send_time[10];
 476:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1344              		.loc 1 476 0
 1345 03dc 07F59760 		add	r0, r7, #1208
 1346 03e0 D7F84835 		ldr	r3, [r7, #1352]
 1347 03e4 194A     		ldr	r2, .L49+16
 1348 03e6 0A21     		movs	r1, #10
 1349 03e8 FFF7FEFF 		bl	snprintf
 477:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1350              		.loc 1 477 0
 1351 03ec FFF7FEFF 		bl	getTimeStamp
 1352 03f0 0246     		mov	r2, r0
 1353 03f2 07F59763 		add	r3, r7, #1208
 1354 03f6 1946     		mov	r1, r3
 1355 03f8 1548     		ldr	r0, .L49+20
 1356 03fa FFF7FEFF 		bl	pushData
 1357              	.LBE7:
 1358 03fe 03E0     		b	.L45
 1359              	.L44:
 478:notoriOS.c    ****         }else{
 479:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1360              		.loc 1 479 0
 1361 0400 1449     		ldr	r1, .L49+24
 1362 0402 0220     		movs	r0, #2
 1363 0404 FFF7FEFF 		bl	printNotif
 1364              	.L45:
 480:notoriOS.c    ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 35


 481:notoriOS.c    ****          
 482:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 483:notoriOS.c    ****         long network_time = modem_get_network_time();
 1365              		.loc 1 483 0
 1366 0408 FFF7FEFF 		bl	modem_get_network_time
 1367 040c C7F84405 		str	r0, [r7, #1348]
 484:notoriOS.c    ****         if(network_time != 0){
 1368              		.loc 1 484 0
 1369 0410 D7F84435 		ldr	r3, [r7, #1348]
 1370 0414 002B     		cmp	r3, #0
 1371 0416 03D0     		beq	.L46
 485:notoriOS.c    ****            setTime(network_time);
 1372              		.loc 1 485 0
 1373 0418 D7F84405 		ldr	r0, [r7, #1348]
 1374 041c FFF7FEFF 		bl	setTime
 1375              	.L46:
 486:notoriOS.c    ****         }
 487:notoriOS.c    ****         
 488:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 489:notoriOS.c    ****         // If not -- keep the statck and try next time
 490:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 491:notoriOS.c    ****         modem_power_down();
 1376              		.loc 1 491 0
 1377 0420 FFF7FEFF 		bl	modem_power_down
 492:notoriOS.c    ****         
 493:notoriOS.c    ****         try_counter = 0u;
 1378              		.loc 1 493 0
 1379 0424 0C4B     		ldr	r3, .L49+28
 1380 0426 0022     		movs	r2, #0
 1381 0428 1A70     		strb	r2, [r3]
 494:notoriOS.c    ****         return 0u;
 1382              		.loc 1 494 0
 1383 042a 0023     		movs	r3, #0
 1384 042c 00E0     		b	.L33
 1385              	.L36:
 1386              	.LBE2:
 495:notoriOS.c    ****     }
 496:notoriOS.c    ****       
 497:notoriOS.c    ****       return 1u; // Not done yet
 1387              		.loc 1 497 0
 1388 042e 0123     		movs	r3, #1
 1389              	.L33:
 498:notoriOS.c    **** }
 1390              		.loc 1 498 0 discriminator 1
 1391 0430 1846     		mov	r0, r3
 1392 0432 07F25C57 		addw	r7, r7, #1372
 1393              		.cfi_def_cfa_offset 12
 1394 0436 BD46     		mov	sp, r7
 1395              		.cfi_def_cfa_register 13
 1396              		@ sp needed
 1397 0438 90BD     		pop	{r4, r7, pc}
 1398              	.L50:
 1399 043a 00BF     		.align	2
 1400              	.L49:
 1401 043c 3C020000 		.word	.LC31
 1402 0440 44020000 		.word	.LC32
 1403 0444 4C020000 		.word	.LC33
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 36


 1404 0448 00000000 		.word	modem_start_time_stamp
 1405 044c 3C000000 		.word	.LC2
 1406 0450 60020000 		.word	.LC34
 1407 0454 70020000 		.word	.LC35
 1408 0458 00000000 		.word	try_counter
 1409              		.cfi_endproc
 1410              	.LFE74:
 1411              		.size	syncData, .-syncData
 1412              		.section	.text.configureRemoteParams,"ax",%progbits
 1413              		.align	2
 1414              		.global	configureRemoteParams
 1415              		.thumb
 1416              		.thumb_func
 1417              		.type	configureRemoteParams, %function
 1418              	configureRemoteParams:
 1419              	.LFB75:
 499:notoriOS.c    **** 
 500:notoriOS.c    **** // ==============================================
 501:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 502:notoriOS.c    **** // Returns 0 when done
 503:notoriOS.c    **** // ==============================================
 504:notoriOS.c    **** uint8 configureRemoteParams(){
 1420              		.loc 1 504 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424 0000 80B5     		push	{r7, lr}
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 7, -8
 1427              		.cfi_offset 14, -4
 1428 0002 82B0     		sub	sp, sp, #8
 1429              		.cfi_def_cfa_offset 16
 1430 0004 00AF     		add	r7, sp, #0
 1431              		.cfi_def_cfa_register 7
 505:notoriOS.c    ****     
 506:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1432              		.loc 1 506 0
 1433 0006 FFF7FEFF 		bl	modem_get_state
 1434 000a 0346     		mov	r3, r0
 1435 000c 002B     		cmp	r3, #0
 1436 000e 02D1     		bne	.L52
 507:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 508:notoriOS.c    ****         modem_power_up();
 1437              		.loc 1 508 0
 1438 0010 FFF7FEFF 		bl	modem_power_up
 1439 0014 11E0     		b	.L53
 1440              	.L52:
 509:notoriOS.c    ****             
 510:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1441              		.loc 1 510 0
 1442 0016 FFF7FEFF 		bl	modem_get_state
 1443 001a 0346     		mov	r3, r0
 1444 001c 042B     		cmp	r3, #4
 1445 001e 0CD1     		bne	.L53
 1446              	.LBB8:
 511:notoriOS.c    ****         
 512:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 37


 513:notoriOS.c    ****         
 514:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 515:notoriOS.c    ****         long network_time = modem_get_network_time();
 1447              		.loc 1 515 0
 1448 0020 FFF7FEFF 		bl	modem_get_network_time
 1449 0024 7860     		str	r0, [r7, #4]
 516:notoriOS.c    ****         if(network_time != 0){
 1450              		.loc 1 516 0
 1451 0026 7B68     		ldr	r3, [r7, #4]
 1452 0028 002B     		cmp	r3, #0
 1453 002a 02D0     		beq	.L54
 517:notoriOS.c    ****             setTime(network_time);
 1454              		.loc 1 517 0
 1455 002c 7868     		ldr	r0, [r7, #4]
 1456 002e FFF7FEFF 		bl	setTime
 1457              	.L54:
 518:notoriOS.c    ****         }
 519:notoriOS.c    ****         
 520:notoriOS.c    ****         // Get GPS coordinates
 521:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 522:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 523:notoriOS.c    ****         modem_power_down();
 1458              		.loc 1 523 0
 1459 0032 FFF7FEFF 		bl	modem_power_down
 524:notoriOS.c    ****         return 0u;
 1460              		.loc 1 524 0
 1461 0036 0023     		movs	r3, #0
 1462 0038 00E0     		b	.L55
 1463              	.L53:
 1464              	.LBE8:
 525:notoriOS.c    ****         
 526:notoriOS.c    ****     }
 527:notoriOS.c    ****     
 528:notoriOS.c    ****     return 1u;
 1465              		.loc 1 528 0
 1466 003a 0123     		movs	r3, #1
 1467              	.L55:
 529:notoriOS.c    **** }
 1468              		.loc 1 529 0
 1469 003c 1846     		mov	r0, r3
 1470 003e 0837     		adds	r7, r7, #8
 1471              		.cfi_def_cfa_offset 8
 1472 0040 BD46     		mov	sp, r7
 1473              		.cfi_def_cfa_register 13
 1474              		@ sp needed
 1475 0042 80BD     		pop	{r7, pc}
 1476              		.cfi_endproc
 1477              	.LFE75:
 1478              		.size	configureRemoteParams, .-configureRemoteParams
 1479              		.section	.rodata
 1480 029b 00       		.align	2
 1481              	.LC36:
 1482 029c 256C6400 		.ascii	"%ld\000"
 1483              		.align	2
 1484              	.LC37:
 1485 02a0 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1485      6F746978 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 38


 1485      5F646570 
 1485      74683D25 
 1485      7300
 1486 02b2 0000     		.align	2
 1487              	.LC38:
 1488 02b4 6D617862 		.ascii	"maxbotix_depth\000"
 1488      6F746978 
 1488      5F646570 
 1488      746800
 1489 02c3 00       		.align	2
 1490              	.LC39:
 1491 02c4 612B00   		.ascii	"a+\000"
 1492 02c7 00       		.align	2
 1493              	.LC40:
 1494 02c8 206D6178 		.ascii	" maxbotix_depth: \000"
 1494      626F7469 
 1494      785F6465 
 1494      7074683A 
 1494      2000
 1495 02da 0000     		.align	2
 1496              	.LC41:
 1497 02dc 2000     		.ascii	" \000"
 1498 02de 0000     		.align	2
 1499              	.LC42:
 1500 02e0 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1500      64206E6F 
 1500      74206765 
 1500      74207661 
 1500      6C696420 
 1501              		.global	__aeabi_f2d
 1502              		.align	2
 1503              	.LC43:
 1504 030c 252E3266 		.ascii	"%.2f\000"
 1504      00
 1505 0311 000000   		.align	2
 1506              	.LC44:
 1507 0314 765F6261 		.ascii	"v_bat=%s\000"
 1507      743D2573 
 1507      00
 1508 031d 000000   		.align	2
 1509              	.LC45:
 1510 0320 765F6261 		.ascii	"v_bat\000"
 1510      7400
 1511 0326 0000     		.align	2
 1512              	.LC46:
 1513 0328 20766261 		.ascii	" vbat: \000"
 1513      743A2000 
 1514              		.align	2
 1515              	.LC47:
 1516 0330 70726573 		.ascii	"pressure_current=%s\000"
 1516      73757265 
 1516      5F637572 
 1516      72656E74 
 1516      3D257300 
 1517              		.align	2
 1518              	.LC48:
 1519 0344 70726573 		.ascii	"pressure_current\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 39


 1519      73757265 
 1519      5F637572 
 1519      72656E74 
 1519      00
 1520 0355 000000   		.align	2
 1521              	.LC49:
 1522 0358 20707265 		.ascii	" pressure_current: \000"
 1522      73737572 
 1522      655F6375 
 1522      7272656E 
 1522      743A2000 
 1523              		.align	2
 1524              	.LC50:
 1525 036c 70726573 		.ascii	"pressure_depth=%s\000"
 1525      73757265 
 1525      5F646570 
 1525      74683D25 
 1525      7300
 1526 037e 0000     		.align	2
 1527              	.LC51:
 1528 0380 70726573 		.ascii	"pressure_depth\000"
 1528      73757265 
 1528      5F646570 
 1528      746800
 1529 038f 00       		.align	2
 1530              	.LC52:
 1531 0390 20707265 		.ascii	" pressure_depth: \000"
 1531      73737572 
 1531      655F6465 
 1531      7074683A 
 1531      2000
 1532 03a2 0000     		.align	2
 1533              	.LC53:
 1534 03a4 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1534      64206E6F 
 1534      74206765 
 1534      74207661 
 1534      6C696420 
 1535              		.section	.text.makeMeasurements,"ax",%progbits
 1536              		.align	2
 1537              		.global	makeMeasurements
 1538              		.thumb
 1539              		.thumb_func
 1540              		.type	makeMeasurements, %function
 1541              	makeMeasurements:
 1542              	.LFB76:
 530:notoriOS.c    **** 
 531:notoriOS.c    **** 
 532:notoriOS.c    **** // ==============================================
 533:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 534:notoriOS.c    **** // Returns 0 when finished
 535:notoriOS.c    **** // ==============================================
 536:notoriOS.c    **** uint8 makeMeasurements(){
 1543              		.loc 1 536 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 128
 1546              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 40


 1547 0000 B0B5     		push	{r4, r5, r7, lr}
 1548              		.cfi_def_cfa_offset 16
 1549              		.cfi_offset 4, -16
 1550              		.cfi_offset 5, -12
 1551              		.cfi_offset 7, -8
 1552              		.cfi_offset 14, -4
 1553 0002 A4B0     		sub	sp, sp, #144
 1554              		.cfi_def_cfa_offset 160
 1555 0004 04AF     		add	r7, sp, #16
 1556              		.cfi_def_cfa 7, 144
 537:notoriOS.c    ****     
 538:notoriOS.c    ****     // Get clock time and save to timeStamp
 539:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1557              		.loc 1 539 0
 1558 0006 FFF7FEFF 		bl	getTimeStamp
 1559 000a F867     		str	r0, [r7, #124]
 540:notoriOS.c    ****     char c_timeStamp[32];
 541:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1560              		.loc 1 541 0
 1561 000c 07F15C00 		add	r0, r7, #92
 1562 0010 FB6F     		ldr	r3, [r7, #124]
 1563 0012 824A     		ldr	r2, .L64
 1564 0014 2021     		movs	r1, #32
 1565 0016 FFF7FEFF 		bl	snprintf
 542:notoriOS.c    ****     
 543:notoriOS.c    ****     // Holds string for value that will be written 
 544:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 545:notoriOS.c    ****     
 546:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 547:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1566              		.loc 1 547 0
 1567 001a 814B     		ldr	r3, .L64+4
 1568 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1569 001e 002B     		cmp	r3, #0
 1570 0020 3BD1     		bne	.L57
 1571              	.LBB9:
 548:notoriOS.c    ****         
 549:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 550:notoriOS.c    ****         level_sensor_t m_level_sensor;
 551:notoriOS.c    ****         
 552:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 553:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1572              		.loc 1 553 0
 1573 0022 07F11003 		add	r3, r7, #16
 1574 0026 1846     		mov	r0, r3
 1575 0028 FFF7FEFF 		bl	level_sensor_take_reading
 554:notoriOS.c    ****     
 555:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 556:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1576              		.loc 1 556 0
 1577 002c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1578 0030 002B     		cmp	r3, #0
 1579 0032 2ED0     		beq	.L58
 557:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1580              		.loc 1 557 0
 1581 0034 B7F92630 		ldrsh	r3, [r7, #38]
 1582 0038 07F14800 		add	r0, r7, #72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 41


 1583 003c 794A     		ldr	r2, .L64+8
 1584 003e 1421     		movs	r1, #20
 1585 0040 FFF7FEFF 		bl	snprintf
 558:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1586              		.loc 1 558 0
 1587 0044 07F14803 		add	r3, r7, #72
 1588 0048 1A46     		mov	r2, r3
 1589 004a 7749     		ldr	r1, .L64+12
 1590 004c 0020     		movs	r0, #0
 1591 004e FFF7FEFF 		bl	printNotif
 559:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1592              		.loc 1 559 0
 1593 0052 07F14803 		add	r3, r7, #72
 1594 0056 FA6F     		ldr	r2, [r7, #124]
 1595 0058 1946     		mov	r1, r3
 1596 005a 7448     		ldr	r0, .L64+16
 1597 005c FFF7FEFF 		bl	pushData
 560:notoriOS.c    ****             
 561:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 562:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1598              		.loc 1 562 0
 1599 0060 07F15C03 		add	r3, r7, #92
 1600 0064 1A46     		mov	r2, r3
 1601 0066 7249     		ldr	r1, .L64+20
 1602 0068 7248     		ldr	r0, .L64+24
 1603 006a FFF7FEFF 		bl	SD_write
 563:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1604              		.loc 1 563 0
 1605 006e 724A     		ldr	r2, .L64+28
 1606 0070 6F49     		ldr	r1, .L64+20
 1607 0072 7048     		ldr	r0, .L64+24
 1608 0074 FFF7FEFF 		bl	SD_write
 564:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1609              		.loc 1 564 0
 1610 0078 07F14803 		add	r3, r7, #72
 1611 007c 1A46     		mov	r2, r3
 1612 007e 6C49     		ldr	r1, .L64+20
 1613 0080 6C48     		ldr	r0, .L64+24
 1614 0082 FFF7FEFF 		bl	SD_write
 565:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1615              		.loc 1 565 0
 1616 0086 6D4A     		ldr	r2, .L64+32
 1617 0088 6949     		ldr	r1, .L64+20
 1618 008a 6A48     		ldr	r0, .L64+24
 1619 008c FFF7FEFF 		bl	SD_write
 1620 0090 03E0     		b	.L57
 1621              	.L58:
 566:notoriOS.c    ****         }else{
 567:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1622              		.loc 1 567 0
 1623 0092 6B49     		ldr	r1, .L64+36
 1624 0094 0220     		movs	r0, #2
 1625 0096 FFF7FEFF 		bl	printNotif
 1626              	.L57:
 1627              	.LBE9:
 568:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 569:notoriOS.c    ****         }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 42


 570:notoriOS.c    ****     }
 571:notoriOS.c    ****     
 572:notoriOS.c    ****     
 573:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 574:notoriOS.c    ****     voltage_t m_voltage;
 575:notoriOS.c    ****     
 576:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 577:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1628              		.loc 1 577 0
 1629 009a 07F12C03 		add	r3, r7, #44
 1630 009e 1846     		mov	r0, r3
 1631 00a0 FFF7FEFF 		bl	voltage_take_readings
 578:notoriOS.c    ****     
 579:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 580:notoriOS.c    ****     if(m_voltage.valid){
 1632              		.loc 1 580 0
 1633 00a4 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 1634 00a8 002B     		cmp	r3, #0
 1635 00aa 00F0AE80 		beq	.L60
 581:notoriOS.c    ****         // battery voltage data
 582:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1636              		.loc 1 582 0
 1637 00ae FB6A     		ldr	r3, [r7, #44]	@ float
 1638 00b0 1846     		mov	r0, r3
 1639 00b2 FFF7FEFF 		bl	__aeabi_f2d
 1640 00b6 0346     		mov	r3, r0
 1641 00b8 0C46     		mov	r4, r1
 1642 00ba 07F14800 		add	r0, r7, #72
 1643 00be CDE90034 		strd	r3, [sp]
 1644 00c2 604A     		ldr	r2, .L64+40
 1645 00c4 1421     		movs	r1, #20
 1646 00c6 FFF7FEFF 		bl	snprintf
 583:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1647              		.loc 1 583 0
 1648 00ca 07F14803 		add	r3, r7, #72
 1649 00ce 1A46     		mov	r2, r3
 1650 00d0 5D49     		ldr	r1, .L64+44
 1651 00d2 0020     		movs	r0, #0
 1652 00d4 FFF7FEFF 		bl	printNotif
 584:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1653              		.loc 1 584 0
 1654 00d8 07F14803 		add	r3, r7, #72
 1655 00dc FA6F     		ldr	r2, [r7, #124]
 1656 00de 1946     		mov	r1, r3
 1657 00e0 5A48     		ldr	r0, .L64+48
 1658 00e2 FFF7FEFF 		bl	pushData
 585:notoriOS.c    ****         
 586:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 587:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1659              		.loc 1 587 0
 1660 00e6 554A     		ldr	r2, .L64+32
 1661 00e8 5149     		ldr	r1, .L64+20
 1662 00ea 5248     		ldr	r0, .L64+24
 1663 00ec FFF7FEFF 		bl	SD_write
 588:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1664              		.loc 1 588 0
 1665 00f0 07F15C03 		add	r3, r7, #92
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 43


 1666 00f4 1A46     		mov	r2, r3
 1667 00f6 4E49     		ldr	r1, .L64+20
 1668 00f8 4E48     		ldr	r0, .L64+24
 1669 00fa FFF7FEFF 		bl	SD_write
 589:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1670              		.loc 1 589 0
 1671 00fe 544A     		ldr	r2, .L64+52
 1672 0100 4B49     		ldr	r1, .L64+20
 1673 0102 4C48     		ldr	r0, .L64+24
 1674 0104 FFF7FEFF 		bl	SD_write
 590:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1675              		.loc 1 590 0
 1676 0108 07F14803 		add	r3, r7, #72
 1677 010c 1A46     		mov	r2, r3
 1678 010e 4849     		ldr	r1, .L64+20
 1679 0110 4848     		ldr	r0, .L64+24
 1680 0112 FFF7FEFF 		bl	SD_write
 591:notoriOS.c    ****         
 592:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 593:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1681              		.loc 1 593 0
 1682 0116 424B     		ldr	r3, .L64+4
 1683 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1684 011a 012B     		cmp	r3, #1
 1685 011c 79D1     		bne	.L62
 1686              	.LBB10:
 594:notoriOS.c    ****             
 595:notoriOS.c    ****             // pressure transducer voltage (V) data
 596:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 597:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 598:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 599:notoriOS.c    ****             
 600:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 601:notoriOS.c    ****             pressure_t m_pressure;
 602:notoriOS.c    ****             
 603:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 604:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1687              		.loc 1 604 0
 1688 011e 3D46     		mov	r5, r7
 1689 0120 6C46     		mov	r4, sp
 1690 0122 07F13803 		add	r3, r7, #56
 1691 0126 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1692 0128 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1693 012c 07F12C03 		add	r3, r7, #44
 1694 0130 0ECB     		ldmia	r3, {r1, r2, r3}
 1695 0132 2846     		mov	r0, r5
 1696 0134 FFF7FEFF 		bl	pressure_calculations
 605:notoriOS.c    ****             
 606:notoriOS.c    ****             // pressure transducer current (mA) data
 607:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1697              		.loc 1 607 0
 1698 0138 BB68     		ldr	r3, [r7, #8]	@ float
 1699 013a 1846     		mov	r0, r3
 1700 013c FFF7FEFF 		bl	__aeabi_f2d
 1701 0140 0346     		mov	r3, r0
 1702 0142 0C46     		mov	r4, r1
 1703 0144 07F14800 		add	r0, r7, #72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 44


 1704 0148 CDE90034 		strd	r3, [sp]
 1705 014c 3D4A     		ldr	r2, .L64+40
 1706 014e 1421     		movs	r1, #20
 1707 0150 FFF7FEFF 		bl	snprintf
 608:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1708              		.loc 1 608 0
 1709 0154 07F14803 		add	r3, r7, #72
 1710 0158 1A46     		mov	r2, r3
 1711 015a 3E49     		ldr	r1, .L64+56
 1712 015c 0020     		movs	r0, #0
 1713 015e FFF7FEFF 		bl	printNotif
 609:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1714              		.loc 1 609 0
 1715 0162 07F14803 		add	r3, r7, #72
 1716 0166 FA6F     		ldr	r2, [r7, #124]
 1717 0168 1946     		mov	r1, r3
 1718 016a 3B48     		ldr	r0, .L64+60
 1719 016c FFF7FEFF 		bl	pushData
 610:notoriOS.c    ****             
 611:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 612:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1720              		.loc 1 612 0
 1721 0170 324A     		ldr	r2, .L64+32
 1722 0172 2F49     		ldr	r1, .L64+20
 1723 0174 2F48     		ldr	r0, .L64+24
 1724 0176 FFF7FEFF 		bl	SD_write
 613:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1725              		.loc 1 613 0
 1726 017a 07F15C03 		add	r3, r7, #92
 1727 017e 1A46     		mov	r2, r3
 1728 0180 2B49     		ldr	r1, .L64+20
 1729 0182 2C48     		ldr	r0, .L64+24
 1730 0184 FFF7FEFF 		bl	SD_write
 614:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1731              		.loc 1 614 0
 1732 0188 344A     		ldr	r2, .L64+64
 1733 018a 2949     		ldr	r1, .L64+20
 1734 018c 2948     		ldr	r0, .L64+24
 1735 018e FFF7FEFF 		bl	SD_write
 615:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1736              		.loc 1 615 0
 1737 0192 07F14803 		add	r3, r7, #72
 1738 0196 1A46     		mov	r2, r3
 1739 0198 2549     		ldr	r1, .L64+20
 1740 019a 2648     		ldr	r0, .L64+24
 1741 019c FFF7FEFF 		bl	SD_write
 616:notoriOS.c    ****             
 617:notoriOS.c    ****             // pressure transducer depth (ft) data
 618:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1742              		.loc 1 618 0
 1743 01a0 FB68     		ldr	r3, [r7, #12]	@ float
 1744 01a2 1846     		mov	r0, r3
 1745 01a4 FFF7FEFF 		bl	__aeabi_f2d
 1746 01a8 0346     		mov	r3, r0
 1747 01aa 0C46     		mov	r4, r1
 1748 01ac 07F14800 		add	r0, r7, #72
 1749 01b0 CDE90034 		strd	r3, [sp]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 45


 1750 01b4 234A     		ldr	r2, .L64+40
 1751 01b6 1421     		movs	r1, #20
 1752 01b8 FFF7FEFF 		bl	snprintf
 619:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1753              		.loc 1 619 0
 1754 01bc 07F14803 		add	r3, r7, #72
 1755 01c0 1A46     		mov	r2, r3
 1756 01c2 2749     		ldr	r1, .L64+68
 1757 01c4 0020     		movs	r0, #0
 1758 01c6 FFF7FEFF 		bl	printNotif
 620:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1759              		.loc 1 620 0
 1760 01ca 07F14803 		add	r3, r7, #72
 1761 01ce FA6F     		ldr	r2, [r7, #124]
 1762 01d0 1946     		mov	r1, r3
 1763 01d2 2448     		ldr	r0, .L64+72
 1764 01d4 FFF7FEFF 		bl	pushData
 621:notoriOS.c    ****             
 622:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 623:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1765              		.loc 1 623 0
 1766 01d8 184A     		ldr	r2, .L64+32
 1767 01da 1549     		ldr	r1, .L64+20
 1768 01dc 1548     		ldr	r0, .L64+24
 1769 01de FFF7FEFF 		bl	SD_write
 624:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1770              		.loc 1 624 0
 1771 01e2 07F15C03 		add	r3, r7, #92
 1772 01e6 1A46     		mov	r2, r3
 1773 01e8 1149     		ldr	r1, .L64+20
 1774 01ea 1248     		ldr	r0, .L64+24
 1775 01ec FFF7FEFF 		bl	SD_write
 625:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1776              		.loc 1 625 0
 1777 01f0 1D4A     		ldr	r2, .L64+76
 1778 01f2 0F49     		ldr	r1, .L64+20
 1779 01f4 0F48     		ldr	r0, .L64+24
 1780 01f6 FFF7FEFF 		bl	SD_write
 626:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1781              		.loc 1 626 0
 1782 01fa 07F14803 		add	r3, r7, #72
 1783 01fe 1A46     		mov	r2, r3
 1784 0200 0B49     		ldr	r1, .L64+20
 1785 0202 0C48     		ldr	r0, .L64+24
 1786 0204 FFF7FEFF 		bl	SD_write
 1787 0208 03E0     		b	.L62
 1788              	.L60:
 1789              	.LBE10:
 627:notoriOS.c    ****         }    
 628:notoriOS.c    ****     }else{
 629:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1790              		.loc 1 629 0
 1791 020a 1849     		ldr	r1, .L64+80
 1792 020c 0220     		movs	r0, #2
 1793 020e FFF7FEFF 		bl	printNotif
 1794              	.L62:
 630:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 46


 631:notoriOS.c    ****     
 632:notoriOS.c    ****     return 0u;
 1795              		.loc 1 632 0
 1796 0212 0023     		movs	r3, #0
 633:notoriOS.c    **** }
 1797              		.loc 1 633 0
 1798 0214 1846     		mov	r0, r3
 1799 0216 8037     		adds	r7, r7, #128
 1800              		.cfi_def_cfa_offset 16
 1801 0218 BD46     		mov	sp, r7
 1802              		.cfi_def_cfa_register 13
 1803              		@ sp needed
 1804 021a B0BD     		pop	{r4, r5, r7, pc}
 1805              	.L65:
 1806              		.align	2
 1807              	.L64:
 1808 021c 9C020000 		.word	.LC36
 1809 0220 00000000 		.word	updatable_parameters
 1810 0224 3C000000 		.word	.LC2
 1811 0228 A0020000 		.word	.LC37
 1812 022c B4020000 		.word	.LC38
 1813 0230 C4020000 		.word	.LC39
 1814 0234 00000000 		.word	Data_fileName
 1815 0238 C8020000 		.word	.LC40
 1816 023c DC020000 		.word	.LC41
 1817 0240 E0020000 		.word	.LC42
 1818 0244 0C030000 		.word	.LC43
 1819 0248 14030000 		.word	.LC44
 1820 024c 20030000 		.word	.LC45
 1821 0250 28030000 		.word	.LC46
 1822 0254 30030000 		.word	.LC47
 1823 0258 44030000 		.word	.LC48
 1824 025c 58030000 		.word	.LC49
 1825 0260 6C030000 		.word	.LC50
 1826 0264 80030000 		.word	.LC51
 1827 0268 90030000 		.word	.LC52
 1828 026c A4030000 		.word	.LC53
 1829              		.cfi_endproc
 1830              	.LFE76:
 1831              		.size	makeMeasurements, .-makeMeasurements
 1832              		.section	.rodata
 1833 03cb 00       		.align	2
 1834              	.LC54:
 1835 03cc 4572726F 		.ascii	"Error setting system time.\000"
 1835      72207365 
 1835      7474696E 
 1835      67207379 
 1835      7374656D 
 1836              		.section	.text.setTime,"ax",%progbits
 1837              		.align	2
 1838              		.global	setTime
 1839              		.thumb
 1840              		.thumb_func
 1841              		.type	setTime, %function
 1842              	setTime:
 1843              	.LFB77:
 634:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 47


 635:notoriOS.c    **** // ==============================================
 636:notoriOS.c    **** // Set the system time
 637:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 638:notoriOS.c    **** // ==============================================
 639:notoriOS.c    **** uint8 setTime(long timeStamp){
 1844              		.loc 1 639 0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 24
 1847              		@ frame_needed = 1, uses_anonymous_args = 0
 1848 0000 80B5     		push	{r7, lr}
 1849              		.cfi_def_cfa_offset 8
 1850              		.cfi_offset 7, -8
 1851              		.cfi_offset 14, -4
 1852 0002 86B0     		sub	sp, sp, #24
 1853              		.cfi_def_cfa_offset 32
 1854 0004 00AF     		add	r7, sp, #0
 1855              		.cfi_def_cfa_register 7
 1856 0006 7860     		str	r0, [r7, #4]
 640:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 641:notoriOS.c    ****     if(timeStamp <=0){
 1857              		.loc 1 641 0
 1858 0008 7B68     		ldr	r3, [r7, #4]
 1859 000a 002B     		cmp	r3, #0
 1860 000c 05DC     		bgt	.L67
 642:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1861              		.loc 1 642 0
 1862 000e 1849     		ldr	r1, .L69
 1863 0010 0220     		movs	r0, #2
 1864 0012 FFF7FEFF 		bl	printNotif
 643:notoriOS.c    ****         return 0;  
 1865              		.loc 1 643 0
 1866 0016 0023     		movs	r3, #0
 1867 0018 25E0     		b	.L68
 1868              	.L67:
 644:notoriOS.c    ****     }
 645:notoriOS.c    ****     // Create a new pointer t of data structure tm
 646:notoriOS.c    ****     struct tm * t;
 647:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 648:notoriOS.c    ****     t = gmtime(&timeStamp);
 1869              		.loc 1 648 0
 1870 001a 3B1D     		adds	r3, r7, #4
 1871 001c 1846     		mov	r0, r3
 1872 001e FFF7FEFF 		bl	gmtime
 1873 0022 7861     		str	r0, [r7, #20]
 649:notoriOS.c    ****     
 650:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 651:notoriOS.c    ****     RTC_TIME_DATE localTime;
 652:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1874              		.loc 1 652 0
 1875 0024 7B69     		ldr	r3, [r7, #20]
 1876 0026 1B68     		ldr	r3, [r3]
 1877 0028 DBB2     		uxtb	r3, r3
 1878 002a 3B72     		strb	r3, [r7, #8]
 653:notoriOS.c    ****     localTime.Min = t->tm_min;
 1879              		.loc 1 653 0
 1880 002c 7B69     		ldr	r3, [r7, #20]
 1881 002e 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 48


 1882 0030 DBB2     		uxtb	r3, r3
 1883 0032 7B72     		strb	r3, [r7, #9]
 654:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1884              		.loc 1 654 0
 1885 0034 7B69     		ldr	r3, [r7, #20]
 1886 0036 9B68     		ldr	r3, [r3, #8]
 1887 0038 DBB2     		uxtb	r3, r3
 1888 003a BB72     		strb	r3, [r7, #10]
 655:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1889              		.loc 1 655 0
 1890 003c 7B69     		ldr	r3, [r7, #20]
 1891 003e 5B69     		ldr	r3, [r3, #20]
 1892 0040 9BB2     		uxth	r3, r3
 1893 0042 03F26C73 		addw	r3, r3, #1900
 1894 0046 9BB2     		uxth	r3, r3
 1895 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 656:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1896              		.loc 1 656 0
 1897 004a 7B69     		ldr	r3, [r7, #20]
 1898 004c 1B69     		ldr	r3, [r3, #16]
 1899 004e DBB2     		uxtb	r3, r3
 1900 0050 3B74     		strb	r3, [r7, #16]
 657:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1901              		.loc 1 657 0
 1902 0052 7B69     		ldr	r3, [r7, #20]
 1903 0054 DB68     		ldr	r3, [r3, #12]
 1904 0056 DBB2     		uxtb	r3, r3
 1905 0058 3B73     		strb	r3, [r7, #12]
 658:notoriOS.c    **** 
 659:notoriOS.c    ****     // Writes time and date values as current time and date.
 660:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1906              		.loc 1 660 0
 1907 005a 07F10803 		add	r3, r7, #8
 1908 005e 1846     		mov	r0, r3
 1909 0060 FFF7FEFF 		bl	RTC_WriteTime
 661:notoriOS.c    ****     
 662:notoriOS.c    ****     // Return 1 when the system time was set properly.
 663:notoriOS.c    ****     return 1;
 1910              		.loc 1 663 0
 1911 0064 0123     		movs	r3, #1
 1912              	.L68:
 664:notoriOS.c    **** }
 1913              		.loc 1 664 0
 1914 0066 1846     		mov	r0, r3
 1915 0068 1837     		adds	r7, r7, #24
 1916              		.cfi_def_cfa_offset 8
 1917 006a BD46     		mov	sp, r7
 1918              		.cfi_def_cfa_register 13
 1919              		@ sp needed
 1920 006c 80BD     		pop	{r7, pc}
 1921              	.L70:
 1922 006e 00BF     		.align	2
 1923              	.L69:
 1924 0070 CC030000 		.word	.LC54
 1925              		.cfi_endproc
 1926              	.LFE77:
 1927              		.size	setTime, .-setTime
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 49


 1928              		.section	.rodata
 1929 03e7 00       		.align	2
 1930              	.LC55:
 1931 03e8 75706772 		.ascii	"upgrade.hex\000"
 1931      6164652E 
 1931      68657800 
 1932              		.section	.text.upgraded,"ax",%progbits
 1933              		.align	2
 1934              		.global	upgraded
 1935              		.thumb
 1936              		.thumb_func
 1937              		.type	upgraded, %function
 1938              	upgraded:
 1939              	.LFB78:
 665:notoriOS.c    **** 
 666:notoriOS.c    **** //downloads and stores files on SD card
 667:notoriOS.c    **** 
 668:notoriOS.c    **** 
 669:notoriOS.c    **** 
 670:notoriOS.c    **** // ==============================================
 671:notoriOS.c    **** // Will they love it, will they hate it
 672:notoriOS.c    **** // Never fade it, I evade it
 673:notoriOS.c    **** // Cause I never really want to complicate it
 674:notoriOS.c    **** //      - Logic, Upgraded (2015)
 675:notoriOS.c    **** //
 676:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 677:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 678:notoriOS.c    **** // ==============================================
 679:notoriOS.c    **** 
 680:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 1940              		.loc 1 680 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 232
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0000 80B5     		push	{r7, lr}
 1945              		.cfi_def_cfa_offset 8
 1946              		.cfi_offset 7, -8
 1947              		.cfi_offset 14, -4
 1948 0002 C0B0     		sub	sp, sp, #256
 1949              		.cfi_def_cfa_offset 264
 1950 0004 06AF     		add	r7, sp, #24
 1951              		.cfi_def_cfa 7, 240
 1952 0006 F860     		str	r0, [r7, #12]
 1953 0008 B960     		str	r1, [r7, #8]
 1954 000a 7A60     		str	r2, [r7, #4]
 681:notoriOS.c    ****     
 682:notoriOS.c    ****     uint8 upgrade_status = 0;
 1955              		.loc 1 682 0
 1956 000c 0023     		movs	r3, #0
 1957 000e 87F8E730 		strb	r3, [r7, #231]
 683:notoriOS.c    ****     
 684:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 685:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 1958              		.loc 1 685 0
 1959 0012 384B     		ldr	r3, .L75
 1960 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1961 0016 042B     		cmp	r3, #4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 50


 1962 0018 02D0     		beq	.L72
 686:notoriOS.c    ****         return upgrade_status;//where valid = 0
 1963              		.loc 1 686 0
 1964 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 1965 001e 65E0     		b	.L74
 1966              	.L72:
 687:notoriOS.c    ****     }
 688:notoriOS.c    ****     
 689:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 1967              		.loc 1 689 0
 1968 0020 354A     		ldr	r2, .L75+4
 1969 0022 07F1D803 		add	r3, r7, #216
 1970 0026 07CA     		ldmia	r2, {r0, r1, r2}
 1971 0028 83E80700 		stmia	r3, {r0, r1, r2}
 690:notoriOS.c    ****     //delete file, if one exisits already
 691:notoriOS.c    ****     SD_rmfile(fileName);
 1972              		.loc 1 691 0
 1973 002c 07F1D803 		add	r3, r7, #216
 1974 0030 1846     		mov	r0, r3
 1975 0032 FFF7FEFF 		bl	SD_rmfile
 692:notoriOS.c    ****     
 693:notoriOS.c    ****     // Create http request
 694:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 1976              		.loc 1 694 0
 1977 0036 314B     		ldr	r3, .L75+8
 1978 0038 0593     		str	r3, [sp, #20]
 1979 003a 0023     		movs	r3, #0
 1980 003c 0493     		str	r3, [sp, #16]
 1981 003e 304B     		ldr	r3, .L75+12
 1982 0040 0393     		str	r3, [sp, #12]
 1983 0042 304B     		ldr	r3, .L75+16
 1984 0044 0293     		str	r3, [sp, #8]
 1985 0046 304B     		ldr	r3, .L75+20
 1986 0048 0193     		str	r3, [sp, #4]
 1987 004a BB68     		ldr	r3, [r7, #8]
 1988 004c 0093     		str	r3, [sp]
 1989 004e 7B68     		ldr	r3, [r7, #4]
 1990 0050 FA68     		ldr	r2, [r7, #12]
 1991 0052 2E49     		ldr	r1, .L75+24
 1992 0054 2E48     		ldr	r0, .L75+28
 1993 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 695:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1994              		.loc 1 695 0
 1995 005a 2D4A     		ldr	r2, .L75+28
 1996 005c 2D49     		ldr	r1, .L75+32
 1997 005e 0020     		movs	r0, #0
 1998 0060 FFF7FEFF 		bl	printNotif
 696:notoriOS.c    ****     // Create array portConfig of size 200 characters
 697:notoriOS.c    ****     char portConfig[200];
 698:notoriOS.c    ****     // Print port configurations
 699:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 1999              		.loc 1 699 0
 2000 0064 07F11000 		add	r0, r7, #16
 2001 0068 FB68     		ldr	r3, [r7, #12]
 2002 006a 0093     		str	r3, [sp]
 2003 006c BB68     		ldr	r3, [r7, #8]
 2004 006e 2A4A     		ldr	r2, .L75+36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 51


 2005 0070 C821     		movs	r1, #200
 2006 0072 FFF7FEFF 		bl	snprintf
 700:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2007              		.loc 1 700 0
 2008 0076 07F11003 		add	r3, r7, #16
 2009 007a 1A46     		mov	r2, r3
 2010 007c 2749     		ldr	r1, .L75+40
 2011 007e 0020     		movs	r0, #0
 2012 0080 FFF7FEFF 		bl	printNotif
 701:notoriOS.c    ****     // AT command to configure the port
 702:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2013              		.loc 1 702 0
 2014 0084 07F11003 		add	r3, r7, #16
 2015 0088 42F21072 		movw	r2, #10000
 2016 008c 2449     		ldr	r1, .L75+44
 2017 008e 1846     		mov	r0, r3
 2018 0090 FFF7FEFF 		bl	at_write_command
 2019 0094 0346     		mov	r3, r0
 2020 0096 87F8E730 		strb	r3, [r7, #231]
 703:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 704:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 705:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2021              		.loc 1 705 0
 2022 009a 4FF47A72 		mov	r2, #1000
 2023 009e 2149     		ldr	r1, .L75+48
 2024 00a0 2148     		ldr	r0, .L75+52
 2025 00a2 FFF7FEFF 		bl	at_write_command
 2026 00a6 0346     		mov	r3, r0
 2027 00a8 87F8E730 		strb	r3, [r7, #231]
 706:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 707:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2028              		.loc 1 707 0
 2029 00ac 1848     		ldr	r0, .L75+28
 2030 00ae FFF7FEFF 		bl	strlen
 2031 00b2 0346     		mov	r3, r0
 2032 00b4 1A46     		mov	r2, r3
 2033 00b6 164B     		ldr	r3, .L75+28
 2034 00b8 1344     		add	r3, r3, r2
 2035 00ba 1C49     		ldr	r1, .L75+56
 2036 00bc 1A46     		mov	r2, r3
 2037 00be 0B46     		mov	r3, r1
 2038 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2039 00c2 1380     		strh	r3, [r2]	@ unaligned
 708:notoriOS.c    ****     // AT command to send http request
 709:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2040              		.loc 1 709 0
 2041 00c4 41F28832 		movw	r2, #5000
 2042 00c8 1549     		ldr	r1, .L75+44
 2043 00ca 1148     		ldr	r0, .L75+28
 2044 00cc FFF7FEFF 		bl	at_write_command
 2045 00d0 0346     		mov	r3, r0
 2046 00d2 87F8E730 		strb	r3, [r7, #231]
 710:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 711:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 712:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2047              		.loc 1 712 0
 2048 00d6 41F28832 		movw	r2, #5000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 52


 2049 00da 1549     		ldr	r1, .L75+60
 2050 00dc 1548     		ldr	r0, .L75+64
 2051 00de FFF7FEFF 		bl	at_write_command
 2052 00e2 0346     		mov	r3, r0
 2053 00e4 87F8E730 		strb	r3, [r7, #231]
 713:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 714:notoriOS.c    ****     
 715:notoriOS.c    ****     
 716:notoriOS.c    ****     return upgrade_status;
 2054              		.loc 1 716 0
 2055 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2056              	.L74:
 717:notoriOS.c    ****     
 718:notoriOS.c    **** }
 2057              		.loc 1 718 0 discriminator 1
 2058 00ec 1846     		mov	r0, r3
 2059 00ee E837     		adds	r7, r7, #232
 2060              		.cfi_def_cfa_offset 8
 2061 00f0 BD46     		mov	sp, r7
 2062              		.cfi_def_cfa_register 13
 2063              		@ sp needed
 2064 00f2 80BD     		pop	{r7, pc}
 2065              	.L76:
 2066              		.align	2
 2067              	.L75:
 2068 00f4 00000000 		.word	modem_state
 2069 00f8 E8030000 		.word	.LC55
 2070 00fc 94010000 		.word	.LC17
 2071 0100 98010000 		.word	.LC18
 2072 0104 9C010000 		.word	.LC19
 2073 0108 A4010000 		.word	.LC20
 2074 010c 00000000 		.word	http_body
 2075 0110 00000000 		.word	http_request
 2076 0114 AC010000 		.word	.LC21
 2077 0118 C4010000 		.word	.LC22
 2078 011c E0010000 		.word	.LC23
 2079 0120 E4010000 		.word	.LC24
 2080 0124 14020000 		.word	.LC27
 2081 0128 18020000 		.word	.LC28
 2082 012c 28020000 		.word	.LC29
 2083 0130 44020000 		.word	.LC32
 2084 0134 4C020000 		.word	.LC33
 2085              		.cfi_endproc
 2086              	.LFE78:
 2087              		.size	upgraded, .-upgraded
 2088              		.text
 2089              	.Letext0:
 2090              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2091              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2092              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2093              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2094              		.file 6 "testing.h"
 2095              		.file 7 "level_sensor.h"
 2096              		.file 8 "voltages.h"
 2097              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2098              		.file 10 "data.h"
 2099              		.file 11 "modem.h"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 53


 2100              		.file 12 "notoriOS.h"
 2101              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2102              		.section	.debug_info,"",%progbits
 2103              	.Ldebug_info0:
 2104 0000 360C0000 		.4byte	0xc36
 2105 0004 0400     		.2byte	0x4
 2106 0006 00000000 		.4byte	.Ldebug_abbrev0
 2107 000a 04       		.byte	0x4
 2108 000b 01       		.uleb128 0x1
 2109 000c 74000000 		.4byte	.LASF163
 2110 0010 0C       		.byte	0xc
 2111 0011 E7070000 		.4byte	.LASF164
 2112 0015 E7040000 		.4byte	.LASF165
 2113 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2114 001d 00000000 		.4byte	0
 2115 0021 00000000 		.4byte	.Ldebug_line0
 2116 0025 02       		.uleb128 0x2
 2117 0026 01       		.byte	0x1
 2118 0027 06       		.byte	0x6
 2119 0028 45000000 		.4byte	.LASF0
 2120 002c 02       		.uleb128 0x2
 2121 002d 01       		.byte	0x1
 2122 002e 08       		.byte	0x8
 2123 002f DF050000 		.4byte	.LASF1
 2124 0033 02       		.uleb128 0x2
 2125 0034 02       		.byte	0x2
 2126 0035 05       		.byte	0x5
 2127 0036 1F040000 		.4byte	.LASF2
 2128 003a 02       		.uleb128 0x2
 2129 003b 02       		.byte	0x2
 2130 003c 07       		.byte	0x7
 2131 003d 7F070000 		.4byte	.LASF3
 2132 0041 03       		.uleb128 0x3
 2133 0042 3A070000 		.4byte	.LASF9
 2134 0046 02       		.byte	0x2
 2135 0047 3F       		.byte	0x3f
 2136 0048 4C000000 		.4byte	0x4c
 2137 004c 02       		.uleb128 0x2
 2138 004d 04       		.byte	0x4
 2139 004e 05       		.byte	0x5
 2140 004f 09020000 		.4byte	.LASF4
 2141 0053 02       		.uleb128 0x2
 2142 0054 04       		.byte	0x4
 2143 0055 07       		.byte	0x7
 2144 0056 5C030000 		.4byte	.LASF5
 2145 005a 02       		.uleb128 0x2
 2146 005b 08       		.byte	0x8
 2147 005c 05       		.byte	0x5
 2148 005d 64010000 		.4byte	.LASF6
 2149 0061 02       		.uleb128 0x2
 2150 0062 08       		.byte	0x8
 2151 0063 07       		.byte	0x7
 2152 0064 13010000 		.4byte	.LASF7
 2153 0068 04       		.uleb128 0x4
 2154 0069 04       		.byte	0x4
 2155 006a 05       		.byte	0x5
 2156 006b 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 54


 2157 006f 02       		.uleb128 0x2
 2158 0070 04       		.byte	0x4
 2159 0071 07       		.byte	0x7
 2160 0072 08030000 		.4byte	.LASF8
 2161 0076 03       		.uleb128 0x3
 2162 0077 D7050000 		.4byte	.LASF10
 2163 007b 03       		.byte	0x3
 2164 007c 2C       		.byte	0x2c
 2165 007d 41000000 		.4byte	0x41
 2166 0081 05       		.uleb128 0x5
 2167 0082 40020000 		.4byte	.LASF11
 2168 0086 04       		.byte	0x4
 2169 0087 9201     		.2byte	0x192
 2170 0089 2C000000 		.4byte	0x2c
 2171 008d 05       		.uleb128 0x5
 2172 008e 08000000 		.4byte	.LASF12
 2173 0092 04       		.byte	0x4
 2174 0093 9301     		.2byte	0x193
 2175 0095 3A000000 		.4byte	0x3a
 2176 0099 05       		.uleb128 0x5
 2177 009a 84020000 		.4byte	.LASF13
 2178 009e 04       		.byte	0x4
 2179 009f 9401     		.2byte	0x194
 2180 00a1 53000000 		.4byte	0x53
 2181 00a5 05       		.uleb128 0x5
 2182 00a6 E2030000 		.4byte	.LASF14
 2183 00aa 04       		.byte	0x4
 2184 00ab 9501     		.2byte	0x195
 2185 00ad 25000000 		.4byte	0x25
 2186 00b1 05       		.uleb128 0x5
 2187 00b2 FC070000 		.4byte	.LASF15
 2188 00b6 04       		.byte	0x4
 2189 00b7 9601     		.2byte	0x196
 2190 00b9 33000000 		.4byte	0x33
 2191 00bd 05       		.uleb128 0x5
 2192 00be 5E020000 		.4byte	.LASF16
 2193 00c2 04       		.byte	0x4
 2194 00c3 9701     		.2byte	0x197
 2195 00c5 4C000000 		.4byte	0x4c
 2196 00c9 02       		.uleb128 0x2
 2197 00ca 04       		.byte	0x4
 2198 00cb 04       		.byte	0x4
 2199 00cc 7C050000 		.4byte	.LASF17
 2200 00d0 02       		.uleb128 0x2
 2201 00d1 08       		.byte	0x8
 2202 00d2 04       		.byte	0x4
 2203 00d3 8D080000 		.4byte	.LASF18
 2204 00d7 02       		.uleb128 0x2
 2205 00d8 01       		.byte	0x1
 2206 00d9 08       		.byte	0x8
 2207 00da FB060000 		.4byte	.LASF19
 2208 00de 02       		.uleb128 0x2
 2209 00df 08       		.byte	0x8
 2210 00e0 04       		.byte	0x4
 2211 00e1 DD060000 		.4byte	.LASF20
 2212 00e5 02       		.uleb128 0x2
 2213 00e6 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 55


 2214 00e7 07       		.byte	0x7
 2215 00e8 9C040000 		.4byte	.LASF21
 2216 00ec 06       		.uleb128 0x6
 2217 00ed 04       		.byte	0x4
 2218 00ee D7000000 		.4byte	0xd7
 2219 00f2 07       		.uleb128 0x7
 2220 00f3 D7000000 		.4byte	0xd7
 2221 00f7 02010000 		.4byte	0x102
 2222 00fb 08       		.uleb128 0x8
 2223 00fc E5000000 		.4byte	0xe5
 2224 0100 17       		.byte	0x17
 2225 0101 00       		.byte	0
 2226 0102 09       		.uleb128 0x9
 2227 0103 0C       		.byte	0xc
 2228 0104 05       		.byte	0x5
 2229 0105 30       		.byte	0x30
 2230 0106 6B010000 		.4byte	0x16b
 2231 010a 0A       		.uleb128 0xa
 2232 010b 53656300 		.ascii	"Sec\000"
 2233 010f 05       		.byte	0x5
 2234 0110 32       		.byte	0x32
 2235 0111 81000000 		.4byte	0x81
 2236 0115 00       		.byte	0
 2237 0116 0A       		.uleb128 0xa
 2238 0117 4D696E00 		.ascii	"Min\000"
 2239 011b 05       		.byte	0x5
 2240 011c 33       		.byte	0x33
 2241 011d 81000000 		.4byte	0x81
 2242 0121 01       		.byte	0x1
 2243 0122 0B       		.uleb128 0xb
 2244 0123 2A010000 		.4byte	.LASF22
 2245 0127 05       		.byte	0x5
 2246 0128 34       		.byte	0x34
 2247 0129 81000000 		.4byte	0x81
 2248 012d 02       		.byte	0x2
 2249 012e 0B       		.uleb128 0xb
 2250 012f 3C060000 		.4byte	.LASF23
 2251 0133 05       		.byte	0x5
 2252 0134 35       		.byte	0x35
 2253 0135 81000000 		.4byte	0x81
 2254 0139 03       		.byte	0x3
 2255 013a 0B       		.uleb128 0xb
 2256 013b 9D030000 		.4byte	.LASF24
 2257 013f 05       		.byte	0x5
 2258 0140 36       		.byte	0x36
 2259 0141 81000000 		.4byte	0x81
 2260 0145 04       		.byte	0x4
 2261 0146 0B       		.uleb128 0xb
 2262 0147 47080000 		.4byte	.LASF25
 2263 014b 05       		.byte	0x5
 2264 014c 37       		.byte	0x37
 2265 014d 8D000000 		.4byte	0x8d
 2266 0151 06       		.byte	0x6
 2267 0152 0B       		.uleb128 0xb
 2268 0153 0D010000 		.4byte	.LASF26
 2269 0157 05       		.byte	0x5
 2270 0158 38       		.byte	0x38
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 56


 2271 0159 81000000 		.4byte	0x81
 2272 015d 08       		.byte	0x8
 2273 015e 0B       		.uleb128 0xb
 2274 015f CC050000 		.4byte	.LASF27
 2275 0163 05       		.byte	0x5
 2276 0164 39       		.byte	0x39
 2277 0165 8D000000 		.4byte	0x8d
 2278 0169 0A       		.byte	0xa
 2279 016a 00       		.byte	0
 2280 016b 03       		.uleb128 0x3
 2281 016c 21050000 		.4byte	.LASF28
 2282 0170 05       		.byte	0x5
 2283 0171 3A       		.byte	0x3a
 2284 0172 76010000 		.4byte	0x176
 2285 0176 0C       		.uleb128 0xc
 2286 0177 02010000 		.4byte	0x102
 2287 017b 0D       		.uleb128 0xd
 2288 017c 8101     		.2byte	0x181
 2289 017e 06       		.byte	0x6
 2290 017f 0A       		.byte	0xa
 2291 0180 A9010000 		.4byte	0x1a9
 2292 0184 0B       		.uleb128 0xb
 2293 0185 C2050000 		.4byte	.LASF29
 2294 0189 06       		.byte	0x6
 2295 018a 0C       		.byte	0xc
 2296 018b A9010000 		.4byte	0x1a9
 2297 018f 00       		.byte	0
 2298 0190 0B       		.uleb128 0xb
 2299 0191 BC070000 		.4byte	.LASF30
 2300 0195 06       		.byte	0x6
 2301 0196 0D       		.byte	0xd
 2302 0197 81000000 		.4byte	0x81
 2303 019b 80       		.byte	0x80
 2304 019c 0B       		.uleb128 0xb
 2305 019d 5E060000 		.4byte	.LASF31
 2306 01a1 06       		.byte	0x6
 2307 01a2 0F       		.byte	0xf
 2308 01a3 B9010000 		.4byte	0x1b9
 2309 01a7 81       		.byte	0x81
 2310 01a8 00       		.byte	0
 2311 01a9 07       		.uleb128 0x7
 2312 01aa D7000000 		.4byte	0xd7
 2313 01ae B9010000 		.4byte	0x1b9
 2314 01b2 08       		.uleb128 0x8
 2315 01b3 E5000000 		.4byte	0xe5
 2316 01b7 7F       		.byte	0x7f
 2317 01b8 00       		.byte	0
 2318 01b9 07       		.uleb128 0x7
 2319 01ba D7000000 		.4byte	0xd7
 2320 01be C9010000 		.4byte	0x1c9
 2321 01c2 08       		.uleb128 0x8
 2322 01c3 E5000000 		.4byte	0xe5
 2323 01c7 FF       		.byte	0xff
 2324 01c8 00       		.byte	0
 2325 01c9 03       		.uleb128 0x3
 2326 01ca 46060000 		.4byte	.LASF32
 2327 01ce 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 57


 2328 01cf 10       		.byte	0x10
 2329 01d0 7B010000 		.4byte	0x17b
 2330 01d4 09       		.uleb128 0x9
 2331 01d5 1A       		.byte	0x1a
 2332 01d6 07       		.byte	0x7
 2333 01d7 10       		.byte	0x10
 2334 01d8 0D020000 		.4byte	0x20d
 2335 01dc 0B       		.uleb128 0xb
 2336 01dd 94020000 		.4byte	.LASF33
 2337 01e1 07       		.byte	0x7
 2338 01e2 11       		.byte	0x11
 2339 01e3 0D020000 		.4byte	0x20d
 2340 01e7 00       		.byte	0
 2341 01e8 0B       		.uleb128 0xb
 2342 01e9 69070000 		.4byte	.LASF34
 2343 01ed 07       		.byte	0x7
 2344 01ee 12       		.byte	0x12
 2345 01ef B1000000 		.4byte	0xb1
 2346 01f3 16       		.byte	0x16
 2347 01f4 0B       		.uleb128 0xb
 2348 01f5 34030000 		.4byte	.LASF35
 2349 01f9 07       		.byte	0x7
 2350 01fa 13       		.byte	0x13
 2351 01fb 81000000 		.4byte	0x81
 2352 01ff 18       		.byte	0x18
 2353 0200 0B       		.uleb128 0xb
 2354 0201 17000000 		.4byte	.LASF36
 2355 0205 07       		.byte	0x7
 2356 0206 14       		.byte	0x14
 2357 0207 81000000 		.4byte	0x81
 2358 020b 19       		.byte	0x19
 2359 020c 00       		.byte	0
 2360 020d 07       		.uleb128 0x7
 2361 020e B1000000 		.4byte	0xb1
 2362 0212 1D020000 		.4byte	0x21d
 2363 0216 08       		.uleb128 0x8
 2364 0217 E5000000 		.4byte	0xe5
 2365 021b 0A       		.byte	0xa
 2366 021c 00       		.byte	0
 2367 021d 03       		.uleb128 0x3
 2368 021e 82050000 		.4byte	.LASF37
 2369 0222 07       		.byte	0x7
 2370 0223 15       		.byte	0x15
 2371 0224 D4010000 		.4byte	0x1d4
 2372 0228 09       		.uleb128 0x9
 2373 0229 1C       		.byte	0x1c
 2374 022a 08       		.byte	0x8
 2375 022b 14       		.byte	0x14
 2376 022c 85020000 		.4byte	0x285
 2377 0230 0B       		.uleb128 0xb
 2378 0231 8D030000 		.4byte	.LASF38
 2379 0235 08       		.byte	0x8
 2380 0236 15       		.byte	0x15
 2381 0237 C9000000 		.4byte	0xc9
 2382 023b 00       		.byte	0
 2383 023c 0B       		.uleb128 0xb
 2384 023d B0010000 		.4byte	.LASF39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 58


 2385 0241 08       		.byte	0x8
 2386 0242 16       		.byte	0x16
 2387 0243 C9000000 		.4byte	0xc9
 2388 0247 04       		.byte	0x4
 2389 0248 0B       		.uleb128 0xb
 2390 0249 BE010000 		.4byte	.LASF40
 2391 024d 08       		.byte	0x8
 2392 024e 17       		.byte	0x17
 2393 024f C9000000 		.4byte	0xc9
 2394 0253 08       		.byte	0x8
 2395 0254 0B       		.uleb128 0xb
 2396 0255 5E050000 		.4byte	.LASF41
 2397 0259 08       		.byte	0x8
 2398 025a 18       		.byte	0x18
 2399 025b C9000000 		.4byte	0xc9
 2400 025f 0C       		.byte	0xc
 2401 0260 0B       		.uleb128 0xb
 2402 0261 35080000 		.4byte	.LASF42
 2403 0265 08       		.byte	0x8
 2404 0266 19       		.byte	0x19
 2405 0267 C9000000 		.4byte	0xc9
 2406 026b 10       		.byte	0x10
 2407 026c 0B       		.uleb128 0xb
 2408 026d 00070000 		.4byte	.LASF43
 2409 0271 08       		.byte	0x8
 2410 0272 1A       		.byte	0x1a
 2411 0273 C9000000 		.4byte	0xc9
 2412 0277 14       		.byte	0x14
 2413 0278 0B       		.uleb128 0xb
 2414 0279 CF060000 		.4byte	.LASF44
 2415 027d 08       		.byte	0x8
 2416 027e 1B       		.byte	0x1b
 2417 027f 81000000 		.4byte	0x81
 2418 0283 18       		.byte	0x18
 2419 0284 00       		.byte	0
 2420 0285 03       		.uleb128 0x3
 2421 0286 94080000 		.4byte	.LASF45
 2422 028a 08       		.byte	0x8
 2423 028b 1C       		.byte	0x1c
 2424 028c 28020000 		.4byte	0x228
 2425 0290 09       		.uleb128 0x9
 2426 0291 10       		.byte	0x10
 2427 0292 08       		.byte	0x8
 2428 0293 1E       		.byte	0x1e
 2429 0294 C9020000 		.4byte	0x2c9
 2430 0298 0B       		.uleb128 0xb
 2431 0299 F4020000 		.4byte	.LASF46
 2432 029d 08       		.byte	0x8
 2433 029e 1F       		.byte	0x1f
 2434 029f C9000000 		.4byte	0xc9
 2435 02a3 00       		.byte	0
 2436 02a4 0B       		.uleb128 0xb
 2437 02a5 2B020000 		.4byte	.LASF47
 2438 02a9 08       		.byte	0x8
 2439 02aa 20       		.byte	0x20
 2440 02ab C9000000 		.4byte	0xc9
 2441 02af 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 59


 2442 02b0 0B       		.uleb128 0xb
 2443 02b1 BE060000 		.4byte	.LASF48
 2444 02b5 08       		.byte	0x8
 2445 02b6 21       		.byte	0x21
 2446 02b7 C9000000 		.4byte	0xc9
 2447 02bb 08       		.byte	0x8
 2448 02bc 0B       		.uleb128 0xb
 2449 02bd 28060000 		.4byte	.LASF49
 2450 02c1 08       		.byte	0x8
 2451 02c2 22       		.byte	0x22
 2452 02c3 C9000000 		.4byte	0xc9
 2453 02c7 0C       		.byte	0xc
 2454 02c8 00       		.byte	0
 2455 02c9 03       		.uleb128 0x3
 2456 02ca 51080000 		.4byte	.LASF50
 2457 02ce 08       		.byte	0x8
 2458 02cf 23       		.byte	0x23
 2459 02d0 90020000 		.4byte	0x290
 2460 02d4 0E       		.uleb128 0xe
 2461 02d5 746D00   		.ascii	"tm\000"
 2462 02d8 24       		.byte	0x24
 2463 02d9 09       		.byte	0x9
 2464 02da 21       		.byte	0x21
 2465 02db 4C030000 		.4byte	0x34c
 2466 02df 0B       		.uleb128 0xb
 2467 02e0 AA070000 		.4byte	.LASF51
 2468 02e4 09       		.byte	0x9
 2469 02e5 23       		.byte	0x23
 2470 02e6 68000000 		.4byte	0x68
 2471 02ea 00       		.byte	0
 2472 02eb 0B       		.uleb128 0xb
 2473 02ec 7E040000 		.4byte	.LASF52
 2474 02f0 09       		.byte	0x9
 2475 02f1 24       		.byte	0x24
 2476 02f2 68000000 		.4byte	0x68
 2477 02f6 04       		.byte	0x4
 2478 02f7 0B       		.uleb128 0xb
 2479 02f8 0F000000 		.4byte	.LASF53
 2480 02fc 09       		.byte	0x9
 2481 02fd 25       		.byte	0x25
 2482 02fe 68000000 		.4byte	0x68
 2483 0302 08       		.byte	0x8
 2484 0303 0B       		.uleb128 0xb
 2485 0304 99070000 		.4byte	.LASF54
 2486 0308 09       		.byte	0x9
 2487 0309 26       		.byte	0x26
 2488 030a 68000000 		.4byte	0x68
 2489 030e 0C       		.byte	0xc
 2490 030f 0B       		.uleb128 0xb
 2491 0310 BF020000 		.4byte	.LASF55
 2492 0314 09       		.byte	0x9
 2493 0315 27       		.byte	0x27
 2494 0316 68000000 		.4byte	0x68
 2495 031a 10       		.byte	0x10
 2496 031b 0B       		.uleb128 0xb
 2497 031c E2020000 		.4byte	.LASF56
 2498 0320 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 60


 2499 0321 28       		.byte	0x28
 2500 0322 68000000 		.4byte	0x68
 2501 0326 14       		.byte	0x14
 2502 0327 0B       		.uleb128 0xb
 2503 0328 D5060000 		.4byte	.LASF57
 2504 032c 09       		.byte	0x9
 2505 032d 29       		.byte	0x29
 2506 032e 68000000 		.4byte	0x68
 2507 0332 18       		.byte	0x18
 2508 0333 0B       		.uleb128 0xb
 2509 0334 A5040000 		.4byte	.LASF58
 2510 0338 09       		.byte	0x9
 2511 0339 2A       		.byte	0x2a
 2512 033a 68000000 		.4byte	0x68
 2513 033e 1C       		.byte	0x1c
 2514 033f 0B       		.uleb128 0xb
 2515 0340 C6030000 		.4byte	.LASF59
 2516 0344 09       		.byte	0x9
 2517 0345 2B       		.byte	0x2b
 2518 0346 68000000 		.4byte	0x68
 2519 034a 20       		.byte	0x20
 2520 034b 00       		.byte	0
 2521 034c 09       		.uleb128 0x9
 2522 034d 2C       		.byte	0x2c
 2523 034e 0A       		.byte	0xa
 2524 034f 14       		.byte	0x14
 2525 0350 79030000 		.4byte	0x379
 2526 0354 0A       		.uleb128 0xa
 2527 0355 6B657900 		.ascii	"key\000"
 2528 0359 0A       		.byte	0xa
 2529 035a 15       		.byte	0x15
 2530 035b 79030000 		.4byte	0x379
 2531 035f 00       		.byte	0
 2532 0360 0B       		.uleb128 0xb
 2533 0361 D7020000 		.4byte	.LASF60
 2534 0365 0A       		.byte	0xa
 2535 0366 16       		.byte	0x16
 2536 0367 79030000 		.4byte	0x379
 2537 036b 14       		.byte	0x14
 2538 036c 0B       		.uleb128 0xb
 2539 036d DD040000 		.4byte	.LASF61
 2540 0371 0A       		.byte	0xa
 2541 0372 17       		.byte	0x17
 2542 0373 BD000000 		.4byte	0xbd
 2543 0377 28       		.byte	0x28
 2544 0378 00       		.byte	0
 2545 0379 07       		.uleb128 0x7
 2546 037a D7000000 		.4byte	0xd7
 2547 037e 89030000 		.4byte	0x389
 2548 0382 08       		.uleb128 0x8
 2549 0383 E5000000 		.4byte	0xe5
 2550 0387 13       		.byte	0x13
 2551 0388 00       		.byte	0
 2552 0389 03       		.uleb128 0x3
 2553 038a 1D030000 		.4byte	.LASF62
 2554 038e 0A       		.byte	0xa
 2555 038f 19       		.byte	0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 61


 2556 0390 4C030000 		.4byte	0x34c
 2557 0394 09       		.uleb128 0x9
 2558 0395 3C       		.byte	0x3c
 2559 0396 0B       		.byte	0xb
 2560 0397 37       		.byte	0x37
 2561 0398 C1030000 		.4byte	0x3c1
 2562 039c 0B       		.uleb128 0xb
 2563 039d 92070000 		.4byte	.LASF63
 2564 03a1 0B       		.byte	0xb
 2565 03a2 38       		.byte	0x38
 2566 03a3 79030000 		.4byte	0x379
 2567 03a7 00       		.byte	0
 2568 03a8 0B       		.uleb128 0xb
 2569 03a9 8B020000 		.4byte	.LASF64
 2570 03ad 0B       		.byte	0xb
 2571 03ae 39       		.byte	0x39
 2572 03af 79030000 		.4byte	0x379
 2573 03b3 14       		.byte	0x14
 2574 03b4 0B       		.uleb128 0xb
 2575 03b5 59060000 		.4byte	.LASF65
 2576 03b9 0B       		.byte	0xb
 2577 03ba 3A       		.byte	0x3a
 2578 03bb 79030000 		.4byte	0x379
 2579 03bf 28       		.byte	0x28
 2580 03c0 00       		.byte	0
 2581 03c1 03       		.uleb128 0x3
 2582 03c2 F6010000 		.4byte	.LASF66
 2583 03c6 0B       		.byte	0xb
 2584 03c7 3C       		.byte	0x3c
 2585 03c8 94030000 		.4byte	0x394
 2586 03cc 09       		.uleb128 0x9
 2587 03cd 20       		.byte	0x20
 2588 03ce 0B       		.byte	0xb
 2589 03cf 3E       		.byte	0x3e
 2590 03d0 35040000 		.4byte	0x435
 2591 03d4 0B       		.uleb128 0xb
 2592 03d5 03020000 		.4byte	.LASF67
 2593 03d9 0B       		.byte	0xb
 2594 03da 3F       		.byte	0x3f
 2595 03db 68000000 		.4byte	0x68
 2596 03df 00       		.byte	0
 2597 03e0 0A       		.uleb128 0xa
 2598 03e1 62657200 		.ascii	"ber\000"
 2599 03e5 0B       		.byte	0xb
 2600 03e6 40       		.byte	0x40
 2601 03e7 68000000 		.4byte	0x68
 2602 03eb 04       		.byte	0x4
 2603 03ec 0B       		.uleb128 0xb
 2604 03ed 37060000 		.4byte	.LASF68
 2605 03f1 0B       		.byte	0xb
 2606 03f2 41       		.byte	0x41
 2607 03f3 68000000 		.4byte	0x68
 2608 03f7 08       		.byte	0x8
 2609 03f8 0B       		.uleb128 0xb
 2610 03f9 7A010000 		.4byte	.LASF69
 2611 03fd 0B       		.byte	0xb
 2612 03fe 42       		.byte	0x42
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 62


 2613 03ff 68000000 		.4byte	0x68
 2614 0403 0C       		.byte	0xc
 2615 0404 0B       		.uleb128 0xb
 2616 0405 02060000 		.4byte	.LASF70
 2617 0409 0B       		.byte	0xb
 2618 040a 43       		.byte	0x43
 2619 040b 68000000 		.4byte	0x68
 2620 040f 10       		.byte	0x10
 2621 0410 0B       		.uleb128 0xb
 2622 0411 FD050000 		.4byte	.LASF71
 2623 0415 0B       		.byte	0xb
 2624 0416 44       		.byte	0x44
 2625 0417 68000000 		.4byte	0x68
 2626 041b 14       		.byte	0x14
 2627 041c 0B       		.uleb128 0xb
 2628 041d 8D010000 		.4byte	.LASF72
 2629 0421 0B       		.byte	0xb
 2630 0422 45       		.byte	0x45
 2631 0423 68000000 		.4byte	0x68
 2632 0427 18       		.byte	0x18
 2633 0428 0B       		.uleb128 0xb
 2634 0429 12020000 		.4byte	.LASF73
 2635 042d 0B       		.byte	0xb
 2636 042e 46       		.byte	0x46
 2637 042f 68000000 		.4byte	0x68
 2638 0433 1C       		.byte	0x1c
 2639 0434 00       		.byte	0
 2640 0435 03       		.uleb128 0x3
 2641 0436 B0060000 		.4byte	.LASF74
 2642 043a 0B       		.byte	0xb
 2643 043b 48       		.byte	0x48
 2644 043c CC030000 		.4byte	0x3cc
 2645 0440 09       		.uleb128 0x9
 2646 0441 05       		.byte	0x5
 2647 0442 0B       		.byte	0xb
 2648 0443 54       		.byte	0x54
 2649 0444 85040000 		.4byte	0x485
 2650 0448 0B       		.uleb128 0xb
 2651 0449 64020000 		.4byte	.LASF75
 2652 044d 0B       		.byte	0xb
 2653 044e 56       		.byte	0x56
 2654 044f 81000000 		.4byte	0x81
 2655 0453 00       		.byte	0
 2656 0454 0B       		.uleb128 0xb
 2657 0455 26080000 		.4byte	.LASF76
 2658 0459 0B       		.byte	0xb
 2659 045a 58       		.byte	0x58
 2660 045b 85040000 		.4byte	0x485
 2661 045f 01       		.byte	0x1
 2662 0460 0B       		.uleb128 0xb
 2663 0461 4D070000 		.4byte	.LASF77
 2664 0465 0B       		.byte	0xb
 2665 0466 5A       		.byte	0x5a
 2666 0467 81000000 		.4byte	0x81
 2667 046b 02       		.byte	0x2
 2668 046c 0B       		.uleb128 0xb
 2669 046d 1E060000 		.4byte	.LASF78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 63


 2670 0471 0B       		.byte	0xb
 2671 0472 5C       		.byte	0x5c
 2672 0473 81000000 		.4byte	0x81
 2673 0477 03       		.byte	0x3
 2674 0478 0B       		.uleb128 0xb
 2675 0479 C6020000 		.4byte	.LASF79
 2676 047d 0B       		.byte	0xb
 2677 047e 5F       		.byte	0x5f
 2678 047f 81000000 		.4byte	0x81
 2679 0483 04       		.byte	0x4
 2680 0484 00       		.byte	0
 2681 0485 02       		.uleb128 0x2
 2682 0486 01       		.byte	0x1
 2683 0487 02       		.byte	0x2
 2684 0488 D1050000 		.4byte	.LASF80
 2685 048c 03       		.uleb128 0x3
 2686 048d 4B040000 		.4byte	.LASF81
 2687 0491 0B       		.byte	0xb
 2688 0492 61       		.byte	0x61
 2689 0493 40040000 		.4byte	0x440
 2690 0497 09       		.uleb128 0x9
 2691 0498 06       		.byte	0x6
 2692 0499 0C       		.byte	0xc
 2693 049a 2E       		.byte	0x2e
 2694 049b D0040000 		.4byte	0x4d0
 2695 049f 0B       		.uleb128 0xb
 2696 04a0 A7020000 		.4byte	.LASF82
 2697 04a4 0C       		.byte	0xc
 2698 04a5 30       		.byte	0x30
 2699 04a6 8D000000 		.4byte	0x8d
 2700 04aa 00       		.byte	0
 2701 04ab 0B       		.uleb128 0xb
 2702 04ac 10080000 		.4byte	.LASF83
 2703 04b0 0C       		.byte	0xc
 2704 04b1 31       		.byte	0x31
 2705 04b2 B1000000 		.4byte	0xb1
 2706 04b6 02       		.byte	0x2
 2707 04b7 0B       		.uleb128 0xb
 2708 04b8 02080000 		.4byte	.LASF84
 2709 04bc 0C       		.byte	0xc
 2710 04bd 32       		.byte	0x32
 2711 04be 81000000 		.4byte	0x81
 2712 04c2 04       		.byte	0x4
 2713 04c3 0B       		.uleb128 0xb
 2714 04c4 51000000 		.4byte	.LASF85
 2715 04c8 0C       		.byte	0xc
 2716 04c9 33       		.byte	0x33
 2717 04ca 81000000 		.4byte	0x81
 2718 04ce 05       		.byte	0x5
 2719 04cf 00       		.byte	0
 2720 04d0 03       		.uleb128 0x3
 2721 04d1 25020000 		.4byte	.LASF86
 2722 04d5 0C       		.byte	0xc
 2723 04d6 36       		.byte	0x36
 2724 04d7 DB040000 		.4byte	0x4db
 2725 04db 0C       		.uleb128 0xc
 2726 04dc 97040000 		.4byte	0x497
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 64


 2727 04e0 09       		.uleb128 0x9
 2728 04e1 1C       		.byte	0x1c
 2729 04e2 0C       		.byte	0xc
 2730 04e3 39       		.byte	0x39
 2731 04e4 01050000 		.4byte	0x501
 2732 04e8 0B       		.uleb128 0xb
 2733 04e9 CF030000 		.4byte	.LASF87
 2734 04ed 0C       		.byte	0xc
 2735 04ee 3B       		.byte	0x3b
 2736 04ef 01050000 		.4byte	0x501
 2737 04f3 00       		.byte	0
 2738 04f4 0B       		.uleb128 0xb
 2739 04f5 77080000 		.4byte	.LASF88
 2740 04f9 0C       		.byte	0xc
 2741 04fa 3C       		.byte	0x3c
 2742 04fb F2000000 		.4byte	0xf2
 2743 04ff 04       		.byte	0x4
 2744 0500 00       		.byte	0
 2745 0501 06       		.uleb128 0x6
 2746 0502 04       		.byte	0x4
 2747 0503 C1030000 		.4byte	0x3c1
 2748 0507 03       		.uleb128 0x3
 2749 0508 40040000 		.4byte	.LASF89
 2750 050c 0C       		.byte	0xc
 2751 050d 3E       		.byte	0x3e
 2752 050e E0040000 		.4byte	0x4e0
 2753 0512 09       		.uleb128 0x9
 2754 0513 68       		.byte	0x68
 2755 0514 0C       		.byte	0xc
 2756 0515 44       		.byte	0x44
 2757 0516 33050000 		.4byte	0x533
 2758 051a 0B       		.uleb128 0xb
 2759 051b DA030000 		.4byte	.LASF90
 2760 051f 0C       		.byte	0xc
 2761 0520 49       		.byte	0x49
 2762 0521 33050000 		.4byte	0x533
 2763 0525 00       		.byte	0
 2764 0526 0B       		.uleb128 0xb
 2765 0527 BE030000 		.4byte	.LASF91
 2766 052b 0C       		.byte	0xc
 2767 052c 4A       		.byte	0x4a
 2768 052d 68000000 		.4byte	0x68
 2769 0531 64       		.byte	0x64
 2770 0532 00       		.byte	0
 2771 0533 07       		.uleb128 0x7
 2772 0534 D7000000 		.4byte	0xd7
 2773 0538 43050000 		.4byte	0x543
 2774 053c 08       		.uleb128 0x8
 2775 053d E5000000 		.4byte	0xe5
 2776 0541 63       		.byte	0x63
 2777 0542 00       		.byte	0
 2778 0543 03       		.uleb128 0x3
 2779 0544 AD040000 		.4byte	.LASF92
 2780 0548 0C       		.byte	0xc
 2781 0549 50       		.byte	0x50
 2782 054a 12050000 		.4byte	0x512
 2783 054e 0F       		.uleb128 0xf
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 65


 2784 054f 69000000 		.4byte	.LASF166
 2785 0553 01       		.byte	0x1
 2786 0554 14       		.byte	0x14
 2787 0555 00000000 		.4byte	.LFB64
 2788 0559 0C000000 		.4byte	.LFE64-.LFB64
 2789 055d 01       		.uleb128 0x1
 2790 055e 9C       		.byte	0x9c
 2791 055f 10       		.uleb128 0x10
 2792 0560 67080000 		.4byte	.LASF106
 2793 0564 01       		.byte	0x1
 2794 0565 28       		.byte	0x28
 2795 0566 00000000 		.4byte	.LFB65
 2796 056a 2C010000 		.4byte	.LFE65-.LFB65
 2797 056e 01       		.uleb128 0x1
 2798 056f 9C       		.byte	0x9c
 2799 0570 9F050000 		.4byte	0x59f
 2800 0574 11       		.uleb128 0x11
 2801 0575 44070000 		.4byte	.LASF93
 2802 0579 01       		.byte	0x1
 2803 057a 3C       		.byte	0x3c
 2804 057b 9F050000 		.4byte	0x59f
 2805 057f 02       		.uleb128 0x2
 2806 0580 91       		.byte	0x91
 2807 0581 64       		.sleb128 -28
 2808 0582 11       		.uleb128 0x11
 2809 0583 2F080000 		.4byte	.LASF94
 2810 0587 01       		.byte	0x1
 2811 0588 59       		.byte	0x59
 2812 0589 AF050000 		.4byte	0x5af
 2813 058d 02       		.uleb128 0x2
 2814 058e 91       		.byte	0x91
 2815 058f 58       		.sleb128 -40
 2816 0590 11       		.uleb128 0x11
 2817 0591 6E030000 		.4byte	.LASF95
 2818 0595 01       		.byte	0x1
 2819 0596 5E       		.byte	0x5e
 2820 0597 81000000 		.4byte	0x81
 2821 059b 02       		.uleb128 0x2
 2822 059c 91       		.byte	0x91
 2823 059d 6F       		.sleb128 -17
 2824 059e 00       		.byte	0
 2825 059f 07       		.uleb128 0x7
 2826 05a0 99000000 		.4byte	0x99
 2827 05a4 AF050000 		.4byte	0x5af
 2828 05a8 08       		.uleb128 0x8
 2829 05a9 E5000000 		.4byte	0xe5
 2830 05ad 01       		.byte	0x1
 2831 05ae 00       		.byte	0
 2832 05af 07       		.uleb128 0x7
 2833 05b0 D7000000 		.4byte	0xd7
 2834 05b4 BF050000 		.4byte	0x5bf
 2835 05b8 08       		.uleb128 0x8
 2836 05b9 E5000000 		.4byte	0xe5
 2837 05bd 09       		.byte	0x9
 2838 05be 00       		.byte	0
 2839 05bf 12       		.uleb128 0x12
 2840 05c0 E7030000 		.4byte	.LASF97
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 66


 2841 05c4 01       		.byte	0x1
 2842 05c5 68       		.byte	0x68
 2843 05c6 68000000 		.4byte	0x68
 2844 05ca 00000000 		.4byte	.LFB66
 2845 05ce 64000000 		.4byte	.LFE66-.LFB66
 2846 05d2 01       		.uleb128 0x1
 2847 05d3 9C       		.byte	0x9c
 2848 05d4 E7050000 		.4byte	0x5e7
 2849 05d8 11       		.uleb128 0x11
 2850 05d9 B5050000 		.4byte	.LASF96
 2851 05dd 01       		.byte	0x1
 2852 05de 82       		.byte	0x82
 2853 05df 81000000 		.4byte	0x81
 2854 05e3 02       		.uleb128 0x2
 2855 05e4 91       		.byte	0x91
 2856 05e5 77       		.sleb128 -9
 2857 05e6 00       		.byte	0
 2858 05e7 13       		.uleb128 0x13
 2859 05e8 77070000 		.4byte	.LASF167
 2860 05ec 01       		.byte	0x1
 2861 05ed 92       		.byte	0x92
 2862 05ee 00000000 		.4byte	.LFB67
 2863 05f2 2A000000 		.4byte	.LFE67-.LFB67
 2864 05f6 01       		.uleb128 0x1
 2865 05f7 9C       		.byte	0x9c
 2866 05f8 14       		.uleb128 0x14
 2867 05f9 29030000 		.4byte	.LASF98
 2868 05fd 01       		.byte	0x1
 2869 05fe B7       		.byte	0xb7
 2870 05ff 00000000 		.4byte	.LFB68
 2871 0603 50000000 		.4byte	.LFE68-.LFB68
 2872 0607 01       		.uleb128 0x1
 2873 0608 9C       		.byte	0x9c
 2874 0609 1C060000 		.4byte	0x61c
 2875 060d 15       		.uleb128 0x15
 2876 060e 62040000 		.4byte	.LASF99
 2877 0612 01       		.byte	0x1
 2878 0613 B7       		.byte	0xb7
 2879 0614 81000000 		.4byte	0x81
 2880 0618 02       		.uleb128 0x2
 2881 0619 91       		.byte	0x91
 2882 061a 77       		.sleb128 -9
 2883 061b 00       		.byte	0
 2884 061c 16       		.uleb128 0x16
 2885 061d 5C080000 		.4byte	.LASF103
 2886 0621 01       		.byte	0x1
 2887 0622 CE       		.byte	0xce
 2888 0623 81000000 		.4byte	0x81
 2889 0627 00000000 		.4byte	.LFB69
 2890 062b 48000000 		.4byte	.LFE69-.LFB69
 2891 062f 01       		.uleb128 0x1
 2892 0630 9C       		.byte	0x9c
 2893 0631 52060000 		.4byte	0x652
 2894 0635 15       		.uleb128 0x15
 2895 0636 8B040000 		.4byte	.LASF100
 2896 063a 01       		.byte	0x1
 2897 063b CE       		.byte	0xce
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 67


 2898 063c 52060000 		.4byte	0x652
 2899 0640 02       		.uleb128 0x2
 2900 0641 91       		.byte	0x91
 2901 0642 74       		.sleb128 -12
 2902 0643 15       		.uleb128 0x15
 2903 0644 62040000 		.4byte	.LASF99
 2904 0648 01       		.byte	0x1
 2905 0649 CE       		.byte	0xce
 2906 064a 81000000 		.4byte	0x81
 2907 064e 02       		.uleb128 0x2
 2908 064f 91       		.byte	0x91
 2909 0650 73       		.sleb128 -13
 2910 0651 00       		.byte	0
 2911 0652 06       		.uleb128 0x6
 2912 0653 04       		.byte	0x4
 2913 0654 D0040000 		.4byte	0x4d0
 2914 0658 17       		.uleb128 0x17
 2915 0659 07060000 		.4byte	.LASF101
 2916 065d 01       		.byte	0x1
 2917 065e E3       		.byte	0xe3
 2918 065f 00000000 		.4byte	.LFB70
 2919 0663 1E000000 		.4byte	.LFE70-.LFB70
 2920 0667 01       		.uleb128 0x1
 2921 0668 9C       		.byte	0x9c
 2922 0669 7C060000 		.4byte	0x67c
 2923 066d 15       		.uleb128 0x15
 2924 066e 65060000 		.4byte	.LASF102
 2925 0672 01       		.byte	0x1
 2926 0673 E3       		.byte	0xe3
 2927 0674 52060000 		.4byte	0x652
 2928 0678 02       		.uleb128 0x2
 2929 0679 91       		.byte	0x91
 2930 067a 74       		.sleb128 -12
 2931 067b 00       		.byte	0
 2932 067c 18       		.uleb128 0x18
 2933 067d 44050000 		.4byte	.LASF104
 2934 0681 01       		.byte	0x1
 2935 0682 EC       		.byte	0xec
 2936 0683 D0040000 		.4byte	0x4d0
 2937 0687 00000000 		.4byte	.LFB71
 2938 068b 46000000 		.4byte	.LFE71-.LFB71
 2939 068f 01       		.uleb128 0x1
 2940 0690 9C       		.byte	0x9c
 2941 0691 CE060000 		.4byte	0x6ce
 2942 0695 15       		.uleb128 0x15
 2943 0696 A7020000 		.4byte	.LASF82
 2944 069a 01       		.byte	0x1
 2945 069b EC       		.byte	0xec
 2946 069c 8D000000 		.4byte	0x8d
 2947 06a0 02       		.uleb128 0x2
 2948 06a1 91       		.byte	0x91
 2949 06a2 6A       		.sleb128 -22
 2950 06a3 15       		.uleb128 0x15
 2951 06a4 02080000 		.4byte	.LASF84
 2952 06a8 01       		.byte	0x1
 2953 06a9 EC       		.byte	0xec
 2954 06aa 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 68


 2955 06ae 02       		.uleb128 0x2
 2956 06af 91       		.byte	0x91
 2957 06b0 69       		.sleb128 -23
 2958 06b1 15       		.uleb128 0x15
 2959 06b2 51000000 		.4byte	.LASF85
 2960 06b6 01       		.byte	0x1
 2961 06b7 EC       		.byte	0xec
 2962 06b8 81000000 		.4byte	0x81
 2963 06bc 02       		.uleb128 0x2
 2964 06bd 91       		.byte	0x91
 2965 06be 68       		.sleb128 -24
 2966 06bf 11       		.uleb128 0x11
 2967 06c0 A1070000 		.4byte	.LASF105
 2968 06c4 01       		.byte	0x1
 2969 06c5 EF       		.byte	0xef
 2970 06c6 D0040000 		.4byte	0x4d0
 2971 06ca 02       		.uleb128 0x2
 2972 06cb 91       		.byte	0x91
 2973 06cc 70       		.sleb128 -16
 2974 06cd 00       		.byte	0
 2975 06ce 19       		.uleb128 0x19
 2976 06cf 74060000 		.4byte	.LASF107
 2977 06d3 01       		.byte	0x1
 2978 06d4 0501     		.2byte	0x105
 2979 06d6 00000000 		.4byte	.LFB72
 2980 06da 2C010000 		.4byte	.LFE72-.LFB72
 2981 06de 01       		.uleb128 0x1
 2982 06df 9C       		.byte	0x9c
 2983 06e0 45070000 		.4byte	0x745
 2984 06e4 1A       		.uleb128 0x1a
 2985 06e5 55010000 		.4byte	.LASF108
 2986 06e9 01       		.byte	0x1
 2987 06ea 0D01     		.2byte	0x10d
 2988 06ec C9010000 		.4byte	0x1c9
 2989 06f0 03       		.uleb128 0x3
 2990 06f1 91       		.byte	0x91
 2991 06f2 EC7C     		.sleb128 -404
 2992 06f4 1A       		.uleb128 0x1a
 2993 06f5 85080000 		.4byte	.LASF109
 2994 06f9 01       		.byte	0x1
 2995 06fa 1101     		.2byte	0x111
 2996 06fc C9010000 		.4byte	0x1c9
 2997 0700 03       		.uleb128 0x3
 2998 0701 91       		.byte	0x91
 2999 0702 E879     		.sleb128 -792
 3000 0704 1A       		.uleb128 0x1a
 3001 0705 DC070000 		.4byte	.LASF110
 3002 0709 01       		.byte	0x1
 3003 070a 1501     		.2byte	0x115
 3004 070c C9010000 		.4byte	0x1c9
 3005 0710 03       		.uleb128 0x3
 3006 0711 91       		.byte	0x91
 3007 0712 E476     		.sleb128 -1180
 3008 0714 1A       		.uleb128 0x1a
 3009 0715 02010000 		.4byte	.LASF111
 3010 0719 01       		.byte	0x1
 3011 071a 1901     		.2byte	0x119
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 69


 3012 071c C9010000 		.4byte	0x1c9
 3013 0720 03       		.uleb128 0x3
 3014 0721 91       		.byte	0x91
 3015 0722 E073     		.sleb128 -1568
 3016 0724 1A       		.uleb128 0x1a
 3017 0725 15040000 		.4byte	.LASF112
 3018 0729 01       		.byte	0x1
 3019 072a 1D01     		.2byte	0x11d
 3020 072c C9010000 		.4byte	0x1c9
 3021 0730 03       		.uleb128 0x3
 3022 0731 91       		.byte	0x91
 3023 0732 DC70     		.sleb128 -1956
 3024 0734 1A       		.uleb128 0x1a
 3025 0735 00000000 		.4byte	.LASF113
 3026 0739 01       		.byte	0x1
 3027 073a 2101     		.2byte	0x121
 3028 073c C9010000 		.4byte	0x1c9
 3029 0740 03       		.uleb128 0x3
 3030 0741 91       		.byte	0x91
 3031 0742 D86D     		.sleb128 -2344
 3032 0744 00       		.byte	0
 3033 0745 1B       		.uleb128 0x1b
 3034 0746 72080000 		.4byte	.LASF168
 3035 074a 01       		.byte	0x1
 3036 074b 2C01     		.2byte	0x12c
 3037 074d 68000000 		.4byte	0x68
 3038 0751 00000000 		.4byte	.LFB73
 3039 0755 1E000000 		.4byte	.LFE73-.LFB73
 3040 0759 01       		.uleb128 0x1
 3041 075a 9C       		.byte	0x9c
 3042 075b 1C       		.uleb128 0x1c
 3043 075c 6E020000 		.4byte	.LASF114
 3044 0760 01       		.byte	0x1
 3045 0761 4201     		.2byte	0x142
 3046 0763 81000000 		.4byte	0x81
 3047 0767 00000000 		.4byte	.LFB74
 3048 076b 5C040000 		.4byte	.LFE74-.LFB74
 3049 076f 01       		.uleb128 0x1
 3050 0770 9C       		.byte	0x9c
 3051 0771 B6080000 		.4byte	0x8b6
 3052 0775 1D       		.uleb128 0x1d
 3053 0776 86000000 		.4byte	.LBB2
 3054 077a A8030000 		.4byte	.LBE2-.LBB2
 3055 077e 1A       		.uleb128 0x1a
 3056 077f 57050000 		.4byte	.LASF115
 3057 0783 01       		.byte	0x1
 3058 0784 7801     		.2byte	0x178
 3059 0786 79030000 		.4byte	0x379
 3060 078a 03       		.uleb128 0x3
 3061 078b 91       		.byte	0x91
 3062 078c AC7F     		.sleb128 -84
 3063 078e 1A       		.uleb128 0x1a
 3064 078f 46020000 		.4byte	.LASF116
 3065 0793 01       		.byte	0x1
 3066 0794 7D01     		.2byte	0x17d
 3067 0796 79030000 		.4byte	0x379
 3068 079a 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 70


 3069 079b 91       		.byte	0x91
 3070 079c 987F     		.sleb128 -104
 3071 079e 1A       		.uleb128 0x1a
 3072 079f 7A030000 		.4byte	.LASF117
 3073 07a3 01       		.byte	0x1
 3074 07a4 9001     		.2byte	0x190
 3075 07a6 8D000000 		.4byte	0x8d
 3076 07aa 02       		.uleb128 0x2
 3077 07ab 91       		.byte	0x91
 3078 07ac 66       		.sleb128 -26
 3079 07ad 1A       		.uleb128 0x1a
 3080 07ae 00040000 		.4byte	.LASF118
 3081 07b2 01       		.byte	0x1
 3082 07b3 9101     		.2byte	0x191
 3083 07b5 79030000 		.4byte	0x379
 3084 07b9 03       		.uleb128 0x3
 3085 07ba 91       		.byte	0x91
 3086 07bb 847F     		.sleb128 -124
 3087 07bd 1A       		.uleb128 0x1a
 3088 07be 2F070000 		.4byte	.LASF119
 3089 07c2 01       		.byte	0x1
 3090 07c3 A601     		.2byte	0x1a6
 3091 07c5 B6080000 		.4byte	0x8b6
 3092 07c9 03       		.uleb128 0x3
 3093 07ca 91       		.byte	0x91
 3094 07cb 9C75     		.sleb128 -1380
 3095 07cd 1A       		.uleb128 0x1a
 3096 07ce BC070000 		.4byte	.LASF30
 3097 07d2 01       		.byte	0x1
 3098 07d3 A701     		.2byte	0x1a7
 3099 07d5 81000000 		.4byte	0x81
 3100 07d9 02       		.uleb128 0x2
 3101 07da 91       		.byte	0x91
 3102 07db 65       		.sleb128 -27
 3103 07dc 1A       		.uleb128 0x1a
 3104 07dd E9060000 		.4byte	.LASF120
 3105 07e1 01       		.byte	0x1
 3106 07e2 AE01     		.2byte	0x1ae
 3107 07e4 EC000000 		.4byte	0xec
 3108 07e8 02       		.uleb128 0x2
 3109 07e9 91       		.byte	0x91
 3110 07ea 6C       		.sleb128 -20
 3111 07eb 1A       		.uleb128 0x1a
 3112 07ec 72010000 		.4byte	.LASF121
 3113 07f0 01       		.byte	0x1
 3114 07f1 B201     		.2byte	0x1b2
 3115 07f3 A5000000 		.4byte	0xa5
 3116 07f7 02       		.uleb128 0x2
 3117 07f8 91       		.byte	0x91
 3118 07f9 64       		.sleb128 -28
 3119 07fa 1A       		.uleb128 0x1a
 3120 07fb 77020000 		.4byte	.LASF122
 3121 07ff 01       		.byte	0x1
 3122 0800 E301     		.2byte	0x1e3
 3123 0802 4C000000 		.4byte	0x4c
 3124 0806 02       		.uleb128 0x2
 3125 0807 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 71


 3126 0808 5C       		.sleb128 -36
 3127 0809 1E       		.uleb128 0x1e
 3128 080a F2000000 		.4byte	.LBB3
 3129 080e 2C000000 		.4byte	.LBE3-.LBB3
 3130 0812 36080000 		.4byte	0x836
 3131 0816 1A       		.uleb128 0x1a
 3132 0817 A0060000 		.4byte	.LASF123
 3133 081b 01       		.byte	0x1
 3134 081c 8501     		.2byte	0x185
 3135 081e 8D000000 		.4byte	0x8d
 3136 0822 02       		.uleb128 0x2
 3137 0823 91       		.byte	0x91
 3138 0824 68       		.sleb128 -24
 3139 0825 1A       		.uleb128 0x1a
 3140 0826 E4010000 		.4byte	.LASF124
 3141 082a 01       		.byte	0x1
 3142 082b 8601     		.2byte	0x186
 3143 082d 79030000 		.4byte	0x379
 3144 0831 03       		.uleb128 0x3
 3145 0832 91       		.byte	0x91
 3146 0833 F07E     		.sleb128 -144
 3147 0835 00       		.byte	0
 3148 0836 1E       		.uleb128 0x1e
 3149 0837 20010000 		.4byte	.LBB4
 3150 083b 20000000 		.4byte	.LBE4-.LBB4
 3151 083f 54080000 		.4byte	0x854
 3152 0843 1A       		.uleb128 0x1a
 3153 0844 E4010000 		.4byte	.LASF124
 3154 0848 01       		.byte	0x1
 3155 0849 8A01     		.2byte	0x18a
 3156 084b 79030000 		.4byte	0x379
 3157 084f 03       		.uleb128 0x3
 3158 0850 91       		.byte	0x91
 3159 0851 DC7E     		.sleb128 -164
 3160 0853 00       		.byte	0
 3161 0854 1E       		.uleb128 0x1e
 3162 0855 60020000 		.4byte	.LBB5
 3163 0859 4E010000 		.4byte	.LBE5-.LBB5
 3164 085d 8B080000 		.4byte	0x88b
 3165 0861 1A       		.uleb128 0x1a
 3166 0862 50050000 		.4byte	.LASF125
 3167 0866 01       		.byte	0x1
 3168 0867 B701     		.2byte	0x1b7
 3169 0869 A5000000 		.4byte	0xa5
 3170 086d 02       		.uleb128 0x2
 3171 086e 91       		.byte	0x91
 3172 086f 6B       		.sleb128 -21
 3173 0870 1D       		.uleb128 0x1d
 3174 0871 68020000 		.4byte	.LBB6
 3175 0875 2A010000 		.4byte	.LBE6-.LBB6
 3176 0879 1A       		.uleb128 0x1a
 3177 087a 47030000 		.4byte	.LASF126
 3178 087e 01       		.byte	0x1
 3179 087f B901     		.2byte	0x1b9
 3180 0881 C6080000 		.4byte	0x8c6
 3181 0885 03       		.uleb128 0x3
 3182 0886 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 72


 3183 0887 E476     		.sleb128 -1180
 3184 0889 00       		.byte	0
 3185 088a 00       		.byte	0
 3186 088b 1D       		.uleb128 0x1d
 3187 088c C8030000 		.4byte	.LBB7
 3188 0890 36000000 		.4byte	.LBE7-.LBB7
 3189 0894 1A       		.uleb128 0x1a
 3190 0895 54020000 		.4byte	.LASF127
 3191 0899 01       		.byte	0x1
 3192 089a DA01     		.2byte	0x1da
 3193 089c 68000000 		.4byte	0x68
 3194 08a0 02       		.uleb128 0x2
 3195 08a1 91       		.byte	0x91
 3196 08a2 60       		.sleb128 -32
 3197 08a3 1A       		.uleb128 0x1a
 3198 08a4 12060000 		.4byte	.LASF128
 3199 08a8 01       		.byte	0x1
 3200 08a9 DB01     		.2byte	0x1db
 3201 08ab AF050000 		.4byte	0x5af
 3202 08af 03       		.uleb128 0x3
 3203 08b0 91       		.byte	0x91
 3204 08b1 D07E     		.sleb128 -176
 3205 08b3 00       		.byte	0
 3206 08b4 00       		.byte	0
 3207 08b5 00       		.byte	0
 3208 08b6 07       		.uleb128 0x7
 3209 08b7 D7000000 		.4byte	0xd7
 3210 08bb C6080000 		.4byte	0x8c6
 3211 08bf 08       		.uleb128 0x8
 3212 08c0 E5000000 		.4byte	0xe5
 3213 08c4 C7       		.byte	0xc7
 3214 08c5 00       		.byte	0
 3215 08c6 07       		.uleb128 0x7
 3216 08c7 D7000000 		.4byte	0xd7
 3217 08cb D7080000 		.4byte	0x8d7
 3218 08cf 1F       		.uleb128 0x1f
 3219 08d0 E5000000 		.4byte	0xe5
 3220 08d4 E803     		.2byte	0x3e8
 3221 08d6 00       		.byte	0
 3222 08d7 1C       		.uleb128 0x1c
 3223 08d8 91050000 		.4byte	.LASF129
 3224 08dc 01       		.byte	0x1
 3225 08dd F801     		.2byte	0x1f8
 3226 08df 81000000 		.4byte	0x81
 3227 08e3 00000000 		.4byte	.LFB75
 3228 08e7 44000000 		.4byte	.LFE75-.LFB75
 3229 08eb 01       		.uleb128 0x1
 3230 08ec 9C       		.byte	0x9c
 3231 08ed 0B090000 		.4byte	0x90b
 3232 08f1 1D       		.uleb128 0x1d
 3233 08f2 20000000 		.4byte	.LBB8
 3234 08f6 1A000000 		.4byte	.LBE8-.LBB8
 3235 08fa 1A       		.uleb128 0x1a
 3236 08fb 77020000 		.4byte	.LASF122
 3237 08ff 01       		.byte	0x1
 3238 0900 0302     		.2byte	0x203
 3239 0902 4C000000 		.4byte	0x4c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 73


 3240 0906 02       		.uleb128 0x2
 3241 0907 91       		.byte	0x91
 3242 0908 74       		.sleb128 -12
 3243 0909 00       		.byte	0
 3244 090a 00       		.byte	0
 3245 090b 1C       		.uleb128 0x1c
 3246 090c A8030000 		.4byte	.LASF130
 3247 0910 01       		.byte	0x1
 3248 0911 1802     		.2byte	0x218
 3249 0913 81000000 		.4byte	0x81
 3250 0917 00000000 		.4byte	.LFB76
 3251 091b 70020000 		.4byte	.LFE76-.LFB76
 3252 091f 01       		.uleb128 0x1
 3253 0920 9C       		.byte	0x9c
 3254 0921 9C090000 		.4byte	0x99c
 3255 0925 1A       		.uleb128 0x1a
 3256 0926 DD040000 		.4byte	.LASF61
 3257 092a 01       		.byte	0x1
 3258 092b 1B02     		.2byte	0x21b
 3259 092d 4C000000 		.4byte	0x4c
 3260 0931 02       		.uleb128 0x2
 3261 0932 91       		.byte	0x91
 3262 0933 6C       		.sleb128 -20
 3263 0934 1A       		.uleb128 0x1a
 3264 0935 EF060000 		.4byte	.LASF131
 3265 0939 01       		.byte	0x1
 3266 093a 1C02     		.2byte	0x21c
 3267 093c 9C090000 		.4byte	0x99c
 3268 0940 02       		.uleb128 0x2
 3269 0941 91       		.byte	0x91
 3270 0942 4C       		.sleb128 -52
 3271 0943 1A       		.uleb128 0x1a
 3272 0944 D7020000 		.4byte	.LASF60
 3273 0948 01       		.byte	0x1
 3274 0949 2002     		.2byte	0x220
 3275 094b 79030000 		.4byte	0x379
 3276 094f 03       		.uleb128 0x3
 3277 0950 91       		.byte	0x91
 3278 0951 B87F     		.sleb128 -72
 3279 0953 1A       		.uleb128 0x1a
 3280 0954 52030000 		.4byte	.LASF132
 3281 0958 01       		.byte	0x1
 3282 0959 3E02     		.2byte	0x23e
 3283 095b 85020000 		.4byte	0x285
 3284 095f 03       		.uleb128 0x3
 3285 0960 91       		.byte	0x91
 3286 0961 9C7F     		.sleb128 -100
 3287 0963 1E       		.uleb128 0x1e
 3288 0964 22000000 		.4byte	.LBB9
 3289 0968 78000000 		.4byte	.LBE9-.LBB9
 3290 096c 81090000 		.4byte	0x981
 3291 0970 1A       		.uleb128 0x1a
 3292 0971 5A070000 		.4byte	.LASF133
 3293 0975 01       		.byte	0x1
 3294 0976 2602     		.2byte	0x226
 3295 0978 1D020000 		.4byte	0x21d
 3296 097c 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 74


 3297 097d 91       		.byte	0x91
 3298 097e 807F     		.sleb128 -128
 3299 0980 00       		.byte	0
 3300 0981 1D       		.uleb128 0x1d
 3301 0982 1E010000 		.4byte	.LBB10
 3302 0986 EC000000 		.4byte	.LBE10-.LBB10
 3303 098a 1A       		.uleb128 0x1a
 3304 098b B1070000 		.4byte	.LASF134
 3305 098f 01       		.byte	0x1
 3306 0990 5902     		.2byte	0x259
 3307 0992 C9020000 		.4byte	0x2c9
 3308 0996 03       		.uleb128 0x3
 3309 0997 91       		.byte	0x91
 3310 0998 F07E     		.sleb128 -144
 3311 099a 00       		.byte	0
 3312 099b 00       		.byte	0
 3313 099c 07       		.uleb128 0x7
 3314 099d D7000000 		.4byte	0xd7
 3315 09a1 AC090000 		.4byte	0x9ac
 3316 09a5 08       		.uleb128 0x8
 3317 09a6 E5000000 		.4byte	0xe5
 3318 09aa 1F       		.byte	0x1f
 3319 09ab 00       		.byte	0
 3320 09ac 20       		.uleb128 0x20
 3321 09ad 15030000 		.4byte	.LASF135
 3322 09b1 01       		.byte	0x1
 3323 09b2 7F02     		.2byte	0x27f
 3324 09b4 81000000 		.4byte	0x81
 3325 09b8 00000000 		.4byte	.LFB77
 3326 09bc 74000000 		.4byte	.LFE77-.LFB77
 3327 09c0 01       		.uleb128 0x1
 3328 09c1 9C       		.byte	0x9c
 3329 09c2 F2090000 		.4byte	0x9f2
 3330 09c6 21       		.uleb128 0x21
 3331 09c7 DD040000 		.4byte	.LASF61
 3332 09cb 01       		.byte	0x1
 3333 09cc 7F02     		.2byte	0x27f
 3334 09ce 4C000000 		.4byte	0x4c
 3335 09d2 02       		.uleb128 0x2
 3336 09d3 91       		.byte	0x91
 3337 09d4 64       		.sleb128 -28
 3338 09d5 22       		.uleb128 0x22
 3339 09d6 7400     		.ascii	"t\000"
 3340 09d8 01       		.byte	0x1
 3341 09d9 8602     		.2byte	0x286
 3342 09db F2090000 		.4byte	0x9f2
 3343 09df 02       		.uleb128 0x2
 3344 09e0 91       		.byte	0x91
 3345 09e1 74       		.sleb128 -12
 3346 09e2 1A       		.uleb128 0x1a
 3347 09e3 BC040000 		.4byte	.LASF136
 3348 09e7 01       		.byte	0x1
 3349 09e8 8B02     		.2byte	0x28b
 3350 09ea 6B010000 		.4byte	0x16b
 3351 09ee 02       		.uleb128 0x2
 3352 09ef 91       		.byte	0x91
 3353 09f0 68       		.sleb128 -24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 75


 3354 09f1 00       		.byte	0
 3355 09f2 06       		.uleb128 0x6
 3356 09f3 04       		.byte	0x4
 3357 09f4 D4020000 		.4byte	0x2d4
 3358 09f8 20       		.uleb128 0x20
 3359 09f9 B6020000 		.4byte	.LASF137
 3360 09fd 01       		.byte	0x1
 3361 09fe A802     		.2byte	0x2a8
 3362 0a00 81000000 		.4byte	0x81
 3363 0a04 00000000 		.4byte	.LFB78
 3364 0a08 38010000 		.4byte	.LFE78-.LFB78
 3365 0a0c 01       		.uleb128 0x1
 3366 0a0d 9C       		.byte	0x9c
 3367 0a0e 710A0000 		.4byte	0xa71
 3368 0a12 21       		.uleb128 0x21
 3369 0a13 DD020000 		.4byte	.LASF138
 3370 0a17 01       		.byte	0x1
 3371 0a18 A802     		.2byte	0x2a8
 3372 0a1a EC000000 		.4byte	0xec
 3373 0a1e 03       		.uleb128 0x3
 3374 0a1f 91       		.byte	0x91
 3375 0a20 9C7E     		.sleb128 -228
 3376 0a22 21       		.uleb128 0x21
 3377 0a23 D2020000 		.4byte	.LASF139
 3378 0a27 01       		.byte	0x1
 3379 0a28 A802     		.2byte	0x2a8
 3380 0a2a 68000000 		.4byte	0x68
 3381 0a2e 03       		.uleb128 0x3
 3382 0a2f 91       		.byte	0x91
 3383 0a30 987E     		.sleb128 -232
 3384 0a32 21       		.uleb128 0x21
 3385 0a33 85040000 		.4byte	.LASF140
 3386 0a37 01       		.byte	0x1
 3387 0a38 A802     		.2byte	0x2a8
 3388 0a3a EC000000 		.4byte	0xec
 3389 0a3e 03       		.uleb128 0x3
 3390 0a3f 91       		.byte	0x91
 3391 0a40 947E     		.sleb128 -236
 3392 0a42 1A       		.uleb128 0x1a
 3393 0a43 D5010000 		.4byte	.LASF141
 3394 0a47 01       		.byte	0x1
 3395 0a48 AA02     		.2byte	0x2aa
 3396 0a4a 81000000 		.4byte	0x81
 3397 0a4e 02       		.uleb128 0x2
 3398 0a4f 91       		.byte	0x91
 3399 0a50 77       		.sleb128 -9
 3400 0a51 1A       		.uleb128 0x1a
 3401 0a52 3C000000 		.4byte	.LASF142
 3402 0a56 01       		.byte	0x1
 3403 0a57 B102     		.2byte	0x2b1
 3404 0a59 710A0000 		.4byte	0xa71
 3405 0a5d 02       		.uleb128 0x2
 3406 0a5e 91       		.byte	0x91
 3407 0a5f 68       		.sleb128 -24
 3408 0a60 1A       		.uleb128 0x1a
 3409 0a61 2F070000 		.4byte	.LASF119
 3410 0a65 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 76


 3411 0a66 B902     		.2byte	0x2b9
 3412 0a68 B6080000 		.4byte	0x8b6
 3413 0a6c 03       		.uleb128 0x3
 3414 0a6d 91       		.byte	0x91
 3415 0a6e A07E     		.sleb128 -224
 3416 0a70 00       		.byte	0
 3417 0a71 07       		.uleb128 0x7
 3418 0a72 D7000000 		.4byte	0xd7
 3419 0a76 810A0000 		.4byte	0xa81
 3420 0a7a 08       		.uleb128 0x8
 3421 0a7b E5000000 		.4byte	0xe5
 3422 0a7f 0B       		.byte	0xb
 3423 0a80 00       		.byte	0
 3424 0a81 23       		.uleb128 0x23
 3425 0a82 48010000 		.4byte	.LASF143
 3426 0a86 0D       		.byte	0xd
 3427 0a87 1207     		.2byte	0x712
 3428 0a89 8D0A0000 		.4byte	0xa8d
 3429 0a8d 0C       		.uleb128 0xc
 3430 0a8e 76000000 		.4byte	0x76
 3431 0a92 24       		.uleb128 0x24
 3432 0a93 2C000000 		.4byte	.LASF144
 3433 0a97 0A       		.byte	0xa
 3434 0a98 11       		.byte	0x11
 3435 0a99 85040000 		.4byte	0x485
 3436 0a9d 05       		.uleb128 0x5
 3437 0a9e 03       		.byte	0x3
 3438 0a9f 00000000 		.4byte	buffer_overflow
 3439 0aa3 24       		.uleb128 0x24
 3440 0aa4 6C040000 		.4byte	.LASF145
 3441 0aa8 0A       		.byte	0xa
 3442 0aa9 22       		.byte	0x22
 3443 0aaa 8D000000 		.4byte	0x8d
 3444 0aae 05       		.uleb128 0x5
 3445 0aaf 03       		.byte	0x3
 3446 0ab0 00000000 		.4byte	dataPointsInStack
 3447 0ab4 24       		.uleb128 0x24
 3448 0ab5 C3070000 		.4byte	.LASF146
 3449 0ab9 0A       		.byte	0xa
 3450 0aba 23       		.byte	0x23
 3451 0abb 8D000000 		.4byte	0x8d
 3452 0abf 05       		.uleb128 0x5
 3453 0ac0 03       		.byte	0x3
 3454 0ac1 00000000 		.4byte	dataPointsInStackDesired
 3455 0ac5 07       		.uleb128 0x7
 3456 0ac6 89030000 		.4byte	0x389
 3457 0aca D50A0000 		.4byte	0xad5
 3458 0ace 08       		.uleb128 0x8
 3459 0acf E5000000 		.4byte	0xe5
 3460 0ad3 95       		.byte	0x95
 3461 0ad4 00       		.byte	0
 3462 0ad5 24       		.uleb128 0x24
 3463 0ad6 B9030000 		.4byte	.LASF147
 3464 0ada 0A       		.byte	0xa
 3465 0adb 24       		.byte	0x24
 3466 0adc C50A0000 		.4byte	0xac5
 3467 0ae0 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 77


 3468 0ae1 03       		.byte	0x3
 3469 0ae2 00000000 		.4byte	data
 3470 0ae6 24       		.uleb128 0x24
 3471 0ae7 2F010000 		.4byte	.LASF148
 3472 0aeb 0B       		.byte	0xb
 3473 0aec 21       		.byte	0x21
 3474 0aed 81000000 		.4byte	0x81
 3475 0af1 05       		.uleb128 0x5
 3476 0af2 03       		.byte	0x3
 3477 0af3 00000000 		.4byte	modem_state
 3478 0af7 24       		.uleb128 0x24
 3479 0af8 29040000 		.4byte	.LASF149
 3480 0afc 0B       		.byte	0xb
 3481 0afd 64       		.byte	0x64
 3482 0afe BD000000 		.4byte	0xbd
 3483 0b02 05       		.uleb128 0x5
 3484 0b03 03       		.byte	0x3
 3485 0b04 00000000 		.4byte	modem_start_time_stamp
 3486 0b08 24       		.uleb128 0x24
 3487 0b09 CF030000 		.4byte	.LASF87
 3488 0b0d 0B       		.byte	0xb
 3489 0b0e 65       		.byte	0x65
 3490 0b0f C1030000 		.4byte	0x3c1
 3491 0b13 05       		.uleb128 0x5
 3492 0b14 03       		.byte	0x3
 3493 0b15 00000000 		.4byte	modem_info
 3494 0b19 24       		.uleb128 0x24
 3495 0b1a 18070000 		.4byte	.LASF150
 3496 0b1e 0B       		.byte	0xb
 3497 0b1f 66       		.byte	0x66
 3498 0b20 35040000 		.4byte	0x435
 3499 0b24 05       		.uleb128 0x5
 3500 0b25 03       		.byte	0x3
 3501 0b26 00000000 		.4byte	modem_stats
 3502 0b2a 24       		.uleb128 0x24
 3503 0b2b 2F050000 		.4byte	.LASF151
 3504 0b2f 0B       		.byte	0xb
 3505 0b30 67       		.byte	0x67
 3506 0b31 8C040000 		.4byte	0x48c
 3507 0b35 05       		.uleb128 0x5
 3508 0b36 03       		.byte	0x3
 3509 0b37 00000000 		.4byte	updatable_parameters
 3510 0b3b 07       		.uleb128 0x7
 3511 0b3c D7000000 		.4byte	0xd7
 3512 0b40 4C0B0000 		.4byte	0xb4c
 3513 0b44 1F       		.uleb128 0x1f
 3514 0b45 E5000000 		.4byte	0xe5
 3515 0b49 0F27     		.2byte	0x270f
 3516 0b4b 00       		.byte	0
 3517 0b4c 24       		.uleb128 0x24
 3518 0b4d 6F050000 		.4byte	.LASF152
 3519 0b51 0C       		.byte	0xc
 3520 0b52 18       		.byte	0x18
 3521 0b53 3B0B0000 		.4byte	0xb3b
 3522 0b57 05       		.uleb128 0x5
 3523 0b58 03       		.byte	0x3
 3524 0b59 00000000 		.4byte	http_request
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 78


 3525 0b5d 24       		.uleb128 0x24
 3526 0b5e F2070000 		.4byte	.LASF153
 3527 0b62 0C       		.byte	0xc
 3528 0b63 19       		.byte	0x19
 3529 0b64 3B0B0000 		.4byte	0xb3b
 3530 0b68 05       		.uleb128 0x5
 3531 0b69 03       		.byte	0x3
 3532 0b6a 00000000 		.4byte	http_body
 3533 0b6e 24       		.uleb128 0x24
 3534 0b6f 24070000 		.4byte	.LASF154
 3535 0b73 0C       		.byte	0xc
 3536 0b74 1A       		.byte	0x1a
 3537 0b75 B6080000 		.4byte	0x8b6
 3538 0b79 05       		.uleb128 0x5
 3539 0b7a 03       		.byte	0x3
 3540 0b7b 00000000 		.4byte	http_route
 3541 0b7f 24       		.uleb128 0x24
 3542 0b80 4D060000 		.4byte	.LASF155
 3543 0b84 0C       		.byte	0xc
 3544 0b85 41       		.byte	0x41
 3545 0b86 07050000 		.4byte	0x507
 3546 0b8a 05       		.uleb128 0x5
 3547 0b8b 03       		.byte	0x3
 3548 0b8c 00000000 		.4byte	system_info
 3549 0b90 24       		.uleb128 0x24
 3550 0b91 ED050000 		.4byte	.LASF156
 3551 0b95 0C       		.byte	0xc
 3552 0b96 53       		.byte	0x53
 3553 0b97 43050000 		.4byte	0x543
 3554 0b9b 05       		.uleb128 0x5
 3555 0b9c 03       		.byte	0x3
 3556 0b9d 00000000 		.4byte	system_settings
 3557 0ba1 24       		.uleb128 0x24
 3558 0ba2 3B010000 		.4byte	.LASF157
 3559 0ba6 0C       		.byte	0xc
 3560 0ba7 6F       		.byte	0x6f
 3561 0ba8 D0040000 		.4byte	0x4d0
 3562 0bac 05       		.uleb128 0x5
 3563 0bad 03       		.byte	0x3
 3564 0bae 00000000 		.4byte	alarmMeasure
 3565 0bb2 24       		.uleb128 0x24
 3566 0bb3 7F010000 		.4byte	.LASF158
 3567 0bb7 0C       		.byte	0xc
 3568 0bb8 70       		.byte	0x70
 3569 0bb9 81000000 		.4byte	0x81
 3570 0bbd 05       		.uleb128 0x5
 3571 0bbe 03       		.byte	0x3
 3572 0bbf 00000000 		.4byte	timeToMeasure
 3573 0bc3 24       		.uleb128 0x24
 3574 0bc4 EA020000 		.4byte	.LASF159
 3575 0bc8 0C       		.byte	0xc
 3576 0bc9 71       		.byte	0x71
 3577 0bca D0040000 		.4byte	0x4d0
 3578 0bce 05       		.uleb128 0x5
 3579 0bcf 03       		.byte	0x3
 3580 0bd0 00000000 		.4byte	alarmSync
 3581 0bd4 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 79


 3582 0bd5 A5010000 		.4byte	.LASF160
 3583 0bd9 0C       		.byte	0xc
 3584 0bda 72       		.byte	0x72
 3585 0bdb 81000000 		.4byte	0x81
 3586 0bdf 05       		.uleb128 0x5
 3587 0be0 03       		.byte	0x3
 3588 0be1 00000000 		.4byte	timeToSync
 3589 0be5 24       		.uleb128 0x24
 3590 0be6 C6040000 		.4byte	.LASF161
 3591 0bea 0C       		.byte	0xc
 3592 0beb 73       		.byte	0x73
 3593 0bec 81000000 		.4byte	0x81
 3594 0bf0 05       		.uleb128 0x5
 3595 0bf1 03       		.byte	0x3
 3596 0bf2 00000000 		.4byte	timeToSycnRemoteParams
 3597 0bf6 25       		.uleb128 0x25
 3598 0bf7 68657900 		.ascii	"hey\000"
 3599 0bfb 0C       		.byte	0xc
 3600 0bfc 74       		.byte	0x74
 3601 0bfd 81000000 		.4byte	0x81
 3602 0c01 05       		.uleb128 0x5
 3603 0c02 03       		.byte	0x3
 3604 0c03 00000000 		.4byte	hey
 3605 0c07 07       		.uleb128 0x7
 3606 0c08 D7000000 		.4byte	0xd7
 3607 0c0c 170C0000 		.4byte	0xc17
 3608 0c10 08       		.uleb128 0x8
 3609 0c11 E5000000 		.4byte	0xe5
 3610 0c15 1D       		.byte	0x1d
 3611 0c16 00       		.byte	0
 3612 0c17 24       		.uleb128 0x24
 3613 0c18 A7050000 		.4byte	.LASF162
 3614 0c1c 01       		.byte	0x1
 3615 0c1d 1D       		.byte	0x1d
 3616 0c1e 070C0000 		.4byte	0xc07
 3617 0c22 05       		.uleb128 0x5
 3618 0c23 03       		.byte	0x3
 3619 0c24 00000000 		.4byte	Data_fileName
 3620 0c28 24       		.uleb128 0x24
 3621 0c29 6E030000 		.4byte	.LASF95
 3622 0c2d 01       		.byte	0x1
 3623 0c2e 1E       		.byte	0x1e
 3624 0c2f 81000000 		.4byte	0x81
 3625 0c33 05       		.uleb128 0x5
 3626 0c34 03       		.byte	0x3
 3627 0c35 00000000 		.4byte	try_counter
 3628 0c39 00       		.byte	0
 3629              		.section	.debug_abbrev,"",%progbits
 3630              	.Ldebug_abbrev0:
 3631 0000 01       		.uleb128 0x1
 3632 0001 11       		.uleb128 0x11
 3633 0002 01       		.byte	0x1
 3634 0003 25       		.uleb128 0x25
 3635 0004 0E       		.uleb128 0xe
 3636 0005 13       		.uleb128 0x13
 3637 0006 0B       		.uleb128 0xb
 3638 0007 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 80


 3639 0008 0E       		.uleb128 0xe
 3640 0009 1B       		.uleb128 0x1b
 3641 000a 0E       		.uleb128 0xe
 3642 000b 55       		.uleb128 0x55
 3643 000c 17       		.uleb128 0x17
 3644 000d 11       		.uleb128 0x11
 3645 000e 01       		.uleb128 0x1
 3646 000f 10       		.uleb128 0x10
 3647 0010 17       		.uleb128 0x17
 3648 0011 00       		.byte	0
 3649 0012 00       		.byte	0
 3650 0013 02       		.uleb128 0x2
 3651 0014 24       		.uleb128 0x24
 3652 0015 00       		.byte	0
 3653 0016 0B       		.uleb128 0xb
 3654 0017 0B       		.uleb128 0xb
 3655 0018 3E       		.uleb128 0x3e
 3656 0019 0B       		.uleb128 0xb
 3657 001a 03       		.uleb128 0x3
 3658 001b 0E       		.uleb128 0xe
 3659 001c 00       		.byte	0
 3660 001d 00       		.byte	0
 3661 001e 03       		.uleb128 0x3
 3662 001f 16       		.uleb128 0x16
 3663 0020 00       		.byte	0
 3664 0021 03       		.uleb128 0x3
 3665 0022 0E       		.uleb128 0xe
 3666 0023 3A       		.uleb128 0x3a
 3667 0024 0B       		.uleb128 0xb
 3668 0025 3B       		.uleb128 0x3b
 3669 0026 0B       		.uleb128 0xb
 3670 0027 49       		.uleb128 0x49
 3671 0028 13       		.uleb128 0x13
 3672 0029 00       		.byte	0
 3673 002a 00       		.byte	0
 3674 002b 04       		.uleb128 0x4
 3675 002c 24       		.uleb128 0x24
 3676 002d 00       		.byte	0
 3677 002e 0B       		.uleb128 0xb
 3678 002f 0B       		.uleb128 0xb
 3679 0030 3E       		.uleb128 0x3e
 3680 0031 0B       		.uleb128 0xb
 3681 0032 03       		.uleb128 0x3
 3682 0033 08       		.uleb128 0x8
 3683 0034 00       		.byte	0
 3684 0035 00       		.byte	0
 3685 0036 05       		.uleb128 0x5
 3686 0037 16       		.uleb128 0x16
 3687 0038 00       		.byte	0
 3688 0039 03       		.uleb128 0x3
 3689 003a 0E       		.uleb128 0xe
 3690 003b 3A       		.uleb128 0x3a
 3691 003c 0B       		.uleb128 0xb
 3692 003d 3B       		.uleb128 0x3b
 3693 003e 05       		.uleb128 0x5
 3694 003f 49       		.uleb128 0x49
 3695 0040 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 81


 3696 0041 00       		.byte	0
 3697 0042 00       		.byte	0
 3698 0043 06       		.uleb128 0x6
 3699 0044 0F       		.uleb128 0xf
 3700 0045 00       		.byte	0
 3701 0046 0B       		.uleb128 0xb
 3702 0047 0B       		.uleb128 0xb
 3703 0048 49       		.uleb128 0x49
 3704 0049 13       		.uleb128 0x13
 3705 004a 00       		.byte	0
 3706 004b 00       		.byte	0
 3707 004c 07       		.uleb128 0x7
 3708 004d 01       		.uleb128 0x1
 3709 004e 01       		.byte	0x1
 3710 004f 49       		.uleb128 0x49
 3711 0050 13       		.uleb128 0x13
 3712 0051 01       		.uleb128 0x1
 3713 0052 13       		.uleb128 0x13
 3714 0053 00       		.byte	0
 3715 0054 00       		.byte	0
 3716 0055 08       		.uleb128 0x8
 3717 0056 21       		.uleb128 0x21
 3718 0057 00       		.byte	0
 3719 0058 49       		.uleb128 0x49
 3720 0059 13       		.uleb128 0x13
 3721 005a 2F       		.uleb128 0x2f
 3722 005b 0B       		.uleb128 0xb
 3723 005c 00       		.byte	0
 3724 005d 00       		.byte	0
 3725 005e 09       		.uleb128 0x9
 3726 005f 13       		.uleb128 0x13
 3727 0060 01       		.byte	0x1
 3728 0061 0B       		.uleb128 0xb
 3729 0062 0B       		.uleb128 0xb
 3730 0063 3A       		.uleb128 0x3a
 3731 0064 0B       		.uleb128 0xb
 3732 0065 3B       		.uleb128 0x3b
 3733 0066 0B       		.uleb128 0xb
 3734 0067 01       		.uleb128 0x1
 3735 0068 13       		.uleb128 0x13
 3736 0069 00       		.byte	0
 3737 006a 00       		.byte	0
 3738 006b 0A       		.uleb128 0xa
 3739 006c 0D       		.uleb128 0xd
 3740 006d 00       		.byte	0
 3741 006e 03       		.uleb128 0x3
 3742 006f 08       		.uleb128 0x8
 3743 0070 3A       		.uleb128 0x3a
 3744 0071 0B       		.uleb128 0xb
 3745 0072 3B       		.uleb128 0x3b
 3746 0073 0B       		.uleb128 0xb
 3747 0074 49       		.uleb128 0x49
 3748 0075 13       		.uleb128 0x13
 3749 0076 38       		.uleb128 0x38
 3750 0077 0B       		.uleb128 0xb
 3751 0078 00       		.byte	0
 3752 0079 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 82


 3753 007a 0B       		.uleb128 0xb
 3754 007b 0D       		.uleb128 0xd
 3755 007c 00       		.byte	0
 3756 007d 03       		.uleb128 0x3
 3757 007e 0E       		.uleb128 0xe
 3758 007f 3A       		.uleb128 0x3a
 3759 0080 0B       		.uleb128 0xb
 3760 0081 3B       		.uleb128 0x3b
 3761 0082 0B       		.uleb128 0xb
 3762 0083 49       		.uleb128 0x49
 3763 0084 13       		.uleb128 0x13
 3764 0085 38       		.uleb128 0x38
 3765 0086 0B       		.uleb128 0xb
 3766 0087 00       		.byte	0
 3767 0088 00       		.byte	0
 3768 0089 0C       		.uleb128 0xc
 3769 008a 35       		.uleb128 0x35
 3770 008b 00       		.byte	0
 3771 008c 49       		.uleb128 0x49
 3772 008d 13       		.uleb128 0x13
 3773 008e 00       		.byte	0
 3774 008f 00       		.byte	0
 3775 0090 0D       		.uleb128 0xd
 3776 0091 13       		.uleb128 0x13
 3777 0092 01       		.byte	0x1
 3778 0093 0B       		.uleb128 0xb
 3779 0094 05       		.uleb128 0x5
 3780 0095 3A       		.uleb128 0x3a
 3781 0096 0B       		.uleb128 0xb
 3782 0097 3B       		.uleb128 0x3b
 3783 0098 0B       		.uleb128 0xb
 3784 0099 01       		.uleb128 0x1
 3785 009a 13       		.uleb128 0x13
 3786 009b 00       		.byte	0
 3787 009c 00       		.byte	0
 3788 009d 0E       		.uleb128 0xe
 3789 009e 13       		.uleb128 0x13
 3790 009f 01       		.byte	0x1
 3791 00a0 03       		.uleb128 0x3
 3792 00a1 08       		.uleb128 0x8
 3793 00a2 0B       		.uleb128 0xb
 3794 00a3 0B       		.uleb128 0xb
 3795 00a4 3A       		.uleb128 0x3a
 3796 00a5 0B       		.uleb128 0xb
 3797 00a6 3B       		.uleb128 0x3b
 3798 00a7 0B       		.uleb128 0xb
 3799 00a8 01       		.uleb128 0x1
 3800 00a9 13       		.uleb128 0x13
 3801 00aa 00       		.byte	0
 3802 00ab 00       		.byte	0
 3803 00ac 0F       		.uleb128 0xf
 3804 00ad 2E       		.uleb128 0x2e
 3805 00ae 00       		.byte	0
 3806 00af 3F       		.uleb128 0x3f
 3807 00b0 19       		.uleb128 0x19
 3808 00b1 03       		.uleb128 0x3
 3809 00b2 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 83


 3810 00b3 3A       		.uleb128 0x3a
 3811 00b4 0B       		.uleb128 0xb
 3812 00b5 3B       		.uleb128 0x3b
 3813 00b6 0B       		.uleb128 0xb
 3814 00b7 27       		.uleb128 0x27
 3815 00b8 19       		.uleb128 0x19
 3816 00b9 11       		.uleb128 0x11
 3817 00ba 01       		.uleb128 0x1
 3818 00bb 12       		.uleb128 0x12
 3819 00bc 06       		.uleb128 0x6
 3820 00bd 40       		.uleb128 0x40
 3821 00be 18       		.uleb128 0x18
 3822 00bf 9642     		.uleb128 0x2116
 3823 00c1 19       		.uleb128 0x19
 3824 00c2 00       		.byte	0
 3825 00c3 00       		.byte	0
 3826 00c4 10       		.uleb128 0x10
 3827 00c5 2E       		.uleb128 0x2e
 3828 00c6 01       		.byte	0x1
 3829 00c7 3F       		.uleb128 0x3f
 3830 00c8 19       		.uleb128 0x19
 3831 00c9 03       		.uleb128 0x3
 3832 00ca 0E       		.uleb128 0xe
 3833 00cb 3A       		.uleb128 0x3a
 3834 00cc 0B       		.uleb128 0xb
 3835 00cd 3B       		.uleb128 0x3b
 3836 00ce 0B       		.uleb128 0xb
 3837 00cf 11       		.uleb128 0x11
 3838 00d0 01       		.uleb128 0x1
 3839 00d1 12       		.uleb128 0x12
 3840 00d2 06       		.uleb128 0x6
 3841 00d3 40       		.uleb128 0x40
 3842 00d4 18       		.uleb128 0x18
 3843 00d5 9642     		.uleb128 0x2116
 3844 00d7 19       		.uleb128 0x19
 3845 00d8 01       		.uleb128 0x1
 3846 00d9 13       		.uleb128 0x13
 3847 00da 00       		.byte	0
 3848 00db 00       		.byte	0
 3849 00dc 11       		.uleb128 0x11
 3850 00dd 34       		.uleb128 0x34
 3851 00de 00       		.byte	0
 3852 00df 03       		.uleb128 0x3
 3853 00e0 0E       		.uleb128 0xe
 3854 00e1 3A       		.uleb128 0x3a
 3855 00e2 0B       		.uleb128 0xb
 3856 00e3 3B       		.uleb128 0x3b
 3857 00e4 0B       		.uleb128 0xb
 3858 00e5 49       		.uleb128 0x49
 3859 00e6 13       		.uleb128 0x13
 3860 00e7 02       		.uleb128 0x2
 3861 00e8 18       		.uleb128 0x18
 3862 00e9 00       		.byte	0
 3863 00ea 00       		.byte	0
 3864 00eb 12       		.uleb128 0x12
 3865 00ec 2E       		.uleb128 0x2e
 3866 00ed 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 84


 3867 00ee 3F       		.uleb128 0x3f
 3868 00ef 19       		.uleb128 0x19
 3869 00f0 03       		.uleb128 0x3
 3870 00f1 0E       		.uleb128 0xe
 3871 00f2 3A       		.uleb128 0x3a
 3872 00f3 0B       		.uleb128 0xb
 3873 00f4 3B       		.uleb128 0x3b
 3874 00f5 0B       		.uleb128 0xb
 3875 00f6 49       		.uleb128 0x49
 3876 00f7 13       		.uleb128 0x13
 3877 00f8 11       		.uleb128 0x11
 3878 00f9 01       		.uleb128 0x1
 3879 00fa 12       		.uleb128 0x12
 3880 00fb 06       		.uleb128 0x6
 3881 00fc 40       		.uleb128 0x40
 3882 00fd 18       		.uleb128 0x18
 3883 00fe 9642     		.uleb128 0x2116
 3884 0100 19       		.uleb128 0x19
 3885 0101 01       		.uleb128 0x1
 3886 0102 13       		.uleb128 0x13
 3887 0103 00       		.byte	0
 3888 0104 00       		.byte	0
 3889 0105 13       		.uleb128 0x13
 3890 0106 2E       		.uleb128 0x2e
 3891 0107 00       		.byte	0
 3892 0108 3F       		.uleb128 0x3f
 3893 0109 19       		.uleb128 0x19
 3894 010a 03       		.uleb128 0x3
 3895 010b 0E       		.uleb128 0xe
 3896 010c 3A       		.uleb128 0x3a
 3897 010d 0B       		.uleb128 0xb
 3898 010e 3B       		.uleb128 0x3b
 3899 010f 0B       		.uleb128 0xb
 3900 0110 11       		.uleb128 0x11
 3901 0111 01       		.uleb128 0x1
 3902 0112 12       		.uleb128 0x12
 3903 0113 06       		.uleb128 0x6
 3904 0114 40       		.uleb128 0x40
 3905 0115 18       		.uleb128 0x18
 3906 0116 9642     		.uleb128 0x2116
 3907 0118 19       		.uleb128 0x19
 3908 0119 00       		.byte	0
 3909 011a 00       		.byte	0
 3910 011b 14       		.uleb128 0x14
 3911 011c 2E       		.uleb128 0x2e
 3912 011d 01       		.byte	0x1
 3913 011e 3F       		.uleb128 0x3f
 3914 011f 19       		.uleb128 0x19
 3915 0120 03       		.uleb128 0x3
 3916 0121 0E       		.uleb128 0xe
 3917 0122 3A       		.uleb128 0x3a
 3918 0123 0B       		.uleb128 0xb
 3919 0124 3B       		.uleb128 0x3b
 3920 0125 0B       		.uleb128 0xb
 3921 0126 27       		.uleb128 0x27
 3922 0127 19       		.uleb128 0x19
 3923 0128 11       		.uleb128 0x11
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 85


 3924 0129 01       		.uleb128 0x1
 3925 012a 12       		.uleb128 0x12
 3926 012b 06       		.uleb128 0x6
 3927 012c 40       		.uleb128 0x40
 3928 012d 18       		.uleb128 0x18
 3929 012e 9642     		.uleb128 0x2116
 3930 0130 19       		.uleb128 0x19
 3931 0131 01       		.uleb128 0x1
 3932 0132 13       		.uleb128 0x13
 3933 0133 00       		.byte	0
 3934 0134 00       		.byte	0
 3935 0135 15       		.uleb128 0x15
 3936 0136 05       		.uleb128 0x5
 3937 0137 00       		.byte	0
 3938 0138 03       		.uleb128 0x3
 3939 0139 0E       		.uleb128 0xe
 3940 013a 3A       		.uleb128 0x3a
 3941 013b 0B       		.uleb128 0xb
 3942 013c 3B       		.uleb128 0x3b
 3943 013d 0B       		.uleb128 0xb
 3944 013e 49       		.uleb128 0x49
 3945 013f 13       		.uleb128 0x13
 3946 0140 02       		.uleb128 0x2
 3947 0141 18       		.uleb128 0x18
 3948 0142 00       		.byte	0
 3949 0143 00       		.byte	0
 3950 0144 16       		.uleb128 0x16
 3951 0145 2E       		.uleb128 0x2e
 3952 0146 01       		.byte	0x1
 3953 0147 3F       		.uleb128 0x3f
 3954 0148 19       		.uleb128 0x19
 3955 0149 03       		.uleb128 0x3
 3956 014a 0E       		.uleb128 0xe
 3957 014b 3A       		.uleb128 0x3a
 3958 014c 0B       		.uleb128 0xb
 3959 014d 3B       		.uleb128 0x3b
 3960 014e 0B       		.uleb128 0xb
 3961 014f 27       		.uleb128 0x27
 3962 0150 19       		.uleb128 0x19
 3963 0151 49       		.uleb128 0x49
 3964 0152 13       		.uleb128 0x13
 3965 0153 11       		.uleb128 0x11
 3966 0154 01       		.uleb128 0x1
 3967 0155 12       		.uleb128 0x12
 3968 0156 06       		.uleb128 0x6
 3969 0157 40       		.uleb128 0x40
 3970 0158 18       		.uleb128 0x18
 3971 0159 9642     		.uleb128 0x2116
 3972 015b 19       		.uleb128 0x19
 3973 015c 01       		.uleb128 0x1
 3974 015d 13       		.uleb128 0x13
 3975 015e 00       		.byte	0
 3976 015f 00       		.byte	0
 3977 0160 17       		.uleb128 0x17
 3978 0161 2E       		.uleb128 0x2e
 3979 0162 01       		.byte	0x1
 3980 0163 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 86


 3981 0164 19       		.uleb128 0x19
 3982 0165 03       		.uleb128 0x3
 3983 0166 0E       		.uleb128 0xe
 3984 0167 3A       		.uleb128 0x3a
 3985 0168 0B       		.uleb128 0xb
 3986 0169 3B       		.uleb128 0x3b
 3987 016a 0B       		.uleb128 0xb
 3988 016b 27       		.uleb128 0x27
 3989 016c 19       		.uleb128 0x19
 3990 016d 11       		.uleb128 0x11
 3991 016e 01       		.uleb128 0x1
 3992 016f 12       		.uleb128 0x12
 3993 0170 06       		.uleb128 0x6
 3994 0171 40       		.uleb128 0x40
 3995 0172 18       		.uleb128 0x18
 3996 0173 9742     		.uleb128 0x2117
 3997 0175 19       		.uleb128 0x19
 3998 0176 01       		.uleb128 0x1
 3999 0177 13       		.uleb128 0x13
 4000 0178 00       		.byte	0
 4001 0179 00       		.byte	0
 4002 017a 18       		.uleb128 0x18
 4003 017b 2E       		.uleb128 0x2e
 4004 017c 01       		.byte	0x1
 4005 017d 3F       		.uleb128 0x3f
 4006 017e 19       		.uleb128 0x19
 4007 017f 03       		.uleb128 0x3
 4008 0180 0E       		.uleb128 0xe
 4009 0181 3A       		.uleb128 0x3a
 4010 0182 0B       		.uleb128 0xb
 4011 0183 3B       		.uleb128 0x3b
 4012 0184 0B       		.uleb128 0xb
 4013 0185 27       		.uleb128 0x27
 4014 0186 19       		.uleb128 0x19
 4015 0187 49       		.uleb128 0x49
 4016 0188 13       		.uleb128 0x13
 4017 0189 11       		.uleb128 0x11
 4018 018a 01       		.uleb128 0x1
 4019 018b 12       		.uleb128 0x12
 4020 018c 06       		.uleb128 0x6
 4021 018d 40       		.uleb128 0x40
 4022 018e 18       		.uleb128 0x18
 4023 018f 9742     		.uleb128 0x2117
 4024 0191 19       		.uleb128 0x19
 4025 0192 01       		.uleb128 0x1
 4026 0193 13       		.uleb128 0x13
 4027 0194 00       		.byte	0
 4028 0195 00       		.byte	0
 4029 0196 19       		.uleb128 0x19
 4030 0197 2E       		.uleb128 0x2e
 4031 0198 01       		.byte	0x1
 4032 0199 3F       		.uleb128 0x3f
 4033 019a 19       		.uleb128 0x19
 4034 019b 03       		.uleb128 0x3
 4035 019c 0E       		.uleb128 0xe
 4036 019d 3A       		.uleb128 0x3a
 4037 019e 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 87


 4038 019f 3B       		.uleb128 0x3b
 4039 01a0 05       		.uleb128 0x5
 4040 01a1 11       		.uleb128 0x11
 4041 01a2 01       		.uleb128 0x1
 4042 01a3 12       		.uleb128 0x12
 4043 01a4 06       		.uleb128 0x6
 4044 01a5 40       		.uleb128 0x40
 4045 01a6 18       		.uleb128 0x18
 4046 01a7 9642     		.uleb128 0x2116
 4047 01a9 19       		.uleb128 0x19
 4048 01aa 01       		.uleb128 0x1
 4049 01ab 13       		.uleb128 0x13
 4050 01ac 00       		.byte	0
 4051 01ad 00       		.byte	0
 4052 01ae 1A       		.uleb128 0x1a
 4053 01af 34       		.uleb128 0x34
 4054 01b0 00       		.byte	0
 4055 01b1 03       		.uleb128 0x3
 4056 01b2 0E       		.uleb128 0xe
 4057 01b3 3A       		.uleb128 0x3a
 4058 01b4 0B       		.uleb128 0xb
 4059 01b5 3B       		.uleb128 0x3b
 4060 01b6 05       		.uleb128 0x5
 4061 01b7 49       		.uleb128 0x49
 4062 01b8 13       		.uleb128 0x13
 4063 01b9 02       		.uleb128 0x2
 4064 01ba 18       		.uleb128 0x18
 4065 01bb 00       		.byte	0
 4066 01bc 00       		.byte	0
 4067 01bd 1B       		.uleb128 0x1b
 4068 01be 2E       		.uleb128 0x2e
 4069 01bf 00       		.byte	0
 4070 01c0 3F       		.uleb128 0x3f
 4071 01c1 19       		.uleb128 0x19
 4072 01c2 03       		.uleb128 0x3
 4073 01c3 0E       		.uleb128 0xe
 4074 01c4 3A       		.uleb128 0x3a
 4075 01c5 0B       		.uleb128 0xb
 4076 01c6 3B       		.uleb128 0x3b
 4077 01c7 05       		.uleb128 0x5
 4078 01c8 27       		.uleb128 0x27
 4079 01c9 19       		.uleb128 0x19
 4080 01ca 49       		.uleb128 0x49
 4081 01cb 13       		.uleb128 0x13
 4082 01cc 11       		.uleb128 0x11
 4083 01cd 01       		.uleb128 0x1
 4084 01ce 12       		.uleb128 0x12
 4085 01cf 06       		.uleb128 0x6
 4086 01d0 40       		.uleb128 0x40
 4087 01d1 18       		.uleb128 0x18
 4088 01d2 9642     		.uleb128 0x2116
 4089 01d4 19       		.uleb128 0x19
 4090 01d5 00       		.byte	0
 4091 01d6 00       		.byte	0
 4092 01d7 1C       		.uleb128 0x1c
 4093 01d8 2E       		.uleb128 0x2e
 4094 01d9 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 88


 4095 01da 3F       		.uleb128 0x3f
 4096 01db 19       		.uleb128 0x19
 4097 01dc 03       		.uleb128 0x3
 4098 01dd 0E       		.uleb128 0xe
 4099 01de 3A       		.uleb128 0x3a
 4100 01df 0B       		.uleb128 0xb
 4101 01e0 3B       		.uleb128 0x3b
 4102 01e1 05       		.uleb128 0x5
 4103 01e2 49       		.uleb128 0x49
 4104 01e3 13       		.uleb128 0x13
 4105 01e4 11       		.uleb128 0x11
 4106 01e5 01       		.uleb128 0x1
 4107 01e6 12       		.uleb128 0x12
 4108 01e7 06       		.uleb128 0x6
 4109 01e8 40       		.uleb128 0x40
 4110 01e9 18       		.uleb128 0x18
 4111 01ea 9642     		.uleb128 0x2116
 4112 01ec 19       		.uleb128 0x19
 4113 01ed 01       		.uleb128 0x1
 4114 01ee 13       		.uleb128 0x13
 4115 01ef 00       		.byte	0
 4116 01f0 00       		.byte	0
 4117 01f1 1D       		.uleb128 0x1d
 4118 01f2 0B       		.uleb128 0xb
 4119 01f3 01       		.byte	0x1
 4120 01f4 11       		.uleb128 0x11
 4121 01f5 01       		.uleb128 0x1
 4122 01f6 12       		.uleb128 0x12
 4123 01f7 06       		.uleb128 0x6
 4124 01f8 00       		.byte	0
 4125 01f9 00       		.byte	0
 4126 01fa 1E       		.uleb128 0x1e
 4127 01fb 0B       		.uleb128 0xb
 4128 01fc 01       		.byte	0x1
 4129 01fd 11       		.uleb128 0x11
 4130 01fe 01       		.uleb128 0x1
 4131 01ff 12       		.uleb128 0x12
 4132 0200 06       		.uleb128 0x6
 4133 0201 01       		.uleb128 0x1
 4134 0202 13       		.uleb128 0x13
 4135 0203 00       		.byte	0
 4136 0204 00       		.byte	0
 4137 0205 1F       		.uleb128 0x1f
 4138 0206 21       		.uleb128 0x21
 4139 0207 00       		.byte	0
 4140 0208 49       		.uleb128 0x49
 4141 0209 13       		.uleb128 0x13
 4142 020a 2F       		.uleb128 0x2f
 4143 020b 05       		.uleb128 0x5
 4144 020c 00       		.byte	0
 4145 020d 00       		.byte	0
 4146 020e 20       		.uleb128 0x20
 4147 020f 2E       		.uleb128 0x2e
 4148 0210 01       		.byte	0x1
 4149 0211 3F       		.uleb128 0x3f
 4150 0212 19       		.uleb128 0x19
 4151 0213 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 89


 4152 0214 0E       		.uleb128 0xe
 4153 0215 3A       		.uleb128 0x3a
 4154 0216 0B       		.uleb128 0xb
 4155 0217 3B       		.uleb128 0x3b
 4156 0218 05       		.uleb128 0x5
 4157 0219 27       		.uleb128 0x27
 4158 021a 19       		.uleb128 0x19
 4159 021b 49       		.uleb128 0x49
 4160 021c 13       		.uleb128 0x13
 4161 021d 11       		.uleb128 0x11
 4162 021e 01       		.uleb128 0x1
 4163 021f 12       		.uleb128 0x12
 4164 0220 06       		.uleb128 0x6
 4165 0221 40       		.uleb128 0x40
 4166 0222 18       		.uleb128 0x18
 4167 0223 9642     		.uleb128 0x2116
 4168 0225 19       		.uleb128 0x19
 4169 0226 01       		.uleb128 0x1
 4170 0227 13       		.uleb128 0x13
 4171 0228 00       		.byte	0
 4172 0229 00       		.byte	0
 4173 022a 21       		.uleb128 0x21
 4174 022b 05       		.uleb128 0x5
 4175 022c 00       		.byte	0
 4176 022d 03       		.uleb128 0x3
 4177 022e 0E       		.uleb128 0xe
 4178 022f 3A       		.uleb128 0x3a
 4179 0230 0B       		.uleb128 0xb
 4180 0231 3B       		.uleb128 0x3b
 4181 0232 05       		.uleb128 0x5
 4182 0233 49       		.uleb128 0x49
 4183 0234 13       		.uleb128 0x13
 4184 0235 02       		.uleb128 0x2
 4185 0236 18       		.uleb128 0x18
 4186 0237 00       		.byte	0
 4187 0238 00       		.byte	0
 4188 0239 22       		.uleb128 0x22
 4189 023a 34       		.uleb128 0x34
 4190 023b 00       		.byte	0
 4191 023c 03       		.uleb128 0x3
 4192 023d 08       		.uleb128 0x8
 4193 023e 3A       		.uleb128 0x3a
 4194 023f 0B       		.uleb128 0xb
 4195 0240 3B       		.uleb128 0x3b
 4196 0241 05       		.uleb128 0x5
 4197 0242 49       		.uleb128 0x49
 4198 0243 13       		.uleb128 0x13
 4199 0244 02       		.uleb128 0x2
 4200 0245 18       		.uleb128 0x18
 4201 0246 00       		.byte	0
 4202 0247 00       		.byte	0
 4203 0248 23       		.uleb128 0x23
 4204 0249 34       		.uleb128 0x34
 4205 024a 00       		.byte	0
 4206 024b 03       		.uleb128 0x3
 4207 024c 0E       		.uleb128 0xe
 4208 024d 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 90


 4209 024e 0B       		.uleb128 0xb
 4210 024f 3B       		.uleb128 0x3b
 4211 0250 05       		.uleb128 0x5
 4212 0251 49       		.uleb128 0x49
 4213 0252 13       		.uleb128 0x13
 4214 0253 3F       		.uleb128 0x3f
 4215 0254 19       		.uleb128 0x19
 4216 0255 3C       		.uleb128 0x3c
 4217 0256 19       		.uleb128 0x19
 4218 0257 00       		.byte	0
 4219 0258 00       		.byte	0
 4220 0259 24       		.uleb128 0x24
 4221 025a 34       		.uleb128 0x34
 4222 025b 00       		.byte	0
 4223 025c 03       		.uleb128 0x3
 4224 025d 0E       		.uleb128 0xe
 4225 025e 3A       		.uleb128 0x3a
 4226 025f 0B       		.uleb128 0xb
 4227 0260 3B       		.uleb128 0x3b
 4228 0261 0B       		.uleb128 0xb
 4229 0262 49       		.uleb128 0x49
 4230 0263 13       		.uleb128 0x13
 4231 0264 3F       		.uleb128 0x3f
 4232 0265 19       		.uleb128 0x19
 4233 0266 02       		.uleb128 0x2
 4234 0267 18       		.uleb128 0x18
 4235 0268 00       		.byte	0
 4236 0269 00       		.byte	0
 4237 026a 25       		.uleb128 0x25
 4238 026b 34       		.uleb128 0x34
 4239 026c 00       		.byte	0
 4240 026d 03       		.uleb128 0x3
 4241 026e 08       		.uleb128 0x8
 4242 026f 3A       		.uleb128 0x3a
 4243 0270 0B       		.uleb128 0xb
 4244 0271 3B       		.uleb128 0x3b
 4245 0272 0B       		.uleb128 0xb
 4246 0273 49       		.uleb128 0x49
 4247 0274 13       		.uleb128 0x13
 4248 0275 3F       		.uleb128 0x3f
 4249 0276 19       		.uleb128 0x19
 4250 0277 02       		.uleb128 0x2
 4251 0278 18       		.uleb128 0x18
 4252 0279 00       		.byte	0
 4253 027a 00       		.byte	0
 4254 027b 00       		.byte	0
 4255              		.section	.debug_aranges,"",%progbits
 4256 0000 8C000000 		.4byte	0x8c
 4257 0004 0200     		.2byte	0x2
 4258 0006 00000000 		.4byte	.Ldebug_info0
 4259 000a 04       		.byte	0x4
 4260 000b 00       		.byte	0
 4261 000c 0000     		.2byte	0
 4262 000e 0000     		.2byte	0
 4263 0010 00000000 		.4byte	.LFB64
 4264 0014 0C000000 		.4byte	.LFE64-.LFB64
 4265 0018 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 91


 4266 001c 2C010000 		.4byte	.LFE65-.LFB65
 4267 0020 00000000 		.4byte	.LFB66
 4268 0024 64000000 		.4byte	.LFE66-.LFB66
 4269 0028 00000000 		.4byte	.LFB67
 4270 002c 2A000000 		.4byte	.LFE67-.LFB67
 4271 0030 00000000 		.4byte	.LFB68
 4272 0034 50000000 		.4byte	.LFE68-.LFB68
 4273 0038 00000000 		.4byte	.LFB69
 4274 003c 48000000 		.4byte	.LFE69-.LFB69
 4275 0040 00000000 		.4byte	.LFB70
 4276 0044 1E000000 		.4byte	.LFE70-.LFB70
 4277 0048 00000000 		.4byte	.LFB71
 4278 004c 46000000 		.4byte	.LFE71-.LFB71
 4279 0050 00000000 		.4byte	.LFB72
 4280 0054 2C010000 		.4byte	.LFE72-.LFB72
 4281 0058 00000000 		.4byte	.LFB73
 4282 005c 1E000000 		.4byte	.LFE73-.LFB73
 4283 0060 00000000 		.4byte	.LFB74
 4284 0064 5C040000 		.4byte	.LFE74-.LFB74
 4285 0068 00000000 		.4byte	.LFB75
 4286 006c 44000000 		.4byte	.LFE75-.LFB75
 4287 0070 00000000 		.4byte	.LFB76
 4288 0074 70020000 		.4byte	.LFE76-.LFB76
 4289 0078 00000000 		.4byte	.LFB77
 4290 007c 74000000 		.4byte	.LFE77-.LFB77
 4291 0080 00000000 		.4byte	.LFB78
 4292 0084 38010000 		.4byte	.LFE78-.LFB78
 4293 0088 00000000 		.4byte	0
 4294 008c 00000000 		.4byte	0
 4295              		.section	.debug_ranges,"",%progbits
 4296              	.Ldebug_ranges0:
 4297 0000 00000000 		.4byte	.LFB64
 4298 0004 0C000000 		.4byte	.LFE64
 4299 0008 00000000 		.4byte	.LFB65
 4300 000c 2C010000 		.4byte	.LFE65
 4301 0010 00000000 		.4byte	.LFB66
 4302 0014 64000000 		.4byte	.LFE66
 4303 0018 00000000 		.4byte	.LFB67
 4304 001c 2A000000 		.4byte	.LFE67
 4305 0020 00000000 		.4byte	.LFB68
 4306 0024 50000000 		.4byte	.LFE68
 4307 0028 00000000 		.4byte	.LFB69
 4308 002c 48000000 		.4byte	.LFE69
 4309 0030 00000000 		.4byte	.LFB70
 4310 0034 1E000000 		.4byte	.LFE70
 4311 0038 00000000 		.4byte	.LFB71
 4312 003c 46000000 		.4byte	.LFE71
 4313 0040 00000000 		.4byte	.LFB72
 4314 0044 2C010000 		.4byte	.LFE72
 4315 0048 00000000 		.4byte	.LFB73
 4316 004c 1E000000 		.4byte	.LFE73
 4317 0050 00000000 		.4byte	.LFB74
 4318 0054 5C040000 		.4byte	.LFE74
 4319 0058 00000000 		.4byte	.LFB75
 4320 005c 44000000 		.4byte	.LFE75
 4321 0060 00000000 		.4byte	.LFB76
 4322 0064 70020000 		.4byte	.LFE76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 92


 4323 0068 00000000 		.4byte	.LFB77
 4324 006c 74000000 		.4byte	.LFE77
 4325 0070 00000000 		.4byte	.LFB78
 4326 0074 38010000 		.4byte	.LFE78
 4327 0078 00000000 		.4byte	0
 4328 007c 00000000 		.4byte	0
 4329              		.section	.debug_line,"",%progbits
 4330              	.Ldebug_line0:
 4331 0000 23040000 		.section	.debug_str,"MS",%progbits,1
 4331      02001B02 
 4331      00000201 
 4331      FB0E0D00 
 4331      01010101 
 4332              	.LASF113:
 4333 0000 745F6D6F 		.ascii	"t_modem\000"
 4333      64656D00 
 4334              	.LASF12:
 4335 0008 75696E74 		.ascii	"uint16\000"
 4335      313600
 4336              	.LASF53:
 4337 000f 746D5F68 		.ascii	"tm_hour\000"
 4337      6F757200 
 4338              	.LASF36:
 4339 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4339      696E7661 
 4339      6C69645F 
 4339      72656164 
 4339      696E6773 
 4340              	.LASF144:
 4341 002c 62756666 		.ascii	"buffer_overflow\000"
 4341      65725F6F 
 4341      76657266 
 4341      6C6F7700 
 4342              	.LASF142:
 4343 003c 66696C65 		.ascii	"fileName\000"
 4343      4E616D65 
 4343      00
 4344              	.LASF0:
 4345 0045 7369676E 		.ascii	"signed char\000"
 4345      65642063 
 4345      68617200 
 4346              	.LASF85:
 4347 0051 636F756E 		.ascii	"countDownResetCondition\000"
 4347      74446F77 
 4347      6E526573 
 4347      6574436F 
 4347      6E646974 
 4348              	.LASF166:
 4349 0069 57616B65 		.ascii	"Wakeup_ISR\000"
 4349      75705F49 
 4349      535200
 4350              	.LASF163:
 4351 0074 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4351      43313120 
 4351      352E342E 
 4351      31203230 
 4351      31363036 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 93


 4352 00a7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4352      20726576 
 4352      6973696F 
 4352      6E203233 
 4352      37373135 
 4353 00da 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4353      66756E63 
 4353      74696F6E 
 4353      2D736563 
 4353      74696F6E 
 4354              	.LASF111:
 4355 0102 745F7072 		.ascii	"t_pressure\000"
 4355      65737375 
 4355      726500
 4356              	.LASF26:
 4357 010d 4D6F6E74 		.ascii	"Month\000"
 4357      6800
 4358              	.LASF7:
 4359 0113 6C6F6E67 		.ascii	"long long unsigned int\000"
 4359      206C6F6E 
 4359      6720756E 
 4359      7369676E 
 4359      65642069 
 4360              	.LASF22:
 4361 012a 486F7572 		.ascii	"Hour\000"
 4361      00
 4362              	.LASF148:
 4363 012f 6D6F6465 		.ascii	"modem_state\000"
 4363      6D5F7374 
 4363      61746500 
 4364              	.LASF157:
 4365 013b 616C6172 		.ascii	"alarmMeasure\000"
 4365      6D4D6561 
 4365      73757265 
 4365      00
 4366              	.LASF143:
 4367 0148 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4367      52784275 
 4367      66666572 
 4367      00
 4368              	.LASF108:
 4369 0155 745F6C65 		.ascii	"t_level_sensor\000"
 4369      76656C5F 
 4369      73656E73 
 4369      6F7200
 4370              	.LASF6:
 4371 0164 6C6F6E67 		.ascii	"long long int\000"
 4371      206C6F6E 
 4371      6720696E 
 4371      7400
 4372              	.LASF121:
 4373 0172 7061636B 		.ascii	"packets\000"
 4373      65747300 
 4374              	.LASF69:
 4375 017a 65636E6F 		.ascii	"ecno\000"
 4375      00
 4376              	.LASF158:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 94


 4377 017f 74696D65 		.ascii	"timeToMeasure\000"
 4377      546F4D65 
 4377      61737572 
 4377      6500
 4378              	.LASF72:
 4379 018d 74696D65 		.ascii	"time_to_network_connect\000"
 4379      5F746F5F 
 4379      6E657477 
 4379      6F726B5F 
 4379      636F6E6E 
 4380              	.LASF160:
 4381 01a5 74696D65 		.ascii	"timeToSync\000"
 4381      546F5379 
 4381      6E6300
 4382              	.LASF39:
 4383 01b0 766F6C74 		.ascii	"voltage_solar\000"
 4383      6167655F 
 4383      736F6C61 
 4383      7200
 4384              	.LASF40:
 4385 01be 766F6C74 		.ascii	"voltage_charge_current\000"
 4385      6167655F 
 4385      63686172 
 4385      67655F63 
 4385      75727265 
 4386              	.LASF141:
 4387 01d5 75706772 		.ascii	"upgrade_status\000"
 4387      6164655F 
 4387      73746174 
 4387      757300
 4388              	.LASF124:
 4389 01e4 635F6461 		.ascii	"c_data_count_sent\000"
 4389      74615F63 
 4389      6F756E74 
 4389      5F73656E 
 4389      7400
 4390              	.LASF66:
 4391 01f6 6D6F6465 		.ascii	"modem_info_t\000"
 4391      6D5F696E 
 4391      666F5F74 
 4391      00
 4392              	.LASF67:
 4393 0203 72786C65 		.ascii	"rxlev\000"
 4393      7600
 4394              	.LASF4:
 4395 0209 6C6F6E67 		.ascii	"long int\000"
 4395      20696E74 
 4395      00
 4396              	.LASF73:
 4397 0212 74696D65 		.ascii	"time_to_acquire_ip\000"
 4397      5F746F5F 
 4397      61637175 
 4397      6972655F 
 4397      697000
 4398              	.LASF86:
 4399 0225 616C6172 		.ascii	"alarm\000"
 4399      6D00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 95


 4400              	.LASF47:
 4401 022b 70726573 		.ascii	"pressure_voltage_off\000"
 4401      73757265 
 4401      5F766F6C 
 4401      74616765 
 4401      5F6F6666 
 4402              	.LASF11:
 4403 0240 75696E74 		.ascii	"uint8\000"
 4403      3800
 4404              	.LASF116:
 4405 0246 635F7472 		.ascii	"c_try_counter\000"
 4405      795F636F 
 4405      756E7465 
 4405      7200
 4406              	.LASF127:
 4407 0254 73656E64 		.ascii	"send_time\000"
 4407      5F74696D 
 4407      6500
 4408              	.LASF16:
 4409 025e 696E7433 		.ascii	"int32\000"
 4409      3200
 4410              	.LASF75:
 4411 0264 6E6F6465 		.ascii	"node_type\000"
 4411      5F747970 
 4411      6500
 4412              	.LASF114:
 4413 026e 73796E63 		.ascii	"syncData\000"
 4413      44617461 
 4413      00
 4414              	.LASF122:
 4415 0277 6E657477 		.ascii	"network_time\000"
 4415      6F726B5F 
 4415      74696D65 
 4415      00
 4416              	.LASF13:
 4417 0284 75696E74 		.ascii	"uint32\000"
 4417      333200
 4418              	.LASF64:
 4419 028b 6D6F6465 		.ascii	"model_id\000"
 4419      6C5F6964 
 4419      00
 4420              	.LASF33:
 4421 0294 616C6C5F 		.ascii	"all_level_readings\000"
 4421      6C657665 
 4421      6C5F7265 
 4421      6164696E 
 4421      677300
 4422              	.LASF82:
 4423 02a7 636F756E 		.ascii	"countDownValue\000"
 4423      74446F77 
 4423      6E56616C 
 4423      756500
 4424              	.LASF137:
 4425 02b6 75706772 		.ascii	"upgraded\000"
 4425      61646564 
 4425      00
 4426              	.LASF55:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 96


 4427 02bf 746D5F6D 		.ascii	"tm_mon\000"
 4427      6F6E00
 4428              	.LASF79:
 4429 02c6 64656275 		.ascii	"debug_level\000"
 4429      675F6C65 
 4429      76656C00 
 4430              	.LASF139:
 4431 02d2 706F7274 		.ascii	"port\000"
 4431      00
 4432              	.LASF60:
 4433 02d7 76616C75 		.ascii	"value\000"
 4433      6500
 4434              	.LASF138:
 4435 02dd 686F7374 		.ascii	"host\000"
 4435      00
 4436              	.LASF56:
 4437 02e2 746D5F79 		.ascii	"tm_year\000"
 4437      65617200 
 4438              	.LASF159:
 4439 02ea 616C6172 		.ascii	"alarmSync\000"
 4439      6D53796E 
 4439      6300
 4440              	.LASF46:
 4441 02f4 70726573 		.ascii	"pressure_voltage_on\000"
 4441      73757265 
 4441      5F766F6C 
 4441      74616765 
 4441      5F6F6E00 
 4442              	.LASF8:
 4443 0308 756E7369 		.ascii	"unsigned int\000"
 4443      676E6564 
 4443      20696E74 
 4443      00
 4444              	.LASF135:
 4445 0315 73657454 		.ascii	"setTime\000"
 4445      696D6500 
 4446              	.LASF62:
 4447 031d 6B65795F 		.ascii	"key_value_t\000"
 4447      76616C75 
 4447      655F7400 
 4448              	.LASF98:
 4449 0329 41796F49 		.ascii	"AyoItsTime\000"
 4449      74735469 
 4449      6D6500
 4450              	.LASF35:
 4451 0334 6E756D5F 		.ascii	"num_valid_readings\000"
 4451      76616C69 
 4451      645F7265 
 4451      6164696E 
 4451      677300
 4452              	.LASF126:
 4453 0347 68747470 		.ascii	"http_chunk\000"
 4453      5F636875 
 4453      6E6B00
 4454              	.LASF132:
 4455 0352 6D5F766F 		.ascii	"m_voltage\000"
 4455      6C746167 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 97


 4455      6500
 4456              	.LASF5:
 4457 035c 6C6F6E67 		.ascii	"long unsigned int\000"
 4457      20756E73 
 4457      69676E65 
 4457      6420696E 
 4457      7400
 4458              	.LASF95:
 4459 036e 7472795F 		.ascii	"try_counter\000"
 4459      636F756E 
 4459      74657200 
 4460              	.LASF117:
 4461 037a 64617461 		.ascii	"data_count_desired\000"
 4461      5F636F75 
 4461      6E745F64 
 4461      65736972 
 4461      656400
 4462              	.LASF38:
 4463 038d 766F6C74 		.ascii	"voltage_battery\000"
 4463      6167655F 
 4463      62617474 
 4463      65727900 
 4464              	.LASF24:
 4465 039d 4461794F 		.ascii	"DayOfMonth\000"
 4465      664D6F6E 
 4465      746800
 4466              	.LASF130:
 4467 03a8 6D616B65 		.ascii	"makeMeasurements\000"
 4467      4D656173 
 4467      7572656D 
 4467      656E7473 
 4467      00
 4468              	.LASF147:
 4469 03b9 64617461 		.ascii	"data\000"
 4469      00
 4470              	.LASF91:
 4471 03be 65705F70 		.ascii	"ep_port\000"
 4471      6F727400 
 4472              	.LASF59:
 4473 03c6 746D5F69 		.ascii	"tm_isdst\000"
 4473      73647374 
 4473      00
 4474              	.LASF87:
 4475 03cf 6D6F6465 		.ascii	"modem_info\000"
 4475      6D5F696E 
 4475      666F00
 4476              	.LASF90:
 4477 03da 65705F68 		.ascii	"ep_host\000"
 4477      6F737400 
 4478              	.LASF14:
 4479 03e2 696E7438 		.ascii	"int8\000"
 4479      00
 4480              	.LASF97:
 4481 03e7 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4481      576F726B 
 4481      576F726B 
 4481      576F726B 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 98


 4481      576F726B 
 4482              	.LASF118:
 4483 0400 635F6461 		.ascii	"c_data_count_desired\000"
 4483      74615F63 
 4483      6F756E74 
 4483      5F646573 
 4483      69726564 
 4484              	.LASF112:
 4485 0415 745F7364 		.ascii	"t_sd_card\000"
 4485      5F636172 
 4485      6400
 4486              	.LASF2:
 4487 041f 73686F72 		.ascii	"short int\000"
 4487      7420696E 
 4487      7400
 4488              	.LASF149:
 4489 0429 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4489      6D5F7374 
 4489      6172745F 
 4489      74696D65 
 4489      5F737461 
 4490              	.LASF89:
 4491 0440 7379735F 		.ascii	"sys_info_t\000"
 4491      696E666F 
 4491      5F7400
 4492              	.LASF81:
 4493 044b 75706461 		.ascii	"updatable_parameters_t\000"
 4493      7461626C 
 4493      655F7061 
 4493      72616D65 
 4493      74657273 
 4494              	.LASF99:
 4495 0462 616C6172 		.ascii	"alarmType\000"
 4495      6D547970 
 4495      6500
 4496              	.LASF145:
 4497 046c 64617461 		.ascii	"dataPointsInStack\000"
 4497      506F696E 
 4497      7473496E 
 4497      53746163 
 4497      6B00
 4498              	.LASF52:
 4499 047e 746D5F6D 		.ascii	"tm_min\000"
 4499      696E00
 4500              	.LASF140:
 4501 0485 726F7574 		.ascii	"route\000"
 4501      6500
 4502              	.LASF100:
 4503 048b 616C6172 		.ascii	"alarmToBeUpdated\000"
 4503      6D546F42 
 4503      65557064 
 4503      61746564 
 4503      00
 4504              	.LASF21:
 4505 049c 73697A65 		.ascii	"sizetype\000"
 4505      74797065 
 4505      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 99


 4506              	.LASF58:
 4507 04a5 746D5F79 		.ascii	"tm_yday\000"
 4507      64617900 
 4508              	.LASF92:
 4509 04ad 7379735F 		.ascii	"sys_settings_t\000"
 4509      73657474 
 4509      696E6773 
 4509      5F7400
 4510              	.LASF136:
 4511 04bc 6C6F6361 		.ascii	"localTime\000"
 4511      6C54696D 
 4511      6500
 4512              	.LASF161:
 4513 04c6 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4513      546F5379 
 4513      636E5265 
 4513      6D6F7465 
 4513      50617261 
 4514              	.LASF61:
 4515 04dd 74696D65 		.ascii	"timeStamp\000"
 4515      5374616D 
 4515      7000
 4516              	.LASF165:
 4517 04e7 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\notoriOS\\notoriOS\\no"
 4517      73657273 
 4517      5C64616E 
 4517      747A5C44 
 4517      6F63756D 
 4518 0514 746F7269 		.ascii	"toriOS.cydsn\000"
 4518      4F532E63 
 4518      7964736E 
 4518      00
 4519              	.LASF28:
 4520 0521 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4520      54494D45 
 4520      5F444154 
 4520      4500
 4521              	.LASF151:
 4522 052f 75706461 		.ascii	"updatable_parameters\000"
 4522      7461626C 
 4522      655F7061 
 4522      72616D65 
 4522      74657273 
 4523              	.LASF104:
 4524 0544 43726561 		.ascii	"CreateAlarm\000"
 4524      7465416C 
 4524      61726D00 
 4525              	.LASF125:
 4526 0550 7061636B 		.ascii	"packet\000"
 4526      657400
 4527              	.LASF115:
 4528 0557 735F7273 		.ascii	"s_rsrp\000"
 4528      727000
 4529              	.LASF41:
 4530 055e 766F6C74 		.ascii	"voltage_pressure\000"
 4530      6167655F 
 4530      70726573 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 100


 4530      73757265 
 4530      00
 4531              	.LASF152:
 4532 056f 68747470 		.ascii	"http_request\000"
 4532      5F726571 
 4532      75657374 
 4532      00
 4533              	.LASF17:
 4534 057c 666C6F61 		.ascii	"float\000"
 4534      7400
 4535              	.LASF37:
 4536 0582 6C657665 		.ascii	"level_sensor_t\000"
 4536      6C5F7365 
 4536      6E736F72 
 4536      5F7400
 4537              	.LASF129:
 4538 0591 636F6E66 		.ascii	"configureRemoteParams\000"
 4538      69677572 
 4538      6552656D 
 4538      6F746550 
 4538      6172616D 
 4539              	.LASF162:
 4540 05a7 44617461 		.ascii	"Data_fileName\000"
 4540      5F66696C 
 4540      654E616D 
 4540      6500
 4541              	.LASF96:
 4542 05b5 6D6F6465 		.ascii	"modem_status\000"
 4542      6D5F7374 
 4542      61747573 
 4542      00
 4543              	.LASF29:
 4544 05c2 74657374 		.ascii	"test_name\000"
 4544      5F6E616D 
 4544      6500
 4545              	.LASF27:
 4546 05cc 59656172 		.ascii	"Year\000"
 4546      00
 4547              	.LASF80:
 4548 05d1 5F426F6F 		.ascii	"_Bool\000"
 4548      6C00
 4549              	.LASF10:
 4550 05d7 696E7433 		.ascii	"int32_t\000"
 4550      325F7400 
 4551              	.LASF1:
 4552 05df 756E7369 		.ascii	"unsigned char\000"
 4552      676E6564 
 4552      20636861 
 4552      7200
 4553              	.LASF156:
 4554 05ed 73797374 		.ascii	"system_settings\000"
 4554      656D5F73 
 4554      65747469 
 4554      6E677300 
 4555              	.LASF71:
 4556 05fd 72737270 		.ascii	"rsrp\000"
 4556      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 101


 4557              	.LASF70:
 4558 0602 72737271 		.ascii	"rsrq\000"
 4558      00
 4559              	.LASF101:
 4560 0607 52657365 		.ascii	"ResetAlarm\000"
 4560      74416C61 
 4560      726D00
 4561              	.LASF128:
 4562 0612 735F7365 		.ascii	"s_send_time\000"
 4562      6E645F74 
 4562      696D6500 
 4563              	.LASF78:
 4564 061e 73796E63 		.ascii	"sync_time\000"
 4564      5F74696D 
 4564      6500
 4565              	.LASF49:
 4566 0628 70726573 		.ascii	"pressure_depth\000"
 4566      73757265 
 4566      5F646570 
 4566      746800
 4567              	.LASF68:
 4568 0637 72736370 		.ascii	"rscp\000"
 4568      00
 4569              	.LASF23:
 4570 063c 4461794F 		.ascii	"DayOfWeek\000"
 4570      66576565 
 4570      6B00
 4571              	.LASF32:
 4572 0646 74657374 		.ascii	"test_t\000"
 4572      5F7400
 4573              	.LASF155:
 4574 064d 73797374 		.ascii	"system_info\000"
 4574      656D5F69 
 4574      6E666F00 
 4575              	.LASF65:
 4576 0659 696D6569 		.ascii	"imei\000"
 4576      00
 4577              	.LASF31:
 4578 065e 72656173 		.ascii	"reason\000"
 4578      6F6E00
 4579              	.LASF102:
 4580 0665 616C6172 		.ascii	"alarmToBeReset\000"
 4580      6D546F42 
 4580      65526573 
 4580      657400
 4581              	.LASF107:
 4582 0674 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4582      6B697479 
 4582      43686563 
 4582      6B596F75 
 4582      7273656C 
 4583              	.LASF123:
 4584 06a0 64617461 		.ascii	"data_count_sent\000"
 4584      5F636F75 
 4584      6E745F73 
 4584      656E7400 
 4585              	.LASF74:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 102


 4586 06b0 6D6F6465 		.ascii	"modem_stats_t\000"
 4586      6D5F7374 
 4586      6174735F 
 4586      7400
 4587              	.LASF48:
 4588 06be 70726573 		.ascii	"pressure_current\000"
 4588      73757265 
 4588      5F637572 
 4588      72656E74 
 4588      00
 4589              	.LASF44:
 4590 06cf 76616C69 		.ascii	"valid\000"
 4590      6400
 4591              	.LASF57:
 4592 06d5 746D5F77 		.ascii	"tm_wday\000"
 4592      64617900 
 4593              	.LASF20:
 4594 06dd 6C6F6E67 		.ascii	"long double\000"
 4594      20646F75 
 4594      626C6500 
 4595              	.LASF120:
 4596 06e9 6368756E 		.ascii	"chunk\000"
 4596      6B00
 4597              	.LASF131:
 4598 06ef 635F7469 		.ascii	"c_timeStamp\000"
 4598      6D655374 
 4598      616D7000 
 4599              	.LASF19:
 4600 06fb 63686172 		.ascii	"char\000"
 4600      00
 4601              	.LASF43:
 4602 0700 766F6C74 		.ascii	"voltage_valve_pot_power\000"
 4602      6167655F 
 4602      76616C76 
 4602      655F706F 
 4602      745F706F 
 4603              	.LASF150:
 4604 0718 6D6F6465 		.ascii	"modem_stats\000"
 4604      6D5F7374 
 4604      61747300 
 4605              	.LASF154:
 4606 0724 68747470 		.ascii	"http_route\000"
 4606      5F726F75 
 4606      746500
 4607              	.LASF119:
 4608 072f 706F7274 		.ascii	"portConfig\000"
 4608      436F6E66 
 4608      696700
 4609              	.LASF9:
 4610 073a 5F5F696E 		.ascii	"__int32_t\000"
 4610      7433325F 
 4610      7400
 4611              	.LASF93:
 4612 0744 756E6971 		.ascii	"uniqueId\000"
 4612      75654964 
 4612      00
 4613              	.LASF77:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 103


 4614 074d 6D656173 		.ascii	"measure_time\000"
 4614      7572655F 
 4614      74696D65 
 4614      00
 4615              	.LASF133:
 4616 075a 6D5F6C65 		.ascii	"m_level_sensor\000"
 4616      76656C5F 
 4616      73656E73 
 4616      6F7200
 4617              	.LASF34:
 4618 0769 6C657665 		.ascii	"level_reading\000"
 4618      6C5F7265 
 4618      6164696E 
 4618      6700
 4619              	.LASF167:
 4620 0777 4C617942 		.ascii	"LayBack\000"
 4620      61636B00 
 4621              	.LASF3:
 4622 077f 73686F72 		.ascii	"short unsigned int\000"
 4622      7420756E 
 4622      7369676E 
 4622      65642069 
 4622      6E7400
 4623              	.LASF63:
 4624 0792 73696D5F 		.ascii	"sim_id\000"
 4624      696400
 4625              	.LASF54:
 4626 0799 746D5F6D 		.ascii	"tm_mday\000"
 4626      64617900 
 4627              	.LASF105:
 4628 07a1 6E657741 		.ascii	"newAlarm\000"
 4628      6C61726D 
 4628      00
 4629              	.LASF51:
 4630 07aa 746D5F73 		.ascii	"tm_sec\000"
 4630      656300
 4631              	.LASF134:
 4632 07b1 6D5F7072 		.ascii	"m_pressure\000"
 4632      65737375 
 4632      726500
 4633              	.LASF30:
 4634 07bc 73746174 		.ascii	"status\000"
 4634      757300
 4635              	.LASF146:
 4636 07c3 64617461 		.ascii	"dataPointsInStackDesired\000"
 4636      506F696E 
 4636      7473496E 
 4636      53746163 
 4636      6B446573 
 4637              	.LASF110:
 4638 07dc 745F766F 		.ascii	"t_voltages\000"
 4638      6C746167 
 4638      657300
 4639              	.LASF164:
 4640 07e7 6E6F746F 		.ascii	"notoriOS.c\000"
 4640      72694F53 
 4640      2E6300
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 104


 4641              	.LASF153:
 4642 07f2 68747470 		.ascii	"http_body\000"
 4642      5F626F64 
 4642      7900
 4643              	.LASF15:
 4644 07fc 696E7431 		.ascii	"int16\000"
 4644      3600
 4645              	.LASF84:
 4646 0802 636F756E 		.ascii	"countDownType\000"
 4646      74446F77 
 4646      6E547970 
 4646      6500
 4647              	.LASF83:
 4648 0810 63757272 		.ascii	"currentCountDownValue\000"
 4648      656E7443 
 4648      6F756E74 
 4648      446F776E 
 4648      56616C75 
 4649              	.LASF76:
 4650 0826 73696D5F 		.ascii	"sim_type\000"
 4650      74797065 
 4650      00
 4651              	.LASF94:
 4652 082f 635F6865 		.ascii	"c_hey\000"
 4652      7900
 4653              	.LASF42:
 4654 0835 766F6C74 		.ascii	"voltage_valve_pos\000"
 4654      6167655F 
 4654      76616C76 
 4654      655F706F 
 4654      7300
 4655              	.LASF25:
 4656 0847 4461794F 		.ascii	"DayOfYear\000"
 4656      66596561 
 4656      7200
 4657              	.LASF50:
 4658 0851 70726573 		.ascii	"pressure_t\000"
 4658      73757265 
 4658      5F7400
 4659              	.LASF103:
 4660 085c 416C6172 		.ascii	"AlarmReady\000"
 4660      6D526561 
 4660      647900
 4661              	.LASF106:
 4662 0867 52656164 		.ascii	"ReadyOrNot\000"
 4662      794F724E 
 4662      6F7400
 4663              	.LASF168:
 4664 0872 6D61696E 		.ascii	"main\000"
 4664      00
 4665              	.LASF88:
 4666 0877 63686970 		.ascii	"chip_uniqueId\000"
 4666      5F756E69 
 4666      71756549 
 4666      6400
 4667              	.LASF109:
 4668 0885 745F7661 		.ascii	"t_valve\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cci8FHtf.s 			page 105


 4668      6C766500 
 4669              	.LASF18:
 4670 088d 646F7562 		.ascii	"double\000"
 4670      6C6500
 4671              	.LASF45:
 4672 0894 766F6C74 		.ascii	"voltage_t\000"
 4672      6167655F 
 4672      7400
 4673              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
