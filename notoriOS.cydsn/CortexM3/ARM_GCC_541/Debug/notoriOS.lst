ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.Wakeup_ISR,"ax",%progbits
  44              		.align	2
  45              		.global	Wakeup_ISR
  46              		.thumb
  47              		.thumb_func
  48              		.type	Wakeup_ISR, %function
  49              	Wakeup_ISR:
  50              	.LFB64:
  51              		.file 1 "notoriOS.c"
   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 2


   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56 0000 80B5     		push	{r7, lr}
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  62              		.loc 1 22 0
  63 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  64              		.loc 1 23 0
  65 0008 00BF     		nop
  66 000a 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	Wakeup_ISR, .-Wakeup_ISR
  70              		.global	Data_fileName
  71              		.data
  72              		.align	2
  73              		.type	Data_fileName, %object
  74              		.size	Data_fileName, 30
  75              	Data_fileName:
  76 0000 64617461 		.ascii	"data.txt\000"
  76      2E747874 
  76      00
  77 0009 00000000 		.space	21
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.comm	try_counter,1,1
  79              		.section	.rodata
  80              		.align	2
  81              	.LC0:
  82 0000 25582D25 		.ascii	"%X-%X\000"
  82      5800
  83 0006 0000     		.align	2
  84              	.LC1:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 3


  85 0008 6563322D 		.ascii	"ec2-13-59-131-167.us-east-2.compute.amazonaws.com\000"
  85      31332D35 
  85      392D3133 
  85      312D3136 
  85      372E7573 
  86 003a 0000     		.align	2
  87              	.LC2:
  88 003c 256400   		.ascii	"%d\000"
  89 003f 00       		.align	2
  90              	.LC3:
  91 0040 7265626F 		.ascii	"reboot\000"
  91      6F7400
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 32
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 8AB0     		sub	sp, sp, #40
 111              		.cfi_def_cfa_offset 56
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 48
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 3948     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 4


  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F11403 		add	r3, r7, #20
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 7A69     		ldr	r2, [r7, #20]
 136 0032 BB69     		ldr	r3, [r7, #24]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 2D4A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 2D48     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 2D4B     		ldr	r3, .L3+12
 145 0044 2D4A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-13-59-131-167.us-eas
 147              		.loc 1 68 0
 148 0048 2D4A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 5


 149 004a 2E4B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 2380     		strh	r3, [r4]	@ movhi
  69:notoriOS.c    ****    
  70:notoriOS.c    ****     system_settings.ep_port = 5000;
 160              		.loc 1 70 0
 161 0060 274B     		ldr	r3, .L3+20
 162 0062 41F28832 		movw	r2, #5000
 163 0066 5A66     		str	r2, [r3, #100]
  71:notoriOS.c    ****     // Don't need the following for new nodes
  72:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  73:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  74:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  75:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  76:notoriOS.c    ****         
  77:notoriOS.c    ****     
  78:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  79:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 164              		.loc 1 79 0
 165 0068 274B     		ldr	r3, .L3+28
 166 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 167 006c 99B2     		uxth	r1, r3
 168 006e 274C     		ldr	r4, .L3+32
 169 0070 3846     		mov	r0, r7
 170 0072 0723     		movs	r3, #7
 171 0074 0122     		movs	r2, #1
 172 0076 FFF7FEFF 		bl	CreateAlarm
 173 007a 2246     		mov	r2, r4
 174 007c 3B46     		mov	r3, r7
 175 007e 1968     		ldr	r1, [r3]	@ unaligned
 176 0080 1160     		str	r1, [r2]	@ unaligned
 177 0082 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 178 0084 9380     		strh	r3, [r2, #4]	@ unaligned
  80:notoriOS.c    ****     timeToMeasure = 1u;
 179              		.loc 1 80 0
 180 0086 224B     		ldr	r3, .L3+36
 181 0088 0122     		movs	r2, #1
 182 008a 1A70     		strb	r2, [r3]
  81:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  82:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 183              		.loc 1 82 0
 184 008c 1E4B     		ldr	r3, .L3+28
 185 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 186 0090 99B2     		uxth	r1, r3
 187 0092 204C     		ldr	r4, .L3+40
 188 0094 3846     		mov	r0, r7
 189 0096 0723     		movs	r3, #7
 190 0098 0122     		movs	r2, #1
 191 009a FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 6


 192 009e 2246     		mov	r2, r4
 193 00a0 3B46     		mov	r3, r7
 194 00a2 1968     		ldr	r1, [r3]	@ unaligned
 195 00a4 1160     		str	r1, [r2]	@ unaligned
 196 00a6 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 197 00a8 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToSync = 1u;
 198              		.loc 1 83 0
 199 00aa 1B4B     		ldr	r3, .L3+44
 200 00ac 0122     		movs	r2, #1
 201 00ae 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     
  85:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 202              		.loc 1 85 0
 203 00b0 1A4B     		ldr	r3, .L3+48
 204 00b2 0022     		movs	r2, #0
 205 00b4 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     
  87:notoriOS.c    ****     // send hey to server saying the node rebooted
  88:notoriOS.c    ****     hey = 1u;
 206              		.loc 1 88 0
 207 00b6 1A4B     		ldr	r3, .L3+52
 208 00b8 0122     		movs	r2, #1
 209 00ba 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     char c_hey[10];
  90:notoriOS.c    ****     snprintf(c_hey,sizeof(c_hey),"%d",hey);
 210              		.loc 1 90 0
 211 00bc 184B     		ldr	r3, .L3+52
 212 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 213 00c0 07F10800 		add	r0, r7, #8
 214 00c4 174A     		ldr	r2, .L3+56
 215 00c6 0A21     		movs	r1, #10
 216 00c8 FFF7FEFF 		bl	snprintf
  91:notoriOS.c    ****     pushData("reboot",c_hey,getTimeStamp());
 217              		.loc 1 91 0
 218 00cc FFF7FEFF 		bl	getTimeStamp
 219 00d0 0246     		mov	r2, r0
 220 00d2 07F10803 		add	r3, r7, #8
 221 00d6 1946     		mov	r1, r3
 222 00d8 1348     		ldr	r0, .L3+60
 223 00da FFF7FEFF 		bl	pushData
  92:notoriOS.c    ****     
  93:notoriOS.c    ****     // Initialize the try counter to 0
  94:notoriOS.c    ****     uint8 try_counter = 0;
 224              		.loc 1 94 0
 225 00de 0023     		movs	r3, #0
 226 00e0 FB77     		strb	r3, [r7, #31]
  95:notoriOS.c    **** }
 227              		.loc 1 95 0
 228 00e2 00BF     		nop
 229 00e4 2037     		adds	r7, r7, #32
 230              		.cfi_def_cfa_offset 16
 231 00e6 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 00e8 B0BD     		pop	{r4, r5, r7, pc}
 235              	.L4:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 7


 236 00ea 00BF     		.align	2
 237              	.L3:
 238 00ec 00000000 		.word	Wakeup_ISR
 239 00f0 00000000 		.word	.LC0
 240 00f4 04000000 		.word	system_info+4
 241 00f8 00000000 		.word	system_info
 242 00fc 00000000 		.word	modem_info
 243 0100 00000000 		.word	system_settings
 244 0104 08000000 		.word	.LC1
 245 0108 00000000 		.word	updatable_parameters
 246 010c 00000000 		.word	alarmMeasure
 247 0110 00000000 		.word	timeToMeasure
 248 0114 00000000 		.word	alarmSync
 249 0118 00000000 		.word	timeToSync
 250 011c 00000000 		.word	timeToSycnRemoteParams
 251 0120 00000000 		.word	hey
 252 0124 3C000000 		.word	.LC2
 253 0128 40000000 		.word	.LC3
 254              		.cfi_endproc
 255              	.LFE65:
 256              		.size	ReadyOrNot, .-ReadyOrNot
 257              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 258              		.align	2
 259              		.global	WorkWorkWorkWorkWorkWork
 260              		.thumb
 261              		.thumb_func
 262              		.type	WorkWorkWorkWorkWorkWork, %function
 263              	WorkWorkWorkWorkWorkWork:
 264              	.LFB66:
  96:notoriOS.c    **** 
  97:notoriOS.c    **** 
  98:notoriOS.c    **** // ==============================================
  99:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 100:notoriOS.c    **** //      - Rhiana, feat Drake (2016)
 101:notoriOS.c    **** //
 102:notoriOS.c    **** // Prorcesses core tasks
 103:notoriOS.c    **** // ==============================================
 104:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 105:notoriOS.c    **** {
 265              		.loc 1 105 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 106:notoriOS.c    ****     
 107:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 108:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 109:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 110:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 111:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 8


 112:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 113:notoriOS.c    ****     if(timeToSycnRemoteParams){
 277              		.loc 1 113 0
 278 0006 144B     		ldr	r3, .L10
 279 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 280 000a 002B     		cmp	r3, #0
 281 000c 06D0     		beq	.L6
 114:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 282              		.loc 1 114 0
 283 000e FFF7FEFF 		bl	configureRemoteParams
 284 0012 0346     		mov	r3, r0
 285 0014 1A46     		mov	r2, r3
 286 0016 104B     		ldr	r3, .L10
 287 0018 1A70     		strb	r2, [r3]
 288 001a 14E0     		b	.L7
 289              	.L6:
 115:notoriOS.c    ****     }
 116:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 117:notoriOS.c    ****     else if(timeToMeasure){
 290              		.loc 1 117 0
 291 001c 0F4B     		ldr	r3, .L10+4
 292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 293 0020 002B     		cmp	r3, #0
 294 0022 06D0     		beq	.L8
 118:notoriOS.c    ****         //(int i=0; i<=30; i++){
 119:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 295              		.loc 1 119 0
 296 0024 FFF7FEFF 		bl	makeMeasurements
 297 0028 0346     		mov	r3, r0
 298 002a 1A46     		mov	r2, r3
 299 002c 0B4B     		ldr	r3, .L10+4
 300 002e 1A70     		strb	r2, [r3]
 301 0030 09E0     		b	.L7
 302              	.L8:
 120:notoriOS.c    ****         //CyDelay(1000u);
 121:notoriOS.c    ****         //}
 122:notoriOS.c    ****     }else if(timeToSync){
 303              		.loc 1 122 0
 304 0032 0B4B     		ldr	r3, .L10+8
 305 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 0036 002B     		cmp	r3, #0
 307 0038 05D0     		beq	.L7
 123:notoriOS.c    ****             timeToSync = syncData();
 308              		.loc 1 123 0
 309 003a FFF7FEFF 		bl	syncData
 310 003e 0346     		mov	r3, r0
 311 0040 1A46     		mov	r2, r3
 312 0042 074B     		ldr	r3, .L10+8
 313 0044 1A70     		strb	r2, [r3]
 314              	.L7:
 124:notoriOS.c    ****     }
 125:notoriOS.c    ****     // Print the countdown to the next alarm
 126:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 127:notoriOS.c    ****     
 128:notoriOS.c    ****     
 129:notoriOS.c    ****     // Check modem state machine on every loop
 130:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 9


 315              		.loc 1 130 0
 316 0046 FFF7FEFF 		bl	modem_process_tasks
 317 004a 0346     		mov	r3, r0
 318 004c FB71     		strb	r3, [r7, #7]
 131:notoriOS.c    **** 
 132:notoriOS.c    ****     return 0u +  modem_status;  
 319              		.loc 1 132 0
 320 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133:notoriOS.c    **** }
 321              		.loc 1 133 0
 322 0050 1846     		mov	r0, r3
 323 0052 0837     		adds	r7, r7, #8
 324              		.cfi_def_cfa_offset 8
 325 0054 BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 0056 80BD     		pop	{r7, pc}
 329              	.L11:
 330              		.align	2
 331              	.L10:
 332 0058 00000000 		.word	timeToSycnRemoteParams
 333 005c 00000000 		.word	timeToMeasure
 334 0060 00000000 		.word	timeToSync
 335              		.cfi_endproc
 336              	.LFE66:
 337              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 338              		.section	.text.LayBack,"ax",%progbits
 339              		.align	2
 340              		.global	LayBack
 341              		.thumb
 342              		.thumb_func
 343              		.type	LayBack, %function
 344              	LayBack:
 345              	.LFB67:
 134:notoriOS.c    **** 
 135:notoriOS.c    **** 
 136:notoriOS.c    **** 
 137:notoriOS.c    **** 
 138:notoriOS.c    **** 
 139:notoriOS.c    **** 
 140:notoriOS.c    **** // ==============================================
 141:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 142:notoriOS.c    **** //      - Snoop Dogg (1993)
 143:notoriOS.c    **** //
 144:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 145:notoriOS.c    **** // ==============================================
 146:notoriOS.c    **** void LayBack()
 147:notoriOS.c    **** {
 346              		.loc 1 147 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 0000 80B5     		push	{r7, lr}
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 10


 355              		.cfi_def_cfa_register 7
 148:notoriOS.c    ****   
 149:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 356              		.loc 1 149 0
 357 0004 FFF7FEFF 		bl	modem_sleep
 150:notoriOS.c    ****     
 151:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 152:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 358              		.loc 1 152 0
 359 0008 FFF7FEFF 		bl	debug_sleep
 153:notoriOS.c    ****     
 154:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 360              		.loc 1 154 0
 361 000c FFF7FEFF 		bl	CyPmSaveClocks
 155:notoriOS.c    ****     
 156:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 157:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 158:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 159:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 160:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 161:notoriOS.c    ****     //CyPmHibernate();
 162:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 163:notoriOS.c    **** 
 164:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 362              		.loc 1 164 0
 363 0010 4FF40061 		mov	r1, #2048
 364 0014 0020     		movs	r0, #0
 365 0016 FFF7FEFF 		bl	CyPmSleep
 165:notoriOS.c    **** 
 166:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 366              		.loc 1 166 0
 367 001a FFF7FEFF 		bl	CyPmRestoreClocks
 167:notoriOS.c    **** 
 168:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 368              		.loc 1 168 0
 369 001e FFF7FEFF 		bl	debug_wakeup
 169:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 370              		.loc 1 169 0
 371 0022 FFF7FEFF 		bl	modem_wakeup
 170:notoriOS.c    **** 
 171:notoriOS.c    **** }
 372              		.loc 1 171 0
 373 0026 00BF     		nop
 374 0028 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE67:
 377              		.size	LayBack, .-LayBack
 378 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 379              		.align	2
 380              		.global	AyoItsTime
 381              		.thumb
 382              		.thumb_func
 383              		.type	AyoItsTime, %function
 384              	AyoItsTime:
 385              	.LFB68:
 172:notoriOS.c    **** 
 173:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 11


 174:notoriOS.c    **** // ==============================================
 175:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 176:notoriOS.c    **** //      - NAS (1994)
 177:notoriOS.c    **** //
 178:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 179:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 180:notoriOS.c    **** // It will add tasks to the work queue,
 181:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 182:notoriOS.c    **** // ==============================================
 183:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 184:notoriOS.c    **** {
 386              		.loc 1 184 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 8
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 82B0     		sub	sp, sp, #8
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 0346     		mov	r3, r0
 399 0008 FB71     		strb	r3, [r7, #7]
 185:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 186:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 400              		.loc 1 186 0
 401 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 402 000c 1946     		mov	r1, r3
 403 000e 0C48     		ldr	r0, .L17
 404 0010 FFF7FEFF 		bl	AlarmReady
 405 0014 0346     		mov	r3, r0
 406 0016 002B     		cmp	r3, #0
 407 0018 02D0     		beq	.L14
 187:notoriOS.c    ****     {
 188:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 189:notoriOS.c    ****         timeToMeasure = 1u;
 408              		.loc 1 189 0
 409 001a 0A4B     		ldr	r3, .L17+4
 410 001c 0122     		movs	r2, #1
 411 001e 1A70     		strb	r2, [r3]
 412              	.L14:
 190:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 191:notoriOS.c    ****         
 192:notoriOS.c    ****     }
 193:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 413              		.loc 1 193 0
 414 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415 0022 1946     		mov	r1, r3
 416 0024 0848     		ldr	r0, .L17+8
 417 0026 FFF7FEFF 		bl	AlarmReady
 418 002a 0346     		mov	r3, r0
 419 002c 002B     		cmp	r3, #0
 420 002e 02D0     		beq	.L16
 194:notoriOS.c    ****     {
 195:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 12


 196:notoriOS.c    ****         timeToSync = 1u;
 421              		.loc 1 196 0
 422 0030 064B     		ldr	r3, .L17+12
 423 0032 0122     		movs	r2, #1
 424 0034 1A70     		strb	r2, [r3]
 425              	.L16:
 197:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 198:notoriOS.c    ****     }
 199:notoriOS.c    ****     
 200:notoriOS.c    **** }
 426              		.loc 1 200 0
 427 0036 00BF     		nop
 428 0038 0837     		adds	r7, r7, #8
 429              		.cfi_def_cfa_offset 8
 430 003a BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 003c 80BD     		pop	{r7, pc}
 434              	.L18:
 435 003e 00BF     		.align	2
 436              	.L17:
 437 0040 00000000 		.word	alarmMeasure
 438 0044 00000000 		.word	timeToMeasure
 439 0048 00000000 		.word	alarmSync
 440 004c 00000000 		.word	timeToSync
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	AyoItsTime, .-AyoItsTime
 444              		.section	.text.AlarmReady,"ax",%progbits
 445              		.align	2
 446              		.global	AlarmReady
 447              		.thumb
 448              		.thumb_func
 449              		.type	AlarmReady, %function
 450              	AlarmReady:
 451              	.LFB69:
 201:notoriOS.c    **** 
 202:notoriOS.c    **** 
 203:notoriOS.c    **** // ==============================================
 204:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 205:notoriOS.c    **** // ==============================================
 206:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 207:notoriOS.c    **** {
 452              		.loc 1 207 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 7860     		str	r0, [r7, #4]
 465 0008 0B46     		mov	r3, r1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 13


 466 000a FB70     		strb	r3, [r7, #3]
 208:notoriOS.c    ****     // if the countDownType matches the alarmType
 209:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 467              		.loc 1 209 0
 468 000c 7B68     		ldr	r3, [r7, #4]
 469 000e 1B79     		ldrb	r3, [r3, #4]
 470 0010 DBB2     		uxtb	r3, r3
 471 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 472 0014 9A42     		cmp	r2, r3
 473 0016 12D1     		bne	.L20
 210:notoriOS.c    ****        
 211:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 212:notoriOS.c    ****         // Decrement the count down value by 1
 213:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 474              		.loc 1 213 0
 475 0018 7B68     		ldr	r3, [r7, #4]
 476 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 477 001c 1BB2     		sxth	r3, r3
 478 001e 9BB2     		uxth	r3, r3
 479 0020 013B     		subs	r3, r3, #1
 480 0022 9BB2     		uxth	r3, r3
 481 0024 1AB2     		sxth	r2, r3
 482 0026 7B68     		ldr	r3, [r7, #4]
 483 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 214:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 215:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 484              		.loc 1 215 0
 485 002a 7B68     		ldr	r3, [r7, #4]
 486 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 487 002e 1BB2     		sxth	r3, r3
 488 0030 002B     		cmp	r3, #0
 489 0032 04DC     		bgt	.L20
 216:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 490              		.loc 1 216 0
 491 0034 7868     		ldr	r0, [r7, #4]
 492 0036 FFF7FEFF 		bl	ResetAlarm
 217:notoriOS.c    ****             return 1u;
 493              		.loc 1 217 0
 494 003a 0123     		movs	r3, #1
 495 003c 00E0     		b	.L21
 496              	.L20:
 218:notoriOS.c    ****         } 
 219:notoriOS.c    ****     }
 220:notoriOS.c    ****     
 221:notoriOS.c    ****     return 0u; // Otherwise return 0
 497              		.loc 1 221 0
 498 003e 0023     		movs	r3, #0
 499              	.L21:
 222:notoriOS.c    **** }
 500              		.loc 1 222 0
 501 0040 1846     		mov	r0, r3
 502 0042 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0044 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0046 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 14


 508              		.cfi_endproc
 509              	.LFE69:
 510              		.size	AlarmReady, .-AlarmReady
 511              		.section	.text.ResetAlarm,"ax",%progbits
 512              		.align	2
 513              		.global	ResetAlarm
 514              		.thumb
 515              		.thumb_func
 516              		.type	ResetAlarm, %function
 517              	ResetAlarm:
 518              	.LFB70:
 223:notoriOS.c    **** 
 224:notoriOS.c    **** // ==============================================
 225:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 226:notoriOS.c    **** // ==============================================
 227:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 228:notoriOS.c    **** {
 519              		.loc 1 228 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524 0000 80B4     		push	{r7}
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 83B0     		sub	sp, sp, #12
 528              		.cfi_def_cfa_offset 16
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 229:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 230:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 532              		.loc 1 230 0
 533 0008 7B68     		ldr	r3, [r7, #4]
 534 000a 1B88     		ldrh	r3, [r3]	@ movhi
 535 000c 9BB2     		uxth	r3, r3
 536 000e 1AB2     		sxth	r2, r3
 537 0010 7B68     		ldr	r3, [r7, #4]
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 231:notoriOS.c    **** }
 539              		.loc 1 231 0
 540 0014 00BF     		nop
 541 0016 0C37     		adds	r7, r7, #12
 542              		.cfi_def_cfa_offset 4
 543 0018 BD46     		mov	sp, r7
 544              		.cfi_def_cfa_register 13
 545              		@ sp needed
 546 001a 80BC     		pop	{r7}
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 001c 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE70:
 552              		.size	ResetAlarm, .-ResetAlarm
 553 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 554              		.align	2
 555              		.global	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 15


 556              		.thumb
 557              		.thumb_func
 558              		.type	CreateAlarm, %function
 559              	CreateAlarm:
 560              	.LFB71:
 232:notoriOS.c    **** 
 233:notoriOS.c    **** // ==============================================
 234:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 235:notoriOS.c    **** // ==============================================
 236:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 237:notoriOS.c    **** {
 561              		.loc 1 237 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 85B0     		sub	sp, sp, #20
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0846     		mov	r0, r1
 575 000a 1146     		mov	r1, r2
 576 000c 1A46     		mov	r2, r3
 577 000e 0346     		mov	r3, r0	@ movhi
 578 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 579 0012 0B46     		mov	r3, r1
 580 0014 7B70     		strb	r3, [r7, #1]
 581 0016 1346     		mov	r3, r2
 582 0018 3B70     		strb	r3, [r7]
 238:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 239:notoriOS.c    ****     alarm newAlarm;
 240:notoriOS.c    ****     
 241:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 242:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 583              		.loc 1 242 0
 584 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 585 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 243:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 586              		.loc 1 243 0
 587 001e 7B78     		ldrb	r3, [r7, #1]
 588 0020 3B73     		strb	r3, [r7, #12]
 244:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 589              		.loc 1 244 0
 590 0022 3B78     		ldrb	r3, [r7]
 591 0024 7B73     		strb	r3, [r7, #13]
 245:notoriOS.c    ****     
 246:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 247:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 248:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 592              		.loc 1 248 0
 593 0026 B7F90230 		ldrsh	r3, [r7, #2]
 594 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 249:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 16


 250:notoriOS.c    ****     return newAlarm;
 595              		.loc 1 250 0
 596 002c 7B68     		ldr	r3, [r7, #4]
 597 002e 1A46     		mov	r2, r3
 598 0030 07F10803 		add	r3, r7, #8
 599 0034 1868     		ldr	r0, [r3]	@ unaligned
 600 0036 1060     		str	r0, [r2]	@ unaligned
 601 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 602 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 251:notoriOS.c    ****     
 252:notoriOS.c    **** }
 603              		.loc 1 252 0
 604 003c 7868     		ldr	r0, [r7, #4]
 605 003e 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 0040 BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 0042 80BC     		pop	{r7}
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0044 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE71:
 616              		.size	CreateAlarm, .-CreateAlarm
 617 0046 00BF     		.section	.rodata
 618 0047 00       		.align	2
 619              	.LC4:
 620 0048 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 620      2D2D2D2D 
 620      2D2D2D2D 
 620      2D424547 
 620      494E2054 
 621 0072 0000     		.align	2
 622              	.LC5:
 623 0074 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 623      3D25732C 
 623      2053494D 
 623      49443D25 
 623      732C2044 
 624 0093 00       		.align	2
 625              	.LC6:
 626 0094 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 626      2D2D2D2D 
 626      2D2D2D2D 
 626      2D2D2D45 
 626      4E442054 
 627 00bd 00       		.ascii	"\000"
 628              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 629              		.align	2
 630              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 631              		.thumb
 632              		.thumb_func
 633              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 634              	ChickityCheckYourselfBeforeYouWreckYourself:
 635              	.LFB72:
 253:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 17


 254:notoriOS.c    **** // ==============================================
 255:notoriOS.c    **** // Dropping bombs on your moms
 256:notoriOS.c    **** //      - Ice Cube (1992)
 257:notoriOS.c    **** //
 258:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 259:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 260:notoriOS.c    **** // ==============================================
 261:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 636              		.loc 1 261 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 2328
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 90B5     		push	{r4, r7, lr}
 641              		.cfi_def_cfa_offset 12
 642              		.cfi_offset 4, -12
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 ADF6942D 		subw	sp, sp, #2708
 646              		.cfi_def_cfa_offset 2720
 647 0006 5EAF     		add	r7, sp, #376
 648              		.cfi_def_cfa 7, 2344
 262:notoriOS.c    **** 
 263:notoriOS.c    ****     //test_t t_influx = influx_test();
 264:notoriOS.c    ****     //printTestStatus(t_influx);
 265:notoriOS.c    ****     
 266:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 649              		.loc 1 266 0
 650 0008 4249     		ldr	r1, .L26
 651 000a 0320     		movs	r0, #3
 652 000c FFF7FEFF 		bl	printNotif
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Test level sensor
 269:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 653              		.loc 1 269 0
 654 0010 07F29473 		addw	r3, r7, #1940
 655 0014 1846     		mov	r0, r3
 656 0016 FFF7FEFF 		bl	level_sensor_test
 270:notoriOS.c    ****     printTestStatus(t_level_sensor);
 657              		.loc 1 270 0
 658 001a 07F29474 		addw	r4, r7, #1940
 659 001e 6846     		mov	r0, sp
 660 0020 04F11003 		add	r3, r4, #16
 661 0024 40F27112 		movw	r2, #369
 662 0028 1946     		mov	r1, r3
 663 002a FFF7FEFF 		bl	memcpy
 664 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 665 0032 FFF7FEFF 		bl	printTestStatus
 271:notoriOS.c    ****     
 272:notoriOS.c    ****     // Test Valve
 273:notoriOS.c    ****     test_t t_valve = valve_test();
 666              		.loc 1 273 0
 667 0036 07F5C263 		add	r3, r7, #1552
 668 003a 1846     		mov	r0, r3
 669 003c FFF7FEFF 		bl	valve_test
 274:notoriOS.c    ****     printTestStatus(t_valve);
 670              		.loc 1 274 0
 671 0040 07F5C264 		add	r4, r7, #1552
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 18


 672 0044 6846     		mov	r0, sp
 673 0046 04F11003 		add	r3, r4, #16
 674 004a 40F27112 		movw	r2, #369
 675 004e 1946     		mov	r1, r3
 676 0050 FFF7FEFF 		bl	memcpy
 677 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 678 0058 FFF7FEFF 		bl	printTestStatus
 275:notoriOS.c    ****     
 276:notoriOS.c    ****     // Test voltages
 277:notoriOS.c    ****     test_t t_voltages = voltages_test();
 679              		.loc 1 277 0
 680 005c 07F28C43 		addw	r3, r7, #1164
 681 0060 1846     		mov	r0, r3
 682 0062 FFF7FEFF 		bl	voltages_test
 278:notoriOS.c    ****     printTestStatus(t_voltages);
 683              		.loc 1 278 0
 684 0066 07F28C44 		addw	r4, r7, #1164
 685 006a 6846     		mov	r0, sp
 686 006c 04F11003 		add	r3, r4, #16
 687 0070 40F27112 		movw	r2, #369
 688 0074 1946     		mov	r1, r3
 689 0076 FFF7FEFF 		bl	memcpy
 690 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 691 007e FFF7FEFF 		bl	printTestStatus
 279:notoriOS.c    ****  
 280:notoriOS.c    ****     // Test voltages
 281:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 692              		.loc 1 281 0
 693 0082 07F54273 		add	r3, r7, #776
 694 0086 1846     		mov	r0, r3
 695 0088 FFF7FEFF 		bl	pressure_sensor_test
 282:notoriOS.c    ****     printTestStatus(t_pressure);
 696              		.loc 1 282 0
 697 008c 07F54274 		add	r4, r7, #776
 698 0090 6846     		mov	r0, sp
 699 0092 04F11003 		add	r3, r4, #16
 700 0096 40F27112 		movw	r2, #369
 701 009a 1946     		mov	r1, r3
 702 009c FFF7FEFF 		bl	memcpy
 703 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 704 00a4 FFF7FEFF 		bl	printTestStatus
 283:notoriOS.c    ****     
 284:notoriOS.c    ****     // Test SD card
 285:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 705              		.loc 1 285 0
 706 00a8 07F5C273 		add	r3, r7, #388
 707 00ac 1846     		mov	r0, r3
 708 00ae FFF7FEFF 		bl	SD_card_test
 286:notoriOS.c    ****     printTestStatus(t_sd_card);
 709              		.loc 1 286 0
 710 00b2 07F5C274 		add	r4, r7, #388
 711 00b6 6846     		mov	r0, sp
 712 00b8 04F11003 		add	r3, r4, #16
 713 00bc 40F27112 		movw	r2, #369
 714 00c0 1946     		mov	r1, r3
 715 00c2 FFF7FEFF 		bl	memcpy
 716 00c6 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 19


 717 00ca FFF7FEFF 		bl	printTestStatus
 287:notoriOS.c    ****     
 288:notoriOS.c    ****     // Test modem
 289:notoriOS.c    ****     test_t t_modem = modem_test();
 718              		.loc 1 289 0
 719 00ce 3B46     		mov	r3, r7
 720 00d0 1846     		mov	r0, r3
 721 00d2 FFF7FEFF 		bl	modem_test
 290:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 722              		.loc 1 290 0
 723 00d6 104B     		ldr	r3, .L26+4
 724 00d8 0093     		str	r3, [sp]
 725 00da 104B     		ldr	r3, .L26+8
 726 00dc 104A     		ldr	r2, .L26+12
 727 00de 1149     		ldr	r1, .L26+16
 728 00e0 0320     		movs	r0, #3
 729 00e2 FFF7FEFF 		bl	printNotif
 291:notoriOS.c    ****     printTestStatus(t_modem);
 730              		.loc 1 291 0
 731 00e6 3C46     		mov	r4, r7
 732 00e8 6846     		mov	r0, sp
 733 00ea 04F11003 		add	r3, r4, #16
 734 00ee 40F27112 		movw	r2, #369
 735 00f2 1946     		mov	r1, r3
 736 00f4 FFF7FEFF 		bl	memcpy
 737 00f8 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 738 00fc FFF7FEFF 		bl	printTestStatus
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 739              		.loc 1 293 0
 740 0100 0949     		ldr	r1, .L26+20
 741 0102 0320     		movs	r0, #3
 742 0104 FFF7FEFF 		bl	printNotif
 294:notoriOS.c    **** 
 295:notoriOS.c    **** }
 743              		.loc 1 295 0
 744 0108 00BF     		nop
 745 010a 07F61C17 		addw	r7, r7, #2332
 746              		.cfi_def_cfa_offset 12
 747 010e BD46     		mov	sp, r7
 748              		.cfi_def_cfa_register 13
 749              		@ sp needed
 750 0110 90BD     		pop	{r4, r7, pc}
 751              	.L27:
 752 0112 00BF     		.align	2
 753              	.L26:
 754 0114 48000000 		.word	.LC4
 755 0118 04000000 		.word	system_info+4
 756 011c 00000000 		.word	modem_info
 757 0120 28000000 		.word	modem_info+40
 758 0124 74000000 		.word	.LC5
 759 0128 94000000 		.word	.LC6
 760              		.cfi_endproc
 761              	.LFE72:
 762              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 763              		.section	.text.main,"ax",%progbits
 764              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 20


 765              		.global	main
 766              		.thumb
 767              		.thumb_func
 768              		.type	main, %function
 769              	main:
 770              	.LFB73:
 296:notoriOS.c    **** 
 297:notoriOS.c    **** // ==============================================
 298:notoriOS.c    **** // Processes Core Tasks
 299:notoriOS.c    **** // ==============================================
 300:notoriOS.c    **** int main(void)
 301:notoriOS.c    **** {
 771              		.loc 1 301 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 0
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 00AF     		add	r7, sp, #0
 780              		.cfi_def_cfa_register 7
 302:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 781              		.loc 1 302 0
 782              		.syntax unified
 783              	@ 302 "notoriOS.c" 1
 784 0004 62B6     		CPSIE   i
 785              	@ 0 "" 2
 303:notoriOS.c    **** 
 304:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 786              		.loc 1 304 0
 787              		.thumb
 788              		.syntax unified
 789 0006 FFF7FEFF 		bl	ReadyOrNot
 305:notoriOS.c    ****     
 306:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 790              		.loc 1 306 0
 791 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 792              	.L30:
 307:notoriOS.c    ****    
 308:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 309:notoriOS.c    ****     {
 310:notoriOS.c    ****         
 311:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 793              		.loc 1 311 0
 794 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 795 0012 0346     		mov	r3, r0
 796 0014 002B     		cmp	r3, #0
 797 0016 FAD1     		bne	.L30
 312:notoriOS.c    ****         {
 313:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 798              		.loc 1 313 0
 799 0018 FFF7FEFF 		bl	LayBack
 314:notoriOS.c    ****         }
 315:notoriOS.c    ****     }
 800              		.loc 1 315 0
 801 001c F7E7     		b	.L30
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 21


 802              		.cfi_endproc
 803              	.LFE73:
 804              		.size	main, .-main
 805 001e 00BF     		.section	.rodata
 806 00be 0000     		.align	2
 807              	.LC7:
 808 00c0 496D706C 		.ascii	"Implementing fallback controller strategy\000"
 808      656D656E 
 808      74696E67 
 808      2066616C 
 808      6C626163 
 809 00ea 0000     		.align	2
 810              	.LC8:
 811 00ec 4D6F6465 		.ascii	"Modem is ready.\000"
 811      6D206973 
 811      20726561 
 811      64792E00 
 812              		.align	2
 813              	.LC9:
 814 00fc 72737270 		.ascii	"rsrp\000"
 814      00
 815 0101 000000   		.align	2
 816              	.LC10:
 817 0104 7472795F 		.ascii	"try_counter\000"
 817      636F756E 
 817      74657200 
 818              		.align	2
 819              	.LC11:
 820 0110 64617461 		.ascii	"data_count_sent\000"
 820      5F636F75 
 820      6E745F73 
 820      656E7400 
 821              		.align	2
 822              	.LC12:
 823 0120 64617461 		.ascii	"data_count_desired\000"
 823      5F636F75 
 823      6E745F64 
 823      65736972 
 823      656400
 824 0133 00       		.align	2
 825              	.LC13:
 826 0134 42656769 		.ascii	"Begin HTTP post.\000"
 826      6E204854 
 826      54502070 
 826      6F73742E 
 826      00
 827 0145 000000   		.align	2
 828              	.LC14:
 829 0148 64356234 		.ascii	"d5b476b2afa58cbb97fffd789177649e275d1010\000"
 829      37366232 
 829      61666135 
 829      38636262 
 829      39376666 
 830 0171 000000   		.align	2
 831              	.LC15:
 832 0174 6170692F 		.ascii	"api/v1/write\000"
 832      76312F77 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 22


 832      72697465 
 832      00
 833 0181 000000   		.align	2
 834              	.LC16:
 835 0184 48545450 		.ascii	"HTTP route: %s\000"
 835      20726F75 
 835      74653A20 
 835      257300
 836 0193 00       		.align	2
 837              	.LC17:
 838 0194 312E3100 		.ascii	"1.1\000"
 839              		.align	2
 840              	.LC18:
 841 0198 00       		.ascii	"\000"
 842 0199 000000   		.align	2
 843              	.LC19:
 844 019c 436C6F73 		.ascii	"Close\000"
 844      6500
 845 01a2 0000     		.align	2
 846              	.LC20:
 847 01a4 504F5354 		.ascii	"POST\000"
 847      00
 848 01a9 000000   		.align	2
 849              	.LC21:
 850 01ac 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 850      20485454 
 850      50205265 
 850      71756573 
 850      743A2025 
 851 01c2 0000     		.align	2
 852              	.LC22:
 853 01c4 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 853      443D312C 
 853      302C2564 
 853      2C222573 
 853      222C302C 
 854 01dd 000000   		.align	2
 855              	.LC23:
 856 01e0 257300   		.ascii	"%s\000"
 857 01e3 00       		.align	2
 858              	.LC24:
 859 01e4 4F4B00   		.ascii	"OK\000"
 860              		.global	__aeabi_ui2d
 861              		.global	__aeabi_d2iz
 862 01e7 00       		.align	2
 863              	.LC25:
 864 01e8 68747470 		.ascii	"http_request len: %d\000"
 864      5F726571 
 864      75657374 
 864      206C656E 
 864      3A202564 
 865 01fd 000000   		.align	2
 866              	.LC26:
 867 0200 23206F66 		.ascii	"# of packets: %d\000"
 867      20706163 
 867      6B657473 
 867      3A202564 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 23


 867      00
 868 0211 000000   		.align	2
 869              	.LC27:
 870 0214 3E00     		.ascii	">\000"
 871 0216 0000     		.align	2
 872              	.LC28:
 873 0218 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 873      53454E44 
 873      3D310D0A 
 873      00
 874 0225 000000   		.align	2
 875              	.LC29:
 876 0228 1A00     		.ascii	"\032\000"
 877 022a 0000     		.align	2
 878              	.LC30:
 879 022c 6368756E 		.ascii	"chunk %d: %s\000"
 879      6B202564 
 879      3A202573 
 879      00
 880 0239 000000   		.align	2
 881              	.LC31:
 882 023c 5352494E 		.ascii	"SRING\000"
 882      4700
 883 0242 0000     		.align	2
 884              	.LC32:
 885 0244 4F532D4F 		.ascii	"OS-OK\000"
 885      4B00
 886 024a 0000     		.align	2
 887              	.LC33:
 888 024c 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 888      52454356 
 888      3D312C31 
 888      3030300D 
 888      00
 889 025d 000000   		.align	2
 890              	.LC34:
 891 0260 6D6F6465 		.ascii	"modem_tx_time\000"
 891      6D5F7478 
 891      5F74696D 
 891      6500
 892 026e 0000     		.align	2
 893              	.LC35:
 894 0270 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 894      4F3A2043 
 894      6F756C64 
 894      206E6F74 
 894      20726563 
 895              		.section	.text.syncData,"ax",%progbits
 896              		.align	2
 897              		.global	syncData
 898              		.thumb
 899              		.thumb_func
 900              		.type	syncData, %function
 901              	syncData:
 902              	.LFB74:
 316:notoriOS.c    **** }
 317:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 24


 318:notoriOS.c    **** // ==============================================
 319:notoriOS.c    **** // Syncs data with server
 320:notoriOS.c    **** // Returns 0 when done
 321:notoriOS.c    **** // ==============================================
 322:notoriOS.c    **** uint8 syncData(){
 903              		.loc 1 322 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 1368
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 90B5     		push	{r4, r7, lr}
 908              		.cfi_def_cfa_offset 12
 909              		.cfi_offset 4, -12
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912 0002 ADF2745D 		subw	sp, sp, #1396
 913              		.cfi_def_cfa_offset 1408
 914 0006 06AF     		add	r7, sp, #24
 915              		.cfi_def_cfa 7, 1384
 323:notoriOS.c    ****     
 324:notoriOS.c    ****     /*
 325:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 326:notoriOS.c    ****     uint8 check = 0;
 327:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 328:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 329:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 330:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 331:notoriOS.c    ****     */
 332:notoriOS.c    **** 
 333:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 334:notoriOS.c    ****     LED_Write(1u);
 916              		.loc 1 334 0
 917 0008 0120     		movs	r0, #1
 918 000a FFF7FEFF 		bl	LED_Write
 335:notoriOS.c    ****     CyDelay(100u);
 919              		.loc 1 335 0
 920 000e 6420     		movs	r0, #100
 921 0010 FFF7FEFF 		bl	CyDelay
 336:notoriOS.c    ****     LED_Write(0u);
 922              		.loc 1 336 0
 923 0014 0020     		movs	r0, #0
 924 0016 FFF7FEFF 		bl	LED_Write
 337:notoriOS.c    **** 
 338:notoriOS.c    ****     
 339:notoriOS.c    ****     // If there's no data, not need to do anything
 340:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 925              		.loc 1 340 0
 926 001a FFF7FEFF 		bl	sizeOfDataStack
 927 001e 0346     		mov	r3, r0
 928 0020 002B     		cmp	r3, #0
 929 0022 01D1     		bne	.L32
 341:notoriOS.c    ****         return 0u;
 930              		.loc 1 341 0
 931 0024 0023     		movs	r3, #0
 932 0026 03E2     		b	.L33
 933              	.L32:
 342:notoriOS.c    ****         }
 343:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 25


 344:notoriOS.c    ****     // Create request body, in this case influx
 345:notoriOS.c    ****     // Place body into HTTP request header
 346:notoriOS.c    ****     // Fire up modem and get it out
 347:notoriOS.c    ****      
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 350:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 934              		.loc 1 350 0
 935 0028 FFF7FEFF 		bl	modem_get_state
 936 002c 0346     		mov	r3, r0
 937 002e 002B     		cmp	r3, #0
 938 0030 23D1     		bne	.L34
 351:notoriOS.c    **** 
 352:notoriOS.c    ****         try_counter++;
 939              		.loc 1 352 0
 940 0032 AE4B     		ldr	r3, .L47
 941 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 942 0036 0133     		adds	r3, r3, #1
 943 0038 DAB2     		uxtb	r2, r3
 944 003a AC4B     		ldr	r3, .L47
 945 003c 1A70     		strb	r2, [r3]
 353:notoriOS.c    ****         	
 354:notoriOS.c    ****         if(try_counter <= 2){
 946              		.loc 1 354 0
 947 003e AB4B     		ldr	r3, .L47
 948 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 0042 022B     		cmp	r3, #2
 950 0044 02D8     		bhi	.L35
 355:notoriOS.c    ****             modem_power_up();
 951              		.loc 1 355 0
 952 0046 FFF7FEFF 		bl	modem_power_up
 953 004a F0E1     		b	.L36
 954              	.L35:
 356:notoriOS.c    ****         }else{
 357:notoriOS.c    ****             try_counter = 0;
 955              		.loc 1 357 0
 956 004c A74B     		ldr	r3, .L47
 957 004e 0022     		movs	r2, #0
 958 0050 1A70     		strb	r2, [r3]
 358:notoriOS.c    ****             // call default valve controller when not connected to server
 359:notoriOS.c    ****             if (updatable_parameters.node_type ==NODE_TYPE_VALVE){
 959              		.loc 1 359 0
 960 0052 A74B     		ldr	r3, .L47+4
 961 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0056 042B     		cmp	r3, #4
 963 0058 0DD1     		bne	.L37
 360:notoriOS.c    ****                 printNotif(NOTIF_TYPE_EVENT, "Implementing fallback controller strategy");
 964              		.loc 1 360 0
 965 005a A649     		ldr	r1, .L47+8
 966 005c 0020     		movs	r0, #0
 967 005e FFF7FEFF 		bl	printNotif
 361:notoriOS.c    ****                 valve_level_controller(level_sensor_take_reading().level_reading); // want to take 
 968              		.loc 1 361 0
 969 0062 07F5A563 		add	r3, r7, #1320
 970 0066 1846     		mov	r0, r3
 971 0068 FFF7FEFF 		bl	level_sensor_take_reading
 972 006c B7F93E35 		ldrsh	r3, [r7, #1342]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 26


 973 0070 1846     		mov	r0, r3
 974 0072 FFF7FEFF 		bl	valve_level_controller
 975              	.L37:
 362:notoriOS.c    ****             }
 363:notoriOS.c    ****             return 0u;
 976              		.loc 1 363 0
 977 0076 0023     		movs	r3, #0
 978 0078 DAE1     		b	.L33
 979              	.L34:
 364:notoriOS.c    ****             }
 365:notoriOS.c    ****             
 366:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 980              		.loc 1 366 0
 981 007a FFF7FEFF 		bl	modem_get_state
 982 007e 0346     		mov	r3, r0
 983 0080 042B     		cmp	r3, #4
 984 0082 40F0D481 		bne	.L36
 985              	.LBB2:
 367:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 986              		.loc 1 367 0
 987 0086 9C49     		ldr	r1, .L47+12
 988 0088 0020     		movs	r0, #0
 989 008a FFF7FEFF 		bl	printNotif
 368:notoriOS.c    ****         
 369:notoriOS.c    ****         http_request[0] = '\0';
 990              		.loc 1 369 0
 991 008e 9B4B     		ldr	r3, .L47+16
 992 0090 0022     		movs	r2, #0
 993 0092 1A70     		strb	r2, [r3]
 370:notoriOS.c    ****         http_body[0] = '\0';
 994              		.loc 1 370 0
 995 0094 9A4B     		ldr	r3, .L47+20
 996 0096 0022     		movs	r2, #0
 997 0098 1A70     		strb	r2, [r3]
 371:notoriOS.c    ****         http_route[0] = '\0';
 998              		.loc 1 371 0
 999 009a 9A4B     		ldr	r3, .L47+24
 1000 009c 0022     		movs	r2, #0
 1001 009e 1A70     		strb	r2, [r3]
 372:notoriOS.c    ****         //char *base = "write";
 373:notoriOS.c    ****         
 374:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power)
 375:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 376:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1002              		.loc 1 376 0
 1003 00a0 994B     		ldr	r3, .L47+28
 1004 00a2 5B69     		ldr	r3, [r3, #20]
 1005 00a4 07F21450 		addw	r0, r7, #1300
 1006 00a8 984A     		ldr	r2, .L47+32
 1007 00aa 1421     		movs	r1, #20
 1008 00ac FFF7FEFF 		bl	snprintf
 377:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1009              		.loc 1 377 0
 1010 00b0 FFF7FEFF 		bl	getTimeStamp
 1011 00b4 0246     		mov	r2, r0
 1012 00b6 07F21453 		addw	r3, r7, #1300
 1013 00ba 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 27


 1014 00bc 9448     		ldr	r0, .L47+36
 1015 00be FFF7FEFF 		bl	pushData
 378:notoriOS.c    ****         
 379:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 380:notoriOS.c    ****         char c_try_counter[20];
 381:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1016              		.loc 1 381 0
 1017 00c2 8A4B     		ldr	r3, .L47
 1018 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 00c6 07F5A060 		add	r0, r7, #1280
 1020 00ca 904A     		ldr	r2, .L47+32
 1021 00cc 1421     		movs	r1, #20
 1022 00ce FFF7FEFF 		bl	snprintf
 382:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1023              		.loc 1 382 0
 1024 00d2 FFF7FEFF 		bl	getTimeStamp
 1025 00d6 0246     		mov	r2, r0
 1026 00d8 07F5A063 		add	r3, r7, #1280
 1027 00dc 1946     		mov	r1, r3
 1028 00de 8D48     		ldr	r0, .L47+40
 1029 00e0 FFF7FEFF 		bl	pushData
 383:notoriOS.c    ****         
 384:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 385:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 386:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 387:notoriOS.c    ****         if(buffer_overflow == false){
 1030              		.loc 1 387 0
 1031 00e4 8C4B     		ldr	r3, .L47+44
 1032 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1033 00e8 83F00103 		eor	r3, r3, #1
 1034 00ec DBB2     		uxtb	r3, r3
 1035 00ee 002B     		cmp	r3, #0
 1036 00f0 16D0     		beq	.L38
 1037              	.LBB3:
 388:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1038              		.loc 1 388 0
 1039 00f2 FFF7FEFF 		bl	sizeOfDataStack
 1040 00f6 0346     		mov	r3, r0
 1041 00f8 A7F85035 		strh	r3, [r7, #1360]	@ movhi
 389:notoriOS.c    ****             char c_data_count_sent[20];
 390:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1042              		.loc 1 390 0
 1043 00fc B7F85035 		ldrh	r3, [r7, #1360]
 1044 0100 07F59B60 		add	r0, r7, #1240
 1045 0104 814A     		ldr	r2, .L47+32
 1046 0106 1421     		movs	r1, #20
 1047 0108 FFF7FEFF 		bl	snprintf
 391:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1048              		.loc 1 391 0
 1049 010c FFF7FEFF 		bl	getTimeStamp
 1050 0110 0246     		mov	r2, r0
 1051 0112 07F59B63 		add	r3, r7, #1240
 1052 0116 1946     		mov	r1, r3
 1053 0118 8048     		ldr	r0, .L47+48
 1054 011a FFF7FEFF 		bl	pushData
 1055              	.LBE3:
 1056 011e 0FE0     		b	.L39
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 28


 1057              	.L38:
 1058              	.LBB4:
 392:notoriOS.c    ****         }else{
 393:notoriOS.c    ****             char c_data_count_sent[20];
 394:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1059              		.loc 1 394 0
 1060 0120 07F2C440 		addw	r0, r7, #1220
 1061 0124 9623     		movs	r3, #150
 1062 0126 794A     		ldr	r2, .L47+32
 1063 0128 1421     		movs	r1, #20
 1064 012a FFF7FEFF 		bl	snprintf
 395:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1065              		.loc 1 395 0
 1066 012e FFF7FEFF 		bl	getTimeStamp
 1067 0132 0246     		mov	r2, r0
 1068 0134 07F2C443 		addw	r3, r7, #1220
 1069 0138 1946     		mov	r1, r3
 1070 013a 7848     		ldr	r0, .L47+48
 1071 013c FFF7FEFF 		bl	pushData
 1072              	.L39:
 1073              	.LBE4:
 396:notoriOS.c    ****         }
 397:notoriOS.c    ****         
 398:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 399:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1074              		.loc 1 399 0
 1075 0140 FFF7FEFF 		bl	sizeOfDataStackDesired
 1076 0144 0346     		mov	r3, r0
 1077 0146 A7F84E35 		strh	r3, [r7, #1358]	@ movhi
 400:notoriOS.c    ****         char c_data_count_desired[20];
 401:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 402:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1078              		.loc 1 402 0
 1079 014a B7F84E35 		ldrh	r3, [r7, #1358]
 1080 014e 013B     		subs	r3, r3, #1
 1081 0150 07F2EC40 		addw	r0, r7, #1260
 1082 0154 6D4A     		ldr	r2, .L47+32
 1083 0156 1421     		movs	r1, #20
 1084 0158 FFF7FEFF 		bl	snprintf
 403:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1085              		.loc 1 403 0
 1086 015c FFF7FEFF 		bl	getTimeStamp
 1087 0160 0246     		mov	r2, r0
 1088 0162 07F2EC43 		addw	r3, r7, #1260
 1089 0166 1946     		mov	r1, r3
 1090 0168 6D48     		ldr	r0, .L47+52
 1091 016a FFF7FEFF 		bl	pushData
 404:notoriOS.c    ****         
 405:notoriOS.c    ****         // Construct HTPP request
 406:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1092              		.loc 1 406 0
 1093 016e 6D49     		ldr	r1, .L47+56
 1094 0170 0020     		movs	r0, #0
 1095 0172 FFF7FEFF 		bl	printNotif
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         // Old influx API
 409:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 29


 410:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1096              		.loc 1 410 0
 1097 0176 6C4B     		ldr	r3, .L47+60
 1098 0178 6C4A     		ldr	r2, .L47+64
 1099 017a 6D49     		ldr	r1, .L47+68
 1100 017c 6148     		ldr	r0, .L47+24
 1101 017e FFF7FEFF 		bl	construct_malcom_route
 411:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1102              		.loc 1 411 0
 1103 0182 604A     		ldr	r2, .L47+24
 1104 0184 6B49     		ldr	r1, .L47+72
 1105 0186 0020     		movs	r0, #0
 1106 0188 FFF7FEFF 		bl	printNotif
 412:notoriOS.c    ****         
 413:notoriOS.c    ****         //OLD INFLUX API
 414:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 415:notoriOS.c    ****         construct_malcom_body(http_body);
 1107              		.loc 1 415 0
 1108 018c 5C48     		ldr	r0, .L47+20
 1109 018e FFF7FEFF 		bl	construct_malcom_body
 416:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1110              		.loc 1 416 0
 1111 0192 694B     		ldr	r3, .L47+76
 1112 0194 5B6E     		ldr	r3, [r3, #100]
 1113 0196 694A     		ldr	r2, .L47+80
 1114 0198 0592     		str	r2, [sp, #20]
 1115 019a 0022     		movs	r2, #0
 1116 019c 0492     		str	r2, [sp, #16]
 1117 019e 684A     		ldr	r2, .L47+84
 1118 01a0 0392     		str	r2, [sp, #12]
 1119 01a2 684A     		ldr	r2, .L47+88
 1120 01a4 0292     		str	r2, [sp, #8]
 1121 01a6 684A     		ldr	r2, .L47+92
 1122 01a8 0192     		str	r2, [sp, #4]
 1123 01aa 0093     		str	r3, [sp]
 1124 01ac 554B     		ldr	r3, .L47+24
 1125 01ae 624A     		ldr	r2, .L47+76
 1126 01b0 5349     		ldr	r1, .L47+20
 1127 01b2 5248     		ldr	r0, .L47+16
 1128 01b4 FFF7FEFF 		bl	construct_generic_HTTP_request
 417:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1129              		.loc 1 417 0
 1130 01b8 504A     		ldr	r2, .L47+16
 1131 01ba 6449     		ldr	r1, .L47+96
 1132 01bc 0020     		movs	r0, #0
 1133 01be FFF7FEFF 		bl	printNotif
 418:notoriOS.c    ****         
 419:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 420:notoriOS.c    ****         // Open port and begin command line sequence
 421:notoriOS.c    ****         char portConfig[200];
 422:notoriOS.c    ****         uint8 status = 0u;
 1134              		.loc 1 422 0
 1135 01c2 0023     		movs	r3, #0
 1136 01c4 87F84D35 		strb	r3, [r7, #1357]
 423:notoriOS.c    ****         
 424:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1137              		.loc 1 424 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 30


 1138 01c8 5B4B     		ldr	r3, .L47+76
 1139 01ca 5A6E     		ldr	r2, [r3, #100]
 1140 01cc 381D     		adds	r0, r7, #4
 1141 01ce 5A4B     		ldr	r3, .L47+76
 1142 01d0 0093     		str	r3, [sp]
 1143 01d2 1346     		mov	r3, r2
 1144 01d4 5E4A     		ldr	r2, .L47+100
 1145 01d6 C821     		movs	r1, #200
 1146 01d8 FFF7FEFF 		bl	snprintf
 425:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1147              		.loc 1 425 0
 1148 01dc 3B1D     		adds	r3, r7, #4
 1149 01de 1A46     		mov	r2, r3
 1150 01e0 5C49     		ldr	r1, .L47+104
 1151 01e2 0020     		movs	r0, #0
 1152 01e4 FFF7FEFF 		bl	printNotif
 426:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1153              		.loc 1 426 0
 1154 01e8 3B1D     		adds	r3, r7, #4
 1155 01ea 42F21072 		movw	r2, #10000
 1156 01ee 5A49     		ldr	r1, .L47+108
 1157 01f0 1846     		mov	r0, r3
 1158 01f2 FFF7FEFF 		bl	at_write_command
 1159 01f6 0346     		mov	r3, r0
 1160 01f8 87F84D35 		strb	r3, [r7, #1357]
 427:notoriOS.c    ****         
 428:notoriOS.c    ****         // create character pointer to chunk through the http_request
 429:notoriOS.c    ****         char *chunk;
 430:notoriOS.c    ****         // Set chunk to start where http_request starts
 431:notoriOS.c    ****         chunk = http_request;
 1161              		.loc 1 431 0
 1162 01fc 3F4B     		ldr	r3, .L47+16
 1163 01fe C7F85435 		str	r3, [r7, #1364]
 432:notoriOS.c    ****         // variable for the number of packets to send
 433:notoriOS.c    ****         int8 packets;
 434:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1164              		.loc 1 434 0
 1165 0202 3E48     		ldr	r0, .L47+16
 1166 0204 FFF7FEFF 		bl	strlen
 1167 0208 0246     		mov	r2, r0
 1168 020a 544B     		ldr	r3, .L47+112
 1169 020c A3FB0223 		umull	r2, r3, r3, r2
 1170 0210 5B09     		lsrs	r3, r3, #5
 1171 0212 1846     		mov	r0, r3
 1172 0214 FFF7FEFF 		bl	__aeabi_ui2d
 1173 0218 4FF00002 		mov	r2, #0
 1174 021c 504B     		ldr	r3, .L47+116
 1175 021e FFF7FEFF 		bl	nextafter
 1176 0222 0346     		mov	r3, r0
 1177 0224 0C46     		mov	r4, r1
 1178 0226 1846     		mov	r0, r3
 1179 0228 2146     		mov	r1, r4
 1180 022a FFF7FEFF 		bl	ceil
 1181 022e 0346     		mov	r3, r0
 1182 0230 0C46     		mov	r4, r1
 1183 0232 1846     		mov	r0, r3
 1184 0234 2146     		mov	r1, r4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 31


 1185 0236 FFF7FEFF 		bl	__aeabi_d2iz
 1186 023a 0346     		mov	r3, r0
 1187 023c 87F84C35 		strb	r3, [r7, #1356]
 435:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1188              		.loc 1 435 0
 1189 0240 2E48     		ldr	r0, .L47+16
 1190 0242 FFF7FEFF 		bl	strlen
 1191 0246 0346     		mov	r3, r0
 1192 0248 1A46     		mov	r2, r3
 1193 024a 4649     		ldr	r1, .L47+120
 1194 024c 0020     		movs	r0, #0
 1195 024e FFF7FEFF 		bl	printNotif
 436:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1196              		.loc 1 436 0
 1197 0252 97F94C35 		ldrsb	r3, [r7, #1356]
 1198 0256 1A46     		mov	r2, r3
 1199 0258 4349     		ldr	r1, .L47+124
 1200 025a 0020     		movs	r0, #0
 1201 025c FFF7FEFF 		bl	printNotif
 1202              	.LBB5:
 437:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 438:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1203              		.loc 1 438 0
 1204 0260 0023     		movs	r3, #0
 1205 0262 87F85335 		strb	r3, [r7, #1363]
 1206 0266 9BE0     		b	.L40
 1207              	.L43:
 1208              	.LBB6:
 439:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 440:notoriOS.c    ****             char http_chunk[1001];
 441:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 442:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 443:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1209              		.loc 1 443 0
 1210 0268 4FF47A72 		mov	r2, #1000
 1211 026c 3F49     		ldr	r1, .L47+128
 1212 026e 4048     		ldr	r0, .L47+132
 1213 0270 FFF7FEFF 		bl	at_write_command
 1214 0274 0346     		mov	r3, r0
 1215 0276 87F84D35 		strb	r3, [r7, #1357]
 444:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 445:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1216              		.loc 1 445 0
 1217 027a 07F1CC00 		add	r0, r7, #204
 1218 027e D7F85435 		ldr	r3, [r7, #1364]
 1219 0282 344A     		ldr	r2, .L47+104
 1220 0284 4FF4FA71 		mov	r1, #500
 1221 0288 FFF7FEFF 		bl	snprintf
 446:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 447:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1222              		.loc 1 447 0
 1223 028c 07F1CC03 		add	r3, r7, #204
 1224 0290 1846     		mov	r0, r3
 1225 0292 FFF7FEFF 		bl	strlen
 1226 0296 0346     		mov	r3, r0
 1227 0298 1A46     		mov	r2, r3
 1228 029a 07F1CC03 		add	r3, r7, #204
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 32


 1229 029e 1344     		add	r3, r3, r2
 1230 02a0 3449     		ldr	r1, .L47+136
 1231 02a2 1A46     		mov	r2, r3
 1232 02a4 0B46     		mov	r3, r1
 1233 02a6 1B88     		ldrh	r3, [r3]	@ unaligned
 1234 02a8 1380     		strh	r3, [r2]	@ unaligned
 448:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1235              		.loc 1 448 0
 1236 02aa 97F95325 		ldrsb	r2, [r7, #1363]
 1237 02ae 07F1CC03 		add	r3, r7, #204
 1238 02b2 3149     		ldr	r1, .L47+140
 1239 02b4 0020     		movs	r0, #0
 1240 02b6 FFF7FEFF 		bl	printNotif
 449:notoriOS.c    ****             // Send data to server
 450:notoriOS.c    ****             if ((packet+1) != packets){
 1241              		.loc 1 450 0
 1242 02ba 97F95335 		ldrsb	r3, [r7, #1363]
 1243 02be 5A1C     		adds	r2, r3, #1
 1244 02c0 97F94C35 		ldrsb	r3, [r7, #1356]
 1245 02c4 9A42     		cmp	r2, r3
 1246 02c6 59D0     		beq	.L41
 451:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1247              		.loc 1 451 0
 1248 02c8 07F1CC03 		add	r3, r7, #204
 1249 02cc 41F28832 		movw	r2, #5000
 1250 02d0 2149     		ldr	r1, .L47+108
 1251 02d2 1846     		mov	r0, r3
 1252 02d4 FFF7FEFF 		bl	at_write_command
 1253 02d8 0346     		mov	r3, r0
 1254 02da 87F84D35 		strb	r3, [r7, #1357]
 452:notoriOS.c    ****                 // Move the pointer forward 
 453:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1255              		.loc 1 453 0
 1256 02de D7F85435 		ldr	r3, [r7, #1364]
 1257 02e2 03F2F313 		addw	r3, r3, #499
 1258 02e6 C7F85435 		str	r3, [r7, #1364]
 1259 02ea 52E0     		b	.L42
 1260              	.L48:
 1261              		.align	2
 1262              	.L47:
 1263 02ec 00000000 		.word	try_counter
 1264 02f0 00000000 		.word	updatable_parameters
 1265 02f4 C0000000 		.word	.LC7
 1266 02f8 EC000000 		.word	.LC8
 1267 02fc 00000000 		.word	http_request
 1268 0300 00000000 		.word	http_body
 1269 0304 00000000 		.word	http_route
 1270 0308 00000000 		.word	modem_stats
 1271 030c 3C000000 		.word	.LC2
 1272 0310 FC000000 		.word	.LC9
 1273 0314 04010000 		.word	.LC10
 1274 0318 00000000 		.word	buffer_overflow
 1275 031c 10010000 		.word	.LC11
 1276 0320 20010000 		.word	.LC12
 1277 0324 34010000 		.word	.LC13
 1278 0328 48010000 		.word	.LC14
 1279 032c 28000000 		.word	modem_info+40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 33


 1280 0330 74010000 		.word	.LC15
 1281 0334 84010000 		.word	.LC16
 1282 0338 00000000 		.word	system_settings
 1283 033c 94010000 		.word	.LC17
 1284 0340 98010000 		.word	.LC18
 1285 0344 9C010000 		.word	.LC19
 1286 0348 A4010000 		.word	.LC20
 1287 034c AC010000 		.word	.LC21
 1288 0350 C4010000 		.word	.LC22
 1289 0354 E0010000 		.word	.LC23
 1290 0358 E4010000 		.word	.LC24
 1291 035c D34D6210 		.word	274877907
 1292 0360 00407F40 		.word	1082081280
 1293 0364 E8010000 		.word	.LC25
 1294 0368 00020000 		.word	.LC26
 1295 036c 14020000 		.word	.LC27
 1296 0370 18020000 		.word	.LC28
 1297 0374 28020000 		.word	.LC29
 1298 0378 2C020000 		.word	.LC30
 1299              	.L41:
 454:notoriOS.c    ****             }else{
 455:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1300              		.loc 1 455 0
 1301 037c 07F1CC03 		add	r3, r7, #204
 1302 0380 41F28832 		movw	r2, #5000
 1303 0384 2D49     		ldr	r1, .L49
 1304 0386 1846     		mov	r0, r3
 1305 0388 FFF7FEFF 		bl	at_write_command
 1306 038c 0346     		mov	r3, r0
 1307 038e 87F84D35 		strb	r3, [r7, #1357]
 1308              	.L42:
 1309              	.LBE6:
 438:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1310              		.loc 1 438 0 discriminator 2
 1311 0392 97F95335 		ldrsb	r3, [r7, #1363]
 1312 0396 DBB2     		uxtb	r3, r3
 1313 0398 0133     		adds	r3, r3, #1
 1314 039a DBB2     		uxtb	r3, r3
 1315 039c 87F85335 		strb	r3, [r7, #1363]
 1316              	.L40:
 438:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1317              		.loc 1 438 0 is_stmt 0 discriminator 1
 1318 03a0 97F95325 		ldrsb	r2, [r7, #1363]
 1319 03a4 97F94C35 		ldrsb	r3, [r7, #1356]
 1320 03a8 9A42     		cmp	r2, r3
 1321 03aa FFF65DAF 		blt	.L43
 1322              	.LBE5:
 456:notoriOS.c    ****             }
 457:notoriOS.c    ****             
 458:notoriOS.c    ****         }
 459:notoriOS.c    ****         
 460:notoriOS.c    ****         // Read received buffer
 461:notoriOS.c    ****         // A good write will return code "OS-OK"
 462:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 463:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 464:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1323              		.loc 1 464 0 is_stmt 1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 34


 1324 03ae 41F28832 		movw	r2, #5000
 1325 03b2 2349     		ldr	r1, .L49+4
 1326 03b4 2348     		ldr	r0, .L49+8
 1327 03b6 FFF7FEFF 		bl	at_write_command
 1328 03ba 0346     		mov	r3, r0
 1329 03bc 87F84D35 		strb	r3, [r7, #1357]
 465:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 466:notoriOS.c    ****     
 467:notoriOS.c    ****   
 468:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 469:notoriOS.c    ****         if(status == 1u){
 1330              		.loc 1 469 0
 1331 03c0 97F84D35 		ldrb	r3, [r7, #1357]	@ zero_extendqisi2
 1332 03c4 012B     		cmp	r3, #1
 1333 03c6 1BD1     		bne	.L44
 1334              	.LBB7:
 470:notoriOS.c    ****             //get_updated_parameters_from_malcom();
 471:notoriOS.c    ****             // commented out to eliminate automatically assigning as depth when reporting
 472:notoriOS.c    ****             Clear_Data_Stack();
 1335              		.loc 1 472 0
 1336 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 473:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1337              		.loc 1 473 0
 1338 03cc FFF7FEFF 		bl	getTimeStamp
 1339 03d0 0246     		mov	r2, r0
 1340 03d2 1D4B     		ldr	r3, .L49+12
 1341 03d4 1B68     		ldr	r3, [r3]
 1342 03d6 D31A     		subs	r3, r2, r3
 1343 03d8 C7F84835 		str	r3, [r7, #1352]
 474:notoriOS.c    ****             char s_send_time[10];
 475:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1344              		.loc 1 475 0
 1345 03dc 07F59760 		add	r0, r7, #1208
 1346 03e0 D7F84835 		ldr	r3, [r7, #1352]
 1347 03e4 194A     		ldr	r2, .L49+16
 1348 03e6 0A21     		movs	r1, #10
 1349 03e8 FFF7FEFF 		bl	snprintf
 476:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1350              		.loc 1 476 0
 1351 03ec FFF7FEFF 		bl	getTimeStamp
 1352 03f0 0246     		mov	r2, r0
 1353 03f2 07F59763 		add	r3, r7, #1208
 1354 03f6 1946     		mov	r1, r3
 1355 03f8 1548     		ldr	r0, .L49+20
 1356 03fa FFF7FEFF 		bl	pushData
 1357              	.LBE7:
 1358 03fe 03E0     		b	.L45
 1359              	.L44:
 477:notoriOS.c    ****         }else{
 478:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1360              		.loc 1 478 0
 1361 0400 1449     		ldr	r1, .L49+24
 1362 0402 0220     		movs	r0, #2
 1363 0404 FFF7FEFF 		bl	printNotif
 1364              	.L45:
 479:notoriOS.c    ****         }
 480:notoriOS.c    ****          
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 35


 481:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 482:notoriOS.c    ****         long network_time = modem_get_network_time();
 1365              		.loc 1 482 0
 1366 0408 FFF7FEFF 		bl	modem_get_network_time
 1367 040c C7F84405 		str	r0, [r7, #1348]
 483:notoriOS.c    ****         if(network_time != 0){
 1368              		.loc 1 483 0
 1369 0410 D7F84435 		ldr	r3, [r7, #1348]
 1370 0414 002B     		cmp	r3, #0
 1371 0416 03D0     		beq	.L46
 484:notoriOS.c    ****            setTime(network_time);
 1372              		.loc 1 484 0
 1373 0418 D7F84405 		ldr	r0, [r7, #1348]
 1374 041c FFF7FEFF 		bl	setTime
 1375              	.L46:
 485:notoriOS.c    ****         }
 486:notoriOS.c    ****         
 487:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 488:notoriOS.c    ****         // If not -- keep the statck and try next time
 489:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 490:notoriOS.c    ****         modem_power_down();
 1376              		.loc 1 490 0
 1377 0420 FFF7FEFF 		bl	modem_power_down
 491:notoriOS.c    ****         
 492:notoriOS.c    ****         try_counter = 0u;
 1378              		.loc 1 492 0
 1379 0424 0C4B     		ldr	r3, .L49+28
 1380 0426 0022     		movs	r2, #0
 1381 0428 1A70     		strb	r2, [r3]
 493:notoriOS.c    ****         return 0u;
 1382              		.loc 1 493 0
 1383 042a 0023     		movs	r3, #0
 1384 042c 00E0     		b	.L33
 1385              	.L36:
 1386              	.LBE2:
 494:notoriOS.c    ****     }
 495:notoriOS.c    ****       
 496:notoriOS.c    ****       return 1u; // Not done yet
 1387              		.loc 1 496 0
 1388 042e 0123     		movs	r3, #1
 1389              	.L33:
 497:notoriOS.c    **** }
 1390              		.loc 1 497 0 discriminator 1
 1391 0430 1846     		mov	r0, r3
 1392 0432 07F25C57 		addw	r7, r7, #1372
 1393              		.cfi_def_cfa_offset 12
 1394 0436 BD46     		mov	sp, r7
 1395              		.cfi_def_cfa_register 13
 1396              		@ sp needed
 1397 0438 90BD     		pop	{r4, r7, pc}
 1398              	.L50:
 1399 043a 00BF     		.align	2
 1400              	.L49:
 1401 043c 3C020000 		.word	.LC31
 1402 0440 44020000 		.word	.LC32
 1403 0444 4C020000 		.word	.LC33
 1404 0448 00000000 		.word	modem_start_time_stamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 36


 1405 044c 3C000000 		.word	.LC2
 1406 0450 60020000 		.word	.LC34
 1407 0454 70020000 		.word	.LC35
 1408 0458 00000000 		.word	try_counter
 1409              		.cfi_endproc
 1410              	.LFE74:
 1411              		.size	syncData, .-syncData
 1412              		.section	.text.configureRemoteParams,"ax",%progbits
 1413              		.align	2
 1414              		.global	configureRemoteParams
 1415              		.thumb
 1416              		.thumb_func
 1417              		.type	configureRemoteParams, %function
 1418              	configureRemoteParams:
 1419              	.LFB75:
 498:notoriOS.c    **** 
 499:notoriOS.c    **** // ==============================================
 500:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 501:notoriOS.c    **** // Returns 0 when done
 502:notoriOS.c    **** // ==============================================
 503:notoriOS.c    **** uint8 configureRemoteParams(){
 1420              		.loc 1 503 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424 0000 80B5     		push	{r7, lr}
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 7, -8
 1427              		.cfi_offset 14, -4
 1428 0002 82B0     		sub	sp, sp, #8
 1429              		.cfi_def_cfa_offset 16
 1430 0004 00AF     		add	r7, sp, #0
 1431              		.cfi_def_cfa_register 7
 504:notoriOS.c    ****     
 505:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1432              		.loc 1 505 0
 1433 0006 FFF7FEFF 		bl	modem_get_state
 1434 000a 0346     		mov	r3, r0
 1435 000c 002B     		cmp	r3, #0
 1436 000e 02D1     		bne	.L52
 506:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 507:notoriOS.c    ****         modem_power_up();
 1437              		.loc 1 507 0
 1438 0010 FFF7FEFF 		bl	modem_power_up
 1439 0014 11E0     		b	.L53
 1440              	.L52:
 508:notoriOS.c    ****             
 509:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1441              		.loc 1 509 0
 1442 0016 FFF7FEFF 		bl	modem_get_state
 1443 001a 0346     		mov	r3, r0
 1444 001c 042B     		cmp	r3, #4
 1445 001e 0CD1     		bne	.L53
 1446              	.LBB8:
 510:notoriOS.c    ****         
 511:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 512:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 37


 513:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 514:notoriOS.c    ****         long network_time = modem_get_network_time();
 1447              		.loc 1 514 0
 1448 0020 FFF7FEFF 		bl	modem_get_network_time
 1449 0024 7860     		str	r0, [r7, #4]
 515:notoriOS.c    ****         if(network_time != 0){
 1450              		.loc 1 515 0
 1451 0026 7B68     		ldr	r3, [r7, #4]
 1452 0028 002B     		cmp	r3, #0
 1453 002a 02D0     		beq	.L54
 516:notoriOS.c    ****             setTime(network_time);
 1454              		.loc 1 516 0
 1455 002c 7868     		ldr	r0, [r7, #4]
 1456 002e FFF7FEFF 		bl	setTime
 1457              	.L54:
 517:notoriOS.c    ****         }
 518:notoriOS.c    ****         
 519:notoriOS.c    ****         // Get GPS coordinates
 520:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 521:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 522:notoriOS.c    ****         modem_power_down();
 1458              		.loc 1 522 0
 1459 0032 FFF7FEFF 		bl	modem_power_down
 523:notoriOS.c    ****         return 0u;
 1460              		.loc 1 523 0
 1461 0036 0023     		movs	r3, #0
 1462 0038 00E0     		b	.L55
 1463              	.L53:
 1464              	.LBE8:
 524:notoriOS.c    ****         
 525:notoriOS.c    ****     }
 526:notoriOS.c    ****     
 527:notoriOS.c    ****     return 1u;
 1465              		.loc 1 527 0
 1466 003a 0123     		movs	r3, #1
 1467              	.L55:
 528:notoriOS.c    **** }
 1468              		.loc 1 528 0
 1469 003c 1846     		mov	r0, r3
 1470 003e 0837     		adds	r7, r7, #8
 1471              		.cfi_def_cfa_offset 8
 1472 0040 BD46     		mov	sp, r7
 1473              		.cfi_def_cfa_register 13
 1474              		@ sp needed
 1475 0042 80BD     		pop	{r7, pc}
 1476              		.cfi_endproc
 1477              	.LFE75:
 1478              		.size	configureRemoteParams, .-configureRemoteParams
 1479              		.section	.rodata
 1480 029b 00       		.align	2
 1481              	.LC36:
 1482 029c 256C6400 		.ascii	"%ld\000"
 1483              		.align	2
 1484              	.LC37:
 1485 02a0 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1485      6F746978 
 1485      5F646570 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 38


 1485      74683D25 
 1485      7300
 1486 02b2 0000     		.align	2
 1487              	.LC38:
 1488 02b4 6D617862 		.ascii	"maxbotix_depth\000"
 1488      6F746978 
 1488      5F646570 
 1488      746800
 1489 02c3 00       		.align	2
 1490              	.LC39:
 1491 02c4 612B00   		.ascii	"a+\000"
 1492 02c7 00       		.align	2
 1493              	.LC40:
 1494 02c8 206D6178 		.ascii	" maxbotix_depth: \000"
 1494      626F7469 
 1494      785F6465 
 1494      7074683A 
 1494      2000
 1495 02da 0000     		.align	2
 1496              	.LC41:
 1497 02dc 2000     		.ascii	" \000"
 1498 02de 0000     		.align	2
 1499              	.LC42:
 1500 02e0 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1500      64206E6F 
 1500      74206765 
 1500      74207661 
 1500      6C696420 
 1501              		.global	__aeabi_f2d
 1502              		.align	2
 1503              	.LC43:
 1504 030c 252E3266 		.ascii	"%.2f\000"
 1504      00
 1505 0311 000000   		.align	2
 1506              	.LC44:
 1507 0314 765F6261 		.ascii	"v_bat=%s\000"
 1507      743D2573 
 1507      00
 1508 031d 000000   		.align	2
 1509              	.LC45:
 1510 0320 765F6261 		.ascii	"v_bat\000"
 1510      7400
 1511 0326 0000     		.align	2
 1512              	.LC46:
 1513 0328 20766261 		.ascii	" vbat: \000"
 1513      743A2000 
 1514              		.align	2
 1515              	.LC47:
 1516 0330 70726573 		.ascii	"pressure_current=%s\000"
 1516      73757265 
 1516      5F637572 
 1516      72656E74 
 1516      3D257300 
 1517              		.align	2
 1518              	.LC48:
 1519 0344 70726573 		.ascii	"pressure_current\000"
 1519      73757265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 39


 1519      5F637572 
 1519      72656E74 
 1519      00
 1520 0355 000000   		.align	2
 1521              	.LC49:
 1522 0358 20707265 		.ascii	" pressure_current: \000"
 1522      73737572 
 1522      655F6375 
 1522      7272656E 
 1522      743A2000 
 1523              		.align	2
 1524              	.LC50:
 1525 036c 70726573 		.ascii	"pressure_depth=%s\000"
 1525      73757265 
 1525      5F646570 
 1525      74683D25 
 1525      7300
 1526 037e 0000     		.align	2
 1527              	.LC51:
 1528 0380 70726573 		.ascii	"pressure_depth\000"
 1528      73757265 
 1528      5F646570 
 1528      746800
 1529 038f 00       		.align	2
 1530              	.LC52:
 1531 0390 20707265 		.ascii	" pressure_depth: \000"
 1531      73737572 
 1531      655F6465 
 1531      7074683A 
 1531      2000
 1532 03a2 0000     		.align	2
 1533              	.LC53:
 1534 03a4 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1534      64206E6F 
 1534      74206765 
 1534      74207661 
 1534      6C696420 
 1535 03cb 00       		.align	2
 1536              	.LC54:
 1537 03cc 256600   		.ascii	"%f\000"
 1538 03cf 00       		.align	2
 1539              	.LC55:
 1540 03d0 76616C76 		.ascii	"valve_open=%s\000"
 1540      655F6F70 
 1540      656E3D25 
 1540      7300
 1541 03de 0000     		.align	2
 1542              	.LC56:
 1543 03e0 76616C76 		.ascii	"valve_open\000"
 1543      655F6F70 
 1543      656E00
 1544 03eb 00       		.align	2
 1545              	.LC57:
 1546 03ec 2076616C 		.ascii	" valve_open: \000"
 1546      76655F6F 
 1546      70656E3A 
 1546      2000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 40


 1547              		.section	.text.makeMeasurements,"ax",%progbits
 1548              		.align	2
 1549              		.global	makeMeasurements
 1550              		.thumb
 1551              		.thumb_func
 1552              		.type	makeMeasurements, %function
 1553              	makeMeasurements:
 1554              	.LFB76:
 529:notoriOS.c    **** 
 530:notoriOS.c    **** 
 531:notoriOS.c    **** // ==============================================
 532:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 533:notoriOS.c    **** // Returns 0 when finished
 534:notoriOS.c    **** // ==============================================
 535:notoriOS.c    **** uint8 makeMeasurements(){
 1555              		.loc 1 535 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 160
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559 0000 B0B5     		push	{r4, r5, r7, lr}
 1560              		.cfi_def_cfa_offset 16
 1561              		.cfi_offset 4, -16
 1562              		.cfi_offset 5, -12
 1563              		.cfi_offset 7, -8
 1564              		.cfi_offset 14, -4
 1565 0002 ACB0     		sub	sp, sp, #176
 1566              		.cfi_def_cfa_offset 192
 1567 0004 04AF     		add	r7, sp, #16
 1568              		.cfi_def_cfa 7, 176
 536:notoriOS.c    ****     
 537:notoriOS.c    ****     // Get clock time and save to timeStamp
 538:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1569              		.loc 1 538 0
 1570 0006 FFF7FEFF 		bl	getTimeStamp
 1571 000a C7F89C00 		str	r0, [r7, #156]
 539:notoriOS.c    ****     char c_timeStamp[32];
 540:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1572              		.loc 1 540 0
 1573 000e 07F17800 		add	r0, r7, #120
 1574 0012 D7F89C30 		ldr	r3, [r7, #156]
 1575 0016 C14A     		ldr	r2, .L67
 1576 0018 2021     		movs	r1, #32
 1577 001a FFF7FEFF 		bl	snprintf
 541:notoriOS.c    ****     
 542:notoriOS.c    ****     // Holds string for value that will be written 
 543:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 544:notoriOS.c    ****     
 545:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 546:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1578              		.loc 1 546 0
 1579 001e C04B     		ldr	r3, .L67+4
 1580 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1581 0022 002B     		cmp	r3, #0
 1582 0024 3CD1     		bne	.L57
 1583              	.LBB9:
 547:notoriOS.c    ****         
 548:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 41


 549:notoriOS.c    ****         level_sensor_t m_level_sensor;
 550:notoriOS.c    ****         
 551:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 552:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1584              		.loc 1 552 0
 1585 0026 07F12C03 		add	r3, r7, #44
 1586 002a 1846     		mov	r0, r3
 1587 002c FFF7FEFF 		bl	level_sensor_take_reading
 553:notoriOS.c    ****     
 554:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 555:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1588              		.loc 1 555 0
 1589 0030 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 1590 0034 002B     		cmp	r3, #0
 1591 0036 2FD0     		beq	.L58
 556:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1592              		.loc 1 556 0
 1593 0038 B7F94230 		ldrsh	r3, [r7, #66]
 1594 003c 07F16400 		add	r0, r7, #100
 1595 0040 B84A     		ldr	r2, .L67+8
 1596 0042 1421     		movs	r1, #20
 1597 0044 FFF7FEFF 		bl	snprintf
 557:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1598              		.loc 1 557 0
 1599 0048 07F16403 		add	r3, r7, #100
 1600 004c 1A46     		mov	r2, r3
 1601 004e B649     		ldr	r1, .L67+12
 1602 0050 0020     		movs	r0, #0
 1603 0052 FFF7FEFF 		bl	printNotif
 558:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1604              		.loc 1 558 0
 1605 0056 07F16403 		add	r3, r7, #100
 1606 005a D7F89C20 		ldr	r2, [r7, #156]
 1607 005e 1946     		mov	r1, r3
 1608 0060 B248     		ldr	r0, .L67+16
 1609 0062 FFF7FEFF 		bl	pushData
 559:notoriOS.c    ****             
 560:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 561:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1610              		.loc 1 561 0
 1611 0066 07F17803 		add	r3, r7, #120
 1612 006a 1A46     		mov	r2, r3
 1613 006c B049     		ldr	r1, .L67+20
 1614 006e B148     		ldr	r0, .L67+24
 1615 0070 FFF7FEFF 		bl	SD_write
 562:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1616              		.loc 1 562 0
 1617 0074 B04A     		ldr	r2, .L67+28
 1618 0076 AE49     		ldr	r1, .L67+20
 1619 0078 AE48     		ldr	r0, .L67+24
 1620 007a FFF7FEFF 		bl	SD_write
 563:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1621              		.loc 1 563 0
 1622 007e 07F16403 		add	r3, r7, #100
 1623 0082 1A46     		mov	r2, r3
 1624 0084 AA49     		ldr	r1, .L67+20
 1625 0086 AB48     		ldr	r0, .L67+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 42


 1626 0088 FFF7FEFF 		bl	SD_write
 564:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1627              		.loc 1 564 0
 1628 008c AB4A     		ldr	r2, .L67+32
 1629 008e A849     		ldr	r1, .L67+20
 1630 0090 A848     		ldr	r0, .L67+24
 1631 0092 FFF7FEFF 		bl	SD_write
 1632 0096 03E0     		b	.L57
 1633              	.L58:
 565:notoriOS.c    ****         }else{
 566:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1634              		.loc 1 566 0
 1635 0098 A949     		ldr	r1, .L67+36
 1636 009a 0220     		movs	r0, #2
 1637 009c FFF7FEFF 		bl	printNotif
 1638              	.L57:
 1639              	.LBE9:
 567:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 568:notoriOS.c    ****         }
 569:notoriOS.c    ****     }
 570:notoriOS.c    ****     
 571:notoriOS.c    ****     
 572:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 573:notoriOS.c    ****     voltage_t m_voltage;
 574:notoriOS.c    ****     
 575:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 576:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1640              		.loc 1 576 0
 1641 00a0 07F14803 		add	r3, r7, #72
 1642 00a4 1846     		mov	r0, r3
 1643 00a6 FFF7FEFF 		bl	voltage_take_readings
 577:notoriOS.c    ****     
 578:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 579:notoriOS.c    ****     if(m_voltage.valid){
 1644              		.loc 1 579 0
 1645 00aa 97F86030 		ldrb	r3, [r7, #96]	@ zero_extendqisi2
 1646 00ae 002B     		cmp	r3, #0
 1647 00b0 00F0B280 		beq	.L60
 580:notoriOS.c    ****         // battery voltage data
 581:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1648              		.loc 1 581 0
 1649 00b4 BB6C     		ldr	r3, [r7, #72]	@ float
 1650 00b6 1846     		mov	r0, r3
 1651 00b8 FFF7FEFF 		bl	__aeabi_f2d
 1652 00bc 0346     		mov	r3, r0
 1653 00be 0C46     		mov	r4, r1
 1654 00c0 07F16400 		add	r0, r7, #100
 1655 00c4 CDE90034 		strd	r3, [sp]
 1656 00c8 9E4A     		ldr	r2, .L67+40
 1657 00ca 1421     		movs	r1, #20
 1658 00cc FFF7FEFF 		bl	snprintf
 582:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1659              		.loc 1 582 0
 1660 00d0 07F16403 		add	r3, r7, #100
 1661 00d4 1A46     		mov	r2, r3
 1662 00d6 9C49     		ldr	r1, .L67+44
 1663 00d8 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 43


 1664 00da FFF7FEFF 		bl	printNotif
 583:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1665              		.loc 1 583 0
 1666 00de 07F16403 		add	r3, r7, #100
 1667 00e2 D7F89C20 		ldr	r2, [r7, #156]
 1668 00e6 1946     		mov	r1, r3
 1669 00e8 9848     		ldr	r0, .L67+48
 1670 00ea FFF7FEFF 		bl	pushData
 584:notoriOS.c    ****         
 585:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 586:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1671              		.loc 1 586 0
 1672 00ee 934A     		ldr	r2, .L67+32
 1673 00f0 8F49     		ldr	r1, .L67+20
 1674 00f2 9048     		ldr	r0, .L67+24
 1675 00f4 FFF7FEFF 		bl	SD_write
 587:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1676              		.loc 1 587 0
 1677 00f8 07F17803 		add	r3, r7, #120
 1678 00fc 1A46     		mov	r2, r3
 1679 00fe 8C49     		ldr	r1, .L67+20
 1680 0100 8C48     		ldr	r0, .L67+24
 1681 0102 FFF7FEFF 		bl	SD_write
 588:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1682              		.loc 1 588 0
 1683 0106 924A     		ldr	r2, .L67+52
 1684 0108 8949     		ldr	r1, .L67+20
 1685 010a 8A48     		ldr	r0, .L67+24
 1686 010c FFF7FEFF 		bl	SD_write
 589:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1687              		.loc 1 589 0
 1688 0110 07F16403 		add	r3, r7, #100
 1689 0114 1A46     		mov	r2, r3
 1690 0116 8649     		ldr	r1, .L67+20
 1691 0118 8648     		ldr	r0, .L67+24
 1692 011a FFF7FEFF 		bl	SD_write
 590:notoriOS.c    ****         
 591:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 592:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1693              		.loc 1 592 0
 1694 011e 804B     		ldr	r3, .L67+4
 1695 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1696 0122 012B     		cmp	r3, #1
 1697 0124 7CD1     		bne	.L62
 1698              	.LBB10:
 593:notoriOS.c    ****             
 594:notoriOS.c    ****             // pressure transducer voltage (V) data
 595:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 596:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 597:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 598:notoriOS.c    ****             
 599:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 600:notoriOS.c    ****             pressure_t m_pressure;
 601:notoriOS.c    ****             
 602:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 603:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1699              		.loc 1 603 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 44


 1700 0126 07F11C05 		add	r5, r7, #28
 1701 012a 6C46     		mov	r4, sp
 1702 012c 07F15403 		add	r3, r7, #84
 1703 0130 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 1704 0132 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 1705 0136 07F14803 		add	r3, r7, #72
 1706 013a 0ECB     		ldmia	r3, {r1, r2, r3}
 1707 013c 2846     		mov	r0, r5
 1708 013e FFF7FEFF 		bl	pressure_calculations
 604:notoriOS.c    ****             
 605:notoriOS.c    ****             // pressure transducer current (mA) data
 606:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1709              		.loc 1 606 0
 1710 0142 7B6A     		ldr	r3, [r7, #36]	@ float
 1711 0144 1846     		mov	r0, r3
 1712 0146 FFF7FEFF 		bl	__aeabi_f2d
 1713 014a 0346     		mov	r3, r0
 1714 014c 0C46     		mov	r4, r1
 1715 014e 07F16400 		add	r0, r7, #100
 1716 0152 CDE90034 		strd	r3, [sp]
 1717 0156 7B4A     		ldr	r2, .L67+40
 1718 0158 1421     		movs	r1, #20
 1719 015a FFF7FEFF 		bl	snprintf
 607:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1720              		.loc 1 607 0
 1721 015e 07F16403 		add	r3, r7, #100
 1722 0162 1A46     		mov	r2, r3
 1723 0164 7B49     		ldr	r1, .L67+56
 1724 0166 0020     		movs	r0, #0
 1725 0168 FFF7FEFF 		bl	printNotif
 608:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1726              		.loc 1 608 0
 1727 016c 07F16403 		add	r3, r7, #100
 1728 0170 D7F89C20 		ldr	r2, [r7, #156]
 1729 0174 1946     		mov	r1, r3
 1730 0176 7848     		ldr	r0, .L67+60
 1731 0178 FFF7FEFF 		bl	pushData
 609:notoriOS.c    ****             
 610:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 611:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1732              		.loc 1 611 0
 1733 017c 6F4A     		ldr	r2, .L67+32
 1734 017e 6C49     		ldr	r1, .L67+20
 1735 0180 6C48     		ldr	r0, .L67+24
 1736 0182 FFF7FEFF 		bl	SD_write
 612:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1737              		.loc 1 612 0
 1738 0186 07F17803 		add	r3, r7, #120
 1739 018a 1A46     		mov	r2, r3
 1740 018c 6849     		ldr	r1, .L67+20
 1741 018e 6948     		ldr	r0, .L67+24
 1742 0190 FFF7FEFF 		bl	SD_write
 613:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1743              		.loc 1 613 0
 1744 0194 714A     		ldr	r2, .L67+64
 1745 0196 6649     		ldr	r1, .L67+20
 1746 0198 6648     		ldr	r0, .L67+24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 45


 1747 019a FFF7FEFF 		bl	SD_write
 614:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1748              		.loc 1 614 0
 1749 019e 07F16403 		add	r3, r7, #100
 1750 01a2 1A46     		mov	r2, r3
 1751 01a4 6249     		ldr	r1, .L67+20
 1752 01a6 6348     		ldr	r0, .L67+24
 1753 01a8 FFF7FEFF 		bl	SD_write
 615:notoriOS.c    ****             
 616:notoriOS.c    ****             // pressure transducer depth (ft) data
 617:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1754              		.loc 1 617 0
 1755 01ac BB6A     		ldr	r3, [r7, #40]	@ float
 1756 01ae 1846     		mov	r0, r3
 1757 01b0 FFF7FEFF 		bl	__aeabi_f2d
 1758 01b4 0346     		mov	r3, r0
 1759 01b6 0C46     		mov	r4, r1
 1760 01b8 07F16400 		add	r0, r7, #100
 1761 01bc CDE90034 		strd	r3, [sp]
 1762 01c0 604A     		ldr	r2, .L67+40
 1763 01c2 1421     		movs	r1, #20
 1764 01c4 FFF7FEFF 		bl	snprintf
 618:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1765              		.loc 1 618 0
 1766 01c8 07F16403 		add	r3, r7, #100
 1767 01cc 1A46     		mov	r2, r3
 1768 01ce 6449     		ldr	r1, .L67+68
 1769 01d0 0020     		movs	r0, #0
 1770 01d2 FFF7FEFF 		bl	printNotif
 619:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1771              		.loc 1 619 0
 1772 01d6 07F16403 		add	r3, r7, #100
 1773 01da D7F89C20 		ldr	r2, [r7, #156]
 1774 01de 1946     		mov	r1, r3
 1775 01e0 6048     		ldr	r0, .L67+72
 1776 01e2 FFF7FEFF 		bl	pushData
 620:notoriOS.c    ****             
 621:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 622:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1777              		.loc 1 622 0
 1778 01e6 554A     		ldr	r2, .L67+32
 1779 01e8 5149     		ldr	r1, .L67+20
 1780 01ea 5248     		ldr	r0, .L67+24
 1781 01ec FFF7FEFF 		bl	SD_write
 623:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1782              		.loc 1 623 0
 1783 01f0 07F17803 		add	r3, r7, #120
 1784 01f4 1A46     		mov	r2, r3
 1785 01f6 4E49     		ldr	r1, .L67+20
 1786 01f8 4E48     		ldr	r0, .L67+24
 1787 01fa FFF7FEFF 		bl	SD_write
 624:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1788              		.loc 1 624 0
 1789 01fe 5A4A     		ldr	r2, .L67+76
 1790 0200 4B49     		ldr	r1, .L67+20
 1791 0202 4C48     		ldr	r0, .L67+24
 1792 0204 FFF7FEFF 		bl	SD_write
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 46


 625:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1793              		.loc 1 625 0
 1794 0208 07F16403 		add	r3, r7, #100
 1795 020c 1A46     		mov	r2, r3
 1796 020e 4849     		ldr	r1, .L67+20
 1797 0210 4848     		ldr	r0, .L67+24
 1798 0212 FFF7FEFF 		bl	SD_write
 1799 0216 03E0     		b	.L62
 1800              	.L60:
 1801              	.LBE10:
 626:notoriOS.c    ****         }    
 627:notoriOS.c    ****     }else{
 628:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1802              		.loc 1 628 0
 1803 0218 5449     		ldr	r1, .L67+80
 1804 021a 0220     		movs	r0, #2
 1805 021c FFF7FEFF 		bl	printNotif
 1806              	.L62:
 629:notoriOS.c    ****     }
 630:notoriOS.c    ****     
 631:notoriOS.c    ****        // If node type is valve, take level sensor measurements and valve position measurements
 632:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_VALVE){
 1807              		.loc 1 632 0
 1808 0220 3F4B     		ldr	r3, .L67+4
 1809 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1810 0224 042B     		cmp	r3, #4
 1811 0226 73D1     		bne	.L63
 1812              	.LBB11:
 633:notoriOS.c    ****         
 634:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 635:notoriOS.c    ****         level_sensor_t m_level_sensor;
 636:notoriOS.c    ****         
 637:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 638:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1813              		.loc 1 638 0
 1814 0228 3B46     		mov	r3, r7
 1815 022a 1846     		mov	r0, r3
 1816 022c FFF7FEFF 		bl	level_sensor_take_reading
 639:notoriOS.c    ****     
 640:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 641:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1817              		.loc 1 641 0
 1818 0230 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1819 0232 002B     		cmp	r3, #0
 1820 0234 2FD0     		beq	.L64
 642:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1821              		.loc 1 642 0
 1822 0236 B7F91630 		ldrsh	r3, [r7, #22]
 1823 023a 07F16400 		add	r0, r7, #100
 1824 023e 394A     		ldr	r2, .L67+8
 1825 0240 1421     		movs	r1, #20
 1826 0242 FFF7FEFF 		bl	snprintf
 643:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1827              		.loc 1 643 0
 1828 0246 07F16403 		add	r3, r7, #100
 1829 024a 1A46     		mov	r2, r3
 1830 024c 3649     		ldr	r1, .L67+12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 47


 1831 024e 0020     		movs	r0, #0
 1832 0250 FFF7FEFF 		bl	printNotif
 644:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1833              		.loc 1 644 0
 1834 0254 07F16403 		add	r3, r7, #100
 1835 0258 D7F89C20 		ldr	r2, [r7, #156]
 1836 025c 1946     		mov	r1, r3
 1837 025e 3348     		ldr	r0, .L67+16
 1838 0260 FFF7FEFF 		bl	pushData
 645:notoriOS.c    ****             
 646:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 647:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1839              		.loc 1 647 0
 1840 0264 07F17803 		add	r3, r7, #120
 1841 0268 1A46     		mov	r2, r3
 1842 026a 3149     		ldr	r1, .L67+20
 1843 026c 3148     		ldr	r0, .L67+24
 1844 026e FFF7FEFF 		bl	SD_write
 648:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1845              		.loc 1 648 0
 1846 0272 314A     		ldr	r2, .L67+28
 1847 0274 2E49     		ldr	r1, .L67+20
 1848 0276 2F48     		ldr	r0, .L67+24
 1849 0278 FFF7FEFF 		bl	SD_write
 649:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1850              		.loc 1 649 0
 1851 027c 07F16403 		add	r3, r7, #100
 1852 0280 1A46     		mov	r2, r3
 1853 0282 2B49     		ldr	r1, .L67+20
 1854 0284 2B48     		ldr	r0, .L67+24
 1855 0286 FFF7FEFF 		bl	SD_write
 650:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1856              		.loc 1 650 0
 1857 028a 2C4A     		ldr	r2, .L67+32
 1858 028c 2849     		ldr	r1, .L67+20
 1859 028e 2948     		ldr	r0, .L67+24
 1860 0290 FFF7FEFF 		bl	SD_write
 1861 0294 03E0     		b	.L65
 1862              	.L64:
 651:notoriOS.c    ****         }else{
 652:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1863              		.loc 1 652 0
 1864 0296 2A49     		ldr	r1, .L67+36
 1865 0298 0220     		movs	r0, #2
 1866 029a FFF7FEFF 		bl	printNotif
 1867              	.L65:
 653:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 654:notoriOS.c    ****         }
 655:notoriOS.c    ****         
 656:notoriOS.c    ****         float32 valve_position = read_Valve_pos();
 1868              		.loc 1 656 0
 1869 029e FFF7FEFF 		bl	read_Valve_pos
 1870 02a2 C7F89800 		str	r0, [r7, #152]	@ float
 657:notoriOS.c    ****         
 658:notoriOS.c    ****         // TODO: check this reading for validity
 659:notoriOS.c    ****         
 660:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 48


 661:notoriOS.c    ****         snprintf(value,sizeof(value),"%f",valve_position);
 1871              		.loc 1 661 0
 1872 02a6 D7F89800 		ldr	r0, [r7, #152]	@ float
 1873 02aa FFF7FEFF 		bl	__aeabi_f2d
 1874 02ae 0346     		mov	r3, r0
 1875 02b0 0C46     		mov	r4, r1
 1876 02b2 07F16400 		add	r0, r7, #100
 1877 02b6 CDE90034 		strd	r3, [sp]
 1878 02ba 2D4A     		ldr	r2, .L67+84
 1879 02bc 1421     		movs	r1, #20
 1880 02be FFF7FEFF 		bl	snprintf
 662:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"valve_open=%s",value);
 1881              		.loc 1 662 0
 1882 02c2 07F16403 		add	r3, r7, #100
 1883 02c6 1A46     		mov	r2, r3
 1884 02c8 2A49     		ldr	r1, .L67+88
 1885 02ca 0020     		movs	r0, #0
 1886 02cc FFF7FEFF 		bl	printNotif
 663:notoriOS.c    ****         pushData("valve_open",value,timeStamp);
 1887              		.loc 1 663 0
 1888 02d0 07F16403 		add	r3, r7, #100
 1889 02d4 D7F89C20 		ldr	r2, [r7, #156]
 1890 02d8 1946     		mov	r1, r3
 1891 02da 2748     		ldr	r0, .L67+92
 1892 02dc FFF7FEFF 		bl	pushData
 664:notoriOS.c    ****         
 665:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 666:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1893              		.loc 1 666 0
 1894 02e0 07F17803 		add	r3, r7, #120
 1895 02e4 1A46     		mov	r2, r3
 1896 02e6 1249     		ldr	r1, .L67+20
 1897 02e8 1248     		ldr	r0, .L67+24
 1898 02ea FFF7FEFF 		bl	SD_write
 667:notoriOS.c    ****         SD_write(Data_fileName, "a+", " valve_open: ");
 1899              		.loc 1 667 0
 1900 02ee 234A     		ldr	r2, .L67+96
 1901 02f0 0F49     		ldr	r1, .L67+20
 1902 02f2 1048     		ldr	r0, .L67+24
 1903 02f4 FFF7FEFF 		bl	SD_write
 668:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1904              		.loc 1 668 0
 1905 02f8 07F16403 		add	r3, r7, #100
 1906 02fc 1A46     		mov	r2, r3
 1907 02fe 0C49     		ldr	r1, .L67+20
 1908 0300 0C48     		ldr	r0, .L67+24
 1909 0302 FFF7FEFF 		bl	SD_write
 669:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1910              		.loc 1 669 0
 1911 0306 0D4A     		ldr	r2, .L67+32
 1912 0308 0949     		ldr	r1, .L67+20
 1913 030a 0A48     		ldr	r0, .L67+24
 1914 030c FFF7FEFF 		bl	SD_write
 1915              	.L63:
 1916              	.LBE11:
 670:notoriOS.c    ****         
 671:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 49


 672:notoriOS.c    ****     
 673:notoriOS.c    ****     return 0u;
 1917              		.loc 1 673 0
 1918 0310 0023     		movs	r3, #0
 674:notoriOS.c    **** }
 1919              		.loc 1 674 0
 1920 0312 1846     		mov	r0, r3
 1921 0314 A037     		adds	r7, r7, #160
 1922              		.cfi_def_cfa_offset 16
 1923 0316 BD46     		mov	sp, r7
 1924              		.cfi_def_cfa_register 13
 1925              		@ sp needed
 1926 0318 B0BD     		pop	{r4, r5, r7, pc}
 1927              	.L68:
 1928 031a 00BF     		.align	2
 1929              	.L67:
 1930 031c 9C020000 		.word	.LC36
 1931 0320 00000000 		.word	updatable_parameters
 1932 0324 3C000000 		.word	.LC2
 1933 0328 A0020000 		.word	.LC37
 1934 032c B4020000 		.word	.LC38
 1935 0330 C4020000 		.word	.LC39
 1936 0334 00000000 		.word	Data_fileName
 1937 0338 C8020000 		.word	.LC40
 1938 033c DC020000 		.word	.LC41
 1939 0340 E0020000 		.word	.LC42
 1940 0344 0C030000 		.word	.LC43
 1941 0348 14030000 		.word	.LC44
 1942 034c 20030000 		.word	.LC45
 1943 0350 28030000 		.word	.LC46
 1944 0354 30030000 		.word	.LC47
 1945 0358 44030000 		.word	.LC48
 1946 035c 58030000 		.word	.LC49
 1947 0360 6C030000 		.word	.LC50
 1948 0364 80030000 		.word	.LC51
 1949 0368 90030000 		.word	.LC52
 1950 036c A4030000 		.word	.LC53
 1951 0370 CC030000 		.word	.LC54
 1952 0374 D0030000 		.word	.LC55
 1953 0378 E0030000 		.word	.LC56
 1954 037c EC030000 		.word	.LC57
 1955              		.cfi_endproc
 1956              	.LFE76:
 1957              		.size	makeMeasurements, .-makeMeasurements
 1958              		.section	.rodata
 1959 03fa 0000     		.align	2
 1960              	.LC58:
 1961 03fc 4572726F 		.ascii	"Error setting system time.\000"
 1961      72207365 
 1961      7474696E 
 1961      67207379 
 1961      7374656D 
 1962              		.section	.text.setTime,"ax",%progbits
 1963              		.align	2
 1964              		.global	setTime
 1965              		.thumb
 1966              		.thumb_func
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 50


 1967              		.type	setTime, %function
 1968              	setTime:
 1969              	.LFB77:
 675:notoriOS.c    **** 
 676:notoriOS.c    **** // ==============================================
 677:notoriOS.c    **** // Set the system time
 678:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 679:notoriOS.c    **** // ==============================================
 680:notoriOS.c    **** uint8 setTime(long timeStamp){
 1970              		.loc 1 680 0
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 24
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974 0000 80B5     		push	{r7, lr}
 1975              		.cfi_def_cfa_offset 8
 1976              		.cfi_offset 7, -8
 1977              		.cfi_offset 14, -4
 1978 0002 86B0     		sub	sp, sp, #24
 1979              		.cfi_def_cfa_offset 32
 1980 0004 00AF     		add	r7, sp, #0
 1981              		.cfi_def_cfa_register 7
 1982 0006 7860     		str	r0, [r7, #4]
 681:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 682:notoriOS.c    ****     if(timeStamp <=0){
 1983              		.loc 1 682 0
 1984 0008 7B68     		ldr	r3, [r7, #4]
 1985 000a 002B     		cmp	r3, #0
 1986 000c 05DC     		bgt	.L70
 683:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1987              		.loc 1 683 0
 1988 000e 1849     		ldr	r1, .L72
 1989 0010 0220     		movs	r0, #2
 1990 0012 FFF7FEFF 		bl	printNotif
 684:notoriOS.c    ****         return 0;  
 1991              		.loc 1 684 0
 1992 0016 0023     		movs	r3, #0
 1993 0018 25E0     		b	.L71
 1994              	.L70:
 685:notoriOS.c    ****     }
 686:notoriOS.c    ****     // Create a new pointer t of data structure tm
 687:notoriOS.c    ****     struct tm * t;
 688:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 689:notoriOS.c    ****     t = gmtime(&timeStamp);
 1995              		.loc 1 689 0
 1996 001a 3B1D     		adds	r3, r7, #4
 1997 001c 1846     		mov	r0, r3
 1998 001e FFF7FEFF 		bl	gmtime
 1999 0022 7861     		str	r0, [r7, #20]
 690:notoriOS.c    ****     
 691:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 692:notoriOS.c    ****     RTC_TIME_DATE localTime;
 693:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 2000              		.loc 1 693 0
 2001 0024 7B69     		ldr	r3, [r7, #20]
 2002 0026 1B68     		ldr	r3, [r3]
 2003 0028 DBB2     		uxtb	r3, r3
 2004 002a 3B72     		strb	r3, [r7, #8]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 51


 694:notoriOS.c    ****     localTime.Min = t->tm_min;
 2005              		.loc 1 694 0
 2006 002c 7B69     		ldr	r3, [r7, #20]
 2007 002e 5B68     		ldr	r3, [r3, #4]
 2008 0030 DBB2     		uxtb	r3, r3
 2009 0032 7B72     		strb	r3, [r7, #9]
 695:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 2010              		.loc 1 695 0
 2011 0034 7B69     		ldr	r3, [r7, #20]
 2012 0036 9B68     		ldr	r3, [r3, #8]
 2013 0038 DBB2     		uxtb	r3, r3
 2014 003a BB72     		strb	r3, [r7, #10]
 696:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 2015              		.loc 1 696 0
 2016 003c 7B69     		ldr	r3, [r7, #20]
 2017 003e 5B69     		ldr	r3, [r3, #20]
 2018 0040 9BB2     		uxth	r3, r3
 2019 0042 03F26C73 		addw	r3, r3, #1900
 2020 0046 9BB2     		uxth	r3, r3
 2021 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 697:notoriOS.c    ****     localTime.Month = t->tm_mon;
 2022              		.loc 1 697 0
 2023 004a 7B69     		ldr	r3, [r7, #20]
 2024 004c 1B69     		ldr	r3, [r3, #16]
 2025 004e DBB2     		uxtb	r3, r3
 2026 0050 3B74     		strb	r3, [r7, #16]
 698:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 2027              		.loc 1 698 0
 2028 0052 7B69     		ldr	r3, [r7, #20]
 2029 0054 DB68     		ldr	r3, [r3, #12]
 2030 0056 DBB2     		uxtb	r3, r3
 2031 0058 3B73     		strb	r3, [r7, #12]
 699:notoriOS.c    **** 
 700:notoriOS.c    ****     // Writes time and date values as current time and date.
 701:notoriOS.c    ****     RTC_WriteTime(&localTime);
 2032              		.loc 1 701 0
 2033 005a 07F10803 		add	r3, r7, #8
 2034 005e 1846     		mov	r0, r3
 2035 0060 FFF7FEFF 		bl	RTC_WriteTime
 702:notoriOS.c    ****     
 703:notoriOS.c    ****     // Return 1 when the system time was set properly.
 704:notoriOS.c    ****     return 1;
 2036              		.loc 1 704 0
 2037 0064 0123     		movs	r3, #1
 2038              	.L71:
 705:notoriOS.c    **** }
 2039              		.loc 1 705 0
 2040 0066 1846     		mov	r0, r3
 2041 0068 1837     		adds	r7, r7, #24
 2042              		.cfi_def_cfa_offset 8
 2043 006a BD46     		mov	sp, r7
 2044              		.cfi_def_cfa_register 13
 2045              		@ sp needed
 2046 006c 80BD     		pop	{r7, pc}
 2047              	.L73:
 2048 006e 00BF     		.align	2
 2049              	.L72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 52


 2050 0070 FC030000 		.word	.LC58
 2051              		.cfi_endproc
 2052              	.LFE77:
 2053              		.size	setTime, .-setTime
 2054              		.section	.rodata
 2055 0417 00       		.align	2
 2056              	.LC59:
 2057 0418 75706772 		.ascii	"upgrade.hex\000"
 2057      6164652E 
 2057      68657800 
 2058              		.section	.text.upgraded,"ax",%progbits
 2059              		.align	2
 2060              		.global	upgraded
 2061              		.thumb
 2062              		.thumb_func
 2063              		.type	upgraded, %function
 2064              	upgraded:
 2065              	.LFB78:
 706:notoriOS.c    **** 
 707:notoriOS.c    **** //downloads and stores files on SD card
 708:notoriOS.c    **** 
 709:notoriOS.c    **** 
 710:notoriOS.c    **** 
 711:notoriOS.c    **** // ==============================================
 712:notoriOS.c    **** // Will they love it, will they hate it
 713:notoriOS.c    **** // Never fade it, I evade it
 714:notoriOS.c    **** // Cause I never really want to complicate it
 715:notoriOS.c    **** //      - Logic, Upgraded (2015)
 716:notoriOS.c    **** //
 717:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 718:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 719:notoriOS.c    **** // ==============================================
 720:notoriOS.c    **** 
 721:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2066              		.loc 1 721 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 232
 2069              		@ frame_needed = 1, uses_anonymous_args = 0
 2070 0000 80B5     		push	{r7, lr}
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 7, -8
 2073              		.cfi_offset 14, -4
 2074 0002 C0B0     		sub	sp, sp, #256
 2075              		.cfi_def_cfa_offset 264
 2076 0004 06AF     		add	r7, sp, #24
 2077              		.cfi_def_cfa 7, 240
 2078 0006 F860     		str	r0, [r7, #12]
 2079 0008 B960     		str	r1, [r7, #8]
 2080 000a 7A60     		str	r2, [r7, #4]
 722:notoriOS.c    ****     
 723:notoriOS.c    ****     uint8 upgrade_status = 0;
 2081              		.loc 1 723 0
 2082 000c 0023     		movs	r3, #0
 2083 000e 87F8E730 		strb	r3, [r7, #231]
 724:notoriOS.c    ****     
 725:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 726:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 53


 2084              		.loc 1 726 0
 2085 0012 384B     		ldr	r3, .L78
 2086 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2087 0016 042B     		cmp	r3, #4
 2088 0018 02D0     		beq	.L75
 727:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2089              		.loc 1 727 0
 2090 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2091 001e 65E0     		b	.L77
 2092              	.L75:
 728:notoriOS.c    ****     }
 729:notoriOS.c    ****     
 730:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2093              		.loc 1 730 0
 2094 0020 354A     		ldr	r2, .L78+4
 2095 0022 07F1D803 		add	r3, r7, #216
 2096 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2097 0028 83E80700 		stmia	r3, {r0, r1, r2}
 731:notoriOS.c    ****     //delete file, if one exisits already
 732:notoriOS.c    ****     SD_rmfile(fileName);
 2098              		.loc 1 732 0
 2099 002c 07F1D803 		add	r3, r7, #216
 2100 0030 1846     		mov	r0, r3
 2101 0032 FFF7FEFF 		bl	SD_rmfile
 733:notoriOS.c    ****     
 734:notoriOS.c    ****     // Create http request
 735:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2102              		.loc 1 735 0
 2103 0036 314B     		ldr	r3, .L78+8
 2104 0038 0593     		str	r3, [sp, #20]
 2105 003a 0023     		movs	r3, #0
 2106 003c 0493     		str	r3, [sp, #16]
 2107 003e 304B     		ldr	r3, .L78+12
 2108 0040 0393     		str	r3, [sp, #12]
 2109 0042 304B     		ldr	r3, .L78+16
 2110 0044 0293     		str	r3, [sp, #8]
 2111 0046 304B     		ldr	r3, .L78+20
 2112 0048 0193     		str	r3, [sp, #4]
 2113 004a BB68     		ldr	r3, [r7, #8]
 2114 004c 0093     		str	r3, [sp]
 2115 004e 7B68     		ldr	r3, [r7, #4]
 2116 0050 FA68     		ldr	r2, [r7, #12]
 2117 0052 2E49     		ldr	r1, .L78+24
 2118 0054 2E48     		ldr	r0, .L78+28
 2119 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 736:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2120              		.loc 1 736 0
 2121 005a 2D4A     		ldr	r2, .L78+28
 2122 005c 2D49     		ldr	r1, .L78+32
 2123 005e 0020     		movs	r0, #0
 2124 0060 FFF7FEFF 		bl	printNotif
 737:notoriOS.c    ****     // Create array portConfig of size 200 characters
 738:notoriOS.c    ****     char portConfig[200];
 739:notoriOS.c    ****     // Print port configurations
 740:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2125              		.loc 1 740 0
 2126 0064 07F11000 		add	r0, r7, #16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 54


 2127 0068 FB68     		ldr	r3, [r7, #12]
 2128 006a 0093     		str	r3, [sp]
 2129 006c BB68     		ldr	r3, [r7, #8]
 2130 006e 2A4A     		ldr	r2, .L78+36
 2131 0070 C821     		movs	r1, #200
 2132 0072 FFF7FEFF 		bl	snprintf
 741:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2133              		.loc 1 741 0
 2134 0076 07F11003 		add	r3, r7, #16
 2135 007a 1A46     		mov	r2, r3
 2136 007c 2749     		ldr	r1, .L78+40
 2137 007e 0020     		movs	r0, #0
 2138 0080 FFF7FEFF 		bl	printNotif
 742:notoriOS.c    ****     // AT command to configure the port
 743:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2139              		.loc 1 743 0
 2140 0084 07F11003 		add	r3, r7, #16
 2141 0088 42F21072 		movw	r2, #10000
 2142 008c 2449     		ldr	r1, .L78+44
 2143 008e 1846     		mov	r0, r3
 2144 0090 FFF7FEFF 		bl	at_write_command
 2145 0094 0346     		mov	r3, r0
 2146 0096 87F8E730 		strb	r3, [r7, #231]
 744:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 745:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 746:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2147              		.loc 1 746 0
 2148 009a 4FF47A72 		mov	r2, #1000
 2149 009e 2149     		ldr	r1, .L78+48
 2150 00a0 2148     		ldr	r0, .L78+52
 2151 00a2 FFF7FEFF 		bl	at_write_command
 2152 00a6 0346     		mov	r3, r0
 2153 00a8 87F8E730 		strb	r3, [r7, #231]
 747:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 748:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2154              		.loc 1 748 0
 2155 00ac 1848     		ldr	r0, .L78+28
 2156 00ae FFF7FEFF 		bl	strlen
 2157 00b2 0346     		mov	r3, r0
 2158 00b4 1A46     		mov	r2, r3
 2159 00b6 164B     		ldr	r3, .L78+28
 2160 00b8 1344     		add	r3, r3, r2
 2161 00ba 1C49     		ldr	r1, .L78+56
 2162 00bc 1A46     		mov	r2, r3
 2163 00be 0B46     		mov	r3, r1
 2164 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2165 00c2 1380     		strh	r3, [r2]	@ unaligned
 749:notoriOS.c    ****     // AT command to send http request
 750:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2166              		.loc 1 750 0
 2167 00c4 41F28832 		movw	r2, #5000
 2168 00c8 1549     		ldr	r1, .L78+44
 2169 00ca 1148     		ldr	r0, .L78+28
 2170 00cc FFF7FEFF 		bl	at_write_command
 2171 00d0 0346     		mov	r3, r0
 2172 00d2 87F8E730 		strb	r3, [r7, #231]
 751:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 55


 752:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 753:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2173              		.loc 1 753 0
 2174 00d6 41F28832 		movw	r2, #5000
 2175 00da 1549     		ldr	r1, .L78+60
 2176 00dc 1548     		ldr	r0, .L78+64
 2177 00de FFF7FEFF 		bl	at_write_command
 2178 00e2 0346     		mov	r3, r0
 2179 00e4 87F8E730 		strb	r3, [r7, #231]
 754:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 755:notoriOS.c    ****     
 756:notoriOS.c    ****     
 757:notoriOS.c    ****     return upgrade_status;
 2180              		.loc 1 757 0
 2181 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2182              	.L77:
 758:notoriOS.c    ****     
 759:notoriOS.c    **** }
 2183              		.loc 1 759 0 discriminator 1
 2184 00ec 1846     		mov	r0, r3
 2185 00ee E837     		adds	r7, r7, #232
 2186              		.cfi_def_cfa_offset 8
 2187 00f0 BD46     		mov	sp, r7
 2188              		.cfi_def_cfa_register 13
 2189              		@ sp needed
 2190 00f2 80BD     		pop	{r7, pc}
 2191              	.L79:
 2192              		.align	2
 2193              	.L78:
 2194 00f4 00000000 		.word	modem_state
 2195 00f8 18040000 		.word	.LC59
 2196 00fc 94010000 		.word	.LC17
 2197 0100 98010000 		.word	.LC18
 2198 0104 9C010000 		.word	.LC19
 2199 0108 A4010000 		.word	.LC20
 2200 010c 00000000 		.word	http_body
 2201 0110 00000000 		.word	http_request
 2202 0114 AC010000 		.word	.LC21
 2203 0118 C4010000 		.word	.LC22
 2204 011c E0010000 		.word	.LC23
 2205 0120 E4010000 		.word	.LC24
 2206 0124 14020000 		.word	.LC27
 2207 0128 18020000 		.word	.LC28
 2208 012c 28020000 		.word	.LC29
 2209 0130 44020000 		.word	.LC32
 2210 0134 4C020000 		.word	.LC33
 2211              		.cfi_endproc
 2212              	.LFE78:
 2213              		.size	upgraded, .-upgraded
 2214              		.text
 2215              	.Letext0:
 2216              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2217              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2218              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2219              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2220              		.file 6 "testing.h"
 2221              		.file 7 "level_sensor.h"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 56


 2222              		.file 8 "voltages.h"
 2223              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2224              		.file 10 "data.h"
 2225              		.file 11 "modem.h"
 2226              		.file 12 "notoriOS.h"
 2227              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2228              		.section	.debug_info,"",%progbits
 2229              	.Ldebug_info0:
 2230 0000 6F0C0000 		.4byte	0xc6f
 2231 0004 0400     		.2byte	0x4
 2232 0006 00000000 		.4byte	.Ldebug_abbrev0
 2233 000a 04       		.byte	0x4
 2234 000b 01       		.uleb128 0x1
 2235 000c 74000000 		.4byte	.LASF165
 2236 0010 0C       		.byte	0xc
 2237 0011 F1070000 		.4byte	.LASF166
 2238 0015 EF050000 		.4byte	.LASF167
 2239 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2240 001d 00000000 		.4byte	0
 2241 0021 00000000 		.4byte	.Ldebug_line0
 2242 0025 02       		.uleb128 0x2
 2243 0026 01       		.byte	0x1
 2244 0027 06       		.byte	0x6
 2245 0028 45000000 		.4byte	.LASF0
 2246 002c 02       		.uleb128 0x2
 2247 002d 01       		.byte	0x1
 2248 002e 08       		.byte	0x8
 2249 002f C1050000 		.4byte	.LASF1
 2250 0033 02       		.uleb128 0x2
 2251 0034 02       		.byte	0x2
 2252 0035 05       		.byte	0x5
 2253 0036 1F040000 		.4byte	.LASF2
 2254 003a 02       		.uleb128 0x2
 2255 003b 02       		.byte	0x2
 2256 003c 07       		.byte	0x7
 2257 003d 89070000 		.4byte	.LASF3
 2258 0041 03       		.uleb128 0x3
 2259 0042 44070000 		.4byte	.LASF9
 2260 0046 02       		.byte	0x2
 2261 0047 3F       		.byte	0x3f
 2262 0048 4C000000 		.4byte	0x4c
 2263 004c 02       		.uleb128 0x2
 2264 004d 04       		.byte	0x4
 2265 004e 05       		.byte	0x5
 2266 004f 09020000 		.4byte	.LASF4
 2267 0053 02       		.uleb128 0x2
 2268 0054 04       		.byte	0x4
 2269 0055 07       		.byte	0x7
 2270 0056 5C030000 		.4byte	.LASF5
 2271 005a 02       		.uleb128 0x2
 2272 005b 08       		.byte	0x8
 2273 005c 05       		.byte	0x5
 2274 005d 64010000 		.4byte	.LASF6
 2275 0061 02       		.uleb128 0x2
 2276 0062 08       		.byte	0x8
 2277 0063 07       		.byte	0x7
 2278 0064 13010000 		.4byte	.LASF7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 57


 2279 0068 04       		.uleb128 0x4
 2280 0069 04       		.byte	0x4
 2281 006a 05       		.byte	0x5
 2282 006b 696E7400 		.ascii	"int\000"
 2283 006f 02       		.uleb128 0x2
 2284 0070 04       		.byte	0x4
 2285 0071 07       		.byte	0x7
 2286 0072 08030000 		.4byte	.LASF8
 2287 0076 03       		.uleb128 0x3
 2288 0077 B9050000 		.4byte	.LASF10
 2289 007b 03       		.byte	0x3
 2290 007c 2C       		.byte	0x2c
 2291 007d 41000000 		.4byte	0x41
 2292 0081 05       		.uleb128 0x5
 2293 0082 40020000 		.4byte	.LASF11
 2294 0086 04       		.byte	0x4
 2295 0087 9201     		.2byte	0x192
 2296 0089 2C000000 		.4byte	0x2c
 2297 008d 05       		.uleb128 0x5
 2298 008e 08000000 		.4byte	.LASF12
 2299 0092 04       		.byte	0x4
 2300 0093 9301     		.2byte	0x193
 2301 0095 3A000000 		.4byte	0x3a
 2302 0099 05       		.uleb128 0x5
 2303 009a 84020000 		.4byte	.LASF13
 2304 009e 04       		.byte	0x4
 2305 009f 9401     		.2byte	0x194
 2306 00a1 53000000 		.4byte	0x53
 2307 00a5 05       		.uleb128 0x5
 2308 00a6 E2030000 		.4byte	.LASF14
 2309 00aa 04       		.byte	0x4
 2310 00ab 9501     		.2byte	0x195
 2311 00ad 25000000 		.4byte	0x25
 2312 00b1 05       		.uleb128 0x5
 2313 00b2 06080000 		.4byte	.LASF15
 2314 00b6 04       		.byte	0x4
 2315 00b7 9601     		.2byte	0x196
 2316 00b9 33000000 		.4byte	0x33
 2317 00bd 05       		.uleb128 0x5
 2318 00be 5E020000 		.4byte	.LASF16
 2319 00c2 04       		.byte	0x4
 2320 00c3 9701     		.2byte	0x197
 2321 00c5 4C000000 		.4byte	0x4c
 2322 00c9 05       		.uleb128 0x5
 2323 00ca 94040000 		.4byte	.LASF17
 2324 00ce 04       		.byte	0x4
 2325 00cf 9801     		.2byte	0x198
 2326 00d1 D5000000 		.4byte	0xd5
 2327 00d5 02       		.uleb128 0x2
 2328 00d6 04       		.byte	0x4
 2329 00d7 04       		.byte	0x4
 2330 00d8 5E050000 		.4byte	.LASF18
 2331 00dc 02       		.uleb128 0x2
 2332 00dd 08       		.byte	0x8
 2333 00de 04       		.byte	0x4
 2334 00df 97080000 		.4byte	.LASF19
 2335 00e3 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 58


 2336 00e4 01       		.byte	0x1
 2337 00e5 08       		.byte	0x8
 2338 00e6 05070000 		.4byte	.LASF20
 2339 00ea 02       		.uleb128 0x2
 2340 00eb 08       		.byte	0x8
 2341 00ec 04       		.byte	0x4
 2342 00ed E7060000 		.4byte	.LASF21
 2343 00f1 02       		.uleb128 0x2
 2344 00f2 04       		.byte	0x4
 2345 00f3 07       		.byte	0x7
 2346 00f4 AD040000 		.4byte	.LASF22
 2347 00f8 06       		.uleb128 0x6
 2348 00f9 04       		.byte	0x4
 2349 00fa E3000000 		.4byte	0xe3
 2350 00fe 07       		.uleb128 0x7
 2351 00ff E3000000 		.4byte	0xe3
 2352 0103 0E010000 		.4byte	0x10e
 2353 0107 08       		.uleb128 0x8
 2354 0108 F1000000 		.4byte	0xf1
 2355 010c 17       		.byte	0x17
 2356 010d 00       		.byte	0
 2357 010e 09       		.uleb128 0x9
 2358 010f 0C       		.byte	0xc
 2359 0110 05       		.byte	0x5
 2360 0111 30       		.byte	0x30
 2361 0112 77010000 		.4byte	0x177
 2362 0116 0A       		.uleb128 0xa
 2363 0117 53656300 		.ascii	"Sec\000"
 2364 011b 05       		.byte	0x5
 2365 011c 32       		.byte	0x32
 2366 011d 81000000 		.4byte	0x81
 2367 0121 00       		.byte	0
 2368 0122 0A       		.uleb128 0xa
 2369 0123 4D696E00 		.ascii	"Min\000"
 2370 0127 05       		.byte	0x5
 2371 0128 33       		.byte	0x33
 2372 0129 81000000 		.4byte	0x81
 2373 012d 01       		.byte	0x1
 2374 012e 0B       		.uleb128 0xb
 2375 012f 2A010000 		.4byte	.LASF23
 2376 0133 05       		.byte	0x5
 2377 0134 34       		.byte	0x34
 2378 0135 81000000 		.4byte	0x81
 2379 0139 02       		.byte	0x2
 2380 013a 0B       		.uleb128 0xb
 2381 013b 46060000 		.4byte	.LASF24
 2382 013f 05       		.byte	0x5
 2383 0140 35       		.byte	0x35
 2384 0141 81000000 		.4byte	0x81
 2385 0145 03       		.byte	0x3
 2386 0146 0B       		.uleb128 0xb
 2387 0147 9D030000 		.4byte	.LASF25
 2388 014b 05       		.byte	0x5
 2389 014c 36       		.byte	0x36
 2390 014d 81000000 		.4byte	0x81
 2391 0151 04       		.byte	0x4
 2392 0152 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 59


 2393 0153 51080000 		.4byte	.LASF26
 2394 0157 05       		.byte	0x5
 2395 0158 37       		.byte	0x37
 2396 0159 8D000000 		.4byte	0x8d
 2397 015d 06       		.byte	0x6
 2398 015e 0B       		.uleb128 0xb
 2399 015f 0D010000 		.4byte	.LASF27
 2400 0163 05       		.byte	0x5
 2401 0164 38       		.byte	0x38
 2402 0165 81000000 		.4byte	0x81
 2403 0169 08       		.byte	0x8
 2404 016a 0B       		.uleb128 0xb
 2405 016b AE050000 		.4byte	.LASF28
 2406 016f 05       		.byte	0x5
 2407 0170 39       		.byte	0x39
 2408 0171 8D000000 		.4byte	0x8d
 2409 0175 0A       		.byte	0xa
 2410 0176 00       		.byte	0
 2411 0177 03       		.uleb128 0x3
 2412 0178 03050000 		.4byte	.LASF29
 2413 017c 05       		.byte	0x5
 2414 017d 3A       		.byte	0x3a
 2415 017e 82010000 		.4byte	0x182
 2416 0182 0C       		.uleb128 0xc
 2417 0183 0E010000 		.4byte	0x10e
 2418 0187 0D       		.uleb128 0xd
 2419 0188 8101     		.2byte	0x181
 2420 018a 06       		.byte	0x6
 2421 018b 0A       		.byte	0xa
 2422 018c B5010000 		.4byte	0x1b5
 2423 0190 0B       		.uleb128 0xb
 2424 0191 A4050000 		.4byte	.LASF30
 2425 0195 06       		.byte	0x6
 2426 0196 0C       		.byte	0xc
 2427 0197 B5010000 		.4byte	0x1b5
 2428 019b 00       		.byte	0
 2429 019c 0B       		.uleb128 0xb
 2430 019d C6070000 		.4byte	.LASF31
 2431 01a1 06       		.byte	0x6
 2432 01a2 0D       		.byte	0xd
 2433 01a3 81000000 		.4byte	0x81
 2434 01a7 80       		.byte	0x80
 2435 01a8 0B       		.uleb128 0xb
 2436 01a9 68060000 		.4byte	.LASF32
 2437 01ad 06       		.byte	0x6
 2438 01ae 0F       		.byte	0xf
 2439 01af C5010000 		.4byte	0x1c5
 2440 01b3 81       		.byte	0x81
 2441 01b4 00       		.byte	0
 2442 01b5 07       		.uleb128 0x7
 2443 01b6 E3000000 		.4byte	0xe3
 2444 01ba C5010000 		.4byte	0x1c5
 2445 01be 08       		.uleb128 0x8
 2446 01bf F1000000 		.4byte	0xf1
 2447 01c3 7F       		.byte	0x7f
 2448 01c4 00       		.byte	0
 2449 01c5 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 60


 2450 01c6 E3000000 		.4byte	0xe3
 2451 01ca D5010000 		.4byte	0x1d5
 2452 01ce 08       		.uleb128 0x8
 2453 01cf F1000000 		.4byte	0xf1
 2454 01d3 FF       		.byte	0xff
 2455 01d4 00       		.byte	0
 2456 01d5 03       		.uleb128 0x3
 2457 01d6 50060000 		.4byte	.LASF33
 2458 01da 06       		.byte	0x6
 2459 01db 10       		.byte	0x10
 2460 01dc 87010000 		.4byte	0x187
 2461 01e0 09       		.uleb128 0x9
 2462 01e1 1A       		.byte	0x1a
 2463 01e2 07       		.byte	0x7
 2464 01e3 10       		.byte	0x10
 2465 01e4 19020000 		.4byte	0x219
 2466 01e8 0B       		.uleb128 0xb
 2467 01e9 94020000 		.4byte	.LASF34
 2468 01ed 07       		.byte	0x7
 2469 01ee 11       		.byte	0x11
 2470 01ef 19020000 		.4byte	0x219
 2471 01f3 00       		.byte	0
 2472 01f4 0B       		.uleb128 0xb
 2473 01f5 73070000 		.4byte	.LASF35
 2474 01f9 07       		.byte	0x7
 2475 01fa 12       		.byte	0x12
 2476 01fb B1000000 		.4byte	0xb1
 2477 01ff 16       		.byte	0x16
 2478 0200 0B       		.uleb128 0xb
 2479 0201 34030000 		.4byte	.LASF36
 2480 0205 07       		.byte	0x7
 2481 0206 13       		.byte	0x13
 2482 0207 81000000 		.4byte	0x81
 2483 020b 18       		.byte	0x18
 2484 020c 0B       		.uleb128 0xb
 2485 020d 17000000 		.4byte	.LASF37
 2486 0211 07       		.byte	0x7
 2487 0212 14       		.byte	0x14
 2488 0213 81000000 		.4byte	0x81
 2489 0217 19       		.byte	0x19
 2490 0218 00       		.byte	0
 2491 0219 07       		.uleb128 0x7
 2492 021a B1000000 		.4byte	0xb1
 2493 021e 29020000 		.4byte	0x229
 2494 0222 08       		.uleb128 0x8
 2495 0223 F1000000 		.4byte	0xf1
 2496 0227 0A       		.byte	0xa
 2497 0228 00       		.byte	0
 2498 0229 03       		.uleb128 0x3
 2499 022a 64050000 		.4byte	.LASF38
 2500 022e 07       		.byte	0x7
 2501 022f 15       		.byte	0x15
 2502 0230 E0010000 		.4byte	0x1e0
 2503 0234 09       		.uleb128 0x9
 2504 0235 1C       		.byte	0x1c
 2505 0236 08       		.byte	0x8
 2506 0237 14       		.byte	0x14
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 61


 2507 0238 91020000 		.4byte	0x291
 2508 023c 0B       		.uleb128 0xb
 2509 023d 8D030000 		.4byte	.LASF39
 2510 0241 08       		.byte	0x8
 2511 0242 15       		.byte	0x15
 2512 0243 D5000000 		.4byte	0xd5
 2513 0247 00       		.byte	0
 2514 0248 0B       		.uleb128 0xb
 2515 0249 B0010000 		.4byte	.LASF40
 2516 024d 08       		.byte	0x8
 2517 024e 16       		.byte	0x16
 2518 024f D5000000 		.4byte	0xd5
 2519 0253 04       		.byte	0x4
 2520 0254 0B       		.uleb128 0xb
 2521 0255 BE010000 		.4byte	.LASF41
 2522 0259 08       		.byte	0x8
 2523 025a 17       		.byte	0x17
 2524 025b D5000000 		.4byte	0xd5
 2525 025f 08       		.byte	0x8
 2526 0260 0B       		.uleb128 0xb
 2527 0261 40050000 		.4byte	.LASF42
 2528 0265 08       		.byte	0x8
 2529 0266 18       		.byte	0x18
 2530 0267 D5000000 		.4byte	0xd5
 2531 026b 0C       		.byte	0xc
 2532 026c 0B       		.uleb128 0xb
 2533 026d 3F080000 		.4byte	.LASF43
 2534 0271 08       		.byte	0x8
 2535 0272 19       		.byte	0x19
 2536 0273 D5000000 		.4byte	0xd5
 2537 0277 10       		.byte	0x10
 2538 0278 0B       		.uleb128 0xb
 2539 0279 0A070000 		.4byte	.LASF44
 2540 027d 08       		.byte	0x8
 2541 027e 1A       		.byte	0x1a
 2542 027f D5000000 		.4byte	0xd5
 2543 0283 14       		.byte	0x14
 2544 0284 0B       		.uleb128 0xb
 2545 0285 D9060000 		.4byte	.LASF45
 2546 0289 08       		.byte	0x8
 2547 028a 1B       		.byte	0x1b
 2548 028b 81000000 		.4byte	0x81
 2549 028f 18       		.byte	0x18
 2550 0290 00       		.byte	0
 2551 0291 03       		.uleb128 0x3
 2552 0292 9E080000 		.4byte	.LASF46
 2553 0296 08       		.byte	0x8
 2554 0297 1C       		.byte	0x1c
 2555 0298 34020000 		.4byte	0x234
 2556 029c 09       		.uleb128 0x9
 2557 029d 10       		.byte	0x10
 2558 029e 08       		.byte	0x8
 2559 029f 1E       		.byte	0x1e
 2560 02a0 D5020000 		.4byte	0x2d5
 2561 02a4 0B       		.uleb128 0xb
 2562 02a5 F4020000 		.4byte	.LASF47
 2563 02a9 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 62


 2564 02aa 1F       		.byte	0x1f
 2565 02ab D5000000 		.4byte	0xd5
 2566 02af 00       		.byte	0
 2567 02b0 0B       		.uleb128 0xb
 2568 02b1 2B020000 		.4byte	.LASF48
 2569 02b5 08       		.byte	0x8
 2570 02b6 20       		.byte	0x20
 2571 02b7 D5000000 		.4byte	0xd5
 2572 02bb 04       		.byte	0x4
 2573 02bc 0B       		.uleb128 0xb
 2574 02bd C8060000 		.4byte	.LASF49
 2575 02c1 08       		.byte	0x8
 2576 02c2 21       		.byte	0x21
 2577 02c3 D5000000 		.4byte	0xd5
 2578 02c7 08       		.byte	0x8
 2579 02c8 0B       		.uleb128 0xb
 2580 02c9 32060000 		.4byte	.LASF50
 2581 02cd 08       		.byte	0x8
 2582 02ce 22       		.byte	0x22
 2583 02cf D5000000 		.4byte	0xd5
 2584 02d3 0C       		.byte	0xc
 2585 02d4 00       		.byte	0
 2586 02d5 03       		.uleb128 0x3
 2587 02d6 5B080000 		.4byte	.LASF51
 2588 02da 08       		.byte	0x8
 2589 02db 23       		.byte	0x23
 2590 02dc 9C020000 		.4byte	0x29c
 2591 02e0 0E       		.uleb128 0xe
 2592 02e1 746D00   		.ascii	"tm\000"
 2593 02e4 24       		.byte	0x24
 2594 02e5 09       		.byte	0x9
 2595 02e6 21       		.byte	0x21
 2596 02e7 58030000 		.4byte	0x358
 2597 02eb 0B       		.uleb128 0xb
 2598 02ec B4070000 		.4byte	.LASF52
 2599 02f0 09       		.byte	0x9
 2600 02f1 23       		.byte	0x23
 2601 02f2 68000000 		.4byte	0x68
 2602 02f6 00       		.byte	0
 2603 02f7 0B       		.uleb128 0xb
 2604 02f8 8D040000 		.4byte	.LASF53
 2605 02fc 09       		.byte	0x9
 2606 02fd 24       		.byte	0x24
 2607 02fe 68000000 		.4byte	0x68
 2608 0302 04       		.byte	0x4
 2609 0303 0B       		.uleb128 0xb
 2610 0304 0F000000 		.4byte	.LASF54
 2611 0308 09       		.byte	0x9
 2612 0309 25       		.byte	0x25
 2613 030a 68000000 		.4byte	0x68
 2614 030e 08       		.byte	0x8
 2615 030f 0B       		.uleb128 0xb
 2616 0310 A3070000 		.4byte	.LASF55
 2617 0314 09       		.byte	0x9
 2618 0315 26       		.byte	0x26
 2619 0316 68000000 		.4byte	0x68
 2620 031a 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 63


 2621 031b 0B       		.uleb128 0xb
 2622 031c BF020000 		.4byte	.LASF56
 2623 0320 09       		.byte	0x9
 2624 0321 27       		.byte	0x27
 2625 0322 68000000 		.4byte	0x68
 2626 0326 10       		.byte	0x10
 2627 0327 0B       		.uleb128 0xb
 2628 0328 E2020000 		.4byte	.LASF57
 2629 032c 09       		.byte	0x9
 2630 032d 28       		.byte	0x28
 2631 032e 68000000 		.4byte	0x68
 2632 0332 14       		.byte	0x14
 2633 0333 0B       		.uleb128 0xb
 2634 0334 DF060000 		.4byte	.LASF58
 2635 0338 09       		.byte	0x9
 2636 0339 29       		.byte	0x29
 2637 033a 68000000 		.4byte	0x68
 2638 033e 18       		.byte	0x18
 2639 033f 0B       		.uleb128 0xb
 2640 0340 C1040000 		.4byte	.LASF59
 2641 0344 09       		.byte	0x9
 2642 0345 2A       		.byte	0x2a
 2643 0346 68000000 		.4byte	0x68
 2644 034a 1C       		.byte	0x1c
 2645 034b 0B       		.uleb128 0xb
 2646 034c C6030000 		.4byte	.LASF60
 2647 0350 09       		.byte	0x9
 2648 0351 2B       		.byte	0x2b
 2649 0352 68000000 		.4byte	0x68
 2650 0356 20       		.byte	0x20
 2651 0357 00       		.byte	0
 2652 0358 09       		.uleb128 0x9
 2653 0359 2C       		.byte	0x2c
 2654 035a 0A       		.byte	0xa
 2655 035b 14       		.byte	0x14
 2656 035c 85030000 		.4byte	0x385
 2657 0360 0A       		.uleb128 0xa
 2658 0361 6B657900 		.ascii	"key\000"
 2659 0365 0A       		.byte	0xa
 2660 0366 15       		.byte	0x15
 2661 0367 85030000 		.4byte	0x385
 2662 036b 00       		.byte	0
 2663 036c 0B       		.uleb128 0xb
 2664 036d D7020000 		.4byte	.LASF61
 2665 0371 0A       		.byte	0xa
 2666 0372 16       		.byte	0x16
 2667 0373 85030000 		.4byte	0x385
 2668 0377 14       		.byte	0x14
 2669 0378 0B       		.uleb128 0xb
 2670 0379 F9040000 		.4byte	.LASF62
 2671 037d 0A       		.byte	0xa
 2672 037e 17       		.byte	0x17
 2673 037f BD000000 		.4byte	0xbd
 2674 0383 28       		.byte	0x28
 2675 0384 00       		.byte	0
 2676 0385 07       		.uleb128 0x7
 2677 0386 E3000000 		.4byte	0xe3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 64


 2678 038a 95030000 		.4byte	0x395
 2679 038e 08       		.uleb128 0x8
 2680 038f F1000000 		.4byte	0xf1
 2681 0393 13       		.byte	0x13
 2682 0394 00       		.byte	0
 2683 0395 03       		.uleb128 0x3
 2684 0396 1D030000 		.4byte	.LASF63
 2685 039a 0A       		.byte	0xa
 2686 039b 19       		.byte	0x19
 2687 039c 58030000 		.4byte	0x358
 2688 03a0 09       		.uleb128 0x9
 2689 03a1 3C       		.byte	0x3c
 2690 03a2 0B       		.byte	0xb
 2691 03a3 37       		.byte	0x37
 2692 03a4 CD030000 		.4byte	0x3cd
 2693 03a8 0B       		.uleb128 0xb
 2694 03a9 9C070000 		.4byte	.LASF64
 2695 03ad 0B       		.byte	0xb
 2696 03ae 38       		.byte	0x38
 2697 03af 85030000 		.4byte	0x385
 2698 03b3 00       		.byte	0
 2699 03b4 0B       		.uleb128 0xb
 2700 03b5 8B020000 		.4byte	.LASF65
 2701 03b9 0B       		.byte	0xb
 2702 03ba 39       		.byte	0x39
 2703 03bb 85030000 		.4byte	0x385
 2704 03bf 14       		.byte	0x14
 2705 03c0 0B       		.uleb128 0xb
 2706 03c1 63060000 		.4byte	.LASF66
 2707 03c5 0B       		.byte	0xb
 2708 03c6 3A       		.byte	0x3a
 2709 03c7 85030000 		.4byte	0x385
 2710 03cb 28       		.byte	0x28
 2711 03cc 00       		.byte	0
 2712 03cd 03       		.uleb128 0x3
 2713 03ce F6010000 		.4byte	.LASF67
 2714 03d2 0B       		.byte	0xb
 2715 03d3 3C       		.byte	0x3c
 2716 03d4 A0030000 		.4byte	0x3a0
 2717 03d8 09       		.uleb128 0x9
 2718 03d9 20       		.byte	0x20
 2719 03da 0B       		.byte	0xb
 2720 03db 3E       		.byte	0x3e
 2721 03dc 41040000 		.4byte	0x441
 2722 03e0 0B       		.uleb128 0xb
 2723 03e1 03020000 		.4byte	.LASF68
 2724 03e5 0B       		.byte	0xb
 2725 03e6 3F       		.byte	0x3f
 2726 03e7 68000000 		.4byte	0x68
 2727 03eb 00       		.byte	0
 2728 03ec 0A       		.uleb128 0xa
 2729 03ed 62657200 		.ascii	"ber\000"
 2730 03f1 0B       		.byte	0xb
 2731 03f2 40       		.byte	0x40
 2732 03f3 68000000 		.4byte	0x68
 2733 03f7 04       		.byte	0x4
 2734 03f8 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 65


 2735 03f9 41060000 		.4byte	.LASF69
 2736 03fd 0B       		.byte	0xb
 2737 03fe 41       		.byte	0x41
 2738 03ff 68000000 		.4byte	0x68
 2739 0403 08       		.byte	0x8
 2740 0404 0B       		.uleb128 0xb
 2741 0405 7A010000 		.4byte	.LASF70
 2742 0409 0B       		.byte	0xb
 2743 040a 42       		.byte	0x42
 2744 040b 68000000 		.4byte	0x68
 2745 040f 0C       		.byte	0xc
 2746 0410 0B       		.uleb128 0xb
 2747 0411 EA050000 		.4byte	.LASF71
 2748 0415 0B       		.byte	0xb
 2749 0416 43       		.byte	0x43
 2750 0417 68000000 		.4byte	0x68
 2751 041b 10       		.byte	0x10
 2752 041c 0B       		.uleb128 0xb
 2753 041d E5050000 		.4byte	.LASF72
 2754 0421 0B       		.byte	0xb
 2755 0422 44       		.byte	0x44
 2756 0423 68000000 		.4byte	0x68
 2757 0427 14       		.byte	0x14
 2758 0428 0B       		.uleb128 0xb
 2759 0429 8D010000 		.4byte	.LASF73
 2760 042d 0B       		.byte	0xb
 2761 042e 45       		.byte	0x45
 2762 042f 68000000 		.4byte	0x68
 2763 0433 18       		.byte	0x18
 2764 0434 0B       		.uleb128 0xb
 2765 0435 12020000 		.4byte	.LASF74
 2766 0439 0B       		.byte	0xb
 2767 043a 46       		.byte	0x46
 2768 043b 68000000 		.4byte	0x68
 2769 043f 1C       		.byte	0x1c
 2770 0440 00       		.byte	0
 2771 0441 03       		.uleb128 0x3
 2772 0442 BA060000 		.4byte	.LASF75
 2773 0446 0B       		.byte	0xb
 2774 0447 48       		.byte	0x48
 2775 0448 D8030000 		.4byte	0x3d8
 2776 044c 09       		.uleb128 0x9
 2777 044d 05       		.byte	0x5
 2778 044e 0B       		.byte	0xb
 2779 044f 54       		.byte	0x54
 2780 0450 91040000 		.4byte	0x491
 2781 0454 0B       		.uleb128 0xb
 2782 0455 64020000 		.4byte	.LASF76
 2783 0459 0B       		.byte	0xb
 2784 045a 56       		.byte	0x56
 2785 045b 81000000 		.4byte	0x81
 2786 045f 00       		.byte	0
 2787 0460 0B       		.uleb128 0xb
 2788 0461 30080000 		.4byte	.LASF77
 2789 0465 0B       		.byte	0xb
 2790 0466 58       		.byte	0x58
 2791 0467 91040000 		.4byte	0x491
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 66


 2792 046b 01       		.byte	0x1
 2793 046c 0B       		.uleb128 0xb
 2794 046d 57070000 		.4byte	.LASF78
 2795 0471 0B       		.byte	0xb
 2796 0472 5A       		.byte	0x5a
 2797 0473 81000000 		.4byte	0x81
 2798 0477 02       		.byte	0x2
 2799 0478 0B       		.uleb128 0xb
 2800 0479 28060000 		.4byte	.LASF79
 2801 047d 0B       		.byte	0xb
 2802 047e 5C       		.byte	0x5c
 2803 047f 81000000 		.4byte	0x81
 2804 0483 03       		.byte	0x3
 2805 0484 0B       		.uleb128 0xb
 2806 0485 C6020000 		.4byte	.LASF80
 2807 0489 0B       		.byte	0xb
 2808 048a 5F       		.byte	0x5f
 2809 048b 81000000 		.4byte	0x81
 2810 048f 04       		.byte	0x4
 2811 0490 00       		.byte	0
 2812 0491 02       		.uleb128 0x2
 2813 0492 01       		.byte	0x1
 2814 0493 02       		.byte	0x2
 2815 0494 B3050000 		.4byte	.LASF81
 2816 0498 03       		.uleb128 0x3
 2817 0499 5A040000 		.4byte	.LASF82
 2818 049d 0B       		.byte	0xb
 2819 049e 61       		.byte	0x61
 2820 049f 4C040000 		.4byte	0x44c
 2821 04a3 09       		.uleb128 0x9
 2822 04a4 06       		.byte	0x6
 2823 04a5 0C       		.byte	0xc
 2824 04a6 2E       		.byte	0x2e
 2825 04a7 DC040000 		.4byte	0x4dc
 2826 04ab 0B       		.uleb128 0xb
 2827 04ac A7020000 		.4byte	.LASF83
 2828 04b0 0C       		.byte	0xc
 2829 04b1 30       		.byte	0x30
 2830 04b2 8D000000 		.4byte	0x8d
 2831 04b6 00       		.byte	0
 2832 04b7 0B       		.uleb128 0xb
 2833 04b8 1A080000 		.4byte	.LASF84
 2834 04bc 0C       		.byte	0xc
 2835 04bd 31       		.byte	0x31
 2836 04be B1000000 		.4byte	0xb1
 2837 04c2 02       		.byte	0x2
 2838 04c3 0B       		.uleb128 0xb
 2839 04c4 0C080000 		.4byte	.LASF85
 2840 04c8 0C       		.byte	0xc
 2841 04c9 32       		.byte	0x32
 2842 04ca 81000000 		.4byte	0x81
 2843 04ce 04       		.byte	0x4
 2844 04cf 0B       		.uleb128 0xb
 2845 04d0 51000000 		.4byte	.LASF86
 2846 04d4 0C       		.byte	0xc
 2847 04d5 33       		.byte	0x33
 2848 04d6 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 67


 2849 04da 05       		.byte	0x5
 2850 04db 00       		.byte	0
 2851 04dc 03       		.uleb128 0x3
 2852 04dd 25020000 		.4byte	.LASF87
 2853 04e1 0C       		.byte	0xc
 2854 04e2 36       		.byte	0x36
 2855 04e3 E7040000 		.4byte	0x4e7
 2856 04e7 0C       		.uleb128 0xc
 2857 04e8 A3040000 		.4byte	0x4a3
 2858 04ec 09       		.uleb128 0x9
 2859 04ed 1C       		.byte	0x1c
 2860 04ee 0C       		.byte	0xc
 2861 04ef 39       		.byte	0x39
 2862 04f0 0D050000 		.4byte	0x50d
 2863 04f4 0B       		.uleb128 0xb
 2864 04f5 CF030000 		.4byte	.LASF88
 2865 04f9 0C       		.byte	0xc
 2866 04fa 3B       		.byte	0x3b
 2867 04fb 0D050000 		.4byte	0x50d
 2868 04ff 00       		.byte	0
 2869 0500 0B       		.uleb128 0xb
 2870 0501 81080000 		.4byte	.LASF89
 2871 0505 0C       		.byte	0xc
 2872 0506 3C       		.byte	0x3c
 2873 0507 FE000000 		.4byte	0xfe
 2874 050b 04       		.byte	0x4
 2875 050c 00       		.byte	0
 2876 050d 06       		.uleb128 0x6
 2877 050e 04       		.byte	0x4
 2878 050f CD030000 		.4byte	0x3cd
 2879 0513 03       		.uleb128 0x3
 2880 0514 4F040000 		.4byte	.LASF90
 2881 0518 0C       		.byte	0xc
 2882 0519 3E       		.byte	0x3e
 2883 051a EC040000 		.4byte	0x4ec
 2884 051e 09       		.uleb128 0x9
 2885 051f 68       		.byte	0x68
 2886 0520 0C       		.byte	0xc
 2887 0521 44       		.byte	0x44
 2888 0522 3F050000 		.4byte	0x53f
 2889 0526 0B       		.uleb128 0xb
 2890 0527 DA030000 		.4byte	.LASF91
 2891 052b 0C       		.byte	0xc
 2892 052c 49       		.byte	0x49
 2893 052d 3F050000 		.4byte	0x53f
 2894 0531 00       		.byte	0
 2895 0532 0B       		.uleb128 0xb
 2896 0533 BE030000 		.4byte	.LASF92
 2897 0537 0C       		.byte	0xc
 2898 0538 4A       		.byte	0x4a
 2899 0539 68000000 		.4byte	0x68
 2900 053d 64       		.byte	0x64
 2901 053e 00       		.byte	0
 2902 053f 07       		.uleb128 0x7
 2903 0540 E3000000 		.4byte	0xe3
 2904 0544 4F050000 		.4byte	0x54f
 2905 0548 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 68


 2906 0549 F1000000 		.4byte	0xf1
 2907 054d 63       		.byte	0x63
 2908 054e 00       		.byte	0
 2909 054f 03       		.uleb128 0x3
 2910 0550 C9040000 		.4byte	.LASF93
 2911 0554 0C       		.byte	0xc
 2912 0555 50       		.byte	0x50
 2913 0556 1E050000 		.4byte	0x51e
 2914 055a 0F       		.uleb128 0xf
 2915 055b 69000000 		.4byte	.LASF168
 2916 055f 01       		.byte	0x1
 2917 0560 14       		.byte	0x14
 2918 0561 00000000 		.4byte	.LFB64
 2919 0565 0C000000 		.4byte	.LFE64-.LFB64
 2920 0569 01       		.uleb128 0x1
 2921 056a 9C       		.byte	0x9c
 2922 056b 10       		.uleb128 0x10
 2923 056c 71080000 		.4byte	.LASF107
 2924 0570 01       		.byte	0x1
 2925 0571 28       		.byte	0x28
 2926 0572 00000000 		.4byte	.LFB65
 2927 0576 2C010000 		.4byte	.LFE65-.LFB65
 2928 057a 01       		.uleb128 0x1
 2929 057b 9C       		.byte	0x9c
 2930 057c AB050000 		.4byte	0x5ab
 2931 0580 11       		.uleb128 0x11
 2932 0581 4E070000 		.4byte	.LASF94
 2933 0585 01       		.byte	0x1
 2934 0586 3C       		.byte	0x3c
 2935 0587 AB050000 		.4byte	0x5ab
 2936 058b 02       		.uleb128 0x2
 2937 058c 91       		.byte	0x91
 2938 058d 64       		.sleb128 -28
 2939 058e 11       		.uleb128 0x11
 2940 058f 39080000 		.4byte	.LASF95
 2941 0593 01       		.byte	0x1
 2942 0594 59       		.byte	0x59
 2943 0595 BB050000 		.4byte	0x5bb
 2944 0599 02       		.uleb128 0x2
 2945 059a 91       		.byte	0x91
 2946 059b 58       		.sleb128 -40
 2947 059c 11       		.uleb128 0x11
 2948 059d 6E030000 		.4byte	.LASF96
 2949 05a1 01       		.byte	0x1
 2950 05a2 5E       		.byte	0x5e
 2951 05a3 81000000 		.4byte	0x81
 2952 05a7 02       		.uleb128 0x2
 2953 05a8 91       		.byte	0x91
 2954 05a9 6F       		.sleb128 -17
 2955 05aa 00       		.byte	0
 2956 05ab 07       		.uleb128 0x7
 2957 05ac 99000000 		.4byte	0x99
 2958 05b0 BB050000 		.4byte	0x5bb
 2959 05b4 08       		.uleb128 0x8
 2960 05b5 F1000000 		.4byte	0xf1
 2961 05b9 01       		.byte	0x1
 2962 05ba 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 69


 2963 05bb 07       		.uleb128 0x7
 2964 05bc E3000000 		.4byte	0xe3
 2965 05c0 CB050000 		.4byte	0x5cb
 2966 05c4 08       		.uleb128 0x8
 2967 05c5 F1000000 		.4byte	0xf1
 2968 05c9 09       		.byte	0x9
 2969 05ca 00       		.byte	0
 2970 05cb 12       		.uleb128 0x12
 2971 05cc E7030000 		.4byte	.LASF98
 2972 05d0 01       		.byte	0x1
 2973 05d1 68       		.byte	0x68
 2974 05d2 68000000 		.4byte	0x68
 2975 05d6 00000000 		.4byte	.LFB66
 2976 05da 64000000 		.4byte	.LFE66-.LFB66
 2977 05de 01       		.uleb128 0x1
 2978 05df 9C       		.byte	0x9c
 2979 05e0 F3050000 		.4byte	0x5f3
 2980 05e4 11       		.uleb128 0x11
 2981 05e5 97050000 		.4byte	.LASF97
 2982 05e9 01       		.byte	0x1
 2983 05ea 82       		.byte	0x82
 2984 05eb 81000000 		.4byte	0x81
 2985 05ef 02       		.uleb128 0x2
 2986 05f0 91       		.byte	0x91
 2987 05f1 77       		.sleb128 -9
 2988 05f2 00       		.byte	0
 2989 05f3 13       		.uleb128 0x13
 2990 05f4 81070000 		.4byte	.LASF169
 2991 05f8 01       		.byte	0x1
 2992 05f9 92       		.byte	0x92
 2993 05fa 00000000 		.4byte	.LFB67
 2994 05fe 2A000000 		.4byte	.LFE67-.LFB67
 2995 0602 01       		.uleb128 0x1
 2996 0603 9C       		.byte	0x9c
 2997 0604 14       		.uleb128 0x14
 2998 0605 29030000 		.4byte	.LASF99
 2999 0609 01       		.byte	0x1
 3000 060a B7       		.byte	0xb7
 3001 060b 00000000 		.4byte	.LFB68
 3002 060f 50000000 		.4byte	.LFE68-.LFB68
 3003 0613 01       		.uleb128 0x1
 3004 0614 9C       		.byte	0x9c
 3005 0615 28060000 		.4byte	0x628
 3006 0619 15       		.uleb128 0x15
 3007 061a 71040000 		.4byte	.LASF100
 3008 061e 01       		.byte	0x1
 3009 061f B7       		.byte	0xb7
 3010 0620 81000000 		.4byte	0x81
 3011 0624 02       		.uleb128 0x2
 3012 0625 91       		.byte	0x91
 3013 0626 77       		.sleb128 -9
 3014 0627 00       		.byte	0
 3015 0628 16       		.uleb128 0x16
 3016 0629 66080000 		.4byte	.LASF104
 3017 062d 01       		.byte	0x1
 3018 062e CE       		.byte	0xce
 3019 062f 81000000 		.4byte	0x81
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 70


 3020 0633 00000000 		.4byte	.LFB69
 3021 0637 48000000 		.4byte	.LFE69-.LFB69
 3022 063b 01       		.uleb128 0x1
 3023 063c 9C       		.byte	0x9c
 3024 063d 5E060000 		.4byte	0x65e
 3025 0641 15       		.uleb128 0x15
 3026 0642 9C040000 		.4byte	.LASF101
 3027 0646 01       		.byte	0x1
 3028 0647 CE       		.byte	0xce
 3029 0648 5E060000 		.4byte	0x65e
 3030 064c 02       		.uleb128 0x2
 3031 064d 91       		.byte	0x91
 3032 064e 74       		.sleb128 -12
 3033 064f 15       		.uleb128 0x15
 3034 0650 71040000 		.4byte	.LASF100
 3035 0654 01       		.byte	0x1
 3036 0655 CE       		.byte	0xce
 3037 0656 81000000 		.4byte	0x81
 3038 065a 02       		.uleb128 0x2
 3039 065b 91       		.byte	0x91
 3040 065c 73       		.sleb128 -13
 3041 065d 00       		.byte	0
 3042 065e 06       		.uleb128 0x6
 3043 065f 04       		.byte	0x4
 3044 0660 DC040000 		.4byte	0x4dc
 3045 0664 17       		.uleb128 0x17
 3046 0665 B6040000 		.4byte	.LASF102
 3047 0669 01       		.byte	0x1
 3048 066a E3       		.byte	0xe3
 3049 066b 00000000 		.4byte	.LFB70
 3050 066f 1E000000 		.4byte	.LFE70-.LFB70
 3051 0673 01       		.uleb128 0x1
 3052 0674 9C       		.byte	0x9c
 3053 0675 88060000 		.4byte	0x688
 3054 0679 15       		.uleb128 0x15
 3055 067a 6F060000 		.4byte	.LASF103
 3056 067e 01       		.byte	0x1
 3057 067f E3       		.byte	0xe3
 3058 0680 5E060000 		.4byte	0x65e
 3059 0684 02       		.uleb128 0x2
 3060 0685 91       		.byte	0x91
 3061 0686 74       		.sleb128 -12
 3062 0687 00       		.byte	0
 3063 0688 18       		.uleb128 0x18
 3064 0689 26050000 		.4byte	.LASF105
 3065 068d 01       		.byte	0x1
 3066 068e EC       		.byte	0xec
 3067 068f DC040000 		.4byte	0x4dc
 3068 0693 00000000 		.4byte	.LFB71
 3069 0697 46000000 		.4byte	.LFE71-.LFB71
 3070 069b 01       		.uleb128 0x1
 3071 069c 9C       		.byte	0x9c
 3072 069d DA060000 		.4byte	0x6da
 3073 06a1 15       		.uleb128 0x15
 3074 06a2 A7020000 		.4byte	.LASF83
 3075 06a6 01       		.byte	0x1
 3076 06a7 EC       		.byte	0xec
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 71


 3077 06a8 8D000000 		.4byte	0x8d
 3078 06ac 02       		.uleb128 0x2
 3079 06ad 91       		.byte	0x91
 3080 06ae 6A       		.sleb128 -22
 3081 06af 15       		.uleb128 0x15
 3082 06b0 0C080000 		.4byte	.LASF85
 3083 06b4 01       		.byte	0x1
 3084 06b5 EC       		.byte	0xec
 3085 06b6 81000000 		.4byte	0x81
 3086 06ba 02       		.uleb128 0x2
 3087 06bb 91       		.byte	0x91
 3088 06bc 69       		.sleb128 -23
 3089 06bd 15       		.uleb128 0x15
 3090 06be 51000000 		.4byte	.LASF86
 3091 06c2 01       		.byte	0x1
 3092 06c3 EC       		.byte	0xec
 3093 06c4 81000000 		.4byte	0x81
 3094 06c8 02       		.uleb128 0x2
 3095 06c9 91       		.byte	0x91
 3096 06ca 68       		.sleb128 -24
 3097 06cb 11       		.uleb128 0x11
 3098 06cc AB070000 		.4byte	.LASF106
 3099 06d0 01       		.byte	0x1
 3100 06d1 EF       		.byte	0xef
 3101 06d2 DC040000 		.4byte	0x4dc
 3102 06d6 02       		.uleb128 0x2
 3103 06d7 91       		.byte	0x91
 3104 06d8 70       		.sleb128 -16
 3105 06d9 00       		.byte	0
 3106 06da 19       		.uleb128 0x19
 3107 06db 7E060000 		.4byte	.LASF108
 3108 06df 01       		.byte	0x1
 3109 06e0 0501     		.2byte	0x105
 3110 06e2 00000000 		.4byte	.LFB72
 3111 06e6 2C010000 		.4byte	.LFE72-.LFB72
 3112 06ea 01       		.uleb128 0x1
 3113 06eb 9C       		.byte	0x9c
 3114 06ec 51070000 		.4byte	0x751
 3115 06f0 1A       		.uleb128 0x1a
 3116 06f1 55010000 		.4byte	.LASF109
 3117 06f5 01       		.byte	0x1
 3118 06f6 0D01     		.2byte	0x10d
 3119 06f8 D5010000 		.4byte	0x1d5
 3120 06fc 03       		.uleb128 0x3
 3121 06fd 91       		.byte	0x91
 3122 06fe EC7C     		.sleb128 -404
 3123 0700 1A       		.uleb128 0x1a
 3124 0701 8F080000 		.4byte	.LASF110
 3125 0705 01       		.byte	0x1
 3126 0706 1101     		.2byte	0x111
 3127 0708 D5010000 		.4byte	0x1d5
 3128 070c 03       		.uleb128 0x3
 3129 070d 91       		.byte	0x91
 3130 070e E879     		.sleb128 -792
 3131 0710 1A       		.uleb128 0x1a
 3132 0711 E6070000 		.4byte	.LASF111
 3133 0715 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 72


 3134 0716 1501     		.2byte	0x115
 3135 0718 D5010000 		.4byte	0x1d5
 3136 071c 03       		.uleb128 0x3
 3137 071d 91       		.byte	0x91
 3138 071e E476     		.sleb128 -1180
 3139 0720 1A       		.uleb128 0x1a
 3140 0721 02010000 		.4byte	.LASF112
 3141 0725 01       		.byte	0x1
 3142 0726 1901     		.2byte	0x119
 3143 0728 D5010000 		.4byte	0x1d5
 3144 072c 03       		.uleb128 0x3
 3145 072d 91       		.byte	0x91
 3146 072e E073     		.sleb128 -1568
 3147 0730 1A       		.uleb128 0x1a
 3148 0731 15040000 		.4byte	.LASF113
 3149 0735 01       		.byte	0x1
 3150 0736 1D01     		.2byte	0x11d
 3151 0738 D5010000 		.4byte	0x1d5
 3152 073c 03       		.uleb128 0x3
 3153 073d 91       		.byte	0x91
 3154 073e DC70     		.sleb128 -1956
 3155 0740 1A       		.uleb128 0x1a
 3156 0741 00000000 		.4byte	.LASF114
 3157 0745 01       		.byte	0x1
 3158 0746 2101     		.2byte	0x121
 3159 0748 D5010000 		.4byte	0x1d5
 3160 074c 03       		.uleb128 0x3
 3161 074d 91       		.byte	0x91
 3162 074e D86D     		.sleb128 -2344
 3163 0750 00       		.byte	0
 3164 0751 1B       		.uleb128 0x1b
 3165 0752 7C080000 		.4byte	.LASF170
 3166 0756 01       		.byte	0x1
 3167 0757 2C01     		.2byte	0x12c
 3168 0759 68000000 		.4byte	0x68
 3169 075d 00000000 		.4byte	.LFB73
 3170 0761 1E000000 		.4byte	.LFE73-.LFB73
 3171 0765 01       		.uleb128 0x1
 3172 0766 9C       		.byte	0x9c
 3173 0767 1C       		.uleb128 0x1c
 3174 0768 6E020000 		.4byte	.LASF115
 3175 076c 01       		.byte	0x1
 3176 076d 4201     		.2byte	0x142
 3177 076f 81000000 		.4byte	0x81
 3178 0773 00000000 		.4byte	.LFB74
 3179 0777 5C040000 		.4byte	.LFE74-.LFB74
 3180 077b 01       		.uleb128 0x1
 3181 077c 9C       		.byte	0x9c
 3182 077d C2080000 		.4byte	0x8c2
 3183 0781 1D       		.uleb128 0x1d
 3184 0782 86000000 		.4byte	.LBB2
 3185 0786 A8030000 		.4byte	.LBE2-.LBB2
 3186 078a 1A       		.uleb128 0x1a
 3187 078b 39050000 		.4byte	.LASF116
 3188 078f 01       		.byte	0x1
 3189 0790 7701     		.2byte	0x177
 3190 0792 85030000 		.4byte	0x385
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 73


 3191 0796 03       		.uleb128 0x3
 3192 0797 91       		.byte	0x91
 3193 0798 AC7F     		.sleb128 -84
 3194 079a 1A       		.uleb128 0x1a
 3195 079b 46020000 		.4byte	.LASF117
 3196 079f 01       		.byte	0x1
 3197 07a0 7C01     		.2byte	0x17c
 3198 07a2 85030000 		.4byte	0x385
 3199 07a6 03       		.uleb128 0x3
 3200 07a7 91       		.byte	0x91
 3201 07a8 987F     		.sleb128 -104
 3202 07aa 1A       		.uleb128 0x1a
 3203 07ab 7A030000 		.4byte	.LASF118
 3204 07af 01       		.byte	0x1
 3205 07b0 8F01     		.2byte	0x18f
 3206 07b2 8D000000 		.4byte	0x8d
 3207 07b6 02       		.uleb128 0x2
 3208 07b7 91       		.byte	0x91
 3209 07b8 66       		.sleb128 -26
 3210 07b9 1A       		.uleb128 0x1a
 3211 07ba 00040000 		.4byte	.LASF119
 3212 07be 01       		.byte	0x1
 3213 07bf 9001     		.2byte	0x190
 3214 07c1 85030000 		.4byte	0x385
 3215 07c5 03       		.uleb128 0x3
 3216 07c6 91       		.byte	0x91
 3217 07c7 847F     		.sleb128 -124
 3218 07c9 1A       		.uleb128 0x1a
 3219 07ca 39070000 		.4byte	.LASF120
 3220 07ce 01       		.byte	0x1
 3221 07cf A501     		.2byte	0x1a5
 3222 07d1 C2080000 		.4byte	0x8c2
 3223 07d5 03       		.uleb128 0x3
 3224 07d6 91       		.byte	0x91
 3225 07d7 9C75     		.sleb128 -1380
 3226 07d9 1A       		.uleb128 0x1a
 3227 07da C6070000 		.4byte	.LASF31
 3228 07de 01       		.byte	0x1
 3229 07df A601     		.2byte	0x1a6
 3230 07e1 81000000 		.4byte	0x81
 3231 07e5 02       		.uleb128 0x2
 3232 07e6 91       		.byte	0x91
 3233 07e7 65       		.sleb128 -27
 3234 07e8 1A       		.uleb128 0x1a
 3235 07e9 F3060000 		.4byte	.LASF121
 3236 07ed 01       		.byte	0x1
 3237 07ee AD01     		.2byte	0x1ad
 3238 07f0 F8000000 		.4byte	0xf8
 3239 07f4 02       		.uleb128 0x2
 3240 07f5 91       		.byte	0x91
 3241 07f6 6C       		.sleb128 -20
 3242 07f7 1A       		.uleb128 0x1a
 3243 07f8 72010000 		.4byte	.LASF122
 3244 07fc 01       		.byte	0x1
 3245 07fd B101     		.2byte	0x1b1
 3246 07ff A5000000 		.4byte	0xa5
 3247 0803 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 74


 3248 0804 91       		.byte	0x91
 3249 0805 64       		.sleb128 -28
 3250 0806 1A       		.uleb128 0x1a
 3251 0807 77020000 		.4byte	.LASF123
 3252 080b 01       		.byte	0x1
 3253 080c E201     		.2byte	0x1e2
 3254 080e 4C000000 		.4byte	0x4c
 3255 0812 02       		.uleb128 0x2
 3256 0813 91       		.byte	0x91
 3257 0814 5C       		.sleb128 -36
 3258 0815 1E       		.uleb128 0x1e
 3259 0816 F2000000 		.4byte	.LBB3
 3260 081a 2C000000 		.4byte	.LBE3-.LBB3
 3261 081e 42080000 		.4byte	0x842
 3262 0822 1A       		.uleb128 0x1a
 3263 0823 AA060000 		.4byte	.LASF124
 3264 0827 01       		.byte	0x1
 3265 0828 8401     		.2byte	0x184
 3266 082a 8D000000 		.4byte	0x8d
 3267 082e 02       		.uleb128 0x2
 3268 082f 91       		.byte	0x91
 3269 0830 68       		.sleb128 -24
 3270 0831 1A       		.uleb128 0x1a
 3271 0832 E4010000 		.4byte	.LASF125
 3272 0836 01       		.byte	0x1
 3273 0837 8501     		.2byte	0x185
 3274 0839 85030000 		.4byte	0x385
 3275 083d 03       		.uleb128 0x3
 3276 083e 91       		.byte	0x91
 3277 083f F07E     		.sleb128 -144
 3278 0841 00       		.byte	0
 3279 0842 1E       		.uleb128 0x1e
 3280 0843 20010000 		.4byte	.LBB4
 3281 0847 20000000 		.4byte	.LBE4-.LBB4
 3282 084b 60080000 		.4byte	0x860
 3283 084f 1A       		.uleb128 0x1a
 3284 0850 E4010000 		.4byte	.LASF125
 3285 0854 01       		.byte	0x1
 3286 0855 8901     		.2byte	0x189
 3287 0857 85030000 		.4byte	0x385
 3288 085b 03       		.uleb128 0x3
 3289 085c 91       		.byte	0x91
 3290 085d DC7E     		.sleb128 -164
 3291 085f 00       		.byte	0
 3292 0860 1E       		.uleb128 0x1e
 3293 0861 60020000 		.4byte	.LBB5
 3294 0865 4E010000 		.4byte	.LBE5-.LBB5
 3295 0869 97080000 		.4byte	0x897
 3296 086d 1A       		.uleb128 0x1a
 3297 086e 32050000 		.4byte	.LASF126
 3298 0872 01       		.byte	0x1
 3299 0873 B601     		.2byte	0x1b6
 3300 0875 A5000000 		.4byte	0xa5
 3301 0879 02       		.uleb128 0x2
 3302 087a 91       		.byte	0x91
 3303 087b 6B       		.sleb128 -21
 3304 087c 1D       		.uleb128 0x1d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 75


 3305 087d 68020000 		.4byte	.LBB6
 3306 0881 2A010000 		.4byte	.LBE6-.LBB6
 3307 0885 1A       		.uleb128 0x1a
 3308 0886 47030000 		.4byte	.LASF127
 3309 088a 01       		.byte	0x1
 3310 088b B801     		.2byte	0x1b8
 3311 088d D2080000 		.4byte	0x8d2
 3312 0891 03       		.uleb128 0x3
 3313 0892 91       		.byte	0x91
 3314 0893 E476     		.sleb128 -1180
 3315 0895 00       		.byte	0
 3316 0896 00       		.byte	0
 3317 0897 1D       		.uleb128 0x1d
 3318 0898 C8030000 		.4byte	.LBB7
 3319 089c 36000000 		.4byte	.LBE7-.LBB7
 3320 08a0 1A       		.uleb128 0x1a
 3321 08a1 54020000 		.4byte	.LASF128
 3322 08a5 01       		.byte	0x1
 3323 08a6 D901     		.2byte	0x1d9
 3324 08a8 68000000 		.4byte	0x68
 3325 08ac 02       		.uleb128 0x2
 3326 08ad 91       		.byte	0x91
 3327 08ae 60       		.sleb128 -32
 3328 08af 1A       		.uleb128 0x1a
 3329 08b0 1C060000 		.4byte	.LASF129
 3330 08b4 01       		.byte	0x1
 3331 08b5 DA01     		.2byte	0x1da
 3332 08b7 BB050000 		.4byte	0x5bb
 3333 08bb 03       		.uleb128 0x3
 3334 08bc 91       		.byte	0x91
 3335 08bd D07E     		.sleb128 -176
 3336 08bf 00       		.byte	0
 3337 08c0 00       		.byte	0
 3338 08c1 00       		.byte	0
 3339 08c2 07       		.uleb128 0x7
 3340 08c3 E3000000 		.4byte	0xe3
 3341 08c7 D2080000 		.4byte	0x8d2
 3342 08cb 08       		.uleb128 0x8
 3343 08cc F1000000 		.4byte	0xf1
 3344 08d0 C7       		.byte	0xc7
 3345 08d1 00       		.byte	0
 3346 08d2 07       		.uleb128 0x7
 3347 08d3 E3000000 		.4byte	0xe3
 3348 08d7 E3080000 		.4byte	0x8e3
 3349 08db 1F       		.uleb128 0x1f
 3350 08dc F1000000 		.4byte	0xf1
 3351 08e0 E803     		.2byte	0x3e8
 3352 08e2 00       		.byte	0
 3353 08e3 1C       		.uleb128 0x1c
 3354 08e4 73050000 		.4byte	.LASF130
 3355 08e8 01       		.byte	0x1
 3356 08e9 F701     		.2byte	0x1f7
 3357 08eb 81000000 		.4byte	0x81
 3358 08ef 00000000 		.4byte	.LFB75
 3359 08f3 44000000 		.4byte	.LFE75-.LFB75
 3360 08f7 01       		.uleb128 0x1
 3361 08f8 9C       		.byte	0x9c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 76


 3362 08f9 17090000 		.4byte	0x917
 3363 08fd 1D       		.uleb128 0x1d
 3364 08fe 20000000 		.4byte	.LBB8
 3365 0902 1A000000 		.4byte	.LBE8-.LBB8
 3366 0906 1A       		.uleb128 0x1a
 3367 0907 77020000 		.4byte	.LASF123
 3368 090b 01       		.byte	0x1
 3369 090c 0202     		.2byte	0x202
 3370 090e 4C000000 		.4byte	0x4c
 3371 0912 02       		.uleb128 0x2
 3372 0913 91       		.byte	0x91
 3373 0914 74       		.sleb128 -12
 3374 0915 00       		.byte	0
 3375 0916 00       		.byte	0
 3376 0917 1C       		.uleb128 0x1c
 3377 0918 A8030000 		.4byte	.LASF131
 3378 091c 01       		.byte	0x1
 3379 091d 1702     		.2byte	0x217
 3380 091f 81000000 		.4byte	0x81
 3381 0923 00000000 		.4byte	.LFB76
 3382 0927 80030000 		.4byte	.LFE76-.LFB76
 3383 092b 01       		.uleb128 0x1
 3384 092c 9C       		.byte	0x9c
 3385 092d D5090000 		.4byte	0x9d5
 3386 0931 1A       		.uleb128 0x1a
 3387 0932 F9040000 		.4byte	.LASF62
 3388 0936 01       		.byte	0x1
 3389 0937 1A02     		.2byte	0x21a
 3390 0939 4C000000 		.4byte	0x4c
 3391 093d 02       		.uleb128 0x2
 3392 093e 91       		.byte	0x91
 3393 093f 6C       		.sleb128 -20
 3394 0940 1A       		.uleb128 0x1a
 3395 0941 F9060000 		.4byte	.LASF132
 3396 0945 01       		.byte	0x1
 3397 0946 1B02     		.2byte	0x21b
 3398 0948 D5090000 		.4byte	0x9d5
 3399 094c 02       		.uleb128 0x2
 3400 094d 91       		.byte	0x91
 3401 094e 48       		.sleb128 -56
 3402 094f 1A       		.uleb128 0x1a
 3403 0950 D7020000 		.4byte	.LASF61
 3404 0954 01       		.byte	0x1
 3405 0955 1F02     		.2byte	0x21f
 3406 0957 85030000 		.4byte	0x385
 3407 095b 03       		.uleb128 0x3
 3408 095c 91       		.byte	0x91
 3409 095d B47F     		.sleb128 -76
 3410 095f 1A       		.uleb128 0x1a
 3411 0960 52030000 		.4byte	.LASF133
 3412 0964 01       		.byte	0x1
 3413 0965 3D02     		.2byte	0x23d
 3414 0967 91020000 		.4byte	0x291
 3415 096b 03       		.uleb128 0x3
 3416 096c 91       		.byte	0x91
 3417 096d 987F     		.sleb128 -104
 3418 096f 1E       		.uleb128 0x1e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 77


 3419 0970 26000000 		.4byte	.LBB9
 3420 0974 7A000000 		.4byte	.LBE9-.LBB9
 3421 0978 8D090000 		.4byte	0x98d
 3422 097c 1A       		.uleb128 0x1a
 3423 097d 64070000 		.4byte	.LASF134
 3424 0981 01       		.byte	0x1
 3425 0982 2502     		.2byte	0x225
 3426 0984 29020000 		.4byte	0x229
 3427 0988 03       		.uleb128 0x3
 3428 0989 91       		.byte	0x91
 3429 098a FC7E     		.sleb128 -132
 3430 098c 00       		.byte	0
 3431 098d 1E       		.uleb128 0x1e
 3432 098e 26010000 		.4byte	.LBB10
 3433 0992 F2000000 		.4byte	.LBE10-.LBB10
 3434 0996 AB090000 		.4byte	0x9ab
 3435 099a 1A       		.uleb128 0x1a
 3436 099b BB070000 		.4byte	.LASF135
 3437 099f 01       		.byte	0x1
 3438 09a0 5802     		.2byte	0x258
 3439 09a2 D5020000 		.4byte	0x2d5
 3440 09a6 03       		.uleb128 0x3
 3441 09a7 91       		.byte	0x91
 3442 09a8 EC7E     		.sleb128 -148
 3443 09aa 00       		.byte	0
 3444 09ab 1D       		.uleb128 0x1d
 3445 09ac 28020000 		.4byte	.LBB11
 3446 09b0 E8000000 		.4byte	.LBE11-.LBB11
 3447 09b4 1A       		.uleb128 0x1a
 3448 09b5 64070000 		.4byte	.LASF134
 3449 09b9 01       		.byte	0x1
 3450 09ba 7B02     		.2byte	0x27b
 3451 09bc 29020000 		.4byte	0x229
 3452 09c0 03       		.uleb128 0x3
 3453 09c1 91       		.byte	0x91
 3454 09c2 D07E     		.sleb128 -176
 3455 09c4 1A       		.uleb128 0x1a
 3456 09c5 29040000 		.4byte	.LASF136
 3457 09c9 01       		.byte	0x1
 3458 09ca 9002     		.2byte	0x290
 3459 09cc C9000000 		.4byte	0xc9
 3460 09d0 02       		.uleb128 0x2
 3461 09d1 91       		.byte	0x91
 3462 09d2 68       		.sleb128 -24
 3463 09d3 00       		.byte	0
 3464 09d4 00       		.byte	0
 3465 09d5 07       		.uleb128 0x7
 3466 09d6 E3000000 		.4byte	0xe3
 3467 09da E5090000 		.4byte	0x9e5
 3468 09de 08       		.uleb128 0x8
 3469 09df F1000000 		.4byte	0xf1
 3470 09e3 1F       		.byte	0x1f
 3471 09e4 00       		.byte	0
 3472 09e5 20       		.uleb128 0x20
 3473 09e6 15030000 		.4byte	.LASF137
 3474 09ea 01       		.byte	0x1
 3475 09eb A802     		.2byte	0x2a8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 78


 3476 09ed 81000000 		.4byte	0x81
 3477 09f1 00000000 		.4byte	.LFB77
 3478 09f5 74000000 		.4byte	.LFE77-.LFB77
 3479 09f9 01       		.uleb128 0x1
 3480 09fa 9C       		.byte	0x9c
 3481 09fb 2B0A0000 		.4byte	0xa2b
 3482 09ff 21       		.uleb128 0x21
 3483 0a00 F9040000 		.4byte	.LASF62
 3484 0a04 01       		.byte	0x1
 3485 0a05 A802     		.2byte	0x2a8
 3486 0a07 4C000000 		.4byte	0x4c
 3487 0a0b 02       		.uleb128 0x2
 3488 0a0c 91       		.byte	0x91
 3489 0a0d 64       		.sleb128 -28
 3490 0a0e 22       		.uleb128 0x22
 3491 0a0f 7400     		.ascii	"t\000"
 3492 0a11 01       		.byte	0x1
 3493 0a12 AF02     		.2byte	0x2af
 3494 0a14 2B0A0000 		.4byte	0xa2b
 3495 0a18 02       		.uleb128 0x2
 3496 0a19 91       		.byte	0x91
 3497 0a1a 74       		.sleb128 -12
 3498 0a1b 1A       		.uleb128 0x1a
 3499 0a1c D8040000 		.4byte	.LASF138
 3500 0a20 01       		.byte	0x1
 3501 0a21 B402     		.2byte	0x2b4
 3502 0a23 77010000 		.4byte	0x177
 3503 0a27 02       		.uleb128 0x2
 3504 0a28 91       		.byte	0x91
 3505 0a29 68       		.sleb128 -24
 3506 0a2a 00       		.byte	0
 3507 0a2b 06       		.uleb128 0x6
 3508 0a2c 04       		.byte	0x4
 3509 0a2d E0020000 		.4byte	0x2e0
 3510 0a31 20       		.uleb128 0x20
 3511 0a32 B6020000 		.4byte	.LASF139
 3512 0a36 01       		.byte	0x1
 3513 0a37 D102     		.2byte	0x2d1
 3514 0a39 81000000 		.4byte	0x81
 3515 0a3d 00000000 		.4byte	.LFB78
 3516 0a41 38010000 		.4byte	.LFE78-.LFB78
 3517 0a45 01       		.uleb128 0x1
 3518 0a46 9C       		.byte	0x9c
 3519 0a47 AA0A0000 		.4byte	0xaaa
 3520 0a4b 21       		.uleb128 0x21
 3521 0a4c DD020000 		.4byte	.LASF140
 3522 0a50 01       		.byte	0x1
 3523 0a51 D102     		.2byte	0x2d1
 3524 0a53 F8000000 		.4byte	0xf8
 3525 0a57 03       		.uleb128 0x3
 3526 0a58 91       		.byte	0x91
 3527 0a59 9C7E     		.sleb128 -228
 3528 0a5b 21       		.uleb128 0x21
 3529 0a5c D2020000 		.4byte	.LASF141
 3530 0a60 01       		.byte	0x1
 3531 0a61 D102     		.2byte	0x2d1
 3532 0a63 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 79


 3533 0a67 03       		.uleb128 0x3
 3534 0a68 91       		.byte	0x91
 3535 0a69 987E     		.sleb128 -232
 3536 0a6b 21       		.uleb128 0x21
 3537 0a6c CF050000 		.4byte	.LASF142
 3538 0a70 01       		.byte	0x1
 3539 0a71 D102     		.2byte	0x2d1
 3540 0a73 F8000000 		.4byte	0xf8
 3541 0a77 03       		.uleb128 0x3
 3542 0a78 91       		.byte	0x91
 3543 0a79 947E     		.sleb128 -236
 3544 0a7b 1A       		.uleb128 0x1a
 3545 0a7c D5010000 		.4byte	.LASF143
 3546 0a80 01       		.byte	0x1
 3547 0a81 D302     		.2byte	0x2d3
 3548 0a83 81000000 		.4byte	0x81
 3549 0a87 02       		.uleb128 0x2
 3550 0a88 91       		.byte	0x91
 3551 0a89 77       		.sleb128 -9
 3552 0a8a 1A       		.uleb128 0x1a
 3553 0a8b 3C000000 		.4byte	.LASF144
 3554 0a8f 01       		.byte	0x1
 3555 0a90 DA02     		.2byte	0x2da
 3556 0a92 AA0A0000 		.4byte	0xaaa
 3557 0a96 02       		.uleb128 0x2
 3558 0a97 91       		.byte	0x91
 3559 0a98 68       		.sleb128 -24
 3560 0a99 1A       		.uleb128 0x1a
 3561 0a9a 39070000 		.4byte	.LASF120
 3562 0a9e 01       		.byte	0x1
 3563 0a9f E202     		.2byte	0x2e2
 3564 0aa1 C2080000 		.4byte	0x8c2
 3565 0aa5 03       		.uleb128 0x3
 3566 0aa6 91       		.byte	0x91
 3567 0aa7 A07E     		.sleb128 -224
 3568 0aa9 00       		.byte	0
 3569 0aaa 07       		.uleb128 0x7
 3570 0aab E3000000 		.4byte	0xe3
 3571 0aaf BA0A0000 		.4byte	0xaba
 3572 0ab3 08       		.uleb128 0x8
 3573 0ab4 F1000000 		.4byte	0xf1
 3574 0ab8 0B       		.byte	0xb
 3575 0ab9 00       		.byte	0
 3576 0aba 23       		.uleb128 0x23
 3577 0abb 48010000 		.4byte	.LASF145
 3578 0abf 0D       		.byte	0xd
 3579 0ac0 1207     		.2byte	0x712
 3580 0ac2 C60A0000 		.4byte	0xac6
 3581 0ac6 0C       		.uleb128 0xc
 3582 0ac7 76000000 		.4byte	0x76
 3583 0acb 24       		.uleb128 0x24
 3584 0acc 2C000000 		.4byte	.LASF146
 3585 0ad0 0A       		.byte	0xa
 3586 0ad1 11       		.byte	0x11
 3587 0ad2 91040000 		.4byte	0x491
 3588 0ad6 05       		.uleb128 0x5
 3589 0ad7 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 80


 3590 0ad8 00000000 		.4byte	buffer_overflow
 3591 0adc 24       		.uleb128 0x24
 3592 0add 7B040000 		.4byte	.LASF147
 3593 0ae1 0A       		.byte	0xa
 3594 0ae2 22       		.byte	0x22
 3595 0ae3 8D000000 		.4byte	0x8d
 3596 0ae7 05       		.uleb128 0x5
 3597 0ae8 03       		.byte	0x3
 3598 0ae9 00000000 		.4byte	dataPointsInStack
 3599 0aed 24       		.uleb128 0x24
 3600 0aee CD070000 		.4byte	.LASF148
 3601 0af2 0A       		.byte	0xa
 3602 0af3 23       		.byte	0x23
 3603 0af4 8D000000 		.4byte	0x8d
 3604 0af8 05       		.uleb128 0x5
 3605 0af9 03       		.byte	0x3
 3606 0afa 00000000 		.4byte	dataPointsInStackDesired
 3607 0afe 07       		.uleb128 0x7
 3608 0aff 95030000 		.4byte	0x395
 3609 0b03 0E0B0000 		.4byte	0xb0e
 3610 0b07 08       		.uleb128 0x8
 3611 0b08 F1000000 		.4byte	0xf1
 3612 0b0c 95       		.byte	0x95
 3613 0b0d 00       		.byte	0
 3614 0b0e 24       		.uleb128 0x24
 3615 0b0f B9030000 		.4byte	.LASF149
 3616 0b13 0A       		.byte	0xa
 3617 0b14 24       		.byte	0x24
 3618 0b15 FE0A0000 		.4byte	0xafe
 3619 0b19 05       		.uleb128 0x5
 3620 0b1a 03       		.byte	0x3
 3621 0b1b 00000000 		.4byte	data
 3622 0b1f 24       		.uleb128 0x24
 3623 0b20 2F010000 		.4byte	.LASF150
 3624 0b24 0B       		.byte	0xb
 3625 0b25 21       		.byte	0x21
 3626 0b26 81000000 		.4byte	0x81
 3627 0b2a 05       		.uleb128 0x5
 3628 0b2b 03       		.byte	0x3
 3629 0b2c 00000000 		.4byte	modem_state
 3630 0b30 24       		.uleb128 0x24
 3631 0b31 38040000 		.4byte	.LASF151
 3632 0b35 0B       		.byte	0xb
 3633 0b36 64       		.byte	0x64
 3634 0b37 BD000000 		.4byte	0xbd
 3635 0b3b 05       		.uleb128 0x5
 3636 0b3c 03       		.byte	0x3
 3637 0b3d 00000000 		.4byte	modem_start_time_stamp
 3638 0b41 24       		.uleb128 0x24
 3639 0b42 CF030000 		.4byte	.LASF88
 3640 0b46 0B       		.byte	0xb
 3641 0b47 65       		.byte	0x65
 3642 0b48 CD030000 		.4byte	0x3cd
 3643 0b4c 05       		.uleb128 0x5
 3644 0b4d 03       		.byte	0x3
 3645 0b4e 00000000 		.4byte	modem_info
 3646 0b52 24       		.uleb128 0x24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 81


 3647 0b53 22070000 		.4byte	.LASF152
 3648 0b57 0B       		.byte	0xb
 3649 0b58 66       		.byte	0x66
 3650 0b59 41040000 		.4byte	0x441
 3651 0b5d 05       		.uleb128 0x5
 3652 0b5e 03       		.byte	0x3
 3653 0b5f 00000000 		.4byte	modem_stats
 3654 0b63 24       		.uleb128 0x24
 3655 0b64 11050000 		.4byte	.LASF153
 3656 0b68 0B       		.byte	0xb
 3657 0b69 67       		.byte	0x67
 3658 0b6a 98040000 		.4byte	0x498
 3659 0b6e 05       		.uleb128 0x5
 3660 0b6f 03       		.byte	0x3
 3661 0b70 00000000 		.4byte	updatable_parameters
 3662 0b74 07       		.uleb128 0x7
 3663 0b75 E3000000 		.4byte	0xe3
 3664 0b79 850B0000 		.4byte	0xb85
 3665 0b7d 1F       		.uleb128 0x1f
 3666 0b7e F1000000 		.4byte	0xf1
 3667 0b82 0F27     		.2byte	0x270f
 3668 0b84 00       		.byte	0
 3669 0b85 24       		.uleb128 0x24
 3670 0b86 51050000 		.4byte	.LASF154
 3671 0b8a 0C       		.byte	0xc
 3672 0b8b 18       		.byte	0x18
 3673 0b8c 740B0000 		.4byte	0xb74
 3674 0b90 05       		.uleb128 0x5
 3675 0b91 03       		.byte	0x3
 3676 0b92 00000000 		.4byte	http_request
 3677 0b96 24       		.uleb128 0x24
 3678 0b97 FC070000 		.4byte	.LASF155
 3679 0b9b 0C       		.byte	0xc
 3680 0b9c 19       		.byte	0x19
 3681 0b9d 740B0000 		.4byte	0xb74
 3682 0ba1 05       		.uleb128 0x5
 3683 0ba2 03       		.byte	0x3
 3684 0ba3 00000000 		.4byte	http_body
 3685 0ba7 24       		.uleb128 0x24
 3686 0ba8 2E070000 		.4byte	.LASF156
 3687 0bac 0C       		.byte	0xc
 3688 0bad 1A       		.byte	0x1a
 3689 0bae C2080000 		.4byte	0x8c2
 3690 0bb2 05       		.uleb128 0x5
 3691 0bb3 03       		.byte	0x3
 3692 0bb4 00000000 		.4byte	http_route
 3693 0bb8 24       		.uleb128 0x24
 3694 0bb9 57060000 		.4byte	.LASF157
 3695 0bbd 0C       		.byte	0xc
 3696 0bbe 41       		.byte	0x41
 3697 0bbf 13050000 		.4byte	0x513
 3698 0bc3 05       		.uleb128 0x5
 3699 0bc4 03       		.byte	0x3
 3700 0bc5 00000000 		.4byte	system_info
 3701 0bc9 24       		.uleb128 0x24
 3702 0bca D5050000 		.4byte	.LASF158
 3703 0bce 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 82


 3704 0bcf 53       		.byte	0x53
 3705 0bd0 4F050000 		.4byte	0x54f
 3706 0bd4 05       		.uleb128 0x5
 3707 0bd5 03       		.byte	0x3
 3708 0bd6 00000000 		.4byte	system_settings
 3709 0bda 24       		.uleb128 0x24
 3710 0bdb 3B010000 		.4byte	.LASF159
 3711 0bdf 0C       		.byte	0xc
 3712 0be0 6F       		.byte	0x6f
 3713 0be1 DC040000 		.4byte	0x4dc
 3714 0be5 05       		.uleb128 0x5
 3715 0be6 03       		.byte	0x3
 3716 0be7 00000000 		.4byte	alarmMeasure
 3717 0beb 24       		.uleb128 0x24
 3718 0bec 7F010000 		.4byte	.LASF160
 3719 0bf0 0C       		.byte	0xc
 3720 0bf1 70       		.byte	0x70
 3721 0bf2 81000000 		.4byte	0x81
 3722 0bf6 05       		.uleb128 0x5
 3723 0bf7 03       		.byte	0x3
 3724 0bf8 00000000 		.4byte	timeToMeasure
 3725 0bfc 24       		.uleb128 0x24
 3726 0bfd EA020000 		.4byte	.LASF161
 3727 0c01 0C       		.byte	0xc
 3728 0c02 71       		.byte	0x71
 3729 0c03 DC040000 		.4byte	0x4dc
 3730 0c07 05       		.uleb128 0x5
 3731 0c08 03       		.byte	0x3
 3732 0c09 00000000 		.4byte	alarmSync
 3733 0c0d 24       		.uleb128 0x24
 3734 0c0e A5010000 		.4byte	.LASF162
 3735 0c12 0C       		.byte	0xc
 3736 0c13 72       		.byte	0x72
 3737 0c14 81000000 		.4byte	0x81
 3738 0c18 05       		.uleb128 0x5
 3739 0c19 03       		.byte	0x3
 3740 0c1a 00000000 		.4byte	timeToSync
 3741 0c1e 24       		.uleb128 0x24
 3742 0c1f E2040000 		.4byte	.LASF163
 3743 0c23 0C       		.byte	0xc
 3744 0c24 73       		.byte	0x73
 3745 0c25 81000000 		.4byte	0x81
 3746 0c29 05       		.uleb128 0x5
 3747 0c2a 03       		.byte	0x3
 3748 0c2b 00000000 		.4byte	timeToSycnRemoteParams
 3749 0c2f 25       		.uleb128 0x25
 3750 0c30 68657900 		.ascii	"hey\000"
 3751 0c34 0C       		.byte	0xc
 3752 0c35 74       		.byte	0x74
 3753 0c36 81000000 		.4byte	0x81
 3754 0c3a 05       		.uleb128 0x5
 3755 0c3b 03       		.byte	0x3
 3756 0c3c 00000000 		.4byte	hey
 3757 0c40 07       		.uleb128 0x7
 3758 0c41 E3000000 		.4byte	0xe3
 3759 0c45 500C0000 		.4byte	0xc50
 3760 0c49 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 83


 3761 0c4a F1000000 		.4byte	0xf1
 3762 0c4e 1D       		.byte	0x1d
 3763 0c4f 00       		.byte	0
 3764 0c50 24       		.uleb128 0x24
 3765 0c51 89050000 		.4byte	.LASF164
 3766 0c55 01       		.byte	0x1
 3767 0c56 1D       		.byte	0x1d
 3768 0c57 400C0000 		.4byte	0xc40
 3769 0c5b 05       		.uleb128 0x5
 3770 0c5c 03       		.byte	0x3
 3771 0c5d 00000000 		.4byte	Data_fileName
 3772 0c61 24       		.uleb128 0x24
 3773 0c62 6E030000 		.4byte	.LASF96
 3774 0c66 01       		.byte	0x1
 3775 0c67 1E       		.byte	0x1e
 3776 0c68 81000000 		.4byte	0x81
 3777 0c6c 05       		.uleb128 0x5
 3778 0c6d 03       		.byte	0x3
 3779 0c6e 00000000 		.4byte	try_counter
 3780 0c72 00       		.byte	0
 3781              		.section	.debug_abbrev,"",%progbits
 3782              	.Ldebug_abbrev0:
 3783 0000 01       		.uleb128 0x1
 3784 0001 11       		.uleb128 0x11
 3785 0002 01       		.byte	0x1
 3786 0003 25       		.uleb128 0x25
 3787 0004 0E       		.uleb128 0xe
 3788 0005 13       		.uleb128 0x13
 3789 0006 0B       		.uleb128 0xb
 3790 0007 03       		.uleb128 0x3
 3791 0008 0E       		.uleb128 0xe
 3792 0009 1B       		.uleb128 0x1b
 3793 000a 0E       		.uleb128 0xe
 3794 000b 55       		.uleb128 0x55
 3795 000c 17       		.uleb128 0x17
 3796 000d 11       		.uleb128 0x11
 3797 000e 01       		.uleb128 0x1
 3798 000f 10       		.uleb128 0x10
 3799 0010 17       		.uleb128 0x17
 3800 0011 00       		.byte	0
 3801 0012 00       		.byte	0
 3802 0013 02       		.uleb128 0x2
 3803 0014 24       		.uleb128 0x24
 3804 0015 00       		.byte	0
 3805 0016 0B       		.uleb128 0xb
 3806 0017 0B       		.uleb128 0xb
 3807 0018 3E       		.uleb128 0x3e
 3808 0019 0B       		.uleb128 0xb
 3809 001a 03       		.uleb128 0x3
 3810 001b 0E       		.uleb128 0xe
 3811 001c 00       		.byte	0
 3812 001d 00       		.byte	0
 3813 001e 03       		.uleb128 0x3
 3814 001f 16       		.uleb128 0x16
 3815 0020 00       		.byte	0
 3816 0021 03       		.uleb128 0x3
 3817 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 84


 3818 0023 3A       		.uleb128 0x3a
 3819 0024 0B       		.uleb128 0xb
 3820 0025 3B       		.uleb128 0x3b
 3821 0026 0B       		.uleb128 0xb
 3822 0027 49       		.uleb128 0x49
 3823 0028 13       		.uleb128 0x13
 3824 0029 00       		.byte	0
 3825 002a 00       		.byte	0
 3826 002b 04       		.uleb128 0x4
 3827 002c 24       		.uleb128 0x24
 3828 002d 00       		.byte	0
 3829 002e 0B       		.uleb128 0xb
 3830 002f 0B       		.uleb128 0xb
 3831 0030 3E       		.uleb128 0x3e
 3832 0031 0B       		.uleb128 0xb
 3833 0032 03       		.uleb128 0x3
 3834 0033 08       		.uleb128 0x8
 3835 0034 00       		.byte	0
 3836 0035 00       		.byte	0
 3837 0036 05       		.uleb128 0x5
 3838 0037 16       		.uleb128 0x16
 3839 0038 00       		.byte	0
 3840 0039 03       		.uleb128 0x3
 3841 003a 0E       		.uleb128 0xe
 3842 003b 3A       		.uleb128 0x3a
 3843 003c 0B       		.uleb128 0xb
 3844 003d 3B       		.uleb128 0x3b
 3845 003e 05       		.uleb128 0x5
 3846 003f 49       		.uleb128 0x49
 3847 0040 13       		.uleb128 0x13
 3848 0041 00       		.byte	0
 3849 0042 00       		.byte	0
 3850 0043 06       		.uleb128 0x6
 3851 0044 0F       		.uleb128 0xf
 3852 0045 00       		.byte	0
 3853 0046 0B       		.uleb128 0xb
 3854 0047 0B       		.uleb128 0xb
 3855 0048 49       		.uleb128 0x49
 3856 0049 13       		.uleb128 0x13
 3857 004a 00       		.byte	0
 3858 004b 00       		.byte	0
 3859 004c 07       		.uleb128 0x7
 3860 004d 01       		.uleb128 0x1
 3861 004e 01       		.byte	0x1
 3862 004f 49       		.uleb128 0x49
 3863 0050 13       		.uleb128 0x13
 3864 0051 01       		.uleb128 0x1
 3865 0052 13       		.uleb128 0x13
 3866 0053 00       		.byte	0
 3867 0054 00       		.byte	0
 3868 0055 08       		.uleb128 0x8
 3869 0056 21       		.uleb128 0x21
 3870 0057 00       		.byte	0
 3871 0058 49       		.uleb128 0x49
 3872 0059 13       		.uleb128 0x13
 3873 005a 2F       		.uleb128 0x2f
 3874 005b 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 85


 3875 005c 00       		.byte	0
 3876 005d 00       		.byte	0
 3877 005e 09       		.uleb128 0x9
 3878 005f 13       		.uleb128 0x13
 3879 0060 01       		.byte	0x1
 3880 0061 0B       		.uleb128 0xb
 3881 0062 0B       		.uleb128 0xb
 3882 0063 3A       		.uleb128 0x3a
 3883 0064 0B       		.uleb128 0xb
 3884 0065 3B       		.uleb128 0x3b
 3885 0066 0B       		.uleb128 0xb
 3886 0067 01       		.uleb128 0x1
 3887 0068 13       		.uleb128 0x13
 3888 0069 00       		.byte	0
 3889 006a 00       		.byte	0
 3890 006b 0A       		.uleb128 0xa
 3891 006c 0D       		.uleb128 0xd
 3892 006d 00       		.byte	0
 3893 006e 03       		.uleb128 0x3
 3894 006f 08       		.uleb128 0x8
 3895 0070 3A       		.uleb128 0x3a
 3896 0071 0B       		.uleb128 0xb
 3897 0072 3B       		.uleb128 0x3b
 3898 0073 0B       		.uleb128 0xb
 3899 0074 49       		.uleb128 0x49
 3900 0075 13       		.uleb128 0x13
 3901 0076 38       		.uleb128 0x38
 3902 0077 0B       		.uleb128 0xb
 3903 0078 00       		.byte	0
 3904 0079 00       		.byte	0
 3905 007a 0B       		.uleb128 0xb
 3906 007b 0D       		.uleb128 0xd
 3907 007c 00       		.byte	0
 3908 007d 03       		.uleb128 0x3
 3909 007e 0E       		.uleb128 0xe
 3910 007f 3A       		.uleb128 0x3a
 3911 0080 0B       		.uleb128 0xb
 3912 0081 3B       		.uleb128 0x3b
 3913 0082 0B       		.uleb128 0xb
 3914 0083 49       		.uleb128 0x49
 3915 0084 13       		.uleb128 0x13
 3916 0085 38       		.uleb128 0x38
 3917 0086 0B       		.uleb128 0xb
 3918 0087 00       		.byte	0
 3919 0088 00       		.byte	0
 3920 0089 0C       		.uleb128 0xc
 3921 008a 35       		.uleb128 0x35
 3922 008b 00       		.byte	0
 3923 008c 49       		.uleb128 0x49
 3924 008d 13       		.uleb128 0x13
 3925 008e 00       		.byte	0
 3926 008f 00       		.byte	0
 3927 0090 0D       		.uleb128 0xd
 3928 0091 13       		.uleb128 0x13
 3929 0092 01       		.byte	0x1
 3930 0093 0B       		.uleb128 0xb
 3931 0094 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 86


 3932 0095 3A       		.uleb128 0x3a
 3933 0096 0B       		.uleb128 0xb
 3934 0097 3B       		.uleb128 0x3b
 3935 0098 0B       		.uleb128 0xb
 3936 0099 01       		.uleb128 0x1
 3937 009a 13       		.uleb128 0x13
 3938 009b 00       		.byte	0
 3939 009c 00       		.byte	0
 3940 009d 0E       		.uleb128 0xe
 3941 009e 13       		.uleb128 0x13
 3942 009f 01       		.byte	0x1
 3943 00a0 03       		.uleb128 0x3
 3944 00a1 08       		.uleb128 0x8
 3945 00a2 0B       		.uleb128 0xb
 3946 00a3 0B       		.uleb128 0xb
 3947 00a4 3A       		.uleb128 0x3a
 3948 00a5 0B       		.uleb128 0xb
 3949 00a6 3B       		.uleb128 0x3b
 3950 00a7 0B       		.uleb128 0xb
 3951 00a8 01       		.uleb128 0x1
 3952 00a9 13       		.uleb128 0x13
 3953 00aa 00       		.byte	0
 3954 00ab 00       		.byte	0
 3955 00ac 0F       		.uleb128 0xf
 3956 00ad 2E       		.uleb128 0x2e
 3957 00ae 00       		.byte	0
 3958 00af 3F       		.uleb128 0x3f
 3959 00b0 19       		.uleb128 0x19
 3960 00b1 03       		.uleb128 0x3
 3961 00b2 0E       		.uleb128 0xe
 3962 00b3 3A       		.uleb128 0x3a
 3963 00b4 0B       		.uleb128 0xb
 3964 00b5 3B       		.uleb128 0x3b
 3965 00b6 0B       		.uleb128 0xb
 3966 00b7 27       		.uleb128 0x27
 3967 00b8 19       		.uleb128 0x19
 3968 00b9 11       		.uleb128 0x11
 3969 00ba 01       		.uleb128 0x1
 3970 00bb 12       		.uleb128 0x12
 3971 00bc 06       		.uleb128 0x6
 3972 00bd 40       		.uleb128 0x40
 3973 00be 18       		.uleb128 0x18
 3974 00bf 9642     		.uleb128 0x2116
 3975 00c1 19       		.uleb128 0x19
 3976 00c2 00       		.byte	0
 3977 00c3 00       		.byte	0
 3978 00c4 10       		.uleb128 0x10
 3979 00c5 2E       		.uleb128 0x2e
 3980 00c6 01       		.byte	0x1
 3981 00c7 3F       		.uleb128 0x3f
 3982 00c8 19       		.uleb128 0x19
 3983 00c9 03       		.uleb128 0x3
 3984 00ca 0E       		.uleb128 0xe
 3985 00cb 3A       		.uleb128 0x3a
 3986 00cc 0B       		.uleb128 0xb
 3987 00cd 3B       		.uleb128 0x3b
 3988 00ce 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 87


 3989 00cf 11       		.uleb128 0x11
 3990 00d0 01       		.uleb128 0x1
 3991 00d1 12       		.uleb128 0x12
 3992 00d2 06       		.uleb128 0x6
 3993 00d3 40       		.uleb128 0x40
 3994 00d4 18       		.uleb128 0x18
 3995 00d5 9642     		.uleb128 0x2116
 3996 00d7 19       		.uleb128 0x19
 3997 00d8 01       		.uleb128 0x1
 3998 00d9 13       		.uleb128 0x13
 3999 00da 00       		.byte	0
 4000 00db 00       		.byte	0
 4001 00dc 11       		.uleb128 0x11
 4002 00dd 34       		.uleb128 0x34
 4003 00de 00       		.byte	0
 4004 00df 03       		.uleb128 0x3
 4005 00e0 0E       		.uleb128 0xe
 4006 00e1 3A       		.uleb128 0x3a
 4007 00e2 0B       		.uleb128 0xb
 4008 00e3 3B       		.uleb128 0x3b
 4009 00e4 0B       		.uleb128 0xb
 4010 00e5 49       		.uleb128 0x49
 4011 00e6 13       		.uleb128 0x13
 4012 00e7 02       		.uleb128 0x2
 4013 00e8 18       		.uleb128 0x18
 4014 00e9 00       		.byte	0
 4015 00ea 00       		.byte	0
 4016 00eb 12       		.uleb128 0x12
 4017 00ec 2E       		.uleb128 0x2e
 4018 00ed 01       		.byte	0x1
 4019 00ee 3F       		.uleb128 0x3f
 4020 00ef 19       		.uleb128 0x19
 4021 00f0 03       		.uleb128 0x3
 4022 00f1 0E       		.uleb128 0xe
 4023 00f2 3A       		.uleb128 0x3a
 4024 00f3 0B       		.uleb128 0xb
 4025 00f4 3B       		.uleb128 0x3b
 4026 00f5 0B       		.uleb128 0xb
 4027 00f6 49       		.uleb128 0x49
 4028 00f7 13       		.uleb128 0x13
 4029 00f8 11       		.uleb128 0x11
 4030 00f9 01       		.uleb128 0x1
 4031 00fa 12       		.uleb128 0x12
 4032 00fb 06       		.uleb128 0x6
 4033 00fc 40       		.uleb128 0x40
 4034 00fd 18       		.uleb128 0x18
 4035 00fe 9642     		.uleb128 0x2116
 4036 0100 19       		.uleb128 0x19
 4037 0101 01       		.uleb128 0x1
 4038 0102 13       		.uleb128 0x13
 4039 0103 00       		.byte	0
 4040 0104 00       		.byte	0
 4041 0105 13       		.uleb128 0x13
 4042 0106 2E       		.uleb128 0x2e
 4043 0107 00       		.byte	0
 4044 0108 3F       		.uleb128 0x3f
 4045 0109 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 88


 4046 010a 03       		.uleb128 0x3
 4047 010b 0E       		.uleb128 0xe
 4048 010c 3A       		.uleb128 0x3a
 4049 010d 0B       		.uleb128 0xb
 4050 010e 3B       		.uleb128 0x3b
 4051 010f 0B       		.uleb128 0xb
 4052 0110 11       		.uleb128 0x11
 4053 0111 01       		.uleb128 0x1
 4054 0112 12       		.uleb128 0x12
 4055 0113 06       		.uleb128 0x6
 4056 0114 40       		.uleb128 0x40
 4057 0115 18       		.uleb128 0x18
 4058 0116 9642     		.uleb128 0x2116
 4059 0118 19       		.uleb128 0x19
 4060 0119 00       		.byte	0
 4061 011a 00       		.byte	0
 4062 011b 14       		.uleb128 0x14
 4063 011c 2E       		.uleb128 0x2e
 4064 011d 01       		.byte	0x1
 4065 011e 3F       		.uleb128 0x3f
 4066 011f 19       		.uleb128 0x19
 4067 0120 03       		.uleb128 0x3
 4068 0121 0E       		.uleb128 0xe
 4069 0122 3A       		.uleb128 0x3a
 4070 0123 0B       		.uleb128 0xb
 4071 0124 3B       		.uleb128 0x3b
 4072 0125 0B       		.uleb128 0xb
 4073 0126 27       		.uleb128 0x27
 4074 0127 19       		.uleb128 0x19
 4075 0128 11       		.uleb128 0x11
 4076 0129 01       		.uleb128 0x1
 4077 012a 12       		.uleb128 0x12
 4078 012b 06       		.uleb128 0x6
 4079 012c 40       		.uleb128 0x40
 4080 012d 18       		.uleb128 0x18
 4081 012e 9642     		.uleb128 0x2116
 4082 0130 19       		.uleb128 0x19
 4083 0131 01       		.uleb128 0x1
 4084 0132 13       		.uleb128 0x13
 4085 0133 00       		.byte	0
 4086 0134 00       		.byte	0
 4087 0135 15       		.uleb128 0x15
 4088 0136 05       		.uleb128 0x5
 4089 0137 00       		.byte	0
 4090 0138 03       		.uleb128 0x3
 4091 0139 0E       		.uleb128 0xe
 4092 013a 3A       		.uleb128 0x3a
 4093 013b 0B       		.uleb128 0xb
 4094 013c 3B       		.uleb128 0x3b
 4095 013d 0B       		.uleb128 0xb
 4096 013e 49       		.uleb128 0x49
 4097 013f 13       		.uleb128 0x13
 4098 0140 02       		.uleb128 0x2
 4099 0141 18       		.uleb128 0x18
 4100 0142 00       		.byte	0
 4101 0143 00       		.byte	0
 4102 0144 16       		.uleb128 0x16
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 89


 4103 0145 2E       		.uleb128 0x2e
 4104 0146 01       		.byte	0x1
 4105 0147 3F       		.uleb128 0x3f
 4106 0148 19       		.uleb128 0x19
 4107 0149 03       		.uleb128 0x3
 4108 014a 0E       		.uleb128 0xe
 4109 014b 3A       		.uleb128 0x3a
 4110 014c 0B       		.uleb128 0xb
 4111 014d 3B       		.uleb128 0x3b
 4112 014e 0B       		.uleb128 0xb
 4113 014f 27       		.uleb128 0x27
 4114 0150 19       		.uleb128 0x19
 4115 0151 49       		.uleb128 0x49
 4116 0152 13       		.uleb128 0x13
 4117 0153 11       		.uleb128 0x11
 4118 0154 01       		.uleb128 0x1
 4119 0155 12       		.uleb128 0x12
 4120 0156 06       		.uleb128 0x6
 4121 0157 40       		.uleb128 0x40
 4122 0158 18       		.uleb128 0x18
 4123 0159 9642     		.uleb128 0x2116
 4124 015b 19       		.uleb128 0x19
 4125 015c 01       		.uleb128 0x1
 4126 015d 13       		.uleb128 0x13
 4127 015e 00       		.byte	0
 4128 015f 00       		.byte	0
 4129 0160 17       		.uleb128 0x17
 4130 0161 2E       		.uleb128 0x2e
 4131 0162 01       		.byte	0x1
 4132 0163 3F       		.uleb128 0x3f
 4133 0164 19       		.uleb128 0x19
 4134 0165 03       		.uleb128 0x3
 4135 0166 0E       		.uleb128 0xe
 4136 0167 3A       		.uleb128 0x3a
 4137 0168 0B       		.uleb128 0xb
 4138 0169 3B       		.uleb128 0x3b
 4139 016a 0B       		.uleb128 0xb
 4140 016b 27       		.uleb128 0x27
 4141 016c 19       		.uleb128 0x19
 4142 016d 11       		.uleb128 0x11
 4143 016e 01       		.uleb128 0x1
 4144 016f 12       		.uleb128 0x12
 4145 0170 06       		.uleb128 0x6
 4146 0171 40       		.uleb128 0x40
 4147 0172 18       		.uleb128 0x18
 4148 0173 9742     		.uleb128 0x2117
 4149 0175 19       		.uleb128 0x19
 4150 0176 01       		.uleb128 0x1
 4151 0177 13       		.uleb128 0x13
 4152 0178 00       		.byte	0
 4153 0179 00       		.byte	0
 4154 017a 18       		.uleb128 0x18
 4155 017b 2E       		.uleb128 0x2e
 4156 017c 01       		.byte	0x1
 4157 017d 3F       		.uleb128 0x3f
 4158 017e 19       		.uleb128 0x19
 4159 017f 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 90


 4160 0180 0E       		.uleb128 0xe
 4161 0181 3A       		.uleb128 0x3a
 4162 0182 0B       		.uleb128 0xb
 4163 0183 3B       		.uleb128 0x3b
 4164 0184 0B       		.uleb128 0xb
 4165 0185 27       		.uleb128 0x27
 4166 0186 19       		.uleb128 0x19
 4167 0187 49       		.uleb128 0x49
 4168 0188 13       		.uleb128 0x13
 4169 0189 11       		.uleb128 0x11
 4170 018a 01       		.uleb128 0x1
 4171 018b 12       		.uleb128 0x12
 4172 018c 06       		.uleb128 0x6
 4173 018d 40       		.uleb128 0x40
 4174 018e 18       		.uleb128 0x18
 4175 018f 9742     		.uleb128 0x2117
 4176 0191 19       		.uleb128 0x19
 4177 0192 01       		.uleb128 0x1
 4178 0193 13       		.uleb128 0x13
 4179 0194 00       		.byte	0
 4180 0195 00       		.byte	0
 4181 0196 19       		.uleb128 0x19
 4182 0197 2E       		.uleb128 0x2e
 4183 0198 01       		.byte	0x1
 4184 0199 3F       		.uleb128 0x3f
 4185 019a 19       		.uleb128 0x19
 4186 019b 03       		.uleb128 0x3
 4187 019c 0E       		.uleb128 0xe
 4188 019d 3A       		.uleb128 0x3a
 4189 019e 0B       		.uleb128 0xb
 4190 019f 3B       		.uleb128 0x3b
 4191 01a0 05       		.uleb128 0x5
 4192 01a1 11       		.uleb128 0x11
 4193 01a2 01       		.uleb128 0x1
 4194 01a3 12       		.uleb128 0x12
 4195 01a4 06       		.uleb128 0x6
 4196 01a5 40       		.uleb128 0x40
 4197 01a6 18       		.uleb128 0x18
 4198 01a7 9642     		.uleb128 0x2116
 4199 01a9 19       		.uleb128 0x19
 4200 01aa 01       		.uleb128 0x1
 4201 01ab 13       		.uleb128 0x13
 4202 01ac 00       		.byte	0
 4203 01ad 00       		.byte	0
 4204 01ae 1A       		.uleb128 0x1a
 4205 01af 34       		.uleb128 0x34
 4206 01b0 00       		.byte	0
 4207 01b1 03       		.uleb128 0x3
 4208 01b2 0E       		.uleb128 0xe
 4209 01b3 3A       		.uleb128 0x3a
 4210 01b4 0B       		.uleb128 0xb
 4211 01b5 3B       		.uleb128 0x3b
 4212 01b6 05       		.uleb128 0x5
 4213 01b7 49       		.uleb128 0x49
 4214 01b8 13       		.uleb128 0x13
 4215 01b9 02       		.uleb128 0x2
 4216 01ba 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 91


 4217 01bb 00       		.byte	0
 4218 01bc 00       		.byte	0
 4219 01bd 1B       		.uleb128 0x1b
 4220 01be 2E       		.uleb128 0x2e
 4221 01bf 00       		.byte	0
 4222 01c0 3F       		.uleb128 0x3f
 4223 01c1 19       		.uleb128 0x19
 4224 01c2 03       		.uleb128 0x3
 4225 01c3 0E       		.uleb128 0xe
 4226 01c4 3A       		.uleb128 0x3a
 4227 01c5 0B       		.uleb128 0xb
 4228 01c6 3B       		.uleb128 0x3b
 4229 01c7 05       		.uleb128 0x5
 4230 01c8 27       		.uleb128 0x27
 4231 01c9 19       		.uleb128 0x19
 4232 01ca 49       		.uleb128 0x49
 4233 01cb 13       		.uleb128 0x13
 4234 01cc 11       		.uleb128 0x11
 4235 01cd 01       		.uleb128 0x1
 4236 01ce 12       		.uleb128 0x12
 4237 01cf 06       		.uleb128 0x6
 4238 01d0 40       		.uleb128 0x40
 4239 01d1 18       		.uleb128 0x18
 4240 01d2 9642     		.uleb128 0x2116
 4241 01d4 19       		.uleb128 0x19
 4242 01d5 00       		.byte	0
 4243 01d6 00       		.byte	0
 4244 01d7 1C       		.uleb128 0x1c
 4245 01d8 2E       		.uleb128 0x2e
 4246 01d9 01       		.byte	0x1
 4247 01da 3F       		.uleb128 0x3f
 4248 01db 19       		.uleb128 0x19
 4249 01dc 03       		.uleb128 0x3
 4250 01dd 0E       		.uleb128 0xe
 4251 01de 3A       		.uleb128 0x3a
 4252 01df 0B       		.uleb128 0xb
 4253 01e0 3B       		.uleb128 0x3b
 4254 01e1 05       		.uleb128 0x5
 4255 01e2 49       		.uleb128 0x49
 4256 01e3 13       		.uleb128 0x13
 4257 01e4 11       		.uleb128 0x11
 4258 01e5 01       		.uleb128 0x1
 4259 01e6 12       		.uleb128 0x12
 4260 01e7 06       		.uleb128 0x6
 4261 01e8 40       		.uleb128 0x40
 4262 01e9 18       		.uleb128 0x18
 4263 01ea 9642     		.uleb128 0x2116
 4264 01ec 19       		.uleb128 0x19
 4265 01ed 01       		.uleb128 0x1
 4266 01ee 13       		.uleb128 0x13
 4267 01ef 00       		.byte	0
 4268 01f0 00       		.byte	0
 4269 01f1 1D       		.uleb128 0x1d
 4270 01f2 0B       		.uleb128 0xb
 4271 01f3 01       		.byte	0x1
 4272 01f4 11       		.uleb128 0x11
 4273 01f5 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 92


 4274 01f6 12       		.uleb128 0x12
 4275 01f7 06       		.uleb128 0x6
 4276 01f8 00       		.byte	0
 4277 01f9 00       		.byte	0
 4278 01fa 1E       		.uleb128 0x1e
 4279 01fb 0B       		.uleb128 0xb
 4280 01fc 01       		.byte	0x1
 4281 01fd 11       		.uleb128 0x11
 4282 01fe 01       		.uleb128 0x1
 4283 01ff 12       		.uleb128 0x12
 4284 0200 06       		.uleb128 0x6
 4285 0201 01       		.uleb128 0x1
 4286 0202 13       		.uleb128 0x13
 4287 0203 00       		.byte	0
 4288 0204 00       		.byte	0
 4289 0205 1F       		.uleb128 0x1f
 4290 0206 21       		.uleb128 0x21
 4291 0207 00       		.byte	0
 4292 0208 49       		.uleb128 0x49
 4293 0209 13       		.uleb128 0x13
 4294 020a 2F       		.uleb128 0x2f
 4295 020b 05       		.uleb128 0x5
 4296 020c 00       		.byte	0
 4297 020d 00       		.byte	0
 4298 020e 20       		.uleb128 0x20
 4299 020f 2E       		.uleb128 0x2e
 4300 0210 01       		.byte	0x1
 4301 0211 3F       		.uleb128 0x3f
 4302 0212 19       		.uleb128 0x19
 4303 0213 03       		.uleb128 0x3
 4304 0214 0E       		.uleb128 0xe
 4305 0215 3A       		.uleb128 0x3a
 4306 0216 0B       		.uleb128 0xb
 4307 0217 3B       		.uleb128 0x3b
 4308 0218 05       		.uleb128 0x5
 4309 0219 27       		.uleb128 0x27
 4310 021a 19       		.uleb128 0x19
 4311 021b 49       		.uleb128 0x49
 4312 021c 13       		.uleb128 0x13
 4313 021d 11       		.uleb128 0x11
 4314 021e 01       		.uleb128 0x1
 4315 021f 12       		.uleb128 0x12
 4316 0220 06       		.uleb128 0x6
 4317 0221 40       		.uleb128 0x40
 4318 0222 18       		.uleb128 0x18
 4319 0223 9642     		.uleb128 0x2116
 4320 0225 19       		.uleb128 0x19
 4321 0226 01       		.uleb128 0x1
 4322 0227 13       		.uleb128 0x13
 4323 0228 00       		.byte	0
 4324 0229 00       		.byte	0
 4325 022a 21       		.uleb128 0x21
 4326 022b 05       		.uleb128 0x5
 4327 022c 00       		.byte	0
 4328 022d 03       		.uleb128 0x3
 4329 022e 0E       		.uleb128 0xe
 4330 022f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 93


 4331 0230 0B       		.uleb128 0xb
 4332 0231 3B       		.uleb128 0x3b
 4333 0232 05       		.uleb128 0x5
 4334 0233 49       		.uleb128 0x49
 4335 0234 13       		.uleb128 0x13
 4336 0235 02       		.uleb128 0x2
 4337 0236 18       		.uleb128 0x18
 4338 0237 00       		.byte	0
 4339 0238 00       		.byte	0
 4340 0239 22       		.uleb128 0x22
 4341 023a 34       		.uleb128 0x34
 4342 023b 00       		.byte	0
 4343 023c 03       		.uleb128 0x3
 4344 023d 08       		.uleb128 0x8
 4345 023e 3A       		.uleb128 0x3a
 4346 023f 0B       		.uleb128 0xb
 4347 0240 3B       		.uleb128 0x3b
 4348 0241 05       		.uleb128 0x5
 4349 0242 49       		.uleb128 0x49
 4350 0243 13       		.uleb128 0x13
 4351 0244 02       		.uleb128 0x2
 4352 0245 18       		.uleb128 0x18
 4353 0246 00       		.byte	0
 4354 0247 00       		.byte	0
 4355 0248 23       		.uleb128 0x23
 4356 0249 34       		.uleb128 0x34
 4357 024a 00       		.byte	0
 4358 024b 03       		.uleb128 0x3
 4359 024c 0E       		.uleb128 0xe
 4360 024d 3A       		.uleb128 0x3a
 4361 024e 0B       		.uleb128 0xb
 4362 024f 3B       		.uleb128 0x3b
 4363 0250 05       		.uleb128 0x5
 4364 0251 49       		.uleb128 0x49
 4365 0252 13       		.uleb128 0x13
 4366 0253 3F       		.uleb128 0x3f
 4367 0254 19       		.uleb128 0x19
 4368 0255 3C       		.uleb128 0x3c
 4369 0256 19       		.uleb128 0x19
 4370 0257 00       		.byte	0
 4371 0258 00       		.byte	0
 4372 0259 24       		.uleb128 0x24
 4373 025a 34       		.uleb128 0x34
 4374 025b 00       		.byte	0
 4375 025c 03       		.uleb128 0x3
 4376 025d 0E       		.uleb128 0xe
 4377 025e 3A       		.uleb128 0x3a
 4378 025f 0B       		.uleb128 0xb
 4379 0260 3B       		.uleb128 0x3b
 4380 0261 0B       		.uleb128 0xb
 4381 0262 49       		.uleb128 0x49
 4382 0263 13       		.uleb128 0x13
 4383 0264 3F       		.uleb128 0x3f
 4384 0265 19       		.uleb128 0x19
 4385 0266 02       		.uleb128 0x2
 4386 0267 18       		.uleb128 0x18
 4387 0268 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 94


 4388 0269 00       		.byte	0
 4389 026a 25       		.uleb128 0x25
 4390 026b 34       		.uleb128 0x34
 4391 026c 00       		.byte	0
 4392 026d 03       		.uleb128 0x3
 4393 026e 08       		.uleb128 0x8
 4394 026f 3A       		.uleb128 0x3a
 4395 0270 0B       		.uleb128 0xb
 4396 0271 3B       		.uleb128 0x3b
 4397 0272 0B       		.uleb128 0xb
 4398 0273 49       		.uleb128 0x49
 4399 0274 13       		.uleb128 0x13
 4400 0275 3F       		.uleb128 0x3f
 4401 0276 19       		.uleb128 0x19
 4402 0277 02       		.uleb128 0x2
 4403 0278 18       		.uleb128 0x18
 4404 0279 00       		.byte	0
 4405 027a 00       		.byte	0
 4406 027b 00       		.byte	0
 4407              		.section	.debug_aranges,"",%progbits
 4408 0000 8C000000 		.4byte	0x8c
 4409 0004 0200     		.2byte	0x2
 4410 0006 00000000 		.4byte	.Ldebug_info0
 4411 000a 04       		.byte	0x4
 4412 000b 00       		.byte	0
 4413 000c 0000     		.2byte	0
 4414 000e 0000     		.2byte	0
 4415 0010 00000000 		.4byte	.LFB64
 4416 0014 0C000000 		.4byte	.LFE64-.LFB64
 4417 0018 00000000 		.4byte	.LFB65
 4418 001c 2C010000 		.4byte	.LFE65-.LFB65
 4419 0020 00000000 		.4byte	.LFB66
 4420 0024 64000000 		.4byte	.LFE66-.LFB66
 4421 0028 00000000 		.4byte	.LFB67
 4422 002c 2A000000 		.4byte	.LFE67-.LFB67
 4423 0030 00000000 		.4byte	.LFB68
 4424 0034 50000000 		.4byte	.LFE68-.LFB68
 4425 0038 00000000 		.4byte	.LFB69
 4426 003c 48000000 		.4byte	.LFE69-.LFB69
 4427 0040 00000000 		.4byte	.LFB70
 4428 0044 1E000000 		.4byte	.LFE70-.LFB70
 4429 0048 00000000 		.4byte	.LFB71
 4430 004c 46000000 		.4byte	.LFE71-.LFB71
 4431 0050 00000000 		.4byte	.LFB72
 4432 0054 2C010000 		.4byte	.LFE72-.LFB72
 4433 0058 00000000 		.4byte	.LFB73
 4434 005c 1E000000 		.4byte	.LFE73-.LFB73
 4435 0060 00000000 		.4byte	.LFB74
 4436 0064 5C040000 		.4byte	.LFE74-.LFB74
 4437 0068 00000000 		.4byte	.LFB75
 4438 006c 44000000 		.4byte	.LFE75-.LFB75
 4439 0070 00000000 		.4byte	.LFB76
 4440 0074 80030000 		.4byte	.LFE76-.LFB76
 4441 0078 00000000 		.4byte	.LFB77
 4442 007c 74000000 		.4byte	.LFE77-.LFB77
 4443 0080 00000000 		.4byte	.LFB78
 4444 0084 38010000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 95


 4445 0088 00000000 		.4byte	0
 4446 008c 00000000 		.4byte	0
 4447              		.section	.debug_ranges,"",%progbits
 4448              	.Ldebug_ranges0:
 4449 0000 00000000 		.4byte	.LFB64
 4450 0004 0C000000 		.4byte	.LFE64
 4451 0008 00000000 		.4byte	.LFB65
 4452 000c 2C010000 		.4byte	.LFE65
 4453 0010 00000000 		.4byte	.LFB66
 4454 0014 64000000 		.4byte	.LFE66
 4455 0018 00000000 		.4byte	.LFB67
 4456 001c 2A000000 		.4byte	.LFE67
 4457 0020 00000000 		.4byte	.LFB68
 4458 0024 50000000 		.4byte	.LFE68
 4459 0028 00000000 		.4byte	.LFB69
 4460 002c 48000000 		.4byte	.LFE69
 4461 0030 00000000 		.4byte	.LFB70
 4462 0034 1E000000 		.4byte	.LFE70
 4463 0038 00000000 		.4byte	.LFB71
 4464 003c 46000000 		.4byte	.LFE71
 4465 0040 00000000 		.4byte	.LFB72
 4466 0044 2C010000 		.4byte	.LFE72
 4467 0048 00000000 		.4byte	.LFB73
 4468 004c 1E000000 		.4byte	.LFE73
 4469 0050 00000000 		.4byte	.LFB74
 4470 0054 5C040000 		.4byte	.LFE74
 4471 0058 00000000 		.4byte	.LFB75
 4472 005c 44000000 		.4byte	.LFE75
 4473 0060 00000000 		.4byte	.LFB76
 4474 0064 80030000 		.4byte	.LFE76
 4475 0068 00000000 		.4byte	.LFB77
 4476 006c 74000000 		.4byte	.LFE77
 4477 0070 00000000 		.4byte	.LFB78
 4478 0074 38010000 		.4byte	.LFE78
 4479 0078 00000000 		.4byte	0
 4480 007c 00000000 		.4byte	0
 4481              		.section	.debug_line,"",%progbits
 4482              	.Ldebug_line0:
 4483 0000 36040000 		.section	.debug_str,"MS",%progbits,1
 4483      02001B02 
 4483      00000201 
 4483      FB0E0D00 
 4483      01010101 
 4484              	.LASF114:
 4485 0000 745F6D6F 		.ascii	"t_modem\000"
 4485      64656D00 
 4486              	.LASF12:
 4487 0008 75696E74 		.ascii	"uint16\000"
 4487      313600
 4488              	.LASF54:
 4489 000f 746D5F68 		.ascii	"tm_hour\000"
 4489      6F757200 
 4490              	.LASF37:
 4491 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4491      696E7661 
 4491      6C69645F 
 4491      72656164 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 96


 4491      696E6773 
 4492              	.LASF146:
 4493 002c 62756666 		.ascii	"buffer_overflow\000"
 4493      65725F6F 
 4493      76657266 
 4493      6C6F7700 
 4494              	.LASF144:
 4495 003c 66696C65 		.ascii	"fileName\000"
 4495      4E616D65 
 4495      00
 4496              	.LASF0:
 4497 0045 7369676E 		.ascii	"signed char\000"
 4497      65642063 
 4497      68617200 
 4498              	.LASF86:
 4499 0051 636F756E 		.ascii	"countDownResetCondition\000"
 4499      74446F77 
 4499      6E526573 
 4499      6574436F 
 4499      6E646974 
 4500              	.LASF168:
 4501 0069 57616B65 		.ascii	"Wakeup_ISR\000"
 4501      75705F49 
 4501      535200
 4502              	.LASF165:
 4503 0074 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4503      43313120 
 4503      352E342E 
 4503      31203230 
 4503      31363036 
 4504 00a7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4504      20726576 
 4504      6973696F 
 4504      6E203233 
 4504      37373135 
 4505 00da 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4505      66756E63 
 4505      74696F6E 
 4505      2D736563 
 4505      74696F6E 
 4506              	.LASF112:
 4507 0102 745F7072 		.ascii	"t_pressure\000"
 4507      65737375 
 4507      726500
 4508              	.LASF27:
 4509 010d 4D6F6E74 		.ascii	"Month\000"
 4509      6800
 4510              	.LASF7:
 4511 0113 6C6F6E67 		.ascii	"long long unsigned int\000"
 4511      206C6F6E 
 4511      6720756E 
 4511      7369676E 
 4511      65642069 
 4512              	.LASF23:
 4513 012a 486F7572 		.ascii	"Hour\000"
 4513      00
 4514              	.LASF150:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 97


 4515 012f 6D6F6465 		.ascii	"modem_state\000"
 4515      6D5F7374 
 4515      61746500 
 4516              	.LASF159:
 4517 013b 616C6172 		.ascii	"alarmMeasure\000"
 4517      6D4D6561 
 4517      73757265 
 4517      00
 4518              	.LASF145:
 4519 0148 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4519      52784275 
 4519      66666572 
 4519      00
 4520              	.LASF109:
 4521 0155 745F6C65 		.ascii	"t_level_sensor\000"
 4521      76656C5F 
 4521      73656E73 
 4521      6F7200
 4522              	.LASF6:
 4523 0164 6C6F6E67 		.ascii	"long long int\000"
 4523      206C6F6E 
 4523      6720696E 
 4523      7400
 4524              	.LASF122:
 4525 0172 7061636B 		.ascii	"packets\000"
 4525      65747300 
 4526              	.LASF70:
 4527 017a 65636E6F 		.ascii	"ecno\000"
 4527      00
 4528              	.LASF160:
 4529 017f 74696D65 		.ascii	"timeToMeasure\000"
 4529      546F4D65 
 4529      61737572 
 4529      6500
 4530              	.LASF73:
 4531 018d 74696D65 		.ascii	"time_to_network_connect\000"
 4531      5F746F5F 
 4531      6E657477 
 4531      6F726B5F 
 4531      636F6E6E 
 4532              	.LASF162:
 4533 01a5 74696D65 		.ascii	"timeToSync\000"
 4533      546F5379 
 4533      6E6300
 4534              	.LASF40:
 4535 01b0 766F6C74 		.ascii	"voltage_solar\000"
 4535      6167655F 
 4535      736F6C61 
 4535      7200
 4536              	.LASF41:
 4537 01be 766F6C74 		.ascii	"voltage_charge_current\000"
 4537      6167655F 
 4537      63686172 
 4537      67655F63 
 4537      75727265 
 4538              	.LASF143:
 4539 01d5 75706772 		.ascii	"upgrade_status\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 98


 4539      6164655F 
 4539      73746174 
 4539      757300
 4540              	.LASF125:
 4541 01e4 635F6461 		.ascii	"c_data_count_sent\000"
 4541      74615F63 
 4541      6F756E74 
 4541      5F73656E 
 4541      7400
 4542              	.LASF67:
 4543 01f6 6D6F6465 		.ascii	"modem_info_t\000"
 4543      6D5F696E 
 4543      666F5F74 
 4543      00
 4544              	.LASF68:
 4545 0203 72786C65 		.ascii	"rxlev\000"
 4545      7600
 4546              	.LASF4:
 4547 0209 6C6F6E67 		.ascii	"long int\000"
 4547      20696E74 
 4547      00
 4548              	.LASF74:
 4549 0212 74696D65 		.ascii	"time_to_acquire_ip\000"
 4549      5F746F5F 
 4549      61637175 
 4549      6972655F 
 4549      697000
 4550              	.LASF87:
 4551 0225 616C6172 		.ascii	"alarm\000"
 4551      6D00
 4552              	.LASF48:
 4553 022b 70726573 		.ascii	"pressure_voltage_off\000"
 4553      73757265 
 4553      5F766F6C 
 4553      74616765 
 4553      5F6F6666 
 4554              	.LASF11:
 4555 0240 75696E74 		.ascii	"uint8\000"
 4555      3800
 4556              	.LASF117:
 4557 0246 635F7472 		.ascii	"c_try_counter\000"
 4557      795F636F 
 4557      756E7465 
 4557      7200
 4558              	.LASF128:
 4559 0254 73656E64 		.ascii	"send_time\000"
 4559      5F74696D 
 4559      6500
 4560              	.LASF16:
 4561 025e 696E7433 		.ascii	"int32\000"
 4561      3200
 4562              	.LASF76:
 4563 0264 6E6F6465 		.ascii	"node_type\000"
 4563      5F747970 
 4563      6500
 4564              	.LASF115:
 4565 026e 73796E63 		.ascii	"syncData\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 99


 4565      44617461 
 4565      00
 4566              	.LASF123:
 4567 0277 6E657477 		.ascii	"network_time\000"
 4567      6F726B5F 
 4567      74696D65 
 4567      00
 4568              	.LASF13:
 4569 0284 75696E74 		.ascii	"uint32\000"
 4569      333200
 4570              	.LASF65:
 4571 028b 6D6F6465 		.ascii	"model_id\000"
 4571      6C5F6964 
 4571      00
 4572              	.LASF34:
 4573 0294 616C6C5F 		.ascii	"all_level_readings\000"
 4573      6C657665 
 4573      6C5F7265 
 4573      6164696E 
 4573      677300
 4574              	.LASF83:
 4575 02a7 636F756E 		.ascii	"countDownValue\000"
 4575      74446F77 
 4575      6E56616C 
 4575      756500
 4576              	.LASF139:
 4577 02b6 75706772 		.ascii	"upgraded\000"
 4577      61646564 
 4577      00
 4578              	.LASF56:
 4579 02bf 746D5F6D 		.ascii	"tm_mon\000"
 4579      6F6E00
 4580              	.LASF80:
 4581 02c6 64656275 		.ascii	"debug_level\000"
 4581      675F6C65 
 4581      76656C00 
 4582              	.LASF141:
 4583 02d2 706F7274 		.ascii	"port\000"
 4583      00
 4584              	.LASF61:
 4585 02d7 76616C75 		.ascii	"value\000"
 4585      6500
 4586              	.LASF140:
 4587 02dd 686F7374 		.ascii	"host\000"
 4587      00
 4588              	.LASF57:
 4589 02e2 746D5F79 		.ascii	"tm_year\000"
 4589      65617200 
 4590              	.LASF161:
 4591 02ea 616C6172 		.ascii	"alarmSync\000"
 4591      6D53796E 
 4591      6300
 4592              	.LASF47:
 4593 02f4 70726573 		.ascii	"pressure_voltage_on\000"
 4593      73757265 
 4593      5F766F6C 
 4593      74616765 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 100


 4593      5F6F6E00 
 4594              	.LASF8:
 4595 0308 756E7369 		.ascii	"unsigned int\000"
 4595      676E6564 
 4595      20696E74 
 4595      00
 4596              	.LASF137:
 4597 0315 73657454 		.ascii	"setTime\000"
 4597      696D6500 
 4598              	.LASF63:
 4599 031d 6B65795F 		.ascii	"key_value_t\000"
 4599      76616C75 
 4599      655F7400 
 4600              	.LASF99:
 4601 0329 41796F49 		.ascii	"AyoItsTime\000"
 4601      74735469 
 4601      6D6500
 4602              	.LASF36:
 4603 0334 6E756D5F 		.ascii	"num_valid_readings\000"
 4603      76616C69 
 4603      645F7265 
 4603      6164696E 
 4603      677300
 4604              	.LASF127:
 4605 0347 68747470 		.ascii	"http_chunk\000"
 4605      5F636875 
 4605      6E6B00
 4606              	.LASF133:
 4607 0352 6D5F766F 		.ascii	"m_voltage\000"
 4607      6C746167 
 4607      6500
 4608              	.LASF5:
 4609 035c 6C6F6E67 		.ascii	"long unsigned int\000"
 4609      20756E73 
 4609      69676E65 
 4609      6420696E 
 4609      7400
 4610              	.LASF96:
 4611 036e 7472795F 		.ascii	"try_counter\000"
 4611      636F756E 
 4611      74657200 
 4612              	.LASF118:
 4613 037a 64617461 		.ascii	"data_count_desired\000"
 4613      5F636F75 
 4613      6E745F64 
 4613      65736972 
 4613      656400
 4614              	.LASF39:
 4615 038d 766F6C74 		.ascii	"voltage_battery\000"
 4615      6167655F 
 4615      62617474 
 4615      65727900 
 4616              	.LASF25:
 4617 039d 4461794F 		.ascii	"DayOfMonth\000"
 4617      664D6F6E 
 4617      746800
 4618              	.LASF131:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 101


 4619 03a8 6D616B65 		.ascii	"makeMeasurements\000"
 4619      4D656173 
 4619      7572656D 
 4619      656E7473 
 4619      00
 4620              	.LASF149:
 4621 03b9 64617461 		.ascii	"data\000"
 4621      00
 4622              	.LASF92:
 4623 03be 65705F70 		.ascii	"ep_port\000"
 4623      6F727400 
 4624              	.LASF60:
 4625 03c6 746D5F69 		.ascii	"tm_isdst\000"
 4625      73647374 
 4625      00
 4626              	.LASF88:
 4627 03cf 6D6F6465 		.ascii	"modem_info\000"
 4627      6D5F696E 
 4627      666F00
 4628              	.LASF91:
 4629 03da 65705F68 		.ascii	"ep_host\000"
 4629      6F737400 
 4630              	.LASF14:
 4631 03e2 696E7438 		.ascii	"int8\000"
 4631      00
 4632              	.LASF98:
 4633 03e7 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4633      576F726B 
 4633      576F726B 
 4633      576F726B 
 4633      576F726B 
 4634              	.LASF119:
 4635 0400 635F6461 		.ascii	"c_data_count_desired\000"
 4635      74615F63 
 4635      6F756E74 
 4635      5F646573 
 4635      69726564 
 4636              	.LASF113:
 4637 0415 745F7364 		.ascii	"t_sd_card\000"
 4637      5F636172 
 4637      6400
 4638              	.LASF2:
 4639 041f 73686F72 		.ascii	"short int\000"
 4639      7420696E 
 4639      7400
 4640              	.LASF136:
 4641 0429 76616C76 		.ascii	"valve_position\000"
 4641      655F706F 
 4641      73697469 
 4641      6F6E00
 4642              	.LASF151:
 4643 0438 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4643      6D5F7374 
 4643      6172745F 
 4643      74696D65 
 4643      5F737461 
 4644              	.LASF90:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 102


 4645 044f 7379735F 		.ascii	"sys_info_t\000"
 4645      696E666F 
 4645      5F7400
 4646              	.LASF82:
 4647 045a 75706461 		.ascii	"updatable_parameters_t\000"
 4647      7461626C 
 4647      655F7061 
 4647      72616D65 
 4647      74657273 
 4648              	.LASF100:
 4649 0471 616C6172 		.ascii	"alarmType\000"
 4649      6D547970 
 4649      6500
 4650              	.LASF147:
 4651 047b 64617461 		.ascii	"dataPointsInStack\000"
 4651      506F696E 
 4651      7473496E 
 4651      53746163 
 4651      6B00
 4652              	.LASF53:
 4653 048d 746D5F6D 		.ascii	"tm_min\000"
 4653      696E00
 4654              	.LASF17:
 4655 0494 666C6F61 		.ascii	"float32\000"
 4655      74333200 
 4656              	.LASF101:
 4657 049c 616C6172 		.ascii	"alarmToBeUpdated\000"
 4657      6D546F42 
 4657      65557064 
 4657      61746564 
 4657      00
 4658              	.LASF22:
 4659 04ad 73697A65 		.ascii	"sizetype\000"
 4659      74797065 
 4659      00
 4660              	.LASF102:
 4661 04b6 52657365 		.ascii	"ResetAlarm\000"
 4661      74416C61 
 4661      726D00
 4662              	.LASF59:
 4663 04c1 746D5F79 		.ascii	"tm_yday\000"
 4663      64617900 
 4664              	.LASF93:
 4665 04c9 7379735F 		.ascii	"sys_settings_t\000"
 4665      73657474 
 4665      696E6773 
 4665      5F7400
 4666              	.LASF138:
 4667 04d8 6C6F6361 		.ascii	"localTime\000"
 4667      6C54696D 
 4667      6500
 4668              	.LASF163:
 4669 04e2 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4669      546F5379 
 4669      636E5265 
 4669      6D6F7465 
 4669      50617261 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 103


 4670              	.LASF62:
 4671 04f9 74696D65 		.ascii	"timeStamp\000"
 4671      5374616D 
 4671      7000
 4672              	.LASF29:
 4673 0503 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4673      54494D45 
 4673      5F444154 
 4673      4500
 4674              	.LASF153:
 4675 0511 75706461 		.ascii	"updatable_parameters\000"
 4675      7461626C 
 4675      655F7061 
 4675      72616D65 
 4675      74657273 
 4676              	.LASF105:
 4677 0526 43726561 		.ascii	"CreateAlarm\000"
 4677      7465416C 
 4677      61726D00 
 4678              	.LASF126:
 4679 0532 7061636B 		.ascii	"packet\000"
 4679      657400
 4680              	.LASF116:
 4681 0539 735F7273 		.ascii	"s_rsrp\000"
 4681      727000
 4682              	.LASF42:
 4683 0540 766F6C74 		.ascii	"voltage_pressure\000"
 4683      6167655F 
 4683      70726573 
 4683      73757265 
 4683      00
 4684              	.LASF154:
 4685 0551 68747470 		.ascii	"http_request\000"
 4685      5F726571 
 4685      75657374 
 4685      00
 4686              	.LASF18:
 4687 055e 666C6F61 		.ascii	"float\000"
 4687      7400
 4688              	.LASF38:
 4689 0564 6C657665 		.ascii	"level_sensor_t\000"
 4689      6C5F7365 
 4689      6E736F72 
 4689      5F7400
 4690              	.LASF130:
 4691 0573 636F6E66 		.ascii	"configureRemoteParams\000"
 4691      69677572 
 4691      6552656D 
 4691      6F746550 
 4691      6172616D 
 4692              	.LASF164:
 4693 0589 44617461 		.ascii	"Data_fileName\000"
 4693      5F66696C 
 4693      654E616D 
 4693      6500
 4694              	.LASF97:
 4695 0597 6D6F6465 		.ascii	"modem_status\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 104


 4695      6D5F7374 
 4695      61747573 
 4695      00
 4696              	.LASF30:
 4697 05a4 74657374 		.ascii	"test_name\000"
 4697      5F6E616D 
 4697      6500
 4698              	.LASF28:
 4699 05ae 59656172 		.ascii	"Year\000"
 4699      00
 4700              	.LASF81:
 4701 05b3 5F426F6F 		.ascii	"_Bool\000"
 4701      6C00
 4702              	.LASF10:
 4703 05b9 696E7433 		.ascii	"int32_t\000"
 4703      325F7400 
 4704              	.LASF1:
 4705 05c1 756E7369 		.ascii	"unsigned char\000"
 4705      676E6564 
 4705      20636861 
 4705      7200
 4706              	.LASF142:
 4707 05cf 726F7574 		.ascii	"route\000"
 4707      6500
 4708              	.LASF158:
 4709 05d5 73797374 		.ascii	"system_settings\000"
 4709      656D5F73 
 4709      65747469 
 4709      6E677300 
 4710              	.LASF72:
 4711 05e5 72737270 		.ascii	"rsrp\000"
 4711      00
 4712              	.LASF71:
 4713 05ea 72737271 		.ascii	"rsrq\000"
 4713      00
 4714              	.LASF167:
 4715 05ef 473A5C4D 		.ascii	"G:\\My Drive\\notoriOS\\notoriOS\\notoriOS.cydsn\000"
 4715      79204472 
 4715      6976655C 
 4715      6E6F746F 
 4715      72694F53 
 4716              	.LASF129:
 4717 061c 735F7365 		.ascii	"s_send_time\000"
 4717      6E645F74 
 4717      696D6500 
 4718              	.LASF79:
 4719 0628 73796E63 		.ascii	"sync_time\000"
 4719      5F74696D 
 4719      6500
 4720              	.LASF50:
 4721 0632 70726573 		.ascii	"pressure_depth\000"
 4721      73757265 
 4721      5F646570 
 4721      746800
 4722              	.LASF69:
 4723 0641 72736370 		.ascii	"rscp\000"
 4723      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 105


 4724              	.LASF24:
 4725 0646 4461794F 		.ascii	"DayOfWeek\000"
 4725      66576565 
 4725      6B00
 4726              	.LASF33:
 4727 0650 74657374 		.ascii	"test_t\000"
 4727      5F7400
 4728              	.LASF157:
 4729 0657 73797374 		.ascii	"system_info\000"
 4729      656D5F69 
 4729      6E666F00 
 4730              	.LASF66:
 4731 0663 696D6569 		.ascii	"imei\000"
 4731      00
 4732              	.LASF32:
 4733 0668 72656173 		.ascii	"reason\000"
 4733      6F6E00
 4734              	.LASF103:
 4735 066f 616C6172 		.ascii	"alarmToBeReset\000"
 4735      6D546F42 
 4735      65526573 
 4735      657400
 4736              	.LASF108:
 4737 067e 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4737      6B697479 
 4737      43686563 
 4737      6B596F75 
 4737      7273656C 
 4738              	.LASF124:
 4739 06aa 64617461 		.ascii	"data_count_sent\000"
 4739      5F636F75 
 4739      6E745F73 
 4739      656E7400 
 4740              	.LASF75:
 4741 06ba 6D6F6465 		.ascii	"modem_stats_t\000"
 4741      6D5F7374 
 4741      6174735F 
 4741      7400
 4742              	.LASF49:
 4743 06c8 70726573 		.ascii	"pressure_current\000"
 4743      73757265 
 4743      5F637572 
 4743      72656E74 
 4743      00
 4744              	.LASF45:
 4745 06d9 76616C69 		.ascii	"valid\000"
 4745      6400
 4746              	.LASF58:
 4747 06df 746D5F77 		.ascii	"tm_wday\000"
 4747      64617900 
 4748              	.LASF21:
 4749 06e7 6C6F6E67 		.ascii	"long double\000"
 4749      20646F75 
 4749      626C6500 
 4750              	.LASF121:
 4751 06f3 6368756E 		.ascii	"chunk\000"
 4751      6B00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 106


 4752              	.LASF132:
 4753 06f9 635F7469 		.ascii	"c_timeStamp\000"
 4753      6D655374 
 4753      616D7000 
 4754              	.LASF20:
 4755 0705 63686172 		.ascii	"char\000"
 4755      00
 4756              	.LASF44:
 4757 070a 766F6C74 		.ascii	"voltage_valve_pot_power\000"
 4757      6167655F 
 4757      76616C76 
 4757      655F706F 
 4757      745F706F 
 4758              	.LASF152:
 4759 0722 6D6F6465 		.ascii	"modem_stats\000"
 4759      6D5F7374 
 4759      61747300 
 4760              	.LASF156:
 4761 072e 68747470 		.ascii	"http_route\000"
 4761      5F726F75 
 4761      746500
 4762              	.LASF120:
 4763 0739 706F7274 		.ascii	"portConfig\000"
 4763      436F6E66 
 4763      696700
 4764              	.LASF9:
 4765 0744 5F5F696E 		.ascii	"__int32_t\000"
 4765      7433325F 
 4765      7400
 4766              	.LASF94:
 4767 074e 756E6971 		.ascii	"uniqueId\000"
 4767      75654964 
 4767      00
 4768              	.LASF78:
 4769 0757 6D656173 		.ascii	"measure_time\000"
 4769      7572655F 
 4769      74696D65 
 4769      00
 4770              	.LASF134:
 4771 0764 6D5F6C65 		.ascii	"m_level_sensor\000"
 4771      76656C5F 
 4771      73656E73 
 4771      6F7200
 4772              	.LASF35:
 4773 0773 6C657665 		.ascii	"level_reading\000"
 4773      6C5F7265 
 4773      6164696E 
 4773      6700
 4774              	.LASF169:
 4775 0781 4C617942 		.ascii	"LayBack\000"
 4775      61636B00 
 4776              	.LASF3:
 4777 0789 73686F72 		.ascii	"short unsigned int\000"
 4777      7420756E 
 4777      7369676E 
 4777      65642069 
 4777      6E7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 107


 4778              	.LASF64:
 4779 079c 73696D5F 		.ascii	"sim_id\000"
 4779      696400
 4780              	.LASF55:
 4781 07a3 746D5F6D 		.ascii	"tm_mday\000"
 4781      64617900 
 4782              	.LASF106:
 4783 07ab 6E657741 		.ascii	"newAlarm\000"
 4783      6C61726D 
 4783      00
 4784              	.LASF52:
 4785 07b4 746D5F73 		.ascii	"tm_sec\000"
 4785      656300
 4786              	.LASF135:
 4787 07bb 6D5F7072 		.ascii	"m_pressure\000"
 4787      65737375 
 4787      726500
 4788              	.LASF31:
 4789 07c6 73746174 		.ascii	"status\000"
 4789      757300
 4790              	.LASF148:
 4791 07cd 64617461 		.ascii	"dataPointsInStackDesired\000"
 4791      506F696E 
 4791      7473496E 
 4791      53746163 
 4791      6B446573 
 4792              	.LASF111:
 4793 07e6 745F766F 		.ascii	"t_voltages\000"
 4793      6C746167 
 4793      657300
 4794              	.LASF166:
 4795 07f1 6E6F746F 		.ascii	"notoriOS.c\000"
 4795      72694F53 
 4795      2E6300
 4796              	.LASF155:
 4797 07fc 68747470 		.ascii	"http_body\000"
 4797      5F626F64 
 4797      7900
 4798              	.LASF15:
 4799 0806 696E7431 		.ascii	"int16\000"
 4799      3600
 4800              	.LASF85:
 4801 080c 636F756E 		.ascii	"countDownType\000"
 4801      74446F77 
 4801      6E547970 
 4801      6500
 4802              	.LASF84:
 4803 081a 63757272 		.ascii	"currentCountDownValue\000"
 4803      656E7443 
 4803      6F756E74 
 4803      446F776E 
 4803      56616C75 
 4804              	.LASF77:
 4805 0830 73696D5F 		.ascii	"sim_type\000"
 4805      74797065 
 4805      00
 4806              	.LASF95:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccLDh1Hb.s 			page 108


 4807 0839 635F6865 		.ascii	"c_hey\000"
 4807      7900
 4808              	.LASF43:
 4809 083f 766F6C74 		.ascii	"voltage_valve_pos\000"
 4809      6167655F 
 4809      76616C76 
 4809      655F706F 
 4809      7300
 4810              	.LASF26:
 4811 0851 4461794F 		.ascii	"DayOfYear\000"
 4811      66596561 
 4811      7200
 4812              	.LASF51:
 4813 085b 70726573 		.ascii	"pressure_t\000"
 4813      73757265 
 4813      5F7400
 4814              	.LASF104:
 4815 0866 416C6172 		.ascii	"AlarmReady\000"
 4815      6D526561 
 4815      647900
 4816              	.LASF107:
 4817 0871 52656164 		.ascii	"ReadyOrNot\000"
 4817      794F724E 
 4817      6F7400
 4818              	.LASF170:
 4819 087c 6D61696E 		.ascii	"main\000"
 4819      00
 4820              	.LASF89:
 4821 0881 63686970 		.ascii	"chip_uniqueId\000"
 4821      5F756E69 
 4821      71756549 
 4821      6400
 4822              	.LASF110:
 4823 088f 745F7661 		.ascii	"t_valve\000"
 4823      6C766500 
 4824              	.LASF19:
 4825 0897 646F7562 		.ascii	"double\000"
 4825      6C6500
 4826              	.LASF46:
 4827 089e 766F6C74 		.ascii	"voltage_t\000"
 4827      6167655F 
 4827      7400
 4828              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
