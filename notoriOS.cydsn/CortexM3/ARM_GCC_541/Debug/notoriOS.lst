ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,7,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.section	.text.Wakeup_ISR,"ax",%progbits
  50              		.align	2
  51              		.global	Wakeup_ISR
  52              		.thumb
  53              		.thumb_func
  54              		.type	Wakeup_ISR, %function
  55              	Wakeup_ISR:
  56              	.LFB64:
  57              		.file 1 "notoriOS.c"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 2


   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  58              		.loc 1 20 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62 0000 80B5     		push	{r7, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 00AF     		add	r7, sp, #0
  67              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  68              		.loc 1 22 0
  69 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  70              		.loc 1 23 0
  71 0008 00BF     		nop
  72 000a 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE64:
  75              		.size	Wakeup_ISR, .-Wakeup_ISR
  76              		.global	Data_fileName
  77              		.data
  78              		.align	2
  79              		.type	Data_fileName, %object
  80              		.size	Data_fileName, 30
  81              	Data_fileName:
  82 0000 64617461 		.ascii	"data.txt\000"
  82      2E747874 
  82      00
  83 0009 00000000 		.space	21
  83      00000000 
  83      00000000 
  83      00000000 
  83      00000000 
  84              		.comm	try_counter,1,1
  85              		.section	.rodata
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 3


  86              		.align	2
  87              	.LC0:
  88 0000 25582D25 		.ascii	"%X-%X\000"
  88      5800
  89 0006 0000     		.align	2
  90              	.LC1:
  91 0008 6D616C63 		.ascii	"malcom.open-storm.org\000"
  91      6F6D2E6F 
  91      70656E2D 
  91      73746F72 
  91      6D2E6F72 
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 24
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 88B0     		sub	sp, sp, #32
 111              		.cfi_def_cfa_offset 48
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 4048     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 4


 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F10C03 		add	r3, r7, #12
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 FA68     		ldr	r2, [r7, #12]
 136 0032 3B69     		ldr	r3, [r7, #16]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 344A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 3448     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 344B     		ldr	r3, .L3+12
 145 0044 344A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-
  70:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org");
 147              		.loc 1 70 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 5


 148 0048 344A     		ldr	r2, .L3+20
 149 004a 354B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 95E80300 		ldmia	r5, {r0, r1}
 155 0058 2060     		str	r0, [r4]
 156 005a 0434     		adds	r4, r4, #4
 157 005c 2180     		strh	r1, [r4]	@ movhi
  71:notoriOS.c    ****     
  72:notoriOS.c    **** 
  73:notoriOS.c    ****     system_settings.ep_port = 5000;
 158              		.loc 1 73 0
 159 005e 2F4B     		ldr	r3, .L3+20
 160 0060 41F28832 		movw	r2, #5000
 161 0064 5A66     		str	r2, [r3, #100]
  74:notoriOS.c    ****     // Don't need the following for new nodes
  75:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  76:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  77:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  78:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  79:notoriOS.c    ****         
  80:notoriOS.c    ****     
  81:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  82:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 162              		.loc 1 82 0
 163 0066 2F4B     		ldr	r3, .L3+28
 164 0068 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 165 006a 99B2     		uxth	r1, r3
 166 006c 2E4C     		ldr	r4, .L3+32
 167 006e 3846     		mov	r0, r7
 168 0070 0723     		movs	r3, #7
 169 0072 0122     		movs	r2, #1
 170 0074 FFF7FEFF 		bl	CreateAlarm
 171 0078 2246     		mov	r2, r4
 172 007a 3B46     		mov	r3, r7
 173 007c 1968     		ldr	r1, [r3]	@ unaligned
 174 007e 1160     		str	r1, [r2]	@ unaligned
 175 0080 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 176 0082 9380     		strh	r3, [r2, #4]	@ unaligned
  83:notoriOS.c    ****     timeToMeasure = 1u;
 177              		.loc 1 83 0
 178 0084 294B     		ldr	r3, .L3+36
 179 0086 0122     		movs	r2, #1
 180 0088 1A70     		strb	r2, [r3]
  84:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  85:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 181              		.loc 1 85 0
 182 008a 264B     		ldr	r3, .L3+28
 183 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 184 008e 99B2     		uxth	r1, r3
 185 0090 274C     		ldr	r4, .L3+40
 186 0092 3846     		mov	r0, r7
 187 0094 0723     		movs	r3, #7
 188 0096 0122     		movs	r2, #1
 189 0098 FFF7FEFF 		bl	CreateAlarm
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 6


 190 009c 2246     		mov	r2, r4
 191 009e 3B46     		mov	r3, r7
 192 00a0 1968     		ldr	r1, [r3]	@ unaligned
 193 00a2 1160     		str	r1, [r2]	@ unaligned
 194 00a4 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 195 00a6 9380     		strh	r3, [r2, #4]	@ unaligned
  86:notoriOS.c    ****     timeToSync = 1u;
 196              		.loc 1 86 0
 197 00a8 224B     		ldr	r3, .L3+44
 198 00aa 0122     		movs	r2, #1
 199 00ac 1A70     		strb	r2, [r3]
  87:notoriOS.c    ****     
  88:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 200              		.loc 1 88 0
 201 00ae 224B     		ldr	r3, .L3+48
 202 00b0 0022     		movs	r2, #0
 203 00b2 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     // App Initializations
  91:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 204              		.loc 1 91 0
 205 00b4 1B4B     		ldr	r3, .L3+28
 206 00b6 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 207 00b8 99B2     		uxth	r1, r3
 208 00ba 204C     		ldr	r4, .L3+52
 209 00bc 3846     		mov	r0, r7
 210 00be 0723     		movs	r3, #7
 211 00c0 0122     		movs	r2, #1
 212 00c2 FFF7FEFF 		bl	CreateAlarm
 213 00c6 2246     		mov	r2, r4
 214 00c8 3B46     		mov	r3, r7
 215 00ca 1968     		ldr	r1, [r3]	@ unaligned
 216 00cc 1160     		str	r1, [r2]	@ unaligned
 217 00ce 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 218 00d0 9380     		strh	r3, [r2, #4]	@ unaligned
  92:notoriOS.c    ****     timeToAppLED = 1u;
 219              		.loc 1 92 0
 220 00d2 1B4B     		ldr	r3, .L3+56
 221 00d4 0122     		movs	r2, #1
 222 00d6 1A70     		strb	r2, [r3]
  93:notoriOS.c    ****     
  94:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
 223              		.loc 1 94 0
 224 00d8 124B     		ldr	r3, .L3+28
 225 00da 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 226 00dc 99B2     		uxth	r1, r3
 227 00de 194C     		ldr	r4, .L3+60
 228 00e0 3846     		mov	r0, r7
 229 00e2 0723     		movs	r3, #7
 230 00e4 0122     		movs	r2, #1
 231 00e6 FFF7FEFF 		bl	CreateAlarm
 232 00ea 2246     		mov	r2, r4
 233 00ec 3B46     		mov	r3, r7
 234 00ee 1968     		ldr	r1, [r3]	@ unaligned
 235 00f0 1160     		str	r1, [r2]	@ unaligned
 236 00f2 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 237 00f4 9380     		strh	r3, [r2, #4]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 7


  95:notoriOS.c    ****     timetoLevelSensor = 1u;
 238              		.loc 1 95 0
 239 00f6 144B     		ldr	r3, .L3+64
 240 00f8 0122     		movs	r2, #1
 241 00fa 1A70     		strb	r2, [r3]
  96:notoriOS.c    ****     
  97:notoriOS.c    ****     // Initialize the try counter to 0
  98:notoriOS.c    ****     uint8 try_counter = 0;
 242              		.loc 1 98 0
 243 00fc 0023     		movs	r3, #0
 244 00fe FB75     		strb	r3, [r7, #23]
  99:notoriOS.c    **** }
 245              		.loc 1 99 0
 246 0100 00BF     		nop
 247 0102 1837     		adds	r7, r7, #24
 248              		.cfi_def_cfa_offset 16
 249 0104 BD46     		mov	sp, r7
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0106 B0BD     		pop	{r4, r5, r7, pc}
 253              	.L4:
 254              		.align	2
 255              	.L3:
 256 0108 00000000 		.word	Wakeup_ISR
 257 010c 00000000 		.word	.LC0
 258 0110 04000000 		.word	system_info+4
 259 0114 00000000 		.word	system_info
 260 0118 00000000 		.word	modem_info
 261 011c 00000000 		.word	system_settings
 262 0120 08000000 		.word	.LC1
 263 0124 00000000 		.word	updatable_parameters
 264 0128 00000000 		.word	alarmMeasure
 265 012c 00000000 		.word	timeToMeasure
 266 0130 00000000 		.word	alarmSync
 267 0134 00000000 		.word	timeToSync
 268 0138 00000000 		.word	timeToSycnRemoteParams
 269 013c 00000000 		.word	alarmAppLED
 270 0140 00000000 		.word	timeToAppLED
 271 0144 00000000 		.word	alarmLevelSensor
 272 0148 00000000 		.word	timetoLevelSensor
 273              		.cfi_endproc
 274              	.LFE65:
 275              		.size	ReadyOrNot, .-ReadyOrNot
 276              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 277              		.align	2
 278              		.global	WorkWorkWorkWorkWorkWork
 279              		.thumb
 280              		.thumb_func
 281              		.type	WorkWorkWorkWorkWorkWork, %function
 282              	WorkWorkWorkWorkWorkWork:
 283              	.LFB66:
 100:notoriOS.c    **** 
 101:notoriOS.c    **** 
 102:notoriOS.c    **** // ==============================================
 103:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 104:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 105:notoriOS.c    **** //
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 8


 106:notoriOS.c    **** // Prorcesses core tasks
 107:notoriOS.c    **** // ==============================================
 108:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 109:notoriOS.c    **** {
 284              		.loc 1 109 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 8
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 82B0     		sub	sp, sp, #8
 293              		.cfi_def_cfa_offset 16
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 110:notoriOS.c    ****     
 111:notoriOS.c    ****     
 112:notoriOS.c    ****     
 113:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 114:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 115:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 116:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 117:notoriOS.c    ****     
 118:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 119:notoriOS.c    ****     if(timeToSycnRemoteParams){
 296              		.loc 1 119 0
 297 0006 204B     		ldr	r3, .L12
 298 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299 000a 002B     		cmp	r3, #0
 300 000c 06D0     		beq	.L6
 120:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 301              		.loc 1 120 0
 302 000e FFF7FEFF 		bl	configureRemoteParams
 303 0012 0346     		mov	r3, r0
 304 0014 1A46     		mov	r2, r3
 305 0016 1C4B     		ldr	r3, .L12
 306 0018 1A70     		strb	r2, [r3]
 307 001a 22E0     		b	.L7
 308              	.L6:
 121:notoriOS.c    ****     }
 122:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 123:notoriOS.c    ****     else if(timeToMeasure){
 309              		.loc 1 123 0
 310 001c 1B4B     		ldr	r3, .L12+4
 311 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 312 0020 002B     		cmp	r3, #0
 313 0022 06D0     		beq	.L8
 124:notoriOS.c    ****         // on custom nodes makeMeasurements will just be battery voltages
 125:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 314              		.loc 1 125 0
 315 0024 FFF7FEFF 		bl	makeMeasurements
 316 0028 0346     		mov	r3, r0
 317 002a 1A46     		mov	r2, r3
 318 002c 174B     		ldr	r3, .L12+4
 319 002e 1A70     		strb	r2, [r3]
 320 0030 17E0     		b	.L7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 9


 321              	.L8:
 126:notoriOS.c    ****     }  
 127:notoriOS.c    ****     // custom nodes
 128:notoriOS.c    ****     else if(updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 322              		.loc 1 128 0
 323 0032 174B     		ldr	r3, .L12+8
 324 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 325 0036 042B     		cmp	r3, #4
 326 0038 13D1     		bne	.L7
 129:notoriOS.c    ****         if(timeToAppLED){
 327              		.loc 1 129 0
 328 003a 164B     		ldr	r3, .L12+12
 329 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 330 003e 002B     		cmp	r3, #0
 331 0040 05D0     		beq	.L9
 130:notoriOS.c    ****             timeToAppLED = App_LED();
 332              		.loc 1 130 0
 333 0042 FFF7FEFF 		bl	App_LED
 334 0046 0346     		mov	r3, r0
 335 0048 1A46     		mov	r2, r3
 336 004a 124B     		ldr	r3, .L12+12
 337 004c 1A70     		strb	r2, [r3]
 338              	.L9:
 131:notoriOS.c    ****         }
 132:notoriOS.c    ****         if(timetoLevelSensor){
 339              		.loc 1 132 0
 340 004e 124B     		ldr	r3, .L12+16
 341 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 342 0052 002B     		cmp	r3, #0
 343 0054 05D0     		beq	.L7
 133:notoriOS.c    ****             timetoLevelSensor = level_sensor();
 344              		.loc 1 133 0
 345 0056 FFF7FEFF 		bl	level_sensor
 346 005a 0346     		mov	r3, r0
 347 005c 1A46     		mov	r2, r3
 348 005e 0E4B     		ldr	r3, .L12+16
 349 0060 1A70     		strb	r2, [r3]
 350              	.L7:
 134:notoriOS.c    ****         }
 135:notoriOS.c    ****         // add other custom apps below
 136:notoriOS.c    ****     }
 137:notoriOS.c    ****     if(timeToSync){
 351              		.loc 1 137 0
 352 0062 0E4B     		ldr	r3, .L12+20
 353 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 0066 002B     		cmp	r3, #0
 355 0068 05D0     		beq	.L10
 138:notoriOS.c    ****         timeToSync = syncData();
 356              		.loc 1 138 0
 357 006a FFF7FEFF 		bl	syncData
 358 006e 0346     		mov	r3, r0
 359 0070 1A46     		mov	r2, r3
 360 0072 0A4B     		ldr	r3, .L12+20
 361 0074 1A70     		strb	r2, [r3]
 362              	.L10:
 139:notoriOS.c    ****     } 
 140:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 10


 141:notoriOS.c    **** 
 142:notoriOS.c    ****     
 143:notoriOS.c    ****     // Print the countdown to the next alarm
 144:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 145:notoriOS.c    ****     
 146:notoriOS.c    ****     
 147:notoriOS.c    ****     // Check modem state machine on every loop
 148:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 363              		.loc 1 148 0
 364 0076 FFF7FEFF 		bl	modem_process_tasks
 365 007a 0346     		mov	r3, r0
 366 007c FB71     		strb	r3, [r7, #7]
 149:notoriOS.c    **** 
 150:notoriOS.c    ****     return 0u +  modem_status;  
 367              		.loc 1 150 0
 368 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 151:notoriOS.c    **** }
 369              		.loc 1 151 0
 370 0080 1846     		mov	r0, r3
 371 0082 0837     		adds	r7, r7, #8
 372              		.cfi_def_cfa_offset 8
 373 0084 BD46     		mov	sp, r7
 374              		.cfi_def_cfa_register 13
 375              		@ sp needed
 376 0086 80BD     		pop	{r7, pc}
 377              	.L13:
 378              		.align	2
 379              	.L12:
 380 0088 00000000 		.word	timeToSycnRemoteParams
 381 008c 00000000 		.word	timeToMeasure
 382 0090 00000000 		.word	updatable_parameters
 383 0094 00000000 		.word	timeToAppLED
 384 0098 00000000 		.word	timetoLevelSensor
 385 009c 00000000 		.word	timeToSync
 386              		.cfi_endproc
 387              	.LFE66:
 388              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 389              		.section	.text.LayBack,"ax",%progbits
 390              		.align	2
 391              		.global	LayBack
 392              		.thumb
 393              		.thumb_func
 394              		.type	LayBack, %function
 395              	LayBack:
 396              	.LFB67:
 152:notoriOS.c    **** 
 153:notoriOS.c    **** 
 154:notoriOS.c    **** 
 155:notoriOS.c    **** 
 156:notoriOS.c    **** 
 157:notoriOS.c    **** 
 158:notoriOS.c    **** // ==============================================
 159:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 160:notoriOS.c    **** //      - Snoop Dogg (1993)
 161:notoriOS.c    **** //
 162:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 163:notoriOS.c    **** // ==============================================
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 11


 164:notoriOS.c    **** void LayBack()
 165:notoriOS.c    **** {
 397              		.loc 1 165 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 0000 80B5     		push	{r7, lr}
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 7, -8
 404              		.cfi_offset 14, -4
 405 0002 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 166:notoriOS.c    ****   
 167:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 407              		.loc 1 167 0
 408 0004 FFF7FEFF 		bl	modem_sleep
 168:notoriOS.c    ****     
 169:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 170:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 409              		.loc 1 170 0
 410 0008 FFF7FEFF 		bl	debug_sleep
 171:notoriOS.c    ****     
 172:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 411              		.loc 1 172 0
 412 000c FFF7FEFF 		bl	CyPmSaveClocks
 173:notoriOS.c    ****     
 174:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 175:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 176:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 177:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 178:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 179:notoriOS.c    ****     //CyPmHibernate();
 180:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 181:notoriOS.c    **** 
 182:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 413              		.loc 1 182 0
 414 0010 4FF40061 		mov	r1, #2048
 415 0014 0020     		movs	r0, #0
 416 0016 FFF7FEFF 		bl	CyPmSleep
 183:notoriOS.c    **** 
 184:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 417              		.loc 1 184 0
 418 001a FFF7FEFF 		bl	CyPmRestoreClocks
 185:notoriOS.c    **** 
 186:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 419              		.loc 1 186 0
 420 001e FFF7FEFF 		bl	debug_wakeup
 187:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 421              		.loc 1 187 0
 422 0022 FFF7FEFF 		bl	modem_wakeup
 188:notoriOS.c    **** 
 189:notoriOS.c    **** }
 423              		.loc 1 189 0
 424 0026 00BF     		nop
 425 0028 80BD     		pop	{r7, pc}
 426              		.cfi_endproc
 427              	.LFE67:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 12


 428              		.size	LayBack, .-LayBack
 429 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 430              		.align	2
 431              		.global	AyoItsTime
 432              		.thumb
 433              		.thumb_func
 434              		.type	AyoItsTime, %function
 435              	AyoItsTime:
 436              	.LFB68:
 190:notoriOS.c    **** 
 191:notoriOS.c    **** 
 192:notoriOS.c    **** // ==============================================
 193:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 194:notoriOS.c    **** //      - NAS (1994)
 195:notoriOS.c    **** //
 196:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 197:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 198:notoriOS.c    **** // It will add tasks to the work queue,
 199:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 200:notoriOS.c    **** // ==============================================
 201:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 202:notoriOS.c    **** {
 437              		.loc 1 202 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 8
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441 0000 80B5     		push	{r7, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 82B0     		sub	sp, sp, #8
 446              		.cfi_def_cfa_offset 16
 447 0004 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 449 0006 0346     		mov	r3, r0
 450 0008 FB71     		strb	r3, [r7, #7]
 203:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 204:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 451              		.loc 1 204 0
 452 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 453 000c 1946     		mov	r1, r3
 454 000e 1748     		ldr	r0, .L21
 455 0010 FFF7FEFF 		bl	AlarmReady
 456 0014 0346     		mov	r3, r0
 457 0016 002B     		cmp	r3, #0
 458 0018 02D0     		beq	.L16
 205:notoriOS.c    ****     {
 206:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 207:notoriOS.c    ****         timeToMeasure = 1u;
 459              		.loc 1 207 0
 460 001a 154B     		ldr	r3, .L21+4
 461 001c 0122     		movs	r2, #1
 462 001e 1A70     		strb	r2, [r3]
 463              	.L16:
 208:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 209:notoriOS.c    ****         
 210:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 13


 211:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 464              		.loc 1 211 0
 465 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 466 0022 1946     		mov	r1, r3
 467 0024 1348     		ldr	r0, .L21+8
 468 0026 FFF7FEFF 		bl	AlarmReady
 469 002a 0346     		mov	r3, r0
 470 002c 002B     		cmp	r3, #0
 471 002e 02D0     		beq	.L17
 212:notoriOS.c    ****     {
 213:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 214:notoriOS.c    ****         timeToSync = 1u;
 472              		.loc 1 214 0
 473 0030 114B     		ldr	r3, .L21+12
 474 0032 0122     		movs	r2, #1
 475 0034 1A70     		strb	r2, [r3]
 476              	.L17:
 215:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 216:notoriOS.c    ****     }
 217:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 477              		.loc 1 217 0
 478 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 479 0038 1946     		mov	r1, r3
 480 003a 1048     		ldr	r0, .L21+16
 481 003c FFF7FEFF 		bl	AlarmReady
 482 0040 0346     		mov	r3, r0
 483 0042 002B     		cmp	r3, #0
 484 0044 02D0     		beq	.L18
 218:notoriOS.c    ****     {
 219:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 220:notoriOS.c    ****         timeToAppLED = 1u;
 485              		.loc 1 220 0
 486 0046 0E4B     		ldr	r3, .L21+20
 487 0048 0122     		movs	r2, #1
 488 004a 1A70     		strb	r2, [r3]
 489              	.L18:
 221:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 222:notoriOS.c    ****     }
 223:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 490              		.loc 1 223 0
 491 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 492 004e 1946     		mov	r1, r3
 493 0050 0C48     		ldr	r0, .L21+24
 494 0052 FFF7FEFF 		bl	AlarmReady
 495 0056 0346     		mov	r3, r0
 496 0058 002B     		cmp	r3, #0
 497 005a 02D0     		beq	.L20
 224:notoriOS.c    ****         timetoLevelSensor = 1u;
 498              		.loc 1 224 0
 499 005c 0A4B     		ldr	r3, .L21+28
 500 005e 0122     		movs	r2, #1
 501 0060 1A70     		strb	r2, [r3]
 502              	.L20:
 225:notoriOS.c    ****     }
 226:notoriOS.c    ****     
 227:notoriOS.c    **** }
 503              		.loc 1 227 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 14


 504 0062 00BF     		nop
 505 0064 0837     		adds	r7, r7, #8
 506              		.cfi_def_cfa_offset 8
 507 0066 BD46     		mov	sp, r7
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 0068 80BD     		pop	{r7, pc}
 511              	.L22:
 512 006a 00BF     		.align	2
 513              	.L21:
 514 006c 00000000 		.word	alarmMeasure
 515 0070 00000000 		.word	timeToMeasure
 516 0074 00000000 		.word	alarmSync
 517 0078 00000000 		.word	timeToSync
 518 007c 00000000 		.word	alarmAppLED
 519 0080 00000000 		.word	timeToAppLED
 520 0084 00000000 		.word	alarmLevelSensor
 521 0088 00000000 		.word	timetoLevelSensor
 522              		.cfi_endproc
 523              	.LFE68:
 524              		.size	AyoItsTime, .-AyoItsTime
 525              		.section	.text.AlarmReady,"ax",%progbits
 526              		.align	2
 527              		.global	AlarmReady
 528              		.thumb
 529              		.thumb_func
 530              		.type	AlarmReady, %function
 531              	AlarmReady:
 532              	.LFB69:
 228:notoriOS.c    **** 
 229:notoriOS.c    **** 
 230:notoriOS.c    **** // ==============================================
 231:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 232:notoriOS.c    **** // ==============================================
 233:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 234:notoriOS.c    **** {
 533              		.loc 1 234 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 8
 536              		@ frame_needed = 1, uses_anonymous_args = 0
 537 0000 80B5     		push	{r7, lr}
 538              		.cfi_def_cfa_offset 8
 539              		.cfi_offset 7, -8
 540              		.cfi_offset 14, -4
 541 0002 82B0     		sub	sp, sp, #8
 542              		.cfi_def_cfa_offset 16
 543 0004 00AF     		add	r7, sp, #0
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
 546 0008 0B46     		mov	r3, r1
 547 000a FB70     		strb	r3, [r7, #3]
 235:notoriOS.c    ****     // if the countDownType matches the alarmType
 236:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 548              		.loc 1 236 0
 549 000c 7B68     		ldr	r3, [r7, #4]
 550 000e 1B79     		ldrb	r3, [r3, #4]
 551 0010 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 15


 552 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 553 0014 9A42     		cmp	r2, r3
 554 0016 12D1     		bne	.L24
 237:notoriOS.c    ****        
 238:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 239:notoriOS.c    ****         // Decrement the count down value by 1
 240:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 555              		.loc 1 240 0
 556 0018 7B68     		ldr	r3, [r7, #4]
 557 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 558 001c 1BB2     		sxth	r3, r3
 559 001e 9BB2     		uxth	r3, r3
 560 0020 013B     		subs	r3, r3, #1
 561 0022 9BB2     		uxth	r3, r3
 562 0024 1AB2     		sxth	r2, r3
 563 0026 7B68     		ldr	r3, [r7, #4]
 564 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 241:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 242:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 565              		.loc 1 242 0
 566 002a 7B68     		ldr	r3, [r7, #4]
 567 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 568 002e 1BB2     		sxth	r3, r3
 569 0030 002B     		cmp	r3, #0
 570 0032 04DC     		bgt	.L24
 243:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 571              		.loc 1 243 0
 572 0034 7868     		ldr	r0, [r7, #4]
 573 0036 FFF7FEFF 		bl	ResetAlarm
 244:notoriOS.c    ****             return 1u;
 574              		.loc 1 244 0
 575 003a 0123     		movs	r3, #1
 576 003c 00E0     		b	.L25
 577              	.L24:
 245:notoriOS.c    ****         } 
 246:notoriOS.c    ****     }
 247:notoriOS.c    ****     
 248:notoriOS.c    ****     return 0u; // Otherwise return 0
 578              		.loc 1 248 0
 579 003e 0023     		movs	r3, #0
 580              	.L25:
 249:notoriOS.c    **** }
 581              		.loc 1 249 0
 582 0040 1846     		mov	r0, r3
 583 0042 0837     		adds	r7, r7, #8
 584              		.cfi_def_cfa_offset 8
 585 0044 BD46     		mov	sp, r7
 586              		.cfi_def_cfa_register 13
 587              		@ sp needed
 588 0046 80BD     		pop	{r7, pc}
 589              		.cfi_endproc
 590              	.LFE69:
 591              		.size	AlarmReady, .-AlarmReady
 592              		.section	.text.ResetAlarm,"ax",%progbits
 593              		.align	2
 594              		.global	ResetAlarm
 595              		.thumb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 16


 596              		.thumb_func
 597              		.type	ResetAlarm, %function
 598              	ResetAlarm:
 599              	.LFB70:
 250:notoriOS.c    **** 
 251:notoriOS.c    **** // ==============================================
 252:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 253:notoriOS.c    **** // ==============================================
 254:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 255:notoriOS.c    **** {
 600              		.loc 1 255 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 8
 603              		@ frame_needed = 1, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 605 0000 80B4     		push	{r7}
 606              		.cfi_def_cfa_offset 4
 607              		.cfi_offset 7, -4
 608 0002 83B0     		sub	sp, sp, #12
 609              		.cfi_def_cfa_offset 16
 610 0004 00AF     		add	r7, sp, #0
 611              		.cfi_def_cfa_register 7
 612 0006 7860     		str	r0, [r7, #4]
 256:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 257:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 613              		.loc 1 257 0
 614 0008 7B68     		ldr	r3, [r7, #4]
 615 000a 1B88     		ldrh	r3, [r3]	@ movhi
 616 000c 9BB2     		uxth	r3, r3
 617 000e 1AB2     		sxth	r2, r3
 618 0010 7B68     		ldr	r3, [r7, #4]
 619 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 258:notoriOS.c    **** }
 620              		.loc 1 258 0
 621 0014 00BF     		nop
 622 0016 0C37     		adds	r7, r7, #12
 623              		.cfi_def_cfa_offset 4
 624 0018 BD46     		mov	sp, r7
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 001a 80BC     		pop	{r7}
 628              		.cfi_restore 7
 629              		.cfi_def_cfa_offset 0
 630 001c 7047     		bx	lr
 631              		.cfi_endproc
 632              	.LFE70:
 633              		.size	ResetAlarm, .-ResetAlarm
 634 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 635              		.align	2
 636              		.global	CreateAlarm
 637              		.thumb
 638              		.thumb_func
 639              		.type	CreateAlarm, %function
 640              	CreateAlarm:
 641              	.LFB71:
 259:notoriOS.c    **** 
 260:notoriOS.c    **** // ==============================================
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 17


 261:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 262:notoriOS.c    **** // ==============================================
 263:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 264:notoriOS.c    **** {
 642              		.loc 1 264 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 16
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647 0000 80B4     		push	{r7}
 648              		.cfi_def_cfa_offset 4
 649              		.cfi_offset 7, -4
 650 0002 85B0     		sub	sp, sp, #20
 651              		.cfi_def_cfa_offset 24
 652 0004 00AF     		add	r7, sp, #0
 653              		.cfi_def_cfa_register 7
 654 0006 7860     		str	r0, [r7, #4]
 655 0008 0846     		mov	r0, r1
 656 000a 1146     		mov	r1, r2
 657 000c 1A46     		mov	r2, r3
 658 000e 0346     		mov	r3, r0	@ movhi
 659 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 660 0012 0B46     		mov	r3, r1
 661 0014 7B70     		strb	r3, [r7, #1]
 662 0016 1346     		mov	r3, r2
 663 0018 3B70     		strb	r3, [r7]
 265:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 266:notoriOS.c    ****     alarm newAlarm;
 267:notoriOS.c    ****     
 268:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 269:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 664              		.loc 1 269 0
 665 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 666 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 270:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 667              		.loc 1 270 0
 668 001e 7B78     		ldrb	r3, [r7, #1]
 669 0020 3B73     		strb	r3, [r7, #12]
 271:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 670              		.loc 1 271 0
 671 0022 3B78     		ldrb	r3, [r7]
 672 0024 7B73     		strb	r3, [r7, #13]
 272:notoriOS.c    ****     
 273:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 274:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 275:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 673              		.loc 1 275 0
 674 0026 B7F90230 		ldrsh	r3, [r7, #2]
 675 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 276:notoriOS.c    ****     
 277:notoriOS.c    ****     return newAlarm;
 676              		.loc 1 277 0
 677 002c 7B68     		ldr	r3, [r7, #4]
 678 002e 1A46     		mov	r2, r3
 679 0030 07F10803 		add	r3, r7, #8
 680 0034 1868     		ldr	r0, [r3]	@ unaligned
 681 0036 1060     		str	r0, [r2]	@ unaligned
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 18


 682 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 683 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 278:notoriOS.c    ****     
 279:notoriOS.c    **** }
 684              		.loc 1 279 0
 685 003c 7868     		ldr	r0, [r7, #4]
 686 003e 1437     		adds	r7, r7, #20
 687              		.cfi_def_cfa_offset 4
 688 0040 BD46     		mov	sp, r7
 689              		.cfi_def_cfa_register 13
 690              		@ sp needed
 691 0042 80BC     		pop	{r7}
 692              		.cfi_restore 7
 693              		.cfi_def_cfa_offset 0
 694 0044 7047     		bx	lr
 695              		.cfi_endproc
 696              	.LFE71:
 697              		.size	CreateAlarm, .-CreateAlarm
 698 0046 00BF     		.section	.rodata
 699 001e 0000     		.align	2
 700              	.LC2:
 701 0020 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 701      2D2D2D2D 
 701      2D2D2D2D 
 701      2D424547 
 701      494E2054 
 702 004a 0000     		.align	2
 703              	.LC3:
 704 004c 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 704      3D25732C 
 704      2053494D 
 704      49443D25 
 704      732C2044 
 705 006b 00       		.align	2
 706              	.LC4:
 707 006c 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 707      2D2D2D2D 
 707      2D2D2D2D 
 707      2D2D2D45 
 707      4E442054 
 708 0095 00       		.ascii	"\000"
 709              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 710              		.align	2
 711              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 712              		.thumb
 713              		.thumb_func
 714              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 715              	ChickityCheckYourselfBeforeYouWreckYourself:
 716              	.LFB72:
 280:notoriOS.c    **** 
 281:notoriOS.c    **** // ==============================================
 282:notoriOS.c    **** // Dropping bombs on your moms
 283:notoriOS.c    **** //      - Ice Cube (1992)
 284:notoriOS.c    **** //
 285:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 286:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 287:notoriOS.c    **** // ==============================================
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 19


 288:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 717              		.loc 1 288 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 1944
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721 0000 90B5     		push	{r4, r7, lr}
 722              		.cfi_def_cfa_offset 12
 723              		.cfi_offset 4, -12
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 ADF6141D 		subw	sp, sp, #2324
 727              		.cfi_def_cfa_offset 2336
 728 0006 5EAF     		add	r7, sp, #376
 729              		.cfi_def_cfa 7, 1960
 289:notoriOS.c    **** 
 290:notoriOS.c    ****     //test_t t_influx = influx_test();
 291:notoriOS.c    ****     //printTestStatus(t_influx);
 292:notoriOS.c    ****     
 293:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 730              		.loc 1 293 0
 731 0008 3849     		ldr	r1, .L30
 732 000a 0320     		movs	r0, #3
 733 000c FFF7FEFF 		bl	printNotif
 294:notoriOS.c    ****     
 295:notoriOS.c    ****     // Test level sensor
 296:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 734              		.loc 1 296 0
 735 0010 07F21463 		addw	r3, r7, #1556
 736 0014 1846     		mov	r0, r3
 737 0016 FFF7FEFF 		bl	level_sensor_test
 297:notoriOS.c    ****     printTestStatus(t_level_sensor);
 738              		.loc 1 297 0
 739 001a 07F21464 		addw	r4, r7, #1556
 740 001e 6846     		mov	r0, sp
 741 0020 04F11003 		add	r3, r4, #16
 742 0024 40F27112 		movw	r2, #369
 743 0028 1946     		mov	r1, r3
 744 002a FFF7FEFF 		bl	memcpy
 745 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 746 0032 FFF7FEFF 		bl	printTestStatus
 298:notoriOS.c    ****     
 299:notoriOS.c    ****     // Test voltages
 300:notoriOS.c    ****     test_t t_voltages = voltages_test();
 747              		.loc 1 300 0
 748 0036 07F59263 		add	r3, r7, #1168
 749 003a 1846     		mov	r0, r3
 750 003c FFF7FEFF 		bl	voltages_test
 301:notoriOS.c    ****     printTestStatus(t_voltages);
 751              		.loc 1 301 0
 752 0040 07F59264 		add	r4, r7, #1168
 753 0044 6846     		mov	r0, sp
 754 0046 04F11003 		add	r3, r4, #16
 755 004a 40F27112 		movw	r2, #369
 756 004e 1946     		mov	r1, r3
 757 0050 FFF7FEFF 		bl	memcpy
 758 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 759 0058 FFF7FEFF 		bl	printTestStatus
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 20


 302:notoriOS.c    ****  
 303:notoriOS.c    ****     // Test voltages
 304:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 760              		.loc 1 304 0
 761 005c 07F54373 		add	r3, r7, #780
 762 0060 1846     		mov	r0, r3
 763 0062 FFF7FEFF 		bl	pressure_sensor_test
 305:notoriOS.c    ****     printTestStatus(t_pressure);
 764              		.loc 1 305 0
 765 0066 07F54374 		add	r4, r7, #780
 766 006a 6846     		mov	r0, sp
 767 006c 04F11003 		add	r3, r4, #16
 768 0070 40F27112 		movw	r2, #369
 769 0074 1946     		mov	r1, r3
 770 0076 FFF7FEFF 		bl	memcpy
 771 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 772 007e FFF7FEFF 		bl	printTestStatus
 306:notoriOS.c    ****     
 307:notoriOS.c    ****     // Test SD card
 308:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 773              		.loc 1 308 0
 774 0082 07F5C473 		add	r3, r7, #392
 775 0086 1846     		mov	r0, r3
 776 0088 FFF7FEFF 		bl	SD_card_test
 309:notoriOS.c    ****     printTestStatus(t_sd_card);
 777              		.loc 1 309 0
 778 008c 07F5C474 		add	r4, r7, #392
 779 0090 6846     		mov	r0, sp
 780 0092 04F11003 		add	r3, r4, #16
 781 0096 40F27112 		movw	r2, #369
 782 009a 1946     		mov	r1, r3
 783 009c FFF7FEFF 		bl	memcpy
 784 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 785 00a4 FFF7FEFF 		bl	printTestStatus
 310:notoriOS.c    ****     
 311:notoriOS.c    ****     // Test modem
 312:notoriOS.c    ****     test_t t_modem = modem_test();
 786              		.loc 1 312 0
 787 00a8 3B1D     		adds	r3, r7, #4
 788 00aa 1846     		mov	r0, r3
 789 00ac FFF7FEFF 		bl	modem_test
 313:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 790              		.loc 1 313 0
 791 00b0 0F4B     		ldr	r3, .L30+4
 792 00b2 0093     		str	r3, [sp]
 793 00b4 0F4B     		ldr	r3, .L30+8
 794 00b6 104A     		ldr	r2, .L30+12
 795 00b8 1049     		ldr	r1, .L30+16
 796 00ba 0320     		movs	r0, #3
 797 00bc FFF7FEFF 		bl	printNotif
 314:notoriOS.c    ****     printTestStatus(t_modem);
 798              		.loc 1 314 0
 799 00c0 3C1D     		adds	r4, r7, #4
 800 00c2 6846     		mov	r0, sp
 801 00c4 04F11003 		add	r3, r4, #16
 802 00c8 40F27112 		movw	r2, #369
 803 00cc 1946     		mov	r1, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 21


 804 00ce FFF7FEFF 		bl	memcpy
 805 00d2 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 806 00d6 FFF7FEFF 		bl	printTestStatus
 315:notoriOS.c    ****     
 316:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 807              		.loc 1 316 0
 808 00da 0949     		ldr	r1, .L30+20
 809 00dc 0320     		movs	r0, #3
 810 00de FFF7FEFF 		bl	printNotif
 317:notoriOS.c    **** 
 318:notoriOS.c    **** }
 811              		.loc 1 318 0
 812 00e2 00BF     		nop
 813 00e4 07F29C77 		addw	r7, r7, #1948
 814              		.cfi_def_cfa_offset 12
 815 00e8 BD46     		mov	sp, r7
 816              		.cfi_def_cfa_register 13
 817              		@ sp needed
 818 00ea 90BD     		pop	{r4, r7, pc}
 819              	.L31:
 820              		.align	2
 821              	.L30:
 822 00ec 20000000 		.word	.LC2
 823 00f0 04000000 		.word	system_info+4
 824 00f4 00000000 		.word	modem_info
 825 00f8 28000000 		.word	modem_info+40
 826 00fc 4C000000 		.word	.LC3
 827 0100 6C000000 		.word	.LC4
 828              		.cfi_endproc
 829              	.LFE72:
 830              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 831              		.section	.text.main,"ax",%progbits
 832              		.align	2
 833              		.global	main
 834              		.thumb
 835              		.thumb_func
 836              		.type	main, %function
 837              	main:
 838              	.LFB73:
 319:notoriOS.c    **** 
 320:notoriOS.c    **** // ==============================================
 321:notoriOS.c    **** // Processes Core Tasks
 322:notoriOS.c    **** // ==============================================
 323:notoriOS.c    **** int main(void)
 324:notoriOS.c    **** {
 839              		.loc 1 324 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0000 80B5     		push	{r7, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 7, -8
 846              		.cfi_offset 14, -4
 847 0002 00AF     		add	r7, sp, #0
 848              		.cfi_def_cfa_register 7
 325:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 849              		.loc 1 325 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 22


 850              		.syntax unified
 851              	@ 325 "notoriOS.c" 1
 852 0004 62B6     		CPSIE   i
 853              	@ 0 "" 2
 326:notoriOS.c    **** 
 327:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 854              		.loc 1 327 0
 855              		.thumb
 856              		.syntax unified
 857 0006 FFF7FEFF 		bl	ReadyOrNot
 328:notoriOS.c    ****     
 329:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 858              		.loc 1 329 0
 859 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 860              	.L34:
 330:notoriOS.c    ****    
 331:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 332:notoriOS.c    ****     {
 333:notoriOS.c    ****         
 334:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 861              		.loc 1 334 0
 862 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 863 0012 0346     		mov	r3, r0
 864 0014 002B     		cmp	r3, #0
 865 0016 FAD1     		bne	.L34
 335:notoriOS.c    ****         {
 336:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 866              		.loc 1 336 0
 867 0018 FFF7FEFF 		bl	LayBack
 337:notoriOS.c    ****         }
 338:notoriOS.c    ****     }
 868              		.loc 1 338 0
 869 001c F7E7     		b	.L34
 870              		.cfi_endproc
 871              	.LFE73:
 872              		.size	main, .-main
 873 001e 00BF     		.section	.rodata
 874 0096 0000     		.align	2
 875              	.LC5:
 876 0098 4D6F6465 		.ascii	"Modem is ready.\000"
 876      6D206973 
 876      20726561 
 876      64792E00 
 877              		.align	2
 878              	.LC6:
 879 00a8 256400   		.ascii	"%d\000"
 880 00ab 00       		.align	2
 881              	.LC7:
 882 00ac 72737270 		.ascii	"rsrp\000"
 882      00
 883 00b1 000000   		.align	2
 884              	.LC8:
 885 00b4 72736370 		.ascii	"rscp\000"
 885      00
 886 00b9 000000   		.align	2
 887              	.LC9:
 888 00bc 7472795F 		.ascii	"try_counter\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 23


 888      636F756E 
 888      74657200 
 889              		.align	2
 890              	.LC10:
 891 00c8 64617461 		.ascii	"data_count_sent\000"
 891      5F636F75 
 891      6E745F73 
 891      656E7400 
 892              		.align	2
 893              	.LC11:
 894 00d8 64617461 		.ascii	"data_count_desired\000"
 894      5F636F75 
 894      6E745F64 
 894      65736972 
 894      656400
 895 00eb 00       		.align	2
 896              	.LC12:
 897 00ec 42656769 		.ascii	"Begin HTTP post.\000"
 897      6E204854 
 897      54502070 
 897      6F73742E 
 897      00
 898 00fd 000000   		.align	2
 899              	.LC13:
 900 0100 34376461 		.ascii	"47da7d0ab7ef7b909b30faa95d8f54724a003fd5\000"
 900      37643061 
 900      62376566 
 900      37623930 
 900      39623330 
 901 0129 000000   		.align	2
 902              	.LC14:
 903 012c 6170692F 		.ascii	"api/v1/write\000"
 903      76312F77 
 903      72697465 
 903      00
 904 0139 000000   		.align	2
 905              	.LC15:
 906 013c 48545450 		.ascii	"HTTP route: %s\000"
 906      20726F75 
 906      74653A20 
 906      257300
 907 014b 00       		.align	2
 908              	.LC16:
 909 014c 312E3100 		.ascii	"1.1\000"
 910              		.align	2
 911              	.LC17:
 912 0150 00       		.ascii	"\000"
 913 0151 000000   		.align	2
 914              	.LC18:
 915 0154 436C6F73 		.ascii	"Close\000"
 915      6500
 916 015a 0000     		.align	2
 917              	.LC19:
 918 015c 504F5354 		.ascii	"POST\000"
 918      00
 919 0161 000000   		.align	2
 920              	.LC20:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 24


 921 0164 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 921      20485454 
 921      50205265 
 921      71756573 
 921      743A2025 
 922 017a 0000     		.align	2
 923              	.LC21:
 924 017c 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 924      443D312C 
 924      302C2564 
 924      2C222573 
 924      222C302C 
 925 0195 000000   		.align	2
 926              	.LC22:
 927 0198 257300   		.ascii	"%s\000"
 928 019b 00       		.align	2
 929              	.LC23:
 930 019c 4F4B00   		.ascii	"OK\000"
 931              		.global	__aeabi_ui2d
 932              		.global	__aeabi_d2iz
 933 019f 00       		.align	2
 934              	.LC24:
 935 01a0 68747470 		.ascii	"http_request len: %d\000"
 935      5F726571 
 935      75657374 
 935      206C656E 
 935      3A202564 
 936 01b5 000000   		.align	2
 937              	.LC25:
 938 01b8 23206F66 		.ascii	"# of packets: %d\000"
 938      20706163 
 938      6B657473 
 938      3A202564 
 938      00
 939 01c9 000000   		.align	2
 940              	.LC26:
 941 01cc 3E00     		.ascii	">\000"
 942 01ce 0000     		.align	2
 943              	.LC27:
 944 01d0 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 944      53454E44 
 944      3D310D0A 
 944      00
 945 01dd 000000   		.align	2
 946              	.LC28:
 947 01e0 1A00     		.ascii	"\032\000"
 948 01e2 0000     		.align	2
 949              	.LC29:
 950 01e4 6368756E 		.ascii	"chunk %d: %s\000"
 950      6B202564 
 950      3A202573 
 950      00
 951 01f1 000000   		.align	2
 952              	.LC30:
 953 01f4 5352494E 		.ascii	"SRING\000"
 953      4700
 954 01fa 0000     		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 25


 955              	.LC31:
 956 01fc 4F532D4F 		.ascii	"OS-OK\000"
 956      4B00
 957 0202 0000     		.align	2
 958              	.LC32:
 959 0204 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 959      52454356 
 959      3D312C31 
 959      3030300D 
 959      00
 960 0215 000000   		.align	2
 961              	.LC33:
 962 0218 6D6F6465 		.ascii	"modem_tx_time\000"
 962      6D5F7478 
 962      5F74696D 
 962      6500
 963 0226 0000     		.align	2
 964              	.LC34:
 965 0228 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 965      4F3A2043 
 965      6F756C64 
 965      206E6F74 
 965      20726563 
 966              		.section	.text.syncData,"ax",%progbits
 967              		.align	2
 968              		.global	syncData
 969              		.thumb
 970              		.thumb_func
 971              		.type	syncData, %function
 972              	syncData:
 973              	.LFB74:
 339:notoriOS.c    **** }
 340:notoriOS.c    **** 
 341:notoriOS.c    **** // ==============================================
 342:notoriOS.c    **** // Syncs data with server
 343:notoriOS.c    **** // Returns 0 when done
 344:notoriOS.c    **** // ==============================================
 345:notoriOS.c    **** uint8 syncData(){
 974              		.loc 1 345 0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 1360
 977              		@ frame_needed = 1, uses_anonymous_args = 0
 978 0000 90B5     		push	{r4, r7, lr}
 979              		.cfi_def_cfa_offset 12
 980              		.cfi_offset 4, -12
 981              		.cfi_offset 7, -8
 982              		.cfi_offset 14, -4
 983 0002 ADF26C5D 		subw	sp, sp, #1388
 984              		.cfi_def_cfa_offset 1400
 985 0006 06AF     		add	r7, sp, #24
 986              		.cfi_def_cfa 7, 1376
 346:notoriOS.c    ****     
 347:notoriOS.c    ****     /*
 348:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 349:notoriOS.c    ****     uint8 check = 0;
 350:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 351:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 26


 352:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 353:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 354:notoriOS.c    ****     */
 355:notoriOS.c    **** 
 356:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 357:notoriOS.c    ****     LED_Write(1u);
 987              		.loc 1 357 0
 988 0008 0120     		movs	r0, #1
 989 000a FFF7FEFF 		bl	LED_Write
 358:notoriOS.c    ****     CyDelay(100u);
 990              		.loc 1 358 0
 991 000e 6420     		movs	r0, #100
 992 0010 FFF7FEFF 		bl	CyDelay
 359:notoriOS.c    ****     LED_Write(0u);
 993              		.loc 1 359 0
 994 0014 0020     		movs	r0, #0
 995 0016 FFF7FEFF 		bl	LED_Write
 360:notoriOS.c    **** 
 361:notoriOS.c    ****     
 362:notoriOS.c    ****     // If there's no data, not need to do anything
 363:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 996              		.loc 1 363 0
 997 001a FFF7FEFF 		bl	sizeOfDataStack
 998 001e 0346     		mov	r3, r0
 999 0020 002B     		cmp	r3, #0
 1000 0022 01D1     		bne	.L36
 364:notoriOS.c    ****         return 0u;
 1001              		.loc 1 364 0
 1002 0024 0023     		movs	r3, #0
 1003 0026 03E2     		b	.L37
 1004              	.L36:
 365:notoriOS.c    ****         }
 366:notoriOS.c    ****     
 367:notoriOS.c    ****     // Create request body, in this case influx
 368:notoriOS.c    ****     // Place body into HTTP request header
 369:notoriOS.c    ****     // Fire up modem and get it out
 370:notoriOS.c    ****      
 371:notoriOS.c    ****     
 372:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 373:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1005              		.loc 1 373 0
 1006 0028 FFF7FEFF 		bl	modem_get_state
 1007 002c 0346     		mov	r3, r0
 1008 002e 002B     		cmp	r3, #0
 1009 0030 11D1     		bne	.L38
 374:notoriOS.c    **** 
 375:notoriOS.c    ****         try_counter++;
 1010              		.loc 1 375 0
 1011 0032 AE4B     		ldr	r3, .L50
 1012 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1013 0036 0133     		adds	r3, r3, #1
 1014 0038 DAB2     		uxtb	r2, r3
 1015 003a AC4B     		ldr	r3, .L50
 1016 003c 1A70     		strb	r2, [r3]
 376:notoriOS.c    ****         	
 377:notoriOS.c    ****         if(try_counter <= 2){
 1017              		.loc 1 377 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 27


 1018 003e AB4B     		ldr	r3, .L50
 1019 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1020 0042 022B     		cmp	r3, #2
 1021 0044 02D8     		bhi	.L39
 378:notoriOS.c    ****             modem_power_up();
 1022              		.loc 1 378 0
 1023 0046 FFF7FEFF 		bl	modem_power_up
 1024 004a F0E1     		b	.L40
 1025              	.L39:
 379:notoriOS.c    ****         }else{
 380:notoriOS.c    ****             try_counter = 0;
 1026              		.loc 1 380 0
 1027 004c A74B     		ldr	r3, .L50
 1028 004e 0022     		movs	r2, #0
 1029 0050 1A70     		strb	r2, [r3]
 381:notoriOS.c    ****             return 0u;
 1030              		.loc 1 381 0
 1031 0052 0023     		movs	r3, #0
 1032 0054 ECE1     		b	.L37
 1033              	.L38:
 382:notoriOS.c    ****             }
 383:notoriOS.c    ****             
 384:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1034              		.loc 1 384 0
 1035 0056 FFF7FEFF 		bl	modem_get_state
 1036 005a 0346     		mov	r3, r0
 1037 005c 042B     		cmp	r3, #4
 1038 005e 40F0E681 		bne	.L40
 1039              	.LBB2:
 385:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1040              		.loc 1 385 0
 1041 0062 A349     		ldr	r1, .L50+4
 1042 0064 0020     		movs	r0, #0
 1043 0066 FFF7FEFF 		bl	printNotif
 386:notoriOS.c    ****         
 387:notoriOS.c    ****         http_request[0] = '\0';
 1044              		.loc 1 387 0
 1045 006a A24B     		ldr	r3, .L50+8
 1046 006c 0022     		movs	r2, #0
 1047 006e 1A70     		strb	r2, [r3]
 388:notoriOS.c    ****         http_body[0] = '\0';
 1048              		.loc 1 388 0
 1049 0070 A14B     		ldr	r3, .L50+12
 1050 0072 0022     		movs	r2, #0
 1051 0074 1A70     		strb	r2, [r3]
 389:notoriOS.c    ****         http_route[0] = '\0';
 1052              		.loc 1 389 0
 1053 0076 A14B     		ldr	r3, .L50+16
 1054 0078 0022     		movs	r2, #0
 1055 007a 1A70     		strb	r2, [r3]
 390:notoriOS.c    ****         //char *base = "write";
 391:notoriOS.c    ****         
 392:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 393:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 394:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1056              		.loc 1 394 0
 1057 007c A04B     		ldr	r3, .L50+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 28


 1058 007e 5B69     		ldr	r3, [r3, #20]
 1059 0080 07F5A560 		add	r0, r7, #1320
 1060 0084 9F4A     		ldr	r2, .L50+24
 1061 0086 1421     		movs	r1, #20
 1062 0088 FFF7FEFF 		bl	snprintf
 395:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1063              		.loc 1 395 0
 1064 008c FFF7FEFF 		bl	getTimeStamp
 1065 0090 0246     		mov	r2, r0
 1066 0092 07F5A563 		add	r3, r7, #1320
 1067 0096 1946     		mov	r1, r3
 1068 0098 9B48     		ldr	r0, .L50+28
 1069 009a FFF7FEFF 		bl	pushData
 396:notoriOS.c    ****         
 397:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 398:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1070              		.loc 1 398 0
 1071 009e 984B     		ldr	r3, .L50+20
 1072 00a0 9B68     		ldr	r3, [r3, #8]
 1073 00a2 07F21450 		addw	r0, r7, #1300
 1074 00a6 974A     		ldr	r2, .L50+24
 1075 00a8 1421     		movs	r1, #20
 1076 00aa FFF7FEFF 		bl	snprintf
 399:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1077              		.loc 1 399 0
 1078 00ae FFF7FEFF 		bl	getTimeStamp
 1079 00b2 0246     		mov	r2, r0
 1080 00b4 07F21453 		addw	r3, r7, #1300
 1081 00b8 1946     		mov	r1, r3
 1082 00ba 9448     		ldr	r0, .L50+32
 1083 00bc FFF7FEFF 		bl	pushData
 400:notoriOS.c    ****         
 401:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 402:notoriOS.c    ****         char c_try_counter[20];
 403:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1084              		.loc 1 403 0
 1085 00c0 8A4B     		ldr	r3, .L50
 1086 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1087 00c4 07F5A060 		add	r0, r7, #1280
 1088 00c8 8E4A     		ldr	r2, .L50+24
 1089 00ca 1421     		movs	r1, #20
 1090 00cc FFF7FEFF 		bl	snprintf
 404:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1091              		.loc 1 404 0
 1092 00d0 FFF7FEFF 		bl	getTimeStamp
 1093 00d4 0246     		mov	r2, r0
 1094 00d6 07F5A063 		add	r3, r7, #1280
 1095 00da 1946     		mov	r1, r3
 1096 00dc 8C48     		ldr	r0, .L50+36
 1097 00de FFF7FEFF 		bl	pushData
 405:notoriOS.c    ****         
 406:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 407:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 408:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 409:notoriOS.c    ****         if(buffer_overflow == false){
 1098              		.loc 1 409 0
 1099 00e2 8C4B     		ldr	r3, .L50+40
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 29


 1100 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101 00e6 83F00103 		eor	r3, r3, #1
 1102 00ea DBB2     		uxtb	r3, r3
 1103 00ec 002B     		cmp	r3, #0
 1104 00ee 16D0     		beq	.L41
 1105              	.LBB3:
 410:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1106              		.loc 1 410 0
 1107 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1108 00f4 0346     		mov	r3, r0
 1109 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 411:notoriOS.c    ****             char c_data_count_sent[20];
 412:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1110              		.loc 1 412 0
 1111 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1112 00fe 07F59B60 		add	r0, r7, #1240
 1113 0102 804A     		ldr	r2, .L50+24
 1114 0104 1421     		movs	r1, #20
 1115 0106 FFF7FEFF 		bl	snprintf
 413:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1116              		.loc 1 413 0
 1117 010a FFF7FEFF 		bl	getTimeStamp
 1118 010e 0246     		mov	r2, r0
 1119 0110 07F59B63 		add	r3, r7, #1240
 1120 0114 1946     		mov	r1, r3
 1121 0116 8048     		ldr	r0, .L50+44
 1122 0118 FFF7FEFF 		bl	pushData
 1123              	.LBE3:
 1124 011c 0FE0     		b	.L42
 1125              	.L41:
 1126              	.LBB4:
 414:notoriOS.c    ****         }else{
 415:notoriOS.c    ****             char c_data_count_sent[20];
 416:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1127              		.loc 1 416 0
 1128 011e 07F2C440 		addw	r0, r7, #1220
 1129 0122 9623     		movs	r3, #150
 1130 0124 774A     		ldr	r2, .L50+24
 1131 0126 1421     		movs	r1, #20
 1132 0128 FFF7FEFF 		bl	snprintf
 417:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1133              		.loc 1 417 0
 1134 012c FFF7FEFF 		bl	getTimeStamp
 1135 0130 0246     		mov	r2, r0
 1136 0132 07F2C443 		addw	r3, r7, #1220
 1137 0136 1946     		mov	r1, r3
 1138 0138 7748     		ldr	r0, .L50+44
 1139 013a FFF7FEFF 		bl	pushData
 1140              	.L42:
 1141              	.LBE4:
 418:notoriOS.c    ****         }
 419:notoriOS.c    ****         
 420:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 421:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1142              		.loc 1 421 0
 1143 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1144 0142 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 30


 1145 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 422:notoriOS.c    ****         char c_data_count_desired[20];
 423:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 424:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1146              		.loc 1 424 0
 1147 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1148 014c 013B     		subs	r3, r3, #1
 1149 014e 07F2EC40 		addw	r0, r7, #1260
 1150 0152 6C4A     		ldr	r2, .L50+24
 1151 0154 1421     		movs	r1, #20
 1152 0156 FFF7FEFF 		bl	snprintf
 425:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1153              		.loc 1 425 0
 1154 015a FFF7FEFF 		bl	getTimeStamp
 1155 015e 0246     		mov	r2, r0
 1156 0160 07F2EC43 		addw	r3, r7, #1260
 1157 0164 1946     		mov	r1, r3
 1158 0166 6D48     		ldr	r0, .L50+48
 1159 0168 FFF7FEFF 		bl	pushData
 426:notoriOS.c    ****         
 427:notoriOS.c    ****         // Construct HTPP request
 428:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1160              		.loc 1 428 0
 1161 016c 6C49     		ldr	r1, .L50+52
 1162 016e 0020     		movs	r0, #0
 1163 0170 FFF7FEFF 		bl	printNotif
 429:notoriOS.c    ****         
 430:notoriOS.c    ****         // Old influx API
 431:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 432:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1164              		.loc 1 432 0
 1165 0174 6B4B     		ldr	r3, .L50+56
 1166 0176 6C4A     		ldr	r2, .L50+60
 1167 0178 6C49     		ldr	r1, .L50+64
 1168 017a 6048     		ldr	r0, .L50+16
 1169 017c FFF7FEFF 		bl	construct_malcom_route
 433:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1170              		.loc 1 433 0
 1171 0180 5E4A     		ldr	r2, .L50+16
 1172 0182 6B49     		ldr	r1, .L50+68
 1173 0184 0020     		movs	r0, #0
 1174 0186 FFF7FEFF 		bl	printNotif
 434:notoriOS.c    ****         
 435:notoriOS.c    ****         //OLD INFLUX API
 436:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 437:notoriOS.c    ****         construct_malcom_body(http_body);
 1175              		.loc 1 437 0
 1176 018a 5B48     		ldr	r0, .L50+12
 1177 018c FFF7FEFF 		bl	construct_malcom_body
 438:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1178              		.loc 1 438 0
 1179 0190 684B     		ldr	r3, .L50+72
 1180 0192 5B6E     		ldr	r3, [r3, #100]
 1181 0194 684A     		ldr	r2, .L50+76
 1182 0196 0592     		str	r2, [sp, #20]
 1183 0198 0022     		movs	r2, #0
 1184 019a 0492     		str	r2, [sp, #16]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 31


 1185 019c 674A     		ldr	r2, .L50+80
 1186 019e 0392     		str	r2, [sp, #12]
 1187 01a0 674A     		ldr	r2, .L50+84
 1188 01a2 0292     		str	r2, [sp, #8]
 1189 01a4 674A     		ldr	r2, .L50+88
 1190 01a6 0192     		str	r2, [sp, #4]
 1191 01a8 0093     		str	r3, [sp]
 1192 01aa 544B     		ldr	r3, .L50+16
 1193 01ac 614A     		ldr	r2, .L50+72
 1194 01ae 5249     		ldr	r1, .L50+12
 1195 01b0 5048     		ldr	r0, .L50+8
 1196 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 439:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1197              		.loc 1 439 0
 1198 01b6 4F4A     		ldr	r2, .L50+8
 1199 01b8 6349     		ldr	r1, .L50+92
 1200 01ba 0020     		movs	r0, #0
 1201 01bc FFF7FEFF 		bl	printNotif
 440:notoriOS.c    ****         
 441:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 442:notoriOS.c    ****         // Open port and begin command line sequence
 443:notoriOS.c    ****         char portConfig[200];
 444:notoriOS.c    ****         uint8 status = 0u;
 1202              		.loc 1 444 0
 1203 01c0 0023     		movs	r3, #0
 1204 01c2 87F84535 		strb	r3, [r7, #1349]
 445:notoriOS.c    ****         
 446:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1205              		.loc 1 446 0
 1206 01c6 5B4B     		ldr	r3, .L50+72
 1207 01c8 5A6E     		ldr	r2, [r3, #100]
 1208 01ca 381D     		adds	r0, r7, #4
 1209 01cc 594B     		ldr	r3, .L50+72
 1210 01ce 0093     		str	r3, [sp]
 1211 01d0 1346     		mov	r3, r2
 1212 01d2 5E4A     		ldr	r2, .L50+96
 1213 01d4 C821     		movs	r1, #200
 1214 01d6 FFF7FEFF 		bl	snprintf
 447:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1215              		.loc 1 447 0
 1216 01da 3B1D     		adds	r3, r7, #4
 1217 01dc 1A46     		mov	r2, r3
 1218 01de 5C49     		ldr	r1, .L50+100
 1219 01e0 0020     		movs	r0, #0
 1220 01e2 FFF7FEFF 		bl	printNotif
 448:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1221              		.loc 1 448 0
 1222 01e6 3B1D     		adds	r3, r7, #4
 1223 01e8 42F21072 		movw	r2, #10000
 1224 01ec 5949     		ldr	r1, .L50+104
 1225 01ee 1846     		mov	r0, r3
 1226 01f0 FFF7FEFF 		bl	at_write_command
 1227 01f4 0346     		mov	r3, r0
 1228 01f6 87F84535 		strb	r3, [r7, #1349]
 449:notoriOS.c    ****         
 450:notoriOS.c    ****         // create character pointer to chunk through the http_request
 451:notoriOS.c    ****         char *chunk;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 32


 452:notoriOS.c    ****         // Set chunk to start where http_request starts
 453:notoriOS.c    ****         chunk = http_request;
 1229              		.loc 1 453 0
 1230 01fa 3E4B     		ldr	r3, .L50+8
 1231 01fc C7F84C35 		str	r3, [r7, #1356]
 454:notoriOS.c    ****         // variable for the number of packets to send
 455:notoriOS.c    ****         int8 packets;
 456:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1232              		.loc 1 456 0
 1233 0200 3C48     		ldr	r0, .L50+8
 1234 0202 FFF7FEFF 		bl	strlen
 1235 0206 0246     		mov	r2, r0
 1236 0208 534B     		ldr	r3, .L50+108
 1237 020a A3FB0223 		umull	r2, r3, r3, r2
 1238 020e 5B09     		lsrs	r3, r3, #5
 1239 0210 1846     		mov	r0, r3
 1240 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1241 0216 4FF00002 		mov	r2, #0
 1242 021a 504B     		ldr	r3, .L50+112
 1243 021c FFF7FEFF 		bl	nextafter
 1244 0220 0346     		mov	r3, r0
 1245 0222 0C46     		mov	r4, r1
 1246 0224 1846     		mov	r0, r3
 1247 0226 2146     		mov	r1, r4
 1248 0228 FFF7FEFF 		bl	ceil
 1249 022c 0346     		mov	r3, r0
 1250 022e 0C46     		mov	r4, r1
 1251 0230 1846     		mov	r0, r3
 1252 0232 2146     		mov	r1, r4
 1253 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1254 0238 0346     		mov	r3, r0
 1255 023a 87F84435 		strb	r3, [r7, #1348]
 457:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1256              		.loc 1 457 0
 1257 023e 2D48     		ldr	r0, .L50+8
 1258 0240 FFF7FEFF 		bl	strlen
 1259 0244 0346     		mov	r3, r0
 1260 0246 1A46     		mov	r2, r3
 1261 0248 4549     		ldr	r1, .L50+116
 1262 024a 0020     		movs	r0, #0
 1263 024c FFF7FEFF 		bl	printNotif
 458:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1264              		.loc 1 458 0
 1265 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1266 0254 1A46     		mov	r2, r3
 1267 0256 4349     		ldr	r1, .L50+120
 1268 0258 0020     		movs	r0, #0
 1269 025a FFF7FEFF 		bl	printNotif
 1270              	.LBB5:
 459:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 460:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1271              		.loc 1 460 0
 1272 025e 0023     		movs	r3, #0
 1273 0260 87F84B35 		strb	r3, [r7, #1355]
 1274 0264 9AE0     		b	.L43
 1275              	.L46:
 1276              	.LBB6:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 33


 461:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 462:notoriOS.c    ****             char http_chunk[1001];
 463:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 464:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 465:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1277              		.loc 1 465 0
 1278 0266 4FF47A72 		mov	r2, #1000
 1279 026a 3F49     		ldr	r1, .L50+124
 1280 026c 3F48     		ldr	r0, .L50+128
 1281 026e FFF7FEFF 		bl	at_write_command
 1282 0272 0346     		mov	r3, r0
 1283 0274 87F84535 		strb	r3, [r7, #1349]
 466:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 467:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1284              		.loc 1 467 0
 1285 0278 07F1CC00 		add	r0, r7, #204
 1286 027c D7F84C35 		ldr	r3, [r7, #1356]
 1287 0280 334A     		ldr	r2, .L50+100
 1288 0282 4FF4FA71 		mov	r1, #500
 1289 0286 FFF7FEFF 		bl	snprintf
 468:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 469:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1290              		.loc 1 469 0
 1291 028a 07F1CC03 		add	r3, r7, #204
 1292 028e 1846     		mov	r0, r3
 1293 0290 FFF7FEFF 		bl	strlen
 1294 0294 0346     		mov	r3, r0
 1295 0296 1A46     		mov	r2, r3
 1296 0298 07F1CC03 		add	r3, r7, #204
 1297 029c 1344     		add	r3, r3, r2
 1298 029e 3449     		ldr	r1, .L50+132
 1299 02a0 1A46     		mov	r2, r3
 1300 02a2 0B46     		mov	r3, r1
 1301 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1302 02a6 1380     		strh	r3, [r2]	@ unaligned
 470:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1303              		.loc 1 470 0
 1304 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1305 02ac 07F1CC03 		add	r3, r7, #204
 1306 02b0 3049     		ldr	r1, .L50+136
 1307 02b2 0020     		movs	r0, #0
 1308 02b4 FFF7FEFF 		bl	printNotif
 471:notoriOS.c    ****             // Send data to server
 472:notoriOS.c    ****             if ((packet+1) != packets){
 1309              		.loc 1 472 0
 1310 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1311 02bc 5A1C     		adds	r2, r3, #1
 1312 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1313 02c2 9A42     		cmp	r2, r3
 1314 02c4 58D0     		beq	.L44
 473:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1315              		.loc 1 473 0
 1316 02c6 07F1CC03 		add	r3, r7, #204
 1317 02ca 41F28832 		movw	r2, #5000
 1318 02ce 2149     		ldr	r1, .L50+104
 1319 02d0 1846     		mov	r0, r3
 1320 02d2 FFF7FEFF 		bl	at_write_command
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 34


 1321 02d6 0346     		mov	r3, r0
 1322 02d8 87F84535 		strb	r3, [r7, #1349]
 474:notoriOS.c    ****                 // Move the pointer forward 
 475:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1323              		.loc 1 475 0
 1324 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1325 02e0 03F2F313 		addw	r3, r3, #499
 1326 02e4 C7F84C35 		str	r3, [r7, #1356]
 1327 02e8 51E0     		b	.L45
 1328              	.L51:
 1329 02ea 00BF     		.align	2
 1330              	.L50:
 1331 02ec 00000000 		.word	try_counter
 1332 02f0 98000000 		.word	.LC5
 1333 02f4 00000000 		.word	http_request
 1334 02f8 00000000 		.word	http_body
 1335 02fc 00000000 		.word	http_route
 1336 0300 00000000 		.word	modem_stats
 1337 0304 A8000000 		.word	.LC6
 1338 0308 AC000000 		.word	.LC7
 1339 030c B4000000 		.word	.LC8
 1340 0310 BC000000 		.word	.LC9
 1341 0314 00000000 		.word	buffer_overflow
 1342 0318 C8000000 		.word	.LC10
 1343 031c D8000000 		.word	.LC11
 1344 0320 EC000000 		.word	.LC12
 1345 0324 00010000 		.word	.LC13
 1346 0328 28000000 		.word	modem_info+40
 1347 032c 2C010000 		.word	.LC14
 1348 0330 3C010000 		.word	.LC15
 1349 0334 00000000 		.word	system_settings
 1350 0338 4C010000 		.word	.LC16
 1351 033c 50010000 		.word	.LC17
 1352 0340 54010000 		.word	.LC18
 1353 0344 5C010000 		.word	.LC19
 1354 0348 64010000 		.word	.LC20
 1355 034c 7C010000 		.word	.LC21
 1356 0350 98010000 		.word	.LC22
 1357 0354 9C010000 		.word	.LC23
 1358 0358 D34D6210 		.word	274877907
 1359 035c 00407F40 		.word	1082081280
 1360 0360 A0010000 		.word	.LC24
 1361 0364 B8010000 		.word	.LC25
 1362 0368 CC010000 		.word	.LC26
 1363 036c D0010000 		.word	.LC27
 1364 0370 E0010000 		.word	.LC28
 1365 0374 E4010000 		.word	.LC29
 1366              	.L44:
 476:notoriOS.c    ****             }else{
 477:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1367              		.loc 1 477 0
 1368 0378 07F1CC03 		add	r3, r7, #204
 1369 037c 41F28832 		movw	r2, #5000
 1370 0380 2E49     		ldr	r1, .L52
 1371 0382 1846     		mov	r0, r3
 1372 0384 FFF7FEFF 		bl	at_write_command
 1373 0388 0346     		mov	r3, r0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 35


 1374 038a 87F84535 		strb	r3, [r7, #1349]
 1375              	.L45:
 1376              	.LBE6:
 460:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1377              		.loc 1 460 0 discriminator 2
 1378 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1379 0392 DBB2     		uxtb	r3, r3
 1380 0394 0133     		adds	r3, r3, #1
 1381 0396 DBB2     		uxtb	r3, r3
 1382 0398 87F84B35 		strb	r3, [r7, #1355]
 1383              	.L43:
 460:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1384              		.loc 1 460 0 is_stmt 0 discriminator 1
 1385 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1386 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1387 03a4 9A42     		cmp	r2, r3
 1388 03a6 FFF65EAF 		blt	.L46
 1389              	.LBE5:
 478:notoriOS.c    ****             }
 479:notoriOS.c    ****             
 480:notoriOS.c    ****         }
 481:notoriOS.c    ****         
 482:notoriOS.c    ****         // Read received buffer
 483:notoriOS.c    ****         // A good write will return code "OS-OK"
 484:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 485:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 486:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1390              		.loc 1 486 0 is_stmt 1
 1391 03aa 41F28832 		movw	r2, #5000
 1392 03ae 2449     		ldr	r1, .L52+4
 1393 03b0 2448     		ldr	r0, .L52+8
 1394 03b2 FFF7FEFF 		bl	at_write_command
 1395 03b6 0346     		mov	r3, r0
 1396 03b8 87F84535 		strb	r3, [r7, #1349]
 487:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 488:notoriOS.c    ****     
 489:notoriOS.c    ****   
 490:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 491:notoriOS.c    ****         if(status == 1u){
 1397              		.loc 1 491 0
 1398 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1399 03c0 012B     		cmp	r3, #1
 1400 03c2 1DD1     		bne	.L47
 1401              	.LBB7:
 492:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1402              		.loc 1 492 0
 1403 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 493:notoriOS.c    ****             Clear_Data_Stack();
 1404              		.loc 1 493 0
 1405 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 494:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1406              		.loc 1 494 0
 1407 03cc FFF7FEFF 		bl	getTimeStamp
 1408 03d0 0246     		mov	r2, r0
 1409 03d2 1D4B     		ldr	r3, .L52+12
 1410 03d4 1B68     		ldr	r3, [r3]
 1411 03d6 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 36


 1412 03d8 C7F84035 		str	r3, [r7, #1344]
 495:notoriOS.c    ****             char s_send_time[10];
 496:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1413              		.loc 1 496 0
 1414 03dc 07F59760 		add	r0, r7, #1208
 1415 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1416 03e4 194A     		ldr	r2, .L52+16
 1417 03e6 0A21     		movs	r1, #10
 1418 03e8 FFF7FEFF 		bl	snprintf
 497:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1419              		.loc 1 497 0
 1420 03ec FFF7FEFF 		bl	getTimeStamp
 1421 03f0 0246     		mov	r2, r0
 1422 03f2 07F59763 		add	r3, r7, #1208
 1423 03f6 1946     		mov	r1, r3
 1424 03f8 1548     		ldr	r0, .L52+20
 1425 03fa FFF7FEFF 		bl	pushData
 1426              	.LBE7:
 1427 03fe 03E0     		b	.L48
 1428              	.L47:
 498:notoriOS.c    ****         }else{
 499:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1429              		.loc 1 499 0
 1430 0400 1449     		ldr	r1, .L52+24
 1431 0402 0220     		movs	r0, #2
 1432 0404 FFF7FEFF 		bl	printNotif
 1433              	.L48:
 500:notoriOS.c    ****         }
 501:notoriOS.c    ****          
 502:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 503:notoriOS.c    ****         long network_time = modem_get_network_time();
 1434              		.loc 1 503 0
 1435 0408 FFF7FEFF 		bl	modem_get_network_time
 1436 040c C7F83C05 		str	r0, [r7, #1340]
 504:notoriOS.c    ****         if(network_time != 0){
 1437              		.loc 1 504 0
 1438 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1439 0414 002B     		cmp	r3, #0
 1440 0416 03D0     		beq	.L49
 505:notoriOS.c    ****            setTime(network_time);
 1441              		.loc 1 505 0
 1442 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1443 041c FFF7FEFF 		bl	setTime
 1444              	.L49:
 506:notoriOS.c    ****         }
 507:notoriOS.c    ****         
 508:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 509:notoriOS.c    ****         // If not -- keep the statck and try next time
 510:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 511:notoriOS.c    ****         modem_power_down();
 1445              		.loc 1 511 0
 1446 0420 FFF7FEFF 		bl	modem_power_down
 512:notoriOS.c    ****         
 513:notoriOS.c    ****         try_counter = 0u;
 1447              		.loc 1 513 0
 1448 0424 0C4B     		ldr	r3, .L52+28
 1449 0426 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 37


 1450 0428 1A70     		strb	r2, [r3]
 514:notoriOS.c    ****         return 0u;
 1451              		.loc 1 514 0
 1452 042a 0023     		movs	r3, #0
 1453 042c 00E0     		b	.L37
 1454              	.L40:
 1455              	.LBE2:
 515:notoriOS.c    ****     }
 516:notoriOS.c    ****       
 517:notoriOS.c    ****       return 1u; // Not done yet
 1456              		.loc 1 517 0
 1457 042e 0123     		movs	r3, #1
 1458              	.L37:
 518:notoriOS.c    **** }
 1459              		.loc 1 518 0 discriminator 1
 1460 0430 1846     		mov	r0, r3
 1461 0432 07F25457 		addw	r7, r7, #1364
 1462              		.cfi_def_cfa_offset 12
 1463 0436 BD46     		mov	sp, r7
 1464              		.cfi_def_cfa_register 13
 1465              		@ sp needed
 1466 0438 90BD     		pop	{r4, r7, pc}
 1467              	.L53:
 1468 043a 00BF     		.align	2
 1469              	.L52:
 1470 043c F4010000 		.word	.LC30
 1471 0440 FC010000 		.word	.LC31
 1472 0444 04020000 		.word	.LC32
 1473 0448 00000000 		.word	modem_start_time_stamp
 1474 044c A8000000 		.word	.LC6
 1475 0450 18020000 		.word	.LC33
 1476 0454 28020000 		.word	.LC34
 1477 0458 00000000 		.word	try_counter
 1478              		.cfi_endproc
 1479              	.LFE74:
 1480              		.size	syncData, .-syncData
 1481              		.section	.text.configureRemoteParams,"ax",%progbits
 1482              		.align	2
 1483              		.global	configureRemoteParams
 1484              		.thumb
 1485              		.thumb_func
 1486              		.type	configureRemoteParams, %function
 1487              	configureRemoteParams:
 1488              	.LFB75:
 519:notoriOS.c    **** 
 520:notoriOS.c    **** // ==============================================
 521:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 522:notoriOS.c    **** // Returns 0 when done
 523:notoriOS.c    **** // ==============================================
 524:notoriOS.c    **** uint8 configureRemoteParams(){
 1489              		.loc 1 524 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493 0000 80B5     		push	{r7, lr}
 1494              		.cfi_def_cfa_offset 8
 1495              		.cfi_offset 7, -8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 38


 1496              		.cfi_offset 14, -4
 1497 0002 82B0     		sub	sp, sp, #8
 1498              		.cfi_def_cfa_offset 16
 1499 0004 00AF     		add	r7, sp, #0
 1500              		.cfi_def_cfa_register 7
 525:notoriOS.c    ****     
 526:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1501              		.loc 1 526 0
 1502 0006 FFF7FEFF 		bl	modem_get_state
 1503 000a 0346     		mov	r3, r0
 1504 000c 002B     		cmp	r3, #0
 1505 000e 02D1     		bne	.L55
 527:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 528:notoriOS.c    ****         modem_power_up();
 1506              		.loc 1 528 0
 1507 0010 FFF7FEFF 		bl	modem_power_up
 1508 0014 11E0     		b	.L56
 1509              	.L55:
 529:notoriOS.c    ****             
 530:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1510              		.loc 1 530 0
 1511 0016 FFF7FEFF 		bl	modem_get_state
 1512 001a 0346     		mov	r3, r0
 1513 001c 042B     		cmp	r3, #4
 1514 001e 0CD1     		bne	.L56
 1515              	.LBB8:
 531:notoriOS.c    ****         
 532:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 533:notoriOS.c    ****         
 534:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 535:notoriOS.c    ****         long network_time = modem_get_network_time();
 1516              		.loc 1 535 0
 1517 0020 FFF7FEFF 		bl	modem_get_network_time
 1518 0024 7860     		str	r0, [r7, #4]
 536:notoriOS.c    ****         if(network_time != 0){
 1519              		.loc 1 536 0
 1520 0026 7B68     		ldr	r3, [r7, #4]
 1521 0028 002B     		cmp	r3, #0
 1522 002a 02D0     		beq	.L57
 537:notoriOS.c    ****             setTime(network_time);
 1523              		.loc 1 537 0
 1524 002c 7868     		ldr	r0, [r7, #4]
 1525 002e FFF7FEFF 		bl	setTime
 1526              	.L57:
 538:notoriOS.c    ****         }
 539:notoriOS.c    ****         
 540:notoriOS.c    ****         // Get GPS coordinates
 541:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 542:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
 543:notoriOS.c    ****         modem_power_down();
 1527              		.loc 1 543 0
 1528 0032 FFF7FEFF 		bl	modem_power_down
 544:notoriOS.c    ****         return 0u;
 1529              		.loc 1 544 0
 1530 0036 0023     		movs	r3, #0
 1531 0038 00E0     		b	.L58
 1532              	.L56:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 39


 1533              	.LBE8:
 545:notoriOS.c    ****         
 546:notoriOS.c    ****     }
 547:notoriOS.c    ****     
 548:notoriOS.c    ****     return 1u;
 1534              		.loc 1 548 0
 1535 003a 0123     		movs	r3, #1
 1536              	.L58:
 549:notoriOS.c    **** }
 1537              		.loc 1 549 0
 1538 003c 1846     		mov	r0, r3
 1539 003e 0837     		adds	r7, r7, #8
 1540              		.cfi_def_cfa_offset 8
 1541 0040 BD46     		mov	sp, r7
 1542              		.cfi_def_cfa_register 13
 1543              		@ sp needed
 1544 0042 80BD     		pop	{r7, pc}
 1545              		.cfi_endproc
 1546              	.LFE75:
 1547              		.size	configureRemoteParams, .-configureRemoteParams
 1548              		.section	.rodata
 1549 0253 00       		.align	2
 1550              	.LC35:
 1551 0254 256C6400 		.ascii	"%ld\000"
 1552              		.align	2
 1553              	.LC36:
 1554 0258 43757272 		.ascii	"Current_Node_Type\000"
 1554      656E745F 
 1554      4E6F6465 
 1554      5F547970 
 1554      6500
 1555 026a 0000     		.align	2
 1556              	.LC37:
 1557 026c 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1557      6F746978 
 1557      5F646570 
 1557      74683D25 
 1557      7300
 1558 027e 0000     		.align	2
 1559              	.LC38:
 1560 0280 6D617862 		.ascii	"maxbotix_depth\000"
 1560      6F746978 
 1560      5F646570 
 1560      746800
 1561 028f 00       		.align	2
 1562              	.LC39:
 1563 0290 612B00   		.ascii	"a+\000"
 1564 0293 00       		.align	2
 1565              	.LC40:
 1566 0294 206D6178 		.ascii	" maxbotix_depth: \000"
 1566      626F7469 
 1566      785F6465 
 1566      7074683A 
 1566      2000
 1567 02a6 0000     		.align	2
 1568              	.LC41:
 1569 02a8 2000     		.ascii	" \000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 40


 1570 02aa 0000     		.align	2
 1571              	.LC42:
 1572 02ac 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1572      64206E6F 
 1572      74206765 
 1572      74207661 
 1572      6C696420 
 1573              		.global	__aeabi_f2d
 1574              		.align	2
 1575              	.LC43:
 1576 02d8 252E3266 		.ascii	"%.2f\000"
 1576      00
 1577 02dd 000000   		.align	2
 1578              	.LC44:
 1579 02e0 765F6261 		.ascii	"v_bat=%s\000"
 1579      743D2573 
 1579      00
 1580 02e9 000000   		.align	2
 1581              	.LC45:
 1582 02ec 765F6261 		.ascii	"v_bat\000"
 1582      7400
 1583 02f2 0000     		.align	2
 1584              	.LC46:
 1585 02f4 20766261 		.ascii	" vbat: \000"
 1585      743A2000 
 1586              		.align	2
 1587              	.LC47:
 1588 02fc 70726573 		.ascii	"pressure_current=%s\000"
 1588      73757265 
 1588      5F637572 
 1588      72656E74 
 1588      3D257300 
 1589              		.align	2
 1590              	.LC48:
 1591 0310 70726573 		.ascii	"pressure_current\000"
 1591      73757265 
 1591      5F637572 
 1591      72656E74 
 1591      00
 1592 0321 000000   		.align	2
 1593              	.LC49:
 1594 0324 20707265 		.ascii	" pressure_current: \000"
 1594      73737572 
 1594      655F6375 
 1594      7272656E 
 1594      743A2000 
 1595              		.align	2
 1596              	.LC50:
 1597 0338 70726573 		.ascii	"pressure_depth=%s\000"
 1597      73757265 
 1597      5F646570 
 1597      74683D25 
 1597      7300
 1598 034a 0000     		.align	2
 1599              	.LC51:
 1600 034c 70726573 		.ascii	"pressure_depth\000"
 1600      73757265 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 41


 1600      5F646570 
 1600      746800
 1601 035b 00       		.align	2
 1602              	.LC52:
 1603 035c 20707265 		.ascii	" pressure_depth: \000"
 1603      73737572 
 1603      655F6465 
 1603      7074683A 
 1603      2000
 1604 036e 0000     		.align	2
 1605              	.LC53:
 1606 0370 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1606      64206E6F 
 1606      74206765 
 1606      74207661 
 1606      6C696420 
 1607              		.section	.text.makeMeasurements,"ax",%progbits
 1608              		.align	2
 1609              		.global	makeMeasurements
 1610              		.thumb
 1611              		.thumb_func
 1612              		.type	makeMeasurements, %function
 1613              	makeMeasurements:
 1614              	.LFB76:
 550:notoriOS.c    **** 
 551:notoriOS.c    **** 
 552:notoriOS.c    **** // ==============================================
 553:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 554:notoriOS.c    **** // Returns 0 when finished
 555:notoriOS.c    **** // ==============================================
 556:notoriOS.c    **** uint8 makeMeasurements(){
 1615              		.loc 1 556 0
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 128
 1618              		@ frame_needed = 1, uses_anonymous_args = 0
 1619 0000 90B5     		push	{r4, r7, lr}
 1620              		.cfi_def_cfa_offset 12
 1621              		.cfi_offset 4, -12
 1622              		.cfi_offset 7, -8
 1623              		.cfi_offset 14, -4
 1624 0002 A3B0     		sub	sp, sp, #140
 1625              		.cfi_def_cfa_offset 152
 1626 0004 02AF     		add	r7, sp, #8
 1627              		.cfi_def_cfa 7, 144
 557:notoriOS.c    ****     
 558:notoriOS.c    ****     // Get clock time and save to timeStamp
 559:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1628              		.loc 1 559 0
 1629 0006 FFF7FEFF 		bl	getTimeStamp
 1630 000a F867     		str	r0, [r7, #124]
 560:notoriOS.c    ****     char c_timeStamp[32];
 561:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1631              		.loc 1 561 0
 1632 000c 07F15C00 		add	r0, r7, #92
 1633 0010 FB6F     		ldr	r3, [r7, #124]
 1634 0012 8C4A     		ldr	r2, .L67
 1635 0014 2021     		movs	r1, #32
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 42


 1636 0016 FFF7FEFF 		bl	snprintf
 562:notoriOS.c    ****     
 563:notoriOS.c    ****     // Holds string for value that will be written 
 564:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 565:notoriOS.c    ****     
 566:notoriOS.c    ****     // who i am determines what I'm going to do 
 567:notoriOS.c    ****     // this is primarily for interpretability on grafana dashboards when developing custom nodes
 568:notoriOS.c    ****     char c_node_type[5];
 569:notoriOS.c    ****     itoa(updatable_parameters.node_type,c_node_type,10);
 1637              		.loc 1 569 0
 1638 001a 8B4B     		ldr	r3, .L67+4
 1639 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1640 001e 1846     		mov	r0, r3
 1641 0020 07F14003 		add	r3, r7, #64
 1642 0024 0A22     		movs	r2, #10
 1643 0026 1946     		mov	r1, r3
 1644 0028 FFF7FEFF 		bl	itoa
 570:notoriOS.c    ****     pushData("Current_Node_Type",c_node_type ,getTimeStamp());
 1645              		.loc 1 570 0
 1646 002c FFF7FEFF 		bl	getTimeStamp
 1647 0030 0246     		mov	r2, r0
 1648 0032 07F14003 		add	r3, r7, #64
 1649 0036 1946     		mov	r1, r3
 1650 0038 8448     		ldr	r0, .L67+8
 1651 003a FFF7FEFF 		bl	pushData
 571:notoriOS.c    ****     
 572:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 573:notoriOS.c    ****     
 574:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1652              		.loc 1 574 0
 1653 003e 824B     		ldr	r3, .L67+4
 1654 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1655 0042 002B     		cmp	r3, #0
 1656 0044 3BD1     		bne	.L60
 1657              	.LBB9:
 575:notoriOS.c    ****         
 576:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 577:notoriOS.c    ****         level_sensor_t m_level_sensor;
 578:notoriOS.c    ****         
 579:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 580:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1658              		.loc 1 580 0
 1659 0046 07F11003 		add	r3, r7, #16
 1660 004a 1846     		mov	r0, r3
 1661 004c FFF7FEFF 		bl	level_sensor_take_reading
 581:notoriOS.c    ****     
 582:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 583:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1662              		.loc 1 583 0
 1663 0050 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1664 0054 002B     		cmp	r3, #0
 1665 0056 2ED0     		beq	.L61
 584:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1666              		.loc 1 584 0
 1667 0058 B7F92630 		ldrsh	r3, [r7, #38]
 1668 005c 07F14800 		add	r0, r7, #72
 1669 0060 7B4A     		ldr	r2, .L67+12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 43


 1670 0062 1421     		movs	r1, #20
 1671 0064 FFF7FEFF 		bl	snprintf
 585:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1672              		.loc 1 585 0
 1673 0068 07F14803 		add	r3, r7, #72
 1674 006c 1A46     		mov	r2, r3
 1675 006e 7949     		ldr	r1, .L67+16
 1676 0070 0020     		movs	r0, #0
 1677 0072 FFF7FEFF 		bl	printNotif
 586:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1678              		.loc 1 586 0
 1679 0076 07F14803 		add	r3, r7, #72
 1680 007a FA6F     		ldr	r2, [r7, #124]
 1681 007c 1946     		mov	r1, r3
 1682 007e 7648     		ldr	r0, .L67+20
 1683 0080 FFF7FEFF 		bl	pushData
 587:notoriOS.c    ****             
 588:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 589:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1684              		.loc 1 589 0
 1685 0084 07F15C03 		add	r3, r7, #92
 1686 0088 1A46     		mov	r2, r3
 1687 008a 7449     		ldr	r1, .L67+24
 1688 008c 7448     		ldr	r0, .L67+28
 1689 008e FFF7FEFF 		bl	SD_write
 590:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1690              		.loc 1 590 0
 1691 0092 744A     		ldr	r2, .L67+32
 1692 0094 7149     		ldr	r1, .L67+24
 1693 0096 7248     		ldr	r0, .L67+28
 1694 0098 FFF7FEFF 		bl	SD_write
 591:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1695              		.loc 1 591 0
 1696 009c 07F14803 		add	r3, r7, #72
 1697 00a0 1A46     		mov	r2, r3
 1698 00a2 6E49     		ldr	r1, .L67+24
 1699 00a4 6E48     		ldr	r0, .L67+28
 1700 00a6 FFF7FEFF 		bl	SD_write
 592:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1701              		.loc 1 592 0
 1702 00aa 6F4A     		ldr	r2, .L67+36
 1703 00ac 6B49     		ldr	r1, .L67+24
 1704 00ae 6C48     		ldr	r0, .L67+28
 1705 00b0 FFF7FEFF 		bl	SD_write
 1706 00b4 03E0     		b	.L60
 1707              	.L61:
 593:notoriOS.c    ****         }else{
 594:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1708              		.loc 1 594 0
 1709 00b6 6D49     		ldr	r1, .L67+40
 1710 00b8 0220     		movs	r0, #2
 1711 00ba FFF7FEFF 		bl	printNotif
 1712              	.L60:
 1713              	.LBE9:
 595:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 596:notoriOS.c    ****         }
 597:notoriOS.c    ****     }
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 44


 598:notoriOS.c    ****     
 599:notoriOS.c    ****     
 600:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 601:notoriOS.c    ****     voltage_t m_voltage;
 602:notoriOS.c    ****     
 603:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 604:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1714              		.loc 1 604 0
 1715 00be 07F12C03 		add	r3, r7, #44
 1716 00c2 1846     		mov	r0, r3
 1717 00c4 FFF7FEFF 		bl	voltage_take_readings
 605:notoriOS.c    ****     
 606:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 607:notoriOS.c    ****     if(m_voltage.valid){
 1718              		.loc 1 607 0
 1719 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1720 00cc 002B     		cmp	r3, #0
 1721 00ce 00F0AF80 		beq	.L63
 608:notoriOS.c    ****         // battery voltage data
 609:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1722              		.loc 1 609 0
 1723 00d2 FB6A     		ldr	r3, [r7, #44]	@ float
 1724 00d4 1846     		mov	r0, r3
 1725 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1726 00da 0346     		mov	r3, r0
 1727 00dc 0C46     		mov	r4, r1
 1728 00de 07F14800 		add	r0, r7, #72
 1729 00e2 CDE90034 		strd	r3, [sp]
 1730 00e6 624A     		ldr	r2, .L67+44
 1731 00e8 1421     		movs	r1, #20
 1732 00ea FFF7FEFF 		bl	snprintf
 610:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1733              		.loc 1 610 0
 1734 00ee 07F14803 		add	r3, r7, #72
 1735 00f2 1A46     		mov	r2, r3
 1736 00f4 5F49     		ldr	r1, .L67+48
 1737 00f6 0020     		movs	r0, #0
 1738 00f8 FFF7FEFF 		bl	printNotif
 611:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1739              		.loc 1 611 0
 1740 00fc 07F14803 		add	r3, r7, #72
 1741 0100 FA6F     		ldr	r2, [r7, #124]
 1742 0102 1946     		mov	r1, r3
 1743 0104 5C48     		ldr	r0, .L67+52
 1744 0106 FFF7FEFF 		bl	pushData
 612:notoriOS.c    ****         
 613:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 614:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1745              		.loc 1 614 0
 1746 010a 574A     		ldr	r2, .L67+36
 1747 010c 5349     		ldr	r1, .L67+24
 1748 010e 5448     		ldr	r0, .L67+28
 1749 0110 FFF7FEFF 		bl	SD_write
 615:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1750              		.loc 1 615 0
 1751 0114 07F15C03 		add	r3, r7, #92
 1752 0118 1A46     		mov	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 45


 1753 011a 5049     		ldr	r1, .L67+24
 1754 011c 5048     		ldr	r0, .L67+28
 1755 011e FFF7FEFF 		bl	SD_write
 616:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1756              		.loc 1 616 0
 1757 0122 564A     		ldr	r2, .L67+56
 1758 0124 4D49     		ldr	r1, .L67+24
 1759 0126 4E48     		ldr	r0, .L67+28
 1760 0128 FFF7FEFF 		bl	SD_write
 617:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1761              		.loc 1 617 0
 1762 012c 07F14803 		add	r3, r7, #72
 1763 0130 1A46     		mov	r2, r3
 1764 0132 4A49     		ldr	r1, .L67+24
 1765 0134 4A48     		ldr	r0, .L67+28
 1766 0136 FFF7FEFF 		bl	SD_write
 618:notoriOS.c    ****         
 619:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 620:notoriOS.c    ****          
 621:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1767              		.loc 1 621 0
 1768 013a 434B     		ldr	r3, .L67+4
 1769 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1770 013e 012B     		cmp	r3, #1
 1771 0140 7AD1     		bne	.L65
 1772              	.LBB10:
 622:notoriOS.c    ****             
 623:notoriOS.c    ****             // pressure transducer voltage (V) data
 624:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 625:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 626:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 627:notoriOS.c    ****             
 628:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 629:notoriOS.c    ****             pressure_t m_pressure;
 630:notoriOS.c    ****             
 631:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 632:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1773              		.loc 1 632 0
 1774 0142 3C46     		mov	r4, r7
 1775 0144 6A46     		mov	r2, sp
 1776 0146 07F13803 		add	r3, r7, #56
 1777 014a 93E80300 		ldmia	r3, {r0, r1}
 1778 014e 82E80300 		stmia	r2, {r0, r1}
 1779 0152 07F12C03 		add	r3, r7, #44
 1780 0156 0ECB     		ldmia	r3, {r1, r2, r3}
 1781 0158 2046     		mov	r0, r4
 1782 015a FFF7FEFF 		bl	pressure_calculations
 633:notoriOS.c    ****             
 634:notoriOS.c    ****             // pressure transducer current (mA) data
 635:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1783              		.loc 1 635 0
 1784 015e BB68     		ldr	r3, [r7, #8]	@ float
 1785 0160 1846     		mov	r0, r3
 1786 0162 FFF7FEFF 		bl	__aeabi_f2d
 1787 0166 0346     		mov	r3, r0
 1788 0168 0C46     		mov	r4, r1
 1789 016a 07F14800 		add	r0, r7, #72
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 46


 1790 016e CDE90034 		strd	r3, [sp]
 1791 0172 3F4A     		ldr	r2, .L67+44
 1792 0174 1421     		movs	r1, #20
 1793 0176 FFF7FEFF 		bl	snprintf
 636:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1794              		.loc 1 636 0
 1795 017a 07F14803 		add	r3, r7, #72
 1796 017e 1A46     		mov	r2, r3
 1797 0180 3F49     		ldr	r1, .L67+60
 1798 0182 0020     		movs	r0, #0
 1799 0184 FFF7FEFF 		bl	printNotif
 637:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1800              		.loc 1 637 0
 1801 0188 07F14803 		add	r3, r7, #72
 1802 018c FA6F     		ldr	r2, [r7, #124]
 1803 018e 1946     		mov	r1, r3
 1804 0190 3C48     		ldr	r0, .L67+64
 1805 0192 FFF7FEFF 		bl	pushData
 638:notoriOS.c    ****             
 639:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 640:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1806              		.loc 1 640 0
 1807 0196 344A     		ldr	r2, .L67+36
 1808 0198 3049     		ldr	r1, .L67+24
 1809 019a 3148     		ldr	r0, .L67+28
 1810 019c FFF7FEFF 		bl	SD_write
 641:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1811              		.loc 1 641 0
 1812 01a0 07F15C03 		add	r3, r7, #92
 1813 01a4 1A46     		mov	r2, r3
 1814 01a6 2D49     		ldr	r1, .L67+24
 1815 01a8 2D48     		ldr	r0, .L67+28
 1816 01aa FFF7FEFF 		bl	SD_write
 642:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1817              		.loc 1 642 0
 1818 01ae 364A     		ldr	r2, .L67+68
 1819 01b0 2A49     		ldr	r1, .L67+24
 1820 01b2 2B48     		ldr	r0, .L67+28
 1821 01b4 FFF7FEFF 		bl	SD_write
 643:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1822              		.loc 1 643 0
 1823 01b8 07F14803 		add	r3, r7, #72
 1824 01bc 1A46     		mov	r2, r3
 1825 01be 2749     		ldr	r1, .L67+24
 1826 01c0 2748     		ldr	r0, .L67+28
 1827 01c2 FFF7FEFF 		bl	SD_write
 644:notoriOS.c    ****             
 645:notoriOS.c    ****             // pressure transducer depth (ft) data
 646:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
 1828              		.loc 1 646 0
 1829 01c6 FB68     		ldr	r3, [r7, #12]	@ float
 1830 01c8 1846     		mov	r0, r3
 1831 01ca FFF7FEFF 		bl	__aeabi_f2d
 1832 01ce 0346     		mov	r3, r0
 1833 01d0 0C46     		mov	r4, r1
 1834 01d2 07F14800 		add	r0, r7, #72
 1835 01d6 CDE90034 		strd	r3, [sp]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 47


 1836 01da 254A     		ldr	r2, .L67+44
 1837 01dc 1421     		movs	r1, #20
 1838 01de FFF7FEFF 		bl	snprintf
 647:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1839              		.loc 1 647 0
 1840 01e2 07F14803 		add	r3, r7, #72
 1841 01e6 1A46     		mov	r2, r3
 1842 01e8 2849     		ldr	r1, .L67+72
 1843 01ea 0020     		movs	r0, #0
 1844 01ec FFF7FEFF 		bl	printNotif
 648:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1845              		.loc 1 648 0
 1846 01f0 07F14803 		add	r3, r7, #72
 1847 01f4 FA6F     		ldr	r2, [r7, #124]
 1848 01f6 1946     		mov	r1, r3
 1849 01f8 2548     		ldr	r0, .L67+76
 1850 01fa FFF7FEFF 		bl	pushData
 649:notoriOS.c    ****             
 650:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 651:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1851              		.loc 1 651 0
 1852 01fe 1A4A     		ldr	r2, .L67+36
 1853 0200 1649     		ldr	r1, .L67+24
 1854 0202 1748     		ldr	r0, .L67+28
 1855 0204 FFF7FEFF 		bl	SD_write
 652:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1856              		.loc 1 652 0
 1857 0208 07F15C03 		add	r3, r7, #92
 1858 020c 1A46     		mov	r2, r3
 1859 020e 1349     		ldr	r1, .L67+24
 1860 0210 1348     		ldr	r0, .L67+28
 1861 0212 FFF7FEFF 		bl	SD_write
 653:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1862              		.loc 1 653 0
 1863 0216 1F4A     		ldr	r2, .L67+80
 1864 0218 1049     		ldr	r1, .L67+24
 1865 021a 1148     		ldr	r0, .L67+28
 1866 021c FFF7FEFF 		bl	SD_write
 654:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1867              		.loc 1 654 0
 1868 0220 07F14803 		add	r3, r7, #72
 1869 0224 1A46     		mov	r2, r3
 1870 0226 0D49     		ldr	r1, .L67+24
 1871 0228 0D48     		ldr	r0, .L67+28
 1872 022a FFF7FEFF 		bl	SD_write
 1873 022e 03E0     		b	.L65
 1874              	.L63:
 1875              	.LBE10:
 655:notoriOS.c    ****         }    
 656:notoriOS.c    ****     }else{
 657:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1876              		.loc 1 657 0
 1877 0230 1949     		ldr	r1, .L67+84
 1878 0232 0220     		movs	r0, #2
 1879 0234 FFF7FEFF 		bl	printNotif
 1880              	.L65:
 658:notoriOS.c    ****         
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 48


 659:notoriOS.c    ****     }
 660:notoriOS.c    ****         
 661:notoriOS.c    ****     
 662:notoriOS.c    ****     return 0u;
 1881              		.loc 1 662 0
 1882 0238 0023     		movs	r3, #0
 663:notoriOS.c    **** }
 1883              		.loc 1 663 0
 1884 023a 1846     		mov	r0, r3
 1885 023c 8437     		adds	r7, r7, #132
 1886              		.cfi_def_cfa_offset 12
 1887 023e BD46     		mov	sp, r7
 1888              		.cfi_def_cfa_register 13
 1889              		@ sp needed
 1890 0240 90BD     		pop	{r4, r7, pc}
 1891              	.L68:
 1892 0242 00BF     		.align	2
 1893              	.L67:
 1894 0244 54020000 		.word	.LC35
 1895 0248 00000000 		.word	updatable_parameters
 1896 024c 58020000 		.word	.LC36
 1897 0250 A8000000 		.word	.LC6
 1898 0254 6C020000 		.word	.LC37
 1899 0258 80020000 		.word	.LC38
 1900 025c 90020000 		.word	.LC39
 1901 0260 00000000 		.word	Data_fileName
 1902 0264 94020000 		.word	.LC40
 1903 0268 A8020000 		.word	.LC41
 1904 026c AC020000 		.word	.LC42
 1905 0270 D8020000 		.word	.LC43
 1906 0274 E0020000 		.word	.LC44
 1907 0278 EC020000 		.word	.LC45
 1908 027c F4020000 		.word	.LC46
 1909 0280 FC020000 		.word	.LC47
 1910 0284 10030000 		.word	.LC48
 1911 0288 24030000 		.word	.LC49
 1912 028c 38030000 		.word	.LC50
 1913 0290 4C030000 		.word	.LC51
 1914 0294 5C030000 		.word	.LC52
 1915 0298 70030000 		.word	.LC53
 1916              		.cfi_endproc
 1917              	.LFE76:
 1918              		.size	makeMeasurements, .-makeMeasurements
 1919              		.section	.rodata
 1920 0397 00       		.align	2
 1921              	.LC54:
 1922 0398 4572726F 		.ascii	"Error setting system time.\000"
 1922      72207365 
 1922      7474696E 
 1922      67207379 
 1922      7374656D 
 1923              		.section	.text.setTime,"ax",%progbits
 1924              		.align	2
 1925              		.global	setTime
 1926              		.thumb
 1927              		.thumb_func
 1928              		.type	setTime, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 49


 1929              	setTime:
 1930              	.LFB77:
 664:notoriOS.c    **** 
 665:notoriOS.c    **** // ==============================================
 666:notoriOS.c    **** // Set the system time
 667:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 668:notoriOS.c    **** // ==============================================
 669:notoriOS.c    **** uint8 setTime(long timeStamp){
 1931              		.loc 1 669 0
 1932              		.cfi_startproc
 1933              		@ args = 0, pretend = 0, frame = 24
 1934              		@ frame_needed = 1, uses_anonymous_args = 0
 1935 0000 80B5     		push	{r7, lr}
 1936              		.cfi_def_cfa_offset 8
 1937              		.cfi_offset 7, -8
 1938              		.cfi_offset 14, -4
 1939 0002 86B0     		sub	sp, sp, #24
 1940              		.cfi_def_cfa_offset 32
 1941 0004 00AF     		add	r7, sp, #0
 1942              		.cfi_def_cfa_register 7
 1943 0006 7860     		str	r0, [r7, #4]
 670:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 671:notoriOS.c    ****     if(timeStamp <=0){
 1944              		.loc 1 671 0
 1945 0008 7B68     		ldr	r3, [r7, #4]
 1946 000a 002B     		cmp	r3, #0
 1947 000c 05DC     		bgt	.L70
 672:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1948              		.loc 1 672 0
 1949 000e 1849     		ldr	r1, .L72
 1950 0010 0220     		movs	r0, #2
 1951 0012 FFF7FEFF 		bl	printNotif
 673:notoriOS.c    ****         return 0;  
 1952              		.loc 1 673 0
 1953 0016 0023     		movs	r3, #0
 1954 0018 25E0     		b	.L71
 1955              	.L70:
 674:notoriOS.c    ****     }
 675:notoriOS.c    ****     // Create a new pointer t of data structure tm
 676:notoriOS.c    ****     struct tm * t;
 677:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 678:notoriOS.c    ****     t = gmtime(&timeStamp);
 1956              		.loc 1 678 0
 1957 001a 3B1D     		adds	r3, r7, #4
 1958 001c 1846     		mov	r0, r3
 1959 001e FFF7FEFF 		bl	gmtime
 1960 0022 7861     		str	r0, [r7, #20]
 679:notoriOS.c    ****     
 680:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
 681:notoriOS.c    ****     RTC_TIME_DATE localTime;
 682:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1961              		.loc 1 682 0
 1962 0024 7B69     		ldr	r3, [r7, #20]
 1963 0026 1B68     		ldr	r3, [r3]
 1964 0028 DBB2     		uxtb	r3, r3
 1965 002a 3B72     		strb	r3, [r7, #8]
 683:notoriOS.c    ****     localTime.Min = t->tm_min;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 50


 1966              		.loc 1 683 0
 1967 002c 7B69     		ldr	r3, [r7, #20]
 1968 002e 5B68     		ldr	r3, [r3, #4]
 1969 0030 DBB2     		uxtb	r3, r3
 1970 0032 7B72     		strb	r3, [r7, #9]
 684:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1971              		.loc 1 684 0
 1972 0034 7B69     		ldr	r3, [r7, #20]
 1973 0036 9B68     		ldr	r3, [r3, #8]
 1974 0038 DBB2     		uxtb	r3, r3
 1975 003a BB72     		strb	r3, [r7, #10]
 685:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1976              		.loc 1 685 0
 1977 003c 7B69     		ldr	r3, [r7, #20]
 1978 003e 5B69     		ldr	r3, [r3, #20]
 1979 0040 9BB2     		uxth	r3, r3
 1980 0042 03F26C73 		addw	r3, r3, #1900
 1981 0046 9BB2     		uxth	r3, r3
 1982 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 686:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1983              		.loc 1 686 0
 1984 004a 7B69     		ldr	r3, [r7, #20]
 1985 004c 1B69     		ldr	r3, [r3, #16]
 1986 004e DBB2     		uxtb	r3, r3
 1987 0050 3B74     		strb	r3, [r7, #16]
 687:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1988              		.loc 1 687 0
 1989 0052 7B69     		ldr	r3, [r7, #20]
 1990 0054 DB68     		ldr	r3, [r3, #12]
 1991 0056 DBB2     		uxtb	r3, r3
 1992 0058 3B73     		strb	r3, [r7, #12]
 688:notoriOS.c    **** 
 689:notoriOS.c    ****     // Writes time and date values as current time and date.
 690:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1993              		.loc 1 690 0
 1994 005a 07F10803 		add	r3, r7, #8
 1995 005e 1846     		mov	r0, r3
 1996 0060 FFF7FEFF 		bl	RTC_WriteTime
 691:notoriOS.c    ****     
 692:notoriOS.c    ****     // Return 1 when the system time was set properly.
 693:notoriOS.c    ****     return 1;
 1997              		.loc 1 693 0
 1998 0064 0123     		movs	r3, #1
 1999              	.L71:
 694:notoriOS.c    **** }
 2000              		.loc 1 694 0
 2001 0066 1846     		mov	r0, r3
 2002 0068 1837     		adds	r7, r7, #24
 2003              		.cfi_def_cfa_offset 8
 2004 006a BD46     		mov	sp, r7
 2005              		.cfi_def_cfa_register 13
 2006              		@ sp needed
 2007 006c 80BD     		pop	{r7, pc}
 2008              	.L73:
 2009 006e 00BF     		.align	2
 2010              	.L72:
 2011 0070 98030000 		.word	.LC54
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 51


 2012              		.cfi_endproc
 2013              	.LFE77:
 2014              		.size	setTime, .-setTime
 2015              		.section	.rodata
 2016 03b3 00       		.align	2
 2017              	.LC55:
 2018 03b4 75706772 		.ascii	"upgrade.hex\000"
 2018      6164652E 
 2018      68657800 
 2019              		.section	.text.upgraded,"ax",%progbits
 2020              		.align	2
 2021              		.global	upgraded
 2022              		.thumb
 2023              		.thumb_func
 2024              		.type	upgraded, %function
 2025              	upgraded:
 2026              	.LFB78:
 695:notoriOS.c    **** 
 696:notoriOS.c    **** //downloads and stores files on SD card
 697:notoriOS.c    **** 
 698:notoriOS.c    **** 
 699:notoriOS.c    **** 
 700:notoriOS.c    **** // ==============================================
 701:notoriOS.c    **** // Will they love it, will they hate it
 702:notoriOS.c    **** // Never fade it, I evade it
 703:notoriOS.c    **** // Cause I never really want to complicate it
 704:notoriOS.c    **** //      - Logic, Upgraded (2015)
 705:notoriOS.c    **** //
 706:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 707:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 708:notoriOS.c    **** // ==============================================
 709:notoriOS.c    **** 
 710:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2027              		.loc 1 710 0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 232
 2030              		@ frame_needed = 1, uses_anonymous_args = 0
 2031 0000 80B5     		push	{r7, lr}
 2032              		.cfi_def_cfa_offset 8
 2033              		.cfi_offset 7, -8
 2034              		.cfi_offset 14, -4
 2035 0002 C0B0     		sub	sp, sp, #256
 2036              		.cfi_def_cfa_offset 264
 2037 0004 06AF     		add	r7, sp, #24
 2038              		.cfi_def_cfa 7, 240
 2039 0006 F860     		str	r0, [r7, #12]
 2040 0008 B960     		str	r1, [r7, #8]
 2041 000a 7A60     		str	r2, [r7, #4]
 711:notoriOS.c    ****     
 712:notoriOS.c    ****     uint8 upgrade_status = 0;
 2042              		.loc 1 712 0
 2043 000c 0023     		movs	r3, #0
 2044 000e 87F8E730 		strb	r3, [r7, #231]
 713:notoriOS.c    ****     
 714:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 715:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2045              		.loc 1 715 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 52


 2046 0012 384B     		ldr	r3, .L78
 2047 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2048 0016 042B     		cmp	r3, #4
 2049 0018 02D0     		beq	.L75
 716:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2050              		.loc 1 716 0
 2051 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2052 001e 65E0     		b	.L77
 2053              	.L75:
 717:notoriOS.c    ****     }
 718:notoriOS.c    ****     
 719:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2054              		.loc 1 719 0
 2055 0020 354A     		ldr	r2, .L78+4
 2056 0022 07F1D803 		add	r3, r7, #216
 2057 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2058 0028 83E80700 		stmia	r3, {r0, r1, r2}
 720:notoriOS.c    ****     //delete file, if one exisits already
 721:notoriOS.c    ****     SD_rmfile(fileName);
 2059              		.loc 1 721 0
 2060 002c 07F1D803 		add	r3, r7, #216
 2061 0030 1846     		mov	r0, r3
 2062 0032 FFF7FEFF 		bl	SD_rmfile
 722:notoriOS.c    ****     
 723:notoriOS.c    ****     // Create http request
 724:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2063              		.loc 1 724 0
 2064 0036 314B     		ldr	r3, .L78+8
 2065 0038 0593     		str	r3, [sp, #20]
 2066 003a 0023     		movs	r3, #0
 2067 003c 0493     		str	r3, [sp, #16]
 2068 003e 304B     		ldr	r3, .L78+12
 2069 0040 0393     		str	r3, [sp, #12]
 2070 0042 304B     		ldr	r3, .L78+16
 2071 0044 0293     		str	r3, [sp, #8]
 2072 0046 304B     		ldr	r3, .L78+20
 2073 0048 0193     		str	r3, [sp, #4]
 2074 004a BB68     		ldr	r3, [r7, #8]
 2075 004c 0093     		str	r3, [sp]
 2076 004e 7B68     		ldr	r3, [r7, #4]
 2077 0050 FA68     		ldr	r2, [r7, #12]
 2078 0052 2E49     		ldr	r1, .L78+24
 2079 0054 2E48     		ldr	r0, .L78+28
 2080 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 725:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2081              		.loc 1 725 0
 2082 005a 2D4A     		ldr	r2, .L78+28
 2083 005c 2D49     		ldr	r1, .L78+32
 2084 005e 0020     		movs	r0, #0
 2085 0060 FFF7FEFF 		bl	printNotif
 726:notoriOS.c    ****     // Create array portConfig of size 200 characters
 727:notoriOS.c    ****     char portConfig[200];
 728:notoriOS.c    ****     // Print port configurations
 729:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2086              		.loc 1 729 0
 2087 0064 07F11000 		add	r0, r7, #16
 2088 0068 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 53


 2089 006a 0093     		str	r3, [sp]
 2090 006c BB68     		ldr	r3, [r7, #8]
 2091 006e 2A4A     		ldr	r2, .L78+36
 2092 0070 C821     		movs	r1, #200
 2093 0072 FFF7FEFF 		bl	snprintf
 730:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2094              		.loc 1 730 0
 2095 0076 07F11003 		add	r3, r7, #16
 2096 007a 1A46     		mov	r2, r3
 2097 007c 2749     		ldr	r1, .L78+40
 2098 007e 0020     		movs	r0, #0
 2099 0080 FFF7FEFF 		bl	printNotif
 731:notoriOS.c    ****     // AT command to configure the port
 732:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2100              		.loc 1 732 0
 2101 0084 07F11003 		add	r3, r7, #16
 2102 0088 42F21072 		movw	r2, #10000
 2103 008c 2449     		ldr	r1, .L78+44
 2104 008e 1846     		mov	r0, r3
 2105 0090 FFF7FEFF 		bl	at_write_command
 2106 0094 0346     		mov	r3, r0
 2107 0096 87F8E730 		strb	r3, [r7, #231]
 733:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 734:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 735:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2108              		.loc 1 735 0
 2109 009a 4FF47A72 		mov	r2, #1000
 2110 009e 2149     		ldr	r1, .L78+48
 2111 00a0 2148     		ldr	r0, .L78+52
 2112 00a2 FFF7FEFF 		bl	at_write_command
 2113 00a6 0346     		mov	r3, r0
 2114 00a8 87F8E730 		strb	r3, [r7, #231]
 736:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 737:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2115              		.loc 1 737 0
 2116 00ac 1848     		ldr	r0, .L78+28
 2117 00ae FFF7FEFF 		bl	strlen
 2118 00b2 0346     		mov	r3, r0
 2119 00b4 1A46     		mov	r2, r3
 2120 00b6 164B     		ldr	r3, .L78+28
 2121 00b8 1344     		add	r3, r3, r2
 2122 00ba 1C49     		ldr	r1, .L78+56
 2123 00bc 1A46     		mov	r2, r3
 2124 00be 0B46     		mov	r3, r1
 2125 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2126 00c2 1380     		strh	r3, [r2]	@ unaligned
 738:notoriOS.c    ****     // AT command to send http request
 739:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2127              		.loc 1 739 0
 2128 00c4 41F28832 		movw	r2, #5000
 2129 00c8 1549     		ldr	r1, .L78+44
 2130 00ca 1148     		ldr	r0, .L78+28
 2131 00cc FFF7FEFF 		bl	at_write_command
 2132 00d0 0346     		mov	r3, r0
 2133 00d2 87F8E730 		strb	r3, [r7, #231]
 740:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 741:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 54


 742:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2134              		.loc 1 742 0
 2135 00d6 41F28832 		movw	r2, #5000
 2136 00da 1549     		ldr	r1, .L78+60
 2137 00dc 1548     		ldr	r0, .L78+64
 2138 00de FFF7FEFF 		bl	at_write_command
 2139 00e2 0346     		mov	r3, r0
 2140 00e4 87F8E730 		strb	r3, [r7, #231]
 743:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 744:notoriOS.c    ****     
 745:notoriOS.c    ****     
 746:notoriOS.c    ****     return upgrade_status;
 2141              		.loc 1 746 0
 2142 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2143              	.L77:
 747:notoriOS.c    ****     
 748:notoriOS.c    **** }
 2144              		.loc 1 748 0 discriminator 1
 2145 00ec 1846     		mov	r0, r3
 2146 00ee E837     		adds	r7, r7, #232
 2147              		.cfi_def_cfa_offset 8
 2148 00f0 BD46     		mov	sp, r7
 2149              		.cfi_def_cfa_register 13
 2150              		@ sp needed
 2151 00f2 80BD     		pop	{r7, pc}
 2152              	.L79:
 2153              		.align	2
 2154              	.L78:
 2155 00f4 00000000 		.word	modem_state
 2156 00f8 B4030000 		.word	.LC55
 2157 00fc 4C010000 		.word	.LC16
 2158 0100 50010000 		.word	.LC17
 2159 0104 54010000 		.word	.LC18
 2160 0108 5C010000 		.word	.LC19
 2161 010c 00000000 		.word	http_body
 2162 0110 00000000 		.word	http_request
 2163 0114 64010000 		.word	.LC20
 2164 0118 7C010000 		.word	.LC21
 2165 011c 98010000 		.word	.LC22
 2166 0120 9C010000 		.word	.LC23
 2167 0124 CC010000 		.word	.LC26
 2168 0128 D0010000 		.word	.LC27
 2169 012c E0010000 		.word	.LC28
 2170 0130 FC010000 		.word	.LC31
 2171 0134 04020000 		.word	.LC32
 2172              		.cfi_endproc
 2173              	.LFE78:
 2174              		.size	upgraded, .-upgraded
 2175              		.text
 2176              	.Letext0:
 2177              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2178              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2179              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2180              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2181              		.file 6 "testing.h"
 2182              		.file 7 "level_sensor.h"
 2183              		.file 8 "voltages.h"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 55


 2184              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2185              		.file 10 "data.h"
 2186              		.file 11 "modem.h"
 2187              		.file 12 "notoriOS.h"
 2188              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2189              		.file 14 "App_LED.h"
 2190              		.section	.debug_info,"",%progbits
 2191              	.Ldebug_info0:
 2192 0000 B20C0000 		.4byte	0xcb2
 2193 0004 0400     		.2byte	0x4
 2194 0006 00000000 		.4byte	.Ldebug_abbrev0
 2195 000a 04       		.byte	0x4
 2196 000b 01       		.uleb128 0x1
 2197 000c AC000000 		.4byte	.LASF169
 2198 0010 0C       		.byte	0xc
 2199 0011 35080000 		.4byte	.LASF170
 2200 0015 2C000000 		.4byte	.LASF171
 2201 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2202 001d 00000000 		.4byte	0
 2203 0021 00000000 		.4byte	.Ldebug_line0
 2204 0025 02       		.uleb128 0x2
 2205 0026 01       		.byte	0x1
 2206 0027 06       		.byte	0x6
 2207 0028 7D000000 		.4byte	.LASF0
 2208 002c 02       		.uleb128 0x2
 2209 002d 01       		.byte	0x1
 2210 002e 08       		.byte	0x8
 2211 002f 0F060000 		.4byte	.LASF1
 2212 0033 02       		.uleb128 0x2
 2213 0034 02       		.byte	0x2
 2214 0035 05       		.byte	0x5
 2215 0036 76040000 		.4byte	.LASF2
 2216 003a 02       		.uleb128 0x2
 2217 003b 02       		.byte	0x2
 2218 003c 07       		.byte	0x7
 2219 003d C0070000 		.4byte	.LASF3
 2220 0041 03       		.uleb128 0x3
 2221 0042 88070000 		.4byte	.LASF9
 2222 0046 02       		.byte	0x2
 2223 0047 3F       		.byte	0x3f
 2224 0048 4C000000 		.4byte	0x4c
 2225 004c 02       		.uleb128 0x2
 2226 004d 04       		.byte	0x4
 2227 004e 05       		.byte	0x5
 2228 004f 53020000 		.4byte	.LASF4
 2229 0053 02       		.uleb128 0x2
 2230 0054 04       		.byte	0x4
 2231 0055 07       		.byte	0x7
 2232 0056 B3030000 		.4byte	.LASF5
 2233 005a 02       		.uleb128 0x2
 2234 005b 08       		.byte	0x8
 2235 005c 05       		.byte	0x5
 2236 005d AE010000 		.4byte	.LASF6
 2237 0061 02       		.uleb128 0x2
 2238 0062 08       		.byte	0x8
 2239 0063 07       		.byte	0x7
 2240 0064 4B010000 		.4byte	.LASF7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 56


 2241 0068 04       		.uleb128 0x4
 2242 0069 04       		.byte	0x4
 2243 006a 05       		.byte	0x5
 2244 006b 696E7400 		.ascii	"int\000"
 2245 006f 02       		.uleb128 0x2
 2246 0070 04       		.byte	0x4
 2247 0071 07       		.byte	0x7
 2248 0072 5F030000 		.4byte	.LASF8
 2249 0076 03       		.uleb128 0x3
 2250 0077 07060000 		.4byte	.LASF10
 2251 007b 03       		.byte	0x3
 2252 007c 2C       		.byte	0x2c
 2253 007d 41000000 		.4byte	0x41
 2254 0081 05       		.uleb128 0x5
 2255 0082 8A020000 		.4byte	.LASF11
 2256 0086 04       		.byte	0x4
 2257 0087 9201     		.2byte	0x192
 2258 0089 2C000000 		.4byte	0x2c
 2259 008d 05       		.uleb128 0x5
 2260 008e 08000000 		.4byte	.LASF12
 2261 0092 04       		.byte	0x4
 2262 0093 9301     		.2byte	0x193
 2263 0095 3A000000 		.4byte	0x3a
 2264 0099 05       		.uleb128 0x5
 2265 009a DB020000 		.4byte	.LASF13
 2266 009e 04       		.byte	0x4
 2267 009f 9401     		.2byte	0x194
 2268 00a1 53000000 		.4byte	0x53
 2269 00a5 05       		.uleb128 0x5
 2270 00a6 39040000 		.4byte	.LASF14
 2271 00aa 04       		.byte	0x4
 2272 00ab 9501     		.2byte	0x195
 2273 00ad 25000000 		.4byte	0x25
 2274 00b1 05       		.uleb128 0x5
 2275 00b2 4A080000 		.4byte	.LASF15
 2276 00b6 04       		.byte	0x4
 2277 00b7 9601     		.2byte	0x196
 2278 00b9 33000000 		.4byte	0x33
 2279 00bd 05       		.uleb128 0x5
 2280 00be B5020000 		.4byte	.LASF16
 2281 00c2 04       		.byte	0x4
 2282 00c3 9701     		.2byte	0x197
 2283 00c5 4C000000 		.4byte	0x4c
 2284 00c9 02       		.uleb128 0x2
 2285 00ca 04       		.byte	0x4
 2286 00cb 04       		.byte	0x4
 2287 00cc A5050000 		.4byte	.LASF17
 2288 00d0 02       		.uleb128 0x2
 2289 00d1 08       		.byte	0x8
 2290 00d2 04       		.byte	0x4
 2291 00d3 C8080000 		.4byte	.LASF18
 2292 00d7 02       		.uleb128 0x2
 2293 00d8 01       		.byte	0x1
 2294 00d9 08       		.byte	0x8
 2295 00da 61070000 		.4byte	.LASF19
 2296 00de 02       		.uleb128 0x2
 2297 00df 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 57


 2298 00e0 04       		.byte	0x4
 2299 00e1 43070000 		.4byte	.LASF20
 2300 00e5 02       		.uleb128 0x2
 2301 00e6 04       		.byte	0x4
 2302 00e7 07       		.byte	0x7
 2303 00e8 FF040000 		.4byte	.LASF21
 2304 00ec 06       		.uleb128 0x6
 2305 00ed 04       		.byte	0x4
 2306 00ee D7000000 		.4byte	0xd7
 2307 00f2 07       		.uleb128 0x7
 2308 00f3 D7000000 		.4byte	0xd7
 2309 00f7 02010000 		.4byte	0x102
 2310 00fb 08       		.uleb128 0x8
 2311 00fc E5000000 		.4byte	0xe5
 2312 0100 17       		.byte	0x17
 2313 0101 00       		.byte	0
 2314 0102 09       		.uleb128 0x9
 2315 0103 0C       		.byte	0xc
 2316 0104 05       		.byte	0x5
 2317 0105 30       		.byte	0x30
 2318 0106 6B010000 		.4byte	0x16b
 2319 010a 0A       		.uleb128 0xa
 2320 010b 53656300 		.ascii	"Sec\000"
 2321 010f 05       		.byte	0x5
 2322 0110 32       		.byte	0x32
 2323 0111 81000000 		.4byte	0x81
 2324 0115 00       		.byte	0
 2325 0116 0A       		.uleb128 0xa
 2326 0117 4D696E00 		.ascii	"Min\000"
 2327 011b 05       		.byte	0x5
 2328 011c 33       		.byte	0x33
 2329 011d 81000000 		.4byte	0x81
 2330 0121 01       		.byte	0x1
 2331 0122 0B       		.uleb128 0xb
 2332 0123 62010000 		.4byte	.LASF22
 2333 0127 05       		.byte	0x5
 2334 0128 34       		.byte	0x34
 2335 0129 81000000 		.4byte	0x81
 2336 012d 02       		.byte	0x2
 2337 012e 0B       		.uleb128 0xb
 2338 012f 6C060000 		.4byte	.LASF23
 2339 0133 05       		.byte	0x5
 2340 0134 35       		.byte	0x35
 2341 0135 81000000 		.4byte	0x81
 2342 0139 03       		.byte	0x3
 2343 013a 0B       		.uleb128 0xb
 2344 013b F4030000 		.4byte	.LASF24
 2345 013f 05       		.byte	0x5
 2346 0140 36       		.byte	0x36
 2347 0141 81000000 		.4byte	0x81
 2348 0145 04       		.byte	0x4
 2349 0146 0B       		.uleb128 0xb
 2350 0147 7D080000 		.4byte	.LASF25
 2351 014b 05       		.byte	0x5
 2352 014c 37       		.byte	0x37
 2353 014d 8D000000 		.4byte	0x8d
 2354 0151 06       		.byte	0x6
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 58


 2355 0152 0B       		.uleb128 0xb
 2356 0153 45010000 		.4byte	.LASF26
 2357 0157 05       		.byte	0x5
 2358 0158 38       		.byte	0x38
 2359 0159 81000000 		.4byte	0x81
 2360 015d 08       		.byte	0x8
 2361 015e 0B       		.uleb128 0xb
 2362 015f FC050000 		.4byte	.LASF27
 2363 0163 05       		.byte	0x5
 2364 0164 39       		.byte	0x39
 2365 0165 8D000000 		.4byte	0x8d
 2366 0169 0A       		.byte	0xa
 2367 016a 00       		.byte	0
 2368 016b 03       		.uleb128 0x3
 2369 016c 4A050000 		.4byte	.LASF28
 2370 0170 05       		.byte	0x5
 2371 0171 3A       		.byte	0x3a
 2372 0172 76010000 		.4byte	0x176
 2373 0176 0C       		.uleb128 0xc
 2374 0177 02010000 		.4byte	0x102
 2375 017b 0D       		.uleb128 0xd
 2376 017c 8101     		.2byte	0x181
 2377 017e 06       		.byte	0x6
 2378 017f 0A       		.byte	0xa
 2379 0180 A9010000 		.4byte	0x1a9
 2380 0184 0B       		.uleb128 0xb
 2381 0185 F2050000 		.4byte	.LASF29
 2382 0189 06       		.byte	0x6
 2383 018a 0C       		.byte	0xc
 2384 018b A9010000 		.4byte	0x1a9
 2385 018f 00       		.byte	0
 2386 0190 0B       		.uleb128 0xb
 2387 0191 FD070000 		.4byte	.LASF30
 2388 0195 06       		.byte	0x6
 2389 0196 0D       		.byte	0xd
 2390 0197 81000000 		.4byte	0x81
 2391 019b 80       		.byte	0x80
 2392 019c 0B       		.uleb128 0xb
 2393 019d 8E060000 		.4byte	.LASF31
 2394 01a1 06       		.byte	0x6
 2395 01a2 0F       		.byte	0xf
 2396 01a3 B9010000 		.4byte	0x1b9
 2397 01a7 81       		.byte	0x81
 2398 01a8 00       		.byte	0
 2399 01a9 07       		.uleb128 0x7
 2400 01aa D7000000 		.4byte	0xd7
 2401 01ae B9010000 		.4byte	0x1b9
 2402 01b2 08       		.uleb128 0x8
 2403 01b3 E5000000 		.4byte	0xe5
 2404 01b7 7F       		.byte	0x7f
 2405 01b8 00       		.byte	0
 2406 01b9 07       		.uleb128 0x7
 2407 01ba D7000000 		.4byte	0xd7
 2408 01be C9010000 		.4byte	0x1c9
 2409 01c2 08       		.uleb128 0x8
 2410 01c3 E5000000 		.4byte	0xe5
 2411 01c7 FF       		.byte	0xff
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 59


 2412 01c8 00       		.byte	0
 2413 01c9 03       		.uleb128 0x3
 2414 01ca 76060000 		.4byte	.LASF32
 2415 01ce 06       		.byte	0x6
 2416 01cf 10       		.byte	0x10
 2417 01d0 7B010000 		.4byte	0x17b
 2418 01d4 09       		.uleb128 0x9
 2419 01d5 1A       		.byte	0x1a
 2420 01d6 07       		.byte	0x7
 2421 01d7 10       		.byte	0x10
 2422 01d8 0D020000 		.4byte	0x20d
 2423 01dc 0B       		.uleb128 0xb
 2424 01dd EB020000 		.4byte	.LASF33
 2425 01e1 07       		.byte	0x7
 2426 01e2 11       		.byte	0x11
 2427 01e3 0D020000 		.4byte	0x20d
 2428 01e7 00       		.byte	0
 2429 01e8 0B       		.uleb128 0xb
 2430 01e9 AA070000 		.4byte	.LASF34
 2431 01ed 07       		.byte	0x7
 2432 01ee 12       		.byte	0x12
 2433 01ef B1000000 		.4byte	0xb1
 2434 01f3 16       		.byte	0x16
 2435 01f4 0B       		.uleb128 0xb
 2436 01f5 8B030000 		.4byte	.LASF35
 2437 01f9 07       		.byte	0x7
 2438 01fa 13       		.byte	0x13
 2439 01fb 81000000 		.4byte	0x81
 2440 01ff 18       		.byte	0x18
 2441 0200 0B       		.uleb128 0xb
 2442 0201 17000000 		.4byte	.LASF36
 2443 0205 07       		.byte	0x7
 2444 0206 14       		.byte	0x14
 2445 0207 81000000 		.4byte	0x81
 2446 020b 19       		.byte	0x19
 2447 020c 00       		.byte	0
 2448 020d 07       		.uleb128 0x7
 2449 020e B1000000 		.4byte	0xb1
 2450 0212 1D020000 		.4byte	0x21d
 2451 0216 08       		.uleb128 0x8
 2452 0217 E5000000 		.4byte	0xe5
 2453 021b 0A       		.byte	0xa
 2454 021c 00       		.byte	0
 2455 021d 03       		.uleb128 0x3
 2456 021e AB050000 		.4byte	.LASF37
 2457 0222 07       		.byte	0x7
 2458 0223 15       		.byte	0x15
 2459 0224 D4010000 		.4byte	0x1d4
 2460 0228 09       		.uleb128 0x9
 2461 0229 14       		.byte	0x14
 2462 022a 08       		.byte	0x8
 2463 022b 11       		.byte	0x11
 2464 022c 6D020000 		.4byte	0x26d
 2465 0230 0B       		.uleb128 0xb
 2466 0231 E4030000 		.4byte	.LASF38
 2467 0235 08       		.byte	0x8
 2468 0236 12       		.byte	0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 60


 2469 0237 C9000000 		.4byte	0xc9
 2470 023b 00       		.byte	0
 2471 023c 0B       		.uleb128 0xb
 2472 023d FA010000 		.4byte	.LASF39
 2473 0241 08       		.byte	0x8
 2474 0242 13       		.byte	0x13
 2475 0243 C9000000 		.4byte	0xc9
 2476 0247 04       		.byte	0x4
 2477 0248 0B       		.uleb128 0xb
 2478 0249 08020000 		.4byte	.LASF40
 2479 024d 08       		.byte	0x8
 2480 024e 14       		.byte	0x14
 2481 024f C9000000 		.4byte	0xc9
 2482 0253 08       		.byte	0x8
 2483 0254 0B       		.uleb128 0xb
 2484 0255 87050000 		.4byte	.LASF41
 2485 0259 08       		.byte	0x8
 2486 025a 15       		.byte	0x15
 2487 025b C9000000 		.4byte	0xc9
 2488 025f 0C       		.byte	0xc
 2489 0260 0B       		.uleb128 0xb
 2490 0261 FF060000 		.4byte	.LASF42
 2491 0265 08       		.byte	0x8
 2492 0266 16       		.byte	0x16
 2493 0267 81000000 		.4byte	0x81
 2494 026b 10       		.byte	0x10
 2495 026c 00       		.byte	0
 2496 026d 03       		.uleb128 0x3
 2497 026e DD080000 		.4byte	.LASF43
 2498 0272 08       		.byte	0x8
 2499 0273 17       		.byte	0x17
 2500 0274 28020000 		.4byte	0x228
 2501 0278 09       		.uleb128 0x9
 2502 0279 10       		.byte	0x10
 2503 027a 08       		.byte	0x8
 2504 027b 19       		.byte	0x19
 2505 027c B1020000 		.4byte	0x2b1
 2506 0280 0B       		.uleb128 0xb
 2507 0281 4B030000 		.4byte	.LASF44
 2508 0285 08       		.byte	0x8
 2509 0286 1A       		.byte	0x1a
 2510 0287 C9000000 		.4byte	0xc9
 2511 028b 00       		.byte	0
 2512 028c 0B       		.uleb128 0xb
 2513 028d 75020000 		.4byte	.LASF45
 2514 0291 08       		.byte	0x8
 2515 0292 1B       		.byte	0x1b
 2516 0293 C9000000 		.4byte	0xc9
 2517 0297 04       		.byte	0x4
 2518 0298 0B       		.uleb128 0xb
 2519 0299 EE060000 		.4byte	.LASF46
 2520 029d 08       		.byte	0x8
 2521 029e 1C       		.byte	0x1c
 2522 029f C9000000 		.4byte	0xc9
 2523 02a3 08       		.byte	0x8
 2524 02a4 0B       		.uleb128 0xb
 2525 02a5 58060000 		.4byte	.LASF47
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 61


 2526 02a9 08       		.byte	0x8
 2527 02aa 1D       		.byte	0x1d
 2528 02ab C9000000 		.4byte	0xc9
 2529 02af 0C       		.byte	0xc
 2530 02b0 00       		.byte	0
 2531 02b1 03       		.uleb128 0x3
 2532 02b2 87080000 		.4byte	.LASF48
 2533 02b6 08       		.byte	0x8
 2534 02b7 1E       		.byte	0x1e
 2535 02b8 78020000 		.4byte	0x278
 2536 02bc 0E       		.uleb128 0xe
 2537 02bd 746D00   		.ascii	"tm\000"
 2538 02c0 24       		.byte	0x24
 2539 02c1 09       		.byte	0x9
 2540 02c2 21       		.byte	0x21
 2541 02c3 34030000 		.4byte	0x334
 2542 02c7 0B       		.uleb128 0xb
 2543 02c8 EB070000 		.4byte	.LASF49
 2544 02cc 09       		.byte	0x9
 2545 02cd 23       		.byte	0x23
 2546 02ce 68000000 		.4byte	0x68
 2547 02d2 00       		.byte	0
 2548 02d3 0B       		.uleb128 0xb
 2549 02d4 E1040000 		.4byte	.LASF50
 2550 02d8 09       		.byte	0x9
 2551 02d9 24       		.byte	0x24
 2552 02da 68000000 		.4byte	0x68
 2553 02de 04       		.byte	0x4
 2554 02df 0B       		.uleb128 0xb
 2555 02e0 0F000000 		.4byte	.LASF51
 2556 02e4 09       		.byte	0x9
 2557 02e5 25       		.byte	0x25
 2558 02e6 68000000 		.4byte	0x68
 2559 02ea 08       		.byte	0x8
 2560 02eb 0B       		.uleb128 0xb
 2561 02ec DA070000 		.4byte	.LASF52
 2562 02f0 09       		.byte	0x9
 2563 02f1 26       		.byte	0x26
 2564 02f2 68000000 		.4byte	0x68
 2565 02f6 0C       		.byte	0xc
 2566 02f7 0B       		.uleb128 0xb
 2567 02f8 16030000 		.4byte	.LASF53
 2568 02fc 09       		.byte	0x9
 2569 02fd 27       		.byte	0x27
 2570 02fe 68000000 		.4byte	0x68
 2571 0302 10       		.byte	0x10
 2572 0303 0B       		.uleb128 0xb
 2573 0304 39030000 		.4byte	.LASF54
 2574 0308 09       		.byte	0x9
 2575 0309 28       		.byte	0x28
 2576 030a 68000000 		.4byte	0x68
 2577 030e 14       		.byte	0x14
 2578 030f 0B       		.uleb128 0xb
 2579 0310 16070000 		.4byte	.LASF55
 2580 0314 09       		.byte	0x9
 2581 0315 29       		.byte	0x29
 2582 0316 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 62


 2583 031a 18       		.byte	0x18
 2584 031b 0B       		.uleb128 0xb
 2585 031c 08050000 		.4byte	.LASF56
 2586 0320 09       		.byte	0x9
 2587 0321 2A       		.byte	0x2a
 2588 0322 68000000 		.4byte	0x68
 2589 0326 1C       		.byte	0x1c
 2590 0327 0B       		.uleb128 0xb
 2591 0328 1D040000 		.4byte	.LASF57
 2592 032c 09       		.byte	0x9
 2593 032d 2B       		.byte	0x2b
 2594 032e 68000000 		.4byte	0x68
 2595 0332 20       		.byte	0x20
 2596 0333 00       		.byte	0
 2597 0334 09       		.uleb128 0x9
 2598 0335 2C       		.byte	0x2c
 2599 0336 0A       		.byte	0xa
 2600 0337 14       		.byte	0x14
 2601 0338 61030000 		.4byte	0x361
 2602 033c 0A       		.uleb128 0xa
 2603 033d 6B657900 		.ascii	"key\000"
 2604 0341 0A       		.byte	0xa
 2605 0342 15       		.byte	0x15
 2606 0343 61030000 		.4byte	0x361
 2607 0347 00       		.byte	0
 2608 0348 0B       		.uleb128 0xb
 2609 0349 2E030000 		.4byte	.LASF58
 2610 034d 0A       		.byte	0xa
 2611 034e 16       		.byte	0x16
 2612 034f 61030000 		.4byte	0x361
 2613 0353 14       		.byte	0x14
 2614 0354 0B       		.uleb128 0xb
 2615 0355 40050000 		.4byte	.LASF59
 2616 0359 0A       		.byte	0xa
 2617 035a 17       		.byte	0x17
 2618 035b BD000000 		.4byte	0xbd
 2619 035f 28       		.byte	0x28
 2620 0360 00       		.byte	0
 2621 0361 07       		.uleb128 0x7
 2622 0362 D7000000 		.4byte	0xd7
 2623 0366 71030000 		.4byte	0x371
 2624 036a 08       		.uleb128 0x8
 2625 036b E5000000 		.4byte	0xe5
 2626 036f 13       		.byte	0x13
 2627 0370 00       		.byte	0
 2628 0371 03       		.uleb128 0x3
 2629 0372 74030000 		.4byte	.LASF60
 2630 0376 0A       		.byte	0xa
 2631 0377 19       		.byte	0x19
 2632 0378 34030000 		.4byte	0x334
 2633 037c 09       		.uleb128 0x9
 2634 037d 3C       		.byte	0x3c
 2635 037e 0B       		.byte	0xb
 2636 037f 36       		.byte	0x36
 2637 0380 A9030000 		.4byte	0x3a9
 2638 0384 0B       		.uleb128 0xb
 2639 0385 D3070000 		.4byte	.LASF61
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 63


 2640 0389 0B       		.byte	0xb
 2641 038a 37       		.byte	0x37
 2642 038b 61030000 		.4byte	0x361
 2643 038f 00       		.byte	0
 2644 0390 0B       		.uleb128 0xb
 2645 0391 E2020000 		.4byte	.LASF62
 2646 0395 0B       		.byte	0xb
 2647 0396 38       		.byte	0x38
 2648 0397 61030000 		.4byte	0x361
 2649 039b 14       		.byte	0x14
 2650 039c 0B       		.uleb128 0xb
 2651 039d 89060000 		.4byte	.LASF63
 2652 03a1 0B       		.byte	0xb
 2653 03a2 39       		.byte	0x39
 2654 03a3 61030000 		.4byte	0x361
 2655 03a7 28       		.byte	0x28
 2656 03a8 00       		.byte	0
 2657 03a9 03       		.uleb128 0x3
 2658 03aa 40020000 		.4byte	.LASF64
 2659 03ae 0B       		.byte	0xb
 2660 03af 3B       		.byte	0x3b
 2661 03b0 7C030000 		.4byte	0x37c
 2662 03b4 09       		.uleb128 0x9
 2663 03b5 20       		.byte	0x20
 2664 03b6 0B       		.byte	0xb
 2665 03b7 3D       		.byte	0x3d
 2666 03b8 1D040000 		.4byte	0x41d
 2667 03bc 0B       		.uleb128 0xb
 2668 03bd 4D020000 		.4byte	.LASF65
 2669 03c1 0B       		.byte	0xb
 2670 03c2 3E       		.byte	0x3e
 2671 03c3 68000000 		.4byte	0x68
 2672 03c7 00       		.byte	0
 2673 03c8 0A       		.uleb128 0xa
 2674 03c9 62657200 		.ascii	"ber\000"
 2675 03cd 0B       		.byte	0xb
 2676 03ce 3F       		.byte	0x3f
 2677 03cf 68000000 		.4byte	0x68
 2678 03d3 04       		.byte	0x4
 2679 03d4 0B       		.uleb128 0xb
 2680 03d5 67060000 		.4byte	.LASF66
 2681 03d9 0B       		.byte	0xb
 2682 03da 40       		.byte	0x40
 2683 03db 68000000 		.4byte	0x68
 2684 03df 08       		.byte	0x8
 2685 03e0 0B       		.uleb128 0xb
 2686 03e1 C4010000 		.4byte	.LASF67
 2687 03e5 0B       		.byte	0xb
 2688 03e6 41       		.byte	0x41
 2689 03e7 68000000 		.4byte	0x68
 2690 03eb 0C       		.byte	0xc
 2691 03ec 0B       		.uleb128 0xb
 2692 03ed 32060000 		.4byte	.LASF68
 2693 03f1 0B       		.byte	0xb
 2694 03f2 42       		.byte	0x42
 2695 03f3 68000000 		.4byte	0x68
 2696 03f7 10       		.byte	0x10
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 64


 2697 03f8 0B       		.uleb128 0xb
 2698 03f9 2D060000 		.4byte	.LASF69
 2699 03fd 0B       		.byte	0xb
 2700 03fe 43       		.byte	0x43
 2701 03ff 68000000 		.4byte	0x68
 2702 0403 14       		.byte	0x14
 2703 0404 0B       		.uleb128 0xb
 2704 0405 D7010000 		.4byte	.LASF70
 2705 0409 0B       		.byte	0xb
 2706 040a 44       		.byte	0x44
 2707 040b 68000000 		.4byte	0x68
 2708 040f 18       		.byte	0x18
 2709 0410 0B       		.uleb128 0xb
 2710 0411 5C020000 		.4byte	.LASF71
 2711 0415 0B       		.byte	0xb
 2712 0416 45       		.byte	0x45
 2713 0417 68000000 		.4byte	0x68
 2714 041b 1C       		.byte	0x1c
 2715 041c 00       		.byte	0
 2716 041d 03       		.uleb128 0x3
 2717 041e E0060000 		.4byte	.LASF72
 2718 0422 0B       		.byte	0xb
 2719 0423 47       		.byte	0x47
 2720 0424 B4030000 		.4byte	0x3b4
 2721 0428 09       		.uleb128 0x9
 2722 0429 07       		.byte	0x7
 2723 042a 0B       		.byte	0xb
 2724 042b 53       		.byte	0x53
 2725 042c 85040000 		.4byte	0x485
 2726 0430 0B       		.uleb128 0xb
 2727 0431 BB020000 		.4byte	.LASF73
 2728 0435 0B       		.byte	0xb
 2729 0436 55       		.byte	0x55
 2730 0437 81000000 		.4byte	0x81
 2731 043b 00       		.byte	0
 2732 043c 0B       		.uleb128 0xb
 2733 043d 74080000 		.4byte	.LASF74
 2734 0441 0B       		.byte	0xb
 2735 0442 57       		.byte	0x57
 2736 0443 85040000 		.4byte	0x485
 2737 0447 01       		.byte	0x1
 2738 0448 0B       		.uleb128 0xb
 2739 0449 BB080000 		.4byte	.LASF75
 2740 044d 0B       		.byte	0xb
 2741 044e 59       		.byte	0x59
 2742 044f 81000000 		.4byte	0x81
 2743 0453 02       		.byte	0x2
 2744 0454 0B       		.uleb128 0xb
 2745 0455 4E060000 		.4byte	.LASF76
 2746 0459 0B       		.byte	0xb
 2747 045a 5B       		.byte	0x5b
 2748 045b 81000000 		.4byte	0x81
 2749 045f 03       		.byte	0x3
 2750 0460 0B       		.uleb128 0xb
 2751 0461 1D030000 		.4byte	.LASF77
 2752 0465 0B       		.byte	0xb
 2753 0466 5E       		.byte	0x5e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 65


 2754 0467 81000000 		.4byte	0x81
 2755 046b 04       		.byte	0x4
 2756 046c 0B       		.uleb128 0xb
 2757 046d 1D080000 		.4byte	.LASF78
 2758 0471 0B       		.byte	0xb
 2759 0472 63       		.byte	0x63
 2760 0473 81000000 		.4byte	0x81
 2761 0477 05       		.byte	0x5
 2762 0478 0B       		.uleb128 0xb
 2763 0479 1E070000 		.4byte	.LASF79
 2764 047d 0B       		.byte	0xb
 2765 047e 65       		.byte	0x65
 2766 047f 81000000 		.4byte	0x81
 2767 0483 06       		.byte	0x6
 2768 0484 00       		.byte	0
 2769 0485 02       		.uleb128 0x2
 2770 0486 01       		.byte	0x1
 2771 0487 02       		.byte	0x2
 2772 0488 01060000 		.4byte	.LASF80
 2773 048c 03       		.uleb128 0x3
 2774 048d AE040000 		.4byte	.LASF81
 2775 0491 0B       		.byte	0xb
 2776 0492 67       		.byte	0x67
 2777 0493 28040000 		.4byte	0x428
 2778 0497 09       		.uleb128 0x9
 2779 0498 06       		.byte	0x6
 2780 0499 0C       		.byte	0xc
 2781 049a 2E       		.byte	0x2e
 2782 049b D0040000 		.4byte	0x4d0
 2783 049f 0B       		.uleb128 0xb
 2784 04a0 FE020000 		.4byte	.LASF82
 2785 04a4 0C       		.byte	0xc
 2786 04a5 30       		.byte	0x30
 2787 04a6 8D000000 		.4byte	0x8d
 2788 04aa 00       		.byte	0
 2789 04ab 0B       		.uleb128 0xb
 2790 04ac 5E080000 		.4byte	.LASF83
 2791 04b0 0C       		.byte	0xc
 2792 04b1 31       		.byte	0x31
 2793 04b2 B1000000 		.4byte	0xb1
 2794 04b6 02       		.byte	0x2
 2795 04b7 0B       		.uleb128 0xb
 2796 04b8 50080000 		.4byte	.LASF84
 2797 04bc 0C       		.byte	0xc
 2798 04bd 32       		.byte	0x32
 2799 04be 81000000 		.4byte	0x81
 2800 04c2 04       		.byte	0x4
 2801 04c3 0B       		.uleb128 0xb
 2802 04c4 89000000 		.4byte	.LASF85
 2803 04c8 0C       		.byte	0xc
 2804 04c9 33       		.byte	0x33
 2805 04ca 81000000 		.4byte	0x81
 2806 04ce 05       		.byte	0x5
 2807 04cf 00       		.byte	0
 2808 04d0 03       		.uleb128 0x3
 2809 04d1 6F020000 		.4byte	.LASF86
 2810 04d5 0C       		.byte	0xc
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 66


 2811 04d6 36       		.byte	0x36
 2812 04d7 DB040000 		.4byte	0x4db
 2813 04db 0C       		.uleb128 0xc
 2814 04dc 97040000 		.4byte	0x497
 2815 04e0 09       		.uleb128 0x9
 2816 04e1 1C       		.byte	0x1c
 2817 04e2 0C       		.byte	0xc
 2818 04e3 39       		.byte	0x39
 2819 04e4 01050000 		.4byte	0x501
 2820 04e8 0B       		.uleb128 0xb
 2821 04e9 26040000 		.4byte	.LASF87
 2822 04ed 0C       		.byte	0xc
 2823 04ee 3B       		.byte	0x3b
 2824 04ef 01050000 		.4byte	0x501
 2825 04f3 00       		.byte	0
 2826 04f4 0B       		.uleb128 0xb
 2827 04f5 AD080000 		.4byte	.LASF88
 2828 04f9 0C       		.byte	0xc
 2829 04fa 3C       		.byte	0x3c
 2830 04fb F2000000 		.4byte	0xf2
 2831 04ff 04       		.byte	0x4
 2832 0500 00       		.byte	0
 2833 0501 06       		.uleb128 0x6
 2834 0502 04       		.byte	0x4
 2835 0503 A9030000 		.4byte	0x3a9
 2836 0507 03       		.uleb128 0x3
 2837 0508 A3040000 		.4byte	.LASF89
 2838 050c 0C       		.byte	0xc
 2839 050d 3E       		.byte	0x3e
 2840 050e E0040000 		.4byte	0x4e0
 2841 0512 09       		.uleb128 0x9
 2842 0513 68       		.byte	0x68
 2843 0514 0C       		.byte	0xc
 2844 0515 44       		.byte	0x44
 2845 0516 33050000 		.4byte	0x533
 2846 051a 0B       		.uleb128 0xb
 2847 051b 31040000 		.4byte	.LASF90
 2848 051f 0C       		.byte	0xc
 2849 0520 49       		.byte	0x49
 2850 0521 33050000 		.4byte	0x533
 2851 0525 00       		.byte	0
 2852 0526 0B       		.uleb128 0xb
 2853 0527 15040000 		.4byte	.LASF91
 2854 052b 0C       		.byte	0xc
 2855 052c 4A       		.byte	0x4a
 2856 052d 68000000 		.4byte	0x68
 2857 0531 64       		.byte	0x64
 2858 0532 00       		.byte	0
 2859 0533 07       		.uleb128 0x7
 2860 0534 D7000000 		.4byte	0xd7
 2861 0538 43050000 		.4byte	0x543
 2862 053c 08       		.uleb128 0x8
 2863 053d E5000000 		.4byte	0xe5
 2864 0541 63       		.byte	0x63
 2865 0542 00       		.byte	0
 2866 0543 03       		.uleb128 0x3
 2867 0544 10050000 		.4byte	.LASF92
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 67


 2868 0548 0C       		.byte	0xc
 2869 0549 50       		.byte	0x50
 2870 054a 12050000 		.4byte	0x512
 2871 054e 0F       		.uleb128 0xf
 2872 054f A1000000 		.4byte	.LASF172
 2873 0553 01       		.byte	0x1
 2874 0554 14       		.byte	0x14
 2875 0555 00000000 		.4byte	.LFB64
 2876 0559 0C000000 		.4byte	.LFE64-.LFB64
 2877 055d 01       		.uleb128 0x1
 2878 055e 9C       		.byte	0x9c
 2879 055f 10       		.uleb128 0x10
 2880 0560 9D080000 		.4byte	.LASF105
 2881 0564 01       		.byte	0x1
 2882 0565 28       		.byte	0x28
 2883 0566 00000000 		.4byte	.LFB65
 2884 056a 4C010000 		.4byte	.LFE65-.LFB65
 2885 056e 01       		.uleb128 0x1
 2886 056f 9C       		.byte	0x9c
 2887 0570 91050000 		.4byte	0x591
 2888 0574 11       		.uleb128 0x11
 2889 0575 92070000 		.4byte	.LASF93
 2890 0579 01       		.byte	0x1
 2891 057a 3C       		.byte	0x3c
 2892 057b 91050000 		.4byte	0x591
 2893 057f 02       		.uleb128 0x2
 2894 0580 91       		.byte	0x91
 2895 0581 64       		.sleb128 -28
 2896 0582 11       		.uleb128 0x11
 2897 0583 C5030000 		.4byte	.LASF94
 2898 0587 01       		.byte	0x1
 2899 0588 62       		.byte	0x62
 2900 0589 81000000 		.4byte	0x81
 2901 058d 02       		.uleb128 0x2
 2902 058e 91       		.byte	0x91
 2903 058f 6F       		.sleb128 -17
 2904 0590 00       		.byte	0
 2905 0591 07       		.uleb128 0x7
 2906 0592 99000000 		.4byte	0x99
 2907 0596 A1050000 		.4byte	0x5a1
 2908 059a 08       		.uleb128 0x8
 2909 059b E5000000 		.4byte	0xe5
 2910 059f 01       		.byte	0x1
 2911 05a0 00       		.byte	0
 2912 05a1 12       		.uleb128 0x12
 2913 05a2 3E040000 		.4byte	.LASF96
 2914 05a6 01       		.byte	0x1
 2915 05a7 6C       		.byte	0x6c
 2916 05a8 68000000 		.4byte	0x68
 2917 05ac 00000000 		.4byte	.LFB66
 2918 05b0 A0000000 		.4byte	.LFE66-.LFB66
 2919 05b4 01       		.uleb128 0x1
 2920 05b5 9C       		.byte	0x9c
 2921 05b6 C9050000 		.4byte	0x5c9
 2922 05ba 11       		.uleb128 0x11
 2923 05bb E5050000 		.4byte	.LASF95
 2924 05bf 01       		.byte	0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 68


 2925 05c0 94       		.byte	0x94
 2926 05c1 81000000 		.4byte	0x81
 2927 05c5 02       		.uleb128 0x2
 2928 05c6 91       		.byte	0x91
 2929 05c7 77       		.sleb128 -9
 2930 05c8 00       		.byte	0
 2931 05c9 13       		.uleb128 0x13
 2932 05ca B8070000 		.4byte	.LASF173
 2933 05ce 01       		.byte	0x1
 2934 05cf A4       		.byte	0xa4
 2935 05d0 00000000 		.4byte	.LFB67
 2936 05d4 2A000000 		.4byte	.LFE67-.LFB67
 2937 05d8 01       		.uleb128 0x1
 2938 05d9 9C       		.byte	0x9c
 2939 05da 14       		.uleb128 0x14
 2940 05db 80030000 		.4byte	.LASF97
 2941 05df 01       		.byte	0x1
 2942 05e0 C9       		.byte	0xc9
 2943 05e1 00000000 		.4byte	.LFB68
 2944 05e5 8C000000 		.4byte	.LFE68-.LFB68
 2945 05e9 01       		.uleb128 0x1
 2946 05ea 9C       		.byte	0x9c
 2947 05eb FE050000 		.4byte	0x5fe
 2948 05ef 15       		.uleb128 0x15
 2949 05f0 C5040000 		.4byte	.LASF98
 2950 05f4 01       		.byte	0x1
 2951 05f5 C9       		.byte	0xc9
 2952 05f6 81000000 		.4byte	0x81
 2953 05fa 02       		.uleb128 0x2
 2954 05fb 91       		.byte	0x91
 2955 05fc 77       		.sleb128 -9
 2956 05fd 00       		.byte	0
 2957 05fe 16       		.uleb128 0x16
 2958 05ff 92080000 		.4byte	.LASF102
 2959 0603 01       		.byte	0x1
 2960 0604 E9       		.byte	0xe9
 2961 0605 81000000 		.4byte	0x81
 2962 0609 00000000 		.4byte	.LFB69
 2963 060d 48000000 		.4byte	.LFE69-.LFB69
 2964 0611 01       		.uleb128 0x1
 2965 0612 9C       		.byte	0x9c
 2966 0613 34060000 		.4byte	0x634
 2967 0617 15       		.uleb128 0x15
 2968 0618 EE040000 		.4byte	.LASF99
 2969 061c 01       		.byte	0x1
 2970 061d E9       		.byte	0xe9
 2971 061e 34060000 		.4byte	0x634
 2972 0622 02       		.uleb128 0x2
 2973 0623 91       		.byte	0x91
 2974 0624 74       		.sleb128 -12
 2975 0625 15       		.uleb128 0x15
 2976 0626 C5040000 		.4byte	.LASF98
 2977 062a 01       		.byte	0x1
 2978 062b E9       		.byte	0xe9
 2979 062c 81000000 		.4byte	0x81
 2980 0630 02       		.uleb128 0x2
 2981 0631 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 69


 2982 0632 73       		.sleb128 -13
 2983 0633 00       		.byte	0
 2984 0634 06       		.uleb128 0x6
 2985 0635 04       		.byte	0x4
 2986 0636 D0040000 		.4byte	0x4d0
 2987 063a 17       		.uleb128 0x17
 2988 063b 37060000 		.4byte	.LASF100
 2989 063f 01       		.byte	0x1
 2990 0640 FE       		.byte	0xfe
 2991 0641 00000000 		.4byte	.LFB70
 2992 0645 1E000000 		.4byte	.LFE70-.LFB70
 2993 0649 01       		.uleb128 0x1
 2994 064a 9C       		.byte	0x9c
 2995 064b 5E060000 		.4byte	0x65e
 2996 064f 15       		.uleb128 0x15
 2997 0650 95060000 		.4byte	.LASF101
 2998 0654 01       		.byte	0x1
 2999 0655 FE       		.byte	0xfe
 3000 0656 34060000 		.4byte	0x634
 3001 065a 02       		.uleb128 0x2
 3002 065b 91       		.byte	0x91
 3003 065c 74       		.sleb128 -12
 3004 065d 00       		.byte	0
 3005 065e 18       		.uleb128 0x18
 3006 065f 6D050000 		.4byte	.LASF103
 3007 0663 01       		.byte	0x1
 3008 0664 0701     		.2byte	0x107
 3009 0666 D0040000 		.4byte	0x4d0
 3010 066a 00000000 		.4byte	.LFB71
 3011 066e 46000000 		.4byte	.LFE71-.LFB71
 3012 0672 01       		.uleb128 0x1
 3013 0673 9C       		.byte	0x9c
 3014 0674 B5060000 		.4byte	0x6b5
 3015 0678 19       		.uleb128 0x19
 3016 0679 FE020000 		.4byte	.LASF82
 3017 067d 01       		.byte	0x1
 3018 067e 0701     		.2byte	0x107
 3019 0680 8D000000 		.4byte	0x8d
 3020 0684 02       		.uleb128 0x2
 3021 0685 91       		.byte	0x91
 3022 0686 6A       		.sleb128 -22
 3023 0687 19       		.uleb128 0x19
 3024 0688 50080000 		.4byte	.LASF84
 3025 068c 01       		.byte	0x1
 3026 068d 0701     		.2byte	0x107
 3027 068f 81000000 		.4byte	0x81
 3028 0693 02       		.uleb128 0x2
 3029 0694 91       		.byte	0x91
 3030 0695 69       		.sleb128 -23
 3031 0696 19       		.uleb128 0x19
 3032 0697 89000000 		.4byte	.LASF85
 3033 069b 01       		.byte	0x1
 3034 069c 0701     		.2byte	0x107
 3035 069e 81000000 		.4byte	0x81
 3036 06a2 02       		.uleb128 0x2
 3037 06a3 91       		.byte	0x91
 3038 06a4 68       		.sleb128 -24
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 70


 3039 06a5 1A       		.uleb128 0x1a
 3040 06a6 E2070000 		.4byte	.LASF104
 3041 06aa 01       		.byte	0x1
 3042 06ab 0A01     		.2byte	0x10a
 3043 06ad D0040000 		.4byte	0x4d0
 3044 06b1 02       		.uleb128 0x2
 3045 06b2 91       		.byte	0x91
 3046 06b3 70       		.sleb128 -16
 3047 06b4 00       		.byte	0
 3048 06b5 1B       		.uleb128 0x1b
 3049 06b6 A4060000 		.4byte	.LASF106
 3050 06ba 01       		.byte	0x1
 3051 06bb 2001     		.2byte	0x120
 3052 06bd 00000000 		.4byte	.LFB72
 3053 06c1 04010000 		.4byte	.LFE72-.LFB72
 3054 06c5 01       		.uleb128 0x1
 3055 06c6 9C       		.byte	0x9c
 3056 06c7 1C070000 		.4byte	0x71c
 3057 06cb 1A       		.uleb128 0x1a
 3058 06cc 9F010000 		.4byte	.LASF107
 3059 06d0 01       		.byte	0x1
 3060 06d1 2801     		.2byte	0x128
 3061 06d3 C9010000 		.4byte	0x1c9
 3062 06d7 03       		.uleb128 0x3
 3063 06d8 91       		.byte	0x91
 3064 06d9 EC7C     		.sleb128 -404
 3065 06db 1A       		.uleb128 0x1a
 3066 06dc 2A080000 		.4byte	.LASF108
 3067 06e0 01       		.byte	0x1
 3068 06e1 2C01     		.2byte	0x12c
 3069 06e3 C9010000 		.4byte	0x1c9
 3070 06e7 03       		.uleb128 0x3
 3071 06e8 91       		.byte	0x91
 3072 06e9 E879     		.sleb128 -792
 3073 06eb 1A       		.uleb128 0x1a
 3074 06ec 3A010000 		.4byte	.LASF109
 3075 06f0 01       		.byte	0x1
 3076 06f1 3001     		.2byte	0x130
 3077 06f3 C9010000 		.4byte	0x1c9
 3078 06f7 03       		.uleb128 0x3
 3079 06f8 91       		.byte	0x91
 3080 06f9 E476     		.sleb128 -1180
 3081 06fb 1A       		.uleb128 0x1a
 3082 06fc 6C040000 		.4byte	.LASF110
 3083 0700 01       		.byte	0x1
 3084 0701 3401     		.2byte	0x134
 3085 0703 C9010000 		.4byte	0x1c9
 3086 0707 03       		.uleb128 0x3
 3087 0708 91       		.byte	0x91
 3088 0709 E073     		.sleb128 -1568
 3089 070b 1A       		.uleb128 0x1a
 3090 070c 00000000 		.4byte	.LASF111
 3091 0710 01       		.byte	0x1
 3092 0711 3801     		.2byte	0x138
 3093 0713 C9010000 		.4byte	0x1c9
 3094 0717 03       		.uleb128 0x3
 3095 0718 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 71


 3096 0719 DC70     		.sleb128 -1956
 3097 071b 00       		.byte	0
 3098 071c 1C       		.uleb128 0x1c
 3099 071d A8080000 		.4byte	.LASF174
 3100 0721 01       		.byte	0x1
 3101 0722 4301     		.2byte	0x143
 3102 0724 68000000 		.4byte	0x68
 3103 0728 00000000 		.4byte	.LFB73
 3104 072c 1E000000 		.4byte	.LFE73-.LFB73
 3105 0730 01       		.uleb128 0x1
 3106 0731 9C       		.byte	0x9c
 3107 0732 1D       		.uleb128 0x1d
 3108 0733 C5020000 		.4byte	.LASF112
 3109 0737 01       		.byte	0x1
 3110 0738 5901     		.2byte	0x159
 3111 073a 81000000 		.4byte	0x81
 3112 073e 00000000 		.4byte	.LFB74
 3113 0742 5C040000 		.4byte	.LFE74-.LFB74
 3114 0746 01       		.uleb128 0x1
 3115 0747 9C       		.byte	0x9c
 3116 0748 9C080000 		.4byte	0x89c
 3117 074c 1E       		.uleb128 0x1e
 3118 074d 62000000 		.4byte	.LBB2
 3119 0751 CC030000 		.4byte	.LBE2-.LBB2
 3120 0755 1A       		.uleb128 0x1a
 3121 0756 80050000 		.4byte	.LASF113
 3122 075a 01       		.byte	0x1
 3123 075b 8901     		.2byte	0x189
 3124 075d 61030000 		.4byte	0x361
 3125 0761 02       		.uleb128 0x2
 3126 0762 91       		.byte	0x91
 3127 0763 48       		.sleb128 -56
 3128 0764 1A       		.uleb128 0x1a
 3129 0765 BA050000 		.4byte	.LASF114
 3130 0769 01       		.byte	0x1
 3131 076a 8D01     		.2byte	0x18d
 3132 076c 61030000 		.4byte	0x361
 3133 0770 03       		.uleb128 0x3
 3134 0771 91       		.byte	0x91
 3135 0772 B47F     		.sleb128 -76
 3136 0774 1A       		.uleb128 0x1a
 3137 0775 90020000 		.4byte	.LASF115
 3138 0779 01       		.byte	0x1
 3139 077a 9201     		.2byte	0x192
 3140 077c 61030000 		.4byte	0x361
 3141 0780 03       		.uleb128 0x3
 3142 0781 91       		.byte	0x91
 3143 0782 A07F     		.sleb128 -96
 3144 0784 1A       		.uleb128 0x1a
 3145 0785 D1030000 		.4byte	.LASF116
 3146 0789 01       		.byte	0x1
 3147 078a A501     		.2byte	0x1a5
 3148 078c 8D000000 		.4byte	0x8d
 3149 0790 02       		.uleb128 0x2
 3150 0791 91       		.byte	0x91
 3151 0792 66       		.sleb128 -26
 3152 0793 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 72


 3153 0794 57040000 		.4byte	.LASF117
 3154 0798 01       		.byte	0x1
 3155 0799 A601     		.2byte	0x1a6
 3156 079b 61030000 		.4byte	0x361
 3157 079f 03       		.uleb128 0x3
 3158 07a0 91       		.byte	0x91
 3159 07a1 8C7F     		.sleb128 -116
 3160 07a3 1A       		.uleb128 0x1a
 3161 07a4 7D070000 		.4byte	.LASF118
 3162 07a8 01       		.byte	0x1
 3163 07a9 BB01     		.2byte	0x1bb
 3164 07ab 9C080000 		.4byte	0x89c
 3165 07af 03       		.uleb128 0x3
 3166 07b0 91       		.byte	0x91
 3167 07b1 A475     		.sleb128 -1372
 3168 07b3 1A       		.uleb128 0x1a
 3169 07b4 FD070000 		.4byte	.LASF30
 3170 07b8 01       		.byte	0x1
 3171 07b9 BC01     		.2byte	0x1bc
 3172 07bb 81000000 		.4byte	0x81
 3173 07bf 02       		.uleb128 0x2
 3174 07c0 91       		.byte	0x91
 3175 07c1 65       		.sleb128 -27
 3176 07c2 1A       		.uleb128 0x1a
 3177 07c3 4F070000 		.4byte	.LASF119
 3178 07c7 01       		.byte	0x1
 3179 07c8 C301     		.2byte	0x1c3
 3180 07ca EC000000 		.4byte	0xec
 3181 07ce 02       		.uleb128 0x2
 3182 07cf 91       		.byte	0x91
 3183 07d0 6C       		.sleb128 -20
 3184 07d1 1A       		.uleb128 0x1a
 3185 07d2 BC010000 		.4byte	.LASF120
 3186 07d6 01       		.byte	0x1
 3187 07d7 C701     		.2byte	0x1c7
 3188 07d9 A5000000 		.4byte	0xa5
 3189 07dd 02       		.uleb128 0x2
 3190 07de 91       		.byte	0x91
 3191 07df 64       		.sleb128 -28
 3192 07e0 1A       		.uleb128 0x1a
 3193 07e1 CE020000 		.4byte	.LASF121
 3194 07e5 01       		.byte	0x1
 3195 07e6 F701     		.2byte	0x1f7
 3196 07e8 4C000000 		.4byte	0x4c
 3197 07ec 02       		.uleb128 0x2
 3198 07ed 91       		.byte	0x91
 3199 07ee 5C       		.sleb128 -36
 3200 07ef 1F       		.uleb128 0x1f
 3201 07f0 F0000000 		.4byte	.LBB3
 3202 07f4 2C000000 		.4byte	.LBE3-.LBB3
 3203 07f8 1C080000 		.4byte	0x81c
 3204 07fc 1A       		.uleb128 0x1a
 3205 07fd D0060000 		.4byte	.LASF122
 3206 0801 01       		.byte	0x1
 3207 0802 9A01     		.2byte	0x19a
 3208 0804 8D000000 		.4byte	0x8d
 3209 0808 02       		.uleb128 0x2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 73


 3210 0809 91       		.byte	0x91
 3211 080a 68       		.sleb128 -24
 3212 080b 1A       		.uleb128 0x1a
 3213 080c 2E020000 		.4byte	.LASF123
 3214 0810 01       		.byte	0x1
 3215 0811 9B01     		.2byte	0x19b
 3216 0813 61030000 		.4byte	0x361
 3217 0817 03       		.uleb128 0x3
 3218 0818 91       		.byte	0x91
 3219 0819 F87E     		.sleb128 -136
 3220 081b 00       		.byte	0
 3221 081c 1F       		.uleb128 0x1f
 3222 081d 1E010000 		.4byte	.LBB4
 3223 0821 20000000 		.4byte	.LBE4-.LBB4
 3224 0825 3A080000 		.4byte	0x83a
 3225 0829 1A       		.uleb128 0x1a
 3226 082a 2E020000 		.4byte	.LASF123
 3227 082e 01       		.byte	0x1
 3228 082f 9F01     		.2byte	0x19f
 3229 0831 61030000 		.4byte	0x361
 3230 0835 03       		.uleb128 0x3
 3231 0836 91       		.byte	0x91
 3232 0837 E47E     		.sleb128 -156
 3233 0839 00       		.byte	0
 3234 083a 1F       		.uleb128 0x1f
 3235 083b 5E020000 		.4byte	.LBB5
 3236 083f 4C010000 		.4byte	.LBE5-.LBB5
 3237 0843 71080000 		.4byte	0x871
 3238 0847 1A       		.uleb128 0x1a
 3239 0848 79050000 		.4byte	.LASF124
 3240 084c 01       		.byte	0x1
 3241 084d CC01     		.2byte	0x1cc
 3242 084f A5000000 		.4byte	0xa5
 3243 0853 02       		.uleb128 0x2
 3244 0854 91       		.byte	0x91
 3245 0855 6B       		.sleb128 -21
 3246 0856 1E       		.uleb128 0x1e
 3247 0857 66020000 		.4byte	.LBB6
 3248 085b 28010000 		.4byte	.LBE6-.LBB6
 3249 085f 1A       		.uleb128 0x1a
 3250 0860 9E030000 		.4byte	.LASF125
 3251 0864 01       		.byte	0x1
 3252 0865 CE01     		.2byte	0x1ce
 3253 0867 AC080000 		.4byte	0x8ac
 3254 086b 03       		.uleb128 0x3
 3255 086c 91       		.byte	0x91
 3256 086d EC76     		.sleb128 -1172
 3257 086f 00       		.byte	0
 3258 0870 00       		.byte	0
 3259 0871 1E       		.uleb128 0x1e
 3260 0872 C4030000 		.4byte	.LBB7
 3261 0876 3A000000 		.4byte	.LBE7-.LBB7
 3262 087a 1A       		.uleb128 0x1a
 3263 087b 9E020000 		.4byte	.LASF126
 3264 087f 01       		.byte	0x1
 3265 0880 EE01     		.2byte	0x1ee
 3266 0882 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 74


 3267 0886 02       		.uleb128 0x2
 3268 0887 91       		.byte	0x91
 3269 0888 60       		.sleb128 -32
 3270 0889 1A       		.uleb128 0x1a
 3271 088a 42060000 		.4byte	.LASF127
 3272 088e 01       		.byte	0x1
 3273 088f EF01     		.2byte	0x1ef
 3274 0891 BD080000 		.4byte	0x8bd
 3275 0895 03       		.uleb128 0x3
 3276 0896 91       		.byte	0x91
 3277 0897 D87E     		.sleb128 -168
 3278 0899 00       		.byte	0
 3279 089a 00       		.byte	0
 3280 089b 00       		.byte	0
 3281 089c 07       		.uleb128 0x7
 3282 089d D7000000 		.4byte	0xd7
 3283 08a1 AC080000 		.4byte	0x8ac
 3284 08a5 08       		.uleb128 0x8
 3285 08a6 E5000000 		.4byte	0xe5
 3286 08aa C7       		.byte	0xc7
 3287 08ab 00       		.byte	0
 3288 08ac 07       		.uleb128 0x7
 3289 08ad D7000000 		.4byte	0xd7
 3290 08b1 BD080000 		.4byte	0x8bd
 3291 08b5 20       		.uleb128 0x20
 3292 08b6 E5000000 		.4byte	0xe5
 3293 08ba E803     		.2byte	0x3e8
 3294 08bc 00       		.byte	0
 3295 08bd 07       		.uleb128 0x7
 3296 08be D7000000 		.4byte	0xd7
 3297 08c2 CD080000 		.4byte	0x8cd
 3298 08c6 08       		.uleb128 0x8
 3299 08c7 E5000000 		.4byte	0xe5
 3300 08cb 09       		.byte	0x9
 3301 08cc 00       		.byte	0
 3302 08cd 1D       		.uleb128 0x1d
 3303 08ce C1050000 		.4byte	.LASF128
 3304 08d2 01       		.byte	0x1
 3305 08d3 0C02     		.2byte	0x20c
 3306 08d5 81000000 		.4byte	0x81
 3307 08d9 00000000 		.4byte	.LFB75
 3308 08dd 44000000 		.4byte	.LFE75-.LFB75
 3309 08e1 01       		.uleb128 0x1
 3310 08e2 9C       		.byte	0x9c
 3311 08e3 01090000 		.4byte	0x901
 3312 08e7 1E       		.uleb128 0x1e
 3313 08e8 20000000 		.4byte	.LBB8
 3314 08ec 1A000000 		.4byte	.LBE8-.LBB8
 3315 08f0 1A       		.uleb128 0x1a
 3316 08f1 CE020000 		.4byte	.LASF121
 3317 08f5 01       		.byte	0x1
 3318 08f6 1702     		.2byte	0x217
 3319 08f8 4C000000 		.4byte	0x4c
 3320 08fc 02       		.uleb128 0x2
 3321 08fd 91       		.byte	0x91
 3322 08fe 74       		.sleb128 -12
 3323 08ff 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 75


 3324 0900 00       		.byte	0
 3325 0901 1D       		.uleb128 0x1d
 3326 0902 FF030000 		.4byte	.LASF129
 3327 0906 01       		.byte	0x1
 3328 0907 2C02     		.2byte	0x22c
 3329 0909 81000000 		.4byte	0x81
 3330 090d 00000000 		.4byte	.LFB76
 3331 0911 9C020000 		.4byte	.LFE76-.LFB76
 3332 0915 01       		.uleb128 0x1
 3333 0916 9C       		.byte	0x9c
 3334 0917 A2090000 		.4byte	0x9a2
 3335 091b 1A       		.uleb128 0x1a
 3336 091c 40050000 		.4byte	.LASF59
 3337 0920 01       		.byte	0x1
 3338 0921 2F02     		.2byte	0x22f
 3339 0923 4C000000 		.4byte	0x4c
 3340 0927 02       		.uleb128 0x2
 3341 0928 91       		.byte	0x91
 3342 0929 6C       		.sleb128 -20
 3343 092a 1A       		.uleb128 0x1a
 3344 092b 55070000 		.4byte	.LASF130
 3345 092f 01       		.byte	0x1
 3346 0930 3002     		.2byte	0x230
 3347 0932 A2090000 		.4byte	0x9a2
 3348 0936 02       		.uleb128 0x2
 3349 0937 91       		.byte	0x91
 3350 0938 4C       		.sleb128 -52
 3351 0939 1A       		.uleb128 0x1a
 3352 093a 2E030000 		.4byte	.LASF58
 3353 093e 01       		.byte	0x1
 3354 093f 3402     		.2byte	0x234
 3355 0941 61030000 		.4byte	0x361
 3356 0945 03       		.uleb128 0x3
 3357 0946 91       		.byte	0x91
 3358 0947 B87F     		.sleb128 -72
 3359 0949 1A       		.uleb128 0x1a
 3360 094a E7080000 		.4byte	.LASF131
 3361 094e 01       		.byte	0x1
 3362 094f 3802     		.2byte	0x238
 3363 0951 B2090000 		.4byte	0x9b2
 3364 0955 03       		.uleb128 0x3
 3365 0956 91       		.byte	0x91
 3366 0957 B07F     		.sleb128 -80
 3367 0959 1A       		.uleb128 0x1a
 3368 095a A9030000 		.4byte	.LASF132
 3369 095e 01       		.byte	0x1
 3370 095f 5902     		.2byte	0x259
 3371 0961 6D020000 		.4byte	0x26d
 3372 0965 03       		.uleb128 0x3
 3373 0966 91       		.byte	0x91
 3374 0967 9C7F     		.sleb128 -100
 3375 0969 1F       		.uleb128 0x1f
 3376 096a 46000000 		.4byte	.LBB9
 3377 096e 78000000 		.4byte	.LBE9-.LBB9
 3378 0972 87090000 		.4byte	0x987
 3379 0976 1A       		.uleb128 0x1a
 3380 0977 9B070000 		.4byte	.LASF133
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 76


 3381 097b 01       		.byte	0x1
 3382 097c 4102     		.2byte	0x241
 3383 097e 1D020000 		.4byte	0x21d
 3384 0982 03       		.uleb128 0x3
 3385 0983 91       		.byte	0x91
 3386 0984 807F     		.sleb128 -128
 3387 0986 00       		.byte	0
 3388 0987 1E       		.uleb128 0x1e
 3389 0988 42010000 		.4byte	.LBB10
 3390 098c EE000000 		.4byte	.LBE10-.LBB10
 3391 0990 1A       		.uleb128 0x1a
 3392 0991 F2070000 		.4byte	.LASF134
 3393 0995 01       		.byte	0x1
 3394 0996 7502     		.2byte	0x275
 3395 0998 B1020000 		.4byte	0x2b1
 3396 099c 03       		.uleb128 0x3
 3397 099d 91       		.byte	0x91
 3398 099e F07E     		.sleb128 -144
 3399 09a0 00       		.byte	0
 3400 09a1 00       		.byte	0
 3401 09a2 07       		.uleb128 0x7
 3402 09a3 D7000000 		.4byte	0xd7
 3403 09a7 B2090000 		.4byte	0x9b2
 3404 09ab 08       		.uleb128 0x8
 3405 09ac E5000000 		.4byte	0xe5
 3406 09b0 1F       		.byte	0x1f
 3407 09b1 00       		.byte	0
 3408 09b2 07       		.uleb128 0x7
 3409 09b3 D7000000 		.4byte	0xd7
 3410 09b7 C2090000 		.4byte	0x9c2
 3411 09bb 08       		.uleb128 0x8
 3412 09bc E5000000 		.4byte	0xe5
 3413 09c0 04       		.byte	0x4
 3414 09c1 00       		.byte	0
 3415 09c2 21       		.uleb128 0x21
 3416 09c3 6C030000 		.4byte	.LASF135
 3417 09c7 01       		.byte	0x1
 3418 09c8 9D02     		.2byte	0x29d
 3419 09ca 81000000 		.4byte	0x81
 3420 09ce 00000000 		.4byte	.LFB77
 3421 09d2 74000000 		.4byte	.LFE77-.LFB77
 3422 09d6 01       		.uleb128 0x1
 3423 09d7 9C       		.byte	0x9c
 3424 09d8 080A0000 		.4byte	0xa08
 3425 09dc 19       		.uleb128 0x19
 3426 09dd 40050000 		.4byte	.LASF59
 3427 09e1 01       		.byte	0x1
 3428 09e2 9D02     		.2byte	0x29d
 3429 09e4 4C000000 		.4byte	0x4c
 3430 09e8 02       		.uleb128 0x2
 3431 09e9 91       		.byte	0x91
 3432 09ea 64       		.sleb128 -28
 3433 09eb 22       		.uleb128 0x22
 3434 09ec 7400     		.ascii	"t\000"
 3435 09ee 01       		.byte	0x1
 3436 09ef A402     		.2byte	0x2a4
 3437 09f1 080A0000 		.4byte	0xa08
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 77


 3438 09f5 02       		.uleb128 0x2
 3439 09f6 91       		.byte	0x91
 3440 09f7 74       		.sleb128 -12
 3441 09f8 1A       		.uleb128 0x1a
 3442 09f9 1F050000 		.4byte	.LASF136
 3443 09fd 01       		.byte	0x1
 3444 09fe A902     		.2byte	0x2a9
 3445 0a00 6B010000 		.4byte	0x16b
 3446 0a04 02       		.uleb128 0x2
 3447 0a05 91       		.byte	0x91
 3448 0a06 68       		.sleb128 -24
 3449 0a07 00       		.byte	0
 3450 0a08 06       		.uleb128 0x6
 3451 0a09 04       		.byte	0x4
 3452 0a0a BC020000 		.4byte	0x2bc
 3453 0a0e 21       		.uleb128 0x21
 3454 0a0f 0D030000 		.4byte	.LASF137
 3455 0a13 01       		.byte	0x1
 3456 0a14 C602     		.2byte	0x2c6
 3457 0a16 81000000 		.4byte	0x81
 3458 0a1a 00000000 		.4byte	.LFB78
 3459 0a1e 38010000 		.4byte	.LFE78-.LFB78
 3460 0a22 01       		.uleb128 0x1
 3461 0a23 9C       		.byte	0x9c
 3462 0a24 870A0000 		.4byte	0xa87
 3463 0a28 19       		.uleb128 0x19
 3464 0a29 34030000 		.4byte	.LASF138
 3465 0a2d 01       		.byte	0x1
 3466 0a2e C602     		.2byte	0x2c6
 3467 0a30 EC000000 		.4byte	0xec
 3468 0a34 03       		.uleb128 0x3
 3469 0a35 91       		.byte	0x91
 3470 0a36 9C7E     		.sleb128 -228
 3471 0a38 19       		.uleb128 0x19
 3472 0a39 29030000 		.4byte	.LASF139
 3473 0a3d 01       		.byte	0x1
 3474 0a3e C602     		.2byte	0x2c6
 3475 0a40 68000000 		.4byte	0x68
 3476 0a44 03       		.uleb128 0x3
 3477 0a45 91       		.byte	0x91
 3478 0a46 987E     		.sleb128 -232
 3479 0a48 19       		.uleb128 0x19
 3480 0a49 E8040000 		.4byte	.LASF140
 3481 0a4d 01       		.byte	0x1
 3482 0a4e C602     		.2byte	0x2c6
 3483 0a50 EC000000 		.4byte	0xec
 3484 0a54 03       		.uleb128 0x3
 3485 0a55 91       		.byte	0x91
 3486 0a56 947E     		.sleb128 -236
 3487 0a58 1A       		.uleb128 0x1a
 3488 0a59 1F020000 		.4byte	.LASF141
 3489 0a5d 01       		.byte	0x1
 3490 0a5e C802     		.2byte	0x2c8
 3491 0a60 81000000 		.4byte	0x81
 3492 0a64 02       		.uleb128 0x2
 3493 0a65 91       		.byte	0x91
 3494 0a66 77       		.sleb128 -9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 78


 3495 0a67 1A       		.uleb128 0x1a
 3496 0a68 74000000 		.4byte	.LASF142
 3497 0a6c 01       		.byte	0x1
 3498 0a6d CF02     		.2byte	0x2cf
 3499 0a6f 870A0000 		.4byte	0xa87
 3500 0a73 02       		.uleb128 0x2
 3501 0a74 91       		.byte	0x91
 3502 0a75 68       		.sleb128 -24
 3503 0a76 1A       		.uleb128 0x1a
 3504 0a77 7D070000 		.4byte	.LASF118
 3505 0a7b 01       		.byte	0x1
 3506 0a7c D702     		.2byte	0x2d7
 3507 0a7e 9C080000 		.4byte	0x89c
 3508 0a82 03       		.uleb128 0x3
 3509 0a83 91       		.byte	0x91
 3510 0a84 A07E     		.sleb128 -224
 3511 0a86 00       		.byte	0
 3512 0a87 07       		.uleb128 0x7
 3513 0a88 D7000000 		.4byte	0xd7
 3514 0a8c 970A0000 		.4byte	0xa97
 3515 0a90 08       		.uleb128 0x8
 3516 0a91 E5000000 		.4byte	0xe5
 3517 0a95 0B       		.byte	0xb
 3518 0a96 00       		.byte	0
 3519 0a97 23       		.uleb128 0x23
 3520 0a98 80010000 		.4byte	.LASF143
 3521 0a9c 0D       		.byte	0xd
 3522 0a9d 1207     		.2byte	0x712
 3523 0a9f A30A0000 		.4byte	0xaa3
 3524 0aa3 0C       		.uleb128 0xc
 3525 0aa4 76000000 		.4byte	0x76
 3526 0aa8 24       		.uleb128 0x24
 3527 0aa9 30070000 		.4byte	.LASF144
 3528 0aad 07       		.byte	0x7
 3529 0aae 25       		.byte	0x25
 3530 0aaf 33050000 		.4byte	0x533
 3531 0ab3 05       		.uleb128 0x5
 3532 0ab4 03       		.byte	0x3
 3533 0ab5 00000000 		.4byte	level_sensor_inbox
 3534 0ab9 24       		.uleb128 0x24
 3535 0aba 64000000 		.4byte	.LASF145
 3536 0abe 0A       		.byte	0xa
 3537 0abf 11       		.byte	0x11
 3538 0ac0 85040000 		.4byte	0x485
 3539 0ac4 05       		.uleb128 0x5
 3540 0ac5 03       		.byte	0x3
 3541 0ac6 00000000 		.4byte	buffer_overflow
 3542 0aca 24       		.uleb128 0x24
 3543 0acb CF040000 		.4byte	.LASF146
 3544 0acf 0A       		.byte	0xa
 3545 0ad0 22       		.byte	0x22
 3546 0ad1 8D000000 		.4byte	0x8d
 3547 0ad5 05       		.uleb128 0x5
 3548 0ad6 03       		.byte	0x3
 3549 0ad7 00000000 		.4byte	dataPointsInStack
 3550 0adb 24       		.uleb128 0x24
 3551 0adc 04080000 		.4byte	.LASF147
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 79


 3552 0ae0 0A       		.byte	0xa
 3553 0ae1 23       		.byte	0x23
 3554 0ae2 8D000000 		.4byte	0x8d
 3555 0ae6 05       		.uleb128 0x5
 3556 0ae7 03       		.byte	0x3
 3557 0ae8 00000000 		.4byte	dataPointsInStackDesired
 3558 0aec 07       		.uleb128 0x7
 3559 0aed 71030000 		.4byte	0x371
 3560 0af1 FC0A0000 		.4byte	0xafc
 3561 0af5 08       		.uleb128 0x8
 3562 0af6 E5000000 		.4byte	0xe5
 3563 0afa 95       		.byte	0x95
 3564 0afb 00       		.byte	0
 3565 0afc 24       		.uleb128 0x24
 3566 0afd 10040000 		.4byte	.LASF148
 3567 0b01 0A       		.byte	0xa
 3568 0b02 24       		.byte	0x24
 3569 0b03 EC0A0000 		.4byte	0xaec
 3570 0b07 05       		.uleb128 0x5
 3571 0b08 03       		.byte	0x3
 3572 0b09 00000000 		.4byte	data
 3573 0b0d 24       		.uleb128 0x24
 3574 0b0e 67010000 		.4byte	.LASF149
 3575 0b12 0B       		.byte	0xb
 3576 0b13 20       		.byte	0x20
 3577 0b14 81000000 		.4byte	0x81
 3578 0b18 05       		.uleb128 0x5
 3579 0b19 03       		.byte	0x3
 3580 0b1a 00000000 		.4byte	modem_state
 3581 0b1e 24       		.uleb128 0x24
 3582 0b1f 8C040000 		.4byte	.LASF150
 3583 0b23 0B       		.byte	0xb
 3584 0b24 6A       		.byte	0x6a
 3585 0b25 BD000000 		.4byte	0xbd
 3586 0b29 05       		.uleb128 0x5
 3587 0b2a 03       		.byte	0x3
 3588 0b2b 00000000 		.4byte	modem_start_time_stamp
 3589 0b2f 24       		.uleb128 0x24
 3590 0b30 26040000 		.4byte	.LASF87
 3591 0b34 0B       		.byte	0xb
 3592 0b35 6B       		.byte	0x6b
 3593 0b36 A9030000 		.4byte	0x3a9
 3594 0b3a 05       		.uleb128 0x5
 3595 0b3b 03       		.byte	0x3
 3596 0b3c 00000000 		.4byte	modem_info
 3597 0b40 24       		.uleb128 0x24
 3598 0b41 66070000 		.4byte	.LASF151
 3599 0b45 0B       		.byte	0xb
 3600 0b46 6C       		.byte	0x6c
 3601 0b47 1D040000 		.4byte	0x41d
 3602 0b4b 05       		.uleb128 0x5
 3603 0b4c 03       		.byte	0x3
 3604 0b4d 00000000 		.4byte	modem_stats
 3605 0b51 24       		.uleb128 0x24
 3606 0b52 58050000 		.4byte	.LASF152
 3607 0b56 0B       		.byte	0xb
 3608 0b57 6D       		.byte	0x6d
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 80


 3609 0b58 8C040000 		.4byte	0x48c
 3610 0b5c 05       		.uleb128 0x5
 3611 0b5d 03       		.byte	0x3
 3612 0b5e 00000000 		.4byte	updatable_parameters
 3613 0b62 24       		.uleb128 0x24
 3614 0b63 CF080000 		.4byte	.LASF153
 3615 0b67 0E       		.byte	0xe
 3616 0b68 12       		.byte	0x12
 3617 0b69 33050000 		.4byte	0x533
 3618 0b6d 05       		.uleb128 0x5
 3619 0b6e 03       		.byte	0x3
 3620 0b6f 00000000 		.4byte	app_led_inbox
 3621 0b73 07       		.uleb128 0x7
 3622 0b74 D7000000 		.4byte	0xd7
 3623 0b78 840B0000 		.4byte	0xb84
 3624 0b7c 20       		.uleb128 0x20
 3625 0b7d E5000000 		.4byte	0xe5
 3626 0b81 0F27     		.2byte	0x270f
 3627 0b83 00       		.byte	0
 3628 0b84 24       		.uleb128 0x24
 3629 0b85 98050000 		.4byte	.LASF154
 3630 0b89 0C       		.byte	0xc
 3631 0b8a 18       		.byte	0x18
 3632 0b8b 730B0000 		.4byte	0xb73
 3633 0b8f 05       		.uleb128 0x5
 3634 0b90 03       		.byte	0x3
 3635 0b91 00000000 		.4byte	http_request
 3636 0b95 24       		.uleb128 0x24
 3637 0b96 40080000 		.4byte	.LASF155
 3638 0b9a 0C       		.byte	0xc
 3639 0b9b 19       		.byte	0x19
 3640 0b9c 730B0000 		.4byte	0xb73
 3641 0ba0 05       		.uleb128 0x5
 3642 0ba1 03       		.byte	0x3
 3643 0ba2 00000000 		.4byte	http_body
 3644 0ba6 24       		.uleb128 0x24
 3645 0ba7 72070000 		.4byte	.LASF156
 3646 0bab 0C       		.byte	0xc
 3647 0bac 1A       		.byte	0x1a
 3648 0bad 9C080000 		.4byte	0x89c
 3649 0bb1 05       		.uleb128 0x5
 3650 0bb2 03       		.byte	0x3
 3651 0bb3 00000000 		.4byte	http_route
 3652 0bb7 24       		.uleb128 0x24
 3653 0bb8 7D060000 		.4byte	.LASF157
 3654 0bbc 0C       		.byte	0xc
 3655 0bbd 41       		.byte	0x41
 3656 0bbe 07050000 		.4byte	0x507
 3657 0bc2 05       		.uleb128 0x5
 3658 0bc3 03       		.byte	0x3
 3659 0bc4 00000000 		.4byte	system_info
 3660 0bc8 24       		.uleb128 0x24
 3661 0bc9 1D060000 		.4byte	.LASF158
 3662 0bcd 0C       		.byte	0xc
 3663 0bce 53       		.byte	0x53
 3664 0bcf 43050000 		.4byte	0x543
 3665 0bd3 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 81


 3666 0bd4 03       		.byte	0x3
 3667 0bd5 00000000 		.4byte	system_settings
 3668 0bd9 24       		.uleb128 0x24
 3669 0bda 73010000 		.4byte	.LASF159
 3670 0bde 0C       		.byte	0xc
 3671 0bdf 6F       		.byte	0x6f
 3672 0be0 D0040000 		.4byte	0x4d0
 3673 0be4 05       		.uleb128 0x5
 3674 0be5 03       		.byte	0x3
 3675 0be6 00000000 		.4byte	alarmMeasure
 3676 0bea 24       		.uleb128 0x24
 3677 0beb C9010000 		.4byte	.LASF160
 3678 0bef 0C       		.byte	0xc
 3679 0bf0 70       		.byte	0x70
 3680 0bf1 81000000 		.4byte	0x81
 3681 0bf5 05       		.uleb128 0x5
 3682 0bf6 03       		.byte	0x3
 3683 0bf7 00000000 		.4byte	timeToMeasure
 3684 0bfb 24       		.uleb128 0x24
 3685 0bfc 41030000 		.4byte	.LASF161
 3686 0c00 0C       		.byte	0xc
 3687 0c01 71       		.byte	0x71
 3688 0c02 D0040000 		.4byte	0x4d0
 3689 0c06 05       		.uleb128 0x5
 3690 0c07 03       		.byte	0x3
 3691 0c08 00000000 		.4byte	alarmSync
 3692 0c0c 24       		.uleb128 0x24
 3693 0c0d EF010000 		.4byte	.LASF162
 3694 0c11 0C       		.byte	0xc
 3695 0c12 72       		.byte	0x72
 3696 0c13 81000000 		.4byte	0x81
 3697 0c17 05       		.uleb128 0x5
 3698 0c18 03       		.byte	0x3
 3699 0c19 00000000 		.4byte	timeToSync
 3700 0c1d 24       		.uleb128 0x24
 3701 0c1e 29050000 		.4byte	.LASF163
 3702 0c22 0C       		.byte	0xc
 3703 0c23 73       		.byte	0x73
 3704 0c24 81000000 		.4byte	0x81
 3705 0c28 05       		.uleb128 0x5
 3706 0c29 03       		.byte	0x3
 3707 0c2a 00000000 		.4byte	timeToSycnRemoteParams
 3708 0c2e 25       		.uleb128 0x25
 3709 0c2f 68657900 		.ascii	"hey\000"
 3710 0c33 0C       		.byte	0xc
 3711 0c34 74       		.byte	0x74
 3712 0c35 81000000 		.4byte	0x81
 3713 0c39 05       		.uleb128 0x5
 3714 0c3a 03       		.byte	0x3
 3715 0c3b 00000000 		.4byte	hey
 3716 0c3f 24       		.uleb128 0x24
 3717 0c40 80040000 		.4byte	.LASF164
 3718 0c44 0C       		.byte	0xc
 3719 0c45 77       		.byte	0x77
 3720 0c46 D0040000 		.4byte	0x4d0
 3721 0c4a 05       		.uleb128 0x5
 3722 0c4b 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 82


 3723 0c4c 00000000 		.4byte	alarmAppLED
 3724 0c50 24       		.uleb128 0x24
 3725 0c51 A8020000 		.4byte	.LASF165
 3726 0c55 0C       		.byte	0xc
 3727 0c56 78       		.byte	0x78
 3728 0c57 81000000 		.4byte	0x81
 3729 0c5b 05       		.uleb128 0x5
 3730 0c5c 03       		.byte	0x3
 3731 0c5d 00000000 		.4byte	timeToAppLED
 3732 0c61 24       		.uleb128 0x24
 3733 0c62 05070000 		.4byte	.LASF166
 3734 0c66 0C       		.byte	0xc
 3735 0c67 7A       		.byte	0x7a
 3736 0c68 D0040000 		.4byte	0x4d0
 3737 0c6c 05       		.uleb128 0x5
 3738 0c6d 03       		.byte	0x3
 3739 0c6e 00000000 		.4byte	alarmLevelSensor
 3740 0c72 24       		.uleb128 0x24
 3741 0c73 8D010000 		.4byte	.LASF167
 3742 0c77 0C       		.byte	0xc
 3743 0c78 7B       		.byte	0x7b
 3744 0c79 81000000 		.4byte	0x81
 3745 0c7d 05       		.uleb128 0x5
 3746 0c7e 03       		.byte	0x3
 3747 0c7f 00000000 		.4byte	timetoLevelSensor
 3748 0c83 07       		.uleb128 0x7
 3749 0c84 D7000000 		.4byte	0xd7
 3750 0c88 930C0000 		.4byte	0xc93
 3751 0c8c 08       		.uleb128 0x8
 3752 0c8d E5000000 		.4byte	0xe5
 3753 0c91 1D       		.byte	0x1d
 3754 0c92 00       		.byte	0
 3755 0c93 24       		.uleb128 0x24
 3756 0c94 D7050000 		.4byte	.LASF168
 3757 0c98 01       		.byte	0x1
 3758 0c99 1D       		.byte	0x1d
 3759 0c9a 830C0000 		.4byte	0xc83
 3760 0c9e 05       		.uleb128 0x5
 3761 0c9f 03       		.byte	0x3
 3762 0ca0 00000000 		.4byte	Data_fileName
 3763 0ca4 24       		.uleb128 0x24
 3764 0ca5 C5030000 		.4byte	.LASF94
 3765 0ca9 01       		.byte	0x1
 3766 0caa 1E       		.byte	0x1e
 3767 0cab 81000000 		.4byte	0x81
 3768 0caf 05       		.uleb128 0x5
 3769 0cb0 03       		.byte	0x3
 3770 0cb1 00000000 		.4byte	try_counter
 3771 0cb5 00       		.byte	0
 3772              		.section	.debug_abbrev,"",%progbits
 3773              	.Ldebug_abbrev0:
 3774 0000 01       		.uleb128 0x1
 3775 0001 11       		.uleb128 0x11
 3776 0002 01       		.byte	0x1
 3777 0003 25       		.uleb128 0x25
 3778 0004 0E       		.uleb128 0xe
 3779 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 83


 3780 0006 0B       		.uleb128 0xb
 3781 0007 03       		.uleb128 0x3
 3782 0008 0E       		.uleb128 0xe
 3783 0009 1B       		.uleb128 0x1b
 3784 000a 0E       		.uleb128 0xe
 3785 000b 55       		.uleb128 0x55
 3786 000c 17       		.uleb128 0x17
 3787 000d 11       		.uleb128 0x11
 3788 000e 01       		.uleb128 0x1
 3789 000f 10       		.uleb128 0x10
 3790 0010 17       		.uleb128 0x17
 3791 0011 00       		.byte	0
 3792 0012 00       		.byte	0
 3793 0013 02       		.uleb128 0x2
 3794 0014 24       		.uleb128 0x24
 3795 0015 00       		.byte	0
 3796 0016 0B       		.uleb128 0xb
 3797 0017 0B       		.uleb128 0xb
 3798 0018 3E       		.uleb128 0x3e
 3799 0019 0B       		.uleb128 0xb
 3800 001a 03       		.uleb128 0x3
 3801 001b 0E       		.uleb128 0xe
 3802 001c 00       		.byte	0
 3803 001d 00       		.byte	0
 3804 001e 03       		.uleb128 0x3
 3805 001f 16       		.uleb128 0x16
 3806 0020 00       		.byte	0
 3807 0021 03       		.uleb128 0x3
 3808 0022 0E       		.uleb128 0xe
 3809 0023 3A       		.uleb128 0x3a
 3810 0024 0B       		.uleb128 0xb
 3811 0025 3B       		.uleb128 0x3b
 3812 0026 0B       		.uleb128 0xb
 3813 0027 49       		.uleb128 0x49
 3814 0028 13       		.uleb128 0x13
 3815 0029 00       		.byte	0
 3816 002a 00       		.byte	0
 3817 002b 04       		.uleb128 0x4
 3818 002c 24       		.uleb128 0x24
 3819 002d 00       		.byte	0
 3820 002e 0B       		.uleb128 0xb
 3821 002f 0B       		.uleb128 0xb
 3822 0030 3E       		.uleb128 0x3e
 3823 0031 0B       		.uleb128 0xb
 3824 0032 03       		.uleb128 0x3
 3825 0033 08       		.uleb128 0x8
 3826 0034 00       		.byte	0
 3827 0035 00       		.byte	0
 3828 0036 05       		.uleb128 0x5
 3829 0037 16       		.uleb128 0x16
 3830 0038 00       		.byte	0
 3831 0039 03       		.uleb128 0x3
 3832 003a 0E       		.uleb128 0xe
 3833 003b 3A       		.uleb128 0x3a
 3834 003c 0B       		.uleb128 0xb
 3835 003d 3B       		.uleb128 0x3b
 3836 003e 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 84


 3837 003f 49       		.uleb128 0x49
 3838 0040 13       		.uleb128 0x13
 3839 0041 00       		.byte	0
 3840 0042 00       		.byte	0
 3841 0043 06       		.uleb128 0x6
 3842 0044 0F       		.uleb128 0xf
 3843 0045 00       		.byte	0
 3844 0046 0B       		.uleb128 0xb
 3845 0047 0B       		.uleb128 0xb
 3846 0048 49       		.uleb128 0x49
 3847 0049 13       		.uleb128 0x13
 3848 004a 00       		.byte	0
 3849 004b 00       		.byte	0
 3850 004c 07       		.uleb128 0x7
 3851 004d 01       		.uleb128 0x1
 3852 004e 01       		.byte	0x1
 3853 004f 49       		.uleb128 0x49
 3854 0050 13       		.uleb128 0x13
 3855 0051 01       		.uleb128 0x1
 3856 0052 13       		.uleb128 0x13
 3857 0053 00       		.byte	0
 3858 0054 00       		.byte	0
 3859 0055 08       		.uleb128 0x8
 3860 0056 21       		.uleb128 0x21
 3861 0057 00       		.byte	0
 3862 0058 49       		.uleb128 0x49
 3863 0059 13       		.uleb128 0x13
 3864 005a 2F       		.uleb128 0x2f
 3865 005b 0B       		.uleb128 0xb
 3866 005c 00       		.byte	0
 3867 005d 00       		.byte	0
 3868 005e 09       		.uleb128 0x9
 3869 005f 13       		.uleb128 0x13
 3870 0060 01       		.byte	0x1
 3871 0061 0B       		.uleb128 0xb
 3872 0062 0B       		.uleb128 0xb
 3873 0063 3A       		.uleb128 0x3a
 3874 0064 0B       		.uleb128 0xb
 3875 0065 3B       		.uleb128 0x3b
 3876 0066 0B       		.uleb128 0xb
 3877 0067 01       		.uleb128 0x1
 3878 0068 13       		.uleb128 0x13
 3879 0069 00       		.byte	0
 3880 006a 00       		.byte	0
 3881 006b 0A       		.uleb128 0xa
 3882 006c 0D       		.uleb128 0xd
 3883 006d 00       		.byte	0
 3884 006e 03       		.uleb128 0x3
 3885 006f 08       		.uleb128 0x8
 3886 0070 3A       		.uleb128 0x3a
 3887 0071 0B       		.uleb128 0xb
 3888 0072 3B       		.uleb128 0x3b
 3889 0073 0B       		.uleb128 0xb
 3890 0074 49       		.uleb128 0x49
 3891 0075 13       		.uleb128 0x13
 3892 0076 38       		.uleb128 0x38
 3893 0077 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 85


 3894 0078 00       		.byte	0
 3895 0079 00       		.byte	0
 3896 007a 0B       		.uleb128 0xb
 3897 007b 0D       		.uleb128 0xd
 3898 007c 00       		.byte	0
 3899 007d 03       		.uleb128 0x3
 3900 007e 0E       		.uleb128 0xe
 3901 007f 3A       		.uleb128 0x3a
 3902 0080 0B       		.uleb128 0xb
 3903 0081 3B       		.uleb128 0x3b
 3904 0082 0B       		.uleb128 0xb
 3905 0083 49       		.uleb128 0x49
 3906 0084 13       		.uleb128 0x13
 3907 0085 38       		.uleb128 0x38
 3908 0086 0B       		.uleb128 0xb
 3909 0087 00       		.byte	0
 3910 0088 00       		.byte	0
 3911 0089 0C       		.uleb128 0xc
 3912 008a 35       		.uleb128 0x35
 3913 008b 00       		.byte	0
 3914 008c 49       		.uleb128 0x49
 3915 008d 13       		.uleb128 0x13
 3916 008e 00       		.byte	0
 3917 008f 00       		.byte	0
 3918 0090 0D       		.uleb128 0xd
 3919 0091 13       		.uleb128 0x13
 3920 0092 01       		.byte	0x1
 3921 0093 0B       		.uleb128 0xb
 3922 0094 05       		.uleb128 0x5
 3923 0095 3A       		.uleb128 0x3a
 3924 0096 0B       		.uleb128 0xb
 3925 0097 3B       		.uleb128 0x3b
 3926 0098 0B       		.uleb128 0xb
 3927 0099 01       		.uleb128 0x1
 3928 009a 13       		.uleb128 0x13
 3929 009b 00       		.byte	0
 3930 009c 00       		.byte	0
 3931 009d 0E       		.uleb128 0xe
 3932 009e 13       		.uleb128 0x13
 3933 009f 01       		.byte	0x1
 3934 00a0 03       		.uleb128 0x3
 3935 00a1 08       		.uleb128 0x8
 3936 00a2 0B       		.uleb128 0xb
 3937 00a3 0B       		.uleb128 0xb
 3938 00a4 3A       		.uleb128 0x3a
 3939 00a5 0B       		.uleb128 0xb
 3940 00a6 3B       		.uleb128 0x3b
 3941 00a7 0B       		.uleb128 0xb
 3942 00a8 01       		.uleb128 0x1
 3943 00a9 13       		.uleb128 0x13
 3944 00aa 00       		.byte	0
 3945 00ab 00       		.byte	0
 3946 00ac 0F       		.uleb128 0xf
 3947 00ad 2E       		.uleb128 0x2e
 3948 00ae 00       		.byte	0
 3949 00af 3F       		.uleb128 0x3f
 3950 00b0 19       		.uleb128 0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 86


 3951 00b1 03       		.uleb128 0x3
 3952 00b2 0E       		.uleb128 0xe
 3953 00b3 3A       		.uleb128 0x3a
 3954 00b4 0B       		.uleb128 0xb
 3955 00b5 3B       		.uleb128 0x3b
 3956 00b6 0B       		.uleb128 0xb
 3957 00b7 27       		.uleb128 0x27
 3958 00b8 19       		.uleb128 0x19
 3959 00b9 11       		.uleb128 0x11
 3960 00ba 01       		.uleb128 0x1
 3961 00bb 12       		.uleb128 0x12
 3962 00bc 06       		.uleb128 0x6
 3963 00bd 40       		.uleb128 0x40
 3964 00be 18       		.uleb128 0x18
 3965 00bf 9642     		.uleb128 0x2116
 3966 00c1 19       		.uleb128 0x19
 3967 00c2 00       		.byte	0
 3968 00c3 00       		.byte	0
 3969 00c4 10       		.uleb128 0x10
 3970 00c5 2E       		.uleb128 0x2e
 3971 00c6 01       		.byte	0x1
 3972 00c7 3F       		.uleb128 0x3f
 3973 00c8 19       		.uleb128 0x19
 3974 00c9 03       		.uleb128 0x3
 3975 00ca 0E       		.uleb128 0xe
 3976 00cb 3A       		.uleb128 0x3a
 3977 00cc 0B       		.uleb128 0xb
 3978 00cd 3B       		.uleb128 0x3b
 3979 00ce 0B       		.uleb128 0xb
 3980 00cf 11       		.uleb128 0x11
 3981 00d0 01       		.uleb128 0x1
 3982 00d1 12       		.uleb128 0x12
 3983 00d2 06       		.uleb128 0x6
 3984 00d3 40       		.uleb128 0x40
 3985 00d4 18       		.uleb128 0x18
 3986 00d5 9642     		.uleb128 0x2116
 3987 00d7 19       		.uleb128 0x19
 3988 00d8 01       		.uleb128 0x1
 3989 00d9 13       		.uleb128 0x13
 3990 00da 00       		.byte	0
 3991 00db 00       		.byte	0
 3992 00dc 11       		.uleb128 0x11
 3993 00dd 34       		.uleb128 0x34
 3994 00de 00       		.byte	0
 3995 00df 03       		.uleb128 0x3
 3996 00e0 0E       		.uleb128 0xe
 3997 00e1 3A       		.uleb128 0x3a
 3998 00e2 0B       		.uleb128 0xb
 3999 00e3 3B       		.uleb128 0x3b
 4000 00e4 0B       		.uleb128 0xb
 4001 00e5 49       		.uleb128 0x49
 4002 00e6 13       		.uleb128 0x13
 4003 00e7 02       		.uleb128 0x2
 4004 00e8 18       		.uleb128 0x18
 4005 00e9 00       		.byte	0
 4006 00ea 00       		.byte	0
 4007 00eb 12       		.uleb128 0x12
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 87


 4008 00ec 2E       		.uleb128 0x2e
 4009 00ed 01       		.byte	0x1
 4010 00ee 3F       		.uleb128 0x3f
 4011 00ef 19       		.uleb128 0x19
 4012 00f0 03       		.uleb128 0x3
 4013 00f1 0E       		.uleb128 0xe
 4014 00f2 3A       		.uleb128 0x3a
 4015 00f3 0B       		.uleb128 0xb
 4016 00f4 3B       		.uleb128 0x3b
 4017 00f5 0B       		.uleb128 0xb
 4018 00f6 49       		.uleb128 0x49
 4019 00f7 13       		.uleb128 0x13
 4020 00f8 11       		.uleb128 0x11
 4021 00f9 01       		.uleb128 0x1
 4022 00fa 12       		.uleb128 0x12
 4023 00fb 06       		.uleb128 0x6
 4024 00fc 40       		.uleb128 0x40
 4025 00fd 18       		.uleb128 0x18
 4026 00fe 9642     		.uleb128 0x2116
 4027 0100 19       		.uleb128 0x19
 4028 0101 01       		.uleb128 0x1
 4029 0102 13       		.uleb128 0x13
 4030 0103 00       		.byte	0
 4031 0104 00       		.byte	0
 4032 0105 13       		.uleb128 0x13
 4033 0106 2E       		.uleb128 0x2e
 4034 0107 00       		.byte	0
 4035 0108 3F       		.uleb128 0x3f
 4036 0109 19       		.uleb128 0x19
 4037 010a 03       		.uleb128 0x3
 4038 010b 0E       		.uleb128 0xe
 4039 010c 3A       		.uleb128 0x3a
 4040 010d 0B       		.uleb128 0xb
 4041 010e 3B       		.uleb128 0x3b
 4042 010f 0B       		.uleb128 0xb
 4043 0110 11       		.uleb128 0x11
 4044 0111 01       		.uleb128 0x1
 4045 0112 12       		.uleb128 0x12
 4046 0113 06       		.uleb128 0x6
 4047 0114 40       		.uleb128 0x40
 4048 0115 18       		.uleb128 0x18
 4049 0116 9642     		.uleb128 0x2116
 4050 0118 19       		.uleb128 0x19
 4051 0119 00       		.byte	0
 4052 011a 00       		.byte	0
 4053 011b 14       		.uleb128 0x14
 4054 011c 2E       		.uleb128 0x2e
 4055 011d 01       		.byte	0x1
 4056 011e 3F       		.uleb128 0x3f
 4057 011f 19       		.uleb128 0x19
 4058 0120 03       		.uleb128 0x3
 4059 0121 0E       		.uleb128 0xe
 4060 0122 3A       		.uleb128 0x3a
 4061 0123 0B       		.uleb128 0xb
 4062 0124 3B       		.uleb128 0x3b
 4063 0125 0B       		.uleb128 0xb
 4064 0126 27       		.uleb128 0x27
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 88


 4065 0127 19       		.uleb128 0x19
 4066 0128 11       		.uleb128 0x11
 4067 0129 01       		.uleb128 0x1
 4068 012a 12       		.uleb128 0x12
 4069 012b 06       		.uleb128 0x6
 4070 012c 40       		.uleb128 0x40
 4071 012d 18       		.uleb128 0x18
 4072 012e 9642     		.uleb128 0x2116
 4073 0130 19       		.uleb128 0x19
 4074 0131 01       		.uleb128 0x1
 4075 0132 13       		.uleb128 0x13
 4076 0133 00       		.byte	0
 4077 0134 00       		.byte	0
 4078 0135 15       		.uleb128 0x15
 4079 0136 05       		.uleb128 0x5
 4080 0137 00       		.byte	0
 4081 0138 03       		.uleb128 0x3
 4082 0139 0E       		.uleb128 0xe
 4083 013a 3A       		.uleb128 0x3a
 4084 013b 0B       		.uleb128 0xb
 4085 013c 3B       		.uleb128 0x3b
 4086 013d 0B       		.uleb128 0xb
 4087 013e 49       		.uleb128 0x49
 4088 013f 13       		.uleb128 0x13
 4089 0140 02       		.uleb128 0x2
 4090 0141 18       		.uleb128 0x18
 4091 0142 00       		.byte	0
 4092 0143 00       		.byte	0
 4093 0144 16       		.uleb128 0x16
 4094 0145 2E       		.uleb128 0x2e
 4095 0146 01       		.byte	0x1
 4096 0147 3F       		.uleb128 0x3f
 4097 0148 19       		.uleb128 0x19
 4098 0149 03       		.uleb128 0x3
 4099 014a 0E       		.uleb128 0xe
 4100 014b 3A       		.uleb128 0x3a
 4101 014c 0B       		.uleb128 0xb
 4102 014d 3B       		.uleb128 0x3b
 4103 014e 0B       		.uleb128 0xb
 4104 014f 27       		.uleb128 0x27
 4105 0150 19       		.uleb128 0x19
 4106 0151 49       		.uleb128 0x49
 4107 0152 13       		.uleb128 0x13
 4108 0153 11       		.uleb128 0x11
 4109 0154 01       		.uleb128 0x1
 4110 0155 12       		.uleb128 0x12
 4111 0156 06       		.uleb128 0x6
 4112 0157 40       		.uleb128 0x40
 4113 0158 18       		.uleb128 0x18
 4114 0159 9642     		.uleb128 0x2116
 4115 015b 19       		.uleb128 0x19
 4116 015c 01       		.uleb128 0x1
 4117 015d 13       		.uleb128 0x13
 4118 015e 00       		.byte	0
 4119 015f 00       		.byte	0
 4120 0160 17       		.uleb128 0x17
 4121 0161 2E       		.uleb128 0x2e
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 89


 4122 0162 01       		.byte	0x1
 4123 0163 3F       		.uleb128 0x3f
 4124 0164 19       		.uleb128 0x19
 4125 0165 03       		.uleb128 0x3
 4126 0166 0E       		.uleb128 0xe
 4127 0167 3A       		.uleb128 0x3a
 4128 0168 0B       		.uleb128 0xb
 4129 0169 3B       		.uleb128 0x3b
 4130 016a 0B       		.uleb128 0xb
 4131 016b 27       		.uleb128 0x27
 4132 016c 19       		.uleb128 0x19
 4133 016d 11       		.uleb128 0x11
 4134 016e 01       		.uleb128 0x1
 4135 016f 12       		.uleb128 0x12
 4136 0170 06       		.uleb128 0x6
 4137 0171 40       		.uleb128 0x40
 4138 0172 18       		.uleb128 0x18
 4139 0173 9742     		.uleb128 0x2117
 4140 0175 19       		.uleb128 0x19
 4141 0176 01       		.uleb128 0x1
 4142 0177 13       		.uleb128 0x13
 4143 0178 00       		.byte	0
 4144 0179 00       		.byte	0
 4145 017a 18       		.uleb128 0x18
 4146 017b 2E       		.uleb128 0x2e
 4147 017c 01       		.byte	0x1
 4148 017d 3F       		.uleb128 0x3f
 4149 017e 19       		.uleb128 0x19
 4150 017f 03       		.uleb128 0x3
 4151 0180 0E       		.uleb128 0xe
 4152 0181 3A       		.uleb128 0x3a
 4153 0182 0B       		.uleb128 0xb
 4154 0183 3B       		.uleb128 0x3b
 4155 0184 05       		.uleb128 0x5
 4156 0185 27       		.uleb128 0x27
 4157 0186 19       		.uleb128 0x19
 4158 0187 49       		.uleb128 0x49
 4159 0188 13       		.uleb128 0x13
 4160 0189 11       		.uleb128 0x11
 4161 018a 01       		.uleb128 0x1
 4162 018b 12       		.uleb128 0x12
 4163 018c 06       		.uleb128 0x6
 4164 018d 40       		.uleb128 0x40
 4165 018e 18       		.uleb128 0x18
 4166 018f 9742     		.uleb128 0x2117
 4167 0191 19       		.uleb128 0x19
 4168 0192 01       		.uleb128 0x1
 4169 0193 13       		.uleb128 0x13
 4170 0194 00       		.byte	0
 4171 0195 00       		.byte	0
 4172 0196 19       		.uleb128 0x19
 4173 0197 05       		.uleb128 0x5
 4174 0198 00       		.byte	0
 4175 0199 03       		.uleb128 0x3
 4176 019a 0E       		.uleb128 0xe
 4177 019b 3A       		.uleb128 0x3a
 4178 019c 0B       		.uleb128 0xb
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 90


 4179 019d 3B       		.uleb128 0x3b
 4180 019e 05       		.uleb128 0x5
 4181 019f 49       		.uleb128 0x49
 4182 01a0 13       		.uleb128 0x13
 4183 01a1 02       		.uleb128 0x2
 4184 01a2 18       		.uleb128 0x18
 4185 01a3 00       		.byte	0
 4186 01a4 00       		.byte	0
 4187 01a5 1A       		.uleb128 0x1a
 4188 01a6 34       		.uleb128 0x34
 4189 01a7 00       		.byte	0
 4190 01a8 03       		.uleb128 0x3
 4191 01a9 0E       		.uleb128 0xe
 4192 01aa 3A       		.uleb128 0x3a
 4193 01ab 0B       		.uleb128 0xb
 4194 01ac 3B       		.uleb128 0x3b
 4195 01ad 05       		.uleb128 0x5
 4196 01ae 49       		.uleb128 0x49
 4197 01af 13       		.uleb128 0x13
 4198 01b0 02       		.uleb128 0x2
 4199 01b1 18       		.uleb128 0x18
 4200 01b2 00       		.byte	0
 4201 01b3 00       		.byte	0
 4202 01b4 1B       		.uleb128 0x1b
 4203 01b5 2E       		.uleb128 0x2e
 4204 01b6 01       		.byte	0x1
 4205 01b7 3F       		.uleb128 0x3f
 4206 01b8 19       		.uleb128 0x19
 4207 01b9 03       		.uleb128 0x3
 4208 01ba 0E       		.uleb128 0xe
 4209 01bb 3A       		.uleb128 0x3a
 4210 01bc 0B       		.uleb128 0xb
 4211 01bd 3B       		.uleb128 0x3b
 4212 01be 05       		.uleb128 0x5
 4213 01bf 11       		.uleb128 0x11
 4214 01c0 01       		.uleb128 0x1
 4215 01c1 12       		.uleb128 0x12
 4216 01c2 06       		.uleb128 0x6
 4217 01c3 40       		.uleb128 0x40
 4218 01c4 18       		.uleb128 0x18
 4219 01c5 9642     		.uleb128 0x2116
 4220 01c7 19       		.uleb128 0x19
 4221 01c8 01       		.uleb128 0x1
 4222 01c9 13       		.uleb128 0x13
 4223 01ca 00       		.byte	0
 4224 01cb 00       		.byte	0
 4225 01cc 1C       		.uleb128 0x1c
 4226 01cd 2E       		.uleb128 0x2e
 4227 01ce 00       		.byte	0
 4228 01cf 3F       		.uleb128 0x3f
 4229 01d0 19       		.uleb128 0x19
 4230 01d1 03       		.uleb128 0x3
 4231 01d2 0E       		.uleb128 0xe
 4232 01d3 3A       		.uleb128 0x3a
 4233 01d4 0B       		.uleb128 0xb
 4234 01d5 3B       		.uleb128 0x3b
 4235 01d6 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 91


 4236 01d7 27       		.uleb128 0x27
 4237 01d8 19       		.uleb128 0x19
 4238 01d9 49       		.uleb128 0x49
 4239 01da 13       		.uleb128 0x13
 4240 01db 11       		.uleb128 0x11
 4241 01dc 01       		.uleb128 0x1
 4242 01dd 12       		.uleb128 0x12
 4243 01de 06       		.uleb128 0x6
 4244 01df 40       		.uleb128 0x40
 4245 01e0 18       		.uleb128 0x18
 4246 01e1 9642     		.uleb128 0x2116
 4247 01e3 19       		.uleb128 0x19
 4248 01e4 00       		.byte	0
 4249 01e5 00       		.byte	0
 4250 01e6 1D       		.uleb128 0x1d
 4251 01e7 2E       		.uleb128 0x2e
 4252 01e8 01       		.byte	0x1
 4253 01e9 3F       		.uleb128 0x3f
 4254 01ea 19       		.uleb128 0x19
 4255 01eb 03       		.uleb128 0x3
 4256 01ec 0E       		.uleb128 0xe
 4257 01ed 3A       		.uleb128 0x3a
 4258 01ee 0B       		.uleb128 0xb
 4259 01ef 3B       		.uleb128 0x3b
 4260 01f0 05       		.uleb128 0x5
 4261 01f1 49       		.uleb128 0x49
 4262 01f2 13       		.uleb128 0x13
 4263 01f3 11       		.uleb128 0x11
 4264 01f4 01       		.uleb128 0x1
 4265 01f5 12       		.uleb128 0x12
 4266 01f6 06       		.uleb128 0x6
 4267 01f7 40       		.uleb128 0x40
 4268 01f8 18       		.uleb128 0x18
 4269 01f9 9642     		.uleb128 0x2116
 4270 01fb 19       		.uleb128 0x19
 4271 01fc 01       		.uleb128 0x1
 4272 01fd 13       		.uleb128 0x13
 4273 01fe 00       		.byte	0
 4274 01ff 00       		.byte	0
 4275 0200 1E       		.uleb128 0x1e
 4276 0201 0B       		.uleb128 0xb
 4277 0202 01       		.byte	0x1
 4278 0203 11       		.uleb128 0x11
 4279 0204 01       		.uleb128 0x1
 4280 0205 12       		.uleb128 0x12
 4281 0206 06       		.uleb128 0x6
 4282 0207 00       		.byte	0
 4283 0208 00       		.byte	0
 4284 0209 1F       		.uleb128 0x1f
 4285 020a 0B       		.uleb128 0xb
 4286 020b 01       		.byte	0x1
 4287 020c 11       		.uleb128 0x11
 4288 020d 01       		.uleb128 0x1
 4289 020e 12       		.uleb128 0x12
 4290 020f 06       		.uleb128 0x6
 4291 0210 01       		.uleb128 0x1
 4292 0211 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 92


 4293 0212 00       		.byte	0
 4294 0213 00       		.byte	0
 4295 0214 20       		.uleb128 0x20
 4296 0215 21       		.uleb128 0x21
 4297 0216 00       		.byte	0
 4298 0217 49       		.uleb128 0x49
 4299 0218 13       		.uleb128 0x13
 4300 0219 2F       		.uleb128 0x2f
 4301 021a 05       		.uleb128 0x5
 4302 021b 00       		.byte	0
 4303 021c 00       		.byte	0
 4304 021d 21       		.uleb128 0x21
 4305 021e 2E       		.uleb128 0x2e
 4306 021f 01       		.byte	0x1
 4307 0220 3F       		.uleb128 0x3f
 4308 0221 19       		.uleb128 0x19
 4309 0222 03       		.uleb128 0x3
 4310 0223 0E       		.uleb128 0xe
 4311 0224 3A       		.uleb128 0x3a
 4312 0225 0B       		.uleb128 0xb
 4313 0226 3B       		.uleb128 0x3b
 4314 0227 05       		.uleb128 0x5
 4315 0228 27       		.uleb128 0x27
 4316 0229 19       		.uleb128 0x19
 4317 022a 49       		.uleb128 0x49
 4318 022b 13       		.uleb128 0x13
 4319 022c 11       		.uleb128 0x11
 4320 022d 01       		.uleb128 0x1
 4321 022e 12       		.uleb128 0x12
 4322 022f 06       		.uleb128 0x6
 4323 0230 40       		.uleb128 0x40
 4324 0231 18       		.uleb128 0x18
 4325 0232 9642     		.uleb128 0x2116
 4326 0234 19       		.uleb128 0x19
 4327 0235 01       		.uleb128 0x1
 4328 0236 13       		.uleb128 0x13
 4329 0237 00       		.byte	0
 4330 0238 00       		.byte	0
 4331 0239 22       		.uleb128 0x22
 4332 023a 34       		.uleb128 0x34
 4333 023b 00       		.byte	0
 4334 023c 03       		.uleb128 0x3
 4335 023d 08       		.uleb128 0x8
 4336 023e 3A       		.uleb128 0x3a
 4337 023f 0B       		.uleb128 0xb
 4338 0240 3B       		.uleb128 0x3b
 4339 0241 05       		.uleb128 0x5
 4340 0242 49       		.uleb128 0x49
 4341 0243 13       		.uleb128 0x13
 4342 0244 02       		.uleb128 0x2
 4343 0245 18       		.uleb128 0x18
 4344 0246 00       		.byte	0
 4345 0247 00       		.byte	0
 4346 0248 23       		.uleb128 0x23
 4347 0249 34       		.uleb128 0x34
 4348 024a 00       		.byte	0
 4349 024b 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 93


 4350 024c 0E       		.uleb128 0xe
 4351 024d 3A       		.uleb128 0x3a
 4352 024e 0B       		.uleb128 0xb
 4353 024f 3B       		.uleb128 0x3b
 4354 0250 05       		.uleb128 0x5
 4355 0251 49       		.uleb128 0x49
 4356 0252 13       		.uleb128 0x13
 4357 0253 3F       		.uleb128 0x3f
 4358 0254 19       		.uleb128 0x19
 4359 0255 3C       		.uleb128 0x3c
 4360 0256 19       		.uleb128 0x19
 4361 0257 00       		.byte	0
 4362 0258 00       		.byte	0
 4363 0259 24       		.uleb128 0x24
 4364 025a 34       		.uleb128 0x34
 4365 025b 00       		.byte	0
 4366 025c 03       		.uleb128 0x3
 4367 025d 0E       		.uleb128 0xe
 4368 025e 3A       		.uleb128 0x3a
 4369 025f 0B       		.uleb128 0xb
 4370 0260 3B       		.uleb128 0x3b
 4371 0261 0B       		.uleb128 0xb
 4372 0262 49       		.uleb128 0x49
 4373 0263 13       		.uleb128 0x13
 4374 0264 3F       		.uleb128 0x3f
 4375 0265 19       		.uleb128 0x19
 4376 0266 02       		.uleb128 0x2
 4377 0267 18       		.uleb128 0x18
 4378 0268 00       		.byte	0
 4379 0269 00       		.byte	0
 4380 026a 25       		.uleb128 0x25
 4381 026b 34       		.uleb128 0x34
 4382 026c 00       		.byte	0
 4383 026d 03       		.uleb128 0x3
 4384 026e 08       		.uleb128 0x8
 4385 026f 3A       		.uleb128 0x3a
 4386 0270 0B       		.uleb128 0xb
 4387 0271 3B       		.uleb128 0x3b
 4388 0272 0B       		.uleb128 0xb
 4389 0273 49       		.uleb128 0x49
 4390 0274 13       		.uleb128 0x13
 4391 0275 3F       		.uleb128 0x3f
 4392 0276 19       		.uleb128 0x19
 4393 0277 02       		.uleb128 0x2
 4394 0278 18       		.uleb128 0x18
 4395 0279 00       		.byte	0
 4396 027a 00       		.byte	0
 4397 027b 00       		.byte	0
 4398              		.section	.debug_aranges,"",%progbits
 4399 0000 8C000000 		.4byte	0x8c
 4400 0004 0200     		.2byte	0x2
 4401 0006 00000000 		.4byte	.Ldebug_info0
 4402 000a 04       		.byte	0x4
 4403 000b 00       		.byte	0
 4404 000c 0000     		.2byte	0
 4405 000e 0000     		.2byte	0
 4406 0010 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 94


 4407 0014 0C000000 		.4byte	.LFE64-.LFB64
 4408 0018 00000000 		.4byte	.LFB65
 4409 001c 4C010000 		.4byte	.LFE65-.LFB65
 4410 0020 00000000 		.4byte	.LFB66
 4411 0024 A0000000 		.4byte	.LFE66-.LFB66
 4412 0028 00000000 		.4byte	.LFB67
 4413 002c 2A000000 		.4byte	.LFE67-.LFB67
 4414 0030 00000000 		.4byte	.LFB68
 4415 0034 8C000000 		.4byte	.LFE68-.LFB68
 4416 0038 00000000 		.4byte	.LFB69
 4417 003c 48000000 		.4byte	.LFE69-.LFB69
 4418 0040 00000000 		.4byte	.LFB70
 4419 0044 1E000000 		.4byte	.LFE70-.LFB70
 4420 0048 00000000 		.4byte	.LFB71
 4421 004c 46000000 		.4byte	.LFE71-.LFB71
 4422 0050 00000000 		.4byte	.LFB72
 4423 0054 04010000 		.4byte	.LFE72-.LFB72
 4424 0058 00000000 		.4byte	.LFB73
 4425 005c 1E000000 		.4byte	.LFE73-.LFB73
 4426 0060 00000000 		.4byte	.LFB74
 4427 0064 5C040000 		.4byte	.LFE74-.LFB74
 4428 0068 00000000 		.4byte	.LFB75
 4429 006c 44000000 		.4byte	.LFE75-.LFB75
 4430 0070 00000000 		.4byte	.LFB76
 4431 0074 9C020000 		.4byte	.LFE76-.LFB76
 4432 0078 00000000 		.4byte	.LFB77
 4433 007c 74000000 		.4byte	.LFE77-.LFB77
 4434 0080 00000000 		.4byte	.LFB78
 4435 0084 38010000 		.4byte	.LFE78-.LFB78
 4436 0088 00000000 		.4byte	0
 4437 008c 00000000 		.4byte	0
 4438              		.section	.debug_ranges,"",%progbits
 4439              	.Ldebug_ranges0:
 4440 0000 00000000 		.4byte	.LFB64
 4441 0004 0C000000 		.4byte	.LFE64
 4442 0008 00000000 		.4byte	.LFB65
 4443 000c 4C010000 		.4byte	.LFE65
 4444 0010 00000000 		.4byte	.LFB66
 4445 0014 A0000000 		.4byte	.LFE66
 4446 0018 00000000 		.4byte	.LFB67
 4447 001c 2A000000 		.4byte	.LFE67
 4448 0020 00000000 		.4byte	.LFB68
 4449 0024 8C000000 		.4byte	.LFE68
 4450 0028 00000000 		.4byte	.LFB69
 4451 002c 48000000 		.4byte	.LFE69
 4452 0030 00000000 		.4byte	.LFB70
 4453 0034 1E000000 		.4byte	.LFE70
 4454 0038 00000000 		.4byte	.LFB71
 4455 003c 46000000 		.4byte	.LFE71
 4456 0040 00000000 		.4byte	.LFB72
 4457 0044 04010000 		.4byte	.LFE72
 4458 0048 00000000 		.4byte	.LFB73
 4459 004c 1E000000 		.4byte	.LFE73
 4460 0050 00000000 		.4byte	.LFB74
 4461 0054 5C040000 		.4byte	.LFE74
 4462 0058 00000000 		.4byte	.LFB75
 4463 005c 44000000 		.4byte	.LFE75
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 95


 4464 0060 00000000 		.4byte	.LFB76
 4465 0064 9C020000 		.4byte	.LFE76
 4466 0068 00000000 		.4byte	.LFB77
 4467 006c 74000000 		.4byte	.LFE77
 4468 0070 00000000 		.4byte	.LFB78
 4469 0074 38010000 		.4byte	.LFE78
 4470 0078 00000000 		.4byte	0
 4471 007c 00000000 		.4byte	0
 4472              		.section	.debug_line,"",%progbits
 4473              	.Ldebug_line0:
 4474 0000 3D040000 		.section	.debug_str,"MS",%progbits,1
 4474      02002802 
 4474      00000201 
 4474      FB0E0D00 
 4474      01010101 
 4475              	.LASF111:
 4476 0000 745F6D6F 		.ascii	"t_modem\000"
 4476      64656D00 
 4477              	.LASF12:
 4478 0008 75696E74 		.ascii	"uint16\000"
 4478      313600
 4479              	.LASF51:
 4480 000f 746D5F68 		.ascii	"tm_hour\000"
 4480      6F757200 
 4481              	.LASF36:
 4482 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4482      696E7661 
 4482      6C69645F 
 4482      72656164 
 4482      696E6773 
 4483              	.LASF171:
 4484 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4484      73657273 
 4484      5C64616E 
 4484      747A5C44 
 4484      6F63756D 
 4485 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4485      2E637964 
 4485      736E00
 4486              	.LASF145:
 4487 0064 62756666 		.ascii	"buffer_overflow\000"
 4487      65725F6F 
 4487      76657266 
 4487      6C6F7700 
 4488              	.LASF142:
 4489 0074 66696C65 		.ascii	"fileName\000"
 4489      4E616D65 
 4489      00
 4490              	.LASF0:
 4491 007d 7369676E 		.ascii	"signed char\000"
 4491      65642063 
 4491      68617200 
 4492              	.LASF85:
 4493 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4493      74446F77 
 4493      6E526573 
 4493      6574436F 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 96


 4493      6E646974 
 4494              	.LASF172:
 4495 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4495      75705F49 
 4495      535200
 4496              	.LASF169:
 4497 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4497      43313120 
 4497      352E342E 
 4497      31203230 
 4497      31363036 
 4498 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4498      20726576 
 4498      6973696F 
 4498      6E203233 
 4498      37373135 
 4499 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4499      66756E63 
 4499      74696F6E 
 4499      2D736563 
 4499      74696F6E 
 4500              	.LASF109:
 4501 013a 745F7072 		.ascii	"t_pressure\000"
 4501      65737375 
 4501      726500
 4502              	.LASF26:
 4503 0145 4D6F6E74 		.ascii	"Month\000"
 4503      6800
 4504              	.LASF7:
 4505 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4505      206C6F6E 
 4505      6720756E 
 4505      7369676E 
 4505      65642069 
 4506              	.LASF22:
 4507 0162 486F7572 		.ascii	"Hour\000"
 4507      00
 4508              	.LASF149:
 4509 0167 6D6F6465 		.ascii	"modem_state\000"
 4509      6D5F7374 
 4509      61746500 
 4510              	.LASF159:
 4511 0173 616C6172 		.ascii	"alarmMeasure\000"
 4511      6D4D6561 
 4511      73757265 
 4511      00
 4512              	.LASF143:
 4513 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4513      52784275 
 4513      66666572 
 4513      00
 4514              	.LASF167:
 4515 018d 74696D65 		.ascii	"timetoLevelSensor\000"
 4515      746F4C65 
 4515      76656C53 
 4515      656E736F 
 4515      7200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 97


 4516              	.LASF107:
 4517 019f 745F6C65 		.ascii	"t_level_sensor\000"
 4517      76656C5F 
 4517      73656E73 
 4517      6F7200
 4518              	.LASF6:
 4519 01ae 6C6F6E67 		.ascii	"long long int\000"
 4519      206C6F6E 
 4519      6720696E 
 4519      7400
 4520              	.LASF120:
 4521 01bc 7061636B 		.ascii	"packets\000"
 4521      65747300 
 4522              	.LASF67:
 4523 01c4 65636E6F 		.ascii	"ecno\000"
 4523      00
 4524              	.LASF160:
 4525 01c9 74696D65 		.ascii	"timeToMeasure\000"
 4525      546F4D65 
 4525      61737572 
 4525      6500
 4526              	.LASF70:
 4527 01d7 74696D65 		.ascii	"time_to_network_connect\000"
 4527      5F746F5F 
 4527      6E657477 
 4527      6F726B5F 
 4527      636F6E6E 
 4528              	.LASF162:
 4529 01ef 74696D65 		.ascii	"timeToSync\000"
 4529      546F5379 
 4529      6E6300
 4530              	.LASF39:
 4531 01fa 766F6C74 		.ascii	"voltage_solar\000"
 4531      6167655F 
 4531      736F6C61 
 4531      7200
 4532              	.LASF40:
 4533 0208 766F6C74 		.ascii	"voltage_charge_current\000"
 4533      6167655F 
 4533      63686172 
 4533      67655F63 
 4533      75727265 
 4534              	.LASF141:
 4535 021f 75706772 		.ascii	"upgrade_status\000"
 4535      6164655F 
 4535      73746174 
 4535      757300
 4536              	.LASF123:
 4537 022e 635F6461 		.ascii	"c_data_count_sent\000"
 4537      74615F63 
 4537      6F756E74 
 4537      5F73656E 
 4537      7400
 4538              	.LASF64:
 4539 0240 6D6F6465 		.ascii	"modem_info_t\000"
 4539      6D5F696E 
 4539      666F5F74 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 98


 4539      00
 4540              	.LASF65:
 4541 024d 72786C65 		.ascii	"rxlev\000"
 4541      7600
 4542              	.LASF4:
 4543 0253 6C6F6E67 		.ascii	"long int\000"
 4543      20696E74 
 4543      00
 4544              	.LASF71:
 4545 025c 74696D65 		.ascii	"time_to_acquire_ip\000"
 4545      5F746F5F 
 4545      61637175 
 4545      6972655F 
 4545      697000
 4546              	.LASF86:
 4547 026f 616C6172 		.ascii	"alarm\000"
 4547      6D00
 4548              	.LASF45:
 4549 0275 70726573 		.ascii	"pressure_voltage_off\000"
 4549      73757265 
 4549      5F766F6C 
 4549      74616765 
 4549      5F6F6666 
 4550              	.LASF11:
 4551 028a 75696E74 		.ascii	"uint8\000"
 4551      3800
 4552              	.LASF115:
 4553 0290 635F7472 		.ascii	"c_try_counter\000"
 4553      795F636F 
 4553      756E7465 
 4553      7200
 4554              	.LASF126:
 4555 029e 73656E64 		.ascii	"send_time\000"
 4555      5F74696D 
 4555      6500
 4556              	.LASF165:
 4557 02a8 74696D65 		.ascii	"timeToAppLED\000"
 4557      546F4170 
 4557      704C4544 
 4557      00
 4558              	.LASF16:
 4559 02b5 696E7433 		.ascii	"int32\000"
 4559      3200
 4560              	.LASF73:
 4561 02bb 6E6F6465 		.ascii	"node_type\000"
 4561      5F747970 
 4561      6500
 4562              	.LASF112:
 4563 02c5 73796E63 		.ascii	"syncData\000"
 4563      44617461 
 4563      00
 4564              	.LASF121:
 4565 02ce 6E657477 		.ascii	"network_time\000"
 4565      6F726B5F 
 4565      74696D65 
 4565      00
 4566              	.LASF13:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 99


 4567 02db 75696E74 		.ascii	"uint32\000"
 4567      333200
 4568              	.LASF62:
 4569 02e2 6D6F6465 		.ascii	"model_id\000"
 4569      6C5F6964 
 4569      00
 4570              	.LASF33:
 4571 02eb 616C6C5F 		.ascii	"all_level_readings\000"
 4571      6C657665 
 4571      6C5F7265 
 4571      6164696E 
 4571      677300
 4572              	.LASF82:
 4573 02fe 636F756E 		.ascii	"countDownValue\000"
 4573      74446F77 
 4573      6E56616C 
 4573      756500
 4574              	.LASF137:
 4575 030d 75706772 		.ascii	"upgraded\000"
 4575      61646564 
 4575      00
 4576              	.LASF53:
 4577 0316 746D5F6D 		.ascii	"tm_mon\000"
 4577      6F6E00
 4578              	.LASF77:
 4579 031d 64656275 		.ascii	"debug_level\000"
 4579      675F6C65 
 4579      76656C00 
 4580              	.LASF139:
 4581 0329 706F7274 		.ascii	"port\000"
 4581      00
 4582              	.LASF58:
 4583 032e 76616C75 		.ascii	"value\000"
 4583      6500
 4584              	.LASF138:
 4585 0334 686F7374 		.ascii	"host\000"
 4585      00
 4586              	.LASF54:
 4587 0339 746D5F79 		.ascii	"tm_year\000"
 4587      65617200 
 4588              	.LASF161:
 4589 0341 616C6172 		.ascii	"alarmSync\000"
 4589      6D53796E 
 4589      6300
 4590              	.LASF44:
 4591 034b 70726573 		.ascii	"pressure_voltage_on\000"
 4591      73757265 
 4591      5F766F6C 
 4591      74616765 
 4591      5F6F6E00 
 4592              	.LASF8:
 4593 035f 756E7369 		.ascii	"unsigned int\000"
 4593      676E6564 
 4593      20696E74 
 4593      00
 4594              	.LASF135:
 4595 036c 73657454 		.ascii	"setTime\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 100


 4595      696D6500 
 4596              	.LASF60:
 4597 0374 6B65795F 		.ascii	"key_value_t\000"
 4597      76616C75 
 4597      655F7400 
 4598              	.LASF97:
 4599 0380 41796F49 		.ascii	"AyoItsTime\000"
 4599      74735469 
 4599      6D6500
 4600              	.LASF35:
 4601 038b 6E756D5F 		.ascii	"num_valid_readings\000"
 4601      76616C69 
 4601      645F7265 
 4601      6164696E 
 4601      677300
 4602              	.LASF125:
 4603 039e 68747470 		.ascii	"http_chunk\000"
 4603      5F636875 
 4603      6E6B00
 4604              	.LASF132:
 4605 03a9 6D5F766F 		.ascii	"m_voltage\000"
 4605      6C746167 
 4605      6500
 4606              	.LASF5:
 4607 03b3 6C6F6E67 		.ascii	"long unsigned int\000"
 4607      20756E73 
 4607      69676E65 
 4607      6420696E 
 4607      7400
 4608              	.LASF94:
 4609 03c5 7472795F 		.ascii	"try_counter\000"
 4609      636F756E 
 4609      74657200 
 4610              	.LASF116:
 4611 03d1 64617461 		.ascii	"data_count_desired\000"
 4611      5F636F75 
 4611      6E745F64 
 4611      65736972 
 4611      656400
 4612              	.LASF38:
 4613 03e4 766F6C74 		.ascii	"voltage_battery\000"
 4613      6167655F 
 4613      62617474 
 4613      65727900 
 4614              	.LASF24:
 4615 03f4 4461794F 		.ascii	"DayOfMonth\000"
 4615      664D6F6E 
 4615      746800
 4616              	.LASF129:
 4617 03ff 6D616B65 		.ascii	"makeMeasurements\000"
 4617      4D656173 
 4617      7572656D 
 4617      656E7473 
 4617      00
 4618              	.LASF148:
 4619 0410 64617461 		.ascii	"data\000"
 4619      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 101


 4620              	.LASF91:
 4621 0415 65705F70 		.ascii	"ep_port\000"
 4621      6F727400 
 4622              	.LASF57:
 4623 041d 746D5F69 		.ascii	"tm_isdst\000"
 4623      73647374 
 4623      00
 4624              	.LASF87:
 4625 0426 6D6F6465 		.ascii	"modem_info\000"
 4625      6D5F696E 
 4625      666F00
 4626              	.LASF90:
 4627 0431 65705F68 		.ascii	"ep_host\000"
 4627      6F737400 
 4628              	.LASF14:
 4629 0439 696E7438 		.ascii	"int8\000"
 4629      00
 4630              	.LASF96:
 4631 043e 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4631      576F726B 
 4631      576F726B 
 4631      576F726B 
 4631      576F726B 
 4632              	.LASF117:
 4633 0457 635F6461 		.ascii	"c_data_count_desired\000"
 4633      74615F63 
 4633      6F756E74 
 4633      5F646573 
 4633      69726564 
 4634              	.LASF110:
 4635 046c 745F7364 		.ascii	"t_sd_card\000"
 4635      5F636172 
 4635      6400
 4636              	.LASF2:
 4637 0476 73686F72 		.ascii	"short int\000"
 4637      7420696E 
 4637      7400
 4638              	.LASF164:
 4639 0480 616C6172 		.ascii	"alarmAppLED\000"
 4639      6D417070 
 4639      4C454400 
 4640              	.LASF150:
 4641 048c 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4641      6D5F7374 
 4641      6172745F 
 4641      74696D65 
 4641      5F737461 
 4642              	.LASF89:
 4643 04a3 7379735F 		.ascii	"sys_info_t\000"
 4643      696E666F 
 4643      5F7400
 4644              	.LASF81:
 4645 04ae 75706461 		.ascii	"updatable_parameters_t\000"
 4645      7461626C 
 4645      655F7061 
 4645      72616D65 
 4645      74657273 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 102


 4646              	.LASF98:
 4647 04c5 616C6172 		.ascii	"alarmType\000"
 4647      6D547970 
 4647      6500
 4648              	.LASF146:
 4649 04cf 64617461 		.ascii	"dataPointsInStack\000"
 4649      506F696E 
 4649      7473496E 
 4649      53746163 
 4649      6B00
 4650              	.LASF50:
 4651 04e1 746D5F6D 		.ascii	"tm_min\000"
 4651      696E00
 4652              	.LASF140:
 4653 04e8 726F7574 		.ascii	"route\000"
 4653      6500
 4654              	.LASF99:
 4655 04ee 616C6172 		.ascii	"alarmToBeUpdated\000"
 4655      6D546F42 
 4655      65557064 
 4655      61746564 
 4655      00
 4656              	.LASF21:
 4657 04ff 73697A65 		.ascii	"sizetype\000"
 4657      74797065 
 4657      00
 4658              	.LASF56:
 4659 0508 746D5F79 		.ascii	"tm_yday\000"
 4659      64617900 
 4660              	.LASF92:
 4661 0510 7379735F 		.ascii	"sys_settings_t\000"
 4661      73657474 
 4661      696E6773 
 4661      5F7400
 4662              	.LASF136:
 4663 051f 6C6F6361 		.ascii	"localTime\000"
 4663      6C54696D 
 4663      6500
 4664              	.LASF163:
 4665 0529 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4665      546F5379 
 4665      636E5265 
 4665      6D6F7465 
 4665      50617261 
 4666              	.LASF59:
 4667 0540 74696D65 		.ascii	"timeStamp\000"
 4667      5374616D 
 4667      7000
 4668              	.LASF28:
 4669 054a 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4669      54494D45 
 4669      5F444154 
 4669      4500
 4670              	.LASF152:
 4671 0558 75706461 		.ascii	"updatable_parameters\000"
 4671      7461626C 
 4671      655F7061 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 103


 4671      72616D65 
 4671      74657273 
 4672              	.LASF103:
 4673 056d 43726561 		.ascii	"CreateAlarm\000"
 4673      7465416C 
 4673      61726D00 
 4674              	.LASF124:
 4675 0579 7061636B 		.ascii	"packet\000"
 4675      657400
 4676              	.LASF113:
 4677 0580 735F7273 		.ascii	"s_rsrp\000"
 4677      727000
 4678              	.LASF41:
 4679 0587 766F6C74 		.ascii	"voltage_pressure\000"
 4679      6167655F 
 4679      70726573 
 4679      73757265 
 4679      00
 4680              	.LASF154:
 4681 0598 68747470 		.ascii	"http_request\000"
 4681      5F726571 
 4681      75657374 
 4681      00
 4682              	.LASF17:
 4683 05a5 666C6F61 		.ascii	"float\000"
 4683      7400
 4684              	.LASF37:
 4685 05ab 6C657665 		.ascii	"level_sensor_t\000"
 4685      6C5F7365 
 4685      6E736F72 
 4685      5F7400
 4686              	.LASF114:
 4687 05ba 735F7273 		.ascii	"s_rscp\000"
 4687      637000
 4688              	.LASF128:
 4689 05c1 636F6E66 		.ascii	"configureRemoteParams\000"
 4689      69677572 
 4689      6552656D 
 4689      6F746550 
 4689      6172616D 
 4690              	.LASF168:
 4691 05d7 44617461 		.ascii	"Data_fileName\000"
 4691      5F66696C 
 4691      654E616D 
 4691      6500
 4692              	.LASF95:
 4693 05e5 6D6F6465 		.ascii	"modem_status\000"
 4693      6D5F7374 
 4693      61747573 
 4693      00
 4694              	.LASF29:
 4695 05f2 74657374 		.ascii	"test_name\000"
 4695      5F6E616D 
 4695      6500
 4696              	.LASF27:
 4697 05fc 59656172 		.ascii	"Year\000"
 4697      00
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 104


 4698              	.LASF80:
 4699 0601 5F426F6F 		.ascii	"_Bool\000"
 4699      6C00
 4700              	.LASF10:
 4701 0607 696E7433 		.ascii	"int32_t\000"
 4701      325F7400 
 4702              	.LASF1:
 4703 060f 756E7369 		.ascii	"unsigned char\000"
 4703      676E6564 
 4703      20636861 
 4703      7200
 4704              	.LASF158:
 4705 061d 73797374 		.ascii	"system_settings\000"
 4705      656D5F73 
 4705      65747469 
 4705      6E677300 
 4706              	.LASF69:
 4707 062d 72737270 		.ascii	"rsrp\000"
 4707      00
 4708              	.LASF68:
 4709 0632 72737271 		.ascii	"rsrq\000"
 4709      00
 4710              	.LASF100:
 4711 0637 52657365 		.ascii	"ResetAlarm\000"
 4711      74416C61 
 4711      726D00
 4712              	.LASF127:
 4713 0642 735F7365 		.ascii	"s_send_time\000"
 4713      6E645F74 
 4713      696D6500 
 4714              	.LASF76:
 4715 064e 73796E63 		.ascii	"sync_time\000"
 4715      5F74696D 
 4715      6500
 4716              	.LASF47:
 4717 0658 70726573 		.ascii	"pressure_depth\000"
 4717      73757265 
 4717      5F646570 
 4717      746800
 4718              	.LASF66:
 4719 0667 72736370 		.ascii	"rscp\000"
 4719      00
 4720              	.LASF23:
 4721 066c 4461794F 		.ascii	"DayOfWeek\000"
 4721      66576565 
 4721      6B00
 4722              	.LASF32:
 4723 0676 74657374 		.ascii	"test_t\000"
 4723      5F7400
 4724              	.LASF157:
 4725 067d 73797374 		.ascii	"system_info\000"
 4725      656D5F69 
 4725      6E666F00 
 4726              	.LASF63:
 4727 0689 696D6569 		.ascii	"imei\000"
 4727      00
 4728              	.LASF31:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 105


 4729 068e 72656173 		.ascii	"reason\000"
 4729      6F6E00
 4730              	.LASF101:
 4731 0695 616C6172 		.ascii	"alarmToBeReset\000"
 4731      6D546F42 
 4731      65526573 
 4731      657400
 4732              	.LASF106:
 4733 06a4 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4733      6B697479 
 4733      43686563 
 4733      6B596F75 
 4733      7273656C 
 4734              	.LASF122:
 4735 06d0 64617461 		.ascii	"data_count_sent\000"
 4735      5F636F75 
 4735      6E745F73 
 4735      656E7400 
 4736              	.LASF72:
 4737 06e0 6D6F6465 		.ascii	"modem_stats_t\000"
 4737      6D5F7374 
 4737      6174735F 
 4737      7400
 4738              	.LASF46:
 4739 06ee 70726573 		.ascii	"pressure_current\000"
 4739      73757265 
 4739      5F637572 
 4739      72656E74 
 4739      00
 4740              	.LASF42:
 4741 06ff 76616C69 		.ascii	"valid\000"
 4741      6400
 4742              	.LASF166:
 4743 0705 616C6172 		.ascii	"alarmLevelSensor\000"
 4743      6D4C6576 
 4743      656C5365 
 4743      6E736F72 
 4743      00
 4744              	.LASF55:
 4745 0716 746D5F77 		.ascii	"tm_wday\000"
 4745      64617900 
 4746              	.LASF79:
 4747 071e 4C657665 		.ascii	"Level_Sensor_freq\000"
 4747      6C5F5365 
 4747      6E736F72 
 4747      5F667265 
 4747      7100
 4748              	.LASF144:
 4749 0730 6C657665 		.ascii	"level_sensor_inbox\000"
 4749      6C5F7365 
 4749      6E736F72 
 4749      5F696E62 
 4749      6F7800
 4750              	.LASF20:
 4751 0743 6C6F6E67 		.ascii	"long double\000"
 4751      20646F75 
 4751      626C6500 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 106


 4752              	.LASF119:
 4753 074f 6368756E 		.ascii	"chunk\000"
 4753      6B00
 4754              	.LASF130:
 4755 0755 635F7469 		.ascii	"c_timeStamp\000"
 4755      6D655374 
 4755      616D7000 
 4756              	.LASF19:
 4757 0761 63686172 		.ascii	"char\000"
 4757      00
 4758              	.LASF151:
 4759 0766 6D6F6465 		.ascii	"modem_stats\000"
 4759      6D5F7374 
 4759      61747300 
 4760              	.LASF156:
 4761 0772 68747470 		.ascii	"http_route\000"
 4761      5F726F75 
 4761      746500
 4762              	.LASF118:
 4763 077d 706F7274 		.ascii	"portConfig\000"
 4763      436F6E66 
 4763      696700
 4764              	.LASF9:
 4765 0788 5F5F696E 		.ascii	"__int32_t\000"
 4765      7433325F 
 4765      7400
 4766              	.LASF93:
 4767 0792 756E6971 		.ascii	"uniqueId\000"
 4767      75654964 
 4767      00
 4768              	.LASF133:
 4769 079b 6D5F6C65 		.ascii	"m_level_sensor\000"
 4769      76656C5F 
 4769      73656E73 
 4769      6F7200
 4770              	.LASF34:
 4771 07aa 6C657665 		.ascii	"level_reading\000"
 4771      6C5F7265 
 4771      6164696E 
 4771      6700
 4772              	.LASF173:
 4773 07b8 4C617942 		.ascii	"LayBack\000"
 4773      61636B00 
 4774              	.LASF3:
 4775 07c0 73686F72 		.ascii	"short unsigned int\000"
 4775      7420756E 
 4775      7369676E 
 4775      65642069 
 4775      6E7400
 4776              	.LASF61:
 4777 07d3 73696D5F 		.ascii	"sim_id\000"
 4777      696400
 4778              	.LASF52:
 4779 07da 746D5F6D 		.ascii	"tm_mday\000"
 4779      64617900 
 4780              	.LASF104:
 4781 07e2 6E657741 		.ascii	"newAlarm\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 107


 4781      6C61726D 
 4781      00
 4782              	.LASF49:
 4783 07eb 746D5F73 		.ascii	"tm_sec\000"
 4783      656300
 4784              	.LASF134:
 4785 07f2 6D5F7072 		.ascii	"m_pressure\000"
 4785      65737375 
 4785      726500
 4786              	.LASF30:
 4787 07fd 73746174 		.ascii	"status\000"
 4787      757300
 4788              	.LASF147:
 4789 0804 64617461 		.ascii	"dataPointsInStackDesired\000"
 4789      506F696E 
 4789      7473496E 
 4789      53746163 
 4789      6B446573 
 4790              	.LASF78:
 4791 081d 4170705F 		.ascii	"App_LED_freq\000"
 4791      4C45445F 
 4791      66726571 
 4791      00
 4792              	.LASF108:
 4793 082a 745F766F 		.ascii	"t_voltages\000"
 4793      6C746167 
 4793      657300
 4794              	.LASF170:
 4795 0835 6E6F746F 		.ascii	"notoriOS.c\000"
 4795      72694F53 
 4795      2E6300
 4796              	.LASF155:
 4797 0840 68747470 		.ascii	"http_body\000"
 4797      5F626F64 
 4797      7900
 4798              	.LASF15:
 4799 084a 696E7431 		.ascii	"int16\000"
 4799      3600
 4800              	.LASF84:
 4801 0850 636F756E 		.ascii	"countDownType\000"
 4801      74446F77 
 4801      6E547970 
 4801      6500
 4802              	.LASF83:
 4803 085e 63757272 		.ascii	"currentCountDownValue\000"
 4803      656E7443 
 4803      6F756E74 
 4803      446F776E 
 4803      56616C75 
 4804              	.LASF74:
 4805 0874 73696D5F 		.ascii	"sim_type\000"
 4805      74797065 
 4805      00
 4806              	.LASF25:
 4807 087d 4461794F 		.ascii	"DayOfYear\000"
 4807      66596561 
 4807      7200
ARM GAS  C:\Users\dantz\AppData\Local\Temp\ccElIbM7.s 			page 108


 4808              	.LASF48:
 4809 0887 70726573 		.ascii	"pressure_t\000"
 4809      73757265 
 4809      5F7400
 4810              	.LASF102:
 4811 0892 416C6172 		.ascii	"AlarmReady\000"
 4811      6D526561 
 4811      647900
 4812              	.LASF105:
 4813 089d 52656164 		.ascii	"ReadyOrNot\000"
 4813      794F724E 
 4813      6F7400
 4814              	.LASF174:
 4815 08a8 6D61696E 		.ascii	"main\000"
 4815      00
 4816              	.LASF88:
 4817 08ad 63686970 		.ascii	"chip_uniqueId\000"
 4817      5F756E69 
 4817      71756549 
 4817      6400
 4818              	.LASF75:
 4819 08bb 6D656173 		.ascii	"measure_time\000"
 4819      7572655F 
 4819      74696D65 
 4819      00
 4820              	.LASF18:
 4821 08c8 646F7562 		.ascii	"double\000"
 4821      6C6500
 4822              	.LASF153:
 4823 08cf 6170705F 		.ascii	"app_led_inbox\000"
 4823      6C65645F 
 4823      696E626F 
 4823      7800
 4824              	.LASF43:
 4825 08dd 766F6C74 		.ascii	"voltage_t\000"
 4825      6167655F 
 4825      7400
 4826              	.LASF131:
 4827 08e7 635F6E6F 		.ascii	"c_node_type\000"
 4827      64655F74 
 4827      79706500 
 4828              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
