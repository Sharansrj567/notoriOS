ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"notoriOS.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	level_sensor_inbox,100,4
  20              		.comm	buffer_overflow,1,1
  21              		.comm	dataPointsInStack,2,2
  22              		.comm	dataPointsInStackDesired,2,2
  23              		.comm	data,6600,4
  24              		.comm	modem_state,1,1
  25              		.comm	modem_start_time_stamp,4,4
  26              		.comm	modem_info,60,4
  27              		.comm	modem_stats,32,4
  28              		.comm	updatable_parameters,7,4
  29              		.syntax unified
  30              		.global _printf_float
  31              		.thumb
  32              		.syntax unified
  33              		.comm	app_led_inbox,100,4
  34              		.comm	http_request,10000,4
  35              		.comm	http_body,10000,4
  36              		.comm	http_route,200,4
  37              		.comm	system_info,28,4
  38              		.comm	system_settings,104,4
  39              		.comm	alarmMeasure,6,4
  40              		.comm	timeToMeasure,1,1
  41              		.comm	alarmSync,6,4
  42              		.comm	timeToSync,1,1
  43              		.comm	timeToSycnRemoteParams,1,1
  44              		.comm	hey,1,1
  45              		.comm	alarmAppLED,6,4
  46              		.comm	timeToAppLED,1,1
  47              		.comm	alarmLevelSensor,6,4
  48              		.comm	timetoLevelSensor,1,1
  49              		.section	.text.Wakeup_ISR,"ax",%progbits
  50              		.align	2
  51              		.global	Wakeup_ISR
  52              		.thumb
  53              		.thumb_func
  54              		.type	Wakeup_ISR, %function
  55              	Wakeup_ISR:
  56              	.LFB64:
  57              		.file 1 "notoriOS.c"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 2


   1:notoriOS.c    **** /* ========================================
   2:notoriOS.c    ****  *
   3:notoriOS.c    ****  * OPEN-STORM.ORG
   4:notoriOS.c    ****  * notoriOS
   5:notoriOS.c    ****  * A non-premptive operating system for node.
   6:notoriOS.c    ****  *
   7:notoriOS.c    ****  * "To all the teachers that told me I'd never amount to nothin"
   8:notoriOS.c    ****  *      -Notorious BIG (1994)
   9:notoriOS.c    ****  *
  10:notoriOS.c    ****  * ========================================
  11:notoriOS.c    **** */
  12:notoriOS.c    **** 
  13:notoriOS.c    **** #include "notoriOS.h"
  14:notoriOS.c    **** 
  15:notoriOS.c    **** 
  16:notoriOS.c    **** // This function must always be called (when the Sleep Timer's interrupt
  17:notoriOS.c    **** // is disabled or enabled) after wake up to clear the ctw_int status bit.
  18:notoriOS.c    **** // It is required to call SleepTimer_GetStatus() within 1 ms (1 clock cycle
  19:notoriOS.c    **** // of the ILO) after CTW event occurred.
  20:notoriOS.c    **** CY_ISR(Wakeup_ISR) {
  58              		.loc 1 20 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62 0000 80B5     		push	{r7, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 00AF     		add	r7, sp, #0
  67              		.cfi_def_cfa_register 7
  21:notoriOS.c    ****     // Returns the state of the Sleep Timer's status register, and clears the pending interrupt sta
  22:notoriOS.c    ****     SleepTimer_GetStatus();
  68              		.loc 1 22 0
  69 0004 FFF7FEFF 		bl	SleepTimer_GetStatus
  23:notoriOS.c    **** }
  70              		.loc 1 23 0
  71 0008 00BF     		nop
  72 000a 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE64:
  75              		.size	Wakeup_ISR, .-Wakeup_ISR
  76              		.global	Data_fileName
  77              		.data
  78              		.align	2
  79              		.type	Data_fileName, %object
  80              		.size	Data_fileName, 30
  81              	Data_fileName:
  82 0000 64617461 		.ascii	"data.txt\000"
  82      2E747874 
  82      00
  83 0009 00000000 		.space	21
  83      00000000 
  83      00000000 
  83      00000000 
  83      00000000 
  84              		.comm	try_counter,1,1
  85              		.section	.rodata
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 3


  86              		.align	2
  87              	.LC0:
  88 0000 25582D25 		.ascii	"%X-%X\000"
  88      5800
  89 0006 0000     		.align	2
  90              	.LC1:
  91 0008 6563322D 		.ascii	"ec2-18-222-229-124.us-east-2.compute.amazonaws.com\000"
  91      31382D32 
  91      32322D32 
  91      32392D31 
  91      32342E75 
  92              		.section	.text.ReadyOrNot,"ax",%progbits
  93              		.align	2
  94              		.global	ReadyOrNot
  95              		.thumb
  96              		.thumb_func
  97              		.type	ReadyOrNot, %function
  98              	ReadyOrNot:
  99              	.LFB65:
  24:notoriOS.c    **** 
  25:notoriOS.c    **** 
  26:notoriOS.c    **** uint8 syncData();               // Syncs data with server 
  27:notoriOS.c    **** uint8 configureRemoteParams();  // Syncs RTC with cell network and obtains meta-DB params
  28:notoriOS.c    **** uint8 makeMeasurements();       // Takes sensor measurements
  29:notoriOS.c    **** char  Data_fileName[30] = "data.txt";
  30:notoriOS.c    **** uint8 try_counter;
  31:notoriOS.c    **** 
  32:notoriOS.c    **** 
  33:notoriOS.c    **** // ==============================================
  34:notoriOS.c    **** // Ready or not, here I come, you can't hide
  35:notoriOS.c    **** // Gonna find you and take it slowly
  36:notoriOS.c    **** //      - The Fugees (1996)
  37:notoriOS.c    **** //
  38:notoriOS.c    **** // Initialize and critical hardware or routines 
  39:notoriOS.c    **** // ==============================================
  40:notoriOS.c    **** void ReadyOrNot()
  41:notoriOS.c    **** {
 100              		.loc 1 41 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 24
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 B0B5     		push	{r4, r5, r7, lr}
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 88B0     		sub	sp, sp, #32
 111              		.cfi_def_cfa_offset 48
 112 0004 02AF     		add	r7, sp, #8
 113              		.cfi_def_cfa 7, 40
  42:notoriOS.c    ****     
  43:notoriOS.c    ****     isr_SleepTimer_StartEx(Wakeup_ISR); // Start Sleep ISR
 114              		.loc 1 43 0
 115 0006 4348     		ldr	r0, .L3
 116 0008 FFF7FEFF 		bl	isr_SleepTimer_StartEx
  44:notoriOS.c    ****     SleepTimer_Start();                 // Start SleepTimer Component
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 4


 117              		.loc 1 44 0
 118 000c FFF7FEFF 		bl	SleepTimer_Start
  45:notoriOS.c    ****     
  46:notoriOS.c    ****     RTC_WriteIntervalMask(0b11111111);  // Configures what interval handlers will be called from th
 119              		.loc 1 46 0
 120 0010 FF20     		movs	r0, #255
 121 0012 FFF7FEFF 		bl	RTC_WriteIntervalMask
  47:notoriOS.c    ****     RTC_Start();                        // Enables the RTC component
 122              		.loc 1 47 0
 123 0016 FFF7FEFF 		bl	RTC_Start
  48:notoriOS.c    ****     debug_start();                      // Start UART debug
 124              		.loc 1 48 0
 125 001a FFF7FEFF 		bl	debug_start
  49:notoriOS.c    ****     
  50:notoriOS.c    ****     modem_initialize();                 // Initialize the modem
 126              		.loc 1 50 0
 127 001e FFF7FEFF 		bl	modem_initialize
  51:notoriOS.c    ****     
  52:notoriOS.c    ****     updatable_parameters_initialize();  // Initialize sampling, measurement, and debug frequencies 
 128              		.loc 1 52 0
 129 0022 FFF7FEFF 		bl	updatable_parameters_initialize
  53:notoriOS.c    ****    
  54:notoriOS.c    ****     
  55:notoriOS.c    ****     // Collect system info and store in struct (modem ID, silicon ID, etc)
  56:notoriOS.c    ****       /* An array of char elements for the resulting string to be stored */
  57:notoriOS.c    ****     
  58:notoriOS.c    ****     
  59:notoriOS.c    ****     // Get unique ID of PSOC chip, this can be concatenated with the MODEM IDs to generate a unique
  60:notoriOS.c    ****     uint32 uniqueId[2];
  61:notoriOS.c    ****     // Returns the 64-bit unique ID of the device.
  62:notoriOS.c    ****     CyGetUniqueId(uniqueId); 
 130              		.loc 1 62 0
 131 0026 07F10C03 		add	r3, r7, #12
 132 002a 1846     		mov	r0, r3
 133 002c FFF7FEFF 		bl	CyGetUniqueId
  63:notoriOS.c    ****     snprintf(system_info.chip_uniqueId,sizeof(system_info.chip_uniqueId),"%X-%X",(unsigned int)uniq
 134              		.loc 1 63 0
 135 0030 FA68     		ldr	r2, [r7, #12]
 136 0032 3B69     		ldr	r3, [r7, #16]
 137 0034 0093     		str	r3, [sp]
 138 0036 1346     		mov	r3, r2
 139 0038 374A     		ldr	r2, .L3+4
 140 003a 1821     		movs	r1, #24
 141 003c 3748     		ldr	r0, .L3+8
 142 003e FFF7FEFF 		bl	snprintf
  64:notoriOS.c    ****     // The modem will track/popualte it's own IDs, so just point to them for now
  65:notoriOS.c    ****     system_info.modem_info = &modem_info;
 143              		.loc 1 65 0
 144 0042 374B     		ldr	r3, .L3+12
 145 0044 374A     		ldr	r2, .L3+16
 146 0046 1A60     		str	r2, [r3]
  66:notoriOS.c    ****     
  67:notoriOS.c    ****     // Configure server endpoints -- these should obviosuly be provided  remotely by the meta data-
  68:notoriOS.c    ****     // testing server - travis and meagan june of 2022
  69:notoriOS.c    ****     snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","ec2-18-222-229-124.us-ea
 147              		.loc 1 69 0
 148 0048 374A     		ldr	r2, .L3+20
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 5


 149 004a 384B     		ldr	r3, .L3+24
 150 004c 1446     		mov	r4, r2
 151 004e 1D46     		mov	r5, r3
 152 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 153 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 154 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 155 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 156 0058 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 157 005a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 158 005c 2B68     		ldr	r3, [r5]
 159 005e 1A46     		mov	r2, r3	@ movhi
 160 0060 2280     		strh	r2, [r4]	@ movhi
 161 0062 0234     		adds	r4, r4, #2
 162 0064 1B0C     		lsrs	r3, r3, #16
 163 0066 2370     		strb	r3, [r4]
  70:notoriOS.c    ****     
  71:notoriOS.c    ****     // production server
  72:notoriOS.c    ****     //snprintf(system_settings.ep_host,sizeof(system_settings.ep_host),"%s","malcom.open-storm.org"
  73:notoriOS.c    ****     
  74:notoriOS.c    **** 
  75:notoriOS.c    ****     system_settings.ep_port = 5000;
 164              		.loc 1 75 0
 165 0068 2F4B     		ldr	r3, .L3+20
 166 006a 41F28832 		movw	r2, #5000
 167 006e 5A66     		str	r2, [r3, #100]
  76:notoriOS.c    ****     // Don't need the following for new nodes
  77:notoriOS.c    ****     //snprintf(system_settings.ep_user,sizeof(system_settings.ep_user),"%s","generic_node");
  78:notoriOS.c    ****     //snprintf(system_settings.ep_pswd,sizeof(system_settings.ep_pswd),"%s","MakeFloodsCurrents");
  79:notoriOS.c    ****     //snprintf(system_settings.ep_database,sizeof(system_settings.ep_database),"%s","ARB");
  80:notoriOS.c    ****     //snprintf(system_settings.node_id,sizeof(system_settings.node_id),"%s","GGB000");
  81:notoriOS.c    ****         
  82:notoriOS.c    ****     
  83:notoriOS.c    ****     // Create a continuous alarm called alarmMeasure that triggers every 10 min (default) to take m
  84:notoriOS.c    ****     alarmMeasure = CreateAlarm(updatable_parameters.measure_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTI
 168              		.loc 1 84 0
 169 0070 2F4B     		ldr	r3, .L3+28
 170 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 171 0074 99B2     		uxth	r1, r3
 172 0076 2F4C     		ldr	r4, .L3+32
 173 0078 3846     		mov	r0, r7
 174 007a 0723     		movs	r3, #7
 175 007c 0122     		movs	r2, #1
 176 007e FFF7FEFF 		bl	CreateAlarm
 177 0082 2246     		mov	r2, r4
 178 0084 3B46     		mov	r3, r7
 179 0086 1968     		ldr	r1, [r3]	@ unaligned
 180 0088 1160     		str	r1, [r2]	@ unaligned
 181 008a 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 182 008c 9380     		strh	r3, [r2, #4]	@ unaligned
  85:notoriOS.c    ****     timeToMeasure = 1u;
 183              		.loc 1 85 0
 184 008e 2A4B     		ldr	r3, .L3+36
 185 0090 0122     		movs	r2, #1
 186 0092 1A70     		strb	r2, [r3]
  86:notoriOS.c    ****     // Create a continuous alarm called alarmSync that triggers every 60 min (default) to sync the 
  87:notoriOS.c    ****     alarmSync = CreateAlarm(updatable_parameters.sync_time,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTINUOUS)
 187              		.loc 1 87 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 6


 188 0094 264B     		ldr	r3, .L3+28
 189 0096 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 190 0098 99B2     		uxth	r1, r3
 191 009a 284C     		ldr	r4, .L3+40
 192 009c 3846     		mov	r0, r7
 193 009e 0723     		movs	r3, #7
 194 00a0 0122     		movs	r2, #1
 195 00a2 FFF7FEFF 		bl	CreateAlarm
 196 00a6 2246     		mov	r2, r4
 197 00a8 3B46     		mov	r3, r7
 198 00aa 1968     		ldr	r1, [r3]	@ unaligned
 199 00ac 1160     		str	r1, [r2]	@ unaligned
 200 00ae 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 201 00b0 9380     		strh	r3, [r2, #4]	@ unaligned
  88:notoriOS.c    ****     timeToSync = 1u;
 202              		.loc 1 88 0
 203 00b2 234B     		ldr	r3, .L3+44
 204 00b4 0122     		movs	r2, #1
 205 00b6 1A70     		strb	r2, [r3]
  89:notoriOS.c    ****     
  90:notoriOS.c    ****     timeToSycnRemoteParams = 0u;//set to 1 if you want to get modem IDs and time -- no need to do t
 206              		.loc 1 90 0
 207 00b8 224B     		ldr	r3, .L3+48
 208 00ba 0022     		movs	r2, #0
 209 00bc 1A70     		strb	r2, [r3]
  91:notoriOS.c    ****     
  92:notoriOS.c    ****     // App Initializations
  93:notoriOS.c    ****     alarmAppLED = CreateAlarm(updatable_parameters.App_LED_freq,ALARM_TYPE_MINUTE,ALARM_TYPE_CONTIN
 210              		.loc 1 93 0
 211 00be 1C4B     		ldr	r3, .L3+28
 212 00c0 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 213 00c2 99B2     		uxth	r1, r3
 214 00c4 204C     		ldr	r4, .L3+52
 215 00c6 3846     		mov	r0, r7
 216 00c8 0723     		movs	r3, #7
 217 00ca 0122     		movs	r2, #1
 218 00cc FFF7FEFF 		bl	CreateAlarm
 219 00d0 2246     		mov	r2, r4
 220 00d2 3B46     		mov	r3, r7
 221 00d4 1968     		ldr	r1, [r3]	@ unaligned
 222 00d6 1160     		str	r1, [r2]	@ unaligned
 223 00d8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 224 00da 9380     		strh	r3, [r2, #4]	@ unaligned
  94:notoriOS.c    ****     timeToAppLED = 1u;
 225              		.loc 1 94 0
 226 00dc 1B4B     		ldr	r3, .L3+56
 227 00de 0122     		movs	r2, #1
 228 00e0 1A70     		strb	r2, [r3]
  95:notoriOS.c    ****     
  96:notoriOS.c    ****     alarmLevelSensor = CreateAlarm(updatable_parameters.Level_Sensor_freq,ALARM_TYPE_MINUTE, ALARM_
 229              		.loc 1 96 0
 230 00e2 134B     		ldr	r3, .L3+28
 231 00e4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 232 00e6 99B2     		uxth	r1, r3
 233 00e8 194C     		ldr	r4, .L3+60
 234 00ea 3846     		mov	r0, r7
 235 00ec 0723     		movs	r3, #7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 7


 236 00ee 0122     		movs	r2, #1
 237 00f0 FFF7FEFF 		bl	CreateAlarm
 238 00f4 2246     		mov	r2, r4
 239 00f6 3B46     		mov	r3, r7
 240 00f8 1968     		ldr	r1, [r3]	@ unaligned
 241 00fa 1160     		str	r1, [r2]	@ unaligned
 242 00fc 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 243 00fe 9380     		strh	r3, [r2, #4]	@ unaligned
  97:notoriOS.c    ****     timetoLevelSensor = 1u;
 244              		.loc 1 97 0
 245 0100 144B     		ldr	r3, .L3+64
 246 0102 0122     		movs	r2, #1
 247 0104 1A70     		strb	r2, [r3]
  98:notoriOS.c    ****     
  99:notoriOS.c    ****     // Initialize the try counter to 0
 100:notoriOS.c    ****     uint8 try_counter = 0;
 248              		.loc 1 100 0
 249 0106 0023     		movs	r3, #0
 250 0108 FB75     		strb	r3, [r7, #23]
 101:notoriOS.c    **** }
 251              		.loc 1 101 0
 252 010a 00BF     		nop
 253 010c 1837     		adds	r7, r7, #24
 254              		.cfi_def_cfa_offset 16
 255 010e BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0110 B0BD     		pop	{r4, r5, r7, pc}
 259              	.L4:
 260 0112 00BF     		.align	2
 261              	.L3:
 262 0114 00000000 		.word	Wakeup_ISR
 263 0118 00000000 		.word	.LC0
 264 011c 04000000 		.word	system_info+4
 265 0120 00000000 		.word	system_info
 266 0124 00000000 		.word	modem_info
 267 0128 00000000 		.word	system_settings
 268 012c 08000000 		.word	.LC1
 269 0130 00000000 		.word	updatable_parameters
 270 0134 00000000 		.word	alarmMeasure
 271 0138 00000000 		.word	timeToMeasure
 272 013c 00000000 		.word	alarmSync
 273 0140 00000000 		.word	timeToSync
 274 0144 00000000 		.word	timeToSycnRemoteParams
 275 0148 00000000 		.word	alarmAppLED
 276 014c 00000000 		.word	timeToAppLED
 277 0150 00000000 		.word	alarmLevelSensor
 278 0154 00000000 		.word	timetoLevelSensor
 279              		.cfi_endproc
 280              	.LFE65:
 281              		.size	ReadyOrNot, .-ReadyOrNot
 282              		.section	.text.WorkWorkWorkWorkWorkWork,"ax",%progbits
 283              		.align	2
 284              		.global	WorkWorkWorkWorkWorkWork
 285              		.thumb
 286              		.thumb_func
 287              		.type	WorkWorkWorkWorkWorkWork, %function
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 8


 288              	WorkWorkWorkWorkWorkWork:
 289              	.LFB66:
 102:notoriOS.c    **** 
 103:notoriOS.c    **** 
 104:notoriOS.c    **** // ==============================================
 105:notoriOS.c    **** // You see me I be work, work, work, work, work, work 
 106:notoriOS.c    **** //      - Rihanna, feat Drake (2016)
 107:notoriOS.c    **** //
 108:notoriOS.c    **** // Prorcesses core tasks
 109:notoriOS.c    **** // ==============================================
 110:notoriOS.c    **** int WorkWorkWorkWorkWorkWork()
 111:notoriOS.c    **** {
 290              		.loc 1 111 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 8
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 82B0     		sub	sp, sp, #8
 299              		.cfi_def_cfa_offset 16
 300 0004 00AF     		add	r7, sp, #0
 301              		.cfi_def_cfa_register 7
 112:notoriOS.c    ****     
 113:notoriOS.c    ****     
 114:notoriOS.c    ****     
 115:notoriOS.c    ****     // The priority of these tasks is determined by the if statements
 116:notoriOS.c    ****     // For example, taking measurements should always precede data transmisison, even if both fire
 117:notoriOS.c    ****     // Getting meta-DB info and system configs precedes all
 118:notoriOS.c    ****     // That said, the modem is always qeried to check if it needs anything
 119:notoriOS.c    ****     
 120:notoriOS.c    ****     // Checks to see if the timetoSyncRemoteParms flag is set
 121:notoriOS.c    ****     if(timeToSycnRemoteParams){
 302              		.loc 1 121 0
 303 0006 204B     		ldr	r3, .L12
 304 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 305 000a 002B     		cmp	r3, #0
 306 000c 06D0     		beq	.L6
 122:notoriOS.c    ****         timeToSycnRemoteParams = configureRemoteParams(); // Will return 0 when done sending data
 307              		.loc 1 122 0
 308 000e FFF7FEFF 		bl	configureRemoteParams
 309 0012 0346     		mov	r3, r0
 310 0014 1A46     		mov	r2, r3
 311 0016 1C4B     		ldr	r3, .L12
 312 0018 1A70     		strb	r2, [r3]
 313 001a 22E0     		b	.L7
 314              	.L6:
 123:notoriOS.c    ****     }
 124:notoriOS.c    ****     // Checks to see if the timetoMeasure flag is set
 125:notoriOS.c    ****     else if(timeToMeasure){
 315              		.loc 1 125 0
 316 001c 1B4B     		ldr	r3, .L12+4
 317 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 318 0020 002B     		cmp	r3, #0
 319 0022 06D0     		beq	.L8
 126:notoriOS.c    ****         // on custom nodes makeMeasurements will just be battery voltages
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 9


 127:notoriOS.c    ****         timeToMeasure = makeMeasurements(); // Will return 0 when done sending data
 320              		.loc 1 127 0
 321 0024 FFF7FEFF 		bl	makeMeasurements
 322 0028 0346     		mov	r3, r0
 323 002a 1A46     		mov	r2, r3
 324 002c 174B     		ldr	r3, .L12+4
 325 002e 1A70     		strb	r2, [r3]
 326 0030 17E0     		b	.L7
 327              	.L8:
 128:notoriOS.c    ****     }  
 129:notoriOS.c    ****     // custom nodes
 130:notoriOS.c    ****     else if(updatable_parameters.node_type == NODE_TYPE_CUSTOM){
 328              		.loc 1 130 0
 329 0032 174B     		ldr	r3, .L12+8
 330 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 331 0036 042B     		cmp	r3, #4
 332 0038 13D1     		bne	.L7
 131:notoriOS.c    ****         if(timeToAppLED){
 333              		.loc 1 131 0
 334 003a 164B     		ldr	r3, .L12+12
 335 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 336 003e 002B     		cmp	r3, #0
 337 0040 05D0     		beq	.L9
 132:notoriOS.c    ****             timeToAppLED = App_LED();
 338              		.loc 1 132 0
 339 0042 FFF7FEFF 		bl	App_LED
 340 0046 0346     		mov	r3, r0
 341 0048 1A46     		mov	r2, r3
 342 004a 124B     		ldr	r3, .L12+12
 343 004c 1A70     		strb	r2, [r3]
 344              	.L9:
 133:notoriOS.c    ****         }
 134:notoriOS.c    ****         if(timetoLevelSensor){
 345              		.loc 1 134 0
 346 004e 124B     		ldr	r3, .L12+16
 347 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 348 0052 002B     		cmp	r3, #0
 349 0054 05D0     		beq	.L7
 135:notoriOS.c    ****             timetoLevelSensor = level_sensor();
 350              		.loc 1 135 0
 351 0056 FFF7FEFF 		bl	level_sensor
 352 005a 0346     		mov	r3, r0
 353 005c 1A46     		mov	r2, r3
 354 005e 0E4B     		ldr	r3, .L12+16
 355 0060 1A70     		strb	r2, [r3]
 356              	.L7:
 136:notoriOS.c    ****         }
 137:notoriOS.c    ****         // add other custom apps below
 138:notoriOS.c    ****     }
 139:notoriOS.c    ****     if(timeToSync){
 357              		.loc 1 139 0
 358 0062 0E4B     		ldr	r3, .L12+20
 359 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 360 0066 002B     		cmp	r3, #0
 361 0068 05D0     		beq	.L10
 140:notoriOS.c    ****         timeToSync = syncData();
 362              		.loc 1 140 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 10


 363 006a FFF7FEFF 		bl	syncData
 364 006e 0346     		mov	r3, r0
 365 0070 1A46     		mov	r2, r3
 366 0072 0A4B     		ldr	r3, .L12+20
 367 0074 1A70     		strb	r2, [r3]
 368              	.L10:
 141:notoriOS.c    ****     } 
 142:notoriOS.c    ****     
 143:notoriOS.c    **** 
 144:notoriOS.c    ****     
 145:notoriOS.c    ****     // Print the countdown to the next alarm
 146:notoriOS.c    ****     //printNotif(NOTIF_TYPE_EVENT,"Measure CNT %d, Sync CNT %d, Data Wheel CNT %d",alarmMeasure.cur
 147:notoriOS.c    ****     
 148:notoriOS.c    ****     
 149:notoriOS.c    ****     // Check modem state machine on every loop
 150:notoriOS.c    ****     uint8 modem_status = modem_process_tasks();
 369              		.loc 1 150 0
 370 0076 FFF7FEFF 		bl	modem_process_tasks
 371 007a 0346     		mov	r3, r0
 372 007c FB71     		strb	r3, [r7, #7]
 151:notoriOS.c    **** 
 152:notoriOS.c    ****     return 0u +  modem_status;  
 373              		.loc 1 152 0
 374 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 153:notoriOS.c    **** }
 375              		.loc 1 153 0
 376 0080 1846     		mov	r0, r3
 377 0082 0837     		adds	r7, r7, #8
 378              		.cfi_def_cfa_offset 8
 379 0084 BD46     		mov	sp, r7
 380              		.cfi_def_cfa_register 13
 381              		@ sp needed
 382 0086 80BD     		pop	{r7, pc}
 383              	.L13:
 384              		.align	2
 385              	.L12:
 386 0088 00000000 		.word	timeToSycnRemoteParams
 387 008c 00000000 		.word	timeToMeasure
 388 0090 00000000 		.word	updatable_parameters
 389 0094 00000000 		.word	timeToAppLED
 390 0098 00000000 		.word	timetoLevelSensor
 391 009c 00000000 		.word	timeToSync
 392              		.cfi_endproc
 393              	.LFE66:
 394              		.size	WorkWorkWorkWorkWorkWork, .-WorkWorkWorkWorkWorkWork
 395              		.section	.text.LayBack,"ax",%progbits
 396              		.align	2
 397              		.global	LayBack
 398              		.thumb
 399              		.thumb_func
 400              		.type	LayBack, %function
 401              	LayBack:
 402              	.LFB67:
 154:notoriOS.c    **** 
 155:notoriOS.c    **** 
 156:notoriOS.c    **** 
 157:notoriOS.c    **** 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 11


 158:notoriOS.c    **** 
 159:notoriOS.c    **** 
 160:notoriOS.c    **** // ==============================================
 161:notoriOS.c    **** // sippin on gin and juice, Laid back (with my mind on my money and my money on my mind)
 162:notoriOS.c    **** //      - Snoop Dogg (1993)
 163:notoriOS.c    **** //
 164:notoriOS.c    **** // Put all hardware to sleep and go into low power mode to conserve Amps
 165:notoriOS.c    **** // ==============================================
 166:notoriOS.c    **** void LayBack()
 167:notoriOS.c    **** {
 403              		.loc 1 167 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407 0000 80B5     		push	{r7, lr}
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 168:notoriOS.c    ****   
 169:notoriOS.c    ****     modem_sleep();  // Prepares system clocks for the Sleep mode
 413              		.loc 1 169 0
 414 0004 FFF7FEFF 		bl	modem_sleep
 170:notoriOS.c    ****     
 171:notoriOS.c    ****     // Important, call this last because we want to sleep uart before shutting down
 172:notoriOS.c    ****     debug_sleep();  // Function to sleep UART debug
 415              		.loc 1 172 0
 416 0008 FFF7FEFF 		bl	debug_sleep
 173:notoriOS.c    ****     
 174:notoriOS.c    ****     CyPmSaveClocks(); // Called to prep system to sleep/hiberanate. Saves all states of clocking sy
 417              		.loc 1 174 0
 418 000c FFF7FEFF 		bl	CyPmSaveClocks
 175:notoriOS.c    ****     
 176:notoriOS.c    ****     // Switch to the Sleep Mode for the other devices:
 177:notoriOS.c    ****     //  - PM_SLEEP_TIME_NONE: wakeup time is defined by Sleep Timer
 178:notoriOS.c    ****     //  - PM_SLEEP_SRC_CTW :  wakeup on CTW sources is allowed
 179:notoriOS.c    ****     //  - If real-time clock is used, it will also wake the device
 180:notoriOS.c    ****     //can also wake up from a pin intterup (PICU). This is useful with the moderm UART
 181:notoriOS.c    ****     //CyPmHibernate();
 182:notoriOS.c    ****     //CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_PICU);
 183:notoriOS.c    **** 
 184:notoriOS.c    ****     CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_CTW & PM_SLEEP_SRC_ONE_PPS); // Puts the part into t
 419              		.loc 1 184 0
 420 0010 4FF40061 		mov	r1, #2048
 421 0014 0020     		movs	r0, #0
 422 0016 FFF7FEFF 		bl	CyPmSleep
 185:notoriOS.c    **** 
 186:notoriOS.c    ****     CyPmRestoreClocks();    // Restore clock configuration.
 423              		.loc 1 186 0
 424 001a FFF7FEFF 		bl	CyPmRestoreClocks
 187:notoriOS.c    **** 
 188:notoriOS.c    ****     debug_wakeup();         // Function to wakeup UART debug.
 425              		.loc 1 188 0
 426 001e FFF7FEFF 		bl	debug_wakeup
 189:notoriOS.c    ****     modem_wakeup();         // Function to wakeup modem.
 427              		.loc 1 189 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 12


 428 0022 FFF7FEFF 		bl	modem_wakeup
 190:notoriOS.c    **** 
 191:notoriOS.c    **** }
 429              		.loc 1 191 0
 430 0026 00BF     		nop
 431 0028 80BD     		pop	{r7, pc}
 432              		.cfi_endproc
 433              	.LFE67:
 434              		.size	LayBack, .-LayBack
 435 002a 00BF     		.section	.text.AyoItsTime,"ax",%progbits
 436              		.align	2
 437              		.global	AyoItsTime
 438              		.thumb
 439              		.thumb_func
 440              		.type	AyoItsTime, %function
 441              	AyoItsTime:
 442              	.LFB68:
 192:notoriOS.c    **** 
 193:notoriOS.c    **** 
 194:notoriOS.c    **** // ==============================================
 195:notoriOS.c    **** // I never sleep, 'cause sleep is the cousin of death
 196:notoriOS.c    **** //      - NAS (1994)
 197:notoriOS.c    **** //
 198:notoriOS.c    **** // This is the scheduler. It's called from various interrupts and timers,
 199:notoriOS.c    **** // ...in particular from fuctions with in the real-tiem clock interrupts (RTC_INT.c)
 200:notoriOS.c    **** // It will add tasks to the work queue,
 201:notoriOS.c    **** // which will be executed eventually by WorkWorkWorkWorkWorkWork()
 202:notoriOS.c    **** // ==============================================
 203:notoriOS.c    **** void AyoItsTime(uint8 alarmType)
 204:notoriOS.c    **** {
 443              		.loc 1 204 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 0000 80B5     		push	{r7, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 82B0     		sub	sp, sp, #8
 452              		.cfi_def_cfa_offset 16
 453 0004 00AF     		add	r7, sp, #0
 454              		.cfi_def_cfa_register 7
 455 0006 0346     		mov	r3, r0
 456 0008 FB71     		strb	r3, [r7, #7]
 205:notoriOS.c    ****     // Checks if the alarm is up and if so, sets the flag.
 206:notoriOS.c    ****     if(AlarmReady(&alarmMeasure,alarmType))
 457              		.loc 1 206 0
 458 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 459 000c 1946     		mov	r1, r3
 460 000e 1748     		ldr	r0, .L21
 461 0010 FFF7FEFF 		bl	AlarmReady
 462 0014 0346     		mov	r3, r0
 463 0016 002B     		cmp	r3, #0
 464 0018 02D0     		beq	.L16
 207:notoriOS.c    ****     {
 208:notoriOS.c    ****          // Flag new task as "ready" and pass off to workworkworkworkwork()
 209:notoriOS.c    ****         timeToMeasure = 1u;
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 13


 465              		.loc 1 209 0
 466 001a 154B     		ldr	r3, .L21+4
 467 001c 0122     		movs	r2, #1
 468 001e 1A70     		strb	r2, [r3]
 469              	.L16:
 210:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Measure Alarm");
 211:notoriOS.c    ****         
 212:notoriOS.c    ****     }
 213:notoriOS.c    ****     if(AlarmReady(&alarmSync,alarmType))
 470              		.loc 1 213 0
 471 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 472 0022 1946     		mov	r1, r3
 473 0024 1348     		ldr	r0, .L21+8
 474 0026 FFF7FEFF 		bl	AlarmReady
 475 002a 0346     		mov	r3, r0
 476 002c 002B     		cmp	r3, #0
 477 002e 02D0     		beq	.L17
 214:notoriOS.c    ****     {
 215:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 216:notoriOS.c    ****         timeToSync = 1u;
 478              		.loc 1 216 0
 479 0030 114B     		ldr	r3, .L21+12
 480 0032 0122     		movs	r2, #1
 481 0034 1A70     		strb	r2, [r3]
 482              	.L17:
 217:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 218:notoriOS.c    ****     }
 219:notoriOS.c    ****     if(AlarmReady(&alarmAppLED,alarmType))
 483              		.loc 1 219 0
 484 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 485 0038 1946     		mov	r1, r3
 486 003a 1048     		ldr	r0, .L21+16
 487 003c FFF7FEFF 		bl	AlarmReady
 488 0040 0346     		mov	r3, r0
 489 0042 002B     		cmp	r3, #0
 490 0044 02D0     		beq	.L18
 220:notoriOS.c    ****     {
 221:notoriOS.c    ****         // Create new task and pass off to workworkworkworkwork()
 222:notoriOS.c    ****         timeToAppLED = 1u;
 491              		.loc 1 222 0
 492 0046 0E4B     		ldr	r3, .L21+20
 493 0048 0122     		movs	r2, #1
 494 004a 1A70     		strb	r2, [r3]
 495              	.L18:
 223:notoriOS.c    ****          //printNotif(NOTIF_TYPE_EVENT,"Sync Alarm");
 224:notoriOS.c    ****     }
 225:notoriOS.c    ****     if(AlarmReady(&alarmLevelSensor, alarmType)){
 496              		.loc 1 225 0
 497 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 498 004e 1946     		mov	r1, r3
 499 0050 0C48     		ldr	r0, .L21+24
 500 0052 FFF7FEFF 		bl	AlarmReady
 501 0056 0346     		mov	r3, r0
 502 0058 002B     		cmp	r3, #0
 503 005a 02D0     		beq	.L20
 226:notoriOS.c    ****         timetoLevelSensor = 1u;
 504              		.loc 1 226 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 14


 505 005c 0A4B     		ldr	r3, .L21+28
 506 005e 0122     		movs	r2, #1
 507 0060 1A70     		strb	r2, [r3]
 508              	.L20:
 227:notoriOS.c    ****     }
 228:notoriOS.c    ****     
 229:notoriOS.c    **** }
 509              		.loc 1 229 0
 510 0062 00BF     		nop
 511 0064 0837     		adds	r7, r7, #8
 512              		.cfi_def_cfa_offset 8
 513 0066 BD46     		mov	sp, r7
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 0068 80BD     		pop	{r7, pc}
 517              	.L22:
 518 006a 00BF     		.align	2
 519              	.L21:
 520 006c 00000000 		.word	alarmMeasure
 521 0070 00000000 		.word	timeToMeasure
 522 0074 00000000 		.word	alarmSync
 523 0078 00000000 		.word	timeToSync
 524 007c 00000000 		.word	alarmAppLED
 525 0080 00000000 		.word	timeToAppLED
 526 0084 00000000 		.word	alarmLevelSensor
 527 0088 00000000 		.word	timetoLevelSensor
 528              		.cfi_endproc
 529              	.LFE68:
 530              		.size	AyoItsTime, .-AyoItsTime
 531              		.section	.text.AlarmReady,"ax",%progbits
 532              		.align	2
 533              		.global	AlarmReady
 534              		.thumb
 535              		.thumb_func
 536              		.type	AlarmReady, %function
 537              	AlarmReady:
 538              	.LFB69:
 230:notoriOS.c    **** 
 231:notoriOS.c    **** 
 232:notoriOS.c    **** // ==============================================
 233:notoriOS.c    **** // Determines when an alarm is ready to trigger, which will be handeled by another cutions
 234:notoriOS.c    **** // ==============================================
 235:notoriOS.c    **** uint8 AlarmReady(alarm * alarmToBeUpdated, uint8 alarmType)
 236:notoriOS.c    **** {
 539              		.loc 1 236 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 8
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543 0000 80B5     		push	{r7, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547 0002 82B0     		sub	sp, sp, #8
 548              		.cfi_def_cfa_offset 16
 549 0004 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 551 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 15


 552 0008 0B46     		mov	r3, r1
 553 000a FB70     		strb	r3, [r7, #3]
 237:notoriOS.c    ****     // if the countDownType matches the alarmType
 238:notoriOS.c    ****     if(alarmToBeUpdated->countDownType == alarmType){
 554              		.loc 1 238 0
 555 000c 7B68     		ldr	r3, [r7, #4]
 556 000e 1B79     		ldrb	r3, [r3, #4]
 557 0010 DBB2     		uxtb	r3, r3
 558 0012 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 559 0014 9A42     		cmp	r2, r3
 560 0016 12D1     		bne	.L24
 239:notoriOS.c    ****        
 240:notoriOS.c    ****         // In the Post-decrement old value is first used in a expression and then old value will be
 241:notoriOS.c    ****         // Decrement the count down value by 1
 242:notoriOS.c    ****         alarmToBeUpdated->currentCountDownValue--;
 561              		.loc 1 242 0
 562 0018 7B68     		ldr	r3, [r7, #4]
 563 001a 5B88     		ldrh	r3, [r3, #2]	@ movhi
 564 001c 1BB2     		sxth	r3, r3
 565 001e 9BB2     		uxth	r3, r3
 566 0020 013B     		subs	r3, r3, #1
 567 0022 9BB2     		uxth	r3, r3
 568 0024 1AB2     		sxth	r2, r3
 569 0026 7B68     		ldr	r3, [r7, #4]
 570 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 243:notoriOS.c    ****         // If the current count is 0, then reset the alarm
 244:notoriOS.c    ****         if(alarmToBeUpdated->currentCountDownValue <= 0){
 571              		.loc 1 244 0
 572 002a 7B68     		ldr	r3, [r7, #4]
 573 002c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 574 002e 1BB2     		sxth	r3, r3
 575 0030 002B     		cmp	r3, #0
 576 0032 04DC     		bgt	.L24
 245:notoriOS.c    ****             ResetAlarm(alarmToBeUpdated);
 577              		.loc 1 245 0
 578 0034 7868     		ldr	r0, [r7, #4]
 579 0036 FFF7FEFF 		bl	ResetAlarm
 246:notoriOS.c    ****             return 1u;
 580              		.loc 1 246 0
 581 003a 0123     		movs	r3, #1
 582 003c 00E0     		b	.L25
 583              	.L24:
 247:notoriOS.c    ****         } 
 248:notoriOS.c    ****     }
 249:notoriOS.c    ****     
 250:notoriOS.c    ****     return 0u; // Otherwise return 0
 584              		.loc 1 250 0
 585 003e 0023     		movs	r3, #0
 586              	.L25:
 251:notoriOS.c    **** }
 587              		.loc 1 251 0
 588 0040 1846     		mov	r0, r3
 589 0042 0837     		adds	r7, r7, #8
 590              		.cfi_def_cfa_offset 8
 591 0044 BD46     		mov	sp, r7
 592              		.cfi_def_cfa_register 13
 593              		@ sp needed
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 16


 594 0046 80BD     		pop	{r7, pc}
 595              		.cfi_endproc
 596              	.LFE69:
 597              		.size	AlarmReady, .-AlarmReady
 598              		.section	.text.ResetAlarm,"ax",%progbits
 599              		.align	2
 600              		.global	ResetAlarm
 601              		.thumb
 602              		.thumb_func
 603              		.type	ResetAlarm, %function
 604              	ResetAlarm:
 605              	.LFB70:
 252:notoriOS.c    **** 
 253:notoriOS.c    **** // ==============================================
 254:notoriOS.c    **** // Resets an alarm, which will be handeled by other executions
 255:notoriOS.c    **** // ==============================================
 256:notoriOS.c    **** void ResetAlarm(alarm * alarmToBeReset)
 257:notoriOS.c    **** {
 606              		.loc 1 257 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 8
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610              		@ link register save eliminated.
 611 0000 80B4     		push	{r7}
 612              		.cfi_def_cfa_offset 4
 613              		.cfi_offset 7, -4
 614 0002 83B0     		sub	sp, sp, #12
 615              		.cfi_def_cfa_offset 16
 616 0004 00AF     		add	r7, sp, #0
 617              		.cfi_def_cfa_register 7
 618 0006 7860     		str	r0, [r7, #4]
 258:notoriOS.c    ****     // resets the alarm when the current count down value equals the set alarm count down value
 259:notoriOS.c    ****     alarmToBeReset->currentCountDownValue = alarmToBeReset->countDownValue;
 619              		.loc 1 259 0
 620 0008 7B68     		ldr	r3, [r7, #4]
 621 000a 1B88     		ldrh	r3, [r3]	@ movhi
 622 000c 9BB2     		uxth	r3, r3
 623 000e 1AB2     		sxth	r2, r3
 624 0010 7B68     		ldr	r3, [r7, #4]
 625 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 260:notoriOS.c    **** }
 626              		.loc 1 260 0
 627 0014 00BF     		nop
 628 0016 0C37     		adds	r7, r7, #12
 629              		.cfi_def_cfa_offset 4
 630 0018 BD46     		mov	sp, r7
 631              		.cfi_def_cfa_register 13
 632              		@ sp needed
 633 001a 80BC     		pop	{r7}
 634              		.cfi_restore 7
 635              		.cfi_def_cfa_offset 0
 636 001c 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE70:
 639              		.size	ResetAlarm, .-ResetAlarm
 640 001e 00BF     		.section	.text.CreateAlarm,"ax",%progbits
 641              		.align	2
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 17


 642              		.global	CreateAlarm
 643              		.thumb
 644              		.thumb_func
 645              		.type	CreateAlarm, %function
 646              	CreateAlarm:
 647              	.LFB71:
 261:notoriOS.c    **** 
 262:notoriOS.c    **** // ==============================================
 263:notoriOS.c    **** // Creates a new alarm, which will be handeled by another cutions
 264:notoriOS.c    **** // ==============================================
 265:notoriOS.c    **** alarm CreateAlarm(uint16 countDownValue, uint8 countDownType,uint8 countDownResetCondition)
 266:notoriOS.c    **** {
 648              		.loc 1 266 0
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 16
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652              		@ link register save eliminated.
 653 0000 80B4     		push	{r7}
 654              		.cfi_def_cfa_offset 4
 655              		.cfi_offset 7, -4
 656 0002 85B0     		sub	sp, sp, #20
 657              		.cfi_def_cfa_offset 24
 658 0004 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
 661 0008 0846     		mov	r0, r1
 662 000a 1146     		mov	r1, r2
 663 000c 1A46     		mov	r2, r3
 664 000e 0346     		mov	r3, r0	@ movhi
 665 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 666 0012 0B46     		mov	r3, r1
 667 0014 7B70     		strb	r3, [r7, #1]
 668 0016 1346     		mov	r3, r2
 669 0018 3B70     		strb	r3, [r7]
 267:notoriOS.c    ****     // Creates variable newAlarm of the data structure type alarm
 268:notoriOS.c    ****     alarm newAlarm;
 269:notoriOS.c    ****     
 270:notoriOS.c    ****     // Defines the different params of an alarm: # of ticks, alarm type (sec, min, etc.), & continu
 271:notoriOS.c    ****     newAlarm.countDownValue = countDownValue;
 670              		.loc 1 271 0
 671 001a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 672 001c 3B81     		strh	r3, [r7, #8]	@ movhi
 272:notoriOS.c    ****     newAlarm.countDownType = countDownType;
 673              		.loc 1 272 0
 674 001e 7B78     		ldrb	r3, [r7, #1]
 675 0020 3B73     		strb	r3, [r7, #12]
 273:notoriOS.c    ****     newAlarm.countDownResetCondition = countDownResetCondition;
 676              		.loc 1 273 0
 677 0022 3B78     		ldrb	r3, [r7]
 678 0024 7B73     		strb	r3, [r7, #13]
 274:notoriOS.c    ****     
 275:notoriOS.c    ****     // If you want a reccuring alarm (e.g. resets freshly each hour), then add
 276:notoriOS.c    ****     // Account for already exprired time using the RTC. Otherwise, set to the countDownValue
 277:notoriOS.c    ****     newAlarm.currentCountDownValue = countDownValue;
 679              		.loc 1 277 0
 680 0026 B7F90230 		ldrsh	r3, [r7, #2]
 681 002a 7B81     		strh	r3, [r7, #10]	@ movhi
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 18


 278:notoriOS.c    ****     
 279:notoriOS.c    ****     return newAlarm;
 682              		.loc 1 279 0
 683 002c 7B68     		ldr	r3, [r7, #4]
 684 002e 1A46     		mov	r2, r3
 685 0030 07F10803 		add	r3, r7, #8
 686 0034 1868     		ldr	r0, [r3]	@ unaligned
 687 0036 1060     		str	r0, [r2]	@ unaligned
 688 0038 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 689 003a 9380     		strh	r3, [r2, #4]	@ unaligned
 280:notoriOS.c    ****     
 281:notoriOS.c    **** }
 690              		.loc 1 281 0
 691 003c 7868     		ldr	r0, [r7, #4]
 692 003e 1437     		adds	r7, r7, #20
 693              		.cfi_def_cfa_offset 4
 694 0040 BD46     		mov	sp, r7
 695              		.cfi_def_cfa_register 13
 696              		@ sp needed
 697 0042 80BC     		pop	{r7}
 698              		.cfi_restore 7
 699              		.cfi_def_cfa_offset 0
 700 0044 7047     		bx	lr
 701              		.cfi_endproc
 702              	.LFE71:
 703              		.size	CreateAlarm, .-CreateAlarm
 704 0046 00BF     		.section	.rodata
 705 003b 00       		.align	2
 706              	.LC2:
 707 003c 2D2D2D2D 		.ascii	"-------------BEGIN TESTS---------------\012\012\000"
 707      2D2D2D2D 
 707      2D2D2D2D 
 707      2D424547 
 707      494E2054 
 708 0066 0000     		.align	2
 709              	.LC3:
 710 0068 4D454944 		.ascii	"MEID=%s, SIMID=%s, DEVICEID=%s\000"
 710      3D25732C 
 710      2053494D 
 710      49443D25 
 710      732C2044 
 711 0087 00       		.align	2
 712              	.LC4:
 713 0088 0A0A2D2D 		.ascii	"\012\012-------------END TESTS---------------\012\012"
 713      2D2D2D2D 
 713      2D2D2D2D 
 713      2D2D2D45 
 713      4E442054 
 714 00b1 00       		.ascii	"\000"
 715              		.section	.text.ChickityCheckYourselfBeforeYouWreckYourself,"ax",%progbits
 716              		.align	2
 717              		.global	ChickityCheckYourselfBeforeYouWreckYourself
 718              		.thumb
 719              		.thumb_func
 720              		.type	ChickityCheckYourselfBeforeYouWreckYourself, %function
 721              	ChickityCheckYourselfBeforeYouWreckYourself:
 722              	.LFB72:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 19


 282:notoriOS.c    **** 
 283:notoriOS.c    **** // ==============================================
 284:notoriOS.c    **** // Dropping bombs on your moms
 285:notoriOS.c    **** //      - Ice Cube (1992)
 286:notoriOS.c    **** //
 287:notoriOS.c    **** // This is the global testing function, which runs all relevant tests
 288:notoriOS.c    **** // If you make a new components, it could be good to call its tester function here 
 289:notoriOS.c    **** // ==============================================
 290:notoriOS.c    **** void ChickityCheckYourselfBeforeYouWreckYourself(){
 723              		.loc 1 290 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 1944
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727 0000 90B5     		push	{r4, r7, lr}
 728              		.cfi_def_cfa_offset 12
 729              		.cfi_offset 4, -12
 730              		.cfi_offset 7, -8
 731              		.cfi_offset 14, -4
 732 0002 ADF6141D 		subw	sp, sp, #2324
 733              		.cfi_def_cfa_offset 2336
 734 0006 5EAF     		add	r7, sp, #376
 735              		.cfi_def_cfa 7, 1960
 291:notoriOS.c    **** 
 292:notoriOS.c    ****     //test_t t_influx = influx_test();
 293:notoriOS.c    ****     //printTestStatus(t_influx);
 294:notoriOS.c    ****     
 295:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"-------------BEGIN TESTS---------------\n\n");
 736              		.loc 1 295 0
 737 0008 3849     		ldr	r1, .L30
 738 000a 0320     		movs	r0, #3
 739 000c FFF7FEFF 		bl	printNotif
 296:notoriOS.c    ****     
 297:notoriOS.c    ****     // Test level sensor
 298:notoriOS.c    ****     test_t t_level_sensor = level_sensor_test();  
 740              		.loc 1 298 0
 741 0010 07F21463 		addw	r3, r7, #1556
 742 0014 1846     		mov	r0, r3
 743 0016 FFF7FEFF 		bl	level_sensor_test
 299:notoriOS.c    ****     printTestStatus(t_level_sensor);
 744              		.loc 1 299 0
 745 001a 07F21464 		addw	r4, r7, #1556
 746 001e 6846     		mov	r0, sp
 747 0020 04F11003 		add	r3, r4, #16
 748 0024 40F27112 		movw	r2, #369
 749 0028 1946     		mov	r1, r3
 750 002a FFF7FEFF 		bl	memcpy
 751 002e 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 752 0032 FFF7FEFF 		bl	printTestStatus
 300:notoriOS.c    ****     
 301:notoriOS.c    ****     // Test voltages
 302:notoriOS.c    ****     test_t t_voltages = voltages_test();
 753              		.loc 1 302 0
 754 0036 07F59263 		add	r3, r7, #1168
 755 003a 1846     		mov	r0, r3
 756 003c FFF7FEFF 		bl	voltages_test
 303:notoriOS.c    ****     printTestStatus(t_voltages);
 757              		.loc 1 303 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 20


 758 0040 07F59264 		add	r4, r7, #1168
 759 0044 6846     		mov	r0, sp
 760 0046 04F11003 		add	r3, r4, #16
 761 004a 40F27112 		movw	r2, #369
 762 004e 1946     		mov	r1, r3
 763 0050 FFF7FEFF 		bl	memcpy
 764 0054 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 765 0058 FFF7FEFF 		bl	printTestStatus
 304:notoriOS.c    ****  
 305:notoriOS.c    ****     // Test voltages
 306:notoriOS.c    ****     test_t t_pressure = pressure_sensor_test();
 766              		.loc 1 306 0
 767 005c 07F54373 		add	r3, r7, #780
 768 0060 1846     		mov	r0, r3
 769 0062 FFF7FEFF 		bl	pressure_sensor_test
 307:notoriOS.c    ****     printTestStatus(t_pressure);
 770              		.loc 1 307 0
 771 0066 07F54374 		add	r4, r7, #780
 772 006a 6846     		mov	r0, sp
 773 006c 04F11003 		add	r3, r4, #16
 774 0070 40F27112 		movw	r2, #369
 775 0074 1946     		mov	r1, r3
 776 0076 FFF7FEFF 		bl	memcpy
 777 007a 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 778 007e FFF7FEFF 		bl	printTestStatus
 308:notoriOS.c    ****     
 309:notoriOS.c    ****     // Test SD card
 310:notoriOS.c    ****     test_t t_sd_card = SD_card_test();
 779              		.loc 1 310 0
 780 0082 07F5C473 		add	r3, r7, #392
 781 0086 1846     		mov	r0, r3
 782 0088 FFF7FEFF 		bl	SD_card_test
 311:notoriOS.c    ****     printTestStatus(t_sd_card);
 783              		.loc 1 311 0
 784 008c 07F5C474 		add	r4, r7, #392
 785 0090 6846     		mov	r0, sp
 786 0092 04F11003 		add	r3, r4, #16
 787 0096 40F27112 		movw	r2, #369
 788 009a 1946     		mov	r1, r3
 789 009c FFF7FEFF 		bl	memcpy
 790 00a0 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 791 00a4 FFF7FEFF 		bl	printTestStatus
 312:notoriOS.c    ****     
 313:notoriOS.c    ****     // Test modem
 314:notoriOS.c    ****     test_t t_modem = modem_test();
 792              		.loc 1 314 0
 793 00a8 3B1D     		adds	r3, r7, #4
 794 00aa 1846     		mov	r0, r3
 795 00ac FFF7FEFF 		bl	modem_test
 315:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"MEID=%s, SIMID=%s, DEVICEID=%s",modem_info.imei,modem_info.sim_i
 796              		.loc 1 315 0
 797 00b0 0F4B     		ldr	r3, .L30+4
 798 00b2 0093     		str	r3, [sp]
 799 00b4 0F4B     		ldr	r3, .L30+8
 800 00b6 104A     		ldr	r2, .L30+12
 801 00b8 1049     		ldr	r1, .L30+16
 802 00ba 0320     		movs	r0, #3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 21


 803 00bc FFF7FEFF 		bl	printNotif
 316:notoriOS.c    ****     printTestStatus(t_modem);
 804              		.loc 1 316 0
 805 00c0 3C1D     		adds	r4, r7, #4
 806 00c2 6846     		mov	r0, sp
 807 00c4 04F11003 		add	r3, r4, #16
 808 00c8 40F27112 		movw	r2, #369
 809 00cc 1946     		mov	r1, r3
 810 00ce FFF7FEFF 		bl	memcpy
 811 00d2 94E80F00 		ldmia	r4, {r0, r1, r2, r3}
 812 00d6 FFF7FEFF 		bl	printTestStatus
 317:notoriOS.c    ****     
 318:notoriOS.c    ****     printNotif(NOTIF_TYPE_STARTUP,"\n\n-------------END TESTS---------------\n\n");
 813              		.loc 1 318 0
 814 00da 0949     		ldr	r1, .L30+20
 815 00dc 0320     		movs	r0, #3
 816 00de FFF7FEFF 		bl	printNotif
 319:notoriOS.c    **** 
 320:notoriOS.c    **** }
 817              		.loc 1 320 0
 818 00e2 00BF     		nop
 819 00e4 07F29C77 		addw	r7, r7, #1948
 820              		.cfi_def_cfa_offset 12
 821 00e8 BD46     		mov	sp, r7
 822              		.cfi_def_cfa_register 13
 823              		@ sp needed
 824 00ea 90BD     		pop	{r4, r7, pc}
 825              	.L31:
 826              		.align	2
 827              	.L30:
 828 00ec 3C000000 		.word	.LC2
 829 00f0 04000000 		.word	system_info+4
 830 00f4 00000000 		.word	modem_info
 831 00f8 28000000 		.word	modem_info+40
 832 00fc 68000000 		.word	.LC3
 833 0100 88000000 		.word	.LC4
 834              		.cfi_endproc
 835              	.LFE72:
 836              		.size	ChickityCheckYourselfBeforeYouWreckYourself, .-ChickityCheckYourselfBeforeYouWreckYourself
 837              		.section	.text.main,"ax",%progbits
 838              		.align	2
 839              		.global	main
 840              		.thumb
 841              		.thumb_func
 842              		.type	main, %function
 843              	main:
 844              	.LFB73:
 321:notoriOS.c    **** 
 322:notoriOS.c    **** // ==============================================
 323:notoriOS.c    **** // Processes Core Tasks
 324:notoriOS.c    **** // ==============================================
 325:notoriOS.c    **** int main(void)
 326:notoriOS.c    **** {
 845              		.loc 1 326 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 22


 849 0000 80B5     		push	{r7, lr}
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 7, -8
 852              		.cfi_offset 14, -4
 853 0002 00AF     		add	r7, sp, #0
 854              		.cfi_def_cfa_register 7
 327:notoriOS.c    ****     CyGlobalIntEnable; /* Enable global interrupts. */
 855              		.loc 1 327 0
 856              		.syntax unified
 857              	@ 327 "notoriOS.c" 1
 858 0004 62B6     		CPSIE   i
 859              	@ 0 "" 2
 328:notoriOS.c    **** 
 329:notoriOS.c    ****     ReadyOrNot(); // Initialize 
 860              		.loc 1 329 0
 861              		.thumb
 862              		.syntax unified
 863 0006 FFF7FEFF 		bl	ReadyOrNot
 330:notoriOS.c    ****     
 331:notoriOS.c    ****     ChickityCheckYourselfBeforeYouWreckYourself(); // Run tests for all components on bootup
 864              		.loc 1 331 0
 865 000a FFF7FEFF 		bl	ChickityCheckYourselfBeforeYouWreckYourself
 866              	.L34:
 332:notoriOS.c    ****    
 333:notoriOS.c    ****     for(;;) // (;;) means an infinite loop
 334:notoriOS.c    ****     {
 335:notoriOS.c    ****         
 336:notoriOS.c    ****         if( ! WorkWorkWorkWorkWorkWork() ) // Complete the work
 867              		.loc 1 336 0
 868 000e FFF7FEFF 		bl	WorkWorkWorkWorkWorkWork
 869 0012 0346     		mov	r3, r0
 870 0014 002B     		cmp	r3, #0
 871 0016 FAD1     		bne	.L34
 337:notoriOS.c    ****         {
 338:notoriOS.c    ****            LayBack(); // Lay back (sleep) when there isn't work
 872              		.loc 1 338 0
 873 0018 FFF7FEFF 		bl	LayBack
 339:notoriOS.c    ****         }
 340:notoriOS.c    ****     }
 874              		.loc 1 340 0
 875 001c F7E7     		b	.L34
 876              		.cfi_endproc
 877              	.LFE73:
 878              		.size	main, .-main
 879 001e 00BF     		.section	.rodata
 880 00b2 0000     		.align	2
 881              	.LC5:
 882 00b4 4D6F6465 		.ascii	"Modem is ready.\000"
 882      6D206973 
 882      20726561 
 882      64792E00 
 883              		.align	2
 884              	.LC6:
 885 00c4 256400   		.ascii	"%d\000"
 886 00c7 00       		.align	2
 887              	.LC7:
 888 00c8 72737270 		.ascii	"rsrp\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 23


 888      00
 889 00cd 000000   		.align	2
 890              	.LC8:
 891 00d0 72736370 		.ascii	"rscp\000"
 891      00
 892 00d5 000000   		.align	2
 893              	.LC9:
 894 00d8 7472795F 		.ascii	"try_counter\000"
 894      636F756E 
 894      74657200 
 895              		.align	2
 896              	.LC10:
 897 00e4 64617461 		.ascii	"data_count_sent\000"
 897      5F636F75 
 897      6E745F73 
 897      656E7400 
 898              		.align	2
 899              	.LC11:
 900 00f4 64617461 		.ascii	"data_count_desired\000"
 900      5F636F75 
 900      6E745F64 
 900      65736972 
 900      656400
 901 0107 00       		.align	2
 902              	.LC12:
 903 0108 42656769 		.ascii	"Begin HTTP post.\000"
 903      6E204854 
 903      54502070 
 903      6F73742E 
 903      00
 904 0119 000000   		.align	2
 905              	.LC13:
 906 011c 62633465 		.ascii	"bc4e7b58fd10fb28025138a87db885caedadeb5d\000"
 906      37623538 
 906      66643130 
 906      66623238 
 906      30323531 
 907 0145 000000   		.align	2
 908              	.LC14:
 909 0148 6170692F 		.ascii	"api/v1/write\000"
 909      76312F77 
 909      72697465 
 909      00
 910 0155 000000   		.align	2
 911              	.LC15:
 912 0158 48545450 		.ascii	"HTTP route: %s\000"
 912      20726F75 
 912      74653A20 
 912      257300
 913 0167 00       		.align	2
 914              	.LC16:
 915 0168 312E3100 		.ascii	"1.1\000"
 916              		.align	2
 917              	.LC17:
 918 016c 00       		.ascii	"\000"
 919 016d 000000   		.align	2
 920              	.LC18:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 24


 921 0170 436C6F73 		.ascii	"Close\000"
 921      6500
 922 0176 0000     		.align	2
 923              	.LC19:
 924 0178 504F5354 		.ascii	"POST\000"
 924      00
 925 017d 000000   		.align	2
 926              	.LC20:
 927 0180 46756C6C 		.ascii	"Full HTTP Request: %s\000"
 927      20485454 
 927      50205265 
 927      71756573 
 927      743A2025 
 928 0196 0000     		.align	2
 929              	.LC21:
 930 0198 41542353 		.ascii	"AT#SD=1,0,%d,\"%s\",0,0,1\015\000"
 930      443D312C 
 930      302C2564 
 930      2C222573 
 930      222C302C 
 931 01b1 000000   		.align	2
 932              	.LC22:
 933 01b4 257300   		.ascii	"%s\000"
 934 01b7 00       		.align	2
 935              	.LC23:
 936 01b8 4F4B00   		.ascii	"OK\000"
 937              		.global	__aeabi_ui2d
 938              		.global	__aeabi_d2iz
 939 01bb 00       		.align	2
 940              	.LC24:
 941 01bc 68747470 		.ascii	"http_request len: %d\000"
 941      5F726571 
 941      75657374 
 941      206C656E 
 941      3A202564 
 942 01d1 000000   		.align	2
 943              	.LC25:
 944 01d4 23206F66 		.ascii	"# of packets: %d\000"
 944      20706163 
 944      6B657473 
 944      3A202564 
 944      00
 945 01e5 000000   		.align	2
 946              	.LC26:
 947 01e8 3E00     		.ascii	">\000"
 948 01ea 0000     		.align	2
 949              	.LC27:
 950 01ec 41542353 		.ascii	"AT#SSEND=1\015\012\000"
 950      53454E44 
 950      3D310D0A 
 950      00
 951 01f9 000000   		.align	2
 952              	.LC28:
 953 01fc 1A00     		.ascii	"\032\000"
 954 01fe 0000     		.align	2
 955              	.LC29:
 956 0200 6368756E 		.ascii	"chunk %d: %s\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 25


 956      6B202564 
 956      3A202573 
 956      00
 957 020d 000000   		.align	2
 958              	.LC30:
 959 0210 5352494E 		.ascii	"SRING\000"
 959      4700
 960 0216 0000     		.align	2
 961              	.LC31:
 962 0218 4F532D4F 		.ascii	"OS-OK\000"
 962      4B00
 963 021e 0000     		.align	2
 964              	.LC32:
 965 0220 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 965      52454356 
 965      3D312C31 
 965      3030300D 
 965      00
 966 0231 000000   		.align	2
 967              	.LC33:
 968 0234 6D6F6465 		.ascii	"modem_tx_time\000"
 968      6D5F7478 
 968      5F74696D 
 968      6500
 969 0242 0000     		.align	2
 970              	.LC34:
 971 0244 4F532D4E 		.ascii	"OS-NO: Could not receive data from server.\000"
 971      4F3A2043 
 971      6F756C64 
 971      206E6F74 
 971      20726563 
 972              		.section	.text.syncData,"ax",%progbits
 973              		.align	2
 974              		.global	syncData
 975              		.thumb
 976              		.thumb_func
 977              		.type	syncData, %function
 978              	syncData:
 979              	.LFB74:
 341:notoriOS.c    **** }
 342:notoriOS.c    **** 
 343:notoriOS.c    **** // ==============================================
 344:notoriOS.c    **** // Syncs data with server
 345:notoriOS.c    **** // Returns 0 when done
 346:notoriOS.c    **** // ==============================================
 347:notoriOS.c    **** uint8 syncData(){
 980              		.loc 1 347 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 1360
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984 0000 90B5     		push	{r4, r7, lr}
 985              		.cfi_def_cfa_offset 12
 986              		.cfi_offset 4, -12
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 ADF26C5D 		subw	sp, sp, #1388
 990              		.cfi_def_cfa_offset 1400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 26


 991 0006 06AF     		add	r7, sp, #24
 992              		.cfi_def_cfa 7, 1376
 348:notoriOS.c    ****     
 349:notoriOS.c    ****     /*
 350:notoriOS.c    ****     //at_write_command("AT#SCFG?\r","OK",1000);
 351:notoriOS.c    ****     uint8 check = 0;
 352:notoriOS.c    ****     //"AT#SD=,0,80,\”www.google.com\”,0,0,0\r"
 353:notoriOS.c    ****     check = at_write_command("AT#SD=1,0,8086,\"data.open-storm.org\",0,0,1\r","OK",10000u);
 354:notoriOS.c    ****     check = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 355:notoriOS.c    ****     check = at_write_command("POST /write?db=ARB&u=generic_node&p=MakeFloodsCurrents HTTP/1.1\r\nHo
 356:notoriOS.c    ****     */
 357:notoriOS.c    **** 
 358:notoriOS.c    ****     // Blink LED so we know it's about to sync data
 359:notoriOS.c    ****     LED_Write(1u);
 993              		.loc 1 359 0
 994 0008 0120     		movs	r0, #1
 995 000a FFF7FEFF 		bl	LED_Write
 360:notoriOS.c    ****     CyDelay(100u);
 996              		.loc 1 360 0
 997 000e 6420     		movs	r0, #100
 998 0010 FFF7FEFF 		bl	CyDelay
 361:notoriOS.c    ****     LED_Write(0u);
 999              		.loc 1 361 0
 1000 0014 0020     		movs	r0, #0
 1001 0016 FFF7FEFF 		bl	LED_Write
 362:notoriOS.c    **** 
 363:notoriOS.c    ****     
 364:notoriOS.c    ****     // If there's no data, not need to do anything
 365:notoriOS.c    ****     if(sizeOfDataStack() == 0){        
 1002              		.loc 1 365 0
 1003 001a FFF7FEFF 		bl	sizeOfDataStack
 1004 001e 0346     		mov	r3, r0
 1005 0020 002B     		cmp	r3, #0
 1006 0022 01D1     		bne	.L36
 366:notoriOS.c    ****         return 0u;
 1007              		.loc 1 366 0
 1008 0024 0023     		movs	r3, #0
 1009 0026 03E2     		b	.L37
 1010              	.L36:
 367:notoriOS.c    ****         }
 368:notoriOS.c    ****     
 369:notoriOS.c    ****     // Create request body, in this case influx
 370:notoriOS.c    ****     // Place body into HTTP request header
 371:notoriOS.c    ****     // Fire up modem and get it out
 372:notoriOS.c    ****      
 373:notoriOS.c    ****     
 374:notoriOS.c    ****     // Try up to 2 times to connect to the modem
 375:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1011              		.loc 1 375 0
 1012 0028 FFF7FEFF 		bl	modem_get_state
 1013 002c 0346     		mov	r3, r0
 1014 002e 002B     		cmp	r3, #0
 1015 0030 11D1     		bne	.L38
 376:notoriOS.c    **** 
 377:notoriOS.c    ****         try_counter++;
 1016              		.loc 1 377 0
 1017 0032 AE4B     		ldr	r3, .L50
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 27


 1018 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 0036 0133     		adds	r3, r3, #1
 1020 0038 DAB2     		uxtb	r2, r3
 1021 003a AC4B     		ldr	r3, .L50
 1022 003c 1A70     		strb	r2, [r3]
 378:notoriOS.c    ****         	
 379:notoriOS.c    ****         if(try_counter <= 2){
 1023              		.loc 1 379 0
 1024 003e AB4B     		ldr	r3, .L50
 1025 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1026 0042 022B     		cmp	r3, #2
 1027 0044 02D8     		bhi	.L39
 380:notoriOS.c    ****             modem_power_up();
 1028              		.loc 1 380 0
 1029 0046 FFF7FEFF 		bl	modem_power_up
 1030 004a F0E1     		b	.L40
 1031              	.L39:
 381:notoriOS.c    ****         }else{
 382:notoriOS.c    ****             try_counter = 0;
 1032              		.loc 1 382 0
 1033 004c A74B     		ldr	r3, .L50
 1034 004e 0022     		movs	r2, #0
 1035 0050 1A70     		strb	r2, [r3]
 383:notoriOS.c    ****             return 0u;
 1036              		.loc 1 383 0
 1037 0052 0023     		movs	r3, #0
 1038 0054 ECE1     		b	.L37
 1039              	.L38:
 384:notoriOS.c    ****             }
 385:notoriOS.c    ****             
 386:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1040              		.loc 1 386 0
 1041 0056 FFF7FEFF 		bl	modem_get_state
 1042 005a 0346     		mov	r3, r0
 1043 005c 042B     		cmp	r3, #4
 1044 005e 40F0E681 		bne	.L40
 1045              	.LBB2:
 387:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Modem is ready.");
 1046              		.loc 1 387 0
 1047 0062 A349     		ldr	r1, .L50+4
 1048 0064 0020     		movs	r0, #0
 1049 0066 FFF7FEFF 		bl	printNotif
 388:notoriOS.c    ****         
 389:notoriOS.c    ****         http_request[0] = '\0';
 1050              		.loc 1 389 0
 1051 006a A24B     		ldr	r3, .L50+8
 1052 006c 0022     		movs	r2, #0
 1053 006e 1A70     		strb	r2, [r3]
 390:notoriOS.c    ****         http_body[0] = '\0';
 1054              		.loc 1 390 0
 1055 0070 A14B     		ldr	r3, .L50+12
 1056 0072 0022     		movs	r2, #0
 1057 0074 1A70     		strb	r2, [r3]
 391:notoriOS.c    ****         http_route[0] = '\0';
 1058              		.loc 1 391 0
 1059 0076 A14B     		ldr	r3, .L50+16
 1060 0078 0022     		movs	r2, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 28


 1061 007a 1A70     		strb	r2, [r3]
 392:notoriOS.c    ****         //char *base = "write";
 393:notoriOS.c    ****         
 394:notoriOS.c    ****         // Push cell strength data (RSRP: reference signal received power and RSCP: received signal
 395:notoriOS.c    ****         char s_rsrp[DATA_MAX_KEY_LENGTH];
 396:notoriOS.c    ****         snprintf(s_rsrp,sizeof(s_rsrp),"%d",modem_stats.rsrp);
 1062              		.loc 1 396 0
 1063 007c A04B     		ldr	r3, .L50+20
 1064 007e 5B69     		ldr	r3, [r3, #20]
 1065 0080 07F5A560 		add	r0, r7, #1320
 1066 0084 9F4A     		ldr	r2, .L50+24
 1067 0086 1421     		movs	r1, #20
 1068 0088 FFF7FEFF 		bl	snprintf
 397:notoriOS.c    ****         pushData("rsrp", s_rsrp, getTimeStamp());
 1069              		.loc 1 397 0
 1070 008c FFF7FEFF 		bl	getTimeStamp
 1071 0090 0246     		mov	r2, r0
 1072 0092 07F5A563 		add	r3, r7, #1320
 1073 0096 1946     		mov	r1, r3
 1074 0098 9B48     		ldr	r0, .L50+28
 1075 009a FFF7FEFF 		bl	pushData
 398:notoriOS.c    ****         
 399:notoriOS.c    ****         char s_rscp[DATA_MAX_KEY_LENGTH];
 400:notoriOS.c    ****         snprintf(s_rscp,sizeof(s_rscp),"%d",modem_stats.rscp);
 1076              		.loc 1 400 0
 1077 009e 984B     		ldr	r3, .L50+20
 1078 00a0 9B68     		ldr	r3, [r3, #8]
 1079 00a2 07F21450 		addw	r0, r7, #1300
 1080 00a6 974A     		ldr	r2, .L50+24
 1081 00a8 1421     		movs	r1, #20
 1082 00aa FFF7FEFF 		bl	snprintf
 401:notoriOS.c    ****         pushData("rscp", s_rscp, getTimeStamp());
 1083              		.loc 1 401 0
 1084 00ae FFF7FEFF 		bl	getTimeStamp
 1085 00b2 0246     		mov	r2, r0
 1086 00b4 07F21453 		addw	r3, r7, #1300
 1087 00b8 1946     		mov	r1, r3
 1088 00ba 9448     		ldr	r0, .L50+32
 1089 00bc FFF7FEFF 		bl	pushData
 402:notoriOS.c    ****         
 403:notoriOS.c    ****         // Push syncData try_counter to know how many tries it tried to connect
 404:notoriOS.c    ****         char c_try_counter[20];
 405:notoriOS.c    ****         snprintf(c_try_counter,sizeof(c_try_counter),"%d",try_counter);
 1090              		.loc 1 405 0
 1091 00c0 8A4B     		ldr	r3, .L50
 1092 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1093 00c4 07F5A060 		add	r0, r7, #1280
 1094 00c8 8E4A     		ldr	r2, .L50+24
 1095 00ca 1421     		movs	r1, #20
 1096 00cc FFF7FEFF 		bl	snprintf
 406:notoriOS.c    ****         pushData("try_counter",c_try_counter,getTimeStamp());
 1097              		.loc 1 406 0
 1098 00d0 FFF7FEFF 		bl	getTimeStamp
 1099 00d4 0246     		mov	r2, r0
 1100 00d6 07F5A063 		add	r3, r7, #1280
 1101 00da 1946     		mov	r1, r3
 1102 00dc 8C48     		ldr	r0, .L50+36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 29


 1103 00de FFF7FEFF 		bl	pushData
 407:notoriOS.c    ****         
 408:notoriOS.c    ****         // Get size of the actual data stack count and push it to the stack
 409:notoriOS.c    ****         // If the buffer didn't overflow, then the data_count_sent is dataPointsInStack
 410:notoriOS.c    ****         // Otherwise, if the buffer overflows, then the data_count_sent is DATA_MAX_COUNT
 411:notoriOS.c    ****         if(buffer_overflow == false){
 1104              		.loc 1 411 0
 1105 00e2 8C4B     		ldr	r3, .L50+40
 1106 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1107 00e6 83F00103 		eor	r3, r3, #1
 1108 00ea DBB2     		uxtb	r3, r3
 1109 00ec 002B     		cmp	r3, #0
 1110 00ee 16D0     		beq	.L41
 1111              	.LBB3:
 412:notoriOS.c    ****             uint16 data_count_sent = sizeOfDataStack();
 1112              		.loc 1 412 0
 1113 00f0 FFF7FEFF 		bl	sizeOfDataStack
 1114 00f4 0346     		mov	r3, r0
 1115 00f6 A7F84835 		strh	r3, [r7, #1352]	@ movhi
 413:notoriOS.c    ****             char c_data_count_sent[20];
 414:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",data_count_sent);
 1116              		.loc 1 414 0
 1117 00fa B7F84835 		ldrh	r3, [r7, #1352]
 1118 00fe 07F59B60 		add	r0, r7, #1240
 1119 0102 804A     		ldr	r2, .L50+24
 1120 0104 1421     		movs	r1, #20
 1121 0106 FFF7FEFF 		bl	snprintf
 415:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1122              		.loc 1 415 0
 1123 010a FFF7FEFF 		bl	getTimeStamp
 1124 010e 0246     		mov	r2, r0
 1125 0110 07F59B63 		add	r3, r7, #1240
 1126 0114 1946     		mov	r1, r3
 1127 0116 8048     		ldr	r0, .L50+44
 1128 0118 FFF7FEFF 		bl	pushData
 1129              	.LBE3:
 1130 011c 0FE0     		b	.L42
 1131              	.L41:
 1132              	.LBB4:
 416:notoriOS.c    ****         }else{
 417:notoriOS.c    ****             char c_data_count_sent[20];
 418:notoriOS.c    ****             snprintf(c_data_count_sent,sizeof(c_data_count_sent),"%d",DATA_MAX_VALUES);
 1133              		.loc 1 418 0
 1134 011e 07F2C440 		addw	r0, r7, #1220
 1135 0122 9623     		movs	r3, #150
 1136 0124 774A     		ldr	r2, .L50+24
 1137 0126 1421     		movs	r1, #20
 1138 0128 FFF7FEFF 		bl	snprintf
 419:notoriOS.c    ****             pushData("data_count_sent",c_data_count_sent,getTimeStamp());
 1139              		.loc 1 419 0
 1140 012c FFF7FEFF 		bl	getTimeStamp
 1141 0130 0246     		mov	r2, r0
 1142 0132 07F2C443 		addw	r3, r7, #1220
 1143 0136 1946     		mov	r1, r3
 1144 0138 7748     		ldr	r0, .L50+44
 1145 013a FFF7FEFF 		bl	pushData
 1146              	.L42:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 30


 1147              	.LBE4:
 420:notoriOS.c    ****         }
 421:notoriOS.c    ****         
 422:notoriOS.c    ****         // Get size of the desired data stack count and push it to the stack
 423:notoriOS.c    ****         uint16 data_count_desired = sizeOfDataStackDesired();
 1148              		.loc 1 423 0
 1149 013e FFF7FEFF 		bl	sizeOfDataStackDesired
 1150 0142 0346     		mov	r3, r0
 1151 0144 A7F84635 		strh	r3, [r7, #1350]	@ movhi
 424:notoriOS.c    ****         char c_data_count_desired[20];
 425:notoriOS.c    ****         // subtract 1 to disclude data_count_sent so that it focuses only on the actual data
 426:notoriOS.c    ****         snprintf(c_data_count_desired,sizeof(c_data_count_desired),"%d", data_count_desired-1);
 1152              		.loc 1 426 0
 1153 0148 B7F84635 		ldrh	r3, [r7, #1350]
 1154 014c 013B     		subs	r3, r3, #1
 1155 014e 07F2EC40 		addw	r0, r7, #1260
 1156 0152 6C4A     		ldr	r2, .L50+24
 1157 0154 1421     		movs	r1, #20
 1158 0156 FFF7FEFF 		bl	snprintf
 427:notoriOS.c    ****         pushData("data_count_desired",c_data_count_desired,getTimeStamp());
 1159              		.loc 1 427 0
 1160 015a FFF7FEFF 		bl	getTimeStamp
 1161 015e 0246     		mov	r2, r0
 1162 0160 07F2EC43 		addw	r3, r7, #1260
 1163 0164 1946     		mov	r1, r3
 1164 0166 6D48     		ldr	r0, .L50+48
 1165 0168 FFF7FEFF 		bl	pushData
 428:notoriOS.c    ****         
 429:notoriOS.c    ****         // Construct HTPP request
 430:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Begin HTTP post.");
 1166              		.loc 1 430 0
 1167 016c 6C49     		ldr	r1, .L50+52
 1168 016e 0020     		movs	r0, #0
 1169 0170 FFF7FEFF 		bl	printNotif
 431:notoriOS.c    ****         
 432:notoriOS.c    ****         // Old influx API
 433:notoriOS.c    ****         // Construct_influx_route(http_route,base,system_settings.ep_user,system_settings.ep_pswd,s
 434:notoriOS.c    ****         construct_malcom_route(http_route,"api/v1/write",modem_info.imei,CURRENT_COMMIT);
 1170              		.loc 1 434 0
 1171 0174 6B4B     		ldr	r3, .L50+56
 1172 0176 6C4A     		ldr	r2, .L50+60
 1173 0178 6C49     		ldr	r1, .L50+64
 1174 017a 6048     		ldr	r0, .L50+16
 1175 017c FFF7FEFF 		bl	construct_malcom_route
 435:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"HTTP route: %s", http_route);
 1176              		.loc 1 435 0
 1177 0180 5E4A     		ldr	r2, .L50+16
 1178 0182 6B49     		ldr	r1, .L50+68
 1179 0184 0020     		movs	r0, #0
 1180 0186 FFF7FEFF 		bl	printNotif
 436:notoriOS.c    ****         
 437:notoriOS.c    ****         //OLD INFLUX API
 438:notoriOS.c    ****         //construct_influx_write_body(http_body,system_settings.node_id);
 439:notoriOS.c    ****         construct_malcom_body(http_body);
 1181              		.loc 1 439 0
 1182 018a 5B48     		ldr	r0, .L50+12
 1183 018c FFF7FEFF 		bl	construct_malcom_body
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 31


 440:notoriOS.c    ****         construct_generic_HTTP_request(http_request,http_body,system_settings.ep_host,http_route,sy
 1184              		.loc 1 440 0
 1185 0190 684B     		ldr	r3, .L50+72
 1186 0192 5B6E     		ldr	r3, [r3, #100]
 1187 0194 684A     		ldr	r2, .L50+76
 1188 0196 0592     		str	r2, [sp, #20]
 1189 0198 0022     		movs	r2, #0
 1190 019a 0492     		str	r2, [sp, #16]
 1191 019c 674A     		ldr	r2, .L50+80
 1192 019e 0392     		str	r2, [sp, #12]
 1193 01a0 674A     		ldr	r2, .L50+84
 1194 01a2 0292     		str	r2, [sp, #8]
 1195 01a4 674A     		ldr	r2, .L50+88
 1196 01a6 0192     		str	r2, [sp, #4]
 1197 01a8 0093     		str	r3, [sp]
 1198 01aa 544B     		ldr	r3, .L50+16
 1199 01ac 614A     		ldr	r2, .L50+72
 1200 01ae 5249     		ldr	r1, .L50+12
 1201 01b0 5048     		ldr	r0, .L50+8
 1202 01b2 FFF7FEFF 		bl	construct_generic_HTTP_request
 441:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 1203              		.loc 1 441 0
 1204 01b6 4F4A     		ldr	r2, .L50+8
 1205 01b8 6349     		ldr	r1, .L50+92
 1206 01ba 0020     		movs	r0, #0
 1207 01bc FFF7FEFF 		bl	printNotif
 442:notoriOS.c    ****         
 443:notoriOS.c    ****         // Push request to modem and escape with <ctrl+z> escape sequence
 444:notoriOS.c    ****         // Open port and begin command line sequence
 445:notoriOS.c    ****         char portConfig[200];
 446:notoriOS.c    ****         uint8 status = 0u;
 1208              		.loc 1 446 0
 1209 01c0 0023     		movs	r3, #0
 1210 01c2 87F84535 		strb	r3, [r7, #1349]
 447:notoriOS.c    ****         
 448:notoriOS.c    ****         snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",system_settings.ep_por
 1211              		.loc 1 448 0
 1212 01c6 5B4B     		ldr	r3, .L50+72
 1213 01c8 5A6E     		ldr	r2, [r3, #100]
 1214 01ca 381D     		adds	r0, r7, #4
 1215 01cc 594B     		ldr	r3, .L50+72
 1216 01ce 0093     		str	r3, [sp]
 1217 01d0 1346     		mov	r3, r2
 1218 01d2 5E4A     		ldr	r2, .L50+96
 1219 01d4 C821     		movs	r1, #200
 1220 01d6 FFF7FEFF 		bl	snprintf
 449:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 1221              		.loc 1 449 0
 1222 01da 3B1D     		adds	r3, r7, #4
 1223 01dc 1A46     		mov	r2, r3
 1224 01de 5C49     		ldr	r1, .L50+100
 1225 01e0 0020     		movs	r0, #0
 1226 01e2 FFF7FEFF 		bl	printNotif
 450:notoriOS.c    ****         status = at_write_command(portConfig,"OK",10000u);
 1227              		.loc 1 450 0
 1228 01e6 3B1D     		adds	r3, r7, #4
 1229 01e8 42F21072 		movw	r2, #10000
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 32


 1230 01ec 5949     		ldr	r1, .L50+104
 1231 01ee 1846     		mov	r0, r3
 1232 01f0 FFF7FEFF 		bl	at_write_command
 1233 01f4 0346     		mov	r3, r0
 1234 01f6 87F84535 		strb	r3, [r7, #1349]
 451:notoriOS.c    ****         
 452:notoriOS.c    ****         // create character pointer to chunk through the http_request
 453:notoriOS.c    ****         char *chunk;
 454:notoriOS.c    ****         // Set chunk to start where http_request starts
 455:notoriOS.c    ****         chunk = http_request;
 1235              		.loc 1 455 0
 1236 01fa 3E4B     		ldr	r3, .L50+8
 1237 01fc C7F84C35 		str	r3, [r7, #1356]
 456:notoriOS.c    ****         // variable for the number of packets to send
 457:notoriOS.c    ****         int8 packets;
 458:notoriOS.c    ****         packets = ceil(nextafter((strlen(http_request)/MAX_BYTES_SENT),MAX_BYTES_SENT));
 1238              		.loc 1 458 0
 1239 0200 3C48     		ldr	r0, .L50+8
 1240 0202 FFF7FEFF 		bl	strlen
 1241 0206 0246     		mov	r2, r0
 1242 0208 534B     		ldr	r3, .L50+108
 1243 020a A3FB0223 		umull	r2, r3, r3, r2
 1244 020e 5B09     		lsrs	r3, r3, #5
 1245 0210 1846     		mov	r0, r3
 1246 0212 FFF7FEFF 		bl	__aeabi_ui2d
 1247 0216 4FF00002 		mov	r2, #0
 1248 021a 504B     		ldr	r3, .L50+112
 1249 021c FFF7FEFF 		bl	nextafter
 1250 0220 0346     		mov	r3, r0
 1251 0222 0C46     		mov	r4, r1
 1252 0224 1846     		mov	r0, r3
 1253 0226 2146     		mov	r1, r4
 1254 0228 FFF7FEFF 		bl	ceil
 1255 022c 0346     		mov	r3, r0
 1256 022e 0C46     		mov	r4, r1
 1257 0230 1846     		mov	r0, r3
 1258 0232 2146     		mov	r1, r4
 1259 0234 FFF7FEFF 		bl	__aeabi_d2iz
 1260 0238 0346     		mov	r3, r0
 1261 023a 87F84435 		strb	r3, [r7, #1348]
 459:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "http_request len: %d", strlen(http_request));
 1262              		.loc 1 459 0
 1263 023e 2D48     		ldr	r0, .L50+8
 1264 0240 FFF7FEFF 		bl	strlen
 1265 0244 0346     		mov	r3, r0
 1266 0246 1A46     		mov	r2, r3
 1267 0248 4549     		ldr	r1, .L50+116
 1268 024a 0020     		movs	r0, #0
 1269 024c FFF7FEFF 		bl	printNotif
 460:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT, "# of packets: %d", packets);
 1270              		.loc 1 460 0
 1271 0250 97F94435 		ldrsb	r3, [r7, #1348]
 1272 0254 1A46     		mov	r2, r3
 1273 0256 4349     		ldr	r1, .L50+120
 1274 0258 0020     		movs	r0, #0
 1275 025a FFF7FEFF 		bl	printNotif
 1276              	.LBB5:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 33


 461:notoriOS.c    ****         // while the size of the chunk of the data we are sending to the server is smaller than the
 462:notoriOS.c    ****         for(int8 packet = 0; packet < packets; packet++){
 1277              		.loc 1 462 0
 1278 025e 0023     		movs	r3, #0
 1279 0260 87F84B35 		strb	r3, [r7, #1355]
 1280 0264 9AE0     		b	.L43
 1281              	.L46:
 1282              	.LBB6:
 463:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 464:notoriOS.c    ****             char http_chunk[1001];
 465:notoriOS.c    ****             // AT command #SSEND= is an execution command that permits, while the module is in comm
 466:notoriOS.c    ****             // To complete the operation, send Ctrl-Z char to exit
 467:notoriOS.c    ****             status = at_write_command("AT#SSEND=1\r\n", ">", 1000u);
 1283              		.loc 1 467 0
 1284 0266 4FF47A72 		mov	r2, #1000
 1285 026a 3F49     		ldr	r1, .L50+124
 1286 026c 3F48     		ldr	r0, .L50+128
 1287 026e FFF7FEFF 		bl	at_write_command
 1288 0272 0346     		mov	r3, r0
 1289 0274 87F84535 		strb	r3, [r7, #1349]
 468:notoriOS.c    ****             // Print the first 1000 characters of http_request into http_chunk
 469:notoriOS.c    ****             snprintf(http_chunk, MAX_BYTES_SENT, "%s",chunk);
 1290              		.loc 1 469 0
 1291 0278 07F1CC00 		add	r0, r7, #204
 1292 027c D7F84C35 		ldr	r3, [r7, #1356]
 1293 0280 334A     		ldr	r2, .L50+100
 1294 0282 4FF4FA71 		mov	r1, #500
 1295 0286 FFF7FEFF 		bl	snprintf
 470:notoriOS.c    ****             // Append 1 character "<ctrl+z> escape sequence" to http_request to exit modem command 
 471:notoriOS.c    ****             strncat(http_chunk, "\032", 1); 
 1296              		.loc 1 471 0
 1297 028a 07F1CC03 		add	r3, r7, #204
 1298 028e 1846     		mov	r0, r3
 1299 0290 FFF7FEFF 		bl	strlen
 1300 0294 0346     		mov	r3, r0
 1301 0296 1A46     		mov	r2, r3
 1302 0298 07F1CC03 		add	r3, r7, #204
 1303 029c 1344     		add	r3, r3, r2
 1304 029e 3449     		ldr	r1, .L50+132
 1305 02a0 1A46     		mov	r2, r3
 1306 02a2 0B46     		mov	r3, r1
 1307 02a4 1B88     		ldrh	r3, [r3]	@ unaligned
 1308 02a6 1380     		strh	r3, [r2]	@ unaligned
 472:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"chunk %d: %s", packet, http_chunk);
 1309              		.loc 1 472 0
 1310 02a8 97F94B25 		ldrsb	r2, [r7, #1355]
 1311 02ac 07F1CC03 		add	r3, r7, #204
 1312 02b0 3049     		ldr	r1, .L50+136
 1313 02b2 0020     		movs	r0, #0
 1314 02b4 FFF7FEFF 		bl	printNotif
 473:notoriOS.c    ****             // Send data to server
 474:notoriOS.c    ****             if ((packet+1) != packets){
 1315              		.loc 1 474 0
 1316 02b8 97F94B35 		ldrsb	r3, [r7, #1355]
 1317 02bc 5A1C     		adds	r2, r3, #1
 1318 02be 97F94435 		ldrsb	r3, [r7, #1348]
 1319 02c2 9A42     		cmp	r2, r3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 34


 1320 02c4 58D0     		beq	.L44
 475:notoriOS.c    ****                 status = at_write_command(http_chunk, "OK", 5000u);
 1321              		.loc 1 475 0
 1322 02c6 07F1CC03 		add	r3, r7, #204
 1323 02ca 41F28832 		movw	r2, #5000
 1324 02ce 2149     		ldr	r1, .L50+104
 1325 02d0 1846     		mov	r0, r3
 1326 02d2 FFF7FEFF 		bl	at_write_command
 1327 02d6 0346     		mov	r3, r0
 1328 02d8 87F84535 		strb	r3, [r7, #1349]
 476:notoriOS.c    ****                 // Move the pointer forward 
 477:notoriOS.c    ****                 chunk = chunk + MAX_BYTES_SENT - 1;
 1329              		.loc 1 477 0
 1330 02dc D7F84C35 		ldr	r3, [r7, #1356]
 1331 02e0 03F2F313 		addw	r3, r3, #499
 1332 02e4 C7F84C35 		str	r3, [r7, #1356]
 1333 02e8 51E0     		b	.L45
 1334              	.L51:
 1335 02ea 00BF     		.align	2
 1336              	.L50:
 1337 02ec 00000000 		.word	try_counter
 1338 02f0 B4000000 		.word	.LC5
 1339 02f4 00000000 		.word	http_request
 1340 02f8 00000000 		.word	http_body
 1341 02fc 00000000 		.word	http_route
 1342 0300 00000000 		.word	modem_stats
 1343 0304 C4000000 		.word	.LC6
 1344 0308 C8000000 		.word	.LC7
 1345 030c D0000000 		.word	.LC8
 1346 0310 D8000000 		.word	.LC9
 1347 0314 00000000 		.word	buffer_overflow
 1348 0318 E4000000 		.word	.LC10
 1349 031c F4000000 		.word	.LC11
 1350 0320 08010000 		.word	.LC12
 1351 0324 1C010000 		.word	.LC13
 1352 0328 28000000 		.word	modem_info+40
 1353 032c 48010000 		.word	.LC14
 1354 0330 58010000 		.word	.LC15
 1355 0334 00000000 		.word	system_settings
 1356 0338 68010000 		.word	.LC16
 1357 033c 6C010000 		.word	.LC17
 1358 0340 70010000 		.word	.LC18
 1359 0344 78010000 		.word	.LC19
 1360 0348 80010000 		.word	.LC20
 1361 034c 98010000 		.word	.LC21
 1362 0350 B4010000 		.word	.LC22
 1363 0354 B8010000 		.word	.LC23
 1364 0358 D34D6210 		.word	274877907
 1365 035c 00407F40 		.word	1082081280
 1366 0360 BC010000 		.word	.LC24
 1367 0364 D4010000 		.word	.LC25
 1368 0368 E8010000 		.word	.LC26
 1369 036c EC010000 		.word	.LC27
 1370 0370 FC010000 		.word	.LC28
 1371 0374 00020000 		.word	.LC29
 1372              	.L44:
 478:notoriOS.c    ****             }else{
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 35


 479:notoriOS.c    ****                 status = at_write_command(http_chunk, "SRING", 5000u);
 1373              		.loc 1 479 0
 1374 0378 07F1CC03 		add	r3, r7, #204
 1375 037c 41F28832 		movw	r2, #5000
 1376 0380 2E49     		ldr	r1, .L52
 1377 0382 1846     		mov	r0, r3
 1378 0384 FFF7FEFF 		bl	at_write_command
 1379 0388 0346     		mov	r3, r0
 1380 038a 87F84535 		strb	r3, [r7, #1349]
 1381              	.L45:
 1382              	.LBE6:
 462:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1383              		.loc 1 462 0 discriminator 2
 1384 038e 97F94B35 		ldrsb	r3, [r7, #1355]
 1385 0392 DBB2     		uxtb	r3, r3
 1386 0394 0133     		adds	r3, r3, #1
 1387 0396 DBB2     		uxtb	r3, r3
 1388 0398 87F84B35 		strb	r3, [r7, #1355]
 1389              	.L43:
 462:notoriOS.c    ****             // Create character array of 1000 characters for sending chunks of the http_request
 1390              		.loc 1 462 0 is_stmt 0 discriminator 1
 1391 039c 97F94B25 		ldrsb	r2, [r7, #1355]
 1392 03a0 97F94435 		ldrsb	r3, [r7, #1348]
 1393 03a4 9A42     		cmp	r2, r3
 1394 03a6 FFF65EAF 		blt	.L46
 1395              	.LBE5:
 480:notoriOS.c    ****             }
 481:notoriOS.c    ****             
 482:notoriOS.c    ****         }
 483:notoriOS.c    ****         
 484:notoriOS.c    ****         // Read received buffer
 485:notoriOS.c    ****         // A good write will return code "OS-OK"
 486:notoriOS.c    ****         // AT command #SRECV= is an execution command that permits users to read data arrived throu
 487:notoriOS.c    ****         // = 1 means the UPD information is enabled: data are read just until the end of the UDP da
 488:notoriOS.c    ****         status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 1396              		.loc 1 488 0 is_stmt 1
 1397 03aa 41F28832 		movw	r2, #5000
 1398 03ae 2449     		ldr	r1, .L52+4
 1399 03b0 2448     		ldr	r0, .L52+8
 1400 03b2 FFF7FEFF 		bl	at_write_command
 1401 03b6 0346     		mov	r3, r0
 1402 03b8 87F84535 		strb	r3, [r7, #1349]
 489:notoriOS.c    ****         //printNotif(NOTIF_TYPE_EVENT,"Received SRECV: %s",uart_received_string);
 490:notoriOS.c    ****     
 491:notoriOS.c    ****   
 492:notoriOS.c    ****         // If it worked, clear the queue and clock how long the end-to-end tx took
 493:notoriOS.c    ****         if(status == 1u){
 1403              		.loc 1 493 0
 1404 03bc 97F84535 		ldrb	r3, [r7, #1349]	@ zero_extendqisi2
 1405 03c0 012B     		cmp	r3, #1
 1406 03c2 1DD1     		bne	.L47
 1407              	.LBB7:
 494:notoriOS.c    ****             get_updated_parameters_from_malcom();
 1408              		.loc 1 494 0
 1409 03c4 FFF7FEFF 		bl	get_updated_parameters_from_malcom
 495:notoriOS.c    ****             Clear_Data_Stack();
 1410              		.loc 1 495 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 36


 1411 03c8 FFF7FEFF 		bl	Clear_Data_Stack
 496:notoriOS.c    ****             int send_time = (int)(getTimeStamp()-(int32)modem_start_time_stamp);
 1412              		.loc 1 496 0
 1413 03cc FFF7FEFF 		bl	getTimeStamp
 1414 03d0 0246     		mov	r2, r0
 1415 03d2 1D4B     		ldr	r3, .L52+12
 1416 03d4 1B68     		ldr	r3, [r3]
 1417 03d6 D31A     		subs	r3, r2, r3
 1418 03d8 C7F84035 		str	r3, [r7, #1344]
 497:notoriOS.c    ****             char s_send_time[10];
 498:notoriOS.c    ****             snprintf(s_send_time,sizeof(s_send_time),"%d",send_time);
 1419              		.loc 1 498 0
 1420 03dc 07F59760 		add	r0, r7, #1208
 1421 03e0 D7F84035 		ldr	r3, [r7, #1344]
 1422 03e4 194A     		ldr	r2, .L52+16
 1423 03e6 0A21     		movs	r1, #10
 1424 03e8 FFF7FEFF 		bl	snprintf
 499:notoriOS.c    ****             pushData("modem_tx_time",s_send_time,getTimeStamp());
 1425              		.loc 1 499 0
 1426 03ec FFF7FEFF 		bl	getTimeStamp
 1427 03f0 0246     		mov	r2, r0
 1428 03f2 07F59763 		add	r3, r7, #1208
 1429 03f6 1946     		mov	r1, r3
 1430 03f8 1548     		ldr	r0, .L52+20
 1431 03fa FFF7FEFF 		bl	pushData
 1432              	.LBE7:
 1433 03fe 03E0     		b	.L48
 1434              	.L47:
 500:notoriOS.c    ****         }else{
 501:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR, "OS-NO: Could not receive data from server.");
 1435              		.loc 1 501 0
 1436 0400 1449     		ldr	r1, .L52+24
 1437 0402 0220     		movs	r0, #2
 1438 0404 FFF7FEFF 		bl	printNotif
 1439              	.L48:
 502:notoriOS.c    ****         }
 503:notoriOS.c    ****          
 504:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 505:notoriOS.c    ****         long network_time = modem_get_network_time();
 1440              		.loc 1 505 0
 1441 0408 FFF7FEFF 		bl	modem_get_network_time
 1442 040c C7F83C05 		str	r0, [r7, #1340]
 506:notoriOS.c    ****         if(network_time != 0){
 1443              		.loc 1 506 0
 1444 0410 D7F83C35 		ldr	r3, [r7, #1340]
 1445 0414 002B     		cmp	r3, #0
 1446 0416 03D0     		beq	.L49
 507:notoriOS.c    ****            setTime(network_time);
 1447              		.loc 1 507 0
 1448 0418 D7F83C05 		ldr	r0, [r7, #1340]
 1449 041c FFF7FEFF 		bl	setTime
 1450              	.L49:
 508:notoriOS.c    ****         }
 509:notoriOS.c    ****         
 510:notoriOS.c    ****         // If transmitted, flush the data stack and shut down modem
 511:notoriOS.c    ****         // If not -- keep the statck and try next time
 512:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 37


 513:notoriOS.c    ****         modem_power_down();
 1451              		.loc 1 513 0
 1452 0420 FFF7FEFF 		bl	modem_power_down
 514:notoriOS.c    ****         
 515:notoriOS.c    ****         try_counter = 0u;
 1453              		.loc 1 515 0
 1454 0424 0C4B     		ldr	r3, .L52+28
 1455 0426 0022     		movs	r2, #0
 1456 0428 1A70     		strb	r2, [r3]
 516:notoriOS.c    ****         return 0u;
 1457              		.loc 1 516 0
 1458 042a 0023     		movs	r3, #0
 1459 042c 00E0     		b	.L37
 1460              	.L40:
 1461              	.LBE2:
 517:notoriOS.c    ****     }
 518:notoriOS.c    ****       
 519:notoriOS.c    ****       return 1u; // Not done yet
 1462              		.loc 1 519 0
 1463 042e 0123     		movs	r3, #1
 1464              	.L37:
 520:notoriOS.c    **** }
 1465              		.loc 1 520 0 discriminator 1
 1466 0430 1846     		mov	r0, r3
 1467 0432 07F25457 		addw	r7, r7, #1364
 1468              		.cfi_def_cfa_offset 12
 1469 0436 BD46     		mov	sp, r7
 1470              		.cfi_def_cfa_register 13
 1471              		@ sp needed
 1472 0438 90BD     		pop	{r4, r7, pc}
 1473              	.L53:
 1474 043a 00BF     		.align	2
 1475              	.L52:
 1476 043c 10020000 		.word	.LC30
 1477 0440 18020000 		.word	.LC31
 1478 0444 20020000 		.word	.LC32
 1479 0448 00000000 		.word	modem_start_time_stamp
 1480 044c C4000000 		.word	.LC6
 1481 0450 34020000 		.word	.LC33
 1482 0454 44020000 		.word	.LC34
 1483 0458 00000000 		.word	try_counter
 1484              		.cfi_endproc
 1485              	.LFE74:
 1486              		.size	syncData, .-syncData
 1487              		.section	.text.configureRemoteParams,"ax",%progbits
 1488              		.align	2
 1489              		.global	configureRemoteParams
 1490              		.thumb
 1491              		.thumb_func
 1492              		.type	configureRemoteParams, %function
 1493              	configureRemoteParams:
 1494              	.LFB75:
 521:notoriOS.c    **** 
 522:notoriOS.c    **** // ==============================================
 523:notoriOS.c    **** // Syncs with cell-tower clock and check meta-DB
 524:notoriOS.c    **** // Returns 0 when done
 525:notoriOS.c    **** // ==============================================
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 38


 526:notoriOS.c    **** uint8 configureRemoteParams(){
 1495              		.loc 1 526 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 8
 1498              		@ frame_needed = 1, uses_anonymous_args = 0
 1499 0000 80B5     		push	{r7, lr}
 1500              		.cfi_def_cfa_offset 8
 1501              		.cfi_offset 7, -8
 1502              		.cfi_offset 14, -4
 1503 0002 82B0     		sub	sp, sp, #8
 1504              		.cfi_def_cfa_offset 16
 1505 0004 00AF     		add	r7, sp, #0
 1506              		.cfi_def_cfa_register 7
 527:notoriOS.c    ****     
 528:notoriOS.c    ****     if(modem_get_state() == MODEM_STATE_OFF){
 1507              		.loc 1 528 0
 1508 0006 FFF7FEFF 		bl	modem_get_state
 1509 000a 0346     		mov	r3, r0
 1510 000c 002B     		cmp	r3, #0
 1511 000e 02D1     		bne	.L55
 529:notoriOS.c    ****         // This puts all the modem points into a state that won't leak power    
 530:notoriOS.c    ****         modem_power_up();
 1512              		.loc 1 530 0
 1513 0010 FFF7FEFF 		bl	modem_power_up
 1514 0014 11E0     		b	.L56
 1515              	.L55:
 531:notoriOS.c    ****             
 532:notoriOS.c    ****     }else if(modem_get_state() == MODEM_STATE_READY){
 1516              		.loc 1 532 0
 1517 0016 FFF7FEFF 		bl	modem_get_state
 1518 001a 0346     		mov	r3, r0
 1519 001c 042B     		cmp	r3, #4
 1520 001e 0CD1     		bne	.L56
 1521              	.LBB8:
 533:notoriOS.c    ****         
 534:notoriOS.c    ****         // This is where we will interfasce with some sort of broker that assings node IDs
 535:notoriOS.c    ****         
 536:notoriOS.c    ****         // Get time, and if it looks good, set the RTC with it
 537:notoriOS.c    ****         long network_time = modem_get_network_time();
 1522              		.loc 1 537 0
 1523 0020 FFF7FEFF 		bl	modem_get_network_time
 1524 0024 7860     		str	r0, [r7, #4]
 538:notoriOS.c    ****         if(network_time != 0){
 1525              		.loc 1 538 0
 1526 0026 7B68     		ldr	r3, [r7, #4]
 1527 0028 002B     		cmp	r3, #0
 1528 002a 02D0     		beq	.L57
 539:notoriOS.c    ****             setTime(network_time);
 1529              		.loc 1 539 0
 1530 002c 7868     		ldr	r0, [r7, #4]
 1531 002e FFF7FEFF 		bl	setTime
 1532              	.L57:
 540:notoriOS.c    ****         }
 541:notoriOS.c    ****         
 542:notoriOS.c    ****         // Get GPS coordinates
 543:notoriOS.c    ****         //gps_t gps = modem_get_gps_coordinates();
 544:notoriOS.c    ****         // Power down the modem -- completely "kill" modem to conserve power
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 39


 545:notoriOS.c    ****         modem_power_down();
 1533              		.loc 1 545 0
 1534 0032 FFF7FEFF 		bl	modem_power_down
 546:notoriOS.c    ****         return 0u;
 1535              		.loc 1 546 0
 1536 0036 0023     		movs	r3, #0
 1537 0038 00E0     		b	.L58
 1538              	.L56:
 1539              	.LBE8:
 547:notoriOS.c    ****         
 548:notoriOS.c    ****     }
 549:notoriOS.c    ****     
 550:notoriOS.c    ****     return 1u;
 1540              		.loc 1 550 0
 1541 003a 0123     		movs	r3, #1
 1542              	.L58:
 551:notoriOS.c    **** }
 1543              		.loc 1 551 0
 1544 003c 1846     		mov	r0, r3
 1545 003e 0837     		adds	r7, r7, #8
 1546              		.cfi_def_cfa_offset 8
 1547 0040 BD46     		mov	sp, r7
 1548              		.cfi_def_cfa_register 13
 1549              		@ sp needed
 1550 0042 80BD     		pop	{r7, pc}
 1551              		.cfi_endproc
 1552              	.LFE75:
 1553              		.size	configureRemoteParams, .-configureRemoteParams
 1554              		.section	.rodata
 1555 026f 00       		.align	2
 1556              	.LC35:
 1557 0270 256C6400 		.ascii	"%ld\000"
 1558              		.align	2
 1559              	.LC36:
 1560 0274 43757272 		.ascii	"Current_Node_Type\000"
 1560      656E745F 
 1560      4E6F6465 
 1560      5F547970 
 1560      6500
 1561 0286 0000     		.align	2
 1562              	.LC37:
 1563 0288 6D617862 		.ascii	"maxbotix_depth=%s\000"
 1563      6F746978 
 1563      5F646570 
 1563      74683D25 
 1563      7300
 1564 029a 0000     		.align	2
 1565              	.LC38:
 1566 029c 6D617862 		.ascii	"maxbotix_depth\000"
 1566      6F746978 
 1566      5F646570 
 1566      746800
 1567 02ab 00       		.align	2
 1568              	.LC39:
 1569 02ac 612B00   		.ascii	"a+\000"
 1570 02af 00       		.align	2
 1571              	.LC40:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 40


 1572 02b0 206D6178 		.ascii	" maxbotix_depth: \000"
 1572      626F7469 
 1572      785F6465 
 1572      7074683A 
 1572      2000
 1573 02c2 0000     		.align	2
 1574              	.LC41:
 1575 02c4 2000     		.ascii	" \000"
 1576 02c6 0000     		.align	2
 1577              	.LC42:
 1578 02c8 436F756C 		.ascii	"Could not get valid readings from Maxbotix.\000"
 1578      64206E6F 
 1578      74206765 
 1578      74207661 
 1578      6C696420 
 1579              		.global	__aeabi_f2d
 1580              		.align	2
 1581              	.LC43:
 1582 02f4 252E3266 		.ascii	"%.2f\000"
 1582      00
 1583 02f9 000000   		.align	2
 1584              	.LC44:
 1585 02fc 765F6261 		.ascii	"v_bat=%s\000"
 1585      743D2573 
 1585      00
 1586 0305 000000   		.align	2
 1587              	.LC45:
 1588 0308 765F6261 		.ascii	"v_bat\000"
 1588      7400
 1589 030e 0000     		.align	2
 1590              	.LC46:
 1591 0310 20766261 		.ascii	" vbat: \000"
 1591      743A2000 
 1592              		.align	2
 1593              	.LC47:
 1594 0318 70726573 		.ascii	"pressure_current=%s\000"
 1594      73757265 
 1594      5F637572 
 1594      72656E74 
 1594      3D257300 
 1595              		.align	2
 1596              	.LC48:
 1597 032c 70726573 		.ascii	"pressure_current\000"
 1597      73757265 
 1597      5F637572 
 1597      72656E74 
 1597      00
 1598 033d 000000   		.align	2
 1599              	.LC49:
 1600 0340 20707265 		.ascii	" pressure_current: \000"
 1600      73737572 
 1600      655F6375 
 1600      7272656E 
 1600      743A2000 
 1601              		.align	2
 1602              	.LC50:
 1603 0354 70726573 		.ascii	"pressure_depth=%s\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 41


 1603      73757265 
 1603      5F646570 
 1603      74683D25 
 1603      7300
 1604 0366 0000     		.align	2
 1605              	.LC51:
 1606 0368 70726573 		.ascii	"pressure_depth\000"
 1606      73757265 
 1606      5F646570 
 1606      746800
 1607 0377 00       		.align	2
 1608              	.LC52:
 1609 0378 20707265 		.ascii	" pressure_depth: \000"
 1609      73737572 
 1609      655F6465 
 1609      7074683A 
 1609      2000
 1610 038a 0000     		.align	2
 1611              	.LC53:
 1612 038c 436F756C 		.ascii	"Could not get valid readings from ADC.\000"
 1612      64206E6F 
 1612      74206765 
 1612      74207661 
 1612      6C696420 
 1613              		.section	.text.makeMeasurements,"ax",%progbits
 1614              		.align	2
 1615              		.global	makeMeasurements
 1616              		.thumb
 1617              		.thumb_func
 1618              		.type	makeMeasurements, %function
 1619              	makeMeasurements:
 1620              	.LFB76:
 552:notoriOS.c    **** 
 553:notoriOS.c    **** 
 554:notoriOS.c    **** // ==============================================
 555:notoriOS.c    **** // Make sensor measurements, which will be handeled by another cutions
 556:notoriOS.c    **** // Returns 0 when finished
 557:notoriOS.c    **** // ==============================================
 558:notoriOS.c    **** uint8 makeMeasurements(){
 1621              		.loc 1 558 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 128
 1624              		@ frame_needed = 1, uses_anonymous_args = 0
 1625 0000 90B5     		push	{r4, r7, lr}
 1626              		.cfi_def_cfa_offset 12
 1627              		.cfi_offset 4, -12
 1628              		.cfi_offset 7, -8
 1629              		.cfi_offset 14, -4
 1630 0002 A3B0     		sub	sp, sp, #140
 1631              		.cfi_def_cfa_offset 152
 1632 0004 02AF     		add	r7, sp, #8
 1633              		.cfi_def_cfa 7, 144
 559:notoriOS.c    ****     
 560:notoriOS.c    ****     // Get clock time and save to timeStamp
 561:notoriOS.c    ****     long timeStamp = getTimeStamp();
 1634              		.loc 1 561 0
 1635 0006 FFF7FEFF 		bl	getTimeStamp
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 42


 1636 000a F867     		str	r0, [r7, #124]
 562:notoriOS.c    ****     char c_timeStamp[32];
 563:notoriOS.c    ****     snprintf(c_timeStamp,sizeof(c_timeStamp),"%ld",timeStamp);
 1637              		.loc 1 563 0
 1638 000c 07F15C00 		add	r0, r7, #92
 1639 0010 FB6F     		ldr	r3, [r7, #124]
 1640 0012 8C4A     		ldr	r2, .L67
 1641 0014 2021     		movs	r1, #32
 1642 0016 FFF7FEFF 		bl	snprintf
 564:notoriOS.c    ****     
 565:notoriOS.c    ****     // Holds string for value that will be written 
 566:notoriOS.c    ****     char value[DATA_MAX_KEY_LENGTH];
 567:notoriOS.c    ****     
 568:notoriOS.c    ****     // who i am determines what I'm going to do 
 569:notoriOS.c    ****     // this is primarily for interpretability on grafana dashboards when developing custom nodes
 570:notoriOS.c    ****     char c_node_type[5];
 571:notoriOS.c    ****     itoa(updatable_parameters.node_type,c_node_type,10);
 1643              		.loc 1 571 0
 1644 001a 8B4B     		ldr	r3, .L67+4
 1645 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1646 001e 1846     		mov	r0, r3
 1647 0020 07F14003 		add	r3, r7, #64
 1648 0024 0A22     		movs	r2, #10
 1649 0026 1946     		mov	r1, r3
 1650 0028 FFF7FEFF 		bl	itoa
 572:notoriOS.c    ****     pushData("Current_Node_Type",c_node_type ,getTimeStamp());
 1651              		.loc 1 572 0
 1652 002c FFF7FEFF 		bl	getTimeStamp
 1653 0030 0246     		mov	r2, r0
 1654 0032 07F14003 		add	r3, r7, #64
 1655 0036 1946     		mov	r1, r3
 1656 0038 8448     		ldr	r0, .L67+8
 1657 003a FFF7FEFF 		bl	pushData
 573:notoriOS.c    ****     
 574:notoriOS.c    ****     // If node type is depth node, take level sensor measurements
 575:notoriOS.c    ****     
 576:notoriOS.c    ****     if(updatable_parameters.node_type == NODE_TYPE_DEPTH){
 1658              		.loc 1 576 0
 1659 003e 824B     		ldr	r3, .L67+4
 1660 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1661 0042 002B     		cmp	r3, #0
 1662 0044 3BD1     		bne	.L60
 1663              	.LBB9:
 577:notoriOS.c    ****         
 578:notoriOS.c    ****         // level_sensor_t is a new data type we defined in level_sensor.h. We then use that data ty
 579:notoriOS.c    ****         level_sensor_t m_level_sensor;
 580:notoriOS.c    ****         
 581:notoriOS.c    ****         // Take level sensor readings and save them to m_level_sensor
 582:notoriOS.c    ****         m_level_sensor = level_sensor_take_reading();
 1664              		.loc 1 582 0
 1665 0046 07F11003 		add	r3, r7, #16
 1666 004a 1846     		mov	r0, r3
 1667 004c FFF7FEFF 		bl	level_sensor_take_reading
 583:notoriOS.c    ****     
 584:notoriOS.c    ****         // If the number of valid level sensor readings is greater than 0, then print the level sen
 585:notoriOS.c    ****         if(m_level_sensor.num_valid_readings > 0){
 1668              		.loc 1 585 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 43


 1669 0050 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1670 0054 002B     		cmp	r3, #0
 1671 0056 2ED0     		beq	.L61
 586:notoriOS.c    ****             snprintf(value,sizeof(value),"%d",m_level_sensor.level_reading);
 1672              		.loc 1 586 0
 1673 0058 B7F92630 		ldrsh	r3, [r7, #38]
 1674 005c 07F14800 		add	r0, r7, #72
 1675 0060 7B4A     		ldr	r2, .L67+12
 1676 0062 1421     		movs	r1, #20
 1677 0064 FFF7FEFF 		bl	snprintf
 587:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"maxbotix_depth=%s",value);
 1678              		.loc 1 587 0
 1679 0068 07F14803 		add	r3, r7, #72
 1680 006c 1A46     		mov	r2, r3
 1681 006e 7949     		ldr	r1, .L67+16
 1682 0070 0020     		movs	r0, #0
 1683 0072 FFF7FEFF 		bl	printNotif
 588:notoriOS.c    ****             pushData("maxbotix_depth",value,timeStamp);
 1684              		.loc 1 588 0
 1685 0076 07F14803 		add	r3, r7, #72
 1686 007a FA6F     		ldr	r2, [r7, #124]
 1687 007c 1946     		mov	r1, r3
 1688 007e 7648     		ldr	r0, .L67+20
 1689 0080 FFF7FEFF 		bl	pushData
 589:notoriOS.c    ****             
 590:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 591:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1690              		.loc 1 591 0
 1691 0084 07F15C03 		add	r3, r7, #92
 1692 0088 1A46     		mov	r2, r3
 1693 008a 7449     		ldr	r1, .L67+24
 1694 008c 7448     		ldr	r0, .L67+28
 1695 008e FFF7FEFF 		bl	SD_write
 592:notoriOS.c    ****             SD_write(Data_fileName, "a+", " maxbotix_depth: ");
 1696              		.loc 1 592 0
 1697 0092 744A     		ldr	r2, .L67+32
 1698 0094 7149     		ldr	r1, .L67+24
 1699 0096 7248     		ldr	r0, .L67+28
 1700 0098 FFF7FEFF 		bl	SD_write
 593:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1701              		.loc 1 593 0
 1702 009c 07F14803 		add	r3, r7, #72
 1703 00a0 1A46     		mov	r2, r3
 1704 00a2 6E49     		ldr	r1, .L67+24
 1705 00a4 6E48     		ldr	r0, .L67+28
 1706 00a6 FFF7FEFF 		bl	SD_write
 594:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1707              		.loc 1 594 0
 1708 00aa 6F4A     		ldr	r2, .L67+36
 1709 00ac 6B49     		ldr	r1, .L67+24
 1710 00ae 6C48     		ldr	r0, .L67+28
 1711 00b0 FFF7FEFF 		bl	SD_write
 1712 00b4 03E0     		b	.L60
 1713              	.L61:
 595:notoriOS.c    ****         }else{
 596:notoriOS.c    ****             printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from Maxbotix.");
 1714              		.loc 1 596 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 44


 1715 00b6 6D49     		ldr	r1, .L67+40
 1716 00b8 0220     		movs	r0, #2
 1717 00ba FFF7FEFF 		bl	printNotif
 1718              	.L60:
 1719              	.LBE9:
 597:notoriOS.c    ****             //pushData("maxbotix_depth","error",timeStamp);
 598:notoriOS.c    ****         }
 599:notoriOS.c    ****     }
 600:notoriOS.c    ****     
 601:notoriOS.c    ****     
 602:notoriOS.c    ****     // voltage_t is a new data type we defined in voltages.h. We then use that data type to define 
 603:notoriOS.c    ****     voltage_t m_voltage;
 604:notoriOS.c    ****     
 605:notoriOS.c    ****     // Take voltage readings and save them to m_voltage
 606:notoriOS.c    ****     m_voltage = voltage_take_readings();
 1720              		.loc 1 606 0
 1721 00be 07F12C03 		add	r3, r7, #44
 1722 00c2 1846     		mov	r0, r3
 1723 00c4 FFF7FEFF 		bl	voltage_take_readings
 607:notoriOS.c    ****     
 608:notoriOS.c    ****     // If the reading is valid, print the voltage battery and pressure transducer reading and push 
 609:notoriOS.c    ****     if(m_voltage.valid){
 1724              		.loc 1 609 0
 1725 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1726 00cc 002B     		cmp	r3, #0
 1727 00ce 00F0AF80 		beq	.L63
 610:notoriOS.c    ****         // battery voltage data
 611:notoriOS.c    ****         snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_battery);
 1728              		.loc 1 611 0
 1729 00d2 FB6A     		ldr	r3, [r7, #44]	@ float
 1730 00d4 1846     		mov	r0, r3
 1731 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1732 00da 0346     		mov	r3, r0
 1733 00dc 0C46     		mov	r4, r1
 1734 00de 07F14800 		add	r0, r7, #72
 1735 00e2 CDE90034 		strd	r3, [sp]
 1736 00e6 624A     		ldr	r2, .L67+44
 1737 00e8 1421     		movs	r1, #20
 1738 00ea FFF7FEFF 		bl	snprintf
 612:notoriOS.c    ****         printNotif(NOTIF_TYPE_EVENT,"v_bat=%s",value);
 1739              		.loc 1 612 0
 1740 00ee 07F14803 		add	r3, r7, #72
 1741 00f2 1A46     		mov	r2, r3
 1742 00f4 5F49     		ldr	r1, .L67+48
 1743 00f6 0020     		movs	r0, #0
 1744 00f8 FFF7FEFF 		bl	printNotif
 613:notoriOS.c    ****         pushData("v_bat",value,timeStamp);
 1745              		.loc 1 613 0
 1746 00fc 07F14803 		add	r3, r7, #72
 1747 0100 FA6F     		ldr	r2, [r7, #124]
 1748 0102 1946     		mov	r1, r3
 1749 0104 5C48     		ldr	r0, .L67+52
 1750 0106 FFF7FEFF 		bl	pushData
 614:notoriOS.c    ****         
 615:notoriOS.c    ****         // Print measurement to SD card to file called data.txt
 616:notoriOS.c    ****         SD_write(Data_fileName, "a+", " ");
 1751              		.loc 1 616 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 45


 1752 010a 574A     		ldr	r2, .L67+36
 1753 010c 5349     		ldr	r1, .L67+24
 1754 010e 5448     		ldr	r0, .L67+28
 1755 0110 FFF7FEFF 		bl	SD_write
 617:notoriOS.c    ****         SD_write(Data_fileName, "a+", c_timeStamp);
 1756              		.loc 1 617 0
 1757 0114 07F15C03 		add	r3, r7, #92
 1758 0118 1A46     		mov	r2, r3
 1759 011a 5049     		ldr	r1, .L67+24
 1760 011c 5048     		ldr	r0, .L67+28
 1761 011e FFF7FEFF 		bl	SD_write
 618:notoriOS.c    ****         SD_write(Data_fileName, "a+", " vbat: ");
 1762              		.loc 1 618 0
 1763 0122 564A     		ldr	r2, .L67+56
 1764 0124 4D49     		ldr	r1, .L67+24
 1765 0126 4E48     		ldr	r0, .L67+28
 1766 0128 FFF7FEFF 		bl	SD_write
 619:notoriOS.c    ****         SD_write(Data_fileName, "a+", value);
 1767              		.loc 1 619 0
 1768 012c 07F14803 		add	r3, r7, #72
 1769 0130 1A46     		mov	r2, r3
 1770 0132 4A49     		ldr	r1, .L67+24
 1771 0134 4A48     		ldr	r0, .L67+28
 1772 0136 FFF7FEFF 		bl	SD_write
 620:notoriOS.c    ****         
 621:notoriOS.c    ****         // If node type is green infrastructure node, take pressure transducer measurements
 622:notoriOS.c    ****          
 623:notoriOS.c    ****         if(updatable_parameters.node_type == NODE_TYPE_GREENINFRASTRUCTURE){
 1773              		.loc 1 623 0
 1774 013a 434B     		ldr	r3, .L67+4
 1775 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1776 013e 012B     		cmp	r3, #1
 1777 0140 7AD1     		bne	.L65
 1778              	.LBB10:
 624:notoriOS.c    ****             
 625:notoriOS.c    ****             // pressure transducer voltage (V) data
 626:notoriOS.c    ****             //snprintf(value,sizeof(value),"%.2f",m_voltage.voltage_pressure);
 627:notoriOS.c    ****             //printNotif(NOTIF_TYPE_EVENT,"pressure_voltage=%s",value);
 628:notoriOS.c    ****             //pushData("pressure_voltage",value,timeStamp);
 629:notoriOS.c    ****             
 630:notoriOS.c    ****             // pressure_t is a new data type we defined in voltages.h. We then use that data type t
 631:notoriOS.c    ****             pressure_t m_pressure;
 632:notoriOS.c    ****             
 633:notoriOS.c    ****             // Make pressure transducer calculators for current and depth
 634:notoriOS.c    ****             m_pressure = pressure_calculations(m_voltage);
 1779              		.loc 1 634 0
 1780 0142 3C46     		mov	r4, r7
 1781 0144 6A46     		mov	r2, sp
 1782 0146 07F13803 		add	r3, r7, #56
 1783 014a 93E80300 		ldmia	r3, {r0, r1}
 1784 014e 82E80300 		stmia	r2, {r0, r1}
 1785 0152 07F12C03 		add	r3, r7, #44
 1786 0156 0ECB     		ldmia	r3, {r1, r2, r3}
 1787 0158 2046     		mov	r0, r4
 1788 015a FFF7FEFF 		bl	pressure_calculations
 635:notoriOS.c    ****             
 636:notoriOS.c    ****             // pressure transducer current (mA) data
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 46


 637:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_current);
 1789              		.loc 1 637 0
 1790 015e BB68     		ldr	r3, [r7, #8]	@ float
 1791 0160 1846     		mov	r0, r3
 1792 0162 FFF7FEFF 		bl	__aeabi_f2d
 1793 0166 0346     		mov	r3, r0
 1794 0168 0C46     		mov	r4, r1
 1795 016a 07F14800 		add	r0, r7, #72
 1796 016e CDE90034 		strd	r3, [sp]
 1797 0172 3F4A     		ldr	r2, .L67+44
 1798 0174 1421     		movs	r1, #20
 1799 0176 FFF7FEFF 		bl	snprintf
 638:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_current=%s",value);
 1800              		.loc 1 638 0
 1801 017a 07F14803 		add	r3, r7, #72
 1802 017e 1A46     		mov	r2, r3
 1803 0180 3F49     		ldr	r1, .L67+60
 1804 0182 0020     		movs	r0, #0
 1805 0184 FFF7FEFF 		bl	printNotif
 639:notoriOS.c    ****             pushData("pressure_current",value,timeStamp);
 1806              		.loc 1 639 0
 1807 0188 07F14803 		add	r3, r7, #72
 1808 018c FA6F     		ldr	r2, [r7, #124]
 1809 018e 1946     		mov	r1, r3
 1810 0190 3C48     		ldr	r0, .L67+64
 1811 0192 FFF7FEFF 		bl	pushData
 640:notoriOS.c    ****             
 641:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 642:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1812              		.loc 1 642 0
 1813 0196 344A     		ldr	r2, .L67+36
 1814 0198 3049     		ldr	r1, .L67+24
 1815 019a 3148     		ldr	r0, .L67+28
 1816 019c FFF7FEFF 		bl	SD_write
 643:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1817              		.loc 1 643 0
 1818 01a0 07F15C03 		add	r3, r7, #92
 1819 01a4 1A46     		mov	r2, r3
 1820 01a6 2D49     		ldr	r1, .L67+24
 1821 01a8 2D48     		ldr	r0, .L67+28
 1822 01aa FFF7FEFF 		bl	SD_write
 644:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_current: ");
 1823              		.loc 1 644 0
 1824 01ae 364A     		ldr	r2, .L67+68
 1825 01b0 2A49     		ldr	r1, .L67+24
 1826 01b2 2B48     		ldr	r0, .L67+28
 1827 01b4 FFF7FEFF 		bl	SD_write
 645:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1828              		.loc 1 645 0
 1829 01b8 07F14803 		add	r3, r7, #72
 1830 01bc 1A46     		mov	r2, r3
 1831 01be 2749     		ldr	r1, .L67+24
 1832 01c0 2748     		ldr	r0, .L67+28
 1833 01c2 FFF7FEFF 		bl	SD_write
 646:notoriOS.c    ****             
 647:notoriOS.c    ****             // pressure transducer depth (ft) data
 648:notoriOS.c    ****             snprintf(value,sizeof(value),"%.2f",m_pressure.pressure_depth);
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 47


 1834              		.loc 1 648 0
 1835 01c6 FB68     		ldr	r3, [r7, #12]	@ float
 1836 01c8 1846     		mov	r0, r3
 1837 01ca FFF7FEFF 		bl	__aeabi_f2d
 1838 01ce 0346     		mov	r3, r0
 1839 01d0 0C46     		mov	r4, r1
 1840 01d2 07F14800 		add	r0, r7, #72
 1841 01d6 CDE90034 		strd	r3, [sp]
 1842 01da 254A     		ldr	r2, .L67+44
 1843 01dc 1421     		movs	r1, #20
 1844 01de FFF7FEFF 		bl	snprintf
 649:notoriOS.c    ****             printNotif(NOTIF_TYPE_EVENT,"pressure_depth=%s",value);
 1845              		.loc 1 649 0
 1846 01e2 07F14803 		add	r3, r7, #72
 1847 01e6 1A46     		mov	r2, r3
 1848 01e8 2849     		ldr	r1, .L67+72
 1849 01ea 0020     		movs	r0, #0
 1850 01ec FFF7FEFF 		bl	printNotif
 650:notoriOS.c    ****             pushData("pressure_depth",value,timeStamp);
 1851              		.loc 1 650 0
 1852 01f0 07F14803 		add	r3, r7, #72
 1853 01f4 FA6F     		ldr	r2, [r7, #124]
 1854 01f6 1946     		mov	r1, r3
 1855 01f8 2548     		ldr	r0, .L67+76
 1856 01fa FFF7FEFF 		bl	pushData
 651:notoriOS.c    ****             
 652:notoriOS.c    ****             // Print measurement to SD card to file called data.txt
 653:notoriOS.c    ****             SD_write(Data_fileName, "a+", " ");
 1857              		.loc 1 653 0
 1858 01fe 1A4A     		ldr	r2, .L67+36
 1859 0200 1649     		ldr	r1, .L67+24
 1860 0202 1748     		ldr	r0, .L67+28
 1861 0204 FFF7FEFF 		bl	SD_write
 654:notoriOS.c    ****             SD_write(Data_fileName, "a+", c_timeStamp);
 1862              		.loc 1 654 0
 1863 0208 07F15C03 		add	r3, r7, #92
 1864 020c 1A46     		mov	r2, r3
 1865 020e 1349     		ldr	r1, .L67+24
 1866 0210 1348     		ldr	r0, .L67+28
 1867 0212 FFF7FEFF 		bl	SD_write
 655:notoriOS.c    ****             SD_write(Data_fileName, "a+", " pressure_depth: ");
 1868              		.loc 1 655 0
 1869 0216 1F4A     		ldr	r2, .L67+80
 1870 0218 1049     		ldr	r1, .L67+24
 1871 021a 1148     		ldr	r0, .L67+28
 1872 021c FFF7FEFF 		bl	SD_write
 656:notoriOS.c    ****             SD_write(Data_fileName, "a+", value);
 1873              		.loc 1 656 0
 1874 0220 07F14803 		add	r3, r7, #72
 1875 0224 1A46     		mov	r2, r3
 1876 0226 0D49     		ldr	r1, .L67+24
 1877 0228 0D48     		ldr	r0, .L67+28
 1878 022a FFF7FEFF 		bl	SD_write
 1879 022e 03E0     		b	.L65
 1880              	.L63:
 1881              	.LBE10:
 657:notoriOS.c    ****         }    
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 48


 658:notoriOS.c    ****     }else{
 659:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Could not get valid readings from ADC.");
 1882              		.loc 1 659 0
 1883 0230 1949     		ldr	r1, .L67+84
 1884 0232 0220     		movs	r0, #2
 1885 0234 FFF7FEFF 		bl	printNotif
 1886              	.L65:
 660:notoriOS.c    ****         
 661:notoriOS.c    ****     }
 662:notoriOS.c    ****         
 663:notoriOS.c    ****     
 664:notoriOS.c    ****     return 0u;
 1887              		.loc 1 664 0
 1888 0238 0023     		movs	r3, #0
 665:notoriOS.c    **** }
 1889              		.loc 1 665 0
 1890 023a 1846     		mov	r0, r3
 1891 023c 8437     		adds	r7, r7, #132
 1892              		.cfi_def_cfa_offset 12
 1893 023e BD46     		mov	sp, r7
 1894              		.cfi_def_cfa_register 13
 1895              		@ sp needed
 1896 0240 90BD     		pop	{r4, r7, pc}
 1897              	.L68:
 1898 0242 00BF     		.align	2
 1899              	.L67:
 1900 0244 70020000 		.word	.LC35
 1901 0248 00000000 		.word	updatable_parameters
 1902 024c 74020000 		.word	.LC36
 1903 0250 C4000000 		.word	.LC6
 1904 0254 88020000 		.word	.LC37
 1905 0258 9C020000 		.word	.LC38
 1906 025c AC020000 		.word	.LC39
 1907 0260 00000000 		.word	Data_fileName
 1908 0264 B0020000 		.word	.LC40
 1909 0268 C4020000 		.word	.LC41
 1910 026c C8020000 		.word	.LC42
 1911 0270 F4020000 		.word	.LC43
 1912 0274 FC020000 		.word	.LC44
 1913 0278 08030000 		.word	.LC45
 1914 027c 10030000 		.word	.LC46
 1915 0280 18030000 		.word	.LC47
 1916 0284 2C030000 		.word	.LC48
 1917 0288 40030000 		.word	.LC49
 1918 028c 54030000 		.word	.LC50
 1919 0290 68030000 		.word	.LC51
 1920 0294 78030000 		.word	.LC52
 1921 0298 8C030000 		.word	.LC53
 1922              		.cfi_endproc
 1923              	.LFE76:
 1924              		.size	makeMeasurements, .-makeMeasurements
 1925              		.section	.rodata
 1926 03b3 00       		.align	2
 1927              	.LC54:
 1928 03b4 4572726F 		.ascii	"Error setting system time.\000"
 1928      72207365 
 1928      7474696E 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 49


 1928      67207379 
 1928      7374656D 
 1929              		.section	.text.setTime,"ax",%progbits
 1930              		.align	2
 1931              		.global	setTime
 1932              		.thumb
 1933              		.thumb_func
 1934              		.type	setTime, %function
 1935              	setTime:
 1936              	.LFB77:
 666:notoriOS.c    **** 
 667:notoriOS.c    **** // ==============================================
 668:notoriOS.c    **** // Set the system time
 669:notoriOS.c    **** // Returns 0 if there is an error, returns 1 if successful
 670:notoriOS.c    **** // ==============================================
 671:notoriOS.c    **** uint8 setTime(long timeStamp){
 1937              		.loc 1 671 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 24
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941 0000 80B5     		push	{r7, lr}
 1942              		.cfi_def_cfa_offset 8
 1943              		.cfi_offset 7, -8
 1944              		.cfi_offset 14, -4
 1945 0002 86B0     		sub	sp, sp, #24
 1946              		.cfi_def_cfa_offset 32
 1947 0004 00AF     		add	r7, sp, #0
 1948              		.cfi_def_cfa_register 7
 1949 0006 7860     		str	r0, [r7, #4]
 672:notoriOS.c    ****     // If timestamp is <= 0 print error statement and return 0
 673:notoriOS.c    ****     if(timeStamp <=0){
 1950              		.loc 1 673 0
 1951 0008 7B68     		ldr	r3, [r7, #4]
 1952 000a 002B     		cmp	r3, #0
 1953 000c 05DC     		bgt	.L70
 674:notoriOS.c    ****         printNotif(NOTIF_TYPE_ERROR,"Error setting system time.");
 1954              		.loc 1 674 0
 1955 000e 1849     		ldr	r1, .L72
 1956 0010 0220     		movs	r0, #2
 1957 0012 FFF7FEFF 		bl	printNotif
 675:notoriOS.c    ****         return 0;  
 1958              		.loc 1 675 0
 1959 0016 0023     		movs	r3, #0
 1960 0018 25E0     		b	.L71
 1961              	.L70:
 676:notoriOS.c    ****     }
 677:notoriOS.c    ****     // Create a new pointer t of data structure tm
 678:notoriOS.c    ****     struct tm * t;
 679:notoriOS.c    ****     // Converts a calendar time (pointed to by timer) and returns a pointer to a structure containi
 680:notoriOS.c    ****     t = gmtime(&timeStamp);
 1962              		.loc 1 680 0
 1963 001a 3B1D     		adds	r3, r7, #4
 1964 001c 1846     		mov	r0, r3
 1965 001e FFF7FEFF 		bl	gmtime
 1966 0022 7861     		str	r0, [r7, #20]
 681:notoriOS.c    ****     
 682:notoriOS.c    ****     // Create variable localTime of data structure RTC_TIME_DATE
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 50


 683:notoriOS.c    ****     RTC_TIME_DATE localTime;
 684:notoriOS.c    ****     localTime.Sec = t->tm_sec;
 1967              		.loc 1 684 0
 1968 0024 7B69     		ldr	r3, [r7, #20]
 1969 0026 1B68     		ldr	r3, [r3]
 1970 0028 DBB2     		uxtb	r3, r3
 1971 002a 3B72     		strb	r3, [r7, #8]
 685:notoriOS.c    ****     localTime.Min = t->tm_min;
 1972              		.loc 1 685 0
 1973 002c 7B69     		ldr	r3, [r7, #20]
 1974 002e 5B68     		ldr	r3, [r3, #4]
 1975 0030 DBB2     		uxtb	r3, r3
 1976 0032 7B72     		strb	r3, [r7, #9]
 686:notoriOS.c    ****     localTime.Hour = t->tm_hour;
 1977              		.loc 1 686 0
 1978 0034 7B69     		ldr	r3, [r7, #20]
 1979 0036 9B68     		ldr	r3, [r3, #8]
 1980 0038 DBB2     		uxtb	r3, r3
 1981 003a BB72     		strb	r3, [r7, #10]
 687:notoriOS.c    ****     localTime.Year = t->tm_year + 1900;
 1982              		.loc 1 687 0
 1983 003c 7B69     		ldr	r3, [r7, #20]
 1984 003e 5B69     		ldr	r3, [r3, #20]
 1985 0040 9BB2     		uxth	r3, r3
 1986 0042 03F26C73 		addw	r3, r3, #1900
 1987 0046 9BB2     		uxth	r3, r3
 1988 0048 7B82     		strh	r3, [r7, #18]	@ movhi
 688:notoriOS.c    ****     localTime.Month = t->tm_mon;
 1989              		.loc 1 688 0
 1990 004a 7B69     		ldr	r3, [r7, #20]
 1991 004c 1B69     		ldr	r3, [r3, #16]
 1992 004e DBB2     		uxtb	r3, r3
 1993 0050 3B74     		strb	r3, [r7, #16]
 689:notoriOS.c    ****     localTime.DayOfMonth = t->tm_mday;
 1994              		.loc 1 689 0
 1995 0052 7B69     		ldr	r3, [r7, #20]
 1996 0054 DB68     		ldr	r3, [r3, #12]
 1997 0056 DBB2     		uxtb	r3, r3
 1998 0058 3B73     		strb	r3, [r7, #12]
 690:notoriOS.c    **** 
 691:notoriOS.c    ****     // Writes time and date values as current time and date.
 692:notoriOS.c    ****     RTC_WriteTime(&localTime);
 1999              		.loc 1 692 0
 2000 005a 07F10803 		add	r3, r7, #8
 2001 005e 1846     		mov	r0, r3
 2002 0060 FFF7FEFF 		bl	RTC_WriteTime
 693:notoriOS.c    ****     
 694:notoriOS.c    ****     // Return 1 when the system time was set properly.
 695:notoriOS.c    ****     return 1;
 2003              		.loc 1 695 0
 2004 0064 0123     		movs	r3, #1
 2005              	.L71:
 696:notoriOS.c    **** }
 2006              		.loc 1 696 0
 2007 0066 1846     		mov	r0, r3
 2008 0068 1837     		adds	r7, r7, #24
 2009              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 51


 2010 006a BD46     		mov	sp, r7
 2011              		.cfi_def_cfa_register 13
 2012              		@ sp needed
 2013 006c 80BD     		pop	{r7, pc}
 2014              	.L73:
 2015 006e 00BF     		.align	2
 2016              	.L72:
 2017 0070 B4030000 		.word	.LC54
 2018              		.cfi_endproc
 2019              	.LFE77:
 2020              		.size	setTime, .-setTime
 2021              		.section	.rodata
 2022 03cf 00       		.align	2
 2023              	.LC55:
 2024 03d0 75706772 		.ascii	"upgrade.hex\000"
 2024      6164652E 
 2024      68657800 
 2025              		.section	.text.upgraded,"ax",%progbits
 2026              		.align	2
 2027              		.global	upgraded
 2028              		.thumb
 2029              		.thumb_func
 2030              		.type	upgraded, %function
 2031              	upgraded:
 2032              	.LFB78:
 697:notoriOS.c    **** 
 698:notoriOS.c    **** //downloads and stores files on SD card
 699:notoriOS.c    **** 
 700:notoriOS.c    **** 
 701:notoriOS.c    **** 
 702:notoriOS.c    **** // ==============================================
 703:notoriOS.c    **** // Will they love it, will they hate it
 704:notoriOS.c    **** // Never fade it, I evade it
 705:notoriOS.c    **** // Cause I never really want to complicate it
 706:notoriOS.c    **** //      - Logic, Upgraded (2015)
 707:notoriOS.c    **** //
 708:notoriOS.c    **** // downloads new firmware, stores it on SD card, and reboots the system to allow bootloader 
 709:notoriOS.c    **** // returns 0 if modem is connected, 1 if the file downlaod failed, and does not return otherwise (b
 710:notoriOS.c    **** // ==============================================
 711:notoriOS.c    **** 
 712:notoriOS.c    **** uint8 upgraded(char *host, int port,  char *route){
 2033              		.loc 1 712 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 232
 2036              		@ frame_needed = 1, uses_anonymous_args = 0
 2037 0000 80B5     		push	{r7, lr}
 2038              		.cfi_def_cfa_offset 8
 2039              		.cfi_offset 7, -8
 2040              		.cfi_offset 14, -4
 2041 0002 C0B0     		sub	sp, sp, #256
 2042              		.cfi_def_cfa_offset 264
 2043 0004 06AF     		add	r7, sp, #24
 2044              		.cfi_def_cfa 7, 240
 2045 0006 F860     		str	r0, [r7, #12]
 2046 0008 B960     		str	r1, [r7, #8]
 2047 000a 7A60     		str	r2, [r7, #4]
 713:notoriOS.c    ****     
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 52


 714:notoriOS.c    ****     uint8 upgrade_status = 0;
 2048              		.loc 1 714 0
 2049 000c 0023     		movs	r3, #0
 2050 000e 87F8E730 		strb	r3, [r7, #231]
 715:notoriOS.c    ****     
 716:notoriOS.c    ****    //AGPS will only work if we're connected to network, so don't call this fuction otherwise
 717:notoriOS.c    ****     if(modem_state != MODEM_STATE_READY){
 2051              		.loc 1 717 0
 2052 0012 384B     		ldr	r3, .L78
 2053 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2054 0016 042B     		cmp	r3, #4
 2055 0018 02D0     		beq	.L75
 718:notoriOS.c    ****         return upgrade_status;//where valid = 0
 2056              		.loc 1 718 0
 2057 001a 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2058 001e 65E0     		b	.L77
 2059              	.L75:
 719:notoriOS.c    ****     }
 720:notoriOS.c    ****     
 721:notoriOS.c    ****     char fileName[] = "upgrade.hex";
 2060              		.loc 1 721 0
 2061 0020 354A     		ldr	r2, .L78+4
 2062 0022 07F1D803 		add	r3, r7, #216
 2063 0026 07CA     		ldmia	r2, {r0, r1, r2}
 2064 0028 83E80700 		stmia	r3, {r0, r1, r2}
 722:notoriOS.c    ****     //delete file, if one exisits already
 723:notoriOS.c    ****     SD_rmfile(fileName);
 2065              		.loc 1 723 0
 2066 002c 07F1D803 		add	r3, r7, #216
 2067 0030 1846     		mov	r0, r3
 2068 0032 FFF7FEFF 		bl	SD_rmfile
 724:notoriOS.c    ****     
 725:notoriOS.c    ****     // Create http request
 726:notoriOS.c    ****     construct_generic_HTTP_request(http_request,http_body,host,route,port,"POST","Close","",0,"1.1"
 2069              		.loc 1 726 0
 2070 0036 314B     		ldr	r3, .L78+8
 2071 0038 0593     		str	r3, [sp, #20]
 2072 003a 0023     		movs	r3, #0
 2073 003c 0493     		str	r3, [sp, #16]
 2074 003e 304B     		ldr	r3, .L78+12
 2075 0040 0393     		str	r3, [sp, #12]
 2076 0042 304B     		ldr	r3, .L78+16
 2077 0044 0293     		str	r3, [sp, #8]
 2078 0046 304B     		ldr	r3, .L78+20
 2079 0048 0193     		str	r3, [sp, #4]
 2080 004a BB68     		ldr	r3, [r7, #8]
 2081 004c 0093     		str	r3, [sp]
 2082 004e 7B68     		ldr	r3, [r7, #4]
 2083 0050 FA68     		ldr	r2, [r7, #12]
 2084 0052 2E49     		ldr	r1, .L78+24
 2085 0054 2E48     		ldr	r0, .L78+28
 2086 0056 FFF7FEFF 		bl	construct_generic_HTTP_request
 727:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"Full HTTP Request: %s", http_request);
 2087              		.loc 1 727 0
 2088 005a 2D4A     		ldr	r2, .L78+28
 2089 005c 2D49     		ldr	r1, .L78+32
 2090 005e 0020     		movs	r0, #0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 53


 2091 0060 FFF7FEFF 		bl	printNotif
 728:notoriOS.c    ****     // Create array portConfig of size 200 characters
 729:notoriOS.c    ****     char portConfig[200];
 730:notoriOS.c    ****     // Print port configurations
 731:notoriOS.c    ****     snprintf(portConfig,sizeof(portConfig),"AT#SD=1,0,%d,\"%s\",0,0,1\r",port,host);
 2092              		.loc 1 731 0
 2093 0064 07F11000 		add	r0, r7, #16
 2094 0068 FB68     		ldr	r3, [r7, #12]
 2095 006a 0093     		str	r3, [sp]
 2096 006c BB68     		ldr	r3, [r7, #8]
 2097 006e 2A4A     		ldr	r2, .L78+36
 2098 0070 C821     		movs	r1, #200
 2099 0072 FFF7FEFF 		bl	snprintf
 732:notoriOS.c    ****     printNotif(NOTIF_TYPE_EVENT,"%s",portConfig);
 2100              		.loc 1 732 0
 2101 0076 07F11003 		add	r3, r7, #16
 2102 007a 1A46     		mov	r2, r3
 2103 007c 2749     		ldr	r1, .L78+40
 2104 007e 0020     		movs	r0, #0
 2105 0080 FFF7FEFF 		bl	printNotif
 733:notoriOS.c    ****     // AT command to configure the port
 734:notoriOS.c    ****     upgrade_status = at_write_command(portConfig,"OK",10000u);
 2106              		.loc 1 734 0
 2107 0084 07F11003 		add	r3, r7, #16
 2108 0088 42F21072 		movw	r2, #10000
 2109 008c 2449     		ldr	r1, .L78+44
 2110 008e 1846     		mov	r0, r3
 2111 0090 FFF7FEFF 		bl	at_write_command
 2112 0094 0346     		mov	r3, r0
 2113 0096 87F8E730 		strb	r3, [r7, #231]
 735:notoriOS.c    ****     // AT command #SSEND= is an execution command that permits, while the modul eis in command mode
 736:notoriOS.c    ****     // To complete the operation, send Ctrl-Z char to exit
 737:notoriOS.c    ****     upgrade_status = at_write_command("AT#SSEND=1\r\n",   ">", 1000u);
 2114              		.loc 1 737 0
 2115 009a 4FF47A72 		mov	r2, #1000
 2116 009e 2149     		ldr	r1, .L78+48
 2117 00a0 2148     		ldr	r0, .L78+52
 2118 00a2 FFF7FEFF 		bl	at_write_command
 2119 00a6 0346     		mov	r3, r0
 2120 00a8 87F8E730 		strb	r3, [r7, #231]
 738:notoriOS.c    ****     // Append <ctrl+z> escape sequence to http_request to exit modem command line
 739:notoriOS.c    ****     strncat(http_request, "\032", 1); 
 2121              		.loc 1 739 0
 2122 00ac 1848     		ldr	r0, .L78+28
 2123 00ae FFF7FEFF 		bl	strlen
 2124 00b2 0346     		mov	r3, r0
 2125 00b4 1A46     		mov	r2, r3
 2126 00b6 164B     		ldr	r3, .L78+28
 2127 00b8 1344     		add	r3, r3, r2
 2128 00ba 1C49     		ldr	r1, .L78+56
 2129 00bc 1A46     		mov	r2, r3
 2130 00be 0B46     		mov	r3, r1
 2131 00c0 1B88     		ldrh	r3, [r3]	@ unaligned
 2132 00c2 1380     		strh	r3, [r2]	@ unaligned
 740:notoriOS.c    ****     // AT command to send http request
 741:notoriOS.c    ****     upgrade_status = at_write_command(http_request, "OK", 5000u);
 2133              		.loc 1 741 0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 54


 2134 00c4 41F28832 		movw	r2, #5000
 2135 00c8 1549     		ldr	r1, .L78+44
 2136 00ca 1148     		ldr	r0, .L78+28
 2137 00cc FFF7FEFF 		bl	at_write_command
 2138 00d0 0346     		mov	r3, r0
 2139 00d2 87F8E730 		strb	r3, [r7, #231]
 742:notoriOS.c    ****     // AT command #SRECV= is an execution command that permits users to read data arrived through a
 743:notoriOS.c    ****     // = 1 means the UPD information is enabled: data are read just until the end of the UDP datagr
 744:notoriOS.c    ****     upgrade_status = at_write_command("AT#SRECV=1,1000\r","OS-OK",5000u);
 2140              		.loc 1 744 0
 2141 00d6 41F28832 		movw	r2, #5000
 2142 00da 1549     		ldr	r1, .L78+60
 2143 00dc 1548     		ldr	r0, .L78+64
 2144 00de FFF7FEFF 		bl	at_write_command
 2145 00e2 0346     		mov	r3, r0
 2146 00e4 87F8E730 		strb	r3, [r7, #231]
 745:notoriOS.c    ****     //SD_write(fileName,"w+",uart_received_string);
 746:notoriOS.c    ****     
 747:notoriOS.c    ****     
 748:notoriOS.c    ****     return upgrade_status;
 2147              		.loc 1 748 0
 2148 00e8 97F8E730 		ldrb	r3, [r7, #231]	@ zero_extendqisi2
 2149              	.L77:
 749:notoriOS.c    ****     
 750:notoriOS.c    **** }
 2150              		.loc 1 750 0 discriminator 1
 2151 00ec 1846     		mov	r0, r3
 2152 00ee E837     		adds	r7, r7, #232
 2153              		.cfi_def_cfa_offset 8
 2154 00f0 BD46     		mov	sp, r7
 2155              		.cfi_def_cfa_register 13
 2156              		@ sp needed
 2157 00f2 80BD     		pop	{r7, pc}
 2158              	.L79:
 2159              		.align	2
 2160              	.L78:
 2161 00f4 00000000 		.word	modem_state
 2162 00f8 D0030000 		.word	.LC55
 2163 00fc 68010000 		.word	.LC16
 2164 0100 6C010000 		.word	.LC17
 2165 0104 70010000 		.word	.LC18
 2166 0108 78010000 		.word	.LC19
 2167 010c 00000000 		.word	http_body
 2168 0110 00000000 		.word	http_request
 2169 0114 80010000 		.word	.LC20
 2170 0118 98010000 		.word	.LC21
 2171 011c B4010000 		.word	.LC22
 2172 0120 B8010000 		.word	.LC23
 2173 0124 E8010000 		.word	.LC26
 2174 0128 EC010000 		.word	.LC27
 2175 012c FC010000 		.word	.LC28
 2176 0130 18020000 		.word	.LC31
 2177 0134 20020000 		.word	.LC32
 2178              		.cfi_endproc
 2179              	.LFE78:
 2180              		.size	upgraded, .-upgraded
 2181              		.text
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 55


 2182              	.Letext0:
 2183              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2184              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2185              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2186              		.file 5 "Generated_Source\\PSoC5/RTC.h"
 2187              		.file 6 "testing.h"
 2188              		.file 7 "level_sensor.h"
 2189              		.file 8 "voltages.h"
 2190              		.file 9 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2191              		.file 10 "data.h"
 2192              		.file 11 "modem.h"
 2193              		.file 12 "notoriOS.h"
 2194              		.file 13 "Generated_Source\\PSoC5/core_cm3.h"
 2195              		.file 14 "App_LED.h"
 2196              		.section	.debug_info,"",%progbits
 2197              	.Ldebug_info0:
 2198 0000 B40C0000 		.4byte	0xcb4
 2199 0004 0400     		.2byte	0x4
 2200 0006 00000000 		.4byte	.Ldebug_abbrev0
 2201 000a 04       		.byte	0x4
 2202 000b 01       		.uleb128 0x1
 2203 000c AC000000 		.4byte	.LASF169
 2204 0010 0C       		.byte	0xc
 2205 0011 35080000 		.4byte	.LASF170
 2206 0015 2C000000 		.4byte	.LASF171
 2207 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2208 001d 00000000 		.4byte	0
 2209 0021 00000000 		.4byte	.Ldebug_line0
 2210 0025 02       		.uleb128 0x2
 2211 0026 01       		.byte	0x1
 2212 0027 06       		.byte	0x6
 2213 0028 7D000000 		.4byte	.LASF0
 2214 002c 02       		.uleb128 0x2
 2215 002d 01       		.byte	0x1
 2216 002e 08       		.byte	0x8
 2217 002f 0F060000 		.4byte	.LASF1
 2218 0033 02       		.uleb128 0x2
 2219 0034 02       		.byte	0x2
 2220 0035 05       		.byte	0x5
 2221 0036 76040000 		.4byte	.LASF2
 2222 003a 02       		.uleb128 0x2
 2223 003b 02       		.byte	0x2
 2224 003c 07       		.byte	0x7
 2225 003d C0070000 		.4byte	.LASF3
 2226 0041 03       		.uleb128 0x3
 2227 0042 88070000 		.4byte	.LASF9
 2228 0046 02       		.byte	0x2
 2229 0047 3F       		.byte	0x3f
 2230 0048 4C000000 		.4byte	0x4c
 2231 004c 02       		.uleb128 0x2
 2232 004d 04       		.byte	0x4
 2233 004e 05       		.byte	0x5
 2234 004f 53020000 		.4byte	.LASF4
 2235 0053 02       		.uleb128 0x2
 2236 0054 04       		.byte	0x4
 2237 0055 07       		.byte	0x7
 2238 0056 B3030000 		.4byte	.LASF5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 56


 2239 005a 02       		.uleb128 0x2
 2240 005b 08       		.byte	0x8
 2241 005c 05       		.byte	0x5
 2242 005d AE010000 		.4byte	.LASF6
 2243 0061 02       		.uleb128 0x2
 2244 0062 08       		.byte	0x8
 2245 0063 07       		.byte	0x7
 2246 0064 4B010000 		.4byte	.LASF7
 2247 0068 04       		.uleb128 0x4
 2248 0069 04       		.byte	0x4
 2249 006a 05       		.byte	0x5
 2250 006b 696E7400 		.ascii	"int\000"
 2251 006f 02       		.uleb128 0x2
 2252 0070 04       		.byte	0x4
 2253 0071 07       		.byte	0x7
 2254 0072 5F030000 		.4byte	.LASF8
 2255 0076 03       		.uleb128 0x3
 2256 0077 07060000 		.4byte	.LASF10
 2257 007b 03       		.byte	0x3
 2258 007c 2C       		.byte	0x2c
 2259 007d 41000000 		.4byte	0x41
 2260 0081 05       		.uleb128 0x5
 2261 0082 8A020000 		.4byte	.LASF11
 2262 0086 04       		.byte	0x4
 2263 0087 9201     		.2byte	0x192
 2264 0089 2C000000 		.4byte	0x2c
 2265 008d 05       		.uleb128 0x5
 2266 008e 08000000 		.4byte	.LASF12
 2267 0092 04       		.byte	0x4
 2268 0093 9301     		.2byte	0x193
 2269 0095 3A000000 		.4byte	0x3a
 2270 0099 05       		.uleb128 0x5
 2271 009a DB020000 		.4byte	.LASF13
 2272 009e 04       		.byte	0x4
 2273 009f 9401     		.2byte	0x194
 2274 00a1 53000000 		.4byte	0x53
 2275 00a5 05       		.uleb128 0x5
 2276 00a6 39040000 		.4byte	.LASF14
 2277 00aa 04       		.byte	0x4
 2278 00ab 9501     		.2byte	0x195
 2279 00ad 25000000 		.4byte	0x25
 2280 00b1 05       		.uleb128 0x5
 2281 00b2 4A080000 		.4byte	.LASF15
 2282 00b6 04       		.byte	0x4
 2283 00b7 9601     		.2byte	0x196
 2284 00b9 33000000 		.4byte	0x33
 2285 00bd 05       		.uleb128 0x5
 2286 00be B5020000 		.4byte	.LASF16
 2287 00c2 04       		.byte	0x4
 2288 00c3 9701     		.2byte	0x197
 2289 00c5 4C000000 		.4byte	0x4c
 2290 00c9 02       		.uleb128 0x2
 2291 00ca 04       		.byte	0x4
 2292 00cb 04       		.byte	0x4
 2293 00cc A5050000 		.4byte	.LASF17
 2294 00d0 02       		.uleb128 0x2
 2295 00d1 08       		.byte	0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 57


 2296 00d2 04       		.byte	0x4
 2297 00d3 C8080000 		.4byte	.LASF18
 2298 00d7 02       		.uleb128 0x2
 2299 00d8 01       		.byte	0x1
 2300 00d9 08       		.byte	0x8
 2301 00da 61070000 		.4byte	.LASF19
 2302 00de 02       		.uleb128 0x2
 2303 00df 08       		.byte	0x8
 2304 00e0 04       		.byte	0x4
 2305 00e1 43070000 		.4byte	.LASF20
 2306 00e5 02       		.uleb128 0x2
 2307 00e6 04       		.byte	0x4
 2308 00e7 07       		.byte	0x7
 2309 00e8 FF040000 		.4byte	.LASF21
 2310 00ec 06       		.uleb128 0x6
 2311 00ed 04       		.byte	0x4
 2312 00ee D7000000 		.4byte	0xd7
 2313 00f2 07       		.uleb128 0x7
 2314 00f3 D7000000 		.4byte	0xd7
 2315 00f7 02010000 		.4byte	0x102
 2316 00fb 08       		.uleb128 0x8
 2317 00fc E5000000 		.4byte	0xe5
 2318 0100 17       		.byte	0x17
 2319 0101 00       		.byte	0
 2320 0102 09       		.uleb128 0x9
 2321 0103 0C       		.byte	0xc
 2322 0104 05       		.byte	0x5
 2323 0105 30       		.byte	0x30
 2324 0106 6B010000 		.4byte	0x16b
 2325 010a 0A       		.uleb128 0xa
 2326 010b 53656300 		.ascii	"Sec\000"
 2327 010f 05       		.byte	0x5
 2328 0110 32       		.byte	0x32
 2329 0111 81000000 		.4byte	0x81
 2330 0115 00       		.byte	0
 2331 0116 0A       		.uleb128 0xa
 2332 0117 4D696E00 		.ascii	"Min\000"
 2333 011b 05       		.byte	0x5
 2334 011c 33       		.byte	0x33
 2335 011d 81000000 		.4byte	0x81
 2336 0121 01       		.byte	0x1
 2337 0122 0B       		.uleb128 0xb
 2338 0123 62010000 		.4byte	.LASF22
 2339 0127 05       		.byte	0x5
 2340 0128 34       		.byte	0x34
 2341 0129 81000000 		.4byte	0x81
 2342 012d 02       		.byte	0x2
 2343 012e 0B       		.uleb128 0xb
 2344 012f 6C060000 		.4byte	.LASF23
 2345 0133 05       		.byte	0x5
 2346 0134 35       		.byte	0x35
 2347 0135 81000000 		.4byte	0x81
 2348 0139 03       		.byte	0x3
 2349 013a 0B       		.uleb128 0xb
 2350 013b F4030000 		.4byte	.LASF24
 2351 013f 05       		.byte	0x5
 2352 0140 36       		.byte	0x36
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 58


 2353 0141 81000000 		.4byte	0x81
 2354 0145 04       		.byte	0x4
 2355 0146 0B       		.uleb128 0xb
 2356 0147 7D080000 		.4byte	.LASF25
 2357 014b 05       		.byte	0x5
 2358 014c 37       		.byte	0x37
 2359 014d 8D000000 		.4byte	0x8d
 2360 0151 06       		.byte	0x6
 2361 0152 0B       		.uleb128 0xb
 2362 0153 45010000 		.4byte	.LASF26
 2363 0157 05       		.byte	0x5
 2364 0158 38       		.byte	0x38
 2365 0159 81000000 		.4byte	0x81
 2366 015d 08       		.byte	0x8
 2367 015e 0B       		.uleb128 0xb
 2368 015f FC050000 		.4byte	.LASF27
 2369 0163 05       		.byte	0x5
 2370 0164 39       		.byte	0x39
 2371 0165 8D000000 		.4byte	0x8d
 2372 0169 0A       		.byte	0xa
 2373 016a 00       		.byte	0
 2374 016b 03       		.uleb128 0x3
 2375 016c 4A050000 		.4byte	.LASF28
 2376 0170 05       		.byte	0x5
 2377 0171 3A       		.byte	0x3a
 2378 0172 76010000 		.4byte	0x176
 2379 0176 0C       		.uleb128 0xc
 2380 0177 02010000 		.4byte	0x102
 2381 017b 0D       		.uleb128 0xd
 2382 017c 8101     		.2byte	0x181
 2383 017e 06       		.byte	0x6
 2384 017f 0A       		.byte	0xa
 2385 0180 A9010000 		.4byte	0x1a9
 2386 0184 0B       		.uleb128 0xb
 2387 0185 F2050000 		.4byte	.LASF29
 2388 0189 06       		.byte	0x6
 2389 018a 0C       		.byte	0xc
 2390 018b A9010000 		.4byte	0x1a9
 2391 018f 00       		.byte	0
 2392 0190 0B       		.uleb128 0xb
 2393 0191 FD070000 		.4byte	.LASF30
 2394 0195 06       		.byte	0x6
 2395 0196 0D       		.byte	0xd
 2396 0197 81000000 		.4byte	0x81
 2397 019b 80       		.byte	0x80
 2398 019c 0B       		.uleb128 0xb
 2399 019d 8E060000 		.4byte	.LASF31
 2400 01a1 06       		.byte	0x6
 2401 01a2 0F       		.byte	0xf
 2402 01a3 B9010000 		.4byte	0x1b9
 2403 01a7 81       		.byte	0x81
 2404 01a8 00       		.byte	0
 2405 01a9 07       		.uleb128 0x7
 2406 01aa D7000000 		.4byte	0xd7
 2407 01ae B9010000 		.4byte	0x1b9
 2408 01b2 08       		.uleb128 0x8
 2409 01b3 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 59


 2410 01b7 7F       		.byte	0x7f
 2411 01b8 00       		.byte	0
 2412 01b9 07       		.uleb128 0x7
 2413 01ba D7000000 		.4byte	0xd7
 2414 01be C9010000 		.4byte	0x1c9
 2415 01c2 08       		.uleb128 0x8
 2416 01c3 E5000000 		.4byte	0xe5
 2417 01c7 FF       		.byte	0xff
 2418 01c8 00       		.byte	0
 2419 01c9 03       		.uleb128 0x3
 2420 01ca 76060000 		.4byte	.LASF32
 2421 01ce 06       		.byte	0x6
 2422 01cf 10       		.byte	0x10
 2423 01d0 7B010000 		.4byte	0x17b
 2424 01d4 09       		.uleb128 0x9
 2425 01d5 1A       		.byte	0x1a
 2426 01d6 07       		.byte	0x7
 2427 01d7 10       		.byte	0x10
 2428 01d8 0D020000 		.4byte	0x20d
 2429 01dc 0B       		.uleb128 0xb
 2430 01dd EB020000 		.4byte	.LASF33
 2431 01e1 07       		.byte	0x7
 2432 01e2 11       		.byte	0x11
 2433 01e3 0D020000 		.4byte	0x20d
 2434 01e7 00       		.byte	0
 2435 01e8 0B       		.uleb128 0xb
 2436 01e9 AA070000 		.4byte	.LASF34
 2437 01ed 07       		.byte	0x7
 2438 01ee 12       		.byte	0x12
 2439 01ef B1000000 		.4byte	0xb1
 2440 01f3 16       		.byte	0x16
 2441 01f4 0B       		.uleb128 0xb
 2442 01f5 8B030000 		.4byte	.LASF35
 2443 01f9 07       		.byte	0x7
 2444 01fa 13       		.byte	0x13
 2445 01fb 81000000 		.4byte	0x81
 2446 01ff 18       		.byte	0x18
 2447 0200 0B       		.uleb128 0xb
 2448 0201 17000000 		.4byte	.LASF36
 2449 0205 07       		.byte	0x7
 2450 0206 14       		.byte	0x14
 2451 0207 81000000 		.4byte	0x81
 2452 020b 19       		.byte	0x19
 2453 020c 00       		.byte	0
 2454 020d 07       		.uleb128 0x7
 2455 020e B1000000 		.4byte	0xb1
 2456 0212 1D020000 		.4byte	0x21d
 2457 0216 08       		.uleb128 0x8
 2458 0217 E5000000 		.4byte	0xe5
 2459 021b 0A       		.byte	0xa
 2460 021c 00       		.byte	0
 2461 021d 03       		.uleb128 0x3
 2462 021e AB050000 		.4byte	.LASF37
 2463 0222 07       		.byte	0x7
 2464 0223 15       		.byte	0x15
 2465 0224 D4010000 		.4byte	0x1d4
 2466 0228 09       		.uleb128 0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 60


 2467 0229 14       		.byte	0x14
 2468 022a 08       		.byte	0x8
 2469 022b 11       		.byte	0x11
 2470 022c 6D020000 		.4byte	0x26d
 2471 0230 0B       		.uleb128 0xb
 2472 0231 E4030000 		.4byte	.LASF38
 2473 0235 08       		.byte	0x8
 2474 0236 12       		.byte	0x12
 2475 0237 C9000000 		.4byte	0xc9
 2476 023b 00       		.byte	0
 2477 023c 0B       		.uleb128 0xb
 2478 023d FA010000 		.4byte	.LASF39
 2479 0241 08       		.byte	0x8
 2480 0242 13       		.byte	0x13
 2481 0243 C9000000 		.4byte	0xc9
 2482 0247 04       		.byte	0x4
 2483 0248 0B       		.uleb128 0xb
 2484 0249 08020000 		.4byte	.LASF40
 2485 024d 08       		.byte	0x8
 2486 024e 14       		.byte	0x14
 2487 024f C9000000 		.4byte	0xc9
 2488 0253 08       		.byte	0x8
 2489 0254 0B       		.uleb128 0xb
 2490 0255 87050000 		.4byte	.LASF41
 2491 0259 08       		.byte	0x8
 2492 025a 15       		.byte	0x15
 2493 025b C9000000 		.4byte	0xc9
 2494 025f 0C       		.byte	0xc
 2495 0260 0B       		.uleb128 0xb
 2496 0261 FF060000 		.4byte	.LASF42
 2497 0265 08       		.byte	0x8
 2498 0266 16       		.byte	0x16
 2499 0267 81000000 		.4byte	0x81
 2500 026b 10       		.byte	0x10
 2501 026c 00       		.byte	0
 2502 026d 03       		.uleb128 0x3
 2503 026e DD080000 		.4byte	.LASF43
 2504 0272 08       		.byte	0x8
 2505 0273 17       		.byte	0x17
 2506 0274 28020000 		.4byte	0x228
 2507 0278 09       		.uleb128 0x9
 2508 0279 10       		.byte	0x10
 2509 027a 08       		.byte	0x8
 2510 027b 19       		.byte	0x19
 2511 027c B1020000 		.4byte	0x2b1
 2512 0280 0B       		.uleb128 0xb
 2513 0281 4B030000 		.4byte	.LASF44
 2514 0285 08       		.byte	0x8
 2515 0286 1A       		.byte	0x1a
 2516 0287 C9000000 		.4byte	0xc9
 2517 028b 00       		.byte	0
 2518 028c 0B       		.uleb128 0xb
 2519 028d 75020000 		.4byte	.LASF45
 2520 0291 08       		.byte	0x8
 2521 0292 1B       		.byte	0x1b
 2522 0293 C9000000 		.4byte	0xc9
 2523 0297 04       		.byte	0x4
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 61


 2524 0298 0B       		.uleb128 0xb
 2525 0299 EE060000 		.4byte	.LASF46
 2526 029d 08       		.byte	0x8
 2527 029e 1C       		.byte	0x1c
 2528 029f C9000000 		.4byte	0xc9
 2529 02a3 08       		.byte	0x8
 2530 02a4 0B       		.uleb128 0xb
 2531 02a5 58060000 		.4byte	.LASF47
 2532 02a9 08       		.byte	0x8
 2533 02aa 1D       		.byte	0x1d
 2534 02ab C9000000 		.4byte	0xc9
 2535 02af 0C       		.byte	0xc
 2536 02b0 00       		.byte	0
 2537 02b1 03       		.uleb128 0x3
 2538 02b2 87080000 		.4byte	.LASF48
 2539 02b6 08       		.byte	0x8
 2540 02b7 1E       		.byte	0x1e
 2541 02b8 78020000 		.4byte	0x278
 2542 02bc 0E       		.uleb128 0xe
 2543 02bd 746D00   		.ascii	"tm\000"
 2544 02c0 24       		.byte	0x24
 2545 02c1 09       		.byte	0x9
 2546 02c2 21       		.byte	0x21
 2547 02c3 34030000 		.4byte	0x334
 2548 02c7 0B       		.uleb128 0xb
 2549 02c8 EB070000 		.4byte	.LASF49
 2550 02cc 09       		.byte	0x9
 2551 02cd 23       		.byte	0x23
 2552 02ce 68000000 		.4byte	0x68
 2553 02d2 00       		.byte	0
 2554 02d3 0B       		.uleb128 0xb
 2555 02d4 E1040000 		.4byte	.LASF50
 2556 02d8 09       		.byte	0x9
 2557 02d9 24       		.byte	0x24
 2558 02da 68000000 		.4byte	0x68
 2559 02de 04       		.byte	0x4
 2560 02df 0B       		.uleb128 0xb
 2561 02e0 0F000000 		.4byte	.LASF51
 2562 02e4 09       		.byte	0x9
 2563 02e5 25       		.byte	0x25
 2564 02e6 68000000 		.4byte	0x68
 2565 02ea 08       		.byte	0x8
 2566 02eb 0B       		.uleb128 0xb
 2567 02ec DA070000 		.4byte	.LASF52
 2568 02f0 09       		.byte	0x9
 2569 02f1 26       		.byte	0x26
 2570 02f2 68000000 		.4byte	0x68
 2571 02f6 0C       		.byte	0xc
 2572 02f7 0B       		.uleb128 0xb
 2573 02f8 16030000 		.4byte	.LASF53
 2574 02fc 09       		.byte	0x9
 2575 02fd 27       		.byte	0x27
 2576 02fe 68000000 		.4byte	0x68
 2577 0302 10       		.byte	0x10
 2578 0303 0B       		.uleb128 0xb
 2579 0304 39030000 		.4byte	.LASF54
 2580 0308 09       		.byte	0x9
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 62


 2581 0309 28       		.byte	0x28
 2582 030a 68000000 		.4byte	0x68
 2583 030e 14       		.byte	0x14
 2584 030f 0B       		.uleb128 0xb
 2585 0310 16070000 		.4byte	.LASF55
 2586 0314 09       		.byte	0x9
 2587 0315 29       		.byte	0x29
 2588 0316 68000000 		.4byte	0x68
 2589 031a 18       		.byte	0x18
 2590 031b 0B       		.uleb128 0xb
 2591 031c 08050000 		.4byte	.LASF56
 2592 0320 09       		.byte	0x9
 2593 0321 2A       		.byte	0x2a
 2594 0322 68000000 		.4byte	0x68
 2595 0326 1C       		.byte	0x1c
 2596 0327 0B       		.uleb128 0xb
 2597 0328 1D040000 		.4byte	.LASF57
 2598 032c 09       		.byte	0x9
 2599 032d 2B       		.byte	0x2b
 2600 032e 68000000 		.4byte	0x68
 2601 0332 20       		.byte	0x20
 2602 0333 00       		.byte	0
 2603 0334 09       		.uleb128 0x9
 2604 0335 2C       		.byte	0x2c
 2605 0336 0A       		.byte	0xa
 2606 0337 14       		.byte	0x14
 2607 0338 61030000 		.4byte	0x361
 2608 033c 0A       		.uleb128 0xa
 2609 033d 6B657900 		.ascii	"key\000"
 2610 0341 0A       		.byte	0xa
 2611 0342 15       		.byte	0x15
 2612 0343 61030000 		.4byte	0x361
 2613 0347 00       		.byte	0
 2614 0348 0B       		.uleb128 0xb
 2615 0349 2E030000 		.4byte	.LASF58
 2616 034d 0A       		.byte	0xa
 2617 034e 16       		.byte	0x16
 2618 034f 61030000 		.4byte	0x361
 2619 0353 14       		.byte	0x14
 2620 0354 0B       		.uleb128 0xb
 2621 0355 40050000 		.4byte	.LASF59
 2622 0359 0A       		.byte	0xa
 2623 035a 17       		.byte	0x17
 2624 035b BD000000 		.4byte	0xbd
 2625 035f 28       		.byte	0x28
 2626 0360 00       		.byte	0
 2627 0361 07       		.uleb128 0x7
 2628 0362 D7000000 		.4byte	0xd7
 2629 0366 71030000 		.4byte	0x371
 2630 036a 08       		.uleb128 0x8
 2631 036b E5000000 		.4byte	0xe5
 2632 036f 13       		.byte	0x13
 2633 0370 00       		.byte	0
 2634 0371 03       		.uleb128 0x3
 2635 0372 74030000 		.4byte	.LASF60
 2636 0376 0A       		.byte	0xa
 2637 0377 19       		.byte	0x19
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 63


 2638 0378 34030000 		.4byte	0x334
 2639 037c 09       		.uleb128 0x9
 2640 037d 3C       		.byte	0x3c
 2641 037e 0B       		.byte	0xb
 2642 037f 36       		.byte	0x36
 2643 0380 A9030000 		.4byte	0x3a9
 2644 0384 0B       		.uleb128 0xb
 2645 0385 D3070000 		.4byte	.LASF61
 2646 0389 0B       		.byte	0xb
 2647 038a 37       		.byte	0x37
 2648 038b 61030000 		.4byte	0x361
 2649 038f 00       		.byte	0
 2650 0390 0B       		.uleb128 0xb
 2651 0391 E2020000 		.4byte	.LASF62
 2652 0395 0B       		.byte	0xb
 2653 0396 38       		.byte	0x38
 2654 0397 61030000 		.4byte	0x361
 2655 039b 14       		.byte	0x14
 2656 039c 0B       		.uleb128 0xb
 2657 039d 89060000 		.4byte	.LASF63
 2658 03a1 0B       		.byte	0xb
 2659 03a2 39       		.byte	0x39
 2660 03a3 61030000 		.4byte	0x361
 2661 03a7 28       		.byte	0x28
 2662 03a8 00       		.byte	0
 2663 03a9 03       		.uleb128 0x3
 2664 03aa 40020000 		.4byte	.LASF64
 2665 03ae 0B       		.byte	0xb
 2666 03af 3B       		.byte	0x3b
 2667 03b0 7C030000 		.4byte	0x37c
 2668 03b4 09       		.uleb128 0x9
 2669 03b5 20       		.byte	0x20
 2670 03b6 0B       		.byte	0xb
 2671 03b7 3D       		.byte	0x3d
 2672 03b8 1D040000 		.4byte	0x41d
 2673 03bc 0B       		.uleb128 0xb
 2674 03bd 4D020000 		.4byte	.LASF65
 2675 03c1 0B       		.byte	0xb
 2676 03c2 3E       		.byte	0x3e
 2677 03c3 68000000 		.4byte	0x68
 2678 03c7 00       		.byte	0
 2679 03c8 0A       		.uleb128 0xa
 2680 03c9 62657200 		.ascii	"ber\000"
 2681 03cd 0B       		.byte	0xb
 2682 03ce 3F       		.byte	0x3f
 2683 03cf 68000000 		.4byte	0x68
 2684 03d3 04       		.byte	0x4
 2685 03d4 0B       		.uleb128 0xb
 2686 03d5 67060000 		.4byte	.LASF66
 2687 03d9 0B       		.byte	0xb
 2688 03da 40       		.byte	0x40
 2689 03db 68000000 		.4byte	0x68
 2690 03df 08       		.byte	0x8
 2691 03e0 0B       		.uleb128 0xb
 2692 03e1 C4010000 		.4byte	.LASF67
 2693 03e5 0B       		.byte	0xb
 2694 03e6 41       		.byte	0x41
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 64


 2695 03e7 68000000 		.4byte	0x68
 2696 03eb 0C       		.byte	0xc
 2697 03ec 0B       		.uleb128 0xb
 2698 03ed 32060000 		.4byte	.LASF68
 2699 03f1 0B       		.byte	0xb
 2700 03f2 42       		.byte	0x42
 2701 03f3 68000000 		.4byte	0x68
 2702 03f7 10       		.byte	0x10
 2703 03f8 0B       		.uleb128 0xb
 2704 03f9 2D060000 		.4byte	.LASF69
 2705 03fd 0B       		.byte	0xb
 2706 03fe 43       		.byte	0x43
 2707 03ff 68000000 		.4byte	0x68
 2708 0403 14       		.byte	0x14
 2709 0404 0B       		.uleb128 0xb
 2710 0405 D7010000 		.4byte	.LASF70
 2711 0409 0B       		.byte	0xb
 2712 040a 44       		.byte	0x44
 2713 040b 68000000 		.4byte	0x68
 2714 040f 18       		.byte	0x18
 2715 0410 0B       		.uleb128 0xb
 2716 0411 5C020000 		.4byte	.LASF71
 2717 0415 0B       		.byte	0xb
 2718 0416 45       		.byte	0x45
 2719 0417 68000000 		.4byte	0x68
 2720 041b 1C       		.byte	0x1c
 2721 041c 00       		.byte	0
 2722 041d 03       		.uleb128 0x3
 2723 041e E0060000 		.4byte	.LASF72
 2724 0422 0B       		.byte	0xb
 2725 0423 47       		.byte	0x47
 2726 0424 B4030000 		.4byte	0x3b4
 2727 0428 09       		.uleb128 0x9
 2728 0429 07       		.byte	0x7
 2729 042a 0B       		.byte	0xb
 2730 042b 53       		.byte	0x53
 2731 042c 85040000 		.4byte	0x485
 2732 0430 0B       		.uleb128 0xb
 2733 0431 BB020000 		.4byte	.LASF73
 2734 0435 0B       		.byte	0xb
 2735 0436 55       		.byte	0x55
 2736 0437 81000000 		.4byte	0x81
 2737 043b 00       		.byte	0
 2738 043c 0B       		.uleb128 0xb
 2739 043d 74080000 		.4byte	.LASF74
 2740 0441 0B       		.byte	0xb
 2741 0442 57       		.byte	0x57
 2742 0443 85040000 		.4byte	0x485
 2743 0447 01       		.byte	0x1
 2744 0448 0B       		.uleb128 0xb
 2745 0449 BB080000 		.4byte	.LASF75
 2746 044d 0B       		.byte	0xb
 2747 044e 59       		.byte	0x59
 2748 044f 81000000 		.4byte	0x81
 2749 0453 02       		.byte	0x2
 2750 0454 0B       		.uleb128 0xb
 2751 0455 4E060000 		.4byte	.LASF76
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 65


 2752 0459 0B       		.byte	0xb
 2753 045a 5B       		.byte	0x5b
 2754 045b 81000000 		.4byte	0x81
 2755 045f 03       		.byte	0x3
 2756 0460 0B       		.uleb128 0xb
 2757 0461 1D030000 		.4byte	.LASF77
 2758 0465 0B       		.byte	0xb
 2759 0466 5E       		.byte	0x5e
 2760 0467 81000000 		.4byte	0x81
 2761 046b 04       		.byte	0x4
 2762 046c 0B       		.uleb128 0xb
 2763 046d 1D080000 		.4byte	.LASF78
 2764 0471 0B       		.byte	0xb
 2765 0472 63       		.byte	0x63
 2766 0473 81000000 		.4byte	0x81
 2767 0477 05       		.byte	0x5
 2768 0478 0B       		.uleb128 0xb
 2769 0479 1E070000 		.4byte	.LASF79
 2770 047d 0B       		.byte	0xb
 2771 047e 65       		.byte	0x65
 2772 047f 81000000 		.4byte	0x81
 2773 0483 06       		.byte	0x6
 2774 0484 00       		.byte	0
 2775 0485 02       		.uleb128 0x2
 2776 0486 01       		.byte	0x1
 2777 0487 02       		.byte	0x2
 2778 0488 01060000 		.4byte	.LASF80
 2779 048c 03       		.uleb128 0x3
 2780 048d AE040000 		.4byte	.LASF81
 2781 0491 0B       		.byte	0xb
 2782 0492 67       		.byte	0x67
 2783 0493 28040000 		.4byte	0x428
 2784 0497 09       		.uleb128 0x9
 2785 0498 06       		.byte	0x6
 2786 0499 0C       		.byte	0xc
 2787 049a 2E       		.byte	0x2e
 2788 049b D0040000 		.4byte	0x4d0
 2789 049f 0B       		.uleb128 0xb
 2790 04a0 FE020000 		.4byte	.LASF82
 2791 04a4 0C       		.byte	0xc
 2792 04a5 30       		.byte	0x30
 2793 04a6 8D000000 		.4byte	0x8d
 2794 04aa 00       		.byte	0
 2795 04ab 0B       		.uleb128 0xb
 2796 04ac 5E080000 		.4byte	.LASF83
 2797 04b0 0C       		.byte	0xc
 2798 04b1 31       		.byte	0x31
 2799 04b2 B1000000 		.4byte	0xb1
 2800 04b6 02       		.byte	0x2
 2801 04b7 0B       		.uleb128 0xb
 2802 04b8 50080000 		.4byte	.LASF84
 2803 04bc 0C       		.byte	0xc
 2804 04bd 32       		.byte	0x32
 2805 04be 81000000 		.4byte	0x81
 2806 04c2 04       		.byte	0x4
 2807 04c3 0B       		.uleb128 0xb
 2808 04c4 89000000 		.4byte	.LASF85
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 66


 2809 04c8 0C       		.byte	0xc
 2810 04c9 33       		.byte	0x33
 2811 04ca 81000000 		.4byte	0x81
 2812 04ce 05       		.byte	0x5
 2813 04cf 00       		.byte	0
 2814 04d0 03       		.uleb128 0x3
 2815 04d1 6F020000 		.4byte	.LASF86
 2816 04d5 0C       		.byte	0xc
 2817 04d6 36       		.byte	0x36
 2818 04d7 DB040000 		.4byte	0x4db
 2819 04db 0C       		.uleb128 0xc
 2820 04dc 97040000 		.4byte	0x497
 2821 04e0 09       		.uleb128 0x9
 2822 04e1 1C       		.byte	0x1c
 2823 04e2 0C       		.byte	0xc
 2824 04e3 39       		.byte	0x39
 2825 04e4 01050000 		.4byte	0x501
 2826 04e8 0B       		.uleb128 0xb
 2827 04e9 26040000 		.4byte	.LASF87
 2828 04ed 0C       		.byte	0xc
 2829 04ee 3B       		.byte	0x3b
 2830 04ef 01050000 		.4byte	0x501
 2831 04f3 00       		.byte	0
 2832 04f4 0B       		.uleb128 0xb
 2833 04f5 AD080000 		.4byte	.LASF88
 2834 04f9 0C       		.byte	0xc
 2835 04fa 3C       		.byte	0x3c
 2836 04fb F2000000 		.4byte	0xf2
 2837 04ff 04       		.byte	0x4
 2838 0500 00       		.byte	0
 2839 0501 06       		.uleb128 0x6
 2840 0502 04       		.byte	0x4
 2841 0503 A9030000 		.4byte	0x3a9
 2842 0507 03       		.uleb128 0x3
 2843 0508 A3040000 		.4byte	.LASF89
 2844 050c 0C       		.byte	0xc
 2845 050d 3E       		.byte	0x3e
 2846 050e E0040000 		.4byte	0x4e0
 2847 0512 09       		.uleb128 0x9
 2848 0513 68       		.byte	0x68
 2849 0514 0C       		.byte	0xc
 2850 0515 44       		.byte	0x44
 2851 0516 33050000 		.4byte	0x533
 2852 051a 0B       		.uleb128 0xb
 2853 051b 31040000 		.4byte	.LASF90
 2854 051f 0C       		.byte	0xc
 2855 0520 49       		.byte	0x49
 2856 0521 33050000 		.4byte	0x533
 2857 0525 00       		.byte	0
 2858 0526 0B       		.uleb128 0xb
 2859 0527 15040000 		.4byte	.LASF91
 2860 052b 0C       		.byte	0xc
 2861 052c 4A       		.byte	0x4a
 2862 052d 68000000 		.4byte	0x68
 2863 0531 64       		.byte	0x64
 2864 0532 00       		.byte	0
 2865 0533 07       		.uleb128 0x7
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 67


 2866 0534 D7000000 		.4byte	0xd7
 2867 0538 43050000 		.4byte	0x543
 2868 053c 08       		.uleb128 0x8
 2869 053d E5000000 		.4byte	0xe5
 2870 0541 63       		.byte	0x63
 2871 0542 00       		.byte	0
 2872 0543 03       		.uleb128 0x3
 2873 0544 10050000 		.4byte	.LASF92
 2874 0548 0C       		.byte	0xc
 2875 0549 50       		.byte	0x50
 2876 054a 12050000 		.4byte	0x512
 2877 054e 0F       		.uleb128 0xf
 2878 054f A1000000 		.4byte	.LASF172
 2879 0553 01       		.byte	0x1
 2880 0554 14       		.byte	0x14
 2881 0555 00000000 		.4byte	.LFB64
 2882 0559 0C000000 		.4byte	.LFE64-.LFB64
 2883 055d 01       		.uleb128 0x1
 2884 055e 9C       		.byte	0x9c
 2885 055f 10       		.uleb128 0x10
 2886 0560 9D080000 		.4byte	.LASF105
 2887 0564 01       		.byte	0x1
 2888 0565 28       		.byte	0x28
 2889 0566 00000000 		.4byte	.LFB65
 2890 056a 58010000 		.4byte	.LFE65-.LFB65
 2891 056e 01       		.uleb128 0x1
 2892 056f 9C       		.byte	0x9c
 2893 0570 91050000 		.4byte	0x591
 2894 0574 11       		.uleb128 0x11
 2895 0575 92070000 		.4byte	.LASF93
 2896 0579 01       		.byte	0x1
 2897 057a 3C       		.byte	0x3c
 2898 057b 91050000 		.4byte	0x591
 2899 057f 02       		.uleb128 0x2
 2900 0580 91       		.byte	0x91
 2901 0581 64       		.sleb128 -28
 2902 0582 11       		.uleb128 0x11
 2903 0583 C5030000 		.4byte	.LASF94
 2904 0587 01       		.byte	0x1
 2905 0588 64       		.byte	0x64
 2906 0589 81000000 		.4byte	0x81
 2907 058d 02       		.uleb128 0x2
 2908 058e 91       		.byte	0x91
 2909 058f 6F       		.sleb128 -17
 2910 0590 00       		.byte	0
 2911 0591 07       		.uleb128 0x7
 2912 0592 99000000 		.4byte	0x99
 2913 0596 A1050000 		.4byte	0x5a1
 2914 059a 08       		.uleb128 0x8
 2915 059b E5000000 		.4byte	0xe5
 2916 059f 01       		.byte	0x1
 2917 05a0 00       		.byte	0
 2918 05a1 12       		.uleb128 0x12
 2919 05a2 3E040000 		.4byte	.LASF96
 2920 05a6 01       		.byte	0x1
 2921 05a7 6E       		.byte	0x6e
 2922 05a8 68000000 		.4byte	0x68
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 68


 2923 05ac 00000000 		.4byte	.LFB66
 2924 05b0 A0000000 		.4byte	.LFE66-.LFB66
 2925 05b4 01       		.uleb128 0x1
 2926 05b5 9C       		.byte	0x9c
 2927 05b6 C9050000 		.4byte	0x5c9
 2928 05ba 11       		.uleb128 0x11
 2929 05bb E5050000 		.4byte	.LASF95
 2930 05bf 01       		.byte	0x1
 2931 05c0 96       		.byte	0x96
 2932 05c1 81000000 		.4byte	0x81
 2933 05c5 02       		.uleb128 0x2
 2934 05c6 91       		.byte	0x91
 2935 05c7 77       		.sleb128 -9
 2936 05c8 00       		.byte	0
 2937 05c9 13       		.uleb128 0x13
 2938 05ca B8070000 		.4byte	.LASF173
 2939 05ce 01       		.byte	0x1
 2940 05cf A6       		.byte	0xa6
 2941 05d0 00000000 		.4byte	.LFB67
 2942 05d4 2A000000 		.4byte	.LFE67-.LFB67
 2943 05d8 01       		.uleb128 0x1
 2944 05d9 9C       		.byte	0x9c
 2945 05da 14       		.uleb128 0x14
 2946 05db 80030000 		.4byte	.LASF97
 2947 05df 01       		.byte	0x1
 2948 05e0 CB       		.byte	0xcb
 2949 05e1 00000000 		.4byte	.LFB68
 2950 05e5 8C000000 		.4byte	.LFE68-.LFB68
 2951 05e9 01       		.uleb128 0x1
 2952 05ea 9C       		.byte	0x9c
 2953 05eb FE050000 		.4byte	0x5fe
 2954 05ef 15       		.uleb128 0x15
 2955 05f0 C5040000 		.4byte	.LASF98
 2956 05f4 01       		.byte	0x1
 2957 05f5 CB       		.byte	0xcb
 2958 05f6 81000000 		.4byte	0x81
 2959 05fa 02       		.uleb128 0x2
 2960 05fb 91       		.byte	0x91
 2961 05fc 77       		.sleb128 -9
 2962 05fd 00       		.byte	0
 2963 05fe 16       		.uleb128 0x16
 2964 05ff 92080000 		.4byte	.LASF102
 2965 0603 01       		.byte	0x1
 2966 0604 EB       		.byte	0xeb
 2967 0605 81000000 		.4byte	0x81
 2968 0609 00000000 		.4byte	.LFB69
 2969 060d 48000000 		.4byte	.LFE69-.LFB69
 2970 0611 01       		.uleb128 0x1
 2971 0612 9C       		.byte	0x9c
 2972 0613 34060000 		.4byte	0x634
 2973 0617 15       		.uleb128 0x15
 2974 0618 EE040000 		.4byte	.LASF99
 2975 061c 01       		.byte	0x1
 2976 061d EB       		.byte	0xeb
 2977 061e 34060000 		.4byte	0x634
 2978 0622 02       		.uleb128 0x2
 2979 0623 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 69


 2980 0624 74       		.sleb128 -12
 2981 0625 15       		.uleb128 0x15
 2982 0626 C5040000 		.4byte	.LASF98
 2983 062a 01       		.byte	0x1
 2984 062b EB       		.byte	0xeb
 2985 062c 81000000 		.4byte	0x81
 2986 0630 02       		.uleb128 0x2
 2987 0631 91       		.byte	0x91
 2988 0632 73       		.sleb128 -13
 2989 0633 00       		.byte	0
 2990 0634 06       		.uleb128 0x6
 2991 0635 04       		.byte	0x4
 2992 0636 D0040000 		.4byte	0x4d0
 2993 063a 17       		.uleb128 0x17
 2994 063b 37060000 		.4byte	.LASF100
 2995 063f 01       		.byte	0x1
 2996 0640 0001     		.2byte	0x100
 2997 0642 00000000 		.4byte	.LFB70
 2998 0646 1E000000 		.4byte	.LFE70-.LFB70
 2999 064a 01       		.uleb128 0x1
 3000 064b 9C       		.byte	0x9c
 3001 064c 60060000 		.4byte	0x660
 3002 0650 18       		.uleb128 0x18
 3003 0651 95060000 		.4byte	.LASF101
 3004 0655 01       		.byte	0x1
 3005 0656 0001     		.2byte	0x100
 3006 0658 34060000 		.4byte	0x634
 3007 065c 02       		.uleb128 0x2
 3008 065d 91       		.byte	0x91
 3009 065e 74       		.sleb128 -12
 3010 065f 00       		.byte	0
 3011 0660 19       		.uleb128 0x19
 3012 0661 6D050000 		.4byte	.LASF103
 3013 0665 01       		.byte	0x1
 3014 0666 0901     		.2byte	0x109
 3015 0668 D0040000 		.4byte	0x4d0
 3016 066c 00000000 		.4byte	.LFB71
 3017 0670 46000000 		.4byte	.LFE71-.LFB71
 3018 0674 01       		.uleb128 0x1
 3019 0675 9C       		.byte	0x9c
 3020 0676 B7060000 		.4byte	0x6b7
 3021 067a 18       		.uleb128 0x18
 3022 067b FE020000 		.4byte	.LASF82
 3023 067f 01       		.byte	0x1
 3024 0680 0901     		.2byte	0x109
 3025 0682 8D000000 		.4byte	0x8d
 3026 0686 02       		.uleb128 0x2
 3027 0687 91       		.byte	0x91
 3028 0688 6A       		.sleb128 -22
 3029 0689 18       		.uleb128 0x18
 3030 068a 50080000 		.4byte	.LASF84
 3031 068e 01       		.byte	0x1
 3032 068f 0901     		.2byte	0x109
 3033 0691 81000000 		.4byte	0x81
 3034 0695 02       		.uleb128 0x2
 3035 0696 91       		.byte	0x91
 3036 0697 69       		.sleb128 -23
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 70


 3037 0698 18       		.uleb128 0x18
 3038 0699 89000000 		.4byte	.LASF85
 3039 069d 01       		.byte	0x1
 3040 069e 0901     		.2byte	0x109
 3041 06a0 81000000 		.4byte	0x81
 3042 06a4 02       		.uleb128 0x2
 3043 06a5 91       		.byte	0x91
 3044 06a6 68       		.sleb128 -24
 3045 06a7 1A       		.uleb128 0x1a
 3046 06a8 E2070000 		.4byte	.LASF104
 3047 06ac 01       		.byte	0x1
 3048 06ad 0C01     		.2byte	0x10c
 3049 06af D0040000 		.4byte	0x4d0
 3050 06b3 02       		.uleb128 0x2
 3051 06b4 91       		.byte	0x91
 3052 06b5 70       		.sleb128 -16
 3053 06b6 00       		.byte	0
 3054 06b7 1B       		.uleb128 0x1b
 3055 06b8 A4060000 		.4byte	.LASF106
 3056 06bc 01       		.byte	0x1
 3057 06bd 2201     		.2byte	0x122
 3058 06bf 00000000 		.4byte	.LFB72
 3059 06c3 04010000 		.4byte	.LFE72-.LFB72
 3060 06c7 01       		.uleb128 0x1
 3061 06c8 9C       		.byte	0x9c
 3062 06c9 1E070000 		.4byte	0x71e
 3063 06cd 1A       		.uleb128 0x1a
 3064 06ce 9F010000 		.4byte	.LASF107
 3065 06d2 01       		.byte	0x1
 3066 06d3 2A01     		.2byte	0x12a
 3067 06d5 C9010000 		.4byte	0x1c9
 3068 06d9 03       		.uleb128 0x3
 3069 06da 91       		.byte	0x91
 3070 06db EC7C     		.sleb128 -404
 3071 06dd 1A       		.uleb128 0x1a
 3072 06de 2A080000 		.4byte	.LASF108
 3073 06e2 01       		.byte	0x1
 3074 06e3 2E01     		.2byte	0x12e
 3075 06e5 C9010000 		.4byte	0x1c9
 3076 06e9 03       		.uleb128 0x3
 3077 06ea 91       		.byte	0x91
 3078 06eb E879     		.sleb128 -792
 3079 06ed 1A       		.uleb128 0x1a
 3080 06ee 3A010000 		.4byte	.LASF109
 3081 06f2 01       		.byte	0x1
 3082 06f3 3201     		.2byte	0x132
 3083 06f5 C9010000 		.4byte	0x1c9
 3084 06f9 03       		.uleb128 0x3
 3085 06fa 91       		.byte	0x91
 3086 06fb E476     		.sleb128 -1180
 3087 06fd 1A       		.uleb128 0x1a
 3088 06fe 6C040000 		.4byte	.LASF110
 3089 0702 01       		.byte	0x1
 3090 0703 3601     		.2byte	0x136
 3091 0705 C9010000 		.4byte	0x1c9
 3092 0709 03       		.uleb128 0x3
 3093 070a 91       		.byte	0x91
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 71


 3094 070b E073     		.sleb128 -1568
 3095 070d 1A       		.uleb128 0x1a
 3096 070e 00000000 		.4byte	.LASF111
 3097 0712 01       		.byte	0x1
 3098 0713 3A01     		.2byte	0x13a
 3099 0715 C9010000 		.4byte	0x1c9
 3100 0719 03       		.uleb128 0x3
 3101 071a 91       		.byte	0x91
 3102 071b DC70     		.sleb128 -1956
 3103 071d 00       		.byte	0
 3104 071e 1C       		.uleb128 0x1c
 3105 071f A8080000 		.4byte	.LASF174
 3106 0723 01       		.byte	0x1
 3107 0724 4501     		.2byte	0x145
 3108 0726 68000000 		.4byte	0x68
 3109 072a 00000000 		.4byte	.LFB73
 3110 072e 1E000000 		.4byte	.LFE73-.LFB73
 3111 0732 01       		.uleb128 0x1
 3112 0733 9C       		.byte	0x9c
 3113 0734 1D       		.uleb128 0x1d
 3114 0735 C5020000 		.4byte	.LASF112
 3115 0739 01       		.byte	0x1
 3116 073a 5B01     		.2byte	0x15b
 3117 073c 81000000 		.4byte	0x81
 3118 0740 00000000 		.4byte	.LFB74
 3119 0744 5C040000 		.4byte	.LFE74-.LFB74
 3120 0748 01       		.uleb128 0x1
 3121 0749 9C       		.byte	0x9c
 3122 074a 9E080000 		.4byte	0x89e
 3123 074e 1E       		.uleb128 0x1e
 3124 074f 62000000 		.4byte	.LBB2
 3125 0753 CC030000 		.4byte	.LBE2-.LBB2
 3126 0757 1A       		.uleb128 0x1a
 3127 0758 80050000 		.4byte	.LASF113
 3128 075c 01       		.byte	0x1
 3129 075d 8B01     		.2byte	0x18b
 3130 075f 61030000 		.4byte	0x361
 3131 0763 02       		.uleb128 0x2
 3132 0764 91       		.byte	0x91
 3133 0765 48       		.sleb128 -56
 3134 0766 1A       		.uleb128 0x1a
 3135 0767 BA050000 		.4byte	.LASF114
 3136 076b 01       		.byte	0x1
 3137 076c 8F01     		.2byte	0x18f
 3138 076e 61030000 		.4byte	0x361
 3139 0772 03       		.uleb128 0x3
 3140 0773 91       		.byte	0x91
 3141 0774 B47F     		.sleb128 -76
 3142 0776 1A       		.uleb128 0x1a
 3143 0777 90020000 		.4byte	.LASF115
 3144 077b 01       		.byte	0x1
 3145 077c 9401     		.2byte	0x194
 3146 077e 61030000 		.4byte	0x361
 3147 0782 03       		.uleb128 0x3
 3148 0783 91       		.byte	0x91
 3149 0784 A07F     		.sleb128 -96
 3150 0786 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 72


 3151 0787 D1030000 		.4byte	.LASF116
 3152 078b 01       		.byte	0x1
 3153 078c A701     		.2byte	0x1a7
 3154 078e 8D000000 		.4byte	0x8d
 3155 0792 02       		.uleb128 0x2
 3156 0793 91       		.byte	0x91
 3157 0794 66       		.sleb128 -26
 3158 0795 1A       		.uleb128 0x1a
 3159 0796 57040000 		.4byte	.LASF117
 3160 079a 01       		.byte	0x1
 3161 079b A801     		.2byte	0x1a8
 3162 079d 61030000 		.4byte	0x361
 3163 07a1 03       		.uleb128 0x3
 3164 07a2 91       		.byte	0x91
 3165 07a3 8C7F     		.sleb128 -116
 3166 07a5 1A       		.uleb128 0x1a
 3167 07a6 7D070000 		.4byte	.LASF118
 3168 07aa 01       		.byte	0x1
 3169 07ab BD01     		.2byte	0x1bd
 3170 07ad 9E080000 		.4byte	0x89e
 3171 07b1 03       		.uleb128 0x3
 3172 07b2 91       		.byte	0x91
 3173 07b3 A475     		.sleb128 -1372
 3174 07b5 1A       		.uleb128 0x1a
 3175 07b6 FD070000 		.4byte	.LASF30
 3176 07ba 01       		.byte	0x1
 3177 07bb BE01     		.2byte	0x1be
 3178 07bd 81000000 		.4byte	0x81
 3179 07c1 02       		.uleb128 0x2
 3180 07c2 91       		.byte	0x91
 3181 07c3 65       		.sleb128 -27
 3182 07c4 1A       		.uleb128 0x1a
 3183 07c5 4F070000 		.4byte	.LASF119
 3184 07c9 01       		.byte	0x1
 3185 07ca C501     		.2byte	0x1c5
 3186 07cc EC000000 		.4byte	0xec
 3187 07d0 02       		.uleb128 0x2
 3188 07d1 91       		.byte	0x91
 3189 07d2 6C       		.sleb128 -20
 3190 07d3 1A       		.uleb128 0x1a
 3191 07d4 BC010000 		.4byte	.LASF120
 3192 07d8 01       		.byte	0x1
 3193 07d9 C901     		.2byte	0x1c9
 3194 07db A5000000 		.4byte	0xa5
 3195 07df 02       		.uleb128 0x2
 3196 07e0 91       		.byte	0x91
 3197 07e1 64       		.sleb128 -28
 3198 07e2 1A       		.uleb128 0x1a
 3199 07e3 CE020000 		.4byte	.LASF121
 3200 07e7 01       		.byte	0x1
 3201 07e8 F901     		.2byte	0x1f9
 3202 07ea 4C000000 		.4byte	0x4c
 3203 07ee 02       		.uleb128 0x2
 3204 07ef 91       		.byte	0x91
 3205 07f0 5C       		.sleb128 -36
 3206 07f1 1F       		.uleb128 0x1f
 3207 07f2 F0000000 		.4byte	.LBB3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 73


 3208 07f6 2C000000 		.4byte	.LBE3-.LBB3
 3209 07fa 1E080000 		.4byte	0x81e
 3210 07fe 1A       		.uleb128 0x1a
 3211 07ff D0060000 		.4byte	.LASF122
 3212 0803 01       		.byte	0x1
 3213 0804 9C01     		.2byte	0x19c
 3214 0806 8D000000 		.4byte	0x8d
 3215 080a 02       		.uleb128 0x2
 3216 080b 91       		.byte	0x91
 3217 080c 68       		.sleb128 -24
 3218 080d 1A       		.uleb128 0x1a
 3219 080e 2E020000 		.4byte	.LASF123
 3220 0812 01       		.byte	0x1
 3221 0813 9D01     		.2byte	0x19d
 3222 0815 61030000 		.4byte	0x361
 3223 0819 03       		.uleb128 0x3
 3224 081a 91       		.byte	0x91
 3225 081b F87E     		.sleb128 -136
 3226 081d 00       		.byte	0
 3227 081e 1F       		.uleb128 0x1f
 3228 081f 1E010000 		.4byte	.LBB4
 3229 0823 20000000 		.4byte	.LBE4-.LBB4
 3230 0827 3C080000 		.4byte	0x83c
 3231 082b 1A       		.uleb128 0x1a
 3232 082c 2E020000 		.4byte	.LASF123
 3233 0830 01       		.byte	0x1
 3234 0831 A101     		.2byte	0x1a1
 3235 0833 61030000 		.4byte	0x361
 3236 0837 03       		.uleb128 0x3
 3237 0838 91       		.byte	0x91
 3238 0839 E47E     		.sleb128 -156
 3239 083b 00       		.byte	0
 3240 083c 1F       		.uleb128 0x1f
 3241 083d 5E020000 		.4byte	.LBB5
 3242 0841 4C010000 		.4byte	.LBE5-.LBB5
 3243 0845 73080000 		.4byte	0x873
 3244 0849 1A       		.uleb128 0x1a
 3245 084a 79050000 		.4byte	.LASF124
 3246 084e 01       		.byte	0x1
 3247 084f CE01     		.2byte	0x1ce
 3248 0851 A5000000 		.4byte	0xa5
 3249 0855 02       		.uleb128 0x2
 3250 0856 91       		.byte	0x91
 3251 0857 6B       		.sleb128 -21
 3252 0858 1E       		.uleb128 0x1e
 3253 0859 66020000 		.4byte	.LBB6
 3254 085d 28010000 		.4byte	.LBE6-.LBB6
 3255 0861 1A       		.uleb128 0x1a
 3256 0862 9E030000 		.4byte	.LASF125
 3257 0866 01       		.byte	0x1
 3258 0867 D001     		.2byte	0x1d0
 3259 0869 AE080000 		.4byte	0x8ae
 3260 086d 03       		.uleb128 0x3
 3261 086e 91       		.byte	0x91
 3262 086f EC76     		.sleb128 -1172
 3263 0871 00       		.byte	0
 3264 0872 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 74


 3265 0873 1E       		.uleb128 0x1e
 3266 0874 C4030000 		.4byte	.LBB7
 3267 0878 3A000000 		.4byte	.LBE7-.LBB7
 3268 087c 1A       		.uleb128 0x1a
 3269 087d 9E020000 		.4byte	.LASF126
 3270 0881 01       		.byte	0x1
 3271 0882 F001     		.2byte	0x1f0
 3272 0884 68000000 		.4byte	0x68
 3273 0888 02       		.uleb128 0x2
 3274 0889 91       		.byte	0x91
 3275 088a 60       		.sleb128 -32
 3276 088b 1A       		.uleb128 0x1a
 3277 088c 42060000 		.4byte	.LASF127
 3278 0890 01       		.byte	0x1
 3279 0891 F101     		.2byte	0x1f1
 3280 0893 BF080000 		.4byte	0x8bf
 3281 0897 03       		.uleb128 0x3
 3282 0898 91       		.byte	0x91
 3283 0899 D87E     		.sleb128 -168
 3284 089b 00       		.byte	0
 3285 089c 00       		.byte	0
 3286 089d 00       		.byte	0
 3287 089e 07       		.uleb128 0x7
 3288 089f D7000000 		.4byte	0xd7
 3289 08a3 AE080000 		.4byte	0x8ae
 3290 08a7 08       		.uleb128 0x8
 3291 08a8 E5000000 		.4byte	0xe5
 3292 08ac C7       		.byte	0xc7
 3293 08ad 00       		.byte	0
 3294 08ae 07       		.uleb128 0x7
 3295 08af D7000000 		.4byte	0xd7
 3296 08b3 BF080000 		.4byte	0x8bf
 3297 08b7 20       		.uleb128 0x20
 3298 08b8 E5000000 		.4byte	0xe5
 3299 08bc E803     		.2byte	0x3e8
 3300 08be 00       		.byte	0
 3301 08bf 07       		.uleb128 0x7
 3302 08c0 D7000000 		.4byte	0xd7
 3303 08c4 CF080000 		.4byte	0x8cf
 3304 08c8 08       		.uleb128 0x8
 3305 08c9 E5000000 		.4byte	0xe5
 3306 08cd 09       		.byte	0x9
 3307 08ce 00       		.byte	0
 3308 08cf 1D       		.uleb128 0x1d
 3309 08d0 C1050000 		.4byte	.LASF128
 3310 08d4 01       		.byte	0x1
 3311 08d5 0E02     		.2byte	0x20e
 3312 08d7 81000000 		.4byte	0x81
 3313 08db 00000000 		.4byte	.LFB75
 3314 08df 44000000 		.4byte	.LFE75-.LFB75
 3315 08e3 01       		.uleb128 0x1
 3316 08e4 9C       		.byte	0x9c
 3317 08e5 03090000 		.4byte	0x903
 3318 08e9 1E       		.uleb128 0x1e
 3319 08ea 20000000 		.4byte	.LBB8
 3320 08ee 1A000000 		.4byte	.LBE8-.LBB8
 3321 08f2 1A       		.uleb128 0x1a
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 75


 3322 08f3 CE020000 		.4byte	.LASF121
 3323 08f7 01       		.byte	0x1
 3324 08f8 1902     		.2byte	0x219
 3325 08fa 4C000000 		.4byte	0x4c
 3326 08fe 02       		.uleb128 0x2
 3327 08ff 91       		.byte	0x91
 3328 0900 74       		.sleb128 -12
 3329 0901 00       		.byte	0
 3330 0902 00       		.byte	0
 3331 0903 1D       		.uleb128 0x1d
 3332 0904 FF030000 		.4byte	.LASF129
 3333 0908 01       		.byte	0x1
 3334 0909 2E02     		.2byte	0x22e
 3335 090b 81000000 		.4byte	0x81
 3336 090f 00000000 		.4byte	.LFB76
 3337 0913 9C020000 		.4byte	.LFE76-.LFB76
 3338 0917 01       		.uleb128 0x1
 3339 0918 9C       		.byte	0x9c
 3340 0919 A4090000 		.4byte	0x9a4
 3341 091d 1A       		.uleb128 0x1a
 3342 091e 40050000 		.4byte	.LASF59
 3343 0922 01       		.byte	0x1
 3344 0923 3102     		.2byte	0x231
 3345 0925 4C000000 		.4byte	0x4c
 3346 0929 02       		.uleb128 0x2
 3347 092a 91       		.byte	0x91
 3348 092b 6C       		.sleb128 -20
 3349 092c 1A       		.uleb128 0x1a
 3350 092d 55070000 		.4byte	.LASF130
 3351 0931 01       		.byte	0x1
 3352 0932 3202     		.2byte	0x232
 3353 0934 A4090000 		.4byte	0x9a4
 3354 0938 02       		.uleb128 0x2
 3355 0939 91       		.byte	0x91
 3356 093a 4C       		.sleb128 -52
 3357 093b 1A       		.uleb128 0x1a
 3358 093c 2E030000 		.4byte	.LASF58
 3359 0940 01       		.byte	0x1
 3360 0941 3602     		.2byte	0x236
 3361 0943 61030000 		.4byte	0x361
 3362 0947 03       		.uleb128 0x3
 3363 0948 91       		.byte	0x91
 3364 0949 B87F     		.sleb128 -72
 3365 094b 1A       		.uleb128 0x1a
 3366 094c E7080000 		.4byte	.LASF131
 3367 0950 01       		.byte	0x1
 3368 0951 3A02     		.2byte	0x23a
 3369 0953 B4090000 		.4byte	0x9b4
 3370 0957 03       		.uleb128 0x3
 3371 0958 91       		.byte	0x91
 3372 0959 B07F     		.sleb128 -80
 3373 095b 1A       		.uleb128 0x1a
 3374 095c A9030000 		.4byte	.LASF132
 3375 0960 01       		.byte	0x1
 3376 0961 5B02     		.2byte	0x25b
 3377 0963 6D020000 		.4byte	0x26d
 3378 0967 03       		.uleb128 0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 76


 3379 0968 91       		.byte	0x91
 3380 0969 9C7F     		.sleb128 -100
 3381 096b 1F       		.uleb128 0x1f
 3382 096c 46000000 		.4byte	.LBB9
 3383 0970 78000000 		.4byte	.LBE9-.LBB9
 3384 0974 89090000 		.4byte	0x989
 3385 0978 1A       		.uleb128 0x1a
 3386 0979 9B070000 		.4byte	.LASF133
 3387 097d 01       		.byte	0x1
 3388 097e 4302     		.2byte	0x243
 3389 0980 1D020000 		.4byte	0x21d
 3390 0984 03       		.uleb128 0x3
 3391 0985 91       		.byte	0x91
 3392 0986 807F     		.sleb128 -128
 3393 0988 00       		.byte	0
 3394 0989 1E       		.uleb128 0x1e
 3395 098a 42010000 		.4byte	.LBB10
 3396 098e EE000000 		.4byte	.LBE10-.LBB10
 3397 0992 1A       		.uleb128 0x1a
 3398 0993 F2070000 		.4byte	.LASF134
 3399 0997 01       		.byte	0x1
 3400 0998 7702     		.2byte	0x277
 3401 099a B1020000 		.4byte	0x2b1
 3402 099e 03       		.uleb128 0x3
 3403 099f 91       		.byte	0x91
 3404 09a0 F07E     		.sleb128 -144
 3405 09a2 00       		.byte	0
 3406 09a3 00       		.byte	0
 3407 09a4 07       		.uleb128 0x7
 3408 09a5 D7000000 		.4byte	0xd7
 3409 09a9 B4090000 		.4byte	0x9b4
 3410 09ad 08       		.uleb128 0x8
 3411 09ae E5000000 		.4byte	0xe5
 3412 09b2 1F       		.byte	0x1f
 3413 09b3 00       		.byte	0
 3414 09b4 07       		.uleb128 0x7
 3415 09b5 D7000000 		.4byte	0xd7
 3416 09b9 C4090000 		.4byte	0x9c4
 3417 09bd 08       		.uleb128 0x8
 3418 09be E5000000 		.4byte	0xe5
 3419 09c2 04       		.byte	0x4
 3420 09c3 00       		.byte	0
 3421 09c4 21       		.uleb128 0x21
 3422 09c5 6C030000 		.4byte	.LASF135
 3423 09c9 01       		.byte	0x1
 3424 09ca 9F02     		.2byte	0x29f
 3425 09cc 81000000 		.4byte	0x81
 3426 09d0 00000000 		.4byte	.LFB77
 3427 09d4 74000000 		.4byte	.LFE77-.LFB77
 3428 09d8 01       		.uleb128 0x1
 3429 09d9 9C       		.byte	0x9c
 3430 09da 0A0A0000 		.4byte	0xa0a
 3431 09de 18       		.uleb128 0x18
 3432 09df 40050000 		.4byte	.LASF59
 3433 09e3 01       		.byte	0x1
 3434 09e4 9F02     		.2byte	0x29f
 3435 09e6 4C000000 		.4byte	0x4c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 77


 3436 09ea 02       		.uleb128 0x2
 3437 09eb 91       		.byte	0x91
 3438 09ec 64       		.sleb128 -28
 3439 09ed 22       		.uleb128 0x22
 3440 09ee 7400     		.ascii	"t\000"
 3441 09f0 01       		.byte	0x1
 3442 09f1 A602     		.2byte	0x2a6
 3443 09f3 0A0A0000 		.4byte	0xa0a
 3444 09f7 02       		.uleb128 0x2
 3445 09f8 91       		.byte	0x91
 3446 09f9 74       		.sleb128 -12
 3447 09fa 1A       		.uleb128 0x1a
 3448 09fb 1F050000 		.4byte	.LASF136
 3449 09ff 01       		.byte	0x1
 3450 0a00 AB02     		.2byte	0x2ab
 3451 0a02 6B010000 		.4byte	0x16b
 3452 0a06 02       		.uleb128 0x2
 3453 0a07 91       		.byte	0x91
 3454 0a08 68       		.sleb128 -24
 3455 0a09 00       		.byte	0
 3456 0a0a 06       		.uleb128 0x6
 3457 0a0b 04       		.byte	0x4
 3458 0a0c BC020000 		.4byte	0x2bc
 3459 0a10 21       		.uleb128 0x21
 3460 0a11 0D030000 		.4byte	.LASF137
 3461 0a15 01       		.byte	0x1
 3462 0a16 C802     		.2byte	0x2c8
 3463 0a18 81000000 		.4byte	0x81
 3464 0a1c 00000000 		.4byte	.LFB78
 3465 0a20 38010000 		.4byte	.LFE78-.LFB78
 3466 0a24 01       		.uleb128 0x1
 3467 0a25 9C       		.byte	0x9c
 3468 0a26 890A0000 		.4byte	0xa89
 3469 0a2a 18       		.uleb128 0x18
 3470 0a2b 34030000 		.4byte	.LASF138
 3471 0a2f 01       		.byte	0x1
 3472 0a30 C802     		.2byte	0x2c8
 3473 0a32 EC000000 		.4byte	0xec
 3474 0a36 03       		.uleb128 0x3
 3475 0a37 91       		.byte	0x91
 3476 0a38 9C7E     		.sleb128 -228
 3477 0a3a 18       		.uleb128 0x18
 3478 0a3b 29030000 		.4byte	.LASF139
 3479 0a3f 01       		.byte	0x1
 3480 0a40 C802     		.2byte	0x2c8
 3481 0a42 68000000 		.4byte	0x68
 3482 0a46 03       		.uleb128 0x3
 3483 0a47 91       		.byte	0x91
 3484 0a48 987E     		.sleb128 -232
 3485 0a4a 18       		.uleb128 0x18
 3486 0a4b E8040000 		.4byte	.LASF140
 3487 0a4f 01       		.byte	0x1
 3488 0a50 C802     		.2byte	0x2c8
 3489 0a52 EC000000 		.4byte	0xec
 3490 0a56 03       		.uleb128 0x3
 3491 0a57 91       		.byte	0x91
 3492 0a58 947E     		.sleb128 -236
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 78


 3493 0a5a 1A       		.uleb128 0x1a
 3494 0a5b 1F020000 		.4byte	.LASF141
 3495 0a5f 01       		.byte	0x1
 3496 0a60 CA02     		.2byte	0x2ca
 3497 0a62 81000000 		.4byte	0x81
 3498 0a66 02       		.uleb128 0x2
 3499 0a67 91       		.byte	0x91
 3500 0a68 77       		.sleb128 -9
 3501 0a69 1A       		.uleb128 0x1a
 3502 0a6a 74000000 		.4byte	.LASF142
 3503 0a6e 01       		.byte	0x1
 3504 0a6f D102     		.2byte	0x2d1
 3505 0a71 890A0000 		.4byte	0xa89
 3506 0a75 02       		.uleb128 0x2
 3507 0a76 91       		.byte	0x91
 3508 0a77 68       		.sleb128 -24
 3509 0a78 1A       		.uleb128 0x1a
 3510 0a79 7D070000 		.4byte	.LASF118
 3511 0a7d 01       		.byte	0x1
 3512 0a7e D902     		.2byte	0x2d9
 3513 0a80 9E080000 		.4byte	0x89e
 3514 0a84 03       		.uleb128 0x3
 3515 0a85 91       		.byte	0x91
 3516 0a86 A07E     		.sleb128 -224
 3517 0a88 00       		.byte	0
 3518 0a89 07       		.uleb128 0x7
 3519 0a8a D7000000 		.4byte	0xd7
 3520 0a8e 990A0000 		.4byte	0xa99
 3521 0a92 08       		.uleb128 0x8
 3522 0a93 E5000000 		.4byte	0xe5
 3523 0a97 0B       		.byte	0xb
 3524 0a98 00       		.byte	0
 3525 0a99 23       		.uleb128 0x23
 3526 0a9a 80010000 		.4byte	.LASF143
 3527 0a9e 0D       		.byte	0xd
 3528 0a9f 1207     		.2byte	0x712
 3529 0aa1 A50A0000 		.4byte	0xaa5
 3530 0aa5 0C       		.uleb128 0xc
 3531 0aa6 76000000 		.4byte	0x76
 3532 0aaa 24       		.uleb128 0x24
 3533 0aab 30070000 		.4byte	.LASF144
 3534 0aaf 07       		.byte	0x7
 3535 0ab0 25       		.byte	0x25
 3536 0ab1 33050000 		.4byte	0x533
 3537 0ab5 05       		.uleb128 0x5
 3538 0ab6 03       		.byte	0x3
 3539 0ab7 00000000 		.4byte	level_sensor_inbox
 3540 0abb 24       		.uleb128 0x24
 3541 0abc 64000000 		.4byte	.LASF145
 3542 0ac0 0A       		.byte	0xa
 3543 0ac1 11       		.byte	0x11
 3544 0ac2 85040000 		.4byte	0x485
 3545 0ac6 05       		.uleb128 0x5
 3546 0ac7 03       		.byte	0x3
 3547 0ac8 00000000 		.4byte	buffer_overflow
 3548 0acc 24       		.uleb128 0x24
 3549 0acd CF040000 		.4byte	.LASF146
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 79


 3550 0ad1 0A       		.byte	0xa
 3551 0ad2 22       		.byte	0x22
 3552 0ad3 8D000000 		.4byte	0x8d
 3553 0ad7 05       		.uleb128 0x5
 3554 0ad8 03       		.byte	0x3
 3555 0ad9 00000000 		.4byte	dataPointsInStack
 3556 0add 24       		.uleb128 0x24
 3557 0ade 04080000 		.4byte	.LASF147
 3558 0ae2 0A       		.byte	0xa
 3559 0ae3 23       		.byte	0x23
 3560 0ae4 8D000000 		.4byte	0x8d
 3561 0ae8 05       		.uleb128 0x5
 3562 0ae9 03       		.byte	0x3
 3563 0aea 00000000 		.4byte	dataPointsInStackDesired
 3564 0aee 07       		.uleb128 0x7
 3565 0aef 71030000 		.4byte	0x371
 3566 0af3 FE0A0000 		.4byte	0xafe
 3567 0af7 08       		.uleb128 0x8
 3568 0af8 E5000000 		.4byte	0xe5
 3569 0afc 95       		.byte	0x95
 3570 0afd 00       		.byte	0
 3571 0afe 24       		.uleb128 0x24
 3572 0aff 10040000 		.4byte	.LASF148
 3573 0b03 0A       		.byte	0xa
 3574 0b04 24       		.byte	0x24
 3575 0b05 EE0A0000 		.4byte	0xaee
 3576 0b09 05       		.uleb128 0x5
 3577 0b0a 03       		.byte	0x3
 3578 0b0b 00000000 		.4byte	data
 3579 0b0f 24       		.uleb128 0x24
 3580 0b10 67010000 		.4byte	.LASF149
 3581 0b14 0B       		.byte	0xb
 3582 0b15 20       		.byte	0x20
 3583 0b16 81000000 		.4byte	0x81
 3584 0b1a 05       		.uleb128 0x5
 3585 0b1b 03       		.byte	0x3
 3586 0b1c 00000000 		.4byte	modem_state
 3587 0b20 24       		.uleb128 0x24
 3588 0b21 8C040000 		.4byte	.LASF150
 3589 0b25 0B       		.byte	0xb
 3590 0b26 6A       		.byte	0x6a
 3591 0b27 BD000000 		.4byte	0xbd
 3592 0b2b 05       		.uleb128 0x5
 3593 0b2c 03       		.byte	0x3
 3594 0b2d 00000000 		.4byte	modem_start_time_stamp
 3595 0b31 24       		.uleb128 0x24
 3596 0b32 26040000 		.4byte	.LASF87
 3597 0b36 0B       		.byte	0xb
 3598 0b37 6B       		.byte	0x6b
 3599 0b38 A9030000 		.4byte	0x3a9
 3600 0b3c 05       		.uleb128 0x5
 3601 0b3d 03       		.byte	0x3
 3602 0b3e 00000000 		.4byte	modem_info
 3603 0b42 24       		.uleb128 0x24
 3604 0b43 66070000 		.4byte	.LASF151
 3605 0b47 0B       		.byte	0xb
 3606 0b48 6C       		.byte	0x6c
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 80


 3607 0b49 1D040000 		.4byte	0x41d
 3608 0b4d 05       		.uleb128 0x5
 3609 0b4e 03       		.byte	0x3
 3610 0b4f 00000000 		.4byte	modem_stats
 3611 0b53 24       		.uleb128 0x24
 3612 0b54 58050000 		.4byte	.LASF152
 3613 0b58 0B       		.byte	0xb
 3614 0b59 6D       		.byte	0x6d
 3615 0b5a 8C040000 		.4byte	0x48c
 3616 0b5e 05       		.uleb128 0x5
 3617 0b5f 03       		.byte	0x3
 3618 0b60 00000000 		.4byte	updatable_parameters
 3619 0b64 24       		.uleb128 0x24
 3620 0b65 CF080000 		.4byte	.LASF153
 3621 0b69 0E       		.byte	0xe
 3622 0b6a 12       		.byte	0x12
 3623 0b6b 33050000 		.4byte	0x533
 3624 0b6f 05       		.uleb128 0x5
 3625 0b70 03       		.byte	0x3
 3626 0b71 00000000 		.4byte	app_led_inbox
 3627 0b75 07       		.uleb128 0x7
 3628 0b76 D7000000 		.4byte	0xd7
 3629 0b7a 860B0000 		.4byte	0xb86
 3630 0b7e 20       		.uleb128 0x20
 3631 0b7f E5000000 		.4byte	0xe5
 3632 0b83 0F27     		.2byte	0x270f
 3633 0b85 00       		.byte	0
 3634 0b86 24       		.uleb128 0x24
 3635 0b87 98050000 		.4byte	.LASF154
 3636 0b8b 0C       		.byte	0xc
 3637 0b8c 18       		.byte	0x18
 3638 0b8d 750B0000 		.4byte	0xb75
 3639 0b91 05       		.uleb128 0x5
 3640 0b92 03       		.byte	0x3
 3641 0b93 00000000 		.4byte	http_request
 3642 0b97 24       		.uleb128 0x24
 3643 0b98 40080000 		.4byte	.LASF155
 3644 0b9c 0C       		.byte	0xc
 3645 0b9d 19       		.byte	0x19
 3646 0b9e 750B0000 		.4byte	0xb75
 3647 0ba2 05       		.uleb128 0x5
 3648 0ba3 03       		.byte	0x3
 3649 0ba4 00000000 		.4byte	http_body
 3650 0ba8 24       		.uleb128 0x24
 3651 0ba9 72070000 		.4byte	.LASF156
 3652 0bad 0C       		.byte	0xc
 3653 0bae 1A       		.byte	0x1a
 3654 0baf 9E080000 		.4byte	0x89e
 3655 0bb3 05       		.uleb128 0x5
 3656 0bb4 03       		.byte	0x3
 3657 0bb5 00000000 		.4byte	http_route
 3658 0bb9 24       		.uleb128 0x24
 3659 0bba 7D060000 		.4byte	.LASF157
 3660 0bbe 0C       		.byte	0xc
 3661 0bbf 41       		.byte	0x41
 3662 0bc0 07050000 		.4byte	0x507
 3663 0bc4 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 81


 3664 0bc5 03       		.byte	0x3
 3665 0bc6 00000000 		.4byte	system_info
 3666 0bca 24       		.uleb128 0x24
 3667 0bcb 1D060000 		.4byte	.LASF158
 3668 0bcf 0C       		.byte	0xc
 3669 0bd0 53       		.byte	0x53
 3670 0bd1 43050000 		.4byte	0x543
 3671 0bd5 05       		.uleb128 0x5
 3672 0bd6 03       		.byte	0x3
 3673 0bd7 00000000 		.4byte	system_settings
 3674 0bdb 24       		.uleb128 0x24
 3675 0bdc 73010000 		.4byte	.LASF159
 3676 0be0 0C       		.byte	0xc
 3677 0be1 6F       		.byte	0x6f
 3678 0be2 D0040000 		.4byte	0x4d0
 3679 0be6 05       		.uleb128 0x5
 3680 0be7 03       		.byte	0x3
 3681 0be8 00000000 		.4byte	alarmMeasure
 3682 0bec 24       		.uleb128 0x24
 3683 0bed C9010000 		.4byte	.LASF160
 3684 0bf1 0C       		.byte	0xc
 3685 0bf2 70       		.byte	0x70
 3686 0bf3 81000000 		.4byte	0x81
 3687 0bf7 05       		.uleb128 0x5
 3688 0bf8 03       		.byte	0x3
 3689 0bf9 00000000 		.4byte	timeToMeasure
 3690 0bfd 24       		.uleb128 0x24
 3691 0bfe 41030000 		.4byte	.LASF161
 3692 0c02 0C       		.byte	0xc
 3693 0c03 71       		.byte	0x71
 3694 0c04 D0040000 		.4byte	0x4d0
 3695 0c08 05       		.uleb128 0x5
 3696 0c09 03       		.byte	0x3
 3697 0c0a 00000000 		.4byte	alarmSync
 3698 0c0e 24       		.uleb128 0x24
 3699 0c0f EF010000 		.4byte	.LASF162
 3700 0c13 0C       		.byte	0xc
 3701 0c14 72       		.byte	0x72
 3702 0c15 81000000 		.4byte	0x81
 3703 0c19 05       		.uleb128 0x5
 3704 0c1a 03       		.byte	0x3
 3705 0c1b 00000000 		.4byte	timeToSync
 3706 0c1f 24       		.uleb128 0x24
 3707 0c20 29050000 		.4byte	.LASF163
 3708 0c24 0C       		.byte	0xc
 3709 0c25 73       		.byte	0x73
 3710 0c26 81000000 		.4byte	0x81
 3711 0c2a 05       		.uleb128 0x5
 3712 0c2b 03       		.byte	0x3
 3713 0c2c 00000000 		.4byte	timeToSycnRemoteParams
 3714 0c30 25       		.uleb128 0x25
 3715 0c31 68657900 		.ascii	"hey\000"
 3716 0c35 0C       		.byte	0xc
 3717 0c36 74       		.byte	0x74
 3718 0c37 81000000 		.4byte	0x81
 3719 0c3b 05       		.uleb128 0x5
 3720 0c3c 03       		.byte	0x3
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 82


 3721 0c3d 00000000 		.4byte	hey
 3722 0c41 24       		.uleb128 0x24
 3723 0c42 80040000 		.4byte	.LASF164
 3724 0c46 0C       		.byte	0xc
 3725 0c47 77       		.byte	0x77
 3726 0c48 D0040000 		.4byte	0x4d0
 3727 0c4c 05       		.uleb128 0x5
 3728 0c4d 03       		.byte	0x3
 3729 0c4e 00000000 		.4byte	alarmAppLED
 3730 0c52 24       		.uleb128 0x24
 3731 0c53 A8020000 		.4byte	.LASF165
 3732 0c57 0C       		.byte	0xc
 3733 0c58 78       		.byte	0x78
 3734 0c59 81000000 		.4byte	0x81
 3735 0c5d 05       		.uleb128 0x5
 3736 0c5e 03       		.byte	0x3
 3737 0c5f 00000000 		.4byte	timeToAppLED
 3738 0c63 24       		.uleb128 0x24
 3739 0c64 05070000 		.4byte	.LASF166
 3740 0c68 0C       		.byte	0xc
 3741 0c69 7A       		.byte	0x7a
 3742 0c6a D0040000 		.4byte	0x4d0
 3743 0c6e 05       		.uleb128 0x5
 3744 0c6f 03       		.byte	0x3
 3745 0c70 00000000 		.4byte	alarmLevelSensor
 3746 0c74 24       		.uleb128 0x24
 3747 0c75 8D010000 		.4byte	.LASF167
 3748 0c79 0C       		.byte	0xc
 3749 0c7a 7B       		.byte	0x7b
 3750 0c7b 81000000 		.4byte	0x81
 3751 0c7f 05       		.uleb128 0x5
 3752 0c80 03       		.byte	0x3
 3753 0c81 00000000 		.4byte	timetoLevelSensor
 3754 0c85 07       		.uleb128 0x7
 3755 0c86 D7000000 		.4byte	0xd7
 3756 0c8a 950C0000 		.4byte	0xc95
 3757 0c8e 08       		.uleb128 0x8
 3758 0c8f E5000000 		.4byte	0xe5
 3759 0c93 1D       		.byte	0x1d
 3760 0c94 00       		.byte	0
 3761 0c95 24       		.uleb128 0x24
 3762 0c96 D7050000 		.4byte	.LASF168
 3763 0c9a 01       		.byte	0x1
 3764 0c9b 1D       		.byte	0x1d
 3765 0c9c 850C0000 		.4byte	0xc85
 3766 0ca0 05       		.uleb128 0x5
 3767 0ca1 03       		.byte	0x3
 3768 0ca2 00000000 		.4byte	Data_fileName
 3769 0ca6 24       		.uleb128 0x24
 3770 0ca7 C5030000 		.4byte	.LASF94
 3771 0cab 01       		.byte	0x1
 3772 0cac 1E       		.byte	0x1e
 3773 0cad 81000000 		.4byte	0x81
 3774 0cb1 05       		.uleb128 0x5
 3775 0cb2 03       		.byte	0x3
 3776 0cb3 00000000 		.4byte	try_counter
 3777 0cb7 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 83


 3778              		.section	.debug_abbrev,"",%progbits
 3779              	.Ldebug_abbrev0:
 3780 0000 01       		.uleb128 0x1
 3781 0001 11       		.uleb128 0x11
 3782 0002 01       		.byte	0x1
 3783 0003 25       		.uleb128 0x25
 3784 0004 0E       		.uleb128 0xe
 3785 0005 13       		.uleb128 0x13
 3786 0006 0B       		.uleb128 0xb
 3787 0007 03       		.uleb128 0x3
 3788 0008 0E       		.uleb128 0xe
 3789 0009 1B       		.uleb128 0x1b
 3790 000a 0E       		.uleb128 0xe
 3791 000b 55       		.uleb128 0x55
 3792 000c 17       		.uleb128 0x17
 3793 000d 11       		.uleb128 0x11
 3794 000e 01       		.uleb128 0x1
 3795 000f 10       		.uleb128 0x10
 3796 0010 17       		.uleb128 0x17
 3797 0011 00       		.byte	0
 3798 0012 00       		.byte	0
 3799 0013 02       		.uleb128 0x2
 3800 0014 24       		.uleb128 0x24
 3801 0015 00       		.byte	0
 3802 0016 0B       		.uleb128 0xb
 3803 0017 0B       		.uleb128 0xb
 3804 0018 3E       		.uleb128 0x3e
 3805 0019 0B       		.uleb128 0xb
 3806 001a 03       		.uleb128 0x3
 3807 001b 0E       		.uleb128 0xe
 3808 001c 00       		.byte	0
 3809 001d 00       		.byte	0
 3810 001e 03       		.uleb128 0x3
 3811 001f 16       		.uleb128 0x16
 3812 0020 00       		.byte	0
 3813 0021 03       		.uleb128 0x3
 3814 0022 0E       		.uleb128 0xe
 3815 0023 3A       		.uleb128 0x3a
 3816 0024 0B       		.uleb128 0xb
 3817 0025 3B       		.uleb128 0x3b
 3818 0026 0B       		.uleb128 0xb
 3819 0027 49       		.uleb128 0x49
 3820 0028 13       		.uleb128 0x13
 3821 0029 00       		.byte	0
 3822 002a 00       		.byte	0
 3823 002b 04       		.uleb128 0x4
 3824 002c 24       		.uleb128 0x24
 3825 002d 00       		.byte	0
 3826 002e 0B       		.uleb128 0xb
 3827 002f 0B       		.uleb128 0xb
 3828 0030 3E       		.uleb128 0x3e
 3829 0031 0B       		.uleb128 0xb
 3830 0032 03       		.uleb128 0x3
 3831 0033 08       		.uleb128 0x8
 3832 0034 00       		.byte	0
 3833 0035 00       		.byte	0
 3834 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 84


 3835 0037 16       		.uleb128 0x16
 3836 0038 00       		.byte	0
 3837 0039 03       		.uleb128 0x3
 3838 003a 0E       		.uleb128 0xe
 3839 003b 3A       		.uleb128 0x3a
 3840 003c 0B       		.uleb128 0xb
 3841 003d 3B       		.uleb128 0x3b
 3842 003e 05       		.uleb128 0x5
 3843 003f 49       		.uleb128 0x49
 3844 0040 13       		.uleb128 0x13
 3845 0041 00       		.byte	0
 3846 0042 00       		.byte	0
 3847 0043 06       		.uleb128 0x6
 3848 0044 0F       		.uleb128 0xf
 3849 0045 00       		.byte	0
 3850 0046 0B       		.uleb128 0xb
 3851 0047 0B       		.uleb128 0xb
 3852 0048 49       		.uleb128 0x49
 3853 0049 13       		.uleb128 0x13
 3854 004a 00       		.byte	0
 3855 004b 00       		.byte	0
 3856 004c 07       		.uleb128 0x7
 3857 004d 01       		.uleb128 0x1
 3858 004e 01       		.byte	0x1
 3859 004f 49       		.uleb128 0x49
 3860 0050 13       		.uleb128 0x13
 3861 0051 01       		.uleb128 0x1
 3862 0052 13       		.uleb128 0x13
 3863 0053 00       		.byte	0
 3864 0054 00       		.byte	0
 3865 0055 08       		.uleb128 0x8
 3866 0056 21       		.uleb128 0x21
 3867 0057 00       		.byte	0
 3868 0058 49       		.uleb128 0x49
 3869 0059 13       		.uleb128 0x13
 3870 005a 2F       		.uleb128 0x2f
 3871 005b 0B       		.uleb128 0xb
 3872 005c 00       		.byte	0
 3873 005d 00       		.byte	0
 3874 005e 09       		.uleb128 0x9
 3875 005f 13       		.uleb128 0x13
 3876 0060 01       		.byte	0x1
 3877 0061 0B       		.uleb128 0xb
 3878 0062 0B       		.uleb128 0xb
 3879 0063 3A       		.uleb128 0x3a
 3880 0064 0B       		.uleb128 0xb
 3881 0065 3B       		.uleb128 0x3b
 3882 0066 0B       		.uleb128 0xb
 3883 0067 01       		.uleb128 0x1
 3884 0068 13       		.uleb128 0x13
 3885 0069 00       		.byte	0
 3886 006a 00       		.byte	0
 3887 006b 0A       		.uleb128 0xa
 3888 006c 0D       		.uleb128 0xd
 3889 006d 00       		.byte	0
 3890 006e 03       		.uleb128 0x3
 3891 006f 08       		.uleb128 0x8
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 85


 3892 0070 3A       		.uleb128 0x3a
 3893 0071 0B       		.uleb128 0xb
 3894 0072 3B       		.uleb128 0x3b
 3895 0073 0B       		.uleb128 0xb
 3896 0074 49       		.uleb128 0x49
 3897 0075 13       		.uleb128 0x13
 3898 0076 38       		.uleb128 0x38
 3899 0077 0B       		.uleb128 0xb
 3900 0078 00       		.byte	0
 3901 0079 00       		.byte	0
 3902 007a 0B       		.uleb128 0xb
 3903 007b 0D       		.uleb128 0xd
 3904 007c 00       		.byte	0
 3905 007d 03       		.uleb128 0x3
 3906 007e 0E       		.uleb128 0xe
 3907 007f 3A       		.uleb128 0x3a
 3908 0080 0B       		.uleb128 0xb
 3909 0081 3B       		.uleb128 0x3b
 3910 0082 0B       		.uleb128 0xb
 3911 0083 49       		.uleb128 0x49
 3912 0084 13       		.uleb128 0x13
 3913 0085 38       		.uleb128 0x38
 3914 0086 0B       		.uleb128 0xb
 3915 0087 00       		.byte	0
 3916 0088 00       		.byte	0
 3917 0089 0C       		.uleb128 0xc
 3918 008a 35       		.uleb128 0x35
 3919 008b 00       		.byte	0
 3920 008c 49       		.uleb128 0x49
 3921 008d 13       		.uleb128 0x13
 3922 008e 00       		.byte	0
 3923 008f 00       		.byte	0
 3924 0090 0D       		.uleb128 0xd
 3925 0091 13       		.uleb128 0x13
 3926 0092 01       		.byte	0x1
 3927 0093 0B       		.uleb128 0xb
 3928 0094 05       		.uleb128 0x5
 3929 0095 3A       		.uleb128 0x3a
 3930 0096 0B       		.uleb128 0xb
 3931 0097 3B       		.uleb128 0x3b
 3932 0098 0B       		.uleb128 0xb
 3933 0099 01       		.uleb128 0x1
 3934 009a 13       		.uleb128 0x13
 3935 009b 00       		.byte	0
 3936 009c 00       		.byte	0
 3937 009d 0E       		.uleb128 0xe
 3938 009e 13       		.uleb128 0x13
 3939 009f 01       		.byte	0x1
 3940 00a0 03       		.uleb128 0x3
 3941 00a1 08       		.uleb128 0x8
 3942 00a2 0B       		.uleb128 0xb
 3943 00a3 0B       		.uleb128 0xb
 3944 00a4 3A       		.uleb128 0x3a
 3945 00a5 0B       		.uleb128 0xb
 3946 00a6 3B       		.uleb128 0x3b
 3947 00a7 0B       		.uleb128 0xb
 3948 00a8 01       		.uleb128 0x1
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 86


 3949 00a9 13       		.uleb128 0x13
 3950 00aa 00       		.byte	0
 3951 00ab 00       		.byte	0
 3952 00ac 0F       		.uleb128 0xf
 3953 00ad 2E       		.uleb128 0x2e
 3954 00ae 00       		.byte	0
 3955 00af 3F       		.uleb128 0x3f
 3956 00b0 19       		.uleb128 0x19
 3957 00b1 03       		.uleb128 0x3
 3958 00b2 0E       		.uleb128 0xe
 3959 00b3 3A       		.uleb128 0x3a
 3960 00b4 0B       		.uleb128 0xb
 3961 00b5 3B       		.uleb128 0x3b
 3962 00b6 0B       		.uleb128 0xb
 3963 00b7 27       		.uleb128 0x27
 3964 00b8 19       		.uleb128 0x19
 3965 00b9 11       		.uleb128 0x11
 3966 00ba 01       		.uleb128 0x1
 3967 00bb 12       		.uleb128 0x12
 3968 00bc 06       		.uleb128 0x6
 3969 00bd 40       		.uleb128 0x40
 3970 00be 18       		.uleb128 0x18
 3971 00bf 9642     		.uleb128 0x2116
 3972 00c1 19       		.uleb128 0x19
 3973 00c2 00       		.byte	0
 3974 00c3 00       		.byte	0
 3975 00c4 10       		.uleb128 0x10
 3976 00c5 2E       		.uleb128 0x2e
 3977 00c6 01       		.byte	0x1
 3978 00c7 3F       		.uleb128 0x3f
 3979 00c8 19       		.uleb128 0x19
 3980 00c9 03       		.uleb128 0x3
 3981 00ca 0E       		.uleb128 0xe
 3982 00cb 3A       		.uleb128 0x3a
 3983 00cc 0B       		.uleb128 0xb
 3984 00cd 3B       		.uleb128 0x3b
 3985 00ce 0B       		.uleb128 0xb
 3986 00cf 11       		.uleb128 0x11
 3987 00d0 01       		.uleb128 0x1
 3988 00d1 12       		.uleb128 0x12
 3989 00d2 06       		.uleb128 0x6
 3990 00d3 40       		.uleb128 0x40
 3991 00d4 18       		.uleb128 0x18
 3992 00d5 9642     		.uleb128 0x2116
 3993 00d7 19       		.uleb128 0x19
 3994 00d8 01       		.uleb128 0x1
 3995 00d9 13       		.uleb128 0x13
 3996 00da 00       		.byte	0
 3997 00db 00       		.byte	0
 3998 00dc 11       		.uleb128 0x11
 3999 00dd 34       		.uleb128 0x34
 4000 00de 00       		.byte	0
 4001 00df 03       		.uleb128 0x3
 4002 00e0 0E       		.uleb128 0xe
 4003 00e1 3A       		.uleb128 0x3a
 4004 00e2 0B       		.uleb128 0xb
 4005 00e3 3B       		.uleb128 0x3b
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 87


 4006 00e4 0B       		.uleb128 0xb
 4007 00e5 49       		.uleb128 0x49
 4008 00e6 13       		.uleb128 0x13
 4009 00e7 02       		.uleb128 0x2
 4010 00e8 18       		.uleb128 0x18
 4011 00e9 00       		.byte	0
 4012 00ea 00       		.byte	0
 4013 00eb 12       		.uleb128 0x12
 4014 00ec 2E       		.uleb128 0x2e
 4015 00ed 01       		.byte	0x1
 4016 00ee 3F       		.uleb128 0x3f
 4017 00ef 19       		.uleb128 0x19
 4018 00f0 03       		.uleb128 0x3
 4019 00f1 0E       		.uleb128 0xe
 4020 00f2 3A       		.uleb128 0x3a
 4021 00f3 0B       		.uleb128 0xb
 4022 00f4 3B       		.uleb128 0x3b
 4023 00f5 0B       		.uleb128 0xb
 4024 00f6 49       		.uleb128 0x49
 4025 00f7 13       		.uleb128 0x13
 4026 00f8 11       		.uleb128 0x11
 4027 00f9 01       		.uleb128 0x1
 4028 00fa 12       		.uleb128 0x12
 4029 00fb 06       		.uleb128 0x6
 4030 00fc 40       		.uleb128 0x40
 4031 00fd 18       		.uleb128 0x18
 4032 00fe 9642     		.uleb128 0x2116
 4033 0100 19       		.uleb128 0x19
 4034 0101 01       		.uleb128 0x1
 4035 0102 13       		.uleb128 0x13
 4036 0103 00       		.byte	0
 4037 0104 00       		.byte	0
 4038 0105 13       		.uleb128 0x13
 4039 0106 2E       		.uleb128 0x2e
 4040 0107 00       		.byte	0
 4041 0108 3F       		.uleb128 0x3f
 4042 0109 19       		.uleb128 0x19
 4043 010a 03       		.uleb128 0x3
 4044 010b 0E       		.uleb128 0xe
 4045 010c 3A       		.uleb128 0x3a
 4046 010d 0B       		.uleb128 0xb
 4047 010e 3B       		.uleb128 0x3b
 4048 010f 0B       		.uleb128 0xb
 4049 0110 11       		.uleb128 0x11
 4050 0111 01       		.uleb128 0x1
 4051 0112 12       		.uleb128 0x12
 4052 0113 06       		.uleb128 0x6
 4053 0114 40       		.uleb128 0x40
 4054 0115 18       		.uleb128 0x18
 4055 0116 9642     		.uleb128 0x2116
 4056 0118 19       		.uleb128 0x19
 4057 0119 00       		.byte	0
 4058 011a 00       		.byte	0
 4059 011b 14       		.uleb128 0x14
 4060 011c 2E       		.uleb128 0x2e
 4061 011d 01       		.byte	0x1
 4062 011e 3F       		.uleb128 0x3f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 88


 4063 011f 19       		.uleb128 0x19
 4064 0120 03       		.uleb128 0x3
 4065 0121 0E       		.uleb128 0xe
 4066 0122 3A       		.uleb128 0x3a
 4067 0123 0B       		.uleb128 0xb
 4068 0124 3B       		.uleb128 0x3b
 4069 0125 0B       		.uleb128 0xb
 4070 0126 27       		.uleb128 0x27
 4071 0127 19       		.uleb128 0x19
 4072 0128 11       		.uleb128 0x11
 4073 0129 01       		.uleb128 0x1
 4074 012a 12       		.uleb128 0x12
 4075 012b 06       		.uleb128 0x6
 4076 012c 40       		.uleb128 0x40
 4077 012d 18       		.uleb128 0x18
 4078 012e 9642     		.uleb128 0x2116
 4079 0130 19       		.uleb128 0x19
 4080 0131 01       		.uleb128 0x1
 4081 0132 13       		.uleb128 0x13
 4082 0133 00       		.byte	0
 4083 0134 00       		.byte	0
 4084 0135 15       		.uleb128 0x15
 4085 0136 05       		.uleb128 0x5
 4086 0137 00       		.byte	0
 4087 0138 03       		.uleb128 0x3
 4088 0139 0E       		.uleb128 0xe
 4089 013a 3A       		.uleb128 0x3a
 4090 013b 0B       		.uleb128 0xb
 4091 013c 3B       		.uleb128 0x3b
 4092 013d 0B       		.uleb128 0xb
 4093 013e 49       		.uleb128 0x49
 4094 013f 13       		.uleb128 0x13
 4095 0140 02       		.uleb128 0x2
 4096 0141 18       		.uleb128 0x18
 4097 0142 00       		.byte	0
 4098 0143 00       		.byte	0
 4099 0144 16       		.uleb128 0x16
 4100 0145 2E       		.uleb128 0x2e
 4101 0146 01       		.byte	0x1
 4102 0147 3F       		.uleb128 0x3f
 4103 0148 19       		.uleb128 0x19
 4104 0149 03       		.uleb128 0x3
 4105 014a 0E       		.uleb128 0xe
 4106 014b 3A       		.uleb128 0x3a
 4107 014c 0B       		.uleb128 0xb
 4108 014d 3B       		.uleb128 0x3b
 4109 014e 0B       		.uleb128 0xb
 4110 014f 27       		.uleb128 0x27
 4111 0150 19       		.uleb128 0x19
 4112 0151 49       		.uleb128 0x49
 4113 0152 13       		.uleb128 0x13
 4114 0153 11       		.uleb128 0x11
 4115 0154 01       		.uleb128 0x1
 4116 0155 12       		.uleb128 0x12
 4117 0156 06       		.uleb128 0x6
 4118 0157 40       		.uleb128 0x40
 4119 0158 18       		.uleb128 0x18
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 89


 4120 0159 9642     		.uleb128 0x2116
 4121 015b 19       		.uleb128 0x19
 4122 015c 01       		.uleb128 0x1
 4123 015d 13       		.uleb128 0x13
 4124 015e 00       		.byte	0
 4125 015f 00       		.byte	0
 4126 0160 17       		.uleb128 0x17
 4127 0161 2E       		.uleb128 0x2e
 4128 0162 01       		.byte	0x1
 4129 0163 3F       		.uleb128 0x3f
 4130 0164 19       		.uleb128 0x19
 4131 0165 03       		.uleb128 0x3
 4132 0166 0E       		.uleb128 0xe
 4133 0167 3A       		.uleb128 0x3a
 4134 0168 0B       		.uleb128 0xb
 4135 0169 3B       		.uleb128 0x3b
 4136 016a 05       		.uleb128 0x5
 4137 016b 27       		.uleb128 0x27
 4138 016c 19       		.uleb128 0x19
 4139 016d 11       		.uleb128 0x11
 4140 016e 01       		.uleb128 0x1
 4141 016f 12       		.uleb128 0x12
 4142 0170 06       		.uleb128 0x6
 4143 0171 40       		.uleb128 0x40
 4144 0172 18       		.uleb128 0x18
 4145 0173 9742     		.uleb128 0x2117
 4146 0175 19       		.uleb128 0x19
 4147 0176 01       		.uleb128 0x1
 4148 0177 13       		.uleb128 0x13
 4149 0178 00       		.byte	0
 4150 0179 00       		.byte	0
 4151 017a 18       		.uleb128 0x18
 4152 017b 05       		.uleb128 0x5
 4153 017c 00       		.byte	0
 4154 017d 03       		.uleb128 0x3
 4155 017e 0E       		.uleb128 0xe
 4156 017f 3A       		.uleb128 0x3a
 4157 0180 0B       		.uleb128 0xb
 4158 0181 3B       		.uleb128 0x3b
 4159 0182 05       		.uleb128 0x5
 4160 0183 49       		.uleb128 0x49
 4161 0184 13       		.uleb128 0x13
 4162 0185 02       		.uleb128 0x2
 4163 0186 18       		.uleb128 0x18
 4164 0187 00       		.byte	0
 4165 0188 00       		.byte	0
 4166 0189 19       		.uleb128 0x19
 4167 018a 2E       		.uleb128 0x2e
 4168 018b 01       		.byte	0x1
 4169 018c 3F       		.uleb128 0x3f
 4170 018d 19       		.uleb128 0x19
 4171 018e 03       		.uleb128 0x3
 4172 018f 0E       		.uleb128 0xe
 4173 0190 3A       		.uleb128 0x3a
 4174 0191 0B       		.uleb128 0xb
 4175 0192 3B       		.uleb128 0x3b
 4176 0193 05       		.uleb128 0x5
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 90


 4177 0194 27       		.uleb128 0x27
 4178 0195 19       		.uleb128 0x19
 4179 0196 49       		.uleb128 0x49
 4180 0197 13       		.uleb128 0x13
 4181 0198 11       		.uleb128 0x11
 4182 0199 01       		.uleb128 0x1
 4183 019a 12       		.uleb128 0x12
 4184 019b 06       		.uleb128 0x6
 4185 019c 40       		.uleb128 0x40
 4186 019d 18       		.uleb128 0x18
 4187 019e 9742     		.uleb128 0x2117
 4188 01a0 19       		.uleb128 0x19
 4189 01a1 01       		.uleb128 0x1
 4190 01a2 13       		.uleb128 0x13
 4191 01a3 00       		.byte	0
 4192 01a4 00       		.byte	0
 4193 01a5 1A       		.uleb128 0x1a
 4194 01a6 34       		.uleb128 0x34
 4195 01a7 00       		.byte	0
 4196 01a8 03       		.uleb128 0x3
 4197 01a9 0E       		.uleb128 0xe
 4198 01aa 3A       		.uleb128 0x3a
 4199 01ab 0B       		.uleb128 0xb
 4200 01ac 3B       		.uleb128 0x3b
 4201 01ad 05       		.uleb128 0x5
 4202 01ae 49       		.uleb128 0x49
 4203 01af 13       		.uleb128 0x13
 4204 01b0 02       		.uleb128 0x2
 4205 01b1 18       		.uleb128 0x18
 4206 01b2 00       		.byte	0
 4207 01b3 00       		.byte	0
 4208 01b4 1B       		.uleb128 0x1b
 4209 01b5 2E       		.uleb128 0x2e
 4210 01b6 01       		.byte	0x1
 4211 01b7 3F       		.uleb128 0x3f
 4212 01b8 19       		.uleb128 0x19
 4213 01b9 03       		.uleb128 0x3
 4214 01ba 0E       		.uleb128 0xe
 4215 01bb 3A       		.uleb128 0x3a
 4216 01bc 0B       		.uleb128 0xb
 4217 01bd 3B       		.uleb128 0x3b
 4218 01be 05       		.uleb128 0x5
 4219 01bf 11       		.uleb128 0x11
 4220 01c0 01       		.uleb128 0x1
 4221 01c1 12       		.uleb128 0x12
 4222 01c2 06       		.uleb128 0x6
 4223 01c3 40       		.uleb128 0x40
 4224 01c4 18       		.uleb128 0x18
 4225 01c5 9642     		.uleb128 0x2116
 4226 01c7 19       		.uleb128 0x19
 4227 01c8 01       		.uleb128 0x1
 4228 01c9 13       		.uleb128 0x13
 4229 01ca 00       		.byte	0
 4230 01cb 00       		.byte	0
 4231 01cc 1C       		.uleb128 0x1c
 4232 01cd 2E       		.uleb128 0x2e
 4233 01ce 00       		.byte	0
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 91


 4234 01cf 3F       		.uleb128 0x3f
 4235 01d0 19       		.uleb128 0x19
 4236 01d1 03       		.uleb128 0x3
 4237 01d2 0E       		.uleb128 0xe
 4238 01d3 3A       		.uleb128 0x3a
 4239 01d4 0B       		.uleb128 0xb
 4240 01d5 3B       		.uleb128 0x3b
 4241 01d6 05       		.uleb128 0x5
 4242 01d7 27       		.uleb128 0x27
 4243 01d8 19       		.uleb128 0x19
 4244 01d9 49       		.uleb128 0x49
 4245 01da 13       		.uleb128 0x13
 4246 01db 11       		.uleb128 0x11
 4247 01dc 01       		.uleb128 0x1
 4248 01dd 12       		.uleb128 0x12
 4249 01de 06       		.uleb128 0x6
 4250 01df 40       		.uleb128 0x40
 4251 01e0 18       		.uleb128 0x18
 4252 01e1 9642     		.uleb128 0x2116
 4253 01e3 19       		.uleb128 0x19
 4254 01e4 00       		.byte	0
 4255 01e5 00       		.byte	0
 4256 01e6 1D       		.uleb128 0x1d
 4257 01e7 2E       		.uleb128 0x2e
 4258 01e8 01       		.byte	0x1
 4259 01e9 3F       		.uleb128 0x3f
 4260 01ea 19       		.uleb128 0x19
 4261 01eb 03       		.uleb128 0x3
 4262 01ec 0E       		.uleb128 0xe
 4263 01ed 3A       		.uleb128 0x3a
 4264 01ee 0B       		.uleb128 0xb
 4265 01ef 3B       		.uleb128 0x3b
 4266 01f0 05       		.uleb128 0x5
 4267 01f1 49       		.uleb128 0x49
 4268 01f2 13       		.uleb128 0x13
 4269 01f3 11       		.uleb128 0x11
 4270 01f4 01       		.uleb128 0x1
 4271 01f5 12       		.uleb128 0x12
 4272 01f6 06       		.uleb128 0x6
 4273 01f7 40       		.uleb128 0x40
 4274 01f8 18       		.uleb128 0x18
 4275 01f9 9642     		.uleb128 0x2116
 4276 01fb 19       		.uleb128 0x19
 4277 01fc 01       		.uleb128 0x1
 4278 01fd 13       		.uleb128 0x13
 4279 01fe 00       		.byte	0
 4280 01ff 00       		.byte	0
 4281 0200 1E       		.uleb128 0x1e
 4282 0201 0B       		.uleb128 0xb
 4283 0202 01       		.byte	0x1
 4284 0203 11       		.uleb128 0x11
 4285 0204 01       		.uleb128 0x1
 4286 0205 12       		.uleb128 0x12
 4287 0206 06       		.uleb128 0x6
 4288 0207 00       		.byte	0
 4289 0208 00       		.byte	0
 4290 0209 1F       		.uleb128 0x1f
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 92


 4291 020a 0B       		.uleb128 0xb
 4292 020b 01       		.byte	0x1
 4293 020c 11       		.uleb128 0x11
 4294 020d 01       		.uleb128 0x1
 4295 020e 12       		.uleb128 0x12
 4296 020f 06       		.uleb128 0x6
 4297 0210 01       		.uleb128 0x1
 4298 0211 13       		.uleb128 0x13
 4299 0212 00       		.byte	0
 4300 0213 00       		.byte	0
 4301 0214 20       		.uleb128 0x20
 4302 0215 21       		.uleb128 0x21
 4303 0216 00       		.byte	0
 4304 0217 49       		.uleb128 0x49
 4305 0218 13       		.uleb128 0x13
 4306 0219 2F       		.uleb128 0x2f
 4307 021a 05       		.uleb128 0x5
 4308 021b 00       		.byte	0
 4309 021c 00       		.byte	0
 4310 021d 21       		.uleb128 0x21
 4311 021e 2E       		.uleb128 0x2e
 4312 021f 01       		.byte	0x1
 4313 0220 3F       		.uleb128 0x3f
 4314 0221 19       		.uleb128 0x19
 4315 0222 03       		.uleb128 0x3
 4316 0223 0E       		.uleb128 0xe
 4317 0224 3A       		.uleb128 0x3a
 4318 0225 0B       		.uleb128 0xb
 4319 0226 3B       		.uleb128 0x3b
 4320 0227 05       		.uleb128 0x5
 4321 0228 27       		.uleb128 0x27
 4322 0229 19       		.uleb128 0x19
 4323 022a 49       		.uleb128 0x49
 4324 022b 13       		.uleb128 0x13
 4325 022c 11       		.uleb128 0x11
 4326 022d 01       		.uleb128 0x1
 4327 022e 12       		.uleb128 0x12
 4328 022f 06       		.uleb128 0x6
 4329 0230 40       		.uleb128 0x40
 4330 0231 18       		.uleb128 0x18
 4331 0232 9642     		.uleb128 0x2116
 4332 0234 19       		.uleb128 0x19
 4333 0235 01       		.uleb128 0x1
 4334 0236 13       		.uleb128 0x13
 4335 0237 00       		.byte	0
 4336 0238 00       		.byte	0
 4337 0239 22       		.uleb128 0x22
 4338 023a 34       		.uleb128 0x34
 4339 023b 00       		.byte	0
 4340 023c 03       		.uleb128 0x3
 4341 023d 08       		.uleb128 0x8
 4342 023e 3A       		.uleb128 0x3a
 4343 023f 0B       		.uleb128 0xb
 4344 0240 3B       		.uleb128 0x3b
 4345 0241 05       		.uleb128 0x5
 4346 0242 49       		.uleb128 0x49
 4347 0243 13       		.uleb128 0x13
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 93


 4348 0244 02       		.uleb128 0x2
 4349 0245 18       		.uleb128 0x18
 4350 0246 00       		.byte	0
 4351 0247 00       		.byte	0
 4352 0248 23       		.uleb128 0x23
 4353 0249 34       		.uleb128 0x34
 4354 024a 00       		.byte	0
 4355 024b 03       		.uleb128 0x3
 4356 024c 0E       		.uleb128 0xe
 4357 024d 3A       		.uleb128 0x3a
 4358 024e 0B       		.uleb128 0xb
 4359 024f 3B       		.uleb128 0x3b
 4360 0250 05       		.uleb128 0x5
 4361 0251 49       		.uleb128 0x49
 4362 0252 13       		.uleb128 0x13
 4363 0253 3F       		.uleb128 0x3f
 4364 0254 19       		.uleb128 0x19
 4365 0255 3C       		.uleb128 0x3c
 4366 0256 19       		.uleb128 0x19
 4367 0257 00       		.byte	0
 4368 0258 00       		.byte	0
 4369 0259 24       		.uleb128 0x24
 4370 025a 34       		.uleb128 0x34
 4371 025b 00       		.byte	0
 4372 025c 03       		.uleb128 0x3
 4373 025d 0E       		.uleb128 0xe
 4374 025e 3A       		.uleb128 0x3a
 4375 025f 0B       		.uleb128 0xb
 4376 0260 3B       		.uleb128 0x3b
 4377 0261 0B       		.uleb128 0xb
 4378 0262 49       		.uleb128 0x49
 4379 0263 13       		.uleb128 0x13
 4380 0264 3F       		.uleb128 0x3f
 4381 0265 19       		.uleb128 0x19
 4382 0266 02       		.uleb128 0x2
 4383 0267 18       		.uleb128 0x18
 4384 0268 00       		.byte	0
 4385 0269 00       		.byte	0
 4386 026a 25       		.uleb128 0x25
 4387 026b 34       		.uleb128 0x34
 4388 026c 00       		.byte	0
 4389 026d 03       		.uleb128 0x3
 4390 026e 08       		.uleb128 0x8
 4391 026f 3A       		.uleb128 0x3a
 4392 0270 0B       		.uleb128 0xb
 4393 0271 3B       		.uleb128 0x3b
 4394 0272 0B       		.uleb128 0xb
 4395 0273 49       		.uleb128 0x49
 4396 0274 13       		.uleb128 0x13
 4397 0275 3F       		.uleb128 0x3f
 4398 0276 19       		.uleb128 0x19
 4399 0277 02       		.uleb128 0x2
 4400 0278 18       		.uleb128 0x18
 4401 0279 00       		.byte	0
 4402 027a 00       		.byte	0
 4403 027b 00       		.byte	0
 4404              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 94


 4405 0000 8C000000 		.4byte	0x8c
 4406 0004 0200     		.2byte	0x2
 4407 0006 00000000 		.4byte	.Ldebug_info0
 4408 000a 04       		.byte	0x4
 4409 000b 00       		.byte	0
 4410 000c 0000     		.2byte	0
 4411 000e 0000     		.2byte	0
 4412 0010 00000000 		.4byte	.LFB64
 4413 0014 0C000000 		.4byte	.LFE64-.LFB64
 4414 0018 00000000 		.4byte	.LFB65
 4415 001c 58010000 		.4byte	.LFE65-.LFB65
 4416 0020 00000000 		.4byte	.LFB66
 4417 0024 A0000000 		.4byte	.LFE66-.LFB66
 4418 0028 00000000 		.4byte	.LFB67
 4419 002c 2A000000 		.4byte	.LFE67-.LFB67
 4420 0030 00000000 		.4byte	.LFB68
 4421 0034 8C000000 		.4byte	.LFE68-.LFB68
 4422 0038 00000000 		.4byte	.LFB69
 4423 003c 48000000 		.4byte	.LFE69-.LFB69
 4424 0040 00000000 		.4byte	.LFB70
 4425 0044 1E000000 		.4byte	.LFE70-.LFB70
 4426 0048 00000000 		.4byte	.LFB71
 4427 004c 46000000 		.4byte	.LFE71-.LFB71
 4428 0050 00000000 		.4byte	.LFB72
 4429 0054 04010000 		.4byte	.LFE72-.LFB72
 4430 0058 00000000 		.4byte	.LFB73
 4431 005c 1E000000 		.4byte	.LFE73-.LFB73
 4432 0060 00000000 		.4byte	.LFB74
 4433 0064 5C040000 		.4byte	.LFE74-.LFB74
 4434 0068 00000000 		.4byte	.LFB75
 4435 006c 44000000 		.4byte	.LFE75-.LFB75
 4436 0070 00000000 		.4byte	.LFB76
 4437 0074 9C020000 		.4byte	.LFE76-.LFB76
 4438 0078 00000000 		.4byte	.LFB77
 4439 007c 74000000 		.4byte	.LFE77-.LFB77
 4440 0080 00000000 		.4byte	.LFB78
 4441 0084 38010000 		.4byte	.LFE78-.LFB78
 4442 0088 00000000 		.4byte	0
 4443 008c 00000000 		.4byte	0
 4444              		.section	.debug_ranges,"",%progbits
 4445              	.Ldebug_ranges0:
 4446 0000 00000000 		.4byte	.LFB64
 4447 0004 0C000000 		.4byte	.LFE64
 4448 0008 00000000 		.4byte	.LFB65
 4449 000c 58010000 		.4byte	.LFE65
 4450 0010 00000000 		.4byte	.LFB66
 4451 0014 A0000000 		.4byte	.LFE66
 4452 0018 00000000 		.4byte	.LFB67
 4453 001c 2A000000 		.4byte	.LFE67
 4454 0020 00000000 		.4byte	.LFB68
 4455 0024 8C000000 		.4byte	.LFE68
 4456 0028 00000000 		.4byte	.LFB69
 4457 002c 48000000 		.4byte	.LFE69
 4458 0030 00000000 		.4byte	.LFB70
 4459 0034 1E000000 		.4byte	.LFE70
 4460 0038 00000000 		.4byte	.LFB71
 4461 003c 46000000 		.4byte	.LFE71
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 95


 4462 0040 00000000 		.4byte	.LFB72
 4463 0044 04010000 		.4byte	.LFE72
 4464 0048 00000000 		.4byte	.LFB73
 4465 004c 1E000000 		.4byte	.LFE73
 4466 0050 00000000 		.4byte	.LFB74
 4467 0054 5C040000 		.4byte	.LFE74
 4468 0058 00000000 		.4byte	.LFB75
 4469 005c 44000000 		.4byte	.LFE75
 4470 0060 00000000 		.4byte	.LFB76
 4471 0064 9C020000 		.4byte	.LFE76
 4472 0068 00000000 		.4byte	.LFB77
 4473 006c 74000000 		.4byte	.LFE77
 4474 0070 00000000 		.4byte	.LFB78
 4475 0074 38010000 		.4byte	.LFE78
 4476 0078 00000000 		.4byte	0
 4477 007c 00000000 		.4byte	0
 4478              		.section	.debug_line,"",%progbits
 4479              	.Ldebug_line0:
 4480 0000 3D040000 		.section	.debug_str,"MS",%progbits,1
 4480      02002802 
 4480      00000201 
 4480      FB0E0D00 
 4480      01010101 
 4481              	.LASF111:
 4482 0000 745F6D6F 		.ascii	"t_modem\000"
 4482      64656D00 
 4483              	.LASF12:
 4484 0008 75696E74 		.ascii	"uint16\000"
 4484      313600
 4485              	.LASF51:
 4486 000f 746D5F68 		.ascii	"tm_hour\000"
 4486      6F757200 
 4487              	.LASF36:
 4488 0017 6E756D5F 		.ascii	"num_invalid_readings\000"
 4488      696E7661 
 4488      6C69645F 
 4488      72656164 
 4488      696E6773 
 4489              	.LASF171:
 4490 002c 433A5C55 		.ascii	"C:\\Users\\dantz\\Documents\\GitHub\\notoriOS\\noto"
 4490      73657273 
 4490      5C64616E 
 4490      747A5C44 
 4490      6F63756D 
 4491 0059 72694F53 		.ascii	"riOS.cydsn\000"
 4491      2E637964 
 4491      736E00
 4492              	.LASF145:
 4493 0064 62756666 		.ascii	"buffer_overflow\000"
 4493      65725F6F 
 4493      76657266 
 4493      6C6F7700 
 4494              	.LASF142:
 4495 0074 66696C65 		.ascii	"fileName\000"
 4495      4E616D65 
 4495      00
 4496              	.LASF0:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 96


 4497 007d 7369676E 		.ascii	"signed char\000"
 4497      65642063 
 4497      68617200 
 4498              	.LASF85:
 4499 0089 636F756E 		.ascii	"countDownResetCondition\000"
 4499      74446F77 
 4499      6E526573 
 4499      6574436F 
 4499      6E646974 
 4500              	.LASF172:
 4501 00a1 57616B65 		.ascii	"Wakeup_ISR\000"
 4501      75705F49 
 4501      535200
 4502              	.LASF169:
 4503 00ac 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4503      43313120 
 4503      352E342E 
 4503      31203230 
 4503      31363036 
 4504 00df 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4504      20726576 
 4504      6973696F 
 4504      6E203233 
 4504      37373135 
 4505 0112 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4505      66756E63 
 4505      74696F6E 
 4505      2D736563 
 4505      74696F6E 
 4506              	.LASF109:
 4507 013a 745F7072 		.ascii	"t_pressure\000"
 4507      65737375 
 4507      726500
 4508              	.LASF26:
 4509 0145 4D6F6E74 		.ascii	"Month\000"
 4509      6800
 4510              	.LASF7:
 4511 014b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4511      206C6F6E 
 4511      6720756E 
 4511      7369676E 
 4511      65642069 
 4512              	.LASF22:
 4513 0162 486F7572 		.ascii	"Hour\000"
 4513      00
 4514              	.LASF149:
 4515 0167 6D6F6465 		.ascii	"modem_state\000"
 4515      6D5F7374 
 4515      61746500 
 4516              	.LASF159:
 4517 0173 616C6172 		.ascii	"alarmMeasure\000"
 4517      6D4D6561 
 4517      73757265 
 4517      00
 4518              	.LASF143:
 4519 0180 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4519      52784275 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 97


 4519      66666572 
 4519      00
 4520              	.LASF167:
 4521 018d 74696D65 		.ascii	"timetoLevelSensor\000"
 4521      746F4C65 
 4521      76656C53 
 4521      656E736F 
 4521      7200
 4522              	.LASF107:
 4523 019f 745F6C65 		.ascii	"t_level_sensor\000"
 4523      76656C5F 
 4523      73656E73 
 4523      6F7200
 4524              	.LASF6:
 4525 01ae 6C6F6E67 		.ascii	"long long int\000"
 4525      206C6F6E 
 4525      6720696E 
 4525      7400
 4526              	.LASF120:
 4527 01bc 7061636B 		.ascii	"packets\000"
 4527      65747300 
 4528              	.LASF67:
 4529 01c4 65636E6F 		.ascii	"ecno\000"
 4529      00
 4530              	.LASF160:
 4531 01c9 74696D65 		.ascii	"timeToMeasure\000"
 4531      546F4D65 
 4531      61737572 
 4531      6500
 4532              	.LASF70:
 4533 01d7 74696D65 		.ascii	"time_to_network_connect\000"
 4533      5F746F5F 
 4533      6E657477 
 4533      6F726B5F 
 4533      636F6E6E 
 4534              	.LASF162:
 4535 01ef 74696D65 		.ascii	"timeToSync\000"
 4535      546F5379 
 4535      6E6300
 4536              	.LASF39:
 4537 01fa 766F6C74 		.ascii	"voltage_solar\000"
 4537      6167655F 
 4537      736F6C61 
 4537      7200
 4538              	.LASF40:
 4539 0208 766F6C74 		.ascii	"voltage_charge_current\000"
 4539      6167655F 
 4539      63686172 
 4539      67655F63 
 4539      75727265 
 4540              	.LASF141:
 4541 021f 75706772 		.ascii	"upgrade_status\000"
 4541      6164655F 
 4541      73746174 
 4541      757300
 4542              	.LASF123:
 4543 022e 635F6461 		.ascii	"c_data_count_sent\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 98


 4543      74615F63 
 4543      6F756E74 
 4543      5F73656E 
 4543      7400
 4544              	.LASF64:
 4545 0240 6D6F6465 		.ascii	"modem_info_t\000"
 4545      6D5F696E 
 4545      666F5F74 
 4545      00
 4546              	.LASF65:
 4547 024d 72786C65 		.ascii	"rxlev\000"
 4547      7600
 4548              	.LASF4:
 4549 0253 6C6F6E67 		.ascii	"long int\000"
 4549      20696E74 
 4549      00
 4550              	.LASF71:
 4551 025c 74696D65 		.ascii	"time_to_acquire_ip\000"
 4551      5F746F5F 
 4551      61637175 
 4551      6972655F 
 4551      697000
 4552              	.LASF86:
 4553 026f 616C6172 		.ascii	"alarm\000"
 4553      6D00
 4554              	.LASF45:
 4555 0275 70726573 		.ascii	"pressure_voltage_off\000"
 4555      73757265 
 4555      5F766F6C 
 4555      74616765 
 4555      5F6F6666 
 4556              	.LASF11:
 4557 028a 75696E74 		.ascii	"uint8\000"
 4557      3800
 4558              	.LASF115:
 4559 0290 635F7472 		.ascii	"c_try_counter\000"
 4559      795F636F 
 4559      756E7465 
 4559      7200
 4560              	.LASF126:
 4561 029e 73656E64 		.ascii	"send_time\000"
 4561      5F74696D 
 4561      6500
 4562              	.LASF165:
 4563 02a8 74696D65 		.ascii	"timeToAppLED\000"
 4563      546F4170 
 4563      704C4544 
 4563      00
 4564              	.LASF16:
 4565 02b5 696E7433 		.ascii	"int32\000"
 4565      3200
 4566              	.LASF73:
 4567 02bb 6E6F6465 		.ascii	"node_type\000"
 4567      5F747970 
 4567      6500
 4568              	.LASF112:
 4569 02c5 73796E63 		.ascii	"syncData\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 99


 4569      44617461 
 4569      00
 4570              	.LASF121:
 4571 02ce 6E657477 		.ascii	"network_time\000"
 4571      6F726B5F 
 4571      74696D65 
 4571      00
 4572              	.LASF13:
 4573 02db 75696E74 		.ascii	"uint32\000"
 4573      333200
 4574              	.LASF62:
 4575 02e2 6D6F6465 		.ascii	"model_id\000"
 4575      6C5F6964 
 4575      00
 4576              	.LASF33:
 4577 02eb 616C6C5F 		.ascii	"all_level_readings\000"
 4577      6C657665 
 4577      6C5F7265 
 4577      6164696E 
 4577      677300
 4578              	.LASF82:
 4579 02fe 636F756E 		.ascii	"countDownValue\000"
 4579      74446F77 
 4579      6E56616C 
 4579      756500
 4580              	.LASF137:
 4581 030d 75706772 		.ascii	"upgraded\000"
 4581      61646564 
 4581      00
 4582              	.LASF53:
 4583 0316 746D5F6D 		.ascii	"tm_mon\000"
 4583      6F6E00
 4584              	.LASF77:
 4585 031d 64656275 		.ascii	"debug_level\000"
 4585      675F6C65 
 4585      76656C00 
 4586              	.LASF139:
 4587 0329 706F7274 		.ascii	"port\000"
 4587      00
 4588              	.LASF58:
 4589 032e 76616C75 		.ascii	"value\000"
 4589      6500
 4590              	.LASF138:
 4591 0334 686F7374 		.ascii	"host\000"
 4591      00
 4592              	.LASF54:
 4593 0339 746D5F79 		.ascii	"tm_year\000"
 4593      65617200 
 4594              	.LASF161:
 4595 0341 616C6172 		.ascii	"alarmSync\000"
 4595      6D53796E 
 4595      6300
 4596              	.LASF44:
 4597 034b 70726573 		.ascii	"pressure_voltage_on\000"
 4597      73757265 
 4597      5F766F6C 
 4597      74616765 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 100


 4597      5F6F6E00 
 4598              	.LASF8:
 4599 035f 756E7369 		.ascii	"unsigned int\000"
 4599      676E6564 
 4599      20696E74 
 4599      00
 4600              	.LASF135:
 4601 036c 73657454 		.ascii	"setTime\000"
 4601      696D6500 
 4602              	.LASF60:
 4603 0374 6B65795F 		.ascii	"key_value_t\000"
 4603      76616C75 
 4603      655F7400 
 4604              	.LASF97:
 4605 0380 41796F49 		.ascii	"AyoItsTime\000"
 4605      74735469 
 4605      6D6500
 4606              	.LASF35:
 4607 038b 6E756D5F 		.ascii	"num_valid_readings\000"
 4607      76616C69 
 4607      645F7265 
 4607      6164696E 
 4607      677300
 4608              	.LASF125:
 4609 039e 68747470 		.ascii	"http_chunk\000"
 4609      5F636875 
 4609      6E6B00
 4610              	.LASF132:
 4611 03a9 6D5F766F 		.ascii	"m_voltage\000"
 4611      6C746167 
 4611      6500
 4612              	.LASF5:
 4613 03b3 6C6F6E67 		.ascii	"long unsigned int\000"
 4613      20756E73 
 4613      69676E65 
 4613      6420696E 
 4613      7400
 4614              	.LASF94:
 4615 03c5 7472795F 		.ascii	"try_counter\000"
 4615      636F756E 
 4615      74657200 
 4616              	.LASF116:
 4617 03d1 64617461 		.ascii	"data_count_desired\000"
 4617      5F636F75 
 4617      6E745F64 
 4617      65736972 
 4617      656400
 4618              	.LASF38:
 4619 03e4 766F6C74 		.ascii	"voltage_battery\000"
 4619      6167655F 
 4619      62617474 
 4619      65727900 
 4620              	.LASF24:
 4621 03f4 4461794F 		.ascii	"DayOfMonth\000"
 4621      664D6F6E 
 4621      746800
 4622              	.LASF129:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 101


 4623 03ff 6D616B65 		.ascii	"makeMeasurements\000"
 4623      4D656173 
 4623      7572656D 
 4623      656E7473 
 4623      00
 4624              	.LASF148:
 4625 0410 64617461 		.ascii	"data\000"
 4625      00
 4626              	.LASF91:
 4627 0415 65705F70 		.ascii	"ep_port\000"
 4627      6F727400 
 4628              	.LASF57:
 4629 041d 746D5F69 		.ascii	"tm_isdst\000"
 4629      73647374 
 4629      00
 4630              	.LASF87:
 4631 0426 6D6F6465 		.ascii	"modem_info\000"
 4631      6D5F696E 
 4631      666F00
 4632              	.LASF90:
 4633 0431 65705F68 		.ascii	"ep_host\000"
 4633      6F737400 
 4634              	.LASF14:
 4635 0439 696E7438 		.ascii	"int8\000"
 4635      00
 4636              	.LASF96:
 4637 043e 576F726B 		.ascii	"WorkWorkWorkWorkWorkWork\000"
 4637      576F726B 
 4637      576F726B 
 4637      576F726B 
 4637      576F726B 
 4638              	.LASF117:
 4639 0457 635F6461 		.ascii	"c_data_count_desired\000"
 4639      74615F63 
 4639      6F756E74 
 4639      5F646573 
 4639      69726564 
 4640              	.LASF110:
 4641 046c 745F7364 		.ascii	"t_sd_card\000"
 4641      5F636172 
 4641      6400
 4642              	.LASF2:
 4643 0476 73686F72 		.ascii	"short int\000"
 4643      7420696E 
 4643      7400
 4644              	.LASF164:
 4645 0480 616C6172 		.ascii	"alarmAppLED\000"
 4645      6D417070 
 4645      4C454400 
 4646              	.LASF150:
 4647 048c 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 4647      6D5F7374 
 4647      6172745F 
 4647      74696D65 
 4647      5F737461 
 4648              	.LASF89:
 4649 04a3 7379735F 		.ascii	"sys_info_t\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 102


 4649      696E666F 
 4649      5F7400
 4650              	.LASF81:
 4651 04ae 75706461 		.ascii	"updatable_parameters_t\000"
 4651      7461626C 
 4651      655F7061 
 4651      72616D65 
 4651      74657273 
 4652              	.LASF98:
 4653 04c5 616C6172 		.ascii	"alarmType\000"
 4653      6D547970 
 4653      6500
 4654              	.LASF146:
 4655 04cf 64617461 		.ascii	"dataPointsInStack\000"
 4655      506F696E 
 4655      7473496E 
 4655      53746163 
 4655      6B00
 4656              	.LASF50:
 4657 04e1 746D5F6D 		.ascii	"tm_min\000"
 4657      696E00
 4658              	.LASF140:
 4659 04e8 726F7574 		.ascii	"route\000"
 4659      6500
 4660              	.LASF99:
 4661 04ee 616C6172 		.ascii	"alarmToBeUpdated\000"
 4661      6D546F42 
 4661      65557064 
 4661      61746564 
 4661      00
 4662              	.LASF21:
 4663 04ff 73697A65 		.ascii	"sizetype\000"
 4663      74797065 
 4663      00
 4664              	.LASF56:
 4665 0508 746D5F79 		.ascii	"tm_yday\000"
 4665      64617900 
 4666              	.LASF92:
 4667 0510 7379735F 		.ascii	"sys_settings_t\000"
 4667      73657474 
 4667      696E6773 
 4667      5F7400
 4668              	.LASF136:
 4669 051f 6C6F6361 		.ascii	"localTime\000"
 4669      6C54696D 
 4669      6500
 4670              	.LASF163:
 4671 0529 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 4671      546F5379 
 4671      636E5265 
 4671      6D6F7465 
 4671      50617261 
 4672              	.LASF59:
 4673 0540 74696D65 		.ascii	"timeStamp\000"
 4673      5374616D 
 4673      7000
 4674              	.LASF28:
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 103


 4675 054a 5254435F 		.ascii	"RTC_TIME_DATE\000"
 4675      54494D45 
 4675      5F444154 
 4675      4500
 4676              	.LASF152:
 4677 0558 75706461 		.ascii	"updatable_parameters\000"
 4677      7461626C 
 4677      655F7061 
 4677      72616D65 
 4677      74657273 
 4678              	.LASF103:
 4679 056d 43726561 		.ascii	"CreateAlarm\000"
 4679      7465416C 
 4679      61726D00 
 4680              	.LASF124:
 4681 0579 7061636B 		.ascii	"packet\000"
 4681      657400
 4682              	.LASF113:
 4683 0580 735F7273 		.ascii	"s_rsrp\000"
 4683      727000
 4684              	.LASF41:
 4685 0587 766F6C74 		.ascii	"voltage_pressure\000"
 4685      6167655F 
 4685      70726573 
 4685      73757265 
 4685      00
 4686              	.LASF154:
 4687 0598 68747470 		.ascii	"http_request\000"
 4687      5F726571 
 4687      75657374 
 4687      00
 4688              	.LASF17:
 4689 05a5 666C6F61 		.ascii	"float\000"
 4689      7400
 4690              	.LASF37:
 4691 05ab 6C657665 		.ascii	"level_sensor_t\000"
 4691      6C5F7365 
 4691      6E736F72 
 4691      5F7400
 4692              	.LASF114:
 4693 05ba 735F7273 		.ascii	"s_rscp\000"
 4693      637000
 4694              	.LASF128:
 4695 05c1 636F6E66 		.ascii	"configureRemoteParams\000"
 4695      69677572 
 4695      6552656D 
 4695      6F746550 
 4695      6172616D 
 4696              	.LASF168:
 4697 05d7 44617461 		.ascii	"Data_fileName\000"
 4697      5F66696C 
 4697      654E616D 
 4697      6500
 4698              	.LASF95:
 4699 05e5 6D6F6465 		.ascii	"modem_status\000"
 4699      6D5F7374 
 4699      61747573 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 104


 4699      00
 4700              	.LASF29:
 4701 05f2 74657374 		.ascii	"test_name\000"
 4701      5F6E616D 
 4701      6500
 4702              	.LASF27:
 4703 05fc 59656172 		.ascii	"Year\000"
 4703      00
 4704              	.LASF80:
 4705 0601 5F426F6F 		.ascii	"_Bool\000"
 4705      6C00
 4706              	.LASF10:
 4707 0607 696E7433 		.ascii	"int32_t\000"
 4707      325F7400 
 4708              	.LASF1:
 4709 060f 756E7369 		.ascii	"unsigned char\000"
 4709      676E6564 
 4709      20636861 
 4709      7200
 4710              	.LASF158:
 4711 061d 73797374 		.ascii	"system_settings\000"
 4711      656D5F73 
 4711      65747469 
 4711      6E677300 
 4712              	.LASF69:
 4713 062d 72737270 		.ascii	"rsrp\000"
 4713      00
 4714              	.LASF68:
 4715 0632 72737271 		.ascii	"rsrq\000"
 4715      00
 4716              	.LASF100:
 4717 0637 52657365 		.ascii	"ResetAlarm\000"
 4717      74416C61 
 4717      726D00
 4718              	.LASF127:
 4719 0642 735F7365 		.ascii	"s_send_time\000"
 4719      6E645F74 
 4719      696D6500 
 4720              	.LASF76:
 4721 064e 73796E63 		.ascii	"sync_time\000"
 4721      5F74696D 
 4721      6500
 4722              	.LASF47:
 4723 0658 70726573 		.ascii	"pressure_depth\000"
 4723      73757265 
 4723      5F646570 
 4723      746800
 4724              	.LASF66:
 4725 0667 72736370 		.ascii	"rscp\000"
 4725      00
 4726              	.LASF23:
 4727 066c 4461794F 		.ascii	"DayOfWeek\000"
 4727      66576565 
 4727      6B00
 4728              	.LASF32:
 4729 0676 74657374 		.ascii	"test_t\000"
 4729      5F7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 105


 4730              	.LASF157:
 4731 067d 73797374 		.ascii	"system_info\000"
 4731      656D5F69 
 4731      6E666F00 
 4732              	.LASF63:
 4733 0689 696D6569 		.ascii	"imei\000"
 4733      00
 4734              	.LASF31:
 4735 068e 72656173 		.ascii	"reason\000"
 4735      6F6E00
 4736              	.LASF101:
 4737 0695 616C6172 		.ascii	"alarmToBeReset\000"
 4737      6D546F42 
 4737      65526573 
 4737      657400
 4738              	.LASF106:
 4739 06a4 43686963 		.ascii	"ChickityCheckYourselfBeforeYouWreckYourself\000"
 4739      6B697479 
 4739      43686563 
 4739      6B596F75 
 4739      7273656C 
 4740              	.LASF122:
 4741 06d0 64617461 		.ascii	"data_count_sent\000"
 4741      5F636F75 
 4741      6E745F73 
 4741      656E7400 
 4742              	.LASF72:
 4743 06e0 6D6F6465 		.ascii	"modem_stats_t\000"
 4743      6D5F7374 
 4743      6174735F 
 4743      7400
 4744              	.LASF46:
 4745 06ee 70726573 		.ascii	"pressure_current\000"
 4745      73757265 
 4745      5F637572 
 4745      72656E74 
 4745      00
 4746              	.LASF42:
 4747 06ff 76616C69 		.ascii	"valid\000"
 4747      6400
 4748              	.LASF166:
 4749 0705 616C6172 		.ascii	"alarmLevelSensor\000"
 4749      6D4C6576 
 4749      656C5365 
 4749      6E736F72 
 4749      00
 4750              	.LASF55:
 4751 0716 746D5F77 		.ascii	"tm_wday\000"
 4751      64617900 
 4752              	.LASF79:
 4753 071e 4C657665 		.ascii	"Level_Sensor_freq\000"
 4753      6C5F5365 
 4753      6E736F72 
 4753      5F667265 
 4753      7100
 4754              	.LASF144:
 4755 0730 6C657665 		.ascii	"level_sensor_inbox\000"
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 106


 4755      6C5F7365 
 4755      6E736F72 
 4755      5F696E62 
 4755      6F7800
 4756              	.LASF20:
 4757 0743 6C6F6E67 		.ascii	"long double\000"
 4757      20646F75 
 4757      626C6500 
 4758              	.LASF119:
 4759 074f 6368756E 		.ascii	"chunk\000"
 4759      6B00
 4760              	.LASF130:
 4761 0755 635F7469 		.ascii	"c_timeStamp\000"
 4761      6D655374 
 4761      616D7000 
 4762              	.LASF19:
 4763 0761 63686172 		.ascii	"char\000"
 4763      00
 4764              	.LASF151:
 4765 0766 6D6F6465 		.ascii	"modem_stats\000"
 4765      6D5F7374 
 4765      61747300 
 4766              	.LASF156:
 4767 0772 68747470 		.ascii	"http_route\000"
 4767      5F726F75 
 4767      746500
 4768              	.LASF118:
 4769 077d 706F7274 		.ascii	"portConfig\000"
 4769      436F6E66 
 4769      696700
 4770              	.LASF9:
 4771 0788 5F5F696E 		.ascii	"__int32_t\000"
 4771      7433325F 
 4771      7400
 4772              	.LASF93:
 4773 0792 756E6971 		.ascii	"uniqueId\000"
 4773      75654964 
 4773      00
 4774              	.LASF133:
 4775 079b 6D5F6C65 		.ascii	"m_level_sensor\000"
 4775      76656C5F 
 4775      73656E73 
 4775      6F7200
 4776              	.LASF34:
 4777 07aa 6C657665 		.ascii	"level_reading\000"
 4777      6C5F7265 
 4777      6164696E 
 4777      6700
 4778              	.LASF173:
 4779 07b8 4C617942 		.ascii	"LayBack\000"
 4779      61636B00 
 4780              	.LASF3:
 4781 07c0 73686F72 		.ascii	"short unsigned int\000"
 4781      7420756E 
 4781      7369676E 
 4781      65642069 
 4781      6E7400
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 107


 4782              	.LASF61:
 4783 07d3 73696D5F 		.ascii	"sim_id\000"
 4783      696400
 4784              	.LASF52:
 4785 07da 746D5F6D 		.ascii	"tm_mday\000"
 4785      64617900 
 4786              	.LASF104:
 4787 07e2 6E657741 		.ascii	"newAlarm\000"
 4787      6C61726D 
 4787      00
 4788              	.LASF49:
 4789 07eb 746D5F73 		.ascii	"tm_sec\000"
 4789      656300
 4790              	.LASF134:
 4791 07f2 6D5F7072 		.ascii	"m_pressure\000"
 4791      65737375 
 4791      726500
 4792              	.LASF30:
 4793 07fd 73746174 		.ascii	"status\000"
 4793      757300
 4794              	.LASF147:
 4795 0804 64617461 		.ascii	"dataPointsInStackDesired\000"
 4795      506F696E 
 4795      7473496E 
 4795      53746163 
 4795      6B446573 
 4796              	.LASF78:
 4797 081d 4170705F 		.ascii	"App_LED_freq\000"
 4797      4C45445F 
 4797      66726571 
 4797      00
 4798              	.LASF108:
 4799 082a 745F766F 		.ascii	"t_voltages\000"
 4799      6C746167 
 4799      657300
 4800              	.LASF170:
 4801 0835 6E6F746F 		.ascii	"notoriOS.c\000"
 4801      72694F53 
 4801      2E6300
 4802              	.LASF155:
 4803 0840 68747470 		.ascii	"http_body\000"
 4803      5F626F64 
 4803      7900
 4804              	.LASF15:
 4805 084a 696E7431 		.ascii	"int16\000"
 4805      3600
 4806              	.LASF84:
 4807 0850 636F756E 		.ascii	"countDownType\000"
 4807      74446F77 
 4807      6E547970 
 4807      6500
 4808              	.LASF83:
 4809 085e 63757272 		.ascii	"currentCountDownValue\000"
 4809      656E7443 
 4809      6F756E74 
 4809      446F776E 
 4809      56616C75 
ARM GAS  C:\Users\dantz\AppData\Local\Temp\cczO41Fg.s 			page 108


 4810              	.LASF74:
 4811 0874 73696D5F 		.ascii	"sim_type\000"
 4811      74797065 
 4811      00
 4812              	.LASF25:
 4813 087d 4461794F 		.ascii	"DayOfYear\000"
 4813      66596561 
 4813      7200
 4814              	.LASF48:
 4815 0887 70726573 		.ascii	"pressure_t\000"
 4815      73757265 
 4815      5F7400
 4816              	.LASF102:
 4817 0892 416C6172 		.ascii	"AlarmReady\000"
 4817      6D526561 
 4817      647900
 4818              	.LASF105:
 4819 089d 52656164 		.ascii	"ReadyOrNot\000"
 4819      794F724E 
 4819      6F7400
 4820              	.LASF174:
 4821 08a8 6D61696E 		.ascii	"main\000"
 4821      00
 4822              	.LASF88:
 4823 08ad 63686970 		.ascii	"chip_uniqueId\000"
 4823      5F756E69 
 4823      71756549 
 4823      6400
 4824              	.LASF75:
 4825 08bb 6D656173 		.ascii	"measure_time\000"
 4825      7572655F 
 4825      74696D65 
 4825      00
 4826              	.LASF18:
 4827 08c8 646F7562 		.ascii	"double\000"
 4827      6C6500
 4828              	.LASF153:
 4829 08cf 6170705F 		.ascii	"app_led_inbox\000"
 4829      6C65645F 
 4829      696E626F 
 4829      7800
 4830              	.LASF43:
 4831 08dd 766F6C74 		.ascii	"voltage_t\000"
 4831      6167655F 
 4831      7400
 4832              	.LASF131:
 4833 08e7 635F6E6F 		.ascii	"c_node_type\000"
 4833      64655F74 
 4833      79706500 
 4834              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
